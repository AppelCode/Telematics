
D:/CAR/TelematicsLocal/CybeSe/Telematics/src/telematics/target/telematics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017698  08080018  08080018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  080976b0  080976b0  000276b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .backup       00000004  40024000  080976b8  00034000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000a8  20000400  080976bc  00040400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000043d0  200004a8  200004a8  000504a8  2**3
                  ALLOC
  6 .module_info_suffix 00000028  08097764  08097764  00047764  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  0809778c  0809778c  0004778c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001867c9  00000000  00000000  00047790  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0002392c  00000000  00000000  001cdf59  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0004a721  00000000  00000000  001f1885  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003c38  00000000  00000000  0023bfa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005a98  00000000  00000000  0023fbde  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003fdfb  00000000  00000000  00245676  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00057217  00000000  00000000  00285471  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ac6d1  00000000  00000000  002dc688  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00011204  00000000  00000000  00388d5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080018 <user_part_module>:
 8080018:	84 3c 09 08                                         .<..

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <module_user_pre_init+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <module_user_pre_init+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f013 fda6 	bl	8093b7e <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <module_user_pre_init+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <module_user_pre_init+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f013 fdc6 	bl	8093bca <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <module_user_pre_init+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000400 	.word	0x20000400
 8080048:	080976bc 	.word	0x080976bc
 808004c:	200004a8 	.word	0x200004a8
 8080050:	200004a8 	.word	0x200004a8
 8080054:	20004878 	.word	0x20004878
 8080058:	20004878 	.word	0x20004878

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f012 f851 	bl	8092104 <module_user_init_hook>
 8080062:	4b07      	ldr	r3, [pc, #28]	; (8080080 <module_user_init+0x24>)
 8080064:	4c07      	ldr	r4, [pc, #28]	; (8080084 <module_user_init+0x28>)
 8080066:	461e      	mov	r6, r3
 8080068:	1ae4      	subs	r4, r4, r3
 808006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808006c:	2500      	movs	r5, #0
 808006e:	42a5      	cmp	r5, r4
 8080070:	d004      	beq.n	808007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8080076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f8      	b.n	808006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 808007c:	bd70      	pop	{r4, r5, r6, pc}
 808007e:	bf00      	nop
 8080080:	08097620 	.word	0x08097620
 8080084:	080976a4 	.word	0x080976a4

08080088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080088:	f000 b8ac 	b.w	80801e4 <setup>

0808008c <module_user_loop>:
}

void module_user_loop() {
 808008c:	b508      	push	{r3, lr}
    loop();
 808008e:	f000 f961 	bl	8080354 <loop>
    _post_loop();
}
 8080092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 8080096:	f011 bff3 	b.w	8092080 <_post_loop>

0808009a <_Znwj>:
 808009a:	f011 ba47 	b.w	809152c <malloc>

0808009e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 808009e:	f011 ba45 	b.w	809152c <malloc>

080800a2 <_ZdlPv>:
 80800a2:	f011 ba4b 	b.w	809153c <free>

080800a6 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
 80800a6:	f011 ba49 	b.w	809153c <free>

080800aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800aa:	7800      	ldrb	r0, [r0, #0]
 80800ac:	fab0 f080 	clz	r0, r0
 80800b0:	0940      	lsrs	r0, r0, #5
 80800b2:	4770      	bx	lr

080800b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800b4:	2301      	movs	r3, #1
 80800b6:	7003      	strb	r3, [r0, #0]
 80800b8:	4770      	bx	lr

080800ba <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
 80800ba:	7c03      	ldrb	r3, [r0, #16]
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
 80800bc:	4602      	mov	r2, r0
 80800be:	f003 0308 	and.w	r3, r3, #8
 80800c2:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80800c6:	b12b      	cbz	r3, 80800d4 <_ZN4File9availableEv+0x1a>
 80800c8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80800ca:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
 80800cc:	1a18      	subs	r0, r3, r0
 80800ce:	bf48      	it	mi
 80800d0:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
 80800d4:	4770      	bx	lr

080800d6 <_ZN4FileD1Ev>:
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
#if ARDUINO_FILE_USES_STREAM
class File : public FatFile, public Stream {
 80800d6:	4770      	bx	lr

080800d8 <_Z8callbackPcPhj>:
unsigned char key[32];

// recieve message
//used for handling all subscription messages
//will be updated using for updating rec buffer
void callback(char* topic, byte* payload, unsigned int length) {
 80800d8:	b5b0      	push	{r4, r5, r7, lr}
 80800da:	4615      	mov	r5, r2
    char p[length + 1];
 80800dc:	f102 0308 	add.w	r3, r2, #8
 80800e0:	f023 0307 	bic.w	r3, r3, #7
unsigned char key[32];

// recieve message
//used for handling all subscription messages
//will be updated using for updating rec buffer
void callback(char* topic, byte* payload, unsigned int length) {
 80800e4:	b084      	sub	sp, #16
 80800e6:	af00      	add	r7, sp, #0
    char p[length + 1];
 80800e8:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(p, payload, length);
 80800ec:	4668      	mov	r0, sp
 80800ee:	f013 fd46 	bl	8093b7e <memcpy>
    p[length] = NULL;
 80800f2:	2400      	movs	r4, #0
    String message(p);
 80800f4:	4669      	mov	r1, sp
 80800f6:	4638      	mov	r0, r7
//used for handling all subscription messages
//will be updated using for updating rec buffer
void callback(char* topic, byte* payload, unsigned int length) {
    char p[length + 1];
    memcpy(p, payload, length);
    p[length] = NULL;
 80800f8:	f80d 4005 	strb.w	r4, [sp, r5]
    String message(p);
 80800fc:	f011 fd5b 	bl	8091bb6 <_ZN6StringC1EPK19__FlashStringHelper>

    if (message.equals("RED"))
 8080100:	4914      	ldr	r1, [pc, #80]	; (8080154 <_Z8callbackPcPhj+0x7c>)
 8080102:	4638      	mov	r0, r7
 8080104:	f011 fd8a 	bl	8091c1c <_ZNK6String6equalsEPKc>
 8080108:	4605      	mov	r5, r0
 808010a:	b118      	cbz	r0, 8080114 <_Z8callbackPcPhj+0x3c>
        RGB.color(255, 0, 0);
 808010c:	4622      	mov	r2, r4
 808010e:	4621      	mov	r1, r4
 8080110:	20ff      	movs	r0, #255	; 0xff
 8080112:	e013      	b.n	808013c <_Z8callbackPcPhj+0x64>
    else if (message.equals("GREEN"))
 8080114:	4910      	ldr	r1, [pc, #64]	; (8080158 <_Z8callbackPcPhj+0x80>)
 8080116:	4638      	mov	r0, r7
 8080118:	f011 fd80 	bl	8091c1c <_ZNK6String6equalsEPKc>
 808011c:	4604      	mov	r4, r0
 808011e:	b110      	cbz	r0, 8080126 <_Z8callbackPcPhj+0x4e>
        RGB.color(0, 255, 0);
 8080120:	462a      	mov	r2, r5
 8080122:	21ff      	movs	r1, #255	; 0xff
 8080124:	e009      	b.n	808013a <_Z8callbackPcPhj+0x62>
    else if (message.equals("BLUE"))
 8080126:	490d      	ldr	r1, [pc, #52]	; (808015c <_Z8callbackPcPhj+0x84>)
 8080128:	4638      	mov	r0, r7
 808012a:	f011 fd77 	bl	8091c1c <_ZNK6String6equalsEPKc>
        RGB.color(0, 0, 255);
 808012e:	22ff      	movs	r2, #255	; 0xff

    if (message.equals("RED"))
        RGB.color(255, 0, 0);
    else if (message.equals("GREEN"))
        RGB.color(0, 255, 0);
    else if (message.equals("BLUE"))
 8080130:	b110      	cbz	r0, 8080138 <_Z8callbackPcPhj+0x60>
        RGB.color(0, 0, 255);
 8080132:	4621      	mov	r1, r4
 8080134:	4620      	mov	r0, r4
 8080136:	e001      	b.n	808013c <_Z8callbackPcPhj+0x64>
    else
        RGB.color(255, 255, 255);
 8080138:	4611      	mov	r1, r2
 808013a:	4610      	mov	r0, r2
 808013c:	f011 ff40 	bl	8091fc0 <_ZN8RGBClass5colorEiii>
    delay(1000);
 8080140:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080144:	f011 ff1a 	bl	8091f7c <delay>
//will be updated using for updating rec buffer
void callback(char* topic, byte* payload, unsigned int length) {
    char p[length + 1];
    memcpy(p, payload, length);
    p[length] = NULL;
    String message(p);
 8080148:	4638      	mov	r0, r7
 808014a:	f011 fced 	bl	8091b28 <_ZN6StringD1Ev>
    else if (message.equals("BLUE"))
        RGB.color(0, 0, 255);
    else
        RGB.color(255, 255, 255);
    delay(1000);
}
 808014e:	3710      	adds	r7, #16
 8080150:	46bd      	mov	sp, r7
 8080152:	bdb0      	pop	{r4, r5, r7, pc}
 8080154:	08093cd8 	.word	0x08093cd8
 8080158:	08093cdc 	.word	0x08093cdc
 808015c:	08093ce2 	.word	0x08093ce2

08080160 <_ZN4FileD0Ev>:
 8080160:	b510      	push	{r4, lr}
 8080162:	4604      	mov	r4, r0
 8080164:	f7ff ff9d 	bl	80800a2 <_ZdlPv>
 8080168:	4620      	mov	r0, r4
 808016a:	bd10      	pop	{r4, pc}

0808016c <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
 808016c:	3010      	adds	r0, #16
 808016e:	f001 b9b9 	b.w	80814e4 <_ZN7FatFile4syncEv>

08080172 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
 8080172:	3010      	adds	r0, #16
 8080174:	f001 b8e5 	b.w	8081342 <_ZN7FatFile4peekEv>

08080178 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
 8080178:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 808017a:	2201      	movs	r2, #1
 808017c:	f10d 0107 	add.w	r1, sp, #7
 8080180:	3010      	adds	r0, #16
 8080182:	f001 f82a 	bl	80811da <_ZN7FatFile4readEPvj>
 8080186:	2801      	cmp	r0, #1
 8080188:	bf0c      	ite	eq
 808018a:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 808018e:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
 8080192:	b003      	add	sp, #12
 8080194:	f85d fb04 	ldr.w	pc, [sp], #4

08080198 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 8080198:	3010      	adds	r0, #16
 808019a:	f001 ba2f 	b.w	80815fc <_ZN7FatFile5writeEPKvj>

0808019e <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
 808019e:	b507      	push	{r0, r1, r2, lr}
 80801a0:	ab02      	add	r3, sp, #8
 80801a2:	f803 1d01 	strb.w	r1, [r3, #-1]!
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 80801a6:	2201      	movs	r2, #1
 80801a8:	4619      	mov	r1, r3
 80801aa:	3010      	adds	r0, #16
 80801ac:	f001 fa26 	bl	80815fc <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
 80801b0:	b003      	add	sp, #12
 80801b2:	f85d fb04 	ldr.w	pc, [sp], #4

080801b6 <_ZN3AWSD1Ev>:
#ifndef AWS_H
#define AWS_H

#include <MQTT-TLS.h>

class AWS {
 80801b6:	b510      	push	{r4, lr}
 80801b8:	4604      	mov	r4, r0
 80801ba:	f001 ffb3 	bl	8082124 <_ZN4MQTTD1Ev>
 80801be:	4620      	mov	r0, r4
 80801c0:	bd10      	pop	{r4, pc}

080801c2 <_ZN9SdFatBase11writeBlocksEmPKhj>:
  }
  bool readBlocks(uint32_t block, uint8_t* dst, size_t n) {
    return m_sdCard.readBlocks(block, dst, n);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t n) {
    return m_sdCard.writeBlocks(block, src, n);
 80801c2:	f200 4064 	addw	r0, r0, #1124	; 0x464
 80801c6:	f000 bed0 	b.w	8080f6a <_ZN9SdSpiCard11writeBlocksEmPKhj>

080801ca <_ZN9SdFatBase10readBlocksEmPhj>:
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_sdCard.writeBlock(block, src);
  }
  bool readBlocks(uint32_t block, uint8_t* dst, size_t n) {
    return m_sdCard.readBlocks(block, dst, n);
 80801ca:	f200 4064 	addw	r0, r0, #1124	; 0x464
 80801ce:	f000 be04 	b.w	8080dda <_ZN9SdSpiCard10readBlocksEmPhj>

080801d2 <_ZN9SdFatBase10writeBlockEmPKh>:

  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_sdCard.readBlock(block, dst);
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_sdCard.writeBlock(block, src);
 80801d2:	f200 4064 	addw	r0, r0, #1124	; 0x464
 80801d6:	f000 be43 	b.w	8080e60 <_ZN9SdSpiCard10writeBlockEmPKh>

080801da <_ZN9SdFatBase9readBlockEmPh>:
#endif  // defined(ARDUINO) || defined(DOXYGEN)

 private:

  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_sdCard.readBlock(block, dst);
 80801da:	f200 4064 	addw	r0, r0, #1124	; 0x464
 80801de:	f000 bdb4 	b.w	8080d4a <_ZN9SdSpiCard9readBlockEmPh>
	...

080801e4 <setup>:
// dom add above

#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)
unsigned long lastSync = millis();
int counter = 0;
void setup() {
 80801e4:	b537      	push	{r0, r1, r2, r4, r5, lr}


    Serial.begin(9600);
 80801e6:	f012 f865 	bl	80922b4 <_Z16_fetch_usbserialv>
 80801ea:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80801ee:	f012 f841 	bl	8092274 <_ZN9USBSerial5beginEl>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80801f2:	4c45      	ldr	r4, [pc, #276]	; (8080308 <setup+0x124>)
    while (!Serial) {
 80801f4:	f012 f85e 	bl	80922b4 <_Z16_fetch_usbserialv>
 80801f8:	f012 f843 	bl	8092282 <_ZN9USBSerialcvbEv>
 80801fc:	b928      	cbnz	r0, 808020a <setup+0x26>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80801fe:	f010 ffd5 	bl	80911ac <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8080202:	6020      	str	r0, [r4, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 8080204:	f011 f98a 	bl	809151c <spark_process>
 8080208:	e7f4      	b.n	80801f4 <setup+0x10>
   * \param[in] csPin SD card chip select pin.
   * \param[in] divisor SPI divisor.
   * \return true for success else false.
   */
  bool begin(SdSpiCard::m_spi_t* spi, uint8_t csPin = SS, uint8_t divisor = 2) {
    return m_sdCard.begin(spi, csPin, divisor) &&
 808020a:	4940      	ldr	r1, [pc, #256]	; (808030c <setup+0x128>)
 808020c:	2304      	movs	r3, #4
 808020e:	220c      	movs	r2, #12
 8080210:	f1a1 000c 	sub.w	r0, r1, #12
 8080214:	f000 fd05 	bl	8080c22 <_ZN9SdSpiCard5beginEP9SdSpiBasehh>
 8080218:	2800      	cmp	r0, #0
 808021a:	d06e      	beq.n	80802fa <setup+0x116>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(uint8_t part = 0) {
    vwd()->close();
 808021c:	483c      	ldr	r0, [pc, #240]	; (8080310 <setup+0x12c>)
 808021e:	f001 f997 	bl	8081550 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
 8080222:	2101      	movs	r1, #1
 8080224:	483b      	ldr	r0, [pc, #236]	; (8080314 <setup+0x130>)
 8080226:	f001 fbd1 	bl	80819cc <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
 808022a:	4601      	mov	r1, r0
 808022c:	b148      	cbz	r0, 8080242 <setup+0x5e>
 808022e:	4c39      	ldr	r4, [pc, #228]	; (8080314 <setup+0x130>)
 8080230:	f504 6588 	add.w	r5, r4, #1088	; 0x440
 8080234:	4621      	mov	r1, r4
 8080236:	4628      	mov	r0, r5
 8080238:	f000 ffb7 	bl	80811aa <_ZN7FatFile8openRootEP9FatVolume>
 808023c:	2800      	cmp	r0, #0
 808023e:	d05c      	beq.n	80802fa <setup+0x116>
 8080240:	e005      	b.n	808024e <setup+0x6a>
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(uint8_t part = 0) {
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
 8080242:	4834      	ldr	r0, [pc, #208]	; (8080314 <setup+0x130>)
 8080244:	f001 fbc2 	bl	80819cc <_ZN9FatVolume4initEh>
 8080248:	2800      	cmp	r0, #0
 808024a:	d1f0      	bne.n	808022e <setup+0x4a>
 808024c:	e055      	b.n	80802fa <setup+0x116>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
 808024e:	f894 3440 	ldrb.w	r3, [r4, #1088]	; 0x440
 8080252:	f013 0f70 	tst.w	r3, #112	; 0x70
 8080256:	d050      	beq.n	80802fa <setup+0x116>
      return false;
    }
    m_cwd = dir;
 8080258:	4b2f      	ldr	r3, [pc, #188]	; (8080318 <setup+0x134>)
 808025a:	601d      	str	r5, [r3, #0]
    if (millis() - lastSync > ONE_DAY_MILLIS) {
        Particle.syncTime();
        lastSync = millis();
    }
    */
    dof.getTemp();
 808025c:	4c2f      	ldr	r4, [pc, #188]	; (808031c <setup+0x138>)
 808025e:	4620      	mov	r0, r4
 8080260:	f010 ff0a 	bl	8091078 <_ZN3DOF7getTempEv>
    float temp = dof.TEMP;
    awsiot.connect("sparkclient");
 8080264:	492e      	ldr	r1, [pc, #184]	; (8080320 <setup+0x13c>)
 8080266:	482f      	ldr	r0, [pc, #188]	; (8080324 <setup+0x140>)
        Particle.syncTime();
        lastSync = millis();
    }
    */
    dof.getTemp();
    float temp = dof.TEMP;
 8080268:	6b24      	ldr	r4, [r4, #48]	; 0x30
    awsiot.connect("sparkclient");
 808026a:	f010 fac9 	bl	8090800 <_ZN3AWS7connectEPKc>



    // publish/subscribe
    if (awsiot.isConnected()) {
 808026e:	482d      	ldr	r0, [pc, #180]	; (8080324 <setup+0x140>)
 8080270:	f010 fabe 	bl	80907f0 <_ZN3AWS11isConnectedEv>
 8080274:	b168      	cbz	r0, 8080292 <setup+0xae>
        Serial.println("client connected");
 8080276:	f012 f81d 	bl	80922b4 <_Z16_fetch_usbserialv>
 808027a:	492b      	ldr	r1, [pc, #172]	; (8080328 <setup+0x144>)
 808027c:	f011 fd09 	bl	8091c92 <_ZN5Print7printlnEPKc>
        awsiot.publish("outTopic/message", "hello world");
 8080280:	492a      	ldr	r1, [pc, #168]	; (808032c <setup+0x148>)
 8080282:	4a2b      	ldr	r2, [pc, #172]	; (8080330 <setup+0x14c>)
 8080284:	4827      	ldr	r0, [pc, #156]	; (8080324 <setup+0x140>)
 8080286:	f010 fab5 	bl	80907f4 <_ZN3AWS7publishEPKcS1_>
        awsiot.subscribe("inTopic/message");
 808028a:	492a      	ldr	r1, [pc, #168]	; (8080334 <setup+0x150>)
 808028c:	4825      	ldr	r0, [pc, #148]	; (8080324 <setup+0x140>)
 808028e:	f010 fab3 	bl	80907f8 <_ZN3AWS9subscribeEPKc>
    }

    RGB.control(true);
 8080292:	2001      	movs	r0, #1
 8080294:	f011 fe84 	bl	8091fa0 <_ZN8RGBClass7controlEb>

    secretStuff.generateKey(key);
 8080298:	4927      	ldr	r1, [pc, #156]	; (8080338 <setup+0x154>)
 808029a:	4828      	ldr	r0, [pc, #160]	; (808033c <setup+0x158>)
 808029c:	f010 fa82 	bl	80907a4 <_ZN5Crypt11generateKeyEPh>
    Serial.println((int)key);
 80802a0:	f012 f808 	bl	80922b4 <_Z16_fetch_usbserialv>
 80802a4:	220a      	movs	r2, #10
 80802a6:	4924      	ldr	r1, [pc, #144]	; (8080338 <setup+0x154>)
 80802a8:	f011 fd55 	bl	8091d56 <_ZN5Print7printlnEii>
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, uint8_t oflag = O_READ) {
    return open(m_cwd, path, oflag);
 80802ac:	491a      	ldr	r1, [pc, #104]	; (8080318 <setup+0x134>)
 80802ae:	2363      	movs	r3, #99	; 0x63
 80802b0:	4a23      	ldr	r2, [pc, #140]	; (8080340 <setup+0x15c>)
 80802b2:	6809      	ldr	r1, [r1, #0]
 80802b4:	4823      	ldr	r0, [pc, #140]	; (8080344 <setup+0x160>)
 80802b6:	f001 f952 	bl	808155e <_ZN7FatFile4openEPS_PKch>

    // open the file for write at end like the "Native SD library"
    if (!myFile.open("test.txt", O_RDWR | O_CREAT | O_AT_END)) {
 80802ba:	b930      	cbnz	r0, 80802ca <setup+0xe6>
  /** %Print msg, any SD error code and halt.
   *
   * \param[in] msg Message to print.
   */
  void errorHalt(char const* msg) {
    errorHalt(&Serial, msg);
 80802bc:	f011 fffa 	bl	80922b4 <_Z16_fetch_usbserialv>
 80802c0:	4a21      	ldr	r2, [pc, #132]	; (8080348 <setup+0x164>)
 80802c2:	4601      	mov	r1, r0
 80802c4:	4813      	ldr	r0, [pc, #76]	; (8080314 <setup+0x130>)
 80802c6:	f001 fc45 	bl	8081b54 <_ZN9SdFatBase9errorHaltEP5PrintPKc>
        sd.errorHalt("opening test.txt for write failed");
    }
    // if the file opened okay, write to it:
    //Serial.print("Writing to test.txt...");
    myFile.println(temp);
 80802ca:	4620      	mov	r0, r4
 80802cc:	f012 fca8 	bl	8092c20 <__aeabi_f2d>
 80802d0:	4c1e      	ldr	r4, [pc, #120]	; (808034c <setup+0x168>)
 80802d2:	2302      	movs	r3, #2
 80802d4:	9300      	str	r3, [sp, #0]
 80802d6:	4602      	mov	r2, r0
 80802d8:	460b      	mov	r3, r1
 80802da:	4620      	mov	r0, r4
 80802dc:	f011 fdf4 	bl	8091ec8 <_ZN5Print7printlnEdi>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 80802e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80802e2:	4a1b      	ldr	r2, [pc, #108]	; (8080350 <setup+0x16c>)
 80802e4:	2100      	movs	r1, #0
 80802e6:	4620      	mov	r0, r4
 80802e8:	f011 fdfc 	bl	8091ee4 <_ZN5Print11printf_implEbPKcz>
    myFile.printf("fileSize: %d\n", myFile.fileSize());

    // close the file:
    myFile.close();
 80802ec:	f104 0010 	add.w	r0, r4, #16
}   
 80802f0:	b003      	add	sp, #12
 80802f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    //Serial.print("Writing to test.txt...");
    myFile.println(temp);
    myFile.printf("fileSize: %d\n", myFile.fileSize());

    // close the file:
    myFile.close();
 80802f6:	f001 b92b 	b.w	8081550 <_ZN7FatFile5closeEv>
  bool fsBegin() {
    return FatFileSystem::begin();
  }
  /** %Print any SD error code and halt. */
  void initErrorHalt() {
    initErrorHalt(&Serial);
 80802fa:	f011 ffdb 	bl	80922b4 <_Z16_fetch_usbserialv>
 80802fe:	4601      	mov	r1, r0
 8080300:	4804      	ldr	r0, [pc, #16]	; (8080314 <setup+0x130>)
 8080302:	f001 fc61 	bl	8081bc8 <_ZN9SdFatBase13initErrorHaltEP5Print>
 8080306:	e7a9      	b.n	808025c <setup+0x78>
 8080308:	200047b0 	.word	0x200047b0
 808030c:	200018f8 	.word	0x200018f8
 8080310:	200018c8 	.word	0x200018c8
 8080314:	20001488 	.word	0x20001488
 8080318:	200019c0 	.word	0x200019c0
 808031c:	20001900 	.word	0x20001900
 8080320:	08093ce7 	.word	0x08093ce7
 8080324:	200009b8 	.word	0x200009b8
 8080328:	08093cf3 	.word	0x08093cf3
 808032c:	08093d10 	.word	0x08093d10
 8080330:	08093d04 	.word	0x08093d04
 8080334:	08093d21 	.word	0x08093d21
 8080338:	200004b0 	.word	0x200004b0
 808033c:	200004d0 	.word	0x200004d0
 8080340:	08093d31 	.word	0x08093d31
 8080344:	20001460 	.word	0x20001460
 8080348:	08093d3a 	.word	0x08093d3a
 808034c:	20001450 	.word	0x20001450
 8080350:	08093d5c 	.word	0x08093d5c

08080354 <loop>:
}   

void loop() {
 8080354:	b508      	push	{r3, lr}

    if (awsiot.isConnected()) {
 8080356:	4808      	ldr	r0, [pc, #32]	; (8080378 <loop+0x24>)
 8080358:	f010 fa4a 	bl	80907f0 <_ZN3AWS11isConnectedEv>
 808035c:	b138      	cbz	r0, 808036e <loop+0x1a>
        Serial.println("i made it");
 808035e:	f011 ffa9 	bl	80922b4 <_Z16_fetch_usbserialv>
 8080362:	4906      	ldr	r1, [pc, #24]	; (808037c <loop+0x28>)
 8080364:	f011 fc95 	bl	8091c92 <_ZN5Print7printlnEPKc>
        awsiot.loop();
 8080368:	4803      	ldr	r0, [pc, #12]	; (8080378 <loop+0x24>)
 808036a:	f010 fa47 	bl	80907fc <_ZN3AWS4loopEv>
    }

    
    delay(200);
}
 808036e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Serial.println("i made it");
        awsiot.loop();
    }

    
    delay(200);
 8080372:	20c8      	movs	r0, #200	; 0xc8
 8080374:	f011 be02 	b.w	8091f7c <delay>
 8080378:	200009b8 	.word	0x200009b8
 808037c:	08093d6a 	.word	0x08093d6a

08080380 <_Z15startupFunctionv>:

//use for thread setup
//use for connection setup
void startupFunction() {
    
    cellular_credentials_set("wireless.twilio.com", "", "", NULL);
 8080380:	4a12      	ldr	r2, [pc, #72]	; (80803cc <_Z15startupFunctionv+0x4c>)
    delay(200);
}

//use for thread setup
//use for connection setup
void startupFunction() {
 8080382:	b510      	push	{r4, lr}
    
    cellular_credentials_set("wireless.twilio.com", "", "", NULL);
 8080384:	4611      	mov	r1, r2
 8080386:	2300      	movs	r3, #0
 8080388:	4811      	ldr	r0, [pc, #68]	; (80803d0 <_Z15startupFunctionv+0x50>)
 808038a:	f011 f807 	bl	809139c <cellular_credentials_set>

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 808038e:	2300      	movs	r3, #0
 8080390:	461a      	mov	r2, r3
 8080392:	4619      	mov	r1, r3
 8080394:	4618      	mov	r0, r3
 8080396:	f011 f8b9 	bl	809150c <network_on>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 808039a:	2300      	movs	r3, #0
 808039c:	461a      	mov	r2, r3
 808039e:	4619      	mov	r1, r3
 80803a0:	4618      	mov	r0, r3
 80803a2:	f011 f8a3 	bl	80914ec <network_connect>
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 80803a6:	2200      	movs	r2, #0
 80803a8:	4611      	mov	r1, r2
 80803aa:	4610      	mov	r0, r2
 80803ac:	f011 f8a6 	bl	80914fc <network_ready>
    Cellular.on(); 
    Cellular.connect();

    while(!Cellular.ready()){
 80803b0:	4603      	mov	r3, r0
 80803b2:	b910      	cbnz	r0, 80803ba <_Z15startupFunctionv+0x3a>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80803b4:	4602      	mov	r2, r0
 80803b6:	4601      	mov	r1, r0
 80803b8:	e7f3      	b.n	80803a2 <_Z15startupFunctionv+0x22>
        Cellular.connect();
    }
    

    // Create the mutex
	os_mutex_create(&mutex);
 80803ba:	4c06      	ldr	r4, [pc, #24]	; (80803d4 <_Z15startupFunctionv+0x54>)
 80803bc:	4620      	mov	r0, r4
 80803be:	f010 ff05 	bl	80911cc <os_mutex_create>

	// Initially lock it, so when the thread tries to lock it, it will block.
	os_mutex_lock(mutex);
 80803c2:	6820      	ldr	r0, [r4, #0]
}
 80803c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    // Create the mutex
	os_mutex_create(&mutex);

	// Initially lock it, so when the thread tries to lock it, it will block.
	os_mutex_lock(mutex);
 80803c8:	f010 bf08 	b.w	80911dc <os_mutex_lock>
 80803cc:	08094520 	.word	0x08094520
 80803d0:	08093d74 	.word	0x08093d74
 80803d4:	200004ac 	.word	0x200004ac

080803d8 <_GLOBAL__sub_I_SystemMode>:
}
 80803d8:	b538      	push	{r3, r4, r5, lr}
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80803da:	f010 fe67 	bl	80910ac <HAL_Pin_Map>
 * MQTT client(server, 1883, callback);
 * want to use domain name,
 * MQTT client("www.sample.com", 1883, callback);
 **/

AWS awsiot("a3mb0mz6legbs8.iot.us-east-2.amazonaws.com", 8883, callback);
 80803de:	4d22      	ldr	r5, [pc, #136]	; (8080468 <_GLOBAL__sub_I_SystemMode+0x90>)
#include <MQTT-TLS.h>
#include <CarT.h>
#include <SdFat.h>

//setup threading
SYSTEM_THREAD(ENABLED);
 80803e0:	2100      	movs	r1, #0
 80803e2:	2001      	movs	r0, #1
 80803e4:	f011 f86a 	bl	80914bc <system_thread_set_state>
 * MQTT client(server, 1883, callback);
 * want to use domain name,
 * MQTT client("www.sample.com", 1883, callback);
 **/

AWS awsiot("a3mb0mz6legbs8.iot.us-east-2.amazonaws.com", 8883, callback);
 80803e8:	4c20      	ldr	r4, [pc, #128]	; (808046c <_GLOBAL__sub_I_SystemMode+0x94>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80803ea:	2003      	movs	r0, #3
 80803ec:	f011 f856 	bl	809149c <set_system_mode>

void startupFunction();
void threadFunction(void *param);

//setup mutex
STARTUP(startupFunction());
 80803f0:	f7ff ffc6 	bl	8080380 <_Z15startupFunctionv>
 * MQTT client(server, 1883, callback);
 * want to use domain name,
 * MQTT client("www.sample.com", 1883, callback);
 **/

AWS awsiot("a3mb0mz6legbs8.iot.us-east-2.amazonaws.com", 8883, callback);
 80803f4:	4b1e      	ldr	r3, [pc, #120]	; (8080470 <_GLOBAL__sub_I_SystemMode+0x98>)
 80803f6:	f242 22b3 	movw	r2, #8883	; 0x22b3
 80803fa:	491e      	ldr	r1, [pc, #120]	; (8080474 <_GLOBAL__sub_I_SystemMode+0x9c>)
 80803fc:	4628      	mov	r0, r5
 80803fe:	f010 fad7 	bl	80909b0 <_ZN3AWSC1EPctPFvS0_PhjE>
 8080402:	491d      	ldr	r1, [pc, #116]	; (8080478 <_GLOBAL__sub_I_SystemMode+0xa0>)
 8080404:	4622      	mov	r2, r4
 8080406:	4628      	mov	r0, r5
 8080408:	f012 f958 	bl	80926bc <__aeabi_atexit>
#define CRYPT_H

#include <MQTT-TLS.h>


class Crypt {
 808040c:	4a1b      	ldr	r2, [pc, #108]	; (808047c <_GLOBAL__sub_I_SystemMode+0xa4>)
 808040e:	4b1c      	ldr	r3, [pc, #112]	; (8080480 <_GLOBAL__sub_I_SystemMode+0xa8>)
Crypt secretStuff;

DOF dof;
 8080410:	481c      	ldr	r0, [pc, #112]	; (8080484 <_GLOBAL__sub_I_SystemMode+0xac>)
 8080412:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
 8080416:	f010 fe25 	bl	8091064 <_ZN3DOFC1Ev>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
 808041a:	4a1b      	ldr	r2, [pc, #108]	; (8080488 <_GLOBAL__sub_I_SystemMode+0xb0>)
#else  // SD_SPI_CONFIGURATION < 3
  typedef SdSpiBase m_spi_t;
#endif  // SD_SPI_CONFIGURATION < 3
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_selected(false),
                m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
 808041c:	2119      	movs	r1, #25
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 808041e:	481b      	ldr	r0, [pc, #108]	; (808048c <_GLOBAL__sub_I_SystemMode+0xb4>)
 8080420:	f882 146a 	strb.w	r1, [r2, #1130]	; 0x46a
 * \brief Main file system class for %SdFat library.
 */
class SdFat : public SdFatBase {
 public:
#if IMPLEMENT_SPI_INTERFACE_SELECTION
  SdFat() {
 8080424:	491a      	ldr	r1, [pc, #104]	; (8080490 <_GLOBAL__sub_I_SystemMode+0xb8>)
 8080426:	2300      	movs	r3, #0
 8080428:	71d3      	strb	r3, [r2, #7]
 808042a:	f882 3440 	strb.w	r3, [r2, #1088]	; 0x440
 808042e:	f882 3441 	strb.w	r3, [r2, #1089]	; 0x441
 8080432:	f882 3468 	strb.w	r3, [r2, #1128]	; 0x468
 8080436:	f882 346d 	strb.w	r3, [r2, #1133]	; 0x46d
 808043a:	6011      	str	r1, [r2, #0]
   */
  void send(const uint8_t* buf, size_t n);
  /** \return true - uses SPI transactions */
#if IMPLEMENT_SPI_INTERFACE_SELECTION
  void setSpiIf(uint8_t spiIf) {
    m_spiIf = spiIf;
 808043c:	f882 3474 	strb.w	r3, [r2, #1140]	; 0x474
/**
 * \class SdSpi
 * \brief SPI class for access to SD and SDHC flash memory cards.
 */
#if SD_SPI_CONFIGURATION >= 3
class SdSpi : public SdSpiBase {
 8080440:	4914      	ldr	r1, [pc, #80]	; (8080494 <_GLOBAL__sub_I_SystemMode+0xbc>)
 8080442:	7403      	strb	r3, [r0, #16]
 8080444:	7443      	strb	r3, [r0, #17]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8080446:	6043      	str	r3, [r0, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8080448:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808044c:	6083      	str	r3, [r0, #8]
class File : public FatFile, public Stream {
#else  // ARDUINO_FILE_USES_STREAM
class File : public FatFile, public Print {
#endif  // ARDUINO_FILE_USES_STREAM
 public:
  File() {}
 808044e:	4b12      	ldr	r3, [pc, #72]	; (8080498 <_GLOBAL__sub_I_SystemMode+0xc0>)
 8080450:	f8c2 1470 	str.w	r1, [r2, #1136]	; 0x470
SdFat sd;
const uint8_t chipSelect = SS;

#endif  // SPI_CONFIGURATION

File myFile;
 8080454:	4622      	mov	r2, r4
 8080456:	4911      	ldr	r1, [pc, #68]	; (808049c <_GLOBAL__sub_I_SystemMode+0xc4>)
 8080458:	6003      	str	r3, [r0, #0]
 808045a:	f012 f92f 	bl	80926bc <__aeabi_atexit>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 808045e:	f010 fea5 	bl	80911ac <HAL_Timer_Get_Milli_Seconds>

// dom add above

#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)
unsigned long lastSync = millis();
 8080462:	4b0f      	ldr	r3, [pc, #60]	; (80804a0 <_GLOBAL__sub_I_SystemMode+0xc8>)
 8080464:	6018      	str	r0, [r3, #0]
 8080466:	bd38      	pop	{r3, r4, r5, pc}
 8080468:	200009b8 	.word	0x200009b8
 808046c:	200004a8 	.word	0x200004a8
 8080470:	080800d9 	.word	0x080800d9
 8080474:	08093d88 	.word	0x08093d88
 8080478:	080801b7 	.word	0x080801b7
 808047c:	08093db3 	.word	0x08093db3
 8080480:	200004d0 	.word	0x200004d0
 8080484:	20001900 	.word	0x20001900
 8080488:	20001488 	.word	0x20001488
 808048c:	20001450 	.word	0x20001450
 8080490:	08093cc8 	.word	0x08093cc8
 8080494:	08093dd4 	.word	0x08093dd4
 8080498:	08093ca0 	.word	0x08093ca0
 808049c:	080800d7 	.word	0x080800d7
 80804a0:	20001484 	.word	0x20001484

080804a4 <_GLOBAL__sub_I__ZN4NmeaC2E6Stringh9NmeaCache>:
 80804a4:	f010 be02 	b.w	80910ac <HAL_Pin_Map>

080804a8 <_GLOBAL__sub_I__ZN9NmeaCacheC2Ev>:
 80804a8:	f010 be00 	b.w	80910ac <HAL_Pin_Map>

080804ac <_GLOBAL__sub_I__ZN5PgtopC2E9NmeaCache>:
 80804ac:	f010 bdfe 	b.w	80910ac <HAL_Pin_Map>

080804b0 <_GLOBAL__sub_I__ZN3GpsC2EP11USARTSerial>:
 80804b0:	f010 bdfc 	b.w	80910ac <HAL_Pin_Map>

080804b4 <_GLOBAL__sub_I__ZN7istream3getEv>:
 80804b4:	f010 bdfa 	b.w	80910ac <HAL_Pin_Map>

080804b8 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
 80804b8:	b510      	push	{r4, lr}
 80804ba:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync();
 80804bc:	3028      	adds	r0, #40	; 0x28
 80804be:	f001 f97f 	bl	80817c0 <_ZN8FatCache4syncEv>
 80804c2:	b128      	cbz	r0, 80804d0 <_ZN9FatVolume9cacheSyncEv+0x18>
 80804c4:	f504 700d 	add.w	r0, r4, #564	; 0x234
  }
 80804c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync();
 80804cc:	f001 b978 	b.w	80817c0 <_ZN8FatCache4syncEv>
  }
 80804d0:	bd10      	pop	{r4, pc}

080804d2 <_ZN7FatFile11lfnChecksumEPh>:
 * <http://www.gnu.org/licenses/>.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
 80804d2:	1e41      	subs	r1, r0, #1
 80804d4:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
 80804d8:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 80804da:	0843      	lsrs	r3, r0, #1
 80804dc:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
 80804e0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80804e4:	4418      	add	r0, r3
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 80804e6:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 80804e8:	f000 00ff 	and.w	r0, r0, #255	; 0xff
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 80804ec:	d1f5      	bne.n	80804da <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
 80804ee:	4770      	bx	lr

080804f0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
 80804f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
 80804f4:	7803      	ldrb	r3, [r0, #0]
 80804f6:	1c44      	adds	r4, r0, #1
 80804f8:	2b20      	cmp	r3, #32
 80804fa:	d101      	bne.n	8080500 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x10>
 80804fc:	4620      	mov	r0, r4
 80804fe:	e7f9      	b.n	80804f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
    path++;
  }
  fname->lfn = path;
 8080500:	4605      	mov	r5, r0
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8080502:	4f70      	ldr	r7, [pc, #448]	; (80806c4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
 8080504:	6088      	str	r0, [r1, #8]
 8080506:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
 8080508:	462e      	mov	r6, r5
 808050a:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
 808050e:	b30b      	cbz	r3, 8080554 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 8080510:	2b2f      	cmp	r3, #47	; 0x2f
 8080512:	d101      	bne.n	8080518 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x28>
 8080514:	1903      	adds	r3, r0, r4
 8080516:	e017      	b.n	8080548 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8080518:	2b5c      	cmp	r3, #92	; 0x5c
 808051a:	d102      	bne.n	8080522 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x32>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
 808051c:	2000      	movs	r0, #0
 808051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8080522:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
 8080526:	b2e4      	uxtb	r4, r4
 8080528:	2c1d      	cmp	r4, #29
 808052a:	d803      	bhi.n	8080534 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x44>
 808052c:	fa27 f404 	lsr.w	r4, r7, r4
 8080530:	07e4      	lsls	r4, r4, #31
 8080532:	d4f3      	bmi.n	808051c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
 8080534:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
 8080538:	2c3c      	cmp	r4, #60	; 0x3c
 808053a:	d0ef      	beq.n	808051c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
 808053c:	3b20      	subs	r3, #32
 808053e:	2b5e      	cmp	r3, #94	; 0x5e
 8080540:	d9e1      	bls.n	8080506 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16>
 8080542:	e7eb      	b.n	808051c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
 8080544:	2d2f      	cmp	r5, #47	; 0x2f
 8080546:	d105      	bne.n	8080554 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 8080548:	461e      	mov	r6, r3
 808054a:	f813 5b01 	ldrb.w	r5, [r3], #1
 808054e:	2d20      	cmp	r5, #32
 8080550:	d1f8      	bne.n	8080544 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x54>
 8080552:	e7f9      	b.n	8080548 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  *ptr = &path[end];
 8080554:	6016      	str	r6, [r2, #0]
 8080556:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
 8080558:	4298      	cmp	r0, r3
 808055a:	ebc0 0803 	rsb	r8, r0, r3
 808055e:	d009      	beq.n	8080574 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x84>
    c = path[len - 1];
 8080560:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
 8080564:	2a2e      	cmp	r2, #46	; 0x2e
 8080566:	d0f7      	beq.n	8080558 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
 8080568:	2a20      	cmp	r2, #32
 808056a:	d0f5      	beq.n	8080558 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
 808056c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8080570:	dcd4      	bgt.n	808051c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
 8080572:	e001      	b.n	8080578 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
 8080574:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
 8080578:	f8c1 8004 	str.w	r8, [r1, #4]
 808057c:	f101 030c 	add.w	r3, r1, #12
 8080580:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
 8080584:	2420      	movs	r4, #32
 8080586:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
 808058a:	4293      	cmp	r3, r2
 808058c:	d1fb      	bne.n	8080586 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x96>
 808058e:	4603      	mov	r3, r0
 8080590:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 8080592:	f813 4b01 	ldrb.w	r4, [r3], #1
 8080596:	2c2e      	cmp	r4, #46	; 0x2e
 8080598:	d0fa      	beq.n	8080590 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
 808059a:	2c20      	cmp	r4, #32
 808059c:	d0f8      	beq.n	8080590 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
  // Not 8.3 if leading dot or space.
  is83 = !si;
 808059e:	fab2 f482 	clz	r4, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 80805a2:	f108 36ff 	add.w	r6, r8, #4294967295
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
 80805a6:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 80805a8:	1c73      	adds	r3, r6, #1
 80805aa:	d107      	bne.n	80805bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xcc>
 80805ac:	2700      	movs	r7, #0
 80805ae:	f04f 0e07 	mov.w	lr, #7
 80805b2:	463d      	mov	r5, r7
 80805b4:	46ba      	mov	sl, r7
 80805b6:	f04f 0908 	mov.w	r9, #8
 80805ba:	e009      	b.n	80805d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
 80805bc:	5d83      	ldrb	r3, [r0, r6]
 80805be:	2b2e      	cmp	r3, #46	; 0x2e
 80805c0:	d0f4      	beq.n	80805ac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbc>
 80805c2:	3e01      	subs	r6, #1
 80805c4:	e7f0      	b.n	80805a8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb8>
  for (; si < len; si++) {
    c = path[si];
 80805c6:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
 80805c8:	2b20      	cmp	r3, #32
 80805ca:	d104      	bne.n	80805d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe6>
      is83 = false;
 80805cc:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
 80805ce:	3201      	adds	r2, #1
 80805d0:	4542      	cmp	r2, r8
 80805d2:	dbf8      	blt.n	80805c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
 80805d4:	e04b      	b.n	808066e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
 80805d6:	2b2e      	cmp	r3, #46	; 0x2e
 80805d8:	d102      	bne.n	80805e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
 80805da:	42b2      	cmp	r2, r6
 80805dc:	d1f6      	bne.n	80805cc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
 80805de:	e003      	b.n	80805e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
 80805e0:	2b22      	cmp	r3, #34	; 0x22
 80805e2:	d017      	beq.n	8080614 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
 80805e4:	2b7c      	cmp	r3, #124	; 0x7c
 80805e6:	d015      	beq.n	8080614 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
 80805e8:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
 80805ec:	f1bc 0f05 	cmp.w	ip, #5
 80805f0:	d801      	bhi.n	80805f6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x106>
 80805f2:	2b2d      	cmp	r3, #45	; 0x2d
 80805f4:	d10e      	bne.n	8080614 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
 80805f6:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
 80805fa:	f1bc 0f05 	cmp.w	ip, #5
 80805fe:	d909      	bls.n	8080614 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
 8080600:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
 8080604:	f1bc 0f02 	cmp.w	ip, #2
 8080608:	d904      	bls.n	8080614 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
 808060a:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
 808060e:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 8080612:	d902      	bls.n	808061a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12a>
 8080614:	42b2      	cmp	r2, r6
 8080616:	d10e      	bne.n	8080636 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x146>
 8080618:	e049      	b.n	80806ae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 808061a:	42b2      	cmp	r2, r6
 808061c:	d047      	beq.n	80806ae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
 808061e:	4575      	cmp	r5, lr
 8080620:	d821      	bhi.n	8080666 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
 8080622:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 8080626:	f1bc 0f19 	cmp.w	ip, #25
 808062a:	d808      	bhi.n	808063e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14e>
        c += 'A' - 'a';
 808062c:	3b20      	subs	r3, #32
 808062e:	b2db      	uxtb	r3, r3
        lc |= bit;
 8080630:	ea49 0707 	orr.w	r7, r9, r7
 8080634:	e00a      	b.n	808064c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15c>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 8080636:	4575      	cmp	r5, lr
 8080638:	d815      	bhi.n	8080666 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
 808063a:	2400      	movs	r4, #0
      c = '_';
 808063c:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
 808063e:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 8080642:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
 8080646:	bf98      	it	ls
 8080648:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
 808064c:	f105 0c01 	add.w	ip, r5, #1
 8080650:	fa5f fc8c 	uxtb.w	ip, ip
 8080654:	440d      	add	r5, r1
      if (i < 7) {
 8080656:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
 808065a:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
 808065c:	d801      	bhi.n	8080662 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x172>
        fname->seqPos = i;
 808065e:	f881 c00c 	strb.w	ip, [r1, #12]
 8080662:	4665      	mov	r5, ip
 8080664:	e7b3      	b.n	80805ce <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 8080666:	f1be 0f0a 	cmp.w	lr, #10
 808066a:	d117      	bne.n	808069c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
 808066c:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
 808066e:	7b4b      	ldrb	r3, [r1, #13]
 8080670:	2b20      	cmp	r3, #32
 8080672:	f43f af53 	beq.w	808051c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
    return false;
  }

  if (is83) {
 8080676:	b13c      	cbz	r4, 8080688 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x198>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
 8080678:	ea1a 0f07 	tst.w	sl, r7
 808067c:	bf18      	it	ne
 808067e:	2702      	movne	r7, #2
 8080680:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
 8080682:	2001      	movs	r0, #1
 8080684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
 8080688:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
 808068a:	2001      	movs	r0, #1
 808068c:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
 808068e:	4419      	add	r1, r3
 8080690:	237e      	movs	r3, #126	; 0x7e
 8080692:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
 8080694:	2331      	movs	r3, #49	; 0x31
 8080696:	738b      	strb	r3, [r1, #14]
 8080698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
 808069c:	42b2      	cmp	r2, r6
 808069e:	dce5      	bgt.n	808066c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 80806a0:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 80806a2:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 80806a6:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 80806a8:	f04f 0910 	mov.w	r9, #16
 80806ac:	e78e      	b.n	80805cc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 80806ae:	f1be 0f0a 	cmp.w	lr, #10
 80806b2:	d0db      	beq.n	808066c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 80806b4:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 80806b6:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 80806ba:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 80806bc:	f04f 0910 	mov.w	r9, #16
 80806c0:	e785      	b.n	80805ce <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
 80806c2:	bf00      	nop
 80806c4:	31000101 	.word	0x31000101

080806c8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
 80806c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80806cc:	4606      	mov	r6, r0
 80806ce:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
 80806d0:	f891 900c 	ldrb.w	r9, [r1, #12]
 80806d4:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 80806d6:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 80806d8:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
 80806dc:	6869      	ldr	r1, [r5, #4]
 80806de:	68aa      	ldr	r2, [r5, #8]
 80806e0:	1863      	adds	r3, r4, r1
 80806e2:	b29b      	uxth	r3, r3
 80806e4:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
 80806e6:	4291      	cmp	r1, r2
 80806e8:	d006      	beq.n	80806f8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
 80806ea:	f812 0b01 	ldrb.w	r0, [r2], #1
 80806ee:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 80806f2:	4043      	eors	r3, r0
 80806f4:	b29b      	uxth	r3, r3
 80806f6:	e7f6      	b.n	80806e6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
 80806f8:	f1b9 0f03 	cmp.w	r9, #3
 80806fc:	bf28      	it	cs
 80806fe:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8080702:	f109 0204 	add.w	r2, r9, #4
 8080706:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
 8080708:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 808070c:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 808070e:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8080710:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8080712:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8080714:	bf94      	ite	ls
 8080716:	3130      	addls	r1, #48	; 0x30
 8080718:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 808071a:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 808071c:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
 808071e:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8080722:	d3f1      	bcc.n	8080708 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 8080724:	eb05 0309 	add.w	r3, r5, r9
 8080728:	735f      	strb	r7, [r3, #13]
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
 808072a:	2100      	movs	r1, #0
 808072c:	4630      	mov	r0, r6
 808072e:	f000 fe38 	bl	80813a2 <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
 8080732:	2101      	movs	r1, #1
 8080734:	4630      	mov	r0, r6
 8080736:	f000 fe17 	bl	8081368 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
 808073a:	4601      	mov	r1, r0
 808073c:	b928      	cbnz	r0, 808074a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
 808073e:	7870      	ldrb	r0, [r6, #1]
 8080740:	fab0 f080 	clz	r0, r0
 8080744:	0940      	lsrs	r0, r0, #5
 8080746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 808074a:	7803      	ldrb	r3, [r0, #0]
 808074c:	b14b      	cbz	r3, 8080762 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 808074e:	7ac3      	ldrb	r3, [r0, #11]
 8080750:	071b      	lsls	r3, r3, #28
 8080752:	d4ee      	bmi.n	8080732 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 8080754:	220b      	movs	r2, #11
 8080756:	4640      	mov	r0, r8
 8080758:	f013 fa02 	bl	8093b60 <memcmp>
 808075c:	2800      	cmp	r0, #0
 808075e:	d1e8      	bne.n	8080732 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 8080760:	e002      	b.n	8080768 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
 8080762:	2001      	movs	r0, #1
 8080764:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8080768:	3401      	adds	r4, #1
 808076a:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
 808076c:	2c64      	cmp	r4, #100	; 0x64
 808076e:	d1b5      	bne.n	80806dc <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
 8080770:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08080774 <_ZN7FatFile4openEPS_P7fname_th>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 8080774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080778:	b089      	sub	sp, #36	; 0x24
 808077a:	9303      	str	r3, [sp, #12]
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 808077c:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 808077e:	9005      	str	r0, [sp, #20]
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8080780:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 8080784:	460e      	mov	r6, r1
 8080786:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8080788:	d101      	bne.n	808078e <_ZN7FatFile4openEPS_P7fname_th+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
 808078a:	2000      	movs	r0, #0
 808078c:	e199      	b.n	8080ac2 <_ZN7FatFile4openEPS_P7fname_th+0x34e>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 808078e:	9b05      	ldr	r3, [sp, #20]
 8080790:	781b      	ldrb	r3, [r3, #0]
 8080792:	2b00      	cmp	r3, #0
 8080794:	d1f9      	bne.n	808078a <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8080796:	7813      	ldrb	r3, [r2, #0]
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
 8080798:	f8d2 b004 	ldr.w	fp, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 808079c:	079b      	lsls	r3, r3, #30
 808079e:	f000 8186 	beq.w	8080aae <_ZN7FatFile4openEPS_P7fname_th+0x33a>
 80807a2:	f10b 030c 	add.w	r3, fp, #12
 80807a6:	270d      	movs	r7, #13
 80807a8:	fbb3 f7f7 	udiv	r7, r3, r7
 80807ac:	3701      	adds	r7, #1
 80807ae:	b2ff      	uxtb	r7, r7
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
 80807b0:	f04f 0800 	mov.w	r8, #0
 80807b4:	2100      	movs	r1, #0
 80807b6:	4630      	mov	r0, r6
 80807b8:	f000 fdf3 	bl	80813a2 <_ZN7FatFile7seekSetEm>
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
 80807bc:	4645      	mov	r5, r8
  uint8_t ord = 0;
 80807be:	4643      	mov	r3, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
 80807c0:	4644      	mov	r4, r8
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 80807c2:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
 80807c6:	f8cd 8008 	str.w	r8, [sp, #8]
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
 80807ca:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 80807ce:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 80807d0:	6972      	ldr	r2, [r6, #20]
    dir = dirFile->readDirCache(true);
 80807d2:	2101      	movs	r1, #1
 80807d4:	4630      	mov	r0, r6
 80807d6:	9307      	str	r3, [sp, #28]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 80807d8:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
 80807dc:	f000 fdc4 	bl	8081368 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 80807e0:	9b07      	ldr	r3, [sp, #28]
 80807e2:	b920      	cbnz	r0, 80807ee <_ZN7FatFile4openEPS_P7fname_th+0x7a>
      if (dirFile->getError()) {
 80807e4:	7873      	ldrb	r3, [r6, #1]
 80807e6:	2b00      	cmp	r3, #0
 80807e8:	f000 808e 	beq.w	8080908 <_ZN7FatFile4openEPS_P7fname_th+0x194>
 80807ec:	e7cd      	b.n	808078a <_ZN7FatFile4openEPS_P7fname_th+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
 80807ee:	7802      	ldrb	r2, [r0, #0]
 80807f0:	2ae5      	cmp	r2, #229	; 0xe5
 80807f2:	d000      	beq.n	80807f6 <_ZN7FatFile4openEPS_P7fname_th+0x82>
 80807f4:	b942      	cbnz	r2, 8080808 <_ZN7FatFile4openEPS_P7fname_th+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 80807f6:	2d00      	cmp	r5, #0
 80807f8:	bf08      	it	eq
 80807fa:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
 80807fc:	42bd      	cmp	r5, r7
        freeFound++;
 80807fe:	bf3c      	itt	cc
 8080800:	3501      	addcc	r5, #1
 8080802:	b2ed      	uxtbcc	r5, r5
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 8080804:	b922      	cbnz	r2, 8080810 <_ZN7FatFile4openEPS_P7fname_th+0x9c>
 8080806:	e07f      	b.n	8080908 <_ZN7FatFile4openEPS_P7fname_th+0x194>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
 8080808:	42bd      	cmp	r5, r7
 808080a:	bf38      	it	cc
 808080c:	2500      	movcc	r5, #0
 808080e:	e003      	b.n	8080818 <_ZN7FatFile4openEPS_P7fname_th+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 8080810:	2ae5      	cmp	r2, #229	; 0xe5
 8080812:	d101      	bne.n	8080818 <_ZN7FatFile4openEPS_P7fname_th+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
 8080814:	2400      	movs	r4, #0
 8080816:	e7db      	b.n	80807d0 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 8080818:	2a2e      	cmp	r2, #46	; 0x2e
 808081a:	d0fb      	beq.n	8080814 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 808081c:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
 808081e:	290f      	cmp	r1, #15
 8080820:	d150      	bne.n	80808c4 <_ZN7FatFile4openEPS_P7fname_th+0x150>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
 8080822:	b93c      	cbnz	r4, 8080834 <_ZN7FatFile4openEPS_P7fname_th+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
 8080824:	0651      	lsls	r1, r2, #25
 8080826:	d5d3      	bpl.n	80807d0 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
 8080828:	7b43      	ldrb	r3, [r0, #13]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 808082a:	f002 041f 	and.w	r4, r2, #31
        chksum = ldir->chksum;
 808082e:	9302      	str	r3, [sp, #8]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 8080830:	4623      	mov	r3, r4
 8080832:	e007      	b.n	8080844 <_ZN7FatFile4openEPS_P7fname_th+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
 8080834:	3b01      	subs	r3, #1
 8080836:	b2db      	uxtb	r3, r3
 8080838:	429a      	cmp	r2, r3
 808083a:	d1eb      	bne.n	8080814 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 808083c:	7b42      	ldrb	r2, [r0, #13]
 808083e:	9902      	ldr	r1, [sp, #8]
 8080840:	4291      	cmp	r1, r2
 8080842:	d1e7      	bne.n	8080814 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
 8080844:	1e5a      	subs	r2, r3, #1
 8080846:	f04f 0c0d 	mov.w	ip, #13
 808084a:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
 808084e:	45e3      	cmp	fp, ip
 8080850:	d9e0      	bls.n	8080814 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8080852:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
 8080856:	f1be 0f04 	cmp.w	lr, #4
 808085a:	fa5f f28e 	uxtb.w	r2, lr
 808085e:	d804      	bhi.n	808086a <_ZN7FatFile4openEPS_P7fname_th+0xf6>
    return ldir->name1[i];
 8080860:	eb00 024e 	add.w	r2, r0, lr, lsl #1
 8080864:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 8080868:	e00c      	b.n	8080884 <_ZN7FatFile4openEPS_P7fname_th+0x110>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 808086a:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
 808086c:	bf95      	itete	ls
 808086e:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8080872:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 8080876:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 808087a:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 808087e:	bf94      	ite	ls
 8080880:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8080882:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
 8080884:	45e3      	cmp	fp, ip
 8080886:	d103      	bne.n	8080890 <_ZN7FatFile4openEPS_P7fname_th+0x11c>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
 8080888:	2a00      	cmp	r2, #0
 808088a:	bf18      	it	ne
 808088c:	2400      	movne	r4, #0
 808088e:	e79f      	b.n	80807d0 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8080890:	2aff      	cmp	r2, #255	; 0xff
 8080892:	d8bf      	bhi.n	8080814 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8080894:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8080896:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 808089a:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 808089c:	f8d9 1008 	ldr.w	r1, [r9, #8]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 80808a0:	bf98      	it	ls
 80808a2:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 80808a4:	f811 100c 	ldrb.w	r1, [r1, ip]
 80808a8:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 80808ac:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
 80808b0:	bf98      	it	ls
 80808b2:	b2d2      	uxtbls	r2, r2
 80808b4:	f1bc 0f19 	cmp.w	ip, #25
 80808b8:	bf9c      	itt	ls
 80808ba:	3120      	addls	r1, #32
 80808bc:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 80808be:	4291      	cmp	r1, r2
 80808c0:	d1a8      	bne.n	8080814 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 80808c2:	e0f6      	b.n	8080ab2 <_ZN7FatFile4openEPS_P7fname_th+0x33e>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
 80808c4:	070a      	lsls	r2, r1, #28
 80808c6:	d4a5      	bmi.n	8080814 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
      if (lfnOrd) {
 80808c8:	b14c      	cbz	r4, 80808de <_ZN7FatFile4openEPS_P7fname_th+0x16a>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
 80808ca:	2b01      	cmp	r3, #1
 80808cc:	f47f af5d 	bne.w	808078a <_ZN7FatFile4openEPS_P7fname_th+0x16>
 80808d0:	f7ff fdff 	bl	80804d2 <_ZN7FatFile11lfnChecksumEPh>
 80808d4:	9b02      	ldr	r3, [sp, #8]
 80808d6:	4283      	cmp	r3, r0
 80808d8:	f47f af57 	bne.w	808078a <_ZN7FatFile4openEPS_P7fname_th+0x16>
 80808dc:	e00f      	b.n	80808fe <_ZN7FatFile4openEPS_P7fname_th+0x18a>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 80808de:	220b      	movs	r2, #11
 80808e0:	9906      	ldr	r1, [sp, #24]
 80808e2:	9307      	str	r3, [sp, #28]
 80808e4:	f013 f93c 	bl	8093b60 <memcmp>
 80808e8:	9b07      	ldr	r3, [sp, #28]
 80808ea:	2800      	cmp	r0, #0
 80808ec:	f47f af70 	bne.w	80807d0 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
 80808f0:	f899 2000 	ldrb.w	r2, [r9]
 80808f4:	07d1      	lsls	r1, r2, #31
 80808f6:	d502      	bpl.n	80808fe <_ZN7FatFile4openEPS_P7fname_th+0x18a>
          goto found;
        }
        fnameFound = true;
 80808f8:	2201      	movs	r2, #1
 80808fa:	9204      	str	r2, [sp, #16]
 80808fc:	e768      	b.n	80807d0 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
 80808fe:	9b03      	ldr	r3, [sp, #12]
 8080900:	061a      	lsls	r2, r3, #24
 8080902:	f140 80cc 	bpl.w	8080a9e <_ZN7FatFile4openEPS_P7fname_th+0x32a>
 8080906:	e740      	b.n	808078a <_ZN7FatFile4openEPS_P7fname_th+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and O_WRITE
  if (!(oflag & O_CREAT) || !(oflag & O_WRITE)) {
 8080908:	9b03      	ldr	r3, [sp, #12]
 808090a:	f003 0342 	and.w	r3, r3, #66	; 0x42
 808090e:	2b42      	cmp	r3, #66	; 0x42
 8080910:	f47f af3b 	bne.w	808078a <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
 8080914:	2d00      	cmp	r5, #0
 8080916:	bf08      	it	eq
 8080918:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 808091a:	42bd      	cmp	r5, r7
 808091c:	d302      	bcc.n	8080924 <_ZN7FatFile4openEPS_P7fname_th+0x1b0>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
 808091e:	9b04      	ldr	r3, [sp, #16]
 8080920:	b9cb      	cbnz	r3, 8080956 <_ZN7FatFile4openEPS_P7fname_th+0x1e2>
 8080922:	e01f      	b.n	8080964 <_ZN7FatFile4openEPS_P7fname_th+0x1f0>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
 8080924:	2100      	movs	r1, #0
 8080926:	4630      	mov	r0, r6
 8080928:	f000 fd1e 	bl	8081368 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 808092c:	b910      	cbnz	r0, 8080934 <_ZN7FatFile4openEPS_P7fname_th+0x1c0>
      if (dirFile->getError()) {
 808092e:	7873      	ldrb	r3, [r6, #1]
 8080930:	b15b      	cbz	r3, 808094a <_ZN7FatFile4openEPS_P7fname_th+0x1d6>
 8080932:	e72a      	b.n	808078a <_ZN7FatFile4openEPS_P7fname_th+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
 8080934:	3501      	adds	r5, #1
 8080936:	b2ed      	uxtb	r5, r5
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 8080938:	e7ef      	b.n	808091a <_ZN7FatFile4openEPS_P7fname_th+0x1a6>
 808093a:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
 808093c:	791b      	ldrb	r3, [r3, #4]
 808093e:	2b01      	cmp	r3, #1
 8080940:	d8ed      	bhi.n	808091e <_ZN7FatFile4openEPS_P7fname_th+0x1aa>
      break;
    }
    freeFound += 16;
 8080942:	3510      	adds	r5, #16
 8080944:	b2ed      	uxtb	r5, r5
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
 8080946:	42af      	cmp	r7, r5
 8080948:	d9e9      	bls.n	808091e <_ZN7FatFile4openEPS_P7fname_th+0x1aa>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
 808094a:	4630      	mov	r0, r6
 808094c:	f000 fbde 	bl	808110c <_ZN7FatFile13addDirClusterEv>
 8080950:	2800      	cmp	r0, #0
 8080952:	d1f2      	bne.n	808093a <_ZN7FatFile4openEPS_P7fname_th+0x1c6>
 8080954:	e719      	b.n	808078a <_ZN7FatFile4openEPS_P7fname_th+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
 8080956:	4649      	mov	r1, r9
 8080958:	4630      	mov	r0, r6
 808095a:	f7ff feb5 	bl	80806c8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
 808095e:	2800      	cmp	r0, #0
 8080960:	f43f af13 	beq.w	808078a <_ZN7FatFile4openEPS_P7fname_th+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
 8080964:	ea4f 1148 	mov.w	r1, r8, lsl #5
 8080968:	4630      	mov	r0, r6
 808096a:	f000 fd1a 	bl	80813a2 <_ZN7FatFile7seekSetEm>
 808096e:	2800      	cmp	r0, #0
 8080970:	f43f af0b 	beq.w	808078a <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
 8080974:	1e7c      	subs	r4, r7, #1
 8080976:	b2e4      	uxtb	r4, r4
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8080978:	4625      	mov	r5, r4
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 808097a:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
 808097e:	f04f 080f 	mov.w	r8, #15
 8080982:	e040      	b.n	8080a06 <_ZN7FatFile4openEPS_P7fname_th+0x292>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 8080984:	2100      	movs	r1, #0
 8080986:	4630      	mov	r0, r6
 8080988:	f000 fcee 	bl	8081368 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
 808098c:	4607      	mov	r7, r0
 808098e:	2800      	cmp	r0, #0
 8080990:	f43f aefb 	beq.w	808078a <_ZN7FatFile4openEPS_P7fname_th+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
 8080994:	68b2      	ldr	r2, [r6, #8]
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 8080996:	42a5      	cmp	r5, r4
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
 8080998:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 808099c:	f043 0301 	orr.w	r3, r3, #1
 80809a0:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 80809a4:	bf14      	ite	ne
 80809a6:	462a      	movne	r2, r5
 80809a8:	f045 0240 	orreq.w	r2, r5, #64	; 0x40
 80809ac:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
 80809ae:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
 80809b2:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
 80809b6:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 80809ba:	9202      	str	r2, [sp, #8]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 80809bc:	f7ff fd89 	bl	80804d2 <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 80809c0:	9a02      	ldr	r2, [sp, #8]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 80809c2:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
 80809c4:	f887 a01a 	strb.w	sl, [r7, #26]
 80809c8:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 80809cc:	f002 021f 	and.w	r2, r2, #31
 80809d0:	230d      	movs	r3, #13
 80809d2:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
 80809d4:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 80809d8:	435a      	muls	r2, r3
 80809da:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 80809dc:	4593      	cmp	fp, r2
 80809de:	d915      	bls.n	8080a0c <_ZN7FatFile4openEPS_P7fname_th+0x298>
 80809e0:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
 80809e4:	2b04      	cmp	r3, #4
 80809e6:	fa5f fc83 	uxtb.w	ip, r3
 80809ea:	f103 0001 	add.w	r0, r3, #1
 80809ee:	d813      	bhi.n	8080a18 <_ZN7FatFile4openEPS_P7fname_th+0x2a4>
    ldir->name1[i] = c;
 80809f0:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80809f4:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
 80809f8:	280d      	cmp	r0, #13
 80809fa:	f102 0201 	add.w	r2, r2, #1
 80809fe:	4603      	mov	r3, r0
 8080a00:	d1ec      	bne.n	80809dc <_ZN7FatFile4openEPS_P7fname_th+0x268>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8080a02:	3d01      	subs	r5, #1
 8080a04:	b2ed      	uxtb	r5, r5
 8080a06:	2d00      	cmp	r5, #0
 8080a08:	d1bc      	bne.n	8080984 <_ZN7FatFile4openEPS_P7fname_th+0x210>
 8080a0a:	e00e      	b.n	8080a2a <_ZN7FatFile4openEPS_P7fname_th+0x2b6>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8080a0c:	bf14      	ite	ne
 8080a0e:	f04f 31ff 	movne.w	r1, #4294967295
 8080a12:	2100      	moveq	r1, #0
 8080a14:	b289      	uxth	r1, r1
 8080a16:	e7e5      	b.n	80809e4 <_ZN7FatFile4openEPS_P7fname_th+0x270>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 8080a18:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
 8080a1c:	bf94      	ite	ls
 8080a1e:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
 8080a22:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
 8080a26:	8099      	strh	r1, [r3, #4]
 8080a28:	e7e6      	b.n	80809f8 <_ZN7FatFile4openEPS_P7fname_th+0x284>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 8080a2a:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
 8080a2c:	4629      	mov	r1, r5
 8080a2e:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 8080a30:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
 8080a34:	f000 fc98 	bl	8081368 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
 8080a38:	4607      	mov	r7, r0
 8080a3a:	2800      	cmp	r0, #0
 8080a3c:	f43f aea5 	beq.w	808078a <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
 8080a40:	2220      	movs	r2, #32
 8080a42:	4629      	mov	r1, r5
 8080a44:	f013 f8c1 	bl	8093bca <memset>
  memcpy(dir->name, fname->sfn, 11);
 8080a48:	464b      	mov	r3, r9
 8080a4a:	f853 2f0d 	ldr.w	r2, [r3, #13]!
 8080a4e:	603a      	str	r2, [r7, #0]
 8080a50:	685a      	ldr	r2, [r3, #4]
 8080a52:	607a      	str	r2, [r7, #4]
 8080a54:	891a      	ldrh	r2, [r3, #8]
 8080a56:	813a      	strh	r2, [r7, #8]
 8080a58:	7a9b      	ldrb	r3, [r3, #10]
 8080a5a:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
 8080a5c:	f899 3000 	ldrb.w	r3, [r9]
 8080a60:	f003 0318 	and.w	r3, r3, #24
 8080a64:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
 8080a66:	4b18      	ldr	r3, [pc, #96]	; (8080ac8 <_ZN7FatFile4openEPS_P7fname_th+0x354>)
 8080a68:	681b      	ldr	r3, [r3, #0]
 8080a6a:	b12b      	cbz	r3, 8080a78 <_ZN7FatFile4openEPS_P7fname_th+0x304>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
 8080a6c:	f107 010e 	add.w	r1, r7, #14
 8080a70:	f107 0010 	add.w	r0, r7, #16
 8080a74:	4798      	blx	r3
 8080a76:	e006      	b.n	8080a86 <_ZN7FatFile4openEPS_P7fname_th+0x312>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
 8080a78:	2321      	movs	r3, #33	; 0x21
 8080a7a:	743b      	strb	r3, [r7, #16]
 8080a7c:	2328      	movs	r3, #40	; 0x28
 8080a7e:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
 8080a80:	2308      	movs	r3, #8
 8080a82:	73bd      	strb	r5, [r7, #14]
 8080a84:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
 8080a86:	8a3b      	ldrh	r3, [r7, #16]
 8080a88:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
 8080a8a:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
 8080a8c:	89fb      	ldrh	r3, [r7, #14]
 8080a8e:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
 8080a90:	68b2      	ldr	r2, [r6, #8]
 8080a92:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8080a96:	f043 0301 	orr.w	r3, r3, #1
 8080a9a:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
 8080a9e:	9400      	str	r4, [sp, #0]
 8080aa0:	9b03      	ldr	r3, [sp, #12]
 8080aa2:	4652      	mov	r2, sl
 8080aa4:	4631      	mov	r1, r6
 8080aa6:	9805      	ldr	r0, [sp, #20]
 8080aa8:	f000 fcc4 	bl	8081434 <_ZN7FatFile15openCachedEntryEPS_thh>
 8080aac:	e009      	b.n	8080ac2 <_ZN7FatFile4openEPS_P7fname_th+0x34e>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8080aae:	2701      	movs	r7, #1
 8080ab0:	e67e      	b.n	80807b0 <_ZN7FatFile4openEPS_P7fname_th+0x3c>
 8080ab2:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
 8080ab6:	f1be 0f0d 	cmp.w	lr, #13
 8080aba:	f43f ae89 	beq.w	80807d0 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8080abe:	46d4      	mov	ip, sl
 8080ac0:	e6c9      	b.n	8080856 <_ZN7FatFile4openEPS_P7fname_th+0xe2>
  }
  return true;

fail:
  return false;
}
 8080ac2:	b009      	add	sp, #36	; 0x24
 8080ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8080ac8:	200019c4 	.word	0x200019c4

08080acc <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
 8080acc:	f010 baee 	b.w	80910ac <HAL_Pin_Map>

08080ad0 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
 8080ad0:	f010 baec 	b.w	80910ac <HAL_Pin_Map>

08080ad4 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
 8080ad4:	f010 baea 	b.w	80910ac <HAL_Pin_Map>

08080ad8 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
 8080ad8:	f010 bae8 	b.w	80910ac <HAL_Pin_Map>

08080adc <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spi->receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spi->send(data);
 8080adc:	6803      	ldr	r3, [r0, #0]
 8080ade:	695b      	ldr	r3, [r3, #20]
 8080ae0:	4718      	bx	r3

08080ae2 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>:
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
  }
  uint8_t spiReceive() {
    return m_spi->receive();
 8080ae2:	6803      	ldr	r3, [r0, #0]
 8080ae4:	68db      	ldr	r3, [r3, #12]
 8080ae6:	4718      	bx	r3

08080ae8 <_ZN9SdSpiCard14chipSelectHighEv>:
    error(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectHigh() {
 8080ae8:	b510      	push	{r4, lr}
  if (!m_selected) {
 8080aea:	7903      	ldrb	r3, [r0, #4]
    error(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectHigh() {
 8080aec:	4604      	mov	r4, r0
  if (!m_selected) {
 8080aee:	b16b      	cbz	r3, 8080b0c <_ZN9SdSpiCard14chipSelectHighEv+0x24>
    SD_CS_DBG("chipSelectHigh error");
    return;
  }
  digitalWrite(m_chipSelectPin, HIGH);
 8080af0:	2101      	movs	r1, #1
 8080af2:	7940      	ldrb	r0, [r0, #5]
 8080af4:	f011 fd63 	bl	80925be <digitalWrite>
  // insure MISO goes high impedance
  spiSend(0XFF);
 8080af8:	21ff      	movs	r1, #255	; 0xff
 8080afa:	6820      	ldr	r0, [r4, #0]
 8080afc:	f7ff ffee 	bl	8080adc <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
 8080b00:	6820      	ldr	r0, [r4, #0]
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
 8080b02:	6803      	ldr	r3, [r0, #0]
 8080b04:	689b      	ldr	r3, [r3, #8]
 8080b06:	4798      	blx	r3
  spiEndTransaction();
  m_selected = false;
 8080b08:	2300      	movs	r3, #0
 8080b0a:	7123      	strb	r3, [r4, #4]
 8080b0c:	bd10      	pop	{r4, pc}

08080b0e <_ZN9SdSpiCard13chipSelectLowEv>:
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectLow() {
 8080b0e:	b538      	push	{r3, r4, r5, lr}
  if (m_selected) {
 8080b10:	7905      	ldrb	r5, [r0, #4]
  spiSend(0XFF);
  spiEndTransaction();
  m_selected = false;
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectLow() {
 8080b12:	4604      	mov	r4, r0
  if (m_selected) {
 8080b14:	b955      	cbnz	r5, 8080b2c <_ZN9SdSpiCard13chipSelectLowEv+0x1e>
 8080b16:	6800      	ldr	r0, [r0, #0]
  bool writeData(uint8_t token, const uint8_t* src);
  void spiBegin(uint8_t chipSelectPin) {
    m_spi->begin(chipSelectPin);
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
 8080b18:	79e1      	ldrb	r1, [r4, #7]
 8080b1a:	6803      	ldr	r3, [r0, #0]
 8080b1c:	685b      	ldr	r3, [r3, #4]
 8080b1e:	4798      	blx	r3
    SD_CS_DBG("chipSelectLow error");
    return;
  }
  spiBeginTransaction(m_sckDivisor);
  digitalWrite(m_chipSelectPin, LOW);
 8080b20:	4629      	mov	r1, r5
 8080b22:	7960      	ldrb	r0, [r4, #5]
 8080b24:	f011 fd4b 	bl	80925be <digitalWrite>
  m_selected = true;
 8080b28:	2301      	movs	r3, #1
 8080b2a:	7123      	strb	r3, [r4, #4]
 8080b2c:	bd38      	pop	{r3, r4, r5, pc}

08080b2e <_ZN9SdSpiCard8readDataEPhj>:
    chipSelectHigh();
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
 8080b2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080b30:	4604      	mov	r4, r0
 8080b32:	460d      	mov	r5, r1
 8080b34:	4616      	mov	r6, r2
 8080b36:	f010 fb39 	bl	80911ac <HAL_Timer_Get_Milli_Seconds>
 8080b3a:	4607      	mov	r7, r0
#if USE_SD_CRC
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start block token
  unsigned t0 = millis();
  while ((m_status = spiReceive()) == 0XFF) {
 8080b3c:	6820      	ldr	r0, [r4, #0]
 8080b3e:	f7ff ffd0 	bl	8080ae2 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8080b42:	28ff      	cmp	r0, #255	; 0xff
 8080b44:	7220      	strb	r0, [r4, #8]
 8080b46:	d107      	bne.n	8080b58 <_ZN9SdSpiCard8readDataEPhj+0x2a>
 8080b48:	f010 fb30 	bl	80911ac <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_READ_TIMEOUT) {
 8080b4c:	1bc0      	subs	r0, r0, r7
 8080b4e:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 8080b52:	d9f3      	bls.n	8080b3c <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8080b54:	2311      	movs	r3, #17
 8080b56:	e00c      	b.n	8080b72 <_ZN9SdSpiCard8readDataEPhj+0x44>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (m_status != DATA_START_BLOCK) {
 8080b58:	28fe      	cmp	r0, #254	; 0xfe
 8080b5a:	d001      	beq.n	8080b60 <_ZN9SdSpiCard8readDataEPhj+0x32>
 8080b5c:	230f      	movs	r3, #15
 8080b5e:	e008      	b.n	8080b72 <_ZN9SdSpiCard8readDataEPhj+0x44>
 8080b60:	6820      	ldr	r0, [r4, #0]
  }
  uint8_t spiReceive() {
    return m_spi->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spi->receive(buf, n);
 8080b62:	4632      	mov	r2, r6
 8080b64:	6803      	ldr	r3, [r0, #0]
 8080b66:	4629      	mov	r1, r5
 8080b68:	691b      	ldr	r3, [r3, #16]
 8080b6a:	4798      	blx	r3
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
 8080b6c:	7220      	strb	r0, [r4, #8]
 8080b6e:	b130      	cbz	r0, 8080b7e <_ZN9SdSpiCard8readDataEPhj+0x50>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8080b70:	231c      	movs	r3, #28
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  chipSelectHigh();
 8080b72:	4620      	mov	r0, r4
 8080b74:	71a3      	strb	r3, [r4, #6]
 8080b76:	f7ff ffb7 	bl	8080ae8 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8080b7a:	2000      	movs	r0, #0
}
 8080b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    error(SD_CARD_ERROR_READ_CRC);
    goto fail;
  }
#else
  // discard crc
  spiReceive();
 8080b7e:	6820      	ldr	r0, [r4, #0]
 8080b80:	f7ff ffaf 	bl	8080ae2 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
  spiReceive();
 8080b84:	6820      	ldr	r0, [r4, #0]
 8080b86:	f7ff ffac 	bl	8080ae2 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8080b8a:	2001      	movs	r0, #1
 8080b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08080b8e <_ZN9SdSpiCard11waitNotBusyEt>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMillis) {
 8080b8e:	b570      	push	{r4, r5, r6, lr}
 8080b90:	4606      	mov	r6, r0
 8080b92:	460c      	mov	r4, r1
 8080b94:	f010 fb0a 	bl	80911ac <HAL_Timer_Get_Milli_Seconds>
 8080b98:	4605      	mov	r5, r0
  unsigned t0 = millis();
  while (spiReceive() != 0XFF) {
 8080b9a:	6830      	ldr	r0, [r6, #0]
 8080b9c:	f7ff ffa1 	bl	8080ae2 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8080ba0:	28ff      	cmp	r0, #255	; 0xff
 8080ba2:	d006      	beq.n	8080bb2 <_ZN9SdSpiCard11waitNotBusyEt+0x24>
 8080ba4:	f010 fb02 	bl	80911ac <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) >= timeoutMillis) {
 8080ba8:	1b40      	subs	r0, r0, r5
 8080baa:	42a0      	cmp	r0, r4
 8080bac:	d3f5      	bcc.n	8080b9a <_ZN9SdSpiCard11waitNotBusyEt+0xc>
    }
  }
  return true;

fail:
  return false;
 8080bae:	2000      	movs	r0, #0
 8080bb0:	bd70      	pop	{r4, r5, r6, pc}
  while (spiReceive() != 0XFF) {
    if (((unsigned)millis() - t0) >= timeoutMillis) {
      goto fail;
    }
  }
  return true;
 8080bb2:	2001      	movs	r0, #1

fail:
  return false;
}
 8080bb4:	bd70      	pop	{r4, r5, r6, pc}

08080bb6 <_ZN9SdSpiCard11cardCommandEhm>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 8080bb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_selected) {
 8080bb8:	7903      	ldrb	r3, [r0, #4]
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 8080bba:	4604      	mov	r4, r0
 8080bbc:	460d      	mov	r5, r1
 8080bbe:	9201      	str	r2, [sp, #4]
  // select card
  if (!m_selected) {
 8080bc0:	b90b      	cbnz	r3, 8080bc6 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    chipSelectLow();
 8080bc2:	f7ff ffa4 	bl	8080b0e <_ZN9SdSpiCard13chipSelectLowEv>
  }
  // wait if busy
  waitNotBusy(SD_WRITE_TIMEOUT);
 8080bc6:	f44f 7116 	mov.w	r1, #600	; 0x258
 8080bca:	4620      	mov	r0, r4
 8080bcc:	f7ff ffdf 	bl	8080b8e <_ZN9SdSpiCard11waitNotBusyEt>
  for (uint8_t k = 0; k < 6; k++) {
    spiSend(d[k]);
  }
#else  // USE_SD_CRC
  // send command
  spiSend(cmd | 0x40);
 8080bd0:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 8080bd4:	6820      	ldr	r0, [r4, #0]
 8080bd6:	f7ff ff81 	bl	8080adc <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
 8080bda:	f10d 0607 	add.w	r6, sp, #7
 8080bde:	f10d 0703 	add.w	r7, sp, #3

  // send argument
  for (int8_t i = 3; i >= 0; i--) {
    spiSend(pa[i]);
 8080be2:	f816 1901 	ldrb.w	r1, [r6], #-1
 8080be6:	6820      	ldr	r0, [r4, #0]
 8080be8:	f7ff ff78 	bl	8080adc <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
#else  // USE_SD_CRC
  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t i = 3; i >= 0; i--) {
 8080bec:	42be      	cmp	r6, r7
 8080bee:	d1f8      	bne.n	8080be2 <_ZN9SdSpiCard11cardCommandEhm+0x2c>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 8080bf0:	2d00      	cmp	r5, #0
 8080bf2:	bf0c      	ite	eq
 8080bf4:	2195      	moveq	r1, #149	; 0x95
 8080bf6:	2187      	movne	r1, #135	; 0x87
 8080bf8:	6820      	ldr	r0, [r4, #0]
 8080bfa:	f7ff ff6f 	bl	8080adc <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
#endif  // USE_SD_CRC

  // skip stuff byte for stop read
  if (cmd == CMD12) {
 8080bfe:	2d0c      	cmp	r5, #12
 8080c00:	d102      	bne.n	8080c08 <_ZN9SdSpiCard11cardCommandEhm+0x52>
    spiReceive();
 8080c02:	6820      	ldr	r0, [r4, #0]
 8080c04:	f7ff ff6d 	bl	8080ae2 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
  for (int8_t i = 3; i >= 0; i--) {
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 8080c08:	2500      	movs	r5, #0
  if (cmd == CMD12) {
    spiReceive();
  }

  // wait for response
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i != 0XFF; i++) {
 8080c0a:	6820      	ldr	r0, [r4, #0]
 8080c0c:	f7ff ff69 	bl	8080ae2 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8080c10:	0603      	lsls	r3, r0, #24
 8080c12:	7220      	strb	r0, [r4, #8]
 8080c14:	d503      	bpl.n	8080c1e <_ZN9SdSpiCard11cardCommandEhm+0x68>
 8080c16:	3501      	adds	r5, #1
 8080c18:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8080c1c:	d1f5      	bne.n	8080c0a <_ZN9SdSpiCard11cardCommandEhm+0x54>
  }
  return m_status;
}
 8080c1e:	b003      	add	sp, #12
 8080c20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08080c22 <_ZN9SdSpiCard5beginEP9SdSpiBasehh>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
 8080c22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080c24:	461f      	mov	r7, r3
  m_errorCode = m_type = 0;
 8080c26:	2300      	movs	r3, #0
  m_spi = spi;
  m_chipSelectPin = chipSelectPin;
 8080c28:	7142      	strb	r2, [r0, #5]
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
  m_errorCode = m_type = 0;
 8080c2a:	7243      	strb	r3, [r0, #9]
 8080c2c:	7183      	strb	r3, [r0, #6]
  m_spi = spi;
 8080c2e:	6001      	str	r1, [r0, #0]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
 8080c30:	4604      	mov	r4, r0
 8080c32:	f010 fabb 	bl	80911ac <HAL_Timer_Get_Milli_Seconds>
 8080c36:	4606      	mov	r6, r0
 8080c38:	6820      	ldr	r0, [r4, #0]
    m_type = value;
  }
  bool waitNotBusy(uint16_t timeoutMillis);
  bool writeData(uint8_t token, const uint8_t* src);
  void spiBegin(uint8_t chipSelectPin) {
    m_spi->begin(chipSelectPin);
 8080c3a:	7961      	ldrb	r1, [r4, #5]
 8080c3c:	6803      	ldr	r3, [r0, #0]
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
 8080c3e:	250a      	movs	r5, #10
    m_type = value;
  }
  bool waitNotBusy(uint16_t timeoutMillis);
  bool writeData(uint8_t token, const uint8_t* src);
  void spiBegin(uint8_t chipSelectPin) {
    m_spi->begin(chipSelectPin);
 8080c40:	681b      	ldr	r3, [r3, #0]
 8080c42:	4798      	blx	r3

  // initialize SPI bus and chip select pin.
  spiBegin(m_chipSelectPin);

  // set SCK rate for initialization commands.
  m_sckDivisor = SPI_SCK_INIT_DIVISOR;
 8080c44:	2180      	movs	r1, #128	; 0x80
 8080c46:	6820      	ldr	r0, [r4, #0]
 8080c48:	71e1      	strb	r1, [r4, #7]
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
 8080c4a:	6803      	ldr	r3, [r0, #0]
 8080c4c:	685b      	ldr	r3, [r3, #4]
 8080c4e:	4798      	blx	r3
  spiBeginTransaction(m_sckDivisor);

  // must supply min of 74 clock cycles with CS high.
  for (uint8_t i = 0; i < 10; i++) {
    spiSend(0XFF);
 8080c50:	21ff      	movs	r1, #255	; 0xff
 8080c52:	6820      	ldr	r0, [r4, #0]
 8080c54:	3d01      	subs	r5, #1
 8080c56:	f7ff ff41 	bl	8080adc <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
  // set SCK rate for initialization commands.
  m_sckDivisor = SPI_SCK_INIT_DIVISOR;
  spiBeginTransaction(m_sckDivisor);

  // must supply min of 74 clock cycles with CS high.
  for (uint8_t i = 0; i < 10; i++) {
 8080c5a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8080c5e:	d1f7      	bne.n	8080c50 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x2e>
 8080c60:	6820      	ldr	r0, [r4, #0]
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
 8080c62:	6803      	ldr	r3, [r0, #0]
 8080c64:	689b      	ldr	r3, [r3, #8]
 8080c66:	4798      	blx	r3
    spiSend(0XFF);
  }
  spiEndTransaction();
  // command to go idle in SPI mode
  while (cardCommand(CMD0, 0) != R1_IDLE_STATE) {
 8080c68:	2200      	movs	r2, #0
 8080c6a:	4611      	mov	r1, r2
 8080c6c:	4620      	mov	r0, r4
 8080c6e:	f7ff ffa2 	bl	8080bb6 <_ZN9SdSpiCard11cardCommandEhm>
 8080c72:	2801      	cmp	r0, #1
 8080c74:	d007      	beq.n	8080c86 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x64>
 8080c76:	f010 fa99 	bl	80911ac <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8080c7a:	1b80      	subs	r0, r0, r6
 8080c7c:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8080c80:	d9f2      	bls.n	8080c68 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8080c82:	2301      	movs	r3, #1
 8080c84:	e048      	b.n	8080d18 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xf6>
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  while (1) {
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
 8080c86:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8080c8a:	2108      	movs	r1, #8
 8080c8c:	4620      	mov	r0, r4
 8080c8e:	f7ff ff92 	bl	8080bb6 <_ZN9SdSpiCard11cardCommandEhm>
 8080c92:	2805      	cmp	r0, #5
 8080c94:	d101      	bne.n	8080c9a <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x78>
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void type(uint8_t value) {
    m_type = value;
 8080c96:	2301      	movs	r3, #1
 8080c98:	e00b      	b.n	8080cb2 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x90>
 8080c9a:	2504      	movs	r5, #4
      type(SD_CARD_TYPE_SD1);
      break;
    }
    for (uint8_t i = 0; i < 4; i++) {
      m_status = spiReceive();
 8080c9c:	6820      	ldr	r0, [r4, #0]
 8080c9e:	f7ff ff20 	bl	8080ae2 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8080ca2:	3d01      	subs	r5, #1
  while (1) {
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
      type(SD_CARD_TYPE_SD1);
      break;
    }
    for (uint8_t i = 0; i < 4; i++) {
 8080ca4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
 8080ca8:	7220      	strb	r0, [r4, #8]
  while (1) {
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
      type(SD_CARD_TYPE_SD1);
      break;
    }
    for (uint8_t i = 0; i < 4; i++) {
 8080caa:	d1f7      	bne.n	8080c9c <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x7a>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
 8080cac:	28aa      	cmp	r0, #170	; 0xaa
 8080cae:	d108      	bne.n	8080cc2 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xa0>
 8080cb0:	2302      	movs	r3, #2
 8080cb2:	7263      	strb	r3, [r4, #9]
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 8080cb4:	7a63      	ldrb	r3, [r4, #9]
 8080cb6:	2b02      	cmp	r3, #2
 8080cb8:	bf0c      	ite	eq
 8080cba:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
 8080cbe:	2500      	movne	r5, #0
 8080cc0:	e007      	b.n	8080cd2 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xb0>
 8080cc2:	f010 fa73 	bl	80911ac <HAL_Timer_Get_Milli_Seconds>
    }
    if (m_status == 0XAA) {
      type(SD_CARD_TYPE_SD2);
      break;
    }
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8080cc6:	1b80      	subs	r0, r0, r6
 8080cc8:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8080ccc:	d9db      	bls.n	8080c86 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8080cce:	2302      	movs	r3, #2
 8080cd0:	e022      	b.n	8080d18 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xf6>
  bool writeStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
 8080cd2:	2200      	movs	r2, #0
 8080cd4:	2137      	movs	r1, #55	; 0x37
 8080cd6:	4620      	mov	r0, r4
 8080cd8:	f7ff ff6d 	bl	8080bb6 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 8080cdc:	462a      	mov	r2, r5
 8080cde:	2129      	movs	r1, #41	; 0x29
 8080ce0:	4620      	mov	r0, r4
 8080ce2:	f7ff ff68 	bl	8080bb6 <_ZN9SdSpiCard11cardCommandEhm>
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;

  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
 8080ce6:	4602      	mov	r2, r0
 8080ce8:	b138      	cbz	r0, 8080cfa <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xd8>
 8080cea:	f010 fa5f 	bl	80911ac <HAL_Timer_Get_Milli_Seconds>
    // check for timeout
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8080cee:	1b80      	subs	r0, r0, r6
 8080cf0:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8080cf4:	d9ed      	bls.n	8080cd2 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xb0>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8080cf6:	230a      	movs	r3, #10
 8080cf8:	e00e      	b.n	8080d18 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xf6>
      error(SD_CARD_ERROR_ACMD41);
      goto fail;
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
 8080cfa:	7a63      	ldrb	r3, [r4, #9]
 8080cfc:	2b02      	cmp	r3, #2
 8080cfe:	d005      	beq.n	8080d0c <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xea>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  chipSelectHigh();
 8080d00:	4620      	mov	r0, r4
 8080d02:	f7ff fef1 	bl	8080ae8 <_ZN9SdSpiCard14chipSelectHighEv>
  m_sckDivisor = sckDivisor;
 8080d06:	71e7      	strb	r7, [r4, #7]
  return true;
 8080d08:	2001      	movs	r0, #1
 8080d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      goto fail;
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
 8080d0c:	213a      	movs	r1, #58	; 0x3a
 8080d0e:	4620      	mov	r0, r4
 8080d10:	f7ff ff51 	bl	8080bb6 <_ZN9SdSpiCard11cardCommandEhm>
 8080d14:	b130      	cbz	r0, 8080d24 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x102>
 8080d16:	2308      	movs	r3, #8
  chipSelectHigh();
  m_sckDivisor = sckDivisor;
  return true;

fail:
  chipSelectHigh();
 8080d18:	4620      	mov	r0, r4
 8080d1a:	71a3      	strb	r3, [r4, #6]
 8080d1c:	f7ff fee4 	bl	8080ae8 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8080d20:	2000      	movs	r0, #0
}
 8080d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
 8080d24:	6820      	ldr	r0, [r4, #0]
 8080d26:	f7ff fedc 	bl	8080ae2 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8080d2a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8080d2e:	28c0      	cmp	r0, #192	; 0xc0
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void type(uint8_t value) {
    m_type = value;
 8080d30:	bf04      	itt	eq
 8080d32:	2303      	moveq	r3, #3
 8080d34:	7263      	strbeq	r3, [r4, #9]
      type(SD_CARD_TYPE_SDHC);
    }
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
 8080d36:	6820      	ldr	r0, [r4, #0]
 8080d38:	f7ff fed3 	bl	8080ae2 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8080d3c:	6820      	ldr	r0, [r4, #0]
 8080d3e:	f7ff fed0 	bl	8080ae2 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8080d42:	6820      	ldr	r0, [r4, #0]
 8080d44:	f7ff fecd 	bl	8080ae2 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8080d48:	e7da      	b.n	8080d00 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xde>

08080d4a <_ZN9SdSpiCard9readBlockEmPh>:
    chipSelectHigh();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8080d4a:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8080d4c:	7a43      	ldrb	r3, [r0, #9]
    chipSelectHigh();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8080d4e:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8080d50:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8080d52:	bf18      	it	ne
 8080d54:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD17, blockNumber)) {
 8080d56:	460a      	mov	r2, r1
 8080d58:	2111      	movs	r1, #17
    chipSelectHigh();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8080d5a:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
 8080d5c:	f7ff ff2b 	bl	8080bb6 <_ZN9SdSpiCard11cardCommandEhm>
 8080d60:	b110      	cbz	r0, 8080d68 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8080d62:	2304      	movs	r3, #4
 8080d64:	71a3      	strb	r3, [r4, #6]
 8080d66:	e00b      	b.n	8080d80 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
 8080d68:	4629      	mov	r1, r5
 8080d6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8080d6e:	4620      	mov	r0, r4
 8080d70:	f7ff fedd 	bl	8080b2e <_ZN9SdSpiCard8readDataEPhj>
 8080d74:	4605      	mov	r5, r0
 8080d76:	b118      	cbz	r0, 8080d80 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  chipSelectHigh();
 8080d78:	4620      	mov	r0, r4
 8080d7a:	f7ff feb5 	bl	8080ae8 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8080d7e:	e003      	b.n	8080d88 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  chipSelectHigh();
 8080d80:	4620      	mov	r0, r4
 8080d82:	f7ff feb1 	bl	8080ae8 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8080d86:	2500      	movs	r5, #0
}
 8080d88:	4628      	mov	r0, r5
 8080d8a:	bd38      	pop	{r3, r4, r5, pc}

08080d8c <_ZN9SdSpiCard9readStartEm>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8080d8c:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 8080d8e:	7a43      	ldrb	r3, [r0, #9]
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8080d90:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 8080d92:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8080d94:	bf18      	it	ne
 8080d96:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
 8080d98:	2112      	movs	r1, #18
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8080d9a:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
 8080d9c:	f7ff ff0b 	bl	8080bb6 <_ZN9SdSpiCard11cardCommandEhm>
 8080da0:	b130      	cbz	r0, 8080db0 <_ZN9SdSpiCard9readStartEm+0x24>
 8080da2:	2305      	movs	r3, #5
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8080da4:	4620      	mov	r0, r4
 8080da6:	71a3      	strb	r3, [r4, #6]
 8080da8:	f7ff fe9e 	bl	8080ae8 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8080dac:	2000      	movs	r0, #0
 8080dae:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
  return true;
 8080db0:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 8080db2:	bd10      	pop	{r4, pc}

08080db4 <_ZN9SdSpiCard8readStopEv>:
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 8080db4:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
 8080db6:	2200      	movs	r2, #0
 8080db8:	210c      	movs	r1, #12
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 8080dba:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
 8080dbc:	f7ff fefb 	bl	8080bb6 <_ZN9SdSpiCard11cardCommandEhm>
 8080dc0:	b130      	cbz	r0, 8080dd0 <_ZN9SdSpiCard8readStopEv+0x1c>
 8080dc2:	2303      	movs	r3, #3
  }
  chipSelectHigh();
  return true;

fail:
  chipSelectHigh();
 8080dc4:	4620      	mov	r0, r4
 8080dc6:	71a3      	strb	r3, [r4, #6]
 8080dc8:	f7ff fe8e 	bl	8080ae8 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8080dcc:	2000      	movs	r0, #0
 8080dce:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  chipSelectHigh();
 8080dd0:	4620      	mov	r0, r4
 8080dd2:	f7ff fe89 	bl	8080ae8 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8080dd6:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 8080dd8:	bd10      	pop	{r4, pc}

08080dda <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
 8080dda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080ddc:	4605      	mov	r5, r0
 8080dde:	4616      	mov	r6, r2
 8080de0:	461f      	mov	r7, r3
  if (!readStart(block)) {
 8080de2:	f7ff ffd3 	bl	8080d8c <_ZN9SdSpiCard9readStartEm>
 8080de6:	b198      	cbz	r0, 8080e10 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
 8080de8:	2400      	movs	r4, #0
 8080dea:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
 8080dec:	429f      	cmp	r7, r3
 8080dee:	eb06 2144 	add.w	r1, r6, r4, lsl #9
 8080df2:	d908      	bls.n	8080e06 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
 8080df4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8080df8:	4628      	mov	r0, r5
 8080dfa:	f7ff fe98 	bl	8080b2e <_ZN9SdSpiCard8readDataEPhj>
 8080dfe:	3401      	adds	r4, #1
 8080e00:	2800      	cmp	r0, #0
 8080e02:	d1f2      	bne.n	8080dea <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
 8080e04:	e004      	b.n	8080e10 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
 8080e06:	4628      	mov	r0, r5
}
 8080e08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
 8080e0c:	f7ff bfd2 	b.w	8080db4 <_ZN9SdSpiCard8readStopEv>
}
 8080e10:	2000      	movs	r0, #0
 8080e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08080e14 <_ZN9SdSpiCard9writeDataEhPKh>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
 8080e14:	b538      	push	{r3, r4, r5, lr}
 8080e16:	4604      	mov	r4, r0
 8080e18:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
 8080e1a:	6800      	ldr	r0, [r0, #0]
 8080e1c:	f7ff fe5e 	bl	8080adc <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
 8080e20:	6820      	ldr	r0, [r4, #0]
  }
  void spiSend(uint8_t data) {
    m_spi->send(data);
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spi->send(buf, n);
 8080e22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8080e26:	6803      	ldr	r3, [r0, #0]
 8080e28:	4629      	mov	r1, r5
 8080e2a:	699b      	ldr	r3, [r3, #24]
 8080e2c:	4798      	blx	r3
  spiSend(src, 512);
  spiSend(crc >> 8);
 8080e2e:	21ff      	movs	r1, #255	; 0xff
 8080e30:	6820      	ldr	r0, [r4, #0]
 8080e32:	f7ff fe53 	bl	8080adc <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
  spiSend(crc & 0XFF);
 8080e36:	21ff      	movs	r1, #255	; 0xff
 8080e38:	6820      	ldr	r0, [r4, #0]
 8080e3a:	f7ff fe4f 	bl	8080adc <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>

  m_status = spiReceive();
 8080e3e:	6820      	ldr	r0, [r4, #0]
 8080e40:	f7ff fe4f 	bl	8080ae2 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8080e44:	7220      	strb	r0, [r4, #8]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 8080e46:	f000 001f 	and.w	r0, r0, #31
 8080e4a:	2805      	cmp	r0, #5
 8080e4c:	d006      	beq.n	8080e5c <_ZN9SdSpiCard9writeDataEhPKh+0x48>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8080e4e:	2313      	movs	r3, #19
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8080e50:	4620      	mov	r0, r4
 8080e52:	71a3      	strb	r3, [r4, #6]
 8080e54:	f7ff fe48 	bl	8080ae8 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8080e58:	2000      	movs	r0, #0
 8080e5a:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
 8080e5c:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 8080e5e:	bd38      	pop	{r3, r4, r5, pc}

08080e60 <_ZN9SdSpiCard10writeBlockEmPKh>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8080e60:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8080e62:	7a43      	ldrb	r3, [r0, #9]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8080e64:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8080e66:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8080e68:	bf18      	it	ne
 8080e6a:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD24, blockNumber)) {
 8080e6c:	460a      	mov	r2, r1
 8080e6e:	2118      	movs	r1, #24

fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8080e70:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
 8080e72:	f7ff fea0 	bl	8080bb6 <_ZN9SdSpiCard11cardCommandEhm>
 8080e76:	b110      	cbz	r0, 8080e7e <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
 8080e78:	2306      	movs	r3, #6
 8080e7a:	71a3      	strb	r3, [r4, #6]
 8080e7c:	e00a      	b.n	8080e94 <_ZN9SdSpiCard10writeBlockEmPKh+0x34>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
 8080e7e:	462a      	mov	r2, r5
 8080e80:	21fe      	movs	r1, #254	; 0xfe
 8080e82:	4620      	mov	r0, r4
 8080e84:	f7ff ffc6 	bl	8080e14 <_ZN9SdSpiCard9writeDataEhPKh>
 8080e88:	4605      	mov	r5, r0
 8080e8a:	b118      	cbz	r0, 8080e94 <_ZN9SdSpiCard10writeBlockEmPKh+0x34>
    error(SD_CARD_ERROR_WRITE_PROGRAMMING);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  chipSelectHigh();
 8080e8c:	4620      	mov	r0, r4
 8080e8e:	f7ff fe2b 	bl	8080ae8 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8080e92:	e003      	b.n	8080e9c <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>

fail:
  chipSelectHigh();
 8080e94:	4620      	mov	r0, r4
 8080e96:	f7ff fe27 	bl	8080ae8 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8080e9a:	2500      	movs	r5, #0
}
 8080e9c:	4628      	mov	r0, r5
 8080e9e:	bd38      	pop	{r3, r4, r5, pc}

08080ea0 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
 8080ea0:	b570      	push	{r4, r5, r6, lr}
 8080ea2:	4604      	mov	r4, r0
 8080ea4:	460d      	mov	r5, r1
  bool selected = m_selected;
 8080ea6:	7906      	ldrb	r6, [r0, #4]
  chipSelectLow();
 8080ea8:	f7ff fe31 	bl	8080b0e <_ZN9SdSpiCard13chipSelectLowEv>
  // wait for previous write to finish
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8080eac:	f44f 7116 	mov.w	r1, #600	; 0x258
 8080eb0:	4620      	mov	r0, r4
 8080eb2:	f7ff fe6c 	bl	8080b8e <_ZN9SdSpiCard11waitNotBusyEt>
 8080eb6:	b910      	cbnz	r0, 8080ebe <_ZN9SdSpiCard9writeDataEPKh+0x1e>
 8080eb8:	2317      	movs	r3, #23
 8080eba:	71a3      	strb	r3, [r4, #6]
 8080ebc:	e00b      	b.n	8080ed6 <_ZN9SdSpiCard9writeDataEPKh+0x36>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
 8080ebe:	462a      	mov	r2, r5
 8080ec0:	21fc      	movs	r1, #252	; 0xfc
 8080ec2:	4620      	mov	r0, r4
 8080ec4:	f7ff ffa6 	bl	8080e14 <_ZN9SdSpiCard9writeDataEhPKh>
 8080ec8:	4605      	mov	r5, r0
 8080eca:	b120      	cbz	r0, 8080ed6 <_ZN9SdSpiCard9writeDataEPKh+0x36>
    goto fail;
  }
  if (!selected) {
 8080ecc:	b93e      	cbnz	r6, 8080ede <_ZN9SdSpiCard9writeDataEPKh+0x3e>
    chipSelectHigh();
 8080ece:	4620      	mov	r0, r4
 8080ed0:	f7ff fe0a 	bl	8080ae8 <_ZN9SdSpiCard14chipSelectHighEv>
 8080ed4:	e003      	b.n	8080ede <_ZN9SdSpiCard9writeDataEPKh+0x3e>
  }
  return true;

fail:
  chipSelectHigh();
 8080ed6:	4620      	mov	r0, r4
 8080ed8:	f7ff fe06 	bl	8080ae8 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8080edc:	2500      	movs	r5, #0
}
 8080ede:	4628      	mov	r0, r5
 8080ee0:	bd70      	pop	{r4, r5, r6, pc}

08080ee2 <_ZN9SdSpiCard10writeStartEmm>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber, uint32_t eraseCount) {
 8080ee2:	b570      	push	{r4, r5, r6, lr}
 8080ee4:	4604      	mov	r4, r0
 8080ee6:	4616      	mov	r6, r2
 8080ee8:	460d      	mov	r5, r1
  bool writeStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
 8080eea:	2200      	movs	r2, #0
 8080eec:	2137      	movs	r1, #55	; 0x37
 8080eee:	f7ff fe62 	bl	8080bb6 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 8080ef2:	4632      	mov	r2, r6
 8080ef4:	2117      	movs	r1, #23
 8080ef6:	4620      	mov	r0, r4
 8080ef8:	f7ff fe5d 	bl	8080bb6 <_ZN9SdSpiCard11cardCommandEhm>
  SD_TRACE("WS", blockNumber);
  // send pre-erase count
  if (cardAcmd(ACMD23, eraseCount)) {
 8080efc:	b108      	cbz	r0, 8080f02 <_ZN9SdSpiCard10writeStartEmm+0x20>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8080efe:	2309      	movs	r3, #9
 8080f00:	e00a      	b.n	8080f18 <_ZN9SdSpiCard10writeStartEmm+0x36>
    error(SD_CARD_ERROR_ACMD23);
    goto fail;
  }
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8080f02:	7a63      	ldrb	r3, [r4, #9]
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
 8080f04:	2119      	movs	r1, #25
  if (cardAcmd(ACMD23, eraseCount)) {
    error(SD_CARD_ERROR_ACMD23);
    goto fail;
  }
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8080f06:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8080f08:	bf18      	it	ne
 8080f0a:	026d      	lslne	r5, r5, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
 8080f0c:	462a      	mov	r2, r5
 8080f0e:	4620      	mov	r0, r4
 8080f10:	f7ff fe51 	bl	8080bb6 <_ZN9SdSpiCard11cardCommandEhm>
 8080f14:	b130      	cbz	r0, 8080f24 <_ZN9SdSpiCard10writeStartEmm+0x42>
 8080f16:	2307      	movs	r3, #7
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8080f18:	4620      	mov	r0, r4
 8080f1a:	71a3      	strb	r3, [r4, #6]
 8080f1c:	f7ff fde4 	bl	8080ae8 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8080f20:	2000      	movs	r0, #0
 8080f22:	bd70      	pop	{r4, r5, r6, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
 8080f24:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 8080f26:	bd70      	pop	{r4, r5, r6, pc}

08080f28 <_ZN9SdSpiCard9writeStopEv>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 8080f28:	b538      	push	{r3, r4, r5, lr}
 8080f2a:	4604      	mov	r4, r0
  chipSelectLow();
 8080f2c:	f7ff fdef 	bl	8080b0e <_ZN9SdSpiCard13chipSelectLowEv>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8080f30:	f44f 7116 	mov.w	r1, #600	; 0x258
 8080f34:	4620      	mov	r0, r4
 8080f36:	f7ff fe2a 	bl	8080b8e <_ZN9SdSpiCard11waitNotBusyEt>
 8080f3a:	b170      	cbz	r0, 8080f5a <_ZN9SdSpiCard9writeStopEv+0x32>
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
 8080f3c:	21fd      	movs	r1, #253	; 0xfd
 8080f3e:	6820      	ldr	r0, [r4, #0]
 8080f40:	f7ff fdcc 	bl	8080adc <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8080f44:	f44f 7116 	mov.w	r1, #600	; 0x258
 8080f48:	4620      	mov	r0, r4
 8080f4a:	f7ff fe20 	bl	8080b8e <_ZN9SdSpiCard11waitNotBusyEt>
 8080f4e:	4605      	mov	r5, r0
 8080f50:	b118      	cbz	r0, 8080f5a <_ZN9SdSpiCard9writeStopEv+0x32>
    goto fail;
  }
  chipSelectHigh();
 8080f52:	4620      	mov	r0, r4
 8080f54:	f7ff fdc8 	bl	8080ae8 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8080f58:	e005      	b.n	8080f66 <_ZN9SdSpiCard9writeStopEv+0x3e>
 8080f5a:	2312      	movs	r3, #18
 8080f5c:	71a3      	strb	r3, [r4, #6]

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
 8080f5e:	4620      	mov	r0, r4
 8080f60:	f7ff fdc2 	bl	8080ae8 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8080f64:	2500      	movs	r5, #0
}
 8080f66:	4628      	mov	r0, r5
 8080f68:	bd38      	pop	{r3, r4, r5, pc}

08080f6a <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 8080f6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080f6c:	4617      	mov	r7, r2
  if (!writeStart(block, count)) {
 8080f6e:	461a      	mov	r2, r3
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 8080f70:	4605      	mov	r5, r0
 8080f72:	461e      	mov	r6, r3
  if (!writeStart(block, count)) {
 8080f74:	f7ff ffb5 	bl	8080ee2 <_ZN9SdSpiCard10writeStartEmm>
 8080f78:	b170      	cbz	r0, 8080f98 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
 8080f7a:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8080f7c:	42b4      	cmp	r4, r6
 8080f7e:	eb07 2144 	add.w	r1, r7, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 8080f82:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block, count)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8080f84:	d004      	beq.n	8080f90 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x26>
    if (!writeData(src)) {
 8080f86:	f7ff ff8b 	bl	8080ea0 <_ZN9SdSpiCard9writeDataEPKh>
 8080f8a:	b128      	cbz	r0, 8080f98 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block, count)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8080f8c:	3401      	adds	r4, #1
 8080f8e:	e7f5      	b.n	8080f7c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x12>
  return writeStop();

 fail:
  chipSelectHigh();
  return false;
}
 8080f90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 8080f94:	f7ff bfc8 	b.w	8080f28 <_ZN9SdSpiCard9writeStopEv>

 fail:
  chipSelectHigh();
 8080f98:	4628      	mov	r0, r5
 8080f9a:	f7ff fda5 	bl	8080ae8 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
}
 8080f9e:	2000      	movs	r0, #0
 8080fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08080fa2 <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP9SdSpiBasehh>:
 8080fa2:	f010 b883 	b.w	80910ac <HAL_Pin_Map>
	...

08080fa8 <_Z36SD_SPI_DMA_TransferComplete_Callbackv>:
#if SPI_INTERFACE_COUNT == 1
const uint8_t m_spiIf = 0;
#endif
//-----------------------------------------------------------------------------
void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
 8080fa8:	4b01      	ldr	r3, [pc, #4]	; (8080fb0 <_Z36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 8080faa:	2201      	movs	r2, #1
 8080fac:	701a      	strb	r2, [r3, #0]
 8080fae:	4770      	bx	lr
 8080fb0:	200019b8 	.word	0x200019b8

08080fb4 <_ZN5SdSpi14endTransactionEv>:
#endif  // SPI_CLOCK_DIV128
  // delay for SPI transfer done callback too soon bug.
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
}
//-----------------------------------------------------------------------------
void SdSpi::endTransaction() {
 8080fb4:	4770      	bx	lr
	...

08080fb8 <_ZN5SdSpi5beginEh>:
void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
}
//------------------------------------------------------------------------------
void SdSpi::begin(uint8_t chipSelectPin) {
  spiPtr[m_spiIf]->begin(chipSelectPin);
 8080fb8:	7902      	ldrb	r2, [r0, #4]
 8080fba:	4b02      	ldr	r3, [pc, #8]	; (8080fc4 <_ZN5SdSpi5beginEh+0xc>)
 8080fbc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8080fc0:	f010 bb0d 	b.w	80915de <_ZN8SPIClass5beginEt>
 8080fc4:	08093dc0 	.word	0x08093dc0

08080fc8 <_ZN5SdSpi16beginTransactionEh>:
}
//------------------------------------------------------------------------------
void SdSpi::beginTransaction(uint8_t divisor) {
 8080fc8:	b570      	push	{r4, r5, r6, lr}
 8080fca:	4606      	mov	r6, r0
 8080fcc:	460c      	mov	r4, r1
  spiPtr[m_spiIf]->setBitOrder(MSBFIRST);
 8080fce:	7903      	ldrb	r3, [r0, #4]
 8080fd0:	4d1a      	ldr	r5, [pc, #104]	; (808103c <_ZN5SdSpi16beginTransactionEh+0x74>)
 8080fd2:	2101      	movs	r1, #1
 8080fd4:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8080fd8:	f010 fb07 	bl	80915ea <_ZN8SPIClass11setBitOrderEh>
  spiPtr[m_spiIf]->setDataMode(SPI_MODE0);
 8080fdc:	7933      	ldrb	r3, [r6, #4]
 8080fde:	2100      	movs	r1, #0
 8080fe0:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8080fe4:	f010 fb04 	bl	80915f0 <_ZN8SPIClass11setDataModeEh>
#ifndef SPI_CLOCK_DIV128
  spiPtr[m_spiIf]->setClockDivider(divisor);
#else  // SPI_CLOCK_DIV128
  int v;
  if (divisor <= 2) {
 8080fe8:	2c02      	cmp	r4, #2
 8080fea:	d90c      	bls.n	8081006 <_ZN5SdSpi16beginTransactionEh+0x3e>
    v = SPI_CLOCK_DIV2;
  } else  if (divisor <= 4) {
 8080fec:	2c04      	cmp	r4, #4
 8080fee:	d90c      	bls.n	808100a <_ZN5SdSpi16beginTransactionEh+0x42>
    v = SPI_CLOCK_DIV4;
  } else  if (divisor <= 8) {
 8080ff0:	2c08      	cmp	r4, #8
 8080ff2:	d90c      	bls.n	808100e <_ZN5SdSpi16beginTransactionEh+0x46>
    v = SPI_CLOCK_DIV8;
  } else  if (divisor <= 16) {
 8080ff4:	2c10      	cmp	r4, #16
 8080ff6:	d90c      	bls.n	8081012 <_ZN5SdSpi16beginTransactionEh+0x4a>
    v = SPI_CLOCK_DIV16;
  } else  if (divisor <= 32) {
 8080ff8:	2c20      	cmp	r4, #32
 8080ffa:	d90c      	bls.n	8081016 <_ZN5SdSpi16beginTransactionEh+0x4e>
    v = SPI_CLOCK_DIV32;
  } else  if (divisor <= 64) {
    v = SPI_CLOCK_DIV64;
  } else {
    v = SPI_CLOCK_DIV128;
 8080ffc:	2c41      	cmp	r4, #65	; 0x41
 8080ffe:	bf34      	ite	cc
 8081000:	2128      	movcc	r1, #40	; 0x28
 8081002:	2130      	movcs	r1, #48	; 0x30
 8081004:	e008      	b.n	8081018 <_ZN5SdSpi16beginTransactionEh+0x50>
#ifndef SPI_CLOCK_DIV128
  spiPtr[m_spiIf]->setClockDivider(divisor);
#else  // SPI_CLOCK_DIV128
  int v;
  if (divisor <= 2) {
    v = SPI_CLOCK_DIV2;
 8081006:	2100      	movs	r1, #0
 8081008:	e006      	b.n	8081018 <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 4) {
    v = SPI_CLOCK_DIV4;
 808100a:	2108      	movs	r1, #8
 808100c:	e004      	b.n	8081018 <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 8) {
    v = SPI_CLOCK_DIV8;
 808100e:	2110      	movs	r1, #16
 8081010:	e002      	b.n	8081018 <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 16) {
    v = SPI_CLOCK_DIV16;
 8081012:	2118      	movs	r1, #24
 8081014:	e000      	b.n	8081018 <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 32) {
    v = SPI_CLOCK_DIV32;
 8081016:	2120      	movs	r1, #32
  } else  if (divisor <= 64) {
    v = SPI_CLOCK_DIV64;
  } else {
    v = SPI_CLOCK_DIV128;
  }
  spiPtr[m_spiIf]->setClockDivider(v);
 8081018:	7933      	ldrb	r3, [r6, #4]
 808101a:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 808101e:	f010 fb31 	bl	8091684 <_ZN8SPIClass15setClockDividerEh>
#endif  // SPI_CLOCK_DIV128
  // delay for SPI transfer done callback too soon bug.
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
 8081022:	2318      	movs	r3, #24
 8081024:	fb03 f104 	mul.w	r1, r3, r4
 8081028:	7932      	ldrb	r2, [r6, #4]
 808102a:	233c      	movs	r3, #60	; 0x3c
 808102c:	fb02 1101 	mla	r1, r2, r1, r1
 8081030:	fb91 f1f3 	sdiv	r1, r1, r3
 8081034:	4b02      	ldr	r3, [pc, #8]	; (8081040 <_ZN5SdSpi16beginTransactionEh+0x78>)
 8081036:	6019      	str	r1, [r3, #0]
 8081038:	bd70      	pop	{r4, r5, r6, pc}
 808103a:	bf00      	nop
 808103c:	08093dc0 	.word	0x08093dc0
 8081040:	200019bc 	.word	0x200019bc

08081044 <_ZN5SdSpi7receiveEv>:
void SdSpi::endTransaction() {
}
//-----------------------------------------------------------------------------
/** SPI receive a byte */
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
 8081044:	7902      	ldrb	r2, [r0, #4]
 8081046:	4b03      	ldr	r3, [pc, #12]	; (8081054 <_ZN5SdSpi7receiveEv+0x10>)
 8081048:	21ff      	movs	r1, #255	; 0xff
 808104a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 808104e:	f010 bb2d 	b.w	80916ac <_ZN8SPIClass8transferEh>
 8081052:	bf00      	nop
 8081054:	08093dc0 	.word	0x08093dc0

08081058 <_ZN5SdSpi4sendEh>:
  return 0;
}
//-----------------------------------------------------------------------------
/** SPI send a byte */
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
 8081058:	7902      	ldrb	r2, [r0, #4]
 808105a:	4b02      	ldr	r3, [pc, #8]	; (8081064 <_ZN5SdSpi4sendEh+0xc>)
 808105c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8081060:	f010 bb24 	b.w	80916ac <_ZN8SPIClass8transferEh>
 8081064:	08093dc0 	.word	0x08093dc0

08081068 <_ZN5SdSpi7receiveEPhj>:
/** SPI receive a byte */
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
}
//-----------------------------------------------------------------------------
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
 8081068:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SPI_DMA_TransferCompleted = false;
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 808106a:	4b0c      	ldr	r3, [pc, #48]	; (808109c <_ZN5SdSpi7receiveEPhj+0x34>)
 808106c:	7906      	ldrb	r6, [r0, #4]
 808106e:	480c      	ldr	r0, [pc, #48]	; (80810a0 <_ZN5SdSpi7receiveEPhj+0x38>)
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
}
//-----------------------------------------------------------------------------
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 8081070:	2500      	movs	r5, #0
 8081072:	4c0c      	ldr	r4, [pc, #48]	; (80810a4 <_ZN5SdSpi7receiveEPhj+0x3c>)
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8081074:	9300      	str	r3, [sp, #0]
 8081076:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 808107a:	4613      	mov	r3, r2
 808107c:	460a      	mov	r2, r1
 808107e:	4629      	mov	r1, r5
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
}
//-----------------------------------------------------------------------------
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 8081080:	7025      	strb	r5, [r4, #0]
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8081082:	f010 fb19 	bl	80916b8 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
 8081086:	7823      	ldrb	r3, [r4, #0]
 8081088:	2b00      	cmp	r3, #0
 808108a:	d0fc      	beq.n	8081086 <_ZN5SdSpi7receiveEPhj+0x1e>
  if (bugDelay) {
 808108c:	4b06      	ldr	r3, [pc, #24]	; (80810a8 <_ZN5SdSpi7receiveEPhj+0x40>)
 808108e:	6818      	ldr	r0, [r3, #0]
 8081090:	b108      	cbz	r0, 8081096 <_ZN5SdSpi7receiveEPhj+0x2e>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 8081092:	f010 f883 	bl	809119c <HAL_Delay_Microseconds>
    delayMicroseconds(bugDelay);
  }
  return 0;
}
 8081096:	2000      	movs	r0, #0
 8081098:	b002      	add	sp, #8
 808109a:	bd70      	pop	{r4, r5, r6, pc}
 808109c:	08080fa9 	.word	0x08080fa9
 80810a0:	08093dc0 	.word	0x08093dc0
 80810a4:	200019b8 	.word	0x200019b8
 80810a8:	200019bc 	.word	0x200019bc

080810ac <_ZN5SdSpi4sendEPKhj>:
/** SPI send a byte */
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
 80810ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SPI_DMA_TransferCompleted = false;

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 80810ae:	4b0d      	ldr	r3, [pc, #52]	; (80810e4 <_ZN5SdSpi4sendEPKhj+0x38>)
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
 80810b0:	7906      	ldrb	r6, [r0, #4]
                            SD_SPI_DMA_TransferComplete_Callback);
 80810b2:	480d      	ldr	r0, [pc, #52]	; (80810e8 <_ZN5SdSpi4sendEPKhj+0x3c>)
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 80810b4:	2500      	movs	r5, #0
 80810b6:	4c0d      	ldr	r4, [pc, #52]	; (80810ec <_ZN5SdSpi4sendEPKhj+0x40>)

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 80810b8:	9300      	str	r3, [sp, #0]
 80810ba:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 80810be:	4613      	mov	r3, r2
 80810c0:	462a      	mov	r2, r5
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 80810c2:	7025      	strb	r5, [r4, #0]

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 80810c4:	f010 faf8 	bl	80916b8 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
 80810c8:	7823      	ldrb	r3, [r4, #0]
 80810ca:	2b00      	cmp	r3, #0
 80810cc:	d0fc      	beq.n	80810c8 <_ZN5SdSpi4sendEPKhj+0x1c>
  if (bugDelay) {
 80810ce:	4b08      	ldr	r3, [pc, #32]	; (80810f0 <_ZN5SdSpi4sendEPKhj+0x44>)
 80810d0:	6818      	ldr	r0, [r3, #0]
 80810d2:	b120      	cbz	r0, 80810de <_ZN5SdSpi4sendEPKhj+0x32>
    delayMicroseconds(bugDelay);
  }
}
 80810d4:	b002      	add	sp, #8
 80810d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80810da:	f010 b85f 	b.w	809119c <HAL_Delay_Microseconds>
 80810de:	b002      	add	sp, #8
 80810e0:	bd70      	pop	{r4, r5, r6, pc}
 80810e2:	bf00      	nop
 80810e4:	08080fa9 	.word	0x08080fa9
 80810e8:	08093dc0 	.word	0x08093dc0
 80810ec:	200019b8 	.word	0x200019b8
 80810f0:	200019bc 	.word	0x200019bc

080810f4 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv>:
 80810f4:	f00f bfda 	b.w	80910ac <HAL_Pin_Map>

080810f8 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 80810f8:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 80810fa:	f100 0210 	add.w	r2, r0, #16
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 80810fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8081102:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8081104:	6901      	ldr	r1, [r0, #16]
 8081106:	6880      	ldr	r0, [r0, #8]
 8081108:	f000 bc04 	b.w	8081914 <_ZN9FatVolume15allocateClusterEmPm>

0808110c <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 808110c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 8081110:	7803      	ldrb	r3, [r0, #0]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 8081112:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 8081114:	f003 0320 	and.w	r3, r3, #32
 8081118:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 808111c:	b10b      	cbz	r3, 8081122 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
 808111e:	2600      	movs	r6, #0
 8081120:	e02e      	b.n	8081180 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
 8081122:	6942      	ldr	r2, [r0, #20]
 8081124:	4b18      	ldr	r3, [pc, #96]	; (8081188 <_ZN7FatFile13addDirClusterEv+0x7c>)
 8081126:	429a      	cmp	r2, r3
 8081128:	d8f9      	bhi.n	808111e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
 808112a:	f7ff ffe5 	bl	80810f8 <_ZN7FatFile10addClusterEv>
 808112e:	4606      	mov	r6, r0
 8081130:	2800      	cmp	r0, #0
 8081132:	d0f4      	beq.n	808111e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterStartBlock(m_curCluster);
 8081134:	6921      	ldr	r1, [r4, #16]
 8081136:	68a0      	ldr	r0, [r4, #8]
 8081138:	f000 fb8d 	bl	8081856 <_ZNK9FatVolume17clusterStartBlockEm>
 808113c:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 808113e:	68a0      	ldr	r0, [r4, #8]
 8081140:	2205      	movs	r2, #5
 8081142:	4639      	mov	r1, r7
 8081144:	3028      	adds	r0, #40	; 0x28
 8081146:	f000 fb62 	bl	808180e <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
 808114a:	4680      	mov	r8, r0
 808114c:	2800      	cmp	r0, #0
 808114e:	d0e6      	beq.n	808111e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
 8081150:	4629      	mov	r1, r5
 8081152:	f44f 7200 	mov.w	r2, #512	; 0x200
 8081156:	f012 fd38 	bl	8093bca <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 808115a:	2501      	movs	r5, #1
 808115c:	68a0      	ldr	r0, [r4, #8]
 808115e:	7902      	ldrb	r2, [r0, #4]
 8081160:	42aa      	cmp	r2, r5
 8081162:	d909      	bls.n	8081178 <_ZN7FatFile13addDirClusterEv+0x6c>
    if (!m_vol->writeBlock(block + i, pc->data)) {
 8081164:	6803      	ldr	r3, [r0, #0]
 8081166:	4642      	mov	r2, r8
 8081168:	685b      	ldr	r3, [r3, #4]
 808116a:	19e9      	adds	r1, r5, r7
 808116c:	4798      	blx	r3
 808116e:	2800      	cmp	r0, #0
 8081170:	d0d5      	beq.n	808111e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 8081172:	3501      	adds	r5, #1
 8081174:	b2ed      	uxtb	r5, r5
 8081176:	e7f1      	b.n	808115c <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
 8081178:	6963      	ldr	r3, [r4, #20]
 808117a:	eb03 2342 	add.w	r3, r3, r2, lsl #9
 808117e:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
 8081180:	4630      	mov	r0, r6
 8081182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081186:	bf00      	nop
 8081188:	001ffdff 	.word	0x001ffdff

0808118c <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
 808118c:	b510      	push	{r4, lr}
 808118e:	4604      	mov	r4, r0
 8081190:	6880      	ldr	r0, [r0, #8]
 8081192:	460a      	mov	r2, r1
 8081194:	3028      	adds	r0, #40	; 0x28
 8081196:	69a1      	ldr	r1, [r4, #24]
 8081198:	f000 fb39 	bl	808180e <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
 808119c:	b120      	cbz	r0, 80811a8 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
 808119e:	88a3      	ldrh	r3, [r4, #4]
 80811a0:	f003 030f 	and.w	r3, r3, #15
 80811a4:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
 80811a8:	bd10      	pop	{r4, pc}

080811aa <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 80811aa:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
 80811ac:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 80811ae:	4605      	mov	r5, r0
 80811b0:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
 80811b2:	b984      	cbnz	r4, 80811d6 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
 80811b4:	2224      	movs	r2, #36	; 0x24
 80811b6:	4621      	mov	r1, r4
 80811b8:	f012 fd07 	bl	8093bca <memset>

  m_vol = vol;
 80811bc:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
 80811be:	79f3      	ldrb	r3, [r6, #7]
 80811c0:	2b10      	cmp	r3, #16
 80811c2:	d003      	beq.n	80811cc <_ZN7FatFile8openRootEP9FatVolume+0x22>
 80811c4:	2b20      	cmp	r3, #32
 80811c6:	d106      	bne.n	80811d6 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 80811c8:	2340      	movs	r3, #64	; 0x40
 80811ca:	e000      	b.n	80811ce <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
 80811cc:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = O_READ;
 80811ce:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 80811d0:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = O_READ;
 80811d2:	70a8      	strb	r0, [r5, #2]
 80811d4:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
 80811d6:	2000      	movs	r0, #0
 80811d8:	bd70      	pop	{r4, r5, r6, pc}

080811da <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
 80811da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80811de:	7803      	ldrb	r3, [r0, #0]
 80811e0:	4604      	mov	r4, r0
 80811e2:	4689      	mov	r9, r1
 80811e4:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & O_READ)) {
 80811e6:	b14b      	cbz	r3, 80811fc <_ZN7FatFile4readEPvj+0x22>
 80811e8:	7882      	ldrb	r2, [r0, #2]
 80811ea:	07d1      	lsls	r1, r2, #31
 80811ec:	d506      	bpl.n	80811fc <_ZN7FatFile4readEPvj+0x22>
 80811ee:	e00c      	b.n	808120a <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 80811f0:	465a      	mov	r2, fp
 80811f2:	6921      	ldr	r1, [r4, #16]
 80811f4:	f000 fb35 	bl	8081862 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
 80811f8:	2800      	cmp	r0, #0
 80811fa:	da3d      	bge.n	8081278 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 80811fc:	7863      	ldrb	r3, [r4, #1]
  return -1;
 80811fe:	f04f 30ff 	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 8081202:	f043 0302 	orr.w	r3, r3, #2
 8081206:	7063      	strb	r3, [r4, #1]
  return -1;
 8081208:	e098      	b.n	808133c <_ZN7FatFile4readEPvj+0x162>
  if (!isOpen() || !(m_flags & O_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
 808120a:	071a      	lsls	r2, r3, #28
 808120c:	d503      	bpl.n	8081216 <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
 808120e:	69e3      	ldr	r3, [r4, #28]
 8081210:	6962      	ldr	r2, [r4, #20]
 8081212:	1a9b      	subs	r3, r3, r2
 8081214:	e007      	b.n	8081226 <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
 8081216:	069a      	lsls	r2, r3, #26
 8081218:	d508      	bpl.n	808122c <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
 808121a:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
 808121c:	891a      	ldrh	r2, [r3, #8]
 808121e:	6963      	ldr	r3, [r4, #20]
 8081220:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
 8081224:	b29b      	uxth	r3, r3
 8081226:	429d      	cmp	r5, r3
 8081228:	bf28      	it	cs
 808122a:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
 808122c:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
 808122e:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8081232:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 8081236:	2e00      	cmp	r6, #0
 8081238:	d035      	beq.n	80812a6 <_ZN7FatFile4readEPvj+0xcc>
 808123a:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 808123c:	6963      	ldr	r3, [r4, #20]
    if (isRootFixed()) {
 808123e:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 8081242:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8081246:	68a0      	ldr	r0, [r4, #8]
 8081248:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
 808124c:	d002      	beq.n	8081254 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 808124e:	6a03      	ldr	r3, [r0, #32]
 8081250:	4419      	add	r1, r3
 8081252:	e01d      	b.n	8081290 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 8081254:	f890 8005 	ldrb.w	r8, [r0, #5]
 8081258:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
 808125c:	f1ba 0f00 	cmp.w	sl, #0
 8081260:	d110      	bne.n	8081284 <_ZN7FatFile4readEPvj+0xaa>
 8081262:	f1b8 0f00 	cmp.w	r8, #0
 8081266:	d10d      	bne.n	8081284 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
 8081268:	2b00      	cmp	r3, #0
 808126a:	d1c1      	bne.n	80811f0 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 808126c:	0653      	lsls	r3, r2, #25
 808126e:	bf4c      	ite	mi
 8081270:	6a03      	ldrmi	r3, [r0, #32]
 8081272:	6a23      	ldrpl	r3, [r4, #32]
 8081274:	6123      	str	r3, [r4, #16]
 8081276:	e005      	b.n	8081284 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
 8081278:	d104      	bne.n	8081284 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
 808127a:	7823      	ldrb	r3, [r4, #0]
 808127c:	f013 0f70 	tst.w	r3, #112	; 0x70
 8081280:	d111      	bne.n	80812a6 <_ZN7FatFile4readEPvj+0xcc>
 8081282:	e7bb      	b.n	80811fc <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 8081284:	6921      	ldr	r1, [r4, #16]
 8081286:	68a0      	ldr	r0, [r4, #8]
 8081288:	f000 fae5 	bl	8081856 <_ZNK9FatVolume17clusterStartBlockEm>
 808128c:	eb08 0100 	add.w	r1, r8, r0
 8081290:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
 8081292:	f1ba 0f00 	cmp.w	sl, #0
 8081296:	d135      	bne.n	8081304 <_ZN7FatFile4readEPvj+0x12a>
 8081298:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 808129c:	d332      	bcc.n	8081304 <_ZN7FatFile4readEPvj+0x12a>
 808129e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80812a0:	4291      	cmp	r1, r2
 80812a2:	d102      	bne.n	80812aa <_ZN7FatFile4readEPvj+0xd0>
 80812a4:	e02e      	b.n	8081304 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
 80812a6:	1ba8      	subs	r0, r5, r6
 80812a8:	e048      	b.n	808133c <_ZN7FatFile4readEPvj+0x162>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
 80812aa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80812ae:	d31b      	bcc.n	80812e8 <_ZN7FatFile4readEPvj+0x10e>
      uint8_t nb = toRead >> 9;
      if (!isRootFixed()) {
 80812b0:	7827      	ldrb	r7, [r4, #0]
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      uint8_t nb = toRead >> 9;
 80812b2:	f3c6 2347 	ubfx	r3, r6, #9, #8
      if (!isRootFixed()) {
 80812b6:	06bf      	lsls	r7, r7, #26
 80812b8:	d406      	bmi.n	80812c8 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
 80812ba:	7907      	ldrb	r7, [r0, #4]
 80812bc:	ebc8 0707 	rsb	r7, r8, r7
 80812c0:	b2ff      	uxtb	r7, r7
 80812c2:	42bb      	cmp	r3, r7
 80812c4:	bf28      	it	cs
 80812c6:	463b      	movcs	r3, r7
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 80812c8:	4291      	cmp	r1, r2
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
 80812ca:	ea4f 2743 	mov.w	r7, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 80812ce:	d207      	bcs.n	80812e0 <_ZN7FatFile4readEPvj+0x106>
        if (!m_vol->cacheSync()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
 80812d0:	68a0      	ldr	r0, [r4, #8]
 80812d2:	6802      	ldr	r2, [r0, #0]
 80812d4:	f8d2 a008 	ldr.w	sl, [r2, #8]
 80812d8:	464a      	mov	r2, r9
 80812da:	47d0      	blx	sl
 80812dc:	b960      	cbnz	r0, 80812f8 <_ZN7FatFile4readEPvj+0x11e>
 80812de:	e78d      	b.n	80811fc <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 80812e0:	441a      	add	r2, r3
 80812e2:	4291      	cmp	r1, r2
 80812e4:	d321      	bcc.n	808132a <_ZN7FatFile4readEPvj+0x150>
 80812e6:	e7f3      	b.n	80812d0 <_ZN7FatFile4readEPvj+0xf6>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
 80812e8:	6803      	ldr	r3, [r0, #0]
 80812ea:	464a      	mov	r2, r9
 80812ec:	681b      	ldr	r3, [r3, #0]
 80812ee:	4798      	blx	r3
 80812f0:	2800      	cmp	r0, #0
 80812f2:	d083      	beq.n	80811fc <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
 80812f4:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
 80812f8:	6963      	ldr	r3, [r4, #20]
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
 80812fa:	44b9      	add	r9, r7
    m_curPosition += n;
 80812fc:	443b      	add	r3, r7
 80812fe:	6163      	str	r3, [r4, #20]
    toRead -= n;
 8081300:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 8081302:	e798      	b.n	8081236 <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8081304:	2200      	movs	r2, #0
 8081306:	3028      	adds	r0, #40	; 0x28
 8081308:	f000 fa81 	bl	808180e <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
 808130c:	2800      	cmp	r0, #0
 808130e:	f43f af75 	beq.w	80811fc <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
 8081312:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
 8081316:	42b7      	cmp	r7, r6
 8081318:	bf28      	it	cs
 808131a:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
 808131c:	eb00 010a 	add.w	r1, r0, sl
 8081320:	463a      	mov	r2, r7
 8081322:	4648      	mov	r0, r9
 8081324:	f012 fc2b 	bl	8093b7e <memcpy>
 8081328:	e7e6      	b.n	80812f8 <_ZN7FatFile4readEPvj+0x11e>
 808132a:	e88d 000a 	stmia.w	sp, {r1, r3}
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSync()) {
 808132e:	f7ff f8c3 	bl	80804b8 <_ZN9FatVolume9cacheSyncEv>
 8081332:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8081336:	2800      	cmp	r0, #0
 8081338:	d1ca      	bne.n	80812d0 <_ZN7FatFile4readEPvj+0xf6>
 808133a:	e75f      	b.n	80811fc <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
 808133c:	b003      	add	sp, #12
 808133e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08081342 <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
 8081342:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 8081344:	2201      	movs	r2, #1
 8081346:	f10d 0107 	add.w	r1, sp, #7
 808134a:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
 808134c:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
 808134e:	6905      	ldr	r5, [r0, #16]
 8081350:	f7ff ff43 	bl	80811da <_ZN7FatFile4readEPvj>
 8081354:	2801      	cmp	r0, #1
 8081356:	bf09      	itett	eq
 8081358:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 808135c:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
 8081360:	6166      	streq	r6, [r4, #20]
  m_curCluster = pos->cluster;
 8081362:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
 8081364:	b002      	add	sp, #8
 8081366:	bd70      	pop	{r4, r5, r6, pc}

08081368 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 8081368:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 808136a:	6943      	ldr	r3, [r0, #20]
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 808136c:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 808136e:	f3c3 1543 	ubfx	r5, r3, #5, #4

  if (i == 0 || !skipReadOk) {
 8081372:	b105      	cbz	r5, 8081376 <_ZN7FatFile12readDirCacheEb+0xe>
 8081374:	b969      	cbnz	r1, 8081392 <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
 8081376:	2201      	movs	r2, #1
 8081378:	f10d 0107 	add.w	r1, sp, #7
 808137c:	4620      	mov	r0, r4
 808137e:	f7ff ff2c 	bl	80811da <_ZN7FatFile4readEPvj>
 8081382:	b240      	sxtb	r0, r0
    if  (n != 1) {
 8081384:	2801      	cmp	r0, #1
 8081386:	d001      	beq.n	808138c <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
 8081388:	2000      	movs	r0, #0
 808138a:	e008      	b.n	808139e <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
 808138c:	6963      	ldr	r3, [r4, #20]
 808138e:	331f      	adds	r3, #31
 8081390:	e000      	b.n	8081394 <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
 8081392:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 8081394:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
 8081396:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 8081398:	3034      	adds	r0, #52	; 0x34
 808139a:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
 808139e:	b003      	add	sp, #12
 80813a0:	bd30      	pop	{r4, r5, pc}

080813a2 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
 80813a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80813a6:	460e      	mov	r6, r1
 80813a8:	7801      	ldrb	r1, [r0, #0]
 80813aa:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
 80813ac:	6907      	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
 80813ae:	2900      	cmp	r1, #0
 80813b0:	d039      	beq.n	8081426 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
 80813b2:	6945      	ldr	r5, [r0, #20]
 80813b4:	42b5      	cmp	r5, r6
 80813b6:	d03a      	beq.n	808142e <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
 80813b8:	b90e      	cbnz	r6, 80813be <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
 80813ba:	6106      	str	r6, [r0, #16]
    goto done;
 80813bc:	e031      	b.n	8081422 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
 80813be:	070b      	lsls	r3, r1, #28
 80813c0:	d503      	bpl.n	80813ca <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
 80813c2:	69c3      	ldr	r3, [r0, #28]
 80813c4:	429e      	cmp	r6, r3
 80813c6:	d82e      	bhi.n	8081426 <_ZN7FatFile7seekSetEm+0x84>
 80813c8:	e007      	b.n	80813da <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
 80813ca:	0688      	lsls	r0, r1, #26
 80813cc:	d505      	bpl.n	80813da <_ZN7FatFile7seekSetEm+0x38>
 80813ce:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
 80813d0:	891b      	ldrh	r3, [r3, #8]
 80813d2:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
 80813d6:	d826      	bhi.n	8081426 <_ZN7FatFile7seekSetEm+0x84>
 80813d8:	e023      	b.n	8081422 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 80813da:	f8d4 e008 	ldr.w	lr, [r4, #8]
 80813de:	1e6a      	subs	r2, r5, #1
 80813e0:	f89e 3006 	ldrb.w	r3, [lr, #6]
 80813e4:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 80813e8:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 80813ea:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 80813ec:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
 80813ee:	429a      	cmp	r2, r3
 80813f0:	d800      	bhi.n	80813f4 <_ZN7FatFile7seekSetEm+0x52>
 80813f2:	b94d      	cbnz	r5, 8081408 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 80813f4:	064a      	lsls	r2, r1, #25
 80813f6:	bf4c      	ite	mi
 80813f8:	f8de 2020 	ldrmi.w	r2, [lr, #32]
 80813fc:	6a22      	ldrpl	r2, [r4, #32]
 80813fe:	6122      	str	r2, [r4, #16]
 8081400:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 8081402:	f104 0810 	add.w	r8, r4, #16
 8081406:	e00a      	b.n	808141e <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
 8081408:	1a9b      	subs	r3, r3, r2
 808140a:	e7f9      	b.n	8081400 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 808140c:	4642      	mov	r2, r8
 808140e:	6921      	ldr	r1, [r4, #16]
 8081410:	68a0      	ldr	r0, [r4, #8]
 8081412:	f000 fa26 	bl	8081862 <_ZN9FatVolume6fatGetEmPm>
 8081416:	2800      	cmp	r0, #0
 8081418:	f105 35ff 	add.w	r5, r5, #4294967295
 808141c:	dd03      	ble.n	8081426 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
 808141e:	2d00      	cmp	r5, #0
 8081420:	d1f4      	bne.n	808140c <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
 8081422:	6166      	str	r6, [r4, #20]
 8081424:	e003      	b.n	808142e <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
 8081426:	6127      	str	r7, [r4, #16]
  return false;
 8081428:	2000      	movs	r0, #0
 808142a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
 808142e:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
 8081430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08081434 <_ZN7FatFile15openCachedEntryEPS_thh>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
 8081434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081436:	460f      	mov	r7, r1
 8081438:	4604      	mov	r4, r0
 808143a:	4616      	mov	r6, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 808143c:	2100      	movs	r1, #0
 808143e:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
 8081440:	461d      	mov	r5, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 8081442:	f012 fbc2 	bl	8093bca <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
 8081446:	68b8      	ldr	r0, [r7, #8]
  m_dirIndex = dirIndex;
 8081448:	80a6      	strh	r6, [r4, #4]
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
 808144a:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 808144c:	6a3b      	ldr	r3, [r7, #32]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 808144e:	f006 020f 	and.w	r2, r6, #15
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 8081452:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 8081454:	0152      	lsls	r2, r2, #5
 8081456:	f100 0334 	add.w	r3, r0, #52	; 0x34
 808145a:	4413      	add	r3, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
 808145c:	7ad9      	ldrb	r1, [r3, #11]
 808145e:	070f      	lsls	r7, r1, #28
 8081460:	d502      	bpl.n	8081468 <_ZN7FatFile15openCachedEntryEPS_thh+0x34>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
 8081462:	2000      	movs	r0, #0
 8081464:	7020      	strb	r0, [r4, #0]
  return false;
 8081466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
 8081468:	1881      	adds	r1, r0, r2
 808146a:	f891 103f 	ldrb.w	r1, [r1, #63]	; 0x3f
 808146e:	f001 0117 	and.w	r1, r1, #23
 8081472:	7021      	strb	r1, [r4, #0]
  if (DIR_IS_FILE(dir)) {
 8081474:	7adb      	ldrb	r3, [r3, #11]
 8081476:	f013 0f18 	tst.w	r3, #24
    m_attr |= FILE_ATTR_FILE;
 808147a:	bf08      	it	eq
 808147c:	f041 0108 	orreq.w	r1, r1, #8
  }
  m_lfnOrd = lfnOrd;
 8081480:	f89d 3018 	ldrb.w	r3, [sp, #24]
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
  if (DIR_IS_FILE(dir)) {
    m_attr |= FILE_ATTR_FILE;
 8081484:	bf08      	it	eq
 8081486:	7021      	strbeq	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
  // Write, truncate, or at end is an error for a directory or read-only file.
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
 8081488:	f015 0f32 	tst.w	r5, #50	; 0x32
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
  if (DIR_IS_FILE(dir)) {
    m_attr |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
 808148c:	70e3      	strb	r3, [r4, #3]
  // Write, truncate, or at end is an error for a directory or read-only file.
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
 808148e:	d003      	beq.n	8081498 <_ZN7FatFile15openCachedEntryEPS_thh+0x64>
    if (isSubDir() || isReadOnly()) {
 8081490:	7823      	ldrb	r3, [r4, #0]
 8081492:	f013 0f11 	tst.w	r3, #17
 8081496:	d1e4      	bne.n	8081462 <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // save open flags for read/write
  m_flags = oflag & F_OFLAG;
 8081498:	f005 030f 	and.w	r3, r5, #15
 808149c:	70a3      	strb	r3, [r4, #2]
 808149e:	6b03      	ldr	r3, [r0, #48]	; 0x30

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 80814a0:	4402      	add	r2, r0
    }
  }
  // save open flags for read/write
  m_flags = oflag & F_OFLAG;

  m_dirBlock = m_vol->cacheBlockNumber();
 80814a2:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 80814a4:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
 80814a8:	f8b2 104e 	ldrh.w	r1, [r2, #78]	; 0x4e

  if (oflag & O_TRUNC) {
 80814ac:	06ee      	lsls	r6, r5, #27

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 80814ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16

  if (oflag & O_TRUNC) {
 80814b2:	d504      	bpl.n	80814be <_ZN7FatFile15openCachedEntryEPS_thh+0x8a>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 80814b4:	b171      	cbz	r1, 80814d4 <_ZN7FatFile15openCachedEntryEPS_thh+0xa0>
 80814b6:	f000 fa68 	bl	808198a <_ZN9FatVolume9freeChainEm>
 80814ba:	b958      	cbnz	r0, 80814d4 <_ZN7FatFile15openCachedEntryEPS_thh+0xa0>
 80814bc:	e7d1      	b.n	8081462 <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
 80814be:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
 80814c0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80814c2:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 80814c4:	06ab      	lsls	r3, r5, #26
 80814c6:	d50a      	bpl.n	80814de <_ZN7FatFile15openCachedEntryEPS_thh+0xaa>
 80814c8:	69e1      	ldr	r1, [r4, #28]
 80814ca:	4620      	mov	r0, r4
 80814cc:	f7ff ff69 	bl	80813a2 <_ZN7FatFile7seekSetEm>
 80814d0:	b928      	cbnz	r0, 80814de <_ZN7FatFile15openCachedEntryEPS_thh+0xaa>
 80814d2:	e7c6      	b.n	8081462 <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
 80814d4:	78a3      	ldrb	r3, [r4, #2]
 80814d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80814da:	70a3      	strb	r3, [r4, #2]
 80814dc:	e7f2      	b.n	80814c4 <_ZN7FatFile15openCachedEntryEPS_thh+0x90>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
 80814de:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
 80814e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080814e4 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 80814e4:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
 80814e6:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 80814e8:	4604      	mov	r4, r0
  if (!isOpen()) {
 80814ea:	b90b      	cbnz	r3, 80814f0 <_ZN7FatFile4syncEv+0xc>
    return true;
 80814ec:	2001      	movs	r0, #1
 80814ee:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (m_flags & F_FILE_DIR_DIRTY) {
 80814f0:	f990 3002 	ldrsb.w	r3, [r0, #2]
 80814f4:	2b00      	cmp	r3, #0
 80814f6:	da23      	bge.n	8081540 <_ZN7FatFile4syncEv+0x5c>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 80814f8:	2101      	movs	r1, #1
 80814fa:	f7ff fe47 	bl	808118c <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 80814fe:	4605      	mov	r5, r0
 8081500:	b928      	cbnz	r0, 808150e <_ZN7FatFile4syncEv+0x2a>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 8081502:	7863      	ldrb	r3, [r4, #1]
  return false;
 8081504:	2000      	movs	r0, #0
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 8081506:	f043 0301 	orr.w	r3, r3, #1
 808150a:	7063      	strb	r3, [r4, #1]
 808150c:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 808150e:	7803      	ldrb	r3, [r0, #0]
 8081510:	2be5      	cmp	r3, #229	; 0xe5
 8081512:	d0f6      	beq.n	8081502 <_ZN7FatFile4syncEv+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
 8081514:	7823      	ldrb	r3, [r4, #0]
 8081516:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
 8081518:	bf44      	itt	mi
 808151a:	69e3      	ldrmi	r3, [r4, #28]
 808151c:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
 808151e:	8c23      	ldrh	r3, [r4, #32]
 8081520:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
 8081522:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8081524:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
 8081526:	4b09      	ldr	r3, [pc, #36]	; (808154c <_ZN7FatFile4syncEv+0x68>)
 8081528:	681b      	ldr	r3, [r3, #0]
 808152a:	b12b      	cbz	r3, 8081538 <_ZN7FatFile4syncEv+0x54>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
 808152c:	f100 0116 	add.w	r1, r0, #22
 8081530:	3018      	adds	r0, #24
 8081532:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
 8081534:	8b2b      	ldrh	r3, [r5, #24]
 8081536:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
 8081538:	78a3      	ldrb	r3, [r4, #2]
 808153a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 808153e:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
 8081540:	68a0      	ldr	r0, [r4, #8]
 8081542:	f7fe ffb9 	bl	80804b8 <_ZN9FatVolume9cacheSyncEv>
 8081546:	2800      	cmp	r0, #0
 8081548:	d0db      	beq.n	8081502 <_ZN7FatFile4syncEv+0x1e>
 808154a:	e7cf      	b.n	80814ec <_ZN7FatFile4syncEv+0x8>
 808154c:	200019c4 	.word	0x200019c4

08081550 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
 8081550:	b510      	push	{r4, lr}
 8081552:	4604      	mov	r4, r0
  bool rtn = sync();
 8081554:	f7ff ffc6 	bl	80814e4 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
 8081558:	2300      	movs	r3, #0
 808155a:	7023      	strb	r3, [r4, #0]
  return rtn;
}
 808155c:	bd10      	pop	{r4, pc}

0808155e <_ZN7FatFile4openEPS_PKch>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, uint8_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
 808155e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081560:	461f      	mov	r7, r3
 8081562:	b093      	sub	sp, #76	; 0x4c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8081564:	2300      	movs	r3, #0
 8081566:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 808156a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 808156e:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, uint8_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
 8081570:	4606      	mov	r6, r0
 8081572:	460c      	mov	r4, r1
 8081574:	9201      	str	r2, [sp, #4]
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 8081576:	b10b      	cbz	r3, 808157c <_ZN7FatFile4openEPS_PKch+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
 8081578:	2000      	movs	r0, #0
 808157a:	e03d      	b.n	80815f8 <_ZN7FatFile4openEPS_PKch+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 808157c:	780b      	ldrb	r3, [r1, #0]
 808157e:	f013 0f70 	tst.w	r3, #112	; 0x70
 8081582:	d0f9      	beq.n	8081578 <_ZN7FatFile4openEPS_PKch+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
 8081584:	7813      	ldrb	r3, [r2, #0]
 8081586:	2b2f      	cmp	r3, #47	; 0x2f
 8081588:	d112      	bne.n	80815b0 <_ZN7FatFile4openEPS_PKch+0x52>
    while (isDirSeparator(*path)) {
 808158a:	9b01      	ldr	r3, [sp, #4]
 808158c:	781a      	ldrb	r2, [r3, #0]
 808158e:	2a2f      	cmp	r2, #47	; 0x2f
 8081590:	d102      	bne.n	8081598 <_ZN7FatFile4openEPS_PKch+0x3a>
      path++;
 8081592:	3301      	adds	r3, #1
 8081594:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
 8081596:	e7f8      	b.n	808158a <_ZN7FatFile4openEPS_PKch+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
 8081598:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
 808159a:	b91a      	cbnz	r2, 80815a4 <_ZN7FatFile4openEPS_PKch+0x46>
      return openRoot(dirFile->m_vol);
 808159c:	4630      	mov	r0, r6
 808159e:	f7ff fe04 	bl	80811aa <_ZN7FatFile8openRootEP9FatVolume>
 80815a2:	e029      	b.n	80815f8 <_ZN7FatFile4openEPS_PKch+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
 80815a4:	a809      	add	r0, sp, #36	; 0x24
 80815a6:	f7ff fe00 	bl	80811aa <_ZN7FatFile8openRootEP9FatVolume>
 80815aa:	2800      	cmp	r0, #0
 80815ac:	d0e4      	beq.n	8081578 <_ZN7FatFile4openEPS_PKch+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
 80815ae:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
 80815b0:	aa01      	add	r2, sp, #4
 80815b2:	a903      	add	r1, sp, #12
 80815b4:	9801      	ldr	r0, [sp, #4]
 80815b6:	f7fe ff9b 	bl	80804f0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
 80815ba:	2800      	cmp	r0, #0
 80815bc:	d0dc      	beq.n	8081578 <_ZN7FatFile4openEPS_PKch+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
 80815be:	9b01      	ldr	r3, [sp, #4]
 80815c0:	781b      	ldrb	r3, [r3, #0]
 80815c2:	b19b      	cbz	r3, 80815ec <_ZN7FatFile4openEPS_PKch+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_READ)) {
 80815c4:	2301      	movs	r3, #1
 80815c6:	aa03      	add	r2, sp, #12
 80815c8:	4621      	mov	r1, r4
 80815ca:	4630      	mov	r0, r6
 80815cc:	f7ff f8d2 	bl	8080774 <_ZN7FatFile4openEPS_P7fname_th>
 80815d0:	2800      	cmp	r0, #0
 80815d2:	d0d1      	beq.n	8081578 <_ZN7FatFile4openEPS_PKch+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 80815d4:	4635      	mov	r5, r6
 80815d6:	ac09      	add	r4, sp, #36	; 0x24
 80815d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80815da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80815dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80815de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80815e0:	682b      	ldr	r3, [r5, #0]
    dirFile = &tmpDir;
    close();
 80815e2:	4630      	mov	r0, r6
    }
    if (!open(dirFile, &fname, O_READ)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 80815e4:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
 80815e6:	f7ff ffb3 	bl	8081550 <_ZN7FatFile5closeEv>
 80815ea:	e7e0      	b.n	80815ae <_ZN7FatFile4openEPS_PKch+0x50>
  }
  return open(dirFile, &fname, oflag);
 80815ec:	463b      	mov	r3, r7
 80815ee:	aa03      	add	r2, sp, #12
 80815f0:	4621      	mov	r1, r4
 80815f2:	4630      	mov	r0, r6
 80815f4:	f7ff f8be 	bl	8080774 <_ZN7FatFile4openEPS_P7fname_th>

fail:
  return false;
}
 80815f8:	b013      	add	sp, #76	; 0x4c
 80815fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080815fc <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 80815fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 8081600:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8081602:	4604      	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 8081604:	071d      	lsls	r5, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8081606:	4689      	mov	r9, r1
 8081608:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 808160a:	d508      	bpl.n	808161e <_ZN7FatFile5writeEPKvj+0x22>
 808160c:	7883      	ldrb	r3, [r0, #2]
 808160e:	0799      	lsls	r1, r3, #30
 8081610:	d505      	bpl.n	808161e <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & O_APPEND)) {
 8081612:	075b      	lsls	r3, r3, #29
 8081614:	d50b      	bpl.n	808162e <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
 8081616:	69e1      	ldr	r1, [r4, #28]
 8081618:	f7ff fec3 	bl	80813a2 <_ZN7FatFile7seekSetEm>
 808161c:	b938      	cbnz	r0, 808162e <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 808161e:	7863      	ldrb	r3, [r4, #1]
  return -1;
 8081620:	f04f 30ff 	mov.w	r0, #4294967295
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 8081624:	f043 0301 	orr.w	r3, r3, #1
 8081628:	7063      	strb	r3, [r4, #1]
  return -1;
 808162a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
 808162e:	6963      	ldr	r3, [r4, #20]
 8081630:	43db      	mvns	r3, r3
 8081632:	4598      	cmp	r8, r3
 8081634:	d8f3      	bhi.n	808161e <_ZN7FatFile5writeEPKvj+0x22>
 8081636:	4647      	mov	r7, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8081638:	f04f 0a00 	mov.w	sl, #0
 808163c:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 808163e:	2f00      	cmp	r7, #0
 8081640:	f000 8082 	beq.w	8081748 <_ZN7FatFile5writeEPKvj+0x14c>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
 8081644:	68a0      	ldr	r0, [r4, #8]
    uint16_t blockOffset = m_curPosition & 0X1FF;
 8081646:	f3c3 0608 	ubfx	r6, r3, #0, #9
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 808164a:	7945      	ldrb	r5, [r0, #5]
    if (blockOfCluster == 0 && blockOffset == 0) {
 808164c:	ea15 2553 	ands.w	r5, r5, r3, lsr #9
 8081650:	d11c      	bne.n	808168c <_ZN7FatFile5writeEPKvj+0x90>
 8081652:	b9de      	cbnz	r6, 808168c <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
 8081654:	6921      	ldr	r1, [r4, #16]
 8081656:	b171      	cbz	r1, 8081676 <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8081658:	f104 0210 	add.w	r2, r4, #16
 808165c:	f000 f901 	bl	8081862 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
 8081660:	2800      	cmp	r0, #0
 8081662:	dbdc      	blt.n	808161e <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
 8081664:	f040 808e 	bne.w	8081784 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
 8081668:	4620      	mov	r0, r4
 808166a:	f7ff fd45 	bl	80810f8 <_ZN7FatFile10addClusterEv>
 808166e:	2800      	cmp	r0, #0
 8081670:	f040 8088 	bne.w	8081784 <_ZN7FatFile5writeEPKvj+0x188>
 8081674:	e7d3      	b.n	808161e <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
 8081676:	6a23      	ldr	r3, [r4, #32]
 8081678:	b93b      	cbnz	r3, 808168a <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
 808167a:	4620      	mov	r0, r4
 808167c:	f7ff fd3c 	bl	80810f8 <_ZN7FatFile10addClusterEv>
 8081680:	2800      	cmp	r0, #0
 8081682:	d0cc      	beq.n	808161e <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
 8081684:	6923      	ldr	r3, [r4, #16]
 8081686:	6223      	str	r3, [r4, #32]
 8081688:	e000      	b.n	808168c <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
 808168a:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 808168c:	6921      	ldr	r1, [r4, #16]
 808168e:	68a0      	ldr	r0, [r4, #8]
 8081690:	f000 f8e1 	bl	8081856 <_ZNK9FatVolume17clusterStartBlockEm>
 8081694:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
 8081696:	b916      	cbnz	r6, 808169e <_ZN7FatFile5writeEPKvj+0xa2>
 8081698:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 808169c:	d221      	bcs.n	80816e2 <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
 808169e:	f5c6 7500 	rsb	r5, r6, #512	; 0x200
 80816a2:	42bd      	cmp	r5, r7
 80816a4:	bf28      	it	cs
 80816a6:	463d      	movcs	r5, r7
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
 80816a8:	b936      	cbnz	r6, 80816b8 <_ZN7FatFile5writeEPKvj+0xbc>
 80816aa:	6963      	ldr	r3, [r4, #20]
 80816ac:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
 80816ae:	4293      	cmp	r3, r2
 80816b0:	bf34      	ite	cc
 80816b2:	2201      	movcc	r2, #1
 80816b4:	2205      	movcs	r2, #5
 80816b6:	e000      	b.n	80816ba <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
 80816b8:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 80816ba:	68a0      	ldr	r0, [r4, #8]
 80816bc:	3028      	adds	r0, #40	; 0x28
 80816be:	f000 f8a6 	bl	808180e <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
 80816c2:	2800      	cmp	r0, #0
 80816c4:	d0ab      	beq.n	808161e <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 80816c6:	4430      	add	r0, r6
 80816c8:	462a      	mov	r2, r5
 80816ca:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
 80816cc:	442e      	add	r6, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 80816ce:	f012 fa56 	bl	8093b7e <memcpy>
      if (512 == (n + blockOffset)) {
 80816d2:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80816d6:	d131      	bne.n	808173c <_ZN7FatFile5writeEPKvj+0x140>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
 80816d8:	68a0      	ldr	r0, [r4, #8]
 80816da:	3028      	adds	r0, #40	; 0x28
 80816dc:	f000 f870 	bl	80817c0 <_ZN8FatCache4syncEv>
 80816e0:	e018      	b.n	8081714 <_ZN7FatFile5writeEPKvj+0x118>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
 80816e2:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 80816e6:	68a2      	ldr	r2, [r4, #8]
 80816e8:	d316      	bcc.n	8081718 <_ZN7FatFile5writeEPKvj+0x11c>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
 80816ea:	7913      	ldrb	r3, [r2, #4]
 80816ec:	6b10      	ldr	r0, [r2, #48]	; 0x30
 80816ee:	1b5d      	subs	r5, r3, r5
 80816f0:	b2ed      	uxtb	r5, r5
      uint8_t nBlock = nToWrite >> 9;
 80816f2:	f3c7 2347 	ubfx	r3, r7, #9, #8
 80816f6:	42ab      	cmp	r3, r5
 80816f8:	bf28      	it	cs
 80816fa:	462b      	movcs	r3, r5
      if (nBlock > maxBlocks) {
        nBlock = maxBlocks;
      }
      n = 512*nBlock;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 80816fc:	4281      	cmp	r1, r0
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      uint8_t nBlock = nToWrite >> 9;
      if (nBlock > maxBlocks) {
        nBlock = maxBlocks;
      }
      n = 512*nBlock;
 80816fe:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 8081702:	d302      	bcc.n	808170a <_ZN7FatFile5writeEPKvj+0x10e>
 8081704:	4418      	add	r0, r3
 8081706:	4281      	cmp	r1, r0
 8081708:	d336      	bcc.n	8081778 <_ZN7FatFile5writeEPKvj+0x17c>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nBlock)) {
 808170a:	68a0      	ldr	r0, [r4, #8]
 808170c:	6802      	ldr	r2, [r0, #0]
 808170e:	68d6      	ldr	r6, [r2, #12]
 8081710:	464a      	mov	r2, r9
 8081712:	47b0      	blx	r6
 8081714:	b990      	cbnz	r0, 808173c <_ZN7FatFile5writeEPKvj+0x140>
 8081716:	e782      	b.n	808161e <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
 8081718:	6b13      	ldr	r3, [r2, #48]	; 0x30
 808171a:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 808171c:	bf02      	ittt	eq
 808171e:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8081722:	f882 a028 	strbeq.w	sl, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 8081726:	6313      	streq	r3, [r2, #48]	; 0x30
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
 8081728:	68a0      	ldr	r0, [r4, #8]
 808172a:	464a      	mov	r2, r9
 808172c:	6803      	ldr	r3, [r0, #0]
 808172e:	685b      	ldr	r3, [r3, #4]
 8081730:	4798      	blx	r3
 8081732:	2800      	cmp	r0, #0
 8081734:	f43f af73 	beq.w	808161e <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
 8081738:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 808173c:	6963      	ldr	r3, [r4, #20]
    src += n;
 808173e:	44a9      	add	r9, r5
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 8081740:	442b      	add	r3, r5
 8081742:	6163      	str	r3, [r4, #20]
    src += n;
    nToWrite -= n;
 8081744:	1b7f      	subs	r7, r7, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 8081746:	e779      	b.n	808163c <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
 8081748:	69e2      	ldr	r2, [r4, #28]
 808174a:	4293      	cmp	r3, r2
 808174c:	78a2      	ldrb	r2, [r4, #2]
 808174e:	d901      	bls.n	8081754 <_ZN7FatFile5writeEPKvj+0x158>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
 8081750:	61e3      	str	r3, [r4, #28]
 8081752:	e002      	b.n	808175a <_ZN7FatFile5writeEPKvj+0x15e>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
 8081754:	4b0e      	ldr	r3, [pc, #56]	; (8081790 <_ZN7FatFile5writeEPKvj+0x194>)
 8081756:	681b      	ldr	r3, [r3, #0]
 8081758:	b113      	cbz	r3, 8081760 <_ZN7FatFile5writeEPKvj+0x164>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
 808175a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 808175e:	70a2      	strb	r2, [r4, #2]
  }

  if (m_flags & O_SYNC) {
 8081760:	78a3      	ldrb	r3, [r4, #2]
 8081762:	071a      	lsls	r2, r3, #28
 8081764:	d402      	bmi.n	808176c <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
 8081766:	4640      	mov	r0, r8
 8081768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & O_SYNC) {
    if (!sync()) {
 808176c:	4620      	mov	r0, r4
 808176e:	f7ff feb9 	bl	80814e4 <_ZN7FatFile4syncEv>
 8081772:	2800      	cmp	r0, #0
 8081774:	d1f7      	bne.n	8081766 <_ZN7FatFile5writeEPKvj+0x16a>
 8081776:	e752      	b.n	808161e <_ZN7FatFile5writeEPKvj+0x22>
 8081778:	f04f 30ff 	mov.w	r0, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 808177c:	f882 a028 	strb.w	sl, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 8081780:	6310      	str	r0, [r2, #48]	; 0x30
 8081782:	e7c2      	b.n	808170a <_ZN7FatFile5writeEPKvj+0x10e>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 8081784:	6921      	ldr	r1, [r4, #16]
 8081786:	68a0      	ldr	r0, [r4, #8]
 8081788:	f000 f865 	bl	8081856 <_ZNK9FatVolume17clusterStartBlockEm>
 808178c:	4601      	mov	r1, r0
 808178e:	e783      	b.n	8081698 <_ZN7FatFile5writeEPKvj+0x9c>
 8081790:	200019c4 	.word	0x200019c4

08081794 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
 8081794:	f00f bc8a 	b.w	80910ac <HAL_Pin_Map>

08081798 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8081798:	b570      	push	{r4, r5, r6, lr}
 808179a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 808179c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 808179e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80817a0:	b149      	cbz	r1, 80817b6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80817a2:	f012 fa32 	bl	8093c0a <strlen>
 80817a6:	682b      	ldr	r3, [r5, #0]
 80817a8:	4602      	mov	r2, r0
 80817aa:	4621      	mov	r1, r4
 80817ac:	4628      	mov	r0, r5
    }
 80817ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80817b2:	68db      	ldr	r3, [r3, #12]
 80817b4:	4718      	bx	r3
    }
 80817b6:	bd70      	pop	{r4, r5, r6, pc}

080817b8 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
 80817b8:	f00f bc78 	b.w	80910ac <HAL_Pin_Map>

080817bc <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
 80817bc:	f00f bc76 	b.w	80910ac <HAL_Pin_Map>

080817c0 <_ZN8FatCache4syncEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 80817c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
 80817c2:	7803      	ldrb	r3, [r0, #0]

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 80817c4:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
 80817c6:	07da      	lsls	r2, r3, #31
 80817c8:	d51e      	bpl.n	8081808 <_ZN8FatCache4syncEv+0x48>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
 80817ca:	6840      	ldr	r0, [r0, #4]
 80817cc:	f104 060c 	add.w	r6, r4, #12
 80817d0:	6803      	ldr	r3, [r0, #0]
 80817d2:	4632      	mov	r2, r6
 80817d4:	685b      	ldr	r3, [r3, #4]
 80817d6:	68a1      	ldr	r1, [r4, #8]
 80817d8:	4798      	blx	r3
 80817da:	4605      	mov	r5, r0
 80817dc:	b908      	cbnz	r0, 80817e2 <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
 80817de:	2500      	movs	r5, #0
 80817e0:	e013      	b.n	808180a <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
 80817e2:	7823      	ldrb	r3, [r4, #0]
 80817e4:	079b      	lsls	r3, r3, #30
 80817e6:	d404      	bmi.n	80817f2 <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
 80817e8:	7823      	ldrb	r3, [r4, #0]
 80817ea:	f023 0301 	bic.w	r3, r3, #1
 80817ee:	7023      	strb	r3, [r4, #0]
 80817f0:	e00b      	b.n	808180a <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
 80817f2:	6860      	ldr	r0, [r4, #4]
      if (!m_vol->writeBlock(lbn, m_block.data)) {
 80817f4:	68a7      	ldr	r7, [r4, #8]
 80817f6:	6901      	ldr	r1, [r0, #16]
 80817f8:	6803      	ldr	r3, [r0, #0]
 80817fa:	4632      	mov	r2, r6
 80817fc:	685b      	ldr	r3, [r3, #4]
 80817fe:	4439      	add	r1, r7
 8081800:	4798      	blx	r3
 8081802:	2800      	cmp	r0, #0
 8081804:	d1f0      	bne.n	80817e8 <_ZN8FatCache4syncEv+0x28>
 8081806:	e7ea      	b.n	80817de <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
 8081808:	2501      	movs	r5, #1

fail:
  return false;
}
 808180a:	4628      	mov	r0, r5
 808180c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808180e <_ZN8FatCache4readEmh>:
 * <http://www.gnu.org/licenses/>.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 808180e:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
 8081810:	6883      	ldr	r3, [r0, #8]
 * <http://www.gnu.org/licenses/>.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8081812:	4604      	mov	r4, r0
  if (m_lbn != lbn) {
 8081814:	428b      	cmp	r3, r1
 * <http://www.gnu.org/licenses/>.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8081816:	460e      	mov	r6, r1
 8081818:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
 808181a:	d014      	beq.n	8081846 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
 808181c:	f7ff ffd0 	bl	80817c0 <_ZN8FatCache4syncEv>
 8081820:	b908      	cbnz	r0, 8081826 <_ZN8FatCache4readEmh+0x18>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:
  return 0;
 8081822:	2000      	movs	r0, #0
 8081824:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
 8081826:	076b      	lsls	r3, r5, #29
 8081828:	d503      	bpl.n	8081832 <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
 808182a:	2300      	movs	r3, #0
 808182c:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
 808182e:	60a6      	str	r6, [r4, #8]
 8081830:	e009      	b.n	8081846 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
 8081832:	6860      	ldr	r0, [r4, #4]
 8081834:	f104 020c 	add.w	r2, r4, #12
 8081838:	6803      	ldr	r3, [r0, #0]
 808183a:	4631      	mov	r1, r6
 808183c:	681b      	ldr	r3, [r3, #0]
 808183e:	4798      	blx	r3
 8081840:	2800      	cmp	r0, #0
 8081842:	d1f2      	bne.n	808182a <_ZN8FatCache4readEmh+0x1c>
 8081844:	e7ed      	b.n	8081822 <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
 8081846:	4620      	mov	r0, r4
 8081848:	7823      	ldrb	r3, [r4, #0]
 808184a:	f005 0503 	and.w	r5, r5, #3
 808184e:	431d      	orrs	r5, r3
 8081850:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:
  return 0;
}
 8081854:	bd70      	pop	{r4, r5, r6, pc}

08081856 <_ZNK9FatVolume17clusterStartBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
 8081856:	7983      	ldrb	r3, [r0, #6]
 8081858:	3902      	subs	r1, #2
 808185a:	6940      	ldr	r0, [r0, #20]
 808185c:	4099      	lsls	r1, r3
}
 808185e:	4408      	add	r0, r1
 8081860:	4770      	bx	lr

08081862 <_ZN9FatVolume6fatGetEmPm>:
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8081862:	b570      	push	{r4, r5, r6, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8081864:	79c3      	ldrb	r3, [r0, #7]
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8081866:	4605      	mov	r5, r0
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8081868:	2b20      	cmp	r3, #32
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 808186a:	460c      	mov	r4, r1
 808186c:	4616      	mov	r6, r2
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 808186e:	d112      	bne.n	8081896 <_ZN9FatVolume6fatGetEmPm+0x34>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
 8081870:	6981      	ldr	r1, [r0, #24]
 8081872:	2202      	movs	r2, #2
 8081874:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8081878:	f500 700d 	add.w	r0, r0, #564	; 0x234
 808187c:	f7ff ffc7 	bl	808180e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8081880:	b910      	cbnz	r0, 8081888 <_ZN9FatVolume6fatGetEmPm+0x26>
  }
  *value = next;
  return 1;

fail:
  return -1;
 8081882:	f04f 30ff 	mov.w	r0, #4294967295
 8081886:	bd70      	pop	{r4, r5, r6, pc}
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
 8081888:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 808188c:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8081890:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
 8081894:	e00f      	b.n	80818b6 <_ZN9FatVolume6fatGetEmPm+0x54>
  }

  if (m_fatType == 16) {
 8081896:	2b10      	cmp	r3, #16
 8081898:	d1f3      	bne.n	8081882 <_ZN9FatVolume6fatGetEmPm+0x20>
 808189a:	6983      	ldr	r3, [r0, #24]
 808189c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80818a0:	2202      	movs	r2, #2
 80818a2:	4419      	add	r1, r3
 80818a4:	f500 700d 	add.w	r0, r0, #564	; 0x234
 80818a8:	f7ff ffb1 	bl	808180e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 80818ac:	2800      	cmp	r0, #0
 80818ae:	d0e8      	beq.n	8081882 <_ZN9FatVolume6fatGetEmPm+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
 80818b0:	b2e4      	uxtb	r4, r4
 80818b2:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
 80818b6:	69ea      	ldr	r2, [r5, #28]
 80818b8:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
 80818ba:	bf9a      	itte	ls
 80818bc:	6033      	strls	r3, [r6, #0]
  return 1;
 80818be:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
 80818c0:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
 80818c2:	bd70      	pop	{r4, r5, r6, pc}

080818c4 <_ZN9FatVolume6fatPutEmm>:
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 80818c4:	b538      	push	{r3, r4, r5, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 80818c6:	79c3      	ldrb	r3, [r0, #7]
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 80818c8:	460c      	mov	r4, r1
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 80818ca:	2b20      	cmp	r3, #32
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 80818cc:	4615      	mov	r5, r2
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 80818ce:	d10f      	bne.n	80818f0 <_ZN9FatVolume6fatPutEmm+0x2c>
 80818d0:	6981      	ldr	r1, [r0, #24]
 80818d2:	2203      	movs	r2, #3
 80818d4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80818d8:	f500 700d 	add.w	r0, r0, #564	; 0x234
 80818dc:	f7ff ff97 	bl	808180e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 80818e0:	b908      	cbnz	r0, 80818e6 <_ZN9FatVolume6fatPutEmm+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
 80818e2:	2000      	movs	r0, #0
 80818e4:	bd38      	pop	{r3, r4, r5, pc}
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
 80818e6:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 80818ea:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
 80818ee:	e00f      	b.n	8081910 <_ZN9FatVolume6fatPutEmm+0x4c>
    return true;
  }

  if (m_fatType == 16) {
 80818f0:	2b10      	cmp	r3, #16
 80818f2:	d1f6      	bne.n	80818e2 <_ZN9FatVolume6fatPutEmm+0x1e>
 80818f4:	6983      	ldr	r3, [r0, #24]
 80818f6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80818fa:	2203      	movs	r2, #3
 80818fc:	4419      	add	r1, r3
 80818fe:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8081902:	f7ff ff84 	bl	808180e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 8081906:	2800      	cmp	r0, #0
 8081908:	d0eb      	beq.n	80818e2 <_ZN9FatVolume6fatPutEmm+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
 808190a:	b2e4      	uxtb	r4, r4
 808190c:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
 8081910:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
 8081912:	bd38      	pop	{r3, r4, r5, pc}

08081914 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 8081914:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8081918:	4605      	mov	r5, r0
 808191a:	4690      	mov	r8, r2
  uint32_t find = current ? current : m_allocSearchStart;
 808191c:	460f      	mov	r7, r1
 808191e:	b909      	cbnz	r1, 8081924 <_ZN9FatVolume15allocateClusterEmPm+0x10>
 8081920:	68c6      	ldr	r6, [r0, #12]
 8081922:	e000      	b.n	8081926 <_ZN9FatVolume15allocateClusterEmPm+0x12>
 8081924:	460e      	mov	r6, r1
 8081926:	4634      	mov	r4, r6
  uint32_t start = find;
  while (1) {
    find++;
    // If at end of FAT go to beginning of FAT.
    if (find > m_lastCluster) {
 8081928:	69eb      	ldr	r3, [r5, #28]
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
  uint32_t find = current ? current : m_allocSearchStart;
  uint32_t start = find;
  while (1) {
    find++;
 808192a:	3401      	adds	r4, #1
    // If at end of FAT go to beginning of FAT.
    if (find > m_lastCluster) {
      find = 2;
 808192c:	429c      	cmp	r4, r3
 808192e:	bf88      	it	hi
 8081930:	2402      	movhi	r4, #2
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
 8081932:	aa01      	add	r2, sp, #4
 8081934:	4621      	mov	r1, r4
 8081936:	4628      	mov	r0, r5
 8081938:	f7ff ff93 	bl	8081862 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 808193c:	2800      	cmp	r0, #0
 808193e:	db0d      	blt.n	808195c <_ZN9FatVolume15allocateClusterEmPm+0x48>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
 8081940:	d001      	beq.n	8081946 <_ZN9FatVolume15allocateClusterEmPm+0x32>
 8081942:	9b01      	ldr	r3, [sp, #4]
 8081944:	b113      	cbz	r3, 808194c <_ZN9FatVolume15allocateClusterEmPm+0x38>
      break;
    }
    if (find == start) {
 8081946:	42b4      	cmp	r4, r6
 8081948:	d1ee      	bne.n	8081928 <_ZN9FatVolume15allocateClusterEmPm+0x14>
 808194a:	e007      	b.n	808195c <_ZN9FatVolume15allocateClusterEmPm+0x48>
  }
  uint32_t clusterStartBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
 808194c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8081950:	4621      	mov	r1, r4
 8081952:	4628      	mov	r0, r5
 8081954:	f7ff ffb6 	bl	80818c4 <_ZN9FatVolume6fatPutEmm>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // mark end of chain
  if (!fatPutEOC(find)) {
 8081958:	4606      	mov	r6, r0
 808195a:	b908      	cbnz	r0, 8081960 <_ZN9FatVolume15allocateClusterEmPm+0x4c>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
 808195c:	2600      	movs	r6, #0
 808195e:	e010      	b.n	8081982 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // mark end of chain
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
 8081960:	b137      	cbz	r7, 8081970 <_ZN9FatVolume15allocateClusterEmPm+0x5c>
    // link clusters
    if (!fatPut(current, find)) {
 8081962:	4622      	mov	r2, r4
 8081964:	4639      	mov	r1, r7
 8081966:	4628      	mov	r0, r5
 8081968:	f7ff ffac 	bl	80818c4 <_ZN9FatVolume6fatPutEmm>
 808196c:	b908      	cbnz	r0, 8081972 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
 808196e:	e7f5      	b.n	808195c <_ZN9FatVolume15allocateClusterEmPm+0x48>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // Remember place for search start.
    m_allocSearchStart = find;
 8081970:	60ec      	str	r4, [r5, #12]
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
 8081972:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8081974:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 8081976:	bfa4      	itt	ge
 8081978:	f103 33ff 	addge.w	r3, r3, #4294967295
 808197c:	626b      	strge	r3, [r5, #36]	; 0x24
  }
  updateFreeClusterCount(-1);
  *next = find;
 808197e:	f8c8 4000 	str.w	r4, [r8]
  return true;

fail:
  return false;
}
 8081982:	4630      	mov	r0, r6
 8081984:	b002      	add	sp, #8
 8081986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808198a <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
 808198a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 808198c:	4604      	mov	r4, r0
 808198e:	460d      	mov	r5, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
 8081990:	aa01      	add	r2, sp, #4
 8081992:	4629      	mov	r1, r5
 8081994:	4620      	mov	r0, r4
 8081996:	f7ff ff64 	bl	8081862 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 808199a:	1e06      	subs	r6, r0, #0
 808199c:	da01      	bge.n	80819a2 <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
 808199e:	2000      	movs	r0, #0
 80819a0:	e012      	b.n	80819c8 <_ZN9FatVolume9freeChainEm+0x3e>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
 80819a2:	2200      	movs	r2, #0
 80819a4:	4629      	mov	r1, r5
 80819a6:	4620      	mov	r0, r4
 80819a8:	f7ff ff8c 	bl	80818c4 <_ZN9FatVolume6fatPutEmm>
 80819ac:	2800      	cmp	r0, #0
 80819ae:	d0f6      	beq.n	808199e <_ZN9FatVolume9freeChainEm+0x14>
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
 80819b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80819b2:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 80819b4:	bfa4      	itt	ge
 80819b6:	3301      	addge	r3, #1
 80819b8:	6263      	strge	r3, [r4, #36]	; 0x24
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster < m_allocSearchStart) {
 80819ba:	68e3      	ldr	r3, [r4, #12]
 80819bc:	429d      	cmp	r5, r3
      m_allocSearchStart = cluster;
 80819be:	bf38      	it	cc
 80819c0:	60e5      	strcc	r5, [r4, #12]
    }
    cluster = next;
 80819c2:	9d01      	ldr	r5, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
 80819c4:	2e00      	cmp	r6, #0
 80819c6:	d1e3      	bne.n	8081990 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
 80819c8:	b002      	add	sp, #8
 80819ca:	bd70      	pop	{r4, r5, r6, pc}

080819cc <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
 80819cc:	b570      	push	{r4, r5, r6, lr}
 80819ce:	4604      	mov	r4, r0
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
 80819d0:	2301      	movs	r3, #1
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 80819d2:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
 80819d4:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 80819d6:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 80819da:	71c2      	strb	r2, [r0, #7]
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE

  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 80819dc:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 80819de:	62e0      	str	r0, [r4, #44]	; 0x2c
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 80819e0:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 80819e4:	6303      	str	r3, [r0, #48]	; 0x30
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 80819e6:	f8c4 0238 	str.w	r0, [r4, #568]	; 0x238
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 80819ea:	f880 2234 	strb.w	r2, [r0, #564]	; 0x234
    m_lbn = 0XFFFFFFFF;
 80819ee:	f8c0 323c 	str.w	r3, [r0, #572]	; 0x23c
 80819f2:	b1a1      	cbz	r1, 8081a1e <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
 80819f4:	2904      	cmp	r1, #4
 80819f6:	d860      	bhi.n	8081aba <_ZN9FatVolume4initEh+0xee>
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 80819f8:	4611      	mov	r1, r2
 80819fa:	3028      	adds	r0, #40	; 0x28
 80819fc:	f7ff ff07 	bl	808180e <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8081a00:	2800      	cmp	r0, #0
 8081a02:	d05a      	beq.n	8081aba <_ZN9FatVolume4initEh+0xee>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
 8081a04:	eb00 1305 	add.w	r3, r0, r5, lsl #4
 8081a08:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 8081a0c:	065b      	lsls	r3, r3, #25
 8081a0e:	d154      	bne.n	8081aba <_ZN9FatVolume4initEh+0xee>
 8081a10:	351b      	adds	r5, #27
 8081a12:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 8081a16:	f8d5 5006 	ldr.w	r5, [r5, #6]
 8081a1a:	2d00      	cmp	r5, #0
 8081a1c:	d04d      	beq.n	8081aba <_ZN9FatVolume4initEh+0xee>
 8081a1e:	2200      	movs	r2, #0
 8081a20:	4629      	mov	r1, r5
 8081a22:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8081a26:	f7ff fef2 	bl	808180e <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
 8081a2a:	2800      	cmp	r0, #0
 8081a2c:	d045      	beq.n	8081aba <_ZN9FatVolume4initEh+0xee>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
 8081a2e:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 8081a32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8081a36:	d140      	bne.n	8081aba <_ZN9FatVolume4initEh+0xee>
 8081a38:	7c03      	ldrb	r3, [r0, #16]
 8081a3a:	2b02      	cmp	r3, #2
 8081a3c:	d13d      	bne.n	8081aba <_ZN9FatVolume4initEh+0xee>
      fbs->fatCount != 2 ||
 8081a3e:	89c3      	ldrh	r3, [r0, #14]
 8081a40:	2b00      	cmp	r3, #0
 8081a42:	d03a      	beq.n	8081aba <_ZN9FatVolume4initEh+0xee>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 8081a44:	7b41      	ldrb	r1, [r0, #13]
  m_clusterBlockMask = m_blocksPerCluster - 1;

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 8081a46:	2609      	movs	r6, #9
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
 8081a48:	1e4b      	subs	r3, r1, #1
 8081a4a:	7163      	strb	r3, [r4, #5]

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 8081a4c:	2300      	movs	r3, #0
 8081a4e:	71a3      	strb	r3, [r4, #6]
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 8081a50:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8081a52:	2301      	movs	r3, #1
 8081a54:	428b      	cmp	r3, r1
 8081a56:	d007      	beq.n	8081a68 <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
 8081a58:	3e01      	subs	r6, #1
 8081a5a:	d02e      	beq.n	8081aba <_ZN9FatVolume4initEh+0xee>
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8081a5c:	79a2      	ldrb	r2, [r4, #6]
 8081a5e:	005b      	lsls	r3, r3, #1
 8081a60:	3201      	adds	r2, #1
 8081a62:	b2db      	uxtb	r3, r3
 8081a64:	71a2      	strb	r2, [r4, #6]
 8081a66:	e7f5      	b.n	8081a54 <_ZN9FatVolume4initEh+0x88>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_blocksPerFat = fbs->sectorsPerFat16 ?
 8081a68:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
 8081a6a:	b902      	cbnz	r2, 8081a6e <_ZN9FatVolume4initEh+0xa2>
 8081a6c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8081a6e:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
 8081a70:	89c6      	ldrh	r6, [r0, #14]
 8081a72:	442e      	add	r6, r5
 8081a74:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 8081a76:	f8b0 3011 	ldrh.w	r3, [r0, #17]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 8081a7a:	eb06 0142 	add.w	r1, r6, r2, lsl #1
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 8081a7e:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 8081a80:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
 8081a82:	f8b0 2011 	ldrh.w	r2, [r0, #17]
 8081a86:	0152      	lsls	r2, r2, #5
 8081a88:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 8081a8c:	eb01 2262 	add.w	r2, r1, r2, asr #9
 8081a90:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
 8081a92:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
 8081a96:	b903      	cbnz	r3, 8081a9a <_ZN9FatVolume4initEh+0xce>
 8081a98:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 8081a9a:	1aad      	subs	r5, r5, r2
 8081a9c:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
 8081a9e:	79a5      	ldrb	r5, [r4, #6]
 8081aa0:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
 8081aa4:	1c6b      	adds	r3, r5, #1
 8081aa6:	61e3      	str	r3, [r4, #28]
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
#if MAINTAIN_FREE_CLUSTER_COUNT
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
 8081aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8081aac:	6263      	str	r3, [r4, #36]	; 0x24

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);

  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
 8081aae:	f640 73f4 	movw	r3, #4084	; 0xff4
 8081ab2:	429d      	cmp	r5, r3
 8081ab4:	d803      	bhi.n	8081abe <_ZN9FatVolume4initEh+0xf2>
    m_fatType = 12;
 8081ab6:	230c      	movs	r3, #12
 8081ab8:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
 8081aba:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
 8081abc:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
 8081abe:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8081ac2:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 8081ac4:	bf89      	itett	hi
 8081ac6:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
 8081ac8:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 8081aca:	6223      	strhi	r3, [r4, #32]
    m_fatType = 32;
 8081acc:	2320      	movhi	r3, #32
 8081ace:	71e3      	strb	r3, [r4, #7]
  }
  return true;
 8081ad0:	2001      	movs	r0, #1

fail:
  return false;
}
 8081ad2:	bd70      	pop	{r4, r5, r6, pc}

08081ad4 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
 8081ad4:	f00f baea 	b.w	80910ac <HAL_Pin_Map>

08081ad8 <_ZN19ApplicationWatchdog7checkinEv>:
	}

	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
 8081ad8:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8081ada:	f00f fb67 	bl	80911ac <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8081ade:	4b01      	ldr	r3, [pc, #4]	; (8081ae4 <_ZN19ApplicationWatchdog7checkinEv+0xc>)
 8081ae0:	6018      	str	r0, [r3, #0]
 8081ae2:	bd08      	pop	{r3, pc}
 8081ae4:	200047b0 	.word	0x200047b0

08081ae8 <_ZN9SdFatBase10errorPrintEP5Print>:
void SdFatBase::errorHalt(Print* pr, char const* msg) {
  errorPrint(pr, msg);
  SysCall::halt();
}
//------------------------------------------------------------------------------
void SdFatBase::errorPrint(Print* pr) {
 8081ae8:	b538      	push	{r3, r4, r5, lr}
  if (!cardErrorCode()) {
 8081aea:	f890 346a 	ldrb.w	r3, [r0, #1130]	; 0x46a
void SdFatBase::errorHalt(Print* pr, char const* msg) {
  errorPrint(pr, msg);
  SysCall::halt();
}
//------------------------------------------------------------------------------
void SdFatBase::errorPrint(Print* pr) {
 8081aee:	4605      	mov	r5, r0
 8081af0:	460c      	mov	r4, r1
  if (!cardErrorCode()) {
 8081af2:	b1ab      	cbz	r3, 8081b20 <_ZN9SdFatBase10errorPrintEP5Print+0x38>
    return;
  }
  pr->print(F("SD errorCode: 0X"));
 8081af4:	490b      	ldr	r1, [pc, #44]	; (8081b24 <_ZN9SdFatBase10errorPrintEP5Print+0x3c>)
 8081af6:	4620      	mov	r0, r4
 8081af8:	f010 f8b8 	bl	8091c6c <_ZN5Print5printEPKc>
  pr->print(cardErrorCode(), HEX);
 8081afc:	2210      	movs	r2, #16
 8081afe:	f895 146a 	ldrb.w	r1, [r5, #1130]	; 0x46a
 8081b02:	4620      	mov	r0, r4
 8081b04:	f010 f8f9 	bl	8091cfa <_ZN5Print5printEhi>
  pr->print(F(",0X"));
 8081b08:	4907      	ldr	r1, [pc, #28]	; (8081b28 <_ZN9SdFatBase10errorPrintEP5Print+0x40>)
 8081b0a:	4620      	mov	r0, r4
 8081b0c:	f010 f8ae 	bl	8091c6c <_ZN5Print5printEPKc>
  pr->println(cardErrorData(), HEX);
 8081b10:	f895 146c 	ldrb.w	r1, [r5, #1132]	; 0x46c
 8081b14:	4620      	mov	r0, r4
}
 8081b16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return;
  }
  pr->print(F("SD errorCode: 0X"));
  pr->print(cardErrorCode(), HEX);
  pr->print(F(",0X"));
  pr->println(cardErrorData(), HEX);
 8081b1a:	2210      	movs	r2, #16
 8081b1c:	f010 b8ef 	b.w	8091cfe <_ZN5Print7printlnEhi>
 8081b20:	bd38      	pop	{r3, r4, r5, pc}
 8081b22:	bf00      	nop
 8081b24:	08093df0 	.word	0x08093df0
 8081b28:	08093e01 	.word	0x08093e01

08081b2c <_ZN9SdFatBase10errorPrintEP5PrintPKc>:
}
//------------------------------------------------------------------------------
void SdFatBase::errorPrint(Print* pr, char const* msg) {
 8081b2c:	b570      	push	{r4, r5, r6, lr}
 8081b2e:	460c      	mov	r4, r1
 8081b30:	4616      	mov	r6, r2
 8081b32:	4605      	mov	r5, r0
  pr->print(F("error: "));
 8081b34:	4906      	ldr	r1, [pc, #24]	; (8081b50 <_ZN9SdFatBase10errorPrintEP5PrintPKc+0x24>)
 8081b36:	4620      	mov	r0, r4
 8081b38:	f010 f898 	bl	8091c6c <_ZN5Print5printEPKc>
  pr->println(msg);
 8081b3c:	4631      	mov	r1, r6
 8081b3e:	4620      	mov	r0, r4
 8081b40:	f010 f8a7 	bl	8091c92 <_ZN5Print7printlnEPKc>
  errorPrint(pr);
 8081b44:	4621      	mov	r1, r4
 8081b46:	4628      	mov	r0, r5
}
 8081b48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
}
//------------------------------------------------------------------------------
void SdFatBase::errorPrint(Print* pr, char const* msg) {
  pr->print(F("error: "));
  pr->println(msg);
  errorPrint(pr);
 8081b4c:	f7ff bfcc 	b.w	8081ae8 <_ZN9SdFatBase10errorPrintEP5Print>
 8081b50:	08093e05 	.word	0x08093e05

08081b54 <_ZN9SdFatBase9errorHaltEP5PrintPKc>:
void SdFatBase::errorHalt(Print* pr) {
  errorPrint(pr);
  SysCall::halt();
}
//------------------------------------------------------------------------------
void SdFatBase::errorHalt(Print* pr, char const* msg) {
 8081b54:	b508      	push	{r3, lr}
  errorPrint(pr, msg);
 8081b56:	f7ff ffe9 	bl	8081b2c <_ZN9SdFatBase10errorPrintEP5PrintPKc>
	}

};

inline void application_checkin() { ApplicationWatchdog::checkin(); }
 8081b5a:	f7ff ffbd 	bl	8081ad8 <_ZN19ApplicationWatchdog7checkinEv>
 8081b5e:	f00f fcdd 	bl	809151c <spark_process>
 8081b62:	e7fa      	b.n	8081b5a <_ZN9SdFatBase9errorHaltEP5PrintPKc+0x6>

08081b64 <_ZN9SdFatBase14initErrorPrintEP5Print>:
void SdFatBase::initErrorHalt(Print* pr, char const *msg) {
  pr->println(msg);
  initErrorHalt(pr);
}
//------------------------------------------------------------------------------
void SdFatBase::initErrorPrint(Print* pr) {
 8081b64:	b538      	push	{r3, r4, r5, lr}
  if (cardErrorCode()) {
 8081b66:	f890 346a 	ldrb.w	r3, [r0, #1130]	; 0x46a
void SdFatBase::initErrorHalt(Print* pr, char const *msg) {
  pr->println(msg);
  initErrorHalt(pr);
}
//------------------------------------------------------------------------------
void SdFatBase::initErrorPrint(Print* pr) {
 8081b6a:	4605      	mov	r5, r0
 8081b6c:	460c      	mov	r4, r1
  if (cardErrorCode()) {
 8081b6e:	b18b      	cbz	r3, 8081b94 <_ZN9SdFatBase14initErrorPrintEP5Print+0x30>
    pr->println(F("Can't access SD card. Do not reformat."));
 8081b70:	4910      	ldr	r1, [pc, #64]	; (8081bb4 <_ZN9SdFatBase14initErrorPrintEP5Print+0x50>)
 8081b72:	4620      	mov	r0, r4
 8081b74:	f010 f88d 	bl	8091c92 <_ZN5Print7printlnEPKc>
    if (cardErrorCode() == SD_CARD_ERROR_CMD0) {
 8081b78:	f895 346a 	ldrb.w	r3, [r5, #1130]	; 0x46a
 8081b7c:	2b01      	cmp	r3, #1
 8081b7e:	d103      	bne.n	8081b88 <_ZN9SdFatBase14initErrorPrintEP5Print+0x24>
      pr->println(F("No card, wrong chip select pin, or SPI problem?"));
 8081b80:	490d      	ldr	r1, [pc, #52]	; (8081bb8 <_ZN9SdFatBase14initErrorPrintEP5Print+0x54>)
 8081b82:	4620      	mov	r0, r4
 8081b84:	f010 f885 	bl	8091c92 <_ZN5Print7printlnEPKc>
    }
    errorPrint(pr);
 8081b88:	4621      	mov	r1, r4
 8081b8a:	4628      	mov	r0, r5
  } else if (!vwd()->isOpen()) {
    pr->println(F("Can't open root directory."));
  } else {
    pr->println(F("No error found."));
  }
}
 8081b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (cardErrorCode()) {
    pr->println(F("Can't access SD card. Do not reformat."));
    if (cardErrorCode() == SD_CARD_ERROR_CMD0) {
      pr->println(F("No card, wrong chip select pin, or SPI problem?"));
    }
    errorPrint(pr);
 8081b90:	f7ff bfaa 	b.w	8081ae8 <_ZN9SdFatBase10errorPrintEP5Print>
  } else if (vol()->fatType() == 0) {
 8081b94:	79c3      	ldrb	r3, [r0, #7]
 8081b96:	b90b      	cbnz	r3, 8081b9c <_ZN9SdFatBase14initErrorPrintEP5Print+0x38>
    pr->println(F("Invalid format, reformat SD."));
 8081b98:	4908      	ldr	r1, [pc, #32]	; (8081bbc <_ZN9SdFatBase14initErrorPrintEP5Print+0x58>)
 8081b9a:	e005      	b.n	8081ba8 <_ZN9SdFatBase14initErrorPrintEP5Print+0x44>
  } else if (!vwd()->isOpen()) {
 8081b9c:	f890 3440 	ldrb.w	r3, [r0, #1088]	; 0x440
 8081ba0:	b90b      	cbnz	r3, 8081ba6 <_ZN9SdFatBase14initErrorPrintEP5Print+0x42>
    pr->println(F("Can't open root directory."));
 8081ba2:	4907      	ldr	r1, [pc, #28]	; (8081bc0 <_ZN9SdFatBase14initErrorPrintEP5Print+0x5c>)
 8081ba4:	e000      	b.n	8081ba8 <_ZN9SdFatBase14initErrorPrintEP5Print+0x44>
  } else {
    pr->println(F("No error found."));
 8081ba6:	4907      	ldr	r1, [pc, #28]	; (8081bc4 <_ZN9SdFatBase14initErrorPrintEP5Print+0x60>)
 8081ba8:	4620      	mov	r0, r4
  }
}
 8081baa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  } else if (vol()->fatType() == 0) {
    pr->println(F("Invalid format, reformat SD."));
  } else if (!vwd()->isOpen()) {
    pr->println(F("Can't open root directory."));
  } else {
    pr->println(F("No error found."));
 8081bae:	f010 b870 	b.w	8091c92 <_ZN5Print7printlnEPKc>
 8081bb2:	bf00      	nop
 8081bb4:	08093e0d 	.word	0x08093e0d
 8081bb8:	08093e34 	.word	0x08093e34
 8081bbc:	08093e64 	.word	0x08093e64
 8081bc0:	08093e81 	.word	0x08093e81
 8081bc4:	08093e9c 	.word	0x08093e9c

08081bc8 <_ZN9SdFatBase13initErrorHaltEP5Print>:
  pr->print(F("error: "));
  pr->println(msg);
  errorPrint(pr);
}
//------------------------------------------------------------------------------
void SdFatBase::initErrorHalt(Print* pr) {
 8081bc8:	b508      	push	{r3, lr}
  initErrorPrint(pr);
 8081bca:	f7ff ffcb 	bl	8081b64 <_ZN9SdFatBase14initErrorPrintEP5Print>
 8081bce:	f7ff ff83 	bl	8081ad8 <_ZN19ApplicationWatchdog7checkinEv>
 8081bd2:	f00f fca3 	bl	809151c <spark_process>
 8081bd6:	e7fa      	b.n	8081bce <_ZN9SdFatBase13initErrorHaltEP5Print+0x6>

08081bd8 <_GLOBAL__sub_I__ZN9SdFatBase9errorHaltEP5Print>:
 8081bd8:	f00f ba68 	b.w	80910ac <HAL_Pin_Map>

08081bdc <_ZN4MQTT9debug_TlsEPviPKciS2_>:
  return 0;
}

void MQTT::debug_Tls( void *ctx, int level,
                      const char *file, int line,
                      const char *str ) {
 8081bdc:	4770      	bx	lr
	...

08081be0 <_ZN4MQTT8send_TlsEPvPKhj>:

bool MQTT::available() {
    return tcpClient.available();
}

int MQTT::send_Tls(void *ctx, const unsigned char *buf, size_t len) {
 8081be0:	b570      	push	{r4, r5, r6, lr}
 8081be2:	4605      	mov	r5, r0
 8081be4:	460c      	mov	r4, r1
 8081be6:	4616      	mov	r6, r2
  MQTT *sock = (MQTT *)ctx;

  if (!sock->tcpClient.connected()) {
 8081be8:	f00f ff6e 	bl	8091ac8 <_ZN9TCPClient9connectedEv>
 8081bec:	b158      	cbz	r0, 8081c06 <_ZN4MQTT8send_TlsEPvPKhj+0x26>
    return -1;
  }

  int ret = sock->tcpClient.write(buf, len);
 8081bee:	4621      	mov	r1, r4
 8081bf0:	4632      	mov	r2, r6
 8081bf2:	4628      	mov	r0, r5
 8081bf4:	f00f ff56 	bl	8091aa4 <_ZN9TCPClient5writeEPKhj>
  if (ret == 0) {
 8081bf8:	4604      	mov	r4, r0
 8081bfa:	b138      	cbz	r0, 8081c0c <_ZN4MQTT8send_TlsEPvPKhj+0x2c>
      return MBEDTLS_ERR_SSL_WANT_WRITE;
  }
  sock->tcpClient.flush();
 8081bfc:	4628      	mov	r0, r5
 8081bfe:	f00f fd7f 	bl	8091700 <_ZN9TCPClient5flushEv>
  return ret;
 8081c02:	4620      	mov	r0, r4
 8081c04:	bd70      	pop	{r4, r5, r6, pc}

int MQTT::send_Tls(void *ctx, const unsigned char *buf, size_t len) {
  MQTT *sock = (MQTT *)ctx;

  if (!sock->tcpClient.connected()) {
    return -1;
 8081c06:	f04f 30ff 	mov.w	r0, #4294967295
 8081c0a:	bd70      	pop	{r4, r5, r6, pc}
  }

  int ret = sock->tcpClient.write(buf, len);
  if (ret == 0) {
      return MBEDTLS_ERR_SSL_WANT_WRITE;
 8081c0c:	4800      	ldr	r0, [pc, #0]	; (8081c10 <_ZN4MQTT8send_TlsEPvPKhj+0x30>)
  }
  sock->tcpClient.flush();
  return ret;
}
 8081c0e:	bd70      	pop	{r4, r5, r6, pc}
 8081c10:	ffff9780 	.word	0xffff9780

08081c14 <_ZN4MQTT8recv_TlsEPvPhj>:

int MQTT::recv_Tls(void *ctx, unsigned char *buf, size_t len) {
 8081c14:	b570      	push	{r4, r5, r6, lr}
 8081c16:	4604      	mov	r4, r0
 8081c18:	460d      	mov	r5, r1
 8081c1a:	4616      	mov	r6, r2
  MQTT *sock = (MQTT *)ctx;
  if (!sock->tcpClient.connected()) {
 8081c1c:	f00f ff54 	bl	8091ac8 <_ZN9TCPClient9connectedEv>
 8081c20:	b158      	cbz	r0, 8081c3a <_ZN4MQTT8recv_TlsEPvPhj+0x26>
    return -1;
  }

  if (sock->tcpClient.available() == 0) {
 8081c22:	4620      	mov	r0, r4
 8081c24:	f00f fe34 	bl	8091890 <_ZN9TCPClient9availableEv>
 8081c28:	b128      	cbz	r0, 8081c36 <_ZN4MQTT8recv_TlsEPvPhj+0x22>
    return MBEDTLS_ERR_SSL_WANT_READ;
  }

  int ret = sock->tcpClient.read(buf, len);
 8081c2a:	4632      	mov	r2, r6
 8081c2c:	4629      	mov	r1, r5
 8081c2e:	4620      	mov	r0, r4
 8081c30:	f00f fdfd 	bl	809182e <_ZN9TCPClient4readEPhj>
  if (ret == 0) {
 8081c34:	b918      	cbnz	r0, 8081c3e <_ZN4MQTT8recv_TlsEPvPhj+0x2a>
    return MBEDTLS_ERR_SSL_WANT_READ;
 8081c36:	4802      	ldr	r0, [pc, #8]	; (8081c40 <_ZN4MQTT8recv_TlsEPvPhj+0x2c>)
 8081c38:	bd70      	pop	{r4, r5, r6, pc}
}

int MQTT::recv_Tls(void *ctx, unsigned char *buf, size_t len) {
  MQTT *sock = (MQTT *)ctx;
  if (!sock->tcpClient.connected()) {
    return -1;
 8081c3a:	f04f 30ff 	mov.w	r0, #4294967295
  int ret = sock->tcpClient.read(buf, len);
  if (ret == 0) {
    return MBEDTLS_ERR_SSL_WANT_READ;
  }
  return ret;
}
 8081c3e:	bd70      	pop	{r4, r5, r6, pc}
 8081c40:	ffff9700 	.word	0xffff9700

08081c44 <_ZN4MQTT7rng_TlsEPvPhj>:

int MQTT::rng_Tls(void* handle, uint8_t* data, const size_t len_) {
 8081c44:	b570      	push	{r4, r5, r6, lr}
 8081c46:	460e      	mov	r6, r1
 8081c48:	4615      	mov	r5, r2
 8081c4a:	460c      	mov	r4, r1
  size_t len = len_;
  while (len>=4) {
 8081c4c:	1b2b      	subs	r3, r5, r4
 8081c4e:	4433      	add	r3, r6
 8081c50:	2b03      	cmp	r3, #3
 8081c52:	d904      	bls.n	8081c5e <_ZN4MQTT7rng_TlsEPvPhj+0x1a>
      *((uint32_t*)data) = HAL_RNG_GetRandomNumber();
 8081c54:	f00f fa9a 	bl	809118c <HAL_RNG_GetRandomNumber>
 8081c58:	f844 0b04 	str.w	r0, [r4], #4
  return ret;
}

int MQTT::rng_Tls(void* handle, uint8_t* data, const size_t len_) {
  size_t len = len_;
  while (len>=4) {
 8081c5c:	e7f6      	b.n	8081c4c <_ZN4MQTT7rng_TlsEPvPhj+0x8>
 8081c5e:	08ac      	lsrs	r4, r5, #2
 8081c60:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8081c64:	4435      	add	r5, r6
      *((uint32_t*)data) = HAL_RNG_GetRandomNumber();
      data += 4;
      len -= 4;
  }

  while (len-->0) {
 8081c66:	42ac      	cmp	r4, r5
 8081c68:	d004      	beq.n	8081c74 <_ZN4MQTT7rng_TlsEPvPhj+0x30>
      *data++ = HAL_RNG_GetRandomNumber();
 8081c6a:	f00f fa8f 	bl	809118c <HAL_RNG_GetRandomNumber>
 8081c6e:	f804 0b01 	strb.w	r0, [r4], #1
      *((uint32_t*)data) = HAL_RNG_GetRandomNumber();
      data += 4;
      len -= 4;
  }

  while (len-->0) {
 8081c72:	e7f8      	b.n	8081c66 <_ZN4MQTT7rng_TlsEPvPhj+0x22>
      *data++ = HAL_RNG_GetRandomNumber();
  }
  return 0;
}
 8081c74:	2000      	movs	r0, #0
 8081c76:	bd70      	pop	{r4, r5, r6, pc}

08081c78 <_ZN4MQTT14veryfyCert_TlsEPvP16mbedtls_x509_crtiPm>:
    return false;
  }
  return true;
}

int MQTT::veryfyCert_Tls(void *data, mbedtls_x509_crt *crt, int depth, uint32_t *flags) {
 8081c78:	b500      	push	{lr}
 8081c7a:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
  char buf[1024];
  ((void) data);

  debug_tls("Verify requested for (Depth %d):\n", depth);
  mbedtls_x509_crt_info(buf, sizeof(buf) - 1, "", crt);
 8081c7e:	460b      	mov	r3, r1
 8081c80:	4a05      	ldr	r2, [pc, #20]	; (8081c98 <_ZN4MQTT14veryfyCert_TlsEPvP16mbedtls_x509_crtiPm+0x20>)
 8081c82:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8081c86:	4668      	mov	r0, sp
 8081c88:	f006 faca 	bl	8088220 <mbedtls_x509_crt_info>
  } else {
    debug_tls(buf, sizeof(buf), "  ! ", *flags);
    debug_tls("%s\n", buf);
  }
  return 0;
}
 8081c8c:	2000      	movs	r0, #0
 8081c8e:	f20d 4d04 	addw	sp, sp, #1028	; 0x404
 8081c92:	f85d fb04 	ldr.w	pc, [sp], #4
 8081c96:	bf00      	nop
 8081c98:	08094520 	.word	0x08094520

08081c9c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
	TCPClient();
	TCPClient(sock_handle_t sock);
        virtual ~TCPClient() {};
 8081c9c:	b538      	push	{r3, r4, r5, lr}
 8081c9e:	4b0b      	ldr	r3, [pc, #44]	; (8081ccc <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 8081ca0:	6984      	ldr	r4, [r0, #24]
 8081ca2:	4605      	mov	r5, r0
 8081ca4:	6003      	str	r3, [r0, #0]
 8081ca6:	b17c      	cbz	r4, 8081cc8 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8081ca8:	6863      	ldr	r3, [r4, #4]
 8081caa:	3b01      	subs	r3, #1
 8081cac:	6063      	str	r3, [r4, #4]
 8081cae:	b95b      	cbnz	r3, 8081cc8 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
 8081cb0:	6823      	ldr	r3, [r4, #0]
 8081cb2:	4620      	mov	r0, r4
 8081cb4:	689b      	ldr	r3, [r3, #8]
 8081cb6:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8081cb8:	68a3      	ldr	r3, [r4, #8]
 8081cba:	3b01      	subs	r3, #1
 8081cbc:	60a3      	str	r3, [r4, #8]
 8081cbe:	b91b      	cbnz	r3, 8081cc8 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 8081cc0:	6823      	ldr	r3, [r4, #0]
 8081cc2:	4620      	mov	r0, r4
 8081cc4:	68db      	ldr	r3, [r3, #12]
 8081cc6:	4798      	blx	r3
 8081cc8:	4628      	mov	r0, r5
 8081cca:	bd38      	pop	{r3, r4, r5, pc}
 8081ccc:	080973d0 	.word	0x080973d0

08081cd0 <_ZN9TCPClientD0Ev>:
 8081cd0:	b510      	push	{r4, lr}
 8081cd2:	4604      	mov	r4, r0
 8081cd4:	f7ff ffe2 	bl	8081c9c <_ZN9TCPClientD1Ev>
 8081cd8:	4620      	mov	r0, r4
 8081cda:	f7fe f9e2 	bl	80800a2 <_ZdlPv>
 8081cde:	4620      	mov	r0, r4
 8081ce0:	bd10      	pop	{r4, pc}
	...

08081ce4 <_ZN4MQTTC1Ev>:
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT() {
 8081ce4:	b538      	push	{r3, r4, r5, lr}
 8081ce6:	4604      	mov	r4, r0
 8081ce8:	2500      	movs	r5, #0
 8081cea:	f00f fe5f 	bl	80919ac <_ZN9TCPClientC1Ev>
 8081cee:	61e5      	str	r5, [r4, #28]
 8081cf0:	4905      	ldr	r1, [pc, #20]	; (8081d08 <_ZN4MQTTC1Ev+0x24>)
 8081cf2:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8081cf6:	f00f ff5e 	bl	8091bb6 <_ZN6StringC1EPK19__FlashStringHelper>
 8081cfa:	2301      	movs	r3, #1
 8081cfc:	64a5      	str	r5, [r4, #72]	; 0x48
 8081cfe:	f884 3682 	strb.w	r3, [r4, #1666]	; 0x682
    this->ip = NULL;
}
 8081d02:	4620      	mov	r0, r4
 8081d04:	bd38      	pop	{r3, r4, r5, pc}
 8081d06:	bf00      	nop
 8081d08:	08094520 	.word	0x08094520

08081d0c <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:
        disconnect();
        free(buffer);
    }
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 8081d0c:	b538      	push	{r3, r4, r5, lr}
 8081d0e:	4604      	mov	r4, r0
 8081d10:	461d      	mov	r5, r3
    this->callback = callback;
 8081d12:	9b05      	ldr	r3, [sp, #20]
 8081d14:	6303      	str	r3, [r0, #48]	; 0x30
    this->tls = false;
 8081d16:	2000      	movs	r0, #0
 8081d18:	f884 0681 	strb.w	r0, [r4, #1665]	; 0x681
    this->tlsConnected = false;
 8081d1c:	f884 0680 	strb.w	r0, [r4, #1664]	; 0x680
    this->qoscallback = NULL;
 8081d20:	6360      	str	r0, [r4, #52]	; 0x34
    if (ip != NULL)
 8081d22:	b102      	cbz	r2, 8081d26 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1a>
        this->ip = ip;
 8081d24:	64a2      	str	r2, [r4, #72]	; 0x48
    if (domain != NULL)
 8081d26:	b119      	cbz	r1, 8081d30 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x24>
        this->domain = domain;
 8081d28:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8081d2c:	f00f ff65 	bl	8091bfa <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
 8081d30:	9b04      	ldr	r3, [sp, #16]

    this->maxpacketsize = maxpacketsize;
    if (buffer != NULL)
 8081d32:	69e0      	ldr	r0, [r4, #28]
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
    this->keepalive = keepalive;
 8081d34:	6523      	str	r3, [r4, #80]	; 0x50

    this->maxpacketsize = maxpacketsize;
 8081d36:	9b06      	ldr	r3, [sp, #24]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
 8081d38:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    this->maxpacketsize = maxpacketsize;
 8081d3c:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
 8081d40:	b108      	cbz	r0, 8081d46 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x3a>
      delete[] buffer;
 8081d42:	f7fe f9b0 	bl	80800a6 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
 8081d46:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 8081d4a:	f7fe f9a8 	bl	808009e <_Znaj>
 8081d4e:	61e0      	str	r0, [r4, #28]
 8081d50:	bd38      	pop	{r3, r4, r5, pc}
	...

08081d54 <_ZN4MQTTC1EPctPFvS0_PhjE>:

MQTT::MQTT() {
    this->ip = NULL;
}

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
 8081d54:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8081d58:	4604      	mov	r4, r0
 8081d5a:	4617      	mov	r7, r2
 8081d5c:	4698      	mov	r8, r3
 8081d5e:	460e      	mov	r6, r1
 8081d60:	2500      	movs	r5, #0
 8081d62:	f00f fe23 	bl	80919ac <_ZN9TCPClientC1Ev>
 8081d66:	61e5      	str	r5, [r4, #28]
 8081d68:	490c      	ldr	r1, [pc, #48]	; (8081d9c <_ZN4MQTTC1EPctPFvS0_PhjE+0x48>)
 8081d6a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8081d6e:	f00f ff22 	bl	8091bb6 <_ZN6StringC1EPK19__FlashStringHelper>
 8081d72:	2301      	movs	r3, #1
 8081d74:	f884 3682 	strb.w	r3, [r4, #1666]	; 0x682
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
 8081d78:	23ff      	movs	r3, #255	; 0xff
 8081d7a:	9302      	str	r3, [sp, #8]
 8081d7c:	230f      	movs	r3, #15
 8081d7e:	9300      	str	r3, [sp, #0]
 8081d80:	4620      	mov	r0, r4

MQTT::MQTT() {
    this->ip = NULL;
}

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
 8081d82:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
 8081d84:	f8cd 8004 	str.w	r8, [sp, #4]
 8081d88:	463b      	mov	r3, r7
 8081d8a:	462a      	mov	r2, r5
 8081d8c:	4631      	mov	r1, r6
 8081d8e:	f7ff ffbd 	bl	8081d0c <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
 8081d92:	4620      	mov	r0, r4
 8081d94:	b004      	add	sp, #16
 8081d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081d9a:	bf00      	nop
 8081d9c:	08094520 	.word	0x08094520

08081da0 <_ZN4MQTT11writeStringEPKcPht>:
    }
    tcpClient.stop();
    lastInActivity = lastOutActivity = millis();
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
 8081da0:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
 8081da2:	460d      	mov	r5, r1
 8081da4:	3302      	adds	r3, #2
 8081da6:	b29b      	uxth	r3, r3
 8081da8:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
 8081daa:	f815 6b01 	ldrb.w	r6, [r5], #1
 8081dae:	b2a4      	uxth	r4, r4
 8081db0:	b13e      	cbz	r6, 8081dc2 <_ZN4MQTT11writeStringEPKcPht+0x22>
 8081db2:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
 8081db6:	429f      	cmp	r7, r3
 8081db8:	d903      	bls.n	8081dc2 <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
 8081dba:	1c5c      	adds	r4, r3, #1
 8081dbc:	54d6      	strb	r6, [r2, r3]
 8081dbe:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
 8081dc0:	e7f2      	b.n	8081da8 <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
 8081dc2:	1b19      	subs	r1, r3, r4
 8081dc4:	440a      	add	r2, r1
 8081dc6:	1221      	asrs	r1, r4, #8
 8081dc8:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
 8081dcc:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
 8081dd0:	4618      	mov	r0, r3
 8081dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08081dd4 <_ZN4MQTT8netWriteEPhi>:


uint16_t MQTT::netWrite(unsigned char *buff, int length) {
 8081dd4:	b510      	push	{r4, lr}
    debug_tls("netWrite!!\n");
    if (tls == false) {
 8081dd6:	f890 4681 	ldrb.w	r4, [r0, #1665]	; 0x681
 8081dda:	b914      	cbnz	r4, 8081de2 <_ZN4MQTT8netWriteEPhi+0xe>
        return tcpClient.write(buff, length);
 8081ddc:	f00f fe62 	bl	8091aa4 <_ZN9TCPClient5writeEPKhj>
 8081de0:	e003      	b.n	8081dea <_ZN4MQTT8netWriteEPhi+0x16>
    } else {
        return mbedtls_ssl_write(&ssl, buff, length);
 8081de2:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
 8081de6:	f008 ff83 	bl	808acf0 <mbedtls_ssl_write>
 8081dea:	b280      	uxth	r0, r0
    }
}
 8081dec:	bd10      	pop	{r4, pc}

08081dee <_ZN4MQTT5writeEhPht>:
    }
    return false;
}


bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 8081dee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8081df0:	4607      	mov	r7, r0
 8081df2:	468e      	mov	lr, r1
 8081df4:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
 8081df6:	461d      	mov	r5, r3
}


bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
 8081df8:	2400      	movs	r4, #0
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
 8081dfa:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 8081dfe:	a902      	add	r1, sp, #8
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
 8081e00:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 8081e02:	4421      	add	r1, r4
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
 8081e04:	bf18      	it	ne
 8081e06:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
 8081e0a:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 8081e0c:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
 8081e10:	b2e4      	uxtb	r4, r4
    } while(len > 0);
 8081e12:	2d00      	cmp	r5, #0
 8081e14:	d1f1      	bne.n	8081dfa <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
 8081e16:	f1c4 0304 	rsb	r3, r4, #4
 8081e1a:	18d1      	adds	r1, r2, r3
 8081e1c:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
 8081e20:	42a5      	cmp	r5, r4
 8081e22:	da06      	bge.n	8081e32 <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
 8081e24:	a801      	add	r0, sp, #4
 8081e26:	1b2b      	subs	r3, r5, r4
 8081e28:	5c28      	ldrb	r0, [r5, r0]
 8081e2a:	4413      	add	r3, r2
 8081e2c:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
 8081e2e:	3501      	adds	r5, #1
 8081e30:	e7f6      	b.n	8081e20 <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = netWrite(buf+(4-llen), length+1+llen);
 8081e32:	1c72      	adds	r2, r6, #1
 8081e34:	4422      	add	r2, r4
 8081e36:	4638      	mov	r0, r7
 8081e38:	f7ff ffcc 	bl	8081dd4 <_ZN4MQTT8netWriteEPhi>
 8081e3c:	4605      	mov	r5, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8081e3e:	f00f f9b5 	bl	80911ac <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
 8081e42:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = netWrite(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
 8081e44:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
 8081e46:	19a0      	adds	r0, r4, r6
}
 8081e48:	1b43      	subs	r3, r0, r5
 8081e4a:	4258      	negs	r0, r3
 8081e4c:	4158      	adcs	r0, r3
 8081e4e:	b003      	add	sp, #12
 8081e50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08081e52 <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
 8081e52:	b538      	push	{r3, r4, r5, lr}
 8081e54:	4604      	mov	r4, r0
    debug_tls("mqtt disconnected\n");

    buffer[0] = MQTTDISCONNECT;
 8081e56:	69c3      	ldr	r3, [r0, #28]
 8081e58:	22e0      	movs	r2, #224	; 0xe0
 8081e5a:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
 8081e5c:	69c3      	ldr	r3, [r0, #28]
 8081e5e:	2500      	movs	r5, #0
 8081e60:	705d      	strb	r5, [r3, #1]
    netWrite(buffer,2);
 8081e62:	2202      	movs	r2, #2
 8081e64:	69c1      	ldr	r1, [r0, #28]
 8081e66:	f7ff ffb5 	bl	8081dd4 <_ZN4MQTT8netWriteEPhi>

    if (tls) {
 8081e6a:	f894 3681 	ldrb.w	r3, [r4, #1665]	; 0x681
 8081e6e:	b1bb      	cbz	r3, 8081ea0 <_ZN4MQTT10disconnectEv+0x4e>
        debug_tls("tls close\n");
        tlsConnected = false;
        tls = false;
        mbedtls_x509_crt_free(&cacert);
 8081e70:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
    buffer[1] = 0;
    netWrite(buffer,2);

    if (tls) {
        debug_tls("tls close\n");
        tlsConnected = false;
 8081e74:	f884 5680 	strb.w	r5, [r4, #1664]	; 0x680
        tls = false;
 8081e78:	f884 5681 	strb.w	r5, [r4, #1665]	; 0x681
        mbedtls_x509_crt_free(&cacert);
 8081e7c:	f007 f907 	bl	808908e <mbedtls_x509_crt_free>
        mbedtls_x509_crt_free(&clicert);
 8081e80:	f204 501c 	addw	r0, r4, #1308	; 0x51c
 8081e84:	f007 f903 	bl	808908e <mbedtls_x509_crt_free>
        mbedtls_pk_free(&pkey);
 8081e88:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
 8081e8c:	f00a fecd 	bl	808cc2a <mbedtls_pk_free>
        mbedtls_ssl_config_free (&conf);
 8081e90:	f504 7061 	add.w	r0, r4, #900	; 0x384
 8081e94:	f009 f91c 	bl	808b0d0 <mbedtls_ssl_config_free>
        mbedtls_ssl_free (&ssl);
 8081e98:	f504 7034 	add.w	r0, r4, #720	; 0x2d0
 8081e9c:	f009 f884 	bl	808afa8 <mbedtls_ssl_free>
    }
    tcpClient.stop();
 8081ea0:	4620      	mov	r0, r4
 8081ea2:	f00f fd33 	bl	809190c <_ZN9TCPClient4stopEv>
 8081ea6:	f00f f981 	bl	80911ac <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
 8081eaa:	6260      	str	r0, [r4, #36]	; 0x24
 8081eac:	62a0      	str	r0, [r4, #40]	; 0x28
 8081eae:	bd38      	pop	{r3, r4, r5, pc}

08081eb0 <_ZN4MQTT8readByteEv>:
        disconnect();
    }
    return false;
}

uint8_t MQTT::readByte() {
 8081eb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (tls == false) {
 8081eb2:	f890 3681 	ldrb.w	r3, [r0, #1665]	; 0x681
        disconnect();
    }
    return false;
}

uint8_t MQTT::readByte() {
 8081eb6:	4604      	mov	r4, r0
    if (tls == false) {
 8081eb8:	b94b      	cbnz	r3, 8081ece <_ZN4MQTT8readByteEv+0x1e>
        while(!tcpClient.available()) {}
 8081eba:	4620      	mov	r0, r4
 8081ebc:	f00f fce8 	bl	8091890 <_ZN9TCPClient9availableEv>
 8081ec0:	2800      	cmp	r0, #0
 8081ec2:	d0fa      	beq.n	8081eba <_ZN4MQTT8readByteEv+0xa>
        return tcpClient.read();
 8081ec4:	4620      	mov	r0, r4
 8081ec6:	f00f fc8a 	bl	80917de <_ZN9TCPClient4readEv>
 8081eca:	b2c0      	uxtb	r0, r0
 8081ecc:	e017      	b.n	8081efe <_ZN4MQTT8readByteEv+0x4e>
    } else {
        uint8_t val = 0;
        uint8_t buff;

        if (tlsConnected) {
 8081ece:	f890 3680 	ldrb.w	r3, [r0, #1664]	; 0x680
 8081ed2:	b19b      	cbz	r3, 8081efc <_ZN4MQTT8readByteEv+0x4c>
            while (1) {
                int ret = mbedtls_ssl_read(&ssl, &buff, 1);
 8081ed4:	f500 7534 	add.w	r5, r0, #720	; 0x2d0
 8081ed8:	2201      	movs	r2, #1
 8081eda:	f10d 0107 	add.w	r1, sp, #7
 8081ede:	4628      	mov	r0, r5
 8081ee0:	f008 fe80 	bl	808abe4 <mbedtls_ssl_read>
                if (ret < 0) {
 8081ee4:	2800      	cmp	r0, #0
 8081ee6:	da06      	bge.n	8081ef6 <_ZN4MQTT8readByteEv+0x46>
                      switch (ret) {
 8081ee8:	f510 4fd2 	cmn.w	r0, #26880	; 0x6900
 8081eec:	d0f4      	beq.n	8081ed8 <_ZN4MQTT8readByteEv+0x28>
                        case MBEDTLS_ERR_SSL_WANT_READ:
                          break;
                      case MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE:
                      case MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY:
                      default:
                          disconnect();
 8081eee:	4620      	mov	r0, r4
 8081ef0:	f7ff ffaf 	bl	8081e52 <_ZN4MQTT10disconnectEv>
 8081ef4:	e002      	b.n	8081efc <_ZN4MQTT8readByteEv+0x4c>
                          return -1;
                    }
                } else {
                    return buff;
 8081ef6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8081efa:	e000      	b.n	8081efe <_ZN4MQTT8readByteEv+0x4e>
                }
            }
        } else {
            return -1;
 8081efc:	20ff      	movs	r0, #255	; 0xff
        }
    }
}
 8081efe:	b003      	add	sp, #12
 8081f00:	bd30      	pop	{r4, r5, pc}

08081f02 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 8081f02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8081f06:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
 8081f08:	69c4      	ldr	r4, [r0, #28]
            return -1;
        }
    }
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 8081f0a:	468a      	mov	sl, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
 8081f0c:	f7ff ffd0 	bl	8081eb0 <_ZN4MQTT8readByteEv>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
 8081f10:	f04f 0801 	mov.w	r8, #1
    }
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
 8081f14:	4646      	mov	r6, r8
 8081f16:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
 8081f18:	69eb      	ldr	r3, [r5, #28]
    uint32_t multiplier = 1;
    uint16_t length = 0;
 8081f1a:	2700      	movs	r7, #0
 8081f1c:	f893 9000 	ldrb.w	r9, [r3]
 8081f20:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
 8081f24:	4628      	mov	r0, r5
 8081f26:	f7ff ffc3 	bl	8081eb0 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
 8081f2a:	69eb      	ldr	r3, [r5, #28]
 8081f2c:	1c74      	adds	r4, r6, #1
 8081f2e:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
 8081f30:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 8081f34:	fb03 7708 	mla	r7, r3, r8, r7
        multiplier *= 128;
    } while ((digit & 128) != 0);
 8081f38:	0603      	lsls	r3, r0, #24
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 8081f3a:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
 8081f3c:	b2bf      	uxth	r7, r7
        multiplier *= 128;
 8081f3e:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    } while ((digit & 128) != 0);
 8081f42:	d501      	bpl.n	8081f48 <_ZN4MQTT10readPacketEPh+0x46>
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 8081f44:	4626      	mov	r6, r4
 8081f46:	e7ed      	b.n	8081f24 <_ZN4MQTT10readPacketEPh+0x22>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 8081f48:	1e63      	subs	r3, r4, #1

    if (isPublish) {
 8081f4a:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 8081f4e:	f88a 3000 	strb.w	r3, [sl]

    if (isPublish) {
 8081f52:	d113      	bne.n	8081f7c <_ZN4MQTT10readPacketEPh+0x7a>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
 8081f54:	4628      	mov	r0, r5
 8081f56:	f8d5 801c 	ldr.w	r8, [r5, #28]
 8081f5a:	f7ff ffa9 	bl	8081eb0 <_ZN4MQTT8readByteEv>
 8081f5e:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
 8081f62:	4628      	mov	r0, r5
 8081f64:	f8d5 801c 	ldr.w	r8, [r5, #28]
 8081f68:	f7ff ffa2 	bl	8081eb0 <_ZN4MQTT8readByteEv>
 8081f6c:	1cf4      	adds	r4, r6, #3
 8081f6e:	3602      	adds	r6, #2
 8081f70:	b2b6      	uxth	r6, r6
 8081f72:	b2a4      	uxth	r4, r4
 8081f74:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
 8081f78:	2302      	movs	r3, #2
 8081f7a:	e000      	b.n	8081f7e <_ZN4MQTT10readPacketEPh+0x7c>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
 8081f7c:	2300      	movs	r3, #0
 8081f7e:	1b1b      	subs	r3, r3, r4
 8081f80:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 8081f82:	19a3      	adds	r3, r4, r6
 8081f84:	b29b      	uxth	r3, r3
 8081f86:	429f      	cmp	r7, r3
 8081f88:	d90b      	bls.n	8081fa2 <_ZN4MQTT10readPacketEPh+0xa0>
        digit = readByte();
 8081f8a:	4628      	mov	r0, r5
 8081f8c:	f7ff ff90 	bl	8081eb0 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
 8081f90:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
 8081f94:	42a3      	cmp	r3, r4
            buffer[len] = digit;
 8081f96:	bf84      	itt	hi
 8081f98:	69eb      	ldrhi	r3, [r5, #28]
 8081f9a:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
 8081f9c:	3401      	adds	r4, #1
 8081f9e:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 8081fa0:	e7ef      	b.n	8081f82 <_ZN4MQTT10readPacketEPh+0x80>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
 8081fa2:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
 8081fa6:	42a0      	cmp	r0, r4
 8081fa8:	bf2c      	ite	cs
 8081faa:	4620      	movcs	r0, r4
 8081fac:	2000      	movcc	r0, #0
 8081fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08081fb2 <_ZN4MQTT11isConnectedEv>:
        return mbedtls_ssl_write(&ssl, buff, length);
    }
}


bool MQTT::isConnected() {
 8081fb2:	b510      	push	{r4, lr}
 8081fb4:	4604      	mov	r4, r0
    bool rc = (int)tcpClient.connected();
 8081fb6:	f00f fd87 	bl	8091ac8 <_ZN9TCPClient9connectedEv>
    if (tls)
 8081fba:	f894 3681 	ldrb.w	r3, [r4, #1665]	; 0x681
 8081fbe:	b91b      	cbnz	r3, 8081fc8 <_ZN4MQTT11isConnectedEv+0x16>
    }
}


bool MQTT::isConnected() {
    bool rc = (int)tcpClient.connected();
 8081fc0:	3000      	adds	r0, #0
 8081fc2:	bf18      	it	ne
 8081fc4:	2001      	movne	r0, #1
 8081fc6:	bd10      	pop	{r4, pc}
    if (tls)
        return tlsConnected;
 8081fc8:	f894 0680 	ldrb.w	r0, [r4, #1664]	; 0x680
    return rc;
}
 8081fcc:	bd10      	pop	{r4, pc}

08081fce <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 8081fce:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081fd2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8081fd4:	4604      	mov	r4, r0
 8081fd6:	468b      	mov	fp, r1
 8081fd8:	4691      	mov	r9, r2
 8081fda:	469a      	mov	sl, r3
 8081fdc:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8081fe0:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 8081fe4:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    if (isConnected()) {
 8081fe8:	f7ff ffe3 	bl	8081fb2 <_ZN4MQTT11isConnectedEv>
 8081fec:	2800      	cmp	r0, #0
 8081fee:	d048      	beq.n	8082082 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, sizeof(buffer));
 8081ff0:	69e3      	ldr	r3, [r4, #28]
 8081ff2:	2200      	movs	r2, #0
 8081ff4:	601a      	str	r2, [r3, #0]

        length = writeString(topic, buffer, length);
 8081ff6:	69e2      	ldr	r2, [r4, #28]
 8081ff8:	2305      	movs	r3, #5
 8081ffa:	4659      	mov	r1, fp
 8081ffc:	4620      	mov	r0, r4
 8081ffe:	f7ff fecf 	bl	8081da0 <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
 8082002:	1e6b      	subs	r3, r5, #1
 8082004:	2b01      	cmp	r3, #1
 8082006:	d812      	bhi.n	808202e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x60>
            nextMsgId += 1;
 8082008:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 808200a:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, sizeof(buffer));

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
 808200c:	3301      	adds	r3, #1
 808200e:	b29b      	uxth	r3, r3
 8082010:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 8082012:	121b      	asrs	r3, r3, #8
 8082014:	5413      	strb	r3, [r2, r0]
 8082016:	1c41      	adds	r1, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
 8082018:	69e3      	ldr	r3, [r4, #28]
 808201a:	8c22      	ldrh	r2, [r4, #32]

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
            buffer[length++] = (nextMsgId >> 8);
 808201c:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
 808201e:	3002      	adds	r0, #2
 8082020:	b280      	uxth	r0, r0
 8082022:	545a      	strb	r2, [r3, r1]
            if (messageid != NULL)
 8082024:	b11e      	cbz	r6, 808202e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x60>
                *messageid = nextMsgId++;
 8082026:	8c23      	ldrh	r3, [r4, #32]
 8082028:	1c5a      	adds	r2, r3, #1
 808202a:	8422      	strh	r2, [r4, #32]
 808202c:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 808202e:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 8082030:	b291      	uxth	r1, r2
 8082032:	1883      	adds	r3, r0, r2
 8082034:	458a      	cmp	sl, r1
 8082036:	b29b      	uxth	r3, r3
 8082038:	d909      	bls.n	808204e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x80>
 808203a:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
 808203e:	3201      	adds	r2, #1
 8082040:	429e      	cmp	r6, r3
 8082042:	d904      	bls.n	808204e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x80>
            buffer[length++] = payload[i];
 8082044:	f819 6001 	ldrb.w	r6, [r9, r1]
 8082048:	69e1      	ldr	r1, [r4, #28]
 808204a:	54ce      	strb	r6, [r1, r3]
 808204c:	e7f0      	b.n	8082030 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x62>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
 808204e:	f1b8 0f00 	cmp.w	r8, #0
 8082052:	bf0c      	ite	eq
 8082054:	2130      	moveq	r1, #48	; 0x30
 8082056:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
 8082058:	b10f      	cbz	r7, 808205e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x90>
            header |= DUP_FLAG_ON_MASK;
 808205a:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
 808205e:	2d02      	cmp	r5, #2
 8082060:	d102      	bne.n	8082068 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x9a>
            header |= MQTTQOS2_HEADER_MASK;
 8082062:	f041 0104 	orr.w	r1, r1, #4
 8082066:	e003      	b.n	8082070 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa2>
        else if (qos == QOS1)
 8082068:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
 808206a:	bf08      	it	eq
 808206c:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 8082070:	4620      	mov	r0, r4
 8082072:	3b05      	subs	r3, #5
 8082074:	69e2      	ldr	r2, [r4, #28]
 8082076:	b29b      	uxth	r3, r3
    }
    return false;
}
 8082078:	b001      	add	sp, #4
 808207a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 808207e:	f7ff beb6 	b.w	8081dee <_ZN4MQTT5writeEhPht>
    }
    return false;
}
 8082082:	b001      	add	sp, #4
 8082084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08082088 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain) {
    return publish(topic, payload, plength, retain, QOS0, NULL);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
 8082088:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
 808208a:	9c08      	ldr	r4, [sp, #32]
 808208c:	9403      	str	r4, [sp, #12]
 808208e:	2400      	movs	r4, #0
 8082090:	9402      	str	r4, [sp, #8]
 8082092:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8082096:	9401      	str	r4, [sp, #4]
 8082098:	f89d 4018 	ldrb.w	r4, [sp, #24]
 808209c:	9400      	str	r4, [sp, #0]
 808209e:	f7ff ff96 	bl	8081fce <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
 80820a2:	b004      	add	sp, #16
 80820a4:	bd10      	pop	{r4, pc}

080820a6 <_ZN4MQTT7publishEPKcS1_>:
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
 80820a6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80820a8:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80820aa:	4610      	mov	r0, r2
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
 80820ac:	460e      	mov	r6, r1
 80820ae:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80820b0:	f011 fdab 	bl	8093c0a <strlen>
 80820b4:	2300      	movs	r3, #0
 80820b6:	9302      	str	r3, [sp, #8]
 80820b8:	9301      	str	r3, [sp, #4]
 80820ba:	9300      	str	r3, [sp, #0]
 80820bc:	4622      	mov	r2, r4
 80820be:	4603      	mov	r3, r0
 80820c0:	4631      	mov	r1, r6
 80820c2:	4628      	mov	r0, r5
 80820c4:	f7ff ffe0 	bl	8082088 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
 80820c8:	b004      	add	sp, #16
 80820ca:	bd70      	pop	{r4, r5, r6, pc}

080820cc <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
}

bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
    if (qos < 0 || qos > 1)
 80820cc:	2a01      	cmp	r2, #1

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
}

bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
 80820ce:	b570      	push	{r4, r5, r6, lr}
 80820d0:	4604      	mov	r4, r0
 80820d2:	460e      	mov	r6, r1
 80820d4:	4615      	mov	r5, r2
    if (qos < 0 || qos > 1)
 80820d6:	d820      	bhi.n	808211a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x4e>
        return false;

    if (isConnected()) {
 80820d8:	f7ff ff6b 	bl	8081fb2 <_ZN4MQTT11isConnectedEv>
 80820dc:	b1e8      	cbz	r0, 808211a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x4e>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
 80820de:	8c23      	ldrh	r3, [r4, #32]
 80820e0:	3301      	adds	r3, #1
 80820e2:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
 80820e4:	b903      	cbnz	r3, 80820e8 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x1c>
            nextMsgId = 1;
 80820e6:	2301      	movs	r3, #1
 80820e8:	8423      	strh	r3, [r4, #32]
        }
        buffer[length++] = (nextMsgId >> 8);
 80820ea:	8c23      	ldrh	r3, [r4, #32]
 80820ec:	69e2      	ldr	r2, [r4, #28]
 80820ee:	121b      	asrs	r3, r3, #8
 80820f0:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
 80820f2:	69e3      	ldr	r3, [r4, #28]
 80820f4:	8c22      	ldrh	r2, [r4, #32]
        length = writeString(topic, buffer,length);
 80820f6:	4631      	mov	r1, r6
        nextMsgId++;
        if (nextMsgId == 0) {
            nextMsgId = 1;
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
 80820f8:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
 80820fa:	69e2      	ldr	r2, [r4, #28]
 80820fc:	2307      	movs	r3, #7
 80820fe:	4620      	mov	r0, r4
 8082100:	f7ff fe4e 	bl	8081da0 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
 8082104:	69e3      	ldr	r3, [r4, #28]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 8082106:	2182      	movs	r1, #130	; 0x82
            nextMsgId = 1;
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
 8082108:	541d      	strb	r5, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 808210a:	1f03      	subs	r3, r0, #4
 808210c:	69e2      	ldr	r2, [r4, #28]
 808210e:	4620      	mov	r0, r4
    }
    return false;
}
 8082110:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 8082114:	b29b      	uxth	r3, r3
 8082116:	f7ff be6a 	b.w	8081dee <_ZN4MQTT5writeEhPht>
    }
    return false;
}
 808211a:	2000      	movs	r0, #0
 808211c:	bd70      	pop	{r4, r5, r6, pc}

0808211e <_ZN4MQTT9subscribeEPKc>:
    lastOutActivity = millis();
    return (rc == 1+llen+length);
}

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
 808211e:	2200      	movs	r2, #0
 8082120:	f7ff bfd4 	b.w	80820cc <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

08082124 <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 8082124:	b510      	push	{r4, lr}
 8082126:	4604      	mov	r4, r0
    if (isConnected()) {
 8082128:	f7ff ff43 	bl	8081fb2 <_ZN4MQTT11isConnectedEv>
 808212c:	b128      	cbz	r0, 808213a <_ZN4MQTTD1Ev+0x16>
        disconnect();
 808212e:	4620      	mov	r0, r4
 8082130:	f7ff fe8f 	bl	8081e52 <_ZN4MQTT10disconnectEv>
        free(buffer);
 8082134:	69e0      	ldr	r0, [r4, #28]
 8082136:	f00f fa01 	bl	809153c <free>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 808213a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 808213e:	f00f fcf3 	bl	8091b28 <_ZN6StringD1Ev>
 8082142:	4620      	mov	r0, r4
 8082144:	f7ff fdaa 	bl	8081c9c <_ZN9TCPClientD1Ev>
    if (isConnected()) {
        disconnect();
        free(buffer);
    }
}
 8082148:	4620      	mov	r0, r4
 808214a:	bd10      	pop	{r4, pc}

0808214c <_ZN4MQTT9availableEv>:
    if (tls)
        return tlsConnected;
    return rc;
}

bool MQTT::available() {
 808214c:	b508      	push	{r3, lr}
    return tcpClient.available();
 808214e:	f00f fb9f 	bl	8091890 <_ZN9TCPClient9availableEv>
}
 8082152:	3000      	adds	r0, #0
 8082154:	bf18      	it	ne
 8082156:	2001      	movne	r0, #1
 8082158:	bd08      	pop	{r3, pc}

0808215a <_ZN4MQTT4loopEv>:
    }

    return len;
}

bool MQTT::loop() {
 808215a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808215e:	b083      	sub	sp, #12
 8082160:	af00      	add	r7, sp, #0
 8082162:	4604      	mov	r4, r0
    if (isConnected()) {
 8082164:	f7ff ff25 	bl	8081fb2 <_ZN4MQTT11isConnectedEv>
 8082168:	4606      	mov	r6, r0
 808216a:	2800      	cmp	r0, #0
 808216c:	f000 80be 	beq.w	80822ec <_ZN4MQTT4loopEv+0x192>
 8082170:	f00f f81c 	bl	80911ac <HAL_Timer_Get_Milli_Seconds>
        unsigned long t = millis();
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
 8082174:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8082176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808217a:	4353      	muls	r3, r2
 808217c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 808217e:	4605      	mov	r5, r0
 8082180:	1a82      	subs	r2, r0, r2
 8082182:	429a      	cmp	r2, r3
 8082184:	d803      	bhi.n	808218e <_ZN4MQTT4loopEv+0x34>
 8082186:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8082188:	1a82      	subs	r2, r0, r2
 808218a:	4293      	cmp	r3, r2
 808218c:	d216      	bcs.n	80821bc <_ZN4MQTT4loopEv+0x62>
            if (pingOutstanding) {
 808218e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8082192:	b123      	cbz	r3, 808219e <_ZN4MQTT4loopEv+0x44>
                disconnect();
 8082194:	4620      	mov	r0, r4
 8082196:	f7ff fe5c 	bl	8081e52 <_ZN4MQTT10disconnectEv>
                return false;
 808219a:	2600      	movs	r6, #0
 808219c:	e0a6      	b.n	80822ec <_ZN4MQTT4loopEv+0x192>
            } else {
                buffer[0] = MQTTPINGREQ;
 808219e:	69e2      	ldr	r2, [r4, #28]
 80821a0:	21c0      	movs	r1, #192	; 0xc0
 80821a2:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
 80821a4:	69e2      	ldr	r2, [r4, #28]
                netWrite(buffer,2);
 80821a6:	4620      	mov	r0, r4
            if (pingOutstanding) {
                disconnect();
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
 80821a8:	7053      	strb	r3, [r2, #1]
                netWrite(buffer,2);
 80821aa:	69e1      	ldr	r1, [r4, #28]
 80821ac:	2202      	movs	r2, #2
 80821ae:	f7ff fe11 	bl	8081dd4 <_ZN4MQTT8netWriteEPhi>
                lastOutActivity = t;
                lastInActivity = t;
                pingOutstanding = true;
 80821b2:	2301      	movs	r3, #1
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
                netWrite(buffer,2);
                lastOutActivity = t;
 80821b4:	6265      	str	r5, [r4, #36]	; 0x24
                lastInActivity = t;
 80821b6:	62a5      	str	r5, [r4, #40]	; 0x28
                pingOutstanding = true;
 80821b8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            }
        }
        if (available()) {
 80821bc:	4620      	mov	r0, r4
 80821be:	f7ff ffc5 	bl	808214c <_ZN4MQTT9availableEv>
 80821c2:	4681      	mov	r9, r0
 80821c4:	2800      	cmp	r0, #0
 80821c6:	f000 8091 	beq.w	80822ec <_ZN4MQTT4loopEv+0x192>
            uint8_t llen;
            uint16_t len = readPacket(&llen);
 80821ca:	1df9      	adds	r1, r7, #7
 80821cc:	4620      	mov	r0, r4
 80821ce:	f7ff fe98 	bl	8081f02 <_ZN4MQTT10readPacketEPh>
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
 80821d2:	4602      	mov	r2, r0
 80821d4:	2800      	cmp	r0, #0
 80821d6:	f000 8088 	beq.w	80822ea <_ZN4MQTT4loopEv+0x190>
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
 80821da:	69e1      	ldr	r1, [r4, #28]
            uint8_t llen;
            uint16_t len = readPacket(&llen);
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
                lastInActivity = t;
 80821dc:	62a5      	str	r5, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
 80821de:	7808      	ldrb	r0, [r1, #0]
 80821e0:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
                if (type == MQTTPUBLISH) {
 80821e4:	2b30      	cmp	r3, #48	; 0x30
 80821e6:	d158      	bne.n	808229a <_ZN4MQTT4loopEv+0x140>
                    if (callback) {
 80821e8:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
 80821ec:	f1bb 0f00 	cmp.w	fp, #0
 80821f0:	d07b      	beq.n	80822ea <_ZN4MQTT4loopEv+0x190>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
 80821f2:	f897 e007 	ldrb.w	lr, [r7, #7]
                            netWrite(buffer,4);
                            lastOutActivity = t;
                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
 80821f6:	46ea      	mov	sl, sp
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
 80821f8:	eb01 000e 	add.w	r0, r1, lr
 80821fc:	7846      	ldrb	r6, [r0, #1]
 80821fe:	7883      	ldrb	r3, [r0, #2]
 8082200:	eb03 2306 	add.w	r3, r3, r6, lsl #8
 8082204:	b29b      	uxth	r3, r3
                        char topic[tl+1];
 8082206:	f103 0008 	add.w	r0, r3, #8
 808220a:	f020 0007 	bic.w	r0, r0, #7
 808220e:	ebad 0d00 	sub.w	sp, sp, r0
 8082212:	4668      	mov	r0, sp
 8082214:	2600      	movs	r6, #0
                        for (uint16_t i=0;i<tl;i++) {
 8082216:	fa1f fc86 	uxth.w	ip, r6
 808221a:	4563      	cmp	r3, ip
 808221c:	d908      	bls.n	8082230 <_ZN4MQTT4loopEv+0xd6>
                            topic[i] = buffer[llen+3+i];
 808221e:	eb0e 0c06 	add.w	ip, lr, r6
 8082222:	448c      	add	ip, r1
 8082224:	f89c c003 	ldrb.w	ip, [ip, #3]
 8082228:	f800 c006 	strb.w	ip, [r0, r6]
 808222c:	3601      	adds	r6, #1
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
                        char topic[tl+1];
                        for (uint16_t i=0;i<tl;i++) {
 808222e:	e7f2      	b.n	8082216 <_ZN4MQTT4loopEv+0xbc>
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
 8082230:	2600      	movs	r6, #0
 8082232:	54c6      	strb	r6, [r0, r3]
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) {
 8082234:	f891 8000 	ldrb.w	r8, [r1]
 8082238:	f10e 0603 	add.w	r6, lr, #3
 808223c:	f008 0806 	and.w	r8, r8, #6
 8082240:	f1b8 0f02 	cmp.w	r8, #2
 8082244:	ebce 0202 	rsb	r2, lr, r2
 8082248:	d120      	bne.n	808228c <_ZN4MQTT4loopEv+0x132>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 808224a:	441e      	add	r6, r3
 808224c:	f811 c006 	ldrb.w	ip, [r1, r6]
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 8082250:	f10e 0e05 	add.w	lr, lr, #5
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) {
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 8082254:	440e      	add	r6, r1
 8082256:	7876      	ldrb	r6, [r6, #1]
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 8082258:	1ad2      	subs	r2, r2, r3
 808225a:	4473      	add	r3, lr
 808225c:	4419      	add	r1, r3
 808225e:	3a05      	subs	r2, #5
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) {
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 8082260:	eb06 260c 	add.w	r6, r6, ip, lsl #8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 8082264:	47d8      	blx	fp

                            buffer[0] = MQTTPUBACK;
 8082266:	69e3      	ldr	r3, [r4, #28]
 8082268:	2240      	movs	r2, #64	; 0x40
 808226a:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
 808226c:	69e3      	ldr	r3, [r4, #28]
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) {
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 808226e:	b2b6      	uxth	r6, r6
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK;
                            buffer[1] = 2;
 8082270:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
 8082274:	69e3      	ldr	r3, [r4, #28]
 8082276:	1232      	asrs	r2, r6, #8
 8082278:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
 808227a:	69e3      	ldr	r3, [r4, #28]
                            netWrite(buffer,4);
 808227c:	2204      	movs	r2, #4
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK;
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
 808227e:	70de      	strb	r6, [r3, #3]
                            netWrite(buffer,4);
 8082280:	69e1      	ldr	r1, [r4, #28]
 8082282:	4620      	mov	r0, r4
 8082284:	f7ff fda6 	bl	8081dd4 <_ZN4MQTT8netWriteEPhi>
                            lastOutActivity = t;
 8082288:	6265      	str	r5, [r4, #36]	; 0x24
 808228a:	e004      	b.n	8082296 <_ZN4MQTT4loopEv+0x13c>
                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
 808228c:	3a03      	subs	r2, #3
 808228e:	441e      	add	r6, r3
 8082290:	1ad2      	subs	r2, r2, r3
 8082292:	4431      	add	r1, r6
 8082294:	47d8      	blx	fp
 8082296:	46d5      	mov	sp, sl
 8082298:	e027      	b.n	80822ea <_ZN4MQTT4loopEv+0x190>
                        }
                    }
                } else if (type == MQTTPUBACK || type == MQTTPUBREC) {
 808229a:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 808229e:	2d40      	cmp	r5, #64	; 0x40
 80822a0:	d10d      	bne.n	80822be <_ZN4MQTT4loopEv+0x164>
                    if (qoscallback) {
 80822a2:	6b64      	ldr	r4, [r4, #52]	; 0x34
 80822a4:	b30c      	cbz	r4, 80822ea <_ZN4MQTT4loopEv+0x190>
                        // msgId only present for QOS==0
                        if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
 80822a6:	2a04      	cmp	r2, #4
 80822a8:	d11f      	bne.n	80822ea <_ZN4MQTT4loopEv+0x190>
 80822aa:	f010 0f06 	tst.w	r0, #6
 80822ae:	d11c      	bne.n	80822ea <_ZN4MQTT4loopEv+0x190>
                            msgId = (buffer[2]<<8)+buffer[3];
                            this->qoscallback(msgId);
 80822b0:	7888      	ldrb	r0, [r1, #2]
 80822b2:	78cb      	ldrb	r3, [r1, #3]
 80822b4:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80822b8:	b280      	uxth	r0, r0
 80822ba:	47a0      	blx	r4
 80822bc:	e015      	b.n	80822ea <_ZN4MQTT4loopEv+0x190>
                        }
                    }
                } else if (type == MQTTPUBCOMP) {
 80822be:	2b70      	cmp	r3, #112	; 0x70
 80822c0:	d013      	beq.n	80822ea <_ZN4MQTT4loopEv+0x190>
                    // TODO:if something...
                } else if (type == MQTTSUBACK) {
 80822c2:	2b90      	cmp	r3, #144	; 0x90
 80822c4:	d011      	beq.n	80822ea <_ZN4MQTT4loopEv+0x190>
                    // if something...
                } else if (type == MQTTPINGREQ) {
 80822c6:	2bc0      	cmp	r3, #192	; 0xc0
 80822c8:	d10a      	bne.n	80822e0 <_ZN4MQTT4loopEv+0x186>
                    buffer[0] = MQTTPINGRESP;
 80822ca:	23d0      	movs	r3, #208	; 0xd0
 80822cc:	700b      	strb	r3, [r1, #0]
                    buffer[1] = 0;
 80822ce:	69e3      	ldr	r3, [r4, #28]
 80822d0:	2200      	movs	r2, #0
 80822d2:	705a      	strb	r2, [r3, #1]
                    netWrite(buffer,2);
 80822d4:	69e1      	ldr	r1, [r4, #28]
 80822d6:	2202      	movs	r2, #2
 80822d8:	4620      	mov	r0, r4
 80822da:	f7ff fd7b 	bl	8081dd4 <_ZN4MQTT8netWriteEPhi>
 80822de:	e004      	b.n	80822ea <_ZN4MQTT4loopEv+0x190>
                } else if (type == MQTTPINGRESP) {
 80822e0:	2bd0      	cmp	r3, #208	; 0xd0
                    pingOutstanding = false;
 80822e2:	bf04      	itt	eq
 80822e4:	2300      	moveq	r3, #0
 80822e6:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
                }
            }
        }
        return true;
 80822ea:	464e      	mov	r6, r9
    }
    return false;
}
 80822ec:	4630      	mov	r0, r6
 80822ee:	370c      	adds	r7, #12
 80822f0:	46bd      	mov	sp, r7
 80822f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080822f8 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j>:
    return this->enableTls(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int MQTT::enableTls(const char *rootCaPem, const size_t rootCaPemSize,
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
 80822f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80822fc:	4605      	mov	r5, r0
 80822fe:	4693      	mov	fp, r2
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
 8082300:	f500 7461 	add.w	r4, r0, #900	; 0x384
    return this->enableTls(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int MQTT::enableTls(const char *rootCaPem, const size_t rootCaPemSize,
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
 8082304:	4699      	mov	r9, r3
    int ret;
    tls = true;
 8082306:	2301      	movs	r3, #1
    return this->enableTls(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int MQTT::enableTls(const char *rootCaPem, const size_t rootCaPemSize,
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
 8082308:	b085      	sub	sp, #20
    int ret;
    tls = true;
 808230a:	f880 3681 	strb.w	r3, [r0, #1665]	; 0x681

    mbedtls_ssl_config_init(&conf);
    mbedtls_ssl_init(&ssl);
 808230e:	f505 7634 	add.w	r6, r5, #720	; 0x2d0
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
 8082312:	4620      	mov	r0, r4
    return this->enableTls(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int MQTT::enableTls(const char *rootCaPem, const size_t rootCaPemSize,
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
 8082314:	9103      	str	r1, [sp, #12]
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
    mbedtls_ssl_init(&ssl);
    mbedtls_x509_crt_init(&cacert);
 8082316:	f505 7a7a 	add.w	sl, r5, #1000	; 0x3e8
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
 808231a:	f008 fe93 	bl	808b044 <mbedtls_ssl_config_init>
    mbedtls_ssl_init(&ssl);
 808231e:	4630      	mov	r0, r6
 8082320:	f008 fbb8 	bl	808aa94 <mbedtls_ssl_init>
    mbedtls_x509_crt_init(&cacert);
    mbedtls_x509_crt_init(&clicert);
 8082324:	f205 571c 	addw	r7, r5, #1308	; 0x51c
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
    mbedtls_ssl_init(&ssl);
    mbedtls_x509_crt_init(&cacert);
 8082328:	4650      	mov	r0, sl
 808232a:	f006 feab 	bl	8089084 <mbedtls_x509_crt_init>
    mbedtls_x509_crt_init(&clicert);
    mbedtls_pk_init(&pkey);
 808232e:	f505 68ca 	add.w	r8, r5, #1616	; 0x650
    tls = true;

    mbedtls_ssl_config_init(&conf);
    mbedtls_ssl_init(&ssl);
    mbedtls_x509_crt_init(&cacert);
    mbedtls_x509_crt_init(&clicert);
 8082332:	4638      	mov	r0, r7
 8082334:	f006 fea6 	bl	8089084 <mbedtls_x509_crt_init>
    mbedtls_pk_init(&pkey);
 8082338:	4640      	mov	r0, r8
 808233a:	f00a fc71 	bl	808cc20 <mbedtls_pk_init>

    mbedtls_ssl_conf_dbg(&conf, &MQTT::debug_Tls, nullptr);
 808233e:	2200      	movs	r2, #0
 8082340:	4935      	ldr	r1, [pc, #212]	; (8082418 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x120>)
 8082342:	4620      	mov	r0, r4
 8082344:	f008 fbb7 	bl	808aab6 <mbedtls_ssl_conf_dbg>
    #if defined(MBEDTLS_DEBUG_C)
      mbedtls_debug_set_threshold(DEBUG_TLS_CORE_LEVEL);
    #endif

    if ((ret = mbedtls_x509_crt_parse(&cacert, (const unsigned char *)rootCaPem, rootCaPemSize)) < 0) {
 8082348:	465a      	mov	r2, fp
 808234a:	9903      	ldr	r1, [sp, #12]
 808234c:	4650      	mov	r0, sl
 808234e:	f007 fa37 	bl	80897c0 <mbedtls_x509_crt_parse>
 8082352:	2800      	cmp	r0, #0
 8082354:	db5d      	blt.n	8082412 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x11a>
      debug_tls(" enableTls mbedtls_x509_crt_parse error : %d\n", ret);
      return ret;
    }

    if (clientCertPem != NULL && clientCertPemSize > 0) {
 8082356:	f1b9 0f00 	cmp.w	r9, #0
 808235a:	d102      	bne.n	8082362 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x6a>
        debug_tls(" tlsClientKey mbedtls_x509_crt_parse error : %d\n", ret);
        return ret;
      }
    }

    if (clientKeyPem != NULL && clientKeyPemSize > 0) {
 808235c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 808235e:	b95b      	cbnz	r3, 8082378 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x80>
 8082360:	e00c      	b.n	808237c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x84>
    if ((ret = mbedtls_x509_crt_parse(&cacert, (const unsigned char *)rootCaPem, rootCaPemSize)) < 0) {
      debug_tls(" enableTls mbedtls_x509_crt_parse error : %d\n", ret);
      return ret;
    }

    if (clientCertPem != NULL && clientCertPemSize > 0) {
 8082362:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8082364:	2b00      	cmp	r3, #0
 8082366:	d0f9      	beq.n	808235c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x64>
      if ((ret = mbedtls_x509_crt_parse(&clicert, (const unsigned char *)clientCertPem, clientCertPemSize)) < 0) {
 8082368:	461a      	mov	r2, r3
 808236a:	4649      	mov	r1, r9
 808236c:	4638      	mov	r0, r7
 808236e:	f007 fa27 	bl	80897c0 <mbedtls_x509_crt_parse>
 8082372:	2800      	cmp	r0, #0
 8082374:	daf2      	bge.n	808235c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x64>
 8082376:	e04c      	b.n	8082412 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x11a>
        debug_tls(" tlsClientKey mbedtls_x509_crt_parse error : %d\n", ret);
        return ret;
      }
    }

    if (clientKeyPem != NULL && clientKeyPemSize > 0) {
 8082378:	9b10      	ldr	r3, [sp, #64]	; 0x40
 808237a:	b94b      	cbnz	r3, 8082390 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x98>
        debug_tls(" tlsClientKey mbedtls_pk_parse_key error : %d\n", ret);
        return ret;
      }
    }

    if ((ret = mbedtls_ssl_config_defaults(&conf, MBEDTLS_SSL_IS_CLIENT,
 808237c:	2300      	movs	r3, #0
 808237e:	461a      	mov	r2, r3
 8082380:	4619      	mov	r1, r3
 8082382:	4620      	mov	r0, r4
 8082384:	f008 fe62 	bl	808b04c <mbedtls_ssl_config_defaults>
 8082388:	4683      	mov	fp, r0
 808238a:	2800      	cmp	r0, #0
 808238c:	d141      	bne.n	8082412 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x11a>
 808238e:	e009      	b.n	80823a4 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0xac>
        return ret;
      }
    }

    if (clientKeyPem != NULL && clientKeyPemSize > 0) {
      if ((ret = mbedtls_pk_parse_key(&pkey, (const unsigned char *)clientKeyPem, clientKeyPemSize, NULL, 0)) != 0) {
 8082390:	2300      	movs	r3, #0
 8082392:	9300      	str	r3, [sp, #0]
 8082394:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8082396:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8082398:	4640      	mov	r0, r8
 808239a:	f005 f871 	bl	8087480 <mbedtls_pk_parse_key>
 808239e:	2800      	cmp	r0, #0
 80823a0:	d0ec      	beq.n	808237c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x84>
 80823a2:	e036      	b.n	8082412 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x11a>

    if ((ret = mbedtls_ssl_config_defaults(&conf, MBEDTLS_SSL_IS_CLIENT,
                   MBEDTLS_SSL_TRANSPORT_STREAM, MBEDTLS_SSL_PRESET_DEFAULT)) != 0) {
      return ret;
    }
    mbedtls_ssl_conf_min_version(&conf, MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3);
 80823a4:	2203      	movs	r2, #3
 80823a6:	4611      	mov	r1, r2
 80823a8:	4620      	mov	r0, r4
 80823aa:	f008 fbd1 	bl	808ab50 <mbedtls_ssl_conf_min_version>
    mbedtls_ssl_conf_verify(&conf, &MQTT::veryfyCert_Tls, NULL);
 80823ae:	465a      	mov	r2, fp
 80823b0:	491a      	ldr	r1, [pc, #104]	; (808241c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x124>)
 80823b2:	4620      	mov	r0, r4
 80823b4:	f008 fb79 	bl	808aaaa <mbedtls_ssl_conf_verify>

    // if server certificates is not valid, connection will success. check certificates on verify() function.
    mbedtls_ssl_conf_authmode(&conf, MBEDTLS_SSL_VERIFY_OPTIONAL);
 80823b8:	2101      	movs	r1, #1
 80823ba:	4620      	mov	r0, r4
 80823bc:	f008 fb6e 	bl	808aa9c <mbedtls_ssl_conf_authmode>
    mbedtls_ssl_conf_rng(&conf, &MQTT::rng_Tls, nullptr);
 80823c0:	465a      	mov	r2, fp
 80823c2:	4917      	ldr	r1, [pc, #92]	; (8082420 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x128>)
 80823c4:	4620      	mov	r0, r4
 80823c6:	f008 fb73 	bl	808aab0 <mbedtls_ssl_conf_rng>
    mbedtls_ssl_conf_ca_chain(&conf, &cacert, nullptr);
 80823ca:	465a      	mov	r2, fp
 80823cc:	4651      	mov	r1, sl
 80823ce:	4620      	mov	r0, r4
 80823d0:	f008 fb85 	bl	808aade <mbedtls_ssl_conf_ca_chain>

    if (clientCertPem != NULL && clientKeyPem != NULL) {
 80823d4:	f1b9 0f00 	cmp.w	r9, #0
 80823d8:	d006      	beq.n	80823e8 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0xf0>
 80823da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80823dc:	b123      	cbz	r3, 80823e8 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0xf0>
      mbedtls_ssl_conf_own_cert(&conf, &clicert, &pkey);
 80823de:	4642      	mov	r2, r8
 80823e0:	4639      	mov	r1, r7
 80823e2:	4620      	mov	r0, r4
 80823e4:	f008 fb78 	bl	808aad8 <mbedtls_ssl_conf_own_cert>
    }

    if((ret = mbedtls_ssl_setup(&ssl, &conf)) != 0) {
 80823e8:	4621      	mov	r1, r4
 80823ea:	4630      	mov	r0, r6
 80823ec:	f008 fda2 	bl	808af34 <mbedtls_ssl_setup>
 80823f0:	4604      	mov	r4, r0
 80823f2:	b968      	cbnz	r0, 8082410 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x118>
      return ret;
    }

    mbedtls_ssl_set_timer_cb(&ssl, &timer, mbedtls_timing_set_delay, mbedtls_timing_get_delay);
 80823f4:	4b0b      	ldr	r3, [pc, #44]	; (8082424 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x12c>)
 80823f6:	4a0c      	ldr	r2, [pc, #48]	; (8082428 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x130>)
 80823f8:	f505 61cb 	add.w	r1, r5, #1624	; 0x658
 80823fc:	4630      	mov	r0, r6
 80823fe:	f008 fb63 	bl	808aac8 <mbedtls_ssl_set_timer_cb>
    mbedtls_ssl_set_bio(&ssl, this, &MQTT::send_Tls,  &MQTT::recv_Tls, nullptr);
 8082402:	9400      	str	r4, [sp, #0]
 8082404:	4b09      	ldr	r3, [pc, #36]	; (808242c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x134>)
 8082406:	4a0a      	ldr	r2, [pc, #40]	; (8082430 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x138>)
 8082408:	4629      	mov	r1, r5
 808240a:	4630      	mov	r0, r6
 808240c:	f008 fb56 	bl	808aabc <mbedtls_ssl_set_bio>
 8082410:	4620      	mov	r0, r4
    return 0;
}
 8082412:	b005      	add	sp, #20
 8082414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8082418:	08081bdd 	.word	0x08081bdd
 808241c:	08081c79 	.word	0x08081c79
 8082420:	08081c45 	.word	0x08081c45
 8082424:	080866cb 	.word	0x080866cb
 8082428:	080866bd 	.word	0x080866bd
 808242c:	08081c15 	.word	0x08081c15
 8082430:	08081be1 	.word	0x08081be1

08082434 <_ZN4MQTT6verifyEv>:
      return 0;
  }
  return ret;
}

bool MQTT::verify() {
 8082434:	b500      	push	{lr}
  int ret;
  if ((ret = mbedtls_ssl_get_verify_result(&ssl)) != 0 ) {
 8082436:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
      return 0;
  }
  return ret;
}

bool MQTT::verify() {
 808243a:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
  int ret;
  if ((ret = mbedtls_ssl_get_verify_result(&ssl)) != 0 ) {
 808243e:	f008 fb8c 	bl	808ab5a <mbedtls_ssl_get_verify_result>
 8082442:	4603      	mov	r3, r0
 8082444:	b138      	cbz	r0, 8082456 <_ZN4MQTT6verifyEv+0x22>
    char vrfy_buf[512];
    mbedtls_x509_crt_verify_info( vrfy_buf, sizeof( vrfy_buf ), "  ! ", ret );
 8082446:	4a06      	ldr	r2, [pc, #24]	; (8082460 <_ZN4MQTT6verifyEv+0x2c>)
 8082448:	f44f 7100 	mov.w	r1, #512	; 0x200
 808244c:	4668      	mov	r0, sp
 808244e:	f006 fa03 	bl	8088858 <mbedtls_x509_crt_verify_info>
    debug_tls("%s\n", vrfy_buf);
    return false;
 8082452:	2000      	movs	r0, #0
 8082454:	e000      	b.n	8082458 <_ZN4MQTT6verifyEv+0x24>
  }
  return true;
 8082456:	2001      	movs	r0, #1
}
 8082458:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
 808245c:	f85d fb04 	ldr.w	pc, [sp], #4
 8082460:	08093ebc 	.word	0x08093ebc

08082464 <_ZN4MQTT12handShakeTlsEv>:
    mbedtls_ssl_set_bio(&ssl, this, &MQTT::send_Tls,  &MQTT::recv_Tls, nullptr);
    return 0;
}


int MQTT::handShakeTls() {
 8082464:	b570      	push	{r4, r5, r6, lr}
 8082466:	4604      	mov	r4, r0
  int ret;
  debug_tls("hand shake start\n");
  do {
      while (ssl.state != MBEDTLS_SSL_HANDSHAKE_OVER) {
          ret = mbedtls_ssl_handshake_client_step(&ssl);
 8082468:	f500 7634 	add.w	r6, r0, #720	; 0x2d0

int MQTT::handShakeTls() {
  int ret;
  debug_tls("hand shake start\n");
  do {
      while (ssl.state != MBEDTLS_SSL_HANDSHAKE_OVER) {
 808246c:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8082470:	2b10      	cmp	r3, #16
 8082472:	d005      	beq.n	8082480 <_ZN4MQTT12handShakeTlsEv+0x1c>
          ret = mbedtls_ssl_handshake_client_step(&ssl);
 8082474:	4630      	mov	r0, r6
 8082476:	f00d fc61 	bl	808fd3c <mbedtls_ssl_handshake_client_step>
          if (ret != 0)
 808247a:	4605      	mov	r5, r0
 808247c:	2800      	cmp	r0, #0
 808247e:	d0f5      	beq.n	808246c <_ZN4MQTT12handShakeTlsEv+0x8>
              break;
      }
  } while (ret == MBEDTLS_ERR_SSL_WANT_READ || ret == MBEDTLS_ERR_SSL_WANT_WRITE);
 8082480:	f515 4fd2 	cmn.w	r5, #26880	; 0x6900
 8082484:	d0f2      	beq.n	808246c <_ZN4MQTT12handShakeTlsEv+0x8>
 8082486:	f515 4fd1 	cmn.w	r5, #26752	; 0x6880
 808248a:	d0ef      	beq.n	808246c <_ZN4MQTT12handShakeTlsEv+0x8>

  // clean ca cert/crt/pkey for memory limitation
  mbedtls_x509_crt_free(&cacert);
 808248c:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
 8082490:	f006 fdfd 	bl	808908e <mbedtls_x509_crt_free>
  mbedtls_x509_crt_free(&clicert);
 8082494:	f204 501c 	addw	r0, r4, #1308	; 0x51c
 8082498:	f006 fdf9 	bl	808908e <mbedtls_x509_crt_free>
  mbedtls_pk_free(&pkey);
 808249c:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
 80824a0:	f00a fbc3 	bl	808cc2a <mbedtls_pk_free>

  debug_tls("%s, ret = %d\n", "handshake done", ret);
  if (ssl.state == MBEDTLS_SSL_HANDSHAKE_OVER) {
 80824a4:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 80824a8:	2b10      	cmp	r3, #16
 80824aa:	d109      	bne.n	80824c0 <_ZN4MQTT12handShakeTlsEv+0x5c>
      if (enableVerify && !verify())
 80824ac:	f894 3682 	ldrb.w	r3, [r4, #1666]	; 0x682
 80824b0:	b143      	cbz	r3, 80824c4 <_ZN4MQTT12handShakeTlsEv+0x60>
 80824b2:	4620      	mov	r0, r4
 80824b4:	f7ff ffbe 	bl	8082434 <_ZN4MQTT6verifyEv>
 80824b8:	b920      	cbnz	r0, 80824c4 <_ZN4MQTT12handShakeTlsEv+0x60>
        return -1;
 80824ba:	f04f 30ff 	mov.w	r0, #4294967295
 80824be:	bd70      	pop	{r4, r5, r6, pc}
 80824c0:	4628      	mov	r0, r5
 80824c2:	bd70      	pop	{r4, r5, r6, pc}
      tlsConnected = true;
 80824c4:	2301      	movs	r3, #1
 80824c6:	f884 3680 	strb.w	r3, [r4, #1664]	; 0x680
      debug_tls("tls connected\n");
      return 0;
 80824ca:	2000      	movs	r0, #0
  }
  return ret;
}
 80824cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080824d0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:

bool MQTT::connect(const char *id, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage) {
    return connect(id,NULL,NULL,willTopic,willQos,willRetain,willMessage,true,MQTT_V311);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
 80824d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80824d4:	b08b      	sub	sp, #44	; 0x2c
 80824d6:	4604      	mov	r4, r0
 80824d8:	4689      	mov	r9, r1
 80824da:	4617      	mov	r7, r2
 80824dc:	461e      	mov	r6, r3
 80824de:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
    if (!isConnected()) {
 80824e2:	f7ff fd66 	bl	8081fb2 <_ZN4MQTT11isConnectedEv>
 80824e6:	4605      	mov	r5, r0
 80824e8:	2800      	cmp	r0, #0
 80824ea:	f040 80e7 	bne.w	80826bc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ec>
        int result = 0;
        if (ip == NULL) {
 80824ee:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80824f0:	2900      	cmp	r1, #0
 80824f2:	d138      	bne.n	8082566 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
            result = tcpClient.connect(this->domain.c_str(), this->port);
 80824f4:	4603      	mov	r3, r0
 80824f6:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80824fa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80824fc:	4620      	mov	r0, r4
 80824fe:	f00f f917 	bl	8091730 <_ZN9TCPClient7connectEPKctm>
            if (tls) {
 8082502:	f894 3681 	ldrb.w	r3, [r4, #1665]	; 0x681
 8082506:	2b00      	cmp	r3, #0
 8082508:	d050      	beq.n	80825ac <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
                mbedtls_ssl_set_hostname(&ssl, domain);
 808250a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 808250c:	f504 7034 	add.w	r0, r4, #720	; 0x2d0
 8082510:	f008 fae8 	bl	808aae4 <mbedtls_ssl_set_hostname>
                result = (0 == this->handShakeTls() ? 1 : 0);
 8082514:	4620      	mov	r0, r4
 8082516:	f7ff ffa5 	bl	8082464 <_ZN4MQTT12handShakeTlsEv>
 808251a:	2800      	cmp	r0, #0
 808251c:	f040 80ca 	bne.w	80826b4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1e4>
                result = (0 == this->handShakeTls() ? 1 : 0);
            }
        }

        if (result) {
            nextMsgId = 1;
 8082520:	2301      	movs	r3, #1
 8082522:	8423      	strh	r3, [r4, #32]

            // Leave room in the buffer for header and variable length field
            uint16_t length = 5;
            const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 8082524:	4b68      	ldr	r3, [pc, #416]	; (80826c8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1f8>)
 8082526:	aa06      	add	r2, sp, #24
 8082528:	6859      	ldr	r1, [r3, #4]
 808252a:	6818      	ldr	r0, [r3, #0]
 808252c:	c203      	stmia	r2!, {r0, r1}
 808252e:	7a19      	ldrb	r1, [r3, #8]
            const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 8082530:	f853 0f09 	ldr.w	r0, [r3, #9]!
        if (result) {
            nextMsgId = 1;

            // Leave room in the buffer for header and variable length field
            uint16_t length = 5;
            const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 8082534:	7011      	strb	r1, [r2, #0]
            const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 8082536:	889a      	ldrh	r2, [r3, #4]
 8082538:	799b      	ldrb	r3, [r3, #6]
 808253a:	f8ad 2014 	strh.w	r2, [sp, #20]
 808253e:	f88d 3016 	strb.w	r3, [sp, #22]

            if (version == MQTT_V311) {
 8082542:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
            nextMsgId = 1;

            // Leave room in the buffer for header and variable length field
            uint16_t length = 5;
            const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
            const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 8082546:	9004      	str	r0, [sp, #16]

            if (version == MQTT_V311) {
 8082548:	2b04      	cmp	r3, #4
 808254a:	69e2      	ldr	r2, [r4, #28]
 808254c:	d131      	bne.n	80825b2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe2>
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 808254e:	9804      	ldr	r0, [sp, #16]
 8082550:	1d53      	adds	r3, r2, #5
 8082552:	f8c2 0005 	str.w	r0, [r2, #5]
 8082556:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 808255a:	f89d 2016 	ldrb.w	r2, [sp, #22]
 808255e:	8099      	strh	r1, [r3, #4]
 8082560:	719a      	strb	r2, [r3, #6]
                length+=sizeof(MQTT_HEADER_V311);
 8082562:	230c      	movs	r3, #12
 8082564:	e02e      	b.n	80825c4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xf4>
                mbedtls_ssl_set_hostname(&ssl, domain);
                result = (0 == this->handShakeTls() ? 1 : 0);
            }

        } else {
            result = tcpClient.connect(this->ip, this->port);
 8082566:	a806      	add	r0, sp, #24
 8082568:	f00f fe3c 	bl	80921e4 <_ZN9IPAddressC1EPKh>
 808256c:	462b      	mov	r3, r5
 808256e:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 8082572:	a906      	add	r1, sp, #24
 8082574:	4620      	mov	r0, r4
 8082576:	f00f fa23 	bl	80919c0 <_ZN9TCPClient7connectE9IPAddresstm>
            if (tls) {
 808257a:	f894 3681 	ldrb.w	r3, [r4, #1665]	; 0x681
 808257e:	b1ab      	cbz	r3, 80825ac <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
                char buffername[16];
                sprintf(buffername, "%d.%d.%d.%d", ip[0], ip[1], ip[2], ip[3]);
 8082580:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8082582:	78c8      	ldrb	r0, [r1, #3]
 8082584:	784b      	ldrb	r3, [r1, #1]
 8082586:	780a      	ldrb	r2, [r1, #0]
 8082588:	9001      	str	r0, [sp, #4]
 808258a:	7889      	ldrb	r1, [r1, #2]
 808258c:	a806      	add	r0, sp, #24
 808258e:	9100      	str	r1, [sp, #0]
 8082590:	494e      	ldr	r1, [pc, #312]	; (80826cc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1fc>)
 8082592:	f00e ffe3 	bl	809155c <sprintf>
                mbedtls_ssl_set_hostname(&ssl, buffername);
 8082596:	a906      	add	r1, sp, #24
 8082598:	f504 7034 	add.w	r0, r4, #720	; 0x2d0
 808259c:	f008 faa2 	bl	808aae4 <mbedtls_ssl_set_hostname>
                result = (0 == this->handShakeTls() ? 1 : 0);
 80825a0:	4620      	mov	r0, r4
 80825a2:	f7ff ff5f 	bl	8082464 <_ZN4MQTT12handShakeTlsEv>
 80825a6:	fab0 f080 	clz	r0, r0
 80825aa:	0940      	lsrs	r0, r0, #5
            }
        }

        if (result) {
 80825ac:	2800      	cmp	r0, #0
 80825ae:	d1b7      	bne.n	8082520 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x50>
 80825b0:	e080      	b.n	80826b4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1e4>

            if (version == MQTT_V311) {
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
                length+=sizeof(MQTT_HEADER_V311);
            } else {
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80825b2:	ab06      	add	r3, sp, #24
 80825b4:	cb03      	ldmia	r3!, {r0, r1}
 80825b6:	f8c2 0005 	str.w	r0, [r2, #5]
 80825ba:	f8c2 1009 	str.w	r1, [r2, #9]
 80825be:	781b      	ldrb	r3, [r3, #0]
 80825c0:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
 80825c2:	230e      	movs	r3, #14
            }

            uint8_t v = 0;
            if (willTopic) {
 80825c4:	f1b8 0f00 	cmp.w	r8, #0
 80825c8:	d00a      	beq.n	80825e0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x110>
                v = 0x06|(willQos<<3)|(willRetain<<5);
 80825ca:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 80825ce:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
 80825d2:	0152      	lsls	r2, r2, #5
 80825d4:	f042 0206 	orr.w	r2, r2, #6
 80825d8:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80825dc:	b2d2      	uxtb	r2, r2
 80825de:	e000      	b.n	80825e2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x112>
            } else {
                v = 0x02;
 80825e0:	2202      	movs	r2, #2
            }

            if (!cleanSession) {
 80825e2:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
 80825e6:	b909      	cbnz	r1, 80825ec <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x11c>
              v = v&0xfd;
 80825e8:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
            }

            if(user != NULL) {
 80825ec:	b12f      	cbz	r7, 80825fa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x12a>
                v = v|0x80;

                if(pass != NULL) {
 80825ee:	b916      	cbnz	r6, 80825f6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x126>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
 80825f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80825f4:	e001      	b.n	80825fa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x12a>

                if(pass != NULL) {
                    v = v|(0x80>>1);
 80825f6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
                }
            }

            buffer[length++] = v;
 80825fa:	69e1      	ldr	r1, [r4, #28]

            buffer[length++] = ((this->keepalive) >> 8);
 80825fc:	1c58      	adds	r0, r3, #1
                if(pass != NULL) {
                    v = v|(0x80>>1);
                }
            }

            buffer[length++] = v;
 80825fe:	54ca      	strb	r2, [r1, r3]

            buffer[length++] = ((this->keepalive) >> 8);
 8082600:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8082602:	69e1      	ldr	r1, [r4, #28]
 8082604:	1212      	asrs	r2, r2, #8
 8082606:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
 8082608:	69e1      	ldr	r1, [r4, #28]
 808260a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 808260c:	1c9a      	adds	r2, r3, #2
 808260e:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
 8082610:	3303      	adds	r3, #3
 8082612:	69e2      	ldr	r2, [r4, #28]
 8082614:	4649      	mov	r1, r9
 8082616:	4620      	mov	r0, r4
 8082618:	f7ff fbc2 	bl	8081da0 <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
 808261c:	f1b8 0f00 	cmp.w	r8, #0
 8082620:	d00b      	beq.n	808263a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x16a>
                length = writeString(willTopic, buffer, length);
 8082622:	4603      	mov	r3, r0
 8082624:	69e2      	ldr	r2, [r4, #28]
 8082626:	4641      	mov	r1, r8
 8082628:	4620      	mov	r0, r4
 808262a:	f7ff fbb9 	bl	8081da0 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
 808262e:	69e2      	ldr	r2, [r4, #28]
 8082630:	4603      	mov	r3, r0
 8082632:	9915      	ldr	r1, [sp, #84]	; 0x54
 8082634:	4620      	mov	r0, r4
 8082636:	f7ff fbb3 	bl	8081da0 <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
 808263a:	b167      	cbz	r7, 8082656 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x186>
                length = writeString(user,buffer,length);
 808263c:	4603      	mov	r3, r0
 808263e:	69e2      	ldr	r2, [r4, #28]
 8082640:	4639      	mov	r1, r7
 8082642:	4620      	mov	r0, r4
 8082644:	f7ff fbac 	bl	8081da0 <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
 8082648:	b12e      	cbz	r6, 8082656 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x186>
                    length = writeString(pass,buffer,length);
 808264a:	4603      	mov	r3, r0
 808264c:	69e2      	ldr	r2, [r4, #28]
 808264e:	4631      	mov	r1, r6
 8082650:	4620      	mov	r0, r4
 8082652:	f7ff fba5 	bl	8081da0 <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
 8082656:	1f43      	subs	r3, r0, #5
 8082658:	b29b      	uxth	r3, r3
 808265a:	69e2      	ldr	r2, [r4, #28]
 808265c:	2110      	movs	r1, #16
 808265e:	4620      	mov	r0, r4
 8082660:	f7ff fbc5 	bl	8081dee <_ZN4MQTT5writeEhPht>
 8082664:	f00e fda2 	bl	80911ac <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 8082668:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
 808266c:	6260      	str	r0, [r4, #36]	; 0x24
 808266e:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!available()) {
 8082670:	4620      	mov	r0, r4
 8082672:	f7ff fd6b 	bl	808214c <_ZN4MQTT9availableEv>
 8082676:	4606      	mov	r6, r0
 8082678:	b958      	cbnz	r0, 8082692 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c2>
 808267a:	f00e fd97 	bl	80911ac <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 808267e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8082680:	1ac0      	subs	r0, r0, r3
 8082682:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8082684:	437b      	muls	r3, r7
 8082686:	4298      	cmp	r0, r3
 8082688:	d9f2      	bls.n	8082670 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a0>
                    debug_tls("MQTT connection timeout.\n");
                    disconnect();
 808268a:	4620      	mov	r0, r4
 808268c:	f7ff fbe1 	bl	8081e52 <_ZN4MQTT10disconnectEv>
 8082690:	e00e      	b.n	80826b0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1e0>
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
 8082692:	f10d 010f 	add.w	r1, sp, #15
 8082696:	4620      	mov	r0, r4
 8082698:	f7ff fc33 	bl	8081f02 <_ZN4MQTT10readPacketEPh>

            if (len == 4 && buffer[3] == 0) {
 808269c:	2804      	cmp	r0, #4
 808269e:	d109      	bne.n	80826b4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1e4>
 80826a0:	69e3      	ldr	r3, [r4, #28]
 80826a2:	78df      	ldrb	r7, [r3, #3]
 80826a4:	b937      	cbnz	r7, 80826b4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1e4>
 80826a6:	f00e fd81 	bl	80911ac <HAL_Timer_Get_Milli_Seconds>
                lastInActivity = millis();
                pingOutstanding = false;
 80826aa:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4 && buffer[3] == 0) {
                lastInActivity = millis();
 80826ae:	62a0      	str	r0, [r4, #40]	; 0x28
            while (!available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
                    debug_tls("MQTT connection timeout.\n");
                    disconnect();
                    return false;
 80826b0:	4635      	mov	r5, r6
 80826b2:	e004      	b.n	80826be <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ee>
                pingOutstanding = false;
                debug_tls("MQTT connected.\n");
                return true;
            }
        }
        disconnect();
 80826b4:	4620      	mov	r0, r4
 80826b6:	f7ff fbcc 	bl	8081e52 <_ZN4MQTT10disconnectEv>
 80826ba:	e000      	b.n	80826be <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ee>
    }
    return false;
 80826bc:	2500      	movs	r5, #0
}
 80826be:	4628      	mov	r0, r5
 80826c0:	b00b      	add	sp, #44	; 0x2c
 80826c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80826c6:	bf00      	nop
 80826c8:	08093eac 	.word	0x08093eac
 80826cc:	08093ec1 	.word	0x08093ec1

080826d0 <_ZN4MQTT7connectEPKc>:

void MQTT::addQosCallback(void (*qoscallback)(unsigned int)) {
    this->qoscallback = qoscallback;
}

bool MQTT::connect(const char *id) {
 80826d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id,NULL,NULL,0,QOS0,0,0,true,MQTT_V311);
 80826d2:	2304      	movs	r3, #4
 80826d4:	9305      	str	r3, [sp, #20]
 80826d6:	2301      	movs	r3, #1
 80826d8:	9304      	str	r3, [sp, #16]
 80826da:	2300      	movs	r3, #0
 80826dc:	9303      	str	r3, [sp, #12]
 80826de:	9302      	str	r3, [sp, #8]
 80826e0:	9301      	str	r3, [sp, #4]
 80826e2:	9300      	str	r3, [sp, #0]
 80826e4:	461a      	mov	r2, r3
 80826e6:	f7ff fef3 	bl	80824d0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
 80826ea:	b007      	add	sp, #28
 80826ec:	f85d fb04 	ldr.w	pc, [sp], #4

080826f0 <_GLOBAL__sub_I__ZN4MQTTC2Ev>:
 80826f0:	f00e bcdc 	b.w	80910ac <HAL_Pin_Map>

080826f4 <mbedtls_sha256_init>:
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 80826f4:	226c      	movs	r2, #108	; 0x6c
 80826f6:	2100      	movs	r1, #0
 80826f8:	f011 ba67 	b.w	8093bca <memset>

080826fc <mbedtls_sha256_free>:
}

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
    if( ctx == NULL )
 80826fc:	b138      	cbz	r0, 808270e <mbedtls_sha256_free+0x12>
 80826fe:	f100 026c 	add.w	r2, r0, #108	; 0x6c

#if !defined(MBEDTLS_SHA256_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8082702:	2300      	movs	r3, #0
 8082704:	4290      	cmp	r0, r2
 8082706:	d002      	beq.n	808270e <mbedtls_sha256_free+0x12>
 8082708:	7003      	strb	r3, [r0, #0]
 808270a:	3001      	adds	r0, #1
 808270c:	e7fa      	b.n	8082704 <mbedtls_sha256_free+0x8>
 808270e:	4770      	bx	lr

08082710 <mbedtls_sha256_clone>:
    mbedtls_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
}

void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
                           const mbedtls_sha256_context *src )
{
 8082710:	b508      	push	{r3, lr}
    *dst = *src;
 8082712:	226c      	movs	r2, #108	; 0x6c
 8082714:	f011 fa33 	bl	8093b7e <memcpy>
 8082718:	bd08      	pop	{r3, pc}
	...

0808271c <mbedtls_sha256_starts_ret>:
/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    ctx->total[0] = 0;
 808271c:	2300      	movs	r3, #0
 808271e:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
 8082720:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
 8082722:	b9a1      	cbnz	r1, 808274e <mbedtls_sha256_starts_ret+0x32>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
 8082724:	4b18      	ldr	r3, [pc, #96]	; (8082788 <mbedtls_sha256_starts_ret+0x6c>)
 8082726:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
 8082728:	4b18      	ldr	r3, [pc, #96]	; (808278c <mbedtls_sha256_starts_ret+0x70>)
 808272a:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
 808272c:	4b18      	ldr	r3, [pc, #96]	; (8082790 <mbedtls_sha256_starts_ret+0x74>)
 808272e:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
 8082730:	4b18      	ldr	r3, [pc, #96]	; (8082794 <mbedtls_sha256_starts_ret+0x78>)
 8082732:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0x510E527F;
 8082734:	4b18      	ldr	r3, [pc, #96]	; (8082798 <mbedtls_sha256_starts_ret+0x7c>)
 8082736:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x9B05688C;
 8082738:	4b18      	ldr	r3, [pc, #96]	; (808279c <mbedtls_sha256_starts_ret+0x80>)
 808273a:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
 808273c:	4b18      	ldr	r3, [pc, #96]	; (80827a0 <mbedtls_sha256_starts_ret+0x84>)
 808273e:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
 8082740:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8082744:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8082748:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 808274c:	e018      	b.n	8082780 <mbedtls_sha256_starts_ret+0x64>
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
 808274e:	4b15      	ldr	r3, [pc, #84]	; (80827a4 <mbedtls_sha256_starts_ret+0x88>)
 8082750:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0x367CD507;
 8082752:	4b15      	ldr	r3, [pc, #84]	; (80827a8 <mbedtls_sha256_starts_ret+0x8c>)
 8082754:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3070DD17;
 8082756:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
 808275a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 808275e:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8082762:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xF70E5939;
 8082764:	4b11      	ldr	r3, [pc, #68]	; (80827ac <mbedtls_sha256_starts_ret+0x90>)
 8082766:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
 8082768:	4b11      	ldr	r3, [pc, #68]	; (80827b0 <mbedtls_sha256_starts_ret+0x94>)
 808276a:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x68581511;
 808276c:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
 8082770:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
 8082774:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 8082778:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
 808277a:	4b0e      	ldr	r3, [pc, #56]	; (80827b4 <mbedtls_sha256_starts_ret+0x98>)
 808277c:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
 808277e:	4b0e      	ldr	r3, [pc, #56]	; (80827b8 <mbedtls_sha256_starts_ret+0x9c>)
 8082780:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
 8082782:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
 8082784:	2000      	movs	r0, #0
 8082786:	4770      	bx	lr
 8082788:	6a09e667 	.word	0x6a09e667
 808278c:	bb67ae85 	.word	0xbb67ae85
 8082790:	3c6ef372 	.word	0x3c6ef372
 8082794:	a54ff53a 	.word	0xa54ff53a
 8082798:	510e527f 	.word	0x510e527f
 808279c:	9b05688c 	.word	0x9b05688c
 80827a0:	1f83d9ab 	.word	0x1f83d9ab
 80827a4:	c1059ed8 	.word	0xc1059ed8
 80827a8:	367cd507 	.word	0x367cd507
 80827ac:	f70e5939 	.word	0xf70e5939
 80827b0:	ffc00b31 	.word	0xffc00b31
 80827b4:	64f98fa7 	.word	0x64f98fa7
 80827b8:	befa4fa4 	.word	0xbefa4fa4

080827bc <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
 80827bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80827c0:	1d03      	adds	r3, r0, #4
 80827c2:	b0cf      	sub	sp, #316	; 0x13c
 80827c4:	9305      	str	r3, [sp, #20]
 80827c6:	461a      	mov	r2, r3
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
 80827c8:	2300      	movs	r3, #0
        A[i] = ctx->state[i];
 80827ca:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80827ce:	ac06      	add	r4, sp, #24
 80827d0:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
{
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
 80827d4:	3301      	adds	r3, #1
 80827d6:	2b08      	cmp	r3, #8
 80827d8:	d1f7      	bne.n	80827ca <mbedtls_internal_sha256_process+0xe>
 80827da:	4608      	mov	r0, r1
 80827dc:	2200      	movs	r2, #0
        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );
 80827de:	ac0e      	add	r4, sp, #56	; 0x38
 80827e0:	f811 5022 	ldrb.w	r5, [r1, r2, lsl #2]
 80827e4:	78c3      	ldrb	r3, [r0, #3]
 80827e6:	3004      	adds	r0, #4
 80827e8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80827ec:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 80827f0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80827f4:	f810 5c02 	ldrb.w	r5, [r0, #-2]
 80827f8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80827fc:	f844 3022 	str.w	r3, [r4, r2, lsl #2]

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
 8082800:	3201      	adds	r2, #1
 8082802:	2a10      	cmp	r2, #16
 8082804:	d1ec      	bne.n	80827e0 <mbedtls_internal_sha256_process+0x24>
 8082806:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8082808:	4c9f      	ldr	r4, [pc, #636]	; (8082a88 <mbedtls_internal_sha256_process+0x2cc>)
 808280a:	9300      	str	r3, [sp, #0]
 808280c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 808280e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8082810:	9f08      	ldr	r7, [sp, #32]
 8082812:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8082816:	f8dd e01c 	ldr.w	lr, [sp, #28]
 808281a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 808281e:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8082822:	ad0f      	add	r5, sp, #60	; 0x3c
 8082824:	f104 0a40 	add.w	sl, r4, #64	; 0x40
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 8082828:	f854 0c04 	ldr.w	r0, [r4, #-4]
 808282c:	ea4f 22f8 	mov.w	r2, r8, ror #11
 8082830:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8082834:	ea86 0c0b 	eor.w	ip, r6, fp
 8082838:	ea82 12b8 	eor.w	r2, r2, r8, ror #6
 808283c:	4401      	add	r1, r0
 808283e:	ea82 6278 	eor.w	r2, r2, r8, ror #25
 8082842:	ea0c 0c08 	and.w	ip, ip, r8
 8082846:	ea8c 0c06 	eor.w	ip, ip, r6
 808284a:	440a      	add	r2, r1
 808284c:	9900      	ldr	r1, [sp, #0]
 808284e:	4462      	add	r2, ip
 8082850:	ea4f 3079 	mov.w	r0, r9, ror #13
 8082854:	ea4e 0c09 	orr.w	ip, lr, r9
 8082858:	440a      	add	r2, r1
 808285a:	ea0c 0c07 	and.w	ip, ip, r7
 808285e:	ea0e 0109 	and.w	r1, lr, r9
 8082862:	ea80 00b9 	eor.w	r0, r0, r9, ror #2
 8082866:	ea4c 0101 	orr.w	r1, ip, r1
 808286a:	ea80 50b9 	eor.w	r0, r0, r9, ror #22
 808286e:	4408      	add	r0, r1
 8082870:	4413      	add	r3, r2
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8082872:	6829      	ldr	r1, [r5, #0]
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 8082874:	4402      	add	r2, r0
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8082876:	6820      	ldr	r0, [r4, #0]
 8082878:	ea8b 0c08 	eor.w	ip, fp, r8
 808287c:	4401      	add	r1, r0
 808287e:	ea0c 0c03 	and.w	ip, ip, r3
 8082882:	ea4f 20f3 	mov.w	r0, r3, ror #11
 8082886:	ea8c 0c0b 	eor.w	ip, ip, fp
 808288a:	440e      	add	r6, r1
 808288c:	ea80 10b3 	eor.w	r0, r0, r3, ror #6
 8082890:	eb06 010c 	add.w	r1, r6, ip
 8082894:	ea80 6073 	eor.w	r0, r0, r3, ror #25
 8082898:	180e      	adds	r6, r1, r0
 808289a:	eb06 0c07 	add.w	ip, r6, r7
 808289e:	ea42 0009 	orr.w	r0, r2, r9
 80828a2:	ea4f 3772 	mov.w	r7, r2, ror #13
 80828a6:	ea02 0109 	and.w	r1, r2, r9
 80828aa:	ea87 07b2 	eor.w	r7, r7, r2, ror #2
 80828ae:	ea00 000e 	and.w	r0, r0, lr
 80828b2:	ea87 57b2 	eor.w	r7, r7, r2, ror #22
 80828b6:	4308      	orrs	r0, r1
 80828b8:	4438      	add	r0, r7
 80828ba:	4430      	add	r0, r6
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 80828bc:	6869      	ldr	r1, [r5, #4]
 80828be:	6866      	ldr	r6, [r4, #4]
 80828c0:	ea83 0708 	eor.w	r7, r3, r8
 80828c4:	440e      	add	r6, r1
 80828c6:	ea07 070c 	and.w	r7, r7, ip
 80828ca:	ea4f 21fc 	mov.w	r1, ip, ror #11
 80828ce:	ea87 0708 	eor.w	r7, r7, r8
 80828d2:	44b3      	add	fp, r6
 80828d4:	ea81 11bc 	eor.w	r1, r1, ip, ror #6
 80828d8:	eb0b 0607 	add.w	r6, fp, r7
 80828dc:	ea81 617c 	eor.w	r1, r1, ip, ror #25
 80828e0:	eb06 0b01 	add.w	fp, r6, r1
 80828e4:	ea4f 3770 	mov.w	r7, r0, ror #13
 80828e8:	ea42 0100 	orr.w	r1, r2, r0
 80828ec:	ea02 0600 	and.w	r6, r2, r0
 80828f0:	ea87 07b0 	eor.w	r7, r7, r0, ror #2
 80828f4:	ea01 0109 	and.w	r1, r1, r9
 80828f8:	ea87 57b0 	eor.w	r7, r7, r0, ror #22
 80828fc:	4331      	orrs	r1, r6
 80828fe:	4439      	add	r1, r7
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 8082900:	68ae      	ldr	r6, [r5, #8]
 8082902:	68a7      	ldr	r7, [r4, #8]

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 8082904:	4459      	add	r1, fp
 8082906:	44de      	add	lr, fp
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 8082908:	443e      	add	r6, r7
 808290a:	ea83 0b0c 	eor.w	fp, r3, ip
 808290e:	44b0      	add	r8, r6
 8082910:	ea0b 0b0e 	and.w	fp, fp, lr
 8082914:	ea4f 26fe 	mov.w	r6, lr, ror #11
 8082918:	ea8b 0b03 	eor.w	fp, fp, r3
 808291c:	ea86 16be 	eor.w	r6, r6, lr, ror #6
 8082920:	44d8      	add	r8, fp
 8082922:	ea86 667e 	eor.w	r6, r6, lr, ror #25
 8082926:	4446      	add	r6, r8
 8082928:	ea4f 3b71 	mov.w	fp, r1, ror #13
 808292c:	ea40 0801 	orr.w	r8, r0, r1
 8082930:	ea00 0701 	and.w	r7, r0, r1
 8082934:	ea8b 0bb1 	eor.w	fp, fp, r1, ror #2
 8082938:	ea08 0802 	and.w	r8, r8, r2
 808293c:	ea8b 5bb1 	eor.w	fp, fp, r1, ror #22
 8082940:	ea48 0807 	orr.w	r8, r8, r7
 8082944:	44d8      	add	r8, fp
 8082946:	44b0      	add	r8, r6
 8082948:	44b1      	add	r9, r6
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 808294a:	68e7      	ldr	r7, [r4, #12]
 808294c:	68ee      	ldr	r6, [r5, #12]
 808294e:	ea8c 0b0e 	eor.w	fp, ip, lr
 8082952:	4437      	add	r7, r6
 8082954:	ea0b 0b09 	and.w	fp, fp, r9
 8082958:	ea8b 0b0c 	eor.w	fp, fp, ip
 808295c:	443b      	add	r3, r7
 808295e:	eb03 070b 	add.w	r7, r3, fp
 8082962:	ea4f 23f9 	mov.w	r3, r9, ror #11
 8082966:	ea83 13b9 	eor.w	r3, r3, r9, ror #6
 808296a:	ea83 6379 	eor.w	r3, r3, r9, ror #25
 808296e:	18fe      	adds	r6, r7, r3
 8082970:	1993      	adds	r3, r2, r6
 8082972:	9300      	str	r3, [sp, #0]
 8082974:	ea4f 3778 	mov.w	r7, r8, ror #13
 8082978:	ea41 0308 	orr.w	r3, r1, r8
 808297c:	ea01 0208 	and.w	r2, r1, r8
 8082980:	ea87 07b8 	eor.w	r7, r7, r8, ror #2
 8082984:	4003      	ands	r3, r0
 8082986:	ea87 57b8 	eor.w	r7, r7, r8, ror #22
 808298a:	4313      	orrs	r3, r2
 808298c:	443b      	add	r3, r7
 808298e:	4433      	add	r3, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 8082990:	692a      	ldr	r2, [r5, #16]
 8082992:	6926      	ldr	r6, [r4, #16]
 8082994:	ea4f 3b73 	mov.w	fp, r3, ror #13
 8082998:	4432      	add	r2, r6
 808299a:	4494      	add	ip, r2
 808299c:	9a00      	ldr	r2, [sp, #0]
 808299e:	ea8e 0609 	eor.w	r6, lr, r9
 80829a2:	4016      	ands	r6, r2
 80829a4:	ea4f 27f2 	mov.w	r7, r2, ror #11
 80829a8:	ea86 060e 	eor.w	r6, r6, lr
 80829ac:	ea87 17b2 	eor.w	r7, r7, r2, ror #6
 80829b0:	44b4      	add	ip, r6
 80829b2:	ea87 6772 	eor.w	r7, r7, r2, ror #25
 80829b6:	eb0c 0207 	add.w	r2, ip, r7
 80829ba:	ea48 0703 	orr.w	r7, r8, r3
 80829be:	1886      	adds	r6, r0, r2
 80829c0:	400f      	ands	r7, r1
 80829c2:	ea08 0003 	and.w	r0, r8, r3
 80829c6:	ea8b 0bb3 	eor.w	fp, fp, r3, ror #2
 80829ca:	ea8b 5bb3 	eor.w	fp, fp, r3, ror #22
 80829ce:	4307      	orrs	r7, r0
 80829d0:	445f      	add	r7, fp
 80829d2:	4417      	add	r7, r2
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 80829d4:	6960      	ldr	r0, [r4, #20]
 80829d6:	696a      	ldr	r2, [r5, #20]
 80829d8:	3420      	adds	r4, #32
 80829da:	4410      	add	r0, r2
 80829dc:	9a00      	ldr	r2, [sp, #0]
 80829de:	4486      	add	lr, r0
 80829e0:	ea89 0c02 	eor.w	ip, r9, r2
 80829e4:	ea0c 0c06 	and.w	ip, ip, r6
 80829e8:	ea8c 0c09 	eor.w	ip, ip, r9
 80829ec:	eb0e 000c 	add.w	r0, lr, ip
 80829f0:	ea4f 2ef6 	mov.w	lr, r6, ror #11
 80829f4:	ea8e 1eb6 	eor.w	lr, lr, r6, ror #6
 80829f8:	ea8e 6e76 	eor.w	lr, lr, r6, ror #25
 80829fc:	eb00 020e 	add.w	r2, r0, lr
 8082a00:	ea4f 3077 	mov.w	r0, r7, ror #13
 8082a04:	ea43 0e07 	orr.w	lr, r3, r7
 8082a08:	eb01 0b02 	add.w	fp, r1, r2
 8082a0c:	ea0e 0e08 	and.w	lr, lr, r8
 8082a10:	ea03 0107 	and.w	r1, r3, r7
 8082a14:	ea80 00b7 	eor.w	r0, r0, r7, ror #2
 8082a18:	ea80 50b7 	eor.w	r0, r0, r7, ror #22
 8082a1c:	ea4e 0e01 	orr.w	lr, lr, r1
 8082a20:	4486      	add	lr, r0
 8082a22:	4496      	add	lr, r2
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 8082a24:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8082a28:	69aa      	ldr	r2, [r5, #24]
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
 8082a2a:	45a2      	cmp	sl, r4
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 8082a2c:	4411      	add	r1, r2
 8082a2e:	9a00      	ldr	r2, [sp, #0]
 8082a30:	4489      	add	r9, r1
 8082a32:	ea82 0006 	eor.w	r0, r2, r6
 8082a36:	ea00 000b 	and.w	r0, r0, fp
 8082a3a:	ea80 0002 	eor.w	r0, r0, r2
 8082a3e:	eb09 0100 	add.w	r1, r9, r0
 8082a42:	ea4f 29fb 	mov.w	r9, fp, ror #11
 8082a46:	ea89 19bb 	eor.w	r9, r9, fp, ror #6
 8082a4a:	ea89 697b 	eor.w	r9, r9, fp, ror #25
 8082a4e:	eb01 0209 	add.w	r2, r1, r9
 8082a52:	ea4f 307e 	mov.w	r0, lr, ror #13
 8082a56:	ea47 090e 	orr.w	r9, r7, lr
 8082a5a:	ea80 00be 	eor.w	r0, r0, lr, ror #2
 8082a5e:	ea09 0903 	and.w	r9, r9, r3
 8082a62:	ea07 010e 	and.w	r1, r7, lr
 8082a66:	ea80 50be 	eor.w	r0, r0, lr, ror #22
 8082a6a:	ea49 0901 	orr.w	r9, r9, r1
 8082a6e:	4481      	add	r9, r0
 8082a70:	4490      	add	r8, r2
 8082a72:	4491      	add	r9, r2
 8082a74:	f105 0520 	add.w	r5, r5, #32
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
 8082a78:	f47f aed6 	bne.w	8082828 <mbedtls_internal_sha256_process+0x6c>
 8082a7c:	2200      	movs	r2, #0
 8082a7e:	f8df a00c 	ldr.w	sl, [pc, #12]	; 8082a8c <mbedtls_internal_sha256_process+0x2d0>
 8082a82:	ac0e      	add	r4, sp, #56	; 0x38
 8082a84:	9204      	str	r2, [sp, #16]
 8082a86:	e003      	b.n	8082a90 <mbedtls_internal_sha256_process+0x2d4>
 8082a88:	08093ed4 	.word	0x08093ed4
 8082a8c:	08093ed0 	.word	0x08093ed0
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 8082a90:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8082a92:	6860      	ldr	r0, [r4, #4]
 8082a94:	ea4f 45f2 	mov.w	r5, r2, ror #19
 8082a98:	ea85 4572 	eor.w	r5, r5, r2, ror #17
 8082a9c:	ea85 2592 	eor.w	r5, r5, r2, lsr #10
 8082aa0:	9a04      	ldr	r2, [sp, #16]
 8082aa2:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 8082aa6:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 8082aaa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8082aac:	ea4f 4cb0 	mov.w	ip, r0, ror #18
 8082ab0:	440a      	add	r2, r1
 8082ab2:	ea8c 1cf0 	eor.w	ip, ip, r0, ror #7
 8082ab6:	ea4f 21f8 	mov.w	r1, r8, ror #11
 8082aba:	ea8c 0cd0 	eor.w	ip, ip, r0, lsr #3
 8082abe:	ea81 11b8 	eor.w	r1, r1, r8, ror #6
 8082ac2:	4415      	add	r5, r2
 8082ac4:	eb05 020c 	add.w	r2, r5, ip
 8082ac8:	ea81 6578 	eor.w	r5, r1, r8, ror #25
 8082acc:	ea86 010b 	eor.w	r1, r6, fp
 8082ad0:	ea01 0108 	and.w	r1, r1, r8
 8082ad4:	9203      	str	r2, [sp, #12]
 8082ad6:	ea81 0206 	eor.w	r2, r1, r6
 8082ada:	18a9      	adds	r1, r5, r2
 8082adc:	f8da 2040 	ldr.w	r2, [sl, #64]	; 0x40
 8082ae0:	ea4e 0509 	orr.w	r5, lr, r9
 8082ae4:	440a      	add	r2, r1
 8082ae6:	9903      	ldr	r1, [sp, #12]
 8082ae8:	403d      	ands	r5, r7
 8082aea:	6421      	str	r1, [r4, #64]	; 0x40
 8082aec:	440a      	add	r2, r1
 8082aee:	9900      	ldr	r1, [sp, #0]
 8082af0:	f10a 0a20 	add.w	sl, sl, #32
 8082af4:	440a      	add	r2, r1
 8082af6:	18d3      	adds	r3, r2, r3
 8082af8:	ea4f 3179 	mov.w	r1, r9, ror #13
 8082afc:	9300      	str	r3, [sp, #0]
 8082afe:	ea81 01b9 	eor.w	r1, r1, r9, ror #2
 8082b02:	ea0e 0309 	and.w	r3, lr, r9
 8082b06:	ea81 51b9 	eor.w	r1, r1, r9, ror #22
 8082b0a:	432b      	orrs	r3, r5
 8082b0c:	440b      	add	r3, r1
 8082b0e:	441a      	add	r2, r3
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 8082b10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8082b12:	68a5      	ldr	r5, [r4, #8]
 8082b14:	ea4f 41f3 	mov.w	r1, r3, ror #19
 8082b18:	ea81 4173 	eor.w	r1, r1, r3, ror #17
 8082b1c:	ea81 2193 	eor.w	r1, r1, r3, lsr #10
 8082b20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8082b22:	3420      	adds	r4, #32
 8082b24:	4403      	add	r3, r0
 8082b26:	4419      	add	r1, r3
 8082b28:	ea4f 43b5 	mov.w	r3, r5, ror #18
 8082b2c:	ea83 13f5 	eor.w	r3, r3, r5, ror #7
 8082b30:	ea83 0cd5 	eor.w	ip, r3, r5, lsr #3
 8082b34:	eb01 030c 	add.w	r3, r1, ip
 8082b38:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
 8082b3c:	9900      	ldr	r1, [sp, #0]
 8082b3e:	ea8b 0c08 	eor.w	ip, fp, r8
 8082b42:	4430      	add	r0, r6
 8082b44:	ea0c 0c01 	and.w	ip, ip, r1
 8082b48:	ea8c 0c0b 	eor.w	ip, ip, fp
 8082b4c:	18c1      	adds	r1, r0, r3
 8082b4e:	448c      	add	ip, r1
 8082b50:	9900      	ldr	r1, [sp, #0]
 8082b52:	6263      	str	r3, [r4, #36]	; 0x24
 8082b54:	ea4f 20f1 	mov.w	r0, r1, ror #11
 8082b58:	ea80 10b1 	eor.w	r0, r0, r1, ror #6
 8082b5c:	ea80 6071 	eor.w	r0, r0, r1, ror #25
 8082b60:	eb00 010c 	add.w	r1, r0, ip
 8082b64:	19c8      	adds	r0, r1, r7
 8082b66:	9001      	str	r0, [sp, #4]
 8082b68:	ea4f 3c72 	mov.w	ip, r2, ror #13
 8082b6c:	ea42 0009 	orr.w	r0, r2, r9
 8082b70:	ea02 0709 	and.w	r7, r2, r9
 8082b74:	ea8c 0cb2 	eor.w	ip, ip, r2, ror #2
 8082b78:	ea00 000e 	and.w	r0, r0, lr
 8082b7c:	ea8c 5cb2 	eor.w	ip, ip, r2, ror #22
 8082b80:	4338      	orrs	r0, r7
 8082b82:	4460      	add	r0, ip
 8082b84:	4408      	add	r0, r1
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 8082b86:	9903      	ldr	r1, [sp, #12]
 8082b88:	f854 7c14 	ldr.w	r7, [r4, #-20]
 8082b8c:	ea4f 46f1 	mov.w	r6, r1, ror #19
 8082b90:	ea86 4671 	eor.w	r6, r6, r1, ror #17
 8082b94:	ea86 2691 	eor.w	r6, r6, r1, lsr #10
 8082b98:	68e1      	ldr	r1, [r4, #12]
 8082b9a:	ea4f 4cb7 	mov.w	ip, r7, ror #18
 8082b9e:	4429      	add	r1, r5
 8082ba0:	440e      	add	r6, r1
 8082ba2:	ea8c 1cf7 	eor.w	ip, ip, r7, ror #7
 8082ba6:	9900      	ldr	r1, [sp, #0]
 8082ba8:	ea8c 0cd7 	eor.w	ip, ip, r7, lsr #3
 8082bac:	4466      	add	r6, ip
 8082bae:	ea81 0c08 	eor.w	ip, r1, r8
 8082bb2:	9901      	ldr	r1, [sp, #4]
 8082bb4:	62a6      	str	r6, [r4, #40]	; 0x28
 8082bb6:	ea0c 0c01 	and.w	ip, ip, r1
 8082bba:	f8da 1028 	ldr.w	r1, [sl, #40]	; 0x28
 8082bbe:	ea8c 0c08 	eor.w	ip, ip, r8
 8082bc2:	4459      	add	r1, fp
 8082bc4:	198d      	adds	r5, r1, r6
 8082bc6:	9901      	ldr	r1, [sp, #4]
 8082bc8:	44ac      	add	ip, r5
 8082bca:	9d01      	ldr	r5, [sp, #4]
 8082bcc:	ea4f 21f1 	mov.w	r1, r1, ror #11
 8082bd0:	ea81 11b5 	eor.w	r1, r1, r5, ror #6
 8082bd4:	ea81 6175 	eor.w	r1, r1, r5, ror #25
 8082bd8:	eb01 050c 	add.w	r5, r1, ip
 8082bdc:	ea42 0100 	orr.w	r1, r2, r0
 8082be0:	ea4f 3c70 	mov.w	ip, r0, ror #13
 8082be4:	eb05 0b0e 	add.w	fp, r5, lr
 8082be8:	ea8c 0cb0 	eor.w	ip, ip, r0, ror #2
 8082bec:	ea02 0e00 	and.w	lr, r2, r0
 8082bf0:	ea01 0109 	and.w	r1, r1, r9
 8082bf4:	ea8c 5cb0 	eor.w	ip, ip, r0, ror #22
 8082bf8:	ea41 010e 	orr.w	r1, r1, lr
 8082bfc:	4461      	add	r1, ip
 8082bfe:	4429      	add	r1, r5
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8082c00:	ea4f 45f3 	mov.w	r5, r3, ror #19
 8082c04:	ea85 4573 	eor.w	r5, r5, r3, ror #17
 8082c08:	ea85 2393 	eor.w	r3, r5, r3, lsr #10
 8082c0c:	6925      	ldr	r5, [r4, #16]
 8082c0e:	f854 cc10 	ldr.w	ip, [r4, #-16]
 8082c12:	442f      	add	r7, r5
 8082c14:	443b      	add	r3, r7
 8082c16:	ea4f 47bc 	mov.w	r7, ip, ror #18
 8082c1a:	ea87 17fc 	eor.w	r7, r7, ip, ror #7
 8082c1e:	ea87 0edc 	eor.w	lr, r7, ip, lsr #3
 8082c22:	eb03 070e 	add.w	r7, r3, lr
 8082c26:	e89d 0028 	ldmia.w	sp, {r3, r5}
 8082c2a:	405d      	eors	r5, r3
 8082c2c:	ea05 050b 	and.w	r5, r5, fp
 8082c30:	405d      	eors	r5, r3
 8082c32:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
 8082c36:	ea4f 3e71 	mov.w	lr, r1, ror #13
 8082c3a:	4498      	add	r8, r3
 8082c3c:	44b8      	add	r8, r7
 8082c3e:	4445      	add	r5, r8
 8082c40:	ea4f 28fb 	mov.w	r8, fp, ror #11
 8082c44:	ea88 18bb 	eor.w	r8, r8, fp, ror #6
 8082c48:	ea88 687b 	eor.w	r8, r8, fp, ror #25
 8082c4c:	eb08 0305 	add.w	r3, r8, r5
 8082c50:	eb03 0509 	add.w	r5, r3, r9
 8082c54:	ea40 0801 	orr.w	r8, r0, r1
 8082c58:	9502      	str	r5, [sp, #8]
 8082c5a:	ea8e 0eb1 	eor.w	lr, lr, r1, ror #2
 8082c5e:	ea00 0501 	and.w	r5, r0, r1
 8082c62:	ea08 0802 	and.w	r8, r8, r2
 8082c66:	ea8e 5eb1 	eor.w	lr, lr, r1, ror #22
 8082c6a:	ea48 0805 	orr.w	r8, r8, r5
 8082c6e:	44f0      	add	r8, lr
 8082c70:	4498      	add	r8, r3
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8082c72:	ea4f 4ef6 	mov.w	lr, r6, ror #19
 8082c76:	6963      	ldr	r3, [r4, #20]
 8082c78:	ea8e 4e76 	eor.w	lr, lr, r6, ror #17
 8082c7c:	f854 5c0c 	ldr.w	r5, [r4, #-12]
 8082c80:	ea8e 2696 	eor.w	r6, lr, r6, lsr #10
 8082c84:	eb0c 0e03 	add.w	lr, ip, r3
 8082c88:	9b01      	ldr	r3, [sp, #4]
 8082c8a:	4476      	add	r6, lr
 8082c8c:	ea83 0c0b 	eor.w	ip, r3, fp
 8082c90:	ea4f 4eb5 	mov.w	lr, r5, ror #18
 8082c94:	9b02      	ldr	r3, [sp, #8]
 8082c96:	ea8e 1ef5 	eor.w	lr, lr, r5, ror #7
 8082c9a:	ea8e 09d5 	eor.w	r9, lr, r5, lsr #3
 8082c9e:	ea0c 0c03 	and.w	ip, ip, r3
 8082ca2:	9b01      	ldr	r3, [sp, #4]
 8082ca4:	eb06 0e09 	add.w	lr, r6, r9
 8082ca8:	f8da 6030 	ldr.w	r6, [sl, #48]	; 0x30
 8082cac:	ea8c 0c03 	eor.w	ip, ip, r3
 8082cb0:	9b00      	ldr	r3, [sp, #0]
 8082cb2:	4476      	add	r6, lr
 8082cb4:	441e      	add	r6, r3
 8082cb6:	9b02      	ldr	r3, [sp, #8]
 8082cb8:	44b4      	add	ip, r6
 8082cba:	9e02      	ldr	r6, [sp, #8]
 8082cbc:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8082cc0:	ea83 13b6 	eor.w	r3, r3, r6, ror #6
 8082cc4:	ea83 6376 	eor.w	r3, r3, r6, ror #25
 8082cc8:	eb03 060c 	add.w	r6, r3, ip
 8082ccc:	1993      	adds	r3, r2, r6
 8082cce:	9300      	str	r3, [sp, #0]
 8082cd0:	ea41 0308 	orr.w	r3, r1, r8
 8082cd4:	ea01 0208 	and.w	r2, r1, r8
 8082cd8:	4003      	ands	r3, r0
 8082cda:	4313      	orrs	r3, r2
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8082cdc:	ea4f 42f7 	mov.w	r2, r7, ror #19
 8082ce0:	ea82 4277 	eor.w	r2, r2, r7, ror #17
    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8082ce4:	62e7      	str	r7, [r4, #44]	; 0x2c
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8082ce6:	ea4f 3c78 	mov.w	ip, r8, ror #13
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8082cea:	ea82 2797 	eor.w	r7, r2, r7, lsr #10
 8082cee:	69a2      	ldr	r2, [r4, #24]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8082cf0:	ea8c 0cb8 	eor.w	ip, ip, r8, ror #2
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8082cf4:	f854 9c08 	ldr.w	r9, [r4, #-8]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8082cf8:	ea8c 5cb8 	eor.w	ip, ip, r8, ror #22
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8082cfc:	4415      	add	r5, r2
 8082cfe:	9a02      	ldr	r2, [sp, #8]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8082d00:	4463      	add	r3, ip
 8082d02:	4433      	add	r3, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8082d04:	442f      	add	r7, r5
 8082d06:	ea8b 0602 	eor.w	r6, fp, r2
 8082d0a:	ea4f 45b9 	mov.w	r5, r9, ror #18
 8082d0e:	9a00      	ldr	r2, [sp, #0]
 8082d10:	ea85 15f9 	eor.w	r5, r5, r9, ror #7
 8082d14:	ea85 05d9 	eor.w	r5, r5, r9, lsr #3
 8082d18:	4016      	ands	r6, r2
 8082d1a:	f8da 2034 	ldr.w	r2, [sl, #52]	; 0x34
 8082d1e:	443d      	add	r5, r7
 8082d20:	9f01      	ldr	r7, [sp, #4]
 8082d22:	442a      	add	r2, r5
 8082d24:	443a      	add	r2, r7
 8082d26:	ea86 060b 	eor.w	r6, r6, fp
 8082d2a:	4416      	add	r6, r2
 8082d2c:	9a00      	ldr	r2, [sp, #0]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8082d2e:	f8c4 e030 	str.w	lr, [r4, #48]	; 0x30
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8082d32:	ea4f 27f2 	mov.w	r7, r2, ror #11
 8082d36:	ea87 17b2 	eor.w	r7, r7, r2, ror #6
 8082d3a:	ea87 6772 	eor.w	r7, r7, r2, ror #25
 8082d3e:	19ba      	adds	r2, r7, r6
 8082d40:	1886      	adds	r6, r0, r2
 8082d42:	ea4f 3073 	mov.w	r0, r3, ror #13
 8082d46:	ea80 00b3 	eor.w	r0, r0, r3, ror #2
 8082d4a:	ea48 0703 	orr.w	r7, r8, r3
 8082d4e:	ea80 5cb3 	eor.w	ip, r0, r3, ror #22
 8082d52:	400f      	ands	r7, r1
 8082d54:	ea08 0003 	and.w	r0, r8, r3
 8082d58:	4307      	orrs	r7, r0
 8082d5a:	4467      	add	r7, ip
 8082d5c:	4417      	add	r7, r2
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 8082d5e:	ea4f 42fe 	mov.w	r2, lr, ror #19
 8082d62:	ea82 427e 	eor.w	r2, r2, lr, ror #17
 8082d66:	ea82 2e9e 	eor.w	lr, r2, lr, lsr #10
 8082d6a:	69e2      	ldr	r2, [r4, #28]
 8082d6c:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8082d70:	4491      	add	r9, r2
 8082d72:	eb0e 0209 	add.w	r2, lr, r9
 8082d76:	ea4f 49b0 	mov.w	r9, r0, ror #18
 8082d7a:	ea89 19f0 	eor.w	r9, r9, r0, ror #7
 8082d7e:	ea89 09d0 	eor.w	r9, r9, r0, lsr #3
 8082d82:	4491      	add	r9, r2
 8082d84:	9a02      	ldr	r2, [sp, #8]
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8082d86:	6365      	str	r5, [r4, #52]	; 0x34
 8082d88:	4696      	mov	lr, r2
 8082d8a:	9a00      	ldr	r2, [sp, #0]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 8082d8c:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
 8082d90:	ea8e 0c02 	eor.w	ip, lr, r2
 8082d94:	f8da 2038 	ldr.w	r2, [sl, #56]	; 0x38
 8082d98:	ea0c 0c06 	and.w	ip, ip, r6
 8082d9c:	ea8c 0c0e 	eor.w	ip, ip, lr
 8082da0:	444a      	add	r2, r9
 8082da2:	ea4f 2ef6 	mov.w	lr, r6, ror #11
 8082da6:	445a      	add	r2, fp
 8082da8:	ea8e 1eb6 	eor.w	lr, lr, r6, ror #6
 8082dac:	4462      	add	r2, ip
 8082dae:	ea8e 6e76 	eor.w	lr, lr, r6, ror #25
 8082db2:	4472      	add	r2, lr
 8082db4:	ea4f 3c77 	mov.w	ip, r7, ror #13
 8082db8:	ea43 0e07 	orr.w	lr, r3, r7
 8082dbc:	eb01 0b02 	add.w	fp, r1, r2
 8082dc0:	ea0e 0e08 	and.w	lr, lr, r8
 8082dc4:	ea03 0107 	and.w	r1, r3, r7
 8082dc8:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 8082dcc:	ea8c 5cb7 	eor.w	ip, ip, r7, ror #22
 8082dd0:	ea4e 0e01 	orr.w	lr, lr, r1
 8082dd4:	44e6      	add	lr, ip
 8082dd6:	4496      	add	lr, r2
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 8082dd8:	ea4f 42f5 	mov.w	r2, r5, ror #19
 8082ddc:	6821      	ldr	r1, [r4, #0]
 8082dde:	ea82 4275 	eor.w	r2, r2, r5, ror #17
 8082de2:	ea82 2595 	eor.w	r5, r2, r5, lsr #10
 8082de6:	9a03      	ldr	r2, [sp, #12]
 8082de8:	ea4f 4cb1 	mov.w	ip, r1, ror #18
 8082dec:	4410      	add	r0, r2
 8082dee:	ea8c 1cf1 	eor.w	ip, ip, r1, ror #7
 8082df2:	f8da 203c 	ldr.w	r2, [sl, #60]	; 0x3c
 8082df6:	4405      	add	r5, r0
 8082df8:	ea8c 01d1 	eor.w	r1, ip, r1, lsr #3
 8082dfc:	440d      	add	r5, r1
 8082dfe:	9902      	ldr	r1, [sp, #8]
 8082e00:	442a      	add	r2, r5
 8082e02:	eb02 0901 	add.w	r9, r2, r1
 8082e06:	9a00      	ldr	r2, [sp, #0]
 8082e08:	ea4f 307e 	mov.w	r0, lr, ror #13
 8082e0c:	ea82 0106 	eor.w	r1, r2, r6
 8082e10:	ea01 010b 	and.w	r1, r1, fp
 8082e14:	4051      	eors	r1, r2
 8082e16:	ea4f 22fb 	mov.w	r2, fp, ror #11
 8082e1a:	ea82 12bb 	eor.w	r2, r2, fp, ror #6
 8082e1e:	4489      	add	r9, r1
 8082e20:	ea82 627b 	eor.w	r2, r2, fp, ror #25
 8082e24:	444a      	add	r2, r9
 8082e26:	ea47 090e 	orr.w	r9, r7, lr
 8082e2a:	ea80 00be 	eor.w	r0, r0, lr, ror #2
 8082e2e:	ea09 0903 	and.w	r9, r9, r3
 8082e32:	ea07 010e 	and.w	r1, r7, lr
 8082e36:	ea80 50be 	eor.w	r0, r0, lr, ror #22
 8082e3a:	ea49 0901 	orr.w	r9, r9, r1
 8082e3e:	4481      	add	r9, r0
 8082e40:	4490      	add	r8, r2
 8082e42:	4491      	add	r9, r2
 8082e44:	9a04      	ldr	r2, [sp, #16]
 8082e46:	63e5      	str	r5, [r4, #60]	; 0x3c
 8082e48:	3208      	adds	r2, #8
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
 8082e4a:	2a30      	cmp	r2, #48	; 0x30
 8082e4c:	9204      	str	r2, [sp, #16]
 8082e4e:	f47f ae1f 	bne.w	8082a90 <mbedtls_internal_sha256_process+0x2d4>
 8082e52:	9a00      	ldr	r2, [sp, #0]
 8082e54:	9309      	str	r3, [sp, #36]	; 0x24
 8082e56:	920d      	str	r2, [sp, #52]	; 0x34
 8082e58:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8082e5c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8082e60:	960c      	str	r6, [sp, #48]	; 0x30
 8082e62:	f8cd 9018 	str.w	r9, [sp, #24]
 8082e66:	f8cd e01c 	str.w	lr, [sp, #28]
 8082e6a:	9708      	str	r7, [sp, #32]
 8082e6c:	2300      	movs	r3, #0
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += A[i];
 8082e6e:	9a05      	ldr	r2, [sp, #20]
 8082e70:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8082e74:	9205      	str	r2, [sp, #20]
 8082e76:	aa06      	add	r2, sp, #24
 8082e78:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 8082e7c:	3301      	adds	r3, #1
        ctx->state[i] += A[i];
 8082e7e:	440a      	add	r2, r1
 8082e80:	9905      	ldr	r1, [sp, #20]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 8082e82:	2b08      	cmp	r3, #8
        ctx->state[i] += A[i];
 8082e84:	600a      	str	r2, [r1, #0]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 8082e86:	d1f2      	bne.n	8082e6e <mbedtls_internal_sha256_process+0x6b2>
        ctx->state[i] += A[i];

    return( 0 );
}
 8082e88:	2000      	movs	r0, #0
 8082e8a:	b04f      	add	sp, #316	; 0x13c
 8082e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08082e90 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 8082e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8082e94:	4604      	mov	r4, r0
 8082e96:	460e      	mov	r6, r1
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
 8082e98:	4615      	mov	r5, r2
 8082e9a:	b382      	cbz	r2, 8082efe <mbedtls_sha256_update_ret+0x6e>
        return( 0 );

    left = ctx->total[0] & 0x3F;
 8082e9c:	6803      	ldr	r3, [r0, #0]
 8082e9e:	f003 003f 	and.w	r0, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 8082ea2:	4413      	add	r3, r2
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
 8082ea4:	429a      	cmp	r2, r3
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 8082ea6:	6023      	str	r3, [r4, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
 8082ea8:	bf82      	ittt	hi
 8082eaa:	6863      	ldrhi	r3, [r4, #4]
 8082eac:	3301      	addhi	r3, #1
 8082eae:	6063      	strhi	r3, [r4, #4]

    if( left && ilen >= fill )
 8082eb0:	b180      	cbz	r0, 8082ed4 <mbedtls_sha256_update_ret+0x44>

    if( ilen == 0 )
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
 8082eb2:	f1c0 0740 	rsb	r7, r0, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
 8082eb6:	42ba      	cmp	r2, r7
 8082eb8:	d31b      	bcc.n	8082ef2 <mbedtls_sha256_update_ret+0x62>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 8082eba:	f104 0828 	add.w	r8, r4, #40	; 0x28
 8082ebe:	463a      	mov	r2, r7
 8082ec0:	4440      	add	r0, r8
 8082ec2:	f010 fe5c 	bl	8093b7e <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8082ec6:	4641      	mov	r1, r8
 8082ec8:	4620      	mov	r0, r4
 8082eca:	f7ff fc77 	bl	80827bc <mbedtls_internal_sha256_process>
 8082ece:	b9b8      	cbnz	r0, 8082f00 <mbedtls_sha256_update_ret+0x70>
            return( ret );

        input += fill;
 8082ed0:	443e      	add	r6, r7
        ilen  -= fill;
 8082ed2:	1bed      	subs	r5, r5, r7
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 8082ed4:	462f      	mov	r7, r5
 8082ed6:	1be9      	subs	r1, r5, r7
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
 8082ed8:	2f3f      	cmp	r7, #63	; 0x3f
 8082eda:	4431      	add	r1, r6
 8082edc:	d905      	bls.n	8082eea <mbedtls_sha256_update_ret+0x5a>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 8082ede:	4620      	mov	r0, r4
 8082ee0:	f7ff fc6c 	bl	80827bc <mbedtls_internal_sha256_process>
 8082ee4:	b960      	cbnz	r0, 8082f00 <mbedtls_sha256_update_ret+0x70>
            return( ret );

        input += 64;
        ilen  -= 64;
 8082ee6:	3f40      	subs	r7, #64	; 0x40
 8082ee8:	e7f5      	b.n	8082ed6 <mbedtls_sha256_update_ret+0x46>
    }

    if( ilen > 0 )
 8082eea:	b147      	cbz	r7, 8082efe <mbedtls_sha256_update_ret+0x6e>
 8082eec:	463d      	mov	r5, r7
 8082eee:	460e      	mov	r6, r1
 8082ef0:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8082ef2:	3428      	adds	r4, #40	; 0x28
 8082ef4:	462a      	mov	r2, r5
 8082ef6:	4631      	mov	r1, r6
 8082ef8:	4420      	add	r0, r4
 8082efa:	f010 fe40 	bl	8093b7e <memcpy>

    return( 0 );
 8082efe:	2000      	movs	r0, #0
}
 8082f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08082f04 <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 8082f04:	b570      	push	{r4, r5, r6, lr}
 8082f06:	4604      	mov	r4, r0
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 8082f08:	6803      	ldr	r3, [r0, #0]

    ctx->buffer[used++] = 0x80;
 8082f0a:	2280      	movs	r2, #128	; 0x80
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 8082f0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
 8082f10:	1c58      	adds	r0, r3, #1

    if( used <= 56 )
 8082f12:	2838      	cmp	r0, #56	; 0x38
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 8082f14:	4423      	add	r3, r4
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 8082f16:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 8082f18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8082f1c:	f104 0628 	add.w	r6, r4, #40	; 0x28

    if( used <= 56 )
 8082f20:	d804      	bhi.n	8082f2c <mbedtls_sha256_finish_ret+0x28>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 8082f22:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 8082f26:	2100      	movs	r1, #0
 8082f28:	4430      	add	r0, r6
 8082f2a:	e00e      	b.n	8082f4a <mbedtls_sha256_finish_ret+0x46>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 8082f2c:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 8082f30:	2100      	movs	r1, #0
 8082f32:	4430      	add	r0, r6
 8082f34:	f010 fe49 	bl	8093bca <memset>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8082f38:	4631      	mov	r1, r6
 8082f3a:	4620      	mov	r0, r4
 8082f3c:	f7ff fc3e 	bl	80827bc <mbedtls_internal_sha256_process>
 8082f40:	2800      	cmp	r0, #0
 8082f42:	d175      	bne.n	8083030 <mbedtls_sha256_finish_ret+0x12c>
            return( ret );

        memset( ctx->buffer, 0, 56 );
 8082f44:	4601      	mov	r1, r0
 8082f46:	4630      	mov	r0, r6
 8082f48:	2238      	movs	r2, #56	; 0x38
 8082f4a:	f010 fe3e 	bl	8093bca <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 8082f4e:	6823      	ldr	r3, [r4, #0]
         | ( ctx->total[1] <<  3 );
 8082f50:	6861      	ldr	r1, [r4, #4]
 8082f52:	0f5a      	lsrs	r2, r3, #29
 8082f54:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 8082f58:	0e11      	lsrs	r1, r2, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 8082f5a:	00db      	lsls	r3, r3, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 8082f5c:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
 8082f60:	0c11      	lsrs	r1, r2, #16
 8082f62:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
 8082f66:	f884 2063 	strb.w	r2, [r4, #99]	; 0x63
 8082f6a:	0a11      	lsrs	r1, r2, #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 8082f6c:	0e1a      	lsrs	r2, r3, #24
 8082f6e:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8082f72:	0c1a      	lsrs	r2, r3, #16
 8082f74:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8082f78:	0a1a      	lsrs	r2, r3, #8
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 8082f7a:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 8082f7e:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8082f82:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8082f86:	4631      	mov	r1, r6
 8082f88:	4620      	mov	r0, r4
 8082f8a:	f7ff fc17 	bl	80827bc <mbedtls_internal_sha256_process>
 8082f8e:	4603      	mov	r3, r0
 8082f90:	2800      	cmp	r0, #0
 8082f92:	d14c      	bne.n	808302e <mbedtls_sha256_finish_ret+0x12a>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 8082f94:	7ae2      	ldrb	r2, [r4, #11]
 8082f96:	702a      	strb	r2, [r5, #0]
 8082f98:	8962      	ldrh	r2, [r4, #10]
 8082f9a:	706a      	strb	r2, [r5, #1]
 8082f9c:	68a2      	ldr	r2, [r4, #8]
 8082f9e:	0a12      	lsrs	r2, r2, #8
 8082fa0:	70aa      	strb	r2, [r5, #2]
 8082fa2:	68a2      	ldr	r2, [r4, #8]
 8082fa4:	70ea      	strb	r2, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 8082fa6:	7be2      	ldrb	r2, [r4, #15]
 8082fa8:	712a      	strb	r2, [r5, #4]
 8082faa:	89e2      	ldrh	r2, [r4, #14]
 8082fac:	716a      	strb	r2, [r5, #5]
 8082fae:	68e2      	ldr	r2, [r4, #12]
 8082fb0:	0a12      	lsrs	r2, r2, #8
 8082fb2:	71aa      	strb	r2, [r5, #6]
 8082fb4:	68e2      	ldr	r2, [r4, #12]
 8082fb6:	71ea      	strb	r2, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 8082fb8:	7ce2      	ldrb	r2, [r4, #19]
 8082fba:	722a      	strb	r2, [r5, #8]
 8082fbc:	8a62      	ldrh	r2, [r4, #18]
 8082fbe:	726a      	strb	r2, [r5, #9]
 8082fc0:	6922      	ldr	r2, [r4, #16]
 8082fc2:	0a12      	lsrs	r2, r2, #8
 8082fc4:	72aa      	strb	r2, [r5, #10]
 8082fc6:	6922      	ldr	r2, [r4, #16]
 8082fc8:	72ea      	strb	r2, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 8082fca:	7de2      	ldrb	r2, [r4, #23]
 8082fcc:	732a      	strb	r2, [r5, #12]
 8082fce:	8ae2      	ldrh	r2, [r4, #22]
 8082fd0:	736a      	strb	r2, [r5, #13]
 8082fd2:	6962      	ldr	r2, [r4, #20]
 8082fd4:	0a12      	lsrs	r2, r2, #8
 8082fd6:	73aa      	strb	r2, [r5, #14]
 8082fd8:	6962      	ldr	r2, [r4, #20]
 8082fda:	73ea      	strb	r2, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 8082fdc:	7ee2      	ldrb	r2, [r4, #27]
 8082fde:	742a      	strb	r2, [r5, #16]
 8082fe0:	8b62      	ldrh	r2, [r4, #26]
 8082fe2:	746a      	strb	r2, [r5, #17]
 8082fe4:	69a2      	ldr	r2, [r4, #24]
 8082fe6:	0a12      	lsrs	r2, r2, #8
 8082fe8:	74aa      	strb	r2, [r5, #18]
 8082fea:	69a2      	ldr	r2, [r4, #24]
 8082fec:	74ea      	strb	r2, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 8082fee:	7fe2      	ldrb	r2, [r4, #31]
 8082ff0:	752a      	strb	r2, [r5, #20]
 8082ff2:	8be2      	ldrh	r2, [r4, #30]
 8082ff4:	756a      	strb	r2, [r5, #21]
 8082ff6:	69e2      	ldr	r2, [r4, #28]
 8082ff8:	0a12      	lsrs	r2, r2, #8
 8082ffa:	75aa      	strb	r2, [r5, #22]
 8082ffc:	69e2      	ldr	r2, [r4, #28]
 8082ffe:	75ea      	strb	r2, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 8083000:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8083004:	762a      	strb	r2, [r5, #24]
 8083006:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 8083008:	766a      	strb	r2, [r5, #25]
 808300a:	6a22      	ldr	r2, [r4, #32]
 808300c:	0a12      	lsrs	r2, r2, #8
 808300e:	76aa      	strb	r2, [r5, #26]
 8083010:	6a22      	ldr	r2, [r4, #32]
 8083012:	76ea      	strb	r2, [r5, #27]

    if( ctx->is224 == 0 )
 8083014:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8083016:	b950      	cbnz	r0, 808302e <mbedtls_sha256_finish_ret+0x12a>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 8083018:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 808301c:	772b      	strb	r3, [r5, #28]
 808301e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8083020:	776b      	strb	r3, [r5, #29]
 8083022:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8083024:	0a1b      	lsrs	r3, r3, #8
 8083026:	77ab      	strb	r3, [r5, #30]
 8083028:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808302a:	77eb      	strb	r3, [r5, #31]
 808302c:	bd70      	pop	{r4, r5, r6, pc}

    return( 0 );
 808302e:	4618      	mov	r0, r3
}
 8083030:	bd70      	pop	{r4, r5, r6, pc}

08083032 <mbedtls_sha256_ret>:
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 8083032:	b5f0      	push	{r4, r5, r6, r7, lr}
 8083034:	461f      	mov	r7, r3
 8083036:	b09d      	sub	sp, #116	; 0x74
 8083038:	4605      	mov	r5, r0
    int ret;
    mbedtls_sha256_context ctx;

    mbedtls_sha256_init( &ctx );
 808303a:	a801      	add	r0, sp, #4
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 808303c:	460e      	mov	r6, r1
 808303e:	4614      	mov	r4, r2
    int ret;
    mbedtls_sha256_context ctx;

    mbedtls_sha256_init( &ctx );
 8083040:	f7ff fb58 	bl	80826f4 <mbedtls_sha256_init>

    if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )
 8083044:	4639      	mov	r1, r7
 8083046:	a801      	add	r0, sp, #4
 8083048:	f7ff fb68 	bl	808271c <mbedtls_sha256_starts_ret>
 808304c:	4601      	mov	r1, r0
 808304e:	b958      	cbnz	r0, 8083068 <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
 8083050:	4629      	mov	r1, r5
 8083052:	4632      	mov	r2, r6
 8083054:	a801      	add	r0, sp, #4
 8083056:	f7ff ff1b 	bl	8082e90 <mbedtls_sha256_update_ret>
 808305a:	4601      	mov	r1, r0
 808305c:	b920      	cbnz	r0, 8083068 <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
 808305e:	4621      	mov	r1, r4
 8083060:	a801      	add	r0, sp, #4
 8083062:	f7ff ff4f 	bl	8082f04 <mbedtls_sha256_finish_ret>
 8083066:	4601      	mov	r1, r0
        goto exit;

exit:
    mbedtls_sha256_free( &ctx );
 8083068:	a801      	add	r0, sp, #4
 808306a:	f7ff fb47 	bl	80826fc <mbedtls_sha256_free>

    return( ret );
}
 808306e:	4608      	mov	r0, r1
 8083070:	b01d      	add	sp, #116	; 0x74
 8083072:	bdf0      	pop	{r4, r5, r6, r7, pc}

08083074 <mbedtls_pkcs5_pbkdf2_hmac>:

int mbedtls_pkcs5_pbkdf2_hmac( mbedtls_md_context_t *ctx, const unsigned char *password,
                       size_t plen, const unsigned char *salt, size_t slen,
                       unsigned int iteration_count,
                       uint32_t key_length, unsigned char *output )
{
 8083074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8083078:	4604      	mov	r4, r0
 808307a:	b0a5      	sub	sp, #148	; 0x94
    int ret, j;
    unsigned int i;
    unsigned char md1[MBEDTLS_MD_MAX_SIZE];
    unsigned char work[MBEDTLS_MD_MAX_SIZE];
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
 808307c:	6800      	ldr	r0, [r0, #0]

int mbedtls_pkcs5_pbkdf2_hmac( mbedtls_md_context_t *ctx, const unsigned char *password,
                       size_t plen, const unsigned char *salt, size_t slen,
                       unsigned int iteration_count,
                       uint32_t key_length, unsigned char *output )
{
 808307e:	9301      	str	r3, [sp, #4]
 8083080:	460f      	mov	r7, r1
 8083082:	4693      	mov	fp, r2
 8083084:	9e30      	ldr	r6, [sp, #192]	; 0xc0
    int ret, j;
    unsigned int i;
    unsigned char md1[MBEDTLS_MD_MAX_SIZE];
    unsigned char work[MBEDTLS_MD_MAX_SIZE];
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
 8083086:	f005 f80f 	bl	80880a8 <mbedtls_md_get_size>
 808308a:	4681      	mov	r9, r0
    size_t use_len;
    unsigned char *out_p = output;
    unsigned char counter[4];

    memset( counter, 0, 4 );
 808308c:	2300      	movs	r3, #0
 808308e:	9303      	str	r3, [sp, #12]
    counter[3] = 1;
 8083090:	2301      	movs	r3, #1
 8083092:	f88d 300f 	strb.w	r3, [sp, #15]
            return( ret );

        if( ( ret = mbedtls_md_hmac_update( ctx, counter, 4 ) ) != 0 )
            return( ret );

        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
 8083096:	f10d 0850 	add.w	r8, sp, #80	; 0x50
#if UINT_MAX > 0xFFFFFFFF
    if( iteration_count > 0xFFFFFFFF )
        return( MBEDTLS_ERR_PKCS5_BAD_INPUT_DATA );
#endif

    while( key_length )
 808309a:	2e00      	cmp	r6, #0
 808309c:	d05c      	beq.n	8083158 <mbedtls_pkcs5_pbkdf2_hmac+0xe4>
    {
        // U1 ends up in work
        //
        if( ( ret = mbedtls_md_hmac_starts( ctx, password, plen ) ) != 0 )
 808309e:	465a      	mov	r2, fp
 80830a0:	4639      	mov	r1, r7
 80830a2:	4620      	mov	r0, r4
 80830a4:	f004 ff3e 	bl	8087f24 <mbedtls_md_hmac_starts>
 80830a8:	2800      	cmp	r0, #0
 80830aa:	d156      	bne.n	808315a <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        if( ( ret = mbedtls_md_hmac_update( ctx, salt, slen ) ) != 0 )
 80830ac:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80830ae:	9901      	ldr	r1, [sp, #4]
 80830b0:	4620      	mov	r0, r4
 80830b2:	f004 ff97 	bl	8087fe4 <mbedtls_md_hmac_update>
 80830b6:	2800      	cmp	r0, #0
 80830b8:	d14f      	bne.n	808315a <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        if( ( ret = mbedtls_md_hmac_update( ctx, counter, 4 ) ) != 0 )
 80830ba:	2204      	movs	r2, #4
 80830bc:	a903      	add	r1, sp, #12
 80830be:	4620      	mov	r0, r4
 80830c0:	f004 ff90 	bl	8087fe4 <mbedtls_md_hmac_update>
 80830c4:	2800      	cmp	r0, #0
 80830c6:	d148      	bne.n	808315a <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
 80830c8:	4641      	mov	r1, r8
 80830ca:	4620      	mov	r0, r4
 80830cc:	f004 ff9a 	bl	8088004 <mbedtls_md_hmac_finish>
 80830d0:	2800      	cmp	r0, #0
 80830d2:	d142      	bne.n	808315a <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        memcpy( md1, work, md_size );
 80830d4:	ad04      	add	r5, sp, #16
 80830d6:	464a      	mov	r2, r9
 80830d8:	4641      	mov	r1, r8
 80830da:	4628      	mov	r0, r5
 80830dc:	f010 fd4f 	bl	8093b7e <memcpy>

        for( i = 1; i < iteration_count; i++ )
 80830e0:	f04f 0a01 	mov.w	sl, #1
 80830e4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80830e6:	459a      	cmp	sl, r3
 80830e8:	d21d      	bcs.n	8083126 <mbedtls_pkcs5_pbkdf2_hmac+0xb2>
        {
            // U2 ends up in md1
            //
            if( ( ret = mbedtls_md_hmac_starts( ctx, password, plen ) ) != 0 )
 80830ea:	465a      	mov	r2, fp
 80830ec:	4639      	mov	r1, r7
 80830ee:	4620      	mov	r0, r4
 80830f0:	f004 ff18 	bl	8087f24 <mbedtls_md_hmac_starts>
 80830f4:	bb88      	cbnz	r0, 808315a <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
                return( ret );

            if( ( ret = mbedtls_md_hmac_update( ctx, md1, md_size ) ) != 0 )
 80830f6:	464a      	mov	r2, r9
 80830f8:	4629      	mov	r1, r5
 80830fa:	4620      	mov	r0, r4
 80830fc:	f004 ff72 	bl	8087fe4 <mbedtls_md_hmac_update>
 8083100:	bb58      	cbnz	r0, 808315a <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
                return( ret );

            if( ( ret = mbedtls_md_hmac_finish( ctx, md1 ) ) != 0 )
 8083102:	4629      	mov	r1, r5
 8083104:	4620      	mov	r0, r4
 8083106:	f004 ff7d 	bl	8088004 <mbedtls_md_hmac_finish>
 808310a:	bb30      	cbnz	r0, 808315a <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
                return( ret );

            // U1 xor U2
            //
            for( j = 0; j < md_size; j++ )
 808310c:	4548      	cmp	r0, r9
 808310e:	da07      	bge.n	8083120 <mbedtls_pkcs5_pbkdf2_hmac+0xac>
                work[j] ^= md1[j];
 8083110:	f810 2008 	ldrb.w	r2, [r0, r8]
 8083114:	5d43      	ldrb	r3, [r0, r5]
 8083116:	4053      	eors	r3, r2
 8083118:	f800 3008 	strb.w	r3, [r0, r8]
            if( ( ret = mbedtls_md_hmac_finish( ctx, md1 ) ) != 0 )
                return( ret );

            // U1 xor U2
            //
            for( j = 0; j < md_size; j++ )
 808311c:	3001      	adds	r0, #1
 808311e:	e7f5      	b.n	808310c <mbedtls_pkcs5_pbkdf2_hmac+0x98>
        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
            return( ret );

        memcpy( md1, work, md_size );

        for( i = 1; i < iteration_count; i++ )
 8083120:	f10a 0a01 	add.w	sl, sl, #1
 8083124:	e7de      	b.n	80830e4 <mbedtls_pkcs5_pbkdf2_hmac+0x70>
            //
            for( j = 0; j < md_size; j++ )
                work[j] ^= md1[j];
        }

        use_len = ( key_length < md_size ) ? key_length : md_size;
 8083126:	454e      	cmp	r6, r9
 8083128:	4635      	mov	r5, r6
 808312a:	bf28      	it	cs
 808312c:	464d      	movcs	r5, r9
        memcpy( out_p, work, use_len );
 808312e:	4641      	mov	r1, r8
 8083130:	462a      	mov	r2, r5
 8083132:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8083134:	f010 fd23 	bl	8093b7e <memcpy>

        key_length -= (uint32_t) use_len;
        out_p += use_len;
 8083138:	9b31      	ldr	r3, [sp, #196]	; 0xc4
        }

        use_len = ( key_length < md_size ) ? key_length : md_size;
        memcpy( out_p, work, use_len );

        key_length -= (uint32_t) use_len;
 808313a:	1b76      	subs	r6, r6, r5
        out_p += use_len;
 808313c:	442b      	add	r3, r5
 808313e:	9331      	str	r3, [sp, #196]	; 0xc4
 8083140:	aa04      	add	r2, sp, #16

        for( i = 4; i > 0; i-- )
            if( ++counter[i - 1] != 0 )
 8083142:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 8083146:	3301      	adds	r3, #1
 8083148:	b2db      	uxtb	r3, r3
 808314a:	7013      	strb	r3, [r2, #0]
 808314c:	2b00      	cmp	r3, #0
 808314e:	d1a4      	bne.n	808309a <mbedtls_pkcs5_pbkdf2_hmac+0x26>
        memcpy( out_p, work, use_len );

        key_length -= (uint32_t) use_len;
        out_p += use_len;

        for( i = 4; i > 0; i-- )
 8083150:	ab03      	add	r3, sp, #12
 8083152:	4293      	cmp	r3, r2
 8083154:	d1f5      	bne.n	8083142 <mbedtls_pkcs5_pbkdf2_hmac+0xce>
 8083156:	e7a0      	b.n	808309a <mbedtls_pkcs5_pbkdf2_hmac+0x26>
            if( ++counter[i - 1] != 0 )
                break;
    }

    return( 0 );
 8083158:	4630      	mov	r0, r6
}
 808315a:	b025      	add	sp, #148	; 0x94
 808315c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08083160 <mbedtls_pkcs5_pbes2>:

int mbedtls_pkcs5_pbes2( const mbedtls_asn1_buf *pbe_params, int mode,
                 const unsigned char *pwd,  size_t pwdlen,
                 const unsigned char *data, size_t datalen,
                 unsigned char *output )
{
 8083160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8083164:	461f      	mov	r7, r3
 8083166:	b0bd      	sub	sp, #244	; 0xf4
    int ret, iterations = 0, keylen = 0;
 8083168:	2300      	movs	r3, #0
 808316a:	9306      	str	r3, [sp, #24]
 808316c:	9307      	str	r3, [sp, #28]
    unsigned char *p, *end;
    mbedtls_asn1_buf kdf_alg_oid, enc_scheme_oid, kdf_alg_params, enc_scheme_params;
    mbedtls_asn1_buf salt;
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
    unsigned char key[32], iv[32];
    size_t olen = 0;
 808316e:	9309      	str	r3, [sp, #36]	; 0x24
    mbedtls_md_context_t md_ctx;
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_cipher_context_t cipher_ctx;

    p = pbe_params->p;
    end = p + pbe_params->len;
 8083170:	6844      	ldr	r4, [r0, #4]
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_md_context_t md_ctx;
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_cipher_context_t cipher_ctx;

    p = pbe_params->p;
 8083172:	6883      	ldr	r3, [r0, #8]
{
    int ret, iterations = 0, keylen = 0;
    unsigned char *p, *end;
    mbedtls_asn1_buf kdf_alg_oid, enc_scheme_oid, kdf_alg_params, enc_scheme_params;
    mbedtls_asn1_buf salt;
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
 8083174:	f04f 0904 	mov.w	r9, #4
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_md_context_t md_ctx;
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_cipher_context_t cipher_ctx;

    p = pbe_params->p;
 8083178:	9308      	str	r3, [sp, #32]
    end = p + pbe_params->len;
 808317a:	441c      	add	r4, r3
     *  PBES2-params ::= SEQUENCE {
     *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 808317c:	6803      	ldr	r3, [r0, #0]

int mbedtls_pkcs5_pbes2( const mbedtls_asn1_buf *pbe_params, int mode,
                 const unsigned char *pwd,  size_t pwdlen,
                 const unsigned char *data, size_t datalen,
                 unsigned char *output )
{
 808317e:	460d      	mov	r5, r1
     *  PBES2-params ::= SEQUENCE {
     *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 8083180:	2b30      	cmp	r3, #48	; 0x30

int mbedtls_pkcs5_pbes2( const mbedtls_asn1_buf *pbe_params, int mode,
                 const unsigned char *pwd,  size_t pwdlen,
                 const unsigned char *data, size_t datalen,
                 unsigned char *output )
{
 8083182:	4616      	mov	r6, r2
    int ret, iterations = 0, keylen = 0;
    unsigned char *p, *end;
    mbedtls_asn1_buf kdf_alg_oid, enc_scheme_oid, kdf_alg_params, enc_scheme_params;
    mbedtls_asn1_buf salt;
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
 8083184:	f88d 9016 	strb.w	r9, [sp, #22]
     *  PBES2-params ::= SEQUENCE {
     *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 8083188:	f040 80c9 	bne.w	808331e <mbedtls_pkcs5_pbes2+0x1be>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &kdf_alg_oid, &kdf_alg_params ) ) != 0 )
 808318c:	ab10      	add	r3, sp, #64	; 0x40
 808318e:	aa0a      	add	r2, sp, #40	; 0x28
 8083190:	4621      	mov	r1, r4
 8083192:	a808      	add	r0, sp, #32
 8083194:	f000 fd65 	bl	8083c62 <mbedtls_asn1_get_alg>
 8083198:	2800      	cmp	r0, #0
 808319a:	d158      	bne.n	808324e <mbedtls_pkcs5_pbes2+0xee>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    // Only PBKDF2 supported at the moment
    //
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBKDF2, &kdf_alg_oid ) != 0 )
 808319c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 808319e:	2a09      	cmp	r2, #9
 80831a0:	d14c      	bne.n	808323c <mbedtls_pkcs5_pbes2+0xdc>
 80831a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80831a4:	4861      	ldr	r0, [pc, #388]	; (808332c <mbedtls_pkcs5_pbes2+0x1cc>)
 80831a6:	f010 fcdb 	bl	8093b60 <memcmp>
 80831aa:	2800      	cmp	r0, #0
 80831ac:	d146      	bne.n	808323c <mbedtls_pkcs5_pbes2+0xdc>
                                      mbedtls_asn1_buf *salt, int *iterations,
                                      int *keylen, mbedtls_md_type_t *md_type )
{
    int ret;
    mbedtls_asn1_buf prf_alg_oid;
    unsigned char *p = params->p;
 80831ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
    const unsigned char *end = params->p + params->len;
 80831b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
                                      mbedtls_asn1_buf *salt, int *iterations,
                                      int *keylen, mbedtls_md_type_t *md_type )
{
    int ret;
    mbedtls_asn1_buf prf_alg_oid;
    unsigned char *p = params->p;
 80831b2:	9324      	str	r3, [sp, #144]	; 0x90
    const unsigned char *end = params->p + params->len;
 80831b4:	eb03 0802 	add.w	r8, r3, r2

    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 80831b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80831ba:	2b30      	cmp	r3, #48	; 0x30
 80831bc:	f040 80af 	bne.w	808331e <mbedtls_pkcs5_pbes2+0x1be>
     *    keyLength         INTEGER OPTIONAL
     *    prf               AlgorithmIdentifier DEFAULT algid-hmacWithSHA1
     *  }
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 80831c0:	464b      	mov	r3, r9
 80831c2:	aa17      	add	r2, sp, #92	; 0x5c
 80831c4:	4641      	mov	r1, r8
 80831c6:	a824      	add	r0, sp, #144	; 0x90
 80831c8:	f000 fc72 	bl	8083ab0 <mbedtls_asn1_get_tag>
 80831cc:	b9f8      	cbnz	r0, 808320e <mbedtls_pkcs5_pbes2+0xae>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    salt->p = p;
 80831ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
    p += salt->len;
 80831d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    salt->p = p;
 80831d2:	9218      	str	r2, [sp, #96]	; 0x60
    p += salt->len;
 80831d4:	4413      	add	r3, r2

    if( ( ret = mbedtls_asn1_get_int( &p, end, iterations ) ) != 0 )
 80831d6:	4641      	mov	r1, r8
 80831d8:	aa06      	add	r2, sp, #24
 80831da:	a824      	add	r0, sp, #144	; 0x90
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    salt->p = p;
    p += salt->len;
 80831dc:	9324      	str	r3, [sp, #144]	; 0x90

    if( ( ret = mbedtls_asn1_get_int( &p, end, iterations ) ) != 0 )
 80831de:	f000 fc94 	bl	8083b0a <mbedtls_asn1_get_int>
 80831e2:	b9a0      	cbnz	r0, 808320e <mbedtls_pkcs5_pbes2+0xae>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    if( p == end )
 80831e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80831e6:	4598      	cmp	r8, r3
 80831e8:	d022      	beq.n	8083230 <mbedtls_pkcs5_pbes2+0xd0>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_int( &p, end, keylen ) ) != 0 )
 80831ea:	aa07      	add	r2, sp, #28
 80831ec:	4641      	mov	r1, r8
 80831ee:	a824      	add	r0, sp, #144	; 0x90
 80831f0:	f000 fc8b 	bl	8083b0a <mbedtls_asn1_get_int>
 80831f4:	b110      	cbz	r0, 80831fc <mbedtls_pkcs5_pbes2+0x9c>
    {
        if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80831f6:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80831fa:	d108      	bne.n	808320e <mbedtls_pkcs5_pbes2+0xae>
            return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
    }

    if( p == end )
 80831fc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80831fe:	4598      	cmp	r8, r3
 8083200:	d016      	beq.n	8083230 <mbedtls_pkcs5_pbes2+0xd0>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
 8083202:	aa2c      	add	r2, sp, #176	; 0xb0
 8083204:	4641      	mov	r1, r8
 8083206:	a824      	add	r0, sp, #144	; 0x90
 8083208:	f000 fd73 	bl	8083cf2 <mbedtls_asn1_get_alg_null>
 808320c:	b128      	cbz	r0, 808321a <mbedtls_pkcs5_pbes2+0xba>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
 808320e:	f5a0 503c 	sub.w	r0, r0, #12032	; 0x2f00
    // Only PBKDF2 supported at the moment
    //
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBKDF2, &kdf_alg_oid ) != 0 )
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    if( ( ret = pkcs5_parse_pbkdf2_params( &kdf_alg_params,
 8083212:	2800      	cmp	r0, #0
 8083214:	f040 8086 	bne.w	8083324 <mbedtls_pkcs5_pbes2+0x1c4>
 8083218:	e00a      	b.n	8083230 <mbedtls_pkcs5_pbes2+0xd0>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    if( mbedtls_oid_get_md_hmac( &prf_alg_oid, md_type ) != 0 )
 808321a:	f10d 0116 	add.w	r1, sp, #22
 808321e:	a82c      	add	r0, sp, #176	; 0xb0
 8083220:	f002 f922 	bl	8085468 <mbedtls_oid_get_md_hmac>
 8083224:	b950      	cbnz	r0, 808323c <mbedtls_pkcs5_pbes2+0xdc>
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    if( p != end )
 8083226:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8083228:	4598      	cmp	r8, r3
 808322a:	d001      	beq.n	8083230 <mbedtls_pkcs5_pbes2+0xd0>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 808322c:	4840      	ldr	r0, [pc, #256]	; (8083330 <mbedtls_pkcs5_pbes2+0x1d0>)
 808322e:	e079      	b.n	8083324 <mbedtls_pkcs5_pbes2+0x1c4>
                                           &md_type ) ) != 0 )
    {
        return( ret );
    }

    md_info = mbedtls_md_info_from_type( md_type );
 8083230:	f89d 0016 	ldrb.w	r0, [sp, #22]
 8083234:	f004 fdf4 	bl	8087e20 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8083238:	4681      	mov	r9, r0
 808323a:	b908      	cbnz	r0, 8083240 <mbedtls_pkcs5_pbes2+0xe0>

    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    if( mbedtls_oid_get_md_hmac( &prf_alg_oid, md_type ) != 0 )
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );
 808323c:	483d      	ldr	r0, [pc, #244]	; (8083334 <mbedtls_pkcs5_pbes2+0x1d4>)
 808323e:	e071      	b.n	8083324 <mbedtls_pkcs5_pbes2+0x1c4>

    md_info = mbedtls_md_info_from_type( md_type );
    if( md_info == NULL )
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &enc_scheme_oid,
 8083240:	ab13      	add	r3, sp, #76	; 0x4c
 8083242:	aa0d      	add	r2, sp, #52	; 0x34
 8083244:	4621      	mov	r1, r4
 8083246:	a808      	add	r0, sp, #32
 8083248:	f000 fd0b 	bl	8083c62 <mbedtls_asn1_get_alg>
 808324c:	b110      	cbz	r0, 8083254 <mbedtls_pkcs5_pbes2+0xf4>
                              &enc_scheme_params ) ) != 0 )
    {
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
 808324e:	f5a0 503c 	sub.w	r0, r0, #12032	; 0x2f00
 8083252:	e067      	b.n	8083324 <mbedtls_pkcs5_pbes2+0x1c4>
    }

    if( mbedtls_oid_get_cipher_alg( &enc_scheme_oid, &cipher_alg ) != 0 )
 8083254:	f10d 0117 	add.w	r1, sp, #23
 8083258:	a80d      	add	r0, sp, #52	; 0x34
 808325a:	f002 f8d7 	bl	808540c <mbedtls_oid_get_cipher_alg>
 808325e:	2800      	cmp	r0, #0
 8083260:	d1ec      	bne.n	808323c <mbedtls_pkcs5_pbes2+0xdc>
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    cipher_info = mbedtls_cipher_info_from_type( cipher_alg );
 8083262:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8083266:	f000 f949 	bl	80834fc <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
 808326a:	4680      	mov	r8, r0
 808326c:	2800      	cmp	r0, #0
 808326e:	d0e5      	beq.n	808323c <mbedtls_pkcs5_pbes2+0xdc>

    /*
     * The value of keylen from pkcs5_parse_pbkdf2_params() is ignored
     * since it is optional and we don't know if it was set or not
     */
    keylen = cipher_info->key_bitlen / 8;
 8083270:	6843      	ldr	r3, [r0, #4]
 8083272:	08db      	lsrs	r3, r3, #3
 8083274:	9307      	str	r3, [sp, #28]

    if( enc_scheme_params.tag != MBEDTLS_ASN1_OCTET_STRING ||
 8083276:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8083278:	2b04      	cmp	r3, #4
 808327a:	d152      	bne.n	8083322 <mbedtls_pkcs5_pbes2+0x1c2>
 808327c:	68c3      	ldr	r3, [r0, #12]
 808327e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8083280:	429a      	cmp	r2, r3
 8083282:	d14e      	bne.n	8083322 <mbedtls_pkcs5_pbes2+0x1c2>
        enc_scheme_params.len != cipher_info->iv_size )
    {
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT );
    }

    mbedtls_md_init( &md_ctx );
 8083284:	a819      	add	r0, sp, #100	; 0x64
 8083286:	f004 fdd7 	bl	8087e38 <mbedtls_md_init>
    mbedtls_cipher_init( &cipher_ctx );
 808328a:	a82c      	add	r0, sp, #176	; 0xb0
 808328c:	f000 f958 	bl	8083540 <mbedtls_cipher_init>

    memcpy( iv, enc_scheme_params.p, enc_scheme_params.len );
 8083290:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8083292:	9915      	ldr	r1, [sp, #84]	; 0x54
 8083294:	a824      	add	r0, sp, #144	; 0x90
 8083296:	f010 fc72 	bl	8093b7e <memcpy>

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
 808329a:	2201      	movs	r2, #1
 808329c:	4649      	mov	r1, r9
 808329e:	a819      	add	r0, sp, #100	; 0x64
 80832a0:	f004 fdf0 	bl	8087e84 <mbedtls_md_setup>
 80832a4:	4604      	mov	r4, r0
 80832a6:	2800      	cmp	r0, #0
 80832a8:	d131      	bne.n	808330e <mbedtls_pkcs5_pbes2+0x1ae>
        goto exit;

    if( ( ret = mbedtls_pkcs5_pbkdf2_hmac( &md_ctx, pwd, pwdlen, salt.p, salt.len,
 80832aa:	9b07      	ldr	r3, [sp, #28]
 80832ac:	f10d 0970 	add.w	r9, sp, #112	; 0x70
 80832b0:	9302      	str	r3, [sp, #8]
 80832b2:	9b06      	ldr	r3, [sp, #24]
 80832b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80832b8:	9301      	str	r3, [sp, #4]
 80832ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80832bc:	463a      	mov	r2, r7
 80832be:	9300      	str	r3, [sp, #0]
 80832c0:	4631      	mov	r1, r6
 80832c2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80832c4:	a819      	add	r0, sp, #100	; 0x64
 80832c6:	f7ff fed5 	bl	8083074 <mbedtls_pkcs5_pbkdf2_hmac>
 80832ca:	4604      	mov	r4, r0
 80832cc:	b9f8      	cbnz	r0, 808330e <mbedtls_pkcs5_pbes2+0x1ae>
                                   iterations, keylen, key ) ) != 0 )
    {
        goto exit;
    }

    if( ( ret = mbedtls_cipher_setup( &cipher_ctx, cipher_info ) ) != 0 )
 80832ce:	4641      	mov	r1, r8
 80832d0:	a82c      	add	r0, sp, #176	; 0xb0
 80832d2:	f000 fb09 	bl	80838e8 <mbedtls_cipher_setup>
 80832d6:	4604      	mov	r4, r0
 80832d8:	b9c8      	cbnz	r0, 808330e <mbedtls_pkcs5_pbes2+0x1ae>
        goto exit;

    if( ( ret = mbedtls_cipher_setkey( &cipher_ctx, key, 8 * keylen, (mbedtls_operation_t) mode ) ) != 0 )
 80832da:	9a07      	ldr	r2, [sp, #28]
 80832dc:	b26b      	sxtb	r3, r5
 80832de:	00d2      	lsls	r2, r2, #3
 80832e0:	4649      	mov	r1, r9
 80832e2:	a82c      	add	r0, sp, #176	; 0xb0
 80832e4:	f000 f942 	bl	808356c <mbedtls_cipher_setkey>
 80832e8:	4604      	mov	r4, r0
 80832ea:	b980      	cbnz	r0, 808330e <mbedtls_pkcs5_pbes2+0x1ae>
        goto exit;

    if( ( ret = mbedtls_cipher_crypt( &cipher_ctx, iv, enc_scheme_params.len,
 80832ec:	ab09      	add	r3, sp, #36	; 0x24
 80832ee:	9302      	str	r3, [sp, #8]
 80832f0:	9b46      	ldr	r3, [sp, #280]	; 0x118
 80832f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80832f4:	9301      	str	r3, [sp, #4]
 80832f6:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80832f8:	a924      	add	r1, sp, #144	; 0x90
 80832fa:	9300      	str	r3, [sp, #0]
 80832fc:	a82c      	add	r0, sp, #176	; 0xb0
 80832fe:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8083300:	f000 fb10 	bl	8083924 <mbedtls_cipher_crypt>
                              data, datalen, output, &olen ) ) != 0 )
        ret = MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH;
 8083304:	f5a4 5438 	sub.w	r4, r4, #11776	; 0x2e00
 8083308:	2800      	cmp	r0, #0
 808330a:	bf08      	it	eq
 808330c:	2400      	moveq	r4, #0

exit:
    mbedtls_md_free( &md_ctx );
 808330e:	a819      	add	r0, sp, #100	; 0x64
 8083310:	f004 fd97 	bl	8087e42 <mbedtls_md_free>
    mbedtls_cipher_free( &cipher_ctx );
 8083314:	a82c      	add	r0, sp, #176	; 0xb0
 8083316:	f000 f917 	bl	8083548 <mbedtls_cipher_free>

    return( ret );
 808331a:	4620      	mov	r0, r4
 808331c:	e002      	b.n	8083324 <mbedtls_pkcs5_pbes2+0x1c4>
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 808331e:	4806      	ldr	r0, [pc, #24]	; (8083338 <mbedtls_pkcs5_pbes2+0x1d8>)
 8083320:	e000      	b.n	8083324 <mbedtls_pkcs5_pbes2+0x1c4>
    keylen = cipher_info->key_bitlen / 8;

    if( enc_scheme_params.tag != MBEDTLS_ASN1_OCTET_STRING ||
        enc_scheme_params.len != cipher_info->iv_size )
    {
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT );
 8083322:	4806      	ldr	r0, [pc, #24]	; (808333c <mbedtls_pkcs5_pbes2+0x1dc>)
exit:
    mbedtls_md_free( &md_ctx );
    mbedtls_cipher_free( &cipher_ctx );

    return( ret );
}
 8083324:	b03d      	add	sp, #244	; 0xf4
 8083326:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808332a:	bf00      	nop
 808332c:	08093fd0 	.word	0x08093fd0
 8083330:	ffffd09a 	.word	0xffffd09a
 8083334:	ffffd180 	.word	0xffffd180
 8083338:	ffffd09e 	.word	0xffffd09e
 808333c:	ffffd100 	.word	0xffffd100

08083340 <mbedtls_cipher_get_block_size>:
 * \return       The size of the blocks of the cipher, or zero if \p ctx
 *               has not been initialized.
 */
static inline unsigned int mbedtls_cipher_get_block_size( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
 8083340:	b110      	cbz	r0, 8083348 <mbedtls_cipher_get_block_size+0x8>
 8083342:	6800      	ldr	r0, [r0, #0]
 8083344:	b100      	cbz	r0, 8083348 <mbedtls_cipher_get_block_size+0x8>
        return 0;

    return ctx->cipher_info->block_size;
 8083346:	6940      	ldr	r0, [r0, #20]
}
 8083348:	4770      	bx	lr

0808334a <_ZL16add_pkcs_paddingPhjj>:
/*
 * PKCS7 (and PKCS5) padding: fill with ll bytes, with ll = padding_len
 */
static void add_pkcs_padding( unsigned char *output, size_t output_len,
        size_t data_len )
{
 808334a:	b510      	push	{r4, lr}
    size_t padding_len = output_len - data_len;
 808334c:	1a89      	subs	r1, r1, r2
 808334e:	2400      	movs	r4, #0
    unsigned char i;

    for( i = 0; i < padding_len; i++ )
 8083350:	b2e3      	uxtb	r3, r4
 8083352:	4299      	cmp	r1, r3
 8083354:	f104 0401 	add.w	r4, r4, #1
 8083358:	d902      	bls.n	8083360 <_ZL16add_pkcs_paddingPhjj+0x16>
        output[data_len + i] = (unsigned char) padding_len;
 808335a:	4403      	add	r3, r0
 808335c:	5499      	strb	r1, [r3, r2]
        size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i;

    for( i = 0; i < padding_len; i++ )
 808335e:	e7f7      	b.n	8083350 <_ZL16add_pkcs_paddingPhjj+0x6>
 8083360:	bd10      	pop	{r4, pc}
	...

08083364 <_ZL16get_pkcs_paddingPhjPj>:
        output[data_len + i] = (unsigned char) padding_len;
}

static int get_pkcs_padding( unsigned char *input, size_t input_len,
        size_t *data_len )
{
 8083364:	b5f0      	push	{r4, r5, r6, r7, lr}
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
 8083366:	b300      	cbz	r0, 80833aa <_ZL16get_pkcs_paddingPhjPj+0x46>
 8083368:	b1fa      	cbz	r2, 80833aa <_ZL16get_pkcs_paddingPhjPj+0x46>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
 808336a:	1843      	adds	r3, r0, r1
 808336c:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    *data_len = input_len - padding_len;

    /* Avoid logical || since it results in a branch */
    bad |= padding_len > input_len;
    bad |= padding_len == 0;
 8083370:	fab4 f384 	clz	r3, r4
 8083374:	095b      	lsrs	r3, r3, #5
 8083376:	42a1      	cmp	r1, r4
 8083378:	bf38      	it	cc
 808337a:	f043 0301 	orrcc.w	r3, r3, #1

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
    *data_len = input_len - padding_len;
 808337e:	1b0f      	subs	r7, r1, r4
 8083380:	6017      	str	r7, [r2, #0]
    bad |= padding_len == 0;

    /* The number of bytes checked must be independent of padding_len,
     * so pick input_len, which is usually 8 or 16 (one block) */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len; i++ )
 8083382:	2200      	movs	r2, #0
 8083384:	428a      	cmp	r2, r1
 8083386:	d00b      	beq.n	80833a0 <_ZL16get_pkcs_paddingPhjPj+0x3c>
        bad |= ( input[i] ^ padding_len ) * ( i >= pad_idx );
 8083388:	5c85      	ldrb	r5, [r0, r2]
 808338a:	42ba      	cmp	r2, r7
 808338c:	ea84 0605 	eor.w	r6, r4, r5
 8083390:	bf34      	ite	cc
 8083392:	2500      	movcc	r5, #0
 8083394:	2501      	movcs	r5, #1
 8083396:	4375      	muls	r5, r6
 8083398:	432b      	orrs	r3, r5
 808339a:	b2db      	uxtb	r3, r3
    bad |= padding_len == 0;

    /* The number of bytes checked must be independent of padding_len,
     * so pick input_len, which is usually 8 or 16 (one block) */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len; i++ )
 808339c:	3201      	adds	r2, #1
 808339e:	e7f1      	b.n	8083384 <_ZL16get_pkcs_paddingPhjPj+0x20>
        bad |= ( input[i] ^ padding_len ) * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 80833a0:	2b00      	cmp	r3, #0
 80833a2:	4803      	ldr	r0, [pc, #12]	; (80833b0 <_ZL16get_pkcs_paddingPhjPj+0x4c>)
 80833a4:	bf08      	it	eq
 80833a6:	2000      	moveq	r0, #0
 80833a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80833aa:	4802      	ldr	r0, [pc, #8]	; (80833b4 <_ZL16get_pkcs_paddingPhjPj+0x50>)
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len; i++ )
        bad |= ( input[i] ^ padding_len ) * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
}
 80833ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80833ae:	bf00      	nop
 80833b0:	ffff9e00 	.word	0xffff9e00
 80833b4:	ffff9f00 	.word	0xffff9f00

080833b8 <_ZL25add_one_and_zeros_paddingPhjj>:
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
 80833b8:	2380      	movs	r3, #128	; 0x80
/*
 * One and zeros padding: fill with 80 00 ... 00
 */
static void add_one_and_zeros_padding( unsigned char *output,
                                       size_t output_len, size_t data_len )
{
 80833ba:	b530      	push	{r4, r5, lr}
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
 80833bc:	5483      	strb	r3, [r0, r2]
 * One and zeros padding: fill with 80 00 ... 00
 */
static void add_one_and_zeros_padding( unsigned char *output,
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
 80833be:	1a89      	subs	r1, r1, r2
    unsigned char i = 0;

    output[data_len] = 0x80;
    for( i = 1; i < padding_len; i++ )
 80833c0:	2301      	movs	r3, #1
        output[data_len + i] = 0x00;
 80833c2:	2500      	movs	r5, #0
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
    for( i = 1; i < padding_len; i++ )
 80833c4:	4299      	cmp	r1, r3
 80833c6:	d904      	bls.n	80833d2 <_ZL25add_one_and_zeros_paddingPhjj+0x1a>
        output[data_len + i] = 0x00;
 80833c8:	18c4      	adds	r4, r0, r3
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
    for( i = 1; i < padding_len; i++ )
 80833ca:	3301      	adds	r3, #1
        output[data_len + i] = 0x00;
 80833cc:	54a5      	strb	r5, [r4, r2]
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
    for( i = 1; i < padding_len; i++ )
 80833ce:	b2db      	uxtb	r3, r3
 80833d0:	e7f8      	b.n	80833c4 <_ZL25add_one_and_zeros_paddingPhjj+0xc>
 80833d2:	bd30      	pop	{r4, r5, pc}

080833d4 <_ZL25add_zeros_and_len_paddingPhjj>:
/*
 * Zeros and len padding: fill with 00 ... 00 ll, where ll is padding length
 */
static void add_zeros_and_len_padding( unsigned char *output,
                                       size_t output_len, size_t data_len )
{
 80833d4:	b570      	push	{r4, r5, r6, lr}
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
 80833d6:	2301      	movs	r3, #1
 * Zeros and len padding: fill with 00 ... 00 ll, where ll is padding length
 */
static void add_zeros_and_len_padding( unsigned char *output,
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
 80833d8:	1a8d      	subs	r5, r1, r2
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
        output[data_len + i - 1] = 0x00;
 80833da:	2600      	movs	r6, #0
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
 80833dc:	429d      	cmp	r5, r3
 80833de:	d906      	bls.n	80833ee <_ZL25add_zeros_and_len_paddingPhjj+0x1a>
        output[data_len + i - 1] = 0x00;
 80833e0:	18c4      	adds	r4, r0, r3
 80833e2:	4414      	add	r4, r2
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
 80833e4:	3301      	adds	r3, #1
        output[data_len + i - 1] = 0x00;
 80833e6:	f804 6c01 	strb.w	r6, [r4, #-1]
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
 80833ea:	b2db      	uxtb	r3, r3
 80833ec:	e7f6      	b.n	80833dc <_ZL25add_zeros_and_len_paddingPhjj+0x8>
        output[data_len + i - 1] = 0x00;
    output[output_len - 1] = (unsigned char) padding_len;
 80833ee:	4401      	add	r1, r0
 80833f0:	f801 5c01 	strb.w	r5, [r1, #-1]
 80833f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080833f8 <_ZL25get_zeros_and_len_paddingPhjPj>:
}

static int get_zeros_and_len_padding( unsigned char *input, size_t input_len,
                                      size_t *data_len )
{
 80833f8:	b570      	push	{r4, r5, r6, lr}
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
 80833fa:	b1f0      	cbz	r0, 808343a <_ZL25get_zeros_and_len_paddingPhjPj+0x42>
 80833fc:	b1ea      	cbz	r2, 808343a <_ZL25get_zeros_and_len_paddingPhjPj+0x42>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
 80833fe:	1e4e      	subs	r6, r1, #1
 8083400:	5d84      	ldrb	r4, [r0, r6]
    *data_len = input_len - padding_len;

    /* Avoid logical || since it results in a branch */
    bad |= padding_len > input_len;
    bad |= padding_len == 0;
 8083402:	fab4 f384 	clz	r3, r4

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
    *data_len = input_len - padding_len;
 8083406:	1b0d      	subs	r5, r1, r4

    /* Avoid logical || since it results in a branch */
    bad |= padding_len > input_len;
    bad |= padding_len == 0;
 8083408:	095b      	lsrs	r3, r3, #5
 808340a:	42a1      	cmp	r1, r4
 808340c:	bf2c      	ite	cs
 808340e:	4619      	movcs	r1, r3
 8083410:	f043 0101 	orrcc.w	r1, r3, #1

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
    *data_len = input_len - padding_len;
 8083414:	6015      	str	r5, [r2, #0]
    bad |= padding_len > input_len;
    bad |= padding_len == 0;

    /* The number of bytes checked must be independent of padding_len */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len - 1; i++ )
 8083416:	2300      	movs	r3, #0
 8083418:	42b3      	cmp	r3, r6
 808341a:	d209      	bcs.n	8083430 <_ZL25get_zeros_and_len_paddingPhjPj+0x38>
        bad |= input[i] * ( i >= pad_idx );
 808341c:	42ab      	cmp	r3, r5
 808341e:	5cc4      	ldrb	r4, [r0, r3]
 8083420:	bf34      	ite	cc
 8083422:	2200      	movcc	r2, #0
 8083424:	2201      	movcs	r2, #1
 8083426:	4362      	muls	r2, r4
 8083428:	4311      	orrs	r1, r2
 808342a:	b2c9      	uxtb	r1, r1
    bad |= padding_len > input_len;
    bad |= padding_len == 0;

    /* The number of bytes checked must be independent of padding_len */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len - 1; i++ )
 808342c:	3301      	adds	r3, #1
 808342e:	e7f3      	b.n	8083418 <_ZL25get_zeros_and_len_paddingPhjPj+0x20>
        bad |= input[i] * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 8083430:	2900      	cmp	r1, #0
 8083432:	4803      	ldr	r0, [pc, #12]	; (8083440 <_ZL25get_zeros_and_len_paddingPhjPj+0x48>)
 8083434:	bf08      	it	eq
 8083436:	2000      	moveq	r0, #0
 8083438:	bd70      	pop	{r4, r5, r6, pc}
{
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 808343a:	4802      	ldr	r0, [pc, #8]	; (8083444 <_ZL25get_zeros_and_len_paddingPhjPj+0x4c>)
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len - 1; i++ )
        bad |= input[i] * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
}
 808343c:	bd70      	pop	{r4, r5, r6, pc}
 808343e:	bf00      	nop
 8083440:	ffff9e00 	.word	0xffff9e00
 8083444:	ffff9f00 	.word	0xffff9f00

08083448 <_ZL17add_zeros_paddingPhjj>:
/*
 * Zero padding: fill with 00 ... 00
 */
static void add_zeros_padding( unsigned char *output,
                               size_t output_len, size_t data_len )
{
 8083448:	b510      	push	{r4, lr}
 808344a:	4402      	add	r2, r0
    size_t i;

    for( i = data_len; i < output_len; i++ )
        output[i] = 0x00;
 808344c:	2300      	movs	r3, #0
static void add_zeros_padding( unsigned char *output,
                               size_t output_len, size_t data_len )
{
    size_t i;

    for( i = data_len; i < output_len; i++ )
 808344e:	1a14      	subs	r4, r2, r0
 8083450:	42a1      	cmp	r1, r4
 8083452:	d902      	bls.n	808345a <_ZL17add_zeros_paddingPhjj+0x12>
        output[i] = 0x00;
 8083454:	f802 3b01 	strb.w	r3, [r2], #1
static void add_zeros_padding( unsigned char *output,
                               size_t output_len, size_t data_len )
{
    size_t i;

    for( i = data_len; i < output_len; i++ )
 8083458:	e7f9      	b.n	808344e <_ZL17add_zeros_paddingPhjj+0x6>
 808345a:	bd10      	pop	{r4, pc}

0808345c <_ZL14get_no_paddingPhjPj>:
 * but a trivial get_padding function
 */
static int get_no_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
    if( NULL == input || NULL == data_len )
 808345c:	b118      	cbz	r0, 8083466 <_ZL14get_no_paddingPhjPj+0xa>
 808345e:	b112      	cbz	r2, 8083466 <_ZL14get_no_paddingPhjPj+0xa>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *data_len = input_len;
 8083460:	6011      	str	r1, [r2, #0]

    return( 0 );
 8083462:	2000      	movs	r0, #0
 8083464:	4770      	bx	lr
 */
static int get_no_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8083466:	4801      	ldr	r0, [pc, #4]	; (808346c <_ZL14get_no_paddingPhjPj+0x10>)

    *data_len = input_len;

    return( 0 );
}
 8083468:	4770      	bx	lr
 808346a:	bf00      	nop
 808346c:	ffff9f00 	.word	0xffff9f00

08083470 <_ZL25get_one_and_zeros_paddingPhjPj>:
        output[data_len + i] = 0x00;
}

static int get_one_and_zeros_padding( unsigned char *input, size_t input_len,
                                      size_t *data_len )
{
 8083470:	b5f0      	push	{r4, r5, r6, r7, lr}
    size_t i;
    unsigned char done = 0, prev_done, bad;

    if( NULL == input || NULL == data_len )
 8083472:	b1f0      	cbz	r0, 80834b2 <_ZL25get_one_and_zeros_paddingPhjPj+0x42>
 8083474:	b1ea      	cbz	r2, 80834b2 <_ZL25get_one_and_zeros_paddingPhjPj+0x42>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    bad = 0x80;
    *data_len = 0;
 8083476:	2300      	movs	r3, #0
 8083478:	6013      	str	r3, [r2, #0]
 808347a:	4408      	add	r0, r1
    unsigned char done = 0, prev_done, bad;

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    bad = 0x80;
 808347c:	2480      	movs	r4, #128	; 0x80
    *data_len = 0;
    for( i = input_len; i > 0; i-- )
 808347e:	b199      	cbz	r1, 80834a8 <_ZL25get_one_and_zeros_paddingPhjPj+0x38>
    {
        prev_done = done;
        done |= ( input[i - 1] != 0 );
 8083480:	f810 5d01 	ldrb.w	r5, [r0, #-1]!
 8083484:	3901      	subs	r1, #1
 8083486:	2d00      	cmp	r5, #0
 8083488:	bf0c      	ite	eq
 808348a:	461d      	moveq	r5, r3
 808348c:	f043 0501 	orrne.w	r5, r3, #1
 8083490:	406b      	eors	r3, r5
        *data_len |= ( i - 1 ) * ( done != prev_done );
 8083492:	fb01 f603 	mul.w	r6, r1, r3
 8083496:	6817      	ldr	r7, [r2, #0]
 8083498:	433e      	orrs	r6, r7
 808349a:	6016      	str	r6, [r2, #0]
        bad ^= input[i - 1] * ( done != prev_done );
 808349c:	7806      	ldrb	r6, [r0, #0]
 808349e:	4373      	muls	r3, r6
 80834a0:	405c      	eors	r4, r3
 80834a2:	b2e4      	uxtb	r4, r4
    bad = 0x80;
    *data_len = 0;
    for( i = input_len; i > 0; i-- )
    {
        prev_done = done;
        done |= ( input[i - 1] != 0 );
 80834a4:	462b      	mov	r3, r5
 80834a6:	e7ea      	b.n	808347e <_ZL25get_one_and_zeros_paddingPhjPj+0xe>
        *data_len |= ( i - 1 ) * ( done != prev_done );
        bad ^= input[i - 1] * ( done != prev_done );
    }

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 80834a8:	2c00      	cmp	r4, #0
 80834aa:	4803      	ldr	r0, [pc, #12]	; (80834b8 <_ZL25get_one_and_zeros_paddingPhjPj+0x48>)
 80834ac:	bf08      	it	eq
 80834ae:	2000      	moveq	r0, #0
 80834b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
    size_t i;
    unsigned char done = 0, prev_done, bad;

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80834b2:	4802      	ldr	r0, [pc, #8]	; (80834bc <_ZL25get_one_and_zeros_paddingPhjPj+0x4c>)
        bad ^= input[i - 1] * ( done != prev_done );
    }

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );

}
 80834b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80834b6:	bf00      	nop
 80834b8:	ffff9e00 	.word	0xffff9e00
 80834bc:	ffff9f00 	.word	0xffff9f00

080834c0 <_ZL17get_zeros_paddingPhjPj>:
        output[i] = 0x00;
}

static int get_zeros_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
 80834c0:	b530      	push	{r4, r5, lr}
    size_t i;
    unsigned char done = 0, prev_done;

    if( NULL == input || NULL == data_len )
 80834c2:	b1a8      	cbz	r0, 80834f0 <_ZL17get_zeros_paddingPhjPj+0x30>
 80834c4:	b1a2      	cbz	r2, 80834f0 <_ZL17get_zeros_paddingPhjPj+0x30>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *data_len = 0;
 80834c6:	2300      	movs	r3, #0
 80834c8:	6013      	str	r3, [r2, #0]
 80834ca:	4401      	add	r1, r0
    for( i = input_len; i > 0; i-- )
 80834cc:	4281      	cmp	r1, r0
 80834ce:	eba1 0400 	sub.w	r4, r1, r0
 80834d2:	d00f      	beq.n	80834f4 <_ZL17get_zeros_paddingPhjPj+0x34>
    {
        prev_done = done;
        done |= ( input[i-1] != 0 );
 80834d4:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
 80834d8:	2d00      	cmp	r5, #0
 80834da:	bf0c      	ite	eq
 80834dc:	461d      	moveq	r5, r3
 80834de:	f043 0501 	orrne.w	r5, r3, #1
        *data_len |= i * ( done != prev_done );
 80834e2:	406b      	eors	r3, r5
 80834e4:	4363      	muls	r3, r4
 80834e6:	6814      	ldr	r4, [r2, #0]
 80834e8:	4323      	orrs	r3, r4
 80834ea:	6013      	str	r3, [r2, #0]

    *data_len = 0;
    for( i = input_len; i > 0; i-- )
    {
        prev_done = done;
        done |= ( input[i-1] != 0 );
 80834ec:	462b      	mov	r3, r5
 80834ee:	e7ed      	b.n	80834cc <_ZL17get_zeros_paddingPhjPj+0xc>
{
    size_t i;
    unsigned char done = 0, prev_done;

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80834f0:	4801      	ldr	r0, [pc, #4]	; (80834f8 <_ZL17get_zeros_paddingPhjPj+0x38>)
 80834f2:	bd30      	pop	{r4, r5, pc}

    *data_len = 0;
    for( i = input_len; i > 0; i-- )
 80834f4:	2000      	movs	r0, #0
        done |= ( input[i-1] != 0 );
        *data_len |= i * ( done != prev_done );
    }

    return( 0 );
}
 80834f6:	bd30      	pop	{r4, r5, pc}
 80834f8:	ffff9f00 	.word	0xffff9f00

080834fc <mbedtls_cipher_info_from_type>:

    return( mbedtls_cipher_supported );
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_type( const mbedtls_cipher_type_t cipher_type )
{
 80834fc:	4b05      	ldr	r3, [pc, #20]	; (8083514 <mbedtls_cipher_info_from_type+0x18>)
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 80834fe:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8083502:	b122      	cbz	r2, 808350e <mbedtls_cipher_info_from_type+0x12>
 8083504:	3308      	adds	r3, #8
        if( def->type == cipher_type )
 8083506:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 808350a:	4281      	cmp	r1, r0
 808350c:	d1f7      	bne.n	80834fe <mbedtls_cipher_info_from_type+0x2>
            return( def->info );

    return( NULL );
}
 808350e:	4610      	mov	r0, r2
 8083510:	4770      	bx	lr
 8083512:	bf00      	nop
 8083514:	08094de4 	.word	0x08094de4

08083518 <mbedtls_cipher_info_from_values>:
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_values( const mbedtls_cipher_id_t cipher_id,
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
 8083518:	b530      	push	{r4, r5, lr}
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 808351a:	4c08      	ldr	r4, [pc, #32]	; (808353c <mbedtls_cipher_info_from_values+0x24>)
 808351c:	6863      	ldr	r3, [r4, #4]
 808351e:	b15b      	cbz	r3, 8083538 <mbedtls_cipher_info_from_values+0x20>
        if( def->info->base->cipher == cipher_id &&
 8083520:	699d      	ldr	r5, [r3, #24]
 8083522:	782d      	ldrb	r5, [r5, #0]
 8083524:	4285      	cmp	r5, r0
 8083526:	d105      	bne.n	8083534 <mbedtls_cipher_info_from_values+0x1c>
 8083528:	685d      	ldr	r5, [r3, #4]
 808352a:	428d      	cmp	r5, r1
 808352c:	d102      	bne.n	8083534 <mbedtls_cipher_info_from_values+0x1c>
            def->info->key_bitlen == (unsigned) key_bitlen &&
 808352e:	785d      	ldrb	r5, [r3, #1]
 8083530:	4295      	cmp	r5, r2
 8083532:	d001      	beq.n	8083538 <mbedtls_cipher_info_from_values+0x20>
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 8083534:	3408      	adds	r4, #8
 8083536:	e7f1      	b.n	808351c <mbedtls_cipher_info_from_values+0x4>
            def->info->key_bitlen == (unsigned) key_bitlen &&
            def->info->mode == mode )
            return( def->info );

    return( NULL );
}
 8083538:	4618      	mov	r0, r3
 808353a:	bd30      	pop	{r4, r5, pc}
 808353c:	08094ddc 	.word	0x08094ddc

08083540 <mbedtls_cipher_init>:

void mbedtls_cipher_init( mbedtls_cipher_context_t *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 8083540:	2240      	movs	r2, #64	; 0x40
 8083542:	2100      	movs	r1, #0
 8083544:	f010 bb41 	b.w	8093bca <memset>

08083548 <mbedtls_cipher_free>:
}

void mbedtls_cipher_free( mbedtls_cipher_context_t *ctx )
{
 8083548:	b510      	push	{r4, lr}
    if( ctx == NULL )
 808354a:	4604      	mov	r4, r0
 808354c:	b168      	cbz	r0, 808356a <mbedtls_cipher_free+0x22>
       mbedtls_zeroize( ctx->cmac_ctx, sizeof( mbedtls_cmac_context_t ) );
       mbedtls_free( ctx->cmac_ctx );
    }
#endif

    if( ctx->cipher_ctx )
 808354e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8083550:	b118      	cbz	r0, 808355a <mbedtls_cipher_free+0x12>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
 8083552:	6823      	ldr	r3, [r4, #0]
 8083554:	699b      	ldr	r3, [r3, #24]
 8083556:	699b      	ldr	r3, [r3, #24]
 8083558:	4798      	blx	r3
 808355a:	f104 0240 	add.w	r2, r4, #64	; 0x40
#define mbedtls_free   free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 808355e:	2300      	movs	r3, #0
 8083560:	4294      	cmp	r4, r2
 8083562:	d002      	beq.n	808356a <mbedtls_cipher_free+0x22>
 8083564:	7023      	strb	r3, [r4, #0]
 8083566:	3401      	adds	r4, #1
 8083568:	e7fa      	b.n	8083560 <mbedtls_cipher_free+0x18>
 808356a:	bd10      	pop	{r4, pc}

0808356c <mbedtls_cipher_setkey>:
    return( 0 );
}

int mbedtls_cipher_setkey( mbedtls_cipher_context_t *ctx, const unsigned char *key,
        int key_bitlen, const mbedtls_operation_t operation )
{
 808356c:	b430      	push	{r4, r5}
    if( NULL == ctx || NULL == ctx->cipher_info )
 808356e:	b1c8      	cbz	r0, 80835a4 <mbedtls_cipher_setkey+0x38>
 8083570:	6804      	ldr	r4, [r0, #0]
 8083572:	b1bc      	cbz	r4, 80835a4 <mbedtls_cipher_setkey+0x38>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 8083574:	6925      	ldr	r5, [r4, #16]
 8083576:	07ad      	lsls	r5, r5, #30
 8083578:	d402      	bmi.n	8083580 <mbedtls_cipher_setkey+0x14>
 808357a:	6865      	ldr	r5, [r4, #4]
 808357c:	4295      	cmp	r5, r2
 808357e:	d111      	bne.n	80835a4 <mbedtls_cipher_setkey+0x38>
    ctx->operation = operation;

    /*
     * For CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 8083580:	2b01      	cmp	r3, #1
        (int) ctx->cipher_info->key_bitlen != key_bitlen )
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    ctx->key_bitlen = key_bitlen;
 8083582:	6042      	str	r2, [r0, #4]
    ctx->operation = operation;
 8083584:	7203      	strb	r3, [r0, #8]

    /*
     * For CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 8083586:	d004      	beq.n	8083592 <mbedtls_cipher_setkey+0x26>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 8083588:	7865      	ldrb	r5, [r4, #1]
    ctx->operation = operation;

    /*
     * For CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 808358a:	2d03      	cmp	r5, #3
 808358c:	d001      	beq.n	8083592 <mbedtls_cipher_setkey+0x26>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 808358e:	2d05      	cmp	r5, #5
 8083590:	d102      	bne.n	8083598 <mbedtls_cipher_setkey+0x2c>
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode )
    {
        return ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 8083592:	69a3      	ldr	r3, [r4, #24]
                ctx->key_bitlen );
 8083594:	68db      	ldr	r3, [r3, #12]
 8083596:	e002      	b.n	808359e <mbedtls_cipher_setkey+0x32>
    }

    if( MBEDTLS_DECRYPT == operation )
 8083598:	b923      	cbnz	r3, 80835a4 <mbedtls_cipher_setkey+0x38>
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 808359a:	69a3      	ldr	r3, [r4, #24]
                ctx->key_bitlen );
 808359c:	691b      	ldr	r3, [r3, #16]
 808359e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
}
 80835a0:	bc30      	pop	{r4, r5}
                ctx->key_bitlen );
    }

    if( MBEDTLS_DECRYPT == operation )
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
                ctx->key_bitlen );
 80835a2:	4718      	bx	r3

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
}
 80835a4:	4801      	ldr	r0, [pc, #4]	; (80835ac <mbedtls_cipher_setkey+0x40>)
 80835a6:	bc30      	pop	{r4, r5}
 80835a8:	4770      	bx	lr
 80835aa:	bf00      	nop
 80835ac:	ffff9f00 	.word	0xffff9f00

080835b0 <mbedtls_cipher_set_iv>:

int mbedtls_cipher_set_iv( mbedtls_cipher_context_t *ctx,
                   const unsigned char *iv, size_t iv_len )
{
 80835b0:	b538      	push	{r3, r4, r5, lr}
    size_t actual_iv_size;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == iv )
 80835b2:	4604      	mov	r4, r0
 80835b4:	b1b0      	cbz	r0, 80835e4 <mbedtls_cipher_set_iv+0x34>
 80835b6:	6803      	ldr	r3, [r0, #0]
 80835b8:	b1a3      	cbz	r3, 80835e4 <mbedtls_cipher_set_iv+0x34>
 80835ba:	b199      	cbz	r1, 80835e4 <mbedtls_cipher_set_iv+0x34>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    /* avoid buffer overflow in ctx->iv */
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
 80835bc:	2a10      	cmp	r2, #16
 80835be:	d80f      	bhi.n	80835e0 <mbedtls_cipher_set_iv+0x30>
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_IV_LEN ) != 0 )
 80835c0:	6918      	ldr	r0, [r3, #16]
 80835c2:	07c0      	lsls	r0, r0, #31
 80835c4:	d403      	bmi.n	80835ce <mbedtls_cipher_set_iv+0x1e>
        actual_iv_size = iv_len;
    else
    {
        actual_iv_size = ctx->cipher_info->iv_size;
 80835c6:	68dd      	ldr	r5, [r3, #12]

        /* avoid reading past the end of input buffer */
        if( actual_iv_size > iv_len )
 80835c8:	42aa      	cmp	r2, r5
 80835ca:	d201      	bcs.n	80835d0 <mbedtls_cipher_set_iv+0x20>
 80835cc:	e00a      	b.n	80835e4 <mbedtls_cipher_set_iv+0x34>
 80835ce:	4615      	mov	r5, r2
            return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    memcpy( ctx->iv, iv, actual_iv_size );
 80835d0:	462a      	mov	r2, r5
 80835d2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80835d6:	f010 fad2 	bl	8093b7e <memcpy>
    ctx->iv_size = actual_iv_size;
 80835da:	63a5      	str	r5, [r4, #56]	; 0x38

    return( 0 );
 80835dc:	2000      	movs	r0, #0
 80835de:	bd38      	pop	{r3, r4, r5, pc}
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == iv )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    /* avoid buffer overflow in ctx->iv */
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 80835e0:	4801      	ldr	r0, [pc, #4]	; (80835e8 <mbedtls_cipher_set_iv+0x38>)
 80835e2:	bd38      	pop	{r3, r4, r5, pc}
                   const unsigned char *iv, size_t iv_len )
{
    size_t actual_iv_size;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == iv )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80835e4:	4801      	ldr	r0, [pc, #4]	; (80835ec <mbedtls_cipher_set_iv+0x3c>)

    memcpy( ctx->iv, iv, actual_iv_size );
    ctx->iv_size = actual_iv_size;

    return( 0 );
}
 80835e6:	bd38      	pop	{r3, r4, r5, pc}
 80835e8:	ffff9f80 	.word	0xffff9f80
 80835ec:	ffff9f00 	.word	0xffff9f00

080835f0 <mbedtls_cipher_reset>:

int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
 80835f0:	b128      	cbz	r0, 80835fe <mbedtls_cipher_reset+0xe>
 80835f2:	6803      	ldr	r3, [r0, #0]
 80835f4:	b11b      	cbz	r3, 80835fe <mbedtls_cipher_reset+0xe>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    ctx->unprocessed_len = 0;
 80835f6:	2300      	movs	r3, #0
 80835f8:	6243      	str	r3, [r0, #36]	; 0x24

    return( 0 );
 80835fa:	4618      	mov	r0, r3
 80835fc:	4770      	bx	lr
}

int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80835fe:	4801      	ldr	r0, [pc, #4]	; (8083604 <mbedtls_cipher_reset+0x14>)

    ctx->unprocessed_len = 0;

    return( 0 );
}
 8083600:	4770      	bx	lr
 8083602:	bf00      	nop
 8083604:	ffff9f00 	.word	0xffff9f00

08083608 <mbedtls_cipher_update>:
}
#endif /* MBEDTLS_GCM_C */

int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen )
{
 8083608:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808360c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8083610:	460f      	mov	r7, r1
 8083612:	4615      	mov	r5, r2
 8083614:	4699      	mov	r9, r3
    int ret;
    size_t block_size = 0;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 8083616:	4604      	mov	r4, r0
 8083618:	b908      	cbnz	r0, 808361e <mbedtls_cipher_update+0x16>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 808361a:	485c      	ldr	r0, [pc, #368]	; (808378c <mbedtls_cipher_update+0x184>)
 808361c:	e0b2      	b.n	8083784 <mbedtls_cipher_update+0x17c>
                   size_t ilen, unsigned char *output, size_t *olen )
{
    int ret;
    size_t block_size = 0;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 808361e:	6803      	ldr	r3, [r0, #0]
 8083620:	2b00      	cmp	r3, #0
 8083622:	d0fa      	beq.n	808361a <mbedtls_cipher_update+0x12>
 8083624:	f1b8 0f00 	cmp.w	r8, #0
 8083628:	d0f7      	beq.n	808361a <mbedtls_cipher_update+0x12>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    *olen = 0;
 808362a:	2300      	movs	r3, #0
 808362c:	f8c8 3000 	str.w	r3, [r8]
    block_size = mbedtls_cipher_get_block_size( ctx );
 8083630:	f7ff fe86 	bl	8083340 <mbedtls_cipher_get_block_size>

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 8083634:	6823      	ldr	r3, [r4, #0]
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    *olen = 0;
    block_size = mbedtls_cipher_get_block_size( ctx );
 8083636:	4606      	mov	r6, r0

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 8083638:	785b      	ldrb	r3, [r3, #1]
 808363a:	2b01      	cmp	r3, #1
 808363c:	d110      	bne.n	8083660 <mbedtls_cipher_update+0x58>
    {
        if( ilen != block_size )
 808363e:	4290      	cmp	r0, r2
 8083640:	d17d      	bne.n	808373e <mbedtls_cipher_update+0x136>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;
 8083642:	f8c8 0000 	str.w	r0, [r8]

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 8083646:	6823      	ldr	r3, [r4, #0]
 8083648:	460a      	mov	r2, r1
 808364a:	699b      	ldr	r3, [r3, #24]
 808364c:	f994 1008 	ldrsb.w	r1, [r4, #8]
 8083650:	685d      	ldr	r5, [r3, #4]
 8083652:	464b      	mov	r3, r9
 8083654:	46ac      	mov	ip, r5
 8083656:	6be0      	ldr	r0, [r4, #60]	; 0x3c
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 8083658:	b003      	add	sp, #12
 808365a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if( ilen != block_size )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 808365e:	4760      	bx	ip

        return( 0 );
    }

#if defined(MBEDTLS_GCM_C)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
 8083660:	2b06      	cmp	r3, #6
 8083662:	d10a      	bne.n	808367a <mbedtls_cipher_update+0x72>
    {
        *olen = ilen;
 8083664:	f8c8 2000 	str.w	r2, [r8]
        return mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
                           output );
 8083668:	464b      	mov	r3, r9
 808366a:	460a      	mov	r2, r1
 808366c:	4629      	mov	r1, r5
 808366e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 8083670:	b003      	add	sp, #12
 8083672:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(MBEDTLS_GCM_C)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
    {
        *olen = ilen;
        return mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
                           output );
 8083676:	f004 b9f1 	b.w	8087a5c <mbedtls_gcm_update>
    }
#endif

    if ( 0 == block_size )
 808367a:	2800      	cmp	r0, #0
 808367c:	d061      	beq.n	8083742 <mbedtls_cipher_update+0x13a>
    {
        return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;
    }

    if( input == output &&
 808367e:	4549      	cmp	r1, r9
 8083680:	d108      	bne.n	8083694 <mbedtls_cipher_update+0x8c>
 8083682:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8083684:	2a00      	cmp	r2, #0
 8083686:	d1c8      	bne.n	808361a <mbedtls_cipher_update+0x12>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 8083688:	fbb5 f2f0 	udiv	r2, r5, r0
 808368c:	fb00 5212 	mls	r2, r0, r2, r5
 8083690:	2a00      	cmp	r2, #0
 8083692:	d1c2      	bne.n	808361a <mbedtls_cipher_update+0x12>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_CBC )
 8083694:	2b02      	cmp	r3, #2
 8083696:	d156      	bne.n	8083746 <mbedtls_cipher_update+0x13e>
        size_t copy_len = 0;

        /*
         * If there is not enough data for a full block, cache it.
         */
        if( ( ctx->operation == MBEDTLS_DECRYPT && NULL != ctx->add_padding &&
 8083698:	f994 3008 	ldrsb.w	r3, [r4, #8]
 808369c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 808369e:	b92b      	cbnz	r3, 80836ac <mbedtls_cipher_update+0xa4>
 80836a0:	68e3      	ldr	r3, [r4, #12]
 80836a2:	b12b      	cbz	r3, 80836b0 <mbedtls_cipher_update+0xa8>
 80836a4:	1a33      	subs	r3, r6, r0
 80836a6:	429d      	cmp	r5, r3
 80836a8:	d80f      	bhi.n	80836ca <mbedtls_cipher_update+0xc2>
 80836aa:	e004      	b.n	80836b6 <mbedtls_cipher_update+0xae>
                ilen <= block_size - ctx->unprocessed_len ) ||
            ( ctx->operation == MBEDTLS_DECRYPT && NULL == ctx->add_padding &&
                ilen < block_size - ctx->unprocessed_len ) ||
 80836ac:	2b01      	cmp	r3, #1
 80836ae:	d10c      	bne.n	80836ca <mbedtls_cipher_update+0xc2>
             ( ctx->operation == MBEDTLS_ENCRYPT &&
 80836b0:	1a33      	subs	r3, r6, r0
 80836b2:	429d      	cmp	r5, r3
 80836b4:	d209      	bcs.n	80836ca <mbedtls_cipher_update+0xc2>
                ilen < block_size - ctx->unprocessed_len ) )
        {
            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
                    ilen );
 80836b6:	4420      	add	r0, r4
 80836b8:	462a      	mov	r2, r5
 80836ba:	4639      	mov	r1, r7
 80836bc:	3014      	adds	r0, #20
 80836be:	f010 fa5e 	bl	8093b7e <memcpy>

            ctx->unprocessed_len += ilen;
 80836c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80836c4:	441d      	add	r5, r3
 80836c6:	6265      	str	r5, [r4, #36]	; 0x24
 80836c8:	e037      	b.n	808373a <mbedtls_cipher_update+0x132>
        }

        /*
         * Process cached data first
         */
        if( 0 != ctx->unprocessed_len )
 80836ca:	b310      	cbz	r0, 8083712 <mbedtls_cipher_update+0x10a>
        {
            copy_len = block_size - ctx->unprocessed_len;
 80836cc:	ebc0 0a06 	rsb	sl, r0, r6

            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
                    copy_len );
 80836d0:	4420      	add	r0, r4
 80836d2:	4652      	mov	r2, sl
 80836d4:	4639      	mov	r1, r7
 80836d6:	3014      	adds	r0, #20
 80836d8:	f010 fa51 	bl	8093b7e <memcpy>

            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 80836dc:	4623      	mov	r3, r4
 80836de:	f853 2b14 	ldr.w	r2, [r3], #20
 80836e2:	f994 1008 	ldrsb.w	r1, [r4, #8]
 80836e6:	6992      	ldr	r2, [r2, #24]
 80836e8:	e88d 0208 	stmia.w	sp, {r3, r9}
 80836ec:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80836f0:	f8d2 b008 	ldr.w	fp, [r2, #8]
 80836f4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80836f6:	4632      	mov	r2, r6
 80836f8:	47d8      	blx	fp
 80836fa:	2800      	cmp	r0, #0
 80836fc:	d142      	bne.n	8083784 <mbedtls_cipher_update+0x17c>
                    ctx->unprocessed_data, output ) ) )
            {
                return( ret );
            }

            *olen += block_size;
 80836fe:	f8d8 3000 	ldr.w	r3, [r8]
            output += block_size;
 8083702:	44b1      	add	r9, r6
                    ctx->unprocessed_data, output ) ) )
            {
                return( ret );
            }

            *olen += block_size;
 8083704:	4433      	add	r3, r6
 8083706:	f8c8 3000 	str.w	r3, [r8]
            output += block_size;
            ctx->unprocessed_len = 0;

            input += copy_len;
 808370a:	4457      	add	r7, sl
                return( ret );
            }

            *olen += block_size;
            output += block_size;
            ctx->unprocessed_len = 0;
 808370c:	6260      	str	r0, [r4, #36]	; 0x24

            input += copy_len;
            ilen -= copy_len;
 808370e:	ebca 0505 	rsb	r5, sl, r5
        }

        /*
         * Cache final, incomplete block
         */
        if( 0 != ilen )
 8083712:	b195      	cbz	r5, 808373a <mbedtls_cipher_update+0x132>

            /* Encryption: only cache partial blocks
             * Decryption w/ padding: always keep at least one whole block
             * Decryption w/o padding: only cache partial blocks
             */
            copy_len = ilen % block_size;
 8083714:	fbb5 faf6 	udiv	sl, r5, r6
 8083718:	fb06 5a1a 	mls	sl, r6, sl, r5
            if( copy_len == 0 &&
 808371c:	f1ba 0f00 	cmp.w	sl, #0
 8083720:	d013      	beq.n	808374a <mbedtls_cipher_update+0x142>
                NULL != ctx->add_padding)
            {
                copy_len = block_size;
            }

            memcpy( ctx->unprocessed_data, &( input[ilen - copy_len] ),
 8083722:	ebca 0505 	rsb	r5, sl, r5
                    copy_len );
 8083726:	4652      	mov	r2, sl
 8083728:	1979      	adds	r1, r7, r5
 808372a:	f104 0014 	add.w	r0, r4, #20
 808372e:	f010 fa26 	bl	8093b7e <memcpy>

            ctx->unprocessed_len += copy_len;
 8083732:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8083734:	4453      	add	r3, sl
 8083736:	6263      	str	r3, [r4, #36]	; 0x24
        }

        /*
         * Process remaining full blocks
         */
        if( ilen )
 8083738:	b995      	cbnz	r5, 8083760 <mbedtls_cipher_update+0x158>
            }

            *olen += ilen;
        }

        return( 0 );
 808373a:	2000      	movs	r0, #0
 808373c:	e022      	b.n	8083784 <mbedtls_cipher_update+0x17c>
    block_size = mbedtls_cipher_get_block_size( ctx );

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
    {
        if( ilen != block_size )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 808373e:	4814      	ldr	r0, [pc, #80]	; (8083790 <mbedtls_cipher_update+0x188>)
 8083740:	e020      	b.n	8083784 <mbedtls_cipher_update+0x17c>
    }
#endif

    if ( 0 == block_size )
    {
        return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;
 8083742:	4814      	ldr	r0, [pc, #80]	; (8083794 <mbedtls_cipher_update+0x18c>)
 8083744:	e01e      	b.n	8083784 <mbedtls_cipher_update+0x17c>

        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8083746:	4814      	ldr	r0, [pc, #80]	; (8083798 <mbedtls_cipher_update+0x190>)
 8083748:	e01c      	b.n	8083784 <mbedtls_cipher_update+0x17c>
            /* Encryption: only cache partial blocks
             * Decryption w/ padding: always keep at least one whole block
             * Decryption w/o padding: only cache partial blocks
             */
            copy_len = ilen % block_size;
            if( copy_len == 0 &&
 808374a:	f994 3008 	ldrsb.w	r3, [r4, #8]
 808374e:	2b00      	cmp	r3, #0
 8083750:	d1e7      	bne.n	8083722 <mbedtls_cipher_update+0x11a>
                ctx->operation == MBEDTLS_DECRYPT &&
 8083752:	68e3      	ldr	r3, [r4, #12]
 8083754:	2b00      	cmp	r3, #0
 8083756:	bf0c      	ite	eq
 8083758:	f04f 0a00 	moveq.w	sl, #0
 808375c:	46b2      	movne	sl, r6
 808375e:	e7e0      	b.n	8083722 <mbedtls_cipher_update+0x11a>
        /*
         * Process remaining full blocks
         */
        if( ilen )
        {
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8083760:	6823      	ldr	r3, [r4, #0]
 8083762:	f994 1008 	ldrsb.w	r1, [r4, #8]
 8083766:	699b      	ldr	r3, [r3, #24]
 8083768:	e88d 0280 	stmia.w	sp, {r7, r9}
 808376c:	462a      	mov	r2, r5
 808376e:	689e      	ldr	r6, [r3, #8]
 8083770:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8083772:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8083776:	47b0      	blx	r6
 8083778:	b920      	cbnz	r0, 8083784 <mbedtls_cipher_update+0x17c>
                    ctx->operation, ilen, ctx->iv, input, output ) ) )
            {
                return( ret );
            }

            *olen += ilen;
 808377a:	f8d8 3000 	ldr.w	r3, [r8]
 808377e:	441d      	add	r5, r3
 8083780:	f8c8 5000 	str.w	r5, [r8]
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 8083784:	b003      	add	sp, #12
 8083786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808378a:	bf00      	nop
 808378c:	ffff9f00 	.word	0xffff9f00
 8083790:	ffff9d80 	.word	0xffff9d80
 8083794:	ffff9c80 	.word	0xffff9c80
 8083798:	ffff9f80 	.word	0xffff9f80

0808379c <mbedtls_cipher_finish>:
}
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

int mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,
                   unsigned char *output, size_t *olen )
{
 808379c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 808379e:	460e      	mov	r6, r1
 80837a0:	4615      	mov	r5, r2
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 80837a2:	4604      	mov	r4, r0
 80837a4:	2800      	cmp	r0, #0
 80837a6:	d052      	beq.n	808384e <mbedtls_cipher_finish+0xb2>
 80837a8:	6803      	ldr	r3, [r0, #0]
 80837aa:	2b00      	cmp	r3, #0
 80837ac:	d04f      	beq.n	808384e <mbedtls_cipher_finish+0xb2>
 80837ae:	2a00      	cmp	r2, #0
 80837b0:	d04d      	beq.n	808384e <mbedtls_cipher_finish+0xb2>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *olen = 0;
 80837b2:	2300      	movs	r3, #0
 80837b4:	6013      	str	r3, [r2, #0]

    if( MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 80837b6:	6807      	ldr	r7, [r0, #0]
 80837b8:	787a      	ldrb	r2, [r7, #1]
 80837ba:	2a03      	cmp	r2, #3
 80837bc:	d04d      	beq.n	808385a <mbedtls_cipher_finish+0xbe>
 80837be:	1f51      	subs	r1, r2, #5
 80837c0:	2902      	cmp	r1, #2
 80837c2:	d94a      	bls.n	808385a <mbedtls_cipher_finish+0xbe>
        MBEDTLS_MODE_STREAM == ctx->cipher_info->mode )
    {
        return( 0 );
    }

    if( MBEDTLS_MODE_ECB == ctx->cipher_info->mode )
 80837c4:	2a01      	cmp	r2, #1
 80837c6:	d101      	bne.n	80837cc <mbedtls_cipher_finish+0x30>
    {
        if( ctx->unprocessed_len != 0 )
 80837c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80837ca:	e016      	b.n	80837fa <mbedtls_cipher_finish+0x5e>

        return( 0 );
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( MBEDTLS_MODE_CBC == ctx->cipher_info->mode )
 80837cc:	2a02      	cmp	r2, #2
 80837ce:	d140      	bne.n	8083852 <mbedtls_cipher_finish+0xb6>
    {
        int ret = 0;

        if( MBEDTLS_ENCRYPT == ctx->operation )
 80837d0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80837d4:	2b01      	cmp	r3, #1
 80837d6:	d109      	bne.n	80837ec <mbedtls_cipher_finish+0x50>
        {
            /* check for 'no padding' mode */
            if( NULL == ctx->add_padding )
 80837d8:	68c3      	ldr	r3, [r0, #12]
 80837da:	2b00      	cmp	r3, #0
 80837dc:	d0f4      	beq.n	80837c8 <mbedtls_cipher_finish+0x2c>
static inline int mbedtls_cipher_get_iv_size( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
        return 0;

    if( ctx->iv_size != 0 )
 80837de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
                    return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

                return( 0 );
            }

            ctx->add_padding( ctx->unprocessed_data, mbedtls_cipher_get_iv_size( ctx ),
 80837e0:	3014      	adds	r0, #20
 80837e2:	b901      	cbnz	r1, 80837e6 <mbedtls_cipher_finish+0x4a>
        return (int) ctx->iv_size;

    return (int) ctx->cipher_info->iv_size;
 80837e4:	68f9      	ldr	r1, [r7, #12]
                    ctx->unprocessed_len );
 80837e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80837e8:	4798      	blx	r3
 80837ea:	e00b      	b.n	8083804 <mbedtls_cipher_finish+0x68>
        }
        else if( mbedtls_cipher_get_block_size( ctx ) != ctx->unprocessed_len )
 80837ec:	f7ff fda8 	bl	8083340 <mbedtls_cipher_get_block_size>
 80837f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80837f2:	4298      	cmp	r0, r3
 80837f4:	d006      	beq.n	8083804 <mbedtls_cipher_finish+0x68>
        {
            /*
             * For decrypt operations, expect a full block,
             * or an empty block if no padding
             */
            if( NULL == ctx->add_padding && 0 == ctx->unprocessed_len )
 80837f6:	68e2      	ldr	r2, [r4, #12]
 80837f8:	bb6a      	cbnz	r2, 8083856 <mbedtls_cipher_finish+0xba>
    if( MBEDTLS_MODE_ECB == ctx->cipher_info->mode )
    {
        if( ctx->unprocessed_len != 0 )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        return( 0 );
 80837fa:	2b00      	cmp	r3, #0
 80837fc:	4818      	ldr	r0, [pc, #96]	; (8083860 <mbedtls_cipher_finish+0xc4>)
 80837fe:	bf08      	it	eq
 8083800:	2000      	moveq	r0, #0
 8083802:	e02b      	b.n	808385c <mbedtls_cipher_finish+0xc0>

            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
        }

        /* cipher block */
        if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8083804:	4620      	mov	r0, r4
 8083806:	f7ff fd9b 	bl	8083340 <mbedtls_cipher_get_block_size>
 808380a:	4623      	mov	r3, r4
 808380c:	f853 2b14 	ldr.w	r2, [r3], #20
 8083810:	f994 1008 	ldrsb.w	r1, [r4, #8]
 8083814:	6992      	ldr	r2, [r2, #24]
 8083816:	e88d 0048 	stmia.w	sp, {r3, r6}
 808381a:	f104 0328 	add.w	r3, r4, #40	; 0x28
 808381e:	6897      	ldr	r7, [r2, #8]
 8083820:	4602      	mov	r2, r0
 8083822:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8083824:	47b8      	blx	r7
 8083826:	4603      	mov	r3, r0
 8083828:	b9b8      	cbnz	r0, 808385a <mbedtls_cipher_finish+0xbe>
        {
            return( ret );
        }

        /* Set output size for decryption */
        if( MBEDTLS_DECRYPT == ctx->operation )
 808382a:	f994 2008 	ldrsb.w	r2, [r4, #8]
            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 808382e:	4620      	mov	r0, r4
        {
            return( ret );
        }

        /* Set output size for decryption */
        if( MBEDTLS_DECRYPT == ctx->operation )
 8083830:	b94a      	cbnz	r2, 8083846 <mbedtls_cipher_finish+0xaa>
            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 8083832:	f7ff fd85 	bl	8083340 <mbedtls_cipher_get_block_size>
                                     olen );
 8083836:	462a      	mov	r2, r5
 8083838:	4601      	mov	r1, r0
 808383a:	4630      	mov	r0, r6
 808383c:	6923      	ldr	r3, [r4, #16]
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 808383e:	b003      	add	sp, #12
 8083840:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        }

        /* Set output size for decryption */
        if( MBEDTLS_DECRYPT == ctx->operation )
            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
                                     olen );
 8083844:	4718      	bx	r3

        /* Set output size for encryption */
        *olen = mbedtls_cipher_get_block_size( ctx );
 8083846:	f7ff fd7b 	bl	8083340 <mbedtls_cipher_get_block_size>
 808384a:	6028      	str	r0, [r5, #0]
 808384c:	e005      	b.n	808385a <mbedtls_cipher_finish+0xbe>

int mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,
                   unsigned char *output, size_t *olen )
{
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 808384e:	4805      	ldr	r0, [pc, #20]	; (8083864 <mbedtls_cipher_finish+0xc8>)
 8083850:	e004      	b.n	808385c <mbedtls_cipher_finish+0xc0>
    }
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8083852:	4805      	ldr	r0, [pc, #20]	; (8083868 <mbedtls_cipher_finish+0xcc>)
 8083854:	e002      	b.n	808385c <mbedtls_cipher_finish+0xc0>
             * or an empty block if no padding
             */
            if( NULL == ctx->add_padding && 0 == ctx->unprocessed_len )
                return( 0 );

            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 8083856:	4802      	ldr	r0, [pc, #8]	; (8083860 <mbedtls_cipher_finish+0xc4>)
 8083858:	e000      	b.n	808385c <mbedtls_cipher_finish+0xc0>
        }

        /* cipher block */
        if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 808385a:	4618      	mov	r0, r3
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 808385c:	b003      	add	sp, #12
 808385e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083860:	ffff9d80 	.word	0xffff9d80
 8083864:	ffff9f00 	.word	0xffff9f00
 8083868:	ffff9f80 	.word	0xffff9f80

0808386c <mbedtls_cipher_set_padding_mode>:

#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx, mbedtls_cipher_padding_t mode )
{
    if( NULL == ctx ||
 808386c:	b308      	cbz	r0, 80838b2 <mbedtls_cipher_set_padding_mode+0x46>
        MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
 808386e:	6803      	ldr	r3, [r0, #0]
}

#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx, mbedtls_cipher_padding_t mode )
{
    if( NULL == ctx ||
 8083870:	785b      	ldrb	r3, [r3, #1]
 8083872:	2b02      	cmp	r3, #2
 8083874:	d11d      	bne.n	80838b2 <mbedtls_cipher_set_padding_mode+0x46>
        MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    switch( mode )
 8083876:	2904      	cmp	r1, #4
 8083878:	d81d      	bhi.n	80838b6 <mbedtls_cipher_set_padding_mode+0x4a>
 808387a:	e8df f001 	tbb	[pc, r1]
 808387e:	0703      	.short	0x0703
 8083880:	110d      	.short	0x110d
 8083882:	15          	.byte	0x15
 8083883:	00          	.byte	0x00
    {
#if defined(MBEDTLS_CIPHER_PADDING_PKCS7)
    case MBEDTLS_PADDING_PKCS7:
        ctx->add_padding = add_pkcs_padding;
 8083884:	4b0d      	ldr	r3, [pc, #52]	; (80838bc <mbedtls_cipher_set_padding_mode+0x50>)
 8083886:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_pkcs_padding;
 8083888:	4b0d      	ldr	r3, [pc, #52]	; (80838c0 <mbedtls_cipher_set_padding_mode+0x54>)
 808388a:	e002      	b.n	8083892 <mbedtls_cipher_set_padding_mode+0x26>
        break;
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS)
    case MBEDTLS_PADDING_ONE_AND_ZEROS:
        ctx->add_padding = add_one_and_zeros_padding;
 808388c:	4b0d      	ldr	r3, [pc, #52]	; (80838c4 <mbedtls_cipher_set_padding_mode+0x58>)
 808388e:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_one_and_zeros_padding;
 8083890:	4b0d      	ldr	r3, [pc, #52]	; (80838c8 <mbedtls_cipher_set_padding_mode+0x5c>)
 8083892:	6103      	str	r3, [r0, #16]

    default:
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 8083894:	2000      	movs	r0, #0
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS)
    case MBEDTLS_PADDING_ONE_AND_ZEROS:
        ctx->add_padding = add_one_and_zeros_padding;
        ctx->get_padding = get_one_and_zeros_padding;
        break;
 8083896:	4770      	bx	lr
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN)
    case MBEDTLS_PADDING_ZEROS_AND_LEN:
        ctx->add_padding = add_zeros_and_len_padding;
 8083898:	4b0c      	ldr	r3, [pc, #48]	; (80838cc <mbedtls_cipher_set_padding_mode+0x60>)
 808389a:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_zeros_and_len_padding;
 808389c:	4b0c      	ldr	r3, [pc, #48]	; (80838d0 <mbedtls_cipher_set_padding_mode+0x64>)
 808389e:	e7f8      	b.n	8083892 <mbedtls_cipher_set_padding_mode+0x26>
        break;
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ZEROS)
    case MBEDTLS_PADDING_ZEROS:
        ctx->add_padding = add_zeros_padding;
 80838a0:	4b0c      	ldr	r3, [pc, #48]	; (80838d4 <mbedtls_cipher_set_padding_mode+0x68>)
 80838a2:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_zeros_padding;
 80838a4:	4b0c      	ldr	r3, [pc, #48]	; (80838d8 <mbedtls_cipher_set_padding_mode+0x6c>)
 80838a6:	e7f4      	b.n	8083892 <mbedtls_cipher_set_padding_mode+0x26>
        break;
#endif
    case MBEDTLS_PADDING_NONE:
        ctx->add_padding = NULL;
        ctx->get_padding = get_no_padding;
 80838a8:	4a0c      	ldr	r2, [pc, #48]	; (80838dc <mbedtls_cipher_set_padding_mode+0x70>)
        ctx->add_padding = add_zeros_padding;
        ctx->get_padding = get_zeros_padding;
        break;
#endif
    case MBEDTLS_PADDING_NONE:
        ctx->add_padding = NULL;
 80838aa:	2300      	movs	r3, #0
 80838ac:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_no_padding;
 80838ae:	6102      	str	r2, [r0, #16]
 80838b0:	e7f0      	b.n	8083894 <mbedtls_cipher_set_padding_mode+0x28>
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx, mbedtls_cipher_padding_t mode )
{
    if( NULL == ctx ||
        MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80838b2:	480b      	ldr	r0, [pc, #44]	; (80838e0 <mbedtls_cipher_set_padding_mode+0x74>)
 80838b4:	4770      	bx	lr
        ctx->add_padding = NULL;
        ctx->get_padding = get_no_padding;
        break;

    default:
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 80838b6:	480b      	ldr	r0, [pc, #44]	; (80838e4 <mbedtls_cipher_set_padding_mode+0x78>)
    }

    return( 0 );
}
 80838b8:	4770      	bx	lr
 80838ba:	bf00      	nop
 80838bc:	0808334b 	.word	0x0808334b
 80838c0:	08083365 	.word	0x08083365
 80838c4:	080833b9 	.word	0x080833b9
 80838c8:	08083471 	.word	0x08083471
 80838cc:	080833d5 	.word	0x080833d5
 80838d0:	080833f9 	.word	0x080833f9
 80838d4:	08083449 	.word	0x08083449
 80838d8:	080834c1 	.word	0x080834c1
 80838dc:	0808345d 	.word	0x0808345d
 80838e0:	ffff9f00 	.word	0xffff9f00
 80838e4:	ffff9f80 	.word	0xffff9f80

080838e8 <mbedtls_cipher_setup>:

    mbedtls_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
}

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
 80838e8:	b538      	push	{r3, r4, r5, lr}
 80838ea:	4604      	mov	r4, r0
    if( NULL == cipher_info || NULL == ctx )
 80838ec:	460d      	mov	r5, r1
 80838ee:	b181      	cbz	r1, 8083912 <mbedtls_cipher_setup+0x2a>
 80838f0:	b178      	cbz	r0, 8083912 <mbedtls_cipher_setup+0x2a>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 80838f2:	2240      	movs	r2, #64	; 0x40
 80838f4:	2100      	movs	r1, #0
 80838f6:	f010 f968 	bl	8093bca <memset>

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
 80838fa:	69ab      	ldr	r3, [r5, #24]
 80838fc:	695b      	ldr	r3, [r3, #20]
 80838fe:	4798      	blx	r3
 8083900:	63e0      	str	r0, [r4, #60]	; 0x3c
 8083902:	b140      	cbz	r0, 8083916 <mbedtls_cipher_setup+0x2e>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );

    ctx->cipher_info = cipher_info;
 8083904:	6025      	str	r5, [r4, #0]
#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)
    /*
     * Ignore possible errors caused by a cipher mode that doesn't use padding
     */
#if defined(MBEDTLS_CIPHER_PADDING_PKCS7)
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_PKCS7 );
 8083906:	2100      	movs	r1, #0
 8083908:	4620      	mov	r0, r4
 808390a:	f7ff ffaf 	bl	808386c <mbedtls_cipher_set_padding_mode>
#else
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
 808390e:	2000      	movs	r0, #0
 8083910:	bd38      	pop	{r3, r4, r5, pc}
}

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
    if( NULL == cipher_info || NULL == ctx )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8083912:	4802      	ldr	r0, [pc, #8]	; (808391c <mbedtls_cipher_setup+0x34>)
 8083914:	bd38      	pop	{r3, r4, r5, pc}

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
 8083916:	4802      	ldr	r0, [pc, #8]	; (8083920 <mbedtls_cipher_setup+0x38>)
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
}
 8083918:	bd38      	pop	{r3, r4, r5, pc}
 808391a:	bf00      	nop
 808391c:	ffff9f00 	.word	0xffff9f00
 8083920:	ffff9e80 	.word	0xffff9e80

08083924 <mbedtls_cipher_crypt>:
 */
int mbedtls_cipher_crypt( mbedtls_cipher_context_t *ctx,
                  const unsigned char *iv, size_t iv_len,
                  const unsigned char *input, size_t ilen,
                  unsigned char *output, size_t *olen )
{
 8083924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8083926:	b085      	sub	sp, #20
 8083928:	4605      	mov	r5, r0
 808392a:	461f      	mov	r7, r3
 808392c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 808392e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    int ret;
    size_t finish_olen;

    if( ( ret = mbedtls_cipher_set_iv( ctx, iv, iv_len ) ) != 0 )
 8083930:	f7ff fe3e 	bl	80835b0 <mbedtls_cipher_set_iv>
 8083934:	b9b0      	cbnz	r0, 8083964 <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_reset( ctx ) ) != 0 )
 8083936:	4628      	mov	r0, r5
 8083938:	f7ff fe5a 	bl	80835f0 <mbedtls_cipher_reset>
 808393c:	b990      	cbnz	r0, 8083964 <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_update( ctx, input, ilen, output, olen ) ) != 0 )
 808393e:	9400      	str	r4, [sp, #0]
 8083940:	4633      	mov	r3, r6
 8083942:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8083944:	4639      	mov	r1, r7
 8083946:	4628      	mov	r0, r5
 8083948:	f7ff fe5e 	bl	8083608 <mbedtls_cipher_update>
 808394c:	b950      	cbnz	r0, 8083964 <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_finish( ctx, output + *olen, &finish_olen ) ) != 0 )
 808394e:	6821      	ldr	r1, [r4, #0]
 8083950:	aa03      	add	r2, sp, #12
 8083952:	4431      	add	r1, r6
 8083954:	4628      	mov	r0, r5
 8083956:	f7ff ff21 	bl	808379c <mbedtls_cipher_finish>
 808395a:	b918      	cbnz	r0, 8083964 <mbedtls_cipher_crypt+0x40>
        return( ret );

    *olen += finish_olen;
 808395c:	6822      	ldr	r2, [r4, #0]
 808395e:	9b03      	ldr	r3, [sp, #12]
 8083960:	4413      	add	r3, r2
 8083962:	6023      	str	r3, [r4, #0]

    return( 0 );
}
 8083964:	b005      	add	sp, #20
 8083966:	bdf0      	pop	{r4, r5, r6, r7, pc}

08083968 <mbedtls_cipher_auth_encrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 8083968:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 808396c:	6807      	ldr	r7, [r0, #0]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 808396e:	4614      	mov	r4, r2
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8083970:	787f      	ldrb	r7, [r7, #1]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 8083972:	9d07      	ldr	r5, [sp, #28]
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8083974:	2f06      	cmp	r7, #6
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 8083976:	9e08      	ldr	r6, [sp, #32]
 8083978:	9a09      	ldr	r2, [sp, #36]	; 0x24
 808397a:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 808397e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8083982:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8083986:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 808398a:	d112      	bne.n	80839b2 <mbedtls_cipher_auth_encrypt+0x4a>
    {
        *olen = ilen;
 808398c:	f8c9 2000 	str.w	r2, [r9]
        return( mbedtls_gcm_crypt_and_tag( (mbedtls_gcm_context *)ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
                                   iv, iv_len, ad, ad_len, input, output,
                                   tag_len, tag ) );
 8083990:	9308      	str	r3, [sp, #32]
 8083992:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8083996:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 808399a:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 808399e:	960a      	str	r6, [sp, #40]	; 0x28
 80839a0:	9509      	str	r5, [sp, #36]	; 0x24
 80839a2:	9407      	str	r4, [sp, #28]
 80839a4:	460b      	mov	r3, r1
                                     tag, tag_len ) );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 80839a6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
    {
        *olen = ilen;
        return( mbedtls_gcm_crypt_and_tag( (mbedtls_gcm_context *)ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
                                   iv, iv_len, ad, ad_len, input, output,
                                   tag_len, tag ) );
 80839aa:	2101      	movs	r1, #1
 80839ac:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80839ae:	f004 b940 	b.w	8087c32 <mbedtls_gcm_crypt_and_tag>
                                     tag, tag_len ) );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 80839b2:	4801      	ldr	r0, [pc, #4]	; (80839b8 <mbedtls_cipher_auth_encrypt+0x50>)
 80839b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80839b8:	ffff9f80 	.word	0xffff9f80

080839bc <mbedtls_cipher_auth_decrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 80839bc:	b530      	push	{r4, r5, lr}
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80839be:	6805      	ldr	r5, [r0, #0]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 80839c0:	b087      	sub	sp, #28
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80839c2:	786d      	ldrb	r5, [r5, #1]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 80839c4:	460c      	mov	r4, r1
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80839c6:	2d06      	cmp	r5, #6
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 80839c8:	990c      	ldr	r1, [sp, #48]	; 0x30
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80839ca:	d117      	bne.n	80839fc <mbedtls_cipher_auth_decrypt+0x40>
    {
        int ret;

        *olen = ilen;
 80839cc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80839ce:	6029      	str	r1, [r5, #0]
        ret = mbedtls_gcm_auth_decrypt( (mbedtls_gcm_context *)ctx->cipher_ctx, ilen,
                                iv, iv_len, ad, ad_len,
                                tag, tag_len, input, output );
 80839d0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80839d2:	9505      	str	r5, [sp, #20]
 80839d4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80839d6:	9504      	str	r5, [sp, #16]
 80839d8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80839da:	9503      	str	r5, [sp, #12]
 80839dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80839de:	9502      	str	r5, [sp, #8]
 80839e0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80839e2:	e88d 0028 	stmia.w	sp, {r3, r5}
 80839e6:	4613      	mov	r3, r2
 80839e8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80839ea:	4622      	mov	r2, r4
 80839ec:	f004 f946 	bl	8087c7c <mbedtls_gcm_auth_decrypt>

        if( ret == MBEDTLS_ERR_GCM_AUTH_FAILED )
            ret = MBEDTLS_ERR_CIPHER_AUTH_FAILED;
 80839f0:	4b04      	ldr	r3, [pc, #16]	; (8083a04 <mbedtls_cipher_auth_decrypt+0x48>)
 80839f2:	f110 0f12 	cmn.w	r0, #18
 80839f6:	bf08      	it	eq
 80839f8:	4618      	moveq	r0, r3
 80839fa:	e000      	b.n	80839fe <mbedtls_cipher_auth_decrypt+0x42>

        return( ret );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 80839fc:	4802      	ldr	r0, [pc, #8]	; (8083a08 <mbedtls_cipher_auth_decrypt+0x4c>)
}
 80839fe:	b007      	add	sp, #28
 8083a00:	bd30      	pop	{r4, r5, pc}
 8083a02:	bf00      	nop
 8083a04:	ffff9d00 	.word	0xffff9d00
 8083a08:	ffff9f80 	.word	0xffff9f80

08083a0c <mbedtls_asn1_get_len>:
 * ASN.1 DER decoding routines
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
 8083a0c:	b530      	push	{r4, r5, lr}
    if( ( end - *p ) < 1 )
 8083a0e:	6803      	ldr	r3, [r0, #0]
 8083a10:	1acd      	subs	r5, r1, r3
 8083a12:	2d00      	cmp	r5, #0
 8083a14:	dc02      	bgt.n	8083a1c <mbedtls_asn1_get_len+0x10>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8083a16:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 8083a1a:	bd30      	pop	{r4, r5, pc}

    if( ( **p & 0x80 ) == 0 )
 8083a1c:	781c      	ldrb	r4, [r3, #0]
 8083a1e:	f014 0f80 	tst.w	r4, #128	; 0x80
 8083a22:	d104      	bne.n	8083a2e <mbedtls_asn1_get_len+0x22>
        *len = *(*p)++;
 8083a24:	1c5c      	adds	r4, r3, #1
 8083a26:	6004      	str	r4, [r0, #0]
 8083a28:	781b      	ldrb	r3, [r3, #0]
 8083a2a:	6013      	str	r3, [r2, #0]
 8083a2c:	e036      	b.n	8083a9c <mbedtls_asn1_get_len+0x90>
    else
    {
        switch( **p & 0x7F )
 8083a2e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8083a32:	3c01      	subs	r4, #1
 8083a34:	2c03      	cmp	r4, #3
 8083a36:	d838      	bhi.n	8083aaa <mbedtls_asn1_get_len+0x9e>
 8083a38:	e8df f004 	tbb	[pc, r4]
 8083a3c:	20130902 	.word	0x20130902
        {
        case 1:
            if( ( end - *p ) < 2 )
 8083a40:	2d01      	cmp	r5, #1
 8083a42:	d0e8      	beq.n	8083a16 <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = (*p)[1];
 8083a44:	785b      	ldrb	r3, [r3, #1]
 8083a46:	6013      	str	r3, [r2, #0]
            (*p) += 2;
 8083a48:	6803      	ldr	r3, [r0, #0]
 8083a4a:	3302      	adds	r3, #2
 8083a4c:	e025      	b.n	8083a9a <mbedtls_asn1_get_len+0x8e>
            break;

        case 2:
            if( ( end - *p ) < 3 )
 8083a4e:	2d02      	cmp	r5, #2
 8083a50:	dde1      	ble.n	8083a16 <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 8083a52:	785c      	ldrb	r4, [r3, #1]
 8083a54:	789b      	ldrb	r3, [r3, #2]
 8083a56:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8083a5a:	6013      	str	r3, [r2, #0]
            (*p) += 3;
 8083a5c:	6803      	ldr	r3, [r0, #0]
 8083a5e:	3303      	adds	r3, #3
 8083a60:	e01b      	b.n	8083a9a <mbedtls_asn1_get_len+0x8e>
            break;

        case 3:
            if( ( end - *p ) < 4 )
 8083a62:	2d03      	cmp	r5, #3
 8083a64:	ddd7      	ble.n	8083a16 <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = ( (size_t)(*p)[1] << 16 ) |
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 8083a66:	789c      	ldrb	r4, [r3, #2]
 8083a68:	785d      	ldrb	r5, [r3, #1]
 8083a6a:	0224      	lsls	r4, r4, #8
 8083a6c:	78db      	ldrb	r3, [r3, #3]
 8083a6e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8083a72:	431c      	orrs	r4, r3
 8083a74:	6014      	str	r4, [r2, #0]
            (*p) += 4;
 8083a76:	6803      	ldr	r3, [r0, #0]
 8083a78:	3304      	adds	r3, #4
 8083a7a:	e00e      	b.n	8083a9a <mbedtls_asn1_get_len+0x8e>
            break;

        case 4:
            if( ( end - *p ) < 5 )
 8083a7c:	2d04      	cmp	r5, #4
 8083a7e:	ddca      	ble.n	8083a16 <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
 8083a80:	789c      	ldrb	r4, [r3, #2]
 8083a82:	785d      	ldrb	r5, [r3, #1]
 8083a84:	0424      	lsls	r4, r4, #16
 8083a86:	ea44 6505 	orr.w	r5, r4, r5, lsl #24
 8083a8a:	791c      	ldrb	r4, [r3, #4]
 8083a8c:	78db      	ldrb	r3, [r3, #3]
 8083a8e:	432c      	orrs	r4, r5
 8083a90:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8083a94:	6013      	str	r3, [r2, #0]
            (*p) += 5;
 8083a96:	6803      	ldr	r3, [r0, #0]
 8083a98:	3305      	adds	r3, #5
 8083a9a:	6003      	str	r3, [r0, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
 8083a9c:	6803      	ldr	r3, [r0, #0]
 8083a9e:	1ac9      	subs	r1, r1, r3
 8083aa0:	6813      	ldr	r3, [r2, #0]
 8083aa2:	428b      	cmp	r3, r1
 8083aa4:	d8b7      	bhi.n	8083a16 <mbedtls_asn1_get_len+0xa>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
 8083aa6:	2000      	movs	r0, #0
 8083aa8:	bd30      	pop	{r4, r5, pc}
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
            (*p) += 5;
            break;

        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 8083aaa:	f06f 0063 	mvn.w	r0, #99	; 0x63

    if( *len > (size_t) ( end - *p ) )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
}
 8083aae:	bd30      	pop	{r4, r5, pc}

08083ab0 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
 8083ab0:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
 8083ab2:	6804      	ldr	r4, [r0, #0]
 8083ab4:	1b0e      	subs	r6, r1, r4
 8083ab6:	2e00      	cmp	r6, #0
 8083ab8:	dd07      	ble.n	8083aca <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
 8083aba:	7826      	ldrb	r6, [r4, #0]
 8083abc:	429e      	cmp	r6, r3
 8083abe:	d107      	bne.n	8083ad0 <mbedtls_asn1_get_tag+0x20>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 8083ac0:	3401      	adds	r4, #1
 8083ac2:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
 8083ac4:	bc70      	pop	{r4, r5, r6}
    if( **p != tag )
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;

    return( mbedtls_asn1_get_len( p, end, len ) );
 8083ac6:	f7ff bfa1 	b.w	8083a0c <mbedtls_asn1_get_len>
int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8083aca:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 8083ace:	e001      	b.n	8083ad4 <mbedtls_asn1_get_tag+0x24>

    if( **p != tag )
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 8083ad0:	f06f 0061 	mvn.w	r0, #97	; 0x61

    (*p)++;

    return( mbedtls_asn1_get_len( p, end, len ) );
}
 8083ad4:	bc70      	pop	{r4, r5, r6}
 8083ad6:	4770      	bx	lr

08083ad8 <mbedtls_asn1_get_bool>:

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 8083ad8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 8083ada:	2301      	movs	r3, #1
}

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 8083adc:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 8083ade:	aa01      	add	r2, sp, #4
}

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 8083ae0:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 8083ae2:	f7ff ffe5 	bl	8083ab0 <mbedtls_asn1_get_tag>
 8083ae6:	b970      	cbnz	r0, 8083b06 <mbedtls_asn1_get_bool+0x2e>
        return( ret );

    if( len != 1 )
 8083ae8:	9b01      	ldr	r3, [sp, #4]
 8083aea:	2b01      	cmp	r3, #1
 8083aec:	d109      	bne.n	8083b02 <mbedtls_asn1_get_bool+0x2a>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = ( **p != 0 ) ? 1 : 0;
 8083aee:	6823      	ldr	r3, [r4, #0]
 8083af0:	781b      	ldrb	r3, [r3, #0]
 8083af2:	3300      	adds	r3, #0
 8083af4:	bf18      	it	ne
 8083af6:	2301      	movne	r3, #1
 8083af8:	602b      	str	r3, [r5, #0]
    (*p)++;
 8083afa:	6823      	ldr	r3, [r4, #0]
 8083afc:	3301      	adds	r3, #1
 8083afe:	6023      	str	r3, [r4, #0]

    return( 0 );
 8083b00:	e001      	b.n	8083b06 <mbedtls_asn1_get_bool+0x2e>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
        return( ret );

    if( len != 1 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 8083b02:	f06f 0063 	mvn.w	r0, #99	; 0x63

    *val = ( **p != 0 ) ? 1 : 0;
    (*p)++;

    return( 0 );
}
 8083b06:	b003      	add	sp, #12
 8083b08:	bd30      	pop	{r4, r5, pc}

08083b0a <mbedtls_asn1_get_int>:

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 8083b0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8083b0c:	2302      	movs	r3, #2
}

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 8083b0e:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8083b10:	aa01      	add	r2, sp, #4
}

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 8083b12:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8083b14:	f7ff ffcc 	bl	8083ab0 <mbedtls_asn1_get_tag>
 8083b18:	b9c8      	cbnz	r0, 8083b4e <mbedtls_asn1_get_int+0x44>
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
 8083b1a:	9b01      	ldr	r3, [sp, #4]
 8083b1c:	3b01      	subs	r3, #1
 8083b1e:	2b03      	cmp	r3, #3
 8083b20:	d813      	bhi.n	8083b4a <mbedtls_asn1_get_int+0x40>
 8083b22:	6823      	ldr	r3, [r4, #0]
 8083b24:	f993 3000 	ldrsb.w	r3, [r3]
 8083b28:	2b00      	cmp	r3, #0
 8083b2a:	db0e      	blt.n	8083b4a <mbedtls_asn1_get_int+0x40>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;
 8083b2c:	6028      	str	r0, [r5, #0]

    while( len-- > 0 )
 8083b2e:	9801      	ldr	r0, [sp, #4]
 8083b30:	1e43      	subs	r3, r0, #1
 8083b32:	9301      	str	r3, [sp, #4]
 8083b34:	b158      	cbz	r0, 8083b4e <mbedtls_asn1_get_int+0x44>
    {
        *val = ( *val << 8 ) | **p;
 8083b36:	6823      	ldr	r3, [r4, #0]
 8083b38:	682a      	ldr	r2, [r5, #0]
 8083b3a:	781b      	ldrb	r3, [r3, #0]
 8083b3c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8083b40:	602b      	str	r3, [r5, #0]
        (*p)++;
 8083b42:	6823      	ldr	r3, [r4, #0]
 8083b44:	3301      	adds	r3, #1
 8083b46:	6023      	str	r3, [r4, #0]
    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;

    while( len-- > 0 )
 8083b48:	e7f1      	b.n	8083b2e <mbedtls_asn1_get_int+0x24>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 8083b4a:	f06f 0063 	mvn.w	r0, #99	; 0x63
        *val = ( *val << 8 ) | **p;
        (*p)++;
    }

    return( 0 );
}
 8083b4e:	b003      	add	sp, #12
 8083b50:	bd30      	pop	{r4, r5, pc}

08083b52 <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
 8083b52:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8083b54:	2302      	movs	r3, #2

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
 8083b56:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8083b58:	aa01      	add	r2, sp, #4

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
 8083b5a:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8083b5c:	f7ff ffa8 	bl	8083ab0 <mbedtls_asn1_get_tag>
 8083b60:	b940      	cbnz	r0, 8083b74 <mbedtls_asn1_get_mpi+0x22>
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
 8083b62:	9a01      	ldr	r2, [sp, #4]
 8083b64:	6821      	ldr	r1, [r4, #0]
 8083b66:	4628      	mov	r0, r5
 8083b68:	f007 fedd 	bl	808b926 <mbedtls_mpi_read_binary>

    *p += len;
 8083b6c:	6822      	ldr	r2, [r4, #0]
 8083b6e:	9b01      	ldr	r3, [sp, #4]
 8083b70:	4413      	add	r3, r2
 8083b72:	6023      	str	r3, [r4, #0]

    return( ret );
}
 8083b74:	b003      	add	sp, #12
 8083b76:	bd30      	pop	{r4, r5, pc}

08083b78 <mbedtls_asn1_get_bitstring>:
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
 8083b78:	b570      	push	{r4, r5, r6, lr}
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 8083b7a:	2303      	movs	r3, #3
}
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
 8083b7c:	4604      	mov	r4, r0
 8083b7e:	460e      	mov	r6, r1
 8083b80:	4615      	mov	r5, r2
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 8083b82:	f7ff ff95 	bl	8083ab0 <mbedtls_asn1_get_tag>
 8083b86:	b9d8      	cbnz	r0, 8083bc0 <mbedtls_asn1_get_bitstring+0x48>
        return( ret );

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
 8083b88:	6813      	ldr	r3, [r2, #0]
 8083b8a:	b1a3      	cbz	r3, 8083bb6 <mbedtls_asn1_get_bitstring+0x3e>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    bs->len -= 1;
 8083b8c:	3b01      	subs	r3, #1
 8083b8e:	6013      	str	r3, [r2, #0]

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
 8083b90:	6823      	ldr	r3, [r4, #0]
 8083b92:	781b      	ldrb	r3, [r3, #0]
    if( bs->unused_bits > 7 )
 8083b94:	2b07      	cmp	r3, #7
    if( bs->len < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    bs->len -= 1;

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
 8083b96:	7113      	strb	r3, [r2, #4]
    if( bs->unused_bits > 7 )
 8083b98:	d810      	bhi.n	8083bbc <mbedtls_asn1_get_bitstring+0x44>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    (*p)++;
 8083b9a:	6823      	ldr	r3, [r4, #0]
 8083b9c:	3301      	adds	r3, #1
 8083b9e:	6023      	str	r3, [r4, #0]

    /* Get actual bitstring */
    bs->p = *p;
 8083ba0:	6093      	str	r3, [r2, #8]
    *p += bs->len;
 8083ba2:	6822      	ldr	r2, [r4, #0]
 8083ba4:	682b      	ldr	r3, [r5, #0]
 8083ba6:	4413      	add	r3, r2

    if( *p != end )
 8083ba8:	429e      	cmp	r6, r3
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    (*p)++;

    /* Get actual bitstring */
    bs->p = *p;
    *p += bs->len;
 8083baa:	6023      	str	r3, [r4, #0]

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 8083bac:	bf14      	ite	ne
 8083bae:	f06f 0065 	mvnne.w	r0, #101	; 0x65
 8083bb2:	2000      	moveq	r0, #0
 8083bb4:	bd70      	pop	{r4, r5, r6, pc}
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
        return( ret );

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8083bb6:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 8083bba:	bd70      	pop	{r4, r5, r6, pc}
    bs->len -= 1;

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
    if( bs->unused_bits > 7 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 8083bbc:	f06f 0063 	mvn.w	r0, #99	; 0x63

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 8083bc0:	bd70      	pop	{r4, r5, r6, pc}

08083bc2 <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
 8083bc2:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 8083bc4:	2303      	movs	r3, #3
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
 8083bc6:	4604      	mov	r4, r0
 8083bc8:	4615      	mov	r5, r2
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 8083bca:	f7ff ff71 	bl	8083ab0 <mbedtls_asn1_get_tag>
 8083bce:	b958      	cbnz	r0, 8083be8 <mbedtls_asn1_get_bitstring_null+0x26>
        return( ret );

    if( (*len)-- < 2 || *(*p)++ != 0 )
 8083bd0:	6813      	ldr	r3, [r2, #0]
 8083bd2:	1e5a      	subs	r2, r3, #1
 8083bd4:	2b01      	cmp	r3, #1
 8083bd6:	602a      	str	r2, [r5, #0]
 8083bd8:	d904      	bls.n	8083be4 <mbedtls_asn1_get_bitstring_null+0x22>
 8083bda:	6823      	ldr	r3, [r4, #0]
 8083bdc:	1c5a      	adds	r2, r3, #1
 8083bde:	6022      	str	r2, [r4, #0]
 8083be0:	7818      	ldrb	r0, [r3, #0]
 8083be2:	b108      	cbz	r0, 8083be8 <mbedtls_asn1_get_bitstring_null+0x26>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 8083be4:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
 8083be8:	bd38      	pop	{r3, r4, r5, pc}

08083bea <mbedtls_asn1_get_sequence_of>:
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
 8083bea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8083bee:	4615      	mov	r5, r2
 8083bf0:	461f      	mov	r7, r3
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8083bf2:	aa01      	add	r2, sp, #4
 8083bf4:	2330      	movs	r3, #48	; 0x30
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
 8083bf6:	4604      	mov	r4, r0
 8083bf8:	460e      	mov	r6, r1
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8083bfa:	f7ff ff59 	bl	8083ab0 <mbedtls_asn1_get_tag>
 8083bfe:	bb68      	cbnz	r0, 8083c5c <mbedtls_asn1_get_sequence_of+0x72>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( *p + len != end )
 8083c00:	6822      	ldr	r2, [r4, #0]
 8083c02:	9b01      	ldr	r3, [sp, #4]
 8083c04:	4413      	add	r3, r2
 8083c06:	429e      	cmp	r6, r3
 8083c08:	d01d      	beq.n	8083c46 <mbedtls_asn1_get_sequence_of+0x5c>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8083c0a:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8083c0e:	e025      	b.n	8083c5c <mbedtls_asn1_get_sequence_of+0x72>

    while( *p < end )
 8083c10:	6823      	ldr	r3, [r4, #0]
 8083c12:	429e      	cmp	r6, r3
 8083c14:	d91a      	bls.n	8083c4c <mbedtls_asn1_get_sequence_of+0x62>
    {
        buf = &(cur->buf);
        buf->tag = **p;
 8083c16:	781b      	ldrb	r3, [r3, #0]

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 8083c18:	4642      	mov	r2, r8
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    while( *p < end )
    {
        buf = &(cur->buf);
        buf->tag = **p;
 8083c1a:	602b      	str	r3, [r5, #0]

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 8083c1c:	4631      	mov	r1, r6
 8083c1e:	463b      	mov	r3, r7
 8083c20:	4620      	mov	r0, r4
 8083c22:	f7ff ff45 	bl	8083ab0 <mbedtls_asn1_get_tag>
 8083c26:	b9c8      	cbnz	r0, 8083c5c <mbedtls_asn1_get_sequence_of+0x72>
            return( ret );

        buf->p = *p;
 8083c28:	6823      	ldr	r3, [r4, #0]
 8083c2a:	60ab      	str	r3, [r5, #8]
        *p += buf->len;
 8083c2c:	6822      	ldr	r2, [r4, #0]
 8083c2e:	686b      	ldr	r3, [r5, #4]
 8083c30:	4413      	add	r3, r2

        /* Allocate and assign next pointer */
        if( *p < end )
 8083c32:	429e      	cmp	r6, r3

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
            return( ret );

        buf->p = *p;
        *p += buf->len;
 8083c34:	6023      	str	r3, [r4, #0]

        /* Allocate and assign next pointer */
        if( *p < end )
 8083c36:	d9eb      	bls.n	8083c10 <mbedtls_asn1_get_sequence_of+0x26>
        {
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
 8083c38:	2110      	movs	r1, #16
 8083c3a:	2001      	movs	r0, #1
 8083c3c:	f00f ff7a 	bl	8093b34 <calloc>
                                            sizeof( mbedtls_asn1_sequence ) );
 8083c40:	60e8      	str	r0, [r5, #12]

            if( cur->next == NULL )
 8083c42:	b148      	cbz	r0, 8083c58 <mbedtls_asn1_get_sequence_of+0x6e>
 8083c44:	4605      	mov	r5, r0
    while( *p < end )
    {
        buf = &(cur->buf);
        buf->tag = **p;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 8083c46:	f105 0804 	add.w	r8, r5, #4
 8083c4a:	e7e1      	b.n	8083c10 <mbedtls_asn1_get_sequence_of+0x26>
            cur = cur->next;
        }
    }

    /* Set final sequence entry's next pointer to NULL */
    cur->next = NULL;
 8083c4c:	2000      	movs	r0, #0
 8083c4e:	60e8      	str	r0, [r5, #12]

    if( *p != end )
 8083c50:	6823      	ldr	r3, [r4, #0]
 8083c52:	429e      	cmp	r6, r3
 8083c54:	d002      	beq.n	8083c5c <mbedtls_asn1_get_sequence_of+0x72>
 8083c56:	e7d8      	b.n	8083c0a <mbedtls_asn1_get_sequence_of+0x20>
        {
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
                                            sizeof( mbedtls_asn1_sequence ) );

            if( cur->next == NULL )
                return( MBEDTLS_ERR_ASN1_ALLOC_FAILED );
 8083c58:	f06f 0069 	mvn.w	r0, #105	; 0x69

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 8083c5c:	b002      	add	sp, #8
 8083c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08083c62 <mbedtls_asn1_get_alg>:

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
 8083c62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8083c64:	4617      	mov	r7, r2
 8083c66:	461d      	mov	r5, r3
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8083c68:	aa01      	add	r2, sp, #4
 8083c6a:	2330      	movs	r3, #48	; 0x30
}

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
 8083c6c:	4604      	mov	r4, r0
 8083c6e:	460e      	mov	r6, r1
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8083c70:	f7ff ff1e 	bl	8083ab0 <mbedtls_asn1_get_tag>
 8083c74:	2800      	cmp	r0, #0
 8083c76:	d13a      	bne.n	8083cee <mbedtls_asn1_get_alg+0x8c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
 8083c78:	6823      	ldr	r3, [r4, #0]
 8083c7a:	1af6      	subs	r6, r6, r3
 8083c7c:	2e00      	cmp	r6, #0
 8083c7e:	dd31      	ble.n	8083ce4 <mbedtls_asn1_get_alg+0x82>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
 8083c80:	463a      	mov	r2, r7
 8083c82:	781b      	ldrb	r3, [r3, #0]
    end = *p + len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
 8083c84:	4620      	mov	r0, r4
        return( ret );

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
 8083c86:	f842 3b04 	str.w	r3, [r2], #4
    end = *p + len;
 8083c8a:	6826      	ldr	r6, [r4, #0]
 8083c8c:	9b01      	ldr	r3, [sp, #4]
 8083c8e:	441e      	add	r6, r3

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
 8083c90:	4631      	mov	r1, r6
 8083c92:	2306      	movs	r3, #6
 8083c94:	f7ff ff0c 	bl	8083ab0 <mbedtls_asn1_get_tag>
 8083c98:	bb48      	cbnz	r0, 8083cee <mbedtls_asn1_get_alg+0x8c>
        return( ret );

    alg->p = *p;
 8083c9a:	6823      	ldr	r3, [r4, #0]
 8083c9c:	60bb      	str	r3, [r7, #8]
    *p += alg->len;
 8083c9e:	6822      	ldr	r2, [r4, #0]
 8083ca0:	687b      	ldr	r3, [r7, #4]
 8083ca2:	18d1      	adds	r1, r2, r3

    if( *p == end )
 8083ca4:	428e      	cmp	r6, r1

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( ret );

    alg->p = *p;
    *p += alg->len;
 8083ca6:	6021      	str	r1, [r4, #0]

    if( *p == end )
 8083ca8:	d106      	bne.n	8083cb8 <mbedtls_asn1_get_alg+0x56>
 8083caa:	f105 030c 	add.w	r3, r5, #12
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 8083cae:	429d      	cmp	r5, r3
 8083cb0:	d016      	beq.n	8083ce0 <mbedtls_asn1_get_alg+0x7e>
 8083cb2:	7028      	strb	r0, [r5, #0]
 8083cb4:	3501      	adds	r5, #1
 8083cb6:	e7fa      	b.n	8083cae <mbedtls_asn1_get_alg+0x4c>
    {
        mbedtls_zeroize( params, sizeof(mbedtls_asn1_buf) );
        return( 0 );
    }

    params->tag = **p;
 8083cb8:	5cd3      	ldrb	r3, [r2, r3]
 8083cba:	462a      	mov	r2, r5
 8083cbc:	f842 3b04 	str.w	r3, [r2], #4
    (*p)++;
 8083cc0:	6823      	ldr	r3, [r4, #0]

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 8083cc2:	4631      	mov	r1, r6
        mbedtls_zeroize( params, sizeof(mbedtls_asn1_buf) );
        return( 0 );
    }

    params->tag = **p;
    (*p)++;
 8083cc4:	3301      	adds	r3, #1
 8083cc6:	6023      	str	r3, [r4, #0]

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 8083cc8:	4620      	mov	r0, r4
 8083cca:	f7ff fe9f 	bl	8083a0c <mbedtls_asn1_get_len>
 8083cce:	b970      	cbnz	r0, 8083cee <mbedtls_asn1_get_alg+0x8c>
        return( ret );

    params->p = *p;
 8083cd0:	6823      	ldr	r3, [r4, #0]
 8083cd2:	60ab      	str	r3, [r5, #8]
    *p += params->len;
 8083cd4:	6822      	ldr	r2, [r4, #0]
 8083cd6:	686b      	ldr	r3, [r5, #4]
 8083cd8:	4413      	add	r3, r2

    if( *p != end )
 8083cda:	429e      	cmp	r6, r3

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
        return( ret );

    params->p = *p;
    *p += params->len;
 8083cdc:	6023      	str	r3, [r4, #0]

    if( *p != end )
 8083cde:	d104      	bne.n	8083cea <mbedtls_asn1_get_alg+0x88>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 8083ce0:	2000      	movs	r0, #0
 8083ce2:	e004      	b.n	8083cee <mbedtls_asn1_get_alg+0x8c>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8083ce4:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 8083ce8:	e001      	b.n	8083cee <mbedtls_asn1_get_alg+0x8c>

    params->p = *p;
    *p += params->len;

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8083cea:	f06f 0065 	mvn.w	r0, #101	; 0x65

    return( 0 );
}
 8083cee:	b003      	add	sp, #12
 8083cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08083cf2 <mbedtls_asn1_get_alg_null>:

int mbedtls_asn1_get_alg_null( unsigned char **p,
                       const unsigned char *end,
                       mbedtls_asn1_buf *alg )
{
 8083cf2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int ret;
    mbedtls_asn1_buf params;

    memset( &params, 0, sizeof(mbedtls_asn1_buf) );
 8083cf4:	2300      	movs	r3, #0
 8083cf6:	9301      	str	r3, [sp, #4]
 8083cf8:	9302      	str	r3, [sp, #8]
 8083cfa:	9303      	str	r3, [sp, #12]

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, &params ) ) != 0 )
 8083cfc:	ab01      	add	r3, sp, #4
 8083cfe:	f7ff ffb0 	bl	8083c62 <mbedtls_asn1_get_alg>
 8083d02:	b960      	cbnz	r0, 8083d1e <mbedtls_asn1_get_alg_null+0x2c>
        return( ret );

    if( ( params.tag != MBEDTLS_ASN1_NULL && params.tag != 0 ) || params.len != 0 )
 8083d04:	9b01      	ldr	r3, [sp, #4]
 8083d06:	2b05      	cmp	r3, #5
 8083d08:	d000      	beq.n	8083d0c <mbedtls_asn1_get_alg_null+0x1a>
 8083d0a:	b933      	cbnz	r3, 8083d1a <mbedtls_asn1_get_alg_null+0x28>
 8083d0c:	9b02      	ldr	r3, [sp, #8]
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );

    return( 0 );
 8083d0e:	2b00      	cmp	r3, #0
 8083d10:	bf14      	ite	ne
 8083d12:	f06f 0067 	mvnne.w	r0, #103	; 0x67
 8083d16:	2000      	moveq	r0, #0
 8083d18:	e001      	b.n	8083d1e <mbedtls_asn1_get_alg_null+0x2c>

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, &params ) ) != 0 )
        return( ret );

    if( ( params.tag != MBEDTLS_ASN1_NULL && params.tag != 0 ) || params.len != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 8083d1a:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
 8083d1e:	b005      	add	sp, #20
 8083d20:	f85d fb04 	ldr.w	pc, [sp], #4

08083d24 <_ZL17sha1_process_wrapPvPKh>:
}

static int sha1_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha1_process( (mbedtls_sha1_context *) ctx,
                                           data ) );
 8083d24:	f001 bc04 	b.w	8085530 <mbedtls_internal_sha1_process>

08083d28 <_ZL15sha1_clone_wrapPvPKv>:
}

static void sha1_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha1_clone( (mbedtls_sha1_context *) dst,
                  (const mbedtls_sha1_context *) src );
 8083d28:	f001 bbe2 	b.w	80854f0 <mbedtls_sha1_clone>

08083d2c <_ZL13sha1_ctx_freePv>:
}

static void sha1_ctx_free( void *ctx )
{
 8083d2c:	b510      	push	{r4, lr}
 8083d2e:	4604      	mov	r4, r0
    mbedtls_sha1_free( (mbedtls_sha1_context *) ctx );
 8083d30:	f001 fbd4 	bl	80854dc <mbedtls_sha1_free>
    mbedtls_free( ctx );
 8083d34:	4620      	mov	r0, r4
}
 8083d36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha1_ctx_free( void *ctx )
{
    mbedtls_sha1_free( (mbedtls_sha1_context *) ctx );
    mbedtls_free( ctx );
 8083d3a:	f00d bbff 	b.w	809153c <free>

08083d3e <_ZL14sha1_ctx_allocv>:
{
    return( mbedtls_sha1_finish_ret( (mbedtls_sha1_context *) ctx, output ) );
}

static void *sha1_ctx_alloc( void )
{
 8083d3e:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha1_context ) );
 8083d40:	215c      	movs	r1, #92	; 0x5c
 8083d42:	2001      	movs	r0, #1
 8083d44:	f00f fef6 	bl	8093b34 <calloc>

    if( ctx != NULL )
 8083d48:	4604      	mov	r4, r0
 8083d4a:	b108      	cbz	r0, 8083d50 <_ZL14sha1_ctx_allocv+0x12>
        mbedtls_sha1_init( (mbedtls_sha1_context *) ctx );
 8083d4c:	f001 fbc2 	bl	80854d4 <mbedtls_sha1_init>

    return( ctx );
}
 8083d50:	4620      	mov	r0, r4
 8083d52:	bd10      	pop	{r4, pc}

08083d54 <_ZL16sha1_finish_wrapPvPh>:
                                     input, ilen ) );
}

static int sha1_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha1_finish_ret( (mbedtls_sha1_context *) ctx, output ) );
 8083d54:	f002 bbd8 	b.w	8086508 <mbedtls_sha1_finish_ret>

08083d58 <_ZL16sha1_update_wrapPvPKhj>:

static int sha1_update_wrap( void *ctx, const unsigned char *input,
                              size_t ilen )
{
    return( mbedtls_sha1_update_ret( (mbedtls_sha1_context *) ctx,
                                     input, ilen ) );
 8083d58:	f002 bb9c 	b.w	8086494 <mbedtls_sha1_update_ret>

08083d5c <_ZL16sha1_starts_wrapPv>:

#if defined(MBEDTLS_SHA1_C)

static int sha1_starts_wrap( void *ctx )
{
    return( mbedtls_sha1_starts_ret( (mbedtls_sha1_context *) ctx ) );
 8083d5c:	f001 bbce 	b.w	80854fc <mbedtls_sha1_starts_ret>

08083d60 <_ZL19sha224_process_wrapPvPKh>:
}

static int sha224_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha256_process( (mbedtls_sha256_context *) ctx,
                                             data ) );
 8083d60:	f7fe bd2c 	b.w	80827bc <mbedtls_internal_sha256_process>

08083d64 <_ZL17sha224_clone_wrapPvPKv>:
}

static void sha224_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
                    (const mbedtls_sha256_context *) src );
 8083d64:	f7fe bcd4 	b.w	8082710 <mbedtls_sha256_clone>

08083d68 <_ZL15sha224_ctx_freePv>:

    return( ctx );
}

static void sha224_ctx_free( void *ctx )
{
 8083d68:	b510      	push	{r4, lr}
 8083d6a:	4604      	mov	r4, r0
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
 8083d6c:	f7fe fcc6 	bl	80826fc <mbedtls_sha256_free>
    mbedtls_free( ctx );
 8083d70:	4620      	mov	r0, r4
}
 8083d72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha224_ctx_free( void *ctx )
{
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
    mbedtls_free( ctx );
 8083d76:	f00d bbe1 	b.w	809153c <free>

08083d7a <_ZL16sha224_ctx_allocv>:
{
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
}

static void *sha224_ctx_alloc( void )
{
 8083d7a:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
 8083d7c:	216c      	movs	r1, #108	; 0x6c
 8083d7e:	2001      	movs	r0, #1
 8083d80:	f00f fed8 	bl	8093b34 <calloc>

    if( ctx != NULL )
 8083d84:	4604      	mov	r4, r0
 8083d86:	b108      	cbz	r0, 8083d8c <_ZL16sha224_ctx_allocv+0x12>
        mbedtls_sha256_init( (mbedtls_sha256_context *) ctx );
 8083d88:	f7fe fcb4 	bl	80826f4 <mbedtls_sha256_init>

    return( ctx );
}
 8083d8c:	4620      	mov	r0, r4
 8083d8e:	bd10      	pop	{r4, pc}

08083d90 <_ZL11sha224_wrapPKhjPh>:
}

static int sha224_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
 8083d90:	2301      	movs	r3, #1
 8083d92:	f7ff b94e 	b.w	8083032 <mbedtls_sha256_ret>

08083d96 <_ZL11sha256_wrapPKhjPh>:
}

static int sha256_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 0 ) );
 8083d96:	2300      	movs	r3, #0
 8083d98:	f7ff b94b 	b.w	8083032 <mbedtls_sha256_ret>

08083d9c <_ZL18sha224_finish_wrapPvPh>:
}

static int sha224_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha256_finish_ret( (mbedtls_sha256_context *) ctx,
                                       output ) );
 8083d9c:	f7ff b8b2 	b.w	8082f04 <mbedtls_sha256_finish_ret>

08083da0 <_ZL18sha224_update_wrapPvPKhj>:

static int sha224_update_wrap( void *ctx, const unsigned char *input,
                                size_t ilen )
{
    return( mbedtls_sha256_update_ret( (mbedtls_sha256_context *) ctx,
                                       input, ilen ) );
 8083da0:	f7ff b876 	b.w	8082e90 <mbedtls_sha256_update_ret>

08083da4 <_ZL18sha224_starts_wrapPv>:
 */
#if defined(MBEDTLS_SHA256_C)

static int sha224_starts_wrap( void *ctx )
{
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 1 ) );
 8083da4:	2101      	movs	r1, #1
 8083da6:	f7fe bcb9 	b.w	808271c <mbedtls_sha256_starts_ret>

08083daa <_ZL18sha256_starts_wrapPv>:
    sha224_process_wrap,
};

static int sha256_starts_wrap( void *ctx )
{
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 0 ) );
 8083daa:	2100      	movs	r1, #0
 8083dac:	f7fe bcb6 	b.w	808271c <mbedtls_sha256_starts_ret>

08083db0 <_ZL19sha384_process_wrapPvPKh>:
}

static int sha384_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha512_process( (mbedtls_sha512_context *) ctx,
                                             data ) );
 8083db0:	f00a b95e 	b.w	808e070 <mbedtls_internal_sha512_process>

08083db4 <_ZL17sha384_clone_wrapPvPKv>:
}

static void sha384_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha512_clone( (mbedtls_sha512_context *) dst,
                    (const mbedtls_sha512_context *) src );
 8083db4:	f00a b8ba 	b.w	808df2c <mbedtls_sha512_clone>

08083db8 <_ZL15sha384_ctx_freePv>:

    return( ctx );
}

static void sha384_ctx_free( void *ctx )
{
 8083db8:	b510      	push	{r4, lr}
 8083dba:	4604      	mov	r4, r0
    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );
 8083dbc:	f00a f8ac 	bl	808df18 <mbedtls_sha512_free>
    mbedtls_free( ctx );
 8083dc0:	4620      	mov	r0, r4
}
 8083dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha384_ctx_free( void *ctx )
{
    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );
    mbedtls_free( ctx );
 8083dc6:	f00d bbb9 	b.w	809153c <free>

08083dca <_ZL16sha384_ctx_allocv>:
{
    return( mbedtls_sha512_ret( input, ilen, output, 1 ) );
}

static void *sha384_ctx_alloc( void )
{
 8083dca:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha512_context ) );
 8083dcc:	21d8      	movs	r1, #216	; 0xd8
 8083dce:	2001      	movs	r0, #1
 8083dd0:	f00f feb0 	bl	8093b34 <calloc>

    if( ctx != NULL )
 8083dd4:	4604      	mov	r4, r0
 8083dd6:	b108      	cbz	r0, 8083ddc <_ZL16sha384_ctx_allocv+0x12>
        mbedtls_sha512_init( (mbedtls_sha512_context *) ctx );
 8083dd8:	f00a f89a 	bl	808df10 <mbedtls_sha512_init>

    return( ctx );
}
 8083ddc:	4620      	mov	r0, r4
 8083dde:	bd10      	pop	{r4, pc}

08083de0 <_ZL11sha384_wrapPKhjPh>:
}

static int sha384_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha512_ret( input, ilen, output, 1 ) );
 8083de0:	2301      	movs	r3, #1
 8083de2:	f00b b900 	b.w	808efe6 <mbedtls_sha512_ret>

08083de6 <_ZL11sha512_wrapPKhjPh>:
}

static int sha512_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha512_ret( input, ilen, output, 0 ) );
 8083de6:	2300      	movs	r3, #0
 8083de8:	f00b b8fd 	b.w	808efe6 <mbedtls_sha512_ret>

08083dec <_ZL18sha384_finish_wrapPvPh>:
}

static int sha384_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha512_finish_ret( (mbedtls_sha512_context *) ctx,
                                       output ) );
 8083dec:	f00a bfc8 	b.w	808ed80 <mbedtls_sha512_finish_ret>

08083df0 <_ZL18sha384_update_wrapPvPKhj>:

static int sha384_update_wrap( void *ctx, const unsigned char *input,
                               size_t ilen )
{
    return( mbedtls_sha512_update_ret( (mbedtls_sha512_context *) ctx,
                                       input, ilen ) );
 8083df0:	f00a bf7e 	b.w	808ecf0 <mbedtls_sha512_update_ret>

08083df4 <_ZL18sha384_starts_wrapPv>:

#if defined(MBEDTLS_SHA512_C)

static int sha384_starts_wrap( void *ctx )
{
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 1 ) );
 8083df4:	2101      	movs	r1, #1
 8083df6:	f00a b89f 	b.w	808df38 <mbedtls_sha512_starts_ret>

08083dfa <_ZL18sha512_starts_wrapPv>:
    sha384_process_wrap,
};

static int sha512_starts_wrap( void *ctx )
{
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 0 ) );
 8083dfa:	2100      	movs	r1, #0
 8083dfc:	f00a b89c 	b.w	808df38 <mbedtls_sha512_starts_ret>

08083e00 <_ZL15mbedtls_zeroizePvj>:
#endif

#if !defined(MBEDTLS_RSA_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 8083e00:	4401      	add	r1, r0
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 8083e02:	2300      	movs	r3, #0
 8083e04:	4288      	cmp	r0, r1
 8083e06:	d002      	beq.n	8083e0e <_ZL15mbedtls_zeroizePvj+0xe>
 8083e08:	7003      	strb	r3, [r0, #0]
 8083e0a:	3001      	adds	r0, #1
 8083e0c:	e7fa      	b.n	8083e04 <_ZL15mbedtls_zeroizePvj+0x4>
 8083e0e:	4770      	bx	lr

08083e10 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>:
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
 8083e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8083e14:	b095      	sub	sp, #84	; 0x54
 8083e16:	9d1e      	ldr	r5, [sp, #120]	; 0x78
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 8083e18:	ae04      	add	r6, sp, #16
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
 8083e1a:	4607      	mov	r7, r0
 8083e1c:	460c      	mov	r4, r1
 8083e1e:	4691      	mov	r9, r2
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 8083e20:	2100      	movs	r1, #0
 8083e22:	2240      	movs	r2, #64	; 0x40
 8083e24:	4630      	mov	r0, r6
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
 8083e26:	9301      	str	r3, [sp, #4]
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
    memset( counter, 0, 4 );
 8083e28:	f10d 0850 	add.w	r8, sp, #80	; 0x50
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 8083e2c:	f00f fecd 	bl	8093bca <memset>
    memset( counter, 0, 4 );
 8083e30:	2300      	movs	r3, #0

    hlen = mbedtls_md_get_size( md_ctx->md_info );
 8083e32:	6828      	ldr	r0, [r5, #0]
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
    memset( counter, 0, 4 );
 8083e34:	f848 3d44 	str.w	r3, [r8, #-68]!

    hlen = mbedtls_md_get_size( md_ctx->md_info );
 8083e38:	f004 f936 	bl	80880a8 <mbedtls_md_get_size>
 8083e3c:	4682      	mov	sl, r0

    /* Generate and apply dbMask */
    p = dst;

    while( dlen > 0 )
 8083e3e:	b37c      	cbz	r4, 8083ea0 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x90>
 8083e40:	4554      	cmp	r4, sl
    {
        use_len = hlen;
        if( dlen < hlen )
            use_len = dlen;

        if( ( ret = mbedtls_md_starts( md_ctx ) ) != 0 )
 8083e42:	4628      	mov	r0, r5
 8083e44:	46a3      	mov	fp, r4
 8083e46:	bf28      	it	cs
 8083e48:	46d3      	movcs	fp, sl
 8083e4a:	f004 f83d 	bl	8087ec8 <mbedtls_md_starts>
 8083e4e:	4602      	mov	r2, r0
 8083e50:	bb38      	cbnz	r0, 8083ea2 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
            goto exit;
        if( ( ret = mbedtls_md_update( md_ctx, src, slen ) ) != 0 )
 8083e52:	9a01      	ldr	r2, [sp, #4]
 8083e54:	4649      	mov	r1, r9
 8083e56:	4628      	mov	r0, r5
 8083e58:	f004 f840 	bl	8087edc <mbedtls_md_update>
 8083e5c:	4602      	mov	r2, r0
 8083e5e:	bb00      	cbnz	r0, 8083ea2 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
            goto exit;
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
 8083e60:	2204      	movs	r2, #4
 8083e62:	4641      	mov	r1, r8
 8083e64:	4628      	mov	r0, r5
 8083e66:	f004 f839 	bl	8087edc <mbedtls_md_update>
 8083e6a:	4602      	mov	r2, r0
 8083e6c:	b9c8      	cbnz	r0, 8083ea2 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
            goto exit;
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
 8083e6e:	4631      	mov	r1, r6
 8083e70:	4628      	mov	r0, r5
 8083e72:	f004 f83d 	bl	8087ef0 <mbedtls_md_finish>
 8083e76:	4602      	mov	r2, r0
 8083e78:	b998      	cbnz	r0, 8083ea2 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
 8083e7a:	463b      	mov	r3, r7
            goto exit;

        for( i = 0; i < use_len; ++i )
 8083e7c:	455a      	cmp	r2, fp
 8083e7e:	d007      	beq.n	8083e90 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x80>
            *p++ ^= mask[i];
 8083e80:	f813 0b01 	ldrb.w	r0, [r3], #1
 8083e84:	5cb1      	ldrb	r1, [r6, r2]
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
            goto exit;
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
            goto exit;

        for( i = 0; i < use_len; ++i )
 8083e86:	3201      	adds	r2, #1
            *p++ ^= mask[i];
 8083e88:	4041      	eors	r1, r0
 8083e8a:	f803 1c01 	strb.w	r1, [r3, #-1]
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
            goto exit;
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
            goto exit;

        for( i = 0; i < use_len; ++i )
 8083e8e:	e7f5      	b.n	8083e7c <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x6c>
            *p++ ^= mask[i];

        counter[3]++;
 8083e90:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8083e94:	4417      	add	r7, r2
 8083e96:	3301      	adds	r3, #1
 8083e98:	f88d 300f 	strb.w	r3, [sp, #15]

        dlen -= use_len;
 8083e9c:	1aa4      	subs	r4, r4, r2
    hlen = mbedtls_md_get_size( md_ctx->md_info );

    /* Generate and apply dbMask */
    p = dst;

    while( dlen > 0 )
 8083e9e:	e7ce      	b.n	8083e3e <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x2e>
 8083ea0:	4622      	mov	r2, r4

        dlen -= use_len;
    }

exit:
    mbedtls_zeroize( mask, sizeof( mask ) );
 8083ea2:	4630      	mov	r0, r6
 8083ea4:	2140      	movs	r1, #64	; 0x40
 8083ea6:	f7ff ffab 	bl	8083e00 <_ZL15mbedtls_zeroizePvj>

    return( ret );
}
 8083eaa:	4610      	mov	r0, r2
 8083eac:	b015      	add	sp, #84	; 0x54
 8083eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08083eb4 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>:
static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
                                        unsigned int hashlen,
                                        const unsigned char *hash,
                                        size_t dst_len,
                                        unsigned char *dst )
{
 8083eb4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8083eb8:	461d      	mov	r5, r3
    size_t oid_size  = 0;
 8083eba:	2300      	movs	r3, #0
static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
                                        unsigned int hashlen,
                                        const unsigned char *hash,
                                        size_t dst_len,
                                        unsigned char *dst )
{
 8083ebc:	460e      	mov	r6, r1
 8083ebe:	4691      	mov	r9, r2
 8083ec0:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    size_t oid_size  = 0;
 8083ec4:	9300      	str	r3, [sp, #0]
    size_t nb_pad    = dst_len;
    unsigned char *p = dst;
    const char *oid  = NULL;
 8083ec6:	9301      	str	r3, [sp, #4]

    /* Are we signing hashed or raw data? */
    if( md_alg != MBEDTLS_MD_NONE )
 8083ec8:	4604      	mov	r4, r0
 8083eca:	b328      	cbz	r0, 8083f18 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x64>
    {
        const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
 8083ecc:	f003 ffa8 	bl	8087e20 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 8083ed0:	4606      	mov	r6, r0
 8083ed2:	2800      	cmp	r0, #0
 8083ed4:	d063      	beq.n	8083f9e <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
 8083ed6:	4620      	mov	r0, r4
 8083ed8:	466a      	mov	r2, sp
 8083eda:	a901      	add	r1, sp, #4
 8083edc:	f001 fab0 	bl	8085440 <mbedtls_oid_get_oid_by_md>
 8083ee0:	4604      	mov	r4, r0
 8083ee2:	2800      	cmp	r0, #0
 8083ee4:	d15b      	bne.n	8083f9e <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
 8083ee6:	4630      	mov	r0, r6
 8083ee8:	f004 f8de 	bl	80880a8 <mbedtls_md_get_size>

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
 8083eec:	9f00      	ldr	r7, [sp, #0]
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
 8083eee:	4606      	mov	r6, r0

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
 8083ef0:	4407      	add	r7, r0
 8083ef2:	f107 0308 	add.w	r3, r7, #8
 8083ef6:	2b7f      	cmp	r3, #127	; 0x7f
 8083ef8:	d851      	bhi.n	8083f9e <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
 8083efa:	f110 020a 	adds.w	r2, r0, #10
 8083efe:	d24e      	bcs.n	8083f9e <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            10 + hashlen            <  hashlen      ||
            10 + hashlen + oid_size <  10 + hashlen )
 8083f00:	f107 030a 	add.w	r3, r7, #10
        hashlen = mbedtls_md_get_size( md_info );

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
            10 + hashlen            <  hashlen      ||
 8083f04:	429a      	cmp	r2, r3
 8083f06:	d84a      	bhi.n	8083f9e <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
         *   (Insist on 1-byte length encodings to protect against variants of
         *    Bleichenbacher's forgery attack against lax PKCS#1v1.5 verification)
         * - Need hashlen bytes for hash
         * - Need oid_size bytes for hash alg OID.
         */
        if( nb_pad < 10 + hashlen + oid_size )
 8083f08:	429d      	cmp	r5, r3
 8083f0a:	d348      	bcc.n	8083f9e <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
        nb_pad -= 10 + hashlen + oid_size;
 8083f0c:	f1a5 030a 	sub.w	r3, r5, #10
 8083f10:	1bdf      	subs	r7, r3, r7
        nb_pad -= hashlen;
    }

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
 8083f12:	2f0a      	cmp	r7, #10
 8083f14:	d806      	bhi.n	8083f24 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x70>
 8083f16:	e042      	b.n	8083f9e <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
        nb_pad -= 10 + hashlen + oid_size;
    }
    else
    {
        if( nb_pad < hashlen )
 8083f18:	428d      	cmp	r5, r1
 8083f1a:	d340      	bcc.n	8083f9e <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        nb_pad -= hashlen;
 8083f1c:	1a6d      	subs	r5, r5, r1
    }

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
 8083f1e:	2d0a      	cmp	r5, #10
 8083f20:	d93d      	bls.n	8083f9e <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
 8083f22:	e03e      	b.n	8083fa2 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xee>

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 8083f24:	46c2      	mov	sl, r8

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    nb_pad -= 3;
 8083f26:	3f03      	subs	r7, #3

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 8083f28:	f80a 4b02 	strb.w	r4, [sl], #2
    *p++ = MBEDTLS_RSA_SIGN;
 8083f2c:	2301      	movs	r3, #1
    memset( p, 0xFF, nb_pad );
 8083f2e:	463a      	mov	r2, r7
    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
    *p++ = MBEDTLS_RSA_SIGN;
 8083f30:	f888 3001 	strb.w	r3, [r8, #1]
    memset( p, 0xFF, nb_pad );
 8083f34:	21ff      	movs	r1, #255	; 0xff
 8083f36:	4650      	mov	r0, sl
 8083f38:	f00f fe47 	bl	8093bca <memset>
    p += nb_pad;
 8083f3c:	eb0a 0307 	add.w	r3, sl, r7
     * Schematic:
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 8083f40:	2130      	movs	r1, #48	; 0x30
    /* Write signature header and padding */
    *p++ = 0;
    *p++ = MBEDTLS_RSA_SIGN;
    memset( p, 0xFF, nb_pad );
    p += nb_pad;
    *p++ = 0;
 8083f42:	f80a 4007 	strb.w	r4, [sl, r7]
     * Schematic:
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 8083f46:	7059      	strb	r1, [r3, #1]
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
 8083f48:	9f00      	ldr	r7, [sp, #0]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 8083f4a:	70d9      	strb	r1, [r3, #3]
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
 8083f4c:	f107 0208 	add.w	r2, r7, #8
 8083f50:	4432      	add	r2, r6
 8083f52:	709a      	strb	r2, [r3, #2]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x04 + oid_size );
 8083f54:	b2fa      	uxtb	r2, r7
 8083f56:	1d11      	adds	r1, r2, #4
    *p++ = MBEDTLS_ASN1_OID;
    *p++ = (unsigned char) oid_size;
 8083f58:	f103 0a07 	add.w	sl, r3, #7
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x04 + oid_size );
 8083f5c:	7119      	strb	r1, [r3, #4]
    *p++ = MBEDTLS_ASN1_OID;
 8083f5e:	2106      	movs	r1, #6
 8083f60:	7159      	strb	r1, [r3, #5]
    *p++ = (unsigned char) oid_size;
 8083f62:	719a      	strb	r2, [r3, #6]
    memcpy( p, oid, oid_size );
 8083f64:	9901      	ldr	r1, [sp, #4]
 8083f66:	463a      	mov	r2, r7
 8083f68:	4650      	mov	r0, sl
 8083f6a:	f00f fe08 	bl	8093b7e <memcpy>
    p += oid_size;
    *p++ = MBEDTLS_ASN1_NULL;
 8083f6e:	2205      	movs	r2, #5
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x04 + oid_size );
    *p++ = MBEDTLS_ASN1_OID;
    *p++ = (unsigned char) oid_size;
    memcpy( p, oid, oid_size );
    p += oid_size;
 8083f70:	eb0a 0307 	add.w	r3, sl, r7
    *p++ = MBEDTLS_ASN1_NULL;
 8083f74:	f80a 2007 	strb.w	r2, [sl, r7]
    *p++ = 0x00;
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
 8083f78:	2204      	movs	r2, #4
    *p++ = (unsigned char) hashlen;
 8083f7a:	189f      	adds	r7, r3, r2
    *p++ = (unsigned char) oid_size;
    memcpy( p, oid, oid_size );
    p += oid_size;
    *p++ = MBEDTLS_ASN1_NULL;
    *p++ = 0x00;
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
 8083f7c:	709a      	strb	r2, [r3, #2]
    *p++ = (unsigned char) hashlen;
 8083f7e:	70de      	strb	r6, [r3, #3]
    *p++ = MBEDTLS_ASN1_OID;
    *p++ = (unsigned char) oid_size;
    memcpy( p, oid, oid_size );
    p += oid_size;
    *p++ = MBEDTLS_ASN1_NULL;
    *p++ = 0x00;
 8083f80:	705c      	strb	r4, [r3, #1]
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
    *p++ = (unsigned char) hashlen;
    memcpy( p, hash, hashlen );
 8083f82:	4632      	mov	r2, r6
 8083f84:	4649      	mov	r1, r9
 8083f86:	4638      	mov	r0, r7
 8083f88:	f00f fdf9 	bl	8093b7e <memcpy>
    p += hashlen;

    /* Just a sanity-check, should be automatic
     * after the initial bounds check. */
    if( p != dst + dst_len )
 8083f8c:	443e      	add	r6, r7
 8083f8e:	eb08 0305 	add.w	r3, r8, r5
 8083f92:	429e      	cmp	r6, r3
 8083f94:	d019      	beq.n	8083fca <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x116>
    {
        mbedtls_zeroize( dst, dst_len );
 8083f96:	4629      	mov	r1, r5
 8083f98:	4640      	mov	r0, r8
 8083f9a:	f7ff ff31 	bl	8083e00 <_ZL15mbedtls_zeroizePvj>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8083f9e:	4c0d      	ldr	r4, [pc, #52]	; (8083fd4 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x120>)
 8083fa0:	e013      	b.n	8083fca <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x116>

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 8083fa2:	4643      	mov	r3, r8

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    nb_pad -= 3;
 8083fa4:	1eef      	subs	r7, r5, #3

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 8083fa6:	f803 0b02 	strb.w	r0, [r3], #2
    *p++ = MBEDTLS_RSA_SIGN;
 8083faa:	2201      	movs	r2, #1
 8083fac:	f888 2001 	strb.w	r2, [r8, #1]
    memset( p, 0xFF, nb_pad );
 8083fb0:	21ff      	movs	r1, #255	; 0xff
 8083fb2:	463a      	mov	r2, r7
 8083fb4:	4618      	mov	r0, r3
 8083fb6:	f00f fe08 	bl	8093bca <memset>
 8083fba:	4603      	mov	r3, r0
    p += nb_pad;
    *p++ = 0;
 8083fbc:	55c4      	strb	r4, [r0, r7]

    /* Are we signing raw data? */
    if( md_alg == MBEDTLS_MD_NONE )
    {
        memcpy( p, hash, hashlen );
 8083fbe:	1ea8      	subs	r0, r5, #2
 8083fc0:	4632      	mov	r2, r6
 8083fc2:	4649      	mov	r1, r9
 8083fc4:	4418      	add	r0, r3
 8083fc6:	f00f fdda 	bl	8093b7e <memcpy>
        mbedtls_zeroize( dst, dst_len );
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }

    return( 0 );
}
 8083fca:	4620      	mov	r0, r4
 8083fcc:	b002      	add	sp, #8
 8083fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8083fd2:	bf00      	nop
 8083fd4:	ffffbf80 	.word	0xffffbf80

08083fd8 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>:
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 8083fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 8083fda:	f100 0508 	add.w	r5, r0, #8
 8083fde:	6847      	ldr	r7, [r0, #4]
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 8083fe0:	4604      	mov	r4, r0
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 8083fe2:	4628      	mov	r0, r5
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 8083fe4:	460e      	mov	r6, r1
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 8083fe6:	f007 fc98 	bl	808b91a <mbedtls_mpi_size>
 8083fea:	4287      	cmp	r7, r0
 8083fec:	d117      	bne.n	808401e <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
 8083fee:	6863      	ldr	r3, [r4, #4]
 8083ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8083ff4:	d813      	bhi.n	808401e <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 8083ff6:	2100      	movs	r1, #0
 8083ff8:	4628      	mov	r0, r5
 8083ffa:	f007 fe5f 	bl	808bcbc <mbedtls_mpi_cmp_int>
 8083ffe:	2800      	cmp	r0, #0
 8084000:	dd0d      	ble.n	808401e <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
 8084002:	2100      	movs	r1, #0
 8084004:	4628      	mov	r0, r5
 8084006:	f007 fc3e 	bl	808b886 <mbedtls_mpi_get_bit>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 808400a:	b140      	cbz	r0, 808401e <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
 808400c:	b1ee      	cbz	r6, 808404a <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x72>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 808400e:	f104 052c 	add.w	r5, r4, #44	; 0x2c
 8084012:	2100      	movs	r1, #0
 8084014:	4628      	mov	r0, r5
 8084016:	f007 fe51 	bl	808bcbc <mbedtls_mpi_cmp_int>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
 808401a:	2800      	cmp	r0, #0
 808401c:	dc01      	bgt.n	8084022 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x4a>
    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 808401e:	481a      	ldr	r0, [pc, #104]	; (8084088 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0xb0>)
 8084020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 8084022:	2100      	movs	r1, #0
 8084024:	4628      	mov	r0, r5
 8084026:	f007 fc2e 	bl	808b886 <mbedtls_mpi_get_bit>
#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 808402a:	2800      	cmp	r0, #0
 808402c:	d0f7      	beq.n	808401e <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 808402e:	f104 0538 	add.w	r5, r4, #56	; 0x38
 8084032:	2100      	movs	r1, #0
 8084034:	4628      	mov	r0, r5
 8084036:	f007 fe41 	bl	808bcbc <mbedtls_mpi_cmp_int>
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 808403a:	2800      	cmp	r0, #0
 808403c:	ddef      	ble.n	808401e <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
 808403e:	2100      	movs	r1, #0
 8084040:	4628      	mov	r0, r5
 8084042:	f007 fc20 	bl	808b886 <mbedtls_mpi_get_bit>
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 8084046:	2800      	cmp	r0, #0
 8084048:	d0e9      	beq.n	808401e <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
 808404a:	2100      	movs	r1, #0
 808404c:	f104 0014 	add.w	r0, r4, #20
 8084050:	f007 fe34 	bl	808bcbc <mbedtls_mpi_cmp_int>
 8084054:	2800      	cmp	r0, #0
 8084056:	dde2      	ble.n	808401e <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
    /* For private key operations, use D or DP & DQ
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
 8084058:	b1a6      	cbz	r6, 8084084 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0xac>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 808405a:	2100      	movs	r1, #0
 808405c:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8084060:	f007 fe2c 	bl	808bcbc <mbedtls_mpi_cmp_int>
    /* For private key operations, use D or DP & DQ
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
 8084064:	2800      	cmp	r0, #0
 8084066:	ddda      	ble.n	808401e <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
 8084068:	2100      	movs	r1, #0
 808406a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 808406e:	f007 fe25 	bl	808bcbc <mbedtls_mpi_cmp_int>
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 8084072:	2800      	cmp	r0, #0
 8084074:	ddd3      	ble.n	808401e <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
 8084076:	2100      	movs	r1, #0
 8084078:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 808407c:	f007 fe1e 	bl	808bcbc <mbedtls_mpi_cmp_int>
#endif

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
 8084080:	2800      	cmp	r0, #0
 8084082:	ddcc      	ble.n	808401e <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }
#endif

    return( 0 );
 8084084:	2000      	movs	r0, #0
 8084086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8084088:	ffffbf80 	.word	0xffffbf80

0808408c <mbedtls_rsa_import_raw>:
                            unsigned char const *N, size_t N_len,
                            unsigned char const *P, size_t P_len,
                            unsigned char const *Q, size_t Q_len,
                            unsigned char const *D, size_t D_len,
                            unsigned char const *E, size_t E_len )
{
 808408c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8084090:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8084092:	4604      	mov	r4, r0
 8084094:	4698      	mov	r8, r3
 8084096:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8084098:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    int ret = 0;

    if( N != NULL )
 808409a:	b149      	cbz	r1, 80840b0 <mbedtls_rsa_import_raw+0x24>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
 808409c:	f100 0908 	add.w	r9, r0, #8
 80840a0:	4648      	mov	r0, r9
 80840a2:	f007 fc40 	bl	808b926 <mbedtls_mpi_read_binary>
 80840a6:	bb50      	cbnz	r0, 80840fe <mbedtls_rsa_import_raw+0x72>
        ctx->len = mbedtls_mpi_size( &ctx->N );
 80840a8:	4648      	mov	r0, r9
 80840aa:	f007 fc36 	bl	808b91a <mbedtls_mpi_size>
 80840ae:	6060      	str	r0, [r4, #4]
    }

    if( P != NULL )
 80840b0:	f1b8 0f00 	cmp.w	r8, #0
 80840b4:	d101      	bne.n	80840ba <mbedtls_rsa_import_raw+0x2e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );

    if( Q != NULL )
 80840b6:	b947      	cbnz	r7, 80840ca <mbedtls_rsa_import_raw+0x3e>
 80840b8:	e00e      	b.n	80840d8 <mbedtls_rsa_import_raw+0x4c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
        ctx->len = mbedtls_mpi_size( &ctx->N );
    }

    if( P != NULL )
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );
 80840ba:	9a08      	ldr	r2, [sp, #32]
 80840bc:	4641      	mov	r1, r8
 80840be:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80840c2:	f007 fc30 	bl	808b926 <mbedtls_mpi_read_binary>
 80840c6:	b9d0      	cbnz	r0, 80840fe <mbedtls_rsa_import_raw+0x72>
 80840c8:	e7f5      	b.n	80840b6 <mbedtls_rsa_import_raw+0x2a>

    if( Q != NULL )
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->Q, Q, Q_len ) );
 80840ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80840cc:	4639      	mov	r1, r7
 80840ce:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80840d2:	f007 fc28 	bl	808b926 <mbedtls_mpi_read_binary>
 80840d6:	b990      	cbnz	r0, 80840fe <mbedtls_rsa_import_raw+0x72>

    if( D != NULL )
 80840d8:	b136      	cbz	r6, 80840e8 <mbedtls_rsa_import_raw+0x5c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->D, D, D_len ) );
 80840da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80840dc:	4631      	mov	r1, r6
 80840de:	f104 0020 	add.w	r0, r4, #32
 80840e2:	f007 fc20 	bl	808b926 <mbedtls_mpi_read_binary>
 80840e6:	b950      	cbnz	r0, 80840fe <mbedtls_rsa_import_raw+0x72>

    if( E != NULL )
 80840e8:	b135      	cbz	r5, 80840f8 <mbedtls_rsa_import_raw+0x6c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );
 80840ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80840ec:	4629      	mov	r1, r5
 80840ee:	f104 0014 	add.w	r0, r4, #20
 80840f2:	f007 fc18 	bl	808b926 <mbedtls_mpi_read_binary>

cleanup:

    if( ret != 0 )
 80840f6:	b910      	cbnz	r0, 80840fe <mbedtls_rsa_import_raw+0x72>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );

    return( 0 );
 80840f8:	2000      	movs	r0, #0
 80840fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );

cleanup:

    if( ret != 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 80840fe:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080

    return( 0 );
}
 8084102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08084108 <mbedtls_rsa_complete>:

    return( 0 );
}

int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
 8084108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 808410c:	f100 0b08 	add.w	fp, r0, #8

    return( 0 );
}

int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
 8084110:	b087      	sub	sp, #28
 8084112:	4607      	mov	r7, r0
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 8084114:	2100      	movs	r1, #0
 8084116:	4658      	mov	r0, fp
 8084118:	f007 fdd0 	bl	808bcbc <mbedtls_mpi_cmp_int>
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 808411c:	f107 092c 	add.w	r9, r7, #44	; 0x2c
 8084120:	2100      	movs	r1, #0

int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 8084122:	4680      	mov	r8, r0
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 8084124:	4648      	mov	r0, r9
 8084126:	f007 fdc9 	bl	808bcbc <mbedtls_mpi_cmp_int>
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 808412a:	f107 0a38 	add.w	sl, r7, #56	; 0x38
int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 808412e:	9005      	str	r0, [sp, #20]
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 8084130:	2100      	movs	r1, #0
 8084132:	4650      	mov	r0, sl
 8084134:	f007 fdc2 	bl	808bcbc <mbedtls_mpi_cmp_int>
    const int have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 8084138:	f107 0320 	add.w	r3, r7, #32
 808413c:	2100      	movs	r1, #0
{
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 808413e:	4605      	mov	r5, r0
    const int have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 8084140:	4618      	mov	r0, r3
 8084142:	9302      	str	r3, [sp, #8]
 8084144:	f007 fdba 	bl	808bcbc <mbedtls_mpi_cmp_int>
    const int have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
 8084148:	f107 0314 	add.w	r3, r7, #20
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
    const int have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 808414c:	9004      	str	r0, [sp, #16]
    const int have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
 808414e:	2100      	movs	r1, #0
 8084150:	4618      	mov	r0, r3
 8084152:	9303      	str	r3, [sp, #12]
 8084154:	f007 fdb2 	bl	808bcbc <mbedtls_mpi_cmp_int>
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 8084158:	9b05      	ldr	r3, [sp, #20]
 808415a:	9a04      	ldr	r2, [sp, #16]
 808415c:	b14b      	cbz	r3, 8084172 <mbedtls_rsa_complete+0x6a>
 808415e:	b125      	cbz	r5, 808416a <mbedtls_rsa_complete+0x62>
 8084160:	b12a      	cbz	r2, 808416e <mbedtls_rsa_complete+0x66>
 8084162:	1c06      	adds	r6, r0, #0
 8084164:	bf18      	it	ne
 8084166:	2601      	movne	r6, #1
 8084168:	e013      	b.n	8084192 <mbedtls_rsa_complete+0x8a>
 808416a:	462e      	mov	r6, r5
 808416c:	e011      	b.n	8084192 <mbedtls_rsa_complete+0x8a>
 808416e:	4616      	mov	r6, r2
 8084170:	e00f      	b.n	8084192 <mbedtls_rsa_complete+0x8a>
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 8084172:	f1b8 0f00 	cmp.w	r8, #0
 8084176:	d103      	bne.n	8084180 <mbedtls_rsa_complete+0x78>
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 8084178:	4644      	mov	r4, r8
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 808417a:	4646      	mov	r6, r8
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
 808417c:	2200      	movs	r2, #0
 808417e:	e024      	b.n	80841ca <mbedtls_rsa_complete+0xc2>
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 8084180:	b9cd      	cbnz	r5, 80841b6 <mbedtls_rsa_complete+0xae>
 8084182:	b11a      	cbz	r2, 808418c <mbedtls_rsa_complete+0x84>
 8084184:	b9f0      	cbnz	r0, 80841c4 <mbedtls_rsa_complete+0xbc>
 8084186:	4606      	mov	r6, r0
 8084188:	4604      	mov	r4, r0
 808418a:	e00e      	b.n	80841aa <mbedtls_rsa_complete+0xa2>
 808418c:	462e      	mov	r6, r5
 808418e:	462c      	mov	r4, r5
 8084190:	e00d      	b.n	80841ae <mbedtls_rsa_complete+0xa6>
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 8084192:	b1ad      	cbz	r5, 80841c0 <mbedtls_rsa_complete+0xb8>
 8084194:	b992      	cbnz	r2, 80841bc <mbedtls_rsa_complete+0xb4>
 8084196:	1c04      	adds	r4, r0, #0
 8084198:	bf18      	it	ne
 808419a:	2401      	movne	r4, #1
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
 808419c:	f1b8 0f00 	cmp.w	r8, #0
 80841a0:	d0ec      	beq.n	808417c <mbedtls_rsa_complete+0x74>
 80841a2:	2b00      	cmp	r3, #0
 80841a4:	d1ea      	bne.n	808417c <mbedtls_rsa_complete+0x74>
 80841a6:	2d00      	cmp	r5, #0
 80841a8:	d1e8      	bne.n	808417c <mbedtls_rsa_complete+0x74>
 80841aa:	2a00      	cmp	r2, #0
 80841ac:	d1e6      	bne.n	808417c <mbedtls_rsa_complete+0x74>
 80841ae:	2800      	cmp	r0, #0
 80841b0:	d0e4      	beq.n	808417c <mbedtls_rsa_complete+0x74>
 80841b2:	2201      	movs	r2, #1
 80841b4:	e009      	b.n	80841ca <mbedtls_rsa_complete+0xc2>
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 80841b6:	461c      	mov	r4, r3
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 80841b8:	461e      	mov	r6, r3
 80841ba:	e7df      	b.n	808417c <mbedtls_rsa_complete+0x74>
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 80841bc:	2400      	movs	r4, #0
 80841be:	e7ed      	b.n	808419c <mbedtls_rsa_complete+0x94>
 80841c0:	462c      	mov	r4, r5
 80841c2:	e7db      	b.n	808417c <mbedtls_rsa_complete+0x74>
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 80841c4:	2601      	movs	r6, #1
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 80841c6:	462c      	mov	r4, r5
 80841c8:	e002      	b.n	80841d0 <mbedtls_rsa_complete+0xc8>
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;

    /* These three alternatives are mutually exclusive */
    const int is_priv = n_missing || pq_missing || d_missing;
 80841ca:	2e00      	cmp	r6, #0
 80841cc:	d03d      	beq.n	808424a <mbedtls_rsa_complete+0x142>
 80841ce:	2600      	movs	r6, #0
 80841d0:	9404      	str	r4, [sp, #16]
 80841d2:	2401      	movs	r4, #1

    /*
     * Step 1: Deduce N if P, Q are provided.
     */

    if( !have_N && have_P && have_Q )
 80841d4:	f1b8 0f00 	cmp.w	r8, #0
 80841d8:	d10b      	bne.n	80841f2 <mbedtls_rsa_complete+0xea>
 80841da:	b153      	cbz	r3, 80841f2 <mbedtls_rsa_complete+0xea>
 80841dc:	b14d      	cbz	r5, 80841f2 <mbedtls_rsa_complete+0xea>
    {
        if( ( ret = mbedtls_mpi_mul_mpi( &ctx->N, &ctx->P,
 80841de:	4652      	mov	r2, sl
 80841e0:	4649      	mov	r1, r9
 80841e2:	4658      	mov	r0, fp
 80841e4:	f007 fe89 	bl	808befa <mbedtls_mpi_mul_mpi>
 80841e8:	bb28      	cbnz	r0, 8084236 <mbedtls_rsa_complete+0x12e>
                                         &ctx->Q ) ) != 0 )
        {
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
        }

        ctx->len = mbedtls_mpi_size( &ctx->N );
 80841ea:	4658      	mov	r0, fp
 80841ec:	f007 fb95 	bl	808b91a <mbedtls_mpi_size>
 80841f0:	6078      	str	r0, [r7, #4]

    /*
     * Step 2: Deduce and verify all remaining core parameters.
     */

    if( pq_missing )
 80841f2:	b146      	cbz	r6, 8084206 <mbedtls_rsa_complete+0xfe>
    {
        ret = mbedtls_rsa_deduce_primes( &ctx->N, &ctx->E, &ctx->D,
                                         &ctx->P, &ctx->Q );
 80841f4:	f8cd a000 	str.w	sl, [sp]
 80841f8:	464b      	mov	r3, r9
 80841fa:	9a02      	ldr	r2, [sp, #8]
 80841fc:	9903      	ldr	r1, [sp, #12]
 80841fe:	4658      	mov	r0, fp
 8084200:	f00b f8d6 	bl	808f3b0 <mbedtls_rsa_deduce_primes>
 8084204:	e007      	b.n	8084216 <mbedtls_rsa_complete+0x10e>
        if( ret != 0 )
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );

    }
    else if( d_missing )
 8084206:	9b04      	ldr	r3, [sp, #16]
 8084208:	b133      	cbz	r3, 8084218 <mbedtls_rsa_complete+0x110>
    {
        if( ( ret = mbedtls_rsa_deduce_private_exponent( &ctx->P,
 808420a:	9b02      	ldr	r3, [sp, #8]
 808420c:	9a03      	ldr	r2, [sp, #12]
 808420e:	4651      	mov	r1, sl
 8084210:	4648      	mov	r0, r9
 8084212:	f00b f9c9 	bl	808f5a8 <mbedtls_rsa_deduce_private_exponent>
 8084216:	b970      	cbnz	r0, 8084236 <mbedtls_rsa_complete+0x12e>
     * Step 3: Deduce all additional parameters specific
     *         to our current RSA implementation.
     */

#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv )
 8084218:	b184      	cbz	r4, 808423c <mbedtls_rsa_complete+0x134>
    {
        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
 808421a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
                                      &ctx->DP, &ctx->DQ, &ctx->QP );
 808421e:	9301      	str	r3, [sp, #4]
     */

#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv )
    {
        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
 8084220:	f107 0350 	add.w	r3, r7, #80	; 0x50
                                      &ctx->DP, &ctx->DQ, &ctx->QP );
 8084224:	9300      	str	r3, [sp, #0]
 8084226:	9a02      	ldr	r2, [sp, #8]
 8084228:	f107 0344 	add.w	r3, r7, #68	; 0x44
 808422c:	4651      	mov	r1, sl
 808422e:	4648      	mov	r0, r9
 8084230:	f00b fb5e 	bl	808f8f0 <mbedtls_rsa_deduce_crt>
        if( ret != 0 )
 8084234:	b110      	cbz	r0, 808423c <mbedtls_rsa_complete+0x134>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 8084236:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
 808423a:	e00c      	b.n	8084256 <mbedtls_rsa_complete+0x14e>

    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
 808423c:	4621      	mov	r1, r4
 808423e:	4638      	mov	r0, r7
}
 8084240:	b007      	add	sp, #28
 8084242:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
 8084246:	f7ff bec7 	b.w	8083fd8 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;

    /* These three alternatives are mutually exclusive */
    const int is_priv = n_missing || pq_missing || d_missing;

    if( !is_priv && !is_pub )
 808424a:	b90c      	cbnz	r4, 8084250 <mbedtls_rsa_complete+0x148>
 808424c:	b112      	cbz	r2, 8084254 <mbedtls_rsa_complete+0x14c>
 808424e:	4626      	mov	r6, r4
 8084250:	9404      	str	r4, [sp, #16]
 8084252:	e7bf      	b.n	80841d4 <mbedtls_rsa_complete+0xcc>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8084254:	4801      	ldr	r0, [pc, #4]	; (808425c <mbedtls_rsa_complete+0x154>)
    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
}
 8084256:	b007      	add	sp, #28
 8084258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808425c:	ffffbf80 	.word	0xffffbf80

08084260 <mbedtls_rsa_init>:
 * Initialize an RSA context
 */
void mbedtls_rsa_init( mbedtls_rsa_context *ctx,
               int padding,
               int hash_id )
{
 8084260:	b570      	push	{r4, r5, r6, lr}
 8084262:	4604      	mov	r4, r0
 8084264:	460e      	mov	r6, r1
 8084266:	4615      	mov	r5, r2
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
 8084268:	2100      	movs	r1, #0
 808426a:	22ac      	movs	r2, #172	; 0xac
 808426c:	f00f fcad 	bl	8093bca <memset>
/*
 * Set padding for an existing RSA context
 */
void mbedtls_rsa_set_padding( mbedtls_rsa_context *ctx, int padding, int hash_id )
{
    ctx->padding = padding;
 8084270:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
    ctx->hash_id = hash_id;
 8084274:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 8084278:	bd70      	pop	{r4, r5, r6, pc}

0808427a <mbedtls_rsa_get_len>:
 */

size_t mbedtls_rsa_get_len( const mbedtls_rsa_context *ctx )
{
    return( ctx->len );
}
 808427a:	6840      	ldr	r0, [r0, #4]
 808427c:	4770      	bx	lr
	...

08084280 <mbedtls_rsa_check_pubkey>:

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
 8084280:	b570      	push	{r4, r5, r6, lr}
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
 8084282:	2100      	movs	r1, #0

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
 8084284:	4604      	mov	r4, r0
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
 8084286:	f7ff fea7 	bl	8083fd8 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
 808428a:	4605      	mov	r5, r0
 808428c:	b9b8      	cbnz	r0, 80842be <mbedtls_rsa_check_pubkey+0x3e>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );

    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
 808428e:	f104 0608 	add.w	r6, r4, #8
 8084292:	4630      	mov	r0, r6
 8084294:	f007 fb21 	bl	808b8da <mbedtls_mpi_bitlen>
 8084298:	287f      	cmp	r0, #127	; 0x7f
 808429a:	d910      	bls.n	80842be <mbedtls_rsa_check_pubkey+0x3e>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 808429c:	3414      	adds	r4, #20
 808429e:	4629      	mov	r1, r5
 80842a0:	4620      	mov	r0, r4
 80842a2:	f007 faf0 	bl	808b886 <mbedtls_mpi_get_bit>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 80842a6:	b150      	cbz	r0, 80842be <mbedtls_rsa_check_pubkey+0x3e>
 80842a8:	4620      	mov	r0, r4
 80842aa:	f007 fb16 	bl	808b8da <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 80842ae:	2801      	cmp	r0, #1
 80842b0:	d905      	bls.n	80842be <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
 80842b2:	4631      	mov	r1, r6
 80842b4:	4620      	mov	r0, r4
 80842b6:	f007 fcbc 	bl	808bc32 <mbedtls_mpi_cmp_mpi>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 80842ba:	2800      	cmp	r0, #0
 80842bc:	db00      	blt.n	80842c0 <mbedtls_rsa_check_pubkey+0x40>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 80842be:	4d01      	ldr	r5, [pc, #4]	; (80842c4 <mbedtls_rsa_check_pubkey+0x44>)
    }

    return( 0 );
}
 80842c0:	4628      	mov	r0, r5
 80842c2:	bd70      	pop	{r4, r5, r6, pc}
 80842c4:	ffffbe00 	.word	0xffffbe00

080842c8 <mbedtls_rsa_check_privkey>:

/*
 * Check for the consistency of all fields in an RSA private key context
 */
int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
{
 80842c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80842ca:	b085      	sub	sp, #20
 80842cc:	4604      	mov	r4, r0
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
 80842ce:	f7ff ffd7 	bl	8084280 <mbedtls_rsa_check_pubkey>
 80842d2:	bb28      	cbnz	r0, 8084320 <mbedtls_rsa_check_privkey+0x58>
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
 80842d4:	2101      	movs	r1, #1
 80842d6:	4620      	mov	r0, r4
 80842d8:	f7ff fe7e 	bl	8083fd8 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
/*
 * Check for the consistency of all fields in an RSA private key context
 */
int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
{
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
 80842dc:	bb00      	cbnz	r0, 8084320 <mbedtls_rsa_check_privkey+0x58>
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_rsa_validate_params( &ctx->N, &ctx->P, &ctx->Q,
 80842de:	f104 0314 	add.w	r3, r4, #20
 80842e2:	f104 052c 	add.w	r5, r4, #44	; 0x2c
 80842e6:	f104 0638 	add.w	r6, r4, #56	; 0x38
 80842ea:	f104 0720 	add.w	r7, r4, #32
 80842ee:	9002      	str	r0, [sp, #8]
 80842f0:	9001      	str	r0, [sp, #4]
 80842f2:	9300      	str	r3, [sp, #0]
 80842f4:	4632      	mov	r2, r6
 80842f6:	463b      	mov	r3, r7
 80842f8:	4629      	mov	r1, r5
 80842fa:	f104 0008 	add.w	r0, r4, #8
 80842fe:	f00b fa31 	bl	808f764 <mbedtls_rsa_validate_params>
 8084302:	b968      	cbnz	r0, 8084320 <mbedtls_rsa_check_privkey+0x58>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

#if !defined(MBEDTLS_RSA_NO_CRT)
    else if( mbedtls_rsa_validate_crt( &ctx->P, &ctx->Q, &ctx->D,
 8084304:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8084308:	9301      	str	r3, [sp, #4]
 808430a:	f104 0350 	add.w	r3, r4, #80	; 0x50
 808430e:	9300      	str	r3, [sp, #0]
 8084310:	463a      	mov	r2, r7
 8084312:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8084316:	4631      	mov	r1, r6
 8084318:	4628      	mov	r0, r5
 808431a:	f00b f9a3 	bl	808f664 <mbedtls_rsa_validate_crt>
 808431e:	b100      	cbz	r0, 8084322 <mbedtls_rsa_check_privkey+0x5a>
int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
{
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 8084320:	4801      	ldr	r0, [pc, #4]	; (8084328 <mbedtls_rsa_check_privkey+0x60>)
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }
#endif

    return( 0 );
}
 8084322:	b005      	add	sp, #20
 8084324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084326:	bf00      	nop
 8084328:	ffffbe00 	.word	0xffffbe00

0808432c <mbedtls_rsa_check_pub_priv>:
/*
 * Check if contexts holding a public and private key match
 */
int mbedtls_rsa_check_pub_priv( const mbedtls_rsa_context *pub,
                                const mbedtls_rsa_context *prv )
{
 808432c:	b538      	push	{r3, r4, r5, lr}
 808432e:	4605      	mov	r5, r0
 8084330:	460c      	mov	r4, r1
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
 8084332:	f7ff ffa5 	bl	8084280 <mbedtls_rsa_check_pubkey>
 8084336:	b950      	cbnz	r0, 808434e <mbedtls_rsa_check_pub_priv+0x22>
        mbedtls_rsa_check_privkey( prv ) != 0 )
 8084338:	4620      	mov	r0, r4
 808433a:	f7ff ffc5 	bl	80842c8 <mbedtls_rsa_check_privkey>
 * Check if contexts holding a public and private key match
 */
int mbedtls_rsa_check_pub_priv( const mbedtls_rsa_context *pub,
                                const mbedtls_rsa_context *prv )
{
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
 808433e:	b930      	cbnz	r0, 808434e <mbedtls_rsa_check_pub_priv+0x22>
        mbedtls_rsa_check_privkey( prv ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 8084340:	f104 0108 	add.w	r1, r4, #8
 8084344:	f105 0008 	add.w	r0, r5, #8
 8084348:	f007 fc73 	bl	808bc32 <mbedtls_mpi_cmp_mpi>
 808434c:	b108      	cbz	r0, 8084352 <mbedtls_rsa_check_pub_priv+0x26>
                                const mbedtls_rsa_context *prv )
{
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
        mbedtls_rsa_check_privkey( prv ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 808434e:	4805      	ldr	r0, [pc, #20]	; (8084364 <mbedtls_rsa_check_pub_priv+0x38>)
 8084350:	bd38      	pop	{r3, r4, r5, pc}
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
        mbedtls_mpi_cmp_mpi( &pub->E, &prv->E ) != 0 )
 8084352:	f104 0114 	add.w	r1, r4, #20
 8084356:	f105 0014 	add.w	r0, r5, #20
 808435a:	f007 fc6a 	bl	808bc32 <mbedtls_mpi_cmp_mpi>
        mbedtls_rsa_check_privkey( prv ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 808435e:	2800      	cmp	r0, #0
 8084360:	d1f5      	bne.n	808434e <mbedtls_rsa_check_pub_priv+0x22>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    return( 0 );
}
 8084362:	bd38      	pop	{r3, r4, r5, pc}
 8084364:	ffffbe00 	.word	0xffffbe00

08084368 <mbedtls_rsa_public>:
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
 8084368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808436c:	460c      	mov	r4, r1
 808436e:	b086      	sub	sp, #24
    int ret;
    size_t olen;
    mbedtls_mpi T;

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
 8084370:	2100      	movs	r1, #0
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
 8084372:	4605      	mov	r5, r0
 8084374:	4617      	mov	r7, r2
    int ret;
    size_t olen;
    mbedtls_mpi T;

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
 8084376:	f7ff fe2f 	bl	8083fd8 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
 808437a:	4606      	mov	r6, r0
 808437c:	bb78      	cbnz	r0, 80843de <mbedtls_rsa_public+0x76>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T );
 808437e:	a803      	add	r0, sp, #12
 8084380:	f007 f9f2 	bl	808b768 <mbedtls_mpi_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 8084384:	4621      	mov	r1, r4
 8084386:	686a      	ldr	r2, [r5, #4]
 8084388:	a803      	add	r0, sp, #12
 808438a:	f007 facc 	bl	808b926 <mbedtls_mpi_read_binary>
 808438e:	4604      	mov	r4, r0
 8084390:	b9f0      	cbnz	r0, 80843d0 <mbedtls_rsa_public+0x68>

    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 8084392:	f105 0408 	add.w	r4, r5, #8
 8084396:	4621      	mov	r1, r4
 8084398:	a803      	add	r0, sp, #12
 808439a:	f007 fc4a 	bl	808bc32 <mbedtls_mpi_cmp_mpi>
 808439e:	2800      	cmp	r0, #0
 80843a0:	da14      	bge.n	80843cc <mbedtls_rsa_public+0x64>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    olen = ctx->len;
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 80843a2:	f105 0368 	add.w	r3, r5, #104	; 0x68
 80843a6:	a903      	add	r1, sp, #12
 80843a8:	9300      	str	r3, [sp, #0]
 80843aa:	f105 0214 	add.w	r2, r5, #20
 80843ae:	4623      	mov	r3, r4
 80843b0:	4608      	mov	r0, r1
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    olen = ctx->len;
 80843b2:	f8d5 8004 	ldr.w	r8, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 80843b6:	f008 f80e 	bl	808c3d6 <mbedtls_mpi_exp_mod>
 80843ba:	4604      	mov	r4, r0
 80843bc:	b940      	cbnz	r0, 80843d0 <mbedtls_rsa_public+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 80843be:	4642      	mov	r2, r8
 80843c0:	4639      	mov	r1, r7
 80843c2:	a803      	add	r0, sp, #12
 80843c4:	f007 fae4 	bl	808b990 <mbedtls_mpi_write_binary>
 80843c8:	4604      	mov	r4, r0
 80843ca:	e001      	b.n	80843d0 <mbedtls_rsa_public+0x68>

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );

    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 80843cc:	f06f 0403 	mvn.w	r4, #3
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &T );
 80843d0:	a803      	add	r0, sp, #12
 80843d2:	f007 f9d0 	bl	808b776 <mbedtls_mpi_free>

    if( ret != 0 )
 80843d6:	b11c      	cbz	r4, 80843e0 <mbedtls_rsa_public+0x78>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
 80843d8:	f5a4 4685 	sub.w	r6, r4, #17024	; 0x4280
 80843dc:	e000      	b.n	80843e0 <mbedtls_rsa_public+0x78>
    int ret;
    size_t olen;
    mbedtls_mpi T;

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80843de:	4e02      	ldr	r6, [pc, #8]	; (80843e8 <mbedtls_rsa_public+0x80>)

    if( ret != 0 )
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );

    return( 0 );
}
 80843e0:	4630      	mov	r0, r6
 80843e2:	b006      	add	sp, #24
 80843e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80843e8:	ffffbf80 	.word	0xffffbf80

080843ec <mbedtls_rsa_private>:
int mbedtls_rsa_private( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t),
                 void *p_rng,
                 const unsigned char *input,
                 unsigned char *output )
{
 80843ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80843f0:	460e      	mov	r6, r1
 80843f2:	b0a5      	sub	sp, #148	; 0x94

    /* Temporaries holding the initial input and the double
     * checked result; should be the same in the end. */
    mbedtls_mpi I, C;

    if( rsa_check_context( ctx, 1             /* private key checks */,
 80843f4:	2101      	movs	r1, #1
int mbedtls_rsa_private( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t),
                 void *p_rng,
                 const unsigned char *input,
                 unsigned char *output )
{
 80843f6:	4604      	mov	r4, r0
 80843f8:	4692      	mov	sl, r2
 80843fa:	461d      	mov	r5, r3

    /* Temporaries holding the initial input and the double
     * checked result; should be the same in the end. */
    mbedtls_mpi I, C;

    if( rsa_check_context( ctx, 1             /* private key checks */,
 80843fc:	f7ff fdec 	bl	8083fd8 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
 8084400:	9003      	str	r0, [sp, #12]
 8084402:	2800      	cmp	r0, #0
 8084404:	f040 819b 	bne.w	808473e <mbedtls_rsa_private+0x352>
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    /* MPI Initialization */
    mbedtls_mpi_init( &T );
 8084408:	a806      	add	r0, sp, #24
 808440a:	f007 f9ad 	bl	808b768 <mbedtls_mpi_init>

    mbedtls_mpi_init( &P1 );
 808440e:	a809      	add	r0, sp, #36	; 0x24
 8084410:	f007 f9aa 	bl	808b768 <mbedtls_mpi_init>
    mbedtls_mpi_init( &Q1 );
 8084414:	a80c      	add	r0, sp, #48	; 0x30
 8084416:	f007 f9a7 	bl	808b768 <mbedtls_mpi_init>
    mbedtls_mpi_init( &R );
 808441a:	a80f      	add	r0, sp, #60	; 0x3c
 808441c:	f007 f9a4 	bl	808b768 <mbedtls_mpi_init>

    if( f_rng != NULL )
 8084420:	b12e      	cbz	r6, 808442e <mbedtls_rsa_private+0x42>
    {
#if defined(MBEDTLS_RSA_NO_CRT)
        mbedtls_mpi_init( &D_blind );
#else
        mbedtls_mpi_init( &DP_blind );
 8084422:	a818      	add	r0, sp, #96	; 0x60
 8084424:	f007 f9a0 	bl	808b768 <mbedtls_mpi_init>
        mbedtls_mpi_init( &DQ_blind );
 8084428:	a81b      	add	r0, sp, #108	; 0x6c
 808442a:	f007 f99d 	bl	808b768 <mbedtls_mpi_init>
#endif
    }

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_init( &TP ); mbedtls_mpi_init( &TQ );
 808442e:	a812      	add	r0, sp, #72	; 0x48
 8084430:	f007 f99a 	bl	808b768 <mbedtls_mpi_init>
 8084434:	a815      	add	r0, sp, #84	; 0x54
 8084436:	f007 f997 	bl	808b768 <mbedtls_mpi_init>
#endif

    mbedtls_mpi_init( &I );
 808443a:	a81e      	add	r0, sp, #120	; 0x78
 808443c:	f007 f994 	bl	808b768 <mbedtls_mpi_init>
    mbedtls_mpi_init( &C );
 8084440:	a821      	add	r0, sp, #132	; 0x84
 8084442:	f007 f991 	bl	808b768 <mbedtls_mpi_init>

    /* End of MPI initialization */

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 8084446:	6862      	ldr	r2, [r4, #4]
 8084448:	4629      	mov	r1, r5
 808444a:	a806      	add	r0, sp, #24
 808444c:	f007 fa6b 	bl	808b926 <mbedtls_mpi_read_binary>
 8084450:	4607      	mov	r7, r0
 8084452:	2800      	cmp	r0, #0
 8084454:	f040 8150 	bne.w	80846f8 <mbedtls_rsa_private+0x30c>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 8084458:	f104 0508 	add.w	r5, r4, #8
 808445c:	4629      	mov	r1, r5
 808445e:	a806      	add	r0, sp, #24
 8084460:	f007 fbe7 	bl	808bc32 <mbedtls_mpi_cmp_mpi>
 8084464:	2800      	cmp	r0, #0
 8084466:	f280 8143 	bge.w	80846f0 <mbedtls_rsa_private+0x304>
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );
 808446a:	a906      	add	r1, sp, #24
 808446c:	a81e      	add	r0, sp, #120	; 0x78
 808446e:	f007 f9c4 	bl	808b7fa <mbedtls_mpi_copy>
 8084472:	4607      	mov	r7, r0
 8084474:	2800      	cmp	r0, #0
 8084476:	f040 813f 	bne.w	80846f8 <mbedtls_rsa_private+0x30c>
    mbedtls_mpi DP_blind, DQ_blind;

    /* Pointers to actual exponents to be used - either the unblinded
     * or the blinded ones, depending on the presence of a PRNG. */
    mbedtls_mpi *DP = &ctx->DP;
    mbedtls_mpi *DQ = &ctx->DQ;
 808447a:	f104 0350 	add.w	r3, r4, #80	; 0x50
     * the mod p resp. mod q computation (if used). */
    mbedtls_mpi DP_blind, DQ_blind;

    /* Pointers to actual exponents to be used - either the unblinded
     * or the blinded ones, depending on the presence of a PRNG. */
    mbedtls_mpi *DP = &ctx->DP;
 808447e:	f104 0944 	add.w	r9, r4, #68	; 0x44
    mbedtls_mpi *DQ = &ctx->DQ;
 8084482:	9304      	str	r3, [sp, #16]
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );

    if( f_rng != NULL )
 8084484:	2e00      	cmp	r6, #0
 8084486:	f000 80c5 	beq.w	8084614 <mbedtls_rsa_private+0x228>
static int rsa_prepare_blinding( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    int ret, count = 0;

    if( ctx->Vf.p != NULL )
 808448a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 808448e:	b323      	cbz	r3, 80844da <mbedtls_rsa_private+0xee>
    {
        /* We already have blinding values, just update them by squaring */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vi, &ctx->Vi ) );
 8084490:	f104 088c 	add.w	r8, r4, #140	; 0x8c
 8084494:	4642      	mov	r2, r8
 8084496:	4641      	mov	r1, r8
 8084498:	4640      	mov	r0, r8
 808449a:	f007 fd2e 	bl	808befa <mbedtls_mpi_mul_mpi>
 808449e:	4607      	mov	r7, r0
 80844a0:	2800      	cmp	r0, #0
 80844a2:	f040 8129 	bne.w	80846f8 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vi, &ctx->Vi, &ctx->N ) );
 80844a6:	462a      	mov	r2, r5
 80844a8:	4641      	mov	r1, r8
 80844aa:	4640      	mov	r0, r8
 80844ac:	f007 ff61 	bl	808c372 <mbedtls_mpi_mod_mpi>
 80844b0:	4607      	mov	r7, r0
 80844b2:	2800      	cmp	r0, #0
 80844b4:	f040 8120 	bne.w	80846f8 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vf, &ctx->Vf, &ctx->Vf ) );
 80844b8:	f104 0898 	add.w	r8, r4, #152	; 0x98
 80844bc:	4642      	mov	r2, r8
 80844be:	4641      	mov	r1, r8
 80844c0:	4640      	mov	r0, r8
 80844c2:	f007 fd1a 	bl	808befa <mbedtls_mpi_mul_mpi>
 80844c6:	4607      	mov	r7, r0
 80844c8:	2800      	cmp	r0, #0
 80844ca:	f040 8115 	bne.w	80846f8 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vf, &ctx->Vf, &ctx->N ) );
 80844ce:	462a      	mov	r2, r5
 80844d0:	4641      	mov	r1, r8
 80844d2:	4640      	mov	r0, r8
 80844d4:	f007 ff4d 	bl	808c372 <mbedtls_mpi_mod_mpi>
 80844d8:	e037      	b.n	808454a <mbedtls_rsa_private+0x15e>
static int rsa_prepare_blinding( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    int ret, count = 0;

    if( ctx->Vf.p != NULL )
 80844da:	230c      	movs	r3, #12
 80844dc:	9305      	str	r3, [sp, #20]
    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
            return( MBEDTLS_ERR_RSA_RNG_FAILED );

        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 80844de:	f104 0b98 	add.w	fp, r4, #152	; 0x98
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 80844e2:	f104 088c 	add.w	r8, r4, #140	; 0x8c
        goto cleanup;
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
 80844e6:	9b05      	ldr	r3, [sp, #20]
 80844e8:	3b01      	subs	r3, #1
 80844ea:	9305      	str	r3, [sp, #20]
 80844ec:	f000 812a 	beq.w	8084744 <mbedtls_rsa_private+0x358>
            return( MBEDTLS_ERR_RSA_RNG_FAILED );

        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 80844f0:	6861      	ldr	r1, [r4, #4]
 80844f2:	4653      	mov	r3, sl
 80844f4:	4632      	mov	r2, r6
 80844f6:	3901      	subs	r1, #1
 80844f8:	4658      	mov	r0, fp
 80844fa:	f008 fa10 	bl	808c91e <mbedtls_mpi_fill_random>
 80844fe:	4607      	mov	r7, r0
 8084500:	2800      	cmp	r0, #0
 8084502:	f040 80f9 	bne.w	80846f8 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 8084506:	462a      	mov	r2, r5
 8084508:	4659      	mov	r1, fp
 808450a:	4640      	mov	r0, r8
 808450c:	f008 f982 	bl	808c814 <mbedtls_mpi_gcd>
 8084510:	4607      	mov	r7, r0
 8084512:	2800      	cmp	r0, #0
 8084514:	f040 80f0 	bne.w	80846f8 <mbedtls_rsa_private+0x30c>
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );
 8084518:	2101      	movs	r1, #1
 808451a:	4640      	mov	r0, r8
 808451c:	f007 fbce 	bl	808bcbc <mbedtls_mpi_cmp_int>

        goto cleanup;
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
 8084520:	2800      	cmp	r0, #0
 8084522:	d1e0      	bne.n	80844e6 <mbedtls_rsa_private+0xfa>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );

    /* Blinding value: Vi =  Vf^(-e) mod N */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 8084524:	462a      	mov	r2, r5
 8084526:	4659      	mov	r1, fp
 8084528:	4640      	mov	r0, r8
 808452a:	f008 fa1b 	bl	808c964 <mbedtls_mpi_inv_mod>
 808452e:	4607      	mov	r7, r0
 8084530:	2800      	cmp	r0, #0
 8084532:	f040 80e1 	bne.w	80846f8 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vi, &ctx->Vi, &ctx->E, &ctx->N, &ctx->RN ) );
 8084536:	f104 0368 	add.w	r3, r4, #104	; 0x68
 808453a:	9300      	str	r3, [sp, #0]
 808453c:	f104 0214 	add.w	r2, r4, #20
 8084540:	462b      	mov	r3, r5
 8084542:	4641      	mov	r1, r8
 8084544:	4640      	mov	r0, r8
 8084546:	f007 ff46 	bl	808c3d6 <mbedtls_mpi_exp_mod>
 808454a:	4607      	mov	r7, r0
    {
        /*
         * Blinding
         * T = T * Vi mod N
         */
        MBEDTLS_MPI_CHK( rsa_prepare_blinding( ctx, f_rng, p_rng ) );
 808454c:	2800      	cmp	r0, #0
 808454e:	f040 80d3 	bne.w	80846f8 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vi ) );
 8084552:	a906      	add	r1, sp, #24
 8084554:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 8084558:	4608      	mov	r0, r1
 808455a:	f007 fcce 	bl	808befa <mbedtls_mpi_mul_mpi>
 808455e:	4607      	mov	r7, r0
 8084560:	2800      	cmp	r0, #0
 8084562:	f040 80c9 	bne.w	80846f8 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 8084566:	a906      	add	r1, sp, #24
 8084568:	462a      	mov	r2, r5
 808456a:	4608      	mov	r0, r1
 808456c:	f007 ff01 	bl	808c372 <mbedtls_mpi_mod_mpi>
 8084570:	4607      	mov	r7, r0
 8084572:	2800      	cmp	r0, #0
 8084574:	f040 80c0 	bne.w	80846f8 <mbedtls_rsa_private+0x30c>

        /*
         * Exponent blinding
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
 8084578:	2201      	movs	r2, #1
 808457a:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 808457e:	a809      	add	r0, sp, #36	; 0x24
 8084580:	f007 fca5 	bl	808bece <mbedtls_mpi_sub_int>
 8084584:	4607      	mov	r7, r0
 8084586:	2800      	cmp	r0, #0
 8084588:	f040 80b6 	bne.w	80846f8 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
 808458c:	2201      	movs	r2, #1
 808458e:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8084592:	a80c      	add	r0, sp, #48	; 0x30
 8084594:	f007 fc9b 	bl	808bece <mbedtls_mpi_sub_int>
 8084598:	4607      	mov	r7, r0
 808459a:	2800      	cmp	r0, #0
 808459c:	f040 80ac 	bne.w	80846f8 <mbedtls_rsa_private+0x30c>
        D = &D_blind;
#else
        /*
         * DP_blind = ( P - 1 ) * R + DP
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 80845a0:	4653      	mov	r3, sl
 80845a2:	4632      	mov	r2, r6
 80845a4:	211c      	movs	r1, #28
 80845a6:	a80f      	add	r0, sp, #60	; 0x3c
 80845a8:	f008 f9b9 	bl	808c91e <mbedtls_mpi_fill_random>
 80845ac:	4607      	mov	r7, r0
 80845ae:	2800      	cmp	r0, #0
 80845b0:	f040 80a2 	bne.w	80846f8 <mbedtls_rsa_private+0x30c>
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
 80845b4:	aa0f      	add	r2, sp, #60	; 0x3c
 80845b6:	a909      	add	r1, sp, #36	; 0x24
 80845b8:	a818      	add	r0, sp, #96	; 0x60
 80845ba:	f007 fc9e 	bl	808befa <mbedtls_mpi_mul_mpi>
 80845be:	4607      	mov	r7, r0
 80845c0:	2800      	cmp	r0, #0
 80845c2:	f040 8099 	bne.w	80846f8 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
 80845c6:	a918      	add	r1, sp, #96	; 0x60
 80845c8:	464a      	mov	r2, r9
 80845ca:	4608      	mov	r0, r1
 80845cc:	f007 fc26 	bl	808be1c <mbedtls_mpi_add_mpi>
 80845d0:	4607      	mov	r7, r0
 80845d2:	2800      	cmp	r0, #0
 80845d4:	f040 8090 	bne.w	80846f8 <mbedtls_rsa_private+0x30c>
        DP = &DP_blind;

        /*
         * DQ_blind = ( Q - 1 ) * R + DQ
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 80845d8:	4653      	mov	r3, sl
 80845da:	4632      	mov	r2, r6
 80845dc:	211c      	movs	r1, #28
 80845de:	a80f      	add	r0, sp, #60	; 0x3c
 80845e0:	f008 f99d 	bl	808c91e <mbedtls_mpi_fill_random>
 80845e4:	4607      	mov	r7, r0
 80845e6:	2800      	cmp	r0, #0
 80845e8:	f040 8086 	bne.w	80846f8 <mbedtls_rsa_private+0x30c>
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DQ_blind, &Q1, &R ) );
 80845ec:	aa0f      	add	r2, sp, #60	; 0x3c
 80845ee:	a90c      	add	r1, sp, #48	; 0x30
 80845f0:	a81b      	add	r0, sp, #108	; 0x6c
 80845f2:	f007 fc82 	bl	808befa <mbedtls_mpi_mul_mpi>
 80845f6:	4607      	mov	r7, r0
 80845f8:	2800      	cmp	r0, #0
 80845fa:	d17d      	bne.n	80846f8 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DQ_blind, &DQ_blind,
 80845fc:	a91b      	add	r1, sp, #108	; 0x6c
 80845fe:	9a04      	ldr	r2, [sp, #16]
 8084600:	4608      	mov	r0, r1
 8084602:	f007 fc0b 	bl	808be1c <mbedtls_mpi_add_mpi>
 8084606:	4607      	mov	r7, r0
 8084608:	2800      	cmp	r0, #0
 808460a:	d175      	bne.n	80846f8 <mbedtls_rsa_private+0x30c>
                    &ctx->DQ ) );

        DQ = &DQ_blind;
 808460c:	ab1b      	add	r3, sp, #108	; 0x6c
 808460e:	9304      	str	r3, [sp, #16]
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
                    &ctx->DP ) );

        DP = &DP_blind;
 8084610:	f10d 0960 	add.w	r9, sp, #96	; 0x60
     *
     * TP = input ^ dP mod P
     * TQ = input ^ dQ mod Q
     */

    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TP, &T, DP, &ctx->P, &ctx->RP ) );
 8084614:	f104 0374 	add.w	r3, r4, #116	; 0x74
 8084618:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 808461c:	9300      	str	r3, [sp, #0]
 808461e:	464a      	mov	r2, r9
 8084620:	4643      	mov	r3, r8
 8084622:	a906      	add	r1, sp, #24
 8084624:	a812      	add	r0, sp, #72	; 0x48
 8084626:	f007 fed6 	bl	808c3d6 <mbedtls_mpi_exp_mod>
 808462a:	4607      	mov	r7, r0
 808462c:	2800      	cmp	r0, #0
 808462e:	d163      	bne.n	80846f8 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TQ, &T, DQ, &ctx->Q, &ctx->RQ ) );
 8084630:	f104 0380 	add.w	r3, r4, #128	; 0x80
 8084634:	f104 0938 	add.w	r9, r4, #56	; 0x38
 8084638:	9300      	str	r3, [sp, #0]
 808463a:	9a04      	ldr	r2, [sp, #16]
 808463c:	464b      	mov	r3, r9
 808463e:	a906      	add	r1, sp, #24
 8084640:	a815      	add	r0, sp, #84	; 0x54
 8084642:	f007 fec8 	bl	808c3d6 <mbedtls_mpi_exp_mod>
 8084646:	4607      	mov	r7, r0
 8084648:	2800      	cmp	r0, #0
 808464a:	d155      	bne.n	80846f8 <mbedtls_rsa_private+0x30c>

    /*
     * T = (TP - TQ) * (Q^-1 mod P) mod P
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T, &TP, &TQ ) );
 808464c:	aa15      	add	r2, sp, #84	; 0x54
 808464e:	a912      	add	r1, sp, #72	; 0x48
 8084650:	a806      	add	r0, sp, #24
 8084652:	f007 fc04 	bl	808be5e <mbedtls_mpi_sub_mpi>
 8084656:	4607      	mov	r7, r0
 8084658:	2800      	cmp	r0, #0
 808465a:	d14d      	bne.n	80846f8 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->QP ) );
 808465c:	f104 025c 	add.w	r2, r4, #92	; 0x5c
 8084660:	a906      	add	r1, sp, #24
 8084662:	a812      	add	r0, sp, #72	; 0x48
 8084664:	f007 fc49 	bl	808befa <mbedtls_mpi_mul_mpi>
 8084668:	4607      	mov	r7, r0
 808466a:	2800      	cmp	r0, #0
 808466c:	d144      	bne.n	80846f8 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &TP, &ctx->P ) );
 808466e:	4642      	mov	r2, r8
 8084670:	a912      	add	r1, sp, #72	; 0x48
 8084672:	a806      	add	r0, sp, #24
 8084674:	f007 fe7d 	bl	808c372 <mbedtls_mpi_mod_mpi>
 8084678:	4607      	mov	r7, r0
 808467a:	2800      	cmp	r0, #0
 808467c:	d13c      	bne.n	80846f8 <mbedtls_rsa_private+0x30c>

    /*
     * T = TQ + T * Q
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->Q ) );
 808467e:	464a      	mov	r2, r9
 8084680:	a906      	add	r1, sp, #24
 8084682:	a812      	add	r0, sp, #72	; 0x48
 8084684:	f007 fc39 	bl	808befa <mbedtls_mpi_mul_mpi>
 8084688:	4607      	mov	r7, r0
 808468a:	2800      	cmp	r0, #0
 808468c:	d134      	bne.n	80846f8 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T, &TQ, &TP ) );
 808468e:	aa12      	add	r2, sp, #72	; 0x48
 8084690:	a915      	add	r1, sp, #84	; 0x54
 8084692:	a806      	add	r0, sp, #24
 8084694:	f007 fbc2 	bl	808be1c <mbedtls_mpi_add_mpi>
 8084698:	4607      	mov	r7, r0
 808469a:	bb68      	cbnz	r0, 80846f8 <mbedtls_rsa_private+0x30c>
#endif /* MBEDTLS_RSA_NO_CRT */

    if( f_rng != NULL )
 808469c:	b966      	cbnz	r6, 80846b8 <mbedtls_rsa_private+0x2cc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
    }

    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
 808469e:	f104 0368 	add.w	r3, r4, #104	; 0x68
 80846a2:	9300      	str	r3, [sp, #0]
 80846a4:	f104 0214 	add.w	r2, r4, #20
 80846a8:	462b      	mov	r3, r5
 80846aa:	a906      	add	r1, sp, #24
 80846ac:	a821      	add	r0, sp, #132	; 0x84
 80846ae:	f007 fe92 	bl	808c3d6 <mbedtls_mpi_exp_mod>
 80846b2:	4607      	mov	r7, r0
 80846b4:	bb00      	cbnz	r0, 80846f8 <mbedtls_rsa_private+0x30c>
 80846b6:	e00f      	b.n	80846d8 <mbedtls_rsa_private+0x2ec>
    {
        /*
         * Unblind
         * T = T * Vf mod N
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
 80846b8:	a906      	add	r1, sp, #24
 80846ba:	f104 0298 	add.w	r2, r4, #152	; 0x98
 80846be:	4608      	mov	r0, r1
 80846c0:	f007 fc1b 	bl	808befa <mbedtls_mpi_mul_mpi>
 80846c4:	4607      	mov	r7, r0
 80846c6:	b9b8      	cbnz	r0, 80846f8 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 80846c8:	a906      	add	r1, sp, #24
 80846ca:	462a      	mov	r2, r5
 80846cc:	4608      	mov	r0, r1
 80846ce:	f007 fe50 	bl	808c372 <mbedtls_mpi_mod_mpi>
 80846d2:	4607      	mov	r7, r0
 80846d4:	b980      	cbnz	r0, 80846f8 <mbedtls_rsa_private+0x30c>
 80846d6:	e7e2      	b.n	808469e <mbedtls_rsa_private+0x2b2>
    }

    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
                                          &ctx->N, &ctx->RN ) );
    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
 80846d8:	a91e      	add	r1, sp, #120	; 0x78
 80846da:	a821      	add	r0, sp, #132	; 0x84
 80846dc:	f007 faa9 	bl	808bc32 <mbedtls_mpi_cmp_mpi>
 80846e0:	b948      	cbnz	r0, 80846f6 <mbedtls_rsa_private+0x30a>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
        goto cleanup;
    }

    olen = ctx->len;
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 80846e2:	6862      	ldr	r2, [r4, #4]
 80846e4:	992e      	ldr	r1, [sp, #184]	; 0xb8
 80846e6:	a806      	add	r0, sp, #24
 80846e8:	f007 f952 	bl	808b990 <mbedtls_mpi_write_binary>
 80846ec:	4607      	mov	r7, r0
 80846ee:	e003      	b.n	80846f8 <mbedtls_rsa_private+0x30c>
    /* End of MPI initialization */

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 80846f0:	f06f 0703 	mvn.w	r7, #3
 80846f4:	e000      	b.n	80846f8 <mbedtls_rsa_private+0x30c>
    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
                                          &ctx->N, &ctx->RN ) );
    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 80846f6:	4f16      	ldr	r7, [pc, #88]	; (8084750 <mbedtls_rsa_private+0x364>)
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &P1 );
 80846f8:	a809      	add	r0, sp, #36	; 0x24
 80846fa:	f007 f83c 	bl	808b776 <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
 80846fe:	a80c      	add	r0, sp, #48	; 0x30
 8084700:	f007 f839 	bl	808b776 <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
 8084704:	a80f      	add	r0, sp, #60	; 0x3c
 8084706:	f007 f836 	bl	808b776 <mbedtls_mpi_free>

    if( f_rng != NULL )
 808470a:	b12e      	cbz	r6, 8084718 <mbedtls_rsa_private+0x32c>
    {
#if defined(MBEDTLS_RSA_NO_CRT)
        mbedtls_mpi_free( &D_blind );
#else
        mbedtls_mpi_free( &DP_blind );
 808470c:	a818      	add	r0, sp, #96	; 0x60
 808470e:	f007 f832 	bl	808b776 <mbedtls_mpi_free>
        mbedtls_mpi_free( &DQ_blind );
 8084712:	a81b      	add	r0, sp, #108	; 0x6c
 8084714:	f007 f82f 	bl	808b776 <mbedtls_mpi_free>
#endif
    }

    mbedtls_mpi_free( &T );
 8084718:	a806      	add	r0, sp, #24
 808471a:	f007 f82c 	bl	808b776 <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &TP ); mbedtls_mpi_free( &TQ );
 808471e:	a812      	add	r0, sp, #72	; 0x48
 8084720:	f007 f829 	bl	808b776 <mbedtls_mpi_free>
 8084724:	a815      	add	r0, sp, #84	; 0x54
 8084726:	f007 f826 	bl	808b776 <mbedtls_mpi_free>
#endif

    mbedtls_mpi_free( &C );
 808472a:	a821      	add	r0, sp, #132	; 0x84
 808472c:	f007 f823 	bl	808b776 <mbedtls_mpi_free>
    mbedtls_mpi_free( &I );
 8084730:	a81e      	add	r0, sp, #120	; 0x78
 8084732:	f007 f820 	bl	808b776 <mbedtls_mpi_free>

    if( ret != 0 )
 8084736:	b13f      	cbz	r7, 8084748 <mbedtls_rsa_private+0x35c>
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );
 8084738:	f5a7 4386 	sub.w	r3, r7, #17152	; 0x4300
 808473c:	e000      	b.n	8084740 <mbedtls_rsa_private+0x354>
    mbedtls_mpi I, C;

    if( rsa_check_context( ctx, 1             /* private key checks */,
                                f_rng != NULL /* blinding y/n       */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 808473e:	4b05      	ldr	r3, [pc, #20]	; (8084754 <mbedtls_rsa_private+0x368>)
 8084740:	9303      	str	r3, [sp, #12]
 8084742:	e001      	b.n	8084748 <mbedtls_rsa_private+0x35c>
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
            return( MBEDTLS_ERR_RSA_RNG_FAILED );
 8084744:	4f04      	ldr	r7, [pc, #16]	; (8084758 <mbedtls_rsa_private+0x36c>)
 8084746:	e7d7      	b.n	80846f8 <mbedtls_rsa_private+0x30c>

    if( ret != 0 )
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );

    return( 0 );
}
 8084748:	9803      	ldr	r0, [sp, #12]
 808474a:	b025      	add	sp, #148	; 0x94
 808474c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084750:	ffffbc80 	.word	0xffffbc80
 8084754:	ffffbf80 	.word	0xffffbf80
 8084758:	ffffbb80 	.word	0xffffbb80

0808475c <mbedtls_rsa_rsaes_oaep_encrypt>:
                            int mode,
                            const unsigned char *label, size_t label_len,
                            size_t ilen,
                            const unsigned char *input,
                            unsigned char *output )
{
 808475c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    unsigned char *p = output;
    unsigned int hlen;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8084760:	2b01      	cmp	r3, #1
                            int mode,
                            const unsigned char *label, size_t label_len,
                            size_t ilen,
                            const unsigned char *input,
                            unsigned char *output )
{
 8084762:	b08b      	sub	sp, #44	; 0x2c
 8084764:	4680      	mov	r8, r0
 8084766:	468b      	mov	fp, r1
 8084768:	9203      	str	r2, [sp, #12]
 808476a:	9304      	str	r3, [sp, #16]
 808476c:	9f16      	ldr	r7, [sp, #88]	; 0x58
 808476e:	9e18      	ldr	r6, [sp, #96]	; 0x60
    unsigned char *p = output;
    unsigned int hlen;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8084770:	d105      	bne.n	808477e <mbedtls_rsa_rsaes_oaep_encrypt+0x22>
 8084772:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8084776:	2b01      	cmp	r3, #1
 8084778:	d001      	beq.n	808477e <mbedtls_rsa_rsaes_oaep_encrypt+0x22>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 808477a:	4840      	ldr	r0, [pc, #256]	; (808487c <mbedtls_rsa_rsaes_oaep_encrypt+0x120>)
 808477c:	e07a      	b.n	8084874 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>

    if( f_rng == NULL )
 808477e:	f1bb 0f00 	cmp.w	fp, #0
 8084782:	d0fa      	beq.n	808477a <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 8084784:	f898 00a8 	ldrb.w	r0, [r8, #168]	; 0xa8
 8084788:	f003 fb4a 	bl	8087e20 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 808478c:	9002      	str	r0, [sp, #8]
 808478e:	2800      	cmp	r0, #0
 8084790:	d0f3      	beq.n	808477a <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
 8084792:	f8d8 4004 	ldr.w	r4, [r8, #4]
    hlen = mbedtls_md_get_size( md_info );
 8084796:	f003 fc87 	bl	80880a8 <mbedtls_md_get_size>

    /* first comparison checks for overflow */
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
 808479a:	0043      	lsls	r3, r0, #1
 808479c:	9305      	str	r3, [sp, #20]
 808479e:	0042      	lsls	r2, r0, #1
 80847a0:	1cbb      	adds	r3, r7, #2
 80847a2:	4413      	add	r3, r2
 80847a4:	429f      	cmp	r7, r3
    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
    hlen = mbedtls_md_get_size( md_info );
 80847a6:	4605      	mov	r5, r0

    /* first comparison checks for overflow */
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
 80847a8:	d8e7      	bhi.n	808477a <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
 80847aa:	429c      	cmp	r4, r3
 80847ac:	d3e5      	bcc.n	808477a <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    memset( output, 0, olen );
 80847ae:	4622      	mov	r2, r4
 80847b0:	2100      	movs	r1, #0
 80847b2:	4630      	mov	r0, r6
 80847b4:	f00f fa09 	bl	8093bca <memset>

    *p++ = 0;
 80847b8:	f106 0901 	add.w	r9, r6, #1
 80847bc:	2300      	movs	r3, #0
 80847be:	7033      	strb	r3, [r6, #0]

    /* Generate a random octet string seed */
    if( ( ret = f_rng( p_rng, p, hlen ) ) != 0 )
 80847c0:	462a      	mov	r2, r5
 80847c2:	4649      	mov	r1, r9
 80847c4:	9803      	ldr	r0, [sp, #12]
 80847c6:	47d8      	blx	fp
 80847c8:	b110      	cbz	r0, 80847d0 <mbedtls_rsa_rsaes_oaep_encrypt+0x74>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 80847ca:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
 80847ce:	e051      	b.n	8084874 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>

    p += hlen;
 80847d0:	eb09 0a05 	add.w	sl, r9, r5

    /* Construct DB */
    if( ( ret = mbedtls_md( md_info, label, label_len, p ) ) != 0 )
 80847d4:	4653      	mov	r3, sl
 80847d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80847d8:	9914      	ldr	r1, [sp, #80]	; 0x50
 80847da:	9802      	ldr	r0, [sp, #8]
 80847dc:	f003 fb92 	bl	8087f04 <mbedtls_md>
 80847e0:	2800      	cmp	r0, #0
 80847e2:	d147      	bne.n	8084874 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>
 80847e4:	9005      	str	r0, [sp, #20]
 80847e6:	1ea0      	subs	r0, r4, #2
 80847e8:	1bc0      	subs	r0, r0, r7
 80847ea:	006b      	lsls	r3, r5, #1
 80847ec:	4428      	add	r0, r5
 80847ee:	1ac0      	subs	r0, r0, r3
        return( ret );
    p += hlen;
    p += olen - 2 * hlen - 2 - ilen;
    *p++ = 1;
 80847f0:	2201      	movs	r2, #1
 80847f2:	f80a 2000 	strb.w	r2, [sl, r0]
    memcpy( p, input, ilen );
 80847f6:	4410      	add	r0, r2
 80847f8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80847fa:	463a      	mov	r2, r7
 80847fc:	4450      	add	r0, sl

    mbedtls_md_init( &md_ctx );
 80847fe:	af07      	add	r7, sp, #28
    if( ( ret = mbedtls_md( md_info, label, label_len, p ) ) != 0 )
        return( ret );
    p += hlen;
    p += olen - 2 * hlen - 2 - ilen;
    *p++ = 1;
    memcpy( p, input, ilen );
 8084800:	f00f f9bd 	bl	8093b7e <memcpy>

    mbedtls_md_init( &md_ctx );
 8084804:	4638      	mov	r0, r7
 8084806:	f003 fb17 	bl	8087e38 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 808480a:	9b05      	ldr	r3, [sp, #20]
 808480c:	9902      	ldr	r1, [sp, #8]
 808480e:	461a      	mov	r2, r3
 8084810:	4638      	mov	r0, r7
 8084812:	f003 fb37 	bl	8087e84 <mbedtls_md_setup>
 8084816:	4602      	mov	r2, r0
 8084818:	b9a8      	cbnz	r0, 8084846 <mbedtls_rsa_rsaes_oaep_encrypt+0xea>
        goto exit;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( output + hlen + 1, olen - hlen - 1, output + 1, hlen,
 808481a:	f105 0a01 	add.w	sl, r5, #1
 808481e:	3c01      	subs	r4, #1
 8084820:	44b2      	add	sl, r6
 8084822:	1b64      	subs	r4, r4, r5
 8084824:	464a      	mov	r2, r9
 8084826:	9700      	str	r7, [sp, #0]
 8084828:	462b      	mov	r3, r5
 808482a:	4621      	mov	r1, r4
 808482c:	4650      	mov	r0, sl
 808482e:	f7ff faef 	bl	8083e10 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 8084832:	4602      	mov	r2, r0
 8084834:	b938      	cbnz	r0, 8084846 <mbedtls_rsa_rsaes_oaep_encrypt+0xea>
                          &md_ctx ) ) != 0 )
        goto exit;

    /* maskedSeed: Apply seedMask to seed */
    if( ( ret = mgf_mask( output + 1, hlen, output + hlen + 1, olen - hlen - 1,
 8084836:	4652      	mov	r2, sl
 8084838:	9700      	str	r7, [sp, #0]
 808483a:	4623      	mov	r3, r4
 808483c:	4629      	mov	r1, r5
 808483e:	4648      	mov	r0, r9
 8084840:	f7ff fae6 	bl	8083e10 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 8084844:	4602      	mov	r2, r0
                          &md_ctx ) ) != 0 )
        goto exit;

exit:
    mbedtls_md_free( &md_ctx );
 8084846:	a807      	add	r0, sp, #28
 8084848:	9202      	str	r2, [sp, #8]
 808484a:	f003 fafa 	bl	8087e42 <mbedtls_md_free>

    if( ret != 0 )
 808484e:	9a02      	ldr	r2, [sp, #8]
 8084850:	b97a      	cbnz	r2, 8084872 <mbedtls_rsa_rsaes_oaep_encrypt+0x116>
        return( ret );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8084852:	9b04      	ldr	r3, [sp, #16]
 8084854:	b92b      	cbnz	r3, 8084862 <mbedtls_rsa_rsaes_oaep_encrypt+0x106>
 8084856:	4632      	mov	r2, r6
 8084858:	4631      	mov	r1, r6
 808485a:	4640      	mov	r0, r8
 808485c:	f7ff fd84 	bl	8084368 <mbedtls_rsa_public>
 8084860:	e008      	b.n	8084874 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>
 8084862:	9600      	str	r6, [sp, #0]
 8084864:	4633      	mov	r3, r6
 8084866:	9a03      	ldr	r2, [sp, #12]
 8084868:	4659      	mov	r1, fp
 808486a:	4640      	mov	r0, r8
 808486c:	f7ff fdbe 	bl	80843ec <mbedtls_rsa_private>
 8084870:	e000      	b.n	8084874 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>
 8084872:	4610      	mov	r0, r2
}
 8084874:	b00b      	add	sp, #44	; 0x2c
 8084876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808487a:	bf00      	nop
 808487c:	ffffbf80 	.word	0xffffbf80

08084880 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>:
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng,
                                 int mode, size_t ilen,
                                 const unsigned char *input,
                                 unsigned char *output )
{
 8084880:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084884:	469a      	mov	sl, r3
    size_t nb_pad, olen;
    int ret;
    unsigned char *p = output;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8084886:	f1ba 0f01 	cmp.w	sl, #1
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng,
                                 int mode, size_t ilen,
                                 const unsigned char *input,
                                 unsigned char *output )
{
 808488a:	4607      	mov	r7, r0
 808488c:	4689      	mov	r9, r1
 808488e:	4693      	mov	fp, r2
 8084890:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8084894:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8084896:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    size_t nb_pad, olen;
    int ret;
    unsigned char *p = output;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8084898:	d103      	bne.n	80848a2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x22>
 808489a:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 808489e:	2a00      	cmp	r2, #0
 80848a0:	d155      	bne.n	808494e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    // We don't check p_rng because it won't be dereferenced here
    if( f_rng == NULL || input == NULL || output == NULL )
 80848a2:	f1b9 0f00 	cmp.w	r9, #0
 80848a6:	d052      	beq.n	808494e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
 80848a8:	2b00      	cmp	r3, #0
 80848aa:	d050      	beq.n	808494e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
 80848ac:	2e00      	cmp	r6, #0
 80848ae:	d04e      	beq.n	808494e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
 80848b0:	f118 020b 	adds.w	r2, r8, #11

    // We don't check p_rng because it won't be dereferenced here
    if( f_rng == NULL || input == NULL || output == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
 80848b4:	687c      	ldr	r4, [r7, #4]

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
 80848b6:	d24a      	bcs.n	808494e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
 80848b8:	4294      	cmp	r4, r2
 80848ba:	d348      	bcc.n	808494e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    nb_pad = olen - 3 - ilen;

    *p++ = 0;
 80848bc:	4635      	mov	r5, r6

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    nb_pad = olen - 3 - ilen;
 80848be:	3c03      	subs	r4, #3

    *p++ = 0;
 80848c0:	2200      	movs	r2, #0

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    nb_pad = olen - 3 - ilen;
 80848c2:	ebc8 0404 	rsb	r4, r8, r4

    *p++ = 0;
 80848c6:	f805 2b02 	strb.w	r2, [r5], #2
    if( mode == MBEDTLS_RSA_PUBLIC )
 80848ca:	f1ba 0f00 	cmp.w	sl, #0
 80848ce:	d118      	bne.n	8084902 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x82>
    {
        *p++ = MBEDTLS_RSA_CRYPT;
 80848d0:	2202      	movs	r2, #2
 80848d2:	7072      	strb	r2, [r6, #1]
 80848d4:	442c      	add	r4, r5

        while( nb_pad-- > 0 )
 80848d6:	42a5      	cmp	r5, r4
 80848d8:	d01c      	beq.n	8084914 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x94>
 80848da:	2264      	movs	r2, #100	; 0x64
 80848dc:	9200      	str	r2, [sp, #0]
        {
            int rng_dl = 100;

            do {
                ret = f_rng( p_rng, p, 1 );
 80848de:	2201      	movs	r2, #1
 80848e0:	4629      	mov	r1, r5
 80848e2:	4658      	mov	r0, fp
 80848e4:	9301      	str	r3, [sp, #4]
 80848e6:	47c8      	blx	r9
            } while( *p == 0 && --rng_dl && ret == 0 );
 80848e8:	782a      	ldrb	r2, [r5, #0]
 80848ea:	9b01      	ldr	r3, [sp, #4]
 80848ec:	bb8a      	cbnz	r2, 8084952 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd2>
 80848ee:	9a00      	ldr	r2, [sp, #0]
 80848f0:	3a01      	subs	r2, #1
 80848f2:	9200      	str	r2, [sp, #0]
 80848f4:	d102      	bne.n	80848fc <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x7c>

            /* Check if RNG failed to generate data */
            if( rng_dl == 0 || ret != 0 )
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 80848f6:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
 80848fa:	e02e      	b.n	808495a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xda>
        {
            int rng_dl = 100;

            do {
                ret = f_rng( p_rng, p, 1 );
            } while( *p == 0 && --rng_dl && ret == 0 );
 80848fc:	2800      	cmp	r0, #0
 80848fe:	d0ee      	beq.n	80848de <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x5e>
 8084900:	e7f9      	b.n	80848f6 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x76>
            p++;
        }
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;
 8084902:	2201      	movs	r2, #1
 8084904:	7072      	strb	r2, [r6, #1]
 8084906:	442c      	add	r4, r5

        while( nb_pad-- > 0 )
            *p++ = 0xFF;
 8084908:	22ff      	movs	r2, #255	; 0xff
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;

        while( nb_pad-- > 0 )
 808490a:	42ac      	cmp	r4, r5
 808490c:	d002      	beq.n	8084914 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x94>
            *p++ = 0xFF;
 808490e:	f805 2b01 	strb.w	r2, [r5], #1
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;

        while( nb_pad-- > 0 )
 8084912:	e7fa      	b.n	808490a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x8a>
            *p++ = 0xFF;
    }

    *p++ = 0;
 8084914:	4620      	mov	r0, r4
 8084916:	2200      	movs	r2, #0
 8084918:	f800 2b01 	strb.w	r2, [r0], #1
    memcpy( p, input, ilen );
 808491c:	4619      	mov	r1, r3
 808491e:	4642      	mov	r2, r8
 8084920:	f00f f92d 	bl	8093b7e <memcpy>

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8084924:	f1ba 0f00 	cmp.w	sl, #0
 8084928:	d107      	bne.n	808493a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xba>
 808492a:	4632      	mov	r2, r6
 808492c:	4631      	mov	r1, r6
 808492e:	4638      	mov	r0, r7
}
 8084930:	b003      	add	sp, #12
 8084932:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    *p++ = 0;
    memcpy( p, input, ilen );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8084936:	f7ff bd17 	b.w	8084368 <mbedtls_rsa_public>
 808493a:	4633      	mov	r3, r6
 808493c:	465a      	mov	r2, fp
 808493e:	4649      	mov	r1, r9
 8084940:	4638      	mov	r0, r7
 8084942:	960c      	str	r6, [sp, #48]	; 0x30
}
 8084944:	b003      	add	sp, #12
 8084946:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    *p++ = 0;
    memcpy( p, input, ilen );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 808494a:	f7ff bd4f 	b.w	80843ec <mbedtls_rsa_private>
    size_t nb_pad, olen;
    int ret;
    unsigned char *p = output;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 808494e:	4804      	ldr	r0, [pc, #16]	; (8084960 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xe0>)
 8084950:	e003      	b.n	808495a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xda>
            do {
                ret = f_rng( p_rng, p, 1 );
            } while( *p == 0 && --rng_dl && ret == 0 );

            /* Check if RNG failed to generate data */
            if( rng_dl == 0 || ret != 0 )
 8084952:	2800      	cmp	r0, #0
 8084954:	d1cf      	bne.n	80848f6 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x76>
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );

            p++;
 8084956:	3501      	adds	r5, #1
    *p++ = 0;
    if( mode == MBEDTLS_RSA_PUBLIC )
    {
        *p++ = MBEDTLS_RSA_CRYPT;

        while( nb_pad-- > 0 )
 8084958:	e7bd      	b.n	80848d6 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x56>
    memcpy( p, input, ilen );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
}
 808495a:	b003      	add	sp, #12
 808495c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084960:	ffffbf80 	.word	0xffffbf80

08084964 <mbedtls_rsa_pkcs1_encrypt>:
                       int (*f_rng)(void *, unsigned char *, size_t),
                       void *p_rng,
                       int mode, size_t ilen,
                       const unsigned char *input,
                       unsigned char *output )
{
 8084964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8084966:	b087      	sub	sp, #28
    switch( ctx->padding )
 8084968:	f8d0 70a4 	ldr.w	r7, [r0, #164]	; 0xa4
                       int (*f_rng)(void *, unsigned char *, size_t),
                       void *p_rng,
                       int mode, size_t ilen,
                       const unsigned char *input,
                       unsigned char *output )
{
 808496c:	ac0c      	add	r4, sp, #48	; 0x30
 808496e:	cc70      	ldmia	r4, {r4, r5, r6}
    switch( ctx->padding )
 8084970:	b157      	cbz	r7, 8084988 <mbedtls_rsa_pkcs1_encrypt+0x24>
 8084972:	2f01      	cmp	r7, #1
 8084974:	d110      	bne.n	8084998 <mbedtls_rsa_pkcs1_encrypt+0x34>
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           ilen, input, output );
 8084976:	9402      	str	r4, [sp, #8]
 8084978:	2400      	movs	r4, #0
 808497a:	9604      	str	r6, [sp, #16]
 808497c:	9503      	str	r5, [sp, #12]
 808497e:	9401      	str	r4, [sp, #4]
 8084980:	9400      	str	r4, [sp, #0]
 8084982:	f7ff feeb 	bl	808475c <mbedtls_rsa_rsaes_oaep_encrypt>
 8084986:	e008      	b.n	808499a <mbedtls_rsa_pkcs1_encrypt+0x36>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
                                                input, output );
 8084988:	960e      	str	r6, [sp, #56]	; 0x38
 808498a:	950d      	str	r5, [sp, #52]	; 0x34
 808498c:	940c      	str	r4, [sp, #48]	; 0x30
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 808498e:	b007      	add	sp, #28
 8084990:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
                                                input, output );
 8084994:	f7ff bf74 	b.w	8084880 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           ilen, input, output );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 8084998:	4801      	ldr	r0, [pc, #4]	; (80849a0 <mbedtls_rsa_pkcs1_encrypt+0x3c>)
    }
}
 808499a:	b007      	add	sp, #28
 808499c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808499e:	bf00      	nop
 80849a0:	ffffbf00 	.word	0xffffbf00

080849a4 <mbedtls_rsa_rsaes_oaep_decrypt>:
                            const unsigned char *label, size_t label_len,
                            size_t *olen,
                            const unsigned char *input,
                            unsigned char *output,
                            size_t output_max_len )
{
 80849a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    mbedtls_md_context_t md_ctx;

    /*
     * Parameters sanity checks
     */
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80849a8:	2b01      	cmp	r3, #1
                            const unsigned char *label, size_t label_len,
                            size_t *olen,
                            const unsigned char *input,
                            unsigned char *output,
                            size_t output_max_len )
{
 80849aa:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
 80849ae:	4606      	mov	r6, r0
 80849b0:	468a      	mov	sl, r1
 80849b2:	9203      	str	r2, [sp, #12]
 80849b4:	469b      	mov	fp, r3
    mbedtls_md_context_t md_ctx;

    /*
     * Parameters sanity checks
     */
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80849b6:	d105      	bne.n	80849c4 <mbedtls_rsa_rsaes_oaep_decrypt+0x20>
 80849b8:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80849bc:	2b01      	cmp	r3, #1
 80849be:	d001      	beq.n	80849c4 <mbedtls_rsa_rsaes_oaep_decrypt+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80849c0:	485c      	ldr	r0, [pc, #368]	; (8084b34 <mbedtls_rsa_rsaes_oaep_decrypt+0x190>)
 80849c2:	e0b2      	b.n	8084b2a <mbedtls_rsa_rsaes_oaep_decrypt+0x186>

    ilen = ctx->len;
 80849c4:	6877      	ldr	r7, [r6, #4]

    if( ilen < 16 || ilen > sizeof( buf ) )
 80849c6:	f1a7 0310 	sub.w	r3, r7, #16
 80849ca:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 80849ce:	d8f7      	bhi.n	80849c0 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 80849d0:	f896 00a8 	ldrb.w	r0, [r6, #168]	; 0xa8
 80849d4:	f003 fa24 	bl	8087e20 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 80849d8:	9002      	str	r0, [sp, #8]
 80849da:	2800      	cmp	r0, #0
 80849dc:	d0f0      	beq.n	80849c0 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 80849de:	f003 fb63 	bl	80880a8 <mbedtls_md_get_size>

    // checking for integer underflow
    if( 2 * hlen + 2 > ilen )
 80849e2:	f100 0801 	add.w	r8, r0, #1
 80849e6:	ea4f 0548 	mov.w	r5, r8, lsl #1
 80849ea:	42af      	cmp	r7, r5

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 80849ec:	4604      	mov	r4, r0

    // checking for integer underflow
    if( 2 * hlen + 2 > ilen )
 80849ee:	d3e7      	bcc.n	80849c0 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
 80849f0:	f10d 0960 	add.w	r9, sp, #96	; 0x60
    /*
     * RSA operation
     */
    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 80849f4:	f1bb 0f00 	cmp.w	fp, #0
 80849f8:	d106      	bne.n	8084a08 <mbedtls_rsa_rsaes_oaep_decrypt+0x64>
 80849fa:	464a      	mov	r2, r9
 80849fc:	f8dd 1494 	ldr.w	r1, [sp, #1172]	; 0x494
 8084a00:	4630      	mov	r0, r6
 8084a02:	f7ff fcb1 	bl	8084368 <mbedtls_rsa_public>
 8084a06:	e008      	b.n	8084a1a <mbedtls_rsa_rsaes_oaep_decrypt+0x76>
 8084a08:	f8cd 9000 	str.w	r9, [sp]
 8084a0c:	f8dd 3494 	ldr.w	r3, [sp, #1172]	; 0x494
 8084a10:	9a03      	ldr	r2, [sp, #12]
 8084a12:	4651      	mov	r1, sl
 8084a14:	4630      	mov	r0, r6
 8084a16:	f7ff fce9 	bl	80843ec <mbedtls_rsa_private>
 8084a1a:	4682      	mov	sl, r0

    if( ret != 0 )
 8084a1c:	2800      	cmp	r0, #0
 8084a1e:	d13c      	bne.n	8084a9a <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
        goto cleanup;

    /*
     * Unmask data and generate lHash
     */
    mbedtls_md_init( &md_ctx );
 8084a20:	ae05      	add	r6, sp, #20
 8084a22:	4630      	mov	r0, r6
 8084a24:	f003 fa08 	bl	8087e38 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 8084a28:	4652      	mov	r2, sl
 8084a2a:	9902      	ldr	r1, [sp, #8]
 8084a2c:	4630      	mov	r0, r6
 8084a2e:	f003 fa29 	bl	8087e84 <mbedtls_md_setup>
 8084a32:	4682      	mov	sl, r0
 8084a34:	b108      	cbz	r0, 8084a3a <mbedtls_rsa_rsaes_oaep_decrypt+0x96>
    {
        mbedtls_md_free( &md_ctx );
 8084a36:	4630      	mov	r0, r6
 8084a38:	e03b      	b.n	8084ab2 <mbedtls_rsa_rsaes_oaep_decrypt+0x10e>
        goto cleanup;
    }

    /* seed: Apply seedMask to maskedSeed */
    if( ( ret = mgf_mask( buf + 1, hlen, buf + hlen + 1, ilen - hlen - 1,
 8084a3a:	f107 3bff 	add.w	fp, r7, #4294967295
 8084a3e:	44c8      	add	r8, r9
 8084a40:	ebc4 0b0b 	rsb	fp, r4, fp
                          &md_ctx ) ) != 0 ||
 8084a44:	9600      	str	r6, [sp, #0]
 8084a46:	465b      	mov	r3, fp
 8084a48:	4642      	mov	r2, r8
 8084a4a:	4621      	mov	r1, r4
 8084a4c:	f10d 0061 	add.w	r0, sp, #97	; 0x61
 8084a50:	f7ff f9de 	bl	8083e10 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 8084a54:	4682      	mov	sl, r0
 8084a56:	bb58      	cbnz	r0, 8084ab0 <mbedtls_rsa_rsaes_oaep_decrypt+0x10c>
 8084a58:	9600      	str	r6, [sp, #0]
 8084a5a:	4623      	mov	r3, r4
 8084a5c:	f10d 0261 	add.w	r2, sp, #97	; 0x61
 8084a60:	4659      	mov	r1, fp
 8084a62:	4640      	mov	r0, r8
 8084a64:	f7ff f9d4 	bl	8083e10 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 8084a68:	4682      	mov	sl, r0
 8084a6a:	bb08      	cbnz	r0, 8084ab0 <mbedtls_rsa_rsaes_oaep_decrypt+0x10c>
 8084a6c:	e024      	b.n	8084ab8 <mbedtls_rsa_rsaes_oaep_decrypt+0x114>
     * The only information "leaked" is whether the padding was correct or not
     * (eg, no data is copied if it was not correct). This meets the
     * recommendations in PKCS#1 v2.2: an opponent cannot distinguish between
     * the different error conditions.
     */
    if( bad != 0 )
 8084a6e:	5c88      	ldrb	r0, [r1, r2]
 8084a70:	f080 0001 	eor.w	r0, r0, #1
 8084a74:	ea50 030e 	orrs.w	r3, r0, lr
 8084a78:	d151      	bne.n	8084b1e <mbedtls_rsa_rsaes_oaep_decrypt+0x17a>
        pad_done |= p[i];
        pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
    }

    p += pad_len;
    bad |= *p++ ^ 0x01;
 8084a7a:	3201      	adds	r2, #1
 8084a7c:	4411      	add	r1, r2
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
 8084a7e:	aa18      	add	r2, sp, #96	; 0x60
 8084a80:	1a8a      	subs	r2, r1, r2
 8084a82:	f8dd 049c 	ldr.w	r0, [sp, #1180]	; 0x49c
 8084a86:	1aba      	subs	r2, r7, r2
 8084a88:	4282      	cmp	r2, r0
 8084a8a:	d84b      	bhi.n	8084b24 <mbedtls_rsa_rsaes_oaep_decrypt+0x180>
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
        goto cleanup;
    }

    *olen = ilen - (p - buf);
 8084a8c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
 8084a90:	6002      	str	r2, [r0, #0]
    memcpy( output, p, *olen );
 8084a92:	f8dd 0498 	ldr.w	r0, [sp, #1176]	; 0x498
 8084a96:	f00f f872 	bl	8093b7e <memcpy>
    ret = 0;

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
 8084a9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8084a9e:	a818      	add	r0, sp, #96	; 0x60
 8084aa0:	f7ff f9ae 	bl	8083e00 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( lhash, sizeof( lhash ) );
 8084aa4:	a808      	add	r0, sp, #32
 8084aa6:	2140      	movs	r1, #64	; 0x40
 8084aa8:	f7ff f9aa 	bl	8083e00 <_ZL15mbedtls_zeroizePvj>

    return( ret );
 8084aac:	4650      	mov	r0, sl
 8084aae:	e03c      	b.n	8084b2a <mbedtls_rsa_rsaes_oaep_decrypt+0x186>
                          &md_ctx ) ) != 0 ||
    /* DB: Apply dbMask to maskedDB */
        ( ret = mgf_mask( buf + hlen + 1, ilen - hlen - 1, buf + 1, hlen,
                          &md_ctx ) ) != 0 )
    {
        mbedtls_md_free( &md_ctx );
 8084ab0:	a805      	add	r0, sp, #20
 8084ab2:	f003 f9c6 	bl	8087e42 <mbedtls_md_free>
        goto cleanup;
 8084ab6:	e7f0      	b.n	8084a9a <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
    }

    mbedtls_md_free( &md_ctx );
 8084ab8:	4630      	mov	r0, r6

    /* Generate lHash */
    if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )
 8084aba:	ae08      	add	r6, sp, #32
    {
        mbedtls_md_free( &md_ctx );
        goto cleanup;
    }

    mbedtls_md_free( &md_ctx );
 8084abc:	f003 f9c1 	bl	8087e42 <mbedtls_md_free>

    /* Generate lHash */
    if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )
 8084ac0:	4633      	mov	r3, r6
 8084ac2:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
 8084ac6:	f8dd 1488 	ldr.w	r1, [sp, #1160]	; 0x488
 8084aca:	9802      	ldr	r0, [sp, #8]
 8084acc:	f003 fa1a 	bl	8087f04 <mbedtls_md>
 8084ad0:	4682      	mov	sl, r0
 8084ad2:	2800      	cmp	r0, #0
 8084ad4:	d1e1      	bne.n	8084a9a <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
 8084ad6:	4650      	mov	r0, sl
    p = buf;
    bad = 0;

    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */
 8084ad8:	f10d 0361 	add.w	r3, sp, #97	; 0x61
     * Check contents, in "constant-time"
     */
    p = buf;
    bad = 0;

    bad |= *p++; /* First byte must be 0 */
 8084adc:	f899 e000 	ldrb.w	lr, [r9]

    p += hlen; /* Skip seed */
 8084ae0:	1919      	adds	r1, r3, r4

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
 8084ae2:	42a0      	cmp	r0, r4
 8084ae4:	d208      	bcs.n	8084af8 <mbedtls_rsa_rsaes_oaep_decrypt+0x154>
        bad |= lhash[i] ^ *p++;
 8084ae6:	5c32      	ldrb	r2, [r6, r0]
 8084ae8:	f811 c000 	ldrb.w	ip, [r1, r0]
    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
 8084aec:	3001      	adds	r0, #1
        bad |= lhash[i] ^ *p++;
 8084aee:	ea82 0c0c 	eor.w	ip, r2, ip
 8084af2:	ea4c 0e0e 	orr.w	lr, ip, lr
    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
 8084af6:	e7f4      	b.n	8084ae2 <mbedtls_rsa_rsaes_oaep_decrypt+0x13e>
 8084af8:	4421      	add	r1, r4

    /* Get zero-padding len, but always read till end of buffer
     * (minus one, for the 01 byte) */
    pad_len = 0;
    pad_done = 0;
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
 8084afa:	2400      	movs	r4, #0
 8084afc:	460e      	mov	r6, r1
 8084afe:	4622      	mov	r2, r4
 8084b00:	1b7d      	subs	r5, r7, r5
 8084b02:	440d      	add	r5, r1
 8084b04:	42b5      	cmp	r5, r6
 8084b06:	d0b2      	beq.n	8084a6e <mbedtls_rsa_rsaes_oaep_decrypt+0xca>
    {
        pad_done |= p[i];
 8084b08:	f816 0b01 	ldrb.w	r0, [r6], #1
 8084b0c:	4304      	orrs	r4, r0
        pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 8084b0e:	4260      	negs	r0, r4
 8084b10:	4320      	orrs	r0, r4
 8084b12:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8084b16:	f080 0001 	eor.w	r0, r0, #1
 8084b1a:	4402      	add	r2, r0

    /* Get zero-padding len, but always read till end of buffer
     * (minus one, for the 01 byte) */
    pad_len = 0;
    pad_done = 0;
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
 8084b1c:	e7f2      	b.n	8084b04 <mbedtls_rsa_rsaes_oaep_decrypt+0x160>
     * recommendations in PKCS#1 v2.2: an opponent cannot distinguish between
     * the different error conditions.
     */
    if( bad != 0 )
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 8084b1e:	f8df a018 	ldr.w	sl, [pc, #24]	; 8084b38 <mbedtls_rsa_rsaes_oaep_decrypt+0x194>
 8084b22:	e7ba      	b.n	8084a9a <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
 8084b24:	f8df a014 	ldr.w	sl, [pc, #20]	; 8084b3c <mbedtls_rsa_rsaes_oaep_decrypt+0x198>
 8084b28:	e7b7      	b.n	8084a9a <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
    mbedtls_zeroize( lhash, sizeof( lhash ) );

    return( ret );
}
 8084b2a:	f20d 4d64 	addw	sp, sp, #1124	; 0x464
 8084b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084b32:	bf00      	nop
 8084b34:	ffffbf80 	.word	0xffffbf80
 8084b38:	ffffbf00 	.word	0xffffbf00
 8084b3c:	ffffbc00 	.word	0xffffbc00

08084b40 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>:
                                 void *p_rng,
                                 int mode, size_t *olen,
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
 8084b40:	b5f0      	push	{r4, r5, r6, r7, lr}
    int ret;
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8084b42:	2b01      	cmp	r3, #1
                                 void *p_rng,
                                 int mode, size_t *olen,
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
 8084b44:	f2ad 4d0c 	subw	sp, sp, #1036	; 0x40c
 8084b48:	461d      	mov	r5, r3
    int ret;
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8084b4a:	d103      	bne.n	8084b54 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x14>
 8084b4c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8084b50:	2b00      	cmp	r3, #0
 8084b52:	d17f      	bne.n	8084c54 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x114>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ilen = ctx->len;
 8084b54:	6847      	ldr	r7, [r0, #4]

    if( ilen < 16 || ilen > sizeof( buf ) )
 8084b56:	f1a7 0310 	sub.w	r3, r7, #16
 8084b5a:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 8084b5e:	d879      	bhi.n	8084c54 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x114>
 8084b60:	ae02      	add	r6, sp, #8
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8084b62:	b945      	cbnz	r5, 8084b76 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x36>
 8084b64:	4632      	mov	r2, r6
 8084b66:	f8dd 1424 	ldr.w	r1, [sp, #1060]	; 0x424
 8084b6a:	f7ff fbfd 	bl	8084368 <mbedtls_rsa_public>

    if( ret != 0 )
 8084b6e:	4604      	mov	r4, r0
 8084b70:	2800      	cmp	r0, #0
 8084b72:	d168      	bne.n	8084c46 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>
 8084b74:	e02f      	b.n	8084bd6 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x96>
    if( ilen < 16 || ilen > sizeof( buf ) )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8084b76:	9600      	str	r6, [sp, #0]
 8084b78:	f8dd 3424 	ldr.w	r3, [sp, #1060]	; 0x424
 8084b7c:	f7ff fc36 	bl	80843ec <mbedtls_rsa_private>

    if( ret != 0 )
 8084b80:	4604      	mov	r4, r0
 8084b82:	2800      	cmp	r0, #0
 8084b84:	d15f      	bne.n	8084c46 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>
     * Check and get padding len in "constant-time"
     */
    bad |= *p++; /* First byte must be 0 */

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
 8084b86:	2d01      	cmp	r5, #1
    bad = 0;

    /*
     * Check and get padding len in "constant-time"
     */
    bad |= *p++; /* First byte must be 0 */
 8084b88:	7832      	ldrb	r2, [r6, #0]

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
 8084b8a:	d125      	bne.n	8084bd8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x98>
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 8084b8c:	4601      	mov	r1, r0
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
    int ret;
    size_t ilen, pad_count = 0, i;
 8084b8e:	4686      	mov	lr, r0
    bad |= *p++; /* First byte must be 0 */

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;
 8084b90:	7873      	ldrb	r3, [r6, #1]

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 8084b92:	1efd      	subs	r5, r7, #3
    bad |= *p++; /* First byte must be 0 */

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;
 8084b94:	f083 0302 	eor.w	r3, r3, #2
 8084b98:	4313      	orrs	r3, r2

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 8084b9a:	42a9      	cmp	r1, r5
 8084b9c:	d212      	bcs.n	8084bc4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x84>
        {
            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
 8084b9e:	1872      	adds	r2, r6, r1
 8084ba0:	7890      	ldrb	r0, [r2, #2]
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 8084ba2:	3101      	adds	r1, #1
        {
            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
 8084ba4:	4242      	negs	r2, r0
 8084ba6:	4310      	orrs	r0, r2
 8084ba8:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8084bac:	f080 0001 	eor.w	r0, r0, #1
 8084bb0:	4304      	orrs	r4, r0
 8084bb2:	b2e4      	uxtb	r4, r4
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 8084bb4:	4262      	negs	r2, r4
 8084bb6:	4322      	orrs	r2, r4
 8084bb8:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8084bbc:	f082 0201 	eor.w	r2, r2, #1
 8084bc0:	4496      	add	lr, r2
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 8084bc2:	e7ea      	b.n	8084b9a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x5a>
            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
        }

        p += pad_count;
        bad |= *p++; /* Must be zero */
 8084bc4:	f10d 020a 	add.w	r2, sp, #10
 8084bc8:	f10e 0101 	add.w	r1, lr, #1
 8084bcc:	4411      	add	r1, r2
 8084bce:	f812 200e 	ldrb.w	r2, [r2, lr]
 8084bd2:	4313      	orrs	r3, r2
 8084bd4:	e01e      	b.n	8084c14 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xd4>
    bad = 0;

    /*
     * Check and get padding len in "constant-time"
     */
    bad |= *p++; /* First byte must be 0 */
 8084bd6:	7832      	ldrb	r2, [r6, #0]
        p += pad_count;
        bad |= *p++; /* Must be zero */
    }
    else
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;
 8084bd8:	7873      	ldrb	r3, [r6, #1]

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 8084bda:	1efc      	subs	r4, r7, #3
        p += pad_count;
        bad |= *p++; /* Must be zero */
    }
    else
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;
 8084bdc:	f083 0301 	eor.w	r3, r3, #1
 8084be0:	4313      	orrs	r3, r2
                                 unsigned char *output,
                                 size_t output_max_len)
{
    int ret;
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
 8084be2:	2200      	movs	r2, #0
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 8084be4:	4611      	mov	r1, r2
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
    int ret;
    size_t ilen, pad_count = 0, i;
 8084be6:	4696      	mov	lr, r2
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 8084be8:	42a1      	cmp	r1, r4
 8084bea:	d20b      	bcs.n	8084c04 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xc4>
        {
            pad_done |= ( p[i] != 0xFF );
 8084bec:	1870      	adds	r0, r6, r1
 8084bee:	7880      	ldrb	r0, [r0, #2]
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 8084bf0:	3101      	adds	r1, #1
        {
            pad_done |= ( p[i] != 0xFF );
 8084bf2:	28ff      	cmp	r0, #255	; 0xff
 8084bf4:	bf18      	it	ne
 8084bf6:	f042 0201 	orrne.w	r2, r2, #1
            pad_count += ( pad_done == 0 );
 8084bfa:	f082 0001 	eor.w	r0, r2, #1
 8084bfe:	b2c0      	uxtb	r0, r0
 8084c00:	4486      	add	lr, r0
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 8084c02:	e7f1      	b.n	8084be8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xa8>
            pad_done |= ( p[i] != 0xFF );
            pad_count += ( pad_done == 0 );
        }

        p += pad_count;
        bad |= *p++; /* Must be zero */
 8084c04:	f10d 020a 	add.w	r2, sp, #10
 8084c08:	f812 500e 	ldrb.w	r5, [r2, lr]
 8084c0c:	f10e 0101 	add.w	r1, lr, #1
 8084c10:	4411      	add	r1, r2
 8084c12:	432b      	orrs	r3, r5
    }

    bad |= ( pad_count < 8 );

    if( bad )
 8084c14:	f1be 0f07 	cmp.w	lr, #7
 8084c18:	bf8c      	ite	hi
 8084c1a:	461c      	movhi	r4, r3
 8084c1c:	f043 0401 	orrls.w	r4, r3, #1
 8084c20:	b264      	sxtb	r4, r4
 8084c22:	b96c      	cbnz	r4, 8084c40 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x100>
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
 8084c24:	1b8a      	subs	r2, r1, r6
 8084c26:	f8dd 342c 	ldr.w	r3, [sp, #1068]	; 0x42c
 8084c2a:	1aba      	subs	r2, r7, r2
 8084c2c:	429a      	cmp	r2, r3
 8084c2e:	d809      	bhi.n	8084c44 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x104>
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
        goto cleanup;
    }

    *olen = ilen - (p - buf);
 8084c30:	f8dd 3420 	ldr.w	r3, [sp, #1056]	; 0x420
    memcpy( output, p, *olen );
 8084c34:	f8dd 0428 	ldr.w	r0, [sp, #1064]	; 0x428
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
        goto cleanup;
    }

    *olen = ilen - (p - buf);
 8084c38:	601a      	str	r2, [r3, #0]
    memcpy( output, p, *olen );
 8084c3a:	f00e ffa0 	bl	8093b7e <memcpy>
 8084c3e:	e002      	b.n	8084c46 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>

    bad |= ( pad_count < 8 );

    if( bad )
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 8084c40:	4c06      	ldr	r4, [pc, #24]	; (8084c5c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x11c>)
 8084c42:	e000      	b.n	8084c46 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
 8084c44:	4c06      	ldr	r4, [pc, #24]	; (8084c60 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x120>)
    *olen = ilen - (p - buf);
    memcpy( output, p, *olen );
    ret = 0;

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
 8084c46:	4630      	mov	r0, r6
 8084c48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8084c4c:	f7ff f8d8 	bl	8083e00 <_ZL15mbedtls_zeroizePvj>

    return( ret );
 8084c50:	4620      	mov	r0, r4
 8084c52:	e000      	b.n	8084c56 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x116>
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8084c54:	4803      	ldr	r0, [pc, #12]	; (8084c64 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x124>)

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );

    return( ret );
}
 8084c56:	f20d 4d0c 	addw	sp, sp, #1036	; 0x40c
 8084c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084c5c:	ffffbf00 	.word	0xffffbf00
 8084c60:	ffffbc00 	.word	0xffffbc00
 8084c64:	ffffbf80 	.word	0xffffbf80

08084c68 <mbedtls_rsa_pkcs1_decrypt>:
                       void *p_rng,
                       int mode, size_t *olen,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t output_max_len)
{
 8084c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8084c6a:	b087      	sub	sp, #28
    switch( ctx->padding )
 8084c6c:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	; 0xa4
                       void *p_rng,
                       int mode, size_t *olen,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t output_max_len)
{
 8084c70:	ac0c      	add	r4, sp, #48	; 0x30
 8084c72:	ccf0      	ldmia	r4, {r4, r5, r6, r7}
    switch( ctx->padding )
 8084c74:	f1be 0f00 	cmp.w	lr, #0
 8084c78:	d00c      	beq.n	8084c94 <mbedtls_rsa_pkcs1_decrypt+0x2c>
 8084c7a:	f1be 0f01 	cmp.w	lr, #1
 8084c7e:	d112      	bne.n	8084ca6 <mbedtls_rsa_pkcs1_decrypt+0x3e>

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsaes_oaep_decrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           olen, input, output,
                                           output_max_len );
 8084c80:	9402      	str	r4, [sp, #8]
 8084c82:	2400      	movs	r4, #0
 8084c84:	9705      	str	r7, [sp, #20]
 8084c86:	9604      	str	r6, [sp, #16]
 8084c88:	9503      	str	r5, [sp, #12]
 8084c8a:	9401      	str	r4, [sp, #4]
 8084c8c:	9400      	str	r4, [sp, #0]
 8084c8e:	f7ff fe89 	bl	80849a4 <mbedtls_rsa_rsaes_oaep_decrypt>
 8084c92:	e009      	b.n	8084ca8 <mbedtls_rsa_pkcs1_decrypt+0x40>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
                                                input, output, output_max_len );
 8084c94:	970f      	str	r7, [sp, #60]	; 0x3c
 8084c96:	960e      	str	r6, [sp, #56]	; 0x38
 8084c98:	950d      	str	r5, [sp, #52]	; 0x34
 8084c9a:	940c      	str	r4, [sp, #48]	; 0x30
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8084c9c:	b007      	add	sp, #28
 8084c9e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
                                                input, output, output_max_len );
 8084ca2:	f7ff bf4d 	b.w	8084b40 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>
                                           olen, input, output,
                                           output_max_len );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 8084ca6:	4801      	ldr	r0, [pc, #4]	; (8084cac <mbedtls_rsa_pkcs1_decrypt+0x44>)
    }
}
 8084ca8:	b007      	add	sp, #28
 8084caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084cac:	ffffbf00 	.word	0xffffbf00

08084cb0 <mbedtls_rsa_rsassa_pss_sign>:
                         int mode,
                         mbedtls_md_type_t md_alg,
                         unsigned int hashlen,
                         const unsigned char *hash,
                         unsigned char *sig )
{
 8084cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret;
    size_t msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8084cb4:	2b01      	cmp	r3, #1
                         int mode,
                         mbedtls_md_type_t md_alg,
                         unsigned int hashlen,
                         const unsigned char *hash,
                         unsigned char *sig )
{
 8084cb6:	b09d      	sub	sp, #116	; 0x74
 8084cb8:	4680      	mov	r8, r0
 8084cba:	468a      	mov	sl, r1
 8084cbc:	9204      	str	r2, [sp, #16]
 8084cbe:	9305      	str	r3, [sp, #20]
 8084cc0:	f89d 0098 	ldrb.w	r0, [sp, #152]	; 0x98
 8084cc4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
    int ret;
    size_t msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8084cc6:	d105      	bne.n	8084cd4 <mbedtls_rsa_rsassa_pss_sign+0x24>
 8084cc8:	f8d8 30a4 	ldr.w	r3, [r8, #164]	; 0xa4
 8084ccc:	2b01      	cmp	r3, #1
 8084cce:	d001      	beq.n	8084cd4 <mbedtls_rsa_rsassa_pss_sign+0x24>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8084cd0:	4858      	ldr	r0, [pc, #352]	; (8084e34 <mbedtls_rsa_rsassa_pss_sign+0x184>)
 8084cd2:	e0ab      	b.n	8084e2c <mbedtls_rsa_rsassa_pss_sign+0x17c>

    if( f_rng == NULL )
 8084cd4:	f1ba 0f00 	cmp.w	sl, #0
 8084cd8:	d0fa      	beq.n	8084cd0 <mbedtls_rsa_rsassa_pss_sign+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
 8084cda:	f8d8 6004 	ldr.w	r6, [r8, #4]

    if( md_alg != MBEDTLS_MD_NONE )
 8084cde:	b130      	cbz	r0, 8084cee <mbedtls_rsa_rsassa_pss_sign+0x3e>
    {
        /* Gather length of hash to sign */
        md_info = mbedtls_md_info_from_type( md_alg );
 8084ce0:	f003 f89e 	bl	8087e20 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 8084ce4:	2800      	cmp	r0, #0
 8084ce6:	d0f3      	beq.n	8084cd0 <mbedtls_rsa_rsassa_pss_sign+0x20>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
 8084ce8:	f003 f9de 	bl	80880a8 <mbedtls_md_get_size>
 8084cec:	9027      	str	r0, [sp, #156]	; 0x9c
    }

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 8084cee:	f898 00a8 	ldrb.w	r0, [r8, #168]	; 0xa8
 8084cf2:	f003 f895 	bl	8087e20 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8084cf6:	4683      	mov	fp, r0
 8084cf8:	2800      	cmp	r0, #0
 8084cfa:	d0e9      	beq.n	8084cd0 <mbedtls_rsa_rsassa_pss_sign+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 8084cfc:	f003 f9d4 	bl	80880a8 <mbedtls_md_get_size>
    slen = hlen;

    if( olen < hlen + slen + 2 )
 8084d00:	0045      	lsls	r5, r0, #1
 8084d02:	1cab      	adds	r3, r5, #2
 8084d04:	429e      	cmp	r6, r3

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 8084d06:	4607      	mov	r7, r0
    slen = hlen;

    if( olen < hlen + slen + 2 )
 8084d08:	d3e2      	bcc.n	8084cd0 <mbedtls_rsa_rsassa_pss_sign+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    memset( sig, 0, olen );
 8084d0a:	4632      	mov	r2, r6
 8084d0c:	2100      	movs	r1, #0
 8084d0e:	4620      	mov	r0, r4
 8084d10:	f00e ff5b 	bl	8093bca <memset>

    /* Generate salt of length slen */
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
 8084d14:	463a      	mov	r2, r7
 8084d16:	a90c      	add	r1, sp, #48	; 0x30
 8084d18:	9804      	ldr	r0, [sp, #16]
 8084d1a:	47d0      	blx	sl
 8084d1c:	b110      	cbz	r0, 8084d24 <mbedtls_rsa_rsassa_pss_sign+0x74>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 8084d1e:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
 8084d22:	e083      	b.n	8084e2c <mbedtls_rsa_rsassa_pss_sign+0x17c>

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 8084d24:	f108 0308 	add.w	r3, r8, #8
 8084d28:	9007      	str	r0, [sp, #28]
 8084d2a:	4618      	mov	r0, r3
 8084d2c:	9303      	str	r3, [sp, #12]
 8084d2e:	f006 fdd4 	bl	808b8da <mbedtls_mpi_bitlen>
    p += olen - hlen * 2 - 2;
 8084d32:	1b75      	subs	r5, r6, r5
    *p++ = 0x01;
 8084d34:	f105 39ff 	add.w	r9, r5, #4294967295
 8084d38:	2201      	movs	r2, #1
 8084d3a:	4425      	add	r5, r4
 8084d3c:	44a1      	add	r9, r4
 8084d3e:	f805 2c02 	strb.w	r2, [r5, #-2]
    memcpy( p, salt, slen );
 8084d42:	a90c      	add	r1, sp, #48	; 0x30
 8084d44:	463a      	mov	r2, r7
    /* Generate salt of length slen */
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 8084d46:	9006      	str	r0, [sp, #24]
    p += olen - hlen * 2 - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
    p += slen;

    mbedtls_md_init( &md_ctx );
 8084d48:	ad09      	add	r5, sp, #36	; 0x24

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    p += olen - hlen * 2 - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
 8084d4a:	4648      	mov	r0, r9
 8084d4c:	f00e ff17 	bl	8093b7e <memcpy>
    p += slen;

    mbedtls_md_init( &md_ctx );
 8084d50:	4628      	mov	r0, r5
 8084d52:	f003 f871 	bl	8087e38 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 8084d56:	9b07      	ldr	r3, [sp, #28]
 8084d58:	4659      	mov	r1, fp
 8084d5a:	461a      	mov	r2, r3
 8084d5c:	4628      	mov	r0, r5
 8084d5e:	f003 f891 	bl	8087e84 <mbedtls_md_setup>
 8084d62:	4602      	mov	r2, r0
 8084d64:	2800      	cmp	r0, #0
 8084d66:	d14a      	bne.n	8084dfe <mbedtls_rsa_rsassa_pss_sign+0x14e>
        goto exit;

    /* Generate H = Hash( M' ) */
    if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
 8084d68:	4628      	mov	r0, r5
 8084d6a:	f003 f8ad 	bl	8087ec8 <mbedtls_md_starts>
 8084d6e:	4602      	mov	r2, r0
 8084d70:	2800      	cmp	r0, #0
 8084d72:	d144      	bne.n	8084dfe <mbedtls_rsa_rsassa_pss_sign+0x14e>
    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    p += olen - hlen * 2 - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
    p += slen;
 8084d74:	eb09 0b07 	add.w	fp, r9, r7
        goto exit;

    /* Generate H = Hash( M' ) */
    if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
        goto exit;
    if( ( ret = mbedtls_md_update( &md_ctx, p, 8 ) ) != 0 )
 8084d78:	2208      	movs	r2, #8
 8084d7a:	4659      	mov	r1, fp
 8084d7c:	4628      	mov	r0, r5
 8084d7e:	f003 f8ad 	bl	8087edc <mbedtls_md_update>
 8084d82:	4602      	mov	r2, r0
 8084d84:	2800      	cmp	r0, #0
 8084d86:	d13a      	bne.n	8084dfe <mbedtls_rsa_rsassa_pss_sign+0x14e>
        goto exit;
    if( ( ret = mbedtls_md_update( &md_ctx, hash, hashlen ) ) != 0 )
 8084d88:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8084d8a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8084d8c:	4628      	mov	r0, r5
 8084d8e:	f003 f8a5 	bl	8087edc <mbedtls_md_update>
 8084d92:	4602      	mov	r2, r0
 8084d94:	bb98      	cbnz	r0, 8084dfe <mbedtls_rsa_rsassa_pss_sign+0x14e>
        goto exit;
    if( ( ret = mbedtls_md_update( &md_ctx, salt, slen ) ) != 0 )
 8084d96:	463a      	mov	r2, r7
 8084d98:	a90c      	add	r1, sp, #48	; 0x30
 8084d9a:	4628      	mov	r0, r5
 8084d9c:	f003 f89e 	bl	8087edc <mbedtls_md_update>
 8084da0:	4602      	mov	r2, r0
 8084da2:	bb60      	cbnz	r0, 8084dfe <mbedtls_rsa_rsassa_pss_sign+0x14e>
        goto exit;
    if( ( ret = mbedtls_md_finish( &md_ctx, p ) ) != 0 )
 8084da4:	4659      	mov	r1, fp
 8084da6:	4628      	mov	r0, r5
 8084da8:	f003 f8a2 	bl	8087ef0 <mbedtls_md_finish>
 8084dac:	4602      	mov	r2, r0
 8084dae:	bb30      	cbnz	r0, 8084dfe <mbedtls_rsa_rsassa_pss_sign+0x14e>
                         unsigned char *sig )
{
    size_t olen;
    unsigned char *p = sig;
    unsigned char salt[MBEDTLS_MD_MAX_SIZE];
    unsigned int slen, hlen, offset = 0;
 8084db0:	9b06      	ldr	r3, [sp, #24]
    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
        offset = 1;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
 8084db2:	1e71      	subs	r1, r6, #1
                         unsigned char *sig )
{
    size_t olen;
    unsigned char *p = sig;
    unsigned char salt[MBEDTLS_MD_MAX_SIZE];
    unsigned int slen, hlen, offset = 0;
 8084db4:	3b01      	subs	r3, #1
 8084db6:	f013 0f07 	tst.w	r3, #7
 8084dba:	bf0c      	ite	eq
 8084dbc:	2001      	moveq	r0, #1
 8084dbe:	2000      	movne	r0, #0
    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
        offset = 1;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
 8084dc0:	1bc9      	subs	r1, r1, r7
 8084dc2:	465a      	mov	r2, fp
 8084dc4:	1a09      	subs	r1, r1, r0
 8084dc6:	9500      	str	r5, [sp, #0]
 8084dc8:	463b      	mov	r3, r7
 8084dca:	4420      	add	r0, r4
 8084dcc:	f7ff f820 	bl	8083e10 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 8084dd0:	4602      	mov	r2, r0
 8084dd2:	b9a0      	cbnz	r0, 8084dfe <mbedtls_rsa_rsassa_pss_sign+0x14e>
 8084dd4:	9006      	str	r0, [sp, #24]
                          &md_ctx ) ) != 0 )
        goto exit;

    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 8084dd6:	9803      	ldr	r0, [sp, #12]
 8084dd8:	f006 fd7f 	bl	808b8da <mbedtls_mpi_bitlen>
    sig[0] &= 0xFF >> ( olen * 8 - msb );
 8084ddc:	ebc0 00c6 	rsb	r0, r0, r6, lsl #3
 8084de0:	7823      	ldrb	r3, [r4, #0]
 8084de2:	3001      	adds	r0, #1
 8084de4:	26ff      	movs	r6, #255	; 0xff
 8084de6:	fa46 f000 	asr.w	r0, r6, r0
 8084dea:	4018      	ands	r0, r3

    p += hlen;
    *p++ = 0xBC;
 8084dec:	23bc      	movs	r3, #188	; 0xbc
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
                          &md_ctx ) ) != 0 )
        goto exit;

    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    sig[0] &= 0xFF >> ( olen * 8 - msb );
 8084dee:	7020      	strb	r0, [r4, #0]

    p += hlen;
    *p++ = 0xBC;

    mbedtls_zeroize( salt, sizeof( salt ) );
 8084df0:	2140      	movs	r1, #64	; 0x40

    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    sig[0] &= 0xFF >> ( olen * 8 - msb );

    p += hlen;
    *p++ = 0xBC;
 8084df2:	f809 3017 	strb.w	r3, [r9, r7, lsl #1]

    mbedtls_zeroize( salt, sizeof( salt ) );
 8084df6:	a80c      	add	r0, sp, #48	; 0x30
 8084df8:	f7ff f802 	bl	8083e00 <_ZL15mbedtls_zeroizePvj>
 8084dfc:	9a06      	ldr	r2, [sp, #24]

exit:
    mbedtls_md_free( &md_ctx );
 8084dfe:	4628      	mov	r0, r5
 8084e00:	9203      	str	r2, [sp, #12]
 8084e02:	f003 f81e 	bl	8087e42 <mbedtls_md_free>

    if( ret != 0 )
 8084e06:	9a03      	ldr	r2, [sp, #12]
 8084e08:	b97a      	cbnz	r2, 8084e2a <mbedtls_rsa_rsassa_pss_sign+0x17a>
        return( ret );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, sig, sig )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig ) );
 8084e0a:	9b05      	ldr	r3, [sp, #20]
 8084e0c:	b92b      	cbnz	r3, 8084e1a <mbedtls_rsa_rsassa_pss_sign+0x16a>
 8084e0e:	4622      	mov	r2, r4
 8084e10:	4621      	mov	r1, r4
 8084e12:	4640      	mov	r0, r8
 8084e14:	f7ff faa8 	bl	8084368 <mbedtls_rsa_public>
 8084e18:	e008      	b.n	8084e2c <mbedtls_rsa_rsassa_pss_sign+0x17c>
 8084e1a:	9400      	str	r4, [sp, #0]
 8084e1c:	4623      	mov	r3, r4
 8084e1e:	9a04      	ldr	r2, [sp, #16]
 8084e20:	4651      	mov	r1, sl
 8084e22:	4640      	mov	r0, r8
 8084e24:	f7ff fae2 	bl	80843ec <mbedtls_rsa_private>
 8084e28:	e000      	b.n	8084e2c <mbedtls_rsa_rsassa_pss_sign+0x17c>
 8084e2a:	4610      	mov	r0, r2
}
 8084e2c:	b01d      	add	sp, #116	; 0x74
 8084e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084e32:	bf00      	nop
 8084e34:	ffffbf80 	.word	0xffffbf80

08084e38 <mbedtls_rsa_rsassa_pkcs1_v15_sign>:
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
 8084e38:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    int ret;
    unsigned char *sig_try = NULL, *verif = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8084e3c:	2b01      	cmp	r3, #1
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
 8084e3e:	4689      	mov	r9, r1
 8084e40:	a90b      	add	r1, sp, #44	; 0x2c
 8084e42:	4605      	mov	r5, r0
 8084e44:	4692      	mov	sl, r2
 8084e46:	c986      	ldmia	r1, {r1, r2, r7}
 8084e48:	461c      	mov	r4, r3
 8084e4a:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
    int ret;
    unsigned char *sig_try = NULL, *verif = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8084e4e:	d103      	bne.n	8084e58 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x20>
 8084e50:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 8084e54:	2b00      	cmp	r3, #0
 8084e56:	d14b      	bne.n	8084ef0 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xb8>

    /*
     * Prepare PKCS1-v1.5 encoding (padding and hash identifier)
     */

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash,
 8084e58:	9700      	str	r7, [sp, #0]
 8084e5a:	686b      	ldr	r3, [r5, #4]
 8084e5c:	f7ff f82a 	bl	8083eb4 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>
 8084e60:	2800      	cmp	r0, #0
 8084e62:	d149      	bne.n	8084ef8 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>

    /*
     * Call respective RSA primitive
     */

    if( mode == MBEDTLS_RSA_PUBLIC )
 8084e64:	b93c      	cbnz	r4, 8084e76 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x3e>
    {
        /* Skip verification on a public key operation */
        return( mbedtls_rsa_public( ctx, sig, sig ) );
 8084e66:	463a      	mov	r2, r7
 8084e68:	4639      	mov	r1, r7
 8084e6a:	4628      	mov	r0, r5
cleanup:
    mbedtls_free( sig_try );
    mbedtls_free( verif );

    return( ret );
}
 8084e6c:	b002      	add	sp, #8
 8084e6e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     */

    if( mode == MBEDTLS_RSA_PUBLIC )
    {
        /* Skip verification on a public key operation */
        return( mbedtls_rsa_public( ctx, sig, sig ) );
 8084e72:	f7ff ba79 	b.w	8084368 <mbedtls_rsa_public>
     *
     * In order to prevent Lenstra's attack, make the signature in a
     * temporary buffer and check it before returning it.
     */

    sig_try = (unsigned char *)mbedtls_calloc( 1, ctx->len );
 8084e76:	686c      	ldr	r4, [r5, #4]
 8084e78:	2001      	movs	r0, #1
 8084e7a:	4621      	mov	r1, r4
 8084e7c:	f00e fe5a 	bl	8093b34 <calloc>
    if( sig_try == NULL )
 8084e80:	4606      	mov	r6, r0
 8084e82:	b3b8      	cbz	r0, 8084ef4 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xbc>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );

    verif = (unsigned char *)mbedtls_calloc( 1, ctx->len );
 8084e84:	4621      	mov	r1, r4
 8084e86:	2001      	movs	r0, #1
 8084e88:	f00e fe54 	bl	8093b34 <calloc>
    if( verif == NULL )
 8084e8c:	4680      	mov	r8, r0
 8084e8e:	b918      	cbnz	r0, 8084e98 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x60>
    {
        mbedtls_free( sig_try );
 8084e90:	4630      	mov	r0, r6
 8084e92:	f00c fb53 	bl	809153c <free>
 8084e96:	e02d      	b.n	8084ef4 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xbc>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    }

    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
 8084e98:	9600      	str	r6, [sp, #0]
 8084e9a:	463b      	mov	r3, r7
 8084e9c:	4652      	mov	r2, sl
 8084e9e:	4649      	mov	r1, r9
 8084ea0:	4628      	mov	r0, r5
 8084ea2:	f7ff faa3 	bl	80843ec <mbedtls_rsa_private>
 8084ea6:	4604      	mov	r4, r0
 8084ea8:	b9d0      	cbnz	r0, 8084ee0 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );
 8084eaa:	4642      	mov	r2, r8
 8084eac:	4631      	mov	r1, r6
 8084eae:	4628      	mov	r0, r5
 8084eb0:	f7ff fa5a 	bl	8084368 <mbedtls_rsa_public>
 8084eb4:	4604      	mov	r4, r0
 8084eb6:	b998      	cbnz	r0, 8084ee0 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa8>
static inline int mbedtls_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;
 8084eb8:	4603      	mov	r3, r0

    for( i = 0; i < n; i++ )
 8084eba:	4602      	mov	r2, r0
    }

    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
 8084ebc:	686d      	ldr	r5, [r5, #4]
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 8084ebe:	42aa      	cmp	r2, r5
 8084ec0:	d007      	beq.n	8084ed2 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x9a>
        diff |= A[i] ^ B[i];
 8084ec2:	f818 0002 	ldrb.w	r0, [r8, r2]
 8084ec6:	5cb9      	ldrb	r1, [r7, r2]
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 8084ec8:	3201      	adds	r2, #1
        diff |= A[i] ^ B[i];
 8084eca:	4041      	eors	r1, r0
 8084ecc:	430b      	orrs	r3, r1
 8084ece:	b2db      	uxtb	r3, r3
 8084ed0:	e7f5      	b.n	8084ebe <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x86>
    }

    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
 8084ed2:	b923      	cbnz	r3, 8084ede <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa6>
    {
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
        goto cleanup;
    }

    memcpy( sig, sig_try, ctx->len );
 8084ed4:	4631      	mov	r1, r6
 8084ed6:	4638      	mov	r0, r7
 8084ed8:	f00e fe51 	bl	8093b7e <memcpy>
 8084edc:	e000      	b.n	8084ee0 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
 8084ede:	4c08      	ldr	r4, [pc, #32]	; (8084f00 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc8>)
    }

    memcpy( sig, sig_try, ctx->len );

cleanup:
    mbedtls_free( sig_try );
 8084ee0:	4630      	mov	r0, r6
 8084ee2:	f00c fb2b 	bl	809153c <free>
    mbedtls_free( verif );
 8084ee6:	4640      	mov	r0, r8
 8084ee8:	f00c fb28 	bl	809153c <free>

    return( ret );
 8084eec:	4620      	mov	r0, r4
 8084eee:	e003      	b.n	8084ef8 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>
{
    int ret;
    unsigned char *sig_try = NULL, *verif = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8084ef0:	4804      	ldr	r0, [pc, #16]	; (8084f04 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xcc>)
 8084ef2:	e001      	b.n	8084ef8 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>
     * temporary buffer and check it before returning it.
     */

    sig_try = (unsigned char *)mbedtls_calloc( 1, ctx->len );
    if( sig_try == NULL )
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8084ef4:	f06f 000f 	mvn.w	r0, #15
cleanup:
    mbedtls_free( sig_try );
    mbedtls_free( verif );

    return( ret );
}
 8084ef8:	b002      	add	sp, #8
 8084efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8084efe:	bf00      	nop
 8084f00:	ffffbd00 	.word	0xffffbd00
 8084f04:	ffffbf80 	.word	0xffffbf80

08084f08 <mbedtls_rsa_pkcs1_sign>:
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
 8084f08:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
 8084f0a:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	; 0xa4
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
 8084f0e:	ad06      	add	r5, sp, #24
 8084f10:	f89d 4014 	ldrb.w	r4, [sp, #20]
 8084f14:	cde0      	ldmia	r5, {r5, r6, r7}
    switch( ctx->padding )
 8084f16:	f1be 0f00 	cmp.w	lr, #0
 8084f1a:	d00a      	beq.n	8084f32 <mbedtls_rsa_pkcs1_sign+0x2a>
 8084f1c:	f1be 0f01 	cmp.w	lr, #1
 8084f20:	d10f      	bne.n	8084f42 <mbedtls_rsa_pkcs1_sign+0x3a>
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
                                        hashlen, hash, sig );
 8084f22:	9708      	str	r7, [sp, #32]
 8084f24:	9607      	str	r6, [sp, #28]
 8084f26:	9506      	str	r5, [sp, #24]
 8084f28:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8084f2a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
                                        hashlen, hash, sig );
 8084f2e:	f7ff bebf 	b.w	8084cb0 <mbedtls_rsa_rsassa_pss_sign>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
                                              hashlen, hash, sig );
 8084f32:	9708      	str	r7, [sp, #32]
 8084f34:	9607      	str	r6, [sp, #28]
 8084f36:	9506      	str	r5, [sp, #24]
 8084f38:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8084f3a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
                                              hashlen, hash, sig );
 8084f3e:	f7ff bf7b 	b.w	8084e38 <mbedtls_rsa_rsassa_pkcs1_v15_sign>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8084f42:	4801      	ldr	r0, [pc, #4]	; (8084f48 <mbedtls_rsa_pkcs1_sign+0x40>)
 8084f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084f46:	bf00      	nop
 8084f48:	ffffbf00 	.word	0xffffbf00

08084f4c <mbedtls_rsa_rsassa_pss_verify_ext>:
                               unsigned int hashlen,
                               const unsigned char *hash,
                               mbedtls_md_type_t mgf1_hash_id,
                               int expected_salt_len,
                               const unsigned char *sig )
{
 8084f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t observed_salt_len, msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8084f50:	2b01      	cmp	r3, #1
                               unsigned int hashlen,
                               const unsigned char *hash,
                               mbedtls_md_type_t mgf1_hash_id,
                               int expected_salt_len,
                               const unsigned char *sig )
{
 8084f52:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
 8084f56:	4605      	mov	r5, r0
 8084f58:	f89d 8488 	ldrb.w	r8, [sp, #1160]	; 0x488
    size_t observed_salt_len, msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8084f5c:	d105      	bne.n	8084f6a <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
 8084f5e:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
 8084f62:	2801      	cmp	r0, #1
 8084f64:	d001      	beq.n	8084f6a <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8084f66:	4861      	ldr	r0, [pc, #388]	; (80850ec <mbedtls_rsa_rsassa_pss_verify_ext+0x1a0>)
 8084f68:	e0bb      	b.n	80850e2 <mbedtls_rsa_rsassa_pss_verify_ext+0x196>

    siglen = ctx->len;
 8084f6a:	686f      	ldr	r7, [r5, #4]

    if( siglen < 16 || siglen > sizeof( buf ) )
 8084f6c:	f1a7 0010 	sub.w	r0, r7, #16
 8084f70:	f5b0 7f7c 	cmp.w	r0, #1008	; 0x3f0
 8084f74:	d8f7      	bhi.n	8084f66 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
 8084f76:	ae18      	add	r6, sp, #96	; 0x60
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
 8084f78:	b933      	cbnz	r3, 8084f88 <mbedtls_rsa_rsassa_pss_verify_ext+0x3c>
 8084f7a:	4632      	mov	r2, r6
 8084f7c:	f8dd 149c 	ldr.w	r1, [sp, #1180]	; 0x49c
 8084f80:	4628      	mov	r0, r5
 8084f82:	f7ff f9f1 	bl	8084368 <mbedtls_rsa_public>
 8084f86:	e005      	b.n	8084f94 <mbedtls_rsa_rsassa_pss_verify_ext+0x48>
 8084f88:	9600      	str	r6, [sp, #0]
 8084f8a:	f8dd 349c 	ldr.w	r3, [sp, #1180]	; 0x49c
 8084f8e:	4628      	mov	r0, r5
 8084f90:	f7ff fa2c 	bl	80843ec <mbedtls_rsa_private>

    if( ret != 0 )
 8084f94:	2800      	cmp	r0, #0
 8084f96:	f040 80a4 	bne.w	80850e2 <mbedtls_rsa_rsassa_pss_verify_ext+0x196>
        return( ret );

    p = buf;

    if( buf[siglen - 1] != 0xBC )
 8084f9a:	1e7c      	subs	r4, r7, #1
 8084f9c:	5d33      	ldrb	r3, [r6, r4]
 8084f9e:	2bbc      	cmp	r3, #188	; 0xbc
 8084fa0:	f040 809e 	bne.w	80850e0 <mbedtls_rsa_rsassa_pss_verify_ext+0x194>
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );

    if( md_alg != MBEDTLS_MD_NONE )
 8084fa4:	f1b8 0f00 	cmp.w	r8, #0
 8084fa8:	d008      	beq.n	8084fbc <mbedtls_rsa_rsassa_pss_verify_ext+0x70>
    {
        /* Gather length of hash to sign */
        md_info = mbedtls_md_info_from_type( md_alg );
 8084faa:	4640      	mov	r0, r8
 8084fac:	f002 ff38 	bl	8087e20 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 8084fb0:	2800      	cmp	r0, #0
 8084fb2:	d0d8      	beq.n	8084f66 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
 8084fb4:	f003 f878 	bl	80880a8 <mbedtls_md_get_size>
 8084fb8:	f8cd 048c 	str.w	r0, [sp, #1164]	; 0x48c
    }

    md_info = mbedtls_md_info_from_type( mgf1_hash_id );
 8084fbc:	f89d 0494 	ldrb.w	r0, [sp, #1172]	; 0x494
 8084fc0:	f002 ff2e 	bl	8087e20 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8084fc4:	4681      	mov	r9, r0
 8084fc6:	2800      	cmp	r0, #0
 8084fc8:	d0cd      	beq.n	8084f66 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 8084fca:	f003 f86d 	bl	80880a8 <mbedtls_md_get_size>

    memset( zeros, 0, 8 );
 8084fce:	2300      	movs	r3, #0

    md_info = mbedtls_md_info_from_type( mgf1_hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 8084fd0:	4682      	mov	sl, r0
    memset( zeros, 0, 8 );

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 8084fd2:	f105 0008 	add.w	r0, r5, #8
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );

    memset( zeros, 0, 8 );
 8084fd6:	9303      	str	r3, [sp, #12]
 8084fd8:	9304      	str	r3, [sp, #16]

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 8084fda:	f006 fc7e 	bl	808b8da <mbedtls_mpi_bitlen>

    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
 8084fde:	00fb      	lsls	r3, r7, #3
    memset( zeros, 0, 8 );

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 8084fe0:	f100 38ff 	add.w	r8, r0, #4294967295

    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
 8084fe4:	7832      	ldrb	r2, [r6, #0]
 8084fe6:	f1c3 0308 	rsb	r3, r3, #8
 8084fea:	4443      	add	r3, r8
 8084fec:	fa52 f303 	asrs.w	r3, r2, r3
 8084ff0:	d1b9      	bne.n	8084f66 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
 8084ff2:	f018 0f07 	tst.w	r8, #7
    {
        p++;
        siglen -= 1;
 8084ff6:	bf08      	it	eq
 8084ff8:	4627      	moveq	r7, r4
    }

    if( siglen < hlen + 2 )
 8084ffa:	f10a 0302 	add.w	r3, sl, #2
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
    {
        p++;
 8084ffe:	bf0c      	ite	eq
 8085000:	f10d 0561 	addeq.w	r5, sp, #97	; 0x61
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );

    if( ret != 0 )
        return( ret );

    p = buf;
 8085004:	4635      	movne	r5, r6
    {
        p++;
        siglen -= 1;
    }

    if( siglen < hlen + 2 )
 8085006:	429f      	cmp	r7, r3
 8085008:	d3ad      	bcc.n	8084f66 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    hash_start = p + siglen - hlen - 1;

    mbedtls_md_init( &md_ctx );
 808500a:	ac05      	add	r4, sp, #20
 808500c:	4620      	mov	r0, r4
 808500e:	f002 ff13 	bl	8087e38 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 8085012:	2200      	movs	r2, #0
 8085014:	4649      	mov	r1, r9
 8085016:	4620      	mov	r0, r4
 8085018:	f002 ff34 	bl	8087e84 <mbedtls_md_setup>
 808501c:	4683      	mov	fp, r0
 808501e:	2800      	cmp	r0, #0
 8085020:	d159      	bne.n	80850d6 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        siglen -= 1;
    }

    if( siglen < hlen + 2 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    hash_start = p + siglen - hlen - 1;
 8085022:	ea6f 010a 	mvn.w	r1, sl
 8085026:	4439      	add	r1, r7
 8085028:	eb05 0901 	add.w	r9, r5, r1

    mbedtls_md_init( &md_ctx );
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
        goto exit;

    ret = mgf_mask( p, siglen - hlen - 1, hash_start, hlen, &md_ctx );
 808502c:	9400      	str	r4, [sp, #0]
 808502e:	4653      	mov	r3, sl
 8085030:	464a      	mov	r2, r9
 8085032:	4628      	mov	r0, r5
 8085034:	f7fe feec 	bl	8083e10 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
    if( ret != 0 )
 8085038:	4683      	mov	fp, r0
 808503a:	2800      	cmp	r0, #0
 808503c:	d14b      	bne.n	80850d6 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;

    buf[0] &= 0xFF >> ( siglen * 8 - msb );
 808503e:	ebc8 07c7 	rsb	r7, r8, r7, lsl #3
 8085042:	7833      	ldrb	r3, [r6, #0]
 8085044:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8085048:	fa48 f707 	asr.w	r7, r8, r7
 808504c:	401f      	ands	r7, r3
 808504e:	7037      	strb	r7, [r6, #0]

    while( p < hash_start - 1 && *p == 0 )
 8085050:	f109 32ff 	add.w	r2, r9, #4294967295
 8085054:	4295      	cmp	r5, r2
 8085056:	4629      	mov	r1, r5
 8085058:	d203      	bcs.n	8085062 <mbedtls_rsa_rsassa_pss_verify_ext+0x116>
 808505a:	780b      	ldrb	r3, [r1, #0]
 808505c:	3501      	adds	r5, #1
 808505e:	2b00      	cmp	r3, #0
 8085060:	d0f8      	beq.n	8085054 <mbedtls_rsa_rsassa_pss_verify_ext+0x108>
        p++;

    if( *p++ != 0x01 )
 8085062:	780b      	ldrb	r3, [r1, #0]
 8085064:	2b01      	cmp	r3, #1
 8085066:	d134      	bne.n	80850d2 <mbedtls_rsa_rsassa_pss_verify_ext+0x186>
        goto exit;
    }

    observed_salt_len = hash_start - p;

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 8085068:	f8dd 3498 	ldr.w	r3, [sp, #1176]	; 0x498
    buf[0] &= 0xFF >> ( siglen * 8 - msb );

    while( p < hash_start - 1 && *p == 0 )
        p++;

    if( *p++ != 0x01 )
 808506c:	1c4d      	adds	r5, r1, #1
        goto exit;
    }

    observed_salt_len = hash_start - p;

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 808506e:	1c5a      	adds	r2, r3, #1
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
        goto exit;
    }

    observed_salt_len = hash_start - p;
 8085070:	ebc5 0609 	rsb	r6, r5, r9

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 8085074:	d001      	beq.n	808507a <mbedtls_rsa_rsassa_pss_verify_ext+0x12e>
 8085076:	429e      	cmp	r6, r3
 8085078:	d12b      	bne.n	80850d2 <mbedtls_rsa_rsassa_pss_verify_ext+0x186>
    }

    /*
     * Generate H = Hash( M' )
     */
    ret = mbedtls_md_starts( &md_ctx );
 808507a:	4620      	mov	r0, r4
 808507c:	f002 ff24 	bl	8087ec8 <mbedtls_md_starts>
    if ( ret != 0 )
 8085080:	4683      	mov	fp, r0
 8085082:	bb40      	cbnz	r0, 80850d6 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_update( &md_ctx, zeros, 8 );
 8085084:	2208      	movs	r2, #8
 8085086:	a903      	add	r1, sp, #12
 8085088:	4620      	mov	r0, r4
 808508a:	f002 ff27 	bl	8087edc <mbedtls_md_update>
    if ( ret != 0 )
 808508e:	4683      	mov	fp, r0
 8085090:	bb08      	cbnz	r0, 80850d6 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_update( &md_ctx, hash, hashlen );
 8085092:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
 8085096:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
 808509a:	4620      	mov	r0, r4
 808509c:	f002 ff1e 	bl	8087edc <mbedtls_md_update>
    if ( ret != 0 )
 80850a0:	4683      	mov	fp, r0
 80850a2:	b9c0      	cbnz	r0, 80850d6 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_update( &md_ctx, p, observed_salt_len );
 80850a4:	4632      	mov	r2, r6
 80850a6:	4629      	mov	r1, r5
 80850a8:	4620      	mov	r0, r4
 80850aa:	f002 ff17 	bl	8087edc <mbedtls_md_update>
    if ( ret != 0 )
 80850ae:	4683      	mov	fp, r0
 80850b0:	b988      	cbnz	r0, 80850d6 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_finish( &md_ctx, result );
 80850b2:	a908      	add	r1, sp, #32
 80850b4:	4620      	mov	r0, r4
 80850b6:	f002 ff1b 	bl	8087ef0 <mbedtls_md_finish>
    if ( ret != 0 )
 80850ba:	4683      	mov	fp, r0
 80850bc:	b958      	cbnz	r0, 80850d6 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;

    if( memcmp( hash_start, result, hlen ) != 0 )
 80850be:	4652      	mov	r2, sl
 80850c0:	a908      	add	r1, sp, #32
 80850c2:	4648      	mov	r0, r9
 80850c4:	f00e fd4c 	bl	8093b60 <memcmp>
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 80850c8:	4a09      	ldr	r2, [pc, #36]	; (80850f0 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a4>)
 80850ca:	2800      	cmp	r0, #0
 80850cc:	bf18      	it	ne
 80850ce:	4693      	movne	fp, r2
 80850d0:	e001      	b.n	80850d6 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
    while( p < hash_start - 1 && *p == 0 )
        p++;

    if( *p++ != 0x01 )
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 80850d2:	f8df b020 	ldr.w	fp, [pc, #32]	; 80850f4 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a8>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
        goto exit;
    }

exit:
    mbedtls_md_free( &md_ctx );
 80850d6:	4620      	mov	r0, r4
 80850d8:	f002 feb3 	bl	8087e42 <mbedtls_md_free>

    return( ret );
 80850dc:	4658      	mov	r0, fp
 80850de:	e000      	b.n	80850e2 <mbedtls_rsa_rsassa_pss_verify_ext+0x196>
        return( ret );

    p = buf;

    if( buf[siglen - 1] != 0xBC )
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 80850e0:	4804      	ldr	r0, [pc, #16]	; (80850f4 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a8>)

exit:
    mbedtls_md_free( &md_ctx );

    return( ret );
}
 80850e2:	f20d 4d64 	addw	sp, sp, #1124	; 0x464
 80850e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80850ea:	bf00      	nop
 80850ec:	ffffbf80 	.word	0xffffbf80
 80850f0:	ffffbc80 	.word	0xffffbc80
 80850f4:	ffffbf00 	.word	0xffffbf00

080850f8 <mbedtls_rsa_rsassa_pss_verify>:
                           int mode,
                           mbedtls_md_type_t md_alg,
                           unsigned int hashlen,
                           const unsigned char *hash,
                           const unsigned char *sig )
{
 80850f8:	b570      	push	{r4, r5, r6, lr}
    mbedtls_md_type_t mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )
 80850fa:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
                           int mode,
                           mbedtls_md_type_t md_alg,
                           unsigned int hashlen,
                           const unsigned char *hash,
                           const unsigned char *sig )
{
 80850fe:	b086      	sub	sp, #24
 8085100:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
    mbedtls_md_type_t mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )
                             ? (mbedtls_md_type_t) ctx->hash_id
                             : md_alg;
 8085104:	b10c      	cbz	r4, 808510a <mbedtls_rsa_rsassa_pss_verify+0x12>
 8085106:	b2e4      	uxtb	r4, r4
 8085108:	e000      	b.n	808510c <mbedtls_rsa_rsassa_pss_verify+0x14>
 808510a:	462c      	mov	r4, r5

    return( mbedtls_rsa_rsassa_pss_verify_ext( ctx, f_rng, p_rng, mode,
                                       md_alg, hashlen, hash,
                                       mgf1_hash_id, MBEDTLS_RSA_SALT_LEN_ANY,
                                       sig ) );
 808510c:	9403      	str	r4, [sp, #12]
 808510e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8085110:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8085112:	9402      	str	r4, [sp, #8]
 8085114:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8085116:	9605      	str	r6, [sp, #20]
 8085118:	f04f 36ff 	mov.w	r6, #4294967295
 808511c:	9604      	str	r6, [sp, #16]
 808511e:	9401      	str	r4, [sp, #4]
 8085120:	9500      	str	r5, [sp, #0]
 8085122:	f7ff ff13 	bl	8084f4c <mbedtls_rsa_rsassa_pss_verify_ext>

}
 8085126:	b006      	add	sp, #24
 8085128:	bd70      	pop	{r4, r5, r6, pc}
	...

0808512c <mbedtls_rsa_rsassa_pkcs1_v15_verify>:
                                 int mode,
                                 mbedtls_md_type_t md_alg,
                                 unsigned int hashlen,
                                 const unsigned char *hash,
                                 const unsigned char *sig )
{
 808512c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;
    const size_t sig_len = ctx->len;
    unsigned char *encoded = NULL, *encoded_expected = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8085130:	2b01      	cmp	r3, #1
                                 int mode,
                                 mbedtls_md_type_t md_alg,
                                 unsigned int hashlen,
                                 const unsigned char *hash,
                                 const unsigned char *sig )
{
 8085132:	4680      	mov	r8, r0
 8085134:	468a      	mov	sl, r1
 8085136:	4693      	mov	fp, r2
 8085138:	4699      	mov	r9, r3
    int ret = 0;
    const size_t sig_len = ctx->len;
 808513a:	6845      	ldr	r5, [r0, #4]
    unsigned char *encoded = NULL, *encoded_expected = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 808513c:	d102      	bne.n	8085144 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x18>
 808513e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8085142:	b9eb      	cbnz	r3, 8085180 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x54>

    /*
     * Prepare expected PKCS1 v1.5 encoding of hash.
     */

    if( ( encoded          = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL ||
 8085144:	4629      	mov	r1, r5
 8085146:	2001      	movs	r0, #1
 8085148:	f00e fcf4 	bl	8093b34 <calloc>
 808514c:	4606      	mov	r6, r0
 808514e:	b1c8      	cbz	r0, 8085184 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x58>
 8085150:	4629      	mov	r1, r5
 8085152:	2001      	movs	r0, #1
 8085154:	f00e fcee 	bl	8093b34 <calloc>
 8085158:	4607      	mov	r7, r0
 808515a:	b9c0      	cbnz	r0, 808518e <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x62>
        ( encoded_expected = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL )
    {
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
 808515c:	f06f 040f 	mvn.w	r4, #15

cleanup:

    if( encoded != NULL )
    {
        mbedtls_zeroize( encoded, sig_len );
 8085160:	4630      	mov	r0, r6
 8085162:	4629      	mov	r1, r5
 8085164:	f7fe fe4c 	bl	8083e00 <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( encoded );
 8085168:	4630      	mov	r0, r6
 808516a:	f00c f9e7 	bl	809153c <free>
    }

    if( encoded_expected != NULL )
 808516e:	b167      	cbz	r7, 808518a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x5e>
    {
        mbedtls_zeroize( encoded_expected, sig_len );
 8085170:	4638      	mov	r0, r7
 8085172:	4629      	mov	r1, r5
 8085174:	f7fe fe44 	bl	8083e00 <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( encoded_expected );
 8085178:	4638      	mov	r0, r7
 808517a:	f00c f9df 	bl	809153c <free>
 808517e:	e004      	b.n	808518a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x5e>
    int ret = 0;
    const size_t sig_len = ctx->len;
    unsigned char *encoded = NULL, *encoded_expected = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8085180:	481b      	ldr	r0, [pc, #108]	; (80851f0 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc4>)
 8085182:	e031      	b.n	80851e8 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
     */

    if( ( encoded          = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL ||
        ( encoded_expected = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL )
    {
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
 8085184:	f06f 000f 	mvn.w	r0, #15
 8085188:	e02e      	b.n	80851e8 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
 808518a:	4620      	mov	r0, r4
 808518c:	e02c      	b.n	80851e8 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
        goto cleanup;
    }

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash, sig_len,
 808518e:	9000      	str	r0, [sp, #0]
 8085190:	462b      	mov	r3, r5
 8085192:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8085194:	990d      	ldr	r1, [sp, #52]	; 0x34
 8085196:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 808519a:	f7fe fe8b 	bl	8083eb4 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>
 808519e:	4604      	mov	r4, r0
 80851a0:	2800      	cmp	r0, #0
 80851a2:	d1dd      	bne.n	8085160 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
     * Apply RSA primitive to get what should be PKCS1 encoded hash.
     */

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, encoded )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
 80851a4:	f1b9 0f00 	cmp.w	r9, #0
 80851a8:	d105      	bne.n	80851b6 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x8a>
 80851aa:	4632      	mov	r2, r6
 80851ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80851ae:	4640      	mov	r0, r8
 80851b0:	f7ff f8da 	bl	8084368 <mbedtls_rsa_public>
 80851b4:	e006      	b.n	80851c4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x98>
 80851b6:	9600      	str	r6, [sp, #0]
 80851b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80851ba:	465a      	mov	r2, fp
 80851bc:	4651      	mov	r1, sl
 80851be:	4640      	mov	r0, r8
 80851c0:	f7ff f914 	bl	80843ec <mbedtls_rsa_private>
 80851c4:	4604      	mov	r4, r0
    if( ret != 0 )
 80851c6:	2800      	cmp	r0, #0
 80851c8:	d1ca      	bne.n	8085160 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
 80851ca:	4603      	mov	r3, r0
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 80851cc:	429d      	cmp	r5, r3
 80851ce:	d006      	beq.n	80851de <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xb2>
        diff |= A[i] ^ B[i];
 80851d0:	5cf0      	ldrb	r0, [r6, r3]
 80851d2:	5cfa      	ldrb	r2, [r7, r3]
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 80851d4:	3301      	adds	r3, #1
        diff |= A[i] ^ B[i];
 80851d6:	4050      	eors	r0, r2
 80851d8:	4304      	orrs	r4, r0
 80851da:	b2e4      	uxtb	r4, r4
 80851dc:	e7f6      	b.n	80851cc <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xa0>
     */

    if( ( ret = mbedtls_safer_memcmp( encoded, encoded_expected,
                                      sig_len ) ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 80851de:	2c00      	cmp	r4, #0
 80851e0:	4c04      	ldr	r4, [pc, #16]	; (80851f4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc8>)
 80851e2:	bf08      	it	eq
 80851e4:	2400      	moveq	r4, #0
 80851e6:	e7bb      	b.n	8085160 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
        mbedtls_zeroize( encoded_expected, sig_len );
        mbedtls_free( encoded_expected );
    }

    return( ret );
}
 80851e8:	b003      	add	sp, #12
 80851ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80851ee:	bf00      	nop
 80851f0:	ffffbf80 	.word	0xffffbf80
 80851f4:	ffffbc80 	.word	0xffffbc80

080851f8 <mbedtls_rsa_pkcs1_verify>:
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
 80851f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
 80851fa:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	; 0xa4
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
 80851fe:	ad06      	add	r5, sp, #24
 8085200:	f89d 4014 	ldrb.w	r4, [sp, #20]
 8085204:	cde0      	ldmia	r5, {r5, r6, r7}
    switch( ctx->padding )
 8085206:	f1be 0f00 	cmp.w	lr, #0
 808520a:	d00a      	beq.n	8085222 <mbedtls_rsa_pkcs1_verify+0x2a>
 808520c:	f1be 0f01 	cmp.w	lr, #1
 8085210:	d10f      	bne.n	8085232 <mbedtls_rsa_pkcs1_verify+0x3a>
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
                                          hashlen, hash, sig );
 8085212:	9708      	str	r7, [sp, #32]
 8085214:	9607      	str	r6, [sp, #28]
 8085216:	9506      	str	r5, [sp, #24]
 8085218:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 808521a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
                                          hashlen, hash, sig );
 808521e:	f7ff bf6b 	b.w	80850f8 <mbedtls_rsa_rsassa_pss_verify>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
                                                hashlen, hash, sig );
 8085222:	9708      	str	r7, [sp, #32]
 8085224:	9607      	str	r6, [sp, #28]
 8085226:	9506      	str	r5, [sp, #24]
 8085228:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 808522a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
                                                hashlen, hash, sig );
 808522e:	f7ff bf7d 	b.w	808512c <mbedtls_rsa_rsassa_pkcs1_v15_verify>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8085232:	4801      	ldr	r0, [pc, #4]	; (8085238 <mbedtls_rsa_pkcs1_verify+0x40>)
 8085234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8085236:	bf00      	nop
 8085238:	ffffbf00 	.word	0xffffbf00

0808523c <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
 808523c:	b510      	push	{r4, lr}
 808523e:	4604      	mov	r4, r0
    mbedtls_mpi_free( &ctx->Vi ); mbedtls_mpi_free( &ctx->Vf );
 8085240:	308c      	adds	r0, #140	; 0x8c
 8085242:	f006 fa98 	bl	808b776 <mbedtls_mpi_free>
 8085246:	f104 0098 	add.w	r0, r4, #152	; 0x98
 808524a:	f006 fa94 	bl	808b776 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN ); mbedtls_mpi_free( &ctx->D  );
 808524e:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8085252:	f006 fa90 	bl	808b776 <mbedtls_mpi_free>
 8085256:	f104 0020 	add.w	r0, r4, #32
 808525a:	f006 fa8c 	bl	808b776 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  ); mbedtls_mpi_free( &ctx->P  );
 808525e:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8085262:	f006 fa88 	bl	808b776 <mbedtls_mpi_free>
 8085266:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 808526a:	f006 fa84 	bl	808b776 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  ); mbedtls_mpi_free( &ctx->N  );
 808526e:	f104 0014 	add.w	r0, r4, #20
 8085272:	f006 fa80 	bl	808b776 <mbedtls_mpi_free>
 8085276:	f104 0008 	add.w	r0, r4, #8
 808527a:	f006 fa7c 	bl	808b776 <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ ); mbedtls_mpi_free( &ctx->RP );
 808527e:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8085282:	f006 fa78 	bl	808b776 <mbedtls_mpi_free>
 8085286:	f104 0074 	add.w	r0, r4, #116	; 0x74
 808528a:	f006 fa74 	bl	808b776 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP ); mbedtls_mpi_free( &ctx->DQ );
 808528e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8085292:	f006 fa70 	bl	808b776 <mbedtls_mpi_free>
 8085296:	f104 0050 	add.w	r0, r4, #80	; 0x50
 808529a:	f006 fa6c 	bl	808b776 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
 808529e:	f104 0044 	add.w	r0, r4, #68	; 0x44
#endif /* MBEDTLS_RSA_NO_CRT */

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
}
 80852a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->E  ); mbedtls_mpi_free( &ctx->N  );

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ ); mbedtls_mpi_free( &ctx->RP );
    mbedtls_mpi_free( &ctx->QP ); mbedtls_mpi_free( &ctx->DQ );
    mbedtls_mpi_free( &ctx->DP );
 80852a6:	f006 ba66 	b.w	808b776 <mbedtls_mpi_free>

080852aa <mbedtls_hardclock_poll>:
#endif

#if defined(MBEDTLS_TIMING_C)
int mbedtls_hardclock_poll( void *data,
                    unsigned char *output, size_t len, size_t *olen )
{
 80852aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80852ac:	461c      	mov	r4, r3
 80852ae:	460d      	mov	r5, r1
 80852b0:	4616      	mov	r6, r2
    unsigned long timer = mbedtls_timing_hardclock();
 80852b2:	f001 f9e3 	bl	808667c <mbedtls_timing_hardclock>
    ((void) data);
    *olen = 0;

    if( len < sizeof(unsigned long) )
 80852b6:	2e03      	cmp	r6, #3

#if defined(MBEDTLS_TIMING_C)
int mbedtls_hardclock_poll( void *data,
                    unsigned char *output, size_t len, size_t *olen )
{
    unsigned long timer = mbedtls_timing_hardclock();
 80852b8:	9001      	str	r0, [sp, #4]
    *olen = 0;

    if( len < sizeof(unsigned long) )
        return( 0 );

    memcpy( output, &timer, sizeof(unsigned long) );
 80852ba:	bf88      	it	hi
 80852bc:	9801      	ldrhi	r0, [sp, #4]
int mbedtls_hardclock_poll( void *data,
                    unsigned char *output, size_t len, size_t *olen )
{
    unsigned long timer = mbedtls_timing_hardclock();
    ((void) data);
    *olen = 0;
 80852be:	f04f 0300 	mov.w	r3, #0
 80852c2:	6023      	str	r3, [r4, #0]

    if( len < sizeof(unsigned long) )
        return( 0 );

    memcpy( output, &timer, sizeof(unsigned long) );
 80852c4:	bf84      	itt	hi
 80852c6:	6028      	strhi	r0, [r5, #0]
    *olen = sizeof(unsigned long);
 80852c8:	2304      	movhi	r3, #4

    return( 0 );
}
 80852ca:	f04f 0000 	mov.w	r0, #0

    if( len < sizeof(unsigned long) )
        return( 0 );

    memcpy( output, &timer, sizeof(unsigned long) );
    *olen = sizeof(unsigned long);
 80852ce:	bf88      	it	hi
 80852d0:	6023      	strhi	r3, [r4, #0]

    return( 0 );
}
 80852d2:	b002      	add	sp, #8
 80852d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080852d8 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf>:
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
 80852d8:	b538      	push	{r3, r4, r5, lr}
 80852da:	4605      	mov	r5, r0
 80852dc:	b160      	cbz	r0, 80852f8 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x20>
 80852de:	4c08      	ldr	r4, [pc, #32]	; (8085300 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x28>)
 80852e0:	6820      	ldr	r0, [r4, #0]
 80852e2:	b158      	cbz	r0, 80852fc <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x24>
 80852e4:	6862      	ldr	r2, [r4, #4]
 80852e6:	686b      	ldr	r3, [r5, #4]
 80852e8:	429a      	cmp	r2, r3
 80852ea:	d103      	bne.n	80852f4 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x1c>
 80852ec:	68a9      	ldr	r1, [r5, #8]
 80852ee:	f00e fc37 	bl	8093b60 <memcmp>
 80852f2:	b110      	cbz	r0, 80852fa <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x22>
 80852f4:	3414      	adds	r4, #20
 80852f6:	e7f3      	b.n	80852e0 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x8>
 80852f8:	bd38      	pop	{r3, r4, r5, pc}
 80852fa:	4620      	mov	r0, r4
 80852fc:	bd38      	pop	{r3, r4, r5, pc}
 80852fe:	bf00      	nop
 8085300:	08094bdc 	.word	0x08094bdc

08085304 <mbedtls_oid_get_attr_short_name>:
        NULL,
    }
};

FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 8085304:	b570      	push	{r4, r5, r6, lr}
 8085306:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        NULL,
    }
};

FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
 8085308:	4605      	mov	r5, r0
 808530a:	b160      	cbz	r0, 8085326 <mbedtls_oid_get_attr_short_name+0x22>
 808530c:	4c09      	ldr	r4, [pc, #36]	; (8085334 <mbedtls_oid_get_attr_short_name+0x30>)
 808530e:	6820      	ldr	r0, [r4, #0]
 8085310:	b148      	cbz	r0, 8085326 <mbedtls_oid_get_attr_short_name+0x22>
 8085312:	6862      	ldr	r2, [r4, #4]
 8085314:	686b      	ldr	r3, [r5, #4]
 8085316:	429a      	cmp	r2, r3
 8085318:	d103      	bne.n	8085322 <mbedtls_oid_get_attr_short_name+0x1e>
 808531a:	68a9      	ldr	r1, [r5, #8]
 808531c:	f00e fc20 	bl	8093b60 <memcmp>
 8085320:	b120      	cbz	r0, 808532c <mbedtls_oid_get_attr_short_name+0x28>
 8085322:	3414      	adds	r4, #20
 8085324:	e7f3      	b.n	808530e <mbedtls_oid_get_attr_short_name+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 8085326:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 808532a:	bd70      	pop	{r4, r5, r6, pc}
 808532c:	6923      	ldr	r3, [r4, #16]
 808532e:	6033      	str	r3, [r6, #0]
 8085330:	bd70      	pop	{r4, r5, r6, pc}
 8085332:	bf00      	nop
 8085334:	080940cc 	.word	0x080940cc

08085338 <mbedtls_oid_get_x509_ext_type>:
        0,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 8085338:	b570      	push	{r4, r5, r6, lr}
 808533a:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        0,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
 808533c:	4605      	mov	r5, r0
 808533e:	b160      	cbz	r0, 808535a <mbedtls_oid_get_x509_ext_type+0x22>
 8085340:	4c09      	ldr	r4, [pc, #36]	; (8085368 <mbedtls_oid_get_x509_ext_type+0x30>)
 8085342:	6820      	ldr	r0, [r4, #0]
 8085344:	b148      	cbz	r0, 808535a <mbedtls_oid_get_x509_ext_type+0x22>
 8085346:	6862      	ldr	r2, [r4, #4]
 8085348:	686b      	ldr	r3, [r5, #4]
 808534a:	429a      	cmp	r2, r3
 808534c:	d103      	bne.n	8085356 <mbedtls_oid_get_x509_ext_type+0x1e>
 808534e:	68a9      	ldr	r1, [r5, #8]
 8085350:	f00e fc06 	bl	8093b60 <memcmp>
 8085354:	b120      	cbz	r0, 8085360 <mbedtls_oid_get_x509_ext_type+0x28>
 8085356:	3414      	adds	r4, #20
 8085358:	e7f3      	b.n	8085342 <mbedtls_oid_get_x509_ext_type+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 808535a:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 808535e:	bd70      	pop	{r4, r5, r6, pc}
 8085360:	6923      	ldr	r3, [r4, #16]
 8085362:	6033      	str	r3, [r6, #0]
 8085364:	bd70      	pop	{r4, r5, r6, pc}
 8085366:	bf00      	nop
 8085368:	08094cf4 	.word	0x08094cf4

0808536c <mbedtls_oid_get_extended_key_usage>:
    { ADD_LEN( MBEDTLS_OID_OCSP_SIGNING ),     "id-kp-OCSPSigning",     "OCSP Signing" },
    { NULL, 0, NULL, NULL },
};

FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 808536c:	b570      	push	{r4, r5, r6, lr}
 808536e:	460e      	mov	r6, r1
    { ADD_LEN( MBEDTLS_OID_TIME_STAMPING ),    "id-kp-timeStamping",    "Time Stamping" },
    { ADD_LEN( MBEDTLS_OID_OCSP_SIGNING ),     "id-kp-OCSPSigning",     "OCSP Signing" },
    { NULL, 0, NULL, NULL },
};

FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
 8085370:	4605      	mov	r5, r0
 8085372:	b160      	cbz	r0, 808538e <mbedtls_oid_get_extended_key_usage+0x22>
 8085374:	4c09      	ldr	r4, [pc, #36]	; (808539c <mbedtls_oid_get_extended_key_usage+0x30>)
 8085376:	6820      	ldr	r0, [r4, #0]
 8085378:	b148      	cbz	r0, 808538e <mbedtls_oid_get_extended_key_usage+0x22>
 808537a:	6862      	ldr	r2, [r4, #4]
 808537c:	686b      	ldr	r3, [r5, #4]
 808537e:	429a      	cmp	r2, r3
 8085380:	d103      	bne.n	808538a <mbedtls_oid_get_extended_key_usage+0x1e>
 8085382:	68a9      	ldr	r1, [r5, #8]
 8085384:	f00e fbec 	bl	8093b60 <memcmp>
 8085388:	b120      	cbz	r0, 8085394 <mbedtls_oid_get_extended_key_usage+0x28>
 808538a:	3410      	adds	r4, #16
 808538c:	e7f3      	b.n	8085376 <mbedtls_oid_get_extended_key_usage+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 808538e:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8085392:	bd70      	pop	{r4, r5, r6, pc}
 8085394:	68e3      	ldr	r3, [r4, #12]
 8085396:	6033      	str	r3, [r6, #0]
 8085398:	bd70      	pop	{r4, r5, r6, pc}
 808539a:	bf00      	nop
 808539c:	0809425c 	.word	0x0809425c

080853a0 <mbedtls_oid_get_sig_alg_desc>:
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
FN_OID_GET_DESCRIPTOR_ATTR1(mbedtls_oid_get_sig_alg_desc, oid_sig_alg_t, sig_alg, const char *, description)
 80853a0:	b510      	push	{r4, lr}
 80853a2:	460c      	mov	r4, r1
 80853a4:	f7ff ff98 	bl	80852d8 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf>
 80853a8:	b118      	cbz	r0, 80853b2 <mbedtls_oid_get_sig_alg_desc+0x12>
 80853aa:	68c3      	ldr	r3, [r0, #12]
 80853ac:	2000      	movs	r0, #0
 80853ae:	6023      	str	r3, [r4, #0]
 80853b0:	bd10      	pop	{r4, pc}
 80853b2:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80853b6:	bd10      	pop	{r4, pc}

080853b8 <mbedtls_oid_get_sig_alg>:
FN_OID_GET_ATTR2(mbedtls_oid_get_sig_alg, oid_sig_alg_t, sig_alg, mbedtls_md_type_t, md_alg, mbedtls_pk_type_t, pk_alg)
 80853b8:	b538      	push	{r3, r4, r5, lr}
 80853ba:	460d      	mov	r5, r1
 80853bc:	4614      	mov	r4, r2
 80853be:	f7ff ff8b 	bl	80852d8 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf>
 80853c2:	b128      	cbz	r0, 80853d0 <mbedtls_oid_get_sig_alg+0x18>
 80853c4:	7c03      	ldrb	r3, [r0, #16]
 80853c6:	702b      	strb	r3, [r5, #0]
 80853c8:	7c43      	ldrb	r3, [r0, #17]
 80853ca:	2000      	movs	r0, #0
 80853cc:	7023      	strb	r3, [r4, #0]
 80853ce:	bd38      	pop	{r3, r4, r5, pc}
 80853d0:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80853d4:	bd38      	pop	{r3, r4, r5, pc}
	...

080853d8 <mbedtls_oid_get_pk_alg>:
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 80853d8:	b570      	push	{r4, r5, r6, lr}
 80853da:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
 80853dc:	4605      	mov	r5, r0
 80853de:	b160      	cbz	r0, 80853fa <mbedtls_oid_get_pk_alg+0x22>
 80853e0:	4c09      	ldr	r4, [pc, #36]	; (8085408 <mbedtls_oid_get_pk_alg+0x30>)
 80853e2:	6820      	ldr	r0, [r4, #0]
 80853e4:	b148      	cbz	r0, 80853fa <mbedtls_oid_get_pk_alg+0x22>
 80853e6:	6862      	ldr	r2, [r4, #4]
 80853e8:	686b      	ldr	r3, [r5, #4]
 80853ea:	429a      	cmp	r2, r3
 80853ec:	d103      	bne.n	80853f6 <mbedtls_oid_get_pk_alg+0x1e>
 80853ee:	68a9      	ldr	r1, [r5, #8]
 80853f0:	f00e fbb6 	bl	8093b60 <memcmp>
 80853f4:	b120      	cbz	r0, 8085400 <mbedtls_oid_get_pk_alg+0x28>
 80853f6:	3414      	adds	r4, #20
 80853f8:	e7f3      	b.n	80853e2 <mbedtls_oid_get_pk_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 80853fa:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80853fe:	bd70      	pop	{r4, r5, r6, pc}
 8085400:	7c23      	ldrb	r3, [r4, #16]
 8085402:	7033      	strb	r3, [r6, #0]
 8085404:	bd70      	pop	{r4, r5, r6, pc}
 8085406:	bf00      	nop
 8085408:	080942cc 	.word	0x080942cc

0808540c <mbedtls_oid_get_cipher_alg>:
        MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_cipher_alg_t, cipher_alg, oid_cipher_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_cipher_alg, oid_cipher_alg_t, cipher_alg, mbedtls_cipher_type_t, cipher_alg)
 808540c:	b570      	push	{r4, r5, r6, lr}
 808540e:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_cipher_alg_t, cipher_alg, oid_cipher_alg)
 8085410:	4605      	mov	r5, r0
 8085412:	b160      	cbz	r0, 808542e <mbedtls_oid_get_cipher_alg+0x22>
 8085414:	4c09      	ldr	r4, [pc, #36]	; (808543c <mbedtls_oid_get_cipher_alg+0x30>)
 8085416:	6820      	ldr	r0, [r4, #0]
 8085418:	b148      	cbz	r0, 808542e <mbedtls_oid_get_cipher_alg+0x22>
 808541a:	6862      	ldr	r2, [r4, #4]
 808541c:	686b      	ldr	r3, [r5, #4]
 808541e:	429a      	cmp	r2, r3
 8085420:	d103      	bne.n	808542a <mbedtls_oid_get_cipher_alg+0x1e>
 8085422:	68a9      	ldr	r1, [r5, #8]
 8085424:	f00e fb9c 	bl	8093b60 <memcmp>
 8085428:	b120      	cbz	r0, 8085434 <mbedtls_oid_get_cipher_alg+0x28>
 808542a:	3414      	adds	r4, #20
 808542c:	e7f3      	b.n	8085416 <mbedtls_oid_get_cipher_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_cipher_alg, oid_cipher_alg_t, cipher_alg, mbedtls_cipher_type_t, cipher_alg)
 808542e:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8085432:	bd70      	pop	{r4, r5, r6, pc}
 8085434:	7c23      	ldrb	r3, [r4, #16]
 8085436:	7033      	strb	r3, [r6, #0]
 8085438:	bd70      	pop	{r4, r5, r6, pc}
 808543a:	bf00      	nop
 808543c:	0809431c 	.word	0x0809431c

08085440 <mbedtls_oid_get_oid_by_md>:
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
FN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_md, oid_md_alg_t, oid_md_alg, mbedtls_md_type_t, md_alg)
 8085440:	b530      	push	{r4, r5, lr}
 8085442:	4b08      	ldr	r3, [pc, #32]	; (8085464 <mbedtls_oid_get_oid_by_md+0x24>)
 8085444:	681c      	ldr	r4, [r3, #0]
 8085446:	b14c      	cbz	r4, 808545c <mbedtls_oid_get_oid_by_md+0x1c>
 8085448:	7c1d      	ldrb	r5, [r3, #16]
 808544a:	4285      	cmp	r5, r0
 808544c:	d104      	bne.n	8085458 <mbedtls_oid_get_oid_by_md+0x18>
 808544e:	600c      	str	r4, [r1, #0]
 8085450:	685b      	ldr	r3, [r3, #4]
 8085452:	2000      	movs	r0, #0
 8085454:	6013      	str	r3, [r2, #0]
 8085456:	bd30      	pop	{r4, r5, pc}
 8085458:	3314      	adds	r3, #20
 808545a:	e7f3      	b.n	8085444 <mbedtls_oid_get_oid_by_md+0x4>
 808545c:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8085460:	bd30      	pop	{r4, r5, pc}
 8085462:	bf00      	nop
 8085464:	08094b64 	.word	0x08094b64

08085468 <mbedtls_oid_get_md_hmac>:
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_hmac_t, md_hmac, oid_md_hmac)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_hmac, oid_md_hmac_t, md_hmac, mbedtls_md_type_t, md_hmac)
 8085468:	b570      	push	{r4, r5, r6, lr}
 808546a:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_hmac_t, md_hmac, oid_md_hmac)
 808546c:	4605      	mov	r5, r0
 808546e:	b160      	cbz	r0, 808548a <mbedtls_oid_get_md_hmac+0x22>
 8085470:	4c09      	ldr	r4, [pc, #36]	; (8085498 <mbedtls_oid_get_md_hmac+0x30>)
 8085472:	6820      	ldr	r0, [r4, #0]
 8085474:	b148      	cbz	r0, 808548a <mbedtls_oid_get_md_hmac+0x22>
 8085476:	6862      	ldr	r2, [r4, #4]
 8085478:	686b      	ldr	r3, [r5, #4]
 808547a:	429a      	cmp	r2, r3
 808547c:	d103      	bne.n	8085486 <mbedtls_oid_get_md_hmac+0x1e>
 808547e:	68a9      	ldr	r1, [r5, #8]
 8085480:	f00e fb6e 	bl	8093b60 <memcmp>
 8085484:	b120      	cbz	r0, 8085490 <mbedtls_oid_get_md_hmac+0x28>
 8085486:	3414      	adds	r4, #20
 8085488:	e7f3      	b.n	8085472 <mbedtls_oid_get_md_hmac+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_md_hmac, oid_md_hmac_t, md_hmac, mbedtls_md_type_t, md_hmac)
 808548a:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 808548e:	bd70      	pop	{r4, r5, r6, pc}
 8085490:	7c23      	ldrb	r3, [r4, #16]
 8085492:	7033      	strb	r3, [r6, #0]
 8085494:	bd70      	pop	{r4, r5, r6, pc}
 8085496:	bf00      	nop
 8085498:	08094c7c 	.word	0x08094c7c

0808549c <mbedtls_oid_get_pkcs12_pbe_alg>:
        MBEDTLS_MD_NONE, MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, oid_pkcs12_pbe_alg)
FN_OID_GET_ATTR2(mbedtls_oid_get_pkcs12_pbe_alg, oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, mbedtls_md_type_t, md_alg, mbedtls_cipher_type_t, cipher_alg)
 808549c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808549e:	460f      	mov	r7, r1
 80854a0:	4616      	mov	r6, r2
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, oid_pkcs12_pbe_alg)
 80854a2:	4605      	mov	r5, r0
 80854a4:	b160      	cbz	r0, 80854c0 <mbedtls_oid_get_pkcs12_pbe_alg+0x24>
 80854a6:	4c0a      	ldr	r4, [pc, #40]	; (80854d0 <mbedtls_oid_get_pkcs12_pbe_alg+0x34>)
 80854a8:	6820      	ldr	r0, [r4, #0]
 80854aa:	b148      	cbz	r0, 80854c0 <mbedtls_oid_get_pkcs12_pbe_alg+0x24>
 80854ac:	6862      	ldr	r2, [r4, #4]
 80854ae:	686b      	ldr	r3, [r5, #4]
 80854b0:	429a      	cmp	r2, r3
 80854b2:	d103      	bne.n	80854bc <mbedtls_oid_get_pkcs12_pbe_alg+0x20>
 80854b4:	68a9      	ldr	r1, [r5, #8]
 80854b6:	f00e fb53 	bl	8093b60 <memcmp>
 80854ba:	b120      	cbz	r0, 80854c6 <mbedtls_oid_get_pkcs12_pbe_alg+0x2a>
 80854bc:	3414      	adds	r4, #20
 80854be:	e7f3      	b.n	80854a8 <mbedtls_oid_get_pkcs12_pbe_alg+0xc>
FN_OID_GET_ATTR2(mbedtls_oid_get_pkcs12_pbe_alg, oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, mbedtls_md_type_t, md_alg, mbedtls_cipher_type_t, cipher_alg)
 80854c0:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80854c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80854c6:	7c23      	ldrb	r3, [r4, #16]
 80854c8:	703b      	strb	r3, [r7, #0]
 80854ca:	7c63      	ldrb	r3, [r4, #17]
 80854cc:	7033      	strb	r3, [r6, #0]
 80854ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80854d0:	08094b28 	.word	0x08094b28

080854d4 <mbedtls_sha1_init>:
}
#endif

void mbedtls_sha1_init( mbedtls_sha1_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha1_context ) );
 80854d4:	225c      	movs	r2, #92	; 0x5c
 80854d6:	2100      	movs	r1, #0
 80854d8:	f00e bb77 	b.w	8093bca <memset>

080854dc <mbedtls_sha1_free>:
}

void mbedtls_sha1_free( mbedtls_sha1_context *ctx )
{
    if( ctx == NULL )
 80854dc:	b138      	cbz	r0, 80854ee <mbedtls_sha1_free+0x12>
 80854de:	f100 025c 	add.w	r2, r0, #92	; 0x5c

#if !defined(MBEDTLS_SHA1_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 80854e2:	2300      	movs	r3, #0
 80854e4:	4290      	cmp	r0, r2
 80854e6:	d002      	beq.n	80854ee <mbedtls_sha1_free+0x12>
 80854e8:	7003      	strb	r3, [r0, #0]
 80854ea:	3001      	adds	r0, #1
 80854ec:	e7fa      	b.n	80854e4 <mbedtls_sha1_free+0x8>
 80854ee:	4770      	bx	lr

080854f0 <mbedtls_sha1_clone>:
    mbedtls_zeroize( ctx, sizeof( mbedtls_sha1_context ) );
}

void mbedtls_sha1_clone( mbedtls_sha1_context *dst,
                         const mbedtls_sha1_context *src )
{
 80854f0:	b508      	push	{r3, lr}
    *dst = *src;
 80854f2:	225c      	movs	r2, #92	; 0x5c
 80854f4:	f00e fb43 	bl	8093b7e <memcpy>
 80854f8:	bd08      	pop	{r3, pc}
	...

080854fc <mbedtls_sha1_starts_ret>:

/*
 * SHA-1 context setup
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
 80854fc:	4603      	mov	r3, r0
    ctx->total[0] = 0;
    ctx->total[1] = 0;

    ctx->state[0] = 0x67452301;
 80854fe:	4a0a      	ldr	r2, [pc, #40]	; (8085528 <mbedtls_sha1_starts_ret+0x2c>)
/*
 * SHA-1 context setup
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
    ctx->total[0] = 0;
 8085500:	2000      	movs	r0, #0
    ctx->total[1] = 0;

    ctx->state[0] = 0x67452301;
 8085502:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xEFCDAB89;
 8085504:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8085508:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x98BADCFE;
 808550a:	f102 4229 	add.w	r2, r2, #2835349504	; 0xa9000000
 808550e:	f5a2 1296 	sub.w	r2, r2, #1228800	; 0x12c000
 8085512:	f6a2 628b 	subw	r2, r2, #3723	; 0xe8b
 8085516:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0x10325476;
 8085518:	f1a2 3288 	sub.w	r2, r2, #2290649224	; 0x88888888
 808551c:	615a      	str	r2, [r3, #20]
    ctx->state[4] = 0xC3D2E1F0;
 808551e:	4a03      	ldr	r2, [pc, #12]	; (808552c <mbedtls_sha1_starts_ret+0x30>)
/*
 * SHA-1 context setup
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
    ctx->total[0] = 0;
 8085520:	6018      	str	r0, [r3, #0]
    ctx->total[1] = 0;
 8085522:	6058      	str	r0, [r3, #4]

    ctx->state[0] = 0x67452301;
    ctx->state[1] = 0xEFCDAB89;
    ctx->state[2] = 0x98BADCFE;
    ctx->state[3] = 0x10325476;
    ctx->state[4] = 0xC3D2E1F0;
 8085524:	619a      	str	r2, [r3, #24]

    return( 0 );
}
 8085526:	4770      	bx	lr
 8085528:	67452301 	.word	0x67452301
 808552c:	c3d2e1f0 	.word	0xc3d2e1f0

08085530 <mbedtls_internal_sha1_process>:
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
 8085530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
 8085534:	784b      	ldrb	r3, [r1, #1]
 8085536:	780a      	ldrb	r2, [r1, #0]
 8085538:	041b      	lsls	r3, r3, #16
 808553a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 808553e:	78ca      	ldrb	r2, [r1, #3]
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
 8085540:	b097      	sub	sp, #92	; 0x5c
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
 8085542:	4313      	orrs	r3, r2
 8085544:	788a      	ldrb	r2, [r1, #2]
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
 8085546:	f891 c008 	ldrb.w	ip, [r1, #8]
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
 808554a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808554e:	9306      	str	r3, [sp, #24]
    GET_UINT32_BE( W[ 1], data,  4 );
 8085550:	794b      	ldrb	r3, [r1, #5]
 8085552:	790a      	ldrb	r2, [r1, #4]
 8085554:	041b      	lsls	r3, r3, #16
 8085556:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 808555a:	79ca      	ldrb	r2, [r1, #7]
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
 808555c:	f891 800c 	ldrb.w	r8, [r1, #12]
                                   const unsigned char data[64] )
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
 8085560:	4313      	orrs	r3, r2
 8085562:	798a      	ldrb	r2, [r1, #6]
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
 8085564:	f891 e014 	ldrb.w	lr, [r1, #20]
                                   const unsigned char data[64] )
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
 8085568:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808556c:	9307      	str	r3, [sp, #28]
    GET_UINT32_BE( W[ 2], data,  8 );
 808556e:	7a4b      	ldrb	r3, [r1, #9]
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
 8085570:	7c0a      	ldrb	r2, [r1, #16]
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
 8085572:	041b      	lsls	r3, r3, #16
 8085574:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 8085578:	f891 c00b 	ldrb.w	ip, [r1, #11]
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
 808557c:	7e0f      	ldrb	r7, [r1, #24]
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
 808557e:	ea43 030c 	orr.w	r3, r3, ip
 8085582:	f891 c00a 	ldrb.w	ip, [r1, #10]
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
 8085586:	9001      	str	r0, [sp, #4]
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
 8085588:	ea43 2c0c 	orr.w	ip, r3, ip, lsl #8
    GET_UINT32_BE( W[ 3], data, 12 );
 808558c:	7b4b      	ldrb	r3, [r1, #13]
 808558e:	041b      	lsls	r3, r3, #16
 8085590:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 8085594:	f891 800f 	ldrb.w	r8, [r1, #15]
 8085598:	ea43 0308 	orr.w	r3, r3, r8
 808559c:	f891 800e 	ldrb.w	r8, [r1, #14]
 80855a0:	ea43 2808 	orr.w	r8, r3, r8, lsl #8
    GET_UINT32_BE( W[ 4], data, 16 );
 80855a4:	7c4b      	ldrb	r3, [r1, #17]
 80855a6:	041b      	lsls	r3, r3, #16
 80855a8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80855ac:	7cca      	ldrb	r2, [r1, #19]
 80855ae:	4313      	orrs	r3, r2
 80855b0:	7c8a      	ldrb	r2, [r1, #18]
 80855b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80855b6:	930e      	str	r3, [sp, #56]	; 0x38
    GET_UINT32_BE( W[ 5], data, 20 );
 80855b8:	7d4b      	ldrb	r3, [r1, #21]
 80855ba:	041b      	lsls	r3, r3, #16
 80855bc:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 80855c0:	f891 e017 	ldrb.w	lr, [r1, #23]
 80855c4:	ea43 030e 	orr.w	r3, r3, lr
 80855c8:	f891 e016 	ldrb.w	lr, [r1, #22]
 80855cc:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80855d0:	930f      	str	r3, [sp, #60]	; 0x3c
    GET_UINT32_BE( W[ 6], data, 24 );
 80855d2:	7e4b      	ldrb	r3, [r1, #25]
 80855d4:	041b      	lsls	r3, r3, #16
 80855d6:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 80855da:	7ecf      	ldrb	r7, [r1, #27]
    GET_UINT32_BE( W[ 7], data, 28 );
 80855dc:	7f0e      	ldrb	r6, [r1, #28]
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
 80855de:	433b      	orrs	r3, r7
 80855e0:	7e8f      	ldrb	r7, [r1, #26]
    GET_UINT32_BE( W[ 7], data, 28 );
    GET_UINT32_BE( W[ 8], data, 32 );
 80855e2:	f891 4020 	ldrb.w	r4, [r1, #32]
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
 80855e6:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80855ea:	9310      	str	r3, [sp, #64]	; 0x40
    GET_UINT32_BE( W[ 7], data, 28 );
 80855ec:	7f4b      	ldrb	r3, [r1, #29]
    GET_UINT32_BE( W[ 8], data, 32 );
    GET_UINT32_BE( W[ 9], data, 36 );
 80855ee:	f891 2024 	ldrb.w	r2, [r1, #36]	; 0x24
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
    GET_UINT32_BE( W[ 7], data, 28 );
 80855f2:	041b      	lsls	r3, r3, #16
 80855f4:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 80855f8:	7fce      	ldrb	r6, [r1, #31]
    GET_UINT32_BE( W[ 8], data, 32 );
    GET_UINT32_BE( W[ 9], data, 36 );
    GET_UINT32_BE( W[10], data, 40 );
    GET_UINT32_BE( W[11], data, 44 );
 80855fa:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
    GET_UINT32_BE( W[ 7], data, 28 );
 80855fe:	4333      	orrs	r3, r6
 8085600:	7f8e      	ldrb	r6, [r1, #30]
 8085602:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8085606:	9311      	str	r3, [sp, #68]	; 0x44
    GET_UINT32_BE( W[ 8], data, 32 );
 8085608:	f891 3021 	ldrb.w	r3, [r1, #33]	; 0x21
 808560c:	041b      	lsls	r3, r3, #16
 808560e:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8085612:	f891 4023 	ldrb.w	r4, [r1, #35]	; 0x23
 8085616:	4323      	orrs	r3, r4
 8085618:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
 808561c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8085620:	9309      	str	r3, [sp, #36]	; 0x24
    GET_UINT32_BE( W[ 9], data, 36 );
 8085622:	f891 3025 	ldrb.w	r3, [r1, #37]	; 0x25
 8085626:	041b      	lsls	r3, r3, #16
 8085628:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 808562c:	f891 2027 	ldrb.w	r2, [r1, #39]	; 0x27
 8085630:	4313      	orrs	r3, r2
 8085632:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
 8085636:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808563a:	930a      	str	r3, [sp, #40]	; 0x28
    GET_UINT32_BE( W[10], data, 40 );
 808563c:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 8085640:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 8085644:	041b      	lsls	r3, r3, #16
 8085646:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 808564a:	f891 202b 	ldrb.w	r2, [r1, #43]	; 0x2b
 808564e:	4313      	orrs	r3, r2
 8085650:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
 8085654:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8085658:	930b      	str	r3, [sp, #44]	; 0x2c
    GET_UINT32_BE( W[11], data, 44 );
 808565a:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 808565e:	041b      	lsls	r3, r3, #16
 8085660:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8085664:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
 8085668:	4303      	orrs	r3, r0
 808566a:	f891 002e 	ldrb.w	r0, [r1, #46]	; 0x2e
 808566e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8085672:	930c      	str	r3, [sp, #48]	; 0x30
    GET_UINT32_BE( W[12], data, 48 );
 8085674:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 8085678:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
 808567c:	041b      	lsls	r3, r3, #16
 808567e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8085682:	f891 0033 	ldrb.w	r0, [r1, #51]	; 0x33
 8085686:	4303      	orrs	r3, r0
 8085688:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
 808568c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8085690:	930d      	str	r3, [sp, #52]	; 0x34
    GET_UINT32_BE( W[13], data, 52 );
 8085692:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 8085696:	f891 9034 	ldrb.w	r9, [r1, #52]	; 0x34
 808569a:	041b      	lsls	r3, r3, #16
 808569c:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
 80856a0:	f891 9037 	ldrb.w	r9, [r1, #55]	; 0x37
    GET_UINT32_BE( W[14], data, 56 );
 80856a4:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
    GET_UINT32_BE( W[ 8], data, 32 );
    GET_UINT32_BE( W[ 9], data, 36 );
    GET_UINT32_BE( W[10], data, 40 );
    GET_UINT32_BE( W[11], data, 44 );
    GET_UINT32_BE( W[12], data, 48 );
    GET_UINT32_BE( W[13], data, 52 );
 80856a8:	ea43 0309 	orr.w	r3, r3, r9
 80856ac:	f891 9036 	ldrb.w	r9, [r1, #54]	; 0x36
 80856b0:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
 80856b4:	9302      	str	r3, [sp, #8]
    GET_UINT32_BE( W[14], data, 56 );
 80856b6:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
 80856ba:	041b      	lsls	r3, r3, #16
 80856bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80856c0:	f891 203b 	ldrb.w	r2, [r1, #59]	; 0x3b
 80856c4:	4313      	orrs	r3, r2
 80856c6:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 80856ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80856ce:	9303      	str	r3, [sp, #12]
    GET_UINT32_BE( W[15], data, 60 );
 80856d0:	f891 303d 	ldrb.w	r3, [r1, #61]	; 0x3d
 80856d4:	f891 203c 	ldrb.w	r2, [r1, #60]	; 0x3c
 80856d8:	041b      	lsls	r3, r3, #16
 80856da:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80856de:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
 80856e2:	4313      	orrs	r3, r2
 80856e4:	f891 203e 	ldrb.w	r2, [r1, #62]	; 0x3e
 80856e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80856ec:	9304      	str	r3, [sp, #16]
#define P(a,b,c,d,e,x)                                  \
{                                                       \
    e += S(a,5) + F(b,c,d) + K + x; b = S(b,30);        \
}

    A = ctx->state[0];
 80856ee:	9b01      	ldr	r3, [sp, #4]
 80856f0:	689b      	ldr	r3, [r3, #8]
 80856f2:	9312      	str	r3, [sp, #72]	; 0x48
    B = ctx->state[1];
 80856f4:	9b01      	ldr	r3, [sp, #4]
 80856f6:	68db      	ldr	r3, [r3, #12]
 80856f8:	9314      	str	r3, [sp, #80]	; 0x50
    C = ctx->state[2];
 80856fa:	9b01      	ldr	r3, [sp, #4]
 80856fc:	691b      	ldr	r3, [r3, #16]
 80856fe:	9305      	str	r3, [sp, #20]
    D = ctx->state[3];
 8085700:	9b01      	ldr	r3, [sp, #4]
 8085702:	695b      	ldr	r3, [r3, #20]
 8085704:	9313      	str	r3, [sp, #76]	; 0x4c
    E = ctx->state[4];
 8085706:	9b01      	ldr	r3, [sp, #4]
 8085708:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 808570a:	699b      	ldr	r3, [r3, #24]
 808570c:	9315      	str	r3, [sp, #84]	; 0x54
 808570e:	9b05      	ldr	r3, [sp, #20]
 8085710:	ea83 0e02 	eor.w	lr, r3, r2
 8085714:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8085716:	9912      	ldr	r1, [sp, #72]	; 0x48
 8085718:	ea0e 0e03 	and.w	lr, lr, r3
 808571c:	ea8e 0e02 	eor.w	lr, lr, r2
 8085720:	4bdd      	ldr	r3, [pc, #884]	; (8085a98 <mbedtls_internal_sha1_process+0x568>)
 8085722:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8085724:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8085726:	441a      	add	r2, r3
 8085728:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 808572c:	4496      	add	lr, r2

#define F(x,y,z) (z ^ (x & (y ^ z)))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
 808572e:	9a06      	ldr	r2, [sp, #24]
 8085730:	eb04 0b03 	add.w	fp, r4, r3
 8085734:	4496      	add	lr, r2
 8085736:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8085738:	9c09      	ldr	r4, [sp, #36]	; 0x24
 808573a:	ea4f 00b2 	mov.w	r0, r2, ror #2
 808573e:	9a05      	ldr	r2, [sp, #20]
 8085740:	18c5      	adds	r5, r0, r3
 8085742:	ea82 0700 	eor.w	r7, r2, r0
 8085746:	9a05      	ldr	r2, [sp, #20]
 8085748:	400f      	ands	r7, r1
 808574a:	4057      	eors	r7, r2
 808574c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    P( E, A, B, C, D, W[1]  );
 808574e:	ea4f 01b1 	mov.w	r1, r1, ror #2
 8085752:	441a      	add	r2, r3
 8085754:	4417      	add	r7, r2
 8085756:	9a07      	ldr	r2, [sp, #28]
 8085758:	ea80 0901 	eor.w	r9, r0, r1
 808575c:	4417      	add	r7, r2
 808575e:	9a05      	ldr	r2, [sp, #20]
 8085760:	ea09 090e 	and.w	r9, r9, lr
 8085764:	441a      	add	r2, r3
 8085766:	eb07 67fe 	add.w	r7, r7, lr, ror #27
 808576a:	4462      	add	r2, ip
    P( D, E, A, B, C, W[2]  );
 808576c:	ea4f 0ebe 	mov.w	lr, lr, ror #2
 8085770:	ea89 0900 	eor.w	r9, r9, r0
 8085774:	4491      	add	r9, r2
 8085776:	ea81 020e 	eor.w	r2, r1, lr
 808577a:	403a      	ands	r2, r7
 808577c:	eb09 69f7 	add.w	r9, r9, r7, ror #27
 8085780:	404a      	eors	r2, r1
    P( C, D, E, A, B, W[3]  );
 8085782:	ea4f 07b7 	mov.w	r7, r7, ror #2
 8085786:	4445      	add	r5, r8
 8085788:	18c8      	adds	r0, r1, r3
 808578a:	4415      	add	r5, r2
 808578c:	990e      	ldr	r1, [sp, #56]	; 0x38
 808578e:	ea8e 0207 	eor.w	r2, lr, r7
 8085792:	ea02 0209 	and.w	r2, r2, r9
 8085796:	eb05 65f9 	add.w	r5, r5, r9, ror #27
 808579a:	ea82 020e 	eor.w	r2, r2, lr
    P( B, C, D, E, A, W[4]  );
 808579e:	ea4f 09b9 	mov.w	r9, r9, ror #2
 80857a2:	4408      	add	r0, r1
 80857a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80857a6:	4410      	add	r0, r2
 80857a8:	ea87 0209 	eor.w	r2, r7, r9
 80857ac:	18ce      	adds	r6, r1, r3
 80857ae:	402a      	ands	r2, r5
 80857b0:	407a      	eors	r2, r7
 80857b2:	4476      	add	r6, lr
 80857b4:	eb00 60f5 	add.w	r0, r0, r5, ror #27
 80857b8:	4416      	add	r6, r2
    P( A, B, C, D, E, W[5]  );
 80857ba:	ea4f 05b5 	mov.w	r5, r5, ror #2
 80857be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80857c0:	ea89 0105 	eor.w	r1, r9, r5
 80857c4:	4001      	ands	r1, r0
 80857c6:	441a      	add	r2, r3
 80857c8:	eb06 66f0 	add.w	r6, r6, r0, ror #27
 80857cc:	ea81 0109 	eor.w	r1, r1, r9
    P( E, A, B, C, D, W[6]  );
 80857d0:	ea4f 00b0 	mov.w	r0, r0, ror #2
 80857d4:	443a      	add	r2, r7
 80857d6:	440a      	add	r2, r1
 80857d8:	ea85 0100 	eor.w	r1, r5, r0
 80857dc:	4031      	ands	r1, r6
 80857de:	eb02 62f6 	add.w	r2, r2, r6, ror #27
 80857e2:	4069      	eors	r1, r5
    P( D, E, A, B, C, W[7]  );
 80857e4:	ea4f 06b6 	mov.w	r6, r6, ror #2
 80857e8:	44cb      	add	fp, r9
 80857ea:	448b      	add	fp, r1
 80857ec:	ea80 0106 	eor.w	r1, r0, r6
 80857f0:	4011      	ands	r1, r2
 80857f2:	441c      	add	r4, r3
 80857f4:	4041      	eors	r1, r0
 80857f6:	442c      	add	r4, r5
 80857f8:	eb0b 6bf2 	add.w	fp, fp, r2, ror #27
 80857fc:	440c      	add	r4, r1
    P( C, D, E, A, B, W[8]  );
 80857fe:	ea4f 02b2 	mov.w	r2, r2, ror #2
 8085802:	990a      	ldr	r1, [sp, #40]	; 0x28
 8085804:	ea86 0502 	eor.w	r5, r6, r2
 8085808:	ea05 050b 	and.w	r5, r5, fp
 808580c:	4419      	add	r1, r3
 808580e:	4075      	eors	r5, r6
 8085810:	4401      	add	r1, r0
 8085812:	eb04 64fb 	add.w	r4, r4, fp, ror #27
 8085816:	4429      	add	r1, r5
    P( B, C, D, E, A, W[9]  );
 8085818:	ea4f 0bbb 	mov.w	fp, fp, ror #2
 808581c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 808581e:	ea82 000b 	eor.w	r0, r2, fp
 8085822:	eb05 0a03 	add.w	sl, r5, r3
 8085826:	4020      	ands	r0, r4
 8085828:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 808582c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    P( A, B, C, D, E, W[10] );
 808582e:	ea4f 04b4 	mov.w	r4, r4, ror #2
 8085832:	4050      	eors	r0, r2
 8085834:	44b2      	add	sl, r6
 8085836:	4482      	add	sl, r0
 8085838:	ea8b 0004 	eor.w	r0, fp, r4
 808583c:	eb05 0903 	add.w	r9, r5, r3
 8085840:	4008      	ands	r0, r1
 8085842:	ea80 000b 	eor.w	r0, r0, fp
 8085846:	4491      	add	r9, r2
 8085848:	eb0a 6af1 	add.w	sl, sl, r1, ror #27
 808584c:	4481      	add	r9, r0
    P( E, A, B, C, D, W[11] );
 808584e:	ea4f 01b1 	mov.w	r1, r1, ror #2
 8085852:	980d      	ldr	r0, [sp, #52]	; 0x34
 8085854:	ea84 0201 	eor.w	r2, r4, r1
 8085858:	eb00 0e03 	add.w	lr, r0, r3
 808585c:	ea02 020a 	and.w	r2, r2, sl
 8085860:	eb09 69fa 	add.w	r9, r9, sl, ror #27
 8085864:	9802      	ldr	r0, [sp, #8]
    P( D, E, A, B, C, W[12] );
 8085866:	ea4f 0aba 	mov.w	sl, sl, ror #2
 808586a:	4062      	eors	r2, r4
 808586c:	44de      	add	lr, fp
 808586e:	4496      	add	lr, r2
 8085870:	ea81 020a 	eor.w	r2, r1, sl
 8085874:	18c5      	adds	r5, r0, r3
 8085876:	ea02 0209 	and.w	r2, r2, r9
 808587a:	eb0e 6ef9 	add.w	lr, lr, r9, ror #27
 808587e:	404a      	eors	r2, r1
    P( C, D, E, A, B, W[13] );
 8085880:	ea4f 09b9 	mov.w	r9, r9, ror #2
 8085884:	9803      	ldr	r0, [sp, #12]
 8085886:	4425      	add	r5, r4
 8085888:	4415      	add	r5, r2
 808588a:	ea8a 0209 	eor.w	r2, sl, r9
 808588e:	ea02 020e 	and.w	r2, r2, lr
 8085892:	4418      	add	r0, r3
 8085894:	eb05 65fe 	add.w	r5, r5, lr, ror #27
 8085898:	ea82 020a 	eor.w	r2, r2, sl
    P( B, C, D, E, A, W[14] );
 808589c:	ea4f 0ebe 	mov.w	lr, lr, ror #2
 80858a0:	4408      	add	r0, r1
 80858a2:	9904      	ldr	r1, [sp, #16]
 80858a4:	4410      	add	r0, r2
 80858a6:	ea89 020e 	eor.w	r2, r9, lr
 80858aa:	18cf      	adds	r7, r1, r3
 80858ac:	402a      	ands	r2, r5
 80858ae:	ea82 0209 	eor.w	r2, r2, r9
 80858b2:	4457      	add	r7, sl
 80858b4:	4417      	add	r7, r2
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 80858b6:	9a06      	ldr	r2, [sp, #24]
 80858b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80858ba:	ea82 020c 	eor.w	r2, r2, ip
 80858be:	404a      	eors	r2, r1
 80858c0:	9902      	ldr	r1, [sp, #8]
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
 80858c2:	eb00 60f5 	add.w	r0, r0, r5, ror #27
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 80858c6:	404a      	eors	r2, r1
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
 80858c8:	ea4f 05b5 	mov.w	r5, r5, ror #2
 80858cc:	ea8e 0105 	eor.w	r1, lr, r5
    P( E, A, B, C, D, R(16) );
 80858d0:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80858d4:	9206      	str	r2, [sp, #24]
 80858d6:	4001      	ands	r1, r0
 80858d8:	441a      	add	r2, r3
 80858da:	ea81 010e 	eor.w	r1, r1, lr
 80858de:	444a      	add	r2, r9
 80858e0:	440a      	add	r2, r1
    P( D, E, A, B, C, R(17) );
 80858e2:	9907      	ldr	r1, [sp, #28]
 80858e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80858e6:	ea81 0108 	eor.w	r1, r1, r8
 80858ea:	4061      	eors	r1, r4
 80858ec:	9c03      	ldr	r4, [sp, #12]
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
 80858ee:	eb07 67f0 	add.w	r7, r7, r0, ror #27
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
 80858f2:	4061      	eors	r1, r4
 80858f4:	ea4f 71f1 	mov.w	r1, r1, ror #31
 80858f8:	9107      	str	r1, [sp, #28]
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 80858fa:	ea4f 00b0 	mov.w	r0, r0, ror #2
 80858fe:	9c07      	ldr	r4, [sp, #28]
 8085900:	ea85 0100 	eor.w	r1, r5, r0
 8085904:	18e6      	adds	r6, r4, r3
 8085906:	4039      	ands	r1, r7
 8085908:	4069      	eors	r1, r5
 808590a:	4476      	add	r6, lr
 808590c:	440e      	add	r6, r1
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
 808590e:	990e      	ldr	r1, [sp, #56]	; 0x38
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 8085910:	eb02 62f7 	add.w	r2, r2, r7, ror #27
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
 8085914:	ea8c 0c01 	eor.w	ip, ip, r1
 8085918:	990b      	ldr	r1, [sp, #44]	; 0x2c
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
 808591a:	ea4f 07b7 	mov.w	r7, r7, ror #2
    P( C, D, E, A, B, R(18) );
 808591e:	ea8c 0c01 	eor.w	ip, ip, r1
 8085922:	9904      	ldr	r1, [sp, #16]
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
 8085924:	eb06 66f2 	add.w	r6, r6, r2, ror #27
    P( C, D, E, A, B, R(18) );
 8085928:	ea8c 0c01 	eor.w	ip, ip, r1
 808592c:	ea4f 71fc 	mov.w	r1, ip, ror #31
 8085930:	9108      	str	r1, [sp, #32]
 8085932:	9c08      	ldr	r4, [sp, #32]
 8085934:	ea80 0107 	eor.w	r1, r0, r7
 8085938:	4011      	ands	r1, r2
 808593a:	441c      	add	r4, r3
 808593c:	4041      	eors	r1, r0
 808593e:	442c      	add	r4, r5
 8085940:	440c      	add	r4, r1
    P( B, C, D, E, A, R(19) );
 8085942:	990f      	ldr	r1, [sp, #60]	; 0x3c
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
 8085944:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( B, C, D, E, A, R(19) );
 8085948:	ea88 0801 	eor.w	r8, r8, r1
 808594c:	990c      	ldr	r1, [sp, #48]	; 0x30
 808594e:	ea87 0502 	eor.w	r5, r7, r2
 8085952:	ea88 0801 	eor.w	r8, r8, r1
 8085956:	9906      	ldr	r1, [sp, #24]
 8085958:	4035      	ands	r5, r6
 808595a:	ea88 0801 	eor.w	r8, r8, r1
 808595e:	ea4f 78f8 	mov.w	r8, r8, ror #31
 8085962:	4443      	add	r3, r8
 8085964:	407d      	eors	r5, r7
 8085966:	4403      	add	r3, r0
 8085968:	18e9      	adds	r1, r5, r3
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 808596a:	9810      	ldr	r0, [sp, #64]	; 0x40
 808596c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 808596e:	4d4b      	ldr	r5, [pc, #300]	; (8085a9c <mbedtls_internal_sha1_process+0x56c>)
 8085970:	ea83 0c00 	eor.w	ip, r3, r0
 8085974:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
 8085976:	eb04 64f6 	add.w	r4, r4, r6, ror #27
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 808597a:	ea8c 0c03 	eor.w	ip, ip, r3
 808597e:	9b07      	ldr	r3, [sp, #28]
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
    P( B, C, D, E, A, R(19) );
 8085980:	ea4f 06b6 	mov.w	r6, r6, ror #2
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 8085984:	ea8c 0c03 	eor.w	ip, ip, r3
 8085988:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 808598c:	ea82 0306 	eor.w	r3, r2, r6
 8085990:	eb0c 0b05 	add.w	fp, ip, r5
 8085994:	4063      	eors	r3, r4
 8085996:	44bb      	add	fp, r7
    P( E, A, B, C, D, R(21) );
 8085998:	9811      	ldr	r0, [sp, #68]	; 0x44
 808599a:	449b      	add	fp, r3
 808599c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
    P( B, C, D, E, A, R(19) );
 808599e:	eb01 61f4 	add.w	r1, r1, r4, ror #27

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
 80859a2:	ea83 0e00 	eor.w	lr, r3, r0
 80859a6:	9b02      	ldr	r3, [sp, #8]
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 80859a8:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( E, A, B, C, D, R(21) );
 80859ac:	ea8e 0e03 	eor.w	lr, lr, r3
 80859b0:	9b08      	ldr	r3, [sp, #32]
 80859b2:	ea86 0004 	eor.w	r0, r6, r4
 80859b6:	ea8e 0e03 	eor.w	lr, lr, r3
 80859ba:	ea4f 7efe 	mov.w	lr, lr, ror #31
 80859be:	eb0e 0305 	add.w	r3, lr, r5
 80859c2:	4048      	eors	r0, r1
 80859c4:	4413      	add	r3, r2
 80859c6:	4403      	add	r3, r0
    P( D, E, A, B, C, R(22) );
 80859c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80859ca:	9809      	ldr	r0, [sp, #36]	; 0x24
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 80859cc:	eb0b 6bf1 	add.w	fp, fp, r1, ror #27
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
 80859d0:	ea82 0700 	eor.w	r7, r2, r0
 80859d4:	9a03      	ldr	r2, [sp, #12]

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
 80859d6:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( D, E, A, B, C, R(22) );
 80859da:	4057      	eors	r7, r2
 80859dc:	ea87 0708 	eor.w	r7, r7, r8
 80859e0:	ea4f 77f7 	mov.w	r7, r7, ror #31
 80859e4:	ea84 0201 	eor.w	r2, r4, r1
 80859e8:	eb07 0a05 	add.w	sl, r7, r5
 80859ec:	ea82 020b 	eor.w	r2, r2, fp
 80859f0:	44b2      	add	sl, r6
    P( C, D, E, A, B, R(23) );
 80859f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80859f4:	4492      	add	sl, r2
 80859f6:	9a11      	ldr	r2, [sp, #68]	; 0x44

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
 80859f8:	eb03 63fb 	add.w	r3, r3, fp, ror #27
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
 80859fc:	ea82 0600 	eor.w	r6, r2, r0
 8085a00:	9a04      	ldr	r2, [sp, #16]
#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
 8085a02:	ea4f 0bbb 	mov.w	fp, fp, ror #2
    P( C, D, E, A, B, R(23) );
 8085a06:	4056      	eors	r6, r2
 8085a08:	ea86 060c 	eor.w	r6, r6, ip
 8085a0c:	ea4f 76f6 	mov.w	r6, r6, ror #31
 8085a10:	ea81 020b 	eor.w	r2, r1, fp
 8085a14:	eb06 0905 	add.w	r9, r6, r5
 8085a18:	405a      	eors	r2, r3
 8085a1a:	44a1      	add	r9, r4
    P( B, C, D, E, A, R(24) );
 8085a1c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8085a1e:	4491      	add	r9, r2
 8085a20:	9a09      	ldr	r2, [sp, #36]	; 0x24
#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
 8085a22:	eb0a 6af3 	add.w	sl, sl, r3, ror #27
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
 8085a26:	ea82 0400 	eor.w	r4, r2, r0
 8085a2a:	9a06      	ldr	r2, [sp, #24]
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
 8085a2c:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( B, C, D, E, A, R(24) );
 8085a30:	4054      	eors	r4, r2
 8085a32:	ea84 040e 	eor.w	r4, r4, lr
 8085a36:	ea4f 72f4 	mov.w	r2, r4, ror #31
 8085a3a:	9209      	str	r2, [sp, #36]	; 0x24
 8085a3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8085a3e:	ea8b 0203 	eor.w	r2, fp, r3
 8085a42:	4428      	add	r0, r5
 8085a44:	ea82 020a 	eor.w	r2, r2, sl
 8085a48:	4408      	add	r0, r1
 8085a4a:	4410      	add	r0, r2
    P( A, B, C, D, E, R(25) );
 8085a4c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8085a4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
 8085a50:	eb09 69fa 	add.w	r9, r9, sl, ror #27
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
 8085a54:	404a      	eors	r2, r1
 8085a56:	9907      	ldr	r1, [sp, #28]

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
 8085a58:	ea4f 0aba 	mov.w	sl, sl, ror #2
    P( A, B, C, D, E, R(25) );
 8085a5c:	404a      	eors	r2, r1
 8085a5e:	407a      	eors	r2, r7
 8085a60:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8085a64:	920a      	str	r2, [sp, #40]	; 0x28
 8085a66:	990a      	ldr	r1, [sp, #40]	; 0x28
 8085a68:	ea83 020a 	eor.w	r2, r3, sl
 8085a6c:	4429      	add	r1, r5
 8085a6e:	ea82 0209 	eor.w	r2, r2, r9
 8085a72:	4459      	add	r1, fp
 8085a74:	4411      	add	r1, r2
    P( E, A, B, C, D, R(26) );
 8085a76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
 8085a78:	eb00 60f9 	add.w	r0, r0, r9, ror #27
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
 8085a7c:	4614      	mov	r4, r2
 8085a7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
 8085a80:	ea4f 09b9 	mov.w	r9, r9, ror #2
    P( E, A, B, C, D, R(26) );
 8085a84:	4062      	eors	r2, r4
 8085a86:	9c08      	ldr	r4, [sp, #32]
 8085a88:	ea8a 0b09 	eor.w	fp, sl, r9
 8085a8c:	4062      	eors	r2, r4
 8085a8e:	4072      	eors	r2, r6
 8085a90:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8085a94:	e004      	b.n	8085aa0 <mbedtls_internal_sha1_process+0x570>
 8085a96:	bf00      	nop
 8085a98:	5a827999 	.word	0x5a827999
 8085a9c:	6ed9eba1 	.word	0x6ed9eba1
 8085aa0:	920b      	str	r2, [sp, #44]	; 0x2c
 8085aa2:	442a      	add	r2, r5
    P( D, E, A, B, C, R(27) );
 8085aa4:	9c02      	ldr	r4, [sp, #8]
    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
 8085aa6:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 8085aaa:	ea8b 0b00 	eor.w	fp, fp, r0
 8085aae:	441a      	add	r2, r3
    P( E, A, B, C, D, R(26) );
 8085ab0:	ea4f 03b0 	mov.w	r3, r0, ror #2
    P( D, E, A, B, C, R(27) );
 8085ab4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8085ab6:	445a      	add	r2, fp
 8085ab8:	4060      	eors	r0, r4
 8085aba:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8085abc:	ea80 0008 	eor.w	r0, r0, r8
 8085ac0:	4060      	eors	r0, r4
 8085ac2:	ea4f 70f0 	mov.w	r0, r0, ror #31
 8085ac6:	900c      	str	r0, [sp, #48]	; 0x30
 8085ac8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8085aca:	ea89 0003 	eor.w	r0, r9, r3
 8085ace:	eb04 0b05 	add.w	fp, r4, r5
 8085ad2:	4048      	eors	r0, r1
 8085ad4:	44da      	add	sl, fp
    P( C, D, E, A, B, R(28) );
 8085ad6:	9c03      	ldr	r4, [sp, #12]
 8085ad8:	4482      	add	sl, r0
 8085ada:	980d      	ldr	r0, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
 8085adc:	eb02 62f1 	add.w	r2, r2, r1, ror #27
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
 8085ae0:	4060      	eors	r0, r4
 8085ae2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8085ae4:	ea80 000c 	eor.w	r0, r0, ip
 8085ae8:	4060      	eors	r0, r4
 8085aea:	ea4f 70f0 	mov.w	r0, r0, ror #31
    P( B, C, D, E, A, R(29) );
 8085aee:	9c02      	ldr	r4, [sp, #8]
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
 8085af0:	900d      	str	r0, [sp, #52]	; 0x34
 8085af2:	4428      	add	r0, r5
 8085af4:	4448      	add	r0, r9
    P( B, C, D, E, A, R(29) );
 8085af6:	46a1      	mov	r9, r4
 8085af8:	9c04      	ldr	r4, [sp, #16]
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
 8085afa:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
 8085afe:	ea89 0904 	eor.w	r9, r9, r4
 8085b02:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8085b04:	ea89 090e 	eor.w	r9, r9, lr
 8085b08:	ea89 0904 	eor.w	r9, r9, r4
 8085b0c:	ea4f 74f9 	mov.w	r4, r9, ror #31
 8085b10:	eb04 0905 	add.w	r9, r4, r5
 8085b14:	9402      	str	r4, [sp, #8]
 8085b16:	ea83 0b01 	eor.w	fp, r3, r1
    P( A, B, C, D, E, R(30) );
 8085b1a:	9c06      	ldr	r4, [sp, #24]
 8085b1c:	4499      	add	r9, r3
 8085b1e:	9b03      	ldr	r3, [sp, #12]
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
 8085b20:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
 8085b24:	4063      	eors	r3, r4
 8085b26:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8085b28:	407b      	eors	r3, r7
 8085b2a:	4063      	eors	r3, r4
 8085b2c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8085b30:	9303      	str	r3, [sp, #12]
 8085b32:	ea8b 0b02 	eor.w	fp, fp, r2
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
 8085b36:	ea4f 02b2 	mov.w	r2, r2, ror #2
 8085b3a:	9c03      	ldr	r4, [sp, #12]
 8085b3c:	4458      	add	r0, fp
 8085b3e:	ea81 0b02 	eor.w	fp, r1, r2
 8085b42:	eb00 60fa 	add.w	r0, r0, sl, ror #27
 8085b46:	ea8b 0b0a 	eor.w	fp, fp, sl
    P( B, C, D, E, A, R(29) );
 8085b4a:	ea4f 0aba 	mov.w	sl, sl, ror #2
 8085b4e:	ea82 030a 	eor.w	r3, r2, sl
 8085b52:	44d9      	add	r9, fp
 8085b54:	eb04 0b05 	add.w	fp, r4, r5
 8085b58:	4043      	eors	r3, r0
 8085b5a:	4459      	add	r1, fp
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
 8085b5c:	9c07      	ldr	r4, [sp, #28]
 8085b5e:	4419      	add	r1, r3
 8085b60:	9b04      	ldr	r3, [sp, #16]
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
 8085b62:	eb09 69f0 	add.w	r9, r9, r0, ror #27
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
 8085b66:	4063      	eors	r3, r4
 8085b68:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8085b6a:	4073      	eors	r3, r6
 8085b6c:	4063      	eors	r3, r4
 8085b6e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8085b72:	9304      	str	r3, [sp, #16]
 8085b74:	442b      	add	r3, r5
    P( D, E, A, B, C, R(32) );
 8085b76:	9c08      	ldr	r4, [sp, #32]
 8085b78:	4413      	add	r3, r2
 8085b7a:	9a06      	ldr	r2, [sp, #24]
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
 8085b7c:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
 8085b80:	4062      	eors	r2, r4
 8085b82:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8085b84:	ea8a 0b00 	eor.w	fp, sl, r0
 8085b88:	4062      	eors	r2, r4
 8085b8a:	9c02      	ldr	r4, [sp, #8]
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
 8085b8c:	eb01 61f9 	add.w	r1, r1, r9, ror #27
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
 8085b90:	4062      	eors	r2, r4
 8085b92:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8085b96:	9206      	str	r2, [sp, #24]
 8085b98:	9c06      	ldr	r4, [sp, #24]
 8085b9a:	ea8b 0b09 	eor.w	fp, fp, r9
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
 8085b9e:	ea4f 09b9 	mov.w	r9, r9, ror #2
 8085ba2:	ea80 0209 	eor.w	r2, r0, r9
 8085ba6:	445b      	add	r3, fp
 8085ba8:	eb04 0b05 	add.w	fp, r4, r5
 8085bac:	404a      	eors	r2, r1
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 8085bae:	9c07      	ldr	r4, [sp, #28]
 8085bb0:	44da      	add	sl, fp
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
 8085bb2:	eb03 63f1 	add.w	r3, r3, r1, ror #27
 8085bb6:	4492      	add	sl, r2
    P( D, E, A, B, C, R(32) );
 8085bb8:	eb0a 62f3 	add.w	r2, sl, r3, ror #27
    P( C, D, E, A, B, R(33) );
 8085bbc:	ea84 0a08 	eor.w	sl, r4, r8
 8085bc0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
 8085bc2:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(33) );
 8085bc6:	ea8a 0a04 	eor.w	sl, sl, r4
 8085bca:	9c03      	ldr	r4, [sp, #12]
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
 8085bcc:	ea88 080e 	eor.w	r8, r8, lr
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 8085bd0:	ea8a 0a04 	eor.w	sl, sl, r4
 8085bd4:	ea4f 74fa 	mov.w	r4, sl, ror #31
 8085bd8:	eb04 0b05 	add.w	fp, r4, r5
 8085bdc:	ea89 0a01 	eor.w	sl, r9, r1
 8085be0:	4458      	add	r0, fp
 8085be2:	ea8a 0a03 	eor.w	sl, sl, r3
 8085be6:	4482      	add	sl, r0
    P( B, C, D, E, A, R(34) );
 8085be8:	9808      	ldr	r0, [sp, #32]
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 8085bea:	9407      	str	r4, [sp, #28]
    P( B, C, D, E, A, R(34) );
 8085bec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8085bee:	ea80 000c 	eor.w	r0, r0, ip
 8085bf2:	4060      	eors	r0, r4
 8085bf4:	9c04      	ldr	r4, [sp, #16]
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 8085bf6:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( B, C, D, E, A, R(34) );
 8085bfa:	4060      	eors	r0, r4
 8085bfc:	ea4f 70f0 	mov.w	r0, r0, ror #31
 8085c00:	9008      	str	r0, [sp, #32]
 8085c02:	9c08      	ldr	r4, [sp, #32]
 8085c04:	ea81 0003 	eor.w	r0, r1, r3
 8085c08:	eb04 0b05 	add.w	fp, r4, r5
    P( A, B, C, D, E, R(35) );
 8085c0c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8085c0e:	4050      	eors	r0, r2
 8085c10:	ea88 0804 	eor.w	r8, r8, r4
 8085c14:	9c06      	ldr	r4, [sp, #24]
 8085c16:	44d9      	add	r9, fp
 8085c18:	ea88 0804 	eor.w	r8, r8, r4
 8085c1c:	ea4f 7bf8 	mov.w	fp, r8, ror #31
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 8085c20:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
 8085c24:	4481      	add	r9, r0
    P( B, C, D, E, A, R(34) );
 8085c26:	ea4f 02b2 	mov.w	r2, r2, ror #2
 8085c2a:	eb09 60fa 	add.w	r0, r9, sl, ror #27
 8085c2e:	ea83 0802 	eor.w	r8, r3, r2
 8085c32:	eb0b 0905 	add.w	r9, fp, r5
 8085c36:	ea88 080a 	eor.w	r8, r8, sl
 8085c3a:	4449      	add	r1, r9
 8085c3c:	4441      	add	r1, r8
    P( A, B, C, D, E, R(35) );
 8085c3e:	eb01 68f0 	add.w	r8, r1, r0, ror #27
    P( E, A, B, C, D, R(36) );
 8085c42:	990d      	ldr	r1, [sp, #52]	; 0x34
 8085c44:	ea8c 0c07 	eor.w	ip, ip, r7
 8085c48:	ea8c 0c01 	eor.w	ip, ip, r1
 8085c4c:	9907      	ldr	r1, [sp, #28]
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
 8085c4e:	ea4f 0aba 	mov.w	sl, sl, ror #2
    P( E, A, B, C, D, R(36) );
 8085c52:	ea8c 0c01 	eor.w	ip, ip, r1
 8085c56:	ea4f 71fc 	mov.w	r1, ip, ror #31
 8085c5a:	910e      	str	r1, [sp, #56]	; 0x38
 8085c5c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8085c5e:	ea82 010a 	eor.w	r1, r2, sl
 8085c62:	eb04 0c05 	add.w	ip, r4, r5
 8085c66:	4041      	eors	r1, r0
 8085c68:	4463      	add	r3, ip
 8085c6a:	440b      	add	r3, r1
 8085c6c:	eb03 61f8 	add.w	r1, r3, r8, ror #27
    P( D, E, A, B, C, R(37) );
 8085c70:	9b02      	ldr	r3, [sp, #8]
 8085c72:	ea8e 0e06 	eor.w	lr, lr, r6
 8085c76:	ea8e 0e03 	eor.w	lr, lr, r3
 8085c7a:	9b08      	ldr	r3, [sp, #32]
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
 8085c7c:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(37) );
 8085c80:	ea8e 0e03 	eor.w	lr, lr, r3
 8085c84:	ea4f 73fe 	mov.w	r3, lr, ror #31
 8085c88:	930f      	str	r3, [sp, #60]	; 0x3c
 8085c8a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8085c8c:	ea8a 0300 	eor.w	r3, sl, r0
 8085c90:	eb04 0e05 	add.w	lr, r4, r5
 8085c94:	ea83 0308 	eor.w	r3, r3, r8
 8085c98:	4472      	add	r2, lr
 8085c9a:	441a      	add	r2, r3
 8085c9c:	eb02 63f1 	add.w	r3, r2, r1, ror #27
    P( C, D, E, A, B, R(38) );
 8085ca0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
 8085ca2:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( C, D, E, A, B, R(38) );
 8085ca6:	4057      	eors	r7, r2
 8085ca8:	9a03      	ldr	r2, [sp, #12]
 8085caa:	4057      	eors	r7, r2
 8085cac:	ea87 070b 	eor.w	r7, r7, fp
 8085cb0:	ea4f 72f7 	mov.w	r2, r7, ror #31
 8085cb4:	9210      	str	r2, [sp, #64]	; 0x40
 8085cb6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8085cb8:	ea80 0208 	eor.w	r2, r0, r8
 8085cbc:	1967      	adds	r7, r4, r5
    P( B, C, D, E, A, R(39) );
 8085cbe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8085cc0:	404a      	eors	r2, r1
 8085cc2:	4066      	eors	r6, r4
 8085cc4:	9c04      	ldr	r4, [sp, #16]
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
 8085cc6:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( B, C, D, E, A, R(39) );
 8085cca:	4066      	eors	r6, r4
 8085ccc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8085cce:	44ba      	add	sl, r7
 8085cd0:	4066      	eors	r6, r4
 8085cd2:	ea4f 74f6 	mov.w	r4, r6, ror #31
 8085cd6:	4425      	add	r5, r4
 8085cd8:	9411      	str	r4, [sp, #68]	; 0x44
 8085cda:	4428      	add	r0, r5
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 8085cdc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8085cde:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8085ce0:	ea88 0601 	eor.w	r6, r8, r1
 8085ce4:	4065      	eors	r5, r4
 8085ce6:	462c      	mov	r4, r5
 8085ce8:	9d06      	ldr	r5, [sp, #24]
 8085cea:	405e      	eors	r6, r3
 8085cec:	406c      	eors	r4, r5
 8085cee:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8085cf0:	4492      	add	sl, r2
 8085cf2:	4430      	add	r0, r6
 8085cf4:	406c      	eors	r4, r5
 8085cf6:	4ed6      	ldr	r6, [pc, #856]	; (8086050 <mbedtls_internal_sha1_process+0xb20>)
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
 8085cf8:	eb0a 62f3 	add.w	r2, sl, r3, ror #27
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 8085cfc:	ea4f 74f4 	mov.w	r4, r4, ror #31
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
    P( B, C, D, E, A, R(39) );
 8085d00:	ea4f 03b3 	mov.w	r3, r3, ror #2
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 8085d04:	9409      	str	r4, [sp, #36]	; 0x24
 8085d06:	ea42 0503 	orr.w	r5, r2, r3
 8085d0a:	4434      	add	r4, r6
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
    P( B, C, D, E, A, R(39) );
 8085d0c:	eb00 60f2 	add.w	r0, r0, r2, ror #27
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 8085d10:	400d      	ands	r5, r1
 8085d12:	44a0      	add	r8, r4
 8085d14:	ea02 0403 	and.w	r4, r2, r3
 8085d18:	432c      	orrs	r4, r5
 8085d1a:	eb08 68f0 	add.w	r8, r8, r0, ror #27
 8085d1e:	ea4f 0ab2 	mov.w	sl, r2, ror #2
 8085d22:	44a0      	add	r8, r4
    P( E, A, B, C, D, R(41) );
 8085d24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8085d26:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8085d28:	ea4f 0cb0 	mov.w	ip, r0, ror #2
 8085d2c:	4062      	eors	r2, r4
 8085d2e:	9c07      	ldr	r4, [sp, #28]
 8085d30:	4062      	eors	r2, r4
 8085d32:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8085d34:	4062      	eors	r2, r4
 8085d36:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8085d3a:	920a      	str	r2, [sp, #40]	; 0x28
 8085d3c:	ea40 020a 	orr.w	r2, r0, sl
 8085d40:	ea02 0403 	and.w	r4, r2, r3
 8085d44:	ea00 020a 	and.w	r2, r0, sl
 8085d48:	4322      	orrs	r2, r4
 8085d4a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    P( D, E, A, B, C, R(42) );
 8085d4c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8085d4e:	4434      	add	r4, r6
 8085d50:	4421      	add	r1, r4
 8085d52:	4411      	add	r1, r2
 8085d54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
 8085d56:	eb01 61f8 	add.w	r1, r1, r8, ror #27
    P( D, E, A, B, C, R(42) );
 8085d5a:	4042      	eors	r2, r0
 8085d5c:	9808      	ldr	r0, [sp, #32]
 8085d5e:	4042      	eors	r2, r0
 8085d60:	9811      	ldr	r0, [sp, #68]	; 0x44
 8085d62:	4042      	eors	r2, r0
 8085d64:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8085d68:	920b      	str	r2, [sp, #44]	; 0x2c
 8085d6a:	ea48 000c 	orr.w	r0, r8, ip
 8085d6e:	4432      	add	r2, r6
 8085d70:	ea00 000a 	and.w	r0, r0, sl
 8085d74:	4413      	add	r3, r2
 8085d76:	ea08 020c 	and.w	r2, r8, ip
 8085d7a:	4302      	orrs	r2, r0
 8085d7c:	eb03 63f1 	add.w	r3, r3, r1, ror #27
 8085d80:	4413      	add	r3, r2
    P( C, D, E, A, B, R(43) );
 8085d82:	9802      	ldr	r0, [sp, #8]
 8085d84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
 8085d86:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( C, D, E, A, B, R(43) );
 8085d8a:	4050      	eors	r0, r2
 8085d8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8085d8e:	ea80 000b 	eor.w	r0, r0, fp
 8085d92:	4050      	eors	r0, r2
 8085d94:	ea4f 72f0 	mov.w	r2, r0, ror #31
 8085d98:	ea41 0008 	orr.w	r0, r1, r8
 8085d9c:	920c      	str	r2, [sp, #48]	; 0x30
 8085d9e:	ea00 000c 	and.w	r0, r0, ip
 8085da2:	ea01 0208 	and.w	r2, r1, r8
 8085da6:	4310      	orrs	r0, r2
 8085da8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8085daa:	ea4f 01b1 	mov.w	r1, r1, ror #2
 8085dae:	4432      	add	r2, r6
 8085db0:	4452      	add	r2, sl
 8085db2:	4402      	add	r2, r0
 8085db4:	eb02 6af3 	add.w	sl, r2, r3, ror #27
    P( B, C, D, E, A, R(44) );
 8085db8:	9803      	ldr	r0, [sp, #12]
 8085dba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8085dbc:	ea43 0401 	orr.w	r4, r3, r1
 8085dc0:	4050      	eors	r0, r2
 8085dc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8085dc4:	ea04 0408 	and.w	r4, r4, r8
 8085dc8:	4050      	eors	r0, r2
 8085dca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8085dcc:	ea4f 07b3 	mov.w	r7, r3, ror #2
 8085dd0:	4050      	eors	r0, r2
 8085dd2:	ea4f 72f0 	mov.w	r2, r0, ror #31
 8085dd6:	1990      	adds	r0, r2, r6
 8085dd8:	920d      	str	r2, [sp, #52]	; 0x34
 8085dda:	4460      	add	r0, ip
 8085ddc:	ea03 0201 	and.w	r2, r3, r1
 8085de0:	4322      	orrs	r2, r4
 8085de2:	eb00 60fa 	add.w	r0, r0, sl, ror #27
 8085de6:	4410      	add	r0, r2
    P( A, B, C, D, E, R(45) );
 8085de8:	9b02      	ldr	r3, [sp, #8]
 8085dea:	9a04      	ldr	r2, [sp, #16]
 8085dec:	ea4f 09ba 	mov.w	r9, sl, ror #2
 8085df0:	4053      	eors	r3, r2
 8085df2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8085df4:	4053      	eors	r3, r2
 8085df6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8085df8:	4053      	eors	r3, r2
 8085dfa:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8085dfe:	9302      	str	r3, [sp, #8]
 8085e00:	9a02      	ldr	r2, [sp, #8]
 8085e02:	ea4a 0307 	orr.w	r3, sl, r7
 8085e06:	ea03 0e01 	and.w	lr, r3, r1
 8085e0a:	ea0a 0307 	and.w	r3, sl, r7
 8085e0e:	ea4e 0303 	orr.w	r3, lr, r3
 8085e12:	eb02 0e06 	add.w	lr, r2, r6
 8085e16:	44f0      	add	r8, lr
 8085e18:	4498      	add	r8, r3
    P( E, A, B, C, D, R(46) );
 8085e1a:	9a06      	ldr	r2, [sp, #24]
 8085e1c:	9b03      	ldr	r3, [sp, #12]
    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
 8085e1e:	eb08 6ef0 	add.w	lr, r8, r0, ror #27
    P( E, A, B, C, D, R(46) );
 8085e22:	ea83 0802 	eor.w	r8, r3, r2
 8085e26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8085e28:	ea88 0803 	eor.w	r8, r8, r3
 8085e2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8085e2e:	ea88 0803 	eor.w	r8, r8, r3
 8085e32:	ea4f 73f8 	mov.w	r3, r8, ror #31
 8085e36:	199c      	adds	r4, r3, r6
 8085e38:	4421      	add	r1, r4
 8085e3a:	ea40 0409 	orr.w	r4, r0, r9
 8085e3e:	9303      	str	r3, [sp, #12]
 8085e40:	403c      	ands	r4, r7
 8085e42:	ea00 0309 	and.w	r3, r0, r9
 8085e46:	431c      	orrs	r4, r3
    P( D, E, A, B, C, R(47) );
 8085e48:	9b04      	ldr	r3, [sp, #16]
 8085e4a:	9a07      	ldr	r2, [sp, #28]
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
 8085e4c:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(47) );
 8085e50:	ea83 0c02 	eor.w	ip, r3, r2
 8085e54:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8085e56:	eb01 61fe 	add.w	r1, r1, lr, ror #27
 8085e5a:	ea8c 0c03 	eor.w	ip, ip, r3
 8085e5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
 8085e60:	440c      	add	r4, r1
    P( D, E, A, B, C, R(47) );
 8085e62:	ea8c 0c03 	eor.w	ip, ip, r3
 8085e66:	ea4f 73fc 	mov.w	r3, ip, ror #31
 8085e6a:	ea4e 0100 	orr.w	r1, lr, r0
 8085e6e:	9304      	str	r3, [sp, #16]
 8085e70:	ea01 0109 	and.w	r1, r1, r9
 8085e74:	ea0e 0300 	and.w	r3, lr, r0
 8085e78:	4319      	orrs	r1, r3
 8085e7a:	9b04      	ldr	r3, [sp, #16]
    P( C, D, E, A, B, R(48) );
 8085e7c:	9a08      	ldr	r2, [sp, #32]
 8085e7e:	4433      	add	r3, r6
 8085e80:	443b      	add	r3, r7
 8085e82:	18cf      	adds	r7, r1, r3
 8085e84:	9b06      	ldr	r3, [sp, #24]
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
 8085e86:	ea4f 01be 	mov.w	r1, lr, ror #2
    P( C, D, E, A, B, R(48) );
 8085e8a:	ea83 0802 	eor.w	r8, r3, r2
 8085e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
 8085e90:	eb07 67f4 	add.w	r7, r7, r4, ror #27
    P( C, D, E, A, B, R(48) );
 8085e94:	ea88 0803 	eor.w	r8, r8, r3
 8085e98:	9b02      	ldr	r3, [sp, #8]
    P( B, C, D, E, A, R(49) );
 8085e9a:	ea4f 0ab7 	mov.w	sl, r7, ror #2
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
 8085e9e:	ea88 0803 	eor.w	r8, r8, r3
 8085ea2:	ea4f 73f8 	mov.w	r3, r8, ror #31
 8085ea6:	199a      	adds	r2, r3, r6
 8085ea8:	4491      	add	r9, r2
 8085eaa:	ea44 0201 	orr.w	r2, r4, r1
 8085eae:	9306      	str	r3, [sp, #24]
 8085eb0:	4002      	ands	r2, r0
 8085eb2:	ea04 0301 	and.w	r3, r4, r1
 8085eb6:	431a      	orrs	r2, r3
    P( B, C, D, E, A, R(49) );
 8085eb8:	9b07      	ldr	r3, [sp, #28]
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
 8085eba:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( B, C, D, E, A, R(49) );
 8085ebe:	ea83 0c0b 	eor.w	ip, r3, fp
 8085ec2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8085ec4:	eb09 69f7 	add.w	r9, r9, r7, ror #27
 8085ec8:	ea8c 0c03 	eor.w	ip, ip, r3
 8085ecc:	9b03      	ldr	r3, [sp, #12]
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
 8085ece:	444a      	add	r2, r9
    P( B, C, D, E, A, R(49) );
 8085ed0:	ea8c 0c03 	eor.w	ip, ip, r3
 8085ed4:	ea4f 73fc 	mov.w	r3, ip, ror #31
 8085ed8:	9307      	str	r3, [sp, #28]
 8085eda:	9d07      	ldr	r5, [sp, #28]
 8085edc:	ea47 0304 	orr.w	r3, r7, r4
 8085ee0:	ea03 0c01 	and.w	ip, r3, r1
 8085ee4:	ea07 0304 	and.w	r3, r7, r4
 8085ee8:	ea4c 0303 	orr.w	r3, ip, r3
 8085eec:	eb05 0c06 	add.w	ip, r5, r6
 8085ef0:	4460      	add	r0, ip
 8085ef2:	4418      	add	r0, r3
 8085ef4:	eb00 6cf2 	add.w	ip, r0, r2, ror #27
    P( A, B, C, D, E, R(50) );
 8085ef8:	9b08      	ldr	r3, [sp, #32]
 8085efa:	980e      	ldr	r0, [sp, #56]	; 0x38
 8085efc:	ea83 0500 	eor.w	r5, r3, r0
 8085f00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8085f02:	ea42 000a 	orr.w	r0, r2, sl
 8085f06:	405d      	eors	r5, r3
 8085f08:	9b04      	ldr	r3, [sp, #16]
 8085f0a:	4020      	ands	r0, r4
 8085f0c:	405d      	eors	r5, r3
 8085f0e:	ea4f 77f5 	mov.w	r7, r5, ror #31
 8085f12:	19bb      	adds	r3, r7, r6
 8085f14:	4419      	add	r1, r3
 8085f16:	eb01 63fc 	add.w	r3, r1, ip, ror #27
 8085f1a:	ea02 010a 	and.w	r1, r2, sl
 8085f1e:	4301      	orrs	r1, r0
 8085f20:	4419      	add	r1, r3
    P( E, A, B, C, D, R(51) );
 8085f22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
 8085f24:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(51) );
 8085f28:	ea8b 0903 	eor.w	r9, fp, r3
 8085f2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8085f2e:	ea4f 00bc 	mov.w	r0, ip, ror #2
 8085f32:	ea89 0903 	eor.w	r9, r9, r3
 8085f36:	9b06      	ldr	r3, [sp, #24]
 8085f38:	ea89 0903 	eor.w	r9, r9, r3
 8085f3c:	ea4c 0302 	orr.w	r3, ip, r2
 8085f40:	ea4f 7ef9 	mov.w	lr, r9, ror #31
 8085f44:	ea03 050a 	and.w	r5, r3, sl
 8085f48:	ea0c 0302 	and.w	r3, ip, r2
 8085f4c:	432b      	orrs	r3, r5
 8085f4e:	eb0e 0506 	add.w	r5, lr, r6
 8085f52:	4425      	add	r5, r4
 8085f54:	441d      	add	r5, r3
    P( D, E, A, B, C, R(52) );
 8085f56:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8085f58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
 8085f5a:	eb05 65f1 	add.w	r5, r5, r1, ror #27
    P( D, E, A, B, C, R(52) );
 8085f5e:	4063      	eors	r3, r4
 8085f60:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8085f62:	4063      	eors	r3, r4
 8085f64:	9c07      	ldr	r4, [sp, #28]
 8085f66:	4063      	eors	r3, r4
 8085f68:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8085f6c:	9308      	str	r3, [sp, #32]
 8085f6e:	4433      	add	r3, r6
 8085f70:	449a      	add	sl, r3
 8085f72:	eb0a 63f5 	add.w	r3, sl, r5, ror #27
 8085f76:	ea41 0a00 	orr.w	sl, r1, r0
 8085f7a:	ea01 0400 	and.w	r4, r1, r0
 8085f7e:	ea0a 0a02 	and.w	sl, sl, r2
 8085f82:	ea4a 0a04 	orr.w	sl, sl, r4
 8085f86:	449a      	add	sl, r3
    P( C, D, E, A, B, R(53) );
 8085f88:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8085f8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
 8085f8c:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(53) );
 8085f90:	4063      	eors	r3, r4
 8085f92:	9c02      	ldr	r4, [sp, #8]
 8085f94:	4063      	eors	r3, r4
 8085f96:	407b      	eors	r3, r7
 8085f98:	ea45 0401 	orr.w	r4, r5, r1
 8085f9c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8085fa0:	930e      	str	r3, [sp, #56]	; 0x38
 8085fa2:	4004      	ands	r4, r0
 8085fa4:	ea05 0301 	and.w	r3, r5, r1
 8085fa8:	431c      	orrs	r4, r3
 8085faa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8085fac:	ea4f 05b5 	mov.w	r5, r5, ror #2
 8085fb0:	4433      	add	r3, r6
 8085fb2:	4413      	add	r3, r2
 8085fb4:	4423      	add	r3, r4
    P( B, C, D, E, A, R(54) );
 8085fb6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8085fb8:	9c09      	ldr	r4, [sp, #36]	; 0x24
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
 8085fba:	eb03 63fa 	add.w	r3, r3, sl, ror #27
    P( B, C, D, E, A, R(54) );
 8085fbe:	ea82 0804 	eor.w	r8, r2, r4
 8085fc2:	9a03      	ldr	r2, [sp, #12]
 8085fc4:	ea88 0802 	eor.w	r8, r8, r2
 8085fc8:	ea88 080e 	eor.w	r8, r8, lr
 8085fcc:	ea4f 72f8 	mov.w	r2, r8, ror #31
 8085fd0:	eb02 0806 	add.w	r8, r2, r6
 8085fd4:	4480      	add	r8, r0
 8085fd6:	eb08 60f3 	add.w	r0, r8, r3, ror #27
 8085fda:	ea4a 0805 	orr.w	r8, sl, r5
 8085fde:	920f      	str	r2, [sp, #60]	; 0x3c
 8085fe0:	ea08 0801 	and.w	r8, r8, r1
 8085fe4:	ea0a 0205 	and.w	r2, sl, r5
 8085fe8:	ea48 0802 	orr.w	r8, r8, r2
 8085fec:	4480      	add	r8, r0
    P( A, B, C, D, E, R(55) );
 8085fee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8085ff0:	980a      	ldr	r0, [sp, #40]	; 0x28
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
 8085ff2:	ea4f 0aba 	mov.w	sl, sl, ror #2
    P( A, B, C, D, E, R(55) );
 8085ff6:	ea82 0c00 	eor.w	ip, r2, r0
 8085ffa:	9a04      	ldr	r2, [sp, #16]
 8085ffc:	ea8c 0c02 	eor.w	ip, ip, r2
 8086000:	9a08      	ldr	r2, [sp, #32]
 8086002:	ea8c 0c02 	eor.w	ip, ip, r2
 8086006:	ea4f 72fc 	mov.w	r2, ip, ror #31
 808600a:	9210      	str	r2, [sp, #64]	; 0x40
 808600c:	9810      	ldr	r0, [sp, #64]	; 0x40
 808600e:	ea43 020a 	orr.w	r2, r3, sl
 8086012:	ea02 0c05 	and.w	ip, r2, r5
 8086016:	ea03 020a 	and.w	r2, r3, sl
 808601a:	ea4c 0202 	orr.w	r2, ip, r2
 808601e:	eb00 0c06 	add.w	ip, r0, r6
 8086022:	448c      	add	ip, r1
    P( E, A, B, C, D, R(56) );
 8086024:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8086026:	4494      	add	ip, r2
 8086028:	9a06      	ldr	r2, [sp, #24]
 808602a:	404c      	eors	r4, r1
 808602c:	4054      	eors	r4, r2
 808602e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
 8086030:	eb0c 6cf8 	add.w	ip, ip, r8, ror #27
    P( E, A, B, C, D, R(56) );
 8086034:	4054      	eors	r4, r2
 8086036:	ea4f 72f4 	mov.w	r2, r4, ror #31
 808603a:	9209      	str	r2, [sp, #36]	; 0x24
 808603c:	4432      	add	r2, r6
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
 808603e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8086042:	4415      	add	r5, r2
 8086044:	eb05 62fc 	add.w	r2, r5, ip, ror #27
    P( E, A, B, C, D, R(56) );
 8086048:	ea48 0503 	orr.w	r5, r8, r3
 808604c:	e002      	b.n	8086054 <mbedtls_internal_sha1_process+0xb24>
 808604e:	bf00      	nop
 8086050:	8f1bbcdc 	.word	0x8f1bbcdc
 8086054:	ea08 0103 	and.w	r1, r8, r3
 8086058:	ea05 050a 	and.w	r5, r5, sl
 808605c:	430d      	orrs	r5, r1
 808605e:	4415      	add	r5, r2
    P( D, E, A, B, C, R(57) );
 8086060:	990c      	ldr	r1, [sp, #48]	; 0x30
 8086062:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
 8086064:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( D, E, A, B, C, R(57) );
 8086068:	ea82 0b01 	eor.w	fp, r2, r1
 808606c:	9a07      	ldr	r2, [sp, #28]
    P( C, D, E, A, B, R(58) );
 808606e:	990d      	ldr	r1, [sp, #52]	; 0x34
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
 8086070:	ea8b 0b02 	eor.w	fp, fp, r2
 8086074:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8086076:	ea8b 0b02 	eor.w	fp, fp, r2
 808607a:	ea4c 0208 	orr.w	r2, ip, r8
 808607e:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 8086082:	ea02 0903 	and.w	r9, r2, r3
 8086086:	ea0c 0208 	and.w	r2, ip, r8
 808608a:	ea49 0202 	orr.w	r2, r9, r2
 808608e:	eb0b 0906 	add.w	r9, fp, r6
 8086092:	44d1      	add	r9, sl
 8086094:	4491      	add	r9, r2
    P( C, D, E, A, B, R(58) );
 8086096:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
 8086098:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( C, D, E, A, B, R(58) );
 808609c:	ea82 0a01 	eor.w	sl, r2, r1
 80860a0:	ea8a 0a07 	eor.w	sl, sl, r7
 80860a4:	ea8a 0a00 	eor.w	sl, sl, r0
 80860a8:	ea4f 72fa 	mov.w	r2, sl, ror #31
 80860ac:	920a      	str	r2, [sp, #40]	; 0x28
 80860ae:	4432      	add	r2, r6
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
 80860b0:	eb09 69f5 	add.w	r9, r9, r5, ror #27
    P( C, D, E, A, B, R(58) );
 80860b4:	ea45 010c 	orr.w	r1, r5, ip
 80860b8:	441a      	add	r2, r3
 80860ba:	eb02 63f9 	add.w	r3, r2, r9, ror #27
 80860be:	ea01 0108 	and.w	r1, r1, r8
 80860c2:	ea05 020c 	and.w	r2, r5, ip
 80860c6:	430a      	orrs	r2, r1
 80860c8:	441a      	add	r2, r3
    P( B, C, D, E, A, R(59) );
 80860ca:	9902      	ldr	r1, [sp, #8]
 80860cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
 80860ce:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( B, C, D, E, A, R(59) );
 80860d2:	ea83 0001 	eor.w	r0, r3, r1
 80860d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80860d8:	ea80 000e 	eor.w	r0, r0, lr
 80860dc:	4058      	eors	r0, r3
 80860de:	ea4f 73f0 	mov.w	r3, r0, ror #31
 80860e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80860e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80860e6:	ea49 0005 	orr.w	r0, r9, r5
 80860ea:	ea00 000c 	and.w	r0, r0, ip
 80860ee:	ea09 0305 	and.w	r3, r9, r5
 80860f2:	440e      	add	r6, r1
 80860f4:	4446      	add	r6, r8
 80860f6:	4303      	orrs	r3, r0
 80860f8:	1998      	adds	r0, r3, r6
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 80860fa:	9903      	ldr	r1, [sp, #12]
 80860fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80860fe:	4ed8      	ldr	r6, [pc, #864]	; (8086460 <mbedtls_internal_sha1_process+0xf30>)
 8086100:	4059      	eors	r1, r3
 8086102:	9b08      	ldr	r3, [sp, #32]
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
    P( B, C, D, E, A, R(59) );
 8086104:	ea4f 09b9 	mov.w	r9, r9, ror #2
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 8086108:	4059      	eors	r1, r3
 808610a:	ea81 010b 	eor.w	r1, r1, fp
 808610e:	ea4f 73f1 	mov.w	r3, r1, ror #31
 8086112:	930c      	str	r3, [sp, #48]	; 0x30
 8086114:	990c      	ldr	r1, [sp, #48]	; 0x30
 8086116:	ea85 0309 	eor.w	r3, r5, r9
 808611a:	4431      	add	r1, r6
 808611c:	4053      	eors	r3, r2
 808611e:	4461      	add	r1, ip
 8086120:	4419      	add	r1, r3
    P( E, A, B, C, D, R(61) );
 8086122:	9b02      	ldr	r3, [sp, #8]
 8086124:	9c04      	ldr	r4, [sp, #16]
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
    P( B, C, D, E, A, R(59) );
 8086126:	eb00 60f2 	add.w	r0, r0, r2, ror #27

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
 808612a:	4063      	eors	r3, r4
 808612c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 808612e:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(61) );
 8086132:	4063      	eors	r3, r4
 8086134:	9c0a      	ldr	r4, [sp, #40]	; 0x28
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 8086136:	eb01 61f0 	add.w	r1, r1, r0, ror #27
    P( E, A, B, C, D, R(61) );
 808613a:	4063      	eors	r3, r4
 808613c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8086140:	9302      	str	r3, [sp, #8]
 8086142:	ea89 0402 	eor.w	r4, r9, r2
 8086146:	4433      	add	r3, r6
 8086148:	4044      	eors	r4, r0
 808614a:	442b      	add	r3, r5
 808614c:	4423      	add	r3, r4
    P( D, E, A, B, C, R(62) );
 808614e:	9d06      	ldr	r5, [sp, #24]
 8086150:	9c03      	ldr	r4, [sp, #12]

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
 8086152:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(62) );
 8086156:	ea84 0805 	eor.w	r8, r4, r5
 808615a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 808615c:	ea82 0500 	eor.w	r5, r2, r0
 8086160:	ea88 0804 	eor.w	r8, r8, r4
 8086164:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8086166:	404d      	eors	r5, r1
 8086168:	ea88 0804 	eor.w	r8, r8, r4
 808616c:	ea4f 74f8 	mov.w	r4, r8, ror #31
 8086170:	9403      	str	r4, [sp, #12]
 8086172:	4434      	add	r4, r6
 8086174:	444c      	add	r4, r9
 8086176:	442c      	add	r4, r5
    P( C, D, E, A, B, R(63) );
 8086178:	9d04      	ldr	r5, [sp, #16]

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
 808617a:	eb03 63f1 	add.w	r3, r3, r1, ror #27
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
 808617e:	46ac      	mov	ip, r5
 8086180:	9d07      	ldr	r5, [sp, #28]
#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
 8086182:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(63) );
 8086186:	ea8c 0c05 	eor.w	ip, ip, r5
 808618a:	9d10      	ldr	r5, [sp, #64]	; 0x40
#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
 808618c:	eb04 64f3 	add.w	r4, r4, r3, ror #27
    P( C, D, E, A, B, R(63) );
 8086190:	ea8c 0c05 	eor.w	ip, ip, r5
 8086194:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8086196:	ea8c 0c05 	eor.w	ip, ip, r5
 808619a:	ea4f 75fc 	mov.w	r5, ip, ror #31
 808619e:	9504      	str	r5, [sp, #16]
 80861a0:	ea80 0501 	eor.w	r5, r0, r1
 80861a4:	ea85 0c03 	eor.w	ip, r5, r3
 80861a8:	9d04      	ldr	r5, [sp, #16]
 80861aa:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80861ae:	eb05 0a06 	add.w	sl, r5, r6
 80861b2:	4492      	add	sl, r2
    P( B, C, D, E, A, R(64) );
 80861b4:	9a06      	ldr	r2, [sp, #24]
 80861b6:	44e2      	add	sl, ip
 80861b8:	ea82 0807 	eor.w	r8, r2, r7
 80861bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
 80861be:	eb0a 6af4 	add.w	sl, sl, r4, ror #27
    P( B, C, D, E, A, R(64) );
 80861c2:	ea88 0802 	eor.w	r8, r8, r2
 80861c6:	9a02      	ldr	r2, [sp, #8]
 80861c8:	ea88 0802 	eor.w	r8, r8, r2
 80861cc:	ea4f 72f8 	mov.w	r2, r8, ror #31
 80861d0:	9206      	str	r2, [sp, #24]
 80861d2:	9d06      	ldr	r5, [sp, #24]
 80861d4:	ea81 0203 	eor.w	r2, r1, r3
 80861d8:	eb05 0806 	add.w	r8, r5, r6
 80861dc:	4062      	eors	r2, r4
 80861de:	4480      	add	r8, r0
 80861e0:	4490      	add	r8, r2
    P( A, B, C, D, E, R(65) );
 80861e2:	9a07      	ldr	r2, [sp, #28]

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
 80861e4:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( A, B, C, D, E, R(65) );
 80861e8:	ea82 0c0e 	eor.w	ip, r2, lr
 80861ec:	9a03      	ldr	r2, [sp, #12]
 80861ee:	ea8c 0c0b 	eor.w	ip, ip, fp
 80861f2:	ea8c 0c02 	eor.w	ip, ip, r2
 80861f6:	ea4f 72fc 	mov.w	r2, ip, ror #31
 80861fa:	9207      	str	r2, [sp, #28]
 80861fc:	9807      	ldr	r0, [sp, #28]
 80861fe:	ea83 0204 	eor.w	r2, r3, r4
 8086202:	eb00 0c06 	add.w	ip, r0, r6
 8086206:	ea82 020a 	eor.w	r2, r2, sl
 808620a:	448c      	add	ip, r1
 808620c:	4494      	add	ip, r2
    P( E, A, B, C, D, R(66) );
 808620e:	9a08      	ldr	r2, [sp, #32]

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
 8086210:	eb08 68fa 	add.w	r8, r8, sl, ror #27
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
 8086214:	ea87 0502 	eor.w	r5, r7, r2
 8086218:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
 808621a:	ea4f 0aba 	mov.w	sl, sl, ror #2
    P( E, A, B, C, D, R(66) );
 808621e:	4055      	eors	r5, r2
 8086220:	9a04      	ldr	r2, [sp, #16]
    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
 8086222:	eb0c 6cf8 	add.w	ip, ip, r8, ror #27
    P( E, A, B, C, D, R(66) );
 8086226:	4055      	eors	r5, r2
 8086228:	ea4f 75f5 	mov.w	r5, r5, ror #31
 808622c:	19af      	adds	r7, r5, r6
 808622e:	441f      	add	r7, r3
    P( D, E, A, B, C, R(67) );
 8086230:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8086232:	ea84 020a 	eor.w	r2, r4, sl
 8086236:	ea8e 0903 	eor.w	r9, lr, r3
 808623a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 808623c:	ea82 0208 	eor.w	r2, r2, r8
 8086240:	ea89 0903 	eor.w	r9, r9, r3
 8086244:	9b06      	ldr	r3, [sp, #24]
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
 8086246:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( D, E, A, B, C, R(67) );
 808624a:	ea89 0903 	eor.w	r9, r9, r3
 808624e:	ea4f 79f9 	mov.w	r9, r9, ror #31
 8086252:	ea8a 0308 	eor.w	r3, sl, r8
 8086256:	eb09 0e06 	add.w	lr, r9, r6
 808625a:	ea83 030c 	eor.w	r3, r3, ip
 808625e:	44a6      	add	lr, r4
 8086260:	4417      	add	r7, r2
 8086262:	449e      	add	lr, r3
    P( C, D, E, A, B, R(68) );
 8086264:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8086266:	9b08      	ldr	r3, [sp, #32]
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
 8086268:	eb07 67fc 	add.w	r7, r7, ip, ror #27
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
 808626c:	4053      	eors	r3, r2
 808626e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
 8086270:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( C, D, E, A, B, R(68) );
 8086274:	4053      	eors	r3, r2
 8086276:	4043      	eors	r3, r0
 8086278:	ea4f 73f3 	mov.w	r3, r3, ror #31
 808627c:	9308      	str	r3, [sp, #32]
 808627e:	9a08      	ldr	r2, [sp, #32]
 8086280:	ea88 030c 	eor.w	r3, r8, ip
 8086284:	4432      	add	r2, r6
 8086286:	407b      	eors	r3, r7
 8086288:	4452      	add	r2, sl
    P( B, C, D, E, A, R(69) );
 808628a:	9910      	ldr	r1, [sp, #64]	; 0x40
 808628c:	441a      	add	r2, r3
 808628e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
 8086290:	eb0e 6ef7 	add.w	lr, lr, r7, ror #27
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
 8086294:	404b      	eors	r3, r1
 8086296:	9902      	ldr	r1, [sp, #8]
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
 8086298:	ea4f 07b7 	mov.w	r7, r7, ror #2
    P( B, C, D, E, A, R(69) );
 808629c:	404b      	eors	r3, r1
 808629e:	406b      	eors	r3, r5
 80862a0:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80862a4:	930d      	str	r3, [sp, #52]	; 0x34
 80862a6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80862a8:	ea8c 0307 	eor.w	r3, ip, r7
 80862ac:	1988      	adds	r0, r1, r6
 80862ae:	ea83 030e 	eor.w	r3, r3, lr
 80862b2:	4440      	add	r0, r8
    P( A, B, C, D, E, R(70) );
 80862b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80862b6:	4418      	add	r0, r3
 80862b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
 80862ba:	eb02 62fe 	add.w	r2, r2, lr, ror #27
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
 80862be:	ea83 0801 	eor.w	r8, r3, r1
 80862c2:	9b03      	ldr	r3, [sp, #12]
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
 80862c4:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( A, B, C, D, E, R(70) );
 80862c8:	ea88 0803 	eor.w	r8, r8, r3
 80862cc:	ea88 0809 	eor.w	r8, r8, r9
 80862d0:	ea4f 78f8 	mov.w	r8, r8, ror #31
 80862d4:	ea87 030e 	eor.w	r3, r7, lr
 80862d8:	eb08 0106 	add.w	r1, r8, r6
 80862dc:	4053      	eors	r3, r2
 80862de:	4461      	add	r1, ip
 80862e0:	4419      	add	r1, r3
    P( E, A, B, C, D, R(71) );
 80862e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
 80862e4:	eb00 60f2 	add.w	r0, r0, r2, ror #27
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
 80862e8:	ea83 0c0b 	eor.w	ip, r3, fp
 80862ec:	9b04      	ldr	r3, [sp, #16]
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
 80862ee:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(71) );
 80862f2:	ea8c 0c03 	eor.w	ip, ip, r3
 80862f6:	9b08      	ldr	r3, [sp, #32]
 80862f8:	ea8e 0402 	eor.w	r4, lr, r2
 80862fc:	ea8c 0c03 	eor.w	ip, ip, r3
 8086300:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 8086304:	eb0c 0306 	add.w	r3, ip, r6
 8086308:	4044      	eors	r4, r0
 808630a:	443b      	add	r3, r7
 808630c:	4423      	add	r3, r4
    P( D, E, A, B, C, R(72) );
 808630e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8086310:	9c09      	ldr	r4, [sp, #36]	; 0x24
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
 8086312:	eb01 61f0 	add.w	r1, r1, r0, ror #27
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
 8086316:	4067      	eors	r7, r4
 8086318:	9c06      	ldr	r4, [sp, #24]
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
 808631a:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(72) );
 808631e:	4067      	eors	r7, r4
 8086320:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8086322:	ea82 0a00 	eor.w	sl, r2, r0
 8086326:	4067      	eors	r7, r4
 8086328:	ea4f 74f7 	mov.w	r4, r7, ror #31
    P( C, D, E, A, B, R(73) );
 808632c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
 808632e:	9409      	str	r4, [sp, #36]	; 0x24
 8086330:	4434      	add	r4, r6
 8086332:	4474      	add	r4, lr
    P( C, D, E, A, B, R(73) );
 8086334:	ea8b 0e07 	eor.w	lr, fp, r7
 8086338:	9f07      	ldr	r7, [sp, #28]
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
 808633a:	eb03 63f1 	add.w	r3, r3, r1, ror #27
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
 808633e:	ea8e 0e07 	eor.w	lr, lr, r7
 8086342:	ea8e 0e08 	eor.w	lr, lr, r8
 8086346:	ea8a 0a01 	eor.w	sl, sl, r1
 808634a:	ea4f 7efe 	mov.w	lr, lr, ror #31
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
 808634e:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 8086352:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8086354:	eb0e 0b06 	add.w	fp, lr, r6
 8086358:	4454      	add	r4, sl
 808635a:	ea80 0a01 	eor.w	sl, r0, r1
 808635e:	ea8a 0a03 	eor.w	sl, sl, r3
 8086362:	445a      	add	r2, fp
 8086364:	4452      	add	r2, sl
 8086366:	46ba      	mov	sl, r7
 8086368:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
 808636a:	eb04 64f3 	add.w	r4, r4, r3, ror #27
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 808636e:	ea8a 0a07 	eor.w	sl, sl, r7
 8086372:	ea8a 0505 	eor.w	r5, sl, r5
 8086376:	ea85 050c 	eor.w	r5, r5, ip
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
 808637a:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( B, C, D, E, A, R(74) );
 808637e:	ea4f 75f5 	mov.w	r5, r5, ror #31
 8086382:	eb05 0b06 	add.w	fp, r5, r6
 8086386:	ea81 0a03 	eor.w	sl, r1, r3
 808638a:	4458      	add	r0, fp
 808638c:	ea8a 0a04 	eor.w	sl, sl, r4
    P( A, B, C, D, E, R(75) );
 8086390:	9f02      	ldr	r7, [sp, #8]
 8086392:	4482      	add	sl, r0
 8086394:	980b      	ldr	r0, [sp, #44]	; 0x2c
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
 8086396:	eb02 62f4 	add.w	r2, r2, r4, ror #27
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
 808639a:	4078      	eors	r0, r7
 808639c:	ea80 0909 	eor.w	r9, r0, r9
 80863a0:	9809      	ldr	r0, [sp, #36]	; 0x24
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 80863a2:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( A, B, C, D, E, R(75) );
 80863a6:	ea89 0700 	eor.w	r7, r9, r0
 80863aa:	ea4f 77f7 	mov.w	r7, r7, ror #31
 80863ae:	eb07 0906 	add.w	r9, r7, r6
 80863b2:	ea83 0004 	eor.w	r0, r3, r4
 80863b6:	4449      	add	r1, r9
 80863b8:	4050      	eors	r0, r2
 80863ba:	4408      	add	r0, r1
    P( E, A, B, C, D, R(76) );
 80863bc:	990c      	ldr	r1, [sp, #48]	; 0x30
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 80863be:	950a      	str	r5, [sp, #40]	; 0x28
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
 80863c0:	460d      	mov	r5, r1
 80863c2:	9903      	ldr	r1, [sp, #12]
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 80863c4:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
 80863c8:	4069      	eors	r1, r5
 80863ca:	9d08      	ldr	r5, [sp, #32]
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
 80863cc:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(76) );
 80863d0:	4069      	eors	r1, r5
 80863d2:	ea81 0e0e 	eor.w	lr, r1, lr
 80863d6:	ea4f 7efe 	mov.w	lr, lr, ror #31
 80863da:	eb0e 0906 	add.w	r9, lr, r6
 80863de:	ea84 0102 	eor.w	r1, r4, r2
 80863e2:	444b      	add	r3, r9
 80863e4:	ea81 010a 	eor.w	r1, r1, sl
 80863e8:	9d04      	ldr	r5, [sp, #16]
 80863ea:	4419      	add	r1, r3
 80863ec:	9b02      	ldr	r3, [sp, #8]
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
 80863ee:	eb00 60fa 	add.w	r0, r0, sl, ror #27
 80863f2:	406b      	eors	r3, r5
 80863f4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(76) );
 80863f6:	ea4f 0aba 	mov.w	sl, sl, ror #2
 80863fa:	406b      	eors	r3, r5
 80863fc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80863fe:	ea82 090a 	eor.w	r9, r2, sl
 8086402:	406b      	eors	r3, r5
 8086404:	eb06 73f3 	add.w	r3, r6, r3, ror #31
 8086408:	9d06      	ldr	r5, [sp, #24]
 808640a:	441c      	add	r4, r3
 808640c:	9b03      	ldr	r3, [sp, #12]
 808640e:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 8086412:	406b      	eors	r3, r5
 8086414:	ea83 0808 	eor.w	r8, r3, r8
 8086418:	ea89 0900 	eor.w	r9, r9, r0
 808641c:	ea88 0807 	eor.w	r8, r8, r7
    P( D, E, A, B, C, R(77) );
 8086420:	ea4f 00b0 	mov.w	r0, r0, ror #2
 8086424:	eb06 78f8 	add.w	r8, r6, r8, ror #31
 8086428:	ea8a 0500 	eor.w	r5, sl, r0
 808642c:	404d      	eors	r5, r1
 808642e:	4442      	add	r2, r8
 8086430:	442a      	add	r2, r5
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
 8086432:	9b04      	ldr	r3, [sp, #16]
 8086434:	9d07      	ldr	r5, [sp, #28]
 8086436:	444c      	add	r4, r9
 8086438:	406b      	eors	r3, r5
 808643a:	ea83 0c0c 	eor.w	ip, r3, ip
 808643e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
 8086440:	eb04 64f1 	add.w	r4, r4, r1, ror #27
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
 8086444:	441e      	add	r6, r3
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
    P( C, D, E, A, B, R(78) );
 8086446:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
 808644a:	ea8c 0e0e 	eor.w	lr, ip, lr
 808644e:	ea80 0501 	eor.w	r5, r0, r1
 8086452:	eb06 7efe 	add.w	lr, r6, lr, ror #31
 8086456:	4065      	eors	r5, r4
 8086458:	44f2      	add	sl, lr
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
    P( C, D, E, A, B, R(78) );
 808645a:	eb02 62f4 	add.w	r2, r2, r4, ror #27
 808645e:	e001      	b.n	8086464 <mbedtls_internal_sha1_process+0xf34>
 8086460:	ca62c1d6 	.word	0xca62c1d6
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
 8086464:	eb0a 0305 	add.w	r3, sl, r5
 8086468:	9d01      	ldr	r5, [sp, #4]
 808646a:	eb03 63f2 	add.w	r3, r3, r2, ror #27
 808646e:	60ab      	str	r3, [r5, #8]
    ctx->state[1] += B;
 8086470:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8086472:	441a      	add	r2, r3
    ctx->state[2] += C;
 8086474:	9b05      	ldr	r3, [sp, #20]

#undef K
#undef F

    ctx->state[0] += A;
    ctx->state[1] += B;
 8086476:	60ea      	str	r2, [r5, #12]
    ctx->state[2] += C;
 8086478:	eb03 04b4 	add.w	r4, r3, r4, ror #2
    ctx->state[3] += D;
 808647c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
#undef K
#undef F

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
 808647e:	612c      	str	r4, [r5, #16]
    ctx->state[3] += D;
 8086480:	4419      	add	r1, r3
    ctx->state[4] += E;
 8086482:	9b15      	ldr	r3, [sp, #84]	; 0x54
#undef F

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
 8086484:	6169      	str	r1, [r5, #20]
    ctx->state[4] += E;
 8086486:	4418      	add	r0, r3
 8086488:	61a8      	str	r0, [r5, #24]

    return( 0 );
}
 808648a:	2000      	movs	r0, #0
 808648c:	b017      	add	sp, #92	; 0x5c
 808648e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8086492:	bf00      	nop

08086494 <mbedtls_sha1_update_ret>:
 * SHA-1 process buffer
 */
int mbedtls_sha1_update_ret( mbedtls_sha1_context *ctx,
                             const unsigned char *input,
                             size_t ilen )
{
 8086494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8086498:	4604      	mov	r4, r0
 808649a:	460e      	mov	r6, r1
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
 808649c:	4615      	mov	r5, r2
 808649e:	b382      	cbz	r2, 8086502 <mbedtls_sha1_update_ret+0x6e>
        return( 0 );

    left = ctx->total[0] & 0x3F;
 80864a0:	6803      	ldr	r3, [r0, #0]
 80864a2:	f003 003f 	and.w	r0, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 80864a6:	4413      	add	r3, r2
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
 80864a8:	429a      	cmp	r2, r3
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 80864aa:	6023      	str	r3, [r4, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
 80864ac:	bf82      	ittt	hi
 80864ae:	6863      	ldrhi	r3, [r4, #4]
 80864b0:	3301      	addhi	r3, #1
 80864b2:	6063      	strhi	r3, [r4, #4]

    if( left && ilen >= fill )
 80864b4:	b180      	cbz	r0, 80864d8 <mbedtls_sha1_update_ret+0x44>

    if( ilen == 0 )
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
 80864b6:	f1c0 0740 	rsb	r7, r0, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
 80864ba:	42ba      	cmp	r2, r7
 80864bc:	d31b      	bcc.n	80864f6 <mbedtls_sha1_update_ret+0x62>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 80864be:	f104 081c 	add.w	r8, r4, #28
 80864c2:	463a      	mov	r2, r7
 80864c4:	4440      	add	r0, r8
 80864c6:	f00d fb5a 	bl	8093b7e <memcpy>

        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
 80864ca:	4641      	mov	r1, r8
 80864cc:	4620      	mov	r0, r4
 80864ce:	f7ff f82f 	bl	8085530 <mbedtls_internal_sha1_process>
 80864d2:	b9b8      	cbnz	r0, 8086504 <mbedtls_sha1_update_ret+0x70>
            return( ret );

        input += fill;
 80864d4:	443e      	add	r6, r7
        ilen  -= fill;
 80864d6:	1bed      	subs	r5, r5, r7
 * SHA-1 process buffer
 */
int mbedtls_sha1_update_ret( mbedtls_sha1_context *ctx,
                             const unsigned char *input,
                             size_t ilen )
{
 80864d8:	462f      	mov	r7, r5
 80864da:	1be9      	subs	r1, r5, r7
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
 80864dc:	2f3f      	cmp	r7, #63	; 0x3f
 80864de:	4431      	add	r1, r6
 80864e0:	d905      	bls.n	80864ee <mbedtls_sha1_update_ret+0x5a>
    {
        if( ( ret = mbedtls_internal_sha1_process( ctx, input ) ) != 0 )
 80864e2:	4620      	mov	r0, r4
 80864e4:	f7ff f824 	bl	8085530 <mbedtls_internal_sha1_process>
 80864e8:	b960      	cbnz	r0, 8086504 <mbedtls_sha1_update_ret+0x70>
            return( ret );

        input += 64;
        ilen  -= 64;
 80864ea:	3f40      	subs	r7, #64	; 0x40
 80864ec:	e7f5      	b.n	80864da <mbedtls_sha1_update_ret+0x46>
    }

    if( ilen > 0 )
 80864ee:	b147      	cbz	r7, 8086502 <mbedtls_sha1_update_ret+0x6e>
 80864f0:	463d      	mov	r5, r7
 80864f2:	460e      	mov	r6, r1
 80864f4:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 80864f6:	341c      	adds	r4, #28
 80864f8:	462a      	mov	r2, r5
 80864fa:	4631      	mov	r1, r6
 80864fc:	4420      	add	r0, r4
 80864fe:	f00d fb3e 	bl	8093b7e <memcpy>

    return( 0 );
 8086502:	2000      	movs	r0, #0
}
 8086504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08086508 <mbedtls_sha1_finish_ret>:
/*
 * SHA-1 final digest
 */
int mbedtls_sha1_finish_ret( mbedtls_sha1_context *ctx,
                             unsigned char output[20] )
{
 8086508:	b570      	push	{r4, r5, r6, lr}
 808650a:	4604      	mov	r4, r0
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 808650c:	6803      	ldr	r3, [r0, #0]

    ctx->buffer[used++] = 0x80;
 808650e:	2280      	movs	r2, #128	; 0x80
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 8086510:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
 8086514:	1c58      	adds	r0, r3, #1

    if( used <= 56 )
 8086516:	2838      	cmp	r0, #56	; 0x38
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 8086518:	4423      	add	r3, r4
/*
 * SHA-1 final digest
 */
int mbedtls_sha1_finish_ret( mbedtls_sha1_context *ctx,
                             unsigned char output[20] )
{
 808651a:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 808651c:	771a      	strb	r2, [r3, #28]
 808651e:	f104 061c 	add.w	r6, r4, #28

    if( used <= 56 )
 8086522:	d804      	bhi.n	808652e <mbedtls_sha1_finish_ret+0x26>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 8086524:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 8086528:	2100      	movs	r1, #0
 808652a:	4430      	add	r0, r6
 808652c:	e00e      	b.n	808654c <mbedtls_sha1_finish_ret+0x44>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 808652e:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 8086532:	2100      	movs	r1, #0
 8086534:	4430      	add	r0, r6
 8086536:	f00d fb48 	bl	8093bca <memset>

        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
 808653a:	4631      	mov	r1, r6
 808653c:	4620      	mov	r0, r4
 808653e:	f7fe fff7 	bl	8085530 <mbedtls_internal_sha1_process>
 8086542:	2800      	cmp	r0, #0
 8086544:	d153      	bne.n	80865ee <mbedtls_sha1_finish_ret+0xe6>
            return( ret );

        memset( ctx->buffer, 0, 56 );
 8086546:	4601      	mov	r1, r0
 8086548:	4630      	mov	r0, r6
 808654a:	2238      	movs	r2, #56	; 0x38
 808654c:	f00d fb3d 	bl	8093bca <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 8086550:	6823      	ldr	r3, [r4, #0]
         | ( ctx->total[1] <<  3 );
 8086552:	6861      	ldr	r1, [r4, #4]
 8086554:	0f5a      	lsrs	r2, r3, #29
 8086556:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 808655a:	0e11      	lsrs	r1, r2, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 808655c:	00db      	lsls	r3, r3, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 808655e:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
 8086562:	0c11      	lsrs	r1, r2, #16
 8086564:	f884 1055 	strb.w	r1, [r4, #85]	; 0x55
 8086568:	f884 2057 	strb.w	r2, [r4, #87]	; 0x57
 808656c:	0a11      	lsrs	r1, r2, #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 808656e:	0e1a      	lsrs	r2, r3, #24
 8086570:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 8086574:	0c1a      	lsrs	r2, r3, #16
 8086576:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 808657a:	0a1a      	lsrs	r2, r3, #8
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 808657c:	f884 1056 	strb.w	r1, [r4, #86]	; 0x56
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 8086580:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a
 8086584:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b

    if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
 8086588:	4631      	mov	r1, r6
 808658a:	4620      	mov	r0, r4
 808658c:	f7fe ffd0 	bl	8085530 <mbedtls_internal_sha1_process>
 8086590:	2800      	cmp	r0, #0
 8086592:	d12c      	bne.n	80865ee <mbedtls_sha1_finish_ret+0xe6>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 8086594:	7ae3      	ldrb	r3, [r4, #11]
 8086596:	702b      	strb	r3, [r5, #0]
 8086598:	8963      	ldrh	r3, [r4, #10]
 808659a:	706b      	strb	r3, [r5, #1]
 808659c:	68a3      	ldr	r3, [r4, #8]
 808659e:	0a1b      	lsrs	r3, r3, #8
 80865a0:	70ab      	strb	r3, [r5, #2]
 80865a2:	68a3      	ldr	r3, [r4, #8]
 80865a4:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 80865a6:	7be3      	ldrb	r3, [r4, #15]
 80865a8:	712b      	strb	r3, [r5, #4]
 80865aa:	89e3      	ldrh	r3, [r4, #14]
 80865ac:	716b      	strb	r3, [r5, #5]
 80865ae:	68e3      	ldr	r3, [r4, #12]
 80865b0:	0a1b      	lsrs	r3, r3, #8
 80865b2:	71ab      	strb	r3, [r5, #6]
 80865b4:	68e3      	ldr	r3, [r4, #12]
 80865b6:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 80865b8:	7ce3      	ldrb	r3, [r4, #19]
 80865ba:	722b      	strb	r3, [r5, #8]
 80865bc:	8a63      	ldrh	r3, [r4, #18]
 80865be:	726b      	strb	r3, [r5, #9]
 80865c0:	6923      	ldr	r3, [r4, #16]
 80865c2:	0a1b      	lsrs	r3, r3, #8
 80865c4:	72ab      	strb	r3, [r5, #10]
 80865c6:	6923      	ldr	r3, [r4, #16]
 80865c8:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 80865ca:	7de3      	ldrb	r3, [r4, #23]
 80865cc:	732b      	strb	r3, [r5, #12]
 80865ce:	8ae3      	ldrh	r3, [r4, #22]
 80865d0:	736b      	strb	r3, [r5, #13]
 80865d2:	6963      	ldr	r3, [r4, #20]
 80865d4:	0a1b      	lsrs	r3, r3, #8
 80865d6:	73ab      	strb	r3, [r5, #14]
 80865d8:	6963      	ldr	r3, [r4, #20]
 80865da:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 80865dc:	7ee3      	ldrb	r3, [r4, #27]
 80865de:	742b      	strb	r3, [r5, #16]
 80865e0:	8b63      	ldrh	r3, [r4, #26]
 80865e2:	746b      	strb	r3, [r5, #17]
 80865e4:	69a3      	ldr	r3, [r4, #24]
 80865e6:	0a1b      	lsrs	r3, r3, #8
 80865e8:	74ab      	strb	r3, [r5, #18]
 80865ea:	69a3      	ldr	r3, [r4, #24]
 80865ec:	74eb      	strb	r3, [r5, #19]

    return( 0 );
}
 80865ee:	bd70      	pop	{r4, r5, r6, pc}

080865f0 <mbedtls_sha1_ret>:
 * output = SHA-1( input buffer )
 */
int mbedtls_sha1_ret( const unsigned char *input,
                      size_t ilen,
                      unsigned char output[20] )
{
 80865f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80865f2:	b099      	sub	sp, #100	; 0x64
 80865f4:	4606      	mov	r6, r0
    int ret;
    mbedtls_sha1_context ctx;

    mbedtls_sha1_init( &ctx );
 80865f6:	a801      	add	r0, sp, #4
 * output = SHA-1( input buffer )
 */
int mbedtls_sha1_ret( const unsigned char *input,
                      size_t ilen,
                      unsigned char output[20] )
{
 80865f8:	460f      	mov	r7, r1
 80865fa:	4615      	mov	r5, r2
    int ret;
    mbedtls_sha1_context ctx;

    mbedtls_sha1_init( &ctx );
 80865fc:	f7fe ff6a 	bl	80854d4 <mbedtls_sha1_init>

    if( ( ret = mbedtls_sha1_starts_ret( &ctx ) ) != 0 )
 8086600:	a801      	add	r0, sp, #4
 8086602:	f7fe ff7b 	bl	80854fc <mbedtls_sha1_starts_ret>
 8086606:	4604      	mov	r4, r0
 8086608:	b958      	cbnz	r0, 8086622 <mbedtls_sha1_ret+0x32>
        goto exit;

    if( ( ret = mbedtls_sha1_update_ret( &ctx, input, ilen ) ) != 0 )
 808660a:	463a      	mov	r2, r7
 808660c:	4631      	mov	r1, r6
 808660e:	a801      	add	r0, sp, #4
 8086610:	f7ff ff40 	bl	8086494 <mbedtls_sha1_update_ret>
 8086614:	4604      	mov	r4, r0
 8086616:	b920      	cbnz	r0, 8086622 <mbedtls_sha1_ret+0x32>
        goto exit;

    if( ( ret = mbedtls_sha1_finish_ret( &ctx, output ) ) != 0 )
 8086618:	4629      	mov	r1, r5
 808661a:	a801      	add	r0, sp, #4
 808661c:	f7ff ff74 	bl	8086508 <mbedtls_sha1_finish_ret>
 8086620:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_sha1_free( &ctx );
 8086622:	a801      	add	r0, sp, #4
 8086624:	f7fe ff5a 	bl	80854dc <mbedtls_sha1_free>

    return( ret );
}
 8086628:	4620      	mov	r0, r4
 808662a:	b019      	add	sp, #100	; 0x64
 808662c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808662e <mbedtls_timing_get_timer.part.0>:
    CloseHandle( CreateThread( NULL, 0, TimerProc, NULL, 0, &ThreadId ) );
}

#else /* _WIN32 && !EFIX64 && !EFI32 */

unsigned long mbedtls_timing_get_timer( struct mbedtls_timing_hr_time *val, int reset )
 808662e:	b513      	push	{r0, r1, r4, lr}
 8086630:	4604      	mov	r4, r0
    }
    else
    {
        unsigned long delta;
        struct timeval now;
        gettimeofday( &now, NULL );
 8086632:	2100      	movs	r1, #0
 8086634:	4668      	mov	r0, sp
 8086636:	f00d fb0b 	bl	8093c50 <gettimeofday>
        delta = ( now.tv_sec  - t->start.tv_sec  ) * 1000ul
              + ( now.tv_usec - t->start.tv_usec ) / 1000;
 808663a:	9b00      	ldr	r3, [sp, #0]
 808663c:	6822      	ldr	r2, [r4, #0]
 808663e:	6861      	ldr	r1, [r4, #4]
 8086640:	1a9a      	subs	r2, r3, r2
 8086642:	9b01      	ldr	r3, [sp, #4]
 8086644:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8086648:	1a5b      	subs	r3, r3, r1
 808664a:	fb93 f3f0 	sdiv	r3, r3, r0
        return( delta );
    }
}
 808664e:	fb00 3002 	mla	r0, r0, r2, r3
 8086652:	b002      	add	sp, #8
 8086654:	bd10      	pop	{r4, pc}

08086656 <_gettimeofday>:
#define HAVE_HARDCLOCK

#include "rtc_hal.h"
#include "timer_hal.h"
extern "C" int _gettimeofday( struct timeval *tv, void *tzvp )
{
 8086656:	b538      	push	{r3, r4, r5, lr}
 8086658:	4604      	mov	r4, r0
    uint32_t t = HAL_Timer_Milliseconds();  // get uptime
 808665a:	f00a fda7 	bl	80911ac <HAL_Timer_Get_Milli_Seconds>
 808665e:	4605      	mov	r5, r0
    tv->tv_sec = HAL_RTC_Get_UnixTime();    // get rtc time before Particle.syncTime()
 8086660:	f00a fdac 	bl	80911bc <HAL_RTC_Get_UnixTime>
    tv->tv_usec = ( t % 1000 )*1000;        // get remaining microseconds
 8086664:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
#include "rtc_hal.h"
#include "timer_hal.h"
extern "C" int _gettimeofday( struct timeval *tv, void *tzvp )
{
    uint32_t t = HAL_Timer_Milliseconds();  // get uptime
    tv->tv_sec = HAL_RTC_Get_UnixTime();    // get rtc time before Particle.syncTime()
 8086668:	6020      	str	r0, [r4, #0]
    tv->tv_usec = ( t % 1000 )*1000;        // get remaining microseconds
 808666a:	fbb5 f0f3 	udiv	r0, r5, r3
 808666e:	fb03 5010 	mls	r0, r3, r0, r5
 8086672:	4343      	muls	r3, r0
 8086674:	6063      	str	r3, [r4, #4]
    return 0;
} // end _gettimeofday()
 8086676:	2000      	movs	r0, #0
 8086678:	bd38      	pop	{r3, r4, r5, pc}
	...

0808667c <mbedtls_timing_hardclock>:

static int hardclock_init = 0;
static struct timeval tv_init;

unsigned long mbedtls_timing_hardclock( void )
{
 808667c:	b513      	push	{r0, r1, r4, lr}
    struct timeval tv_cur;

    if( hardclock_init == 0 )
 808667e:	4c0c      	ldr	r4, [pc, #48]	; (80866b0 <mbedtls_timing_hardclock+0x34>)
 8086680:	6821      	ldr	r1, [r4, #0]
 8086682:	b921      	cbnz	r1, 808668e <mbedtls_timing_hardclock+0x12>
    {
        gettimeofday( &tv_init, NULL );
 8086684:	480b      	ldr	r0, [pc, #44]	; (80866b4 <mbedtls_timing_hardclock+0x38>)
 8086686:	f00d fae3 	bl	8093c50 <gettimeofday>
        hardclock_init = 1;
 808668a:	2301      	movs	r3, #1
 808668c:	6023      	str	r3, [r4, #0]
    }

    gettimeofday( &tv_cur, NULL );
 808668e:	2100      	movs	r1, #0
 8086690:	4668      	mov	r0, sp
 8086692:	f00d fadd 	bl	8093c50 <gettimeofday>
    return( ( tv_cur.tv_sec  - tv_init.tv_sec  ) * 1000000
 8086696:	4907      	ldr	r1, [pc, #28]	; (80866b4 <mbedtls_timing_hardclock+0x38>)
          + ( tv_cur.tv_usec - tv_init.tv_usec ) );
 8086698:	9b00      	ldr	r3, [sp, #0]
 808669a:	680a      	ldr	r2, [r1, #0]
 808669c:	6848      	ldr	r0, [r1, #4]
 808669e:	1a9a      	subs	r2, r3, r2
 80866a0:	9b01      	ldr	r3, [sp, #4]
 80866a2:	1a1b      	subs	r3, r3, r0
}
 80866a4:	4804      	ldr	r0, [pc, #16]	; (80866b8 <mbedtls_timing_hardclock+0x3c>)
 80866a6:	fb00 3002 	mla	r0, r0, r2, r3
 80866aa:	b002      	add	sp, #8
 80866ac:	bd10      	pop	{r4, pc}
 80866ae:	bf00      	nop
 80866b0:	200019d0 	.word	0x200019d0
 80866b4:	200019c8 	.word	0x200019c8
 80866b8:	000f4240 	.word	0x000f4240

080866bc <mbedtls_timing_set_delay>:
 */
void mbedtls_timing_set_delay( void *data, uint32_t int_ms, uint32_t fin_ms )
{
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;

    ctx->int_ms = int_ms;
 80866bc:	6201      	str	r1, [r0, #32]
    ctx->fin_ms = fin_ms;
 80866be:	6242      	str	r2, [r0, #36]	; 0x24

    if( fin_ms != 0 )
 80866c0:	b112      	cbz	r2, 80866c8 <mbedtls_timing_set_delay+0xc>
{
    struct _hr_time *t = (struct _hr_time *) val;

    if( reset )
    {
        gettimeofday( &t->start, NULL );
 80866c2:	2100      	movs	r1, #0
 80866c4:	f00d bac4 	b.w	8093c50 <gettimeofday>
 80866c8:	4770      	bx	lr

080866ca <mbedtls_timing_get_delay>:

/*
 * Get number of delays expired
 */
int mbedtls_timing_get_delay( void *data )
{
 80866ca:	b510      	push	{r4, lr}
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;
    unsigned long elapsed_ms;

    if( ctx->fin_ms == 0 )
 80866cc:	6a43      	ldr	r3, [r0, #36]	; 0x24

/*
 * Get number of delays expired
 */
int mbedtls_timing_get_delay( void *data )
{
 80866ce:	4604      	mov	r4, r0
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;
    unsigned long elapsed_ms;

    if( ctx->fin_ms == 0 )
 80866d0:	b153      	cbz	r3, 80866e8 <mbedtls_timing_get_delay+0x1e>
 80866d2:	f7ff ffac 	bl	808662e <mbedtls_timing_get_timer.part.0>
        return( -1 );

    elapsed_ms = mbedtls_timing_get_timer( &ctx->timer, 0 );

    if( elapsed_ms >= ctx->fin_ms )
 80866d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80866d8:	4283      	cmp	r3, r0
 80866da:	d908      	bls.n	80866ee <mbedtls_timing_get_delay+0x24>
{
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;
    unsigned long elapsed_ms;

    if( ctx->fin_ms == 0 )
        return( -1 );
 80866dc:	6a23      	ldr	r3, [r4, #32]
 80866de:	4283      	cmp	r3, r0
 80866e0:	bf8c      	ite	hi
 80866e2:	2000      	movhi	r0, #0
 80866e4:	2001      	movls	r0, #1
 80866e6:	bd10      	pop	{r4, pc}
 80866e8:	f04f 30ff 	mov.w	r0, #4294967295
 80866ec:	bd10      	pop	{r4, pc}

    elapsed_ms = mbedtls_timing_get_timer( &ctx->timer, 0 );

    if( elapsed_ms >= ctx->fin_ms )
        return( 2 );
 80866ee:	2002      	movs	r0, #2

    if( elapsed_ms >= ctx->int_ms )
        return( 1 );

    return( 0 );
}
 80866f0:	bd10      	pop	{r4, pc}

080866f2 <_ZL12gcm_ctx_freePv>:

    return( ctx );
}

static void gcm_ctx_free( void *ctx )
{
 80866f2:	b510      	push	{r4, lr}
 80866f4:	4604      	mov	r4, r0
    mbedtls_gcm_free( (mbedtls_gcm_context *)ctx );
 80866f6:	f001 faed 	bl	8087cd4 <mbedtls_gcm_free>
    mbedtls_free( ctx );
 80866fa:	4620      	mov	r0, r4
}
 80866fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void gcm_ctx_free( void *ctx )
{
    mbedtls_gcm_free( (mbedtls_gcm_context *)ctx );
    mbedtls_free( ctx );
 8086700:	f00a bf1c 	b.w	809153c <free>

08086704 <_ZL13gcm_ctx_allocv>:
#endif

#if defined(MBEDTLS_GCM_C)
/* shared by all GCM ciphers */
static void *gcm_ctx_alloc( void )
{
 8086704:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );
 8086706:	f44f 71c4 	mov.w	r1, #392	; 0x188
 808670a:	2001      	movs	r0, #1
 808670c:	f00d fa12 	bl	8093b34 <calloc>

    if( ctx != NULL )
 8086710:	4604      	mov	r4, r0
 8086712:	b108      	cbz	r0, 8086718 <_ZL13gcm_ctx_allocv+0x14>
        mbedtls_gcm_init( (mbedtls_gcm_context *) ctx );
 8086714:	f001 f84c 	bl	80877b0 <mbedtls_gcm_init>

    return( ctx );
}
 8086718:	4620      	mov	r0, r4
 808671a:	bd10      	pop	{r4, pc}

0808671c <_ZL19gcm_aes_setkey_wrapPvPKhj>:
#if defined(MBEDTLS_GCM_C)
static int gcm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
                     key, key_bitlen );
 808671c:	4613      	mov	r3, r2
 808671e:	460a      	mov	r2, r1
 8086720:	2102      	movs	r1, #2
 8086722:	f001 b84a 	b.w	80877ba <mbedtls_gcm_setkey>

08086726 <_ZL12aes_ctx_freePv>:

    return( aes );
}

static void aes_ctx_free( void *ctx )
{
 8086726:	b510      	push	{r4, lr}
 8086728:	4604      	mov	r4, r0
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
 808672a:	f006 fca2 	bl	808d072 <mbedtls_aes_free>
    mbedtls_free( ctx );
 808672e:	4620      	mov	r0, r4
}
 8086730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void aes_ctx_free( void *ctx )
{
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
    mbedtls_free( ctx );
 8086734:	f00a bf02 	b.w	809153c <free>

08086738 <_ZL13aes_ctx_allocv>:
{
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
}

static void * aes_ctx_alloc( void )
{
 8086738:	b510      	push	{r4, lr}
    mbedtls_aes_context *aes = (mbedtls_aes_context *)mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
 808673a:	f44f 718c 	mov.w	r1, #280	; 0x118
 808673e:	2001      	movs	r0, #1
 8086740:	f00d f9f8 	bl	8093b34 <calloc>

    if( aes == NULL )
 8086744:	4604      	mov	r4, r0
 8086746:	b108      	cbz	r0, 808674c <_ZL13aes_ctx_allocv+0x14>
        return( NULL );

    mbedtls_aes_init( aes );
 8086748:	f006 fc8e 	bl	808d068 <mbedtls_aes_init>

    return( aes );
}
 808674c:	4620      	mov	r0, r4
 808674e:	bd10      	pop	{r4, pc}

08086750 <_ZL19aes_setkey_dec_wrapPvPKhj>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

static int aes_setkey_dec_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
 8086750:	f006 bd96 	b.w	808d280 <mbedtls_aes_setkey_dec>

08086754 <_ZL19aes_setkey_enc_wrapPvPKhj>:
}

static int aes_setkey_enc_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
 8086754:	f006 bc98 	b.w	808d088 <mbedtls_aes_setkey_enc>

08086758 <_ZL18aes_crypt_cbc_wrapPv19mbedtls_operation_tjPhPKhS1_>:
}

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int aes_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation, size_t length,
        unsigned char *iv, const unsigned char *input, unsigned char *output )
{
 8086758:	b410      	push	{r4}
    return mbedtls_aes_crypt_cbc( (mbedtls_aes_context *) ctx, operation, length, iv, input,
                          output );
}
 808675a:	bc10      	pop	{r4}
#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int aes_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation, size_t length,
        unsigned char *iv, const unsigned char *input, unsigned char *output )
{
    return mbedtls_aes_crypt_cbc( (mbedtls_aes_context *) ctx, operation, length, iv, input,
                          output );
 808675c:	f007 b9a6 	b.w	808daac <mbedtls_aes_crypt_cbc>

08086760 <_ZL18aes_crypt_ecb_wrapPv19mbedtls_operation_tPKhPh>:
#if defined(MBEDTLS_AES_C)

static int aes_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        const unsigned char *input, unsigned char *output )
{
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
 8086760:	f007 b998 	b.w	808da94 <mbedtls_aes_crypt_ecb>

08086764 <_ZL10rsa_can_do17mbedtls_pk_type_t>:
#endif

#if defined(MBEDTLS_RSA_C)
static int rsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_RSA ||
 8086764:	2801      	cmp	r0, #1
 8086766:	d002      	beq.n	808676e <_ZL10rsa_can_do17mbedtls_pk_type_t+0xa>
 8086768:	1f83      	subs	r3, r0, #6
 808676a:	4258      	negs	r0, r3
 808676c:	4158      	adcs	r0, r3
            type == MBEDTLS_PK_RSASSA_PSS );
}
 808676e:	4770      	bx	lr

08086770 <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item>:
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
 8086770:	2301      	movs	r3, #1
    items->name = "rsa.N";
 8086772:	4a06      	ldr	r2, [pc, #24]	; (808678c <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item+0x1c>)
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
 8086774:	700b      	strb	r3, [r1, #0]
    items->name = "rsa.N";
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
 8086776:	730b      	strb	r3, [r1, #12]
    items->name = "rsa.E";
 8086778:	4b05      	ldr	r3, [pc, #20]	; (8086790 <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item+0x20>)
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.N";
 808677a:	604a      	str	r2, [r1, #4]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 808677c:	f100 0208 	add.w	r2, r0, #8

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.E";
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 8086780:	3014      	adds	r0, #20

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.N";
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 8086782:	608a      	str	r2, [r1, #8]

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.E";
 8086784:	610b      	str	r3, [r1, #16]
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 8086786:	6148      	str	r0, [r1, #20]
 8086788:	4770      	bx	lr
 808678a:	bf00      	nop
 808678c:	08094f5c 	.word	0x08094f5c
 8086790:	08094f62 	.word	0x08094f62

08086794 <_ZL13rsa_free_wrapPv>:

    return( ctx );
}

static void rsa_free_wrap( void *ctx )
{
 8086794:	b510      	push	{r4, lr}
 8086796:	4604      	mov	r4, r0
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
 8086798:	f7fe fd50 	bl	808523c <mbedtls_rsa_free>
    mbedtls_free( ctx );
 808679c:	4620      	mov	r0, r4
}
 808679e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void rsa_free_wrap( void *ctx )
{
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
    mbedtls_free( ctx );
 80867a2:	f00a becb 	b.w	809153c <free>

080867a6 <_ZL14rsa_alloc_wrapv>:
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
                                (const mbedtls_rsa_context *) prv ) );
}

static void *rsa_alloc_wrap( void )
{
 80867a6:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_rsa_context ) );
 80867a8:	21ac      	movs	r1, #172	; 0xac
 80867aa:	2001      	movs	r0, #1
 80867ac:	f00d f9c2 	bl	8093b34 <calloc>

    if( ctx != NULL )
 80867b0:	4604      	mov	r4, r0
 80867b2:	b118      	cbz	r0, 80867bc <_ZL14rsa_alloc_wrapv+0x16>
        mbedtls_rsa_init( (mbedtls_rsa_context *) ctx, 0, 0 );
 80867b4:	2200      	movs	r2, #0
 80867b6:	4611      	mov	r1, r2
 80867b8:	f7fd fd52 	bl	8084260 <mbedtls_rsa_init>

    return( ctx );
}
 80867bc:	4620      	mov	r0, r4
 80867be:	bd10      	pop	{r4, pc}

080867c0 <_ZL19rsa_check_pair_wrapPKvS0_>:
}

static int rsa_check_pair_wrap( const void *pub, const void *prv )
{
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
                                (const mbedtls_rsa_context *) prv ) );
 80867c0:	f7fd bdb4 	b.w	808432c <mbedtls_rsa_check_pub_priv>

080867c4 <_ZL14rsa_get_bitlenPKv>:
    return( type == MBEDTLS_PK_RSA ||
            type == MBEDTLS_PK_RSASSA_PSS );
}

static size_t rsa_get_bitlen( const void *ctx )
{
 80867c4:	b508      	push	{r3, lr}
    const mbedtls_rsa_context * rsa = (const mbedtls_rsa_context *) ctx;
    return( 8 * mbedtls_rsa_get_len( rsa ) );
 80867c6:	f7fd fd58 	bl	808427a <mbedtls_rsa_get_len>
}
 80867ca:	00c0      	lsls	r0, r0, #3
 80867cc:	bd08      	pop	{r3, pc}
	...

080867d0 <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_>:

static int rsa_encrypt_wrap( void *ctx,
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 80867d0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80867d4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80867d8:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80867dc:	4604      	mov	r4, r0
 80867de:	4688      	mov	r8, r1
 80867e0:	4617      	mov	r7, r2
 80867e2:	4699      	mov	r9, r3
 80867e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80867e6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    *olen = mbedtls_rsa_get_len( rsa );
 80867e8:	f7fd fd47 	bl	808427a <mbedtls_rsa_get_len>

    if( *olen > osize )
 80867ec:	4550      	cmp	r0, sl
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    *olen = mbedtls_rsa_get_len( rsa );
 80867ee:	f8cb 0000 	str.w	r0, [fp]

    if( *olen > osize )
 80867f2:	d80d      	bhi.n	8086810 <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x40>
        return( MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE );

    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
                                       ilen, input, output ) );
 80867f4:	4632      	mov	r2, r6
 80867f6:	4629      	mov	r1, r5
 80867f8:	4620      	mov	r0, r4
 80867fa:	2300      	movs	r3, #0
 80867fc:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8086800:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8086804:	970a      	str	r7, [sp, #40]	; 0x28
}
 8086806:	b001      	add	sp, #4
 8086808:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    if( *olen > osize )
        return( MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE );

    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
                                       ilen, input, output ) );
 808680c:	f7fe b8aa 	b.w	8084964 <mbedtls_rsa_pkcs1_encrypt>
}
 8086810:	4801      	ldr	r0, [pc, #4]	; (8086818 <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x48>)
 8086812:	b001      	add	sp, #4
 8086814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8086818:	ffffbc00 	.word	0xffffbc00

0808681c <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_>:

static int rsa_decrypt_wrap( void *ctx,
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 808681c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086820:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8086822:	4693      	mov	fp, r2
 8086824:	4604      	mov	r4, r0
 8086826:	4688      	mov	r8, r1
 8086828:	4699      	mov	r9, r3
 808682a:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 808682e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8086830:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;

    if( ilen != mbedtls_rsa_get_len( rsa ) )
 8086832:	f7fd fd22 	bl	808427a <mbedtls_rsa_get_len>
 8086836:	4558      	cmp	r0, fp
 8086838:	d10f      	bne.n	808685a <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x3e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
                MBEDTLS_RSA_PRIVATE, olen, input, output, osize ) );
 808683a:	4632      	mov	r2, r6
 808683c:	4629      	mov	r1, r5
 808683e:	4620      	mov	r0, r4
 8086840:	2301      	movs	r3, #1
 8086842:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8086846:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 808684a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 808684e:	970a      	str	r7, [sp, #40]	; 0x28
}
 8086850:	b001      	add	sp, #4
 8086852:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    if( ilen != mbedtls_rsa_get_len( rsa ) )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
                MBEDTLS_RSA_PRIVATE, olen, input, output, osize ) );
 8086856:	f7fe ba07 	b.w	8084c68 <mbedtls_rsa_pkcs1_decrypt>
}
 808685a:	4802      	ldr	r0, [pc, #8]	; (8086864 <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x48>)
 808685c:	b001      	add	sp, #4
 808685e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8086862:	bf00      	nop
 8086864:	ffffbf80 	.word	0xffffbf80

08086868 <_ZL13rsa_sign_wrapPv17mbedtls_md_type_tPKhjPhPjPFiS_S3_jES_>:

static int rsa_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 8086868:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808686c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8086870:	460f      	mov	r7, r1
 8086872:	4691      	mov	r9, r2
 8086874:	4698      	mov	r8, r3
 8086876:	4604      	mov	r4, r0
 8086878:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 808687c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 808687e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );
 8086880:	f7fd fcfb 	bl	808427a <mbedtls_rsa_get_len>

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
                md_alg, (unsigned int) hash_len, hash, sig ) );
 8086884:	4632      	mov	r2, r6
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );
 8086886:	f8cb 0000 	str.w	r0, [fp]

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
                md_alg, (unsigned int) hash_len, hash, sig ) );
 808688a:	4629      	mov	r1, r5
 808688c:	4620      	mov	r0, r4
 808688e:	2301      	movs	r3, #1
 8086890:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8086894:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8086898:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 808689c:	970a      	str	r7, [sp, #40]	; 0x28
}
 808689e:	b001      	add	sp, #4
 80868a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
                md_alg, (unsigned int) hash_len, hash, sig ) );
 80868a4:	f7fe bb30 	b.w	8084f08 <mbedtls_rsa_pkcs1_sign>

080868a8 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j>:
}

static int rsa_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
 80868a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80868ac:	b085      	sub	sp, #20
 80868ae:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80868b0:	4606      	mov	r6, r0
 80868b2:	460f      	mov	r7, r1
 80868b4:	4691      	mov	r9, r2
 80868b6:	4698      	mov	r8, r3
    int ret;
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
 80868b8:	f7fd fcdf 	bl	808427a <mbedtls_rsa_get_len>
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
 80868bc:	42a0      	cmp	r0, r4
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
    int ret;
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
 80868be:	4605      	mov	r5, r0
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
 80868c0:	d810      	bhi.n	80868e4 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3c>
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );

    if( ( ret = mbedtls_rsa_pkcs1_verify( rsa, NULL, NULL,
 80868c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80868c4:	e88d 0380 	stmia.w	sp, {r7, r8, r9}
 80868c8:	9303      	str	r3, [sp, #12]
 80868ca:	2300      	movs	r3, #0
 80868cc:	461a      	mov	r2, r3
 80868ce:	4619      	mov	r1, r3
 80868d0:	4630      	mov	r0, r6
 80868d2:	f7fe fc91 	bl	80851f8 <mbedtls_rsa_pkcs1_verify>
 80868d6:	b930      	cbnz	r0, 80868e6 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3e>
     * valid signature?" and not just "Does the buffer contain a valid
     * signature?". */
    if( sig_len > rsa_len )
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

    return( 0 );
 80868d8:	f5a0 5064 	sub.w	r0, r0, #14592	; 0x3900
 80868dc:	42a5      	cmp	r5, r4
 80868de:	bf28      	it	cs
 80868e0:	2000      	movcs	r0, #0
 80868e2:	e000      	b.n	80868e6 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3e>
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 80868e4:	4801      	ldr	r0, [pc, #4]	; (80868ec <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x44>)
     * signature?". */
    if( sig_len > rsa_len )
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

    return( 0 );
}
 80868e6:	b005      	add	sp, #20
 80868e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80868ec:	ffffbc80 	.word	0xffffbc80

080868f0 <mbedtls_ssl_ciphersuite_from_id>:
    return( NULL );
}

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;
 80868f0:	4b05      	ldr	r3, [pc, #20]	; (8086908 <mbedtls_ssl_ciphersuite_from_id+0x18>)

    while( cur->id != 0 )
 80868f2:	681a      	ldr	r2, [r3, #0]
 80868f4:	b11a      	cbz	r2, 80868fe <mbedtls_ssl_ciphersuite_from_id+0xe>
    {
        if( cur->id == ciphersuite )
 80868f6:	4282      	cmp	r2, r0
 80868f8:	d003      	beq.n	8086902 <mbedtls_ssl_ciphersuite_from_id+0x12>
            return( cur );

        cur++;
 80868fa:	3320      	adds	r3, #32

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;

    while( cur->id != 0 )
 80868fc:	e7f9      	b.n	80868f2 <mbedtls_ssl_ciphersuite_from_id+0x2>
            return( cur );

        cur++;
    }

    return( NULL );
 80868fe:	4610      	mov	r0, r2
 8086900:	4770      	bx	lr
 8086902:	4618      	mov	r0, r3
}
 8086904:	4770      	bx	lr
 8086906:	bf00      	nop
 8086908:	0809505c 	.word	0x0809505c

0808690c <mbedtls_ssl_list_ciphersuites>:
                            sizeof( ciphersuite_definitions[0]  )
static int supported_ciphersuites[MAX_CIPHERSUITES];
static int supported_init = 0;

const int *mbedtls_ssl_list_ciphersuites( void )
{
 808690c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /*
     * On initial call filter out all ciphersuites not supported by current
     * build based on presence in the ciphersuite_definitions.
     */
    if( supported_init == 0 )
 808690e:	4b0d      	ldr	r3, [pc, #52]	; (8086944 <mbedtls_ssl_list_ciphersuites+0x38>)
 8086910:	681a      	ldr	r2, [r3, #0]
 8086912:	461c      	mov	r4, r3
 8086914:	b9a2      	cbnz	r2, 8086940 <mbedtls_ssl_list_ciphersuites+0x34>
 8086916:	490c      	ldr	r1, [pc, #48]	; (8086948 <mbedtls_ssl_list_ciphersuites+0x3c>)
 8086918:	4e0c      	ldr	r6, [pc, #48]	; (808694c <mbedtls_ssl_list_ciphersuites+0x40>)
    {
        const int *p;
        int *q;

        for( p = ciphersuite_preference, q = supported_ciphersuites;
             *p != 0 && q < supported_ciphersuites + MAX_CIPHERSUITES - 1;
 808691a:	f101 0718 	add.w	r7, r1, #24
 808691e:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8086922:	b14d      	cbz	r5, 8086938 <mbedtls_ssl_list_ciphersuites+0x2c>
 8086924:	42b9      	cmp	r1, r7
 8086926:	d207      	bcs.n	8086938 <mbedtls_ssl_list_ciphersuites+0x2c>
#if defined(MBEDTLS_REMOVE_ARC4_CIPHERSUITES)
            const mbedtls_ssl_ciphersuite_t *cs_info;
            if( ( cs_info = mbedtls_ssl_ciphersuite_from_id( *p ) ) != NULL &&
                cs_info->cipher != MBEDTLS_CIPHER_ARC4_128 )
#else
            if( mbedtls_ssl_ciphersuite_from_id( *p ) != NULL )
 8086928:	4628      	mov	r0, r5
 808692a:	f7ff ffe1 	bl	80868f0 <mbedtls_ssl_ciphersuite_from_id>
 808692e:	2800      	cmp	r0, #0
 8086930:	d0f5      	beq.n	808691e <mbedtls_ssl_list_ciphersuites+0x12>
#endif
                *(q++) = *p;
 8086932:	600d      	str	r5, [r1, #0]
 8086934:	3104      	adds	r1, #4
    if( supported_init == 0 )
    {
        const int *p;
        int *q;

        for( p = ciphersuite_preference, q = supported_ciphersuites;
 8086936:	e7f2      	b.n	808691e <mbedtls_ssl_list_ciphersuites+0x12>
#else
            if( mbedtls_ssl_ciphersuite_from_id( *p ) != NULL )
#endif
                *(q++) = *p;
        }
        *q = 0;
 8086938:	2300      	movs	r3, #0
 808693a:	600b      	str	r3, [r1, #0]

        supported_init = 1;
 808693c:	2301      	movs	r3, #1
 808693e:	6023      	str	r3, [r4, #0]
    }

    return( supported_ciphersuites );
}
 8086940:	4801      	ldr	r0, [pc, #4]	; (8086948 <mbedtls_ssl_list_ciphersuites+0x3c>)
 8086942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8086944:	200019d4 	.word	0x200019d4
 8086948:	200019d8 	.word	0x200019d8
 808694c:	08095138 	.word	0x08095138

08086950 <_ZL14x509_parse_intPPhjPi>:
    }
}

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;
 8086950:	2300      	movs	r3, #0
        cur = cur->next;
    }
}

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
 8086952:	b530      	push	{r4, r5, lr}
    *res = 0;
 8086954:	6013      	str	r3, [r2, #0]
    for( ; n > 0; --n )
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
 8086956:	250a      	movs	r5, #10

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;

    for( ; n > 0; --n )
 8086958:	b189      	cbz	r1, 808697e <_ZL14x509_parse_intPPhjPi+0x2e>
    {
        if( ( **p < '0') || ( **p > '9' ) )
 808695a:	6803      	ldr	r3, [r0, #0]
 808695c:	781b      	ldrb	r3, [r3, #0]
 808695e:	3b30      	subs	r3, #48	; 0x30
 8086960:	2b09      	cmp	r3, #9
 8086962:	d80e      	bhi.n	8086982 <_ZL14x509_parse_intPPhjPi+0x32>
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
 8086964:	6813      	ldr	r3, [r2, #0]

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;

    for( ; n > 0; --n )
 8086966:	3901      	subs	r1, #1
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
 8086968:	436b      	muls	r3, r5
 808696a:	6013      	str	r3, [r2, #0]
        *res += ( *(*p)++ - '0' );
 808696c:	6803      	ldr	r3, [r0, #0]
 808696e:	1c5c      	adds	r4, r3, #1
 8086970:	6004      	str	r4, [r0, #0]
 8086972:	781b      	ldrb	r3, [r3, #0]
 8086974:	6814      	ldr	r4, [r2, #0]
 8086976:	3b30      	subs	r3, #48	; 0x30
 8086978:	4423      	add	r3, r4
 808697a:	6013      	str	r3, [r2, #0]

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;

    for( ; n > 0; --n )
 808697c:	e7ec      	b.n	8086958 <_ZL14x509_parse_intPPhjPi+0x8>

        *res *= 10;
        *res += ( *(*p)++ - '0' );
    }

    return( 0 );
 808697e:	4608      	mov	r0, r1
 8086980:	bd30      	pop	{r4, r5, pc}
    *res = 0;

    for( ; n > 0; --n )
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );
 8086982:	4801      	ldr	r0, [pc, #4]	; (8086988 <_ZL14x509_parse_intPPhjPi+0x38>)
        *res *= 10;
        *res += ( *(*p)++ - '0' );
    }

    return( 0 );
}
 8086984:	bd30      	pop	{r4, r5, pc}
 8086986:	bf00      	nop
 8086988:	ffffdc00 	.word	0xffffdc00

0808698c <mbedtls_x509_get_serial>:
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
 808698c:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( end - *p ) < 1 )
 808698e:	6803      	ldr	r3, [r0, #0]
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
 8086990:	4615      	mov	r5, r2
    int ret;

    if( ( end - *p ) < 1 )
 8086992:	1aca      	subs	r2, r1, r3
 8086994:	2a00      	cmp	r2, #0
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
 8086996:	4604      	mov	r4, r0
    int ret;

    if( ( end - *p ) < 1 )
 8086998:	dd17      	ble.n	80869ca <mbedtls_x509_get_serial+0x3e>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
 808699a:	781a      	ldrb	r2, [r3, #0]
 808699c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80869a0:	2a02      	cmp	r2, #2
 80869a2:	d114      	bne.n	80869ce <mbedtls_x509_get_serial+0x42>
        **p !=   MBEDTLS_ASN1_INTEGER )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    serial->tag = *(*p)++;
 80869a4:	1c5a      	adds	r2, r3, #1
 80869a6:	6002      	str	r2, [r0, #0]
 80869a8:	462a      	mov	r2, r5
 80869aa:	781b      	ldrb	r3, [r3, #0]
 80869ac:	f842 3b04 	str.w	r3, [r2], #4

    if( ( ret = mbedtls_asn1_get_len( p, end, &serial->len ) ) != 0 )
 80869b0:	f7fd f82c 	bl	8083a0c <mbedtls_asn1_get_len>
 80869b4:	b110      	cbz	r0, 80869bc <mbedtls_x509_get_serial+0x30>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL + ret );
 80869b6:	f5a0 500a 	sub.w	r0, r0, #8832	; 0x2280
 80869ba:	bd38      	pop	{r3, r4, r5, pc}

    serial->p = *p;
 80869bc:	6823      	ldr	r3, [r4, #0]
 80869be:	60ab      	str	r3, [r5, #8]
    *p += serial->len;
 80869c0:	6822      	ldr	r2, [r4, #0]
 80869c2:	686b      	ldr	r3, [r5, #4]
 80869c4:	4413      	add	r3, r2
 80869c6:	6023      	str	r3, [r4, #0]

    return( 0 );
 80869c8:	bd38      	pop	{r3, r4, r5, pc}
{
    int ret;

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80869ca:	4802      	ldr	r0, [pc, #8]	; (80869d4 <mbedtls_x509_get_serial+0x48>)
 80869cc:	bd38      	pop	{r3, r4, r5, pc}

    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
        **p !=   MBEDTLS_ASN1_INTEGER )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 80869ce:	4802      	ldr	r0, [pc, #8]	; (80869d8 <mbedtls_x509_get_serial+0x4c>)

    serial->p = *p;
    *p += serial->len;

    return( 0 );
}
 80869d0:	bd38      	pop	{r3, r4, r5, pc}
 80869d2:	bf00      	nop
 80869d4:	ffffdd20 	.word	0xffffdd20
 80869d8:	ffffdd1e 	.word	0xffffdd1e

080869dc <mbedtls_x509_get_alg>:
/*
 * Parse an algorithm identifier with (optional) paramaters
 */
int mbedtls_x509_get_alg( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *alg, mbedtls_x509_buf *params )
{
 80869dc:	b508      	push	{r3, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, params ) ) != 0 )
 80869de:	f7fd f940 	bl	8083c62 <mbedtls_asn1_get_alg>
 80869e2:	b108      	cbz	r0, 80869e8 <mbedtls_x509_get_alg+0xc>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
 80869e4:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300

    return( 0 );
}
 80869e8:	bd08      	pop	{r3, pc}
	...

080869ec <mbedtls_x509_get_name>:
 * same set so that they are "merged" together in the functions that consume
 * this list, eg mbedtls_x509_dn_gets().
 */
int mbedtls_x509_get_name( unsigned char **p, const unsigned char *end,
                   mbedtls_x509_name *cur )
{
 80869ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80869f0:	4604      	mov	r4, r0
 80869f2:	460f      	mov	r7, r1
 80869f4:	4691      	mov	r9, r2
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 80869f6:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8086ad8 <mbedtls_x509_get_name+0xec>
    while( 1 )
    {
        /*
         * parse SET
         */
        if( ( ret = mbedtls_asn1_get_tag( p, end, &set_len,
 80869fa:	2331      	movs	r3, #49	; 0x31
 80869fc:	466a      	mov	r2, sp
 80869fe:	4639      	mov	r1, r7
 8086a00:	4620      	mov	r0, r4
 8086a02:	f7fd f855 	bl	8083ab0 <mbedtls_asn1_get_tag>
 8086a06:	b110      	cbz	r0, 8086a0e <mbedtls_x509_get_name+0x22>
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SET ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 8086a08:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380
 8086a0c:	e05a      	b.n	8086ac4 <mbedtls_x509_get_name+0xd8>

        end_set  = *p + set_len;
 8086a0e:	464d      	mov	r5, r9
 8086a10:	6826      	ldr	r6, [r4, #0]
 8086a12:	9b00      	ldr	r3, [sp, #0]
 8086a14:	441e      	add	r6, r3
    int ret;
    size_t len;
    mbedtls_x509_buf *oid;
    mbedtls_x509_buf *val;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8086a16:	2330      	movs	r3, #48	; 0x30
 8086a18:	aa01      	add	r2, sp, #4
 8086a1a:	4631      	mov	r1, r6
 8086a1c:	4620      	mov	r0, r4
 8086a1e:	f7fd f847 	bl	8083ab0 <mbedtls_asn1_get_tag>
 8086a22:	bb50      	cbnz	r0, 8086a7a <mbedtls_x509_get_name+0x8e>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    if( ( end - *p ) < 1 )
 8086a24:	6823      	ldr	r3, [r4, #0]
 8086a26:	1af2      	subs	r2, r6, r3
 8086a28:	2a00      	cmp	r2, #0
 8086a2a:	dc01      	bgt.n	8086a30 <mbedtls_x509_get_name+0x44>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8086a2c:	4827      	ldr	r0, [pc, #156]	; (8086acc <mbedtls_x509_get_name+0xe0>)
 8086a2e:	e049      	b.n	8086ac4 <mbedtls_x509_get_name+0xd8>

    oid = &cur->oid;
    oid->tag = **p;
 8086a30:	462a      	mov	r2, r5
 8086a32:	781b      	ldrb	r3, [r3, #0]

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
 8086a34:	4631      	mov	r1, r6
    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    oid = &cur->oid;
    oid->tag = **p;
 8086a36:	f842 3b04 	str.w	r3, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
 8086a3a:	4620      	mov	r0, r4
 8086a3c:	2306      	movs	r3, #6
 8086a3e:	f7fd f837 	bl	8083ab0 <mbedtls_asn1_get_tag>
 8086a42:	b9d0      	cbnz	r0, 8086a7a <mbedtls_x509_get_name+0x8e>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    oid->p = *p;
 8086a44:	6823      	ldr	r3, [r4, #0]
    *p += oid->len;
 8086a46:	6869      	ldr	r1, [r5, #4]
    oid->tag = **p;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    oid->p = *p;
 8086a48:	60ab      	str	r3, [r5, #8]
    *p += oid->len;
 8086a4a:	6820      	ldr	r0, [r4, #0]
 8086a4c:	1843      	adds	r3, r0, r1

    if( ( end - *p ) < 1 )
 8086a4e:	1af2      	subs	r2, r6, r3
 8086a50:	2a00      	cmp	r2, #0

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    oid->p = *p;
    *p += oid->len;
 8086a52:	6023      	str	r3, [r4, #0]

    if( ( end - *p ) < 1 )
 8086a54:	ddea      	ble.n	8086a2c <mbedtls_x509_get_name+0x40>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
 8086a56:	5c42      	ldrb	r2, [r0, r1]
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 8086a58:	2a1e      	cmp	r2, #30
 8086a5a:	d81a      	bhi.n	8086a92 <mbedtls_x509_get_name+0xa6>
 8086a5c:	fa28 f202 	lsr.w	r2, r8, r2
 8086a60:	07d2      	lsls	r2, r2, #31
 8086a62:	d516      	bpl.n	8086a92 <mbedtls_x509_get_name+0xa6>
        **p != MBEDTLS_ASN1_BIT_STRING )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    val = &cur->val;
    val->tag = *(*p)++;
 8086a64:	3301      	adds	r3, #1
 8086a66:	6023      	str	r3, [r4, #0]
 8086a68:	5c43      	ldrb	r3, [r0, r1]

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
 8086a6a:	f105 0210 	add.w	r2, r5, #16
        **p != MBEDTLS_ASN1_BIT_STRING )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    val = &cur->val;
    val->tag = *(*p)++;
 8086a6e:	60eb      	str	r3, [r5, #12]

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
 8086a70:	4631      	mov	r1, r6
 8086a72:	4620      	mov	r0, r4
 8086a74:	f7fc ffca 	bl	8083a0c <mbedtls_asn1_get_len>
 8086a78:	b118      	cbz	r0, 8086a82 <mbedtls_x509_get_name+0x96>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 8086a7a:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380

        end_set  = *p + set_len;

        while( 1 )
        {
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
 8086a7e:	b150      	cbz	r0, 8086a96 <mbedtls_x509_get_name+0xaa>
 8086a80:	e020      	b.n	8086ac4 <mbedtls_x509_get_name+0xd8>
    val->tag = *(*p)++;

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    val->p = *p;
 8086a82:	6823      	ldr	r3, [r4, #0]
 8086a84:	616b      	str	r3, [r5, #20]
    *p += val->len;
 8086a86:	6822      	ldr	r2, [r4, #0]
 8086a88:	692b      	ldr	r3, [r5, #16]
 8086a8a:	4413      	add	r3, r2
 8086a8c:	6023      	str	r3, [r4, #0]

    cur->next = NULL;
 8086a8e:	61a8      	str	r0, [r5, #24]
 8086a90:	e001      	b.n	8086a96 <mbedtls_x509_get_name+0xaa>
    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
        **p != MBEDTLS_ASN1_BIT_STRING )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 8086a92:	480f      	ldr	r0, [pc, #60]	; (8086ad0 <mbedtls_x509_get_name+0xe4>)
 8086a94:	e016      	b.n	8086ac4 <mbedtls_x509_get_name+0xd8>
        while( 1 )
        {
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
                return( ret );

            if( *p == end_set )
 8086a96:	6823      	ldr	r3, [r4, #0]
 8086a98:	429e      	cmp	r6, r3
 8086a9a:	d008      	beq.n	8086aae <mbedtls_x509_get_name+0xc2>
                break;

            /* Mark this item as being no the only one in a set */
            cur->next_merged = 1;
 8086a9c:	2001      	movs	r0, #1
 8086a9e:	7728      	strb	r0, [r5, #28]

            cur->next = (mbedtls_x509_name *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 8086aa0:	2120      	movs	r1, #32
 8086aa2:	f00d f847 	bl	8093b34 <calloc>
 8086aa6:	61a8      	str	r0, [r5, #24]

            if( cur->next == NULL )
 8086aa8:	b158      	cbz	r0, 8086ac2 <mbedtls_x509_get_name+0xd6>
 8086aaa:	4605      	mov	r5, r0
 8086aac:	e7b3      	b.n	8086a16 <mbedtls_x509_get_name+0x2a>
        }

        /*
         * continue until end of SEQUENCE is reached
         */
        if( *p == end )
 8086aae:	42b7      	cmp	r7, r6
 8086ab0:	d008      	beq.n	8086ac4 <mbedtls_x509_get_name+0xd8>
            return( 0 );

        cur->next = (mbedtls_x509_name *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 8086ab2:	2120      	movs	r1, #32
 8086ab4:	2001      	movs	r0, #1
 8086ab6:	f00d f83d 	bl	8093b34 <calloc>
 8086aba:	4681      	mov	r9, r0
 8086abc:	61a8      	str	r0, [r5, #24]

        if( cur->next == NULL )
 8086abe:	2800      	cmp	r0, #0
 8086ac0:	d19b      	bne.n	80869fa <mbedtls_x509_get_name+0xe>
            cur->next_merged = 1;

            cur->next = (mbedtls_x509_name *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );

            if( cur->next == NULL )
                return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 8086ac2:	4804      	ldr	r0, [pc, #16]	; (8086ad4 <mbedtls_x509_get_name+0xe8>)
        if( cur->next == NULL )
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );

        cur = cur->next;
    }
}
 8086ac4:	b003      	add	sp, #12
 8086ac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8086aca:	bf00      	nop
 8086acc:	ffffdc20 	.word	0xffffdc20
 8086ad0:	ffffdc1e 	.word	0xffffdc1e
 8086ad4:	ffffd780 	.word	0xffffd780
 8086ad8:	50581008 	.word	0x50581008

08086adc <mbedtls_x509_get_time>:
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
 8086adc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
 8086ade:	6803      	ldr	r3, [r0, #0]
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
 8086ae0:	4614      	mov	r4, r2
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
 8086ae2:	1aca      	subs	r2, r1, r3
 8086ae4:	2a00      	cmp	r2, #0
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
 8086ae6:	4605      	mov	r5, r0
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
 8086ae8:	f340 80a1 	ble.w	8086c2e <mbedtls_x509_get_time+0x152>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag = **p;
 8086aec:	781a      	ldrb	r2, [r3, #0]

    if( tag == MBEDTLS_ASN1_UTC_TIME )
 8086aee:	2a17      	cmp	r2, #23
 8086af0:	d004      	beq.n	8086afc <mbedtls_x509_get_time+0x20>
        year_len = 2;
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
 8086af2:	2a18      	cmp	r2, #24
 8086af4:	f040 809d 	bne.w	8086c32 <mbedtls_x509_get_time+0x156>
        year_len = 4;
 8086af8:	2704      	movs	r7, #4
 8086afa:	e000      	b.n	8086afe <mbedtls_x509_get_time+0x22>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag = **p;

    if( tag == MBEDTLS_ASN1_UTC_TIME )
        year_len = 2;
 8086afc:	2702      	movs	r7, #2
        year_len = 4;
    else
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 8086afe:	3301      	adds	r3, #1
 8086b00:	602b      	str	r3, [r5, #0]
    ret = mbedtls_asn1_get_len( p, end, &len );
 8086b02:	aa01      	add	r2, sp, #4
 8086b04:	4628      	mov	r0, r5
 8086b06:	f7fc ff81 	bl	8083a0c <mbedtls_asn1_get_len>

    if( ret != 0 )
 8086b0a:	b110      	cbz	r0, 8086b12 <mbedtls_x509_get_time+0x36>
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
 8086b0c:	f5a0 5010 	sub.w	r0, r0, #9216	; 0x2400
 8086b10:	e092      	b.n	8086c38 <mbedtls_x509_get_time+0x15c>

    return x509_parse_time( p, len, year_len, tm );
 8086b12:	9e01      	ldr	r6, [sp, #4]
    int ret;

    /*
     * Minimum length is 10 or 12 depending on yearlen
     */
    if ( len < yearlen + 8 )
 8086b14:	f107 0308 	add.w	r3, r7, #8
 8086b18:	429e      	cmp	r6, r3
 8086b1a:	f0c0 808c 	bcc.w	8086c36 <mbedtls_x509_get_time+0x15a>
    len -= yearlen + 8;

    /*
     * Parse year, month, day, hour, minute
     */
    CHECK( x509_parse_int( p, yearlen, &tm->year ) );
 8086b1e:	4622      	mov	r2, r4
 8086b20:	4639      	mov	r1, r7
 8086b22:	4628      	mov	r0, r5
 8086b24:	f7ff ff14 	bl	8086950 <_ZL14x509_parse_intPPhjPi>
 8086b28:	2800      	cmp	r0, #0
 8086b2a:	f040 8085 	bne.w	8086c38 <mbedtls_x509_get_time+0x15c>
    if ( 2 == yearlen )
 8086b2e:	2f02      	cmp	r7, #2
 8086b30:	d108      	bne.n	8086b44 <mbedtls_x509_get_time+0x68>
    {
        if ( tm->year < 50 )
 8086b32:	6823      	ldr	r3, [r4, #0]
 8086b34:	2b31      	cmp	r3, #49	; 0x31
            tm->year += 100;
 8086b36:	bfdc      	itt	le
 8086b38:	3364      	addle	r3, #100	; 0x64
 8086b3a:	6023      	strle	r3, [r4, #0]

        tm->year += 1900;
 8086b3c:	6823      	ldr	r3, [r4, #0]
 8086b3e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8086b42:	6023      	str	r3, [r4, #0]
    }

    CHECK( x509_parse_int( p, 2, &tm->mon ) );
 8086b44:	1d22      	adds	r2, r4, #4
 8086b46:	2102      	movs	r1, #2
 8086b48:	4628      	mov	r0, r5
 8086b4a:	f7ff ff01 	bl	8086950 <_ZL14x509_parse_intPPhjPi>
 8086b4e:	2800      	cmp	r0, #0
 8086b50:	d172      	bne.n	8086c38 <mbedtls_x509_get_time+0x15c>
    CHECK( x509_parse_int( p, 2, &tm->day ) );
 8086b52:	f104 0208 	add.w	r2, r4, #8
 8086b56:	2102      	movs	r1, #2
 8086b58:	4628      	mov	r0, r5
 8086b5a:	f7ff fef9 	bl	8086950 <_ZL14x509_parse_intPPhjPi>
 8086b5e:	2800      	cmp	r0, #0
 8086b60:	d16a      	bne.n	8086c38 <mbedtls_x509_get_time+0x15c>
    CHECK( x509_parse_int( p, 2, &tm->hour ) );
 8086b62:	f104 020c 	add.w	r2, r4, #12
 8086b66:	2102      	movs	r1, #2
 8086b68:	4628      	mov	r0, r5
 8086b6a:	f7ff fef1 	bl	8086950 <_ZL14x509_parse_intPPhjPi>
 8086b6e:	2800      	cmp	r0, #0
 8086b70:	d162      	bne.n	8086c38 <mbedtls_x509_get_time+0x15c>
    CHECK( x509_parse_int( p, 2, &tm->min ) );
 8086b72:	f104 0210 	add.w	r2, r4, #16
 8086b76:	2102      	movs	r1, #2
 8086b78:	4628      	mov	r0, r5
 8086b7a:	f7ff fee9 	bl	8086950 <_ZL14x509_parse_intPPhjPi>
 8086b7e:	2800      	cmp	r0, #0
 8086b80:	d15a      	bne.n	8086c38 <mbedtls_x509_get_time+0x15c>
    /*
     * Minimum length is 10 or 12 depending on yearlen
     */
    if ( len < yearlen + 8 )
        return ( MBEDTLS_ERR_X509_INVALID_DATE );
    len -= yearlen + 8;
 8086b82:	1bf6      	subs	r6, r6, r7
    CHECK( x509_parse_int( p, 2, &tm->min ) );

    /*
     * Parse seconds if present
     */
    if ( len >= 2 )
 8086b84:	f1a6 0308 	sub.w	r3, r6, #8
 8086b88:	2b01      	cmp	r3, #1
 8086b8a:	d954      	bls.n	8086c36 <mbedtls_x509_get_time+0x15a>
    {
        CHECK( x509_parse_int( p, 2, &tm->sec ) );
 8086b8c:	f104 0214 	add.w	r2, r4, #20
 8086b90:	2102      	movs	r1, #2
 8086b92:	4628      	mov	r0, r5
 8086b94:	f7ff fedc 	bl	8086950 <_ZL14x509_parse_intPPhjPi>
 8086b98:	2800      	cmp	r0, #0
 8086b9a:	d14d      	bne.n	8086c38 <mbedtls_x509_get_time+0x15c>
        len -= 2;
 8086b9c:	f1a6 030a 	sub.w	r3, r6, #10
        return ( MBEDTLS_ERR_X509_INVALID_DATE );

    /*
     * Parse trailing 'Z' if present
     */
    if ( 1 == len && 'Z' == **p )
 8086ba0:	2b01      	cmp	r3, #1
 8086ba2:	d107      	bne.n	8086bb4 <mbedtls_x509_get_time+0xd8>
 8086ba4:	682b      	ldr	r3, [r5, #0]
 8086ba6:	781a      	ldrb	r2, [r3, #0]
 8086ba8:	2a5a      	cmp	r2, #90	; 0x5a
 8086baa:	d144      	bne.n	8086c36 <mbedtls_x509_get_time+0x15a>
    {
        (*p)++;
 8086bac:	3301      	adds	r3, #1
 8086bae:	602b      	str	r3, [r5, #0]
        len--;
 8086bb0:	f1a6 030b 	sub.w	r3, r6, #11
    }

    /*
     * We should have parsed all characters at this point
     */
    if ( 0 != len )
 8086bb4:	2b00      	cmp	r3, #0
 8086bb6:	d13e      	bne.n	8086c36 <mbedtls_x509_get_time+0x15a>
static int x509_date_is_valid(const mbedtls_x509_time *t )
{
    int ret = MBEDTLS_ERR_X509_INVALID_DATE;
    int month_len;

    CHECK_RANGE( 0, 9999, t->year );
 8086bb8:	f242 720f 	movw	r2, #9999	; 0x270f
 8086bbc:	6823      	ldr	r3, [r4, #0]
 8086bbe:	4293      	cmp	r3, r2
 8086bc0:	d839      	bhi.n	8086c36 <mbedtls_x509_get_time+0x15a>
    CHECK_RANGE( 0, 23,   t->hour );
 8086bc2:	68e2      	ldr	r2, [r4, #12]
 8086bc4:	2a17      	cmp	r2, #23
 8086bc6:	d836      	bhi.n	8086c36 <mbedtls_x509_get_time+0x15a>
    CHECK_RANGE( 0, 59,   t->min  );
 8086bc8:	6922      	ldr	r2, [r4, #16]
 8086bca:	2a3b      	cmp	r2, #59	; 0x3b
 8086bcc:	d833      	bhi.n	8086c36 <mbedtls_x509_get_time+0x15a>
    CHECK_RANGE( 0, 59,   t->sec  );
 8086bce:	6962      	ldr	r2, [r4, #20]
 8086bd0:	2a3b      	cmp	r2, #59	; 0x3b
 8086bd2:	d830      	bhi.n	8086c36 <mbedtls_x509_get_time+0x15a>
 8086bd4:	6861      	ldr	r1, [r4, #4]
 8086bd6:	290c      	cmp	r1, #12
 8086bd8:	d82d      	bhi.n	8086c36 <mbedtls_x509_get_time+0x15a>
 8086bda:	2201      	movs	r2, #1
 8086bdc:	408a      	lsls	r2, r1
 8086bde:	f241 51aa 	movw	r1, #5546	; 0x15aa
 8086be2:	4011      	ands	r1, r2
 8086be4:	b9b9      	cbnz	r1, 8086c16 <mbedtls_x509_get_time+0x13a>
 8086be6:	f412 6f25 	tst.w	r2, #2640	; 0xa50
 8086bea:	d116      	bne.n	8086c1a <mbedtls_x509_get_time+0x13e>
 8086bec:	0751      	lsls	r1, r2, #29
 8086bee:	d522      	bpl.n	8086c36 <mbedtls_x509_get_time+0x15a>
            break;
        case 4: case 6: case 9: case 11:
            month_len = 30;
            break;
        case 2:
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
 8086bf0:	079a      	lsls	r2, r3, #30
 8086bf2:	d105      	bne.n	8086c00 <mbedtls_x509_get_time+0x124>
 8086bf4:	2164      	movs	r1, #100	; 0x64
 8086bf6:	fb93 f2f1 	sdiv	r2, r3, r1
 8086bfa:	fb01 3212 	mls	r2, r1, r2, r3
 8086bfe:	b972      	cbnz	r2, 8086c1e <mbedtls_x509_get_time+0x142>
 8086c00:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8086c04:	fb93 f2f1 	sdiv	r2, r3, r1
 8086c08:	fb01 3312 	mls	r3, r1, r2, r3
                !( t->year % 400 ) )
                month_len = 29;
            else
                month_len = 28;
 8086c0c:	2b00      	cmp	r3, #0
 8086c0e:	bf0c      	ite	eq
 8086c10:	231d      	moveq	r3, #29
 8086c12:	231c      	movne	r3, #28
 8086c14:	e004      	b.n	8086c20 <mbedtls_x509_get_time+0x144>
    CHECK_RANGE( 0, 59,   t->sec  );

    switch( t->mon )
    {
        case 1: case 3: case 5: case 7: case 8: case 10: case 12:
            month_len = 31;
 8086c16:	231f      	movs	r3, #31
 8086c18:	e002      	b.n	8086c20 <mbedtls_x509_get_time+0x144>
            break;
        case 4: case 6: case 9: case 11:
            month_len = 30;
 8086c1a:	231e      	movs	r3, #30
 8086c1c:	e000      	b.n	8086c20 <mbedtls_x509_get_time+0x144>
            break;
        case 2:
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
                !( t->year % 400 ) )
                month_len = 29;
 8086c1e:	231d      	movs	r3, #29
                month_len = 28;
            break;
        default:
            return( ret );
    }
    CHECK_RANGE( 1, month_len, t->day );
 8086c20:	68a2      	ldr	r2, [r4, #8]
 8086c22:	2a00      	cmp	r2, #0
 8086c24:	dd07      	ble.n	8086c36 <mbedtls_x509_get_time+0x15a>
 8086c26:	429a      	cmp	r2, r3
 8086c28:	dc05      	bgt.n	8086c36 <mbedtls_x509_get_time+0x15a>
    if ( 0 != len )
        return ( MBEDTLS_ERR_X509_INVALID_DATE );

    CHECK( x509_date_is_valid( tm ) );

    return ( 0 );
 8086c2a:	2000      	movs	r0, #0
 8086c2c:	e004      	b.n	8086c38 <mbedtls_x509_get_time+0x15c>
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8086c2e:	4803      	ldr	r0, [pc, #12]	; (8086c3c <mbedtls_x509_get_time+0x160>)
 8086c30:	e002      	b.n	8086c38 <mbedtls_x509_get_time+0x15c>
        year_len = 2;
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
        year_len = 4;
    else
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 8086c32:	4803      	ldr	r0, [pc, #12]	; (8086c40 <mbedtls_x509_get_time+0x164>)
 8086c34:	e000      	b.n	8086c38 <mbedtls_x509_get_time+0x15c>

        tm->year += 1900;
    }

    CHECK( x509_parse_int( p, 2, &tm->mon ) );
    CHECK( x509_parse_int( p, 2, &tm->day ) );
 8086c36:	4803      	ldr	r0, [pc, #12]	; (8086c44 <mbedtls_x509_get_time+0x168>)

    if( ret != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );

    return x509_parse_time( p, len, year_len, tm );
}
 8086c38:	b003      	add	sp, #12
 8086c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8086c3c:	ffffdba0 	.word	0xffffdba0
 8086c40:	ffffdb9e 	.word	0xffffdb9e
 8086c44:	ffffdc00 	.word	0xffffdc00

08086c48 <mbedtls_x509_get_sig>:

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
 8086c48:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
 8086c4a:	6803      	ldr	r3, [r0, #0]

    return x509_parse_time( p, len, year_len, tm );
}

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
 8086c4c:	4615      	mov	r5, r2
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
 8086c4e:	1aca      	subs	r2, r1, r3
 8086c50:	2a00      	cmp	r2, #0

    return x509_parse_time( p, len, year_len, tm );
}

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
 8086c52:	4604      	mov	r4, r0
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
 8086c54:	dd10      	ble.n	8086c78 <mbedtls_x509_get_sig+0x30>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag_type = **p;

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 8086c56:	aa01      	add	r2, sp, #4

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag_type = **p;
 8086c58:	781e      	ldrb	r6, [r3, #0]

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 8086c5a:	f7fc ffb2 	bl	8083bc2 <mbedtls_asn1_get_bitstring_null>
 8086c5e:	b110      	cbz	r0, 8086c66 <mbedtls_x509_get_sig+0x1e>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );
 8086c60:	f5a0 5012 	sub.w	r0, r0, #9344	; 0x2480
 8086c64:	e009      	b.n	8086c7a <mbedtls_x509_get_sig+0x32>

    sig->tag = tag_type;
    sig->len = len;
 8086c66:	9b01      	ldr	r3, [sp, #4]
    tag_type = **p;

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );

    sig->tag = tag_type;
 8086c68:	602e      	str	r6, [r5, #0]
    sig->len = len;
 8086c6a:	606b      	str	r3, [r5, #4]
    sig->p = *p;
 8086c6c:	6822      	ldr	r2, [r4, #0]
 8086c6e:	60aa      	str	r2, [r5, #8]

    *p += len;
 8086c70:	6822      	ldr	r2, [r4, #0]
 8086c72:	4413      	add	r3, r2
 8086c74:	6023      	str	r3, [r4, #0]

    return( 0 );
 8086c76:	e000      	b.n	8086c7a <mbedtls_x509_get_sig+0x32>
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8086c78:	4801      	ldr	r0, [pc, #4]	; (8086c80 <mbedtls_x509_get_sig+0x38>)
    sig->p = *p;

    *p += len;

    return( 0 );
}
 8086c7a:	b002      	add	sp, #8
 8086c7c:	bd70      	pop	{r4, r5, r6, pc}
 8086c7e:	bf00      	nop
 8086c80:	ffffdb20 	.word	0xffffdb20

08086c84 <mbedtls_x509_get_sig_alg>:
 * Get signature algorithm from alg OID and optional parameters
 */
int mbedtls_x509_get_sig_alg( const mbedtls_x509_buf *sig_oid, const mbedtls_x509_buf *sig_params,
                      mbedtls_md_type_t *md_alg, mbedtls_pk_type_t *pk_alg,
                      void **sig_opts )
{
 8086c84:	b510      	push	{r4, lr}
 8086c86:	460c      	mov	r4, r1
 8086c88:	4611      	mov	r1, r2
    int ret;

    if( *sig_opts != NULL )
 8086c8a:	9a02      	ldr	r2, [sp, #8]
 8086c8c:	6812      	ldr	r2, [r2, #0]
 8086c8e:	b982      	cbnz	r2, 8086cb2 <mbedtls_x509_get_sig_alg+0x2e>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    if( ( ret = mbedtls_oid_get_sig_alg( sig_oid, md_alg, pk_alg ) ) != 0 )
 8086c90:	461a      	mov	r2, r3
 8086c92:	f7fe fb91 	bl	80853b8 <mbedtls_oid_get_sig_alg>
 8086c96:	b110      	cbz	r0, 8086c9e <mbedtls_x509_get_sig_alg+0x1a>
        return( MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG + ret );
 8086c98:	f5a0 5018 	sub.w	r0, r0, #9728	; 0x2600
 8086c9c:	bd10      	pop	{r4, pc}
    }
    else
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */
    {
        /* Make sure parameters are absent or NULL */
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
 8086c9e:	6823      	ldr	r3, [r4, #0]
 8086ca0:	2b05      	cmp	r3, #5
 8086ca2:	d000      	beq.n	8086ca6 <mbedtls_x509_get_sig_alg+0x22>
 8086ca4:	b93b      	cbnz	r3, 8086cb6 <mbedtls_x509_get_sig_alg+0x32>
 8086ca6:	6863      	ldr	r3, [r4, #4]
              sig_params->len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG );
    }

    return( 0 );
 8086ca8:	4804      	ldr	r0, [pc, #16]	; (8086cbc <mbedtls_x509_get_sig_alg+0x38>)
 8086caa:	2b00      	cmp	r3, #0
 8086cac:	bf08      	it	eq
 8086cae:	2000      	moveq	r0, #0
 8086cb0:	bd10      	pop	{r4, pc}
                      void **sig_opts )
{
    int ret;

    if( *sig_opts != NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8086cb2:	4803      	ldr	r0, [pc, #12]	; (8086cc0 <mbedtls_x509_get_sig_alg+0x3c>)
 8086cb4:	bd10      	pop	{r4, pc}
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */
    {
        /* Make sure parameters are absent or NULL */
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
              sig_params->len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG );
 8086cb6:	4801      	ldr	r0, [pc, #4]	; (8086cbc <mbedtls_x509_get_sig_alg+0x38>)
    }

    return( 0 );
}
 8086cb8:	bd10      	pop	{r4, pc}
 8086cba:	bf00      	nop
 8086cbc:	ffffdd00 	.word	0xffffdd00
 8086cc0:	ffffd800 	.word	0xffffd800

08086cc4 <mbedtls_x509_get_ext>:
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *ext, int tag )
{
 8086cc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8086cc6:	4616      	mov	r6, r2
    int ret;
    size_t len;

    if( *p == end )
 8086cc8:	6802      	ldr	r2, [r0, #0]
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *ext, int tag )
{
 8086cca:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( *p == end )
 8086ccc:	428a      	cmp	r2, r1
 8086cce:	d01c      	beq.n	8086d0a <mbedtls_x509_get_ext+0x46>
        return( 0 );

    ext->tag = **p;
 8086cd0:	7815      	ldrb	r5, [r2, #0]
 8086cd2:	4632      	mov	r2, r6

    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 8086cd4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    size_t len;

    if( *p == end )
        return( 0 );

    ext->tag = **p;
 8086cd8:	f842 5b04 	str.w	r5, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 8086cdc:	f7fc fee8 	bl	8083ab0 <mbedtls_asn1_get_tag>
 8086ce0:	b9b0      	cbnz	r0, 8086d10 <mbedtls_x509_get_ext+0x4c>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag ) ) != 0 )
        return( ret );

    ext->p = *p;
 8086ce2:	6823      	ldr	r3, [r4, #0]
     * Extension  ::=  SEQUENCE  {
     *      extnID      OBJECT IDENTIFIER,
     *      critical    BOOLEAN DEFAULT FALSE,
     *      extnValue   OCTET STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8086ce4:	aa01      	add	r2, sp, #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag ) ) != 0 )
        return( ret );

    ext->p = *p;
 8086ce6:	60b3      	str	r3, [r6, #8]
    end = *p + ext->len;
 8086ce8:	6825      	ldr	r5, [r4, #0]
 8086cea:	6873      	ldr	r3, [r6, #4]
     * Extension  ::=  SEQUENCE  {
     *      extnID      OBJECT IDENTIFIER,
     *      critical    BOOLEAN DEFAULT FALSE,
     *      extnValue   OCTET STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8086cec:	4620      	mov	r0, r4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag ) ) != 0 )
        return( ret );

    ext->p = *p;
    end = *p + ext->len;
 8086cee:	441d      	add	r5, r3
     * Extension  ::=  SEQUENCE  {
     *      extnID      OBJECT IDENTIFIER,
     *      critical    BOOLEAN DEFAULT FALSE,
     *      extnValue   OCTET STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8086cf0:	4629      	mov	r1, r5
 8086cf2:	2330      	movs	r3, #48	; 0x30
 8086cf4:	f7fc fedc 	bl	8083ab0 <mbedtls_asn1_get_tag>
 8086cf8:	b110      	cbz	r0, 8086d00 <mbedtls_x509_get_ext+0x3c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 8086cfa:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
 8086cfe:	e007      	b.n	8086d10 <mbedtls_x509_get_ext+0x4c>

    if( end != *p + len )
 8086d00:	6822      	ldr	r2, [r4, #0]
 8086d02:	9b01      	ldr	r3, [sp, #4]
 8086d04:	4413      	add	r3, r2
 8086d06:	429d      	cmp	r5, r3
 8086d08:	d101      	bne.n	8086d0e <mbedtls_x509_get_ext+0x4a>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 8086d0a:	2000      	movs	r0, #0
 8086d0c:	e000      	b.n	8086d10 <mbedtls_x509_get_ext+0x4c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( end != *p + len )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8086d0e:	4801      	ldr	r0, [pc, #4]	; (8086d14 <mbedtls_x509_get_ext+0x50>)

    return( 0 );
}
 8086d10:	b002      	add	sp, #8
 8086d12:	bd70      	pop	{r4, r5, r6, pc}
 8086d14:	ffffda9a 	.word	0xffffda9a

08086d18 <mbedtls_x509_dn_gets>:
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
 8086d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8086d1c:	460f      	mov	r7, r1
 8086d1e:	4691      	mov	r9, r2

    memset( s, 0, sizeof( s ) );

    name = dn;
    p = buf;
    n = size;
 8086d20:	463d      	mov	r5, r7
    const char *short_name = NULL;
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );

    name = dn;
 8086d22:	464e      	mov	r6, r9
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
 8086d24:	b0c2      	sub	sp, #264	; 0x108
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
 8086d26:	f04f 0a00 	mov.w	sl, #0
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
 8086d2a:	f10d 0808 	add.w	r8, sp, #8
 8086d2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8086d32:	4651      	mov	r1, sl
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
 8086d34:	4604      	mov	r4, r0
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
 8086d36:	4640      	mov	r0, r8
{
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
 8086d38:	f8cd a004 	str.w	sl, [sp, #4]
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
 8086d3c:	f00c ff45 	bl	8093bca <memset>
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
 8086d40:	4652      	mov	r2, sl
            if( i >= sizeof( s ) - 1 )
                break;

            c = name->val.p[i];
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
                 s[i] = '?';
 8086d42:	f04f 0a3f 	mov.w	sl, #63	; 0x3f

    name = dn;
    p = buf;
    n = size;

    while( name != NULL )
 8086d46:	2e00      	cmp	r6, #0
 8086d48:	d057      	beq.n	8086dfa <mbedtls_x509_dn_gets+0xe2>
    {
        if( !name->oid.p )
 8086d4a:	68b3      	ldr	r3, [r6, #8]
 8086d4c:	2b00      	cmp	r3, #0
 8086d4e:	d052      	beq.n	8086df6 <mbedtls_x509_dn_gets+0xde>
        {
            name = name->next;
            continue;
        }

        if( name != dn )
 8086d50:	454e      	cmp	r6, r9
 8086d52:	d011      	beq.n	8086d78 <mbedtls_x509_dn_gets+0x60>
        {
            ret = mbedtls_snprintf( p, n, merge ? " + " : ", " );
 8086d54:	4b2b      	ldr	r3, [pc, #172]	; (8086e04 <mbedtls_x509_dn_gets+0xec>)
 8086d56:	492c      	ldr	r1, [pc, #176]	; (8086e08 <mbedtls_x509_dn_gets+0xf0>)
 8086d58:	4620      	mov	r0, r4
 8086d5a:	2a00      	cmp	r2, #0
 8086d5c:	bf14      	ite	ne
 8086d5e:	460a      	movne	r2, r1
 8086d60:	461a      	moveq	r2, r3
 8086d62:	4629      	mov	r1, r5
 8086d64:	f00a fc02 	bl	809156c <snprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
 8086d68:	2800      	cmp	r0, #0
 8086d6a:	da01      	bge.n	8086d70 <mbedtls_x509_dn_gets+0x58>
 8086d6c:	4827      	ldr	r0, [pc, #156]	; (8086e0c <mbedtls_x509_dn_gets+0xf4>)
 8086d6e:	e045      	b.n	8086dfc <mbedtls_x509_dn_gets+0xe4>
 8086d70:	4285      	cmp	r5, r0
 8086d72:	d9fb      	bls.n	8086d6c <mbedtls_x509_dn_gets+0x54>
 8086d74:	1a2d      	subs	r5, r5, r0
 8086d76:	4404      	add	r4, r0
        }

        ret = mbedtls_oid_get_attr_short_name( &name->oid, &short_name );
 8086d78:	a901      	add	r1, sp, #4
 8086d7a:	4630      	mov	r0, r6
 8086d7c:	f7fe fac2 	bl	8085304 <mbedtls_oid_get_attr_short_name>

        if( ret == 0 )
 8086d80:	b930      	cbnz	r0, 8086d90 <mbedtls_x509_dn_gets+0x78>
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
 8086d82:	9b01      	ldr	r3, [sp, #4]
 8086d84:	4a22      	ldr	r2, [pc, #136]	; (8086e10 <mbedtls_x509_dn_gets+0xf8>)
 8086d86:	4629      	mov	r1, r5
 8086d88:	4620      	mov	r0, r4
 8086d8a:	f00a fbef 	bl	809156c <snprintf>
 8086d8e:	e004      	b.n	8086d9a <mbedtls_x509_dn_gets+0x82>
        else
            ret = mbedtls_snprintf( p, n, "\?\?=" );
 8086d90:	4a20      	ldr	r2, [pc, #128]	; (8086e14 <mbedtls_x509_dn_gets+0xfc>)
 8086d92:	4629      	mov	r1, r5
 8086d94:	4620      	mov	r0, r4
 8086d96:	f00a fbe9 	bl	809156c <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8086d9a:	2800      	cmp	r0, #0
 8086d9c:	dbe6      	blt.n	8086d6c <mbedtls_x509_dn_gets+0x54>
 8086d9e:	4285      	cmp	r5, r0
 8086da0:	d9e4      	bls.n	8086d6c <mbedtls_x509_dn_gets+0x54>
 8086da2:	1a2d      	subs	r5, r5, r0
 8086da4:	4404      	add	r4, r0

        for( i = 0; i < name->val.len; i++ )
 8086da6:	2300      	movs	r3, #0
 8086da8:	6932      	ldr	r2, [r6, #16]
 8086daa:	4293      	cmp	r3, r2
 8086dac:	d213      	bcs.n	8086dd6 <mbedtls_x509_dn_gets+0xbe>
        {
            if( i >= sizeof( s ) - 1 )
 8086dae:	2bff      	cmp	r3, #255	; 0xff
 8086db0:	d011      	beq.n	8086dd6 <mbedtls_x509_dn_gets+0xbe>
                break;

            c = name->val.p[i];
 8086db2:	6972      	ldr	r2, [r6, #20]
 8086db4:	5cd2      	ldrb	r2, [r2, r3]
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
 8086db6:	2a1f      	cmp	r2, #31
 8086db8:	d906      	bls.n	8086dc8 <mbedtls_x509_dn_gets+0xb0>
 8086dba:	2a7f      	cmp	r2, #127	; 0x7f
 8086dbc:	d004      	beq.n	8086dc8 <mbedtls_x509_dn_gets+0xb0>
 8086dbe:	f102 017f 	add.w	r1, r2, #127	; 0x7f
 8086dc2:	b2c9      	uxtb	r1, r1
 8086dc4:	291e      	cmp	r1, #30
 8086dc6:	d802      	bhi.n	8086dce <mbedtls_x509_dn_gets+0xb6>
                 s[i] = '?';
 8086dc8:	f808 a003 	strb.w	sl, [r8, r3]
 8086dcc:	e001      	b.n	8086dd2 <mbedtls_x509_dn_gets+0xba>
            else s[i] = c;
 8086dce:	f808 2003 	strb.w	r2, [r8, r3]
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
        else
            ret = mbedtls_snprintf( p, n, "\?\?=" );
        MBEDTLS_X509_SAFE_SNPRINTF;

        for( i = 0; i < name->val.len; i++ )
 8086dd2:	3301      	adds	r3, #1
 8086dd4:	e7e8      	b.n	8086da8 <mbedtls_x509_dn_gets+0x90>
            c = name->val.p[i];
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
                 s[i] = '?';
            else s[i] = c;
        }
        s[i] = '\0';
 8086dd6:	2200      	movs	r2, #0
 8086dd8:	f808 2003 	strb.w	r2, [r8, r3]
        ret = mbedtls_snprintf( p, n, "%s", s );
 8086ddc:	4629      	mov	r1, r5
 8086dde:	4643      	mov	r3, r8
 8086de0:	4a0d      	ldr	r2, [pc, #52]	; (8086e18 <mbedtls_x509_dn_gets+0x100>)
 8086de2:	4620      	mov	r0, r4
 8086de4:	f00a fbc2 	bl	809156c <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8086de8:	2800      	cmp	r0, #0
 8086dea:	dbbf      	blt.n	8086d6c <mbedtls_x509_dn_gets+0x54>
 8086dec:	4285      	cmp	r5, r0
 8086dee:	d9bd      	bls.n	8086d6c <mbedtls_x509_dn_gets+0x54>

        merge = name->next_merged;
 8086df0:	7f32      	ldrb	r2, [r6, #28]
                 s[i] = '?';
            else s[i] = c;
        }
        s[i] = '\0';
        ret = mbedtls_snprintf( p, n, "%s", s );
        MBEDTLS_X509_SAFE_SNPRINTF;
 8086df2:	1a2d      	subs	r5, r5, r0
 8086df4:	4404      	add	r4, r0

        merge = name->next_merged;
        name = name->next;
 8086df6:	69b6      	ldr	r6, [r6, #24]
 8086df8:	e7a5      	b.n	8086d46 <mbedtls_x509_dn_gets+0x2e>
    }

    return( (int) ( size - n ) );
 8086dfa:	1b78      	subs	r0, r7, r5
}
 8086dfc:	b042      	add	sp, #264	; 0x108
 8086dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8086e02:	bf00      	nop
 8086e04:	080953cc 	.word	0x080953cc
 8086e08:	080953c8 	.word	0x080953c8
 8086e0c:	ffffd680 	.word	0xffffd680
 8086e10:	080953cf 	.word	0x080953cf
 8086e14:	080953d3 	.word	0x080953d3
 8086e18:	08095806 	.word	0x08095806

08086e1c <mbedtls_x509_serial_gets>:
/*
 * Store the serial in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_serial_gets( char *buf, size_t size, const mbedtls_x509_buf *serial )
{
 8086e1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086e20:	4680      	mov	r8, r0
 8086e22:	460f      	mov	r7, r1
 8086e24:	4691      	mov	r9, r2
    int ret;
    size_t i, n, nr;
    char *p;

    p = buf;
    n = size;
 8086e26:	460c      	mov	r4, r1

    nr = ( serial->len <= 32 )
 8086e28:	6856      	ldr	r6, [r2, #4]
    for( i = 0; i < nr; i++ )
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
 8086e2a:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8086ea8 <mbedtls_x509_serial_gets+0x8c>

    p = buf;
    n = size;

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;
 8086e2e:	2e21      	cmp	r6, #33	; 0x21
    for( i = 0; i < nr; i++ )
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
 8086e30:	f8df b078 	ldr.w	fp, [pc, #120]	; 8086eac <mbedtls_x509_serial_gets+0x90>

    p = buf;
    n = size;

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;
 8086e34:	bf28      	it	cs
 8086e36:	261c      	movcs	r6, #28

    for( i = 0; i < nr; i++ )
 8086e38:	2500      	movs	r5, #0
 8086e3a:	42b5      	cmp	r5, r6
 8086e3c:	d01c      	beq.n	8086e78 <mbedtls_x509_serial_gets+0x5c>
 8086e3e:	f8d9 3008 	ldr.w	r3, [r9, #8]
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
 8086e42:	b91d      	cbnz	r5, 8086e4c <mbedtls_x509_serial_gets+0x30>
 8086e44:	2e01      	cmp	r6, #1
 8086e46:	d001      	beq.n	8086e4c <mbedtls_x509_serial_gets+0x30>
 8086e48:	781a      	ldrb	r2, [r3, #0]
 8086e4a:	b19a      	cbz	r2, 8086e74 <mbedtls_x509_serial_gets+0x58>
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
 8086e4c:	1e72      	subs	r2, r6, #1
 8086e4e:	4295      	cmp	r5, r2
 8086e50:	bf34      	ite	cc
 8086e52:	4652      	movcc	r2, sl
 8086e54:	465a      	movcs	r2, fp
 8086e56:	5d5b      	ldrb	r3, [r3, r5]
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
 8086e58:	4621      	mov	r1, r4
 8086e5a:	9200      	str	r2, [sp, #0]
 8086e5c:	4640      	mov	r0, r8
 8086e5e:	4a0f      	ldr	r2, [pc, #60]	; (8086e9c <mbedtls_x509_serial_gets+0x80>)
 8086e60:	f00a fb84 	bl	809156c <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8086e64:	2800      	cmp	r0, #0
 8086e66:	da01      	bge.n	8086e6c <mbedtls_x509_serial_gets+0x50>
 8086e68:	480d      	ldr	r0, [pc, #52]	; (8086ea0 <mbedtls_x509_serial_gets+0x84>)
 8086e6a:	e014      	b.n	8086e96 <mbedtls_x509_serial_gets+0x7a>
 8086e6c:	4284      	cmp	r4, r0
 8086e6e:	d9fb      	bls.n	8086e68 <mbedtls_x509_serial_gets+0x4c>
 8086e70:	1a24      	subs	r4, r4, r0
 8086e72:	4480      	add	r8, r0
    n = size;

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;

    for( i = 0; i < nr; i++ )
 8086e74:	3501      	adds	r5, #1
 8086e76:	e7e0      	b.n	8086e3a <mbedtls_x509_serial_gets+0x1e>
        ret = mbedtls_snprintf( p, n, "%02X%s",
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
        MBEDTLS_X509_SAFE_SNPRINTF;
    }

    if( nr != serial->len )
 8086e78:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8086e7c:	429d      	cmp	r5, r3
 8086e7e:	d009      	beq.n	8086e94 <mbedtls_x509_serial_gets+0x78>
    {
        ret = mbedtls_snprintf( p, n, "...." );
 8086e80:	4a08      	ldr	r2, [pc, #32]	; (8086ea4 <mbedtls_x509_serial_gets+0x88>)
 8086e82:	4621      	mov	r1, r4
 8086e84:	4640      	mov	r0, r8
 8086e86:	f00a fb71 	bl	809156c <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8086e8a:	2800      	cmp	r0, #0
 8086e8c:	dbec      	blt.n	8086e68 <mbedtls_x509_serial_gets+0x4c>
 8086e8e:	4284      	cmp	r4, r0
 8086e90:	d9ea      	bls.n	8086e68 <mbedtls_x509_serial_gets+0x4c>
 8086e92:	1a24      	subs	r4, r4, r0
    }

    return( (int) ( size - n ) );
 8086e94:	1b38      	subs	r0, r7, r4
}
 8086e96:	b003      	add	sp, #12
 8086e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8086e9c:	080953d9 	.word	0x080953d9
 8086ea0:	ffffd680 	.word	0xffffd680
 8086ea4:	080953e0 	.word	0x080953e0
 8086ea8:	080953d7 	.word	0x080953d7
 8086eac:	08094520 	.word	0x08094520

08086eb0 <mbedtls_x509_sig_alg_gets>:
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
 8086eb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;
 8086eb2:	2300      	movs	r3, #0
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
 8086eb4:	460c      	mov	r4, r1
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;
 8086eb6:	a902      	add	r1, sp, #8
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
 8086eb8:	4605      	mov	r5, r0
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;
 8086eba:	f841 3d04 	str.w	r3, [r1, #-4]!

    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
 8086ebe:	4610      	mov	r0, r2
 8086ec0:	f7fe fa6e 	bl	80853a0 <mbedtls_oid_get_sig_alg_desc>
    if( ret != 0 )
 8086ec4:	b128      	cbz	r0, 8086ed2 <mbedtls_x509_sig_alg_gets+0x22>
        ret = mbedtls_snprintf( p, n, "???"  );
 8086ec6:	4a0b      	ldr	r2, [pc, #44]	; (8086ef4 <mbedtls_x509_sig_alg_gets+0x44>)
 8086ec8:	4621      	mov	r1, r4
 8086eca:	4628      	mov	r0, r5
 8086ecc:	f00a fb4e 	bl	809156c <snprintf>
 8086ed0:	e005      	b.n	8086ede <mbedtls_x509_sig_alg_gets+0x2e>
    else
        ret = mbedtls_snprintf( p, n, "%s", desc );
 8086ed2:	9b01      	ldr	r3, [sp, #4]
 8086ed4:	4a08      	ldr	r2, [pc, #32]	; (8086ef8 <mbedtls_x509_sig_alg_gets+0x48>)
 8086ed6:	4621      	mov	r1, r4
 8086ed8:	4628      	mov	r0, r5
 8086eda:	f00a fb47 	bl	809156c <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8086ede:	2800      	cmp	r0, #0
 8086ee0:	db04      	blt.n	8086eec <mbedtls_x509_sig_alg_gets+0x3c>
 8086ee2:	4b06      	ldr	r3, [pc, #24]	; (8086efc <mbedtls_x509_sig_alg_gets+0x4c>)
 8086ee4:	4284      	cmp	r4, r0
 8086ee6:	bf98      	it	ls
 8086ee8:	4618      	movls	r0, r3
 8086eea:	e000      	b.n	8086eee <mbedtls_x509_sig_alg_gets+0x3e>
 8086eec:	4803      	ldr	r0, [pc, #12]	; (8086efc <mbedtls_x509_sig_alg_gets+0x4c>)
    ((void) md_alg);
    ((void) sig_opts);
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */

    return( (int)( size - n ) );
}
 8086eee:	b003      	add	sp, #12
 8086ef0:	bd30      	pop	{r4, r5, pc}
 8086ef2:	bf00      	nop
 8086ef4:	080953e5 	.word	0x080953e5
 8086ef8:	08095806 	.word	0x08095806
 8086efc:	ffffd680 	.word	0xffffd680

08086f00 <mbedtls_x509_key_size_helper>:

/*
 * Helper for writing "RSA key size", "EC key size", etc
 */
int mbedtls_x509_key_size_helper( char *buf, size_t buf_size, const char *name )
{
 8086f00:	b510      	push	{r4, lr}
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
 8086f02:	4613      	mov	r3, r2
 8086f04:	4a06      	ldr	r2, [pc, #24]	; (8086f20 <mbedtls_x509_key_size_helper+0x20>)

/*
 * Helper for writing "RSA key size", "EC key size", etc
 */
int mbedtls_x509_key_size_helper( char *buf, size_t buf_size, const char *name )
{
 8086f06:	460c      	mov	r4, r1
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
 8086f08:	f00a fb30 	bl	809156c <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8086f0c:	2800      	cmp	r0, #0
 8086f0e:	db05      	blt.n	8086f1c <mbedtls_x509_key_size_helper+0x1c>

    return( 0 );
 8086f10:	4b04      	ldr	r3, [pc, #16]	; (8086f24 <mbedtls_x509_key_size_helper+0x24>)
 8086f12:	4284      	cmp	r4, r0
 8086f14:	bf94      	ite	ls
 8086f16:	4618      	movls	r0, r3
 8086f18:	2000      	movhi	r0, #0
 8086f1a:	bd10      	pop	{r4, pc}
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8086f1c:	4801      	ldr	r0, [pc, #4]	; (8086f24 <mbedtls_x509_key_size_helper+0x24>)

    return( 0 );
}
 8086f1e:	bd10      	pop	{r4, pc}
 8086f20:	080953e9 	.word	0x080953e9
 8086f24:	ffffd680 	.word	0xffffd680

08086f28 <mbedtls_x509_time_is_past>:
 8086f28:	2000      	movs	r0, #0
 8086f2a:	4770      	bx	lr

08086f2c <mbedtls_x509_time_is_future>:

int mbedtls_x509_time_is_future( const mbedtls_x509_time *from )
{
    ((void) from);
    return( 0 );
}
 8086f2c:	2000      	movs	r0, #0
 8086f2e:	4770      	bx	lr

08086f30 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>:
 * Parse a PKCS#1 encoded private RSA key
 */
static int pk_parse_key_pkcs1_der( mbedtls_rsa_context *rsa,
                                   const unsigned char *key,
                                   size_t keylen )
{
 8086f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8086f32:	460c      	mov	r4, r1
 8086f34:	4615      	mov	r5, r2
 8086f36:	b08f      	sub	sp, #60	; 0x3c
 8086f38:	4607      	mov	r7, r0
    int ret, version;
    size_t len;
    unsigned char *p, *end;

    mbedtls_mpi T;
    mbedtls_mpi_init( &T );
 8086f3a:	a80b      	add	r0, sp, #44	; 0x2c
 8086f3c:	f004 fc14 	bl	808b768 <mbedtls_mpi_init>
     *      exponent2         INTEGER,  -- d mod (q-1)
     *      coefficient       INTEGER,  -- (inverse of q) mod p
     *      otherPrimeInfos   OtherPrimeInfos OPTIONAL
     *  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8086f40:	2330      	movs	r3, #48	; 0x30
 8086f42:	aa09      	add	r2, sp, #36	; 0x24
 8086f44:	1961      	adds	r1, r4, r5
 8086f46:	a80a      	add	r0, sp, #40	; 0x28
    unsigned char *p, *end;

    mbedtls_mpi T;
    mbedtls_mpi_init( &T );

    p = (unsigned char *) key;
 8086f48:	940a      	str	r4, [sp, #40]	; 0x28
     *      exponent2         INTEGER,  -- d mod (q-1)
     *      coefficient       INTEGER,  -- (inverse of q) mod p
     *      otherPrimeInfos   OtherPrimeInfos OPTIONAL
     *  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8086f4a:	f7fc fdb1 	bl	8083ab0 <mbedtls_asn1_get_tag>
 8086f4e:	b940      	cbnz	r0, 8086f62 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x32>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 8086f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8086f52:	9e0a      	ldr	r6, [sp, #40]	; 0x28

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 8086f54:	aa08      	add	r2, sp, #32
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 8086f56:	441e      	add	r6, r3

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 8086f58:	4631      	mov	r1, r6
 8086f5a:	a80a      	add	r0, sp, #40	; 0x28
 8086f5c:	f7fc fdd5 	bl	8083b0a <mbedtls_asn1_get_int>
 8086f60:	b110      	cbz	r0, 8086f68 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x38>
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8086f62:	f5a0 5574 	sub.w	r5, r0, #15616	; 0x3d00
 8086f66:	e0d4      	b.n	8087112 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
    }

    if( version != 0 )
 8086f68:	9d08      	ldr	r5, [sp, #32]
 8086f6a:	b9dd      	cbnz	r5, 8086fa4 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x74>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
    }

    /* Import N */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 8086f6c:	2302      	movs	r3, #2
 8086f6e:	aa09      	add	r2, sp, #36	; 0x24
 8086f70:	4631      	mov	r1, r6
 8086f72:	a80a      	add	r0, sp, #40	; 0x28
 8086f74:	f7fc fd9c 	bl	8083ab0 <mbedtls_asn1_get_tag>
 8086f78:	4604      	mov	r4, r0
 8086f7a:	2800      	cmp	r0, #0
 8086f7c:	f040 80c5 	bne.w	808710a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 8086f80:	9006      	str	r0, [sp, #24]
 8086f82:	9005      	str	r0, [sp, #20]
 8086f84:	9004      	str	r0, [sp, #16]
 8086f86:	9003      	str	r0, [sp, #12]
 8086f88:	9002      	str	r0, [sp, #8]
 8086f8a:	9001      	str	r0, [sp, #4]
 8086f8c:	9000      	str	r0, [sp, #0]
 8086f8e:	4603      	mov	r3, r0
 8086f90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8086f92:	990a      	ldr	r1, [sp, #40]	; 0x28
 8086f94:	4638      	mov	r0, r7
 8086f96:	f7fd f879 	bl	808408c <mbedtls_rsa_import_raw>
 8086f9a:	4604      	mov	r4, r0
 8086f9c:	2800      	cmp	r0, #0
 8086f9e:	f040 80b4 	bne.w	808710a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 8086fa2:	e001      	b.n	8086fa8 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x78>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    if( version != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
 8086fa4:	4d5c      	ldr	r5, [pc, #368]	; (8087118 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e8>)
 8086fa6:	e0b4      	b.n	8087112 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, p, len, NULL, 0, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 8086fa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8086faa:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 8086fac:	4631      	mov	r1, r6
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, p, len, NULL, 0, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 8086fae:	4413      	add	r3, r2
 8086fb0:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 8086fb2:	aa09      	add	r2, sp, #36	; 0x24
 8086fb4:	2302      	movs	r3, #2
 8086fb6:	a80a      	add	r0, sp, #40	; 0x28
 8086fb8:	f7fc fd7a 	bl	8083ab0 <mbedtls_asn1_get_tag>
 8086fbc:	4604      	mov	r4, r0
 8086fbe:	2800      	cmp	r0, #0
 8086fc0:	f040 80a3 	bne.w	808710a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 8086fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8086fc6:	9404      	str	r4, [sp, #16]
 8086fc8:	9306      	str	r3, [sp, #24]
 8086fca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8086fcc:	9403      	str	r4, [sp, #12]
 8086fce:	9305      	str	r3, [sp, #20]
 8086fd0:	9402      	str	r4, [sp, #8]
 8086fd2:	9401      	str	r4, [sp, #4]
 8086fd4:	9400      	str	r4, [sp, #0]
 8086fd6:	4623      	mov	r3, r4
 8086fd8:	4622      	mov	r2, r4
 8086fda:	4621      	mov	r1, r4
 8086fdc:	4638      	mov	r0, r7
 8086fde:	f7fd f855 	bl	808408c <mbedtls_rsa_import_raw>
 8086fe2:	4604      	mov	r4, r0
 8086fe4:	2800      	cmp	r0, #0
 8086fe6:	f040 8090 	bne.w	808710a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        NULL, 0, p, len ) ) != 0 )
        goto cleanup;
    p += len;
 8086fea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8086fec:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Import D */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 8086fee:	4631      	mov	r1, r6
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        NULL, 0, p, len ) ) != 0 )
        goto cleanup;
    p += len;
 8086ff0:	4413      	add	r3, r2
 8086ff2:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import D */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 8086ff4:	aa09      	add	r2, sp, #36	; 0x24
 8086ff6:	2302      	movs	r3, #2
 8086ff8:	a80a      	add	r0, sp, #40	; 0x28
 8086ffa:	f7fc fd59 	bl	8083ab0 <mbedtls_asn1_get_tag>
 8086ffe:	4604      	mov	r4, r0
 8087000:	2800      	cmp	r0, #0
 8087002:	f040 8082 	bne.w	808710a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 8087006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8087008:	9406      	str	r4, [sp, #24]
 808700a:	9304      	str	r3, [sp, #16]
 808700c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808700e:	9405      	str	r4, [sp, #20]
 8087010:	9303      	str	r3, [sp, #12]
 8087012:	9402      	str	r4, [sp, #8]
 8087014:	9401      	str	r4, [sp, #4]
 8087016:	9400      	str	r4, [sp, #0]
 8087018:	4623      	mov	r3, r4
 808701a:	4622      	mov	r2, r4
 808701c:	4621      	mov	r1, r4
 808701e:	4638      	mov	r0, r7
 8087020:	f7fd f834 	bl	808408c <mbedtls_rsa_import_raw>
 8087024:	4604      	mov	r4, r0
 8087026:	2800      	cmp	r0, #0
 8087028:	d16f      	bne.n	808710a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        p, len, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 808702a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 808702c:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Import P */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 808702e:	4631      	mov	r1, r6
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        p, len, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 8087030:	4413      	add	r3, r2
 8087032:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import P */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 8087034:	aa09      	add	r2, sp, #36	; 0x24
 8087036:	2302      	movs	r3, #2
 8087038:	a80a      	add	r0, sp, #40	; 0x28
 808703a:	f7fc fd39 	bl	8083ab0 <mbedtls_asn1_get_tag>
 808703e:	4604      	mov	r4, r0
 8087040:	2800      	cmp	r0, #0
 8087042:	d162      	bne.n	808710a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 8087044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8087046:	2200      	movs	r2, #0
 8087048:	9300      	str	r3, [sp, #0]
 808704a:	9206      	str	r2, [sp, #24]
 808704c:	9205      	str	r2, [sp, #20]
 808704e:	9204      	str	r2, [sp, #16]
 8087050:	9203      	str	r2, [sp, #12]
 8087052:	9202      	str	r2, [sp, #8]
 8087054:	9201      	str	r2, [sp, #4]
 8087056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8087058:	4611      	mov	r1, r2
 808705a:	4638      	mov	r0, r7
 808705c:	f7fd f816 	bl	808408c <mbedtls_rsa_import_raw>
 8087060:	4604      	mov	r4, r0
 8087062:	2800      	cmp	r0, #0
 8087064:	d151      	bne.n	808710a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, p, len, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 8087066:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8087068:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Import Q */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 808706a:	4631      	mov	r1, r6
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, p, len, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 808706c:	4413      	add	r3, r2
 808706e:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import Q */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 8087070:	aa09      	add	r2, sp, #36	; 0x24
 8087072:	2302      	movs	r3, #2
 8087074:	a80a      	add	r0, sp, #40	; 0x28
 8087076:	f7fc fd1b 	bl	8083ab0 <mbedtls_asn1_get_tag>
 808707a:	4604      	mov	r4, r0
 808707c:	2800      	cmp	r0, #0
 808707e:	d144      	bne.n	808710a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 8087080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8087082:	9406      	str	r4, [sp, #24]
 8087084:	9302      	str	r3, [sp, #8]
 8087086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8087088:	9405      	str	r4, [sp, #20]
 808708a:	9404      	str	r4, [sp, #16]
 808708c:	9403      	str	r4, [sp, #12]
 808708e:	9301      	str	r3, [sp, #4]
 8087090:	9400      	str	r4, [sp, #0]
 8087092:	4623      	mov	r3, r4
 8087094:	4622      	mov	r2, r4
 8087096:	4621      	mov	r1, r4
 8087098:	4638      	mov	r0, r7
 808709a:	f7fc fff7 	bl	808408c <mbedtls_rsa_import_raw>
 808709e:	4604      	mov	r4, r0
 80870a0:	2800      	cmp	r0, #0
 80870a2:	d132      	bne.n	808710a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, p, len,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 80870a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80870a6:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Complete the RSA private key */
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
 80870a8:	4638      	mov	r0, r7
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, p, len,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 80870aa:	4413      	add	r3, r2
 80870ac:	930a      	str	r3, [sp, #40]	; 0x28

    /* Complete the RSA private key */
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
 80870ae:	f7fd f82b 	bl	8084108 <mbedtls_rsa_complete>
 80870b2:	4604      	mov	r4, r0
 80870b4:	b9c8      	cbnz	r0, 80870ea <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1ba>
        goto cleanup;

    /* Check optional parameters */
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
 80870b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80870b8:	4631      	mov	r1, r6
 80870ba:	a80a      	add	r0, sp, #40	; 0x28
 80870bc:	f7fc fd49 	bl	8083b52 <mbedtls_asn1_get_mpi>
 80870c0:	4604      	mov	r4, r0
 80870c2:	bb10      	cbnz	r0, 808710a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
    /* Complete the RSA private key */
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
        goto cleanup;

    /* Check optional parameters */
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
 80870c4:	aa0b      	add	r2, sp, #44	; 0x2c
 80870c6:	4631      	mov	r1, r6
 80870c8:	a80a      	add	r0, sp, #40	; 0x28
 80870ca:	f7fc fd42 	bl	8083b52 <mbedtls_asn1_get_mpi>
 80870ce:	4604      	mov	r4, r0
 80870d0:	b9d8      	cbnz	r0, 808710a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
 80870d2:	aa0b      	add	r2, sp, #44	; 0x2c
 80870d4:	4631      	mov	r1, r6
 80870d6:	a80a      	add	r0, sp, #40	; 0x28
 80870d8:	f7fc fd3b 	bl	8083b52 <mbedtls_asn1_get_mpi>
 80870dc:	4604      	mov	r4, r0
 80870de:	b9a0      	cbnz	r0, 808710a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        goto cleanup;

    if( p != end )
    {
        ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH ;
 80870e0:	4b0e      	ldr	r3, [pc, #56]	; (808711c <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1ec>)
 80870e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80870e4:	4296      	cmp	r6, r2
 80870e6:	bf18      	it	ne
 80870e8:	461c      	movne	r4, r3
    }

cleanup:

    mbedtls_mpi_free( &T );
 80870ea:	a80b      	add	r0, sp, #44	; 0x2c
 80870ec:	f004 fb43 	bl	808b776 <mbedtls_mpi_free>

    if( ret != 0 )
 80870f0:	b17c      	cbz	r4, 8087112 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
    {
        /* Wrap error code if it's coming from a lower level */
        if( ( ret & 0xff80 ) == 0 )
 80870f2:	f64f 7380 	movw	r3, #65408	; 0xff80
 80870f6:	4023      	ands	r3, r4
 80870f8:	b913      	cbnz	r3, 8087100 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1d0>
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret;
 80870fa:	f5a4 5574 	sub.w	r5, r4, #15616	; 0x3d00
 80870fe:	e000      	b.n	8087102 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1d2>
        else
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT;
 8087100:	4d07      	ldr	r5, [pc, #28]	; (8087120 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1f0>)

        mbedtls_rsa_free( rsa );
 8087102:	4638      	mov	r0, r7
 8087104:	f7fe f89a 	bl	808523c <mbedtls_rsa_free>
 8087108:	e003      	b.n	8087112 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH ;
    }

cleanup:

    mbedtls_mpi_free( &T );
 808710a:	a80b      	add	r0, sp, #44	; 0x2c
 808710c:	f004 fb33 	bl	808b776 <mbedtls_mpi_free>
 8087110:	e7ef      	b.n	80870f2 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1c2>

        mbedtls_rsa_free( rsa );
    }

    return( ret );
}
 8087112:	4628      	mov	r0, r5
 8087114:	b00f      	add	sp, #60	; 0x3c
 8087116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8087118:	ffffc280 	.word	0xffffc280
 808711c:	ffffc29a 	.word	0xffffc29a
 8087120:	ffffc300 	.word	0xffffc300

08087124 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>:
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */
static int pk_get_pk_alg( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_pk_type_t *pk_alg, mbedtls_asn1_buf *params )
{
 8087124:	b530      	push	{r4, r5, lr}
 8087126:	4615      	mov	r5, r2
 8087128:	b085      	sub	sp, #20
    int ret;
    mbedtls_asn1_buf alg_oid;

    memset( params, 0, sizeof(mbedtls_asn1_buf) );
 808712a:	2200      	movs	r2, #0
 808712c:	601a      	str	r2, [r3, #0]
 808712e:	605a      	str	r2, [r3, #4]
 8087130:	609a      	str	r2, [r3, #8]

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 8087132:	aa01      	add	r2, sp, #4
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */
static int pk_get_pk_alg( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_pk_type_t *pk_alg, mbedtls_asn1_buf *params )
{
 8087134:	461c      	mov	r4, r3
    int ret;
    mbedtls_asn1_buf alg_oid;

    memset( params, 0, sizeof(mbedtls_asn1_buf) );

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 8087136:	f7fc fd94 	bl	8083c62 <mbedtls_asn1_get_alg>
 808713a:	b110      	cbz	r0, 8087142 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x1e>
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );
 808713c:	f5a0 506a 	sub.w	r0, r0, #14976	; 0x3a80
 8087140:	e014      	b.n	808716c <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>

    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
 8087142:	4629      	mov	r1, r5
 8087144:	a801      	add	r0, sp, #4
 8087146:	f7fe f947 	bl	80853d8 <mbedtls_oid_get_pk_alg>
 808714a:	b960      	cbnz	r0, 8087166 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x42>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    /*
     * No parameters with RSA (only for EC)
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
 808714c:	782b      	ldrb	r3, [r5, #0]
 808714e:	2b01      	cmp	r3, #1
 8087150:	d10c      	bne.n	808716c <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 8087152:	6823      	ldr	r3, [r4, #0]
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    /*
     * No parameters with RSA (only for EC)
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
 8087154:	2b05      	cmp	r3, #5
 8087156:	d000      	beq.n	808715a <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x36>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 8087158:	b93b      	cbnz	r3, 808716a <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x46>
 808715a:	6863      	ldr	r3, [r4, #4]
                params->len != 0 ) )
    {
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 808715c:	4804      	ldr	r0, [pc, #16]	; (8087170 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x4c>)
 808715e:	2b00      	cmp	r3, #0
 8087160:	bf08      	it	eq
 8087162:	2000      	moveq	r0, #0
 8087164:	e002      	b.n	808716c <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );

    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 8087166:	4803      	ldr	r0, [pc, #12]	; (8087174 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x50>)
 8087168:	e000      	b.n	808716c <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
                params->len != 0 ) )
    {
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 808716a:	4801      	ldr	r0, [pc, #4]	; (8087170 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x4c>)
    }

    return( 0 );
}
 808716c:	b005      	add	sp, #20
 808716e:	bd30      	pop	{r4, r5, pc}
 8087170:	ffffc580 	.word	0xffffc580
 8087174:	ffffc380 	.word	0xffffc380

08087178 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>:
 */
static int pk_parse_key_pkcs8_unencrypted_der(
                                    mbedtls_pk_context *pk,
                                    const unsigned char* key,
                                    size_t keylen )
{
 8087178:	b530      	push	{r4, r5, lr}
    int ret, version;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
    unsigned char *end = p + keylen;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 808717a:	2300      	movs	r3, #0
 */
static int pk_parse_key_pkcs8_unencrypted_der(
                                    mbedtls_pk_context *pk,
                                    const unsigned char* key,
                                    size_t keylen )
{
 808717c:	b089      	sub	sp, #36	; 0x24
 808717e:	4605      	mov	r5, r0
    int ret, version;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
 8087180:	9104      	str	r1, [sp, #16]
    unsigned char *end = p + keylen;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 8087182:	f88d 3007 	strb.w	r3, [sp, #7]
     *    PrivateKey ::= OCTET STRING
     *
     *  The PrivateKey OCTET STRING is a SEC1 ECPrivateKey
     */

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8087186:	4411      	add	r1, r2
 8087188:	2330      	movs	r3, #48	; 0x30
 808718a:	aa03      	add	r2, sp, #12
 808718c:	a804      	add	r0, sp, #16
 808718e:	f7fc fc8f 	bl	8083ab0 <mbedtls_asn1_get_tag>
 8087192:	b9c8      	cbnz	r0, 80871c8 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x50>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 8087194:	9b03      	ldr	r3, [sp, #12]
 8087196:	9c04      	ldr	r4, [sp, #16]

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 8087198:	aa02      	add	r2, sp, #8
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 808719a:	441c      	add	r4, r3

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 808719c:	4621      	mov	r1, r4
 808719e:	a804      	add	r0, sp, #16
 80871a0:	f7fc fcb3 	bl	8083b0a <mbedtls_asn1_get_int>
 80871a4:	b980      	cbnz	r0, 80871c8 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x50>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( version != 0 )
 80871a6:	9b02      	ldr	r3, [sp, #8]
 80871a8:	bb7b      	cbnz	r3, 808720a <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x92>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION + ret );

    if( ( ret = pk_get_pk_alg( &p, end, &pk_alg, &params ) ) != 0 )
 80871aa:	ab05      	add	r3, sp, #20
 80871ac:	f10d 0207 	add.w	r2, sp, #7
 80871b0:	4621      	mov	r1, r4
 80871b2:	a804      	add	r0, sp, #16
 80871b4:	f7ff ffb6 	bl	8087124 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>
 80871b8:	b930      	cbnz	r0, 80871c8 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x50>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 80871ba:	2304      	movs	r3, #4
 80871bc:	aa03      	add	r2, sp, #12
 80871be:	4621      	mov	r1, r4
 80871c0:	a804      	add	r0, sp, #16
 80871c2:	f7fc fc75 	bl	8083ab0 <mbedtls_asn1_get_tag>
 80871c6:	b110      	cbz	r0, 80871ce <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x56>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 80871c8:	f5a0 5074 	sub.w	r0, r0, #15616	; 0x3d00
 80871cc:	e022      	b.n	8087214 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>

    if( len < 1 )
 80871ce:	9b03      	ldr	r3, [sp, #12]
 80871d0:	b1eb      	cbz	r3, 808720e <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x96>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 80871d2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80871d6:	f005 fd39 	bl	808cc4c <mbedtls_pk_info_from_type>
 80871da:	4601      	mov	r1, r0
 80871dc:	b908      	cbnz	r0, 80871e2 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x6a>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 80871de:	480e      	ldr	r0, [pc, #56]	; (8087218 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xa0>)
 80871e0:	e018      	b.n	8087214 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>

    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 80871e2:	4628      	mov	r0, r5
 80871e4:	f005 fd3a 	bl	808cc5c <mbedtls_pk_setup>
 80871e8:	b9a0      	cbnz	r0, 8087214 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>
        return( ret );

#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA )
 80871ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80871ee:	2b01      	cmp	r3, #1
 80871f0:	d1f5      	bne.n	80871de <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x66>
    {
        if( ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), p, len ) ) != 0 )
 80871f2:	9a03      	ldr	r2, [sp, #12]
 80871f4:	9904      	ldr	r1, [sp, #16]
 80871f6:	6868      	ldr	r0, [r5, #4]
 80871f8:	f7ff fe9a 	bl	8086f30 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
 80871fc:	4604      	mov	r4, r0
 80871fe:	b140      	cbz	r0, 8087212 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9a>
        {
            mbedtls_pk_free( pk );
 8087200:	4628      	mov	r0, r5
 8087202:	f005 fd12 	bl	808cc2a <mbedtls_pk_free>
            return( ret );
 8087206:	4620      	mov	r0, r4
 8087208:	e004      	b.n	8087214 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( version != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION + ret );
 808720a:	4804      	ldr	r0, [pc, #16]	; (808721c <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xa4>)
 808720c:	e002      	b.n	8087214 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( len < 1 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 808720e:	4804      	ldr	r0, [pc, #16]	; (8087220 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xa8>)
 8087210:	e000      	b.n	8087214 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>
        }
    } else
#endif /* MBEDTLS_ECP_C */
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    return( 0 );
 8087212:	2000      	movs	r0, #0
}
 8087214:	b009      	add	sp, #36	; 0x24
 8087216:	bd30      	pop	{r4, r5, pc}
 8087218:	ffffc380 	.word	0xffffc380
 808721c:	ffffc280 	.word	0xffffc280
 8087220:	ffffc2a0 	.word	0xffffc2a0

08087224 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>:
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
static int pk_parse_key_pkcs8_encrypted_der(
                                    mbedtls_pk_context *pk,
                                    unsigned char *key, size_t keylen,
                                    const unsigned char *pwd, size_t pwdlen )
{
 8087224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8087226:	b091      	sub	sp, #68	; 0x44
 8087228:	9e16      	ldr	r6, [sp, #88]	; 0x58
#if defined(MBEDTLS_PKCS12_C)
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_md_type_t md_alg;
#endif

    p = key;
 808722a:	9109      	str	r1, [sp, #36]	; 0x24
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
static int pk_parse_key_pkcs8_encrypted_der(
                                    mbedtls_pk_context *pk,
                                    unsigned char *key, size_t keylen,
                                    const unsigned char *pwd, size_t pwdlen )
{
 808722c:	4605      	mov	r5, r0
 808722e:	461f      	mov	r7, r3
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_md_type_t md_alg;
#endif

    p = key;
    end = p + keylen;
 8087230:	4411      	add	r1, r2

    if( pwdlen == 0 )
 8087232:	2e00      	cmp	r6, #0
 8087234:	d066      	beq.n	8087304 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe0>
     *  EncryptedData ::= OCTET STRING
     *
     *  The EncryptedData OCTET STRING is a PKCS#8 PrivateKeyInfo
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8087236:	2330      	movs	r3, #48	; 0x30
 8087238:	aa08      	add	r2, sp, #32
 808723a:	a809      	add	r0, sp, #36	; 0x24
 808723c:	f7fc fc38 	bl	8083ab0 <mbedtls_asn1_get_tag>
 8087240:	b980      	cbnz	r0, 8087264 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x40>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 8087242:	9b08      	ldr	r3, [sp, #32]
 8087244:	9c09      	ldr	r4, [sp, #36]	; 0x24

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &pbe_alg_oid, &pbe_params ) ) != 0 )
 8087246:	aa0a      	add	r2, sp, #40	; 0x28
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 8087248:	441c      	add	r4, r3

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &pbe_alg_oid, &pbe_params ) ) != 0 )
 808724a:	4621      	mov	r1, r4
 808724c:	ab0d      	add	r3, sp, #52	; 0x34
 808724e:	a809      	add	r0, sp, #36	; 0x24
 8087250:	f7fc fd07 	bl	8083c62 <mbedtls_asn1_get_alg>
 8087254:	b930      	cbnz	r0, 8087264 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x40>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 8087256:	2304      	movs	r3, #4
 8087258:	aa08      	add	r2, sp, #32
 808725a:	4621      	mov	r1, r4
 808725c:	a809      	add	r0, sp, #36	; 0x24
 808725e:	f7fc fc27 	bl	8083ab0 <mbedtls_asn1_get_tag>
 8087262:	b110      	cbz	r0, 808726a <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x46>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8087264:	f5a0 5074 	sub.w	r0, r0, #15616	; 0x3d00
 8087268:	e055      	b.n	8087316 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>

    /*
     * Decrypt EncryptedData with appropriate PBE
     */
#if defined(MBEDTLS_PKCS12_C)
    if( mbedtls_oid_get_pkcs12_pbe_alg( &pbe_alg_oid, &md_alg, &cipher_alg ) == 0 )
 808726a:	f10d 011f 	add.w	r1, sp, #31
 808726e:	f10d 021e 	add.w	r2, sp, #30
 8087272:	a80a      	add	r0, sp, #40	; 0x28
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    buf = p;
 8087274:	9c09      	ldr	r4, [sp, #36]	; 0x24

    /*
     * Decrypt EncryptedData with appropriate PBE
     */
#if defined(MBEDTLS_PKCS12_C)
    if( mbedtls_oid_get_pkcs12_pbe_alg( &pbe_alg_oid, &md_alg, &cipher_alg ) == 0 )
 8087276:	f7fe f911 	bl	808549c <mbedtls_oid_get_pkcs12_pbe_alg>
 808727a:	4601      	mov	r1, r0
 808727c:	b9a0      	cbnz	r0, 80872a8 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x84>
    {
        if( ( ret = mbedtls_pkcs12_pbe( &pbe_params, MBEDTLS_PKCS12_PBE_DECRYPT,
 808727e:	9808      	ldr	r0, [sp, #32]
 8087280:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8087284:	9003      	str	r0, [sp, #12]
 8087286:	9809      	ldr	r0, [sp, #36]	; 0x24
 8087288:	f89d 201e 	ldrb.w	r2, [sp, #30]
 808728c:	9002      	str	r0, [sp, #8]
 808728e:	9404      	str	r4, [sp, #16]
 8087290:	9601      	str	r6, [sp, #4]
 8087292:	9700      	str	r7, [sp, #0]
 8087294:	a80d      	add	r0, sp, #52	; 0x34
 8087296:	f006 fd6f 	bl	808dd78 <mbedtls_pkcs12_pbe>
 808729a:	2800      	cmp	r0, #0
 808729c:	d036      	beq.n	808730c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe8>
                                cipher_alg, md_alg,
                                pwd, pwdlen, p, len, buf ) ) != 0 )
        {
            if( ret == MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH )
 808729e:	f510 5ff0 	cmn.w	r0, #7680	; 0x1e00
 80872a2:	d138      	bne.n	8087316 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
                return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
 80872a4:	481d      	ldr	r0, [pc, #116]	; (808731c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf8>)
 80872a6:	e036      	b.n	8087316 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
            return( ret );
        }

        decrypted = 1;
    }
    else if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS12_PBE_SHA1_RC4_128, &pbe_alg_oid ) == 0 )
 80872a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80872aa:	2a0a      	cmp	r2, #10
 80872ac:	d114      	bne.n	80872d8 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xb4>
 80872ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80872b0:	481b      	ldr	r0, [pc, #108]	; (8087320 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xfc>)
 80872b2:	f00c fc55 	bl	8093b60 <memcmp>
 80872b6:	4601      	mov	r1, r0
 80872b8:	bb30      	cbnz	r0, 8087308 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe4>
    {
        if( ( ret = mbedtls_pkcs12_pbe_sha1_rc4_128( &pbe_params,
 80872ba:	9b08      	ldr	r3, [sp, #32]
 80872bc:	9402      	str	r4, [sp, #8]
 80872be:	9301      	str	r3, [sp, #4]
 80872c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80872c2:	463a      	mov	r2, r7
 80872c4:	9300      	str	r3, [sp, #0]
 80872c6:	a80d      	add	r0, sp, #52	; 0x34
 80872c8:	4633      	mov	r3, r6
 80872ca:	f006 fc77 	bl	808dbbc <mbedtls_pkcs12_pbe_sha1_rc4_128>
 80872ce:	bb10      	cbnz	r0, 8087316 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
        }

        // Best guess for password mismatch when using RC4. If first tag is
        // not MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE
        //
        if( *buf != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 80872d0:	7823      	ldrb	r3, [r4, #0]
 80872d2:	2b30      	cmp	r3, #48	; 0x30
 80872d4:	d01a      	beq.n	808730c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe8>
 80872d6:	e7e5      	b.n	80872a4 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x80>
        decrypted = 1;
    }
    else
#endif /* MBEDTLS_PKCS12_C */
#if defined(MBEDTLS_PKCS5_C)
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBES2, &pbe_alg_oid ) == 0 )
 80872d8:	2a09      	cmp	r2, #9
 80872da:	d115      	bne.n	8087308 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe4>
 80872dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80872de:	4811      	ldr	r0, [pc, #68]	; (8087324 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x100>)
 80872e0:	f00c fc3e 	bl	8093b60 <memcmp>
 80872e4:	4601      	mov	r1, r0
 80872e6:	b978      	cbnz	r0, 8087308 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe4>
    {
        if( ( ret = mbedtls_pkcs5_pbes2( &pbe_params, MBEDTLS_PKCS5_DECRYPT, pwd, pwdlen,
 80872e8:	9b08      	ldr	r3, [sp, #32]
 80872ea:	9402      	str	r4, [sp, #8]
 80872ec:	9301      	str	r3, [sp, #4]
 80872ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80872f0:	463a      	mov	r2, r7
 80872f2:	9300      	str	r3, [sp, #0]
 80872f4:	a80d      	add	r0, sp, #52	; 0x34
 80872f6:	4633      	mov	r3, r6
 80872f8:	f7fb ff32 	bl	8083160 <mbedtls_pkcs5_pbes2>
 80872fc:	b130      	cbz	r0, 808730c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe8>
                                  p, len, buf ) ) != 0 )
        {
            if( ret == MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH )
 80872fe:	f510 5f38 	cmn.w	r0, #11776	; 0x2e00
 8087302:	e7ce      	b.n	80872a2 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x7e>

    p = key;
    end = p + keylen;

    if( pwdlen == 0 )
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
 8087304:	4808      	ldr	r0, [pc, #32]	; (8087328 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x104>)
 8087306:	e006      	b.n	8087316 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
    {
        ((void) pwd);
    }

    if( decrypted == 0 )
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
 8087308:	4808      	ldr	r0, [pc, #32]	; (808732c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x108>)
 808730a:	e004      	b.n	8087316 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>

    return( pk_parse_key_pkcs8_unencrypted_der( pk, buf, len ) );
 808730c:	9a08      	ldr	r2, [sp, #32]
 808730e:	4621      	mov	r1, r4
 8087310:	4628      	mov	r0, r5
 8087312:	f7ff ff31 	bl	8087178 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
}
 8087316:	b011      	add	sp, #68	; 0x44
 8087318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808731a:	bf00      	nop
 808731c:	ffffc480 	.word	0xffffc480
 8087320:	080953f5 	.word	0x080953f5
 8087324:	08095400 	.word	0x08095400
 8087328:	ffffc400 	.word	0xffffc400
 808732c:	ffffc680 	.word	0xffffc680

08087330 <mbedtls_pk_parse_subpubkey>:
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
 8087330:	b5f0      	push	{r4, r5, r6, r7, lr}
    int ret;
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 8087332:	2300      	movs	r3, #0
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
 8087334:	b08f      	sub	sp, #60	; 0x3c
 8087336:	4617      	mov	r7, r2
    int ret;
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 8087338:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    const mbedtls_pk_info_t *pk_info;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 808733c:	aa09      	add	r2, sp, #36	; 0x24
 808733e:	2330      	movs	r3, #48	; 0x30
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
 8087340:	4605      	mov	r5, r0
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
    const mbedtls_pk_info_t *pk_info;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8087342:	f7fc fbb5 	bl	8083ab0 <mbedtls_asn1_get_tag>
 8087346:	b110      	cbz	r0, 808734e <mbedtls_pk_parse_subpubkey+0x1e>
                    MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8087348:	f5a0 5074 	sub.w	r0, r0, #15616	; 0x3d00
 808734c:	e090      	b.n	8087470 <mbedtls_pk_parse_subpubkey+0x140>
    }

    end = *p + len;
 808734e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8087350:	682e      	ldr	r6, [r5, #0]

    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
 8087352:	f10d 0223 	add.w	r2, sp, #35	; 0x23
                    MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = *p + len;
 8087356:	441e      	add	r6, r3

    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
 8087358:	4631      	mov	r1, r6
 808735a:	ab0b      	add	r3, sp, #44	; 0x2c
 808735c:	4628      	mov	r0, r5
 808735e:	f7ff fee1 	bl	8087124 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>
 8087362:	2800      	cmp	r0, #0
 8087364:	f040 8084 	bne.w	8087470 <mbedtls_pk_parse_subpubkey+0x140>
        return( ret );

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 8087368:	aa09      	add	r2, sp, #36	; 0x24
 808736a:	4631      	mov	r1, r6
 808736c:	4628      	mov	r0, r5
 808736e:	f7fc fc28 	bl	8083bc2 <mbedtls_asn1_get_bitstring_null>
 8087372:	b110      	cbz	r0, 808737a <mbedtls_pk_parse_subpubkey+0x4a>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 8087374:	f5a0 506c 	sub.w	r0, r0, #15104	; 0x3b00
 8087378:	e07a      	b.n	8087470 <mbedtls_pk_parse_subpubkey+0x140>

    if( *p + len != end )
 808737a:	682a      	ldr	r2, [r5, #0]
 808737c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808737e:	4413      	add	r3, r2
 8087380:	429e      	cmp	r6, r3
 8087382:	d169      	bne.n	8087458 <mbedtls_pk_parse_subpubkey+0x128>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 8087384:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
 8087388:	f005 fc60 	bl	808cc4c <mbedtls_pk_info_from_type>
 808738c:	4601      	mov	r1, r0
 808738e:	2800      	cmp	r0, #0
 8087390:	d064      	beq.n	808745c <mbedtls_pk_parse_subpubkey+0x12c>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 8087392:	4638      	mov	r0, r7
 8087394:	f005 fc62 	bl	808cc5c <mbedtls_pk_setup>
 8087398:	4604      	mov	r4, r0
 808739a:	2800      	cmp	r0, #0
 808739c:	d160      	bne.n	8087460 <mbedtls_pk_parse_subpubkey+0x130>
        return( ret );

#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA )
 808739e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80873a2:	2b01      	cmp	r3, #1
 80873a4:	d162      	bne.n	808746c <mbedtls_pk_parse_subpubkey+0x13c>
                             mbedtls_rsa_context *rsa )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80873a6:	2330      	movs	r3, #48	; 0x30
 80873a8:	aa0a      	add	r2, sp, #40	; 0x28
 80873aa:	4631      	mov	r1, r6
 80873ac:	4628      	mov	r0, r5
 80873ae:	687c      	ldr	r4, [r7, #4]
 80873b0:	f7fc fb7e 	bl	8083ab0 <mbedtls_asn1_get_tag>
 80873b4:	bb28      	cbnz	r0, 8087402 <mbedtls_pk_parse_subpubkey+0xd2>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( *p + len != end )
 80873b6:	682a      	ldr	r2, [r5, #0]
 80873b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80873ba:	4413      	add	r3, r2
 80873bc:	429e      	cmp	r6, r3
 80873be:	d146      	bne.n	808744e <mbedtls_pk_parse_subpubkey+0x11e>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    /* Import N */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80873c0:	2302      	movs	r3, #2
 80873c2:	aa0a      	add	r2, sp, #40	; 0x28
 80873c4:	4631      	mov	r1, r6
 80873c6:	4628      	mov	r0, r5
 80873c8:	f7fc fb72 	bl	8083ab0 <mbedtls_asn1_get_tag>
 80873cc:	b9c8      	cbnz	r0, 8087402 <mbedtls_pk_parse_subpubkey+0xd2>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( ( ret = mbedtls_rsa_import_raw( rsa, *p, len, NULL, 0, NULL, 0,
 80873ce:	2300      	movs	r3, #0
 80873d0:	9306      	str	r3, [sp, #24]
 80873d2:	9305      	str	r3, [sp, #20]
 80873d4:	9304      	str	r3, [sp, #16]
 80873d6:	9303      	str	r3, [sp, #12]
 80873d8:	9302      	str	r3, [sp, #8]
 80873da:	9301      	str	r3, [sp, #4]
 80873dc:	9300      	str	r3, [sp, #0]
 80873de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80873e0:	6829      	ldr	r1, [r5, #0]
 80873e2:	4620      	mov	r0, r4
 80873e4:	f7fc fe52 	bl	808408c <mbedtls_rsa_import_raw>
 80873e8:	2800      	cmp	r0, #0
 80873ea:	d13d      	bne.n	8087468 <mbedtls_pk_parse_subpubkey+0x138>
                                        NULL, 0, NULL, 0 ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
 80873ec:	682a      	ldr	r2, [r5, #0]
 80873ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80873f0:	4631      	mov	r1, r6

    if( ( ret = mbedtls_rsa_import_raw( rsa, *p, len, NULL, 0, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
 80873f2:	4413      	add	r3, r2
 80873f4:	602b      	str	r3, [r5, #0]

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80873f6:	aa0a      	add	r2, sp, #40	; 0x28
 80873f8:	2302      	movs	r3, #2
 80873fa:	4628      	mov	r0, r5
 80873fc:	f7fc fb58 	bl	8083ab0 <mbedtls_asn1_get_tag>
 8087400:	b118      	cbz	r0, 808740a <mbedtls_pk_parse_subpubkey+0xda>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 8087402:	f5a0 546c 	sub.w	r4, r0, #15104	; 0x3b00
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;

    if( ret == 0 && *p != end )
 8087406:	b1fc      	cbz	r4, 8087448 <mbedtls_pk_parse_subpubkey+0x118>
 8087408:	e022      	b.n	8087450 <mbedtls_pk_parse_subpubkey+0x120>

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
 808740a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808740c:	9004      	str	r0, [sp, #16]
 808740e:	9306      	str	r3, [sp, #24]
 8087410:	682b      	ldr	r3, [r5, #0]
 8087412:	9003      	str	r0, [sp, #12]
 8087414:	9305      	str	r3, [sp, #20]
 8087416:	9002      	str	r0, [sp, #8]
 8087418:	9001      	str	r0, [sp, #4]
 808741a:	9000      	str	r0, [sp, #0]
 808741c:	4603      	mov	r3, r0
 808741e:	4602      	mov	r2, r0
 8087420:	4601      	mov	r1, r0
 8087422:	4620      	mov	r0, r4
 8087424:	f7fc fe32 	bl	808408c <mbedtls_rsa_import_raw>
 8087428:	b9f0      	cbnz	r0, 8087468 <mbedtls_pk_parse_subpubkey+0x138>
                                        NULL, 0, *p, len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
 808742a:	682a      	ldr	r2, [r5, #0]
 808742c:	9b0a      	ldr	r3, [sp, #40]	; 0x28

    if( mbedtls_rsa_complete( rsa ) != 0 ||
 808742e:	4620      	mov	r0, r4

    if( ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        NULL, 0, *p, len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
 8087430:	4413      	add	r3, r2
 8087432:	602b      	str	r3, [r5, #0]

    if( mbedtls_rsa_complete( rsa ) != 0 ||
 8087434:	f7fc fe68 	bl	8084108 <mbedtls_rsa_complete>
 8087438:	b9b0      	cbnz	r0, 8087468 <mbedtls_pk_parse_subpubkey+0x138>
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
 808743a:	4620      	mov	r0, r4
 808743c:	f7fc ff20 	bl	8084280 <mbedtls_rsa_check_pubkey>
                                        NULL, 0, *p, len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;

    if( mbedtls_rsa_complete( rsa ) != 0 ||
 8087440:	b990      	cbnz	r0, 8087468 <mbedtls_pk_parse_subpubkey+0x138>
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
    {
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
    }

    if( *p != end )
 8087442:	682b      	ldr	r3, [r5, #0]
 8087444:	429e      	cmp	r6, r3
 8087446:	d102      	bne.n	808744e <mbedtls_pk_parse_subpubkey+0x11e>
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;

    if( ret == 0 && *p != end )
 8087448:	682b      	ldr	r3, [r5, #0]
 808744a:	429e      	cmp	r6, r3
 808744c:	d00a      	beq.n	8087464 <mbedtls_pk_parse_subpubkey+0x134>
        ret = MBEDTLS_ERR_PK_INVALID_PUBKEY
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;
 808744e:	4c09      	ldr	r4, [pc, #36]	; (8087474 <mbedtls_pk_parse_subpubkey+0x144>)

    if( ret != 0 )
        mbedtls_pk_free( pk );
 8087450:	4638      	mov	r0, r7
 8087452:	f005 fbea 	bl	808cc2a <mbedtls_pk_free>
 8087456:	e003      	b.n	8087460 <mbedtls_pk_parse_subpubkey+0x130>
    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( *p + len != end )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8087458:	4806      	ldr	r0, [pc, #24]	; (8087474 <mbedtls_pk_parse_subpubkey+0x144>)
 808745a:	e009      	b.n	8087470 <mbedtls_pk_parse_subpubkey+0x140>

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 808745c:	4806      	ldr	r0, [pc, #24]	; (8087478 <mbedtls_pk_parse_subpubkey+0x148>)
 808745e:	e007      	b.n	8087470 <mbedtls_pk_parse_subpubkey+0x140>
 8087460:	4620      	mov	r0, r4
 8087462:	e005      	b.n	8087470 <mbedtls_pk_parse_subpubkey+0x140>
 8087464:	2000      	movs	r0, #0
 8087466:	e003      	b.n	8087470 <mbedtls_pk_parse_subpubkey+0x140>
    *p += len;

    if( mbedtls_rsa_complete( rsa ) != 0 ||
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
    {
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
 8087468:	4c04      	ldr	r4, [pc, #16]	; (808747c <mbedtls_pk_parse_subpubkey+0x14c>)
 808746a:	e7f1      	b.n	8087450 <mbedtls_pk_parse_subpubkey+0x120>
        ret = pk_use_ecparams( &alg_params, &mbedtls_pk_ec( *pk )->grp );
        if( ret == 0 )
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;
 808746c:	4c02      	ldr	r4, [pc, #8]	; (8087478 <mbedtls_pk_parse_subpubkey+0x148>)
 808746e:	e7ef      	b.n	8087450 <mbedtls_pk_parse_subpubkey+0x120>

    if( ret != 0 )
        mbedtls_pk_free( pk );

    return( ret );
}
 8087470:	b00f      	add	sp, #60	; 0x3c
 8087472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8087474:	ffffc49a 	.word	0xffffc49a
 8087478:	ffffc380 	.word	0xffffc380
 808747c:	ffffc500 	.word	0xffffc500

08087480 <mbedtls_pk_parse_key>:
 * Parse a private key
 */
int mbedtls_pk_parse_key( mbedtls_pk_context *pk,
                  const unsigned char *key, size_t keylen,
                  const unsigned char *pwd, size_t pwdlen )
{
 8087480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8087484:	4616      	mov	r6, r2
 8087486:	b089      	sub	sp, #36	; 0x24
 8087488:	4605      	mov	r5, r0

#if defined(MBEDTLS_PEM_PARSE_C)
    size_t len;
    mbedtls_pem_context pem;

    mbedtls_pem_init( &pem );
 808748a:	a805      	add	r0, sp, #20
 * Parse a private key
 */
int mbedtls_pk_parse_key( mbedtls_pk_context *pk,
                  const unsigned char *key, size_t keylen,
                  const unsigned char *pwd, size_t pwdlen )
{
 808748c:	460c      	mov	r4, r1
 808748e:	461f      	mov	r7, r3
 8087490:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40

#if defined(MBEDTLS_PEM_PARSE_C)
    size_t len;
    mbedtls_pem_context pem;

    mbedtls_pem_init( &pem );
 8087494:	f007 fedc 	bl	808f250 <mbedtls_pem_init>

#if defined(MBEDTLS_RSA_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( keylen == 0 || key[keylen - 1] != '\0' )
 8087498:	2e00      	cmp	r6, #0
 808749a:	f000 80b8 	beq.w	808760e <mbedtls_pk_parse_key+0x18e>
 808749e:	f106 39ff 	add.w	r9, r6, #4294967295
 80874a2:	f814 3009 	ldrb.w	r3, [r4, r9]
 80874a6:	b11b      	cbz	r3, 80874b0 <mbedtls_pk_parse_key+0x30>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
        return( ret );
#endif /* MBEDTLS_ECP_C */

    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( keylen == 0 || key[keylen - 1] != '\0' )
 80874a8:	f814 3009 	ldrb.w	r3, [r4, r9]
 80874ac:	bb6b      	cbnz	r3, 808750a <mbedtls_pk_parse_key+0x8a>
 80874ae:	e031      	b.n	8087514 <mbedtls_pk_parse_key+0x94>
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
                               "-----BEGIN RSA PRIVATE KEY-----",
                               "-----END RSA PRIVATE KEY-----",
                               key, pwd, pwdlen, &len );
 80874b0:	ab04      	add	r3, sp, #16
 80874b2:	9302      	str	r3, [sp, #8]
 80874b4:	e88d 0180 	stmia.w	sp, {r7, r8}
 80874b8:	4623      	mov	r3, r4
 80874ba:	4a57      	ldr	r2, [pc, #348]	; (8087618 <mbedtls_pk_parse_key+0x198>)
 80874bc:	4957      	ldr	r1, [pc, #348]	; (808761c <mbedtls_pk_parse_key+0x19c>)
 80874be:	a805      	add	r0, sp, #20
 80874c0:	f007 fecc 	bl	808f25c <mbedtls_pem_read_buffer>

    if( ret == 0 )
 80874c4:	b978      	cbnz	r0, 80874e6 <mbedtls_pk_parse_key+0x66>
    {
        pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
 80874c6:	2001      	movs	r0, #1
 80874c8:	f005 fbc0 	bl	808cc4c <mbedtls_pk_info_from_type>
        if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
 80874cc:	4601      	mov	r1, r0
 80874ce:	4628      	mov	r0, r5
 80874d0:	f005 fbc4 	bl	808cc5c <mbedtls_pk_setup>
 80874d4:	4604      	mov	r4, r0
 80874d6:	2800      	cmp	r0, #0
 80874d8:	d160      	bne.n	808759c <mbedtls_pk_parse_key+0x11c>
 80874da:	9a06      	ldr	r2, [sp, #24]
 80874dc:	9905      	ldr	r1, [sp, #20]
 80874de:	6868      	ldr	r0, [r5, #4]
 80874e0:	f7ff fd26 	bl	8086f30 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
 80874e4:	e058      	b.n	8087598 <mbedtls_pk_parse_key+0x118>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
 80874e6:	f510 5f9c 	cmn.w	r0, #4992	; 0x1380
 80874ea:	d101      	bne.n	80874f0 <mbedtls_pk_parse_key+0x70>
        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
 80874ec:	484c      	ldr	r0, [pc, #304]	; (8087620 <mbedtls_pk_parse_key+0x1a0>)
 80874ee:	e08f      	b.n	8087610 <mbedtls_pk_parse_key+0x190>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
 80874f0:	f510 5f98 	cmn.w	r0, #4864	; 0x1300
 80874f4:	f000 8084 	beq.w	8087600 <mbedtls_pk_parse_key+0x180>
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 80874f8:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 80874fc:	f040 8088 	bne.w	8087610 <mbedtls_pk_parse_key+0x190>
 8087500:	e7d2      	b.n	80874a8 <mbedtls_pk_parse_key+0x28>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 8087502:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 8087506:	f040 8083 	bne.w	8087610 <mbedtls_pk_parse_key+0x190>
        return( ret );

#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( keylen == 0 || key[keylen - 1] != '\0' )
 808750a:	19a3      	adds	r3, r4, r6
 808750c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8087510:	b9ab      	cbnz	r3, 808753e <mbedtls_pk_parse_key+0xbe>
 8087512:	e02d      	b.n	8087570 <mbedtls_pk_parse_key+0xf0>
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
                               "-----BEGIN PRIVATE KEY-----",
                               "-----END PRIVATE KEY-----",
                               key, NULL, 0, &len );
 8087514:	aa04      	add	r2, sp, #16
 8087516:	9202      	str	r2, [sp, #8]
 8087518:	9301      	str	r3, [sp, #4]
 808751a:	9300      	str	r3, [sp, #0]
 808751c:	4a41      	ldr	r2, [pc, #260]	; (8087624 <mbedtls_pk_parse_key+0x1a4>)
 808751e:	4623      	mov	r3, r4
 8087520:	4941      	ldr	r1, [pc, #260]	; (8087628 <mbedtls_pk_parse_key+0x1a8>)
 8087522:	a805      	add	r0, sp, #20
 8087524:	f007 fe9a 	bl	808f25c <mbedtls_pem_read_buffer>
    if( ret == 0 )
 8087528:	2800      	cmp	r0, #0
 808752a:	d1ea      	bne.n	8087502 <mbedtls_pk_parse_key+0x82>
    {
        if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk,
 808752c:	9a06      	ldr	r2, [sp, #24]
 808752e:	9905      	ldr	r1, [sp, #20]
 8087530:	4628      	mov	r0, r5
 8087532:	f7ff fe21 	bl	8087178 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
 8087536:	e02f      	b.n	8087598 <mbedtls_pk_parse_key+0x118>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 8087538:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 808753c:	d168      	bne.n	8087610 <mbedtls_pk_parse_key+0x190>
        unsigned char *key_copy;

        if( keylen == 0 )
            return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );

        if( ( key_copy = (unsigned char *)mbedtls_calloc( 1, keylen ) ) == NULL )
 808753e:	4631      	mov	r1, r6
 8087540:	2001      	movs	r0, #1
 8087542:	f00c faf7 	bl	8093b34 <calloc>
 8087546:	4681      	mov	r9, r0
 8087548:	2800      	cmp	r0, #0
 808754a:	d05b      	beq.n	8087604 <mbedtls_pk_parse_key+0x184>
            return( MBEDTLS_ERR_PK_ALLOC_FAILED );

        memcpy( key_copy, key, keylen );
 808754c:	4632      	mov	r2, r6
 808754e:	4621      	mov	r1, r4
 8087550:	f00c fb15 	bl	8093b7e <memcpy>

        ret = pk_parse_key_pkcs8_encrypted_der( pk, key_copy, keylen,
                                                pwd, pwdlen );
 8087554:	463b      	mov	r3, r7
 8087556:	4632      	mov	r2, r6
 8087558:	4649      	mov	r1, r9
 808755a:	f8cd 8000 	str.w	r8, [sp]
 808755e:	4628      	mov	r0, r5
 8087560:	f7ff fe60 	bl	8087224 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>
 8087564:	eb09 0106 	add.w	r1, r9, r6
 8087568:	4607      	mov	r7, r0
 808756a:	464b      	mov	r3, r9

#if defined(MBEDTLS_FS_IO) || \
    defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808756c:	2200      	movs	r2, #0
 808756e:	e01d      	b.n	80875ac <mbedtls_pk_parse_key+0x12c>
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
                               "-----BEGIN ENCRYPTED PRIVATE KEY-----",
                               "-----END ENCRYPTED PRIVATE KEY-----",
                               key, NULL, 0, &len );
 8087570:	aa04      	add	r2, sp, #16
 8087572:	9202      	str	r2, [sp, #8]
 8087574:	9301      	str	r3, [sp, #4]
 8087576:	9300      	str	r3, [sp, #0]
 8087578:	4a2c      	ldr	r2, [pc, #176]	; (808762c <mbedtls_pk_parse_key+0x1ac>)
 808757a:	4623      	mov	r3, r4
 808757c:	492c      	ldr	r1, [pc, #176]	; (8087630 <mbedtls_pk_parse_key+0x1b0>)
 808757e:	a805      	add	r0, sp, #20
 8087580:	f007 fe6c 	bl	808f25c <mbedtls_pem_read_buffer>
    if( ret == 0 )
 8087584:	2800      	cmp	r0, #0
 8087586:	d1d7      	bne.n	8087538 <mbedtls_pk_parse_key+0xb8>
    {
        if( ( ret = pk_parse_key_pkcs8_encrypted_der( pk,
 8087588:	f8cd 8000 	str.w	r8, [sp]
 808758c:	463b      	mov	r3, r7
 808758e:	9a06      	ldr	r2, [sp, #24]
 8087590:	9905      	ldr	r1, [sp, #20]
 8087592:	4628      	mov	r0, r5
 8087594:	f7ff fe46 	bl	8087224 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>
 8087598:	4604      	mov	r4, r0
 808759a:	b110      	cbz	r0, 80875a2 <mbedtls_pk_parse_key+0x122>
                                                      pem.buf, pem.buflen,
                                                      pwd, pwdlen ) ) != 0 )
        {
            mbedtls_pk_free( pk );
 808759c:	4628      	mov	r0, r5
 808759e:	f005 fb44 	bl	808cc2a <mbedtls_pk_free>
        }

        mbedtls_pem_free( &pem );
 80875a2:	a805      	add	r0, sp, #20
 80875a4:	f007 fee8 	bl	808f378 <mbedtls_pem_free>
                               "-----BEGIN ENCRYPTED PRIVATE KEY-----",
                               "-----END ENCRYPTED PRIVATE KEY-----",
                               key, NULL, 0, &len );
    if( ret == 0 )
    {
        if( ( ret = pk_parse_key_pkcs8_encrypted_der( pk,
 80875a8:	4620      	mov	r0, r4
        {
            mbedtls_pk_free( pk );
        }

        mbedtls_pem_free( &pem );
        return( ret );
 80875aa:	e031      	b.n	8087610 <mbedtls_pk_parse_key+0x190>

#if defined(MBEDTLS_FS_IO) || \
    defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80875ac:	428b      	cmp	r3, r1
 80875ae:	d002      	beq.n	80875b6 <mbedtls_pk_parse_key+0x136>
 80875b0:	701a      	strb	r2, [r3, #0]
 80875b2:	3301      	adds	r3, #1
 80875b4:	e7fa      	b.n	80875ac <mbedtls_pk_parse_key+0x12c>

        ret = pk_parse_key_pkcs8_encrypted_der( pk, key_copy, keylen,
                                                pwd, pwdlen );

        mbedtls_zeroize( key_copy, keylen );
        mbedtls_free( key_copy );
 80875b6:	4648      	mov	r0, r9
 80875b8:	f009 ffc0 	bl	809153c <free>
    }

    if( ret == 0 )
 80875bc:	b90f      	cbnz	r7, 80875c2 <mbedtls_pk_parse_key+0x142>
        return( 0 );
 80875be:	2000      	movs	r0, #0
 80875c0:	e026      	b.n	8087610 <mbedtls_pk_parse_key+0x190>

    mbedtls_pk_free( pk );
 80875c2:	4628      	mov	r0, r5
 80875c4:	f005 fb31 	bl	808cc2a <mbedtls_pk_free>

    if( ret == MBEDTLS_ERR_PK_PASSWORD_MISMATCH )
 80875c8:	f517 5f6e 	cmn.w	r7, #15232	; 0x3b80
 80875cc:	d08e      	beq.n	80874ec <mbedtls_pk_parse_key+0x6c>
    {
        return( ret );
    }
#endif /* MBEDTLS_PKCS12_C || MBEDTLS_PKCS5_C */

    if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk, key, keylen ) ) == 0 )
 80875ce:	4632      	mov	r2, r6
 80875d0:	4621      	mov	r1, r4
 80875d2:	4628      	mov	r0, r5
 80875d4:	f7ff fdd0 	bl	8087178 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
 80875d8:	2800      	cmp	r0, #0
 80875da:	d0f0      	beq.n	80875be <mbedtls_pk_parse_key+0x13e>
        return( 0 );

    mbedtls_pk_free( pk );
 80875dc:	4628      	mov	r0, r5
 80875de:	f005 fb24 	bl	808cc2a <mbedtls_pk_free>

#if defined(MBEDTLS_RSA_C)

    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
 80875e2:	2001      	movs	r0, #1
 80875e4:	f005 fb32 	bl	808cc4c <mbedtls_pk_info_from_type>
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
 80875e8:	4601      	mov	r1, r0
 80875ea:	4628      	mov	r0, r5
 80875ec:	f005 fb36 	bl	808cc5c <mbedtls_pk_setup>
 80875f0:	b950      	cbnz	r0, 8087608 <mbedtls_pk_parse_key+0x188>
 80875f2:	4632      	mov	r2, r6
 80875f4:	4621      	mov	r1, r4
 80875f6:	6868      	ldr	r0, [r5, #4]
 80875f8:	f7ff fc9a 	bl	8086f30 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
 80875fc:	b920      	cbnz	r0, 8087608 <mbedtls_pk_parse_key+0x188>
 80875fe:	e7de      	b.n	80875be <mbedtls_pk_parse_key+0x13e>
        return( ret );
    }
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
 8087600:	480c      	ldr	r0, [pc, #48]	; (8087634 <mbedtls_pk_parse_key+0x1b4>)
 8087602:	e005      	b.n	8087610 <mbedtls_pk_parse_key+0x190>

        if( keylen == 0 )
            return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );

        if( ( key_copy = (unsigned char *)mbedtls_calloc( 1, keylen ) ) == NULL )
            return( MBEDTLS_ERR_PK_ALLOC_FAILED );
 8087604:	480c      	ldr	r0, [pc, #48]	; (8087638 <mbedtls_pk_parse_key+0x1b8>)
 8087606:	e003      	b.n	8087610 <mbedtls_pk_parse_key+0x190>
    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
        ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ),
                                        key, keylen ) ) != 0 )
    {
        mbedtls_pk_free( pk );
 8087608:	4628      	mov	r0, r5
 808760a:	f005 fb0e 	bl	808cc2a <mbedtls_pk_free>
        return( 0 );
    }

#endif /* MBEDTLS_ECP_C */

    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 808760e:	480b      	ldr	r0, [pc, #44]	; (808763c <mbedtls_pk_parse_key+0x1bc>)
}
 8087610:	b009      	add	sp, #36	; 0x24
 8087612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8087616:	bf00      	nop
 8087618:	0809540a 	.word	0x0809540a
 808761c:	08095428 	.word	0x08095428
 8087620:	ffffc480 	.word	0xffffc480
 8087624:	08095448 	.word	0x08095448
 8087628:	08095462 	.word	0x08095462
 808762c:	0809547e 	.word	0x0809547e
 8087630:	080954a2 	.word	0x080954a2
 8087634:	ffffc400 	.word	0xffffc400
 8087638:	ffffc080 	.word	0xffffc080
 808763c:	ffffc300 	.word	0xffffc300

08087640 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>:
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],
                      unsigned char output[16] )
{
 8087640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8087644:	7bcb      	ldrb	r3, [r1, #15]
 8087646:	b093      	sub	sp, #76	; 0x4c
 8087648:	f003 030f 	and.w	r3, r3, #15
 808764c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    }
#endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */

    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
 8087650:	e9d3 6730 	ldrd	r6, r7, [r3, #192]	; 0xc0
    zl = ctx->HL[lo];
 8087654:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
        if( i != 15 )
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
 8087658:	f8df c150 	ldr.w	ip, [pc, #336]	; 80877ac <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0x16c>
 808765c:	f101 0310 	add.w	r3, r1, #16
 8087660:	9310      	str	r3, [sp, #64]	; 0x40
    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
    {
        lo = x[i] & 0xf;
 8087662:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8087664:	f813 ed01 	ldrb.w	lr, [r3, #-1]!
 8087668:	9310      	str	r3, [sp, #64]	; 0x40
 808766a:	f00e 030f 	and.w	r3, lr, #15
 808766e:	9311      	str	r3, [sp, #68]	; 0x44
        hi = x[i] >> 4;

        if( i != 15 )
 8087670:	9b10      	ldr	r3, [sp, #64]	; 0x40
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
    {
        lo = x[i] & 0xf;
        hi = x[i] >> 4;
 8087672:	ea4f 1e2e 	mov.w	lr, lr, asr #4

        if( i != 15 )
 8087676:	ebc1 0803 	rsb	r8, r1, r3
 808767a:	f1b8 0f0f 	cmp.w	r8, #15
 808767e:	d03a      	beq.n	80876f6 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0xb6>
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
 8087680:	0923      	lsrs	r3, r4, #4
 8087682:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8087686:	9300      	str	r3, [sp, #0]
 8087688:	092b      	lsrs	r3, r5, #4
 808768a:	9301      	str	r3, [sp, #4]
 808768c:	0733      	lsls	r3, r6, #28
 808768e:	9309      	str	r3, [sp, #36]	; 0x24
 8087690:	2300      	movs	r3, #0
 8087692:	9308      	str	r3, [sp, #32]
 8087694:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8087696:	e9dd ab00 	ldrd	sl, fp, [sp]
 808769a:	eb00 05c3 	add.w	r5, r0, r3, lsl #3
 808769e:	0933      	lsrs	r3, r6, #4
 80876a0:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80876a4:	9304      	str	r3, [sp, #16]
 80876a6:	093b      	lsrs	r3, r7, #4
 80876a8:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80876ac:	9305      	str	r3, [sp, #20]
 80876ae:	ea48 080a 	orr.w	r8, r8, sl
 80876b2:	ea49 090b 	orr.w	r9, r9, fp
 80876b6:	e9d5 6730 	ldrd	r6, r7, [r5, #192]	; 0xc0
 80876ba:	46c2      	mov	sl, r8
 80876bc:	46cb      	mov	fp, r9
 80876be:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80876c2:	ea88 0806 	eor.w	r8, r8, r6
 80876c6:	4646      	mov	r6, r8
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
 80876c8:	f004 040f 	and.w	r4, r4, #15
            zh ^= ctx->HH[lo];
 80876cc:	f85c 4034 	ldr.w	r4, [ip, r4, lsl #3]
 80876d0:	ea89 0907 	eor.w	r9, r9, r7
 80876d4:	0423      	lsls	r3, r4, #16
 80876d6:	930d      	str	r3, [sp, #52]	; 0x34
 80876d8:	2300      	movs	r3, #0
 80876da:	464f      	mov	r7, r9
 80876dc:	930c      	str	r3, [sp, #48]	; 0x30
 80876de:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80876e2:	4073      	eors	r3, r6
 80876e4:	461e      	mov	r6, r3
 80876e6:	407c      	eors	r4, r7
 80876e8:	4627      	mov	r7, r4
            zl ^= ctx->HL[lo];
 80876ea:	e9d5 4510 	ldrd	r4, r5, [r5, #64]	; 0x40
 80876ee:	ea84 040a 	eor.w	r4, r4, sl
 80876f2:	ea85 050b 	eor.w	r5, r5, fp

        }

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
 80876f6:	0923      	lsrs	r3, r4, #4
 80876f8:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 80876fc:	9302      	str	r3, [sp, #8]
 80876fe:	092b      	lsrs	r3, r5, #4
 8087700:	9303      	str	r3, [sp, #12]
 8087702:	0733      	lsls	r3, r6, #28
 8087704:	930b      	str	r3, [sp, #44]	; 0x2c
 8087706:	2300      	movs	r3, #0
 8087708:	930a      	str	r3, [sp, #40]	; 0x28
 808770a:	0933      	lsrs	r3, r6, #4
 808770c:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8087710:	9306      	str	r3, [sp, #24]
 8087712:	093b      	lsrs	r3, r7, #4
 8087714:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 8087718:	9307      	str	r3, [sp, #28]
 808771a:	e9de 6730 	ldrd	r6, r7, [lr, #192]	; 0xc0
 808771e:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 8087722:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
 8087726:	ea48 080a 	orr.w	r8, r8, sl
 808772a:	ea49 090b 	orr.w	r9, r9, fp
 808772e:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8087732:	ea8a 0a06 	eor.w	sl, sl, r6
 8087736:	4656      	mov	r6, sl
 8087738:	ea8b 0b07 	eor.w	fp, fp, r7
 808773c:	465f      	mov	r7, fp
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
 808773e:	f004 040f 	and.w	r4, r4, #15
        zh ^= ctx->HH[hi];
 8087742:	f85c 4034 	ldr.w	r4, [ip, r4, lsl #3]
 8087746:	0423      	lsls	r3, r4, #16
 8087748:	930f      	str	r3, [sp, #60]	; 0x3c
 808774a:	2300      	movs	r3, #0
 808774c:	930e      	str	r3, [sp, #56]	; 0x38
 808774e:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 8087752:	4073      	eors	r3, r6
 8087754:	461e      	mov	r6, r3
    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
 8087756:	9b10      	ldr	r3, [sp, #64]	; 0x40

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
 8087758:	407c      	eors	r4, r7
    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
 808775a:	4299      	cmp	r1, r3

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
 808775c:	4627      	mov	r7, r4
        zl ^= ctx->HL[hi];
 808775e:	e9de 4510 	ldrd	r4, r5, [lr, #64]	; 0x40
 8087762:	ea84 0408 	eor.w	r4, r4, r8
 8087766:	ea85 0509 	eor.w	r5, r5, r9
    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
 808776a:	f47f af7a 	bne.w	8087662 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0x22>
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
        zl ^= ctx->HL[hi];
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
 808776e:	0e3b      	lsrs	r3, r7, #24
 8087770:	7013      	strb	r3, [r2, #0]
 8087772:	0c3b      	lsrs	r3, r7, #16
 8087774:	7053      	strb	r3, [r2, #1]
 8087776:	0a3b      	lsrs	r3, r7, #8
 8087778:	7093      	strb	r3, [r2, #2]
    PUT_UINT32_BE( zh, output, 4 );
 808777a:	0e33      	lsrs	r3, r6, #24
 808777c:	7113      	strb	r3, [r2, #4]
 808777e:	0c33      	lsrs	r3, r6, #16
 8087780:	7153      	strb	r3, [r2, #5]
 8087782:	0a33      	lsrs	r3, r6, #8
 8087784:	7193      	strb	r3, [r2, #6]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 8087786:	0e2b      	lsrs	r3, r5, #24
 8087788:	7213      	strb	r3, [r2, #8]
 808778a:	0c2b      	lsrs	r3, r5, #16
 808778c:	7253      	strb	r3, [r2, #9]
 808778e:	0a2b      	lsrs	r3, r5, #8
 8087790:	7293      	strb	r3, [r2, #10]
    PUT_UINT32_BE( zl, output, 12 );
 8087792:	0e23      	lsrs	r3, r4, #24
 8087794:	7313      	strb	r3, [r2, #12]
 8087796:	0c23      	lsrs	r3, r4, #16
 8087798:	7353      	strb	r3, [r2, #13]
 808779a:	0a23      	lsrs	r3, r4, #8
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
        zl ^= ctx->HL[hi];
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
 808779c:	70d7      	strb	r7, [r2, #3]
    PUT_UINT32_BE( zh, output, 4 );
 808779e:	71d6      	strb	r6, [r2, #7]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 80877a0:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_BE( zl, output, 12 );
 80877a2:	7393      	strb	r3, [r2, #14]
 80877a4:	73d4      	strb	r4, [r2, #15]
}
 80877a6:	b013      	add	sp, #76	; 0x4c
 80877a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80877ac:	08095500 	.word	0x08095500

080877b0 <mbedtls_gcm_init>:
/*
 * Initialize a context
 */
void mbedtls_gcm_init( mbedtls_gcm_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_gcm_context ) );
 80877b0:	f44f 72c4 	mov.w	r2, #392	; 0x188
 80877b4:	2100      	movs	r1, #0
 80877b6:	f00c ba08 	b.w	8093bca <memset>

080877ba <mbedtls_gcm_setkey>:

int mbedtls_gcm_setkey( mbedtls_gcm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
 80877ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80877be:	4604      	mov	r4, r0
 80877c0:	b08d      	sub	sp, #52	; 0x34
 80877c2:	4608      	mov	r0, r1
 80877c4:	4691      	mov	r9, r2
    int ret;
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 80877c6:	4619      	mov	r1, r3
 80877c8:	2201      	movs	r2, #1

int mbedtls_gcm_setkey( mbedtls_gcm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
 80877ca:	4698      	mov	r8, r3
    int ret;
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 80877cc:	f7fb fea4 	bl	8083518 <mbedtls_cipher_info_from_values>
    if( cipher_info == NULL )
 80877d0:	2800      	cmp	r0, #0
 80877d2:	f000 809b 	beq.w	808790c <mbedtls_gcm_setkey+0x152>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    if( cipher_info->block_size != 16 )
 80877d6:	6945      	ldr	r5, [r0, #20]
 80877d8:	9002      	str	r0, [sp, #8]
 80877da:	2d10      	cmp	r5, #16
 80877dc:	f040 8096 	bne.w	808790c <mbedtls_gcm_setkey+0x152>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    mbedtls_cipher_free( &ctx->cipher_ctx );
 80877e0:	4620      	mov	r0, r4
 80877e2:	f7fb feb1 	bl	8083548 <mbedtls_cipher_free>

    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
 80877e6:	9902      	ldr	r1, [sp, #8]
 80877e8:	4620      	mov	r0, r4
 80877ea:	f7fc f87d 	bl	80838e8 <mbedtls_cipher_setup>
 80877ee:	2800      	cmp	r0, #0
 80877f0:	f040 808e 	bne.w	8087910 <mbedtls_gcm_setkey+0x156>
        return( ret );

    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 80877f4:	2301      	movs	r3, #1
 80877f6:	4642      	mov	r2, r8
 80877f8:	4649      	mov	r1, r9
 80877fa:	4620      	mov	r0, r4
 80877fc:	f7fb feb6 	bl	808356c <mbedtls_cipher_setkey>
 8087800:	2800      	cmp	r0, #0
 8087802:	f040 8085 	bne.w	8087910 <mbedtls_gcm_setkey+0x156>
    uint64_t hi, lo;
    uint64_t vl, vh;
    unsigned char h[16];
    size_t olen = 0;

    memset( h, 0, 16 );
 8087806:	4601      	mov	r1, r0
{
    int ret, i, j;
    uint64_t hi, lo;
    uint64_t vl, vh;
    unsigned char h[16];
    size_t olen = 0;
 8087808:	9007      	str	r0, [sp, #28]

    memset( h, 0, 16 );
 808780a:	462a      	mov	r2, r5
 808780c:	a808      	add	r0, sp, #32
 808780e:	f00c f9dc 	bl	8093bca <memset>
    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, h, 16, h, &olen ) ) != 0 )
 8087812:	ab07      	add	r3, sp, #28
 8087814:	9300      	str	r3, [sp, #0]
 8087816:	ab08      	add	r3, sp, #32
 8087818:	462a      	mov	r2, r5
 808781a:	4619      	mov	r1, r3
 808781c:	4620      	mov	r0, r4
 808781e:	f7fb fef3 	bl	8083608 <mbedtls_cipher_update>
 8087822:	2800      	cmp	r0, #0
 8087824:	d174      	bne.n	8087910 <mbedtls_gcm_setkey+0x156>
        return( ret );

    /* pack h as two 64-bits ints, big-endian */
    GET_UINT32_BE( hi, h,  0  );
    GET_UINT32_BE( lo, h,  4  );
    vh = (uint64_t) hi << 32 | lo;
 8087826:	4602      	mov	r2, r0
 8087828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808782a:	9908      	ldr	r1, [sp, #32]
 808782c:	ba1d      	rev	r5, r3
 808782e:	432a      	orrs	r2, r5

    GET_UINT32_BE( hi, h,  8  );
    GET_UINT32_BE( lo, h,  12 );
    vl = (uint64_t) hi << 32 | lo;
 8087830:	9d0a      	ldr	r5, [sp, #40]	; 0x28
        return( ret );

    /* pack h as two 64-bits ints, big-endian */
    GET_UINT32_BE( hi, h,  0  );
    GET_UINT32_BE( lo, h,  4  );
    vh = (uint64_t) hi << 32 | lo;
 8087832:	ba0b      	rev	r3, r1
 8087834:	990b      	ldr	r1, [sp, #44]	; 0x2c

    GET_UINT32_BE( hi, h,  8  );
    GET_UINT32_BE( lo, h,  12 );
    vl = (uint64_t) hi << 32 | lo;
 8087836:	fa95 f985 	rev.w	r9, r5
 808783a:	fa91 fe81 	rev.w	lr, r1
 808783e:	4649      	mov	r1, r9
 8087840:	ea40 000e 	orr.w	r0, r0, lr

    /* 8 = 1000 corresponds to 1 in GF(2^128) */
    ctx->HL[8] = vl;
    ctx->HH[8] = vh;
 8087844:	f504 7580 	add.w	r5, r4, #256	; 0x100
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_CLMUL ) )
        return( 0 );
#endif

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
 8087848:	f04f 0800 	mov.w	r8, #0
 808784c:	f04f 0900 	mov.w	r9, #0
    GET_UINT32_BE( hi, h,  8  );
    GET_UINT32_BE( lo, h,  12 );
    vl = (uint64_t) hi << 32 | lo;

    /* 8 = 1000 corresponds to 1 in GF(2^128) */
    ctx->HL[8] = vl;
 8087850:	e9c4 0120 	strd	r0, r1, [r4, #128]	; 0x80
    ctx->HH[8] = vh;
 8087854:	e9c5 2300 	strd	r2, r3, [r5]
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_CLMUL ) )
        return( 0 );
#endif

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
 8087858:	e9c4 8930 	strd	r8, r9, [r4, #192]	; 0xc0
    ctx->HL[0] = 0;
 808785c:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
 8087860:	f04f 0e03 	mov.w	lr, #3

    for( i = 4; i > 0; i >>= 1 )
 8087864:	2504      	movs	r5, #4
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 8087866:	f04f 4c61 	mov.w	ip, #3774873600	; 0xe1000000
 808786a:	f000 0801 	and.w	r8, r0, #1
        vl  = ( vh << 63 ) | ( vl >> 1 );
 808786e:	07d7      	lsls	r7, r2, #31
 8087870:	0849      	lsrs	r1, r1, #1
 8087872:	ea4f 0030 	mov.w	r0, r0, rrx
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 8087876:	085b      	lsrs	r3, r3, #1
 8087878:	ea4f 0232 	mov.w	r2, r2, rrx
 808787c:	fb0c fb08 	mul.w	fp, ip, r8
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
        vl  = ( vh << 63 ) | ( vl >> 1 );
 8087880:	2600      	movs	r6, #0
 8087882:	eb04 08c5 	add.w	r8, r4, r5, lsl #3
 8087886:	4330      	orrs	r0, r6
 8087888:	4339      	orrs	r1, r7
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 808788a:	4072      	eors	r2, r6
 808788c:	ea83 030b 	eor.w	r3, r3, fp

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
 8087890:	f1be 0e01 	subs.w	lr, lr, #1
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
        vl  = ( vh << 63 ) | ( vl >> 1 );
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);

        ctx->HL[i] = vl;
 8087894:	e9c8 0110 	strd	r0, r1, [r8, #64]	; 0x40
        ctx->HH[i] = vh;
 8087898:	e9c8 2330 	strd	r2, r3, [r8, #192]	; 0xc0

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
 808789c:	ea4f 0565 	mov.w	r5, r5, asr #1
 80878a0:	d1e3      	bne.n	808786a <mbedtls_gcm_setkey+0xb0>
 80878a2:	2003      	movs	r0, #3
 80878a4:	2102      	movs	r1, #2
        ctx->HH[i] = vh;
    }

    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
 80878a6:	f104 0840 	add.w	r8, r4, #64	; 0x40
 80878aa:	f104 0cc0 	add.w	ip, r4, #192	; 0xc0
 80878ae:	00cb      	lsls	r3, r1, #3
 80878b0:	eb08 0e03 	add.w	lr, r8, r3
 80878b4:	4463      	add	r3, ip
        vh = *HiH;
 80878b6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80878ba:	e9cd 4502 	strd	r4, r5, [sp, #8]
        vl = *HiL;
 80878be:	e9de 4500 	ldrd	r4, r5, [lr]
 80878c2:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80878c6:	4665      	mov	r5, ip
 80878c8:	4644      	mov	r4, r8
        for( j = 1; j < i; j++ )
 80878ca:	2201      	movs	r2, #1
        {
            HiH[j] = vh ^ ctx->HH[j];
 80878cc:	e9f5 6702 	ldrd	r6, r7, [r5, #8]!
 80878d0:	e9dd 9a02 	ldrd	r9, sl, [sp, #8]
 80878d4:	ea89 0906 	eor.w	r9, r9, r6
 80878d8:	ea8a 0a07 	eor.w	sl, sl, r7
 80878dc:	464e      	mov	r6, r9
 80878de:	4657      	mov	r7, sl
            HiL[j] = vl ^ ctx->HL[j];
 80878e0:	e9dd 9a04 	ldrd	r9, sl, [sp, #16]
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
        vh = *HiH;
        vl = *HiL;
        for( j = 1; j < i; j++ )
        {
            HiH[j] = vh ^ ctx->HH[j];
 80878e4:	e9e3 6702 	strd	r6, r7, [r3, #8]!
            HiL[j] = vl ^ ctx->HL[j];
 80878e8:	e9f4 6702 	ldrd	r6, r7, [r4, #8]!
 80878ec:	ea89 0906 	eor.w	r9, r9, r6
 80878f0:	ea8a 0a07 	eor.w	sl, sl, r7
 80878f4:	464e      	mov	r6, r9
 80878f6:	4657      	mov	r7, sl
    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
        vh = *HiH;
        vl = *HiL;
        for( j = 1; j < i; j++ )
 80878f8:	3201      	adds	r2, #1
 80878fa:	428a      	cmp	r2, r1
        {
            HiH[j] = vh ^ ctx->HH[j];
            HiL[j] = vl ^ ctx->HL[j];
 80878fc:	e9ee 6702 	strd	r6, r7, [lr, #8]!
    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
        vh = *HiH;
        vl = *HiL;
        for( j = 1; j < i; j++ )
 8087900:	d1e4      	bne.n	80878cc <mbedtls_gcm_setkey+0x112>

        ctx->HL[i] = vl;
        ctx->HH[i] = vh;
    }

    for( i = 2; i <= 8; i *= 2 )
 8087902:	3801      	subs	r0, #1
 8087904:	ea4f 0142 	mov.w	r1, r2, lsl #1
 8087908:	d1d1      	bne.n	80878ae <mbedtls_gcm_setkey+0xf4>
 808790a:	e001      	b.n	8087910 <mbedtls_gcm_setkey+0x156>
    int ret;
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 808790c:	f06f 0013 	mvn.w	r0, #19

    if( ( ret = gcm_gen_table( ctx ) ) != 0 )
        return( ret );

    return( 0 );
}
 8087910:	b00d      	add	sp, #52	; 0x34
 8087912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08087916 <mbedtls_gcm_starts>:
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
 8087916:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
 808791a:	f04f 0900 	mov.w	r9, #0
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
 808791e:	b08b      	sub	sp, #44	; 0x2c
 8087920:	4604      	mov	r4, r0
 8087922:	468b      	mov	fp, r1
 8087924:	4690      	mov	r8, r2
 8087926:	9e15      	ldr	r6, [sp, #84]	; 0x54
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
 8087928:	f8cd 9014 	str.w	r9, [sp, #20]

    /* IV and AD are limited to 2^64 bits, so 2^61 bytes */
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
 808792c:	461d      	mov	r5, r3
 808792e:	2b00      	cmp	r3, #0
 8087930:	f000 808d 	beq.w	8087a4e <mbedtls_gcm_starts+0x138>
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
 8087934:	f500 77b0 	add.w	r7, r0, #352	; 0x160
 8087938:	2210      	movs	r2, #16
 808793a:	4649      	mov	r1, r9
 808793c:	4638      	mov	r0, r7
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 808793e:	f504 7ab8 	add.w	sl, r4, #368	; 0x170
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
 8087942:	f00c f942 	bl	8093bca <memset>
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 8087946:	4649      	mov	r1, r9
 8087948:	2210      	movs	r2, #16
 808794a:	4650      	mov	r0, sl
 808794c:	f00c f93d 	bl	8093bca <memset>

    ctx->mode = mode;
 8087950:	f8c4 b180 	str.w	fp, [r4, #384]	; 0x180
    ctx->len = 0;
    ctx->add_len = 0;
 8087954:	46a3      	mov	fp, r4

    memset( ctx->y, 0x00, sizeof(ctx->y) );
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );

    ctx->mode = mode;
    ctx->len = 0;
 8087956:	2000      	movs	r0, #0
 8087958:	2100      	movs	r1, #0
 808795a:	f504 73a0 	add.w	r3, r4, #320	; 0x140
    ctx->add_len = 0;

    if( iv_len == 12 )
 808795e:	2d0c      	cmp	r5, #12

    memset( ctx->y, 0x00, sizeof(ctx->y) );
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );

    ctx->mode = mode;
    ctx->len = 0;
 8087960:	e9c3 0100 	strd	r0, r1, [r3]
    ctx->add_len = 0;
 8087964:	e9eb 0152 	strd	r0, r1, [fp, #328]!	; 0x148

    if( iv_len == 12 )
 8087968:	d10d      	bne.n	8087986 <mbedtls_gcm_starts+0x70>
    {
        memcpy( ctx->y, iv, iv_len );
 808796a:	f8d8 3000 	ldr.w	r3, [r8]
 808796e:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
 8087972:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8087976:	607b      	str	r3, [r7, #4]
 8087978:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808797c:	60bb      	str	r3, [r7, #8]
        ctx->y[15] = 1;
 808797e:	2301      	movs	r3, #1
 8087980:	f884 316f 	strb.w	r3, [r4, #367]	; 0x16f
 8087984:	e03a      	b.n	80879fc <mbedtls_gcm_starts+0xe6>
    }
    else
    {
        memset( work_buf, 0x00, 16 );
 8087986:	2210      	movs	r2, #16
 8087988:	4649      	mov	r1, r9
 808798a:	a806      	add	r0, sp, #24
 808798c:	f00c f91d 	bl	8093bca <memset>
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
 8087990:	00eb      	lsls	r3, r5, #3
 8087992:	0e1a      	lsrs	r2, r3, #24
 8087994:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8087998:	0c1a      	lsrs	r2, r3, #16
 808799a:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
 808799e:	0a1a      	lsrs	r2, r3, #8
 80879a0:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
 80879a4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27

        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;
 80879a8:	462b      	mov	r3, r5
 80879aa:	f204 195f 	addw	r9, r4, #351	; 0x15f
 80879ae:	4649      	mov	r1, r9
 80879b0:	2d10      	cmp	r5, #16
 80879b2:	bf28      	it	cs
 80879b4:	2310      	movcs	r3, #16
 80879b6:	4642      	mov	r2, r8
 80879b8:	4498      	add	r8, r3

            for( i = 0; i < use_len; i++ )
                ctx->y[i] ^= p[i];
 80879ba:	f812 eb01 	ldrb.w	lr, [r2], #1
 80879be:	f811 0f01 	ldrb.w	r0, [r1, #1]!
        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;

            for( i = 0; i < use_len; i++ )
 80879c2:	4542      	cmp	r2, r8
                ctx->y[i] ^= p[i];
 80879c4:	ea8e 0000 	eor.w	r0, lr, r0
 80879c8:	7008      	strb	r0, [r1, #0]
        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;

            for( i = 0; i < use_len; i++ )
 80879ca:	d1f6      	bne.n	80879ba <mbedtls_gcm_starts+0xa4>
                ctx->y[i] ^= p[i];

            gcm_mult( ctx, ctx->y, ctx->y );
 80879cc:	463a      	mov	r2, r7
 80879ce:	4639      	mov	r1, r7
 80879d0:	4620      	mov	r0, r4
 80879d2:	9303      	str	r3, [sp, #12]
 80879d4:	f7ff fe34 	bl	8087640 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
    {
        memset( work_buf, 0x00, 16 );
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );

        p = iv;
        while( iv_len > 0 )
 80879d8:	9b03      	ldr	r3, [sp, #12]
 80879da:	1aed      	subs	r5, r5, r3
 80879dc:	d1e4      	bne.n	80879a8 <mbedtls_gcm_starts+0x92>
            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
            ctx->y[i] ^= work_buf[i];
 80879de:	ab06      	add	r3, sp, #24
 80879e0:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 80879e4:	5d5b      	ldrb	r3, [r3, r5]

            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
 80879e6:	3501      	adds	r5, #1
            ctx->y[i] ^= work_buf[i];
 80879e8:	4053      	eors	r3, r2

            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
 80879ea:	2d10      	cmp	r5, #16
            ctx->y[i] ^= work_buf[i];
 80879ec:	f889 3000 	strb.w	r3, [r9]

            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
 80879f0:	d1f5      	bne.n	80879de <mbedtls_gcm_starts+0xc8>
            ctx->y[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->y, ctx->y );
 80879f2:	463a      	mov	r2, r7
 80879f4:	4639      	mov	r1, r7
 80879f6:	4620      	mov	r0, r4
 80879f8:	f7ff fe22 	bl	8087640 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
    }

    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ctx->base_ectr,
 80879fc:	ab05      	add	r3, sp, #20
 80879fe:	9300      	str	r3, [sp, #0]
 8087a00:	2210      	movs	r2, #16
 8087a02:	f504 73a8 	add.w	r3, r4, #336	; 0x150
 8087a06:	4639      	mov	r1, r7
 8087a08:	4620      	mov	r0, r4
 8087a0a:	f7fb fdfd 	bl	8083608 <mbedtls_cipher_update>
 8087a0e:	bb10      	cbnz	r0, 8087a56 <mbedtls_gcm_starts+0x140>
                             &olen ) ) != 0 )
    {
        return( ret );
    }

    ctx->add_len = add_len;
 8087a10:	f8c4 6148 	str.w	r6, [r4, #328]	; 0x148
 8087a14:	f8cb 0004 	str.w	r0, [fp, #4]
    p = add;
    while( add_len > 0 )
 8087a18:	b1e6      	cbz	r6, 8087a54 <mbedtls_gcm_starts+0x13e>
 8087a1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    {
        use_len = ( add_len < 16 ) ? add_len : 16;
 8087a1c:	4635      	mov	r5, r6
 8087a1e:	4619      	mov	r1, r3
 8087a20:	2e10      	cmp	r6, #16
 8087a22:	bf28      	it	cs
 8087a24:	2510      	movcs	r5, #16
 8087a26:	4429      	add	r1, r5
 8087a28:	f204 126f 	addw	r2, r4, #367	; 0x16f
 8087a2c:	9114      	str	r1, [sp, #80]	; 0x50

        for( i = 0; i < use_len; i++ )
            ctx->buf[i] ^= p[i];
 8087a2e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8087a32:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8087a36:	4041      	eors	r1, r0
 8087a38:	7011      	strb	r1, [r2, #0]
    p = add;
    while( add_len > 0 )
    {
        use_len = ( add_len < 16 ) ? add_len : 16;

        for( i = 0; i < use_len; i++ )
 8087a3a:	9914      	ldr	r1, [sp, #80]	; 0x50
 8087a3c:	4299      	cmp	r1, r3
 8087a3e:	d1f6      	bne.n	8087a2e <mbedtls_gcm_starts+0x118>
            ctx->buf[i] ^= p[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );
 8087a40:	4652      	mov	r2, sl
 8087a42:	4651      	mov	r1, sl
 8087a44:	4620      	mov	r0, r4
 8087a46:	f7ff fdfb 	bl	8087640 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>

        add_len -= use_len;
 8087a4a:	1b76      	subs	r6, r6, r5
        return( ret );
    }

    ctx->add_len = add_len;
    p = add;
    while( add_len > 0 )
 8087a4c:	e7e4      	b.n	8087a18 <mbedtls_gcm_starts+0x102>
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
      ( (uint64_t) iv_len  ) >> 61 != 0 ||
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8087a4e:	f06f 0013 	mvn.w	r0, #19
 8087a52:	e000      	b.n	8087a56 <mbedtls_gcm_starts+0x140>

        add_len -= use_len;
        p += use_len;
    }

    return( 0 );
 8087a54:	4630      	mov	r0, r6
}
 8087a56:	b00b      	add	sp, #44	; 0x2c
 8087a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08087a5c <mbedtls_gcm_update>:

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
 8087a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8087a60:	461f      	mov	r7, r3
 8087a62:	b08b      	sub	sp, #44	; 0x2c
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;
 8087a64:	2300      	movs	r3, #0

    if( output > input && (size_t) ( output - input ) < length )
 8087a66:	4297      	cmp	r7, r2

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
 8087a68:	4604      	mov	r4, r0
 8087a6a:	460e      	mov	r6, r1
 8087a6c:	4690      	mov	r8, r2
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;
 8087a6e:	9305      	str	r3, [sp, #20]

    if( output > input && (size_t) ( output - input ) < length )
 8087a70:	d902      	bls.n	8087a78 <mbedtls_gcm_update+0x1c>
 8087a72:	1abb      	subs	r3, r7, r2
 8087a74:	428b      	cmp	r3, r1
 8087a76:	d35c      	bcc.n	8087b32 <mbedtls_gcm_update+0xd6>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */
    if( ctx->len + length < ctx->len ||
 8087a78:	4625      	mov	r5, r4
 8087a7a:	e9f5 0150 	ldrd	r0, r1, [r5, #320]!	; 0x140
 8087a7e:	1982      	adds	r2, r0, r6
 8087a80:	f141 0300 	adc.w	r3, r1, #0
 8087a84:	428b      	cmp	r3, r1
 8087a86:	bf08      	it	eq
 8087a88:	4282      	cmpeq	r2, r0
 8087a8a:	d352      	bcc.n	8087b32 <mbedtls_gcm_update+0xd6>
 8087a8c:	210f      	movs	r1, #15
 8087a8e:	f06f 001f 	mvn.w	r0, #31
 8087a92:	4299      	cmp	r1, r3
 8087a94:	bf08      	it	eq
 8087a96:	4290      	cmpeq	r0, r2
 8087a98:	d34b      	bcc.n	8087b32 <mbedtls_gcm_update+0xd6>
        (uint64_t) ctx->len + length > 0xFFFFFFFE0ull )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    ctx->len += length;
 8087a9a:	e9c5 2300 	strd	r2, r3, [r5]
 8087a9e:	f504 73b6 	add.w	r3, r4, #364	; 0x16c
 8087aa2:	9302      	str	r3, [sp, #8]

        for( i = 16; i > 12; i-- )
            if( ++ctx->y[i - 1] != 0 )
                break;

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 8087aa4:	f504 73b0 	add.w	r3, r4, #352	; 0x160
 8087aa8:	f10d 0a18 	add.w	sl, sp, #24
 8087aac:	9303      	str	r3, [sp, #12]
    }

    ctx->len += length;

    p = input;
    while( length > 0 )
 8087aae:	2e00      	cmp	r6, #0
 8087ab0:	d042      	beq.n	8087b38 <mbedtls_gcm_update+0xdc>
 8087ab2:	f504 75b8 	add.w	r5, r4, #368	; 0x170
    {
        use_len = ( length < 16 ) ? length : 16;
 8087ab6:	462a      	mov	r2, r5
 8087ab8:	46ab      	mov	fp, r5
 8087aba:	2e10      	cmp	r6, #16
 8087abc:	46b1      	mov	r9, r6
 8087abe:	bf28      	it	cs
 8087ac0:	f04f 0910 	movcs.w	r9, #16

        for( i = 16; i > 12; i-- )
            if( ++ctx->y[i - 1] != 0 )
 8087ac4:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 8087ac8:	3301      	adds	r3, #1
 8087aca:	b2db      	uxtb	r3, r3
 8087acc:	7013      	strb	r3, [r2, #0]
 8087ace:	b913      	cbnz	r3, 8087ad6 <mbedtls_gcm_update+0x7a>
    p = input;
    while( length > 0 )
    {
        use_len = ( length < 16 ) ? length : 16;

        for( i = 16; i > 12; i-- )
 8087ad0:	9b02      	ldr	r3, [sp, #8]
 8087ad2:	429a      	cmp	r2, r3
 8087ad4:	d1f6      	bne.n	8087ac4 <mbedtls_gcm_update+0x68>
            if( ++ctx->y[i - 1] != 0 )
                break;

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 8087ad6:	ab05      	add	r3, sp, #20
 8087ad8:	9300      	str	r3, [sp, #0]
 8087ada:	2210      	movs	r2, #16
 8087adc:	4653      	mov	r3, sl
 8087ade:	9903      	ldr	r1, [sp, #12]
 8087ae0:	4620      	mov	r0, r4
 8087ae2:	f7fb fd91 	bl	8083608 <mbedtls_cipher_update>
 8087ae6:	bb40      	cbnz	r0, 8087b3a <mbedtls_gcm_update+0xde>
 8087ae8:	4642      	mov	r2, r8
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
        {
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
 8087aea:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8087aee:	b91b      	cbnz	r3, 8087af8 <mbedtls_gcm_update+0x9c>
                ctx->buf[i] ^= p[i];
 8087af0:	7829      	ldrb	r1, [r5, #0]
 8087af2:	7813      	ldrb	r3, [r2, #0]
 8087af4:	404b      	eors	r3, r1
 8087af6:	702b      	strb	r3, [r5, #0]
            out_p[i] = ectr[i] ^ p[i];
 8087af8:	f812 1b01 	ldrb.w	r1, [r2], #1
 8087afc:	f81a 3000 	ldrb.w	r3, [sl, r0]
 8087b00:	3501      	adds	r5, #1
 8087b02:	404b      	eors	r3, r1
 8087b04:	543b      	strb	r3, [r7, r0]
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
 8087b06:	f8d4 1180 	ldr.w	r1, [r4, #384]	; 0x180
                                   &olen ) ) != 0 )
        {
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
 8087b0a:	3001      	adds	r0, #1
        {
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
                ctx->buf[i] ^= p[i];
            out_p[i] = ectr[i] ^ p[i];
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
 8087b0c:	2901      	cmp	r1, #1
                ctx->buf[i] ^= out_p[i];
 8087b0e:	bf02      	ittt	eq
 8087b10:	f815 1c01 	ldrbeq.w	r1, [r5, #-1]
 8087b14:	404b      	eoreq	r3, r1
 8087b16:	f805 3c01 	strbeq.w	r3, [r5, #-1]
                                   &olen ) ) != 0 )
        {
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
 8087b1a:	4581      	cmp	r9, r0
 8087b1c:	d1e5      	bne.n	8087aea <mbedtls_gcm_update+0x8e>
            out_p[i] = ectr[i] ^ p[i];
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
                ctx->buf[i] ^= out_p[i];
        }

        gcm_mult( ctx, ctx->buf, ctx->buf );
 8087b1e:	465a      	mov	r2, fp
 8087b20:	4659      	mov	r1, fp
 8087b22:	4620      	mov	r0, r4
 8087b24:	f7ff fd8c 	bl	8087640 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>

        length -= use_len;
 8087b28:	ebc9 0606 	rsb	r6, r9, r6
        p += use_len;
 8087b2c:	44c8      	add	r8, r9
        out_p += use_len;
 8087b2e:	444f      	add	r7, r9
    }

    ctx->len += length;

    p = input;
    while( length > 0 )
 8087b30:	e7bd      	b.n	8087aae <mbedtls_gcm_update+0x52>
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;

    if( output > input && (size_t) ( output - input ) < length )
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8087b32:	f06f 0013 	mvn.w	r0, #19
 8087b36:	e000      	b.n	8087b3a <mbedtls_gcm_update+0xde>
        length -= use_len;
        p += use_len;
        out_p += use_len;
    }

    return( 0 );
 8087b38:	4630      	mov	r0, r6
}
 8087b3a:	b00b      	add	sp, #44	; 0x2c
 8087b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08087b40 <mbedtls_gcm_finish>:

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
 8087b40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8087b44:	4688      	mov	r8, r1
    unsigned char work_buf[16];
    size_t i;
    uint64_t orig_len = ctx->len * 8;
 8087b46:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
 8087b4a:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
 8087b4e:	00cd      	lsls	r5, r1, #3
    uint64_t orig_add_len = ctx->add_len * 8;
 8087b50:	f8d0 114c 	ldr.w	r1, [r0, #332]	; 0x14c
                unsigned char *tag,
                size_t tag_len )
{
    unsigned char work_buf[16];
    size_t i;
    uint64_t orig_len = ctx->len * 8;
 8087b54:	ea45 7553 	orr.w	r5, r5, r3, lsr #29
 8087b58:	00dc      	lsls	r4, r3, #3
    uint64_t orig_add_len = ctx->add_len * 8;
 8087b5a:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
 8087b5e:	00cf      	lsls	r7, r1, #3
 8087b60:	ea47 7753 	orr.w	r7, r7, r3, lsr #29
 8087b64:	00de      	lsls	r6, r3, #3

    if( tag_len > 16 || tag_len < 4 )
 8087b66:	1f13      	subs	r3, r2, #4
 8087b68:	2b0c      	cmp	r3, #12
}

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
 8087b6a:	4681      	mov	r9, r0
 8087b6c:	4692      	mov	sl, r2
    unsigned char work_buf[16];
    size_t i;
    uint64_t orig_len = ctx->len * 8;
    uint64_t orig_add_len = ctx->add_len * 8;

    if( tag_len > 16 || tag_len < 4 )
 8087b6e:	d85b      	bhi.n	8087c28 <mbedtls_gcm_finish+0xe8>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    memcpy( tag, ctx->base_ectr, tag_len );
 8087b70:	f500 71a8 	add.w	r1, r0, #336	; 0x150
 8087b74:	4640      	mov	r0, r8
 8087b76:	f00c f802 	bl	8093b7e <memcpy>

    if( orig_len || orig_add_len )
 8087b7a:	ea54 0305 	orrs.w	r3, r4, r5
 8087b7e:	d104      	bne.n	8087b8a <mbedtls_gcm_finish+0x4a>
 8087b80:	ea56 0307 	orrs.w	r3, r6, r7
 8087b84:	d101      	bne.n	8087b8a <mbedtls_gcm_finish+0x4a>

        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
    }

    return( 0 );
 8087b86:	2000      	movs	r0, #0
 8087b88:	e050      	b.n	8087c2c <mbedtls_gcm_finish+0xec>

    memcpy( tag, ctx->base_ectr, tag_len );

    if( orig_len || orig_add_len )
    {
        memset( work_buf, 0x00, 16 );
 8087b8a:	2210      	movs	r2, #16
 8087b8c:	2100      	movs	r1, #0
 8087b8e:	4668      	mov	r0, sp
 8087b90:	f00c f81b 	bl	8093bca <memset>

        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 8087b94:	0e3b      	lsrs	r3, r7, #24
 8087b96:	f88d 3000 	strb.w	r3, [sp]
 8087b9a:	0c3b      	lsrs	r3, r7, #16
 8087b9c:	f88d 3001 	strb.w	r3, [sp, #1]
 8087ba0:	0a3b      	lsrs	r3, r7, #8
 8087ba2:	f88d 3002 	strb.w	r3, [sp, #2]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 8087ba6:	0e33      	lsrs	r3, r6, #24
 8087ba8:	f88d 3004 	strb.w	r3, [sp, #4]
 8087bac:	0c33      	lsrs	r3, r6, #16
 8087bae:	f88d 3005 	strb.w	r3, [sp, #5]
 8087bb2:	0a33      	lsrs	r3, r6, #8
 8087bb4:	f88d 3006 	strb.w	r3, [sp, #6]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 8087bb8:	0e2b      	lsrs	r3, r5, #24
 8087bba:	f88d 3008 	strb.w	r3, [sp, #8]
 8087bbe:	0c2b      	lsrs	r3, r5, #16
 8087bc0:	f88d 3009 	strb.w	r3, [sp, #9]
 8087bc4:	0a2b      	lsrs	r3, r5, #8
 8087bc6:	f88d 300a 	strb.w	r3, [sp, #10]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
 8087bca:	0e23      	lsrs	r3, r4, #24
 8087bcc:	f88d 300c 	strb.w	r3, [sp, #12]
 8087bd0:	0c23      	lsrs	r3, r4, #16
 8087bd2:	f88d 300d 	strb.w	r3, [sp, #13]
 8087bd6:	f88d 400f 	strb.w	r4, [sp, #15]
 8087bda:	0a23      	lsrs	r3, r4, #8
 8087bdc:	f209 146f 	addw	r4, r9, #367	; 0x16f
 8087be0:	4622      	mov	r2, r4
 8087be2:	f88d 300e 	strb.w	r3, [sp, #14]

    if( orig_len || orig_add_len )
    {
        memset( work_buf, 0x00, 16 );

        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 8087be6:	f88d 7003 	strb.w	r7, [sp, #3]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 8087bea:	f88d 6007 	strb.w	r6, [sp, #7]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 8087bee:	f88d 500b 	strb.w	r5, [sp, #11]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
 8087bf2:	2300      	movs	r3, #0
            ctx->buf[i] ^= work_buf[i];
 8087bf4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8087bf8:	f81d 1003 	ldrb.w	r1, [sp, r3]
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
 8087bfc:	3301      	adds	r3, #1
            ctx->buf[i] ^= work_buf[i];
 8087bfe:	4041      	eors	r1, r0
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
 8087c00:	2b10      	cmp	r3, #16
            ctx->buf[i] ^= work_buf[i];
 8087c02:	7011      	strb	r1, [r2, #0]
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
 8087c04:	d1f6      	bne.n	8087bf4 <mbedtls_gcm_finish+0xb4>
            ctx->buf[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );
 8087c06:	f509 72b8 	add.w	r2, r9, #368	; 0x170
 8087c0a:	4611      	mov	r1, r2
 8087c0c:	4648      	mov	r0, r9
 8087c0e:	f7ff fd17 	bl	8087640 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
 8087c12:	4641      	mov	r1, r8
 8087c14:	44c2      	add	sl, r8

        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
 8087c16:	780a      	ldrb	r2, [r1, #0]
 8087c18:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8087c1c:	4053      	eors	r3, r2
 8087c1e:	f801 3b01 	strb.w	r3, [r1], #1
        for( i = 0; i < 16; i++ )
            ctx->buf[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );

        for( i = 0; i < tag_len; i++ )
 8087c22:	4551      	cmp	r1, sl
 8087c24:	d1f7      	bne.n	8087c16 <mbedtls_gcm_finish+0xd6>
 8087c26:	e7ae      	b.n	8087b86 <mbedtls_gcm_finish+0x46>
    size_t i;
    uint64_t orig_len = ctx->len * 8;
    uint64_t orig_add_len = ctx->add_len * 8;

    if( tag_len > 16 || tag_len < 4 )
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8087c28:	f06f 0013 	mvn.w	r0, #19
        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
    }

    return( 0 );
}
 8087c2c:	b004      	add	sp, #16
 8087c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08087c32 <mbedtls_gcm_crypt_and_tag>:
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 8087c32:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8087c36:	4617      	mov	r7, r2
 8087c38:	461a      	mov	r2, r3
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 8087c3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 8087c3c:	4604      	mov	r4, r0
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 8087c3e:	9301      	str	r3, [sp, #4]
 8087c40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 8087c42:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 8087c46:	9300      	str	r3, [sp, #0]
 8087c48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 8087c4a:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8087c4e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8087c50:	9d10      	ldr	r5, [sp, #64]	; 0x40
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 8087c52:	f7ff fe60 	bl	8087916 <mbedtls_gcm_starts>
 8087c56:	b970      	cbnz	r0, 8087c76 <mbedtls_gcm_crypt_and_tag+0x44>
        return( ret );

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
 8087c58:	464b      	mov	r3, r9
 8087c5a:	4642      	mov	r2, r8
 8087c5c:	4639      	mov	r1, r7
 8087c5e:	4620      	mov	r0, r4
 8087c60:	f7ff fefc 	bl	8087a5c <mbedtls_gcm_update>
 8087c64:	b938      	cbnz	r0, 8087c76 <mbedtls_gcm_crypt_and_tag+0x44>
        return( ret );

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 8087c66:	4632      	mov	r2, r6
 8087c68:	4629      	mov	r1, r5
 8087c6a:	4620      	mov	r0, r4
        return( ret );

    return( 0 );
}
 8087c6c:	b003      	add	sp, #12
 8087c6e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return( ret );

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
        return( ret );

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 8087c72:	f7ff bf65 	b.w	8087b40 <mbedtls_gcm_finish>
        return( ret );

    return( 0 );
}
 8087c76:	b003      	add	sp, #12
 8087c78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08087c7c <mbedtls_gcm_auth_decrypt>:
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 8087c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8087c7e:	460e      	mov	r6, r1
 8087c80:	b08d      	sub	sp, #52	; 0x34
    int ret;
    unsigned char check_tag[16];
    size_t i;
    int diff;

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 8087c82:	9916      	ldr	r1, [sp, #88]	; 0x58
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 8087c84:	9d15      	ldr	r5, [sp, #84]	; 0x54
    int ret;
    unsigned char check_tag[16];
    size_t i;
    int diff;

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 8087c86:	9103      	str	r1, [sp, #12]
 8087c88:	9913      	ldr	r1, [sp, #76]	; 0x4c
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 8087c8a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    int ret;
    unsigned char check_tag[16];
    size_t i;
    int diff;

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 8087c8c:	9102      	str	r1, [sp, #8]
 8087c8e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8087c90:	af08      	add	r7, sp, #32
 8087c92:	9101      	str	r1, [sp, #4]
 8087c94:	9300      	str	r3, [sp, #0]
 8087c96:	9706      	str	r7, [sp, #24]
 8087c98:	4613      	mov	r3, r2
 8087c9a:	9505      	str	r5, [sp, #20]
 8087c9c:	9404      	str	r4, [sp, #16]
 8087c9e:	4632      	mov	r2, r6
 8087ca0:	2100      	movs	r1, #0
 8087ca2:	f7ff ffc6 	bl	8087c32 <mbedtls_gcm_crypt_and_tag>
 8087ca6:	b998      	cbnz	r0, 8087cd0 <mbedtls_gcm_auth_decrypt+0x54>
 8087ca8:	4603      	mov	r3, r0
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 8087caa:	42ab      	cmp	r3, r5
 8087cac:	d006      	beq.n	8087cbc <mbedtls_gcm_auth_decrypt+0x40>
        diff |= tag[i] ^ check_tag[i];
 8087cae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8087cb0:	5cd1      	ldrb	r1, [r2, r3]
 8087cb2:	5cfa      	ldrb	r2, [r7, r3]
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 8087cb4:	3301      	adds	r3, #1
        diff |= tag[i] ^ check_tag[i];
 8087cb6:	404a      	eors	r2, r1
 8087cb8:	4310      	orrs	r0, r2
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 8087cba:	e7f6      	b.n	8087caa <mbedtls_gcm_auth_decrypt+0x2e>
        diff |= tag[i] ^ check_tag[i];

    if( diff != 0 )
 8087cbc:	b140      	cbz	r0, 8087cd0 <mbedtls_gcm_auth_decrypt+0x54>
 8087cbe:	4426      	add	r6, r4
}
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8087cc0:	2300      	movs	r3, #0
 8087cc2:	42a6      	cmp	r6, r4
 8087cc4:	d002      	beq.n	8087ccc <mbedtls_gcm_auth_decrypt+0x50>
 8087cc6:	7023      	strb	r3, [r4, #0]
 8087cc8:	3401      	adds	r4, #1
 8087cca:	e7fa      	b.n	8087cc2 <mbedtls_gcm_auth_decrypt+0x46>
        diff |= tag[i] ^ check_tag[i];

    if( diff != 0 )
    {
        mbedtls_zeroize( output, length );
        return( MBEDTLS_ERR_GCM_AUTH_FAILED );
 8087ccc:	f06f 0011 	mvn.w	r0, #17
    }

    return( 0 );
}
 8087cd0:	b00d      	add	sp, #52	; 0x34
 8087cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08087cd4 <mbedtls_gcm_free>:

void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
{
 8087cd4:	b510      	push	{r4, lr}
 8087cd6:	4604      	mov	r4, r0
    mbedtls_cipher_free( &ctx->cipher_ctx );
 8087cd8:	f7fb fc36 	bl	8083548 <mbedtls_cipher_free>
 8087cdc:	f504 72c4 	add.w	r2, r4, #392	; 0x188
}
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8087ce0:	2300      	movs	r3, #0
 8087ce2:	4294      	cmp	r4, r2
 8087ce4:	d002      	beq.n	8087cec <mbedtls_gcm_free+0x18>
 8087ce6:	7023      	strb	r3, [r4, #0]
 8087ce8:	3401      	adds	r4, #1
 8087cea:	e7fa      	b.n	8087ce2 <mbedtls_gcm_free+0xe>
 8087cec:	bd10      	pop	{r4, pc}
	...

08087cf0 <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 8087cf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 8087cf4:	2700      	movs	r7, #0
 8087cf6:	463c      	mov	r4, r7
 8087cf8:	463d      	mov	r5, r7
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 8087cfa:	f8dd e01c 	ldr.w	lr, [sp, #28]
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] == '=' && ++j > 2 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 8087cfe:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8087e18 <mbedtls_base64_decode+0x128>
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 8087d02:	4575      	cmp	r5, lr
 8087d04:	d22d      	bcs.n	8087d62 <mbedtls_base64_decode+0x72>
 8087d06:	f04f 0c00 	mov.w	ip, #0
    {
        /* Skip spaces before checking for EOL */
        x = 0;
        while( i < slen && src[i] == ' ' )
 8087d0a:	5d5e      	ldrb	r6, [r3, r5]
 8087d0c:	2e20      	cmp	r6, #32
 8087d0e:	d104      	bne.n	8087d1a <mbedtls_base64_decode+0x2a>
        {
            ++i;
 8087d10:	3501      	adds	r5, #1
    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
    {
        /* Skip spaces before checking for EOL */
        x = 0;
        while( i < slen && src[i] == ' ' )
 8087d12:	45ae      	cmp	lr, r5
        {
            ++i;
            ++x;
 8087d14:	f10c 0c01 	add.w	ip, ip, #1
    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
    {
        /* Skip spaces before checking for EOL */
        x = 0;
        while( i < slen && src[i] == ' ' )
 8087d18:	d8f7      	bhi.n	8087d0a <mbedtls_base64_decode+0x1a>
            ++i;
            ++x;
        }

        /* Spaces at end of buffer are OK */
        if( i == slen )
 8087d1a:	45ae      	cmp	lr, r5
 8087d1c:	d021      	beq.n	8087d62 <mbedtls_base64_decode+0x72>
            break;

        if( ( slen - i ) >= 2 &&
 8087d1e:	ebc5 060e 	rsb	r6, r5, lr
 8087d22:	2e01      	cmp	r6, #1
 8087d24:	d906      	bls.n	8087d34 <mbedtls_base64_decode+0x44>
 8087d26:	5d5e      	ldrb	r6, [r3, r5]
 8087d28:	2e0d      	cmp	r6, #13
 8087d2a:	d103      	bne.n	8087d34 <mbedtls_base64_decode+0x44>
            src[i] == '\r' && src[i + 1] == '\n' )
 8087d2c:	195e      	adds	r6, r3, r5
 8087d2e:	7876      	ldrb	r6, [r6, #1]
 8087d30:	2e0a      	cmp	r6, #10
 8087d32:	d014      	beq.n	8087d5e <mbedtls_base64_decode+0x6e>
            continue;

        if( src[i] == '\n' )
 8087d34:	5d5e      	ldrb	r6, [r3, r5]
 8087d36:	2e0a      	cmp	r6, #10
 8087d38:	d011      	beq.n	8087d5e <mbedtls_base64_decode+0x6e>
            continue;

        /* Space inside a line is an error */
        if( x != 0 )
 8087d3a:	f1bc 0f00 	cmp.w	ip, #0
 8087d3e:	d166      	bne.n	8087e0e <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] == '=' && ++j > 2 )
 8087d40:	2e3d      	cmp	r6, #61	; 0x3d
 8087d42:	d102      	bne.n	8087d4a <mbedtls_base64_decode+0x5a>
 8087d44:	3701      	adds	r7, #1
 8087d46:	2f02      	cmp	r7, #2
 8087d48:	d861      	bhi.n	8087e0e <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 8087d4a:	f016 0f80 	tst.w	r6, #128	; 0x80
 8087d4e:	d15e      	bne.n	8087e0e <mbedtls_base64_decode+0x11e>
 8087d50:	f818 6006 	ldrb.w	r6, [r8, r6]
 8087d54:	2e7f      	cmp	r6, #127	; 0x7f
 8087d56:	d05a      	beq.n	8087e0e <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( base64_dec_map[src[i]] < 64 && j != 0 )
 8087d58:	2e3f      	cmp	r6, #63	; 0x3f
 8087d5a:	d956      	bls.n	8087e0a <mbedtls_base64_decode+0x11a>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        n++;
 8087d5c:	3401      	adds	r4, #1
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 8087d5e:	3501      	adds	r5, #1
 8087d60:	e7cf      	b.n	8087d02 <mbedtls_base64_decode+0x12>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        n++;
    }

    if( n == 0 )
 8087d62:	b91c      	cbnz	r4, 8087d6c <mbedtls_base64_decode+0x7c>
    {
        *olen = 0;
 8087d64:	6014      	str	r4, [r2, #0]
        return( 0 );
 8087d66:	4620      	mov	r0, r4
 8087d68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    /* The following expression is to calculate the following formula without
     * risk of integer overflow in n:
     *     n = ( ( n * 6 ) + 7 ) >> 3;
     */
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
    n -= j;
 8087d6c:	f004 0e07 	and.w	lr, r4, #7
 8087d70:	2606      	movs	r6, #6
 8087d72:	08e4      	lsrs	r4, r4, #3
 8087d74:	fb06 fe0e 	mul.w	lr, r6, lr
 8087d78:	4366      	muls	r6, r4
 8087d7a:	f10e 0e07 	add.w	lr, lr, #7
 8087d7e:	1bf6      	subs	r6, r6, r7
 8087d80:	eb06 04de 	add.w	r4, r6, lr, lsr #3

    if( dst == NULL || dlen < n )
 8087d84:	b160      	cbz	r0, 8087da0 <mbedtls_base64_decode+0xb0>
 8087d86:	428c      	cmp	r4, r1
 8087d88:	d80a      	bhi.n	8087da0 <mbedtls_base64_decode+0xb0>
 8087d8a:	2600      	movs	r6, #0
 8087d8c:	eb03 0e05 	add.w	lr, r3, r5
 8087d90:	4601      	mov	r1, r0
 8087d92:	2503      	movs	r5, #3
 8087d94:	4634      	mov	r4, r6
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 8087d96:	f8df c080 	ldr.w	ip, [pc, #128]	; 8087e18 <mbedtls_base64_decode+0x128>
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 8087d9a:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8087e1c <mbedtls_base64_decode+0x12c>
 8087d9e:	e00f      	b.n	8087dc0 <mbedtls_base64_decode+0xd0>
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
    n -= j;

    if( dst == NULL || dlen < n )
    {
        *olen = n;
 8087da0:	6014      	str	r4, [r2, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
 8087da2:	f06f 0029 	mvn.w	r0, #41	; 0x29
 8087da6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 8087daa:	f813 9b01 	ldrb.w	r9, [r3], #1
 8087dae:	f1a9 070a 	sub.w	r7, r9, #10
 8087db2:	b2ff      	uxtb	r7, r7
 8087db4:	2f16      	cmp	r7, #22
 8087db6:	d806      	bhi.n	8087dc6 <mbedtls_base64_decode+0xd6>
 8087db8:	fa28 f707 	lsr.w	r7, r8, r7
 8087dbc:	07ff      	lsls	r7, r7, #31
 8087dbe:	d502      	bpl.n	8087dc6 <mbedtls_base64_decode+0xd6>
    {
        *olen = n;
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 8087dc0:	4573      	cmp	r3, lr
 8087dc2:	d1f2      	bne.n	8087daa <mbedtls_base64_decode+0xba>
 8087dc4:	e01c      	b.n	8087e00 <mbedtls_base64_decode+0x110>
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 8087dc6:	f81c 7009 	ldrb.w	r7, [ip, r9]
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
 8087dca:	3401      	adds	r4, #1
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 8087dcc:	2f40      	cmp	r7, #64	; 0x40
 8087dce:	bf08      	it	eq
 8087dd0:	3d01      	subeq	r5, #1
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 8087dd2:	f007 073f 	and.w	r7, r7, #63	; 0x3f

        if( ++n == 4 )
 8087dd6:	2c04      	cmp	r4, #4
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 8087dd8:	ea47 1686 	orr.w	r6, r7, r6, lsl #6

        if( ++n == 4 )
 8087ddc:	d1f0      	bne.n	8087dc0 <mbedtls_base64_decode+0xd0>
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 8087dde:	b16d      	cbz	r5, 8087dfc <mbedtls_base64_decode+0x10c>
 8087de0:	0c34      	lsrs	r4, r6, #16
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 8087de2:	2d01      	cmp	r5, #1
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 8087de4:	700c      	strb	r4, [r1, #0]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 8087de6:	d101      	bne.n	8087dec <mbedtls_base64_decode+0xfc>
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 8087de8:	3101      	adds	r1, #1
 8087dea:	e007      	b.n	8087dfc <mbedtls_base64_decode+0x10c>
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
            if( j > 2 ) *p++ = (unsigned char)( x       );
 8087dec:	2d02      	cmp	r5, #2

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 8087dee:	ea4f 2416 	mov.w	r4, r6, lsr #8
 8087df2:	704c      	strb	r4, [r1, #1]
            if( j > 2 ) *p++ = (unsigned char)( x       );
 8087df4:	bf16      	itet	ne
 8087df6:	708e      	strbne	r6, [r1, #2]

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 8087df8:	3102      	addeq	r1, #2
            if( j > 2 ) *p++ = (unsigned char)( x       );
 8087dfa:	3103      	addne	r1, #3
        j -= ( base64_dec_map[*src] == 64 );
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
        {
            n = 0;
 8087dfc:	2400      	movs	r4, #0
 8087dfe:	e7df      	b.n	8087dc0 <mbedtls_base64_decode+0xd0>
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
            if( j > 2 ) *p++ = (unsigned char)( x       );
        }
    }

    *olen = p - dst;
 8087e00:	1a08      	subs	r0, r1, r0
 8087e02:	6010      	str	r0, [r2, #0]

    return( 0 );
 8087e04:	2000      	movs	r0, #0
 8087e06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( base64_dec_map[src[i]] < 64 && j != 0 )
 8087e0a:	2f00      	cmp	r7, #0
 8087e0c:	d0a6      	beq.n	8087d5c <mbedtls_base64_decode+0x6c>
        if( src[i] == '\n' )
            continue;

        /* Space inside a line is an error */
        if( x != 0 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 8087e0e:	f06f 002b 	mvn.w	r0, #43	; 0x2b
 8087e12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8087e16:	bf00      	nop
 8087e18:	08095580 	.word	0x08095580
 8087e1c:	00400009 	.word	0x00400009

08087e20 <mbedtls_md_info_from_type>:
#endif
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
 8087e20:	3804      	subs	r0, #4
 8087e22:	b2c0      	uxtb	r0, r0
 8087e24:	2804      	cmp	r0, #4
 8087e26:	bf9a      	itte	ls
 8087e28:	4b02      	ldrls	r3, [pc, #8]	; (8087e34 <mbedtls_md_info_from_type+0x14>)
 8087e2a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8087e2e:	2000      	movhi	r0, #0
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
    }
}
 8087e30:	4770      	bx	lr
 8087e32:	bf00      	nop
 8087e34:	08095600 	.word	0x08095600

08087e38 <mbedtls_md_init>:

void mbedtls_md_init( mbedtls_md_context_t *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_md_context_t ) );
 8087e38:	2300      	movs	r3, #0
 8087e3a:	6003      	str	r3, [r0, #0]
 8087e3c:	6043      	str	r3, [r0, #4]
 8087e3e:	6083      	str	r3, [r0, #8]
 8087e40:	4770      	bx	lr

08087e42 <mbedtls_md_free>:
}

void mbedtls_md_free( mbedtls_md_context_t *ctx )
{
 8087e42:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->md_info == NULL )
 8087e44:	4604      	mov	r4, r0
 8087e46:	b1e0      	cbz	r0, 8087e82 <mbedtls_md_free+0x40>
 8087e48:	6803      	ldr	r3, [r0, #0]
 8087e4a:	b1d3      	cbz	r3, 8087e82 <mbedtls_md_free+0x40>
        return;

    if( ctx->md_ctx != NULL )
 8087e4c:	6840      	ldr	r0, [r0, #4]
 8087e4e:	b108      	cbz	r0, 8087e54 <mbedtls_md_free+0x12>
        ctx->md_info->ctx_free_func( ctx->md_ctx );
 8087e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8087e52:	4798      	blx	r3

    if( ctx->hmac_ctx != NULL )
 8087e54:	68a3      	ldr	r3, [r4, #8]
 8087e56:	b163      	cbz	r3, 8087e72 <mbedtls_md_free+0x30>
    {
        mbedtls_zeroize( ctx->hmac_ctx, 2 * ctx->md_info->block_size );
 8087e58:	6822      	ldr	r2, [r4, #0]
#include <stdio.h>
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8087e5a:	2100      	movs	r1, #0
 8087e5c:	68d2      	ldr	r2, [r2, #12]
 8087e5e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8087e62:	429a      	cmp	r2, r3
 8087e64:	d002      	beq.n	8087e6c <mbedtls_md_free+0x2a>
 8087e66:	7019      	strb	r1, [r3, #0]
 8087e68:	3301      	adds	r3, #1
 8087e6a:	e7fa      	b.n	8087e62 <mbedtls_md_free+0x20>
        ctx->md_info->ctx_free_func( ctx->md_ctx );

    if( ctx->hmac_ctx != NULL )
    {
        mbedtls_zeroize( ctx->hmac_ctx, 2 * ctx->md_info->block_size );
        mbedtls_free( ctx->hmac_ctx );
 8087e6c:	68a0      	ldr	r0, [r4, #8]
 8087e6e:	f009 fb65 	bl	809153c <free>
 8087e72:	f104 020c 	add.w	r2, r4, #12
#include <stdio.h>
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8087e76:	2300      	movs	r3, #0
 8087e78:	4294      	cmp	r4, r2
 8087e7a:	d002      	beq.n	8087e82 <mbedtls_md_free+0x40>
 8087e7c:	7023      	strb	r3, [r4, #0]
 8087e7e:	3401      	adds	r4, #1
 8087e80:	e7fa      	b.n	8087e78 <mbedtls_md_free+0x36>
 8087e82:	bd10      	pop	{r4, pc}

08087e84 <mbedtls_md_setup>:
    return mbedtls_md_setup( ctx, md_info, 1 );
}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
 8087e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8087e86:	4605      	mov	r5, r0
 8087e88:	4617      	mov	r7, r2
    if( md_info == NULL || ctx == NULL )
 8087e8a:	460c      	mov	r4, r1
 8087e8c:	b199      	cbz	r1, 8087eb6 <mbedtls_md_setup+0x32>
 8087e8e:	b190      	cbz	r0, 8087eb6 <mbedtls_md_setup+0x32>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
 8087e90:	6a0b      	ldr	r3, [r1, #32]
 8087e92:	4798      	blx	r3
 8087e94:	4606      	mov	r6, r0
 8087e96:	6068      	str	r0, [r5, #4]
 8087e98:	b178      	cbz	r0, 8087eba <mbedtls_md_setup+0x36>
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );

    if( hmac != 0 )
 8087e9a:	b14f      	cbz	r7, 8087eb0 <mbedtls_md_setup+0x2c>
    {
        ctx->hmac_ctx = mbedtls_calloc( 2, md_info->block_size );
 8087e9c:	68e1      	ldr	r1, [r4, #12]
 8087e9e:	2002      	movs	r0, #2
 8087ea0:	f00b fe48 	bl	8093b34 <calloc>
 8087ea4:	60a8      	str	r0, [r5, #8]
        if( ctx->hmac_ctx == NULL )
 8087ea6:	b918      	cbnz	r0, 8087eb0 <mbedtls_md_setup+0x2c>
        {
            md_info->ctx_free_func( ctx->md_ctx );
 8087ea8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8087eaa:	4630      	mov	r0, r6
 8087eac:	4798      	blx	r3
 8087eae:	e004      	b.n	8087eba <mbedtls_md_setup+0x36>
            return( MBEDTLS_ERR_MD_ALLOC_FAILED );
        }
    }

    ctx->md_info = md_info;
 8087eb0:	602c      	str	r4, [r5, #0]

    return( 0 );
 8087eb2:	2000      	movs	r0, #0
 8087eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
    if( md_info == NULL || ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8087eb6:	4802      	ldr	r0, [pc, #8]	; (8087ec0 <mbedtls_md_setup+0x3c>)
 8087eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );
 8087eba:	4802      	ldr	r0, [pc, #8]	; (8087ec4 <mbedtls_md_setup+0x40>)
    }

    ctx->md_info = md_info;

    return( 0 );
}
 8087ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8087ebe:	bf00      	nop
 8087ec0:	ffffaf00 	.word	0xffffaf00
 8087ec4:	ffffae80 	.word	0xffffae80

08087ec8 <mbedtls_md_starts>:

int mbedtls_md_starts( mbedtls_md_context_t *ctx )
{
    if( ctx == NULL || ctx->md_info == NULL )
 8087ec8:	b120      	cbz	r0, 8087ed4 <mbedtls_md_starts+0xc>
 8087eca:	6803      	ldr	r3, [r0, #0]
 8087ecc:	b113      	cbz	r3, 8087ed4 <mbedtls_md_starts+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->starts_func( ctx->md_ctx ) );
 8087ece:	691b      	ldr	r3, [r3, #16]
 8087ed0:	6840      	ldr	r0, [r0, #4]
 8087ed2:	4718      	bx	r3
}
 8087ed4:	4800      	ldr	r0, [pc, #0]	; (8087ed8 <mbedtls_md_starts+0x10>)
 8087ed6:	4770      	bx	lr
 8087ed8:	ffffaf00 	.word	0xffffaf00

08087edc <mbedtls_md_update>:

int mbedtls_md_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL )
 8087edc:	b120      	cbz	r0, 8087ee8 <mbedtls_md_update+0xc>
 8087ede:	6803      	ldr	r3, [r0, #0]
 8087ee0:	b113      	cbz	r3, 8087ee8 <mbedtls_md_update+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 8087ee2:	695b      	ldr	r3, [r3, #20]
 8087ee4:	6840      	ldr	r0, [r0, #4]
 8087ee6:	4718      	bx	r3
}
 8087ee8:	4800      	ldr	r0, [pc, #0]	; (8087eec <mbedtls_md_update+0x10>)
 8087eea:	4770      	bx	lr
 8087eec:	ffffaf00 	.word	0xffffaf00

08087ef0 <mbedtls_md_finish>:

int mbedtls_md_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
    if( ctx == NULL || ctx->md_info == NULL )
 8087ef0:	b120      	cbz	r0, 8087efc <mbedtls_md_finish+0xc>
 8087ef2:	6803      	ldr	r3, [r0, #0]
 8087ef4:	b113      	cbz	r3, 8087efc <mbedtls_md_finish+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
 8087ef6:	699b      	ldr	r3, [r3, #24]
 8087ef8:	6840      	ldr	r0, [r0, #4]
 8087efa:	4718      	bx	r3
}
 8087efc:	4800      	ldr	r0, [pc, #0]	; (8087f00 <mbedtls_md_finish+0x10>)
 8087efe:	4770      	bx	lr
 8087f00:	ffffaf00 	.word	0xffffaf00

08087f04 <mbedtls_md>:

int mbedtls_md( const mbedtls_md_info_t *md_info, const unsigned char *input, size_t ilen,
            unsigned char *output )
{
 8087f04:	b430      	push	{r4, r5}
 8087f06:	460d      	mov	r5, r1
 8087f08:	4611      	mov	r1, r2
    if( md_info == NULL )
 8087f0a:	b128      	cbz	r0, 8087f18 <mbedtls_md+0x14>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( md_info->digest_func( input, ilen, output ) );
 8087f0c:	69c4      	ldr	r4, [r0, #28]
 8087f0e:	461a      	mov	r2, r3
 8087f10:	4628      	mov	r0, r5
 8087f12:	4623      	mov	r3, r4
}
 8087f14:	bc30      	pop	{r4, r5}
            unsigned char *output )
{
    if( md_info == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( md_info->digest_func( input, ilen, output ) );
 8087f16:	4718      	bx	r3
}
 8087f18:	4801      	ldr	r0, [pc, #4]	; (8087f20 <mbedtls_md+0x1c>)
 8087f1a:	bc30      	pop	{r4, r5}
 8087f1c:	4770      	bx	lr
 8087f1e:	bf00      	nop
 8087f20:	ffffaf00 	.word	0xffffaf00

08087f24 <mbedtls_md_hmac_starts>:
    return( ret );
}
#endif /* MBEDTLS_FS_IO */

int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )
{
 8087f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8087f28:	460d      	mov	r5, r1
 8087f2a:	b090      	sub	sp, #64	; 0x40
 8087f2c:	4617      	mov	r7, r2
    int ret;
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8087f2e:	4604      	mov	r4, r0
 8087f30:	2800      	cmp	r0, #0
 8087f32:	d050      	beq.n	8087fd6 <mbedtls_md_hmac_starts+0xb2>
 8087f34:	6803      	ldr	r3, [r0, #0]
 8087f36:	2b00      	cmp	r3, #0
 8087f38:	d04d      	beq.n	8087fd6 <mbedtls_md_hmac_starts+0xb2>
 8087f3a:	6882      	ldr	r2, [r0, #8]
 8087f3c:	2a00      	cmp	r2, #0
 8087f3e:	d04a      	beq.n	8087fd6 <mbedtls_md_hmac_starts+0xb2>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( keylen > (size_t) ctx->md_info->block_size )
 8087f40:	68da      	ldr	r2, [r3, #12]
 8087f42:	42ba      	cmp	r2, r7
 8087f44:	d215      	bcs.n	8087f72 <mbedtls_md_hmac_starts+0x4e>
    {
        if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 8087f46:	691b      	ldr	r3, [r3, #16]
 8087f48:	6840      	ldr	r0, [r0, #4]
 8087f4a:	4798      	blx	r3
 8087f4c:	2800      	cmp	r0, #0
 8087f4e:	d139      	bne.n	8087fc4 <mbedtls_md_hmac_starts+0xa0>
            goto cleanup;
        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
 8087f50:	6823      	ldr	r3, [r4, #0]
 8087f52:	463a      	mov	r2, r7
 8087f54:	695b      	ldr	r3, [r3, #20]
 8087f56:	4629      	mov	r1, r5
 8087f58:	6860      	ldr	r0, [r4, #4]
 8087f5a:	4798      	blx	r3
 8087f5c:	2800      	cmp	r0, #0
 8087f5e:	d131      	bne.n	8087fc4 <mbedtls_md_hmac_starts+0xa0>
            goto cleanup;
        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
 8087f60:	6823      	ldr	r3, [r4, #0]
 8087f62:	4669      	mov	r1, sp
 8087f64:	699b      	ldr	r3, [r3, #24]
 8087f66:	6860      	ldr	r0, [r4, #4]
 8087f68:	4798      	blx	r3
 8087f6a:	bb58      	cbnz	r0, 8087fc4 <mbedtls_md_hmac_starts+0xa0>
            goto cleanup;

        keylen = ctx->md_info->size;
        key = sum;
 8087f6c:	466d      	mov	r5, sp
        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
            goto cleanup;
        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
            goto cleanup;

        keylen = ctx->md_info->size;
 8087f6e:	6823      	ldr	r3, [r4, #0]
 8087f70:	689f      	ldr	r7, [r3, #8]
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8087f72:	6823      	ldr	r3, [r4, #0]

        keylen = ctx->md_info->size;
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
 8087f74:	68a6      	ldr	r6, [r4, #8]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8087f76:	68da      	ldr	r2, [r3, #12]

    memset( ipad, 0x36, ctx->md_info->block_size );
 8087f78:	2136      	movs	r1, #54	; 0x36
 8087f7a:	4630      	mov	r0, r6
        keylen = ctx->md_info->size;
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8087f7c:	eb06 0802 	add.w	r8, r6, r2

    memset( ipad, 0x36, ctx->md_info->block_size );
 8087f80:	f00b fe23 	bl	8093bca <memset>
    memset( opad, 0x5C, ctx->md_info->block_size );
 8087f84:	6823      	ldr	r3, [r4, #0]
 8087f86:	215c      	movs	r1, #92	; 0x5c
 8087f88:	68da      	ldr	r2, [r3, #12]
 8087f8a:	4640      	mov	r0, r8
 8087f8c:	f00b fe1d 	bl	8093bca <memset>

    for( i = 0; i < keylen; i++ )
 8087f90:	2300      	movs	r3, #0
 8087f92:	429f      	cmp	r7, r3
 8087f94:	d00b      	beq.n	8087fae <mbedtls_md_hmac_starts+0x8a>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 8087f96:	5cf1      	ldrb	r1, [r6, r3]
 8087f98:	5cea      	ldrb	r2, [r5, r3]
 8087f9a:	404a      	eors	r2, r1
 8087f9c:	54f2      	strb	r2, [r6, r3]
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 8087f9e:	f818 1003 	ldrb.w	r1, [r8, r3]
 8087fa2:	5cea      	ldrb	r2, [r5, r3]
 8087fa4:	404a      	eors	r2, r1
 8087fa6:	f808 2003 	strb.w	r2, [r8, r3]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
 8087faa:	3301      	adds	r3, #1
 8087fac:	e7f1      	b.n	8087f92 <mbedtls_md_hmac_starts+0x6e>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
    }

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 8087fae:	6823      	ldr	r3, [r4, #0]
 8087fb0:	6860      	ldr	r0, [r4, #4]
 8087fb2:	691b      	ldr	r3, [r3, #16]
 8087fb4:	4798      	blx	r3
 8087fb6:	b928      	cbnz	r0, 8087fc4 <mbedtls_md_hmac_starts+0xa0>
        goto cleanup;
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, ipad,
 8087fb8:	6823      	ldr	r3, [r4, #0]
 8087fba:	4631      	mov	r1, r6
 8087fbc:	695d      	ldr	r5, [r3, #20]
 8087fbe:	68da      	ldr	r2, [r3, #12]
 8087fc0:	6860      	ldr	r0, [r4, #4]
 8087fc2:	47a8      	blx	r5
 8087fc4:	2300      	movs	r3, #0
#include <stdio.h>
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8087fc6:	4619      	mov	r1, r3
 8087fc8:	eb0d 0203 	add.w	r2, sp, r3
 8087fcc:	3301      	adds	r3, #1
 8087fce:	2b41      	cmp	r3, #65	; 0x41
 8087fd0:	d002      	beq.n	8087fd8 <mbedtls_md_hmac_starts+0xb4>
 8087fd2:	7011      	strb	r1, [r2, #0]
 8087fd4:	e7f8      	b.n	8087fc8 <mbedtls_md_hmac_starts+0xa4>
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8087fd6:	4802      	ldr	r0, [pc, #8]	; (8087fe0 <mbedtls_md_hmac_starts+0xbc>)

cleanup:
    mbedtls_zeroize( sum, sizeof( sum ) );

    return( ret );
}
 8087fd8:	b010      	add	sp, #64	; 0x40
 8087fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8087fde:	bf00      	nop
 8087fe0:	ffffaf00 	.word	0xffffaf00

08087fe4 <mbedtls_md_hmac_update>:

int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
 8087fe4:	b410      	push	{r4}
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8087fe6:	b138      	cbz	r0, 8087ff8 <mbedtls_md_hmac_update+0x14>
 8087fe8:	6803      	ldr	r3, [r0, #0]
 8087fea:	b12b      	cbz	r3, 8087ff8 <mbedtls_md_hmac_update+0x14>
 8087fec:	6884      	ldr	r4, [r0, #8]
 8087fee:	b11c      	cbz	r4, 8087ff8 <mbedtls_md_hmac_update+0x14>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 8087ff0:	695b      	ldr	r3, [r3, #20]
 8087ff2:	6840      	ldr	r0, [r0, #4]
}
 8087ff4:	bc10      	pop	{r4}
int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 8087ff6:	4718      	bx	r3
}
 8087ff8:	4801      	ldr	r0, [pc, #4]	; (8088000 <mbedtls_md_hmac_update+0x1c>)
 8087ffa:	bc10      	pop	{r4}
 8087ffc:	4770      	bx	lr
 8087ffe:	bf00      	nop
 8088000:	ffffaf00 	.word	0xffffaf00

08088004 <mbedtls_md_hmac_finish>:

int mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
 8088004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8088008:	460d      	mov	r5, r1
 808800a:	b090      	sub	sp, #64	; 0x40
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 808800c:	4604      	mov	r4, r0
 808800e:	b318      	cbz	r0, 8088058 <mbedtls_md_hmac_finish+0x54>
 8088010:	6803      	ldr	r3, [r0, #0]
 8088012:	b30b      	cbz	r3, 8088058 <mbedtls_md_hmac_finish+0x54>
 8088014:	6886      	ldr	r6, [r0, #8]
 8088016:	b1fe      	cbz	r6, 8088058 <mbedtls_md_hmac_finish+0x54>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8088018:	68df      	ldr	r7, [r3, #12]

    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
 808801a:	4669      	mov	r1, sp
 808801c:	699b      	ldr	r3, [r3, #24]
 808801e:	6840      	ldr	r0, [r0, #4]
 8088020:	4798      	blx	r3
 8088022:	b9d0      	cbnz	r0, 808805a <mbedtls_md_hmac_finish+0x56>
        return( ret );
    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 8088024:	6823      	ldr	r3, [r4, #0]
 8088026:	6860      	ldr	r0, [r4, #4]
 8088028:	691b      	ldr	r3, [r3, #16]
 808802a:	4798      	blx	r3
 808802c:	b9a8      	cbnz	r0, 808805a <mbedtls_md_hmac_finish+0x56>
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, opad,
 808802e:	6823      	ldr	r3, [r4, #0]
 8088030:	19f1      	adds	r1, r6, r7
 8088032:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8088036:	68da      	ldr	r2, [r3, #12]
 8088038:	6860      	ldr	r0, [r4, #4]
 808803a:	47c0      	blx	r8
 808803c:	b968      	cbnz	r0, 808805a <mbedtls_md_hmac_finish+0x56>
                                           ctx->md_info->block_size ) ) != 0 )
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
 808803e:	6823      	ldr	r3, [r4, #0]
 8088040:	4669      	mov	r1, sp
 8088042:	695e      	ldr	r6, [r3, #20]
 8088044:	689a      	ldr	r2, [r3, #8]
 8088046:	6860      	ldr	r0, [r4, #4]
 8088048:	47b0      	blx	r6
 808804a:	b930      	cbnz	r0, 808805a <mbedtls_md_hmac_finish+0x56>
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
 808804c:	6823      	ldr	r3, [r4, #0]
 808804e:	4629      	mov	r1, r5
 8088050:	699b      	ldr	r3, [r3, #24]
 8088052:	6860      	ldr	r0, [r4, #4]
 8088054:	4798      	blx	r3
 8088056:	e000      	b.n	808805a <mbedtls_md_hmac_finish+0x56>
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8088058:	4801      	ldr	r0, [pc, #4]	; (8088060 <mbedtls_md_hmac_finish+0x5c>)
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
}
 808805a:	b010      	add	sp, #64	; 0x40
 808805c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8088060:	ffffaf00 	.word	0xffffaf00

08088064 <mbedtls_md_hmac_reset>:

int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )
{
 8088064:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8088066:	4604      	mov	r4, r0
 8088068:	b180      	cbz	r0, 808808c <mbedtls_md_hmac_reset+0x28>
 808806a:	6803      	ldr	r3, [r0, #0]
 808806c:	b173      	cbz	r3, 808808c <mbedtls_md_hmac_reset+0x28>
 808806e:	6885      	ldr	r5, [r0, #8]
 8088070:	b165      	cbz	r5, 808808c <mbedtls_md_hmac_reset+0x28>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 8088072:	691b      	ldr	r3, [r3, #16]
 8088074:	6840      	ldr	r0, [r0, #4]
 8088076:	4798      	blx	r3
 8088078:	b948      	cbnz	r0, 808808e <mbedtls_md_hmac_reset+0x2a>
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
 808807a:	6823      	ldr	r3, [r4, #0]
                                       ctx->md_info->block_size ) );
 808807c:	4629      	mov	r1, r5
 808807e:	695e      	ldr	r6, [r3, #20]
 8088080:	68da      	ldr	r2, [r3, #12]
 8088082:	6860      	ldr	r0, [r4, #4]
 8088084:	4633      	mov	r3, r6
}
 8088086:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
                                       ctx->md_info->block_size ) );
 808808a:	4718      	bx	r3
{
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 808808c:	4800      	ldr	r0, [pc, #0]	; (8088090 <mbedtls_md_hmac_reset+0x2c>)

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
                                       ctx->md_info->block_size ) );
}
 808808e:	bd70      	pop	{r4, r5, r6, pc}
 8088090:	ffffaf00 	.word	0xffffaf00

08088094 <mbedtls_md_process>:
    return( ret );
}

int mbedtls_md_process( mbedtls_md_context_t *ctx, const unsigned char *data )
{
    if( ctx == NULL || ctx->md_info == NULL )
 8088094:	b120      	cbz	r0, 80880a0 <mbedtls_md_process+0xc>
 8088096:	6803      	ldr	r3, [r0, #0]
 8088098:	b113      	cbz	r3, 80880a0 <mbedtls_md_process+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->process_func( ctx->md_ctx, data ) );
 808809a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808809c:	6840      	ldr	r0, [r0, #4]
 808809e:	4718      	bx	r3
}
 80880a0:	4800      	ldr	r0, [pc, #0]	; (80880a4 <mbedtls_md_process+0x10>)
 80880a2:	4770      	bx	lr
 80880a4:	ffffaf00 	.word	0xffffaf00

080880a8 <mbedtls_md_get_size>:

unsigned char mbedtls_md_get_size( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
 80880a8:	b100      	cbz	r0, 80880ac <mbedtls_md_get_size+0x4>
        return( 0 );

    return md_info->size;
 80880aa:	7a00      	ldrb	r0, [r0, #8]
}
 80880ac:	4770      	bx	lr

080880ae <_ZL15mbedtls_zeroizePvj>:
#include <dirent.h>
#endif /* !_WIN32 || EFIX64 || EFI32 */
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 80880ae:	4401      	add	r1, r0
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80880b0:	2300      	movs	r3, #0
 80880b2:	4288      	cmp	r0, r1
 80880b4:	d002      	beq.n	80880bc <_ZL15mbedtls_zeroizePvj+0xe>
 80880b6:	7003      	strb	r3, [r0, #0]
 80880b8:	3001      	adds	r0, #1
 80880ba:	e7fa      	b.n	80880b2 <_ZL15mbedtls_zeroizePvj+0x4>
 80880bc:	4770      	bx	lr

080880be <_ZL15x509_memcasecmpPKvS0_j>:

/*
 * Like memcmp, but case-insensitive and always returns -1 if different
 */
static int x509_memcasecmp( const void *s1, const void *s2, size_t len )
{
 80880be:	b530      	push	{r4, r5, lr}
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = (unsigned char *)s1, *n2 = (unsigned char *)s2;

    for( i = 0; i < len; i++ )
 80880c0:	2400      	movs	r4, #0
 80880c2:	4294      	cmp	r4, r2
 80880c4:	d00c      	beq.n	80880e0 <_ZL15x509_memcasecmpPKvS0_j+0x22>
    {
        diff = n1[i] ^ n2[i];
 80880c6:	5d03      	ldrb	r3, [r0, r4]
 80880c8:	5d0d      	ldrb	r5, [r1, r4]

        if( diff == 0 )
 80880ca:	405d      	eors	r5, r3
 80880cc:	d006      	beq.n	80880dc <_ZL15x509_memcasecmpPKvS0_j+0x1e>
            continue;

        if( diff == 32 &&
 80880ce:	2d20      	cmp	r5, #32
 80880d0:	d108      	bne.n	80880e4 <_ZL15x509_memcasecmpPKvS0_j+0x26>
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
 80880d2:	f023 0320 	bic.w	r3, r3, #32
 80880d6:	3b41      	subs	r3, #65	; 0x41
 80880d8:	2b19      	cmp	r3, #25
 80880da:	d803      	bhi.n	80880e4 <_ZL15x509_memcasecmpPKvS0_j+0x26>
{
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = (unsigned char *)s1, *n2 = (unsigned char *)s2;

    for( i = 0; i < len; i++ )
 80880dc:	3401      	adds	r4, #1
 80880de:	e7f0      	b.n	80880c2 <_ZL15x509_memcasecmpPKvS0_j+0x4>
        }

        return( -1 );
    }

    return( 0 );
 80880e0:	2000      	movs	r0, #0
 80880e2:	bd30      	pop	{r4, r5, pc}
              ( n1[i] >= 'A' && n1[i] <= 'Z' ) ) )
        {
            continue;
        }

        return( -1 );
 80880e4:	f04f 30ff 	mov.w	r0, #4294967295
    }

    return( 0 );
}
 80880e8:	bd30      	pop	{r4, r5, pc}

080880ea <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>:
 * or space folding.)
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
 80880ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80880ec:	4605      	mov	r5, r0
 80880ee:	460c      	mov	r4, r1
    /* Avoid recursion, it might not be optimised by the compiler */
    while( a != NULL || b != NULL )
 80880f0:	b925      	cbnz	r5, 80880fc <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x12>
 80880f2:	1c20      	adds	r0, r4, #0
 80880f4:	bf18      	it	ne
 80880f6:	2001      	movne	r0, #1
 80880f8:	4240      	negs	r0, r0
 80880fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    {
        if( a == NULL || b == NULL )
 80880fc:	2c00      	cmp	r4, #0
 80880fe:	d031      	beq.n	8088164 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
 8088100:	682a      	ldr	r2, [r5, #0]
 8088102:	6823      	ldr	r3, [r4, #0]
 8088104:	429a      	cmp	r2, r3
 8088106:	d12d      	bne.n	8088164 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            a->oid.len != b->oid.len ||
 8088108:	686a      	ldr	r2, [r5, #4]
    {
        if( a == NULL || b == NULL )
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
 808810a:	6863      	ldr	r3, [r4, #4]
 808810c:	429a      	cmp	r2, r3
 808810e:	d129      	bne.n	8088164 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            a->oid.len != b->oid.len ||
            memcmp( a->oid.p, b->oid.p, b->oid.len ) != 0 )
 8088110:	68a1      	ldr	r1, [r4, #8]
 8088112:	68a8      	ldr	r0, [r5, #8]
 8088114:	f00b fd24 	bl	8093b60 <memcmp>
        if( a == NULL || b == NULL )
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
            a->oid.len != b->oid.len ||
 8088118:	bb20      	cbnz	r0, 8088164 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
    if( a->tag == b->tag &&
 808811a:	68ef      	ldr	r7, [r5, #12]
 808811c:	68e6      	ldr	r6, [r4, #12]
 808811e:	42b7      	cmp	r7, r6
 8088120:	d108      	bne.n	8088134 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x4a>
        a->len == b->len &&
 8088122:	692a      	ldr	r2, [r5, #16]
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
    if( a->tag == b->tag &&
 8088124:	6923      	ldr	r3, [r4, #16]
 8088126:	429a      	cmp	r2, r3
 8088128:	d104      	bne.n	8088134 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x4a>
        a->len == b->len &&
        memcmp( a->p, b->p, b->len ) == 0 )
 808812a:	6961      	ldr	r1, [r4, #20]
 808812c:	6968      	ldr	r0, [r5, #20]
 808812e:	f00b fd17 	bl	8093b60 <memcmp>
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
    if( a->tag == b->tag &&
        a->len == b->len &&
 8088132:	b180      	cbz	r0, 8088156 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x6c>
        return( 0 );
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
        a->len == b->len &&
 8088134:	2f0c      	cmp	r7, #12
 8088136:	d001      	beq.n	808813c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x52>
        memcmp( a->p, b->p, b->len ) == 0 )
    {
        return( 0 );
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 8088138:	2f13      	cmp	r7, #19
 808813a:	d113      	bne.n	8088164 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
 808813c:	2e0c      	cmp	r6, #12
 808813e:	d001      	beq.n	8088144 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x5a>
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 8088140:	2e13      	cmp	r6, #19
 8088142:	d10f      	bne.n	8088164 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
        a->len == b->len &&
 8088144:	692a      	ldr	r2, [r5, #16]
    {
        return( 0 );
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 8088146:	6923      	ldr	r3, [r4, #16]
 8088148:	429a      	cmp	r2, r3
 808814a:	d10b      	bne.n	8088164 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
        a->len == b->len &&
        x509_memcasecmp( a->p, b->p, b->len ) == 0 )
 808814c:	6961      	ldr	r1, [r4, #20]
 808814e:	6968      	ldr	r0, [r5, #20]
 8088150:	f7ff ffb5 	bl	80880be <_ZL15x509_memcasecmpPKvS0_j>
        {
            return( -1 );
        }

        /* value */
        if( x509_string_cmp( &a->val, &b->val ) != 0 )
 8088154:	b930      	cbnz	r0, 8088164 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            return( -1 );

        /* structure of the list of sets */
        if( a->next_merged != b->next_merged )
 8088156:	7f2a      	ldrb	r2, [r5, #28]
 8088158:	7f23      	ldrb	r3, [r4, #28]
 808815a:	429a      	cmp	r2, r3
 808815c:	d102      	bne.n	8088164 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            return( -1 );

        a = a->next;
 808815e:	69ad      	ldr	r5, [r5, #24]
        b = b->next;
 8088160:	69a4      	ldr	r4, [r4, #24]
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
    /* Avoid recursion, it might not be optimised by the compiler */
    while( a != NULL || b != NULL )
 8088162:	e7c5      	b.n	80880f0 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x6>
    {
        if( a == NULL || b == NULL )
            return( -1 );
 8088164:	f04f 30ff 	mov.w	r0, #4294967295
        b = b->next;
    }

    /* a == NULL == b */
    return( 0 );
}
 8088168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808816a <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf>:

/*
 * Return 0 if name matches wildcard, -1 otherwise
 */
static int x509_check_wildcard( const char *cn, mbedtls_x509_buf *name )
{
 808816a:	b570      	push	{r4, r5, r6, lr}
 808816c:	460e      	mov	r6, r1
 808816e:	4604      	mov	r4, r0
    size_t i;
    size_t cn_idx = 0, cn_len = strlen( cn );
 8088170:	f00b fd4b 	bl	8093c0a <strlen>

    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
 8088174:	6875      	ldr	r5, [r6, #4]
 8088176:	2d02      	cmp	r5, #2
 8088178:	d91e      	bls.n	80881b8 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x4e>
 808817a:	68b6      	ldr	r6, [r6, #8]
 808817c:	7833      	ldrb	r3, [r6, #0]
 808817e:	2b2a      	cmp	r3, #42	; 0x2a
 8088180:	d11a      	bne.n	80881b8 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x4e>
 8088182:	7873      	ldrb	r3, [r6, #1]
 8088184:	2b2e      	cmp	r3, #46	; 0x2e
 8088186:	d117      	bne.n	80881b8 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x4e>
 8088188:	4623      	mov	r3, r4
 808818a:	2200      	movs	r2, #0
        return( 0 );

    for( i = 0; i < cn_len; ++i )
 808818c:	4282      	cmp	r2, r0
 808818e:	d015      	beq.n	80881bc <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x52>
    {
        if( cn[i] == '.' )
 8088190:	4619      	mov	r1, r3
 8088192:	780c      	ldrb	r4, [r1, #0]
 8088194:	3301      	adds	r3, #1
 8088196:	2c2e      	cmp	r4, #46	; 0x2e
 8088198:	d001      	beq.n	808819e <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x34>
    size_t cn_idx = 0, cn_len = strlen( cn );

    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
        return( 0 );

    for( i = 0; i < cn_len; ++i )
 808819a:	3201      	adds	r2, #1
 808819c:	e7f6      	b.n	808818c <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x22>
            cn_idx = i;
            break;
        }
    }

    if( cn_idx == 0 )
 808819e:	b16a      	cbz	r2, 80881bc <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x52>
        return( -1 );

    if( cn_len - cn_idx == name->len - 1 &&
 80881a0:	1a82      	subs	r2, r0, r2
 80881a2:	3d01      	subs	r5, #1
 80881a4:	42aa      	cmp	r2, r5
 80881a6:	d109      	bne.n	80881bc <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x52>
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
 80881a8:	1c70      	adds	r0, r6, #1
 80881aa:	f7ff ff88 	bl	80880be <_ZL15x509_memcasecmpPKvS0_j>
    }

    if( cn_idx == 0 )
        return( -1 );

    if( cn_len - cn_idx == name->len - 1 &&
 80881ae:	3000      	adds	r0, #0
 80881b0:	bf18      	it	ne
 80881b2:	2001      	movne	r0, #1
 80881b4:	4240      	negs	r0, r0
 80881b6:	bd70      	pop	{r4, r5, r6, pc}
{
    size_t i;
    size_t cn_idx = 0, cn_len = strlen( cn );

    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
        return( 0 );
 80881b8:	2000      	movs	r0, #0
 80881ba:	bd70      	pop	{r4, r5, r6, pc}
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
    {
        return( 0 );
    }

    return( -1 );
 80881bc:	f04f 30ff 	mov.w	r0, #4294967295
}
 80881c0:	bd70      	pop	{r4, r5, r6, pc}

080881c2 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>:
 * X.509 v2/v3 unique identifier (not parsed)
 */
static int x509_get_uid( unsigned char **p,
                         const unsigned char *end,
                         mbedtls_x509_buf *uid, int n )
{
 80881c2:	b570      	push	{r4, r5, r6, lr}
 80881c4:	4615      	mov	r5, r2
    int ret;

    if( *p == end )
 80881c6:	6802      	ldr	r2, [r0, #0]
 * X.509 v2/v3 unique identifier (not parsed)
 */
static int x509_get_uid( unsigned char **p,
                         const unsigned char *end,
                         mbedtls_x509_buf *uid, int n )
{
 80881c8:	4604      	mov	r4, r0
    int ret;

    if( *p == end )
 80881ca:	428a      	cmp	r2, r1
 80881cc:	d00b      	beq.n	80881e6 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0x24>
        return( 0 );

    uid->tag = **p;
 80881ce:	7816      	ldrb	r6, [r2, #0]
 80881d0:	462a      	mov	r2, r5

    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 80881d2:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    int ret;

    if( *p == end )
        return( 0 );

    uid->tag = **p;
 80881d6:	f842 6b04 	str.w	r6, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 80881da:	f7fb fc69 	bl	8083ab0 <mbedtls_asn1_get_tag>
 80881de:	b120      	cbz	r0, 80881ea <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0x28>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | n ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80881e0:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80881e4:	d107      	bne.n	80881f6 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0x34>
            return( 0 );
 80881e6:	2000      	movs	r0, #0
 80881e8:	bd70      	pop	{r4, r5, r6, pc}

        return( ret );
    }

    uid->p = *p;
 80881ea:	6823      	ldr	r3, [r4, #0]
 80881ec:	60ab      	str	r3, [r5, #8]
    *p += uid->len;
 80881ee:	6822      	ldr	r2, [r4, #0]
 80881f0:	686b      	ldr	r3, [r5, #4]
 80881f2:	4413      	add	r3, r2
 80881f4:	6023      	str	r3, [r4, #0]

    return( 0 );
}
 80881f6:	bd70      	pop	{r4, r5, r6, pc}

080881f8 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>:
static int x509_profile_check_key( const mbedtls_x509_crt_profile *profile,
                                   mbedtls_pk_type_t pk_alg,
                                   const mbedtls_pk_context *pk )
{
#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
 80881f8:	2901      	cmp	r1, #1

/*
 * Check key against profile
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_key( const mbedtls_x509_crt_profile *profile,
 80881fa:	b510      	push	{r4, lr}
 80881fc:	4604      	mov	r4, r0
                                   mbedtls_pk_type_t pk_alg,
                                   const mbedtls_pk_context *pk )
{
#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
 80881fe:	d001      	beq.n	8088204 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3+0xc>
 8088200:	2906      	cmp	r1, #6
 8088202:	d109      	bne.n	8088218 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3+0x20>
    {
        if( mbedtls_pk_get_bitlen( pk ) >= profile->rsa_min_bitlen )
 8088204:	4610      	mov	r0, r2
 8088206:	f004 fdbf 	bl	808cd88 <mbedtls_pk_get_bitlen>
 808820a:	6823      	ldr	r3, [r4, #0]
 808820c:	4298      	cmp	r0, r3
 808820e:	f04f 30ff 	mov.w	r0, #4294967295
 8088212:	bf28      	it	cs
 8088214:	2000      	movcs	r0, #0
 8088216:	bd10      	pop	{r4, pc}

        return( -1 );
    }
#endif

    return( -1 );
 8088218:	f04f 30ff 	mov.w	r0, #4294967295
}
 808821c:	bd10      	pop	{r4, pc}
	...

08088220 <mbedtls_x509_crt_info>:
 */
#define BEFORE_COLON    18
#define BC              "18"
int mbedtls_x509_crt_info( char *buf, size_t size, const char *prefix,
                   const mbedtls_x509_crt *crt )
{
 8088220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8088224:	4682      	mov	sl, r0
 8088226:	b08d      	sub	sp, #52	; 0x34
 8088228:	460f      	mov	r7, r1
 808822a:	4691      	mov	r9, r2
    char key_size_str[BEFORE_COLON];

    p = buf;
    n = size;

    if( NULL == crt )
 808822c:	4698      	mov	r8, r3
 808822e:	b94b      	cbnz	r3, 8088244 <mbedtls_x509_crt_info+0x24>
    {
        ret = mbedtls_snprintf( p, n, "\nCertificate is uninitialised!\n" );
 8088230:	4aa5      	ldr	r2, [pc, #660]	; (80884c8 <mbedtls_x509_crt_info+0x2a8>)
 8088232:	f009 f99b 	bl	809156c <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8088236:	2800      	cmp	r0, #0
 8088238:	f2c0 82d6 	blt.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 808823c:	4287      	cmp	r7, r0
 808823e:	f200 82d4 	bhi.w	80887ea <mbedtls_x509_crt_info+0x5ca>
 8088242:	e2d1      	b.n	80887e8 <mbedtls_x509_crt_info+0x5c8>

        return( (int) ( size - n ) );
    }

    ret = mbedtls_snprintf( p, n, "%scert. version     : %d\n",
                               prefix, crt->version );
 8088244:	699b      	ldr	r3, [r3, #24]
 8088246:	9300      	str	r3, [sp, #0]
 8088248:	4613      	mov	r3, r2
 808824a:	4aa0      	ldr	r2, [pc, #640]	; (80884cc <mbedtls_x509_crt_info+0x2ac>)
 808824c:	f009 f98e 	bl	809156c <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8088250:	2800      	cmp	r0, #0
 8088252:	f2c0 82c9 	blt.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 8088256:	4287      	cmp	r7, r0
 8088258:	f240 82c6 	bls.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 808825c:	1a3e      	subs	r6, r7, r0
 808825e:	4482      	add	sl, r0
    ret = mbedtls_snprintf( p, n, "%sserial number     : ",
                               prefix );
 8088260:	464b      	mov	r3, r9
 8088262:	4a9b      	ldr	r2, [pc, #620]	; (80884d0 <mbedtls_x509_crt_info+0x2b0>)
 8088264:	4631      	mov	r1, r6
 8088266:	4650      	mov	r0, sl
 8088268:	f009 f980 	bl	809156c <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 808826c:	2800      	cmp	r0, #0
 808826e:	f2c0 82bb 	blt.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 8088272:	4286      	cmp	r6, r0
 8088274:	f240 82b8 	bls.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 8088278:	1a36      	subs	r6, r6, r0
 808827a:	4482      	add	sl, r0

    ret = mbedtls_x509_serial_gets( p, n, &crt->serial );
 808827c:	f108 021c 	add.w	r2, r8, #28
 8088280:	4631      	mov	r1, r6
 8088282:	4650      	mov	r0, sl
 8088284:	f7fe fdca 	bl	8086e1c <mbedtls_x509_serial_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8088288:	2800      	cmp	r0, #0
 808828a:	f2c0 82ad 	blt.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 808828e:	4286      	cmp	r6, r0
 8088290:	f240 82aa 	bls.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 8088294:	1a36      	subs	r6, r6, r0
 8088296:	4482      	add	sl, r0

    ret = mbedtls_snprintf( p, n, "\n%sissuer name       : ", prefix );
 8088298:	464b      	mov	r3, r9
 808829a:	4a8e      	ldr	r2, [pc, #568]	; (80884d4 <mbedtls_x509_crt_info+0x2b4>)
 808829c:	4631      	mov	r1, r6
 808829e:	4650      	mov	r0, sl
 80882a0:	f009 f964 	bl	809156c <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80882a4:	2800      	cmp	r0, #0
 80882a6:	f2c0 829f 	blt.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 80882aa:	4286      	cmp	r6, r0
 80882ac:	f240 829c 	bls.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 80882b0:	1a36      	subs	r6, r6, r0
 80882b2:	4482      	add	sl, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->issuer  );
 80882b4:	f108 024c 	add.w	r2, r8, #76	; 0x4c
 80882b8:	4631      	mov	r1, r6
 80882ba:	4650      	mov	r0, sl
 80882bc:	f7fe fd2c 	bl	8086d18 <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80882c0:	2800      	cmp	r0, #0
 80882c2:	f2c0 8291 	blt.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 80882c6:	4286      	cmp	r6, r0
 80882c8:	f240 828e 	bls.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 80882cc:	1a36      	subs	r6, r6, r0
 80882ce:	4482      	add	sl, r0

    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
 80882d0:	464b      	mov	r3, r9
 80882d2:	4a81      	ldr	r2, [pc, #516]	; (80884d8 <mbedtls_x509_crt_info+0x2b8>)
 80882d4:	4631      	mov	r1, r6
 80882d6:	4650      	mov	r0, sl
 80882d8:	f009 f948 	bl	809156c <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80882dc:	2800      	cmp	r0, #0
 80882de:	f2c0 8283 	blt.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 80882e2:	4286      	cmp	r6, r0
 80882e4:	f240 8280 	bls.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 80882e8:	1a36      	subs	r6, r6, r0
 80882ea:	4482      	add	sl, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
 80882ec:	f108 026c 	add.w	r2, r8, #108	; 0x6c
 80882f0:	4631      	mov	r1, r6
 80882f2:	4650      	mov	r0, sl
 80882f4:	f7fe fd10 	bl	8086d18 <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80882f8:	2800      	cmp	r0, #0
 80882fa:	f2c0 8275 	blt.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 80882fe:	4286      	cmp	r6, r0
 8088300:	f240 8272 	bls.w	80887e8 <mbedtls_x509_crt_info+0x5c8>

    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
 8088304:	f8d8 30a0 	ldr.w	r3, [r8, #160]	; 0xa0
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8088308:	1a36      	subs	r6, r6, r0

    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
 808830a:	9305      	str	r3, [sp, #20]
 808830c:	f8d8 309c 	ldr.w	r3, [r8, #156]	; 0x9c
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8088310:	4482      	add	sl, r0

    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
 8088312:	9304      	str	r3, [sp, #16]
 8088314:	f8d8 3098 	ldr.w	r3, [r8, #152]	; 0x98
 8088318:	4a70      	ldr	r2, [pc, #448]	; (80884dc <mbedtls_x509_crt_info+0x2bc>)
 808831a:	9303      	str	r3, [sp, #12]
 808831c:	f8d8 3094 	ldr.w	r3, [r8, #148]	; 0x94
 8088320:	4631      	mov	r1, r6
 8088322:	9302      	str	r3, [sp, #8]
 8088324:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 8088328:	4650      	mov	r0, sl
 808832a:	9301      	str	r3, [sp, #4]
 808832c:	f8d8 308c 	ldr.w	r3, [r8, #140]	; 0x8c
 8088330:	9300      	str	r3, [sp, #0]
 8088332:	464b      	mov	r3, r9
 8088334:	f009 f91a 	bl	809156c <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8088338:	2800      	cmp	r0, #0
 808833a:	f2c0 8255 	blt.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 808833e:	4286      	cmp	r6, r0
 8088340:	f240 8252 	bls.w	80887e8 <mbedtls_x509_crt_info+0x5c8>

    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_to.year, crt->valid_to.mon,
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
 8088344:	f8d8 30b8 	ldr.w	r3, [r8, #184]	; 0xb8
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8088348:	1a36      	subs	r6, r6, r0

    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_to.year, crt->valid_to.mon,
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
 808834a:	9305      	str	r3, [sp, #20]
 808834c:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8088350:	4482      	add	sl, r0

    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_to.year, crt->valid_to.mon,
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
 8088352:	9304      	str	r3, [sp, #16]
 8088354:	f8d8 30b0 	ldr.w	r3, [r8, #176]	; 0xb0
 8088358:	4a61      	ldr	r2, [pc, #388]	; (80884e0 <mbedtls_x509_crt_info+0x2c0>)
 808835a:	9303      	str	r3, [sp, #12]
 808835c:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
 8088360:	4631      	mov	r1, r6
 8088362:	9302      	str	r3, [sp, #8]
 8088364:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
 8088368:	4650      	mov	r0, sl
 808836a:	9301      	str	r3, [sp, #4]
 808836c:	f8d8 30a4 	ldr.w	r3, [r8, #164]	; 0xa4
 8088370:	9300      	str	r3, [sp, #0]
 8088372:	464b      	mov	r3, r9
 8088374:	f009 f8fa 	bl	809156c <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8088378:	2800      	cmp	r0, #0
 808837a:	f2c0 8235 	blt.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 808837e:	4286      	cmp	r6, r0
 8088380:	f240 8232 	bls.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 8088384:	1a36      	subs	r6, r6, r0
 8088386:	4482      	add	sl, r0

    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
 8088388:	464b      	mov	r3, r9
 808838a:	4a56      	ldr	r2, [pc, #344]	; (80884e4 <mbedtls_x509_crt_info+0x2c4>)
 808838c:	4631      	mov	r1, r6
 808838e:	4650      	mov	r0, sl
 8088390:	f009 f8ec 	bl	809156c <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8088394:	2800      	cmp	r0, #0
 8088396:	f2c0 8227 	blt.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 808839a:	4286      	cmp	r6, r0
 808839c:	f240 8224 	bls.w	80887e8 <mbedtls_x509_crt_info+0x5c8>

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
                             crt->sig_md, crt->sig_opts );
 80883a0:	f8d8 212c 	ldr.w	r2, [r8, #300]	; 0x12c
 80883a4:	f898 3129 	ldrb.w	r3, [r8, #297]	; 0x129
 80883a8:	9201      	str	r2, [sp, #4]
 80883aa:	f898 2128 	ldrb.w	r2, [r8, #296]	; 0x128
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
 80883ae:	1a36      	subs	r6, r6, r0
 80883b0:	4482      	add	sl, r0

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
                             crt->sig_md, crt->sig_opts );
 80883b2:	9200      	str	r2, [sp, #0]
 80883b4:	4631      	mov	r1, r6
 80883b6:	f108 0228 	add.w	r2, r8, #40	; 0x28
 80883ba:	4650      	mov	r0, sl
 80883bc:	f7fe fd78 	bl	8086eb0 <mbedtls_x509_sig_alg_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80883c0:	1e05      	subs	r5, r0, #0
 80883c2:	f2c0 8211 	blt.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 80883c6:	42ae      	cmp	r6, r5
 80883c8:	f240 820e 	bls.w	80887e8 <mbedtls_x509_crt_info+0x5c8>

    /* Key size */
    if( ( ret = mbedtls_x509_key_size_helper( key_size_str, BEFORE_COLON,
 80883cc:	f108 0bbc 	add.w	fp, r8, #188	; 0xbc
 80883d0:	4658      	mov	r0, fp
 80883d2:	f004 fd3d 	bl	808ce50 <mbedtls_pk_get_name>
 80883d6:	ac07      	add	r4, sp, #28
 80883d8:	4602      	mov	r2, r0
 80883da:	2112      	movs	r1, #18
 80883dc:	4620      	mov	r0, r4
 80883de:	f7fe fd8f 	bl	8086f00 <mbedtls_x509_key_size_helper>
 80883e2:	2800      	cmp	r0, #0
 80883e4:	f040 8201 	bne.w	80887ea <mbedtls_x509_crt_info+0x5ca>
    {
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
 80883e8:	4658      	mov	r0, fp
 80883ea:	f004 fccd 	bl	808cd88 <mbedtls_pk_get_bitlen>
    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
                             crt->sig_md, crt->sig_opts );
    MBEDTLS_X509_SAFE_SNPRINTF;
 80883ee:	1b76      	subs	r6, r6, r5
 80883f0:	4455      	add	r5, sl
    {
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
 80883f2:	9001      	str	r0, [sp, #4]
 80883f4:	9400      	str	r4, [sp, #0]
 80883f6:	464b      	mov	r3, r9
 80883f8:	4a3b      	ldr	r2, [pc, #236]	; (80884e8 <mbedtls_x509_crt_info+0x2c8>)
 80883fa:	4631      	mov	r1, r6
 80883fc:	4628      	mov	r0, r5
 80883fe:	f009 f8b5 	bl	809156c <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8088402:	2800      	cmp	r0, #0
 8088404:	f2c0 81f0 	blt.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 8088408:	4286      	cmp	r6, r0
 808840a:	f240 81ed 	bls.w	80887e8 <mbedtls_x509_crt_info+0x5c8>

    /*
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 808840e:	f8d8 30f8 	ldr.w	r3, [r8, #248]	; 0xf8
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8088412:	1a34      	subs	r4, r6, r0

    /*
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 8088414:	05db      	lsls	r3, r3, #23
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8088416:	4405      	add	r5, r0

    /*
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 8088418:	d527      	bpl.n	808846a <mbedtls_x509_crt_info+0x24a>
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
 808841a:	f8d8 10fc 	ldr.w	r1, [r8, #252]	; 0xfc
 808841e:	4a33      	ldr	r2, [pc, #204]	; (80884ec <mbedtls_x509_crt_info+0x2cc>)
 8088420:	4b33      	ldr	r3, [pc, #204]	; (80884f0 <mbedtls_x509_crt_info+0x2d0>)
                        crt->ca_istrue ? "true" : "false" );
 8088422:	4628      	mov	r0, r5
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
 8088424:	2900      	cmp	r1, #0
 8088426:	bf18      	it	ne
 8088428:	4613      	movne	r3, r2
                        crt->ca_istrue ? "true" : "false" );
 808842a:	4a32      	ldr	r2, [pc, #200]	; (80884f4 <mbedtls_x509_crt_info+0x2d4>)
 808842c:	9300      	str	r3, [sp, #0]
 808842e:	4621      	mov	r1, r4
 8088430:	464b      	mov	r3, r9
 8088432:	f009 f89b 	bl	809156c <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8088436:	2800      	cmp	r0, #0
 8088438:	f2c0 81d6 	blt.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 808843c:	4284      	cmp	r4, r0
 808843e:	f240 81d3 	bls.w	80887e8 <mbedtls_x509_crt_info+0x5c8>

        if( crt->max_pathlen > 0 )
 8088442:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
                        crt->ca_istrue ? "true" : "false" );
        MBEDTLS_X509_SAFE_SNPRINTF;
 8088446:	1a24      	subs	r4, r4, r0

        if( crt->max_pathlen > 0 )
 8088448:	2b00      	cmp	r3, #0

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
                        crt->ca_istrue ? "true" : "false" );
        MBEDTLS_X509_SAFE_SNPRINTF;
 808844a:	4405      	add	r5, r0

        if( crt->max_pathlen > 0 )
 808844c:	dd0d      	ble.n	808846a <mbedtls_x509_crt_info+0x24a>
        {
            ret = mbedtls_snprintf( p, n, ", max_pathlen=%d", crt->max_pathlen - 1 );
 808844e:	3b01      	subs	r3, #1
 8088450:	4a29      	ldr	r2, [pc, #164]	; (80884f8 <mbedtls_x509_crt_info+0x2d8>)
 8088452:	4621      	mov	r1, r4
 8088454:	4628      	mov	r0, r5
 8088456:	f009 f889 	bl	809156c <snprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
 808845a:	2800      	cmp	r0, #0
 808845c:	f2c0 81c4 	blt.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 8088460:	4284      	cmp	r4, r0
 8088462:	f240 81c1 	bls.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 8088466:	1a24      	subs	r4, r4, r0
 8088468:	4405      	add	r5, r0
        }
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 808846a:	f8d8 30f8 	ldr.w	r3, [r8, #248]	; 0xf8
 808846e:	069e      	lsls	r6, r3, #26
 8088470:	d54e      	bpl.n	8088510 <mbedtls_x509_crt_info+0x2f0>
    {
        ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
 8088472:	464b      	mov	r3, r9
 8088474:	4a21      	ldr	r2, [pc, #132]	; (80884fc <mbedtls_x509_crt_info+0x2dc>)
 8088476:	4621      	mov	r1, r4
 8088478:	4628      	mov	r0, r5
 808847a:	f009 f877 	bl	809156c <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 808847e:	2800      	cmp	r0, #0
 8088480:	f2c0 81b2 	blt.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 8088484:	42a0      	cmp	r0, r4
 8088486:	f080 81af 	bcs.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
{
    size_t i;
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = subject_alt_name;
    const char *sep = "";
 808848a:	4e1d      	ldr	r6, [pc, #116]	; (8088500 <mbedtls_x509_crt_info+0x2e0>)
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
    {
        ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
 808848c:	1a24      	subs	r4, r4, r0
 808848e:	4405      	add	r5, r0

        if( ( ret = x509_info_subject_alt_name( &p, &n,
 8088490:	f108 02e8 	add.w	r2, r8, #232	; 0xe8
    size_t i;
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = subject_alt_name;
    const char *sep = "";
    size_t sep_len = 0;
 8088494:	2000      	movs	r0, #0

    while( cur != NULL )
    {
        if( cur->buf.len + sep_len >= n )
 8088496:	6851      	ldr	r1, [r2, #4]
 8088498:	2300      	movs	r3, #0
 808849a:	4401      	add	r1, r0
 808849c:	42a1      	cmp	r1, r4
 808849e:	d301      	bcc.n	80884a4 <mbedtls_x509_crt_info+0x284>
        {
            *p = '\0';
 80884a0:	702b      	strb	r3, [r5, #0]
 80884a2:	e1a1      	b.n	80887e8 <mbedtls_x509_crt_info+0x5c8>
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
        }

        n -= cur->buf.len + sep_len;
 80884a4:	1a64      	subs	r4, r4, r1
        for( i = 0; i < sep_len; i++ )
 80884a6:	4283      	cmp	r3, r0
 80884a8:	d003      	beq.n	80884b2 <mbedtls_x509_crt_info+0x292>
            *p++ = sep[i];
 80884aa:	5cf1      	ldrb	r1, [r6, r3]
 80884ac:	54e9      	strb	r1, [r5, r3]
            *p = '\0';
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
        }

        n -= cur->buf.len + sep_len;
        for( i = 0; i < sep_len; i++ )
 80884ae:	3301      	adds	r3, #1
 80884b0:	e7f9      	b.n	80884a6 <mbedtls_x509_crt_info+0x286>
 80884b2:	441d      	add	r5, r3
 80884b4:	4628      	mov	r0, r5
            *p++ = sep[i];
        for( i = 0; i < cur->buf.len; i++ )
 80884b6:	6851      	ldr	r1, [r2, #4]
 80884b8:	1a2b      	subs	r3, r5, r0
 80884ba:	4299      	cmp	r1, r3
 80884bc:	d922      	bls.n	8088504 <mbedtls_x509_crt_info+0x2e4>
            *p++ = cur->buf.p[i];
 80884be:	6891      	ldr	r1, [r2, #8]
 80884c0:	5ccb      	ldrb	r3, [r1, r3]
 80884c2:	f805 3b01 	strb.w	r3, [r5], #1
 80884c6:	e7f6      	b.n	80884b6 <mbedtls_x509_crt_info+0x296>
 80884c8:	080956d7 	.word	0x080956d7
 80884cc:	080956f7 	.word	0x080956f7
 80884d0:	08095711 	.word	0x08095711
 80884d4:	08095728 	.word	0x08095728
 80884d8:	08095740 	.word	0x08095740
 80884dc:	08095758 	.word	0x08095758
 80884e0:	0809578d 	.word	0x0809578d
 80884e4:	080957c2 	.word	0x080957c2
 80884e8:	080957da 	.word	0x080957da
 80884ec:	080956cc 	.word	0x080956cc
 80884f0:	080956d1 	.word	0x080956d1
 80884f4:	080957ec 	.word	0x080957ec
 80884f8:	08095809 	.word	0x08095809
 80884fc:	0809581a 	.word	0x0809581a
 8088500:	08094520 	.word	0x08094520

        sep = ", ";
        sep_len = 2;

        cur = cur->next;
 8088504:	68d2      	ldr	r2, [r2, #12]
            *p++ = sep[i];
        for( i = 0; i < cur->buf.len; i++ )
            *p++ = cur->buf.p[i];

        sep = ", ";
        sep_len = 2;
 8088506:	2002      	movs	r0, #2
        for( i = 0; i < sep_len; i++ )
            *p++ = sep[i];
        for( i = 0; i < cur->buf.len; i++ )
            *p++ = cur->buf.p[i];

        sep = ", ";
 8088508:	4eb9      	ldr	r6, [pc, #740]	; (80887f0 <mbedtls_x509_crt_info+0x5d0>)
    char *p = *buf;
    const mbedtls_x509_sequence *cur = subject_alt_name;
    const char *sep = "";
    size_t sep_len = 0;

    while( cur != NULL )
 808850a:	2a00      	cmp	r2, #0
 808850c:	d1c3      	bne.n	8088496 <mbedtls_x509_crt_info+0x276>
        sep_len = 2;

        cur = cur->next;
    }

    *p = '\0';
 808850e:	702a      	strb	r2, [r5, #0]
        if( ( ret = x509_info_subject_alt_name( &p, &n,
                                            &crt->subject_alt_names ) ) != 0 )
            return( ret );
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
 8088510:	f8d8 30f8 	ldr.w	r3, [r8, #248]	; 0xf8
 8088514:	03d8      	lsls	r0, r3, #15
 8088516:	f140 8090 	bpl.w	808863a <mbedtls_x509_crt_info+0x41a>
    {
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
 808851a:	464b      	mov	r3, r9
 808851c:	4ab5      	ldr	r2, [pc, #724]	; (80887f4 <mbedtls_x509_crt_info+0x5d4>)
 808851e:	4621      	mov	r1, r4
 8088520:	4628      	mov	r0, r5
 8088522:	f009 f823 	bl	809156c <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8088526:	2800      	cmp	r0, #0
 8088528:	f2c0 815e 	blt.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 808852c:	42a0      	cmp	r0, r4
 808852e:	f080 815b 	bcs.w	80887e8 <mbedtls_x509_crt_info+0x5c8>

        if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
 8088532:	f898 6118 	ldrb.w	r6, [r8, #280]	; 0x118
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
    {
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
 8088536:	1a24      	subs	r4, r4, r0
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 8088538:	0631      	lsls	r1, r6, #24
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
    {
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
 808853a:	4405      	add	r5, r0
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 808853c:	4bae      	ldr	r3, [pc, #696]	; (80887f8 <mbedtls_x509_crt_info+0x5d8>)
 808853e:	d50d      	bpl.n	808855c <mbedtls_x509_crt_info+0x33c>
 8088540:	4aae      	ldr	r2, [pc, #696]	; (80887fc <mbedtls_x509_crt_info+0x5dc>)
 8088542:	4621      	mov	r1, r4
 8088544:	4628      	mov	r0, r5
 8088546:	f009 f811 	bl	809156c <snprintf>
 808854a:	2800      	cmp	r0, #0
 808854c:	f2c0 814c 	blt.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 8088550:	4284      	cmp	r4, r0
 8088552:	f240 8149 	bls.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 8088556:	4ba6      	ldr	r3, [pc, #664]	; (80887f0 <mbedtls_x509_crt_info+0x5d0>)
 8088558:	1a24      	subs	r4, r4, r0
 808855a:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_SERVER,         "SSL Server" );
 808855c:	0672      	lsls	r2, r6, #25
 808855e:	d50d      	bpl.n	808857c <mbedtls_x509_crt_info+0x35c>
 8088560:	4aa7      	ldr	r2, [pc, #668]	; (8088800 <mbedtls_x509_crt_info+0x5e0>)
 8088562:	4621      	mov	r1, r4
 8088564:	4628      	mov	r0, r5
 8088566:	f009 f801 	bl	809156c <snprintf>
 808856a:	2800      	cmp	r0, #0
 808856c:	f2c0 813c 	blt.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 8088570:	4284      	cmp	r4, r0
 8088572:	f240 8139 	bls.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 8088576:	4b9e      	ldr	r3, [pc, #632]	; (80887f0 <mbedtls_x509_crt_info+0x5d0>)
 8088578:	1a24      	subs	r4, r4, r0
 808857a:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL,              "Email" );
 808857c:	06b0      	lsls	r0, r6, #26
 808857e:	d50d      	bpl.n	808859c <mbedtls_x509_crt_info+0x37c>
 8088580:	4aa0      	ldr	r2, [pc, #640]	; (8088804 <mbedtls_x509_crt_info+0x5e4>)
 8088582:	4621      	mov	r1, r4
 8088584:	4628      	mov	r0, r5
 8088586:	f008 fff1 	bl	809156c <snprintf>
 808858a:	2800      	cmp	r0, #0
 808858c:	f2c0 812c 	blt.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 8088590:	4284      	cmp	r4, r0
 8088592:	f240 8129 	bls.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 8088596:	4b96      	ldr	r3, [pc, #600]	; (80887f0 <mbedtls_x509_crt_info+0x5d0>)
 8088598:	1a24      	subs	r4, r4, r0
 808859a:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING,     "Object Signing" );
 808859c:	06f1      	lsls	r1, r6, #27
 808859e:	d50d      	bpl.n	80885bc <mbedtls_x509_crt_info+0x39c>
 80885a0:	4a99      	ldr	r2, [pc, #612]	; (8088808 <mbedtls_x509_crt_info+0x5e8>)
 80885a2:	4621      	mov	r1, r4
 80885a4:	4628      	mov	r0, r5
 80885a6:	f008 ffe1 	bl	809156c <snprintf>
 80885aa:	2800      	cmp	r0, #0
 80885ac:	f2c0 811c 	blt.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 80885b0:	4284      	cmp	r4, r0
 80885b2:	f240 8119 	bls.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 80885b6:	4b8e      	ldr	r3, [pc, #568]	; (80887f0 <mbedtls_x509_crt_info+0x5d0>)
 80885b8:	1a24      	subs	r4, r4, r0
 80885ba:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_RESERVED,           "Reserved" );
 80885bc:	0732      	lsls	r2, r6, #28
 80885be:	d50d      	bpl.n	80885dc <mbedtls_x509_crt_info+0x3bc>
 80885c0:	4a92      	ldr	r2, [pc, #584]	; (808880c <mbedtls_x509_crt_info+0x5ec>)
 80885c2:	4621      	mov	r1, r4
 80885c4:	4628      	mov	r0, r5
 80885c6:	f008 ffd1 	bl	809156c <snprintf>
 80885ca:	2800      	cmp	r0, #0
 80885cc:	f2c0 810c 	blt.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 80885d0:	4284      	cmp	r4, r0
 80885d2:	f240 8109 	bls.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 80885d6:	4b86      	ldr	r3, [pc, #536]	; (80887f0 <mbedtls_x509_crt_info+0x5d0>)
 80885d8:	1a24      	subs	r4, r4, r0
 80885da:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CA,             "SSL CA" );
 80885dc:	0770      	lsls	r0, r6, #29
 80885de:	d50d      	bpl.n	80885fc <mbedtls_x509_crt_info+0x3dc>
 80885e0:	4a8b      	ldr	r2, [pc, #556]	; (8088810 <mbedtls_x509_crt_info+0x5f0>)
 80885e2:	4621      	mov	r1, r4
 80885e4:	4628      	mov	r0, r5
 80885e6:	f008 ffc1 	bl	809156c <snprintf>
 80885ea:	2800      	cmp	r0, #0
 80885ec:	f2c0 80fc 	blt.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 80885f0:	4284      	cmp	r4, r0
 80885f2:	f240 80f9 	bls.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 80885f6:	4b7e      	ldr	r3, [pc, #504]	; (80887f0 <mbedtls_x509_crt_info+0x5d0>)
 80885f8:	1a24      	subs	r4, r4, r0
 80885fa:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL_CA,           "Email CA" );
 80885fc:	07b1      	lsls	r1, r6, #30
 80885fe:	d50d      	bpl.n	808861c <mbedtls_x509_crt_info+0x3fc>
 8088600:	4a84      	ldr	r2, [pc, #528]	; (8088814 <mbedtls_x509_crt_info+0x5f4>)
 8088602:	4621      	mov	r1, r4
 8088604:	4628      	mov	r0, r5
 8088606:	f008 ffb1 	bl	809156c <snprintf>
 808860a:	2800      	cmp	r0, #0
 808860c:	f2c0 80ec 	blt.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 8088610:	4284      	cmp	r4, r0
 8088612:	f240 80e9 	bls.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 8088616:	4b76      	ldr	r3, [pc, #472]	; (80887f0 <mbedtls_x509_crt_info+0x5d0>)
 8088618:	1a24      	subs	r4, r4, r0
 808861a:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING_CA,  "Object Signing CA" );
 808861c:	07f2      	lsls	r2, r6, #31
 808861e:	d50c      	bpl.n	808863a <mbedtls_x509_crt_info+0x41a>
 8088620:	4a7d      	ldr	r2, [pc, #500]	; (8088818 <mbedtls_x509_crt_info+0x5f8>)
 8088622:	4621      	mov	r1, r4
 8088624:	4628      	mov	r0, r5
 8088626:	f008 ffa1 	bl	809156c <snprintf>
 808862a:	2800      	cmp	r0, #0
 808862c:	f2c0 80dc 	blt.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 8088630:	4284      	cmp	r4, r0
 8088632:	f240 80d9 	bls.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 8088636:	1a24      	subs	r4, r4, r0
 8088638:	4405      	add	r5, r0

        if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
            return( ret );
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
 808863a:	f8d8 30f8 	ldr.w	r3, [r8, #248]	; 0xf8
 808863e:	075e      	lsls	r6, r3, #29
 8088640:	f140 8096 	bpl.w	8088770 <mbedtls_x509_crt_info+0x550>
    {
        ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
 8088644:	464b      	mov	r3, r9
 8088646:	4a75      	ldr	r2, [pc, #468]	; (808881c <mbedtls_x509_crt_info+0x5fc>)
 8088648:	4621      	mov	r1, r4
 808864a:	4628      	mov	r0, r5
 808864c:	f008 ff8e 	bl	809156c <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8088650:	2800      	cmp	r0, #0
 8088652:	f2c0 80c9 	blt.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 8088656:	42a0      	cmp	r0, r4
 8088658:	f080 80c6 	bcs.w	80887e8 <mbedtls_x509_crt_info+0x5c8>

        if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
 808865c:	f8d8 6104 	ldr.w	r6, [r8, #260]	; 0x104
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
    {
        ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
 8088660:	1a24      	subs	r4, r4, r0
 8088662:	4405      	add	r5, r0
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
 8088664:	0630      	lsls	r0, r6, #24
 8088666:	4b64      	ldr	r3, [pc, #400]	; (80887f8 <mbedtls_x509_crt_info+0x5d8>)
 8088668:	d50d      	bpl.n	8088686 <mbedtls_x509_crt_info+0x466>
 808866a:	4a6d      	ldr	r2, [pc, #436]	; (8088820 <mbedtls_x509_crt_info+0x600>)
 808866c:	4621      	mov	r1, r4
 808866e:	4628      	mov	r0, r5
 8088670:	f008 ff7c 	bl	809156c <snprintf>
 8088674:	2800      	cmp	r0, #0
 8088676:	f2c0 80b7 	blt.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 808867a:	4284      	cmp	r4, r0
 808867c:	f240 80b4 	bls.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 8088680:	4b5b      	ldr	r3, [pc, #364]	; (80887f0 <mbedtls_x509_crt_info+0x5d0>)
 8088682:	1a24      	subs	r4, r4, r0
 8088684:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_NON_REPUDIATION,      "Non Repudiation" );
 8088686:	0671      	lsls	r1, r6, #25
 8088688:	d50d      	bpl.n	80886a6 <mbedtls_x509_crt_info+0x486>
 808868a:	4a66      	ldr	r2, [pc, #408]	; (8088824 <mbedtls_x509_crt_info+0x604>)
 808868c:	4621      	mov	r1, r4
 808868e:	4628      	mov	r0, r5
 8088690:	f008 ff6c 	bl	809156c <snprintf>
 8088694:	2800      	cmp	r0, #0
 8088696:	f2c0 80a7 	blt.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 808869a:	4284      	cmp	r4, r0
 808869c:	f240 80a4 	bls.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 80886a0:	4b53      	ldr	r3, [pc, #332]	; (80887f0 <mbedtls_x509_crt_info+0x5d0>)
 80886a2:	1a24      	subs	r4, r4, r0
 80886a4:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_ENCIPHERMENT,     "Key Encipherment" );
 80886a6:	06b2      	lsls	r2, r6, #26
 80886a8:	d50d      	bpl.n	80886c6 <mbedtls_x509_crt_info+0x4a6>
 80886aa:	4a5f      	ldr	r2, [pc, #380]	; (8088828 <mbedtls_x509_crt_info+0x608>)
 80886ac:	4621      	mov	r1, r4
 80886ae:	4628      	mov	r0, r5
 80886b0:	f008 ff5c 	bl	809156c <snprintf>
 80886b4:	2800      	cmp	r0, #0
 80886b6:	f2c0 8097 	blt.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 80886ba:	4284      	cmp	r4, r0
 80886bc:	f240 8094 	bls.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 80886c0:	4b4b      	ldr	r3, [pc, #300]	; (80887f0 <mbedtls_x509_crt_info+0x5d0>)
 80886c2:	1a24      	subs	r4, r4, r0
 80886c4:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DATA_ENCIPHERMENT,    "Data Encipherment" );
 80886c6:	06f0      	lsls	r0, r6, #27
 80886c8:	d50d      	bpl.n	80886e6 <mbedtls_x509_crt_info+0x4c6>
 80886ca:	4a58      	ldr	r2, [pc, #352]	; (808882c <mbedtls_x509_crt_info+0x60c>)
 80886cc:	4621      	mov	r1, r4
 80886ce:	4628      	mov	r0, r5
 80886d0:	f008 ff4c 	bl	809156c <snprintf>
 80886d4:	2800      	cmp	r0, #0
 80886d6:	f2c0 8087 	blt.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 80886da:	4284      	cmp	r4, r0
 80886dc:	f240 8084 	bls.w	80887e8 <mbedtls_x509_crt_info+0x5c8>
 80886e0:	4b43      	ldr	r3, [pc, #268]	; (80887f0 <mbedtls_x509_crt_info+0x5d0>)
 80886e2:	1a24      	subs	r4, r4, r0
 80886e4:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_AGREEMENT,        "Key Agreement" );
 80886e6:	0731      	lsls	r1, r6, #28
 80886e8:	d50b      	bpl.n	8088702 <mbedtls_x509_crt_info+0x4e2>
 80886ea:	4a51      	ldr	r2, [pc, #324]	; (8088830 <mbedtls_x509_crt_info+0x610>)
 80886ec:	4621      	mov	r1, r4
 80886ee:	4628      	mov	r0, r5
 80886f0:	f008 ff3c 	bl	809156c <snprintf>
 80886f4:	2800      	cmp	r0, #0
 80886f6:	db77      	blt.n	80887e8 <mbedtls_x509_crt_info+0x5c8>
 80886f8:	4284      	cmp	r4, r0
 80886fa:	d975      	bls.n	80887e8 <mbedtls_x509_crt_info+0x5c8>
 80886fc:	4b3c      	ldr	r3, [pc, #240]	; (80887f0 <mbedtls_x509_crt_info+0x5d0>)
 80886fe:	1a24      	subs	r4, r4, r0
 8088700:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_CERT_SIGN,        "Key Cert Sign" );
 8088702:	0772      	lsls	r2, r6, #29
 8088704:	d50b      	bpl.n	808871e <mbedtls_x509_crt_info+0x4fe>
 8088706:	4a4b      	ldr	r2, [pc, #300]	; (8088834 <mbedtls_x509_crt_info+0x614>)
 8088708:	4621      	mov	r1, r4
 808870a:	4628      	mov	r0, r5
 808870c:	f008 ff2e 	bl	809156c <snprintf>
 8088710:	2800      	cmp	r0, #0
 8088712:	db69      	blt.n	80887e8 <mbedtls_x509_crt_info+0x5c8>
 8088714:	4284      	cmp	r4, r0
 8088716:	d967      	bls.n	80887e8 <mbedtls_x509_crt_info+0x5c8>
 8088718:	4b35      	ldr	r3, [pc, #212]	; (80887f0 <mbedtls_x509_crt_info+0x5d0>)
 808871a:	1a24      	subs	r4, r4, r0
 808871c:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_CRL_SIGN,             "CRL Sign" );
 808871e:	07b0      	lsls	r0, r6, #30
 8088720:	d50b      	bpl.n	808873a <mbedtls_x509_crt_info+0x51a>
 8088722:	4a45      	ldr	r2, [pc, #276]	; (8088838 <mbedtls_x509_crt_info+0x618>)
 8088724:	4621      	mov	r1, r4
 8088726:	4628      	mov	r0, r5
 8088728:	f008 ff20 	bl	809156c <snprintf>
 808872c:	2800      	cmp	r0, #0
 808872e:	db5b      	blt.n	80887e8 <mbedtls_x509_crt_info+0x5c8>
 8088730:	4284      	cmp	r4, r0
 8088732:	d959      	bls.n	80887e8 <mbedtls_x509_crt_info+0x5c8>
 8088734:	4b2e      	ldr	r3, [pc, #184]	; (80887f0 <mbedtls_x509_crt_info+0x5d0>)
 8088736:	1a24      	subs	r4, r4, r0
 8088738:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_ENCIPHER_ONLY,        "Encipher Only" );
 808873a:	07f1      	lsls	r1, r6, #31
 808873c:	d50b      	bpl.n	8088756 <mbedtls_x509_crt_info+0x536>
 808873e:	4a3f      	ldr	r2, [pc, #252]	; (808883c <mbedtls_x509_crt_info+0x61c>)
 8088740:	4621      	mov	r1, r4
 8088742:	4628      	mov	r0, r5
 8088744:	f008 ff12 	bl	809156c <snprintf>
 8088748:	2800      	cmp	r0, #0
 808874a:	db4d      	blt.n	80887e8 <mbedtls_x509_crt_info+0x5c8>
 808874c:	4284      	cmp	r4, r0
 808874e:	d94b      	bls.n	80887e8 <mbedtls_x509_crt_info+0x5c8>
 8088750:	4b27      	ldr	r3, [pc, #156]	; (80887f0 <mbedtls_x509_crt_info+0x5d0>)
 8088752:	1a24      	subs	r4, r4, r0
 8088754:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DECIPHER_ONLY,        "Decipher Only" );
 8088756:	0432      	lsls	r2, r6, #16
 8088758:	d50a      	bpl.n	8088770 <mbedtls_x509_crt_info+0x550>
 808875a:	4a39      	ldr	r2, [pc, #228]	; (8088840 <mbedtls_x509_crt_info+0x620>)
 808875c:	4621      	mov	r1, r4
 808875e:	4628      	mov	r0, r5
 8088760:	f008 ff04 	bl	809156c <snprintf>
 8088764:	2800      	cmp	r0, #0
 8088766:	db3f      	blt.n	80887e8 <mbedtls_x509_crt_info+0x5c8>
 8088768:	4284      	cmp	r4, r0
 808876a:	d93d      	bls.n	80887e8 <mbedtls_x509_crt_info+0x5c8>
 808876c:	1a24      	subs	r4, r4, r0
 808876e:	4405      	add	r5, r0

        if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
            return( ret );
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE )
 8088770:	f8d8 30f8 	ldr.w	r3, [r8, #248]	; 0xf8
 8088774:	051b      	lsls	r3, r3, #20
 8088776:	d52b      	bpl.n	80887d0 <mbedtls_x509_crt_info+0x5b0>
    {
        ret = mbedtls_snprintf( p, n, "\n%sext key usage     : ", prefix );
 8088778:	464b      	mov	r3, r9
 808877a:	4a32      	ldr	r2, [pc, #200]	; (8088844 <mbedtls_x509_crt_info+0x624>)
 808877c:	4621      	mov	r1, r4
 808877e:	4628      	mov	r0, r5
 8088780:	f008 fef4 	bl	809156c <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8088784:	2800      	cmp	r0, #0
 8088786:	db2f      	blt.n	80887e8 <mbedtls_x509_crt_info+0x5c8>
 8088788:	42a0      	cmp	r0, r4
 808878a:	d22d      	bcs.n	80887e8 <mbedtls_x509_crt_info+0x5c8>

        if( ( ret = x509_info_ext_key_usage( &p, &n,
 808878c:	f508 7684 	add.w	r6, r8, #264	; 0x108
    const char *sep = "";

    while( cur != NULL )
    {
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
            desc = "???";
 8088790:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8088854 <mbedtls_x509_crt_info+0x634>
    int ret;
    const char *desc;
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = extended_key_usage;
    const char *sep = "";
 8088794:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80887f8 <mbedtls_x509_crt_info+0x5d8>
static int x509_info_ext_key_usage( char **buf, size_t *size,
                                    const mbedtls_x509_sequence *extended_key_usage )
{
    int ret;
    const char *desc;
    size_t n = *size;
 8088798:	1a24      	subs	r4, r4, r0
    char *p = *buf;
 808879a:	4405      	add	r5, r0
    const mbedtls_x509_sequence *cur = extended_key_usage;
    const char *sep = "";

    while( cur != NULL )
    {
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
 808879c:	a906      	add	r1, sp, #24
 808879e:	4630      	mov	r0, r6
 80887a0:	f7fc fde4 	bl	808536c <mbedtls_oid_get_extended_key_usage>
 80887a4:	b108      	cbz	r0, 80887aa <mbedtls_x509_crt_info+0x58a>
            desc = "???";
 80887a6:	f8cd 9018 	str.w	r9, [sp, #24]

        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
 80887aa:	9b06      	ldr	r3, [sp, #24]
 80887ac:	4a26      	ldr	r2, [pc, #152]	; (8088848 <mbedtls_x509_crt_info+0x628>)
 80887ae:	9300      	str	r3, [sp, #0]
 80887b0:	4621      	mov	r1, r4
 80887b2:	4643      	mov	r3, r8
 80887b4:	4628      	mov	r0, r5
 80887b6:	f008 fed9 	bl	809156c <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80887ba:	2800      	cmp	r0, #0
 80887bc:	db14      	blt.n	80887e8 <mbedtls_x509_crt_info+0x5c8>
 80887be:	42a0      	cmp	r0, r4
 80887c0:	d212      	bcs.n	80887e8 <mbedtls_x509_crt_info+0x5c8>

        sep = ", ";

        cur = cur->next;
 80887c2:	68f6      	ldr	r6, [r6, #12]
    {
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
            desc = "???";

        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
        MBEDTLS_X509_SAFE_SNPRINTF;
 80887c4:	1a24      	subs	r4, r4, r0
 80887c6:	4405      	add	r5, r0

        sep = ", ";
 80887c8:	f8df 8024 	ldr.w	r8, [pc, #36]	; 80887f0 <mbedtls_x509_crt_info+0x5d0>
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = extended_key_usage;
    const char *sep = "";

    while( cur != NULL )
 80887cc:	2e00      	cmp	r6, #0
 80887ce:	d1e5      	bne.n	808879c <mbedtls_x509_crt_info+0x57c>
        if( ( ret = x509_info_ext_key_usage( &p, &n,
                                             &crt->ext_key_usage ) ) != 0 )
            return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n" );
 80887d0:	4a1e      	ldr	r2, [pc, #120]	; (808884c <mbedtls_x509_crt_info+0x62c>)
 80887d2:	4621      	mov	r1, r4
 80887d4:	4628      	mov	r0, r5
 80887d6:	f008 fec9 	bl	809156c <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80887da:	2800      	cmp	r0, #0
 80887dc:	db04      	blt.n	80887e8 <mbedtls_x509_crt_info+0x5c8>
 80887de:	4284      	cmp	r4, r0
 80887e0:	d902      	bls.n	80887e8 <mbedtls_x509_crt_info+0x5c8>

    return( (int) ( size - n ) );
 80887e2:	1a20      	subs	r0, r4, r0
 80887e4:	1a38      	subs	r0, r7, r0
 80887e6:	e000      	b.n	80887ea <mbedtls_x509_crt_info+0x5ca>
    while( cur != NULL )
    {
        if( cur->buf.len + sep_len >= n )
        {
            *p = '\0';
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
 80887e8:	4819      	ldr	r0, [pc, #100]	; (8088850 <mbedtls_x509_crt_info+0x630>)

    ret = mbedtls_snprintf( p, n, "\n" );
    MBEDTLS_X509_SAFE_SNPRINTF;

    return( (int) ( size - n ) );
}
 80887ea:	b00d      	add	sp, #52	; 0x34
 80887ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80887f0:	080953cc 	.word	0x080953cc
 80887f4:	08095832 	.word	0x08095832
 80887f8:	08094520 	.word	0x08094520
 80887fc:	0809584a 	.word	0x0809584a
 8088800:	08095857 	.word	0x08095857
 8088804:	08095864 	.word	0x08095864
 8088808:	0809586c 	.word	0x0809586c
 808880c:	0809587d 	.word	0x0809587d
 8088810:	08095888 	.word	0x08095888
 8088814:	08095891 	.word	0x08095891
 8088818:	0809589c 	.word	0x0809589c
 808881c:	080958b0 	.word	0x080958b0
 8088820:	080958c8 	.word	0x080958c8
 8088824:	080958dc 	.word	0x080958dc
 8088828:	080958ee 	.word	0x080958ee
 808882c:	08095901 	.word	0x08095901
 8088830:	08095915 	.word	0x08095915
 8088834:	08095925 	.word	0x08095925
 8088838:	08095935 	.word	0x08095935
 808883c:	08095940 	.word	0x08095940
 8088840:	08095950 	.word	0x08095950
 8088844:	08095960 	.word	0x08095960
 8088848:	08095978 	.word	0x08095978
 808884c:	08094680 	.word	0x08094680
 8088850:	ffffd680 	.word	0xffffd680
 8088854:	080953e5 	.word	0x080953e5

08088858 <mbedtls_x509_crt_verify_info>:
    { 0, NULL }
};

int mbedtls_x509_crt_verify_info( char *buf, size_t size, const char *prefix,
                          uint32_t flags )
{
 8088858:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 808885c:	4607      	mov	r7, r0
 808885e:	460d      	mov	r5, r1
 8088860:	4691      	mov	r9, r2
 8088862:	4698      	mov	r8, r3
    int ret;
    const struct x509_crt_verify_string *cur;
    char *p = buf;
    size_t n = size;
 8088864:	460c      	mov	r4, r1
 8088866:	4e18      	ldr	r6, [pc, #96]	; (80888c8 <mbedtls_x509_crt_verify_info+0x70>)

    for( cur = x509_crt_verify_strings; cur->string != NULL ; cur++ )
 8088868:	f856 3c04 	ldr.w	r3, [r6, #-4]
 808886c:	b1cb      	cbz	r3, 80888a2 <mbedtls_x509_crt_verify_info+0x4a>
    {
        if( ( flags & cur->code ) == 0 )
 808886e:	f856 2c08 	ldr.w	r2, [r6, #-8]
 8088872:	ea18 0f02 	tst.w	r8, r2
 8088876:	d012      	beq.n	808889e <mbedtls_x509_crt_verify_info+0x46>
            continue;

        ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
 8088878:	9300      	str	r3, [sp, #0]
 808887a:	4a14      	ldr	r2, [pc, #80]	; (80888cc <mbedtls_x509_crt_verify_info+0x74>)
 808887c:	464b      	mov	r3, r9
 808887e:	4621      	mov	r1, r4
 8088880:	4638      	mov	r0, r7
 8088882:	f008 fe73 	bl	809156c <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8088886:	2800      	cmp	r0, #0
 8088888:	da01      	bge.n	808888e <mbedtls_x509_crt_verify_info+0x36>
 808888a:	4811      	ldr	r0, [pc, #68]	; (80888d0 <mbedtls_x509_crt_verify_info+0x78>)
 808888c:	e018      	b.n	80888c0 <mbedtls_x509_crt_verify_info+0x68>
 808888e:	4284      	cmp	r4, r0
 8088890:	d9fb      	bls.n	808888a <mbedtls_x509_crt_verify_info+0x32>
        flags ^= cur->code;
 8088892:	f856 3c08 	ldr.w	r3, [r6, #-8]
    {
        if( ( flags & cur->code ) == 0 )
            continue;

        ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
        MBEDTLS_X509_SAFE_SNPRINTF;
 8088896:	1a24      	subs	r4, r4, r0
 8088898:	4407      	add	r7, r0
        flags ^= cur->code;
 808889a:	ea88 0803 	eor.w	r8, r8, r3
 808889e:	3608      	adds	r6, #8
    int ret;
    const struct x509_crt_verify_string *cur;
    char *p = buf;
    size_t n = size;

    for( cur = x509_crt_verify_strings; cur->string != NULL ; cur++ )
 80888a0:	e7e2      	b.n	8088868 <mbedtls_x509_crt_verify_info+0x10>
        ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
        MBEDTLS_X509_SAFE_SNPRINTF;
        flags ^= cur->code;
    }

    if( flags != 0 )
 80888a2:	f1b8 0f00 	cmp.w	r8, #0
 80888a6:	d00a      	beq.n	80888be <mbedtls_x509_crt_verify_info+0x66>
    {
        ret = mbedtls_snprintf( p, n, "%sUnknown reason "
                                       "(this should not happen)\n", prefix );
 80888a8:	464b      	mov	r3, r9
 80888aa:	4a0a      	ldr	r2, [pc, #40]	; (80888d4 <mbedtls_x509_crt_verify_info+0x7c>)
 80888ac:	4621      	mov	r1, r4
 80888ae:	4638      	mov	r0, r7
 80888b0:	f008 fe5c 	bl	809156c <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80888b4:	2800      	cmp	r0, #0
 80888b6:	dbe8      	blt.n	808888a <mbedtls_x509_crt_verify_info+0x32>
 80888b8:	4284      	cmp	r4, r0
 80888ba:	d9e6      	bls.n	808888a <mbedtls_x509_crt_verify_info+0x32>
 80888bc:	1a24      	subs	r4, r4, r0
    }

    return( (int) ( size - n ) );
 80888be:	1b28      	subs	r0, r5, r4
}
 80888c0:	b003      	add	sp, #12
 80888c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80888c6:	bf00      	nop
 80888c8:	0809561c 	.word	0x0809561c
 80888cc:	0809597d 	.word	0x0809597d
 80888d0:	ffffd680 	.word	0xffffd680
 80888d4:	08095983 	.word	0x08095983

080888d8 <mbedtls_x509_crt_check_key_usage>:
{
    unsigned int usage_must, usage_may;
    unsigned int may_mask = MBEDTLS_X509_KU_ENCIPHER_ONLY
                          | MBEDTLS_X509_KU_DECIPHER_ONLY;

    if( ( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE ) == 0 )
 80888d8:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
 80888dc:	f013 0304 	ands.w	r3, r3, #4
 80888e0:	d01a      	beq.n	8088918 <mbedtls_x509_crt_check_key_usage+0x40>
        return( 0 );

    usage_must = usage & ~may_mask;

    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
 80888e2:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
 80888e6:	f421 4000 	bic.w	r0, r1, #32768	; 0x8000
 80888ea:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
 80888ee:	f023 0301 	bic.w	r3, r3, #1
 80888f2:	f020 0001 	bic.w	r0, r0, #1
 80888f6:	400b      	ands	r3, r1
 80888f8:	4298      	cmp	r0, r3
 80888fa:	d10c      	bne.n	8088916 <mbedtls_x509_crt_check_key_usage+0x3e>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    usage_may = usage & may_mask;

    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
 80888fc:	f248 0301 	movw	r3, #32769	; 0x8001
 8088900:	f248 0001 	movw	r0, #32769	; 0x8001
 8088904:	430a      	orrs	r2, r1
 8088906:	4013      	ands	r3, r2
        return( 0 );

    usage_must = usage & ~may_mask;

    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8088908:	4a04      	ldr	r2, [pc, #16]	; (808891c <mbedtls_x509_crt_check_key_usage+0x44>)

    usage_may = usage & may_mask;

    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
 808890a:	4008      	ands	r0, r1
        return( 0 );

    usage_must = usage & ~may_mask;

    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 808890c:	4298      	cmp	r0, r3
 808890e:	bf14      	ite	ne
 8088910:	4613      	movne	r3, r2
 8088912:	2300      	moveq	r3, #0
 8088914:	e000      	b.n	8088918 <mbedtls_x509_crt_check_key_usage+0x40>
 8088916:	4b01      	ldr	r3, [pc, #4]	; (808891c <mbedtls_x509_crt_check_key_usage+0x44>)

    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    return( 0 );
}
 8088918:	4618      	mov	r0, r3
 808891a:	4770      	bx	lr
 808891c:	ffffd800 	.word	0xffffd800

08088920 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>:
 * bottom means child is the end entity cert
 */
static int x509_crt_check_parent( const mbedtls_x509_crt *child,
                                  const mbedtls_x509_crt *parent,
                                  int top, int bottom )
{
 8088920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8088924:	4606      	mov	r6, r0
 8088926:	460d      	mov	r5, r1
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 8088928:	304c      	adds	r0, #76	; 0x4c
 808892a:	316c      	adds	r1, #108	; 0x6c
 * bottom means child is the end entity cert
 */
static int x509_crt_check_parent( const mbedtls_x509_crt *child,
                                  const mbedtls_x509_crt *parent,
                                  int top, int bottom )
{
 808892c:	4617      	mov	r7, r2
 808892e:	4698      	mov	r8, r3
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 8088930:	f7ff fbdb 	bl	80880ea <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
 8088934:	4604      	mov	r4, r0
 8088936:	b9d8      	cbnz	r0, 8088970 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x50>

    /* Parent must have the basicConstraints CA bit set as a general rule */
    need_ca_bit = 1;

    /* Exception: v1/v2 certificates that are locally trusted. */
    if( top && parent->version < 3 )
 8088938:	b177      	cbz	r7, 8088958 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x38>
 808893a:	69af      	ldr	r7, [r5, #24]
        need_ca_bit = 0;

    /* Exception: self-signed end-entity certs that are locally trusted. */
    if( top && bottom &&
 808893c:	f1b8 0f00 	cmp.w	r8, #0
 8088940:	d008      	beq.n	8088954 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x34>
        child->raw.len == parent->raw.len &&
 8088942:	6872      	ldr	r2, [r6, #4]
    /* Exception: v1/v2 certificates that are locally trusted. */
    if( top && parent->version < 3 )
        need_ca_bit = 0;

    /* Exception: self-signed end-entity certs that are locally trusted. */
    if( top && bottom &&
 8088944:	686b      	ldr	r3, [r5, #4]
 8088946:	429a      	cmp	r2, r3
 8088948:	d104      	bne.n	8088954 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x34>
        child->raw.len == parent->raw.len &&
        memcmp( child->raw.p, parent->raw.p, child->raw.len ) == 0 )
 808894a:	68a9      	ldr	r1, [r5, #8]
 808894c:	68b0      	ldr	r0, [r6, #8]
 808894e:	f00b f907 	bl	8093b60 <memcmp>
    if( top && parent->version < 3 )
        need_ca_bit = 0;

    /* Exception: self-signed end-entity certs that are locally trusted. */
    if( top && bottom &&
        child->raw.len == parent->raw.len &&
 8088952:	b178      	cbz	r0, 8088974 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x54>
        memcmp( child->raw.p, parent->raw.p, child->raw.len ) == 0 )
    {
        need_ca_bit = 0;
    }

    if( need_ca_bit && ! parent->ca_istrue )
 8088954:	2f02      	cmp	r7, #2
 8088956:	dd0d      	ble.n	8088974 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x54>
 8088958:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
 808895c:	b143      	cbz	r3, 8088970 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x50>
        return( -1 );

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( need_ca_bit &&
        mbedtls_x509_crt_check_key_usage( parent, MBEDTLS_X509_KU_KEY_CERT_SIGN ) != 0 )
 808895e:	2104      	movs	r1, #4
 8088960:	4628      	mov	r0, r5
 8088962:	f7ff ffb9 	bl	80888d8 <mbedtls_x509_crt_check_key_usage>

    if( need_ca_bit && ! parent->ca_istrue )
        return( -1 );

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( need_ca_bit &&
 8088966:	3000      	adds	r0, #0
 8088968:	bf18      	it	ne
 808896a:	2001      	movne	r0, #1
 808896c:	4244      	negs	r4, r0
 808896e:	e001      	b.n	8088974 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x54>
{
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
        return( -1 );
 8088970:	f04f 34ff 	mov.w	r4, #4294967295
        return( -1 );
    }
#endif

    return( 0 );
}
 8088974:	4620      	mov	r0, r4
 8088976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808897a <mbedtls_x509_crt_is_revoked>:
#if defined(MBEDTLS_X509_CRL_PARSE_C)
/*
 * Return 1 if the certificate is revoked, or 0 otherwise.
 */
int mbedtls_x509_crt_is_revoked( const mbedtls_x509_crt *crt, const mbedtls_x509_crl *crl )
{
 808897a:	b538      	push	{r3, r4, r5, lr}
 808897c:	4605      	mov	r5, r0
    const mbedtls_x509_crl_entry *cur = &crl->entry;
 808897e:	f101 0484 	add.w	r4, r1, #132	; 0x84

    while( cur != NULL && cur->serial.len != 0 )
 8088982:	b1a4      	cbz	r4, 80889ae <mbedtls_x509_crt_is_revoked+0x34>
 8088984:	6922      	ldr	r2, [r4, #16]
 8088986:	b1a2      	cbz	r2, 80889b2 <mbedtls_x509_crt_is_revoked+0x38>
    {
        if( crt->serial.len == cur->serial.len &&
 8088988:	6a2b      	ldr	r3, [r5, #32]
 808898a:	429a      	cmp	r2, r3
 808898c:	d001      	beq.n	8088992 <mbedtls_x509_crt_is_revoked+0x18>
        {
            if( mbedtls_x509_time_is_past( &cur->revocation_date ) )
                return( 1 );
        }

        cur = cur->next;
 808898e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 */
int mbedtls_x509_crt_is_revoked( const mbedtls_x509_crt *crt, const mbedtls_x509_crl *crl )
{
    const mbedtls_x509_crl_entry *cur = &crl->entry;

    while( cur != NULL && cur->serial.len != 0 )
 8088990:	e7f7      	b.n	8088982 <mbedtls_x509_crt_is_revoked+0x8>
    {
        if( crt->serial.len == cur->serial.len &&
            memcmp( crt->serial.p, cur->serial.p, crt->serial.len ) == 0 )
 8088992:	6961      	ldr	r1, [r4, #20]
 8088994:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8088996:	f00b f8e3 	bl	8093b60 <memcmp>
{
    const mbedtls_x509_crl_entry *cur = &crl->entry;

    while( cur != NULL && cur->serial.len != 0 )
    {
        if( crt->serial.len == cur->serial.len &&
 808899a:	2800      	cmp	r0, #0
 808899c:	d1f7      	bne.n	808898e <mbedtls_x509_crt_is_revoked+0x14>
            memcmp( crt->serial.p, cur->serial.p, crt->serial.len ) == 0 )
        {
            if( mbedtls_x509_time_is_past( &cur->revocation_date ) )
 808899e:	f104 0018 	add.w	r0, r4, #24
 80889a2:	f7fe fac1 	bl	8086f28 <mbedtls_x509_time_is_past>
 80889a6:	2800      	cmp	r0, #0
 80889a8:	d0f1      	beq.n	808898e <mbedtls_x509_crt_is_revoked+0x14>
                return( 1 );
 80889aa:	2001      	movs	r0, #1
 80889ac:	bd38      	pop	{r3, r4, r5, pc}
        }

        cur = cur->next;
    }

    return( 0 );
 80889ae:	4620      	mov	r0, r4
 80889b0:	bd38      	pop	{r3, r4, r5, pc}
 80889b2:	4610      	mov	r0, r2
}
 80889b4:	bd38      	pop	{r3, r4, r5, pc}

080889b6 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile>:
 * Skip validation if no CRL for the given CA is present.
 */
static int x509_crt_verifycrl( mbedtls_x509_crt *crt, mbedtls_x509_crt *ca,
                               mbedtls_x509_crl *crl_list,
                               const mbedtls_x509_crt_profile *profile )
{
 80889b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80889ba:	b099      	sub	sp, #100	; 0x64
 80889bc:	9005      	str	r0, [sp, #20]
 80889be:	4614      	mov	r4, r2
 80889c0:	461f      	mov	r7, r3
    int flags = 0;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;

    if( ca == NULL )
 80889c2:	460e      	mov	r6, r1
 80889c4:	2900      	cmp	r1, #0
 80889c6:	d077      	beq.n	8088ab8 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x102>
 80889c8:	2500      	movs	r5, #0
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 80889ca:	f04f 0a01 	mov.w	sl, #1
    const mbedtls_md_info_t *md_info;

    if( ca == NULL )
        return( flags );

    while( crl_list != NULL )
 80889ce:	2c00      	cmp	r4, #0
 80889d0:	d07a      	beq.n	8088ac8 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x112>
    {
        if( crl_list->version == 0 ||
 80889d2:	69a3      	ldr	r3, [r4, #24]
 80889d4:	2b00      	cmp	r3, #0
 80889d6:	d06c      	beq.n	8088ab2 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xfc>
            crl_list->issuer_raw.len != ca->subject_raw.len ||
 80889d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    if( ca == NULL )
        return( flags );

    while( crl_list != NULL )
    {
        if( crl_list->version == 0 ||
 80889da:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80889dc:	429a      	cmp	r2, r3
 80889de:	d168      	bne.n	8088ab2 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xfc>
            crl_list->issuer_raw.len != ca->subject_raw.len ||
            memcmp( crl_list->issuer_raw.p, ca->subject_raw.p,
 80889e0:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 80889e2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80889e4:	f00b f8bc 	bl	8093b60 <memcmp>
        return( flags );

    while( crl_list != NULL )
    {
        if( crl_list->version == 0 ||
            crl_list->issuer_raw.len != ca->subject_raw.len ||
 80889e8:	2800      	cmp	r0, #0
 80889ea:	d162      	bne.n	8088ab2 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xfc>

        /*
         * Check if the CA is configured to sign CRLs
         */
#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
        if( mbedtls_x509_crt_check_key_usage( ca, MBEDTLS_X509_KU_CRL_SIGN ) != 0 )
 80889ec:	2102      	movs	r1, #2
 80889ee:	4630      	mov	r0, r6
 80889f0:	f7ff ff72 	bl	80888d8 <mbedtls_x509_crt_check_key_usage>
 80889f4:	2800      	cmp	r0, #0
 80889f6:	d143      	bne.n	8088a80 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xca>
#endif

        /*
         * Check if CRL is correctly signed by the trusted CA
         */
        if( x509_profile_check_md_alg( profile, crl_list->sig_md ) != 0 )
 80889f8:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 80889fc:	683a      	ldr	r2, [r7, #0]
 80889fe:	1e43      	subs	r3, r0, #1
 8088a00:	fa0a f303 	lsl.w	r3, sl, r3
 8088a04:	4213      	tst	r3, r2
 8088a06:	d059      	beq.n	8088abc <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x106>
 8088a08:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
 8088a0c:	2201      	movs	r2, #1
 8088a0e:	3b01      	subs	r3, #1
 8088a10:	fa02 f303 	lsl.w	r3, r2, r3
 8088a14:	687a      	ldr	r2, [r7, #4]
 8088a16:	4213      	tst	r3, r2
 8088a18:	d053      	beq.n	8088ac2 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x10c>
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;

        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;

        md_info = mbedtls_md_info_from_type( crl_list->sig_md );
 8088a1a:	f7ff fa01 	bl	8087e20 <mbedtls_md_info_from_type>
        if( mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash ) != 0 )
 8088a1e:	f10d 0920 	add.w	r9, sp, #32
 8088a22:	464b      	mov	r3, r9
 8088a24:	6922      	ldr	r2, [r4, #16]
 8088a26:	6961      	ldr	r1, [r4, #20]
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;

        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;

        md_info = mbedtls_md_info_from_type( crl_list->sig_md );
 8088a28:	4683      	mov	fp, r0
        if( mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash ) != 0 )
 8088a2a:	f7ff fa6b 	bl	8087f04 <mbedtls_md>
 8088a2e:	bb38      	cbnz	r0, 8088a80 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xca>
            /* Note: this can't happen except after an internal error */
            flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
            break;
        }

        if( x509_profile_check_key( profile, crl_list->sig_pk, &ca->pk ) != 0 )
 8088a30:	f106 08bc 	add.w	r8, r6, #188	; 0xbc
 8088a34:	4642      	mov	r2, r8
 8088a36:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
 8088a3a:	f107 000c 	add.w	r0, r7, #12
 8088a3e:	f7ff fbdb 	bl	80881f8 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>
 8088a42:	b108      	cbz	r0, 8088a48 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x92>
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 8088a44:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 8088a48:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
 8088a4c:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
 8088a50:	9304      	str	r3, [sp, #16]
 8088a52:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
 8088a56:	4658      	mov	r0, fp
        }

        if( x509_profile_check_key( profile, crl_list->sig_pk, &ca->pk ) != 0 )
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 8088a58:	9107      	str	r1, [sp, #28]
 8088a5a:	9306      	str	r3, [sp, #24]
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
 8088a5c:	f7ff fb24 	bl	80880a8 <mbedtls_md_get_size>
        }

        if( x509_profile_check_key( profile, crl_list->sig_pk, &ca->pk ) != 0 )
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 8088a60:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 8088a64:	9b06      	ldr	r3, [sp, #24]
 8088a66:	9203      	str	r2, [sp, #12]
 8088a68:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
 8088a6c:	9907      	ldr	r1, [sp, #28]
 8088a6e:	9202      	str	r2, [sp, #8]
 8088a70:	9001      	str	r0, [sp, #4]
 8088a72:	f8cd 9000 	str.w	r9, [sp]
 8088a76:	4642      	mov	r2, r8
 8088a78:	9804      	ldr	r0, [sp, #16]
 8088a7a:	f004 f98d 	bl	808cd98 <mbedtls_pk_verify_ext>
 8088a7e:	b110      	cbz	r0, 8088a86 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xd0>
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
                           crl_list->sig.p, crl_list->sig.len ) != 0 )
        {
            flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
 8088a80:	f045 0510 	orr.w	r5, r5, #16
            break;
 8088a84:	e020      	b.n	8088ac8 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x112>
        }

        /*
         * Check for validity of CRL (Do not drop out)
         */
        if( mbedtls_x509_time_is_past( &crl_list->next_update ) )
 8088a86:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 8088a8a:	f7fe fa4d 	bl	8086f28 <mbedtls_x509_time_is_past>
 8088a8e:	b108      	cbz	r0, 8088a94 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xde>
            flags |= MBEDTLS_X509_BADCRL_EXPIRED;
 8088a90:	f045 0520 	orr.w	r5, r5, #32

        if( mbedtls_x509_time_is_future( &crl_list->this_update ) )
 8088a94:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8088a98:	f7fe fa48 	bl	8086f2c <mbedtls_x509_time_is_future>
 8088a9c:	b108      	cbz	r0, 8088aa2 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xec>
            flags |= MBEDTLS_X509_BADCRL_FUTURE;
 8088a9e:	f445 6580 	orr.w	r5, r5, #1024	; 0x400

        /*
         * Check if certificate is revoked
         */
        if( mbedtls_x509_crt_is_revoked( crt, crl_list ) )
 8088aa2:	4621      	mov	r1, r4
 8088aa4:	9805      	ldr	r0, [sp, #20]
 8088aa6:	f7ff ff68 	bl	808897a <mbedtls_x509_crt_is_revoked>
 8088aaa:	b110      	cbz	r0, 8088ab2 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xfc>
        {
            flags |= MBEDTLS_X509_BADCERT_REVOKED;
 8088aac:	f045 0502 	orr.w	r5, r5, #2
            break;
 8088ab0:	e00a      	b.n	8088ac8 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x112>
        }

        crl_list = crl_list->next;
 8088ab2:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 8088ab6:	e78a      	b.n	80889ce <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x18>
    int flags = 0;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;

    if( ca == NULL )
        return( flags );
 8088ab8:	460d      	mov	r5, r1
 8088aba:	e005      	b.n	8088ac8 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x112>

        /*
         * Check if CRL is correctly signed by the trusted CA
         */
        if( x509_profile_check_md_alg( profile, crl_list->sig_md ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;
 8088abc:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
 8088ac0:	e7a2      	b.n	8088a08 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x52>

        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;
 8088ac2:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000
 8088ac6:	e7a8      	b.n	8088a1a <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x64>

        crl_list = crl_list->next;
    }

    return( flags );
}
 8088ac8:	4628      	mov	r0, r5
 8088aca:	b019      	add	sp, #100	; 0x64
 8088acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08088ad0 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>:
                mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 8088ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8088ad4:	4604      	mov	r4, r0
 8088ad6:	b09d      	sub	sp, #116	; 0x74
 8088ad8:	4699      	mov	r9, r3
    int check_path_cnt;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_x509_crt *future_past_ca = NULL;

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 8088ada:	30a4      	adds	r0, #164	; 0xa4
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
    int ret;
    uint32_t ca_flags = 0;
 8088adc:	2300      	movs	r3, #0
                mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 8088ade:	460d      	mov	r5, r1
 8088ae0:	9206      	str	r2, [sp, #24]
 8088ae2:	f8dd 8098 	ldr.w	r8, [sp, #152]	; 0x98
 8088ae6:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8088ae8:	f8dd a0a4 	ldr.w	sl, [sp, #164]	; 0xa4
    int ret;
    uint32_t ca_flags = 0;
 8088aec:	930b      	str	r3, [sp, #44]	; 0x2c
    int check_path_cnt;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_x509_crt *future_past_ca = NULL;

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 8088aee:	f7fe fa1b 	bl	8086f28 <mbedtls_x509_time_is_past>
 8088af2:	b118      	cbz	r0, 8088afc <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x2c>
        *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 8088af4:	6833      	ldr	r3, [r6, #0]
 8088af6:	f043 0301 	orr.w	r3, r3, #1
 8088afa:	6033      	str	r3, [r6, #0]

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
 8088afc:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 8088b00:	f7fe fa14 	bl	8086f2c <mbedtls_x509_time_is_future>
 8088b04:	b118      	cbz	r0, 8088b0e <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x3e>
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;
 8088b06:	6833      	ldr	r3, [r6, #0]
 8088b08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8088b0c:	6033      	str	r3, [r6, #0]
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 8088b0e:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
 8088b12:	1e5a      	subs	r2, r3, #1
 8088b14:	2301      	movs	r3, #1
 8088b16:	4093      	lsls	r3, r2
 8088b18:	f8d9 2000 	ldr.w	r2, [r9]
 8088b1c:	4213      	tst	r3, r2
 8088b1e:	f000 80c0 	beq.w	8088ca2 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1d2>
 8088b22:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
 8088b26:	1e5a      	subs	r2, r3, #1
 8088b28:	2301      	movs	r3, #1
 8088b2a:	4093      	lsls	r3, r2
 8088b2c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8088b30:	4213      	tst	r3, r2
 8088b32:	f000 80bb 	beq.w	8088cac <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1dc>
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    /*
     * Child is the top of the chain. Check against the trust_ca list.
     */
    *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 8088b36:	6833      	ldr	r3, [r6, #0]

    md_info = mbedtls_md_info_from_type( child->sig_md );
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 8088b38:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    /*
     * Child is the top of the chain. Check against the trust_ca list.
     */
    *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 8088b3c:	f043 0308 	orr.w	r3, r3, #8
 8088b40:	6033      	str	r3, [r6, #0]

    md_info = mbedtls_md_info_from_type( child->sig_md );
 8088b42:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
 8088b46:	f7ff f96b 	bl	8087e20 <mbedtls_md_info_from_type>
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 8088b4a:	465b      	mov	r3, fp
 8088b4c:	6922      	ldr	r2, [r4, #16]
 8088b4e:	6961      	ldr	r1, [r4, #20]
    /*
     * Child is the top of the chain. Check against the trust_ca list.
     */
    *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;

    md_info = mbedtls_md_info_from_type( child->sig_md );
 8088b50:	9005      	str	r0, [sp, #20]
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 8088b52:	f7ff f9d7 	bl	8087f04 <mbedtls_md>
 8088b56:	2800      	cmp	r0, #0
 8088b58:	d16d      	bne.n	8088c36 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x166>
 8088b5a:	4607      	mov	r7, r0
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 8088b5c:	f8cd b01c 	str.w	fp, [sp, #28]
        /* Note: this can't happen except after an internal error */
        /* Cannot check signature, no need to try any CA */
        trust_ca = NULL;
    }

    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
 8088b60:	b915      	cbnz	r5, 8088b68 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x98>
        }

        break;
    }

    if( trust_ca != NULL || ( trust_ca = future_past_ca ) != NULL )
 8088b62:	2f00      	cmp	r7, #0
 8088b64:	d14c      	bne.n	8088c00 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x130>
 8088b66:	e066      	b.n	8088c36 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x166>
        trust_ca = NULL;
    }

    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
    {
        if( x509_crt_check_parent( child, trust_ca, 1, path_cnt == 0 ) != 0 )
 8088b68:	fab8 f388 	clz	r3, r8
 8088b6c:	2201      	movs	r2, #1
 8088b6e:	095b      	lsrs	r3, r3, #5
 8088b70:	4629      	mov	r1, r5
 8088b72:	4620      	mov	r0, r4
 8088b74:	f7ff fed4 	bl	8088920 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 8088b78:	2800      	cmp	r0, #0
 8088b7a:	d13e      	bne.n	8088bfa <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x12a>

        /*
         * Reduce check_path_cnt to check against if top of the chain is
         * the same as the trusted CA
         */
        if( child->subject_raw.len == trust_ca->subject_raw.len &&
 8088b7c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8088b7e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
    {
        if( x509_crt_check_parent( child, trust_ca, 1, path_cnt == 0 ) != 0 )
            continue;

        check_path_cnt = path_cnt + 1;
 8088b80:	f108 0b01 	add.w	fp, r8, #1

        /*
         * Reduce check_path_cnt to check against if top of the chain is
         * the same as the trusted CA
         */
        if( child->subject_raw.len == trust_ca->subject_raw.len &&
 8088b84:	429a      	cmp	r2, r3
 8088b86:	d106      	bne.n	8088b96 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xc6>
            memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
 8088b88:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8088b8a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8088b8c:	f00a ffe8 	bl	8093b60 <memcmp>
                    child->subject_raw.len ) == 0 )
        {
            check_path_cnt--;
 8088b90:	2800      	cmp	r0, #0
 8088b92:	bf08      	it	eq
 8088b94:	46c3      	moveq	fp, r8
        }

        /* Self signed certificates do not count towards the limit */
        if( trust_ca->max_pathlen > 0 &&
 8088b96:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 8088b9a:	2b00      	cmp	r3, #0
 8088b9c:	dd04      	ble.n	8088ba8 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xd8>
 8088b9e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8088ba0:	ebc2 0b0b 	rsb	fp, r2, fp
 8088ba4:	455b      	cmp	r3, fp
 8088ba6:	db28      	blt.n	8088bfa <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x12a>
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 8088ba8:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 8088bac:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 8088bb0:	9805      	ldr	r0, [sp, #20]
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 8088bb2:	f894 b129 	ldrb.w	fp, [r4, #297]	; 0x129
 8088bb6:	9109      	str	r1, [sp, #36]	; 0x24
 8088bb8:	9308      	str	r3, [sp, #32]
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 8088bba:	f7ff fa75 	bl	80880a8 <mbedtls_md_get_size>
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 8088bbe:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8088bc2:	9b07      	ldr	r3, [sp, #28]
 8088bc4:	9203      	str	r2, [sp, #12]
 8088bc6:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8088bca:	9001      	str	r0, [sp, #4]
 8088bcc:	9202      	str	r2, [sp, #8]
 8088bce:	9300      	str	r3, [sp, #0]
 8088bd0:	f105 02bc 	add.w	r2, r5, #188	; 0xbc
 8088bd4:	9b08      	ldr	r3, [sp, #32]
 8088bd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8088bd8:	4658      	mov	r0, fp
 8088bda:	f004 f8dd 	bl	808cd98 <mbedtls_pk_verify_ext>
 8088bde:	b960      	cbnz	r0, 8088bfa <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x12a>
                           child->sig.p, child->sig.len ) != 0 )
        {
            continue;
        }

        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) ||
 8088be0:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
 8088be4:	f7fe f9a0 	bl	8086f28 <mbedtls_x509_time_is_past>
 8088be8:	b920      	cbnz	r0, 8088bf4 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x124>
            mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
 8088bea:	f105 008c 	add.w	r0, r5, #140	; 0x8c
 8088bee:	f7fe f99d 	bl	8086f2c <mbedtls_x509_time_is_future>
                           child->sig.p, child->sig.len ) != 0 )
        {
            continue;
        }

        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) ||
 8088bf2:	b130      	cbz	r0, 8088c02 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x132>
            mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
        {
            if ( future_past_ca == NULL )
 8088bf4:	2f00      	cmp	r7, #0
 8088bf6:	bf08      	it	eq
 8088bf8:	462f      	moveq	r7, r5
        /* Note: this can't happen except after an internal error */
        /* Cannot check signature, no need to try any CA */
        trust_ca = NULL;
    }

    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
 8088bfa:	f8d5 5130 	ldr.w	r5, [r5, #304]	; 0x130
 8088bfe:	e7af      	b.n	8088b60 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x90>
 8088c00:	463d      	mov	r5, r7
    if( trust_ca != NULL || ( trust_ca = future_past_ca ) != NULL )
    {
        /*
         * Top of chain is signed by a trusted CA
         */
        *flags &= ~MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 8088c02:	6833      	ldr	r3, [r6, #0]

        if( x509_profile_check_key( profile, child->sig_pk, &trust_ca->pk ) != 0 )
 8088c04:	f105 02bc 	add.w	r2, r5, #188	; 0xbc
    if( trust_ca != NULL || ( trust_ca = future_past_ca ) != NULL )
    {
        /*
         * Top of chain is signed by a trusted CA
         */
        *flags &= ~MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 8088c08:	f023 0308 	bic.w	r3, r3, #8
 8088c0c:	6033      	str	r3, [r6, #0]

        if( x509_profile_check_key( profile, child->sig_pk, &trust_ca->pk ) != 0 )
 8088c0e:	f894 1129 	ldrb.w	r1, [r4, #297]	; 0x129
 8088c12:	f109 000c 	add.w	r0, r9, #12
 8088c16:	f7ff faef 	bl	80881f8 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>
 8088c1a:	b118      	cbz	r0, 8088c24 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x154>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 8088c1c:	6833      	ldr	r3, [r6, #0]
 8088c1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8088c22:	6033      	str	r3, [r6, #0]
     * If top of chain is not the same as the trusted CA send a verify request
     * to the callback for any issues with validity and CRL presence for the
     * trusted CA certificate.
     */
    if( trust_ca != NULL &&
        ( child->subject_raw.len != trust_ca->subject_raw.len ||
 8088c24:	6c62      	ldr	r2, [r4, #68]	; 0x44
    /*
     * If top of chain is not the same as the trusted CA send a verify request
     * to the callback for any issues with validity and CRL presence for the
     * trusted CA certificate.
     */
    if( trust_ca != NULL &&
 8088c26:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8088c28:	429a      	cmp	r2, r3
 8088c2a:	d10d      	bne.n	8088c48 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x178>
        ( child->subject_raw.len != trust_ca->subject_raw.len ||
          memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
 8088c2c:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8088c2e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8088c30:	f00a ff96 	bl	8093b60 <memcmp>
     * If top of chain is not the same as the trusted CA send a verify request
     * to the callback for any issues with validity and CRL presence for the
     * trusted CA certificate.
     */
    if( trust_ca != NULL &&
        ( child->subject_raw.len != trust_ca->subject_raw.len ||
 8088c34:	b940      	cbnz	r0, 8088c48 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x178>
            }
        }
    }

    /* Call callback on top cert */
    if( NULL != f_vrfy )
 8088c36:	f1ba 0f00 	cmp.w	sl, #0
 8088c3a:	d12a      	bne.n	8088c92 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1c2>
    {
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );
    }

    *flags |= ca_flags;
 8088c3c:	6832      	ldr	r2, [r6, #0]
 8088c3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    return( 0 );
 8088c40:	2000      	movs	r0, #0
    {
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );
    }

    *flags |= ca_flags;
 8088c42:	4313      	orrs	r3, r2
 8088c44:	6033      	str	r3, [r6, #0]

    return( 0 );
 8088c46:	e036      	b.n	8088cb6 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1e6>
          memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
                  child->subject_raw.len ) != 0 ) )
    {
#if defined(MBEDTLS_X509_CRL_PARSE_C)
        /* Check trusted CA's CRL for the chain's top crt */
        *flags |= x509_crt_verifycrl( child, trust_ca, ca_crl, profile );
 8088c48:	464b      	mov	r3, r9
 8088c4a:	9a06      	ldr	r2, [sp, #24]
 8088c4c:	4629      	mov	r1, r5
 8088c4e:	4620      	mov	r0, r4
 8088c50:	f7ff feb1 	bl	80889b6 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile>
 8088c54:	6833      	ldr	r3, [r6, #0]
 8088c56:	4318      	orrs	r0, r3
 8088c58:	6030      	str	r0, [r6, #0]
#else
        ((void) ca_crl);
#endif

        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) )
 8088c5a:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
 8088c5e:	f7fe f963 	bl	8086f28 <mbedtls_x509_time_is_past>
 8088c62:	b118      	cbz	r0, 8088c6c <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x19c>
            ca_flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 8088c64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8088c66:	f043 0301 	orr.w	r3, r3, #1
 8088c6a:	930b      	str	r3, [sp, #44]	; 0x2c

        if( mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
 8088c6c:	f105 008c 	add.w	r0, r5, #140	; 0x8c
 8088c70:	f7fe f95c 	bl	8086f2c <mbedtls_x509_time_is_future>
 8088c74:	b118      	cbz	r0, 8088c7e <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1ae>
            ca_flags |= MBEDTLS_X509_BADCERT_FUTURE;
 8088c76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8088c78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8088c7c:	930b      	str	r3, [sp, #44]	; 0x2c

        if( NULL != f_vrfy )
 8088c7e:	f1ba 0f00 	cmp.w	sl, #0
 8088c82:	d0db      	beq.n	8088c3c <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x16c>
        {
            if( ( ret = f_vrfy( p_vrfy, trust_ca, path_cnt + 1,
 8088c84:	ab0b      	add	r3, sp, #44	; 0x2c
 8088c86:	f108 0201 	add.w	r2, r8, #1
 8088c8a:	4629      	mov	r1, r5
 8088c8c:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8088c8e:	47d0      	blx	sl
 8088c90:	b988      	cbnz	r0, 8088cb6 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1e6>
    }

    /* Call callback on top cert */
    if( NULL != f_vrfy )
    {
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
 8088c92:	4633      	mov	r3, r6
 8088c94:	4642      	mov	r2, r8
 8088c96:	4621      	mov	r1, r4
 8088c98:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8088c9a:	47d0      	blx	sl
 8088c9c:	2800      	cmp	r0, #0
 8088c9e:	d0cd      	beq.n	8088c3c <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x16c>
 8088ca0:	e009      	b.n	8088cb6 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1e6>

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;

    if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
 8088ca2:	6833      	ldr	r3, [r6, #0]
 8088ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8088ca8:	6033      	str	r3, [r6, #0]
 8088caa:	e73a      	b.n	8088b22 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x52>

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 8088cac:	6833      	ldr	r3, [r6, #0]
 8088cae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8088cb2:	6033      	str	r3, [r6, #0]
 8088cb4:	e73f      	b.n	8088b36 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x66>
    }

    *flags |= ca_flags;

    return( 0 );
}
 8088cb6:	b01d      	add	sp, #116	; 0x74
 8088cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08088cbc <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>:
                mbedtls_x509_crt *trust_ca, mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 8088cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8088cc0:	b09d      	sub	sp, #116	; 0x74
 8088cc2:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8088cc4:	469a      	mov	sl, r3
    int ret;
    uint32_t parent_flags = 0;
 8088cc6:	2300      	movs	r3, #0
                mbedtls_x509_crt *trust_ca, mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 8088cc8:	4605      	mov	r5, r0
 8088cca:	460f      	mov	r7, r1
 8088ccc:	9206      	str	r2, [sp, #24]
 8088cce:	f8dd 8098 	ldr.w	r8, [sp, #152]	; 0x98
 8088cd2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
    int ret;
    uint32_t parent_flags = 0;
 8088cd4:	930b      	str	r3, [sp, #44]	; 0x2c
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    mbedtls_x509_crt *grandparent;
    const mbedtls_md_info_t *md_info;

    /* Counting intermediate self signed certificates */
    if( ( path_cnt != 0 ) && x509_name_cmp( &child->issuer, &child->subject ) == 0 )
 8088cd6:	b146      	cbz	r6, 8088cea <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x2e>
 8088cd8:	f100 016c 	add.w	r1, r0, #108	; 0x6c
 8088cdc:	304c      	adds	r0, #76	; 0x4c
 8088cde:	f7ff fa04 	bl	80880ea <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
 8088ce2:	2800      	cmp	r0, #0
 8088ce4:	d07a      	beq.n	8088ddc <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x120>
        self_cnt++;

    /* path_cnt is 0 for the first intermediate CA */
    if( 1 + path_cnt > MBEDTLS_X509_MAX_INTERMEDIATE_CA )
 8088ce6:	2e07      	cmp	r6, #7
 8088ce8:	dc76      	bgt.n	8088dd8 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x11c>
    {
        /* return immediately as the goal is to avoid unbounded recursion */
        return( MBEDTLS_ERR_X509_FATAL_ERROR );
    }

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 8088cea:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
 8088cee:	f7fe f91b 	bl	8086f28 <mbedtls_x509_time_is_past>
 8088cf2:	b118      	cbz	r0, 8088cfc <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x40>
        *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 8088cf4:	6823      	ldr	r3, [r4, #0]
 8088cf6:	f043 0301 	orr.w	r3, r3, #1
 8088cfa:	6023      	str	r3, [r4, #0]

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
 8088cfc:	f105 008c 	add.w	r0, r5, #140	; 0x8c
 8088d00:	f7fe f914 	bl	8086f2c <mbedtls_x509_time_is_future>
 8088d04:	b118      	cbz	r0, 8088d0e <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x52>
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;
 8088d06:	6823      	ldr	r3, [r4, #0]
 8088d08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8088d0c:	6023      	str	r3, [r4, #0]
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 8088d0e:	f895 3128 	ldrb.w	r3, [r5, #296]	; 0x128
 8088d12:	1e5a      	subs	r2, r3, #1
 8088d14:	2301      	movs	r3, #1
 8088d16:	4093      	lsls	r3, r2
 8088d18:	f8d8 2000 	ldr.w	r2, [r8]
 8088d1c:	4213      	tst	r3, r2
 8088d1e:	d061      	beq.n	8088de4 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x128>
 8088d20:	f895 3129 	ldrb.w	r3, [r5, #297]	; 0x129
 8088d24:	1e5a      	subs	r2, r3, #1
 8088d26:	2301      	movs	r3, #1
 8088d28:	4093      	lsls	r3, r2
 8088d2a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8088d2e:	4213      	tst	r3, r2
 8088d30:	d05d      	beq.n	8088dee <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x132>
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    md_info = mbedtls_md_info_from_type( child->sig_md );
 8088d32:	f895 0128 	ldrb.w	r0, [r5, #296]	; 0x128
 8088d36:	f7ff f873 	bl	8087e20 <mbedtls_md_info_from_type>
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 8088d3a:	ab0c      	add	r3, sp, #48	; 0x30
 8088d3c:	692a      	ldr	r2, [r5, #16]
 8088d3e:	6969      	ldr	r1, [r5, #20]
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    md_info = mbedtls_md_info_from_type( child->sig_md );
 8088d40:	4683      	mov	fp, r0
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 8088d42:	f7ff f8df 	bl	8087f04 <mbedtls_md>
 8088d46:	bb48      	cbnz	r0, 8088d9c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xe0>
        /* Note: this can't happen except after an internal error */
        *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
    }
    else
    {
        if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
 8088d48:	f107 09bc 	add.w	r9, r7, #188	; 0xbc
 8088d4c:	464a      	mov	r2, r9
 8088d4e:	f895 1129 	ldrb.w	r1, [r5, #297]	; 0x129
 8088d52:	f108 000c 	add.w	r0, r8, #12
 8088d56:	f7ff fa4f 	bl	80881f8 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>
 8088d5a:	b118      	cbz	r0, 8088d64 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xa8>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 8088d5c:	6823      	ldr	r3, [r4, #0]
 8088d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8088d62:	6023      	str	r3, [r4, #0]

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 8088d64:	f895 3129 	ldrb.w	r3, [r5, #297]	; 0x129
 8088d68:	f8d5 112c 	ldr.w	r1, [r5, #300]	; 0x12c
 8088d6c:	9307      	str	r3, [sp, #28]
 8088d6e:	f895 3128 	ldrb.w	r3, [r5, #296]	; 0x128
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 8088d72:	4658      	mov	r0, fp
    else
    {
        if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 8088d74:	9109      	str	r1, [sp, #36]	; 0x24
 8088d76:	9308      	str	r3, [sp, #32]
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 8088d78:	f7ff f996 	bl	80880a8 <mbedtls_md_get_size>
    else
    {
        if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 8088d7c:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
 8088d80:	9b08      	ldr	r3, [sp, #32]
 8088d82:	9203      	str	r2, [sp, #12]
 8088d84:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
 8088d88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8088d8a:	9202      	str	r2, [sp, #8]
 8088d8c:	aa0c      	add	r2, sp, #48	; 0x30
 8088d8e:	9001      	str	r0, [sp, #4]
 8088d90:	9200      	str	r2, [sp, #0]
 8088d92:	9807      	ldr	r0, [sp, #28]
 8088d94:	464a      	mov	r2, r9
 8088d96:	f003 ffff 	bl	808cd98 <mbedtls_pk_verify_ext>
 8088d9a:	b118      	cbz	r0, 8088da4 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xe8>
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
                           child->sig.p, child->sig.len ) != 0 )
        {
            *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 8088d9c:	6823      	ldr	r3, [r4, #0]
 8088d9e:	f043 0308 	orr.w	r3, r3, #8
 8088da2:	6023      	str	r3, [r4, #0]
        }
    }

#if defined(MBEDTLS_X509_CRL_PARSE_C)
    /* Check trusted CA's CRL for the given crt */
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
 8088da4:	4643      	mov	r3, r8
 8088da6:	4652      	mov	r2, sl
 8088da8:	4639      	mov	r1, r7
 8088daa:	4628      	mov	r0, r5
 8088dac:	f7ff fe03 	bl	80889b6 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile>
 8088db0:	6823      	ldr	r3, [r4, #0]
#endif

    /* Look for a grandparent in trusted CAs */
    for( grandparent = trust_ca;
 8088db2:	f8dd 9018 	ldr.w	r9, [sp, #24]
        }
    }

#if defined(MBEDTLS_X509_CRL_PARSE_C)
    /* Check trusted CA's CRL for the given crt */
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
 8088db6:	4318      	orrs	r0, r3
 8088db8:	6020      	str	r0, [r4, #0]
#endif

    /* Look for a grandparent in trusted CAs */
    for( grandparent = trust_ca;
         grandparent != NULL;
 8088dba:	f1b9 0f00 	cmp.w	r9, #0
 8088dbe:	d029      	beq.n	8088e14 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x158>
         grandparent = grandparent->next )
    {
        if( x509_crt_check_parent( parent, grandparent,
 8088dc0:	fab6 f386 	clz	r3, r6
 8088dc4:	2200      	movs	r2, #0
 8088dc6:	095b      	lsrs	r3, r3, #5
 8088dc8:	4649      	mov	r1, r9
 8088dca:	4638      	mov	r0, r7
 8088dcc:	f7ff fda8 	bl	8088920 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 8088dd0:	b190      	cbz	r0, 8088df8 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x13c>
    /* Check trusted CA's CRL for the given crt */
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
#endif

    /* Look for a grandparent in trusted CAs */
    for( grandparent = trust_ca;
 8088dd2:	f8d9 9130 	ldr.w	r9, [r9, #304]	; 0x130
 8088dd6:	e7f0      	b.n	8088dba <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xfe>

    /* path_cnt is 0 for the first intermediate CA */
    if( 1 + path_cnt > MBEDTLS_X509_MAX_INTERMEDIATE_CA )
    {
        /* return immediately as the goal is to avoid unbounded recursion */
        return( MBEDTLS_ERR_X509_FATAL_ERROR );
 8088dd8:	4838      	ldr	r0, [pc, #224]	; (8088ebc <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x200>)
 8088dda:	e06b      	b.n	8088eb4 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1f8>
    mbedtls_x509_crt *grandparent;
    const mbedtls_md_info_t *md_info;

    /* Counting intermediate self signed certificates */
    if( ( path_cnt != 0 ) && x509_name_cmp( &child->issuer, &child->subject ) == 0 )
        self_cnt++;
 8088ddc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8088dde:	3301      	adds	r3, #1
 8088de0:	9328      	str	r3, [sp, #160]	; 0xa0
 8088de2:	e780      	b.n	8088ce6 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x2a>

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;

    if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
 8088de4:	6823      	ldr	r3, [r4, #0]
 8088de6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8088dea:	6023      	str	r3, [r4, #0]
 8088dec:	e798      	b.n	8088d20 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x64>

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 8088dee:	6823      	ldr	r3, [r4, #0]
 8088df0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8088df4:	6023      	str	r3, [r4, #0]
 8088df6:	e79c      	b.n	8088d32 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x76>
    }

    if( grandparent != NULL )
    {
        ret = x509_crt_verify_top( parent, grandparent, ca_crl, profile,
                                path_cnt + 1, self_cnt, &parent_flags, f_vrfy, p_vrfy );
 8088df8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8088dfa:	4652      	mov	r2, sl
 8088dfc:	9304      	str	r3, [sp, #16]
 8088dfe:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8088e00:	4649      	mov	r1, r9
 8088e02:	9303      	str	r3, [sp, #12]
 8088e04:	ab0b      	add	r3, sp, #44	; 0x2c
 8088e06:	9302      	str	r3, [sp, #8]
 8088e08:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8088e0a:	9301      	str	r3, [sp, #4]
 8088e0c:	1c73      	adds	r3, r6, #1
 8088e0e:	9300      	str	r3, [sp, #0]
 8088e10:	4643      	mov	r3, r8
 8088e12:	e03b      	b.n	8088e8c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1d0>
             grandparent = grandparent->next )
        {
            /* +2 because the current step is not yet accounted for
             * and because max_pathlen is one higher than it should be.
             * Also self signed certificates do not count to the limit. */
            if( grandparent->max_pathlen > 0 &&
 8088e14:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8088e16:	f106 0b02 	add.w	fp, r6, #2
            return( ret );
    }
    else
    {
        /* Look for a grandparent upwards the chain */
        for( grandparent = parent->next;
 8088e1a:	f8d7 9130 	ldr.w	r9, [r7, #304]	; 0x130
             grandparent = grandparent->next )
        {
            /* +2 because the current step is not yet accounted for
             * and because max_pathlen is one higher than it should be.
             * Also self signed certificates do not count to the limit. */
            if( grandparent->max_pathlen > 0 &&
 8088e1e:	ebc3 0b0b 	rsb	fp, r3, fp
    }
    else
    {
        /* Look for a grandparent upwards the chain */
        for( grandparent = parent->next;
             grandparent != NULL;
 8088e22:	f1b9 0f00 	cmp.w	r9, #0
 8088e26:	d024      	beq.n	8088e72 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1b6>
             grandparent = grandparent->next )
        {
            /* +2 because the current step is not yet accounted for
             * and because max_pathlen is one higher than it should be.
             * Also self signed certificates do not count to the limit. */
            if( grandparent->max_pathlen > 0 &&
 8088e28:	f8d9 3100 	ldr.w	r3, [r9, #256]	; 0x100
 8088e2c:	2b00      	cmp	r3, #0
 8088e2e:	dd01      	ble.n	8088e34 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x178>
 8088e30:	455b      	cmp	r3, fp
 8088e32:	db08      	blt.n	8088e46 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x18a>
                grandparent->max_pathlen < 2 + path_cnt - self_cnt )
            {
                continue;
            }

            if( x509_crt_check_parent( parent, grandparent,
 8088e34:	fab6 f386 	clz	r3, r6
 8088e38:	2200      	movs	r2, #0
 8088e3a:	095b      	lsrs	r3, r3, #5
 8088e3c:	4649      	mov	r1, r9
 8088e3e:	4638      	mov	r0, r7
 8088e40:	f7ff fd6e 	bl	8088920 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 8088e44:	b110      	cbz	r0, 8088e4c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x190>
            return( ret );
    }
    else
    {
        /* Look for a grandparent upwards the chain */
        for( grandparent = parent->next;
 8088e46:	f8d9 9130 	ldr.w	r9, [r9, #304]	; 0x130
 8088e4a:	e7ea      	b.n	8088e22 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x166>
        /* Is our parent part of the chain or at the top? */
        if( grandparent != NULL )
        {
            ret = x509_crt_verify_child( parent, grandparent, trust_ca, ca_crl,
                                         profile, path_cnt + 1, self_cnt, &parent_flags,
                                         f_vrfy, p_vrfy );
 8088e4c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8088e4e:	f8cd 8000 	str.w	r8, [sp]
 8088e52:	9305      	str	r3, [sp, #20]
 8088e54:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8088e56:	9a06      	ldr	r2, [sp, #24]
 8088e58:	9304      	str	r3, [sp, #16]
 8088e5a:	ab0b      	add	r3, sp, #44	; 0x2c
 8088e5c:	9303      	str	r3, [sp, #12]
 8088e5e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8088e60:	4649      	mov	r1, r9
 8088e62:	9302      	str	r3, [sp, #8]
 8088e64:	1c73      	adds	r3, r6, #1
 8088e66:	9301      	str	r3, [sp, #4]
 8088e68:	4638      	mov	r0, r7
 8088e6a:	4653      	mov	r3, sl
 8088e6c:	f7ff ff26 	bl	8088cbc <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>
 8088e70:	e00f      	b.n	8088e92 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1d6>
        }
        else
        {
            ret = x509_crt_verify_top( parent, trust_ca, ca_crl, profile,
                                       path_cnt + 1, self_cnt, &parent_flags,
                                       f_vrfy, p_vrfy );
 8088e72:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8088e74:	4652      	mov	r2, sl
 8088e76:	9304      	str	r3, [sp, #16]
 8088e78:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8088e7a:	9906      	ldr	r1, [sp, #24]
 8088e7c:	9303      	str	r3, [sp, #12]
 8088e7e:	ab0b      	add	r3, sp, #44	; 0x2c
 8088e80:	9302      	str	r3, [sp, #8]
 8088e82:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8088e84:	9301      	str	r3, [sp, #4]
 8088e86:	1c73      	adds	r3, r6, #1
 8088e88:	9300      	str	r3, [sp, #0]
 8088e8a:	4643      	mov	r3, r8
 8088e8c:	4638      	mov	r0, r7
 8088e8e:	f7ff fe1f 	bl	8088ad0 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>
            if( ret != 0 )
 8088e92:	b978      	cbnz	r0, 8088eb4 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1f8>
                return( ret );
        }
    }

    /* child is verified to be a child of the parent, call verify callback */
    if( NULL != f_vrfy )
 8088e94:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8088e96:	b92b      	cbnz	r3, 8088ea4 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1e8>
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );

    *flags |= parent_flags;
 8088e98:	6822      	ldr	r2, [r4, #0]
 8088e9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    return( 0 );
 8088e9c:	2000      	movs	r0, #0
    /* child is verified to be a child of the parent, call verify callback */
    if( NULL != f_vrfy )
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );

    *flags |= parent_flags;
 8088e9e:	4313      	orrs	r3, r2
 8088ea0:	6023      	str	r3, [r4, #0]

    return( 0 );
 8088ea2:	e007      	b.n	8088eb4 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1f8>
        }
    }

    /* child is verified to be a child of the parent, call verify callback */
    if( NULL != f_vrfy )
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
 8088ea4:	4629      	mov	r1, r5
 8088ea6:	4623      	mov	r3, r4
 8088ea8:	4632      	mov	r2, r6
 8088eaa:	982b      	ldr	r0, [sp, #172]	; 0xac
 8088eac:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8088eae:	47a8      	blx	r5
 8088eb0:	2800      	cmp	r0, #0
 8088eb2:	d0f1      	beq.n	8088e98 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1dc>
            return( ret );

    *flags |= parent_flags;

    return( 0 );
}
 8088eb4:	b01d      	add	sp, #116	; 0x74
 8088eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8088eba:	bf00      	nop
 8088ebc:	ffffd000 	.word	0xffffd000

08088ec0 <mbedtls_x509_crt_verify_with_profile>:
                     mbedtls_x509_crl *ca_crl,
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
 8088ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8088ec4:	b089      	sub	sp, #36	; 0x24
 8088ec6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8088ec8:	4693      	mov	fp, r2
    mbedtls_x509_crt *parent;
    mbedtls_x509_name *name;
    mbedtls_x509_sequence *cur = NULL;
    mbedtls_pk_type_t pk_type;

    *flags = 0;
 8088eca:	2200      	movs	r2, #0
                     mbedtls_x509_crl *ca_crl,
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
 8088ecc:	4605      	mov	r5, r0
 8088ece:	468a      	mov	sl, r1
 8088ed0:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
    mbedtls_x509_crt *parent;
    mbedtls_x509_name *name;
    mbedtls_x509_sequence *cur = NULL;
    mbedtls_pk_type_t pk_type;

    *flags = 0;
 8088ed4:	6022      	str	r2, [r4, #0]

    if( profile == NULL )
 8088ed6:	461f      	mov	r7, r3
 8088ed8:	2b00      	cmp	r3, #0
 8088eda:	d06e      	beq.n	8088fba <mbedtls_x509_crt_verify_with_profile+0xfa>
    {
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
        goto exit;
    }

    if( cn != NULL )
 8088edc:	f1b8 0f00 	cmp.w	r8, #0
 8088ee0:	d048      	beq.n	8088f74 <mbedtls_x509_crt_verify_with_profile+0xb4>
    {
        name = &crt->subject;
        cn_len = strlen( cn );
 8088ee2:	4640      	mov	r0, r8
 8088ee4:	f00a fe91 	bl	8093c0a <strlen>

        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 8088ee8:	f8d5 30f8 	ldr.w	r3, [r5, #248]	; 0xf8
    }

    if( cn != NULL )
    {
        name = &crt->subject;
        cn_len = strlen( cn );
 8088eec:	4681      	mov	r9, r0

        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 8088eee:	069b      	lsls	r3, r3, #26
 8088ef0:	d50d      	bpl.n	8088f0e <mbedtls_x509_crt_verify_with_profile+0x4e>
        {
            cur = &crt->subject_alt_names;
 8088ef2:	f105 06e8 	add.w	r6, r5, #232	; 0xe8

            while( cur != NULL )
            {
                if( cur->buf.len == cn_len &&
 8088ef6:	6873      	ldr	r3, [r6, #4]
 8088ef8:	4599      	cmp	r9, r3
 8088efa:	d12c      	bne.n	8088f56 <mbedtls_x509_crt_verify_with_profile+0x96>
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
 8088efc:	464a      	mov	r2, r9
 8088efe:	68b1      	ldr	r1, [r6, #8]
 8088f00:	4640      	mov	r0, r8
 8088f02:	9307      	str	r3, [sp, #28]
 8088f04:	f7ff f8db 	bl	80880be <_ZL15x509_memcasecmpPKvS0_j>
        {
            cur = &crt->subject_alt_names;

            while( cur != NULL )
            {
                if( cur->buf.len == cn_len &&
 8088f08:	9b07      	ldr	r3, [sp, #28]
 8088f0a:	bb20      	cbnz	r0, 8088f56 <mbedtls_x509_crt_verify_with_profile+0x96>
 8088f0c:	e032      	b.n	8088f74 <mbedtls_x509_crt_verify_with_profile+0xb4>
        goto exit;
    }

    if( cn != NULL )
    {
        name = &crt->subject;
 8088f0e:	f105 066c 	add.w	r6, r5, #108	; 0x6c
        }
        else
        {
            while( name != NULL )
            {
                if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 )
 8088f12:	6872      	ldr	r2, [r6, #4]
 8088f14:	2a03      	cmp	r2, #3
 8088f16:	d118      	bne.n	8088f4a <mbedtls_x509_crt_verify_with_profile+0x8a>
 8088f18:	68b1      	ldr	r1, [r6, #8]
 8088f1a:	4855      	ldr	r0, [pc, #340]	; (8089070 <mbedtls_x509_crt_verify_with_profile+0x1b0>)
 8088f1c:	f00a fe20 	bl	8093b60 <memcmp>
 8088f20:	b998      	cbnz	r0, 8088f4a <mbedtls_x509_crt_verify_with_profile+0x8a>
                {
                    if( name->val.len == cn_len &&
 8088f22:	6933      	ldr	r3, [r6, #16]
 8088f24:	4599      	cmp	r9, r3
 8088f26:	d107      	bne.n	8088f38 <mbedtls_x509_crt_verify_with_profile+0x78>
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
 8088f28:	464a      	mov	r2, r9
 8088f2a:	4641      	mov	r1, r8
 8088f2c:	6970      	ldr	r0, [r6, #20]
 8088f2e:	9307      	str	r3, [sp, #28]
 8088f30:	f7ff f8c5 	bl	80880be <_ZL15x509_memcasecmpPKvS0_j>
        {
            while( name != NULL )
            {
                if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 )
                {
                    if( name->val.len == cn_len &&
 8088f34:	9b07      	ldr	r3, [sp, #28]
 8088f36:	b1e8      	cbz	r0, 8088f74 <mbedtls_x509_crt_verify_with_profile+0xb4>
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
                        break;

                    if( name->val.len > 2 &&
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
 8088f38:	2b02      	cmp	r3, #2
 8088f3a:	d906      	bls.n	8088f4a <mbedtls_x509_crt_verify_with_profile+0x8a>
 8088f3c:	2202      	movs	r2, #2
 8088f3e:	494d      	ldr	r1, [pc, #308]	; (8089074 <mbedtls_x509_crt_verify_with_profile+0x1b4>)
 8088f40:	6970      	ldr	r0, [r6, #20]
 8088f42:	f00a fe0d 	bl	8093b60 <memcmp>
                {
                    if( name->val.len == cn_len &&
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
                        break;

                    if( name->val.len > 2 &&
 8088f46:	2800      	cmp	r0, #0
 8088f48:	d053      	beq.n	8088ff2 <mbedtls_x509_crt_verify_with_profile+0x132>
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
                        x509_check_wildcard( cn, &name->val ) == 0 )
                        break;
                }

                name = name->next;
 8088f4a:	69b6      	ldr	r6, [r6, #24]
            if( cur == NULL )
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
        }
        else
        {
            while( name != NULL )
 8088f4c:	2e00      	cmp	r6, #0
 8088f4e:	d1e0      	bne.n	8088f12 <mbedtls_x509_crt_verify_with_profile+0x52>

                cur = cur->next;
            }

            if( cur == NULL )
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
 8088f50:	2304      	movs	r3, #4
 8088f52:	6023      	str	r3, [r4, #0]
 8088f54:	e00e      	b.n	8088f74 <mbedtls_x509_crt_verify_with_profile+0xb4>
                if( cur->buf.len == cn_len &&
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
                    break;

                if( cur->buf.len > 2 &&
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
 8088f56:	2b02      	cmp	r3, #2
 8088f58:	d947      	bls.n	8088fea <mbedtls_x509_crt_verify_with_profile+0x12a>
 8088f5a:	2202      	movs	r2, #2
 8088f5c:	4945      	ldr	r1, [pc, #276]	; (8089074 <mbedtls_x509_crt_verify_with_profile+0x1b4>)
 8088f5e:	68b0      	ldr	r0, [r6, #8]
 8088f60:	f00a fdfe 	bl	8093b60 <memcmp>
            {
                if( cur->buf.len == cn_len &&
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
                    break;

                if( cur->buf.len > 2 &&
 8088f64:	2800      	cmp	r0, #0
 8088f66:	d140      	bne.n	8088fea <mbedtls_x509_crt_verify_with_profile+0x12a>
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
                    x509_check_wildcard( cn, &cur->buf ) == 0 )
 8088f68:	4631      	mov	r1, r6
 8088f6a:	4640      	mov	r0, r8
 8088f6c:	f7ff f8fd 	bl	808816a <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf>
                if( cur->buf.len == cn_len &&
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
                    break;

                if( cur->buf.len > 2 &&
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
 8088f70:	2800      	cmp	r0, #0
 8088f72:	d13a      	bne.n	8088fea <mbedtls_x509_crt_verify_with_profile+0x12a>
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
        }
    }

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );
 8088f74:	f105 06bc 	add.w	r6, r5, #188	; 0xbc
 8088f78:	4630      	mov	r0, r6
 8088f7a:	f003 ff73 	bl	808ce64 <mbedtls_pk_get_type>
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 8088f7e:	2301      	movs	r3, #1
 8088f80:	1e42      	subs	r2, r0, #1
 8088f82:	4093      	lsls	r3, r2
 8088f84:	687a      	ldr	r2, [r7, #4]
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
        }
    }

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );
 8088f86:	4601      	mov	r1, r0
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 8088f88:	4213      	tst	r3, r2
 8088f8a:	d03a      	beq.n	8089002 <mbedtls_x509_crt_verify_with_profile+0x142>
    pk_type = mbedtls_pk_get_type( &crt->pk );

    if( x509_profile_check_pk_alg( profile, pk_type ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    if( x509_profile_check_key( profile, pk_type, &crt->pk ) != 0 )
 8088f8c:	4632      	mov	r2, r6
 8088f8e:	f107 000c 	add.w	r0, r7, #12
 8088f92:	f7ff f931 	bl	80881f8 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>
 8088f96:	b118      	cbz	r0, 8088fa0 <mbedtls_x509_crt_verify_with_profile+0xe0>
        *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 8088f98:	6823      	ldr	r3, [r4, #0]
 8088f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8088f9e:	6023      	str	r3, [r4, #0]
                     mbedtls_x509_crl *ca_crl,
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
 8088fa0:	4656      	mov	r6, sl

    if( x509_profile_check_key( profile, pk_type, &crt->pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

    /* Look for a parent in trusted CAs */
    for( parent = trust_ca; parent != NULL; parent = parent->next )
 8088fa2:	2e00      	cmp	r6, #0
 8088fa4:	d03d      	beq.n	8089022 <mbedtls_x509_crt_verify_with_profile+0x162>
    {
        if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
 8088fa6:	2301      	movs	r3, #1
 8088fa8:	2200      	movs	r2, #0
 8088faa:	4631      	mov	r1, r6
 8088fac:	4628      	mov	r0, r5
 8088fae:	f7ff fcb7 	bl	8088920 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 8088fb2:	b358      	cbz	r0, 808900c <mbedtls_x509_crt_verify_with_profile+0x14c>

    if( x509_profile_check_key( profile, pk_type, &crt->pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

    /* Look for a parent in trusted CAs */
    for( parent = trust_ca; parent != NULL; parent = parent->next )
 8088fb4:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
 8088fb8:	e7f3      	b.n	8088fa2 <mbedtls_x509_crt_verify_with_profile+0xe2>

    *flags = 0;

    if( profile == NULL )
    {
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
 8088fba:	482f      	ldr	r0, [pc, #188]	; (8089078 <mbedtls_x509_crt_verify_with_profile+0x1b8>)
 8088fbc:	e011      	b.n	8088fe2 <mbedtls_x509_crt_verify_with_profile+0x122>

        /* Are we part of the chain or at the top? */
        if( parent != NULL )
        {
            ret = x509_crt_verify_child( crt, parent, trust_ca, ca_crl, profile,
                                         pathlen, selfsigned, flags, f_vrfy, p_vrfy );
 8088fbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8088fc0:	9002      	str	r0, [sp, #8]
 8088fc2:	9305      	str	r3, [sp, #20]
 8088fc4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8088fc6:	9001      	str	r0, [sp, #4]
 8088fc8:	9304      	str	r3, [sp, #16]
 8088fca:	9403      	str	r4, [sp, #12]
 8088fcc:	9700      	str	r7, [sp, #0]
 8088fce:	465b      	mov	r3, fp
 8088fd0:	4652      	mov	r2, sl
 8088fd2:	4631      	mov	r1, r6
 8088fd4:	4628      	mov	r0, r5
 8088fd6:	f7ff fe71 	bl	8088cbc <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>

exit:
    /* prevent misuse of the vrfy callback - VERIFY_FAILED would be ignored by
     * the SSL module for authmode optional, but non-zero return from the
     * callback means a fatal error so it shouldn't be ignored */
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
 8088fda:	f510 5f1c 	cmn.w	r0, #9984	; 0x2700
 8088fde:	d12e      	bne.n	808903e <mbedtls_x509_crt_verify_with_profile+0x17e>
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;
 8088fe0:	4826      	ldr	r0, [pc, #152]	; (808907c <mbedtls_x509_crt_verify_with_profile+0x1bc>)

    if( ret != 0 )
    {
        *flags = (uint32_t) -1;
 8088fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8088fe6:	6023      	str	r3, [r4, #0]
        return( ret );
 8088fe8:	e03f      	b.n	808906a <mbedtls_x509_crt_verify_with_profile+0x1aa>
                    x509_check_wildcard( cn, &cur->buf ) == 0 )
                {
                    break;
                }

                cur = cur->next;
 8088fea:	68f6      	ldr	r6, [r6, #12]

        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
        {
            cur = &crt->subject_alt_names;

            while( cur != NULL )
 8088fec:	2e00      	cmp	r6, #0
 8088fee:	d182      	bne.n	8088ef6 <mbedtls_x509_crt_verify_with_profile+0x36>
 8088ff0:	e7ae      	b.n	8088f50 <mbedtls_x509_crt_verify_with_profile+0x90>
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
                        break;

                    if( name->val.len > 2 &&
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
                        x509_check_wildcard( cn, &name->val ) == 0 )
 8088ff2:	f106 010c 	add.w	r1, r6, #12
 8088ff6:	4640      	mov	r0, r8
 8088ff8:	f7ff f8b7 	bl	808816a <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf>
                    if( name->val.len == cn_len &&
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
                        break;

                    if( name->val.len > 2 &&
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
 8088ffc:	2800      	cmp	r0, #0
 8088ffe:	d1a4      	bne.n	8088f4a <mbedtls_x509_crt_verify_with_profile+0x8a>
 8089000:	e7b8      	b.n	8088f74 <mbedtls_x509_crt_verify_with_profile+0xb4>

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );

    if( x509_profile_check_pk_alg( profile, pk_type ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 8089002:	6823      	ldr	r3, [r4, #0]
 8089004:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8089008:	6023      	str	r3, [r4, #0]
 808900a:	e7bf      	b.n	8088f8c <mbedtls_x509_crt_verify_with_profile+0xcc>
    }

    if( parent != NULL )
    {
        ret = x509_crt_verify_top( crt, parent, ca_crl, profile,
                                   pathlen, selfsigned, flags, f_vrfy, p_vrfy );
 808900c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808900e:	9402      	str	r4, [sp, #8]
 8089010:	9304      	str	r3, [sp, #16]
 8089012:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8089014:	9001      	str	r0, [sp, #4]
 8089016:	9303      	str	r3, [sp, #12]
 8089018:	9000      	str	r0, [sp, #0]
 808901a:	463b      	mov	r3, r7
 808901c:	465a      	mov	r2, fp
 808901e:	4631      	mov	r1, r6
 8089020:	e01f      	b.n	8089062 <mbedtls_x509_crt_verify_with_profile+0x1a2>
            goto exit;
    }
    else
    {
        /* Look for a parent upwards the chain */
        for( parent = crt->next; parent != NULL; parent = parent->next )
 8089022:	f8d5 6130 	ldr.w	r6, [r5, #304]	; 0x130
 8089026:	b196      	cbz	r6, 808904e <mbedtls_x509_crt_verify_with_profile+0x18e>
            if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
 8089028:	2301      	movs	r3, #1
 808902a:	2200      	movs	r2, #0
 808902c:	4631      	mov	r1, r6
 808902e:	4628      	mov	r0, r5
 8089030:	f7ff fc76 	bl	8088920 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 8089034:	2800      	cmp	r0, #0
 8089036:	d0c2      	beq.n	8088fbe <mbedtls_x509_crt_verify_with_profile+0xfe>
            goto exit;
    }
    else
    {
        /* Look for a parent upwards the chain */
        for( parent = crt->next; parent != NULL; parent = parent->next )
 8089038:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
 808903c:	e7f3      	b.n	8089026 <mbedtls_x509_crt_verify_with_profile+0x166>
     * the SSL module for authmode optional, but non-zero return from the
     * callback means a fatal error so it shouldn't be ignored */
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;

    if( ret != 0 )
 808903e:	2800      	cmp	r0, #0
 8089040:	d1cf      	bne.n	8088fe2 <mbedtls_x509_crt_verify_with_profile+0x122>
    {
        *flags = (uint32_t) -1;
        return( ret );
    }

    if( *flags != 0 )
 8089042:	6823      	ldr	r3, [r4, #0]
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );

    return( 0 );
 8089044:	480e      	ldr	r0, [pc, #56]	; (8089080 <mbedtls_x509_crt_verify_with_profile+0x1c0>)
 8089046:	2b00      	cmp	r3, #0
 8089048:	bf08      	it	eq
 808904a:	2000      	moveq	r0, #0
 808904c:	e00d      	b.n	808906a <mbedtls_x509_crt_verify_with_profile+0x1aa>
                goto exit;
        }
        else
        {
            ret = x509_crt_verify_top( crt, trust_ca, ca_crl, profile,
                                       pathlen, selfsigned, flags, f_vrfy, p_vrfy );
 808904e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8089050:	465a      	mov	r2, fp
 8089052:	9304      	str	r3, [sp, #16]
 8089054:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8089056:	4651      	mov	r1, sl
 8089058:	9303      	str	r3, [sp, #12]
 808905a:	463b      	mov	r3, r7
 808905c:	9402      	str	r4, [sp, #8]
 808905e:	9601      	str	r6, [sp, #4]
 8089060:	9600      	str	r6, [sp, #0]
 8089062:	4628      	mov	r0, r5
 8089064:	f7ff fd34 	bl	8088ad0 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>
 8089068:	e7b7      	b.n	8088fda <mbedtls_x509_crt_verify_with_profile+0x11a>

    if( *flags != 0 )
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );

    return( 0 );
}
 808906a:	b009      	add	sp, #36	; 0x24
 808906c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8089070:	08094874 	.word	0x08094874
 8089074:	080959ae 	.word	0x080959ae
 8089078:	ffffd800 	.word	0xffffd800
 808907c:	ffffd000 	.word	0xffffd000
 8089080:	ffffd900 	.word	0xffffd900

08089084 <mbedtls_x509_crt_init>:
/*
 * Initialize a certificate chain
 */
void mbedtls_x509_crt_init( mbedtls_x509_crt *crt )
{
    memset( crt, 0, sizeof(mbedtls_x509_crt) );
 8089084:	f44f 729a 	mov.w	r2, #308	; 0x134
 8089088:	2100      	movs	r1, #0
 808908a:	f00a bd9e 	b.w	8093bca <memset>

0808908e <mbedtls_x509_crt_free>:

/*
 * Unallocate all certificate data
 */
void mbedtls_x509_crt_free( mbedtls_x509_crt *crt )
{
 808908e:	b570      	push	{r4, r5, r6, lr}
    mbedtls_x509_name *name_cur;
    mbedtls_x509_name *name_prv;
    mbedtls_x509_sequence *seq_cur;
    mbedtls_x509_sequence *seq_prv;

    if( crt == NULL )
 8089090:	4605      	mov	r5, r0
 8089092:	2800      	cmp	r0, #0
 8089094:	d053      	beq.n	808913e <mbedtls_x509_crt_free+0xb0>
 8089096:	4604      	mov	r4, r0
        return;

    do
    {
        mbedtls_pk_free( &cert_cur->pk );
 8089098:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 808909c:	f003 fdc5 	bl	808cc2a <mbedtls_pk_free>

#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
#endif

        name_cur = cert_cur->issuer.next;
 80890a0:	6e62      	ldr	r2, [r4, #100]	; 0x64
        while( name_cur != NULL )
 80890a2:	b14a      	cbz	r2, 80890b8 <mbedtls_x509_crt_free+0x2a>
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 80890a4:	4610      	mov	r0, r2
 80890a6:	2120      	movs	r1, #32

        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
 80890a8:	6996      	ldr	r6, [r2, #24]
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 80890aa:	f7ff f800 	bl	80880ae <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( name_prv );
 80890ae:	4610      	mov	r0, r2
 80890b0:	f008 fa44 	bl	809153c <free>

        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
 80890b4:	4632      	mov	r2, r6
#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
#endif

        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
 80890b6:	e7f4      	b.n	80890a2 <mbedtls_x509_crt_free+0x14>
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        name_cur = cert_cur->subject.next;
 80890b8:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
        while( name_cur != NULL )
 80890bc:	b14a      	cbz	r2, 80890d2 <mbedtls_x509_crt_free+0x44>
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 80890be:	4610      	mov	r0, r2
 80890c0:	2120      	movs	r1, #32

        name_cur = cert_cur->subject.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
 80890c2:	6996      	ldr	r6, [r2, #24]
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 80890c4:	f7fe fff3 	bl	80880ae <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( name_prv );
 80890c8:	4610      	mov	r0, r2
 80890ca:	f008 fa37 	bl	809153c <free>

        name_cur = cert_cur->subject.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
 80890ce:	4632      	mov	r2, r6
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        name_cur = cert_cur->subject.next;
        while( name_cur != NULL )
 80890d0:	e7f4      	b.n	80890bc <mbedtls_x509_crt_free+0x2e>
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        seq_cur = cert_cur->ext_key_usage.next;
 80890d2:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
        while( seq_cur != NULL )
 80890d6:	b14a      	cbz	r2, 80890ec <mbedtls_x509_crt_free+0x5e>
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 80890d8:	4610      	mov	r0, r2
 80890da:	2110      	movs	r1, #16

        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
 80890dc:	68d6      	ldr	r6, [r2, #12]
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 80890de:	f7fe ffe6 	bl	80880ae <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( seq_prv );
 80890e2:	4610      	mov	r0, r2
 80890e4:	f008 fa2a 	bl	809153c <free>

        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
 80890e8:	4632      	mov	r2, r6
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
 80890ea:	e7f4      	b.n	80890d6 <mbedtls_x509_crt_free+0x48>
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        seq_cur = cert_cur->subject_alt_names.next;
 80890ec:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
        while( seq_cur != NULL )
 80890f0:	b14a      	cbz	r2, 8089106 <mbedtls_x509_crt_free+0x78>
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 80890f2:	4610      	mov	r0, r2
 80890f4:	2110      	movs	r1, #16

        seq_cur = cert_cur->subject_alt_names.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
 80890f6:	68d6      	ldr	r6, [r2, #12]
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 80890f8:	f7fe ffd9 	bl	80880ae <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( seq_prv );
 80890fc:	4610      	mov	r0, r2
 80890fe:	f008 fa1d 	bl	809153c <free>

        seq_cur = cert_cur->subject_alt_names.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
 8089102:	4632      	mov	r2, r6
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        seq_cur = cert_cur->subject_alt_names.next;
        while( seq_cur != NULL )
 8089104:	e7f4      	b.n	80890f0 <mbedtls_x509_crt_free+0x62>
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        if( cert_cur->raw.p != NULL )
 8089106:	68a0      	ldr	r0, [r4, #8]
 8089108:	b128      	cbz	r0, 8089116 <mbedtls_x509_crt_free+0x88>
        {
            mbedtls_zeroize( cert_cur->raw.p, cert_cur->raw.len );
 808910a:	6861      	ldr	r1, [r4, #4]
 808910c:	f7fe ffcf 	bl	80880ae <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( cert_cur->raw.p );
 8089110:	68a0      	ldr	r0, [r4, #8]
 8089112:	f008 fa13 	bl	809153c <free>
        }

        cert_cur = cert_cur->next;
 8089116:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    }
    while( cert_cur != NULL );
 808911a:	2c00      	cmp	r4, #0
 808911c:	d1bc      	bne.n	8089098 <mbedtls_x509_crt_free+0xa>
 808911e:	462a      	mov	r2, r5
    do
    {
        cert_prv = cert_cur;
        cert_cur = cert_cur->next;

        mbedtls_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 8089120:	f44f 719a 	mov.w	r1, #308	; 0x134
 8089124:	4610      	mov	r0, r2

    cert_cur = crt;
    do
    {
        cert_prv = cert_cur;
        cert_cur = cert_cur->next;
 8089126:	f8d2 4130 	ldr.w	r4, [r2, #304]	; 0x130

        mbedtls_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 808912a:	f7fe ffc0 	bl	80880ae <_ZL15mbedtls_zeroizePvj>
        if( cert_prv != crt )
 808912e:	42aa      	cmp	r2, r5
 8089130:	d002      	beq.n	8089138 <mbedtls_x509_crt_free+0xaa>
            mbedtls_free( cert_prv );
 8089132:	4610      	mov	r0, r2
 8089134:	f008 fa02 	bl	809153c <free>
    }
    while( cert_cur != NULL );
 8089138:	4622      	mov	r2, r4
 808913a:	2c00      	cmp	r4, #0
 808913c:	d1f0      	bne.n	8089120 <mbedtls_x509_crt_free+0x92>
 808913e:	bd70      	pop	{r4, r5, r6, pc}

08089140 <mbedtls_x509_crt_parse_der>:
 * Parse one X.509 certificate in DER format from a buffer and add them to a
 * chained list
 */
int mbedtls_x509_crt_parse_der( mbedtls_x509_crt *chain, const unsigned char *buf,
                        size_t buflen )
{
 8089140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8089144:	4688      	mov	r8, r1
 8089146:	b09b      	sub	sp, #108	; 0x6c
 8089148:	4615      	mov	r5, r2
    mbedtls_x509_crt *crt = chain, *prev = NULL;

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
 808914a:	4682      	mov	sl, r0
 808914c:	2800      	cmp	r0, #0
 808914e:	f000 812c 	beq.w	80893aa <mbedtls_x509_crt_parse_der+0x26a>
 8089152:	2900      	cmp	r1, #0
 8089154:	f000 8129 	beq.w	80893aa <mbedtls_x509_crt_parse_der+0x26a>
 8089158:	4604      	mov	r4, r0
 808915a:	f04f 0900 	mov.w	r9, #0
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    while( crt->version != 0 && crt->next != NULL )
 808915e:	69a3      	ldr	r3, [r4, #24]
 8089160:	b1a3      	cbz	r3, 808918c <mbedtls_x509_crt_parse_der+0x4c>
 8089162:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8089166:	46a1      	mov	r9, r4
 8089168:	b10b      	cbz	r3, 808916e <mbedtls_x509_crt_parse_der+0x2e>
 808916a:	461c      	mov	r4, r3
 808916c:	e7f7      	b.n	808915e <mbedtls_x509_crt_parse_der+0x1e>
    /*
     * Add new certificate on the end of the chain if needed.
     */
    if( crt->version != 0 && crt->next == NULL )
    {
        crt->next = (mbedtls_x509_crt *)mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );
 808916e:	f44f 719a 	mov.w	r1, #308	; 0x134
 8089172:	2001      	movs	r0, #1
 8089174:	f00a fcde 	bl	8093b34 <calloc>
 8089178:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130

        if( crt->next == NULL )
 808917c:	2800      	cmp	r0, #0
 808917e:	f000 8116 	beq.w	80893ae <mbedtls_x509_crt_parse_der+0x26e>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );

        prev = crt;
        mbedtls_x509_crt_init( crt->next );
 8089182:	f7ff ff7f 	bl	8089084 <mbedtls_x509_crt_init>
 8089186:	46a1      	mov	r9, r4
        crt = crt->next;
 8089188:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    int ret;
    size_t len;
    unsigned char *p, *end, *crt_end;
    mbedtls_x509_buf sig_params1, sig_params2, sig_oid2;

    memset( &sig_params1, 0, sizeof( mbedtls_x509_buf ) );
 808918c:	2300      	movs	r3, #0
 808918e:	930b      	str	r3, [sp, #44]	; 0x2c
 8089190:	930c      	str	r3, [sp, #48]	; 0x30
 8089192:	930d      	str	r3, [sp, #52]	; 0x34
    memset( &sig_params2, 0, sizeof( mbedtls_x509_buf ) );
 8089194:	930e      	str	r3, [sp, #56]	; 0x38
 8089196:	930f      	str	r3, [sp, #60]	; 0x3c
 8089198:	9310      	str	r3, [sp, #64]	; 0x40
    memset( &sig_oid2, 0, sizeof( mbedtls_x509_buf ) );
 808919a:	9311      	str	r3, [sp, #68]	; 0x44
 808919c:	9312      	str	r3, [sp, #72]	; 0x48
 808919e:	9313      	str	r3, [sp, #76]	; 0x4c

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
 80891a0:	2c00      	cmp	r4, #0
 80891a2:	f000 80e9 	beq.w	8089378 <mbedtls_x509_crt_parse_der+0x238>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    // Use the original buffer until we figure out actual length
    p = (unsigned char*) buf;
    len = buflen;
 80891a6:	ae1a      	add	r6, sp, #104	; 0x68
 80891a8:	f846 5d54 	str.w	r5, [r6, #-84]!
    end = p + len;
 80891ac:	eb08 0b05 	add.w	fp, r8, r5
     * Certificate  ::=  SEQUENCE  {
     *      tbsCertificate       TBSCertificate,
     *      signatureAlgorithm   AlgorithmIdentifier,
     *      signatureValue       BIT STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80891b0:	2330      	movs	r3, #48	; 0x30
 80891b2:	4632      	mov	r2, r6
 80891b4:	4659      	mov	r1, fp
 80891b6:	a806      	add	r0, sp, #24
     */
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    // Use the original buffer until we figure out actual length
    p = (unsigned char*) buf;
 80891b8:	f8cd 8018 	str.w	r8, [sp, #24]
     * Certificate  ::=  SEQUENCE  {
     *      tbsCertificate       TBSCertificate,
     *      signatureAlgorithm   AlgorithmIdentifier,
     *      signatureValue       BIT STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80891bc:	f7fa fc78 	bl	8083ab0 <mbedtls_asn1_get_tag>
 80891c0:	b120      	cbz	r0, 80891cc <mbedtls_x509_crt_parse_der+0x8c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 80891c2:	4620      	mov	r0, r4
 80891c4:	f7ff ff63 	bl	808908e <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT );
 80891c8:	4da3      	ldr	r5, [pc, #652]	; (8089458 <mbedtls_x509_crt_parse_der+0x318>)
 80891ca:	e0e1      	b.n	8089390 <mbedtls_x509_crt_parse_der+0x250>
    }

    if( len > (size_t) ( end - p ) )
 80891cc:	9d06      	ldr	r5, [sp, #24]
 80891ce:	9f05      	ldr	r7, [sp, #20]
 80891d0:	ebc5 0b0b 	rsb	fp, r5, fp
 80891d4:	45bb      	cmp	fp, r7
 80891d6:	f0c0 80ca 	bcc.w	808936e <mbedtls_x509_crt_parse_der+0x22e>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    }
    crt_end = p + len;

    // Create and populate a new buffer for the raw field
    crt->raw.len = crt_end - buf;
 80891da:	443d      	add	r5, r7
 80891dc:	ebc8 0505 	rsb	r5, r8, r5
 80891e0:	6065      	str	r5, [r4, #4]
    crt->raw.p = p = (unsigned char*)mbedtls_calloc( 1, crt->raw.len );
 80891e2:	4629      	mov	r1, r5
 80891e4:	2001      	movs	r0, #1
 80891e6:	f00a fca5 	bl	8093b34 <calloc>
 80891ea:	4683      	mov	fp, r0
 80891ec:	9006      	str	r0, [sp, #24]
 80891ee:	60a0      	str	r0, [r4, #8]
    if( p == NULL )
 80891f0:	2800      	cmp	r0, #0
 80891f2:	f000 80c3 	beq.w	808937c <mbedtls_x509_crt_parse_der+0x23c>
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );
 80891f6:	462a      	mov	r2, r5

    // Direct pointers to the new buffer
    p += crt->raw.len - len;
 80891f8:	1bed      	subs	r5, r5, r7
 80891fa:	445d      	add	r5, fp
    crt->raw.len = crt_end - buf;
    crt->raw.p = p = (unsigned char*)mbedtls_calloc( 1, crt->raw.len );
    if( p == NULL )
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );
 80891fc:	4641      	mov	r1, r8

    // Direct pointers to the new buffer
    p += crt->raw.len - len;
    end = crt_end = p + len;
 80891fe:	442f      	add	r7, r5
    crt->raw.len = crt_end - buf;
    crt->raw.p = p = (unsigned char*)mbedtls_calloc( 1, crt->raw.len );
    if( p == NULL )
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );
 8089200:	f00a fcbd 	bl	8093b7e <memcpy>
    end = crt_end = p + len;

    /*
     * TBSCertificate  ::=  SEQUENCE  {
     */
    crt->tbs.p = p;
 8089204:	6165      	str	r5, [r4, #20]

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8089206:	2330      	movs	r3, #48	; 0x30
 8089208:	4632      	mov	r2, r6
 808920a:	4639      	mov	r1, r7
 808920c:	a806      	add	r0, sp, #24
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );

    // Direct pointers to the new buffer
    p += crt->raw.len - len;
 808920e:	9506      	str	r5, [sp, #24]
    /*
     * TBSCertificate  ::=  SEQUENCE  {
     */
    crt->tbs.p = p;

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8089210:	f7fa fc4e 	bl	8083ab0 <mbedtls_asn1_get_tag>
 8089214:	4680      	mov	r8, r0
 8089216:	b128      	cbz	r0, 8089224 <mbedtls_x509_crt_parse_der+0xe4>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 8089218:	4620      	mov	r0, r4
 808921a:	f7ff ff38 	bl	808908e <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 808921e:	f5a8 5506 	sub.w	r5, r8, #8576	; 0x2180
 8089222:	e0b2      	b.n	808938a <mbedtls_x509_crt_parse_der+0x24a>
    }

    end = p + len;
 8089224:	9b05      	ldr	r3, [sp, #20]
 8089226:	9e06      	ldr	r6, [sp, #24]
                             int *ver )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8089228:	aa17      	add	r2, sp, #92	; 0x5c
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    end = p + len;
 808922a:	441e      	add	r6, r3
    crt->tbs.len = end - crt->tbs.p;
 808922c:	6963      	ldr	r3, [r4, #20]
                             int *ver )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 808922e:	4631      	mov	r1, r6
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    end = p + len;
    crt->tbs.len = end - crt->tbs.p;
 8089230:	1af3      	subs	r3, r6, r3
 8089232:	6123      	str	r3, [r4, #16]
                             int *ver )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8089234:	a806      	add	r0, sp, #24
 8089236:	23a0      	movs	r3, #160	; 0xa0
 8089238:	f7fa fc3a 	bl	8083ab0 <mbedtls_asn1_get_tag>
 808923c:	4605      	mov	r5, r0
 808923e:	b128      	cbz	r0, 808924c <mbedtls_x509_crt_parse_der+0x10c>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8089240:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8089244:	d114      	bne.n	8089270 <mbedtls_x509_crt_parse_der+0x130>
        {
            *ver = 0;
 8089246:	f8c4 8018 	str.w	r8, [r4, #24]
 808924a:	e014      	b.n	8089276 <mbedtls_x509_crt_parse_der+0x136>
        }

        return( ret );
    }

    end = *p + len;
 808924c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808924e:	9d06      	ldr	r5, [sp, #24]

    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
 8089250:	f104 0218 	add.w	r2, r4, #24
        }

        return( ret );
    }

    end = *p + len;
 8089254:	441d      	add	r5, r3

    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
 8089256:	4629      	mov	r1, r5
 8089258:	a806      	add	r0, sp, #24
 808925a:	f7fa fc56 	bl	8083b0a <mbedtls_asn1_get_int>
 808925e:	b110      	cbz	r0, 8089266 <mbedtls_x509_crt_parse_der+0x126>
        return( MBEDTLS_ERR_X509_INVALID_VERSION + ret );
 8089260:	f5a0 5508 	sub.w	r5, r0, #8704	; 0x2200
 8089264:	e004      	b.n	8089270 <mbedtls_x509_crt_parse_der+0x130>

    if( *p != end )
 8089266:	9b06      	ldr	r3, [sp, #24]
 8089268:	429d      	cmp	r5, r3
 808926a:	d004      	beq.n	8089276 <mbedtls_x509_crt_parse_der+0x136>
        return( MBEDTLS_ERR_X509_INVALID_VERSION +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 808926c:	4d7b      	ldr	r5, [pc, #492]	; (808945c <mbedtls_x509_crt_parse_der+0x31c>)
 808926e:	e0d6      	b.n	808941e <mbedtls_x509_crt_parse_der+0x2de>
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
 8089270:	2d00      	cmp	r5, #0
 8089272:	f040 80d4 	bne.w	808941e <mbedtls_x509_crt_parse_der+0x2de>
     *
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
 8089276:	f104 021c 	add.w	r2, r4, #28
 808927a:	4631      	mov	r1, r6
 808927c:	a806      	add	r0, sp, #24
 808927e:	f7fd fb85 	bl	808698c <mbedtls_x509_get_serial>
 8089282:	4605      	mov	r5, r0
 8089284:	2800      	cmp	r0, #0
 8089286:	f040 80ca 	bne.w	808941e <mbedtls_x509_crt_parse_der+0x2de>
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
        ( ret = mbedtls_x509_get_alg(      &p, end, &crt->sig_oid,
 808928a:	f104 0828 	add.w	r8, r4, #40	; 0x28
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
 808928e:	ab0b      	add	r3, sp, #44	; 0x2c
 8089290:	4642      	mov	r2, r8
 8089292:	4631      	mov	r1, r6
 8089294:	a806      	add	r0, sp, #24
 8089296:	f7fd fba1 	bl	80869dc <mbedtls_x509_get_alg>
 808929a:	4605      	mov	r5, r0
 808929c:	2800      	cmp	r0, #0
 808929e:	f040 80be 	bne.w	808941e <mbedtls_x509_crt_parse_der+0x2de>
 80892a2:	e086      	b.n	80893b2 <mbedtls_x509_crt_parse_der+0x272>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
    }

    crt->version++;
 80892a4:	3301      	adds	r3, #1
 80892a6:	61a3      	str	r3, [r4, #24]

    if( ( ret = mbedtls_x509_get_sig_alg( &crt->sig_oid, &sig_params1,
 80892a8:	f504 7396 	add.w	r3, r4, #300	; 0x12c
 80892ac:	9300      	str	r3, [sp, #0]
 80892ae:	f504 7294 	add.w	r2, r4, #296	; 0x128
 80892b2:	f204 1329 	addw	r3, r4, #297	; 0x129
 80892b6:	a90b      	add	r1, sp, #44	; 0x2c
 80892b8:	4640      	mov	r0, r8
 80892ba:	f7fd fce3 	bl	8086c84 <mbedtls_x509_get_sig_alg>
 80892be:	4605      	mov	r5, r0
 80892c0:	2800      	cmp	r0, #0
 80892c2:	f040 80ac 	bne.w	808941e <mbedtls_x509_crt_parse_der+0x2de>
    }

    /*
     * issuer               Name
     */
    crt->issuer_raw.p = p;
 80892c6:	9b06      	ldr	r3, [sp, #24]

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80892c8:	aa05      	add	r2, sp, #20
    }

    /*
     * issuer               Name
     */
    crt->issuer_raw.p = p;
 80892ca:	63e3      	str	r3, [r4, #60]	; 0x3c

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80892cc:	4631      	mov	r1, r6
 80892ce:	2330      	movs	r3, #48	; 0x30
 80892d0:	a806      	add	r0, sp, #24
 80892d2:	f7fa fbed 	bl	8083ab0 <mbedtls_asn1_get_tag>
 80892d6:	4605      	mov	r5, r0
 80892d8:	2800      	cmp	r0, #0
 80892da:	d151      	bne.n	8089380 <mbedtls_x509_crt_parse_der+0x240>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( ( ret = mbedtls_x509_get_name( &p, p + len, &crt->issuer ) ) != 0 )
 80892dc:	9b05      	ldr	r3, [sp, #20]
 80892de:	9906      	ldr	r1, [sp, #24]
 80892e0:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 80892e4:	4419      	add	r1, r3
 80892e6:	a806      	add	r0, sp, #24
 80892e8:	f7fd fb80 	bl	80869ec <mbedtls_x509_get_name>
 80892ec:	4605      	mov	r5, r0
 80892ee:	2800      	cmp	r0, #0
 80892f0:	f040 8095 	bne.w	808941e <mbedtls_x509_crt_parse_der+0x2de>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->issuer_raw.len = p - crt->issuer_raw.p;
 80892f4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80892f6:	9b06      	ldr	r3, [sp, #24]
                           mbedtls_x509_time *to )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80892f8:	4631      	mov	r1, r6
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->issuer_raw.len = p - crt->issuer_raw.p;
 80892fa:	1a9b      	subs	r3, r3, r2
 80892fc:	63a3      	str	r3, [r4, #56]	; 0x38
                           mbedtls_x509_time *to )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80892fe:	aa17      	add	r2, sp, #92	; 0x5c
 8089300:	2330      	movs	r3, #48	; 0x30
 8089302:	a806      	add	r0, sp, #24
 8089304:	f7fa fbd4 	bl	8083ab0 <mbedtls_asn1_get_tag>
 8089308:	2800      	cmp	r0, #0
 808930a:	d05b      	beq.n	80893c4 <mbedtls_x509_crt_parse_der+0x284>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
 808930c:	f5a0 5510 	sub.w	r5, r0, #9216	; 0x2400
     * Validity ::= SEQUENCE {
     *      notBefore      Time,
     *      notAfter       Time }
     *
     */
    if( ( ret = x509_get_dates( &p, end, &crt->valid_from,
 8089310:	2d00      	cmp	r5, #0
 8089312:	f040 8084 	bne.w	808941e <mbedtls_x509_crt_parse_der+0x2de>
    }

    /*
     * subject              Name
     */
    crt->subject_raw.p = p;
 8089316:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 808931a:	f85b 3d50 	ldr.w	r3, [fp, #-80]!

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 808931e:	aa05      	add	r2, sp, #20
    }

    /*
     * subject              Name
     */
    crt->subject_raw.p = p;
 8089320:	64a3      	str	r3, [r4, #72]	; 0x48

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8089322:	4631      	mov	r1, r6
 8089324:	2330      	movs	r3, #48	; 0x30
 8089326:	4658      	mov	r0, fp
 8089328:	f7fa fbc2 	bl	8083ab0 <mbedtls_asn1_get_tag>
 808932c:	4605      	mov	r5, r0
 808932e:	bb38      	cbnz	r0, 8089380 <mbedtls_x509_crt_parse_der+0x240>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
 8089330:	9b05      	ldr	r3, [sp, #20]
 8089332:	2b00      	cmp	r3, #0
 8089334:	d15f      	bne.n	80893f6 <mbedtls_x509_crt_parse_der+0x2b6>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->subject_raw.len = p - crt->subject_raw.p;
 8089336:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8089338:	9b06      	ldr	r3, [sp, #24]

    /*
     * SubjectPublicKeyInfo
     */
    if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
 808933a:	4631      	mov	r1, r6
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->subject_raw.len = p - crt->subject_raw.p;
 808933c:	1a9b      	subs	r3, r3, r2
 808933e:	6463      	str	r3, [r4, #68]	; 0x44

    /*
     * SubjectPublicKeyInfo
     */
    if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
 8089340:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 8089344:	4658      	mov	r0, fp
 8089346:	f7fd fff3 	bl	8087330 <mbedtls_pk_parse_subpubkey>
 808934a:	4605      	mov	r5, r0
 808934c:	2800      	cmp	r0, #0
 808934e:	d166      	bne.n	808941e <mbedtls_x509_crt_parse_der+0x2de>
     *  subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,
     *                       -- If present, version shall be v2 or v3
     *  extensions      [3]  EXPLICIT Extensions OPTIONAL
     *                       -- If present, version shall be v3
     */
    if( crt->version == 2 || crt->version == 3 )
 8089350:	69a3      	ldr	r3, [r4, #24]
 8089352:	3b02      	subs	r3, #2
 8089354:	2b01      	cmp	r3, #1
 8089356:	d958      	bls.n	808940a <mbedtls_x509_crt_parse_der+0x2ca>
            mbedtls_x509_crt_free( crt );
            return( ret );
        }
    }

    if( crt->version == 2 || crt->version == 3 )
 8089358:	69a3      	ldr	r3, [r4, #24]
 808935a:	3b02      	subs	r3, #2
 808935c:	2b01      	cmp	r3, #1
 808935e:	d962      	bls.n	8089426 <mbedtls_x509_crt_parse_der+0x2e6>
            return( ret );
        }
    }

#if !defined(MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3)
    if( crt->version == 3 )
 8089360:	69a3      	ldr	r3, [r4, #24]
 8089362:	2b03      	cmp	r3, #3
 8089364:	d06a      	beq.n	808943c <mbedtls_x509_crt_parse_der+0x2fc>
            mbedtls_x509_crt_free( crt );
            return( ret );
        }
    }

    if( p != end )
 8089366:	9b06      	ldr	r3, [sp, #24]
 8089368:	429e      	cmp	r6, r3
 808936a:	f000 811e 	beq.w	80895aa <mbedtls_x509_crt_parse_der+0x46a>
        return( ret );
    }

    if( p != end )
    {
        mbedtls_x509_crt_free( crt );
 808936e:	4620      	mov	r0, r4
 8089370:	f7ff fe8d 	bl	808908e <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8089374:	4d3a      	ldr	r5, [pc, #232]	; (8089460 <mbedtls_x509_crt_parse_der+0x320>)
 8089376:	e00b      	b.n	8089390 <mbedtls_x509_crt_parse_der+0x250>

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8089378:	4d3a      	ldr	r5, [pc, #232]	; (8089464 <mbedtls_x509_crt_parse_der+0x324>)
 808937a:	e009      	b.n	8089390 <mbedtls_x509_crt_parse_der+0x250>

    // Create and populate a new buffer for the raw field
    crt->raw.len = crt_end - buf;
    crt->raw.p = p = (unsigned char*)mbedtls_calloc( 1, crt->raw.len );
    if( p == NULL )
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 808937c:	4d3a      	ldr	r5, [pc, #232]	; (8089468 <mbedtls_x509_crt_parse_der+0x328>)
 808937e:	e007      	b.n	8089390 <mbedtls_x509_crt_parse_der+0x250>
    crt->subject_raw.p = p;

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 8089380:	4620      	mov	r0, r4
 8089382:	f7ff fe84 	bl	808908e <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 8089386:	f5a5 5506 	sub.w	r5, r5, #8576	; 0x2180
        prev = crt;
        mbedtls_x509_crt_init( crt->next );
        crt = crt->next;
    }

    if( ( ret = x509_crt_parse_der_core( crt, buf, buflen ) ) != 0 )
 808938a:	2d00      	cmp	r5, #0
 808938c:	f000 8204 	beq.w	8089798 <mbedtls_x509_crt_parse_der+0x658>
    {
        if( prev )
 8089390:	f1b9 0f00 	cmp.w	r9, #0
 8089394:	d002      	beq.n	808939c <mbedtls_x509_crt_parse_der+0x25c>
            prev->next = NULL;
 8089396:	2300      	movs	r3, #0
 8089398:	f8c9 3130 	str.w	r3, [r9, #304]	; 0x130

        if( crt != chain )
 808939c:	4554      	cmp	r4, sl
 808939e:	f000 81fb 	beq.w	8089798 <mbedtls_x509_crt_parse_der+0x658>
            mbedtls_free( crt );
 80893a2:	4620      	mov	r0, r4
 80893a4:	f008 f8ca 	bl	809153c <free>
 80893a8:	e1f6      	b.n	8089798 <mbedtls_x509_crt_parse_der+0x658>

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 80893aa:	4d2e      	ldr	r5, [pc, #184]	; (8089464 <mbedtls_x509_crt_parse_der+0x324>)
 80893ac:	e1f4      	b.n	8089798 <mbedtls_x509_crt_parse_der+0x658>
    if( crt->version != 0 && crt->next == NULL )
    {
        crt->next = (mbedtls_x509_crt *)mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );

        if( crt->next == NULL )
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 80893ae:	4d2e      	ldr	r5, [pc, #184]	; (8089468 <mbedtls_x509_crt_parse_der+0x328>)
 80893b0:	e1f2      	b.n	8089798 <mbedtls_x509_crt_parse_der+0x658>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->version < 0 || crt->version > 2 )
 80893b2:	69a3      	ldr	r3, [r4, #24]
 80893b4:	2b02      	cmp	r3, #2
 80893b6:	f67f af75 	bls.w	80892a4 <mbedtls_x509_crt_parse_der+0x164>
    {
        mbedtls_x509_crt_free( crt );
 80893ba:	4620      	mov	r0, r4
 80893bc:	f7ff fe67 	bl	808908e <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
 80893c0:	4d2a      	ldr	r5, [pc, #168]	; (808946c <mbedtls_x509_crt_parse_der+0x32c>)
 80893c2:	e7e5      	b.n	8089390 <mbedtls_x509_crt_parse_der+0x250>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );

    end = *p + len;
 80893c4:	9a06      	ldr	r2, [sp, #24]
 80893c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c

    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
 80893c8:	a806      	add	r0, sp, #24

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );

    end = *p + len;
 80893ca:	eb02 0b03 	add.w	fp, r2, r3

    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
 80893ce:	4659      	mov	r1, fp
 80893d0:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 80893d4:	f7fd fb82 	bl	8086adc <mbedtls_x509_get_time>
 80893d8:	b958      	cbnz	r0, 80893f2 <mbedtls_x509_crt_parse_der+0x2b2>
        return( ret );

    if( ( ret = mbedtls_x509_get_time( p, end, to ) ) != 0 )
 80893da:	f104 02a4 	add.w	r2, r4, #164	; 0xa4
 80893de:	4659      	mov	r1, fp
 80893e0:	a806      	add	r0, sp, #24
 80893e2:	f7fd fb7b 	bl	8086adc <mbedtls_x509_get_time>
 80893e6:	b920      	cbnz	r0, 80893f2 <mbedtls_x509_crt_parse_der+0x2b2>
        return( ret );

    if( *p != end )
 80893e8:	9b06      	ldr	r3, [sp, #24]
 80893ea:	459b      	cmp	fp, r3
 80893ec:	d093      	beq.n	8089316 <mbedtls_x509_crt_parse_der+0x1d6>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80893ee:	4d20      	ldr	r5, [pc, #128]	; (8089470 <mbedtls_x509_crt_parse_der+0x330>)
 80893f0:	e015      	b.n	808941e <mbedtls_x509_crt_parse_der+0x2de>
    end = *p + len;

    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
        return( ret );

    if( ( ret = mbedtls_x509_get_time( p, end, to ) ) != 0 )
 80893f2:	4605      	mov	r5, r0
 80893f4:	e78c      	b.n	8089310 <mbedtls_x509_crt_parse_der+0x1d0>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
 80893f6:	9906      	ldr	r1, [sp, #24]
 80893f8:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 80893fc:	4419      	add	r1, r3
 80893fe:	4658      	mov	r0, fp
 8089400:	f7fd faf4 	bl	80869ec <mbedtls_x509_get_name>
 8089404:	4605      	mov	r5, r0
 8089406:	b950      	cbnz	r0, 808941e <mbedtls_x509_crt_parse_der+0x2de>
 8089408:	e795      	b.n	8089336 <mbedtls_x509_crt_parse_der+0x1f6>
     *  extensions      [3]  EXPLICIT Extensions OPTIONAL
     *                       -- If present, version shall be v3
     */
    if( crt->version == 2 || crt->version == 3 )
    {
        ret = x509_get_uid( &p, end, &crt->issuer_id,  1 );
 808940a:	2301      	movs	r3, #1
 808940c:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
 8089410:	4631      	mov	r1, r6
 8089412:	4658      	mov	r0, fp
 8089414:	f7fe fed5 	bl	80881c2 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>
        if( ret != 0 )
 8089418:	4605      	mov	r5, r0
 808941a:	2800      	cmp	r0, #0
 808941c:	d09c      	beq.n	8089358 <mbedtls_x509_crt_parse_der+0x218>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 808941e:	4620      	mov	r0, r4
 8089420:	f7ff fe35 	bl	808908e <mbedtls_x509_crt_free>
 8089424:	e7b1      	b.n	808938a <mbedtls_x509_crt_parse_der+0x24a>
        }
    }

    if( crt->version == 2 || crt->version == 3 )
    {
        ret = x509_get_uid( &p, end, &crt->subject_id,  2 );
 8089426:	2302      	movs	r3, #2
 8089428:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
 808942c:	4631      	mov	r1, r6
 808942e:	4658      	mov	r0, fp
 8089430:	f7fe fec7 	bl	80881c2 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>
        if( ret != 0 )
 8089434:	4605      	mov	r5, r0
 8089436:	2800      	cmp	r0, #0
 8089438:	d092      	beq.n	8089360 <mbedtls_x509_crt_parse_der+0x220>
 808943a:	e7f0      	b.n	808941e <mbedtls_x509_crt_parse_der+0x2de>
{
    int ret;
    size_t len;
    unsigned char *end_ext_data, *end_ext_octet;

    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
 808943c:	f104 02dc 	add.w	r2, r4, #220	; 0xdc
 8089440:	4631      	mov	r1, r6
 8089442:	4658      	mov	r0, fp
 8089444:	f7fd fc3e 	bl	8086cc4 <mbedtls_x509_get_ext>
 8089448:	b908      	cbnz	r0, 808944e <mbedtls_x509_crt_parse_der+0x30e>
         * Extension  ::=  SEQUENCE  {
         *      extnID      OBJECT IDENTIFIER,
         *      critical    BOOLEAN DEFAULT FALSE,
         *      extnValue   OCTET STRING  }
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 808944a:	4680      	mov	r8, r0
 808944c:	e05a      	b.n	8089504 <mbedtls_x509_crt_parse_der+0x3c4>
    size_t len;
    unsigned char *end_ext_data, *end_ext_octet;

    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 808944e:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8089452:	f040 80a5 	bne.w	80895a0 <mbedtls_x509_crt_parse_der+0x460>
 8089456:	e786      	b.n	8089366 <mbedtls_x509_crt_parse_der+0x226>
 8089458:	ffffde80 	.word	0xffffde80
 808945c:	ffffdd9a 	.word	0xffffdd9a
 8089460:	ffffde1a 	.word	0xffffde1a
 8089464:	ffffd800 	.word	0xffffd800
 8089468:	ffffd780 	.word	0xffffd780
 808946c:	ffffda80 	.word	0xffffda80
 8089470:	ffffdb9a 	.word	0xffffdb9a
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
        int is_critical = 0; /* DEFAULT FALSE */
        int ext_type = 0;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8089474:	2330      	movs	r3, #48	; 0x30
 8089476:	aa07      	add	r2, sp, #28
 8089478:	4631      	mov	r1, r6
 808947a:	a806      	add	r0, sp, #24
         * Extension  ::=  SEQUENCE  {
         *      extnID      OBJECT IDENTIFIER,
         *      critical    BOOLEAN DEFAULT FALSE,
         *      extnValue   OCTET STRING  }
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 808947c:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8089480:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
 8089484:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
        int is_critical = 0; /* DEFAULT FALSE */
 8089488:	f8cd 8020 	str.w	r8, [sp, #32]
        int ext_type = 0;
 808948c:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8089490:	f7fa fb0e 	bl	8083ab0 <mbedtls_asn1_get_tag>
 8089494:	2800      	cmp	r0, #0
 8089496:	f040 80bd 	bne.w	8089614 <mbedtls_x509_crt_parse_der+0x4d4>
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_data = *p + len;
 808949a:	9b06      	ldr	r3, [sp, #24]
 808949c:	9d07      	ldr	r5, [sp, #28]

        /* Get extension ID */
        extn_oid.tag = **p;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 808949e:	aa15      	add	r2, sp, #84	; 0x54

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_data = *p + len;
 80894a0:	441d      	add	r5, r3

        /* Get extension ID */
        extn_oid.tag = **p;
 80894a2:	781b      	ldrb	r3, [r3, #0]

        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 80894a4:	4631      	mov	r1, r6
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_data = *p + len;

        /* Get extension ID */
        extn_oid.tag = **p;
 80894a6:	9314      	str	r3, [sp, #80]	; 0x50

        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 80894a8:	a806      	add	r0, sp, #24
 80894aa:	2306      	movs	r3, #6
 80894ac:	f7fa fb00 	bl	8083ab0 <mbedtls_asn1_get_tag>
 80894b0:	2800      	cmp	r0, #0
 80894b2:	f040 80af 	bne.w	8089614 <mbedtls_x509_crt_parse_der+0x4d4>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        extn_oid.p = *p;
 80894b6:	9a06      	ldr	r2, [sp, #24]
        *p += extn_oid.len;
 80894b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
        extn_oid.tag = **p;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        extn_oid.p = *p;
 80894ba:	9216      	str	r2, [sp, #88]	; 0x58
        *p += extn_oid.len;
 80894bc:	4413      	add	r3, r2
 80894be:	9306      	str	r3, [sp, #24]

        if( ( end - *p ) < 1 )
 80894c0:	1af3      	subs	r3, r6, r3
 80894c2:	2b00      	cmp	r3, #0
 80894c4:	dd51      	ble.n	808956a <mbedtls_x509_crt_parse_der+0x42a>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
 80894c6:	aa08      	add	r2, sp, #32
 80894c8:	4629      	mov	r1, r5
 80894ca:	a806      	add	r0, sp, #24
 80894cc:	f7fa fb04 	bl	8083ad8 <mbedtls_asn1_get_bool>
 80894d0:	b9e0      	cbnz	r0, 808950c <mbedtls_x509_crt_parse_der+0x3cc>
            ( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        /* Data should be octet string type */
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &len,
 80894d2:	2304      	movs	r3, #4
 80894d4:	aa07      	add	r2, sp, #28
 80894d6:	4629      	mov	r1, r5
 80894d8:	a806      	add	r0, sp, #24
 80894da:	f7fa fae9 	bl	8083ab0 <mbedtls_asn1_get_tag>
 80894de:	2800      	cmp	r0, #0
 80894e0:	f040 8098 	bne.w	8089614 <mbedtls_x509_crt_parse_der+0x4d4>
                MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_octet = *p + len;

        if( end_ext_octet != end_ext_data )
 80894e4:	9b07      	ldr	r3, [sp, #28]
 80894e6:	9a06      	ldr	r2, [sp, #24]
 80894e8:	4413      	add	r3, r2
 80894ea:	429d      	cmp	r5, r3
 80894ec:	f040 814a 	bne.w	8089784 <mbedtls_x509_crt_parse_der+0x644>
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

        /*
         * Detect supported extensions
         */
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );
 80894f0:	a909      	add	r1, sp, #36	; 0x24
 80894f2:	a814      	add	r0, sp, #80	; 0x50
 80894f4:	f7fb ff20 	bl	8085338 <mbedtls_oid_get_x509_ext_type>

        if( ret != 0 )
 80894f8:	b160      	cbz	r0, 8089514 <mbedtls_x509_crt_parse_der+0x3d4>
        {
            /* No parser found, skip extension */
            *p = end_ext_octet;

#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
 80894fa:	9b08      	ldr	r3, [sp, #32]
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );

        if( ret != 0 )
        {
            /* No parser found, skip extension */
            *p = end_ext_octet;
 80894fc:	9506      	str	r5, [sp, #24]

#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
 80894fe:	2b00      	cmp	r3, #0
 8089500:	f040 8142 	bne.w	8089788 <mbedtls_x509_crt_parse_der+0x648>
            return( 0 );

        return( ret );
    }

    while( *p < end )
 8089504:	9b06      	ldr	r3, [sp, #24]
 8089506:	429e      	cmp	r6, r3
 8089508:	d8b4      	bhi.n	8089474 <mbedtls_x509_crt_parse_der+0x334>
 808950a:	e030      	b.n	808956e <mbedtls_x509_crt_parse_der+0x42e>
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
 808950c:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8089510:	d0df      	beq.n	80894d2 <mbedtls_x509_crt_parse_der+0x392>
 8089512:	e07f      	b.n	8089614 <mbedtls_x509_crt_parse_der+0x4d4>
#endif
            continue;
        }

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
 8089514:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
 8089518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808951a:	ea12 0003 	ands.w	r0, r2, r3
 808951e:	f040 8135 	bne.w	808978c <mbedtls_x509_crt_parse_der+0x64c>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

        crt->ext_types |= ext_type;
 8089522:	431a      	orrs	r2, r3

        switch( ext_type )
 8089524:	f5b3 7f80 	cmp.w	r3, #256	; 0x100

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

        crt->ext_types |= ext_type;
 8089528:	f8c4 20f8 	str.w	r2, [r4, #248]	; 0xf8

        switch( ext_type )
 808952c:	d023      	beq.n	8089576 <mbedtls_x509_crt_parse_der+0x436>
 808952e:	dc74      	bgt.n	808961a <mbedtls_x509_crt_parse_der+0x4da>
 8089530:	2b04      	cmp	r3, #4
 8089532:	f000 80a9 	beq.w	8089688 <mbedtls_x509_crt_parse_der+0x548>
 8089536:	2b20      	cmp	r3, #32
 8089538:	f040 812a 	bne.w	8089790 <mbedtls_x509_crt_parse_der+0x650>
    mbedtls_asn1_buf *buf;
    unsigned char tag;
    mbedtls_asn1_sequence *cur = subject_alt_name;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 808953c:	2330      	movs	r3, #48	; 0x30
 808953e:	aa0a      	add	r2, sp, #40	; 0x28
 8089540:	4629      	mov	r1, r5
 8089542:	a806      	add	r0, sp, #24
                return( ret );
            break;

        case MBEDTLS_X509_EXT_SUBJECT_ALT_NAME:
            /* Parse subject alt name */
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 8089544:	f104 0be8 	add.w	fp, r4, #232	; 0xe8
    mbedtls_asn1_buf *buf;
    unsigned char tag;
    mbedtls_asn1_sequence *cur = subject_alt_name;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8089548:	f7fa fab2 	bl	8083ab0 <mbedtls_asn1_get_tag>
 808954c:	bb20      	cbnz	r0, 8089598 <mbedtls_x509_crt_parse_der+0x458>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( *p + len != end )
 808954e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8089550:	9a06      	ldr	r2, [sp, #24]
 8089552:	4413      	add	r3, r2
 8089554:	429d      	cmp	r5, r3
 8089556:	f040 8115 	bne.w	8089784 <mbedtls_x509_crt_parse_der+0x644>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    while( *p < end )
 808955a:	9a06      	ldr	r2, [sp, #24]
 808955c:	4295      	cmp	r5, r2
 808955e:	f240 80f3 	bls.w	8089748 <mbedtls_x509_crt_parse_der+0x608>
    {
        if( ( end - *p ) < 1 )
 8089562:	1aab      	subs	r3, r5, r2
 8089564:	2b00      	cmp	r3, #0
 8089566:	f300 80be 	bgt.w	80896e6 <mbedtls_x509_crt_parse_der+0x5a6>
        extn_oid.p = *p;
        *p += extn_oid.len;

        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 808956a:	488d      	ldr	r0, [pc, #564]	; (80897a0 <mbedtls_x509_crt_parse_der+0x660>)
 808956c:	e018      	b.n	80895a0 <mbedtls_x509_crt_parse_der+0x460>
        default:
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE );
        }
    }

    if( *p != end )
 808956e:	f43f aefa 	beq.w	8089366 <mbedtls_x509_crt_parse_der+0x226>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8089572:	4d8c      	ldr	r5, [pc, #560]	; (80897a4 <mbedtls_x509_crt_parse_der+0x664>)
 8089574:	e753      	b.n	808941e <mbedtls_x509_crt_parse_der+0x2de>

        switch( ext_type )
        {
        case MBEDTLS_X509_EXT_BASIC_CONSTRAINTS:
            /* Parse basic constraints */
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
 8089576:	f504 7380 	add.w	r3, r4, #256	; 0x100
 808957a:	9303      	str	r3, [sp, #12]
    /*
     * BasicConstraints ::= SEQUENCE {
     *      cA                      BOOLEAN DEFAULT FALSE,
     *      pathLenConstraint       INTEGER (0..MAX) OPTIONAL }
     */
    *ca_istrue = 0; /* DEFAULT FALSE */
 808957c:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
    *max_pathlen = 0; /* endless */
 8089580:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8089584:	2330      	movs	r3, #48	; 0x30
 8089586:	aa17      	add	r2, sp, #92	; 0x5c
 8089588:	4629      	mov	r1, r5
 808958a:	a806      	add	r0, sp, #24

        switch( ext_type )
        {
        case MBEDTLS_X509_EXT_BASIC_CONSTRAINTS:
            /* Parse basic constraints */
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
 808958c:	f104 0bfc 	add.w	fp, r4, #252	; 0xfc
     *      pathLenConstraint       INTEGER (0..MAX) OPTIONAL }
     */
    *ca_istrue = 0; /* DEFAULT FALSE */
    *max_pathlen = 0; /* endless */

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8089590:	f7fa fa8e 	bl	8083ab0 <mbedtls_asn1_get_tag>
 8089594:	2800      	cmp	r0, #0
 8089596:	d048      	beq.n	808962a <mbedtls_x509_crt_parse_der+0x4ea>
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
        (*p)++;
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 8089598:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
                return( ret );
            break;

        case MBEDTLS_X509_EXT_SUBJECT_ALT_NAME:
            /* Parse subject alt name */
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 808959c:	2800      	cmp	r0, #0
 808959e:	d0b1      	beq.n	8089504 <mbedtls_x509_crt_parse_der+0x3c4>
    size_t len;
    unsigned char *end_ext_data, *end_ext_octet;

    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80895a0:	4605      	mov	r5, r0
#if !defined(MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3)
    if( crt->version == 3 )
#endif
    {
        ret = x509_get_crt_ext( &p, end, crt );
        if( ret != 0 )
 80895a2:	2800      	cmp	r0, #0
 80895a4:	f43f aedf 	beq.w	8089366 <mbedtls_x509_crt_parse_der+0x226>
 80895a8:	e739      	b.n	808941e <mbedtls_x509_crt_parse_der+0x2de>
     *  -- end of TBSCertificate
     *
     *  signatureAlgorithm   AlgorithmIdentifier,
     *  signatureValue       BIT STRING
     */
    if( ( ret = mbedtls_x509_get_alg( &p, end, &sig_oid2, &sig_params2 ) ) != 0 )
 80895aa:	ab0e      	add	r3, sp, #56	; 0x38
 80895ac:	aa11      	add	r2, sp, #68	; 0x44
 80895ae:	4639      	mov	r1, r7
 80895b0:	a806      	add	r0, sp, #24
 80895b2:	f7fd fa13 	bl	80869dc <mbedtls_x509_get_alg>
 80895b6:	4605      	mov	r5, r0
 80895b8:	2800      	cmp	r0, #0
 80895ba:	f47f af30 	bne.w	808941e <mbedtls_x509_crt_parse_der+0x2de>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->sig_oid.len != sig_oid2.len ||
 80895be:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80895c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80895c2:	429a      	cmp	r2, r3
 80895c4:	d10f      	bne.n	80895e6 <mbedtls_x509_crt_parse_der+0x4a6>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 80895c6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80895c8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80895ca:	f00a fac9 	bl	8093b60 <memcmp>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->sig_oid.len != sig_oid2.len ||
 80895ce:	4605      	mov	r5, r0
 80895d0:	b948      	cbnz	r0, 80895e6 <mbedtls_x509_crt_parse_der+0x4a6>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
        sig_params1.len != sig_params2.len ||
 80895d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->sig_oid.len != sig_oid2.len ||
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 80895d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80895d6:	429a      	cmp	r2, r3
 80895d8:	d105      	bne.n	80895e6 <mbedtls_x509_crt_parse_der+0x4a6>
        sig_params1.len != sig_params2.len ||
 80895da:	b14a      	cbz	r2, 80895f0 <mbedtls_x509_crt_parse_der+0x4b0>
        ( sig_params1.len != 0 &&
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
 80895dc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80895de:	980d      	ldr	r0, [sp, #52]	; 0x34
 80895e0:	f00a fabe 	bl	8093b60 <memcmp>
    }

    if( crt->sig_oid.len != sig_oid2.len ||
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
        sig_params1.len != sig_params2.len ||
        ( sig_params1.len != 0 &&
 80895e4:	b120      	cbz	r0, 80895f0 <mbedtls_x509_crt_parse_der+0x4b0>
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
    {
        mbedtls_x509_crt_free( crt );
 80895e6:	4620      	mov	r0, r4
 80895e8:	f7ff fd51 	bl	808908e <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_SIG_MISMATCH );
 80895ec:	4d6e      	ldr	r5, [pc, #440]	; (80897a8 <mbedtls_x509_crt_parse_der+0x668>)
 80895ee:	e6cf      	b.n	8089390 <mbedtls_x509_crt_parse_der+0x250>
    }

    if( ( ret = mbedtls_x509_get_sig( &p, end, &crt->sig ) ) != 0 )
 80895f0:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 80895f4:	4639      	mov	r1, r7
 80895f6:	a806      	add	r0, sp, #24
 80895f8:	f7fd fb26 	bl	8086c48 <mbedtls_x509_get_sig>
 80895fc:	4606      	mov	r6, r0
 80895fe:	b120      	cbz	r0, 808960a <mbedtls_x509_crt_parse_der+0x4ca>
    {
        mbedtls_x509_crt_free( crt );
 8089600:	4620      	mov	r0, r4
 8089602:	f7ff fd44 	bl	808908e <mbedtls_x509_crt_free>
 8089606:	4635      	mov	r5, r6
 8089608:	e6bf      	b.n	808938a <mbedtls_x509_crt_parse_der+0x24a>
        return( ret );
    }

    if( p != end )
 808960a:	9b06      	ldr	r3, [sp, #24]
 808960c:	429f      	cmp	r7, r3
 808960e:	f000 80c3 	beq.w	8089798 <mbedtls_x509_crt_parse_der+0x658>
 8089612:	e6ac      	b.n	808936e <mbedtls_x509_crt_parse_der+0x22e>
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
            ( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 8089614:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
 8089618:	e7c2      	b.n	80895a0 <mbedtls_x509_crt_parse_der+0x460>
        if( ( crt->ext_types & ext_type ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

        crt->ext_types |= ext_type;

        switch( ext_type )
 808961a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 808961e:	d053      	beq.n	80896c8 <mbedtls_x509_crt_parse_der+0x588>
 8089620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8089624:	f000 8097 	beq.w	8089756 <mbedtls_x509_crt_parse_der+0x616>
 8089628:	e0b2      	b.n	8089790 <mbedtls_x509_crt_parse_der+0x650>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( *p == end )
 808962a:	9b06      	ldr	r3, [sp, #24]
 808962c:	429d      	cmp	r5, r3
 808962e:	f43f af69 	beq.w	8089504 <mbedtls_x509_crt_parse_der+0x3c4>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_bool( p, end, ca_istrue ) ) != 0 )
 8089632:	465a      	mov	r2, fp
 8089634:	4629      	mov	r1, r5
 8089636:	a806      	add	r0, sp, #24
 8089638:	f7fa fa4e 	bl	8083ad8 <mbedtls_asn1_get_bool>
 808963c:	b178      	cbz	r0, 808965e <mbedtls_x509_crt_parse_der+0x51e>
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 808963e:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8089642:	d1a9      	bne.n	8089598 <mbedtls_x509_crt_parse_der+0x458>
            ret = mbedtls_asn1_get_int( p, end, ca_istrue );
 8089644:	465a      	mov	r2, fp
 8089646:	4629      	mov	r1, r5
 8089648:	a806      	add	r0, sp, #24
 808964a:	f7fa fa5e 	bl	8083b0a <mbedtls_asn1_get_int>

        if( ret != 0 )
 808964e:	2800      	cmp	r0, #0
 8089650:	d1a2      	bne.n	8089598 <mbedtls_x509_crt_parse_der+0x458>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        if( *ca_istrue != 0 )
 8089652:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8089656:	b113      	cbz	r3, 808965e <mbedtls_x509_crt_parse_der+0x51e>
            *ca_istrue = 1;
 8089658:	2301      	movs	r3, #1
 808965a:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    }

    if( *p == end )
 808965e:	9b06      	ldr	r3, [sp, #24]
 8089660:	429d      	cmp	r5, r3
 8089662:	f43f af4f 	beq.w	8089504 <mbedtls_x509_crt_parse_der+0x3c4>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_int( p, end, max_pathlen ) ) != 0 )
 8089666:	9a03      	ldr	r2, [sp, #12]
 8089668:	4629      	mov	r1, r5
 808966a:	a806      	add	r0, sp, #24
 808966c:	f7fa fa4d 	bl	8083b0a <mbedtls_asn1_get_int>
 8089670:	2800      	cmp	r0, #0
 8089672:	d191      	bne.n	8089598 <mbedtls_x509_crt_parse_der+0x458>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( *p != end )
 8089674:	9b06      	ldr	r3, [sp, #24]
 8089676:	429d      	cmp	r5, r3
 8089678:	f040 8084 	bne.w	8089784 <mbedtls_x509_crt_parse_der+0x644>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    (*max_pathlen)++;
 808967c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8089680:	3301      	adds	r3, #1
 8089682:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8089686:	e73d      	b.n	8089504 <mbedtls_x509_crt_parse_der+0x3c4>
                               const unsigned char *end,
                               unsigned int *key_usage)
{
    int ret;
    size_t i;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 8089688:	9017      	str	r0, [sp, #92]	; 0x5c
 808968a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
 808968e:	9019      	str	r0, [sp, #100]	; 0x64

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 8089690:	aa17      	add	r2, sp, #92	; 0x5c
 8089692:	4629      	mov	r1, r5
 8089694:	a806      	add	r0, sp, #24
 8089696:	f7fa fa6f 	bl	8083b78 <mbedtls_asn1_get_bitstring>
 808969a:	2800      	cmp	r0, #0
 808969c:	d165      	bne.n	808976a <mbedtls_x509_crt_parse_der+0x62a>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( bs.len < 1 )
 808969e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80896a0:	2a00      	cmp	r2, #0
 80896a2:	d077      	beq.n	8089794 <mbedtls_x509_crt_parse_der+0x654>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
 80896a4:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 80896a8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80896aa:	5c2b      	ldrb	r3, [r5, r0]
 80896ac:	00c1      	lsls	r1, r0, #3
 80896ae:	408b      	lsls	r3, r1
 80896b0:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 80896b4:	3001      	adds	r0, #1
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 80896b6:	430b      	orrs	r3, r1
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 80896b8:	4282      	cmp	r2, r0
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 80896ba:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 80896be:	f43f af21 	beq.w	8089504 <mbedtls_x509_crt_parse_der+0x3c4>
 80896c2:	2804      	cmp	r0, #4
 80896c4:	d1f1      	bne.n	80896aa <mbedtls_x509_crt_parse_der+0x56a>
 80896c6:	e71d      	b.n	8089504 <mbedtls_x509_crt_parse_der+0x3c4>
                               const unsigned char *end,
                               mbedtls_x509_sequence *ext_key_usage)
{
    int ret;

    if( ( ret = mbedtls_asn1_get_sequence_of( p, end, ext_key_usage, MBEDTLS_ASN1_OID ) ) != 0 )
 80896c8:	2306      	movs	r3, #6
 80896ca:	f504 7284 	add.w	r2, r4, #264	; 0x108
 80896ce:	4629      	mov	r1, r5
 80896d0:	a806      	add	r0, sp, #24
 80896d2:	f7fa fa8a 	bl	8083bea <mbedtls_asn1_get_sequence_of>
 80896d6:	2800      	cmp	r0, #0
 80896d8:	d147      	bne.n	808976a <mbedtls_x509_crt_parse_der+0x62a>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    /* Sequence length must be >= 1 */
    if( ext_key_usage->buf.p == NULL )
 80896da:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80896de:	2b00      	cmp	r3, #0
 80896e0:	f47f af10 	bne.w	8089504 <mbedtls_x509_crt_parse_der+0x3c4>
 80896e4:	e056      	b.n	8089794 <mbedtls_x509_crt_parse_der+0x654>
    {
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
 80896e6:	f812 3b01 	ldrb.w	r3, [r2], #1
        (*p)++;
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 80896ea:	4629      	mov	r1, r5
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
        (*p)++;
 80896ec:	9206      	str	r2, [sp, #24]
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 80896ee:	a806      	add	r0, sp, #24
 80896f0:	aa17      	add	r2, sp, #92	; 0x5c
    {
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
 80896f2:	9303      	str	r3, [sp, #12]
        (*p)++;
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 80896f4:	f7fa f98a 	bl	8083a0c <mbedtls_asn1_get_len>
 80896f8:	9b03      	ldr	r3, [sp, #12]
 80896fa:	2800      	cmp	r0, #0
 80896fc:	f47f af4c 	bne.w	8089598 <mbedtls_x509_crt_parse_der+0x458>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        if( ( tag & MBEDTLS_ASN1_TAG_CLASS_MASK ) !=
 8089700:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8089704:	2a80      	cmp	r2, #128	; 0x80
 8089706:	d13f      	bne.n	8089788 <mbedtls_x509_crt_parse_der+0x648>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
        }

        /* Skip everything but DNS name */
        if( tag != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | 2 ) )
 8089708:	2b82      	cmp	r3, #130	; 0x82
 808970a:	d002      	beq.n	8089712 <mbedtls_x509_crt_parse_der+0x5d2>
        {
            *p += tag_len;
 808970c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808970e:	9a06      	ldr	r2, [sp, #24]
 8089710:	e017      	b.n	8089742 <mbedtls_x509_crt_parse_der+0x602>
            continue;
        }

        /* Allocate and assign next pointer */
        if( cur->buf.p != NULL )
 8089712:	f8db 3008 	ldr.w	r3, [fp, #8]
 8089716:	b15b      	cbz	r3, 8089730 <mbedtls_x509_crt_parse_der+0x5f0>
        {
            if( cur->next != NULL )
 8089718:	f8db 300c 	ldr.w	r3, [fp, #12]
 808971c:	2b00      	cmp	r3, #0
 808971e:	d135      	bne.n	808978c <mbedtls_x509_crt_parse_der+0x64c>
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

            cur->next = (mbedtls_asn1_sequence *)mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );
 8089720:	2110      	movs	r1, #16
 8089722:	2001      	movs	r0, #1
 8089724:	f00a fa06 	bl	8093b34 <calloc>
 8089728:	f8cb 000c 	str.w	r0, [fp, #12]

            if( cur->next == NULL )
 808972c:	b188      	cbz	r0, 8089752 <mbedtls_x509_crt_parse_der+0x612>
 808972e:	4683      	mov	fp, r0

            cur = cur->next;
        }

        buf = &(cur->buf);
        buf->tag = tag;
 8089730:	2382      	movs	r3, #130	; 0x82
 8089732:	f8cb 3000 	str.w	r3, [fp]
        buf->p = *p;
 8089736:	9a06      	ldr	r2, [sp, #24]
 8089738:	f8cb 2008 	str.w	r2, [fp, #8]
        buf->len = tag_len;
 808973c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808973e:	f8cb 3004 	str.w	r3, [fp, #4]
        *p += buf->len;
 8089742:	4413      	add	r3, r2
 8089744:	9306      	str	r3, [sp, #24]
 8089746:	e708      	b.n	808955a <mbedtls_x509_crt_parse_der+0x41a>
    }

    /* Set final sequence entry's next pointer to NULL */
    cur->next = NULL;
 8089748:	f8cb 800c 	str.w	r8, [fp, #12]

    if( *p != end )
 808974c:	f43f aeda 	beq.w	8089504 <mbedtls_x509_crt_parse_der+0x3c4>
 8089750:	e018      	b.n	8089784 <mbedtls_x509_crt_parse_der+0x644>

            cur->next = (mbedtls_asn1_sequence *)mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );

            if( cur->next == NULL )
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                        MBEDTLS_ERR_ASN1_ALLOC_FAILED );
 8089752:	4816      	ldr	r0, [pc, #88]	; (80897ac <mbedtls_x509_crt_parse_der+0x66c>)
 8089754:	e724      	b.n	80895a0 <mbedtls_x509_crt_parse_der+0x460>
static int x509_get_ns_cert_type( unsigned char **p,
                                       const unsigned char *end,
                                       unsigned char *ns_cert_type)
{
    int ret;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 8089756:	9017      	str	r0, [sp, #92]	; 0x5c
 8089758:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
 808975c:	9019      	str	r0, [sp, #100]	; 0x64

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 808975e:	aa17      	add	r2, sp, #92	; 0x5c
 8089760:	4629      	mov	r1, r5
 8089762:	a806      	add	r0, sp, #24
 8089764:	f7fa fa08 	bl	8083b78 <mbedtls_asn1_get_bitstring>
 8089768:	b120      	cbz	r0, 8089774 <mbedtls_x509_crt_parse_der+0x634>
                return( ret );
            break;

        case MBEDTLS_X509_EXT_NS_CERT_TYPE:
            /* Parse netscape certificate type */
            if( ( ret = x509_get_ns_cert_type( p, end_ext_octet,
 808976a:	f5b0 5014 	subs.w	r0, r0, #9472	; 0x2500
 808976e:	f43f aec9 	beq.w	8089504 <mbedtls_x509_crt_parse_der+0x3c4>
 8089772:	e715      	b.n	80895a0 <mbedtls_x509_crt_parse_der+0x460>
    mbedtls_x509_bitstring bs = { 0, 0, NULL };

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( bs.len != 1 )
 8089774:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8089776:	2b01      	cmp	r3, #1
 8089778:	d10c      	bne.n	8089794 <mbedtls_x509_crt_parse_der+0x654>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *ns_cert_type = *bs.p;
 808977a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808977c:	781b      	ldrb	r3, [r3, #0]
 808977e:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
 8089782:	e6bf      	b.n	8089504 <mbedtls_x509_crt_parse_der+0x3c4>

        end_ext_octet = *p + len;

        if( end_ext_octet != end_ext_data )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8089784:	4807      	ldr	r0, [pc, #28]	; (80897a4 <mbedtls_x509_crt_parse_der+0x664>)
 8089786:	e70b      	b.n	80895a0 <mbedtls_x509_crt_parse_der+0x460>
#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
            {
                /* Data is marked as critical: fail */
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                        MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 8089788:	4809      	ldr	r0, [pc, #36]	; (80897b0 <mbedtls_x509_crt_parse_der+0x670>)
 808978a:	e709      	b.n	80895a0 <mbedtls_x509_crt_parse_der+0x460>
            continue;
        }

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );
 808978c:	4809      	ldr	r0, [pc, #36]	; (80897b4 <mbedtls_x509_crt_parse_der+0x674>)
 808978e:	e707      	b.n	80895a0 <mbedtls_x509_crt_parse_der+0x460>
                    &crt->ns_cert_type ) ) != 0 )
                return( ret );
            break;

        default:
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE );
 8089790:	4809      	ldr	r0, [pc, #36]	; (80897b8 <mbedtls_x509_crt_parse_der+0x678>)
 8089792:	e705      	b.n	80895a0 <mbedtls_x509_crt_parse_der+0x460>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    /* Sequence length must be >= 1 */
    if( ext_key_usage->buf.p == NULL )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 8089794:	4809      	ldr	r0, [pc, #36]	; (80897bc <mbedtls_x509_crt_parse_der+0x67c>)
 8089796:	e703      	b.n	80895a0 <mbedtls_x509_crt_parse_der+0x460>

        return( ret );
    }

    return( 0 );
}
 8089798:	4628      	mov	r0, r5
 808979a:	b01b      	add	sp, #108	; 0x6c
 808979c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80897a0:	ffffdaa0 	.word	0xffffdaa0
 80897a4:	ffffda9a 	.word	0xffffda9a
 80897a8:	ffffd980 	.word	0xffffd980
 80897ac:	ffffda96 	.word	0xffffda96
 80897b0:	ffffda9e 	.word	0xffffda9e
 80897b4:	ffffdb00 	.word	0xffffdb00
 80897b8:	ffffdf80 	.word	0xffffdf80
 80897bc:	ffffda9c 	.word	0xffffda9c

080897c0 <mbedtls_x509_crt_parse>:
/*
 * Parse one or more PEM certificates from a buffer and add them to the chained
 * list
 */
int mbedtls_x509_crt_parse( mbedtls_x509_crt *chain, const unsigned char *buf, size_t buflen )
{
 80897c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80897c4:	460d      	mov	r5, r1
 80897c6:	b088      	sub	sp, #32
 80897c8:	4617      	mov	r7, r2
#endif

    /*
     * Check for valid input
     */
    if( chain == NULL || buf == NULL )
 80897ca:	4681      	mov	r9, r0
 80897cc:	2800      	cmp	r0, #0
 80897ce:	d054      	beq.n	808987a <mbedtls_x509_crt_parse+0xba>
 80897d0:	2900      	cmp	r1, #0
 80897d2:	d052      	beq.n	808987a <mbedtls_x509_crt_parse+0xba>
    /*
     * Determine buffer content. Buffer contains either one DER certificate or
     * one or more PEM certificates.
     */
#if defined(MBEDTLS_PEM_PARSE_C)
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
 80897d4:	2a00      	cmp	r2, #0
 80897d6:	d054      	beq.n	8089882 <mbedtls_x509_crt_parse+0xc2>
 80897d8:	188b      	adds	r3, r1, r2
 80897da:	f813 4c01 	ldrb.w	r4, [r3, #-1]
 80897de:	2c00      	cmp	r4, #0
 80897e0:	d14f      	bne.n	8089882 <mbedtls_x509_crt_parse+0xc2>
        strstr( (const char *) buf, "-----BEGIN CERTIFICATE-----" ) != NULL )
 80897e2:	492c      	ldr	r1, [pc, #176]	; (8089894 <mbedtls_x509_crt_parse+0xd4>)
 80897e4:	4628      	mov	r0, r5
 80897e6:	f00a fa18 	bl	8093c1a <strstr>
    /*
     * Determine buffer content. Buffer contains either one DER certificate or
     * one or more PEM certificates.
     */
#if defined(MBEDTLS_PEM_PARSE_C)
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
 80897ea:	2800      	cmp	r0, #0
 80897ec:	d049      	beq.n	8089882 <mbedtls_x509_crt_parse+0xc2>
 80897ee:	46a0      	mov	r8, r4
 80897f0:	46a2      	mov	sl, r4
    {
        int ret;
        mbedtls_pem_context pem;

        /* 1 rather than 0 since the terminating NULL byte is counted in */
        while( buflen > 1 )
 80897f2:	2f01      	cmp	r7, #1
 80897f4:	d938      	bls.n	8089868 <mbedtls_x509_crt_parse+0xa8>
        {
            size_t use_len;
            mbedtls_pem_init( &pem );
 80897f6:	a805      	add	r0, sp, #20
 80897f8:	f005 fd2a 	bl	808f250 <mbedtls_pem_init>

            /* If we get there, we know the string is null-terminated */
            ret = mbedtls_pem_read_buffer( &pem,
                           "-----BEGIN CERTIFICATE-----",
                           "-----END CERTIFICATE-----",
                           buf, NULL, 0, &use_len );
 80897fc:	ab04      	add	r3, sp, #16
 80897fe:	9302      	str	r3, [sp, #8]
 8089800:	2300      	movs	r3, #0
 8089802:	9301      	str	r3, [sp, #4]
 8089804:	9300      	str	r3, [sp, #0]
 8089806:	4a24      	ldr	r2, [pc, #144]	; (8089898 <mbedtls_x509_crt_parse+0xd8>)
 8089808:	462b      	mov	r3, r5
 808980a:	4922      	ldr	r1, [pc, #136]	; (8089894 <mbedtls_x509_crt_parse+0xd4>)
 808980c:	a805      	add	r0, sp, #20
 808980e:	f005 fd25 	bl	808f25c <mbedtls_pem_read_buffer>

            if( ret == 0 )
 8089812:	4606      	mov	r6, r0
 8089814:	b968      	cbnz	r0, 8089832 <mbedtls_x509_crt_parse+0x72>
            {
                /*
                 * Was PEM encoded
                 */
                buflen -= use_len;
 8089816:	9b04      	ldr	r3, [sp, #16]
                continue;
            }
            else
                break;

            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
 8089818:	9a06      	ldr	r2, [sp, #24]
 808981a:	9905      	ldr	r1, [sp, #20]
 808981c:	4648      	mov	r0, r9
            if( ret == 0 )
            {
                /*
                 * Was PEM encoded
                 */
                buflen -= use_len;
 808981e:	1aff      	subs	r7, r7, r3
                buf += use_len;
 8089820:	441d      	add	r5, r3
                continue;
            }
            else
                break;

            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
 8089822:	f7ff fc8d 	bl	8089140 <mbedtls_x509_crt_parse_der>
 8089826:	4606      	mov	r6, r0

            mbedtls_pem_free( &pem );
 8089828:	a805      	add	r0, sp, #20
 808982a:	f005 fda5 	bl	808f378 <mbedtls_pem_free>

            if( ret != 0 )
 808982e:	b96e      	cbnz	r6, 808984c <mbedtls_x509_crt_parse+0x8c>
 8089830:	e015      	b.n	808985e <mbedtls_x509_crt_parse+0x9e>
                 * Was PEM encoded
                 */
                buflen -= use_len;
                buf += use_len;
            }
            else if( ret == MBEDTLS_ERR_PEM_BAD_INPUT_DATA )
 8089832:	f510 5fa4 	cmn.w	r0, #5248	; 0x1480
 8089836:	d015      	beq.n	8089864 <mbedtls_x509_crt_parse+0xa4>
            {
                return( ret );
            }
            else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 8089838:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 808983c:	d014      	beq.n	8089868 <mbedtls_x509_crt_parse+0xa8>
            {
                mbedtls_pem_free( &pem );
 808983e:	a805      	add	r0, sp, #20
 8089840:	f005 fd9a 	bl	808f378 <mbedtls_pem_free>

                /*
                 * PEM header and footer were found
                 */
                buflen -= use_len;
 8089844:	9b04      	ldr	r3, [sp, #16]
 8089846:	1aff      	subs	r7, r7, r3
                buf += use_len;
 8089848:	441d      	add	r5, r3
 808984a:	e002      	b.n	8089852 <mbedtls_x509_crt_parse+0x92>
            if( ret != 0 )
            {
                /*
                 * Quit parsing on a memory error
                 */
                if( ret == MBEDTLS_ERR_X509_ALLOC_FAILED )
 808984c:	f516 5f22 	cmn.w	r6, #10368	; 0x2880
 8089850:	d008      	beq.n	8089864 <mbedtls_x509_crt_parse+0xa4>
                    return( ret );

                if( first_error == 0 )
 8089852:	f1b8 0f00 	cmp.w	r8, #0
 8089856:	bf08      	it	eq
 8089858:	46b0      	moveq	r8, r6
                    first_error = ret;

                total_failed++;
 808985a:	3401      	adds	r4, #1
                continue;
 808985c:	e7c9      	b.n	80897f2 <mbedtls_x509_crt_parse+0x32>
            }

            success = 1;
 808985e:	f04f 0a01 	mov.w	sl, #1
 8089862:	e7c6      	b.n	80897f2 <mbedtls_x509_crt_parse+0x32>
 8089864:	4630      	mov	r0, r6
 8089866:	e011      	b.n	808988c <mbedtls_x509_crt_parse+0xcc>
        }
    }

    if( success )
 8089868:	f1ba 0f00 	cmp.w	sl, #0
 808986c:	d107      	bne.n	808987e <mbedtls_x509_crt_parse+0xbe>
        return( total_failed );
    else if( first_error )
 808986e:	480b      	ldr	r0, [pc, #44]	; (808989c <mbedtls_x509_crt_parse+0xdc>)
 8089870:	f1b8 0f00 	cmp.w	r8, #0
 8089874:	bf18      	it	ne
 8089876:	4640      	movne	r0, r8
 8089878:	e008      	b.n	808988c <mbedtls_x509_crt_parse+0xcc>

    /*
     * Check for valid input
     */
    if( chain == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 808987a:	4809      	ldr	r0, [pc, #36]	; (80898a0 <mbedtls_x509_crt_parse+0xe0>)
 808987c:	e006      	b.n	808988c <mbedtls_x509_crt_parse+0xcc>
 808987e:	4620      	mov	r0, r4
 8089880:	e004      	b.n	808988c <mbedtls_x509_crt_parse+0xcc>
    {
        buf_format = MBEDTLS_X509_FORMAT_PEM;
    }

    if( buf_format == MBEDTLS_X509_FORMAT_DER )
        return mbedtls_x509_crt_parse_der( chain, buf, buflen );
 8089882:	463a      	mov	r2, r7
 8089884:	4629      	mov	r1, r5
 8089886:	4648      	mov	r0, r9
 8089888:	f7ff fc5a 	bl	8089140 <mbedtls_x509_crt_parse_der>
    else if( first_error )
        return( first_error );
    else
        return( MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT );
#endif /* MBEDTLS_PEM_PARSE_C */
}
 808988c:	b008      	add	sp, #32
 808988e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8089892:	bf00      	nop
 8089894:	080959b1 	.word	0x080959b1
 8089898:	080959cd 	.word	0x080959cd
 808989c:	ffffd880 	.word	0xffffd880
 80898a0:	ffffd800 	.word	0xffffd800

080898a4 <_ZL15mbedtls_zeroizePvj>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
#include "mbedtls/oid.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 80898a4:	4401      	add	r1, r0
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80898a6:	2300      	movs	r3, #0
 80898a8:	4288      	cmp	r0, r1
 80898aa:	d002      	beq.n	80898b2 <_ZL15mbedtls_zeroizePvj+0xe>
 80898ac:	7003      	strb	r3, [r0, #0]
 80898ae:	3001      	adds	r0, #1
 80898b0:	e7fa      	b.n	80898a8 <_ZL15mbedtls_zeroizePvj+0x4>
 80898b2:	4770      	bx	lr

080898b4 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>:
 * Start a timer.
 * Passing millisecs = 0 cancels a running timer.
 */
static void ssl_set_timer( mbedtls_ssl_context *ssl, uint32_t millisecs )
{
    if( ssl->f_set_timer == NULL )
 80898b4:	6c83      	ldr	r3, [r0, #72]	; 0x48
/*
 * Start a timer.
 * Passing millisecs = 0 cancels a running timer.
 */
static void ssl_set_timer( mbedtls_ssl_context *ssl, uint32_t millisecs )
{
 80898b6:	460a      	mov	r2, r1
    if( ssl->f_set_timer == NULL )
 80898b8:	b113      	cbz	r3, 80898c0 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm+0xc>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "set_timer to %d ms", (int) millisecs ) );
    ssl->f_set_timer( ssl->p_timer, millisecs / 4, millisecs );
 80898ba:	0889      	lsrs	r1, r1, #2
 80898bc:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80898be:	4718      	bx	r3
 80898c0:	4770      	bx	lr
	...

080898c4 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi>:

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_calc_finished_tls_sha256(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 80898c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    int len = 12;
    const char *sender;
    mbedtls_sha256_context sha256;
    unsigned char padbuf[32];

    mbedtls_ssl_session *session = ssl->session_negotiate;
 80898c6:	6ac5      	ldr	r5, [r0, #44]	; 0x2c

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_calc_finished_tls_sha256(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 80898c8:	b0a9      	sub	sp, #164	; 0xa4
 80898ca:	4604      	mov	r4, r0
 80898cc:	460f      	mov	r7, r1
 80898ce:	4616      	mov	r6, r2
    const char *sender;
    mbedtls_sha256_context sha256;
    unsigned char padbuf[32];

    mbedtls_ssl_session *session = ssl->session_negotiate;
    if( !session )
 80898d0:	b905      	cbnz	r5, 80898d4 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x10>
        session = ssl->session;
 80898d2:	6a85      	ldr	r5, [r0, #40]	; 0x28

    mbedtls_sha256_init( &sha256 );
 80898d4:	a80d      	add	r0, sp, #52	; 0x34
 80898d6:	f7f8 ff0d 	bl	80826f4 <mbedtls_sha256_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha256" ) );

    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 80898da:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80898dc:	a80d      	add	r0, sp, #52	; 0x34
 80898de:	3118      	adds	r1, #24
 80898e0:	f7f8 ff16 	bl	8082710 <mbedtls_sha256_clone>
                   sha256.state, sizeof( sha256.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
 80898e4:	4b10      	ldr	r3, [pc, #64]	; (8089928 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x64>)
 80898e6:	4911      	ldr	r1, [pc, #68]	; (808992c <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x68>)

    mbedtls_sha256_finish_ret( &sha256, padbuf );
 80898e8:	a80d      	add	r0, sp, #52	; 0x34
                   sha256.state, sizeof( sha256.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
 80898ea:	2e00      	cmp	r6, #0
 80898ec:	bf0c      	ite	eq
 80898ee:	461e      	moveq	r6, r3
 80898f0:	460e      	movne	r6, r1

    mbedtls_sha256_finish_ret( &sha256, padbuf );
 80898f2:	a905      	add	r1, sp, #20
 80898f4:	f7f9 fb06 	bl	8082f04 <mbedtls_sha256_finish_ret>

    ssl->handshake->tls_prf( session->master, 48, sender,
 80898f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
                             padbuf, 32, buf, len );
 80898fa:	220c      	movs	r2, #12
 80898fc:	2420      	movs	r4, #32
 80898fe:	9202      	str	r2, [sp, #8]
 8089900:	9701      	str	r7, [sp, #4]
 8089902:	9400      	str	r4, [sp, #0]
 8089904:	4632      	mov	r2, r6
 8089906:	f8d3 716c 	ldr.w	r7, [r3, #364]	; 0x16c
 808990a:	2130      	movs	r1, #48	; 0x30
 808990c:	ab05      	add	r3, sp, #20
 808990e:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 8089912:	47b8      	blx	r7

    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );

    mbedtls_sha256_free( &sha256 );
 8089914:	a80d      	add	r0, sp, #52	; 0x34
 8089916:	f7f8 fef1 	bl	80826fc <mbedtls_sha256_free>

    mbedtls_zeroize(  padbuf, sizeof(  padbuf ) );
 808991a:	4621      	mov	r1, r4
 808991c:	a805      	add	r0, sp, #20
 808991e:	f7ff ffc1 	bl	80898a4 <_ZL15mbedtls_zeroizePvj>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
}
 8089922:	b029      	add	sp, #164	; 0xa4
 8089924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8089926:	bf00      	nop
 8089928:	08095de1 	.word	0x08095de1
 808992c:	08095df1 	.word	0x08095df1

08089930 <_ZL26ssl_calc_verify_tls_sha256P19mbedtls_ssl_contextPh>:
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 */

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
void ssl_calc_verify_tls_sha256( mbedtls_ssl_context *ssl, unsigned char hash[32] )
{
 8089930:	b530      	push	{r4, r5, lr}
 8089932:	4605      	mov	r5, r0
 8089934:	460c      	mov	r4, r1
 8089936:	b09d      	sub	sp, #116	; 0x74
    mbedtls_sha256_context sha256;

    mbedtls_sha256_init( &sha256 );
 8089938:	a801      	add	r0, sp, #4
 808993a:	f7f8 fedb 	bl	80826f4 <mbedtls_sha256_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha256" ) );

    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 808993e:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8089940:	a801      	add	r0, sp, #4
 8089942:	3118      	adds	r1, #24
 8089944:	f7f8 fee4 	bl	8082710 <mbedtls_sha256_clone>
    mbedtls_sha256_finish_ret( &sha256, hash );
 8089948:	4621      	mov	r1, r4
 808994a:	a801      	add	r0, sp, #4
 808994c:	f7f9 fada 	bl	8082f04 <mbedtls_sha256_finish_ret>

    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 32 );
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );

    mbedtls_sha256_free( &sha256 );
 8089950:	a801      	add	r0, sp, #4
 8089952:	f7f8 fed3 	bl	80826fc <mbedtls_sha256_free>

    return;
}
 8089956:	b01d      	add	sp, #116	; 0x74
 8089958:	bd30      	pop	{r4, r5, pc}
	...

0808995c <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>:
static int tls_prf_generic( mbedtls_md_type_t md_type,
                            const unsigned char *secret, size_t slen,
                            const char *label,
                            const unsigned char *random, size_t rlen,
                            unsigned char *dstbuf, size_t dlen )
{
 808995c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8089960:	4604      	mov	r4, r0
 8089962:	b0b7      	sub	sp, #220	; 0xdc
    unsigned char h_i[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    int ret;

    mbedtls_md_init( &md_ctx );
 8089964:	a803      	add	r0, sp, #12
static int tls_prf_generic( mbedtls_md_type_t md_type,
                            const unsigned char *secret, size_t slen,
                            const char *label,
                            const unsigned char *random, size_t rlen,
                            unsigned char *dstbuf, size_t dlen )
{
 8089966:	468a      	mov	sl, r1
 8089968:	4693      	mov	fp, r2
 808996a:	4699      	mov	r9, r3
 808996c:	9e43      	ldr	r6, [sp, #268]	; 0x10c
    unsigned char h_i[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    int ret;

    mbedtls_md_init( &md_ctx );
 808996e:	f7fe fa63 	bl	8087e38 <mbedtls_md_init>

    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
 8089972:	4620      	mov	r0, r4
 8089974:	f7fe fa54 	bl	8087e20 <mbedtls_md_info_from_type>
 8089978:	4607      	mov	r7, r0
 808997a:	2800      	cmp	r0, #0
 808997c:	d073      	beq.n	8089a66 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x10a>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );

    md_len = mbedtls_md_get_size( md_info );
 808997e:	f7fe fb93 	bl	80880a8 <mbedtls_md_get_size>
 8089982:	4604      	mov	r4, r0

    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
 8089984:	4648      	mov	r0, r9
 8089986:	f00a f940 	bl	8093c0a <strlen>
 808998a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 808998c:	1823      	adds	r3, r4, r0
 808998e:	189a      	adds	r2, r3, r2
 8089990:	2a80      	cmp	r2, #128	; 0x80
 8089992:	4605      	mov	r5, r0
 8089994:	9301      	str	r3, [sp, #4]
 8089996:	d868      	bhi.n	8089a6a <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x10e>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
 8089998:	ab16      	add	r3, sp, #88	; 0x58
 808999a:	eb03 0804 	add.w	r8, r3, r4
 808999e:	4602      	mov	r2, r0
 80899a0:	4649      	mov	r1, r9
 80899a2:	4640      	mov	r0, r8
 80899a4:	f00a f8eb 	bl	8093b7e <memcpy>
    memcpy( tmp + md_len + nb, random, rlen );
 80899a8:	9b01      	ldr	r3, [sp, #4]
 80899aa:	a816      	add	r0, sp, #88	; 0x58
 80899ac:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80899ae:	9940      	ldr	r1, [sp, #256]	; 0x100
 80899b0:	4418      	add	r0, r3
 80899b2:	f00a f8e4 	bl	8093b7e <memcpy>
    nb += rlen;

    /*
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
 80899b6:	4639      	mov	r1, r7
 80899b8:	2201      	movs	r2, #1
 80899ba:	a803      	add	r0, sp, #12
 80899bc:	f7fe fa62 	bl	8087e84 <mbedtls_md_setup>
 80899c0:	4607      	mov	r7, r0
 80899c2:	2800      	cmp	r0, #0
 80899c4:	d152      	bne.n	8089a6c <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x110>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
    memcpy( tmp + md_len + nb, random, rlen );
    nb += rlen;
 80899c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
        return( ret );

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
 80899c8:	465a      	mov	r2, fp
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
    memcpy( tmp + md_len + nb, random, rlen );
    nb += rlen;
 80899ca:	441d      	add	r5, r3
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
        return( ret );

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
 80899cc:	4651      	mov	r1, sl
 80899ce:	a803      	add	r0, sp, #12
 80899d0:	f7fe faa8 	bl	8087f24 <mbedtls_md_hmac_starts>
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
 80899d4:	462a      	mov	r2, r5
 80899d6:	4641      	mov	r1, r8
 80899d8:	a803      	add	r0, sp, #12
 80899da:	f7fe fb03 	bl	8087fe4 <mbedtls_md_hmac_update>
    mbedtls_md_hmac_finish( &md_ctx, tmp );
 80899de:	a916      	add	r1, sp, #88	; 0x58
 80899e0:	a803      	add	r0, sp, #12
 80899e2:	f7fe fb0f 	bl	8088004 <mbedtls_md_hmac_finish>

    for( i = 0; i < dlen; i += md_len )
 80899e6:	46b9      	mov	r9, r7
 80899e8:	f10d 0818 	add.w	r8, sp, #24
    {
        mbedtls_md_hmac_reset ( &md_ctx );
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
 80899ec:	4425      	add	r5, r4

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
    mbedtls_md_hmac_finish( &md_ctx, tmp );

    for( i = 0; i < dlen; i += md_len )
 80899ee:	45b1      	cmp	r9, r6

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
    }

    mbedtls_md_free( &md_ctx );
 80899f0:	a803      	add	r0, sp, #12

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
    mbedtls_md_hmac_finish( &md_ctx, tmp );

    for( i = 0; i < dlen; i += md_len )
 80899f2:	d22c      	bcs.n	8089a4e <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xf2>
    {
        mbedtls_md_hmac_reset ( &md_ctx );
 80899f4:	f7fe fb36 	bl	8088064 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
 80899f8:	462a      	mov	r2, r5
 80899fa:	a916      	add	r1, sp, #88	; 0x58
 80899fc:	a803      	add	r0, sp, #12
 80899fe:	f7fe faf1 	bl	8087fe4 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, h_i );
 8089a02:	4641      	mov	r1, r8
 8089a04:	a803      	add	r0, sp, #12
 8089a06:	f7fe fafd 	bl	8088004 <mbedtls_md_hmac_finish>

        mbedtls_md_hmac_reset ( &md_ctx );
 8089a0a:	a803      	add	r0, sp, #12
 8089a0c:	f7fe fb2a 	bl	8088064 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
 8089a10:	4622      	mov	r2, r4
 8089a12:	a916      	add	r1, sp, #88	; 0x58
 8089a14:	a803      	add	r0, sp, #12
 8089a16:	f7fe fae5 	bl	8087fe4 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, tmp );
 8089a1a:	a916      	add	r1, sp, #88	; 0x58
 8089a1c:	a803      	add	r0, sp, #12
 8089a1e:	f7fe faf1 	bl	8088004 <mbedtls_md_hmac_finish>

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
 8089a22:	eb09 0104 	add.w	r1, r9, r4
 8089a26:	428e      	cmp	r6, r1
 8089a28:	bf36      	itet	cc
 8089a2a:	fbb6 f2f4 	udivcc	r2, r6, r4
 8089a2e:	4622      	movcs	r2, r4
 8089a30:	fb04 6212 	mlscc	r2, r4, r2, r6

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
 8089a34:	9842      	ldr	r0, [sp, #264]	; 0x108
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;

        for( j = 0; j < k; j++ )
 8089a36:	2300      	movs	r3, #0
            dstbuf[i + j]  = h_i[j];
 8089a38:	4481      	add	r9, r0
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;

        for( j = 0; j < k; j++ )
 8089a3a:	4293      	cmp	r3, r2
 8089a3c:	d101      	bne.n	8089a42 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xe6>

        mbedtls_md_hmac_reset ( &md_ctx );
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
 8089a3e:	4689      	mov	r9, r1
 8089a40:	e7d5      	b.n	80899ee <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x92>

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
 8089a42:	f818 0003 	ldrb.w	r0, [r8, r3]
 8089a46:	f809 0003 	strb.w	r0, [r9, r3]
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;

        for( j = 0; j < k; j++ )
 8089a4a:	3301      	adds	r3, #1
 8089a4c:	e7f5      	b.n	8089a3a <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xde>
            dstbuf[i + j]  = h_i[j];
    }

    mbedtls_md_free( &md_ctx );
 8089a4e:	f7fe f9f8 	bl	8087e42 <mbedtls_md_free>

    mbedtls_zeroize( tmp, sizeof( tmp ) );
 8089a52:	2180      	movs	r1, #128	; 0x80
 8089a54:	a816      	add	r0, sp, #88	; 0x58
 8089a56:	f7ff ff25 	bl	80898a4 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( h_i, sizeof( h_i ) );
 8089a5a:	4640      	mov	r0, r8
 8089a5c:	2140      	movs	r1, #64	; 0x40
 8089a5e:	f7ff ff21 	bl	80898a4 <_ZL15mbedtls_zeroizePvj>

    return( 0 );
 8089a62:	2000      	movs	r0, #0
 8089a64:	e002      	b.n	8089a6c <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x110>
    int ret;

    mbedtls_md_init( &md_ctx );

    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8089a66:	4803      	ldr	r0, [pc, #12]	; (8089a74 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x118>)
 8089a68:	e000      	b.n	8089a6c <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x110>

    md_len = mbedtls_md_get_size( md_info );

    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8089a6a:	4803      	ldr	r0, [pc, #12]	; (8089a78 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x11c>)

    mbedtls_zeroize( tmp, sizeof( tmp ) );
    mbedtls_zeroize( h_i, sizeof( h_i ) );

    return( 0 );
}
 8089a6c:	b037      	add	sp, #220	; 0xdc
 8089a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8089a72:	bf00      	nop
 8089a74:	ffff9400 	.word	0xffff9400
 8089a78:	ffff8f00 	.word	0xffff8f00

08089a7c <_ZL14tls_prf_sha256PKhjPKcS0_jPhj>:
#if defined(MBEDTLS_SHA256_C)
static int tls_prf_sha256( const unsigned char *secret, size_t slen,
                           const char *label,
                           const unsigned char *random, size_t rlen,
                           unsigned char *dstbuf, size_t dlen )
{
 8089a7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA256, secret, slen,
                             label, random, rlen, dstbuf, dlen ) );
 8089a7e:	9c08      	ldr	r4, [sp, #32]
 8089a80:	9403      	str	r4, [sp, #12]
 8089a82:	9c07      	ldr	r4, [sp, #28]
 8089a84:	9402      	str	r4, [sp, #8]
 8089a86:	9c06      	ldr	r4, [sp, #24]
 8089a88:	e88d 0018 	stmia.w	sp, {r3, r4}
 8089a8c:	4613      	mov	r3, r2
 8089a8e:	460a      	mov	r2, r1
 8089a90:	4601      	mov	r1, r0
 8089a92:	2006      	movs	r0, #6
 8089a94:	f7ff ff62 	bl	808995c <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>
}
 8089a98:	b004      	add	sp, #16
 8089a9a:	bd10      	pop	{r4, pc}

08089a9c <_ZL14tls_prf_sha384PKhjPKcS0_jPhj>:
#if defined(MBEDTLS_SHA512_C)
static int tls_prf_sha384( const unsigned char *secret, size_t slen,
                           const char *label,
                           const unsigned char *random, size_t rlen,
                           unsigned char *dstbuf, size_t dlen )
{
 8089a9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA384, secret, slen,
                             label, random, rlen, dstbuf, dlen ) );
 8089a9e:	9c08      	ldr	r4, [sp, #32]
 8089aa0:	9403      	str	r4, [sp, #12]
 8089aa2:	9c07      	ldr	r4, [sp, #28]
 8089aa4:	9402      	str	r4, [sp, #8]
 8089aa6:	9c06      	ldr	r4, [sp, #24]
 8089aa8:	e88d 0018 	stmia.w	sp, {r3, r4}
 8089aac:	4613      	mov	r3, r2
 8089aae:	460a      	mov	r2, r1
 8089ab0:	4601      	mov	r1, r0
 8089ab2:	2007      	movs	r0, #7
 8089ab4:	f7ff ff52 	bl	808995c <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>
}
 8089ab8:	b004      	add	sp, #16
 8089aba:	bd10      	pop	{r4, pc}

08089abc <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi>:
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
static void ssl_calc_finished_tls_sha384(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 8089abc:	b5f0      	push	{r4, r5, r6, r7, lr}
    int len = 12;
    const char *sender;
    mbedtls_sha512_context sha512;
    unsigned char padbuf[48];

    mbedtls_ssl_session *session = ssl->session_negotiate;
 8089abe:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
static void ssl_calc_finished_tls_sha384(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 8089ac0:	b0c7      	sub	sp, #284	; 0x11c
 8089ac2:	4604      	mov	r4, r0
 8089ac4:	460f      	mov	r7, r1
 8089ac6:	4616      	mov	r6, r2
    const char *sender;
    mbedtls_sha512_context sha512;
    unsigned char padbuf[48];

    mbedtls_ssl_session *session = ssl->session_negotiate;
    if( !session )
 8089ac8:	b905      	cbnz	r5, 8089acc <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x10>
        session = ssl->session;
 8089aca:	6a85      	ldr	r5, [r0, #40]	; 0x28

    mbedtls_sha512_init( &sha512 );
 8089acc:	a810      	add	r0, sp, #64	; 0x40
 8089ace:	f004 fa1f 	bl	808df10 <mbedtls_sha512_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha384" ) );

    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
 8089ad2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8089ad4:	a810      	add	r0, sp, #64	; 0x40
 8089ad6:	3188      	adds	r1, #136	; 0x88
 8089ad8:	f004 fa28 	bl	808df2c <mbedtls_sha512_clone>
                   sha512.state, sizeof( sha512.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
 8089adc:	4b10      	ldr	r3, [pc, #64]	; (8089b20 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x64>)
 8089ade:	4911      	ldr	r1, [pc, #68]	; (8089b24 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x68>)

    mbedtls_sha512_finish_ret( &sha512, padbuf );
 8089ae0:	a810      	add	r0, sp, #64	; 0x40
                   sha512.state, sizeof( sha512.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
 8089ae2:	2e00      	cmp	r6, #0
 8089ae4:	bf0c      	ite	eq
 8089ae6:	461e      	moveq	r6, r3
 8089ae8:	460e      	movne	r6, r1

    mbedtls_sha512_finish_ret( &sha512, padbuf );
 8089aea:	a904      	add	r1, sp, #16
 8089aec:	f005 f948 	bl	808ed80 <mbedtls_sha512_finish_ret>

    ssl->handshake->tls_prf( session->master, 48, sender,
 8089af0:	6b23      	ldr	r3, [r4, #48]	; 0x30
                             padbuf, 48, buf, len );
 8089af2:	220c      	movs	r2, #12
 8089af4:	2430      	movs	r4, #48	; 0x30
 8089af6:	9202      	str	r2, [sp, #8]
 8089af8:	9701      	str	r7, [sp, #4]
 8089afa:	9400      	str	r4, [sp, #0]
 8089afc:	4632      	mov	r2, r6
 8089afe:	4621      	mov	r1, r4
 8089b00:	f8d3 716c 	ldr.w	r7, [r3, #364]	; 0x16c
 8089b04:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 8089b08:	ab04      	add	r3, sp, #16
 8089b0a:	47b8      	blx	r7

    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );

    mbedtls_sha512_free( &sha512 );
 8089b0c:	a810      	add	r0, sp, #64	; 0x40
 8089b0e:	f004 fa03 	bl	808df18 <mbedtls_sha512_free>

    mbedtls_zeroize(  padbuf, sizeof( padbuf ) );
 8089b12:	4621      	mov	r1, r4
 8089b14:	a804      	add	r0, sp, #16
 8089b16:	f7ff fec5 	bl	80898a4 <_ZL15mbedtls_zeroizePvj>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
}
 8089b1a:	b047      	add	sp, #284	; 0x11c
 8089b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8089b1e:	bf00      	nop
 8089b20:	08095de1 	.word	0x08095de1
 8089b24:	08095df1 	.word	0x08095df1

08089b28 <_ZL26ssl_calc_verify_tls_sha384P19mbedtls_ssl_contextPh>:
}
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
void ssl_calc_verify_tls_sha384( mbedtls_ssl_context *ssl, unsigned char hash[48] )
{
 8089b28:	b530      	push	{r4, r5, lr}
 8089b2a:	4605      	mov	r5, r0
 8089b2c:	460c      	mov	r4, r1
 8089b2e:	b0b7      	sub	sp, #220	; 0xdc
    mbedtls_sha512_context sha512;

    mbedtls_sha512_init( &sha512 );
 8089b30:	4668      	mov	r0, sp
 8089b32:	f004 f9ed 	bl	808df10 <mbedtls_sha512_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha384" ) );

    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
 8089b36:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8089b38:	4668      	mov	r0, sp
 8089b3a:	3188      	adds	r1, #136	; 0x88
 8089b3c:	f004 f9f6 	bl	808df2c <mbedtls_sha512_clone>
    mbedtls_sha512_finish_ret( &sha512, hash );
 8089b40:	4621      	mov	r1, r4
 8089b42:	4668      	mov	r0, sp
 8089b44:	f005 f91c 	bl	808ed80 <mbedtls_sha512_finish_ret>

    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 48 );
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );

    mbedtls_sha512_free( &sha512 );
 8089b48:	4668      	mov	r0, sp
 8089b4a:	f004 f9e5 	bl	808df18 <mbedtls_sha512_free>

    return;
}
 8089b4e:	b037      	add	sp, #220	; 0xdc
 8089b50:	bd30      	pop	{r4, r5, pc}
	...

08089b54 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context>:

/* Append a new keycert entry to a (possibly empty) list */
static int ssl_append_key_cert( mbedtls_ssl_key_cert **head,
                                mbedtls_x509_crt *cert,
                                mbedtls_pk_context *key )
{
 8089b54:	b570      	push	{r4, r5, r6, lr}
 8089b56:	4604      	mov	r4, r0
 8089b58:	460e      	mov	r6, r1
    mbedtls_ssl_key_cert *new_cert;

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
 8089b5a:	2001      	movs	r0, #1
 8089b5c:	210c      	movs	r1, #12

/* Append a new keycert entry to a (possibly empty) list */
static int ssl_append_key_cert( mbedtls_ssl_key_cert **head,
                                mbedtls_x509_crt *cert,
                                mbedtls_pk_context *key )
{
 8089b5e:	4615      	mov	r5, r2
    mbedtls_ssl_key_cert *new_cert;

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
 8089b60:	f009 ffe8 	bl	8093b34 <calloc>
    if( new_cert == NULL )
 8089b64:	b178      	cbz	r0, 8089b86 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x32>
    new_cert->cert = cert;
    new_cert->key  = key;
    new_cert->next = NULL;

    /* Update head is the list was null, else add to the end */
    if( *head == NULL )
 8089b66:	6822      	ldr	r2, [r4, #0]
    if( new_cert == NULL )
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

    new_cert->cert = cert;
    new_cert->key  = key;
    new_cert->next = NULL;
 8089b68:	2300      	movs	r3, #0

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
    if( new_cert == NULL )
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

    new_cert->cert = cert;
 8089b6a:	6006      	str	r6, [r0, #0]
    new_cert->key  = key;
 8089b6c:	6045      	str	r5, [r0, #4]
    new_cert->next = NULL;
 8089b6e:	6083      	str	r3, [r0, #8]

    /* Update head is the list was null, else add to the end */
    if( *head == NULL )
 8089b70:	b912      	cbnz	r2, 8089b78 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x24>
    {
        *head = new_cert;
 8089b72:	6020      	str	r0, [r4, #0]
        while( cur->next != NULL )
            cur = cur->next;
        cur->next = new_cert;
    }

    return( 0 );
 8089b74:	4610      	mov	r0, r2
 8089b76:	bd70      	pop	{r4, r5, r6, pc}
        *head = new_cert;
    }
    else
    {
        mbedtls_ssl_key_cert *cur = *head;
        while( cur->next != NULL )
 8089b78:	6893      	ldr	r3, [r2, #8]
 8089b7a:	b10b      	cbz	r3, 8089b80 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x2c>
 8089b7c:	461a      	mov	r2, r3
 8089b7e:	e7fb      	b.n	8089b78 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x24>
            cur = cur->next;
        cur->next = new_cert;
 8089b80:	6090      	str	r0, [r2, #8]
    }

    return( 0 );
 8089b82:	4618      	mov	r0, r3
 8089b84:	bd70      	pop	{r4, r5, r6, pc}
{
    mbedtls_ssl_key_cert *new_cert;

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
    if( new_cert == NULL )
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 8089b86:	4801      	ldr	r0, [pc, #4]	; (8089b8c <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x38>)
            cur = cur->next;
        cur->next = new_cert;
    }

    return( 0 );
}
 8089b88:	bd70      	pop	{r4, r5, r6, pc}
 8089b8a:	bf00      	nop
 8089b8c:	ffff8100 	.word	0xffff8100

08089b90 <_ZL26ssl_update_checksum_sha256P19mbedtls_ssl_contextPKhj>:
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_update_checksum_sha256( mbedtls_ssl_context *ssl,
                                        const unsigned char *buf, size_t len )
{
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
 8089b90:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8089b92:	3018      	adds	r0, #24
 8089b94:	f7f9 b97c 	b.w	8082e90 <mbedtls_sha256_update_ret>

08089b98 <_ZL26ssl_update_checksum_sha384P19mbedtls_ssl_contextPKhj>:

#if defined(MBEDTLS_SHA512_C)
static void ssl_update_checksum_sha384( mbedtls_ssl_context *ssl,
                                        const unsigned char *buf, size_t len )
{
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
 8089b98:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8089b9a:	3088      	adds	r0, #136	; 0x88
 8089b9c:	f005 b8a8 	b.w	808ecf0 <mbedtls_sha512_update_ret>

08089ba0 <_ZL25ssl_update_checksum_startP19mbedtls_ssl_contextPKhj>:
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
}

static void ssl_update_checksum_start( mbedtls_ssl_context *ssl,
                                       const unsigned char *buf, size_t len )
{
 8089ba0:	b570      	push	{r4, r5, r6, lr}
 8089ba2:	4604      	mov	r4, r0
 8089ba4:	460d      	mov	r5, r1
 8089ba6:	4616      	mov	r6, r2
     mbedtls_md5_update_ret( &ssl->handshake->fin_md5 , buf, len );
    mbedtls_sha1_update_ret( &ssl->handshake->fin_sha1, buf, len );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
 8089ba8:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8089baa:	3018      	adds	r0, #24
 8089bac:	f7f9 f970 	bl	8082e90 <mbedtls_sha256_update_ret>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
 8089bb0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8089bb2:	4632      	mov	r2, r6
 8089bb4:	4629      	mov	r1, r5
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
}
 8089bb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
 8089bba:	3088      	adds	r0, #136	; 0x88
 8089bbc:	f005 b898 	b.w	808ecf0 <mbedtls_sha512_update_ret>

08089bc0 <mbedtls_ssl_derive_keys>:
static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
{
 8089bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t mac_key_len;
    size_t iv_copy_len;
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
 8089bc4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
 8089bc6:	6c04      	ldr	r4, [r0, #64]	; 0x40
static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
{
 8089bc8:	b0d7      	sub	sp, #348	; 0x15c
    size_t mac_key_len;
    size_t iv_copy_len;
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
 8089bca:	9305      	str	r3, [sp, #20]
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );

    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
 8089bcc:	6823      	ldr	r3, [r4, #0]
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;
 8089bce:	6b05      	ldr	r5, [r0, #48]	; 0x30
static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
{
 8089bd0:	4680      	mov	r8, r0
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );

    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
 8089bd2:	7a18      	ldrb	r0, [r3, #8]
 8089bd4:	f7f9 fc92 	bl	80834fc <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
 8089bd8:	4606      	mov	r6, r0
 8089bda:	b908      	cbnz	r0, 8089be0 <mbedtls_ssl_derive_keys+0x20>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "cipher info for %d not found",
                            transform->ciphersuite_info->cipher ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8089bdc:	48a5      	ldr	r0, [pc, #660]	; (8089e74 <mbedtls_ssl_derive_keys+0x2b4>)
 8089bde:	e145      	b.n	8089e6c <mbedtls_ssl_derive_keys+0x2ac>
    }

    md_info = mbedtls_md_info_from_type( transform->ciphersuite_info->mac );
 8089be0:	6823      	ldr	r3, [r4, #0]
 8089be2:	7a58      	ldrb	r0, [r3, #9]
 8089be4:	f7fe f91c 	bl	8087e20 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8089be8:	4682      	mov	sl, r0
 8089bea:	2800      	cmp	r0, #0
 8089bec:	d0f6      	beq.n	8089bdc <mbedtls_ssl_derive_keys+0x1c>
    }
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
 8089bee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8089bf2:	2b03      	cmp	r3, #3
 8089bf4:	d001      	beq.n	8089bfa <mbedtls_ssl_derive_keys+0x3a>
    else
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8089bf6:	48a0      	ldr	r0, [pc, #640]	; (8089e78 <mbedtls_ssl_derive_keys+0x2b8>)
 8089bf8:	e138      	b.n	8089e6c <mbedtls_ssl_derive_keys+0x2ac>
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
        transform->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
 8089bfa:	6823      	ldr	r3, [r4, #0]
    }
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
 8089bfc:	7a5b      	ldrb	r3, [r3, #9]
 8089bfe:	2b07      	cmp	r3, #7
 8089c00:	d107      	bne.n	8089c12 <mbedtls_ssl_derive_keys+0x52>
        transform->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
    {
        handshake->tls_prf = tls_prf_sha384;
 8089c02:	4b9e      	ldr	r3, [pc, #632]	; (8089e7c <mbedtls_ssl_derive_keys+0x2bc>)
 8089c04:	f8c5 316c 	str.w	r3, [r5, #364]	; 0x16c
        handshake->calc_verify = ssl_calc_verify_tls_sha384;
 8089c08:	4b9d      	ldr	r3, [pc, #628]	; (8089e80 <mbedtls_ssl_derive_keys+0x2c0>)
 8089c0a:	f8c5 3164 	str.w	r3, [r5, #356]	; 0x164
        handshake->calc_finished = ssl_calc_finished_tls_sha384;
 8089c0e:	4b9d      	ldr	r3, [pc, #628]	; (8089e84 <mbedtls_ssl_derive_keys+0x2c4>)
 8089c10:	e006      	b.n	8089c20 <mbedtls_ssl_derive_keys+0x60>
    else
#endif
#if defined(MBEDTLS_SHA256_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
    {
        handshake->tls_prf = tls_prf_sha256;
 8089c12:	4b9d      	ldr	r3, [pc, #628]	; (8089e88 <mbedtls_ssl_derive_keys+0x2c8>)
 8089c14:	f8c5 316c 	str.w	r3, [r5, #364]	; 0x16c
        handshake->calc_verify = ssl_calc_verify_tls_sha256;
 8089c18:	4b9c      	ldr	r3, [pc, #624]	; (8089e8c <mbedtls_ssl_derive_keys+0x2cc>)
 8089c1a:	f8c5 3164 	str.w	r3, [r5, #356]	; 0x164
        handshake->calc_finished = ssl_calc_finished_tls_sha256;
 8089c1e:	4b9c      	ldr	r3, [pc, #624]	; (8089e90 <mbedtls_ssl_derive_keys+0x2d0>)
 8089c20:	f8c5 3168 	str.w	r3, [r5, #360]	; 0x168
     *     MD5( premaster + SHA1( 'CCC' + premaster + randbytes ) )
     *
     * TLSv1+:
     *   master = PRF( premaster, "master secret", randbytes )[0..47]
     */
    if( handshake->resume == 0 )
 8089c24:	f8d5 31e4 	ldr.w	r3, [r5, #484]	; 0x1e4
 8089c28:	f505 7bda 	add.w	fp, r5, #436	; 0x1b4
 8089c2c:	f505 79ba 	add.w	r9, r5, #372	; 0x174
 8089c30:	b9ab      	cbnz	r3, 8089c5e <mbedtls_ssl_derive_keys+0x9e>
        else
#endif
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
                                  "master secret",
                                  handshake->randbytes, 64,
                                  session->master, 48 );
 8089c32:	2330      	movs	r3, #48	; 0x30
 8089c34:	9302      	str	r3, [sp, #8]
            }

        }
        else
#endif
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 8089c36:	9b05      	ldr	r3, [sp, #20]
                                  "master secret",
                                  handshake->randbytes, 64,
                                  session->master, 48 );
 8089c38:	4a96      	ldr	r2, [pc, #600]	; (8089e94 <mbedtls_ssl_derive_keys+0x2d4>)
            }

        }
        else
#endif
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 8089c3a:	332c      	adds	r3, #44	; 0x2c
                                  "master secret",
                                  handshake->randbytes, 64,
                                  session->master, 48 );
 8089c3c:	9301      	str	r3, [sp, #4]
 8089c3e:	2340      	movs	r3, #64	; 0x40
 8089c40:	9300      	str	r3, [sp, #0]
 8089c42:	f8d5 1170 	ldr.w	r1, [r5, #368]	; 0x170
 8089c46:	464b      	mov	r3, r9
 8089c48:	4658      	mov	r0, fp
 8089c4a:	f8d5 716c 	ldr.w	r7, [r5, #364]	; 0x16c
 8089c4e:	47b8      	blx	r7
        if( ret != 0 )
 8089c50:	2800      	cmp	r0, #0
 8089c52:	f040 810b 	bne.w	8089e6c <mbedtls_ssl_derive_keys+0x2ac>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
            return( ret );
        }

        mbedtls_zeroize( handshake->premaster, sizeof(handshake->premaster) );
 8089c56:	2130      	movs	r1, #48	; 0x30
 8089c58:	4658      	mov	r0, fp
 8089c5a:	f7ff fe23 	bl	80898a4 <_ZL15mbedtls_zeroizePvj>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "no premaster (session resumed)" ) );

    /*
     * Swap the client and server random values.
     */
    memcpy( tmp, handshake->randbytes, 64 );
 8089c5e:	464b      	mov	r3, r9
 8089c60:	af06      	add	r7, sp, #24
 8089c62:	463a      	mov	r2, r7
 8089c64:	6818      	ldr	r0, [r3, #0]
 8089c66:	6859      	ldr	r1, [r3, #4]
 8089c68:	3308      	adds	r3, #8
 8089c6a:	c203      	stmia	r2!, {r0, r1}
 8089c6c:	455b      	cmp	r3, fp
 8089c6e:	4617      	mov	r7, r2
 8089c70:	d1f7      	bne.n	8089c62 <mbedtls_ssl_derive_keys+0xa2>
    memcpy( handshake->randbytes, tmp + 32, 32 );
 8089c72:	464f      	mov	r7, r9
 8089c74:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
 8089c78:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
 8089c7c:	4673      	mov	r3, lr
 8089c7e:	cb03      	ldmia	r3!, {r0, r1}
 8089c80:	455b      	cmp	r3, fp
 8089c82:	6038      	str	r0, [r7, #0]
 8089c84:	6079      	str	r1, [r7, #4]
 8089c86:	469e      	mov	lr, r3
 8089c88:	f107 0708 	add.w	r7, r7, #8
 8089c8c:	d1f6      	bne.n	8089c7c <mbedtls_ssl_derive_keys+0xbc>
    memcpy( handshake->randbytes + 32, tmp, 32 );
 8089c8e:	f10d 0e18 	add.w	lr, sp, #24
 8089c92:	f505 77ca 	add.w	r7, r5, #404	; 0x194
 8089c96:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 8089c9a:	4673      	mov	r3, lr
 8089c9c:	cb03      	ldmia	r3!, {r0, r1}
 8089c9e:	4563      	cmp	r3, ip
 8089ca0:	6038      	str	r0, [r7, #0]
 8089ca2:	6079      	str	r1, [r7, #4]
 8089ca4:	469e      	mov	lr, r3
 8089ca6:	f107 0708 	add.w	r7, r7, #8
 8089caa:	d1f6      	bne.n	8089c9a <mbedtls_ssl_derive_keys+0xda>
    mbedtls_zeroize( tmp, sizeof( tmp ) );
 8089cac:	2140      	movs	r1, #64	; 0x40
 8089cae:	a806      	add	r0, sp, #24
 8089cb0:	f7ff fdf8 	bl	80898a4 <_ZL15mbedtls_zeroizePvj>
     *      ...
     *
     *  TLSv1:
     *    key block = PRF( master, "key expansion", randbytes )
     */
    ret = handshake->tls_prf( session->master, 48, "key expansion",
 8089cb4:	9f05      	ldr	r7, [sp, #20]
                              handshake->randbytes, 64, keyblk, 256 );
 8089cb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8089cba:	f8cd b004 	str.w	fp, [sp, #4]
 8089cbe:	f04f 0b40 	mov.w	fp, #64	; 0x40
 8089cc2:	9302      	str	r3, [sp, #8]
     *      ...
     *
     *  TLSv1:
     *    key block = PRF( master, "key expansion", randbytes )
     */
    ret = handshake->tls_prf( session->master, 48, "key expansion",
 8089cc4:	372c      	adds	r7, #44	; 0x2c
                              handshake->randbytes, 64, keyblk, 256 );
 8089cc6:	f8cd b000 	str.w	fp, [sp]
 8089cca:	f8d5 516c 	ldr.w	r5, [r5, #364]	; 0x16c
 8089cce:	464b      	mov	r3, r9
 8089cd0:	4a71      	ldr	r2, [pc, #452]	; (8089e98 <mbedtls_ssl_derive_keys+0x2d8>)
 8089cd2:	2130      	movs	r1, #48	; 0x30
 8089cd4:	4638      	mov	r0, r7
 8089cd6:	47a8      	blx	r5
    if( ret != 0 )
 8089cd8:	2800      	cmp	r0, #0
 8089cda:	f040 80c7 	bne.w	8089e6c <mbedtls_ssl_derive_keys+0x2ac>
                   mbedtls_ssl_get_ciphersuite_name( session->ciphersuite ) ) );
    MBEDTLS_SSL_DEBUG_BUF( 3, "master secret", session->master, 48 );
    MBEDTLS_SSL_DEBUG_BUF( 4, "random bytes", handshake->randbytes, 64 );
    MBEDTLS_SSL_DEBUG_BUF( 4, "key block", keyblk, 256 );

    mbedtls_zeroize( handshake->randbytes, sizeof( handshake->randbytes ) );
 8089cde:	4659      	mov	r1, fp
 8089ce0:	4648      	mov	r0, r9
 8089ce2:	f7ff fddf 	bl	80898a4 <_ZL15mbedtls_zeroizePvj>

    /*
     * Determine the appropriate key, IV and MAC length.
     */

    transform->keylen = cipher_info->key_bitlen / 8;
 8089ce6:	6873      	ldr	r3, [r6, #4]
 8089ce8:	08db      	lsrs	r3, r3, #3
 8089cea:	6063      	str	r3, [r4, #4]

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
 8089cec:	7873      	ldrb	r3, [r6, #1]
 8089cee:	2b06      	cmp	r3, #6
 8089cf0:	d001      	beq.n	8089cf6 <mbedtls_ssl_derive_keys+0x136>
 8089cf2:	2b08      	cmp	r3, #8
 8089cf4:	d10f      	bne.n	8089d16 <mbedtls_ssl_derive_keys+0x156>
        cipher_info->mode == MBEDTLS_MODE_CCM )
    {
        transform->maclen = 0;
        mac_key_len = 0;

        transform->ivlen = 12;
 8089cf6:	220c      	movs	r2, #12
 8089cf8:	60e2      	str	r2, [r4, #12]
        transform->fixed_ivlen = 4;
 8089cfa:	2204      	movs	r2, #4
    transform->keylen = cipher_info->key_bitlen / 8;

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
        cipher_info->mode == MBEDTLS_MODE_CCM )
    {
        transform->maclen = 0;
 8089cfc:	2300      	movs	r3, #0
        mac_key_len = 0;

        transform->ivlen = 12;
        transform->fixed_ivlen = 4;
 8089cfe:	6122      	str	r2, [r4, #16]

        /* Minimum length is expicit IV + tag */
        transform->minlen = transform->ivlen - transform->fixed_ivlen
                            + ( transform->ciphersuite_info->flags &
 8089d00:	6822      	ldr	r2, [r4, #0]
    transform->keylen = cipher_info->key_bitlen / 8;

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
        cipher_info->mode == MBEDTLS_MODE_CCM )
    {
        transform->maclen = 0;
 8089d02:	6163      	str	r3, [r4, #20]
        transform->ivlen = 12;
        transform->fixed_ivlen = 4;

        /* Minimum length is expicit IV + tag */
        transform->minlen = transform->ivlen - transform->fixed_ivlen
                            + ( transform->ciphersuite_info->flags &
 8089d04:	7f12      	ldrb	r2, [r2, #28]

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
        cipher_info->mode == MBEDTLS_MODE_CCM )
    {
        transform->maclen = 0;
        mac_key_len = 0;
 8089d06:	469a      	mov	sl, r3
        transform->ivlen = 12;
        transform->fixed_ivlen = 4;

        /* Minimum length is expicit IV + tag */
        transform->minlen = transform->ivlen - transform->fixed_ivlen
                            + ( transform->ciphersuite_info->flags &
 8089d08:	f012 0f02 	tst.w	r2, #2
                                MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16 );
 8089d0c:	bf14      	ite	ne
 8089d0e:	2210      	movne	r2, #16
 8089d10:	2218      	moveq	r2, #24
 8089d12:	60a2      	str	r2, [r4, #8]
 8089d14:	e01d      	b.n	8089d52 <mbedtls_ssl_derive_keys+0x192>
    }
    else
    {
        /* Initialize HMAC contexts */
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
 8089d16:	2201      	movs	r2, #1
 8089d18:	4651      	mov	r1, sl
 8089d1a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8089d1e:	f7fe f8b1 	bl	8087e84 <mbedtls_md_setup>
 8089d22:	2800      	cmp	r0, #0
 8089d24:	f040 80a2 	bne.w	8089e6c <mbedtls_ssl_derive_keys+0x2ac>
 8089d28:	2201      	movs	r2, #1
 8089d2a:	4651      	mov	r1, sl
 8089d2c:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8089d30:	f7fe f8a8 	bl	8087e84 <mbedtls_md_setup>
 8089d34:	2800      	cmp	r0, #0
 8089d36:	f040 8099 	bne.w	8089e6c <mbedtls_ssl_derive_keys+0x2ac>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
            return( ret );
        }

        /* Get MAC length */
        mac_key_len = mbedtls_md_get_size( md_info );
 8089d3a:	4650      	mov	r0, sl
 8089d3c:	f7fe f9b4 	bl	80880a8 <mbedtls_md_get_size>
        transform->maclen = mac_key_len;
 8089d40:	6160      	str	r0, [r4, #20]
#endif
        }
#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */

        /* IV length */
        transform->ivlen = cipher_info->iv_size;
 8089d42:	68f1      	ldr	r1, [r6, #12]
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
            return( ret );
        }

        /* Get MAC length */
        mac_key_len = mbedtls_md_get_size( md_info );
 8089d44:	4682      	mov	sl, r0
#endif
        }
#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */

        /* IV length */
        transform->ivlen = cipher_info->iv_size;
 8089d46:	60e1      	str	r1, [r4, #12]

        /* Minimum length */
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
 8089d48:	7873      	ldrb	r3, [r6, #1]
 8089d4a:	2b07      	cmp	r3, #7
 8089d4c:	d17f      	bne.n	8089e4e <mbedtls_ssl_derive_keys+0x28e>
            transform->minlen = transform->maclen;
 8089d4e:	f8c4 a008 	str.w	sl, [r4, #8]

    /*
     * Finally setup the cipher contexts, IVs and MAC secrets.
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 8089d52:	f8d8 3000 	ldr.w	r3, [r8]
 8089d56:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8089d5a:	07db      	lsls	r3, r3, #31
 8089d5c:	f53f af4b 	bmi.w	8089bf6 <mbedtls_ssl_derive_keys+0x36>
    {
        key1 = keyblk + mac_key_len * 2;
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
 8089d60:	6863      	ldr	r3, [r4, #4]
     * Finally setup the cipher contexts, IVs and MAC secrets.
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
    {
        key1 = keyblk + mac_key_len * 2;
 8089d62:	ea4f 094a 	mov.w	r9, sl, lsl #1
        mac_dec = keyblk + mac_key_len;

        /*
         * This is not used in TLS v1.1.
         */
        iv_copy_len = ( transform->fixed_ivlen ) ?
 8089d66:	f8d4 b010 	ldr.w	fp, [r4, #16]
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
    {
        key1 = keyblk + mac_key_len * 2;
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
 8089d6a:	eb09 0503 	add.w	r5, r9, r3
 8089d6e:	aa16      	add	r2, sp, #88	; 0x58
 8089d70:	4415      	add	r5, r2

        /*
         * This is not used in TLS v1.1.
         */
        iv_copy_len = ( transform->fixed_ivlen ) ?
                            transform->fixed_ivlen : transform->ivlen;
 8089d72:	f1bb 0f00 	cmp.w	fp, #0
 8089d76:	d101      	bne.n	8089d7c <mbedtls_ssl_derive_keys+0x1bc>
 8089d78:	f8d4 b00c 	ldr.w	fp, [r4, #12]
        memcpy( transform->iv_enc, key2 + transform->keylen,  iv_copy_len );
 8089d7c:	18e9      	adds	r1, r5, r3
 8089d7e:	465a      	mov	r2, fp
 8089d80:	f104 0018 	add.w	r0, r4, #24
 8089d84:	9305      	str	r3, [sp, #20]
 8089d86:	f009 fefa 	bl	8093b7e <memcpy>
        memcpy( transform->iv_dec, key2 + transform->keylen + iv_copy_len,
                iv_copy_len );
 8089d8a:	9b05      	ldr	r3, [sp, #20]
 8089d8c:	465a      	mov	r2, fp
 8089d8e:	eb0b 0103 	add.w	r1, fp, r3
 8089d92:	4429      	add	r1, r5
 8089d94:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8089d98:	f009 fef1 	bl	8093b7e <memcpy>
    }
    else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 8089d9c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8089da0:	2b00      	cmp	r3, #0
 8089da2:	f77f af28 	ble.w	8089bf6 <mbedtls_ssl_derive_keys+0x36>
    {
        /* For HMAC-based ciphersuites, initialize the HMAC transforms.
           For AEAD-based ciphersuites, there is nothing to do here. */
        if( mac_key_len != 0 )
 8089da6:	f1ba 0f00 	cmp.w	sl, #0
 8089daa:	d00d      	beq.n	8089dc8 <mbedtls_ssl_derive_keys+0x208>
        {
            mbedtls_md_hmac_starts( &transform->md_ctx_enc, mac_enc, mac_key_len );
 8089dac:	4652      	mov	r2, sl
 8089dae:	a916      	add	r1, sp, #88	; 0x58
 8089db0:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8089db4:	f7fe f8b6 	bl	8087f24 <mbedtls_md_hmac_starts>
            mbedtls_md_hmac_starts( &transform->md_ctx_dec, mac_dec, mac_key_len );
 8089db8:	ab16      	add	r3, sp, #88	; 0x58
 8089dba:	4652      	mov	r2, sl
 8089dbc:	eb03 010a 	add.w	r1, r3, sl
 8089dc0:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8089dc4:	f7fe f8ae 	bl	8087f24 <mbedtls_md_hmac_starts>
        }
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */

#if defined(MBEDTLS_SSL_EXPORT_KEYS)
    if( ssl->conf->f_export_keys != NULL )
 8089dc8:	f8d8 0000 	ldr.w	r0, [r8]
 8089dcc:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8089dd0:	f1b8 0f00 	cmp.w	r8, #0
 8089dd4:	d008      	beq.n	8089de8 <mbedtls_ssl_derive_keys+0x228>
    {
        ssl->conf->f_export_keys( ssl->conf->p_export_keys,
                                  session->master, keyblk,
                                  mac_key_len, transform->keylen,
                                  iv_copy_len );
 8089dd6:	f8cd b004 	str.w	fp, [sp, #4]
 8089dda:	6863      	ldr	r3, [r4, #4]
 8089ddc:	aa16      	add	r2, sp, #88	; 0x58
 8089dde:	9300      	str	r3, [sp, #0]
 8089de0:	4639      	mov	r1, r7
 8089de2:	4653      	mov	r3, sl
 8089de4:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8089de6:	47c0      	blx	r8
    }
#endif

    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_enc,
 8089de8:	f104 0750 	add.w	r7, r4, #80	; 0x50
 8089dec:	4631      	mov	r1, r6
 8089dee:	4638      	mov	r0, r7
 8089df0:	f7f9 fd7a 	bl	80838e8 <mbedtls_cipher_setup>
 8089df4:	2800      	cmp	r0, #0
 8089df6:	d139      	bne.n	8089e6c <mbedtls_ssl_derive_keys+0x2ac>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
        return( ret );
    }

    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_dec,
 8089df8:	3490      	adds	r4, #144	; 0x90
 8089dfa:	4631      	mov	r1, r6
 8089dfc:	4620      	mov	r0, r4
 8089dfe:	f7f9 fd73 	bl	80838e8 <mbedtls_cipher_setup>
 8089e02:	bb98      	cbnz	r0, 8089e6c <mbedtls_ssl_derive_keys+0x2ac>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
        return( ret );
    }

    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_enc, key1,
 8089e04:	a916      	add	r1, sp, #88	; 0x58
 8089e06:	2301      	movs	r3, #1
 8089e08:	6872      	ldr	r2, [r6, #4]
 8089e0a:	4449      	add	r1, r9
 8089e0c:	4638      	mov	r0, r7
 8089e0e:	f7f9 fbad 	bl	808356c <mbedtls_cipher_setkey>
 8089e12:	bb58      	cbnz	r0, 8089e6c <mbedtls_ssl_derive_keys+0x2ac>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
        return( ret );
    }

    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_dec, key2,
 8089e14:	4603      	mov	r3, r0
 8089e16:	6872      	ldr	r2, [r6, #4]
 8089e18:	4629      	mov	r1, r5
 8089e1a:	4620      	mov	r0, r4
 8089e1c:	f7f9 fba6 	bl	808356c <mbedtls_cipher_setkey>
 8089e20:	bb20      	cbnz	r0, 8089e6c <mbedtls_ssl_derive_keys+0x2ac>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
        return( ret );
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( cipher_info->mode == MBEDTLS_MODE_CBC )
 8089e22:	7873      	ldrb	r3, [r6, #1]
 8089e24:	2b02      	cmp	r3, #2
 8089e26:	d006      	beq.n	8089e36 <mbedtls_ssl_derive_keys+0x276>
            return( ret );
        }
    }
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    mbedtls_zeroize( keyblk, sizeof( keyblk ) );
 8089e28:	a816      	add	r0, sp, #88	; 0x58
 8089e2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8089e2e:	f7ff fd39 	bl	80898a4 <_ZL15mbedtls_zeroizePvj>
    }
#endif /* MBEDTLS_ZLIB_SUPPORT */

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= derive keys" ) );

    return( 0 );
 8089e32:	2000      	movs	r0, #0
 8089e34:	e01a      	b.n	8089e6c <mbedtls_ssl_derive_keys+0x2ac>
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( cipher_info->mode == MBEDTLS_MODE_CBC )
    {
        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_enc,
 8089e36:	2104      	movs	r1, #4
 8089e38:	4638      	mov	r0, r7
 8089e3a:	f7f9 fd17 	bl	808386c <mbedtls_cipher_set_padding_mode>
 8089e3e:	b9a8      	cbnz	r0, 8089e6c <mbedtls_ssl_derive_keys+0x2ac>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_set_padding_mode", ret );
            return( ret );
        }

        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_dec,
 8089e40:	2104      	movs	r1, #4
 8089e42:	4620      	mov	r0, r4
 8089e44:	f7f9 fd12 	bl	808386c <mbedtls_cipher_set_padding_mode>
 8089e48:	2800      	cmp	r0, #0
 8089e4a:	d0ed      	beq.n	8089e28 <mbedtls_ssl_derive_keys+0x268>
 8089e4c:	e00e      	b.n	8089e6c <mbedtls_ssl_derive_keys+0x2ac>
            }
            else
#endif
            {
                transform->minlen = transform->maclen
                                  + cipher_info->block_size
 8089e4e:	6973      	ldr	r3, [r6, #20]
                                  - transform->maclen % cipher_info->block_size;
 8089e50:	fbba f2f3 	udiv	r2, sl, r3
 8089e54:	fb03 3302 	mla	r3, r3, r2, r3
 8089e58:	60a3      	str	r3, [r4, #8]
                ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_1 )
                ; /* No need to adjust minlen */
            else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
 8089e5a:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8089e5e:	3a02      	subs	r2, #2
 8089e60:	2a01      	cmp	r2, #1
 8089e62:	f63f aec8 	bhi.w	8089bf6 <mbedtls_ssl_derive_keys+0x36>
                ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
            {
                transform->minlen += transform->ivlen;
 8089e66:	440b      	add	r3, r1
 8089e68:	60a3      	str	r3, [r4, #8]
 8089e6a:	e772      	b.n	8089d52 <mbedtls_ssl_derive_keys+0x192>
#endif /* MBEDTLS_ZLIB_SUPPORT */

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= derive keys" ) );

    return( 0 );
}
 8089e6c:	b057      	add	sp, #348	; 0x15c
 8089e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8089e72:	bf00      	nop
 8089e74:	ffff8f00 	.word	0xffff8f00
 8089e78:	ffff9400 	.word	0xffff9400
 8089e7c:	08089a9d 	.word	0x08089a9d
 8089e80:	08089b29 	.word	0x08089b29
 8089e84:	08089abd 	.word	0x08089abd
 8089e88:	08089a7d 	.word	0x08089a7d
 8089e8c:	08089931 	.word	0x08089931
 8089e90:	080898c5 	.word	0x080898c5
 8089e94:	08095e01 	.word	0x08095e01
 8089e98:	08095e0f 	.word	0x08095e0f

08089e9c <mbedtls_ssl_fetch_input>:
 *
 * For DTLS, it is up to the caller to set ssl->next_record_offset when
 * they're done reading a record.
 */
int mbedtls_ssl_fetch_input( mbedtls_ssl_context *ssl, size_t nb_want )
{
 8089e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret;
    size_t len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
 8089e9e:	6943      	ldr	r3, [r0, #20]
 *
 * For DTLS, it is up to the caller to set ssl->next_record_offset when
 * they're done reading a record.
 */
int mbedtls_ssl_fetch_input( mbedtls_ssl_context *ssl, size_t nb_want )
{
 8089ea0:	4604      	mov	r4, r0
 8089ea2:	460e      	mov	r6, r1
    int ret;
    size_t len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
 8089ea4:	b90b      	cbnz	r3, 8089eaa <mbedtls_ssl_fetch_input+0xe>
 8089ea6:	6983      	ldr	r3, [r0, #24]
 8089ea8:	b19b      	cbz	r3, 8089ed2 <mbedtls_ssl_fetch_input+0x36>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    }

    if( nb_want > MBEDTLS_SSL_BUFFER_LEN - (size_t)( ssl->in_hdr - ssl->in_buf ) )
 8089eaa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8089eac:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8089eae:	1a9b      	subs	r3, r3, r2
 8089eb0:	f5c3 5305 	rsb	r3, r3, #8512	; 0x2140
 8089eb4:	330d      	adds	r3, #13
 8089eb6:	42b3      	cmp	r3, r6
 8089eb8:	d30b      	bcc.n	8089ed2 <mbedtls_ssl_fetch_input+0x36>
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                       ssl->in_left, nb_want ) );

        while( ssl->in_left < nb_want )
 8089eba:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8089ebc:	42ae      	cmp	r6, r5
 8089ebe:	d90a      	bls.n	8089ed6 <mbedtls_ssl_fetch_input+0x3a>
/*
 * Return -1 is timer is expired, 0 if it isn't.
 */
static int ssl_check_timer( mbedtls_ssl_context *ssl )
{
    if( ssl->f_get_timer == NULL )
 8089ec0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                       ssl->in_left, nb_want ) );

        while( ssl->in_left < nb_want )
        {
            len = nb_want - ssl->in_left;
 8089ec2:	1b75      	subs	r5, r6, r5
/*
 * Return -1 is timer is expired, 0 if it isn't.
 */
static int ssl_check_timer( mbedtls_ssl_context *ssl )
{
    if( ssl->f_get_timer == NULL )
 8089ec4:	b14b      	cbz	r3, 8089eda <mbedtls_ssl_fetch_input+0x3e>
        return( 0 );

    if( ssl->f_get_timer( ssl->p_timer ) == 2 )
 8089ec6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8089ec8:	4798      	blx	r3
 8089eca:	2802      	cmp	r0, #2
 8089ecc:	d105      	bne.n	8089eda <mbedtls_ssl_fetch_input+0x3e>
        while( ssl->in_left < nb_want )
        {
            len = nb_want - ssl->in_left;

            if( ssl_check_timer( ssl ) != 0 )
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
 8089ece:	4812      	ldr	r0, [pc, #72]	; (8089f18 <mbedtls_ssl_fetch_input+0x7c>)
 8089ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8089ed2:	4812      	ldr	r0, [pc, #72]	; (8089f1c <mbedtls_ssl_fetch_input+0x80>)
 8089ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );

    return( 0 );
 8089ed6:	2000      	movs	r0, #0
 8089ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

            if( ssl_check_timer( ssl ) != 0 )
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
            else
            {
                if( ssl->f_recv_timeout != NULL )
 8089eda:	69a7      	ldr	r7, [r4, #24]
 8089edc:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8089ede:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8089ee0:	b137      	cbz	r7, 8089ef0 <mbedtls_ssl_fetch_input+0x54>
                {
                    ret = ssl->f_recv_timeout( ssl->p_bio,
                                               ssl->in_hdr + ssl->in_left, len,
                                               ssl->conf->read_timeout );
 8089ee2:	6823      	ldr	r3, [r4, #0]
 8089ee4:	4401      	add	r1, r0
 8089ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8089ee8:	462a      	mov	r2, r5
 8089eea:	69e0      	ldr	r0, [r4, #28]
 8089eec:	47b8      	blx	r7
 8089eee:	e004      	b.n	8089efa <mbedtls_ssl_fetch_input+0x5e>
                }
                else
                {
                    ret = ssl->f_recv( ssl->p_bio,
                                       ssl->in_hdr + ssl->in_left, len );
 8089ef0:	4401      	add	r1, r0
 8089ef2:	6963      	ldr	r3, [r4, #20]
 8089ef4:	462a      	mov	r2, r5
 8089ef6:	69e0      	ldr	r0, [r4, #28]
 8089ef8:	4798      	blx	r3

            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                                        ssl->in_left, nb_want ) );
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );

            if( ret == 0 )
 8089efa:	2800      	cmp	r0, #0
 8089efc:	d006      	beq.n	8089f0c <mbedtls_ssl_fetch_input+0x70>
                return( MBEDTLS_ERR_SSL_CONN_EOF );

            if( ret < 0 )
 8089efe:	db09      	blt.n	8089f14 <mbedtls_ssl_fetch_input+0x78>
                return( ret );

            if ( (size_t)ret > len || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
 8089f00:	4285      	cmp	r5, r0
 8089f02:	d305      	bcc.n	8089f10 <mbedtls_ssl_fetch_input+0x74>
                    ( "f_recv returned %d bytes but only %lu were requested",
                    ret, (unsigned long)len ) );
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
            }

            ssl->in_left += ret;
 8089f04:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8089f06:	4418      	add	r0, r3
 8089f08:	6760      	str	r0, [r4, #116]	; 0x74
 8089f0a:	e7d6      	b.n	8089eba <mbedtls_ssl_fetch_input+0x1e>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                                        ssl->in_left, nb_want ) );
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );

            if( ret == 0 )
                return( MBEDTLS_ERR_SSL_CONN_EOF );
 8089f0c:	4804      	ldr	r0, [pc, #16]	; (8089f20 <mbedtls_ssl_fetch_input+0x84>)
 8089f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if ( (size_t)ret > len || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
            {
                MBEDTLS_SSL_DEBUG_MSG( 1,
                    ( "f_recv returned %d bytes but only %lu were requested",
                    ret, (unsigned long)len ) );
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8089f10:	4804      	ldr	r0, [pc, #16]	; (8089f24 <mbedtls_ssl_fetch_input+0x88>)
 8089f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );

    return( 0 );
}
 8089f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8089f16:	bf00      	nop
 8089f18:	ffff9800 	.word	0xffff9800
 8089f1c:	ffff8f00 	.word	0xffff8f00
 8089f20:	ffff8d80 	.word	0xffff8d80
 8089f24:	ffff9400 	.word	0xffff9400

08089f28 <mbedtls_ssl_flush_output>:

/*
 * Flush any data not yet written
 */
int mbedtls_ssl_flush_output( mbedtls_ssl_context *ssl )
{
 8089f28:	b510      	push	{r4, lr}
    int ret;
    unsigned char *buf, i;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );

    if( ssl->f_send == NULL )
 8089f2a:	6903      	ldr	r3, [r0, #16]

/*
 * Flush any data not yet written
 */
int mbedtls_ssl_flush_output( mbedtls_ssl_context *ssl )
{
 8089f2c:	4604      	mov	r4, r0
    int ret;
    unsigned char *buf, i;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );

    if( ssl->f_send == NULL )
 8089f2e:	b34b      	cbz	r3, 8089f84 <mbedtls_ssl_flush_output+0x5c>
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    }

    /* Avoid incrementing counter if data is flushed */
    if( ssl->out_left == 0 )
 8089f30:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8089f34:	b9a3      	cbnz	r3, 8089f60 <mbedtls_ssl_flush_output+0x38>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
        return( 0 );
 8089f36:	2000      	movs	r0, #0
 8089f38:	bd10      	pop	{r4, pc}
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "message length: %d, out_left: %d",
                       mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen, ssl->out_left ) );

        buf = ssl->out_hdr + mbedtls_ssl_hdr_len( ssl ) +
              ssl->out_msglen - ssl->out_left;
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
 8089f3a:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8089f3e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8089f42:	3105      	adds	r1, #5
 8089f44:	1a89      	subs	r1, r1, r2
 8089f46:	4401      	add	r1, r0
 8089f48:	6923      	ldr	r3, [r4, #16]
 8089f4a:	69e0      	ldr	r0, [r4, #28]
 8089f4c:	4798      	blx	r3

        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );

        if( ret <= 0 )
 8089f4e:	2800      	cmp	r0, #0
 8089f50:	dd1b      	ble.n	8089f8a <mbedtls_ssl_flush_output+0x62>
            return( ret );

        if( (size_t)ret > ssl->out_left || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
 8089f52:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8089f56:	4283      	cmp	r3, r0
 8089f58:	d316      	bcc.n	8089f88 <mbedtls_ssl_flush_output+0x60>
                ( "f_send returned %d bytes but only %lu bytes were sent",
                ret, (unsigned long)ssl->out_left ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_left -= ret;
 8089f5a:	1a18      	subs	r0, r3, r0
 8089f5c:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
        return( 0 );
    }

    while( ssl->out_left > 0 )
 8089f60:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 8089f64:	2a00      	cmp	r2, #0
 8089f66:	d1e8      	bne.n	8089f3a <mbedtls_ssl_flush_output+0x12>
 8089f68:	2207      	movs	r2, #7

        ssl->out_left -= ret;
    }

    for( i = 8; i > ssl_ep_len( ssl ); i-- )
        if( ++ssl->out_ctr[i - 1] != 0 )
 8089f6a:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8089f6e:	5c8b      	ldrb	r3, [r1, r2]
 8089f70:	3301      	adds	r3, #1
 8089f72:	b2db      	uxtb	r3, r3
 8089f74:	548b      	strb	r3, [r1, r2]
 8089f76:	2b00      	cmp	r3, #0
 8089f78:	d1dd      	bne.n	8089f36 <mbedtls_ssl_flush_output+0xe>
        }

        ssl->out_left -= ret;
    }

    for( i = 8; i > ssl_ep_len( ssl ); i-- )
 8089f7a:	f112 32ff 	adds.w	r2, r2, #4294967295
 8089f7e:	d2f4      	bcs.n	8089f6a <mbedtls_ssl_flush_output+0x42>

    /* The loop goes to its end iff the counter is wrapping */
    if( i == ssl_ep_len( ssl ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "outgoing message counter would wrap" ) );
        return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 8089f80:	4802      	ldr	r0, [pc, #8]	; (8089f8c <mbedtls_ssl_flush_output+0x64>)
 8089f82:	bd10      	pop	{r4, pc}

    if( ssl->f_send == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8089f84:	4802      	ldr	r0, [pc, #8]	; (8089f90 <mbedtls_ssl_flush_output+0x68>)
 8089f86:	bd10      	pop	{r4, pc}
        if( (size_t)ret > ssl->out_left || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1,
                ( "f_send returned %d bytes but only %lu bytes were sent",
                ret, (unsigned long)ssl->out_left ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8089f88:	4802      	ldr	r0, [pc, #8]	; (8089f94 <mbedtls_ssl_flush_output+0x6c>)
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );

    return( 0 );
}
 8089f8a:	bd10      	pop	{r4, pc}
 8089f8c:	ffff9480 	.word	0xffff9480
 8089f90:	ffff8f00 	.word	0xffff8f00
 8089f94:	ffff9400 	.word	0xffff9400

08089f98 <mbedtls_ssl_write_record>:
/*
 * Write current record.
 * Uses ssl->out_msgtype, ssl->out_msglen and bytes at ssl->out_msg.
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl )
{
 8089f98:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        ; /* Skip special handshake treatment when resending */
    }
    else
#endif
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 8089f9a:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
/*
 * Write current record.
 * Uses ssl->out_msgtype, ssl->out_msglen and bytes at ssl->out_msg.
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl )
{
 8089f9e:	b097      	sub	sp, #92	; 0x5c
    {
        ; /* Skip special handshake treatment when resending */
    }
    else
#endif
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 8089fa0:	2b16      	cmp	r3, #22
/*
 * Write current record.
 * Uses ssl->out_msgtype, ssl->out_msglen and bytes at ssl->out_msg.
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl )
{
 8089fa2:	4604      	mov	r4, r0
    int ret, done = 0, out_msg_type;
    size_t len = ssl->out_msglen;
 8089fa4:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
    {
        ; /* Skip special handshake treatment when resending */
    }
    else
#endif
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 8089fa8:	d11a      	bne.n	8089fe0 <mbedtls_ssl_write_record+0x48>
    {
        out_msg_type = ssl->out_msg[0];
 8089faa:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
 8089fae:	780a      	ldrb	r2, [r1, #0]

        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST &&
 8089fb0:	b11a      	cbz	r2, 8089fba <mbedtls_ssl_write_record+0x22>
 8089fb2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8089fb4:	2b00      	cmp	r3, #0
 8089fb6:	f000 8139 	beq.w	808a22c <mbedtls_ssl_write_record+0x294>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msg[1] = (unsigned char)( ( len - 4 ) >> 16 );
 8089fba:	1f2b      	subs	r3, r5, #4
 8089fbc:	0c18      	lsrs	r0, r3, #16
 8089fbe:	7048      	strb	r0, [r1, #1]
        ssl->out_msg[2] = (unsigned char)( ( len - 4 ) >>  8 );
 8089fc0:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8089fc4:	0a18      	lsrs	r0, r3, #8
 8089fc6:	7088      	strb	r0, [r1, #2]
        ssl->out_msg[3] = (unsigned char)( ( len - 4 )       );
 8089fc8:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8089fcc:	70cb      	strb	r3, [r1, #3]
            memset( ssl->out_msg + 6, 0x00, 3 );
            memcpy( ssl->out_msg + 9, ssl->out_msg + 1, 3 );
        }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST )
 8089fce:	b13a      	cbz	r2, 8089fe0 <mbedtls_ssl_write_record+0x48>
            ssl->handshake->update_checksum( ssl, ssl->out_msg, len );
 8089fd0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8089fd2:	462a      	mov	r2, r5
 8089fd4:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8089fd8:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8089fdc:	4620      	mov	r0, r4
 8089fde:	4798      	blx	r3
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done )
    {
        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
 8089fe0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8089fe4:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8089fe8:	701a      	strb	r2, [r3, #0]
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 8089fea:	68e2      	ldr	r2, [r4, #12]
                           ssl->conf->transport, ssl->out_hdr + 1 );
 8089fec:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 8089ff0:	68a1      	ldr	r1, [r4, #8]
        ver[1] = (unsigned char) minor;
 8089ff2:	709a      	strb	r2, [r3, #2]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 8089ff4:	7059      	strb	r1, [r3, #1]
    {
        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, ssl->out_hdr + 1 );

        ssl->out_len[0] = (unsigned char)( len >> 8 );
 8089ff6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8089ffa:	0a2a      	lsrs	r2, r5, #8
 8089ffc:	701a      	strb	r2, [r3, #0]
        ssl->out_len[1] = (unsigned char)( len      );
 8089ffe:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 808a002:	705d      	strb	r5, [r3, #1]

        if( ssl->transform_out != NULL )
 808a004:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 808a006:	2800      	cmp	r0, #0
 808a008:	f000 8107 	beq.w	808a21a <mbedtls_ssl_write_record+0x282>
    mbedtls_cipher_mode_t mode;
    int auth_done = 0;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );

    if( ssl->session_out == NULL || ssl->transform_out == NULL )
 808a00c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808a00e:	2b00      	cmp	r3, #0
 808a010:	f000 810c 	beq.w	808a22c <mbedtls_ssl_write_record+0x294>
 * \return       The mode of operation, or #MBEDTLS_MODE_NONE if
 *               \p ctx has not been initialized.
 */
static inline mbedtls_cipher_mode_t mbedtls_cipher_get_cipher_mode( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
 808a014:	6d05      	ldr	r5, [r0, #80]	; 0x50
 808a016:	b105      	cbz	r5, 808a01a <mbedtls_ssl_write_record+0x82>
        return MBEDTLS_MODE_NONE;

    return ctx->cipher_info->mode;
 808a018:	786d      	ldrb	r5, [r5, #1]
    mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_out->cipher_ctx_enc );

    MBEDTLS_SSL_DEBUG_BUF( 4, "before encrypt: output payload",
                      ssl->out_msg, ssl->out_msglen );

    if( ssl->out_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
 808a01a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 808a01e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 808a022:	f200 8105 	bhi.w	808a230 <mbedtls_ssl_write_record+0x298>

    /*
     * Add MAC before if needed
     */
#if defined(SSL_SOME_MODES_USE_MAC)
    if( mode == MBEDTLS_MODE_STREAM ||
 808a026:	2d07      	cmp	r5, #7
 808a028:	d001      	beq.n	808a02e <mbedtls_ssl_write_record+0x96>
 808a02a:	2d02      	cmp	r5, #2
 808a02c:	d13b      	bne.n	808a0a6 <mbedtls_ssl_write_record+0x10e>
        }
        else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
        defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 808a02e:	68e3      	ldr	r3, [r4, #12]
 808a030:	2b00      	cmp	r3, #0
 808a032:	f340 80fb 	ble.w	808a22c <mbedtls_ssl_write_record+0x294>
        {
            unsigned char mac[MBEDTLS_SSL_MAC_ADD];

            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_ctr, 8 );
 808a036:	2208      	movs	r2, #8
 808a038:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 808a03c:	3038      	adds	r0, #56	; 0x38
 808a03e:	f7fd ffd1 	bl	8087fe4 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_hdr, 3 );
 808a042:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 808a044:	2203      	movs	r2, #3
 808a046:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 808a04a:	3038      	adds	r0, #56	; 0x38
 808a04c:	f7fd ffca 	bl	8087fe4 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_len, 2 );
 808a050:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 808a052:	2202      	movs	r2, #2
 808a054:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 808a058:	3038      	adds	r0, #56	; 0x38
 808a05a:	f7fd ffc3 	bl	8087fe4 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc,
 808a05e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
                             ssl->out_msg, ssl->out_msglen );
 808a060:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 808a064:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 808a068:	3038      	adds	r0, #56	; 0x38
 808a06a:	f7fd ffbb 	bl	8087fe4 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_finish( &ssl->transform_out->md_ctx_enc, mac );
 808a06e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 808a070:	a90a      	add	r1, sp, #40	; 0x28
 808a072:	3038      	adds	r0, #56	; 0x38
 808a074:	f7fd ffc6 	bl	8088004 <mbedtls_md_hmac_finish>
            mbedtls_md_hmac_reset( &ssl->transform_out->md_ctx_enc );
 808a078:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        MBEDTLS_SSL_DEBUG_BUF( 4, "computed mac",
                       ssl->out_msg + ssl->out_msglen,
                       ssl->transform_out->maclen );

        ssl->out_msglen += ssl->transform_out->maclen;
        auth_done++;
 808a07a:	2601      	movs	r6, #1
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_hdr, 3 );
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_len, 2 );
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc,
                             ssl->out_msg, ssl->out_msglen );
            mbedtls_md_hmac_finish( &ssl->transform_out->md_ctx_enc, mac );
            mbedtls_md_hmac_reset( &ssl->transform_out->md_ctx_enc );
 808a07c:	3038      	adds	r0, #56	; 0x38
 808a07e:	f7fd fff1 	bl	8088064 <mbedtls_md_hmac_reset>

            memcpy( ssl->out_msg + ssl->out_msglen, mac, ssl->transform_out->maclen );
 808a082:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 808a086:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 808a08a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 808a08c:	4418      	add	r0, r3
 808a08e:	6952      	ldr	r2, [r2, #20]
 808a090:	a90a      	add	r1, sp, #40	; 0x28
 808a092:	f009 fd74 	bl	8093b7e <memcpy>

        MBEDTLS_SSL_DEBUG_BUF( 4, "computed mac",
                       ssl->out_msg + ssl->out_msglen,
                       ssl->transform_out->maclen );

        ssl->out_msglen += ssl->transform_out->maclen;
 808a096:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808a098:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 808a09c:	695b      	ldr	r3, [r3, #20]
 808a09e:	4413      	add	r3, r2
 808a0a0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 808a0a4:	e000      	b.n	808a0a8 <mbedtls_ssl_write_record+0x110>
 * Encryption/decryption functions
 */
static int ssl_encrypt_buf( mbedtls_ssl_context *ssl )
{
    mbedtls_cipher_mode_t mode;
    int auth_done = 0;
 808a0a6:	2600      	movs	r6, #0
        }
    }
    else
#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */
#if defined(MBEDTLS_GCM_C) || defined(MBEDTLS_CCM_C)
    if( mode == MBEDTLS_MODE_GCM ||
 808a0a8:	2d06      	cmp	r5, #6
 808a0aa:	d001      	beq.n	808a0b0 <mbedtls_ssl_write_record+0x118>
 808a0ac:	2d08      	cmp	r5, #8
 808a0ae:	d15c      	bne.n	808a16a <mbedtls_ssl_write_record+0x1d2>
    {
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 808a0b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;

        memcpy( add_data, ssl->out_ctr, 8 );
 808a0b2:	f8d4 7088 	ldr.w	r7, [r4, #136]	; 0x88
    {
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 808a0b6:	681a      	ldr	r2, [r3, #0]
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;

        memcpy( add_data, ssl->out_ctr, 8 );
 808a0b8:	6879      	ldr	r1, [r7, #4]
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 808a0ba:	7f12      	ldrb	r2, [r2, #28]

        memcpy( add_data, ssl->out_ctr, 8 );
 808a0bc:	6838      	ldr	r0, [r7, #0]
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 808a0be:	f012 0f02 	tst.w	r2, #2

        memcpy( add_data, ssl->out_ctr, 8 );
 808a0c2:	aa0a      	add	r2, sp, #40	; 0x28
 808a0c4:	c203      	stmia	r2!, {r0, r1}
        add_data[8]  = ssl->out_msgtype;
 808a0c6:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 808a0ca:	68a1      	ldr	r1, [r4, #8]
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;

        memcpy( add_data, ssl->out_ctr, 8 );
        add_data[8]  = ssl->out_msgtype;
 808a0cc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 808a0d0:	68e2      	ldr	r2, [r4, #12]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 808a0d2:	f88d 1031 	strb.w	r1, [sp, #49]	; 0x31
        ver[1] = (unsigned char) minor;
 808a0d6:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32

        memcpy( add_data, ssl->out_ctr, 8 );
        add_data[8]  = ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
 808a0da:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 808a0de:	bf08      	it	eq
 808a0e0:	2510      	moveq	r5, #16

        memcpy( add_data, ssl->out_ctr, 8 );
        add_data[8]  = ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
 808a0e2:	ea4f 2112 	mov.w	r1, r2, lsr #8
 808a0e6:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
        add_data[12] = ssl->out_msglen & 0xFF;
 808a0ea:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
                       add_data, 13 );

        /*
         * Generate IV
         */
        if( ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen != 8 )
 808a0ee:	6919      	ldr	r1, [r3, #16]
 808a0f0:	68da      	ldr	r2, [r3, #12]
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 808a0f2:	bf18      	it	ne
 808a0f4:	2508      	movne	r5, #8
                       add_data, 13 );

        /*
         * Generate IV
         */
        if( ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen != 8 )
 808a0f6:	1a52      	subs	r2, r2, r1
 808a0f8:	2a08      	cmp	r2, #8
 808a0fa:	f040 8097 	bne.w	808a22c <mbedtls_ssl_write_record+0x294>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        memcpy( ssl->transform_out->iv_enc + ssl->transform_out->fixed_ivlen,
                             ssl->out_ctr, 8 );
 808a0fe:	683a      	ldr	r2, [r7, #0]
            /* Reminder if we ever add an AEAD mode with a different size */
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        memcpy( ssl->transform_out->iv_enc + ssl->transform_out->fixed_ivlen,
 808a100:	3318      	adds	r3, #24
                             ssl->out_ctr, 8 );
 808a102:	505a      	str	r2, [r3, r1]
 808a104:	687a      	ldr	r2, [r7, #4]
 808a106:	1858      	adds	r0, r3, r1
 808a108:	6042      	str	r2, [r0, #4]
        memcpy( ssl->out_iv, ssl->out_ctr, 8 );
 808a10a:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 808a10e:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 808a112:	680b      	ldr	r3, [r1, #0]
 808a114:	6013      	str	r3, [r2, #0]
 808a116:	684b      	ldr	r3, [r1, #4]
 808a118:	6053      	str	r3, [r2, #4]
        /*
         * Fix pointer positions and message length with added IV
         */
        enc_msg = ssl->out_msg;
        enc_msglen = ssl->out_msglen;
        ssl->out_msglen += ssl->transform_out->ivlen -
 808a11a:	6ba0      	ldr	r0, [r4, #56]	; 0x38

        /*
         * Fix pointer positions and message length with added IV
         */
        enc_msg = ssl->out_msg;
        enc_msglen = ssl->out_msglen;
 808a11c:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
        ssl->out_msglen += ssl->transform_out->ivlen -
                           ssl->transform_out->fixed_ivlen;
 808a120:	68c3      	ldr	r3, [r0, #12]
 808a122:	6901      	ldr	r1, [r0, #16]
                ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen );

        /*
         * Fix pointer positions and message length with added IV
         */
        enc_msg = ssl->out_msg;
 808a124:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
        enc_msglen = ssl->out_msglen;
        ssl->out_msglen += ssl->transform_out->ivlen -
                           ssl->transform_out->fixed_ivlen;
 808a128:	443b      	add	r3, r7
 808a12a:	1a5b      	subs	r3, r3, r1
 808a12c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
                       ssl->out_msglen, 0 ) );

        /*
         * Encrypt and authenticate
         */
        if( ( ret = mbedtls_cipher_auth_encrypt( &ssl->transform_out->cipher_ctx_enc,
 808a130:	19d3      	adds	r3, r2, r7
 808a132:	9305      	str	r3, [sp, #20]
 808a134:	ab09      	add	r3, sp, #36	; 0x24
 808a136:	9304      	str	r3, [sp, #16]
 808a138:	230d      	movs	r3, #13
 808a13a:	9300      	str	r3, [sp, #0]
 808a13c:	9506      	str	r5, [sp, #24]
 808a13e:	9203      	str	r2, [sp, #12]
 808a140:	9702      	str	r7, [sp, #8]
 808a142:	9201      	str	r2, [sp, #4]
 808a144:	68c2      	ldr	r2, [r0, #12]
 808a146:	f100 0118 	add.w	r1, r0, #24
 808a14a:	ab0a      	add	r3, sp, #40	; 0x28
 808a14c:	3050      	adds	r0, #80	; 0x50
 808a14e:	f7f9 fc0b 	bl	8083968 <mbedtls_cipher_auth_encrypt>
 808a152:	2800      	cmp	r0, #0
 808a154:	d173      	bne.n	808a23e <mbedtls_ssl_write_record+0x2a6>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_encrypt", ret );
            return( ret );
        }

        if( olen != enc_msglen )
 808a156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808a158:	429f      	cmp	r7, r3
 808a15a:	d167      	bne.n	808a22c <mbedtls_ssl_write_record+0x294>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msglen += taglen;
 808a15c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        auth_done++;
 808a160:	3601      	adds	r6, #1
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msglen += taglen;
 808a162:	441d      	add	r5, r3
 808a164:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
 808a168:	e04c      	b.n	808a204 <mbedtls_ssl_write_record+0x26c>
    }
    else
#endif /* MBEDTLS_GCM_C || MBEDTLS_CCM_C */
#if defined(MBEDTLS_CIPHER_MODE_CBC) &&                                    \
    ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) )
    if( mode == MBEDTLS_MODE_CBC )
 808a16a:	2d02      	cmp	r5, #2
 808a16c:	d15e      	bne.n	808a22c <mbedtls_ssl_write_record+0x294>
        int ret;
        unsigned char *enc_msg;
        size_t enc_msglen, padlen, olen = 0, i;

        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
                 ssl->transform_out->ivlen;
 808a16e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) )
    if( mode == MBEDTLS_MODE_CBC )
    {
        int ret;
        unsigned char *enc_msg;
        size_t enc_msglen, padlen, olen = 0, i;
 808a170:	2200      	movs	r2, #0
 808a172:	920a      	str	r2, [sp, #40]	; 0x28

        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
 808a174:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
                 ssl->transform_out->ivlen;
 808a178:	68d9      	ldr	r1, [r3, #12]
 808a17a:	1c45      	adds	r5, r0, #1
 808a17c:	fbb5 f3f1 	udiv	r3, r5, r1
 808a180:	fb01 5513 	mls	r5, r1, r3, r5
 808a184:	1b4b      	subs	r3, r1, r5
        if( padlen == ssl->transform_out->ivlen )
 808a186:	4299      	cmp	r1, r3
 808a188:	d054      	beq.n	808a234 <mbedtls_ssl_write_record+0x29c>
            padlen = 0;

        for( i = 0; i <= padlen; i++ )
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 808a18a:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 808a18e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 808a192:	4411      	add	r1, r2
        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
                 ssl->transform_out->ivlen;
        if( padlen == ssl->transform_out->ivlen )
            padlen = 0;

        for( i = 0; i <= padlen; i++ )
 808a194:	3201      	adds	r2, #1
 808a196:	4293      	cmp	r3, r2
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 808a198:	540b      	strb	r3, [r1, r0]
        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
                 ssl->transform_out->ivlen;
        if( padlen == ssl->transform_out->ivlen )
            padlen = 0;

        for( i = 0; i <= padlen; i++ )
 808a19a:	d2f6      	bcs.n	808a18a <mbedtls_ssl_write_record+0x1f2>
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;

        ssl->out_msglen += padlen + 1;
 808a19c:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 808a1a0:	3501      	adds	r5, #1
 808a1a2:	441d      	add	r5, r3
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * Prepend per-record IV for block cipher in TLS v1.1 and up as per
         * Method 1 (6.2.3.2. in RFC4346 and RFC5246)
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 808a1a4:	68e3      	ldr	r3, [r4, #12]
            padlen = 0;

        for( i = 0; i <= padlen; i++ )
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;

        ssl->out_msglen += padlen + 1;
 808a1a6:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * Prepend per-record IV for block cipher in TLS v1.1 and up as per
         * Method 1 (6.2.3.2. in RFC4346 and RFC5246)
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 808a1aa:	2b01      	cmp	r3, #1
 808a1ac:	dc02      	bgt.n	808a1b4 <mbedtls_ssl_write_record+0x21c>
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;

        ssl->out_msglen += padlen + 1;

        enc_msglen = ssl->out_msglen;
        enc_msg = ssl->out_msg;
 808a1ae:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 808a1b2:	e018      	b.n	808a1e6 <mbedtls_ssl_write_record+0x24e>
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
        {
            /*
             * Generate IV
             */
            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->transform_out->iv_enc,
 808a1b4:	6823      	ldr	r3, [r4, #0]
 808a1b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
                                  ssl->transform_out->ivlen );
 808a1b8:	699d      	ldr	r5, [r3, #24]
 808a1ba:	68ca      	ldr	r2, [r1, #12]
 808a1bc:	69d8      	ldr	r0, [r3, #28]
 808a1be:	3118      	adds	r1, #24
 808a1c0:	47a8      	blx	r5
            if( ret != 0 )
 808a1c2:	2800      	cmp	r0, #0
 808a1c4:	d13b      	bne.n	808a23e <mbedtls_ssl_write_record+0x2a6>
                return( ret );

            memcpy( ssl->out_iv, ssl->transform_out->iv_enc,
 808a1c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
                    ssl->transform_out->ivlen );
 808a1c8:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 808a1cc:	68ca      	ldr	r2, [r1, #12]
 808a1ce:	3118      	adds	r1, #24
 808a1d0:	f009 fcd5 	bl	8093b7e <memcpy>
            /*
             * Fix pointer positions and message length with added IV
             */
            enc_msg = ssl->out_msg;
            enc_msglen = ssl->out_msglen;
            ssl->out_msglen += ssl->transform_out->ivlen;
 808a1d4:	6ba2      	ldr	r2, [r4, #56]	; 0x38

            /*
             * Fix pointer positions and message length with added IV
             */
            enc_msg = ssl->out_msg;
            enc_msglen = ssl->out_msglen;
 808a1d6:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
            ssl->out_msglen += ssl->transform_out->ivlen;
 808a1da:	68d2      	ldr	r2, [r2, #12]
                    ssl->transform_out->ivlen );

            /*
             * Fix pointer positions and message length with added IV
             */
            enc_msg = ssl->out_msg;
 808a1dc:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
            enc_msglen = ssl->out_msglen;
            ssl->out_msglen += ssl->transform_out->ivlen;
 808a1e0:	442a      	add	r2, r5
 808a1e2:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
                            "including %d bytes of IV and %d bytes of padding",
                            ssl->out_msglen, ssl->transform_out->ivlen,
                            padlen + 1 ) );

        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_out->cipher_ctx_enc,
 808a1e6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 808a1e8:	aa0a      	add	r2, sp, #40	; 0x28
 808a1ea:	9202      	str	r2, [sp, #8]
 808a1ec:	9301      	str	r3, [sp, #4]
 808a1ee:	9500      	str	r5, [sp, #0]
 808a1f0:	68c2      	ldr	r2, [r0, #12]
 808a1f2:	f100 0118 	add.w	r1, r0, #24
 808a1f6:	3050      	adds	r0, #80	; 0x50
 808a1f8:	f7f9 fb94 	bl	8083924 <mbedtls_cipher_crypt>
 808a1fc:	b9f8      	cbnz	r0, 808a23e <mbedtls_ssl_write_record+0x2a6>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
            return( ret );
        }

        if( enc_msglen != olen )
 808a1fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808a200:	429d      	cmp	r5, r3
 808a202:	d113      	bne.n	808a22c <mbedtls_ssl_write_record+0x294>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    /* Make extra sure authentication was performed, exactly once */
    if( auth_done != 1 )
 808a204:	2e01      	cmp	r6, #1
 808a206:	d111      	bne.n	808a22c <mbedtls_ssl_write_record+0x294>
            {
                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
                return( ret );
            }

            len = ssl->out_msglen;
 808a208:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
            ssl->out_len[0] = (unsigned char)( len >> 8 );
 808a20c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 808a210:	0a19      	lsrs	r1, r3, #8
 808a212:	7011      	strb	r1, [r2, #0]
            ssl->out_len[1] = (unsigned char)( len      );
 808a214:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 808a218:	7053      	strb	r3, [r2, #1]
        }

        ssl->out_left = mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen;
 808a21a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0

        MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
                       ssl->out_hdr, mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen );
    }

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 808a21e:	4620      	mov	r0, r4
            len = ssl->out_msglen;
            ssl->out_len[0] = (unsigned char)( len >> 8 );
            ssl->out_len[1] = (unsigned char)( len      );
        }

        ssl->out_left = mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen;
 808a220:	3305      	adds	r3, #5
 808a222:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4

        MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
                       ssl->out_hdr, mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen );
    }

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 808a226:	f7ff fe7f 	bl	8089f28 <mbedtls_ssl_flush_output>
 808a22a:	e008      	b.n	808a23e <mbedtls_ssl_write_record+0x2a6>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );

    if( ssl->session_out == NULL || ssl->transform_out == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 808a22c:	4805      	ldr	r0, [pc, #20]	; (808a244 <mbedtls_ssl_write_record+0x2ac>)
 808a22e:	e006      	b.n	808a23e <mbedtls_ssl_write_record+0x2a6>
    if( ssl->out_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Record content %u too large, maximum %d",
                                    (unsigned) ssl->out_msglen,
                                    MBEDTLS_SSL_MAX_CONTENT_LEN ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 808a230:	4805      	ldr	r0, [pc, #20]	; (808a248 <mbedtls_ssl_write_record+0x2b0>)
 808a232:	e004      	b.n	808a23e <mbedtls_ssl_write_record+0x2a6>
                 ssl->transform_out->ivlen;
        if( padlen == ssl->transform_out->ivlen )
            padlen = 0;

        for( i = 0; i <= padlen; i++ )
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 808a234:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 808a238:	541a      	strb	r2, [r3, r0]
        size_t enc_msglen, padlen, olen = 0, i;

        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
                 ssl->transform_out->ivlen;
        if( padlen == ssl->transform_out->ivlen )
            padlen = 0;
 808a23a:	4613      	mov	r3, r2
 808a23c:	e7ae      	b.n	808a19c <mbedtls_ssl_write_record+0x204>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write record" ) );

    return( 0 );
}
 808a23e:	b017      	add	sp, #92	; 0x5c
 808a240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808a242:	bf00      	nop
 808a244:	ffff9400 	.word	0xffff9400
 808a248:	ffff8f00 	.word	0xffff8f00

0808a24c <mbedtls_ssl_prepare_handshake_record>:
    return( 0 );
}
#endif /* MBEDTLS_SSL_PROTO_DTLS */

int mbedtls_ssl_prepare_handshake_record( mbedtls_ssl_context *ssl )
{
 808a24c:	b510      	push	{r4, lr}
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
 808a24e:	6f04      	ldr	r4, [r0, #112]	; 0x70
 808a250:	2c03      	cmp	r4, #3
 808a252:	d90f      	bls.n	808a274 <mbedtls_ssl_prepare_handshake_record+0x28>
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
                    ( ssl->in_msg[1] << 16 ) |
 808a254:	6e41      	ldr	r1, [r0, #100]	; 0x64
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
 808a256:	788a      	ldrb	r2, [r1, #2]
 808a258:	784b      	ldrb	r3, [r1, #1]
 808a25a:	0212      	lsls	r2, r2, #8
 808a25c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 808a260:	78ca      	ldrb	r2, [r1, #3]
 808a262:	4313      	orrs	r3, r2
 808a264:	3304      	adds	r3, #4
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 808a266:	4a04      	ldr	r2, [pc, #16]	; (808a278 <mbedtls_ssl_prepare_handshake_record+0x2c>)
    }

    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
                    ( ssl->in_msg[1] << 16 ) |
                    ( ssl->in_msg[2] << 8  ) |
                      ssl->in_msg[3] );
 808a268:	6783      	str	r3, [r0, #120]	; 0x78
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 808a26a:	429c      	cmp	r4, r3
 808a26c:	bf34      	ite	cc
 808a26e:	4610      	movcc	r0, r2
 808a270:	2000      	movcs	r0, #0
 808a272:	bd10      	pop	{r4, pc}
{
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 808a274:	4801      	ldr	r0, [pc, #4]	; (808a27c <mbedtls_ssl_prepare_handshake_record+0x30>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
    }

    return( 0 );
}
 808a276:	bd10      	pop	{r4, pc}
 808a278:	ffff8f80 	.word	0xffff8f80
 808a27c:	ffff8e00 	.word	0xffff8e00

0808a280 <mbedtls_ssl_update_handshake_status>:

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 808a280:	6842      	ldr	r2, [r0, #4]

    return( 0 );
}

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{
 808a282:	b410      	push	{r4}

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 808a284:	2a10      	cmp	r2, #16
 808a286:	d008      	beq.n	808a29a <mbedtls_ssl_update_handshake_status+0x1a>
        ssl->handshake != NULL )
 808a288:	6b02      	ldr	r2, [r0, #48]	; 0x30
}

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 808a28a:	b132      	cbz	r2, 808a29a <mbedtls_ssl_update_handshake_status+0x1a>
        ssl->handshake != NULL )
    {
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
 808a28c:	f8d2 4160 	ldr.w	r4, [r2, #352]	; 0x160
 808a290:	6e41      	ldr	r1, [r0, #100]	; 0x64
 808a292:	4623      	mov	r3, r4
 808a294:	6f82      	ldr	r2, [r0, #120]	; 0x78
        ssl->handshake != NULL )
    {
        ssl->handshake->in_msg_seq++;
    }
#endif
}
 808a296:	bc10      	pop	{r4}
{

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
        ssl->handshake != NULL )
    {
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
 808a298:	4718      	bx	r3
        ssl->handshake != NULL )
    {
        ssl->handshake->in_msg_seq++;
    }
#endif
}
 808a29a:	bc10      	pop	{r4}
 808a29c:	4770      	bx	lr
	...

0808a2a0 <mbedtls_ssl_handle_message_type>:

    return( 0 );
}

int mbedtls_ssl_handle_message_type( mbedtls_ssl_context *ssl )
{
 808a2a0:	b510      	push	{r4, lr}
    int ret;

    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 808a2a2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c

    return( 0 );
}

int mbedtls_ssl_handle_message_type( mbedtls_ssl_context *ssl )
{
 808a2a4:	4604      	mov	r4, r0
    int ret;

    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 808a2a6:	2b16      	cmp	r3, #22
 808a2a8:	d004      	beq.n	808a2b4 <mbedtls_ssl_handle_message_type+0x14>
        {
            return( ret );
        }
    }

    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
 808a2aa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808a2ac:	2b15      	cmp	r3, #21
 808a2ae:	d006      	beq.n	808a2be <mbedtls_ssl_handle_message_type+0x1e>

        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
    }

    return( 0 );
 808a2b0:	2000      	movs	r0, #0
 808a2b2:	bd10      	pop	{r4, pc}
    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
    {
        if( ( ret = mbedtls_ssl_prepare_handshake_record( ssl ) ) != 0 )
 808a2b4:	f7ff ffca 	bl	808a24c <mbedtls_ssl_prepare_handshake_record>
 808a2b8:	2800      	cmp	r0, #0
 808a2ba:	d0f6      	beq.n	808a2aa <mbedtls_ssl_handle_message_type+0xa>
 808a2bc:	bd10      	pop	{r4, pc}
        }
    }

    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
    {
        if( ssl->in_msglen != 2 )
 808a2be:	6f23      	ldr	r3, [r4, #112]	; 0x70
 808a2c0:	2b02      	cmp	r3, #2
 808a2c2:	d10c      	bne.n	808a2de <mbedtls_ssl_handle_message_type+0x3e>
                       ssl->in_msg[0], ssl->in_msg[1] ) );

        /*
         * Ignore non-fatal alerts, except close_notify and no_renegotiation
         */
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
 808a2c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 808a2c6:	781a      	ldrb	r2, [r3, #0]
 808a2c8:	2a02      	cmp	r2, #2
 808a2ca:	d00a      	beq.n	808a2e2 <mbedtls_ssl_handle_message_type+0x42>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
        }

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 808a2cc:	2a01      	cmp	r2, #1
 808a2ce:	d10a      	bne.n	808a2e6 <mbedtls_ssl_handle_message_type+0x46>
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
 808a2d0:	785b      	ldrb	r3, [r3, #1]
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
        }

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 808a2d2:	b153      	cbz	r3, 808a2ea <mbedtls_ssl_handle_message_type+0x4a>

        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
    }

    return( 0 );
 808a2d4:	2b64      	cmp	r3, #100	; 0x64
 808a2d6:	4806      	ldr	r0, [pc, #24]	; (808a2f0 <mbedtls_ssl_handle_message_type+0x50>)
 808a2d8:	bf08      	it	eq
 808a2da:	2000      	moveq	r0, #0
 808a2dc:	bd10      	pop	{r4, pc}
            /* Note: Standard allows for more than one 2 byte alert
               to be packed in a single message, but Mbed TLS doesn't
               currently support this. */
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid alert message, len: %d",
                           ssl->in_msglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 808a2de:	4805      	ldr	r0, [pc, #20]	; (808a2f4 <mbedtls_ssl_handle_message_type+0x54>)
 808a2e0:	bd10      	pop	{r4, pc}
         */
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
 808a2e2:	4805      	ldr	r0, [pc, #20]	; (808a2f8 <mbedtls_ssl_handle_message_type+0x58>)
 808a2e4:	bd10      	pop	{r4, pc}
            return( 0 );
        }
#endif /* MBEDTLS_SSL_PROTO_SSL3 && MBEDTLS_SSL_SRV_C */

        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
 808a2e6:	4802      	ldr	r0, [pc, #8]	; (808a2f0 <mbedtls_ssl_handle_message_type+0x50>)
 808a2e8:	bd10      	pop	{r4, pc}

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a close notify message" ) );
            return( MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY );
 808a2ea:	4804      	ldr	r0, [pc, #16]	; (808a2fc <mbedtls_ssl_handle_message_type+0x5c>)
        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
    }

    return( 0 );
}
 808a2ec:	bd10      	pop	{r4, pc}
 808a2ee:	bf00      	nop
 808a2f0:	ffff9980 	.word	0xffff9980
 808a2f4:	ffff8e00 	.word	0xffff8e00
 808a2f8:	ffff8880 	.word	0xffff8880
 808a2fc:	ffff8780 	.word	0xffff8780

0808a300 <mbedtls_ssl_send_alert_message>:
}

int mbedtls_ssl_send_alert_message( mbedtls_ssl_context *ssl,
                            unsigned char level,
                            unsigned char message )
{
 808a300:	b410      	push	{r4}
    int ret;

    if( ssl == NULL || ssl->conf == NULL )
 808a302:	b180      	cbz	r0, 808a326 <mbedtls_ssl_send_alert_message+0x26>
 808a304:	6804      	ldr	r4, [r0, #0]
 808a306:	b174      	cbz	r4, 808a326 <mbedtls_ssl_send_alert_message+0x26>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> send alert message" ) );
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "send alert level=%u message=%u", level, message ));

    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
 808a308:	2415      	movs	r4, #21
 808a30a:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
    ssl->out_msglen = 2;
 808a30e:	2402      	movs	r4, #2
 808a310:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
    ssl->out_msg[0] = level;
 808a314:	f8d0 4098 	ldr.w	r4, [r0, #152]	; 0x98
 808a318:	7021      	strb	r1, [r4, #0]
    ssl->out_msg[1] = message;
 808a31a:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
 808a31e:	705a      	strb	r2, [r3, #1]
        return( ret );
    }
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );

    return( 0 );
}
 808a320:	bc10      	pop	{r4}
    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
    ssl->out_msglen = 2;
    ssl->out_msg[0] = level;
    ssl->out_msg[1] = message;

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 808a322:	f7ff be39 	b.w	8089f98 <mbedtls_ssl_write_record>
        return( ret );
    }
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );

    return( 0 );
}
 808a326:	4801      	ldr	r0, [pc, #4]	; (808a32c <mbedtls_ssl_send_alert_message+0x2c>)
 808a328:	bc10      	pop	{r4}
 808a32a:	4770      	bx	lr
 808a32c:	ffff8f00 	.word	0xffff8f00

0808a330 <mbedtls_ssl_read_record_layer>:

    return( 0 );
}

int mbedtls_ssl_read_record_layer( mbedtls_ssl_context *ssl )
{
 808a330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     *     and consumes through mbedtls_ssl_read only.
     *
     */

    /* Case (1): Handshake messages */
    if( ssl->in_hslen != 0 )
 808a334:	6f81      	ldr	r1, [r0, #120]	; 0x78

    return( 0 );
}

int mbedtls_ssl_read_record_layer( mbedtls_ssl_context *ssl )
{
 808a336:	b096      	sub	sp, #88	; 0x58
 808a338:	4604      	mov	r4, r0
 808a33a:	6e83      	ldr	r3, [r0, #104]	; 0x68
     *     and consumes through mbedtls_ssl_read only.
     *
     */

    /* Case (1): Handshake messages */
    if( ssl->in_hslen != 0 )
 808a33c:	b181      	cbz	r1, 808a360 <mbedtls_ssl_read_record_layer+0x30>
    {
        /* Hard assertion to be sure that no application data
         * is in flight, as corrupting ssl->in_msglen during
         * ssl->in_offt != NULL is fatal. */
        if( ssl->in_offt != NULL )
 808a33e:	2b00      	cmp	r3, #0
 808a340:	f040 821c 	bne.w	808a77c <mbedtls_ssl_read_record_layer+0x44c>
         *     should not be treated as a silently corrected assertion.
         *     Additionally, ssl->in_hslen might be arbitrarily out of
         *     bounds after handling a DTLS message with an unexpected
         *     sequence number, see mbedtls_ssl_prepare_handshake_record.
         */
        if( ssl->in_hslen < ssl->in_msglen )
 808a344:	6f02      	ldr	r2, [r0, #112]	; 0x70
 808a346:	4291      	cmp	r1, r2
 808a348:	d206      	bcs.n	808a358 <mbedtls_ssl_read_record_layer+0x28>
        {
            ssl->in_msglen -= ssl->in_hslen;
 808a34a:	1a52      	subs	r2, r2, r1
 808a34c:	6702      	str	r2, [r0, #112]	; 0x70
            memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,
 808a34e:	6e40      	ldr	r0, [r0, #100]	; 0x64
                     ssl->in_msglen );
 808a350:	4401      	add	r1, r0
 808a352:	f009 fc1f 	bl	8093b94 <memmove>
 808a356:	e000      	b.n	808a35a <mbedtls_ssl_read_record_layer+0x2a>
            MBEDTLS_SSL_DEBUG_BUF( 4, "remaining content in record",
                                   ssl->in_msg, ssl->in_msglen );
        }
        else
        {
            ssl->in_msglen = 0;
 808a358:	6703      	str	r3, [r0, #112]	; 0x70
        }

        ssl->in_hslen   = 0;
 808a35a:	2300      	movs	r3, #0
 808a35c:	67a3      	str	r3, [r4, #120]	; 0x78
 808a35e:	e003      	b.n	808a368 <mbedtls_ssl_read_record_layer+0x38>
    }
    /* Case (4): Application data */
    else if( ssl->in_offt != NULL )
 808a360:	2b00      	cmp	r3, #0
 808a362:	f040 820f 	bne.w	808a784 <mbedtls_ssl_read_record_layer+0x454>
        return( 0 );
    }
    /* Everything else (CCS & Alerts) */
    else
    {
        ssl->in_msglen = 0;
 808a366:	6703      	str	r3, [r0, #112]	; 0x70
     *
     * Fetch and decode new record if current one is fully consumed.
     *
     */

    if( ssl->in_msglen > 0 )
 808a368:	6f23      	ldr	r3, [r4, #112]	; 0x70
 808a36a:	2b00      	cmp	r3, #0
 808a36c:	f040 820a 	bne.w	808a784 <mbedtls_ssl_read_record_layer+0x454>
read_record_header:
#endif

    /* Current record either fully processed or to be discarded. */

    if( ( ret = mbedtls_ssl_fetch_input( ssl, mbedtls_ssl_hdr_len( ssl ) ) ) != 0 )
 808a370:	2105      	movs	r1, #5
 808a372:	4620      	mov	r0, r4
 808a374:	f7ff fd92 	bl	8089e9c <mbedtls_ssl_fetch_input>
 808a378:	2800      	cmp	r0, #0
 808a37a:	f040 8204 	bne.w	808a786 <mbedtls_ssl_read_record_layer+0x456>
{
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
 808a37e:	6da2      	ldr	r2, [r4, #88]	; 0x58
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 808a380:	6de0      	ldr	r0, [r4, #92]	; 0x5c
{
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
 808a382:	7813      	ldrb	r3, [r2, #0]
 808a384:	66e3      	str	r3, [r4, #108]	; 0x6c
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 808a386:	7805      	ldrb	r5, [r0, #0]
 808a388:	7841      	ldrb	r1, [r0, #1]
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 808a38a:	3b14      	subs	r3, #20
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 808a38c:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 808a390:	6721      	str	r1, [r4, #112]	; 0x70
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 808a392:	2b03      	cmp	r3, #3
    else
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
 808a394:	7855      	ldrb	r5, [r2, #1]

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
    mbedtls_ssl_read_version( &major_ver, &minor_ver, ssl->conf->transport, ssl->in_hdr + 1 );
 808a396:	6820      	ldr	r0, [r4, #0]
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
        *minor = ver[1];
 808a398:	7892      	ldrb	r2, [r2, #2]
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 808a39a:	d905      	bls.n	808a3a8 <mbedtls_ssl_read_record_layer+0x78>
        /* Silently ignore invalid DTLS records as recommended by RFC 6347
         * Section 4.1.2.7 */
        if( ssl->conf->transport != MBEDTLS_SSL_TRANSPORT_DATAGRAM )
#endif /* MBEDTLS_SSL_PROTO_DTLS */
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                    MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 808a39c:	220a      	movs	r2, #10
 808a39e:	2102      	movs	r1, #2
 808a3a0:	4620      	mov	r0, r4
 808a3a2:	f7ff ffad 	bl	808a300 <mbedtls_ssl_send_alert_message>
 808a3a6:	e1eb      	b.n	808a780 <mbedtls_ssl_read_record_layer+0x450>

        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    /* Check version */
    if( major_ver != ssl->major_ver )
 808a3a8:	68a3      	ldr	r3, [r4, #8]
 808a3aa:	429d      	cmp	r5, r3
 808a3ac:	f040 81e8 	bne.w	808a780 <mbedtls_ssl_read_record_layer+0x450>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "major version mismatch" ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    if( minor_ver > ssl->conf->max_minor_ver )
 808a3b0:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 808a3b4:	429a      	cmp	r2, r3
 808a3b6:	f300 81e3 	bgt.w	808a780 <mbedtls_ssl_read_record_layer+0x450>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "minor version mismatch" ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    /* Check length against the size of our buffer */
    if( ssl->in_msglen > MBEDTLS_SSL_BUFFER_LEN
 808a3ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 808a3bc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 808a3be:	1a9b      	subs	r3, r3, r2
 808a3c0:	f5c3 5305 	rsb	r3, r3, #8512	; 0x2140
 808a3c4:	330d      	adds	r3, #13
 808a3c6:	4299      	cmp	r1, r3
 808a3c8:	f200 81da 	bhi.w	808a780 <mbedtls_ssl_read_record_layer+0x450>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    /* Check length against bounds of the current transform and version */
    if( ssl->transform_in == NULL )
 808a3cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 808a3ce:	b923      	cbnz	r3, 808a3da <mbedtls_ssl_read_record_layer+0xaa>
    {
        if( ssl->in_msglen < 1 ||
 808a3d0:	1e4b      	subs	r3, r1, #1
 808a3d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 808a3d6:	d30c      	bcc.n	808a3f2 <mbedtls_ssl_read_record_layer+0xc2>
 808a3d8:	e1d2      	b.n	808a780 <mbedtls_ssl_read_record_layer+0x450>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }
    }
    else
    {
        if( ssl->in_msglen < ssl->transform_in->minlen )
 808a3da:	689b      	ldr	r3, [r3, #8]
 808a3dc:	4299      	cmp	r1, r3
 808a3de:	f0c0 81cf 	bcc.w	808a780 <mbedtls_ssl_read_record_layer+0x450>
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * TLS encrypted messages can have up to 256 bytes of padding
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
 808a3e2:	68e2      	ldr	r2, [r4, #12]
 808a3e4:	2a00      	cmp	r2, #0
 808a3e6:	dd04      	ble.n	808a3f2 <mbedtls_ssl_read_record_layer+0xc2>
 808a3e8:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 808a3ec:	4299      	cmp	r1, r3
 808a3ee:	f200 81c7 	bhi.w	808a780 <mbedtls_ssl_read_record_layer+0x450>
    }

    /*
     * Read and optionally decrypt the message contents
     */
    if( ( ret = mbedtls_ssl_fetch_input( ssl,
 808a3f2:	3105      	adds	r1, #5
 808a3f4:	4620      	mov	r0, r4
 808a3f6:	f7ff fd51 	bl	8089e9c <mbedtls_ssl_fetch_input>
 808a3fa:	2800      	cmp	r0, #0
 808a3fc:	f040 81c3 	bne.w	808a786 <mbedtls_ssl_read_record_layer+0x456>

        if( ret == 0 )
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
 808a400:	6b66      	ldr	r6, [r4, #52]	; 0x34
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        ssl->next_record_offset = ssl->in_msglen + mbedtls_ssl_hdr_len( ssl );
    else
#endif
        ssl->in_left = 0;
 808a402:	6760      	str	r0, [r4, #116]	; 0x74

        if( ret == 0 )
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
 808a404:	2e00      	cmp	r6, #0
 808a406:	f000 81bd 	beq.w	808a784 <mbedtls_ssl_read_record_layer+0x454>
    size_t padlen = 0, correct = 1;
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );

    if( ssl->session_in == NULL || ssl->transform_in == NULL )
 808a40a:	6a23      	ldr	r3, [r4, #32]
 808a40c:	2b00      	cmp	r3, #0
 808a40e:	f000 81b5 	beq.w	808a77c <mbedtls_ssl_read_record_layer+0x44c>
 * \return       The mode of operation, or #MBEDTLS_MODE_NONE if
 *               \p ctx has not been initialized.
 */
static inline mbedtls_cipher_mode_t mbedtls_cipher_get_cipher_mode( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
 808a412:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 808a416:	b103      	cbz	r3, 808a41a <mbedtls_ssl_read_record_layer+0xea>
        return MBEDTLS_MODE_NONE;

    return ctx->cipher_info->mode;
 808a418:	785b      	ldrb	r3, [r3, #1]
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_in->cipher_ctx_dec );

    if( ssl->in_msglen < ssl->transform_in->minlen )
 808a41a:	6f25      	ldr	r5, [r4, #112]	; 0x70
 808a41c:	68b2      	ldr	r2, [r6, #8]
 808a41e:	4295      	cmp	r5, r2
 808a420:	f0c0 819d 	bcc.w	808a75e <mbedtls_ssl_read_record_layer+0x42e>
        }
    }
    else
#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */
#if defined(MBEDTLS_GCM_C) || defined(MBEDTLS_CCM_C)
    if( mode == MBEDTLS_MODE_GCM ||
 808a424:	2b06      	cmp	r3, #6
 808a426:	d001      	beq.n	808a42c <mbedtls_ssl_read_record_layer+0xfc>
 808a428:	2b08      	cmp	r3, #8
 808a42a:	d175      	bne.n	808a518 <mbedtls_ssl_read_record_layer+0x1e8>
        int ret;
        size_t dec_msglen, olen;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
 808a42c:	6833      	ldr	r3, [r6, #0]
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
        size_t explicit_iv_len = ssl->transform_in->ivlen -
                                 ssl->transform_in->fixed_ivlen;
 808a42e:	68f2      	ldr	r2, [r6, #12]
        size_t dec_msglen, olen;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 808a430:	7f1b      	ldrb	r3, [r3, #28]
 808a432:	f013 0f02 	tst.w	r3, #2
        size_t explicit_iv_len = ssl->transform_in->ivlen -
                                 ssl->transform_in->fixed_ivlen;
 808a436:	6933      	ldr	r3, [r6, #16]
        size_t dec_msglen, olen;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 808a438:	bf14      	ite	ne
 808a43a:	2708      	movne	r7, #8
 808a43c:	2710      	moveq	r7, #16
        size_t explicit_iv_len = ssl->transform_in->ivlen -
                                 ssl->transform_in->fixed_ivlen;
 808a43e:	1ad3      	subs	r3, r2, r3

        if( ssl->in_msglen < explicit_iv_len + taglen )
 808a440:	19da      	adds	r2, r3, r7
 808a442:	4295      	cmp	r5, r2
 808a444:	f0c0 818b 	bcc.w	808a75e <mbedtls_ssl_read_record_layer+0x42e>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < explicit_iv_len (%d) "
                                "+ taglen (%d)", ssl->in_msglen,
                                explicit_iv_len, taglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;
 808a448:	1aed      	subs	r5, r5, r3
 808a44a:	1bed      	subs	r5, r5, r7

        dec_msg = ssl->in_msg;
        dec_msg_result = ssl->in_msg;
        ssl->in_msglen = dec_msglen;

        memcpy( add_data, ssl->in_ctr, 8 );
 808a44c:	6d62      	ldr	r2, [r4, #84]	; 0x54
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;

        dec_msg = ssl->in_msg;
        dec_msg_result = ssl->in_msg;
        ssl->in_msglen = dec_msglen;
 808a44e:	6725      	str	r5, [r4, #112]	; 0x70

        memcpy( add_data, ssl->in_ctr, 8 );
 808a450:	6810      	ldr	r0, [r2, #0]
 808a452:	6851      	ldr	r1, [r2, #4]
 808a454:	ab0a      	add	r3, sp, #40	; 0x28
 808a456:	c303      	stmia	r3!, {r0, r1}
        add_data[8]  = ssl->in_msgtype;
 808a458:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 808a45a:	68a2      	ldr	r2, [r4, #8]
        dec_msg = ssl->in_msg;
        dec_msg_result = ssl->in_msg;
        ssl->in_msglen = dec_msglen;

        memcpy( add_data, ssl->in_ctr, 8 );
        add_data[8]  = ssl->in_msgtype;
 808a45c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 808a460:	68e3      	ldr	r3, [r4, #12]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 808a462:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
        ver[1] = (unsigned char) minor;
 808a466:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32

        memcpy( add_data, ssl->in_ctr, 8 );
        add_data[8]  = ssl->in_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->in_msglen >> 8 ) & 0xFF;
 808a46a:	0a2b      	lsrs	r3, r5, #8
 808a46c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
        add_data[12] = ssl->in_msglen & 0xFF;
 808a470:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34

        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
                       add_data, 13 );

        memcpy( ssl->transform_in->iv_dec + ssl->transform_in->fixed_ivlen,
 808a474:	6933      	ldr	r3, [r6, #16]
                ssl->in_iv,
                ssl->transform_in->ivlen - ssl->transform_in->fixed_ivlen );
 808a476:	68f2      	ldr	r2, [r6, #12]
                                explicit_iv_len, taglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;

        dec_msg = ssl->in_msg;
 808a478:	f8d4 8064 	ldr.w	r8, [r4, #100]	; 0x64
        add_data[12] = ssl->in_msglen & 0xFF;

        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
                       add_data, 13 );

        memcpy( ssl->transform_in->iv_dec + ssl->transform_in->fixed_ivlen,
 808a47c:	f106 0028 	add.w	r0, r6, #40	; 0x28
                ssl->in_iv,
                ssl->transform_in->ivlen - ssl->transform_in->fixed_ivlen );
 808a480:	1ad2      	subs	r2, r2, r3
 808a482:	6e21      	ldr	r1, [r4, #96]	; 0x60
 808a484:	4418      	add	r0, r3
 808a486:	f009 fb7a 	bl	8093b7e <memcpy>
        MBEDTLS_SSL_DEBUG_BUF( 4, "TAG used", dec_msg + dec_msglen, taglen );

        /*
         * Decrypt and authenticate
         */
        if( ( ret = mbedtls_cipher_auth_decrypt( &ssl->transform_in->cipher_ctx_dec,
 808a48a:	eb08 0305 	add.w	r3, r8, r5
 808a48e:	9305      	str	r3, [sp, #20]
 808a490:	ab09      	add	r3, sp, #36	; 0x24
 808a492:	6b60      	ldr	r0, [r4, #52]	; 0x34
 808a494:	9304      	str	r3, [sp, #16]
 808a496:	230d      	movs	r3, #13
 808a498:	9300      	str	r3, [sp, #0]
 808a49a:	9706      	str	r7, [sp, #24]
 808a49c:	f8cd 800c 	str.w	r8, [sp, #12]
 808a4a0:	9502      	str	r5, [sp, #8]
 808a4a2:	f8cd 8004 	str.w	r8, [sp, #4]
 808a4a6:	68c2      	ldr	r2, [r0, #12]
 808a4a8:	f100 0128 	add.w	r1, r0, #40	; 0x28
 808a4ac:	ab0a      	add	r3, sp, #40	; 0x28
 808a4ae:	3090      	adds	r0, #144	; 0x90
 808a4b0:	f7f9 fa84 	bl	80839bc <mbedtls_cipher_auth_decrypt>
 808a4b4:	b128      	cbz	r0, 808a4c2 <mbedtls_ssl_read_record_layer+0x192>
                                         dec_msg_result, &olen,
                                         dec_msg + dec_msglen, taglen ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_decrypt", ret );

            if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
 808a4b6:	f510 4fc6 	cmn.w	r0, #25344	; 0x6300
 808a4ba:	f000 8150 	beq.w	808a75e <mbedtls_ssl_read_record_layer+0x42e>
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
    {
        if( ( ret = ssl_decrypt_buf( ssl ) ) != 0 )
 808a4be:	b328      	cbz	r0, 808a50c <mbedtls_ssl_read_record_layer+0x1dc>
 808a4c0:	e161      	b.n	808a786 <mbedtls_ssl_read_record_layer+0x456>

            return( ret );
        }
        auth_done++;

        if( olen != dec_msglen )
 808a4c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808a4c4:	429d      	cmp	r5, r3
 808a4c6:	f040 8159 	bne.w	808a77c <mbedtls_ssl_read_record_layer+0x44c>
 808a4ca:	e007      	b.n	808a4dc <mbedtls_ssl_read_record_layer+0x1ac>
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
    }

    return( diff );
 808a4cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
        MBEDTLS_SSL_DEBUG_BUF( 4, "expected mac", mac_expect, ssl->transform_in->maclen );
        MBEDTLS_SSL_DEBUG_BUF( 4, "message  mac", ssl->in_msg + ssl->in_msglen,
                               ssl->transform_in->maclen );
#endif

        if( mbedtls_ssl_safer_memcmp( ssl->in_msg + ssl->in_msglen, mac_expect,
 808a4d0:	2b00      	cmp	r3, #0
 808a4d2:	f040 8144 	bne.w	808a75e <mbedtls_ssl_read_record_layer+0x42e>
        auth_done++;

        /*
         * Finally check the correct flag
         */
        if( correct == 0 )
 808a4d6:	2d00      	cmp	r5, #0
 808a4d8:	f000 8141 	beq.w	808a75e <mbedtls_ssl_read_record_layer+0x42e>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    if( ssl->in_msglen == 0 )
 808a4dc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 808a4de:	2b00      	cmp	r3, #0
 808a4e0:	f040 8144 	bne.w	808a76c <mbedtls_ssl_read_record_layer+0x43c>
    {
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3
 808a4e4:	68e3      	ldr	r3, [r4, #12]
 808a4e6:	2b03      	cmp	r3, #3
 808a4e8:	f000 813b 	beq.w	808a762 <mbedtls_ssl_read_record_layer+0x432>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid zero-length message type: %d", ssl->in_msgtype ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

        ssl->nb_zero++;
 808a4ec:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 808a4ee:	3301      	adds	r3, #1

        /*
         * Three or more empty messages may be a DoS attack
         * (excessive CPU consumption).
         */
        if( ssl->nb_zero > 3 )
 808a4f0:	2b03      	cmp	r3, #3
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid zero-length message type: %d", ssl->in_msgtype ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

        ssl->nb_zero++;
 808a4f2:	67e3      	str	r3, [r4, #124]	; 0x7c

        /*
         * Three or more empty messages may be a DoS attack
         * (excessive CPU consumption).
         */
        if( ssl->nb_zero > 3 )
 808a4f4:	f300 8133 	bgt.w	808a75e <mbedtls_ssl_read_record_layer+0x42e>

        /*
         * Finally check the correct flag
         */
        if( correct == 0 )
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 808a4f8:	2208      	movs	r2, #8
    }
    else
#endif
    {
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
            if( ++ssl->in_ctr[i - 1] != 0 )
 808a4fa:	6d61      	ldr	r1, [r4, #84]	; 0x54
 808a4fc:	3a01      	subs	r2, #1
 808a4fe:	5c8b      	ldrb	r3, [r1, r2]
 808a500:	3301      	adds	r3, #1
 808a502:	b2db      	uxtb	r3, r3
 808a504:	548b      	strb	r3, [r1, r2]
 808a506:	2b00      	cmp	r3, #0
 808a508:	f000 8133 	beq.w	808a772 <mbedtls_ssl_read_record_layer+0x442>
        }

        MBEDTLS_SSL_DEBUG_BUF( 4, "input payload after decrypt",
                       ssl->in_msg, ssl->in_msglen );

        if( ssl->in_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
 808a50c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 808a50e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 808a512:	f240 8137 	bls.w	808a784 <mbedtls_ssl_read_record_layer+0x454>
 808a516:	e133      	b.n	808a780 <mbedtls_ssl_read_record_layer+0x450>
    }
    else
#endif /* MBEDTLS_GCM_C || MBEDTLS_CCM_C */
#if defined(MBEDTLS_CIPHER_MODE_CBC) &&                                    \
    ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) )
    if( mode == MBEDTLS_MODE_CBC )
 808a518:	2b02      	cmp	r3, #2
 808a51a:	f040 812f 	bne.w	808a77c <mbedtls_ssl_read_record_layer+0x44c>
        int ret;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        size_t dec_msglen;
        size_t minlen = 0;
        size_t olen = 0;
 808a51e:	2300      	movs	r3, #0
 808a520:	930a      	str	r3, [sp, #40]	; 0x28

        /*
         * Check immediate ciphertext sanity
         */
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 808a522:	68e0      	ldr	r0, [r4, #12]
 808a524:	68f2      	ldr	r2, [r6, #12]
            minlen += ssl->transform_in->ivlen;
 808a526:	2802      	cmp	r0, #2
 808a528:	bfa8      	it	ge
 808a52a:	4613      	movge	r3, r2
#endif

        if( ssl->in_msglen < minlen + ssl->transform_in->ivlen ||
 808a52c:	18d1      	adds	r1, r2, r3
 808a52e:	428d      	cmp	r5, r1
 808a530:	f0c0 8115 	bcc.w	808a75e <mbedtls_ssl_read_record_layer+0x42e>
 808a534:	6971      	ldr	r1, [r6, #20]
 808a536:	3101      	adds	r1, #1
 808a538:	440b      	add	r3, r1
 808a53a:	429d      	cmp	r5, r3
 808a53c:	f0c0 810f 	bcc.w	808a75e <mbedtls_ssl_read_record_layer+0x42e>
#endif /* MBEDTLS_SSL_ENCRYPT_THEN_MAC */

        /*
         * Check length sanity
         */
        if( ssl->in_msglen % ssl->transform_in->ivlen != 0 )
 808a540:	fbb5 f6f2 	udiv	r6, r5, r2
 808a544:	fb02 5616 	mls	r6, r2, r6, r5
 808a548:	2e00      	cmp	r6, #0
 808a54a:	f040 8108 	bne.w	808a75e <mbedtls_ssl_read_record_layer+0x42e>

#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * Initialize for prepended IV for block cipher in TLS v1.1 and up
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 808a54e:	2801      	cmp	r0, #1
                                ssl->transform_in->maclen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }

        dec_msglen = ssl->in_msglen;
        dec_msg = ssl->in_msg;
 808a550:	6e63      	ldr	r3, [r4, #100]	; 0x64

#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * Initialize for prepended IV for block cipher in TLS v1.1 and up
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 808a552:	dd0d      	ble.n	808a570 <mbedtls_ssl_read_record_layer+0x240>
        {
            dec_msglen -= ssl->transform_in->ivlen;
 808a554:	1aad      	subs	r5, r5, r2
            ssl->in_msglen -= ssl->transform_in->ivlen;

            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 808a556:	4632      	mov	r2, r6
         * Initialize for prepended IV for block cipher in TLS v1.1 and up
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
        {
            dec_msglen -= ssl->transform_in->ivlen;
            ssl->in_msglen -= ssl->transform_in->ivlen;
 808a558:	6725      	str	r5, [r4, #112]	; 0x70

            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 808a55a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 808a55c:	68c8      	ldr	r0, [r1, #12]
 808a55e:	4290      	cmp	r0, r2
 808a560:	d906      	bls.n	808a570 <mbedtls_ssl_read_record_layer+0x240>
                ssl->transform_in->iv_dec[i] = ssl->in_iv[i];
 808a562:	6e20      	ldr	r0, [r4, #96]	; 0x60
 808a564:	4411      	add	r1, r2
 808a566:	5c80      	ldrb	r0, [r0, r2]
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
        {
            dec_msglen -= ssl->transform_in->ivlen;
            ssl->in_msglen -= ssl->transform_in->ivlen;

            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 808a568:	3201      	adds	r2, #1
                ssl->transform_in->iv_dec[i] = ssl->in_iv[i];
 808a56a:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28
 808a56e:	e7f4      	b.n	808a55a <mbedtls_ssl_read_record_layer+0x22a>
        }
#endif /* MBEDTLS_SSL_PROTO_TLS1_1 || MBEDTLS_SSL_PROTO_TLS1_2 */

        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_in->cipher_ctx_dec,
 808a570:	6b60      	ldr	r0, [r4, #52]	; 0x34
 808a572:	af0a      	add	r7, sp, #40	; 0x28
 808a574:	9702      	str	r7, [sp, #8]
 808a576:	9301      	str	r3, [sp, #4]
 808a578:	9500      	str	r5, [sp, #0]
 808a57a:	68c2      	ldr	r2, [r0, #12]
 808a57c:	f100 0128 	add.w	r1, r0, #40	; 0x28
 808a580:	3090      	adds	r0, #144	; 0x90
 808a582:	f7f9 f9cf 	bl	8083924 <mbedtls_cipher_crypt>
 808a586:	2800      	cmp	r0, #0
 808a588:	f040 80fd 	bne.w	808a786 <mbedtls_ssl_read_record_layer+0x456>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
            return( ret );
        }

        if( dec_msglen != olen )
 808a58c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808a58e:	429d      	cmp	r5, r3
 808a590:	f040 80f4 	bne.w	808a77c <mbedtls_ssl_read_record_layer+0x44c>
                    ssl->transform_in->cipher_ctx_dec.iv,
                    ssl->transform_in->ivlen );
        }
#endif

        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 808a594:	6f23      	ldr	r3, [r4, #112]	; 0x70
 808a596:	6e65      	ldr	r5, [r4, #100]	; 0x64

        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 808a598:	6b61      	ldr	r1, [r4, #52]	; 0x34
                    ssl->transform_in->cipher_ctx_dec.iv,
                    ssl->transform_in->ivlen );
        }
#endif

        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 808a59a:	18ea      	adds	r2, r5, r3
 808a59c:	f812 ac01 	ldrb.w	sl, [r2, #-1]

        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 808a5a0:	f8d1 c014 	ldr.w	ip, [r1, #20]
                    ssl->transform_in->cipher_ctx_dec.iv,
                    ssl->transform_in->ivlen );
        }
#endif

        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 808a5a4:	f10a 0e01 	add.w	lr, sl, #1

        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 808a5a8:	eb0e 020c 	add.w	r2, lr, ip
 808a5ac:	4293      	cmp	r3, r2
        }
        else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 808a5ae:	68e2      	ldr	r2, [r4, #12]
        {
#if defined(MBEDTLS_SSL_DEBUG_ALL)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < maclen (%d) + padlen (%d)",
                        ssl->in_msglen, ssl->transform_in->maclen, padlen ) );
#endif
            padlen = 0;
 808a5b0:	bf34      	ite	cc
 808a5b2:	4686      	movcc	lr, r0
{
    size_t i;
    mbedtls_cipher_mode_t mode;
    int auth_done = 0;
#if defined(SSL_SOME_MODES_USE_MAC)
    size_t padlen = 0, correct = 1;
 808a5b4:	2001      	movcs	r0, #1
        }
        else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 808a5b6:	2a00      	cmp	r2, #0
 808a5b8:	f340 80e0 	ble.w	808a77c <mbedtls_ssl_read_record_layer+0x44c>
             *                     ssl->transform_in->maclen
             *
             * In both cases we reset padding_idx to a safe value (0) to
             * prevent out-of-buffer reads.
             */
            correct &= ( padlen <= ssl->in_msglen );
 808a5bc:	4573      	cmp	r3, lr
 808a5be:	bf34      	ite	cc
 808a5c0:	2000      	movcc	r0, #0
 808a5c2:	f000 0001 	andcs.w	r0, r0, #1
            /*
             * TLSv1+: always check the padding up to the first failure
             * and fake check up to 256 bytes of padding
             */
            size_t pad_count = 0, real_count = 1;
            size_t padding_idx = ssl->in_msglen - padlen;
 808a5c6:	ebce 0203 	rsb	r2, lr, r3
             * In both cases we reset padding_idx to a safe value (0) to
             * prevent out-of-buffer reads.
             */
            correct &= ( padlen <= ssl->in_msglen );
            correct &= ( padding_idx <= MBEDTLS_SSL_MAX_CONTENT_LEN +
                                       ssl->transform_in->maclen );
 808a5ca:	f50c 5c00 	add.w	ip, ip, #8192	; 0x2000
 808a5ce:	4562      	cmp	r2, ip
 808a5d0:	bf8c      	ite	hi
 808a5d2:	2000      	movhi	r0, #0
 808a5d4:	f000 0001 	andls.w	r0, r0, #1
        {
            /*
             * TLSv1+: always check the padding up to the first failure
             * and fake check up to 256 bytes of padding
             */
            size_t pad_count = 0, real_count = 1;
 808a5d8:	f04f 0800 	mov.w	r8, #0
            correct &= ( padding_idx <= MBEDTLS_SSL_MAX_CONTENT_LEN +
                                       ssl->transform_in->maclen );

            padding_idx *= correct;

            for( i = 0; i < 256; i++ )
 808a5dc:	46c4      	mov	ip, r8
            {
                real_count &= ( i < padlen );
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 808a5de:	fb00 5202 	mla	r2, r0, r2, r5
        {
            /*
             * TLSv1+: always check the padding up to the first failure
             * and fake check up to 256 bytes of padding
             */
            size_t pad_count = 0, real_count = 1;
 808a5e2:	f04f 0901 	mov.w	r9, #1

            for( i = 0; i < 256; i++ )
            {
                real_count &= ( i < padlen );
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 808a5e6:	f10e 3aff 	add.w	sl, lr, #4294967295

            padding_idx *= correct;

            for( i = 0; i < 256; i++ )
            {
                real_count &= ( i < padlen );
 808a5ea:	45e6      	cmp	lr, ip
 808a5ec:	bf94      	ite	ls
 808a5ee:	f04f 0900 	movls.w	r9, #0
 808a5f2:	f009 0901 	andhi.w	r9, r9, #1
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 808a5f6:	f812 500c 	ldrb.w	r5, [r2, ip]
            correct &= ( padding_idx <= MBEDTLS_SSL_MAX_CONTENT_LEN +
                                       ssl->transform_in->maclen );

            padding_idx *= correct;

            for( i = 0; i < 256; i++ )
 808a5fa:	f10c 0c01 	add.w	ip, ip, #1
            {
                real_count &= ( i < padlen );
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 808a5fe:	4555      	cmp	r5, sl
 808a600:	bf14      	ite	ne
 808a602:	2500      	movne	r5, #0
 808a604:	2501      	moveq	r5, #1
            correct &= ( padding_idx <= MBEDTLS_SSL_MAX_CONTENT_LEN +
                                       ssl->transform_in->maclen );

            padding_idx *= correct;

            for( i = 0; i < 256; i++ )
 808a606:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
            {
                real_count &= ( i < padlen );
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 808a60a:	fb09 8805 	mla	r8, r9, r5, r8
            correct &= ( padding_idx <= MBEDTLS_SSL_MAX_CONTENT_LEN +
                                       ssl->transform_in->maclen );

            padding_idx *= correct;

            for( i = 0; i < 256; i++ )
 808a60e:	d1ec      	bne.n	808a5ea <mbedtls_ssl_read_record_layer+0x2ba>
                real_count &= ( i < padlen );
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
            }

            correct &= ( pad_count == padlen ); /* Only 1 on correct padding */
 808a610:	45c6      	cmp	lr, r8
 808a612:	bf14      	ite	ne
 808a614:	2500      	movne	r5, #0
 808a616:	f000 0501 	andeq.w	r5, r0, #1

#if defined(MBEDTLS_SSL_DEBUG_ALL)
            if( padlen > 0 && correct == 0 )
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad padding byte detected" ) );
#endif
            padlen &= correct * 0x1FF;
 808a61a:	ea4f 2a45 	mov.w	sl, r5, lsl #9
 808a61e:	ebc5 0a0a 	rsb	sl, r5, sl
 808a622:	ea0a 0a0e 	and.w	sl, sl, lr
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->in_msglen -= padlen;
 808a626:	ebca 0303 	rsb	r3, sl, r3
 808a62a:	6723      	str	r3, [r4, #112]	; 0x70
#if defined(SSL_SOME_MODES_USE_MAC)
    if( auth_done == 0 )
    {
        unsigned char mac_expect[MBEDTLS_SSL_MAC_ADD];

        ssl->in_msglen -= ssl->transform_in->maclen;
 808a62c:	694a      	ldr	r2, [r1, #20]
 808a62e:	1a9b      	subs	r3, r3, r2

        ssl->in_len[0] = (unsigned char)( ssl->in_msglen >> 8 );
 808a630:	6de2      	ldr	r2, [r4, #92]	; 0x5c
#if defined(SSL_SOME_MODES_USE_MAC)
    if( auth_done == 0 )
    {
        unsigned char mac_expect[MBEDTLS_SSL_MAC_ADD];

        ssl->in_msglen -= ssl->transform_in->maclen;
 808a632:	6723      	str	r3, [r4, #112]	; 0x70

        ssl->in_len[0] = (unsigned char)( ssl->in_msglen >> 8 );
 808a634:	0a1b      	lsrs	r3, r3, #8
 808a636:	7013      	strb	r3, [r2, #0]
        ssl->in_len[1] = (unsigned char)( ssl->in_msglen      );
 808a638:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 808a63a:	6f22      	ldr	r2, [r4, #112]	; 0x70
 808a63c:	705a      	strb	r2, [r3, #1]
        }
        else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
        defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 808a63e:	68e3      	ldr	r3, [r4, #12]
 808a640:	2b00      	cmp	r3, #0
 808a642:	f340 809b 	ble.w	808a77c <mbedtls_ssl_read_record_layer+0x44c>
             * length, as we previously did in_msglen -= maclen too.
             */
            const size_t max_len = ssl->in_msglen + padlen;
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;

            switch( ssl->transform_in->ciphersuite_info->mac )
 808a646:	6b60      	ldr	r0, [r4, #52]	; 0x34
             * in_msglen -= padlen.
             *
             * Note that max_len + maclen is never more than the buffer
             * length, as we previously did in_msglen -= maclen too.
             */
            const size_t max_len = ssl->in_msglen + padlen;
 808a648:	6f23      	ldr	r3, [r4, #112]	; 0x70
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;

            switch( ssl->transform_in->ciphersuite_info->mac )
 808a64a:	6802      	ldr	r2, [r0, #0]
             * in_msglen -= padlen.
             *
             * Note that max_len + maclen is never more than the buffer
             * length, as we previously did in_msglen -= maclen too.
             */
            const size_t max_len = ssl->in_msglen + padlen;
 808a64c:	eb0a 0903 	add.w	r9, sl, r3
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;

            switch( ssl->transform_in->ciphersuite_info->mac )
 808a650:	7a52      	ldrb	r2, [r2, #9]
             *
             * Note that max_len + maclen is never more than the buffer
             * length, as we previously did in_msglen -= maclen too.
             */
            const size_t max_len = ssl->in_msglen + padlen;
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;
 808a652:	f5b9 7f80 	cmp.w	r9, #256	; 0x100

            switch( ssl->transform_in->ciphersuite_info->mac )
 808a656:	f1a2 0203 	sub.w	r2, r2, #3
             *
             * Note that max_len + maclen is never more than the buffer
             * length, as we previously did in_msglen -= maclen too.
             */
            const size_t max_len = ssl->in_msglen + padlen;
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;
 808a65a:	bf88      	it	hi
 808a65c:	f5a9 7680 	subhi.w	r6, r9, #256	; 0x100

            switch( ssl->transform_in->ciphersuite_info->mac )
 808a660:	2a04      	cmp	r2, #4
 808a662:	f200 808b 	bhi.w	808a77c <mbedtls_ssl_read_record_layer+0x44c>
 808a666:	e8df f002 	tbb	[pc, r2]
 808a66a:	0303      	.short	0x0303
 808a66c:	0389      	.short	0x0389
 808a66e:	0b          	.byte	0x0b
 808a66f:	00          	.byte	0x00
                case MBEDTLS_MD_MD5:
                case MBEDTLS_MD_SHA1:
                case MBEDTLS_MD_SHA256:
                    /* 8 bytes of message size, 64-byte compression blocks */
                    extra_run = ( 13 + ssl->in_msglen + padlen + 8 ) / 64 -
                                ( 13 + ssl->in_msglen          + 8 ) / 64;
 808a670:	f103 0215 	add.w	r2, r3, #21
 808a674:	f109 0115 	add.w	r1, r9, #21
 808a678:	0992      	lsrs	r2, r2, #6
 808a67a:	ebc2 1391 	rsb	r3, r2, r1, lsr #6
 808a67e:	e006      	b.n	808a68e <mbedtls_ssl_read_record_layer+0x35e>
#endif
#if defined(MBEDTLS_SHA512_C)
                case MBEDTLS_MD_SHA384:
                    /* 16 bytes of message size, 128-byte compression blocks */
                    extra_run = ( 13 + ssl->in_msglen + padlen + 16 ) / 128 -
                                ( 13 + ssl->in_msglen          + 16 ) / 128;
 808a680:	f103 021d 	add.w	r2, r3, #29
 808a684:	f109 011d 	add.w	r1, r9, #29
 808a688:	09d2      	lsrs	r2, r2, #7
 808a68a:	ebc2 13d1 	rsb	r3, r2, r1, lsr #7
                default:
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
            }

            extra_run &= correct * 0xFF;
 808a68e:	ea4f 2805 	mov.w	r8, r5, lsl #8

            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 808a692:	2208      	movs	r2, #8
 808a694:	6d61      	ldr	r1, [r4, #84]	; 0x54
                default:
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
            }

            extra_run &= correct * 0xFF;
 808a696:	ebc5 0808 	rsb	r8, r5, r8

            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 808a69a:	3044      	adds	r0, #68	; 0x44
                default:
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
            }

            extra_run &= correct * 0xFF;
 808a69c:	ea08 0803 	and.w	r8, r8, r3

            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 808a6a0:	f7fd fca0 	bl	8087fe4 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_hdr, 3 );
 808a6a4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 808a6a6:	2203      	movs	r2, #3
 808a6a8:	6da1      	ldr	r1, [r4, #88]	; 0x58
 808a6aa:	3044      	adds	r0, #68	; 0x44
 808a6ac:	f7fd fc9a 	bl	8087fe4 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_len, 2 );
 808a6b0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 808a6b2:	2202      	movs	r2, #2
 808a6b4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 808a6b6:	3044      	adds	r0, #68	; 0x44
 808a6b8:	f7fd fc94 	bl	8087fe4 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_msg,
 808a6bc:	6b60      	ldr	r0, [r4, #52]	; 0x34
                             ssl->in_msglen );
 808a6be:	6f22      	ldr	r2, [r4, #112]	; 0x70
 808a6c0:	6e61      	ldr	r1, [r4, #100]	; 0x64
 808a6c2:	3044      	adds	r0, #68	; 0x44
 808a6c4:	f7fd fc8e 	bl	8087fe4 <mbedtls_md_hmac_update>
            /* Make sure we access everything even when padlen > 0. This
             * makes the synchronisation requirements for just-in-time
             * Prime+Probe attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + ssl->in_msglen, padlen );
 808a6c8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 808a6ca:	6f23      	ldr	r3, [r4, #112]	; 0x70
 808a6cc:	4413      	add	r3, r2
 808a6ce:	449a      	add	sl, r3
      defined(MBEDTLS_SSL_PROTO_TLS1_2) )
/* This function makes sure every byte in the memory region is accessed
 * (in ascending addresses order) */
static void ssl_read_memory( unsigned char *p, size_t len )
{
    unsigned char acc = 0;
 808a6d0:	2200      	movs	r2, #0
    volatile unsigned char force;

    for( ; len != 0; p++, len-- )
 808a6d2:	4553      	cmp	r3, sl
 808a6d4:	d003      	beq.n	808a6de <mbedtls_ssl_read_record_layer+0x3ae>
        acc ^= *p;
 808a6d6:	f813 1b01 	ldrb.w	r1, [r3], #1
 808a6da:	404a      	eors	r2, r1
 808a6dc:	e7f9      	b.n	808a6d2 <mbedtls_ssl_read_record_layer+0x3a2>
                             ssl->in_msglen );
            /* Make sure we access everything even when padlen > 0. This
             * makes the synchronisation requirements for just-in-time
             * Prime+Probe attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + ssl->in_msglen, padlen );
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );
 808a6de:	6b60      	ldr	r0, [r4, #52]	; 0x34
    volatile unsigned char force;

    for( ; len != 0; p++, len-- )
        acc ^= *p;

    force = acc;
 808a6e0:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                             ssl->in_msglen );
            /* Make sure we access everything even when padlen > 0. This
             * makes the synchronisation requirements for just-in-time
             * Prime+Probe attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + ssl->in_msglen, padlen );
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );
 808a6e4:	4639      	mov	r1, r7
 808a6e6:	3044      	adds	r0, #68	; 0x44

    for( ; len != 0; p++, len-- )
        acc ^= *p;

    force = acc;
    (void) force;
 808a6e8:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
                             ssl->in_msglen );
            /* Make sure we access everything even when padlen > 0. This
             * makes the synchronisation requirements for just-in-time
             * Prime+Probe attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + ssl->in_msglen, padlen );
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );
 808a6ec:	f7fd fc8a 	bl	8088004 <mbedtls_md_hmac_finish>

            /* Call mbedtls_md_process at least once due to cache attacks
             * that observe whether md_process() was called of not */
            for( j = 0; j < extra_run + 1; j++ )
 808a6f0:	f04f 0a00 	mov.w	sl, #0
 808a6f4:	f108 0801 	add.w	r8, r8, #1
 808a6f8:	45d0      	cmp	r8, sl
 808a6fa:	6b60      	ldr	r0, [r4, #52]	; 0x34
 808a6fc:	d906      	bls.n	808a70c <mbedtls_ssl_read_record_layer+0x3dc>
                mbedtls_md_process( &ssl->transform_in->md_ctx_dec, ssl->in_msg );
 808a6fe:	6e61      	ldr	r1, [r4, #100]	; 0x64
 808a700:	3044      	adds	r0, #68	; 0x44
 808a702:	f7fd fcc7 	bl	8088094 <mbedtls_md_process>
            ssl_read_memory( ssl->in_msg + ssl->in_msglen, padlen );
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );

            /* Call mbedtls_md_process at least once due to cache attacks
             * that observe whether md_process() was called of not */
            for( j = 0; j < extra_run + 1; j++ )
 808a706:	f10a 0a01 	add.w	sl, sl, #1
 808a70a:	e7f5      	b.n	808a6f8 <mbedtls_ssl_read_record_layer+0x3c8>
                mbedtls_md_process( &ssl->transform_in->md_ctx_dec, ssl->in_msg );

            mbedtls_md_hmac_reset( &ssl->transform_in->md_ctx_dec );
 808a70c:	3044      	adds	r0, #68	; 0x44
 808a70e:	f7fd fca9 	bl	8088064 <mbedtls_md_hmac_reset>
            /* Make sure we access all the memory that could contain the MAC,
             * before we check it in the next code block. This makes the
             * synchronisation requirements for just-in-time Prime+Probe
             * attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + min_len,
                                 max_len - min_len + ssl->transform_in->maclen );
 808a712:	6b63      	ldr	r3, [r4, #52]	; 0x34

            /* Make sure we access all the memory that could contain the MAC,
             * before we check it in the next code block. This makes the
             * synchronisation requirements for just-in-time Prime+Probe
             * attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + min_len,
 808a714:	6e61      	ldr	r1, [r4, #100]	; 0x64
                                 max_len - min_len + ssl->transform_in->maclen );
 808a716:	6958      	ldr	r0, [r3, #20]
 808a718:	440e      	add	r6, r1
 808a71a:	4481      	add	r9, r0
 808a71c:	4489      	add	r9, r1
      defined(MBEDTLS_SSL_PROTO_TLS1_2) )
/* This function makes sure every byte in the memory region is accessed
 * (in ascending addresses order) */
static void ssl_read_memory( unsigned char *p, size_t len )
{
    unsigned char acc = 0;
 808a71e:	2300      	movs	r3, #0
    volatile unsigned char force;

    for( ; len != 0; p++, len-- )
 808a720:	454e      	cmp	r6, r9
 808a722:	d003      	beq.n	808a72c <mbedtls_ssl_read_record_layer+0x3fc>
        acc ^= *p;
 808a724:	f816 2b01 	ldrb.w	r2, [r6], #1
 808a728:	4053      	eors	r3, r2
 808a72a:	e7f9      	b.n	808a720 <mbedtls_ssl_read_record_layer+0x3f0>

    force = acc;
 808a72c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    (void) force;
 808a730:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
        MBEDTLS_SSL_DEBUG_BUF( 4, "expected mac", mac_expect, ssl->transform_in->maclen );
        MBEDTLS_SSL_DEBUG_BUF( 4, "message  mac", ssl->in_msg + ssl->in_msglen,
                               ssl->transform_in->maclen );
#endif

        if( mbedtls_ssl_safer_memcmp( ssl->in_msg + ssl->in_msglen, mac_expect,
 808a734:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
static inline int mbedtls_ssl_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;
 808a738:	2300      	movs	r3, #0
 808a73a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23

    for( i = 0; i < n; i++ )
 808a73e:	4298      	cmp	r0, r3
 808a740:	f43f aec4 	beq.w	808a4cc <mbedtls_ssl_read_record_layer+0x19c>
 808a744:	eb0c 0203 	add.w	r2, ip, r3
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
 808a748:	5c8a      	ldrb	r2, [r1, r2]
 808a74a:	5cfe      	ldrb	r6, [r7, r3]
        diff |= x ^ y;
 808a74c:	f89d e023 	ldrb.w	lr, [sp, #35]	; 0x23
 808a750:	4072      	eors	r2, r6
 808a752:	ea4e 0202 	orr.w	r2, lr, r2
 808a756:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 808a75a:	3301      	adds	r3, #1
 808a75c:	e7ef      	b.n	808a73e <mbedtls_ssl_read_record_layer+0x40e>

        /*
         * Finally check the correct flag
         */
        if( correct == 0 )
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 808a75e:	480b      	ldr	r0, [pc, #44]	; (808a78c <mbedtls_ssl_read_record_layer+0x45c>)
 808a760:	e011      	b.n	808a786 <mbedtls_ssl_read_record_layer+0x456>

    if( ssl->in_msglen == 0 )
    {
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3
            && ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
 808a762:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808a764:	2b17      	cmp	r3, #23
 808a766:	f43f aec1 	beq.w	808a4ec <mbedtls_ssl_read_record_layer+0x1bc>
 808a76a:	e009      	b.n	808a780 <mbedtls_ssl_read_record_layer+0x450>
                                "messages, possible DoS attack" ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
    }
    else
        ssl->nb_zero = 0;
 808a76c:	2300      	movs	r3, #0
 808a76e:	67e3      	str	r3, [r4, #124]	; 0x7c
 808a770:	e6c2      	b.n	808a4f8 <mbedtls_ssl_read_record_layer+0x1c8>
        ; /* in_ctr read from peer, not maintained internally */
    }
    else
#endif
    {
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
 808a772:	2a00      	cmp	r2, #0
 808a774:	f47f aec1 	bne.w	808a4fa <mbedtls_ssl_read_record_layer+0x1ca>

        /* The loop goes to its end iff the counter is wrapping */
        if( i == ssl_ep_len( ssl ) )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "incoming message counter would wrap" ) );
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 808a778:	4805      	ldr	r0, [pc, #20]	; (808a790 <mbedtls_ssl_read_record_layer+0x460>)
 808a77a:	e004      	b.n	808a786 <mbedtls_ssl_read_record_layer+0x456>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );

    if( ssl->session_in == NULL || ssl->transform_in == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 808a77c:	4805      	ldr	r0, [pc, #20]	; (808a794 <mbedtls_ssl_read_record_layer+0x464>)
 808a77e:	e002      	b.n	808a786 <mbedtls_ssl_read_record_layer+0x456>
                       ssl->in_msg, ssl->in_msglen );

        if( ssl->in_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 808a780:	4805      	ldr	r0, [pc, #20]	; (808a798 <mbedtls_ssl_read_record_layer+0x468>)
 808a782:	e000      	b.n	808a786 <mbedtls_ssl_read_record_layer+0x456>
            ssl_handshake_wrapup_free_hs_transform( ssl );
        }
    }
#endif

    return( 0 );
 808a784:	2000      	movs	r0, #0
}
 808a786:	b016      	add	sp, #88	; 0x58
 808a788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808a78c:	ffff8e80 	.word	0xffff8e80
 808a790:	ffff9480 	.word	0xffff9480
 808a794:	ffff9400 	.word	0xffff9400
 808a798:	ffff8e00 	.word	0xffff8e00

0808a79c <mbedtls_ssl_read_record>:
 * Silently ignore non-fatal alert (and for DTLS, invalid records as well,
 * RFC 6347 4.1.2.7) and continue reading until a valid record is found.
 *
 */
int mbedtls_ssl_read_record( mbedtls_ssl_context *ssl )
{
 808a79c:	b538      	push	{r3, r4, r5, lr}
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );

    if( ssl->keep_current_message == 0 )
 808a79e:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
 * Silently ignore non-fatal alert (and for DTLS, invalid records as well,
 * RFC 6347 4.1.2.7) and continue reading until a valid record is found.
 *
 */
int mbedtls_ssl_read_record( mbedtls_ssl_context *ssl )
{
 808a7a2:	4605      	mov	r5, r0
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );

    if( ssl->keep_current_message == 0 )
 808a7a4:	b98c      	cbnz	r4, 808a7ca <mbedtls_ssl_read_record+0x2e>
    {
        do {

            if( ( ret = mbedtls_ssl_read_record_layer( ssl ) ) != 0 )
 808a7a6:	4628      	mov	r0, r5
 808a7a8:	f7ff fdc2 	bl	808a330 <mbedtls_ssl_read_record_layer>
 808a7ac:	b988      	cbnz	r0, 808a7d2 <mbedtls_ssl_read_record+0x36>
            {
                MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
                return( ret );
            }

            ret = mbedtls_ssl_handle_message_type( ssl );
 808a7ae:	4628      	mov	r0, r5
 808a7b0:	f7ff fd76 	bl	808a2a0 <mbedtls_ssl_handle_message_type>

        } while( MBEDTLS_ERR_SSL_NON_FATAL == ret );
 808a7b4:	f510 4fcd 	cmn.w	r0, #26240	; 0x6680
 808a7b8:	d0f5      	beq.n	808a7a6 <mbedtls_ssl_read_record+0xa>

        if( 0 != ret )
 808a7ba:	b950      	cbnz	r0, 808a7d2 <mbedtls_ssl_read_record+0x36>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
            return( ret );
        }

        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 808a7bc:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 808a7be:	2b16      	cmp	r3, #22
 808a7c0:	d108      	bne.n	808a7d4 <mbedtls_ssl_read_record+0x38>
        {
            mbedtls_ssl_update_handshake_status( ssl );
 808a7c2:	4628      	mov	r0, r5
 808a7c4:	f7ff fd5c 	bl	808a280 <mbedtls_ssl_update_handshake_status>
 808a7c8:	e004      	b.n	808a7d4 <mbedtls_ssl_read_record+0x38>
        }
    }
    else
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= reuse previously read message" ) );
        ssl->keep_current_message = 0;
 808a7ca:	2400      	movs	r4, #0
 808a7cc:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
 808a7d0:	e000      	b.n	808a7d4 <mbedtls_ssl_read_record+0x38>
 808a7d2:	4604      	mov	r4, r0
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read record" ) );

    return( 0 );
}
 808a7d4:	4620      	mov	r0, r4
 808a7d6:	bd38      	pop	{r3, r4, r5, pc}

0808a7d8 <mbedtls_ssl_write_certificate>:

#else
/* Some certificate support -> implement write and parse */

int mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl )
{
 808a7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_x509_crt *crt;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 808a7da:	6c03      	ldr	r3, [r0, #64]	; 0x40

#else
/* Some certificate support -> implement write and parse */

int mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl )
{
 808a7dc:	4604      	mov	r4, r0
    const mbedtls_x509_crt *crt;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 808a7de:	681b      	ldr	r3, [r3, #0]
 808a7e0:	7a9a      	ldrb	r2, [r3, #10]
 808a7e2:	2a0b      	cmp	r2, #11
 808a7e4:	d809      	bhi.n	808a7fa <mbedtls_ssl_write_certificate+0x22>
 808a7e6:	f44f 6316 	mov.w	r3, #2400	; 0x960
 808a7ea:	40d3      	lsrs	r3, r2
 808a7ec:	07da      	lsls	r2, r3, #31
 808a7ee:	d504      	bpl.n	808a7fa <mbedtls_ssl_write_certificate+0x22>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
        ssl->state++;
 808a7f0:	6863      	ldr	r3, [r4, #4]
        return( 0 );
 808a7f2:	2000      	movs	r0, #0
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
        ssl->state++;
 808a7f4:	3301      	adds	r3, #1
 808a7f6:	6063      	str	r3, [r4, #4]
        return( 0 );
 808a7f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 808a7fa:	6822      	ldr	r2, [r4, #0]
 808a7fc:	f892 3060 	ldrb.w	r3, [r2, #96]	; 0x60
 808a800:	07db      	lsls	r3, r3, #31
 808a802:	d403      	bmi.n	808a80c <mbedtls_ssl_write_certificate+0x34>
    {
        if( ssl->client_auth == 0 )
 808a804:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 808a808:	2b00      	cmp	r3, #0
 808a80a:	d0f1      	beq.n	808a7f0 <mbedtls_ssl_write_certificate+0x18>

static inline mbedtls_x509_crt *mbedtls_ssl_own_cert( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 808a80c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808a80e:	b10b      	cbz	r3, 808a814 <mbedtls_ssl_write_certificate+0x3c>
 808a810:	685b      	ldr	r3, [r3, #4]
 808a812:	b90b      	cbnz	r3, 808a818 <mbedtls_ssl_write_certificate+0x40>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
 808a814:	6c93      	ldr	r3, [r2, #72]	; 0x48

    return( key_cert == NULL ? NULL : key_cert->cert );
 808a816:	b30b      	cbz	r3, 808a85c <mbedtls_ssl_write_certificate+0x84>
 808a818:	681e      	ldr	r6, [r3, #0]
 808a81a:	2307      	movs	r3, #7
     *    n+3 . ...   upper level cert, etc.
     */
    i = 7;
    crt = mbedtls_ssl_own_cert( ssl );

    while( crt != NULL )
 808a81c:	b1fe      	cbz	r6, 808a85e <mbedtls_ssl_write_certificate+0x86>
    {
        n = crt->raw.len;
 808a81e:	6875      	ldr	r5, [r6, #4]
        if( n > MBEDTLS_SSL_MAX_CONTENT_LEN - 3 - i )
 808a820:	f5c3 52ff 	rsb	r2, r3, #8160	; 0x1fe0
 808a824:	321d      	adds	r2, #29
 808a826:	4295      	cmp	r5, r2
 808a828:	d836      	bhi.n	808a898 <mbedtls_ssl_write_certificate+0xc0>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
                           i + 3 + n, MBEDTLS_SSL_MAX_CONTENT_LEN ) );
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
        }

        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
 808a82a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 808a82e:	0c29      	lsrs	r1, r5, #16
 808a830:	54d1      	strb	r1, [r2, r3]
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
 808a832:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 808a836:	0a29      	lsrs	r1, r5, #8
 808a838:	441a      	add	r2, r3
 808a83a:	7051      	strb	r1, [r2, #1]
        ssl->out_msg[i + 2] = (unsigned char)( n       );
 808a83c:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
 808a840:	1cdf      	adds	r7, r3, #3
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
        }

        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
        ssl->out_msg[i + 2] = (unsigned char)( n       );
 808a842:	441a      	add	r2, r3
 808a844:	7095      	strb	r5, [r2, #2]

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
 808a846:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 808a84a:	68b1      	ldr	r1, [r6, #8]
 808a84c:	462a      	mov	r2, r5
 808a84e:	4438      	add	r0, r7
 808a850:	f009 f995 	bl	8093b7e <memcpy>
        i += n; crt = crt->next;
 808a854:	19eb      	adds	r3, r5, r7
 808a856:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
     *    n+3 . ...   upper level cert, etc.
     */
    i = 7;
    crt = mbedtls_ssl_own_cert( ssl );

    while( crt != NULL )
 808a85a:	e7df      	b.n	808a81c <mbedtls_ssl_write_certificate+0x44>
 808a85c:	2307      	movs	r3, #7

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
        i += n; crt = crt->next;
    }

    ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );
 808a85e:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 808a862:	1fda      	subs	r2, r3, #7
 808a864:	0c10      	lsrs	r0, r2, #16
 808a866:	7108      	strb	r0, [r1, #4]
    ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );
 808a868:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 808a86c:	0a10      	lsrs	r0, r2, #8
 808a86e:	7148      	strb	r0, [r1, #5]
    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
 808a870:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
write_msg:
#endif

    ssl->state++;

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 808a874:	4620      	mov	r0, r4
        i += n; crt = crt->next;
    }

    ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );
    ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );
    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
 808a876:	718a      	strb	r2, [r1, #6]

    ssl->out_msglen  = i;
 808a878:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 808a87c:	2316      	movs	r3, #22
 808a87e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE;
 808a882:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 808a886:	220b      	movs	r2, #11
 808a888:	701a      	strb	r2, [r3, #0]

#if defined(MBEDTLS_SSL_PROTO_SSL3) && defined(MBEDTLS_SSL_CLI_C)
write_msg:
#endif

    ssl->state++;
 808a88a:	6863      	ldr	r3, [r4, #4]
 808a88c:	3301      	adds	r3, #1
 808a88e:	6063      	str	r3, [r4, #4]
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );

    return( ret );
}
 808a890:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
write_msg:
#endif

    ssl->state++;

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 808a894:	f7ff bb80 	b.w	8089f98 <mbedtls_ssl_write_record>
        n = crt->raw.len;
        if( n > MBEDTLS_SSL_MAX_CONTENT_LEN - 3 - i )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
                           i + 3 + n, MBEDTLS_SSL_MAX_CONTENT_LEN ) );
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
 808a898:	4800      	ldr	r0, [pc, #0]	; (808a89c <mbedtls_ssl_write_certificate+0xc4>)
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );

    return( ret );
}
 808a89a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808a89c:	ffff8b00 	.word	0xffff8b00

0808a8a0 <mbedtls_ssl_write_change_cipher_spec>:
{
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );

    ssl->out_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;
 808a8a0:	2214      	movs	r2, #20
    ssl->out_msglen  = 1;
    ssl->out_msg[0]  = 1;
 808a8a2:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
{
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );

    ssl->out_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;
 808a8a6:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
    ssl->out_msglen  = 1;
 808a8aa:	2201      	movs	r2, #1
 808a8ac:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
    ssl->out_msg[0]  = 1;
 808a8b0:	700a      	strb	r2, [r1, #0]

    ssl->state++;
 808a8b2:	6842      	ldr	r2, [r0, #4]
 808a8b4:	3201      	adds	r2, #1
 808a8b6:	6042      	str	r2, [r0, #4]

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 808a8b8:	f7ff bb6e 	b.w	8089f98 <mbedtls_ssl_write_record>

0808a8bc <mbedtls_ssl_parse_change_cipher_spec>:

    return( 0 );
}

int mbedtls_ssl_parse_change_cipher_spec( mbedtls_ssl_context *ssl )
{
 808a8bc:	b510      	push	{r4, lr}
 808a8be:	4604      	mov	r4, r0
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse change cipher spec" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808a8c0:	f7ff ff6c 	bl	808a79c <mbedtls_ssl_read_record>
 808a8c4:	2800      	cmp	r0, #0
 808a8c6:	d12f      	bne.n	808a928 <mbedtls_ssl_parse_change_cipher_spec+0x6c>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
 808a8c8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808a8ca:	2b14      	cmp	r3, #20
 808a8cc:	d006      	beq.n	808a8dc <mbedtls_ssl_parse_change_cipher_spec+0x20>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 808a8ce:	220a      	movs	r2, #10
 808a8d0:	2102      	movs	r1, #2
 808a8d2:	4620      	mov	r0, r4
 808a8d4:	f7ff fd14 	bl	808a300 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 808a8d8:	4814      	ldr	r0, [pc, #80]	; (808a92c <mbedtls_ssl_parse_change_cipher_spec+0x70>)
 808a8da:	bd10      	pop	{r4, pc}
    }

    if( ssl->in_msglen != 1 || ssl->in_msg[0] != 1 )
 808a8dc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 808a8de:	2b01      	cmp	r3, #1
 808a8e0:	d103      	bne.n	808a8ea <mbedtls_ssl_parse_change_cipher_spec+0x2e>
 808a8e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 808a8e4:	781b      	ldrb	r3, [r3, #0]
 808a8e6:	2b01      	cmp	r3, #1
 808a8e8:	d006      	beq.n	808a8f8 <mbedtls_ssl_parse_change_cipher_spec+0x3c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 808a8ea:	2232      	movs	r2, #50	; 0x32
 808a8ec:	2102      	movs	r1, #2
 808a8ee:	4620      	mov	r0, r4
 808a8f0:	f7ff fd06 	bl	808a300 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC );
 808a8f4:	480e      	ldr	r0, [pc, #56]	; (808a930 <mbedtls_ssl_parse_change_cipher_spec+0x74>)
 808a8f6:	bd10      	pop	{r4, pc}
    /*
     * Switch to our negotiated transform and session parameters for inbound
     * data.
     */
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for inbound data" ) );
    ssl->transform_in = ssl->transform_negotiate;
 808a8f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808a8fa:	6363      	str	r3, [r4, #52]	; 0x34
    ssl->session_in = ssl->session_negotiate;
 808a8fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 808a8fe:	6223      	str	r3, [r4, #32]
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
        }
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->in_ctr, 0, 8 );
 808a900:	6d63      	ldr	r3, [r4, #84]	; 0x54
 808a902:	6018      	str	r0, [r3, #0]
 808a904:	6058      	str	r0, [r3, #4]

    /*
     * Set the in_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 808a906:	68e3      	ldr	r3, [r4, #12]
 808a908:	6e21      	ldr	r1, [r4, #96]	; 0x60
 808a90a:	2b01      	cmp	r3, #1
    {
        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
 808a90c:	bfc9      	itett	gt
 808a90e:	6c23      	ldrgt	r3, [r4, #64]	; 0x40
                      ssl->transform_negotiate->fixed_ivlen;
    }
    else
        ssl->in_msg = ssl->in_iv;
 808a910:	6661      	strle	r1, [r4, #100]	; 0x64
     * Set the in_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
                      ssl->transform_negotiate->fixed_ivlen;
 808a912:	68da      	ldrgt	r2, [r3, #12]
 808a914:	691b      	ldrgt	r3, [r3, #16]

    ssl->state++;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );

    return( 0 );
 808a916:	f04f 0000 	mov.w	r0, #0
     * Set the in_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
                      ssl->transform_negotiate->fixed_ivlen;
 808a91a:	bfc2      	ittt	gt
 808a91c:	1ad3      	subgt	r3, r2, r3
 808a91e:	185b      	addgt	r3, r3, r1
 808a920:	6663      	strgt	r3, [r4, #100]	; 0x64
            return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );
        }
    }
#endif

    ssl->state++;
 808a922:	6863      	ldr	r3, [r4, #4]
 808a924:	3301      	adds	r3, #1
 808a926:	6063      	str	r3, [r4, #4]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );

    return( 0 );
}
 808a928:	bd10      	pop	{r4, pc}
 808a92a:	bf00      	nop
 808a92c:	ffff8900 	.word	0xffff8900
 808a930:	ffff8200 	.word	0xffff8200

0808a934 <mbedtls_ssl_optimize_checksum>:
        ssl->handshake->update_checksum = ssl_update_checksum_md5sha1;
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
 808a934:	7a4b      	ldrb	r3, [r1, #9]
 808a936:	2b07      	cmp	r3, #7
        ssl->handshake->update_checksum = ssl_update_checksum_sha384;
 808a938:	bf08      	it	eq
 808a93a:	4a03      	ldreq	r2, [pc, #12]	; (808a948 <mbedtls_ssl_optimize_checksum+0x14>)
 808a93c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    else
#endif
#if defined(MBEDTLS_SHA256_C)
    if( ciphersuite_info->mac != MBEDTLS_MD_SHA384 )
        ssl->handshake->update_checksum = ssl_update_checksum_sha256;
 808a93e:	bf18      	it	ne
 808a940:	4a02      	ldrne	r2, [pc, #8]	; (808a94c <mbedtls_ssl_optimize_checksum+0x18>)
 808a942:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
 808a946:	4770      	bx	lr
 808a948:	08089b99 	.word	0x08089b99
 808a94c:	08089b91 	.word	0x08089b91

0808a950 <mbedtls_ssl_write_finished>:

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup" ) );
}

int mbedtls_ssl_write_finished( mbedtls_ssl_context *ssl )
{
 808a950:	b510      	push	{r4, lr}
 808a952:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write finished" ) );

    /*
     * Set the out_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 808a954:	68c3      	ldr	r3, [r0, #12]
 808a956:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94
 808a95a:	2b01      	cmp	r3, #1
    {
        ssl->out_msg = ssl->out_iv + ssl->transform_negotiate->ivlen -
 808a95c:	bfc9      	itett	gt
 808a95e:	6c03      	ldrgt	r3, [r0, #64]	; 0x40
                       ssl->transform_negotiate->fixed_ivlen;
    }
    else
        ssl->out_msg = ssl->out_iv;
 808a960:	f8c0 1098 	strle.w	r1, [r0, #152]	; 0x98
     * Set the out_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->out_msg = ssl->out_iv + ssl->transform_negotiate->ivlen -
                       ssl->transform_negotiate->fixed_ivlen;
 808a964:	68da      	ldrgt	r2, [r3, #12]
 808a966:	691b      	ldrgt	r3, [r3, #16]
 808a968:	bfc2      	ittt	gt
 808a96a:	1ad3      	subgt	r3, r2, r3
 808a96c:	185b      	addgt	r3, r3, r1
 808a96e:	f8c0 3098 	strgt.w	r3, [r0, #152]	; 0x98
    }
    else
        ssl->out_msg = ssl->out_iv;

    ssl->handshake->calc_finished( ssl, ssl->out_msg + 4, ssl->conf->endpoint );
 808a972:	6803      	ldr	r3, [r0, #0]
 808a974:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
 808a978:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 808a97c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 808a97e:	f002 0201 	and.w	r2, r2, #1
 808a982:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 808a986:	3104      	adds	r1, #4
 808a988:	4798      	blx	r3
     * RFC 5246 7.4.9 (Page 63) says 12 is the default length and ciphersuites
     * may define some other value. Currently (early 2016), no defined
     * ciphersuite does this (and this is unlikely to change as activity has
     * moved to TLS 1.3 now) so we can keep the hardcoded 12 here.
     */
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
 808a98a:	68e3      	ldr	r3, [r4, #12]
    memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );
#endif

    ssl->out_msglen  = 4 + hash_len;
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
 808a98c:	2214      	movs	r2, #20
     * RFC 5246 7.4.9 (Page 63) says 12 is the default length and ciphersuites
     * may define some other value. Currently (early 2016), no defined
     * ciphersuite does this (and this is unlikely to change as activity has
     * moved to TLS 1.3 now) so we can keep the hardcoded 12 here.
     */
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
 808a98e:	2b00      	cmp	r3, #0
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    ssl->verify_data_len = hash_len;
    memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );
#endif

    ssl->out_msglen  = 4 + hash_len;
 808a990:	bf14      	ite	ne
 808a992:	2310      	movne	r3, #16
 808a994:	2328      	moveq	r3, #40	; 0x28
 808a996:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 808a99a:	2316      	movs	r3, #22
 808a99c:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
 808a9a0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 808a9a4:	701a      	strb	r2, [r3, #0]

    /*
     * In case of session resuming, invert the client and server
     * ChangeCipherSpec messages order.
     */
    if( ssl->handshake->resume != 0 )
 808a9a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808a9a8:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 808a9ac:	b133      	cbz	r3, 808a9bc <mbedtls_ssl_write_finished+0x6c>
    {
#if defined(MBEDTLS_SSL_CLI_C)
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 808a9ae:	6823      	ldr	r3, [r4, #0]
 808a9b0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 808a9b4:	07db      	lsls	r3, r3, #31
 808a9b6:	d404      	bmi.n	808a9c2 <mbedtls_ssl_write_finished+0x72>
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 808a9b8:	230f      	movs	r3, #15
 808a9ba:	e001      	b.n	808a9c0 <mbedtls_ssl_write_finished+0x70>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
#endif
    }
    else
        ssl->state++;
 808a9bc:	6863      	ldr	r3, [r4, #4]
 808a9be:	3301      	adds	r3, #1
 808a9c0:	6063      	str	r3, [r4, #4]
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
        }
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->out_ctr, 0, 8 );
 808a9c2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 808a9c6:	2200      	movs	r2, #0
 808a9c8:	601a      	str	r2, [r3, #0]
 808a9ca:	605a      	str	r2, [r3, #4]

    ssl->transform_out = ssl->transform_negotiate;
 808a9cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        mbedtls_ssl_send_flight_completed( ssl );
#endif

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 808a9ce:	4620      	mov	r0, r4
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->out_ctr, 0, 8 );

    ssl->transform_out = ssl->transform_negotiate;
 808a9d0:	63a3      	str	r3, [r4, #56]	; 0x38
    ssl->session_out = ssl->session_negotiate;
 808a9d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 808a9d4:	6263      	str	r3, [r4, #36]	; 0x24
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write finished" ) );

    return( 0 );
}
 808a9d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        mbedtls_ssl_send_flight_completed( ssl );
#endif

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 808a9da:	f7ff badd 	b.w	8089f98 <mbedtls_ssl_write_record>
	...

0808a9e0 <mbedtls_ssl_parse_finished>:
#else
#define SSL_MAX_HASH_LEN 12
#endif

int mbedtls_ssl_parse_finished( mbedtls_ssl_context *ssl )
{
 808a9e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    unsigned int hash_len;
    unsigned char buf[SSL_MAX_HASH_LEN];

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );

    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
 808a9e2:	6803      	ldr	r3, [r0, #0]
#else
#define SSL_MAX_HASH_LEN 12
#endif

int mbedtls_ssl_parse_finished( mbedtls_ssl_context *ssl )
{
 808a9e4:	4604      	mov	r4, r0
    unsigned int hash_len;
    unsigned char buf[SSL_MAX_HASH_LEN];

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );

    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
 808a9e6:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 808a9ea:	6b03      	ldr	r3, [r0, #48]	; 0x30
 808a9ec:	43d2      	mvns	r2, r2
 808a9ee:	ad01      	add	r5, sp, #4
 808a9f0:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 808a9f4:	f002 0201 	and.w	r2, r2, #1
 808a9f8:	4629      	mov	r1, r5
 808a9fa:	4798      	blx	r3

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808a9fc:	4620      	mov	r0, r4
 808a9fe:	f7ff fecd 	bl	808a79c <mbedtls_ssl_read_record>
 808aa02:	2800      	cmp	r0, #0
 808aa04:	d13b      	bne.n	808aa7e <mbedtls_ssl_parse_finished+0x9e>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 808aa06:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808aa08:	2b16      	cmp	r3, #22
 808aa0a:	d006      	beq.n	808aa1a <mbedtls_ssl_parse_finished+0x3a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 808aa0c:	220a      	movs	r2, #10
 808aa0e:	2102      	movs	r1, #2
 808aa10:	4620      	mov	r0, r4
 808aa12:	f7ff fc75 	bl	808a300 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 808aa16:	481b      	ldr	r0, [pc, #108]	; (808aa84 <mbedtls_ssl_parse_finished+0xa4>)
 808aa18:	e031      	b.n	808aa7e <mbedtls_ssl_parse_finished+0x9e>
        hash_len = 36;
    else
#endif
        hash_len = 12;

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_FINISHED ||
 808aa1a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 808aa1c:	780b      	ldrb	r3, [r1, #0]
 808aa1e:	2b14      	cmp	r3, #20
 808aa20:	d115      	bne.n	808aa4e <mbedtls_ssl_parse_finished+0x6e>
 808aa22:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 808aa24:	2b10      	cmp	r3, #16
 808aa26:	d112      	bne.n	808aa4e <mbedtls_ssl_parse_finished+0x6e>
static inline int mbedtls_ssl_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;
 808aa28:	f88d 0003 	strb.w	r0, [sp, #3]
 808aa2c:	1d03      	adds	r3, r0, #4
    for( i = 0; i < n; i++ )
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
 808aa2e:	5ccb      	ldrb	r3, [r1, r3]
 808aa30:	5c2a      	ldrb	r2, [r5, r0]
        diff |= x ^ y;
 808aa32:	f89d 6003 	ldrb.w	r6, [sp, #3]
 808aa36:	4053      	eors	r3, r2
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 808aa38:	3001      	adds	r0, #1
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
 808aa3a:	4333      	orrs	r3, r6
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 808aa3c:	280c      	cmp	r0, #12
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
 808aa3e:	f88d 3003 	strb.w	r3, [sp, #3]
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 808aa42:	d1f3      	bne.n	808aa2c <mbedtls_ssl_parse_finished+0x4c>
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
    }

    return( diff );
 808aa44:	f89d 3003 	ldrb.w	r3, [sp, #3]
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
    }

    if( mbedtls_ssl_safer_memcmp( ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl ),
 808aa48:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 808aa4c:	b133      	cbz	r3, 808aa5c <mbedtls_ssl_parse_finished+0x7c>
                      buf, hash_len ) != 0 )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 808aa4e:	2232      	movs	r2, #50	; 0x32
 808aa50:	2102      	movs	r1, #2
 808aa52:	4620      	mov	r0, r4
 808aa54:	f7ff fc54 	bl	808a300 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
 808aa58:	480b      	ldr	r0, [pc, #44]	; (808aa88 <mbedtls_ssl_parse_finished+0xa8>)
 808aa5a:	e010      	b.n	808aa7e <mbedtls_ssl_parse_finished+0x9e>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    ssl->verify_data_len = hash_len;
    memcpy( ssl->peer_verify_data, buf, hash_len );
#endif

    if( ssl->handshake->resume != 0 )
 808aa5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808aa5e:	f8d3 01e4 	ldr.w	r0, [r3, #484]	; 0x1e4
 808aa62:	b138      	cbz	r0, 808aa74 <mbedtls_ssl_parse_finished+0x94>
    {
#if defined(MBEDTLS_SSL_CLI_C)
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 808aa64:	6823      	ldr	r3, [r4, #0]
 808aa66:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
 808aa6a:	f010 0001 	ands.w	r0, r0, #1
 808aa6e:	d105      	bne.n	808aa7c <mbedtls_ssl_parse_finished+0x9c>
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
 808aa70:	230a      	movs	r3, #10
 808aa72:	e001      	b.n	808aa78 <mbedtls_ssl_parse_finished+0x98>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
#endif
    }
    else
        ssl->state++;
 808aa74:	6863      	ldr	r3, [r4, #4]
 808aa76:	3301      	adds	r3, #1
 808aa78:	6063      	str	r3, [r4, #4]
 808aa7a:	e000      	b.n	808aa7e <mbedtls_ssl_parse_finished+0x9e>
        mbedtls_ssl_recv_flight_completed( ssl );
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse finished" ) );

    return( 0 );
 808aa7c:	4610      	mov	r0, r2
}
 808aa7e:	b004      	add	sp, #16
 808aa80:	bd70      	pop	{r4, r5, r6, pc}
 808aa82:	bf00      	nop
 808aa84:	ffff8900 	.word	0xffff8900
 808aa88:	ffff8180 	.word	0xffff8180

0808aa8c <mbedtls_ssl_session_init>:
    mbedtls_md_init( &transform->md_ctx_dec );
}

void mbedtls_ssl_session_init( mbedtls_ssl_session *session )
{
    memset( session, 0, sizeof(mbedtls_ssl_session) );
 808aa8c:	2274      	movs	r2, #116	; 0x74
 808aa8e:	2100      	movs	r1, #0
 808aa90:	f009 b89b 	b.w	8093bca <memset>

0808aa94 <mbedtls_ssl_init>:
/*
 * Initialize an SSL context
 */
void mbedtls_ssl_init( mbedtls_ssl_context *ssl )
{
    memset( ssl, 0, sizeof( mbedtls_ssl_context ) );
 808aa94:	22b4      	movs	r2, #180	; 0xb4
 808aa96:	2100      	movs	r1, #0
 808aa98:	f009 b897 	b.w	8093bca <memset>

0808aa9c <mbedtls_ssl_conf_authmode>:
}
#endif

void mbedtls_ssl_conf_authmode( mbedtls_ssl_config *conf, int authmode )
{
    conf->authmode   = authmode;
 808aa9c:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 808aaa0:	f361 0383 	bfi	r3, r1, #2, #2
 808aaa4:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 808aaa8:	4770      	bx	lr

0808aaaa <mbedtls_ssl_conf_verify>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
void mbedtls_ssl_conf_verify( mbedtls_ssl_config *conf,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
    conf->f_vrfy      = f_vrfy;
 808aaaa:	6341      	str	r1, [r0, #52]	; 0x34
    conf->p_vrfy      = p_vrfy;
 808aaac:	6382      	str	r2, [r0, #56]	; 0x38
 808aaae:	4770      	bx	lr

0808aab0 <mbedtls_ssl_conf_rng>:

void mbedtls_ssl_conf_rng( mbedtls_ssl_config *conf,
                  int (*f_rng)(void *, unsigned char *, size_t),
                  void *p_rng )
{
    conf->f_rng      = f_rng;
 808aab0:	6181      	str	r1, [r0, #24]
    conf->p_rng      = p_rng;
 808aab2:	61c2      	str	r2, [r0, #28]
 808aab4:	4770      	bx	lr

0808aab6 <mbedtls_ssl_conf_dbg>:

void mbedtls_ssl_conf_dbg( mbedtls_ssl_config *conf,
                  void (*f_dbg)(void *, int, const char *, int, const char *),
                  void  *p_dbg )
{
    conf->f_dbg      = f_dbg;
 808aab6:	6101      	str	r1, [r0, #16]
    conf->p_dbg      = p_dbg;
 808aab8:	6142      	str	r2, [r0, #20]
 808aaba:	4770      	bx	lr

0808aabc <mbedtls_ssl_set_bio>:
        mbedtls_ssl_recv_t *f_recv,
        mbedtls_ssl_recv_timeout_t *f_recv_timeout )
{
    ssl->p_bio          = p_bio;
    ssl->f_send         = f_send;
    ssl->f_recv         = f_recv;
 808aabc:	6143      	str	r3, [r0, #20]
    ssl->f_recv_timeout = f_recv_timeout;
 808aabe:	9b00      	ldr	r3, [sp, #0]
        void *p_bio,
        mbedtls_ssl_send_t *f_send,
        mbedtls_ssl_recv_t *f_recv,
        mbedtls_ssl_recv_timeout_t *f_recv_timeout )
{
    ssl->p_bio          = p_bio;
 808aac0:	61c1      	str	r1, [r0, #28]
    ssl->f_send         = f_send;
 808aac2:	6102      	str	r2, [r0, #16]
    ssl->f_recv         = f_recv;
    ssl->f_recv_timeout = f_recv_timeout;
 808aac4:	6183      	str	r3, [r0, #24]
 808aac6:	4770      	bx	lr

0808aac8 <mbedtls_ssl_set_timer_cb>:

void mbedtls_ssl_set_timer_cb( mbedtls_ssl_context *ssl,
                               void *p_timer,
                               mbedtls_ssl_set_timer_t *f_set_timer,
                               mbedtls_ssl_get_timer_t *f_get_timer )
{
 808aac8:	b410      	push	{r4}
    ssl->p_timer        = p_timer;
 808aaca:	6441      	str	r1, [r0, #68]	; 0x44
    ssl->f_set_timer    = f_set_timer;
 808aacc:	6482      	str	r2, [r0, #72]	; 0x48
    ssl->f_get_timer    = f_get_timer;
 808aace:	64c3      	str	r3, [r0, #76]	; 0x4c

    /* Make sure we start with no timer running */
    ssl_set_timer( ssl, 0 );
 808aad0:	2100      	movs	r1, #0
}
 808aad2:	bc10      	pop	{r4}
    ssl->p_timer        = p_timer;
    ssl->f_set_timer    = f_set_timer;
    ssl->f_get_timer    = f_get_timer;

    /* Make sure we start with no timer running */
    ssl_set_timer( ssl, 0 );
 808aad4:	f7fe beee 	b.w	80898b4 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>

0808aad8 <mbedtls_ssl_conf_own_cert>:

int mbedtls_ssl_conf_own_cert( mbedtls_ssl_config *conf,
                              mbedtls_x509_crt *own_cert,
                              mbedtls_pk_context *pk_key )
{
    return( ssl_append_key_cert( &conf->key_cert, own_cert, pk_key ) );
 808aad8:	3048      	adds	r0, #72	; 0x48
 808aada:	f7ff b83b 	b.w	8089b54 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context>

0808aade <mbedtls_ssl_conf_ca_chain>:

void mbedtls_ssl_conf_ca_chain( mbedtls_ssl_config *conf,
                               mbedtls_x509_crt *ca_chain,
                               mbedtls_x509_crl *ca_crl )
{
    conf->ca_chain   = ca_chain;
 808aade:	64c1      	str	r1, [r0, #76]	; 0x4c
    conf->ca_crl     = ca_crl;
 808aae0:	6502      	str	r2, [r0, #80]	; 0x50
 808aae2:	4770      	bx	lr

0808aae4 <mbedtls_ssl_set_hostname>:
}
#endif /* MBEDTLS_ECP_C */

#if defined(MBEDTLS_X509_CRT_PARSE_C)
int mbedtls_ssl_set_hostname( mbedtls_ssl_context *ssl, const char *hostname )
{
 808aae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808aae6:	4606      	mov	r6, r0
    /* Initialize to suppress unnecessary compiler warning */
    size_t hostname_len = 0;

    /* Check if new hostname is valid before
     * making any change to current one */
    if( hostname != NULL )
 808aae8:	460c      	mov	r4, r1
 808aaea:	b131      	cbz	r1, 808aafa <mbedtls_ssl_set_hostname+0x16>
    {
        hostname_len = strlen( hostname );
 808aaec:	4608      	mov	r0, r1
 808aaee:	f009 f88c 	bl	8093c0a <strlen>

        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
 808aaf2:	28ff      	cmp	r0, #255	; 0xff

    /* Check if new hostname is valid before
     * making any change to current one */
    if( hostname != NULL )
    {
        hostname_len = strlen( hostname );
 808aaf4:	4605      	mov	r5, r0

        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
 808aaf6:	d901      	bls.n	808aafc <mbedtls_ssl_set_hostname+0x18>
 808aaf8:	e022      	b.n	808ab40 <mbedtls_ssl_set_hostname+0x5c>

#if defined(MBEDTLS_X509_CRT_PARSE_C)
int mbedtls_ssl_set_hostname( mbedtls_ssl_context *ssl, const char *hostname )
{
    /* Initialize to suppress unnecessary compiler warning */
    size_t hostname_len = 0;
 808aafa:	460d      	mov	r5, r1
    }

    /* Now it's clear that we will overwrite the old hostname,
     * so we can free it safely */

    if( ssl->hostname != NULL )
 808aafc:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 808ab00:	b157      	cbz	r7, 808ab18 <mbedtls_ssl_set_hostname+0x34>
    {
        mbedtls_zeroize( ssl->hostname, strlen( ssl->hostname ) );
 808ab02:	4638      	mov	r0, r7
 808ab04:	f009 f881 	bl	8093c0a <strlen>
 808ab08:	4601      	mov	r1, r0
 808ab0a:	4638      	mov	r0, r7
 808ab0c:	f7fe feca 	bl	80898a4 <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( ssl->hostname );
 808ab10:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
 808ab14:	f006 fd12 	bl	809153c <free>
    }

    /* Passing NULL as hostname shall clear the old one */

    if( hostname == NULL )
 808ab18:	b91c      	cbnz	r4, 808ab22 <mbedtls_ssl_set_hostname+0x3e>
    {
        ssl->hostname = NULL;
 808ab1a:	f8c6 40ac 	str.w	r4, [r6, #172]	; 0xac
        memcpy( ssl->hostname, hostname, hostname_len );

        ssl->hostname[hostname_len] = '\0';
    }

    return( 0 );
 808ab1e:	4620      	mov	r0, r4
 808ab20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    {
        ssl->hostname = NULL;
    }
    else
    {
        ssl->hostname = (char *)mbedtls_calloc( 1, hostname_len + 1 );
 808ab22:	1c69      	adds	r1, r5, #1
 808ab24:	2001      	movs	r0, #1
 808ab26:	f009 f805 	bl	8093b34 <calloc>
 808ab2a:	4607      	mov	r7, r0
 808ab2c:	f8c6 00ac 	str.w	r0, [r6, #172]	; 0xac
        if( ssl->hostname == NULL )
 808ab30:	b140      	cbz	r0, 808ab44 <mbedtls_ssl_set_hostname+0x60>
            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

        memcpy( ssl->hostname, hostname, hostname_len );
 808ab32:	462a      	mov	r2, r5
 808ab34:	4621      	mov	r1, r4
 808ab36:	f009 f822 	bl	8093b7e <memcpy>

        ssl->hostname[hostname_len] = '\0';
 808ab3a:	2000      	movs	r0, #0
 808ab3c:	5578      	strb	r0, [r7, r5]
 808ab3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if( hostname != NULL )
    {
        hostname_len = strlen( hostname );

        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 808ab40:	4801      	ldr	r0, [pc, #4]	; (808ab48 <mbedtls_ssl_set_hostname+0x64>)
 808ab42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    else
    {
        ssl->hostname = (char *)mbedtls_calloc( 1, hostname_len + 1 );
        if( ssl->hostname == NULL )
            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 808ab44:	4801      	ldr	r0, [pc, #4]	; (808ab4c <mbedtls_ssl_set_hostname+0x68>)

        ssl->hostname[hostname_len] = '\0';
    }

    return( 0 );
}
 808ab46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808ab48:	ffff8f00 	.word	0xffff8f00
 808ab4c:	ffff8100 	.word	0xffff8100

0808ab50 <mbedtls_ssl_conf_min_version>:
    conf->max_minor_ver = minor;
}

void mbedtls_ssl_conf_min_version( mbedtls_ssl_config *conf, int major, int minor )
{
    conf->min_major_ver = major;
 808ab50:	f880 105e 	strb.w	r1, [r0, #94]	; 0x5e
    conf->min_minor_ver = minor;
 808ab54:	f880 205f 	strb.w	r2, [r0, #95]	; 0x5f
 808ab58:	4770      	bx	lr

0808ab5a <mbedtls_ssl_get_verify_result>:
    return( ssl->in_offt == NULL ? 0 : ssl->in_msglen );
}

uint32_t mbedtls_ssl_get_verify_result( const mbedtls_ssl_context *ssl )
{
    if( ssl->session != NULL )
 808ab5a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 808ab5c:	b90b      	cbnz	r3, 808ab62 <mbedtls_ssl_get_verify_result+0x8>
        return( ssl->session->verify_result );

    if( ssl->session_negotiate != NULL )
 808ab5e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 808ab60:	b10b      	cbz	r3, 808ab66 <mbedtls_ssl_get_verify_result+0xc>
        return( ssl->session_negotiate->verify_result );
 808ab62:	6e18      	ldr	r0, [r3, #96]	; 0x60
 808ab64:	4770      	bx	lr

    return( 0xFFFFFFFF );
 808ab66:	f04f 30ff 	mov.w	r0, #4294967295
}
 808ab6a:	4770      	bx	lr

0808ab6c <mbedtls_ssl_get_max_frag_len>:
    size_t max_len;

    /*
     * Assume mfl_code is correct since it was checked when set
     */
    max_len = mfl_code_to_length[ssl->conf->mfl_code];
 808ab6c:	6803      	ldr	r3, [r0, #0]
 808ab6e:	4a09      	ldr	r2, [pc, #36]	; (808ab94 <mbedtls_ssl_get_max_frag_len+0x28>)
 808ab70:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60

    /*
     * Check if a smaller max length was negotiated
     */
    if( ssl->session_out != NULL &&
 808ab74:	6a41      	ldr	r1, [r0, #36]	; 0x24
    size_t max_len;

    /*
     * Assume mfl_code is correct since it was checked when set
     */
    max_len = mfl_code_to_length[ssl->conf->mfl_code];
 808ab76:	f3c3 1382 	ubfx	r3, r3, #6, #3
 808ab7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

    /*
     * Check if a smaller max length was negotiated
     */
    if( ssl->session_out != NULL &&
 808ab7e:	b131      	cbz	r1, 808ab8e <mbedtls_ssl_get_max_frag_len+0x22>
        mfl_code_to_length[ssl->session_out->mfl_code] < max_len )
 808ab80:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 808ab84:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 808ab88:	4293      	cmp	r3, r2
 808ab8a:	bf28      	it	cs
 808ab8c:	4613      	movcs	r3, r2
    {
        max_len = mfl_code_to_length[ssl->session_out->mfl_code];
    }

    return max_len;
}
 808ab8e:	4618      	mov	r0, r3
 808ab90:	4770      	bx	lr
 808ab92:	bf00      	nop
 808ab94:	08095e40 	.word	0x08095e40

0808ab98 <mbedtls_ssl_handshake_step>:
 */
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;

    if( ssl == NULL || ssl->conf == NULL )
 808ab98:	b138      	cbz	r0, 808abaa <mbedtls_ssl_handshake_step+0x12>
 808ab9a:	6803      	ldr	r3, [r0, #0]
 808ab9c:	b12b      	cbz	r3, 808abaa <mbedtls_ssl_handshake_step+0x12>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 808ab9e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 808aba2:	07db      	lsls	r3, r3, #31
 808aba4:	d403      	bmi.n	808abae <mbedtls_ssl_handshake_step+0x16>
        ret = mbedtls_ssl_handshake_client_step( ssl );
 808aba6:	f005 b8c9 	b.w	808fd3c <mbedtls_ssl_handshake_client_step>
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 808abaa:	4802      	ldr	r0, [pc, #8]	; (808abb4 <mbedtls_ssl_handshake_step+0x1c>)
 808abac:	4770      	bx	lr
/*
 * Perform a single step of the SSL handshake
 */
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
 808abae:	4802      	ldr	r0, [pc, #8]	; (808abb8 <mbedtls_ssl_handshake_step+0x20>)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
        ret = mbedtls_ssl_handshake_server_step( ssl );
#endif

    return( ret );
}
 808abb0:	4770      	bx	lr
 808abb2:	bf00      	nop
 808abb4:	ffff8f00 	.word	0xffff8f00
 808abb8:	ffff8f80 	.word	0xffff8f80

0808abbc <mbedtls_ssl_handshake>:

/*
 * Perform the SSL handshake
 */
int mbedtls_ssl_handshake( mbedtls_ssl_context *ssl )
{
 808abbc:	b510      	push	{r4, lr}
    int ret = 0;

    if( ssl == NULL || ssl->conf == NULL )
 808abbe:	4604      	mov	r4, r0
 808abc0:	b150      	cbz	r0, 808abd8 <mbedtls_ssl_handshake+0x1c>
 808abc2:	6803      	ldr	r3, [r0, #0]
 808abc4:	b143      	cbz	r3, 808abd8 <mbedtls_ssl_handshake+0x1c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> handshake" ) );

    while( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 808abc6:	6863      	ldr	r3, [r4, #4]
 808abc8:	2b10      	cmp	r3, #16
 808abca:	d007      	beq.n	808abdc <mbedtls_ssl_handshake+0x20>
    {
        ret = mbedtls_ssl_handshake_step( ssl );
 808abcc:	4620      	mov	r0, r4
 808abce:	f7ff ffe3 	bl	808ab98 <mbedtls_ssl_handshake_step>

        if( ret != 0 )
 808abd2:	2800      	cmp	r0, #0
 808abd4:	d0f7      	beq.n	808abc6 <mbedtls_ssl_handshake+0xa>
 808abd6:	bd10      	pop	{r4, pc}
int mbedtls_ssl_handshake( mbedtls_ssl_context *ssl )
{
    int ret = 0;

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 808abd8:	4801      	ldr	r0, [pc, #4]	; (808abe0 <mbedtls_ssl_handshake+0x24>)
 808abda:	bd10      	pop	{r4, pc}
 808abdc:	2000      	movs	r0, #0
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= handshake" ) );

    return( ret );
}
 808abde:	bd10      	pop	{r4, pc}
 808abe0:	ffff8f00 	.word	0xffff8f00

0808abe4 <mbedtls_ssl_read>:

/*
 * Receive application data decrypted from the SSL layer
 */
int mbedtls_ssl_read( mbedtls_ssl_context *ssl, unsigned char *buf, size_t len )
{
 808abe4:	b570      	push	{r4, r5, r6, lr}
 808abe6:	460e      	mov	r6, r1
 808abe8:	4614      	mov	r4, r2
    int ret;
    size_t n;

    if( ssl == NULL || ssl->conf == NULL )
 808abea:	4605      	mov	r5, r0
 808abec:	2800      	cmp	r0, #0
 808abee:	d061      	beq.n	808acb4 <mbedtls_ssl_read+0xd0>
 808abf0:	6803      	ldr	r3, [r0, #0]
 808abf2:	2b00      	cmp	r3, #0
 808abf4:	d05e      	beq.n	808acb4 <mbedtls_ssl_read+0xd0>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
        return( ret );
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 808abf6:	6843      	ldr	r3, [r0, #4]
 808abf8:	2b10      	cmp	r3, #16
 808abfa:	d103      	bne.n	808ac04 <mbedtls_ssl_read+0x20>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
            return( ret );
        }
    }

    if( ssl->in_offt == NULL )
 808abfc:	6eab      	ldr	r3, [r5, #104]	; 0x68
 808abfe:	2b00      	cmp	r3, #0
 808ac00:	d142      	bne.n	808ac88 <mbedtls_ssl_read+0xa4>
 808ac02:	e007      	b.n	808ac14 <mbedtls_ssl_read+0x30>
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
    {
        ret = mbedtls_ssl_handshake( ssl );
 808ac04:	f7ff ffda 	bl	808abbc <mbedtls_ssl_handshake>
        if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 808ac08:	f510 4fd6 	cmn.w	r0, #27392	; 0x6b00
 808ac0c:	d0f6      	beq.n	808abfc <mbedtls_ssl_read+0x18>
 808ac0e:	2800      	cmp	r0, #0
 808ac10:	d0f4      	beq.n	808abfc <mbedtls_ssl_read+0x18>
 808ac12:	bd70      	pop	{r4, r5, r6, pc}
    }

    if( ssl->in_offt == NULL )
    {
        /* Start timer if not already running */
        if( ssl->f_get_timer != NULL &&
 808ac14:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 808ac16:	b11b      	cbz	r3, 808ac20 <mbedtls_ssl_read+0x3c>
            ssl->f_get_timer( ssl->p_timer ) == -1 )
 808ac18:	6c68      	ldr	r0, [r5, #68]	; 0x44
 808ac1a:	4798      	blx	r3
    }

    if( ssl->in_offt == NULL )
    {
        /* Start timer if not already running */
        if( ssl->f_get_timer != NULL &&
 808ac1c:	3001      	adds	r0, #1
 808ac1e:	d04d      	beq.n	808acbc <mbedtls_ssl_read+0xd8>
            ssl->f_get_timer( ssl->p_timer ) == -1 )
        {
            ssl_set_timer( ssl, ssl->conf->read_timeout );
        }

        if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808ac20:	4628      	mov	r0, r5
 808ac22:	f7ff fdbb 	bl	808a79c <mbedtls_ssl_read_record>
 808ac26:	b120      	cbz	r0, 808ac32 <mbedtls_ssl_read+0x4e>
        {
            if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
 808ac28:	f510 4fe5 	cmn.w	r0, #29312	; 0x7280
 808ac2c:	d157      	bne.n	808acde <mbedtls_ssl_read+0xfa>
                return( 0 );
 808ac2e:	2000      	movs	r0, #0
 808ac30:	bd70      	pop	{r4, r5, r6, pc}

            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
            return( ret );
        }

        if( ssl->in_msglen  == 0 &&
 808ac32:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 808ac34:	b953      	cbnz	r3, 808ac4c <mbedtls_ssl_read+0x68>
 808ac36:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 808ac38:	2b17      	cmp	r3, #23
 808ac3a:	d107      	bne.n	808ac4c <mbedtls_ssl_read+0x68>
            ssl->in_msgtype == MBEDTLS_SSL_MSG_APPLICATION_DATA )
        {
            /*
             * OpenSSL sends empty messages to randomize the IV
             */
            if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808ac3c:	4628      	mov	r0, r5
 808ac3e:	f7ff fdad 	bl	808a79c <mbedtls_ssl_read_record>
 808ac42:	b118      	cbz	r0, 808ac4c <mbedtls_ssl_read+0x68>
            {
                if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
 808ac44:	f510 4fe5 	cmn.w	r0, #29312	; 0x7280
 808ac48:	d0f1      	beq.n	808ac2e <mbedtls_ssl_read+0x4a>
 808ac4a:	bd70      	pop	{r4, r5, r6, pc}
                MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
                return( ret );
            }
        }

        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 808ac4c:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 808ac4e:	2b16      	cmp	r3, #22
 808ac50:	d10b      	bne.n	808ac6a <mbedtls_ssl_read+0x86>
             * - For server-side, expect CLIENT_HELLO.
             * - Fail (TLS) or silently drop record (DTLS) in other cases.
             */

#if defined(MBEDTLS_SSL_CLI_C)
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
 808ac52:	682b      	ldr	r3, [r5, #0]
 808ac54:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 808ac58:	07db      	lsls	r3, r3, #31
 808ac5a:	d435      	bmi.n	808acc8 <mbedtls_ssl_read+0xe4>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
 808ac5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
             * - For server-side, expect CLIENT_HELLO.
             * - Fail (TLS) or silently drop record (DTLS) in other cases.
             */

#if defined(MBEDTLS_SSL_CLI_C)
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
 808ac5e:	781b      	ldrb	r3, [r3, #0]
 808ac60:	bb53      	cbnz	r3, 808acb8 <mbedtls_ssl_read+0xd4>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
 808ac62:	6fab      	ldr	r3, [r5, #120]	; 0x78
 808ac64:	2b04      	cmp	r3, #4
 808ac66:	d127      	bne.n	808acb8 <mbedtls_ssl_read+0xd4>
 808ac68:	e02e      	b.n	808acc8 <mbedtls_ssl_read+0xe4>
            }
        }
#endif /* MBEDTLS_SSL_RENEGOTIATION */

        /* Fatal and closure alerts handled by mbedtls_ssl_read_record() */
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
 808ac6a:	2b15      	cmp	r3, #21
 808ac6c:	d101      	bne.n	808ac72 <mbedtls_ssl_read+0x8e>
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
                }
            }

            return( MBEDTLS_ERR_SSL_WANT_READ );
 808ac6e:	481c      	ldr	r0, [pc, #112]	; (808ace0 <mbedtls_ssl_read+0xfc>)
 808ac70:	bd70      	pop	{r4, r5, r6, pc}
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "ignoring non-fatal non-closure alert" ) );
            return( MBEDTLS_ERR_SSL_WANT_READ );
        }

        if( ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
 808ac72:	2b17      	cmp	r3, #23
 808ac74:	d120      	bne.n	808acb8 <mbedtls_ssl_read+0xd4>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad application data message" ) );
            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
        }

        ssl->in_offt = ssl->in_msg;
 808ac76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 808ac78:	66ab      	str	r3, [r5, #104]	; 0x68

        /* We're going to return something now, cancel timer,
         * except if handshake (renegotiation) is in progress */
        if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
 808ac7a:	686b      	ldr	r3, [r5, #4]
 808ac7c:	2b10      	cmp	r3, #16
 808ac7e:	d103      	bne.n	808ac88 <mbedtls_ssl_read+0xa4>
            ssl_set_timer( ssl, 0 );
 808ac80:	2100      	movs	r1, #0
 808ac82:	4628      	mov	r0, r5
 808ac84:	f7fe fe16 	bl	80898b4 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>
        }
#endif /* MBEDTLS_SSL_SRV_C && MBEDTLS_SSL_RENEGOTIATION */
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    }

    n = ( len < ssl->in_msglen )
 808ac88:	6f28      	ldr	r0, [r5, #112]	; 0x70
        ? len : ssl->in_msglen;

    memcpy( buf, ssl->in_offt, n );
 808ac8a:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 808ac8c:	4284      	cmp	r4, r0
 808ac8e:	bf28      	it	cs
 808ac90:	4604      	movcs	r4, r0
 808ac92:	4630      	mov	r0, r6
 808ac94:	4622      	mov	r2, r4
 808ac96:	f008 ff72 	bl	8093b7e <memcpy>
    ssl->in_msglen -= n;
 808ac9a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 808ac9c:	1b1b      	subs	r3, r3, r4
 808ac9e:	672b      	str	r3, [r5, #112]	; 0x70

    if( ssl->in_msglen == 0 )
 808aca0:	b91b      	cbnz	r3, 808acaa <mbedtls_ssl_read+0xc6>
    {
        /* all bytes consumed */
        ssl->in_offt = NULL;
 808aca2:	66ab      	str	r3, [r5, #104]	; 0x68
        ssl->keep_current_message = 0;
 808aca4:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
 808aca8:	e002      	b.n	808acb0 <mbedtls_ssl_read+0xcc>
    }
    else
    {
        /* more data available */
        ssl->in_offt += n;
 808acaa:	6eab      	ldr	r3, [r5, #104]	; 0x68
 808acac:	4423      	add	r3, r4
 808acae:	66ab      	str	r3, [r5, #104]	; 0x68
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read" ) );

    return( (int) n );
 808acb0:	4620      	mov	r0, r4
 808acb2:	bd70      	pop	{r4, r5, r6, pc}
{
    int ret;
    size_t n;

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 808acb4:	480b      	ldr	r0, [pc, #44]	; (808ace4 <mbedtls_ssl_read+0x100>)
 808acb6:	bd70      	pop	{r4, r5, r6, pc}
                /* With DTLS, drop the packet (probably from last handshake) */
#if defined(MBEDTLS_SSL_PROTO_DTLS)
                if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
                    return( MBEDTLS_ERR_SSL_WANT_READ );
#endif
                return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 808acb8:	480b      	ldr	r0, [pc, #44]	; (808ace8 <mbedtls_ssl_read+0x104>)
 808acba:	bd70      	pop	{r4, r5, r6, pc}
    {
        /* Start timer if not already running */
        if( ssl->f_get_timer != NULL &&
            ssl->f_get_timer( ssl->p_timer ) == -1 )
        {
            ssl_set_timer( ssl, ssl->conf->read_timeout );
 808acbc:	682b      	ldr	r3, [r5, #0]
 808acbe:	4628      	mov	r0, r5
 808acc0:	6d99      	ldr	r1, [r3, #88]	; 0x58
 808acc2:	f7fe fdf7 	bl	80898b4 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>
 808acc6:	e7ab      	b.n	808ac20 <mbedtls_ssl_read+0x3c>
                }
                else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
                if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 808acc8:	68eb      	ldr	r3, [r5, #12]
 808acca:	2b00      	cmp	r3, #0
 808accc:	dd06      	ble.n	808acdc <mbedtls_ssl_read+0xf8>
                {
                    if( ( ret = mbedtls_ssl_send_alert_message( ssl,
 808acce:	2264      	movs	r2, #100	; 0x64
 808acd0:	2101      	movs	r1, #1
 808acd2:	4628      	mov	r0, r5
 808acd4:	f7ff fb14 	bl	808a300 <mbedtls_ssl_send_alert_message>
 808acd8:	b908      	cbnz	r0, 808acde <mbedtls_ssl_read+0xfa>
 808acda:	e7c8      	b.n	808ac6e <mbedtls_ssl_read+0x8a>
                else
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 ||
          MBEDTLS_SSL_PROTO_TLS1_2 */
                {
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 808acdc:	4803      	ldr	r0, [pc, #12]	; (808acec <mbedtls_ssl_read+0x108>)
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read" ) );

    return( (int) n );
}
 808acde:	bd70      	pop	{r4, r5, r6, pc}
 808ace0:	ffff9700 	.word	0xffff9700
 808ace4:	ffff8f00 	.word	0xffff8f00
 808ace8:	ffff8900 	.word	0xffff8900
 808acec:	ffff9400 	.word	0xffff9400

0808acf0 <mbedtls_ssl_write>:

/*
 * Write application data (public-facing wrapper)
 */
int mbedtls_ssl_write( mbedtls_ssl_context *ssl, const unsigned char *buf, size_t len )
{
 808acf0:	b570      	push	{r4, r5, r6, lr}
 808acf2:	460e      	mov	r6, r1
 808acf4:	4615      	mov	r5, r2
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );

    if( ssl == NULL || ssl->conf == NULL )
 808acf6:	4604      	mov	r4, r0
 808acf8:	b350      	cbz	r0, 808ad50 <mbedtls_ssl_write+0x60>
 808acfa:	6803      	ldr	r3, [r0, #0]
 808acfc:	b343      	cbz	r3, 808ad50 <mbedtls_ssl_write+0x60>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
        return( ret );
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 808acfe:	6843      	ldr	r3, [r0, #4]
 808ad00:	2b10      	cmp	r3, #16
 808ad02:	d109      	bne.n	808ad18 <mbedtls_ssl_write+0x28>
static int ssl_write_real( mbedtls_ssl_context *ssl,
                           const unsigned char *buf, size_t len )
{
    int ret;
#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    size_t max_len = mbedtls_ssl_get_max_frag_len( ssl );
 808ad04:	4620      	mov	r0, r4
 808ad06:	f7ff ff31 	bl	808ab6c <mbedtls_ssl_get_max_frag_len>
        else
#endif
            len = max_len;
    }

    if( ssl->out_left != 0 )
 808ad0a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 808ad0e:	4285      	cmp	r5, r0
 808ad10:	bf28      	it	cs
 808ad12:	4605      	movcs	r5, r0
 808ad14:	b92b      	cbnz	r3, 808ad22 <mbedtls_ssl_write+0x32>
 808ad16:	e00a      	b.n	808ad2e <mbedtls_ssl_write+0x3e>
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
    {
        if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
 808ad18:	f7ff ff50 	bl	808abbc <mbedtls_ssl_handshake>
 808ad1c:	2800      	cmp	r0, #0
 808ad1e:	d0f1      	beq.n	808ad04 <mbedtls_ssl_write+0x14>
 808ad20:	bd70      	pop	{r4, r5, r6, pc}
         * The user has previously tried to send the data and
         * MBEDTLS_ERR_SSL_WANT_WRITE or the message was only partially
         * written. In this case, we expect the high-level write function
         * (e.g. mbedtls_ssl_write()) to be called with the same parameters
         */
        if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 808ad22:	4620      	mov	r0, r4
 808ad24:	f7ff f900 	bl	8089f28 <mbedtls_ssl_flush_output>
 808ad28:	b998      	cbnz	r0, 808ad52 <mbedtls_ssl_write+0x62>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
            return( ret );
        }
    }

    return( (int) len );
 808ad2a:	4628      	mov	r0, r5
 808ad2c:	bd70      	pop	{r4, r5, r6, pc}
         * The user is trying to send a message the first time, so we need to
         * copy the data into the internal buffers and setup the data structure
         * to keep track of partial writes
         */
        ssl->out_msglen  = len;
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
 808ad2e:	2317      	movs	r3, #23
        /*
         * The user is trying to send a message the first time, so we need to
         * copy the data into the internal buffers and setup the data structure
         * to keep track of partial writes
         */
        ssl->out_msglen  = len;
 808ad30:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
 808ad34:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        memcpy( ssl->out_msg, buf, len );
 808ad38:	462a      	mov	r2, r5
 808ad3a:	4631      	mov	r1, r6
 808ad3c:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 808ad40:	f008 ff1d 	bl	8093b7e <memcpy>

        if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 808ad44:	4620      	mov	r0, r4
 808ad46:	f7ff f927 	bl	8089f98 <mbedtls_ssl_write_record>
 808ad4a:	2800      	cmp	r0, #0
 808ad4c:	d0ed      	beq.n	808ad2a <mbedtls_ssl_write+0x3a>
 808ad4e:	bd70      	pop	{r4, r5, r6, pc}
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 808ad50:	4800      	ldr	r0, [pc, #0]	; (808ad54 <mbedtls_ssl_write+0x64>)
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write" ) );

    return( ret );
}
 808ad52:	bd70      	pop	{r4, r5, r6, pc}
 808ad54:	ffff8f00 	.word	0xffff8f00

0808ad58 <mbedtls_ssl_transform_free>:

    return( 0 );
}

void mbedtls_ssl_transform_free( mbedtls_ssl_transform *transform )
{
 808ad58:	b510      	push	{r4, lr}
    if( transform == NULL )
 808ad5a:	4604      	mov	r4, r0
 808ad5c:	b1a0      	cbz	r0, 808ad88 <mbedtls_ssl_transform_free+0x30>
#if defined(MBEDTLS_ZLIB_SUPPORT)
    deflateEnd( &transform->ctx_deflate );
    inflateEnd( &transform->ctx_inflate );
#endif

    mbedtls_cipher_free( &transform->cipher_ctx_enc );
 808ad5e:	3050      	adds	r0, #80	; 0x50
 808ad60:	f7f8 fbf2 	bl	8083548 <mbedtls_cipher_free>
    mbedtls_cipher_free( &transform->cipher_ctx_dec );
 808ad64:	f104 0090 	add.w	r0, r4, #144	; 0x90
 808ad68:	f7f8 fbee 	bl	8083548 <mbedtls_cipher_free>

    mbedtls_md_free( &transform->md_ctx_enc );
 808ad6c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 808ad70:	f7fd f867 	bl	8087e42 <mbedtls_md_free>
    mbedtls_md_free( &transform->md_ctx_dec );
 808ad74:	f104 0044 	add.w	r0, r4, #68	; 0x44
 808ad78:	f7fd f863 	bl	8087e42 <mbedtls_md_free>

    mbedtls_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
 808ad7c:	4620      	mov	r0, r4
}
 808ad7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_cipher_free( &transform->cipher_ctx_dec );

    mbedtls_md_free( &transform->md_ctx_enc );
    mbedtls_md_free( &transform->md_ctx_dec );

    mbedtls_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
 808ad82:	21d0      	movs	r1, #208	; 0xd0
 808ad84:	f7fe bd8e 	b.w	80898a4 <_ZL15mbedtls_zeroizePvj>
 808ad88:	bd10      	pop	{r4, pc}

0808ad8a <mbedtls_ssl_handshake_free>:
    }
}
#endif /* MBEDTLS_X509_CRT_PARSE_C */

void mbedtls_ssl_handshake_free( mbedtls_ssl_handshake_params *handshake )
{
 808ad8a:	b538      	push	{r3, r4, r5, lr}
    if( handshake == NULL )
 808ad8c:	4604      	mov	r4, r0
 808ad8e:	b1a0      	cbz	r0, 808adba <mbedtls_ssl_handshake_free+0x30>
    mbedtls_md5_free(    &handshake->fin_md5  );
    mbedtls_sha1_free(   &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_free(   &handshake->fin_sha256    );
 808ad90:	3018      	adds	r0, #24
 808ad92:	f7f7 fcb3 	bl	80826fc <mbedtls_sha256_free>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_free(   &handshake->fin_sha512    );
 808ad96:	f104 0088 	add.w	r0, r4, #136	; 0x88
 808ad9a:	f003 f8bd 	bl	808df18 <mbedtls_sha512_free>
    defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    /*
     * Free only the linked list wrapper, not the keys themselves
     * since the belong to the SNI callback
     */
    if( handshake->sni_key_cert != NULL )
 808ad9e:	68e0      	ldr	r0, [r4, #12]
 808ada0:	b930      	cbnz	r0, 808adb0 <mbedtls_ssl_handshake_free+0x26>
    mbedtls_free( handshake->verify_cookie );
    mbedtls_free( handshake->hs_msg );
    ssl_flight_free( handshake->flight );
#endif

    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
 808ada2:	4620      	mov	r0, r4
}
 808ada4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mbedtls_free( handshake->verify_cookie );
    mbedtls_free( handshake->hs_msg );
    ssl_flight_free( handshake->flight );
#endif

    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
 808ada8:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 808adac:	f7fe bd7a 	b.w	80898a4 <_ZL15mbedtls_zeroizePvj>
    {
        mbedtls_ssl_key_cert *cur = handshake->sni_key_cert, *next;

        while( cur != NULL )
        {
            next = cur->next;
 808adb0:	6885      	ldr	r5, [r0, #8]
            mbedtls_free( cur );
 808adb2:	f006 fbc3 	bl	809153c <free>
     */
    if( handshake->sni_key_cert != NULL )
    {
        mbedtls_ssl_key_cert *cur = handshake->sni_key_cert, *next;

        while( cur != NULL )
 808adb6:	4628      	mov	r0, r5
 808adb8:	e7f2      	b.n	808ada0 <mbedtls_ssl_handshake_free+0x16>
 808adba:	bd38      	pop	{r3, r4, r5, pc}

0808adbc <mbedtls_ssl_session_free>:

    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
}

void mbedtls_ssl_session_free( mbedtls_ssl_session *session )
{
 808adbc:	b510      	push	{r4, lr}
    if( session == NULL )
 808adbe:	4604      	mov	r4, r0
 808adc0:	b178      	cbz	r0, 808ade2 <mbedtls_ssl_session_free+0x26>
        return;

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    if( session->peer_cert != NULL )
 808adc2:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 808adc4:	b120      	cbz	r0, 808add0 <mbedtls_ssl_session_free+0x14>
    {
        mbedtls_x509_crt_free( session->peer_cert );
 808adc6:	f7fe f962 	bl	808908e <mbedtls_x509_crt_free>
        mbedtls_free( session->peer_cert );
 808adca:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 808adcc:	f006 fbb6 	bl	809153c <free>
    }
#endif

#if defined(MBEDTLS_SSL_SESSION_TICKETS) && defined(MBEDTLS_SSL_CLI_C)
    mbedtls_free( session->ticket );
 808add0:	6e60      	ldr	r0, [r4, #100]	; 0x64
 808add2:	f006 fbb3 	bl	809153c <free>
#endif

    mbedtls_zeroize( session, sizeof( mbedtls_ssl_session ) );
 808add6:	4620      	mov	r0, r4
}
 808add8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if defined(MBEDTLS_SSL_SESSION_TICKETS) && defined(MBEDTLS_SSL_CLI_C)
    mbedtls_free( session->ticket );
#endif

    mbedtls_zeroize( session, sizeof( mbedtls_ssl_session ) );
 808addc:	2174      	movs	r1, #116	; 0x74
 808adde:	f7fe bd61 	b.w	80898a4 <_ZL15mbedtls_zeroizePvj>
 808ade2:	bd10      	pop	{r4, pc}

0808ade4 <mbedtls_ssl_handshake_wrapup>:

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
}

void mbedtls_ssl_handshake_wrapup( mbedtls_ssl_context *ssl )
{
 808ade4:	b538      	push	{r3, r4, r5, lr}
 808ade6:	4604      	mov	r4, r0
    int resume = ssl->handshake->resume;
 808ade8:	6b03      	ldr	r3, [r0, #48]	; 0x30
#endif

    /*
     * Free the previous session and switch in the current one
     */
    if( ssl->session )
 808adea:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
}

void mbedtls_ssl_handshake_wrapup( mbedtls_ssl_context *ssl )
{
    int resume = ssl->handshake->resume;
 808adec:	f8d3 51e4 	ldr.w	r5, [r3, #484]	; 0x1e4
#endif

    /*
     * Free the previous session and switch in the current one
     */
    if( ssl->session )
 808adf0:	b120      	cbz	r0, 808adfc <mbedtls_ssl_handshake_wrapup+0x18>
        /* RFC 7366 3.1: keep the EtM state */
        ssl->session_negotiate->encrypt_then_mac =
                  ssl->session->encrypt_then_mac;
#endif

        mbedtls_ssl_session_free( ssl->session );
 808adf2:	f7ff ffe3 	bl	808adbc <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
 808adf6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 808adf8:	f006 fba0 	bl	809153c <free>
    }
    ssl->session = ssl->session_negotiate;
 808adfc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    ssl->session_negotiate = NULL;
 808adfe:	2300      	movs	r3, #0

    /*
     * Add cache entry
     */
    if( ssl->conf->f_set_cache != NULL &&
 808ae00:	6822      	ldr	r2, [r4, #0]
#endif

        mbedtls_ssl_session_free( ssl->session );
        mbedtls_free( ssl->session );
    }
    ssl->session = ssl->session_negotiate;
 808ae02:	62a1      	str	r1, [r4, #40]	; 0x28
    ssl->session_negotiate = NULL;
 808ae04:	62e3      	str	r3, [r4, #44]	; 0x2c

    /*
     * Add cache entry
     */
    if( ssl->conf->f_set_cache != NULL &&
 808ae06:	6a53      	ldr	r3, [r2, #36]	; 0x24
 808ae08:	b123      	cbz	r3, 808ae14 <mbedtls_ssl_handshake_wrapup+0x30>
 808ae0a:	6888      	ldr	r0, [r1, #8]
 808ae0c:	b110      	cbz	r0, 808ae14 <mbedtls_ssl_handshake_wrapup+0x30>
        ssl->session->id_len != 0 &&
 808ae0e:	b90d      	cbnz	r5, 808ae14 <mbedtls_ssl_handshake_wrapup+0x30>
        resume == 0 )
    {
        if( ssl->conf->f_set_cache( ssl->conf->p_cache, ssl->session ) != 0 )
 808ae10:	6a90      	ldr	r0, [r2, #40]	; 0x28
 808ae12:	4798      	blx	r3
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup: final free" ) );

    /*
     * Free our handshake params
     */
    mbedtls_ssl_handshake_free( ssl->handshake );
 808ae14:	6b20      	ldr	r0, [r4, #48]	; 0x30
 808ae16:	f7ff ffb8 	bl	808ad8a <mbedtls_ssl_handshake_free>
    mbedtls_free( ssl->handshake );
 808ae1a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 808ae1c:	f006 fb8e 	bl	809153c <free>
    ssl->handshake = NULL;

    /*
     * Free the previous transform and swith in the current one
     */
    if( ssl->transform )
 808ae20:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    /*
     * Free our handshake params
     */
    mbedtls_ssl_handshake_free( ssl->handshake );
    mbedtls_free( ssl->handshake );
    ssl->handshake = NULL;
 808ae22:	2300      	movs	r3, #0
 808ae24:	6323      	str	r3, [r4, #48]	; 0x30

    /*
     * Free the previous transform and swith in the current one
     */
    if( ssl->transform )
 808ae26:	b120      	cbz	r0, 808ae32 <mbedtls_ssl_handshake_wrapup+0x4e>
    {
        mbedtls_ssl_transform_free( ssl->transform );
 808ae28:	f7ff ff96 	bl	808ad58 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 808ae2c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 808ae2e:	f006 fb85 	bl	809153c <free>
    }
    ssl->transform = ssl->transform_negotiate;
 808ae32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808ae34:	63e3      	str	r3, [r4, #60]	; 0x3c
    ssl->transform_negotiate = NULL;
 808ae36:	2300      	movs	r3, #0
 808ae38:	6423      	str	r3, [r4, #64]	; 0x40
    }
    else
#endif
        ssl_handshake_wrapup_free_hs_transform( ssl );

    ssl->state++;
 808ae3a:	6863      	ldr	r3, [r4, #4]
 808ae3c:	3301      	adds	r3, #1
 808ae3e:	6063      	str	r3, [r4, #4]
 808ae40:	bd38      	pop	{r3, r4, r5, pc}
	...

0808ae44 <_ZL18ssl_handshake_initP19mbedtls_ssl_context>:
{
    memset( session, 0, sizeof(mbedtls_ssl_session) );
}

static int ssl_handshake_init( mbedtls_ssl_context *ssl )
{
 808ae44:	b538      	push	{r3, r4, r5, lr}
 808ae46:	4604      	mov	r4, r0
    /* Clear old handshake information if present */
    if( ssl->transform_negotiate )
 808ae48:	6c00      	ldr	r0, [r0, #64]	; 0x40
 808ae4a:	b108      	cbz	r0, 808ae50 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xc>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
 808ae4c:	f7ff ff84 	bl	808ad58 <mbedtls_ssl_transform_free>
    if( ssl->session_negotiate )
 808ae50:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 808ae52:	b108      	cbz	r0, 808ae58 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x14>
        mbedtls_ssl_session_free( ssl->session_negotiate );
 808ae54:	f7ff ffb2 	bl	808adbc <mbedtls_ssl_session_free>
    if( ssl->handshake )
 808ae58:	6b20      	ldr	r0, [r4, #48]	; 0x30
 808ae5a:	b108      	cbz	r0, 808ae60 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x1c>
        mbedtls_ssl_handshake_free( ssl->handshake );
 808ae5c:	f7ff ff95 	bl	808ad8a <mbedtls_ssl_handshake_free>

    /*
     * Either the pointers are now NULL or cleared properly and can be freed.
     * Now allocate missing structures.
     */
    if( ssl->transform_negotiate == NULL )
 808ae60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808ae62:	b923      	cbnz	r3, 808ae6e <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x2a>
    {
        ssl->transform_negotiate = (mbedtls_ssl_transform *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_transform) );
 808ae64:	21d0      	movs	r1, #208	; 0xd0
 808ae66:	2001      	movs	r0, #1
 808ae68:	f008 fe64 	bl	8093b34 <calloc>
 808ae6c:	6420      	str	r0, [r4, #64]	; 0x40
    }

    if( ssl->session_negotiate == NULL )
 808ae6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 808ae70:	b923      	cbnz	r3, 808ae7c <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x38>
    {
        ssl->session_negotiate = (mbedtls_ssl_session *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_session) );
 808ae72:	2174      	movs	r1, #116	; 0x74
 808ae74:	2001      	movs	r0, #1
 808ae76:	f008 fe5d 	bl	8093b34 <calloc>
 808ae7a:	62e0      	str	r0, [r4, #44]	; 0x2c
    }

    if( ssl->handshake == NULL )
 808ae7c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808ae7e:	b92b      	cbnz	r3, 808ae8c <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x48>
    {
        ssl->handshake = (mbedtls_ssl_handshake_params *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
 808ae80:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 808ae84:	2001      	movs	r0, #1
 808ae86:	f008 fe55 	bl	8093b34 <calloc>
 808ae8a:	6320      	str	r0, [r4, #48]	; 0x30
    }

    /* All pointers should exist and can be directly freed without issue */
    if( ssl->handshake == NULL ||
 808ae8c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 808ae8e:	b118      	cbz	r0, 808ae98 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x54>
 808ae90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808ae92:	b10b      	cbz	r3, 808ae98 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x54>
        ssl->transform_negotiate == NULL ||
        ssl->session_negotiate == NULL )
 808ae94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        ssl->handshake = (mbedtls_ssl_handshake_params *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
    }

    /* All pointers should exist and can be directly freed without issue */
    if( ssl->handshake == NULL ||
        ssl->transform_negotiate == NULL ||
 808ae96:	b96b      	cbnz	r3, 808aeb4 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x70>
        ssl->session_negotiate == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc() of ssl sub-contexts failed" ) );

        mbedtls_free( ssl->handshake );
 808ae98:	f006 fb50 	bl	809153c <free>
        mbedtls_free( ssl->transform_negotiate );
 808ae9c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 808ae9e:	f006 fb4d 	bl	809153c <free>
        mbedtls_free( ssl->session_negotiate );
 808aea2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 808aea4:	f006 fb4a 	bl	809153c <free>

        ssl->handshake = NULL;
 808aea8:	2300      	movs	r3, #0
 808aeaa:	6323      	str	r3, [r4, #48]	; 0x30
        ssl->transform_negotiate = NULL;
 808aeac:	6423      	str	r3, [r4, #64]	; 0x40
        ssl->session_negotiate = NULL;
 808aeae:	62e3      	str	r3, [r4, #44]	; 0x2c

        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 808aeb0:	481e      	ldr	r0, [pc, #120]	; (808af2c <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xe8>)
 808aeb2:	bd38      	pop	{r3, r4, r5, pc}
    }

    /* Initialize structures */
    mbedtls_ssl_session_init( ssl->session_negotiate );
 808aeb4:	4618      	mov	r0, r3
 808aeb6:	f7ff fde9 	bl	808aa8c <mbedtls_ssl_session_init>
    ssl_transform_init( ssl->transform_negotiate );
 808aeba:	6c25      	ldr	r5, [r4, #64]	; 0x40
#endif
}

static void ssl_transform_init( mbedtls_ssl_transform *transform )
{
    memset( transform, 0, sizeof(mbedtls_ssl_transform) );
 808aebc:	22d0      	movs	r2, #208	; 0xd0
 808aebe:	2100      	movs	r1, #0
 808aec0:	4628      	mov	r0, r5
 808aec2:	f008 fe82 	bl	8093bca <memset>

    mbedtls_cipher_init( &transform->cipher_ctx_enc );
 808aec6:	f105 0050 	add.w	r0, r5, #80	; 0x50
 808aeca:	f7f8 fb39 	bl	8083540 <mbedtls_cipher_init>
    mbedtls_cipher_init( &transform->cipher_ctx_dec );
 808aece:	f105 0090 	add.w	r0, r5, #144	; 0x90
 808aed2:	f7f8 fb35 	bl	8083540 <mbedtls_cipher_init>

    mbedtls_md_init( &transform->md_ctx_enc );
 808aed6:	f105 0038 	add.w	r0, r5, #56	; 0x38
 808aeda:	f7fc ffad 	bl	8087e38 <mbedtls_md_init>
    mbedtls_md_init( &transform->md_ctx_dec );
 808aede:	f105 0044 	add.w	r0, r5, #68	; 0x44
 808aee2:	f7fc ffa9 	bl	8087e38 <mbedtls_md_init>
    }

    /* Initialize structures */
    mbedtls_ssl_session_init( ssl->session_negotiate );
    ssl_transform_init( ssl->transform_negotiate );
    ssl_handshake_params_init( ssl->handshake );
 808aee6:	6b24      	ldr	r4, [r4, #48]	; 0x30
    return( 0 );
}

static void ssl_handshake_params_init( mbedtls_ssl_handshake_params *handshake )
{
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
 808aee8:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
     mbedtls_md5_starts_ret( &handshake->fin_md5  );
    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_init(   &handshake->fin_sha256    );
 808aeec:	f104 0518 	add.w	r5, r4, #24
    return( 0 );
}

static void ssl_handshake_params_init( mbedtls_ssl_handshake_params *handshake )
{
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
 808aef0:	2100      	movs	r1, #0
 808aef2:	4620      	mov	r0, r4
 808aef4:	f008 fe69 	bl	8093bca <memset>
     mbedtls_md5_starts_ret( &handshake->fin_md5  );
    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_init(   &handshake->fin_sha256    );
 808aef8:	4628      	mov	r0, r5
 808aefa:	f7f7 fbfb 	bl	80826f4 <mbedtls_sha256_init>
    mbedtls_sha256_starts_ret( &handshake->fin_sha256, 0 );
 808aefe:	2100      	movs	r1, #0
 808af00:	4628      	mov	r0, r5
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_init(   &handshake->fin_sha512    );
 808af02:	f104 0588 	add.w	r5, r4, #136	; 0x88
    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_init(   &handshake->fin_sha256    );
    mbedtls_sha256_starts_ret( &handshake->fin_sha256, 0 );
 808af06:	f7f7 fc09 	bl	808271c <mbedtls_sha256_starts_ret>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_init(   &handshake->fin_sha512    );
 808af0a:	4628      	mov	r0, r5
 808af0c:	f003 f800 	bl	808df10 <mbedtls_sha512_init>
    mbedtls_sha512_starts_ret( &handshake->fin_sha512, 1 );
 808af10:	2101      	movs	r1, #1
 808af12:	4628      	mov	r0, r5
 808af14:	f003 f810 	bl	808df38 <mbedtls_sha512_starts_ret>
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

    handshake->update_checksum = ssl_update_checksum_start;
 808af18:	4b05      	ldr	r3, [pc, #20]	; (808af30 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xec>)

/* Allow exactly one hash algorithm for each signature. */
void mbedtls_ssl_sig_hash_set_const_hash( mbedtls_ssl_sig_hash_set_t *set,
                                          mbedtls_md_type_t md_alg )
{
    set->rsa   = md_alg;
 808af1a:	2000      	movs	r0, #0
    mbedtls_sha512_init(   &handshake->fin_sha512    );
    mbedtls_sha512_starts_ret( &handshake->fin_sha512, 1 );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

    handshake->update_checksum = ssl_update_checksum_start;
 808af1c:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
    handshake->ecjpake_cache_len = 0;
#endif
#endif

#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    handshake->sni_authmode = MBEDTLS_SSL_VERIFY_UNSET;
 808af20:	2303      	movs	r3, #3

/* Allow exactly one hash algorithm for each signature. */
void mbedtls_ssl_sig_hash_set_const_hash( mbedtls_ssl_sig_hash_set_t *set,
                                          mbedtls_md_type_t md_alg )
{
    set->rsa   = md_alg;
 808af22:	7020      	strb	r0, [r4, #0]
    set->ecdsa = md_alg;
 808af24:	7060      	strb	r0, [r4, #1]
    handshake->ecjpake_cache_len = 0;
#endif
#endif

#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    handshake->sni_authmode = MBEDTLS_SSL_VERIFY_UNSET;
 808af26:	60a3      	str	r3, [r4, #8]
        ssl_set_timer( ssl, 0 );
    }
#endif

    return( 0 );
}
 808af28:	bd38      	pop	{r3, r4, r5, pc}
 808af2a:	bf00      	nop
 808af2c:	ffff8100 	.word	0xffff8100
 808af30:	08089ba1 	.word	0x08089ba1

0808af34 <mbedtls_ssl_setup>:
/*
 * Setup an SSL context
 */
int mbedtls_ssl_setup( mbedtls_ssl_context *ssl,
                       const mbedtls_ssl_config *conf )
{
 808af34:	b538      	push	{r3, r4, r5, lr}
    int ret;
    const size_t len = MBEDTLS_SSL_BUFFER_LEN;

    ssl->conf = conf;
 808af36:	6001      	str	r1, [r0, #0]
/*
 * Setup an SSL context
 */
int mbedtls_ssl_setup( mbedtls_ssl_context *ssl,
                       const mbedtls_ssl_config *conf )
{
 808af38:	4604      	mov	r4, r0
    ssl->conf = conf;

    /*
     * Prepare base structures
     */
    if( ( ssl-> in_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL ||
 808af3a:	f242 114d 	movw	r1, #8525	; 0x214d
 808af3e:	2001      	movs	r0, #1
 808af40:	f008 fdf8 	bl	8093b34 <calloc>
 808af44:	4605      	mov	r5, r0
 808af46:	6520      	str	r0, [r4, #80]	; 0x50
 808af48:	b328      	cbz	r0, 808af96 <mbedtls_ssl_setup+0x62>
        ( ssl->out_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
 808af4a:	f242 114d 	movw	r1, #8525	; 0x214d
 808af4e:	2001      	movs	r0, #1
 808af50:	f008 fdf0 	bl	8093b34 <calloc>
    ssl->conf = conf;

    /*
     * Prepare base structures
     */
    if( ( ssl-> in_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL ||
 808af54:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 808af58:	b1e8      	cbz	r0, 808af96 <mbedtls_ssl_setup+0x62>
    }
    else
#endif
    {
        ssl->out_ctr = ssl->out_buf;
        ssl->out_hdr = ssl->out_buf +  8;
 808af5a:	f100 0308 	add.w	r3, r0, #8
 808af5e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        ssl->out_len = ssl->out_buf + 11;
 808af62:	f100 030b 	add.w	r3, r0, #11
 808af66:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        ssl->out_iv  = ssl->out_buf + 13;
        ssl->out_msg = ssl->out_buf + 13;

        ssl->in_ctr = ssl->in_buf;
        ssl->in_hdr = ssl->in_buf +  8;
 808af6a:	f105 0308 	add.w	r3, r5, #8
        ssl->in_msg = ssl->in_buf + 13;
    }
    else
#endif
    {
        ssl->out_ctr = ssl->out_buf;
 808af6e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        ssl->out_hdr = ssl->out_buf +  8;
        ssl->out_len = ssl->out_buf + 11;
        ssl->out_iv  = ssl->out_buf + 13;
        ssl->out_msg = ssl->out_buf + 13;

        ssl->in_ctr = ssl->in_buf;
 808af72:	6565      	str	r5, [r4, #84]	; 0x54
#endif
    {
        ssl->out_ctr = ssl->out_buf;
        ssl->out_hdr = ssl->out_buf +  8;
        ssl->out_len = ssl->out_buf + 11;
        ssl->out_iv  = ssl->out_buf + 13;
 808af74:	300d      	adds	r0, #13
        ssl->out_msg = ssl->out_buf + 13;

        ssl->in_ctr = ssl->in_buf;
        ssl->in_hdr = ssl->in_buf +  8;
 808af76:	65a3      	str	r3, [r4, #88]	; 0x58
        ssl->in_len = ssl->in_buf + 11;
 808af78:	f105 030b 	add.w	r3, r5, #11
        ssl->in_iv  = ssl->in_buf + 13;
 808af7c:	350d      	adds	r5, #13
#endif
    {
        ssl->out_ctr = ssl->out_buf;
        ssl->out_hdr = ssl->out_buf +  8;
        ssl->out_len = ssl->out_buf + 11;
        ssl->out_iv  = ssl->out_buf + 13;
 808af7e:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
        ssl->out_msg = ssl->out_buf + 13;
 808af82:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98

        ssl->in_ctr = ssl->in_buf;
        ssl->in_hdr = ssl->in_buf +  8;
        ssl->in_len = ssl->in_buf + 11;
 808af86:	65e3      	str	r3, [r4, #92]	; 0x5c
        ssl->in_iv  = ssl->in_buf + 13;
 808af88:	6625      	str	r5, [r4, #96]	; 0x60
        ssl->in_msg = ssl->in_buf + 13;
 808af8a:	6665      	str	r5, [r4, #100]	; 0x64
    }

    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 808af8c:	4620      	mov	r0, r4
        return( ret );

    return( 0 );
}
 808af8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ssl->in_len = ssl->in_buf + 11;
        ssl->in_iv  = ssl->in_buf + 13;
        ssl->in_msg = ssl->in_buf + 13;
    }

    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 808af92:	f7ff bf57 	b.w	808ae44 <_ZL18ssl_handshake_initP19mbedtls_ssl_context>
     */
    if( ( ssl-> in_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL ||
        ( ssl->out_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed", len ) );
        mbedtls_free( ssl->in_buf );
 808af96:	4628      	mov	r0, r5
 808af98:	f006 fad0 	bl	809153c <free>
        ssl->in_buf = NULL;
 808af9c:	2300      	movs	r3, #0
 808af9e:	6523      	str	r3, [r4, #80]	; 0x50

    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
        return( ret );

    return( 0 );
}
 808afa0:	4800      	ldr	r0, [pc, #0]	; (808afa4 <mbedtls_ssl_setup+0x70>)
 808afa2:	bd38      	pop	{r3, r4, r5, pc}
 808afa4:	ffff8100 	.word	0xffff8100

0808afa8 <mbedtls_ssl_free>:

/*
 * Free an SSL context
 */
void mbedtls_ssl_free( mbedtls_ssl_context *ssl )
{
 808afa8:	b538      	push	{r3, r4, r5, lr}
    if( ssl == NULL )
 808afaa:	4604      	mov	r4, r0
 808afac:	2800      	cmp	r0, #0
 808afae:	d048      	beq.n	808b042 <mbedtls_ssl_free+0x9a>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> free" ) );

    if( ssl->out_buf != NULL )
 808afb0:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 808afb4:	b138      	cbz	r0, 808afc6 <mbedtls_ssl_free+0x1e>
    {
        mbedtls_zeroize( ssl->out_buf, MBEDTLS_SSL_BUFFER_LEN );
 808afb6:	f242 114d 	movw	r1, #8525	; 0x214d
 808afba:	f7fe fc73 	bl	80898a4 <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( ssl->out_buf );
 808afbe:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 808afc2:	f006 fabb 	bl	809153c <free>
    }

    if( ssl->in_buf != NULL )
 808afc6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 808afc8:	b130      	cbz	r0, 808afd8 <mbedtls_ssl_free+0x30>
    {
        mbedtls_zeroize( ssl->in_buf, MBEDTLS_SSL_BUFFER_LEN );
 808afca:	f242 114d 	movw	r1, #8525	; 0x214d
 808afce:	f7fe fc69 	bl	80898a4 <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( ssl->in_buf );
 808afd2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 808afd4:	f006 fab2 	bl	809153c <free>
        mbedtls_zeroize( ssl->compress_buf, MBEDTLS_SSL_BUFFER_LEN );
        mbedtls_free( ssl->compress_buf );
    }
#endif

    if( ssl->transform )
 808afd8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 808afda:	b120      	cbz	r0, 808afe6 <mbedtls_ssl_free+0x3e>
    {
        mbedtls_ssl_transform_free( ssl->transform );
 808afdc:	f7ff febc 	bl	808ad58 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 808afe0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 808afe2:	f006 faab 	bl	809153c <free>
    }

    if( ssl->handshake )
 808afe6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 808afe8:	b180      	cbz	r0, 808b00c <mbedtls_ssl_free+0x64>
    {
        mbedtls_ssl_handshake_free( ssl->handshake );
 808afea:	f7ff fece 	bl	808ad8a <mbedtls_ssl_handshake_free>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
 808afee:	6c20      	ldr	r0, [r4, #64]	; 0x40
 808aff0:	f7ff feb2 	bl	808ad58 <mbedtls_ssl_transform_free>
        mbedtls_ssl_session_free( ssl->session_negotiate );
 808aff4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 808aff6:	f7ff fee1 	bl	808adbc <mbedtls_ssl_session_free>

        mbedtls_free( ssl->handshake );
 808affa:	6b20      	ldr	r0, [r4, #48]	; 0x30
 808affc:	f006 fa9e 	bl	809153c <free>
        mbedtls_free( ssl->transform_negotiate );
 808b000:	6c20      	ldr	r0, [r4, #64]	; 0x40
 808b002:	f006 fa9b 	bl	809153c <free>
        mbedtls_free( ssl->session_negotiate );
 808b006:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 808b008:	f006 fa98 	bl	809153c <free>
    }

    if( ssl->session )
 808b00c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 808b00e:	b120      	cbz	r0, 808b01a <mbedtls_ssl_free+0x72>
    {
        mbedtls_ssl_session_free( ssl->session );
 808b010:	f7ff fed4 	bl	808adbc <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
 808b014:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 808b016:	f006 fa91 	bl	809153c <free>
    }

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    if( ssl->hostname != NULL )
 808b01a:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 808b01e:	b155      	cbz	r5, 808b036 <mbedtls_ssl_free+0x8e>
    {
        mbedtls_zeroize( ssl->hostname, strlen( ssl->hostname ) );
 808b020:	4628      	mov	r0, r5
 808b022:	f008 fdf2 	bl	8093c0a <strlen>
 808b026:	4601      	mov	r1, r0
 808b028:	4628      	mov	r0, r5
 808b02a:	f7fe fc3b 	bl	80898a4 <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( ssl->hostname );
 808b02e:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 808b032:	f006 fa83 	bl	809153c <free>
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= free" ) );

    /* Actually clear after last debug message */
    mbedtls_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
 808b036:	4620      	mov	r0, r4
}
 808b038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= free" ) );

    /* Actually clear after last debug message */
    mbedtls_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
 808b03c:	21b4      	movs	r1, #180	; 0xb4
 808b03e:	f7fe bc31 	b.w	80898a4 <_ZL15mbedtls_zeroizePvj>
 808b042:	bd38      	pop	{r3, r4, r5, pc}

0808b044 <mbedtls_ssl_config_init>:
/*
 * Initialze mbedtls_ssl_config
 */
void mbedtls_ssl_config_init( mbedtls_ssl_config *conf )
{
    memset( conf, 0, sizeof( mbedtls_ssl_config ) );
 808b044:	2264      	movs	r2, #100	; 0x64
 808b046:	2100      	movs	r1, #0
 808b048:	f008 bdbf 	b.w	8093bca <memset>

0808b04c <mbedtls_ssl_config_defaults>:
/*
 * Load default in mbedtls_ssl_config
 */
int mbedtls_ssl_config_defaults( mbedtls_ssl_config *conf,
                                 int endpoint, int transport, int preset )
{
 808b04c:	b510      	push	{r4, lr}
 808b04e:	4604      	mov	r4, r0
/*
 * SSL set accessors
 */
void mbedtls_ssl_conf_endpoint( mbedtls_ssl_config *conf, int endpoint )
{
    conf->endpoint   = endpoint;
 808b050:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
 808b054:	f361 0000 	bfi	r0, r1, #0, #1
}

void mbedtls_ssl_conf_transport( mbedtls_ssl_config *conf, int transport )
{
    conf->transport = transport;
 808b058:	f362 0041 	bfi	r0, r2, #1, #1
 808b05c:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60

    /*
     * Things that are common to all presets
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( endpoint == MBEDTLS_SSL_IS_CLIENT )
 808b060:	b951      	cbnz	r1, 808b078 <mbedtls_ssl_config_defaults+0x2c>
    {
        conf->authmode = MBEDTLS_SSL_VERIFY_REQUIRED;
 808b062:	2102      	movs	r1, #2
 808b064:	b2c2      	uxtb	r2, r0
 808b066:	f361 0283 	bfi	r2, r1, #2, #2
 808b06a:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
        conf->session_tickets = MBEDTLS_SSL_SESSION_TICKETS_ENABLED;
 808b06e:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 808b072:	430a      	orrs	r2, r1
 808b074:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
#endif

    /*
     * Preset-specific defaults
     */
    switch( preset )
 808b078:	2b02      	cmp	r3, #2
 808b07a:	f04f 0303 	mov.w	r3, #3
    {
        /*
         * NSA Suite B
         */
        case MBEDTLS_SSL_PRESET_SUITEB:
            conf->min_major_ver = MBEDTLS_SSL_MAJOR_VERSION_3;
 808b07e:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
            conf->min_minor_ver = MBEDTLS_SSL_MINOR_VERSION_3; /* TLS 1.2 */
 808b082:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
 808b086:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
            conf->max_minor_ver = MBEDTLS_SSL_MAX_MINOR_VERSION;
 808b08a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
#endif

    /*
     * Preset-specific defaults
     */
    switch( preset )
 808b08e:	d108      	bne.n	808b0a2 <mbedtls_ssl_config_defaults+0x56>

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   ssl_preset_suiteb_ciphersuites;
 808b090:	4b0a      	ldr	r3, [pc, #40]	; (808b0bc <mbedtls_ssl_config_defaults+0x70>)
 808b092:	60e3      	str	r3, [r4, #12]
 808b094:	60a3      	str	r3, [r4, #8]
 808b096:	6063      	str	r3, [r4, #4]
 808b098:	6023      	str	r3, [r4, #0]

#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_suiteb;
 808b09a:	4b09      	ldr	r3, [pc, #36]	; (808b0c0 <mbedtls_ssl_config_defaults+0x74>)
 808b09c:	6463      	str	r3, [r4, #68]	; 0x44
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_suiteb_hashes;
 808b09e:	4b09      	ldr	r3, [pc, #36]	; (808b0c4 <mbedtls_ssl_config_defaults+0x78>)
 808b0a0:	e008      	b.n	808b0b4 <mbedtls_ssl_config_defaults+0x68>

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   mbedtls_ssl_list_ciphersuites();
 808b0a2:	f7fb fc33 	bl	808690c <mbedtls_ssl_list_ciphersuites>

#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
 808b0a6:	4b08      	ldr	r3, [pc, #32]	; (808b0c8 <mbedtls_ssl_config_defaults+0x7c>)

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   mbedtls_ssl_list_ciphersuites();
 808b0a8:	60e0      	str	r0, [r4, #12]

#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
 808b0aa:	6463      	str	r3, [r4, #68]	; 0x44
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_default_hashes;
 808b0ac:	4b07      	ldr	r3, [pc, #28]	; (808b0cc <mbedtls_ssl_config_defaults+0x80>)

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   mbedtls_ssl_list_ciphersuites();
 808b0ae:	60a0      	str	r0, [r4, #8]
 808b0b0:	6060      	str	r0, [r4, #4]
 808b0b2:	6020      	str	r0, [r4, #0]
#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_default_hashes;
 808b0b4:	6563      	str	r3, [r4, #84]	; 0x54
            conf->dhm_min_bitlen = 1024;
#endif
    }

    return( 0 );
}
 808b0b6:	2000      	movs	r0, #0
 808b0b8:	bd10      	pop	{r4, pc}
 808b0ba:	bf00      	nop
 808b0bc:	20000400 	.word	0x20000400
 808b0c0:	08095dcc 	.word	0x08095dcc
 808b0c4:	20000424 	.word	0x20000424
 808b0c8:	080956bc 	.word	0x080956bc
 808b0cc:	2000040c 	.word	0x2000040c

0808b0d0 <mbedtls_ssl_config_free>:

/*
 * Free mbedtls_ssl_config
 */
void mbedtls_ssl_config_free( mbedtls_ssl_config *conf )
{
 808b0d0:	b538      	push	{r3, r4, r5, lr}
 808b0d2:	4604      	mov	r4, r0
        conf->psk_identity_len = 0;
    }
#endif

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
 808b0d4:	6c80      	ldr	r0, [r0, #72]	; 0x48
#if defined(MBEDTLS_X509_CRT_PARSE_C)
static void ssl_key_cert_free( mbedtls_ssl_key_cert *key_cert )
{
    mbedtls_ssl_key_cert *cur = key_cert, *next;

    while( cur != NULL )
 808b0d6:	b120      	cbz	r0, 808b0e2 <mbedtls_ssl_config_free+0x12>
    {
        next = cur->next;
 808b0d8:	6885      	ldr	r5, [r0, #8]
        mbedtls_free( cur );
 808b0da:	f006 fa2f 	bl	809153c <free>
        cur = next;
 808b0de:	4628      	mov	r0, r5
 808b0e0:	e7f9      	b.n	808b0d6 <mbedtls_ssl_config_free+0x6>

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
#endif

    mbedtls_zeroize( conf, sizeof( mbedtls_ssl_config ) );
 808b0e2:	4620      	mov	r0, r4
}
 808b0e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
#endif

    mbedtls_zeroize( conf, sizeof( mbedtls_ssl_config ) );
 808b0e8:	2164      	movs	r1, #100	; 0x64
 808b0ea:	f7fe bbdb 	b.w	80898a4 <_ZL15mbedtls_zeroizePvj>

0808b0ee <mbedtls_ssl_sig_from_pk>:
    ( defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C) )
/*
 * Convert between MBEDTLS_PK_XXX and SSL_SIG_XXX
 */
unsigned char mbedtls_ssl_sig_from_pk( mbedtls_pk_context *pk )
{
 808b0ee:	b508      	push	{r3, lr}
#if defined(MBEDTLS_RSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
 808b0f0:	2101      	movs	r1, #1
 808b0f2:	f001 fdc9 	bl	808cc88 <mbedtls_pk_can_do>
#if defined(MBEDTLS_ECDSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECDSA ) )
        return( MBEDTLS_SSL_SIG_ECDSA );
#endif
    return( MBEDTLS_SSL_SIG_ANON );
}
 808b0f6:	3000      	adds	r0, #0
 808b0f8:	bf18      	it	ne
 808b0fa:	2001      	movne	r0, #1
 808b0fc:	bd08      	pop	{r3, pc}
	...

0808b100 <mbedtls_ssl_hash_from_md_alg>:

/*
 * Convert from MBEDTLS_MD_XXX to MBEDTLS_SSL_HASH_XXX
 */
unsigned char mbedtls_ssl_hash_from_md_alg( int md )
{
 808b100:	3804      	subs	r0, #4
 808b102:	2804      	cmp	r0, #4
 808b104:	bf9a      	itte	ls
 808b106:	4b02      	ldrls	r3, [pc, #8]	; (808b110 <mbedtls_ssl_hash_from_md_alg+0x10>)
 808b108:	5c18      	ldrbls	r0, [r3, r0]
    switch( md )
 808b10a:	2000      	movhi	r0, #0
            return( MBEDTLS_SSL_HASH_SHA512 );
#endif
        default:
            return( MBEDTLS_SSL_HASH_NONE );
    }
}
 808b10c:	4770      	bx	lr
 808b10e:	bf00      	nop
 808b110:	08095ddc 	.word	0x08095ddc

0808b114 <mbedtls_ssl_check_cert_usage>:
    ((void) cert_endpoint);
    ((void) flags);
#endif

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
 808b114:	2a01      	cmp	r2, #1
#if defined(MBEDTLS_X509_CRT_PARSE_C)
int mbedtls_ssl_check_cert_usage( const mbedtls_x509_crt *cert,
                          const mbedtls_ssl_ciphersuite_t *ciphersuite,
                          int cert_endpoint,
                          uint32_t *flags )
{
 808b116:	b510      	push	{r4, lr}
 808b118:	461c      	mov	r4, r3
    ((void) cert_endpoint);
    ((void) flags);
#endif

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
 808b11a:	d10f      	bne.n	808b13c <mbedtls_ssl_check_cert_usage+0x28>
    {
        /* Server part of the key exchange */
        switch( ciphersuite->key_exchange )
 808b11c:	7a8b      	ldrb	r3, [r1, #10]
 808b11e:	2b0a      	cmp	r3, #10
 808b120:	d80e      	bhi.n	808b140 <mbedtls_ssl_check_cert_usage+0x2c>
 808b122:	409a      	lsls	r2, r3
 808b124:	f012 0f82 	tst.w	r2, #130	; 0x82
 808b128:	d10c      	bne.n	808b144 <mbedtls_ssl_check_cert_usage+0x30>
 808b12a:	f412 6fc0 	tst.w	r2, #1536	; 0x600
 808b12e:	d10b      	bne.n	808b148 <mbedtls_ssl_check_cert_usage+0x34>
 808b130:	f012 0f1c 	tst.w	r2, #28
                          int cert_endpoint,
                          uint32_t *flags )
{
    int ret = 0;
#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    int usage = 0;
 808b134:	bf14      	ite	ne
 808b136:	2180      	movne	r1, #128	; 0x80
 808b138:	2100      	moveq	r1, #0
 808b13a:	e006      	b.n	808b14a <mbedtls_ssl_check_cert_usage+0x36>
        }
    }
    else
    {
        /* Client auth: we only implement rsa_sign and mbedtls_ecdsa_sign for now */
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
 808b13c:	2180      	movs	r1, #128	; 0x80
 808b13e:	e004      	b.n	808b14a <mbedtls_ssl_check_cert_usage+0x36>
                          int cert_endpoint,
                          uint32_t *flags )
{
    int ret = 0;
#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    int usage = 0;
 808b140:	2100      	movs	r1, #0
 808b142:	e002      	b.n	808b14a <mbedtls_ssl_check_cert_usage+0x36>
        /* Server part of the key exchange */
        switch( ciphersuite->key_exchange )
        {
            case MBEDTLS_KEY_EXCHANGE_RSA:
            case MBEDTLS_KEY_EXCHANGE_RSA_PSK:
                usage = MBEDTLS_X509_KU_KEY_ENCIPHERMENT;
 808b144:	2120      	movs	r1, #32
 808b146:	e000      	b.n	808b14a <mbedtls_ssl_check_cert_usage+0x36>
                usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
                break;

            case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
            case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
                usage = MBEDTLS_X509_KU_KEY_AGREEMENT;
 808b148:	2108      	movs	r1, #8
    {
        /* Client auth: we only implement rsa_sign and mbedtls_ecdsa_sign for now */
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
    }

    if( mbedtls_x509_crt_check_key_usage( cert, usage ) != 0 )
 808b14a:	f7fd fbc5 	bl	80888d8 <mbedtls_x509_crt_check_key_usage>
 808b14e:	b128      	cbz	r0, 808b15c <mbedtls_ssl_check_cert_usage+0x48>
    {
        *flags |= MBEDTLS_X509_BADCERT_KEY_USAGE;
 808b150:	6822      	ldr	r2, [r4, #0]
        ret = -1;
 808b152:	f04f 30ff 	mov.w	r0, #4294967295
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
    }

    if( mbedtls_x509_crt_check_key_usage( cert, usage ) != 0 )
    {
        *flags |= MBEDTLS_X509_BADCERT_KEY_USAGE;
 808b156:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 808b15a:	6022      	str	r2, [r4, #0]
        ret = -1;
    }
#endif /* MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE */

    return( ret );
}
 808b15c:	bd10      	pop	{r4, pc}
	...

0808b160 <mbedtls_ssl_parse_certificate>:

    return( ret );
}

int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
 808b160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 808b164:	6c03      	ldr	r3, [r0, #64]	; 0x40

    return( ret );
}

int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
 808b166:	b085      	sub	sp, #20
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 808b168:	f8d3 8000 	ldr.w	r8, [r3]

    return( ret );
}

int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
 808b16c:	4605      	mov	r5, r0
    int authmode = ssl->conf->authmode;
    uint8_t alert;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 808b16e:	f898 200a 	ldrb.w	r2, [r8, #10]
 808b172:	2a0b      	cmp	r2, #11
 808b174:	d80b      	bhi.n	808b18e <mbedtls_ssl_parse_certificate+0x2e>
 808b176:	f44f 6316 	mov.w	r3, #2400	; 0x960
 808b17a:	40d3      	lsrs	r3, r2
 808b17c:	f003 0301 	and.w	r3, r3, #1
 808b180:	f083 0001 	eor.w	r0, r3, #1
 808b184:	b11b      	cbz	r3, 808b18e <mbedtls_ssl_parse_certificate+0x2e>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate" ) );
        ssl->state++;
 808b186:	686b      	ldr	r3, [r5, #4]
 808b188:	3301      	adds	r3, #1
 808b18a:	606b      	str	r3, [r5, #4]
        return( 0 );
 808b18c:	e0e0      	b.n	808b350 <mbedtls_ssl_parse_certificate+0x1f0>
int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
    int authmode = ssl->conf->authmode;
 808b18e:	682b      	ldr	r3, [r5, #0]
        ssl->state++;
        return( 0 );
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808b190:	4628      	mov	r0, r5
int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
    int authmode = ssl->conf->authmode;
 808b192:	f893 7060 	ldrb.w	r7, [r3, #96]	; 0x60
        ssl->state++;
        return( 0 );
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808b196:	f7ff fb01 	bl	808a79c <mbedtls_ssl_read_record>
int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
    int authmode = ssl->conf->authmode;
 808b19a:	f3c7 0781 	ubfx	r7, r7, #2, #2
        ssl->state++;
        return( 0 );
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808b19e:	4604      	mov	r4, r0
 808b1a0:	bb80      	cbnz	r0, 808b204 <mbedtls_ssl_parse_certificate+0xa4>
           let it decide whether to alert. */
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    ssl->state++;
 808b1a2:	686b      	ldr	r3, [r5, #4]
 808b1a4:	3301      	adds	r3, #1
 808b1a6:	606b      	str	r3, [r5, #4]
    }
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \
          MBEDTLS_SSL_PROTO_TLS1_2 */
#endif /* MBEDTLS_SSL_SRV_C */

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 808b1a8:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 808b1aa:	2b16      	cmp	r3, #22
 808b1ac:	d006      	beq.n	808b1bc <mbedtls_ssl_parse_certificate+0x5c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 808b1ae:	220a      	movs	r2, #10
 808b1b0:	2102      	movs	r1, #2
 808b1b2:	4628      	mov	r0, r5
 808b1b4:	f7ff f8a4 	bl	808a300 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 808b1b8:	4867      	ldr	r0, [pc, #412]	; (808b358 <mbedtls_ssl_parse_certificate+0x1f8>)
 808b1ba:	e0c9      	b.n	808b350 <mbedtls_ssl_parse_certificate+0x1f0>
    }

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 808b1bc:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 808b1be:	7813      	ldrb	r3, [r2, #0]
 808b1c0:	2b0b      	cmp	r3, #11
 808b1c2:	d10b      	bne.n	808b1dc <mbedtls_ssl_parse_certificate+0x7c>
        ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 3 + 3 )
 808b1c4:	6fa9      	ldr	r1, [r5, #120]	; 0x78
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 808b1c6:	2909      	cmp	r1, #9
 808b1c8:	d908      	bls.n	808b1dc <mbedtls_ssl_parse_certificate+0x7c>
    /*
     * Same message structure as in mbedtls_ssl_write_certificate()
     */
    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];

    if( ssl->in_msg[i] != 0 ||
 808b1ca:	7913      	ldrb	r3, [r2, #4]
 808b1cc:	b933      	cbnz	r3, 808b1dc <mbedtls_ssl_parse_certificate+0x7c>
 808b1ce:	7950      	ldrb	r0, [r2, #5]
 808b1d0:	7993      	ldrb	r3, [r2, #6]
 808b1d2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 808b1d6:	3307      	adds	r3, #7
 808b1d8:	4299      	cmp	r1, r3
 808b1da:	d015      	beq.n	808b208 <mbedtls_ssl_parse_certificate+0xa8>
    while( i < ssl->in_hslen )
    {
        if ( i + 3 > ssl->in_hslen ) {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                           MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 808b1dc:	2232      	movs	r2, #50	; 0x32
 808b1de:	2102      	movs	r1, #2
 808b1e0:	4628      	mov	r0, r5
 808b1e2:	f7ff f88d 	bl	808a300 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
 808b1e6:	485d      	ldr	r0, [pc, #372]	; (808b35c <mbedtls_ssl_parse_certificate+0x1fc>)
 808b1e8:	e0b2      	b.n	808b350 <mbedtls_ssl_parse_certificate+0x1f0>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
 808b1ea:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
                                  ssl->in_msg + i, n );
        switch( ret )
 808b1ec:	f8df 9178 	ldr.w	r9, [pc, #376]	; 808b368 <mbedtls_ssl_parse_certificate+0x208>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
 808b1f0:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 808b1f2:	f7fd ff47 	bl	8089084 <mbedtls_x509_crt_init>

    i += 3;
 808b1f6:	2607      	movs	r6, #7

    while( i < ssl->in_hslen )
 808b1f8:	f8d5 e078 	ldr.w	lr, [r5, #120]	; 0x78
 808b1fc:	4576      	cmp	r6, lr
 808b1fe:	d31c      	bcc.n	808b23a <mbedtls_ssl_parse_certificate+0xda>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }
    }
#endif /* MBEDTLS_SSL_RENEGOTIATION && MBEDTLS_SSL_CLI_C */

    if( authmode != MBEDTLS_SSL_VERIFY_NONE )
 808b200:	2f00      	cmp	r7, #0
 808b202:	d13f      	bne.n	808b284 <mbedtls_ssl_parse_certificate+0x124>
         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
         * with details encoded in the verification flags. All other kinds
         * of error codes, including those from the user provided f_vrfy
         * functions, are treated as fatal and lead to a failure of
         * ssl_parse_certificate even if verification was optional. */
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 808b204:	4620      	mov	r0, r4
 808b206:	e0a3      	b.n	808b350 <mbedtls_ssl_parse_certificate+0x1f0>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
    }

    /* In case we tried to reuse a session but it failed */
    if( ssl->session_negotiate->peer_cert != NULL )
 808b208:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 808b20a:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 808b20c:	b128      	cbz	r0, 808b21a <mbedtls_ssl_parse_certificate+0xba>
    {
        mbedtls_x509_crt_free( ssl->session_negotiate->peer_cert );
 808b20e:	f7fd ff3e 	bl	808908e <mbedtls_x509_crt_free>
        mbedtls_free( ssl->session_negotiate->peer_cert );
 808b212:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 808b214:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 808b216:	f006 f991 	bl	809153c <free>
    }

    if( ( ssl->session_negotiate->peer_cert = (mbedtls_x509_crt *)mbedtls_calloc( 1,
 808b21a:	f44f 719a 	mov.w	r1, #308	; 0x134
 808b21e:	2001      	movs	r0, #1
 808b220:	6aee      	ldr	r6, [r5, #44]	; 0x2c
 808b222:	f008 fc87 	bl	8093b34 <calloc>
 808b226:	65f0      	str	r0, [r6, #92]	; 0x5c
 808b228:	2800      	cmp	r0, #0
 808b22a:	d1de      	bne.n	808b1ea <mbedtls_ssl_parse_certificate+0x8a>
                    sizeof( mbedtls_x509_crt ) ) ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed",
                       sizeof( mbedtls_x509_crt ) ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
 808b22c:	2250      	movs	r2, #80	; 0x50
 808b22e:	2102      	movs	r1, #2
 808b230:	4628      	mov	r0, r5
 808b232:	f7ff f865 	bl	808a300 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 808b236:	484a      	ldr	r0, [pc, #296]	; (808b360 <mbedtls_ssl_parse_certificate+0x200>)
 808b238:	e08a      	b.n	808b350 <mbedtls_ssl_parse_certificate+0x1f0>

    i += 3;

    while( i < ssl->in_hslen )
    {
        if ( i + 3 > ssl->in_hslen ) {
 808b23a:	1cf1      	adds	r1, r6, #3
 808b23c:	458e      	cmp	lr, r1
 808b23e:	d3cd      	bcc.n	808b1dc <mbedtls_ssl_parse_certificate+0x7c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                           MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }
        if( ssl->in_msg[i] != 0 )
 808b240:	6e68      	ldr	r0, [r5, #100]	; 0x64
 808b242:	5d83      	ldrb	r3, [r0, r6]
 808b244:	2b00      	cmp	r3, #0
 808b246:	d1c9      	bne.n	808b1dc <mbedtls_ssl_parse_certificate+0x7c>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
 808b248:	4406      	add	r6, r0
            | (unsigned int) ssl->in_msg[i + 2];
 808b24a:	7872      	ldrb	r2, [r6, #1]
 808b24c:	78b3      	ldrb	r3, [r6, #2]
 808b24e:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
        i += 3;

        if( n < 128 || i + n > ssl->in_hslen )
 808b252:	2a7f      	cmp	r2, #127	; 0x7f
 808b254:	d9c2      	bls.n	808b1dc <mbedtls_ssl_parse_certificate+0x7c>
 808b256:	188e      	adds	r6, r1, r2
 808b258:	45b6      	cmp	lr, r6
 808b25a:	d3bf      	bcc.n	808b1dc <mbedtls_ssl_parse_certificate+0x7c>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
 808b25c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
                                  ssl->in_msg + i, n );
 808b25e:	4401      	add	r1, r0
 808b260:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 808b262:	f7fd ff6d 	bl	8089140 <mbedtls_x509_crt_parse_der>
        switch( ret )
 808b266:	4548      	cmp	r0, r9
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
                                  ssl->in_msg + i, n );
 808b268:	4604      	mov	r4, r0
        switch( ret )
 808b26a:	d0c5      	beq.n	808b1f8 <mbedtls_ssl_parse_certificate+0x98>
 808b26c:	dc04      	bgt.n	808b278 <mbedtls_ssl_parse_certificate+0x118>
 808b26e:	f510 5f22 	cmn.w	r0, #10368	; 0x2880
 808b272:	d158      	bne.n	808b326 <mbedtls_ssl_parse_certificate+0x1c6>
            /* Ignore certificate with an unknown algorithm: maybe a
               prior certificate was already trusted. */
            break;

        case MBEDTLS_ERR_X509_ALLOC_FAILED:
            alert = MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR;
 808b274:	2250      	movs	r2, #80	; 0x50
 808b276:	e05d      	b.n	808b334 <mbedtls_ssl_parse_certificate+0x1d4>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
                                  ssl->in_msg + i, n );
        switch( ret )
 808b278:	f510 5f16 	cmn.w	r0, #9600	; 0x2580
 808b27c:	d055      	beq.n	808b32a <mbedtls_ssl_parse_certificate+0x1ca>
 808b27e:	2800      	cmp	r0, #0
 808b280:	d0ba      	beq.n	808b1f8 <mbedtls_ssl_parse_certificate+0x98>
 808b282:	e050      	b.n	808b326 <mbedtls_ssl_parse_certificate+0x1c6>
    {
        mbedtls_x509_crt *ca_chain;
        mbedtls_x509_crl *ca_crl;

#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
        if( ssl->handshake->sni_ca_chain != NULL )
 808b284:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 808b286:	682b      	ldr	r3, [r5, #0]
 808b288:	6916      	ldr	r6, [r2, #16]
 808b28a:	b10e      	cbz	r6, 808b290 <mbedtls_ssl_parse_certificate+0x130>
        {
            ca_chain = ssl->handshake->sni_ca_chain;
            ca_crl   = ssl->handshake->sni_ca_crl;
 808b28c:	6952      	ldr	r2, [r2, #20]
 808b28e:	e001      	b.n	808b294 <mbedtls_ssl_parse_certificate+0x134>
        }
        else
#endif
        {
            ca_chain = ssl->conf->ca_chain;
 808b290:	6cde      	ldr	r6, [r3, #76]	; 0x4c
            ca_crl   = ssl->conf->ca_crl;
 808b292:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                ssl->session_negotiate->peer_cert,
                                ca_chain, ca_crl,
                                ssl->conf->cert_profile,
                                ssl->hostname,
                               &ssl->session_negotiate->verify_result,
                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
 808b294:	6b99      	ldr	r1, [r3, #56]	; 0x38

        /*
         * Main check: verify certificate
         */
        ret = mbedtls_x509_crt_verify_with_profile(
                                ssl->session_negotiate->peer_cert,
 808b296:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
                                ca_chain, ca_crl,
                                ssl->conf->cert_profile,
                                ssl->hostname,
                               &ssl->session_negotiate->verify_result,
                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
 808b298:	9103      	str	r1, [sp, #12]
 808b29a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 808b29c:	9102      	str	r1, [sp, #8]
        }

        /*
         * Main check: verify certificate
         */
        ret = mbedtls_x509_crt_verify_with_profile(
 808b29e:	f100 0160 	add.w	r1, r0, #96	; 0x60
                                ssl->session_negotiate->peer_cert,
                                ca_chain, ca_crl,
                                ssl->conf->cert_profile,
                                ssl->hostname,
                               &ssl->session_negotiate->verify_result,
                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
 808b2a2:	9101      	str	r1, [sp, #4]
 808b2a4:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 808b2a8:	9100      	str	r1, [sp, #0]
 808b2aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808b2ac:	4631      	mov	r1, r6
 808b2ae:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 808b2b0:	f7fd fe06 	bl	8088ec0 <mbedtls_x509_crt_verify_with_profile>
                    ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
            }
        }
#endif /* MBEDTLS_ECP_C */

        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
 808b2b4:	682b      	ldr	r3, [r5, #0]
                                ssl->session_negotiate->peer_cert,
                                ca_chain, ca_crl,
                                ssl->conf->cert_profile,
                                ssl->hostname,
                               &ssl->session_negotiate->verify_result,
                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
 808b2b6:	4604      	mov	r4, r0
                    ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
            }
        }
#endif /* MBEDTLS_ECP_C */

        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
 808b2b8:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 808b2bc:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 808b2be:	f002 0201 	and.w	r2, r2, #1
 808b2c2:	f100 0360 	add.w	r3, r0, #96	; 0x60
 808b2c6:	f082 0201 	eor.w	r2, r2, #1
 808b2ca:	4641      	mov	r1, r8
 808b2cc:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 808b2ce:	f7ff ff21 	bl	808b114 <mbedtls_ssl_check_cert_usage>
 808b2d2:	b100      	cbz	r0, 808b2d6 <mbedtls_ssl_parse_certificate+0x176>
                                 ciphersuite_info,
                                 ! ssl->conf->endpoint,
                                 &ssl->session_negotiate->verify_result ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (usage extensions)" ) );
            if( ret == 0 )
 808b2d4:	b174      	cbz	r4, 808b2f4 <mbedtls_ssl_parse_certificate+0x194>
         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
         * with details encoded in the verification flags. All other kinds
         * of error codes, including those from the user provided f_vrfy
         * functions, are treated as fatal and lead to a failure of
         * ssl_parse_certificate even if verification was optional. */
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 808b2d6:	2f01      	cmp	r7, #1
 808b2d8:	d105      	bne.n	808b2e6 <mbedtls_ssl_parse_certificate+0x186>
 808b2da:	f514 5f1c 	cmn.w	r4, #9984	; 0x2700
 808b2de:	d02e      	beq.n	808b33e <mbedtls_ssl_parse_certificate+0x1de>
            ( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED ||
 808b2e0:	f514 4ff4 	cmn.w	r4, #31232	; 0x7a00
 808b2e4:	d02b      	beq.n	808b33e <mbedtls_ssl_parse_certificate+0x1de>
              ret == MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE ) )
        {
            ret = 0;
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
 808b2e6:	b90e      	cbnz	r6, 808b2ec <mbedtls_ssl_parse_certificate+0x18c>
 808b2e8:	2f02      	cmp	r7, #2
 808b2ea:	d001      	beq.n	808b2f0 <mbedtls_ssl_parse_certificate+0x190>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
        }

        if( ret != 0 )
 808b2ec:	b934      	cbnz	r4, 808b2fc <mbedtls_ssl_parse_certificate+0x19c>
 808b2ee:	e789      	b.n	808b204 <mbedtls_ssl_parse_certificate+0xa4>
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
 808b2f0:	4c1c      	ldr	r4, [pc, #112]	; (808b364 <mbedtls_ssl_parse_certificate+0x204>)
 808b2f2:	e003      	b.n	808b2fc <mbedtls_ssl_parse_certificate+0x19c>
         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
         * with details encoded in the verification flags. All other kinds
         * of error codes, including those from the user provided f_vrfy
         * functions, are treated as fatal and lead to a failure of
         * ssl_parse_certificate even if verification was optional. */
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 808b2f4:	2f01      	cmp	r7, #1
 808b2f6:	d085      	beq.n	808b204 <mbedtls_ssl_parse_certificate+0xa4>
              ret == MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE ) )
        {
            ret = 0;
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
 808b2f8:	b31e      	cbz	r6, 808b342 <mbedtls_ssl_parse_certificate+0x1e2>
                                 ! ssl->conf->endpoint,
                                 &ssl->session_negotiate->verify_result ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (usage extensions)" ) );
            if( ret == 0 )
                ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
 808b2fa:	4c18      	ldr	r4, [pc, #96]	; (808b35c <mbedtls_ssl_parse_certificate+0x1fc>)
        if( ret != 0 )
        {
            /* The certificate may have been rejected for several reasons.
               Pick one and send the corresponding alert. Which alert to send
               may be a subject of debate in some cases. */
            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
 808b2fc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 808b2fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 808b300:	05df      	lsls	r7, r3, #23
 808b302:	d40e      	bmi.n	808b322 <mbedtls_ssl_parse_certificate+0x1c2>
                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
 808b304:	075e      	lsls	r6, r3, #29
 808b306:	d40e      	bmi.n	808b326 <mbedtls_ssl_parse_certificate+0x1c6>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NS_CERT_TYPE )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_PK )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
 808b308:	f413 3fdc 	tst.w	r3, #112640	; 0x1b800
 808b30c:	d10d      	bne.n	808b32a <mbedtls_ssl_parse_certificate+0x1ca>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
 808b30e:	07d8      	lsls	r0, r3, #31
 808b310:	d40d      	bmi.n	808b32e <mbedtls_ssl_parse_certificate+0x1ce>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
 808b312:	0799      	lsls	r1, r3, #30
 808b314:	d40d      	bmi.n	808b332 <mbedtls_ssl_parse_certificate+0x1d2>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NOT_TRUSTED )
                alert = MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA;
            else
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
 808b316:	f013 0f08 	tst.w	r3, #8
 808b31a:	bf14      	ite	ne
 808b31c:	2230      	movne	r2, #48	; 0x30
 808b31e:	222e      	moveq	r2, #46	; 0x2e
 808b320:	e008      	b.n	808b334 <mbedtls_ssl_parse_certificate+0x1d4>
        {
            /* The certificate may have been rejected for several reasons.
               Pick one and send the corresponding alert. Which alert to send
               may be a subject of debate in some cases. */
            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
 808b322:	2231      	movs	r2, #49	; 0x31
 808b324:	e006      	b.n	808b334 <mbedtls_ssl_parse_certificate+0x1d4>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
                alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
 808b326:	222a      	movs	r2, #42	; 0x2a
 808b328:	e004      	b.n	808b334 <mbedtls_ssl_parse_certificate+0x1d4>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NS_CERT_TYPE )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_PK )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 808b32a:	222b      	movs	r2, #43	; 0x2b
 808b32c:	e002      	b.n	808b334 <mbedtls_ssl_parse_certificate+0x1d4>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
 808b32e:	222d      	movs	r2, #45	; 0x2d
 808b330:	e000      	b.n	808b334 <mbedtls_ssl_parse_certificate+0x1d4>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
 808b332:	222c      	movs	r2, #44	; 0x2c
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NOT_TRUSTED )
                alert = MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA;
            else
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            alert );
 808b334:	2102      	movs	r1, #2
 808b336:	4628      	mov	r0, r5
 808b338:	f7fe ffe2 	bl	808a300 <mbedtls_ssl_send_alert_message>
 808b33c:	e762      	b.n	808b204 <mbedtls_ssl_parse_certificate+0xa4>
 808b33e:	2000      	movs	r0, #0
 808b340:	e006      	b.n	808b350 <mbedtls_ssl_parse_certificate+0x1f0>
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
 808b342:	4b08      	ldr	r3, [pc, #32]	; (808b364 <mbedtls_ssl_parse_certificate+0x204>)
 808b344:	4805      	ldr	r0, [pc, #20]	; (808b35c <mbedtls_ssl_parse_certificate+0x1fc>)
 808b346:	2f02      	cmp	r7, #2
 808b348:	bf14      	ite	ne
 808b34a:	4604      	movne	r4, r0
 808b34c:	461c      	moveq	r4, r3
 808b34e:	e7d5      	b.n	808b2fc <mbedtls_ssl_parse_certificate+0x19c>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate" ) );

    return( ret );
}
 808b350:	b005      	add	sp, #20
 808b352:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808b356:	bf00      	nop
 808b358:	ffff8900 	.word	0xffff8900
 808b35c:	ffff8600 	.word	0xffff8600
 808b360:	ffff8100 	.word	0xffff8100
 808b364:	ffff8980 	.word	0xffff8980
 808b368:	ffffd9d2 	.word	0xffffd9d2

0808b36c <mbedtls_ssl_write_version>:
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 808b36c:	7018      	strb	r0, [r3, #0]
        ver[1] = (unsigned char) minor;
 808b36e:	7059      	strb	r1, [r3, #1]
 808b370:	4770      	bx	lr

0808b372 <mbedtls_ssl_read_version>:
    else
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
 808b372:	781a      	ldrb	r2, [r3, #0]
 808b374:	6002      	str	r2, [r0, #0]
        *minor = ver[1];
 808b376:	785b      	ldrb	r3, [r3, #1]
 808b378:	600b      	str	r3, [r1, #0]
 808b37a:	4770      	bx	lr

0808b37c <_ZL11mpi_sub_hlpjPmS_>:
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 808b37c:	2300      	movs	r3, #0

/*
 * Helper for mbedtls_mpi subtraction
 */
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
 808b37e:	b5f0      	push	{r4, r5, r6, r7, lr}
 808b380:	4616      	mov	r6, r2
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 808b382:	461c      	mov	r4, r3
 808b384:	4284      	cmp	r4, r0
 808b386:	d016      	beq.n	808b3b6 <_ZL11mpi_sub_hlpjPmS_+0x3a>
    {
        z = ( *d <  c );     *d -=  c;
 808b388:	f8d6 e000 	ldr.w	lr, [r6]
 808b38c:	ebc3 050e 	rsb	r5, r3, lr
 808b390:	6035      	str	r5, [r6, #0]
        c = ( *d < *s ) + z; *d -= *s;
 808b392:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 808b396:	3401      	adds	r4, #1
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
 808b398:	42bd      	cmp	r5, r7
 808b39a:	bf2c      	ite	cs
 808b39c:	f04f 0c00 	movcs.w	ip, #0
 808b3a0:	f04f 0c01 	movcc.w	ip, #1
 808b3a4:	1bed      	subs	r5, r5, r7
 808b3a6:	4573      	cmp	r3, lr
 808b3a8:	bf94      	ite	ls
 808b3aa:	4663      	movls	r3, ip
 808b3ac:	f10c 0301 	addhi.w	r3, ip, #1
 808b3b0:	f846 5b04 	str.w	r5, [r6], #4
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 808b3b4:	e7e6      	b.n	808b384 <_ZL11mpi_sub_hlpjPmS_+0x8>
 808b3b6:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
 808b3ba:	b143      	cbz	r3, 808b3ce <_ZL11mpi_sub_hlpjPmS_+0x52>
    {
        z = ( *d < c ); *d -= c;
 808b3bc:	6811      	ldr	r1, [r2, #0]
 808b3be:	1ac8      	subs	r0, r1, r3
        c = z; i++; d++;
 808b3c0:	428b      	cmp	r3, r1
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
    {
        z = ( *d < c ); *d -= c;
 808b3c2:	f842 0b04 	str.w	r0, [r2], #4
        c = z; i++; d++;
 808b3c6:	bf94      	ite	ls
 808b3c8:	2300      	movls	r3, #0
 808b3ca:	2301      	movhi	r3, #1
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
 808b3cc:	e7f5      	b.n	808b3ba <_ZL11mpi_sub_hlpjPmS_+0x3e>
 808b3ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808b3d0 <_ZL11mpi_mul_hlpjPmS_m>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
 808b3d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808b3d4:	460d      	mov	r5, r1
 808b3d6:	4614      	mov	r4, r2
 808b3d8:	4686      	mov	lr, r0
    mbedtls_mpi_uint c = 0, t = 0;
 808b3da:	f04f 0c00 	mov.w	ip, #0
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 808b3de:	f1be 0f0f 	cmp.w	lr, #15
 808b3e2:	f105 0540 	add.w	r5, r5, #64	; 0x40
 808b3e6:	f104 0440 	add.w	r4, r4, #64	; 0x40
 808b3ea:	f240 811e 	bls.w	808b62a <_ZL11mpi_mul_hlpjPmS_m+0x25a>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 808b3ee:	f855 6c40 	ldr.w	r6, [r5, #-64]
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 808b3f2:	f1ae 0e10 	sub.w	lr, lr, #16
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 808b3f6:	fba6 9a03 	umull	r9, sl, r6, r3
 808b3fa:	f854 6c40 	ldr.w	r6, [r4, #-64]
 808b3fe:	eb1c 0c09 	adds.w	ip, ip, r9
 808b402:	bf2c      	ite	cs
 808b404:	f04f 0801 	movcs.w	r8, #1
 808b408:	f04f 0800 	movcc.w	r8, #0
 808b40c:	eb1c 0606 	adds.w	r6, ip, r6
 808b410:	f844 6c40 	str.w	r6, [r4, #-64]
 808b414:	f855 6c3c 	ldr.w	r6, [r5, #-60]
 808b418:	eb48 080a 	adc.w	r8, r8, sl
 808b41c:	fba3 9a06 	umull	r9, sl, r3, r6
 808b420:	f854 6c3c 	ldr.w	r6, [r4, #-60]
 808b424:	eb18 0809 	adds.w	r8, r8, r9
 808b428:	bf2c      	ite	cs
 808b42a:	f04f 0c01 	movcs.w	ip, #1
 808b42e:	f04f 0c00 	movcc.w	ip, #0
 808b432:	eb18 0606 	adds.w	r6, r8, r6
 808b436:	f844 6c3c 	str.w	r6, [r4, #-60]
        MULADDC_CORE   MULADDC_CORE
 808b43a:	f855 7c38 	ldr.w	r7, [r5, #-56]
 808b43e:	f854 6c38 	ldr.w	r6, [r4, #-56]
 808b442:	fba3 8907 	umull	r8, r9, r3, r7
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 808b446:	eb4c 0c0a 	adc.w	ip, ip, sl
        MULADDC_CORE   MULADDC_CORE
 808b44a:	eb1c 0c08 	adds.w	ip, ip, r8
 808b44e:	bf2c      	ite	cs
 808b450:	2701      	movcs	r7, #1
 808b452:	2700      	movcc	r7, #0
 808b454:	eb1c 0606 	adds.w	r6, ip, r6
 808b458:	f844 6c38 	str.w	r6, [r4, #-56]
 808b45c:	f855 6c34 	ldr.w	r6, [r5, #-52]
 808b460:	eb47 0709 	adc.w	r7, r7, r9
 808b464:	fba3 8906 	umull	r8, r9, r3, r6
 808b468:	f854 6c34 	ldr.w	r6, [r4, #-52]
 808b46c:	eb17 0708 	adds.w	r7, r7, r8
 808b470:	bf2c      	ite	cs
 808b472:	f04f 0c01 	movcs.w	ip, #1
 808b476:	f04f 0c00 	movcc.w	ip, #0
 808b47a:	19be      	adds	r6, r7, r6
 808b47c:	f844 6c34 	str.w	r6, [r4, #-52]
        MULADDC_CORE   MULADDC_CORE
 808b480:	f855 7c30 	ldr.w	r7, [r5, #-48]
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 808b484:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 808b488:	fba3 8907 	umull	r8, r9, r3, r7
 808b48c:	f854 6c30 	ldr.w	r6, [r4, #-48]
 808b490:	eb1c 0c08 	adds.w	ip, ip, r8
 808b494:	bf2c      	ite	cs
 808b496:	2701      	movcs	r7, #1
 808b498:	2700      	movcc	r7, #0
 808b49a:	eb1c 0606 	adds.w	r6, ip, r6
 808b49e:	f844 6c30 	str.w	r6, [r4, #-48]
 808b4a2:	f855 6c2c 	ldr.w	r6, [r5, #-44]
 808b4a6:	eb47 0709 	adc.w	r7, r7, r9
 808b4aa:	fba3 8906 	umull	r8, r9, r3, r6
 808b4ae:	f854 6c2c 	ldr.w	r6, [r4, #-44]
 808b4b2:	eb17 0708 	adds.w	r7, r7, r8
 808b4b6:	bf2c      	ite	cs
 808b4b8:	f04f 0c01 	movcs.w	ip, #1
 808b4bc:	f04f 0c00 	movcc.w	ip, #0
 808b4c0:	19be      	adds	r6, r7, r6
 808b4c2:	f844 6c2c 	str.w	r6, [r4, #-44]
        MULADDC_CORE   MULADDC_CORE
 808b4c6:	f855 7c28 	ldr.w	r7, [r5, #-40]
    for( ; i >= 16; i -= 16 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 808b4ca:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 808b4ce:	fba3 8907 	umull	r8, r9, r3, r7
 808b4d2:	f854 6c28 	ldr.w	r6, [r4, #-40]
 808b4d6:	eb1c 0c08 	adds.w	ip, ip, r8
 808b4da:	bf2c      	ite	cs
 808b4dc:	2701      	movcs	r7, #1
 808b4de:	2700      	movcc	r7, #0
 808b4e0:	eb1c 0606 	adds.w	r6, ip, r6
 808b4e4:	f844 6c28 	str.w	r6, [r4, #-40]
 808b4e8:	f855 6c24 	ldr.w	r6, [r5, #-36]
 808b4ec:	eb47 0709 	adc.w	r7, r7, r9
 808b4f0:	fba3 8906 	umull	r8, r9, r3, r6
 808b4f4:	f854 6c24 	ldr.w	r6, [r4, #-36]
 808b4f8:	eb17 0708 	adds.w	r7, r7, r8
 808b4fc:	bf2c      	ite	cs
 808b4fe:	f04f 0c01 	movcs.w	ip, #1
 808b502:	f04f 0c00 	movcc.w	ip, #0
 808b506:	19be      	adds	r6, r7, r6
 808b508:	f844 6c24 	str.w	r6, [r4, #-36]

        MULADDC_CORE   MULADDC_CORE
 808b50c:	f855 7c20 	ldr.w	r7, [r5, #-32]
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 808b510:	eb4c 0c09 	adc.w	ip, ip, r9

        MULADDC_CORE   MULADDC_CORE
 808b514:	fba3 8907 	umull	r8, r9, r3, r7
 808b518:	f854 6c20 	ldr.w	r6, [r4, #-32]
 808b51c:	eb1c 0c08 	adds.w	ip, ip, r8
 808b520:	bf2c      	ite	cs
 808b522:	2701      	movcs	r7, #1
 808b524:	2700      	movcc	r7, #0
 808b526:	eb1c 0606 	adds.w	r6, ip, r6
 808b52a:	f844 6c20 	str.w	r6, [r4, #-32]
 808b52e:	f855 6c1c 	ldr.w	r6, [r5, #-28]
 808b532:	eb47 0709 	adc.w	r7, r7, r9
 808b536:	fba3 8906 	umull	r8, r9, r3, r6
 808b53a:	f854 6c1c 	ldr.w	r6, [r4, #-28]
 808b53e:	eb17 0708 	adds.w	r7, r7, r8
 808b542:	bf2c      	ite	cs
 808b544:	f04f 0c01 	movcs.w	ip, #1
 808b548:	f04f 0c00 	movcc.w	ip, #0
 808b54c:	19be      	adds	r6, r7, r6
 808b54e:	f844 6c1c 	str.w	r6, [r4, #-28]
        MULADDC_CORE   MULADDC_CORE
 808b552:	f855 7c18 	ldr.w	r7, [r5, #-24]
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
 808b556:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 808b55a:	fba3 8907 	umull	r8, r9, r3, r7
 808b55e:	f854 6c18 	ldr.w	r6, [r4, #-24]
 808b562:	eb1c 0c08 	adds.w	ip, ip, r8
 808b566:	bf2c      	ite	cs
 808b568:	2701      	movcs	r7, #1
 808b56a:	2700      	movcc	r7, #0
 808b56c:	eb1c 0606 	adds.w	r6, ip, r6
 808b570:	f844 6c18 	str.w	r6, [r4, #-24]
 808b574:	f855 6c14 	ldr.w	r6, [r5, #-20]
 808b578:	eb47 0709 	adc.w	r7, r7, r9
 808b57c:	fba3 8906 	umull	r8, r9, r3, r6
 808b580:	f854 6c14 	ldr.w	r6, [r4, #-20]
 808b584:	eb17 0708 	adds.w	r7, r7, r8
 808b588:	bf2c      	ite	cs
 808b58a:	f04f 0c01 	movcs.w	ip, #1
 808b58e:	f04f 0c00 	movcc.w	ip, #0
 808b592:	19be      	adds	r6, r7, r6
 808b594:	f844 6c14 	str.w	r6, [r4, #-20]
        MULADDC_CORE   MULADDC_CORE
 808b598:	f855 7c10 	ldr.w	r7, [r5, #-16]
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 808b59c:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 808b5a0:	fba3 8907 	umull	r8, r9, r3, r7
 808b5a4:	f854 6c10 	ldr.w	r6, [r4, #-16]
 808b5a8:	eb1c 0c08 	adds.w	ip, ip, r8
 808b5ac:	bf2c      	ite	cs
 808b5ae:	2701      	movcs	r7, #1
 808b5b0:	2700      	movcc	r7, #0
 808b5b2:	eb1c 0606 	adds.w	r6, ip, r6
 808b5b6:	f844 6c10 	str.w	r6, [r4, #-16]
 808b5ba:	f855 6c0c 	ldr.w	r6, [r5, #-12]
 808b5be:	eb47 0709 	adc.w	r7, r7, r9
 808b5c2:	fba3 8906 	umull	r8, r9, r3, r6
 808b5c6:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 808b5ca:	eb17 0708 	adds.w	r7, r7, r8
 808b5ce:	bf2c      	ite	cs
 808b5d0:	f04f 0c01 	movcs.w	ip, #1
 808b5d4:	f04f 0c00 	movcc.w	ip, #0
 808b5d8:	19be      	adds	r6, r7, r6
 808b5da:	f844 6c0c 	str.w	r6, [r4, #-12]
        MULADDC_CORE   MULADDC_CORE
 808b5de:	f855 7c08 	ldr.w	r7, [r5, #-8]
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 808b5e2:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 808b5e6:	fba3 8907 	umull	r8, r9, r3, r7
 808b5ea:	f854 6c08 	ldr.w	r6, [r4, #-8]
 808b5ee:	eb1c 0c08 	adds.w	ip, ip, r8
 808b5f2:	bf2c      	ite	cs
 808b5f4:	2701      	movcs	r7, #1
 808b5f6:	2700      	movcc	r7, #0
 808b5f8:	eb1c 0606 	adds.w	r6, ip, r6
 808b5fc:	f844 6c08 	str.w	r6, [r4, #-8]
 808b600:	f855 6c04 	ldr.w	r6, [r5, #-4]
 808b604:	eb47 0709 	adc.w	r7, r7, r9
 808b608:	fba3 8906 	umull	r8, r9, r3, r6
 808b60c:	f854 6c04 	ldr.w	r6, [r4, #-4]
 808b610:	eb17 0708 	adds.w	r7, r7, r8
 808b614:	bf2c      	ite	cs
 808b616:	f04f 0c01 	movcs.w	ip, #1
 808b61a:	f04f 0c00 	movcc.w	ip, #0
 808b61e:	19be      	adds	r6, r7, r6
 808b620:	eb4c 0c09 	adc.w	ip, ip, r9
 808b624:	f844 6c04 	str.w	r6, [r4, #-4]
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 808b628:	e6d9      	b.n	808b3de <_ZL11mpi_mul_hlpjPmS_m+0xe>
 808b62a:	ea4f 1e10 	mov.w	lr, r0, lsr #4
 808b62e:	eba0 100e 	sub.w	r0, r0, lr, lsl #4
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
 808b632:	2807      	cmp	r0, #7
 808b634:	ea4f 1e8e 	mov.w	lr, lr, lsl #6
 808b638:	eb01 050e 	add.w	r5, r1, lr
 808b63c:	eb02 040e 	add.w	r4, r2, lr
 808b640:	d966      	bls.n	808b710 <_ZL11mpi_mul_hlpjPmS_m+0x340>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 808b642:	f851 600e 	ldr.w	r6, [r1, lr]
 808b646:	fba6 7803 	umull	r7, r8, r6, r3
 808b64a:	f852 600e 	ldr.w	r6, [r2, lr]
 808b64e:	eb1c 0c07 	adds.w	ip, ip, r7
 808b652:	bf2c      	ite	cs
 808b654:	2101      	movcs	r1, #1
 808b656:	2100      	movcc	r1, #0
 808b658:	eb1c 0606 	adds.w	r6, ip, r6
 808b65c:	f842 600e 	str.w	r6, [r2, lr]
 808b660:	686e      	ldr	r6, [r5, #4]
 808b662:	eb41 0108 	adc.w	r1, r1, r8
 808b666:	fba3 7806 	umull	r7, r8, r3, r6
 808b66a:	6866      	ldr	r6, [r4, #4]
 808b66c:	19ca      	adds	r2, r1, r7
 808b66e:	bf2c      	ite	cs
 808b670:	2101      	movcs	r1, #1
 808b672:	2100      	movcc	r1, #0
 808b674:	1992      	adds	r2, r2, r6
 808b676:	6062      	str	r2, [r4, #4]
        MULADDC_CORE   MULADDC_CORE
 808b678:	68ae      	ldr	r6, [r5, #8]
    }

    for( ; i >= 8; i -= 8 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 808b67a:	eb41 0108 	adc.w	r1, r1, r8
        MULADDC_CORE   MULADDC_CORE
 808b67e:	fba3 7806 	umull	r7, r8, r3, r6
 808b682:	68a6      	ldr	r6, [r4, #8]
 808b684:	19c9      	adds	r1, r1, r7
 808b686:	bf2c      	ite	cs
 808b688:	2201      	movcs	r2, #1
 808b68a:	2200      	movcc	r2, #0
 808b68c:	1989      	adds	r1, r1, r6
 808b68e:	60a1      	str	r1, [r4, #8]
 808b690:	68ee      	ldr	r6, [r5, #12]
 808b692:	eb42 0208 	adc.w	r2, r2, r8
 808b696:	fba3 7806 	umull	r7, r8, r3, r6
 808b69a:	68e6      	ldr	r6, [r4, #12]
 808b69c:	19d2      	adds	r2, r2, r7
 808b69e:	bf2c      	ite	cs
 808b6a0:	2101      	movcs	r1, #1
 808b6a2:	2100      	movcc	r1, #0
 808b6a4:	1992      	adds	r2, r2, r6
 808b6a6:	60e2      	str	r2, [r4, #12]

        MULADDC_CORE   MULADDC_CORE
 808b6a8:	692e      	ldr	r6, [r5, #16]

    for( ; i >= 8; i -= 8 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 808b6aa:	eb41 0108 	adc.w	r1, r1, r8

        MULADDC_CORE   MULADDC_CORE
 808b6ae:	fba3 7806 	umull	r7, r8, r3, r6
 808b6b2:	6926      	ldr	r6, [r4, #16]
 808b6b4:	19c9      	adds	r1, r1, r7
 808b6b6:	bf2c      	ite	cs
 808b6b8:	2201      	movcs	r2, #1
 808b6ba:	2200      	movcc	r2, #0
 808b6bc:	1989      	adds	r1, r1, r6
 808b6be:	6121      	str	r1, [r4, #16]
 808b6c0:	696e      	ldr	r6, [r5, #20]
 808b6c2:	eb42 0208 	adc.w	r2, r2, r8
 808b6c6:	fba3 7806 	umull	r7, r8, r3, r6
 808b6ca:	6966      	ldr	r6, [r4, #20]
 808b6cc:	19d2      	adds	r2, r2, r7
 808b6ce:	bf2c      	ite	cs
 808b6d0:	2101      	movcs	r1, #1
 808b6d2:	2100      	movcc	r1, #0
 808b6d4:	1992      	adds	r2, r2, r6
 808b6d6:	6162      	str	r2, [r4, #20]
        MULADDC_CORE   MULADDC_CORE
 808b6d8:	69ae      	ldr	r6, [r5, #24]
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
 808b6da:	eb41 0108 	adc.w	r1, r1, r8
        MULADDC_CORE   MULADDC_CORE
 808b6de:	fba3 7806 	umull	r7, r8, r3, r6
 808b6e2:	69a6      	ldr	r6, [r4, #24]
 808b6e4:	19c9      	adds	r1, r1, r7
 808b6e6:	bf2c      	ite	cs
 808b6e8:	2201      	movcs	r2, #1
 808b6ea:	2200      	movcc	r2, #0
 808b6ec:	1989      	adds	r1, r1, r6
 808b6ee:	61a1      	str	r1, [r4, #24]
 808b6f0:	69ee      	ldr	r6, [r5, #28]
 808b6f2:	69e1      	ldr	r1, [r4, #28]
 808b6f4:	fba3 6706 	umull	r6, r7, r3, r6
 808b6f8:	eb42 0208 	adc.w	r2, r2, r8
 808b6fc:	1992      	adds	r2, r2, r6
 808b6fe:	bf2c      	ite	cs
 808b700:	f04f 0c01 	movcs.w	ip, #1
 808b704:	f04f 0c00 	movcc.w	ip, #0
 808b708:	1852      	adds	r2, r2, r1
 808b70a:	eb4c 0c07 	adc.w	ip, ip, r7
 808b70e:	61e2      	str	r2, [r4, #28]
 808b710:	08c2      	lsrs	r2, r0, #3
 808b712:	0151      	lsls	r1, r2, #5
 808b714:	440c      	add	r4, r1
 808b716:	440d      	add	r5, r1
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
    mbedtls_mpi_uint c = 0, t = 0;
 808b718:	4621      	mov	r1, r4
 808b71a:	eba0 00c2 	sub.w	r0, r0, r2, lsl #3
 808b71e:	0080      	lsls	r0, r0, #2
 808b720:	eb05 0e00 	add.w	lr, r5, r0
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 808b724:	4575      	cmp	r5, lr
 808b726:	d011      	beq.n	808b74c <_ZL11mpi_mul_hlpjPmS_m+0x37c>
    {
        MULADDC_INIT
        MULADDC_CORE
 808b728:	f855 6b04 	ldr.w	r6, [r5], #4
 808b72c:	fba6 7803 	umull	r7, r8, r6, r3
 808b730:	680e      	ldr	r6, [r1, #0]
 808b732:	eb1c 0207 	adds.w	r2, ip, r7
 808b736:	bf2c      	ite	cs
 808b738:	f04f 0c01 	movcs.w	ip, #1
 808b73c:	f04f 0c00 	movcc.w	ip, #0
 808b740:	1992      	adds	r2, r2, r6
 808b742:	eb4c 0c08 	adc.w	ip, ip, r8
 808b746:	f841 2b04 	str.w	r2, [r1], #4
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 808b74a:	e7eb      	b.n	808b724 <_ZL11mpi_mul_hlpjPmS_m+0x354>
 808b74c:	4404      	add	r4, r0
#endif /* MULADDC_HUIT */

    t++;

    do {
        *d += c; c = ( *d < c ); d++;
 808b74e:	6823      	ldr	r3, [r4, #0]
 808b750:	4463      	add	r3, ip
 808b752:	459c      	cmp	ip, r3
 808b754:	f844 3b04 	str.w	r3, [r4], #4
 808b758:	bf8c      	ite	hi
 808b75a:	f04f 0c01 	movhi.w	ip, #1
 808b75e:	f04f 0c00 	movls.w	ip, #0
    }
    while( c != 0 );
 808b762:	d8f4      	bhi.n	808b74e <_ZL11mpi_mul_hlpjPmS_m+0x37e>
}
 808b764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808b768 <mbedtls_mpi_init>:
/*
 * Initialize one MPI
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
 808b768:	b120      	cbz	r0, 808b774 <mbedtls_mpi_init+0xc>
        return;

    X->s = 1;
 808b76a:	2301      	movs	r3, #1
 808b76c:	6003      	str	r3, [r0, #0]
    X->n = 0;
 808b76e:	2300      	movs	r3, #0
 808b770:	6043      	str	r3, [r0, #4]
    X->p = NULL;
 808b772:	6083      	str	r3, [r0, #8]
 808b774:	4770      	bx	lr

0808b776 <mbedtls_mpi_free>:

/*
 * Unallocate one MPI
 */
void mbedtls_mpi_free( mbedtls_mpi *X )
{
 808b776:	b510      	push	{r4, lr}
    if( X == NULL )
 808b778:	4604      	mov	r4, r0
 808b77a:	b188      	cbz	r0, 808b7a0 <mbedtls_mpi_free+0x2a>
        return;

    if( X->p != NULL )
 808b77c:	6883      	ldr	r3, [r0, #8]
 808b77e:	b153      	cbz	r3, 808b796 <mbedtls_mpi_free+0x20>
    {
        mbedtls_mpi_zeroize( X->p, X->n );
 808b780:	6842      	ldr	r2, [r0, #4]
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n ) {
    volatile mbedtls_mpi_uint *p = (mbedtls_mpi_uint *)v; while( n-- ) *p++ = 0;
 808b782:	2100      	movs	r1, #0
 808b784:	f112 32ff 	adds.w	r2, r2, #4294967295
 808b788:	d302      	bcc.n	808b790 <mbedtls_mpi_free+0x1a>
 808b78a:	6019      	str	r1, [r3, #0]
 808b78c:	3304      	adds	r3, #4
 808b78e:	e7f9      	b.n	808b784 <mbedtls_mpi_free+0xe>
        return;

    if( X->p != NULL )
    {
        mbedtls_mpi_zeroize( X->p, X->n );
        mbedtls_free( X->p );
 808b790:	68a0      	ldr	r0, [r4, #8]
 808b792:	f005 fed3 	bl	809153c <free>
    }

    X->s = 1;
 808b796:	2301      	movs	r3, #1
 808b798:	6023      	str	r3, [r4, #0]
    X->n = 0;
 808b79a:	2300      	movs	r3, #0
 808b79c:	6063      	str	r3, [r4, #4]
    X->p = NULL;
 808b79e:	60a3      	str	r3, [r4, #8]
 808b7a0:	bd10      	pop	{r4, pc}

0808b7a2 <mbedtls_mpi_grow>:
 */
int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )
{
    mbedtls_mpi_uint *p;

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 808b7a2:	f242 7310 	movw	r3, #10000	; 0x2710
 808b7a6:	4299      	cmp	r1, r3

/*
 * Enlarge to the specified number of limbs
 */
int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )
{
 808b7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808b7ac:	4604      	mov	r4, r0
 808b7ae:	460f      	mov	r7, r1
    mbedtls_mpi_uint *p;

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 808b7b0:	d903      	bls.n	808b7ba <mbedtls_mpi_grow+0x18>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 808b7b2:	f06f 000f 	mvn.w	r0, #15
 808b7b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    if( X->n < nblimbs )
 808b7ba:	6846      	ldr	r6, [r0, #4]
 808b7bc:	42b1      	cmp	r1, r6
 808b7be:	d919      	bls.n	808b7f4 <mbedtls_mpi_grow+0x52>
    {
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 808b7c0:	2104      	movs	r1, #4
 808b7c2:	4638      	mov	r0, r7
 808b7c4:	f008 f9b6 	bl	8093b34 <calloc>
 808b7c8:	4680      	mov	r8, r0
 808b7ca:	2800      	cmp	r0, #0
 808b7cc:	d0f1      	beq.n	808b7b2 <mbedtls_mpi_grow+0x10>
            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );

        if( X->p != NULL )
 808b7ce:	68a5      	ldr	r5, [r4, #8]
 808b7d0:	b16d      	cbz	r5, 808b7ee <mbedtls_mpi_grow+0x4c>
        {
            memcpy( p, X->p, X->n * ciL );
 808b7d2:	00b2      	lsls	r2, r6, #2
 808b7d4:	4629      	mov	r1, r5
 808b7d6:	f008 f9d2 	bl	8093b7e <memcpy>
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n ) {
    volatile mbedtls_mpi_uint *p = (mbedtls_mpi_uint *)v; while( n-- ) *p++ = 0;
 808b7da:	2300      	movs	r3, #0
 808b7dc:	f116 36ff 	adds.w	r6, r6, #4294967295
 808b7e0:	d302      	bcc.n	808b7e8 <mbedtls_mpi_grow+0x46>
 808b7e2:	602b      	str	r3, [r5, #0]
 808b7e4:	3504      	adds	r5, #4
 808b7e6:	e7f9      	b.n	808b7dc <mbedtls_mpi_grow+0x3a>

        if( X->p != NULL )
        {
            memcpy( p, X->p, X->n * ciL );
            mbedtls_mpi_zeroize( X->p, X->n );
            mbedtls_free( X->p );
 808b7e8:	68a0      	ldr	r0, [r4, #8]
 808b7ea:	f005 fea7 	bl	809153c <free>
        }

        X->n = nblimbs;
 808b7ee:	6067      	str	r7, [r4, #4]
        X->p = p;
 808b7f0:	f8c4 8008 	str.w	r8, [r4, #8]
    }

    return( 0 );
 808b7f4:	2000      	movs	r0, #0
}
 808b7f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808b7fa <mbedtls_mpi_copy>:
int mbedtls_mpi_copy( mbedtls_mpi *X, const mbedtls_mpi *Y )
{
    int ret;
    size_t i;

    if( X == Y )
 808b7fa:	4288      	cmp	r0, r1

/*
 * Copy the contents of Y into X
 */
int mbedtls_mpi_copy( mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 808b7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808b7fe:	4606      	mov	r6, r0
 808b800:	460f      	mov	r7, r1
    int ret;
    size_t i;

    if( X == Y )
 808b802:	d020      	beq.n	808b846 <mbedtls_mpi_copy+0x4c>
        return( 0 );

    if( Y->p == NULL )
 808b804:	688c      	ldr	r4, [r1, #8]
 808b806:	b914      	cbnz	r4, 808b80e <mbedtls_mpi_copy+0x14>
    {
        mbedtls_mpi_free( X );
 808b808:	f7ff ffb5 	bl	808b776 <mbedtls_mpi_free>
 808b80c:	e01d      	b.n	808b84a <mbedtls_mpi_copy+0x50>
        return( 0 );
    }

    for( i = Y->n - 1; i > 0; i-- )
 808b80e:	6849      	ldr	r1, [r1, #4]
 808b810:	3901      	subs	r1, #1
 808b812:	b119      	cbz	r1, 808b81c <mbedtls_mpi_copy+0x22>
        if( Y->p[i] != 0 )
 808b814:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
 808b818:	2b00      	cmp	r3, #0
 808b81a:	d0f9      	beq.n	808b810 <mbedtls_mpi_copy+0x16>
            break;
    i++;

    X->s = Y->s;
 808b81c:	683b      	ldr	r3, [r7, #0]
    }

    for( i = Y->n - 1; i > 0; i-- )
        if( Y->p[i] != 0 )
            break;
    i++;
 808b81e:	1c4d      	adds	r5, r1, #1

    X->s = Y->s;
 808b820:	6033      	str	r3, [r6, #0]

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
 808b822:	4629      	mov	r1, r5
 808b824:	4630      	mov	r0, r6
 808b826:	f7ff ffbc 	bl	808b7a2 <mbedtls_mpi_grow>
 808b82a:	4604      	mov	r4, r0
 808b82c:	b968      	cbnz	r0, 808b84a <mbedtls_mpi_copy+0x50>

    memset( X->p, 0, X->n * ciL );
 808b82e:	6872      	ldr	r2, [r6, #4]
 808b830:	4601      	mov	r1, r0
 808b832:	0092      	lsls	r2, r2, #2
 808b834:	68b0      	ldr	r0, [r6, #8]
 808b836:	f008 f9c8 	bl	8093bca <memset>
    memcpy( X->p, Y->p, i * ciL );
 808b83a:	00aa      	lsls	r2, r5, #2
 808b83c:	68b9      	ldr	r1, [r7, #8]
 808b83e:	68b0      	ldr	r0, [r6, #8]
 808b840:	f008 f99d 	bl	8093b7e <memcpy>
 808b844:	e001      	b.n	808b84a <mbedtls_mpi_copy+0x50>
{
    int ret;
    size_t i;

    if( X == Y )
        return( 0 );
 808b846:	2000      	movs	r0, #0
 808b848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808b84a:	4620      	mov	r0, r4
    memcpy( X->p, Y->p, i * ciL );

cleanup:

    return( ret );
}
 808b84c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808b84e <mbedtls_mpi_lset>:

/*
 * Set value from integer
 */
int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 808b84e:	b570      	push	{r4, r5, r6, lr}
 808b850:	460e      	mov	r6, r1
    int ret;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 808b852:	2101      	movs	r1, #1

/*
 * Set value from integer
 */
int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 808b854:	4604      	mov	r4, r0
    int ret;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 808b856:	f7ff ffa4 	bl	808b7a2 <mbedtls_mpi_grow>
 808b85a:	4605      	mov	r5, r0
 808b85c:	b988      	cbnz	r0, 808b882 <mbedtls_mpi_lset+0x34>
    memset( X->p, 0, X->n * ciL );
 808b85e:	6862      	ldr	r2, [r4, #4]
 808b860:	4601      	mov	r1, r0
 808b862:	0092      	lsls	r2, r2, #2
 808b864:	68a0      	ldr	r0, [r4, #8]
 808b866:	f008 f9b0 	bl	8093bca <memset>

    X->p[0] = ( z < 0 ) ? -z : z;
 808b86a:	68a3      	ldr	r3, [r4, #8]
 808b86c:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    X->s    = ( z < 0 ) ? -1 : 1;
 808b870:	2e00      	cmp	r6, #0
    int ret;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    memset( X->p, 0, X->n * ciL );

    X->p[0] = ( z < 0 ) ? -z : z;
 808b872:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
 808b876:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 808b878:	bfb4      	ite	lt
 808b87a:	f04f 33ff 	movlt.w	r3, #4294967295
 808b87e:	2301      	movge	r3, #1
 808b880:	6023      	str	r3, [r4, #0]

cleanup:

    return( ret );
}
 808b882:	4628      	mov	r0, r5
 808b884:	bd70      	pop	{r4, r5, r6, pc}

0808b886 <mbedtls_mpi_get_bit>:
/*
 * Get a specific bit
 */
int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )
{
    if( X->n * biL <= pos )
 808b886:	6843      	ldr	r3, [r0, #4]
 808b888:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
        return( 0 );

    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
 808b88c:	bf3f      	itttt	cc
 808b88e:	6883      	ldrcc	r3, [r0, #8]
 808b890:	094a      	lsrcc	r2, r1, #5
 808b892:	f853 3022 	ldrcc.w	r3, [r3, r2, lsl #2]
 808b896:	f001 001f 	andcc.w	r0, r1, #31
 808b89a:	bf3a      	itte	cc
 808b89c:	fa23 f000 	lsrcc.w	r0, r3, r0
 808b8a0:	f000 0001 	andcc.w	r0, r0, #1
 * Get a specific bit
 */
int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )
{
    if( X->n * biL <= pos )
        return( 0 );
 808b8a4:	2000      	movcs	r0, #0

    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
}
 808b8a6:	4770      	bx	lr

0808b8a8 <mbedtls_mpi_lsb>:
/*
 * Return the number of less significant zero-bits
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
    size_t i, j, count = 0;
 808b8a8:	2300      	movs	r3, #0

    for( i = 0; i < X->n; i++ )
 808b8aa:	461a      	mov	r2, r3

/*
 * Return the number of less significant zero-bits
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
 808b8ac:	b570      	push	{r4, r5, r6, lr}
    size_t i, j, count = 0;

    for( i = 0; i < X->n; i++ )
 808b8ae:	6844      	ldr	r4, [r0, #4]
 808b8b0:	42a2      	cmp	r2, r4
 808b8b2:	d00e      	beq.n	808b8d2 <mbedtls_mpi_lsb+0x2a>
        for( j = 0; j < biL; j++, count++ )
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 808b8b4:	6881      	ldr	r1, [r0, #8]
 808b8b6:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
 808b8ba:	2100      	movs	r1, #0
 808b8bc:	fa25 f601 	lsr.w	r6, r5, r1
 808b8c0:	07f6      	lsls	r6, r6, #31
 808b8c2:	d408      	bmi.n	808b8d6 <mbedtls_mpi_lsb+0x2e>
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
    size_t i, j, count = 0;

    for( i = 0; i < X->n; i++ )
        for( j = 0; j < biL; j++, count++ )
 808b8c4:	3101      	adds	r1, #1
 808b8c6:	2920      	cmp	r1, #32
 808b8c8:	f103 0301 	add.w	r3, r3, #1
 808b8cc:	d1f6      	bne.n	808b8bc <mbedtls_mpi_lsb+0x14>
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
    size_t i, j, count = 0;

    for( i = 0; i < X->n; i++ )
 808b8ce:	3201      	adds	r2, #1
 808b8d0:	e7ee      	b.n	808b8b0 <mbedtls_mpi_lsb+0x8>
        for( j = 0; j < biL; j++, count++ )
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
                return( count );

    return( 0 );
 808b8d2:	2000      	movs	r0, #0
 808b8d4:	bd70      	pop	{r4, r5, r6, pc}
 808b8d6:	4618      	mov	r0, r3
}
 808b8d8:	bd70      	pop	{r4, r5, r6, pc}

0808b8da <mbedtls_mpi_bitlen>:

/*
 * Return the number of bits
 */
size_t mbedtls_mpi_bitlen( const mbedtls_mpi *X )
{
 808b8da:	b510      	push	{r4, lr}
    size_t i, j;

    if( X->n == 0 )
 808b8dc:	6843      	ldr	r3, [r0, #4]
 808b8de:	b1d3      	cbz	r3, 808b916 <mbedtls_mpi_bitlen+0x3c>
 808b8e0:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 808b8e4:	3a01      	subs	r2, #1
        return( 0 );

    for( i = X->n - 1; i > 0; i-- )
 808b8e6:	1e59      	subs	r1, r3, #1
 808b8e8:	0092      	lsls	r2, r2, #2
 808b8ea:	6883      	ldr	r3, [r0, #8]
 808b8ec:	b121      	cbz	r1, 808b8f8 <mbedtls_mpi_bitlen+0x1e>
        if( X->p[i] != 0 )
 808b8ee:	589c      	ldr	r4, [r3, r2]
 808b8f0:	3a04      	subs	r2, #4
 808b8f2:	b90c      	cbnz	r4, 808b8f8 <mbedtls_mpi_bitlen+0x1e>
    size_t i, j;

    if( X->n == 0 )
        return( 0 );

    for( i = X->n - 1; i > 0; i-- )
 808b8f4:	3901      	subs	r1, #1
 808b8f6:	e7f8      	b.n	808b8ea <mbedtls_mpi_bitlen+0x10>
        if( X->p[i] != 0 )
            break;

    j = biL - mbedtls_clz( X->p[i] );
 808b8f8:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 * Count leading zero bits in a given integer
 */
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
 808b8fc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000

    for( j = 0; j < biL; j++ )
 808b900:	2300      	movs	r3, #0
    {
        if( x & mask ) break;
 808b902:	4210      	tst	r0, r2
 808b904:	d104      	bne.n	808b910 <mbedtls_mpi_bitlen+0x36>
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);

    for( j = 0; j < biL; j++ )
 808b906:	3301      	adds	r3, #1
 808b908:	2b20      	cmp	r3, #32
    {
        if( x & mask ) break;

        mask >>= 1;
 808b90a:	ea4f 0252 	mov.w	r2, r2, lsr #1
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);

    for( j = 0; j < biL; j++ )
 808b90e:	d1f8      	bne.n	808b902 <mbedtls_mpi_bitlen+0x28>
        if( X->p[i] != 0 )
            break;

    j = biL - mbedtls_clz( X->p[i] );

    return( ( i * biL ) + j );
 808b910:	ebc3 1341 	rsb	r3, r3, r1, lsl #5
 808b914:	3320      	adds	r3, #32
}
 808b916:	4618      	mov	r0, r3
 808b918:	bd10      	pop	{r4, pc}

0808b91a <mbedtls_mpi_size>:

/*
 * Return the total size in bytes
 */
size_t mbedtls_mpi_size( const mbedtls_mpi *X )
{
 808b91a:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
 808b91c:	f7ff ffdd 	bl	808b8da <mbedtls_mpi_bitlen>
 808b920:	3007      	adds	r0, #7
}
 808b922:	08c0      	lsrs	r0, r0, #3
 808b924:	bd08      	pop	{r3, pc}

0808b926 <mbedtls_mpi_read_binary>:

/*
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
 808b926:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808b928:	460d      	mov	r5, r1
    int ret;
    size_t i, j;
    size_t const limbs = CHARS_TO_LIMBS( buflen );
 808b92a:	f012 0103 	ands.w	r1, r2, #3
 808b92e:	bf18      	it	ne
 808b930:	2101      	movne	r1, #1

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 808b932:	6843      	ldr	r3, [r0, #4]
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
    int ret;
    size_t i, j;
    size_t const limbs = CHARS_TO_LIMBS( buflen );
 808b934:	eb01 0492 	add.w	r4, r1, r2, lsr #2

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 808b938:	429c      	cmp	r4, r3

/*
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
 808b93a:	4606      	mov	r6, r0
 808b93c:	4617      	mov	r7, r2
    int ret;
    size_t i, j;
    size_t const limbs = CHARS_TO_LIMBS( buflen );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 808b93e:	d105      	bne.n	808b94c <mbedtls_mpi_read_binary+0x26>
        mbedtls_mpi_free( X );
        mbedtls_mpi_init( X );
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 808b940:	2100      	movs	r1, #0
 808b942:	4630      	mov	r0, r6
 808b944:	f7ff ff83 	bl	808b84e <mbedtls_mpi_lset>
 808b948:	b160      	cbz	r0, 808b964 <mbedtls_mpi_read_binary+0x3e>
 808b94a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    size_t const limbs = CHARS_TO_LIMBS( buflen );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
    {
        mbedtls_mpi_free( X );
 808b94c:	f7ff ff13 	bl	808b776 <mbedtls_mpi_free>
        mbedtls_mpi_init( X );
 808b950:	4630      	mov	r0, r6
 808b952:	f7ff ff09 	bl	808b768 <mbedtls_mpi_init>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 808b956:	4621      	mov	r1, r4
 808b958:	4630      	mov	r0, r6
 808b95a:	f7ff ff22 	bl	808b7a2 <mbedtls_mpi_grow>
 808b95e:	2800      	cmp	r0, #0
 808b960:	d0ee      	beq.n	808b940 <mbedtls_mpi_read_binary+0x1a>
 808b962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 808b964:	4603      	mov	r3, r0
 808b966:	19e9      	adds	r1, r5, r7

    for( i = buflen, j = 0; i > 0; i--, j++ )
 808b968:	42bb      	cmp	r3, r7
 808b96a:	d010      	beq.n	808b98e <mbedtls_mpi_read_binary+0x68>
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);
 808b96c:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
 808b970:	68b2      	ldr	r2, [r6, #8]
 808b972:	00dc      	lsls	r4, r3, #3
 808b974:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 808b978:	f004 0418 	and.w	r4, r4, #24
 808b97c:	fa05 f404 	lsl.w	r4, r5, r4
 808b980:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    for( i = buflen, j = 0; i > 0; i--, j++ )
 808b984:	3301      	adds	r3, #1
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);
 808b986:	432c      	orrs	r4, r5
 808b988:	f842 402e 	str.w	r4, [r2, lr, lsl #2]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    for( i = buflen, j = 0; i > 0; i--, j++ )
 808b98c:	e7ec      	b.n	808b968 <mbedtls_mpi_read_binary+0x42>
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);

cleanup:

    return( ret );
}
 808b98e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808b990 <mbedtls_mpi_write_binary>:

/*
 * Export X into unsigned binary data, big endian
 */
int mbedtls_mpi_write_binary( const mbedtls_mpi *X, unsigned char *buf, size_t buflen )
{
 808b990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808b992:	4614      	mov	r4, r2
 808b994:	4605      	mov	r5, r0
 808b996:	460f      	mov	r7, r1
    size_t i, j, n;

    n = mbedtls_mpi_size( X );
 808b998:	f7ff ffbf 	bl	808b91a <mbedtls_mpi_size>

    if( buflen < n )
 808b99c:	42a0      	cmp	r0, r4
 */
int mbedtls_mpi_write_binary( const mbedtls_mpi *X, unsigned char *buf, size_t buflen )
{
    size_t i, j, n;

    n = mbedtls_mpi_size( X );
 808b99e:	4606      	mov	r6, r0

    if( buflen < n )
 808b9a0:	d814      	bhi.n	808b9cc <mbedtls_mpi_write_binary+0x3c>
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );

    memset( buf, 0, buflen );
 808b9a2:	4622      	mov	r2, r4
 808b9a4:	2100      	movs	r1, #0
 808b9a6:	4638      	mov	r0, r7
 808b9a8:	f008 f90f 	bl	8093bca <memset>
 808b9ac:	443c      	add	r4, r7

    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 808b9ae:	2300      	movs	r3, #0
 808b9b0:	42b3      	cmp	r3, r6
 808b9b2:	d00e      	beq.n	808b9d2 <mbedtls_mpi_write_binary+0x42>
        buf[i] = (unsigned char)( X->p[j / ciL] >> ((j % ciL) << 3) );
 808b9b4:	68a8      	ldr	r0, [r5, #8]
 808b9b6:	00da      	lsls	r2, r3, #3
 808b9b8:	089f      	lsrs	r7, r3, #2
 808b9ba:	f002 0118 	and.w	r1, r2, #24
 808b9be:	f850 2027 	ldr.w	r2, [r0, r7, lsl #2]
    if( buflen < n )
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );

    memset( buf, 0, buflen );

    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 808b9c2:	3301      	adds	r3, #1
        buf[i] = (unsigned char)( X->p[j / ciL] >> ((j % ciL) << 3) );
 808b9c4:	40ca      	lsrs	r2, r1
 808b9c6:	f804 2d01 	strb.w	r2, [r4, #-1]!
    if( buflen < n )
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );

    memset( buf, 0, buflen );

    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 808b9ca:	e7f1      	b.n	808b9b0 <mbedtls_mpi_write_binary+0x20>
    size_t i, j, n;

    n = mbedtls_mpi_size( X );

    if( buflen < n )
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
 808b9cc:	f06f 0007 	mvn.w	r0, #7
 808b9d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    memset( buf, 0, buflen );

    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
        buf[i] = (unsigned char)( X->p[j / ciL] >> ((j % ciL) << 3) );

    return( 0 );
 808b9d2:	2000      	movs	r0, #0
}
 808b9d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808b9d6 <mbedtls_mpi_shift_l>:

/*
 * Left-shift: X <<= count
 */
int mbedtls_mpi_shift_l( mbedtls_mpi *X, size_t count )
{
 808b9d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808b9d8:	4604      	mov	r4, r0
 808b9da:	460d      	mov	r5, r1
    int ret;
    size_t i, v0, t1;
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count / (biL    );
 808b9dc:	094e      	lsrs	r6, r1, #5
    t1 = count & (biL - 1);
 808b9de:	f001 071f 	and.w	r7, r1, #31

    i = mbedtls_mpi_bitlen( X ) + count;
 808b9e2:	f7ff ff7a 	bl	808b8da <mbedtls_mpi_bitlen>

    if( X->n * biL < i )
 808b9e6:	6863      	ldr	r3, [r4, #4]
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count / (biL    );
    t1 = count & (biL - 1);

    i = mbedtls_mpi_bitlen( X ) + count;
 808b9e8:	4428      	add	r0, r5

    if( X->n * biL < i )
 808b9ea:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
 808b9ee:	d809      	bhi.n	808ba04 <mbedtls_mpi_shift_l+0x2e>
    ret = 0;

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 808b9f0:	b346      	cbz	r6, 808ba44 <mbedtls_mpi_shift_l+0x6e>
    {
        for( i = X->n; i > v0; i-- )
 808b9f2:	6863      	ldr	r3, [r4, #4]
 808b9f4:	f06f 0103 	mvn.w	r1, #3
 808b9f8:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 808b9fc:	3a01      	subs	r2, #1
 808b9fe:	0092      	lsls	r2, r2, #2
 808ba00:	4371      	muls	r1, r6
 808ba02:	e00b      	b.n	808ba1c <mbedtls_mpi_shift_l+0x46>
    t1 = count & (biL - 1);

    i = mbedtls_mpi_bitlen( X ) + count;

    if( X->n * biL < i )
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 808ba04:	f010 011f 	ands.w	r1, r0, #31
 808ba08:	bf18      	it	ne
 808ba0a:	2101      	movne	r1, #1
 808ba0c:	eb01 1150 	add.w	r1, r1, r0, lsr #5
 808ba10:	4620      	mov	r0, r4
 808ba12:	f7ff fec6 	bl	808b7a2 <mbedtls_mpi_grow>
 808ba16:	2800      	cmp	r0, #0
 808ba18:	d0ea      	beq.n	808b9f0 <mbedtls_mpi_shift_l+0x1a>
 808ba1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
 808ba1c:	42b3      	cmp	r3, r6
 808ba1e:	d906      	bls.n	808ba2e <mbedtls_mpi_shift_l+0x58>
            X->p[i - 1] = X->p[i - v0 - 1];
 808ba20:	68a0      	ldr	r0, [r4, #8]
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
 808ba22:	3b01      	subs	r3, #1
            X->p[i - 1] = X->p[i - v0 - 1];
 808ba24:	1885      	adds	r5, r0, r2
 808ba26:	586d      	ldr	r5, [r5, r1]
 808ba28:	5085      	str	r5, [r0, r2]
 808ba2a:	3a04      	subs	r2, #4
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
 808ba2c:	e7f6      	b.n	808ba1c <mbedtls_mpi_shift_l+0x46>
 808ba2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 808ba32:	3b01      	subs	r3, #1
 808ba34:	009b      	lsls	r3, r3, #2
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
            X->p[i - 1] = 0;
 808ba36:	2100      	movs	r1, #0
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
 808ba38:	1d1a      	adds	r2, r3, #4
 808ba3a:	d003      	beq.n	808ba44 <mbedtls_mpi_shift_l+0x6e>
            X->p[i - 1] = 0;
 808ba3c:	68a2      	ldr	r2, [r4, #8]
 808ba3e:	50d1      	str	r1, [r2, r3]
 808ba40:	3b04      	subs	r3, #4
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
 808ba42:	e7f9      	b.n	808ba38 <mbedtls_mpi_shift_l+0x62>
    }

    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
 808ba44:	b90f      	cbnz	r7, 808ba4a <mbedtls_mpi_shift_l+0x74>
    i = mbedtls_mpi_bitlen( X ) + count;

    if( X->n * biL < i )
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );

    ret = 0;
 808ba46:	2000      	movs	r0, #0
 808ba48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808ba4a:	00b3      	lsls	r3, r6, #2
    }

    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
 808ba4c:	2200      	movs	r2, #0
    {
        for( i = v0; i < X->n; i++ )
        {
            r1 = X->p[i] >> (biL - t1);
 808ba4e:	f1c7 0e20 	rsb	lr, r7, #32
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
 808ba52:	6861      	ldr	r1, [r4, #4]
 808ba54:	428e      	cmp	r6, r1
 808ba56:	d2f6      	bcs.n	808ba46 <mbedtls_mpi_shift_l+0x70>
        {
            r1 = X->p[i] >> (biL - t1);
 808ba58:	68a0      	ldr	r0, [r4, #8]
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
 808ba5a:	3601      	adds	r6, #1
        {
            r1 = X->p[i] >> (biL - t1);
 808ba5c:	58c1      	ldr	r1, [r0, r3]
            X->p[i] <<= t1;
 808ba5e:	fa01 f507 	lsl.w	r5, r1, r7
 808ba62:	50c5      	str	r5, [r0, r3]
            X->p[i] |= r0;
 808ba64:	68a0      	ldr	r0, [r4, #8]
 808ba66:	58c5      	ldr	r5, [r0, r3]
 808ba68:	432a      	orrs	r2, r5
 808ba6a:	50c2      	str	r2, [r0, r3]
 808ba6c:	3304      	adds	r3, #4
            r0 = r1;
 808ba6e:	fa21 f20e 	lsr.w	r2, r1, lr
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
 808ba72:	e7ee      	b.n	808ba52 <mbedtls_mpi_shift_l+0x7c>

0808ba74 <mbedtls_mpi_shift_r>:

/*
 * Right-shift: X >>= count
 */
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
 808ba74:	b5f0      	push	{r4, r5, r6, r7, lr}
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count /  biL;
    v1 = count & (biL - 1);

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 808ba76:	6843      	ldr	r3, [r0, #4]
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count /  biL;
 808ba78:	094a      	lsrs	r2, r1, #5
    v1 = count & (biL - 1);

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 808ba7a:	429a      	cmp	r2, r3
{
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count /  biL;
    v1 = count & (biL - 1);
 808ba7c:	f001 011f 	and.w	r1, r1, #31

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 808ba80:	d801      	bhi.n	808ba86 <mbedtls_mpi_shift_r+0x12>
 808ba82:	d105      	bne.n	808ba90 <mbedtls_mpi_shift_r+0x1c>
 808ba84:	b159      	cbz	r1, 808ba9e <mbedtls_mpi_shift_r+0x2a>
            r0 = r1;
        }
    }

    return( 0 );
}
 808ba86:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

    v0 = count /  biL;
    v1 = count & (biL - 1);

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
        return mbedtls_mpi_lset( X, 0 );
 808ba8a:	2100      	movs	r1, #0
 808ba8c:	f7ff bedf 	b.w	808b84e <mbedtls_mpi_lset>

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 808ba90:	b1d2      	cbz	r2, 808bac8 <mbedtls_mpi_shift_r+0x54>
 808ba92:	2300      	movs	r3, #0
    {
        for( i = 0; i < X->n - v0; i++ )
 808ba94:	6844      	ldr	r4, [r0, #4]
 808ba96:	1aa4      	subs	r4, r4, r2
 808ba98:	42a3      	cmp	r3, r4
 808ba9a:	d305      	bcc.n	808baa8 <mbedtls_mpi_shift_r+0x34>
 808ba9c:	e001      	b.n	808baa2 <mbedtls_mpi_shift_r+0x2e>
        return mbedtls_mpi_lset( X, 0 );

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 808ba9e:	b35a      	cbz	r2, 808baf8 <mbedtls_mpi_shift_r+0x84>
 808baa0:	460b      	mov	r3, r1
 808baa2:	009a      	lsls	r2, r3, #2
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
            X->p[i] = 0;
 808baa4:	2500      	movs	r5, #0
 808baa6:	e007      	b.n	808bab8 <mbedtls_mpi_shift_r+0x44>
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];
 808baa8:	6884      	ldr	r4, [r0, #8]
 808baaa:	189d      	adds	r5, r3, r2
 808baac:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 808bab0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
 808bab4:	3301      	adds	r3, #1
 808bab6:	e7ed      	b.n	808ba94 <mbedtls_mpi_shift_r+0x20>
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
 808bab8:	6844      	ldr	r4, [r0, #4]
 808baba:	42a3      	cmp	r3, r4
 808babc:	d204      	bcs.n	808bac8 <mbedtls_mpi_shift_r+0x54>
            X->p[i] = 0;
 808babe:	6884      	ldr	r4, [r0, #8]
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
 808bac0:	3301      	adds	r3, #1
            X->p[i] = 0;
 808bac2:	50a5      	str	r5, [r4, r2]
 808bac4:	3204      	adds	r2, #4
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
 808bac6:	e7f7      	b.n	808bab8 <mbedtls_mpi_shift_r+0x44>
    }

    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
 808bac8:	b1b1      	cbz	r1, 808baf8 <mbedtls_mpi_shift_r+0x84>
    {
        for( i = X->n; i > 0; i-- )
 808baca:	6844      	ldr	r4, [r0, #4]
 * Right-shift: X >>= count
 */
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;
 808bacc:	2200      	movs	r2, #0
 808bace:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 808bad2:	3b01      	subs	r3, #1
 808bad4:	009b      	lsls	r3, r3, #2
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
        {
            r1 = X->p[i - 1] << (biL - v1);
 808bad6:	f1c1 0e20 	rsb	lr, r1, #32
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
 808bada:	b16c      	cbz	r4, 808baf8 <mbedtls_mpi_shift_r+0x84>
        {
            r1 = X->p[i - 1] << (biL - v1);
 808badc:	6886      	ldr	r6, [r0, #8]
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
 808bade:	3c01      	subs	r4, #1
        {
            r1 = X->p[i - 1] << (biL - v1);
 808bae0:	58f5      	ldr	r5, [r6, r3]
            X->p[i - 1] >>= v1;
 808bae2:	fa25 f701 	lsr.w	r7, r5, r1
 808bae6:	50f7      	str	r7, [r6, r3]
            X->p[i - 1] |= r0;
 808bae8:	6886      	ldr	r6, [r0, #8]
 808baea:	58f7      	ldr	r7, [r6, r3]
 808baec:	433a      	orrs	r2, r7
 808baee:	50f2      	str	r2, [r6, r3]
 808baf0:	3b04      	subs	r3, #4
            r0 = r1;
 808baf2:	fa05 f20e 	lsl.w	r2, r5, lr
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
 808baf6:	e7f0      	b.n	808bada <mbedtls_mpi_shift_r+0x66>
            r0 = r1;
        }
    }

    return( 0 );
}
 808baf8:	2000      	movs	r0, #0
 808bafa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808bafc <mbedtls_mpi_cmp_abs>:

/*
 * Compare unsigned values
 */
int mbedtls_mpi_cmp_abs( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 808bafc:	b570      	push	{r4, r5, r6, lr}
    size_t i, j;

    for( i = X->n; i > 0; i-- )
 808bafe:	6843      	ldr	r3, [r0, #4]
 808bb00:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 808bb04:	3a01      	subs	r2, #1
 808bb06:	0092      	lsls	r2, r2, #2
 808bb08:	b12b      	cbz	r3, 808bb16 <mbedtls_mpi_cmp_abs+0x1a>
        if( X->p[i - 1] != 0 )
 808bb0a:	6884      	ldr	r4, [r0, #8]
 808bb0c:	58a4      	ldr	r4, [r4, r2]
 808bb0e:	3a04      	subs	r2, #4
 808bb10:	b90c      	cbnz	r4, 808bb16 <mbedtls_mpi_cmp_abs+0x1a>
 */
int mbedtls_mpi_cmp_abs( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
    size_t i, j;

    for( i = X->n; i > 0; i-- )
 808bb12:	3b01      	subs	r3, #1
 808bb14:	e7f8      	b.n	808bb08 <mbedtls_mpi_cmp_abs+0xc>
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 808bb16:	684c      	ldr	r4, [r1, #4]
 808bb18:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 808bb1c:	3a01      	subs	r2, #1
 808bb1e:	0092      	lsls	r2, r2, #2
 808bb20:	b1c4      	cbz	r4, 808bb54 <mbedtls_mpi_cmp_abs+0x58>
        if( Y->p[j - 1] != 0 )
 808bb22:	688d      	ldr	r5, [r1, #8]
 808bb24:	58ae      	ldr	r6, [r5, r2]
 808bb26:	3a04      	subs	r2, #4
 808bb28:	b90e      	cbnz	r6, 808bb2e <mbedtls_mpi_cmp_abs+0x32>

    for( i = X->n; i > 0; i-- )
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 808bb2a:	3c01      	subs	r4, #1
 808bb2c:	e7f8      	b.n	808bb20 <mbedtls_mpi_cmp_abs+0x24>
            break;

    if( i == 0 && j == 0 )
        return( 0 );

    if( i > j ) return(  1 );
 808bb2e:	429c      	cmp	r4, r3
 808bb30:	d30b      	bcc.n	808bb4a <mbedtls_mpi_cmp_abs+0x4e>
    if( j > i ) return( -1 );
 808bb32:	d913      	bls.n	808bb5c <mbedtls_mpi_cmp_abs+0x60>
 808bb34:	e00b      	b.n	808bb4e <mbedtls_mpi_cmp_abs+0x52>
 808bb36:	f1a2 0204 	sub.w	r2, r2, #4

    for( ; i > 0; i-- )
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
 808bb3a:	d308      	bcc.n	808bb4e <mbedtls_mpi_cmp_abs+0x52>
        return( 0 );

    if( i > j ) return(  1 );
    if( j > i ) return( -1 );

    for( ; i > 0; i-- )
 808bb3c:	3b01      	subs	r3, #1
 808bb3e:	b193      	cbz	r3, 808bb66 <mbedtls_mpi_cmp_abs+0x6a>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
 808bb40:	6881      	ldr	r1, [r0, #8]
 808bb42:	588c      	ldr	r4, [r1, r2]
 808bb44:	58a9      	ldr	r1, [r5, r2]
 808bb46:	428c      	cmp	r4, r1
 808bb48:	d9f5      	bls.n	808bb36 <mbedtls_mpi_cmp_abs+0x3a>
            break;

    if( i == 0 && j == 0 )
        return( 0 );

    if( i > j ) return(  1 );
 808bb4a:	2001      	movs	r0, #1
 808bb4c:	bd70      	pop	{r4, r5, r6, pc}
    if( j > i ) return( -1 );
 808bb4e:	f04f 30ff 	mov.w	r0, #4294967295
 808bb52:	bd70      	pop	{r4, r5, r6, pc}
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
    }

    return( 0 );
 808bb54:	1c18      	adds	r0, r3, #0
 808bb56:	bf18      	it	ne
 808bb58:	2001      	movne	r0, #1
 808bb5a:	bd70      	pop	{r4, r5, r6, pc}
 808bb5c:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 808bb60:	3a01      	subs	r2, #1
 808bb62:	0092      	lsls	r2, r2, #2
 808bb64:	e7eb      	b.n	808bb3e <mbedtls_mpi_cmp_abs+0x42>
 808bb66:	4618      	mov	r0, r3
 808bb68:	bd70      	pop	{r4, r5, r6, pc}

0808bb6a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>:
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 808bb6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808bb6e:	4616      	mov	r6, r2
 808bb70:	b085      	sub	sp, #20
 808bb72:	9303      	str	r3, [sp, #12]
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 808bb74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 808bb76:	4681      	mov	r9, r0
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 808bb78:	685a      	ldr	r2, [r3, #4]
 808bb7a:	6873      	ldr	r3, [r6, #4]
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 808bb7c:	468b      	mov	fp, r1
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 808bb7e:	3301      	adds	r3, #1
 808bb80:	429a      	cmp	r2, r3
 808bb82:	d351      	bcc.n	808bc28 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xbe>
 808bb84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 808bb86:	6898      	ldr	r0, [r3, #8]
 808bb88:	2800      	cmp	r0, #0
 808bb8a:	d04d      	beq.n	808bc28 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xbe>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );
 808bb8c:	0092      	lsls	r2, r2, #2
 808bb8e:	2100      	movs	r1, #0
 808bb90:	f008 f81b 	bl	8093bca <memset>

    d = T->p;
 808bb94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    n = N->n;
 808bb96:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );

    d = T->p;
 808bb9a:	689b      	ldr	r3, [r3, #8]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
 808bb9c:	f10a 0701 	add.w	r7, sl, #1
    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );

    d = T->p;
 808bba0:	9300      	str	r3, [sp, #0]
    n = N->n;
    m = ( B->n < n ) ? B->n : n;
 808bba2:	f8db 3004 	ldr.w	r3, [fp, #4]
    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );

    d = T->p;
 808bba6:	9d00      	ldr	r5, [sp, #0]
 808bba8:	4553      	cmp	r3, sl
 808bbaa:	bf28      	it	cs
 808bbac:	4653      	movcs	r3, sl
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
 808bbae:	00bf      	lsls	r7, r7, #2
 808bbb0:	9302      	str	r3, [sp, #8]

    d = T->p;
    n = N->n;
    m = ( B->n < n ) ? B->n : n;

    for( i = 0; i < n; i++ )
 808bbb2:	2400      	movs	r4, #0
 808bbb4:	4554      	cmp	r4, sl
 808bbb6:	f8d9 0008 	ldr.w	r0, [r9, #8]
 808bbba:	d01b      	beq.n	808bbf4 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0x8a>
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 808bbbc:	f8db 1008 	ldr.w	r1, [fp, #8]
    for( i = 0; i < n; i++ )
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
 808bbc0:	f850 8024 	ldr.w	r8, [r0, r4, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 808bbc4:	682a      	ldr	r2, [r5, #0]
 808bbc6:	680b      	ldr	r3, [r1, #0]

        mpi_mul_hlp( m, B->p, d, u0 );
 808bbc8:	9802      	ldr	r0, [sp, #8]
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 808bbca:	fb03 2308 	mla	r3, r3, r8, r2
 808bbce:	9a03      	ldr	r2, [sp, #12]

    d = T->p;
    n = N->n;
    m = ( B->n < n ) ? B->n : n;

    for( i = 0; i < n; i++ )
 808bbd0:	3401      	adds	r4, #1
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 808bbd2:	4353      	muls	r3, r2

        mpi_mul_hlp( m, B->p, d, u0 );
 808bbd4:	462a      	mov	r2, r5
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 808bbd6:	9301      	str	r3, [sp, #4]

        mpi_mul_hlp( m, B->p, d, u0 );
 808bbd8:	4643      	mov	r3, r8
 808bbda:	f7ff fbf9 	bl	808b3d0 <_ZL11mpi_mul_hlpjPmS_m>
        mpi_mul_hlp( n, N->p, d, u1 );
 808bbde:	9b01      	ldr	r3, [sp, #4]
 808bbe0:	462a      	mov	r2, r5
 808bbe2:	68b1      	ldr	r1, [r6, #8]
 808bbe4:	4650      	mov	r0, sl
 808bbe6:	f7ff fbf3 	bl	808b3d0 <_ZL11mpi_mul_hlpjPmS_m>

        *d++ = u0; d[n + 1] = 0;
 808bbea:	f845 8b04 	str.w	r8, [r5], #4
 808bbee:	2300      	movs	r3, #0
 808bbf0:	51eb      	str	r3, [r5, r7]

    d = T->p;
    n = N->n;
    m = ( B->n < n ) ? B->n : n;

    for( i = 0; i < n; i++ )
 808bbf2:	e7df      	b.n	808bbb4 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0x4a>
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );
 808bbf4:	9b00      	ldr	r3, [sp, #0]
 808bbf6:	1f39      	subs	r1, r7, #4
 808bbf8:	440b      	add	r3, r1
 808bbfa:	463a      	mov	r2, r7
 808bbfc:	4619      	mov	r1, r3
 808bbfe:	f007 ffbe 	bl	8093b7e <memcpy>

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
 808bc02:	4631      	mov	r1, r6
 808bc04:	4648      	mov	r0, r9
 808bc06:	f7ff ff79 	bl	808bafc <mbedtls_mpi_cmp_abs>
 808bc0a:	2800      	cmp	r0, #0
        mpi_sub_hlp( n, N->p, A->p );
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
 808bc0c:	bfb8      	it	lt
 808bc0e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 808bc10:	4620      	mov	r0, r4
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
        mpi_sub_hlp( n, N->p, A->p );
 808bc12:	bfa7      	ittee	ge
 808bc14:	f8d9 2008 	ldrge.w	r2, [r9, #8]
 808bc18:	68b1      	ldrge	r1, [r6, #8]
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
 808bc1a:	689a      	ldrlt	r2, [r3, #8]
 808bc1c:	f8d9 1008 	ldrlt.w	r1, [r9, #8]
 808bc20:	f7ff fbac 	bl	808b37c <_ZL11mpi_sub_hlpjPmS_>

    return( 0 );
 808bc24:	2000      	movs	r0, #0
 808bc26:	e001      	b.n	808bc2c <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xc2>
{
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 808bc28:	f06f 0003 	mvn.w	r0, #3
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );

    return( 0 );
}
 808bc2c:	b005      	add	sp, #20
 808bc2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808bc32 <mbedtls_mpi_cmp_mpi>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 808bc32:	b570      	push	{r4, r5, r6, lr}
    size_t i, j;

    for( i = X->n; i > 0; i-- )
 808bc34:	6843      	ldr	r3, [r0, #4]
 808bc36:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 808bc3a:	3a01      	subs	r2, #1
 808bc3c:	0092      	lsls	r2, r2, #2
 808bc3e:	b12b      	cbz	r3, 808bc4c <mbedtls_mpi_cmp_mpi+0x1a>
        if( X->p[i - 1] != 0 )
 808bc40:	6884      	ldr	r4, [r0, #8]
 808bc42:	58a4      	ldr	r4, [r4, r2]
 808bc44:	3a04      	subs	r2, #4
 808bc46:	b90c      	cbnz	r4, 808bc4c <mbedtls_mpi_cmp_mpi+0x1a>
 */
int mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
    size_t i, j;

    for( i = X->n; i > 0; i-- )
 808bc48:	3b01      	subs	r3, #1
 808bc4a:	e7f8      	b.n	808bc3e <mbedtls_mpi_cmp_mpi+0xc>
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 808bc4c:	684c      	ldr	r4, [r1, #4]
 808bc4e:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 808bc52:	3a01      	subs	r2, #1
 808bc54:	0092      	lsls	r2, r2, #2
 808bc56:	b364      	cbz	r4, 808bcb2 <mbedtls_mpi_cmp_mpi+0x80>
        if( Y->p[j - 1] != 0 )
 808bc58:	688d      	ldr	r5, [r1, #8]
 808bc5a:	58ae      	ldr	r6, [r5, r2]
 808bc5c:	3a04      	subs	r2, #4
 808bc5e:	b90e      	cbnz	r6, 808bc64 <mbedtls_mpi_cmp_mpi+0x32>

    for( i = X->n; i > 0; i-- )
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 808bc60:	3c01      	subs	r4, #1
 808bc62:	e7f8      	b.n	808bc56 <mbedtls_mpi_cmp_mpi+0x24>
            break;

    if( i == 0 && j == 0 )
        return( 0 );

    if( i > j ) return(  X->s );
 808bc64:	429c      	cmp	r4, r3
 808bc66:	d201      	bcs.n	808bc6c <mbedtls_mpi_cmp_mpi+0x3a>
 808bc68:	6802      	ldr	r2, [r0, #0]
 808bc6a:	e025      	b.n	808bcb8 <mbedtls_mpi_cmp_mpi+0x86>
 808bc6c:	6809      	ldr	r1, [r1, #0]
    if( j > i ) return( -Y->s );
 808bc6e:	d901      	bls.n	808bc74 <mbedtls_mpi_cmp_mpi+0x42>
 808bc70:	424a      	negs	r2, r1
 808bc72:	e021      	b.n	808bcb8 <mbedtls_mpi_cmp_mpi+0x86>

    if( X->s > 0 && Y->s < 0 ) return(  1 );
 808bc74:	6802      	ldr	r2, [r0, #0]
 808bc76:	2a00      	cmp	r2, #0
 808bc78:	dd01      	ble.n	808bc7e <mbedtls_mpi_cmp_mpi+0x4c>
 808bc7a:	2900      	cmp	r1, #0
 808bc7c:	db14      	blt.n	808bca8 <mbedtls_mpi_cmp_mpi+0x76>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 808bc7e:	2900      	cmp	r1, #0
 808bc80:	dd01      	ble.n	808bc86 <mbedtls_mpi_cmp_mpi+0x54>
 808bc82:	2a00      	cmp	r2, #0
 808bc84:	db12      	blt.n	808bcac <mbedtls_mpi_cmp_mpi+0x7a>
 808bc86:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
 808bc8a:	3901      	subs	r1, #1
 808bc8c:	0089      	lsls	r1, r1, #2

    for( ; i > 0; i-- )
 808bc8e:	b193      	cbz	r3, 808bcb6 <mbedtls_mpi_cmp_mpi+0x84>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 808bc90:	6884      	ldr	r4, [r0, #8]
 808bc92:	5866      	ldr	r6, [r4, r1]
 808bc94:	586c      	ldr	r4, [r5, r1]
 808bc96:	42a6      	cmp	r6, r4
 808bc98:	d80e      	bhi.n	808bcb8 <mbedtls_mpi_cmp_mpi+0x86>
 808bc9a:	f1a1 0104 	sub.w	r1, r1, #4
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 808bc9e:	d201      	bcs.n	808bca4 <mbedtls_mpi_cmp_mpi+0x72>
 808bca0:	4252      	negs	r2, r2
 808bca2:	e009      	b.n	808bcb8 <mbedtls_mpi_cmp_mpi+0x86>
    if( j > i ) return( -Y->s );

    if( X->s > 0 && Y->s < 0 ) return(  1 );
    if( Y->s > 0 && X->s < 0 ) return( -1 );

    for( ; i > 0; i-- )
 808bca4:	3b01      	subs	r3, #1
 808bca6:	e7f2      	b.n	808bc8e <mbedtls_mpi_cmp_mpi+0x5c>
        return( 0 );

    if( i > j ) return(  X->s );
    if( j > i ) return( -Y->s );

    if( X->s > 0 && Y->s < 0 ) return(  1 );
 808bca8:	2201      	movs	r2, #1
 808bcaa:	e005      	b.n	808bcb8 <mbedtls_mpi_cmp_mpi+0x86>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 808bcac:	f04f 32ff 	mov.w	r2, #4294967295
 808bcb0:	e002      	b.n	808bcb8 <mbedtls_mpi_cmp_mpi+0x86>

    for( j = Y->n; j > 0; j-- )
        if( Y->p[j - 1] != 0 )
            break;

    if( i == 0 && j == 0 )
 808bcb2:	2b00      	cmp	r3, #0
 808bcb4:	d1d8      	bne.n	808bc68 <mbedtls_mpi_cmp_mpi+0x36>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    }

    return( 0 );
 808bcb6:	461a      	mov	r2, r3
}
 808bcb8:	4610      	mov	r0, r2
 808bcba:	bd70      	pop	{r4, r5, r6, pc}

0808bcbc <mbedtls_mpi_cmp_int>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_int( const mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 808bcbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];

    *p  = ( z < 0 ) ? -z : z;
 808bcbe:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
 808bcc2:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
 808bcc6:	2900      	cmp	r1, #0
int mbedtls_mpi_cmp_int( const mbedtls_mpi *X, mbedtls_mpi_sint z )
{
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];

    *p  = ( z < 0 ) ? -z : z;
 808bcc8:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
 808bcca:	bfb4      	ite	lt
 808bccc:	f04f 33ff 	movlt.w	r3, #4294967295
 808bcd0:	2301      	movge	r3, #1
 808bcd2:	9301      	str	r3, [sp, #4]
    Y.n = 1;
    Y.p = p;

    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 808bcd4:	a901      	add	r1, sp, #4
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];

    *p  = ( z < 0 ) ? -z : z;
    Y.s = ( z < 0 ) ? -1 : 1;
    Y.n = 1;
 808bcd6:	2301      	movs	r3, #1
 808bcd8:	9302      	str	r3, [sp, #8]
    Y.p = p;
 808bcda:	f8cd d00c 	str.w	sp, [sp, #12]

    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 808bcde:	f7ff ffa8 	bl	808bc32 <mbedtls_mpi_cmp_mpi>
}
 808bce2:	b005      	add	sp, #20
 808bce4:	f85d fb04 	ldr.w	pc, [sp], #4

0808bce8 <mbedtls_mpi_add_abs>:
{
    int ret;
    size_t i, j;
    mbedtls_mpi_uint *o, *p, c, tmp;

    if( X == B )
 808bce8:	4290      	cmp	r0, r2

/*
 * Unsigned addition: X = |A| + |B|  (HAC 14.7)
 */
int mbedtls_mpi_add_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808bcea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808bcee:	4606      	mov	r6, r0
 808bcf0:	4615      	mov	r5, r2
    int ret;
    size_t i, j;
    mbedtls_mpi_uint *o, *p, c, tmp;

    if( X == B )
 808bcf2:	d006      	beq.n	808bd02 <mbedtls_mpi_add_abs+0x1a>
    {
        const mbedtls_mpi *T = A; A = X; B = T;
    }

    if( X != A )
 808bcf4:	4288      	cmp	r0, r1
 808bcf6:	d005      	beq.n	808bd04 <mbedtls_mpi_add_abs+0x1c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 808bcf8:	f7ff fd7f 	bl	808b7fa <mbedtls_mpi_copy>
 808bcfc:	4607      	mov	r7, r0
 808bcfe:	b108      	cbz	r0, 808bd04 <mbedtls_mpi_add_abs+0x1c>
 808bd00:	e049      	b.n	808bd96 <mbedtls_mpi_add_abs+0xae>
 808bd02:	460d      	mov	r5, r1

    /*
     * X should always be positive as a result of unsigned additions.
     */
    X->s = 1;
 808bd04:	2301      	movs	r3, #1
 808bd06:	6033      	str	r3, [r6, #0]

    for( j = B->n; j > 0; j-- )
 808bd08:	686c      	ldr	r4, [r5, #4]
 808bd0a:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 808bd0e:	3b01      	subs	r3, #1
 808bd10:	009b      	lsls	r3, r3, #2
 808bd12:	b12c      	cbz	r4, 808bd20 <mbedtls_mpi_add_abs+0x38>
        if( B->p[j - 1] != 0 )
 808bd14:	68aa      	ldr	r2, [r5, #8]
 808bd16:	58d2      	ldr	r2, [r2, r3]
 808bd18:	3b04      	subs	r3, #4
 808bd1a:	b90a      	cbnz	r2, 808bd20 <mbedtls_mpi_add_abs+0x38>
    /*
     * X should always be positive as a result of unsigned additions.
     */
    X->s = 1;

    for( j = B->n; j > 0; j-- )
 808bd1c:	3c01      	subs	r4, #1
 808bd1e:	e7f8      	b.n	808bd12 <mbedtls_mpi_add_abs+0x2a>
        if( B->p[j - 1] != 0 )
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 808bd20:	4621      	mov	r1, r4
 808bd22:	4630      	mov	r0, r6
 808bd24:	f7ff fd3d 	bl	808b7a2 <mbedtls_mpi_grow>
 808bd28:	4607      	mov	r7, r0
 808bd2a:	2800      	cmp	r0, #0
 808bd2c:	d133      	bne.n	808bd96 <mbedtls_mpi_add_abs+0xae>

    o = B->p; p = X->p; c = 0;
 808bd2e:	68b3      	ldr	r3, [r6, #8]
 808bd30:	f8d5 c008 	ldr.w	ip, [r5, #8]
 808bd34:	4618      	mov	r0, r3
 808bd36:	463d      	mov	r5, r7

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
 808bd38:	4639      	mov	r1, r7
 808bd3a:	42a1      	cmp	r1, r4
 808bd3c:	d00f      	beq.n	808bd5e <mbedtls_mpi_add_abs+0x76>
    {
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
 808bd3e:	6802      	ldr	r2, [r0, #0]
    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
    {
        tmp= *o;
 808bd40:	f85c e021 	ldr.w	lr, [ip, r1, lsl #2]
        *p +=  c; c  = ( *p <  c );
 808bd44:	18ad      	adds	r5, r5, r2
        *p += tmp; c += ( *p < tmp );
 808bd46:	4475      	add	r5, lr
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
    {
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
 808bd48:	bf2c      	ite	cs
 808bd4a:	2201      	movcs	r2, #1
 808bd4c:	2200      	movcc	r2, #0
        *p += tmp; c += ( *p < tmp );
 808bd4e:	f840 5b04 	str.w	r5, [r0], #4
    o = B->p; p = X->p; c = 0;

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
 808bd52:	3101      	adds	r1, #1
    {
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
 808bd54:	45ae      	cmp	lr, r5
 808bd56:	bf94      	ite	ls
 808bd58:	4615      	movls	r5, r2
 808bd5a:	1c55      	addhi	r5, r2, #1
    o = B->p; p = X->p; c = 0;

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
 808bd5c:	e7ed      	b.n	808bd3a <mbedtls_mpi_add_abs+0x52>
 808bd5e:	ea4f 0884 	mov.w	r8, r4, lsl #2
 808bd62:	4443      	add	r3, r8
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
    }

    while( c != 0 )
 808bd64:	b1bd      	cbz	r5, 808bd96 <mbedtls_mpi_add_abs+0xae>
    {
        if( i >= X->n )
 808bd66:	6872      	ldr	r2, [r6, #4]
 808bd68:	4294      	cmp	r4, r2
 808bd6a:	f104 0401 	add.w	r4, r4, #1
 808bd6e:	d306      	bcc.n	808bd7e <mbedtls_mpi_add_abs+0x96>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 808bd70:	4621      	mov	r1, r4
 808bd72:	4630      	mov	r0, r6
 808bd74:	f7ff fd15 	bl	808b7a2 <mbedtls_mpi_grow>
 808bd78:	b960      	cbnz	r0, 808bd94 <mbedtls_mpi_add_abs+0xac>
            p = X->p + i;
 808bd7a:	68b3      	ldr	r3, [r6, #8]
 808bd7c:	4443      	add	r3, r8
        }

        *p += c; c = ( *p < c ); i++; p++;
 808bd7e:	681a      	ldr	r2, [r3, #0]
 808bd80:	f108 0804 	add.w	r8, r8, #4
 808bd84:	442a      	add	r2, r5
 808bd86:	4295      	cmp	r5, r2
 808bd88:	f843 2b04 	str.w	r2, [r3], #4
 808bd8c:	bf94      	ite	ls
 808bd8e:	2500      	movls	r5, #0
 808bd90:	2501      	movhi	r5, #1
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
    }

    while( c != 0 )
 808bd92:	e7e7      	b.n	808bd64 <mbedtls_mpi_add_abs+0x7c>
    {
        if( i >= X->n )
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 808bd94:	4607      	mov	r7, r0
    }

cleanup:

    return( ret );
}
 808bd96:	4638      	mov	r0, r7
 808bd98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808bd9c <mbedtls_mpi_sub_abs>:

/*
 * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)
 */
int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808bd9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808bd9e:	460f      	mov	r7, r1
 808bda0:	b085      	sub	sp, #20
 808bda2:	4606      	mov	r6, r0
    mbedtls_mpi TB;
    int ret;
    size_t n;

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 808bda4:	4611      	mov	r1, r2
 808bda6:	4638      	mov	r0, r7

/*
 * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)
 */
int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808bda8:	4615      	mov	r5, r2
    mbedtls_mpi TB;
    int ret;
    size_t n;

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 808bdaa:	f7ff fea7 	bl	808bafc <mbedtls_mpi_cmp_abs>
 808bdae:	2800      	cmp	r0, #0
 808bdb0:	db30      	blt.n	808be14 <mbedtls_mpi_sub_abs+0x78>
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808bdb2:	2301      	movs	r3, #1
 808bdb4:	9301      	str	r3, [sp, #4]
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    mbedtls_mpi_init( &TB );

    if( X == B )
 808bdb6:	42b5      	cmp	r5, r6
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808bdb8:	f04f 0300 	mov.w	r3, #0
 808bdbc:	9302      	str	r3, [sp, #8]
    X->p = NULL;
 808bdbe:	9303      	str	r3, [sp, #12]
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    mbedtls_mpi_init( &TB );

    if( X == B )
 808bdc0:	d106      	bne.n	808bdd0 <mbedtls_mpi_sub_abs+0x34>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 808bdc2:	4629      	mov	r1, r5
 808bdc4:	a801      	add	r0, sp, #4
 808bdc6:	f7ff fd18 	bl	808b7fa <mbedtls_mpi_copy>
 808bdca:	4604      	mov	r4, r0
 808bdcc:	b9e8      	cbnz	r0, 808be0a <mbedtls_mpi_sub_abs+0x6e>
        B = &TB;
 808bdce:	ad01      	add	r5, sp, #4
    }

    if( X != A )
 808bdd0:	42b7      	cmp	r7, r6
 808bdd2:	d107      	bne.n	808bde4 <mbedtls_mpi_sub_abs+0x48>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );

    /*
     * X should always be positive as a result of unsigned subtractions.
     */
    X->s = 1;
 808bdd4:	2301      	movs	r3, #1
 808bdd6:	6033      	str	r3, [r6, #0]

    ret = 0;

    for( n = B->n; n > 0; n-- )
 808bdd8:	6868      	ldr	r0, [r5, #4]
 808bdda:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 808bdde:	3b01      	subs	r3, #1
 808bde0:	009b      	lsls	r3, r3, #2
 808bde2:	e00b      	b.n	808bdfc <mbedtls_mpi_sub_abs+0x60>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
        B = &TB;
    }

    if( X != A )
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 808bde4:	4639      	mov	r1, r7
 808bde6:	4630      	mov	r0, r6
 808bde8:	f7ff fd07 	bl	808b7fa <mbedtls_mpi_copy>
 808bdec:	4604      	mov	r4, r0
 808bdee:	b960      	cbnz	r0, 808be0a <mbedtls_mpi_sub_abs+0x6e>
 808bdf0:	e7f0      	b.n	808bdd4 <mbedtls_mpi_sub_abs+0x38>
    X->s = 1;

    ret = 0;

    for( n = B->n; n > 0; n-- )
        if( B->p[n - 1] != 0 )
 808bdf2:	68aa      	ldr	r2, [r5, #8]
 808bdf4:	58d2      	ldr	r2, [r2, r3]
 808bdf6:	3b04      	subs	r3, #4
 808bdf8:	b912      	cbnz	r2, 808be00 <mbedtls_mpi_sub_abs+0x64>
     */
    X->s = 1;

    ret = 0;

    for( n = B->n; n > 0; n-- )
 808bdfa:	3801      	subs	r0, #1
 808bdfc:	2800      	cmp	r0, #0
 808bdfe:	d1f8      	bne.n	808bdf2 <mbedtls_mpi_sub_abs+0x56>
        if( B->p[n - 1] != 0 )
            break;

    mpi_sub_hlp( n, B->p, X->p );
 808be00:	68b2      	ldr	r2, [r6, #8]
 808be02:	68a9      	ldr	r1, [r5, #8]
 808be04:	f7ff faba 	bl	808b37c <_ZL11mpi_sub_hlpjPmS_>
    /*
     * X should always be positive as a result of unsigned subtractions.
     */
    X->s = 1;

    ret = 0;
 808be08:	2400      	movs	r4, #0

    mpi_sub_hlp( n, B->p, X->p );

cleanup:

    mbedtls_mpi_free( &TB );
 808be0a:	a801      	add	r0, sp, #4
 808be0c:	f7ff fcb3 	bl	808b776 <mbedtls_mpi_free>

    return( ret );
 808be10:	4620      	mov	r0, r4
 808be12:	e001      	b.n	808be18 <mbedtls_mpi_sub_abs+0x7c>
    mbedtls_mpi TB;
    int ret;
    size_t n;

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 808be14:	f06f 0009 	mvn.w	r0, #9
cleanup:

    mbedtls_mpi_free( &TB );

    return( ret );
}
 808be18:	b005      	add	sp, #20
 808be1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808be1c <mbedtls_mpi_add_mpi>:

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808be1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s = A->s;
 808be1e:	680c      	ldr	r4, [r1, #0]

    if( A->s * B->s < 0 )
 808be20:	6813      	ldr	r3, [r2, #0]

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808be22:	4605      	mov	r5, r0
    int ret, s = A->s;

    if( A->s * B->s < 0 )
 808be24:	4363      	muls	r3, r4

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808be26:	460f      	mov	r7, r1
 808be28:	4616      	mov	r6, r2
    int ret, s = A->s;

    if( A->s * B->s < 0 )
 808be2a:	d513      	bpl.n	808be54 <mbedtls_mpi_add_mpi+0x38>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 808be2c:	4611      	mov	r1, r2
 808be2e:	4638      	mov	r0, r7
 808be30:	f7ff fe64 	bl	808bafc <mbedtls_mpi_cmp_abs>
 808be34:	2800      	cmp	r0, #0
 808be36:	db05      	blt.n	808be44 <mbedtls_mpi_add_mpi+0x28>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 808be38:	4632      	mov	r2, r6
 808be3a:	4639      	mov	r1, r7
 808be3c:	4628      	mov	r0, r5
 808be3e:	f7ff ffad 	bl	808bd9c <mbedtls_mpi_sub_abs>
 808be42:	e009      	b.n	808be58 <mbedtls_mpi_add_mpi+0x3c>
            X->s =  s;
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 808be44:	463a      	mov	r2, r7
 808be46:	4631      	mov	r1, r6
 808be48:	4628      	mov	r0, r5
 808be4a:	f7ff ffa7 	bl	808bd9c <mbedtls_mpi_sub_abs>
 808be4e:	b928      	cbnz	r0, 808be5c <mbedtls_mpi_add_mpi+0x40>
            X->s = -s;
 808be50:	4264      	negs	r4, r4
 808be52:	e002      	b.n	808be5a <mbedtls_mpi_add_mpi+0x3e>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 808be54:	f7ff ff48 	bl	808bce8 <mbedtls_mpi_add_abs>
 808be58:	b900      	cbnz	r0, 808be5c <mbedtls_mpi_add_mpi+0x40>
        X->s = s;
 808be5a:	602c      	str	r4, [r5, #0]
    }

cleanup:

    return( ret );
}
 808be5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808be5e <mbedtls_mpi_sub_mpi>:

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808be5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s = A->s;
 808be60:	680c      	ldr	r4, [r1, #0]

    if( A->s * B->s > 0 )
 808be62:	6813      	ldr	r3, [r2, #0]

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808be64:	4605      	mov	r5, r0
    int ret, s = A->s;

    if( A->s * B->s > 0 )
 808be66:	4363      	muls	r3, r4
 808be68:	2b00      	cmp	r3, #0

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808be6a:	460f      	mov	r7, r1
 808be6c:	4616      	mov	r6, r2
    int ret, s = A->s;

    if( A->s * B->s > 0 )
 808be6e:	dd13      	ble.n	808be98 <mbedtls_mpi_sub_mpi+0x3a>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 808be70:	4611      	mov	r1, r2
 808be72:	4638      	mov	r0, r7
 808be74:	f7ff fe42 	bl	808bafc <mbedtls_mpi_cmp_abs>
 808be78:	2800      	cmp	r0, #0
 808be7a:	db05      	blt.n	808be88 <mbedtls_mpi_sub_mpi+0x2a>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 808be7c:	4632      	mov	r2, r6
 808be7e:	4639      	mov	r1, r7
 808be80:	4628      	mov	r0, r5
 808be82:	f7ff ff8b 	bl	808bd9c <mbedtls_mpi_sub_abs>
 808be86:	e009      	b.n	808be9c <mbedtls_mpi_sub_mpi+0x3e>
            X->s =  s;
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 808be88:	463a      	mov	r2, r7
 808be8a:	4631      	mov	r1, r6
 808be8c:	4628      	mov	r0, r5
 808be8e:	f7ff ff85 	bl	808bd9c <mbedtls_mpi_sub_abs>
 808be92:	b928      	cbnz	r0, 808bea0 <mbedtls_mpi_sub_mpi+0x42>
            X->s = -s;
 808be94:	4264      	negs	r4, r4
 808be96:	e002      	b.n	808be9e <mbedtls_mpi_sub_mpi+0x40>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 808be98:	f7ff ff26 	bl	808bce8 <mbedtls_mpi_add_abs>
 808be9c:	b900      	cbnz	r0, 808bea0 <mbedtls_mpi_sub_mpi+0x42>
        X->s = s;
 808be9e:	602c      	str	r4, [r5, #0]
    }

cleanup:

    return( ret );
}
 808bea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808bea2 <mbedtls_mpi_add_int>:

/*
 * Signed addition: X = A + b
 */
int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 808bea2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
 808bea4:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 808bea8:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
 808beac:	2a00      	cmp	r2, #0
int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
 808beae:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
 808beb0:	bfb4      	ite	lt
 808beb2:	f04f 33ff 	movlt.w	r3, #4294967295
 808beb6:	2301      	movge	r3, #1
 808beb8:	9301      	str	r3, [sp, #4]
    _B.n = 1;
    _B.p = p;

    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 808beba:	aa01      	add	r2, sp, #4
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
    _B.s = ( b < 0 ) ? -1 : 1;
    _B.n = 1;
 808bebc:	2301      	movs	r3, #1
 808bebe:	9302      	str	r3, [sp, #8]
    _B.p = p;
 808bec0:	f8cd d00c 	str.w	sp, [sp, #12]

    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 808bec4:	f7ff ffaa 	bl	808be1c <mbedtls_mpi_add_mpi>
}
 808bec8:	b005      	add	sp, #20
 808beca:	f85d fb04 	ldr.w	pc, [sp], #4

0808bece <mbedtls_mpi_sub_int>:

/*
 * Signed subtraction: X = A - b
 */
int mbedtls_mpi_sub_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 808bece:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
 808bed0:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 808bed4:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
 808bed8:	2a00      	cmp	r2, #0
int mbedtls_mpi_sub_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
 808beda:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
 808bedc:	bfb4      	ite	lt
 808bede:	f04f 33ff 	movlt.w	r3, #4294967295
 808bee2:	2301      	movge	r3, #1
 808bee4:	9301      	str	r3, [sp, #4]
    _B.n = 1;
    _B.p = p;

    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 808bee6:	aa01      	add	r2, sp, #4
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
    _B.s = ( b < 0 ) ? -1 : 1;
    _B.n = 1;
 808bee8:	2301      	movs	r3, #1
 808beea:	9302      	str	r3, [sp, #8]
    _B.p = p;
 808beec:	f8cd d00c 	str.w	sp, [sp, #12]

    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 808bef0:	f7ff ffb5 	bl	808be5e <mbedtls_mpi_sub_mpi>
}
 808bef4:	b005      	add	sp, #20
 808bef6:	f85d fb04 	ldr.w	pc, [sp], #4

0808befa <mbedtls_mpi_mul_mpi>:

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808befa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808befe:	2300      	movs	r3, #0

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808bf00:	b086      	sub	sp, #24
 808bf02:	4615      	mov	r5, r2
    size_t i, j;
    mbedtls_mpi TA, TB;

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 808bf04:	4288      	cmp	r0, r1
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808bf06:	f04f 0201 	mov.w	r2, #1

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808bf0a:	4681      	mov	r9, r0
 808bf0c:	460e      	mov	r6, r1
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808bf0e:	e88d 000c 	stmia.w	sp, {r2, r3}
    X->p = NULL;
 808bf12:	9302      	str	r3, [sp, #8]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808bf14:	9203      	str	r2, [sp, #12]
    X->n = 0;
 808bf16:	9304      	str	r3, [sp, #16]
    X->p = NULL;
 808bf18:	9305      	str	r3, [sp, #20]
    size_t i, j;
    mbedtls_mpi TA, TB;

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 808bf1a:	d106      	bne.n	808bf2a <mbedtls_mpi_mul_mpi+0x30>
 808bf1c:	4668      	mov	r0, sp
 808bf1e:	f7ff fc6c 	bl	808b7fa <mbedtls_mpi_copy>
 808bf22:	4604      	mov	r4, r0
 808bf24:	2800      	cmp	r0, #0
 808bf26:	d14d      	bne.n	808bfc4 <mbedtls_mpi_mul_mpi+0xca>
 808bf28:	466e      	mov	r6, sp
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 808bf2a:	45a9      	cmp	r9, r5
 808bf2c:	d107      	bne.n	808bf3e <mbedtls_mpi_mul_mpi+0x44>
 808bf2e:	4649      	mov	r1, r9
 808bf30:	a803      	add	r0, sp, #12
 808bf32:	f7ff fc62 	bl	808b7fa <mbedtls_mpi_copy>
 808bf36:	4604      	mov	r4, r0
 808bf38:	2800      	cmp	r0, #0
 808bf3a:	d143      	bne.n	808bfc4 <mbedtls_mpi_mul_mpi+0xca>
 808bf3c:	ad03      	add	r5, sp, #12

    for( i = A->n; i > 0; i-- )
 808bf3e:	f8d6 a004 	ldr.w	sl, [r6, #4]
 808bf42:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
 808bf46:	3b01      	subs	r3, #1
 808bf48:	009b      	lsls	r3, r3, #2
 808bf4a:	f1ba 0f00 	cmp.w	sl, #0
 808bf4e:	d006      	beq.n	808bf5e <mbedtls_mpi_mul_mpi+0x64>
        if( A->p[i - 1] != 0 )
 808bf50:	68b2      	ldr	r2, [r6, #8]
 808bf52:	58d2      	ldr	r2, [r2, r3]
 808bf54:	3b04      	subs	r3, #4
 808bf56:	b912      	cbnz	r2, 808bf5e <mbedtls_mpi_mul_mpi+0x64>
    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }

    for( i = A->n; i > 0; i-- )
 808bf58:	f10a 3aff 	add.w	sl, sl, #4294967295
 808bf5c:	e7f5      	b.n	808bf4a <mbedtls_mpi_mul_mpi+0x50>
        if( A->p[i - 1] != 0 )
            break;

    for( j = B->n; j > 0; j-- )
 808bf5e:	686f      	ldr	r7, [r5, #4]
 808bf60:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
 808bf64:	3b01      	subs	r3, #1
 808bf66:	009b      	lsls	r3, r3, #2
 808bf68:	b12f      	cbz	r7, 808bf76 <mbedtls_mpi_mul_mpi+0x7c>
        if( B->p[j - 1] != 0 )
 808bf6a:	68aa      	ldr	r2, [r5, #8]
 808bf6c:	58d2      	ldr	r2, [r2, r3]
 808bf6e:	3b04      	subs	r3, #4
 808bf70:	b90a      	cbnz	r2, 808bf76 <mbedtls_mpi_mul_mpi+0x7c>

    for( i = A->n; i > 0; i-- )
        if( A->p[i - 1] != 0 )
            break;

    for( j = B->n; j > 0; j-- )
 808bf72:	3f01      	subs	r7, #1
 808bf74:	e7f8      	b.n	808bf68 <mbedtls_mpi_mul_mpi+0x6e>
        if( B->p[j - 1] != 0 )
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
 808bf76:	eb0a 0107 	add.w	r1, sl, r7
 808bf7a:	4648      	mov	r0, r9
 808bf7c:	f7ff fc11 	bl	808b7a2 <mbedtls_mpi_grow>
 808bf80:	4604      	mov	r4, r0
 808bf82:	b9f8      	cbnz	r0, 808bfc4 <mbedtls_mpi_mul_mpi+0xca>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 808bf84:	4601      	mov	r1, r0
 808bf86:	4648      	mov	r0, r9
 808bf88:	f7ff fc61 	bl	808b84e <mbedtls_mpi_lset>
 808bf8c:	4604      	mov	r4, r0
 808bf8e:	b9c8      	cbnz	r0, 808bfc4 <mbedtls_mpi_mul_mpi+0xca>
 808bf90:	f107 4880 	add.w	r8, r7, #1073741824	; 0x40000000
 808bf94:	f108 38ff 	add.w	r8, r8, #4294967295
 808bf98:	ea4f 0888 	mov.w	r8, r8, lsl #2

    for( i++; j > 0; j-- )
 808bf9c:	b16f      	cbz	r7, 808bfba <mbedtls_mpi_mul_mpi+0xc0>
        mpi_mul_hlp( i - 1, A->p, X->p + j - 1, B->p[j - 1] );
 808bf9e:	68ab      	ldr	r3, [r5, #8]
 808bfa0:	f8d9 2008 	ldr.w	r2, [r9, #8]
 808bfa4:	f853 3008 	ldr.w	r3, [r3, r8]
 808bfa8:	4442      	add	r2, r8
 808bfaa:	68b1      	ldr	r1, [r6, #8]
 808bfac:	4650      	mov	r0, sl
 808bfae:	f7ff fa0f 	bl	808b3d0 <_ZL11mpi_mul_hlpjPmS_m>
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    for( i++; j > 0; j-- )
 808bfb2:	3f01      	subs	r7, #1
 808bfb4:	f1a8 0804 	sub.w	r8, r8, #4
 808bfb8:	e7f0      	b.n	808bf9c <mbedtls_mpi_mul_mpi+0xa2>
        mpi_mul_hlp( i - 1, A->p, X->p + j - 1, B->p[j - 1] );

    X->s = A->s * B->s;
 808bfba:	6832      	ldr	r2, [r6, #0]
 808bfbc:	682b      	ldr	r3, [r5, #0]
 808bfbe:	4353      	muls	r3, r2
 808bfc0:	f8c9 3000 	str.w	r3, [r9]

cleanup:

    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
 808bfc4:	a803      	add	r0, sp, #12
 808bfc6:	f7ff fbd6 	bl	808b776 <mbedtls_mpi_free>
 808bfca:	4668      	mov	r0, sp
 808bfcc:	f7ff fbd3 	bl	808b776 <mbedtls_mpi_free>

    return( ret );
}
 808bfd0:	4620      	mov	r0, r4
 808bfd2:	b006      	add	sp, #24
 808bfd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808bfd8 <mbedtls_mpi_mul_int>:

/*
 * Baseline multiplication: X = A * b
 */
int mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b )
{
 808bfd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    _B.s = 1;
 808bfda:	2301      	movs	r3, #1
    _B.n = 1;
    _B.p = p;
    p[0] = b;
 808bfdc:	9200      	str	r2, [sp, #0]

    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 808bfde:	aa01      	add	r2, sp, #4
int mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b )
{
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    _B.s = 1;
 808bfe0:	9301      	str	r3, [sp, #4]
    _B.n = 1;
 808bfe2:	9302      	str	r3, [sp, #8]
    _B.p = p;
 808bfe4:	f8cd d00c 	str.w	sp, [sp, #12]
    p[0] = b;

    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 808bfe8:	f7ff ff87 	bl	808befa <mbedtls_mpi_mul_mpi>
}
 808bfec:	b005      	add	sp, #20
 808bfee:	f85d fb04 	ldr.w	pc, [sp], #4

0808bff2 <mbedtls_mpi_div_mpi>:

/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808bff2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808bff6:	b09b      	sub	sp, #108	; 0x6c
 808bff8:	9001      	str	r0, [sp, #4]
 808bffa:	460f      	mov	r7, r1
    int ret;
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 808bffc:	4618      	mov	r0, r3
 808bffe:	2100      	movs	r1, #0

/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808c000:	4690      	mov	r8, r2
 808c002:	9304      	str	r3, [sp, #16]
    int ret;
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 808c004:	f7ff fe5a 	bl	808bcbc <mbedtls_mpi_cmp_int>
 808c008:	2800      	cmp	r0, #0
 808c00a:	f000 81ad 	beq.w	808c368 <mbedtls_mpi_div_mpi+0x376>
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808c00e:	2400      	movs	r4, #0
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c010:	2501      	movs	r5, #1
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 808c012:	9904      	ldr	r1, [sp, #16]
 808c014:	4640      	mov	r0, r8
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c016:	950b      	str	r5, [sp, #44]	; 0x2c
    X->n = 0;
 808c018:	940c      	str	r4, [sp, #48]	; 0x30
    X->p = NULL;
 808c01a:	940d      	str	r4, [sp, #52]	; 0x34
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c01c:	950e      	str	r5, [sp, #56]	; 0x38
    X->n = 0;
 808c01e:	940f      	str	r4, [sp, #60]	; 0x3c
    X->p = NULL;
 808c020:	9410      	str	r4, [sp, #64]	; 0x40
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c022:	9511      	str	r5, [sp, #68]	; 0x44
    X->n = 0;
 808c024:	9412      	str	r4, [sp, #72]	; 0x48
    X->p = NULL;
 808c026:	9413      	str	r4, [sp, #76]	; 0x4c
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c028:	9514      	str	r5, [sp, #80]	; 0x50
    X->n = 0;
 808c02a:	9415      	str	r4, [sp, #84]	; 0x54
    X->p = NULL;
 808c02c:	9416      	str	r4, [sp, #88]	; 0x58
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c02e:	9517      	str	r5, [sp, #92]	; 0x5c
    X->n = 0;
 808c030:	9418      	str	r4, [sp, #96]	; 0x60
    X->p = NULL;
 808c032:	9419      	str	r4, [sp, #100]	; 0x64
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 808c034:	f7ff fd62 	bl	808bafc <mbedtls_mpi_cmp_abs>
 808c038:	42a0      	cmp	r0, r4
 808c03a:	da16      	bge.n	808c06a <mbedtls_mpi_div_mpi+0x78>
    {
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 808c03c:	9b01      	ldr	r3, [sp, #4]
 808c03e:	b90b      	cbnz	r3, 808c044 <mbedtls_mpi_div_mpi+0x52>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 808c040:	b94f      	cbnz	r7, 808c056 <mbedtls_mpi_div_mpi+0x64>
 808c042:	e010      	b.n	808c066 <mbedtls_mpi_div_mpi+0x74>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    {
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 808c044:	4621      	mov	r1, r4
 808c046:	9801      	ldr	r0, [sp, #4]
 808c048:	f7ff fc01 	bl	808b84e <mbedtls_mpi_lset>
 808c04c:	4604      	mov	r4, r0
 808c04e:	2800      	cmp	r0, #0
 808c050:	f040 8179 	bne.w	808c346 <mbedtls_mpi_div_mpi+0x354>
 808c054:	e7f4      	b.n	808c040 <mbedtls_mpi_div_mpi+0x4e>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 808c056:	4641      	mov	r1, r8
 808c058:	4638      	mov	r0, r7
 808c05a:	f7ff fbce 	bl	808b7fa <mbedtls_mpi_copy>
 808c05e:	4604      	mov	r4, r0
 808c060:	2800      	cmp	r0, #0
 808c062:	f040 8170 	bne.w	808c346 <mbedtls_mpi_div_mpi+0x354>
        return( 0 );
 808c066:	2000      	movs	r0, #0
 808c068:	e180      	b.n	808c36c <mbedtls_mpi_div_mpi+0x37a>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
 808c06a:	4641      	mov	r1, r8
 808c06c:	a80b      	add	r0, sp, #44	; 0x2c
 808c06e:	f7ff fbc4 	bl	808b7fa <mbedtls_mpi_copy>
 808c072:	4604      	mov	r4, r0
 808c074:	2800      	cmp	r0, #0
 808c076:	f040 8166 	bne.w	808c346 <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
 808c07a:	ae0e      	add	r6, sp, #56	; 0x38
 808c07c:	9904      	ldr	r1, [sp, #16]
 808c07e:	4630      	mov	r0, r6
 808c080:	f7ff fbbb 	bl	808b7fa <mbedtls_mpi_copy>
 808c084:	4604      	mov	r4, r0
 808c086:	2800      	cmp	r0, #0
 808c088:	f040 815d 	bne.w	808c346 <mbedtls_mpi_div_mpi+0x354>
    X.s = Y.s = 1;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 808c08c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 808c090:	a811      	add	r0, sp, #68	; 0x44
 808c092:	3102      	adds	r1, #2
        return( 0 );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    X.s = Y.s = 1;
 808c094:	950e      	str	r5, [sp, #56]	; 0x38
 808c096:	950b      	str	r5, [sp, #44]	; 0x2c

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 808c098:	f7ff fb83 	bl	808b7a2 <mbedtls_mpi_grow>
 808c09c:	4604      	mov	r4, r0
 808c09e:	2800      	cmp	r0, #0
 808c0a0:	f040 8151 	bne.w	808c346 <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
 808c0a4:	4601      	mov	r1, r0
 808c0a6:	a811      	add	r0, sp, #68	; 0x44
 808c0a8:	f7ff fbd1 	bl	808b84e <mbedtls_mpi_lset>
 808c0ac:	4604      	mov	r4, r0
 808c0ae:	2800      	cmp	r0, #0
 808c0b0:	f040 8149 	bne.w	808c346 <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
 808c0b4:	2102      	movs	r1, #2
 808c0b6:	a814      	add	r0, sp, #80	; 0x50
 808c0b8:	f7ff fb73 	bl	808b7a2 <mbedtls_mpi_grow>
 808c0bc:	4604      	mov	r4, r0
 808c0be:	2800      	cmp	r0, #0
 808c0c0:	f040 8141 	bne.w	808c346 <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
 808c0c4:	2103      	movs	r1, #3
 808c0c6:	a817      	add	r0, sp, #92	; 0x5c
 808c0c8:	f7ff fb6b 	bl	808b7a2 <mbedtls_mpi_grow>
 808c0cc:	4604      	mov	r4, r0
 808c0ce:	2800      	cmp	r0, #0
 808c0d0:	f040 8139 	bne.w	808c346 <mbedtls_mpi_div_mpi+0x354>

    k = mbedtls_mpi_bitlen( &Y ) % biL;
 808c0d4:	4630      	mov	r0, r6
 808c0d6:	f7ff fc00 	bl	808b8da <mbedtls_mpi_bitlen>
 808c0da:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
 808c0de:	281f      	cmp	r0, #31
 808c0e0:	d013      	beq.n	808c10a <mbedtls_mpi_div_mpi+0x118>
    {
        k = biL - 1 - k;
 808c0e2:	f1c0 031f 	rsb	r3, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 808c0e6:	4619      	mov	r1, r3
 808c0e8:	a80b      	add	r0, sp, #44	; 0x2c
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );

    k = mbedtls_mpi_bitlen( &Y ) % biL;
    if( k < biL - 1 )
    {
        k = biL - 1 - k;
 808c0ea:	9303      	str	r3, [sp, #12]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 808c0ec:	f7ff fc73 	bl	808b9d6 <mbedtls_mpi_shift_l>
 808c0f0:	4604      	mov	r4, r0
 808c0f2:	2800      	cmp	r0, #0
 808c0f4:	f040 8127 	bne.w	808c346 <mbedtls_mpi_div_mpi+0x354>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
 808c0f8:	9903      	ldr	r1, [sp, #12]
 808c0fa:	4630      	mov	r0, r6
 808c0fc:	f7ff fc6b 	bl	808b9d6 <mbedtls_mpi_shift_l>
 808c100:	4604      	mov	r4, r0
 808c102:	2800      	cmp	r0, #0
 808c104:	f040 811f 	bne.w	808c346 <mbedtls_mpi_div_mpi+0x354>
 808c108:	e000      	b.n	808c10c <mbedtls_mpi_div_mpi+0x11a>
    }
    else k = 0;
 808c10a:	9403      	str	r4, [sp, #12]

    n = X.n - 1;
 808c10c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    t = Y.n - 1;
 808c10e:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    }
    else k = 0;

    n = X.n - 1;
 808c112:	f105 39ff 	add.w	r9, r5, #4294967295
    t = Y.n - 1;
 808c116:	f10a 33ff 	add.w	r3, sl, #4294967295
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 808c11a:	ebc3 0b09 	rsb	fp, r3, r9
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    }
    else k = 0;

    n = X.n - 1;
    t = Y.n - 1;
 808c11e:	9300      	str	r3, [sp, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 808c120:	ea4f 134b 	mov.w	r3, fp, lsl #5
 808c124:	4619      	mov	r1, r3
 808c126:	4630      	mov	r0, r6
 808c128:	9302      	str	r3, [sp, #8]
 808c12a:	f7ff fc54 	bl	808b9d6 <mbedtls_mpi_shift_l>
 808c12e:	4604      	mov	r4, r0
 808c130:	2800      	cmp	r0, #0
 808c132:	f040 8108 	bne.w	808c346 <mbedtls_mpi_div_mpi+0x354>

    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
    {
        Z.p[n - t]++;
 808c136:	ea4f 0b8b 	mov.w	fp, fp, lsl #2

    n = X.n - 1;
    t = Y.n - 1;
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );

    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 808c13a:	4631      	mov	r1, r6
 808c13c:	a80b      	add	r0, sp, #44	; 0x2c
 808c13e:	f7ff fd78 	bl	808bc32 <mbedtls_mpi_cmp_mpi>
 808c142:	2800      	cmp	r0, #0
 808c144:	db0e      	blt.n	808c164 <mbedtls_mpi_div_mpi+0x172>
    {
        Z.p[n - t]++;
 808c146:	9913      	ldr	r1, [sp, #76]	; 0x4c
 808c148:	f851 200b 	ldr.w	r2, [r1, fp]
 808c14c:	3201      	adds	r2, #1
 808c14e:	f841 200b 	str.w	r2, [r1, fp]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
 808c152:	a90b      	add	r1, sp, #44	; 0x2c
 808c154:	4632      	mov	r2, r6
 808c156:	4608      	mov	r0, r1
 808c158:	f7ff fe81 	bl	808be5e <mbedtls_mpi_sub_mpi>
 808c15c:	4604      	mov	r4, r0
 808c15e:	2800      	cmp	r0, #0
 808c160:	d0eb      	beq.n	808c13a <mbedtls_mpi_div_mpi+0x148>
 808c162:	e0f0      	b.n	808c346 <mbedtls_mpi_div_mpi+0x354>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
 808c164:	9902      	ldr	r1, [sp, #8]
 808c166:	4630      	mov	r0, r6
 808c168:	f7ff fc84 	bl	808ba74 <mbedtls_mpi_shift_r>
 808c16c:	4604      	mov	r4, r0
 808c16e:	2800      	cmp	r0, #0
 808c170:	f040 80e9 	bne.w	808c346 <mbedtls_mpi_div_mpi+0x354>

    for( i = n; i > t ; i-- )
    {
        if( X.p[i] >= Y.p[t] )
 808c174:	9b00      	ldr	r3, [sp, #0]
 808c176:	f105 4680 	add.w	r6, r5, #1073741824	; 0x40000000
 808c17a:	009b      	lsls	r3, r3, #2
 808c17c:	9305      	str	r3, [sp, #20]
        do
        {
            Z.p[i - t - 1]--;

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 808c17e:	3b04      	subs	r3, #4
 808c180:	9308      	str	r3, [sp, #32]
 808c182:	f105 6300 	add.w	r3, r5, #134217728	; 0x8000000
 808c186:	3b01      	subs	r3, #1
 808c188:	3e01      	subs	r6, #1
 808c18a:	ebca 0606 	rsb	r6, sl, r6
 808c18e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 808c192:	ebca 0a03 	rsb	sl, sl, r3
 808c196:	ea4f 134a 	mov.w	r3, sl, lsl #5
 808c19a:	3d02      	subs	r5, #2
 808c19c:	00b6      	lsls	r6, r6, #2
 808c19e:	9302      	str	r3, [sp, #8]
 808c1a0:	00ad      	lsls	r5, r5, #2
        Z.p[n - t]++;
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );

    for( i = n; i > t ; i-- )
 808c1a2:	9b00      	ldr	r3, [sp, #0]
 808c1a4:	4599      	cmp	r9, r3
 808c1a6:	f240 80a8 	bls.w	808c2fa <mbedtls_mpi_div_mpi+0x308>
    {
        if( X.p[i] >= Y.p[t] )
 808c1aa:	9805      	ldr	r0, [sp, #20]
 808c1ac:	990d      	ldr	r1, [sp, #52]	; 0x34
 808c1ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 808c1b0:	1d2b      	adds	r3, r5, #4
 808c1b2:	5812      	ldr	r2, [r2, r0]
 808c1b4:	9309      	str	r3, [sp, #36]	; 0x24
 808c1b6:	58cb      	ldr	r3, [r1, r3]
 808c1b8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 808c1ba:	4293      	cmp	r3, r2
 808c1bc:	d303      	bcc.n	808c1c6 <mbedtls_mpi_div_mpi+0x1d4>
            Z.p[i - t - 1] = ~0;
 808c1be:	f04f 33ff 	mov.w	r3, #4294967295
 808c1c2:	5183      	str	r3, [r0, r6]
 808c1c4:	e01b      	b.n	808c1fe <mbedtls_mpi_div_mpi+0x20c>
        else
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 808c1c6:	eb00 0a06 	add.w	sl, r0, r6
 808c1ca:	5948      	ldr	r0, [r1, r5]
#endif

    /*
     * Check for overflow
     */
    if( 0 == d || u1 >= d )
 808c1cc:	b19a      	cbz	r2, 808c1f6 <mbedtls_mpi_div_mpi+0x204>

        return ( ~0 );
    }

#if defined(MBEDTLS_HAVE_UDBL)
    dividend  = (mbedtls_t_udbl) u1 << biL;
 808c1ce:	9307      	str	r3, [sp, #28]
 808c1d0:	2300      	movs	r3, #0
 808c1d2:	9306      	str	r3, [sp, #24]
    dividend |= (mbedtls_t_udbl) u0;
    quotient = dividend / d;
 808c1d4:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 808c1d8:	ea4b 0b00 	orr.w	fp, fp, r0
 808c1dc:	4658      	mov	r0, fp
 808c1de:	4661      	mov	r1, ip
 808c1e0:	f007 fb18 	bl	8093814 <__aeabi_uldivmod>
        quotient = ( (mbedtls_t_udbl) 1 << biL ) - 1;

    if( r != NULL )
        *r = (mbedtls_mpi_uint)( dividend - (quotient * d ) );

    return (mbedtls_mpi_uint) quotient;
 808c1e4:	2300      	movs	r3, #0
 808c1e6:	f04f 32ff 	mov.w	r2, #4294967295
 808c1ea:	428b      	cmp	r3, r1
 808c1ec:	bf08      	it	eq
 808c1ee:	4282      	cmpeq	r2, r0
 808c1f0:	d203      	bcs.n	808c1fa <mbedtls_mpi_div_mpi+0x208>
 808c1f2:	4610      	mov	r0, r2
 808c1f4:	e001      	b.n	808c1fa <mbedtls_mpi_div_mpi+0x208>
     */
    if( 0 == d || u1 >= d )
    {
        if (r != NULL) *r = ~0;

        return ( ~0 );
 808c1f6:	f04f 30ff 	mov.w	r0, #4294967295
        if( X.p[i] >= Y.p[t] )
            Z.p[i - t - 1] = ~0;
        else
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
                                                            Y.p[t], NULL);
 808c1fa:	f8ca 0000 	str.w	r0, [sl]
        }

        Z.p[i - t - 1]++;
 808c1fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 808c200:	f1a5 0a04 	sub.w	sl, r5, #4
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
                                                            Y.p[t], NULL);
        }

        Z.p[i - t - 1]++;
 808c204:	5993      	ldr	r3, [r2, r6]
 808c206:	3301      	adds	r3, #1
 808c208:	5193      	str	r3, [r2, r6]
        do
        {
            Z.p[i - t - 1]--;
 808c20a:	9a13      	ldr	r2, [sp, #76]	; 0x4c

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 808c20c:	2100      	movs	r1, #0
        }

        Z.p[i - t - 1]++;
        do
        {
            Z.p[i - t - 1]--;
 808c20e:	5993      	ldr	r3, [r2, r6]

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 808c210:	a814      	add	r0, sp, #80	; 0x50
        }

        Z.p[i - t - 1]++;
        do
        {
            Z.p[i - t - 1]--;
 808c212:	3b01      	subs	r3, #1
 808c214:	5193      	str	r3, [r2, r6]

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 808c216:	f7ff fb1a 	bl	808b84e <mbedtls_mpi_lset>
 808c21a:	2800      	cmp	r0, #0
 808c21c:	f040 8090 	bne.w	808c340 <mbedtls_mpi_div_mpi+0x34e>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 808c220:	9b00      	ldr	r3, [sp, #0]
 808c222:	9a16      	ldr	r2, [sp, #88]	; 0x58
 808c224:	b11b      	cbz	r3, 808c22e <mbedtls_mpi_div_mpi+0x23c>
 808c226:	9b10      	ldr	r3, [sp, #64]	; 0x40
 808c228:	9908      	ldr	r1, [sp, #32]
 808c22a:	585b      	ldr	r3, [r3, r1]
 808c22c:	e000      	b.n	808c230 <mbedtls_mpi_div_mpi+0x23e>
 808c22e:	9b00      	ldr	r3, [sp, #0]
 808c230:	6013      	str	r3, [r2, #0]
            T1.p[1] = Y.p[t];
 808c232:	9b10      	ldr	r3, [sp, #64]	; 0x40
 808c234:	9a05      	ldr	r2, [sp, #20]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 808c236:	a914      	add	r1, sp, #80	; 0x50
        {
            Z.p[i - t - 1]--;

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
 808c238:	589a      	ldr	r2, [r3, r2]
 808c23a:	9b16      	ldr	r3, [sp, #88]	; 0x58
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 808c23c:	4608      	mov	r0, r1
        {
            Z.p[i - t - 1]--;

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
 808c23e:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 808c240:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808c242:	599a      	ldr	r2, [r3, r6]
 808c244:	f7ff fec8 	bl	808bfd8 <mbedtls_mpi_mul_int>
 808c248:	4601      	mov	r1, r0
 808c24a:	2800      	cmp	r0, #0
 808c24c:	d17a      	bne.n	808c344 <mbedtls_mpi_div_mpi+0x352>

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
 808c24e:	a817      	add	r0, sp, #92	; 0x5c
 808c250:	f7ff fafd 	bl	808b84e <mbedtls_mpi_lset>
 808c254:	2800      	cmp	r0, #0
 808c256:	d173      	bne.n	808c340 <mbedtls_mpi_div_mpi+0x34e>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 808c258:	f1b9 0f01 	cmp.w	r9, #1
 808c25c:	bf18      	it	ne
 808c25e:	9a0d      	ldrne	r2, [sp, #52]	; 0x34
 808c260:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808c262:	bf18      	it	ne
 808c264:	f852 000a 	ldrne.w	r0, [r2, sl]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
            T2.p[2] = X.p[i];
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 808c268:	a917      	add	r1, sp, #92	; 0x5c
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 808c26a:	6018      	str	r0, [r3, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 808c26c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            T2.p[2] = X.p[i];
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 808c26e:	a814      	add	r0, sp, #80	; 0x50
            T1.p[1] = Y.p[t];
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 808c270:	595a      	ldr	r2, [r3, r5]
 808c272:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808c274:	605a      	str	r2, [r3, #4]
            T2.p[2] = X.p[i];
 808c276:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808c278:	9a09      	ldr	r2, [sp, #36]	; 0x24
 808c27a:	589a      	ldr	r2, [r3, r2]
 808c27c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808c27e:	609a      	str	r2, [r3, #8]
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 808c280:	f7ff fcd7 	bl	808bc32 <mbedtls_mpi_cmp_mpi>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
                                                            Y.p[t], NULL);
        }

        Z.p[i - t - 1]++;
        do
 808c284:	2800      	cmp	r0, #0
 808c286:	dcc0      	bgt.n	808c20a <mbedtls_mpi_div_mpi+0x218>
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
            T2.p[2] = X.p[i];
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 808c288:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808c28a:	a90e      	add	r1, sp, #56	; 0x38
 808c28c:	599a      	ldr	r2, [r3, r6]
 808c28e:	a814      	add	r0, sp, #80	; 0x50
 808c290:	f7ff fea2 	bl	808bfd8 <mbedtls_mpi_mul_int>
 808c294:	2800      	cmp	r0, #0
 808c296:	d153      	bne.n	808c340 <mbedtls_mpi_div_mpi+0x34e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 808c298:	9902      	ldr	r1, [sp, #8]
 808c29a:	a814      	add	r0, sp, #80	; 0x50
 808c29c:	f7ff fb9b 	bl	808b9d6 <mbedtls_mpi_shift_l>
 808c2a0:	2800      	cmp	r0, #0
 808c2a2:	d14d      	bne.n	808c340 <mbedtls_mpi_div_mpi+0x34e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 808c2a4:	a90b      	add	r1, sp, #44	; 0x2c
 808c2a6:	4608      	mov	r0, r1
 808c2a8:	aa14      	add	r2, sp, #80	; 0x50
 808c2aa:	f7ff fdd8 	bl	808be5e <mbedtls_mpi_sub_mpi>
 808c2ae:	4601      	mov	r1, r0
 808c2b0:	2800      	cmp	r0, #0
 808c2b2:	d147      	bne.n	808c344 <mbedtls_mpi_div_mpi+0x352>

        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
 808c2b4:	a80b      	add	r0, sp, #44	; 0x2c
 808c2b6:	f7ff fd01 	bl	808bcbc <mbedtls_mpi_cmp_int>
 808c2ba:	2800      	cmp	r0, #0
 808c2bc:	da15      	bge.n	808c2ea <mbedtls_mpi_div_mpi+0x2f8>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 808c2be:	a90e      	add	r1, sp, #56	; 0x38
 808c2c0:	a814      	add	r0, sp, #80	; 0x50
 808c2c2:	f7ff fa9a 	bl	808b7fa <mbedtls_mpi_copy>
 808c2c6:	2800      	cmp	r0, #0
 808c2c8:	d13a      	bne.n	808c340 <mbedtls_mpi_div_mpi+0x34e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 808c2ca:	9902      	ldr	r1, [sp, #8]
 808c2cc:	a814      	add	r0, sp, #80	; 0x50
 808c2ce:	f7ff fb82 	bl	808b9d6 <mbedtls_mpi_shift_l>
 808c2d2:	2800      	cmp	r0, #0
 808c2d4:	d134      	bne.n	808c340 <mbedtls_mpi_div_mpi+0x34e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 808c2d6:	a90b      	add	r1, sp, #44	; 0x2c
 808c2d8:	aa14      	add	r2, sp, #80	; 0x50
 808c2da:	4608      	mov	r0, r1
 808c2dc:	f7ff fd9e 	bl	808be1c <mbedtls_mpi_add_mpi>
 808c2e0:	bb70      	cbnz	r0, 808c340 <mbedtls_mpi_div_mpi+0x34e>
            Z.p[i - t - 1]--;
 808c2e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 808c2e4:	5993      	ldr	r3, [r2, r6]
 808c2e6:	3b01      	subs	r3, #1
 808c2e8:	5193      	str	r3, [r2, r6]
 808c2ea:	9b02      	ldr	r3, [sp, #8]
        Z.p[n - t]++;
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );

    for( i = n; i > t ; i-- )
 808c2ec:	f109 39ff 	add.w	r9, r9, #4294967295
 808c2f0:	3b20      	subs	r3, #32
 808c2f2:	3e04      	subs	r6, #4
 808c2f4:	9302      	str	r3, [sp, #8]
 808c2f6:	3d04      	subs	r5, #4
 808c2f8:	e753      	b.n	808c1a2 <mbedtls_mpi_div_mpi+0x1b0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
            Z.p[i - t - 1]--;
        }
    }

    if( Q != NULL )
 808c2fa:	9b01      	ldr	r3, [sp, #4]
 808c2fc:	b15b      	cbz	r3, 808c316 <mbedtls_mpi_div_mpi+0x324>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 808c2fe:	a911      	add	r1, sp, #68	; 0x44
 808c300:	4618      	mov	r0, r3
 808c302:	f7ff fa7a 	bl	808b7fa <mbedtls_mpi_copy>
 808c306:	b9d8      	cbnz	r0, 808c340 <mbedtls_mpi_div_mpi+0x34e>
        Q->s = A->s * B->s;
 808c308:	9b04      	ldr	r3, [sp, #16]
 808c30a:	f8d8 2000 	ldr.w	r2, [r8]
 808c30e:	681b      	ldr	r3, [r3, #0]
 808c310:	4353      	muls	r3, r2
 808c312:	9a01      	ldr	r2, [sp, #4]
 808c314:	6013      	str	r3, [r2, #0]
    }

    if( R != NULL )
 808c316:	b1b7      	cbz	r7, 808c346 <mbedtls_mpi_div_mpi+0x354>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
 808c318:	9903      	ldr	r1, [sp, #12]
 808c31a:	a80b      	add	r0, sp, #44	; 0x2c
 808c31c:	f7ff fbaa 	bl	808ba74 <mbedtls_mpi_shift_r>
 808c320:	b970      	cbnz	r0, 808c340 <mbedtls_mpi_div_mpi+0x34e>
        X.s = A->s;
 808c322:	f8d8 3000 	ldr.w	r3, [r8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 808c326:	a90b      	add	r1, sp, #44	; 0x2c
 808c328:	4638      	mov	r0, r7
    }

    if( R != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
        X.s = A->s;
 808c32a:	930b      	str	r3, [sp, #44]	; 0x2c
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 808c32c:	f7ff fa65 	bl	808b7fa <mbedtls_mpi_copy>
 808c330:	4601      	mov	r1, r0
 808c332:	b938      	cbnz	r0, 808c344 <mbedtls_mpi_div_mpi+0x352>

        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
 808c334:	4638      	mov	r0, r7
 808c336:	f7ff fcc1 	bl	808bcbc <mbedtls_mpi_cmp_int>
 808c33a:	b920      	cbnz	r0, 808c346 <mbedtls_mpi_div_mpi+0x354>
            R->s = 1;
 808c33c:	2301      	movs	r3, #1
 808c33e:	603b      	str	r3, [r7, #0]
 808c340:	4604      	mov	r4, r0
 808c342:	e000      	b.n	808c346 <mbedtls_mpi_div_mpi+0x354>
 808c344:	460c      	mov	r4, r1
    }

cleanup:

    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 808c346:	a80b      	add	r0, sp, #44	; 0x2c
 808c348:	f7ff fa15 	bl	808b776 <mbedtls_mpi_free>
 808c34c:	a80e      	add	r0, sp, #56	; 0x38
 808c34e:	f7ff fa12 	bl	808b776 <mbedtls_mpi_free>
 808c352:	a811      	add	r0, sp, #68	; 0x44
 808c354:	f7ff fa0f 	bl	808b776 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
 808c358:	a814      	add	r0, sp, #80	; 0x50
 808c35a:	f7ff fa0c 	bl	808b776 <mbedtls_mpi_free>
 808c35e:	a817      	add	r0, sp, #92	; 0x5c
 808c360:	f7ff fa09 	bl	808b776 <mbedtls_mpi_free>

    return( ret );
 808c364:	4620      	mov	r0, r4
 808c366:	e001      	b.n	808c36c <mbedtls_mpi_div_mpi+0x37a>
    int ret;
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
 808c368:	f06f 000b 	mvn.w	r0, #11

    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );

    return( ret );
}
 808c36c:	b01b      	add	sp, #108	; 0x6c
 808c36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808c372 <mbedtls_mpi_mod_mpi>:

/*
 * Modulo: R = A mod B
 */
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808c372:	b570      	push	{r4, r5, r6, lr}
 808c374:	4604      	mov	r4, r0
 808c376:	460e      	mov	r6, r1
    int ret;

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 808c378:	4610      	mov	r0, r2
 808c37a:	2100      	movs	r1, #0

/*
 * Modulo: R = A mod B
 */
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808c37c:	4615      	mov	r5, r2
    int ret;

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 808c37e:	f7ff fc9d 	bl	808bcbc <mbedtls_mpi_cmp_int>
 808c382:	2800      	cmp	r0, #0
 808c384:	db22      	blt.n	808c3cc <mbedtls_mpi_mod_mpi+0x5a>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
 808c386:	462b      	mov	r3, r5
 808c388:	4632      	mov	r2, r6
 808c38a:	4621      	mov	r1, r4
 808c38c:	2000      	movs	r0, #0
 808c38e:	f7ff fe30 	bl	808bff2 <mbedtls_mpi_div_mpi>
 808c392:	b9f8      	cbnz	r0, 808c3d4 <mbedtls_mpi_mod_mpi+0x62>

    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 808c394:	2100      	movs	r1, #0
 808c396:	4620      	mov	r0, r4
 808c398:	f7ff fc90 	bl	808bcbc <mbedtls_mpi_cmp_int>
 808c39c:	2800      	cmp	r0, #0
 808c39e:	da07      	bge.n	808c3b0 <mbedtls_mpi_mod_mpi+0x3e>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
 808c3a0:	462a      	mov	r2, r5
 808c3a2:	4621      	mov	r1, r4
 808c3a4:	4620      	mov	r0, r4
 808c3a6:	f7ff fd39 	bl	808be1c <mbedtls_mpi_add_mpi>
 808c3aa:	2800      	cmp	r0, #0
 808c3ac:	d0f2      	beq.n	808c394 <mbedtls_mpi_mod_mpi+0x22>
 808c3ae:	bd70      	pop	{r4, r5, r6, pc}

    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 808c3b0:	4629      	mov	r1, r5
 808c3b2:	4620      	mov	r0, r4
 808c3b4:	f7ff fc3d 	bl	808bc32 <mbedtls_mpi_cmp_mpi>
 808c3b8:	2800      	cmp	r0, #0
 808c3ba:	db0a      	blt.n	808c3d2 <mbedtls_mpi_mod_mpi+0x60>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
 808c3bc:	462a      	mov	r2, r5
 808c3be:	4621      	mov	r1, r4
 808c3c0:	4620      	mov	r0, r4
 808c3c2:	f7ff fd4c 	bl	808be5e <mbedtls_mpi_sub_mpi>
 808c3c6:	2800      	cmp	r0, #0
 808c3c8:	d0f2      	beq.n	808c3b0 <mbedtls_mpi_mod_mpi+0x3e>
 808c3ca:	bd70      	pop	{r4, r5, r6, pc}
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
    int ret;

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 808c3cc:	f06f 0009 	mvn.w	r0, #9
 808c3d0:	bd70      	pop	{r4, r5, r6, pc}
 808c3d2:	2000      	movs	r0, #0
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );

cleanup:

    return( ret );
}
 808c3d4:	bd70      	pop	{r4, r5, r6, pc}

0808c3d6 <mbedtls_mpi_exp_mod>:

/*
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *E, const mbedtls_mpi *N, mbedtls_mpi *_RR )
{
 808c3d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808c3da:	4606      	mov	r6, r0
 808c3dc:	f2ad 6d54 	subw	sp, sp, #1620	; 0x654
 808c3e0:	460f      	mov	r7, r1
    size_t bufsize, nbits;
    mbedtls_mpi_uint ei, mm, state;
    mbedtls_mpi RR, T, W[ 2 << MBEDTLS_MPI_WINDOW_SIZE ], Apos;
    int neg;

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
 808c3e2:	4618      	mov	r0, r3
 808c3e4:	2100      	movs	r1, #0

/*
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *E, const mbedtls_mpi *N, mbedtls_mpi *_RR )
{
 808c3e6:	9202      	str	r2, [sp, #8]
 808c3e8:	461d      	mov	r5, r3
    size_t bufsize, nbits;
    mbedtls_mpi_uint ei, mm, state;
    mbedtls_mpi RR, T, W[ 2 << MBEDTLS_MPI_WINDOW_SIZE ], Apos;
    int neg;

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
 808c3ea:	f7ff fc67 	bl	808bcbc <mbedtls_mpi_cmp_int>
 808c3ee:	2800      	cmp	r0, #0
 808c3f0:	dd05      	ble.n	808c3fe <mbedtls_mpi_exp_mod+0x28>
 808c3f2:	68ab      	ldr	r3, [r5, #8]
 808c3f4:	f8d3 8000 	ldr.w	r8, [r3]
 808c3f8:	f018 0f01 	tst.w	r8, #1
 808c3fc:	d102      	bne.n	808c404 <mbedtls_mpi_exp_mod+0x2e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 808c3fe:	f06f 0003 	mvn.w	r0, #3
 808c402:	e203      	b.n	808c80c <mbedtls_mpi_exp_mod+0x436>

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
 808c404:	2100      	movs	r1, #0
 808c406:	9802      	ldr	r0, [sp, #8]
 808c408:	f7ff fc58 	bl	808bcbc <mbedtls_mpi_cmp_int>
 808c40c:	2800      	cmp	r0, #0
 808c40e:	dbf6      	blt.n	808c3fe <mbedtls_mpi_exp_mod+0x28>
{
    mbedtls_mpi_uint x, m0 = N->p[0];
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;
 808c410:	f108 0402 	add.w	r4, r8, #2
 808c414:	0064      	lsls	r4, r4, #1
 808c416:	f004 0408 	and.w	r4, r4, #8
 808c41a:	4444      	add	r4, r8
 808c41c:	2103      	movs	r1, #3

    for( i = biL; i >= 8; i /= 2 )
        x *= ( 2 - ( m0 * x ) );
 808c41e:	fb04 f308 	mul.w	r3, r4, r8
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
 808c422:	3901      	subs	r1, #1
        x *= ( 2 - ( m0 * x ) );
 808c424:	f1c3 0302 	rsb	r3, r3, #2
 808c428:	fb03 f404 	mul.w	r4, r3, r4
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
 808c42c:	d1f7      	bne.n	808c41e <mbedtls_mpi_exp_mod+0x48>
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c42e:	2301      	movs	r3, #1
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
 808c430:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 808c434:	a814      	add	r0, sp, #80	; 0x50
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c436:	9308      	str	r3, [sp, #32]
    X->n = 0;
 808c438:	9109      	str	r1, [sp, #36]	; 0x24
    X->p = NULL;
 808c43a:	910a      	str	r1, [sp, #40]	; 0x28
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c43c:	930b      	str	r3, [sp, #44]	; 0x2c
    X->n = 0;
 808c43e:	910c      	str	r1, [sp, #48]	; 0x30
    X->p = NULL;
 808c440:	910d      	str	r1, [sp, #52]	; 0x34
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c442:	930e      	str	r3, [sp, #56]	; 0x38
    X->n = 0;
 808c444:	910f      	str	r1, [sp, #60]	; 0x3c
    X->p = NULL;
 808c446:	9110      	str	r1, [sp, #64]	; 0x40
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
 808c448:	f007 fbbf 	bl	8093bca <memset>

    i = mbedtls_mpi_bitlen( E );
 808c44c:	9802      	ldr	r0, [sp, #8]
 808c44e:	f7ff fa44 	bl	808b8da <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
            ( i >  79 ) ? 4 : ( i >  23 ) ? 3 : 1;
 808c452:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
 808c456:	d20a      	bcs.n	808c46e <mbedtls_mpi_exp_mod+0x98>
 808c458:	28ef      	cmp	r0, #239	; 0xef
 808c45a:	d80b      	bhi.n	808c474 <mbedtls_mpi_exp_mod+0x9e>
 808c45c:	284f      	cmp	r0, #79	; 0x4f
 808c45e:	d80c      	bhi.n	808c47a <mbedtls_mpi_exp_mod+0xa4>
 808c460:	2818      	cmp	r0, #24
 808c462:	bf34      	ite	cc
 808c464:	f04f 0b01 	movcc.w	fp, #1
 808c468:	f04f 0b03 	movcs.w	fp, #3
 808c46c:	e007      	b.n	808c47e <mbedtls_mpi_exp_mod+0xa8>
 808c46e:	f04f 0b06 	mov.w	fp, #6
 808c472:	e004      	b.n	808c47e <mbedtls_mpi_exp_mod+0xa8>
 808c474:	f04f 0b05 	mov.w	fp, #5
 808c478:	e001      	b.n	808c47e <mbedtls_mpi_exp_mod+0xa8>
 808c47a:	f04f 0b04 	mov.w	fp, #4

    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;

    j = N->n + 1;
 808c47e:	686b      	ldr	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 808c480:	4630      	mov	r0, r6
            ( i >  79 ) ? 4 : ( i >  23 ) ? 3 : 1;

    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;

    j = N->n + 1;
 808c482:	f103 0801 	add.w	r8, r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 808c486:	4641      	mov	r1, r8
 808c488:	f7ff f98b 	bl	808b7a2 <mbedtls_mpi_grow>
 808c48c:	4603      	mov	r3, r0
 808c48e:	2800      	cmp	r0, #0
 808c490:	f040 8194 	bne.w	808c7bc <mbedtls_mpi_exp_mod+0x3e6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
 808c494:	4641      	mov	r1, r8
 808c496:	a817      	add	r0, sp, #92	; 0x5c
 808c498:	f7ff f983 	bl	808b7a2 <mbedtls_mpi_grow>
 808c49c:	4603      	mov	r3, r0
 808c49e:	2800      	cmp	r0, #0
 808c4a0:	f040 818c 	bne.w	808c7bc <mbedtls_mpi_exp_mod+0x3e6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
 808c4a4:	ea4f 0148 	mov.w	r1, r8, lsl #1
 808c4a8:	a80b      	add	r0, sp, #44	; 0x2c
 808c4aa:	f7ff f97a 	bl	808b7a2 <mbedtls_mpi_grow>
 808c4ae:	4603      	mov	r3, r0
 808c4b0:	2800      	cmp	r0, #0
 808c4b2:	f040 8183 	bne.w	808c7bc <mbedtls_mpi_exp_mod+0x3e6>

    /*
     * Compensate for negative A (and correct at the end)
     */
    neg = ( A->s == -1 );
 808c4b6:	683b      	ldr	r3, [r7, #0]
 808c4b8:	9304      	str	r3, [sp, #16]
    if( neg )
 808c4ba:	3301      	adds	r3, #1
 808c4bc:	d10a      	bne.n	808c4d4 <mbedtls_mpi_exp_mod+0xfe>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
 808c4be:	4639      	mov	r1, r7
 808c4c0:	a80e      	add	r0, sp, #56	; 0x38
 808c4c2:	f7ff f99a 	bl	808b7fa <mbedtls_mpi_copy>
 808c4c6:	4603      	mov	r3, r0
 808c4c8:	2800      	cmp	r0, #0
 808c4ca:	f040 8177 	bne.w	808c7bc <mbedtls_mpi_exp_mod+0x3e6>
        Apos.s = 1;
 808c4ce:	2301      	movs	r3, #1
 808c4d0:	930e      	str	r3, [sp, #56]	; 0x38
        A = &Apos;
 808c4d2:	af0e      	add	r7, sp, #56	; 0x38
    }

    /*
     * If 1st call, pre-compute R^2 mod N
     */
    if( _RR == NULL || _RR->p == NULL )
 808c4d4:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 808c4d8:	b10b      	cbz	r3, 808c4de <mbedtls_mpi_exp_mod+0x108>
 808c4da:	689b      	ldr	r3, [r3, #8]
 808c4dc:	bb2b      	cbnz	r3, 808c52a <mbedtls_mpi_exp_mod+0x154>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
 808c4de:	2101      	movs	r1, #1
 808c4e0:	a808      	add	r0, sp, #32
 808c4e2:	f7ff f9b4 	bl	808b84e <mbedtls_mpi_lset>
 808c4e6:	4603      	mov	r3, r0
 808c4e8:	2800      	cmp	r0, #0
 808c4ea:	f040 8167 	bne.w	808c7bc <mbedtls_mpi_exp_mod+0x3e6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
 808c4ee:	6869      	ldr	r1, [r5, #4]
 808c4f0:	a808      	add	r0, sp, #32
 808c4f2:	0189      	lsls	r1, r1, #6
 808c4f4:	f7ff fa6f 	bl	808b9d6 <mbedtls_mpi_shift_l>
 808c4f8:	4603      	mov	r3, r0
 808c4fa:	2800      	cmp	r0, #0
 808c4fc:	f040 815e 	bne.w	808c7bc <mbedtls_mpi_exp_mod+0x3e6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
 808c500:	a908      	add	r1, sp, #32
 808c502:	462a      	mov	r2, r5
 808c504:	4608      	mov	r0, r1
 808c506:	f7ff ff34 	bl	808c372 <mbedtls_mpi_mod_mpi>
 808c50a:	4603      	mov	r3, r0
 808c50c:	2800      	cmp	r0, #0
 808c50e:	f040 8155 	bne.w	808c7bc <mbedtls_mpi_exp_mod+0x3e6>

        if( _RR != NULL )
 808c512:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 808c516:	b183      	cbz	r3, 808c53a <mbedtls_mpi_exp_mod+0x164>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
 808c518:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 808c51c:	ab08      	add	r3, sp, #32
 808c51e:	cb03      	ldmia	r3!, {r0, r1}
 808c520:	6010      	str	r0, [r2, #0]
 808c522:	6818      	ldr	r0, [r3, #0]
 808c524:	6051      	str	r1, [r2, #4]
 808c526:	6090      	str	r0, [r2, #8]
 808c528:	e007      	b.n	808c53a <mbedtls_mpi_exp_mod+0x164>
    }
    else
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
 808c52a:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 808c52e:	ab08      	add	r3, sp, #32
 808c530:	6810      	ldr	r0, [r2, #0]
 808c532:	6851      	ldr	r1, [r2, #4]
 808c534:	c303      	stmia	r3!, {r0, r1}
 808c536:	6890      	ldr	r0, [r2, #8]
 808c538:	6018      	str	r0, [r3, #0]

    /*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
 808c53a:	4629      	mov	r1, r5
 808c53c:	4638      	mov	r0, r7
 808c53e:	f7ff fb78 	bl	808bc32 <mbedtls_mpi_cmp_mpi>
 808c542:	2800      	cmp	r0, #0
 808c544:	db18      	blt.n	808c578 <mbedtls_mpi_exp_mod+0x1a2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
 808c546:	462a      	mov	r2, r5
 808c548:	4639      	mov	r1, r7
 808c54a:	a817      	add	r0, sp, #92	; 0x5c
 808c54c:	f7ff ff11 	bl	808c372 <mbedtls_mpi_mod_mpi>
 808c550:	4603      	mov	r3, r0
 808c552:	2800      	cmp	r0, #0
 808c554:	f040 8132 	bne.w	808c7bc <mbedtls_mpi_exp_mod+0x3e6>
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
        x *= ( 2 - ( m0 * x ) );

    *mm = ~x + 1;
 808c558:	4264      	negs	r4, r4
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );

    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
 808c55a:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
 808c55e:	4623      	mov	r3, r4
 808c560:	f8cd 9000 	str.w	r9, [sp]
 808c564:	462a      	mov	r2, r5
 808c566:	a908      	add	r1, sp, #32
 808c568:	a817      	add	r0, sp, #92	; 0x5c
 808c56a:	f7ff fafe 	bl	808bb6a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808c56e:	4603      	mov	r3, r0
 808c570:	2800      	cmp	r0, #0
 808c572:	f040 8123 	bne.w	808c7bc <mbedtls_mpi_exp_mod+0x3e6>
 808c576:	e004      	b.n	808c582 <mbedtls_mpi_exp_mod+0x1ac>
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
 808c578:	4639      	mov	r1, r7
 808c57a:	a817      	add	r0, sp, #92	; 0x5c
 808c57c:	f7ff f93d 	bl	808b7fa <mbedtls_mpi_copy>
 808c580:	e7e6      	b.n	808c550 <mbedtls_mpi_exp_mod+0x17a>
    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
 808c582:	a908      	add	r1, sp, #32
 808c584:	4630      	mov	r0, r6
 808c586:	f7ff f938 	bl	808b7fa <mbedtls_mpi_copy>
 808c58a:	4603      	mov	r3, r0
 808c58c:	2800      	cmp	r0, #0
 808c58e:	f040 8115 	bne.w	808c7bc <mbedtls_mpi_exp_mod+0x3e6>
{
    mbedtls_mpi_uint z = 1;
    mbedtls_mpi U;

    U.n = U.s = (int) z;
    U.p = &z;
 808c592:	ab07      	add	r3, sp, #28
/*
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    mbedtls_mpi_uint z = 1;
 808c594:	2701      	movs	r7, #1
    mbedtls_mpi U;

    U.n = U.s = (int) z;
    U.p = &z;
 808c596:	9313      	str	r3, [sp, #76]	; 0x4c

    return( mpi_montmul( A, &U, N, mm, T ) );
 808c598:	f8cd 9000 	str.w	r9, [sp]
 808c59c:	4623      	mov	r3, r4
 808c59e:	462a      	mov	r2, r5
 808c5a0:	a911      	add	r1, sp, #68	; 0x44
 808c5a2:	4630      	mov	r0, r6
/*
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    mbedtls_mpi_uint z = 1;
 808c5a4:	9707      	str	r7, [sp, #28]
    mbedtls_mpi U;

    U.n = U.s = (int) z;
 808c5a6:	9711      	str	r7, [sp, #68]	; 0x44
 808c5a8:	9712      	str	r7, [sp, #72]	; 0x48
    U.p = &z;

    return( mpi_montmul( A, &U, N, mm, T ) );
 808c5aa:	f7ff fade 	bl	808bb6a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 808c5ae:	4603      	mov	r3, r0
 808c5b0:	2800      	cmp	r0, #0
 808c5b2:	f040 8103 	bne.w	808c7bc <mbedtls_mpi_exp_mod+0x3e6>

    if( wsize > 1 )
 808c5b6:	45bb      	cmp	fp, r7
 808c5b8:	d05b      	beq.n	808c672 <mbedtls_mpi_exp_mod+0x29c>
    {
        /*
         * W[1 << (wsize - 1)] = W[1] ^ (wsize - 1)
         */
        j =  one << ( wsize - 1 );
 808c5ba:	f10b 33ff 	add.w	r3, fp, #4294967295
 808c5be:	9303      	str	r3, [sp, #12]
 808c5c0:	409f      	lsls	r7, r3

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
 808c5c2:	f04f 080c 	mov.w	r8, #12
 808c5c6:	ab14      	add	r3, sp, #80	; 0x50
 808c5c8:	fb08 3807 	mla	r8, r8, r7, r3
 808c5cc:	6869      	ldr	r1, [r5, #4]
 808c5ce:	4640      	mov	r0, r8
 808c5d0:	3101      	adds	r1, #1
 808c5d2:	f7ff f8e6 	bl	808b7a2 <mbedtls_mpi_grow>
 808c5d6:	4603      	mov	r3, r0
 808c5d8:	2800      	cmp	r0, #0
 808c5da:	f040 80ef 	bne.w	808c7bc <mbedtls_mpi_exp_mod+0x3e6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
 808c5de:	a917      	add	r1, sp, #92	; 0x5c
 808c5e0:	4640      	mov	r0, r8
 808c5e2:	f7ff f90a 	bl	808b7fa <mbedtls_mpi_copy>
 808c5e6:	4603      	mov	r3, r0
 808c5e8:	2800      	cmp	r0, #0
 808c5ea:	f040 80e7 	bne.w	808c7bc <mbedtls_mpi_exp_mod+0x3e6>
 808c5ee:	4682      	mov	sl, r0

        for( i = 0; i < wsize - 1; i++ )
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
 808c5f0:	4623      	mov	r3, r4
 808c5f2:	f8cd 9000 	str.w	r9, [sp]
 808c5f6:	462a      	mov	r2, r5
 808c5f8:	4641      	mov	r1, r8
 808c5fa:	4640      	mov	r0, r8
 808c5fc:	f7ff fab5 	bl	808bb6a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808c600:	4603      	mov	r3, r0
 808c602:	2800      	cmp	r0, #0
 808c604:	f040 80da 	bne.w	808c7bc <mbedtls_mpi_exp_mod+0x3e6>
        j =  one << ( wsize - 1 );

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );

        for( i = 0; i < wsize - 1; i++ )
 808c608:	9b03      	ldr	r3, [sp, #12]
 808c60a:	f10a 0a01 	add.w	sl, sl, #1
 808c60e:	4553      	cmp	r3, sl
 808c610:	d8ee      	bhi.n	808c5f0 <mbedtls_mpi_exp_mod+0x21a>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
 808c612:	3701      	adds	r7, #1
 808c614:	f04f 080c 	mov.w	r8, #12
 808c618:	ab14      	add	r3, sp, #80	; 0x50
 808c61a:	fb08 3807 	mla	r8, r8, r7, r3
 808c61e:	f04f 0901 	mov.w	r9, #1
 808c622:	fa09 f90b 	lsl.w	r9, r9, fp
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 808c626:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
 808c62a:	454f      	cmp	r7, r9
 808c62c:	d221      	bcs.n	808c672 <mbedtls_mpi_exp_mod+0x29c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
 808c62e:	6869      	ldr	r1, [r5, #4]
 808c630:	4640      	mov	r0, r8
 808c632:	3101      	adds	r1, #1
 808c634:	f7ff f8b5 	bl	808b7a2 <mbedtls_mpi_grow>
 808c638:	4603      	mov	r3, r0
 808c63a:	2800      	cmp	r0, #0
 808c63c:	f040 80be 	bne.w	808c7bc <mbedtls_mpi_exp_mod+0x3e6>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
 808c640:	f1a8 010c 	sub.w	r1, r8, #12
 808c644:	4640      	mov	r0, r8
 808c646:	f7ff f8d8 	bl	808b7fa <mbedtls_mpi_copy>
 808c64a:	4603      	mov	r3, r0
 808c64c:	2800      	cmp	r0, #0
 808c64e:	f040 80b5 	bne.w	808c7bc <mbedtls_mpi_exp_mod+0x3e6>

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 808c652:	4623      	mov	r3, r4
 808c654:	4640      	mov	r0, r8
 808c656:	f8cd a000 	str.w	sl, [sp]
 808c65a:	462a      	mov	r2, r5
 808c65c:	a917      	add	r1, sp, #92	; 0x5c
 808c65e:	f7ff fa84 	bl	808bb6a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808c662:	f108 080c 	add.w	r8, r8, #12
 808c666:	4603      	mov	r3, r0
 808c668:	2800      	cmp	r0, #0
 808c66a:	f040 80a7 	bne.w	808c7bc <mbedtls_mpi_exp_mod+0x3e6>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
 808c66e:	3701      	adds	r7, #1
 808c670:	e7db      	b.n	808c62a <mbedtls_mpi_exp_mod+0x254>

    nblimbs = E->n;
    bufsize = 0;
    nbits   = 0;
    wbits   = 0;
    state   = 0;
 808c672:	2700      	movs	r7, #0
        }
    }

    nblimbs = E->n;
    bufsize = 0;
    nbits   = 0;
 808c674:	46b9      	mov	r9, r7
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
        }
    }

    nblimbs = E->n;
    bufsize = 0;
 808c676:	46ba      	mov	sl, r7
    nbits   = 0;
    wbits   = 0;
 808c678:	46b8      	mov	r8, r7

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
        }
    }

    nblimbs = E->n;
 808c67a:	9b02      	ldr	r3, [sp, #8]
 808c67c:	685b      	ldr	r3, [r3, #4]
 808c67e:	9303      	str	r3, [sp, #12]
    wbits   = 0;
    state   = 0;

    while( 1 )
    {
        if( bufsize == 0 )
 808c680:	f1ba 0f00 	cmp.w	sl, #0
 808c684:	d10e      	bne.n	808c6a4 <mbedtls_mpi_exp_mod+0x2ce>
        {
            if( nblimbs == 0 )
 808c686:	9b03      	ldr	r3, [sp, #12]
 808c688:	b93b      	cbnz	r3, 808c69a <mbedtls_mpi_exp_mod+0x2c4>
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
 808c68a:	2301      	movs	r3, #1
 808c68c:	fa03 f30b 	lsl.w	r3, r3, fp
 808c690:	9305      	str	r3, [sp, #20]
 808c692:	9f03      	ldr	r7, [sp, #12]
 808c694:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
 808c698:	e05e      	b.n	808c758 <mbedtls_mpi_exp_mod+0x382>
        if( bufsize == 0 )
        {
            if( nblimbs == 0 )
                break;

            nblimbs--;
 808c69a:	9b03      	ldr	r3, [sp, #12]

            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
 808c69c:	f04f 0a20 	mov.w	sl, #32
        if( bufsize == 0 )
        {
            if( nblimbs == 0 )
                break;

            nblimbs--;
 808c6a0:	3b01      	subs	r3, #1
 808c6a2:	9303      	str	r3, [sp, #12]
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
        }

        bufsize--;

        ei = (E->p[nblimbs] >> bufsize) & 1;
 808c6a4:	9b02      	ldr	r3, [sp, #8]
 808c6a6:	9a03      	ldr	r2, [sp, #12]
 808c6a8:	689b      	ldr	r3, [r3, #8]
            nblimbs--;

            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
        }

        bufsize--;
 808c6aa:	f10a 3aff 	add.w	sl, sl, #4294967295

        ei = (E->p[nblimbs] >> bufsize) & 1;
 808c6ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 808c6b2:	fa23 f30a 	lsr.w	r3, r3, sl

        /*
         * skip leading 0s
         */
        if( ei == 0 && state == 0 )
 808c6b6:	f013 0301 	ands.w	r3, r3, #1
 808c6ba:	d10f      	bne.n	808c6dc <mbedtls_mpi_exp_mod+0x306>
 808c6bc:	2f00      	cmp	r7, #0
 808c6be:	d0df      	beq.n	808c680 <mbedtls_mpi_exp_mod+0x2aa>
            continue;

        if( ei == 0 && state == 1 )
 808c6c0:	2f01      	cmp	r7, #1
 808c6c2:	d10b      	bne.n	808c6dc <mbedtls_mpi_exp_mod+0x306>
        {
            /*
             * out of window, square X
             */
            MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 808c6c4:	ab0b      	add	r3, sp, #44	; 0x2c
 808c6c6:	9300      	str	r3, [sp, #0]
 808c6c8:	462a      	mov	r2, r5
 808c6ca:	4623      	mov	r3, r4
 808c6cc:	4631      	mov	r1, r6
 808c6ce:	4630      	mov	r0, r6
 808c6d0:	f7ff fa4b 	bl	808bb6a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808c6d4:	4603      	mov	r3, r0
 808c6d6:	2800      	cmp	r0, #0
 808c6d8:	d0d2      	beq.n	808c680 <mbedtls_mpi_exp_mod+0x2aa>
 808c6da:	e06f      	b.n	808c7bc <mbedtls_mpi_exp_mod+0x3e6>
        /*
         * add ei to current window
         */
        state = 2;

        nbits++;
 808c6dc:	f109 0901 	add.w	r9, r9, #1
        wbits |= ( ei << ( wsize - nbits ) );
 808c6e0:	ebc9 020b 	rsb	r2, r9, fp
 808c6e4:	4093      	lsls	r3, r2

        if( nbits == wsize )
 808c6e6:	45cb      	cmp	fp, r9
         * add ei to current window
         */
        state = 2;

        nbits++;
        wbits |= ( ei << ( wsize - nbits ) );
 808c6e8:	ea48 0803 	orr.w	r8, r8, r3

        if( nbits == wsize )
 808c6ec:	d001      	beq.n	808c6f2 <mbedtls_mpi_exp_mod+0x31c>
        }

        /*
         * add ei to current window
         */
        state = 2;
 808c6ee:	2702      	movs	r7, #2
 808c6f0:	e7c6      	b.n	808c680 <mbedtls_mpi_exp_mod+0x2aa>
 808c6f2:	2700      	movs	r7, #0
        {
            /*
             * X = X^wsize R^-1 mod N
             */
            for( i = 0; i < wsize; i++ )
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 808c6f4:	ab0b      	add	r3, sp, #44	; 0x2c
 808c6f6:	9300      	str	r3, [sp, #0]
 808c6f8:	462a      	mov	r2, r5
 808c6fa:	4623      	mov	r3, r4
 808c6fc:	4631      	mov	r1, r6
 808c6fe:	4630      	mov	r0, r6
 808c700:	f7ff fa33 	bl	808bb6a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808c704:	4603      	mov	r3, r0
 808c706:	2800      	cmp	r0, #0
 808c708:	d158      	bne.n	808c7bc <mbedtls_mpi_exp_mod+0x3e6>
        if( nbits == wsize )
        {
            /*
             * X = X^wsize R^-1 mod N
             */
            for( i = 0; i < wsize; i++ )
 808c70a:	3701      	adds	r7, #1
 808c70c:	45bb      	cmp	fp, r7
 808c70e:	d1f1      	bne.n	808c6f4 <mbedtls_mpi_exp_mod+0x31e>
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

            /*
             * X = X * W[wbits] R^-1 mod N
             */
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );
 808c710:	ab0b      	add	r3, sp, #44	; 0x2c
 808c712:	a814      	add	r0, sp, #80	; 0x50
 808c714:	210c      	movs	r1, #12
 808c716:	9300      	str	r3, [sp, #0]
 808c718:	fb01 0108 	mla	r1, r1, r8, r0
 808c71c:	4623      	mov	r3, r4
 808c71e:	462a      	mov	r2, r5
 808c720:	4630      	mov	r0, r6
 808c722:	f7ff fa22 	bl	808bb6a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808c726:	4603      	mov	r3, r0
 808c728:	2800      	cmp	r0, #0
 808c72a:	d147      	bne.n	808c7bc <mbedtls_mpi_exp_mod+0x3e6>

            state--;
 808c72c:	2701      	movs	r7, #1
            nbits = 0;
 808c72e:	4680      	mov	r8, r0
            wbits = 0;
 808c730:	4681      	mov	r9, r0
 808c732:	e7a5      	b.n	808c680 <mbedtls_mpi_exp_mod+0x2aa>
    /*
     * process the remaining bits
     */
    for( i = 0; i < nbits; i++ )
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 808c734:	4623      	mov	r3, r4
 808c736:	f8cd a000 	str.w	sl, [sp]
 808c73a:	462a      	mov	r2, r5
 808c73c:	4631      	mov	r1, r6
 808c73e:	4630      	mov	r0, r6
 808c740:	f7ff fa13 	bl	808bb6a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808c744:	4603      	mov	r3, r0
 808c746:	2800      	cmp	r0, #0
 808c748:	d138      	bne.n	808c7bc <mbedtls_mpi_exp_mod+0x3e6>

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
 808c74a:	9b05      	ldr	r3, [sp, #20]
     */
    for( i = 0; i < nbits; i++ )
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;
 808c74c:	ea4f 0848 	mov.w	r8, r8, lsl #1

        if( ( wbits & ( one << wsize ) ) != 0 )
 808c750:	ea18 0f03 	tst.w	r8, r3
 808c754:	d103      	bne.n	808c75e <mbedtls_mpi_exp_mod+0x388>
    }

    /*
     * process the remaining bits
     */
    for( i = 0; i < nbits; i++ )
 808c756:	3701      	adds	r7, #1
 808c758:	454f      	cmp	r7, r9
 808c75a:	d1eb      	bne.n	808c734 <mbedtls_mpi_exp_mod+0x35e>
 808c75c:	e00b      	b.n	808c776 <mbedtls_mpi_exp_mod+0x3a0>
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );
 808c75e:	4623      	mov	r3, r4
 808c760:	f8cd a000 	str.w	sl, [sp]
 808c764:	462a      	mov	r2, r5
 808c766:	a917      	add	r1, sp, #92	; 0x5c
 808c768:	4630      	mov	r0, r6
 808c76a:	f7ff f9fe 	bl	808bb6a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808c76e:	4603      	mov	r3, r0
 808c770:	2800      	cmp	r0, #0
 808c772:	d0f0      	beq.n	808c756 <mbedtls_mpi_exp_mod+0x380>
 808c774:	e022      	b.n	808c7bc <mbedtls_mpi_exp_mod+0x3e6>
/*
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    mbedtls_mpi_uint z = 1;
 808c776:	2301      	movs	r3, #1
 808c778:	9307      	str	r3, [sp, #28]
    mbedtls_mpi U;

    U.n = U.s = (int) z;
 808c77a:	9311      	str	r3, [sp, #68]	; 0x44
 808c77c:	9312      	str	r3, [sp, #72]	; 0x48
    U.p = &z;
 808c77e:	ab07      	add	r3, sp, #28
 808c780:	9313      	str	r3, [sp, #76]	; 0x4c

    return( mpi_montmul( A, &U, N, mm, T ) );
 808c782:	f8cd a000 	str.w	sl, [sp]
 808c786:	4623      	mov	r3, r4
 808c788:	462a      	mov	r2, r5
 808c78a:	a911      	add	r1, sp, #68	; 0x44
 808c78c:	4630      	mov	r0, r6
 808c78e:	f7ff f9ec 	bl	808bb6a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
    }

    /*
     * X = A^E * R * R^-1 mod N = A^E mod N
     */
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 808c792:	4603      	mov	r3, r0
 808c794:	b990      	cbnz	r0, 808c7bc <mbedtls_mpi_exp_mod+0x3e6>

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
 808c796:	9a04      	ldr	r2, [sp, #16]
 808c798:	3201      	adds	r2, #1
 808c79a:	d10f      	bne.n	808c7bc <mbedtls_mpi_exp_mod+0x3e6>
 808c79c:	9a02      	ldr	r2, [sp, #8]
 808c79e:	6852      	ldr	r2, [r2, #4]
 808c7a0:	b162      	cbz	r2, 808c7bc <mbedtls_mpi_exp_mod+0x3e6>
 808c7a2:	9a02      	ldr	r2, [sp, #8]
 808c7a4:	6892      	ldr	r2, [r2, #8]
 808c7a6:	6812      	ldr	r2, [r2, #0]
 808c7a8:	07d2      	lsls	r2, r2, #31
 808c7aa:	d507      	bpl.n	808c7bc <mbedtls_mpi_exp_mod+0x3e6>
    {
        X->s = -1;
 808c7ac:	9b04      	ldr	r3, [sp, #16]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
 808c7ae:	4632      	mov	r2, r6
     */
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
    {
        X->s = -1;
 808c7b0:	6033      	str	r3, [r6, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
 808c7b2:	4629      	mov	r1, r5
 808c7b4:	4630      	mov	r0, r6
 808c7b6:	f7ff fb31 	bl	808be1c <mbedtls_mpi_add_mpi>
 808c7ba:	4603      	mov	r3, r0
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 808c7bc:	2201      	movs	r2, #1
 808c7be:	f10b 34ff 	add.w	r4, fp, #4294967295
 808c7c2:	fa02 f404 	lsl.w	r4, r2, r4
 808c7c6:	fa02 f50b 	lsl.w	r5, r2, fp
        mbedtls_mpi_free( &W[i] );
 808c7ca:	260c      	movs	r6, #12
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 808c7cc:	42ac      	cmp	r4, r5
 808c7ce:	9302      	str	r3, [sp, #8]
 808c7d0:	d207      	bcs.n	808c7e2 <mbedtls_mpi_exp_mod+0x40c>
        mbedtls_mpi_free( &W[i] );
 808c7d2:	ab14      	add	r3, sp, #80	; 0x50
 808c7d4:	fb06 3004 	mla	r0, r6, r4, r3
 808c7d8:	f7fe ffcd 	bl	808b776 <mbedtls_mpi_free>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 808c7dc:	3401      	adds	r4, #1
 808c7de:	9b02      	ldr	r3, [sp, #8]
 808c7e0:	e7f4      	b.n	808c7cc <mbedtls_mpi_exp_mod+0x3f6>
        mbedtls_mpi_free( &W[i] );

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
 808c7e2:	a817      	add	r0, sp, #92	; 0x5c
 808c7e4:	f7fe ffc7 	bl	808b776 <mbedtls_mpi_free>
 808c7e8:	a80b      	add	r0, sp, #44	; 0x2c
 808c7ea:	f7fe ffc4 	bl	808b776 <mbedtls_mpi_free>
 808c7ee:	a80e      	add	r0, sp, #56	; 0x38
 808c7f0:	f7fe ffc1 	bl	808b776 <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
 808c7f4:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 808c7f8:	9b02      	ldr	r3, [sp, #8]
 808c7fa:	b10a      	cbz	r2, 808c800 <mbedtls_mpi_exp_mod+0x42a>
 808c7fc:	6892      	ldr	r2, [r2, #8]
 808c7fe:	b922      	cbnz	r2, 808c80a <mbedtls_mpi_exp_mod+0x434>
        mbedtls_mpi_free( &RR );
 808c800:	a808      	add	r0, sp, #32
 808c802:	9302      	str	r3, [sp, #8]
 808c804:	f7fe ffb7 	bl	808b776 <mbedtls_mpi_free>

    return( ret );
 808c808:	9b02      	ldr	r3, [sp, #8]
 808c80a:	4618      	mov	r0, r3
}
 808c80c:	f20d 6d54 	addw	sp, sp, #1620	; 0x654
 808c810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808c814 <mbedtls_mpi_gcd>:

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808c814:	b5f0      	push	{r4, r5, r6, r7, lr}
 808c816:	b08b      	sub	sp, #44	; 0x2c
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808c818:	2300      	movs	r3, #0
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c81a:	2601      	movs	r6, #1

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808c81c:	4607      	mov	r7, r0
    size_t lz, lzt;
    mbedtls_mpi TG, TA, TB;

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 808c81e:	a804      	add	r0, sp, #16

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808c820:	4615      	mov	r5, r2
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c822:	9601      	str	r6, [sp, #4]
    X->n = 0;
 808c824:	9302      	str	r3, [sp, #8]
    X->p = NULL;
 808c826:	9303      	str	r3, [sp, #12]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c828:	9604      	str	r6, [sp, #16]
    X->n = 0;
 808c82a:	9305      	str	r3, [sp, #20]
    X->p = NULL;
 808c82c:	9306      	str	r3, [sp, #24]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c82e:	9607      	str	r6, [sp, #28]
    X->n = 0;
 808c830:	9308      	str	r3, [sp, #32]
    X->p = NULL;
 808c832:	9309      	str	r3, [sp, #36]	; 0x24
    size_t lz, lzt;
    mbedtls_mpi TG, TA, TB;

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 808c834:	f7fe ffe1 	bl	808b7fa <mbedtls_mpi_copy>
 808c838:	4604      	mov	r4, r0
 808c83a:	2800      	cmp	r0, #0
 808c83c:	d163      	bne.n	808c906 <mbedtls_mpi_gcd+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 808c83e:	4629      	mov	r1, r5
 808c840:	a807      	add	r0, sp, #28
 808c842:	f7fe ffda 	bl	808b7fa <mbedtls_mpi_copy>
 808c846:	4604      	mov	r4, r0
 808c848:	2800      	cmp	r0, #0
 808c84a:	d15c      	bne.n	808c906 <mbedtls_mpi_gcd+0xf2>

    lz = mbedtls_mpi_lsb( &TA );
 808c84c:	a804      	add	r0, sp, #16
 808c84e:	f7ff f82b 	bl	808b8a8 <mbedtls_mpi_lsb>
 808c852:	4605      	mov	r5, r0
    lzt = mbedtls_mpi_lsb( &TB );
 808c854:	a807      	add	r0, sp, #28
 808c856:	f7ff f827 	bl	808b8a8 <mbedtls_mpi_lsb>
 808c85a:	4285      	cmp	r5, r0
 808c85c:	bf28      	it	cs
 808c85e:	4605      	movcs	r5, r0

    if( lzt < lz )
        lz = lzt;

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
 808c860:	a804      	add	r0, sp, #16
 808c862:	4629      	mov	r1, r5
 808c864:	f7ff f906 	bl	808ba74 <mbedtls_mpi_shift_r>
 808c868:	4604      	mov	r4, r0
 808c86a:	2800      	cmp	r0, #0
 808c86c:	d14b      	bne.n	808c906 <mbedtls_mpi_gcd+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
 808c86e:	4629      	mov	r1, r5
 808c870:	a807      	add	r0, sp, #28
 808c872:	f7ff f8ff 	bl	808ba74 <mbedtls_mpi_shift_r>
 808c876:	4604      	mov	r4, r0
 808c878:	2800      	cmp	r0, #0
 808c87a:	d144      	bne.n	808c906 <mbedtls_mpi_gcd+0xf2>

    TA.s = TB.s = 1;
 808c87c:	9607      	str	r6, [sp, #28]
 808c87e:	9604      	str	r6, [sp, #16]

    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 808c880:	2100      	movs	r1, #0
 808c882:	a804      	add	r0, sp, #16
 808c884:	f7ff fa1a 	bl	808bcbc <mbedtls_mpi_cmp_int>
 808c888:	2800      	cmp	r0, #0
 808c88a:	d031      	beq.n	808c8f0 <mbedtls_mpi_gcd+0xdc>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
 808c88c:	a804      	add	r0, sp, #16
 808c88e:	f7ff f80b 	bl	808b8a8 <mbedtls_mpi_lsb>
 808c892:	4601      	mov	r1, r0
 808c894:	a804      	add	r0, sp, #16
 808c896:	f7ff f8ed 	bl	808ba74 <mbedtls_mpi_shift_r>
 808c89a:	4604      	mov	r4, r0
 808c89c:	2800      	cmp	r0, #0
 808c89e:	d132      	bne.n	808c906 <mbedtls_mpi_gcd+0xf2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
 808c8a0:	a807      	add	r0, sp, #28
 808c8a2:	f7ff f801 	bl	808b8a8 <mbedtls_mpi_lsb>
 808c8a6:	4601      	mov	r1, r0
 808c8a8:	a807      	add	r0, sp, #28
 808c8aa:	f7ff f8e3 	bl	808ba74 <mbedtls_mpi_shift_r>
 808c8ae:	4604      	mov	r4, r0
 808c8b0:	bb48      	cbnz	r0, 808c906 <mbedtls_mpi_gcd+0xf2>

        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
 808c8b2:	a907      	add	r1, sp, #28
 808c8b4:	a804      	add	r0, sp, #16
 808c8b6:	f7ff f9bc 	bl	808bc32 <mbedtls_mpi_cmp_mpi>
 808c8ba:	2800      	cmp	r0, #0
 808c8bc:	db09      	blt.n	808c8d2 <mbedtls_mpi_gcd+0xbe>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
 808c8be:	a904      	add	r1, sp, #16
 808c8c0:	aa07      	add	r2, sp, #28
 808c8c2:	4608      	mov	r0, r1
 808c8c4:	f7ff fa6a 	bl	808bd9c <mbedtls_mpi_sub_abs>
 808c8c8:	4604      	mov	r4, r0
 808c8ca:	b9e0      	cbnz	r0, 808c906 <mbedtls_mpi_gcd+0xf2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );
 808c8cc:	2101      	movs	r1, #1
 808c8ce:	a804      	add	r0, sp, #16
 808c8d0:	e008      	b.n	808c8e4 <mbedtls_mpi_gcd+0xd0>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
 808c8d2:	a907      	add	r1, sp, #28
 808c8d4:	aa04      	add	r2, sp, #16
 808c8d6:	4608      	mov	r0, r1
 808c8d8:	f7ff fa60 	bl	808bd9c <mbedtls_mpi_sub_abs>
 808c8dc:	4604      	mov	r4, r0
 808c8de:	b990      	cbnz	r0, 808c906 <mbedtls_mpi_gcd+0xf2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 808c8e0:	2101      	movs	r1, #1
 808c8e2:	a807      	add	r0, sp, #28
 808c8e4:	f7ff f8c6 	bl	808ba74 <mbedtls_mpi_shift_r>
 808c8e8:	4604      	mov	r4, r0
 808c8ea:	2800      	cmp	r0, #0
 808c8ec:	d0c8      	beq.n	808c880 <mbedtls_mpi_gcd+0x6c>
 808c8ee:	e00a      	b.n	808c906 <mbedtls_mpi_gcd+0xf2>
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
 808c8f0:	4629      	mov	r1, r5
 808c8f2:	a807      	add	r0, sp, #28
 808c8f4:	f7ff f86f 	bl	808b9d6 <mbedtls_mpi_shift_l>
 808c8f8:	4604      	mov	r4, r0
 808c8fa:	b920      	cbnz	r0, 808c906 <mbedtls_mpi_gcd+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
 808c8fc:	a907      	add	r1, sp, #28
 808c8fe:	4638      	mov	r0, r7
 808c900:	f7fe ff7b 	bl	808b7fa <mbedtls_mpi_copy>
 808c904:	4604      	mov	r4, r0

cleanup:

    mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );
 808c906:	a801      	add	r0, sp, #4
 808c908:	f7fe ff35 	bl	808b776 <mbedtls_mpi_free>
 808c90c:	a804      	add	r0, sp, #16
 808c90e:	f7fe ff32 	bl	808b776 <mbedtls_mpi_free>
 808c912:	a807      	add	r0, sp, #28
 808c914:	f7fe ff2f 	bl	808b776 <mbedtls_mpi_free>

    return( ret );
}
 808c918:	4620      	mov	r0, r4
 808c91a:	b00b      	add	sp, #44	; 0x2c
 808c91c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808c91e <mbedtls_mpi_fill_random>:
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 808c91e:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( size > MBEDTLS_MPI_MAX_SIZE )
 808c920:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 808c924:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 808c928:	4605      	mov	r5, r0
 808c92a:	460c      	mov	r4, r1
 808c92c:	4616      	mov	r6, r2
    int ret;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( size > MBEDTLS_MPI_MAX_SIZE )
 808c92e:	d814      	bhi.n	808c95a <mbedtls_mpi_fill_random+0x3c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    MBEDTLS_MPI_CHK( f_rng( p_rng, buf, size ) );
 808c930:	460a      	mov	r2, r1
 808c932:	4618      	mov	r0, r3
 808c934:	4669      	mov	r1, sp
 808c936:	47b0      	blx	r6
 808c938:	b920      	cbnz	r0, 808c944 <mbedtls_mpi_fill_random+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( X, buf, size ) );
 808c93a:	4622      	mov	r2, r4
 808c93c:	4669      	mov	r1, sp
 808c93e:	4628      	mov	r0, r5
 808c940:	f7fe fff1 	bl	808b926 <mbedtls_mpi_read_binary>
 808c944:	2300      	movs	r3, #0
    volatile mbedtls_mpi_uint *p = (mbedtls_mpi_uint *)v; while( n-- ) *p++ = 0;
}

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808c946:	f240 4401 	movw	r4, #1025	; 0x401
 808c94a:	4619      	mov	r1, r3
 808c94c:	eb0d 0203 	add.w	r2, sp, r3
 808c950:	3301      	adds	r3, #1
 808c952:	42a3      	cmp	r3, r4
 808c954:	d003      	beq.n	808c95e <mbedtls_mpi_fill_random+0x40>
 808c956:	7011      	strb	r1, [r2, #0]
 808c958:	e7f8      	b.n	808c94c <mbedtls_mpi_fill_random+0x2e>
{
    int ret;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( size > MBEDTLS_MPI_MAX_SIZE )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 808c95a:	f06f 0003 	mvn.w	r0, #3
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( X, buf, size ) );

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
    return( ret );
}
 808c95e:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
 808c962:	bd70      	pop	{r4, r5, r6, pc}

0808c964 <mbedtls_mpi_inv_mod>:

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
 808c964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808c968:	4680      	mov	r8, r0
 808c96a:	b09c      	sub	sp, #112	; 0x70
 808c96c:	460f      	mov	r7, r1
    int ret;
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 808c96e:	4610      	mov	r0, r2
 808c970:	2101      	movs	r1, #1

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
 808c972:	4616      	mov	r6, r2
    int ret;
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 808c974:	f7ff f9a2 	bl	808bcbc <mbedtls_mpi_cmp_int>
 808c978:	2800      	cmp	r0, #0
 808c97a:	f340 814c 	ble.w	808cc16 <mbedtls_mpi_inv_mod+0x2b2>
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808c97e:	2300      	movs	r3, #0
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c980:	2501      	movs	r5, #1

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 808c982:	4632      	mov	r2, r6
 808c984:	4639      	mov	r1, r7
 808c986:	a801      	add	r0, sp, #4
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c988:	9504      	str	r5, [sp, #16]
    X->n = 0;
 808c98a:	9305      	str	r3, [sp, #20]
    X->p = NULL;
 808c98c:	9306      	str	r3, [sp, #24]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c98e:	9507      	str	r5, [sp, #28]
    X->n = 0;
 808c990:	9308      	str	r3, [sp, #32]
    X->p = NULL;
 808c992:	9309      	str	r3, [sp, #36]	; 0x24
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c994:	950a      	str	r5, [sp, #40]	; 0x28
    X->n = 0;
 808c996:	930b      	str	r3, [sp, #44]	; 0x2c
    X->p = NULL;
 808c998:	930c      	str	r3, [sp, #48]	; 0x30
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c99a:	950d      	str	r5, [sp, #52]	; 0x34
    X->n = 0;
 808c99c:	930e      	str	r3, [sp, #56]	; 0x38
    X->p = NULL;
 808c99e:	930f      	str	r3, [sp, #60]	; 0x3c
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c9a0:	9501      	str	r5, [sp, #4]
    X->n = 0;
 808c9a2:	9302      	str	r3, [sp, #8]
    X->p = NULL;
 808c9a4:	9303      	str	r3, [sp, #12]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c9a6:	9510      	str	r5, [sp, #64]	; 0x40
    X->n = 0;
 808c9a8:	9311      	str	r3, [sp, #68]	; 0x44
    X->p = NULL;
 808c9aa:	9312      	str	r3, [sp, #72]	; 0x48
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c9ac:	9513      	str	r5, [sp, #76]	; 0x4c
    X->n = 0;
 808c9ae:	9314      	str	r3, [sp, #80]	; 0x50
    X->p = NULL;
 808c9b0:	9315      	str	r3, [sp, #84]	; 0x54
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c9b2:	9516      	str	r5, [sp, #88]	; 0x58
    X->n = 0;
 808c9b4:	9317      	str	r3, [sp, #92]	; 0x5c
    X->p = NULL;
 808c9b6:	9318      	str	r3, [sp, #96]	; 0x60
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c9b8:	9519      	str	r5, [sp, #100]	; 0x64
    X->n = 0;
 808c9ba:	931a      	str	r3, [sp, #104]	; 0x68
    X->p = NULL;
 808c9bc:	931b      	str	r3, [sp, #108]	; 0x6c

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 808c9be:	f7ff ff29 	bl	808c814 <mbedtls_mpi_gcd>
 808c9c2:	4604      	mov	r4, r0
 808c9c4:	2800      	cmp	r0, #0
 808c9c6:	f040 8109 	bne.w	808cbdc <mbedtls_mpi_inv_mod+0x278>

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
 808c9ca:	4629      	mov	r1, r5
 808c9cc:	a801      	add	r0, sp, #4
 808c9ce:	f7ff f975 	bl	808bcbc <mbedtls_mpi_cmp_int>
 808c9d2:	2800      	cmp	r0, #0
 808c9d4:	f040 8100 	bne.w	808cbd8 <mbedtls_mpi_inv_mod+0x274>
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
 808c9d8:	4632      	mov	r2, r6
 808c9da:	4639      	mov	r1, r7
 808c9dc:	a804      	add	r0, sp, #16
 808c9de:	f7ff fcc8 	bl	808c372 <mbedtls_mpi_mod_mpi>
 808c9e2:	4604      	mov	r4, r0
 808c9e4:	2800      	cmp	r0, #0
 808c9e6:	f040 80f9 	bne.w	808cbdc <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
 808c9ea:	a904      	add	r1, sp, #16
 808c9ec:	a807      	add	r0, sp, #28
 808c9ee:	f7fe ff04 	bl	808b7fa <mbedtls_mpi_copy>
 808c9f2:	4604      	mov	r4, r0
 808c9f4:	2800      	cmp	r0, #0
 808c9f6:	f040 80f1 	bne.w	808cbdc <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
 808c9fa:	4631      	mov	r1, r6
 808c9fc:	a810      	add	r0, sp, #64	; 0x40
 808c9fe:	f7fe fefc 	bl	808b7fa <mbedtls_mpi_copy>
 808ca02:	4604      	mov	r4, r0
 808ca04:	2800      	cmp	r0, #0
 808ca06:	f040 80e9 	bne.w	808cbdc <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
 808ca0a:	4631      	mov	r1, r6
 808ca0c:	a813      	add	r0, sp, #76	; 0x4c
 808ca0e:	f7fe fef4 	bl	808b7fa <mbedtls_mpi_copy>
 808ca12:	4604      	mov	r4, r0
 808ca14:	2800      	cmp	r0, #0
 808ca16:	f040 80e1 	bne.w	808cbdc <mbedtls_mpi_inv_mod+0x278>

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
 808ca1a:	4629      	mov	r1, r5
 808ca1c:	a80a      	add	r0, sp, #40	; 0x28
 808ca1e:	f7fe ff16 	bl	808b84e <mbedtls_mpi_lset>
 808ca22:	4604      	mov	r4, r0
 808ca24:	2800      	cmp	r0, #0
 808ca26:	f040 80d9 	bne.w	808cbdc <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
 808ca2a:	4601      	mov	r1, r0
 808ca2c:	a80d      	add	r0, sp, #52	; 0x34
 808ca2e:	f7fe ff0e 	bl	808b84e <mbedtls_mpi_lset>
 808ca32:	4604      	mov	r4, r0
 808ca34:	2800      	cmp	r0, #0
 808ca36:	f040 80d1 	bne.w	808cbdc <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
 808ca3a:	4601      	mov	r1, r0
 808ca3c:	a816      	add	r0, sp, #88	; 0x58
 808ca3e:	f7fe ff06 	bl	808b84e <mbedtls_mpi_lset>
 808ca42:	4604      	mov	r4, r0
 808ca44:	2800      	cmp	r0, #0
 808ca46:	f040 80c9 	bne.w	808cbdc <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
 808ca4a:	4629      	mov	r1, r5
 808ca4c:	a819      	add	r0, sp, #100	; 0x64
 808ca4e:	f7fe fefe 	bl	808b84e <mbedtls_mpi_lset>
 808ca52:	4604      	mov	r4, r0
 808ca54:	2800      	cmp	r0, #0
 808ca56:	f040 80c1 	bne.w	808cbdc <mbedtls_mpi_inv_mod+0x278>

    do
    {
        while( ( TU.p[0] & 1 ) == 0 )
 808ca5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808ca5c:	681b      	ldr	r3, [r3, #0]
 808ca5e:	07dd      	lsls	r5, r3, #31
 808ca60:	d44c      	bmi.n	808cafc <mbedtls_mpi_inv_mod+0x198>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
 808ca62:	2101      	movs	r1, #1
 808ca64:	a807      	add	r0, sp, #28
 808ca66:	f7ff f805 	bl	808ba74 <mbedtls_mpi_shift_r>
 808ca6a:	4604      	mov	r4, r0
 808ca6c:	2800      	cmp	r0, #0
 808ca6e:	f040 80b5 	bne.w	808cbdc <mbedtls_mpi_inv_mod+0x278>

            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
 808ca72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808ca74:	681b      	ldr	r3, [r3, #0]
 808ca76:	07dc      	lsls	r4, r3, #31
 808ca78:	d410      	bmi.n	808ca9c <mbedtls_mpi_inv_mod+0x138>
 808ca7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 808ca7c:	681b      	ldr	r3, [r3, #0]
 808ca7e:	07d8      	lsls	r0, r3, #31
 808ca80:	d40c      	bmi.n	808ca9c <mbedtls_mpi_inv_mod+0x138>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
 808ca82:	2101      	movs	r1, #1
 808ca84:	a80a      	add	r0, sp, #40	; 0x28
 808ca86:	f7fe fff5 	bl	808ba74 <mbedtls_mpi_shift_r>
 808ca8a:	4604      	mov	r4, r0
 808ca8c:	2800      	cmp	r0, #0
 808ca8e:	f040 80a5 	bne.w	808cbdc <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 808ca92:	2101      	movs	r1, #1
 808ca94:	a80d      	add	r0, sp, #52	; 0x34
 808ca96:	f7fe ffed 	bl	808ba74 <mbedtls_mpi_shift_r>
 808ca9a:	e7da      	b.n	808ca52 <mbedtls_mpi_inv_mod+0xee>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );

            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
 808ca9c:	a90a      	add	r1, sp, #40	; 0x28
 808ca9e:	aa10      	add	r2, sp, #64	; 0x40
 808caa0:	4608      	mov	r0, r1
 808caa2:	f7ff f9bb 	bl	808be1c <mbedtls_mpi_add_mpi>
 808caa6:	4604      	mov	r4, r0
 808caa8:	2800      	cmp	r0, #0
 808caaa:	f040 8097 	bne.w	808cbdc <mbedtls_mpi_inv_mod+0x278>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
 808caae:	a90d      	add	r1, sp, #52	; 0x34
 808cab0:	aa04      	add	r2, sp, #16
 808cab2:	4608      	mov	r0, r1
 808cab4:	f7ff f9d3 	bl	808be5e <mbedtls_mpi_sub_mpi>
 808cab8:	4604      	mov	r4, r0
 808caba:	2800      	cmp	r0, #0
 808cabc:	d0e1      	beq.n	808ca82 <mbedtls_mpi_inv_mod+0x11e>
 808cabe:	e08d      	b.n	808cbdc <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
        }

        while( ( TV.p[0] & 1 ) == 0 )
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
 808cac0:	2101      	movs	r1, #1
 808cac2:	a813      	add	r0, sp, #76	; 0x4c
 808cac4:	f7fe ffd6 	bl	808ba74 <mbedtls_mpi_shift_r>
 808cac8:	4604      	mov	r4, r0
 808caca:	2800      	cmp	r0, #0
 808cacc:	f040 8086 	bne.w	808cbdc <mbedtls_mpi_inv_mod+0x278>

            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
 808cad0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 808cad2:	681b      	ldr	r3, [r3, #0]
 808cad4:	07da      	lsls	r2, r3, #31
 808cad6:	d416      	bmi.n	808cb06 <mbedtls_mpi_inv_mod+0x1a2>
 808cad8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808cada:	681b      	ldr	r3, [r3, #0]
 808cadc:	07db      	lsls	r3, r3, #31
 808cade:	d412      	bmi.n	808cb06 <mbedtls_mpi_inv_mod+0x1a2>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
 808cae0:	2101      	movs	r1, #1
 808cae2:	a816      	add	r0, sp, #88	; 0x58
 808cae4:	f7fe ffc6 	bl	808ba74 <mbedtls_mpi_shift_r>
 808cae8:	4604      	mov	r4, r0
 808caea:	2800      	cmp	r0, #0
 808caec:	d176      	bne.n	808cbdc <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
 808caee:	2101      	movs	r1, #1
 808caf0:	a819      	add	r0, sp, #100	; 0x64
 808caf2:	f7fe ffbf 	bl	808ba74 <mbedtls_mpi_shift_r>
 808caf6:	4604      	mov	r4, r0
 808caf8:	2800      	cmp	r0, #0
 808cafa:	d16f      	bne.n	808cbdc <mbedtls_mpi_inv_mod+0x278>

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
        }

        while( ( TV.p[0] & 1 ) == 0 )
 808cafc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808cafe:	681b      	ldr	r3, [r3, #0]
 808cb00:	07d9      	lsls	r1, r3, #31
 808cb02:	d411      	bmi.n	808cb28 <mbedtls_mpi_inv_mod+0x1c4>
 808cb04:	e7dc      	b.n	808cac0 <mbedtls_mpi_inv_mod+0x15c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );

            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
 808cb06:	a916      	add	r1, sp, #88	; 0x58
 808cb08:	aa10      	add	r2, sp, #64	; 0x40
 808cb0a:	4608      	mov	r0, r1
 808cb0c:	f7ff f986 	bl	808be1c <mbedtls_mpi_add_mpi>
 808cb10:	4604      	mov	r4, r0
 808cb12:	2800      	cmp	r0, #0
 808cb14:	d162      	bne.n	808cbdc <mbedtls_mpi_inv_mod+0x278>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
 808cb16:	a919      	add	r1, sp, #100	; 0x64
 808cb18:	aa04      	add	r2, sp, #16
 808cb1a:	4608      	mov	r0, r1
 808cb1c:	f7ff f99f 	bl	808be5e <mbedtls_mpi_sub_mpi>
 808cb20:	4604      	mov	r4, r0
 808cb22:	2800      	cmp	r0, #0
 808cb24:	d0dc      	beq.n	808cae0 <mbedtls_mpi_inv_mod+0x17c>
 808cb26:	e059      	b.n	808cbdc <mbedtls_mpi_inv_mod+0x278>

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
        }

        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
 808cb28:	a913      	add	r1, sp, #76	; 0x4c
 808cb2a:	a807      	add	r0, sp, #28
 808cb2c:	f7ff f881 	bl	808bc32 <mbedtls_mpi_cmp_mpi>
 808cb30:	2800      	cmp	r0, #0
 808cb32:	db1f      	blt.n	808cb74 <mbedtls_mpi_inv_mod+0x210>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
 808cb34:	a907      	add	r1, sp, #28
 808cb36:	aa13      	add	r2, sp, #76	; 0x4c
 808cb38:	4608      	mov	r0, r1
 808cb3a:	f7ff f990 	bl	808be5e <mbedtls_mpi_sub_mpi>
 808cb3e:	4604      	mov	r4, r0
 808cb40:	2800      	cmp	r0, #0
 808cb42:	d14b      	bne.n	808cbdc <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
 808cb44:	a90a      	add	r1, sp, #40	; 0x28
 808cb46:	aa16      	add	r2, sp, #88	; 0x58
 808cb48:	4608      	mov	r0, r1
 808cb4a:	f7ff f988 	bl	808be5e <mbedtls_mpi_sub_mpi>
 808cb4e:	4604      	mov	r4, r0
 808cb50:	2800      	cmp	r0, #0
 808cb52:	d143      	bne.n	808cbdc <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
 808cb54:	aa19      	add	r2, sp, #100	; 0x64
 808cb56:	a90d      	add	r1, sp, #52	; 0x34
 808cb58:	4608      	mov	r0, r1
 808cb5a:	f7ff f980 	bl	808be5e <mbedtls_mpi_sub_mpi>
 808cb5e:	4604      	mov	r4, r0
 808cb60:	2800      	cmp	r0, #0
 808cb62:	d13b      	bne.n	808cbdc <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
 808cb64:	2100      	movs	r1, #0
 808cb66:	a807      	add	r0, sp, #28
 808cb68:	f7ff f8a8 	bl	808bcbc <mbedtls_mpi_cmp_int>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );

    do
 808cb6c:	2800      	cmp	r0, #0
 808cb6e:	f47f af74 	bne.w	808ca5a <mbedtls_mpi_inv_mod+0xf6>
 808cb72:	e017      	b.n	808cba4 <mbedtls_mpi_inv_mod+0x240>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
 808cb74:	a913      	add	r1, sp, #76	; 0x4c
 808cb76:	aa07      	add	r2, sp, #28
 808cb78:	4608      	mov	r0, r1
 808cb7a:	f7ff f970 	bl	808be5e <mbedtls_mpi_sub_mpi>
 808cb7e:	4604      	mov	r4, r0
 808cb80:	bb60      	cbnz	r0, 808cbdc <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
 808cb82:	a916      	add	r1, sp, #88	; 0x58
 808cb84:	aa0a      	add	r2, sp, #40	; 0x28
 808cb86:	4608      	mov	r0, r1
 808cb88:	f7ff f969 	bl	808be5e <mbedtls_mpi_sub_mpi>
 808cb8c:	4604      	mov	r4, r0
 808cb8e:	bb28      	cbnz	r0, 808cbdc <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
 808cb90:	aa0d      	add	r2, sp, #52	; 0x34
 808cb92:	a919      	add	r1, sp, #100	; 0x64
 808cb94:	e7e0      	b.n	808cb58 <mbedtls_mpi_inv_mod+0x1f4>
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
 808cb96:	a916      	add	r1, sp, #88	; 0x58
 808cb98:	4632      	mov	r2, r6
 808cb9a:	4608      	mov	r0, r1
 808cb9c:	f7ff f93e 	bl	808be1c <mbedtls_mpi_add_mpi>
 808cba0:	4604      	mov	r4, r0
 808cba2:	b9d8      	cbnz	r0, 808cbdc <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 808cba4:	2100      	movs	r1, #0
 808cba6:	a816      	add	r0, sp, #88	; 0x58
 808cba8:	f7ff f888 	bl	808bcbc <mbedtls_mpi_cmp_int>
 808cbac:	2800      	cmp	r0, #0
 808cbae:	dbf2      	blt.n	808cb96 <mbedtls_mpi_inv_mod+0x232>
 808cbb0:	e006      	b.n	808cbc0 <mbedtls_mpi_inv_mod+0x25c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );

    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
 808cbb2:	a916      	add	r1, sp, #88	; 0x58
 808cbb4:	4632      	mov	r2, r6
 808cbb6:	4608      	mov	r0, r1
 808cbb8:	f7ff f951 	bl	808be5e <mbedtls_mpi_sub_mpi>
 808cbbc:	4604      	mov	r4, r0
 808cbbe:	b968      	cbnz	r0, 808cbdc <mbedtls_mpi_inv_mod+0x278>
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );

    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 808cbc0:	4631      	mov	r1, r6
 808cbc2:	a816      	add	r0, sp, #88	; 0x58
 808cbc4:	f7ff f835 	bl	808bc32 <mbedtls_mpi_cmp_mpi>
 808cbc8:	2800      	cmp	r0, #0
 808cbca:	daf2      	bge.n	808cbb2 <mbedtls_mpi_inv_mod+0x24e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
 808cbcc:	a916      	add	r1, sp, #88	; 0x58
 808cbce:	4640      	mov	r0, r8
 808cbd0:	f7fe fe13 	bl	808b7fa <mbedtls_mpi_copy>
 808cbd4:	4604      	mov	r4, r0
 808cbd6:	e001      	b.n	808cbdc <mbedtls_mpi_inv_mod+0x278>

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 808cbd8:	f06f 040d 	mvn.w	r4, #13

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );

cleanup:

    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
 808cbdc:	a804      	add	r0, sp, #16
 808cbde:	f7fe fdca 	bl	808b776 <mbedtls_mpi_free>
 808cbe2:	a807      	add	r0, sp, #28
 808cbe4:	f7fe fdc7 	bl	808b776 <mbedtls_mpi_free>
 808cbe8:	a80a      	add	r0, sp, #40	; 0x28
 808cbea:	f7fe fdc4 	bl	808b776 <mbedtls_mpi_free>
 808cbee:	a80d      	add	r0, sp, #52	; 0x34
 808cbf0:	f7fe fdc1 	bl	808b776 <mbedtls_mpi_free>
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
 808cbf4:	a801      	add	r0, sp, #4
 808cbf6:	f7fe fdbe 	bl	808b776 <mbedtls_mpi_free>
 808cbfa:	a810      	add	r0, sp, #64	; 0x40
 808cbfc:	f7fe fdbb 	bl	808b776 <mbedtls_mpi_free>
 808cc00:	a813      	add	r0, sp, #76	; 0x4c
 808cc02:	f7fe fdb8 	bl	808b776 <mbedtls_mpi_free>
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );
 808cc06:	a816      	add	r0, sp, #88	; 0x58
 808cc08:	f7fe fdb5 	bl	808b776 <mbedtls_mpi_free>
 808cc0c:	a819      	add	r0, sp, #100	; 0x64
 808cc0e:	f7fe fdb2 	bl	808b776 <mbedtls_mpi_free>

    return( ret );
 808cc12:	4620      	mov	r0, r4
 808cc14:	e001      	b.n	808cc1a <mbedtls_mpi_inv_mod+0x2b6>
{
    int ret;
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 808cc16:	f06f 0003 	mvn.w	r0, #3
    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );

    return( ret );
}
 808cc1a:	b01c      	add	sp, #112	; 0x70
 808cc1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808cc20 <mbedtls_pk_init>:
/*
 * Initialise a mbedtls_pk_context
 */
void mbedtls_pk_init( mbedtls_pk_context *ctx )
{
    if( ctx == NULL )
 808cc20:	b110      	cbz	r0, 808cc28 <mbedtls_pk_init+0x8>
        return;

    ctx->pk_info = NULL;
 808cc22:	2300      	movs	r3, #0
 808cc24:	6003      	str	r3, [r0, #0]
    ctx->pk_ctx = NULL;
 808cc26:	6043      	str	r3, [r0, #4]
 808cc28:	4770      	bx	lr

0808cc2a <mbedtls_pk_free>:

/*
 * Free (the components of) a mbedtls_pk_context
 */
void mbedtls_pk_free( mbedtls_pk_context *ctx )
{
 808cc2a:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->pk_info == NULL )
 808cc2c:	4604      	mov	r4, r0
 808cc2e:	b160      	cbz	r0, 808cc4a <mbedtls_pk_free+0x20>
 808cc30:	6803      	ldr	r3, [r0, #0]
 808cc32:	b153      	cbz	r3, 808cc4a <mbedtls_pk_free+0x20>
        return;

    ctx->pk_info->ctx_free_func( ctx->pk_ctx );
 808cc34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808cc36:	6840      	ldr	r0, [r0, #4]
 808cc38:	4798      	blx	r3
 808cc3a:	f104 0208 	add.w	r2, r4, #8
#include <limits.h>
#include <stdint.h>

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808cc3e:	2300      	movs	r3, #0
 808cc40:	4294      	cmp	r4, r2
 808cc42:	d002      	beq.n	808cc4a <mbedtls_pk_free+0x20>
 808cc44:	7023      	strb	r3, [r4, #0]
 808cc46:	3401      	adds	r4, #1
 808cc48:	e7fa      	b.n	808cc40 <mbedtls_pk_free+0x16>
 808cc4a:	bd10      	pop	{r4, pc}

0808cc4c <mbedtls_pk_info_from_type>:
/*
 * Get pk_info structure from type
 */
const mbedtls_pk_info_t * mbedtls_pk_info_from_type( mbedtls_pk_type_t pk_type )
{
    switch( pk_type ) {
 808cc4c:	2801      	cmp	r0, #1
#endif
        /* MBEDTLS_PK_RSA_ALT omitted on purpose */
        default:
            return( NULL );
    }
}
 808cc4e:	4802      	ldr	r0, [pc, #8]	; (808cc58 <mbedtls_pk_info_from_type+0xc>)
 808cc50:	bf18      	it	ne
 808cc52:	2000      	movne	r0, #0
 808cc54:	4770      	bx	lr
 808cc56:	bf00      	nop
 808cc58:	08094f68 	.word	0x08094f68

0808cc5c <mbedtls_pk_setup>:

/*
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
 808cc5c:	b570      	push	{r4, r5, r6, lr}
 808cc5e:	460e      	mov	r6, r1
    if( ctx == NULL || info == NULL || ctx->pk_info != NULL )
 808cc60:	4605      	mov	r5, r0
 808cc62:	b148      	cbz	r0, 808cc78 <mbedtls_pk_setup+0x1c>
 808cc64:	b141      	cbz	r1, 808cc78 <mbedtls_pk_setup+0x1c>
 808cc66:	6804      	ldr	r4, [r0, #0]
 808cc68:	b934      	cbnz	r4, 808cc78 <mbedtls_pk_setup+0x1c>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
 808cc6a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 808cc6c:	4798      	blx	r3
 808cc6e:	6068      	str	r0, [r5, #4]
 808cc70:	b120      	cbz	r0, 808cc7c <mbedtls_pk_setup+0x20>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );

    ctx->pk_info = info;
 808cc72:	602e      	str	r6, [r5, #0]

    return( 0 );
 808cc74:	4620      	mov	r0, r4
 808cc76:	bd70      	pop	{r4, r5, r6, pc}
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
    if( ctx == NULL || info == NULL || ctx->pk_info != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 808cc78:	4801      	ldr	r0, [pc, #4]	; (808cc80 <mbedtls_pk_setup+0x24>)
 808cc7a:	bd70      	pop	{r4, r5, r6, pc}

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );
 808cc7c:	4801      	ldr	r0, [pc, #4]	; (808cc84 <mbedtls_pk_setup+0x28>)

    ctx->pk_info = info;

    return( 0 );
}
 808cc7e:	bd70      	pop	{r4, r5, r6, pc}
 808cc80:	ffffc180 	.word	0xffffc180
 808cc84:	ffffc080 	.word	0xffffc080

0808cc88 <mbedtls_pk_can_do>:
 * Tell if a PK can do the operations of the given type
 */
int mbedtls_pk_can_do( const mbedtls_pk_context *ctx, mbedtls_pk_type_t type )
{
    /* null or NONE context can't do anything */
    if( ctx == NULL || ctx->pk_info == NULL )
 808cc88:	b120      	cbz	r0, 808cc94 <mbedtls_pk_can_do+0xc>
 808cc8a:	6803      	ldr	r3, [r0, #0]
 808cc8c:	b113      	cbz	r3, 808cc94 <mbedtls_pk_can_do+0xc>
        return( 0 );

    return( ctx->pk_info->can_do( type ) );
 808cc8e:	68db      	ldr	r3, [r3, #12]
 808cc90:	4608      	mov	r0, r1
 808cc92:	4718      	bx	r3
}
 808cc94:	2000      	movs	r0, #0
 808cc96:	4770      	bx	lr

0808cc98 <mbedtls_pk_verify>:
 * Verify a signature
 */
int mbedtls_pk_verify( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len )
{
 808cc98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808cc9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 808cca0:	460e      	mov	r6, r1
 808cca2:	4617      	mov	r7, r2
 808cca4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( ctx == NULL || ctx->pk_info == NULL ||
 808cca8:	4604      	mov	r4, r0
 808ccaa:	b910      	cbnz	r0, 808ccb2 <mbedtls_pk_verify+0x1a>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 808ccac:	480f      	ldr	r0, [pc, #60]	; (808ccec <mbedtls_pk_verify+0x54>)
 808ccae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 */
int mbedtls_pk_verify( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len )
{
    if( ctx == NULL || ctx->pk_info == NULL ||
 808ccb2:	6802      	ldr	r2, [r0, #0]
 808ccb4:	2a00      	cmp	r2, #0
 808ccb6:	d0f9      	beq.n	808ccac <mbedtls_pk_verify+0x14>
 */
static inline int pk_hashlen_helper( mbedtls_md_type_t md_alg, size_t *hash_len )
{
    const mbedtls_md_info_t *md_info;

    if( *hash_len != 0 )
 808ccb8:	b93b      	cbnz	r3, 808ccca <mbedtls_pk_verify+0x32>
        return( 0 );

    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 808ccba:	4608      	mov	r0, r1
 808ccbc:	f7fb f8b0 	bl	8087e20 <mbedtls_md_info_from_type>
 808ccc0:	2800      	cmp	r0, #0
 808ccc2:	d0f3      	beq.n	808ccac <mbedtls_pk_verify+0x14>
        return( -1 );

    *hash_len = mbedtls_md_get_size( md_info );
 808ccc4:	f7fb f9f0 	bl	80880a8 <mbedtls_md_get_size>
 808ccc8:	4603      	mov	r3, r0
{
    if( ctx == NULL || ctx->pk_info == NULL ||
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->verify_func == NULL )
 808ccca:	6822      	ldr	r2, [r4, #0]
 808cccc:	6915      	ldr	r5, [r2, #16]
 808ccce:	b155      	cbz	r5, 808cce6 <mbedtls_pk_verify+0x4e>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                       sig, sig_len ) );
 808ccd0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 808ccd4:	f8cd 8020 	str.w	r8, [sp, #32]
 808ccd8:	463a      	mov	r2, r7
 808ccda:	4631      	mov	r1, r6
 808ccdc:	6860      	ldr	r0, [r4, #4]
 808ccde:	46ac      	mov	ip, r5
}
 808cce0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    if( ctx->pk_info->verify_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                       sig, sig_len ) );
 808cce4:	4760      	bx	ip
    if( ctx == NULL || ctx->pk_info == NULL ||
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->verify_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 808cce6:	4802      	ldr	r0, [pc, #8]	; (808ccf0 <mbedtls_pk_verify+0x58>)
 808cce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808ccec:	ffffc180 	.word	0xffffc180
 808ccf0:	ffffc100 	.word	0xffffc100

0808ccf4 <mbedtls_pk_sign>:
 */
int mbedtls_pk_sign( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 808ccf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808ccf8:	af08      	add	r7, sp, #32
 808ccfa:	460d      	mov	r5, r1
 808ccfc:	e897 0780 	ldmia.w	r7, {r7, r8, r9, sl}
 808cd00:	4616      	mov	r6, r2
    if( ctx == NULL || ctx->pk_info == NULL ||
 808cd02:	4604      	mov	r4, r0
 808cd04:	b910      	cbnz	r0, 808cd0c <mbedtls_pk_sign+0x18>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 808cd06:	4813      	ldr	r0, [pc, #76]	; (808cd54 <mbedtls_pk_sign+0x60>)
 808cd08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
int mbedtls_pk_sign( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    if( ctx == NULL || ctx->pk_info == NULL ||
 808cd0c:	6802      	ldr	r2, [r0, #0]
 808cd0e:	2a00      	cmp	r2, #0
 808cd10:	d0f9      	beq.n	808cd06 <mbedtls_pk_sign+0x12>
 */
static inline int pk_hashlen_helper( mbedtls_md_type_t md_alg, size_t *hash_len )
{
    const mbedtls_md_info_t *md_info;

    if( *hash_len != 0 )
 808cd12:	b93b      	cbnz	r3, 808cd24 <mbedtls_pk_sign+0x30>
        return( 0 );

    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 808cd14:	4608      	mov	r0, r1
 808cd16:	f7fb f883 	bl	8087e20 <mbedtls_md_info_from_type>
 808cd1a:	2800      	cmp	r0, #0
 808cd1c:	d0f3      	beq.n	808cd06 <mbedtls_pk_sign+0x12>
        return( -1 );

    *hash_len = mbedtls_md_get_size( md_info );
 808cd1e:	f7fb f9c3 	bl	80880a8 <mbedtls_md_get_size>
 808cd22:	4603      	mov	r3, r0
{
    if( ctx == NULL || ctx->pk_info == NULL ||
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->sign_func == NULL )
 808cd24:	6822      	ldr	r2, [r4, #0]
 808cd26:	f8d2 e014 	ldr.w	lr, [r2, #20]
 808cd2a:	f1be 0f00 	cmp.w	lr, #0
 808cd2e:	d00d      	beq.n	808cd4c <mbedtls_pk_sign+0x58>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                     sig, sig_len, f_rng, p_rng ) );
 808cd30:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 808cd34:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 808cd38:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 808cd3c:	9708      	str	r7, [sp, #32]
 808cd3e:	4632      	mov	r2, r6
 808cd40:	4629      	mov	r1, r5
 808cd42:	6860      	ldr	r0, [r4, #4]
 808cd44:	46f4      	mov	ip, lr
}
 808cd46:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    if( ctx->pk_info->sign_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                     sig, sig_len, f_rng, p_rng ) );
 808cd4a:	4760      	bx	ip
    if( ctx == NULL || ctx->pk_info == NULL ||
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->sign_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 808cd4c:	4802      	ldr	r0, [pc, #8]	; (808cd58 <mbedtls_pk_sign+0x64>)
 808cd4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808cd52:	bf00      	nop
 808cd54:	ffffc180 	.word	0xffffc180
 808cd58:	ffffc100 	.word	0xffffc100

0808cd5c <mbedtls_pk_encrypt>:
 */
int mbedtls_pk_encrypt( mbedtls_pk_context *ctx,
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 808cd5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808cd5e:	f8dd e020 	ldr.w	lr, [sp, #32]
    if( ctx == NULL || ctx->pk_info == NULL )
 808cd62:	b140      	cbz	r0, 808cd76 <mbedtls_pk_encrypt+0x1a>
 808cd64:	6804      	ldr	r4, [r0, #0]
 808cd66:	b134      	cbz	r4, 808cd76 <mbedtls_pk_encrypt+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->encrypt_func == NULL )
 808cd68:	69e4      	ldr	r4, [r4, #28]
 808cd6a:	b134      	cbz	r4, 808cd7a <mbedtls_pk_encrypt+0x1e>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                output, olen, osize, f_rng, p_rng ) );
 808cd6c:	46a4      	mov	ip, r4
}
 808cd6e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

    if( ctx->pk_info->encrypt_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                output, olen, osize, f_rng, p_rng ) );
 808cd72:	6840      	ldr	r0, [r0, #4]
 808cd74:	4760      	bx	ip
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    if( ctx == NULL || ctx->pk_info == NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 808cd76:	4802      	ldr	r0, [pc, #8]	; (808cd80 <mbedtls_pk_encrypt+0x24>)
 808cd78:	bdf0      	pop	{r4, r5, r6, r7, pc}

    if( ctx->pk_info->encrypt_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 808cd7a:	4802      	ldr	r0, [pc, #8]	; (808cd84 <mbedtls_pk_encrypt+0x28>)

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                output, olen, osize, f_rng, p_rng ) );
}
 808cd7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808cd7e:	bf00      	nop
 808cd80:	ffffc180 	.word	0xffffc180
 808cd84:	ffffc100 	.word	0xffffc100

0808cd88 <mbedtls_pk_get_bitlen>:
/*
 * Get key size in bits
 */
size_t mbedtls_pk_get_bitlen( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 808cd88:	b120      	cbz	r0, 808cd94 <mbedtls_pk_get_bitlen+0xc>
 808cd8a:	6803      	ldr	r3, [r0, #0]
 808cd8c:	b113      	cbz	r3, 808cd94 <mbedtls_pk_get_bitlen+0xc>
        return( 0 );

    return( ctx->pk_info->get_bitlen( ctx->pk_ctx ) );
 808cd8e:	689b      	ldr	r3, [r3, #8]
 808cd90:	6840      	ldr	r0, [r0, #4]
 808cd92:	4718      	bx	r3
}
 808cd94:	2000      	movs	r0, #0
 808cd96:	4770      	bx	lr

0808cd98 <mbedtls_pk_verify_ext>:
 */
int mbedtls_pk_verify_ext( mbedtls_pk_type_t type, const void *options,
                   mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
 808cd98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808cd9c:	b087      	sub	sp, #28
 808cd9e:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 808cda2:	4683      	mov	fp, r0
 808cda4:	e898 0700 	ldmia.w	r8, {r8, r9, sl}
 808cda8:	460d      	mov	r5, r1
 808cdaa:	461f      	mov	r7, r3
 808cdac:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    if( ctx == NULL || ctx->pk_info == NULL )
 808cdae:	4614      	mov	r4, r2
 808cdb0:	b90a      	cbnz	r2, 808cdb6 <mbedtls_pk_verify_ext+0x1e>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 808cdb2:	4823      	ldr	r0, [pc, #140]	; (808ce40 <mbedtls_pk_verify_ext+0xa8>)
 808cdb4:	e040      	b.n	808ce38 <mbedtls_pk_verify_ext+0xa0>
int mbedtls_pk_verify_ext( mbedtls_pk_type_t type, const void *options,
                   mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 808cdb6:	6813      	ldr	r3, [r2, #0]
 808cdb8:	2b00      	cmp	r3, #0
 808cdba:	d0fa      	beq.n	808cdb2 <mbedtls_pk_verify_ext+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ! mbedtls_pk_can_do( ctx, type ) )
 808cdbc:	4601      	mov	r1, r0
 808cdbe:	4610      	mov	r0, r2
 808cdc0:	f7ff ff62 	bl	808cc88 <mbedtls_pk_can_do>
 808cdc4:	2800      	cmp	r0, #0
 808cdc6:	d034      	beq.n	808ce32 <mbedtls_pk_verify_ext+0x9a>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    if( type == MBEDTLS_PK_RSASSA_PSS )
 808cdc8:	f1bb 0f06 	cmp.w	fp, #6
 808cdcc:	d123      	bne.n	808ce16 <mbedtls_pk_verify_ext+0x7e>
#if SIZE_MAX > UINT_MAX
        if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

        if( options == NULL )
 808cdce:	2d00      	cmp	r5, #0
 808cdd0:	d0ef      	beq.n	808cdb2 <mbedtls_pk_verify_ext+0x1a>
 *
 * \return          Key length in bytes, or 0 on error
 */
static inline size_t mbedtls_pk_get_len( const mbedtls_pk_context *ctx )
{
    return( ( mbedtls_pk_get_bitlen( ctx ) + 7 ) / 8 );
 808cdd2:	4620      	mov	r0, r4
 808cdd4:	f7ff ffd8 	bl	808cd88 <mbedtls_pk_get_bitlen>
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

        pss_opts = (const mbedtls_pk_rsassa_pss_options *) options;

        if( sig_len < mbedtls_pk_get_len( ctx ) )
 808cdd8:	3007      	adds	r0, #7
 808cdda:	ebb6 0fd0 	cmp.w	r6, r0, lsr #3
 808cdde:	d32a      	bcc.n	808ce36 <mbedtls_pk_verify_ext+0x9e>
        ret = mbedtls_rsa_rsassa_pss_verify_ext( mbedtls_pk_rsa( *ctx ),
                NULL, NULL, MBEDTLS_RSA_PUBLIC,
                md_alg, (unsigned int) hash_len, hash,
                pss_opts->mgf1_hash_id,
                pss_opts->expected_salt_len,
                sig );
 808cde0:	686b      	ldr	r3, [r5, #4]
 808cde2:	e88d 0280 	stmia.w	sp, {r7, r9}
 808cde6:	9304      	str	r3, [sp, #16]
 808cde8:	782b      	ldrb	r3, [r5, #0]
 808cdea:	f8cd a014 	str.w	sl, [sp, #20]
 808cdee:	9303      	str	r3, [sp, #12]
 808cdf0:	f8cd 8008 	str.w	r8, [sp, #8]
 808cdf4:	2300      	movs	r3, #0
 808cdf6:	461a      	mov	r2, r3
 808cdf8:	4619      	mov	r1, r3
 808cdfa:	6860      	ldr	r0, [r4, #4]
 808cdfc:	f7f8 f8a6 	bl	8084f4c <mbedtls_rsa_rsassa_pss_verify_ext>
        if( ret != 0 )
 808ce00:	b9d0      	cbnz	r0, 808ce38 <mbedtls_pk_verify_ext+0xa0>
 808ce02:	4620      	mov	r0, r4
 808ce04:	f7ff ffc0 	bl	808cd88 <mbedtls_pk_get_bitlen>
            return( ret );

        if( sig_len > mbedtls_pk_get_len( ctx ) )
 808ce08:	3007      	adds	r0, #7
            return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

        return( 0 );
 808ce0a:	ebb6 0fd0 	cmp.w	r6, r0, lsr #3
 808ce0e:	480d      	ldr	r0, [pc, #52]	; (808ce44 <mbedtls_pk_verify_ext+0xac>)
 808ce10:	bf98      	it	ls
 808ce12:	2000      	movls	r0, #0
 808ce14:	e010      	b.n	808ce38 <mbedtls_pk_verify_ext+0xa0>
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_RSA_C && MBEDTLS_PKCS1_V21 */
    }

    /* General case: no options */
    if( options != NULL )
 808ce16:	2d00      	cmp	r5, #0
 808ce18:	d1cb      	bne.n	808cdb2 <mbedtls_pk_verify_ext+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
 808ce1a:	464b      	mov	r3, r9
 808ce1c:	4642      	mov	r2, r8
 808ce1e:	4639      	mov	r1, r7
 808ce20:	4620      	mov	r0, r4
 808ce22:	9611      	str	r6, [sp, #68]	; 0x44
 808ce24:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
}
 808ce28:	b007      	add	sp, #28
 808ce2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* General case: no options */
    if( options != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
 808ce2e:	f7ff bf33 	b.w	808cc98 <mbedtls_pk_verify>
{
    if( ctx == NULL || ctx->pk_info == NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ! mbedtls_pk_can_do( ctx, type ) )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 808ce32:	4805      	ldr	r0, [pc, #20]	; (808ce48 <mbedtls_pk_verify_ext+0xb0>)
 808ce34:	e000      	b.n	808ce38 <mbedtls_pk_verify_ext+0xa0>
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

        pss_opts = (const mbedtls_pk_rsassa_pss_options *) options;

        if( sig_len < mbedtls_pk_get_len( ctx ) )
            return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 808ce36:	4805      	ldr	r0, [pc, #20]	; (808ce4c <mbedtls_pk_verify_ext+0xb4>)
    /* General case: no options */
    if( options != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
}
 808ce38:	b007      	add	sp, #28
 808ce3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808ce3e:	bf00      	nop
 808ce40:	ffffc180 	.word	0xffffc180
 808ce44:	ffffc700 	.word	0xffffc700
 808ce48:	ffffc100 	.word	0xffffc100
 808ce4c:	ffffbc80 	.word	0xffffbc80

0808ce50 <mbedtls_pk_get_name>:
/*
 * Access the PK type name
 */
const char *mbedtls_pk_get_name( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 808ce50:	b118      	cbz	r0, 808ce5a <mbedtls_pk_get_name+0xa>
 808ce52:	6803      	ldr	r3, [r0, #0]
 808ce54:	b10b      	cbz	r3, 808ce5a <mbedtls_pk_get_name+0xa>
        return( "invalid PK" );

    return( ctx->pk_info->name );
 808ce56:	6858      	ldr	r0, [r3, #4]
 808ce58:	4770      	bx	lr
 * Access the PK type name
 */
const char *mbedtls_pk_get_name( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
        return( "invalid PK" );
 808ce5a:	4801      	ldr	r0, [pc, #4]	; (808ce60 <mbedtls_pk_get_name+0x10>)

    return( ctx->pk_info->name );
}
 808ce5c:	4770      	bx	lr
 808ce5e:	bf00      	nop
 808ce60:	08095e54 	.word	0x08095e54

0808ce64 <mbedtls_pk_get_type>:
/*
 * Access the PK type
 */
mbedtls_pk_type_t mbedtls_pk_get_type( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 808ce64:	b110      	cbz	r0, 808ce6c <mbedtls_pk_get_type+0x8>
 808ce66:	6800      	ldr	r0, [r0, #0]
 808ce68:	b100      	cbz	r0, 808ce6c <mbedtls_pk_get_type+0x8>
        return( MBEDTLS_PK_NONE );

    return( ctx->pk_info->type );
 808ce6a:	7800      	ldrb	r0, [r0, #0]
}
 808ce6c:	4770      	bx	lr
	...

0808ce70 <_ZL14aes_gen_tablesv>:
#define MUL(x,y) ( ( x && y ) ? pow[(log[x]+log[y]) % 255] : 0 )

static int aes_init_done = 0;

static void aes_gen_tables( void )
{
 808ce70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808ce74:	f6ad 0d14 	subw	sp, sp, #2068	; 0x814
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 808ce78:	2301      	movs	r3, #1
 808ce7a:	2200      	movs	r2, #0
    {
        pow[i] = x;
        log[x] = i;
 808ce7c:	f50d 6082 	add.w	r0, sp, #1040	; 0x410
    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
    {
        pow[i] = x;
 808ce80:	a904      	add	r1, sp, #16
 808ce82:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
 808ce86:	f013 0180 	ands.w	r1, r3, #128	; 0x80
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
    {
        pow[i] = x;
        log[x] = i;
 808ce8a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        x = ( x ^ XTIME( x ) ) & 0xFF;
 808ce8e:	bf18      	it	ne
 808ce90:	211b      	movne	r1, #27
 808ce92:	ea83 0343 	eor.w	r3, r3, r3, lsl #1
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 808ce96:	3201      	adds	r2, #1
    {
        pow[i] = x;
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
 808ce98:	404b      	eors	r3, r1
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 808ce9a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    {
        pow[i] = x;
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
 808ce9e:	b2db      	uxtb	r3, r3
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 808cea0:	d1ee      	bne.n	808ce80 <_ZL14aes_gen_tablesv+0x10>
    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
    {
        RCON[i] = (uint32_t) x;
 808cea2:	4c66      	ldr	r4, [pc, #408]	; (808d03c <_ZL14aes_gen_tablesv+0x1cc>)
 808cea4:	2301      	movs	r3, #1
 808cea6:	2200      	movs	r2, #0
        x = XTIME( x ) & 0xFF;
 808cea8:	f013 0180 	ands.w	r1, r3, #128	; 0x80
    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
    {
        RCON[i] = (uint32_t) x;
 808ceac:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        x = XTIME( x ) & 0xFF;
 808ceb0:	bf18      	it	ne
 808ceb2:	211b      	movne	r1, #27
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 808ceb4:	3201      	adds	r2, #1
    {
        RCON[i] = (uint32_t) x;
        x = XTIME( x ) & 0xFF;
 808ceb6:	ea81 0343 	eor.w	r3, r1, r3, lsl #1
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 808ceba:	2a0a      	cmp	r2, #10
    {
        RCON[i] = (uint32_t) x;
        x = XTIME( x ) & 0xFF;
 808cebc:	b2db      	uxtb	r3, r3
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 808cebe:	d1f3      	bne.n	808cea8 <_ZL14aes_gen_tablesv+0x38>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 808cec0:	4e5f      	ldr	r6, [pc, #380]	; (808d040 <_ZL14aes_gen_tablesv+0x1d0>)
 808cec2:	2363      	movs	r3, #99	; 0x63
    RSb[0x63] = 0x00;
 808cec4:	4d5f      	ldr	r5, [pc, #380]	; (808d044 <_ZL14aes_gen_tablesv+0x1d4>)
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 808cec6:	7033      	strb	r3, [r6, #0]
    RSb[0x63] = 0x00;
 808cec8:	2300      	movs	r3, #0
 808ceca:	f885 3063 	strb.w	r3, [r5, #99]	; 0x63

    for( i = 1; i < 256; i++ )
 808cece:	2401      	movs	r4, #1
    {
        x = pow[255 - log[i]];
 808ced0:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 808ced4:	aa04      	add	r2, sp, #16
 808ced6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 808ceda:	f852 e023 	ldr.w	lr, [r2, r3, lsl #2]

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 808cede:	ea4f 11ee 	mov.w	r1, lr, asr #7
 808cee2:	ea41 014e 	orr.w	r1, r1, lr, lsl #1
 808cee6:	b2c9      	uxtb	r1, r1
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 808cee8:	11ca      	asrs	r2, r1, #7
 808ceea:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 808ceee:	b2d2      	uxtb	r2, r2
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 808cef0:	11d3      	asrs	r3, r2, #7
 808cef2:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 808cef6:	b2db      	uxtb	r3, r3
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y ^ 0x63;
 808cef8:	f08e 0e63 	eor.w	lr, lr, #99	; 0x63
        x = pow[255 - log[i]];

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 808cefc:	11df      	asrs	r7, r3, #7
        x ^= y ^ 0x63;
 808cefe:	ea8e 0101 	eor.w	r1, lr, r1
        x = pow[255 - log[i]];

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 808cf02:	ea47 0743 	orr.w	r7, r7, r3, lsl #1
        x ^= y ^ 0x63;
 808cf06:	404a      	eors	r2, r1
 808cf08:	4053      	eors	r3, r2
 808cf0a:	b2fa      	uxtb	r2, r7
 808cf0c:	4053      	eors	r3, r2

        FSb[i] = (unsigned char) x;
 808cf0e:	5533      	strb	r3, [r6, r4]
        RSb[x] = (unsigned char) i;
 808cf10:	54ec      	strb	r4, [r5, r3]
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
    RSb[0x63] = 0x00;

    for( i = 1; i < 256; i++ )
 808cf12:	3401      	adds	r4, #1
 808cf14:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 808cf18:	d1da      	bne.n	808ced0 <_ZL14aes_gen_tablesv+0x60>
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 808cf1a:	6b83      	ldr	r3, [r0, #56]	; 0x38
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 808cf1c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 808cf1e:	9301      	str	r3, [sp, #4]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 808cf20:	6a43      	ldr	r3, [r0, #36]	; 0x24
    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
 808cf22:	f8df e11c 	ldr.w	lr, [pc, #284]	; 808d040 <_ZL14aes_gen_tablesv+0x1d0>
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 808cf26:	9302      	str	r3, [sp, #8]
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 808cf28:	6b43      	ldr	r3, [r0, #52]	; 0x34
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
                 ( (uint32_t) z << 24 );
 808cf2a:	f8df c12c 	ldr.w	ip, [pc, #300]	; 808d058 <_ZL14aes_gen_tablesv+0x1e8>

        FT1[i] = ROTL8( FT0[i] );
 808cf2e:	f8df 812c 	ldr.w	r8, [pc, #300]	; 808d05c <_ZL14aes_gen_tablesv+0x1ec>
        FT2[i] = ROTL8( FT1[i] );
 808cf32:	f8df 912c 	ldr.w	r9, [pc, #300]	; 808d060 <_ZL14aes_gen_tablesv+0x1f0>
        FT3[i] = ROTL8( FT2[i] );
 808cf36:	f8df a12c 	ldr.w	sl, [pc, #300]	; 808d064 <_ZL14aes_gen_tablesv+0x1f4>

        x = RSb[i];
 808cf3a:	f8df b108 	ldr.w	fp, [pc, #264]	; 808d044 <_ZL14aes_gen_tablesv+0x1d4>

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 808cf3e:	9303      	str	r3, [sp, #12]
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 808cf40:	2200      	movs	r2, #0
    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
 808cf42:	f812 000e 	ldrb.w	r0, [r2, lr]
 808cf46:	0094      	lsls	r4, r2, #2
        y = XTIME( x ) & 0xFF;
 808cf48:	f010 0f80 	tst.w	r0, #128	; 0x80
 808cf4c:	bf14      	ite	ne
 808cf4e:	211b      	movne	r1, #27
 808cf50:	2100      	moveq	r1, #0
 808cf52:	ea81 0140 	eor.w	r1, r1, r0, lsl #1
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
 808cf56:	0403      	lsls	r3, r0, #16
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
        y = XTIME( x ) & 0xFF;
 808cf58:	b2c9      	uxtb	r1, r1
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
 808cf5a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 808cf5e:	404b      	eors	r3, r1
 808cf60:	4041      	eors	r1, r0
 808cf62:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
                 ( (uint32_t) z << 24 );
 808cf66:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]

        FT1[i] = ROTL8( FT0[i] );
 808cf6a:	ea4f 6333 	mov.w	r3, r3, ror #24
 808cf6e:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
        FT2[i] = ROTL8( FT1[i] );
 808cf72:	ea4f 6333 	mov.w	r3, r3, ror #24
 808cf76:	f849 3022 	str.w	r3, [r9, r2, lsl #2]
        FT3[i] = ROTL8( FT2[i] );
 808cf7a:	ea4f 6333 	mov.w	r3, r3, ror #24
 808cf7e:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]

        x = RSb[i];
 808cf82:	f81b 3002 	ldrb.w	r3, [fp, r2]

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 808cf86:	b1d3      	cbz	r3, 808cfbe <_ZL14aes_gen_tablesv+0x14e>
 808cf88:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 808cf8c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 808cf90:	9801      	ldr	r0, [sp, #4]
 808cf92:	1845      	adds	r5, r0, r1
 808cf94:	20ff      	movs	r0, #255	; 0xff
 808cf96:	fb95 f6f0 	sdiv	r6, r5, r0
 808cf9a:	ebc6 2606 	rsb	r6, r6, r6, lsl #8
 808cf9e:	1bae      	subs	r6, r5, r6
 808cfa0:	ad04      	add	r5, sp, #16
 808cfa2:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 808cfa6:	9e02      	ldr	r6, [sp, #8]
 808cfa8:	4431      	add	r1, r6
 808cfaa:	fb91 f0f0 	sdiv	r0, r1, r0
 808cfae:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 808cfb2:	1a09      	subs	r1, r1, r0
 808cfb4:	a804      	add	r0, sp, #16
 808cfb6:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 808cfba:	0209      	lsls	r1, r1, #8
 808cfbc:	e001      	b.n	808cfc2 <_ZL14aes_gen_tablesv+0x152>
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 808cfbe:	461d      	mov	r5, r3
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 808cfc0:	4619      	mov	r1, r3
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 808cfc2:	404d      	eors	r5, r1
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 808cfc4:	b183      	cbz	r3, 808cfe8 <_ZL14aes_gen_tablesv+0x178>
 808cfc6:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 808cfca:	9803      	ldr	r0, [sp, #12]
 808cfcc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 808cfd0:	4401      	add	r1, r0
 808cfd2:	20ff      	movs	r0, #255	; 0xff
 808cfd4:	fb91 f0f0 	sdiv	r0, r1, r0
 808cfd8:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 808cfdc:	1a08      	subs	r0, r1, r0
 808cfde:	a904      	add	r1, sp, #16
 808cfe0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 808cfe4:	0409      	lsls	r1, r1, #16
 808cfe6:	e000      	b.n	808cfea <_ZL14aes_gen_tablesv+0x17a>
 808cfe8:	4619      	mov	r1, r3
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 808cfea:	404d      	eors	r5, r1
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 808cfec:	b173      	cbz	r3, 808d00c <_ZL14aes_gen_tablesv+0x19c>
 808cfee:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 808cff2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 808cff6:	21ff      	movs	r1, #255	; 0xff
 808cff8:	443b      	add	r3, r7
 808cffa:	fb93 f1f1 	sdiv	r1, r3, r1
 808cffe:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 808d002:	1a59      	subs	r1, r3, r1
 808d004:	ab04      	add	r3, sp, #16
 808d006:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 808d00a:	061b      	lsls	r3, r3, #24

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 808d00c:	405d      	eors	r5, r3
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 808d00e:	4b0e      	ldr	r3, [pc, #56]	; (808d048 <_ZL14aes_gen_tablesv+0x1d8>)
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 808d010:	3201      	adds	r2, #1
        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 808d012:	50e5      	str	r5, [r4, r3]

        RT1[i] = ROTL8( RT0[i] );
 808d014:	4b0d      	ldr	r3, [pc, #52]	; (808d04c <_ZL14aes_gen_tablesv+0x1dc>)
 808d016:	ea4f 6535 	mov.w	r5, r5, ror #24
 808d01a:	50e5      	str	r5, [r4, r3]
        RT2[i] = ROTL8( RT1[i] );
 808d01c:	4b0c      	ldr	r3, [pc, #48]	; (808d050 <_ZL14aes_gen_tablesv+0x1e0>)
 808d01e:	ea4f 6535 	mov.w	r5, r5, ror #24
 808d022:	50e5      	str	r5, [r4, r3]
        RT3[i] = ROTL8( RT2[i] );
 808d024:	4b0b      	ldr	r3, [pc, #44]	; (808d054 <_ZL14aes_gen_tablesv+0x1e4>)
 808d026:	ea4f 6535 	mov.w	r5, r5, ror #24
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 808d02a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );

        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
 808d02e:	50e5      	str	r5, [r4, r3]
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 808d030:	d187      	bne.n	808cf42 <_ZL14aes_gen_tablesv+0xd2>

        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
    }
}
 808d032:	f60d 0d14 	addw	sp, sp, #2068	; 0x814
 808d036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d03a:	bf00      	nop
 808d03c:	20003bf8 	.word	0x20003bf8
 808d040:	20002af8 	.word	0x20002af8
 808d044:	200029f8 	.word	0x200029f8
 808d048:	20002ff8 	.word	0x20002ff8
 808d04c:	200033f8 	.word	0x200033f8
 808d050:	200037f8 	.word	0x200037f8
 808d054:	20002bf8 	.word	0x20002bf8
 808d058:	200019f8 	.word	0x200019f8
 808d05c:	20001df8 	.word	0x20001df8
 808d060:	200021f8 	.word	0x200021f8
 808d064:	200025f8 	.word	0x200025f8

0808d068 <mbedtls_aes_init>:

#endif /* MBEDTLS_AES_ROM_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 808d068:	f44f 728c 	mov.w	r2, #280	; 0x118
 808d06c:	2100      	movs	r1, #0
 808d06e:	f006 bdac 	b.w	8093bca <memset>

0808d072 <mbedtls_aes_free>:
}

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
 808d072:	b138      	cbz	r0, 808d084 <mbedtls_aes_free+0x12>
 808d074:	f500 728c 	add.w	r2, r0, #280	; 0x118

#if !defined(MBEDTLS_AES_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 808d078:	2300      	movs	r3, #0
 808d07a:	4290      	cmp	r0, r2
 808d07c:	d002      	beq.n	808d084 <mbedtls_aes_free+0x12>
 808d07e:	7003      	strb	r3, [r0, #0]
 808d080:	3001      	adds	r0, #1
 808d082:	e7fa      	b.n	808d07a <mbedtls_aes_free+0x8>
 808d084:	4770      	bx	lr
	...

0808d088 <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 808d088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    unsigned int i;
    uint32_t *RK;

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 808d08a:	4e7a      	ldr	r6, [pc, #488]	; (808d274 <mbedtls_aes_setkey_enc+0x1ec>)
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 808d08c:	4604      	mov	r4, r0
    unsigned int i;
    uint32_t *RK;

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 808d08e:	6833      	ldr	r3, [r6, #0]
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 808d090:	460f      	mov	r7, r1
 808d092:	4615      	mov	r5, r2
    unsigned int i;
    uint32_t *RK;

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 808d094:	b91b      	cbnz	r3, 808d09e <mbedtls_aes_setkey_enc+0x16>
    {
        aes_gen_tables();
 808d096:	f7ff feeb 	bl	808ce70 <_ZL14aes_gen_tablesv>
        aes_init_done = 1;
 808d09a:	2301      	movs	r3, #1
 808d09c:	6033      	str	r3, [r6, #0]

    }
#endif

    switch( keybits )
 808d09e:	2dc0      	cmp	r5, #192	; 0xc0
 808d0a0:	d007      	beq.n	808d0b2 <mbedtls_aes_setkey_enc+0x2a>
 808d0a2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 808d0a6:	d006      	beq.n	808d0b6 <mbedtls_aes_setkey_enc+0x2e>
 808d0a8:	2d80      	cmp	r5, #128	; 0x80
 808d0aa:	f040 80dd 	bne.w	808d268 <mbedtls_aes_setkey_enc+0x1e0>
    {
        case 128: ctx->nr = 10; break;
 808d0ae:	230a      	movs	r3, #10
 808d0b0:	e002      	b.n	808d0b8 <mbedtls_aes_setkey_enc+0x30>
        case 192: ctx->nr = 12; break;
 808d0b2:	230c      	movs	r3, #12
 808d0b4:	e000      	b.n	808d0b8 <mbedtls_aes_setkey_enc+0x30>
        case 256: ctx->nr = 14; break;
 808d0b6:	230e      	movs	r3, #14
 808d0b8:	6023      	str	r3, [r4, #0]

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 808d0ba:	f104 0308 	add.w	r3, r4, #8
 808d0be:	6063      	str	r3, [r4, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 808d0c0:	096d      	lsrs	r5, r5, #5
 808d0c2:	2000      	movs	r0, #0
 808d0c4:	42a8      	cmp	r0, r5
 808d0c6:	d010      	beq.n	808d0ea <mbedtls_aes_setkey_enc+0x62>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
 808d0c8:	eb07 0180 	add.w	r1, r7, r0, lsl #2
 808d0cc:	788a      	ldrb	r2, [r1, #2]
 808d0ce:	784e      	ldrb	r6, [r1, #1]
 808d0d0:	0412      	lsls	r2, r2, #16
 808d0d2:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 808d0d6:	f817 6020 	ldrb.w	r6, [r7, r0, lsl #2]
 808d0da:	78c9      	ldrb	r1, [r1, #3]
 808d0dc:	4332      	orrs	r2, r6
 808d0de:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 808d0e2:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 808d0e6:	3001      	adds	r0, #1
 808d0e8:	e7ec      	b.n	808d0c4 <mbedtls_aes_setkey_enc+0x3c>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 808d0ea:	6822      	ldr	r2, [r4, #0]
 808d0ec:	2a0c      	cmp	r2, #12
 808d0ee:	d031      	beq.n	808d154 <mbedtls_aes_setkey_enc+0xcc>
 808d0f0:	2a0e      	cmp	r2, #14
 808d0f2:	d068      	beq.n	808d1c6 <mbedtls_aes_setkey_enc+0x13e>
 808d0f4:	2a0a      	cmp	r2, #10
 808d0f6:	f040 80ba 	bne.w	808d26e <mbedtls_aes_setkey_enc+0x1e6>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 808d0fa:	4f5f      	ldr	r7, [pc, #380]	; (808d278 <mbedtls_aes_setkey_enc+0x1f0>)
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 808d0fc:	4e5f      	ldr	r6, [pc, #380]	; (808d27c <mbedtls_aes_setkey_enc+0x1f4>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 808d0fe:	2500      	movs	r5, #0
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 808d100:	68dc      	ldr	r4, [r3, #12]
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808d102:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 808d106:	681a      	ldr	r2, [r3, #0]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 808d108:	3501      	adds	r5, #1
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808d10a:	4051      	eors	r1, r2
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 808d10c:	f3c4 2207 	ubfx	r2, r4, #8, #8
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808d110:	5cb0      	ldrb	r0, [r6, r2]
 808d112:	0e22      	lsrs	r2, r4, #24
 808d114:	5cb2      	ldrb	r2, [r6, r2]
 808d116:	4041      	eors	r1, r0
 808d118:	ea81 4102 	eor.w	r1, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 808d11c:	b2e2      	uxtb	r2, r4
            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808d11e:	5cb2      	ldrb	r2, [r6, r2]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 808d120:	2d0a      	cmp	r5, #10
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808d122:	ea81 6102 	eor.w	r1, r1, r2, lsl #24

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 808d126:	f3c4 4207 	ubfx	r2, r4, #16, #8
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808d12a:	5cb2      	ldrb	r2, [r6, r2]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 808d12c:	f103 0310 	add.w	r3, r3, #16
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808d130:	ea81 2202 	eor.w	r2, r1, r2, lsl #8
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
 808d134:	f853 1c0c 	ldr.w	r1, [r3, #-12]
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 808d138:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
 808d13a:	ea82 0201 	eor.w	r2, r2, r1
                RK[6]  = RK[2] ^ RK[5];
 808d13e:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
 808d142:	605a      	str	r2, [r3, #4]
                RK[6]  = RK[2] ^ RK[5];
 808d144:	ea82 0201 	eor.w	r2, r2, r1
 808d148:	609a      	str	r2, [r3, #8]
                RK[7]  = RK[3] ^ RK[6];
 808d14a:	ea82 0204 	eor.w	r2, r2, r4
 808d14e:	60da      	str	r2, [r3, #12]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 808d150:	d1d6      	bne.n	808d100 <mbedtls_aes_setkey_enc+0x78>
 808d152:	e08c      	b.n	808d26e <mbedtls_aes_setkey_enc+0x1e6>

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
 808d154:	4e48      	ldr	r6, [pc, #288]	; (808d278 <mbedtls_aes_setkey_enc+0x1f0>)
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 808d156:	4d49      	ldr	r5, [pc, #292]	; (808d27c <mbedtls_aes_setkey_enc+0x1f4>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 808d158:	2400      	movs	r4, #0
            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808d15a:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 808d15e:	6958      	ldr	r0, [r3, #20]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808d160:	681a      	ldr	r2, [r3, #0]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 808d162:	3401      	adds	r4, #1
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808d164:	404a      	eors	r2, r1
        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 808d166:	f3c0 2107 	ubfx	r1, r0, #8, #8
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808d16a:	5c69      	ldrb	r1, [r5, r1]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 808d16c:	2c08      	cmp	r4, #8
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808d16e:	ea82 0201 	eor.w	r2, r2, r1
 808d172:	ea4f 6110 	mov.w	r1, r0, lsr #24
 808d176:	5c69      	ldrb	r1, [r5, r1]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 808d178:	f103 0318 	add.w	r3, r3, #24
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808d17c:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 808d180:	b2c1      	uxtb	r1, r0
            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808d182:	5c69      	ldrb	r1, [r5, r1]
 808d184:	ea82 6201 	eor.w	r2, r2, r1, lsl #24

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 808d188:	f3c0 4107 	ubfx	r1, r0, #16, #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808d18c:	5c69      	ldrb	r1, [r5, r1]
 808d18e:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
 808d192:	f853 1c14 	ldr.w	r1, [r3, #-20]
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 808d196:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
 808d198:	ea82 0201 	eor.w	r2, r2, r1
                RK[8]  = RK[2] ^ RK[7];
 808d19c:	f853 1c10 	ldr.w	r1, [r3, #-16]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
 808d1a0:	605a      	str	r2, [r3, #4]
                RK[8]  = RK[2] ^ RK[7];
 808d1a2:	ea82 0201 	eor.w	r2, r2, r1
                RK[9]  = RK[3] ^ RK[8];
 808d1a6:	f853 1c0c 	ldr.w	r1, [r3, #-12]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
 808d1aa:	609a      	str	r2, [r3, #8]
                RK[9]  = RK[3] ^ RK[8];
 808d1ac:	ea82 0201 	eor.w	r2, r2, r1
                RK[10] = RK[4] ^ RK[9];
 808d1b0:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
                RK[9]  = RK[3] ^ RK[8];
 808d1b4:	60da      	str	r2, [r3, #12]
                RK[10] = RK[4] ^ RK[9];
 808d1b6:	ea82 0201 	eor.w	r2, r2, r1
 808d1ba:	611a      	str	r2, [r3, #16]
                RK[11] = RK[5] ^ RK[10];
 808d1bc:	ea82 0200 	eor.w	r2, r2, r0
 808d1c0:	615a      	str	r2, [r3, #20]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 808d1c2:	d1ca      	bne.n	808d15a <mbedtls_aes_setkey_enc+0xd2>
 808d1c4:	e053      	b.n	808d26e <mbedtls_aes_setkey_enc+0x1e6>

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
 808d1c6:	4e2c      	ldr	r6, [pc, #176]	; (808d278 <mbedtls_aes_setkey_enc+0x1f0>)
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 808d1c8:	482c      	ldr	r0, [pc, #176]	; (808d27c <mbedtls_aes_setkey_enc+0x1f4>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 808d1ca:	2500      	movs	r5, #0
            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808d1cc:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 808d1d0:	69dc      	ldr	r4, [r3, #28]
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808d1d2:	681a      	ldr	r2, [r3, #0]
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
 808d1d4:	685f      	ldr	r7, [r3, #4]
            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808d1d6:	4051      	eors	r1, r2
        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 808d1d8:	f3c4 2207 	ubfx	r2, r4, #8, #8
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808d1dc:	5c82      	ldrb	r2, [r0, r2]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 808d1de:	3501      	adds	r5, #1
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808d1e0:	4051      	eors	r1, r2
 808d1e2:	0e22      	lsrs	r2, r4, #24
 808d1e4:	5c82      	ldrb	r2, [r0, r2]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 808d1e6:	2d07      	cmp	r5, #7
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808d1e8:	ea81 4102 	eor.w	r1, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 808d1ec:	b2e2      	uxtb	r2, r4
            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808d1ee:	5c82      	ldrb	r2, [r0, r2]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 808d1f0:	f103 0320 	add.w	r3, r3, #32
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808d1f4:	ea81 6102 	eor.w	r1, r1, r2, lsl #24

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 808d1f8:	f3c4 4207 	ubfx	r2, r4, #16, #8
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808d1fc:	5c82      	ldrb	r2, [r0, r2]
 808d1fe:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
 808d202:	f853 2c18 	ldr.w	r2, [r3, #-24]
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 808d206:	6019      	str	r1, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
 808d208:	ea81 0107 	eor.w	r1, r1, r7
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];
 808d20c:	f853 7c14 	ldr.w	r7, [r3, #-20]
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
 808d210:	6059      	str	r1, [r3, #4]
                RK[10] = RK[2] ^ RK[9];
 808d212:	ea81 0102 	eor.w	r1, r1, r2
                RK[11] = RK[3] ^ RK[10];
 808d216:	ea87 0701 	eor.w	r7, r7, r1
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
 808d21a:	6099      	str	r1, [r3, #8]
                RK[11] = RK[3] ^ RK[10];
 808d21c:	60df      	str	r7, [r3, #12]

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 808d21e:	b2fa      	uxtb	r2, r7
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 808d220:	5c82      	ldrb	r2, [r0, r2]
 808d222:	f853 1c10 	ldr.w	r1, [r3, #-16]
 808d226:	ea81 0102 	eor.w	r1, r1, r2
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 808d22a:	ea4f 6217 	mov.w	r2, r7, lsr #24
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 808d22e:	5c82      	ldrb	r2, [r0, r2]
 808d230:	ea81 6102 	eor.w	r1, r1, r2, lsl #24
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 808d234:	f3c7 2207 	ubfx	r2, r7, #8, #8
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 808d238:	5c82      	ldrb	r2, [r0, r2]
 808d23a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 808d23e:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
 808d242:	5dc2      	ldrb	r2, [r0, r7]
 808d244:	ea81 4202 	eor.w	r2, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
 808d248:	f853 1c0c 	ldr.w	r1, [r3, #-12]

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 808d24c:	611a      	str	r2, [r3, #16]

                RK[13] = RK[5] ^ RK[12];
 808d24e:	ea82 0201 	eor.w	r2, r2, r1
                RK[14] = RK[6] ^ RK[13];
 808d252:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
 808d256:	615a      	str	r2, [r3, #20]
                RK[14] = RK[6] ^ RK[13];
 808d258:	ea82 0201 	eor.w	r2, r2, r1
 808d25c:	619a      	str	r2, [r3, #24]
                RK[15] = RK[7] ^ RK[14];
 808d25e:	ea82 0204 	eor.w	r2, r2, r4
 808d262:	61da      	str	r2, [r3, #28]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 808d264:	d1b2      	bne.n	808d1cc <mbedtls_aes_setkey_enc+0x144>
 808d266:	e002      	b.n	808d26e <mbedtls_aes_setkey_enc+0x1e6>
    switch( keybits )
    {
        case 128: ctx->nr = 10; break;
        case 192: ctx->nr = 12; break;
        case 256: ctx->nr = 14; break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 808d268:	f06f 001f 	mvn.w	r0, #31
 808d26c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                RK[15] = RK[7] ^ RK[14];
            }
            break;
    }

    return( 0 );
 808d26e:	2000      	movs	r0, #0
}
 808d270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808d272:	bf00      	nop
 808d274:	200019f4 	.word	0x200019f4
 808d278:	20003bf8 	.word	0x20003bf8
 808d27c:	20002af8 	.word	0x20002af8

0808d280 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 808d280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808d284:	4604      	mov	r4, r0
 808d286:	460d      	mov	r5, r1
 808d288:	4616      	mov	r6, r2
 808d28a:	b0c9      	sub	sp, #292	; 0x124
    int i, j, ret;
    mbedtls_aes_context cty;
    uint32_t *RK;
    uint32_t *SK;

    mbedtls_aes_init( &cty );
 808d28c:	a802      	add	r0, sp, #8
 808d28e:	f7ff feeb 	bl	808d068 <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 808d292:	f104 0308 	add.w	r3, r4, #8
 808d296:	6063      	str	r3, [r4, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 808d298:	4632      	mov	r2, r6
 808d29a:	4629      	mov	r1, r5
 808d29c:	a802      	add	r0, sp, #8
 808d29e:	f7ff fef3 	bl	808d088 <mbedtls_aes_setkey_enc>
 808d2a2:	4680      	mov	r8, r0
 808d2a4:	2800      	cmp	r0, #0
 808d2a6:	d14b      	bne.n	808d340 <mbedtls_aes_setkey_dec+0xc0>
        goto exit;

    ctx->nr = cty.nr;
 808d2a8:	9902      	ldr	r1, [sp, #8]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 808d2aa:	9803      	ldr	r0, [sp, #12]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
        goto exit;

    ctx->nr = cty.nr;
 808d2ac:	6021      	str	r1, [r4, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 808d2ae:	010a      	lsls	r2, r1, #4
 808d2b0:	1883      	adds	r3, r0, r2

    *RK++ = *SK++;
 808d2b2:	5882      	ldr	r2, [r0, r2]
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 808d2b4:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 808d358 <mbedtls_aes_setkey_dec+0xd8>
    }
#endif

    SK = cty.rk + cty.nr * 4;

    *RK++ = *SK++;
 808d2b8:	60a2      	str	r2, [r4, #8]
    *RK++ = *SK++;
 808d2ba:	685a      	ldr	r2, [r3, #4]
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 808d2bc:	f8df 909c 	ldr.w	r9, [pc, #156]	; 808d35c <mbedtls_aes_setkey_dec+0xdc>
#endif

    SK = cty.rk + cty.nr * 4;

    *RK++ = *SK++;
    *RK++ = *SK++;
 808d2c0:	60e2      	str	r2, [r4, #12]
    *RK++ = *SK++;
 808d2c2:	689a      	ldr	r2, [r3, #8]
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 808d2c4:	f8df a098 	ldr.w	sl, [pc, #152]	; 808d360 <mbedtls_aes_setkey_dec+0xe0>

    SK = cty.rk + cty.nr * 4;

    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
 808d2c8:	6122      	str	r2, [r4, #16]
    *RK++ = *SK++;
 808d2ca:	68d8      	ldr	r0, [r3, #12]
 808d2cc:	f104 0218 	add.w	r2, r4, #24
 808d2d0:	6160      	str	r0, [r4, #20]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 808d2d2:	4c1f      	ldr	r4, [pc, #124]	; (808d350 <mbedtls_aes_setkey_dec+0xd0>)
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 808d2d4:	3901      	subs	r1, #1
 808d2d6:	3b10      	subs	r3, #16
 808d2d8:	2900      	cmp	r1, #0
 808d2da:	dd29      	ble.n	808d330 <mbedtls_aes_setkey_dec+0xb0>
 808d2dc:	1f1d      	subs	r5, r3, #4
 808d2de:	f1a2 0e04 	sub.w	lr, r2, #4
 808d2e2:	f103 0b0c 	add.w	fp, r3, #12
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 808d2e6:	f855 0f04 	ldr.w	r0, [r5, #4]!
 808d2ea:	b2c6      	uxtb	r6, r0
 808d2ec:	5da7      	ldrb	r7, [r4, r6]
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 808d2ee:	0e06      	lsrs	r6, r0, #24
 808d2f0:	5da6      	ldrb	r6, [r4, r6]
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
 808d2f2:	45ab      	cmp	fp, r5
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 808d2f4:	9601      	str	r6, [sp, #4]
 808d2f6:	4e17      	ldr	r6, [pc, #92]	; (808d354 <mbedtls_aes_setkey_dec+0xd4>)
 808d2f8:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 808d2fc:	9e01      	ldr	r6, [sp, #4]
 808d2fe:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 808d302:	ea87 0706 	eor.w	r7, r7, r6
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 808d306:	f3c0 2607 	ubfx	r6, r0, #8, #8
 808d30a:	5da6      	ldrb	r6, [r4, r6]
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 808d30c:	f3c0 4007 	ubfx	r0, r0, #16, #8
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 808d310:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 808d314:	5c20      	ldrb	r0, [r4, r0]
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 808d316:	ea86 0607 	eor.w	r6, r6, r7
 808d31a:	f85a 7020 	ldr.w	r7, [sl, r0, lsl #2]
 808d31e:	ea86 0607 	eor.w	r6, r6, r7
 808d322:	f84e 6f04 	str.w	r6, [lr, #4]!
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
 808d326:	d1de      	bne.n	808d2e6 <mbedtls_aes_setkey_dec+0x66>
 808d328:	3210      	adds	r2, #16
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 808d32a:	3901      	subs	r1, #1
 808d32c:	3b10      	subs	r3, #16
 808d32e:	e7d3      	b.n	808d2d8 <mbedtls_aes_setkey_dec+0x58>
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
        }
    }

    *RK++ = *SK++;
 808d330:	6819      	ldr	r1, [r3, #0]
 808d332:	6011      	str	r1, [r2, #0]
    *RK++ = *SK++;
 808d334:	6859      	ldr	r1, [r3, #4]
 808d336:	6051      	str	r1, [r2, #4]
    *RK++ = *SK++;
 808d338:	6899      	ldr	r1, [r3, #8]
 808d33a:	6091      	str	r1, [r2, #8]
    *RK++ = *SK++;
 808d33c:	68db      	ldr	r3, [r3, #12]
 808d33e:	60d3      	str	r3, [r2, #12]

exit:
    mbedtls_aes_free( &cty );
 808d340:	a802      	add	r0, sp, #8
 808d342:	f7ff fe96 	bl	808d072 <mbedtls_aes_free>

    return( ret );
}
 808d346:	4640      	mov	r0, r8
 808d348:	b049      	add	sp, #292	; 0x124
 808d34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d34e:	bf00      	nop
 808d350:	20002af8 	.word	0x20002af8
 808d354:	20002ff8 	.word	0x20002ff8
 808d358:	20002bf8 	.word	0x20002bf8
 808d35c:	200033f8 	.word	0x200033f8
 808d360:	200037f8 	.word	0x200037f8

0808d364 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 808d364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 808d368:	6843      	ldr	r3, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 808d36a:	680d      	ldr	r5, [r1, #0]
 808d36c:	681c      	ldr	r4, [r3, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d36e:	6800      	ldr	r0, [r0, #0]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 808d370:	ea85 0b04 	eor.w	fp, r5, r4
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 808d374:	684d      	ldr	r5, [r1, #4]
 808d376:	685c      	ldr	r4, [r3, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 808d378:	688e      	ldr	r6, [r1, #8]
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 808d37a:	406c      	eors	r4, r5
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 808d37c:	689d      	ldr	r5, [r3, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d37e:	1040      	asrs	r0, r0, #1
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 808d380:	b085      	sub	sp, #20
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d382:	3801      	subs	r0, #1

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 808d384:	4075      	eors	r5, r6
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 808d386:	68ce      	ldr	r6, [r1, #12]
 808d388:	68d9      	ldr	r1, [r3, #12]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d38a:	9001      	str	r0, [sp, #4]
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 808d38c:	f853 0f10 	ldr.w	r0, [r3, #16]!
 808d390:	4071      	eors	r1, r6
 808d392:	f8df e364 	ldr.w	lr, [pc, #868]	; 808d6f8 <mbedtls_internal_aes_encrypt+0x394>
 808d396:	4ed4      	ldr	r6, [pc, #848]	; (808d6e8 <mbedtls_internal_aes_encrypt+0x384>)

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808d398:	f8df a354 	ldr.w	sl, [pc, #852]	; 808d6f0 <mbedtls_internal_aes_encrypt+0x38c>
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 808d39c:	9002      	str	r0, [sp, #8]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d39e:	9801      	ldr	r0, [sp, #4]
 808d3a0:	461f      	mov	r7, r3
 808d3a2:	2800      	cmp	r0, #0
 808d3a4:	ea4f 6011 	mov.w	r0, r1, lsr #24
 808d3a8:	f103 0320 	add.w	r3, r3, #32
 808d3ac:	f8df 8348 	ldr.w	r8, [pc, #840]	; 808d6f8 <mbedtls_internal_aes_encrypt+0x394>
 808d3b0:	fa5f f98b 	uxtb.w	r9, fp
 808d3b4:	f8df c330 	ldr.w	ip, [pc, #816]	; 808d6e8 <mbedtls_internal_aes_encrypt+0x384>
 808d3b8:	9003      	str	r0, [sp, #12]
 808d3ba:	f340 80be 	ble.w	808d53a <mbedtls_internal_aes_encrypt+0x1d6>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808d3be:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 808d3c2:	f85e 8029 	ldr.w	r8, [lr, r9, lsl #2]
 808d3c6:	48c9      	ldr	r0, [pc, #804]	; (808d6ec <mbedtls_internal_aes_encrypt+0x388>)
 808d3c8:	ea88 0807 	eor.w	r8, r8, r7
 808d3cc:	f853 7c20 	ldr.w	r7, [r3, #-32]
 808d3d0:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 808d3d4:	ea88 0807 	eor.w	r8, r8, r7
 808d3d8:	f3c4 2707 	ubfx	r7, r4, #8, #8
 808d3dc:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
 808d3e0:	ea88 0707 	eor.w	r7, r8, r7
 808d3e4:	f85a 802c 	ldr.w	r8, [sl, ip, lsl #2]
 808d3e8:	fa5f fc84 	uxtb.w	ip, r4
 808d3ec:	ea87 0808 	eor.w	r8, r7, r8
 808d3f0:	ea4f 671b 	mov.w	r7, fp, lsr #24
 808d3f4:	f85e 902c 	ldr.w	r9, [lr, ip, lsl #2]
 808d3f8:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 808d3fc:	f3c5 2c07 	ubfx	ip, r5, #8, #8
 808d400:	ea89 0907 	eor.w	r9, r9, r7
 808d404:	f853 7c1c 	ldr.w	r7, [r3, #-28]
 808d408:	ea89 0707 	eor.w	r7, r9, r7
 808d40c:	f850 902c 	ldr.w	r9, [r0, ip, lsl #2]
 808d410:	f3c1 4c07 	ubfx	ip, r1, #16, #8
 808d414:	ea87 0709 	eor.w	r7, r7, r9
 808d418:	f85a 902c 	ldr.w	r9, [sl, ip, lsl #2]
 808d41c:	fa5f fc85 	uxtb.w	ip, r5
 808d420:	ea87 0909 	eor.w	r9, r7, r9
 808d424:	0e27      	lsrs	r7, r4, #24
 808d426:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 808d42a:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
 808d42e:	0e2d      	lsrs	r5, r5, #24
 808d430:	ea8c 0c07 	eor.w	ip, ip, r7
 808d434:	f853 7c18 	ldr.w	r7, [r3, #-24]
 808d438:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 808d43c:	ea8c 0707 	eor.w	r7, ip, r7
 808d440:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 808d444:	f850 c02c 	ldr.w	ip, [r0, ip, lsl #2]
 808d448:	b2c9      	uxtb	r1, r1
 808d44a:	ea87 070c 	eor.w	r7, r7, ip
 808d44e:	f3cb 4c07 	ubfx	ip, fp, #16, #8
 808d452:	f85a c02c 	ldr.w	ip, [sl, ip, lsl #2]
 808d456:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 808d45a:	ea87 070c 	eor.w	r7, r7, ip
 808d45e:	ea81 0c05 	eor.w	ip, r1, r5
 808d462:	f853 1c14 	ldr.w	r1, [r3, #-20]
 808d466:	f3cb 2507 	ubfx	r5, fp, #8, #8
 808d46a:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
 808d46e:	f3c4 4407 	ubfx	r4, r4, #16, #8
 808d472:	f85a 4024 	ldr.w	r4, [sl, r4, lsl #2]
 808d476:	ea8c 0101 	eor.w	r1, ip, r1
 808d47a:	4069      	eors	r1, r5
 808d47c:	ea81 0c04 	eor.w	ip, r1, r4
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808d480:	ea4f 611c 	mov.w	r1, ip, lsr #24
 808d484:	fa5f f488 	uxtb.w	r4, r8
 808d488:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 808d48c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 808d490:	b2fd      	uxtb	r5, r7
 808d492:	4061      	eors	r1, r4
 808d494:	f853 4c10 	ldr.w	r4, [r3, #-16]
 808d498:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
 808d49c:	404c      	eors	r4, r1
 808d49e:	f3c9 2107 	ubfx	r1, r9, #8, #8
 808d4a2:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 808d4a6:	404c      	eors	r4, r1
 808d4a8:	f3c7 4107 	ubfx	r1, r7, #16, #8
 808d4ac:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 808d4b0:	ea84 0b01 	eor.w	fp, r4, r1
 808d4b4:	fa5f f489 	uxtb.w	r4, r9
 808d4b8:	ea4f 6118 	mov.w	r1, r8, lsr #24
 808d4bc:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 808d4c0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 808d4c4:	4061      	eors	r1, r4
 808d4c6:	f853 4c0c 	ldr.w	r4, [r3, #-12]
 808d4ca:	404c      	eors	r4, r1
 808d4cc:	f3c7 2107 	ubfx	r1, r7, #8, #8
 808d4d0:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 808d4d4:	0e3f      	lsrs	r7, r7, #24
 808d4d6:	404c      	eors	r4, r1
 808d4d8:	f3cc 4107 	ubfx	r1, ip, #16, #8
 808d4dc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 808d4e0:	404c      	eors	r4, r1
 808d4e2:	ea4f 6119 	mov.w	r1, r9, lsr #24
 808d4e6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 808d4ea:	f3c9 4907 	ubfx	r9, r9, #16, #8
 808d4ee:	404d      	eors	r5, r1
 808d4f0:	f853 1c08 	ldr.w	r1, [r3, #-8]
 808d4f4:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 808d4f8:	4069      	eors	r1, r5
 808d4fa:	f3cc 2507 	ubfx	r5, ip, #8, #8
 808d4fe:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
 808d502:	fa5f fc8c 	uxtb.w	ip, ip
 808d506:	4069      	eors	r1, r5
 808d508:	f3c8 4507 	ubfx	r5, r8, #16, #8
 808d50c:	f85a 5025 	ldr.w	r5, [sl, r5, lsl #2]
 808d510:	f3c8 2807 	ubfx	r8, r8, #8, #8
 808d514:	404d      	eors	r5, r1
 808d516:	f85e 102c 	ldr.w	r1, [lr, ip, lsl #2]
 808d51a:	404f      	eors	r7, r1
 808d51c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 808d520:	4079      	eors	r1, r7
 808d522:	f850 7028 	ldr.w	r7, [r0, r8, lsl #2]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d526:	9801      	ldr	r0, [sp, #4]
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808d528:	4079      	eors	r1, r7
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d52a:	3801      	subs	r0, #1
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808d52c:	f85a 7029 	ldr.w	r7, [sl, r9, lsl #2]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d530:	9001      	str	r0, [sp, #4]
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808d532:	6818      	ldr	r0, [r3, #0]
 808d534:	4079      	eors	r1, r7
 808d536:	9002      	str	r0, [sp, #8]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d538:	e731      	b.n	808d39e <mbedtls_internal_aes_encrypt+0x3a>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808d53a:	0e0b      	lsrs	r3, r1, #24
 808d53c:	f858 0029 	ldr.w	r0, [r8, r9, lsl #2]
 808d540:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 808d544:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 808d6ec <mbedtls_internal_aes_encrypt+0x388>
 808d548:	4043      	eors	r3, r0
 808d54a:	9802      	ldr	r0, [sp, #8]
 808d54c:	4e68      	ldr	r6, [pc, #416]	; (808d6f0 <mbedtls_internal_aes_encrypt+0x38c>)
 808d54e:	ea83 0900 	eor.w	r9, r3, r0
 808d552:	f3c4 2307 	ubfx	r3, r4, #8, #8
 808d556:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 808d55a:	b2e0      	uxtb	r0, r4
 808d55c:	ea89 0903 	eor.w	r9, r9, r3
 808d560:	f3c5 4307 	ubfx	r3, r5, #16, #8
 808d564:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 808d568:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 808d56c:	ea89 0903 	eor.w	r9, r9, r3
 808d570:	ea4f 631b 	mov.w	r3, fp, lsr #24
 808d574:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 808d578:	fa5f fa85 	uxtb.w	sl, r5
 808d57c:	4058      	eors	r0, r3
 808d57e:	687b      	ldr	r3, [r7, #4]
 808d580:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 808d584:	4043      	eors	r3, r0
 808d586:	f3c5 2007 	ubfx	r0, r5, #8, #8
 808d58a:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 808d58e:	0e2d      	lsrs	r5, r5, #24
 808d590:	4043      	eors	r3, r0
 808d592:	f3c1 4007 	ubfx	r0, r1, #16, #8
 808d596:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 808d59a:	4043      	eors	r3, r0
 808d59c:	0e20      	lsrs	r0, r4, #24
 808d59e:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 808d5a2:	f3c4 4407 	ubfx	r4, r4, #16, #8
 808d5a6:	ea8a 0a00 	eor.w	sl, sl, r0
 808d5aa:	68b8      	ldr	r0, [r7, #8]
 808d5ac:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 808d5b0:	ea8a 0000 	eor.w	r0, sl, r0
 808d5b4:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 808d5b8:	b2c9      	uxtb	r1, r1
 808d5ba:	f858 8021 	ldr.w	r8, [r8, r1, lsl #2]
 808d5be:	f85c 1025 	ldr.w	r1, [ip, r5, lsl #2]
 808d5c2:	f85e a02a 	ldr.w	sl, [lr, sl, lsl #2]
 808d5c6:	ea88 0501 	eor.w	r5, r8, r1
 808d5ca:	68f9      	ldr	r1, [r7, #12]
 808d5cc:	ea80 000a 	eor.w	r0, r0, sl
 808d5d0:	4069      	eors	r1, r5
 808d5d2:	f3cb 2507 	ubfx	r5, fp, #8, #8
 808d5d6:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
 808d5da:	f3cb 4a07 	ubfx	sl, fp, #16, #8
 808d5de:	4069      	eors	r1, r5
 808d5e0:	4061      	eors	r1, r4

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 808d5e2:	4c44      	ldr	r4, [pc, #272]	; (808d6f4 <mbedtls_internal_aes_encrypt+0x390>)
 808d5e4:	fa5f f589 	uxtb.w	r5, r9
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808d5e8:	f814 e005 	ldrb.w	lr, [r4, r5]
 808d5ec:	693d      	ldr	r5, [r7, #16]
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808d5ee:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808d5f2:	0e0e      	lsrs	r6, r1, #24
 808d5f4:	ea8e 0505 	eor.w	r5, lr, r5
 808d5f8:	f814 e006 	ldrb.w	lr, [r4, r6]

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 808d5fc:	f3c3 2607 	ubfx	r6, r3, #8, #8
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808d600:	ea80 000a 	eor.w	r0, r0, sl

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808d604:	ea85 650e 	eor.w	r5, r5, lr, lsl #24
 808d608:	f814 e006 	ldrb.w	lr, [r4, r6]
    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 808d60c:	f3c0 4607 	ubfx	r6, r0, #16, #8
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808d610:	ea85 250e 	eor.w	r5, r5, lr, lsl #8
 808d614:	f814 e006 	ldrb.w	lr, [r4, r6]
 808d618:	ea85 4e0e 	eor.w	lr, r5, lr, lsl #16

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 808d61c:	b2dd      	uxtb	r5, r3
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808d61e:	5d66      	ldrb	r6, [r4, r5]
 808d620:	697d      	ldr	r5, [r7, #20]
 808d622:	4075      	eors	r5, r6
 808d624:	ea4f 6619 	mov.w	r6, r9, lsr #24
 808d628:	5da6      	ldrb	r6, [r4, r6]
 808d62a:	ea85 6506 	eor.w	r5, r5, r6, lsl #24
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 808d62e:	f3c0 2607 	ubfx	r6, r0, #8, #8
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808d632:	5da6      	ldrb	r6, [r4, r6]
 808d634:	ea85 2506 	eor.w	r5, r5, r6, lsl #8
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 808d638:	f3c1 4607 	ubfx	r6, r1, #16, #8
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808d63c:	5da6      	ldrb	r6, [r4, r6]
 808d63e:	ea85 4606 	eor.w	r6, r5, r6, lsl #16

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 808d642:	b2c5      	uxtb	r5, r0
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808d644:	f814 c005 	ldrb.w	ip, [r4, r5]
 808d648:	69bd      	ldr	r5, [r7, #24]

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808d64a:	0e00      	lsrs	r0, r0, #24

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808d64c:	ea8c 0505 	eor.w	r5, ip, r5
 808d650:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 808d654:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808d658:	5c20      	ldrb	r0, [r4, r0]

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808d65a:	ea85 650c 	eor.w	r5, r5, ip, lsl #24
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 808d65e:	f3c1 2c07 	ubfx	ip, r1, #8, #8
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808d662:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 808d666:	b2c9      	uxtb	r1, r1

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808d668:	ea85 250c 	eor.w	r5, r5, ip, lsl #8
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 808d66c:	f3c9 4c07 	ubfx	ip, r9, #16, #8
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808d670:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 808d674:	f3c9 2907 	ubfx	r9, r9, #8, #8

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808d678:	ea85 450c 	eor.w	r5, r5, ip, lsl #16

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808d67c:	f814 c001 	ldrb.w	ip, [r4, r1]
 808d680:	69f9      	ldr	r1, [r7, #28]
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 808d682:	f3c3 4307 	ubfx	r3, r3, #16, #8
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808d686:	ea8c 0101 	eor.w	r1, ip, r1
 808d68a:	ea81 6100 	eor.w	r1, r1, r0, lsl #24
 808d68e:	f814 0009 	ldrb.w	r0, [r4, r9]
 808d692:	5ce3      	ldrb	r3, [r4, r3]
 808d694:	ea81 2100 	eor.w	r1, r1, r0, lsl #8
 808d698:	ea81 4303 	eor.w	r3, r1, r3, lsl #16

    PUT_UINT32_LE( X0, output,  0 );
 808d69c:	ea4f 211e 	mov.w	r1, lr, lsr #8
 808d6a0:	7051      	strb	r1, [r2, #1]
 808d6a2:	ea4f 411e 	mov.w	r1, lr, lsr #16
 808d6a6:	7091      	strb	r1, [r2, #2]
    PUT_UINT32_LE( X1, output,  4 );
 808d6a8:	0a31      	lsrs	r1, r6, #8
 808d6aa:	7151      	strb	r1, [r2, #5]
 808d6ac:	0c31      	lsrs	r1, r6, #16
 808d6ae:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
 808d6b0:	0a29      	lsrs	r1, r5, #8
 808d6b2:	7251      	strb	r1, [r2, #9]
 808d6b4:	0c29      	lsrs	r1, r5, #16
 808d6b6:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
 808d6b8:	0a19      	lsrs	r1, r3, #8
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 808d6ba:	f882 e000 	strb.w	lr, [r2]
    PUT_UINT32_LE( X1, output,  4 );
 808d6be:	7116      	strb	r6, [r2, #4]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 808d6c0:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    PUT_UINT32_LE( X1, output,  4 );
 808d6c4:	0e36      	lsrs	r6, r6, #24
    PUT_UINT32_LE( X2, output,  8 );
 808d6c6:	7215      	strb	r5, [r2, #8]
    PUT_UINT32_LE( X3, output, 12 );
 808d6c8:	7313      	strb	r3, [r2, #12]
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
 808d6ca:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X3, output, 12 );
 808d6cc:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
 808d6ce:	2000      	movs	r0, #0
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
 808d6d0:	0c19      	lsrs	r1, r3, #16
 808d6d2:	0e1b      	lsrs	r3, r3, #24
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 808d6d4:	f882 e003 	strb.w	lr, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
 808d6d8:	71d6      	strb	r6, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
 808d6da:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
 808d6dc:	7391      	strb	r1, [r2, #14]
 808d6de:	73d3      	strb	r3, [r2, #15]

    return( 0 );
}
 808d6e0:	b005      	add	sp, #20
 808d6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d6e6:	bf00      	nop
 808d6e8:	200025f8 	.word	0x200025f8
 808d6ec:	20001df8 	.word	0x20001df8
 808d6f0:	200021f8 	.word	0x200021f8
 808d6f4:	20002af8 	.word	0x20002af8
 808d6f8:	200019f8 	.word	0x200019f8

0808d6fc <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 808d6fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 808d700:	6843      	ldr	r3, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 808d702:	680d      	ldr	r5, [r1, #0]
 808d704:	681c      	ldr	r4, [r3, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d706:	6800      	ldr	r0, [r0, #0]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 808d708:	ea85 0a04 	eor.w	sl, r5, r4
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 808d70c:	684d      	ldr	r5, [r1, #4]
 808d70e:	685c      	ldr	r4, [r3, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d710:	1040      	asrs	r0, r0, #1
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 808d712:	ea85 0b04 	eor.w	fp, r5, r4
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 808d716:	688d      	ldr	r5, [r1, #8]
 808d718:	689c      	ldr	r4, [r3, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d71a:	3801      	subs	r0, #1

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 808d71c:	406c      	eors	r4, r5
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 808d71e:	68cd      	ldr	r5, [r1, #12]
 808d720:	68d9      	ldr	r1, [r3, #12]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d722:	9000      	str	r0, [sp, #0]
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 808d724:	f853 0f10 	ldr.w	r0, [r3, #16]!
 808d728:	4069      	eors	r1, r5
 808d72a:	f8df e364 	ldr.w	lr, [pc, #868]	; 808da90 <mbedtls_internal_aes_decrypt+0x394>
 808d72e:	4ed4      	ldr	r6, [pc, #848]	; (808da80 <mbedtls_internal_aes_decrypt+0x384>)

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808d730:	4dd4      	ldr	r5, [pc, #848]	; (808da84 <mbedtls_internal_aes_decrypt+0x388>)
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 808d732:	9001      	str	r0, [sp, #4]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d734:	9800      	ldr	r0, [sp, #0]
 808d736:	461f      	mov	r7, r3
 808d738:	2800      	cmp	r0, #0
 808d73a:	f103 0320 	add.w	r3, r3, #32
 808d73e:	f8df 8350 	ldr.w	r8, [pc, #848]	; 808da90 <mbedtls_internal_aes_decrypt+0x394>
 808d742:	fa5f f08a 	uxtb.w	r0, sl
 808d746:	f8df c338 	ldr.w	ip, [pc, #824]	; 808da80 <mbedtls_internal_aes_decrypt+0x384>
 808d74a:	ea4f 691b 	mov.w	r9, fp, lsr #24
 808d74e:	f340 80c1 	ble.w	808d8d4 <mbedtls_internal_aes_decrypt+0x1d8>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808d752:	f856 7029 	ldr.w	r7, [r6, r9, lsl #2]
 808d756:	f85e 8020 	ldr.w	r8, [lr, r0, lsl #2]
 808d75a:	48cb      	ldr	r0, [pc, #812]	; (808da88 <mbedtls_internal_aes_decrypt+0x38c>)
 808d75c:	ea88 0807 	eor.w	r8, r8, r7
 808d760:	f853 7c20 	ldr.w	r7, [r3, #-32]
 808d764:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 808d768:	ea88 0807 	eor.w	r8, r8, r7
 808d76c:	f3c1 2707 	ubfx	r7, r1, #8, #8
 808d770:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 808d774:	ea88 0707 	eor.w	r7, r8, r7
 808d778:	f850 802c 	ldr.w	r8, [r0, ip, lsl #2]
 808d77c:	fa5f fc8b 	uxtb.w	ip, fp
 808d780:	ea87 0808 	eor.w	r8, r7, r8
 808d784:	0e27      	lsrs	r7, r4, #24
 808d786:	f85e 902c 	ldr.w	r9, [lr, ip, lsl #2]
 808d78a:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 808d78e:	f3ca 2c07 	ubfx	ip, sl, #8, #8
 808d792:	ea89 0907 	eor.w	r9, r9, r7
 808d796:	f853 7c1c 	ldr.w	r7, [r3, #-28]
 808d79a:	ea89 0707 	eor.w	r7, r9, r7
 808d79e:	f855 902c 	ldr.w	r9, [r5, ip, lsl #2]
 808d7a2:	f3c1 4c07 	ubfx	ip, r1, #16, #8
 808d7a6:	ea87 0709 	eor.w	r7, r7, r9
 808d7aa:	f850 902c 	ldr.w	r9, [r0, ip, lsl #2]
 808d7ae:	fa5f fc84 	uxtb.w	ip, r4
 808d7b2:	ea87 0909 	eor.w	r9, r7, r9
 808d7b6:	0e0f      	lsrs	r7, r1, #24
 808d7b8:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 808d7bc:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
 808d7c0:	b2c9      	uxtb	r1, r1
 808d7c2:	ea8c 0c07 	eor.w	ip, ip, r7
 808d7c6:	f853 7c18 	ldr.w	r7, [r3, #-24]
 808d7ca:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 808d7ce:	ea8c 0707 	eor.w	r7, ip, r7
 808d7d2:	f3cb 2c07 	ubfx	ip, fp, #8, #8
 808d7d6:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 808d7da:	f3c4 2407 	ubfx	r4, r4, #8, #8
 808d7de:	ea87 070c 	eor.w	r7, r7, ip
 808d7e2:	f3ca 4c07 	ubfx	ip, sl, #16, #8
 808d7e6:	f850 c02c 	ldr.w	ip, [r0, ip, lsl #2]
 808d7ea:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 808d7ee:	ea87 070c 	eor.w	r7, r7, ip
 808d7f2:	f856 c02a 	ldr.w	ip, [r6, sl, lsl #2]
 808d7f6:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 808d7fa:	ea81 0c0c 	eor.w	ip, r1, ip
 808d7fe:	f853 1c14 	ldr.w	r1, [r3, #-20]
 808d802:	ea8c 0101 	eor.w	r1, ip, r1
 808d806:	4061      	eors	r1, r4
 808d808:	f3cb 4407 	ubfx	r4, fp, #16, #8
 808d80c:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 808d810:	ea81 0c04 	eor.w	ip, r1, r4
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808d814:	fa5f f488 	uxtb.w	r4, r8
 808d818:	ea4f 6119 	mov.w	r1, r9, lsr #24
 808d81c:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 808d820:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 808d824:	4061      	eors	r1, r4
 808d826:	f853 4c10 	ldr.w	r4, [r3, #-16]
 808d82a:	404c      	eors	r4, r1
 808d82c:	f3cc 2107 	ubfx	r1, ip, #8, #8
 808d830:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 808d834:	404c      	eors	r4, r1
 808d836:	f3c7 4107 	ubfx	r1, r7, #16, #8
 808d83a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 808d83e:	ea84 0a01 	eor.w	sl, r4, r1
 808d842:	fa5f f489 	uxtb.w	r4, r9
 808d846:	0e39      	lsrs	r1, r7, #24
 808d848:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 808d84c:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 808d850:	404c      	eors	r4, r1
 808d852:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 808d856:	4061      	eors	r1, r4
 808d858:	f3c8 2407 	ubfx	r4, r8, #8, #8
 808d85c:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 808d860:	4061      	eors	r1, r4
 808d862:	f3cc 4407 	ubfx	r4, ip, #16, #8
 808d866:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 808d86a:	ea81 0b04 	eor.w	fp, r1, r4
 808d86e:	b2fc      	uxtb	r4, r7
 808d870:	ea4f 611c 	mov.w	r1, ip, lsr #24
 808d874:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 808d878:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 808d87c:	fa5f fc8c 	uxtb.w	ip, ip
 808d880:	404c      	eors	r4, r1
 808d882:	f853 1c08 	ldr.w	r1, [r3, #-8]
 808d886:	f3c7 2707 	ubfx	r7, r7, #8, #8
 808d88a:	4061      	eors	r1, r4
 808d88c:	f3c9 2407 	ubfx	r4, r9, #8, #8
 808d890:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 808d894:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 808d898:	4061      	eors	r1, r4
 808d89a:	f3c8 4407 	ubfx	r4, r8, #16, #8
 808d89e:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 808d8a2:	ea4f 6818 	mov.w	r8, r8, lsr #24
 808d8a6:	404c      	eors	r4, r1
 808d8a8:	f85e 102c 	ldr.w	r1, [lr, ip, lsl #2]
 808d8ac:	f856 c028 	ldr.w	ip, [r6, r8, lsl #2]
 808d8b0:	f3c9 4907 	ubfx	r9, r9, #16, #8
 808d8b4:	ea81 0c0c 	eor.w	ip, r1, ip
 808d8b8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 808d8bc:	ea8c 0101 	eor.w	r1, ip, r1
 808d8c0:	4079      	eors	r1, r7
 808d8c2:	f850 7029 	ldr.w	r7, [r0, r9, lsl #2]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d8c6:	9800      	ldr	r0, [sp, #0]
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808d8c8:	4079      	eors	r1, r7
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d8ca:	3801      	subs	r0, #1
 808d8cc:	9000      	str	r0, [sp, #0]
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808d8ce:	6818      	ldr	r0, [r3, #0]
 808d8d0:	9001      	str	r0, [sp, #4]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d8d2:	e72f      	b.n	808d734 <mbedtls_internal_aes_decrypt+0x38>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808d8d4:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 808d8d8:	f85c 3029 	ldr.w	r3, [ip, r9, lsl #2]
 808d8dc:	4e69      	ldr	r6, [pc, #420]	; (808da84 <mbedtls_internal_aes_decrypt+0x388>)
 808d8de:	4043      	eors	r3, r0
 808d8e0:	9801      	ldr	r0, [sp, #4]
 808d8e2:	4d69      	ldr	r5, [pc, #420]	; (808da88 <mbedtls_internal_aes_decrypt+0x38c>)
 808d8e4:	ea83 0900 	eor.w	r9, r3, r0
 808d8e8:	f3c1 2307 	ubfx	r3, r1, #8, #8
 808d8ec:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 808d8f0:	fa5f f08b 	uxtb.w	r0, fp
 808d8f4:	ea89 0903 	eor.w	r9, r9, r3
 808d8f8:	f3c4 4307 	ubfx	r3, r4, #16, #8
 808d8fc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 808d900:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 808d904:	ea89 0903 	eor.w	r9, r9, r3
 808d908:	0e23      	lsrs	r3, r4, #24
 808d90a:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 808d90e:	fa5f fe84 	uxtb.w	lr, r4
 808d912:	4058      	eors	r0, r3
 808d914:	687b      	ldr	r3, [r7, #4]
 808d916:	f858 e02e 	ldr.w	lr, [r8, lr, lsl #2]
 808d91a:	4043      	eors	r3, r0
 808d91c:	f3ca 2007 	ubfx	r0, sl, #8, #8
 808d920:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 808d924:	f3c4 2407 	ubfx	r4, r4, #8, #8
 808d928:	4043      	eors	r3, r0
 808d92a:	f3c1 4007 	ubfx	r0, r1, #16, #8
 808d92e:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 808d932:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 808d936:	4043      	eors	r3, r0
 808d938:	0e08      	lsrs	r0, r1, #24
 808d93a:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 808d93e:	b2c9      	uxtb	r1, r1
 808d940:	ea8e 0e00 	eor.w	lr, lr, r0
 808d944:	68b8      	ldr	r0, [r7, #8]
 808d946:	f858 8021 	ldr.w	r8, [r8, r1, lsl #2]
 808d94a:	ea8e 0000 	eor.w	r0, lr, r0
 808d94e:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 808d952:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808d956:	0e1e      	lsrs	r6, r3, #24
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808d958:	ea80 000e 	eor.w	r0, r0, lr
 808d95c:	f3ca 4e07 	ubfx	lr, sl, #16, #8
 808d960:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 808d964:	ea80 000e 	eor.w	r0, r0, lr
 808d968:	ea4f 6e1a 	mov.w	lr, sl, lsr #24
 808d96c:	f85c 102e 	ldr.w	r1, [ip, lr, lsl #2]
 808d970:	ea88 0e01 	eor.w	lr, r8, r1
 808d974:	68f9      	ldr	r1, [r7, #12]
 808d976:	ea8e 0101 	eor.w	r1, lr, r1
 808d97a:	4061      	eors	r1, r4
 808d97c:	f3cb 4407 	ubfx	r4, fp, #16, #8
 808d980:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 808d984:	fa5f f589 	uxtb.w	r5, r9
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808d988:	4061      	eors	r1, r4

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 808d98a:	4c40      	ldr	r4, [pc, #256]	; (808da8c <mbedtls_internal_aes_decrypt+0x390>)
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808d98c:	f814 e005 	ldrb.w	lr, [r4, r5]
 808d990:	693d      	ldr	r5, [r7, #16]
 808d992:	ea8e 0505 	eor.w	r5, lr, r5
 808d996:	f814 e006 	ldrb.w	lr, [r4, r6]

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 808d99a:	f3c1 2607 	ubfx	r6, r1, #8, #8
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808d99e:	ea85 650e 	eor.w	r5, r5, lr, lsl #24
 808d9a2:	f814 e006 	ldrb.w	lr, [r4, r6]
    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 808d9a6:	f3c0 4607 	ubfx	r6, r0, #16, #8
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808d9aa:	ea85 250e 	eor.w	r5, r5, lr, lsl #8
 808d9ae:	f814 e006 	ldrb.w	lr, [r4, r6]
 808d9b2:	ea85 4e0e 	eor.w	lr, r5, lr, lsl #16

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 808d9b6:	b2dd      	uxtb	r5, r3
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808d9b8:	5d66      	ldrb	r6, [r4, r5]
 808d9ba:	697d      	ldr	r5, [r7, #20]
 808d9bc:	4075      	eors	r5, r6
 808d9be:	0e06      	lsrs	r6, r0, #24
 808d9c0:	5da6      	ldrb	r6, [r4, r6]
 808d9c2:	ea85 6506 	eor.w	r5, r5, r6, lsl #24
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 808d9c6:	f3c9 2607 	ubfx	r6, r9, #8, #8
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808d9ca:	5da6      	ldrb	r6, [r4, r6]
 808d9cc:	ea85 2506 	eor.w	r5, r5, r6, lsl #8
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 808d9d0:	f3c1 4607 	ubfx	r6, r1, #16, #8
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808d9d4:	5da6      	ldrb	r6, [r4, r6]
 808d9d6:	ea85 4606 	eor.w	r6, r5, r6, lsl #16

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 808d9da:	b2c5      	uxtb	r5, r0
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808d9dc:	f814 c005 	ldrb.w	ip, [r4, r5]
 808d9e0:	69bd      	ldr	r5, [r7, #24]

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 808d9e2:	f3c0 2007 	ubfx	r0, r0, #8, #8

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808d9e6:	ea8c 0505 	eor.w	r5, ip, r5
 808d9ea:	ea4f 6c11 	mov.w	ip, r1, lsr #24
 808d9ee:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 808d9f2:	b2c9      	uxtb	r1, r1

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808d9f4:	ea85 650c 	eor.w	r5, r5, ip, lsl #24
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 808d9f8:	f3c3 2c07 	ubfx	ip, r3, #8, #8
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808d9fc:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808da00:	5c20      	ldrb	r0, [r4, r0]

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808da02:	ea85 250c 	eor.w	r5, r5, ip, lsl #8
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 808da06:	f3c9 4c07 	ubfx	ip, r9, #16, #8
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808da0a:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808da0e:	ea4f 6919 	mov.w	r9, r9, lsr #24

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808da12:	ea85 450c 	eor.w	r5, r5, ip, lsl #16

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808da16:	f814 c001 	ldrb.w	ip, [r4, r1]
 808da1a:	69f9      	ldr	r1, [r7, #28]
 808da1c:	f814 7009 	ldrb.w	r7, [r4, r9]
 808da20:	ea8c 0101 	eor.w	r1, ip, r1
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 808da24:	f3c3 4307 	ubfx	r3, r3, #16, #8
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808da28:	5ce3      	ldrb	r3, [r4, r3]
 808da2a:	ea81 6107 	eor.w	r1, r1, r7, lsl #24
 808da2e:	ea81 2100 	eor.w	r1, r1, r0, lsl #8
 808da32:	ea81 4303 	eor.w	r3, r1, r3, lsl #16

    PUT_UINT32_LE( X0, output,  0 );
 808da36:	ea4f 211e 	mov.w	r1, lr, lsr #8
 808da3a:	7051      	strb	r1, [r2, #1]
 808da3c:	ea4f 411e 	mov.w	r1, lr, lsr #16
 808da40:	7091      	strb	r1, [r2, #2]
    PUT_UINT32_LE( X1, output,  4 );
 808da42:	0a31      	lsrs	r1, r6, #8
 808da44:	7151      	strb	r1, [r2, #5]
 808da46:	0c31      	lsrs	r1, r6, #16
 808da48:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
 808da4a:	0a29      	lsrs	r1, r5, #8
 808da4c:	7251      	strb	r1, [r2, #9]
 808da4e:	0c29      	lsrs	r1, r5, #16
 808da50:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
 808da52:	0a19      	lsrs	r1, r3, #8
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 808da54:	f882 e000 	strb.w	lr, [r2]
    PUT_UINT32_LE( X1, output,  4 );
 808da58:	7116      	strb	r6, [r2, #4]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 808da5a:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    PUT_UINT32_LE( X1, output,  4 );
 808da5e:	0e36      	lsrs	r6, r6, #24
    PUT_UINT32_LE( X2, output,  8 );
 808da60:	7215      	strb	r5, [r2, #8]
    PUT_UINT32_LE( X3, output, 12 );
 808da62:	7313      	strb	r3, [r2, #12]
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
 808da64:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X3, output, 12 );
 808da66:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
 808da68:	2000      	movs	r0, #0
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
 808da6a:	0c19      	lsrs	r1, r3, #16
 808da6c:	0e1b      	lsrs	r3, r3, #24
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 808da6e:	f882 e003 	strb.w	lr, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
 808da72:	71d6      	strb	r6, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
 808da74:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
 808da76:	7391      	strb	r1, [r2, #14]
 808da78:	73d3      	strb	r3, [r2, #15]

    return( 0 );
}
 808da7a:	b003      	add	sp, #12
 808da7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808da80:	20002bf8 	.word	0x20002bf8
 808da84:	200033f8 	.word	0x200033f8
 808da88:	200037f8 	.word	0x200037f8
 808da8c:	200029f8 	.word	0x200029f8
 808da90:	20002ff8 	.word	0x20002ff8

0808da94 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
 808da94:	b410      	push	{r4}
 808da96:	4614      	mov	r4, r2
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 808da98:	2901      	cmp	r1, #1
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
 808da9a:	461a      	mov	r2, r3
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 808da9c:	4621      	mov	r1, r4
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 808da9e:	d102      	bne.n	808daa6 <mbedtls_aes_crypt_ecb+0x12>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
}
 808daa0:	bc10      	pop	{r4}
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 808daa2:	f7ff bc5f 	b.w	808d364 <mbedtls_internal_aes_encrypt>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
}
 808daa6:	bc10      	pop	{r4}
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 808daa8:	f7ff be28 	b.w	808d6fc <mbedtls_internal_aes_decrypt>

0808daac <mbedtls_aes_crypt_cbc>:
                    int mode,
                    size_t length,
                    unsigned char iv[16],
                    const unsigned char *input,
                    unsigned char *output )
{
 808daac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808dab0:	4698      	mov	r8, r3
 808dab2:	b085      	sub	sp, #20
    int i;
    unsigned char temp[16];

    if( length % 16 )
 808dab4:	0713      	lsls	r3, r2, #28
                    int mode,
                    size_t length,
                    unsigned char iv[16],
                    const unsigned char *input,
                    unsigned char *output )
{
 808dab6:	4681      	mov	r9, r0
 808dab8:	460f      	mov	r7, r1
 808daba:	4616      	mov	r6, r2
 808dabc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 808dabe:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    int i;
    unsigned char temp[16];

    if( length % 16 )
 808dac0:	d15a      	bne.n	808db78 <mbedtls_aes_crypt_cbc+0xcc>
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
 808dac2:	bba9      	cbnz	r1, 808db30 <mbedtls_aes_crypt_cbc+0x84>
 808dac4:	462a      	mov	r2, r5
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );

            for( i = 0; i < 16; i++ )
                output[i] = (unsigned char)( output[i] ^ iv[i] );

            memcpy( iv, temp, 16 );
 808dac6:	f10d 0b10 	add.w	fp, sp, #16
 808daca:	1ab3      	subs	r3, r6, r2
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
    {
        while( length > 0 )
 808dacc:	42dd      	cmn	r5, r3
 808dace:	d101      	bne.n	808dad4 <mbedtls_aes_crypt_cbc+0x28>
            output += 16;
            length -= 16;
        }
    }

    return( 0 );
 808dad0:	2000      	movs	r0, #0
 808dad2:	e053      	b.n	808db7c <mbedtls_aes_crypt_cbc+0xd0>

    if( mode == MBEDTLS_AES_DECRYPT )
    {
        while( length > 0 )
        {
            memcpy( temp, input, 16 );
 808dad4:	4613      	mov	r3, r2
 808dad6:	46ee      	mov	lr, sp
 808dad8:	466f      	mov	r7, sp
 808dada:	f102 0a10 	add.w	sl, r2, #16
 808dade:	46f4      	mov	ip, lr
 808dae0:	6818      	ldr	r0, [r3, #0]
 808dae2:	6859      	ldr	r1, [r3, #4]
 808dae4:	3308      	adds	r3, #8
 808dae6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 808daea:	4553      	cmp	r3, sl
 808daec:	46e6      	mov	lr, ip
 808daee:	d1f6      	bne.n	808dade <mbedtls_aes_crypt_cbc+0x32>
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );
 808daf0:	4623      	mov	r3, r4
 808daf2:	2100      	movs	r1, #0
 808daf4:	4648      	mov	r0, r9
 808daf6:	f7ff ffcd 	bl	808da94 <mbedtls_aes_crypt_ecb>
 808dafa:	1e63      	subs	r3, r4, #1
 808dafc:	f108 31ff 	add.w	r1, r8, #4294967295
 808db00:	f104 000f 	add.w	r0, r4, #15

            for( i = 0; i < 16; i++ )
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 808db04:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 808db08:	f811 2f01 	ldrb.w	r2, [r1, #1]!
        while( length > 0 )
        {
            memcpy( temp, input, 16 );
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );

            for( i = 0; i < 16; i++ )
 808db0c:	4283      	cmp	r3, r0
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 808db0e:	ea8e 0202 	eor.w	r2, lr, r2
 808db12:	701a      	strb	r2, [r3, #0]
        while( length > 0 )
        {
            memcpy( temp, input, 16 );
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );

            for( i = 0; i < 16; i++ )
 808db14:	d1f6      	bne.n	808db04 <mbedtls_aes_crypt_cbc+0x58>
                output[i] = (unsigned char)( output[i] ^ iv[i] );

            memcpy( iv, temp, 16 );
 808db16:	4642      	mov	r2, r8
 808db18:	463b      	mov	r3, r7
 808db1a:	cb03      	ldmia	r3!, {r0, r1}
 808db1c:	455b      	cmp	r3, fp
 808db1e:	6010      	str	r0, [r2, #0]
 808db20:	6051      	str	r1, [r2, #4]
 808db22:	461f      	mov	r7, r3
 808db24:	f102 0208 	add.w	r2, r2, #8
 808db28:	d1f6      	bne.n	808db18 <mbedtls_aes_crypt_cbc+0x6c>

            input  += 16;
 808db2a:	4652      	mov	r2, sl
            output += 16;
 808db2c:	3410      	adds	r4, #16
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
    {
        while( length > 0 )
 808db2e:	e7cc      	b.n	808daca <mbedtls_aes_crypt_cbc+0x1e>
 808db30:	1e6b      	subs	r3, r5, #1
            length -= 16;
        }
    }
    else
    {
        while( length > 0 )
 808db32:	2e00      	cmp	r6, #0
 808db34:	d0cc      	beq.n	808dad0 <mbedtls_aes_crypt_cbc+0x24>
 808db36:	f108 30ff 	add.w	r0, r8, #4294967295
 808db3a:	1e61      	subs	r1, r4, #1
 808db3c:	f103 0510 	add.w	r5, r3, #16
        {
            for( i = 0; i < 16; i++ )
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 808db40:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 808db44:	f810 2f01 	ldrb.w	r2, [r0, #1]!
    }
    else
    {
        while( length > 0 )
        {
            for( i = 0; i < 16; i++ )
 808db48:	42ab      	cmp	r3, r5
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 808db4a:	ea8e 0202 	eor.w	r2, lr, r2
 808db4e:	f801 2f01 	strb.w	r2, [r1, #1]!
    }
    else
    {
        while( length > 0 )
        {
            for( i = 0; i < 16; i++ )
 808db52:	d1f5      	bne.n	808db40 <mbedtls_aes_crypt_cbc+0x94>
                output[i] = (unsigned char)( input[i] ^ iv[i] );

            mbedtls_aes_crypt_ecb( ctx, mode, output, output );
 808db54:	4623      	mov	r3, r4
 808db56:	4622      	mov	r2, r4
 808db58:	4639      	mov	r1, r7
 808db5a:	4648      	mov	r0, r9
 808db5c:	f7ff ff9a 	bl	808da94 <mbedtls_aes_crypt_ecb>
            memcpy( iv, output, 16 );
 808db60:	4643      	mov	r3, r8
 808db62:	f104 0210 	add.w	r2, r4, #16
 808db66:	f854 1b04 	ldr.w	r1, [r4], #4
 808db6a:	4294      	cmp	r4, r2
 808db6c:	f843 1b04 	str.w	r1, [r3], #4
 808db70:	d1f9      	bne.n	808db66 <mbedtls_aes_crypt_cbc+0xba>

            input  += 16;
            output += 16;
            length -= 16;
 808db72:	3e10      	subs	r6, #16
            length -= 16;
        }
    }
    else
    {
        while( length > 0 )
 808db74:	462b      	mov	r3, r5
 808db76:	e7dc      	b.n	808db32 <mbedtls_aes_crypt_cbc+0x86>
{
    int i;
    unsigned char temp[16];

    if( length % 16 )
        return( MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH );
 808db78:	f06f 0021 	mvn.w	r0, #33	; 0x21
            length -= 16;
        }
    }

    return( 0 );
}
 808db7c:	b005      	add	sp, #20
 808db7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808db82 <_ZL15mbedtls_zeroizePvj>:
#if defined(MBEDTLS_DES_C)
#include "mbedtls/des.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 808db82:	4401      	add	r1, r0
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808db84:	2300      	movs	r3, #0
 808db86:	4288      	cmp	r0, r1
 808db88:	d002      	beq.n	808db90 <_ZL15mbedtls_zeroizePvj+0xe>
 808db8a:	7003      	strb	r3, [r0, #0]
 808db8c:	3001      	adds	r0, #1
 808db8e:	e7fa      	b.n	808db86 <_ZL15mbedtls_zeroizePvj+0x4>
 808db90:	4770      	bx	lr

0808db92 <_ZL18pkcs12_fill_bufferPhjPKhj>:
    return( ret );
}

static void pkcs12_fill_buffer( unsigned char *data, size_t data_len,
                                const unsigned char *filler, size_t fill_len )
{
 808db92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808db96:	4606      	mov	r6, r0
 808db98:	460c      	mov	r4, r1
 808db9a:	4617      	mov	r7, r2
 808db9c:	4698      	mov	r8, r3
    unsigned char *p = data;
    size_t use_len;

    while( data_len > 0 )
 808db9e:	b15c      	cbz	r4, 808dbb8 <_ZL18pkcs12_fill_bufferPhjPKhj+0x26>
 808dba0:	4544      	cmp	r4, r8
 808dba2:	4625      	mov	r5, r4
 808dba4:	bf28      	it	cs
 808dba6:	4645      	movcs	r5, r8
    {
        use_len = ( data_len > fill_len ) ? fill_len : data_len;
        memcpy( p, filler, use_len );
 808dba8:	4630      	mov	r0, r6
 808dbaa:	462a      	mov	r2, r5
 808dbac:	4639      	mov	r1, r7
 808dbae:	f005 ffe6 	bl	8093b7e <memcpy>
        p += use_len;
 808dbb2:	442e      	add	r6, r5
        data_len -= use_len;
 808dbb4:	1b64      	subs	r4, r4, r5
                                const unsigned char *filler, size_t fill_len )
{
    unsigned char *p = data;
    size_t use_len;

    while( data_len > 0 )
 808dbb6:	e7f2      	b.n	808db9e <_ZL18pkcs12_fill_bufferPhjPKhj+0xc>
 808dbb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808dbbc <mbedtls_pkcs12_pbe_sha1_rc4_128>:
    mbedtls_zeroize( key, sizeof( key ) );
    mbedtls_arc4_free( &ctx );

    return( ret );
#endif /* MBEDTLS_ARC4_C */
}
 808dbbc:	4800      	ldr	r0, [pc, #0]	; (808dbc0 <mbedtls_pkcs12_pbe_sha1_rc4_128+0x4>)
 808dbbe:	4770      	bx	lr
 808dbc0:	ffffe100 	.word	0xffffe100

0808dbc4 <mbedtls_pkcs12_derivation>:

int mbedtls_pkcs12_derivation( unsigned char *data, size_t datalen,
                       const unsigned char *pwd, size_t pwdlen,
                       const unsigned char *salt, size_t saltlen,
                       mbedtls_md_type_t md_type, int id, int iterations )
{
 808dbc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
 808dbc8:	2980      	cmp	r1, #128	; 0x80

int mbedtls_pkcs12_derivation( unsigned char *data, size_t datalen,
                       const unsigned char *pwd, size_t pwdlen,
                       const unsigned char *salt, size_t saltlen,
                       mbedtls_md_type_t md_type, int id, int iterations )
{
 808dbca:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 808dbce:	9001      	str	r0, [sp, #4]
 808dbd0:	460f      	mov	r7, r1
 808dbd2:	4693      	mov	fp, r2
 808dbd4:	4699      	mov	r9, r3
 808dbd6:	9da1      	ldr	r5, [sp, #644]	; 0x284

    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
 808dbd8:	f200 80c3 	bhi.w	808dd62 <mbedtls_pkcs12_derivation+0x19e>
 808dbdc:	2b40      	cmp	r3, #64	; 0x40
 808dbde:	f200 80c0 	bhi.w	808dd62 <mbedtls_pkcs12_derivation+0x19e>
 808dbe2:	2d40      	cmp	r5, #64	; 0x40
 808dbe4:	f200 80bd 	bhi.w	808dd62 <mbedtls_pkcs12_derivation+0x19e>
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( md_type );
 808dbe8:	f89d 0288 	ldrb.w	r0, [sp, #648]	; 0x288
 808dbec:	f7fa f918 	bl	8087e20 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 808dbf0:	9000      	str	r0, [sp, #0]
 808dbf2:	2800      	cmp	r0, #0
 808dbf4:	f000 80b7 	beq.w	808dd66 <mbedtls_pkcs12_derivation+0x1a2>
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    mbedtls_md_init( &md_ctx );
 808dbf8:	a803      	add	r0, sp, #12
 808dbfa:	f7fa f91d 	bl	8087e38 <mbedtls_md_init>

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 808dbfe:	2200      	movs	r2, #0
 808dc00:	9900      	ldr	r1, [sp, #0]
 808dc02:	a803      	add	r0, sp, #12
 808dc04:	f7fa f93e 	bl	8087e84 <mbedtls_md_setup>
 808dc08:	2800      	cmp	r0, #0
 808dc0a:	f040 80ad 	bne.w	808dd68 <mbedtls_pkcs12_derivation+0x1a4>
        return( ret );
    hlen = mbedtls_md_get_size( md_info );
 808dc0e:	9800      	ldr	r0, [sp, #0]
 808dc10:	f7fa fa4a 	bl	80880a8 <mbedtls_md_get_size>

    if( hlen <= 32 )
        v = 64;
 808dc14:	2820      	cmp	r0, #32
 808dc16:	bf8c      	ite	hi
 808dc18:	2480      	movhi	r4, #128	; 0x80
 808dc1a:	2440      	movls	r4, #64	; 0x40
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );
 808dc1c:	4622      	mov	r2, r4
 808dc1e:	f89d 128c 	ldrb.w	r1, [sp, #652]	; 0x28c

    mbedtls_md_init( &md_ctx );

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
        return( ret );
    hlen = mbedtls_md_get_size( md_info );
 808dc22:	4682      	mov	sl, r0
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
 808dc24:	f10d 08d8 	add.w	r8, sp, #216	; 0xd8
    if( hlen <= 32 )
        v = 64;
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );
 808dc28:	a816      	add	r0, sp, #88	; 0x58
 808dc2a:	f005 ffce 	bl	8093bca <memset>

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
 808dc2e:	462b      	mov	r3, r5
 808dc30:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 808dc32:	4621      	mov	r1, r4
 808dc34:	4640      	mov	r0, r8
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );
 808dc36:	ad56      	add	r5, sp, #344	; 0x158
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
 808dc38:	f7ff ffab 	bl	808db92 <_ZL18pkcs12_fill_bufferPhjPKhj>
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );
 808dc3c:	464b      	mov	r3, r9
 808dc3e:	465a      	mov	r2, fp
 808dc40:	4621      	mov	r1, r4
 808dc42:	4628      	mov	r0, r5
 808dc44:	f7ff ffa5 	bl	808db92 <_ZL18pkcs12_fill_bufferPhjPKhj>

        if( datalen == 0 )
            break;

        // Concatenating copies of hash_output into hash_block (B)
        pkcs12_fill_buffer( hash_block, v, hash_output, hlen );
 808dc48:	f50d 79ec 	add.w	r9, sp, #472	; 0x1d8

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );

    p = data;
    while( datalen > 0 )
 808dc4c:	2f00      	cmp	r7, #0
 808dc4e:	d072      	beq.n	808dd36 <mbedtls_pkcs12_derivation+0x172>
    {
        // Calculate hash( diversifier || salt_block || pwd_block )
        if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
 808dc50:	a803      	add	r0, sp, #12
 808dc52:	f7fa f939 	bl	8087ec8 <mbedtls_md_starts>
 808dc56:	4606      	mov	r6, r0
 808dc58:	2800      	cmp	r0, #0
 808dc5a:	d16d      	bne.n	808dd38 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, diversifier, v ) ) != 0 )
 808dc5c:	4622      	mov	r2, r4
 808dc5e:	a916      	add	r1, sp, #88	; 0x58
 808dc60:	a803      	add	r0, sp, #12
 808dc62:	f7fa f93b 	bl	8087edc <mbedtls_md_update>
 808dc66:	4606      	mov	r6, r0
 808dc68:	2800      	cmp	r0, #0
 808dc6a:	d165      	bne.n	808dd38 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, salt_block, v ) ) != 0 )
 808dc6c:	4622      	mov	r2, r4
 808dc6e:	4641      	mov	r1, r8
 808dc70:	a803      	add	r0, sp, #12
 808dc72:	f7fa f933 	bl	8087edc <mbedtls_md_update>
 808dc76:	4606      	mov	r6, r0
 808dc78:	2800      	cmp	r0, #0
 808dc7a:	d15d      	bne.n	808dd38 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, pwd_block, v ) ) != 0 )
 808dc7c:	4622      	mov	r2, r4
 808dc7e:	4629      	mov	r1, r5
 808dc80:	a803      	add	r0, sp, #12
 808dc82:	f7fa f92b 	bl	8087edc <mbedtls_md_update>
 808dc86:	4606      	mov	r6, r0
 808dc88:	2800      	cmp	r0, #0
 808dc8a:	d155      	bne.n	808dd38 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_finish( &md_ctx, hash_output ) ) != 0 )
 808dc8c:	a906      	add	r1, sp, #24
 808dc8e:	a803      	add	r0, sp, #12
 808dc90:	f7fa f92e 	bl	8087ef0 <mbedtls_md_finish>
 808dc94:	4606      	mov	r6, r0
 808dc96:	2800      	cmp	r0, #0
 808dc98:	d14e      	bne.n	808dd38 <mbedtls_pkcs12_derivation+0x174>
 808dc9a:	f04f 0b01 	mov.w	fp, #1
            goto exit;

        // Perform remaining ( iterations - 1 ) recursive hash calculations
        for( i = 1; i < (size_t) iterations; i++ )
 808dc9e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 808dca0:	459b      	cmp	fp, r3
 808dca2:	d20b      	bcs.n	808dcbc <mbedtls_pkcs12_derivation+0xf8>
        {
            if( ( ret = mbedtls_md( md_info, hash_output, hlen, hash_output ) ) != 0 )
 808dca4:	ab06      	add	r3, sp, #24
 808dca6:	4652      	mov	r2, sl
 808dca8:	4619      	mov	r1, r3
 808dcaa:	9800      	ldr	r0, [sp, #0]
 808dcac:	f7fa f92a 	bl	8087f04 <mbedtls_md>
 808dcb0:	4606      	mov	r6, r0
 808dcb2:	2800      	cmp	r0, #0
 808dcb4:	d140      	bne.n	808dd38 <mbedtls_pkcs12_derivation+0x174>

        if( ( ret = mbedtls_md_finish( &md_ctx, hash_output ) ) != 0 )
            goto exit;

        // Perform remaining ( iterations - 1 ) recursive hash calculations
        for( i = 1; i < (size_t) iterations; i++ )
 808dcb6:	f10b 0b01 	add.w	fp, fp, #1
 808dcba:	e7f0      	b.n	808dc9e <mbedtls_pkcs12_derivation+0xda>
 808dcbc:	4557      	cmp	r7, sl
 808dcbe:	46bb      	mov	fp, r7
 808dcc0:	bf28      	it	cs
 808dcc2:	46d3      	movcs	fp, sl
            if( ( ret = mbedtls_md( md_info, hash_output, hlen, hash_output ) ) != 0 )
                goto exit;
        }

        use_len = ( datalen > hlen ) ? hlen : datalen;
        memcpy( p, hash_output, use_len );
 808dcc4:	a906      	add	r1, sp, #24
 808dcc6:	465a      	mov	r2, fp
 808dcc8:	9801      	ldr	r0, [sp, #4]
 808dcca:	f005 ff58 	bl	8093b7e <memcpy>
        datalen -= use_len;
        p += use_len;
 808dcce:	9b01      	ldr	r3, [sp, #4]

        if( datalen == 0 )
 808dcd0:	ebb7 070b 	subs.w	r7, r7, fp
        }

        use_len = ( datalen > hlen ) ? hlen : datalen;
        memcpy( p, hash_output, use_len );
        datalen -= use_len;
        p += use_len;
 808dcd4:	445b      	add	r3, fp
 808dcd6:	9301      	str	r3, [sp, #4]

        if( datalen == 0 )
 808dcd8:	d02d      	beq.n	808dd36 <mbedtls_pkcs12_derivation+0x172>
            break;

        // Concatenating copies of hash_output into hash_block (B)
        pkcs12_fill_buffer( hash_block, v, hash_output, hlen );
 808dcda:	4653      	mov	r3, sl
 808dcdc:	aa06      	add	r2, sp, #24
 808dcde:	4621      	mov	r1, r4
 808dce0:	4648      	mov	r0, r9
 808dce2:	f7ff ff56 	bl	808db92 <_ZL18pkcs12_fill_bufferPhjPKhj>
 808dce6:	eb09 0304 	add.w	r3, r9, r4

        // B += 1
        for( i = v; i > 0; i-- )
            if( ++hash_block[i - 1] != 0 )
 808dcea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 808dcee:	3201      	adds	r2, #1
 808dcf0:	b2d2      	uxtb	r2, r2
 808dcf2:	701a      	strb	r2, [r3, #0]
 808dcf4:	b91a      	cbnz	r2, 808dcfe <mbedtls_pkcs12_derivation+0x13a>

        // Concatenating copies of hash_output into hash_block (B)
        pkcs12_fill_buffer( hash_block, v, hash_output, hlen );

        // B += 1
        for( i = v; i > 0; i-- )
 808dcf6:	454b      	cmp	r3, r9
 808dcf8:	d1f7      	bne.n	808dcea <mbedtls_pkcs12_derivation+0x126>
 808dcfa:	4623      	mov	r3, r4
 808dcfc:	e001      	b.n	808dd02 <mbedtls_pkcs12_derivation+0x13e>
 808dcfe:	4623      	mov	r3, r4
 808dd00:	2200      	movs	r2, #0

        // salt_block += B
        c = 0;
        for( i = v; i > 0; i-- )
        {
            j = salt_block[i - 1] + hash_block[i - 1] + c;
 808dd02:	3b01      	subs	r3, #1
 808dd04:	f818 0003 	ldrb.w	r0, [r8, r3]
 808dd08:	f813 1009 	ldrb.w	r1, [r3, r9]
 808dd0c:	4401      	add	r1, r0
 808dd0e:	4411      	add	r1, r2
            c = (unsigned char) (j >> 8);
 808dd10:	f3c1 2207 	ubfx	r2, r1, #8, #8
            salt_block[i - 1] = j & 0xFF;
 808dd14:	f808 1003 	strb.w	r1, [r8, r3]
            if( ++hash_block[i - 1] != 0 )
                break;

        // salt_block += B
        c = 0;
        for( i = v; i > 0; i-- )
 808dd18:	2b00      	cmp	r3, #0
 808dd1a:	d1f2      	bne.n	808dd02 <mbedtls_pkcs12_derivation+0x13e>
 808dd1c:	4622      	mov	r2, r4

        // pwd_block  += B
        c = 0;
        for( i = v; i > 0; i-- )
        {
            j = pwd_block[i - 1] + hash_block[i - 1] + c;
 808dd1e:	3a01      	subs	r2, #1
 808dd20:	5d50      	ldrb	r0, [r2, r5]
 808dd22:	f812 1009 	ldrb.w	r1, [r2, r9]
 808dd26:	4401      	add	r1, r0
 808dd28:	4419      	add	r1, r3
            c = (unsigned char) (j >> 8);
 808dd2a:	f3c1 2307 	ubfx	r3, r1, #8, #8
            pwd_block[i - 1] = j & 0xFF;
 808dd2e:	5551      	strb	r1, [r2, r5]
            salt_block[i - 1] = j & 0xFF;
        }

        // pwd_block  += B
        c = 0;
        for( i = v; i > 0; i-- )
 808dd30:	2a00      	cmp	r2, #0
 808dd32:	d1f4      	bne.n	808dd1e <mbedtls_pkcs12_derivation+0x15a>
 808dd34:	e78a      	b.n	808dc4c <mbedtls_pkcs12_derivation+0x88>
            c = (unsigned char) (j >> 8);
            pwd_block[i - 1] = j & 0xFF;
        }
    }

    ret = 0;
 808dd36:	2600      	movs	r6, #0

exit:
    mbedtls_zeroize( salt_block, sizeof( salt_block ) );
 808dd38:	2180      	movs	r1, #128	; 0x80
 808dd3a:	4640      	mov	r0, r8
 808dd3c:	f7ff ff21 	bl	808db82 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( pwd_block, sizeof( pwd_block ) );
 808dd40:	2180      	movs	r1, #128	; 0x80
 808dd42:	4628      	mov	r0, r5
 808dd44:	f7ff ff1d 	bl	808db82 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( hash_block, sizeof( hash_block ) );
 808dd48:	2180      	movs	r1, #128	; 0x80
 808dd4a:	a876      	add	r0, sp, #472	; 0x1d8
 808dd4c:	f7ff ff19 	bl	808db82 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( hash_output, sizeof( hash_output ) );
 808dd50:	2140      	movs	r1, #64	; 0x40
 808dd52:	a806      	add	r0, sp, #24
 808dd54:	f7ff ff15 	bl	808db82 <_ZL15mbedtls_zeroizePvj>

    mbedtls_md_free( &md_ctx );
 808dd58:	a803      	add	r0, sp, #12
 808dd5a:	f7fa f872 	bl	8087e42 <mbedtls_md_free>

    return( ret );
 808dd5e:	4630      	mov	r0, r6
 808dd60:	e002      	b.n	808dd68 <mbedtls_pkcs12_derivation+0x1a4>
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );
 808dd62:	4803      	ldr	r0, [pc, #12]	; (808dd70 <mbedtls_pkcs12_derivation+0x1ac>)
 808dd64:	e000      	b.n	808dd68 <mbedtls_pkcs12_derivation+0x1a4>

    md_info = mbedtls_md_info_from_type( md_type );
    if( md_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );
 808dd66:	4803      	ldr	r0, [pc, #12]	; (808dd74 <mbedtls_pkcs12_derivation+0x1b0>)
    mbedtls_zeroize( hash_output, sizeof( hash_output ) );

    mbedtls_md_free( &md_ctx );

    return( ret );
}
 808dd68:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 808dd6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808dd70:	ffffe080 	.word	0xffffe080
 808dd74:	ffffe100 	.word	0xffffe100

0808dd78 <mbedtls_pkcs12_pbe>:
int mbedtls_pkcs12_pbe( mbedtls_asn1_buf *pbe_params, int mode,
                mbedtls_cipher_type_t cipher_type, mbedtls_md_type_t md_type,
                const unsigned char *pwd,  size_t pwdlen,
                const unsigned char *data, size_t len,
                unsigned char *output )
{
 808dd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808dd7c:	4604      	mov	r4, r0
 808dd7e:	b0d9      	sub	sp, #356	; 0x164
    int ret, keylen = 0;
    unsigned char key[32];
    unsigned char iv[16];
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_cipher_context_t cipher_ctx;
    size_t olen = 0;
 808dd80:	2600      	movs	r6, #0

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
 808dd82:	4610      	mov	r0, r2
int mbedtls_pkcs12_pbe( mbedtls_asn1_buf *pbe_params, int mode,
                mbedtls_cipher_type_t cipher_type, mbedtls_md_type_t md_type,
                const unsigned char *pwd,  size_t pwdlen,
                const unsigned char *data, size_t len,
                unsigned char *output )
{
 808dd84:	468b      	mov	fp, r1
 808dd86:	4699      	mov	r9, r3
    int ret, keylen = 0;
    unsigned char key[32];
    unsigned char iv[16];
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_cipher_context_t cipher_ctx;
    size_t olen = 0;
 808dd88:	9606      	str	r6, [sp, #24]

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
 808dd8a:	f7f5 fbb7 	bl	80834fc <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
 808dd8e:	4605      	mov	r5, r0
 808dd90:	2800      	cmp	r0, #0
 808dd92:	f000 80ac 	beq.w	808deee <mbedtls_pkcs12_pbe+0x176>
    int ret, iterations = 0;
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
 808dd96:	9b63      	ldr	r3, [sp, #396]	; 0x18c

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    keylen = cipher_info->key_bitlen / 8;
 808dd98:	6847      	ldr	r7, [r0, #4]
    int ret, iterations = 0;
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
 808dd9a:	2b80      	cmp	r3, #128	; 0x80

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    keylen = cipher_info->key_bitlen / 8;
 808dd9c:	ea4f 07d7 	mov.w	r7, r7, lsr #3

    if( ( ret = pkcs12_pbe_derive_key_iv( pbe_params, md_type, pwd, pwdlen,
                                          key, keylen,
                                          iv, cipher_info->iv_size ) ) != 0 )
 808dda0:	f8d0 800c 	ldr.w	r8, [r0, #12]
static int pkcs12_pbe_derive_key_iv( mbedtls_asn1_buf *pbe_params, mbedtls_md_type_t md_type,
                                     const unsigned char *pwd,  size_t pwdlen,
                                     unsigned char *key, size_t keylen,
                                     unsigned char *iv,  size_t ivlen )
{
    int ret, iterations = 0;
 808dda4:	9607      	str	r6, [sp, #28]
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
 808dda6:	d85e      	bhi.n	808de66 <mbedtls_pkcs12_pbe+0xee>
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
    memset( &unipwd, 0, sizeof(unipwd) );
 808dda8:	4631      	mov	r1, r6
 808ddaa:	f44f 7281 	mov.w	r2, #258	; 0x102
 808ddae:	a817      	add	r0, sp, #92	; 0x5c
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
 808ddb0:	9608      	str	r6, [sp, #32]
 808ddb2:	9609      	str	r6, [sp, #36]	; 0x24
 808ddb4:	960a      	str	r6, [sp, #40]	; 0x28
    memset( &unipwd, 0, sizeof(unipwd) );
 808ddb6:	f005 ff08 	bl	8093bca <memset>
static int pkcs12_parse_pbe_params( mbedtls_asn1_buf *params,
                                    mbedtls_asn1_buf *salt, int *iterations )
{
    int ret;
    unsigned char **p = &params->p;
    const unsigned char *end = params->p + params->len;
 808ddba:	6863      	ldr	r3, [r4, #4]
 808ddbc:	68a6      	ldr	r6, [r4, #8]

static int pkcs12_parse_pbe_params( mbedtls_asn1_buf *params,
                                    mbedtls_asn1_buf *salt, int *iterations )
{
    int ret;
    unsigned char **p = &params->p;
 808ddbe:	f104 0a08 	add.w	sl, r4, #8
    const unsigned char *end = params->p + params->len;
 808ddc2:	441e      	add	r6, r3
     *    salt          OCTET STRING,
     *    iterations    INTEGER
     *  }
     *
     */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 808ddc4:	6823      	ldr	r3, [r4, #0]
 808ddc6:	2b30      	cmp	r3, #48	; 0x30
 808ddc8:	f040 8093 	bne.w	808def2 <mbedtls_pkcs12_pbe+0x17a>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    if( ( ret = mbedtls_asn1_get_tag( p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 808ddcc:	2304      	movs	r3, #4
 808ddce:	aa09      	add	r2, sp, #36	; 0x24
 808ddd0:	4631      	mov	r1, r6
 808ddd2:	4650      	mov	r0, sl
 808ddd4:	f7f5 fe6c 	bl	8083ab0 <mbedtls_asn1_get_tag>
 808ddd8:	b950      	cbnz	r0, 808ddf0 <mbedtls_pkcs12_pbe+0x78>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    salt->p = *p;
 808ddda:	68a2      	ldr	r2, [r4, #8]
    *p += salt->len;
 808dddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    if( ( ret = mbedtls_asn1_get_tag( p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    salt->p = *p;
 808ddde:	920a      	str	r2, [sp, #40]	; 0x28
    *p += salt->len;
 808dde0:	4413      	add	r3, r2
 808dde2:	60a3      	str	r3, [r4, #8]

    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
 808dde4:	aa07      	add	r2, sp, #28
 808dde6:	4631      	mov	r1, r6
 808dde8:	4650      	mov	r0, sl
 808ddea:	f7f5 fe8e 	bl	8083b0a <mbedtls_asn1_get_int>
 808ddee:	b118      	cbz	r0, 808ddf8 <mbedtls_pkcs12_pbe+0x80>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );
 808ddf0:	f5a0 50f4 	sub.w	r0, r0, #7808	; 0x1e80
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
    memset( &unipwd, 0, sizeof(unipwd) );

    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
 808ddf4:	b118      	cbz	r0, 808ddfe <mbedtls_pkcs12_pbe+0x86>
 808ddf6:	e07f      	b.n	808def8 <mbedtls_pkcs12_pbe+0x180>
    *p += salt->len;

    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    if( *p != end )
 808ddf8:	68a3      	ldr	r3, [r4, #8]
 808ddfa:	429e      	cmp	r6, r3
 808ddfc:	d17b      	bne.n	808def6 <mbedtls_pkcs12_pbe+0x17e>
int mbedtls_pkcs12_pbe( mbedtls_asn1_buf *pbe_params, int mode,
                mbedtls_cipher_type_t cipher_type, mbedtls_md_type_t md_type,
                const unsigned char *pwd,  size_t pwdlen,
                const unsigned char *data, size_t len,
                unsigned char *output )
{
 808ddfe:	2300      	movs	r3, #0

    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
                                         &iterations ) ) != 0 )
        return( ret );

    for( i = 0; i < pwdlen; i++ )
 808de00:	9a63      	ldr	r2, [sp, #396]	; 0x18c
 808de02:	429a      	cmp	r2, r3
 808de04:	d007      	beq.n	808de16 <mbedtls_pkcs12_pbe+0x9e>
        unipwd[i * 2 + 1] = pwd[i];
 808de06:	9962      	ldr	r1, [sp, #392]	; 0x188
 808de08:	aa17      	add	r2, sp, #92	; 0x5c
 808de0a:	5cc9      	ldrb	r1, [r1, r3]
 808de0c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 808de10:	7051      	strb	r1, [r2, #1]

    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
                                         &iterations ) ) != 0 )
        return( ret );

    for( i = 0; i < pwdlen; i++ )
 808de12:	3301      	adds	r3, #1
 808de14:	e7f4      	b.n	808de00 <mbedtls_pkcs12_pbe+0x88>
        unipwd[i * 2 + 1] = pwd[i];

    if( ( ret = mbedtls_pkcs12_derivation( key, keylen, unipwd, pwdlen * 2 + 2,
 808de16:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 808de18:	f8cd 9008 	str.w	r9, [sp, #8]
 808de1c:	1c5c      	adds	r4, r3, #1
 808de1e:	9b07      	ldr	r3, [sp, #28]
 808de20:	0064      	lsls	r4, r4, #1
 808de22:	9304      	str	r3, [sp, #16]
 808de24:	2301      	movs	r3, #1
 808de26:	9303      	str	r3, [sp, #12]
 808de28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808de2a:	aa17      	add	r2, sp, #92	; 0x5c
 808de2c:	9301      	str	r3, [sp, #4]
 808de2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808de30:	4639      	mov	r1, r7
 808de32:	9300      	str	r3, [sp, #0]
 808de34:	a80f      	add	r0, sp, #60	; 0x3c
 808de36:	4623      	mov	r3, r4
 808de38:	f7ff fec4 	bl	808dbc4 <mbedtls_pkcs12_derivation>
 808de3c:	b9a8      	cbnz	r0, 808de6a <mbedtls_pkcs12_pbe+0xf2>
                                   MBEDTLS_PKCS12_DERIVE_KEY, iterations ) ) != 0 )
    {
        return( ret );
    }

    if( iv == NULL || ivlen == 0 )
 808de3e:	f1b8 0f00 	cmp.w	r8, #0
 808de42:	d014      	beq.n	808de6e <mbedtls_pkcs12_pbe+0xf6>
        return( 0 );

    if( ( ret = mbedtls_pkcs12_derivation( iv, ivlen, unipwd, pwdlen * 2 + 2,
 808de44:	9b07      	ldr	r3, [sp, #28]
 808de46:	f8cd 9008 	str.w	r9, [sp, #8]
 808de4a:	9304      	str	r3, [sp, #16]
 808de4c:	2302      	movs	r3, #2
 808de4e:	9303      	str	r3, [sp, #12]
 808de50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808de52:	aa17      	add	r2, sp, #92	; 0x5c
 808de54:	9301      	str	r3, [sp, #4]
 808de56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808de58:	4641      	mov	r1, r8
 808de5a:	9300      	str	r3, [sp, #0]
 808de5c:	a80b      	add	r0, sp, #44	; 0x2c
 808de5e:	4623      	mov	r3, r4
 808de60:	f7ff feb0 	bl	808dbc4 <mbedtls_pkcs12_derivation>
 808de64:	e001      	b.n	808de6a <mbedtls_pkcs12_pbe+0xf2>
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );
 808de66:	4826      	ldr	r0, [pc, #152]	; (808df00 <mbedtls_pkcs12_pbe+0x188>)
 808de68:	e046      	b.n	808def8 <mbedtls_pkcs12_pbe+0x180>
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    keylen = cipher_info->key_bitlen / 8;

    if( ( ret = pkcs12_pbe_derive_key_iv( pbe_params, md_type, pwd, pwdlen,
 808de6a:	2800      	cmp	r0, #0
 808de6c:	d144      	bne.n	808def8 <mbedtls_pkcs12_pbe+0x180>
                                          iv, cipher_info->iv_size ) ) != 0 )
    {
        return( ret );
    }

    mbedtls_cipher_init( &cipher_ctx );
 808de6e:	a817      	add	r0, sp, #92	; 0x5c
 808de70:	f7f5 fb66 	bl	8083540 <mbedtls_cipher_init>

    if( ( ret = mbedtls_cipher_setup( &cipher_ctx, cipher_info ) ) != 0 )
 808de74:	4629      	mov	r1, r5
 808de76:	a817      	add	r0, sp, #92	; 0x5c
 808de78:	f7f5 fd36 	bl	80838e8 <mbedtls_cipher_setup>
 808de7c:	4604      	mov	r4, r0
 808de7e:	bb48      	cbnz	r0, 808ded4 <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_setkey( &cipher_ctx, key, 8 * keylen, (mbedtls_operation_t) mode ) ) != 0 )
 808de80:	fa4f f38b 	sxtb.w	r3, fp
 808de84:	00fa      	lsls	r2, r7, #3
 808de86:	a90f      	add	r1, sp, #60	; 0x3c
 808de88:	a817      	add	r0, sp, #92	; 0x5c
 808de8a:	f7f5 fb6f 	bl	808356c <mbedtls_cipher_setkey>
 808de8e:	4604      	mov	r4, r0
 808de90:	bb00      	cbnz	r0, 808ded4 <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_set_iv( &cipher_ctx, iv, cipher_info->iv_size ) ) != 0 )
 808de92:	68ea      	ldr	r2, [r5, #12]
 808de94:	a90b      	add	r1, sp, #44	; 0x2c
 808de96:	a817      	add	r0, sp, #92	; 0x5c
 808de98:	f7f5 fb8a 	bl	80835b0 <mbedtls_cipher_set_iv>
 808de9c:	4604      	mov	r4, r0
 808de9e:	b9c8      	cbnz	r0, 808ded4 <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_reset( &cipher_ctx ) ) != 0 )
 808dea0:	a817      	add	r0, sp, #92	; 0x5c
 808dea2:	f7f5 fba5 	bl	80835f0 <mbedtls_cipher_reset>
 808dea6:	4604      	mov	r4, r0
 808dea8:	b9a0      	cbnz	r0, 808ded4 <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_update( &cipher_ctx, data, len,
 808deaa:	ad06      	add	r5, sp, #24
 808deac:	9500      	str	r5, [sp, #0]
 808deae:	a964      	add	r1, sp, #400	; 0x190
 808deb0:	c90e      	ldmia	r1, {r1, r2, r3}
 808deb2:	a817      	add	r0, sp, #92	; 0x5c
 808deb4:	f7f5 fba8 	bl	8083608 <mbedtls_cipher_update>
 808deb8:	4604      	mov	r4, r0
 808deba:	b958      	cbnz	r0, 808ded4 <mbedtls_pkcs12_pbe+0x15c>
                                output, &olen ) ) != 0 )
    {
        goto exit;
    }

    if( ( ret = mbedtls_cipher_finish( &cipher_ctx, output + olen, &olen ) ) != 0 )
 808debc:	6829      	ldr	r1, [r5, #0]
 808debe:	9b66      	ldr	r3, [sp, #408]	; 0x198
 808dec0:	462a      	mov	r2, r5
 808dec2:	4419      	add	r1, r3
 808dec4:	a817      	add	r0, sp, #92	; 0x5c
 808dec6:	f7f5 fc69 	bl	808379c <mbedtls_cipher_finish>
        ret = MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH;
 808deca:	f5a4 54f0 	sub.w	r4, r4, #7680	; 0x1e00
 808dece:	2800      	cmp	r0, #0
 808ded0:	bf08      	it	eq
 808ded2:	2400      	moveq	r4, #0

exit:
    mbedtls_zeroize( key, sizeof( key ) );
 808ded4:	2120      	movs	r1, #32
 808ded6:	a80f      	add	r0, sp, #60	; 0x3c
 808ded8:	f7ff fe53 	bl	808db82 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( iv,  sizeof( iv  ) );
 808dedc:	2110      	movs	r1, #16
 808dede:	a80b      	add	r0, sp, #44	; 0x2c
 808dee0:	f7ff fe4f 	bl	808db82 <_ZL15mbedtls_zeroizePvj>
    mbedtls_cipher_free( &cipher_ctx );
 808dee4:	a817      	add	r0, sp, #92	; 0x5c
 808dee6:	f7f5 fb2f 	bl	8083548 <mbedtls_cipher_free>

    return( ret );
 808deea:	4620      	mov	r0, r4
 808deec:	e004      	b.n	808def8 <mbedtls_pkcs12_pbe+0x180>
    mbedtls_cipher_context_t cipher_ctx;
    size_t olen = 0;

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );
 808deee:	4805      	ldr	r0, [pc, #20]	; (808df04 <mbedtls_pkcs12_pbe+0x18c>)
 808def0:	e002      	b.n	808def8 <mbedtls_pkcs12_pbe+0x180>
     *  }
     *
     */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 808def2:	4805      	ldr	r0, [pc, #20]	; (808df08 <mbedtls_pkcs12_pbe+0x190>)
 808def4:	e000      	b.n	808def8 <mbedtls_pkcs12_pbe+0x180>
    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    if( *p != end )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 808def6:	4805      	ldr	r0, [pc, #20]	; (808df0c <mbedtls_pkcs12_pbe+0x194>)
    mbedtls_zeroize( key, sizeof( key ) );
    mbedtls_zeroize( iv,  sizeof( iv  ) );
    mbedtls_cipher_free( &cipher_ctx );

    return( ret );
}
 808def8:	b059      	add	sp, #356	; 0x164
 808defa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808defe:	bf00      	nop
 808df00:	ffffe080 	.word	0xffffe080
 808df04:	ffffe100 	.word	0xffffe100
 808df08:	ffffe11e 	.word	0xffffe11e
 808df0c:	ffffe11a 	.word	0xffffe11a

0808df10 <mbedtls_sha512_init>:
}
#endif /* PUT_UINT64_BE */

void mbedtls_sha512_init( mbedtls_sha512_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha512_context ) );
 808df10:	22d8      	movs	r2, #216	; 0xd8
 808df12:	2100      	movs	r1, #0
 808df14:	f005 be59 	b.w	8093bca <memset>

0808df18 <mbedtls_sha512_free>:
}

void mbedtls_sha512_free( mbedtls_sha512_context *ctx )
{
    if( ctx == NULL )
 808df18:	b138      	cbz	r0, 808df2a <mbedtls_sha512_free+0x12>
 808df1a:	f100 02d8 	add.w	r2, r0, #216	; 0xd8

#if !defined(MBEDTLS_SHA512_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808df1e:	2300      	movs	r3, #0
 808df20:	4290      	cmp	r0, r2
 808df22:	d002      	beq.n	808df2a <mbedtls_sha512_free+0x12>
 808df24:	7003      	strb	r3, [r0, #0]
 808df26:	3001      	adds	r0, #1
 808df28:	e7fa      	b.n	808df20 <mbedtls_sha512_free+0x8>
 808df2a:	4770      	bx	lr

0808df2c <mbedtls_sha512_clone>:
    mbedtls_zeroize( ctx, sizeof( mbedtls_sha512_context ) );
}

void mbedtls_sha512_clone( mbedtls_sha512_context *dst,
                           const mbedtls_sha512_context *src )
{
 808df2c:	b508      	push	{r3, lr}
    *dst = *src;
 808df2e:	22d8      	movs	r2, #216	; 0xd8
 808df30:	f005 fe25 	bl	8093b7e <memcpy>
 808df34:	bd08      	pop	{r3, pc}
	...

0808df38 <mbedtls_sha512_starts_ret>:
/*
 * SHA-512 context setup
 */
int mbedtls_sha512_starts_ret( mbedtls_sha512_context *ctx, int is384 )
{
    ctx->total[0] = 0;
 808df38:	2200      	movs	r2, #0
 808df3a:	2300      	movs	r3, #0
 808df3c:	e9c0 2300 	strd	r2, r3, [r0]
    ctx->total[1] = 0;
 808df40:	e9c0 2302 	strd	r2, r3, [r0, #8]

    if( is384 == 0 )
 808df44:	bb31      	cbnz	r1, 808df94 <mbedtls_sha512_starts_ret+0x5c>
    {
        /* SHA-512 */
        ctx->state[0] = UL64(0x6A09E667F3BCC908);
 808df46:	a32a      	add	r3, pc, #168	; (adr r3, 808dff0 <mbedtls_sha512_starts_ret+0xb8>)
 808df48:	e9d3 2300 	ldrd	r2, r3, [r3]
 808df4c:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0xBB67AE8584CAA73B);
 808df50:	a329      	add	r3, pc, #164	; (adr r3, 808dff8 <mbedtls_sha512_starts_ret+0xc0>)
 808df52:	e9d3 2300 	ldrd	r2, r3, [r3]
 808df56:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x3C6EF372FE94F82B);
 808df5a:	a329      	add	r3, pc, #164	; (adr r3, 808e000 <mbedtls_sha512_starts_ret+0xc8>)
 808df5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 808df60:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0xA54FF53A5F1D36F1);
 808df64:	a328      	add	r3, pc, #160	; (adr r3, 808e008 <mbedtls_sha512_starts_ret+0xd0>)
 808df66:	e9d3 2300 	ldrd	r2, r3, [r3]
 808df6a:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x510E527FADE682D1);
 808df6e:	a328      	add	r3, pc, #160	; (adr r3, 808e010 <mbedtls_sha512_starts_ret+0xd8>)
 808df70:	e9d3 2300 	ldrd	r2, r3, [r3]
 808df74:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x9B05688C2B3E6C1F);
 808df78:	a327      	add	r3, pc, #156	; (adr r3, 808e018 <mbedtls_sha512_starts_ret+0xe0>)
 808df7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808df7e:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0x1F83D9ABFB41BD6B);
 808df82:	a327      	add	r3, pc, #156	; (adr r3, 808e020 <mbedtls_sha512_starts_ret+0xe8>)
 808df84:	e9d3 2300 	ldrd	r2, r3, [r3]
 808df88:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x5BE0CD19137E2179);
 808df8c:	a326      	add	r3, pc, #152	; (adr r3, 808e028 <mbedtls_sha512_starts_ret+0xf0>)
 808df8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 808df92:	e025      	b.n	808dfe0 <mbedtls_sha512_starts_ret+0xa8>
    }
    else
    {
        /* SHA-384 */
        ctx->state[0] = UL64(0xCBBB9D5DC1059ED8);
 808df94:	a326      	add	r3, pc, #152	; (adr r3, 808e030 <mbedtls_sha512_starts_ret+0xf8>)
 808df96:	e9d3 2300 	ldrd	r2, r3, [r3]
 808df9a:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0x629A292A367CD507);
 808df9e:	a326      	add	r3, pc, #152	; (adr r3, 808e038 <mbedtls_sha512_starts_ret+0x100>)
 808dfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 808dfa4:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x9159015A3070DD17);
 808dfa8:	a325      	add	r3, pc, #148	; (adr r3, 808e040 <mbedtls_sha512_starts_ret+0x108>)
 808dfaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 808dfae:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0x152FECD8F70E5939);
 808dfb2:	a325      	add	r3, pc, #148	; (adr r3, 808e048 <mbedtls_sha512_starts_ret+0x110>)
 808dfb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 808dfb8:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x67332667FFC00B31);
 808dfbc:	a324      	add	r3, pc, #144	; (adr r3, 808e050 <mbedtls_sha512_starts_ret+0x118>)
 808dfbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 808dfc2:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x8EB44A8768581511);
 808dfc6:	a324      	add	r3, pc, #144	; (adr r3, 808e058 <mbedtls_sha512_starts_ret+0x120>)
 808dfc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 808dfcc:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
 808dfd0:	a323      	add	r3, pc, #140	; (adr r3, 808e060 <mbedtls_sha512_starts_ret+0x128>)
 808dfd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 808dfd6:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
 808dfda:	a323      	add	r3, pc, #140	; (adr r3, 808e068 <mbedtls_sha512_starts_ret+0x130>)
 808dfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 808dfe0:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
    }

    ctx->is384 = is384;
 808dfe4:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0

    return( 0 );
}
 808dfe8:	2000      	movs	r0, #0
 808dfea:	4770      	bx	lr
 808dfec:	f3af 8000 	nop.w
 808dff0:	f3bcc908 	.word	0xf3bcc908
 808dff4:	6a09e667 	.word	0x6a09e667
 808dff8:	84caa73b 	.word	0x84caa73b
 808dffc:	bb67ae85 	.word	0xbb67ae85
 808e000:	fe94f82b 	.word	0xfe94f82b
 808e004:	3c6ef372 	.word	0x3c6ef372
 808e008:	5f1d36f1 	.word	0x5f1d36f1
 808e00c:	a54ff53a 	.word	0xa54ff53a
 808e010:	ade682d1 	.word	0xade682d1
 808e014:	510e527f 	.word	0x510e527f
 808e018:	2b3e6c1f 	.word	0x2b3e6c1f
 808e01c:	9b05688c 	.word	0x9b05688c
 808e020:	fb41bd6b 	.word	0xfb41bd6b
 808e024:	1f83d9ab 	.word	0x1f83d9ab
 808e028:	137e2179 	.word	0x137e2179
 808e02c:	5be0cd19 	.word	0x5be0cd19
 808e030:	c1059ed8 	.word	0xc1059ed8
 808e034:	cbbb9d5d 	.word	0xcbbb9d5d
 808e038:	367cd507 	.word	0x367cd507
 808e03c:	629a292a 	.word	0x629a292a
 808e040:	3070dd17 	.word	0x3070dd17
 808e044:	9159015a 	.word	0x9159015a
 808e048:	f70e5939 	.word	0xf70e5939
 808e04c:	152fecd8 	.word	0x152fecd8
 808e050:	ffc00b31 	.word	0xffc00b31
 808e054:	67332667 	.word	0x67332667
 808e058:	68581511 	.word	0x68581511
 808e05c:	8eb44a87 	.word	0x8eb44a87
 808e060:	64f98fa7 	.word	0x64f98fa7
 808e064:	db0c2e0d 	.word	0xdb0c2e0d
 808e068:	befa4fa4 	.word	0xbefa4fa4
 808e06c:	47b5481d 	.word	0x47b5481d

0808e070 <mbedtls_internal_sha512_process>:
    UL64(0x5FCB6FAB3AD6FAEC),  UL64(0x6C44198C4A475817)
};

int mbedtls_internal_sha512_process( mbedtls_sha512_context *ctx,
                                     const unsigned char data[128] )
{
 808e070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808e074:	f2ad 4d7c 	subw	sp, sp, #1148	; 0x47c
 808e078:	4686      	mov	lr, r0
 808e07a:	f50d 7cf8 	add.w	ip, sp, #496	; 0x1f0
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
 808e07e:	2000      	movs	r0, #0
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 808e080:	eb01 04c0 	add.w	r4, r1, r0, lsl #3
 808e084:	f811 2030 	ldrb.w	r2, [r1, r0, lsl #3]
 808e088:	7866      	ldrb	r6, [r4, #1]
 808e08a:	f04f 0a00 	mov.w	sl, #0
 808e08e:	ea4f 6b02 	mov.w	fp, r2, lsl #24
 808e092:	0436      	lsls	r6, r6, #16
 808e094:	2300      	movs	r3, #0
 808e096:	ea43 030b 	orr.w	r3, r3, fp
 808e09a:	9609      	str	r6, [sp, #36]	; 0x24
 808e09c:	f8cd a020 	str.w	sl, [sp, #32]
 808e0a0:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
 808e0a4:	431e      	orrs	r6, r3
 808e0a6:	4633      	mov	r3, r6
 808e0a8:	79e2      	ldrb	r2, [r4, #7]
 808e0aa:	78a6      	ldrb	r6, [r4, #2]
 808e0ac:	ea42 020a 	orr.w	r2, r2, sl
 808e0b0:	4315      	orrs	r5, r2
 808e0b2:	462a      	mov	r2, r5
 808e0b4:	0236      	lsls	r6, r6, #8
 808e0b6:	960b      	str	r6, [sp, #44]	; 0x2c
 808e0b8:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 808e0bc:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 808e0c0:	431e      	orrs	r6, r3
 808e0c2:	4633      	mov	r3, r6
 808e0c4:	4315      	orrs	r5, r2
 808e0c6:	78e6      	ldrb	r6, [r4, #3]
 808e0c8:	462a      	mov	r2, r5
 808e0ca:	960d      	str	r6, [sp, #52]	; 0x34
 808e0cc:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 808e0d0:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 808e0d4:	431e      	orrs	r6, r3
 808e0d6:	4633      	mov	r3, r6
 808e0d8:	7926      	ldrb	r6, [r4, #4]
 808e0da:	4315      	orrs	r5, r2
 808e0dc:	462a      	mov	r2, r5
 808e0de:	0635      	lsls	r5, r6, #24
 808e0e0:	f8cd a014 	str.w	sl, [sp, #20]
 808e0e4:	9504      	str	r5, [sp, #16]
 808e0e6:	e9dd 5604 	ldrd	r5, r6, [sp, #16]
 808e0ea:	431e      	orrs	r6, r3
 808e0ec:	4633      	mov	r3, r6
 808e0ee:	7966      	ldrb	r6, [r4, #5]
 808e0f0:	4315      	orrs	r5, r2
 808e0f2:	462a      	mov	r2, r5
 808e0f4:	0435      	lsls	r5, r6, #16
 808e0f6:	f8cd a01c 	str.w	sl, [sp, #28]
 808e0fa:	9506      	str	r5, [sp, #24]
 808e0fc:	e9dd 5606 	ldrd	r5, r6, [sp, #24]
 808e100:	431e      	orrs	r6, r3
 808e102:	4633      	mov	r3, r6
 808e104:	79a6      	ldrb	r6, [r4, #6]
 808e106:	4315      	orrs	r5, r2
 808e108:	ea4f 2806 	mov.w	r8, r6, lsl #8
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
 808e10c:	3001      	adds	r0, #1
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 808e10e:	ea45 0208 	orr.w	r2, r5, r8
 808e112:	ea43 030a 	orr.w	r3, r3, sl
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
 808e116:	2810      	cmp	r0, #16
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 808e118:	e9ec 2302 	strd	r2, r3, [ip, #8]!
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
 808e11c:	d1b0      	bne.n	808e080 <mbedtls_internal_sha512_process+0x10>
 808e11e:	a97e      	add	r1, sp, #504	; 0x1f8
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
 808e120:	6f0a      	ldr	r2, [r1, #112]	; 0x70
 808e122:	6f4b      	ldr	r3, [r1, #116]	; 0x74
               S0(W[i - 15]) + W[i - 16];
 808e124:	0cd4      	lsrs	r4, r2, #19
 808e126:	ea44 3443 	orr.w	r4, r4, r3, lsl #13
 808e12a:	940e      	str	r4, [sp, #56]	; 0x38
 808e12c:	0cdc      	lsrs	r4, r3, #19
 808e12e:	ea44 3442 	orr.w	r4, r4, r2, lsl #13
 808e132:	940f      	str	r4, [sp, #60]	; 0x3c
 808e134:	00dc      	lsls	r4, r3, #3
 808e136:	ea44 7452 	orr.w	r4, r4, r2, lsr #29
 808e13a:	9411      	str	r4, [sp, #68]	; 0x44
 808e13c:	00d4      	lsls	r4, r2, #3
 808e13e:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
 808e142:	0992      	lsrs	r2, r2, #6
 808e144:	ea42 6283 	orr.w	r2, r2, r3, lsl #26
 808e148:	9410      	str	r4, [sp, #64]	; 0x40
 808e14a:	099b      	lsrs	r3, r3, #6
 808e14c:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 808e150:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 808e154:	9200      	str	r2, [sp, #0]
 808e156:	4066      	eors	r6, r4
 808e158:	9301      	str	r3, [sp, #4]
 808e15a:	406f      	eors	r7, r5
 808e15c:	e9dd 3400 	ldrd	r3, r4, [sp]
 808e160:	4073      	eors	r3, r6
 808e162:	461e      	mov	r6, r3
 808e164:	e9d1 2300 	ldrd	r2, r3, [r1]
 808e168:	407c      	eors	r4, r7
 808e16a:	4627      	mov	r7, r4
 808e16c:	e9d1 4512 	ldrd	r4, r5, [r1, #72]	; 0x48
 808e170:	f8d1 8008 	ldr.w	r8, [r1, #8]
 808e174:	1912      	adds	r2, r2, r4
 808e176:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 808e17a:	416b      	adcs	r3, r5
 808e17c:	18b4      	adds	r4, r6, r2
 808e17e:	eb47 0503 	adc.w	r5, r7, r3
 808e182:	ea4f 0358 	mov.w	r3, r8, lsr #1
 808e186:	ea43 73cc 	orr.w	r3, r3, ip, lsl #31
 808e18a:	9312      	str	r3, [sp, #72]	; 0x48
 808e18c:	ea4f 035c 	mov.w	r3, ip, lsr #1
 808e190:	ea43 73c8 	orr.w	r3, r3, r8, lsl #31
 808e194:	9313      	str	r3, [sp, #76]	; 0x4c
 808e196:	ea4f 2318 	mov.w	r3, r8, lsr #8
 808e19a:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 808e19e:	9314      	str	r3, [sp, #80]	; 0x50
 808e1a0:	ea4f 231c 	mov.w	r3, ip, lsr #8
 808e1a4:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 808e1a8:	9315      	str	r3, [sp, #84]	; 0x54
 808e1aa:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 808e1ae:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 808e1b2:	4072      	eors	r2, r6
 808e1b4:	ea4f 16d8 	mov.w	r6, r8, lsr #7
 808e1b8:	ea46 664c 	orr.w	r6, r6, ip, lsl #25
 808e1bc:	9602      	str	r6, [sp, #8]
 808e1be:	ea4f 16dc 	mov.w	r6, ip, lsr #7
 808e1c2:	9603      	str	r6, [sp, #12]
 808e1c4:	407b      	eors	r3, r7
 808e1c6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 808e1ca:	4056      	eors	r6, r2
 808e1cc:	1932      	adds	r2, r6, r4
 808e1ce:	ea87 0703 	eor.w	r7, r7, r3
    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
 808e1d2:	f100 0001 	add.w	r0, r0, #1
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
 808e1d6:	eb47 0305 	adc.w	r3, r7, r5
    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
 808e1da:	2850      	cmp	r0, #80	; 0x50
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
 808e1dc:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 808e1e0:	f101 0108 	add.w	r1, r1, #8
    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
 808e1e4:	d19c      	bne.n	808e120 <mbedtls_internal_sha512_process+0xb0>
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
 808e1e6:	e9de 3404 	ldrd	r3, r4, [lr, #16]
 808e1ea:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    B = ctx->state[1];
 808e1ee:	e9de 3406 	ldrd	r3, r4, [lr, #24]
 808e1f2:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
    C = ctx->state[2];
 808e1f6:	e9de 3408 	ldrd	r3, r4, [lr, #32]
 808e1fa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    D = ctx->state[3];
 808e1fe:	e9de 340a 	ldrd	r3, r4, [lr, #40]	; 0x28
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
 808e202:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
    D = ctx->state[3];
 808e206:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
    E = ctx->state[4];
 808e20a:	e9de 340c 	ldrd	r3, r4, [lr, #48]	; 0x30
    }

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
 808e20e:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
    E = ctx->state[4];
 808e212:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
    F = ctx->state[5];
 808e216:	e9de 340e 	ldrd	r3, r4, [lr, #56]	; 0x38
 808e21a:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
    G = ctx->state[6];
 808e21e:	e9de 3410 	ldrd	r3, r4, [lr, #64]	; 0x40
 808e222:	e9cd 3418 	strd	r3, r4, [sp, #96]	; 0x60
    H = ctx->state[7];
 808e226:	e9de 3412 	ldrd	r3, r4, [lr, #72]	; 0x48
 808e22a:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
 808e22e:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 808e232:	4b0d      	ldr	r3, [pc, #52]	; (808e268 <mbedtls_internal_sha512_process+0x1f8>)
 808e234:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
 808e238:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 808e23c:	e9cd 0108 	strd	r0, r1, [sp, #32]
    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
 808e240:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 808e244:	e9cd 0106 	strd	r0, r1, [sp, #24]

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
 808e248:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 808e24c:	e9cd 0104 	strd	r0, r1, [sp, #16]
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
    B = ctx->state[1];
 808e250:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 808e254:	e9cd 0102 	strd	r0, r1, [sp, #8]
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
 808e258:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 808e25c:	e9cd 0100 	strd	r0, r1, [sp]
 808e260:	aa80      	add	r2, sp, #512	; 0x200
 808e262:	f503 7c20 	add.w	ip, r3, #640	; 0x280
 808e266:	e001      	b.n	808e26c <mbedtls_internal_sha512_process+0x1fc>
 808e268:	08095e68 	.word	0x08095e68
    H = ctx->state[7];
    i = 0;

    do
    {
        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
 808e26c:	9904      	ldr	r1, [sp, #16]
 808e26e:	9805      	ldr	r0, [sp, #20]
 808e270:	0b89      	lsrs	r1, r1, #14
 808e272:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 808e276:	911e      	str	r1, [sp, #120]	; 0x78
 808e278:	0b81      	lsrs	r1, r0, #14
 808e27a:	9804      	ldr	r0, [sp, #16]
 808e27c:	e953 4502 	ldrd	r4, r5, [r3, #-8]
 808e280:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 808e284:	911f      	str	r1, [sp, #124]	; 0x7c
 808e286:	0c81      	lsrs	r1, r0, #18
 808e288:	9805      	ldr	r0, [sp, #20]
 808e28a:	e9dd 671e 	ldrd	r6, r7, [sp, #120]	; 0x78
 808e28e:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 808e292:	9120      	str	r1, [sp, #128]	; 0x80
 808e294:	0c81      	lsrs	r1, r0, #18
 808e296:	9804      	ldr	r0, [sp, #16]
 808e298:	3340      	adds	r3, #64	; 0x40
 808e29a:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 808e29e:	9121      	str	r1, [sp, #132]	; 0x84
 808e2a0:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 808e2a4:	404f      	eors	r7, r1
 808e2a6:	9905      	ldr	r1, [sp, #20]
 808e2a8:	4046      	eors	r6, r0
 808e2aa:	9804      	ldr	r0, [sp, #16]
 808e2ac:	05c9      	lsls	r1, r1, #23
 808e2ae:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 808e2b2:	9123      	str	r1, [sp, #140]	; 0x8c
 808e2b4:	05c1      	lsls	r1, r0, #23
 808e2b6:	9805      	ldr	r0, [sp, #20]
 808e2b8:	3240      	adds	r2, #64	; 0x40
 808e2ba:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 808e2be:	9122      	str	r1, [sp, #136]	; 0x88
 808e2c0:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 808e2c4:	4070      	eors	r0, r6
 808e2c6:	4079      	eors	r1, r7
 808e2c8:	4606      	mov	r6, r0
 808e2ca:	460f      	mov	r7, r1
 808e2cc:	e952 0112 	ldrd	r0, r1, [r2, #-72]	; 0x48
 808e2d0:	1900      	adds	r0, r0, r4
 808e2d2:	4169      	adcs	r1, r5
 808e2d4:	1836      	adds	r6, r6, r0
 808e2d6:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 808e2da:	414f      	adcs	r7, r1
 808e2dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 808e2e0:	4060      	eors	r0, r4
 808e2e2:	4069      	eors	r1, r5
 808e2e4:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 808e2e8:	4004      	ands	r4, r0
 808e2ea:	4620      	mov	r0, r4
 808e2ec:	400d      	ands	r5, r1
 808e2ee:	4629      	mov	r1, r5
 808e2f0:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 808e2f4:	4044      	eors	r4, r0
 808e2f6:	1936      	adds	r6, r6, r4
 808e2f8:	ea85 0501 	eor.w	r5, r5, r1
 808e2fc:	416f      	adcs	r7, r5
 808e2fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808e302:	1980      	adds	r0, r0, r6
 808e304:	4179      	adcs	r1, r7
 808e306:	4606      	mov	r6, r0
 808e308:	460f      	mov	r7, r1
 808e30a:	eb18 0800 	adds.w	r8, r8, r0
 808e30e:	eb49 0901 	adc.w	r9, r9, r1
 808e312:	9900      	ldr	r1, [sp, #0]
 808e314:	9801      	ldr	r0, [sp, #4]
 808e316:	0f09      	lsrs	r1, r1, #28
 808e318:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808e31c:	9124      	str	r1, [sp, #144]	; 0x90
 808e31e:	0f01      	lsrs	r1, r0, #28
 808e320:	9800      	ldr	r0, [sp, #0]
 808e322:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808e326:	9125      	str	r1, [sp, #148]	; 0x94
 808e328:	9901      	ldr	r1, [sp, #4]
 808e32a:	0789      	lsls	r1, r1, #30
 808e32c:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808e330:	9127      	str	r1, [sp, #156]	; 0x9c
 808e332:	0781      	lsls	r1, r0, #30
 808e334:	9801      	ldr	r0, [sp, #4]
 808e336:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808e33a:	9126      	str	r1, [sp, #152]	; 0x98
 808e33c:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 808e340:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
 808e344:	404d      	eors	r5, r1
 808e346:	9901      	ldr	r1, [sp, #4]
 808e348:	4044      	eors	r4, r0
 808e34a:	9800      	ldr	r0, [sp, #0]
 808e34c:	0649      	lsls	r1, r1, #25
 808e34e:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808e352:	9129      	str	r1, [sp, #164]	; 0xa4
 808e354:	0641      	lsls	r1, r0, #25
 808e356:	9801      	ldr	r0, [sp, #4]
 808e358:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808e35c:	9128      	str	r1, [sp, #160]	; 0xa0
 808e35e:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 808e362:	4060      	eors	r0, r4
 808e364:	4069      	eors	r1, r5
 808e366:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 808e36a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 808e36e:	e9dd 0100 	ldrd	r0, r1, [sp]
 808e372:	4320      	orrs	r0, r4
 808e374:	4329      	orrs	r1, r5
 808e376:	ea00 040a 	and.w	r4, r0, sl
 808e37a:	ea01 050b 	and.w	r5, r1, fp
 808e37e:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
 808e382:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808e386:	e9dd 4500 	ldrd	r4, r5, [sp]
 808e38a:	4004      	ands	r4, r0
 808e38c:	400d      	ands	r5, r1
 808e38e:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 808e392:	4320      	orrs	r0, r4
 808e394:	4329      	orrs	r1, r5
 808e396:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 808e39a:	1824      	adds	r4, r4, r0
 808e39c:	414d      	adcs	r5, r1
 808e39e:	19a4      	adds	r4, r4, r6
 808e3a0:	417d      	adcs	r5, r7
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
 808e3a2:	e952 0110 	ldrd	r0, r1, [r2, #-64]	; 0x40
    H = ctx->state[7];
    i = 0;

    do
    {
        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
 808e3a6:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
 808e3aa:	e953 4510 	ldrd	r4, r5, [r3, #-64]	; 0x40
 808e3ae:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 808e3b2:	1900      	adds	r0, r0, r4
 808e3b4:	4169      	adcs	r1, r5
 808e3b6:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 808e3ba:	1824      	adds	r4, r4, r0
 808e3bc:	414d      	adcs	r5, r1
 808e3be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 808e3c2:	4070      	eors	r0, r6
 808e3c4:	ea00 0008 	and.w	r0, r0, r8
 808e3c8:	4046      	eors	r6, r0
 808e3ca:	19a0      	adds	r0, r4, r6
 808e3cc:	ea4f 3498 	mov.w	r4, r8, lsr #14
 808e3d0:	ea44 4489 	orr.w	r4, r4, r9, lsl #18
 808e3d4:	942a      	str	r4, [sp, #168]	; 0xa8
 808e3d6:	ea4f 3499 	mov.w	r4, r9, lsr #14
 808e3da:	ea44 4488 	orr.w	r4, r4, r8, lsl #18
 808e3de:	942b      	str	r4, [sp, #172]	; 0xac
 808e3e0:	ea4f 4498 	mov.w	r4, r8, lsr #18
 808e3e4:	ea44 3489 	orr.w	r4, r4, r9, lsl #14
 808e3e8:	942c      	str	r4, [sp, #176]	; 0xb0
 808e3ea:	ea81 0107 	eor.w	r1, r1, r7
 808e3ee:	ea4f 4499 	mov.w	r4, r9, lsr #18
 808e3f2:	ea01 0109 	and.w	r1, r1, r9
 808e3f6:	ea44 3488 	orr.w	r4, r4, r8, lsl #14
 808e3fa:	942d      	str	r4, [sp, #180]	; 0xb4
 808e3fc:	ea87 0701 	eor.w	r7, r7, r1
 808e400:	eb45 0107 	adc.w	r1, r5, r7
 808e404:	e9dd 672c 	ldrd	r6, r7, [sp, #176]	; 0xb0
 808e408:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
 808e40c:	4074      	eors	r4, r6
 808e40e:	ea4f 56c9 	mov.w	r6, r9, lsl #23
 808e412:	ea46 2658 	orr.w	r6, r6, r8, lsr #9
 808e416:	962f      	str	r6, [sp, #188]	; 0xbc
 808e418:	ea4f 56c8 	mov.w	r6, r8, lsl #23
 808e41c:	ea46 2659 	orr.w	r6, r6, r9, lsr #9
 808e420:	962e      	str	r6, [sp, #184]	; 0xb8
 808e422:	407d      	eors	r5, r7
 808e424:	e9dd 672e 	ldrd	r6, r7, [sp, #184]	; 0xb8
 808e428:	4066      	eors	r6, r4
 808e42a:	1986      	adds	r6, r0, r6
 808e42c:	ea87 0705 	eor.w	r7, r7, r5
 808e430:	eb41 0707 	adc.w	r7, r1, r7
 808e434:	eb1a 0006 	adds.w	r0, sl, r6
 808e438:	eb4b 0107 	adc.w	r1, fp, r7
 808e43c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 808e440:	990a      	ldr	r1, [sp, #40]	; 0x28
 808e442:	980b      	ldr	r0, [sp, #44]	; 0x2c
 808e444:	0f09      	lsrs	r1, r1, #28
 808e446:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808e44a:	9130      	str	r1, [sp, #192]	; 0xc0
 808e44c:	0f01      	lsrs	r1, r0, #28
 808e44e:	980a      	ldr	r0, [sp, #40]	; 0x28
 808e450:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 808e454:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808e458:	9131      	str	r1, [sp, #196]	; 0xc4
 808e45a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 808e45c:	e9dd 4530 	ldrd	r4, r5, [sp, #192]	; 0xc0
 808e460:	0789      	lsls	r1, r1, #30
 808e462:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808e466:	9133      	str	r1, [sp, #204]	; 0xcc
 808e468:	0781      	lsls	r1, r0, #30
 808e46a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 808e46c:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808e470:	9132      	str	r1, [sp, #200]	; 0xc8
 808e472:	e9dd 0132 	ldrd	r0, r1, [sp, #200]	; 0xc8
 808e476:	404d      	eors	r5, r1
 808e478:	990b      	ldr	r1, [sp, #44]	; 0x2c
 808e47a:	4044      	eors	r4, r0
 808e47c:	980a      	ldr	r0, [sp, #40]	; 0x28
 808e47e:	0649      	lsls	r1, r1, #25
 808e480:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808e484:	9135      	str	r1, [sp, #212]	; 0xd4
 808e486:	0641      	lsls	r1, r0, #25
 808e488:	980b      	ldr	r0, [sp, #44]	; 0x2c
 808e48a:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808e48e:	9134      	str	r1, [sp, #208]	; 0xd0
 808e490:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
 808e494:	4060      	eors	r0, r4
 808e496:	4604      	mov	r4, r0
 808e498:	4069      	eors	r1, r5
 808e49a:	460d      	mov	r5, r1
 808e49c:	e9dd 0100 	ldrd	r0, r1, [sp]
 808e4a0:	ea40 000a 	orr.w	r0, r0, sl
 808e4a4:	ea41 010b 	orr.w	r1, r1, fp
 808e4a8:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 808e4ac:	ea0a 0a00 	and.w	sl, sl, r0
 808e4b0:	ea0b 0b01 	and.w	fp, fp, r1
 808e4b4:	e9cd ab1c 	strd	sl, fp, [sp, #112]	; 0x70
 808e4b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808e4bc:	e9dd ab00 	ldrd	sl, fp, [sp]
 808e4c0:	ea0a 0a00 	and.w	sl, sl, r0
 808e4c4:	ea0b 0b01 	and.w	fp, fp, r1
 808e4c8:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 808e4cc:	ea40 000a 	orr.w	r0, r0, sl
 808e4d0:	1900      	adds	r0, r0, r4
 808e4d2:	ea41 010b 	orr.w	r1, r1, fp
 808e4d6:	4169      	adcs	r1, r5
 808e4d8:	eb10 0a06 	adds.w	sl, r0, r6
 808e4dc:	eb41 0b07 	adc.w	fp, r1, r7
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
 808e4e0:	e953 450e 	ldrd	r4, r5, [r3, #-56]	; 0x38
 808e4e4:	e952 010e 	ldrd	r0, r1, [r2, #-56]	; 0x38
 808e4e8:	1900      	adds	r0, r0, r4
 808e4ea:	4169      	adcs	r1, r5
 808e4ec:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 808e4f0:	1824      	adds	r4, r4, r0
 808e4f2:	414d      	adcs	r5, r1
 808e4f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 808e4f8:	ea80 0008 	eor.w	r0, r0, r8
 808e4fc:	ea81 0109 	eor.w	r1, r1, r9
 808e500:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 808e504:	4006      	ands	r6, r0
 808e506:	4630      	mov	r0, r6
 808e508:	400f      	ands	r7, r1
 808e50a:	4639      	mov	r1, r7
 808e50c:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 808e510:	4046      	eors	r6, r0
 808e512:	19a0      	adds	r0, r4, r6
 808e514:	ea87 0701 	eor.w	r7, r7, r1
 808e518:	9c08      	ldr	r4, [sp, #32]
 808e51a:	eb45 0107 	adc.w	r1, r5, r7
 808e51e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808e520:	0ba4      	lsrs	r4, r4, #14
 808e522:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808e526:	9436      	str	r4, [sp, #216]	; 0xd8
 808e528:	0bac      	lsrs	r4, r5, #14
 808e52a:	9d08      	ldr	r5, [sp, #32]
 808e52c:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808e530:	9437      	str	r4, [sp, #220]	; 0xdc
 808e532:	0cac      	lsrs	r4, r5, #18
 808e534:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808e536:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808e53a:	9438      	str	r4, [sp, #224]	; 0xe0
 808e53c:	0cac      	lsrs	r4, r5, #18
 808e53e:	9d08      	ldr	r5, [sp, #32]
 808e540:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808e544:	9439      	str	r4, [sp, #228]	; 0xe4
 808e546:	e9dd 6738 	ldrd	r6, r7, [sp, #224]	; 0xe0
 808e54a:	e9dd 4536 	ldrd	r4, r5, [sp, #216]	; 0xd8
 808e54e:	4074      	eors	r4, r6
 808e550:	9e09      	ldr	r6, [sp, #36]	; 0x24
 808e552:	407d      	eors	r5, r7
 808e554:	9f08      	ldr	r7, [sp, #32]
 808e556:	05f6      	lsls	r6, r6, #23
 808e558:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808e55c:	963b      	str	r6, [sp, #236]	; 0xec
 808e55e:	05fe      	lsls	r6, r7, #23
 808e560:	9f09      	ldr	r7, [sp, #36]	; 0x24
 808e562:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808e566:	963a      	str	r6, [sp, #232]	; 0xe8
 808e568:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 808e56c:	4066      	eors	r6, r4
 808e56e:	1986      	adds	r6, r0, r6
 808e570:	ea87 0705 	eor.w	r7, r7, r5
 808e574:	eb41 0707 	adc.w	r7, r1, r7
 808e578:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808e57c:	1980      	adds	r0, r0, r6
 808e57e:	4179      	adcs	r1, r7
 808e580:	e9cd 0106 	strd	r0, r1, [sp, #24]
 808e584:	ea4f 711a 	mov.w	r1, sl, lsr #28
 808e588:	ea41 110b 	orr.w	r1, r1, fp, lsl #4
 808e58c:	913c      	str	r1, [sp, #240]	; 0xf0
 808e58e:	ea4f 711b 	mov.w	r1, fp, lsr #28
 808e592:	ea41 110a 	orr.w	r1, r1, sl, lsl #4
 808e596:	913d      	str	r1, [sp, #244]	; 0xf4
 808e598:	ea4f 718b 	mov.w	r1, fp, lsl #30
 808e59c:	ea41 019a 	orr.w	r1, r1, sl, lsr #2
 808e5a0:	913f      	str	r1, [sp, #252]	; 0xfc
 808e5a2:	ea4f 718a 	mov.w	r1, sl, lsl #30
 808e5a6:	ea41 019b 	orr.w	r1, r1, fp, lsr #2
 808e5aa:	913e      	str	r1, [sp, #248]	; 0xf8
 808e5ac:	e9dd 013e 	ldrd	r0, r1, [sp, #248]	; 0xf8
 808e5b0:	e9dd 453c 	ldrd	r4, r5, [sp, #240]	; 0xf0
 808e5b4:	404d      	eors	r5, r1
 808e5b6:	ea4f 614b 	mov.w	r1, fp, lsl #25
 808e5ba:	ea41 11da 	orr.w	r1, r1, sl, lsr #7
 808e5be:	9141      	str	r1, [sp, #260]	; 0x104
 808e5c0:	ea4f 614a 	mov.w	r1, sl, lsl #25
 808e5c4:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
 808e5c8:	4044      	eors	r4, r0
 808e5ca:	9140      	str	r1, [sp, #256]	; 0x100
 808e5cc:	a940      	add	r1, sp, #256	; 0x100
 808e5ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 808e5d2:	4060      	eors	r0, r4
 808e5d4:	4069      	eors	r1, r5
 808e5d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 808e5da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808e5de:	e9dd 4500 	ldrd	r4, r5, [sp]
 808e5e2:	ea40 000a 	orr.w	r0, r0, sl
 808e5e6:	ea41 010b 	orr.w	r1, r1, fp
 808e5ea:	4004      	ands	r4, r0
 808e5ec:	4620      	mov	r0, r4
 808e5ee:	400d      	ands	r5, r1
 808e5f0:	4629      	mov	r1, r5
 808e5f2:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 808e5f6:	ea04 040a 	and.w	r4, r4, sl
 808e5fa:	ea05 050b 	and.w	r5, r5, fp
 808e5fe:	4304      	orrs	r4, r0
 808e600:	4620      	mov	r0, r4
 808e602:	430d      	orrs	r5, r1
 808e604:	4629      	mov	r1, r5
 808e606:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 808e60a:	1824      	adds	r4, r4, r0
 808e60c:	414d      	adcs	r5, r1
 808e60e:	19a4      	adds	r4, r4, r6
 808e610:	417d      	adcs	r5, r7
 808e612:	e9cd 4502 	strd	r4, r5, [sp, #8]
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
 808e616:	e953 450c 	ldrd	r4, r5, [r3, #-48]	; 0x30
 808e61a:	e952 010c 	ldrd	r0, r1, [r2, #-48]	; 0x30
 808e61e:	1900      	adds	r0, r0, r4
 808e620:	4169      	adcs	r1, r5
 808e622:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 808e626:	1824      	adds	r4, r4, r0
 808e628:	414d      	adcs	r5, r1
 808e62a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808e62e:	ea80 0008 	eor.w	r0, r0, r8
 808e632:	ea81 0109 	eor.w	r1, r1, r9
 808e636:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 808e63a:	4006      	ands	r6, r0
 808e63c:	ea86 0608 	eor.w	r6, r6, r8
 808e640:	400f      	ands	r7, r1
 808e642:	19a0      	adds	r0, r4, r6
 808e644:	ea87 0709 	eor.w	r7, r7, r9
 808e648:	9c06      	ldr	r4, [sp, #24]
 808e64a:	eb45 0107 	adc.w	r1, r5, r7
 808e64e:	9d07      	ldr	r5, [sp, #28]
 808e650:	0ba4      	lsrs	r4, r4, #14
 808e652:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808e656:	9442      	str	r4, [sp, #264]	; 0x108
 808e658:	0bac      	lsrs	r4, r5, #14
 808e65a:	9d06      	ldr	r5, [sp, #24]
 808e65c:	ae44      	add	r6, sp, #272	; 0x110
 808e65e:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808e662:	9443      	str	r4, [sp, #268]	; 0x10c
 808e664:	0cac      	lsrs	r4, r5, #18
 808e666:	9d07      	ldr	r5, [sp, #28]
 808e668:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808e66c:	9444      	str	r4, [sp, #272]	; 0x110
 808e66e:	0cac      	lsrs	r4, r5, #18
 808e670:	9d06      	ldr	r5, [sp, #24]
 808e672:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808e676:	9445      	str	r4, [sp, #276]	; 0x114
 808e678:	ac42      	add	r4, sp, #264	; 0x108
 808e67a:	cec0      	ldmia	r6, {r6, r7}
 808e67c:	cc30      	ldmia	r4, {r4, r5}
 808e67e:	4074      	eors	r4, r6
 808e680:	9e07      	ldr	r6, [sp, #28]
 808e682:	407d      	eors	r5, r7
 808e684:	9f06      	ldr	r7, [sp, #24]
 808e686:	05f6      	lsls	r6, r6, #23
 808e688:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808e68c:	9647      	str	r6, [sp, #284]	; 0x11c
 808e68e:	05fe      	lsls	r6, r7, #23
 808e690:	9f07      	ldr	r7, [sp, #28]
 808e692:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808e696:	9646      	str	r6, [sp, #280]	; 0x118
 808e698:	ae46      	add	r6, sp, #280	; 0x118
 808e69a:	cec0      	ldmia	r6, {r6, r7}
 808e69c:	4066      	eors	r6, r4
 808e69e:	1986      	adds	r6, r0, r6
 808e6a0:	ea87 0705 	eor.w	r7, r7, r5
 808e6a4:	eb41 0707 	adc.w	r7, r1, r7
 808e6a8:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 808e6ac:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 808e6b0:	e9dd 6700 	ldrd	r6, r7, [sp]
 808e6b4:	1836      	adds	r6, r6, r0
 808e6b6:	414f      	adcs	r7, r1
 808e6b8:	9902      	ldr	r1, [sp, #8]
 808e6ba:	9803      	ldr	r0, [sp, #12]
 808e6bc:	0f09      	lsrs	r1, r1, #28
 808e6be:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808e6c2:	9148      	str	r1, [sp, #288]	; 0x120
 808e6c4:	0f01      	lsrs	r1, r0, #28
 808e6c6:	9802      	ldr	r0, [sp, #8]
 808e6c8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 808e6cc:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808e6d0:	9149      	str	r1, [sp, #292]	; 0x124
 808e6d2:	9903      	ldr	r1, [sp, #12]
 808e6d4:	0789      	lsls	r1, r1, #30
 808e6d6:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808e6da:	914b      	str	r1, [sp, #300]	; 0x12c
 808e6dc:	0781      	lsls	r1, r0, #30
 808e6de:	9803      	ldr	r0, [sp, #12]
 808e6e0:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 808e6e4:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808e6e8:	914a      	str	r1, [sp, #296]	; 0x128
 808e6ea:	a948      	add	r1, sp, #288	; 0x120
 808e6ec:	e9d1 4500 	ldrd	r4, r5, [r1]
 808e6f0:	a94a      	add	r1, sp, #296	; 0x128
 808e6f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 808e6f6:	404d      	eors	r5, r1
 808e6f8:	9903      	ldr	r1, [sp, #12]
 808e6fa:	4044      	eors	r4, r0
 808e6fc:	9802      	ldr	r0, [sp, #8]
 808e6fe:	0649      	lsls	r1, r1, #25
 808e700:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808e704:	914d      	str	r1, [sp, #308]	; 0x134
 808e706:	0641      	lsls	r1, r0, #25
 808e708:	9803      	ldr	r0, [sp, #12]
 808e70a:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808e70e:	914c      	str	r1, [sp, #304]	; 0x130
 808e710:	a94c      	add	r1, sp, #304	; 0x130
 808e712:	e9d1 0100 	ldrd	r0, r1, [r1]
 808e716:	4060      	eors	r0, r4
 808e718:	4069      	eors	r1, r5
 808e71a:	4604      	mov	r4, r0
 808e71c:	460d      	mov	r5, r1
 808e71e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808e722:	ea40 000a 	orr.w	r0, r0, sl
 808e726:	ea41 010b 	orr.w	r1, r1, fp
 808e72a:	4006      	ands	r6, r0
 808e72c:	4630      	mov	r0, r6
 808e72e:	400f      	ands	r7, r1
 808e730:	4639      	mov	r1, r7
 808e732:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 808e736:	ea06 060a 	and.w	r6, r6, sl
 808e73a:	ea07 070b 	and.w	r7, r7, fp
 808e73e:	4306      	orrs	r6, r0
 808e740:	1930      	adds	r0, r6, r4
 808e742:	ea47 0701 	orr.w	r7, r7, r1
 808e746:	eb47 0105 	adc.w	r1, r7, r5
 808e74a:	e9dd 451c 	ldrd	r4, r5, [sp, #112]	; 0x70
 808e74e:	1824      	adds	r4, r4, r0
 808e750:	414d      	adcs	r5, r1
 808e752:	e9cd 4500 	strd	r4, r5, [sp]
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
 808e756:	e952 010a 	ldrd	r0, r1, [r2, #-40]	; 0x28
 808e75a:	e953 450a 	ldrd	r4, r5, [r3, #-40]	; 0x28
 808e75e:	1900      	adds	r0, r0, r4
 808e760:	4169      	adcs	r1, r5
 808e762:	eb10 0008 	adds.w	r0, r0, r8
 808e766:	eb41 0109 	adc.w	r1, r1, r9
 808e76a:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 808e76e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 808e772:	ea88 0804 	eor.w	r8, r8, r4
 808e776:	ea89 0905 	eor.w	r9, r9, r5
 808e77a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 808e77e:	ea04 0408 	and.w	r4, r4, r8
 808e782:	46a0      	mov	r8, r4
 808e784:	ea05 0509 	and.w	r5, r5, r9
 808e788:	46a9      	mov	r9, r5
 808e78a:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 808e78e:	ea84 0408 	eor.w	r4, r4, r8
 808e792:	eb10 0804 	adds.w	r8, r0, r4
 808e796:	ea85 0509 	eor.w	r5, r5, r9
 808e79a:	eb41 0905 	adc.w	r9, r1, r5
 808e79e:	9904      	ldr	r1, [sp, #16]
 808e7a0:	9805      	ldr	r0, [sp, #20]
 808e7a2:	0b89      	lsrs	r1, r1, #14
 808e7a4:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 808e7a8:	914e      	str	r1, [sp, #312]	; 0x138
 808e7aa:	0b81      	lsrs	r1, r0, #14
 808e7ac:	9804      	ldr	r0, [sp, #16]
 808e7ae:	ac50      	add	r4, sp, #320	; 0x140
 808e7b0:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 808e7b4:	914f      	str	r1, [sp, #316]	; 0x13c
 808e7b6:	0c81      	lsrs	r1, r0, #18
 808e7b8:	9805      	ldr	r0, [sp, #20]
 808e7ba:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 808e7be:	9150      	str	r1, [sp, #320]	; 0x140
 808e7c0:	0c81      	lsrs	r1, r0, #18
 808e7c2:	9804      	ldr	r0, [sp, #16]
 808e7c4:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 808e7c8:	9151      	str	r1, [sp, #324]	; 0x144
 808e7ca:	a94e      	add	r1, sp, #312	; 0x138
 808e7cc:	cc30      	ldmia	r4, {r4, r5}
 808e7ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 808e7d2:	4060      	eors	r0, r4
 808e7d4:	9c05      	ldr	r4, [sp, #20]
 808e7d6:	4069      	eors	r1, r5
 808e7d8:	9d04      	ldr	r5, [sp, #16]
 808e7da:	05e4      	lsls	r4, r4, #23
 808e7dc:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 808e7e0:	9453      	str	r4, [sp, #332]	; 0x14c
 808e7e2:	05ec      	lsls	r4, r5, #23
 808e7e4:	9d05      	ldr	r5, [sp, #20]
 808e7e6:	e9dd 6700 	ldrd	r6, r7, [sp]
 808e7ea:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 808e7ee:	9452      	str	r4, [sp, #328]	; 0x148
 808e7f0:	ac52      	add	r4, sp, #328	; 0x148
 808e7f2:	cc30      	ldmia	r4, {r4, r5}
 808e7f4:	4044      	eors	r4, r0
 808e7f6:	eb18 0804 	adds.w	r8, r8, r4
 808e7fa:	ea85 0501 	eor.w	r5, r5, r1
 808e7fe:	eb49 0905 	adc.w	r9, r9, r5
 808e802:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808e806:	eb10 0008 	adds.w	r0, r0, r8
 808e80a:	eb41 0109 	adc.w	r1, r1, r9
 808e80e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 808e812:	9900      	ldr	r1, [sp, #0]
 808e814:	9801      	ldr	r0, [sp, #4]
 808e816:	0f09      	lsrs	r1, r1, #28
 808e818:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808e81c:	9154      	str	r1, [sp, #336]	; 0x150
 808e81e:	0f01      	lsrs	r1, r0, #28
 808e820:	9800      	ldr	r0, [sp, #0]
 808e822:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808e826:	9155      	str	r1, [sp, #340]	; 0x154
 808e828:	9901      	ldr	r1, [sp, #4]
 808e82a:	0789      	lsls	r1, r1, #30
 808e82c:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808e830:	9157      	str	r1, [sp, #348]	; 0x15c
 808e832:	0781      	lsls	r1, r0, #30
 808e834:	9801      	ldr	r0, [sp, #4]
 808e836:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808e83a:	9156      	str	r1, [sp, #344]	; 0x158
 808e83c:	a954      	add	r1, sp, #336	; 0x150
 808e83e:	e9d1 4500 	ldrd	r4, r5, [r1]
 808e842:	a956      	add	r1, sp, #344	; 0x158
 808e844:	e9d1 0100 	ldrd	r0, r1, [r1]
 808e848:	404d      	eors	r5, r1
 808e84a:	9901      	ldr	r1, [sp, #4]
 808e84c:	4044      	eors	r4, r0
 808e84e:	9800      	ldr	r0, [sp, #0]
 808e850:	0649      	lsls	r1, r1, #25
 808e852:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808e856:	9159      	str	r1, [sp, #356]	; 0x164
 808e858:	0641      	lsls	r1, r0, #25
 808e85a:	9801      	ldr	r0, [sp, #4]
 808e85c:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808e860:	9158      	str	r1, [sp, #352]	; 0x160
 808e862:	a958      	add	r1, sp, #352	; 0x160
 808e864:	e9d1 0100 	ldrd	r0, r1, [r1]
 808e868:	4060      	eors	r0, r4
 808e86a:	4604      	mov	r4, r0
 808e86c:	4069      	eors	r1, r5
 808e86e:	460d      	mov	r5, r1
 808e870:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808e874:	4330      	orrs	r0, r6
 808e876:	4339      	orrs	r1, r7
 808e878:	ea00 060a 	and.w	r6, r0, sl
 808e87c:	ea01 070b 	and.w	r7, r1, fp
 808e880:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 808e884:	e9dd 0100 	ldrd	r0, r1, [sp]
 808e888:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 808e88c:	4006      	ands	r6, r0
 808e88e:	400f      	ands	r7, r1
 808e890:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 808e894:	4330      	orrs	r0, r6
 808e896:	1900      	adds	r0, r0, r4
 808e898:	ea41 0107 	orr.w	r1, r1, r7
 808e89c:	4169      	adcs	r1, r5
 808e89e:	eb18 0800 	adds.w	r8, r8, r0
 808e8a2:	eb49 0901 	adc.w	r9, r9, r1
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
 808e8a6:	e953 4508 	ldrd	r4, r5, [r3, #-32]
 808e8aa:	e952 0108 	ldrd	r0, r1, [r2, #-32]
 808e8ae:	1900      	adds	r0, r0, r4
 808e8b0:	4169      	adcs	r1, r5
 808e8b2:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 808e8b6:	1824      	adds	r4, r4, r0
 808e8b8:	414d      	adcs	r5, r1
 808e8ba:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 808e8be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 808e8c2:	4046      	eors	r6, r0
 808e8c4:	4630      	mov	r0, r6
 808e8c6:	404f      	eors	r7, r1
 808e8c8:	4639      	mov	r1, r7
 808e8ca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 808e8ce:	4006      	ands	r6, r0
 808e8d0:	4630      	mov	r0, r6
 808e8d2:	400f      	ands	r7, r1
 808e8d4:	4639      	mov	r1, r7
 808e8d6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 808e8da:	4046      	eors	r6, r0
 808e8dc:	1930      	adds	r0, r6, r4
 808e8de:	ea87 0701 	eor.w	r7, r7, r1
 808e8e2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 808e8e4:	eb47 0105 	adc.w	r1, r7, r5
 808e8e8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 808e8ea:	0ba4      	lsrs	r4, r4, #14
 808e8ec:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808e8f0:	945a      	str	r4, [sp, #360]	; 0x168
 808e8f2:	0bac      	lsrs	r4, r5, #14
 808e8f4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808e8f6:	ae5c      	add	r6, sp, #368	; 0x170
 808e8f8:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808e8fc:	945b      	str	r4, [sp, #364]	; 0x16c
 808e8fe:	0cac      	lsrs	r4, r5, #18
 808e900:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 808e902:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808e906:	945c      	str	r4, [sp, #368]	; 0x170
 808e908:	0cac      	lsrs	r4, r5, #18
 808e90a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808e90c:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808e910:	945d      	str	r4, [sp, #372]	; 0x174
 808e912:	ac5a      	add	r4, sp, #360	; 0x168
 808e914:	cec0      	ldmia	r6, {r6, r7}
 808e916:	cc30      	ldmia	r4, {r4, r5}
 808e918:	4074      	eors	r4, r6
 808e91a:	4626      	mov	r6, r4
 808e91c:	407d      	eors	r5, r7
 808e91e:	462f      	mov	r7, r5
 808e920:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 808e922:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808e924:	05e4      	lsls	r4, r4, #23
 808e926:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 808e92a:	945f      	str	r4, [sp, #380]	; 0x17c
 808e92c:	05ec      	lsls	r4, r5, #23
 808e92e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 808e930:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 808e934:	945e      	str	r4, [sp, #376]	; 0x178
 808e936:	ac5e      	add	r4, sp, #376	; 0x178
 808e938:	cc30      	ldmia	r4, {r4, r5}
 808e93a:	4074      	eors	r4, r6
 808e93c:	1906      	adds	r6, r0, r4
 808e93e:	ea85 0507 	eor.w	r5, r5, r7
 808e942:	eb41 0705 	adc.w	r7, r1, r5
 808e946:	eb16 000a 	adds.w	r0, r6, sl
 808e94a:	eb47 010b 	adc.w	r1, r7, fp
 808e94e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 808e952:	ea4f 7118 	mov.w	r1, r8, lsr #28
 808e956:	ea41 1109 	orr.w	r1, r1, r9, lsl #4
 808e95a:	9160      	str	r1, [sp, #384]	; 0x180
 808e95c:	ea4f 7119 	mov.w	r1, r9, lsr #28
 808e960:	ea41 1108 	orr.w	r1, r1, r8, lsl #4
 808e964:	9161      	str	r1, [sp, #388]	; 0x184
 808e966:	ea4f 7189 	mov.w	r1, r9, lsl #30
 808e96a:	ea41 0198 	orr.w	r1, r1, r8, lsr #2
 808e96e:	9163      	str	r1, [sp, #396]	; 0x18c
 808e970:	ea4f 7188 	mov.w	r1, r8, lsl #30
 808e974:	ea41 0199 	orr.w	r1, r1, r9, lsr #2
 808e978:	9162      	str	r1, [sp, #392]	; 0x188
 808e97a:	a960      	add	r1, sp, #384	; 0x180
 808e97c:	e9d1 4500 	ldrd	r4, r5, [r1]
 808e980:	a962      	add	r1, sp, #392	; 0x188
 808e982:	e9d1 0100 	ldrd	r0, r1, [r1]
 808e986:	404d      	eors	r5, r1
 808e988:	ea4f 6149 	mov.w	r1, r9, lsl #25
 808e98c:	ea41 11d8 	orr.w	r1, r1, r8, lsr #7
 808e990:	9165      	str	r1, [sp, #404]	; 0x194
 808e992:	ea4f 6148 	mov.w	r1, r8, lsl #25
 808e996:	ea41 11d9 	orr.w	r1, r1, r9, lsr #7
 808e99a:	4044      	eors	r4, r0
 808e99c:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 808e9a0:	9164      	str	r1, [sp, #400]	; 0x190
 808e9a2:	a964      	add	r1, sp, #400	; 0x190
 808e9a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 808e9a8:	4060      	eors	r0, r4
 808e9aa:	4604      	mov	r4, r0
 808e9ac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 808e9b0:	e9dd ab00 	ldrd	sl, fp, [sp]
 808e9b4:	4069      	eors	r1, r5
 808e9b6:	460d      	mov	r5, r1
 808e9b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 808e9bc:	ea40 0008 	orr.w	r0, r0, r8
 808e9c0:	ea41 0109 	orr.w	r1, r1, r9
 808e9c4:	4006      	ands	r6, r0
 808e9c6:	ea0a 0a08 	and.w	sl, sl, r8
 808e9ca:	ea46 000a 	orr.w	r0, r6, sl
 808e9ce:	400f      	ands	r7, r1
 808e9d0:	ea0b 0b09 	and.w	fp, fp, r9
 808e9d4:	1900      	adds	r0, r0, r4
 808e9d6:	ea47 010b 	orr.w	r1, r7, fp
 808e9da:	4169      	adcs	r1, r5
 808e9dc:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	; 0x70
 808e9e0:	eb1a 0a00 	adds.w	sl, sl, r0
 808e9e4:	eb4b 0b01 	adc.w	fp, fp, r1
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
 808e9e8:	e953 4506 	ldrd	r4, r5, [r3, #-24]
 808e9ec:	e952 0106 	ldrd	r0, r1, [r2, #-24]
 808e9f0:	1900      	adds	r0, r0, r4
 808e9f2:	4169      	adcs	r1, r5
 808e9f4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 808e9f8:	1824      	adds	r4, r4, r0
 808e9fa:	414d      	adcs	r5, r1
 808e9fc:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 808ea00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808ea04:	4046      	eors	r6, r0
 808ea06:	4630      	mov	r0, r6
 808ea08:	404f      	eors	r7, r1
 808ea0a:	4639      	mov	r1, r7
 808ea0c:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 808ea10:	4006      	ands	r6, r0
 808ea12:	4630      	mov	r0, r6
 808ea14:	400f      	ands	r7, r1
 808ea16:	4639      	mov	r1, r7
 808ea18:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 808ea1c:	4046      	eors	r6, r0
 808ea1e:	1930      	adds	r0, r6, r4
 808ea20:	ea87 0701 	eor.w	r7, r7, r1
 808ea24:	9c08      	ldr	r4, [sp, #32]
 808ea26:	eb47 0105 	adc.w	r1, r7, r5
 808ea2a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808ea2c:	0ba4      	lsrs	r4, r4, #14
 808ea2e:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808ea32:	9466      	str	r4, [sp, #408]	; 0x198
 808ea34:	0bac      	lsrs	r4, r5, #14
 808ea36:	9d08      	ldr	r5, [sp, #32]
 808ea38:	ae68      	add	r6, sp, #416	; 0x1a0
 808ea3a:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808ea3e:	9467      	str	r4, [sp, #412]	; 0x19c
 808ea40:	0cac      	lsrs	r4, r5, #18
 808ea42:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808ea44:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808ea48:	9468      	str	r4, [sp, #416]	; 0x1a0
 808ea4a:	0cac      	lsrs	r4, r5, #18
 808ea4c:	9d08      	ldr	r5, [sp, #32]
 808ea4e:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808ea52:	9469      	str	r4, [sp, #420]	; 0x1a4
 808ea54:	ac66      	add	r4, sp, #408	; 0x198
 808ea56:	cec0      	ldmia	r6, {r6, r7}
 808ea58:	cc30      	ldmia	r4, {r4, r5}
 808ea5a:	4074      	eors	r4, r6
 808ea5c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 808ea5e:	407d      	eors	r5, r7
 808ea60:	9f08      	ldr	r7, [sp, #32]
 808ea62:	05f6      	lsls	r6, r6, #23
 808ea64:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808ea68:	966b      	str	r6, [sp, #428]	; 0x1ac
 808ea6a:	05fe      	lsls	r6, r7, #23
 808ea6c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 808ea6e:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808ea72:	966a      	str	r6, [sp, #424]	; 0x1a8
 808ea74:	ae6a      	add	r6, sp, #424	; 0x1a8
 808ea76:	cec0      	ldmia	r6, {r6, r7}
 808ea78:	4066      	eors	r6, r4
 808ea7a:	1986      	adds	r6, r0, r6
 808ea7c:	ea87 0705 	eor.w	r7, r7, r5
 808ea80:	eb41 0707 	adc.w	r7, r1, r7
 808ea84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808ea88:	1980      	adds	r0, r0, r6
 808ea8a:	4179      	adcs	r1, r7
 808ea8c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 808ea90:	ea4f 711a 	mov.w	r1, sl, lsr #28
 808ea94:	ea41 110b 	orr.w	r1, r1, fp, lsl #4
 808ea98:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 808ea9c:	916c      	str	r1, [sp, #432]	; 0x1b0
 808ea9e:	ea4f 711b 	mov.w	r1, fp, lsr #28
 808eaa2:	ea41 110a 	orr.w	r1, r1, sl, lsl #4
 808eaa6:	916d      	str	r1, [sp, #436]	; 0x1b4
 808eaa8:	ea4f 718b 	mov.w	r1, fp, lsl #30
 808eaac:	ea41 019a 	orr.w	r1, r1, sl, lsr #2
 808eab0:	916f      	str	r1, [sp, #444]	; 0x1bc
 808eab2:	ea4f 718a 	mov.w	r1, sl, lsl #30
 808eab6:	ea41 019b 	orr.w	r1, r1, fp, lsr #2
 808eaba:	916e      	str	r1, [sp, #440]	; 0x1b8
 808eabc:	a96c      	add	r1, sp, #432	; 0x1b0
 808eabe:	e9d1 4500 	ldrd	r4, r5, [r1]
 808eac2:	a96e      	add	r1, sp, #440	; 0x1b8
 808eac4:	e9d1 0100 	ldrd	r0, r1, [r1]
 808eac8:	404d      	eors	r5, r1
 808eaca:	ea4f 614b 	mov.w	r1, fp, lsl #25
 808eace:	ea41 11da 	orr.w	r1, r1, sl, lsr #7
 808ead2:	9171      	str	r1, [sp, #452]	; 0x1c4
 808ead4:	ea4f 614a 	mov.w	r1, sl, lsl #25
 808ead8:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
 808eadc:	4044      	eors	r4, r0
 808eade:	9170      	str	r1, [sp, #448]	; 0x1c0
 808eae0:	a970      	add	r1, sp, #448	; 0x1c0
 808eae2:	e9d1 0100 	ldrd	r0, r1, [r1]
 808eae6:	4060      	eors	r0, r4
 808eae8:	4604      	mov	r4, r0
 808eaea:	e9dd 6700 	ldrd	r6, r7, [sp]
 808eaee:	4069      	eors	r1, r5
 808eaf0:	ea48 000a 	orr.w	r0, r8, sl
 808eaf4:	460d      	mov	r5, r1
 808eaf6:	4006      	ands	r6, r0
 808eaf8:	ea49 010b 	orr.w	r1, r9, fp
 808eafc:	4630      	mov	r0, r6
 808eafe:	400f      	ands	r7, r1
 808eb00:	4639      	mov	r1, r7
 808eb02:	ea08 060a 	and.w	r6, r8, sl
 808eb06:	4306      	orrs	r6, r0
 808eb08:	ea09 070b 	and.w	r7, r9, fp
 808eb0c:	1930      	adds	r0, r6, r4
 808eb0e:	ea47 0701 	orr.w	r7, r7, r1
 808eb12:	eb47 0105 	adc.w	r1, r7, r5
 808eb16:	e9dd 451c 	ldrd	r4, r5, [sp, #112]	; 0x70
 808eb1a:	1824      	adds	r4, r4, r0
 808eb1c:	414d      	adcs	r5, r1
 808eb1e:	e9cd 4502 	strd	r4, r5, [sp, #8]
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 808eb22:	e952 0104 	ldrd	r0, r1, [r2, #-16]
 808eb26:	e953 4504 	ldrd	r4, r5, [r3, #-16]
 808eb2a:	1900      	adds	r0, r0, r4
 808eb2c:	4169      	adcs	r1, r5
 808eb2e:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 808eb32:	1824      	adds	r4, r4, r0
 808eb34:	414d      	adcs	r5, r1
 808eb36:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 808eb3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808eb3e:	4070      	eors	r0, r6
 808eb40:	4079      	eors	r1, r7
 808eb42:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 808eb46:	4006      	ands	r6, r0
 808eb48:	4630      	mov	r0, r6
 808eb4a:	400f      	ands	r7, r1
 808eb4c:	4639      	mov	r1, r7
 808eb4e:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 808eb52:	4046      	eors	r6, r0
 808eb54:	19a0      	adds	r0, r4, r6
 808eb56:	ea87 0701 	eor.w	r7, r7, r1
 808eb5a:	9c06      	ldr	r4, [sp, #24]
 808eb5c:	eb45 0107 	adc.w	r1, r5, r7
 808eb60:	9d07      	ldr	r5, [sp, #28]
 808eb62:	0ba4      	lsrs	r4, r4, #14
 808eb64:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808eb68:	9472      	str	r4, [sp, #456]	; 0x1c8
 808eb6a:	0bac      	lsrs	r4, r5, #14
 808eb6c:	9d06      	ldr	r5, [sp, #24]
 808eb6e:	ae74      	add	r6, sp, #464	; 0x1d0
 808eb70:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808eb74:	9473      	str	r4, [sp, #460]	; 0x1cc
 808eb76:	0cac      	lsrs	r4, r5, #18
 808eb78:	9d07      	ldr	r5, [sp, #28]
 808eb7a:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808eb7e:	9474      	str	r4, [sp, #464]	; 0x1d0
 808eb80:	0cac      	lsrs	r4, r5, #18
 808eb82:	9d06      	ldr	r5, [sp, #24]
 808eb84:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808eb88:	9475      	str	r4, [sp, #468]	; 0x1d4
 808eb8a:	ac72      	add	r4, sp, #456	; 0x1c8
 808eb8c:	cec0      	ldmia	r6, {r6, r7}
 808eb8e:	cc30      	ldmia	r4, {r4, r5}
 808eb90:	4074      	eors	r4, r6
 808eb92:	9e07      	ldr	r6, [sp, #28]
 808eb94:	407d      	eors	r5, r7
 808eb96:	9f06      	ldr	r7, [sp, #24]
 808eb98:	05f6      	lsls	r6, r6, #23
 808eb9a:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808eb9e:	9677      	str	r6, [sp, #476]	; 0x1dc
 808eba0:	05fe      	lsls	r6, r7, #23
 808eba2:	9f07      	ldr	r7, [sp, #28]
 808eba4:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808eba8:	9676      	str	r6, [sp, #472]	; 0x1d8
 808ebaa:	ae76      	add	r6, sp, #472	; 0x1d8
 808ebac:	cec0      	ldmia	r6, {r6, r7}
 808ebae:	4066      	eors	r6, r4
 808ebb0:	1986      	adds	r6, r0, r6
 808ebb2:	ea87 0705 	eor.w	r7, r7, r5
 808ebb6:	eb41 0707 	adc.w	r7, r1, r7
 808ebba:	e9dd 0100 	ldrd	r0, r1, [sp]
 808ebbe:	1980      	adds	r0, r0, r6
 808ebc0:	4179      	adcs	r1, r7
 808ebc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 808ebc6:	9902      	ldr	r1, [sp, #8]
 808ebc8:	9803      	ldr	r0, [sp, #12]
 808ebca:	0f09      	lsrs	r1, r1, #28
 808ebcc:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808ebd0:	9178      	str	r1, [sp, #480]	; 0x1e0
 808ebd2:	0f01      	lsrs	r1, r0, #28
 808ebd4:	9802      	ldr	r0, [sp, #8]
 808ebd6:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808ebda:	9179      	str	r1, [sp, #484]	; 0x1e4
 808ebdc:	9903      	ldr	r1, [sp, #12]
 808ebde:	0789      	lsls	r1, r1, #30
 808ebe0:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808ebe4:	917b      	str	r1, [sp, #492]	; 0x1ec
 808ebe6:	0781      	lsls	r1, r0, #30
 808ebe8:	9803      	ldr	r0, [sp, #12]
 808ebea:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808ebee:	917a      	str	r1, [sp, #488]	; 0x1e8
 808ebf0:	a978      	add	r1, sp, #480	; 0x1e0
 808ebf2:	e9d1 4500 	ldrd	r4, r5, [r1]
 808ebf6:	a97a      	add	r1, sp, #488	; 0x1e8
 808ebf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 808ebfc:	404d      	eors	r5, r1
 808ebfe:	9903      	ldr	r1, [sp, #12]
 808ec00:	4044      	eors	r4, r0
 808ec02:	9802      	ldr	r0, [sp, #8]
 808ec04:	0649      	lsls	r1, r1, #25
 808ec06:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808ec0a:	917d      	str	r1, [sp, #500]	; 0x1f4
 808ec0c:	0641      	lsls	r1, r0, #25
 808ec0e:	9803      	ldr	r0, [sp, #12]
 808ec10:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808ec14:	917c      	str	r1, [sp, #496]	; 0x1f0
 808ec16:	a97c      	add	r1, sp, #496	; 0x1f0
 808ec18:	e9d1 0100 	ldrd	r0, r1, [r1]
 808ec1c:	4060      	eors	r0, r4
 808ec1e:	4069      	eors	r1, r5
 808ec20:	e9cd 0100 	strd	r0, r1, [sp]
 808ec24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808ec28:	ea40 000a 	orr.w	r0, r0, sl
 808ec2c:	ea41 010b 	orr.w	r1, r1, fp
 808ec30:	ea00 0408 	and.w	r4, r0, r8
 808ec34:	ea01 0509 	and.w	r5, r1, r9
 808ec38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808ec3c:	ea00 000a 	and.w	r0, r0, sl
 808ec40:	ea01 010b 	and.w	r1, r1, fp
 808ec44:	4304      	orrs	r4, r0
 808ec46:	430d      	orrs	r5, r1
 808ec48:	4620      	mov	r0, r4
 808ec4a:	4629      	mov	r1, r5
 808ec4c:	e9dd 4500 	ldrd	r4, r5, [sp]
 808ec50:	1824      	adds	r4, r4, r0
 808ec52:	414d      	adcs	r5, r1
 808ec54:	19a4      	adds	r4, r4, r6
 808ec56:	417d      	adcs	r5, r7
    }
    while( i < 80 );
 808ec58:	459c      	cmp	ip, r3
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 808ec5a:	e9cd 4500 	strd	r4, r5, [sp]
    }
    while( i < 80 );
 808ec5e:	f47f ab05 	bne.w	808e26c <mbedtls_internal_sha512_process+0x1fc>

    ctx->state[0] += A;
 808ec62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 808ec66:	4623      	mov	r3, r4
 808ec68:	18c0      	adds	r0, r0, r3
 808ec6a:	4169      	adcs	r1, r5
    ctx->state[1] += B;
 808ec6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808ec70:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 808ec74:	18a4      	adds	r4, r4, r2
 808ec76:	415d      	adcs	r5, r3
 808ec78:	e9ce 4506 	strd	r4, r5, [lr, #24]
    ctx->state[2] += C;
 808ec7c:	e9dd 3410 	ldrd	r3, r4, [sp, #64]	; 0x40
 808ec80:	eb13 030a 	adds.w	r3, r3, sl
 808ec84:	eb44 040b 	adc.w	r4, r4, fp
 808ec88:	469a      	mov	sl, r3
    ctx->state[3] += D;
    ctx->state[4] += E;
 808ec8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    }
    while( i < 80 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
 808ec8e:	46a3      	mov	fp, r4
    ctx->state[3] += D;
    ctx->state[4] += E;
 808ec90:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
    }
    while( i < 80 );

    ctx->state[0] += A;
 808ec94:	e9ce 0104 	strd	r0, r1, [lr, #16]
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
 808ec98:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 808ec9c:	eb10 0008 	adds.w	r0, r0, r8
 808eca0:	eb41 0109 	adc.w	r1, r1, r9
    ctx->state[4] += E;
 808eca4:	18a4      	adds	r4, r4, r2
 808eca6:	415d      	adcs	r5, r3
 808eca8:	e9ce 450c 	strd	r4, r5, [lr, #48]	; 0x30
    ctx->state[5] += F;
 808ecac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 808ecb0:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
 808ecb4:	18a4      	adds	r4, r4, r2
 808ecb6:	415d      	adcs	r5, r3
 808ecb8:	e9ce 450e 	strd	r4, r5, [lr, #56]	; 0x38
    ctx->state[6] += G;
 808ecbc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 808ecc0:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
 808ecc4:	18a4      	adds	r4, r4, r2
 808ecc6:	415d      	adcs	r5, r3
    while( i < 80 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
 808ecc8:	e9ce 010a 	strd	r0, r1, [lr, #40]	; 0x28
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
    ctx->state[7] += H;
 808eccc:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
 808ecd0:	e9ce 4510 	strd	r4, r5, [lr, #64]	; 0x40
    ctx->state[7] += H;
 808ecd4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 808ecd8:	18c0      	adds	r0, r0, r3
 808ecda:	4161      	adcs	r1, r4
 808ecdc:	e9ce 0112 	strd	r0, r1, [lr, #72]	; 0x48

    return( 0 );
}
 808ece0:	2000      	movs	r0, #0
    }
    while( i < 80 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
 808ece2:	e9ce ab08 	strd	sl, fp, [lr, #32]
    ctx->state[5] += F;
    ctx->state[6] += G;
    ctx->state[7] += H;

    return( 0 );
}
 808ece6:	f20d 4d7c 	addw	sp, sp, #1148	; 0x47c
 808ecea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808ecee:	bf00      	nop

0808ecf0 <mbedtls_sha512_update_ret>:
 * SHA-512 process buffer
 */
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 808ecf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808ecf4:	4604      	mov	r4, r0
 808ecf6:	460e      	mov	r6, r1
    int ret;
    size_t fill;
    unsigned int left;

    if( ilen == 0 )
 808ecf8:	4615      	mov	r5, r2
 808ecfa:	2a00      	cmp	r2, #0
 808ecfc:	d03d      	beq.n	808ed7a <mbedtls_sha512_update_ret+0x8a>
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
 808ecfe:	e9d0 2300 	ldrd	r2, r3, [r0]
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
 808ed02:	f04f 0900 	mov.w	r9, #0
    unsigned int left;

    if( ilen == 0 )
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
 808ed06:	f002 007f 	and.w	r0, r2, #127	; 0x7f
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
 808ed0a:	1952      	adds	r2, r2, r5
 808ed0c:	eb43 0309 	adc.w	r3, r3, r9

    if( ctx->total[0] < (uint64_t) ilen )
 808ed10:	454b      	cmp	r3, r9
 808ed12:	bf08      	it	eq
 808ed14:	42aa      	cmpeq	r2, r5
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
 808ed16:	e9c4 2300 	strd	r2, r3, [r4]

    if( ctx->total[0] < (uint64_t) ilen )
 808ed1a:	d206      	bcs.n	808ed2a <mbedtls_sha512_update_ret+0x3a>
        ctx->total[1]++;
 808ed1c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 808ed20:	3201      	adds	r2, #1
 808ed22:	f143 0300 	adc.w	r3, r3, #0
 808ed26:	e9c4 2302 	strd	r2, r3, [r4, #8]

    if( left && ilen >= fill )
 808ed2a:	b188      	cbz	r0, 808ed50 <mbedtls_sha512_update_ret+0x60>

    if( ilen == 0 )
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
    fill = 128 - left;
 808ed2c:	f1c0 0780 	rsb	r7, r0, #128	; 0x80
    ctx->total[0] += (uint64_t) ilen;

    if( ctx->total[0] < (uint64_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
 808ed30:	42bd      	cmp	r5, r7
 808ed32:	d31c      	bcc.n	808ed6e <mbedtls_sha512_update_ret+0x7e>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 808ed34:	f104 0850 	add.w	r8, r4, #80	; 0x50
 808ed38:	4631      	mov	r1, r6
 808ed3a:	463a      	mov	r2, r7
 808ed3c:	4440      	add	r0, r8
 808ed3e:	f004 ff1e 	bl	8093b7e <memcpy>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 808ed42:	4641      	mov	r1, r8
 808ed44:	4620      	mov	r0, r4
 808ed46:	f7ff f993 	bl	808e070 <mbedtls_internal_sha512_process>
 808ed4a:	b9b8      	cbnz	r0, 808ed7c <mbedtls_sha512_update_ret+0x8c>
            return( ret );

        input += fill;
 808ed4c:	443e      	add	r6, r7
        ilen  -= fill;
 808ed4e:	1bed      	subs	r5, r5, r7
 * SHA-512 process buffer
 */
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 808ed50:	462f      	mov	r7, r5
 808ed52:	1be9      	subs	r1, r5, r7
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 128 )
 808ed54:	2f7f      	cmp	r7, #127	; 0x7f
 808ed56:	4431      	add	r1, r6
 808ed58:	d905      	bls.n	808ed66 <mbedtls_sha512_update_ret+0x76>
    {
        if( ( ret = mbedtls_internal_sha512_process( ctx, input ) ) != 0 )
 808ed5a:	4620      	mov	r0, r4
 808ed5c:	f7ff f988 	bl	808e070 <mbedtls_internal_sha512_process>
 808ed60:	b960      	cbnz	r0, 808ed7c <mbedtls_sha512_update_ret+0x8c>
            return( ret );

        input += 128;
        ilen  -= 128;
 808ed62:	3f80      	subs	r7, #128	; 0x80
 808ed64:	e7f5      	b.n	808ed52 <mbedtls_sha512_update_ret+0x62>
    }

    if( ilen > 0 )
 808ed66:	b147      	cbz	r7, 808ed7a <mbedtls_sha512_update_ret+0x8a>
 808ed68:	463d      	mov	r5, r7
 808ed6a:	460e      	mov	r6, r1
 808ed6c:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 808ed6e:	3450      	adds	r4, #80	; 0x50
 808ed70:	462a      	mov	r2, r5
 808ed72:	4631      	mov	r1, r6
 808ed74:	4420      	add	r0, r4
 808ed76:	f004 ff02 	bl	8093b7e <memcpy>

    return( 0 );
 808ed7a:	2000      	movs	r0, #0
}
 808ed7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0808ed80 <mbedtls_sha512_finish_ret>:
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
 808ed80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808ed82:	4604      	mov	r4, r0
    uint64_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;
 808ed84:	6803      	ldr	r3, [r0, #0]

    ctx->buffer[used++] = 0x80;
 808ed86:	2280      	movs	r2, #128	; 0x80
    uint64_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;
 808ed88:	f003 037f 	and.w	r3, r3, #127	; 0x7f

    ctx->buffer[used++] = 0x80;
 808ed8c:	1c58      	adds	r0, r3, #1

    if( used <= 112 )
 808ed8e:	2870      	cmp	r0, #112	; 0x70
    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;

    ctx->buffer[used++] = 0x80;
 808ed90:	4423      	add	r3, r4
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
 808ed92:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;

    ctx->buffer[used++] = 0x80;
 808ed94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 808ed98:	f104 0650 	add.w	r6, r4, #80	; 0x50

    if( used <= 112 )
 808ed9c:	d804      	bhi.n	808eda8 <mbedtls_sha512_finish_ret+0x28>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 112 - used );
 808ed9e:	f1c0 0270 	rsb	r2, r0, #112	; 0x70
 808eda2:	2100      	movs	r1, #0
 808eda4:	4430      	add	r0, r6
 808eda6:	e00f      	b.n	808edc8 <mbedtls_sha512_finish_ret+0x48>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 128 - used );
 808eda8:	f1c0 0280 	rsb	r2, r0, #128	; 0x80
 808edac:	2100      	movs	r1, #0
 808edae:	4430      	add	r0, r6
 808edb0:	f004 ff0b 	bl	8093bca <memset>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 808edb4:	4631      	mov	r1, r6
 808edb6:	4620      	mov	r0, r4
 808edb8:	f7ff f95a 	bl	808e070 <mbedtls_internal_sha512_process>
 808edbc:	2800      	cmp	r0, #0
 808edbe:	f040 8111 	bne.w	808efe4 <mbedtls_sha512_finish_ret+0x264>
            return( ret );

        memset( ctx->buffer, 0, 112 );
 808edc2:	4601      	mov	r1, r0
 808edc4:	4630      	mov	r0, r6
 808edc6:	2270      	movs	r2, #112	; 0x70
 808edc8:	f004 feff 	bl	8093bca <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
 808edcc:	e894 4080 	ldmia.w	r4, {r7, lr}
         | ( ctx->total[1] <<  3 );
 808edd0:	68e3      	ldr	r3, [r4, #12]
 808edd2:	68a2      	ldr	r2, [r4, #8]
 808edd4:	00d9      	lsls	r1, r3, #3
 808edd6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 808edda:	2300      	movs	r3, #0
 808eddc:	4319      	orrs	r1, r3
 808edde:	00d0      	lsls	r0, r2, #3
 808ede0:	ea4f 725e 	mov.w	r2, lr, lsr #29
 808ede4:	4310      	orrs	r0, r2
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 808ede6:	0e0a      	lsrs	r2, r1, #24
 808ede8:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
 808edec:	0c0a      	lsrs	r2, r1, #16
 808edee:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
 808edf2:	0a0a      	lsrs	r2, r1, #8
 808edf4:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
 808edf8:	0e02      	lsrs	r2, r0, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 808edfa:	ea4f 03ce 	mov.w	r3, lr, lsl #3

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 808edfe:	f884 20c4 	strb.w	r2, [r4, #196]	; 0xc4
 808ee02:	0c02      	lsrs	r2, r0, #16
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 808ee04:	ea43 7357 	orr.w	r3, r3, r7, lsr #29

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 808ee08:	f884 20c5 	strb.w	r2, [r4, #197]	; 0xc5
 808ee0c:	0a02      	lsrs	r2, r0, #8
 808ee0e:	f884 20c6 	strb.w	r2, [r4, #198]	; 0xc6
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 808ee12:	0e1a      	lsrs	r2, r3, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 808ee14:	00ff      	lsls	r7, r7, #3

    PUT_UINT64_BE( high, ctx->buffer, 112 );
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 808ee16:	f884 20c8 	strb.w	r2, [r4, #200]	; 0xc8
 808ee1a:	0c1a      	lsrs	r2, r3, #16
 808ee1c:	f884 20c9 	strb.w	r2, [r4, #201]	; 0xc9
 808ee20:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb
 808ee24:	0a1a      	lsrs	r2, r3, #8
 808ee26:	0e3b      	lsrs	r3, r7, #24
 808ee28:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
 808ee2c:	0c3b      	lsrs	r3, r7, #16
 808ee2e:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
 808ee32:	0a3b      	lsrs	r3, r7, #8
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 808ee34:	f884 10c3 	strb.w	r1, [r4, #195]	; 0xc3
 808ee38:	f884 00c7 	strb.w	r0, [r4, #199]	; 0xc7
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 808ee3c:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
 808ee40:	f884 20ca 	strb.w	r2, [r4, #202]	; 0xca
 808ee44:	f884 70cf 	strb.w	r7, [r4, #207]	; 0xcf

    if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 808ee48:	4631      	mov	r1, r6
 808ee4a:	4620      	mov	r0, r4
 808ee4c:	f7ff f910 	bl	808e070 <mbedtls_internal_sha512_process>
 808ee50:	4603      	mov	r3, r0
 808ee52:	2800      	cmp	r0, #0
 808ee54:	f040 80c5 	bne.w	808efe2 <mbedtls_sha512_finish_ret+0x262>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT64_BE( ctx->state[0], output,  0 );
 808ee58:	7de2      	ldrb	r2, [r4, #23]
 808ee5a:	702a      	strb	r2, [r5, #0]
 808ee5c:	8ae2      	ldrh	r2, [r4, #22]
 808ee5e:	706a      	strb	r2, [r5, #1]
 808ee60:	6962      	ldr	r2, [r4, #20]
 808ee62:	0a12      	lsrs	r2, r2, #8
 808ee64:	70aa      	strb	r2, [r5, #2]
 808ee66:	6962      	ldr	r2, [r4, #20]
 808ee68:	70ea      	strb	r2, [r5, #3]
 808ee6a:	7ce2      	ldrb	r2, [r4, #19]
 808ee6c:	712a      	strb	r2, [r5, #4]
 808ee6e:	8a62      	ldrh	r2, [r4, #18]
 808ee70:	716a      	strb	r2, [r5, #5]
 808ee72:	6922      	ldr	r2, [r4, #16]
 808ee74:	0a12      	lsrs	r2, r2, #8
 808ee76:	71aa      	strb	r2, [r5, #6]
 808ee78:	6922      	ldr	r2, [r4, #16]
 808ee7a:	71ea      	strb	r2, [r5, #7]
    PUT_UINT64_BE( ctx->state[1], output,  8 );
 808ee7c:	7fe2      	ldrb	r2, [r4, #31]
 808ee7e:	722a      	strb	r2, [r5, #8]
 808ee80:	8be2      	ldrh	r2, [r4, #30]
 808ee82:	726a      	strb	r2, [r5, #9]
 808ee84:	69e2      	ldr	r2, [r4, #28]
 808ee86:	0a12      	lsrs	r2, r2, #8
 808ee88:	72aa      	strb	r2, [r5, #10]
 808ee8a:	69e2      	ldr	r2, [r4, #28]
 808ee8c:	72ea      	strb	r2, [r5, #11]
 808ee8e:	7ee2      	ldrb	r2, [r4, #27]
 808ee90:	732a      	strb	r2, [r5, #12]
 808ee92:	8b62      	ldrh	r2, [r4, #26]
 808ee94:	736a      	strb	r2, [r5, #13]
 808ee96:	69a2      	ldr	r2, [r4, #24]
 808ee98:	0a12      	lsrs	r2, r2, #8
 808ee9a:	73aa      	strb	r2, [r5, #14]
 808ee9c:	69a2      	ldr	r2, [r4, #24]
 808ee9e:	73ea      	strb	r2, [r5, #15]
    PUT_UINT64_BE( ctx->state[2], output, 16 );
 808eea0:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 808eea4:	742a      	strb	r2, [r5, #16]
 808eea6:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 808eea8:	746a      	strb	r2, [r5, #17]
 808eeaa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 808eeac:	0a12      	lsrs	r2, r2, #8
 808eeae:	74aa      	strb	r2, [r5, #18]
 808eeb0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 808eeb2:	74ea      	strb	r2, [r5, #19]
 808eeb4:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 808eeb8:	752a      	strb	r2, [r5, #20]
 808eeba:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 808eebc:	756a      	strb	r2, [r5, #21]
 808eebe:	6a22      	ldr	r2, [r4, #32]
 808eec0:	0a12      	lsrs	r2, r2, #8
 808eec2:	75aa      	strb	r2, [r5, #22]
 808eec4:	6a22      	ldr	r2, [r4, #32]
 808eec6:	75ea      	strb	r2, [r5, #23]
    PUT_UINT64_BE( ctx->state[3], output, 24 );
 808eec8:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 808eecc:	762a      	strb	r2, [r5, #24]
 808eece:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 808eed0:	766a      	strb	r2, [r5, #25]
 808eed2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808eed4:	0a12      	lsrs	r2, r2, #8
 808eed6:	76aa      	strb	r2, [r5, #26]
 808eed8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808eeda:	76ea      	strb	r2, [r5, #27]
 808eedc:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
 808eee0:	772a      	strb	r2, [r5, #28]
 808eee2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 808eee4:	776a      	strb	r2, [r5, #29]
 808eee6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 808eee8:	0a12      	lsrs	r2, r2, #8
 808eeea:	77aa      	strb	r2, [r5, #30]
 808eeec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 808eeee:	77ea      	strb	r2, [r5, #31]
    PUT_UINT64_BE( ctx->state[4], output, 32 );
 808eef0:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
 808eef4:	f885 2020 	strb.w	r2, [r5, #32]
 808eef8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 808eefa:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
 808eefe:	6b62      	ldr	r2, [r4, #52]	; 0x34
 808ef00:	0a12      	lsrs	r2, r2, #8
 808ef02:	f885 2022 	strb.w	r2, [r5, #34]	; 0x22
 808ef06:	6b62      	ldr	r2, [r4, #52]	; 0x34
 808ef08:	f885 2023 	strb.w	r2, [r5, #35]	; 0x23
 808ef0c:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
 808ef10:	f885 2024 	strb.w	r2, [r5, #36]	; 0x24
 808ef14:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 808ef16:	f885 2025 	strb.w	r2, [r5, #37]	; 0x25
 808ef1a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 808ef1c:	0a12      	lsrs	r2, r2, #8
 808ef1e:	f885 2026 	strb.w	r2, [r5, #38]	; 0x26
 808ef22:	6b22      	ldr	r2, [r4, #48]	; 0x30
 808ef24:	f885 2027 	strb.w	r2, [r5, #39]	; 0x27
    PUT_UINT64_BE( ctx->state[5], output, 40 );
 808ef28:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 808ef2c:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
 808ef30:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 808ef32:	f885 2029 	strb.w	r2, [r5, #41]	; 0x29
 808ef36:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 808ef38:	0a12      	lsrs	r2, r2, #8
 808ef3a:	f885 202a 	strb.w	r2, [r5, #42]	; 0x2a
 808ef3e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 808ef40:	f885 202b 	strb.w	r2, [r5, #43]	; 0x2b
 808ef44:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
 808ef48:	f885 202c 	strb.w	r2, [r5, #44]	; 0x2c
 808ef4c:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 808ef4e:	f885 202d 	strb.w	r2, [r5, #45]	; 0x2d
 808ef52:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 808ef54:	0a12      	lsrs	r2, r2, #8
 808ef56:	f885 202e 	strb.w	r2, [r5, #46]	; 0x2e
 808ef5a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 808ef5c:	f885 202f 	strb.w	r2, [r5, #47]	; 0x2f

    if( ctx->is384 == 0 )
 808ef60:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
 808ef64:	2800      	cmp	r0, #0
 808ef66:	d13c      	bne.n	808efe2 <mbedtls_sha512_finish_ret+0x262>
    {
        PUT_UINT64_BE( ctx->state[6], output, 48 );
 808ef68:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 808ef6c:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 808ef70:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 808ef74:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
 808ef78:	6c63      	ldr	r3, [r4, #68]	; 0x44
 808ef7a:	0a1b      	lsrs	r3, r3, #8
 808ef7c:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
 808ef80:	6c63      	ldr	r3, [r4, #68]	; 0x44
 808ef82:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
 808ef86:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 808ef8a:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 808ef8e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 808ef92:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
 808ef96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808ef98:	0a1b      	lsrs	r3, r3, #8
 808ef9a:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 808ef9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808efa0:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
        PUT_UINT64_BE( ctx->state[7], output, 56 );
 808efa4:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
 808efa8:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 808efac:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 808efb0:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
 808efb4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 808efb6:	0a1b      	lsrs	r3, r3, #8
 808efb8:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
 808efbc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 808efbe:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
 808efc2:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 808efc6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
 808efca:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 808efce:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
 808efd2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 808efd4:	0a1b      	lsrs	r3, r3, #8
 808efd6:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
 808efda:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 808efdc:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
 808efe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    return( 0 );
 808efe2:	4618      	mov	r0, r3
}
 808efe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808efe6 <mbedtls_sha512_ret>:
 */
int mbedtls_sha512_ret( const unsigned char *input,
                    size_t ilen,
                    unsigned char output[64],
                    int is384 )
{
 808efe6:	b5f0      	push	{r4, r5, r6, r7, lr}
 808efe8:	461f      	mov	r7, r3
 808efea:	b0b7      	sub	sp, #220	; 0xdc
 808efec:	4605      	mov	r5, r0
    int ret;
    mbedtls_sha512_context ctx;

    mbedtls_sha512_init( &ctx );
 808efee:	4668      	mov	r0, sp
 */
int mbedtls_sha512_ret( const unsigned char *input,
                    size_t ilen,
                    unsigned char output[64],
                    int is384 )
{
 808eff0:	460e      	mov	r6, r1
 808eff2:	4614      	mov	r4, r2
    int ret;
    mbedtls_sha512_context ctx;

    mbedtls_sha512_init( &ctx );
 808eff4:	f7fe ff8c 	bl	808df10 <mbedtls_sha512_init>

    if( ( ret = mbedtls_sha512_starts_ret( &ctx, is384 ) ) != 0 )
 808eff8:	4639      	mov	r1, r7
 808effa:	4668      	mov	r0, sp
 808effc:	f7fe ff9c 	bl	808df38 <mbedtls_sha512_starts_ret>
 808f000:	4601      	mov	r1, r0
 808f002:	b958      	cbnz	r0, 808f01c <mbedtls_sha512_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha512_update_ret( &ctx, input, ilen ) ) != 0 )
 808f004:	4629      	mov	r1, r5
 808f006:	4632      	mov	r2, r6
 808f008:	4668      	mov	r0, sp
 808f00a:	f7ff fe71 	bl	808ecf0 <mbedtls_sha512_update_ret>
 808f00e:	4601      	mov	r1, r0
 808f010:	b920      	cbnz	r0, 808f01c <mbedtls_sha512_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha512_finish_ret( &ctx, output ) ) != 0 )
 808f012:	4621      	mov	r1, r4
 808f014:	4668      	mov	r0, sp
 808f016:	f7ff feb3 	bl	808ed80 <mbedtls_sha512_finish_ret>
 808f01a:	4601      	mov	r1, r0
        goto exit;

exit:
    mbedtls_sha512_free( &ctx );
 808f01c:	4668      	mov	r0, sp
 808f01e:	f7fe ff7b 	bl	808df18 <mbedtls_sha512_free>

    return( ret );
}
 808f022:	4608      	mov	r0, r1
 808f024:	b037      	add	sp, #220	; 0xdc
 808f026:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808f028 <_ZL14entropy_updateP23mbedtls_entropy_contexthPKhj>:
/*
 * Entropy accumulator update
 */
static int entropy_update( mbedtls_entropy_context *ctx, unsigned char source_id,
                           const unsigned char *data, size_t len )
{
 808f028:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned char tmp[MBEDTLS_ENTROPY_BLOCK_SIZE];
    size_t use_len = len;
    const unsigned char *p = data;
    int ret = 0;

    if( use_len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 808f02a:	2b40      	cmp	r3, #64	; 0x40
/*
 * Entropy accumulator update
 */
static int entropy_update( mbedtls_entropy_context *ctx, unsigned char source_id,
                           const unsigned char *data, size_t len )
{
 808f02c:	b093      	sub	sp, #76	; 0x4c
 808f02e:	4607      	mov	r7, r0
 808f030:	460d      	mov	r5, r1
 808f032:	4616      	mov	r6, r2
 808f034:	461c      	mov	r4, r3
    unsigned char tmp[MBEDTLS_ENTROPY_BLOCK_SIZE];
    size_t use_len = len;
    const unsigned char *p = data;
    int ret = 0;

    if( use_len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 808f036:	d908      	bls.n	808f04a <_ZL14entropy_updateP23mbedtls_entropy_contexthPKhj+0x22>
    {
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
        if( ( ret = mbedtls_sha512_ret( data, len, tmp, 0 ) ) != 0 )
 808f038:	2300      	movs	r3, #0
 808f03a:	aa02      	add	r2, sp, #8
 808f03c:	4621      	mov	r1, r4
 808f03e:	4630      	mov	r0, r6
 808f040:	f7ff ffd1 	bl	808efe6 <mbedtls_sha512_ret>
 808f044:	b9d0      	cbnz	r0, 808f07c <_ZL14entropy_updateP23mbedtls_entropy_contexthPKhj+0x54>
            goto cleanup;
#else
        if( ( ret = mbedtls_sha256_ret( data, len, tmp, 0 ) ) != 0 )
            goto cleanup;
#endif
        p = tmp;
 808f046:	ae02      	add	r6, sp, #8
        use_len = MBEDTLS_ENTROPY_BLOCK_SIZE;
 808f048:	2440      	movs	r4, #64	; 0x40
    }

    header[0] = source_id;
 808f04a:	f88d 5004 	strb.w	r5, [sp, #4]
     * Start the accumulator if this has not already happened. Note that
     * it is sufficient to start the accumulator here only because all calls to
     * gather entropy eventually execute this code.
     */
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
    if( ctx->accumulator_started == 0 &&
 808f04e:	463d      	mov	r5, r7
 808f050:	f855 1b08 	ldr.w	r1, [r5], #8
        p = tmp;
        use_len = MBEDTLS_ENTROPY_BLOCK_SIZE;
    }

    header[0] = source_id;
    header[1] = use_len & 0xFF;
 808f054:	f88d 4005 	strb.w	r4, [sp, #5]
     * Start the accumulator if this has not already happened. Note that
     * it is sufficient to start the accumulator here only because all calls to
     * gather entropy eventually execute this code.
     */
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
    if( ctx->accumulator_started == 0 &&
 808f058:	b919      	cbnz	r1, 808f062 <_ZL14entropy_updateP23mbedtls_entropy_contexthPKhj+0x3a>
 808f05a:	4628      	mov	r0, r5
 808f05c:	f7fe ff6c 	bl	808df38 <mbedtls_sha512_starts_ret>
 808f060:	b960      	cbnz	r0, 808f07c <_ZL14entropy_updateP23mbedtls_entropy_contexthPKhj+0x54>
        ( ret = mbedtls_sha512_starts_ret( &ctx->accumulator, 0 ) ) != 0 )
        goto cleanup;
    else
        ctx->accumulator_started = 1;
 808f062:	2301      	movs	r3, #1
 808f064:	603b      	str	r3, [r7, #0]
    if( ( ret = mbedtls_sha512_update_ret( &ctx->accumulator, header, 2 ) ) != 0 )
 808f066:	2202      	movs	r2, #2
 808f068:	a901      	add	r1, sp, #4
 808f06a:	4628      	mov	r0, r5
 808f06c:	f7ff fe40 	bl	808ecf0 <mbedtls_sha512_update_ret>
 808f070:	b920      	cbnz	r0, 808f07c <_ZL14entropy_updateP23mbedtls_entropy_contexthPKhj+0x54>
        goto cleanup;
    ret = mbedtls_sha512_update_ret( &ctx->accumulator, p, use_len );
 808f072:	4622      	mov	r2, r4
 808f074:	4631      	mov	r1, r6
 808f076:	4628      	mov	r0, r5
 808f078:	f7ff fe3a 	bl	808ecf0 <mbedtls_sha512_update_ret>
 808f07c:	2300      	movs	r3, #0
#include "mbedtls/havege.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808f07e:	4619      	mov	r1, r3
 808f080:	aa02      	add	r2, sp, #8
 808f082:	441a      	add	r2, r3
 808f084:	3301      	adds	r3, #1
 808f086:	2b41      	cmp	r3, #65	; 0x41
 808f088:	d001      	beq.n	808f08e <_ZL14entropy_updateP23mbedtls_entropy_contexthPKhj+0x66>
 808f08a:	7011      	strb	r1, [r2, #0]
 808f08c:	e7f8      	b.n	808f080 <_ZL14entropy_updateP23mbedtls_entropy_contexthPKhj+0x58>

cleanup:
    mbedtls_zeroize( tmp, sizeof( tmp ) );

    return( ret );
}
 808f08e:	b013      	add	sp, #76	; 0x4c
 808f090:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808f092 <_ZL23entropy_gather_internalP23mbedtls_entropy_context>:

/*
 * Run through the different sources to add entropy to our accumulator
 */
static int entropy_gather_internal( mbedtls_entropy_context *ctx )
{
 808f092:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int ret, i, have_one_strong = 0;
    unsigned char buf[MBEDTLS_ENTROPY_MAX_GATHER];
    size_t olen;

    if( ctx->source_count == 0 )
 808f096:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0

/*
 * Run through the different sources to add entropy to our accumulator
 */
static int entropy_gather_internal( mbedtls_entropy_context *ctx )
{
 808f09a:	b0a3      	sub	sp, #140	; 0x8c
 808f09c:	4680      	mov	r8, r0
    int ret, i, have_one_strong = 0;
    unsigned char buf[MBEDTLS_ENTROPY_MAX_GATHER];
    size_t olen;

    if( ctx->source_count == 0 )
 808f09e:	2b00      	cmp	r3, #0
 808f0a0:	d037      	beq.n	808f112 <_ZL23entropy_gather_internalP23mbedtls_entropy_context+0x80>
 808f0a2:	2500      	movs	r5, #0
 808f0a4:	4604      	mov	r4, r0
 808f0a6:	462e      	mov	r6, r5
    for( i = 0; i < ctx->source_count; i++ )
    {
        if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )
            have_one_strong = 1;

        olen = 0;
 808f0a8:	46a9      	mov	r9, r5
        return( MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED );

    /*
     * Run through our entropy sources
     */
    for( i = 0; i < ctx->source_count; i++ )
 808f0aa:	f8d8 30e0 	ldr.w	r3, [r8, #224]	; 0xe0
 808f0ae:	429e      	cmp	r6, r3
 808f0b0:	da21      	bge.n	808f0f6 <_ZL23entropy_gather_internalP23mbedtls_entropy_context+0x64>
    {
        if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )
 808f0b2:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
            have_one_strong = 1;

        olen = 0;
 808f0b6:	f8cd 9004 	str.w	r9, [sp, #4]
     * Run through our entropy sources
     */
    for( i = 0; i < ctx->source_count; i++ )
    {
        if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )
            have_one_strong = 1;
 808f0ba:	2b01      	cmp	r3, #1

        olen = 0;
        if( ( ret = ctx->source[i].f_source( ctx->source[i].p_source,
 808f0bc:	f04f 0280 	mov.w	r2, #128	; 0x80
 808f0c0:	ab01      	add	r3, sp, #4
 808f0c2:	a902      	add	r1, sp, #8
 808f0c4:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
 808f0c8:	f8d4 70e4 	ldr.w	r7, [r4, #228]	; 0xe4
     * Run through our entropy sources
     */
    for( i = 0; i < ctx->source_count; i++ )
    {
        if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )
            have_one_strong = 1;
 808f0cc:	bf08      	it	eq
 808f0ce:	2501      	moveq	r5, #1

        olen = 0;
        if( ( ret = ctx->source[i].f_source( ctx->source[i].p_source,
 808f0d0:	47b8      	blx	r7
 808f0d2:	b9a8      	cbnz	r0, 808f100 <_ZL23entropy_gather_internalP23mbedtls_entropy_context+0x6e>
        }

        /*
         * Add if we actually gathered something
         */
        if( olen > 0 )
 808f0d4:	9b01      	ldr	r3, [sp, #4]
 808f0d6:	b15b      	cbz	r3, 808f0f0 <_ZL23entropy_gather_internalP23mbedtls_entropy_context+0x5e>
        {
            if( ( ret = entropy_update( ctx, (unsigned char) i,
 808f0d8:	aa02      	add	r2, sp, #8
 808f0da:	b2f1      	uxtb	r1, r6
 808f0dc:	4640      	mov	r0, r8
 808f0de:	f7ff ffa3 	bl	808f028 <_ZL14entropy_updateP23mbedtls_entropy_contexthPKhj>
 808f0e2:	b9c0      	cbnz	r0, 808f116 <_ZL23entropy_gather_internalP23mbedtls_entropy_context+0x84>
                                        buf, olen ) ) != 0 )
                return( ret );
            ctx->source[i].size += olen;
 808f0e4:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
 808f0e8:	9b01      	ldr	r3, [sp, #4]
 808f0ea:	4413      	add	r3, r2
 808f0ec:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
        return( MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED );

    /*
     * Run through our entropy sources
     */
    for( i = 0; i < ctx->source_count; i++ )
 808f0f0:	3601      	adds	r6, #1
 808f0f2:	3414      	adds	r4, #20
 808f0f4:	e7d9      	b.n	808f0aa <_ZL23entropy_gather_internalP23mbedtls_entropy_context+0x18>
            ctx->source[i].size += olen;
        }
    }

    if( have_one_strong == 0 )
        ret = MBEDTLS_ERR_ENTROPY_NO_STRONG_SOURCE;
 808f0f6:	2d00      	cmp	r5, #0
 808f0f8:	bf14      	ite	ne
 808f0fa:	2000      	movne	r0, #0
 808f0fc:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
 808f100:	2300      	movs	r3, #0
#include "mbedtls/havege.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808f102:	4619      	mov	r1, r3
 808f104:	aa02      	add	r2, sp, #8
 808f106:	441a      	add	r2, r3
 808f108:	3301      	adds	r3, #1
 808f10a:	2b81      	cmp	r3, #129	; 0x81
 808f10c:	d003      	beq.n	808f116 <_ZL23entropy_gather_internalP23mbedtls_entropy_context+0x84>
 808f10e:	7011      	strb	r1, [r2, #0]
 808f110:	e7f8      	b.n	808f104 <_ZL23entropy_gather_internalP23mbedtls_entropy_context+0x72>
    int ret, i, have_one_strong = 0;
    unsigned char buf[MBEDTLS_ENTROPY_MAX_GATHER];
    size_t olen;

    if( ctx->source_count == 0 )
        return( MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED );
 808f112:	f06f 003f 	mvn.w	r0, #63	; 0x3f

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );

    return( ret );
}
 808f116:	b023      	add	sp, #140	; 0x8c
 808f118:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0808f11c <mbedtls_entropy_init>:
}

#define ENTROPY_MAX_LOOP    256     /**< Maximum amount to loop before error */

void mbedtls_entropy_init( mbedtls_entropy_context *ctx )
{
 808f11c:	b538      	push	{r3, r4, r5, lr}
 808f11e:	4604      	mov	r4, r0
    ctx->source_count = 0;
 808f120:	2500      	movs	r5, #0
    memset( ctx->source, 0, sizeof( ctx->source ) );
 808f122:	f44f 72c8 	mov.w	r2, #400	; 0x190

#define ENTROPY_MAX_LOOP    256     /**< Maximum amount to loop before error */

void mbedtls_entropy_init( mbedtls_entropy_context *ctx )
{
    ctx->source_count = 0;
 808f126:	f8c0 50e0 	str.w	r5, [r0, #224]	; 0xe0
    memset( ctx->source, 0, sizeof( ctx->source ) );
 808f12a:	4629      	mov	r1, r5
 808f12c:	30e4      	adds	r0, #228	; 0xe4
 808f12e:	f004 fd4c 	bl	8093bca <memset>

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &ctx->mutex );
#endif

    ctx->accumulator_started = 0;
 808f132:	4620      	mov	r0, r4
 808f134:	f840 5b08 	str.w	r5, [r0], #8
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
    mbedtls_sha512_init( &ctx->accumulator );
 808f138:	f7fe feea 	bl	808df10 <mbedtls_sha512_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    idx = ctx->source_count;
 808f13c:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
    if( idx >= MBEDTLS_ENTROPY_MAX_SOURCES )
 808f140:	2a13      	cmp	r2, #19
 808f142:	dc0f      	bgt.n	808f164 <mbedtls_entropy_init+0x48>
    {
        ret = MBEDTLS_ERR_ENTROPY_MAX_SOURCES;
        goto exit;
    }

    ctx->source[idx].f_source  = f_source;
 808f144:	2314      	movs	r3, #20
 808f146:	fb03 4302 	mla	r3, r3, r2, r4
 808f14a:	4907      	ldr	r1, [pc, #28]	; (808f168 <mbedtls_entropy_init+0x4c>)
    ctx->source[idx].p_source  = p_source;
    ctx->source[idx].threshold = threshold;
    ctx->source[idx].strong    = strong;

    ctx->source_count++;
 808f14c:	3201      	adds	r2, #1
    {
        ret = MBEDTLS_ERR_ENTROPY_MAX_SOURCES;
        goto exit;
    }

    ctx->source[idx].f_source  = f_source;
 808f14e:	f8c3 10e4 	str.w	r1, [r3, #228]	; 0xe4
    ctx->source[idx].p_source  = p_source;
    ctx->source[idx].threshold = threshold;
 808f152:	2104      	movs	r1, #4
        ret = MBEDTLS_ERR_ENTROPY_MAX_SOURCES;
        goto exit;
    }

    ctx->source[idx].f_source  = f_source;
    ctx->source[idx].p_source  = p_source;
 808f154:	f8c3 50e8 	str.w	r5, [r3, #232]	; 0xe8
    ctx->source[idx].threshold = threshold;
 808f158:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
    ctx->source[idx].strong    = strong;
 808f15c:	f8c3 50f4 	str.w	r5, [r3, #244]	; 0xf4

    ctx->source_count++;
 808f160:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
 808f164:	bd38      	pop	{r3, r4, r5, pc}
 808f166:	bf00      	nop
 808f168:	080852ab 	.word	0x080852ab

0808f16c <mbedtls_entropy_func>:

    return( ret );
}

int mbedtls_entropy_func( void *data, unsigned char *output, size_t len )
{
 808f16c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int ret, count = 0, i, done;
    mbedtls_entropy_context *ctx = (mbedtls_entropy_context *) data;
    unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE];

    if( len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 808f170:	2a40      	cmp	r2, #64	; 0x40

    return( ret );
}

int mbedtls_entropy_func( void *data, unsigned char *output, size_t len )
{
 808f172:	b090      	sub	sp, #64	; 0x40
 808f174:	4605      	mov	r5, r0
 808f176:	4688      	mov	r8, r1
 808f178:	4617      	mov	r7, r2
    int ret, count = 0, i, done;
    mbedtls_entropy_context *ctx = (mbedtls_entropy_context *) data;
    unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE];

    if( len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 808f17a:	d862      	bhi.n	808f242 <mbedtls_entropy_func+0xd6>
 808f17c:	f44f 7681 	mov.w	r6, #258	; 0x102
    /*
     * Always gather extra entropy before a call
     */
    do
    {
        if( count++ > ENTROPY_MAX_LOOP )
 808f180:	3e01      	subs	r6, #1
 808f182:	d053      	beq.n	808f22c <mbedtls_entropy_func+0xc0>
        {
            ret = MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
            goto exit;
        }

        if( ( ret = entropy_gather_internal( ctx ) ) != 0 )
 808f184:	4628      	mov	r0, r5
 808f186:	f7ff ff84 	bl	808f092 <_ZL23entropy_gather_internalP23mbedtls_entropy_context>
 808f18a:	4604      	mov	r4, r0
 808f18c:	2800      	cmp	r0, #0
 808f18e:	d14f      	bne.n	808f230 <mbedtls_entropy_func+0xc4>
 808f190:	462a      	mov	r2, r5
            goto exit;

        done = 1;
        for( i = 0; i < ctx->source_count; i++ )
 808f192:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 808f196:	2101      	movs	r1, #1
 808f198:	429c      	cmp	r4, r3
 808f19a:	da0a      	bge.n	808f1b2 <mbedtls_entropy_func+0x46>
            if( ctx->source[i].size < ctx->source[i].threshold )
                done = 0;
 808f19c:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec

        if( ( ret = entropy_gather_internal( ctx ) ) != 0 )
            goto exit;

        done = 1;
        for( i = 0; i < ctx->source_count; i++ )
 808f1a0:	3401      	adds	r4, #1
            if( ctx->source[i].size < ctx->source[i].threshold )
                done = 0;
 808f1a2:	4686      	mov	lr, r0
 808f1a4:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 808f1a8:	3214      	adds	r2, #20
 808f1aa:	4586      	cmp	lr, r0
 808f1ac:	bf38      	it	cc
 808f1ae:	2100      	movcc	r1, #0

        if( ( ret = entropy_gather_internal( ctx ) ) != 0 )
            goto exit;

        done = 1;
        for( i = 0; i < ctx->source_count; i++ )
 808f1b0:	e7f2      	b.n	808f198 <mbedtls_entropy_func+0x2c>
            if( ctx->source[i].size < ctx->source[i].threshold )
                done = 0;
    }
    while( ! done );
 808f1b2:	2900      	cmp	r1, #0
 808f1b4:	d0e4      	beq.n	808f180 <mbedtls_entropy_func+0x14>

    memset( buf, 0, MBEDTLS_ENTROPY_BLOCK_SIZE );
 808f1b6:	2240      	movs	r2, #64	; 0x40
 808f1b8:	2100      	movs	r1, #0
 808f1ba:	4668      	mov	r0, sp
    /*
     * Note that at this stage it is assumed that the accumulator was started
     * in a previous call to entropy_update(). If this is not guaranteed, the
     * code below will fail.
     */
    if( ( ret = mbedtls_sha512_finish_ret( &ctx->accumulator, buf ) ) != 0 )
 808f1bc:	f105 0608 	add.w	r6, r5, #8
            if( ctx->source[i].size < ctx->source[i].threshold )
                done = 0;
    }
    while( ! done );

    memset( buf, 0, MBEDTLS_ENTROPY_BLOCK_SIZE );
 808f1c0:	f004 fd03 	bl	8093bca <memset>
    /*
     * Note that at this stage it is assumed that the accumulator was started
     * in a previous call to entropy_update(). If this is not guaranteed, the
     * code below will fail.
     */
    if( ( ret = mbedtls_sha512_finish_ret( &ctx->accumulator, buf ) ) != 0 )
 808f1c4:	4669      	mov	r1, sp
 808f1c6:	4630      	mov	r0, r6
 808f1c8:	f7ff fdda 	bl	808ed80 <mbedtls_sha512_finish_ret>
 808f1cc:	4604      	mov	r4, r0
 808f1ce:	bb78      	cbnz	r0, 808f230 <mbedtls_entropy_func+0xc4>
        goto exit;

    /*
     * Reset accumulator and counters and recycle existing entropy
     */
    mbedtls_sha512_free( &ctx->accumulator );
 808f1d0:	4630      	mov	r0, r6
 808f1d2:	f7fe fea1 	bl	808df18 <mbedtls_sha512_free>
    mbedtls_sha512_init( &ctx->accumulator );
 808f1d6:	4630      	mov	r0, r6
 808f1d8:	f7fe fe9a 	bl	808df10 <mbedtls_sha512_init>
    if( ( ret = mbedtls_sha512_starts_ret( &ctx->accumulator, 0 ) ) != 0 )
 808f1dc:	4621      	mov	r1, r4
 808f1de:	4630      	mov	r0, r6
 808f1e0:	f7fe feaa 	bl	808df38 <mbedtls_sha512_starts_ret>
 808f1e4:	4604      	mov	r4, r0
 808f1e6:	bb18      	cbnz	r0, 808f230 <mbedtls_entropy_func+0xc4>
        goto exit;
    if( ( ret = mbedtls_sha512_update_ret( &ctx->accumulator, buf,
 808f1e8:	2240      	movs	r2, #64	; 0x40
 808f1ea:	4669      	mov	r1, sp
 808f1ec:	4630      	mov	r0, r6
 808f1ee:	f7ff fd7f 	bl	808ecf0 <mbedtls_sha512_update_ret>
 808f1f2:	4604      	mov	r4, r0
 808f1f4:	b9e0      	cbnz	r0, 808f230 <mbedtls_entropy_func+0xc4>
        goto exit;

    /*
     * Perform second SHA-512 on entropy
     */
    if( ( ret = mbedtls_sha512_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,
 808f1f6:	4603      	mov	r3, r0
 808f1f8:	466a      	mov	r2, sp
 808f1fa:	2140      	movs	r1, #64	; 0x40
 808f1fc:	4668      	mov	r0, sp
 808f1fe:	f7ff fef2 	bl	808efe6 <mbedtls_sha512_ret>
 808f202:	4604      	mov	r4, r0
 808f204:	b9a0      	cbnz	r0, 808f230 <mbedtls_entropy_func+0xc4>
                                    buf, 0 ) ) != 0 )
        goto exit;
#endif /* MBEDTLS_ENTROPY_SHA512_ACCUMULATOR */

    for( i = 0; i < ctx->source_count; i++ )
        ctx->source[i].size = 0;
 808f206:	4621      	mov	r1, r4
    if( ( ret = mbedtls_sha256_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,
                                    buf, 0 ) ) != 0 )
        goto exit;
#endif /* MBEDTLS_ENTROPY_SHA512_ACCUMULATOR */

    for( i = 0; i < ctx->source_count; i++ )
 808f208:	f8d5 60e0 	ldr.w	r6, [r5, #224]	; 0xe0
 808f20c:	4603      	mov	r3, r0
        ctx->source[i].size = 0;
 808f20e:	2014      	movs	r0, #20
    if( ( ret = mbedtls_sha256_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,
                                    buf, 0 ) ) != 0 )
        goto exit;
#endif /* MBEDTLS_ENTROPY_SHA512_ACCUMULATOR */

    for( i = 0; i < ctx->source_count; i++ )
 808f210:	42b3      	cmp	r3, r6
 808f212:	da05      	bge.n	808f220 <mbedtls_entropy_func+0xb4>
        ctx->source[i].size = 0;
 808f214:	fb00 5203 	mla	r2, r0, r3, r5
    if( ( ret = mbedtls_sha256_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,
                                    buf, 0 ) ) != 0 )
        goto exit;
#endif /* MBEDTLS_ENTROPY_SHA512_ACCUMULATOR */

    for( i = 0; i < ctx->source_count; i++ )
 808f218:	3301      	adds	r3, #1
        ctx->source[i].size = 0;
 808f21a:	f8c2 10ec 	str.w	r1, [r2, #236]	; 0xec
    if( ( ret = mbedtls_sha256_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,
                                    buf, 0 ) ) != 0 )
        goto exit;
#endif /* MBEDTLS_ENTROPY_SHA512_ACCUMULATOR */

    for( i = 0; i < ctx->source_count; i++ )
 808f21e:	e7f7      	b.n	808f210 <mbedtls_entropy_func+0xa4>
        ctx->source[i].size = 0;

    memcpy( output, buf, len );
 808f220:	463a      	mov	r2, r7
 808f222:	4669      	mov	r1, sp
 808f224:	4640      	mov	r0, r8
 808f226:	f004 fcaa 	bl	8093b7e <memcpy>
 808f22a:	e001      	b.n	808f230 <mbedtls_entropy_func+0xc4>
     */
    do
    {
        if( count++ > ENTROPY_MAX_LOOP )
        {
            ret = MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
 808f22c:	f06f 043b 	mvn.w	r4, #59	; 0x3b
 808f230:	2300      	movs	r3, #0
#include "mbedtls/havege.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808f232:	4619      	mov	r1, r3
 808f234:	eb0d 0203 	add.w	r2, sp, r3
 808f238:	3301      	adds	r3, #1
 808f23a:	2b41      	cmp	r3, #65	; 0x41
 808f23c:	d004      	beq.n	808f248 <mbedtls_entropy_func+0xdc>
 808f23e:	7011      	strb	r1, [r2, #0]
 808f240:	e7f8      	b.n	808f234 <mbedtls_entropy_func+0xc8>
    int ret, count = 0, i, done;
    mbedtls_entropy_context *ctx = (mbedtls_entropy_context *) data;
    unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE];

    if( len > MBEDTLS_ENTROPY_BLOCK_SIZE )
        return( MBEDTLS_ERR_ENTROPY_SOURCE_FAILED );
 808f242:	f06f 003b 	mvn.w	r0, #59	; 0x3b
 808f246:	e000      	b.n	808f24a <mbedtls_entropy_func+0xde>
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
 808f248:	4620      	mov	r0, r4
}
 808f24a:	b010      	add	sp, #64	; 0x40
 808f24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808f250 <mbedtls_pem_init>:
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
}

void mbedtls_pem_init( mbedtls_pem_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_pem_context ) );
 808f250:	2300      	movs	r3, #0
 808f252:	6003      	str	r3, [r0, #0]
 808f254:	6043      	str	r3, [r0, #4]
 808f256:	6083      	str	r3, [r0, #8]
 808f258:	4770      	bx	lr
	...

0808f25c <mbedtls_pem_read_buffer>:
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

int mbedtls_pem_read_buffer( mbedtls_pem_context *ctx, const char *header, const char *footer,
                     const unsigned char *data, const unsigned char *pwd,
                     size_t pwdlen, size_t *use_len )
{
 808f25c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808f260:	4689      	mov	r9, r1
 808f262:	b085      	sub	sp, #20
 808f264:	4690      	mov	r8, r2
 808f266:	461f      	mov	r7, r3
    ((void) pwd);
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
 808f268:	4606      	mov	r6, r0
 808f26a:	2800      	cmp	r0, #0
 808f26c:	d067      	beq.n	808f33e <mbedtls_pem_read_buffer+0xe2>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );

    s1 = (unsigned char *) strstr( (const char *) data, header );
 808f26e:	4618      	mov	r0, r3
 808f270:	f004 fcd3 	bl	8093c1a <strstr>

    if( s1 == NULL )
 808f274:	4604      	mov	r4, r0
 808f276:	2800      	cmp	r0, #0
 808f278:	d063      	beq.n	808f342 <mbedtls_pem_read_buffer+0xe6>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s2 = (unsigned char *) strstr( (const char *) data, footer );
 808f27a:	4641      	mov	r1, r8
 808f27c:	4638      	mov	r0, r7
 808f27e:	f004 fccc 	bl	8093c1a <strstr>

    if( s2 == NULL || s2 <= s1 )
 808f282:	4605      	mov	r5, r0
 808f284:	2800      	cmp	r0, #0
 808f286:	d05c      	beq.n	808f342 <mbedtls_pem_read_buffer+0xe6>
 808f288:	4284      	cmp	r4, r0
 808f28a:	d25a      	bcs.n	808f342 <mbedtls_pem_read_buffer+0xe6>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
 808f28c:	4648      	mov	r0, r9
 808f28e:	f004 fcbc 	bl	8093c0a <strlen>
    if( *s1 == ' '  ) s1++;
 808f292:	5c22      	ldrb	r2, [r4, r0]
    s2 = (unsigned char *) strstr( (const char *) data, footer );

    if( s2 == NULL || s2 <= s1 )
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
 808f294:	1823      	adds	r3, r4, r0
    if( *s1 == ' '  ) s1++;
 808f296:	2a20      	cmp	r2, #32
 808f298:	bf08      	it	eq
 808f29a:	3301      	addeq	r3, #1
    if( *s1 == '\r' ) s1++;
 808f29c:	781a      	ldrb	r2, [r3, #0]
 808f29e:	2a0d      	cmp	r2, #13
 808f2a0:	bf08      	it	eq
 808f2a2:	3301      	addeq	r3, #1
    if( *s1 == '\n' ) s1++;
 808f2a4:	781a      	ldrb	r2, [r3, #0]
 808f2a6:	2a0a      	cmp	r2, #10
 808f2a8:	d14b      	bne.n	808f342 <mbedtls_pem_read_buffer+0xe6>
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
 808f2aa:	4640      	mov	r0, r8
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
    if( *s1 == ' '  ) s1++;
    if( *s1 == '\r' ) s1++;
    if( *s1 == '\n' ) s1++;
 808f2ac:	1c5c      	adds	r4, r3, #1
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
 808f2ae:	f004 fcac 	bl	8093c0a <strlen>
    if( *end == ' '  ) end++;
 808f2b2:	5c2a      	ldrb	r2, [r5, r0]
    if( *s1 == '\r' ) s1++;
    if( *s1 == '\n' ) s1++;
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
 808f2b4:	182b      	adds	r3, r5, r0
    if( *end == ' '  ) end++;
 808f2b6:	2a20      	cmp	r2, #32
 808f2b8:	bf08      	it	eq
 808f2ba:	3301      	addeq	r3, #1
    if( *end == '\r' ) end++;
 808f2bc:	781a      	ldrb	r2, [r3, #0]
 808f2be:	2a0d      	cmp	r2, #13
 808f2c0:	bf08      	it	eq
 808f2c2:	3301      	addeq	r3, #1
    if( *end == '\n' ) end++;
 808f2c4:	781a      	ldrb	r2, [r3, #0]
 808f2c6:	2a0a      	cmp	r2, #10
 808f2c8:	bf08      	it	eq
 808f2ca:	3301      	addeq	r3, #1
    *use_len = end - data;
 808f2cc:	1bdb      	subs	r3, r3, r7
 808f2ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38

    enc = 0;

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
 808f2d0:	1b2f      	subs	r7, r5, r4
 808f2d2:	2f15      	cmp	r7, #21
    end = s2;
    end += strlen( footer );
    if( *end == ' '  ) end++;
    if( *end == '\r' ) end++;
    if( *end == '\n' ) end++;
    *use_len = end - data;
 808f2d4:	6013      	str	r3, [r2, #0]

    enc = 0;

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
 808f2d6:	dd05      	ble.n	808f2e4 <mbedtls_pem_read_buffer+0x88>
 808f2d8:	2216      	movs	r2, #22
 808f2da:	4920      	ldr	r1, [pc, #128]	; (808f35c <mbedtls_pem_read_buffer+0x100>)
 808f2dc:	4620      	mov	r0, r4
 808f2de:	f004 fc3f 	bl	8093b60 <memcmp>
 808f2e2:	b380      	cbz	r0, 808f346 <mbedtls_pem_read_buffer+0xea>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    if( s1 >= s2 )
 808f2e4:	42a5      	cmp	r5, r4
 808f2e6:	d930      	bls.n	808f34a <mbedtls_pem_read_buffer+0xee>
        return( MBEDTLS_ERR_PEM_INVALID_DATA );

    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );
 808f2e8:	2100      	movs	r1, #0
 808f2ea:	9700      	str	r7, [sp, #0]
 808f2ec:	4623      	mov	r3, r4
 808f2ee:	aa03      	add	r2, sp, #12
 808f2f0:	4608      	mov	r0, r1
 808f2f2:	f7f8 fcfd 	bl	8087cf0 <mbedtls_base64_decode>

    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
 808f2f6:	302c      	adds	r0, #44	; 0x2c
 808f2f8:	d029      	beq.n	808f34e <mbedtls_pem_read_buffer+0xf2>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );

    if( ( buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
 808f2fa:	f8dd 800c 	ldr.w	r8, [sp, #12]
 808f2fe:	2001      	movs	r0, #1
 808f300:	4641      	mov	r1, r8
 808f302:	f004 fc17 	bl	8093b34 <calloc>
 808f306:	4605      	mov	r5, r0
 808f308:	b318      	cbz	r0, 808f352 <mbedtls_pem_read_buffer+0xf6>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );

    if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
 808f30a:	4623      	mov	r3, r4
 808f30c:	9700      	str	r7, [sp, #0]
 808f30e:	aa03      	add	r2, sp, #12
 808f310:	4641      	mov	r1, r8
 808f312:	f7f8 fced 	bl	8087cf0 <mbedtls_base64_decode>
 808f316:	9b03      	ldr	r3, [sp, #12]
 808f318:	4604      	mov	r4, r0
 808f31a:	b168      	cbz	r0, 808f338 <mbedtls_pem_read_buffer+0xdc>
    {
        mbedtls_zeroize( buf, len );
 808f31c:	462a      	mov	r2, r5
 808f31e:	442b      	add	r3, r5
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808f320:	2100      	movs	r1, #0
 808f322:	429a      	cmp	r2, r3
 808f324:	d002      	beq.n	808f32c <mbedtls_pem_read_buffer+0xd0>
 808f326:	7011      	strb	r1, [r2, #0]
 808f328:	3201      	adds	r2, #1
 808f32a:	e7fa      	b.n	808f322 <mbedtls_pem_read_buffer+0xc6>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );

    if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
    {
        mbedtls_zeroize( buf, len );
        mbedtls_free( buf );
 808f32c:	4628      	mov	r0, r5
 808f32e:	f002 f905 	bl	809153c <free>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 808f332:	f5a4 5088 	sub.w	r0, r4, #4352	; 0x1100
 808f336:	e00d      	b.n	808f354 <mbedtls_pem_read_buffer+0xf8>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    ctx->buf = buf;
 808f338:	6035      	str	r5, [r6, #0]
    ctx->buflen = len;
 808f33a:	6073      	str	r3, [r6, #4]

    return( 0 );
 808f33c:	e00a      	b.n	808f354 <mbedtls_pem_read_buffer+0xf8>
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );
 808f33e:	4808      	ldr	r0, [pc, #32]	; (808f360 <mbedtls_pem_read_buffer+0x104>)
 808f340:	e008      	b.n	808f354 <mbedtls_pem_read_buffer+0xf8>

    s1 = (unsigned char *) strstr( (const char *) data, header );

    if( s1 == NULL )
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
 808f342:	4808      	ldr	r0, [pc, #32]	; (808f364 <mbedtls_pem_read_buffer+0x108>)
 808f344:	e006      	b.n	808f354 <mbedtls_pem_read_buffer+0xf8>

        if( *s1 == '\r' ) s1++;
        if( *s1 == '\n' ) s1++;
        else return( MBEDTLS_ERR_PEM_INVALID_DATA );
#else
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
 808f346:	4808      	ldr	r0, [pc, #32]	; (808f368 <mbedtls_pem_read_buffer+0x10c>)
 808f348:	e004      	b.n	808f354 <mbedtls_pem_read_buffer+0xf8>
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    if( s1 >= s2 )
        return( MBEDTLS_ERR_PEM_INVALID_DATA );
 808f34a:	4808      	ldr	r0, [pc, #32]	; (808f36c <mbedtls_pem_read_buffer+0x110>)
 808f34c:	e002      	b.n	808f354 <mbedtls_pem_read_buffer+0xf8>

    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );

    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 808f34e:	4808      	ldr	r0, [pc, #32]	; (808f370 <mbedtls_pem_read_buffer+0x114>)
 808f350:	e000      	b.n	808f354 <mbedtls_pem_read_buffer+0xf8>

    if( ( buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );
 808f352:	4808      	ldr	r0, [pc, #32]	; (808f374 <mbedtls_pem_read_buffer+0x118>)

    ctx->buf = buf;
    ctx->buflen = len;

    return( 0 );
}
 808f354:	b005      	add	sp, #20
 808f356:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808f35a:	bf00      	nop
 808f35c:	080960e0 	.word	0x080960e0
 808f360:	ffffeb80 	.word	0xffffeb80
 808f364:	ffffef80 	.word	0xffffef80
 808f368:	ffffec00 	.word	0xffffec00
 808f36c:	ffffef00 	.word	0xffffef00
 808f370:	ffffeed4 	.word	0xffffeed4
 808f374:	ffffee80 	.word	0xffffee80

0808f378 <mbedtls_pem_free>:

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
 808f378:	b510      	push	{r4, lr}
    if( ctx->buf != NULL )
 808f37a:	6803      	ldr	r3, [r0, #0]

    return( 0 );
}

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
 808f37c:	4604      	mov	r4, r0
    if( ctx->buf != NULL )
 808f37e:	b13b      	cbz	r3, 808f390 <mbedtls_pem_free+0x18>
 808f380:	6842      	ldr	r2, [r0, #4]
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808f382:	2100      	movs	r1, #0
 808f384:	441a      	add	r2, r3
 808f386:	429a      	cmp	r2, r3
 808f388:	d002      	beq.n	808f390 <mbedtls_pem_free+0x18>
 808f38a:	7019      	strb	r1, [r3, #0]
 808f38c:	3301      	adds	r3, #1
 808f38e:	e7fa      	b.n	808f386 <mbedtls_pem_free+0xe>

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
    if( ctx->buf != NULL )
        mbedtls_zeroize( ctx->buf, ctx->buflen );
    mbedtls_free( ctx->buf );
 808f390:	6820      	ldr	r0, [r4, #0]
 808f392:	f002 f8d3 	bl	809153c <free>
    mbedtls_free( ctx->info );
 808f396:	68a0      	ldr	r0, [r4, #8]
 808f398:	f002 f8d0 	bl	809153c <free>
 808f39c:	f104 020c 	add.w	r2, r4, #12
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808f3a0:	2300      	movs	r3, #0
 808f3a2:	4294      	cmp	r4, r2
 808f3a4:	d002      	beq.n	808f3ac <mbedtls_pem_free+0x34>
 808f3a6:	7023      	strb	r3, [r4, #0]
 808f3a8:	3401      	adds	r4, #1
 808f3aa:	e7fa      	b.n	808f3a2 <mbedtls_pem_free+0x2a>
 808f3ac:	bd10      	pop	{r4, pc}
	...

0808f3b0 <mbedtls_rsa_deduce_primes>:
 *
 */
int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
                     mbedtls_mpi const *E, mbedtls_mpi const *D,
                     mbedtls_mpi *P, mbedtls_mpi *Q )
{
 808f3b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808f3b4:	4606      	mov	r6, r0
 808f3b6:	4688      	mov	r8, r1
 808f3b8:	b096      	sub	sp, #88	; 0x58
 808f3ba:	461f      	mov	r7, r3
          61,   67,   71,   73,   79,   83,   89,   97,
         101,  103,  107,  109,  113,  127,  131,  137,
         139,  149,  151,  157,  163,  167,  173,  179,
         181,  191,  193,  197,  199,  211,  223,  227,
         229,  233,  239,  241,  251
    };
 808f3bc:	4b79      	ldr	r3, [pc, #484]	; (808f5a4 <mbedtls_rsa_deduce_primes+0x1f4>)
 *
 */
int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
                     mbedtls_mpi const *E, mbedtls_mpi const *D,
                     mbedtls_mpi *P, mbedtls_mpi *Q )
{
 808f3be:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 808f3c2:	4615      	mov	r5, r2
          61,   67,   71,   73,   79,   83,   89,   97,
         101,  103,  107,  109,  113,  127,  131,  137,
         139,  149,  151,  157,  163,  167,  173,  179,
         181,  191,  193,  197,  199,  211,  223,  227,
         229,  233,  239,  241,  251
    };
 808f3c4:	f103 0e30 	add.w	lr, r3, #48	; 0x30
 808f3c8:	aa08      	add	r2, sp, #32
 808f3ca:	4614      	mov	r4, r2
 808f3cc:	6818      	ldr	r0, [r3, #0]
 808f3ce:	6859      	ldr	r1, [r3, #4]
 808f3d0:	3308      	adds	r3, #8
 808f3d2:	c403      	stmia	r4!, {r0, r1}
 808f3d4:	4573      	cmp	r3, lr
 808f3d6:	4622      	mov	r2, r4
 808f3d8:	d1f7      	bne.n	808f3ca <mbedtls_rsa_deduce_primes+0x1a>
 808f3da:	6818      	ldr	r0, [r3, #0]
 808f3dc:	889b      	ldrh	r3, [r3, #4]
 808f3de:	6020      	str	r0, [r4, #0]
 808f3e0:	80a3      	strh	r3, [r4, #4]

    const size_t num_primes = sizeof( primes ) / sizeof( *primes );

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
 808f3e2:	2f00      	cmp	r7, #0
 808f3e4:	f000 80b8 	beq.w	808f558 <mbedtls_rsa_deduce_primes+0x1a8>
 808f3e8:	f1b9 0f00 	cmp.w	r9, #0
 808f3ec:	f000 80b4 	beq.w	808f558 <mbedtls_rsa_deduce_primes+0x1a8>
 808f3f0:	68bb      	ldr	r3, [r7, #8]
 808f3f2:	2b00      	cmp	r3, #0
 808f3f4:	f040 80b0 	bne.w	808f558 <mbedtls_rsa_deduce_primes+0x1a8>
 808f3f8:	f8d9 1008 	ldr.w	r1, [r9, #8]
 808f3fc:	2900      	cmp	r1, #0
 808f3fe:	f040 80ab 	bne.w	808f558 <mbedtls_rsa_deduce_primes+0x1a8>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 808f402:	4630      	mov	r0, r6
 808f404:	f7fc fc5a 	bl	808bcbc <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 808f408:	2800      	cmp	r0, #0
 808f40a:	f340 80a5 	ble.w	808f558 <mbedtls_rsa_deduce_primes+0x1a8>

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 808f40e:	2101      	movs	r1, #1
 808f410:	4628      	mov	r0, r5
 808f412:	f7fc fc53 	bl	808bcbc <mbedtls_mpi_cmp_int>
    const size_t num_primes = sizeof( primes ) / sizeof( *primes );

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 808f416:	2800      	cmp	r0, #0
 808f418:	f340 809e 	ble.w	808f558 <mbedtls_rsa_deduce_primes+0x1a8>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 808f41c:	4631      	mov	r1, r6
 808f41e:	4628      	mov	r0, r5
 808f420:	f7fc fc07 	bl	808bc32 <mbedtls_mpi_cmp_mpi>

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 808f424:	2800      	cmp	r0, #0
 808f426:	f280 8097 	bge.w	808f558 <mbedtls_rsa_deduce_primes+0x1a8>
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 808f42a:	2101      	movs	r1, #1
 808f42c:	4640      	mov	r0, r8
 808f42e:	f7fc fc45 	bl	808bcbc <mbedtls_mpi_cmp_int>
    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 808f432:	2800      	cmp	r0, #0
 808f434:	f340 8090 	ble.w	808f558 <mbedtls_rsa_deduce_primes+0x1a8>
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 808f438:	4631      	mov	r1, r6
 808f43a:	4640      	mov	r0, r8
 808f43c:	f7fc fbf9 	bl	808bc32 <mbedtls_mpi_cmp_mpi>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 808f440:	2800      	cmp	r0, #0
 808f442:	f280 8089 	bge.w	808f558 <mbedtls_rsa_deduce_primes+0x1a8>

    /*
     * Initializations and temporary changes
     */

    mbedtls_mpi_init( &K );
 808f446:	a805      	add	r0, sp, #20
 808f448:	f7fc f98e 	bl	808b768 <mbedtls_mpi_init>
    mbedtls_mpi_init( &T );
 808f44c:	a802      	add	r0, sp, #8
 808f44e:	f7fc f98b 	bl	808b768 <mbedtls_mpi_init>

    /* T := DE - 1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, D,  E ) );
 808f452:	4642      	mov	r2, r8
 808f454:	4629      	mov	r1, r5
 808f456:	a802      	add	r0, sp, #8
 808f458:	f7fc fd4f 	bl	808befa <mbedtls_mpi_mul_mpi>
 808f45c:	4604      	mov	r4, r0
 808f45e:	2800      	cmp	r0, #0
 808f460:	d172      	bne.n	808f548 <mbedtls_rsa_deduce_primes+0x198>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &T, &T, 1 ) );
 808f462:	a902      	add	r1, sp, #8
 808f464:	2201      	movs	r2, #1
 808f466:	4608      	mov	r0, r1
 808f468:	f7fc fd31 	bl	808bece <mbedtls_mpi_sub_int>
 808f46c:	4604      	mov	r4, r0
 808f46e:	2800      	cmp	r0, #0
 808f470:	d16a      	bne.n	808f548 <mbedtls_rsa_deduce_primes+0x198>

    if( ( order = (uint16_t) mbedtls_mpi_lsb( &T ) ) == 0 )
 808f472:	a802      	add	r0, sp, #8
 808f474:	f7fc fa18 	bl	808b8a8 <mbedtls_mpi_lsb>
 808f478:	fa1f fa80 	uxth.w	sl, r0
 808f47c:	f1ba 0f00 	cmp.w	sl, #0
 808f480:	d102      	bne.n	808f488 <mbedtls_rsa_deduce_primes+0xd8>
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 808f482:	f06f 0403 	mvn.w	r4, #3
 808f486:	e05f      	b.n	808f548 <mbedtls_rsa_deduce_primes+0x198>
        goto cleanup;
    }

    /* After this operation, T holds the largest odd divisor of DE - 1. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &T, order ) );
 808f488:	4651      	mov	r1, sl
 808f48a:	a802      	add	r0, sp, #8
 808f48c:	f7fc faf2 	bl	808ba74 <mbedtls_mpi_shift_r>
 808f490:	4604      	mov	r4, r0
 808f492:	2800      	cmp	r0, #0
 808f494:	d158      	bne.n	808f548 <mbedtls_rsa_deduce_primes+0x198>
     * Actual work
     */

    /* Skip trying 2 if N == 1 mod 8 */
    attempt = 0;
    if( N->p[0] % 8 == 1 )
 808f496:	68b3      	ldr	r3, [r6, #8]
        attempt = 1;
 808f498:	681d      	ldr	r5, [r3, #0]
 808f49a:	f005 0507 	and.w	r5, r5, #7
 808f49e:	1e6b      	subs	r3, r5, #1
 808f4a0:	425d      	negs	r5, r3
 808f4a2:	415d      	adcs	r5, r3

    for( ; attempt < num_primes; ++attempt )
    {
        mbedtls_mpi_lset( &K, primes[attempt] );
 808f4a4:	ab16      	add	r3, sp, #88	; 0x58
 808f4a6:	442b      	add	r3, r5
 808f4a8:	f813 1c38 	ldrb.w	r1, [r3, #-56]
 808f4ac:	a805      	add	r0, sp, #20
 808f4ae:	f7fc f9ce 	bl	808b84e <mbedtls_mpi_lset>

        /* Check if gcd(K,N) = 1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 808f4b2:	4632      	mov	r2, r6
 808f4b4:	a905      	add	r1, sp, #20
 808f4b6:	4638      	mov	r0, r7
 808f4b8:	f7fd f9ac 	bl	808c814 <mbedtls_mpi_gcd>
 808f4bc:	4604      	mov	r4, r0
 808f4be:	2800      	cmp	r0, #0
 808f4c0:	d142      	bne.n	808f548 <mbedtls_rsa_deduce_primes+0x198>
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
 808f4c2:	2101      	movs	r1, #1
 808f4c4:	4638      	mov	r0, r7
 808f4c6:	f7fc fbf9 	bl	808bcbc <mbedtls_mpi_cmp_int>
 808f4ca:	b120      	cbz	r0, 808f4d6 <mbedtls_rsa_deduce_primes+0x126>
    /* Skip trying 2 if N == 1 mod 8 */
    attempt = 0;
    if( N->p[0] % 8 == 1 )
        attempt = 1;

    for( ; attempt < num_primes; ++attempt )
 808f4cc:	3501      	adds	r5, #1
 808f4ce:	b2ad      	uxth	r5, r5
 808f4d0:	2d36      	cmp	r5, #54	; 0x36
 808f4d2:	d1e7      	bne.n	808f4a4 <mbedtls_rsa_deduce_primes+0xf4>
 808f4d4:	e7d5      	b.n	808f482 <mbedtls_rsa_deduce_primes+0xd2>
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
            continue;

        /* Go through K^T + 1, K^(2T) + 1, K^(4T) + 1, ...
         * and check whether they have nontrivial GCD with N. */
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
 808f4d6:	a905      	add	r1, sp, #20
 808f4d8:	f8cd 9000 	str.w	r9, [sp]
 808f4dc:	4633      	mov	r3, r6
 808f4de:	aa02      	add	r2, sp, #8
 808f4e0:	4608      	mov	r0, r1
 808f4e2:	f7fc ff78 	bl	808c3d6 <mbedtls_mpi_exp_mod>
 808f4e6:	4604      	mov	r4, r0
 808f4e8:	bb70      	cbnz	r0, 808f548 <mbedtls_rsa_deduce_primes+0x198>
 808f4ea:	f04f 0801 	mov.w	r8, #1

        for( iter = 1; iter <= order; ++iter )
        {
            /* If we reach 1 prematurely, there's no point
             * in continuing to square K */
            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
 808f4ee:	2101      	movs	r1, #1
 808f4f0:	a805      	add	r0, sp, #20
 808f4f2:	f7fc fbe3 	bl	808bcbc <mbedtls_mpi_cmp_int>
 808f4f6:	b930      	cbnz	r0, 808f506 <mbedtls_rsa_deduce_primes+0x156>
         * we reached 1, or K holds primes[attempt]^(DE - 1) mod N, which must
         * be 1 if D,E,N were consistent.
         * Check if that's the case and abort if not, to avoid very long,
         * yet eventually failing, computations if N,D,E were not sane.
         */
        if( mbedtls_mpi_cmp_int( &K, 1 ) != 0 )
 808f4f8:	2101      	movs	r1, #1
 808f4fa:	a805      	add	r0, sp, #20
 808f4fc:	f7fc fbde 	bl	808bcbc <mbedtls_mpi_cmp_int>
 808f500:	2800      	cmp	r0, #0
 808f502:	d0e3      	beq.n	808f4cc <mbedtls_rsa_deduce_primes+0x11c>
 808f504:	e7bd      	b.n	808f482 <mbedtls_rsa_deduce_primes+0xd2>
            /* If we reach 1 prematurely, there's no point
             * in continuing to square K */
            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
                break;

            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
 808f506:	a905      	add	r1, sp, #20
 808f508:	2201      	movs	r2, #1
 808f50a:	4608      	mov	r0, r1
 808f50c:	f7fc fcc9 	bl	808bea2 <mbedtls_mpi_add_int>
 808f510:	4604      	mov	r4, r0
 808f512:	b9c8      	cbnz	r0, 808f548 <mbedtls_rsa_deduce_primes+0x198>
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 808f514:	4632      	mov	r2, r6
 808f516:	a905      	add	r1, sp, #20
 808f518:	4638      	mov	r0, r7
 808f51a:	f7fd f97b 	bl	808c814 <mbedtls_mpi_gcd>
 808f51e:	4604      	mov	r4, r0
 808f520:	b990      	cbnz	r0, 808f548 <mbedtls_rsa_deduce_primes+0x198>

            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 808f522:	2101      	movs	r1, #1
 808f524:	4638      	mov	r0, r7
 808f526:	f7fc fbc9 	bl	808bcbc <mbedtls_mpi_cmp_int>
 808f52a:	2801      	cmp	r0, #1
 808f52c:	d117      	bne.n	808f55e <mbedtls_rsa_deduce_primes+0x1ae>
                mbedtls_mpi_cmp_mpi( P, N ) == -1 )
 808f52e:	4631      	mov	r1, r6
 808f530:	4638      	mov	r0, r7
 808f532:	f7fc fb7e 	bl	808bc32 <mbedtls_mpi_cmp_mpi>
                break;

            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );

            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 808f536:	3001      	adds	r0, #1
 808f538:	d111      	bne.n	808f55e <mbedtls_rsa_deduce_primes+0x1ae>
                /*
                 * Have found a nontrivial divisor P of N.
                 * Set Q := N / P.
                 */

                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
 808f53a:	4621      	mov	r1, r4
 808f53c:	463b      	mov	r3, r7
 808f53e:	4632      	mov	r2, r6
 808f540:	4648      	mov	r0, r9
 808f542:	f7fc fd56 	bl	808bff2 <mbedtls_mpi_div_mpi>
 808f546:	4604      	mov	r4, r0

    ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;

cleanup:

    mbedtls_mpi_free( &K );
 808f548:	a805      	add	r0, sp, #20
 808f54a:	f7fc f914 	bl	808b776 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T );
 808f54e:	a802      	add	r0, sp, #8
 808f550:	f7fc f911 	bl	808b776 <mbedtls_mpi_free>
    return( ret );
 808f554:	4620      	mov	r0, r4
 808f556:	e021      	b.n	808f59c <mbedtls_rsa_deduce_primes+0x1ec>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
    {
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 808f558:	f06f 0003 	mvn.w	r0, #3
 808f55c:	e01e      	b.n	808f59c <mbedtls_rsa_deduce_primes+0x1ec>

                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
                goto cleanup;
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 808f55e:	a905      	add	r1, sp, #20
 808f560:	2201      	movs	r2, #1
 808f562:	4608      	mov	r0, r1
 808f564:	f7fc fcb3 	bl	808bece <mbedtls_mpi_sub_int>
 808f568:	4604      	mov	r4, r0
 808f56a:	2800      	cmp	r0, #0
 808f56c:	d1ec      	bne.n	808f548 <mbedtls_rsa_deduce_primes+0x198>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &K ) );
 808f56e:	aa05      	add	r2, sp, #20
 808f570:	4611      	mov	r1, r2
 808f572:	4610      	mov	r0, r2
 808f574:	f7fc fcc1 	bl	808befa <mbedtls_mpi_mul_mpi>
 808f578:	4604      	mov	r4, r0
 808f57a:	2800      	cmp	r0, #0
 808f57c:	d1e4      	bne.n	808f548 <mbedtls_rsa_deduce_primes+0x198>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, N ) );
 808f57e:	a905      	add	r1, sp, #20
 808f580:	4632      	mov	r2, r6
 808f582:	4608      	mov	r0, r1
 808f584:	f7fc fef5 	bl	808c372 <mbedtls_mpi_mod_mpi>
 808f588:	4604      	mov	r4, r0
 808f58a:	2800      	cmp	r0, #0
 808f58c:	d1dc      	bne.n	808f548 <mbedtls_rsa_deduce_primes+0x198>
         * and check whether they have nontrivial GCD with N. */
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
                             Q /* temporarily use Q for storing Montgomery
                                * multiplication helper values */ ) );

        for( iter = 1; iter <= order; ++iter )
 808f58e:	f108 0801 	add.w	r8, r8, #1
 808f592:	fa1f f888 	uxth.w	r8, r8
 808f596:	45c2      	cmp	sl, r8
 808f598:	d2a9      	bcs.n	808f4ee <mbedtls_rsa_deduce_primes+0x13e>
 808f59a:	e7ad      	b.n	808f4f8 <mbedtls_rsa_deduce_primes+0x148>
cleanup:

    mbedtls_mpi_free( &K );
    mbedtls_mpi_free( &T );
    return( ret );
}
 808f59c:	b016      	add	sp, #88	; 0x58
 808f59e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808f5a2:	bf00      	nop
 808f5a4:	080960f7 	.word	0x080960f7

0808f5a8 <mbedtls_rsa_deduce_private_exponent>:
 */
int mbedtls_rsa_deduce_private_exponent( mbedtls_mpi const *P,
                                         mbedtls_mpi const *Q,
                                         mbedtls_mpi const *E,
                                         mbedtls_mpi *D )
{
 808f5a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808f5ac:	4604      	mov	r4, r0
 808f5ae:	b086      	sub	sp, #24
 808f5b0:	460e      	mov	r6, r1
 808f5b2:	4617      	mov	r7, r2
    int ret = 0;
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
 808f5b4:	461d      	mov	r5, r3
 808f5b6:	b18b      	cbz	r3, 808f5dc <mbedtls_rsa_deduce_private_exponent+0x34>
 808f5b8:	2100      	movs	r1, #0
 808f5ba:	4618      	mov	r0, r3
 808f5bc:	f7fc fb7e 	bl	808bcbc <mbedtls_mpi_cmp_int>
 808f5c0:	4680      	mov	r8, r0
 808f5c2:	b958      	cbnz	r0, 808f5dc <mbedtls_rsa_deduce_private_exponent+0x34>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 808f5c4:	2101      	movs	r1, #1
 808f5c6:	4620      	mov	r0, r4
 808f5c8:	f7fc fb78 	bl	808bcbc <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 808f5cc:	2800      	cmp	r0, #0
 808f5ce:	dd05      	ble.n	808f5dc <mbedtls_rsa_deduce_private_exponent+0x34>
 808f5d0:	2101      	movs	r1, #1
 808f5d2:	4630      	mov	r0, r6
 808f5d4:	f7fc fb72 	bl	808bcbc <mbedtls_mpi_cmp_int>
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 808f5d8:	2800      	cmp	r0, #0
 808f5da:	dc02      	bgt.n	808f5e2 <mbedtls_rsa_deduce_private_exponent+0x3a>
{
    int ret = 0;
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 808f5dc:	f06f 0003 	mvn.w	r0, #3
 808f5e0:	e03c      	b.n	808f65c <mbedtls_rsa_deduce_private_exponent+0xb4>

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
        mbedtls_mpi_cmp_int( E, 0 ) == 0 )
 808f5e2:	4641      	mov	r1, r8
 808f5e4:	4638      	mov	r0, r7
 808f5e6:	f7fc fb69 	bl	808bcbc <mbedtls_mpi_cmp_int>

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 808f5ea:	2800      	cmp	r0, #0
 808f5ec:	d0f6      	beq.n	808f5dc <mbedtls_rsa_deduce_private_exponent+0x34>
        mbedtls_mpi_cmp_int( E, 0 ) == 0 )
    {
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    }

    mbedtls_mpi_init( &K );
 808f5ee:	4668      	mov	r0, sp
 808f5f0:	f7fc f8ba 	bl	808b768 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 808f5f4:	a803      	add	r0, sp, #12
 808f5f6:	f7fc f8b7 	bl	808b768 <mbedtls_mpi_init>

    /* Temporarily put K := P-1 and L := Q-1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 808f5fa:	4621      	mov	r1, r4
 808f5fc:	2201      	movs	r2, #1
 808f5fe:	4668      	mov	r0, sp
 808f600:	f7fc fc65 	bl	808bece <mbedtls_mpi_sub_int>
 808f604:	4604      	mov	r4, r0
 808f606:	bb10      	cbnz	r0, 808f64e <mbedtls_rsa_deduce_private_exponent+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 808f608:	2201      	movs	r2, #1
 808f60a:	4631      	mov	r1, r6
 808f60c:	a803      	add	r0, sp, #12
 808f60e:	f7fc fc5e 	bl	808bece <mbedtls_mpi_sub_int>
 808f612:	4604      	mov	r4, r0
 808f614:	b9d8      	cbnz	r0, 808f64e <mbedtls_rsa_deduce_private_exponent+0xa6>

    /* Temporarily put D := gcd(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( D, &K, &L ) );
 808f616:	aa03      	add	r2, sp, #12
 808f618:	4669      	mov	r1, sp
 808f61a:	4628      	mov	r0, r5
 808f61c:	f7fd f8fa 	bl	808c814 <mbedtls_mpi_gcd>
 808f620:	4604      	mov	r4, r0
 808f622:	b9a0      	cbnz	r0, 808f64e <mbedtls_rsa_deduce_private_exponent+0xa6>

    /* K := LCM(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &L ) );
 808f624:	aa03      	add	r2, sp, #12
 808f626:	4669      	mov	r1, sp
 808f628:	4668      	mov	r0, sp
 808f62a:	f7fc fc66 	bl	808befa <mbedtls_mpi_mul_mpi>
 808f62e:	4604      	mov	r4, r0
 808f630:	b968      	cbnz	r0, 808f64e <mbedtls_rsa_deduce_private_exponent+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &K, NULL, &K, D ) );
 808f632:	4601      	mov	r1, r0
 808f634:	462b      	mov	r3, r5
 808f636:	466a      	mov	r2, sp
 808f638:	4668      	mov	r0, sp
 808f63a:	f7fc fcda 	bl	808bff2 <mbedtls_mpi_div_mpi>
 808f63e:	4604      	mov	r4, r0
 808f640:	b928      	cbnz	r0, 808f64e <mbedtls_rsa_deduce_private_exponent+0xa6>

    /* Compute modular inverse of E in LCM(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( D, E, &K ) );
 808f642:	466a      	mov	r2, sp
 808f644:	4639      	mov	r1, r7
 808f646:	4628      	mov	r0, r5
 808f648:	f7fd f98c 	bl	808c964 <mbedtls_mpi_inv_mod>
 808f64c:	4604      	mov	r4, r0

cleanup:

    mbedtls_mpi_free( &K );
 808f64e:	4668      	mov	r0, sp
 808f650:	f7fc f891 	bl	808b776 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 808f654:	a803      	add	r0, sp, #12
 808f656:	f7fc f88e 	bl	808b776 <mbedtls_mpi_free>

    return( ret );
 808f65a:	4620      	mov	r0, r4
}
 808f65c:	b006      	add	sp, #24
 808f65e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0808f664 <mbedtls_rsa_validate_crt>:
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 808f664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808f668:	4699      	mov	r9, r3
 808f66a:	b087      	sub	sp, #28
 808f66c:	4604      	mov	r4, r0
    int ret = 0;

    mbedtls_mpi K, L;
    mbedtls_mpi_init( &K );
 808f66e:	4668      	mov	r0, sp
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 808f670:	460d      	mov	r5, r1
 808f672:	4690      	mov	r8, r2
 808f674:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 808f676:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    int ret = 0;

    mbedtls_mpi K, L;
    mbedtls_mpi_init( &K );
 808f678:	f7fc f876 	bl	808b768 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 808f67c:	a803      	add	r0, sp, #12
 808f67e:	f7fc f873 	bl	808b768 <mbedtls_mpi_init>

    /* Check that DP - D == 0 mod P - 1 */
    if( DP != NULL )
 808f682:	f1b9 0f00 	cmp.w	r9, #0
 808f686:	d101      	bne.n	808f68c <mbedtls_rsa_validate_crt+0x28>
            goto cleanup;
        }
    }

    /* Check that DQ - D == 0 mod Q - 1 */
    if( DQ != NULL )
 808f688:	b9f7      	cbnz	r7, 808f6c8 <mbedtls_rsa_validate_crt+0x64>
 808f68a:	e035      	b.n	808f6f8 <mbedtls_rsa_validate_crt+0x94>
    mbedtls_mpi_init( &L );

    /* Check that DP - D == 0 mod P - 1 */
    if( DP != NULL )
    {
        if( P == NULL )
 808f68c:	2c00      	cmp	r4, #0
 808f68e:	d058      	beq.n	808f742 <mbedtls_rsa_validate_crt+0xde>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 808f690:	2201      	movs	r2, #1
 808f692:	4621      	mov	r1, r4
 808f694:	4668      	mov	r0, sp
 808f696:	f7fc fc1a 	bl	808bece <mbedtls_mpi_sub_int>
 808f69a:	2800      	cmp	r0, #0
 808f69c:	d148      	bne.n	808f730 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DP, D ) );
 808f69e:	4642      	mov	r2, r8
 808f6a0:	4649      	mov	r1, r9
 808f6a2:	a803      	add	r0, sp, #12
 808f6a4:	f7fc fbdb 	bl	808be5e <mbedtls_mpi_sub_mpi>
 808f6a8:	2800      	cmp	r0, #0
 808f6aa:	d141      	bne.n	808f730 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 808f6ac:	a903      	add	r1, sp, #12
 808f6ae:	466a      	mov	r2, sp
 808f6b0:	4608      	mov	r0, r1
 808f6b2:	f7fc fe5e 	bl	808c372 <mbedtls_mpi_mod_mpi>
 808f6b6:	2800      	cmp	r0, #0
 808f6b8:	d13a      	bne.n	808f730 <mbedtls_rsa_validate_crt+0xcc>

        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 808f6ba:	4601      	mov	r1, r0
 808f6bc:	a803      	add	r0, sp, #12
 808f6be:	f7fc fafd 	bl	808bcbc <mbedtls_mpi_cmp_int>
 808f6c2:	2800      	cmp	r0, #0
 808f6c4:	d13f      	bne.n	808f746 <mbedtls_rsa_validate_crt+0xe2>
 808f6c6:	e7df      	b.n	808f688 <mbedtls_rsa_validate_crt+0x24>
    }

    /* Check that DQ - D == 0 mod Q - 1 */
    if( DQ != NULL )
    {
        if( Q == NULL )
 808f6c8:	b3dd      	cbz	r5, 808f742 <mbedtls_rsa_validate_crt+0xde>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1 ) );
 808f6ca:	2201      	movs	r2, #1
 808f6cc:	4629      	mov	r1, r5
 808f6ce:	4668      	mov	r0, sp
 808f6d0:	f7fc fbfd 	bl	808bece <mbedtls_mpi_sub_int>
 808f6d4:	bb60      	cbnz	r0, 808f730 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DQ, D ) );
 808f6d6:	4642      	mov	r2, r8
 808f6d8:	4639      	mov	r1, r7
 808f6da:	a803      	add	r0, sp, #12
 808f6dc:	f7fc fbbf 	bl	808be5e <mbedtls_mpi_sub_mpi>
 808f6e0:	bb30      	cbnz	r0, 808f730 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 808f6e2:	a903      	add	r1, sp, #12
 808f6e4:	466a      	mov	r2, sp
 808f6e6:	4608      	mov	r0, r1
 808f6e8:	f7fc fe43 	bl	808c372 <mbedtls_mpi_mod_mpi>
 808f6ec:	bb00      	cbnz	r0, 808f730 <mbedtls_rsa_validate_crt+0xcc>

        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 808f6ee:	4601      	mov	r1, r0
 808f6f0:	a803      	add	r0, sp, #12
 808f6f2:	f7fc fae3 	bl	808bcbc <mbedtls_mpi_cmp_int>
 808f6f6:	bb30      	cbnz	r0, 808f746 <mbedtls_rsa_validate_crt+0xe2>
            goto cleanup;
        }
    }

    /* Check that QP * Q - 1 == 0 mod P */
    if( QP != NULL )
 808f6f8:	b1c6      	cbz	r6, 808f72c <mbedtls_rsa_validate_crt+0xc8>
    {
        if( P == NULL || Q == NULL )
 808f6fa:	b314      	cbz	r4, 808f742 <mbedtls_rsa_validate_crt+0xde>
 808f6fc:	b30d      	cbz	r5, 808f742 <mbedtls_rsa_validate_crt+0xde>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, QP, Q ) );
 808f6fe:	462a      	mov	r2, r5
 808f700:	4631      	mov	r1, r6
 808f702:	4668      	mov	r0, sp
 808f704:	f7fc fbf9 	bl	808befa <mbedtls_mpi_mul_mpi>
 808f708:	b990      	cbnz	r0, 808f730 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 808f70a:	2201      	movs	r2, #1
 808f70c:	4669      	mov	r1, sp
 808f70e:	4668      	mov	r0, sp
 808f710:	f7fc fbdd 	bl	808bece <mbedtls_mpi_sub_int>
 808f714:	b960      	cbnz	r0, 808f730 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, P ) );
 808f716:	4622      	mov	r2, r4
 808f718:	4669      	mov	r1, sp
 808f71a:	4668      	mov	r0, sp
 808f71c:	f7fc fe29 	bl	808c372 <mbedtls_mpi_mod_mpi>
 808f720:	b930      	cbnz	r0, 808f730 <mbedtls_rsa_validate_crt+0xcc>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 808f722:	4601      	mov	r1, r0
 808f724:	4668      	mov	r0, sp
 808f726:	f7fc fac9 	bl	808bcbc <mbedtls_mpi_cmp_int>
 808f72a:	b960      	cbnz	r0, 808f746 <mbedtls_rsa_validate_crt+0xe2>
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 808f72c:	2400      	movs	r4, #0
 808f72e:	e00b      	b.n	808f748 <mbedtls_rsa_validate_crt+0xe4>
    }

cleanup:

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 &&
 808f730:	f510 4f84 	cmn.w	r0, #16896	; 0x4200
 808f734:	d007      	beq.n	808f746 <mbedtls_rsa_validate_crt+0xe2>
        ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED &&
 808f736:	f510 4f81 	cmn.w	r0, #16512	; 0x4080
 808f73a:	d002      	beq.n	808f742 <mbedtls_rsa_validate_crt+0xde>
        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 808f73c:	f5a0 4484 	sub.w	r4, r0, #16896	; 0x4200
 808f740:	e002      	b.n	808f748 <mbedtls_rsa_validate_crt+0xe4>
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 808f742:	4c06      	ldr	r4, [pc, #24]	; (808f75c <mbedtls_rsa_validate_crt+0xf8>)
 808f744:	e000      	b.n	808f748 <mbedtls_rsa_validate_crt+0xe4>
 808f746:	4c06      	ldr	r4, [pc, #24]	; (808f760 <mbedtls_rsa_validate_crt+0xfc>)
        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
    }

    mbedtls_mpi_free( &K );
 808f748:	4668      	mov	r0, sp
 808f74a:	f7fc f814 	bl	808b776 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 808f74e:	a803      	add	r0, sp, #12
 808f750:	f7fc f811 	bl	808b776 <mbedtls_mpi_free>

    return( ret );
}
 808f754:	4620      	mov	r0, r4
 808f756:	b007      	add	sp, #28
 808f758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808f75c:	ffffbf80 	.word	0xffffbf80
 808f760:	ffffbe00 	.word	0xffffbe00

0808f764 <mbedtls_rsa_validate_params>:
int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,
                                 const mbedtls_mpi *E,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
 808f764:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808f768:	4688      	mov	r8, r1
 808f76a:	b087      	sub	sp, #28
 808f76c:	4605      	mov	r5, r0
    int ret = 0;
    mbedtls_mpi K, L;

    mbedtls_mpi_init( &K );
 808f76e:	4668      	mov	r0, sp
int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,
                                 const mbedtls_mpi *E,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
 808f770:	4691      	mov	r9, r2
 808f772:	461e      	mov	r6, r3
 808f774:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    int ret = 0;
    mbedtls_mpi K, L;

    mbedtls_mpi_init( &K );
 808f776:	f7fb fff7 	bl	808b768 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 808f77a:	a803      	add	r0, sp, #12
 808f77c:	f7fb fff4 	bl	808b768 <mbedtls_mpi_init>

    /*
     * Step 2: Check that 1 < N = P * Q
     */

    if( P != NULL && Q != NULL && N != NULL )
 808f780:	f1b8 0f00 	cmp.w	r8, #0
 808f784:	d018      	beq.n	808f7b8 <mbedtls_rsa_validate_params+0x54>
 808f786:	f1b9 0f00 	cmp.w	r9, #0
 808f78a:	d015      	beq.n	808f7b8 <mbedtls_rsa_validate_params+0x54>
 808f78c:	b90d      	cbnz	r5, 808f792 <mbedtls_rsa_validate_params+0x2e>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 808f78e:	b9de      	cbnz	r6, 808f7c8 <mbedtls_rsa_validate_params+0x64>
 808f790:	e018      	b.n	808f7c4 <mbedtls_rsa_validate_params+0x60>
     * Step 2: Check that 1 < N = P * Q
     */

    if( P != NULL && Q != NULL && N != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
 808f792:	464a      	mov	r2, r9
 808f794:	4641      	mov	r1, r8
 808f796:	4668      	mov	r0, sp
 808f798:	f7fc fbaf 	bl	808befa <mbedtls_mpi_mul_mpi>
 808f79c:	4604      	mov	r4, r0
 808f79e:	bb68      	cbnz	r0, 808f7fc <mbedtls_rsa_validate_params+0x98>
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 808f7a0:	2101      	movs	r1, #1
 808f7a2:	4628      	mov	r0, r5
 808f7a4:	f7fc fa8a 	bl	808bcbc <mbedtls_mpi_cmp_int>
 808f7a8:	2800      	cmp	r0, #0
 808f7aa:	dd26      	ble.n	808f7fa <mbedtls_rsa_validate_params+0x96>
            mbedtls_mpi_cmp_mpi( &K, N ) != 0 )
 808f7ac:	4629      	mov	r1, r5
 808f7ae:	4668      	mov	r0, sp
 808f7b0:	f7fc fa3f 	bl	808bc32 <mbedtls_mpi_cmp_mpi>
     */

    if( P != NULL && Q != NULL && N != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 808f7b4:	bb08      	cbnz	r0, 808f7fa <mbedtls_rsa_validate_params+0x96>
 808f7b6:	e016      	b.n	808f7e6 <mbedtls_rsa_validate_params+0x82>

    /*
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
 808f7b8:	b125      	cbz	r5, 808f7c4 <mbedtls_rsa_validate_params+0x60>
 808f7ba:	b9b6      	cbnz	r6, 808f7ea <mbedtls_rsa_validate_params+0x86>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 808f7bc:	f1b8 0f00 	cmp.w	r8, #0
 808f7c0:	f040 808a 	bne.w	808f8d8 <mbedtls_rsa_validate_params+0x174>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 808f7c4:	2400      	movs	r4, #0
 808f7c6:	e019      	b.n	808f7fc <mbedtls_rsa_validate_params+0x98>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 808f7c8:	2f00      	cmp	r7, #0
 808f7ca:	d0fb      	beq.n	808f7c4 <mbedtls_rsa_validate_params+0x60>
    {
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 808f7cc:	2101      	movs	r1, #1
 808f7ce:	4640      	mov	r0, r8
 808f7d0:	f7fc fa74 	bl	808bcbc <mbedtls_mpi_cmp_int>
 808f7d4:	2800      	cmp	r0, #0
 808f7d6:	dd10      	ble.n	808f7fa <mbedtls_rsa_validate_params+0x96>
            mbedtls_mpi_cmp_int( Q, 1 ) <= 0 )
 808f7d8:	2101      	movs	r1, #1
 808f7da:	4648      	mov	r0, r9
 808f7dc:	f7fc fa6e 	bl	808bcbc <mbedtls_mpi_cmp_int>
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
    {
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 808f7e0:	2800      	cmp	r0, #0
 808f7e2:	dc19      	bgt.n	808f818 <mbedtls_rsa_validate_params+0xb4>
 808f7e4:	e009      	b.n	808f7fa <mbedtls_rsa_validate_params+0x96>

    /*
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
 808f7e6:	2e00      	cmp	r6, #0
 808f7e8:	d0ec      	beq.n	808f7c4 <mbedtls_rsa_validate_params+0x60>
 808f7ea:	2f00      	cmp	r7, #0
 808f7ec:	d0e6      	beq.n	808f7bc <mbedtls_rsa_validate_params+0x58>
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 808f7ee:	2101      	movs	r1, #1
 808f7f0:	4630      	mov	r0, r6
 808f7f2:	f7fc fa63 	bl	808bcbc <mbedtls_mpi_cmp_int>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 808f7f6:	2800      	cmp	r0, #0
 808f7f8:	dc5b      	bgt.n	808f8b2 <mbedtls_rsa_validate_params+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 808f7fa:	4c3c      	ldr	r4, [pc, #240]	; (808f8ec <mbedtls_rsa_validate_params+0x188>)
        }
    }

cleanup:

    mbedtls_mpi_free( &K );
 808f7fc:	4668      	mov	r0, sp
 808f7fe:	f7fb ffba 	bl	808b776 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 808f802:	a803      	add	r0, sp, #12
 808f804:	f7fb ffb7 	bl	808b776 <mbedtls_mpi_free>

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 && ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED )
 808f808:	2c00      	cmp	r4, #0
 808f80a:	d06a      	beq.n	808f8e2 <mbedtls_rsa_validate_params+0x17e>
 808f80c:	f514 4f84 	cmn.w	r4, #16896	; 0x4200
 808f810:	d067      	beq.n	808f8e2 <mbedtls_rsa_validate_params+0x17e>
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 808f812:	f5a4 4484 	sub.w	r4, r4, #16896	; 0x4200
    }

    return( ret );
 808f816:	e064      	b.n	808f8e2 <mbedtls_rsa_validate_params+0x17e>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
            goto cleanup;
        }

        /* Compute DE-1 mod P-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 808f818:	463a      	mov	r2, r7
 808f81a:	4631      	mov	r1, r6
 808f81c:	4668      	mov	r0, sp
 808f81e:	f7fc fb6c 	bl	808befa <mbedtls_mpi_mul_mpi>
 808f822:	4604      	mov	r4, r0
 808f824:	2800      	cmp	r0, #0
 808f826:	d1e9      	bne.n	808f7fc <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 808f828:	2201      	movs	r2, #1
 808f82a:	4669      	mov	r1, sp
 808f82c:	4668      	mov	r0, sp
 808f82e:	f7fc fb4e 	bl	808bece <mbedtls_mpi_sub_int>
 808f832:	4604      	mov	r4, r0
 808f834:	2800      	cmp	r0, #0
 808f836:	d1e1      	bne.n	808f7fc <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, P, 1 ) );
 808f838:	2201      	movs	r2, #1
 808f83a:	4641      	mov	r1, r8
 808f83c:	a803      	add	r0, sp, #12
 808f83e:	f7fc fb46 	bl	808bece <mbedtls_mpi_sub_int>
 808f842:	4604      	mov	r4, r0
 808f844:	2800      	cmp	r0, #0
 808f846:	d1d9      	bne.n	808f7fc <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 808f848:	aa03      	add	r2, sp, #12
 808f84a:	4669      	mov	r1, sp
 808f84c:	4668      	mov	r0, sp
 808f84e:	f7fc fd90 	bl	808c372 <mbedtls_mpi_mod_mpi>
 808f852:	4604      	mov	r4, r0
 808f854:	2800      	cmp	r0, #0
 808f856:	d1d1      	bne.n	808f7fc <mbedtls_rsa_validate_params+0x98>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 808f858:	4601      	mov	r1, r0
 808f85a:	4668      	mov	r0, sp
 808f85c:	f7fc fa2e 	bl	808bcbc <mbedtls_mpi_cmp_int>
 808f860:	2800      	cmp	r0, #0
 808f862:	d1ca      	bne.n	808f7fa <mbedtls_rsa_validate_params+0x96>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
            goto cleanup;
        }

        /* Compute DE-1 mod Q-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 808f864:	463a      	mov	r2, r7
 808f866:	4631      	mov	r1, r6
 808f868:	4668      	mov	r0, sp
 808f86a:	f7fc fb46 	bl	808befa <mbedtls_mpi_mul_mpi>
 808f86e:	4604      	mov	r4, r0
 808f870:	2800      	cmp	r0, #0
 808f872:	d1c3      	bne.n	808f7fc <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 808f874:	2201      	movs	r2, #1
 808f876:	4669      	mov	r1, sp
 808f878:	4668      	mov	r0, sp
 808f87a:	f7fc fb28 	bl	808bece <mbedtls_mpi_sub_int>
 808f87e:	4604      	mov	r4, r0
 808f880:	2800      	cmp	r0, #0
 808f882:	d1bb      	bne.n	808f7fc <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 808f884:	2201      	movs	r2, #1
 808f886:	4649      	mov	r1, r9
 808f888:	a803      	add	r0, sp, #12
 808f88a:	f7fc fb20 	bl	808bece <mbedtls_mpi_sub_int>
 808f88e:	4604      	mov	r4, r0
 808f890:	2800      	cmp	r0, #0
 808f892:	d1b3      	bne.n	808f7fc <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 808f894:	aa03      	add	r2, sp, #12
 808f896:	4669      	mov	r1, sp
 808f898:	4668      	mov	r0, sp
 808f89a:	f7fc fd6a 	bl	808c372 <mbedtls_mpi_mod_mpi>
 808f89e:	4604      	mov	r4, r0
 808f8a0:	2800      	cmp	r0, #0
 808f8a2:	d1ab      	bne.n	808f7fc <mbedtls_rsa_validate_params+0x98>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 808f8a4:	4601      	mov	r1, r0
 808f8a6:	4668      	mov	r0, sp
 808f8a8:	f7fc fa08 	bl	808bcbc <mbedtls_mpi_cmp_int>
 808f8ac:	2800      	cmp	r0, #0
 808f8ae:	d089      	beq.n	808f7c4 <mbedtls_rsa_validate_params+0x60>
 808f8b0:	e7a3      	b.n	808f7fa <mbedtls_rsa_validate_params+0x96>
     */

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 808f8b2:	2101      	movs	r1, #1
 808f8b4:	4638      	mov	r0, r7
 808f8b6:	f7fc fa01 	bl	808bcbc <mbedtls_mpi_cmp_int>
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 808f8ba:	2800      	cmp	r0, #0
 808f8bc:	dd9d      	ble.n	808f7fa <mbedtls_rsa_validate_params+0x96>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 808f8be:	4629      	mov	r1, r5
 808f8c0:	4630      	mov	r0, r6
 808f8c2:	f7fc f9b6 	bl	808bc32 <mbedtls_mpi_cmp_mpi>
     */

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 808f8c6:	2800      	cmp	r0, #0
 808f8c8:	da97      	bge.n	808f7fa <mbedtls_rsa_validate_params+0x96>
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
             mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 808f8ca:	4629      	mov	r1, r5
 808f8cc:	4638      	mov	r0, r7
 808f8ce:	f7fc f9b0 	bl	808bc32 <mbedtls_mpi_cmp_mpi>

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 808f8d2:	2800      	cmp	r0, #0
 808f8d4:	da91      	bge.n	808f7fa <mbedtls_rsa_validate_params+0x96>
 808f8d6:	e771      	b.n	808f7bc <mbedtls_rsa_validate_params+0x58>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 808f8d8:	f1b9 0f00 	cmp.w	r9, #0
 808f8dc:	f47f af57 	bne.w	808f78e <mbedtls_rsa_validate_params+0x2a>
 808f8e0:	e770      	b.n	808f7c4 <mbedtls_rsa_validate_params+0x60>
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
    }

    return( ret );
}
 808f8e2:	4620      	mov	r0, r4
 808f8e4:	b007      	add	sp, #28
 808f8e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808f8ea:	bf00      	nop
 808f8ec:	ffffbe00 	.word	0xffffbe00

0808f8f0 <mbedtls_rsa_deduce_crt>:

int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
                            const mbedtls_mpi *D, mbedtls_mpi *DP,
                            mbedtls_mpi *DQ, mbedtls_mpi *QP )
{
 808f8f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 808f8f4:	469a      	mov	sl, r3
 808f8f6:	4607      	mov	r7, r0
    int ret = 0;
    mbedtls_mpi K;
    mbedtls_mpi_init( &K );
 808f8f8:	a801      	add	r0, sp, #4
}

int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
                            const mbedtls_mpi *D, mbedtls_mpi *DP,
                            mbedtls_mpi *DQ, mbedtls_mpi *QP )
{
 808f8fa:	460e      	mov	r6, r1
 808f8fc:	4691      	mov	r9, r2
 808f8fe:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 808f902:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    int ret = 0;
    mbedtls_mpi K;
    mbedtls_mpi_init( &K );
 808f904:	f7fb ff30 	bl	808b768 <mbedtls_mpi_init>

    /* DP = D mod P-1 */
    if( DP != NULL )
 808f908:	f1ba 0f00 	cmp.w	sl, #0
 808f90c:	d103      	bne.n	808f916 <mbedtls_rsa_deduce_crt+0x26>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
    }

    /* DQ = D mod Q-1 */
    if( DQ != NULL )
 808f90e:	f1b8 0f00 	cmp.w	r8, #0
 808f912:	d110      	bne.n	808f936 <mbedtls_rsa_deduce_crt+0x46>
 808f914:	e01d      	b.n	808f952 <mbedtls_rsa_deduce_crt+0x62>
    mbedtls_mpi_init( &K );

    /* DP = D mod P-1 */
    if( DP != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
 808f916:	2201      	movs	r2, #1
 808f918:	4639      	mov	r1, r7
 808f91a:	a801      	add	r0, sp, #4
 808f91c:	f7fc fad7 	bl	808bece <mbedtls_mpi_sub_int>
 808f920:	4604      	mov	r4, r0
 808f922:	b9f8      	cbnz	r0, 808f964 <mbedtls_rsa_deduce_crt+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
 808f924:	aa01      	add	r2, sp, #4
 808f926:	4649      	mov	r1, r9
 808f928:	4650      	mov	r0, sl
 808f92a:	f7fc fd22 	bl	808c372 <mbedtls_mpi_mod_mpi>
 808f92e:	4604      	mov	r4, r0
 808f930:	2800      	cmp	r0, #0
 808f932:	d0ec      	beq.n	808f90e <mbedtls_rsa_deduce_crt+0x1e>
 808f934:	e016      	b.n	808f964 <mbedtls_rsa_deduce_crt+0x74>
    }

    /* DQ = D mod Q-1 */
    if( DQ != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );
 808f936:	2201      	movs	r2, #1
 808f938:	4631      	mov	r1, r6
 808f93a:	a801      	add	r0, sp, #4
 808f93c:	f7fc fac7 	bl	808bece <mbedtls_mpi_sub_int>
 808f940:	4604      	mov	r4, r0
 808f942:	b978      	cbnz	r0, 808f964 <mbedtls_rsa_deduce_crt+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );
 808f944:	aa01      	add	r2, sp, #4
 808f946:	4649      	mov	r1, r9
 808f948:	4640      	mov	r0, r8
 808f94a:	f7fc fd12 	bl	808c372 <mbedtls_mpi_mod_mpi>
 808f94e:	4604      	mov	r4, r0
 808f950:	b940      	cbnz	r0, 808f964 <mbedtls_rsa_deduce_crt+0x74>
    }

    /* QP = Q^{-1} mod P */
    if( QP != NULL )
 808f952:	b90d      	cbnz	r5, 808f958 <mbedtls_rsa_deduce_crt+0x68>
 808f954:	462c      	mov	r4, r5
 808f956:	e005      	b.n	808f964 <mbedtls_rsa_deduce_crt+0x74>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( QP, Q, P ) );
 808f958:	463a      	mov	r2, r7
 808f95a:	4631      	mov	r1, r6
 808f95c:	4628      	mov	r0, r5
 808f95e:	f7fd f801 	bl	808c964 <mbedtls_mpi_inv_mod>
 808f962:	4604      	mov	r4, r0
    }

cleanup:
    mbedtls_mpi_free( &K );
 808f964:	a801      	add	r0, sp, #4
 808f966:	f7fb ff06 	bl	808b776 <mbedtls_mpi_free>

    return( ret );
}
 808f96a:	4620      	mov	r0, r4
 808f96c:	b004      	add	sp, #16
 808f96e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808f972 <_ZL15mbedtls_zeroizePvj>:
#define mbedtls_printf printf
#endif /* MBEDTLS_PLATFORM_C */
#endif /* MBEDTLS_SELF_TEST */

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 808f972:	4401      	add	r1, r0
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808f974:	2300      	movs	r3, #0
 808f976:	4288      	cmp	r0, r1
 808f978:	d002      	beq.n	808f980 <_ZL15mbedtls_zeroizePvj+0xe>
 808f97a:	7003      	strb	r3, [r0, #0]
 808f97c:	3001      	adds	r0, #1
 808f97e:	e7fa      	b.n	808f976 <_ZL15mbedtls_zeroizePvj+0x4>
 808f980:	4770      	bx	lr

0808f982 <_ZL15block_cipher_dfPhPKhj>:
    ctx->reseed_interval = interval;
}

static int block_cipher_df( unsigned char *output,
                            const unsigned char *data, size_t data_len )
{
 808f982:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = 0;

    int i, j;
    size_t buf_len, use_len;

    if( data_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )
 808f986:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
    ctx->reseed_interval = interval;
}

static int block_cipher_df( unsigned char *output,
                            const unsigned char *data, size_t data_len )
{
 808f98a:	f5ad 7d46 	sub.w	sp, sp, #792	; 0x318
 808f98e:	4607      	mov	r7, r0
 808f990:	460e      	mov	r6, r1
 808f992:	4615      	mov	r5, r2
    int ret = 0;

    int i, j;
    size_t buf_len, use_len;

    if( data_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )
 808f994:	f200 80a2 	bhi.w	808fadc <_ZL15block_cipher_dfPhPKhj+0x15a>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );

    memset( buf, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT + MBEDTLS_CTR_DRBG_BLOCKSIZE + 16 );
 808f998:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 808f99c:	2100      	movs	r1, #0
 808f99e:	a85e      	add	r0, sp, #376	; 0x178
 808f9a0:	f004 f913 	bl	8093bca <memset>
    mbedtls_aes_init( &aes_ctx );
 808f9a4:	a818      	add	r0, sp, #96	; 0x60
 808f9a6:	f7fd fb5f 	bl	808d068 <mbedtls_aes_init>
     *     (Total is padded to a multiple of 16-bytes with zeroes)
     */
    p = buf + MBEDTLS_CTR_DRBG_BLOCKSIZE;
    *p++ = ( data_len >> 24 ) & 0xff;
    *p++ = ( data_len >> 16 ) & 0xff;
    *p++ = ( data_len >> 8  ) & 0xff;
 808f9aa:	0a2b      	lsrs	r3, r5, #8
 808f9ac:	f88d 318a 	strb.w	r3, [sp, #394]	; 0x18a
    *p++ = ( data_len       ) & 0xff;
    p += 3;
    *p++ = MBEDTLS_CTR_DRBG_SEEDLEN;
 808f9b0:	2330      	movs	r3, #48	; 0x30
 808f9b2:	f88d 318f 	strb.w	r3, [sp, #399]	; 0x18f
    memcpy( p, data, data_len );
 808f9b6:	ab64      	add	r3, sp, #400	; 0x190
     * S = Length input string (in 32-bits) || Length of output (in 32-bits) ||
     *     data || 0x80
     *     (Total is padded to a multiple of 16-bytes with zeroes)
     */
    p = buf + MBEDTLS_CTR_DRBG_BLOCKSIZE;
    *p++ = ( data_len >> 24 ) & 0xff;
 808f9b8:	2400      	movs	r4, #0
    *p++ = ( data_len >> 16 ) & 0xff;
    *p++ = ( data_len >> 8  ) & 0xff;
    *p++ = ( data_len       ) & 0xff;
    p += 3;
    *p++ = MBEDTLS_CTR_DRBG_SEEDLEN;
    memcpy( p, data, data_len );
 808f9ba:	462a      	mov	r2, r5
 808f9bc:	4618      	mov	r0, r3
 808f9be:	4631      	mov	r1, r6
     * S = Length input string (in 32-bits) || Length of output (in 32-bits) ||
     *     data || 0x80
     *     (Total is padded to a multiple of 16-bytes with zeroes)
     */
    p = buf + MBEDTLS_CTR_DRBG_BLOCKSIZE;
    *p++ = ( data_len >> 24 ) & 0xff;
 808f9c0:	f88d 4188 	strb.w	r4, [sp, #392]	; 0x188
    *p++ = ( data_len >> 16 ) & 0xff;
 808f9c4:	f88d 4189 	strb.w	r4, [sp, #393]	; 0x189
    *p++ = ( data_len >> 8  ) & 0xff;
    *p++ = ( data_len       ) & 0xff;
 808f9c8:	f88d 518b 	strb.w	r5, [sp, #395]	; 0x18b
    p += 3;
    *p++ = MBEDTLS_CTR_DRBG_SEEDLEN;
    memcpy( p, data, data_len );
 808f9cc:	f004 f8d7 	bl	8093b7e <memcpy>
    p[data_len] = 0x80;

    buf_len = MBEDTLS_CTR_DRBG_BLOCKSIZE + 8 + data_len + 1;

    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
 808f9d0:	4623      	mov	r3, r4
    *p++ = ( data_len >> 8  ) & 0xff;
    *p++ = ( data_len       ) & 0xff;
    p += 3;
    *p++ = MBEDTLS_CTR_DRBG_SEEDLEN;
    memcpy( p, data, data_len );
    p[data_len] = 0x80;
 808f9d2:	2280      	movs	r2, #128	; 0x80
 808f9d4:	5542      	strb	r2, [r0, r5]

    buf_len = MBEDTLS_CTR_DRBG_BLOCKSIZE + 8 + data_len + 1;

    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
        key[i] = i;
 808f9d6:	f10d 0810 	add.w	r8, sp, #16
 808f9da:	f803 3008 	strb.w	r3, [r3, r8]
    memcpy( p, data, data_len );
    p[data_len] = 0x80;

    buf_len = MBEDTLS_CTR_DRBG_BLOCKSIZE + 8 + data_len + 1;

    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
 808f9de:	3301      	adds	r3, #1
 808f9e0:	2b20      	cmp	r3, #32
 808f9e2:	d1fa      	bne.n	808f9da <_ZL15block_cipher_dfPhPKhj+0x58>
        key[i] = i;

    if( ( ret = mbedtls_aes_setkey_enc( &aes_ctx, key, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 808f9e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 808f9e8:	4641      	mov	r1, r8
 808f9ea:	a818      	add	r0, sp, #96	; 0x60
 808f9ec:	f7fd fb4c 	bl	808d088 <mbedtls_aes_setkey_enc>
 808f9f0:	4604      	mov	r4, r0
 808f9f2:	2800      	cmp	r0, #0
 808f9f4:	d157      	bne.n	808faa6 <_ZL15block_cipher_dfPhPKhj+0x124>
    p += 3;
    *p++ = MBEDTLS_CTR_DRBG_SEEDLEN;
    memcpy( p, data, data_len );
    p[data_len] = 0x80;

    buf_len = MBEDTLS_CTR_DRBG_BLOCKSIZE + 8 + data_len + 1;
 808f9f6:	4606      	mov	r6, r0
 808f9f8:	3519      	adds	r5, #25
     * Reduce data to MBEDTLS_CTR_DRBG_SEEDLEN bytes of data
     */
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
    {
        p = buf;
        memset( chain, 0, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 808f9fa:	2210      	movs	r2, #16
 808f9fc:	2100      	movs	r1, #0
 808f9fe:	4668      	mov	r0, sp
 808fa00:	f004 f8e3 	bl	8093bca <memset>
        use_len = buf_len;
 808fa04:	46a9      	mov	r9, r5
 808fa06:	f20d 1a77 	addw	sl, sp, #375	; 0x177
 808fa0a:	f10d 33ff 	add.w	r3, sp, #4294967295
 808fa0e:	f10a 0110 	add.w	r1, sl, #16

        while( use_len > 0 )
        {
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
                chain[i] ^= p[i];
 808fa12:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 808fa16:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 808fa1a:	4042      	eors	r2, r0
        memset( chain, 0, MBEDTLS_CTR_DRBG_BLOCKSIZE );
        use_len = buf_len;

        while( use_len > 0 )
        {
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
 808fa1c:	458a      	cmp	sl, r1
                chain[i] ^= p[i];
 808fa1e:	701a      	strb	r2, [r3, #0]
        memset( chain, 0, MBEDTLS_CTR_DRBG_BLOCKSIZE );
        use_len = buf_len;

        while( use_len > 0 )
        {
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
 808fa20:	d1f7      	bne.n	808fa12 <_ZL15block_cipher_dfPhPKhj+0x90>
                chain[i] ^= p[i];
            p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
            use_len -= ( use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE ) ?
                       MBEDTLS_CTR_DRBG_BLOCKSIZE : use_len;
 808fa22:	f1b9 0f10 	cmp.w	r9, #16

            if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, chain, chain ) ) != 0 )
 808fa26:	466b      	mov	r3, sp
 808fa28:	466a      	mov	r2, sp
 808fa2a:	f04f 0101 	mov.w	r1, #1
 808fa2e:	a818      	add	r0, sp, #96	; 0x60
        {
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
                chain[i] ^= p[i];
            p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
            use_len -= ( use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE ) ?
                       MBEDTLS_CTR_DRBG_BLOCKSIZE : use_len;
 808fa30:	bf94      	ite	ls
 808fa32:	ebc9 0909 	rsbls	r9, r9, r9
 808fa36:	f1a9 0910 	subhi.w	r9, r9, #16

            if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, chain, chain ) ) != 0 )
 808fa3a:	f7fe f82b 	bl	808da94 <mbedtls_aes_crypt_ecb>
 808fa3e:	4604      	mov	r4, r0
 808fa40:	bb88      	cbnz	r0, 808faa6 <_ZL15block_cipher_dfPhPKhj+0x124>
    {
        p = buf;
        memset( chain, 0, MBEDTLS_CTR_DRBG_BLOCKSIZE );
        use_len = buf_len;

        while( use_len > 0 )
 808fa42:	f1b9 0f00 	cmp.w	r9, #0
 808fa46:	d1e0      	bne.n	808fa0a <_ZL15block_cipher_dfPhPKhj+0x88>
            {
                goto exit;
            }
        }

        memcpy( tmp + j, chain, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 808fa48:	466c      	mov	r4, sp
 808fa4a:	ab0c      	add	r3, sp, #48	; 0x30
 808fa4c:	18f2      	adds	r2, r6, r3
 808fa4e:	4623      	mov	r3, r4
 808fa50:	cb03      	ldmia	r3!, {r0, r1}
 808fa52:	4543      	cmp	r3, r8
 808fa54:	6010      	str	r0, [r2, #0]
 808fa56:	6051      	str	r1, [r2, #4]
 808fa58:	461c      	mov	r4, r3
 808fa5a:	f102 0208 	add.w	r2, r2, #8
 808fa5e:	d1f6      	bne.n	808fa4e <_ZL15block_cipher_dfPhPKhj+0xcc>

        /*
         * Update IV
         */
        buf[3]++;
 808fa60:	f89d 317b 	ldrb.w	r3, [sp, #379]	; 0x17b
    }

    /*
     * Reduce data to MBEDTLS_CTR_DRBG_SEEDLEN bytes of data
     */
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 808fa64:	3610      	adds	r6, #16
        memcpy( tmp + j, chain, MBEDTLS_CTR_DRBG_BLOCKSIZE );

        /*
         * Update IV
         */
        buf[3]++;
 808fa66:	3301      	adds	r3, #1
    }

    /*
     * Reduce data to MBEDTLS_CTR_DRBG_SEEDLEN bytes of data
     */
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 808fa68:	2e30      	cmp	r6, #48	; 0x30
        memcpy( tmp + j, chain, MBEDTLS_CTR_DRBG_BLOCKSIZE );

        /*
         * Update IV
         */
        buf[3]++;
 808fa6a:	f88d 317b 	strb.w	r3, [sp, #379]	; 0x17b
    }

    /*
     * Reduce data to MBEDTLS_CTR_DRBG_SEEDLEN bytes of data
     */
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 808fa6e:	d1c4      	bne.n	808f9fa <_ZL15block_cipher_dfPhPKhj+0x78>
    }

    /*
     * Do final encryption with reduced data
     */
    if( ( ret = mbedtls_aes_setkey_enc( &aes_ctx, tmp, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 808fa70:	f44f 7280 	mov.w	r2, #256	; 0x100
 808fa74:	a90c      	add	r1, sp, #48	; 0x30
 808fa76:	a818      	add	r0, sp, #96	; 0x60
 808fa78:	f7fd fb06 	bl	808d088 <mbedtls_aes_setkey_enc>
 808fa7c:	4604      	mov	r4, r0
 808fa7e:	b990      	cbnz	r0, 808faa6 <_ZL15block_cipher_dfPhPKhj+0x124>
 808fa80:	463d      	mov	r5, r7
 808fa82:	f107 0930 	add.w	r9, r7, #48	; 0x30
    iv = tmp + MBEDTLS_CTR_DRBG_KEYSIZE;
    p = output;

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
    {
        if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, iv, iv ) ) != 0 )
 808fa86:	ae14      	add	r6, sp, #80	; 0x50
 808fa88:	4633      	mov	r3, r6
 808fa8a:	4632      	mov	r2, r6
 808fa8c:	2101      	movs	r1, #1
 808fa8e:	a818      	add	r0, sp, #96	; 0x60
 808fa90:	f7fe f800 	bl	808da94 <mbedtls_aes_crypt_ecb>
 808fa94:	4604      	mov	r4, r0
 808fa96:	b930      	cbnz	r0, 808faa6 <_ZL15block_cipher_dfPhPKhj+0x124>
        {
            goto exit;
        }
        memcpy( p, iv, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 808fa98:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 808fa9c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
 808faa0:	3510      	adds	r5, #16
        goto exit;
    }
    iv = tmp + MBEDTLS_CTR_DRBG_KEYSIZE;
    p = output;

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 808faa2:	45a9      	cmp	r9, r5
 808faa4:	d1f0      	bne.n	808fa88 <_ZL15block_cipher_dfPhPKhj+0x106>
        }
        memcpy( p, iv, MBEDTLS_CTR_DRBG_BLOCKSIZE );
        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
    }
exit:
    mbedtls_aes_free( &aes_ctx );
 808faa6:	a818      	add	r0, sp, #96	; 0x60
 808faa8:	f7fd fae3 	bl	808d072 <mbedtls_aes_free>
    /*
    * tidy up the stack
    */
    mbedtls_zeroize( buf, sizeof( buf ) );
 808faac:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 808fab0:	a85e      	add	r0, sp, #376	; 0x178
 808fab2:	f7ff ff5e 	bl	808f972 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( tmp, sizeof( tmp ) );
 808fab6:	2130      	movs	r1, #48	; 0x30
 808fab8:	eb0d 0001 	add.w	r0, sp, r1
 808fabc:	f7ff ff59 	bl	808f972 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( key, sizeof( key ) );
 808fac0:	2120      	movs	r1, #32
 808fac2:	4640      	mov	r0, r8
 808fac4:	f7ff ff55 	bl	808f972 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( chain, sizeof( chain ) );
 808fac8:	2110      	movs	r1, #16
 808faca:	4668      	mov	r0, sp
 808facc:	f7ff ff51 	bl	808f972 <_ZL15mbedtls_zeroizePvj>
    if( 0 != ret )
 808fad0:	b13c      	cbz	r4, 808fae2 <_ZL15block_cipher_dfPhPKhj+0x160>
    {
        /*
        * wipe partial seed from memory
        */
        mbedtls_zeroize( output, MBEDTLS_CTR_DRBG_SEEDLEN );
 808fad2:	2130      	movs	r1, #48	; 0x30
 808fad4:	4638      	mov	r0, r7
 808fad6:	f7ff ff4c 	bl	808f972 <_ZL15mbedtls_zeroizePvj>
 808fada:	e002      	b.n	808fae2 <_ZL15block_cipher_dfPhPKhj+0x160>

    int i, j;
    size_t buf_len, use_len;

    if( data_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 808fadc:	f06f 0037 	mvn.w	r0, #55	; 0x37
 808fae0:	e000      	b.n	808fae4 <_ZL15block_cipher_dfPhPKhj+0x162>
 808fae2:	4620      	mov	r0, r4
        */
        mbedtls_zeroize( output, MBEDTLS_CTR_DRBG_SEEDLEN );
    }

    return( ret );
}
 808fae4:	f50d 7d46 	add.w	sp, sp, #792	; 0x318
 808fae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808faec <_ZL24ctr_drbg_update_internalP24mbedtls_ctr_drbg_contextPKh>:

static int ctr_drbg_update_internal( mbedtls_ctr_drbg_context *ctx,
                              const unsigned char data[MBEDTLS_CTR_DRBG_SEEDLEN] )
{
 808faec:	b5f0      	push	{r4, r5, r6, r7, lr}
 808faee:	b08d      	sub	sp, #52	; 0x34
 808faf0:	4604      	mov	r4, r0
 808faf2:	460d      	mov	r5, r1
    unsigned char tmp[MBEDTLS_CTR_DRBG_SEEDLEN];
    unsigned char *p = tmp;
    int i, j;
    int ret = 0;

    memset( tmp, 0, MBEDTLS_CTR_DRBG_SEEDLEN );
 808faf4:	2230      	movs	r2, #48	; 0x30
 808faf6:	2100      	movs	r1, #0
 808faf8:	4668      	mov	r0, sp
 808fafa:	f004 f866 	bl	8093bca <memset>

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 808fafe:	2700      	movs	r7, #0
                break;

        /*
         * Crypt counter block
         */
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, p ) ) != 0 )
 808fb00:	f104 0620 	add.w	r6, r4, #32
 808fb04:	eb0d 0307 	add.w	r3, sp, r7
 808fb08:	f104 0110 	add.w	r1, r4, #16
    {
        /*
         * Increase counter
         */
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
            if( ++ctx->counter[i - 1] != 0 )
 808fb0c:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
 808fb10:	3201      	adds	r2, #1
 808fb12:	b2d2      	uxtb	r2, r2
 808fb14:	700a      	strb	r2, [r1, #0]
 808fb16:	b90a      	cbnz	r2, 808fb1c <_ZL24ctr_drbg_update_internalP24mbedtls_ctr_drbg_contextPKh+0x30>
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
    {
        /*
         * Increase counter
         */
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 808fb18:	42a1      	cmp	r1, r4
 808fb1a:	d1f7      	bne.n	808fb0c <_ZL24ctr_drbg_update_internalP24mbedtls_ctr_drbg_contextPKh+0x20>
                break;

        /*
         * Crypt counter block
         */
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, p ) ) != 0 )
 808fb1c:	4622      	mov	r2, r4
 808fb1e:	2101      	movs	r1, #1
 808fb20:	4630      	mov	r0, r6
 808fb22:	f7fd ffb7 	bl	808da94 <mbedtls_aes_crypt_ecb>
 808fb26:	bb08      	cbnz	r0, 808fb6c <_ZL24ctr_drbg_update_internalP24mbedtls_ctr_drbg_contextPKh+0x80>
    int i, j;
    int ret = 0;

    memset( tmp, 0, MBEDTLS_CTR_DRBG_SEEDLEN );

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 808fb28:	3710      	adds	r7, #16
 808fb2a:	2f30      	cmp	r7, #48	; 0x30
 808fb2c:	d1ea      	bne.n	808fb04 <_ZL24ctr_drbg_update_internalP24mbedtls_ctr_drbg_contextPKh+0x18>
 808fb2e:	1e6b      	subs	r3, r5, #1
 808fb30:	f10d 32ff 	add.w	r2, sp, #4294967295
 808fb34:	352f      	adds	r5, #47	; 0x2f

        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
    }

    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
        tmp[i] ^= data[i];
 808fb36:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 808fb3a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 808fb3e:	4041      	eors	r1, r0
        }

        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
    }

    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
 808fb40:	42ab      	cmp	r3, r5
        tmp[i] ^= data[i];
 808fb42:	7011      	strb	r1, [r2, #0]
        }

        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
    }

    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
 808fb44:	d1f7      	bne.n	808fb36 <_ZL24ctr_drbg_update_internalP24mbedtls_ctr_drbg_contextPKh+0x4a>
        tmp[i] ^= data[i];

    /*
     * Update key and counter
     */
    if( ( ret = mbedtls_aes_setkey_enc( &ctx->aes_ctx, tmp, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 808fb46:	f44f 7280 	mov.w	r2, #256	; 0x100
 808fb4a:	4669      	mov	r1, sp
 808fb4c:	4630      	mov	r0, r6
 808fb4e:	f7fd fa9b 	bl	808d088 <mbedtls_aes_setkey_enc>
 808fb52:	b958      	cbnz	r0, 808fb6c <_ZL24ctr_drbg_update_internalP24mbedtls_ctr_drbg_contextPKh+0x80>
    {
        return( ret );
    }
    memcpy( ctx->counter, tmp + MBEDTLS_CTR_DRBG_KEYSIZE, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 808fb54:	aa08      	add	r2, sp, #32
 808fb56:	ad0c      	add	r5, sp, #48	; 0x30
 808fb58:	4613      	mov	r3, r2
 808fb5a:	cb03      	ldmia	r3!, {r0, r1}
 808fb5c:	42ab      	cmp	r3, r5
 808fb5e:	6020      	str	r0, [r4, #0]
 808fb60:	6061      	str	r1, [r4, #4]
 808fb62:	461a      	mov	r2, r3
 808fb64:	f104 0408 	add.w	r4, r4, #8
 808fb68:	d1f6      	bne.n	808fb58 <_ZL24ctr_drbg_update_internalP24mbedtls_ctr_drbg_contextPKh+0x6c>

    return( 0 );
 808fb6a:	2000      	movs	r0, #0
}
 808fb6c:	b00d      	add	sp, #52	; 0x34
 808fb6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808fb70 <mbedtls_ctr_drbg_init>:
/*
 * CTR_DRBG context initialization
 */
void mbedtls_ctr_drbg_init( mbedtls_ctr_drbg_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_ctr_drbg_context ) );
 808fb70:	f44f 72a0 	mov.w	r2, #320	; 0x140
 808fb74:	2100      	movs	r1, #0
 808fb76:	f004 b828 	b.w	8093bca <memset>

0808fb7a <mbedtls_ctr_drbg_reseed>:
    }
}

int mbedtls_ctr_drbg_reseed( mbedtls_ctr_drbg_context *ctx,
                     const unsigned char *additional, size_t len )
{
 808fb7a:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned char seed[MBEDTLS_CTR_DRBG_MAX_SEED_INPUT];
    size_t seedlen = 0;
    int ret;

    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 808fb7c:	6985      	ldr	r5, [r0, #24]
    }
}

int mbedtls_ctr_drbg_reseed( mbedtls_ctr_drbg_context *ctx,
                     const unsigned char *additional, size_t len )
{
 808fb7e:	b0e1      	sub	sp, #388	; 0x184
    unsigned char seed[MBEDTLS_CTR_DRBG_MAX_SEED_INPUT];
    size_t seedlen = 0;
    int ret;

    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 808fb80:	f5b5 7fc0 	cmp.w	r5, #384	; 0x180
    }
}

int mbedtls_ctr_drbg_reseed( mbedtls_ctr_drbg_context *ctx,
                     const unsigned char *additional, size_t len )
{
 808fb84:	4604      	mov	r4, r0
 808fb86:	460f      	mov	r7, r1
 808fb88:	4616      	mov	r6, r2
    unsigned char seed[MBEDTLS_CTR_DRBG_MAX_SEED_INPUT];
    size_t seedlen = 0;
    int ret;

    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 808fb8a:	d829      	bhi.n	808fbe0 <mbedtls_ctr_drbg_reseed+0x66>
 808fb8c:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
 808fb90:	4293      	cmp	r3, r2
 808fb92:	d325      	bcc.n	808fbe0 <mbedtls_ctr_drbg_reseed+0x66>
        len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT - ctx->entropy_len )
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );

    memset( seed, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT );
 808fb94:	f44f 72c0 	mov.w	r2, #384	; 0x180
 808fb98:	2100      	movs	r1, #0
 808fb9a:	4668      	mov	r0, sp
 808fb9c:	f004 f815 	bl	8093bca <memset>

    /*
     * Gather entropy_len bytes of entropy to seed state
     */
    if( 0 != ctx->f_entropy( ctx->p_entropy, seed,
 808fba0:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 808fba4:	462a      	mov	r2, r5
 808fba6:	4669      	mov	r1, sp
 808fba8:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 808fbac:	4798      	blx	r3
 808fbae:	b9d0      	cbnz	r0, 808fbe6 <mbedtls_ctr_drbg_reseed+0x6c>
                             ctx->entropy_len ) )
    {
        return( MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED );
    }

    seedlen += ctx->entropy_len;
 808fbb0:	69a5      	ldr	r5, [r4, #24]

    /*
     * Add additional data
     */
    if( additional && len )
 808fbb2:	b13f      	cbz	r7, 808fbc4 <mbedtls_ctr_drbg_reseed+0x4a>
 808fbb4:	b136      	cbz	r6, 808fbc4 <mbedtls_ctr_drbg_reseed+0x4a>
    {
        memcpy( seed + seedlen, additional, len );
 808fbb6:	eb0d 0005 	add.w	r0, sp, r5
 808fbba:	4632      	mov	r2, r6
 808fbbc:	4639      	mov	r1, r7
 808fbbe:	f003 ffde 	bl	8093b7e <memcpy>
        seedlen += len;
 808fbc2:	4435      	add	r5, r6
    }

    /*
     * Reduce to 384 bits
     */
    if( ( ret = block_cipher_df( seed, seed, seedlen ) ) != 0 )
 808fbc4:	462a      	mov	r2, r5
 808fbc6:	4669      	mov	r1, sp
 808fbc8:	4668      	mov	r0, sp
 808fbca:	f7ff feda 	bl	808f982 <_ZL15block_cipher_dfPhPKhj>
 808fbce:	b960      	cbnz	r0, 808fbea <mbedtls_ctr_drbg_reseed+0x70>
    }

    /*
     * Update state
     */
    if( ( ret = ctr_drbg_update_internal( ctx, seed ) ) != 0 )
 808fbd0:	4669      	mov	r1, sp
 808fbd2:	4620      	mov	r0, r4
 808fbd4:	f7ff ff8a 	bl	808faec <_ZL24ctr_drbg_update_internalP24mbedtls_ctr_drbg_contextPKh>
 808fbd8:	b938      	cbnz	r0, 808fbea <mbedtls_ctr_drbg_reseed+0x70>
    {
        return( ret );
    }
    ctx->reseed_counter = 1;
 808fbda:	2301      	movs	r3, #1
 808fbdc:	6123      	str	r3, [r4, #16]

    return( 0 );
 808fbde:	e004      	b.n	808fbea <mbedtls_ctr_drbg_reseed+0x70>
    size_t seedlen = 0;
    int ret;

    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
        len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT - ctx->entropy_len )
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 808fbe0:	f06f 0037 	mvn.w	r0, #55	; 0x37
 808fbe4:	e001      	b.n	808fbea <mbedtls_ctr_drbg_reseed+0x70>
     * Gather entropy_len bytes of entropy to seed state
     */
    if( 0 != ctx->f_entropy( ctx->p_entropy, seed,
                             ctx->entropy_len ) )
    {
        return( MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED );
 808fbe6:	f06f 0033 	mvn.w	r0, #51	; 0x33
        return( ret );
    }
    ctx->reseed_counter = 1;

    return( 0 );
}
 808fbea:	b061      	add	sp, #388	; 0x184
 808fbec:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808fbee <mbedtls_ctr_drbg_seed_entropy_len>:
                   int (*f_entropy)(void *, unsigned char *, size_t),
                   void *p_entropy,
                   const unsigned char *custom,
                   size_t len,
                   size_t entropy_len )
{
 808fbee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808fbf2:	4604      	mov	r4, r0
 808fbf4:	b088      	sub	sp, #32
 808fbf6:	4688      	mov	r8, r1
 808fbf8:	4617      	mov	r7, r2
    int ret;
    unsigned char key[MBEDTLS_CTR_DRBG_KEYSIZE];

    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );
 808fbfa:	2100      	movs	r1, #0
 808fbfc:	2220      	movs	r2, #32

    mbedtls_aes_init( &ctx->aes_ctx );
 808fbfe:	f104 0520 	add.w	r5, r4, #32
                   size_t entropy_len )
{
    int ret;
    unsigned char key[MBEDTLS_CTR_DRBG_KEYSIZE];

    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );
 808fc02:	4668      	mov	r0, sp
                   int (*f_entropy)(void *, unsigned char *, size_t),
                   void *p_entropy,
                   const unsigned char *custom,
                   size_t len,
                   size_t entropy_len )
{
 808fc04:	461e      	mov	r6, r3
    int ret;
    unsigned char key[MBEDTLS_CTR_DRBG_KEYSIZE];

    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );
 808fc06:	f003 ffe0 	bl	8093bca <memset>

    mbedtls_aes_init( &ctx->aes_ctx );
 808fc0a:	4628      	mov	r0, r5
 808fc0c:	f7fd fa2c 	bl	808d068 <mbedtls_aes_init>

    ctx->f_entropy = f_entropy;
    ctx->p_entropy = p_entropy;

    ctx->entropy_len = entropy_len;
 808fc10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c

    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );

    mbedtls_aes_init( &ctx->aes_ctx );

    ctx->f_entropy = f_entropy;
 808fc12:	f8c4 8138 	str.w	r8, [r4, #312]	; 0x138
    ctx->p_entropy = p_entropy;

    ctx->entropy_len = entropy_len;
 808fc16:	61a3      	str	r3, [r4, #24]
    ctx->reseed_interval = MBEDTLS_CTR_DRBG_RESEED_INTERVAL;
 808fc18:	f242 7310 	movw	r3, #10000	; 0x2710
    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );

    mbedtls_aes_init( &ctx->aes_ctx );

    ctx->f_entropy = f_entropy;
    ctx->p_entropy = p_entropy;
 808fc1c:	f8c4 713c 	str.w	r7, [r4, #316]	; 0x13c

    ctx->entropy_len = entropy_len;
    ctx->reseed_interval = MBEDTLS_CTR_DRBG_RESEED_INTERVAL;
 808fc20:	61e3      	str	r3, [r4, #28]

    /*
     * Initialize with an empty key
     */
    if( ( ret = mbedtls_aes_setkey_enc( &ctx->aes_ctx, key, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 808fc22:	f44f 7280 	mov.w	r2, #256	; 0x100
 808fc26:	4669      	mov	r1, sp
 808fc28:	4628      	mov	r0, r5
 808fc2a:	f7fd fa2d 	bl	808d088 <mbedtls_aes_setkey_enc>
 808fc2e:	b920      	cbnz	r0, 808fc3a <mbedtls_ctr_drbg_seed_entropy_len+0x4c>
    {
        return( ret );
    }

    if( ( ret = mbedtls_ctr_drbg_reseed( ctx, custom, len ) ) != 0 )
 808fc30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 808fc32:	4631      	mov	r1, r6
 808fc34:	4620      	mov	r0, r4
 808fc36:	f7ff ffa0 	bl	808fb7a <mbedtls_ctr_drbg_reseed>
    {
        return( ret );
    }
    return( 0 );
}
 808fc3a:	b008      	add	sp, #32
 808fc3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808fc40 <mbedtls_ctr_drbg_seed>:
int mbedtls_ctr_drbg_seed( mbedtls_ctr_drbg_context *ctx,
                   int (*f_entropy)(void *, unsigned char *, size_t),
                   void *p_entropy,
                   const unsigned char *custom,
                   size_t len )
{
 808fc40:	b513      	push	{r0, r1, r4, lr}
    return( mbedtls_ctr_drbg_seed_entropy_len( ctx, f_entropy, p_entropy, custom, len,
                                       MBEDTLS_CTR_DRBG_ENTROPY_LEN ) );
 808fc42:	2430      	movs	r4, #48	; 0x30
 808fc44:	9401      	str	r4, [sp, #4]
 808fc46:	9c04      	ldr	r4, [sp, #16]
 808fc48:	9400      	str	r4, [sp, #0]
 808fc4a:	f7ff ffd0 	bl	808fbee <mbedtls_ctr_drbg_seed_entropy_len>
}
 808fc4e:	b002      	add	sp, #8
 808fc50:	bd10      	pop	{r4, pc}

0808fc52 <mbedtls_ctr_drbg_random_with_add>:
}

int mbedtls_ctr_drbg_random_with_add( void *p_rng,
                              unsigned char *output, size_t output_len,
                              const unsigned char *additional, size_t add_len )
{
 808fc52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unsigned char *p = output;
    unsigned char tmp[MBEDTLS_CTR_DRBG_BLOCKSIZE];
    int i;
    size_t use_len;

    if( output_len > MBEDTLS_CTR_DRBG_MAX_REQUEST )
 808fc56:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
}

int mbedtls_ctr_drbg_random_with_add( void *p_rng,
                              unsigned char *output, size_t output_len,
                              const unsigned char *additional, size_t add_len )
{
 808fc5a:	b090      	sub	sp, #64	; 0x40
 808fc5c:	4604      	mov	r4, r0
 808fc5e:	460e      	mov	r6, r1
 808fc60:	4615      	mov	r5, r2
 808fc62:	4698      	mov	r8, r3
 808fc64:	9f16      	ldr	r7, [sp, #88]	; 0x58
    unsigned char *p = output;
    unsigned char tmp[MBEDTLS_CTR_DRBG_BLOCKSIZE];
    int i;
    size_t use_len;

    if( output_len > MBEDTLS_CTR_DRBG_MAX_REQUEST )
 808fc66:	d84e      	bhi.n	808fd06 <mbedtls_ctr_drbg_random_with_add+0xb4>
        return( MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG );

    if( add_len > MBEDTLS_CTR_DRBG_MAX_INPUT )
 808fc68:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 808fc6c:	d84e      	bhi.n	808fd0c <mbedtls_ctr_drbg_random_with_add+0xba>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );

    memset( add_input, 0, MBEDTLS_CTR_DRBG_SEEDLEN );
 808fc6e:	2230      	movs	r2, #48	; 0x30
 808fc70:	2100      	movs	r1, #0
 808fc72:	a804      	add	r0, sp, #16
 808fc74:	f003 ffa9 	bl	8093bca <memset>

    if( ctx->reseed_counter > ctx->reseed_interval ||
 808fc78:	6922      	ldr	r2, [r4, #16]
 808fc7a:	69e3      	ldr	r3, [r4, #28]
 808fc7c:	429a      	cmp	r2, r3
 808fc7e:	dc01      	bgt.n	808fc84 <mbedtls_ctr_drbg_random_with_add+0x32>
 808fc80:	6963      	ldr	r3, [r4, #20]
 808fc82:	b14b      	cbz	r3, 808fc98 <mbedtls_ctr_drbg_random_with_add+0x46>
        ctx->prediction_resistance )
    {
        if( ( ret = mbedtls_ctr_drbg_reseed( ctx, additional, add_len ) ) != 0 )
 808fc84:	463a      	mov	r2, r7
 808fc86:	4641      	mov	r1, r8
 808fc88:	4620      	mov	r0, r4
 808fc8a:	f7ff ff76 	bl	808fb7a <mbedtls_ctr_drbg_reseed>
 808fc8e:	2800      	cmp	r0, #0
 808fc90:	d13e      	bne.n	808fd10 <mbedtls_ctr_drbg_random_with_add+0xbe>
                break;

        /*
         * Crypt counter block
         */
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, tmp ) ) != 0 )
 808fc92:	f104 0720 	add.w	r7, r4, #32
 808fc96:	e028      	b.n	808fcea <mbedtls_ctr_drbg_random_with_add+0x98>
            return( ret );
        }
        add_len = 0;
    }

    if( add_len > 0 )
 808fc98:	2f00      	cmp	r7, #0
 808fc9a:	d0fa      	beq.n	808fc92 <mbedtls_ctr_drbg_random_with_add+0x40>
    {
        if( ( ret = block_cipher_df( add_input, additional, add_len ) ) != 0 )
 808fc9c:	463a      	mov	r2, r7
 808fc9e:	4641      	mov	r1, r8
 808fca0:	a804      	add	r0, sp, #16
 808fca2:	f7ff fe6e 	bl	808f982 <_ZL15block_cipher_dfPhPKhj>
 808fca6:	bb98      	cbnz	r0, 808fd10 <mbedtls_ctr_drbg_random_with_add+0xbe>
        {
            return( ret );
        }
        if( ( ret = ctr_drbg_update_internal( ctx, add_input ) ) != 0 )
 808fca8:	a904      	add	r1, sp, #16
 808fcaa:	4620      	mov	r0, r4
 808fcac:	f7ff ff1e 	bl	808faec <_ZL24ctr_drbg_update_internalP24mbedtls_ctr_drbg_contextPKh>
 808fcb0:	e7ed      	b.n	808fc8e <mbedtls_ctr_drbg_random_with_add+0x3c>
    {
        /*
         * Increase counter
         */
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
            if( ++ctx->counter[i - 1] != 0 )
 808fcb2:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 808fcb6:	3301      	adds	r3, #1
 808fcb8:	b2db      	uxtb	r3, r3
 808fcba:	7013      	strb	r3, [r2, #0]
 808fcbc:	b90b      	cbnz	r3, 808fcc2 <mbedtls_ctr_drbg_random_with_add+0x70>
    while( output_len > 0 )
    {
        /*
         * Increase counter
         */
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 808fcbe:	42a2      	cmp	r2, r4
 808fcc0:	d1f7      	bne.n	808fcb2 <mbedtls_ctr_drbg_random_with_add+0x60>
                break;

        /*
         * Crypt counter block
         */
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, tmp ) ) != 0 )
 808fcc2:	466b      	mov	r3, sp
 808fcc4:	4622      	mov	r2, r4
 808fcc6:	2101      	movs	r1, #1
 808fcc8:	4638      	mov	r0, r7
 808fcca:	f7fd fee3 	bl	808da94 <mbedtls_aes_crypt_ecb>
 808fcce:	b9f8      	cbnz	r0, 808fd10 <mbedtls_ctr_drbg_random_with_add+0xbe>
        {
            return( ret );
        }

        use_len = ( output_len > MBEDTLS_CTR_DRBG_BLOCKSIZE ) ? MBEDTLS_CTR_DRBG_BLOCKSIZE :
                                                       output_len;
 808fcd0:	46a8      	mov	r8, r5
 808fcd2:	2d10      	cmp	r5, #16
 808fcd4:	bf28      	it	cs
 808fcd6:	f04f 0810 	movcs.w	r8, #16
        /*
         * Copy random block to destination
         */
        memcpy( p, tmp, use_len );
 808fcda:	4630      	mov	r0, r6
 808fcdc:	4642      	mov	r2, r8
 808fcde:	4669      	mov	r1, sp
 808fce0:	f003 ff4d 	bl	8093b7e <memcpy>
        p += use_len;
 808fce4:	4446      	add	r6, r8
        output_len -= use_len;
 808fce6:	ebc8 0505 	rsb	r5, r8, r5
        {
            return( ret );
        }
    }

    while( output_len > 0 )
 808fcea:	b115      	cbz	r5, 808fcf2 <mbedtls_ctr_drbg_random_with_add+0xa0>
 808fcec:	f104 0210 	add.w	r2, r4, #16
 808fcf0:	e7df      	b.n	808fcb2 <mbedtls_ctr_drbg_random_with_add+0x60>
        memcpy( p, tmp, use_len );
        p += use_len;
        output_len -= use_len;
    }

    if( ( ret = ctr_drbg_update_internal( ctx, add_input ) ) != 0 )
 808fcf2:	a904      	add	r1, sp, #16
 808fcf4:	4620      	mov	r0, r4
 808fcf6:	f7ff fef9 	bl	808faec <_ZL24ctr_drbg_update_internalP24mbedtls_ctr_drbg_contextPKh>
 808fcfa:	b948      	cbnz	r0, 808fd10 <mbedtls_ctr_drbg_random_with_add+0xbe>
    {
        return( ret );
    }

    ctx->reseed_counter++;
 808fcfc:	6923      	ldr	r3, [r4, #16]

    return( 0 );
 808fcfe:	4628      	mov	r0, r5
    if( ( ret = ctr_drbg_update_internal( ctx, add_input ) ) != 0 )
    {
        return( ret );
    }

    ctx->reseed_counter++;
 808fd00:	3301      	adds	r3, #1
 808fd02:	6123      	str	r3, [r4, #16]

    return( 0 );
 808fd04:	e004      	b.n	808fd10 <mbedtls_ctr_drbg_random_with_add+0xbe>
    unsigned char tmp[MBEDTLS_CTR_DRBG_BLOCKSIZE];
    int i;
    size_t use_len;

    if( output_len > MBEDTLS_CTR_DRBG_MAX_REQUEST )
        return( MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG );
 808fd06:	f06f 0035 	mvn.w	r0, #53	; 0x35
 808fd0a:	e001      	b.n	808fd10 <mbedtls_ctr_drbg_random_with_add+0xbe>

    if( add_len > MBEDTLS_CTR_DRBG_MAX_INPUT )
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 808fd0c:	f06f 0037 	mvn.w	r0, #55	; 0x37
    }

    ctx->reseed_counter++;

    return( 0 );
}
 808fd10:	b010      	add	sp, #64	; 0x40
 808fd12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808fd16 <mbedtls_ctr_drbg_random>:

int mbedtls_ctr_drbg_random( void *p_rng, unsigned char *output, size_t output_len )
{
 808fd16:	b507      	push	{r0, r1, r2, lr}
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    ret = mbedtls_ctr_drbg_random_with_add( ctx, output, output_len, NULL, 0 );
 808fd18:	2300      	movs	r3, #0
 808fd1a:	9300      	str	r3, [sp, #0]
 808fd1c:	f7ff ff99 	bl	808fc52 <mbedtls_ctr_drbg_random_with_add>
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
}
 808fd20:	b003      	add	sp, #12
 808fd22:	f85d fb04 	ldr.w	pc, [sp], #4

0808fd26 <mbedtls_ssl_own_key>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
static inline mbedtls_pk_context *mbedtls_ssl_own_key( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 808fd26:	6b03      	ldr	r3, [r0, #48]	; 0x30
 808fd28:	b10b      	cbz	r3, 808fd2e <mbedtls_ssl_own_key+0x8>
 808fd2a:	685b      	ldr	r3, [r3, #4]
 808fd2c:	b913      	cbnz	r3, 808fd34 <mbedtls_ssl_own_key+0xe>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
 808fd2e:	6803      	ldr	r3, [r0, #0]
 808fd30:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return( key_cert == NULL ? NULL : key_cert->key );
 808fd32:	b10b      	cbz	r3, 808fd38 <mbedtls_ssl_own_key+0x12>
 808fd34:	6858      	ldr	r0, [r3, #4]
 808fd36:	4770      	bx	lr
 808fd38:	4618      	mov	r0, r3
}
 808fd3a:	4770      	bx	lr

0808fd3c <mbedtls_ssl_handshake_client_step>:

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
 808fd3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 808fd40:	6843      	ldr	r3, [r0, #4]

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
 808fd42:	b095      	sub	sp, #84	; 0x54
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 808fd44:	2b10      	cmp	r3, #16

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
 808fd46:	4604      	mov	r4, r0
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 808fd48:	f000 80c1 	beq.w	808fece <mbedtls_ssl_handshake_client_step+0x192>
 808fd4c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 808fd4e:	2b00      	cmp	r3, #0
 808fd50:	f000 80bd 	beq.w	808fece <mbedtls_ssl_handshake_client_step+0x192>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "client state: %d", ssl->state ) );

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 808fd54:	f7fa f8e8 	bl	8089f28 <mbedtls_ssl_flush_output>
 808fd58:	2800      	cmp	r0, #0
 808fd5a:	f040 8514 	bne.w	8090786 <mbedtls_ssl_handshake_client_step+0xa4a>
#endif

    /* Change state now, so that it is right in mbedtls_ssl_read_record(), used
     * by DTLS for dropping out-of-sequence ChangeCipherSpec records */
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&
 808fd5e:	6863      	ldr	r3, [r4, #4]
 808fd60:	2b0c      	cmp	r3, #12
 808fd62:	d105      	bne.n	808fd70 <mbedtls_ssl_handshake_client_step+0x34>
        ssl->handshake->new_session_ticket != 0 )
 808fd64:	6b23      	ldr	r3, [r4, #48]	; 0x30
#endif

    /* Change state now, so that it is right in mbedtls_ssl_read_record(), used
     * by DTLS for dropping out-of-sequence ChangeCipherSpec records */
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&
 808fd66:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 808fd6a:	b10b      	cbz	r3, 808fd70 <mbedtls_ssl_handshake_client_step+0x34>
        ssl->handshake->new_session_ticket != 0 )
    {
        ssl->state = MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET;
 808fd6c:	2311      	movs	r3, #17
 808fd6e:	6063      	str	r3, [r4, #4]
    }
#endif

    switch( ssl->state )
 808fd70:	6860      	ldr	r0, [r4, #4]
 808fd72:	2811      	cmp	r0, #17
 808fd74:	f200 80ab 	bhi.w	808fece <mbedtls_ssl_handshake_client_step+0x192>
 808fd78:	e8df f010 	tbh	[pc, r0, lsl #1]
 808fd7c:	00140012 	.word	0x00140012
 808fd80:	00dc004b 	.word	0x00dc004b
 808fd84:	010500e1 	.word	0x010500e1
 808fd88:	012b0117 	.word	0x012b0117
 808fd8c:	0190012f 	.word	0x0190012f
 808fd90:	020201fe 	.word	0x020201fe
 808fd94:	02290225 	.word	0x02290225
 808fd98:	022f022d 	.word	0x022f022d
 808fd9c:	020c00a9 	.word	0x020c00a9
    {
        case MBEDTLS_SSL_HELLO_REQUEST:
            ssl->state = MBEDTLS_SSL_CLIENT_HELLO;
 808fda0:	2301      	movs	r3, #1
 808fda2:	e0ed      	b.n	808ff80 <mbedtls_ssl_handshake_client_step+0x244>
    const int *ciphersuites;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );

    if( ssl->conf->f_rng == NULL )
 808fda4:	6821      	ldr	r1, [r4, #0]
 808fda6:	698b      	ldr	r3, [r1, #24]
 808fda8:	2b00      	cmp	r3, #0
 808fdaa:	f000 821a 	beq.w	80901e2 <mbedtls_ssl_handshake_client_step+0x4a6>

#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        ssl->major_ver = ssl->conf->min_major_ver;
 808fdae:	f891 305e 	ldrb.w	r3, [r1, #94]	; 0x5e
 808fdb2:	60a3      	str	r3, [r4, #8]
        ssl->minor_ver = ssl->conf->min_minor_ver;
 808fdb4:	f891 305f 	ldrb.w	r3, [r1, #95]	; 0x5f
 808fdb8:	60e3      	str	r3, [r4, #12]
    }

    if( ssl->conf->max_major_ver == 0 )
 808fdba:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 808fdbe:	2800      	cmp	r0, #0
 808fdc0:	f000 8085 	beq.w	808fece <mbedtls_ssl_handshake_client_step+0x192>
     */
    buf = ssl->out_msg;
    p = buf + 4;

    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 808fdc4:	f891 2060 	ldrb.w	r2, [r1, #96]	; 0x60
     *     1  .   3   handshake length
     *     4  .   5   highest version supported
     *     6  .   9   current UNIX time
     *    10  .  37   random bytes
     */
    buf = ssl->out_msg;
 808fdc8:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
    p = buf + 4;

    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 808fdcc:	f3c2 0240 	ubfx	r2, r2, #1, #1
 808fdd0:	1d33      	adds	r3, r6, #4
 808fdd2:	f891 105d 	ldrb.w	r1, [r1, #93]	; 0x5d
 808fdd6:	f7fb fac9 	bl	808b36c <mbedtls_ssl_write_version>
    *p++ = (unsigned char)( t >>  8 );
    *p++ = (unsigned char)( t       );

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, current time: %lu", t ) );
#else
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
 808fdda:	6823      	ldr	r3, [r4, #0]
 * Generate random bytes for ClientHello
 */
static int ssl_generate_random( mbedtls_ssl_context *ssl )
{
    int ret;
    unsigned char *p = ssl->handshake->randbytes;
 808fddc:	6b25      	ldr	r5, [r4, #48]	; 0x30
    *p++ = (unsigned char)( t >>  8 );
    *p++ = (unsigned char)( t       );

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, current time: %lu", t ) );
#else
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
 808fdde:	699f      	ldr	r7, [r3, #24]
 808fde0:	2204      	movs	r2, #4
 808fde2:	f505 71ba 	add.w	r1, r5, #372	; 0x174
 808fde6:	69d8      	ldr	r0, [r3, #28]
 808fde8:	47b8      	blx	r7
 808fdea:	2800      	cmp	r0, #0
 808fdec:	f040 84cb 	bne.w	8090786 <mbedtls_ssl_handshake_client_step+0xa4a>
        return( ret );

    p += 4;
#endif /* MBEDTLS_HAVE_TIME */

    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 28 ) ) != 0 )
 808fdf0:	6823      	ldr	r3, [r4, #0]
 808fdf2:	221c      	movs	r2, #28
 808fdf4:	699f      	ldr	r7, [r3, #24]
 808fdf6:	f505 71bc 	add.w	r1, r5, #376	; 0x178
 808fdfa:	69d8      	ldr	r0, [r3, #28]
 808fdfc:	47b8      	blx	r7
 808fdfe:	2800      	cmp	r0, #0
 808fe00:	f040 84c1 	bne.w	8090786 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_generate_random", ret );
        return( ret );
    }

    memcpy( p, ssl->handshake->randbytes, 32 );
 808fe04:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808fe06:	1db1      	adds	r1, r6, #6
 808fe08:	f503 72ba 	add.w	r2, r3, #372	; 0x174
 808fe0c:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 808fe10:	e1eb      	b.n	80901ea <mbedtls_ssl_handshake_client_step+0x4ae>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello" ) );

    buf = ssl->in_msg;

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808fe12:	4620      	mov	r0, r4
    int handshake_failure = 0;
    const mbedtls_ssl_ciphersuite_t *suite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello" ) );

    buf = ssl->in_msg;
 808fe14:	6e65      	ldr	r5, [r4, #100]	; 0x64

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808fe16:	f7fa fcc1 	bl	808a79c <mbedtls_ssl_read_record>
 808fe1a:	2800      	cmp	r0, #0
 808fe1c:	f040 84b3 	bne.w	8090786 <mbedtls_ssl_handshake_client_step+0xa4a>
        /* No alert on a read error. */
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 808fe20:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808fe22:	2b16      	cmp	r3, #22
 808fe24:	d006      	beq.n	808fe34 <mbedtls_ssl_handshake_client_step+0xf8>
        }
#endif /* MBEDTLS_SSL_RENEGOTIATION */

        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 808fe26:	220a      	movs	r2, #10
 808fe28:	2102      	movs	r1, #2
 808fe2a:	4620      	mov	r0, r4
 808fe2c:	f7fa fa68 	bl	808a300 <mbedtls_ssl_send_alert_message>
 808fe30:	f000 bc5b 	b.w	80906ea <mbedtls_ssl_handshake_client_step+0x9ae>
            ssl->handshake->verify_cookie_len = 0;
        }
    }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    if( ssl->in_hslen < 38 + mbedtls_ssl_hs_hdr_len( ssl ) ||
 808fe34:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 808fe36:	2b29      	cmp	r3, #41	; 0x29
 808fe38:	d938      	bls.n	808feac <mbedtls_ssl_handshake_client_step+0x170>
 808fe3a:	782b      	ldrb	r3, [r5, #0]
 808fe3c:	2b02      	cmp	r3, #2
 808fe3e:	d135      	bne.n	808feac <mbedtls_ssl_handshake_client_step+0x170>
     */
    buf += mbedtls_ssl_hs_hdr_len( ssl );

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
                      ssl->conf->transport, buf + 0 );
 808fe40:	4621      	mov	r1, r4
 808fe42:	f851 3b0c 	ldr.w	r3, [r1], #12
     * 37+n . 37+n  compression_method
     *
     * 38+n . 39+n  extensions length (optional)
     * 40+n .  ..   extensions
     */
    buf += mbedtls_ssl_hs_hdr_len( ssl );
 808fe46:	f105 0804 	add.w	r8, r5, #4

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
                      ssl->conf->transport, buf + 0 );
 808fe4a:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 808fe4e:	f104 0008 	add.w	r0, r4, #8
 808fe52:	4643      	mov	r3, r8
 808fe54:	f3c2 0240 	ubfx	r2, r2, #1, #1
 808fe58:	f7fb fa8b 	bl	808b372 <mbedtls_ssl_read_version>

    if( ssl->major_ver < ssl->conf->min_major_ver ||
 808fe5c:	6823      	ldr	r3, [r4, #0]
 808fe5e:	68a2      	ldr	r2, [r4, #8]
 808fe60:	f893 105e 	ldrb.w	r1, [r3, #94]	; 0x5e
 808fe64:	428a      	cmp	r2, r1
 808fe66:	f2c0 830f 	blt.w	8090488 <mbedtls_ssl_handshake_client_step+0x74c>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 808fe6a:	68e1      	ldr	r1, [r4, #12]

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
                      ssl->conf->transport, buf + 0 );

    if( ssl->major_ver < ssl->conf->min_major_ver ||
 808fe6c:	f893 005f 	ldrb.w	r0, [r3, #95]	; 0x5f
 808fe70:	4281      	cmp	r1, r0
 808fe72:	f2c0 8309 	blt.w	8090488 <mbedtls_ssl_handshake_client_step+0x74c>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 808fe76:	f893 005c 	ldrb.w	r0, [r3, #92]	; 0x5c
 808fe7a:	4282      	cmp	r2, r0
 808fe7c:	f300 8304 	bgt.w	8090488 <mbedtls_ssl_handshake_client_step+0x74c>
        ssl->major_ver > ssl->conf->max_major_ver ||
 808fe80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 808fe84:	4299      	cmp	r1, r3
 808fe86:	f300 82ff 	bgt.w	8090488 <mbedtls_ssl_handshake_client_step+0x74c>
                           ( (uint32_t) buf[2] << 24 ) |
                           ( (uint32_t) buf[3] << 16 ) |
                           ( (uint32_t) buf[4] <<  8 ) |
                           ( (uint32_t) buf[5]       ) ) );

    memcpy( ssl->handshake->randbytes + 32, buf + 2, 32 );
 808fe8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808fe8c:	1daa      	adds	r2, r5, #6
 808fe8e:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 808fe92:	f105 0126 	add.w	r1, r5, #38	; 0x26
 808fe96:	f852 0b04 	ldr.w	r0, [r2], #4
 808fe9a:	428a      	cmp	r2, r1
 808fe9c:	f843 0b04 	str.w	r0, [r3], #4
 808fea0:	d1f9      	bne.n	808fe96 <mbedtls_ssl_handshake_client_step+0x15a>

    n = buf[34];
 808fea2:	f895 6026 	ldrb.w	r6, [r5, #38]	; 0x26

    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, random bytes", buf + 2, 32 );

    if( n > 32 )
 808fea6:	2e20      	cmp	r6, #32
 808fea8:	f240 82f5 	bls.w	8090496 <mbedtls_ssl_handshake_client_step+0x75a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 808feac:	2232      	movs	r2, #50	; 0x32
 808feae:	e03a      	b.n	808ff26 <mbedtls_ssl_handshake_client_step+0x1ea>
    }

    /*
     * Initialize update checksum functions
     */
    ssl->transform_negotiate->ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( i );
 808feb0:	4648      	mov	r0, r9
 808feb2:	f8d4 a040 	ldr.w	sl, [r4, #64]	; 0x40
 808feb6:	f7f6 fd1b 	bl	80868f0 <mbedtls_ssl_ciphersuite_from_id>
 808feba:	f8ca 0000 	str.w	r0, [sl]

    if( ssl->transform_negotiate->ciphersuite_info == NULL )
 808febe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808fec0:	6819      	ldr	r1, [r3, #0]
 808fec2:	b939      	cbnz	r1, 808fed4 <mbedtls_ssl_handshake_client_step+0x198>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ciphersuite info for %04x not found", i ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
 808fec4:	2250      	movs	r2, #80	; 0x50
 808fec6:	2102      	movs	r1, #2
 808fec8:	4620      	mov	r0, r4
 808feca:	f7fa fa19 	bl	808a300 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 808fece:	48ae      	ldr	r0, [pc, #696]	; (8090188 <mbedtls_ssl_handshake_client_step+0x44c>)
 808fed0:	f000 bc59 	b.w	8090786 <mbedtls_ssl_handshake_client_step+0xa4a>
    }

    mbedtls_ssl_optimize_checksum( ssl, ssl->transform_negotiate->ciphersuite_info );
 808fed4:	4620      	mov	r0, r4
 808fed6:	f7fa fd2d 	bl	808a934 <mbedtls_ssl_optimize_checksum>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
 808feda:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 808fede:	3527      	adds	r5, #39	; 0x27
 808fee0:	f8da 31e4 	ldr.w	r3, [sl, #484]	; 0x1e4
 808fee4:	2b00      	cmp	r3, #0
 808fee6:	f040 8311 	bne.w	809050c <mbedtls_ssl_handshake_client_step+0x7d0>
        ssl->session_negotiate->ciphersuite != i ||
        ssl->session_negotiate->compression != comp ||
        ssl->session_negotiate->id_len != n ||
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
    {
        ssl->state++;
 808feea:	6863      	ldr	r3, [r4, #4]
        ssl->session_negotiate->start = mbedtls_time( NULL );
#endif
        ssl->session_negotiate->ciphersuite = i;
        ssl->session_negotiate->compression = comp;
        ssl->session_negotiate->id_len = n;
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 808feec:	4629      	mov	r1, r5
        ssl->session_negotiate->ciphersuite != i ||
        ssl->session_negotiate->compression != comp ||
        ssl->session_negotiate->id_len != n ||
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
    {
        ssl->state++;
 808feee:	3301      	adds	r3, #1
 808fef0:	6063      	str	r3, [r4, #4]
        ssl->handshake->resume = 0;
 808fef2:	2300      	movs	r3, #0
 808fef4:	f8ca 31e4 	str.w	r3, [sl, #484]	; 0x1e4
#if defined(MBEDTLS_HAVE_TIME)
        ssl->session_negotiate->start = mbedtls_time( NULL );
#endif
        ssl->session_negotiate->ciphersuite = i;
 808fef8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808fefa:	f8c2 9000 	str.w	r9, [r2]
        ssl->session_negotiate->compression = comp;
 808fefe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808ff00:	6053      	str	r3, [r2, #4]
        ssl->session_negotiate->id_len = n;
 808ff02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 808ff04:	4632      	mov	r2, r6
#if defined(MBEDTLS_HAVE_TIME)
        ssl->session_negotiate->start = mbedtls_time( NULL );
#endif
        ssl->session_negotiate->ciphersuite = i;
        ssl->session_negotiate->compression = comp;
        ssl->session_negotiate->id_len = n;
 808ff06:	609e      	str	r6, [r3, #8]
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 808ff08:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 808ff0a:	300c      	adds	r0, #12
 808ff0c:	f003 fe37 	bl	8093b7e <memcpy>
     * Perform cipher suite validation in same way as in ssl_write_client_hello.
     */
    i = 0;
    while( 1 )
    {
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i] == 0 )
 808ff10:	6823      	ldr	r3, [r4, #0]
 808ff12:	68e2      	ldr	r2, [r4, #12]
 808ff14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 808ff18:	3b04      	subs	r3, #4
 808ff1a:	f853 0f04 	ldr.w	r0, [r3, #4]!
 808ff1e:	2800      	cmp	r0, #0
 808ff20:	f040 831b 	bne.w	809055a <mbedtls_ssl_handshake_client_step+0x81e>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
 808ff24:	222f      	movs	r2, #47	; 0x2f
 808ff26:	2102      	movs	r1, #2
 808ff28:	4620      	mov	r0, r4
 808ff2a:	f7fa f9e9 	bl	808a300 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 808ff2e:	4897      	ldr	r0, [pc, #604]	; (809018c <mbedtls_ssl_handshake_client_step+0x450>)
 808ff30:	f000 bc29 	b.w	8090786 <mbedtls_ssl_handshake_client_step+0xa4a>
       case MBEDTLS_SSL_SERVER_HELLO:
           ret = ssl_parse_server_hello( ssl );
           break;

       case MBEDTLS_SSL_SERVER_CERTIFICATE:
           ret = mbedtls_ssl_parse_certificate( ssl );
 808ff34:	4620      	mov	r0, r4
 808ff36:	f7fb f913 	bl	808b160 <mbedtls_ssl_parse_certificate>
           break;
 808ff3a:	f000 bc24 	b.w	8090786 <mbedtls_ssl_handshake_client_step+0xa4a>

static int ssl_parse_server_key_exchange( mbedtls_ssl_context *ssl )
{
    int ret;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 808ff3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808ff40:	681d      	ldr	r5, [r3, #0]
    unsigned char *p = NULL, *end = NULL;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server key exchange" ) );

#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 808ff42:	7aab      	ldrb	r3, [r5, #10]
 808ff44:	2b01      	cmp	r3, #1
 808ff46:	d101      	bne.n	808ff4c <mbedtls_ssl_handshake_client_step+0x210>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse server key exchange" ) );
        ssl->state++;
 808ff48:	2305      	movs	r3, #5
 808ff4a:	e386      	b.n	809065a <mbedtls_ssl_handshake_client_step+0x91e>
    ((void) p);
    ((void) end);
#endif /* MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808ff4c:	4620      	mov	r0, r4
 808ff4e:	f7fa fc25 	bl	808a79c <mbedtls_ssl_read_record>
 808ff52:	2800      	cmp	r0, #0
 808ff54:	f040 8417 	bne.w	8090786 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 808ff58:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808ff5a:	2b16      	cmp	r3, #22
 808ff5c:	f47f af63 	bne.w	808fe26 <mbedtls_ssl_handshake_client_step+0xea>

    /*
     * ServerKeyExchange may be skipped with PSK and RSA-PSK when the server
     * doesn't use a psk_identity_hint
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE )
 808ff60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 808ff62:	781b      	ldrb	r3, [r3, #0]
 808ff64:	2b0c      	cmp	r3, #12
 808ff66:	f000 813e 	beq.w	80901e6 <mbedtls_ssl_handshake_client_step+0x4aa>
    {
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 808ff6a:	7aab      	ldrb	r3, [r5, #10]
 808ff6c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 808ff70:	2b05      	cmp	r3, #5
 808ff72:	f47f af58 	bne.w	808fe26 <mbedtls_ssl_handshake_client_step+0xea>
            ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK )
        {
            /* Current message is probably either
             * CertificateRequest or ServerHelloDone */
            ssl->keep_current_message = 1;
 808ff76:	2301      	movs	r3, #1
 808ff78:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        }
    }
#endif /* MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED */

exit:
    ssl->state++;
 808ff7c:	6863      	ldr	r3, [r4, #4]
 808ff7e:	3301      	adds	r3, #1
 808ff80:	6063      	str	r3, [r4, #4]
 808ff82:	f000 bc00 	b.w	8090786 <mbedtls_ssl_handshake_client_step+0xa4a>
    int ret;
    unsigned char *buf;
    size_t n = 0;
    size_t cert_type_len = 0, dn_len = 0;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 808ff86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808ff88:	681b      	ldr	r3, [r3, #0]
 808ff8a:	7a9b      	ldrb	r3, [r3, #10]
 808ff8c:	3b01      	subs	r3, #1
 808ff8e:	b2db      	uxtb	r3, r3
 808ff90:	2b09      	cmp	r3, #9
 808ff92:	f200 8361 	bhi.w	8090658 <mbedtls_ssl_handshake_client_step+0x91c>
 808ff96:	f240 320f 	movw	r2, #783	; 0x30f
 808ff9a:	2501      	movs	r5, #1
 808ff9c:	fa05 f303 	lsl.w	r3, r5, r3
 808ffa0:	401a      	ands	r2, r3
 808ffa2:	2a00      	cmp	r2, #0
 808ffa4:	f000 8358 	beq.w	8090658 <mbedtls_ssl_handshake_client_step+0x91c>
 808ffa8:	e35a      	b.n	8090660 <mbedtls_ssl_handshake_client_step+0x924>
{
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello done" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808ffaa:	4620      	mov	r0, r4
 808ffac:	f7fa fbf6 	bl	808a79c <mbedtls_ssl_read_record>
 808ffb0:	2800      	cmp	r0, #0
 808ffb2:	f040 83e8 	bne.w	8090786 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 808ffb6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808ffb8:	2b16      	cmp	r3, #22
 808ffba:	f040 8396 	bne.w	80906ea <mbedtls_ssl_handshake_client_step+0x9ae>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 808ffbe:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 808ffc0:	2b04      	cmp	r3, #4
 808ffc2:	f040 838b 	bne.w	80906dc <mbedtls_ssl_handshake_client_step+0x9a0>
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
 808ffc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 808ffc8:	781b      	ldrb	r3, [r3, #0]
 808ffca:	2b0e      	cmp	r3, #14
 808ffcc:	f040 8386 	bne.w	80906dc <mbedtls_ssl_handshake_client_step+0x9a0>
 808ffd0:	e7d4      	b.n	808ff7c <mbedtls_ssl_handshake_client_step+0x240>
        *      ( CertificateVerify  )
        *        ChangeCipherSpec
        *        Finished
        */
       case MBEDTLS_SSL_CLIENT_CERTIFICATE:
           ret = mbedtls_ssl_write_certificate( ssl );
 808ffd2:	4620      	mov	r0, r4
 808ffd4:	f7fa fc00 	bl	808a7d8 <mbedtls_ssl_write_certificate>
           break;
 808ffd8:	e3d5      	b.n	8090786 <mbedtls_ssl_handshake_client_step+0xa4a>
static int ssl_write_client_key_exchange( mbedtls_ssl_context *ssl )
{
    int ret;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 808ffda:	6c23      	ldr	r3, [r4, #64]	; 0x40
        }
    }
    else
#endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */
#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 808ffdc:	681b      	ldr	r3, [r3, #0]
 808ffde:	7a9f      	ldrb	r7, [r3, #10]
 808ffe0:	2f01      	cmp	r7, #1
 808ffe2:	f040 8100 	bne.w	80901e6 <mbedtls_ssl_handshake_client_step+0x4aa>
     *  struct {
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 808ffe6:	6820      	ldr	r0, [r4, #0]
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
    unsigned char *p = ssl->handshake->premaster + pms_offset;
 808ffe8:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 808ffec:	68e3      	ldr	r3, [r4, #12]
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 808ffee:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
    unsigned char *p = ssl->handshake->premaster + pms_offset;
 808fff2:	f508 76da 	add.w	r6, r8, #436	; 0x1b4
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 808fff6:	2b00      	cmp	r3, #0
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 808fff8:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 808fffc:	4633      	mov	r3, r6
 808fffe:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8090002:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 8090006:	bf14      	ite	ne
 8090008:	2502      	movne	r5, #2
 809000a:	2500      	moveq	r5, #0
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 809000c:	f7fb f9ae 	bl	808b36c <mbedtls_ssl_write_version>

    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p + 2, 46 ) ) != 0 )
 8090010:	6823      	ldr	r3, [r4, #0]
 8090012:	222e      	movs	r2, #46	; 0x2e
 8090014:	f8d3 9018 	ldr.w	r9, [r3, #24]
 8090018:	f508 71db 	add.w	r1, r8, #438	; 0x1b6
 809001c:	69d8      	ldr	r0, [r3, #28]
 809001e:	47c8      	blx	r9
 8090020:	2800      	cmp	r0, #0
 8090022:	f040 83b0 	bne.w	8090786 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "f_rng", ret );
        return( ret );
    }

    ssl->handshake->pmslen = 48;
 8090026:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8090028:	2230      	movs	r2, #48	; 0x30
 809002a:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

    if( ssl->session_negotiate->peer_cert == NULL )
 809002e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8090030:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8090032:	2800      	cmp	r0, #0
 8090034:	f000 8359 	beq.w	80906ea <mbedtls_ssl_handshake_client_step+0x9ae>
    }

    /*
     * Now write it out, encrypted
     */
    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
 8090038:	4639      	mov	r1, r7
 809003a:	30bc      	adds	r0, #188	; 0xbc
 809003c:	f7fc fe24 	bl	808cc88 <mbedtls_pk_can_do>
 8090040:	2800      	cmp	r0, #0
 8090042:	f000 8354 	beq.w	80906ee <mbedtls_ssl_handshake_client_step+0x9b2>

    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
                            p, ssl->handshake->pmslen,
                            ssl->out_msg + offset + len_bytes, olen,
                            MBEDTLS_SSL_MAX_CONTENT_LEN - offset - len_bytes,
                            ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 8090046:	6822      	ldr	r2, [r4, #0]
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
    }

    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 8090048:	6b21      	ldr	r1, [r4, #48]	; 0x30
 809004a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 809004c:	9104      	str	r1, [sp, #16]
 809004e:	69d1      	ldr	r1, [r2, #28]
 8090050:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8090052:	9103      	str	r1, [sp, #12]
 8090054:	6992      	ldr	r2, [r2, #24]
 8090056:	f8d4 7098 	ldr.w	r7, [r4, #152]	; 0x98
 809005a:	9202      	str	r2, [sp, #8]
 809005c:	f5c5 52ff 	rsb	r2, r5, #8160	; 0x1fe0
 8090060:	321c      	adds	r2, #28
 8090062:	9201      	str	r2, [sp, #4]
 8090064:	aa08      	add	r2, sp, #32
 8090066:	9200      	str	r2, [sp, #0]
 8090068:	9a04      	ldr	r2, [sp, #16]
 809006a:	1d2b      	adds	r3, r5, #4
 809006c:	443b      	add	r3, r7
 809006e:	f8d2 2170 	ldr.w	r2, [r2, #368]	; 0x170
 8090072:	4631      	mov	r1, r6
 8090074:	30bc      	adds	r0, #188	; 0xbc
 8090076:	f7fc fe71 	bl	808cd5c <mbedtls_pk_encrypt>
 809007a:	2800      	cmp	r0, #0
 809007c:	f040 8383 	bne.w	8090786 <mbedtls_ssl_handshake_client_step+0xa4a>
        return( ret );
    }

#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( len_bytes == 2 )
 8090080:	2d00      	cmp	r5, #0
 8090082:	f000 8336 	beq.w	80906f2 <mbedtls_ssl_handshake_client_step+0x9b6>
    {
        ssl->out_msg[offset+0] = (unsigned char)( *olen >> 8 );
 8090086:	9b08      	ldr	r3, [sp, #32]
 8090088:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 809008c:	0a19      	lsrs	r1, r3, #8
 809008e:	7111      	strb	r1, [r2, #4]
        ssl->out_msg[offset+1] = (unsigned char)( *olen      );
 8090090:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8090094:	7153      	strb	r3, [r2, #5]
        *olen += 2;
 8090096:	3302      	adds	r3, #2
 8090098:	9308      	str	r3, [sp, #32]
 809009a:	e32a      	b.n	80906f2 <mbedtls_ssl_handshake_client_step+0x9b6>
#else
static int ssl_write_certificate_verify( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 809009c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;
    unsigned int hashlen;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate verify" ) );

    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 809009e:	4620      	mov	r0, r4
#else
static int ssl_write_certificate_verify( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 80900a0:	681d      	ldr	r5, [r3, #0]
    size_t n = 0, offset = 0;
 80900a2:	2300      	movs	r3, #0
 80900a4:	9307      	str	r3, [sp, #28]
    mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;
    unsigned int hashlen;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate verify" ) );

    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 80900a6:	f7f9 fd8b 	bl	8089bc0 <mbedtls_ssl_derive_keys>
 80900aa:	2800      	cmp	r0, #0
 80900ac:	f040 836b 	bne.w	8090786 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
        return( ret );
    }

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 80900b0:	7aab      	ldrb	r3, [r5, #10]
 80900b2:	1f5a      	subs	r2, r3, #5
 80900b4:	2a03      	cmp	r2, #3
 80900b6:	d901      	bls.n	80900bc <mbedtls_ssl_handshake_client_step+0x380>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
 80900b8:	2b0b      	cmp	r3, #11
 80900ba:	d102      	bne.n	80900c2 <mbedtls_ssl_handshake_client_step+0x386>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
        ssl->state++;
 80900bc:	6863      	ldr	r3, [r4, #4]
 80900be:	3301      	adds	r3, #1
 80900c0:	e2cb      	b.n	809065a <mbedtls_ssl_handshake_client_step+0x91e>
        return( 0 );
    }

    if( ssl->client_auth == 0 || mbedtls_ssl_own_cert( ssl ) == NULL )
 80900c2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 80900c6:	2b00      	cmp	r3, #0
 80900c8:	d0f8      	beq.n	80900bc <mbedtls_ssl_handshake_client_step+0x380>

static inline mbedtls_x509_crt *mbedtls_ssl_own_cert( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 80900ca:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80900cc:	b10d      	cbz	r5, 80900d2 <mbedtls_ssl_handshake_client_step+0x396>
 80900ce:	686b      	ldr	r3, [r5, #4]
 80900d0:	b91b      	cbnz	r3, 80900da <mbedtls_ssl_handshake_client_step+0x39e>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
 80900d2:	6823      	ldr	r3, [r4, #0]
 80900d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return( key_cert == NULL ? NULL : key_cert->cert );
 80900d6:	2b00      	cmp	r3, #0
 80900d8:	d0f0      	beq.n	80900bc <mbedtls_ssl_handshake_client_step+0x380>
 80900da:	681b      	ldr	r3, [r3, #0]
 80900dc:	2b00      	cmp	r3, #0
 80900de:	d0ed      	beq.n	80900bc <mbedtls_ssl_handshake_client_step+0x380>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
        ssl->state++;
        return( 0 );
    }

    if( mbedtls_ssl_own_key( ssl ) == NULL )
 80900e0:	4620      	mov	r0, r4
 80900e2:	f7ff fe20 	bl	808fd26 <mbedtls_ssl_own_key>
 80900e6:	2800      	cmp	r0, #0
 80900e8:	d044      	beq.n	8090174 <mbedtls_ssl_handshake_client_step+0x438>
    }

    /*
     * Make an RSA signature of the handshake digests
     */
    ssl->handshake->calc_verify( ssl, hash );
 80900ea:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
 80900ee:	a908      	add	r1, sp, #32
 80900f0:	4620      	mov	r0, r4
 80900f2:	4798      	blx	r3
    }
    else
#endif /* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 || \
          MBEDTLS_SSL_PROTO_TLS1_1 */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 80900f4:	68e3      	ldr	r3, [r4, #12]
 80900f6:	2b03      	cmp	r3, #3
 80900f8:	d175      	bne.n	80901e6 <mbedtls_ssl_handshake_client_step+0x4aa>
         * shortcut.
         *
         * Reason: Otherwise we should have running hashes for SHA512 and SHA224
         *         in order to satisfy 'weird' needs from the server side.
         */
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
 80900fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
        }
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
 80900fc:	4620      	mov	r0, r4
         * shortcut.
         *
         * Reason: Otherwise we should have running hashes for SHA512 and SHA224
         *         in order to satisfy 'weird' needs from the server side.
         */
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
 80900fe:	681b      	ldr	r3, [r3, #0]
 8090100:	7a5d      	ldrb	r5, [r3, #9]
 8090102:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8090106:	2d07      	cmp	r5, #7
            MBEDTLS_MD_SHA384 )
        {
            md_alg = MBEDTLS_MD_SHA384;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
 8090108:	bf0b      	itete	eq
 809010a:	2205      	moveq	r2, #5
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
 809010c:	2204      	movne	r2, #4
         */
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
            MBEDTLS_MD_SHA384 )
        {
            md_alg = MBEDTLS_MD_SHA384;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
 809010e:	711a      	strbeq	r2, [r3, #4]
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
 8090110:	711a      	strbne	r2, [r3, #4]
            md_alg = MBEDTLS_MD_SHA384;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
 8090112:	bf18      	it	ne
 8090114:	2506      	movne	r5, #6
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
        }
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
 8090116:	f7ff fe06 	bl	808fd26 <mbedtls_ssl_own_key>
 809011a:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
 809011e:	f7fa ffe6 	bl	808b0ee <mbedtls_ssl_sig_from_pk>
 8090122:	7170      	strb	r0, [r6, #5]
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 8090124:	4620      	mov	r0, r4
 8090126:	f7ff fdfe 	bl	808fd26 <mbedtls_ssl_own_key>
                         ssl->out_msg + 6 + offset, &n,
                         ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 809012a:	6823      	ldr	r3, [r4, #0]
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 809012c:	4629      	mov	r1, r5
 809012e:	69da      	ldr	r2, [r3, #28]
 8090130:	9203      	str	r2, [sp, #12]
 8090132:	699b      	ldr	r3, [r3, #24]
 8090134:	aa08      	add	r2, sp, #32
 8090136:	9302      	str	r3, [sp, #8]
 8090138:	ab07      	add	r3, sp, #28
 809013a:	9301      	str	r3, [sp, #4]
 809013c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8090140:	3308      	adds	r3, #8
 8090142:	9300      	str	r3, [sp, #0]
 8090144:	2300      	movs	r3, #0
 8090146:	f7fc fdd5 	bl	808ccf4 <mbedtls_pk_sign>
 809014a:	2800      	cmp	r0, #0
 809014c:	f040 831b 	bne.w	8090786 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_pk_sign", ret );
        return( ret );
    }

    ssl->out_msg[4 + offset] = (unsigned char)( n >> 8 );
 8090150:	9b07      	ldr	r3, [sp, #28]
 8090152:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8090156:	0a19      	lsrs	r1, r3, #8
 8090158:	7191      	strb	r1, [r2, #6]
    ssl->out_msg[5 + offset] = (unsigned char)( n      );
 809015a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 809015e:	71d3      	strb	r3, [r2, #7]

    ssl->out_msglen  = 6 + n + offset;
 8090160:	3308      	adds	r3, #8
 8090162:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 8090166:	2316      	movs	r3, #22
 8090168:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE_VERIFY;
 809016c:	220f      	movs	r2, #15
 809016e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8090172:	e2c8      	b.n	8090706 <mbedtls_ssl_handshake_client_step+0x9ca>
    }

    if( mbedtls_ssl_own_key( ssl ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no private key for certificate" ) );
        return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
 8090174:	4806      	ldr	r0, [pc, #24]	; (8090190 <mbedtls_ssl_handshake_client_step+0x454>)
 8090176:	e306      	b.n	8090786 <mbedtls_ssl_handshake_client_step+0xa4a>
       case MBEDTLS_SSL_CERTIFICATE_VERIFY:
           ret = ssl_write_certificate_verify( ssl );
           break;

       case MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC:
           ret = mbedtls_ssl_write_change_cipher_spec( ssl );
 8090178:	4620      	mov	r0, r4
 809017a:	f7fa fb91 	bl	808a8a0 <mbedtls_ssl_write_change_cipher_spec>
           break;
 809017e:	e302      	b.n	8090786 <mbedtls_ssl_handshake_client_step+0xa4a>

       case MBEDTLS_SSL_CLIENT_FINISHED:
           ret = mbedtls_ssl_write_finished( ssl );
 8090180:	4620      	mov	r0, r4
 8090182:	f7fa fbe5 	bl	808a950 <mbedtls_ssl_write_finished>
           break;
 8090186:	e2fe      	b.n	8090786 <mbedtls_ssl_handshake_client_step+0xa4a>
 8090188:	ffff8f00 	.word	0xffff8f00
 809018c:	ffff8680 	.word	0xffff8680
 8090190:	ffff8a00 	.word	0xffff8a00
    unsigned char *ticket;
    const unsigned char *msg;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse new session ticket" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 8090194:	4620      	mov	r0, r4
 8090196:	f7fa fb01 	bl	808a79c <mbedtls_ssl_read_record>
 809019a:	2800      	cmp	r0, #0
 809019c:	f040 82f3 	bne.w	8090786 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 80901a0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80901a2:	2b16      	cmp	r3, #22
 80901a4:	f47f ae3f 	bne.w	808fe26 <mbedtls_ssl_handshake_client_step+0xea>
     *
     * 0  .  3   ticket_lifetime_hint
     * 4  .  5   ticket_len (n)
     * 6  .  5+n ticket content
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||
 80901a8:	6e67      	ldr	r7, [r4, #100]	; 0x64
 80901aa:	783b      	ldrb	r3, [r7, #0]
 80901ac:	2b04      	cmp	r3, #4
 80901ae:	d103      	bne.n	80901b8 <mbedtls_ssl_handshake_client_step+0x47c>
        ssl->in_hslen < 6 + mbedtls_ssl_hs_hdr_len( ssl ) )
 80901b0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
     *
     * 0  .  3   ticket_lifetime_hint
     * 4  .  5   ticket_len (n)
     * 6  .  5+n ticket content
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||
 80901b2:	2b09      	cmp	r3, #9
 80901b4:	f200 82af 	bhi.w	8090716 <mbedtls_ssl_handshake_client_step+0x9da>

    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad new session ticket message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 80901b8:	2232      	movs	r2, #50	; 0x32
 80901ba:	2102      	movs	r1, #2
 80901bc:	4620      	mov	r0, r4
 80901be:	f7fa f89f 	bl	808a300 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
 80901c2:	48c1      	ldr	r0, [pc, #772]	; (80904c8 <mbedtls_ssl_handshake_client_step+0x78c>)
 80901c4:	e2df      	b.n	8090786 <mbedtls_ssl_handshake_client_step+0xa4a>
           ret = ssl_parse_new_session_ticket( ssl );
           break;
#endif

       case MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC:
           ret = mbedtls_ssl_parse_change_cipher_spec( ssl );
 80901c6:	4620      	mov	r0, r4
 80901c8:	f7fa fb78 	bl	808a8bc <mbedtls_ssl_parse_change_cipher_spec>
           break;
 80901cc:	e2db      	b.n	8090786 <mbedtls_ssl_handshake_client_step+0xa4a>

       case MBEDTLS_SSL_SERVER_FINISHED:
           ret = mbedtls_ssl_parse_finished( ssl );
 80901ce:	4620      	mov	r0, r4
 80901d0:	f7fa fc06 	bl	808a9e0 <mbedtls_ssl_parse_finished>
           break;
 80901d4:	e2d7      	b.n	8090786 <mbedtls_ssl_handshake_client_step+0xa4a>

       case MBEDTLS_SSL_FLUSH_BUFFERS:
           MBEDTLS_SSL_DEBUG_MSG( 2, ( "handshake: done" ) );
           ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 80901d6:	230f      	movs	r3, #15
 80901d8:	e23f      	b.n	809065a <mbedtls_ssl_handshake_client_step+0x91e>
           break;

       case MBEDTLS_SSL_HANDSHAKE_WRAPUP:
           mbedtls_ssl_handshake_wrapup( ssl );
 80901da:	4620      	mov	r0, r4
 80901dc:	f7fa fe02 	bl	808ade4 <mbedtls_ssl_handshake_wrapup>
 80901e0:	e23c      	b.n	809065c <mbedtls_ssl_handshake_client_step+0x920>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );

    if( ssl->conf->f_rng == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "no RNG provided") );
        return( MBEDTLS_ERR_SSL_NO_RNG );
 80901e2:	48ba      	ldr	r0, [pc, #744]	; (80904cc <mbedtls_ssl_handshake_client_step+0x790>)
 80901e4:	e2cf      	b.n	8090786 <mbedtls_ssl_handshake_client_step+0xa4a>
    }
    else
#endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80901e6:	48ba      	ldr	r0, [pc, #744]	; (80904d0 <mbedtls_ssl_handshake_client_step+0x794>)
 80901e8:	e2cd      	b.n	8090786 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_generate_random", ret );
        return( ret );
    }

    memcpy( p, ssl->handshake->randbytes, 32 );
 80901ea:	f852 0b04 	ldr.w	r0, [r2], #4
 80901ee:	429a      	cmp	r2, r3
 80901f0:	f841 0b04 	str.w	r0, [r1], #4
 80901f4:	d1f9      	bne.n	80901ea <mbedtls_ssl_handshake_client_step+0x4ae>
     *   ..   . ..    compression methods length (1 byte)
     *   ..   . ..    compression methods
     *   ..   . ..    extensions length (2 bytes)
     *   ..   . ..    extensions
     */
    n = ssl->session_negotiate->id_len;
 80901f6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80901f8:	688b      	ldr	r3, [r1, #8]

    if( n < 16 || n > 32 ||
 80901fa:	f1a3 0210 	sub.w	r2, r3, #16
 80901fe:	2a10      	cmp	r2, #16
 8090200:	d806      	bhi.n	8090210 <mbedtls_ssl_handshake_client_step+0x4d4>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->handshake->resume == 0 )
 8090202:	6b22      	ldr	r2, [r4, #48]	; 0x30
     *   ..   . ..    extensions length (2 bytes)
     *   ..   . ..    extensions
     */
    n = ssl->session_negotiate->id_len;

    if( n < 16 || n > 32 ||
 8090204:	f8d2 21e4 	ldr.w	r2, [r2, #484]	; 0x1e4
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->handshake->resume == 0 )
    {
        n = 0;
 8090208:	2a00      	cmp	r2, #0
 809020a:	bf08      	it	eq
 809020c:	2300      	moveq	r3, #0
 809020e:	e000      	b.n	8090212 <mbedtls_ssl_handshake_client_step+0x4d6>
 8090210:	2300      	movs	r3, #0
     */
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        if( ssl->session_negotiate->ticket != NULL &&
 8090212:	6e4a      	ldr	r2, [r1, #100]	; 0x64
 8090214:	b16a      	cbz	r2, 8090232 <mbedtls_ssl_handshake_client_step+0x4f6>
 8090216:	6e8a      	ldr	r2, [r1, #104]	; 0x68
 8090218:	b15a      	cbz	r2, 8090232 <mbedtls_ssl_handshake_client_step+0x4f6>
                ssl->session_negotiate->ticket_len != 0 )
        {
            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->session_negotiate->id, 32 );
 809021a:	6823      	ldr	r3, [r4, #0]
 809021c:	2220      	movs	r2, #32
 809021e:	699d      	ldr	r5, [r3, #24]
 8090220:	310c      	adds	r1, #12
 8090222:	69d8      	ldr	r0, [r3, #28]
 8090224:	47a8      	blx	r5

            if( ret != 0 )
 8090226:	2800      	cmp	r0, #0
 8090228:	f040 82ad 	bne.w	8090786 <mbedtls_ssl_handshake_client_step+0xa4a>
                return( ret );

            ssl->session_negotiate->id_len = n = 32;
 809022c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 809022e:	2320      	movs	r3, #32
 8090230:	6093      	str	r3, [r2, #8]
        }
    }
#endif /* MBEDTLS_SSL_SESSION_TICKETS */

    *p++ = (unsigned char) n;
 8090232:	f106 0527 	add.w	r5, r6, #39	; 0x27
 8090236:	f886 3026 	strb.w	r3, [r6, #38]	; 0x26

    for( i = 0; i < n; i++ )
 809023a:	2200      	movs	r2, #0
 809023c:	4293      	cmp	r3, r2
 809023e:	d005      	beq.n	809024c <mbedtls_ssl_handshake_client_step+0x510>
        *p++ = ssl->session_negotiate->id[i];
 8090240:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8090242:	4411      	add	r1, r2
 8090244:	7b09      	ldrb	r1, [r1, #12]
 8090246:	54a9      	strb	r1, [r5, r2]
    }
#endif /* MBEDTLS_SSL_SESSION_TICKETS */

    *p++ = (unsigned char) n;

    for( i = 0; i < n; i++ )
 8090248:	3201      	adds	r2, #1
 809024a:	e7f7      	b.n	809023c <mbedtls_ssl_handshake_client_step+0x500>
 809024c:	441d      	add	r5, r3
#endif

    /*
     * Ciphersuite list
     */
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];
 809024e:	68e2      	ldr	r2, [r4, #12]
 8090250:	6823      	ldr	r3, [r4, #0]

    /* Skip writing ciphersuite length for now */
    n = 0;
    q = p;
    p += 2;
 8090252:	f105 0902 	add.w	r9, r5, #2
 8090256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     * Ciphersuite list
     */
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];

    /* Skip writing ciphersuite length for now */
    n = 0;
 809025a:	2700      	movs	r7, #0
 809025c:	f1a3 0804 	sub.w	r8, r3, #4
    q = p;
    p += 2;

    for( i = 0; ciphersuites[i] != 0; i++ )
 8090260:	f858 bf04 	ldr.w	fp, [r8, #4]!
 8090264:	f1bb 0f00 	cmp.w	fp, #0
 8090268:	d01c      	beq.n	80902a4 <mbedtls_ssl_handshake_client_step+0x568>
    {
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );
 809026a:	4658      	mov	r0, fp
 809026c:	f7f6 fb40 	bl	80868f0 <mbedtls_ssl_ciphersuite_from_id>

        if( ssl_validate_ciphersuite( ciphersuite_info, ssl,
                                      ssl->conf->min_minor_ver,
 8090270:	6822      	ldr	r2, [r4, #0]

    for( i = 0; ciphersuites[i] != 0; i++ )
    {
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );

        if( ssl_validate_ciphersuite( ciphersuite_info, ssl,
 8090272:	f892 105d 	ldrb.w	r1, [r2, #93]	; 0x5d
static int ssl_validate_ciphersuite( const mbedtls_ssl_ciphersuite_t * suite_info,
                                     const mbedtls_ssl_context * ssl,
                                     int min_minor_ver, int max_minor_ver )
{
    (void) ssl;
    if( suite_info == NULL )
 8090276:	2800      	cmp	r0, #0
 8090278:	d0f2      	beq.n	8090260 <mbedtls_ssl_handshake_client_step+0x524>
        return( 1 );

    if( suite_info->min_minor_ver > max_minor_ver ||
 809027a:	6903      	ldr	r3, [r0, #16]
 809027c:	4299      	cmp	r1, r3
 809027e:	dbef      	blt.n	8090260 <mbedtls_ssl_handshake_client_step+0x524>
 8090280:	f892 205f 	ldrb.w	r2, [r2, #95]	; 0x5f
 8090284:	6983      	ldr	r3, [r0, #24]
 8090286:	429a      	cmp	r2, r3
 8090288:	dcea      	bgt.n	8090260 <mbedtls_ssl_handshake_client_step+0x524>

        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
                                    ciphersuites[i] ) );

        n++;
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
 809028a:	f8d8 3000 	ldr.w	r3, [r8]
            continue;

        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
                                    ciphersuites[i] ) );

        n++;
 809028e:	3701      	adds	r7, #1
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
 8090290:	121a      	asrs	r2, r3, #8
 8090292:	464b      	mov	r3, r9
 8090294:	f803 2b02 	strb.w	r2, [r3], #2
        *p++ = (unsigned char)( ciphersuites[i]      );
 8090298:	f8d8 2000 	ldr.w	r2, [r8]
 809029c:	f889 2001 	strb.w	r2, [r9, #1]
 80902a0:	4699      	mov	r9, r3
 80902a2:	e7dd      	b.n	8090260 <mbedtls_ssl_handshake_client_step+0x524>
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
 80902a4:	23ff      	movs	r3, #255	; 0xff
        n++;
 80902a6:	3701      	adds	r7, #1
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
 80902a8:	f889 3001 	strb.w	r3, [r9, #1]
        *p++ = (unsigned char)( MBEDTLS_SSL_FALLBACK_SCSV_VALUE      );
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
 80902ac:	09fb      	lsrs	r3, r7, #7
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
 80902ae:	f889 b000 	strb.w	fp, [r9]
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
    *q++ = (unsigned char)( n << 1 );
 80902b2:	007f      	lsls	r7, r7, #1
        *p++ = (unsigned char)( MBEDTLS_SSL_FALLBACK_SCSV_VALUE      );
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
 80902b4:	702b      	strb	r3, [r5, #0]
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
 80902b6:	2301      	movs	r3, #1
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
    *q++ = (unsigned char)( n << 1 );
 80902b8:	706f      	strb	r7, [r5, #1]
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
 80902ba:	f889 3002 	strb.w	r3, [r9, #2]
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
 80902be:	f889 b003 	strb.w	fp, [r9, #3]
static void ssl_write_hostname_ext( mbedtls_ssl_context *ssl,
                                    unsigned char *buf,
                                    size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 80902c2:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
    size_t hostname_len;

    *olen = 0;

    if( ssl->hostname == NULL )
 80902c6:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
 80902ca:	f109 0704 	add.w	r7, r9, #4
    }

    // First write extensions, then the total length
    //
#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    ssl_write_hostname_ext( ssl, p + 2 + ext_len, &olen );
 80902ce:	f109 0806 	add.w	r8, r9, #6
static void ssl_write_hostname_ext( mbedtls_ssl_context *ssl,
                                    unsigned char *buf,
                                    size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 80902d2:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
    size_t hostname_len;

    *olen = 0;

    if( ssl->hostname == NULL )
 80902d6:	b358      	cbz	r0, 8090330 <mbedtls_ssl_handshake_client_step+0x5f4>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding server name extension: %s",
                   ssl->hostname ) );

    hostname_len = strlen( ssl->hostname );
 80902d8:	f003 fc97 	bl	8093c0a <strlen>

    if( end < p || (size_t)( end - p ) < hostname_len + 9 )
 80902dc:	45a8      	cmp	r8, r5
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding server name extension: %s",
                   ssl->hostname ) );

    hostname_len = strlen( ssl->hostname );
 80902de:	4602      	mov	r2, r0

    if( end < p || (size_t)( end - p ) < hostname_len + 9 )
 80902e0:	d828      	bhi.n	8090334 <mbedtls_ssl_handshake_client_step+0x5f8>
 80902e2:	f100 0a09 	add.w	sl, r0, #9
 80902e6:	ebc8 0505 	rsb	r5, r8, r5
 80902ea:	4555      	cmp	r5, sl
 80902ec:	d322      	bcc.n	8090334 <mbedtls_ssl_handshake_client_step+0x5f8>
     *
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME      ) & 0xFF );

    *p++ = (unsigned char)( ( (hostname_len + 5) >> 8 ) & 0xFF );
 80902ee:	1d43      	adds	r3, r0, #5
 80902f0:	0a1b      	lsrs	r3, r3, #8
 80902f2:	f889 3008 	strb.w	r3, [r9, #8]
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );
 80902f6:	b2c3      	uxtb	r3, r0
 80902f8:	1d59      	adds	r1, r3, #5
 80902fa:	f889 1009 	strb.w	r1, [r9, #9]

    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
 80902fe:	1cc1      	adds	r1, r0, #3
 8090300:	0a09      	lsrs	r1, r1, #8
 8090302:	f889 100a 	strb.w	r1, [r9, #10]
    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );
 8090306:	1cd9      	adds	r1, r3, #3
 8090308:	f889 100b 	strb.w	r1, [r9, #11]

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME ) & 0xFF );
    *p++ = (unsigned char)( ( hostname_len >> 8 ) & 0xFF );
 809030c:	0a01      	lsrs	r1, r0, #8
     * struct {
     *     ServerName server_name_list<1..2^16-1>
     * } ServerNameList;
     *
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME >> 8 ) & 0xFF );
 809030e:	f889 b006 	strb.w	fp, [r9, #6]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME      ) & 0xFF );
 8090312:	f889 b007 	strb.w	fp, [r9, #7]
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );

    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME ) & 0xFF );
 8090316:	f889 b00c 	strb.w	fp, [r9, #12]
    *p++ = (unsigned char)( ( hostname_len >> 8 ) & 0xFF );
 809031a:	f889 100d 	strb.w	r1, [r9, #13]
    *p++ = (unsigned char)( ( hostname_len      ) & 0xFF );
 809031e:	f889 300e 	strb.w	r3, [r9, #14]

    memcpy( p, ssl->hostname, hostname_len );
 8090322:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8090326:	f109 000f 	add.w	r0, r9, #15
 809032a:	f003 fc28 	bl	8093b7e <memcpy>
 809032e:	e002      	b.n	8090336 <mbedtls_ssl_handshake_client_step+0x5fa>
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t hostname_len;

    *olen = 0;
 8090330:	4682      	mov	sl, r0
 8090332:	e000      	b.n	8090336 <mbedtls_ssl_handshake_client_step+0x5fa>
 8090334:	46da      	mov	sl, fp
    unsigned char *sig_alg_list = buf + 6;
#endif

    *olen = 0;

    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
 8090336:	6823      	ldr	r3, [r4, #0]
 8090338:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 809033c:	2a03      	cmp	r2, #3
 809033e:	d13c      	bne.n	80903ba <mbedtls_ssl_handshake_client_step+0x67e>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 8090340:	6d59      	ldr	r1, [r3, #84]	; 0x54
                                                unsigned char *buf,
                                                size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t sig_alg_len = 0;
 8090342:	2000      	movs	r0, #0
    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 8090344:	f851 3010 	ldr.w	r3, [r1, r0, lsl #1]
 8090348:	b10b      	cbz	r3, 809034e <mbedtls_ssl_handshake_client_step+0x612>
    {
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_len += 2;
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_len += 2;
 809034a:	3002      	adds	r0, #2
 809034c:	e7fa      	b.n	8090344 <mbedtls_ssl_handshake_client_step+0x608>
static void ssl_write_signature_algorithms_ext( mbedtls_ssl_context *ssl,
                                                unsigned char *buf,
                                                size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 809034e:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
 8090352:	f10a 0b02 	add.w	fp, sl, #2
 8090356:	44bb      	add	fp, r7
static void ssl_write_signature_algorithms_ext( mbedtls_ssl_context *ssl,
                                                unsigned char *buf,
                                                size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 8090358:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
#if defined(MBEDTLS_RSA_C)
        sig_alg_len += 2;
#endif
    }

    if( end < p || (size_t)( end - p ) < sig_alg_len + 6 )
 809035c:	4593      	cmp	fp, r2
 809035e:	d82d      	bhi.n	80903bc <mbedtls_ssl_handshake_client_step+0x680>
 8090360:	ebcb 0202 	rsb	r2, fp, r2
 8090364:	3006      	adds	r0, #6
 8090366:	4282      	cmp	r2, r0
 8090368:	d328      	bcc.n	80903bc <mbedtls_ssl_handshake_client_step+0x680>
 809036a:	461d      	mov	r5, r3
    /*
     * Prepare signature_algorithms extension (TLS 1.2)
     */
    sig_alg_len = 0;

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 809036c:	f851 0015 	ldr.w	r0, [r1, r5, lsl #1]
 8090370:	9105      	str	r1, [sp, #20]
 8090372:	1caa      	adds	r2, r5, #2
 8090374:	b170      	cbz	r0, 8090394 <mbedtls_ssl_handshake_client_step+0x658>
 8090376:	9204      	str	r2, [sp, #16]
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 8090378:	f7fa fec2 	bl	808b100 <mbedtls_ssl_hash_from_md_alg>
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 809037c:	9a04      	ldr	r2, [sp, #16]
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 809037e:	eb0b 0305 	add.w	r3, fp, r5
 8090382:	7198      	strb	r0, [r3, #6]
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 8090384:	4615      	mov	r5, r2
 8090386:	eb0b 0302 	add.w	r3, fp, r2
 809038a:	f04f 0201 	mov.w	r2, #1
 809038e:	9905      	ldr	r1, [sp, #20]
 8090390:	715a      	strb	r2, [r3, #5]
 8090392:	e7eb      	b.n	809036c <mbedtls_ssl_handshake_client_step+0x630>
     *
     * SignatureAndHashAlgorithm
     *   supported_signature_algorithms<2..2^16-2>;
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );
 8090394:	230d      	movs	r3, #13
 8090396:	f88b 3001 	strb.w	r3, [fp, #1]

    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
 809039a:	0a13      	lsrs	r3, r2, #8
 809039c:	f88b 3002 	strb.w	r3, [fp, #2]
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );
 80903a0:	b2eb      	uxtb	r3, r5
 80903a2:	1c9a      	adds	r2, r3, #2
 80903a4:	f88b 2003 	strb.w	r2, [fp, #3]

    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
 80903a8:	0a2a      	lsrs	r2, r5, #8
    *p++ = (unsigned char)( ( sig_alg_len      ) & 0xFF );
 80903aa:	f88b 3005 	strb.w	r3, [fp, #5]
     * } SignatureAndHashAlgorithm;
     *
     * SignatureAndHashAlgorithm
     *   supported_signature_algorithms<2..2^16-2>;
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
 80903ae:	f88b 0000 	strb.w	r0, [fp]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );

    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );

    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
 80903b2:	f88b 2004 	strb.w	r2, [fp, #4]
    *p++ = (unsigned char)( ( sig_alg_len      ) & 0xFF );

    *olen = 6 + sig_alg_len;
 80903b6:	1dab      	adds	r3, r5, #6
 80903b8:	e000      	b.n	80903bc <mbedtls_ssl_handshake_client_step+0x680>
    const int *md;
#if defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C)
    unsigned char *sig_alg_list = buf + 6;
#endif

    *olen = 0;
 80903ba:	2300      	movs	r3, #0
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;

    *olen = 0;

    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ) {
 80903bc:	6822      	ldr	r2, [r4, #0]
#endif

#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
 80903be:	4453      	add	r3, sl
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;

    *olen = 0;

    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ) {
 80903c0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80903c4:	f412 72e0 	ands.w	r2, r2, #448	; 0x1c0
 80903c8:	d018      	beq.n	80903fc <mbedtls_ssl_handshake_client_step+0x6c0>
static void ssl_write_max_fragment_length_ext( mbedtls_ssl_context *ssl,
                                               unsigned char *buf,
                                               size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 80903ca:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    ssl_write_ecjpake_kkpp_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );
 80903ce:	1c99      	adds	r1, r3, #2
 80903d0:	4439      	add	r1, r7
static void ssl_write_max_fragment_length_ext( mbedtls_ssl_context *ssl,
                                               unsigned char *buf,
                                               size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 80903d2:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding max_fragment_length extension" ) );

    if( end < p || (size_t)( end - p ) < 5 )
 80903d6:	4281      	cmp	r1, r0
 80903d8:	f04f 0200 	mov.w	r2, #0
 80903dc:	d80e      	bhi.n	80903fc <mbedtls_ssl_handshake_client_step+0x6c0>
 80903de:	1a40      	subs	r0, r0, r1
 80903e0:	2804      	cmp	r0, #4
 80903e2:	d90b      	bls.n	80903fc <mbedtls_ssl_handshake_client_step+0x6c0>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );
 80903e4:	2001      	movs	r0, #1
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );
 80903e6:	700a      	strb	r2, [r1, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );
 80903e8:	7048      	strb	r0, [r1, #1]

    *p++ = 0x00;
 80903ea:	708a      	strb	r2, [r1, #2]
    *p++ = 1;
 80903ec:	70c8      	strb	r0, [r1, #3]

    *p++ = ssl->conf->mfl_code;
 80903ee:	6822      	ldr	r2, [r4, #0]
 80903f0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80903f4:	f3c2 1282 	ubfx	r2, r2, #6, #3
 80903f8:	710a      	strb	r2, [r1, #4]

    *olen = 5;
 80903fa:	2205      	movs	r2, #5
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
 80903fc:	189d      	adds	r5, r3, r2
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;

    *olen = 0;

    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED )
 80903fe:	6823      	ldr	r3, [r4, #0]
 8090400:	f893 1061 	ldrb.w	r1, [r3, #97]	; 0x61
 8090404:	f001 0102 	and.w	r1, r1, #2
 8090408:	f001 0aff 	and.w	sl, r1, #255	; 0xff
 809040c:	b329      	cbz	r1, 809045a <mbedtls_ssl_handshake_client_step+0x71e>
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 809040e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    ssl_write_alpn_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    ssl_write_session_ticket_ext( ssl, p + 2 + ext_len, &olen );
 8090412:	1ca8      	adds	r0, r5, #2
 8090414:	4438      	add	r0, r7
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 8090416:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );

    if( end < p || (size_t)( end - p ) < 4 + tlen )
 809041a:	4298      	cmp	r0, r3
 809041c:	d816      	bhi.n	809044c <mbedtls_ssl_handshake_client_step+0x710>
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;
 809041e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );

    if( end < p || (size_t)( end - p ) < 4 + tlen )
 8090420:	1a1b      	subs	r3, r3, r0
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;
 8090422:	6e92      	ldr	r2, [r2, #104]	; 0x68
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );

    if( end < p || (size_t)( end - p ) < 4 + tlen )
 8090424:	f102 0a04 	add.w	sl, r2, #4
 8090428:	4553      	cmp	r3, sl
 809042a:	f04f 0300 	mov.w	r3, #0
 809042e:	d310      	bcc.n	8090452 <mbedtls_ssl_handshake_client_step+0x716>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET >> 8 ) & 0xFF );
 8090430:	7003      	strb	r3, [r0, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET      ) & 0xFF );
 8090432:	2323      	movs	r3, #35	; 0x23
 8090434:	7043      	strb	r3, [r0, #1]

    *p++ = (unsigned char)( ( tlen >> 8 ) & 0xFF );
 8090436:	0a13      	lsrs	r3, r2, #8
 8090438:	7083      	strb	r3, [r0, #2]
    *p++ = (unsigned char)( ( tlen      ) & 0xFF );
 809043a:	70c2      	strb	r2, [r0, #3]

    *olen = 4;

    if( ssl->session_negotiate->ticket == NULL || tlen == 0 )
 809043c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 809043e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8090440:	b149      	cbz	r1, 8090456 <mbedtls_ssl_handshake_client_step+0x71a>
 8090442:	b142      	cbz	r2, 8090456 <mbedtls_ssl_handshake_client_step+0x71a>
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "sending session ticket of length %d", tlen ) );

    memcpy( p, ssl->session_negotiate->ticket, tlen );
 8090444:	3004      	adds	r0, #4
 8090446:	f003 fb9a 	bl	8093b7e <memcpy>
 809044a:	e006      	b.n	809045a <mbedtls_ssl_handshake_client_step+0x71e>
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;

    *olen = 0;
 809044c:	f04f 0a00 	mov.w	sl, #0
 8090450:	e003      	b.n	809045a <mbedtls_ssl_handshake_client_step+0x71e>
 8090452:	469a      	mov	sl, r3
 8090454:	e001      	b.n	809045a <mbedtls_ssl_handshake_client_step+0x71e>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET      ) & 0xFF );

    *p++ = (unsigned char)( ( tlen >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( tlen      ) & 0xFF );

    *olen = 4;
 8090456:	f04f 0a04 	mov.w	sl, #4
    ((void) olen);

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, total extension length: %d",
                   ext_len ) );

    if( ext_len > 0 )
 809045a:	eb15 030a 	adds.w	r3, r5, sl
    {
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
 809045e:	bf1f      	itttt	ne
 8090460:	0a1a      	lsrne	r2, r3, #8
 8090462:	f889 2004 	strbne.w	r2, [r9, #4]
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
 8090466:	f889 3005 	strbne.w	r3, [r9, #5]
        p += ext_len;
 809046a:	eb08 0703 	addne.w	r7, r8, r3
    }

    ssl->out_msglen  = p - buf;
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 809046e:	2316      	movs	r3, #22
 8090470:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 8090474:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8090478:	2201      	movs	r2, #1
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
        p += ext_len;
    }

    ssl->out_msglen  = p - buf;
 809047a:	1bbe      	subs	r6, r7, r6
 809047c:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 8090480:	701a      	strb	r2, [r3, #0]

    ssl->state++;
 8090482:	6863      	ldr	r3, [r4, #4]
 8090484:	4413      	add	r3, r2
 8090486:	e141      	b.n	809070c <mbedtls_ssl_handshake_client_step+0x9d0>
                            ssl->conf->min_major_ver, ssl->conf->min_minor_ver,
                            ssl->major_ver, ssl->minor_ver,
                            ssl->conf->max_major_ver, ssl->conf->max_minor_ver ) );

        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                     MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION );
 8090488:	2246      	movs	r2, #70	; 0x46
 809048a:	2102      	movs	r1, #2
 809048c:	4620      	mov	r0, r4
 809048e:	f7f9 ff37 	bl	808a300 <mbedtls_ssl_send_alert_message>

        return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );
 8090492:	4810      	ldr	r0, [pc, #64]	; (80904d4 <mbedtls_ssl_handshake_client_step+0x798>)
 8090494:	e177      	b.n	8090786 <mbedtls_ssl_handshake_client_step+0xa4a>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    if( ssl->in_hslen > mbedtls_ssl_hs_hdr_len( ssl ) + 39 + n )
 8090496:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8090498:	f106 022b 	add.w	r2, r6, #43	; 0x2b
 809049c:	4293      	cmp	r3, r2
 809049e:	d91b      	bls.n	80904d8 <mbedtls_ssl_handshake_client_step+0x79c>
    {
        ext_len = ( ( buf[38 + n] <<  8 )
 80904a0:	eb08 0206 	add.w	r2, r8, r6
                  | ( buf[39 + n]       ) );
 80904a4:	f892 7026 	ldrb.w	r7, [r2, #38]	; 0x26
 80904a8:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 80904ac:	ea42 2707 	orr.w	r7, r2, r7, lsl #8

        if( ( ext_len > 0 && ext_len < 4 ) ||
 80904b0:	1e7a      	subs	r2, r7, #1
 80904b2:	2a02      	cmp	r2, #2
 80904b4:	f67f acfa 	bls.w	808feac <mbedtls_ssl_handshake_client_step+0x170>
 80904b8:	f106 022c 	add.w	r2, r6, #44	; 0x2c
 80904bc:	443a      	add	r2, r7
 80904be:	4293      	cmp	r3, r2
 80904c0:	f47f acf4 	bne.w	808feac <mbedtls_ssl_handshake_client_step+0x170>
 80904c4:	e00e      	b.n	80904e4 <mbedtls_ssl_handshake_client_step+0x7a8>
 80904c6:	bf00      	nop
 80904c8:	ffff9200 	.word	0xffff9200
 80904cc:	ffff8c00 	.word	0xffff8c00
 80904d0:	ffff9400 	.word	0xffff9400
 80904d4:	ffff9180 	.word	0xffff9180
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }
    }
    else if( ssl->in_hslen == mbedtls_ssl_hs_hdr_len( ssl ) + 38 + n )
 80904d8:	f106 022a 	add.w	r2, r6, #42	; 0x2a
 80904dc:	4293      	cmp	r3, r2
 80904de:	f47f ace5 	bne.w	808feac <mbedtls_ssl_handshake_client_step+0x170>
    {
        ext_len = 0;
 80904e2:	2700      	movs	r7, #0
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    /* ciphersuite (used later) */
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
 80904e4:	eb08 0306 	add.w	r3, r8, r6
 80904e8:	f893 9023 	ldrb.w	r9, [r3, #35]	; 0x23
 80904ec:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
        accept_comp = 1;

    if( comp != MBEDTLS_SSL_COMPRESS_NULL &&
        ( comp != MBEDTLS_SSL_COMPRESS_DEFLATE || accept_comp == 0 ) )
#else /* MBEDTLS_ZLIB_SUPPORT */
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
 80904f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    /* ciphersuite (used later) */
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
 80904f4:	ea42 2909 	orr.w	r9, r2, r9, lsl #8
        accept_comp = 1;

    if( comp != MBEDTLS_SSL_COMPRESS_NULL &&
        ( comp != MBEDTLS_SSL_COMPRESS_DEFLATE || accept_comp == 0 ) )
#else /* MBEDTLS_ZLIB_SUPPORT */
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
 80904f8:	2b00      	cmp	r3, #0
 80904fa:	f43f acd9 	beq.w	808feb0 <mbedtls_ssl_handshake_client_step+0x174>
#endif/* MBEDTLS_ZLIB_SUPPORT */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server hello, bad compression: %d", comp ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
 80904fe:	222f      	movs	r2, #47	; 0x2f
 8090500:	2102      	movs	r1, #2
 8090502:	4620      	mov	r0, r4
 8090504:	f7f9 fefc 	bl	808a300 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
 8090508:	48a0      	ldr	r0, [pc, #640]	; (809078c <mbedtls_ssl_handshake_client_step+0xa50>)
 809050a:	e13c      	b.n	8090786 <mbedtls_ssl_handshake_client_step+0xa4a>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
 809050c:	2e00      	cmp	r6, #0
 809050e:	f43f acec 	beq.w	808feea <mbedtls_ssl_handshake_client_step+0x1ae>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
 8090512:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
 8090514:	6803      	ldr	r3, [r0, #0]
 8090516:	4599      	cmp	r9, r3
 8090518:	f47f ace7 	bne.w	808feea <mbedtls_ssl_handshake_client_step+0x1ae>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
 809051c:	6843      	ldr	r3, [r0, #4]
 809051e:	2b00      	cmp	r3, #0
 8090520:	f47f ace3 	bne.w	808feea <mbedtls_ssl_handshake_client_step+0x1ae>
        ssl->session_negotiate->compression != comp ||
 8090524:	6883      	ldr	r3, [r0, #8]
 8090526:	429e      	cmp	r6, r3
 8090528:	f47f acdf 	bne.w	808feea <mbedtls_ssl_handshake_client_step+0x1ae>
        ssl->session_negotiate->id_len != n ||
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
 809052c:	4632      	mov	r2, r6
 809052e:	4629      	mov	r1, r5
 8090530:	300c      	adds	r0, #12
 8090532:	f003 fb15 	bl	8093b60 <memcmp>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
        ssl->session_negotiate->compression != comp ||
        ssl->session_negotiate->id_len != n ||
 8090536:	2800      	cmp	r0, #0
 8090538:	f47f acd7 	bne.w	808feea <mbedtls_ssl_handshake_client_step+0x1ae>
        ssl->session_negotiate->id_len = n;
        memcpy( ssl->session_negotiate->id, buf + 35, n );
    }
    else
    {
        ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
 809053c:	230c      	movs	r3, #12
 809053e:	6063      	str	r3, [r4, #4]

        if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 8090540:	4620      	mov	r0, r4
 8090542:	f7f9 fb3d 	bl	8089bc0 <mbedtls_ssl_derive_keys>
 8090546:	4605      	mov	r5, r0
 8090548:	2800      	cmp	r0, #0
 809054a:	f43f ace1 	beq.w	808ff10 <mbedtls_ssl_handshake_client_step+0x1d4>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
 809054e:	2250      	movs	r2, #80	; 0x50
 8090550:	2102      	movs	r1, #2
 8090552:	4620      	mov	r0, r4
 8090554:	f7f9 fed4 	bl	808a300 <mbedtls_ssl_send_alert_message>
 8090558:	e07c      	b.n	8090654 <mbedtls_ssl_handshake_client_step+0x918>
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
            ssl->session_negotiate->ciphersuite )
 809055a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 809055c:	6812      	ldr	r2, [r2, #0]
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
 809055e:	4290      	cmp	r0, r2
 8090560:	f47f acdb 	bne.w	808ff1a <mbedtls_ssl_handshake_client_step+0x1de>
        {
            break;
        }
    }

    suite_info = mbedtls_ssl_ciphersuite_from_id( ssl->session_negotiate->ciphersuite );
 8090564:	f7f6 f9c4 	bl	80868f0 <mbedtls_ssl_ciphersuite_from_id>
    if( ssl_validate_ciphersuite( suite_info, ssl, ssl->minor_ver, ssl->minor_ver ) != 0 )
 8090568:	68e3      	ldr	r3, [r4, #12]
static int ssl_validate_ciphersuite( const mbedtls_ssl_ciphersuite_t * suite_info,
                                     const mbedtls_ssl_context * ssl,
                                     int min_minor_ver, int max_minor_ver )
{
    (void) ssl;
    if( suite_info == NULL )
 809056a:	2800      	cmp	r0, #0
 809056c:	f43f acda 	beq.w	808ff24 <mbedtls_ssl_handshake_client_step+0x1e8>
        return( 1 );

    if( suite_info->min_minor_ver > max_minor_ver ||
 8090570:	6902      	ldr	r2, [r0, #16]
 8090572:	429a      	cmp	r2, r3
 8090574:	f73f acd6 	bgt.w	808ff24 <mbedtls_ssl_handshake_client_step+0x1e8>
 8090578:	6982      	ldr	r2, [r0, #24]
 809057a:	4293      	cmp	r3, r2
 809057c:	f73f acd2 	bgt.w	808ff24 <mbedtls_ssl_handshake_client_step+0x1e8>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        switch( ext_id )
 8090580:	f64f 7001 	movw	r0, #65281	; 0xff01
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }
    ssl->session_negotiate->compression = comp;
 8090584:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8090586:	2200      	movs	r2, #0

    ext = buf + 40 + n;
 8090588:	3628      	adds	r6, #40	; 0x28
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }
    ssl->session_negotiate->compression = comp;
 809058a:	605a      	str	r2, [r3, #4]

    ext = buf + 40 + n;
 809058c:	4446      	add	r6, r8
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    ((void) buf);

    ssl->handshake->new_session_ticket = 1;
 809058e:	2501      	movs	r5, #1

    ext = buf + 40 + n;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );

    while( ext_len )
 8090590:	2f00      	cmp	r7, #0
 8090592:	d03d      	beq.n	8090610 <mbedtls_ssl_handshake_client_step+0x8d4>
    {
        unsigned int ext_id   = ( ( ext[0] <<  8 )
                                | ( ext[1]       ) );
 8090594:	7873      	ldrb	r3, [r6, #1]
 8090596:	7832      	ldrb	r2, [r6, #0]
        unsigned int ext_size = ( ( ext[2] <<  8 )
                                | ( ext[3]       ) );
 8090598:	78b1      	ldrb	r1, [r6, #2]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );

    while( ext_len )
    {
        unsigned int ext_id   = ( ( ext[0] <<  8 )
                                | ( ext[1]       ) );
 809059a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
        unsigned int ext_size = ( ( ext[2] <<  8 )
                                | ( ext[3]       ) );
 809059e:	78f3      	ldrb	r3, [r6, #3]
 80905a0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8

        if( ext_size + 4 > ext_len )
 80905a4:	1d19      	adds	r1, r3, #4
 80905a6:	428f      	cmp	r7, r1
 80905a8:	f4ff ac80 	bcc.w	808feac <mbedtls_ssl_handshake_client_step+0x170>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        switch( ext_id )
 80905ac:	2a23      	cmp	r2, #35	; 0x23
 80905ae:	d01e      	beq.n	80905ee <mbedtls_ssl_handshake_client_step+0x8b2>
 80905b0:	4282      	cmp	r2, r0
 80905b2:	d002      	beq.n	80905ba <mbedtls_ssl_handshake_client_step+0x87e>
 80905b4:	2a01      	cmp	r2, #1
 80905b6:	d124      	bne.n	8090602 <mbedtls_ssl_handshake_client_step+0x8c6>
 80905b8:	e008      	b.n	80905cc <mbedtls_ssl_handshake_client_step+0x890>
        }
    }
    else
#endif /* MBEDTLS_SSL_RENEGOTIATION */
    {
        if( len != 1 || buf[0] != 0x00 )
 80905ba:	2b01      	cmp	r3, #1
 80905bc:	d101      	bne.n	80905c2 <mbedtls_ssl_handshake_client_step+0x886>
 80905be:	7932      	ldrb	r2, [r6, #4]
 80905c0:	b10a      	cbz	r2, 80905c6 <mbedtls_ssl_handshake_client_step+0x88a>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-zero length renegotiation info" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
 80905c2:	2228      	movs	r2, #40	; 0x28
 80905c4:	e4af      	b.n	808ff26 <mbedtls_ssl_handshake_client_step+0x1ea>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;
 80905c6:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
 80905ca:	e01a      	b.n	8090602 <mbedtls_ssl_handshake_client_step+0x8c6>
{
    /*
     * server should use the extension only if we did,
     * and if so the server's value should match ours (and len is always 1)
     */
    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ||
 80905cc:	6822      	ldr	r2, [r4, #0]
 80905ce:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80905d2:	f402 7ee0 	and.w	lr, r2, #448	; 0x1c0
 80905d6:	f1be 0f00 	cmp.w	lr, #0
 80905da:	d0f2      	beq.n	80905c2 <mbedtls_ssl_handshake_client_step+0x886>
 80905dc:	2b01      	cmp	r3, #1
 80905de:	d1f0      	bne.n	80905c2 <mbedtls_ssl_handshake_client_step+0x886>
        len != 1 ||
 80905e0:	f896 e004 	ldrb.w	lr, [r6, #4]
 80905e4:	f3c2 1282 	ubfx	r2, r2, #6, #3
 80905e8:	4596      	cmp	lr, r2
 80905ea:	d00a      	beq.n	8090602 <mbedtls_ssl_handshake_client_step+0x8c6>
 80905ec:	e7e9      	b.n	80905c2 <mbedtls_ssl_handshake_client_step+0x886>
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
static int ssl_parse_session_ticket_ext( mbedtls_ssl_context *ssl,
                                         const unsigned char *buf,
                                         size_t len )
{
    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED ||
 80905ee:	6822      	ldr	r2, [r4, #0]
 80905f0:	f892 2061 	ldrb.w	r2, [r2, #97]	; 0x61
 80905f4:	0792      	lsls	r2, r2, #30
 80905f6:	d5e4      	bpl.n	80905c2 <mbedtls_ssl_handshake_client_step+0x886>
 80905f8:	2b00      	cmp	r3, #0
 80905fa:	d1e2      	bne.n	80905c2 <mbedtls_ssl_handshake_client_step+0x886>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    ((void) buf);

    ssl->handshake->new_session_ticket = 1;
 80905fc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80905fe:	f8c2 51f4 	str.w	r5, [r2, #500]	; 0x1f4
        default:
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
                           ext_id ) );
        }

        ext_len -= 4 + ext_size;
 8090602:	1afb      	subs	r3, r7, r3
 8090604:	1f1f      	subs	r7, r3, #4
        ext += 4 + ext_size;

        if( ext_len > 0 && ext_len < 4 )
 8090606:	3b05      	subs	r3, #5
 8090608:	2b02      	cmp	r3, #2
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
                           ext_id ) );
        }

        ext_len -= 4 + ext_size;
        ext += 4 + ext_size;
 809060a:	440e      	add	r6, r1

        if( ext_len > 0 && ext_len < 4 )
 809060c:	d8c0      	bhi.n	8090590 <mbedtls_ssl_handshake_client_step+0x854>
 809060e:	e48e      	b.n	808ff2e <mbedtls_ssl_handshake_client_step+0x1f2>
    }

    /*
     * Renegotiation security checks
     */
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 8090610:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8090614:	bb13      	cbnz	r3, 809065c <mbedtls_ssl_handshake_client_step+0x920>
        ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE )
 8090616:	6823      	ldr	r3, [r4, #0]
    }

    /*
     * Renegotiation security checks
     */
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 8090618:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 809061c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8090620:	2b20      	cmp	r3, #32
 8090622:	d11b      	bne.n	809065c <mbedtls_ssl_handshake_client_step+0x920>
 8090624:	e7cd      	b.n	80905c2 <mbedtls_ssl_handshake_client_step+0x886>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    memcpy( ticket, msg + 6, ticket_len );
 8090626:	465a      	mov	r2, fp
 8090628:	f107 010a 	add.w	r1, r7, #10
 809062c:	9004      	str	r0, [sp, #16]
 809062e:	f003 faa6 	bl	8093b7e <memcpy>

    ssl->session_negotiate->ticket = ticket;
 8090632:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8090634:	9b04      	ldr	r3, [sp, #16]
    ssl->session_negotiate->ticket_len = ticket_len;
    ssl->session_negotiate->ticket_lifetime = lifetime;
 8090636:	0436      	lsls	r6, r6, #16
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    memcpy( ticket, msg + 6, ticket_len );

    ssl->session_negotiate->ticket = ticket;
 8090638:	6653      	str	r3, [r2, #100]	; 0x64
    ssl->session_negotiate->ticket_len = ticket_len;
 809063a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ssl->session_negotiate->ticket_lifetime = lifetime;
 809063c:	ea46 660a 	orr.w	r6, r6, sl, lsl #24
    }

    memcpy( ticket, msg + 6, ticket_len );

    ssl->session_negotiate->ticket = ticket;
    ssl->session_negotiate->ticket_len = ticket_len;
 8090640:	f8c3 b068 	str.w	fp, [r3, #104]	; 0x68
    ssl->session_negotiate->ticket_lifetime = lifetime;
 8090644:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8090646:	ea46 0808 	orr.w	r8, r6, r8
 809064a:	ea48 2609 	orr.w	r6, r8, r9, lsl #8
 809064e:	66de      	str	r6, [r3, #108]	; 0x6c
     * RFC 5077 section 3.4:
     * "If the client receives a session ticket from the server, then it
     * discards any Session ID that was sent in the ServerHello."
     */
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ticket in use, discarding session id" ) );
    ssl->session_negotiate->id_len = 0;
 8090650:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8090652:	609d      	str	r5, [r3, #8]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse new session ticket" ) );

    return( 0 );
 8090654:	4628      	mov	r0, r5
 8090656:	e096      	b.n	8090786 <mbedtls_ssl_handshake_client_step+0xa4a>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate request" ) );

    if( ! mbedtls_ssl_ciphersuite_cert_req_allowed( ciphersuite_info ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate request" ) );
        ssl->state++;
 8090658:	2306      	movs	r3, #6
 809065a:	6063      	str	r3, [r4, #4]
        return( 0 );
 809065c:	2000      	movs	r0, #0
 809065e:	e092      	b.n	8090786 <mbedtls_ssl_handshake_client_step+0xa4a>
    }

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 8090660:	4620      	mov	r0, r4
 8090662:	f7fa f89b 	bl	808a79c <mbedtls_ssl_read_record>
 8090666:	2800      	cmp	r0, #0
 8090668:	f040 808d 	bne.w	8090786 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 809066c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 809066e:	2b16      	cmp	r3, #22
 8090670:	f47f abd9 	bne.w	808fe26 <mbedtls_ssl_handshake_client_step+0xea>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    ssl->state++;
 8090674:	6863      	ldr	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
 8090676:	6e62      	ldr	r2, [r4, #100]	; 0x64
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    ssl->state++;
 8090678:	3301      	adds	r3, #1
 809067a:	6063      	str	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
 809067c:	7813      	ldrb	r3, [r2, #0]
 809067e:	2b0d      	cmp	r3, #13
 8090680:	bf0c      	ite	eq
 8090682:	2301      	moveq	r3, #1
 8090684:	2300      	movne	r3, #0
 8090686:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "got %s certificate request",
                        ssl->client_auth ? "a" : "no" ) );

    if( ssl->client_auth == 0 )
 809068a:	d002      	beq.n	8090692 <mbedtls_ssl_handshake_client_step+0x956>
    {
        /* Current message is probably the ServerHelloDone */
        ssl->keep_current_message = 1;
 809068c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 8090690:	e079      	b.n	8090786 <mbedtls_ssl_handshake_client_step+0xa4a>
     *  superficially sane.
     */
    buf = ssl->in_msg;

    /* certificate_types */
    if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) )
 8090692:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8090694:	2904      	cmp	r1, #4
 8090696:	d806      	bhi.n	80906a6 <mbedtls_ssl_handshake_client_step+0x96a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 8090698:	2232      	movs	r2, #50	; 0x32
 809069a:	2102      	movs	r1, #2
 809069c:	4620      	mov	r0, r4
 809069e:	f7f9 fe2f 	bl	808a300 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
 80906a2:	483b      	ldr	r0, [pc, #236]	; (8090790 <mbedtls_ssl_handshake_client_step+0xa54>)
 80906a4:	e06f      	b.n	8090786 <mbedtls_ssl_handshake_client_step+0xa4a>
    }
    cert_type_len = buf[mbedtls_ssl_hs_hdr_len( ssl )];
 80906a6:	7913      	ldrb	r3, [r2, #4]
     * Both reach at most the index:
     *    ...hdr_len + 2 + n,
     * therefore the buffer length at this point must be greater than that
     * regardless of the actual code path.
     */
    if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
 80906a8:	1ddd      	adds	r5, r3, #7
 80906aa:	42a9      	cmp	r1, r5
 80906ac:	d9f4      	bls.n	8090698 <mbedtls_ssl_handshake_client_step+0x95c>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
    }

    /* supported_signature_algorithms */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 80906ae:	68e0      	ldr	r0, [r4, #12]
 80906b0:	2803      	cmp	r0, #3
 80906b2:	d109      	bne.n	80906c8 <mbedtls_ssl_handshake_client_step+0x98c>
    {
        size_t sig_alg_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 80906b4:	18d6      	adds	r6, r2, r3
                             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
 80906b6:	7977      	ldrb	r7, [r6, #5]
 80906b8:	79b0      	ldrb	r0, [r6, #6]
 80906ba:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
         *     buf[...hdr_len + 3 + n + sig_alg_len - 1 + 1],
         * which reduces to:
         *     buf[...hdr_len + 3 + n + sig_alg_len],
         * which is one less than we need the buf to be.
         */
        if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n + sig_alg_len )
 80906be:	4405      	add	r5, r0
 80906c0:	42a9      	cmp	r1, r5
 80906c2:	d9e9      	bls.n	8090698 <mbedtls_ssl_handshake_client_step+0x95c>
 80906c4:	3302      	adds	r3, #2
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Supported Signature Algorithm found: %d"
                                        ",%d", sig_alg[i], sig_alg[i + 1]  ) );
        }
#endif

        n += 2 + sig_alg_len;
 80906c6:	4403      	add	r3, r0
    }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

    /* certificate_authorities */
    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 80906c8:	441a      	add	r2, r3
             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );

    n += dn_len;
    if( ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
 80906ca:	7950      	ldrb	r0, [r2, #5]
 80906cc:	7992      	ldrb	r2, [r2, #6]
 80906ce:	3307      	adds	r3, #7
 80906d0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80906d4:	4413      	add	r3, r2
 80906d6:	4299      	cmp	r1, r3
 80906d8:	d0c0      	beq.n	809065c <mbedtls_ssl_handshake_client_step+0x920>
 80906da:	e7dd      	b.n	8090698 <mbedtls_ssl_handshake_client_step+0x95c>
    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 80906dc:	2232      	movs	r2, #50	; 0x32
 80906de:	2102      	movs	r1, #2
 80906e0:	4620      	mov	r0, r4
 80906e2:	f7f9 fe0d 	bl	808a300 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE );
 80906e6:	482b      	ldr	r0, [pc, #172]	; (8090794 <mbedtls_ssl_handshake_client_step+0xa58>)
 80906e8:	e04d      	b.n	8090786 <mbedtls_ssl_handshake_client_step+0xa4a>
    ssl->handshake->pmslen = 48;

    if( ssl->session_negotiate->peer_cert == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 80906ea:	482b      	ldr	r0, [pc, #172]	; (8090798 <mbedtls_ssl_handshake_client_step+0xa5c>)
 80906ec:	e04b      	b.n	8090786 <mbedtls_ssl_handshake_client_step+0xa4a>
     */
    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
                MBEDTLS_PK_RSA ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
 80906ee:	482b      	ldr	r0, [pc, #172]	; (809079c <mbedtls_ssl_handshake_client_step+0xa60>)
 80906f0:	e049      	b.n	8090786 <mbedtls_ssl_handshake_client_step+0xa4a>
        ((void) ciphersuite_info);
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    ssl->out_msglen  = i + n;
 80906f2:	9b08      	ldr	r3, [sp, #32]
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
 80906f4:	2210      	movs	r2, #16
        ((void) ciphersuite_info);
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    ssl->out_msglen  = i + n;
 80906f6:	3304      	adds	r3, #4
 80906f8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 80906fc:	2316      	movs	r3, #22
 80906fe:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
 8090702:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8090706:	701a      	strb	r2, [r3, #0]

    ssl->state++;
 8090708:	6863      	ldr	r3, [r4, #4]
 809070a:	3301      	adds	r3, #1
 809070c:	6063      	str	r3, [r4, #4]

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 809070e:	4620      	mov	r0, r4
 8090710:	f7f9 fc42 	bl	8089f98 <mbedtls_ssl_write_record>
 8090714:	e037      	b.n	8090786 <mbedtls_ssl_handshake_client_step+0xa4a>
    msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );

    lifetime = ( msg[0] << 24 ) | ( msg[1] << 16 ) |
               ( msg[2] <<  8 ) | ( msg[3]       );

    ticket_len = ( msg[4] << 8 ) | ( msg[5] );
 8090716:	7a7a      	ldrb	r2, [r7, #9]
 8090718:	f897 b008 	ldrb.w	fp, [r7, #8]
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
    }

    msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );

    lifetime = ( msg[0] << 24 ) | ( msg[1] << 16 ) |
 809071c:	f897 a004 	ldrb.w	sl, [r7, #4]
               ( msg[2] <<  8 ) | ( msg[3]       );

    ticket_len = ( msg[4] << 8 ) | ( msg[5] );
 8090720:	ea42 2b0b 	orr.w	fp, r2, fp, lsl #8

    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
 8090724:	f10b 020a 	add.w	r2, fp, #10
 8090728:	4293      	cmp	r3, r2
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
    }

    msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );

    lifetime = ( msg[0] << 24 ) | ( msg[1] << 16 ) |
 809072a:	797e      	ldrb	r6, [r7, #5]
               ( msg[2] <<  8 ) | ( msg[3]       );
 809072c:	f897 9006 	ldrb.w	r9, [r7, #6]
 8090730:	f897 8007 	ldrb.w	r8, [r7, #7]

    ticket_len = ( msg[4] << 8 ) | ( msg[5] );

    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
 8090734:	f47f ad40 	bne.w	80901b8 <mbedtls_ssl_handshake_client_step+0x47c>
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ticket length: %d", ticket_len ) );

    /* We're not waiting for a NewSessionTicket message any more */
    ssl->handshake->new_session_ticket = 0;
 8090738:	6b23      	ldr	r3, [r4, #48]	; 0x30
 809073a:	f8c3 01f4 	str.w	r0, [r3, #500]	; 0x1f4
    ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
 809073e:	230c      	movs	r3, #12
 8090740:	6063      	str	r3, [r4, #4]

    /*
     * Zero-length ticket means the server changed his mind and doesn't want
     * to send a ticket after all, so just forget it
     */
    if( ticket_len == 0 )
 8090742:	f1bb 0f00 	cmp.w	fp, #0
 8090746:	d089      	beq.n	809065c <mbedtls_ssl_handshake_client_step+0x920>
        return( 0 );

    mbedtls_zeroize( ssl->session_negotiate->ticket,
 8090748:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 809074a:	6e53      	ldr	r3, [r2, #100]	; 0x64
 809074c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 809074e:	441a      	add	r2, r3
#endif

#if defined(MBEDTLS_SSL_SESSION_TICKETS)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8090750:	429a      	cmp	r2, r3
 8090752:	d002      	beq.n	809075a <mbedtls_ssl_handshake_client_step+0xa1e>
 8090754:	7018      	strb	r0, [r3, #0]
 8090756:	3301      	adds	r3, #1
 8090758:	e7fa      	b.n	8090750 <mbedtls_ssl_handshake_client_step+0xa14>
    if( ticket_len == 0 )
        return( 0 );

    mbedtls_zeroize( ssl->session_negotiate->ticket,
                      ssl->session_negotiate->ticket_len );
    mbedtls_free( ssl->session_negotiate->ticket );
 809075a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ssl->session_negotiate->ticket = NULL;
 809075c:	2500      	movs	r5, #0
    if( ticket_len == 0 )
        return( 0 );

    mbedtls_zeroize( ssl->session_negotiate->ticket,
                      ssl->session_negotiate->ticket_len );
    mbedtls_free( ssl->session_negotiate->ticket );
 809075e:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8090760:	f000 feec 	bl	809153c <free>
    ssl->session_negotiate->ticket = NULL;
 8090764:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ssl->session_negotiate->ticket_len = 0;

    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
 8090766:	4659      	mov	r1, fp
        return( 0 );

    mbedtls_zeroize( ssl->session_negotiate->ticket,
                      ssl->session_negotiate->ticket_len );
    mbedtls_free( ssl->session_negotiate->ticket );
    ssl->session_negotiate->ticket = NULL;
 8090768:	665d      	str	r5, [r3, #100]	; 0x64
    ssl->session_negotiate->ticket_len = 0;
 809076a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
 809076c:	2001      	movs	r0, #1

    mbedtls_zeroize( ssl->session_negotiate->ticket,
                      ssl->session_negotiate->ticket_len );
    mbedtls_free( ssl->session_negotiate->ticket );
    ssl->session_negotiate->ticket = NULL;
    ssl->session_negotiate->ticket_len = 0;
 809076e:	669d      	str	r5, [r3, #104]	; 0x68

    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
 8090770:	f003 f9e0 	bl	8093b34 <calloc>
 8090774:	2800      	cmp	r0, #0
 8090776:	f47f af56 	bne.w	8090626 <mbedtls_ssl_handshake_client_step+0x8ea>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ticket alloc failed" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
 809077a:	2250      	movs	r2, #80	; 0x50
 809077c:	2102      	movs	r1, #2
 809077e:	4620      	mov	r0, r4
 8090780:	f7f9 fdbe 	bl	808a300 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 8090784:	4806      	ldr	r0, [pc, #24]	; (80907a0 <mbedtls_ssl_handshake_client_step+0xa64>)
           MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid state %d", ssl->state ) );
           return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   }

    return( ret );
}
 8090786:	b015      	add	sp, #84	; 0x54
 8090788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 809078c:	ffff8f80 	.word	0xffff8f80
 8090790:	ffff8580 	.word	0xffff8580
 8090794:	ffff8480 	.word	0xffff8480
 8090798:	ffff8900 	.word	0xffff8900
 809079c:	ffff9300 	.word	0xffff9300
 80907a0:	ffff8100 	.word	0xffff8100

080907a4 <_ZN5Crypt11generateKeyEPh>:
#include "Crypt.h"

#include "application.h"

//generate key
int Crypt::generateKey(unsigned char* key){
 80907a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80907a6:	4604      	mov	r4, r0
    int ret=0;

    mbedtls_entropy_init( &entropy );
 80907a8:	f500 75a0 	add.w	r5, r0, #320	; 0x140
 80907ac:	4628      	mov	r0, r5
#include "Crypt.h"

#include "application.h"

//generate key
int Crypt::generateKey(unsigned char* key){
 80907ae:	460f      	mov	r7, r1
    int ret=0;

    mbedtls_entropy_init( &entropy );
 80907b0:	f7fe fcb4 	bl	808f11c <mbedtls_entropy_init>
    mbedtls_ctr_drbg_init( &ctr_drbg );
 80907b4:	4620      	mov	r0, r4
 80907b6:	f7ff f9db 	bl	808fb70 <mbedtls_ctr_drbg_init>
    mbedtls_ctr_drbg_seed( &ctr_drbg, mbedtls_entropy_func, &entropy,(unsigned char *) pers, strlen(pers) );
 80907ba:	f8d4 63b8 	ldr.w	r6, [r4, #952]	; 0x3b8
 80907be:	4630      	mov	r0, r6
 80907c0:	f003 fa23 	bl	8093c0a <strlen>
 80907c4:	4633      	mov	r3, r6
 80907c6:	9000      	str	r0, [sp, #0]
 80907c8:	462a      	mov	r2, r5
 80907ca:	4906      	ldr	r1, [pc, #24]	; (80907e4 <_ZN5Crypt11generateKeyEPh+0x40>)
 80907cc:	4620      	mov	r0, r4
 80907ce:	f7ff fa37 	bl	808fc40 <mbedtls_ctr_drbg_seed>
    mbedtls_ctr_drbg_random( &ctr_drbg, key, 32 );
 80907d2:	2220      	movs	r2, #32
 80907d4:	4639      	mov	r1, r7
 80907d6:	4620      	mov	r0, r4
 80907d8:	f7ff fa9d 	bl	808fd16 <mbedtls_ctr_drbg_random>

    return ret;
}
 80907dc:	2000      	movs	r0, #0
 80907de:	b003      	add	sp, #12
 80907e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80907e2:	bf00      	nop
 80907e4:	0808f16d 	.word	0x0808f16d

080907e8 <_GLOBAL__sub_I__ZN5Crypt11generateKeyEPh>:
 80907e8:	f000 bc60 	b.w	80910ac <HAL_Pin_Map>

080907ec <_GLOBAL__sub_I__ZN4CarTC2Ev>:
 80907ec:	f000 bc5e 	b.w	80910ac <HAL_Pin_Map>

080907f0 <_ZN3AWS11isConnectedEv>:
AWS::AWS(char* domain, uint16_t port, void (*callbackRef)(char*,uint8_t*,unsigned int)){
    setupCon(domain,port,callbackRef);
}

bool AWS::isConnected(){
    return (awsMqtt.isConnected());
 80907f0:	f7f1 bbdf 	b.w	8081fb2 <_ZN4MQTT11isConnectedEv>

080907f4 <_ZN3AWS7publishEPKcS1_>:
}

bool AWS::publish(const char * topic, const char *message){
    return (awsMqtt.publish(topic, message));
 80907f4:	f7f1 bc57 	b.w	80820a6 <_ZN4MQTT7publishEPKcS1_>

080907f8 <_ZN3AWS9subscribeEPKc>:
}

bool AWS::subscribe(const char * topic){
    return (awsMqtt.subscribe(topic));
 80907f8:	f7f1 bc91 	b.w	808211e <_ZN4MQTT9subscribeEPKc>

080907fc <_ZN3AWS4loopEv>:
}

bool AWS::loop(){
    awsMqtt.loop();
 80907fc:	f7f1 bcad 	b.w	808215a <_ZN4MQTT4loopEv>

08090800 <_ZN3AWS7connectEPKc>:
}

bool AWS::connect(const char * ID){
    clientID = ID;   
 8090800:	f8c0 1688 	str.w	r1, [r0, #1672]	; 0x688
    return(awsMqtt.connect(clientID));  
 8090804:	f7f1 bf64 	b.w	80826d0 <_ZN4MQTT7connectEPKc>

08090808 <_ZN3AWS8setupConEPctPFvS0_PhjE>:
}

bool AWS::setupCon(char* domain, uint16_t port, void (*callbackRef)(char*,uint8_t*,unsigned int)) {
 8090808:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    bool ret=0;
    static MQTT temp(domain,port,callbackRef);
 809080c:	4d5a      	ldr	r5, [pc, #360]	; (8090978 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x170>)
bool AWS::connect(const char * ID){
    clientID = ID;   
    return(awsMqtt.connect(clientID));  
}

bool AWS::setupCon(char* domain, uint16_t port, void (*callbackRef)(char*,uint8_t*,unsigned int)) {
 809080e:	4698      	mov	r8, r3
    bool ret=0;
    static MQTT temp(domain,port,callbackRef);
 8090810:	682b      	ldr	r3, [r5, #0]
bool AWS::connect(const char * ID){
    clientID = ID;   
    return(awsMqtt.connect(clientID));  
}

bool AWS::setupCon(char* domain, uint16_t port, void (*callbackRef)(char*,uint8_t*,unsigned int)) {
 8090812:	4604      	mov	r4, r0
    bool ret=0;
    static MQTT temp(domain,port,callbackRef);
 8090814:	07db      	lsls	r3, r3, #31
bool AWS::connect(const char * ID){
    clientID = ID;   
    return(awsMqtt.connect(clientID));  
}

bool AWS::setupCon(char* domain, uint16_t port, void (*callbackRef)(char*,uint8_t*,unsigned int)) {
 8090816:	460e      	mov	r6, r1
 8090818:	4617      	mov	r7, r2
    bool ret=0;
    static MQTT temp(domain,port,callbackRef);
 809081a:	d411      	bmi.n	8090840 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x38>
 809081c:	4628      	mov	r0, r5
 809081e:	f7ef fc44 	bl	80800aa <__cxa_guard_acquire>
 8090822:	b168      	cbz	r0, 8090840 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x38>
 8090824:	463a      	mov	r2, r7
 8090826:	4631      	mov	r1, r6
 8090828:	4643      	mov	r3, r8
 809082a:	4854      	ldr	r0, [pc, #336]	; (809097c <_ZN3AWS8setupConEPctPFvS0_PhjE+0x174>)
 809082c:	f7f1 fa92 	bl	8081d54 <_ZN4MQTTC1EPctPFvS0_PhjE>
 8090830:	4628      	mov	r0, r5
 8090832:	f7ef fc3f 	bl	80800b4 <__cxa_guard_release>
 8090836:	4a52      	ldr	r2, [pc, #328]	; (8090980 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x178>)
 8090838:	4952      	ldr	r1, [pc, #328]	; (8090984 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x17c>)
 809083a:	4850      	ldr	r0, [pc, #320]	; (809097c <_ZN3AWS8setupConEPctPFvS0_PhjE+0x174>)
 809083c:	f001 ff3e 	bl	80926bc <__aeabi_atexit>
 8090840:	4d4e      	ldr	r5, [pc, #312]	; (809097c <_ZN3AWS8setupConEPctPFvS0_PhjE+0x174>)
 8090842:	686b      	ldr	r3, [r5, #4]
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
 8090844:	6063      	str	r3, [r4, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
 8090846:	68ab      	ldr	r3, [r5, #8]
 8090848:	60a3      	str	r3, [r4, #8]
 809084a:	68eb      	ldr	r3, [r5, #12]
 809084c:	60e3      	str	r3, [r4, #12]
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 809084e:	692b      	ldr	r3, [r5, #16]
 8090850:	6123      	str	r3, [r4, #16]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
 8090852:	696b      	ldr	r3, [r5, #20]
 8090854:	6163      	str	r3, [r4, #20]
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8090856:	69af      	ldr	r7, [r5, #24]
	if (__tmp != _M_pi)
 8090858:	69a3      	ldr	r3, [r4, #24]
 809085a:	429f      	cmp	r7, r3
 809085c:	d016      	beq.n	809088c <_ZN3AWS8setupConEPctPFvS0_PhjE+0x84>
	  {
	    if (__tmp != 0)
 809085e:	b117      	cbz	r7, 8090866 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x5e>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8090860:	687b      	ldr	r3, [r7, #4]
 8090862:	3301      	adds	r3, #1
 8090864:	607b      	str	r3, [r7, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
 8090866:	69a6      	ldr	r6, [r4, #24]
 8090868:	b17e      	cbz	r6, 809088a <_ZN3AWS8setupConEPctPFvS0_PhjE+0x82>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 809086a:	6873      	ldr	r3, [r6, #4]
 809086c:	3b01      	subs	r3, #1
 809086e:	6073      	str	r3, [r6, #4]
 8090870:	b95b      	cbnz	r3, 809088a <_ZN3AWS8setupConEPctPFvS0_PhjE+0x82>
        {
          _M_dispose();
 8090872:	6833      	ldr	r3, [r6, #0]
 8090874:	4630      	mov	r0, r6
 8090876:	689b      	ldr	r3, [r3, #8]
 8090878:	4798      	blx	r3
          if (--_M_weak_count == 0)
 809087a:	68b3      	ldr	r3, [r6, #8]
 809087c:	3b01      	subs	r3, #1
 809087e:	60b3      	str	r3, [r6, #8]
 8090880:	b91b      	cbnz	r3, 809088a <_ZN3AWS8setupConEPctPFvS0_PhjE+0x82>
            _M_destroy();
 8090882:	6833      	ldr	r3, [r6, #0]
 8090884:	4630      	mov	r0, r6
 8090886:	68db      	ldr	r3, [r3, #12]
 8090888:	4798      	blx	r3
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
 809088a:	61a7      	str	r7, [r4, #24]
#define MQTTPINGREQ     12 << 4 // PING Request
#define MQTTPINGRESP    13 << 4 // PING Response
#define MQTTDISCONNECT  14 << 4 // Client is Disconnecting
#define MQTTReserved    15 << 4 // Reserved

class MQTT {
 809088c:	69eb      	ldr	r3, [r5, #28]
 809088e:	493e      	ldr	r1, [pc, #248]	; (8090988 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x180>)
 8090890:	61e3      	str	r3, [r4, #28]
 8090892:	8c2b      	ldrh	r3, [r5, #32]
 8090894:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8090898:	8423      	strh	r3, [r4, #32]
 809089a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 809089c:	4e3b      	ldr	r6, [pc, #236]	; (809098c <_ZN3AWS8setupConEPctPFvS0_PhjE+0x184>)
 809089e:	6263      	str	r3, [r4, #36]	; 0x24
 80908a0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80908a2:	f504 67cb 	add.w	r7, r4, #1624	; 0x658
 80908a6:	62a3      	str	r3, [r4, #40]	; 0x28
 80908a8:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80908ac:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80908b0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80908b2:	6323      	str	r3, [r4, #48]	; 0x30
 80908b4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80908b6:	6363      	str	r3, [r4, #52]	; 0x34
 80908b8:	f001 f990 	bl	8091bdc <_ZN6StringaSERKS_>
 80908bc:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80908be:	f44f 721e 	mov.w	r2, #632	; 0x278
 80908c2:	64a3      	str	r3, [r4, #72]	; 0x48
 80908c4:	f8b5 304c 	ldrh.w	r3, [r5, #76]	; 0x4c
 80908c8:	4931      	ldr	r1, [pc, #196]	; (8090990 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x188>)
 80908ca:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 80908ce:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80908d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80908d4:	6523      	str	r3, [r4, #80]	; 0x50
 80908d6:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
 80908da:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 80908de:	f003 f94e 	bl	8093b7e <memcpy>
 80908e2:	22b4      	movs	r2, #180	; 0xb4
 80908e4:	492b      	ldr	r1, [pc, #172]	; (8090994 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x18c>)
 80908e6:	f504 7034 	add.w	r0, r4, #720	; 0x2d0
 80908ea:	f003 f948 	bl	8093b7e <memcpy>
 80908ee:	2264      	movs	r2, #100	; 0x64
 80908f0:	4929      	ldr	r1, [pc, #164]	; (8090998 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x190>)
 80908f2:	f504 7061 	add.w	r0, r4, #900	; 0x384
 80908f6:	f003 f942 	bl	8093b7e <memcpy>
 80908fa:	f44f 729a 	mov.w	r2, #308	; 0x134
 80908fe:	4927      	ldr	r1, [pc, #156]	; (809099c <_ZN3AWS8setupConEPctPFvS0_PhjE+0x194>)
 8090900:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
 8090904:	f003 f93b 	bl	8093b7e <memcpy>
 8090908:	f44f 729a 	mov.w	r2, #308	; 0x134
 809090c:	4924      	ldr	r1, [pc, #144]	; (80909a0 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x198>)
 809090e:	f204 501c 	addw	r0, r4, #1308	; 0x51c
 8090912:	f003 f934 	bl	8093b7e <memcpy>
 8090916:	e896 0003 	ldmia.w	r6, {r0, r1}
 809091a:	f504 63ca 	add.w	r3, r4, #1616	; 0x650
 809091e:	e883 0003 	stmia.w	r3, {r0, r1}
 8090922:	3608      	adds	r6, #8
 8090924:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8090926:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8090928:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 809092a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 809092c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8090930:	e887 0003 	stmia.w	r7, {r0, r1}
 8090934:	f895 3680 	ldrb.w	r3, [r5, #1664]	; 0x680
    awsMqtt = temp;
    ret = awsMqtt.enableTls(amazonIoTRootCaPem, sizeof(amazonIoTRootCaPem),
 8090938:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 809093c:	f884 3680 	strb.w	r3, [r4, #1664]	; 0x680
 8090940:	f895 3681 	ldrb.w	r3, [r5, #1665]	; 0x681
 8090944:	4917      	ldr	r1, [pc, #92]	; (80909a4 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x19c>)
 8090946:	f884 3681 	strb.w	r3, [r4, #1665]	; 0x681
 809094a:	f895 3682 	ldrb.w	r3, [r5, #1666]	; 0x682
 809094e:	4620      	mov	r0, r4
 8090950:	f884 3682 	strb.w	r3, [r4, #1666]	; 0x682
 8090954:	f240 63a6 	movw	r3, #1702	; 0x6a6
 8090958:	9302      	str	r3, [sp, #8]
 809095a:	4b13      	ldr	r3, [pc, #76]	; (80909a8 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x1a0>)
 809095c:	9301      	str	r3, [sp, #4]
 809095e:	f44f 639b 	mov.w	r3, #1240	; 0x4d8
 8090962:	9300      	str	r3, [sp, #0]
 8090964:	4b11      	ldr	r3, [pc, #68]	; (80909ac <_ZN3AWS8setupConEPctPFvS0_PhjE+0x1a4>)
 8090966:	f7f1 fcc7 	bl	80822f8 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j>
                     clientKeyCrtPem, sizeof(clientKeyCrtPem),
                     clientKeyPem, sizeof(clientKeyPem));            
    return(ret);  
}
 809096a:	3000      	adds	r0, #0
 809096c:	bf18      	it	ne
 809096e:	2001      	movne	r0, #1
 8090970:	b004      	add	sp, #16
 8090972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8090976:	bf00      	nop
 8090978:	20003c20 	.word	0x20003c20
 809097c:	20003c28 	.word	0x20003c28
 8090980:	200004a8 	.word	0x200004a8
 8090984:	08082125 	.word	0x08082125
 8090988:	20003c60 	.word	0x20003c60
 809098c:	20004278 	.word	0x20004278
 8090990:	20003c80 	.word	0x20003c80
 8090994:	20003ef8 	.word	0x20003ef8
 8090998:	20003fac 	.word	0x20003fac
 809099c:	20004010 	.word	0x20004010
 80909a0:	20004144 	.word	0x20004144
 80909a4:	08096605 	.word	0x08096605
 80909a8:	08096ce5 	.word	0x08096ce5
 80909ac:	0809612d 	.word	0x0809612d

080909b0 <_ZN3AWSC1EPctPFvS0_PhjE>:

AWS::AWS() {
    //add initializations for default case
}

AWS::AWS(char* domain, uint16_t port, void (*callbackRef)(char*,uint8_t*,unsigned int)){
 80909b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80909b2:	4604      	mov	r4, r0
 80909b4:	460d      	mov	r5, r1
 80909b6:	4616      	mov	r6, r2
 80909b8:	461f      	mov	r7, r3
 80909ba:	f7f1 f993 	bl	8081ce4 <_ZN4MQTTC1Ev>
    setupCon(domain,port,callbackRef);
 80909be:	463b      	mov	r3, r7
 80909c0:	4632      	mov	r2, r6
 80909c2:	4629      	mov	r1, r5
 80909c4:	4620      	mov	r0, r4
 80909c6:	f7ff ff1f 	bl	8090808 <_ZN3AWS8setupConEPctPFvS0_PhjE>
}
 80909ca:	4620      	mov	r0, r4
 80909cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080909ce <_ZN7LSM9DS14initE14interface_modehh>:
{
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
 80909ce:	b530      	push	{r4, r5, lr}
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80909d0:	2402      	movs	r4, #2
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
 80909d2:	7001      	strb	r1, [r0, #0]
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;
 80909d4:	7083      	strb	r3, [r0, #2]
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80909d6:	2106      	movs	r1, #6
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80909d8:	23f5      	movs	r3, #245	; 0xf5
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80909da:	75c4      	strb	r4, [r0, #23]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80909dc:	2404      	movs	r4, #4
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
 80909de:	7042      	strb	r2, [r0, #1]
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80909e0:	80c3      	strh	r3, [r0, #6]
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80909e2:	2201      	movs	r2, #1
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80909e4:	2300      	movs	r3, #0
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80909e6:	7201      	strb	r1, [r0, #8]
	settings.accel.scale = 2;
	// accel sample rate can be 1-6
	// 1 = 10 Hz    4 = 238 Hz
	// 2 = 50 Hz    5 = 476 Hz
	// 3 = 119 Hz   6 = 952 Hz
	settings.accel.sampleRate = 6;
 80909e8:	7601      	strb	r1, [r0, #24]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80909ea:	f880 4020 	strb.w	r4, [r0, #32]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 80909ee:	2103      	movs	r1, #3
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80909f0:	2407      	movs	r4, #7
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80909f2:	7102      	strb	r2, [r0, #4]
	settings.gyro.enableX = true;
 80909f4:	7442      	strb	r2, [r0, #17]
	settings.gyro.enableY = true;
 80909f6:	7482      	strb	r2, [r0, #18]
	settings.gyro.enableZ = true;
 80909f8:	74c2      	strb	r2, [r0, #19]
	settings.gyro.HPFCutoff = 0;
	settings.gyro.flipX = false;
	settings.gyro.flipY = false;
	settings.gyro.flipZ = false;
	settings.gyro.orientation = 0;
	settings.gyro.latchInterrupt = true;
 80909fa:	7502      	strb	r2, [r0, #20]

	settings.accel.enabled = true;
 80909fc:	7582      	strb	r2, [r0, #22]
	settings.accel.enableX = true;
 80909fe:	7642      	strb	r2, [r0, #25]
	settings.accel.enableY = true;
 8090a00:	7682      	strb	r2, [r0, #26]
	settings.accel.enableZ = true;
 8090a02:	76c2      	strb	r2, [r0, #27]
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
 8090a04:	77c2      	strb	r2, [r0, #31]
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 8090a06:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 8090a0a:	7243      	strb	r3, [r0, #9]
	settings.gyro.lowPowerEnable = false;
 8090a0c:	7283      	strb	r3, [r0, #10]
	settings.gyro.HPFEnable = false;
 8090a0e:	72c3      	strb	r3, [r0, #11]
	// Gyro HPF cutoff frequency: value between 0-9
	// Actual value depends on sample rate. Only applies
	// if gyroHPFEnable is true.
	settings.gyro.HPFCutoff = 0;
 8090a10:	7303      	strb	r3, [r0, #12]
	settings.gyro.flipX = false;
 8090a12:	7343      	strb	r3, [r0, #13]
	settings.gyro.flipY = false;
 8090a14:	7383      	strb	r3, [r0, #14]
	settings.gyro.flipZ = false;
 8090a16:	73c3      	strb	r3, [r0, #15]
	settings.gyro.orientation = 0;
 8090a18:	7403      	strb	r3, [r0, #16]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 8090a1a:	7701      	strb	r1, [r0, #28]
	settings.accel.highResEnable = false;
 8090a1c:	7743      	strb	r3, [r0, #29]
	// accelHighResBandwidth can be any value between 0-3
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;
 8090a1e:	7783      	strb	r3, [r0, #30]
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
	settings.mag.tempCompensationEnable = false;
 8090a20:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 8090a24:	4604      	mov	r4, r0
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
 8090a26:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
 8090a2a:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
 8090a2e:	4602      	mov	r2, r0
	settings.mag.tempCompensationEnable = false;
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
	settings.mag.ZPerformance = 3;
 8090a30:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
	settings.mag.lowPowerEnable = false;
 8090a34:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	// magOperatingMode can be 0-2
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;
 8090a38:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
	{
		gBias[i] = 0;
 8090a3c:	2500      	movs	r5, #0
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 8090a3e:	3901      	subs	r1, #1
	{
		gBias[i] = 0;
 8090a40:	63e5      	str	r5, [r4, #60]	; 0x3c
		aBias[i] = 0;
 8090a42:	64a5      	str	r5, [r4, #72]	; 0x48
		mBias[i] = 0;
 8090a44:	6565      	str	r5, [r4, #84]	; 0x54
 8090a46:	f102 0202 	add.w	r2, r2, #2
		gBiasRaw[i] = 0;
 8090a4a:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
		aBiasRaw[i] = 0;
 8090a4e:	f8a2 3064 	strh.w	r3, [r2, #100]	; 0x64
		mBiasRaw[i] = 0;
 8090a52:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
 8090a56:	f104 0404 	add.w	r4, r4, #4
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 8090a5a:	d1f0      	bne.n	8090a3e <_ZN7LSM9DS14initE14interface_modehh+0x70>
		mBias[i] = 0;
		gBiasRaw[i] = 0;
		aBiasRaw[i] = 0;
		mBiasRaw[i] = 0;
	}
	_autoCalc = false;
 8090a5c:	f04f 0300 	mov.w	r3, #0
 8090a60:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
 8090a64:	bd30      	pop	{r4, r5, pc}

08090a66 <_ZN7LSM9DS1C1Ev>:

#define COMMUNICATION_TIMEOUT 1000 // Set timeout to 1s

float magSensitivity[4] = {0.00014, 0.00029, 0.00043, 0.00058};

LSM9DS1::LSM9DS1()
 8090a66:	b510      	push	{r4, lr}
{
	init(IMU_MODE_I2C, LSM9DS1_AG_ADDR(1), LSM9DS1_M_ADDR(1));
 8090a68:	231e      	movs	r3, #30
 8090a6a:	226b      	movs	r2, #107	; 0x6b
 8090a6c:	2101      	movs	r1, #1
 8090a6e:	f7ff ffae 	bl	80909ce <_ZN7LSM9DS14initE14interface_modehh>
}
 8090a72:	bd10      	pop	{r4, pc}

08090a74 <_ZN7LSM9DS18calcgResEv>:
	// And write the new register value back into CTRL_REG5_XM:
	mWriteByte(CTRL_REG1_M, temp);
}

void LSM9DS1::calcgRes()
{
 8090a74:	b510      	push	{r4, lr}
 8090a76:	4604      	mov	r4, r0
	gRes = ((float) settings.gyro.scale) / 32768.0;
 8090a78:	88c0      	ldrh	r0, [r0, #6]
 8090a7a:	f002 fd23 	bl	80934c4 <__aeabi_ui2f>
 8090a7e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 8090a82:	f002 fd77 	bl	8093574 <__aeabi_fmul>
 8090a86:	6760      	str	r0, [r4, #116]	; 0x74
 8090a88:	bd10      	pop	{r4, pc}

08090a8a <_ZN7LSM9DS18calcaResEv>:
}

void LSM9DS1::calcaRes()
{
 8090a8a:	b510      	push	{r4, lr}
 8090a8c:	4604      	mov	r4, r0
	aRes = ((float) settings.accel.scale) / 32768.0;
 8090a8e:	7dc0      	ldrb	r0, [r0, #23]
 8090a90:	f002 fd18 	bl	80934c4 <__aeabi_ui2f>
 8090a94:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 8090a98:	f002 fd6c 	bl	8093574 <__aeabi_fmul>
 8090a9c:	67a0      	str	r0, [r4, #120]	; 0x78
 8090a9e:	bd10      	pop	{r4, pc}

08090aa0 <_ZN7LSM9DS18calcmResEv>:
}

void LSM9DS1::calcmRes()
{
	//mRes = ((float) settings.mag.scale) / 32768.0;
	switch (settings.mag.scale)
 8090aa0:	f890 3020 	ldrb.w	r3, [r0, #32]
 8090aa4:	3b04      	subs	r3, #4
 8090aa6:	2b0c      	cmp	r3, #12
 8090aa8:	d814      	bhi.n	8090ad4 <_ZN7LSM9DS18calcmResEv+0x34>
 8090aaa:	e8df f003 	tbb	[pc, r3]
 8090aae:	1307      	.short	0x1307
 8090ab0:	130a1313 	.word	0x130a1313
 8090ab4:	130d1313 	.word	0x130d1313
 8090ab8:	1313      	.short	0x1313
 8090aba:	10          	.byte	0x10
 8090abb:	00          	.byte	0x00
	{
	case 4:
		mRes = magSensitivity[0];
 8090abc:	4b06      	ldr	r3, [pc, #24]	; (8090ad8 <_ZN7LSM9DS18calcmResEv+0x38>)
 8090abe:	681b      	ldr	r3, [r3, #0]
 8090ac0:	e007      	b.n	8090ad2 <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 8:
		mRes = magSensitivity[1];
 8090ac2:	4b05      	ldr	r3, [pc, #20]	; (8090ad8 <_ZN7LSM9DS18calcmResEv+0x38>)
 8090ac4:	685b      	ldr	r3, [r3, #4]
 8090ac6:	e004      	b.n	8090ad2 <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 12:
		mRes = magSensitivity[2];
 8090ac8:	4b03      	ldr	r3, [pc, #12]	; (8090ad8 <_ZN7LSM9DS18calcmResEv+0x38>)
 8090aca:	689b      	ldr	r3, [r3, #8]
 8090acc:	e001      	b.n	8090ad2 <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 16:
		mRes = magSensitivity[3];
 8090ace:	4b02      	ldr	r3, [pc, #8]	; (8090ad8 <_ZN7LSM9DS18calcmResEv+0x38>)
 8090ad0:	68db      	ldr	r3, [r3, #12]
 8090ad2:	67c3      	str	r3, [r0, #124]	; 0x7c
 8090ad4:	4770      	bx	lr
 8090ad6:	bf00      	nop
 8090ad8:	20000430 	.word	0x20000430

08090adc <_ZN7LSM9DS115constrainScalesEv>:
	return (xgReadByte(FIFO_SRC) & 0x3F);
}

void LSM9DS1::constrainScales()
{
	if ((settings.gyro.scale != 245) && (settings.gyro.scale != 500) && 
 8090adc:	88c3      	ldrh	r3, [r0, #6]
 8090ade:	2bf5      	cmp	r3, #245	; 0xf5
 8090ae0:	d007      	beq.n	8090af2 <_ZN7LSM9DS115constrainScalesEv+0x16>
 8090ae2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8090ae6:	d004      	beq.n	8090af2 <_ZN7LSM9DS115constrainScalesEv+0x16>
 8090ae8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
		(settings.gyro.scale != 2000))
	{
		settings.gyro.scale = 245;
 8090aec:	bf1c      	itt	ne
 8090aee:	23f5      	movne	r3, #245	; 0xf5
 8090af0:	80c3      	strhne	r3, [r0, #6]
	}
		
	if ((settings.accel.scale != 2) && (settings.accel.scale != 4) &&
 8090af2:	7dc2      	ldrb	r2, [r0, #23]
 8090af4:	2a10      	cmp	r2, #16
 8090af6:	d803      	bhi.n	8090b00 <_ZN7LSM9DS115constrainScalesEv+0x24>
 8090af8:	4b08      	ldr	r3, [pc, #32]	; (8090b1c <_ZN7LSM9DS115constrainScalesEv+0x40>)
 8090afa:	40d3      	lsrs	r3, r2
 8090afc:	07da      	lsls	r2, r3, #31
 8090afe:	d401      	bmi.n	8090b04 <_ZN7LSM9DS115constrainScalesEv+0x28>
		(settings.accel.scale != 8) && (settings.accel.scale != 16))
	{
		settings.accel.scale = 2;
 8090b00:	2302      	movs	r3, #2
 8090b02:	75c3      	strb	r3, [r0, #23]
	}
		
	if ((settings.mag.scale != 4) && (settings.mag.scale != 8) &&
 8090b04:	f890 2020 	ldrb.w	r2, [r0, #32]
 8090b08:	2a10      	cmp	r2, #16
 8090b0a:	d803      	bhi.n	8090b14 <_ZN7LSM9DS115constrainScalesEv+0x38>
 8090b0c:	4b04      	ldr	r3, [pc, #16]	; (8090b20 <_ZN7LSM9DS115constrainScalesEv+0x44>)
 8090b0e:	40d3      	lsrs	r3, r2
 8090b10:	07db      	lsls	r3, r3, #31
 8090b12:	d402      	bmi.n	8090b1a <_ZN7LSM9DS115constrainScalesEv+0x3e>
		(settings.mag.scale != 12) && (settings.mag.scale != 16))
	{
		settings.mag.scale = 4;
 8090b14:	2304      	movs	r3, #4
 8090b16:	f880 3020 	strb.w	r3, [r0, #32]
 8090b1a:	4770      	bx	lr
 8090b1c:	00010114 	.word	0x00010114
 8090b20:	00011110 	.word	0x00011110

08090b24 <_ZN7LSM9DS17initSPIEv>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadBytes(_mAddress, subAddress, dest, count);
}

void LSM9DS1::initSPI()
{
 8090b24:	b510      	push	{r4, lr}
 8090b26:	4604      	mov	r4, r0
	pinMode(_xgAddress, OUTPUT);
 8090b28:	2101      	movs	r1, #1
 8090b2a:	f890 0073 	ldrb.w	r0, [r0, #115]	; 0x73
 8090b2e:	f001 fd35 	bl	809259c <pinMode>
	digitalWrite(_xgAddress, HIGH);
 8090b32:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
 8090b36:	2101      	movs	r1, #1
 8090b38:	f001 fd41 	bl	80925be <digitalWrite>
	pinMode(_mAddress, OUTPUT);
 8090b3c:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
 8090b40:	2101      	movs	r1, #1
 8090b42:	f001 fd2b 	bl	809259c <pinMode>
	digitalWrite(_mAddress, HIGH);
 8090b46:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
	
	SPI.begin();
 8090b4a:	4c0a      	ldr	r4, [pc, #40]	; (8090b74 <_ZN7LSM9DS17initSPIEv+0x50>)
void LSM9DS1::initSPI()
{
	pinMode(_xgAddress, OUTPUT);
	digitalWrite(_xgAddress, HIGH);
	pinMode(_mAddress, OUTPUT);
	digitalWrite(_mAddress, HIGH);
 8090b4c:	2101      	movs	r1, #1
 8090b4e:	f001 fd36 	bl	80925be <digitalWrite>
	
	SPI.begin();
 8090b52:	4620      	mov	r0, r4
 8090b54:	f000 fd3e 	bl	80915d4 <_ZN8SPIClass5beginEv>
	// Maximum SPI frequency is 10MHz:
	SPI.setClockDivider(SPI_CLOCK_DIV4); // Photon requires min. DIV4
 8090b58:	4620      	mov	r0, r4
 8090b5a:	2108      	movs	r1, #8
 8090b5c:	f000 fd92 	bl	8091684 <_ZN8SPIClass15setClockDividerEh>
	// Data is read and written MSb first.
	SPI.setBitOrder(MSBFIRST);
 8090b60:	4620      	mov	r0, r4
 8090b62:	2101      	movs	r1, #1
 8090b64:	f000 fd41 	bl	80915ea <_ZN8SPIClass11setBitOrderEh>
	// Data is captured on rising edge of clock (CPHA = 0)
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
 8090b68:	4620      	mov	r0, r4
}
 8090b6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SPI.setClockDivider(SPI_CLOCK_DIV4); // Photon requires min. DIV4
	// Data is read and written MSb first.
	SPI.setBitOrder(MSBFIRST);
	// Data is captured on rising edge of clock (CPHA = 0)
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
 8090b6e:	2100      	movs	r1, #0
 8090b70:	f000 bd3e 	b.w	80915f0 <_ZN8SPIClass11setDataModeEh>
 8090b74:	20004780 	.word	0x20004780

08090b78 <_ZN7LSM9DS112SPIwriteByteEhhh>:
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
 8090b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	digitalWrite(csPin, LOW); // Initiate communication
 8090b7a:	460c      	mov	r4, r1
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
 8090b7c:	4617      	mov	r7, r2
 8090b7e:	461e      	mov	r6, r3
	digitalWrite(csPin, LOW); // Initiate communication
	
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
 8090b80:	4d09      	ldr	r5, [pc, #36]	; (8090ba8 <_ZN7LSM9DS112SPIwriteByteEhhh+0x30>)
	SPI.setDataMode(SPI_MODE0);
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
	digitalWrite(csPin, LOW); // Initiate communication
 8090b82:	4620      	mov	r0, r4
 8090b84:	2100      	movs	r1, #0
 8090b86:	f001 fd1a 	bl	80925be <digitalWrite>
	
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
 8090b8a:	f007 013f 	and.w	r1, r7, #63	; 0x3f
 8090b8e:	4628      	mov	r0, r5
 8090b90:	f000 fd8c 	bl	80916ac <_ZN8SPIClass8transferEh>
	SPI.transfer(data); // Send data
 8090b94:	4631      	mov	r1, r6
 8090b96:	4628      	mov	r0, r5
 8090b98:	f000 fd88 	bl	80916ac <_ZN8SPIClass8transferEh>
	
	digitalWrite(csPin, HIGH); // Close communication
 8090b9c:	4620      	mov	r0, r4
}
 8090b9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
	SPI.transfer(data); // Send data
	
	digitalWrite(csPin, HIGH); // Close communication
 8090ba2:	2101      	movs	r1, #1
 8090ba4:	f001 bd0b 	b.w	80925be <digitalWrite>
 8090ba8:	20004780 	.word	0x20004780

08090bac <_ZN7LSM9DS112SPIreadBytesEhhPhh>:
	return temp;
}

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
 8090bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8090bae:	461e      	mov	r6, r3
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 8090bb0:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 8090bb4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 8090bb8:	428b      	cmp	r3, r1
	return temp;
}

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
 8090bba:	f89d 7018 	ldrb.w	r7, [sp, #24]
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 8090bbe:	f042 0580 	orr.w	r5, r2, #128	; 0x80
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 8090bc2:	d103      	bne.n	8090bcc <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x20>
 8090bc4:	2f01      	cmp	r7, #1
		rAddress |= 0x40;
 8090bc6:	bf88      	it	hi
 8090bc8:	f045 0540 	orrhi.w	r5, r5, #64	; 0x40
	
	digitalWrite(csPin, LOW); // Initiate communication
 8090bcc:	b28c      	uxth	r4, r1
 8090bce:	4620      	mov	r0, r4
 8090bd0:	2100      	movs	r1, #0
 8090bd2:	f001 fcf4 	bl	80925be <digitalWrite>
	SPI.transfer(rAddress);
 8090bd6:	4629      	mov	r1, r5
 8090bd8:	4809      	ldr	r0, [pc, #36]	; (8090c00 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x54>)
 8090bda:	f000 fd67 	bl	80916ac <_ZN8SPIClass8transferEh>
 8090bde:	4635      	mov	r5, r6
	for (int i=0; i<count; i++)
 8090be0:	1bab      	subs	r3, r5, r6
 8090be2:	429f      	cmp	r7, r3
 8090be4:	dd06      	ble.n	8090bf4 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x48>
	{
		dest[i] = SPI.transfer(0x00); // Read into destination array
 8090be6:	2100      	movs	r1, #0
 8090be8:	4805      	ldr	r0, [pc, #20]	; (8090c00 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x54>)
 8090bea:	f000 fd5f 	bl	80916ac <_ZN8SPIClass8transferEh>
 8090bee:	f805 0b01 	strb.w	r0, [r5], #1
	if ((csPin == _mAddress) && count > 1)
		rAddress |= 0x40;
	
	digitalWrite(csPin, LOW); // Initiate communication
	SPI.transfer(rAddress);
	for (int i=0; i<count; i++)
 8090bf2:	e7f5      	b.n	8090be0 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x34>
	{
		dest[i] = SPI.transfer(0x00); // Read into destination array
	}
	digitalWrite(csPin, HIGH); // Close communication
 8090bf4:	4620      	mov	r0, r4
 8090bf6:	2101      	movs	r1, #1
 8090bf8:	f001 fce1 	bl	80925be <digitalWrite>
	
	return 1;
}
 8090bfc:	2001      	movs	r0, #1
 8090bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8090c00:	20004780 	.word	0x20004780

08090c04 <_ZN7LSM9DS111SPIreadByteEhh>:
	
	digitalWrite(csPin, HIGH); // Close communication
}

uint8_t LSM9DS1::SPIreadByte(uint8_t csPin, uint8_t subAddress)
{
 8090c04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t temp;
	// Use the multiple read function to read 1 byte. 
	// Value is returned to `temp`.
	SPIreadBytes(csPin, subAddress, &temp, 1);
 8090c06:	2301      	movs	r3, #1
 8090c08:	9300      	str	r3, [sp, #0]
 8090c0a:	f10d 030f 	add.w	r3, sp, #15
 8090c0e:	f7ff ffcd 	bl	8090bac <_ZN7LSM9DS112SPIreadBytesEhhPhh>
	return temp;
}
 8090c12:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8090c16:	b005      	add	sp, #20
 8090c18:	f85d fb04 	ldr.w	pc, [sp], #4

08090c1c <_ZN7LSM9DS17initI2CEv>:
	
	return 1;
}

void LSM9DS1::initI2C()
{
 8090c1c:	b508      	push	{r3, lr}
	Wire.begin();	// Initialize I2C library
 8090c1e:	f001 fd2d 	bl	809267c <_Z19__fetch_global_Wirev>
}
 8090c22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return 1;
}

void LSM9DS1::initI2C()
{
	Wire.begin();	// Initialize I2C library
 8090c26:	f001 bc73 	b.w	8092510 <_ZN7TwoWire5beginEv>

08090c2a <_ZN7LSM9DS112I2CwriteByteEhhh>:
}

// Wire.h read and write protocols
void LSM9DS1::I2CwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 8090c2a:	b570      	push	{r4, r5, r6, lr}
 8090c2c:	460e      	mov	r6, r1
 8090c2e:	4615      	mov	r5, r2
 8090c30:	461c      	mov	r4, r3
	Wire.beginTransmission(address);  // Initialize the Tx buffer
 8090c32:	f001 fd23 	bl	809267c <_Z19__fetch_global_Wirev>
 8090c36:	4631      	mov	r1, r6
 8090c38:	f001 fc7c 	bl	8092534 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);           // Put slave register address in Tx buffer
 8090c3c:	f001 fd1e 	bl	809267c <_Z19__fetch_global_Wirev>
 8090c40:	6803      	ldr	r3, [r0, #0]
 8090c42:	4629      	mov	r1, r5
 8090c44:	689b      	ldr	r3, [r3, #8]
 8090c46:	4798      	blx	r3
	Wire.write(data);                 // Put data in Tx buffer
 8090c48:	f001 fd18 	bl	809267c <_Z19__fetch_global_Wirev>
 8090c4c:	6803      	ldr	r3, [r0, #0]
 8090c4e:	4621      	mov	r1, r4
 8090c50:	689a      	ldr	r2, [r3, #8]
 8090c52:	4790      	blx	r2
	Wire.endTransmission();           // Send the Tx buffer
 8090c54:	f001 fd12 	bl	809267c <_Z19__fetch_global_Wirev>
}
 8090c58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void LSM9DS1::I2CwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
	Wire.beginTransmission(address);  // Initialize the Tx buffer
	Wire.write(subAddress);           // Put slave register address in Tx buffer
	Wire.write(data);                 // Put data in Tx buffer
	Wire.endTransmission();           // Send the Tx buffer
 8090c5c:	f001 bc72 	b.w	8092544 <_ZN7TwoWire15endTransmissionEv>

08090c60 <_ZN7LSM9DS111xgWriteByteEhh>:
		settings.mag.scale = 4;
	}
}

void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
 8090c60:	4613      	mov	r3, r2
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 8090c62:	7802      	ldrb	r2, [r0, #0]
		settings.mag.scale = 4;
	}
}

void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
 8090c64:	b410      	push	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 8090c66:	2a01      	cmp	r2, #1
 8090c68:	d105      	bne.n	8090c76 <_ZN7LSM9DS111xgWriteByteEhh+0x16>
		I2CwriteByte(_xgAddress, subAddress, data);
 8090c6a:	460a      	mov	r2, r1
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}
 8090c6c:	bc10      	pop	{r4}
void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		I2CwriteByte(_xgAddress, subAddress, data);
 8090c6e:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 8090c72:	f7ff bfda 	b.w	8090c2a <_ZN7LSM9DS112I2CwriteByteEhhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 8090c76:	b92a      	cbnz	r2, 8090c84 <_ZN7LSM9DS111xgWriteByteEhh+0x24>
		SPIwriteByte(_xgAddress, subAddress, data);
 8090c78:	460a      	mov	r2, r1
}
 8090c7a:	bc10      	pop	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		I2CwriteByte(_xgAddress, subAddress, data);
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
 8090c7c:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 8090c80:	f7ff bf7a 	b.w	8090b78 <_ZN7LSM9DS112SPIwriteByteEhhh>
}
 8090c84:	bc10      	pop	{r4}
 8090c86:	4770      	bx	lr

08090c88 <_ZN7LSM9DS18initGyroEv>:
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}

void LSM9DS1::initGyro()
{
 8090c88:	b510      	push	{r4, lr}
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
 8090c8a:	7903      	ldrb	r3, [r0, #4]
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}

void LSM9DS1::initGyro()
{
 8090c8c:	4604      	mov	r4, r0
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
 8090c8e:	b113      	cbz	r3, 8090c96 <_ZN7LSM9DS18initGyroEv+0xe>
	{
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
 8090c90:	7a03      	ldrb	r3, [r0, #8]
 8090c92:	015b      	lsls	r3, r3, #5
 8090c94:	b2db      	uxtb	r3, r3
	}
	switch (settings.gyro.scale)
 8090c96:	88e2      	ldrh	r2, [r4, #6]
 8090c98:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 8090c9c:	d005      	beq.n	8090caa <_ZN7LSM9DS18initGyroEv+0x22>
 8090c9e:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 8090ca2:	d104      	bne.n	8090cae <_ZN7LSM9DS18initGyroEv+0x26>
	{
		case 500:
			tempRegValue |= (0x1 << 3);
			break;
		case 2000:
			tempRegValue |= (0x3 << 3);
 8090ca4:	f043 0318 	orr.w	r3, r3, #24
			break;
 8090ca8:	e001      	b.n	8090cae <_ZN7LSM9DS18initGyroEv+0x26>
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
	}
	switch (settings.gyro.scale)
	{
		case 500:
			tempRegValue |= (0x1 << 3);
 8090caa:	f043 0308 	orr.w	r3, r3, #8
		case 2000:
			tempRegValue |= (0x3 << 3);
			break;
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
 8090cae:	7a62      	ldrb	r2, [r4, #9]
	xgWriteByte(CTRL_REG1_G, tempRegValue);
 8090cb0:	2110      	movs	r1, #16
		case 2000:
			tempRegValue |= (0x3 << 3);
			break;
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
 8090cb2:	f002 0203 	and.w	r2, r2, #3
	xgWriteByte(CTRL_REG1_G, tempRegValue);
 8090cb6:	431a      	orrs	r2, r3
 8090cb8:	4620      	mov	r0, r4
 8090cba:	f7ff ffd1 	bl	8090c60 <_ZN7LSM9DS111xgWriteByteEhh>
	
	// CTRL_REG2_G (Default value: 0x00)
	// [0][0][0][0][INT_SEL1][INT_SEL0][OUT_SEL1][OUT_SEL0]
	// INT_SEL[1:0] - INT selection configuration
	// OUT_SEL[1:0] - Out selection configuration
	xgWriteByte(CTRL_REG2_G, 0x00);	
 8090cbe:	2200      	movs	r2, #0
 8090cc0:	2111      	movs	r1, #17
 8090cc2:	4620      	mov	r0, r4
 8090cc4:	f7ff ffcc 	bl	8090c60 <_ZN7LSM9DS111xgWriteByteEhh>
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
 8090cc8:	7aa3      	ldrb	r3, [r4, #10]
 8090cca:	2b00      	cmp	r3, #0
	if (settings.gyro.HPFEnable)
 8090ccc:	7ae3      	ldrb	r3, [r4, #11]
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
 8090cce:	bf14      	ite	ne
 8090cd0:	2280      	movne	r2, #128	; 0x80
 8090cd2:	2200      	moveq	r2, #0
	if (settings.gyro.HPFEnable)
 8090cd4:	b12b      	cbz	r3, 8090ce2 <_ZN7LSM9DS18initGyroEv+0x5a>
	{
		tempRegValue |= (1<<6) | (settings.gyro.HPFCutoff & 0x0F);
 8090cd6:	7b23      	ldrb	r3, [r4, #12]
 8090cd8:	f003 030f 	and.w	r3, r3, #15
 8090cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8090ce0:	431a      	orrs	r2, r3
	}
	xgWriteByte(CTRL_REG3_G, tempRegValue);
 8090ce2:	2112      	movs	r1, #18
 8090ce4:	4620      	mov	r0, r4
 8090ce6:	f7ff ffbb 	bl	8090c60 <_ZN7LSM9DS111xgWriteByteEhh>
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
 8090cea:	7ce3      	ldrb	r3, [r4, #19]
 8090cec:	2b00      	cmp	r3, #0
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
 8090cee:	7ca3      	ldrb	r3, [r4, #18]
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
 8090cf0:	bf0c      	ite	eq
 8090cf2:	2200      	moveq	r2, #0
 8090cf4:	2220      	movne	r2, #32
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
 8090cf6:	b113      	cbz	r3, 8090cfe <_ZN7LSM9DS18initGyroEv+0x76>
 8090cf8:	f042 0210 	orr.w	r2, r2, #16
 8090cfc:	b2d2      	uxtb	r2, r2
	if (settings.gyro.enableX) tempRegValue |= (1<<3);
 8090cfe:	7c63      	ldrb	r3, [r4, #17]
 8090d00:	b10b      	cbz	r3, 8090d06 <_ZN7LSM9DS18initGyroEv+0x7e>
 8090d02:	f042 0208 	orr.w	r2, r2, #8
	if (settings.gyro.latchInterrupt) tempRegValue |= (1<<1);
 8090d06:	7d23      	ldrb	r3, [r4, #20]
 8090d08:	b10b      	cbz	r3, 8090d0e <_ZN7LSM9DS18initGyroEv+0x86>
 8090d0a:	f042 0202 	orr.w	r2, r2, #2
	xgWriteByte(CTRL_REG4, tempRegValue);
 8090d0e:	211e      	movs	r1, #30
 8090d10:	4620      	mov	r0, r4
 8090d12:	f7ff ffa5 	bl	8090c60 <_ZN7LSM9DS111xgWriteByteEhh>
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
 8090d16:	7b63      	ldrb	r3, [r4, #13]
 8090d18:	2b00      	cmp	r3, #0
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
 8090d1a:	7ba3      	ldrb	r3, [r4, #14]
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
 8090d1c:	bf0c      	ite	eq
 8090d1e:	2200      	moveq	r2, #0
 8090d20:	2220      	movne	r2, #32
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
 8090d22:	b113      	cbz	r3, 8090d2a <_ZN7LSM9DS18initGyroEv+0xa2>
 8090d24:	f042 0210 	orr.w	r2, r2, #16
 8090d28:	b2d2      	uxtb	r2, r2
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
 8090d2a:	7be3      	ldrb	r3, [r4, #15]
 8090d2c:	b10b      	cbz	r3, 8090d32 <_ZN7LSM9DS18initGyroEv+0xaa>
 8090d2e:	f042 0208 	orr.w	r2, r2, #8
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
 8090d32:	4620      	mov	r0, r4
}
 8090d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
 8090d38:	2113      	movs	r1, #19
 8090d3a:	f7ff bf91 	b.w	8090c60 <_ZN7LSM9DS111xgWriteByteEhh>

08090d3e <_ZN7LSM9DS19initAccelEv>:
}

void LSM9DS1::initAccel()
{
 8090d3e:	b510      	push	{r4, lr}
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 8090d40:	7ec3      	ldrb	r3, [r0, #27]
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
}

void LSM9DS1::initAccel()
{
 8090d42:	4604      	mov	r4, r0
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 8090d44:	2b00      	cmp	r3, #0
	if (settings.accel.enableY) tempRegValue |= (1<<4);
 8090d46:	7e83      	ldrb	r3, [r0, #26]
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 8090d48:	bf0c      	ite	eq
 8090d4a:	2200      	moveq	r2, #0
 8090d4c:	2220      	movne	r2, #32
	if (settings.accel.enableY) tempRegValue |= (1<<4);
 8090d4e:	b113      	cbz	r3, 8090d56 <_ZN7LSM9DS19initAccelEv+0x18>
 8090d50:	f042 0210 	orr.w	r2, r2, #16
 8090d54:	b2d2      	uxtb	r2, r2
	if (settings.accel.enableX) tempRegValue |= (1<<3);
 8090d56:	7e63      	ldrb	r3, [r4, #25]
 8090d58:	b10b      	cbz	r3, 8090d5e <_ZN7LSM9DS19initAccelEv+0x20>
 8090d5a:	f042 0208 	orr.w	r2, r2, #8
	
	xgWriteByte(CTRL_REG5_XL, tempRegValue);
 8090d5e:	211f      	movs	r1, #31
 8090d60:	4620      	mov	r0, r4
 8090d62:	f7ff ff7d 	bl	8090c60 <_ZN7LSM9DS111xgWriteByteEhh>
	// FS_XL[1:0] - Full-scale selection
	// BW_SCAL_ODR - Bandwidth selection
	// BW_XL[1:0] - Anti-aliasing filter bandwidth selection
	tempRegValue = 0;
	// To disable the accel, set the sampleRate bits to 0.
	if (settings.accel.enabled)
 8090d66:	7da2      	ldrb	r2, [r4, #22]
 8090d68:	b112      	cbz	r2, 8090d70 <_ZN7LSM9DS19initAccelEv+0x32>
	{
		tempRegValue |= (settings.accel.sampleRate & 0x07) << 5;
 8090d6a:	7e22      	ldrb	r2, [r4, #24]
 8090d6c:	0152      	lsls	r2, r2, #5
 8090d6e:	b2d2      	uxtb	r2, r2
	}
	switch (settings.accel.scale)
 8090d70:	7de3      	ldrb	r3, [r4, #23]
 8090d72:	2b08      	cmp	r3, #8
 8090d74:	d006      	beq.n	8090d84 <_ZN7LSM9DS19initAccelEv+0x46>
 8090d76:	2b10      	cmp	r3, #16
 8090d78:	d007      	beq.n	8090d8a <_ZN7LSM9DS19initAccelEv+0x4c>
 8090d7a:	2b04      	cmp	r3, #4
 8090d7c:	d107      	bne.n	8090d8e <_ZN7LSM9DS19initAccelEv+0x50>
	{
		case 4:
			tempRegValue |= (0x2 << 3);
 8090d7e:	f042 0210 	orr.w	r2, r2, #16
			break;
 8090d82:	e004      	b.n	8090d8e <_ZN7LSM9DS19initAccelEv+0x50>
		case 8:
			tempRegValue |= (0x3 << 3);
 8090d84:	f042 0218 	orr.w	r2, r2, #24
			break;
 8090d88:	e001      	b.n	8090d8e <_ZN7LSM9DS19initAccelEv+0x50>
		case 16:
			tempRegValue |= (0x1 << 3);
 8090d8a:	f042 0208 	orr.w	r2, r2, #8
			break;
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
 8090d8e:	f994 301c 	ldrsb.w	r3, [r4, #28]
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
		tempRegValue |= (settings.accel.bandwidth & 0x03);
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 8090d92:	2120      	movs	r1, #32
		case 16:
			tempRegValue |= (0x1 << 3);
			break;
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
 8090d94:	2b00      	cmp	r3, #0
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
		tempRegValue |= (settings.accel.bandwidth & 0x03);
 8090d96:	bfa2      	ittt	ge
 8090d98:	f003 0303 	andge.w	r3, r3, #3
 8090d9c:	431a      	orrge	r2, r3
 8090d9e:	f042 0204 	orrge.w	r2, r2, #4
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 8090da2:	4620      	mov	r0, r4
 8090da4:	f7ff ff5c 	bl	8090c60 <_ZN7LSM9DS111xgWriteByteEhh>
	// HR - High resolution mode (0: disable, 1: enable)
	// DCF[1:0] - Digital filter cutoff frequency
	// FDS - Filtered data selection
	// HPIS1 - HPF enabled for interrupt function
	tempRegValue = 0;
	if (settings.accel.highResEnable)
 8090da8:	7f62      	ldrb	r2, [r4, #29]
 8090daa:	b12a      	cbz	r2, 8090db8 <_ZN7LSM9DS19initAccelEv+0x7a>
	{
		tempRegValue |= (1<<7); // Set HR bit
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
 8090dac:	7fa2      	ldrb	r2, [r4, #30]
 8090dae:	0152      	lsls	r2, r2, #5
 8090db0:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8090db4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
 8090db8:	4620      	mov	r0, r4
}
 8090dba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (settings.accel.highResEnable)
	{
		tempRegValue |= (1<<7); // Set HR bit
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
 8090dbe:	2121      	movs	r1, #33	; 0x21
 8090dc0:	f7ff bf4e 	b.w	8090c60 <_ZN7LSM9DS111xgWriteByteEhh>

08090dc4 <_ZN7LSM9DS110mWriteByteEhh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}

void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
 8090dc4:	4613      	mov	r3, r2
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 8090dc6:	7802      	ldrb	r2, [r0, #0]
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}

void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
 8090dc8:	b410      	push	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 8090dca:	2a01      	cmp	r2, #1
 8090dcc:	d105      	bne.n	8090dda <_ZN7LSM9DS110mWriteByteEhh+0x16>
		return I2CwriteByte(_mAddress, subAddress, data);
 8090dce:	460a      	mov	r2, r1
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
}
 8090dd0:	bc10      	pop	{r4}
void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		return I2CwriteByte(_mAddress, subAddress, data);
 8090dd2:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 8090dd6:	f7ff bf28 	b.w	8090c2a <_ZN7LSM9DS112I2CwriteByteEhhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 8090dda:	b92a      	cbnz	r2, 8090de8 <_ZN7LSM9DS110mWriteByteEhh+0x24>
		return SPIwriteByte(_mAddress, subAddress, data);
 8090ddc:	460a      	mov	r2, r1
}
 8090dde:	bc10      	pop	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		return I2CwriteByte(_mAddress, subAddress, data);
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
 8090de0:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 8090de4:	f7ff bec8 	b.w	8090b78 <_ZN7LSM9DS112SPIwriteByteEhhh>
}
 8090de8:	bc10      	pop	{r4}
 8090dea:	4770      	bx	lr

08090dec <_ZN7LSM9DS17initMagEv>:
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
}

void LSM9DS1::initMag()
{
 8090dec:	b510      	push	{r4, lr}
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 8090dee:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
}

void LSM9DS1::initMag()
{
 8090df2:	4604      	mov	r4, r0
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 8090df4:	2b00      	cmp	r3, #0
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 8090df6:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 8090dfa:	bf08      	it	eq
 8090dfc:	2200      	moveq	r2, #0
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 8090dfe:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8090e02:	f003 0160 	and.w	r1, r3, #96	; 0x60
 8090e06:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 8090e0a:	bf18      	it	ne
 8090e0c:	2280      	movne	r2, #128	; 0x80
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 8090e0e:	009b      	lsls	r3, r3, #2
 8090e10:	f003 031c 	and.w	r3, r3, #28
 8090e14:	430b      	orrs	r3, r1
	mWriteByte(CTRL_REG1_M, tempRegValue);
 8090e16:	431a      	orrs	r2, r3
 8090e18:	2120      	movs	r1, #32
 8090e1a:	f7ff ffd3 	bl	8090dc4 <_ZN7LSM9DS110mWriteByteEhh>
 8090e1e:	f894 3020 	ldrb.w	r3, [r4, #32]
	case 16:
		tempRegValue |= (0x3 << 5);
		break;
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
 8090e22:	4620      	mov	r0, r4
 8090e24:	3b08      	subs	r3, #8
 8090e26:	b2db      	uxtb	r3, r3
 8090e28:	2b08      	cmp	r3, #8
 8090e2a:	bf96      	itet	ls
 8090e2c:	4a12      	ldrls	r2, [pc, #72]	; (8090e78 <_ZN7LSM9DS17initMagEv+0x8c>)
	// [0][FS1][FS0][0][REBOOT][SOFT_RST][0][0]
	// FS[1:0] - Full-scale configuration
	// REBOOT - Reboot memory content (0:normal, 1:reboot)
	// SOFT_RST - Reset config and user registers (0:default, 1:reset)
	tempRegValue = 0;
	switch (settings.mag.scale)
 8090e2e:	2200      	movhi	r2, #0
 8090e30:	5cd2      	ldrbls	r2, [r2, r3]
	case 16:
		tempRegValue |= (0x3 << 5);
		break;
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
 8090e32:	2121      	movs	r1, #33	; 0x21
 8090e34:	f7ff ffc6 	bl	8090dc4 <_ZN7LSM9DS110mWriteByteEhh>
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 8090e38:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
	tempRegValue |= (settings.mag.operatingMode & 0x3);
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
 8090e3c:	4620      	mov	r0, r4
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 8090e3e:	2b00      	cmp	r3, #0
	tempRegValue |= (settings.mag.operatingMode & 0x3);
 8090e40:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 8090e44:	bf0c      	ite	eq
 8090e46:	2200      	moveq	r2, #0
 8090e48:	2220      	movne	r2, #32
	tempRegValue |= (settings.mag.operatingMode & 0x3);
 8090e4a:	f003 0303 	and.w	r3, r3, #3
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
 8090e4e:	431a      	orrs	r2, r3
 8090e50:	2122      	movs	r1, #34	; 0x22
 8090e52:	f7ff ffb7 	bl	8090dc4 <_ZN7LSM9DS110mWriteByteEhh>
	//	00:low-power mode, 01:medium performance
	//	10:high performance, 10:ultra-high performance
	// BLE - Big/little endian data
	tempRegValue = 0;
	tempRegValue = (settings.mag.ZPerformance & 0x3) << 2;
	mWriteByte(CTRL_REG4_M, tempRegValue);
 8090e56:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8090e5a:	4620      	mov	r0, r4
 8090e5c:	0092      	lsls	r2, r2, #2
 8090e5e:	f002 020c 	and.w	r2, r2, #12
 8090e62:	2123      	movs	r1, #35	; 0x23
 8090e64:	f7ff ffae 	bl	8090dc4 <_ZN7LSM9DS110mWriteByteEhh>
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
 8090e68:	4620      	mov	r0, r4
}
 8090e6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
 8090e6e:	2200      	movs	r2, #0
 8090e70:	2124      	movs	r1, #36	; 0x24
 8090e72:	f7ff bfa7 	b.w	8090dc4 <_ZN7LSM9DS110mWriteByteEhh>
 8090e76:	bf00      	nop
 8090e78:	0809738b 	.word	0x0809738b

08090e7c <_ZN7LSM9DS111I2CreadByteEhh>:
	Wire.write(data);                 // Put data in Tx buffer
	Wire.endTransmission();           // Send the Tx buffer
}

uint8_t LSM9DS1::I2CreadByte(uint8_t address, uint8_t subAddress)
{
 8090e7c:	b538      	push	{r3, r4, r5, lr}
 8090e7e:	460c      	mov	r4, r1
 8090e80:	4615      	mov	r5, r2
	uint8_t data; // `data` will store the register data	 
	Wire.beginTransmission(address);         // Initialize the Tx buffer
 8090e82:	f001 fbfb 	bl	809267c <_Z19__fetch_global_Wirev>
 8090e86:	4621      	mov	r1, r4
 8090e88:	f001 fb54 	bl	8092534 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);	                 // Put slave register address in Tx buffer
 8090e8c:	f001 fbf6 	bl	809267c <_Z19__fetch_global_Wirev>
 8090e90:	6803      	ldr	r3, [r0, #0]
 8090e92:	4629      	mov	r1, r5
 8090e94:	689b      	ldr	r3, [r3, #8]
 8090e96:	4798      	blx	r3
	Wire.endTransmission(false);             // Send the Tx buffer, but send a restart to keep connection alive
 8090e98:	f001 fbf0 	bl	809267c <_Z19__fetch_global_Wirev>
 8090e9c:	2100      	movs	r1, #0
 8090e9e:	f001 fb4d 	bl	809253c <_ZN7TwoWire15endTransmissionEh>
	Wire.requestFrom(address, (uint8_t) 1);  // Read one byte from slave register address 
 8090ea2:	f001 fbeb 	bl	809267c <_Z19__fetch_global_Wirev>
 8090ea6:	2201      	movs	r2, #1
 8090ea8:	4621      	mov	r1, r4
 8090eaa:	f001 fb40 	bl	809252e <_ZN7TwoWire11requestFromEhh>
	data = Wire.read();                      // Fill Rx buffer with result
 8090eae:	f001 fbe5 	bl	809267c <_Z19__fetch_global_Wirev>
 8090eb2:	6803      	ldr	r3, [r0, #0]
 8090eb4:	695b      	ldr	r3, [r3, #20]
 8090eb6:	4798      	blx	r3
	return data;                             // Return data read from slave register
}
 8090eb8:	b2c0      	uxtb	r0, r0
 8090eba:	bd38      	pop	{r3, r4, r5, pc}

08090ebc <_ZN7LSM9DS110xgReadByteEh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
}

uint8_t LSM9DS1::xgReadByte(uint8_t subAddress)
{
 8090ebc:	460a      	mov	r2, r1
	// Whether we're using I2C or SPI, read a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 8090ebe:	7801      	ldrb	r1, [r0, #0]
 8090ec0:	2901      	cmp	r1, #1
 8090ec2:	d103      	bne.n	8090ecc <_ZN7LSM9DS110xgReadByteEh+0x10>
		return I2CreadByte(_xgAddress, subAddress);
 8090ec4:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 8090ec8:	f7ff bfd8 	b.w	8090e7c <_ZN7LSM9DS111I2CreadByteEhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 8090ecc:	b919      	cbnz	r1, 8090ed6 <_ZN7LSM9DS110xgReadByteEh+0x1a>
		return SPIreadByte(_xgAddress, subAddress);
 8090ece:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 8090ed2:	f7ff be97 	b.w	8090c04 <_ZN7LSM9DS111SPIreadByteEhh>
	
	return 0;
}
 8090ed6:	2000      	movs	r0, #0
 8090ed8:	4770      	bx	lr

08090eda <_ZN7LSM9DS19mReadByteEh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadBytes(_xgAddress, subAddress, dest, count);
}

uint8_t LSM9DS1::mReadByte(uint8_t subAddress)
{
 8090eda:	460a      	mov	r2, r1
	// Whether we're using I2C or SPI, read a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 8090edc:	7801      	ldrb	r1, [r0, #0]
 8090ede:	2901      	cmp	r1, #1
 8090ee0:	d103      	bne.n	8090eea <_ZN7LSM9DS19mReadByteEh+0x10>
		return I2CreadByte(_mAddress, subAddress);
 8090ee2:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 8090ee6:	f7ff bfc9 	b.w	8090e7c <_ZN7LSM9DS111I2CreadByteEhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 8090eea:	b919      	cbnz	r1, 8090ef4 <_ZN7LSM9DS19mReadByteEh+0x1a>
		return SPIreadByte(_mAddress, subAddress);
 8090eec:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 8090ef0:	f7ff be88 	b.w	8090c04 <_ZN7LSM9DS111SPIreadByteEhh>
}
 8090ef4:	4770      	bx	lr

08090ef6 <_ZN7LSM9DS15beginEv>:
	_autoCalc = false;
}


uint16_t LSM9DS1::begin()
{
 8090ef6:	b538      	push	{r3, r4, r5, lr}
 8090ef8:	4604      	mov	r4, r0
	//! Todo: don't use _xgAddress or _mAddress, duplicating memory
	_xgAddress = settings.device.agAddress;
 8090efa:	7843      	ldrb	r3, [r0, #1]
 8090efc:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
	_mAddress = settings.device.mAddress;
 8090f00:	7883      	ldrb	r3, [r0, #2]
 8090f02:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
	
	constrainScales();
 8090f06:	f7ff fde9 	bl	8090adc <_ZN7LSM9DS115constrainScalesEv>
	// Once we have the scale values, we can calculate the resolution
	// of each sensor. That's what these functions are for. One for each sensor
	calcgRes(); // Calculate DPS / ADC tick, stored in gRes variable
 8090f0a:	f7ff fdb3 	bl	8090a74 <_ZN7LSM9DS18calcgResEv>
	calcmRes(); // Calculate Gs / ADC tick, stored in mRes variable
 8090f0e:	4620      	mov	r0, r4
 8090f10:	f7ff fdc6 	bl	8090aa0 <_ZN7LSM9DS18calcmResEv>
	calcaRes(); // Calculate g / ADC tick, stored in aRes variable
 8090f14:	4620      	mov	r0, r4
 8090f16:	f7ff fdb8 	bl	8090a8a <_ZN7LSM9DS18calcaResEv>
	
	// Now, initialize our hardware interface.
	if (settings.device.commInterface == IMU_MODE_I2C)	// If we're using I2C
 8090f1a:	7823      	ldrb	r3, [r4, #0]
 8090f1c:	2b01      	cmp	r3, #1
 8090f1e:	d103      	bne.n	8090f28 <_ZN7LSM9DS15beginEv+0x32>
		initI2C();	// Initialize I2C
 8090f20:	4620      	mov	r0, r4
 8090f22:	f7ff fe7b 	bl	8090c1c <_ZN7LSM9DS17initI2CEv>
 8090f26:	e003      	b.n	8090f30 <_ZN7LSM9DS15beginEv+0x3a>
	else if (settings.device.commInterface == IMU_MODE_SPI) 	// else, if we're using SPI
 8090f28:	b913      	cbnz	r3, 8090f30 <_ZN7LSM9DS15beginEv+0x3a>
		initSPI();	// Initialize SPI
 8090f2a:	4620      	mov	r0, r4
 8090f2c:	f7ff fdfa 	bl	8090b24 <_ZN7LSM9DS17initSPIEv>
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
 8090f30:	210f      	movs	r1, #15
 8090f32:	4620      	mov	r0, r4
 8090f34:	f7ff ffd1 	bl	8090eda <_ZN7LSM9DS19mReadByteEh>
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
 8090f38:	210f      	movs	r1, #15
	else if (settings.device.commInterface == IMU_MODE_SPI) 	// else, if we're using SPI
		initSPI();	// Initialize SPI
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
 8090f3a:	4605      	mov	r5, r0
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
 8090f3c:	4620      	mov	r0, r4
 8090f3e:	f7ff ffbd 	bl	8090ebc <_ZN7LSM9DS110xgReadByteEh>
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
 8090f42:	f646 033d 	movw	r3, #26685	; 0x683d
 8090f46:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
 8090f4a:	b205      	sxth	r5, r0
 8090f4c:	429d      	cmp	r5, r3
 8090f4e:	d10a      	bne.n	8090f66 <_ZN7LSM9DS15beginEv+0x70>
		return 0;
	
	// Gyro initialization stuff:
	initGyro();	// This will "turn on" the gyro. Setting up interrupts, etc.
 8090f50:	4620      	mov	r0, r4
 8090f52:	f7ff fe99 	bl	8090c88 <_ZN7LSM9DS18initGyroEv>
	
	// Accelerometer initialization stuff:
	initAccel(); // "Turn on" all axes of the accel. Set up interrupts, etc.
 8090f56:	4620      	mov	r0, r4
 8090f58:	f7ff fef1 	bl	8090d3e <_ZN7LSM9DS19initAccelEv>
	
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
 8090f5c:	4620      	mov	r0, r4
 8090f5e:	f7ff ff45 	bl	8090dec <_ZN7LSM9DS17initMagEv>
	
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
 8090f62:	4628      	mov	r0, r5
 8090f64:	bd38      	pop	{r3, r4, r5, pc}
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
		return 0;
 8090f66:	2000      	movs	r0, #0
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
	
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}
 8090f68:	bd38      	pop	{r3, r4, r5, pc}

08090f6a <_ZN7LSM9DS112I2CreadBytesEhhPhh>:
	data = Wire.read();                      // Fill Rx buffer with result
	return data;                             // Return data read from slave register
}

uint8_t LSM9DS1::I2CreadBytes(uint8_t address, uint8_t subAddress, uint8_t * dest, uint8_t count)
{  
 8090f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8090f6e:	4690      	mov	r8, r2
 8090f70:	460c      	mov	r4, r1
 8090f72:	461d      	mov	r5, r3
 8090f74:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8090f78:	f000 f918 	bl	80911ac <HAL_Timer_Get_Milli_Seconds>
 8090f7c:	4607      	mov	r7, r0
	unsigned long timeIn = millis();
	
	Wire.beginTransmission(address);   // Initialize the Tx buffer
 8090f7e:	f001 fb7d 	bl	809267c <_Z19__fetch_global_Wirev>
 8090f82:	4621      	mov	r1, r4
 8090f84:	f001 fad6 	bl	8092534 <_ZN7TwoWire17beginTransmissionEh>
	// Next send the register to be read. OR with 0x80 to indicate multi-read.
	Wire.write(subAddress | 0x80);     // Put slave register address in Tx buffer
 8090f88:	f001 fb78 	bl	809267c <_Z19__fetch_global_Wirev>
  void onRequest(void (*)(void));

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 8090f8c:	6803      	ldr	r3, [r0, #0]
 8090f8e:	f048 0180 	orr.w	r1, r8, #128	; 0x80
 8090f92:	689b      	ldr	r3, [r3, #8]
 8090f94:	4798      	blx	r3
	Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
 8090f96:	f001 fb71 	bl	809267c <_Z19__fetch_global_Wirev>
 8090f9a:	2100      	movs	r1, #0
 8090f9c:	f001 face 	bl	809253c <_ZN7TwoWire15endTransmissionEh>
	
	Wire.requestFrom(address, count);  // Read bytes from slave register address 
 8090fa0:	f001 fb6c 	bl	809267c <_Z19__fetch_global_Wirev>
 8090fa4:	4621      	mov	r1, r4
 8090fa6:	4632      	mov	r2, r6
 8090fa8:	f001 fac1 	bl	809252e <_ZN7TwoWire11requestFromEhh>
	for (int i=0; i<count;)
 8090fac:	2400      	movs	r4, #0
	{
		if (Wire.available())
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
 8090fae:	f507 777a 	add.w	r7, r7, #1000	; 0x3e8
	// Next send the register to be read. OR with 0x80 to indicate multi-read.
	Wire.write(subAddress | 0x80);     // Put slave register address in Tx buffer
	Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
	
	Wire.requestFrom(address, count);  // Read bytes from slave register address 
	for (int i=0; i<count;)
 8090fb2:	42b4      	cmp	r4, r6
 8090fb4:	da1a      	bge.n	8090fec <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x82>
	{
		if (Wire.available())
 8090fb6:	f001 fb61 	bl	809267c <_Z19__fetch_global_Wirev>
 8090fba:	6803      	ldr	r3, [r0, #0]
 8090fbc:	691b      	ldr	r3, [r3, #16]
 8090fbe:	4798      	blx	r3
 8090fc0:	b140      	cbz	r0, 8090fd4 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x6a>
		{
			dest[i++] = Wire.read();
 8090fc2:	f001 fb5b 	bl	809267c <_Z19__fetch_global_Wirev>
 8090fc6:	6803      	ldr	r3, [r0, #0]
 8090fc8:	f104 0801 	add.w	r8, r4, #1
 8090fcc:	695b      	ldr	r3, [r3, #20]
 8090fce:	4798      	blx	r3
 8090fd0:	5528      	strb	r0, [r5, r4]
 8090fd2:	4644      	mov	r4, r8
 8090fd4:	f000 f8ea 	bl	80911ac <HAL_Timer_Get_Milli_Seconds>
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
 8090fd8:	42b8      	cmp	r0, r7
 8090fda:	d9ea      	bls.n	8090fb2 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x48>
 8090fdc:	442c      	add	r4, r5
		{
			while (i < count)
				dest[i++] = 0xFF;
 8090fde:	23ff      	movs	r3, #255	; 0xff
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
 8090fe0:	1b62      	subs	r2, r4, r5
 8090fe2:	4296      	cmp	r6, r2
 8090fe4:	dd05      	ble.n	8090ff2 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x88>
				dest[i++] = 0xFF;
 8090fe6:	f804 3b01 	strb.w	r3, [r4], #1
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
 8090fea:	e7f9      	b.n	8090fe0 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x76>
				dest[i++] = 0xFF;
			return 0;
		}
	}
	return 1;
 8090fec:	2001      	movs	r0, #1
 8090fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
				dest[i++] = 0xFF;
			return 0;
 8090ff2:	2000      	movs	r0, #0
		}
	}
	return 1;
}
 8090ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08090ff8 <_ZN7LSM9DS111xgReadBytesEhPhh>:
	
	return 0;
}

uint8_t LSM9DS1::xgReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
 8090ff8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8090ffa:	460d      	mov	r5, r1
	// Whether we're using I2C or SPI, read multiple bytes using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 8090ffc:	7801      	ldrb	r1, [r0, #0]
 8090ffe:	2901      	cmp	r1, #1
 8091000:	d107      	bne.n	8091012 <_ZN7LSM9DS111xgReadBytesEhPhh+0x1a>
		return I2CreadBytes(_xgAddress, subAddress, dest, count);
 8091002:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 8091006:	9300      	str	r3, [sp, #0]
 8091008:	4613      	mov	r3, r2
 809100a:	462a      	mov	r2, r5
 809100c:	f7ff ffad 	bl	8090f6a <_ZN7LSM9DS112I2CreadBytesEhhPhh>
 8091010:	e007      	b.n	8091022 <_ZN7LSM9DS111xgReadBytesEhPhh+0x2a>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 8091012:	b931      	cbnz	r1, 8091022 <_ZN7LSM9DS111xgReadBytesEhPhh+0x2a>
		return SPIreadBytes(_xgAddress, subAddress, dest, count);
 8091014:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 8091018:	9300      	str	r3, [sp, #0]
 809101a:	4613      	mov	r3, r2
 809101c:	462a      	mov	r2, r5
 809101e:	f7ff fdc5 	bl	8090bac <_ZN7LSM9DS112SPIreadBytesEhhPhh>
}
 8091022:	b003      	add	sp, #12
 8091024:	bd30      	pop	{r4, r5, pc}

08091026 <_ZN7LSM9DS18readTempEv>:
	else
		return 0;
}

uint8_t LSM9DS1::readTemp()
{
 8091026:	b513      	push	{r0, r1, r4, lr}
	uint8_t temp[2]; // We'll read two bytes from the temperature sensor into temp	
	uint8_t status = xgReadBytes(OUT_TEMP_L, temp, 2); // Read 2 bytes, beginning at OUT_TEMP_L
 8091028:	2302      	movs	r3, #2
 809102a:	aa01      	add	r2, sp, #4
 809102c:	2115      	movs	r1, #21
	else
		return 0;
}

uint8_t LSM9DS1::readTemp()
{
 809102e:	4604      	mov	r4, r0
	uint8_t temp[2]; // We'll read two bytes from the temperature sensor into temp	
	uint8_t status = xgReadBytes(OUT_TEMP_L, temp, 2); // Read 2 bytes, beginning at OUT_TEMP_L
 8091030:	f7ff ffe2 	bl	8090ff8 <_ZN7LSM9DS111xgReadBytesEhPhh>
	if (status)
 8091034:	b130      	cbz	r0, 8091044 <_ZN7LSM9DS18readTempEv+0x1e>
		temperature = ((int16_t)temp[1] << 8) | temp[0];
 8091036:	f89d 2005 	ldrb.w	r2, [sp, #5]
 809103a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 809103e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8091042:	8763      	strh	r3, [r4, #58]	; 0x3a
	
	return status;
}
 8091044:	b002      	add	sp, #8
 8091046:	bd10      	pop	{r4, pc}

08091048 <_GLOBAL__sub_I_magSensitivity>:
 8091048:	f000 b830 	b.w	80910ac <HAL_Pin_Map>

0809104c <_ZN3DOF5setupEv>:
} 


void DOF::setup() 
{
  imu.settings.device.commInterface = IMU_MODE_I2C;
 809104c:	2301      	movs	r3, #1
 809104e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  imu.settings.device.mAddress = LSM9DS1_M;
 8091052:	231e      	movs	r3, #30
 8091054:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
  imu.settings.device.agAddress = LSM9DS1_AG;
 8091058:	236b      	movs	r3, #107	; 0x6b
 809105a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  imu.begin();
 809105e:	3034      	adds	r0, #52	; 0x34
 8091060:	f7ff bf49 	b.w	8090ef6 <_ZN7LSM9DS15beginEv>

08091064 <_ZN3DOFC1Ev>:
// http://www.ngdc.noaa.gov/geomag-web/#declination
#define DECLINATION -7.140 // Declination (degrees) in Columbus, OH.
//In future 


DOF::DOF()
 8091064:	b510      	push	{r4, lr}
 8091066:	4604      	mov	r4, r0
 8091068:	3034      	adds	r0, #52	; 0x34
 809106a:	f7ff fcfc 	bl	8090a66 <_ZN7LSM9DS1C1Ev>
{
	setup();
 809106e:	4620      	mov	r0, r4
 8091070:	f7ff ffec 	bl	809104c <_ZN3DOF5setupEv>
} 
 8091074:	4620      	mov	r0, r4
 8091076:	bd10      	pop	{r4, pc}

08091078 <_ZN3DOF7getTempEv>:
  MZ=imu.mz;
#endif
}

void DOF::getTemp()
{
 8091078:	b510      	push	{r4, lr}
 809107a:	4604      	mov	r4, r0
  // To read from the temperature, you must first call the
  // readTemp() function. When this exits, it'll update the
  // temperature with the most current data.
  imu.readTemp(); 
 809107c:	3034      	adds	r0, #52	; 0x34
 809107e:	f7ff ffd2 	bl	8091026 <_ZN7LSM9DS18readTempEv>
  // get temp
  TEMP = (imu.temperature/256 +25.0);
 8091082:	f9b4 006e 	ldrsh.w	r0, [r4, #110]	; 0x6e
 8091086:	f44f 7380 	mov.w	r3, #256	; 0x100
 809108a:	fb90 f0f3 	sdiv	r0, r0, r3
 809108e:	f001 fdb5 	bl	8092bfc <__aeabi_i2d>
 8091092:	2200      	movs	r2, #0
 8091094:	4b03      	ldr	r3, [pc, #12]	; (80910a4 <_ZN3DOF7getTempEv+0x2c>)
 8091096:	f001 fc65 	bl	8092964 <__adddf3>
 809109a:	f002 f90d 	bl	80932b8 <__aeabi_d2f>
 809109e:	6320      	str	r0, [r4, #48]	; 0x30
 80910a0:	bd10      	pop	{r4, pc}
 80910a2:	bf00      	nop
 80910a4:	40390000 	.word	0x40390000

080910a8 <_GLOBAL__sub_I__ZN3DOFC2Ev>:
 80910a8:	f000 b800 	b.w	80910ac <HAL_Pin_Map>

080910ac <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80910ac:	b508      	push	{r3, lr}
 80910ae:	4b02      	ldr	r3, [pc, #8]	; (80910b8 <HAL_Pin_Map+0xc>)
 80910b0:	681b      	ldr	r3, [r3, #0]
 80910b2:	681b      	ldr	r3, [r3, #0]
 80910b4:	9301      	str	r3, [sp, #4]
 80910b6:	bd08      	pop	{r3, pc}
 80910b8:	080401b0 	.word	0x080401b0

080910bc <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80910bc:	b508      	push	{r3, lr}
 80910be:	4b02      	ldr	r3, [pc, #8]	; (80910c8 <HAL_Pin_Mode+0xc>)
 80910c0:	681b      	ldr	r3, [r3, #0]
 80910c2:	689b      	ldr	r3, [r3, #8]
 80910c4:	9301      	str	r3, [sp, #4]
 80910c6:	bd08      	pop	{r3, pc}
 80910c8:	080401b0 	.word	0x080401b0

080910cc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80910cc:	b508      	push	{r3, lr}
 80910ce:	4b02      	ldr	r3, [pc, #8]	; (80910d8 <HAL_Get_Pin_Mode+0xc>)
 80910d0:	681b      	ldr	r3, [r3, #0]
 80910d2:	68db      	ldr	r3, [r3, #12]
 80910d4:	9301      	str	r3, [sp, #4]
 80910d6:	bd08      	pop	{r3, pc}
 80910d8:	080401b0 	.word	0x080401b0

080910dc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80910dc:	b508      	push	{r3, lr}
 80910de:	4b02      	ldr	r3, [pc, #8]	; (80910e8 <HAL_GPIO_Write+0xc>)
 80910e0:	681b      	ldr	r3, [r3, #0]
 80910e2:	691b      	ldr	r3, [r3, #16]
 80910e4:	9301      	str	r3, [sp, #4]
 80910e6:	bd08      	pop	{r3, pc}
 80910e8:	080401b0 	.word	0x080401b0

080910ec <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80910ec:	b508      	push	{r3, lr}
 80910ee:	4b02      	ldr	r3, [pc, #8]	; (80910f8 <HAL_SPI_Begin+0xc>)
 80910f0:	681b      	ldr	r3, [r3, #0]
 80910f2:	681b      	ldr	r3, [r3, #0]
 80910f4:	9301      	str	r3, [sp, #4]
 80910f6:	bd08      	pop	{r3, pc}
 80910f8:	080401b4 	.word	0x080401b4

080910fc <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 80910fc:	b508      	push	{r3, lr}
 80910fe:	4b02      	ldr	r3, [pc, #8]	; (8091108 <HAL_SPI_Set_Bit_Order+0xc>)
 8091100:	681b      	ldr	r3, [r3, #0]
 8091102:	689b      	ldr	r3, [r3, #8]
 8091104:	9301      	str	r3, [sp, #4]
 8091106:	bd08      	pop	{r3, pc}
 8091108:	080401b4 	.word	0x080401b4

0809110c <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 809110c:	b508      	push	{r3, lr}
 809110e:	4b02      	ldr	r3, [pc, #8]	; (8091118 <HAL_SPI_Set_Data_Mode+0xc>)
 8091110:	681b      	ldr	r3, [r3, #0]
 8091112:	68db      	ldr	r3, [r3, #12]
 8091114:	9301      	str	r3, [sp, #4]
 8091116:	bd08      	pop	{r3, pc}
 8091118:	080401b4 	.word	0x080401b4

0809111c <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 809111c:	b508      	push	{r3, lr}
 809111e:	4b02      	ldr	r3, [pc, #8]	; (8091128 <HAL_SPI_Set_Clock_Divider+0xc>)
 8091120:	681b      	ldr	r3, [r3, #0]
 8091122:	691b      	ldr	r3, [r3, #16]
 8091124:	9301      	str	r3, [sp, #4]
 8091126:	bd08      	pop	{r3, pc}
 8091128:	080401b4 	.word	0x080401b4

0809112c <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 809112c:	b508      	push	{r3, lr}
 809112e:	4b02      	ldr	r3, [pc, #8]	; (8091138 <HAL_SPI_Send_Receive_Data+0xc>)
 8091130:	681b      	ldr	r3, [r3, #0]
 8091132:	695b      	ldr	r3, [r3, #20]
 8091134:	9301      	str	r3, [sp, #4]
 8091136:	bd08      	pop	{r3, pc}
 8091138:	080401b4 	.word	0x080401b4

0809113c <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 809113c:	b508      	push	{r3, lr}
 809113e:	4b02      	ldr	r3, [pc, #8]	; (8091148 <HAL_SPI_Init+0xc>)
 8091140:	681b      	ldr	r3, [r3, #0]
 8091142:	69db      	ldr	r3, [r3, #28]
 8091144:	9301      	str	r3, [sp, #4]
 8091146:	bd08      	pop	{r3, pc}
 8091148:	080401b4 	.word	0x080401b4

0809114c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 809114c:	b508      	push	{r3, lr}
 809114e:	4b02      	ldr	r3, [pc, #8]	; (8091158 <HAL_SPI_Is_Enabled+0xc>)
 8091150:	681b      	ldr	r3, [r3, #0]
 8091152:	6a1b      	ldr	r3, [r3, #32]
 8091154:	9301      	str	r3, [sp, #4]
 8091156:	bd08      	pop	{r3, pc}
 8091158:	080401b4 	.word	0x080401b4

0809115c <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 809115c:	b508      	push	{r3, lr}
 809115e:	4b02      	ldr	r3, [pc, #8]	; (8091168 <HAL_SPI_Info+0xc>)
 8091160:	681b      	ldr	r3, [r3, #0]
 8091162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8091164:	9301      	str	r3, [sp, #4]
 8091166:	bd08      	pop	{r3, pc}
 8091168:	080401b4 	.word	0x080401b4

0809116c <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
 809116c:	b508      	push	{r3, lr}
 809116e:	4b02      	ldr	r3, [pc, #8]	; (8091178 <HAL_SPI_DMA_Transfer+0xc>)
 8091170:	681b      	ldr	r3, [r3, #0]
 8091172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8091174:	9301      	str	r3, [sp, #4]
 8091176:	bd08      	pop	{r3, pc}
 8091178:	080401b4 	.word	0x080401b4

0809117c <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
 809117c:	b508      	push	{r3, lr}
 809117e:	4b02      	ldr	r3, [pc, #8]	; (8091188 <HAL_SPI_DMA_Transfer_Status+0xc>)
 8091180:	681b      	ldr	r3, [r3, #0]
 8091182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8091184:	9301      	str	r3, [sp, #4]
 8091186:	bd08      	pop	{r3, pc}
 8091188:	080401b4 	.word	0x080401b4

0809118c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 809118c:	b508      	push	{r3, lr}
 809118e:	4b02      	ldr	r3, [pc, #8]	; (8091198 <HAL_RNG_GetRandomNumber+0xc>)
 8091190:	681b      	ldr	r3, [r3, #0]
 8091192:	685b      	ldr	r3, [r3, #4]
 8091194:	9301      	str	r3, [sp, #4]
 8091196:	bd08      	pop	{r3, pc}
 8091198:	0804019c 	.word	0x0804019c

0809119c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 809119c:	b508      	push	{r3, lr}
 809119e:	4b02      	ldr	r3, [pc, #8]	; (80911a8 <HAL_Delay_Microseconds+0xc>)
 80911a0:	681b      	ldr	r3, [r3, #0]
 80911a2:	68db      	ldr	r3, [r3, #12]
 80911a4:	9301      	str	r3, [sp, #4]
 80911a6:	bd08      	pop	{r3, pc}
 80911a8:	0804019c 	.word	0x0804019c

080911ac <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80911ac:	b508      	push	{r3, lr}
 80911ae:	4b02      	ldr	r3, [pc, #8]	; (80911b8 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80911b0:	681b      	ldr	r3, [r3, #0]
 80911b2:	695b      	ldr	r3, [r3, #20]
 80911b4:	9301      	str	r3, [sp, #4]
 80911b6:	bd08      	pop	{r3, pc}
 80911b8:	0804019c 	.word	0x0804019c

080911bc <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80911bc:	b508      	push	{r3, lr}
 80911be:	4b02      	ldr	r3, [pc, #8]	; (80911c8 <HAL_RTC_Get_UnixTime+0xc>)
 80911c0:	681b      	ldr	r3, [r3, #0]
 80911c2:	69db      	ldr	r3, [r3, #28]
 80911c4:	9301      	str	r3, [sp, #4]
 80911c6:	bd08      	pop	{r3, pc}
 80911c8:	0804019c 	.word	0x0804019c

080911cc <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80911cc:	b508      	push	{r3, lr}
 80911ce:	4b02      	ldr	r3, [pc, #8]	; (80911d8 <os_mutex_create+0xc>)
 80911d0:	681b      	ldr	r3, [r3, #0]
 80911d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80911d4:	9301      	str	r3, [sp, #4]
 80911d6:	bd08      	pop	{r3, pc}
 80911d8:	080401d0 	.word	0x080401d0

080911dc <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
 80911dc:	b508      	push	{r3, lr}
 80911de:	4b02      	ldr	r3, [pc, #8]	; (80911e8 <os_mutex_lock+0xc>)
 80911e0:	681b      	ldr	r3, [r3, #0]
 80911e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80911e4:	9301      	str	r3, [sp, #4]
 80911e6:	bd08      	pop	{r3, pc}
 80911e8:	080401d0 	.word	0x080401d0

080911ec <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80911ec:	b508      	push	{r3, lr}
 80911ee:	4b02      	ldr	r3, [pc, #8]	; (80911f8 <HAL_USART_Init+0xc>)
 80911f0:	681b      	ldr	r3, [r3, #0]
 80911f2:	699b      	ldr	r3, [r3, #24]
 80911f4:	9301      	str	r3, [sp, #4]
 80911f6:	bd08      	pop	{r3, pc}
 80911f8:	080401c4 	.word	0x080401c4

080911fc <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80911fc:	b508      	push	{r3, lr}
 80911fe:	4b02      	ldr	r3, [pc, #8]	; (8091208 <HAL_USART_Write_Data+0xc>)
 8091200:	681b      	ldr	r3, [r3, #0]
 8091202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8091204:	9301      	str	r3, [sp, #4]
 8091206:	bd08      	pop	{r3, pc}
 8091208:	080401c4 	.word	0x080401c4

0809120c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 809120c:	b508      	push	{r3, lr}
 809120e:	4b02      	ldr	r3, [pc, #8]	; (8091218 <HAL_USART_Available_Data+0xc>)
 8091210:	681b      	ldr	r3, [r3, #0]
 8091212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8091214:	9301      	str	r3, [sp, #4]
 8091216:	bd08      	pop	{r3, pc}
 8091218:	080401c4 	.word	0x080401c4

0809121c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 809121c:	b508      	push	{r3, lr}
 809121e:	4b02      	ldr	r3, [pc, #8]	; (8091228 <HAL_USART_Read_Data+0xc>)
 8091220:	681b      	ldr	r3, [r3, #0]
 8091222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8091224:	9301      	str	r3, [sp, #4]
 8091226:	bd08      	pop	{r3, pc}
 8091228:	080401c4 	.word	0x080401c4

0809122c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 809122c:	b508      	push	{r3, lr}
 809122e:	4b02      	ldr	r3, [pc, #8]	; (8091238 <HAL_USART_Peek_Data+0xc>)
 8091230:	681b      	ldr	r3, [r3, #0]
 8091232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8091234:	9301      	str	r3, [sp, #4]
 8091236:	bd08      	pop	{r3, pc}
 8091238:	080401c4 	.word	0x080401c4

0809123c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 809123c:	b508      	push	{r3, lr}
 809123e:	4b02      	ldr	r3, [pc, #8]	; (8091248 <HAL_USART_Flush_Data+0xc>)
 8091240:	681b      	ldr	r3, [r3, #0]
 8091242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8091244:	9301      	str	r3, [sp, #4]
 8091246:	bd08      	pop	{r3, pc}
 8091248:	080401c4 	.word	0x080401c4

0809124c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 809124c:	b508      	push	{r3, lr}
 809124e:	4b02      	ldr	r3, [pc, #8]	; (8091258 <HAL_USART_Is_Enabled+0xc>)
 8091250:	681b      	ldr	r3, [r3, #0]
 8091252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8091254:	9301      	str	r3, [sp, #4]
 8091256:	bd08      	pop	{r3, pc}
 8091258:	080401c4 	.word	0x080401c4

0809125c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 809125c:	b508      	push	{r3, lr}
 809125e:	4b02      	ldr	r3, [pc, #8]	; (8091268 <HAL_USART_Available_Data_For_Write+0xc>)
 8091260:	681b      	ldr	r3, [r3, #0]
 8091262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8091264:	9301      	str	r3, [sp, #4]
 8091266:	bd08      	pop	{r3, pc}
 8091268:	080401c4 	.word	0x080401c4

0809126c <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 809126c:	b508      	push	{r3, lr}
 809126e:	4b02      	ldr	r3, [pc, #8]	; (8091278 <HAL_I2C_Begin+0xc>)
 8091270:	681b      	ldr	r3, [r3, #0]
 8091272:	68db      	ldr	r3, [r3, #12]
 8091274:	9301      	str	r3, [sp, #4]
 8091276:	bd08      	pop	{r3, pc}
 8091278:	080401ac 	.word	0x080401ac

0809127c <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 809127c:	b508      	push	{r3, lr}
 809127e:	4b02      	ldr	r3, [pc, #8]	; (8091288 <HAL_I2C_Request_Data+0xc>)
 8091280:	681b      	ldr	r3, [r3, #0]
 8091282:	695b      	ldr	r3, [r3, #20]
 8091284:	9301      	str	r3, [sp, #4]
 8091286:	bd08      	pop	{r3, pc}
 8091288:	080401ac 	.word	0x080401ac

0809128c <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 809128c:	b508      	push	{r3, lr}
 809128e:	4b02      	ldr	r3, [pc, #8]	; (8091298 <HAL_I2C_Begin_Transmission+0xc>)
 8091290:	681b      	ldr	r3, [r3, #0]
 8091292:	699b      	ldr	r3, [r3, #24]
 8091294:	9301      	str	r3, [sp, #4]
 8091296:	bd08      	pop	{r3, pc}
 8091298:	080401ac 	.word	0x080401ac

0809129c <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 809129c:	b508      	push	{r3, lr}
 809129e:	4b02      	ldr	r3, [pc, #8]	; (80912a8 <HAL_I2C_End_Transmission+0xc>)
 80912a0:	681b      	ldr	r3, [r3, #0]
 80912a2:	69db      	ldr	r3, [r3, #28]
 80912a4:	9301      	str	r3, [sp, #4]
 80912a6:	bd08      	pop	{r3, pc}
 80912a8:	080401ac 	.word	0x080401ac

080912ac <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80912ac:	b508      	push	{r3, lr}
 80912ae:	4b02      	ldr	r3, [pc, #8]	; (80912b8 <HAL_I2C_Write_Data+0xc>)
 80912b0:	681b      	ldr	r3, [r3, #0]
 80912b2:	6a1b      	ldr	r3, [r3, #32]
 80912b4:	9301      	str	r3, [sp, #4]
 80912b6:	bd08      	pop	{r3, pc}
 80912b8:	080401ac 	.word	0x080401ac

080912bc <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80912bc:	b508      	push	{r3, lr}
 80912be:	4b02      	ldr	r3, [pc, #8]	; (80912c8 <HAL_I2C_Available_Data+0xc>)
 80912c0:	681b      	ldr	r3, [r3, #0]
 80912c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80912c4:	9301      	str	r3, [sp, #4]
 80912c6:	bd08      	pop	{r3, pc}
 80912c8:	080401ac 	.word	0x080401ac

080912cc <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80912cc:	b508      	push	{r3, lr}
 80912ce:	4b02      	ldr	r3, [pc, #8]	; (80912d8 <HAL_I2C_Read_Data+0xc>)
 80912d0:	681b      	ldr	r3, [r3, #0]
 80912d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80912d4:	9301      	str	r3, [sp, #4]
 80912d6:	bd08      	pop	{r3, pc}
 80912d8:	080401ac 	.word	0x080401ac

080912dc <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80912dc:	b508      	push	{r3, lr}
 80912de:	4b02      	ldr	r3, [pc, #8]	; (80912e8 <HAL_I2C_Peek_Data+0xc>)
 80912e0:	681b      	ldr	r3, [r3, #0]
 80912e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80912e4:	9301      	str	r3, [sp, #4]
 80912e6:	bd08      	pop	{r3, pc}
 80912e8:	080401ac 	.word	0x080401ac

080912ec <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80912ec:	b508      	push	{r3, lr}
 80912ee:	4b02      	ldr	r3, [pc, #8]	; (80912f8 <HAL_I2C_Flush_Data+0xc>)
 80912f0:	681b      	ldr	r3, [r3, #0]
 80912f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80912f4:	9301      	str	r3, [sp, #4]
 80912f6:	bd08      	pop	{r3, pc}
 80912f8:	080401ac 	.word	0x080401ac

080912fc <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80912fc:	b508      	push	{r3, lr}
 80912fe:	4b02      	ldr	r3, [pc, #8]	; (8091308 <HAL_I2C_Is_Enabled+0xc>)
 8091300:	681b      	ldr	r3, [r3, #0]
 8091302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8091304:	9301      	str	r3, [sp, #4]
 8091306:	bd08      	pop	{r3, pc}
 8091308:	080401ac 	.word	0x080401ac

0809130c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 809130c:	b508      	push	{r3, lr}
 809130e:	4b02      	ldr	r3, [pc, #8]	; (8091318 <HAL_I2C_Init+0xc>)
 8091310:	681b      	ldr	r3, [r3, #0]
 8091312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8091314:	9301      	str	r3, [sp, #4]
 8091316:	bd08      	pop	{r3, pc}
 8091318:	080401ac 	.word	0x080401ac

0809131c <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 809131c:	b508      	push	{r3, lr}
 809131e:	4b02      	ldr	r3, [pc, #8]	; (8091328 <socket_active_status+0xc>)
 8091320:	681b      	ldr	r3, [r3, #0]
 8091322:	681b      	ldr	r3, [r3, #0]
 8091324:	9301      	str	r3, [sp, #4]
 8091326:	bd08      	pop	{r3, pc}
 8091328:	08060024 	.word	0x08060024

0809132c <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 809132c:	b508      	push	{r3, lr}
 809132e:	4b02      	ldr	r3, [pc, #8]	; (8091338 <socket_handle_valid+0xc>)
 8091330:	681b      	ldr	r3, [r3, #0]
 8091332:	685b      	ldr	r3, [r3, #4]
 8091334:	9301      	str	r3, [sp, #4]
 8091336:	bd08      	pop	{r3, pc}
 8091338:	08060024 	.word	0x08060024

0809133c <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 809133c:	b508      	push	{r3, lr}
 809133e:	4b02      	ldr	r3, [pc, #8]	; (8091348 <socket_create+0xc>)
 8091340:	681b      	ldr	r3, [r3, #0]
 8091342:	689b      	ldr	r3, [r3, #8]
 8091344:	9301      	str	r3, [sp, #4]
 8091346:	bd08      	pop	{r3, pc}
 8091348:	08060024 	.word	0x08060024

0809134c <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 809134c:	b508      	push	{r3, lr}
 809134e:	4b02      	ldr	r3, [pc, #8]	; (8091358 <socket_connect+0xc>)
 8091350:	681b      	ldr	r3, [r3, #0]
 8091352:	68db      	ldr	r3, [r3, #12]
 8091354:	9301      	str	r3, [sp, #4]
 8091356:	bd08      	pop	{r3, pc}
 8091358:	08060024 	.word	0x08060024

0809135c <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 809135c:	b508      	push	{r3, lr}
 809135e:	4b02      	ldr	r3, [pc, #8]	; (8091368 <socket_receive+0xc>)
 8091360:	681b      	ldr	r3, [r3, #0]
 8091362:	691b      	ldr	r3, [r3, #16]
 8091364:	9301      	str	r3, [sp, #4]
 8091366:	bd08      	pop	{r3, pc}
 8091368:	08060024 	.word	0x08060024

0809136c <socket_send>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
 809136c:	b508      	push	{r3, lr}
 809136e:	4b02      	ldr	r3, [pc, #8]	; (8091378 <socket_send+0xc>)
 8091370:	681b      	ldr	r3, [r3, #0]
 8091372:	699b      	ldr	r3, [r3, #24]
 8091374:	9301      	str	r3, [sp, #4]
 8091376:	bd08      	pop	{r3, pc}
 8091378:	08060024 	.word	0x08060024

0809137c <socket_close>:
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 809137c:	b508      	push	{r3, lr}
 809137e:	4b02      	ldr	r3, [pc, #8]	; (8091388 <socket_close+0xc>)
 8091380:	681b      	ldr	r3, [r3, #0]
 8091382:	6a1b      	ldr	r3, [r3, #32]
 8091384:	9301      	str	r3, [sp, #4]
 8091386:	bd08      	pop	{r3, pc}
 8091388:	08060024 	.word	0x08060024

0809138c <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 809138c:	b508      	push	{r3, lr}
 809138e:	4b02      	ldr	r3, [pc, #8]	; (8091398 <socket_handle_invalid+0xc>)
 8091390:	681b      	ldr	r3, [r3, #0]
 8091392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8091394:	9301      	str	r3, [sp, #4]
 8091396:	bd08      	pop	{r3, pc}
 8091398:	08060024 	.word	0x08060024

0809139c <cellular_credentials_set>:
DYNALIB_FN(5, hal_cellular, cellular_pdp_deactivate, cellular_result_t(void*))
DYNALIB_FN(6, hal_cellular, cellular_gprs_attach, cellular_result_t(CellularCredentials*, void*))
DYNALIB_FN(7, hal_cellular, cellular_gprs_detach, cellular_result_t(void*))
DYNALIB_FN(8, hal_cellular, cellular_fetch_ipconfig, cellular_result_t(CellularConfig*, void*))
DYNALIB_FN(9, hal_cellular, cellular_device_info, cellular_result_t(CellularDevice*, void*))
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
 809139c:	b508      	push	{r3, lr}
 809139e:	4b02      	ldr	r3, [pc, #8]	; (80913a8 <cellular_credentials_set+0xc>)
 80913a0:	681b      	ldr	r3, [r3, #0]
 80913a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80913a4:	9301      	str	r3, [sp, #4]
 80913a6:	bd08      	pop	{r3, pc}
 80913a8:	08060020 	.word	0x08060020

080913ac <HAL_NET_SetNetWatchDog>:
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80913ac:	b508      	push	{r3, lr}
 80913ae:	4b02      	ldr	r3, [pc, #8]	; (80913b8 <HAL_NET_SetNetWatchDog+0xc>)
 80913b0:	681b      	ldr	r3, [r3, #0]
 80913b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80913b4:	9301      	str	r3, [sp, #4]
 80913b6:	bd08      	pop	{r3, pc}
 80913b8:	08060020 	.word	0x08060020

080913bc <inet_gethostbyname>:
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80913bc:	b508      	push	{r3, lr}
 80913be:	4b02      	ldr	r3, [pc, #8]	; (80913c8 <inet_gethostbyname+0xc>)
 80913c0:	681b      	ldr	r3, [r3, #0]
 80913c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80913c4:	9301      	str	r3, [sp, #4]
 80913c6:	bd08      	pop	{r3, pc}
 80913c8:	08060020 	.word	0x08060020

080913cc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80913cc:	b508      	push	{r3, lr}
 80913ce:	4b02      	ldr	r3, [pc, #8]	; (80913d8 <HAL_USB_USART_Init+0xc>)
 80913d0:	681b      	ldr	r3, [r3, #0]
 80913d2:	681b      	ldr	r3, [r3, #0]
 80913d4:	9301      	str	r3, [sp, #4]
 80913d6:	bd08      	pop	{r3, pc}
 80913d8:	0806001c 	.word	0x0806001c

080913dc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80913dc:	b508      	push	{r3, lr}
 80913de:	4b02      	ldr	r3, [pc, #8]	; (80913e8 <HAL_USB_USART_Begin+0xc>)
 80913e0:	681b      	ldr	r3, [r3, #0]
 80913e2:	685b      	ldr	r3, [r3, #4]
 80913e4:	9301      	str	r3, [sp, #4]
 80913e6:	bd08      	pop	{r3, pc}
 80913e8:	0806001c 	.word	0x0806001c

080913ec <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80913ec:	b508      	push	{r3, lr}
 80913ee:	4b02      	ldr	r3, [pc, #8]	; (80913f8 <HAL_USB_USART_Available_Data+0xc>)
 80913f0:	681b      	ldr	r3, [r3, #0]
 80913f2:	691b      	ldr	r3, [r3, #16]
 80913f4:	9301      	str	r3, [sp, #4]
 80913f6:	bd08      	pop	{r3, pc}
 80913f8:	0806001c 	.word	0x0806001c

080913fc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80913fc:	b508      	push	{r3, lr}
 80913fe:	4b02      	ldr	r3, [pc, #8]	; (8091408 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8091400:	681b      	ldr	r3, [r3, #0]
 8091402:	695b      	ldr	r3, [r3, #20]
 8091404:	9301      	str	r3, [sp, #4]
 8091406:	bd08      	pop	{r3, pc}
 8091408:	0806001c 	.word	0x0806001c

0809140c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 809140c:	b508      	push	{r3, lr}
 809140e:	4b02      	ldr	r3, [pc, #8]	; (8091418 <HAL_USB_USART_Receive_Data+0xc>)
 8091410:	681b      	ldr	r3, [r3, #0]
 8091412:	699b      	ldr	r3, [r3, #24]
 8091414:	9301      	str	r3, [sp, #4]
 8091416:	bd08      	pop	{r3, pc}
 8091418:	0806001c 	.word	0x0806001c

0809141c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 809141c:	b508      	push	{r3, lr}
 809141e:	4b02      	ldr	r3, [pc, #8]	; (8091428 <HAL_USB_USART_Send_Data+0xc>)
 8091420:	681b      	ldr	r3, [r3, #0]
 8091422:	69db      	ldr	r3, [r3, #28]
 8091424:	9301      	str	r3, [sp, #4]
 8091426:	bd08      	pop	{r3, pc}
 8091428:	0806001c 	.word	0x0806001c

0809142c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 809142c:	b508      	push	{r3, lr}
 809142e:	4b02      	ldr	r3, [pc, #8]	; (8091438 <HAL_USB_USART_Flush_Data+0xc>)
 8091430:	681b      	ldr	r3, [r3, #0]
 8091432:	6a1b      	ldr	r3, [r3, #32]
 8091434:	9301      	str	r3, [sp, #4]
 8091436:	bd08      	pop	{r3, pc}
 8091438:	0806001c 	.word	0x0806001c

0809143c <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 809143c:	b508      	push	{r3, lr}
 809143e:	4b02      	ldr	r3, [pc, #8]	; (8091448 <HAL_USB_USART_Is_Enabled+0xc>)
 8091440:	681b      	ldr	r3, [r3, #0]
 8091442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8091444:	9301      	str	r3, [sp, #4]
 8091446:	bd08      	pop	{r3, pc}
 8091448:	0806001c 	.word	0x0806001c

0809144c <LED_SetSignalingColor>:
#include "dynalib.h"

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
 809144c:	b508      	push	{r3, lr}
 809144e:	4b02      	ldr	r3, [pc, #8]	; (8091458 <LED_SetSignalingColor+0xc>)
 8091450:	681b      	ldr	r3, [r3, #0]
 8091452:	685b      	ldr	r3, [r3, #4]
 8091454:	9301      	str	r3, [sp, #4]
 8091456:	bd08      	pop	{r3, pc}
 8091458:	080201a0 	.word	0x080201a0

0809145c <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
 809145c:	b508      	push	{r3, lr}
 809145e:	4b02      	ldr	r3, [pc, #8]	; (8091468 <LED_Signaling_Start+0xc>)
 8091460:	681b      	ldr	r3, [r3, #0]
 8091462:	689b      	ldr	r3, [r3, #8]
 8091464:	9301      	str	r3, [sp, #4]
 8091466:	bd08      	pop	{r3, pc}
 8091468:	080201a0 	.word	0x080201a0

0809146c <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
 809146c:	b508      	push	{r3, lr}
 809146e:	4b02      	ldr	r3, [pc, #8]	; (8091478 <LED_Signaling_Stop+0xc>)
 8091470:	681b      	ldr	r3, [r3, #0]
 8091472:	68db      	ldr	r3, [r3, #12]
 8091474:	9301      	str	r3, [sp, #4]
 8091476:	bd08      	pop	{r3, pc}
 8091478:	080201a0 	.word	0x080201a0

0809147c <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
 809147c:	b508      	push	{r3, lr}
 809147e:	4b02      	ldr	r3, [pc, #8]	; (8091488 <LED_RGB_IsOverRidden+0xc>)
 8091480:	681b      	ldr	r3, [r3, #0]
 8091482:	699b      	ldr	r3, [r3, #24]
 8091484:	9301      	str	r3, [sp, #4]
 8091486:	bd08      	pop	{r3, pc}
 8091488:	080201a0 	.word	0x080201a0

0809148c <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
 809148c:	b508      	push	{r3, lr}
 809148e:	4b02      	ldr	r3, [pc, #8]	; (8091498 <LED_On+0xc>)
 8091490:	681b      	ldr	r3, [r3, #0]
 8091492:	69db      	ldr	r3, [r3, #28]
 8091494:	9301      	str	r3, [sp, #4]
 8091496:	bd08      	pop	{r3, pc}
 8091498:	080201a0 	.word	0x080201a0

0809149c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 809149c:	b508      	push	{r3, lr}
 809149e:	4b02      	ldr	r3, [pc, #8]	; (80914a8 <set_system_mode+0xc>)
 80914a0:	681b      	ldr	r3, [r3, #0]
 80914a2:	685b      	ldr	r3, [r3, #4]
 80914a4:	9301      	str	r3, [sp, #4]
 80914a6:	bd08      	pop	{r3, pc}
 80914a8:	080401a4 	.word	0x080401a4

080914ac <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80914ac:	b508      	push	{r3, lr}
 80914ae:	4b02      	ldr	r3, [pc, #8]	; (80914b8 <system_delay_ms+0xc>)
 80914b0:	681b      	ldr	r3, [r3, #0]
 80914b2:	695b      	ldr	r3, [r3, #20]
 80914b4:	9301      	str	r3, [sp, #4]
 80914b6:	bd08      	pop	{r3, pc}
 80914b8:	080401a4 	.word	0x080401a4

080914bc <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, void(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, void(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80914bc:	b508      	push	{r3, lr}
 80914be:	4b02      	ldr	r3, [pc, #8]	; (80914c8 <system_thread_set_state+0xc>)
 80914c0:	681b      	ldr	r3, [r3, #0]
 80914c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80914c4:	9301      	str	r3, [sp, #4]
 80914c6:	bd08      	pop	{r3, pc}
 80914c8:	080401a4 	.word	0x080401a4

080914cc <system_set_usb_request_app_handler>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
DYNALIB_FN(24, system, main_thread_current, uint8_t(void*))

#ifdef USB_VENDOR_REQUEST_ENABLE
DYNALIB_FN(25, system, system_set_usb_request_app_handler, void(usb_request_app_handler_type, void*))
 80914cc:	b508      	push	{r3, lr}
 80914ce:	4b02      	ldr	r3, [pc, #8]	; (80914d8 <system_set_usb_request_app_handler+0xc>)
 80914d0:	681b      	ldr	r3, [r3, #0]
 80914d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80914d4:	9301      	str	r3, [sp, #4]
 80914d6:	bd08      	pop	{r3, pc}
 80914d8:	080401a4 	.word	0x080401a4

080914dc <system_set_usb_request_result>:
DYNALIB_FN(26, system, system_set_usb_request_result, void(USBRequest*, int, void*))
 80914dc:	b508      	push	{r3, lr}
 80914de:	4b02      	ldr	r3, [pc, #8]	; (80914e8 <system_set_usb_request_result+0xc>)
 80914e0:	681b      	ldr	r3, [r3, #0]
 80914e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80914e4:	9301      	str	r3, [sp, #4]
 80914e6:	bd08      	pop	{r3, pc}
 80914e8:	080401a4 	.word	0x080401a4

080914ec <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80914ec:	b508      	push	{r3, lr}
 80914ee:	4b02      	ldr	r3, [pc, #8]	; (80914f8 <network_connect+0xc>)
 80914f0:	681b      	ldr	r3, [r3, #0]
 80914f2:	685b      	ldr	r3, [r3, #4]
 80914f4:	9301      	str	r3, [sp, #4]
 80914f6:	bd08      	pop	{r3, pc}
 80914f8:	080401c8 	.word	0x080401c8

080914fc <network_ready>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80914fc:	b508      	push	{r3, lr}
 80914fe:	4b02      	ldr	r3, [pc, #8]	; (8091508 <network_ready+0xc>)
 8091500:	681b      	ldr	r3, [r3, #0]
 8091502:	691b      	ldr	r3, [r3, #16]
 8091504:	9301      	str	r3, [sp, #4]
 8091506:	bd08      	pop	{r3, pc}
 8091508:	080401c8 	.word	0x080401c8

0809150c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 809150c:	b508      	push	{r3, lr}
 809150e:	4b02      	ldr	r3, [pc, #8]	; (8091518 <network_on+0xc>)
 8091510:	681b      	ldr	r3, [r3, #0]
 8091512:	695b      	ldr	r3, [r3, #20]
 8091514:	9301      	str	r3, [sp, #4]
 8091516:	bd08      	pop	{r3, pc}
 8091518:	080401c8 	.word	0x080401c8

0809151c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 809151c:	b508      	push	{r3, lr}
 809151e:	4b02      	ldr	r3, [pc, #8]	; (8091528 <spark_process+0xc>)
 8091520:	681b      	ldr	r3, [r3, #0]
 8091522:	689b      	ldr	r3, [r3, #8]
 8091524:	9301      	str	r3, [sp, #4]
 8091526:	bd08      	pop	{r3, pc}
 8091528:	080401cc 	.word	0x080401cc

0809152c <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 809152c:	b508      	push	{r3, lr}
 809152e:	4b02      	ldr	r3, [pc, #8]	; (8091538 <malloc+0xc>)
 8091530:	681b      	ldr	r3, [r3, #0]
 8091532:	681b      	ldr	r3, [r3, #0]
 8091534:	9301      	str	r3, [sp, #4]
 8091536:	bd08      	pop	{r3, pc}
 8091538:	080401a0 	.word	0x080401a0

0809153c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 809153c:	b508      	push	{r3, lr}
 809153e:	4b02      	ldr	r3, [pc, #8]	; (8091548 <free+0xc>)
 8091540:	681b      	ldr	r3, [r3, #0]
 8091542:	685b      	ldr	r3, [r3, #4]
 8091544:	9301      	str	r3, [sp, #4]
 8091546:	bd08      	pop	{r3, pc}
 8091548:	080401a0 	.word	0x080401a0

0809154c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 809154c:	b508      	push	{r3, lr}
 809154e:	4b02      	ldr	r3, [pc, #8]	; (8091558 <realloc+0xc>)
 8091550:	681b      	ldr	r3, [r3, #0]
 8091552:	689b      	ldr	r3, [r3, #8]
 8091554:	9301      	str	r3, [sp, #4]
 8091556:	bd08      	pop	{r3, pc}
 8091558:	080401a0 	.word	0x080401a0

0809155c <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 809155c:	b508      	push	{r3, lr}
 809155e:	4b02      	ldr	r3, [pc, #8]	; (8091568 <sprintf+0xc>)
 8091560:	681b      	ldr	r3, [r3, #0]
 8091562:	68db      	ldr	r3, [r3, #12]
 8091564:	9301      	str	r3, [sp, #4]
 8091566:	bd08      	pop	{r3, pc}
 8091568:	080401a0 	.word	0x080401a0

0809156c <snprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 809156c:	b508      	push	{r3, lr}
 809156e:	4b02      	ldr	r3, [pc, #8]	; (8091578 <snprintf+0xc>)
 8091570:	681b      	ldr	r3, [r3, #0]
 8091572:	69db      	ldr	r3, [r3, #28]
 8091574:	9301      	str	r3, [sp, #4]
 8091576:	bd08      	pop	{r3, pc}
 8091578:	080401a0 	.word	0x080401a0

0809157c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 809157c:	b508      	push	{r3, lr}
 809157e:	4b02      	ldr	r3, [pc, #8]	; (8091588 <vsnprintf+0xc>)
 8091580:	681b      	ldr	r3, [r3, #0]
 8091582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8091584:	9301      	str	r3, [sp, #4]
 8091586:	bd08      	pop	{r3, pc}
 8091588:	080401a0 	.word	0x080401a0

0809158c <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 809158c:	b508      	push	{r3, lr}
 809158e:	4b02      	ldr	r3, [pc, #8]	; (8091598 <_malloc_r+0xc>)
 8091590:	681b      	ldr	r3, [r3, #0]
 8091592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8091594:	9301      	str	r3, [sp, #4]
 8091596:	bd08      	pop	{r3, pc}
 8091598:	080401a0 	.word	0x080401a0

0809159c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 809159c:	4770      	bx	lr

0809159e <_ZN8SPIClassD0Ev>:
 809159e:	b510      	push	{r4, lr}
 80915a0:	4604      	mov	r4, r0
 80915a2:	f7ee fd7e 	bl	80800a2 <_ZdlPv>
 80915a6:	4620      	mov	r0, r4
 80915a8:	bd10      	pop	{r4, pc}
	...

080915ac <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80915ac:	b570      	push	{r4, r5, r6, lr}
 80915ae:	4604      	mov	r4, r0
 80915b0:	460e      	mov	r6, r1
 80915b2:	4b07      	ldr	r3, [pc, #28]	; (80915d0 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80915b4:	2500      	movs	r5, #0
 80915b6:	6003      	str	r3, [r0, #0]
 80915b8:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80915bc:	f7ff fe06 	bl	80911cc <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80915c0:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80915c2:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80915c4:	f7ff fdba 	bl	809113c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80915c8:	60a5      	str	r5, [r4, #8]
}
 80915ca:	4620      	mov	r0, r4
 80915cc:	bd70      	pop	{r4, r5, r6, pc}
 80915ce:	bf00      	nop
 80915d0:	0809739c 	.word	0x0809739c

080915d4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80915d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80915d8:	7900      	ldrb	r0, [r0, #4]
 80915da:	f7ff bd87 	b.w	80910ec <HAL_SPI_Begin>

080915de <_ZN8SPIClass5beginEt>:
}

void SPIClass::begin(uint16_t ss_pin)
{
  if (ss_pin >= TOTAL_PINS)
 80915de:	292e      	cmp	r1, #46	; 0x2e
 80915e0:	d802      	bhi.n	80915e8 <_ZN8SPIClass5beginEt+0xa>
  {
    return;
  }

  HAL_SPI_Begin(_spi, ss_pin);
 80915e2:	7900      	ldrb	r0, [r0, #4]
 80915e4:	f7ff bd82 	b.w	80910ec <HAL_SPI_Begin>
 80915e8:	4770      	bx	lr

080915ea <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 80915ea:	7900      	ldrb	r0, [r0, #4]
 80915ec:	f7ff bd86 	b.w	80910fc <HAL_SPI_Set_Bit_Order>

080915f0 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 80915f0:	7900      	ldrb	r0, [r0, #4]
 80915f2:	f7ff bd8b 	b.w	809110c <HAL_SPI_Set_Data_Mode>
	...

080915f8 <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80915f8:	4a05      	ldr	r2, [pc, #20]	; (8091610 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
 80915fa:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80915fc:	5c99      	ldrb	r1, [r3, r2]
 80915fe:	4281      	cmp	r1, r0
 8091600:	d002      	beq.n	8091608 <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
 8091602:	3301      	adds	r3, #1
 8091604:	2b08      	cmp	r3, #8
 8091606:	d1f9      	bne.n	80915fc <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
 8091608:	1c58      	adds	r0, r3, #1
}
 809160a:	b2c0      	uxtb	r0, r0
 809160c:	4770      	bx	lr
 809160e:	bf00      	nop
 8091610:	080973a4 	.word	0x080973a4

08091614 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 8091614:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 8091616:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 8091618:	6018      	str	r0, [r3, #0]
 809161a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 809161c:	6818      	ldr	r0, [r3, #0]
 809161e:	b2e5      	uxtb	r5, r4
 8091620:	4288      	cmp	r0, r1
 8091622:	d906      	bls.n	8091632 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 8091624:	3401      	adds	r4, #1
 8091626:	2c08      	cmp	r4, #8
 8091628:	d002      	beq.n	8091630 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 809162a:	0840      	lsrs	r0, r0, #1
 809162c:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 809162e:	e7f5      	b.n	809161c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 8091630:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 8091632:	4b02      	ldr	r3, [pc, #8]	; (809163c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 8091634:	5d5b      	ldrb	r3, [r3, r5]
 8091636:	7013      	strb	r3, [r2, #0]
 8091638:	bd30      	pop	{r4, r5, pc}
 809163a:	bf00      	nop
 809163c:	080973a4 	.word	0x080973a4

08091640 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 8091640:	b570      	push	{r4, r5, r6, lr}
 8091642:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 8091644:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 8091648:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 809164a:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 809164c:	2214      	movs	r2, #20
 809164e:	2100      	movs	r1, #0
 8091650:	a803      	add	r0, sp, #12
 8091652:	f002 faba 	bl	8093bca <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 8091656:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 8091658:	a903      	add	r1, sp, #12
 809165a:	4630      	mov	r0, r6
 809165c:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 809165e:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 8091662:	f7ff fd7b 	bl	809115c <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 8091666:	ab02      	add	r3, sp, #8
 8091668:	f10d 0207 	add.w	r2, sp, #7
 809166c:	4629      	mov	r1, r5
 809166e:	9804      	ldr	r0, [sp, #16]
 8091670:	f7ff ffd0 	bl	8091614 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 8091674:	7920      	ldrb	r0, [r4, #4]
 8091676:	f89d 1007 	ldrb.w	r1, [sp, #7]
 809167a:	f7ff fd4f 	bl	809111c <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 809167e:	9802      	ldr	r0, [sp, #8]
 8091680:	b008      	add	sp, #32
 8091682:	bd70      	pop	{r4, r5, r6, pc}

08091684 <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 8091684:	b538      	push	{r3, r4, r5, lr}
 8091686:	4604      	mov	r4, r0
    if (dividerReference)
 8091688:	68a5      	ldr	r5, [r4, #8]
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 809168a:	4608      	mov	r0, r1
    if (dividerReference)
 809168c:	b14d      	cbz	r5, 80916a2 <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
 809168e:	f7ff ffb3 	bl	80915f8 <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 8091692:	2201      	movs	r2, #1
 8091694:	fa25 f100 	lsr.w	r1, r5, r0
 8091698:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
 809169a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 809169e:	f7ff bfcf 	b.w	8091640 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80916a2:	7920      	ldrb	r0, [r4, #4]
    }
}
 80916a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80916a8:	f7ff bd38 	b.w	809111c <HAL_SPI_Set_Clock_Divider>

080916ac <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80916ac:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 80916ae:	7900      	ldrb	r0, [r0, #4]
 80916b0:	f7ff fd3c 	bl	809112c <HAL_SPI_Send_Receive_Data>
}
 80916b4:	b2c0      	uxtb	r0, r0
 80916b6:	bd08      	pop	{r3, pc}

080916b8 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 80916b8:	b530      	push	{r4, r5, lr}
 80916ba:	b087      	sub	sp, #28
 80916bc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80916be:	4604      	mov	r4, r0
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
 80916c0:	7900      	ldrb	r0, [r0, #4]
 80916c2:	9500      	str	r5, [sp, #0]
 80916c4:	f7ff fd52 	bl	809116c <HAL_SPI_DMA_Transfer>
  if (user_callback == NULL) {
 80916c8:	b93d      	cbnz	r5, 80916da <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    HAL_SPI_TransferStatus st;
    do {
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
 80916ca:	a902      	add	r1, sp, #8
 80916cc:	7920      	ldrb	r0, [r4, #4]
 80916ce:	f7ff fd55 	bl	809117c <HAL_SPI_DMA_Transfer_Status>
void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
  if (user_callback == NULL) {
    HAL_SPI_TransferStatus st;
    do {
 80916d2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80916d6:	07db      	lsls	r3, r3, #31
 80916d8:	d4f7      	bmi.n	80916ca <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
    } while(st.transfer_ongoing);
  }
}
 80916da:	b007      	add	sp, #28
 80916dc:	bd30      	pop	{r4, r5, pc}

080916de <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80916de:	7900      	ldrb	r0, [r0, #4]
 80916e0:	f7ff bd34 	b.w	809114c <HAL_SPI_Is_Enabled>

080916e4 <_GLOBAL__sub_I_System>:

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80916e4:	2000      	movs	r0, #0
 80916e6:	f7ff bed9 	b.w	809149c <set_system_mode>

080916ea <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80916ea:	b513      	push	{r0, r1, r4, lr}
 80916ec:	ab02      	add	r3, sp, #8
        return write(&b, 1);
 80916ee:	6802      	ldr	r2, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80916f0:	f803 1d01 	strb.w	r1, [r3, #-1]!
        return write(&b, 1);
 80916f4:	68d4      	ldr	r4, [r2, #12]
 80916f6:	4619      	mov	r1, r3
 80916f8:	2201      	movs	r2, #1
 80916fa:	47a0      	blx	r4
}
 80916fc:	b002      	add	sp, #8
 80916fe:	bd10      	pop	{r4, pc}

08091700 <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 8091700:	4770      	bx	lr
	...

08091704 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 8091704:	694a      	ldr	r2, [r1, #20]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 8091706:	4903      	ldr	r1, [pc, #12]	; (8091714 <_ZN9TCPClient8remoteIPEv+0x10>)
 8091708:	6001      	str	r1, [r0, #0]
 809170a:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 809170e:	6042      	str	r2, [r0, #4]
    return d_->remoteIP;
}
 8091710:	4770      	bx	lr
 8091712:	bf00      	nop
 8091714:	0809751c 	.word	0x0809751c

08091718 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 8091718:	4770      	bx	lr

0809171a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 809171a:	2000      	movs	r0, #0
 809171c:	4770      	bx	lr

0809171e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 809171e:	b510      	push	{r4, lr}
 8091720:	4604      	mov	r4, r0
 8091722:	f7ee fcbe 	bl	80800a2 <_ZdlPv>
 8091726:	4620      	mov	r0, r4
 8091728:	bd10      	pop	{r4, pc}

0809172a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 809172a:	f7ee bcba 	b.w	80800a2 <_ZdlPv>
	...

08091730 <_ZN9TCPClient7connectEPKctm>:
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 8091730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8091732:	461d      	mov	r5, r3
    stop();
 8091734:	6803      	ldr	r3, [r0, #0]
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 8091736:	b087      	sub	sp, #28
    stop();
 8091738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 809173a:	4604      	mov	r4, r0
 809173c:	460e      	mov	r6, r1
 809173e:	4617      	mov	r7, r2
    stop();
 8091740:	4798      	blx	r3
      int rv = 0;
      if(Network.ready())
 8091742:	4b11      	ldr	r3, [pc, #68]	; (8091788 <_ZN9TCPClient7connectEPKctm+0x58>)
 8091744:	6818      	ldr	r0, [r3, #0]
 8091746:	6803      	ldr	r3, [r0, #0]
 8091748:	681b      	ldr	r3, [r3, #0]
 809174a:	4798      	blx	r3
 809174c:	b1c8      	cbz	r0, 8091782 <_ZN9TCPClient7connectEPKctm+0x52>
      {
        IPAddress ip_addr;
 809174e:	a802      	add	r0, sp, #8
 8091750:	f000 fd1c 	bl	809218c <_ZN9IPAddressC1Ev>

        if((rv = inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL)) == 0)
 8091754:	4630      	mov	r0, r6
 8091756:	f002 fa58 	bl	8093c0a <strlen>
 809175a:	2300      	movs	r3, #0
 809175c:	9300      	str	r3, [sp, #0]
 809175e:	b281      	uxth	r1, r0
 8091760:	462b      	mov	r3, r5
 8091762:	aa03      	add	r2, sp, #12
 8091764:	4630      	mov	r0, r6
 8091766:	f7ff fe29 	bl	80913bc <inet_gethostbyname>
 809176a:	b950      	cbnz	r0, 8091782 <_ZN9TCPClient7connectEPKctm+0x52>
        {
                return connect(ip_addr, port, nif);
 809176c:	6823      	ldr	r3, [r4, #0]
 809176e:	463a      	mov	r2, r7
 8091770:	6a1e      	ldr	r6, [r3, #32]
 8091772:	4b06      	ldr	r3, [pc, #24]	; (809178c <_ZN9TCPClient7connectEPKctm+0x5c>)
 8091774:	a904      	add	r1, sp, #16
 8091776:	9304      	str	r3, [sp, #16]
 8091778:	9b03      	ldr	r3, [sp, #12]
 809177a:	4620      	mov	r0, r4
 809177c:	9305      	str	r3, [sp, #20]
 809177e:	462b      	mov	r3, r5
 8091780:	47b0      	blx	r6
        }
        else
            DEBUG("unable to get IP for hostname");
      }
      return rv;
}
 8091782:	b007      	add	sp, #28
 8091784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8091786:	bf00      	nop
 8091788:	08097564 	.word	0x08097564
 809178c:	0809751c 	.word	0x0809751c

08091790 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.32>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 8091790:	b510      	push	{r4, lr}
 8091792:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 8091794:	6803      	ldr	r3, [r0, #0]
 8091796:	689b      	ldr	r3, [r3, #8]
 8091798:	4798      	blx	r3
          if (--_M_weak_count == 0)
 809179a:	68a3      	ldr	r3, [r4, #8]
 809179c:	3b01      	subs	r3, #1
 809179e:	60a3      	str	r3, [r4, #8]
 80917a0:	b92b      	cbnz	r3, 80917ae <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.32+0x1e>
            _M_destroy();
 80917a2:	6823      	ldr	r3, [r4, #0]
 80917a4:	4620      	mov	r0, r4
        }
    }
 80917a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80917aa:	68db      	ldr	r3, [r3, #12]
 80917ac:	4718      	bx	r3
 80917ae:	bd10      	pop	{r4, pc}

080917b0 <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 80917b0:	b510      	push	{r4, lr}
 80917b2:	6943      	ldr	r3, [r0, #20]
 80917b4:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80917b6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80917ba:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80917be:	429a      	cmp	r2, r3
 80917c0:	d005      	beq.n	80917ce <_ZN9TCPClient4peekEv+0x1e>
 80917c2:	6962      	ldr	r2, [r4, #20]
 80917c4:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80917c8:	4413      	add	r3, r2
 80917ca:	7918      	ldrb	r0, [r3, #4]
 80917cc:	bd10      	pop	{r4, pc}
 80917ce:	6803      	ldr	r3, [r0, #0]
 80917d0:	691b      	ldr	r3, [r3, #16]
 80917d2:	4798      	blx	r3
 80917d4:	2800      	cmp	r0, #0
 80917d6:	d1f4      	bne.n	80917c2 <_ZN9TCPClient4peekEv+0x12>
 80917d8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80917dc:	bd10      	pop	{r4, pc}

080917de <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80917de:	b510      	push	{r4, lr}
 80917e0:	6943      	ldr	r3, [r0, #20]
 80917e2:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80917e4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80917e8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80917ec:	429a      	cmp	r2, r3
 80917ee:	d008      	beq.n	8091802 <_ZN9TCPClient4readEv+0x24>
 80917f0:	6962      	ldr	r2, [r4, #20]
 80917f2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80917f6:	1c59      	adds	r1, r3, #1
 80917f8:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80917fc:	4413      	add	r3, r2
 80917fe:	7918      	ldrb	r0, [r3, #4]
 8091800:	bd10      	pop	{r4, pc}
 8091802:	6803      	ldr	r3, [r0, #0]
 8091804:	691b      	ldr	r3, [r3, #16]
 8091806:	4798      	blx	r3
 8091808:	2800      	cmp	r0, #0
 809180a:	d1f1      	bne.n	80917f0 <_ZN9TCPClient4readEv+0x12>
 809180c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8091810:	bd10      	pop	{r4, pc}

08091812 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 8091812:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8091814:	6904      	ldr	r4, [r0, #16]
                offset(0),
                total(0) {
        }

        ~Data() {
            if (socket_handle_valid(sock)) {
 8091816:	6820      	ldr	r0, [r4, #0]
 8091818:	f7ff fd88 	bl	809132c <socket_handle_valid>
 809181c:	b110      	cbz	r0, 8091824 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x12>
                socket_close(sock);
 809181e:	6820      	ldr	r0, [r4, #0]
 8091820:	f7ff fdac 	bl	809137c <socket_close>
 8091824:	4620      	mov	r0, r4
 8091826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 809182a:	f7ee bc3a 	b.w	80800a2 <_ZdlPv>

0809182e <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 809182e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8091830:	6943      	ldr	r3, [r0, #20]
 8091832:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 8091834:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8091838:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 809183c:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 809183e:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 8091840:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 8091842:	d106      	bne.n	8091852 <_ZN9TCPClient4readEPhj+0x24>
 8091844:	6803      	ldr	r3, [r0, #0]
 8091846:	691b      	ldr	r3, [r3, #16]
 8091848:	4798      	blx	r3
 809184a:	b910      	cbnz	r0, 8091852 <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 809184c:	f04f 34ff 	mov.w	r4, #4294967295
 8091850:	e014      	b.n	809187c <_ZN9TCPClient4readEPhj+0x4e>
 8091852:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 8091854:	4630      	mov	r0, r6
        return status() ? socket_send(d_->sock, buffer, size) : -1;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 8091856:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 809185a:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 809185e:	4419      	add	r1, r3
        return status() ? socket_send(d_->sock, buffer, size) : -1;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 8091860:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 8091862:	42bc      	cmp	r4, r7
 8091864:	bf28      	it	cs
 8091866:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 8091868:	3104      	adds	r1, #4
 809186a:	4622      	mov	r2, r4
 809186c:	f002 f987 	bl	8093b7e <memcpy>
 8091870:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 8091872:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 8091876:	4423      	add	r3, r4
 8091878:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 809187c:	4620      	mov	r0, r4
 809187e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08091880 <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 8091880:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 8091882:	2300      	movs	r3, #0
 8091884:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 8091888:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 809188a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 809188e:	4770      	bx	lr

08091890 <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 8091890:	b538      	push	{r3, r4, r5, lr}
 8091892:	6942      	ldr	r2, [r0, #20]
 8091894:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 8091896:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 809189a:	b11b      	cbz	r3, 80918a4 <_ZN9TCPClient9availableEv+0x14>
 809189c:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80918a0:	429a      	cmp	r2, r3
 80918a2:	d00b      	beq.n	80918bc <_ZN9TCPClient9availableEv+0x2c>
    }


    static NetworkClass& from(network_interface_t nif) {
        // hard-code for now until multiple-networks are implemented.
        return Network;
 80918a4:	4b18      	ldr	r3, [pc, #96]	; (8091908 <_ZN9TCPClient9availableEv+0x78>)
 80918a6:	6818      	ldr	r0, [r3, #0]
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80918a8:	6803      	ldr	r3, [r0, #0]
 80918aa:	681b      	ldr	r3, [r3, #0]
 80918ac:	4798      	blx	r3
 80918ae:	b318      	cbz	r0, 80918f8 <_ZN9TCPClient9availableEv+0x68>
 80918b0:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80918b2:	6818      	ldr	r0, [r3, #0]
 80918b4:	f7ff fd3a 	bl	809132c <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80918b8:	b918      	cbnz	r0, 80918c2 <_ZN9TCPClient9availableEv+0x32>
 80918ba:	e01d      	b.n	80918f8 <_ZN9TCPClient9availableEv+0x68>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 80918bc:	f7ff ffe0 	bl	8091880 <_ZN9TCPClient12flush_bufferEv>
 80918c0:	e7f0      	b.n	80918a4 <_ZN9TCPClient9availableEv+0x14>
 80918c2:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 80918c4:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80918c8:	297f      	cmp	r1, #127	; 0x7f
 80918ca:	d815      	bhi.n	80918f8 <_ZN9TCPClient9availableEv+0x68>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80918cc:	1d05      	adds	r5, r0, #4
 80918ce:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80918d2:	2300      	movs	r3, #0
 80918d4:	4429      	add	r1, r5
 80918d6:	6800      	ldr	r0, [r0, #0]
 80918d8:	f7ff fd40 	bl	809135c <socket_receive>
            if (ret > 0)
 80918dc:	2800      	cmp	r0, #0
 80918de:	dd0b      	ble.n	80918f8 <_ZN9TCPClient9availableEv+0x68>
 80918e0:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 80918e2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80918e6:	b90a      	cbnz	r2, 80918ec <_ZN9TCPClient9availableEv+0x5c>
 80918e8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80918ec:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 80918ee:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80918f2:	4418      	add	r0, r3
 80918f4:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 80918f8:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 80918fa:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80918fe:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 8091902:	1a18      	subs	r0, r3, r0
}
 8091904:	bd38      	pop	{r3, r4, r5, pc}
 8091906:	bf00      	nop
 8091908:	08097564 	.word	0x08097564

0809190c <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 809190c:	b538      	push	{r3, r4, r5, lr}
  DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 809190e:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 8091910:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 8091912:	6818      	ldr	r0, [r3, #0]
 8091914:	f7ff fd0a 	bl	809132c <socket_handle_valid>

void TCPClient::stop()
{
  DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 8091918:	b118      	cbz	r0, 8091922 <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 809191a:	6963      	ldr	r3, [r4, #20]
 809191c:	6818      	ldr	r0, [r3, #0]
 809191e:	f7ff fd2d 	bl	809137c <socket_close>
 8091922:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 8091924:	f7ff fd32 	bl	809138c <socket_handle_invalid>
 8091928:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 809192a:	6963      	ldr	r3, [r4, #20]
 809192c:	2200      	movs	r2, #0
 809192e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  d_->remoteIP.clear();
  flush_buffer();
 8091932:	4620      	mov	r0, r4
}
 8091934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 8091938:	f7ff bfa2 	b.w	8091880 <_ZN9TCPClient12flush_bufferEv>

0809193c <_ZN9TCPClientC1Em>:

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 809193c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 809193e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8091942:	6083      	str	r3, [r0, #8]
        d_(std::make_shared<Data>(sock))
 8091944:	4b17      	ldr	r3, [pc, #92]	; (80919a4 <_ZN9TCPClientC1Em+0x68>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8091946:	2600      	movs	r6, #0
 8091948:	6046      	str	r6, [r0, #4]
 809194a:	6003      	str	r3, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 809194c:	6146      	str	r6, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 809194e:	6186      	str	r6, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 8091950:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8091952:	2090      	movs	r0, #144	; 0x90
 8091954:	460f      	mov	r7, r1
 8091956:	f7ee fba0 	bl	808009a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 809195a:	4605      	mov	r5, r0
 809195c:	b138      	cbz	r0, 809196e <_ZN9TCPClientC1Em+0x32>
        IPAddress remoteIP;

        explicit Data(sock_handle_t sock) :
                sock(sock),
                offset(0),
                total(0) {
 809195e:	6007      	str	r7, [r0, #0]
 8091960:	f8a0 6084 	strh.w	r6, [r0, #132]	; 0x84
 8091964:	f8a0 6086 	strh.w	r6, [r0, #134]	; 0x86
 8091968:	3088      	adds	r0, #136	; 0x88
 809196a:	f000 fc0f 	bl	809218c <_ZN9IPAddressC1Ev>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 809196e:	2014      	movs	r0, #20
 8091970:	f7ee fb93 	bl	808009a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8091974:	4603      	mov	r3, r0
 8091976:	b128      	cbz	r0, 8091984 <_ZN9TCPClientC1Em+0x48>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 8091978:	2201      	movs	r2, #1
 809197a:	6042      	str	r2, [r0, #4]
 809197c:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 809197e:	4a0a      	ldr	r2, [pc, #40]	; (80919a8 <_ZN9TCPClientC1Em+0x6c>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 8091980:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 8091982:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 8091984:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 8091986:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 8091988:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 809198a:	b128      	cbz	r0, 8091998 <_ZN9TCPClientC1Em+0x5c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 809198c:	6843      	ldr	r3, [r0, #4]
 809198e:	3b01      	subs	r3, #1
 8091990:	6043      	str	r3, [r0, #4]
 8091992:	b90b      	cbnz	r3, 8091998 <_ZN9TCPClientC1Em+0x5c>
 8091994:	f7ff fefc 	bl	8091790 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.32>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 8091998:	4620      	mov	r0, r4
 809199a:	f7ff ff71 	bl	8091880 <_ZN9TCPClient12flush_bufferEv>
}
 809199e:	4620      	mov	r0, r4
 80919a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80919a2:	bf00      	nop
 80919a4:	080973d0 	.word	0x080973d0
 80919a8:	080973b4 	.word	0x080973b4

080919ac <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80919ac:	b510      	push	{r4, lr}
 80919ae:	4604      	mov	r4, r0
 80919b0:	f7ff fcec 	bl	809138c <socket_handle_invalid>
 80919b4:	4601      	mov	r1, r0
 80919b6:	4620      	mov	r0, r4
 80919b8:	f7ff ffc0 	bl	809193c <_ZN9TCPClientC1Em>
{
}
 80919bc:	4620      	mov	r0, r4
 80919be:	bd10      	pop	{r4, pc}

080919c0 <_ZN9TCPClient7connectE9IPAddresstm>:
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80919c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80919c4:	4698      	mov	r8, r3
    stop();
 80919c6:	6803      	ldr	r3, [r0, #0]
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80919c8:	b086      	sub	sp, #24
    stop();
 80919ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80919cc:	4604      	mov	r4, r0
 80919ce:	460d      	mov	r5, r1
 80919d0:	4616      	mov	r6, r2
    stop();
 80919d2:	4798      	blx	r3
 80919d4:	4b25      	ldr	r3, [pc, #148]	; (8091a6c <_ZN9TCPClient7connectE9IPAddresstm+0xac>)
 80919d6:	6818      	ldr	r0, [r3, #0]
        int connected = 0;
        if(Network.from(nif).ready())
 80919d8:	6803      	ldr	r3, [r0, #0]
 80919da:	681b      	ldr	r3, [r3, #0]
 80919dc:	4798      	blx	r3
 80919de:	2800      	cmp	r0, #0
 80919e0:	d040      	beq.n	8091a64 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80919e2:	4633      	mov	r3, r6
 80919e4:	f8cd 8000 	str.w	r8, [sp]
 80919e8:	2206      	movs	r2, #6
 80919ea:	2101      	movs	r1, #1
 80919ec:	2002      	movs	r0, #2
 80919ee:	6967      	ldr	r7, [r4, #20]
 80919f0:	f7ff fca4 	bl	809133c <socket_create>
 80919f4:	6038      	str	r0, [r7, #0]
          DEBUG("socket=%d",d_->sock);

          if (socket_handle_valid(d_->sock))
 80919f6:	6963      	ldr	r3, [r4, #20]
 80919f8:	6818      	ldr	r0, [r3, #0]
 80919fa:	f7ff fc97 	bl	809132c <socket_handle_valid>
 80919fe:	b388      	cbz	r0, 8091a64 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
          {
            flush_buffer();
 8091a00:	4620      	mov	r0, r4
 8091a02:	f7ff ff3d 	bl	8091880 <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 8091a06:	2302      	movs	r3, #2
 8091a08:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 8091a0c:	0a33      	lsrs	r3, r6, #8
 8091a0e:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 8091a12:	79eb      	ldrb	r3, [r5, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 8091a14:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 8091a18:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 8091a1c:	79ab      	ldrb	r3, [r5, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 8091a1e:	f88d 600b 	strb.w	r6, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 8091a22:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 8091a26:	796b      	ldrb	r3, [r5, #5]
 8091a28:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 8091a2c:	792b      	ldrb	r3, [r5, #4]
 8091a2e:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 8091a32:	f7ff fcbb 	bl	80913ac <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 8091a36:	6963      	ldr	r3, [r4, #20]
 8091a38:	2210      	movs	r2, #16
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 8091a3a:	4607      	mov	r7, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 8091a3c:	a902      	add	r1, sp, #8
 8091a3e:	6818      	ldr	r0, [r3, #0]
 8091a40:	f7ff fc84 	bl	809134c <socket_connect>
 8091a44:	4606      	mov	r6, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 8091a46:	4638      	mov	r0, r7
 8091a48:	f7ff fcb0 	bl	80913ac <HAL_NET_SetNetWatchDog>
 8091a4c:	6963      	ldr	r3, [r4, #20]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 8091a4e:	686a      	ldr	r2, [r5, #4]
 8091a50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            d_->remoteIP = ip;
            if(!connected)
 8091a54:	b12e      	cbz	r6, 8091a62 <_ZN9TCPClient7connectE9IPAddresstm+0xa2>
            {
                stop();
 8091a56:	6823      	ldr	r3, [r4, #0]
 8091a58:	4620      	mov	r0, r4
 8091a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8091a5c:	4798      	blx	r3
 8091a5e:	2000      	movs	r0, #0
 8091a60:	e000      	b.n	8091a64 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 8091a62:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 8091a64:	b006      	add	sp, #24
 8091a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8091a6a:	bf00      	nop
 8091a6c:	08097564 	.word	0x08097564

08091a70 <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 8091a70:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 8091a72:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 8091a74:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 8091a76:	6818      	ldr	r0, [r3, #0]
 8091a78:	f7ff fc58 	bl	809132c <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 8091a7c:	b908      	cbnz	r0, 8091a82 <_ZN9TCPClient6statusEv+0x12>
 8091a7e:	2000      	movs	r0, #0
 8091a80:	bd10      	pop	{r4, pc}
 8091a82:	4b07      	ldr	r3, [pc, #28]	; (8091aa0 <_ZN9TCPClient6statusEv+0x30>)
 8091a84:	6818      	ldr	r0, [r3, #0]
 8091a86:	6803      	ldr	r3, [r0, #0]
 8091a88:	681b      	ldr	r3, [r3, #0]
 8091a8a:	4798      	blx	r3
 8091a8c:	2800      	cmp	r0, #0
 8091a8e:	d0f6      	beq.n	8091a7e <_ZN9TCPClient6statusEv+0xe>
 8091a90:	6963      	ldr	r3, [r4, #20]
 8091a92:	6818      	ldr	r0, [r3, #0]
 8091a94:	f7ff fc42 	bl	809131c <socket_active_status>
 8091a98:	fab0 f080 	clz	r0, r0
 8091a9c:	0940      	lsrs	r0, r0, #5
}
 8091a9e:	bd10      	pop	{r4, pc}
 8091aa0:	08097564 	.word	0x08097564

08091aa4 <_ZN9TCPClient5writeEPKhj>:
{
        return write(&b, 1);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 8091aa4:	b570      	push	{r4, r5, r6, lr}
 8091aa6:	4606      	mov	r6, r0
 8091aa8:	460c      	mov	r4, r1
 8091aaa:	4615      	mov	r5, r2
        return status() ? socket_send(d_->sock, buffer, size) : -1;
 8091aac:	f7ff ffe0 	bl	8091a70 <_ZN9TCPClient6statusEv>
 8091ab0:	b138      	cbz	r0, 8091ac2 <_ZN9TCPClient5writeEPKhj+0x1e>
 8091ab2:	6973      	ldr	r3, [r6, #20]
 8091ab4:	462a      	mov	r2, r5
 8091ab6:	4621      	mov	r1, r4
}
 8091ab8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return write(&b, 1);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
        return status() ? socket_send(d_->sock, buffer, size) : -1;
 8091abc:	6818      	ldr	r0, [r3, #0]
 8091abe:	f7ff bc55 	b.w	809136c <socket_send>
}
 8091ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8091ac6:	bd70      	pop	{r4, r5, r6, pc}

08091ac8 <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 8091ac8:	b538      	push	{r3, r4, r5, lr}
 8091aca:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 8091acc:	f7ff ffd0 	bl	8091a70 <_ZN9TCPClient6statusEv>
 8091ad0:	bb00      	cbnz	r0, 8091b14 <_ZN9TCPClient9connectedEv+0x4c>
 8091ad2:	6963      	ldr	r3, [r4, #20]
 8091ad4:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 8091ad8:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 8091adc:	4291      	cmp	r1, r2
 8091ade:	d119      	bne.n	8091b14 <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 8091ae0:	6818      	ldr	r0, [r3, #0]
 8091ae2:	f7ff fc23 	bl	809132c <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 8091ae6:	b128      	cbz	r0, 8091af4 <_ZN9TCPClient9connectedEv+0x2c>
 8091ae8:	6963      	ldr	r3, [r4, #20]
 8091aea:	6818      	ldr	r0, [r3, #0]
 8091aec:	f7ff fc16 	bl	809131c <socket_active_status>
 8091af0:	2801      	cmp	r0, #1
 8091af2:	d001      	beq.n	8091af8 <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 8091af4:	2500      	movs	r5, #0
 8091af6:	e00e      	b.n	8091b16 <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 8091af8:	6823      	ldr	r3, [r4, #0]
 8091afa:	4620      	mov	r0, r4
 8091afc:	691b      	ldr	r3, [r3, #16]
 8091afe:	4798      	blx	r3
 8091b00:	2800      	cmp	r0, #0
 8091b02:	bf14      	ite	ne
 8091b04:	2501      	movne	r5, #1
 8091b06:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 8091b08:	d105      	bne.n	8091b16 <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("caling Stop No more Data and in CLOSE_WAIT");
          stop();       // Close our side
 8091b0a:	6823      	ldr	r3, [r4, #0]
 8091b0c:	4620      	mov	r0, r4
 8091b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8091b10:	4798      	blx	r3
 8091b12:	e000      	b.n	8091b16 <_ZN9TCPClient9connectedEv+0x4e>
 8091b14:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 8091b16:	4628      	mov	r0, r5
 8091b18:	bd38      	pop	{r3, r4, r5, pc}

08091b1a <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 8091b1a:	b508      	push	{r3, lr}
   return (status()!=0);
 8091b1c:	f7ff ffa8 	bl	8091a70 <_ZN9TCPClient6statusEv>
}
 8091b20:	3000      	adds	r0, #0
 8091b22:	bf18      	it	ne
 8091b24:	2001      	movne	r0, #1
 8091b26:	bd08      	pop	{r3, pc}

08091b28 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8091b28:	b510      	push	{r4, lr}
 8091b2a:	4604      	mov	r4, r0
{
	free(buffer);
 8091b2c:	6800      	ldr	r0, [r0, #0]
 8091b2e:	f7ff fd05 	bl	809153c <free>
}
 8091b32:	4620      	mov	r0, r4
 8091b34:	bd10      	pop	{r4, pc}

08091b36 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8091b36:	b510      	push	{r4, lr}
 8091b38:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8091b3a:	6800      	ldr	r0, [r0, #0]
 8091b3c:	b108      	cbz	r0, 8091b42 <_ZN6String10invalidateEv+0xc>
 8091b3e:	f7ff fcfd 	bl	809153c <free>
	buffer = NULL;
 8091b42:	2300      	movs	r3, #0
 8091b44:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 8091b46:	60a3      	str	r3, [r4, #8]
 8091b48:	6063      	str	r3, [r4, #4]
 8091b4a:	bd10      	pop	{r4, pc}

08091b4c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8091b4c:	b538      	push	{r3, r4, r5, lr}
 8091b4e:	4604      	mov	r4, r0
 8091b50:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8091b52:	6800      	ldr	r0, [r0, #0]
 8091b54:	3101      	adds	r1, #1
 8091b56:	f7ff fcf9 	bl	809154c <realloc>
	if (newbuffer) {
 8091b5a:	b110      	cbz	r0, 8091b62 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8091b5c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 8091b60:	2001      	movs	r0, #1
	}
	return 0;
}
 8091b62:	bd38      	pop	{r3, r4, r5, pc}

08091b64 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8091b64:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8091b66:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8091b68:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8091b6a:	b113      	cbz	r3, 8091b72 <_ZN6String7reserveEj+0xe>
 8091b6c:	6843      	ldr	r3, [r0, #4]
 8091b6e:	428b      	cmp	r3, r1
 8091b70:	d207      	bcs.n	8091b82 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 8091b72:	4620      	mov	r0, r4
 8091b74:	f7ff ffea 	bl	8091b4c <_ZN6String12changeBufferEj>
 8091b78:	b120      	cbz	r0, 8091b84 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 8091b7a:	68a3      	ldr	r3, [r4, #8]
 8091b7c:	b90b      	cbnz	r3, 8091b82 <_ZN6String7reserveEj+0x1e>
 8091b7e:	6822      	ldr	r2, [r4, #0]
 8091b80:	7013      	strb	r3, [r2, #0]
 8091b82:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 8091b84:	bd10      	pop	{r4, pc}

08091b86 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8091b86:	b570      	push	{r4, r5, r6, lr}
 8091b88:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8091b8a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8091b8c:	4604      	mov	r4, r0
 8091b8e:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8091b90:	f7ff ffe8 	bl	8091b64 <_ZN6String7reserveEj>
 8091b94:	b918      	cbnz	r0, 8091b9e <_ZN6String4copyEPKcj+0x18>
		invalidate();
 8091b96:	4620      	mov	r0, r4
 8091b98:	f7ff ffcd 	bl	8091b36 <_ZN6String10invalidateEv>
		return *this;
 8091b9c:	e009      	b.n	8091bb2 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 8091b9e:	462a      	mov	r2, r5
 8091ba0:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 8091ba2:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8091ba4:	6820      	ldr	r0, [r4, #0]
 8091ba6:	f001 ffea 	bl	8093b7e <memcpy>
	buffer[len] = 0;
 8091baa:	6822      	ldr	r2, [r4, #0]
 8091bac:	68a3      	ldr	r3, [r4, #8]
 8091bae:	2100      	movs	r1, #0
 8091bb0:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 8091bb2:	4620      	mov	r0, r4
 8091bb4:	bd70      	pop	{r4, r5, r6, pc}

08091bb6 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8091bb6:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8091bb8:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8091bba:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8091bbc:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8091bbe:	6043      	str	r3, [r0, #4]
	len = 0;
 8091bc0:	6083      	str	r3, [r0, #8]
	flags = 0;
 8091bc2:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 8091bc4:	460d      	mov	r5, r1
 8091bc6:	b139      	cbz	r1, 8091bd8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 8091bc8:	4608      	mov	r0, r1
 8091bca:	f002 f81e 	bl	8093c0a <strlen>
 8091bce:	4629      	mov	r1, r5
 8091bd0:	4602      	mov	r2, r0
 8091bd2:	4620      	mov	r0, r4
 8091bd4:	f7ff ffd7 	bl	8091b86 <_ZN6String4copyEPKcj>
}
 8091bd8:	4620      	mov	r0, r4
 8091bda:	bd38      	pop	{r3, r4, r5, pc}

08091bdc <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8091bdc:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 8091bde:	b510      	push	{r4, lr}
 8091be0:	460b      	mov	r3, r1
 8091be2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8091be4:	d007      	beq.n	8091bf6 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8091be6:	6809      	ldr	r1, [r1, #0]
 8091be8:	b119      	cbz	r1, 8091bf2 <_ZN6StringaSERKS_+0x16>
 8091bea:	689a      	ldr	r2, [r3, #8]
 8091bec:	f7ff ffcb 	bl	8091b86 <_ZN6String4copyEPKcj>
 8091bf0:	e001      	b.n	8091bf6 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 8091bf2:	f7ff ffa0 	bl	8091b36 <_ZN6String10invalidateEv>

	return *this;
}
 8091bf6:	4620      	mov	r0, r4
 8091bf8:	bd10      	pop	{r4, pc}

08091bfa <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 8091bfa:	b538      	push	{r3, r4, r5, lr}
 8091bfc:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 8091bfe:	460c      	mov	r4, r1
 8091c00:	b141      	cbz	r1, 8091c14 <_ZN6StringaSEPKc+0x1a>
 8091c02:	4608      	mov	r0, r1
 8091c04:	f002 f801 	bl	8093c0a <strlen>
 8091c08:	4621      	mov	r1, r4
 8091c0a:	4602      	mov	r2, r0
 8091c0c:	4628      	mov	r0, r5
 8091c0e:	f7ff ffba 	bl	8091b86 <_ZN6String4copyEPKcj>
 8091c12:	e001      	b.n	8091c18 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 8091c14:	f7ff ff8f 	bl	8091b36 <_ZN6String10invalidateEv>

	return *this;
}
 8091c18:	4628      	mov	r0, r5
 8091c1a:	bd38      	pop	{r3, r4, r5, pc}

08091c1c <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8091c1c:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8091c1e:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8091c20:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8091c22:	b912      	cbnz	r2, 8091c2a <_ZNK6String6equalsEPKc+0xe>
 8091c24:	b919      	cbnz	r1, 8091c2e <_ZNK6String6equalsEPKc+0x12>
 8091c26:	2001      	movs	r0, #1
 8091c28:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 8091c2a:	b911      	cbnz	r1, 8091c32 <_ZNK6String6equalsEPKc+0x16>
 8091c2c:	6803      	ldr	r3, [r0, #0]
 8091c2e:	7818      	ldrb	r0, [r3, #0]
 8091c30:	e002      	b.n	8091c38 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 8091c32:	6800      	ldr	r0, [r0, #0]
 8091c34:	f001 ffdf 	bl	8093bf6 <strcmp>
 8091c38:	fab0 f080 	clz	r0, r0
 8091c3c:	0940      	lsrs	r0, r0, #5
}
 8091c3e:	bd08      	pop	{r3, pc}

08091c40 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8091c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8091c42:	4606      	mov	r6, r0
 8091c44:	460d      	mov	r5, r1
 8091c46:	188f      	adds	r7, r1, r2
  size_t n = 0;
 8091c48:	2400      	movs	r4, #0
  while (size--) {
 8091c4a:	42bd      	cmp	r5, r7
 8091c4c:	d00c      	beq.n	8091c68 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8091c4e:	6833      	ldr	r3, [r6, #0]
 8091c50:	f815 1b01 	ldrb.w	r1, [r5], #1
 8091c54:	689b      	ldr	r3, [r3, #8]
 8091c56:	4630      	mov	r0, r6
 8091c58:	4798      	blx	r3
     if (chunk>=0)
 8091c5a:	2800      	cmp	r0, #0
 8091c5c:	db01      	blt.n	8091c62 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8091c5e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 8091c60:	e7f3      	b.n	8091c4a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8091c62:	2c00      	cmp	r4, #0
 8091c64:	bf08      	it	eq
 8091c66:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 8091c68:	4620      	mov	r0, r4
 8091c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08091c6c <_ZN5Print5printEPKc>:
 8091c6c:	b508      	push	{r3, lr}
 8091c6e:	f7ef fd93 	bl	8081798 <_ZN5Print5writeEPKc>
 8091c72:	bd08      	pop	{r3, pc}

08091c74 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8091c74:	6803      	ldr	r3, [r0, #0]
 8091c76:	689b      	ldr	r3, [r3, #8]
 8091c78:	4718      	bx	r3

08091c7a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8091c7a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8091c7c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8091c7e:	4605      	mov	r5, r0
  size_t n = print('\r');
 8091c80:	f7ff fff8 	bl	8091c74 <_ZN5Print5printEc>
  n += print('\n');
 8091c84:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 8091c86:	4604      	mov	r4, r0
  n += print('\n');
 8091c88:	4628      	mov	r0, r5
 8091c8a:	f7ff fff3 	bl	8091c74 <_ZN5Print5printEc>
  return n;
}
 8091c8e:	4420      	add	r0, r4
 8091c90:	bd38      	pop	{r3, r4, r5, pc}

08091c92 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8091c92:	b538      	push	{r3, r4, r5, lr}
 8091c94:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8091c96:	f7ef fd7f 	bl	8081798 <_ZN5Print5writeEPKc>
 8091c9a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 8091c9c:	4628      	mov	r0, r5
 8091c9e:	f7ff ffec 	bl	8091c7a <_ZN5Print7printlnEv>
  return n;
}
 8091ca2:	4420      	add	r0, r4
 8091ca4:	bd38      	pop	{r3, r4, r5, pc}

08091ca6 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8091ca6:	2a01      	cmp	r2, #1
 8091ca8:	bf98      	it	ls
 8091caa:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8091cac:	b530      	push	{r4, r5, lr}
 8091cae:	460b      	mov	r3, r1
 8091cb0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8091cb2:	2100      	movs	r1, #0
 8091cb4:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8091cb8:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 8091cbc:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 8091cc0:	fb05 3312 	mls	r3, r5, r2, r3
 8091cc4:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8091cc6:	2b09      	cmp	r3, #9
 8091cc8:	bf94      	ite	ls
 8091cca:	3330      	addls	r3, #48	; 0x30
 8091ccc:	3337      	addhi	r3, #55	; 0x37
 8091cce:	b2db      	uxtb	r3, r3
 8091cd0:	4621      	mov	r1, r4
 8091cd2:	f804 3901 	strb.w	r3, [r4], #-1
 8091cd6:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 8091cd8:	2d00      	cmp	r5, #0
 8091cda:	d1ef      	bne.n	8091cbc <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 8091cdc:	f7ef fd5c 	bl	8081798 <_ZN5Print5writeEPKc>
}
 8091ce0:	b00b      	add	sp, #44	; 0x2c
 8091ce2:	bd30      	pop	{r4, r5, pc}

08091ce4 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 8091ce4:	b410      	push	{r4}
  if (base == 0) return write(n);
 8091ce6:	b922      	cbnz	r2, 8091cf2 <_ZN5Print5printEmi+0xe>
 8091ce8:	6803      	ldr	r3, [r0, #0]
 8091cea:	b2c9      	uxtb	r1, r1
 8091cec:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 8091cee:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 8091cf0:	4718      	bx	r3
  else return printNumber(n, base);
 8091cf2:	b2d2      	uxtb	r2, r2
}
 8091cf4:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8091cf6:	f7ff bfd6 	b.w	8091ca6 <_ZN5Print11printNumberEmh>

08091cfa <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 8091cfa:	f7ff bff3 	b.w	8091ce4 <_ZN5Print5printEmi>

08091cfe <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
 8091cfe:	b538      	push	{r3, r4, r5, lr}
 8091d00:	4605      	mov	r5, r0
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 8091d02:	f7ff ffef 	bl	8091ce4 <_ZN5Print5printEmi>
 8091d06:	4604      	mov	r4, r0
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
 8091d08:	4628      	mov	r0, r5
 8091d0a:	f7ff ffb6 	bl	8091c7a <_ZN5Print7printlnEv>
  return n;
}
 8091d0e:	4420      	add	r0, r4
 8091d10:	bd38      	pop	{r3, r4, r5, pc}

08091d12 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 8091d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8091d16:	4607      	mov	r7, r0
 8091d18:	460e      	mov	r6, r1
  if (base == 0) {
 8091d1a:	4615      	mov	r5, r2
 8091d1c:	b92a      	cbnz	r2, 8091d2a <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 8091d1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 8091d22:	6803      	ldr	r3, [r0, #0]
 8091d24:	b2c9      	uxtb	r1, r1
 8091d26:	689b      	ldr	r3, [r3, #8]
 8091d28:	4718      	bx	r3
  } else if (base == 10) {
 8091d2a:	2a0a      	cmp	r2, #10
 8091d2c:	d102      	bne.n	8091d34 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 8091d2e:	2900      	cmp	r1, #0
 8091d30:	da01      	bge.n	8091d36 <_ZN5Print5printEli+0x24>
 8091d32:	e004      	b.n	8091d3e <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 8091d34:	b2d2      	uxtb	r2, r2
  }
}
 8091d36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 8091d3a:	f7ff bfb4 	b.w	8091ca6 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 8091d3e:	212d      	movs	r1, #45	; 0x2d
 8091d40:	f7ff ff98 	bl	8091c74 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 8091d44:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 8091d46:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 8091d48:	4271      	negs	r1, r6
 8091d4a:	4638      	mov	r0, r7
 8091d4c:	f7ff ffab 	bl	8091ca6 <_ZN5Print11printNumberEmh>
 8091d50:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 8091d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08091d56 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 8091d56:	b538      	push	{r3, r4, r5, lr}
 8091d58:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 8091d5a:	f7ff ffda 	bl	8091d12 <_ZN5Print5printEli>
 8091d5e:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 8091d60:	4628      	mov	r0, r5
 8091d62:	f7ff ff8a 	bl	8091c7a <_ZN5Print7printlnEv>
  return n;
}
 8091d66:	4420      	add	r0, r4
 8091d68:	bd38      	pop	{r3, r4, r5, pc}
	...

08091d6c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 8091d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 8091d70:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 8091d72:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 8091d74:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 8091d76:	4617      	mov	r7, r2
 8091d78:	461e      	mov	r6, r3
 8091d7a:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 8091d7e:	f001 fa3d 	bl	80931fc <__aeabi_dcmpun>
 8091d82:	b108      	cbz	r0, 8091d88 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8091d84:	4947      	ldr	r1, [pc, #284]	; (8091ea4 <_ZN5Print10printFloatEdh+0x138>)
 8091d86:	e012      	b.n	8091dae <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 8091d88:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8091d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8091d90:	4b45      	ldr	r3, [pc, #276]	; (8091ea8 <_ZN5Print10printFloatEdh+0x13c>)
 8091d92:	4638      	mov	r0, r7
 8091d94:	4621      	mov	r1, r4
 8091d96:	f001 fa31 	bl	80931fc <__aeabi_dcmpun>
 8091d9a:	b968      	cbnz	r0, 8091db8 <_ZN5Print10printFloatEdh+0x4c>
 8091d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8091da0:	4b41      	ldr	r3, [pc, #260]	; (8091ea8 <_ZN5Print10printFloatEdh+0x13c>)
 8091da2:	4638      	mov	r0, r7
 8091da4:	4621      	mov	r1, r4
 8091da6:	f001 fa0b 	bl	80931c0 <__aeabi_dcmple>
 8091daa:	b928      	cbnz	r0, 8091db8 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8091dac:	493f      	ldr	r1, [pc, #252]	; (8091eac <_ZN5Print10printFloatEdh+0x140>)
 8091dae:	4640      	mov	r0, r8
 8091db0:	f7ef fcf2 	bl	8081798 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 8091db4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 8091db8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8091dbc:	4b3c      	ldr	r3, [pc, #240]	; (8091eb0 <_ZN5Print10printFloatEdh+0x144>)
 8091dbe:	4638      	mov	r0, r7
 8091dc0:	4631      	mov	r1, r6
 8091dc2:	f001 fa11 	bl	80931e8 <__aeabi_dcmpgt>
 8091dc6:	b108      	cbz	r0, 8091dcc <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8091dc8:	493a      	ldr	r1, [pc, #232]	; (8091eb4 <_ZN5Print10printFloatEdh+0x148>)
 8091dca:	e7f0      	b.n	8091dae <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 8091dcc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8091dd0:	4b39      	ldr	r3, [pc, #228]	; (8091eb8 <_ZN5Print10printFloatEdh+0x14c>)
 8091dd2:	4638      	mov	r0, r7
 8091dd4:	4631      	mov	r1, r6
 8091dd6:	f001 f9e9 	bl	80931ac <__aeabi_dcmplt>
 8091dda:	2800      	cmp	r0, #0
 8091ddc:	d1f4      	bne.n	8091dc8 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 8091dde:	2200      	movs	r2, #0
 8091de0:	2300      	movs	r3, #0
 8091de2:	4638      	mov	r0, r7
 8091de4:	4631      	mov	r1, r6
 8091de6:	f001 f9e1 	bl	80931ac <__aeabi_dcmplt>
 8091dea:	b138      	cbz	r0, 8091dfc <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 8091dec:	212d      	movs	r1, #45	; 0x2d
 8091dee:	4640      	mov	r0, r8
 8091df0:	f7ff ff40 	bl	8091c74 <_ZN5Print5printEc>
     number = -number;
 8091df4:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 8091df8:	4604      	mov	r4, r0
 8091dfa:	e000      	b.n	8091dfe <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 8091dfc:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 8091dfe:	492f      	ldr	r1, [pc, #188]	; (8091ebc <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 8091e00:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 8091e04:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 8091e06:	fa5f f389 	uxtb.w	r3, r9
 8091e0a:	429d      	cmp	r5, r3
 8091e0c:	d906      	bls.n	8091e1c <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 8091e0e:	2200      	movs	r2, #0
 8091e10:	4b2b      	ldr	r3, [pc, #172]	; (8091ec0 <_ZN5Print10printFloatEdh+0x154>)
 8091e12:	f001 f883 	bl	8092f1c <__aeabi_ddiv>
 8091e16:	f109 0901 	add.w	r9, r9, #1
 8091e1a:	e7f4      	b.n	8091e06 <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 8091e1c:	463a      	mov	r2, r7
 8091e1e:	4633      	mov	r3, r6
 8091e20:	f000 fda0 	bl	8092964 <__adddf3>
 8091e24:	460f      	mov	r7, r1
 8091e26:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 8091e28:	f001 fa26 	bl	8093278 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8091e2c:	220a      	movs	r2, #10
 8091e2e:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 8091e30:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8091e32:	4640      	mov	r0, r8
 8091e34:	f7ff ff37 	bl	8091ca6 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 8091e38:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 8091e3a:	b37d      	cbz	r5, 8091e9c <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 8091e3c:	4648      	mov	r0, r9
 8091e3e:	f000 fecd 	bl	8092bdc <__aeabi_ui2d>
 8091e42:	4602      	mov	r2, r0
 8091e44:	460b      	mov	r3, r1
 8091e46:	4630      	mov	r0, r6
 8091e48:	4639      	mov	r1, r7
 8091e4a:	f000 fd89 	bl	8092960 <__aeabi_dsub>
 8091e4e:	4606      	mov	r6, r0
 8091e50:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8091e52:	4640      	mov	r0, r8
 8091e54:	491b      	ldr	r1, [pc, #108]	; (8091ec4 <_ZN5Print10printFloatEdh+0x158>)
 8091e56:	f7ef fc9f 	bl	8081798 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 8091e5a:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 8091e5c:	4b18      	ldr	r3, [pc, #96]	; (8091ec0 <_ZN5Print10printFloatEdh+0x154>)
 8091e5e:	2200      	movs	r2, #0
 8091e60:	4630      	mov	r0, r6
 8091e62:	4639      	mov	r1, r7
 8091e64:	f000 ff30 	bl	8092cc8 <__aeabi_dmul>
 8091e68:	460f      	mov	r7, r1
 8091e6a:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 8091e6c:	f001 f9dc 	bl	8093228 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 8091e70:	220a      	movs	r2, #10
 8091e72:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 8091e74:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 8091e76:	4640      	mov	r0, r8
 8091e78:	f7ff ff4b 	bl	8091d12 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 8091e7c:	4404      	add	r4, r0
    remainder -= toPrint;
 8091e7e:	4648      	mov	r0, r9
 8091e80:	f000 febc 	bl	8092bfc <__aeabi_i2d>
 8091e84:	4602      	mov	r2, r0
 8091e86:	460b      	mov	r3, r1
 8091e88:	4630      	mov	r0, r6
 8091e8a:	4639      	mov	r1, r7
 8091e8c:	f000 fd68 	bl	8092960 <__aeabi_dsub>
 8091e90:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 8091e92:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 8091e96:	4606      	mov	r6, r0
 8091e98:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 8091e9a:	d1df      	bne.n	8091e5c <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 8091e9c:	4620      	mov	r0, r4
 8091e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8091ea2:	bf00      	nop
 8091ea4:	0809740c 	.word	0x0809740c
 8091ea8:	7fefffff 	.word	0x7fefffff
 8091eac:	08097414 	.word	0x08097414
 8091eb0:	41efffff 	.word	0x41efffff
 8091eb4:	08097410 	.word	0x08097410
 8091eb8:	c1efffff 	.word	0xc1efffff
 8091ebc:	3fe00000 	.word	0x3fe00000
 8091ec0:	40240000 	.word	0x40240000
 8091ec4:	08094a7a 	.word	0x08094a7a

08091ec8 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 8091ec8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 8091eca:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 8091ece:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 8091ed0:	9100      	str	r1, [sp, #0]
 8091ed2:	f7ff ff4b 	bl	8091d6c <_ZN5Print10printFloatEdh>
 8091ed6:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 8091ed8:	4628      	mov	r0, r5
 8091eda:	f7ff fece 	bl	8091c7a <_ZN5Print7printlnEv>
  return n;
}
 8091ede:	4420      	add	r0, r4
 8091ee0:	b003      	add	sp, #12
 8091ee2:	bd30      	pop	{r4, r5, pc}

08091ee4 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 8091ee4:	b40c      	push	{r2, r3}
 8091ee6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8091eea:	b087      	sub	sp, #28
 8091eec:	af00      	add	r7, sp, #0
 8091eee:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8091ef2:	f854 9b04 	ldr.w	r9, [r4], #4
 8091ef6:	4605      	mov	r5, r0
 8091ef8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 8091efa:	4623      	mov	r3, r4
 8091efc:	464a      	mov	r2, r9
 8091efe:	2114      	movs	r1, #20
 8091f00:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 8091f02:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 8091f04:	f7ff fb3a 	bl	809157c <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 8091f08:	2813      	cmp	r0, #19
 8091f0a:	d805      	bhi.n	8091f18 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8091f0c:	1d39      	adds	r1, r7, #4
 8091f0e:	4628      	mov	r0, r5
 8091f10:	f7ef fc42 	bl	8081798 <_ZN5Print5writeEPKc>
 8091f14:	4604      	mov	r4, r0
 8091f16:	e013      	b.n	8091f40 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 8091f18:	f100 0308 	add.w	r3, r0, #8
 8091f1c:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 8091f20:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 8091f22:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 8091f26:	1c41      	adds	r1, r0, #1
 8091f28:	4623      	mov	r3, r4
 8091f2a:	464a      	mov	r2, r9
 8091f2c:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 8091f2e:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 8091f30:	f7ff fb24 	bl	809157c <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8091f34:	4669      	mov	r1, sp
 8091f36:	4628      	mov	r0, r5
 8091f38:	f7ef fc2e 	bl	8081798 <_ZN5Print5writeEPKc>
 8091f3c:	4604      	mov	r4, r0
 8091f3e:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 8091f40:	b11e      	cbz	r6, 8091f4a <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 8091f42:	4628      	mov	r0, r5
 8091f44:	f7ff fe99 	bl	8091c7a <_ZN5Print7printlnEv>
 8091f48:	4404      	add	r4, r0
    return n;
}
 8091f4a:	4620      	mov	r0, r4
 8091f4c:	371c      	adds	r7, #28
 8091f4e:	46bd      	mov	sp, r7
 8091f50:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8091f54:	b002      	add	sp, #8
 8091f56:	4770      	bx	lr

08091f58 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8091f58:	4a01      	ldr	r2, [pc, #4]	; (8091f60 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8091f5a:	4b02      	ldr	r3, [pc, #8]	; (8091f64 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8091f5c:	601a      	str	r2, [r3, #0]
 8091f5e:	4770      	bx	lr
 8091f60:	080974c1 	.word	0x080974c1
 8091f64:	200042b0 	.word	0x200042b0

08091f68 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8091f68:	4b02      	ldr	r3, [pc, #8]	; (8091f74 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8091f6a:	681a      	ldr	r2, [r3, #0]
 8091f6c:	4b02      	ldr	r3, [pc, #8]	; (8091f78 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8091f6e:	601a      	str	r2, [r3, #0]
 8091f70:	4770      	bx	lr
 8091f72:	bf00      	nop
 8091f74:	20000440 	.word	0x20000440
 8091f78:	200042b4 	.word	0x200042b4

08091f7c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8091f7c:	2100      	movs	r1, #0
 8091f7e:	f7ff ba95 	b.w	80914ac <system_delay_ms>

08091f82 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8091f82:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8091f84:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8091f86:	4604      	mov	r4, r0
    {
      if (_M_manager)
 8091f88:	b113      	cbz	r3, 8091f90 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8091f8a:	2203      	movs	r2, #3
 8091f8c:	4601      	mov	r1, r0
 8091f8e:	4798      	blx	r3
    }
 8091f90:	4620      	mov	r0, r4
 8091f92:	bd10      	pop	{r4, pc}

08091f94 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8091f94:	b510      	push	{r4, lr}
 8091f96:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8091f98:	f7ff fff3 	bl	8091f82 <_ZNSt14_Function_baseD1Ev>
 8091f9c:	4620      	mov	r0, r4
 8091f9e:	bd10      	pop	{r4, pc}

08091fa0 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
 8091fa0:	b510      	push	{r4, lr}
 8091fa2:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
 8091fa4:	f7ff fa6a 	bl	809147c <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
 8091fa8:	4284      	cmp	r4, r0
 8091faa:	d008      	beq.n	8091fbe <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
 8091fac:	b11c      	cbz	r4, 8091fb6 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
 8091fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
 8091fb2:	f7ff ba53 	b.w	809145c <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
 8091fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
 8091fba:	f7ff ba57 	b.w	809146c <LED_Signaling_Stop>
 8091fbe:	bd10      	pop	{r4, pc}

08091fc0 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
 8091fc0:	b570      	push	{r4, r5, r6, lr}
 8091fc2:	4605      	mov	r5, r0
 8091fc4:	460e      	mov	r6, r1
 8091fc6:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
 8091fc8:	f7ff fa58 	bl	809147c <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
 8091fcc:	b150      	cbz	r0, 8091fe4 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
 8091fce:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
 8091fd2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8091fd6:	f7ff fa39 	bl	809144c <LED_SetSignalingColor>
    LED_On(LED_RGB);
}
 8091fda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
 8091fde:	20e7      	movs	r0, #231	; 0xe7
 8091fe0:	f7ff ba54 	b.w	809148c <LED_On>
 8091fe4:	bd70      	pop	{r4, r5, r6, pc}
	...

08091fe8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8091fe8:	4803      	ldr	r0, [pc, #12]	; (8091ff8 <_GLOBAL__sub_I_RGB+0x10>)
 8091fea:	2300      	movs	r3, #0
 8091fec:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8091fee:	4a03      	ldr	r2, [pc, #12]	; (8091ffc <_GLOBAL__sub_I_RGB+0x14>)
 8091ff0:	4903      	ldr	r1, [pc, #12]	; (8092000 <_GLOBAL__sub_I_RGB+0x18>)
 8091ff2:	f000 bb63 	b.w	80926bc <__aeabi_atexit>
 8091ff6:	bf00      	nop
 8091ff8:	200042b8 	.word	0x200042b8
 8091ffc:	200004a8 	.word	0x200004a8
 8092000:	08091f95 	.word	0x08091f95

08092004 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8092004:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8092006:	4b18      	ldr	r3, [pc, #96]	; (8092068 <serialEventRun+0x64>)
 8092008:	b133      	cbz	r3, 8092018 <serialEventRun+0x14>
 809200a:	f000 f953 	bl	80922b4 <_Z16_fetch_usbserialv>
 809200e:	6803      	ldr	r3, [r0, #0]
 8092010:	691b      	ldr	r3, [r3, #16]
 8092012:	4798      	blx	r3
 8092014:	2800      	cmp	r0, #0
 8092016:	dc1e      	bgt.n	8092056 <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 8092018:	4b14      	ldr	r3, [pc, #80]	; (809206c <serialEventRun+0x68>)
 809201a:	b133      	cbz	r3, 809202a <serialEventRun+0x26>
 809201c:	f000 fa14 	bl	8092448 <_Z22__fetch_global_Serial1v>
 8092020:	6803      	ldr	r3, [r0, #0]
 8092022:	691b      	ldr	r3, [r3, #16]
 8092024:	4798      	blx	r3
 8092026:	2800      	cmp	r0, #0
 8092028:	dc18      	bgt.n	809205c <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 809202a:	4b11      	ldr	r3, [pc, #68]	; (8092070 <serialEventRun+0x6c>)
 809202c:	b10b      	cbz	r3, 8092032 <serialEventRun+0x2e>
 809202e:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 8092032:	4b10      	ldr	r3, [pc, #64]	; (8092074 <serialEventRun+0x70>)
 8092034:	b10b      	cbz	r3, 809203a <serialEventRun+0x36>
 8092036:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 809203a:	4b0f      	ldr	r3, [pc, #60]	; (8092078 <serialEventRun+0x74>)
 809203c:	b10b      	cbz	r3, 8092042 <serialEventRun+0x3e>
 809203e:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8092042:	4b0e      	ldr	r3, [pc, #56]	; (809207c <serialEventRun+0x78>)
 8092044:	b17b      	cbz	r3, 8092066 <serialEventRun+0x62>
 8092046:	f000 f971 	bl	809232c <_Z17_fetch_usbserial1v>
 809204a:	6803      	ldr	r3, [r0, #0]
 809204c:	691b      	ldr	r3, [r3, #16]
 809204e:	4798      	blx	r3
 8092050:	2800      	cmp	r0, #0
 8092052:	dc06      	bgt.n	8092062 <serialEventRun+0x5e>
 8092054:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8092056:	f3af 8000 	nop.w
 809205a:	e7dd      	b.n	8092018 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 809205c:	f3af 8000 	nop.w
 8092060:	e7e3      	b.n	809202a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 8092062:	f3af 8000 	nop.w
 8092066:	bd08      	pop	{r3, pc}
	...

08092080 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 8092080:	b508      	push	{r3, lr}
	serialEventRun();
 8092082:	f7ff ffbf 	bl	8092004 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8092086:	f7ff f891 	bl	80911ac <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 809208a:	4b01      	ldr	r3, [pc, #4]	; (8092090 <_post_loop+0x10>)
 809208c:	6018      	str	r0, [r3, #0]
 809208e:	bd08      	pop	{r3, pc}
 8092090:	200047b0 	.word	0x200047b0

08092094 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8092094:	4802      	ldr	r0, [pc, #8]	; (80920a0 <_Z33system_initialize_user_backup_ramv+0xc>)
 8092096:	4a03      	ldr	r2, [pc, #12]	; (80920a4 <_Z33system_initialize_user_backup_ramv+0x10>)
 8092098:	4903      	ldr	r1, [pc, #12]	; (80920a8 <_Z33system_initialize_user_backup_ramv+0x14>)
 809209a:	1a12      	subs	r2, r2, r0
 809209c:	f001 bd6f 	b.w	8093b7e <memcpy>
 80920a0:	40024000 	.word	0x40024000
 80920a4:	40024004 	.word	0x40024004
 80920a8:	080976b8 	.word	0x080976b8

080920ac <_Z26usb_request_custom_handlerPcjjPj>:
#ifdef USB_VENDOR_REQUEST_ENABLE

// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}
 80920ac:	2000      	movs	r0, #0
 80920ae:	4770      	bx	lr

080920b0 <_Z23usb_request_app_handlerP10USBRequestPv>:

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80920b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch (req->type) {
 80920b2:	6843      	ldr	r3, [r0, #4]
// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80920b4:	4604      	mov	r4, r0
    switch (req->type) {
 80920b6:	2b0a      	cmp	r3, #10
 80920b8:	d00e      	beq.n	80920d8 <_Z23usb_request_app_handlerP10USBRequestPv+0x28>
 80920ba:	2b50      	cmp	r3, #80	; 0x50
 80920bc:	d11c      	bne.n	80920f8 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
 80920be:	4b10      	ldr	r3, [pc, #64]	; (8092100 <_Z23usb_request_app_handlerP10USBRequestPv+0x50>)
 80920c0:	681d      	ldr	r5, [r3, #0]
 80920c2:	b1cd      	cbz	r5, 80920f8 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
 80920c4:	7d03      	ldrb	r3, [r0, #20]
 80920c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80920ca:	9300      	str	r3, [sp, #0]
 80920cc:	68c2      	ldr	r2, [r0, #12]
 80920ce:	f100 0310 	add.w	r3, r0, #16
 80920d2:	6880      	ldr	r0, [r0, #8]
 80920d4:	47a8      	blx	r5
 80920d6:	e007      	b.n	80920e8 <_Z23usb_request_app_handlerP10USBRequestPv+0x38>
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
        return true;
    }
#endif
    case USB_REQUEST_CUSTOM: {
        if (!usb_request_custom_handler(req->data, USB_REQUEST_BUFFER_SIZE, req->request_size, &req->reply_size)) {
 80920d8:	f100 0310 	add.w	r3, r0, #16
 80920dc:	68c2      	ldr	r2, [r0, #12]
 80920de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80920e2:	6880      	ldr	r0, [r0, #8]
 80920e4:	f7ff ffe2 	bl	80920ac <_Z26usb_request_custom_handlerPcjjPj>
 80920e8:	b130      	cbz	r0, 80920f8 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
            return false;
        }
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
 80920ea:	2200      	movs	r2, #0
 80920ec:	4620      	mov	r0, r4
 80920ee:	4611      	mov	r1, r2
 80920f0:	f7ff f9f4 	bl	80914dc <system_set_usb_request_result>
        return true;
 80920f4:	2001      	movs	r0, #1
 80920f6:	e000      	b.n	80920fa <_Z23usb_request_app_handlerP10USBRequestPv+0x4a>
    switch (req->type) {
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
                req->request_size, &req->reply_size, (DataFormat)req->format)) {
            return false;
 80920f8:	2000      	movs	r0, #0
        return true;
    }
    default:
        return false; // Unsupported request type
    }
}
 80920fa:	b003      	add	sp, #12
 80920fc:	bd30      	pop	{r4, r5, pc}
 80920fe:	bf00      	nop
 8092100:	200042c8 	.word	0x200042c8

08092104 <module_user_init_hook>:

#endif // USB_VENDOR_REQUEST_ENABLE

void module_user_init_hook()
{
 8092104:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8092106:	4c0c      	ldr	r4, [pc, #48]	; (8092138 <module_user_init_hook+0x34>)
 8092108:	4d0c      	ldr	r5, [pc, #48]	; (809213c <module_user_init_hook+0x38>)
 809210a:	6823      	ldr	r3, [r4, #0]
 809210c:	42ab      	cmp	r3, r5
 809210e:	4b0c      	ldr	r3, [pc, #48]	; (8092140 <module_user_init_hook+0x3c>)
 8092110:	bf0c      	ite	eq
 8092112:	2201      	moveq	r2, #1
 8092114:	2200      	movne	r2, #0
 8092116:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8092118:	d002      	beq.n	8092120 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 809211a:	f7ff ffbb 	bl	8092094 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 809211e:	6025      	str	r5, [r4, #0]
    /* for dynamically linked user part, set the random seed if the user
     * app defines random_seed_from_cloud.
     */
// todo - add a RNG define for that capability
#if defined(STM32F2XX)
    if (random_seed_from_cloud) {
 8092120:	4b08      	ldr	r3, [pc, #32]	; (8092144 <module_user_init_hook+0x40>)
 8092122:	b11b      	cbz	r3, 809212c <module_user_init_hook+0x28>
    		uint32_t seed = HAL_RNG_GetRandomNumber();
 8092124:	f7ff f832 	bl	809118c <HAL_RNG_GetRandomNumber>
    		random_seed_from_cloud(seed);
 8092128:	f3af 8000 	nop.w
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
#endif
}
 809212c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    		random_seed_from_cloud(seed);
    }
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
 8092130:	2100      	movs	r1, #0
 8092132:	4805      	ldr	r0, [pc, #20]	; (8092148 <module_user_init_hook+0x44>)
 8092134:	f7ff b9ca 	b.w	80914cc <system_set_usb_request_app_handler>
 8092138:	40024000 	.word	0x40024000
 809213c:	9a271c1e 	.word	0x9a271c1e
 8092140:	200042cc 	.word	0x200042cc
 8092144:	00000000 	.word	0x00000000
 8092148:	080920b1 	.word	0x080920b1

0809214c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 809214c:	4770      	bx	lr

0809214e <_ZN9IPAddressD0Ev>:
 809214e:	b510      	push	{r4, lr}
 8092150:	4604      	mov	r4, r0
 8092152:	f7ed ffa6 	bl	80800a2 <_ZdlPv>
 8092156:	4620      	mov	r0, r4
 8092158:	bd10      	pop	{r4, pc}

0809215a <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 809215a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 809215c:	460f      	mov	r7, r1
 809215e:	f100 0608 	add.w	r6, r0, #8
 8092162:	1d05      	adds	r5, r0, #4
 8092164:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8092166:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 809216a:	220a      	movs	r2, #10
 809216c:	4638      	mov	r0, r7
 809216e:	f7ff fdc4 	bl	8091cfa <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8092172:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8092174:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8092176:	d007      	beq.n	8092188 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 8092178:	2c00      	cmp	r4, #0
 809217a:	d0f4      	beq.n	8092166 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 809217c:	212e      	movs	r1, #46	; 0x2e
 809217e:	4638      	mov	r0, r7
 8092180:	f7ff fd78 	bl	8091c74 <_ZN5Print5printEc>
 8092184:	4404      	add	r4, r0
 8092186:	e7ee      	b.n	8092166 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 8092188:	4620      	mov	r0, r4
 809218a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0809218c <_ZN9IPAddressC1Ev>:
#include "spark_wiring_ipaddress.h"
#include "spark_wiring_print.h"
#include "spark_wiring_platform.h"
#include "string.h"

IPAddress::IPAddress()
 809218c:	4a02      	ldr	r2, [pc, #8]	; (8092198 <_ZN9IPAddressC1Ev+0xc>)
 809218e:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8092190:	2200      	movs	r2, #0
 8092192:	6042      	str	r2, [r0, #4]
{
    clear();
}
 8092194:	4770      	bx	lr
 8092196:	bf00      	nop
 8092198:	0809751c 	.word	0x0809751c

0809219c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 809219c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 809219e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80921a2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80921a6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80921aa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80921ae:	6041      	str	r1, [r0, #4]
 80921b0:	bd10      	pop	{r4, pc}
	...

080921b4 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80921b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80921b6:	4d04      	ldr	r5, [pc, #16]	; (80921c8 <_ZN9IPAddressC1Ehhhh+0x14>)
 80921b8:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80921ba:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80921be:	9500      	str	r5, [sp, #0]
 80921c0:	f7ff ffec 	bl	809219c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80921c4:	b003      	add	sp, #12
 80921c6:	bd30      	pop	{r4, r5, pc}
 80921c8:	0809751c 	.word	0x0809751c

080921cc <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80921cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80921ce:	780d      	ldrb	r5, [r1, #0]
 80921d0:	788b      	ldrb	r3, [r1, #2]
 80921d2:	784a      	ldrb	r2, [r1, #1]
 80921d4:	78c9      	ldrb	r1, [r1, #3]
 80921d6:	9100      	str	r1, [sp, #0]
 80921d8:	4629      	mov	r1, r5
 80921da:	f7ff ffdf 	bl	809219c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80921de:	b003      	add	sp, #12
 80921e0:	bd30      	pop	{r4, r5, pc}
	...

080921e4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
 80921e4:	b510      	push	{r4, lr}
 80921e6:	4604      	mov	r4, r0
 80921e8:	4b02      	ldr	r3, [pc, #8]	; (80921f4 <_ZN9IPAddressC1EPKh+0x10>)
 80921ea:	6003      	str	r3, [r0, #0]
{
    *this = address;
 80921ec:	f7ff ffee 	bl	80921cc <_ZN9IPAddressaSEPKh>
}
 80921f0:	4620      	mov	r0, r4
 80921f2:	bd10      	pop	{r4, pc}
 80921f4:	0809751c 	.word	0x0809751c

080921f8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80921f8:	7441      	strb	r1, [r0, #17]
 80921fa:	4770      	bx	lr

080921fc <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80921fc:	4770      	bx	lr

080921fe <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80921fe:	2100      	movs	r1, #0
 8092200:	7c00      	ldrb	r0, [r0, #16]
 8092202:	f7ff b903 	b.w	809140c <HAL_USB_USART_Receive_Data>

08092206 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 8092206:	2101      	movs	r1, #1
 8092208:	7c00      	ldrb	r0, [r0, #16]
 809220a:	f7ff b8ff 	b.w	809140c <HAL_USB_USART_Receive_Data>

0809220e <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 809220e:	7c00      	ldrb	r0, [r0, #16]
 8092210:	f7ff b8f4 	b.w	80913fc <HAL_USB_USART_Available_Data_For_Write>

08092214 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 8092214:	7c00      	ldrb	r0, [r0, #16]
 8092216:	f7ff b8e9 	b.w	80913ec <HAL_USB_USART_Available_Data>

0809221a <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 809221a:	b538      	push	{r3, r4, r5, lr}
 809221c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 809221e:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 8092220:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8092222:	f7ff f8eb 	bl	80913fc <HAL_USB_USART_Available_Data_For_Write>
 8092226:	2800      	cmp	r0, #0
 8092228:	dc01      	bgt.n	809222e <_ZN9USBSerial5writeEh+0x14>
 809222a:	7c60      	ldrb	r0, [r4, #17]
 809222c:	b120      	cbz	r0, 8092238 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 809222e:	4629      	mov	r1, r5
 8092230:	7c20      	ldrb	r0, [r4, #16]
 8092232:	f7ff f8f3 	bl	809141c <HAL_USB_USART_Send_Data>
    return 1;
 8092236:	2001      	movs	r0, #1
  }
  return 0;
}
 8092238:	bd38      	pop	{r3, r4, r5, pc}

0809223a <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 809223a:	7c00      	ldrb	r0, [r0, #16]
 809223c:	f7ff b8f6 	b.w	809142c <HAL_USB_USART_Flush_Data>

08092240 <_ZN9USBSerialD0Ev>:
 8092240:	b510      	push	{r4, lr}
 8092242:	4604      	mov	r4, r0
 8092244:	f7ed ff2d 	bl	80800a2 <_ZdlPv>
 8092248:	4620      	mov	r0, r4
 809224a:	bd10      	pop	{r4, pc}

0809224c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 809224c:	b510      	push	{r4, lr}
 809224e:	4604      	mov	r4, r0
 8092250:	2300      	movs	r3, #0
 8092252:	6063      	str	r3, [r4, #4]
 8092254:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8092258:	60a3      	str	r3, [r4, #8]
 809225a:	4b05      	ldr	r3, [pc, #20]	; (8092270 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 809225c:	4608      	mov	r0, r1
 809225e:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8092260:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 8092262:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 8092264:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 8092266:	4611      	mov	r1, r2
 8092268:	f7ff f8b0 	bl	80913cc <HAL_USB_USART_Init>
}
 809226c:	4620      	mov	r0, r4
 809226e:	bd10      	pop	{r4, pc}
 8092270:	08097530 	.word	0x08097530

08092274 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 8092274:	2200      	movs	r2, #0
 8092276:	7c00      	ldrb	r0, [r0, #16]
 8092278:	f7ff b8b0 	b.w	80913dc <HAL_USB_USART_Begin>

0809227c <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
 809227c:	7c00      	ldrb	r0, [r0, #16]
 809227e:	f7ff b8dd 	b.w	809143c <HAL_USB_USART_Is_Enabled>

08092282 <_ZN9USBSerialcvbEv>:
{
	return HAL_USB_USART_Receive_Data(_serial, true);
}

USBSerial::operator bool() {
  return isEnabled();
 8092282:	f7ff bffb 	b.w	809227c <_ZN9USBSerial9isEnabledEv>
	...

08092288 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8092288:	b510      	push	{r4, lr}
 809228a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 809228c:	2214      	movs	r2, #20
 809228e:	2100      	movs	r1, #0
 8092290:	f001 fc9b 	bl	8093bca <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8092294:	4b05      	ldr	r3, [pc, #20]	; (80922ac <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8092296:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8092298:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 809229a:	4b05      	ldr	r3, [pc, #20]	; (80922b0 <_Z19acquireSerialBufferv+0x28>)
 809229c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 809229e:	f240 1301 	movw	r3, #257	; 0x101
 80922a2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80922a4:	2381      	movs	r3, #129	; 0x81
 80922a6:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80922a8:	bd10      	pop	{r4, pc}
 80922aa:	bf00      	nop
 80922ac:	20004355 	.word	0x20004355
 80922b0:	200042d4 	.word	0x200042d4

080922b4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80922b4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80922b6:	4d0e      	ldr	r5, [pc, #56]	; (80922f0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80922b8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80922ba:	a801      	add	r0, sp, #4
 80922bc:	f7ff ffe4 	bl	8092288 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80922c0:	6829      	ldr	r1, [r5, #0]
 80922c2:	f011 0401 	ands.w	r4, r1, #1
 80922c6:	d110      	bne.n	80922ea <_Z16_fetch_usbserialv+0x36>
 80922c8:	4628      	mov	r0, r5
 80922ca:	f7ed feee 	bl	80800aa <__cxa_guard_acquire>
 80922ce:	b160      	cbz	r0, 80922ea <_Z16_fetch_usbserialv+0x36>
 80922d0:	aa01      	add	r2, sp, #4
 80922d2:	4621      	mov	r1, r4
 80922d4:	4807      	ldr	r0, [pc, #28]	; (80922f4 <_Z16_fetch_usbserialv+0x40>)
 80922d6:	f7ff ffb9 	bl	809224c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80922da:	4628      	mov	r0, r5
 80922dc:	f7ed feea 	bl	80800b4 <__cxa_guard_release>
 80922e0:	4a05      	ldr	r2, [pc, #20]	; (80922f8 <_Z16_fetch_usbserialv+0x44>)
 80922e2:	4906      	ldr	r1, [pc, #24]	; (80922fc <_Z16_fetch_usbserialv+0x48>)
 80922e4:	4803      	ldr	r0, [pc, #12]	; (80922f4 <_Z16_fetch_usbserialv+0x40>)
 80922e6:	f000 f9e9 	bl	80926bc <__aeabi_atexit>
	return _usbserial;
}
 80922ea:	4802      	ldr	r0, [pc, #8]	; (80922f4 <_Z16_fetch_usbserialv+0x40>)
 80922ec:	b007      	add	sp, #28
 80922ee:	bd30      	pop	{r4, r5, pc}
 80922f0:	200042d0 	.word	0x200042d0
 80922f4:	20004458 	.word	0x20004458
 80922f8:	200004a8 	.word	0x200004a8
 80922fc:	080921fd 	.word	0x080921fd

08092300 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8092300:	b510      	push	{r4, lr}
 8092302:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8092304:	2214      	movs	r2, #20
 8092306:	2100      	movs	r1, #0
 8092308:	f001 fc5f 	bl	8093bca <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 809230c:	4b05      	ldr	r3, [pc, #20]	; (8092324 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 809230e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8092310:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8092312:	4b05      	ldr	r3, [pc, #20]	; (8092328 <_Z23acquireUSBSerial1Bufferv+0x28>)
 8092314:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8092316:	f240 1301 	movw	r3, #257	; 0x101
 809231a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 809231c:	2381      	movs	r3, #129	; 0x81
 809231e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8092320:	bd10      	pop	{r4, pc}
 8092322:	bf00      	nop
 8092324:	20004508 	.word	0x20004508
 8092328:	20004470 	.word	0x20004470

0809232c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 809232c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 809232e:	4c0e      	ldr	r4, [pc, #56]	; (8092368 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8092330:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8092332:	a801      	add	r0, sp, #4
 8092334:	f7ff ffe4 	bl	8092300 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8092338:	6823      	ldr	r3, [r4, #0]
 809233a:	07db      	lsls	r3, r3, #31
 809233c:	d410      	bmi.n	8092360 <_Z17_fetch_usbserial1v+0x34>
 809233e:	4620      	mov	r0, r4
 8092340:	f7ed feb3 	bl	80800aa <__cxa_guard_acquire>
 8092344:	b160      	cbz	r0, 8092360 <_Z17_fetch_usbserial1v+0x34>
 8092346:	aa01      	add	r2, sp, #4
 8092348:	2101      	movs	r1, #1
 809234a:	4808      	ldr	r0, [pc, #32]	; (809236c <_Z17_fetch_usbserial1v+0x40>)
 809234c:	f7ff ff7e 	bl	809224c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8092350:	4620      	mov	r0, r4
 8092352:	f7ed feaf 	bl	80800b4 <__cxa_guard_release>
 8092356:	4a06      	ldr	r2, [pc, #24]	; (8092370 <_Z17_fetch_usbserial1v+0x44>)
 8092358:	4906      	ldr	r1, [pc, #24]	; (8092374 <_Z17_fetch_usbserial1v+0x48>)
 809235a:	4804      	ldr	r0, [pc, #16]	; (809236c <_Z17_fetch_usbserial1v+0x40>)
 809235c:	f000 f9ae 	bl	80926bc <__aeabi_atexit>
  return _usbserial1;
}
 8092360:	4802      	ldr	r0, [pc, #8]	; (809236c <_Z17_fetch_usbserial1v+0x40>)
 8092362:	b006      	add	sp, #24
 8092364:	bd10      	pop	{r4, pc}
 8092366:	bf00      	nop
 8092368:	2000446c 	.word	0x2000446c
 809236c:	200044f4 	.word	0x200044f4
 8092370:	200004a8 	.word	0x200004a8
 8092374:	080921fd 	.word	0x080921fd

08092378 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8092378:	2200      	movs	r2, #0
 809237a:	4611      	mov	r1, r2
 809237c:	4610      	mov	r0, r2
 809237e:	f7ff b8bd 	b.w	80914fc <network_ready>
	...

08092384 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    NetworkClass& Network = Cellular;
}
 8092384:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8092386:	4d0b      	ldr	r5, [pc, #44]	; (80923b4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x30>)
 8092388:	2428      	movs	r4, #40	; 0x28
 809238a:	4622      	mov	r2, r4
 809238c:	2100      	movs	r1, #0
 809238e:	4628      	mov	r0, r5
 8092390:	f001 fc1b 	bl	8093bca <memset>
        cid = -1;
 8092394:	f04f 33ff 	mov.w	r3, #4294967295
 8092398:	606b      	str	r3, [r5, #4]
        size = sizeof(*this);
 809239a:	802c      	strh	r4, [r5, #0]
#include "inet_hal.h"
#include "spark_wiring_cellular_printable.h"

namespace spark {

class CellularClass : public NetworkClass
 809239c:	4d06      	ldr	r5, [pc, #24]	; (80923b8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
 809239e:	4b07      	ldr	r3, [pc, #28]	; (80923bc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
 80923a0:	4628      	mov	r0, r5
    char iccid[21];
    char imei[16];

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
 80923a2:	4622      	mov	r2, r4
 80923a4:	f840 3b04 	str.w	r3, [r0], #4
 80923a8:	2100      	movs	r1, #0
 80923aa:	f001 fc0e 	bl	8093bca <memset>
        size = sizeof(*this);
 80923ae:	80ac      	strh	r4, [r5, #4]
 80923b0:	bd38      	pop	{r3, r4, r5, pc}
 80923b2:	bf00      	nop
 80923b4:	20004638 	.word	0x20004638
 80923b8:	2000460c 	.word	0x2000460c
 80923bc:	08097560 	.word	0x08097560

080923c0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80923c0:	4770      	bx	lr

080923c2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80923c2:	7441      	strb	r1, [r0, #17]
 80923c4:	4770      	bx	lr

080923c6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80923c6:	7c00      	ldrb	r0, [r0, #16]
 80923c8:	f7fe bf48 	b.w	809125c <HAL_USART_Available_Data_For_Write>

080923cc <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80923cc:	7c00      	ldrb	r0, [r0, #16]
 80923ce:	f7fe bf1d 	b.w	809120c <HAL_USART_Available_Data>

080923d2 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80923d2:	7c00      	ldrb	r0, [r0, #16]
 80923d4:	f7fe bf2a 	b.w	809122c <HAL_USART_Peek_Data>

080923d8 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80923d8:	7c00      	ldrb	r0, [r0, #16]
 80923da:	f7fe bf1f 	b.w	809121c <HAL_USART_Read_Data>

080923de <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80923de:	7c00      	ldrb	r0, [r0, #16]
 80923e0:	f7fe bf2c 	b.w	809123c <HAL_USART_Flush_Data>

080923e4 <_ZN11USARTSerialD0Ev>:
 80923e4:	b510      	push	{r4, lr}
 80923e6:	4604      	mov	r4, r0
 80923e8:	f7ed fe5b 	bl	80800a2 <_ZdlPv>
 80923ec:	4620      	mov	r0, r4
 80923ee:	bd10      	pop	{r4, pc}

080923f0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80923f0:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80923f2:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80923f4:	4604      	mov	r4, r0
 80923f6:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80923f8:	b925      	cbnz	r5, 8092404 <_ZN11USARTSerial5writeEh+0x14>
 80923fa:	7c00      	ldrb	r0, [r0, #16]
 80923fc:	f7fe ff2e 	bl	809125c <HAL_USART_Available_Data_For_Write>
 8092400:	2800      	cmp	r0, #0
 8092402:	dd05      	ble.n	8092410 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8092404:	4631      	mov	r1, r6
 8092406:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8092408:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 809240c:	f7fe bef6 	b.w	80911fc <HAL_USART_Write_Data>
  }
  return 0;
}
 8092410:	4628      	mov	r0, r5
 8092412:	bd70      	pop	{r4, r5, r6, pc}

08092414 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8092414:	b510      	push	{r4, lr}
 8092416:	4604      	mov	r4, r0
 8092418:	4608      	mov	r0, r1
 809241a:	4611      	mov	r1, r2
 809241c:	2200      	movs	r2, #0
 809241e:	6062      	str	r2, [r4, #4]
 8092420:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8092424:	60a2      	str	r2, [r4, #8]
 8092426:	4a05      	ldr	r2, [pc, #20]	; (809243c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 8092428:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 809242a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 809242c:	2201      	movs	r2, #1
 809242e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 8092430:	461a      	mov	r2, r3
 8092432:	f7fe fedb 	bl	80911ec <HAL_USART_Init>
}
 8092436:	4620      	mov	r0, r4
 8092438:	bd10      	pop	{r4, pc}
 809243a:	bf00      	nop
 809243c:	08097570 	.word	0x08097570

08092440 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 8092440:	7c00      	ldrb	r0, [r0, #16]
 8092442:	f7fe bf03 	b.w	809124c <HAL_USART_Is_Enabled>
	...

08092448 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8092448:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 809244a:	4d0c      	ldr	r5, [pc, #48]	; (809247c <_Z22__fetch_global_Serial1v+0x34>)
 809244c:	6829      	ldr	r1, [r5, #0]
 809244e:	f011 0401 	ands.w	r4, r1, #1
 8092452:	d111      	bne.n	8092478 <_Z22__fetch_global_Serial1v+0x30>
 8092454:	4628      	mov	r0, r5
 8092456:	f7ed fe28 	bl	80800aa <__cxa_guard_acquire>
 809245a:	b168      	cbz	r0, 8092478 <_Z22__fetch_global_Serial1v+0x30>
 809245c:	4a08      	ldr	r2, [pc, #32]	; (8092480 <_Z22__fetch_global_Serial1v+0x38>)
 809245e:	4621      	mov	r1, r4
 8092460:	4b08      	ldr	r3, [pc, #32]	; (8092484 <_Z22__fetch_global_Serial1v+0x3c>)
 8092462:	4809      	ldr	r0, [pc, #36]	; (8092488 <_Z22__fetch_global_Serial1v+0x40>)
 8092464:	f7ff ffd6 	bl	8092414 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8092468:	4628      	mov	r0, r5
 809246a:	f7ed fe23 	bl	80800b4 <__cxa_guard_release>
 809246e:	4a07      	ldr	r2, [pc, #28]	; (809248c <_Z22__fetch_global_Serial1v+0x44>)
 8092470:	4907      	ldr	r1, [pc, #28]	; (8092490 <_Z22__fetch_global_Serial1v+0x48>)
 8092472:	4805      	ldr	r0, [pc, #20]	; (8092488 <_Z22__fetch_global_Serial1v+0x40>)
 8092474:	f000 f922 	bl	80926bc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8092478:	4803      	ldr	r0, [pc, #12]	; (8092488 <_Z22__fetch_global_Serial1v+0x40>)
 809247a:	bd38      	pop	{r3, r4, r5, pc}
 809247c:	200046f8 	.word	0x200046f8
 8092480:	200046fc 	.word	0x200046fc
 8092484:	20004674 	.word	0x20004674
 8092488:	20004660 	.word	0x20004660
 809248c:	200004a8 	.word	0x200004a8
 8092490:	080923c1 	.word	0x080923c1

08092494 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 8092494:	4770      	bx	lr

08092496 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8092496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8092498:	4606      	mov	r6, r0
 809249a:	4615      	mov	r5, r2
 809249c:	460c      	mov	r4, r1
 809249e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80924a0:	42bc      	cmp	r4, r7
 80924a2:	d006      	beq.n	80924b2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80924a4:	6833      	ldr	r3, [r6, #0]
 80924a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80924aa:	689b      	ldr	r3, [r3, #8]
 80924ac:	4630      	mov	r0, r6
 80924ae:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80924b0:	e7f6      	b.n	80924a0 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80924b2:	4628      	mov	r0, r5
 80924b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080924b6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80924b6:	2200      	movs	r2, #0
 80924b8:	7c00      	ldrb	r0, [r0, #16]
 80924ba:	f7fe bef7 	b.w	80912ac <HAL_I2C_Write_Data>

080924be <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80924be:	2100      	movs	r1, #0
 80924c0:	7c00      	ldrb	r0, [r0, #16]
 80924c2:	f7fe befb 	b.w	80912bc <HAL_I2C_Available_Data>

080924c6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80924c6:	2100      	movs	r1, #0
 80924c8:	7c00      	ldrb	r0, [r0, #16]
 80924ca:	f7fe beff 	b.w	80912cc <HAL_I2C_Read_Data>

080924ce <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80924ce:	2100      	movs	r1, #0
 80924d0:	7c00      	ldrb	r0, [r0, #16]
 80924d2:	f7fe bf03 	b.w	80912dc <HAL_I2C_Peek_Data>

080924d6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80924d6:	2100      	movs	r1, #0
 80924d8:	7c00      	ldrb	r0, [r0, #16]
 80924da:	f7fe bf07 	b.w	80912ec <HAL_I2C_Flush_Data>

080924de <_ZN7TwoWireD0Ev>:
 80924de:	b510      	push	{r4, lr}
 80924e0:	4604      	mov	r4, r0
 80924e2:	f7ed fdde 	bl	80800a2 <_ZdlPv>
 80924e6:	4620      	mov	r0, r4
 80924e8:	bd10      	pop	{r4, pc}
	...

080924ec <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80924ec:	b510      	push	{r4, lr}
 80924ee:	4604      	mov	r4, r0
 80924f0:	4608      	mov	r0, r1
 80924f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80924f6:	60a3      	str	r3, [r4, #8]
 80924f8:	4b04      	ldr	r3, [pc, #16]	; (809250c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80924fa:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80924fc:	7420      	strb	r0, [r4, #16]
 80924fe:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8092500:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 8092502:	f7fe ff03 	bl	809130c <HAL_I2C_Init>

}
 8092506:	4620      	mov	r0, r4
 8092508:	bd10      	pop	{r4, pc}
 809250a:	bf00      	nop
 809250c:	080975a0 	.word	0x080975a0

08092510 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 8092510:	2300      	movs	r3, #0
 8092512:	461a      	mov	r2, r3
 8092514:	4619      	mov	r1, r3
 8092516:	7c00      	ldrb	r0, [r0, #16]
 8092518:	f7fe bea8 	b.w	809126c <HAL_I2C_Begin>

0809251c <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 809251c:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 809251e:	2400      	movs	r4, #0
 8092520:	7c00      	ldrb	r0, [r0, #16]
 8092522:	9400      	str	r4, [sp, #0]
 8092524:	f7fe feaa 	bl	809127c <HAL_I2C_Request_Data>
  return result;
}
 8092528:	b2c0      	uxtb	r0, r0
 809252a:	b002      	add	sp, #8
 809252c:	bd10      	pop	{r4, pc}

0809252e <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 809252e:	2301      	movs	r3, #1
 8092530:	f7ff bff4 	b.w	809251c <_ZN7TwoWire11requestFromEhhh>

08092534 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 8092534:	2200      	movs	r2, #0
 8092536:	7c00      	ldrb	r0, [r0, #16]
 8092538:	f7fe bea8 	b.w	809128c <HAL_I2C_Begin_Transmission>

0809253c <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 809253c:	2200      	movs	r2, #0
 809253e:	7c00      	ldrb	r0, [r0, #16]
 8092540:	f7fe beac 	b.w	809129c <HAL_I2C_End_Transmission>

08092544 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 8092544:	2101      	movs	r1, #1
 8092546:	f7ff bff9 	b.w	809253c <_ZN7TwoWire15endTransmissionEh>

0809254a <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 809254a:	2100      	movs	r1, #0
 809254c:	7c00      	ldrb	r0, [r0, #16]
 809254e:	f7fe bed5 	b.w	80912fc <HAL_I2C_Is_Enabled>
	...

08092554 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 8092554:	b510      	push	{r4, lr}
 8092556:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 8092558:	480f      	ldr	r0, [pc, #60]	; (8092598 <pinAvailable+0x44>)
 809255a:	f7ff f8c0 	bl	80916de <_ZN8SPIClass9isEnabledEv>
 809255e:	b128      	cbz	r0, 809256c <pinAvailable+0x18>
 8092560:	f1a4 030d 	sub.w	r3, r4, #13
 8092564:	2b02      	cmp	r3, #2
 8092566:	d801      	bhi.n	809256c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 8092568:	2000      	movs	r0, #0
 809256a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 809256c:	f000 f886 	bl	809267c <_Z19__fetch_global_Wirev>
 8092570:	f7ff ffeb 	bl	809254a <_ZN7TwoWire9isEnabledEv>
 8092574:	b108      	cbz	r0, 809257a <pinAvailable+0x26>
 8092576:	2c01      	cmp	r4, #1
 8092578:	d9f6      	bls.n	8092568 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 809257a:	f7ff ff65 	bl	8092448 <_Z22__fetch_global_Serial1v>
 809257e:	f7ff ff5f 	bl	8092440 <_ZN11USARTSerial9isEnabledEv>
 8092582:	b118      	cbz	r0, 809258c <pinAvailable+0x38>
 8092584:	f1a4 0312 	sub.w	r3, r4, #18
 8092588:	2b01      	cmp	r3, #1
 809258a:	d9ed      	bls.n	8092568 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 809258c:	2c2e      	cmp	r4, #46	; 0x2e
 809258e:	bf8c      	ite	hi
 8092590:	2000      	movhi	r0, #0
 8092592:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 8092594:	bd10      	pop	{r4, pc}
 8092596:	bf00      	nop
 8092598:	20004780 	.word	0x20004780

0809259c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 809259c:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 809259e:	b538      	push	{r3, r4, r5, lr}
 80925a0:	4604      	mov	r4, r0
 80925a2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80925a4:	d80a      	bhi.n	80925bc <pinMode+0x20>
 80925a6:	29ff      	cmp	r1, #255	; 0xff
 80925a8:	d008      	beq.n	80925bc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80925aa:	f7ff ffd3 	bl	8092554 <pinAvailable>
 80925ae:	b128      	cbz	r0, 80925bc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80925b0:	4629      	mov	r1, r5
 80925b2:	4620      	mov	r0, r4
}
 80925b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80925b8:	f7fe bd80 	b.w	80910bc <HAL_Pin_Mode>
 80925bc:	bd38      	pop	{r3, r4, r5, pc}

080925be <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80925be:	b538      	push	{r3, r4, r5, lr}
 80925c0:	4604      	mov	r4, r0
 80925c2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80925c4:	f7fe fd82 	bl	80910cc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80925c8:	28ff      	cmp	r0, #255	; 0xff
 80925ca:	d010      	beq.n	80925ee <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80925cc:	2806      	cmp	r0, #6
 80925ce:	d804      	bhi.n	80925da <digitalWrite+0x1c>
 80925d0:	234d      	movs	r3, #77	; 0x4d
 80925d2:	fa23 f000 	lsr.w	r0, r3, r0
 80925d6:	07c3      	lsls	r3, r0, #31
 80925d8:	d409      	bmi.n	80925ee <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80925da:	4620      	mov	r0, r4
 80925dc:	f7ff ffba 	bl	8092554 <pinAvailable>
 80925e0:	b128      	cbz	r0, 80925ee <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80925e2:	4629      	mov	r1, r5
 80925e4:	4620      	mov	r0, r4
}
 80925e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80925ea:	f7fe bd77 	b.w	80910dc <HAL_GPIO_Write>
 80925ee:	bd38      	pop	{r3, r4, r5, pc}

080925f0 <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80925f0:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80925f2:	4e11      	ldr	r6, [pc, #68]	; (8092638 <_GLOBAL__sub_I_SPI+0x48>)
 80925f4:	4d11      	ldr	r5, [pc, #68]	; (809263c <_GLOBAL__sub_I_SPI+0x4c>)
 80925f6:	4c12      	ldr	r4, [pc, #72]	; (8092640 <_GLOBAL__sub_I_SPI+0x50>)
 80925f8:	2100      	movs	r1, #0
 80925fa:	4630      	mov	r0, r6
 80925fc:	f7fe ffd6 	bl	80915ac <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8092600:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8092602:	4e10      	ldr	r6, [pc, #64]	; (8092644 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8092604:	462a      	mov	r2, r5
 8092606:	4621      	mov	r1, r4
 8092608:	f000 f858 	bl	80926bc <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 809260c:	2101      	movs	r1, #1
 809260e:	4630      	mov	r0, r6
 8092610:	f7fe ffcc 	bl	80915ac <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8092614:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8092616:	4e0c      	ldr	r6, [pc, #48]	; (8092648 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8092618:	462a      	mov	r2, r5
 809261a:	4621      	mov	r1, r4
 809261c:	f000 f84e 	bl	80926bc <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8092620:	2102      	movs	r1, #2
 8092622:	4630      	mov	r0, r6
 8092624:	f7fe ffc2 	bl	80915ac <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8092628:	462a      	mov	r2, r5
 809262a:	4621      	mov	r1, r4
 809262c:	4630      	mov	r0, r6
 809262e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8092632:	f000 b843 	b.w	80926bc <__aeabi_atexit>
 8092636:	bf00      	nop
 8092638:	20004780 	.word	0x20004780
 809263c:	200004a8 	.word	0x200004a8
 8092640:	0809159d 	.word	0x0809159d
 8092644:	20004790 	.word	0x20004790
 8092648:	200047a0 	.word	0x200047a0

0809264c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 809264c:	b513      	push	{r0, r1, r4, lr}
 809264e:	4c08      	ldr	r4, [pc, #32]	; (8092670 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8092650:	2300      	movs	r3, #0
 8092652:	461a      	mov	r2, r3
 8092654:	4619      	mov	r1, r3
 8092656:	9300      	str	r3, [sp, #0]
 8092658:	4620      	mov	r0, r4
 809265a:	f7ff fdab 	bl	80921b4 <_ZN9IPAddressC1Ehhhh>
 809265e:	4620      	mov	r0, r4
 8092660:	4a04      	ldr	r2, [pc, #16]	; (8092674 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 8092662:	4905      	ldr	r1, [pc, #20]	; (8092678 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8092664:	b002      	add	sp, #8
 8092666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 809266a:	f000 b827 	b.w	80926bc <__aeabi_atexit>
 809266e:	bf00      	nop
 8092670:	200047b4 	.word	0x200047b4
 8092674:	200004a8 	.word	0x200004a8
 8092678:	0809214d 	.word	0x0809214d

0809267c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 809267c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 809267e:	4d0b      	ldr	r5, [pc, #44]	; (80926ac <_Z19__fetch_global_Wirev+0x30>)
 8092680:	6829      	ldr	r1, [r5, #0]
 8092682:	f011 0401 	ands.w	r4, r1, #1
 8092686:	d10f      	bne.n	80926a8 <_Z19__fetch_global_Wirev+0x2c>
 8092688:	4628      	mov	r0, r5
 809268a:	f7ed fd0e 	bl	80800aa <__cxa_guard_acquire>
 809268e:	b158      	cbz	r0, 80926a8 <_Z19__fetch_global_Wirev+0x2c>
 8092690:	4621      	mov	r1, r4
 8092692:	4807      	ldr	r0, [pc, #28]	; (80926b0 <_Z19__fetch_global_Wirev+0x34>)
 8092694:	f7ff ff2a 	bl	80924ec <_ZN7TwoWireC1E17HAL_I2C_Interface>
 8092698:	4628      	mov	r0, r5
 809269a:	f7ed fd0b 	bl	80800b4 <__cxa_guard_release>
 809269e:	4a05      	ldr	r2, [pc, #20]	; (80926b4 <_Z19__fetch_global_Wirev+0x38>)
 80926a0:	4905      	ldr	r1, [pc, #20]	; (80926b8 <_Z19__fetch_global_Wirev+0x3c>)
 80926a2:	4803      	ldr	r0, [pc, #12]	; (80926b0 <_Z19__fetch_global_Wirev+0x34>)
 80926a4:	f000 f80a 	bl	80926bc <__aeabi_atexit>
	return wire;
}
 80926a8:	4801      	ldr	r0, [pc, #4]	; (80926b0 <_Z19__fetch_global_Wirev+0x34>)
 80926aa:	bd38      	pop	{r3, r4, r5, pc}
 80926ac:	200047bc 	.word	0x200047bc
 80926b0:	200047c0 	.word	0x200047c0
 80926b4:	200004a8 	.word	0x200004a8
 80926b8:	08092495 	.word	0x08092495

080926bc <__aeabi_atexit>:
 80926bc:	460b      	mov	r3, r1
 80926be:	4601      	mov	r1, r0
 80926c0:	4618      	mov	r0, r3
 80926c2:	f001 ba3f 	b.w	8093b44 <__cxa_atexit>
	...

080926c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80926c8:	4b18      	ldr	r3, [pc, #96]	; (809272c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80926ca:	681a      	ldr	r2, [r3, #0]
 80926cc:	07d1      	lsls	r1, r2, #31
 80926ce:	bf5c      	itt	pl
 80926d0:	2201      	movpl	r2, #1
 80926d2:	601a      	strpl	r2, [r3, #0]
 80926d4:	4b16      	ldr	r3, [pc, #88]	; (8092730 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80926d6:	681a      	ldr	r2, [r3, #0]
 80926d8:	07d2      	lsls	r2, r2, #31
 80926da:	bf5c      	itt	pl
 80926dc:	2201      	movpl	r2, #1
 80926de:	601a      	strpl	r2, [r3, #0]
 80926e0:	4b14      	ldr	r3, [pc, #80]	; (8092734 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80926e2:	681a      	ldr	r2, [r3, #0]
 80926e4:	07d0      	lsls	r0, r2, #31
 80926e6:	bf5c      	itt	pl
 80926e8:	2201      	movpl	r2, #1
 80926ea:	601a      	strpl	r2, [r3, #0]
 80926ec:	4b12      	ldr	r3, [pc, #72]	; (8092738 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80926ee:	681a      	ldr	r2, [r3, #0]
 80926f0:	07d1      	lsls	r1, r2, #31
 80926f2:	bf5c      	itt	pl
 80926f4:	2201      	movpl	r2, #1
 80926f6:	601a      	strpl	r2, [r3, #0]
 80926f8:	4b10      	ldr	r3, [pc, #64]	; (809273c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80926fa:	681a      	ldr	r2, [r3, #0]
 80926fc:	07d2      	lsls	r2, r2, #31
 80926fe:	bf5c      	itt	pl
 8092700:	2201      	movpl	r2, #1
 8092702:	601a      	strpl	r2, [r3, #0]
 8092704:	4b0e      	ldr	r3, [pc, #56]	; (8092740 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8092706:	681a      	ldr	r2, [r3, #0]
 8092708:	07d0      	lsls	r0, r2, #31
 809270a:	bf5c      	itt	pl
 809270c:	2201      	movpl	r2, #1
 809270e:	601a      	strpl	r2, [r3, #0]
 8092710:	4b0c      	ldr	r3, [pc, #48]	; (8092744 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8092712:	681a      	ldr	r2, [r3, #0]
 8092714:	07d1      	lsls	r1, r2, #31
 8092716:	bf5c      	itt	pl
 8092718:	2201      	movpl	r2, #1
 809271a:	601a      	strpl	r2, [r3, #0]
 809271c:	4b0a      	ldr	r3, [pc, #40]	; (8092748 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 809271e:	681a      	ldr	r2, [r3, #0]
 8092720:	07d2      	lsls	r2, r2, #31
 8092722:	bf5c      	itt	pl
 8092724:	2201      	movpl	r2, #1
 8092726:	601a      	strpl	r2, [r3, #0]
 8092728:	4770      	bx	lr
 809272a:	bf00      	nop
 809272c:	200047f0 	.word	0x200047f0
 8092730:	200047ec 	.word	0x200047ec
 8092734:	200047e8 	.word	0x200047e8
 8092738:	200047e4 	.word	0x200047e4
 809273c:	200047e0 	.word	0x200047e0
 8092740:	200047dc 	.word	0x200047dc
 8092744:	200047d8 	.word	0x200047d8
 8092748:	200047d4 	.word	0x200047d4

0809274c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 809274c:	4b24      	ldr	r3, [pc, #144]	; (80927e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 809274e:	681a      	ldr	r2, [r3, #0]
 8092750:	07d0      	lsls	r0, r2, #31
 8092752:	bf5c      	itt	pl
 8092754:	2201      	movpl	r2, #1
 8092756:	601a      	strpl	r2, [r3, #0]
 8092758:	4b22      	ldr	r3, [pc, #136]	; (80927e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 809275a:	681a      	ldr	r2, [r3, #0]
 809275c:	07d1      	lsls	r1, r2, #31
 809275e:	bf5c      	itt	pl
 8092760:	2201      	movpl	r2, #1
 8092762:	601a      	strpl	r2, [r3, #0]
 8092764:	4b20      	ldr	r3, [pc, #128]	; (80927e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8092766:	681a      	ldr	r2, [r3, #0]
 8092768:	07d2      	lsls	r2, r2, #31
 809276a:	bf5c      	itt	pl
 809276c:	2201      	movpl	r2, #1
 809276e:	601a      	strpl	r2, [r3, #0]
 8092770:	4b1e      	ldr	r3, [pc, #120]	; (80927ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8092772:	681a      	ldr	r2, [r3, #0]
 8092774:	07d0      	lsls	r0, r2, #31
 8092776:	bf5c      	itt	pl
 8092778:	2201      	movpl	r2, #1
 809277a:	601a      	strpl	r2, [r3, #0]
 809277c:	4b1c      	ldr	r3, [pc, #112]	; (80927f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 809277e:	681a      	ldr	r2, [r3, #0]
 8092780:	07d1      	lsls	r1, r2, #31
 8092782:	bf5c      	itt	pl
 8092784:	2201      	movpl	r2, #1
 8092786:	601a      	strpl	r2, [r3, #0]
 8092788:	4b1a      	ldr	r3, [pc, #104]	; (80927f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 809278a:	681a      	ldr	r2, [r3, #0]
 809278c:	07d2      	lsls	r2, r2, #31
 809278e:	bf5c      	itt	pl
 8092790:	2201      	movpl	r2, #1
 8092792:	601a      	strpl	r2, [r3, #0]
 8092794:	4b18      	ldr	r3, [pc, #96]	; (80927f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8092796:	681a      	ldr	r2, [r3, #0]
 8092798:	07d0      	lsls	r0, r2, #31
 809279a:	bf5c      	itt	pl
 809279c:	2201      	movpl	r2, #1
 809279e:	601a      	strpl	r2, [r3, #0]
 80927a0:	4b16      	ldr	r3, [pc, #88]	; (80927fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80927a2:	681a      	ldr	r2, [r3, #0]
 80927a4:	07d1      	lsls	r1, r2, #31
 80927a6:	bf5c      	itt	pl
 80927a8:	2201      	movpl	r2, #1
 80927aa:	601a      	strpl	r2, [r3, #0]
 80927ac:	4b14      	ldr	r3, [pc, #80]	; (8092800 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80927ae:	681a      	ldr	r2, [r3, #0]
 80927b0:	07d2      	lsls	r2, r2, #31
 80927b2:	bf5c      	itt	pl
 80927b4:	2201      	movpl	r2, #1
 80927b6:	601a      	strpl	r2, [r3, #0]
 80927b8:	4b12      	ldr	r3, [pc, #72]	; (8092804 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80927ba:	681a      	ldr	r2, [r3, #0]
 80927bc:	07d0      	lsls	r0, r2, #31
 80927be:	bf5c      	itt	pl
 80927c0:	2201      	movpl	r2, #1
 80927c2:	601a      	strpl	r2, [r3, #0]
 80927c4:	4b10      	ldr	r3, [pc, #64]	; (8092808 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80927c6:	681a      	ldr	r2, [r3, #0]
 80927c8:	07d1      	lsls	r1, r2, #31
 80927ca:	bf5c      	itt	pl
 80927cc:	2201      	movpl	r2, #1
 80927ce:	601a      	strpl	r2, [r3, #0]
 80927d0:	4b0e      	ldr	r3, [pc, #56]	; (809280c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80927d2:	681a      	ldr	r2, [r3, #0]
 80927d4:	07d2      	lsls	r2, r2, #31
 80927d6:	bf5c      	itt	pl
 80927d8:	2201      	movpl	r2, #1
 80927da:	601a      	strpl	r2, [r3, #0]
 80927dc:	4770      	bx	lr
 80927de:	bf00      	nop
 80927e0:	20004820 	.word	0x20004820
 80927e4:	2000481c 	.word	0x2000481c
 80927e8:	20004818 	.word	0x20004818
 80927ec:	20004814 	.word	0x20004814
 80927f0:	20004810 	.word	0x20004810
 80927f4:	2000480c 	.word	0x2000480c
 80927f8:	20004808 	.word	0x20004808
 80927fc:	20004804 	.word	0x20004804
 8092800:	20004800 	.word	0x20004800
 8092804:	200047fc 	.word	0x200047fc
 8092808:	200047f8 	.word	0x200047f8
 809280c:	200047f4 	.word	0x200047f4

08092810 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8092810:	4b24      	ldr	r3, [pc, #144]	; (80928a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8092812:	681a      	ldr	r2, [r3, #0]
 8092814:	07d0      	lsls	r0, r2, #31
 8092816:	bf5c      	itt	pl
 8092818:	2201      	movpl	r2, #1
 809281a:	601a      	strpl	r2, [r3, #0]
 809281c:	4b22      	ldr	r3, [pc, #136]	; (80928a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 809281e:	681a      	ldr	r2, [r3, #0]
 8092820:	07d1      	lsls	r1, r2, #31
 8092822:	bf5c      	itt	pl
 8092824:	2201      	movpl	r2, #1
 8092826:	601a      	strpl	r2, [r3, #0]
 8092828:	4b20      	ldr	r3, [pc, #128]	; (80928ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 809282a:	681a      	ldr	r2, [r3, #0]
 809282c:	07d2      	lsls	r2, r2, #31
 809282e:	bf5c      	itt	pl
 8092830:	2201      	movpl	r2, #1
 8092832:	601a      	strpl	r2, [r3, #0]
 8092834:	4b1e      	ldr	r3, [pc, #120]	; (80928b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8092836:	681a      	ldr	r2, [r3, #0]
 8092838:	07d0      	lsls	r0, r2, #31
 809283a:	bf5c      	itt	pl
 809283c:	2201      	movpl	r2, #1
 809283e:	601a      	strpl	r2, [r3, #0]
 8092840:	4b1c      	ldr	r3, [pc, #112]	; (80928b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8092842:	681a      	ldr	r2, [r3, #0]
 8092844:	07d1      	lsls	r1, r2, #31
 8092846:	bf5c      	itt	pl
 8092848:	2201      	movpl	r2, #1
 809284a:	601a      	strpl	r2, [r3, #0]
 809284c:	4b1a      	ldr	r3, [pc, #104]	; (80928b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 809284e:	681a      	ldr	r2, [r3, #0]
 8092850:	07d2      	lsls	r2, r2, #31
 8092852:	bf5c      	itt	pl
 8092854:	2201      	movpl	r2, #1
 8092856:	601a      	strpl	r2, [r3, #0]
 8092858:	4b18      	ldr	r3, [pc, #96]	; (80928bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 809285a:	681a      	ldr	r2, [r3, #0]
 809285c:	07d0      	lsls	r0, r2, #31
 809285e:	bf5c      	itt	pl
 8092860:	2201      	movpl	r2, #1
 8092862:	601a      	strpl	r2, [r3, #0]
 8092864:	4b16      	ldr	r3, [pc, #88]	; (80928c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8092866:	681a      	ldr	r2, [r3, #0]
 8092868:	07d1      	lsls	r1, r2, #31
 809286a:	bf5c      	itt	pl
 809286c:	2201      	movpl	r2, #1
 809286e:	601a      	strpl	r2, [r3, #0]
 8092870:	4b14      	ldr	r3, [pc, #80]	; (80928c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8092872:	681a      	ldr	r2, [r3, #0]
 8092874:	07d2      	lsls	r2, r2, #31
 8092876:	bf5c      	itt	pl
 8092878:	2201      	movpl	r2, #1
 809287a:	601a      	strpl	r2, [r3, #0]
 809287c:	4b12      	ldr	r3, [pc, #72]	; (80928c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 809287e:	681a      	ldr	r2, [r3, #0]
 8092880:	07d0      	lsls	r0, r2, #31
 8092882:	bf5c      	itt	pl
 8092884:	2201      	movpl	r2, #1
 8092886:	601a      	strpl	r2, [r3, #0]
 8092888:	4b10      	ldr	r3, [pc, #64]	; (80928cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 809288a:	681a      	ldr	r2, [r3, #0]
 809288c:	07d1      	lsls	r1, r2, #31
 809288e:	bf5c      	itt	pl
 8092890:	2201      	movpl	r2, #1
 8092892:	601a      	strpl	r2, [r3, #0]
 8092894:	4b0e      	ldr	r3, [pc, #56]	; (80928d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8092896:	681a      	ldr	r2, [r3, #0]
 8092898:	07d2      	lsls	r2, r2, #31
 809289a:	bf5c      	itt	pl
 809289c:	2201      	movpl	r2, #1
 809289e:	601a      	strpl	r2, [r3, #0]
 80928a0:	4770      	bx	lr
 80928a2:	bf00      	nop
 80928a4:	20004850 	.word	0x20004850
 80928a8:	2000484c 	.word	0x2000484c
 80928ac:	20004848 	.word	0x20004848
 80928b0:	20004844 	.word	0x20004844
 80928b4:	20004840 	.word	0x20004840
 80928b8:	2000483c 	.word	0x2000483c
 80928bc:	20004838 	.word	0x20004838
 80928c0:	20004834 	.word	0x20004834
 80928c4:	20004830 	.word	0x20004830
 80928c8:	2000482c 	.word	0x2000482c
 80928cc:	20004828 	.word	0x20004828
 80928d0:	20004824 	.word	0x20004824

080928d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80928d4:	4b18      	ldr	r3, [pc, #96]	; (8092938 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80928d6:	681a      	ldr	r2, [r3, #0]
 80928d8:	07d1      	lsls	r1, r2, #31
 80928da:	bf5c      	itt	pl
 80928dc:	2201      	movpl	r2, #1
 80928de:	601a      	strpl	r2, [r3, #0]
 80928e0:	4b16      	ldr	r3, [pc, #88]	; (809293c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80928e2:	681a      	ldr	r2, [r3, #0]
 80928e4:	07d2      	lsls	r2, r2, #31
 80928e6:	bf5c      	itt	pl
 80928e8:	2201      	movpl	r2, #1
 80928ea:	601a      	strpl	r2, [r3, #0]
 80928ec:	4b14      	ldr	r3, [pc, #80]	; (8092940 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80928ee:	681a      	ldr	r2, [r3, #0]
 80928f0:	07d0      	lsls	r0, r2, #31
 80928f2:	bf5c      	itt	pl
 80928f4:	2201      	movpl	r2, #1
 80928f6:	601a      	strpl	r2, [r3, #0]
 80928f8:	4b12      	ldr	r3, [pc, #72]	; (8092944 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80928fa:	681a      	ldr	r2, [r3, #0]
 80928fc:	07d1      	lsls	r1, r2, #31
 80928fe:	bf5c      	itt	pl
 8092900:	2201      	movpl	r2, #1
 8092902:	601a      	strpl	r2, [r3, #0]
 8092904:	4b10      	ldr	r3, [pc, #64]	; (8092948 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8092906:	681a      	ldr	r2, [r3, #0]
 8092908:	07d2      	lsls	r2, r2, #31
 809290a:	bf5c      	itt	pl
 809290c:	2201      	movpl	r2, #1
 809290e:	601a      	strpl	r2, [r3, #0]
 8092910:	4b0e      	ldr	r3, [pc, #56]	; (809294c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8092912:	681a      	ldr	r2, [r3, #0]
 8092914:	07d0      	lsls	r0, r2, #31
 8092916:	bf5c      	itt	pl
 8092918:	2201      	movpl	r2, #1
 809291a:	601a      	strpl	r2, [r3, #0]
 809291c:	4b0c      	ldr	r3, [pc, #48]	; (8092950 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 809291e:	681a      	ldr	r2, [r3, #0]
 8092920:	07d1      	lsls	r1, r2, #31
 8092922:	bf5c      	itt	pl
 8092924:	2201      	movpl	r2, #1
 8092926:	601a      	strpl	r2, [r3, #0]
 8092928:	4b0a      	ldr	r3, [pc, #40]	; (8092954 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 809292a:	681a      	ldr	r2, [r3, #0]
 809292c:	07d2      	lsls	r2, r2, #31
 809292e:	bf5c      	itt	pl
 8092930:	2201      	movpl	r2, #1
 8092932:	601a      	strpl	r2, [r3, #0]
 8092934:	4770      	bx	lr
 8092936:	bf00      	nop
 8092938:	20004870 	.word	0x20004870
 809293c:	2000486c 	.word	0x2000486c
 8092940:	20004868 	.word	0x20004868
 8092944:	20004864 	.word	0x20004864
 8092948:	20004860 	.word	0x20004860
 809294c:	2000485c 	.word	0x2000485c
 8092950:	20004858 	.word	0x20004858
 8092954:	20004854 	.word	0x20004854

08092958 <__aeabi_drsub>:
 8092958:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 809295c:	e002      	b.n	8092964 <__adddf3>
 809295e:	bf00      	nop

08092960 <__aeabi_dsub>:
 8092960:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08092964 <__adddf3>:
 8092964:	b530      	push	{r4, r5, lr}
 8092966:	ea4f 0441 	mov.w	r4, r1, lsl #1
 809296a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 809296e:	ea94 0f05 	teq	r4, r5
 8092972:	bf08      	it	eq
 8092974:	ea90 0f02 	teqeq	r0, r2
 8092978:	bf1f      	itttt	ne
 809297a:	ea54 0c00 	orrsne.w	ip, r4, r0
 809297e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8092982:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8092986:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 809298a:	f000 80e2 	beq.w	8092b52 <__adddf3+0x1ee>
 809298e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8092992:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8092996:	bfb8      	it	lt
 8092998:	426d      	neglt	r5, r5
 809299a:	dd0c      	ble.n	80929b6 <__adddf3+0x52>
 809299c:	442c      	add	r4, r5
 809299e:	ea80 0202 	eor.w	r2, r0, r2
 80929a2:	ea81 0303 	eor.w	r3, r1, r3
 80929a6:	ea82 0000 	eor.w	r0, r2, r0
 80929aa:	ea83 0101 	eor.w	r1, r3, r1
 80929ae:	ea80 0202 	eor.w	r2, r0, r2
 80929b2:	ea81 0303 	eor.w	r3, r1, r3
 80929b6:	2d36      	cmp	r5, #54	; 0x36
 80929b8:	bf88      	it	hi
 80929ba:	bd30      	pophi	{r4, r5, pc}
 80929bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80929c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80929c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80929c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80929cc:	d002      	beq.n	80929d4 <__adddf3+0x70>
 80929ce:	4240      	negs	r0, r0
 80929d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80929d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80929d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80929dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80929e0:	d002      	beq.n	80929e8 <__adddf3+0x84>
 80929e2:	4252      	negs	r2, r2
 80929e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80929e8:	ea94 0f05 	teq	r4, r5
 80929ec:	f000 80a7 	beq.w	8092b3e <__adddf3+0x1da>
 80929f0:	f1a4 0401 	sub.w	r4, r4, #1
 80929f4:	f1d5 0e20 	rsbs	lr, r5, #32
 80929f8:	db0d      	blt.n	8092a16 <__adddf3+0xb2>
 80929fa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80929fe:	fa22 f205 	lsr.w	r2, r2, r5
 8092a02:	1880      	adds	r0, r0, r2
 8092a04:	f141 0100 	adc.w	r1, r1, #0
 8092a08:	fa03 f20e 	lsl.w	r2, r3, lr
 8092a0c:	1880      	adds	r0, r0, r2
 8092a0e:	fa43 f305 	asr.w	r3, r3, r5
 8092a12:	4159      	adcs	r1, r3
 8092a14:	e00e      	b.n	8092a34 <__adddf3+0xd0>
 8092a16:	f1a5 0520 	sub.w	r5, r5, #32
 8092a1a:	f10e 0e20 	add.w	lr, lr, #32
 8092a1e:	2a01      	cmp	r2, #1
 8092a20:	fa03 fc0e 	lsl.w	ip, r3, lr
 8092a24:	bf28      	it	cs
 8092a26:	f04c 0c02 	orrcs.w	ip, ip, #2
 8092a2a:	fa43 f305 	asr.w	r3, r3, r5
 8092a2e:	18c0      	adds	r0, r0, r3
 8092a30:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8092a34:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8092a38:	d507      	bpl.n	8092a4a <__adddf3+0xe6>
 8092a3a:	f04f 0e00 	mov.w	lr, #0
 8092a3e:	f1dc 0c00 	rsbs	ip, ip, #0
 8092a42:	eb7e 0000 	sbcs.w	r0, lr, r0
 8092a46:	eb6e 0101 	sbc.w	r1, lr, r1
 8092a4a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8092a4e:	d31b      	bcc.n	8092a88 <__adddf3+0x124>
 8092a50:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8092a54:	d30c      	bcc.n	8092a70 <__adddf3+0x10c>
 8092a56:	0849      	lsrs	r1, r1, #1
 8092a58:	ea5f 0030 	movs.w	r0, r0, rrx
 8092a5c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8092a60:	f104 0401 	add.w	r4, r4, #1
 8092a64:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8092a68:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8092a6c:	f080 809a 	bcs.w	8092ba4 <__adddf3+0x240>
 8092a70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8092a74:	bf08      	it	eq
 8092a76:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8092a7a:	f150 0000 	adcs.w	r0, r0, #0
 8092a7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8092a82:	ea41 0105 	orr.w	r1, r1, r5
 8092a86:	bd30      	pop	{r4, r5, pc}
 8092a88:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8092a8c:	4140      	adcs	r0, r0
 8092a8e:	eb41 0101 	adc.w	r1, r1, r1
 8092a92:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8092a96:	f1a4 0401 	sub.w	r4, r4, #1
 8092a9a:	d1e9      	bne.n	8092a70 <__adddf3+0x10c>
 8092a9c:	f091 0f00 	teq	r1, #0
 8092aa0:	bf04      	itt	eq
 8092aa2:	4601      	moveq	r1, r0
 8092aa4:	2000      	moveq	r0, #0
 8092aa6:	fab1 f381 	clz	r3, r1
 8092aaa:	bf08      	it	eq
 8092aac:	3320      	addeq	r3, #32
 8092aae:	f1a3 030b 	sub.w	r3, r3, #11
 8092ab2:	f1b3 0220 	subs.w	r2, r3, #32
 8092ab6:	da0c      	bge.n	8092ad2 <__adddf3+0x16e>
 8092ab8:	320c      	adds	r2, #12
 8092aba:	dd08      	ble.n	8092ace <__adddf3+0x16a>
 8092abc:	f102 0c14 	add.w	ip, r2, #20
 8092ac0:	f1c2 020c 	rsb	r2, r2, #12
 8092ac4:	fa01 f00c 	lsl.w	r0, r1, ip
 8092ac8:	fa21 f102 	lsr.w	r1, r1, r2
 8092acc:	e00c      	b.n	8092ae8 <__adddf3+0x184>
 8092ace:	f102 0214 	add.w	r2, r2, #20
 8092ad2:	bfd8      	it	le
 8092ad4:	f1c2 0c20 	rsble	ip, r2, #32
 8092ad8:	fa01 f102 	lsl.w	r1, r1, r2
 8092adc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8092ae0:	bfdc      	itt	le
 8092ae2:	ea41 010c 	orrle.w	r1, r1, ip
 8092ae6:	4090      	lslle	r0, r2
 8092ae8:	1ae4      	subs	r4, r4, r3
 8092aea:	bfa2      	ittt	ge
 8092aec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8092af0:	4329      	orrge	r1, r5
 8092af2:	bd30      	popge	{r4, r5, pc}
 8092af4:	ea6f 0404 	mvn.w	r4, r4
 8092af8:	3c1f      	subs	r4, #31
 8092afa:	da1c      	bge.n	8092b36 <__adddf3+0x1d2>
 8092afc:	340c      	adds	r4, #12
 8092afe:	dc0e      	bgt.n	8092b1e <__adddf3+0x1ba>
 8092b00:	f104 0414 	add.w	r4, r4, #20
 8092b04:	f1c4 0220 	rsb	r2, r4, #32
 8092b08:	fa20 f004 	lsr.w	r0, r0, r4
 8092b0c:	fa01 f302 	lsl.w	r3, r1, r2
 8092b10:	ea40 0003 	orr.w	r0, r0, r3
 8092b14:	fa21 f304 	lsr.w	r3, r1, r4
 8092b18:	ea45 0103 	orr.w	r1, r5, r3
 8092b1c:	bd30      	pop	{r4, r5, pc}
 8092b1e:	f1c4 040c 	rsb	r4, r4, #12
 8092b22:	f1c4 0220 	rsb	r2, r4, #32
 8092b26:	fa20 f002 	lsr.w	r0, r0, r2
 8092b2a:	fa01 f304 	lsl.w	r3, r1, r4
 8092b2e:	ea40 0003 	orr.w	r0, r0, r3
 8092b32:	4629      	mov	r1, r5
 8092b34:	bd30      	pop	{r4, r5, pc}
 8092b36:	fa21 f004 	lsr.w	r0, r1, r4
 8092b3a:	4629      	mov	r1, r5
 8092b3c:	bd30      	pop	{r4, r5, pc}
 8092b3e:	f094 0f00 	teq	r4, #0
 8092b42:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8092b46:	bf06      	itte	eq
 8092b48:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8092b4c:	3401      	addeq	r4, #1
 8092b4e:	3d01      	subne	r5, #1
 8092b50:	e74e      	b.n	80929f0 <__adddf3+0x8c>
 8092b52:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8092b56:	bf18      	it	ne
 8092b58:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8092b5c:	d029      	beq.n	8092bb2 <__adddf3+0x24e>
 8092b5e:	ea94 0f05 	teq	r4, r5
 8092b62:	bf08      	it	eq
 8092b64:	ea90 0f02 	teqeq	r0, r2
 8092b68:	d005      	beq.n	8092b76 <__adddf3+0x212>
 8092b6a:	ea54 0c00 	orrs.w	ip, r4, r0
 8092b6e:	bf04      	itt	eq
 8092b70:	4619      	moveq	r1, r3
 8092b72:	4610      	moveq	r0, r2
 8092b74:	bd30      	pop	{r4, r5, pc}
 8092b76:	ea91 0f03 	teq	r1, r3
 8092b7a:	bf1e      	ittt	ne
 8092b7c:	2100      	movne	r1, #0
 8092b7e:	2000      	movne	r0, #0
 8092b80:	bd30      	popne	{r4, r5, pc}
 8092b82:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8092b86:	d105      	bne.n	8092b94 <__adddf3+0x230>
 8092b88:	0040      	lsls	r0, r0, #1
 8092b8a:	4149      	adcs	r1, r1
 8092b8c:	bf28      	it	cs
 8092b8e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8092b92:	bd30      	pop	{r4, r5, pc}
 8092b94:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8092b98:	bf3c      	itt	cc
 8092b9a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8092b9e:	bd30      	popcc	{r4, r5, pc}
 8092ba0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8092ba4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8092ba8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8092bac:	f04f 0000 	mov.w	r0, #0
 8092bb0:	bd30      	pop	{r4, r5, pc}
 8092bb2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8092bb6:	bf1a      	itte	ne
 8092bb8:	4619      	movne	r1, r3
 8092bba:	4610      	movne	r0, r2
 8092bbc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8092bc0:	bf1c      	itt	ne
 8092bc2:	460b      	movne	r3, r1
 8092bc4:	4602      	movne	r2, r0
 8092bc6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8092bca:	bf06      	itte	eq
 8092bcc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8092bd0:	ea91 0f03 	teqeq	r1, r3
 8092bd4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8092bd8:	bd30      	pop	{r4, r5, pc}
 8092bda:	bf00      	nop

08092bdc <__aeabi_ui2d>:
 8092bdc:	f090 0f00 	teq	r0, #0
 8092be0:	bf04      	itt	eq
 8092be2:	2100      	moveq	r1, #0
 8092be4:	4770      	bxeq	lr
 8092be6:	b530      	push	{r4, r5, lr}
 8092be8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8092bec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8092bf0:	f04f 0500 	mov.w	r5, #0
 8092bf4:	f04f 0100 	mov.w	r1, #0
 8092bf8:	e750      	b.n	8092a9c <__adddf3+0x138>
 8092bfa:	bf00      	nop

08092bfc <__aeabi_i2d>:
 8092bfc:	f090 0f00 	teq	r0, #0
 8092c00:	bf04      	itt	eq
 8092c02:	2100      	moveq	r1, #0
 8092c04:	4770      	bxeq	lr
 8092c06:	b530      	push	{r4, r5, lr}
 8092c08:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8092c0c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8092c10:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8092c14:	bf48      	it	mi
 8092c16:	4240      	negmi	r0, r0
 8092c18:	f04f 0100 	mov.w	r1, #0
 8092c1c:	e73e      	b.n	8092a9c <__adddf3+0x138>
 8092c1e:	bf00      	nop

08092c20 <__aeabi_f2d>:
 8092c20:	0042      	lsls	r2, r0, #1
 8092c22:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8092c26:	ea4f 0131 	mov.w	r1, r1, rrx
 8092c2a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8092c2e:	bf1f      	itttt	ne
 8092c30:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8092c34:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8092c38:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8092c3c:	4770      	bxne	lr
 8092c3e:	f092 0f00 	teq	r2, #0
 8092c42:	bf14      	ite	ne
 8092c44:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8092c48:	4770      	bxeq	lr
 8092c4a:	b530      	push	{r4, r5, lr}
 8092c4c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8092c50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8092c54:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8092c58:	e720      	b.n	8092a9c <__adddf3+0x138>
 8092c5a:	bf00      	nop

08092c5c <__aeabi_ul2d>:
 8092c5c:	ea50 0201 	orrs.w	r2, r0, r1
 8092c60:	bf08      	it	eq
 8092c62:	4770      	bxeq	lr
 8092c64:	b530      	push	{r4, r5, lr}
 8092c66:	f04f 0500 	mov.w	r5, #0
 8092c6a:	e00a      	b.n	8092c82 <__aeabi_l2d+0x16>

08092c6c <__aeabi_l2d>:
 8092c6c:	ea50 0201 	orrs.w	r2, r0, r1
 8092c70:	bf08      	it	eq
 8092c72:	4770      	bxeq	lr
 8092c74:	b530      	push	{r4, r5, lr}
 8092c76:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8092c7a:	d502      	bpl.n	8092c82 <__aeabi_l2d+0x16>
 8092c7c:	4240      	negs	r0, r0
 8092c7e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8092c82:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8092c86:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8092c8a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8092c8e:	f43f aedc 	beq.w	8092a4a <__adddf3+0xe6>
 8092c92:	f04f 0203 	mov.w	r2, #3
 8092c96:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8092c9a:	bf18      	it	ne
 8092c9c:	3203      	addne	r2, #3
 8092c9e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8092ca2:	bf18      	it	ne
 8092ca4:	3203      	addne	r2, #3
 8092ca6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8092caa:	f1c2 0320 	rsb	r3, r2, #32
 8092cae:	fa00 fc03 	lsl.w	ip, r0, r3
 8092cb2:	fa20 f002 	lsr.w	r0, r0, r2
 8092cb6:	fa01 fe03 	lsl.w	lr, r1, r3
 8092cba:	ea40 000e 	orr.w	r0, r0, lr
 8092cbe:	fa21 f102 	lsr.w	r1, r1, r2
 8092cc2:	4414      	add	r4, r2
 8092cc4:	e6c1      	b.n	8092a4a <__adddf3+0xe6>
 8092cc6:	bf00      	nop

08092cc8 <__aeabi_dmul>:
 8092cc8:	b570      	push	{r4, r5, r6, lr}
 8092cca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8092cce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8092cd2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8092cd6:	bf1d      	ittte	ne
 8092cd8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8092cdc:	ea94 0f0c 	teqne	r4, ip
 8092ce0:	ea95 0f0c 	teqne	r5, ip
 8092ce4:	f000 f8de 	bleq	8092ea4 <__aeabi_dmul+0x1dc>
 8092ce8:	442c      	add	r4, r5
 8092cea:	ea81 0603 	eor.w	r6, r1, r3
 8092cee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8092cf2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8092cf6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8092cfa:	bf18      	it	ne
 8092cfc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8092d00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8092d04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8092d08:	d038      	beq.n	8092d7c <__aeabi_dmul+0xb4>
 8092d0a:	fba0 ce02 	umull	ip, lr, r0, r2
 8092d0e:	f04f 0500 	mov.w	r5, #0
 8092d12:	fbe1 e502 	umlal	lr, r5, r1, r2
 8092d16:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8092d1a:	fbe0 e503 	umlal	lr, r5, r0, r3
 8092d1e:	f04f 0600 	mov.w	r6, #0
 8092d22:	fbe1 5603 	umlal	r5, r6, r1, r3
 8092d26:	f09c 0f00 	teq	ip, #0
 8092d2a:	bf18      	it	ne
 8092d2c:	f04e 0e01 	orrne.w	lr, lr, #1
 8092d30:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8092d34:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8092d38:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8092d3c:	d204      	bcs.n	8092d48 <__aeabi_dmul+0x80>
 8092d3e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8092d42:	416d      	adcs	r5, r5
 8092d44:	eb46 0606 	adc.w	r6, r6, r6
 8092d48:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8092d4c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8092d50:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8092d54:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8092d58:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8092d5c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8092d60:	bf88      	it	hi
 8092d62:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8092d66:	d81e      	bhi.n	8092da6 <__aeabi_dmul+0xde>
 8092d68:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8092d6c:	bf08      	it	eq
 8092d6e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8092d72:	f150 0000 	adcs.w	r0, r0, #0
 8092d76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8092d7a:	bd70      	pop	{r4, r5, r6, pc}
 8092d7c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8092d80:	ea46 0101 	orr.w	r1, r6, r1
 8092d84:	ea40 0002 	orr.w	r0, r0, r2
 8092d88:	ea81 0103 	eor.w	r1, r1, r3
 8092d8c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8092d90:	bfc2      	ittt	gt
 8092d92:	ebd4 050c 	rsbsgt	r5, r4, ip
 8092d96:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8092d9a:	bd70      	popgt	{r4, r5, r6, pc}
 8092d9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8092da0:	f04f 0e00 	mov.w	lr, #0
 8092da4:	3c01      	subs	r4, #1
 8092da6:	f300 80ab 	bgt.w	8092f00 <__aeabi_dmul+0x238>
 8092daa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8092dae:	bfde      	ittt	le
 8092db0:	2000      	movle	r0, #0
 8092db2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8092db6:	bd70      	pople	{r4, r5, r6, pc}
 8092db8:	f1c4 0400 	rsb	r4, r4, #0
 8092dbc:	3c20      	subs	r4, #32
 8092dbe:	da35      	bge.n	8092e2c <__aeabi_dmul+0x164>
 8092dc0:	340c      	adds	r4, #12
 8092dc2:	dc1b      	bgt.n	8092dfc <__aeabi_dmul+0x134>
 8092dc4:	f104 0414 	add.w	r4, r4, #20
 8092dc8:	f1c4 0520 	rsb	r5, r4, #32
 8092dcc:	fa00 f305 	lsl.w	r3, r0, r5
 8092dd0:	fa20 f004 	lsr.w	r0, r0, r4
 8092dd4:	fa01 f205 	lsl.w	r2, r1, r5
 8092dd8:	ea40 0002 	orr.w	r0, r0, r2
 8092ddc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8092de0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8092de4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8092de8:	fa21 f604 	lsr.w	r6, r1, r4
 8092dec:	eb42 0106 	adc.w	r1, r2, r6
 8092df0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8092df4:	bf08      	it	eq
 8092df6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8092dfa:	bd70      	pop	{r4, r5, r6, pc}
 8092dfc:	f1c4 040c 	rsb	r4, r4, #12
 8092e00:	f1c4 0520 	rsb	r5, r4, #32
 8092e04:	fa00 f304 	lsl.w	r3, r0, r4
 8092e08:	fa20 f005 	lsr.w	r0, r0, r5
 8092e0c:	fa01 f204 	lsl.w	r2, r1, r4
 8092e10:	ea40 0002 	orr.w	r0, r0, r2
 8092e14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8092e18:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8092e1c:	f141 0100 	adc.w	r1, r1, #0
 8092e20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8092e24:	bf08      	it	eq
 8092e26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8092e2a:	bd70      	pop	{r4, r5, r6, pc}
 8092e2c:	f1c4 0520 	rsb	r5, r4, #32
 8092e30:	fa00 f205 	lsl.w	r2, r0, r5
 8092e34:	ea4e 0e02 	orr.w	lr, lr, r2
 8092e38:	fa20 f304 	lsr.w	r3, r0, r4
 8092e3c:	fa01 f205 	lsl.w	r2, r1, r5
 8092e40:	ea43 0302 	orr.w	r3, r3, r2
 8092e44:	fa21 f004 	lsr.w	r0, r1, r4
 8092e48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8092e4c:	fa21 f204 	lsr.w	r2, r1, r4
 8092e50:	ea20 0002 	bic.w	r0, r0, r2
 8092e54:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8092e58:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8092e5c:	bf08      	it	eq
 8092e5e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8092e62:	bd70      	pop	{r4, r5, r6, pc}
 8092e64:	f094 0f00 	teq	r4, #0
 8092e68:	d10f      	bne.n	8092e8a <__aeabi_dmul+0x1c2>
 8092e6a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8092e6e:	0040      	lsls	r0, r0, #1
 8092e70:	eb41 0101 	adc.w	r1, r1, r1
 8092e74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8092e78:	bf08      	it	eq
 8092e7a:	3c01      	subeq	r4, #1
 8092e7c:	d0f7      	beq.n	8092e6e <__aeabi_dmul+0x1a6>
 8092e7e:	ea41 0106 	orr.w	r1, r1, r6
 8092e82:	f095 0f00 	teq	r5, #0
 8092e86:	bf18      	it	ne
 8092e88:	4770      	bxne	lr
 8092e8a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8092e8e:	0052      	lsls	r2, r2, #1
 8092e90:	eb43 0303 	adc.w	r3, r3, r3
 8092e94:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8092e98:	bf08      	it	eq
 8092e9a:	3d01      	subeq	r5, #1
 8092e9c:	d0f7      	beq.n	8092e8e <__aeabi_dmul+0x1c6>
 8092e9e:	ea43 0306 	orr.w	r3, r3, r6
 8092ea2:	4770      	bx	lr
 8092ea4:	ea94 0f0c 	teq	r4, ip
 8092ea8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8092eac:	bf18      	it	ne
 8092eae:	ea95 0f0c 	teqne	r5, ip
 8092eb2:	d00c      	beq.n	8092ece <__aeabi_dmul+0x206>
 8092eb4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8092eb8:	bf18      	it	ne
 8092eba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8092ebe:	d1d1      	bne.n	8092e64 <__aeabi_dmul+0x19c>
 8092ec0:	ea81 0103 	eor.w	r1, r1, r3
 8092ec4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8092ec8:	f04f 0000 	mov.w	r0, #0
 8092ecc:	bd70      	pop	{r4, r5, r6, pc}
 8092ece:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8092ed2:	bf06      	itte	eq
 8092ed4:	4610      	moveq	r0, r2
 8092ed6:	4619      	moveq	r1, r3
 8092ed8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8092edc:	d019      	beq.n	8092f12 <__aeabi_dmul+0x24a>
 8092ede:	ea94 0f0c 	teq	r4, ip
 8092ee2:	d102      	bne.n	8092eea <__aeabi_dmul+0x222>
 8092ee4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8092ee8:	d113      	bne.n	8092f12 <__aeabi_dmul+0x24a>
 8092eea:	ea95 0f0c 	teq	r5, ip
 8092eee:	d105      	bne.n	8092efc <__aeabi_dmul+0x234>
 8092ef0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8092ef4:	bf1c      	itt	ne
 8092ef6:	4610      	movne	r0, r2
 8092ef8:	4619      	movne	r1, r3
 8092efa:	d10a      	bne.n	8092f12 <__aeabi_dmul+0x24a>
 8092efc:	ea81 0103 	eor.w	r1, r1, r3
 8092f00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8092f04:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8092f08:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8092f0c:	f04f 0000 	mov.w	r0, #0
 8092f10:	bd70      	pop	{r4, r5, r6, pc}
 8092f12:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8092f16:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8092f1a:	bd70      	pop	{r4, r5, r6, pc}

08092f1c <__aeabi_ddiv>:
 8092f1c:	b570      	push	{r4, r5, r6, lr}
 8092f1e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8092f22:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8092f26:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8092f2a:	bf1d      	ittte	ne
 8092f2c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8092f30:	ea94 0f0c 	teqne	r4, ip
 8092f34:	ea95 0f0c 	teqne	r5, ip
 8092f38:	f000 f8a7 	bleq	809308a <__aeabi_ddiv+0x16e>
 8092f3c:	eba4 0405 	sub.w	r4, r4, r5
 8092f40:	ea81 0e03 	eor.w	lr, r1, r3
 8092f44:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8092f48:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8092f4c:	f000 8088 	beq.w	8093060 <__aeabi_ddiv+0x144>
 8092f50:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8092f54:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8092f58:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8092f5c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8092f60:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8092f64:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8092f68:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8092f6c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8092f70:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8092f74:	429d      	cmp	r5, r3
 8092f76:	bf08      	it	eq
 8092f78:	4296      	cmpeq	r6, r2
 8092f7a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8092f7e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8092f82:	d202      	bcs.n	8092f8a <__aeabi_ddiv+0x6e>
 8092f84:	085b      	lsrs	r3, r3, #1
 8092f86:	ea4f 0232 	mov.w	r2, r2, rrx
 8092f8a:	1ab6      	subs	r6, r6, r2
 8092f8c:	eb65 0503 	sbc.w	r5, r5, r3
 8092f90:	085b      	lsrs	r3, r3, #1
 8092f92:	ea4f 0232 	mov.w	r2, r2, rrx
 8092f96:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8092f9a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8092f9e:	ebb6 0e02 	subs.w	lr, r6, r2
 8092fa2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8092fa6:	bf22      	ittt	cs
 8092fa8:	1ab6      	subcs	r6, r6, r2
 8092faa:	4675      	movcs	r5, lr
 8092fac:	ea40 000c 	orrcs.w	r0, r0, ip
 8092fb0:	085b      	lsrs	r3, r3, #1
 8092fb2:	ea4f 0232 	mov.w	r2, r2, rrx
 8092fb6:	ebb6 0e02 	subs.w	lr, r6, r2
 8092fba:	eb75 0e03 	sbcs.w	lr, r5, r3
 8092fbe:	bf22      	ittt	cs
 8092fc0:	1ab6      	subcs	r6, r6, r2
 8092fc2:	4675      	movcs	r5, lr
 8092fc4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8092fc8:	085b      	lsrs	r3, r3, #1
 8092fca:	ea4f 0232 	mov.w	r2, r2, rrx
 8092fce:	ebb6 0e02 	subs.w	lr, r6, r2
 8092fd2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8092fd6:	bf22      	ittt	cs
 8092fd8:	1ab6      	subcs	r6, r6, r2
 8092fda:	4675      	movcs	r5, lr
 8092fdc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8092fe0:	085b      	lsrs	r3, r3, #1
 8092fe2:	ea4f 0232 	mov.w	r2, r2, rrx
 8092fe6:	ebb6 0e02 	subs.w	lr, r6, r2
 8092fea:	eb75 0e03 	sbcs.w	lr, r5, r3
 8092fee:	bf22      	ittt	cs
 8092ff0:	1ab6      	subcs	r6, r6, r2
 8092ff2:	4675      	movcs	r5, lr
 8092ff4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8092ff8:	ea55 0e06 	orrs.w	lr, r5, r6
 8092ffc:	d018      	beq.n	8093030 <__aeabi_ddiv+0x114>
 8092ffe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8093002:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8093006:	ea4f 1606 	mov.w	r6, r6, lsl #4
 809300a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 809300e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8093012:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8093016:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 809301a:	d1c0      	bne.n	8092f9e <__aeabi_ddiv+0x82>
 809301c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8093020:	d10b      	bne.n	809303a <__aeabi_ddiv+0x11e>
 8093022:	ea41 0100 	orr.w	r1, r1, r0
 8093026:	f04f 0000 	mov.w	r0, #0
 809302a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 809302e:	e7b6      	b.n	8092f9e <__aeabi_ddiv+0x82>
 8093030:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8093034:	bf04      	itt	eq
 8093036:	4301      	orreq	r1, r0
 8093038:	2000      	moveq	r0, #0
 809303a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 809303e:	bf88      	it	hi
 8093040:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8093044:	f63f aeaf 	bhi.w	8092da6 <__aeabi_dmul+0xde>
 8093048:	ebb5 0c03 	subs.w	ip, r5, r3
 809304c:	bf04      	itt	eq
 809304e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8093052:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8093056:	f150 0000 	adcs.w	r0, r0, #0
 809305a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 809305e:	bd70      	pop	{r4, r5, r6, pc}
 8093060:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8093064:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8093068:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 809306c:	bfc2      	ittt	gt
 809306e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8093072:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8093076:	bd70      	popgt	{r4, r5, r6, pc}
 8093078:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 809307c:	f04f 0e00 	mov.w	lr, #0
 8093080:	3c01      	subs	r4, #1
 8093082:	e690      	b.n	8092da6 <__aeabi_dmul+0xde>
 8093084:	ea45 0e06 	orr.w	lr, r5, r6
 8093088:	e68d      	b.n	8092da6 <__aeabi_dmul+0xde>
 809308a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 809308e:	ea94 0f0c 	teq	r4, ip
 8093092:	bf08      	it	eq
 8093094:	ea95 0f0c 	teqeq	r5, ip
 8093098:	f43f af3b 	beq.w	8092f12 <__aeabi_dmul+0x24a>
 809309c:	ea94 0f0c 	teq	r4, ip
 80930a0:	d10a      	bne.n	80930b8 <__aeabi_ddiv+0x19c>
 80930a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80930a6:	f47f af34 	bne.w	8092f12 <__aeabi_dmul+0x24a>
 80930aa:	ea95 0f0c 	teq	r5, ip
 80930ae:	f47f af25 	bne.w	8092efc <__aeabi_dmul+0x234>
 80930b2:	4610      	mov	r0, r2
 80930b4:	4619      	mov	r1, r3
 80930b6:	e72c      	b.n	8092f12 <__aeabi_dmul+0x24a>
 80930b8:	ea95 0f0c 	teq	r5, ip
 80930bc:	d106      	bne.n	80930cc <__aeabi_ddiv+0x1b0>
 80930be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80930c2:	f43f aefd 	beq.w	8092ec0 <__aeabi_dmul+0x1f8>
 80930c6:	4610      	mov	r0, r2
 80930c8:	4619      	mov	r1, r3
 80930ca:	e722      	b.n	8092f12 <__aeabi_dmul+0x24a>
 80930cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80930d0:	bf18      	it	ne
 80930d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80930d6:	f47f aec5 	bne.w	8092e64 <__aeabi_dmul+0x19c>
 80930da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80930de:	f47f af0d 	bne.w	8092efc <__aeabi_dmul+0x234>
 80930e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80930e6:	f47f aeeb 	bne.w	8092ec0 <__aeabi_dmul+0x1f8>
 80930ea:	e712      	b.n	8092f12 <__aeabi_dmul+0x24a>

080930ec <__gedf2>:
 80930ec:	f04f 3cff 	mov.w	ip, #4294967295
 80930f0:	e006      	b.n	8093100 <__cmpdf2+0x4>
 80930f2:	bf00      	nop

080930f4 <__ledf2>:
 80930f4:	f04f 0c01 	mov.w	ip, #1
 80930f8:	e002      	b.n	8093100 <__cmpdf2+0x4>
 80930fa:	bf00      	nop

080930fc <__cmpdf2>:
 80930fc:	f04f 0c01 	mov.w	ip, #1
 8093100:	f84d cd04 	str.w	ip, [sp, #-4]!
 8093104:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8093108:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 809310c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8093110:	bf18      	it	ne
 8093112:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8093116:	d01b      	beq.n	8093150 <__cmpdf2+0x54>
 8093118:	b001      	add	sp, #4
 809311a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 809311e:	bf0c      	ite	eq
 8093120:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8093124:	ea91 0f03 	teqne	r1, r3
 8093128:	bf02      	ittt	eq
 809312a:	ea90 0f02 	teqeq	r0, r2
 809312e:	2000      	moveq	r0, #0
 8093130:	4770      	bxeq	lr
 8093132:	f110 0f00 	cmn.w	r0, #0
 8093136:	ea91 0f03 	teq	r1, r3
 809313a:	bf58      	it	pl
 809313c:	4299      	cmppl	r1, r3
 809313e:	bf08      	it	eq
 8093140:	4290      	cmpeq	r0, r2
 8093142:	bf2c      	ite	cs
 8093144:	17d8      	asrcs	r0, r3, #31
 8093146:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 809314a:	f040 0001 	orr.w	r0, r0, #1
 809314e:	4770      	bx	lr
 8093150:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8093154:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8093158:	d102      	bne.n	8093160 <__cmpdf2+0x64>
 809315a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 809315e:	d107      	bne.n	8093170 <__cmpdf2+0x74>
 8093160:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8093164:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8093168:	d1d6      	bne.n	8093118 <__cmpdf2+0x1c>
 809316a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 809316e:	d0d3      	beq.n	8093118 <__cmpdf2+0x1c>
 8093170:	f85d 0b04 	ldr.w	r0, [sp], #4
 8093174:	4770      	bx	lr
 8093176:	bf00      	nop

08093178 <__aeabi_cdrcmple>:
 8093178:	4684      	mov	ip, r0
 809317a:	4610      	mov	r0, r2
 809317c:	4662      	mov	r2, ip
 809317e:	468c      	mov	ip, r1
 8093180:	4619      	mov	r1, r3
 8093182:	4663      	mov	r3, ip
 8093184:	e000      	b.n	8093188 <__aeabi_cdcmpeq>
 8093186:	bf00      	nop

08093188 <__aeabi_cdcmpeq>:
 8093188:	b501      	push	{r0, lr}
 809318a:	f7ff ffb7 	bl	80930fc <__cmpdf2>
 809318e:	2800      	cmp	r0, #0
 8093190:	bf48      	it	mi
 8093192:	f110 0f00 	cmnmi.w	r0, #0
 8093196:	bd01      	pop	{r0, pc}

08093198 <__aeabi_dcmpeq>:
 8093198:	f84d ed08 	str.w	lr, [sp, #-8]!
 809319c:	f7ff fff4 	bl	8093188 <__aeabi_cdcmpeq>
 80931a0:	bf0c      	ite	eq
 80931a2:	2001      	moveq	r0, #1
 80931a4:	2000      	movne	r0, #0
 80931a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80931aa:	bf00      	nop

080931ac <__aeabi_dcmplt>:
 80931ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80931b0:	f7ff ffea 	bl	8093188 <__aeabi_cdcmpeq>
 80931b4:	bf34      	ite	cc
 80931b6:	2001      	movcc	r0, #1
 80931b8:	2000      	movcs	r0, #0
 80931ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80931be:	bf00      	nop

080931c0 <__aeabi_dcmple>:
 80931c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80931c4:	f7ff ffe0 	bl	8093188 <__aeabi_cdcmpeq>
 80931c8:	bf94      	ite	ls
 80931ca:	2001      	movls	r0, #1
 80931cc:	2000      	movhi	r0, #0
 80931ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80931d2:	bf00      	nop

080931d4 <__aeabi_dcmpge>:
 80931d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80931d8:	f7ff ffce 	bl	8093178 <__aeabi_cdrcmple>
 80931dc:	bf94      	ite	ls
 80931de:	2001      	movls	r0, #1
 80931e0:	2000      	movhi	r0, #0
 80931e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80931e6:	bf00      	nop

080931e8 <__aeabi_dcmpgt>:
 80931e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80931ec:	f7ff ffc4 	bl	8093178 <__aeabi_cdrcmple>
 80931f0:	bf34      	ite	cc
 80931f2:	2001      	movcc	r0, #1
 80931f4:	2000      	movcs	r0, #0
 80931f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80931fa:	bf00      	nop

080931fc <__aeabi_dcmpun>:
 80931fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8093200:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8093204:	d102      	bne.n	809320c <__aeabi_dcmpun+0x10>
 8093206:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 809320a:	d10a      	bne.n	8093222 <__aeabi_dcmpun+0x26>
 809320c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8093210:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8093214:	d102      	bne.n	809321c <__aeabi_dcmpun+0x20>
 8093216:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 809321a:	d102      	bne.n	8093222 <__aeabi_dcmpun+0x26>
 809321c:	f04f 0000 	mov.w	r0, #0
 8093220:	4770      	bx	lr
 8093222:	f04f 0001 	mov.w	r0, #1
 8093226:	4770      	bx	lr

08093228 <__aeabi_d2iz>:
 8093228:	ea4f 0241 	mov.w	r2, r1, lsl #1
 809322c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8093230:	d215      	bcs.n	809325e <__aeabi_d2iz+0x36>
 8093232:	d511      	bpl.n	8093258 <__aeabi_d2iz+0x30>
 8093234:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8093238:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 809323c:	d912      	bls.n	8093264 <__aeabi_d2iz+0x3c>
 809323e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8093242:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8093246:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 809324a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 809324e:	fa23 f002 	lsr.w	r0, r3, r2
 8093252:	bf18      	it	ne
 8093254:	4240      	negne	r0, r0
 8093256:	4770      	bx	lr
 8093258:	f04f 0000 	mov.w	r0, #0
 809325c:	4770      	bx	lr
 809325e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8093262:	d105      	bne.n	8093270 <__aeabi_d2iz+0x48>
 8093264:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8093268:	bf08      	it	eq
 809326a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 809326e:	4770      	bx	lr
 8093270:	f04f 0000 	mov.w	r0, #0
 8093274:	4770      	bx	lr
 8093276:	bf00      	nop

08093278 <__aeabi_d2uiz>:
 8093278:	004a      	lsls	r2, r1, #1
 809327a:	d211      	bcs.n	80932a0 <__aeabi_d2uiz+0x28>
 809327c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8093280:	d211      	bcs.n	80932a6 <__aeabi_d2uiz+0x2e>
 8093282:	d50d      	bpl.n	80932a0 <__aeabi_d2uiz+0x28>
 8093284:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8093288:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 809328c:	d40e      	bmi.n	80932ac <__aeabi_d2uiz+0x34>
 809328e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8093292:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8093296:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 809329a:	fa23 f002 	lsr.w	r0, r3, r2
 809329e:	4770      	bx	lr
 80932a0:	f04f 0000 	mov.w	r0, #0
 80932a4:	4770      	bx	lr
 80932a6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80932aa:	d102      	bne.n	80932b2 <__aeabi_d2uiz+0x3a>
 80932ac:	f04f 30ff 	mov.w	r0, #4294967295
 80932b0:	4770      	bx	lr
 80932b2:	f04f 0000 	mov.w	r0, #0
 80932b6:	4770      	bx	lr

080932b8 <__aeabi_d2f>:
 80932b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80932bc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80932c0:	bf24      	itt	cs
 80932c2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80932c6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80932ca:	d90d      	bls.n	80932e8 <__aeabi_d2f+0x30>
 80932cc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80932d0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80932d4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80932d8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80932dc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80932e0:	bf08      	it	eq
 80932e2:	f020 0001 	biceq.w	r0, r0, #1
 80932e6:	4770      	bx	lr
 80932e8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80932ec:	d121      	bne.n	8093332 <__aeabi_d2f+0x7a>
 80932ee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80932f2:	bfbc      	itt	lt
 80932f4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80932f8:	4770      	bxlt	lr
 80932fa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80932fe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8093302:	f1c2 0218 	rsb	r2, r2, #24
 8093306:	f1c2 0c20 	rsb	ip, r2, #32
 809330a:	fa10 f30c 	lsls.w	r3, r0, ip
 809330e:	fa20 f002 	lsr.w	r0, r0, r2
 8093312:	bf18      	it	ne
 8093314:	f040 0001 	orrne.w	r0, r0, #1
 8093318:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 809331c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8093320:	fa03 fc0c 	lsl.w	ip, r3, ip
 8093324:	ea40 000c 	orr.w	r0, r0, ip
 8093328:	fa23 f302 	lsr.w	r3, r3, r2
 809332c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8093330:	e7cc      	b.n	80932cc <__aeabi_d2f+0x14>
 8093332:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8093336:	d107      	bne.n	8093348 <__aeabi_d2f+0x90>
 8093338:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 809333c:	bf1e      	ittt	ne
 809333e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8093342:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8093346:	4770      	bxne	lr
 8093348:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 809334c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8093350:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8093354:	4770      	bx	lr
 8093356:	bf00      	nop

08093358 <__aeabi_frsub>:
 8093358:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 809335c:	e002      	b.n	8093364 <__addsf3>
 809335e:	bf00      	nop

08093360 <__aeabi_fsub>:
 8093360:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08093364 <__addsf3>:
 8093364:	0042      	lsls	r2, r0, #1
 8093366:	bf1f      	itttt	ne
 8093368:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 809336c:	ea92 0f03 	teqne	r2, r3
 8093370:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8093374:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8093378:	d06a      	beq.n	8093450 <__addsf3+0xec>
 809337a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 809337e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8093382:	bfc1      	itttt	gt
 8093384:	18d2      	addgt	r2, r2, r3
 8093386:	4041      	eorgt	r1, r0
 8093388:	4048      	eorgt	r0, r1
 809338a:	4041      	eorgt	r1, r0
 809338c:	bfb8      	it	lt
 809338e:	425b      	neglt	r3, r3
 8093390:	2b19      	cmp	r3, #25
 8093392:	bf88      	it	hi
 8093394:	4770      	bxhi	lr
 8093396:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 809339a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 809339e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80933a2:	bf18      	it	ne
 80933a4:	4240      	negne	r0, r0
 80933a6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80933aa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80933ae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80933b2:	bf18      	it	ne
 80933b4:	4249      	negne	r1, r1
 80933b6:	ea92 0f03 	teq	r2, r3
 80933ba:	d03f      	beq.n	809343c <__addsf3+0xd8>
 80933bc:	f1a2 0201 	sub.w	r2, r2, #1
 80933c0:	fa41 fc03 	asr.w	ip, r1, r3
 80933c4:	eb10 000c 	adds.w	r0, r0, ip
 80933c8:	f1c3 0320 	rsb	r3, r3, #32
 80933cc:	fa01 f103 	lsl.w	r1, r1, r3
 80933d0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80933d4:	d502      	bpl.n	80933dc <__addsf3+0x78>
 80933d6:	4249      	negs	r1, r1
 80933d8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80933dc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80933e0:	d313      	bcc.n	809340a <__addsf3+0xa6>
 80933e2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80933e6:	d306      	bcc.n	80933f6 <__addsf3+0x92>
 80933e8:	0840      	lsrs	r0, r0, #1
 80933ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80933ee:	f102 0201 	add.w	r2, r2, #1
 80933f2:	2afe      	cmp	r2, #254	; 0xfe
 80933f4:	d251      	bcs.n	809349a <__addsf3+0x136>
 80933f6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80933fa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80933fe:	bf08      	it	eq
 8093400:	f020 0001 	biceq.w	r0, r0, #1
 8093404:	ea40 0003 	orr.w	r0, r0, r3
 8093408:	4770      	bx	lr
 809340a:	0049      	lsls	r1, r1, #1
 809340c:	eb40 0000 	adc.w	r0, r0, r0
 8093410:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8093414:	f1a2 0201 	sub.w	r2, r2, #1
 8093418:	d1ed      	bne.n	80933f6 <__addsf3+0x92>
 809341a:	fab0 fc80 	clz	ip, r0
 809341e:	f1ac 0c08 	sub.w	ip, ip, #8
 8093422:	ebb2 020c 	subs.w	r2, r2, ip
 8093426:	fa00 f00c 	lsl.w	r0, r0, ip
 809342a:	bfaa      	itet	ge
 809342c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8093430:	4252      	neglt	r2, r2
 8093432:	4318      	orrge	r0, r3
 8093434:	bfbc      	itt	lt
 8093436:	40d0      	lsrlt	r0, r2
 8093438:	4318      	orrlt	r0, r3
 809343a:	4770      	bx	lr
 809343c:	f092 0f00 	teq	r2, #0
 8093440:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8093444:	bf06      	itte	eq
 8093446:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 809344a:	3201      	addeq	r2, #1
 809344c:	3b01      	subne	r3, #1
 809344e:	e7b5      	b.n	80933bc <__addsf3+0x58>
 8093450:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8093454:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8093458:	bf18      	it	ne
 809345a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 809345e:	d021      	beq.n	80934a4 <__addsf3+0x140>
 8093460:	ea92 0f03 	teq	r2, r3
 8093464:	d004      	beq.n	8093470 <__addsf3+0x10c>
 8093466:	f092 0f00 	teq	r2, #0
 809346a:	bf08      	it	eq
 809346c:	4608      	moveq	r0, r1
 809346e:	4770      	bx	lr
 8093470:	ea90 0f01 	teq	r0, r1
 8093474:	bf1c      	itt	ne
 8093476:	2000      	movne	r0, #0
 8093478:	4770      	bxne	lr
 809347a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 809347e:	d104      	bne.n	809348a <__addsf3+0x126>
 8093480:	0040      	lsls	r0, r0, #1
 8093482:	bf28      	it	cs
 8093484:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8093488:	4770      	bx	lr
 809348a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 809348e:	bf3c      	itt	cc
 8093490:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8093494:	4770      	bxcc	lr
 8093496:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 809349a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 809349e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80934a2:	4770      	bx	lr
 80934a4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80934a8:	bf16      	itet	ne
 80934aa:	4608      	movne	r0, r1
 80934ac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80934b0:	4601      	movne	r1, r0
 80934b2:	0242      	lsls	r2, r0, #9
 80934b4:	bf06      	itte	eq
 80934b6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80934ba:	ea90 0f01 	teqeq	r0, r1
 80934be:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80934c2:	4770      	bx	lr

080934c4 <__aeabi_ui2f>:
 80934c4:	f04f 0300 	mov.w	r3, #0
 80934c8:	e004      	b.n	80934d4 <__aeabi_i2f+0x8>
 80934ca:	bf00      	nop

080934cc <__aeabi_i2f>:
 80934cc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80934d0:	bf48      	it	mi
 80934d2:	4240      	negmi	r0, r0
 80934d4:	ea5f 0c00 	movs.w	ip, r0
 80934d8:	bf08      	it	eq
 80934da:	4770      	bxeq	lr
 80934dc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80934e0:	4601      	mov	r1, r0
 80934e2:	f04f 0000 	mov.w	r0, #0
 80934e6:	e01c      	b.n	8093522 <__aeabi_l2f+0x2a>

080934e8 <__aeabi_ul2f>:
 80934e8:	ea50 0201 	orrs.w	r2, r0, r1
 80934ec:	bf08      	it	eq
 80934ee:	4770      	bxeq	lr
 80934f0:	f04f 0300 	mov.w	r3, #0
 80934f4:	e00a      	b.n	809350c <__aeabi_l2f+0x14>
 80934f6:	bf00      	nop

080934f8 <__aeabi_l2f>:
 80934f8:	ea50 0201 	orrs.w	r2, r0, r1
 80934fc:	bf08      	it	eq
 80934fe:	4770      	bxeq	lr
 8093500:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8093504:	d502      	bpl.n	809350c <__aeabi_l2f+0x14>
 8093506:	4240      	negs	r0, r0
 8093508:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 809350c:	ea5f 0c01 	movs.w	ip, r1
 8093510:	bf02      	ittt	eq
 8093512:	4684      	moveq	ip, r0
 8093514:	4601      	moveq	r1, r0
 8093516:	2000      	moveq	r0, #0
 8093518:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 809351c:	bf08      	it	eq
 809351e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8093522:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8093526:	fabc f28c 	clz	r2, ip
 809352a:	3a08      	subs	r2, #8
 809352c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8093530:	db10      	blt.n	8093554 <__aeabi_l2f+0x5c>
 8093532:	fa01 fc02 	lsl.w	ip, r1, r2
 8093536:	4463      	add	r3, ip
 8093538:	fa00 fc02 	lsl.w	ip, r0, r2
 809353c:	f1c2 0220 	rsb	r2, r2, #32
 8093540:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8093544:	fa20 f202 	lsr.w	r2, r0, r2
 8093548:	eb43 0002 	adc.w	r0, r3, r2
 809354c:	bf08      	it	eq
 809354e:	f020 0001 	biceq.w	r0, r0, #1
 8093552:	4770      	bx	lr
 8093554:	f102 0220 	add.w	r2, r2, #32
 8093558:	fa01 fc02 	lsl.w	ip, r1, r2
 809355c:	f1c2 0220 	rsb	r2, r2, #32
 8093560:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8093564:	fa21 f202 	lsr.w	r2, r1, r2
 8093568:	eb43 0002 	adc.w	r0, r3, r2
 809356c:	bf08      	it	eq
 809356e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8093572:	4770      	bx	lr

08093574 <__aeabi_fmul>:
 8093574:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8093578:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 809357c:	bf1e      	ittt	ne
 809357e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8093582:	ea92 0f0c 	teqne	r2, ip
 8093586:	ea93 0f0c 	teqne	r3, ip
 809358a:	d06f      	beq.n	809366c <__aeabi_fmul+0xf8>
 809358c:	441a      	add	r2, r3
 809358e:	ea80 0c01 	eor.w	ip, r0, r1
 8093592:	0240      	lsls	r0, r0, #9
 8093594:	bf18      	it	ne
 8093596:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 809359a:	d01e      	beq.n	80935da <__aeabi_fmul+0x66>
 809359c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80935a0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80935a4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80935a8:	fba0 3101 	umull	r3, r1, r0, r1
 80935ac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80935b0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80935b4:	bf3e      	ittt	cc
 80935b6:	0049      	lslcc	r1, r1, #1
 80935b8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80935bc:	005b      	lslcc	r3, r3, #1
 80935be:	ea40 0001 	orr.w	r0, r0, r1
 80935c2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80935c6:	2afd      	cmp	r2, #253	; 0xfd
 80935c8:	d81d      	bhi.n	8093606 <__aeabi_fmul+0x92>
 80935ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80935ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80935d2:	bf08      	it	eq
 80935d4:	f020 0001 	biceq.w	r0, r0, #1
 80935d8:	4770      	bx	lr
 80935da:	f090 0f00 	teq	r0, #0
 80935de:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80935e2:	bf08      	it	eq
 80935e4:	0249      	lsleq	r1, r1, #9
 80935e6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80935ea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80935ee:	3a7f      	subs	r2, #127	; 0x7f
 80935f0:	bfc2      	ittt	gt
 80935f2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80935f6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80935fa:	4770      	bxgt	lr
 80935fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8093600:	f04f 0300 	mov.w	r3, #0
 8093604:	3a01      	subs	r2, #1
 8093606:	dc5d      	bgt.n	80936c4 <__aeabi_fmul+0x150>
 8093608:	f112 0f19 	cmn.w	r2, #25
 809360c:	bfdc      	itt	le
 809360e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8093612:	4770      	bxle	lr
 8093614:	f1c2 0200 	rsb	r2, r2, #0
 8093618:	0041      	lsls	r1, r0, #1
 809361a:	fa21 f102 	lsr.w	r1, r1, r2
 809361e:	f1c2 0220 	rsb	r2, r2, #32
 8093622:	fa00 fc02 	lsl.w	ip, r0, r2
 8093626:	ea5f 0031 	movs.w	r0, r1, rrx
 809362a:	f140 0000 	adc.w	r0, r0, #0
 809362e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8093632:	bf08      	it	eq
 8093634:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8093638:	4770      	bx	lr
 809363a:	f092 0f00 	teq	r2, #0
 809363e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8093642:	bf02      	ittt	eq
 8093644:	0040      	lsleq	r0, r0, #1
 8093646:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 809364a:	3a01      	subeq	r2, #1
 809364c:	d0f9      	beq.n	8093642 <__aeabi_fmul+0xce>
 809364e:	ea40 000c 	orr.w	r0, r0, ip
 8093652:	f093 0f00 	teq	r3, #0
 8093656:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 809365a:	bf02      	ittt	eq
 809365c:	0049      	lsleq	r1, r1, #1
 809365e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8093662:	3b01      	subeq	r3, #1
 8093664:	d0f9      	beq.n	809365a <__aeabi_fmul+0xe6>
 8093666:	ea41 010c 	orr.w	r1, r1, ip
 809366a:	e78f      	b.n	809358c <__aeabi_fmul+0x18>
 809366c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8093670:	ea92 0f0c 	teq	r2, ip
 8093674:	bf18      	it	ne
 8093676:	ea93 0f0c 	teqne	r3, ip
 809367a:	d00a      	beq.n	8093692 <__aeabi_fmul+0x11e>
 809367c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8093680:	bf18      	it	ne
 8093682:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8093686:	d1d8      	bne.n	809363a <__aeabi_fmul+0xc6>
 8093688:	ea80 0001 	eor.w	r0, r0, r1
 809368c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8093690:	4770      	bx	lr
 8093692:	f090 0f00 	teq	r0, #0
 8093696:	bf17      	itett	ne
 8093698:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 809369c:	4608      	moveq	r0, r1
 809369e:	f091 0f00 	teqne	r1, #0
 80936a2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80936a6:	d014      	beq.n	80936d2 <__aeabi_fmul+0x15e>
 80936a8:	ea92 0f0c 	teq	r2, ip
 80936ac:	d101      	bne.n	80936b2 <__aeabi_fmul+0x13e>
 80936ae:	0242      	lsls	r2, r0, #9
 80936b0:	d10f      	bne.n	80936d2 <__aeabi_fmul+0x15e>
 80936b2:	ea93 0f0c 	teq	r3, ip
 80936b6:	d103      	bne.n	80936c0 <__aeabi_fmul+0x14c>
 80936b8:	024b      	lsls	r3, r1, #9
 80936ba:	bf18      	it	ne
 80936bc:	4608      	movne	r0, r1
 80936be:	d108      	bne.n	80936d2 <__aeabi_fmul+0x15e>
 80936c0:	ea80 0001 	eor.w	r0, r0, r1
 80936c4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80936c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80936cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80936d0:	4770      	bx	lr
 80936d2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80936d6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80936da:	4770      	bx	lr

080936dc <__aeabi_fdiv>:
 80936dc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80936e0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80936e4:	bf1e      	ittt	ne
 80936e6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80936ea:	ea92 0f0c 	teqne	r2, ip
 80936ee:	ea93 0f0c 	teqne	r3, ip
 80936f2:	d069      	beq.n	80937c8 <__aeabi_fdiv+0xec>
 80936f4:	eba2 0203 	sub.w	r2, r2, r3
 80936f8:	ea80 0c01 	eor.w	ip, r0, r1
 80936fc:	0249      	lsls	r1, r1, #9
 80936fe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8093702:	d037      	beq.n	8093774 <__aeabi_fdiv+0x98>
 8093704:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8093708:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 809370c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8093710:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8093714:	428b      	cmp	r3, r1
 8093716:	bf38      	it	cc
 8093718:	005b      	lslcc	r3, r3, #1
 809371a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 809371e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8093722:	428b      	cmp	r3, r1
 8093724:	bf24      	itt	cs
 8093726:	1a5b      	subcs	r3, r3, r1
 8093728:	ea40 000c 	orrcs.w	r0, r0, ip
 809372c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8093730:	bf24      	itt	cs
 8093732:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8093736:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 809373a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 809373e:	bf24      	itt	cs
 8093740:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8093744:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8093748:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 809374c:	bf24      	itt	cs
 809374e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8093752:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8093756:	011b      	lsls	r3, r3, #4
 8093758:	bf18      	it	ne
 809375a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 809375e:	d1e0      	bne.n	8093722 <__aeabi_fdiv+0x46>
 8093760:	2afd      	cmp	r2, #253	; 0xfd
 8093762:	f63f af50 	bhi.w	8093606 <__aeabi_fmul+0x92>
 8093766:	428b      	cmp	r3, r1
 8093768:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 809376c:	bf08      	it	eq
 809376e:	f020 0001 	biceq.w	r0, r0, #1
 8093772:	4770      	bx	lr
 8093774:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8093778:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 809377c:	327f      	adds	r2, #127	; 0x7f
 809377e:	bfc2      	ittt	gt
 8093780:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8093784:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8093788:	4770      	bxgt	lr
 809378a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 809378e:	f04f 0300 	mov.w	r3, #0
 8093792:	3a01      	subs	r2, #1
 8093794:	e737      	b.n	8093606 <__aeabi_fmul+0x92>
 8093796:	f092 0f00 	teq	r2, #0
 809379a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 809379e:	bf02      	ittt	eq
 80937a0:	0040      	lsleq	r0, r0, #1
 80937a2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80937a6:	3a01      	subeq	r2, #1
 80937a8:	d0f9      	beq.n	809379e <__aeabi_fdiv+0xc2>
 80937aa:	ea40 000c 	orr.w	r0, r0, ip
 80937ae:	f093 0f00 	teq	r3, #0
 80937b2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80937b6:	bf02      	ittt	eq
 80937b8:	0049      	lsleq	r1, r1, #1
 80937ba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80937be:	3b01      	subeq	r3, #1
 80937c0:	d0f9      	beq.n	80937b6 <__aeabi_fdiv+0xda>
 80937c2:	ea41 010c 	orr.w	r1, r1, ip
 80937c6:	e795      	b.n	80936f4 <__aeabi_fdiv+0x18>
 80937c8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80937cc:	ea92 0f0c 	teq	r2, ip
 80937d0:	d108      	bne.n	80937e4 <__aeabi_fdiv+0x108>
 80937d2:	0242      	lsls	r2, r0, #9
 80937d4:	f47f af7d 	bne.w	80936d2 <__aeabi_fmul+0x15e>
 80937d8:	ea93 0f0c 	teq	r3, ip
 80937dc:	f47f af70 	bne.w	80936c0 <__aeabi_fmul+0x14c>
 80937e0:	4608      	mov	r0, r1
 80937e2:	e776      	b.n	80936d2 <__aeabi_fmul+0x15e>
 80937e4:	ea93 0f0c 	teq	r3, ip
 80937e8:	d104      	bne.n	80937f4 <__aeabi_fdiv+0x118>
 80937ea:	024b      	lsls	r3, r1, #9
 80937ec:	f43f af4c 	beq.w	8093688 <__aeabi_fmul+0x114>
 80937f0:	4608      	mov	r0, r1
 80937f2:	e76e      	b.n	80936d2 <__aeabi_fmul+0x15e>
 80937f4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80937f8:	bf18      	it	ne
 80937fa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80937fe:	d1ca      	bne.n	8093796 <__aeabi_fdiv+0xba>
 8093800:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8093804:	f47f af5c 	bne.w	80936c0 <__aeabi_fmul+0x14c>
 8093808:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 809380c:	f47f af3c 	bne.w	8093688 <__aeabi_fmul+0x114>
 8093810:	e75f      	b.n	80936d2 <__aeabi_fmul+0x15e>
 8093812:	bf00      	nop

08093814 <__aeabi_uldivmod>:
 8093814:	b953      	cbnz	r3, 809382c <__aeabi_uldivmod+0x18>
 8093816:	b94a      	cbnz	r2, 809382c <__aeabi_uldivmod+0x18>
 8093818:	2900      	cmp	r1, #0
 809381a:	bf08      	it	eq
 809381c:	2800      	cmpeq	r0, #0
 809381e:	bf1c      	itt	ne
 8093820:	f04f 31ff 	movne.w	r1, #4294967295
 8093824:	f04f 30ff 	movne.w	r0, #4294967295
 8093828:	f000 b982 	b.w	8093b30 <__aeabi_idiv0>
 809382c:	f1ad 0c08 	sub.w	ip, sp, #8
 8093830:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8093834:	f000 f806 	bl	8093844 <__udivmoddi4>
 8093838:	f8dd e004 	ldr.w	lr, [sp, #4]
 809383c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8093840:	b004      	add	sp, #16
 8093842:	4770      	bx	lr

08093844 <__udivmoddi4>:
 8093844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8093848:	468c      	mov	ip, r1
 809384a:	460c      	mov	r4, r1
 809384c:	4605      	mov	r5, r0
 809384e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8093850:	2b00      	cmp	r3, #0
 8093852:	d14f      	bne.n	80938f4 <__udivmoddi4+0xb0>
 8093854:	428a      	cmp	r2, r1
 8093856:	4617      	mov	r7, r2
 8093858:	d96b      	bls.n	8093932 <__udivmoddi4+0xee>
 809385a:	fab2 fe82 	clz	lr, r2
 809385e:	f1be 0f00 	cmp.w	lr, #0
 8093862:	d00b      	beq.n	809387c <__udivmoddi4+0x38>
 8093864:	f1ce 0520 	rsb	r5, lr, #32
 8093868:	fa20 f505 	lsr.w	r5, r0, r5
 809386c:	fa01 f30e 	lsl.w	r3, r1, lr
 8093870:	ea45 0c03 	orr.w	ip, r5, r3
 8093874:	fa02 f70e 	lsl.w	r7, r2, lr
 8093878:	fa00 f50e 	lsl.w	r5, r0, lr
 809387c:	0c39      	lsrs	r1, r7, #16
 809387e:	fbbc f0f1 	udiv	r0, ip, r1
 8093882:	b2ba      	uxth	r2, r7
 8093884:	fb01 c310 	mls	r3, r1, r0, ip
 8093888:	fb00 f802 	mul.w	r8, r0, r2
 809388c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8093890:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 8093894:	45a0      	cmp	r8, r4
 8093896:	d909      	bls.n	80938ac <__udivmoddi4+0x68>
 8093898:	19e4      	adds	r4, r4, r7
 809389a:	f100 33ff 	add.w	r3, r0, #4294967295
 809389e:	f080 8128 	bcs.w	8093af2 <__udivmoddi4+0x2ae>
 80938a2:	45a0      	cmp	r8, r4
 80938a4:	f240 8125 	bls.w	8093af2 <__udivmoddi4+0x2ae>
 80938a8:	3802      	subs	r0, #2
 80938aa:	443c      	add	r4, r7
 80938ac:	ebc8 0404 	rsb	r4, r8, r4
 80938b0:	fbb4 f3f1 	udiv	r3, r4, r1
 80938b4:	fb01 4c13 	mls	ip, r1, r3, r4
 80938b8:	fb03 f202 	mul.w	r2, r3, r2
 80938bc:	b2ac      	uxth	r4, r5
 80938be:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 80938c2:	428a      	cmp	r2, r1
 80938c4:	d909      	bls.n	80938da <__udivmoddi4+0x96>
 80938c6:	19c9      	adds	r1, r1, r7
 80938c8:	f103 34ff 	add.w	r4, r3, #4294967295
 80938cc:	f080 810f 	bcs.w	8093aee <__udivmoddi4+0x2aa>
 80938d0:	428a      	cmp	r2, r1
 80938d2:	f240 810c 	bls.w	8093aee <__udivmoddi4+0x2aa>
 80938d6:	3b02      	subs	r3, #2
 80938d8:	4439      	add	r1, r7
 80938da:	1a8a      	subs	r2, r1, r2
 80938dc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80938e0:	2100      	movs	r1, #0
 80938e2:	2e00      	cmp	r6, #0
 80938e4:	d063      	beq.n	80939ae <__udivmoddi4+0x16a>
 80938e6:	fa22 f20e 	lsr.w	r2, r2, lr
 80938ea:	2300      	movs	r3, #0
 80938ec:	e886 000c 	stmia.w	r6, {r2, r3}
 80938f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80938f4:	428b      	cmp	r3, r1
 80938f6:	d907      	bls.n	8093908 <__udivmoddi4+0xc4>
 80938f8:	2e00      	cmp	r6, #0
 80938fa:	d056      	beq.n	80939aa <__udivmoddi4+0x166>
 80938fc:	2100      	movs	r1, #0
 80938fe:	e886 0011 	stmia.w	r6, {r0, r4}
 8093902:	4608      	mov	r0, r1
 8093904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8093908:	fab3 f183 	clz	r1, r3
 809390c:	2900      	cmp	r1, #0
 809390e:	f040 8093 	bne.w	8093a38 <__udivmoddi4+0x1f4>
 8093912:	42a3      	cmp	r3, r4
 8093914:	d302      	bcc.n	809391c <__udivmoddi4+0xd8>
 8093916:	4282      	cmp	r2, r0
 8093918:	f200 80fe 	bhi.w	8093b18 <__udivmoddi4+0x2d4>
 809391c:	1a85      	subs	r5, r0, r2
 809391e:	eb64 0303 	sbc.w	r3, r4, r3
 8093922:	469c      	mov	ip, r3
 8093924:	2001      	movs	r0, #1
 8093926:	2e00      	cmp	r6, #0
 8093928:	d041      	beq.n	80939ae <__udivmoddi4+0x16a>
 809392a:	e886 1020 	stmia.w	r6, {r5, ip}
 809392e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8093932:	b912      	cbnz	r2, 809393a <__udivmoddi4+0xf6>
 8093934:	2701      	movs	r7, #1
 8093936:	fbb7 f7f2 	udiv	r7, r7, r2
 809393a:	fab7 fe87 	clz	lr, r7
 809393e:	f1be 0f00 	cmp.w	lr, #0
 8093942:	d136      	bne.n	80939b2 <__udivmoddi4+0x16e>
 8093944:	1be4      	subs	r4, r4, r7
 8093946:	ea4f 4817 	mov.w	r8, r7, lsr #16
 809394a:	fa1f f987 	uxth.w	r9, r7
 809394e:	2101      	movs	r1, #1
 8093950:	fbb4 f3f8 	udiv	r3, r4, r8
 8093954:	fb08 4413 	mls	r4, r8, r3, r4
 8093958:	fb09 f203 	mul.w	r2, r9, r3
 809395c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8093960:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 8093964:	42a2      	cmp	r2, r4
 8093966:	d907      	bls.n	8093978 <__udivmoddi4+0x134>
 8093968:	19e4      	adds	r4, r4, r7
 809396a:	f103 30ff 	add.w	r0, r3, #4294967295
 809396e:	d202      	bcs.n	8093976 <__udivmoddi4+0x132>
 8093970:	42a2      	cmp	r2, r4
 8093972:	f200 80d3 	bhi.w	8093b1c <__udivmoddi4+0x2d8>
 8093976:	4603      	mov	r3, r0
 8093978:	1aa4      	subs	r4, r4, r2
 809397a:	fbb4 f0f8 	udiv	r0, r4, r8
 809397e:	fb08 4810 	mls	r8, r8, r0, r4
 8093982:	fb09 f900 	mul.w	r9, r9, r0
 8093986:	b2ac      	uxth	r4, r5
 8093988:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 809398c:	4591      	cmp	r9, r2
 809398e:	d907      	bls.n	80939a0 <__udivmoddi4+0x15c>
 8093990:	19d2      	adds	r2, r2, r7
 8093992:	f100 34ff 	add.w	r4, r0, #4294967295
 8093996:	d202      	bcs.n	809399e <__udivmoddi4+0x15a>
 8093998:	4591      	cmp	r9, r2
 809399a:	f200 80ba 	bhi.w	8093b12 <__udivmoddi4+0x2ce>
 809399e:	4620      	mov	r0, r4
 80939a0:	ebc9 0202 	rsb	r2, r9, r2
 80939a4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80939a8:	e79b      	b.n	80938e2 <__udivmoddi4+0x9e>
 80939aa:	4631      	mov	r1, r6
 80939ac:	4630      	mov	r0, r6
 80939ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80939b2:	fa07 f70e 	lsl.w	r7, r7, lr
 80939b6:	f1ce 0c20 	rsb	ip, lr, #32
 80939ba:	fa24 f30c 	lsr.w	r3, r4, ip
 80939be:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80939c2:	fbb3 faf8 	udiv	sl, r3, r8
 80939c6:	fa1f f987 	uxth.w	r9, r7
 80939ca:	fb08 351a 	mls	r5, r8, sl, r3
 80939ce:	fa20 fc0c 	lsr.w	ip, r0, ip
 80939d2:	fa04 f40e 	lsl.w	r4, r4, lr
 80939d6:	fb0a fb09 	mul.w	fp, sl, r9
 80939da:	ea4c 0c04 	orr.w	ip, ip, r4
 80939de:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80939e2:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 80939e6:	459b      	cmp	fp, r3
 80939e8:	fa00 f50e 	lsl.w	r5, r0, lr
 80939ec:	d90a      	bls.n	8093a04 <__udivmoddi4+0x1c0>
 80939ee:	19db      	adds	r3, r3, r7
 80939f0:	f10a 32ff 	add.w	r2, sl, #4294967295
 80939f4:	f080 808b 	bcs.w	8093b0e <__udivmoddi4+0x2ca>
 80939f8:	459b      	cmp	fp, r3
 80939fa:	f240 8088 	bls.w	8093b0e <__udivmoddi4+0x2ca>
 80939fe:	f1aa 0a02 	sub.w	sl, sl, #2
 8093a02:	443b      	add	r3, r7
 8093a04:	ebcb 0303 	rsb	r3, fp, r3
 8093a08:	fbb3 f0f8 	udiv	r0, r3, r8
 8093a0c:	fb08 3310 	mls	r3, r8, r0, r3
 8093a10:	fb00 f409 	mul.w	r4, r0, r9
 8093a14:	fa1f fc8c 	uxth.w	ip, ip
 8093a18:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 8093a1c:	429c      	cmp	r4, r3
 8093a1e:	d907      	bls.n	8093a30 <__udivmoddi4+0x1ec>
 8093a20:	19db      	adds	r3, r3, r7
 8093a22:	f100 32ff 	add.w	r2, r0, #4294967295
 8093a26:	d26e      	bcs.n	8093b06 <__udivmoddi4+0x2c2>
 8093a28:	429c      	cmp	r4, r3
 8093a2a:	d96c      	bls.n	8093b06 <__udivmoddi4+0x2c2>
 8093a2c:	3802      	subs	r0, #2
 8093a2e:	443b      	add	r3, r7
 8093a30:	1b1c      	subs	r4, r3, r4
 8093a32:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 8093a36:	e78b      	b.n	8093950 <__udivmoddi4+0x10c>
 8093a38:	f1c1 0e20 	rsb	lr, r1, #32
 8093a3c:	408b      	lsls	r3, r1
 8093a3e:	fa22 fc0e 	lsr.w	ip, r2, lr
 8093a42:	ea4c 0c03 	orr.w	ip, ip, r3
 8093a46:	fa24 f70e 	lsr.w	r7, r4, lr
 8093a4a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8093a4e:	fbb7 faf9 	udiv	sl, r7, r9
 8093a52:	fa1f f38c 	uxth.w	r3, ip
 8093a56:	fb09 771a 	mls	r7, r9, sl, r7
 8093a5a:	fa20 f80e 	lsr.w	r8, r0, lr
 8093a5e:	408c      	lsls	r4, r1
 8093a60:	fb0a f503 	mul.w	r5, sl, r3
 8093a64:	ea48 0404 	orr.w	r4, r8, r4
 8093a68:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8093a6c:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 8093a70:	42bd      	cmp	r5, r7
 8093a72:	fa02 f201 	lsl.w	r2, r2, r1
 8093a76:	fa00 fb01 	lsl.w	fp, r0, r1
 8093a7a:	d909      	bls.n	8093a90 <__udivmoddi4+0x24c>
 8093a7c:	eb17 070c 	adds.w	r7, r7, ip
 8093a80:	f10a 30ff 	add.w	r0, sl, #4294967295
 8093a84:	d241      	bcs.n	8093b0a <__udivmoddi4+0x2c6>
 8093a86:	42bd      	cmp	r5, r7
 8093a88:	d93f      	bls.n	8093b0a <__udivmoddi4+0x2c6>
 8093a8a:	f1aa 0a02 	sub.w	sl, sl, #2
 8093a8e:	4467      	add	r7, ip
 8093a90:	1b7f      	subs	r7, r7, r5
 8093a92:	fbb7 f5f9 	udiv	r5, r7, r9
 8093a96:	fb09 7715 	mls	r7, r9, r5, r7
 8093a9a:	fb05 f303 	mul.w	r3, r5, r3
 8093a9e:	b2a4      	uxth	r4, r4
 8093aa0:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8093aa4:	42bb      	cmp	r3, r7
 8093aa6:	d908      	bls.n	8093aba <__udivmoddi4+0x276>
 8093aa8:	eb17 070c 	adds.w	r7, r7, ip
 8093aac:	f105 30ff 	add.w	r0, r5, #4294967295
 8093ab0:	d227      	bcs.n	8093b02 <__udivmoddi4+0x2be>
 8093ab2:	42bb      	cmp	r3, r7
 8093ab4:	d925      	bls.n	8093b02 <__udivmoddi4+0x2be>
 8093ab6:	3d02      	subs	r5, #2
 8093ab8:	4467      	add	r7, ip
 8093aba:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 8093abe:	fba0 8902 	umull	r8, r9, r0, r2
 8093ac2:	1aff      	subs	r7, r7, r3
 8093ac4:	454f      	cmp	r7, r9
 8093ac6:	4645      	mov	r5, r8
 8093ac8:	464c      	mov	r4, r9
 8093aca:	d314      	bcc.n	8093af6 <__udivmoddi4+0x2b2>
 8093acc:	d029      	beq.n	8093b22 <__udivmoddi4+0x2de>
 8093ace:	b366      	cbz	r6, 8093b2a <__udivmoddi4+0x2e6>
 8093ad0:	ebbb 0305 	subs.w	r3, fp, r5
 8093ad4:	eb67 0704 	sbc.w	r7, r7, r4
 8093ad8:	fa07 fe0e 	lsl.w	lr, r7, lr
 8093adc:	40cb      	lsrs	r3, r1
 8093ade:	40cf      	lsrs	r7, r1
 8093ae0:	ea4e 0303 	orr.w	r3, lr, r3
 8093ae4:	e886 0088 	stmia.w	r6, {r3, r7}
 8093ae8:	2100      	movs	r1, #0
 8093aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8093aee:	4623      	mov	r3, r4
 8093af0:	e6f3      	b.n	80938da <__udivmoddi4+0x96>
 8093af2:	4618      	mov	r0, r3
 8093af4:	e6da      	b.n	80938ac <__udivmoddi4+0x68>
 8093af6:	ebb8 0502 	subs.w	r5, r8, r2
 8093afa:	eb69 040c 	sbc.w	r4, r9, ip
 8093afe:	3801      	subs	r0, #1
 8093b00:	e7e5      	b.n	8093ace <__udivmoddi4+0x28a>
 8093b02:	4605      	mov	r5, r0
 8093b04:	e7d9      	b.n	8093aba <__udivmoddi4+0x276>
 8093b06:	4610      	mov	r0, r2
 8093b08:	e792      	b.n	8093a30 <__udivmoddi4+0x1ec>
 8093b0a:	4682      	mov	sl, r0
 8093b0c:	e7c0      	b.n	8093a90 <__udivmoddi4+0x24c>
 8093b0e:	4692      	mov	sl, r2
 8093b10:	e778      	b.n	8093a04 <__udivmoddi4+0x1c0>
 8093b12:	3802      	subs	r0, #2
 8093b14:	443a      	add	r2, r7
 8093b16:	e743      	b.n	80939a0 <__udivmoddi4+0x15c>
 8093b18:	4608      	mov	r0, r1
 8093b1a:	e704      	b.n	8093926 <__udivmoddi4+0xe2>
 8093b1c:	3b02      	subs	r3, #2
 8093b1e:	443c      	add	r4, r7
 8093b20:	e72a      	b.n	8093978 <__udivmoddi4+0x134>
 8093b22:	45c3      	cmp	fp, r8
 8093b24:	d3e7      	bcc.n	8093af6 <__udivmoddi4+0x2b2>
 8093b26:	463c      	mov	r4, r7
 8093b28:	e7d1      	b.n	8093ace <__udivmoddi4+0x28a>
 8093b2a:	4631      	mov	r1, r6
 8093b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08093b30 <__aeabi_idiv0>:
 8093b30:	4770      	bx	lr
 8093b32:	bf00      	nop

08093b34 <calloc>:
 8093b34:	4b02      	ldr	r3, [pc, #8]	; (8093b40 <calloc+0xc>)
 8093b36:	460a      	mov	r2, r1
 8093b38:	4601      	mov	r1, r0
 8093b3a:	6818      	ldr	r0, [r3, #0]
 8093b3c:	f000 b84d 	b.w	8093bda <_calloc_r>
 8093b40:	200004a4 	.word	0x200004a4

08093b44 <__cxa_atexit>:
 8093b44:	b510      	push	{r4, lr}
 8093b46:	4c05      	ldr	r4, [pc, #20]	; (8093b5c <__cxa_atexit+0x18>)
 8093b48:	4613      	mov	r3, r2
 8093b4a:	b12c      	cbz	r4, 8093b58 <__cxa_atexit+0x14>
 8093b4c:	460a      	mov	r2, r1
 8093b4e:	4601      	mov	r1, r0
 8093b50:	2002      	movs	r0, #2
 8093b52:	f3af 8000 	nop.w
 8093b56:	bd10      	pop	{r4, pc}
 8093b58:	4620      	mov	r0, r4
 8093b5a:	bd10      	pop	{r4, pc}
 8093b5c:	00000000 	.word	0x00000000

08093b60 <memcmp>:
 8093b60:	b510      	push	{r4, lr}
 8093b62:	3901      	subs	r1, #1
 8093b64:	4402      	add	r2, r0
 8093b66:	4290      	cmp	r0, r2
 8093b68:	d007      	beq.n	8093b7a <memcmp+0x1a>
 8093b6a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8093b6e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8093b72:	42a3      	cmp	r3, r4
 8093b74:	d0f7      	beq.n	8093b66 <memcmp+0x6>
 8093b76:	1b18      	subs	r0, r3, r4
 8093b78:	bd10      	pop	{r4, pc}
 8093b7a:	2000      	movs	r0, #0
 8093b7c:	bd10      	pop	{r4, pc}

08093b7e <memcpy>:
 8093b7e:	b510      	push	{r4, lr}
 8093b80:	1e43      	subs	r3, r0, #1
 8093b82:	440a      	add	r2, r1
 8093b84:	4291      	cmp	r1, r2
 8093b86:	d004      	beq.n	8093b92 <memcpy+0x14>
 8093b88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8093b8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8093b90:	e7f8      	b.n	8093b84 <memcpy+0x6>
 8093b92:	bd10      	pop	{r4, pc}

08093b94 <memmove>:
 8093b94:	4288      	cmp	r0, r1
 8093b96:	b510      	push	{r4, lr}
 8093b98:	eb01 0302 	add.w	r3, r1, r2
 8093b9c:	d801      	bhi.n	8093ba2 <memmove+0xe>
 8093b9e:	1e42      	subs	r2, r0, #1
 8093ba0:	e00b      	b.n	8093bba <memmove+0x26>
 8093ba2:	4298      	cmp	r0, r3
 8093ba4:	d2fb      	bcs.n	8093b9e <memmove+0xa>
 8093ba6:	1881      	adds	r1, r0, r2
 8093ba8:	1ad2      	subs	r2, r2, r3
 8093baa:	42d3      	cmn	r3, r2
 8093bac:	d004      	beq.n	8093bb8 <memmove+0x24>
 8093bae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8093bb2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8093bb6:	e7f8      	b.n	8093baa <memmove+0x16>
 8093bb8:	bd10      	pop	{r4, pc}
 8093bba:	4299      	cmp	r1, r3
 8093bbc:	d004      	beq.n	8093bc8 <memmove+0x34>
 8093bbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8093bc2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8093bc6:	e7f8      	b.n	8093bba <memmove+0x26>
 8093bc8:	bd10      	pop	{r4, pc}

08093bca <memset>:
 8093bca:	4603      	mov	r3, r0
 8093bcc:	4402      	add	r2, r0
 8093bce:	4293      	cmp	r3, r2
 8093bd0:	d002      	beq.n	8093bd8 <memset+0xe>
 8093bd2:	f803 1b01 	strb.w	r1, [r3], #1
 8093bd6:	e7fa      	b.n	8093bce <memset+0x4>
 8093bd8:	4770      	bx	lr

08093bda <_calloc_r>:
 8093bda:	b538      	push	{r3, r4, r5, lr}
 8093bdc:	fb02 f401 	mul.w	r4, r2, r1
 8093be0:	4621      	mov	r1, r4
 8093be2:	f7fd fcd3 	bl	809158c <_malloc_r>
 8093be6:	4605      	mov	r5, r0
 8093be8:	b118      	cbz	r0, 8093bf2 <_calloc_r+0x18>
 8093bea:	4622      	mov	r2, r4
 8093bec:	2100      	movs	r1, #0
 8093bee:	f7ff ffec 	bl	8093bca <memset>
 8093bf2:	4628      	mov	r0, r5
 8093bf4:	bd38      	pop	{r3, r4, r5, pc}

08093bf6 <strcmp>:
 8093bf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8093bfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8093bfe:	2a01      	cmp	r2, #1
 8093c00:	bf28      	it	cs
 8093c02:	429a      	cmpcs	r2, r3
 8093c04:	d0f7      	beq.n	8093bf6 <strcmp>
 8093c06:	1ad0      	subs	r0, r2, r3
 8093c08:	4770      	bx	lr

08093c0a <strlen>:
 8093c0a:	4603      	mov	r3, r0
 8093c0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8093c10:	2a00      	cmp	r2, #0
 8093c12:	d1fb      	bne.n	8093c0c <strlen+0x2>
 8093c14:	1a18      	subs	r0, r3, r0
 8093c16:	3801      	subs	r0, #1
 8093c18:	4770      	bx	lr

08093c1a <strstr>:
 8093c1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8093c1c:	7803      	ldrb	r3, [r0, #0]
 8093c1e:	b963      	cbnz	r3, 8093c3a <strstr+0x20>
 8093c20:	780b      	ldrb	r3, [r1, #0]
 8093c22:	2b00      	cmp	r3, #0
 8093c24:	bf18      	it	ne
 8093c26:	2000      	movne	r0, #0
 8093c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8093c2a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8093c2e:	b162      	cbz	r2, 8093c4a <strstr+0x30>
 8093c30:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 8093c34:	4630      	mov	r0, r6
 8093c36:	4297      	cmp	r7, r2
 8093c38:	d0f7      	beq.n	8093c2a <strstr+0x10>
 8093c3a:	4603      	mov	r3, r0
 8093c3c:	1c46      	adds	r6, r0, #1
 8093c3e:	7800      	ldrb	r0, [r0, #0]
 8093c40:	b110      	cbz	r0, 8093c48 <strstr+0x2e>
 8093c42:	1e4d      	subs	r5, r1, #1
 8093c44:	1e5c      	subs	r4, r3, #1
 8093c46:	e7f0      	b.n	8093c2a <strstr+0x10>
 8093c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8093c4a:	4618      	mov	r0, r3
 8093c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08093c50 <gettimeofday>:
 8093c50:	4b02      	ldr	r3, [pc, #8]	; (8093c5c <gettimeofday+0xc>)
 8093c52:	460a      	mov	r2, r1
 8093c54:	4601      	mov	r1, r0
 8093c56:	6818      	ldr	r0, [r3, #0]
 8093c58:	f000 b802 	b.w	8093c60 <_gettimeofday_r>
 8093c5c:	200004a4 	.word	0x200004a4

08093c60 <_gettimeofday_r>:
 8093c60:	b538      	push	{r3, r4, r5, lr}
 8093c62:	4c07      	ldr	r4, [pc, #28]	; (8093c80 <_gettimeofday_r+0x20>)
 8093c64:	2300      	movs	r3, #0
 8093c66:	4605      	mov	r5, r0
 8093c68:	4608      	mov	r0, r1
 8093c6a:	4611      	mov	r1, r2
 8093c6c:	6023      	str	r3, [r4, #0]
 8093c6e:	f7f2 fcf2 	bl	8086656 <_gettimeofday>
 8093c72:	1c43      	adds	r3, r0, #1
 8093c74:	d102      	bne.n	8093c7c <_gettimeofday_r+0x1c>
 8093c76:	6823      	ldr	r3, [r4, #0]
 8093c78:	b103      	cbz	r3, 8093c7c <_gettimeofday_r+0x1c>
 8093c7a:	602b      	str	r3, [r5, #0]
 8093c7c:	bd38      	pop	{r3, r4, r5, pc}
 8093c7e:	bf00      	nop
 8093c80:	20004874 	.word	0x20004874

08093c84 <dynalib_user>:
 8093c84:	0808001d 0808005d 08080089 0808008d     ....]...........
 8093c94:	00000000                                ....

08093c98 <_ZTV4File>:
	...
 8093ca0:	080800d7 08080161 0808019f 08080199     ....a...........
 8093cb0:	080800bb 08080179 08080173 0808016d     ....y...s...m...

08093cc0 <_ZTV5SdFat>:
	...
 8093cc8:	080801db 080801d3 080801cb 080801c3     ................
 8093cd8:	00444552 45455247 4c42004e 73004555     RED.GREEN.BLUE.s
 8093ce8:	6b726170 65696c63 6300746e 6e65696c     parkclient.clien
 8093cf8:	6f632074 63656e6e 00646574 6c6c6568     t connected.hell
 8093d08:	6f77206f 00646c72 5474756f 6369706f     o world.outTopic
 8093d18:	73656d2f 65676173 546e6900 6369706f     /message.inTopic
 8093d28:	73656d2f 65676173 73657400 78742e74     /message.test.tx
 8093d38:	706f0074 6e696e65 65742067 742e7473     t.opening test.t
 8093d48:	66207478 7720726f 65746972 69616620     xt for write fai
 8093d58:	0064656c 656c6966 657a6953 6425203a     led.fileSize: %d
 8093d68:	2069000a 6564616d 00746920 65726977     ..i made it.wire
 8093d78:	7373656c 6977742e 2e6f696c 006d6f63     less.twilio.com.
 8093d88:	626d3361 367a6d30 6267656c 692e3873     a3mb0mz6legbs8.i
 8093d98:	752e746f 61652d73 322d7473 616d612e     ot.us-east-2.ama
 8093da8:	616e6f7a 632e7377 43006d6f 72656279     zonaws.com.Cyber
 8093db8:	6f747541 00000000                       Auto....

08093dc0 <_ZL6spiPtr>:
 8093dc0:	20004780 20004790 200047a0              .G. .G. .G. 

08093dcc <_ZTV5SdSpi>:
	...
 8093dd4:	08080fb9 08080fc9 08080fb5 08081045     ............E...
 8093de4:	08081069 08081059 080810ad 65204453     i...Y.......SD e
 8093df4:	726f7272 65646f43 5830203a 58302c00     rrorCode: 0X.,0X
 8093e04:	72726500 203a726f 6e614300 61207427     .error: .Can't a
 8093e14:	73656363 44532073 72616320 44202e64     ccess SD card. D
 8093e24:	6f6e206f 65722074 6d726f66 002e7461     o not reformat..
 8093e34:	63206f4e 2c647261 6f727720 6320676e     No card, wrong c
 8093e44:	20706968 656c6573 70207463 202c6e69     hip select pin, 
 8093e54:	5320726f 70204950 6c626f72 003f6d65     or SPI problem?.
 8093e64:	61766e49 2064696c 6d726f66 202c7461     Invalid format, 
 8093e74:	6f666572 74616d72 2e445320 6e614300     reformat SD..Can
 8093e84:	6f207427 206e6570 746f6f72 72696420     't open root dir
 8093e94:	6f746365 002e7972 65206f4e 726f7272     ectory..No error
 8093ea4:	756f6620 002e646e 514d0600 70647349      found....MQIsdp
 8093eb4:	4d040003 04545451 20212020 2e642500     ...MQTT.  ! .%d.
 8093ec4:	252e6425 64252e64 00000000              %d.%d.%d....

08093ed0 <_ZL1K>:
 8093ed0:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
 8093ee0:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
 8093ef0:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
 8093f00:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
 8093f10:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
 8093f20:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
 8093f30:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
 8093f40:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
 8093f50:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
 8093f60:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
 8093f70:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
 8093f80:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
 8093f90:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
 8093fa0:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
 8093fb0:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
 8093fc0:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.
 8093fd0:	8648862a 05010df7 0000000c              *.H.........

08093fdc <mbedtls_sha1_info>:
 8093fdc:	00000004 080945a1 00000014 00000040     .....E......@...
 8093fec:	08083d5d 08083d59 08083d55 080865f1     ]=..Y=..U=...e..
 8093ffc:	08083d3f 08083d2d 08083d29 08083d25     ?=..-=..)=..%=..

0809400c <mbedtls_sha224_info>:
 809400c:	00000005 08094412 0000001c 00000040     .....D......@...
 809401c:	08083da5 08083da1 08083d9d 08083d91     .=...=...=...=..
 809402c:	08083d7b 08083d69 08083d65 08083d61     {=..i=..e=..a=..

0809403c <mbedtls_sha384_info>:
 809403c:	00000007 08094fb9 00000030 00000080     .....O..0.......
 809404c:	08083df5 08083df1 08083ded 08083de1     .=...=...=...=..
 809405c:	08083dcb 08083db9 08083db5 08083db1     .=...=...=...=..

0809406c <mbedtls_sha512_info>:
 809406c:	00000008 08094475 00000040 00000080     ....uD..@.......
 809407c:	08083dfb 08083df1 08083ded 08083de7     .=...=...=...=..
 809408c:	08083dcb 08083db9 08083db5 08083db1     .=...=...=...=..

0809409c <mbedtls_sha256_info>:
 809409c:	00000006 08095019 00000020 00000040     .....P.. ...@...
 80940ac:	08083dab 08083da1 08083d9d 08083d97     .=...=...=...=..
 80940bc:	08083d7b 08083d69 08083d65 08083d61     {=..i=..e=..a=..

080940cc <_ZL18oid_x520_attr_type>:
 80940cc:	08094874 00000003 08094878 08094889     tH......xH...H..
 80940dc:	08095a7d 08094895 00000003 08094899     }Z...H.......H..
 80940ec:	080948ab 08094e9e 080948b3 00000003     .H...N...H......
 80940fc:	080948b7 080948c6 080948cf 080948d1     .H...H...H...H..
 809410c:	00000003 080948d5 080948e1 080948e7     .....H...H...H..
 809411c:	080948ea 00000003 080948ee 08094905     .H.......H...I..
 809412c:	08094912 08094914 00000003 08094918     .I...I.......I..
 809413c:	08094935 0809493e 08094941 00000009     5I..>I..AI......
 809414c:	0809494b 08094958 0809494b 08094967     KI..XI..KI..gI..
 809415c:	00000003 0809496b 0809497e 08094971     ....kI..~I..qI..
 809416c:	0809498c 00000003 08094990 080949a4     .I.......I...I..
 809417c:	08094996 080949b3 00000003 080949b7     .I...I.......I..
 809418c:	080949c8 080949bd 080949d4 00000003     .I...I...I......
 809419c:	080949d8 080949e6 080949ee 080949f1     .I...I...I...I..
 80941ac:	00000003 080949f5 08094a05 08094a10     .....I...J...J..
 80941bc:	08094a13 00000003 08094a17 08094a26     .J.......J..&J..
 80941cc:	08094a1d 08094a2f 00000003 08094a33     .J../J......3J..
 80941dc:	08094a4d 08094a39 08094a62 00000003     MJ..9J..bJ......
 80941ec:	08094a66 08094a72 08094a6c 08094a78     fJ..rJ..lJ..xJ..
 80941fc:	00000003 08094a7c 08094a8e 08094a82     ....|J...J...J..
 809420c:	08094aab 00000003 08094aaf 08094abf     .J.......J...J..
 809421c:	08094ab5 08094ac9 0000000a 08094ad4     .J...J.......J..
 809422c:	08094ae7 08094af8 08094afb 00000003     .J...J...J......
 809423c:	08094aff 08094b16 08094b05 00000000     .J...K...K......
	...

0809425c <_ZL17oid_ext_key_usage>:
 809425c:	0809468d 00000008 08094696 080946a7     .F.......F...F..
 809426c:	080946c5 00000008 080946ce 080946df     .F.......F...F..
 809427c:	080946fd 00000008 08094706 08094718     .F.......G...G..
 809428c:	08094725 00000008 0809472e 08094744     %G.......G..DG..
 809429c:	08094756 00000008 0809475f 08094772     VG......_G..rG..
 80942ac:	08094780 00000008 08094789 0809479b     .G.......G...G..
	...

080942cc <_ZL10oid_pk_alg>:
 80942cc:	08094517 00000009 08094521 0809452f     .E......!E../E..
 80942dc:	00000001 08094533 00000007 0809453b     ....3E......;E..
 80942ec:	0809454a 00000002 08094559 00000005     JE......YE......
 80942fc:	0809455f 08094567 00000003 00000000     _E..gE..........
	...

0809431c <_ZL14oid_cipher_alg>:
 809431c:	080944e7 00000005 080944ed 080943c3     .D.......D...C..
 809432c:	00000021 080944f4 00000008 080944fd     !....D.......D..
 809433c:	0809450a 00000025 00000000 00000000     .E..%...........
	...
 8094358:	8648862a 0c010df7 70000301 69576562     *.H........pbeWi
 8094368:	48536874 646e4141 654b2d33 69725479     thSHAAnd3-KeyTri
 8094378:	44656c70 432d5345 50004342 77204542     pleDES-CBC.PBE w
 8094388:	20687469 31414853 646e6120 4b2d3320     ith SHA1 and 3-K
 8094398:	33207965 00534544 8648862a 0c010df7     ey 3DES.*.H.....
 80943a8:	70000401 69576562 48536874 646e4141     ...pbeWithSHAAnd
 80943b8:	654b2d32 69725479 44656c70 432d5345     2-KeyTripleDES-C
 80943c8:	50004342 77204542 20687469 31414853     BC.PBE with SHA1
 80943d8:	646e6120 4b2d3220 33207965 00534544      and 2-Key 3DES.
 80943e8:	8648862a 07020df7 616d6800 41485363     *.H......hmacSHA
 80943f8:	4d480031 532d4341 312d4148 48862a00     1.HMAC-SHA-1.*.H
 8094408:	020df786 6d680008 48536361 34323241     ......hmacSHA224
 8094418:	414d4800 48532d43 32322d41 862a0034     .HMAC-SHA-224.*.
 8094428:	0df78648 68000902 5363616d 35324148     H......hmacSHA25
 8094438:	4d480036 532d4341 322d4148 2a003635     6.HMAC-SHA-256.*
 8094448:	f7864886 000a020d 63616d68 33414853     .H......hmacSHA3
 8094458:	48003438 2d43414d 2d414853 00343833     84.HMAC-SHA-384.
 8094468:	8648862a 0b020df7 616d6800 41485363     *.H......hmacSHA
 8094478:	00323135 43414d48 4148532d 3231352d     512.HMAC-SHA-512
 8094488:	030e2b00 69001a02 68732d64 60003161     .+.....id-sha1.`
 8094498:	65014886 04020403 2d646900 32616873     .H.e.....id-sha2
 80944a8:	60003432 65014886 01020403 2d646900     24.`.H.e.....id-
 80944b8:	32616873 60003635 65014886 02020403     sha256.`.H.e....
 80944c8:	2d646900 33616873 60003438 65014886     .id-sha384.`.H.e
 80944d8:	03020403 2d646900 35616873 2b003231     .....id-sha512.+
 80944e8:	0702030e 73656400 00434243 8648862a     .....desCBC.*.H.
 80944f8:	07030df7 73656400 6564652d 62632d33     .....des-ede3-cb
 8094508:	45440063 44452d53 432d3345 2a004342     c.DES-EDE3-CBC.*
 8094518:	f7864886 0101010d 61737200 72636e45     .H.......rsaEncr
 8094528:	69747079 52006e6f 2a004153 3dce4886     yption.RSA.*.H.=
 8094538:	69000102 63652d64 6c627550 654b6369     ...id-ecPublicKe
 8094548:	65470079 6972656e 43452063 79656b20     y.Generic EC key
 8094558:	04812b00 69000c01 63652d64 45004844     .+.....id-ecDH.E
 8094568:	656b2043 6f662079 43452072 2a004844     C key for ECDH.*
 8094578:	f7864886 0501010d 61687300 6957312d     .H.......sha-1Wi
 8094588:	53526874 636e4541 74707972 006e6f69     thRSAEncryption.
 8094598:	20415352 68746977 41485320 862a0031     RSA with SHA1.*.
 80945a8:	0df78648 000e0101 32616873 69573432     H.......sha224Wi
 80945b8:	53526874 636e4541 74707972 006e6f69     thRSAEncryption.
 80945c8:	20415352 68746977 41485320 3432322d     RSA with SHA-224
 80945d8:	48862a00 010df786 73000b01 35326168     .*.H.......sha25
 80945e8:	74695736 41535268 72636e45 69747079     6WithRSAEncrypti
 80945f8:	52006e6f 77204153 20687469 2d414853     on.RSA with SHA-
 8094608:	00363532 8648862a 01010df7 6873000c     256.*.H.......sh
 8094618:	34383361 68746957 45415352 7972636e     a384WithRSAEncry
 8094628:	6f697470 5352006e 69772041 53206874     ption.RSA with S
 8094638:	332d4148 2a003438 f7864886 0d01010d     HA-384.*.H......
 8094648:	61687300 57323135 52687469 6e454153     .sha512WithRSAEn
 8094658:	70797263 6e6f6974 41535200 74697720     cryption.RSA wit
 8094668:	48532068 31352d41 0e2b0032 001d0203     h SHA-512.+.....
 8094678:	8648862a 01010df7 5352000a 41535341     *.H.......RSASSA
 8094688:	5353502d 01062b00 03070505 64690001     -PSS.+........id
 8094698:	2d706b2d 76726573 75417265 54006874     -kp-serverAuth.T
 80946a8:	5720534c 53206265 65767265 75412072     LS Web Server Au
 80946b8:	6e656874 61636974 6e6f6974 01062b00     thentication.+..
 80946c8:	03070505 64690002 2d706b2d 65696c63     ......id-kp-clie
 80946d8:	7541746e 54006874 5720534c 43206265     ntAuth.TLS Web C
 80946e8:	6e65696c 75412074 6e656874 61636974     lient Authentica
 80946f8:	6e6f6974 01062b00 03070505 64690003     tion.+........id
 8094708:	2d706b2d 65646f63 6e676953 00676e69     -kp-codeSigning.
 8094718:	65646f43 67695320 676e696e 01062b00     Code Signing.+..
 8094728:	03070505 64690004 2d706b2d 69616d65     ......id-kp-emai
 8094738:	6f72506c 74636574 006e6f69 616d2d45     lProtection.E-ma
 8094748:	50206c69 65746f72 6f697463 062b006e     il Protection.+.
 8094758:	07050501 69000803 706b2d64 6d69742d     .......id-kp-tim
 8094768:	61745365 6e69706d 69540067 5320656d     eStamping.Time S
 8094778:	706d6174 00676e69 0501062b 09030705     tamping.+.......
 8094788:	2d646900 4f2d706b 53505343 696e6769     .id-kp-OCSPSigni
 8094798:	4f00676e 20505343 6e676953 00676e69     ng.OCSP Signing.
 80947a8:	00131d55 632d6469 61622d65 43636973     U...id-ce-basicC
 80947b8:	74736e6f 6e696172 42007374 63697361     onstraints.Basic
 80947c8:	6e6f4320 61727473 73746e69 0f1d5500      Constraints.U..
 80947d8:	2d646900 6b2d6563 73557965 00656761     .id-ce-keyUsage.
 80947e8:	00251d55 632d6469 78652d65 79654b74     U.%.id-ce-extKey
 80947f8:	67617355 78450065 646e6574 4b206465     Usage.Extended K
 8094808:	55207965 65676173 111d5500 2d646900     ey Usage.U...id-
 8094818:	732d6563 656a6275 6c417463 6d614e74     ce-subjectAltNam
 8094828:	75530065 63656a62 6c412074 614e2074     e.Subject Alt Na
 8094838:	6000656d 86014886 010142f8 2d646900     me.`.H...B...id-
 8094848:	7374656e 65706163 7265632d 70797474     netscape-certtyp
 8094858:	654e0065 61637374 43206570 69747265     e.Netscape Certi
 8094868:	61636966 54206574 00657079 00030455     ficate Type.U...
 8094878:	612d6469 6f632d74 6e6f6d6d 656d614e     id-at-commonName
 8094888:	6d6f4300 206e6f6d 656d614e 06045500     .Common Name.U..
 8094898:	2d646900 632d7461 746e756f 614e7972     .id-at-countryNa
 80948a8:	4300656d 746e756f 55007972 69000704     me.Country.U...i
 80948b8:	74612d64 636f6c2d 74696c61 6f4c0079     d-at-locality.Lo
 80948c8:	696c6163 4c007974 08045500 2d646900     cality.L.U...id-
 80948d8:	732d7461 65746174 61745300 53006574     at-state.State.S
 80948e8:	04550054 6469000a 2d74612d 6167726f     T.U...id-at-orga
 80948f8:	617a696e 6e6f6974 656d614e 67724f00     nizationName.Org
 8094908:	7a696e61 6f697461 004f006e 000b0455     anization.O.U...
 8094918:	612d6469 726f2d74 696e6167 6974617a     id-at-organizati
 8094928:	6c616e6f 74696e55 656d614e 67724f00     onalUnitName.Org
 8094938:	696e5520 554f0074 48862a00 010df786      Unit.OU.*.H....
 8094948:	65000109 6c69616d 72646441 00737365     ...emailAddress.
 8094958:	616d2d45 61206c69 65726464 55007373     E-mail address.U
 8094968:	69000504 74612d64 7265732d 4e6c6169     ...id-at-serialN
 8094978:	65626d75 65530072 6c616972 6d756e20     umber.Serial num
 8094988:	00726562 00100455 612d6469 6f702d74     ber.U...id-at-po
 8094998:	6c617473 72646441 00737365 74736f50     stalAddress.Post
 80949a8:	61206c61 65726464 55007373 69001104     al address.U...i
 80949b8:	74612d64 736f702d 436c6174 0065646f     d-at-postalCode.
 80949c8:	74736f50 63206c61 0065646f 00040455     Postal code.U...
 80949d8:	612d6469 75732d74 6d614e72 75530065     id-at-surName.Su
 80949e8:	6d616e72 4e530065 2a045500 2d646900     rname.SN.U.*.id-
 80949f8:	672d7461 6e657669 656d614e 76694700     at-givenName.Giv
 8094a08:	6e206e65 00656d61 55004e47 69002b04     en name.GN.U.+.i
 8094a18:	74612d64 696e692d 6c616974 6e490073     d-at-initials.In
 8094a28:	61697469 5500736c 69002c04 74612d64     itials.U.,.id-at
 8094a38:	6e65672d 74617265 516e6f69 696c6175     -generationQuali
 8094a48:	72656966 6e654700 74617265 206e6f69     fier.Generation 
 8094a58:	6c617571 65696669 04550072 6469000c     qualifier.U...id
 8094a68:	2d74612d 6c746974 69540065 00656c74     -at-title.Title.
 8094a78:	002e0455 612d6469 6e642d74 6c617551     U...id-at-dnQual
 8094a88:	65696669 69440072 6e697473 73697567     ifier.Distinguis
 8094a98:	20646568 656d614e 61757120 6966696c     hed Name qualifi
 8094aa8:	55007265 69004104 74612d64 6573702d     er.U.A.id-at-pse
 8094ab8:	6e6f6475 50006d79 64756573 6d796e6f     udonym.Pseudonym
 8094ac8:	26920900 2cf29389 00190164 642d6469     ...&...,d...id-d
 8094ad8:	69616d6f 6d6f436e 656e6f70 4400746e     omainComponent.D
 8094ae8:	69616d6f 6f63206e 6e6f706d 00746e65     omain component.
 8094af8:	55004344 69002d04 74612d64 696e752d     DC.U.-.id-at-uni
 8094b08:	49657571 746e6564 65696669 6e550072     queIdentifier.Un
 8094b18:	65757169 65644920 6669746e 00726569     ique Identifier.

08094b28 <_ZL18oid_pkcs12_pbe_alg>:
 8094b28:	08094358 0000000a 08094363 08094383     XC......cC...C..
 8094b38:	00002504 080943a0 0000000a 080943ab     .%...C.......C..
 8094b48:	080943cb 00002304 00000000 00000000     .C...#..........
	...

08094b64 <_ZL10oid_md_alg>:
 8094b64:	08094489 00000005 0809448f 080943ff     .D.......D...C..
 8094b74:	00000004 08094497 00000009 080944a1     .....D.......D..
 8094b84:	080945d1 00000005 080944ab 00000009     .E.......D......
 8094b94:	080944b5 08094604 00000006 080944bf     .D...F.......D..
 8094ba4:	00000009 080944c9 08094637 00000007     .....D..7F......
 8094bb4:	080944d3 00000009 080944dd 0809466a     .D.......D..jF..
 8094bc4:	00000008 00000000 00000000 00000000     ................
	...

08094bdc <_ZL11oid_sig_alg>:
 8094bdc:	08094577 00000009 08094581 08094598     wE.......E...E..
 8094bec:	00000104 080945a6 00000009 080945b0     .....E.......E..
 8094bfc:	080945c8 00000105 080945d9 00000009     .E.......E......
 8094c0c:	080945e3 080945fb 00000106 0809460c     .E...E.......F..
 8094c1c:	00000009 08094616 0809462e 00000107     .....F...F......
 8094c2c:	0809463f 00000009 08094649 08094661     ?F......IF..aF..
 8094c3c:	00000108 08094672 00000005 08094581     ....rF.......E..
 8094c4c:	08094598 00000104 08094678 00000009     .E......xF......
 8094c5c:	08094682 08094682 00000600 00000000     .F...F..........
	...

08094c7c <_ZL11oid_md_hmac>:
 8094c7c:	080943e8 00000008 080943f1 080943fa     .C.......C...C..
 8094c8c:	00000004 08094405 00000008 0809440e     .....D.......D..
 8094c9c:	08094419 00000005 08094426 00000008     .D......&D......
 8094cac:	0809442f 0809443a 00000006 08094447     /D..:D......GD..
 8094cbc:	00000008 08094450 0809445b 00000007     ....PD..[D......
 8094ccc:	08094468 00000008 08094471 0809447c     hD......qD..|D..
 8094cdc:	00000008 00000000 00000000 00000000     ................
	...

08094cf4 <_ZL12oid_x509_ext>:
 8094cf4:	080947a8 00000003 080947ac 080947c3     .G.......G...G..
 8094d04:	00000100 080947d5 00000003 080947d9     .....G.......G..
 8094d14:	08094807 00000004 080947e8 00000003     .H.......G......
 8094d24:	080947ec 080947fe 00000800 08094811     .G...G.......H..
 8094d34:	00000003 08094815 0809482a 00000020     .....H..*H.. ...
 8094d44:	0809483b 00000009 08094845 0809485a     ;H......EH..ZH..
 8094d54:	00010000 00000000 00000000 00000000     ................
	...

08094d6c <_ZL16aes_192_cbc_info>:
 8094d6c:	00000206 000000c0 08094e94 00000010     .........N......
 8094d7c:	00000000 00000010 08094f24              ........$O..

08094d88 <_ZL16aes_256_ecb_info>:
 8094d88:	00000104 00000100 08094eac 00000010     .........N......
 8094d98:	00000000 00000010 08094f24              ........$O..

08094da4 <_ZL16aes_128_ecb_info>:
 8094da4:	00000102 00000080 08094ec4 00000010     .........N......
 8094db4:	00000000 00000010 08094f24              ........$O..

08094dc0 <_ZL12gcm_aes_info>:
 8094dc0:	00000002 00000000 00000000 0808671d     .............g..
 8094dd0:	0808671d 08086705 080866f3              .g...g...f..

08094ddc <mbedtls_cipher_definitions>:
 8094ddc:	00000002 08094da4 00000003 08094eec     .....M.......N..
 8094dec:	00000004 08094d88 00000005 08094e48     .....M......HN..
 8094dfc:	00000006 08094d6c 00000007 08094ed0     ....lM.......N..
 8094e0c:	0000000e 08094f08 0000000f 08094e2c     .....O......,N..
 8094e1c:	00000010 08094f40 00000000 00000000     ....@O..........

08094e2c <_ZL16aes_192_gcm_info>:
 8094e2c:	0000060f 000000c0 08094e70 0000000c     ........pN......
 8094e3c:	00000001 00000010 08094dc0              .........M..

08094e48 <_ZL16aes_128_cbc_info>:
 8094e48:	00000205 00000080 08094ea0 00000010     .........N......
 8094e58:	00000000 00000010 08094f24 2d534541     ........$O..AES-
 8094e68:	2d363532 004d4347 2d534541 2d323931     256-GCM.AES-192-
 8094e78:	004d4347 2d534541 2d383231 004d4347     GCM.AES-128-GCM.
 8094e88:	2d534541 2d363532 00434243 2d534541     AES-256-CBC.AES-
 8094e98:	2d323931 00434243 2d534541 2d383231     192-CBC.AES-128-
 8094ea8:	00434243 2d534541 2d363532 00424345     CBC.AES-256-ECB.
 8094eb8:	2d534541 2d323931 00424345 2d534541     AES-192-ECB.AES-
 8094ec8:	2d383231 00424345                       128-ECB.

08094ed0 <_ZL16aes_256_cbc_info>:
 8094ed0:	00000207 00000100 08094e88 00000010     .........N......
 8094ee0:	00000000 00000010 08094f24              ........$O..

08094eec <_ZL16aes_192_ecb_info>:
 8094eec:	00000103 000000c0 08094eb8 00000010     .........N......
 8094efc:	00000000 00000010 08094f24              ........$O..

08094f08 <_ZL16aes_128_gcm_info>:
 8094f08:	0000060e 00000080 08094e7c 0000000c     ........|N......
 8094f18:	00000001 00000010 08094dc0              .........M..

08094f24 <_ZL8aes_info>:
 8094f24:	00000002 08086761 08086759 08086755     ....ag..Yg..Ug..
 8094f34:	08086751 08086739 08086727              Qg..9g..'g..

08094f40 <_ZL16aes_256_gcm_info>:
 8094f40:	00000610 00000100 08094e64 0000000c     ........dN......
 8094f50:	00000001 00000010 08094dc0 2e617372     .........M..rsa.
 8094f60:	7372004e 00452e61                       N.rsa.E.

08094f68 <mbedtls_rsa_info>:
 8094f68:	00000001 0809452f 080867c5 08086765     ..../E...g..eg..
 8094f78:	080868a9 08086869 0808681d 080867d1     .h..ih...h...g..
 8094f88:	080867c1 080867a7 08086795 08086771     .g...g...g..qg..
 8094f98:	6e6b6e75 006e776f 2d534c54 2d415352     unknown.TLS-RSA-
 8094fa8:	48544957 5345412d 3635322d 4d43472d     WITH-AES-256-GCM
 8094fb8:	4148532d 00343833 2d534c54 2d415352     -SHA384.TLS-RSA-
 8094fc8:	48544957 5345412d 3832312d 4d43472d     WITH-AES-128-GCM
 8094fd8:	4148532d 00363532 2d534c54 2d415352     -SHA256.TLS-RSA-
 8094fe8:	48544957 5345412d 3832312d 4342432d     WITH-AES-128-CBC
 8094ff8:	4148532d 00363532 2d534c54 2d415352     -SHA256.TLS-RSA-
 8095008:	48544957 5345412d 3635322d 4342432d     WITH-AES-256-CBC
 8095018:	4148532d 00363532 2d534c54 2d415352     -SHA256.TLS-RSA-
 8095028:	48544957 5345412d 3832312d 4342432d     WITH-AES-128-CBC
 8095038:	4148532d 534c5400 4153522d 5449572d     -SHA.TLS-RSA-WIT
 8095048:	45412d48 35322d53 42432d36 48532d43     H-AES-256-CBC-SH
 8095058:	00000041                                A...

0809505c <_ZL23ciphersuite_definitions>:
 809505c:	0000009d 08094fa0 00010710 00000003     .....O..........
 809506c:	00000003 00000003 00000003 00000000     ................
 809507c:	0000009c 08094fc0 0001060e 00000003     .....O..........
 809508c:	00000003 00000003 00000003 00000000     ................
 809509c:	0000003c 08094fe0 00010605 00000003     <....O..........
 80950ac:	00000003 00000003 00000003 00000000     ................
 80950bc:	0000003d 08095000 00010607 00000003     =....P..........
 80950cc:	00000003 00000003 00000003 00000000     ................
 80950dc:	0000002f 08095020 00010405 00000003     /... P..........
 80950ec:	00000000 00000003 00000003 00000000     ................
 80950fc:	00000035 0809503d 00010407 00000003     5...=P..........
 809510c:	00000000 00000003 00000003 00000000     ................
 809511c:	00000000 08094520 00000000 00000000     .... E..........
	...

0809513c <_ZL22ciphersuite_preference>:
 809513c:	0000c02c 0000c030 0000009f 0000c0ad     ,...0...........
 809514c:	0000c09f 0000c024 0000c028 0000006b     ....$...(...k...
 809515c:	0000c00a 0000c014 00000039 0000c0af     ........9.......
 809516c:	0000c0a3 0000c087 0000c08b 0000c07d     ............}...
 809517c:	0000c073 0000c077 000000c4 00000088     s...w...........
 809518c:	0000c02b 0000c02f 0000009e 0000c0ac     +.../...........
 809519c:	0000c09e 0000c023 0000c027 00000067     ....#...'...g...
 80951ac:	0000c009 0000c013 00000033 0000c0ae     ........3.......
 80951bc:	0000c0a2 0000c086 0000c08a 0000c07c     ............|...
 80951cc:	0000c072 0000c076 000000be 00000045     r...v.......E...
 80951dc:	0000c008 0000c012 00000016 000000ab     ................
 80951ec:	0000c0a7 0000c038 000000b3 0000c036     ....8.......6...
 80951fc:	00000091 0000c091 0000c09b 0000c097     ................
 809520c:	0000c0ab 000000aa 0000c0a6 0000c037     ............7...
 809521c:	000000b2 0000c035 00000090 0000c090     ....5...........
 809522c:	0000c096 0000c09a 0000c0aa 0000c034     ............4...
 809523c:	0000008f 0000c0ff 0000009d 0000c09d     ................
 809524c:	0000003d 00000035 0000c032 0000c02a     =...5...2...*...
 809525c:	0000c00f 0000c02e 0000c026 0000c005     ........&.......
 809526c:	0000c0a1 0000c07b 000000c0 00000084     ....{...........
 809527c:	0000c08d 0000c079 0000c089 0000c075     ....y.......u...
 809528c:	0000009c 0000c09c 0000003c 0000002f     ........<.../...
 809529c:	0000c031 0000c029 0000c00e 0000c02d     1...).......-...
 80952ac:	0000c025 0000c004 0000c0a0 0000c07a     %...........z...
 80952bc:	000000ba 00000041 0000c08c 0000c078     ....A.......x...
 80952cc:	0000c088 0000c074 0000000a 0000c00d     ....t...........
 80952dc:	0000c003 000000ad 000000b7 00000095     ................
 80952ec:	0000c093 0000c099 000000ac 000000b6     ................
 80952fc:	00000094 0000c092 0000c098 00000093     ................
 809530c:	000000a9 0000c0a5 000000af 0000008d     ................
 809531c:	0000c08f 0000c095 0000c0a9 000000a8     ................
 809532c:	0000c0a4 000000ae 0000008c 0000c08e     ................
 809533c:	0000c094 0000c0a8 0000008b 0000c007     ................
 809534c:	0000c011 0000c033 0000008e 00000005     ....3...........
 809535c:	00000004 0000c00c 0000c002 00000092     ................
 809536c:	0000008a 00000015 00000009 0000c006     ................
 809537c:	0000c010 0000c03b 0000c03a 0000c039     ....;...:...9...
 809538c:	000000b5 000000b4 0000002d 0000003b     ........-...;...
 809539c:	00000002 00000001 0000c00b 0000c001     ................
 80953ac:	000000b9 000000b8 0000002e 000000b1     ................
 80953bc:	000000b0 0000002c 00000000 00202b20     ....,....... + .
 80953cc:	2500202c 3f003d73 3a003d3f 32302500     , .%s=.??=.:.%02
 80953dc:	00732558 2e2e2e2e 3f3f3f00 20732500     X%s......???.%s 
 80953ec:	2079656b 657a6973 48862a00 010df786     key size.*.H....
 80953fc:	0001010c 8648862a 05010df7 2d2d000d     ....*.H.......--
 809540c:	452d2d2d 5220444e 50204153 41564952     ---END RSA PRIVA
 809541c:	4b204554 2d2d5945 002d2d2d 2d2d2d2d     TE KEY-----.----
 809542c:	4745422d 52204e49 50204153 41564952     -BEGIN RSA PRIVA
 809543c:	4b204554 2d2d5945 002d2d2d 2d2d2d2d     TE KEY-----.----
 809544c:	444e452d 49525020 45544156 59454b20     -END PRIVATE KEY
 809545c:	2d2d2d2d 2d2d002d 422d2d2d 4e494745     -----.-----BEGIN
 809546c:	49525020 45544156 59454b20 2d2d2d2d      PRIVATE KEY----
 809547c:	2d2d002d 452d2d2d 4520444e 5952434e     -.-----END ENCRY
 809548c:	44455450 49525020 45544156 59454b20     PTED PRIVATE KEY
 809549c:	2d2d2d2d 2d2d002d 422d2d2d 4e494745     -----.-----BEGIN
 80954ac:	434e4520 54505952 50204445 41564952      ENCRYPTED PRIVA
 80954bc:	4b204554 2d2d5945 002d2d2d 2d2d2d2d     TE KEY-----.----
 80954cc:	444e452d 42555020 2043494c 2d59454b     -END PUBLIC KEY-
 80954dc:	2d2d2d2d 2d2d2d00 45422d2d 204e4947     ----.-----BEGIN 
 80954ec:	4c425550 4b204349 2d2d5945 002d2d2d     PUBLIC KEY-----.
 80954fc:	00000000                                ....

08095500 <_ZL5last4>:
	...
 8095508:	00001c20 00000000 00003840 00000000      .......@8......
 8095518:	00002460 00000000 00007080 00000000     `$.......p......
 8095528:	00006ca0 00000000 000048c0 00000000     .l.......H......
 8095538:	000054e0 00000000 0000e100 00000000     .T..............
 8095548:	0000fd20 00000000 0000d940 00000000      .......@.......
 8095558:	0000c560 00000000 00009180 00000000     `...............
 8095568:	00008da0 00000000 0000a9c0 00000000     ................
 8095578:	0000b5e0 00000000                       ........

08095580 <_ZL14base64_dec_map>:
 8095580:	7f7f7f7f 7f7f7f7f 7f7f7f7f 7f7f7f7f     ................
 8095590:	7f7f7f7f 7f7f7f7f 7f7f7f7f 7f7f7f7f     ................
 80955a0:	7f7f7f7f 7f7f7f7f 3e7f7f7f 3f7f7f7f     ...........>...?
 80955b0:	37363534 3b3a3938 7f7f3d3c 7f7f407f     456789:;<=...@..
 80955c0:	0201007f 06050403 0a090807 0e0d0c0b     ................
 80955d0:	1211100f 16151413 7f191817 7f7f7f7f     ................
 80955e0:	1c1b1a7f 201f1e1d 24232221 28272625     ....... !"#$%&'(
 80955f0:	2c2b2a29 302f2e2d 7f333231 7f7f7f7f     )*+,-./0123.....

08095600 <CSWTCH.21>:
 8095600:	08093fdc 0809400c 0809409c 0809403c     .?...@...@..<@..
 8095610:	0809406c                                l@..

08095614 <_ZL23x509_crt_verify_strings>:
 8095614:	00000001 080959e7 00000002 08095a0c     .....Y.......Z..
 8095624:	00000004 08095a3b 00000008 08095a80     ....;Z.......Z..
 8095634:	00000010 08095aba 00000020 08095aec     .....Z.. ....Z..
 8095644:	00000040 08095aff 00000080 08095b17     @....Z.......[..
 8095654:	00000100 08095b3c 00000200 08095b6a     ....<[......j[..
 8095664:	00000400 08095b98 00000800 08095bb3     .....[.......[..
 8095674:	00001000 08095bdf 00002000 08095c13     .....[... ...\..
 8095684:	00004000 08095c41 00008000 08095c76     .@..A\......v\..
 8095694:	00010000 08095cbf 00020000 08095d11     .....\.......]..
 80956a4:	00040000 08095d3e 00080000 08095d7f     ....>].......]..
	...

080956bc <mbedtls_x509_crt_profile_default>:
 80956bc:	000000f0 0fffffff 0fffffff 00000800     ................
 80956cc:	65757274 6c616600 0a006573 74726543     true.false..Cert
 80956dc:	63696669 20657461 75207369 696e696e     ificate is unini
 80956ec:	6c616974 64657369 25000a21 72656373     tialised!..%scer
 80956fc:	76202e74 69737265 20206e6f 3a202020     t. version     :
 809570c:	0a642520 73732500 61697265 756e206c      %d..%sserial nu
 809571c:	7265626d 20202020 00203a20 6973250a     mber     : ..%si
 809572c:	65757373 616e2072 2020656d 20202020     ssuer name      
 809573c:	00203a20 7373250a 656a6275 6e207463      : ..%ssubject n
 809574c:	20656d61 20202020 00203a20 6973250a     ame      : ..%si
 809575c:	65757373 6f202064 2020206e 20202020     ssued  on       
 809576c:	25203a20 2d643430 64323025 3230252d      : %04d-%02d-%02
 809577c:	30252064 253a6432 3a643230 64323025     d %02d:%02d:%02d
 809578c:	73250a00 69707865 20736572 20206e6f     ..%sexpires on  
 809579c:	20202020 203a2020 64343025 3230252d           : %04d-%02
 80957ac:	30252d64 25206432 3a643230 64323025     d-%02d %02d:%02d
 80957bc:	3230253a 250a0064 67697373 2064656e     :%02d..%ssigned 
 80957cc:	6e697375 20202067 3a202020 250a0020     using      : ..%
 80957dc:	312d2573 203a7338 62206425 00737469     s%-18s: %d bits.
 80957ec:	6273250a 63697361 6e6f6320 61727473     .%sbasic constra
 80957fc:	73746e69 43203a20 73253d41 6d202c00     ints : CA=%s., m
 809580c:	705f7861 6c687461 253d6e65 250a0064     ax_pathlen=%d..%
 809581c:	62757373 7463656a 746c6120 6d616e20     ssubject alt nam
 809582c:	3a202065 250a0020 72656373 74202e74     e  : ..%scert. t
 809583c:	20657079 20202020 3a202020 73250020     ype        : .%s
 809584c:	204c5353 65696c43 2500746e 4c535373     SSL Client.%sSSL
 809585c:	72655320 00726576 6d457325 006c6961      Server.%sEmail.
 809586c:	624f7325 7463656a 67695320 676e696e     %sObject Signing
 809587c:	52732500 72657365 00646576 53537325     .%sReserved.%sSS
 809588c:	4143204c 45732500 6c69616d 00414320     L CA.%sEmail CA.
 809589c:	624f7325 7463656a 67695320 676e696e     %sObject Signing
 80958ac:	00414320 6b73250a 75207965 65676173      CA..%skey usage
 80958bc:	20202020 20202020 00203a20 69447325              : .%sDi
 80958cc:	61746967 6953206c 74616e67 00657275     gital Signature.
 80958dc:	6f4e7325 6552206e 69647570 6f697461     %sNon Repudiatio
 80958ec:	7325006e 2079654b 69636e45 72656870     n.%sKey Encipher
 80958fc:	746e656d 44732500 20617461 69636e45     ment.%sData Enci
 809590c:	72656870 746e656d 4b732500 41207965     pherment.%sKey A
 809591c:	65657267 746e656d 4b732500 43207965     greement.%sKey C
 809592c:	20747265 6e676953 43732500 53204c52     ert Sign.%sCRL S
 809593c:	006e6769 6e457325 68706963 4f207265     ign.%sEncipher O
 809594c:	00796c6e 65447325 68706963 4f207265     nly.%sDecipher O
 809595c:	00796c6e 6573250a 6b207478 75207965     nly..%sext key u
 809596c:	65676173 20202020 00203a20 73257325     sage     : .%s%s
 809597c:	25732500 25000a73 6b6e5573 6e776f6e     .%s%s..%sUnknown
 809598c:	61657220 206e6f73 69687428 68732073      reason (this sh
 809599c:	646c756f 746f6e20 70616820 296e6570     ould not happen)
 80959ac:	2e2a000a 2d2d2d00 45422d2d 204e4947     ..*..-----BEGIN 
 80959bc:	54524543 43494649 2d455441 2d2d2d2d     CERTIFICATE-----
 80959cc:	2d2d2d00 4e452d2d 45432044 46495452     .-----END CERTIF
 80959dc:	54414349 2d2d2d45 54002d2d 63206568     ICATE-----.The c
 80959ec:	69747265 61636966 76206574 64696c61     ertificate valid
 80959fc:	20797469 20736168 69707865 00646572     ity has expired.
 8095a0c:	20656854 74726563 63696669 20657461     The certificate 
 8095a1c:	20736168 6e656562 76657220 64656b6f     has been revoked
 8095a2c:	73692820 206e6f20 52432061 5400294c      (is on a CRL).T
 8095a3c:	63206568 69747265 61636966 43206574     he certificate C
 8095a4c:	6f6d6d6f 614e206e 2820656d 20294e43     ommon Name (CN) 
 8095a5c:	73656f64 746f6e20 74616d20 77206863     does not match w
 8095a6c:	20687469 20656874 65707865 64657463     ith the expected
 8095a7c:	004e4320 20656854 74726563 63696669      CN.The certific
 8095a8c:	20657461 6e207369 6320746f 6572726f     ate is not corre
 8095a9c:	796c7463 67697320 2064656e 74207962     ctly signed by t
 8095aac:	74206568 74737572 43206465 68540041     he trusted CA.Th
 8095abc:	52432065 7369204c 746f6e20 726f6320     e CRL is not cor
 8095acc:	74636572 7320796c 656e6769 79622064     rectly signed by
 8095adc:	65687420 75727420 64657473 00414320      the trusted CA.
 8095aec:	20656854 204c5243 65207369 72697078     The CRL is expir
 8095afc:	43006465 69747265 61636966 77206574     ed.Certificate w
 8095b0c:	6d207361 69737369 4300676e 69747265     as missing.Certi
 8095b1c:	61636966 76206574 66697265 74616369     ficate verificat
 8095b2c:	206e6f69 20736177 70696b73 00646570     ion was skipped.
 8095b3c:	6568744f 65722072 6e6f7361 61632820     Other reason (ca
 8095b4c:	6562206e 65737520 79622064 72657620     n be used by ver
 8095b5c:	20796669 6c6c6163 6b636162 68540029     ify callback).Th
 8095b6c:	65632065 66697472 74616369 61762065     e certificate va
 8095b7c:	6964696c 73207974 74726174 6e692073     lidity starts in
 8095b8c:	65687420 74756620 00657275 20656854      the future.The 
 8095b9c:	204c5243 66207369 206d6f72 20656874     CRL is from the 
 8095bac:	75747566 55006572 65676173 656f6420     future.Usage doe
 8095bbc:	6f6e2073 616d2074 20686374 20656874     s not match the 
 8095bcc:	5579656b 65676173 74786520 69736e65     keyUsage extensi
 8095bdc:	55006e6f 65676173 656f6420 6f6e2073     on.Usage does no
 8095bec:	616d2074 20686374 20656874 65747865     t match the exte
 8095bfc:	6465646e 5579654b 65676173 74786520     ndedKeyUsage ext
 8095c0c:	69736e65 55006e6f 65676173 656f6420     ension.Usage doe
 8095c1c:	6f6e2073 616d2074 20686374 20656874     s not match the 
 8095c2c:	6543736e 79547472 65206570 6e657478     nsCertType exten
 8095c3c:	6e6f6973 65685400 72656320 69666974     sion.The certifi
 8095c4c:	65746163 20736920 6e676973 77206465     cate is signed w
 8095c5c:	20687469 75206e61 6363616e 61747065     ith an unaccepta
 8095c6c:	20656c62 68736168 6854002e 65632065     ble hash..The ce
 8095c7c:	66697472 74616369 73692065 67697320     rtificate is sig
 8095c8c:	2064656e 68746977 206e6120 63616e75     ned with an unac
 8095c9c:	74706563 656c6261 204b5020 20676c61     ceptable PK alg 
 8095cac:	20676528 20415352 45207376 41534443     (eg RSA vs ECDSA
 8095cbc:	54002e29 63206568 69747265 61636966     )..The certifica
 8095ccc:	69206574 69732073 64656e67 74697720     te is signed wit
 8095cdc:	6e612068 616e7520 70656363 6c626174     h an unacceptabl
 8095cec:	656b2065 65282079 61622067 75632064     e key (eg bad cu
 8095cfc:	2c657672 41535220 6f6f7420 6f687320     rve, RSA too sho
 8095d0c:	2e297472 65685400 4c524320 20736920     rt)..The CRL is 
 8095d1c:	6e676973 77206465 20687469 75206e61     signed with an u
 8095d2c:	6363616e 61747065 20656c62 68736168     nacceptable hash
 8095d3c:	6854002e 52432065 7369204c 67697320     ..The CRL is sig
 8095d4c:	2064656e 68746977 206e6120 63616e75     ned with an unac
 8095d5c:	74706563 656c6261 204b5020 20676c61     ceptable PK alg 
 8095d6c:	20676528 20415352 45207376 41534443     (eg RSA vs ECDSA
 8095d7c:	54002e29 43206568 69204c52 69732073     )..The CRL is si
 8095d8c:	64656e67 74697720 6e612068 616e7520     gned with an una
 8095d9c:	70656363 6c626174 656b2065 65282079     cceptable key (e
 8095dac:	61622067 75632064 2c657672 41535220     g bad curve, RSA
 8095dbc:	6f6f7420 6f687320 2e297472 00000000      too short).....

08095dcc <mbedtls_x509_crt_profile_suiteb>:
 8095dcc:	00000060 0000000a 00000000 00000000     `...............

08095ddc <CSWTCH.205>:
 8095ddc:	05040302 696c6306 20746e65 696e6966     .....client fini
 8095dec:	64656873 72657300 20726576 696e6966     shed.server fini
 8095dfc:	64656873 73616d00 20726574 72636573     shed.master secr
 8095e0c:	6b007465 65207965 6e617078 6e6f6973     et.key expansion
 8095e1c:	4c535300 302e3376 534c5400 302e3176     .SSLv3.0.TLSv1.0
 8095e2c:	534c5400 312e3176 534c5400 322e3176     .TLSv1.1.TLSv1.2
 8095e3c:	00000000                                ....

08095e40 <_ZL18mfl_code_to_length>:
 8095e40:	00002000 00000200 00000400 00000800     . ..............
 8095e50:	00001000 61766e69 2064696c 00004b50     ....invalid PK..

08095e60 <_ZL1K>:
 8095e60:	d728ae22 428a2f98 23ef65cd 71374491     ".(../.B.e.#.D7q
 8095e70:	ec4d3b2f b5c0fbcf 8189dbbc e9b5dba5     /;M.............
 8095e80:	f348b538 3956c25b b605d019 59f111f1     8.H.[.V9.......Y
 8095e90:	af194f9b 923f82a4 da6d8118 ab1c5ed5     .O....?...m..^..
 8095ea0:	a3030242 d807aa98 45706fbe 12835b01     B........opE.[..
 8095eb0:	4ee4b28c 243185be d5ffb4e2 550c7dc3     ...N..1$.....}.U
 8095ec0:	f27b896f 72be5d74 3b1696b1 80deb1fe     o.{.t].r...;....
 8095ed0:	25c71235 9bdc06a7 cf692694 c19bf174     5..%.....&i.t...
 8095ee0:	9ef14ad2 e49b69c1 384f25e3 efbe4786     .J...i...%O8.G..
 8095ef0:	8b8cd5b5 0fc19dc6 77ac9c65 240ca1cc     ........e..w...$
 8095f00:	592b0275 2de92c6f 6ea6e483 4a7484aa     u.+Yo,.-...n..tJ
 8095f10:	bd41fbd4 5cb0a9dc 831153b5 76f988da     ..A....\.S.....v
 8095f20:	ee66dfab 983e5152 2db43210 a831c66d     ..f.RQ>..2.-m.1.
 8095f30:	98fb213f b00327c8 beef0ee4 bf597fc7     ?!...'........Y.
 8095f40:	3da88fc2 c6e00bf3 930aa725 d5a79147     ...=....%...G...
 8095f50:	e003826f 06ca6351 0a0e6e70 14292967     o...Qc..pn..g)).
 8095f60:	46d22ffc 27b70a85 5c26c926 2e1b2138     ./.F...'&.&\8!..
 8095f70:	5ac42aed 4d2c6dfc 9d95b3df 53380d13     .*.Z.m,M......8S
 8095f80:	8baf63de 650a7354 3c77b2a8 766a0abb     .c..Ts.e..w<..jv
 8095f90:	47edaee6 81c2c92e 1482353b 92722c85     ...G....;5...,r.
 8095fa0:	4cf10364 a2bfe8a1 bc423001 a81a664b     d..L.....0B.Kf..
 8095fb0:	d0f89791 c24b8b70 0654be30 c76c51a3     ....p.K.0.T..Ql.
 8095fc0:	d6ef5218 d192e819 5565a910 d6990624     .R........eU$...
 8095fd0:	5771202a f40e3585 32bbd1b8 106aa070     * qW.5.....2p.j.
 8095fe0:	b8d2d0c8 19a4c116 5141ab53 1e376c08     ........S.AQ.l7.
 8095ff0:	df8eeb99 2748774c e19b48a8 34b0bcb5     ....LwH'.H.....4
 8096000:	c5c95a63 391c0cb3 e3418acb 4ed8aa4a     cZ.....9..A.J..N
 8096010:	7763e373 5b9cca4f d6b2b8a3 682e6ff3     s.cwO..[.....o.h
 8096020:	5defb2fc 748f82ee 43172f60 78a5636f     ...]...t`/.Coc.x
 8096030:	a1f0ab72 84c87814 1a6439ec 8cc70208     r....x...9d.....
 8096040:	23631e28 90befffa de82bde9 a4506ceb     (.c#.........lP.
 8096050:	b2c67915 bef9a3f7 e372532b c67178f2     .y......+Sr..xq.
 8096060:	ea26619c ca273ece 21c0c207 d186b8c7     .a&..>'....!....
 8096070:	cde0eb1e eada7dd6 ee6ed178 f57d4f7f     .....}..x.n..O}.
 8096080:	72176fba 06f067aa a2c898a6 0a637dc5     .o.r.g.......}c.
 8096090:	bef90dae 113f9804 131c471b 1b710b35     ......?..G..5.q.
 80960a0:	23047d84 28db77f5 40c72493 32caab7b     .}.#.w.(.$.@{..2
 80960b0:	15c9bebc 3c9ebe0a 9c100d4c 431d67c4     .......<L....g.C
 80960c0:	cb3e42b6 4cc5d4be fc657e2a 597f299c     .B>....L*~e..).Y
 80960d0:	3ad6faec 5fcb6fab 4a475817 6c44198c     ...:.o._.XGJ..Dl
 80960e0:	636f7250 7079542d 34203a65 434e452c     Proc-Type: 4,ENC
 80960f0:	54505952 02004445 0b070503 1713110d     RYPTED..........
 8096100:	29251f1d 3b352f2b 4947433d 6159534f     ..%)+/5;=CGIOSYa
 8096110:	6d6b6765 89837f71 9d97958b b3ada7a3     egkmq...........
 8096120:	c5c1bfb5 e3dfd3c7 f1efe9e5 2d2d2dfb              .............

0809612d <_ZL15clientKeyCrtPem>:
 809612d:	2d2d2d2d 4745422d 43204e49 49545245     -----BEGIN CERTI
 809613d:	41434946 2d2d4554 202d2d2d 494d0a0d     FICATE----- ..MI
 809614d:	54574449 6b414343 77416747 67414249     IDWTCCAkGgAwIBAg
 809615d:	32515549 4168412f 522f497a 69475451     IUQ2/AhAzI/RQTGi
 809616d:	466e7278 7569352f 7541336f 51447749     xrnF/5iuo3AuIwDQ
 809617d:	6f4b4a59 7668495a 51414e63 0a0d4c45     YJKoZIhvcNAQEL..
 809618d:	77415142 4c465454 476b454d 45553141     BQAwTTFLMEkGA1UE
 809619d:	43787743 68315751 75396d65 6c644649     CwxCQW1hem9uIFdl
 80961ad:	54426959 324a585a 6c4e5761 50427963     YiBTZXJ2aWNlcyBP
 80961bd:	74465550 76705859 6a356962 67303262     PUFtYXpvbi5jb20g
 80961cd:	57530a0d 694c6a35 56504d42 58596c4e     ..SW5jLiBMPVNlYX
 80961dd:	47623052 31556755 32563951 47617a46     R0bGUgU1Q9V2FzaG
 80961ed:	335a756c 69627652 56504442 424d5456     luZ3RvbiBDPVVTMB
 80961fd:	54445834 444d3445 444f796b 544e3245     4XDTE4MDkyODE2NT
 809620d:	0a0d7a51 586f6c4e 35515444 7a49544d     Qz..NloXDTQ5MTIz
 809621d:	7a49544d 316b544e 776f564f 63456a48     MTIzNTk1OVowHjEc
 809622d:	476f424d 45553141 54777741 54645651     MBoGA1UEAwwTQVdT
 809623d:	766c4549 44424356 304a585a 705a5761     IElvVCBDZXJ0aWZp
 809624d:	30463259 545a0a0d 53414343 51447749     Y2F0..ZTCCASIwDQ
 809625d:	6f4b4a59 7668495a 51414e63 51424245     YJKoZIhvcNAQEBBQ
 809626d:	67674441 44415045 51414343 6767436f     ADggEPADCCAQoCgg
 809627d:	4d414245 65427278 50735554 395a4c6d     EBAMxrBeTUsPmLZ9
 809628d:	45595036 0a0d6b6a 41776762 74664364     6PYEjk..bgwAdCft
 809629d:	634c7170 2b416d41 545a752f 64414548     pqLcAmA+/uZTHEAd
 80962ad:	646b4b2b 64387532 72385256 42394766     +Kkd2u8dVR8rfG9B
 80962bd:	64385977 43715734 48455271 3641484f     wY8d4WqCqREHOHA6
 80962cd:	774d7531 52794c6d 542b0a0d 58504f76     1uMwmLyR..+TvOPX
 80962dd:	61544c4a 65746d36 567a3146 536f724a     JLTa6mteF1zVJroS
 80962ed:	32526876 5a6d2f4c 3037524f 31424e77     vhR2L/mZOR70wNB1
 80962fd:	6b433475 38356b52 556e7432 4f2f5830     u4CkRk582tnU0X/O
 809630d:	7151516d 754f4e2f 0a0d6d77 616b3663     mQQq/NOuwm..c6ka
 809631d:	71735948 644f7178 52336b32 7a414955     HYsqxqOd2k3RUIAz
 809632d:	4862546f 372f3544 2f502b59 74752b30     oTbHD5/7Y+P/0+ut
 809633d:	58664d57 37514f67 476e4b30 43674839     WMfXgOQ70KnG9HgC
 809634d:	2f343266 5a795052 52796867 73320a0d     f24/RPyZghyR..2s
 809635d:	54386a68 6d7a5a6d 566e5746 57644944     hj8TmZzmFWnVDIdW
 809636d:	36666356 3779724b 344a664e 61455974     Vcf6Kry7NfJ4tYEa
 809637d:	2b784261 53473849 49306570 78594e52     aBx+I8GSpe0IRNYx
 809638d:	457a4674 776d3078 54543756 0a0d7277     tFzEx0mwV7TTwr..
 809639d:	4151686f 70775837 4e7a6a64 35423365     ohQA7XwpdjzNe3B5
 80963ad:	6e6f4b66 7a46726a 6c6a457a 574d4453     fKonjrFzzEjlSDMW
 80963bd:	7333466d 4b4e3848 53754273 35766f67     mF3sH8NKsBuSgov5
 80963cd:	72625066 6b39456e 434f6547 38346349     fPbrnE9kGeOCIc48
 80963dd:	78780a0d 77414330 61414145 464d674e     ..xx0CAwEAAaNgMF
 80963ed:	77487734 52564459 42426a30 6f467767     4wHwYDVR0jBBgwFo
 80963fd:	69675541 56764f47 38464254 704e5550     AUgiGOvVTBF8PUNp
 809640d:	4f386462 4d724653 37563059 5148776b     bd8OSFrMY0V7kwHQ
 809641d:	0a0d4459 4f305256 45594242 36484446     YD..VR0OBBYEFDH6
 809642d:	35465837 69527957 67416d6f 56567243     7XF5WyRiomAgCrVV
 809643d:	2b765335 502f5a46 4777414d 64553141     5Sv+FZ/PMAwGA1Ud
 809644d:	42457745 4351772f 7741414d 44596744     EwEB/wQCMAAwDgYD
 809645d:	50305256 51410a0d 41422f48 67414451     VR0P..AQH/BAQDAg
 809646d:	414d4165 53434730 49534771 51443362     eAMA0GCSqGSIb3DQ
 809647d:	77434245 34414155 51414249 4d796441     EBCwUAA4IBAQAdyM
 809648d:	49795244 56307269 3761644f 77594931     DRyIir0VOda71IYw
 809649d:	71675432 0a0d5362 6b447a38 5552384c     2TgqbS..8zDkL8RU
 80964ad:	616e4d72 30785549 36366973 71704b56     rMnaIUx0si66VKpq
 80964bd:	4b655166 4476554b 6d724170 654c6a38     fQeKKUvDpArm8jLe
 80964cd:	36436a4e 7753494f 54735553 455a7449     NjC6OISwSUsTItZE
 80964dd:	4a746f47 39426b36 30590a0d 70594341     GotJ6kB9..Y0ACYp
 80964ed:	36677370 36385834 4555525a 42396271     psg64X86ZRUEqb9B
 80964fd:	4161692f 7a486b67 3678496b 68306238     /iaAgkHzkIx68b0h
 809650d:	6e445736 47394146 755a6757 4150766f     6WDnFA9GWgZuovPA
 809651d:	54544653 44384a6f 0a0d3539 69416531     SFTToJ8D95..1eAi
 809652d:	62755a55 70504933 666b6e36 386c7350     UZub3IPp6nkfPsl8
 809653d:	634b2b6c 396a6b56 2b784c79 4a4d6433     l+KcVkj9yLx+3dMJ
 809654d:	422b7170 72513633 41564a76 48423979     pq+B36QrvJVAy9BH
 809655d:	4e734e61 38344d46 48636c45 2b4f0a0d     aNsNFM48ElcH..O+
 809656d:	5949394a 672f796b 4a457944 784b5241     J9IYky/gDyEJARKx
 809657d:	63444234 6f417574 33506b6b 472f4c52     4BDctuAokkP3RL/G
 809658d:	4e382f6a 4c4c584b 75362b67 64434d30     j/8NKXLLg+6u0MCd
 809659d:	346b3147 65486958 3243656a 0a0d7634     G1k4XiHejeC24v..
 80965ad:	5a51476b 55374b4f 675a7461 2b504735     kGQZOK7UatZg5GP+
 80965bd:	64646d6f 65514534 376a3436 77465570     omdd4EQe64j7pUFw
 80965cd:	4b776e6d 57505a55 4b617877 39623264     mnwKUZPWwxaKd2b9
 80965dd:	6633474d 4b4e744c 54427341 2d2d0a0d     MG3fLtNKAsBT..--
 80965ed:	452d2d2d 4320444e 49545245 41434946     ---END CERTIFICA
 80965fd:	2d2d4554 002d2d2d                       TE-----.

08096605 <_ZL18amazonIoTRootCaPem>:
 8096605:	2d2d2d2d 4745422d 43204e49 49545245     -----BEGIN CERTI
 8096615:	41434946 2d2d4554 202d2d2d 494d0a0d     FICATE----- ..MI
 8096625:	7a304549 37414343 77416775 67414249     IE0zCCA7ugAwIBAg
 8096635:	4e475149 696e5272 4c36395a 56494b74     IQGNrRniZ96LtKIV
 8096645:	477a4e6a 6a533773 67424e41 6b68716b     jNzGs7SjANBgkqhk
 8096655:	77394769 51414230 44414655 0a0d4243     iG9w0BAQUFADCB..
 8096665:	4c456a79 476b414d 45553141 434d6842     yjELMAkGA1UEBhMC
 8096675:	784d5656 56417a46 564e6742 546f4142     VVMxFzAVBgNVBAoT
 8096685:	6c5a6c44 546c6d63 75645761 4a42434c     DlZlcmlTaWduLCBJ
 8096695:	754d6d62 7738524d 44595148 4c515156     bmMuMR8wHQYDVQQL
 80966a5:	78450a0d 585a575a 3255704a 69626e6c     ..ExZWZXJpU2lnbi
 80966b5:	6e635542 43647a56 585a4f42 33623352     BUcnVzdCBOZXR3b3
 80966c5:	544d724a 414f776f 51564459 7a454c51     JrMTowOAYDVQQLEz
 80966d5:	79596f45 6a4d676b 694e7741 585a5742     EoYykgMjAwNiBWZX
 80966e5:	0a0d704a 6e6c3255 67776962 6a355753     Jp..U2lnbiwgSW5j
 80966f5:	7441694c 765a4549 68426963 6f525864     LiAtIEZvciBhdXRo
 8096705:	704a3362 6b566d65 7a564849 7642535a     b3JpemVkIHVzZSBv
 8096715:	35786d62 7755554d 44597751 44515156     bmx5MUUwQwYDVQQD
 8096725:	57787a45 585a0a0d 3255704a 69626e6c     EzxW..ZXJpU2lnbi
 8096735:	47624442 79637a46 46497a41 6d593142     BDbGFzcyAzIFB1Ym
 8096745:	79597078 6d635142 5859746c 4549354a     xpYyBQcmltYXJ5IE
 8096755:	6e636c4e 6d5a7052 58596a6c 32627052     NlcnRpZmljYXRpb2
 8096765:	58516734 0a0d3056 79394761 35525861     4gQXV0..aG9yaXR5
 8096775:	67304349 77557a52 4e636848 7859444d     IC0gRzUwHhcNMDYx
 8096785:	3441544d 7741444d 7741444d 4e636857     MTA4MDAwMDAwWhcN
 8096795:	77597a4d 32457a4e 314d6a4d 3555544f     MzYwNzE2MjM1OTU5
 80967a5:	42436a57 4c456a79 414d0a0d 3141476b     WjCByjEL..MAkGA1
 80967b5:	68424555 5656434d 7a46784d 67425641     UEBhMCVVMxFzAVBg
 80967c5:	4142564e 6c44546f 6d636c5a 5761546c     NVBAoTDlZlcmlTaW
 80967d5:	434c7564 6d624a42 524d754d 51487738     duLCBJbmMuMR8wHQ
 80967e5:	51564459 78454c51 0a0d575a 704a585a     YDVQQLExZW..ZXJp
 80967f5:	6e6c3255 55426962 7a566e63 4f424364     U2lnbiBUcnVzdCBO
 8096805:	3352585a 724a3362 776f544d 4459414f     ZXR3b3JrMTowOAYD
 8096815:	4c515156 6f457a45 676b7959 77416a4d     VQQLEzEoYykgMjAw
 8096825:	5742694e 704a585a 6e6c3255 69620a0d     NiBWZXJpU2ln..bi
 8096835:	57536777 694c6a35 45497441 6963765a     wgSW5jLiAtIEZvci
 8096845:	58646842 33626f52 6d65704a 48496b56     BhdXRob3JpemVkIH
 8096855:	535a7a56 6d627642 554d3578 77517755     VzZSBvbmx5MUUwQw
 8096865:	51564459 7a454451 585a5778 0a0d704a     YDVQQDEzxWZXJp..
 8096875:	6e6c3255 44426962 7a464762 7a417963     U2lnbiBDbGFzcyAz
 8096885:	31424649 70786d59 51427959 746c6d63     IFB1YmxpYyBQcmlt
 8096895:	354a5859 6c4e4549 70526e63 6a6c6d5a     YXJ5IENlcnRpZmlj
 80968a5:	70525859 67343262 30565851 79394761     YXRpb24gQXV0aG9y
 80968b5:	58610a0d 43493552 7a526730 67677755     ..aXR5IC0gRzUwgg
 80968c5:	414d6945 53434730 49534771 51443362     EiMA0GCSqGSIb3DQ
 80968d5:	51414245 34414155 77444249 67677741     EBAQUAA4IBDwAwgg
 80968e5:	6f414b45 51414249 414a7643 584b4967     EKAoIBAQCvJAgIKX
 80968f5:	0a0d316f 4d416d6e 4c647571 6337304f     o1..nmAMqudLO07c
 8096905:	38774c66 37795252 2b442b4b 354c514b     fLw8RRy7K+D+KQL5
 8096915:	6a697756 5655495a 78582f4a 78676372     VwijZIUVJ/Xxrcgx
 8096925:	69305669 71714336 7a4b6b70 35692f6a     iV0i6CqqpkKzj/i5
 8096935:	78656256 30740a0d 6f2f7a75 31422b39     Vbex..t0uz/o9+B1
 8096945:	30377366 6d5a6250 63595649 61446739     fs70PbZmIVYc9gDa
 8096955:	76335954 3277676a 56504949 30365451     TY3vjgw2IIPVQT60
 8096965:	56574b6e 754a4653 786a7255 2f366675     nKWVSFJuUrjxuf6/
 8096975:	636b6857 0a0d7a49 44686453 53703259     WhkcIz..SdhDY2pS
 8096985:	504b3953 52424836 4a476454 48765861     S9KP6HBRTdGJaXvH
 8096995:	7a615063 304a4233 64743332 54623153     cPaz3BJ023tdS1bT
 80969a5:	5638726c 77473664 6c494b39 63387138     lr8Vd6Gw9KIl8q8c
 80969b5:	59636d6b 47516635 4f420a0d 6575512b     kmcY5fQG..BO+Que
 80969c5:	4e354151 52743630 72412f6e 4f503072     QA5N06tRn/Arr0PO
 80969d5:	2b696737 2b693373 3631307a 7639797a     7gi+s3i+z016zy9v
 80969e5:	39723941 546b3131 52485a4d 33794178     A9r911kTMZHRxAy3
 80969f5:	53476b51 52325447 0a0d2b54 53704372     QkGSGT2RT+..rCpS
 8096a05:	562f3478 6b6e4542 484e576a 70784469     x4/VBEnkjWNHiDxp
 8096a15:	2b763867 72303752 462f6b66 4f34616c     g8v+R70rfk/Fla4O
 8096a25:	5254646e 6e423851 554d2b63 6c374843     ndTRQ8Bnc+MUCH7l
 8096a35:	7a393550 4b4d4475 2f30317a 494e0a0d     P59zuDMKz10/..NI
 8096a45:	75695765 43365435 67415655 4141424d     eWiu5T6CUVAgMBAA
 8096a55:	62676a47 61677749 77447738 52564459     GjgbIwga8wDwYDVR
 8096a65:	51415430 41422f48 77417755 7a2f4245     0TAQH/BAUwAwEB/z
 8096a75:	67424f41 5148564e 66414238 0a0d4538     AOBgNVHQ8BAf8E..
 8096a85:	434d4142 77595141 49595162 4259774b     BAMCAQYwbQYIKwYB
 8096a95:	48555142 45775141 66425459 6732566f     BQUHAQwEYTBfoV2g
 8096aa5:	5a427a57 7763464d 4a595256 68315761     WzBZMFcwVRYJaW1h
 8096ab5:	7655325a 6d6c325a 7745434d 48417a48     Z2UvZ2lmMCEwHzAH
 8096ac5:	67420a0d 67447255 6747434d 2b6a5551     ..BgUrDgMCGgQUj+
 8096ad5:	6f475458 596a7361 38777235 7461412b     XTGoasjY5rw8+Aat
 8096ae5:	43474952 53473778 524a7734 48616a59     RIGCx7GS4wJRYjaH
 8096af5:	44633052 324c766f 325a7678 6d647538     R0cDovL2xvZ28udm
 8096b05:	0a0d7956 704e5861 7534325a 74393259     Vy..aXNpZ24uY29t
 8096b15:	7a5a334c 6e394762 6e357962 77595761     L3ZzbG9nby5naWYw
 8096b25:	44595148 4f305256 45594242 542f4846     HQYDVR0OBBYEFH/T
 8096b35:	4366615a 37796533 4a414438 354d3038     ZafC3ey78DAJ80M5
 8096b45:	764b672b 7a4d0a0d 414d7a45 53434730     +gKv..MzEzMA0GCS
 8096b55:	49534771 51443362 51424245 34414155     qGSIb3DQEBBQUAA4
 8096b65:	51414249 454a5443 3258776f 4232504c     IBAQCTJEowX2LP2B
 8096b75:	7a4c5971 4a337133 5876746b 58703266     qYLz3q3JktvXf2pX
 8096b85:	4f4f696b 0a0d457a 34423670 69317145     kiOOzE..p6B4Eq1i
 8096b95:	77566b44 6e584d5a 7459326c 2b6c416d     DkVwZMXnl2YtmAl+
 8096ba5:	572f3658 6c68437a 71476738 48704243     X6/WzChl8gGqCBpH
 8096bb5:	356e7633 614a4a66 676b4743 2b6b6444     3vn5fJJaCGkgDdk+
 8096bc5:	38345762 59375744 67350a0d 42515261     bW48DW7Y..5gaRQB
 8096bd5:	4d2b3569 39337448 75714274 4d495743     i5+MHt39tBquCWIM
 8096be5:	425a4e6e 63673455 7137556d 514b454b     nNZBU4gcmU7qKEKQ
 8096bf5:	34625473 4e446237 74416c30 78696b75     sTb47bDN0lAtukix
 8096c05:	6b30456c 57423646 0a0d4b6c 67394557     lE0kF6BWlK..WE9g
 8096c15:	43366e79 43736761 58556971 6258624f     yn6CagsCqiUXObXb
 8096c25:	45652b66 5671535a 47327269 42366c33     f+eEZSqVir2G3l6B
 8096c35:	744d6f46 657a4d45 4369612f 6f306d4b     FoMtEMze/aiCKm0o
 8096c45:	4c307748 6e584f78 5a596947 66340a0d     Hw0LxOXnGiYZ..4f
 8096c55:	78625251 666c3143 67516e7a 38327955     QRbxC1lfznQgUy28
 8096c65:	56556436 70746f34 31304636 58707676     6dUV4otp6F01vvpX
 8096c75:	48514631 77744f4b 67447235 7a4d3762     1FQHKOtw5rDgb7Mz
 8096c85:	62634956 344a6469 565a4576 0a0d4e38     VIcbidJ4vEZV8N..
 8096c95:	63616e68 32724852 327a566c 49495458     hnacRHr2lVz2XTII
 8096ca5:	5552364d 2f676874 797a4661 46716b51     M6RUthg/aFzyQkqF
 8096cb5:	4453464f 6f483958 734b504c 6f616445     OFSDX9HoLPKsEdao
 8096cc5:	714e5737 2d2d0a0d 452d2d2d 4320444e     7WNq..-----END C
 8096cd5:	49545245 41434946 2d2d4554 002d2d2d     ERTIFICATE-----.

08096ce5 <_ZL12clientKeyPem>:
 8096ce5:	2d2d2d2d 4745422d 52204e49 50204153     -----BEGIN RSA P
 8096cf5:	41564952 4b204554 2d2d5945 202d2d2d     RIVATE KEY----- 
 8096d05:	494d0a0d 776f4549 41414249 5141434b     ..MIIEowIBAAKCAQ
 8096d15:	477a4145 4e354673 592b7753 6f336e74     EAzGsF5NSw+Ytn3o
 8096d25:	4f536739 41447552 2b4a3042 746f6d32     9gSORuDAB0J+2mot
 8096d35:	44594377 6c352b37 4251634d 52713433     wCYD7+5lMcQB34qR
 8096d45:	0a0d6133 56317837 38747948 42483062     3a..7x1VHyt8b0HB
 8096d55:	6833786a 704b6f61 34635145 57724463     jx3haoKpEQc4cDrW
 8096d65:	59437a34 35484a76 3934384f 4e746b63     4zCYvJH5O849cktN
 8096d75:	31617172 4e585834 68756d55 48462b4b     rqa14XXNUmuhK+FH
 8096d85:	5a2b7659 356b0a0d 41547648 37574830     Yv+Z..k5HvTA0HW7
 8096d95:	47524b67 617a6e54 52546432 5a363866     gKRGTnza2dTRf86Z
 8096da5:	38724342 43373630 52717a5a 7969646f     BCr8067CZzqRodiy
 8096db5:	356f4772 64546133 44675146 734e684f     rGo53aTdFQgDOhNs
 8096dc5:	2f6e5063 0a0d6a74 542f2f34 59313636     cPn/tj..4//T661Y
 8096dd5:	41653978 51764435 30626371 2f4a4165     x9eA5DvQqcb0eAJ/
 8096de5:	45396a62 436d4a2f 61484a48 78504779     bj9E/JmCHJHayGPx
 8096df5:	4f6e5a4f 64615659 31684d55 2f78565a     OZnOYVadUMh1ZVx/
 8096e05:	4c76716f 6e383173 31690a0d 6f705267     oqvLs18n..i1gRpo
 8096e15:	6a344848 6c4b5a77 45685137 30476a31     HH4jwZKl7QhE1jG0
 8096e25:	48544d58 58426253 43504e74 41466975     XMTHSbBXtNPCuiFA
 8096e35:	43667444 4d50326c 48633731 6971386c     DtfCl2PM17cHl8qi
 8096e45:	58734f65 4f534d50 0a0d4956 5961784d     eOsXPMSOVI..MxaY
 8096e55:	66776558 77713077 434b3547 386c2f69     Xewfw0qwG5KCi/l8
 8096e65:	63757539 5a513254 68493434 487a6a7a     9uucT2QZ44IhzjzH
 8096e75:	44495148 42415141 42496f41 55694841     HQIDAQABAoIBAHiU
 8096e85:	45764c51 51676b67 786f5535 4c420a0d     QLvEgkgQ5Uox..BL
 8096e95:	666c3669 535a6164 7855516f 68394a55     i6lfdaZSoQUxUJ9h
 8096ea5:	41315454 6b7a4551 71343773 6f515076     TT1AQEzks74qvPQo
 8096eb5:	2f6d3939 6b38774a 41586d75 5a745269     99m/Jw8kumXAiRtZ
 8096ec5:	7452672f 6b685734 78556449 0a0d6368     /gRt4WhkIdUxhc..
 8096ed5:	54774257 434c7864 616a7843 70356f4e     WBwTdxLCCxjaNo5p
 8096ee5:	4578434a 6c4d7345 474c6358 39646864     JCxEEsMlXcLGdhd9
 8096ef5:	4d666863 57323349 65706479 41417961     chfMI32WydpeayAA
 8096f05:	7a4d5937 7a412f66 746e4330 32684977     7YMzf/Az0CntwIh2
 8096f15:	4f350a0d 616f6254 3544456f 44744231     ..5OTboaoED51BtD
 8096f25:	4b4a6235 61623252 4b7a5266 4448457a     5bJKR2bafRzKzEHD
 8096f35:	6b4d4462 447a3962 64374779 7a683976     bDMkb9zDyG7dv9hz
 8096f45:	33705643 5332637a 2f4f615a 542f3077     CVp3zc2SZaO/w0/T
 8096f55:	0a0d364b 78434d66 6f4f5144 4c587739     K6..fMCxDQOo9wXL
 8096f65:	612f7238 304f716d 70434a6c 76447550     8r/amqO0lJCpPuDv
 8096f75:	494b4973 6c394161 61316170 4a486d77     sIKIaA9lpa1awmHJ
 8096f85:	596a526b 6c6f3463 41567a31 394b5144     kRjYc4ol1zVADQK9
 8096f95:	31707a54 38340a0d 4e474d35 46523048     Tzp1..485MGNH0RF
 8096fa5:	57357a6e 2b413769 562f7533 41362b78     nz5Wi7A+3u/Vx+6A
 8096fb5:	43435171 444a4a34 50414c49 3649766b     qQCC4JJDILAPkvI6
 8096fc5:	43675069 67696170 34546a73 43536d43     iPgCpaigsjT4CmSC
 8096fd5:	5168316b 0a0d6a6d 56713561 436b5837     k1hQmj..a5qV7XkC
 8096fe5:	41455967 4c78462b 46704973 746e6152     gYEA+FxLsIpFRant
 8096ff5:	482f4d6e 58665933 5a516663 32364171     nM/H3YfXcfQZqA62
 8097005:	4b59756c 6357334a 56545438 64396e76     luYKJ3Wc8TTVvn9d
 8097015:	4d742f56 6c5a4f67 61750a0d 43556545     V/tMgOZl..uaEeUC
 8097025:	39374774 3743472b 6d717672 4c4a3744     tG79+GC7rvqmD7JL
 8097035:	504e426c 2f2f2f73 685a3539 68713159     lBNPs///95ZhY1qh
 8097045:	2b764b5a 416f487a 30727859 62564a41     ZKv+zHoAYxr0AJVb
 8097055:	34783337 50333736 0a0d726e 54367354     73x4673Pnr..Ts6T
 8097065:	61394b4b 53504633 324c7552 64395948     KK9a3FPSRuL2HY9d
 8097075:	35653575 4a6a554a 4c474259 626d4f37     u5e5JUjJYBGL7Omb
 8097085:	756e2b43 4a757879 31324471 42435132     C+nuyxuJqD212QCB
 8097095:	434d4134 41455967 30537230 68530a0d     4AMCgYEA0rS0..Sh
 80970a5:	325a5477 4b795156 6d386d61 44684e33     wTZ2VQyKam8m3NhD
 80970b5:	47315141 53733156 526d4f65 54543379     AQ1GV1sSeOmRy3TT
 80970c5:	316e3645 47313769 3165416f 3839436a     E6n1i71GoAe1jC98
 80970d5:	6e336a31 75497435 374e6145 0a0d557a     1j3n5tIuEaN7zU..
 80970e5:	64696c63 6347364f 706d7159 55314b37     clidO6GcYqmp7K1U
 80970f5:	72795157 4b4b5833 52356139 6c787169     WQyr3XKK9a5Riqxl
 8097105:	51472f6f 725a547a 342b4b76 5165366c     o/GQzTZrvK+4l6eQ
 8097115:	6b6b4763 334b4151 6c6d7979 316f6565     cGkkQAK3yymleeo1
 8097125:	55780a0d 69797a6b 70536e6f 414d5555     ..xUkzyionSpUUMA
 8097135:	74547971 4d397738 66364735 67374d6b     qyTt8w9M5G6fkM7g
 8097145:	6c764553 6c345949 59674338 32394145     SEvlIY4l8CgYEA92
 8097155:	5367436e 7a6e4e6b 53474d75 666e6f59     nCgSkNnzuMGSYonf
 8097165:	0a0d416a 71584b57 722b536c 73493646     jA..WKXqlS+rF6Is
 8097175:	32685778 57677849 514c6f51 462f3138     xWh2IxgWQoLQ81/F
 8097185:	52643773 6e325636 51674150 6c39387a     s7dR6V2nPAgQz89l
 8097195:	7a4f7630 66423534 494e4251 47585538     0vOz45BfQBNI8UXG
 80971a5:	676b5057 2b370a0d 754c3644 344a736d     WPkg..7+D6LumsJ4
 80971b5:	65787976 4377466a 64355462 654d7261     vyxejFwCbT5darMe
 80971c5:	634a774a 5261572f 77494469 30516c6d     JwJc/WaRiDIwmlQ0
 80971d5:	52634235 5a515371 78726270 61675443     5BcRqSQZpbrxCTga
 80971e5:	43394441 0a0d6d38 2f6c4b72 7477704b     AD9C8m..rKl/Kpwt
 80971f5:	57706170 634c514e 674f4530 43386748     papWNQLc0EOgHg8C
 8097205:	4e415967 666e332b 672b5256 704f2b67     gYAN+3nfVR+gg+Op
 8097215:	6c325166 46357346 3937466b 58495569     fQ2lFs5FkF79iUIX
 8097225:	68584849 4d765443 70760a0d 48565343     IHXhCTvM..vpCSVH
 8097235:	33636151 5276574a 35447277 5a437145     Qac3JWvRwrD5EqCZ
 8097245:	6361362b 546c772b 4436504a 6f342b74     +6ac+wlTJP6Dt+4o
 8097255:	6f4c626d 4a4f6445 58545a39 6750324c     mbLoEdOJ9ZTXL2Pg
 8097265:	776f6b79 784d3832 0a0d4861 7463356d     ykow28MxaH..m5ct
 8097275:	74677756 32664550 414d476f 4b6e7159     VwgtPEf2oGMAYqnK
 8097285:	4351614b 4e2f6c73 4c494679 75466f4a     KaQCsl/NyFILJoFu
 8097295:	4e2f2f54 5a6b6a66 38767775 496d6547     T//NfjkZuwv8GemI
 80972a5:	46755578 48615561 69745059 64470a0d     xUuFaUaHYPti..Gd
 80972b5:	77355761 4467424b 4661364c 43524633     aW5wKBgDL6aF3FRC
 80972c5:	4f59774f 5a6e4e73 354a6d58 76617149     OwYOsNnZXmJ5Iqav
 80972d5:	4c647a30 4e676362 4e764e51 4935794d     0zdLbcgNQNvNMy5I
 80972e5:	754b5258 69464a37 532b3373 0a0d6931     XRKu7JFis3+S1i..
 80972f5:	4664657a 6d63666e 2b704741 45534271     zedFnfcmAGp+qBSE
 8097305:	6a766457 68384743 304b784a 6d573863     WdvjCG8hJxK0c8Wm
 8097315:	3048702f 67666434 3656426e 46395361     /pH04dfgnBV6aS9F
 8097325:	4f4b6155 6647436c 6c6b3336 75796651     UaKOlCGf63klQfyu
 8097335:	2b4a0a0d 32455236 50654b53 6872634a     ..J+6RE2SKePJcrh
 8097345:	36714f46 4768666f 35704336 56777449     FOq6ofhG6Cp5ItwV
 8097355:	42446e48 3352334f 734a7537 73427852     HnDBO3R37uJsRxBs
 8097365:	6267796b 0a0d4a43 2d2d2d2d 444e452d     kygbCJ..-----END
 8097375:	41535220 49525020 45544156 59454b20      RSA PRIVATE KEY
 8097385:	2d2d2d2d 0020002d                                -----.

0809738b <CSWTCH.59>:
 809738b:	00000020 00000040 00000060                        ...@...`

08097394 <_ZTV8SPIClass>:
	...
 809739c:	0809159d 0809159f                       ........

080973a4 <_ZL14clock_divisors>:
 80973a4:	18100800 38302820                       .... (08

080973ac <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 80973b4:	08091719 0809171f 08091813 0809172b     ............+...
 80973c4:	0809171b                                ....

080973c8 <_ZTV9TCPClient>:
	...
 80973d0:	08081c9d 08081cd1 080916eb 08091aa5     ................
 80973e0:	08091891 080917df 080917b1 08091701     ................
 80973f0:	080919c1 08091731 0809182f 0809190d     ....1.../.......
 8097400:	08091ac9 08091b1b 08091705 006e616e     ............nan.
 8097410:	0066766f 00666e69 66006e6c 6564006e     ovf.inf.ln.fn.de
 8097420:	6c696174 000a0d00 30313025 5d002075     tail....%010u .]
 8097430:	29280020 2000203a 6f63005b 3d206564      .(): . [.code =
 8097440:	69250020 74656400 736c6961 00203d20      .%i.details = .
 8097450:	64756162 72655300 006c6169 53425355     baud.Serial.USBS
 8097460:	61697265 7000316c 6d617261 646d6300     erial1.param.cmd
 8097470:	00646900 00646e68 6d727473 6c696600     .id.hnd.strm.fil
 8097480:	766c0074 6461006c 6e614864 72656c64     t.lvl.addHandler
 8097490:	6d657200 4865766f 6c646e61 65007265     .removeHandler.e
 80974a0:	486d756e 6c646e61 00737265 4e4f534a     numHandlers.JSON
 80974b0:	65727453 6f4c6d61 6e614867 72656c64     StreamLogHandler
 80974c0:	70706100 6e6f6e00 72740065 00656361     .app.none.trace.
 80974d0:	6f666e69 72617700 7265006e 00726f72     info.warn.error.
 80974e0:	696e6170 6c610063 005a006c 33302b25     panic.all.Z.%+03
 80974f0:	30253a64 25007532 6d252d59 5464252d     d:%02u.%Y-%m-%dT
 8097500:	253a4825 53253a4d 61007a25 69746373     %H:%M:%S%z.ascti
 8097510:	0000656d                                me..

08097514 <_ZTV9IPAddress>:
	...
 809751c:	0809215b 0809214d 0809214f              [!..M!..O!..

08097528 <_ZTV9USBSerial>:
	...
 8097530:	080921fd 08092241 0809221b 08091c41     .!..A"..."..A...
 8097540:	08092215 080921ff 08092207 0809223b     ."...!..."..;"..
 8097550:	0809220f 080921f9                       ."...!..

08097558 <_ZTVN5spark13CellularClassE>:
	...
 8097560:	08092379                                y#..

08097564 <_ZN5spark7NetworkE>:
 8097564:	2000460c                                .F. 

08097568 <_ZTV11USARTSerial>:
	...
 8097570:	080923c1 080923e5 080923f1 08091c41     .#...#...#..A...
 8097580:	080923cd 080923d9 080923d3 080923df     .#...#...#...#..
 8097590:	080923c3 080923c7                       .#...#..

08097598 <_ZTV7TwoWire>:
	...
 80975a0:	08092495 080924df 080924b7 08092497     .$...$...$...$..
 80975b0:	080924bf 080924c7 080924cf 080924d7     .$...$...$...$..

080975c0 <__sf_fake_stdin>:
	...

080975e0 <__sf_fake_stdout>:
	...

08097600 <__sf_fake_stderr>:
	...

08097620 <link_const_variable_data_end>:
 8097620:	080803d9 	.word	0x080803d9
 8097624:	080804a5 	.word	0x080804a5
 8097628:	080804a9 	.word	0x080804a9
 809762c:	080804ad 	.word	0x080804ad
 8097630:	080804b1 	.word	0x080804b1
 8097634:	080804b5 	.word	0x080804b5
 8097638:	08080acd 	.word	0x08080acd
 809763c:	08080ad1 	.word	0x08080ad1
 8097640:	08080ad5 	.word	0x08080ad5
 8097644:	08080ad9 	.word	0x08080ad9
 8097648:	08080fa3 	.word	0x08080fa3
 809764c:	080810f5 	.word	0x080810f5
 8097650:	08081795 	.word	0x08081795
 8097654:	080817b9 	.word	0x080817b9
 8097658:	080817bd 	.word	0x080817bd
 809765c:	08081ad5 	.word	0x08081ad5
 8097660:	08081bd9 	.word	0x08081bd9
 8097664:	080826f1 	.word	0x080826f1
 8097668:	080907e9 	.word	0x080907e9
 809766c:	080907ed 	.word	0x080907ed
 8097670:	08091049 	.word	0x08091049
 8097674:	080910a9 	.word	0x080910a9
 8097678:	080916e5 	.word	0x080916e5
 809767c:	08091f59 	.word	0x08091f59
 8097680:	08091f69 	.word	0x08091f69
 8097684:	08091fe9 	.word	0x08091fe9
 8097688:	08092385 	.word	0x08092385
 809768c:	080925f1 	.word	0x080925f1
 8097690:	0809264d 	.word	0x0809264d
 8097694:	080926c9 	.word	0x080926c9
 8097698:	0809274d 	.word	0x0809274d
 809769c:	08092811 	.word	0x08092811
 80976a0:	080928d5 	.word	0x080928d5

080976a4 <link_constructors_end>:
	...
