
C:/Users/appel.60a/Documents/TCU/Telematics/src/telematics/target/telematics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015f18  08080018  08080018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  08095f30  08095f30  00025f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .backup       00000004  40024000  08095f38  00034000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000d0  20000400  08095f3c  00040400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00003b98  200004d0  200004d0  000504d0  2**3
                  ALLOC
  6 .module_info_suffix 00000028  0809600c  0809600c  0004600c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  08096034  08096034  00046034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001a4356  00000000  00000000  00046038  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00024385  00000000  00000000  001ea38e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000496d0  00000000  00000000  0020e713  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003b88  00000000  00000000  00257de3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005b78  00000000  00000000  0025b96b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003ffef  00000000  00000000  002614e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00057213  00000000  00000000  002a14d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000acde3  00000000  00000000  002f86e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000112f4  00000000  00000000  003a54c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080018 <user_part_module>:
 8080018:	7c 24 09 08                                         |$..

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <module_user_pre_init+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <module_user_pre_init+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f012 f98c 	bl	809234a <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <module_user_pre_init+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <module_user_pre_init+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f012 f9ac 	bl	8092396 <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <module_user_pre_init+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000400 	.word	0x20000400
 8080048:	08095f3c 	.word	0x08095f3c
 808004c:	200004d0 	.word	0x200004d0
 8080050:	200004d0 	.word	0x200004d0
 8080054:	20004068 	.word	0x20004068
 8080058:	20004068 	.word	0x20004068

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f011 f939 	bl	80912d4 <module_user_init_hook>
 8080062:	4b07      	ldr	r3, [pc, #28]	; (8080080 <module_user_init+0x24>)
 8080064:	4c07      	ldr	r4, [pc, #28]	; (8080084 <module_user_init+0x28>)
 8080066:	461e      	mov	r6, r3
 8080068:	1ae4      	subs	r4, r4, r3
 808006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808006c:	2500      	movs	r5, #0
 808006e:	42a5      	cmp	r5, r4
 8080070:	d004      	beq.n	808007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8080076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f8      	b.n	808006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 808007c:	bd70      	pop	{r4, r5, r6, pc}
 808007e:	bf00      	nop
 8080080:	08095ea4 	.word	0x08095ea4
 8080084:	08095f28 	.word	0x08095f28

08080088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080088:	f000 b818 	b.w	80800bc <setup>

0808008c <module_user_loop>:
}

void module_user_loop() {
 808008c:	b508      	push	{r3, lr}
    loop();
 808008e:	f000 f85f 	bl	8080150 <loop>
    _post_loop();
}
 8080092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 8080096:	f011 b8db 	b.w	8091250 <_post_loop>

0808009a <_Znwj>:
 808009a:	f010 bbe5 	b.w	8090868 <malloc>

0808009e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 808009e:	f010 bbe3 	b.w	8090868 <malloc>

080800a2 <_ZdlPv>:
 80800a2:	f010 bbe9 	b.w	8090878 <free>

080800a6 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
 80800a6:	f010 bbe7 	b.w	8090878 <free>

080800aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800aa:	7800      	ldrb	r0, [r0, #0]
 80800ac:	fab0 f080 	clz	r0, r0
 80800b0:	0940      	lsrs	r0, r0, #5
 80800b2:	4770      	bx	lr

080800b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800b4:	2301      	movs	r3, #1
 80800b6:	7003      	strb	r3, [r0, #0]
 80800b8:	4770      	bx	lr
	...

080800bc <setup>:


//SdFat sd_test;
//File myfile;

void setup() {
 80800bc:	b510      	push	{r4, lr}
    
    Serial.begin(9600); //start Serial output
 80800be:	f011 f9db 	bl	8091478 <_Z16_fetch_usbserialv>
 80800c2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80800c6:	f011 f9bd 	bl	8091444 <_ZN9USBSerial5beginEl>
    delay(5000);        //wait for user, needs to be updated
 80800ca:	f241 3088 	movw	r0, #5000	; 0x1388
 80800ce:	f011 f847 	bl	8091160 <delay>

    //setup 
    dof->begin();       //turn on dof board 
 80800d2:	4b18      	ldr	r3, [pc, #96]	; (8080134 <setup+0x78>)
       
    //turn on gps
    pinMode(D6, OUTPUT);
    digitalWrite(D6,LOW);
    gps.begin(9600);
 80800d4:	4c18      	ldr	r4, [pc, #96]	; (8080138 <setup+0x7c>)
    
    Serial.begin(9600); //start Serial output
    delay(5000);        //wait for user, needs to be updated

    //setup 
    dof->begin();       //turn on dof board 
 80800d6:	6818      	ldr	r0, [r3, #0]
 80800d8:	f010 f92e 	bl	8090338 <_ZN3DOF5beginEv>
       
    //turn on gps
    pinMode(D6, OUTPUT);
 80800dc:	2101      	movs	r1, #1
 80800de:	2006      	movs	r0, #6
 80800e0:	f011 fb40 	bl	8091764 <pinMode>
    digitalWrite(D6,LOW);
 80800e4:	2100      	movs	r1, #0
 80800e6:	2006      	movs	r0, #6
 80800e8:	f011 fb4d 	bl	8091786 <digitalWrite>
    gps.begin(9600);
 80800ec:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80800f0:	4620      	mov	r0, r4
 80800f2:	f000 f953 	bl	808039c <_ZN12Adafruit_GPS5beginEm>
    gps.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
 80800f6:	4911      	ldr	r1, [pc, #68]	; (808013c <setup+0x80>)
 80800f8:	4620      	mov	r0, r4
 80800fa:	f000 f958 	bl	80803ae <_ZN12Adafruit_GPS11sendCommandEPKc>
    delay(500);
 80800fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8080102:	f011 f82d 	bl	8091160 <delay>
    gps.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ);
 8080106:	490e      	ldr	r1, [pc, #56]	; (8080140 <setup+0x84>)
 8080108:	4620      	mov	r0, r4
 808010a:	f000 f950 	bl	80803ae <_ZN12Adafruit_GPS11sendCommandEPKc>
    delay(500);
 808010e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8080112:	f011 f825 	bl	8091160 <delay>

    //start can communication
    stn->begin();
 8080116:	4b0b      	ldr	r3, [pc, #44]	; (8080144 <setup+0x88>)
 8080118:	6818      	ldr	r0, [r3, #0]
 808011a:	f00f fd5f 	bl	808fbdc <_ZN3CAN5beginEv>
    Serial5.println("ATSH7DF");
 808011e:	f00f fd13 	bl	808fb48 <_Z22__fetch_global_Serial5v>
 8080122:	4909      	ldr	r1, [pc, #36]	; (8080148 <setup+0x8c>)
 8080124:	f010 ffd3 	bl	80910ce <_ZN5Print7printlnEPKc>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8080128:	f010 f99e 	bl	8090468 <HAL_Timer_Get_Milli_Seconds>
    Serial.print("Decrypted Data: ");
    secretStuff->decryptData(output,put);
    Serial.println((char*)put); 
    */
  
    timer = millis();
 808012c:	4b07      	ldr	r3, [pc, #28]	; (808014c <setup+0x90>)
 808012e:	6018      	str	r0, [r3, #0]
 8080130:	bd10      	pop	{r4, pc}
 8080132:	bf00      	nop
 8080134:	20003390 	.word	0x20003390
 8080138:	20003394 	.word	0x20003394
 808013c:	08092490 	.word	0x08092490
 8080140:	080924c2 	.word	0x080924c2
 8080144:	20003408 	.word	0x20003408
 8080148:	080924d3 	.word	0x080924d3
 808014c:	200004dc 	.word	0x200004dc

08080150 <loop>:
}
void loop() {
 8080150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080154:	b089      	sub	sp, #36	; 0x24
 8080156:	f010 f987 	bl	8090468 <HAL_Timer_Get_Milli_Seconds>

	//run every 2s
    if (millis() - timer > 2000){
 808015a:	4c53      	ldr	r4, [pc, #332]	; (80802a8 <loop+0x158>)
 808015c:	6823      	ldr	r3, [r4, #0]
 808015e:	1ac0      	subs	r0, r0, r3
 8080160:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8080164:	f240 809c 	bls.w	80802a0 <loop+0x150>
 8080168:	f010 f97e 	bl	8090468 <HAL_Timer_Get_Milli_Seconds>
        timer = millis();
 808016c:	6020      	str	r0, [r4, #0]

        //internal_function(internal_records,internal_settings);
        CAN_function(pid_list,num_pids,can_records);

    #if MQTT_STATUS
        if(os_mutex_trylock(mqtt_mutex)){
 808016e:	4c4f      	ldr	r4, [pc, #316]	; (80802ac <loop+0x15c>)
	//run every 2s
    if (millis() - timer > 2000){
        timer = millis();

        //internal_function(internal_records,internal_settings);
        CAN_function(pid_list,num_pids,can_records);
 8080170:	4a4f      	ldr	r2, [pc, #316]	; (80802b0 <loop+0x160>)
 8080172:	210a      	movs	r1, #10
 8080174:	484f      	ldr	r0, [pc, #316]	; (80802b4 <loop+0x164>)
 8080176:	f00f fed7 	bl	808ff28 <_Z12CAN_functionPPciRi>

    #if MQTT_STATUS
        if(os_mutex_trylock(mqtt_mutex)){
 808017a:	6820      	ldr	r0, [r4, #0]
 808017c:	f010 f9bc 	bl	80904f8 <os_mutex_trylock>
 8080180:	f8df b168 	ldr.w	fp, [pc, #360]	; 80802ec <loop+0x19c>
 8080184:	9401      	str	r4, [sp, #4]
 8080186:	4f4a      	ldr	r7, [pc, #296]	; (80802b0 <loop+0x160>)
 8080188:	2800      	cmp	r0, #0
 808018a:	f000 8085 	beq.w	8080298 <loop+0x148>

        	memset(jsonMessage,'\0',sizeof(jsonMessage));
 808018e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8080192:	2100      	movs	r1, #0
 8080194:	4848      	ldr	r0, [pc, #288]	; (80802b8 <loop+0x168>)
 8080196:	f012 f8fe 	bl	8092396 <memset>

        	//set the message type
            uint8_t message_id = 0;
			message_id = 0;
			if(internal_records > 0)
 808019a:	f8db 3000 	ldr.w	r3, [fp]
 808019e:	f8df 8150 	ldr.w	r8, [pc, #336]	; 80802f0 <loop+0x1a0>
 80801a2:	2b00      	cmp	r3, #0
 80801a4:	f8df 914c 	ldr.w	r9, [pc, #332]	; 80802f4 <loop+0x1a4>
			{
				new_gps_flag = true;
 80801a8:	bfc2      	ittt	gt
 80801aa:	2301      	movgt	r3, #1
 80801ac:	f888 3000 	strbgt.w	r3, [r8]
				new_dof_flag = true;
 80801b0:	f889 3000 	strbgt.w	r3, [r9]
			}
			if(can_records > 0 )
 80801b4:	683b      	ldr	r3, [r7, #0]
 80801b6:	4e41      	ldr	r6, [pc, #260]	; (80802bc <loop+0x16c>)
 80801b8:	2b00      	cmp	r3, #0
			{
				new_can_flag = true;
 80801ba:	bfc4      	itt	gt
 80801bc:	2301      	movgt	r3, #1
 80801be:	7033      	strbgt	r3, [r6, #0]
			}
			message_id = message_id | (new_can_flag << 3);
			message_id = message_id | (new_dof_flag << 2);
			message_id = message_id | (new_gps_flag << 1);
 80801c0:	f899 3000 	ldrb.w	r3, [r9]
 80801c4:	7832      	ldrb	r2, [r6, #0]
 80801c6:	009b      	lsls	r3, r3, #2
 80801c8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80801cc:	f898 2000 	ldrb.w	r2, [r8]
			char message_num[3];
			snprintf(message_num,3,"%d",message_id);
 80801d0:	2103      	movs	r1, #3
			{
				new_can_flag = true;
			}
			message_id = message_id | (new_can_flag << 3);
			message_id = message_id | (new_dof_flag << 2);
			message_id = message_id | (new_gps_flag << 1);
 80801d2:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 80801d6:	b25b      	sxtb	r3, r3
			char message_num[3];
			snprintf(message_num,3,"%d",message_id);
 80801d8:	4a39      	ldr	r2, [pc, #228]	; (80802c0 <loop+0x170>)
 80801da:	a803      	add	r0, sp, #12
			{
				new_can_flag = true;
			}
			message_id = message_id | (new_can_flag << 3);
			message_id = message_id | (new_dof_flag << 2);
			message_id = message_id | (new_gps_flag << 1);
 80801dc:	9300      	str	r3, [sp, #0]
			char message_num[3];
			snprintf(message_num,3,"%d",message_id);
 80801de:	f010 fb63 	bl	80908a8 <snprintf>

			//start the creation of the json object
			strcpy(jsonMessage, "{messageid: ");		//enter messageid object
 80801e2:	4938      	ldr	r1, [pc, #224]	; (80802c4 <loop+0x174>)
 80801e4:	4834      	ldr	r0, [pc, #208]	; (80802b8 <loop+0x168>)
 80801e6:	f012 f905 	bl	80923f4 <strcpy>
			strcat(jsonMessage, message_num);		//enter messageid object value
 80801ea:	a903      	add	r1, sp, #12
 80801ec:	4832      	ldr	r0, [pc, #200]	; (80802b8 <loop+0x168>)
 80801ee:	f012 f8e8 	bl	80923c2 <strcat>
			strcat(jsonMessage, ",");					//finish this object entry
 80801f2:	4935      	ldr	r1, [pc, #212]	; (80802c8 <loop+0x178>)
 80801f4:	4830      	ldr	r0, [pc, #192]	; (80802b8 <loop+0x168>)
 80801f6:	f012 f8e4 	bl	80923c2 <strcat>

			//json can data structure
			if(new_can_flag){
 80801fa:	7833      	ldrb	r3, [r6, #0]
 80801fc:	2b00      	cmp	r3, #0
 80801fe:	d035      	beq.n	808026c <loop+0x11c>
				strcat(jsonMessage, "{CAN_data:[");
 8080200:	4932      	ldr	r1, [pc, #200]	; (80802cc <loop+0x17c>)
 8080202:	482d      	ldr	r0, [pc, #180]	; (80802b8 <loop+0x168>)
 8080204:	f012 f8dd 	bl	80923c2 <strcat>
 8080208:	4c31      	ldr	r4, [pc, #196]	; (80802d0 <loop+0x180>)

				for(int i = 0; i< can_records; i++){
 808020a:	f04f 0a00 	mov.w	sl, #0
 808020e:	683b      	ldr	r3, [r7, #0]
 8080210:	459a      	cmp	sl, r3
 8080212:	da27      	bge.n	8080264 <loop+0x114>
					strcat(jsonMessage, "{frame: [");
 8080214:	492f      	ldr	r1, [pc, #188]	; (80802d4 <loop+0x184>)
 8080216:	4828      	ldr	r0, [pc, #160]	; (80802b8 <loop+0x168>)
 8080218:	f012 f8d3 	bl	80923c2 <strcat>
					char temp[16];

					for(int j =0; j < strlen((char *)temp_can_buffer[i]); j++){  	//loop through current record and store
 808021c:	2500      	movs	r5, #0
 808021e:	4620      	mov	r0, r4
 8080220:	f012 f8f0 	bl	8092404 <strlen>
 8080224:	42a8      	cmp	r0, r5
 8080226:	d915      	bls.n	8080254 <loop+0x104>
						snprintf(temp,16,"%c", temp_can_buffer[i][j]);
 8080228:	2110      	movs	r1, #16
 808022a:	5d63      	ldrb	r3, [r4, r5]
 808022c:	4a2a      	ldr	r2, [pc, #168]	; (80802d8 <loop+0x188>)
 808022e:	eb0d 0001 	add.w	r0, sp, r1
 8080232:	f010 fb39 	bl	80908a8 <snprintf>
						strcat(jsonMessage,temp);									//add data to json data structure
 8080236:	a904      	add	r1, sp, #16
 8080238:	481f      	ldr	r0, [pc, #124]	; (80802b8 <loop+0x168>)
 808023a:	f012 f8c2 	bl	80923c2 <strcat>

						if (j != strlen((char *)temp_can_buffer[i])){
 808023e:	4620      	mov	r0, r4
 8080240:	f012 f8e0 	bl	8092404 <strlen>
 8080244:	4285      	cmp	r5, r0
 8080246:	d003      	beq.n	8080250 <loop+0x100>
							strcat(jsonMessage, ",");
 8080248:	491f      	ldr	r1, [pc, #124]	; (80802c8 <loop+0x178>)
 808024a:	481b      	ldr	r0, [pc, #108]	; (80802b8 <loop+0x168>)
 808024c:	f012 f8b9 	bl	80923c2 <strcat>

				for(int i = 0; i< can_records; i++){
					strcat(jsonMessage, "{frame: [");
					char temp[16];

					for(int j =0; j < strlen((char *)temp_can_buffer[i]); j++){  	//loop through current record and store
 8080250:	3501      	adds	r5, #1
 8080252:	e7e4      	b.n	808021e <loop+0xce>
						if (j != strlen((char *)temp_can_buffer[i])){
							strcat(jsonMessage, ",");
						}

					}
					strcat(jsonMessage, "]");
 8080254:	4921      	ldr	r1, [pc, #132]	; (80802dc <loop+0x18c>)
 8080256:	4818      	ldr	r0, [pc, #96]	; (80802b8 <loop+0x168>)
 8080258:	f012 f8b3 	bl	80923c2 <strcat>

			//json can data structure
			if(new_can_flag){
				strcat(jsonMessage, "{CAN_data:[");

				for(int i = 0; i< can_records; i++){
 808025c:	f10a 0a01 	add.w	sl, sl, #1
 8080260:	3410      	adds	r4, #16
 8080262:	e7d4      	b.n	808020e <loop+0xbe>
						}

					}
					strcat(jsonMessage, "]");
				}
				strcat(jsonMessage, "]");
 8080264:	491d      	ldr	r1, [pc, #116]	; (80802dc <loop+0x18c>)
 8080266:	4814      	ldr	r0, [pc, #80]	; (80802b8 <loop+0x168>)
 8080268:	f012 f8ab 	bl	80923c2 <strcat>
				}
			}
			*/

			//end json object
			strcat(jsonMessage, "}");
 808026c:	491c      	ldr	r1, [pc, #112]	; (80802e0 <loop+0x190>)
 808026e:	4812      	ldr	r0, [pc, #72]	; (80802b8 <loop+0x168>)
 8080270:	f012 f8a7 	bl	80923c2 <strcat>

			if(message_id != 0){
 8080274:	9b00      	ldr	r3, [sp, #0]
 8080276:	b12b      	cbz	r3, 8080284 <loop+0x134>
				//sd_storage->write(mqtt_send_buffer);
				//sd_storage->write("\n");
				awsiot->publish("cart/1",jsonMessage);    		//aws send new buffer
 8080278:	4b1a      	ldr	r3, [pc, #104]	; (80802e4 <loop+0x194>)
 808027a:	4a0f      	ldr	r2, [pc, #60]	; (80802b8 <loop+0x168>)
 808027c:	491a      	ldr	r1, [pc, #104]	; (80802e8 <loop+0x198>)
 808027e:	6818      	ldr	r0, [r3, #0]
 8080280:	f00f ff66 	bl	8090150 <_ZN3AWS7publishEPKcS1_>
			}

			new_can_flag = false;
 8080284:	2300      	movs	r3, #0
 8080286:	7033      	strb	r3, [r6, #0]
			new_dof_flag = false;
 8080288:	f889 3000 	strb.w	r3, [r9]
			new_gps_flag = false;
 808028c:	f888 3000 	strb.w	r3, [r8]
        
            os_mutex_unlock(mqtt_mutex);
 8080290:	9b01      	ldr	r3, [sp, #4]
 8080292:	6818      	ldr	r0, [r3, #0]
 8080294:	f010 f938 	bl	8090508 <os_mutex_unlock>
        }
    #endif

    can_records = 0;
 8080298:	2300      	movs	r3, #0
 808029a:	603b      	str	r3, [r7, #0]
    internal_records = 0;   
 808029c:	f8cb 3000 	str.w	r3, [fp]

        
    }
}
 80802a0:	b009      	add	sp, #36	; 0x24
 80802a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80802a6:	bf00      	nop
 80802a8:	200004dc 	.word	0x200004dc
 80802ac:	20002d40 	.word	0x20002d40
 80802b0:	200004e0 	.word	0x200004e0
 80802b4:	20000400 	.word	0x20000400
 80802b8:	200004e4 	.word	0x200004e4
 80802bc:	20003388 	.word	0x20003388
 80802c0:	08092592 	.word	0x08092592
 80802c4:	080924db 	.word	0x080924db
 80802c8:	080930f9 	.word	0x080930f9
 80802cc:	080924e8 	.word	0x080924e8
 80802d0:	20002d48 	.word	0x20002d48
 80802d4:	080924f4 	.word	0x080924f4
 80802d8:	080924fe 	.word	0x080924fe
 80802dc:	08092501 	.word	0x08092501
 80802e0:	08092503 	.word	0x08092503
 80802e4:	2000340c 	.word	0x2000340c
 80802e8:	08092505 	.word	0x08092505
 80802ec:	200004d8 	.word	0x200004d8
 80802f0:	200033e8 	.word	0x200033e8
 80802f4:	200033f0 	.word	0x200033f0

080802f8 <_GLOBAL__sub_I_SystemMode>:
 80802f8:	b508      	push	{r3, lr}
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80802fa:	f010 f835 	bl	8090368 <HAL_Pin_Map>
#include <CarT.h>
#include "SdFat.h"
//#include <SparkJson.h>


SYSTEM_THREAD(ENABLED);     //setup threading
 80802fe:	2100      	movs	r1, #0
 8080300:	2001      	movs	r0, #1
 8080302:	f010 fa81 	bl	8090808 <system_thread_set_state>

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8080306:	2003      	movs	r0, #3
 8080308:	f010 fa6e 	bl	80907e8 <set_system_mode>
SYSTEM_MODE(MANUAL);        //system mode to disable auto cell connect        
STARTUP(startup_function());//setup stratup function and block everything untill finished
 808030c:	f00f fde2 	bl	808fed4 <_Z16startup_functionv>
 8080310:	f010 f8aa 	bl	8090468 <HAL_Timer_Get_Milli_Seconds>

//holds encryption key
unsigned char key[32];
#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)
unsigned long lastSync = millis();
 8080314:	4b01      	ldr	r3, [pc, #4]	; (808031c <_GLOBAL__sub_I_SystemMode+0x24>)
 8080316:	6018      	str	r0, [r3, #0]
 8080318:	bd08      	pop	{r3, pc}
 808031a:	bf00      	nop
 808031c:	200004d4 	.word	0x200004d4

08080320 <_ZN12Adafruit_GPS11common_initEv>:
void Adafruit_GPS::common_init(void) {
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
  recvdflag   = false;
 8080320:	4a15      	ldr	r2, [pc, #84]	; (8080378 <_ZN12Adafruit_GPS11common_initEv+0x58>)
// Initialization code used by all constructor types
void Adafruit_GPS::common_init(void) {
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
 8080322:	2300      	movs	r3, #0
  recvdflag   = false;
 8080324:	7013      	strb	r3, [r2, #0]
  paused      = false;
  lineidx     = 0;
 8080326:	4a15      	ldr	r2, [pc, #84]	; (808037c <_ZN12Adafruit_GPS11common_initEv+0x5c>)
  currentline = line1;
 8080328:	4915      	ldr	r1, [pc, #84]	; (8080380 <_ZN12Adafruit_GPS11common_initEv+0x60>)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
  recvdflag   = false;
  paused      = false;
  lineidx     = 0;
 808032a:	7013      	strb	r3, [r2, #0]
  currentline = line1;
 808032c:	4a15      	ldr	r2, [pc, #84]	; (8080384 <_ZN12Adafruit_GPS11common_initEv+0x64>)
// Initialization code used by all constructor types
void Adafruit_GPS::common_init(void) {
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
 808032e:	64c3      	str	r3, [r0, #76]	; 0x4c
  recvdflag   = false;
  paused      = false;
  lineidx     = 0;
  currentline = line1;
 8080330:	6011      	str	r1, [r2, #0]
  lastline    = line2;
 8080332:	4915      	ldr	r1, [pc, #84]	; (8080388 <_ZN12Adafruit_GPS11common_initEv+0x68>)
 8080334:	4a15      	ldr	r2, [pc, #84]	; (808038c <_ZN12Adafruit_GPS11common_initEv+0x6c>)
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
  recvdflag   = false;
  paused      = false;
 8080336:	f880 304a 	strb.w	r3, [r0, #74]	; 0x4a
  lineidx     = 0;
  currentline = line1;
  lastline    = line2;
 808033a:	6011      	str	r1, [r2, #0]

  hour = minute = seconds = year = month = day =
    fixquality = satellites = 0; // uint8_t
 808033c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8080340:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8080344:	7143      	strb	r3, [r0, #5]
 8080346:	7103      	strb	r3, [r0, #4]
 8080348:	70c3      	strb	r3, [r0, #3]
 808034a:	7083      	strb	r3, [r0, #2]
 808034c:	7043      	strb	r3, [r0, #1]
 808034e:	7003      	strb	r3, [r0, #0]
  lat = lon = mag = 0; // char
 8080350:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8080354:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 8080358:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  fix = false; // boolean
 808035c:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
  milliseconds = 0; // uint16_t
 8080360:	80c3      	strh	r3, [r0, #6]
  latitude = longitude = geoidheight = altitude =
    speed = angle = magvariation = HDOP = 0.0; // float
 8080362:	2300      	movs	r3, #0
 8080364:	6343      	str	r3, [r0, #52]	; 0x34
 8080366:	6303      	str	r3, [r0, #48]	; 0x30
 8080368:	62c3      	str	r3, [r0, #44]	; 0x2c
 808036a:	6283      	str	r3, [r0, #40]	; 0x28
 808036c:	6243      	str	r3, [r0, #36]	; 0x24
 808036e:	6203      	str	r3, [r0, #32]
 8080370:	60c3      	str	r3, [r0, #12]
 8080372:	6083      	str	r3, [r0, #8]
 8080374:	4770      	bx	lr
 8080376:	bf00      	nop
 8080378:	200009c1 	.word	0x200009c1
 808037c:	200008d0 	.word	0x200008d0
 8080380:	200008d1 	.word	0x200008d1
 8080384:	200008cc 	.word	0x200008cc
 8080388:	20000949 	.word	0x20000949
 808038c:	200009c4 	.word	0x200009c4

08080390 <_ZN12Adafruit_GPSC1EP11USARTSerial>:
  gpsSwSerial = ser; // ...override gpsSwSerial with value passed.
}
#endif

// Constructor when using HardwareSerial
Adafruit_GPS::Adafruit_GPS(HardwareSerial *ser) {
 8080390:	b538      	push	{r3, r4, r5, lr}
 8080392:	460d      	mov	r5, r1
  common_init();  // Set everything to common state, then...
 8080394:	f7ff ffc4 	bl	8080320 <_ZN12Adafruit_GPS11common_initEv>
  gpsHwSerial = ser; // ...override gpsHwSerial with value passed.
 8080398:	64c5      	str	r5, [r0, #76]	; 0x4c
}
 808039a:	bd38      	pop	{r3, r4, r5, pc}

0808039c <_ZN12Adafruit_GPS5beginEm>:
  latitude = longitude = geoidheight = altitude =
    speed = angle = magvariation = HDOP = 0.0; // float
}

void Adafruit_GPS::begin(uint32_t baud)
{
 808039c:	b508      	push	{r3, lr}
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  if(gpsSwSerial)
    gpsSwSerial->begin(baud);
  else
#endif
    gpsHwSerial->begin(baud);
 808039e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80803a0:	f011 f92e 	bl	8091600 <_ZN11USARTSerial5beginEm>

  delay(10);
}
 80803a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    gpsSwSerial->begin(baud);
  else
#endif
    gpsHwSerial->begin(baud);

  delay(10);
 80803a8:	200a      	movs	r0, #10
 80803aa:	f010 bed9 	b.w	8091160 <delay>

080803ae <_ZN12Adafruit_GPS11sendCommandEPKc>:
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  if(gpsSwSerial)
    gpsSwSerial->println(str);
  else
#endif
    gpsHwSerial->println(str);
 80803ae:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80803b0:	f010 be8d 	b.w	80910ce <_ZN5Print7printlnEPKc>

080803b4 <_GLOBAL__sub_I_line1>:
 80803b4:	f00f bfd8 	b.w	8090368 <HAL_Pin_Map>

080803b8 <_ZN7LSM9DS14initE14interface_modehh>:
{
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
 80803b8:	b530      	push	{r4, r5, lr}
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80803ba:	2402      	movs	r4, #2
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
 80803bc:	7001      	strb	r1, [r0, #0]
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;
 80803be:	7083      	strb	r3, [r0, #2]
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80803c0:	2106      	movs	r1, #6
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80803c2:	23f5      	movs	r3, #245	; 0xf5
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 80803c4:	75c4      	strb	r4, [r0, #23]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80803c6:	2404      	movs	r4, #4
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
 80803c8:	7042      	strb	r2, [r0, #1]
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 80803ca:	80c3      	strh	r3, [r0, #6]
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80803cc:	2201      	movs	r2, #1
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80803ce:	2300      	movs	r3, #0
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 80803d0:	7201      	strb	r1, [r0, #8]
	settings.accel.scale = 2;
	// accel sample rate can be 1-6
	// 1 = 10 Hz    4 = 238 Hz
	// 2 = 50 Hz    5 = 476 Hz
	// 3 = 119 Hz   6 = 952 Hz
	settings.accel.sampleRate = 6;
 80803d2:	7601      	strb	r1, [r0, #24]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 80803d4:	f880 4020 	strb.w	r4, [r0, #32]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 80803d8:	2103      	movs	r1, #3
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80803da:	2407      	movs	r4, #7
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 80803dc:	7102      	strb	r2, [r0, #4]
	settings.gyro.enableX = true;
 80803de:	7442      	strb	r2, [r0, #17]
	settings.gyro.enableY = true;
 80803e0:	7482      	strb	r2, [r0, #18]
	settings.gyro.enableZ = true;
 80803e2:	74c2      	strb	r2, [r0, #19]
	settings.gyro.HPFCutoff = 0;
	settings.gyro.flipX = false;
	settings.gyro.flipY = false;
	settings.gyro.flipZ = false;
	settings.gyro.orientation = 0;
	settings.gyro.latchInterrupt = true;
 80803e4:	7502      	strb	r2, [r0, #20]

	settings.accel.enabled = true;
 80803e6:	7582      	strb	r2, [r0, #22]
	settings.accel.enableX = true;
 80803e8:	7642      	strb	r2, [r0, #25]
	settings.accel.enableY = true;
 80803ea:	7682      	strb	r2, [r0, #26]
	settings.accel.enableZ = true;
 80803ec:	76c2      	strb	r2, [r0, #27]
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
 80803ee:	77c2      	strb	r2, [r0, #31]
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 80803f0:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 80803f4:	7243      	strb	r3, [r0, #9]
	settings.gyro.lowPowerEnable = false;
 80803f6:	7283      	strb	r3, [r0, #10]
	settings.gyro.HPFEnable = false;
 80803f8:	72c3      	strb	r3, [r0, #11]
	// Gyro HPF cutoff frequency: value between 0-9
	// Actual value depends on sample rate. Only applies
	// if gyroHPFEnable is true.
	settings.gyro.HPFCutoff = 0;
 80803fa:	7303      	strb	r3, [r0, #12]
	settings.gyro.flipX = false;
 80803fc:	7343      	strb	r3, [r0, #13]
	settings.gyro.flipY = false;
 80803fe:	7383      	strb	r3, [r0, #14]
	settings.gyro.flipZ = false;
 8080400:	73c3      	strb	r3, [r0, #15]
	settings.gyro.orientation = 0;
 8080402:	7403      	strb	r3, [r0, #16]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 8080404:	7701      	strb	r1, [r0, #28]
	settings.accel.highResEnable = false;
 8080406:	7743      	strb	r3, [r0, #29]
	// accelHighResBandwidth can be any value between 0-3
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;
 8080408:	7783      	strb	r3, [r0, #30]
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
	settings.mag.tempCompensationEnable = false;
 808040a:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 808040e:	4604      	mov	r4, r0
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
 8080410:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
 8080414:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
 8080418:	4602      	mov	r2, r0
	settings.mag.tempCompensationEnable = false;
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
	settings.mag.ZPerformance = 3;
 808041a:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
	settings.mag.lowPowerEnable = false;
 808041e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	// magOperatingMode can be 0-2
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;
 8080422:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
	{
		gBias[i] = 0;
 8080426:	2500      	movs	r5, #0
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 8080428:	3901      	subs	r1, #1
	{
		gBias[i] = 0;
 808042a:	63e5      	str	r5, [r4, #60]	; 0x3c
		aBias[i] = 0;
 808042c:	64a5      	str	r5, [r4, #72]	; 0x48
		mBias[i] = 0;
 808042e:	6565      	str	r5, [r4, #84]	; 0x54
 8080430:	f102 0202 	add.w	r2, r2, #2
		gBiasRaw[i] = 0;
 8080434:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
		aBiasRaw[i] = 0;
 8080438:	f8a2 3064 	strh.w	r3, [r2, #100]	; 0x64
		mBiasRaw[i] = 0;
 808043c:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
 8080440:	f104 0404 	add.w	r4, r4, #4
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 8080444:	d1f0      	bne.n	8080428 <_ZN7LSM9DS14initE14interface_modehh+0x70>
		mBias[i] = 0;
		gBiasRaw[i] = 0;
		aBiasRaw[i] = 0;
		mBiasRaw[i] = 0;
	}
	_autoCalc = false;
 8080446:	f04f 0300 	mov.w	r3, #0
 808044a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
 808044e:	bd30      	pop	{r4, r5, pc}

08080450 <_ZN7LSM9DS1C1Ev>:

#define COMMUNICATION_TIMEOUT 1000 // Set timeout to 1s

float magSensitivity[4] = {0.00014, 0.00029, 0.00043, 0.00058};

LSM9DS1::LSM9DS1()
 8080450:	b510      	push	{r4, lr}
{
	init(IMU_MODE_I2C, LSM9DS1_AG_ADDR(1), LSM9DS1_M_ADDR(1));
 8080452:	231e      	movs	r3, #30
 8080454:	226b      	movs	r2, #107	; 0x6b
 8080456:	2101      	movs	r1, #1
 8080458:	f7ff ffae 	bl	80803b8 <_ZN7LSM9DS14initE14interface_modehh>
}
 808045c:	bd10      	pop	{r4, pc}

0808045e <_ZN7LSM9DS18calcgResEv>:
	// And write the new register value back into CTRL_REG5_XM:
	mWriteByte(CTRL_REG1_M, temp);
}

void LSM9DS1::calcgRes()
{
 808045e:	b510      	push	{r4, lr}
 8080460:	4604      	mov	r4, r0
	gRes = ((float) settings.gyro.scale) / 32768.0;
 8080462:	88c0      	ldrh	r0, [r0, #6]
 8080464:	f011 fc14 	bl	8091c90 <__aeabi_ui2f>
 8080468:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 808046c:	f011 fc68 	bl	8091d40 <__aeabi_fmul>
 8080470:	6760      	str	r0, [r4, #116]	; 0x74
 8080472:	bd10      	pop	{r4, pc}

08080474 <_ZN7LSM9DS18calcaResEv>:
}

void LSM9DS1::calcaRes()
{
 8080474:	b510      	push	{r4, lr}
 8080476:	4604      	mov	r4, r0
	aRes = ((float) settings.accel.scale) / 32768.0;
 8080478:	7dc0      	ldrb	r0, [r0, #23]
 808047a:	f011 fc09 	bl	8091c90 <__aeabi_ui2f>
 808047e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 8080482:	f011 fc5d 	bl	8091d40 <__aeabi_fmul>
 8080486:	67a0      	str	r0, [r4, #120]	; 0x78
 8080488:	bd10      	pop	{r4, pc}
	...

0808048c <_ZN7LSM9DS18calcmResEv>:
}

void LSM9DS1::calcmRes()
{
	//mRes = ((float) settings.mag.scale) / 32768.0;
	switch (settings.mag.scale)
 808048c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8080490:	3b04      	subs	r3, #4
 8080492:	2b0c      	cmp	r3, #12
 8080494:	d814      	bhi.n	80804c0 <_ZN7LSM9DS18calcmResEv+0x34>
 8080496:	e8df f003 	tbb	[pc, r3]
 808049a:	1307      	.short	0x1307
 808049c:	130a1313 	.word	0x130a1313
 80804a0:	130d1313 	.word	0x130d1313
 80804a4:	1313      	.short	0x1313
 80804a6:	10          	.byte	0x10
 80804a7:	00          	.byte	0x00
	{
	case 4:
		mRes = magSensitivity[0];
 80804a8:	4b06      	ldr	r3, [pc, #24]	; (80804c4 <_ZN7LSM9DS18calcmResEv+0x38>)
 80804aa:	681b      	ldr	r3, [r3, #0]
 80804ac:	e007      	b.n	80804be <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 8:
		mRes = magSensitivity[1];
 80804ae:	4b05      	ldr	r3, [pc, #20]	; (80804c4 <_ZN7LSM9DS18calcmResEv+0x38>)
 80804b0:	685b      	ldr	r3, [r3, #4]
 80804b2:	e004      	b.n	80804be <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 12:
		mRes = magSensitivity[2];
 80804b4:	4b03      	ldr	r3, [pc, #12]	; (80804c4 <_ZN7LSM9DS18calcmResEv+0x38>)
 80804b6:	689b      	ldr	r3, [r3, #8]
 80804b8:	e001      	b.n	80804be <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 16:
		mRes = magSensitivity[3];
 80804ba:	4b02      	ldr	r3, [pc, #8]	; (80804c4 <_ZN7LSM9DS18calcmResEv+0x38>)
 80804bc:	68db      	ldr	r3, [r3, #12]
 80804be:	67c3      	str	r3, [r0, #124]	; 0x7c
 80804c0:	4770      	bx	lr
 80804c2:	bf00      	nop
 80804c4:	20000428 	.word	0x20000428

080804c8 <_ZN7LSM9DS115constrainScalesEv>:
	return (xgReadByte(FIFO_SRC) & 0x3F);
}

void LSM9DS1::constrainScales()
{
	if ((settings.gyro.scale != 245) && (settings.gyro.scale != 500) && 
 80804c8:	88c3      	ldrh	r3, [r0, #6]
 80804ca:	2bf5      	cmp	r3, #245	; 0xf5
 80804cc:	d007      	beq.n	80804de <_ZN7LSM9DS115constrainScalesEv+0x16>
 80804ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80804d2:	d004      	beq.n	80804de <_ZN7LSM9DS115constrainScalesEv+0x16>
 80804d4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
		(settings.gyro.scale != 2000))
	{
		settings.gyro.scale = 245;
 80804d8:	bf1c      	itt	ne
 80804da:	23f5      	movne	r3, #245	; 0xf5
 80804dc:	80c3      	strhne	r3, [r0, #6]
	}
		
	if ((settings.accel.scale != 2) && (settings.accel.scale != 4) &&
 80804de:	7dc2      	ldrb	r2, [r0, #23]
 80804e0:	2a10      	cmp	r2, #16
 80804e2:	d803      	bhi.n	80804ec <_ZN7LSM9DS115constrainScalesEv+0x24>
 80804e4:	4b08      	ldr	r3, [pc, #32]	; (8080508 <_ZN7LSM9DS115constrainScalesEv+0x40>)
 80804e6:	40d3      	lsrs	r3, r2
 80804e8:	07da      	lsls	r2, r3, #31
 80804ea:	d401      	bmi.n	80804f0 <_ZN7LSM9DS115constrainScalesEv+0x28>
		(settings.accel.scale != 8) && (settings.accel.scale != 16))
	{
		settings.accel.scale = 2;
 80804ec:	2302      	movs	r3, #2
 80804ee:	75c3      	strb	r3, [r0, #23]
	}
		
	if ((settings.mag.scale != 4) && (settings.mag.scale != 8) &&
 80804f0:	f890 2020 	ldrb.w	r2, [r0, #32]
 80804f4:	2a10      	cmp	r2, #16
 80804f6:	d803      	bhi.n	8080500 <_ZN7LSM9DS115constrainScalesEv+0x38>
 80804f8:	4b04      	ldr	r3, [pc, #16]	; (808050c <_ZN7LSM9DS115constrainScalesEv+0x44>)
 80804fa:	40d3      	lsrs	r3, r2
 80804fc:	07db      	lsls	r3, r3, #31
 80804fe:	d402      	bmi.n	8080506 <_ZN7LSM9DS115constrainScalesEv+0x3e>
		(settings.mag.scale != 12) && (settings.mag.scale != 16))
	{
		settings.mag.scale = 4;
 8080500:	2304      	movs	r3, #4
 8080502:	f880 3020 	strb.w	r3, [r0, #32]
 8080506:	4770      	bx	lr
 8080508:	00010114 	.word	0x00010114
 808050c:	00011110 	.word	0x00011110

08080510 <_ZN7LSM9DS17initSPIEv>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadBytes(_mAddress, subAddress, dest, count);
}

void LSM9DS1::initSPI()
{
 8080510:	b510      	push	{r4, lr}
 8080512:	4604      	mov	r4, r0
	pinMode(_xgAddress, OUTPUT);
 8080514:	2101      	movs	r1, #1
 8080516:	f890 0073 	ldrb.w	r0, [r0, #115]	; 0x73
 808051a:	f011 f923 	bl	8091764 <pinMode>
	digitalWrite(_xgAddress, HIGH);
 808051e:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
 8080522:	2101      	movs	r1, #1
 8080524:	f011 f92f 	bl	8091786 <digitalWrite>
	pinMode(_mAddress, OUTPUT);
 8080528:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
 808052c:	2101      	movs	r1, #1
 808052e:	f011 f919 	bl	8091764 <pinMode>
	digitalWrite(_mAddress, HIGH);
 8080532:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
	
	SPI.begin();
 8080536:	4c0a      	ldr	r4, [pc, #40]	; (8080560 <_ZN7LSM9DS17initSPIEv+0x50>)
void LSM9DS1::initSPI()
{
	pinMode(_xgAddress, OUTPUT);
	digitalWrite(_xgAddress, HIGH);
	pinMode(_mAddress, OUTPUT);
	digitalWrite(_mAddress, HIGH);
 8080538:	2101      	movs	r1, #1
 808053a:	f011 f924 	bl	8091786 <digitalWrite>
	
	SPI.begin();
 808053e:	4620      	mov	r0, r4
 8080540:	f010 f9e6 	bl	8090910 <_ZN8SPIClass5beginEv>
	// Maximum SPI frequency is 10MHz:
	SPI.setClockDivider(SPI_CLOCK_DIV4); // Photon requires min. DIV4
 8080544:	4620      	mov	r0, r4
 8080546:	2108      	movs	r1, #8
 8080548:	f010 fa3a 	bl	80909c0 <_ZN8SPIClass15setClockDividerEh>
	// Data is read and written MSb first.
	SPI.setBitOrder(MSBFIRST);
 808054c:	4620      	mov	r0, r4
 808054e:	2101      	movs	r1, #1
 8080550:	f010 f9e9 	bl	8090926 <_ZN8SPIClass11setBitOrderEh>
	// Data is captured on rising edge of clock (CPHA = 0)
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
 8080554:	4620      	mov	r0, r4
}
 8080556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SPI.setClockDivider(SPI_CLOCK_DIV4); // Photon requires min. DIV4
	// Data is read and written MSb first.
	SPI.setBitOrder(MSBFIRST);
	// Data is captured on rising edge of clock (CPHA = 0)
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
 808055a:	2100      	movs	r1, #0
 808055c:	f010 b9e6 	b.w	809092c <_ZN8SPIClass11setDataModeEh>
 8080560:	20003f70 	.word	0x20003f70

08080564 <_ZN7LSM9DS112SPIwriteByteEhhh>:
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
 8080564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	digitalWrite(csPin, LOW); // Initiate communication
 8080566:	460c      	mov	r4, r1
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
 8080568:	4617      	mov	r7, r2
 808056a:	461e      	mov	r6, r3
	digitalWrite(csPin, LOW); // Initiate communication
	
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
 808056c:	4d09      	ldr	r5, [pc, #36]	; (8080594 <_ZN7LSM9DS112SPIwriteByteEhhh+0x30>)
	SPI.setDataMode(SPI_MODE0);
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
	digitalWrite(csPin, LOW); // Initiate communication
 808056e:	4620      	mov	r0, r4
 8080570:	2100      	movs	r1, #0
 8080572:	f011 f908 	bl	8091786 <digitalWrite>
	
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
 8080576:	f007 013f 	and.w	r1, r7, #63	; 0x3f
 808057a:	4628      	mov	r0, r5
 808057c:	f010 fa34 	bl	80909e8 <_ZN8SPIClass8transferEh>
	SPI.transfer(data); // Send data
 8080580:	4631      	mov	r1, r6
 8080582:	4628      	mov	r0, r5
 8080584:	f010 fa30 	bl	80909e8 <_ZN8SPIClass8transferEh>
	
	digitalWrite(csPin, HIGH); // Close communication
 8080588:	4620      	mov	r0, r4
}
 808058a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
	SPI.transfer(data); // Send data
	
	digitalWrite(csPin, HIGH); // Close communication
 808058e:	2101      	movs	r1, #1
 8080590:	f011 b8f9 	b.w	8091786 <digitalWrite>
 8080594:	20003f70 	.word	0x20003f70

08080598 <_ZN7LSM9DS112SPIreadBytesEhhPhh>:
	return temp;
}

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
 8080598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808059a:	461e      	mov	r6, r3
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 808059c:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 80805a0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80805a4:	428b      	cmp	r3, r1
	return temp;
}

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
 80805a6:	f89d 7018 	ldrb.w	r7, [sp, #24]
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 80805aa:	f042 0580 	orr.w	r5, r2, #128	; 0x80
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 80805ae:	d103      	bne.n	80805b8 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x20>
 80805b0:	2f01      	cmp	r7, #1
		rAddress |= 0x40;
 80805b2:	bf88      	it	hi
 80805b4:	f045 0540 	orrhi.w	r5, r5, #64	; 0x40
	
	digitalWrite(csPin, LOW); // Initiate communication
 80805b8:	b28c      	uxth	r4, r1
 80805ba:	4620      	mov	r0, r4
 80805bc:	2100      	movs	r1, #0
 80805be:	f011 f8e2 	bl	8091786 <digitalWrite>
	SPI.transfer(rAddress);
 80805c2:	4629      	mov	r1, r5
 80805c4:	4809      	ldr	r0, [pc, #36]	; (80805ec <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x54>)
 80805c6:	f010 fa0f 	bl	80909e8 <_ZN8SPIClass8transferEh>
 80805ca:	4635      	mov	r5, r6
	for (int i=0; i<count; i++)
 80805cc:	1bab      	subs	r3, r5, r6
 80805ce:	429f      	cmp	r7, r3
 80805d0:	dd06      	ble.n	80805e0 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x48>
	{
		dest[i] = SPI.transfer(0x00); // Read into destination array
 80805d2:	2100      	movs	r1, #0
 80805d4:	4805      	ldr	r0, [pc, #20]	; (80805ec <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x54>)
 80805d6:	f010 fa07 	bl	80909e8 <_ZN8SPIClass8transferEh>
 80805da:	f805 0b01 	strb.w	r0, [r5], #1
	if ((csPin == _mAddress) && count > 1)
		rAddress |= 0x40;
	
	digitalWrite(csPin, LOW); // Initiate communication
	SPI.transfer(rAddress);
	for (int i=0; i<count; i++)
 80805de:	e7f5      	b.n	80805cc <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x34>
	{
		dest[i] = SPI.transfer(0x00); // Read into destination array
	}
	digitalWrite(csPin, HIGH); // Close communication
 80805e0:	4620      	mov	r0, r4
 80805e2:	2101      	movs	r1, #1
 80805e4:	f011 f8cf 	bl	8091786 <digitalWrite>
	
	return 1;
}
 80805e8:	2001      	movs	r0, #1
 80805ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80805ec:	20003f70 	.word	0x20003f70

080805f0 <_ZN7LSM9DS111SPIreadByteEhh>:
	
	digitalWrite(csPin, HIGH); // Close communication
}

uint8_t LSM9DS1::SPIreadByte(uint8_t csPin, uint8_t subAddress)
{
 80805f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t temp;
	// Use the multiple read function to read 1 byte. 
	// Value is returned to `temp`.
	SPIreadBytes(csPin, subAddress, &temp, 1);
 80805f2:	2301      	movs	r3, #1
 80805f4:	9300      	str	r3, [sp, #0]
 80805f6:	f10d 030f 	add.w	r3, sp, #15
 80805fa:	f7ff ffcd 	bl	8080598 <_ZN7LSM9DS112SPIreadBytesEhhPhh>
	return temp;
}
 80805fe:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8080602:	b005      	add	sp, #20
 8080604:	f85d fb04 	ldr.w	pc, [sp], #4

08080608 <_ZN7LSM9DS17initI2CEv>:
	
	return 1;
}

void LSM9DS1::initI2C()
{
 8080608:	b508      	push	{r3, lr}
	Wire.begin();	// Initialize I2C library
 808060a:	f011 f91b 	bl	8091844 <_Z19__fetch_global_Wirev>
}
 808060e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return 1;
}

void LSM9DS1::initI2C()
{
	Wire.begin();	// Initialize I2C library
 8080612:	f011 b861 	b.w	80916d8 <_ZN7TwoWire5beginEv>

08080616 <_ZN7LSM9DS112I2CwriteByteEhhh>:
}

// Wire.h read and write protocols
void LSM9DS1::I2CwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 8080616:	b570      	push	{r4, r5, r6, lr}
 8080618:	460e      	mov	r6, r1
 808061a:	4615      	mov	r5, r2
 808061c:	461c      	mov	r4, r3
	Wire.beginTransmission(address);  // Initialize the Tx buffer
 808061e:	f011 f911 	bl	8091844 <_Z19__fetch_global_Wirev>
 8080622:	4631      	mov	r1, r6
 8080624:	f011 f86a 	bl	80916fc <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);           // Put slave register address in Tx buffer
 8080628:	f011 f90c 	bl	8091844 <_Z19__fetch_global_Wirev>
 808062c:	6803      	ldr	r3, [r0, #0]
 808062e:	4629      	mov	r1, r5
 8080630:	689b      	ldr	r3, [r3, #8]
 8080632:	4798      	blx	r3
	Wire.write(data);                 // Put data in Tx buffer
 8080634:	f011 f906 	bl	8091844 <_Z19__fetch_global_Wirev>
 8080638:	6803      	ldr	r3, [r0, #0]
 808063a:	4621      	mov	r1, r4
 808063c:	689a      	ldr	r2, [r3, #8]
 808063e:	4790      	blx	r2
	Wire.endTransmission();           // Send the Tx buffer
 8080640:	f011 f900 	bl	8091844 <_Z19__fetch_global_Wirev>
}
 8080644:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void LSM9DS1::I2CwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
	Wire.beginTransmission(address);  // Initialize the Tx buffer
	Wire.write(subAddress);           // Put slave register address in Tx buffer
	Wire.write(data);                 // Put data in Tx buffer
	Wire.endTransmission();           // Send the Tx buffer
 8080648:	f011 b860 	b.w	809170c <_ZN7TwoWire15endTransmissionEv>

0808064c <_ZN7LSM9DS111xgWriteByteEhh>:
		settings.mag.scale = 4;
	}
}

void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
 808064c:	4613      	mov	r3, r2
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 808064e:	7802      	ldrb	r2, [r0, #0]
		settings.mag.scale = 4;
	}
}

void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
 8080650:	b410      	push	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 8080652:	2a01      	cmp	r2, #1
 8080654:	d105      	bne.n	8080662 <_ZN7LSM9DS111xgWriteByteEhh+0x16>
		I2CwriteByte(_xgAddress, subAddress, data);
 8080656:	460a      	mov	r2, r1
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}
 8080658:	bc10      	pop	{r4}
void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		I2CwriteByte(_xgAddress, subAddress, data);
 808065a:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 808065e:	f7ff bfda 	b.w	8080616 <_ZN7LSM9DS112I2CwriteByteEhhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 8080662:	b92a      	cbnz	r2, 8080670 <_ZN7LSM9DS111xgWriteByteEhh+0x24>
		SPIwriteByte(_xgAddress, subAddress, data);
 8080664:	460a      	mov	r2, r1
}
 8080666:	bc10      	pop	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		I2CwriteByte(_xgAddress, subAddress, data);
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
 8080668:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 808066c:	f7ff bf7a 	b.w	8080564 <_ZN7LSM9DS112SPIwriteByteEhhh>
}
 8080670:	bc10      	pop	{r4}
 8080672:	4770      	bx	lr

08080674 <_ZN7LSM9DS18initGyroEv>:
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}

void LSM9DS1::initGyro()
{
 8080674:	b510      	push	{r4, lr}
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
 8080676:	7903      	ldrb	r3, [r0, #4]
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}

void LSM9DS1::initGyro()
{
 8080678:	4604      	mov	r4, r0
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
 808067a:	b113      	cbz	r3, 8080682 <_ZN7LSM9DS18initGyroEv+0xe>
	{
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
 808067c:	7a03      	ldrb	r3, [r0, #8]
 808067e:	015b      	lsls	r3, r3, #5
 8080680:	b2db      	uxtb	r3, r3
	}
	switch (settings.gyro.scale)
 8080682:	88e2      	ldrh	r2, [r4, #6]
 8080684:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 8080688:	d005      	beq.n	8080696 <_ZN7LSM9DS18initGyroEv+0x22>
 808068a:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 808068e:	d104      	bne.n	808069a <_ZN7LSM9DS18initGyroEv+0x26>
	{
		case 500:
			tempRegValue |= (0x1 << 3);
			break;
		case 2000:
			tempRegValue |= (0x3 << 3);
 8080690:	f043 0318 	orr.w	r3, r3, #24
			break;
 8080694:	e001      	b.n	808069a <_ZN7LSM9DS18initGyroEv+0x26>
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
	}
	switch (settings.gyro.scale)
	{
		case 500:
			tempRegValue |= (0x1 << 3);
 8080696:	f043 0308 	orr.w	r3, r3, #8
		case 2000:
			tempRegValue |= (0x3 << 3);
			break;
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
 808069a:	7a62      	ldrb	r2, [r4, #9]
	xgWriteByte(CTRL_REG1_G, tempRegValue);
 808069c:	2110      	movs	r1, #16
		case 2000:
			tempRegValue |= (0x3 << 3);
			break;
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
 808069e:	f002 0203 	and.w	r2, r2, #3
	xgWriteByte(CTRL_REG1_G, tempRegValue);
 80806a2:	431a      	orrs	r2, r3
 80806a4:	4620      	mov	r0, r4
 80806a6:	f7ff ffd1 	bl	808064c <_ZN7LSM9DS111xgWriteByteEhh>
	
	// CTRL_REG2_G (Default value: 0x00)
	// [0][0][0][0][INT_SEL1][INT_SEL0][OUT_SEL1][OUT_SEL0]
	// INT_SEL[1:0] - INT selection configuration
	// OUT_SEL[1:0] - Out selection configuration
	xgWriteByte(CTRL_REG2_G, 0x00);	
 80806aa:	2200      	movs	r2, #0
 80806ac:	2111      	movs	r1, #17
 80806ae:	4620      	mov	r0, r4
 80806b0:	f7ff ffcc 	bl	808064c <_ZN7LSM9DS111xgWriteByteEhh>
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
 80806b4:	7aa3      	ldrb	r3, [r4, #10]
 80806b6:	2b00      	cmp	r3, #0
	if (settings.gyro.HPFEnable)
 80806b8:	7ae3      	ldrb	r3, [r4, #11]
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
 80806ba:	bf14      	ite	ne
 80806bc:	2280      	movne	r2, #128	; 0x80
 80806be:	2200      	moveq	r2, #0
	if (settings.gyro.HPFEnable)
 80806c0:	b12b      	cbz	r3, 80806ce <_ZN7LSM9DS18initGyroEv+0x5a>
	{
		tempRegValue |= (1<<6) | (settings.gyro.HPFCutoff & 0x0F);
 80806c2:	7b23      	ldrb	r3, [r4, #12]
 80806c4:	f003 030f 	and.w	r3, r3, #15
 80806c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80806cc:	431a      	orrs	r2, r3
	}
	xgWriteByte(CTRL_REG3_G, tempRegValue);
 80806ce:	2112      	movs	r1, #18
 80806d0:	4620      	mov	r0, r4
 80806d2:	f7ff ffbb 	bl	808064c <_ZN7LSM9DS111xgWriteByteEhh>
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
 80806d6:	7ce3      	ldrb	r3, [r4, #19]
 80806d8:	2b00      	cmp	r3, #0
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
 80806da:	7ca3      	ldrb	r3, [r4, #18]
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
 80806dc:	bf0c      	ite	eq
 80806de:	2200      	moveq	r2, #0
 80806e0:	2220      	movne	r2, #32
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
 80806e2:	b113      	cbz	r3, 80806ea <_ZN7LSM9DS18initGyroEv+0x76>
 80806e4:	f042 0210 	orr.w	r2, r2, #16
 80806e8:	b2d2      	uxtb	r2, r2
	if (settings.gyro.enableX) tempRegValue |= (1<<3);
 80806ea:	7c63      	ldrb	r3, [r4, #17]
 80806ec:	b10b      	cbz	r3, 80806f2 <_ZN7LSM9DS18initGyroEv+0x7e>
 80806ee:	f042 0208 	orr.w	r2, r2, #8
	if (settings.gyro.latchInterrupt) tempRegValue |= (1<<1);
 80806f2:	7d23      	ldrb	r3, [r4, #20]
 80806f4:	b10b      	cbz	r3, 80806fa <_ZN7LSM9DS18initGyroEv+0x86>
 80806f6:	f042 0202 	orr.w	r2, r2, #2
	xgWriteByte(CTRL_REG4, tempRegValue);
 80806fa:	211e      	movs	r1, #30
 80806fc:	4620      	mov	r0, r4
 80806fe:	f7ff ffa5 	bl	808064c <_ZN7LSM9DS111xgWriteByteEhh>
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
 8080702:	7b63      	ldrb	r3, [r4, #13]
 8080704:	2b00      	cmp	r3, #0
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
 8080706:	7ba3      	ldrb	r3, [r4, #14]
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
 8080708:	bf0c      	ite	eq
 808070a:	2200      	moveq	r2, #0
 808070c:	2220      	movne	r2, #32
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
 808070e:	b113      	cbz	r3, 8080716 <_ZN7LSM9DS18initGyroEv+0xa2>
 8080710:	f042 0210 	orr.w	r2, r2, #16
 8080714:	b2d2      	uxtb	r2, r2
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
 8080716:	7be3      	ldrb	r3, [r4, #15]
 8080718:	b10b      	cbz	r3, 808071e <_ZN7LSM9DS18initGyroEv+0xaa>
 808071a:	f042 0208 	orr.w	r2, r2, #8
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
 808071e:	4620      	mov	r0, r4
}
 8080720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
 8080724:	2113      	movs	r1, #19
 8080726:	f7ff bf91 	b.w	808064c <_ZN7LSM9DS111xgWriteByteEhh>

0808072a <_ZN7LSM9DS19initAccelEv>:
}

void LSM9DS1::initAccel()
{
 808072a:	b510      	push	{r4, lr}
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 808072c:	7ec3      	ldrb	r3, [r0, #27]
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
}

void LSM9DS1::initAccel()
{
 808072e:	4604      	mov	r4, r0
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 8080730:	2b00      	cmp	r3, #0
	if (settings.accel.enableY) tempRegValue |= (1<<4);
 8080732:	7e83      	ldrb	r3, [r0, #26]
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 8080734:	bf0c      	ite	eq
 8080736:	2200      	moveq	r2, #0
 8080738:	2220      	movne	r2, #32
	if (settings.accel.enableY) tempRegValue |= (1<<4);
 808073a:	b113      	cbz	r3, 8080742 <_ZN7LSM9DS19initAccelEv+0x18>
 808073c:	f042 0210 	orr.w	r2, r2, #16
 8080740:	b2d2      	uxtb	r2, r2
	if (settings.accel.enableX) tempRegValue |= (1<<3);
 8080742:	7e63      	ldrb	r3, [r4, #25]
 8080744:	b10b      	cbz	r3, 808074a <_ZN7LSM9DS19initAccelEv+0x20>
 8080746:	f042 0208 	orr.w	r2, r2, #8
	
	xgWriteByte(CTRL_REG5_XL, tempRegValue);
 808074a:	211f      	movs	r1, #31
 808074c:	4620      	mov	r0, r4
 808074e:	f7ff ff7d 	bl	808064c <_ZN7LSM9DS111xgWriteByteEhh>
	// FS_XL[1:0] - Full-scale selection
	// BW_SCAL_ODR - Bandwidth selection
	// BW_XL[1:0] - Anti-aliasing filter bandwidth selection
	tempRegValue = 0;
	// To disable the accel, set the sampleRate bits to 0.
	if (settings.accel.enabled)
 8080752:	7da2      	ldrb	r2, [r4, #22]
 8080754:	b112      	cbz	r2, 808075c <_ZN7LSM9DS19initAccelEv+0x32>
	{
		tempRegValue |= (settings.accel.sampleRate & 0x07) << 5;
 8080756:	7e22      	ldrb	r2, [r4, #24]
 8080758:	0152      	lsls	r2, r2, #5
 808075a:	b2d2      	uxtb	r2, r2
	}
	switch (settings.accel.scale)
 808075c:	7de3      	ldrb	r3, [r4, #23]
 808075e:	2b08      	cmp	r3, #8
 8080760:	d006      	beq.n	8080770 <_ZN7LSM9DS19initAccelEv+0x46>
 8080762:	2b10      	cmp	r3, #16
 8080764:	d007      	beq.n	8080776 <_ZN7LSM9DS19initAccelEv+0x4c>
 8080766:	2b04      	cmp	r3, #4
 8080768:	d107      	bne.n	808077a <_ZN7LSM9DS19initAccelEv+0x50>
	{
		case 4:
			tempRegValue |= (0x2 << 3);
 808076a:	f042 0210 	orr.w	r2, r2, #16
			break;
 808076e:	e004      	b.n	808077a <_ZN7LSM9DS19initAccelEv+0x50>
		case 8:
			tempRegValue |= (0x3 << 3);
 8080770:	f042 0218 	orr.w	r2, r2, #24
			break;
 8080774:	e001      	b.n	808077a <_ZN7LSM9DS19initAccelEv+0x50>
		case 16:
			tempRegValue |= (0x1 << 3);
 8080776:	f042 0208 	orr.w	r2, r2, #8
			break;
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
 808077a:	f994 301c 	ldrsb.w	r3, [r4, #28]
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
		tempRegValue |= (settings.accel.bandwidth & 0x03);
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 808077e:	2120      	movs	r1, #32
		case 16:
			tempRegValue |= (0x1 << 3);
			break;
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
 8080780:	2b00      	cmp	r3, #0
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
		tempRegValue |= (settings.accel.bandwidth & 0x03);
 8080782:	bfa2      	ittt	ge
 8080784:	f003 0303 	andge.w	r3, r3, #3
 8080788:	431a      	orrge	r2, r3
 808078a:	f042 0204 	orrge.w	r2, r2, #4
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 808078e:	4620      	mov	r0, r4
 8080790:	f7ff ff5c 	bl	808064c <_ZN7LSM9DS111xgWriteByteEhh>
	// HR - High resolution mode (0: disable, 1: enable)
	// DCF[1:0] - Digital filter cutoff frequency
	// FDS - Filtered data selection
	// HPIS1 - HPF enabled for interrupt function
	tempRegValue = 0;
	if (settings.accel.highResEnable)
 8080794:	7f62      	ldrb	r2, [r4, #29]
 8080796:	b12a      	cbz	r2, 80807a4 <_ZN7LSM9DS19initAccelEv+0x7a>
	{
		tempRegValue |= (1<<7); // Set HR bit
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
 8080798:	7fa2      	ldrb	r2, [r4, #30]
 808079a:	0152      	lsls	r2, r2, #5
 808079c:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80807a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
 80807a4:	4620      	mov	r0, r4
}
 80807a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (settings.accel.highResEnable)
	{
		tempRegValue |= (1<<7); // Set HR bit
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
 80807aa:	2121      	movs	r1, #33	; 0x21
 80807ac:	f7ff bf4e 	b.w	808064c <_ZN7LSM9DS111xgWriteByteEhh>

080807b0 <_ZN7LSM9DS110mWriteByteEhh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}

uint8_t LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
 80807b0:	b510      	push	{r4, lr}
 80807b2:	4613      	mov	r3, r2
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80807b4:	7802      	ldrb	r2, [r0, #0]
 80807b6:	2a01      	cmp	r2, #1
 80807b8:	d105      	bne.n	80807c6 <_ZN7LSM9DS110mWriteByteEhh+0x16>
		I2CwriteByte(_mAddress, subAddress, data);
 80807ba:	460a      	mov	r2, r1
 80807bc:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80807c0:	f7ff ff29 	bl	8080616 <_ZN7LSM9DS112I2CwriteByteEhhh>
 80807c4:	e005      	b.n	80807d2 <_ZN7LSM9DS110mWriteByteEhh+0x22>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80807c6:	b922      	cbnz	r2, 80807d2 <_ZN7LSM9DS110mWriteByteEhh+0x22>
		SPIwriteByte(_mAddress, subAddress, data);
 80807c8:	460a      	mov	r2, r1
 80807ca:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80807ce:	f7ff fec9 	bl	8080564 <_ZN7LSM9DS112SPIwriteByteEhhh>
	return 0;
}
 80807d2:	2000      	movs	r0, #0
 80807d4:	bd10      	pop	{r4, pc}
	...

080807d8 <_ZN7LSM9DS17initMagEv>:
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
}

void LSM9DS1::initMag()
{
 80807d8:	b510      	push	{r4, lr}
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80807da:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
}

void LSM9DS1::initMag()
{
 80807de:	4604      	mov	r4, r0
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80807e0:	2b00      	cmp	r3, #0
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80807e2:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80807e6:	bf08      	it	eq
 80807e8:	2200      	moveq	r2, #0
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80807ea:	ea4f 1343 	mov.w	r3, r3, lsl #5
 80807ee:	f003 0160 	and.w	r1, r3, #96	; 0x60
 80807f2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 80807f6:	bf18      	it	ne
 80807f8:	2280      	movne	r2, #128	; 0x80
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 80807fa:	009b      	lsls	r3, r3, #2
 80807fc:	f003 031c 	and.w	r3, r3, #28
 8080800:	430b      	orrs	r3, r1
	mWriteByte(CTRL_REG1_M, tempRegValue);
 8080802:	431a      	orrs	r2, r3
 8080804:	2120      	movs	r1, #32
 8080806:	f7ff ffd3 	bl	80807b0 <_ZN7LSM9DS110mWriteByteEhh>
 808080a:	f894 3020 	ldrb.w	r3, [r4, #32]
	case 16:
		tempRegValue |= (0x3 << 5);
		break;
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
 808080e:	2121      	movs	r1, #33	; 0x21
 8080810:	3b08      	subs	r3, #8
 8080812:	b2db      	uxtb	r3, r3
 8080814:	2b08      	cmp	r3, #8
 8080816:	bf96      	itet	ls
 8080818:	4a12      	ldrls	r2, [pc, #72]	; (8080864 <_ZN7LSM9DS17initMagEv+0x8c>)
	// [0][FS1][FS0][0][REBOOT][SOFT_RST][0][0]
	// FS[1:0] - Full-scale configuration
	// REBOOT - Reboot memory content (0:normal, 1:reboot)
	// SOFT_RST - Reset config and user registers (0:default, 1:reset)
	tempRegValue = 0;
	switch (settings.mag.scale)
 808081a:	2200      	movhi	r2, #0
 808081c:	5cd2      	ldrbls	r2, [r2, r3]
	case 16:
		tempRegValue |= (0x3 << 5);
		break;
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
 808081e:	4620      	mov	r0, r4
 8080820:	f7ff ffc6 	bl	80807b0 <_ZN7LSM9DS110mWriteByteEhh>
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 8080824:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
	tempRegValue |= (settings.mag.operatingMode & 0x3);
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
 8080828:	2122      	movs	r1, #34	; 0x22
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 808082a:	2b00      	cmp	r3, #0
	tempRegValue |= (settings.mag.operatingMode & 0x3);
 808082c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 8080830:	bf0c      	ite	eq
 8080832:	2200      	moveq	r2, #0
 8080834:	2220      	movne	r2, #32
	tempRegValue |= (settings.mag.operatingMode & 0x3);
 8080836:	f003 0303 	and.w	r3, r3, #3
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
 808083a:	431a      	orrs	r2, r3
 808083c:	4620      	mov	r0, r4
 808083e:	f7ff ffb7 	bl	80807b0 <_ZN7LSM9DS110mWriteByteEhh>
	//	00:low-power mode, 01:medium performance
	//	10:high performance, 10:ultra-high performance
	// BLE - Big/little endian data
	tempRegValue = 0;
	tempRegValue = (settings.mag.ZPerformance & 0x3) << 2;
	mWriteByte(CTRL_REG4_M, tempRegValue);
 8080842:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8080846:	2123      	movs	r1, #35	; 0x23
 8080848:	0092      	lsls	r2, r2, #2
 808084a:	f002 020c 	and.w	r2, r2, #12
 808084e:	4620      	mov	r0, r4
 8080850:	f7ff ffae 	bl	80807b0 <_ZN7LSM9DS110mWriteByteEhh>
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
 8080854:	4620      	mov	r0, r4
}
 8080856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
 808085a:	2200      	movs	r2, #0
 808085c:	2124      	movs	r1, #36	; 0x24
 808085e:	f7ff bfa7 	b.w	80807b0 <_ZN7LSM9DS110mWriteByteEhh>
 8080862:	bf00      	nop
 8080864:	08092539 	.word	0x08092539

08080868 <_ZN7LSM9DS111I2CreadByteEhh>:
	Wire.write(data);                 // Put data in Tx buffer
	Wire.endTransmission();           // Send the Tx buffer
}

uint8_t LSM9DS1::I2CreadByte(uint8_t address, uint8_t subAddress)
{
 8080868:	b538      	push	{r3, r4, r5, lr}
 808086a:	460c      	mov	r4, r1
 808086c:	4615      	mov	r5, r2
	uint8_t data; // `data` will store the register data	 
	Wire.beginTransmission(address);         // Initialize the Tx buffer
 808086e:	f010 ffe9 	bl	8091844 <_Z19__fetch_global_Wirev>
 8080872:	4621      	mov	r1, r4
 8080874:	f010 ff42 	bl	80916fc <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);	                 // Put slave register address in Tx buffer
 8080878:	f010 ffe4 	bl	8091844 <_Z19__fetch_global_Wirev>
 808087c:	6803      	ldr	r3, [r0, #0]
 808087e:	4629      	mov	r1, r5
 8080880:	689b      	ldr	r3, [r3, #8]
 8080882:	4798      	blx	r3
	Wire.endTransmission(false);             // Send the Tx buffer, but send a restart to keep connection alive
 8080884:	f010 ffde 	bl	8091844 <_Z19__fetch_global_Wirev>
 8080888:	2100      	movs	r1, #0
 808088a:	f010 ff3b 	bl	8091704 <_ZN7TwoWire15endTransmissionEh>
	Wire.requestFrom(address, (uint8_t) 1);  // Read one byte from slave register address 
 808088e:	f010 ffd9 	bl	8091844 <_Z19__fetch_global_Wirev>
 8080892:	2201      	movs	r2, #1
 8080894:	4621      	mov	r1, r4
 8080896:	f010 ff2e 	bl	80916f6 <_ZN7TwoWire11requestFromEhh>
	data = Wire.read();                      // Fill Rx buffer with result
 808089a:	f010 ffd3 	bl	8091844 <_Z19__fetch_global_Wirev>
 808089e:	6803      	ldr	r3, [r0, #0]
 80808a0:	695b      	ldr	r3, [r3, #20]
 80808a2:	4798      	blx	r3
	return data;                             // Return data read from slave register
}
 80808a4:	b2c0      	uxtb	r0, r0
 80808a6:	bd38      	pop	{r3, r4, r5, pc}

080808a8 <_ZN7LSM9DS110xgReadByteEh>:
		SPIwriteByte(_mAddress, subAddress, data);
	return 0;
}

uint8_t LSM9DS1::xgReadByte(uint8_t subAddress)
{
 80808a8:	460a      	mov	r2, r1
	// Whether we're using I2C or SPI, read a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80808aa:	7801      	ldrb	r1, [r0, #0]
 80808ac:	2901      	cmp	r1, #1
 80808ae:	d103      	bne.n	80808b8 <_ZN7LSM9DS110xgReadByteEh+0x10>
		return I2CreadByte(_xgAddress, subAddress);
 80808b0:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80808b4:	f7ff bfd8 	b.w	8080868 <_ZN7LSM9DS111I2CreadByteEhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80808b8:	b919      	cbnz	r1, 80808c2 <_ZN7LSM9DS110xgReadByteEh+0x1a>
		return SPIreadByte(_xgAddress, subAddress);
 80808ba:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 80808be:	f7ff be97 	b.w	80805f0 <_ZN7LSM9DS111SPIreadByteEhh>
	
	return 0;
}
 80808c2:	2000      	movs	r0, #0
 80808c4:	4770      	bx	lr

080808c6 <_ZN7LSM9DS19mReadByteEh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadBytes(_xgAddress, subAddress, dest, count);
}

uint8_t LSM9DS1::mReadByte(uint8_t subAddress)
{
 80808c6:	460a      	mov	r2, r1
	// Whether we're using I2C or SPI, read a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 80808c8:	7801      	ldrb	r1, [r0, #0]
 80808ca:	2901      	cmp	r1, #1
 80808cc:	d103      	bne.n	80808d6 <_ZN7LSM9DS19mReadByteEh+0x10>
		return I2CreadByte(_mAddress, subAddress);
 80808ce:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80808d2:	f7ff bfc9 	b.w	8080868 <_ZN7LSM9DS111I2CreadByteEhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 80808d6:	b919      	cbnz	r1, 80808e0 <_ZN7LSM9DS19mReadByteEh+0x1a>
		return SPIreadByte(_mAddress, subAddress);
 80808d8:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 80808dc:	f7ff be88 	b.w	80805f0 <_ZN7LSM9DS111SPIreadByteEhh>
}
 80808e0:	4770      	bx	lr

080808e2 <_ZN7LSM9DS15beginEv>:
	_autoCalc = false;
}


uint16_t LSM9DS1::begin()
{
 80808e2:	b538      	push	{r3, r4, r5, lr}
 80808e4:	4604      	mov	r4, r0
	//! Todo: don't use _xgAddress or _mAddress, duplicating memory
	_xgAddress = settings.device.agAddress;
 80808e6:	7843      	ldrb	r3, [r0, #1]
 80808e8:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
	_mAddress = settings.device.mAddress;
 80808ec:	7883      	ldrb	r3, [r0, #2]
 80808ee:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
	
	constrainScales();
 80808f2:	f7ff fde9 	bl	80804c8 <_ZN7LSM9DS115constrainScalesEv>
	// Once we have the scale values, we can calculate the resolution
	// of each sensor. That's what these functions are for. One for each sensor
	calcgRes(); // Calculate DPS / ADC tick, stored in gRes variable
 80808f6:	f7ff fdb2 	bl	808045e <_ZN7LSM9DS18calcgResEv>
	calcmRes(); // Calculate Gs / ADC tick, stored in mRes variable
 80808fa:	4620      	mov	r0, r4
 80808fc:	f7ff fdc6 	bl	808048c <_ZN7LSM9DS18calcmResEv>
	calcaRes(); // Calculate g / ADC tick, stored in aRes variable
 8080900:	4620      	mov	r0, r4
 8080902:	f7ff fdb7 	bl	8080474 <_ZN7LSM9DS18calcaResEv>
	
	// Now, initialize our hardware interface.
	if (settings.device.commInterface == IMU_MODE_I2C)	// If we're using I2C
 8080906:	7823      	ldrb	r3, [r4, #0]
 8080908:	2b01      	cmp	r3, #1
 808090a:	d103      	bne.n	8080914 <_ZN7LSM9DS15beginEv+0x32>
		initI2C();	// Initialize I2C
 808090c:	4620      	mov	r0, r4
 808090e:	f7ff fe7b 	bl	8080608 <_ZN7LSM9DS17initI2CEv>
 8080912:	e003      	b.n	808091c <_ZN7LSM9DS15beginEv+0x3a>
	else if (settings.device.commInterface == IMU_MODE_SPI) 	// else, if we're using SPI
 8080914:	b913      	cbnz	r3, 808091c <_ZN7LSM9DS15beginEv+0x3a>
		initSPI();	// Initialize SPI
 8080916:	4620      	mov	r0, r4
 8080918:	f7ff fdfa 	bl	8080510 <_ZN7LSM9DS17initSPIEv>
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
 808091c:	210f      	movs	r1, #15
 808091e:	4620      	mov	r0, r4
 8080920:	f7ff ffd1 	bl	80808c6 <_ZN7LSM9DS19mReadByteEh>
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
 8080924:	210f      	movs	r1, #15
	else if (settings.device.commInterface == IMU_MODE_SPI) 	// else, if we're using SPI
		initSPI();	// Initialize SPI
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
 8080926:	4605      	mov	r5, r0
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
 8080928:	4620      	mov	r0, r4
 808092a:	f7ff ffbd 	bl	80808a8 <_ZN7LSM9DS110xgReadByteEh>
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
 808092e:	f646 033d 	movw	r3, #26685	; 0x683d
 8080932:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
 8080936:	b205      	sxth	r5, r0
 8080938:	429d      	cmp	r5, r3
 808093a:	d10a      	bne.n	8080952 <_ZN7LSM9DS15beginEv+0x70>
		return 0;
	
	// Gyro initialization stuff:
	initGyro();	// This will "turn on" the gyro. Setting up interrupts, etc.
 808093c:	4620      	mov	r0, r4
 808093e:	f7ff fe99 	bl	8080674 <_ZN7LSM9DS18initGyroEv>
	
	// Accelerometer initialization stuff:
	initAccel(); // "Turn on" all axes of the accel. Set up interrupts, etc.
 8080942:	4620      	mov	r0, r4
 8080944:	f7ff fef1 	bl	808072a <_ZN7LSM9DS19initAccelEv>
	
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
 8080948:	4620      	mov	r0, r4
 808094a:	f7ff ff45 	bl	80807d8 <_ZN7LSM9DS17initMagEv>
	
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
 808094e:	4628      	mov	r0, r5
 8080950:	bd38      	pop	{r3, r4, r5, pc}
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
		return 0;
 8080952:	2000      	movs	r0, #0
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
	
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}
 8080954:	bd38      	pop	{r3, r4, r5, pc}

08080956 <_GLOBAL__sub_I_magSensitivity>:
 8080956:	f00f bd07 	b.w	8090368 <HAL_Pin_Map>

0808095a <_GLOBAL__sub_I__ZN7istream3getEv>:
 808095a:	f00f bd05 	b.w	8090368 <HAL_Pin_Map>

0808095e <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
 808095e:	b510      	push	{r4, lr}
 8080960:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync();
 8080962:	3028      	adds	r0, #40	; 0x28
 8080964:	f000 fccc 	bl	8081300 <_ZN8FatCache4syncEv>
 8080968:	b128      	cbz	r0, 8080976 <_ZN9FatVolume9cacheSyncEv+0x18>
 808096a:	f504 700d 	add.w	r0, r4, #564	; 0x234
  }
 808096e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync();
 8080972:	f000 bcc5 	b.w	8081300 <_ZN8FatCache4syncEv>
  }
 8080976:	bd10      	pop	{r4, pc}

08080978 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
 8080978:	f00f bcf6 	b.w	8090368 <HAL_Pin_Map>

0808097c <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
 808097c:	f00f bcf4 	b.w	8090368 <HAL_Pin_Map>

08080980 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
 8080980:	f00f bcf2 	b.w	8090368 <HAL_Pin_Map>

08080984 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
 8080984:	f00f bcf0 	b.w	8090368 <HAL_Pin_Map>

08080988 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spi->receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spi->send(data);
 8080988:	6803      	ldr	r3, [r0, #0]
 808098a:	695b      	ldr	r3, [r3, #20]
 808098c:	4718      	bx	r3

0808098e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>:
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
  }
  uint8_t spiReceive() {
    return m_spi->receive();
 808098e:	6803      	ldr	r3, [r0, #0]
 8080990:	68db      	ldr	r3, [r3, #12]
 8080992:	4718      	bx	r3

08080994 <_ZN9SdSpiCard14chipSelectHighEv>:
    error(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectHigh() {
 8080994:	b510      	push	{r4, lr}
  if (!m_selected) {
 8080996:	7903      	ldrb	r3, [r0, #4]
    error(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectHigh() {
 8080998:	4604      	mov	r4, r0
  if (!m_selected) {
 808099a:	b16b      	cbz	r3, 80809b8 <_ZN9SdSpiCard14chipSelectHighEv+0x24>
    SD_CS_DBG("chipSelectHigh error");
    return;
  }
  digitalWrite(m_chipSelectPin, HIGH);
 808099c:	2101      	movs	r1, #1
 808099e:	7940      	ldrb	r0, [r0, #5]
 80809a0:	f010 fef1 	bl	8091786 <digitalWrite>
  // insure MISO goes high impedance
  spiSend(0XFF);
 80809a4:	21ff      	movs	r1, #255	; 0xff
 80809a6:	6820      	ldr	r0, [r4, #0]
 80809a8:	f7ff ffee 	bl	8080988 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
 80809ac:	6820      	ldr	r0, [r4, #0]
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
 80809ae:	6803      	ldr	r3, [r0, #0]
 80809b0:	689b      	ldr	r3, [r3, #8]
 80809b2:	4798      	blx	r3
  spiEndTransaction();
  m_selected = false;
 80809b4:	2300      	movs	r3, #0
 80809b6:	7123      	strb	r3, [r4, #4]
 80809b8:	bd10      	pop	{r4, pc}

080809ba <_ZN9SdSpiCard13chipSelectLowEv>:
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectLow() {
 80809ba:	b538      	push	{r3, r4, r5, lr}
  if (m_selected) {
 80809bc:	7905      	ldrb	r5, [r0, #4]
  spiSend(0XFF);
  spiEndTransaction();
  m_selected = false;
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectLow() {
 80809be:	4604      	mov	r4, r0
  if (m_selected) {
 80809c0:	b955      	cbnz	r5, 80809d8 <_ZN9SdSpiCard13chipSelectLowEv+0x1e>
 80809c2:	6800      	ldr	r0, [r0, #0]
  bool writeData(uint8_t token, const uint8_t* src);
  void spiBegin(uint8_t chipSelectPin) {
    m_spi->begin(chipSelectPin);
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
 80809c4:	79e1      	ldrb	r1, [r4, #7]
 80809c6:	6803      	ldr	r3, [r0, #0]
 80809c8:	685b      	ldr	r3, [r3, #4]
 80809ca:	4798      	blx	r3
    SD_CS_DBG("chipSelectLow error");
    return;
  }
  spiBeginTransaction(m_sckDivisor);
  digitalWrite(m_chipSelectPin, LOW);
 80809cc:	4629      	mov	r1, r5
 80809ce:	7960      	ldrb	r0, [r4, #5]
 80809d0:	f010 fed9 	bl	8091786 <digitalWrite>
  m_selected = true;
 80809d4:	2301      	movs	r3, #1
 80809d6:	7123      	strb	r3, [r4, #4]
 80809d8:	bd38      	pop	{r3, r4, r5, pc}

080809da <_ZN9SdSpiCard8readDataEPhj>:
    chipSelectHigh();
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
 80809da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80809dc:	4604      	mov	r4, r0
 80809de:	460d      	mov	r5, r1
 80809e0:	4616      	mov	r6, r2
 80809e2:	f00f fd41 	bl	8090468 <HAL_Timer_Get_Milli_Seconds>
 80809e6:	4607      	mov	r7, r0
#if USE_SD_CRC
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start block token
  unsigned t0 = millis();
  while ((m_status = spiReceive()) == 0XFF) {
 80809e8:	6820      	ldr	r0, [r4, #0]
 80809ea:	f7ff ffd0 	bl	808098e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 80809ee:	28ff      	cmp	r0, #255	; 0xff
 80809f0:	7220      	strb	r0, [r4, #8]
 80809f2:	d107      	bne.n	8080a04 <_ZN9SdSpiCard8readDataEPhj+0x2a>
 80809f4:	f00f fd38 	bl	8090468 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_READ_TIMEOUT) {
 80809f8:	1bc0      	subs	r0, r0, r7
 80809fa:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 80809fe:	d9f3      	bls.n	80809e8 <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8080a00:	2311      	movs	r3, #17
 8080a02:	e00c      	b.n	8080a1e <_ZN9SdSpiCard8readDataEPhj+0x44>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (m_status != DATA_START_BLOCK) {
 8080a04:	28fe      	cmp	r0, #254	; 0xfe
 8080a06:	d001      	beq.n	8080a0c <_ZN9SdSpiCard8readDataEPhj+0x32>
 8080a08:	230f      	movs	r3, #15
 8080a0a:	e008      	b.n	8080a1e <_ZN9SdSpiCard8readDataEPhj+0x44>
 8080a0c:	6820      	ldr	r0, [r4, #0]
  }
  uint8_t spiReceive() {
    return m_spi->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spi->receive(buf, n);
 8080a0e:	4632      	mov	r2, r6
 8080a10:	6803      	ldr	r3, [r0, #0]
 8080a12:	4629      	mov	r1, r5
 8080a14:	691b      	ldr	r3, [r3, #16]
 8080a16:	4798      	blx	r3
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
 8080a18:	7220      	strb	r0, [r4, #8]
 8080a1a:	b130      	cbz	r0, 8080a2a <_ZN9SdSpiCard8readDataEPhj+0x50>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8080a1c:	231c      	movs	r3, #28
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  chipSelectHigh();
 8080a1e:	4620      	mov	r0, r4
 8080a20:	71a3      	strb	r3, [r4, #6]
 8080a22:	f7ff ffb7 	bl	8080994 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8080a26:	2000      	movs	r0, #0
}
 8080a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    error(SD_CARD_ERROR_READ_CRC);
    goto fail;
  }
#else
  // discard crc
  spiReceive();
 8080a2a:	6820      	ldr	r0, [r4, #0]
 8080a2c:	f7ff ffaf 	bl	808098e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
  spiReceive();
 8080a30:	6820      	ldr	r0, [r4, #0]
 8080a32:	f7ff ffac 	bl	808098e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8080a36:	2001      	movs	r0, #1
 8080a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08080a3a <_ZN9SdSpiCard11waitNotBusyEt>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMillis) {
 8080a3a:	b570      	push	{r4, r5, r6, lr}
 8080a3c:	4606      	mov	r6, r0
 8080a3e:	460c      	mov	r4, r1
 8080a40:	f00f fd12 	bl	8090468 <HAL_Timer_Get_Milli_Seconds>
 8080a44:	4605      	mov	r5, r0
  unsigned t0 = millis();
  while (spiReceive() != 0XFF) {
 8080a46:	6830      	ldr	r0, [r6, #0]
 8080a48:	f7ff ffa1 	bl	808098e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8080a4c:	28ff      	cmp	r0, #255	; 0xff
 8080a4e:	d006      	beq.n	8080a5e <_ZN9SdSpiCard11waitNotBusyEt+0x24>
 8080a50:	f00f fd0a 	bl	8090468 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) >= timeoutMillis) {
 8080a54:	1b40      	subs	r0, r0, r5
 8080a56:	42a0      	cmp	r0, r4
 8080a58:	d3f5      	bcc.n	8080a46 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
    }
  }
  return true;

fail:
  return false;
 8080a5a:	2000      	movs	r0, #0
 8080a5c:	bd70      	pop	{r4, r5, r6, pc}
  while (spiReceive() != 0XFF) {
    if (((unsigned)millis() - t0) >= timeoutMillis) {
      goto fail;
    }
  }
  return true;
 8080a5e:	2001      	movs	r0, #1

fail:
  return false;
}
 8080a60:	bd70      	pop	{r4, r5, r6, pc}

08080a62 <_ZN9SdSpiCard11cardCommandEhm>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 8080a62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_selected) {
 8080a64:	7903      	ldrb	r3, [r0, #4]
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 8080a66:	4604      	mov	r4, r0
 8080a68:	460d      	mov	r5, r1
 8080a6a:	9201      	str	r2, [sp, #4]
  // select card
  if (!m_selected) {
 8080a6c:	b90b      	cbnz	r3, 8080a72 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    chipSelectLow();
 8080a6e:	f7ff ffa4 	bl	80809ba <_ZN9SdSpiCard13chipSelectLowEv>
  }
  // wait if busy
  waitNotBusy(SD_WRITE_TIMEOUT);
 8080a72:	f44f 7116 	mov.w	r1, #600	; 0x258
 8080a76:	4620      	mov	r0, r4
 8080a78:	f7ff ffdf 	bl	8080a3a <_ZN9SdSpiCard11waitNotBusyEt>
  for (uint8_t k = 0; k < 6; k++) {
    spiSend(d[k]);
  }
#else  // USE_SD_CRC
  // send command
  spiSend(cmd | 0x40);
 8080a7c:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 8080a80:	6820      	ldr	r0, [r4, #0]
 8080a82:	f7ff ff81 	bl	8080988 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
 8080a86:	f10d 0607 	add.w	r6, sp, #7
 8080a8a:	f10d 0703 	add.w	r7, sp, #3

  // send argument
  for (int8_t i = 3; i >= 0; i--) {
    spiSend(pa[i]);
 8080a8e:	f816 1901 	ldrb.w	r1, [r6], #-1
 8080a92:	6820      	ldr	r0, [r4, #0]
 8080a94:	f7ff ff78 	bl	8080988 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
#else  // USE_SD_CRC
  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t i = 3; i >= 0; i--) {
 8080a98:	42be      	cmp	r6, r7
 8080a9a:	d1f8      	bne.n	8080a8e <_ZN9SdSpiCard11cardCommandEhm+0x2c>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 8080a9c:	2d00      	cmp	r5, #0
 8080a9e:	bf0c      	ite	eq
 8080aa0:	2195      	moveq	r1, #149	; 0x95
 8080aa2:	2187      	movne	r1, #135	; 0x87
 8080aa4:	6820      	ldr	r0, [r4, #0]
 8080aa6:	f7ff ff6f 	bl	8080988 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
#endif  // USE_SD_CRC

  // skip stuff byte for stop read
  if (cmd == CMD12) {
 8080aaa:	2d0c      	cmp	r5, #12
 8080aac:	d102      	bne.n	8080ab4 <_ZN9SdSpiCard11cardCommandEhm+0x52>
    spiReceive();
 8080aae:	6820      	ldr	r0, [r4, #0]
 8080ab0:	f7ff ff6d 	bl	808098e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
  for (int8_t i = 3; i >= 0; i--) {
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 8080ab4:	2500      	movs	r5, #0
  if (cmd == CMD12) {
    spiReceive();
  }

  // wait for response
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i != 0XFF; i++) {
 8080ab6:	6820      	ldr	r0, [r4, #0]
 8080ab8:	f7ff ff69 	bl	808098e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8080abc:	0603      	lsls	r3, r0, #24
 8080abe:	7220      	strb	r0, [r4, #8]
 8080ac0:	d503      	bpl.n	8080aca <_ZN9SdSpiCard11cardCommandEhm+0x68>
 8080ac2:	3501      	adds	r5, #1
 8080ac4:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8080ac8:	d1f5      	bne.n	8080ab6 <_ZN9SdSpiCard11cardCommandEhm+0x54>
  }
  return m_status;
}
 8080aca:	b003      	add	sp, #12
 8080acc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08080ace <_ZN9SdSpiCard9readBlockEmPh>:
    chipSelectHigh();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8080ace:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8080ad0:	7a43      	ldrb	r3, [r0, #9]
    chipSelectHigh();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8080ad2:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8080ad4:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8080ad6:	bf18      	it	ne
 8080ad8:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD17, blockNumber)) {
 8080ada:	460a      	mov	r2, r1
 8080adc:	2111      	movs	r1, #17
    chipSelectHigh();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8080ade:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
 8080ae0:	f7ff ffbf 	bl	8080a62 <_ZN9SdSpiCard11cardCommandEhm>
 8080ae4:	b110      	cbz	r0, 8080aec <_ZN9SdSpiCard9readBlockEmPh+0x1e>
 8080ae6:	2304      	movs	r3, #4
 8080ae8:	71a3      	strb	r3, [r4, #6]
 8080aea:	e00b      	b.n	8080b04 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
 8080aec:	4629      	mov	r1, r5
 8080aee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8080af2:	4620      	mov	r0, r4
 8080af4:	f7ff ff71 	bl	80809da <_ZN9SdSpiCard8readDataEPhj>
 8080af8:	4605      	mov	r5, r0
 8080afa:	b118      	cbz	r0, 8080b04 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  chipSelectHigh();
 8080afc:	4620      	mov	r0, r4
 8080afe:	f7ff ff49 	bl	8080994 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8080b02:	e003      	b.n	8080b0c <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  chipSelectHigh();
 8080b04:	4620      	mov	r0, r4
 8080b06:	f7ff ff45 	bl	8080994 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8080b0a:	2500      	movs	r5, #0
}
 8080b0c:	4628      	mov	r0, r5
 8080b0e:	bd38      	pop	{r3, r4, r5, pc}

08080b10 <_ZN9SdSpiCard9readStartEm>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8080b10:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 8080b12:	7a43      	ldrb	r3, [r0, #9]
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8080b14:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 8080b16:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8080b18:	bf18      	it	ne
 8080b1a:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
 8080b1c:	2112      	movs	r1, #18
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8080b1e:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
 8080b20:	f7ff ff9f 	bl	8080a62 <_ZN9SdSpiCard11cardCommandEhm>
 8080b24:	b130      	cbz	r0, 8080b34 <_ZN9SdSpiCard9readStartEm+0x24>
 8080b26:	2305      	movs	r3, #5
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8080b28:	4620      	mov	r0, r4
 8080b2a:	71a3      	strb	r3, [r4, #6]
 8080b2c:	f7ff ff32 	bl	8080994 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8080b30:	2000      	movs	r0, #0
 8080b32:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
  return true;
 8080b34:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 8080b36:	bd10      	pop	{r4, pc}

08080b38 <_ZN9SdSpiCard8readStopEv>:
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 8080b38:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
 8080b3a:	2200      	movs	r2, #0
 8080b3c:	210c      	movs	r1, #12
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 8080b3e:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
 8080b40:	f7ff ff8f 	bl	8080a62 <_ZN9SdSpiCard11cardCommandEhm>
 8080b44:	b130      	cbz	r0, 8080b54 <_ZN9SdSpiCard8readStopEv+0x1c>
 8080b46:	2303      	movs	r3, #3
  }
  chipSelectHigh();
  return true;

fail:
  chipSelectHigh();
 8080b48:	4620      	mov	r0, r4
 8080b4a:	71a3      	strb	r3, [r4, #6]
 8080b4c:	f7ff ff22 	bl	8080994 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8080b50:	2000      	movs	r0, #0
 8080b52:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  chipSelectHigh();
 8080b54:	4620      	mov	r0, r4
 8080b56:	f7ff ff1d 	bl	8080994 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8080b5a:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 8080b5c:	bd10      	pop	{r4, pc}

08080b5e <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
 8080b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080b60:	4605      	mov	r5, r0
 8080b62:	4616      	mov	r6, r2
 8080b64:	461f      	mov	r7, r3
  if (!readStart(block)) {
 8080b66:	f7ff ffd3 	bl	8080b10 <_ZN9SdSpiCard9readStartEm>
 8080b6a:	b198      	cbz	r0, 8080b94 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
 8080b6c:	2400      	movs	r4, #0
 8080b6e:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
 8080b70:	429f      	cmp	r7, r3
 8080b72:	eb06 2144 	add.w	r1, r6, r4, lsl #9
 8080b76:	d908      	bls.n	8080b8a <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
 8080b78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8080b7c:	4628      	mov	r0, r5
 8080b7e:	f7ff ff2c 	bl	80809da <_ZN9SdSpiCard8readDataEPhj>
 8080b82:	3401      	adds	r4, #1
 8080b84:	2800      	cmp	r0, #0
 8080b86:	d1f2      	bne.n	8080b6e <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
 8080b88:	e004      	b.n	8080b94 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
 8080b8a:	4628      	mov	r0, r5
}
 8080b8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
 8080b90:	f7ff bfd2 	b.w	8080b38 <_ZN9SdSpiCard8readStopEv>
}
 8080b94:	2000      	movs	r0, #0
 8080b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08080b98 <_ZN9SdSpiCard9writeDataEhPKh>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
 8080b98:	b538      	push	{r3, r4, r5, lr}
 8080b9a:	4604      	mov	r4, r0
 8080b9c:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
 8080b9e:	6800      	ldr	r0, [r0, #0]
 8080ba0:	f7ff fef2 	bl	8080988 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
 8080ba4:	6820      	ldr	r0, [r4, #0]
  }
  void spiSend(uint8_t data) {
    m_spi->send(data);
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spi->send(buf, n);
 8080ba6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8080baa:	6803      	ldr	r3, [r0, #0]
 8080bac:	4629      	mov	r1, r5
 8080bae:	699b      	ldr	r3, [r3, #24]
 8080bb0:	4798      	blx	r3
  spiSend(src, 512);
  spiSend(crc >> 8);
 8080bb2:	21ff      	movs	r1, #255	; 0xff
 8080bb4:	6820      	ldr	r0, [r4, #0]
 8080bb6:	f7ff fee7 	bl	8080988 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
  spiSend(crc & 0XFF);
 8080bba:	21ff      	movs	r1, #255	; 0xff
 8080bbc:	6820      	ldr	r0, [r4, #0]
 8080bbe:	f7ff fee3 	bl	8080988 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>

  m_status = spiReceive();
 8080bc2:	6820      	ldr	r0, [r4, #0]
 8080bc4:	f7ff fee3 	bl	808098e <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8080bc8:	7220      	strb	r0, [r4, #8]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 8080bca:	f000 001f 	and.w	r0, r0, #31
 8080bce:	2805      	cmp	r0, #5
 8080bd0:	d006      	beq.n	8080be0 <_ZN9SdSpiCard9writeDataEhPKh+0x48>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8080bd2:	2313      	movs	r3, #19
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8080bd4:	4620      	mov	r0, r4
 8080bd6:	71a3      	strb	r3, [r4, #6]
 8080bd8:	f7ff fedc 	bl	8080994 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8080bdc:	2000      	movs	r0, #0
 8080bde:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
 8080be0:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 8080be2:	bd38      	pop	{r3, r4, r5, pc}

08080be4 <_ZN9SdSpiCard10writeBlockEmPKh>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8080be4:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8080be6:	7a43      	ldrb	r3, [r0, #9]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8080be8:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8080bea:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8080bec:	bf18      	it	ne
 8080bee:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD24, blockNumber)) {
 8080bf0:	460a      	mov	r2, r1
 8080bf2:	2118      	movs	r1, #24

fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8080bf4:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
 8080bf6:	f7ff ff34 	bl	8080a62 <_ZN9SdSpiCard11cardCommandEhm>
 8080bfa:	b110      	cbz	r0, 8080c02 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
 8080bfc:	2306      	movs	r3, #6
 8080bfe:	71a3      	strb	r3, [r4, #6]
 8080c00:	e00a      	b.n	8080c18 <_ZN9SdSpiCard10writeBlockEmPKh+0x34>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
 8080c02:	462a      	mov	r2, r5
 8080c04:	21fe      	movs	r1, #254	; 0xfe
 8080c06:	4620      	mov	r0, r4
 8080c08:	f7ff ffc6 	bl	8080b98 <_ZN9SdSpiCard9writeDataEhPKh>
 8080c0c:	4605      	mov	r5, r0
 8080c0e:	b118      	cbz	r0, 8080c18 <_ZN9SdSpiCard10writeBlockEmPKh+0x34>
    error(SD_CARD_ERROR_WRITE_PROGRAMMING);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  chipSelectHigh();
 8080c10:	4620      	mov	r0, r4
 8080c12:	f7ff febf 	bl	8080994 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8080c16:	e003      	b.n	8080c20 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>

fail:
  chipSelectHigh();
 8080c18:	4620      	mov	r0, r4
 8080c1a:	f7ff febb 	bl	8080994 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8080c1e:	2500      	movs	r5, #0
}
 8080c20:	4628      	mov	r0, r5
 8080c22:	bd38      	pop	{r3, r4, r5, pc}

08080c24 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
 8080c24:	b570      	push	{r4, r5, r6, lr}
 8080c26:	4604      	mov	r4, r0
 8080c28:	460d      	mov	r5, r1
  bool selected = m_selected;
 8080c2a:	7906      	ldrb	r6, [r0, #4]
  chipSelectLow();
 8080c2c:	f7ff fec5 	bl	80809ba <_ZN9SdSpiCard13chipSelectLowEv>
  // wait for previous write to finish
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8080c30:	f44f 7116 	mov.w	r1, #600	; 0x258
 8080c34:	4620      	mov	r0, r4
 8080c36:	f7ff ff00 	bl	8080a3a <_ZN9SdSpiCard11waitNotBusyEt>
 8080c3a:	b910      	cbnz	r0, 8080c42 <_ZN9SdSpiCard9writeDataEPKh+0x1e>
 8080c3c:	2317      	movs	r3, #23
 8080c3e:	71a3      	strb	r3, [r4, #6]
 8080c40:	e00b      	b.n	8080c5a <_ZN9SdSpiCard9writeDataEPKh+0x36>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
 8080c42:	462a      	mov	r2, r5
 8080c44:	21fc      	movs	r1, #252	; 0xfc
 8080c46:	4620      	mov	r0, r4
 8080c48:	f7ff ffa6 	bl	8080b98 <_ZN9SdSpiCard9writeDataEhPKh>
 8080c4c:	4605      	mov	r5, r0
 8080c4e:	b120      	cbz	r0, 8080c5a <_ZN9SdSpiCard9writeDataEPKh+0x36>
    goto fail;
  }
  if (!selected) {
 8080c50:	b93e      	cbnz	r6, 8080c62 <_ZN9SdSpiCard9writeDataEPKh+0x3e>
    chipSelectHigh();
 8080c52:	4620      	mov	r0, r4
 8080c54:	f7ff fe9e 	bl	8080994 <_ZN9SdSpiCard14chipSelectHighEv>
 8080c58:	e003      	b.n	8080c62 <_ZN9SdSpiCard9writeDataEPKh+0x3e>
  }
  return true;

fail:
  chipSelectHigh();
 8080c5a:	4620      	mov	r0, r4
 8080c5c:	f7ff fe9a 	bl	8080994 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8080c60:	2500      	movs	r5, #0
}
 8080c62:	4628      	mov	r0, r5
 8080c64:	bd70      	pop	{r4, r5, r6, pc}

08080c66 <_ZN9SdSpiCard10writeStartEmm>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber, uint32_t eraseCount) {
 8080c66:	b570      	push	{r4, r5, r6, lr}
 8080c68:	4604      	mov	r4, r0
 8080c6a:	4616      	mov	r6, r2
 8080c6c:	460d      	mov	r5, r1
  bool writeStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
 8080c6e:	2200      	movs	r2, #0
 8080c70:	2137      	movs	r1, #55	; 0x37
 8080c72:	f7ff fef6 	bl	8080a62 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 8080c76:	4632      	mov	r2, r6
 8080c78:	2117      	movs	r1, #23
 8080c7a:	4620      	mov	r0, r4
 8080c7c:	f7ff fef1 	bl	8080a62 <_ZN9SdSpiCard11cardCommandEhm>
  SD_TRACE("WS", blockNumber);
  // send pre-erase count
  if (cardAcmd(ACMD23, eraseCount)) {
 8080c80:	b108      	cbz	r0, 8080c86 <_ZN9SdSpiCard10writeStartEmm+0x20>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8080c82:	2309      	movs	r3, #9
 8080c84:	e00a      	b.n	8080c9c <_ZN9SdSpiCard10writeStartEmm+0x36>
    error(SD_CARD_ERROR_ACMD23);
    goto fail;
  }
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8080c86:	7a63      	ldrb	r3, [r4, #9]
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
 8080c88:	2119      	movs	r1, #25
  if (cardAcmd(ACMD23, eraseCount)) {
    error(SD_CARD_ERROR_ACMD23);
    goto fail;
  }
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8080c8a:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8080c8c:	bf18      	it	ne
 8080c8e:	026d      	lslne	r5, r5, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
 8080c90:	462a      	mov	r2, r5
 8080c92:	4620      	mov	r0, r4
 8080c94:	f7ff fee5 	bl	8080a62 <_ZN9SdSpiCard11cardCommandEhm>
 8080c98:	b130      	cbz	r0, 8080ca8 <_ZN9SdSpiCard10writeStartEmm+0x42>
 8080c9a:	2307      	movs	r3, #7
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8080c9c:	4620      	mov	r0, r4
 8080c9e:	71a3      	strb	r3, [r4, #6]
 8080ca0:	f7ff fe78 	bl	8080994 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8080ca4:	2000      	movs	r0, #0
 8080ca6:	bd70      	pop	{r4, r5, r6, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
 8080ca8:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 8080caa:	bd70      	pop	{r4, r5, r6, pc}

08080cac <_ZN9SdSpiCard9writeStopEv>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 8080cac:	b538      	push	{r3, r4, r5, lr}
 8080cae:	4604      	mov	r4, r0
  chipSelectLow();
 8080cb0:	f7ff fe83 	bl	80809ba <_ZN9SdSpiCard13chipSelectLowEv>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8080cb4:	f44f 7116 	mov.w	r1, #600	; 0x258
 8080cb8:	4620      	mov	r0, r4
 8080cba:	f7ff febe 	bl	8080a3a <_ZN9SdSpiCard11waitNotBusyEt>
 8080cbe:	b170      	cbz	r0, 8080cde <_ZN9SdSpiCard9writeStopEv+0x32>
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
 8080cc0:	21fd      	movs	r1, #253	; 0xfd
 8080cc2:	6820      	ldr	r0, [r4, #0]
 8080cc4:	f7ff fe60 	bl	8080988 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8080cc8:	f44f 7116 	mov.w	r1, #600	; 0x258
 8080ccc:	4620      	mov	r0, r4
 8080cce:	f7ff feb4 	bl	8080a3a <_ZN9SdSpiCard11waitNotBusyEt>
 8080cd2:	4605      	mov	r5, r0
 8080cd4:	b118      	cbz	r0, 8080cde <_ZN9SdSpiCard9writeStopEv+0x32>
    goto fail;
  }
  chipSelectHigh();
 8080cd6:	4620      	mov	r0, r4
 8080cd8:	f7ff fe5c 	bl	8080994 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8080cdc:	e005      	b.n	8080cea <_ZN9SdSpiCard9writeStopEv+0x3e>
 8080cde:	2312      	movs	r3, #18
 8080ce0:	71a3      	strb	r3, [r4, #6]

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
 8080ce2:	4620      	mov	r0, r4
 8080ce4:	f7ff fe56 	bl	8080994 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8080ce8:	2500      	movs	r5, #0
}
 8080cea:	4628      	mov	r0, r5
 8080cec:	bd38      	pop	{r3, r4, r5, pc}

08080cee <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 8080cee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080cf0:	4617      	mov	r7, r2
  if (!writeStart(block, count)) {
 8080cf2:	461a      	mov	r2, r3
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 8080cf4:	4605      	mov	r5, r0
 8080cf6:	461e      	mov	r6, r3
  if (!writeStart(block, count)) {
 8080cf8:	f7ff ffb5 	bl	8080c66 <_ZN9SdSpiCard10writeStartEmm>
 8080cfc:	b170      	cbz	r0, 8080d1c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
 8080cfe:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8080d00:	42b4      	cmp	r4, r6
 8080d02:	eb07 2144 	add.w	r1, r7, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 8080d06:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block, count)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8080d08:	d004      	beq.n	8080d14 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x26>
    if (!writeData(src)) {
 8080d0a:	f7ff ff8b 	bl	8080c24 <_ZN9SdSpiCard9writeDataEPKh>
 8080d0e:	b128      	cbz	r0, 8080d1c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block, count)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8080d10:	3401      	adds	r4, #1
 8080d12:	e7f5      	b.n	8080d00 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x12>
  return writeStop();

 fail:
  chipSelectHigh();
  return false;
}
 8080d14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 8080d18:	f7ff bfc8 	b.w	8080cac <_ZN9SdSpiCard9writeStopEv>

 fail:
  chipSelectHigh();
 8080d1c:	4628      	mov	r0, r5
 8080d1e:	f7ff fe39 	bl	8080994 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
}
 8080d22:	2000      	movs	r0, #0
 8080d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08080d26 <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP9SdSpiBasehh>:
 8080d26:	f00f bb1f 	b.w	8090368 <HAL_Pin_Map>
	...

08080d2c <_Z36SD_SPI_DMA_TransferComplete_Callbackv>:
#if SPI_INTERFACE_COUNT == 1
const uint8_t m_spiIf = 0;
#endif
//-----------------------------------------------------------------------------
void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
 8080d2c:	4b01      	ldr	r3, [pc, #4]	; (8080d34 <_Z36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 8080d2e:	2201      	movs	r2, #1
 8080d30:	701a      	strb	r2, [r3, #0]
 8080d32:	4770      	bx	lr
 8080d34:	200009c8 	.word	0x200009c8

08080d38 <_ZN5SdSpi14endTransactionEv>:
#endif  // SPI_CLOCK_DIV128
  // delay for SPI transfer done callback too soon bug.
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
}
//-----------------------------------------------------------------------------
void SdSpi::endTransaction() {
 8080d38:	4770      	bx	lr
	...

08080d3c <_ZN5SdSpi5beginEh>:
void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
}
//------------------------------------------------------------------------------
void SdSpi::begin(uint8_t chipSelectPin) {
  spiPtr[m_spiIf]->begin(chipSelectPin);
 8080d3c:	7902      	ldrb	r2, [r0, #4]
 8080d3e:	4b02      	ldr	r3, [pc, #8]	; (8080d48 <_ZN5SdSpi5beginEh+0xc>)
 8080d40:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8080d44:	f00f bde9 	b.w	809091a <_ZN8SPIClass5beginEt>
 8080d48:	08092544 	.word	0x08092544

08080d4c <_ZN5SdSpi16beginTransactionEh>:
}
//------------------------------------------------------------------------------
void SdSpi::beginTransaction(uint8_t divisor) {
 8080d4c:	b570      	push	{r4, r5, r6, lr}
 8080d4e:	4606      	mov	r6, r0
 8080d50:	460c      	mov	r4, r1
  spiPtr[m_spiIf]->setBitOrder(MSBFIRST);
 8080d52:	7903      	ldrb	r3, [r0, #4]
 8080d54:	4d1a      	ldr	r5, [pc, #104]	; (8080dc0 <_ZN5SdSpi16beginTransactionEh+0x74>)
 8080d56:	2101      	movs	r1, #1
 8080d58:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8080d5c:	f00f fde3 	bl	8090926 <_ZN8SPIClass11setBitOrderEh>
  spiPtr[m_spiIf]->setDataMode(SPI_MODE0);
 8080d60:	7933      	ldrb	r3, [r6, #4]
 8080d62:	2100      	movs	r1, #0
 8080d64:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8080d68:	f00f fde0 	bl	809092c <_ZN8SPIClass11setDataModeEh>
#ifndef SPI_CLOCK_DIV128
  spiPtr[m_spiIf]->setClockDivider(divisor);
#else  // SPI_CLOCK_DIV128
  int v;
  if (divisor <= 2) {
 8080d6c:	2c02      	cmp	r4, #2
 8080d6e:	d90c      	bls.n	8080d8a <_ZN5SdSpi16beginTransactionEh+0x3e>
    v = SPI_CLOCK_DIV2;
  } else  if (divisor <= 4) {
 8080d70:	2c04      	cmp	r4, #4
 8080d72:	d90c      	bls.n	8080d8e <_ZN5SdSpi16beginTransactionEh+0x42>
    v = SPI_CLOCK_DIV4;
  } else  if (divisor <= 8) {
 8080d74:	2c08      	cmp	r4, #8
 8080d76:	d90c      	bls.n	8080d92 <_ZN5SdSpi16beginTransactionEh+0x46>
    v = SPI_CLOCK_DIV8;
  } else  if (divisor <= 16) {
 8080d78:	2c10      	cmp	r4, #16
 8080d7a:	d90c      	bls.n	8080d96 <_ZN5SdSpi16beginTransactionEh+0x4a>
    v = SPI_CLOCK_DIV16;
  } else  if (divisor <= 32) {
 8080d7c:	2c20      	cmp	r4, #32
 8080d7e:	d90c      	bls.n	8080d9a <_ZN5SdSpi16beginTransactionEh+0x4e>
    v = SPI_CLOCK_DIV32;
  } else  if (divisor <= 64) {
    v = SPI_CLOCK_DIV64;
  } else {
    v = SPI_CLOCK_DIV128;
 8080d80:	2c41      	cmp	r4, #65	; 0x41
 8080d82:	bf34      	ite	cc
 8080d84:	2128      	movcc	r1, #40	; 0x28
 8080d86:	2130      	movcs	r1, #48	; 0x30
 8080d88:	e008      	b.n	8080d9c <_ZN5SdSpi16beginTransactionEh+0x50>
#ifndef SPI_CLOCK_DIV128
  spiPtr[m_spiIf]->setClockDivider(divisor);
#else  // SPI_CLOCK_DIV128
  int v;
  if (divisor <= 2) {
    v = SPI_CLOCK_DIV2;
 8080d8a:	2100      	movs	r1, #0
 8080d8c:	e006      	b.n	8080d9c <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 4) {
    v = SPI_CLOCK_DIV4;
 8080d8e:	2108      	movs	r1, #8
 8080d90:	e004      	b.n	8080d9c <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 8) {
    v = SPI_CLOCK_DIV8;
 8080d92:	2110      	movs	r1, #16
 8080d94:	e002      	b.n	8080d9c <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 16) {
    v = SPI_CLOCK_DIV16;
 8080d96:	2118      	movs	r1, #24
 8080d98:	e000      	b.n	8080d9c <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 32) {
    v = SPI_CLOCK_DIV32;
 8080d9a:	2120      	movs	r1, #32
  } else  if (divisor <= 64) {
    v = SPI_CLOCK_DIV64;
  } else {
    v = SPI_CLOCK_DIV128;
  }
  spiPtr[m_spiIf]->setClockDivider(v);
 8080d9c:	7933      	ldrb	r3, [r6, #4]
 8080d9e:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8080da2:	f00f fe0d 	bl	80909c0 <_ZN8SPIClass15setClockDividerEh>
#endif  // SPI_CLOCK_DIV128
  // delay for SPI transfer done callback too soon bug.
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
 8080da6:	2318      	movs	r3, #24
 8080da8:	fb03 f104 	mul.w	r1, r3, r4
 8080dac:	7932      	ldrb	r2, [r6, #4]
 8080dae:	233c      	movs	r3, #60	; 0x3c
 8080db0:	fb02 1101 	mla	r1, r2, r1, r1
 8080db4:	fb91 f1f3 	sdiv	r1, r1, r3
 8080db8:	4b02      	ldr	r3, [pc, #8]	; (8080dc4 <_ZN5SdSpi16beginTransactionEh+0x78>)
 8080dba:	6019      	str	r1, [r3, #0]
 8080dbc:	bd70      	pop	{r4, r5, r6, pc}
 8080dbe:	bf00      	nop
 8080dc0:	08092544 	.word	0x08092544
 8080dc4:	200009cc 	.word	0x200009cc

08080dc8 <_ZN5SdSpi7receiveEv>:
void SdSpi::endTransaction() {
}
//-----------------------------------------------------------------------------
/** SPI receive a byte */
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
 8080dc8:	7902      	ldrb	r2, [r0, #4]
 8080dca:	4b03      	ldr	r3, [pc, #12]	; (8080dd8 <_ZN5SdSpi7receiveEv+0x10>)
 8080dcc:	21ff      	movs	r1, #255	; 0xff
 8080dce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8080dd2:	f00f be09 	b.w	80909e8 <_ZN8SPIClass8transferEh>
 8080dd6:	bf00      	nop
 8080dd8:	08092544 	.word	0x08092544

08080ddc <_ZN5SdSpi4sendEh>:
  return 0;
}
//-----------------------------------------------------------------------------
/** SPI send a byte */
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
 8080ddc:	7902      	ldrb	r2, [r0, #4]
 8080dde:	4b02      	ldr	r3, [pc, #8]	; (8080de8 <_ZN5SdSpi4sendEh+0xc>)
 8080de0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8080de4:	f00f be00 	b.w	80909e8 <_ZN8SPIClass8transferEh>
 8080de8:	08092544 	.word	0x08092544

08080dec <_ZN5SdSpi7receiveEPhj>:
/** SPI receive a byte */
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
}
//-----------------------------------------------------------------------------
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
 8080dec:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SPI_DMA_TransferCompleted = false;
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8080dee:	4b0c      	ldr	r3, [pc, #48]	; (8080e20 <_ZN5SdSpi7receiveEPhj+0x34>)
 8080df0:	7906      	ldrb	r6, [r0, #4]
 8080df2:	480c      	ldr	r0, [pc, #48]	; (8080e24 <_ZN5SdSpi7receiveEPhj+0x38>)
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
}
//-----------------------------------------------------------------------------
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 8080df4:	2500      	movs	r5, #0
 8080df6:	4c0c      	ldr	r4, [pc, #48]	; (8080e28 <_ZN5SdSpi7receiveEPhj+0x3c>)
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8080df8:	9300      	str	r3, [sp, #0]
 8080dfa:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8080dfe:	4613      	mov	r3, r2
 8080e00:	460a      	mov	r2, r1
 8080e02:	4629      	mov	r1, r5
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
}
//-----------------------------------------------------------------------------
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 8080e04:	7025      	strb	r5, [r4, #0]
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8080e06:	f00f fdf5 	bl	80909f4 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
 8080e0a:	7823      	ldrb	r3, [r4, #0]
 8080e0c:	2b00      	cmp	r3, #0
 8080e0e:	d0fc      	beq.n	8080e0a <_ZN5SdSpi7receiveEPhj+0x1e>
  if (bugDelay) {
 8080e10:	4b06      	ldr	r3, [pc, #24]	; (8080e2c <_ZN5SdSpi7receiveEPhj+0x40>)
 8080e12:	6818      	ldr	r0, [r3, #0]
 8080e14:	b108      	cbz	r0, 8080e1a <_ZN5SdSpi7receiveEPhj+0x2e>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 8080e16:	f00f fb1f 	bl	8090458 <HAL_Delay_Microseconds>
    delayMicroseconds(bugDelay);
  }
  return 0;
}
 8080e1a:	2000      	movs	r0, #0
 8080e1c:	b002      	add	sp, #8
 8080e1e:	bd70      	pop	{r4, r5, r6, pc}
 8080e20:	08080d2d 	.word	0x08080d2d
 8080e24:	08092544 	.word	0x08092544
 8080e28:	200009c8 	.word	0x200009c8
 8080e2c:	200009cc 	.word	0x200009cc

08080e30 <_ZN5SdSpi4sendEPKhj>:
/** SPI send a byte */
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
 8080e30:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SPI_DMA_TransferCompleted = false;

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8080e32:	4b0d      	ldr	r3, [pc, #52]	; (8080e68 <_ZN5SdSpi4sendEPKhj+0x38>)
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
 8080e34:	7906      	ldrb	r6, [r0, #4]
                            SD_SPI_DMA_TransferComplete_Callback);
 8080e36:	480d      	ldr	r0, [pc, #52]	; (8080e6c <_ZN5SdSpi4sendEPKhj+0x3c>)
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 8080e38:	2500      	movs	r5, #0
 8080e3a:	4c0d      	ldr	r4, [pc, #52]	; (8080e70 <_ZN5SdSpi4sendEPKhj+0x40>)

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8080e3c:	9300      	str	r3, [sp, #0]
 8080e3e:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8080e42:	4613      	mov	r3, r2
 8080e44:	462a      	mov	r2, r5
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 8080e46:	7025      	strb	r5, [r4, #0]

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8080e48:	f00f fdd4 	bl	80909f4 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
 8080e4c:	7823      	ldrb	r3, [r4, #0]
 8080e4e:	2b00      	cmp	r3, #0
 8080e50:	d0fc      	beq.n	8080e4c <_ZN5SdSpi4sendEPKhj+0x1c>
  if (bugDelay) {
 8080e52:	4b08      	ldr	r3, [pc, #32]	; (8080e74 <_ZN5SdSpi4sendEPKhj+0x44>)
 8080e54:	6818      	ldr	r0, [r3, #0]
 8080e56:	b120      	cbz	r0, 8080e62 <_ZN5SdSpi4sendEPKhj+0x32>
    delayMicroseconds(bugDelay);
  }
}
 8080e58:	b002      	add	sp, #8
 8080e5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8080e5e:	f00f bafb 	b.w	8090458 <HAL_Delay_Microseconds>
 8080e62:	b002      	add	sp, #8
 8080e64:	bd70      	pop	{r4, r5, r6, pc}
 8080e66:	bf00      	nop
 8080e68:	08080d2d 	.word	0x08080d2d
 8080e6c:	08092544 	.word	0x08092544
 8080e70:	200009c8 	.word	0x200009c8
 8080e74:	200009cc 	.word	0x200009cc

08080e78 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv>:
 8080e78:	f00f ba76 	b.w	8090368 <HAL_Pin_Map>

08080e7c <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 8080e7c:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8080e7e:	f100 0210 	add.w	r2, r0, #16
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 8080e82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8080e86:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8080e88:	6901      	ldr	r1, [r0, #16]
 8080e8a:	6880      	ldr	r0, [r0, #8]
 8080e8c:	f000 bae2 	b.w	8081454 <_ZN9FatVolume15allocateClusterEmPm>

08080e90 <_ZN7FatFile13cacheDirEntryEh>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
 8080e90:	b510      	push	{r4, lr}
 8080e92:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8080e94:	6880      	ldr	r0, [r0, #8]
 8080e96:	460a      	mov	r2, r1
 8080e98:	3028      	adds	r0, #40	; 0x28
 8080e9a:	69a1      	ldr	r1, [r4, #24]
 8080e9c:	f000 fa57 	bl	808134e <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
 8080ea0:	b120      	cbz	r0, 8080eac <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
 8080ea2:	88a3      	ldrh	r3, [r4, #4]
 8080ea4:	f003 030f 	and.w	r3, r3, #15
 8080ea8:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
 8080eac:	bd10      	pop	{r4, pc}

08080eae <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
 8080eae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080eb2:	7803      	ldrb	r3, [r0, #0]
 8080eb4:	4604      	mov	r4, r0
 8080eb6:	4689      	mov	r9, r1
 8080eb8:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & O_READ)) {
 8080eba:	b14b      	cbz	r3, 8080ed0 <_ZN7FatFile4readEPvj+0x22>
 8080ebc:	7882      	ldrb	r2, [r0, #2]
 8080ebe:	07d1      	lsls	r1, r2, #31
 8080ec0:	d506      	bpl.n	8080ed0 <_ZN7FatFile4readEPvj+0x22>
 8080ec2:	e00c      	b.n	8080ede <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8080ec4:	465a      	mov	r2, fp
 8080ec6:	6921      	ldr	r1, [r4, #16]
 8080ec8:	f000 fa6b 	bl	80813a2 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
 8080ecc:	2800      	cmp	r0, #0
 8080ece:	da3d      	bge.n	8080f4c <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 8080ed0:	7863      	ldrb	r3, [r4, #1]
  return -1;
 8080ed2:	f04f 30ff 	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 8080ed6:	f043 0302 	orr.w	r3, r3, #2
 8080eda:	7063      	strb	r3, [r4, #1]
  return -1;
 8080edc:	e098      	b.n	8081010 <_ZN7FatFile4readEPvj+0x162>
  if (!isOpen() || !(m_flags & O_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
 8080ede:	071a      	lsls	r2, r3, #28
 8080ee0:	d503      	bpl.n	8080eea <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
 8080ee2:	69e3      	ldr	r3, [r4, #28]
 8080ee4:	6962      	ldr	r2, [r4, #20]
 8080ee6:	1a9b      	subs	r3, r3, r2
 8080ee8:	e007      	b.n	8080efa <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
 8080eea:	069a      	lsls	r2, r3, #26
 8080eec:	d508      	bpl.n	8080f00 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
 8080eee:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
 8080ef0:	891a      	ldrh	r2, [r3, #8]
 8080ef2:	6963      	ldr	r3, [r4, #20]
 8080ef4:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
 8080ef8:	b29b      	uxth	r3, r3
 8080efa:	429d      	cmp	r5, r3
 8080efc:	bf28      	it	cs
 8080efe:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
 8080f00:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
 8080f02:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8080f06:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 8080f0a:	2e00      	cmp	r6, #0
 8080f0c:	d035      	beq.n	8080f7a <_ZN7FatFile4readEPvj+0xcc>
 8080f0e:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 8080f10:	6963      	ldr	r3, [r4, #20]
    if (isRootFixed()) {
 8080f12:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 8080f16:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8080f1a:	68a0      	ldr	r0, [r4, #8]
 8080f1c:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
 8080f20:	d002      	beq.n	8080f28 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 8080f22:	6a03      	ldr	r3, [r0, #32]
 8080f24:	4419      	add	r1, r3
 8080f26:	e01d      	b.n	8080f64 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 8080f28:	f890 8005 	ldrb.w	r8, [r0, #5]
 8080f2c:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
 8080f30:	f1ba 0f00 	cmp.w	sl, #0
 8080f34:	d110      	bne.n	8080f58 <_ZN7FatFile4readEPvj+0xaa>
 8080f36:	f1b8 0f00 	cmp.w	r8, #0
 8080f3a:	d10d      	bne.n	8080f58 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
 8080f3c:	2b00      	cmp	r3, #0
 8080f3e:	d1c1      	bne.n	8080ec4 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 8080f40:	0653      	lsls	r3, r2, #25
 8080f42:	bf4c      	ite	mi
 8080f44:	6a03      	ldrmi	r3, [r0, #32]
 8080f46:	6a23      	ldrpl	r3, [r4, #32]
 8080f48:	6123      	str	r3, [r4, #16]
 8080f4a:	e005      	b.n	8080f58 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
 8080f4c:	d104      	bne.n	8080f58 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
 8080f4e:	7823      	ldrb	r3, [r4, #0]
 8080f50:	f013 0f70 	tst.w	r3, #112	; 0x70
 8080f54:	d111      	bne.n	8080f7a <_ZN7FatFile4readEPvj+0xcc>
 8080f56:	e7bb      	b.n	8080ed0 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 8080f58:	6921      	ldr	r1, [r4, #16]
 8080f5a:	68a0      	ldr	r0, [r4, #8]
 8080f5c:	f000 fa1b 	bl	8081396 <_ZNK9FatVolume17clusterStartBlockEm>
 8080f60:	eb08 0100 	add.w	r1, r8, r0
 8080f64:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
 8080f66:	f1ba 0f00 	cmp.w	sl, #0
 8080f6a:	d135      	bne.n	8080fd8 <_ZN7FatFile4readEPvj+0x12a>
 8080f6c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8080f70:	d332      	bcc.n	8080fd8 <_ZN7FatFile4readEPvj+0x12a>
 8080f72:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8080f74:	4291      	cmp	r1, r2
 8080f76:	d102      	bne.n	8080f7e <_ZN7FatFile4readEPvj+0xd0>
 8080f78:	e02e      	b.n	8080fd8 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
 8080f7a:	1ba8      	subs	r0, r5, r6
 8080f7c:	e048      	b.n	8081010 <_ZN7FatFile4readEPvj+0x162>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
 8080f7e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8080f82:	d31b      	bcc.n	8080fbc <_ZN7FatFile4readEPvj+0x10e>
      uint8_t nb = toRead >> 9;
      if (!isRootFixed()) {
 8080f84:	7827      	ldrb	r7, [r4, #0]
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      uint8_t nb = toRead >> 9;
 8080f86:	f3c6 2347 	ubfx	r3, r6, #9, #8
      if (!isRootFixed()) {
 8080f8a:	06bf      	lsls	r7, r7, #26
 8080f8c:	d406      	bmi.n	8080f9c <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
 8080f8e:	7907      	ldrb	r7, [r0, #4]
 8080f90:	ebc8 0707 	rsb	r7, r8, r7
 8080f94:	b2ff      	uxtb	r7, r7
 8080f96:	42bb      	cmp	r3, r7
 8080f98:	bf28      	it	cs
 8080f9a:	463b      	movcs	r3, r7
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8080f9c:	4291      	cmp	r1, r2
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
 8080f9e:	ea4f 2743 	mov.w	r7, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8080fa2:	d207      	bcs.n	8080fb4 <_ZN7FatFile4readEPvj+0x106>
        if (!m_vol->cacheSync()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
 8080fa4:	68a0      	ldr	r0, [r4, #8]
 8080fa6:	6802      	ldr	r2, [r0, #0]
 8080fa8:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8080fac:	464a      	mov	r2, r9
 8080fae:	47d0      	blx	sl
 8080fb0:	b960      	cbnz	r0, 8080fcc <_ZN7FatFile4readEPvj+0x11e>
 8080fb2:	e78d      	b.n	8080ed0 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8080fb4:	441a      	add	r2, r3
 8080fb6:	4291      	cmp	r1, r2
 8080fb8:	d321      	bcc.n	8080ffe <_ZN7FatFile4readEPvj+0x150>
 8080fba:	e7f3      	b.n	8080fa4 <_ZN7FatFile4readEPvj+0xf6>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
 8080fbc:	6803      	ldr	r3, [r0, #0]
 8080fbe:	464a      	mov	r2, r9
 8080fc0:	681b      	ldr	r3, [r3, #0]
 8080fc2:	4798      	blx	r3
 8080fc4:	2800      	cmp	r0, #0
 8080fc6:	d083      	beq.n	8080ed0 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
 8080fc8:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
 8080fcc:	6963      	ldr	r3, [r4, #20]
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
 8080fce:	44b9      	add	r9, r7
    m_curPosition += n;
 8080fd0:	443b      	add	r3, r7
 8080fd2:	6163      	str	r3, [r4, #20]
    toRead -= n;
 8080fd4:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 8080fd6:	e798      	b.n	8080f0a <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8080fd8:	2200      	movs	r2, #0
 8080fda:	3028      	adds	r0, #40	; 0x28
 8080fdc:	f000 f9b7 	bl	808134e <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
 8080fe0:	2800      	cmp	r0, #0
 8080fe2:	f43f af75 	beq.w	8080ed0 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
 8080fe6:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
 8080fea:	42b7      	cmp	r7, r6
 8080fec:	bf28      	it	cs
 8080fee:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
 8080ff0:	eb00 010a 	add.w	r1, r0, sl
 8080ff4:	463a      	mov	r2, r7
 8080ff6:	4648      	mov	r0, r9
 8080ff8:	f011 f9a7 	bl	809234a <memcpy>
 8080ffc:	e7e6      	b.n	8080fcc <_ZN7FatFile4readEPvj+0x11e>
 8080ffe:	e88d 000a 	stmia.w	sp, {r1, r3}
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSync()) {
 8081002:	f7ff fcac 	bl	808095e <_ZN9FatVolume9cacheSyncEv>
 8081006:	e89d 000a 	ldmia.w	sp, {r1, r3}
 808100a:	2800      	cmp	r0, #0
 808100c:	d1ca      	bne.n	8080fa4 <_ZN7FatFile4readEPvj+0xf6>
 808100e:	e75f      	b.n	8080ed0 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
 8081010:	b003      	add	sp, #12
 8081012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08081016 <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
 8081016:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 8081018:	2201      	movs	r2, #1
 808101a:	f10d 0107 	add.w	r1, sp, #7
 808101e:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
 8081020:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
 8081022:	6905      	ldr	r5, [r0, #16]
 8081024:	f7ff ff43 	bl	8080eae <_ZN7FatFile4readEPvj>
 8081028:	2801      	cmp	r0, #1
 808102a:	bf09      	itett	eq
 808102c:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 8081030:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
 8081034:	6166      	streq	r6, [r4, #20]
  m_curCluster = pos->cluster;
 8081036:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
 8081038:	b002      	add	sp, #8
 808103a:	bd70      	pop	{r4, r5, r6, pc}

0808103c <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
 808103c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8081040:	460e      	mov	r6, r1
 8081042:	7801      	ldrb	r1, [r0, #0]
 8081044:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
 8081046:	6907      	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
 8081048:	2900      	cmp	r1, #0
 808104a:	d039      	beq.n	80810c0 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
 808104c:	6945      	ldr	r5, [r0, #20]
 808104e:	42b5      	cmp	r5, r6
 8081050:	d03a      	beq.n	80810c8 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
 8081052:	b90e      	cbnz	r6, 8081058 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
 8081054:	6106      	str	r6, [r0, #16]
    goto done;
 8081056:	e031      	b.n	80810bc <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
 8081058:	070b      	lsls	r3, r1, #28
 808105a:	d503      	bpl.n	8081064 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
 808105c:	69c3      	ldr	r3, [r0, #28]
 808105e:	429e      	cmp	r6, r3
 8081060:	d82e      	bhi.n	80810c0 <_ZN7FatFile7seekSetEm+0x84>
 8081062:	e007      	b.n	8081074 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
 8081064:	0688      	lsls	r0, r1, #26
 8081066:	d505      	bpl.n	8081074 <_ZN7FatFile7seekSetEm+0x38>
 8081068:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
 808106a:	891b      	ldrh	r3, [r3, #8]
 808106c:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
 8081070:	d826      	bhi.n	80810c0 <_ZN7FatFile7seekSetEm+0x84>
 8081072:	e023      	b.n	80810bc <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 8081074:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8081078:	1e6a      	subs	r2, r5, #1
 808107a:	f89e 3006 	ldrb.w	r3, [lr, #6]
 808107e:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 8081082:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 8081084:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 8081086:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
 8081088:	429a      	cmp	r2, r3
 808108a:	d800      	bhi.n	808108e <_ZN7FatFile7seekSetEm+0x52>
 808108c:	b94d      	cbnz	r5, 80810a2 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 808108e:	064a      	lsls	r2, r1, #25
 8081090:	bf4c      	ite	mi
 8081092:	f8de 2020 	ldrmi.w	r2, [lr, #32]
 8081096:	6a22      	ldrpl	r2, [r4, #32]
 8081098:	6122      	str	r2, [r4, #16]
 808109a:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 808109c:	f104 0810 	add.w	r8, r4, #16
 80810a0:	e00a      	b.n	80810b8 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
 80810a2:	1a9b      	subs	r3, r3, r2
 80810a4:	e7f9      	b.n	808109a <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 80810a6:	4642      	mov	r2, r8
 80810a8:	6921      	ldr	r1, [r4, #16]
 80810aa:	68a0      	ldr	r0, [r4, #8]
 80810ac:	f000 f979 	bl	80813a2 <_ZN9FatVolume6fatGetEmPm>
 80810b0:	2800      	cmp	r0, #0
 80810b2:	f105 35ff 	add.w	r5, r5, #4294967295
 80810b6:	dd03      	ble.n	80810c0 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
 80810b8:	2d00      	cmp	r5, #0
 80810ba:	d1f4      	bne.n	80810a6 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
 80810bc:	6166      	str	r6, [r4, #20]
 80810be:	e003      	b.n	80810c8 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
 80810c0:	6127      	str	r7, [r4, #16]
  return false;
 80810c2:	2000      	movs	r0, #0
 80810c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
 80810c8:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
 80810ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080810d0 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 80810d0:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
 80810d2:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 80810d4:	4604      	mov	r4, r0
  if (!isOpen()) {
 80810d6:	b90b      	cbnz	r3, 80810dc <_ZN7FatFile4syncEv+0xc>
    return true;
 80810d8:	2001      	movs	r0, #1
 80810da:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (m_flags & F_FILE_DIR_DIRTY) {
 80810dc:	f990 3002 	ldrsb.w	r3, [r0, #2]
 80810e0:	2b00      	cmp	r3, #0
 80810e2:	da23      	bge.n	808112c <_ZN7FatFile4syncEv+0x5c>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 80810e4:	2101      	movs	r1, #1
 80810e6:	f7ff fed3 	bl	8080e90 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 80810ea:	4605      	mov	r5, r0
 80810ec:	b928      	cbnz	r0, 80810fa <_ZN7FatFile4syncEv+0x2a>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 80810ee:	7863      	ldrb	r3, [r4, #1]
  return false;
 80810f0:	2000      	movs	r0, #0
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 80810f2:	f043 0301 	orr.w	r3, r3, #1
 80810f6:	7063      	strb	r3, [r4, #1]
 80810f8:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 80810fa:	7803      	ldrb	r3, [r0, #0]
 80810fc:	2be5      	cmp	r3, #229	; 0xe5
 80810fe:	d0f6      	beq.n	80810ee <_ZN7FatFile4syncEv+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
 8081100:	7823      	ldrb	r3, [r4, #0]
 8081102:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
 8081104:	bf44      	itt	mi
 8081106:	69e3      	ldrmi	r3, [r4, #28]
 8081108:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
 808110a:	8c23      	ldrh	r3, [r4, #32]
 808110c:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
 808110e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8081110:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
 8081112:	4b09      	ldr	r3, [pc, #36]	; (8081138 <_ZN7FatFile4syncEv+0x68>)
 8081114:	681b      	ldr	r3, [r3, #0]
 8081116:	b12b      	cbz	r3, 8081124 <_ZN7FatFile4syncEv+0x54>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
 8081118:	f100 0116 	add.w	r1, r0, #22
 808111c:	3018      	adds	r0, #24
 808111e:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
 8081120:	8b2b      	ldrh	r3, [r5, #24]
 8081122:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
 8081124:	78a3      	ldrb	r3, [r4, #2]
 8081126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 808112a:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
 808112c:	68a0      	ldr	r0, [r4, #8]
 808112e:	f7ff fc16 	bl	808095e <_ZN9FatVolume9cacheSyncEv>
 8081132:	2800      	cmp	r0, #0
 8081134:	d0db      	beq.n	80810ee <_ZN7FatFile4syncEv+0x1e>
 8081136:	e7cf      	b.n	80810d8 <_ZN7FatFile4syncEv+0x8>
 8081138:	200009d0 	.word	0x200009d0

0808113c <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 808113c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 8081140:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8081142:	4604      	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 8081144:	071d      	lsls	r5, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8081146:	4689      	mov	r9, r1
 8081148:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 808114a:	d508      	bpl.n	808115e <_ZN7FatFile5writeEPKvj+0x22>
 808114c:	7883      	ldrb	r3, [r0, #2]
 808114e:	0799      	lsls	r1, r3, #30
 8081150:	d505      	bpl.n	808115e <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & O_APPEND)) {
 8081152:	075b      	lsls	r3, r3, #29
 8081154:	d50b      	bpl.n	808116e <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
 8081156:	69e1      	ldr	r1, [r4, #28]
 8081158:	f7ff ff70 	bl	808103c <_ZN7FatFile7seekSetEm>
 808115c:	b938      	cbnz	r0, 808116e <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 808115e:	7863      	ldrb	r3, [r4, #1]
  return -1;
 8081160:	f04f 30ff 	mov.w	r0, #4294967295
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 8081164:	f043 0301 	orr.w	r3, r3, #1
 8081168:	7063      	strb	r3, [r4, #1]
  return -1;
 808116a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
 808116e:	6963      	ldr	r3, [r4, #20]
 8081170:	43db      	mvns	r3, r3
 8081172:	4598      	cmp	r8, r3
 8081174:	d8f3      	bhi.n	808115e <_ZN7FatFile5writeEPKvj+0x22>
 8081176:	4647      	mov	r7, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8081178:	f04f 0a00 	mov.w	sl, #0
 808117c:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 808117e:	2f00      	cmp	r7, #0
 8081180:	f000 8082 	beq.w	8081288 <_ZN7FatFile5writeEPKvj+0x14c>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
 8081184:	68a0      	ldr	r0, [r4, #8]
    uint16_t blockOffset = m_curPosition & 0X1FF;
 8081186:	f3c3 0608 	ubfx	r6, r3, #0, #9
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 808118a:	7945      	ldrb	r5, [r0, #5]
    if (blockOfCluster == 0 && blockOffset == 0) {
 808118c:	ea15 2553 	ands.w	r5, r5, r3, lsr #9
 8081190:	d11c      	bne.n	80811cc <_ZN7FatFile5writeEPKvj+0x90>
 8081192:	b9de      	cbnz	r6, 80811cc <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
 8081194:	6921      	ldr	r1, [r4, #16]
 8081196:	b171      	cbz	r1, 80811b6 <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8081198:	f104 0210 	add.w	r2, r4, #16
 808119c:	f000 f901 	bl	80813a2 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
 80811a0:	2800      	cmp	r0, #0
 80811a2:	dbdc      	blt.n	808115e <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
 80811a4:	f040 808e 	bne.w	80812c4 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
 80811a8:	4620      	mov	r0, r4
 80811aa:	f7ff fe67 	bl	8080e7c <_ZN7FatFile10addClusterEv>
 80811ae:	2800      	cmp	r0, #0
 80811b0:	f040 8088 	bne.w	80812c4 <_ZN7FatFile5writeEPKvj+0x188>
 80811b4:	e7d3      	b.n	808115e <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
 80811b6:	6a23      	ldr	r3, [r4, #32]
 80811b8:	b93b      	cbnz	r3, 80811ca <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
 80811ba:	4620      	mov	r0, r4
 80811bc:	f7ff fe5e 	bl	8080e7c <_ZN7FatFile10addClusterEv>
 80811c0:	2800      	cmp	r0, #0
 80811c2:	d0cc      	beq.n	808115e <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
 80811c4:	6923      	ldr	r3, [r4, #16]
 80811c6:	6223      	str	r3, [r4, #32]
 80811c8:	e000      	b.n	80811cc <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
 80811ca:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 80811cc:	6921      	ldr	r1, [r4, #16]
 80811ce:	68a0      	ldr	r0, [r4, #8]
 80811d0:	f000 f8e1 	bl	8081396 <_ZNK9FatVolume17clusterStartBlockEm>
 80811d4:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
 80811d6:	b916      	cbnz	r6, 80811de <_ZN7FatFile5writeEPKvj+0xa2>
 80811d8:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 80811dc:	d221      	bcs.n	8081222 <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
 80811de:	f5c6 7500 	rsb	r5, r6, #512	; 0x200
 80811e2:	42bd      	cmp	r5, r7
 80811e4:	bf28      	it	cs
 80811e6:	463d      	movcs	r5, r7
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
 80811e8:	b936      	cbnz	r6, 80811f8 <_ZN7FatFile5writeEPKvj+0xbc>
 80811ea:	6963      	ldr	r3, [r4, #20]
 80811ec:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
 80811ee:	4293      	cmp	r3, r2
 80811f0:	bf34      	ite	cc
 80811f2:	2201      	movcc	r2, #1
 80811f4:	2205      	movcs	r2, #5
 80811f6:	e000      	b.n	80811fa <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
 80811f8:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 80811fa:	68a0      	ldr	r0, [r4, #8]
 80811fc:	3028      	adds	r0, #40	; 0x28
 80811fe:	f000 f8a6 	bl	808134e <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
 8081202:	2800      	cmp	r0, #0
 8081204:	d0ab      	beq.n	808115e <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 8081206:	4430      	add	r0, r6
 8081208:	462a      	mov	r2, r5
 808120a:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
 808120c:	442e      	add	r6, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 808120e:	f011 f89c 	bl	809234a <memcpy>
      if (512 == (n + blockOffset)) {
 8081212:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8081216:	d131      	bne.n	808127c <_ZN7FatFile5writeEPKvj+0x140>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
 8081218:	68a0      	ldr	r0, [r4, #8]
 808121a:	3028      	adds	r0, #40	; 0x28
 808121c:	f000 f870 	bl	8081300 <_ZN8FatCache4syncEv>
 8081220:	e018      	b.n	8081254 <_ZN7FatFile5writeEPKvj+0x118>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
 8081222:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8081226:	68a2      	ldr	r2, [r4, #8]
 8081228:	d316      	bcc.n	8081258 <_ZN7FatFile5writeEPKvj+0x11c>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
 808122a:	7913      	ldrb	r3, [r2, #4]
 808122c:	6b10      	ldr	r0, [r2, #48]	; 0x30
 808122e:	1b5d      	subs	r5, r3, r5
 8081230:	b2ed      	uxtb	r5, r5
      uint8_t nBlock = nToWrite >> 9;
 8081232:	f3c7 2347 	ubfx	r3, r7, #9, #8
 8081236:	42ab      	cmp	r3, r5
 8081238:	bf28      	it	cs
 808123a:	462b      	movcs	r3, r5
      if (nBlock > maxBlocks) {
        nBlock = maxBlocks;
      }
      n = 512*nBlock;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 808123c:	4281      	cmp	r1, r0
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      uint8_t nBlock = nToWrite >> 9;
      if (nBlock > maxBlocks) {
        nBlock = maxBlocks;
      }
      n = 512*nBlock;
 808123e:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 8081242:	d302      	bcc.n	808124a <_ZN7FatFile5writeEPKvj+0x10e>
 8081244:	4418      	add	r0, r3
 8081246:	4281      	cmp	r1, r0
 8081248:	d336      	bcc.n	80812b8 <_ZN7FatFile5writeEPKvj+0x17c>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nBlock)) {
 808124a:	68a0      	ldr	r0, [r4, #8]
 808124c:	6802      	ldr	r2, [r0, #0]
 808124e:	68d6      	ldr	r6, [r2, #12]
 8081250:	464a      	mov	r2, r9
 8081252:	47b0      	blx	r6
 8081254:	b990      	cbnz	r0, 808127c <_ZN7FatFile5writeEPKvj+0x140>
 8081256:	e782      	b.n	808115e <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
 8081258:	6b13      	ldr	r3, [r2, #48]	; 0x30
 808125a:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 808125c:	bf02      	ittt	eq
 808125e:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8081262:	f882 a028 	strbeq.w	sl, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 8081266:	6313      	streq	r3, [r2, #48]	; 0x30
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
 8081268:	68a0      	ldr	r0, [r4, #8]
 808126a:	464a      	mov	r2, r9
 808126c:	6803      	ldr	r3, [r0, #0]
 808126e:	685b      	ldr	r3, [r3, #4]
 8081270:	4798      	blx	r3
 8081272:	2800      	cmp	r0, #0
 8081274:	f43f af73 	beq.w	808115e <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
 8081278:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 808127c:	6963      	ldr	r3, [r4, #20]
    src += n;
 808127e:	44a9      	add	r9, r5
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 8081280:	442b      	add	r3, r5
 8081282:	6163      	str	r3, [r4, #20]
    src += n;
    nToWrite -= n;
 8081284:	1b7f      	subs	r7, r7, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 8081286:	e779      	b.n	808117c <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
 8081288:	69e2      	ldr	r2, [r4, #28]
 808128a:	4293      	cmp	r3, r2
 808128c:	78a2      	ldrb	r2, [r4, #2]
 808128e:	d901      	bls.n	8081294 <_ZN7FatFile5writeEPKvj+0x158>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
 8081290:	61e3      	str	r3, [r4, #28]
 8081292:	e002      	b.n	808129a <_ZN7FatFile5writeEPKvj+0x15e>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
 8081294:	4b0e      	ldr	r3, [pc, #56]	; (80812d0 <_ZN7FatFile5writeEPKvj+0x194>)
 8081296:	681b      	ldr	r3, [r3, #0]
 8081298:	b113      	cbz	r3, 80812a0 <_ZN7FatFile5writeEPKvj+0x164>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
 808129a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 808129e:	70a2      	strb	r2, [r4, #2]
  }

  if (m_flags & O_SYNC) {
 80812a0:	78a3      	ldrb	r3, [r4, #2]
 80812a2:	071a      	lsls	r2, r3, #28
 80812a4:	d402      	bmi.n	80812ac <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
 80812a6:	4640      	mov	r0, r8
 80812a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & O_SYNC) {
    if (!sync()) {
 80812ac:	4620      	mov	r0, r4
 80812ae:	f7ff ff0f 	bl	80810d0 <_ZN7FatFile4syncEv>
 80812b2:	2800      	cmp	r0, #0
 80812b4:	d1f7      	bne.n	80812a6 <_ZN7FatFile5writeEPKvj+0x16a>
 80812b6:	e752      	b.n	808115e <_ZN7FatFile5writeEPKvj+0x22>
 80812b8:	f04f 30ff 	mov.w	r0, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 80812bc:	f882 a028 	strb.w	sl, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 80812c0:	6310      	str	r0, [r2, #48]	; 0x30
 80812c2:	e7c2      	b.n	808124a <_ZN7FatFile5writeEPKvj+0x10e>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 80812c4:	6921      	ldr	r1, [r4, #16]
 80812c6:	68a0      	ldr	r0, [r4, #8]
 80812c8:	f000 f865 	bl	8081396 <_ZNK9FatVolume17clusterStartBlockEm>
 80812cc:	4601      	mov	r1, r0
 80812ce:	e783      	b.n	80811d8 <_ZN7FatFile5writeEPKvj+0x9c>
 80812d0:	200009d0 	.word	0x200009d0

080812d4 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
 80812d4:	f00f b848 	b.w	8090368 <HAL_Pin_Map>

080812d8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80812d8:	b570      	push	{r4, r5, r6, lr}
 80812da:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80812dc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80812de:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80812e0:	b149      	cbz	r1, 80812f6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80812e2:	f011 f88f 	bl	8092404 <strlen>
 80812e6:	682b      	ldr	r3, [r5, #0]
 80812e8:	4602      	mov	r2, r0
 80812ea:	4621      	mov	r1, r4
 80812ec:	4628      	mov	r0, r5
    }
 80812ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80812f2:	68db      	ldr	r3, [r3, #12]
 80812f4:	4718      	bx	r3
    }
 80812f6:	bd70      	pop	{r4, r5, r6, pc}

080812f8 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
 80812f8:	f00f b836 	b.w	8090368 <HAL_Pin_Map>

080812fc <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
 80812fc:	f00f b834 	b.w	8090368 <HAL_Pin_Map>

08081300 <_ZN8FatCache4syncEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 8081300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
 8081302:	7803      	ldrb	r3, [r0, #0]

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 8081304:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
 8081306:	07da      	lsls	r2, r3, #31
 8081308:	d51e      	bpl.n	8081348 <_ZN8FatCache4syncEv+0x48>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
 808130a:	6840      	ldr	r0, [r0, #4]
 808130c:	f104 060c 	add.w	r6, r4, #12
 8081310:	6803      	ldr	r3, [r0, #0]
 8081312:	4632      	mov	r2, r6
 8081314:	685b      	ldr	r3, [r3, #4]
 8081316:	68a1      	ldr	r1, [r4, #8]
 8081318:	4798      	blx	r3
 808131a:	4605      	mov	r5, r0
 808131c:	b908      	cbnz	r0, 8081322 <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
 808131e:	2500      	movs	r5, #0
 8081320:	e013      	b.n	808134a <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
 8081322:	7823      	ldrb	r3, [r4, #0]
 8081324:	079b      	lsls	r3, r3, #30
 8081326:	d404      	bmi.n	8081332 <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
 8081328:	7823      	ldrb	r3, [r4, #0]
 808132a:	f023 0301 	bic.w	r3, r3, #1
 808132e:	7023      	strb	r3, [r4, #0]
 8081330:	e00b      	b.n	808134a <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
 8081332:	6860      	ldr	r0, [r4, #4]
      if (!m_vol->writeBlock(lbn, m_block.data)) {
 8081334:	68a7      	ldr	r7, [r4, #8]
 8081336:	6901      	ldr	r1, [r0, #16]
 8081338:	6803      	ldr	r3, [r0, #0]
 808133a:	4632      	mov	r2, r6
 808133c:	685b      	ldr	r3, [r3, #4]
 808133e:	4439      	add	r1, r7
 8081340:	4798      	blx	r3
 8081342:	2800      	cmp	r0, #0
 8081344:	d1f0      	bne.n	8081328 <_ZN8FatCache4syncEv+0x28>
 8081346:	e7ea      	b.n	808131e <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
 8081348:	2501      	movs	r5, #1

fail:
  return false;
}
 808134a:	4628      	mov	r0, r5
 808134c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808134e <_ZN8FatCache4readEmh>:
 * <http://www.gnu.org/licenses/>.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 808134e:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
 8081350:	6883      	ldr	r3, [r0, #8]
 * <http://www.gnu.org/licenses/>.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8081352:	4604      	mov	r4, r0
  if (m_lbn != lbn) {
 8081354:	428b      	cmp	r3, r1
 * <http://www.gnu.org/licenses/>.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8081356:	460e      	mov	r6, r1
 8081358:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
 808135a:	d014      	beq.n	8081386 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
 808135c:	f7ff ffd0 	bl	8081300 <_ZN8FatCache4syncEv>
 8081360:	b908      	cbnz	r0, 8081366 <_ZN8FatCache4readEmh+0x18>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:
  return 0;
 8081362:	2000      	movs	r0, #0
 8081364:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
 8081366:	076b      	lsls	r3, r5, #29
 8081368:	d503      	bpl.n	8081372 <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
 808136a:	2300      	movs	r3, #0
 808136c:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
 808136e:	60a6      	str	r6, [r4, #8]
 8081370:	e009      	b.n	8081386 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
 8081372:	6860      	ldr	r0, [r4, #4]
 8081374:	f104 020c 	add.w	r2, r4, #12
 8081378:	6803      	ldr	r3, [r0, #0]
 808137a:	4631      	mov	r1, r6
 808137c:	681b      	ldr	r3, [r3, #0]
 808137e:	4798      	blx	r3
 8081380:	2800      	cmp	r0, #0
 8081382:	d1f2      	bne.n	808136a <_ZN8FatCache4readEmh+0x1c>
 8081384:	e7ed      	b.n	8081362 <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
 8081386:	4620      	mov	r0, r4
 8081388:	7823      	ldrb	r3, [r4, #0]
 808138a:	f005 0503 	and.w	r5, r5, #3
 808138e:	431d      	orrs	r5, r3
 8081390:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:
  return 0;
}
 8081394:	bd70      	pop	{r4, r5, r6, pc}

08081396 <_ZNK9FatVolume17clusterStartBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
 8081396:	7983      	ldrb	r3, [r0, #6]
 8081398:	3902      	subs	r1, #2
 808139a:	6940      	ldr	r0, [r0, #20]
 808139c:	4099      	lsls	r1, r3
}
 808139e:	4408      	add	r0, r1
 80813a0:	4770      	bx	lr

080813a2 <_ZN9FatVolume6fatGetEmPm>:
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 80813a2:	b570      	push	{r4, r5, r6, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 80813a4:	79c3      	ldrb	r3, [r0, #7]
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 80813a6:	4605      	mov	r5, r0
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 80813a8:	2b20      	cmp	r3, #32
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 80813aa:	460c      	mov	r4, r1
 80813ac:	4616      	mov	r6, r2
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 80813ae:	d112      	bne.n	80813d6 <_ZN9FatVolume6fatGetEmPm+0x34>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
 80813b0:	6981      	ldr	r1, [r0, #24]
 80813b2:	2202      	movs	r2, #2
 80813b4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80813b8:	f500 700d 	add.w	r0, r0, #564	; 0x234
 80813bc:	f7ff ffc7 	bl	808134e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 80813c0:	b910      	cbnz	r0, 80813c8 <_ZN9FatVolume6fatGetEmPm+0x26>
  }
  *value = next;
  return 1;

fail:
  return -1;
 80813c2:	f04f 30ff 	mov.w	r0, #4294967295
 80813c6:	bd70      	pop	{r4, r5, r6, pc}
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
 80813c8:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 80813cc:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 80813d0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
 80813d4:	e00f      	b.n	80813f6 <_ZN9FatVolume6fatGetEmPm+0x54>
  }

  if (m_fatType == 16) {
 80813d6:	2b10      	cmp	r3, #16
 80813d8:	d1f3      	bne.n	80813c2 <_ZN9FatVolume6fatGetEmPm+0x20>
 80813da:	6983      	ldr	r3, [r0, #24]
 80813dc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80813e0:	2202      	movs	r2, #2
 80813e2:	4419      	add	r1, r3
 80813e4:	f500 700d 	add.w	r0, r0, #564	; 0x234
 80813e8:	f7ff ffb1 	bl	808134e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 80813ec:	2800      	cmp	r0, #0
 80813ee:	d0e8      	beq.n	80813c2 <_ZN9FatVolume6fatGetEmPm+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
 80813f0:	b2e4      	uxtb	r4, r4
 80813f2:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
 80813f6:	69ea      	ldr	r2, [r5, #28]
 80813f8:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
 80813fa:	bf9a      	itte	ls
 80813fc:	6033      	strls	r3, [r6, #0]
  return 1;
 80813fe:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
 8081400:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
 8081402:	bd70      	pop	{r4, r5, r6, pc}

08081404 <_ZN9FatVolume6fatPutEmm>:
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8081404:	b538      	push	{r3, r4, r5, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8081406:	79c3      	ldrb	r3, [r0, #7]
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8081408:	460c      	mov	r4, r1
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 808140a:	2b20      	cmp	r3, #32
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 808140c:	4615      	mov	r5, r2
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 808140e:	d10f      	bne.n	8081430 <_ZN9FatVolume6fatPutEmm+0x2c>
 8081410:	6981      	ldr	r1, [r0, #24]
 8081412:	2203      	movs	r2, #3
 8081414:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8081418:	f500 700d 	add.w	r0, r0, #564	; 0x234
 808141c:	f7ff ff97 	bl	808134e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 8081420:	b908      	cbnz	r0, 8081426 <_ZN9FatVolume6fatPutEmm+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
 8081422:	2000      	movs	r0, #0
 8081424:	bd38      	pop	{r3, r4, r5, pc}
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
 8081426:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 808142a:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
 808142e:	e00f      	b.n	8081450 <_ZN9FatVolume6fatPutEmm+0x4c>
    return true;
  }

  if (m_fatType == 16) {
 8081430:	2b10      	cmp	r3, #16
 8081432:	d1f6      	bne.n	8081422 <_ZN9FatVolume6fatPutEmm+0x1e>
 8081434:	6983      	ldr	r3, [r0, #24]
 8081436:	f3c1 2107 	ubfx	r1, r1, #8, #8
 808143a:	2203      	movs	r2, #3
 808143c:	4419      	add	r1, r3
 808143e:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8081442:	f7ff ff84 	bl	808134e <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 8081446:	2800      	cmp	r0, #0
 8081448:	d0eb      	beq.n	8081422 <_ZN9FatVolume6fatPutEmm+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
 808144a:	b2e4      	uxtb	r4, r4
 808144c:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
 8081450:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
 8081452:	bd38      	pop	{r3, r4, r5, pc}

08081454 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 8081454:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8081458:	4605      	mov	r5, r0
 808145a:	4690      	mov	r8, r2
  uint32_t find = current ? current : m_allocSearchStart;
 808145c:	460f      	mov	r7, r1
 808145e:	b909      	cbnz	r1, 8081464 <_ZN9FatVolume15allocateClusterEmPm+0x10>
 8081460:	68c6      	ldr	r6, [r0, #12]
 8081462:	e000      	b.n	8081466 <_ZN9FatVolume15allocateClusterEmPm+0x12>
 8081464:	460e      	mov	r6, r1
 8081466:	4634      	mov	r4, r6
  uint32_t start = find;
  while (1) {
    find++;
    // If at end of FAT go to beginning of FAT.
    if (find > m_lastCluster) {
 8081468:	69eb      	ldr	r3, [r5, #28]
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
  uint32_t find = current ? current : m_allocSearchStart;
  uint32_t start = find;
  while (1) {
    find++;
 808146a:	3401      	adds	r4, #1
    // If at end of FAT go to beginning of FAT.
    if (find > m_lastCluster) {
      find = 2;
 808146c:	429c      	cmp	r4, r3
 808146e:	bf88      	it	hi
 8081470:	2402      	movhi	r4, #2
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
 8081472:	aa01      	add	r2, sp, #4
 8081474:	4621      	mov	r1, r4
 8081476:	4628      	mov	r0, r5
 8081478:	f7ff ff93 	bl	80813a2 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 808147c:	2800      	cmp	r0, #0
 808147e:	db0d      	blt.n	808149c <_ZN9FatVolume15allocateClusterEmPm+0x48>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
 8081480:	d001      	beq.n	8081486 <_ZN9FatVolume15allocateClusterEmPm+0x32>
 8081482:	9b01      	ldr	r3, [sp, #4]
 8081484:	b113      	cbz	r3, 808148c <_ZN9FatVolume15allocateClusterEmPm+0x38>
      break;
    }
    if (find == start) {
 8081486:	42b4      	cmp	r4, r6
 8081488:	d1ee      	bne.n	8081468 <_ZN9FatVolume15allocateClusterEmPm+0x14>
 808148a:	e007      	b.n	808149c <_ZN9FatVolume15allocateClusterEmPm+0x48>
  }
  uint32_t clusterStartBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
 808148c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8081490:	4621      	mov	r1, r4
 8081492:	4628      	mov	r0, r5
 8081494:	f7ff ffb6 	bl	8081404 <_ZN9FatVolume6fatPutEmm>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // mark end of chain
  if (!fatPutEOC(find)) {
 8081498:	4606      	mov	r6, r0
 808149a:	b908      	cbnz	r0, 80814a0 <_ZN9FatVolume15allocateClusterEmPm+0x4c>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
 808149c:	2600      	movs	r6, #0
 808149e:	e010      	b.n	80814c2 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // mark end of chain
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
 80814a0:	b137      	cbz	r7, 80814b0 <_ZN9FatVolume15allocateClusterEmPm+0x5c>
    // link clusters
    if (!fatPut(current, find)) {
 80814a2:	4622      	mov	r2, r4
 80814a4:	4639      	mov	r1, r7
 80814a6:	4628      	mov	r0, r5
 80814a8:	f7ff ffac 	bl	8081404 <_ZN9FatVolume6fatPutEmm>
 80814ac:	b908      	cbnz	r0, 80814b2 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
 80814ae:	e7f5      	b.n	808149c <_ZN9FatVolume15allocateClusterEmPm+0x48>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // Remember place for search start.
    m_allocSearchStart = find;
 80814b0:	60ec      	str	r4, [r5, #12]
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
 80814b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80814b4:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 80814b6:	bfa4      	itt	ge
 80814b8:	f103 33ff 	addge.w	r3, r3, #4294967295
 80814bc:	626b      	strge	r3, [r5, #36]	; 0x24
  }
  updateFreeClusterCount(-1);
  *next = find;
 80814be:	f8c8 4000 	str.w	r4, [r8]
  return true;

fail:
  return false;
}
 80814c2:	4630      	mov	r0, r6
 80814c4:	b002      	add	sp, #8
 80814c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080814ca <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
 80814ca:	f00e bf4d 	b.w	8090368 <HAL_Pin_Map>

080814ce <_GLOBAL__sub_I__ZN9SdFatBase9errorHaltEP5Print>:
 80814ce:	f00e bf4b 	b.w	8090368 <HAL_Pin_Map>

080814d2 <_ZN4MQTT9debug_TlsEPviPKciS2_>:
  return 0;
}

void MQTT::debug_Tls( void *ctx, int level,
                      const char *file, int line,
                      const char *str ) {
 80814d2:	4770      	bx	lr

080814d4 <_ZN4MQTT8send_TlsEPvPKhj>:

bool MQTT::available() {
    return tcpClient.available();
}

int MQTT::send_Tls(void *ctx, const unsigned char *buf, size_t len) {
 80814d4:	b570      	push	{r4, r5, r6, lr}
 80814d6:	4605      	mov	r5, r0
 80814d8:	460c      	mov	r4, r1
 80814da:	4616      	mov	r6, r2
  MQTT *sock = (MQTT *)ctx;

  if (!sock->tcpClient.connected()) {
 80814dc:	f00f fd0c 	bl	8090ef8 <_ZN9TCPClient9connectedEv>
 80814e0:	b158      	cbz	r0, 80814fa <_ZN4MQTT8send_TlsEPvPKhj+0x26>
    return -1;
  }

  int ret = sock->tcpClient.write(buf, len);
 80814e2:	4621      	mov	r1, r4
 80814e4:	4632      	mov	r2, r6
 80814e6:	4628      	mov	r0, r5
 80814e8:	f00f fcec 	bl	8090ec4 <_ZN9TCPClient5writeEPKhj>
  if (ret == 0) {
 80814ec:	4604      	mov	r4, r0
 80814ee:	b138      	cbz	r0, 8081500 <_ZN4MQTT8send_TlsEPvPKhj+0x2c>
      return MBEDTLS_ERR_SSL_WANT_WRITE;
  }
  sock->tcpClient.flush();
 80814f0:	4628      	mov	r0, r5
 80814f2:	f00f faa3 	bl	8090a3c <_ZN9TCPClient5flushEv>
  return ret;
 80814f6:	4620      	mov	r0, r4
 80814f8:	bd70      	pop	{r4, r5, r6, pc}

int MQTT::send_Tls(void *ctx, const unsigned char *buf, size_t len) {
  MQTT *sock = (MQTT *)ctx;

  if (!sock->tcpClient.connected()) {
    return -1;
 80814fa:	f04f 30ff 	mov.w	r0, #4294967295
 80814fe:	bd70      	pop	{r4, r5, r6, pc}
  }

  int ret = sock->tcpClient.write(buf, len);
  if (ret == 0) {
      return MBEDTLS_ERR_SSL_WANT_WRITE;
 8081500:	4800      	ldr	r0, [pc, #0]	; (8081504 <_ZN4MQTT8send_TlsEPvPKhj+0x30>)
  }
  sock->tcpClient.flush();
  return ret;
}
 8081502:	bd70      	pop	{r4, r5, r6, pc}
 8081504:	ffff9780 	.word	0xffff9780

08081508 <_ZN4MQTT8recv_TlsEPvPhj>:

int MQTT::recv_Tls(void *ctx, unsigned char *buf, size_t len) {
 8081508:	b570      	push	{r4, r5, r6, lr}
 808150a:	4604      	mov	r4, r0
 808150c:	460d      	mov	r5, r1
 808150e:	4616      	mov	r6, r2
  MQTT *sock = (MQTT *)ctx;
  if (!sock->tcpClient.connected()) {
 8081510:	f00f fcf2 	bl	8090ef8 <_ZN9TCPClient9connectedEv>
 8081514:	b158      	cbz	r0, 808152e <_ZN4MQTT8recv_TlsEPvPhj+0x26>
    return -1;
  }

  if (sock->tcpClient.available() == 0) {
 8081516:	4620      	mov	r0, r4
 8081518:	f00f fb6c 	bl	8090bf4 <_ZN9TCPClient9availableEv>
 808151c:	b128      	cbz	r0, 808152a <_ZN4MQTT8recv_TlsEPvPhj+0x22>
    return MBEDTLS_ERR_SSL_WANT_READ;
  }

  int ret = sock->tcpClient.read(buf, len);
 808151e:	4632      	mov	r2, r6
 8081520:	4629      	mov	r1, r5
 8081522:	4620      	mov	r0, r4
 8081524:	f00f fb35 	bl	8090b92 <_ZN9TCPClient4readEPhj>
  if (ret == 0) {
 8081528:	b918      	cbnz	r0, 8081532 <_ZN4MQTT8recv_TlsEPvPhj+0x2a>
    return MBEDTLS_ERR_SSL_WANT_READ;
 808152a:	4802      	ldr	r0, [pc, #8]	; (8081534 <_ZN4MQTT8recv_TlsEPvPhj+0x2c>)
 808152c:	bd70      	pop	{r4, r5, r6, pc}
}

int MQTT::recv_Tls(void *ctx, unsigned char *buf, size_t len) {
  MQTT *sock = (MQTT *)ctx;
  if (!sock->tcpClient.connected()) {
    return -1;
 808152e:	f04f 30ff 	mov.w	r0, #4294967295
  int ret = sock->tcpClient.read(buf, len);
  if (ret == 0) {
    return MBEDTLS_ERR_SSL_WANT_READ;
  }
  return ret;
}
 8081532:	bd70      	pop	{r4, r5, r6, pc}
 8081534:	ffff9700 	.word	0xffff9700

08081538 <_ZN4MQTT7rng_TlsEPvPhj>:

int MQTT::rng_Tls(void* handle, uint8_t* data, const size_t len_) {
 8081538:	b570      	push	{r4, r5, r6, lr}
 808153a:	460e      	mov	r6, r1
 808153c:	4615      	mov	r5, r2
 808153e:	460c      	mov	r4, r1
  size_t len = len_;
  while (len>=4) {
 8081540:	1b2b      	subs	r3, r5, r4
 8081542:	4433      	add	r3, r6
 8081544:	2b03      	cmp	r3, #3
 8081546:	d904      	bls.n	8081552 <_ZN4MQTT7rng_TlsEPvPhj+0x1a>
      *((uint32_t*)data) = HAL_RNG_GetRandomNumber();
 8081548:	f00e ff7e 	bl	8090448 <HAL_RNG_GetRandomNumber>
 808154c:	f844 0b04 	str.w	r0, [r4], #4
  return ret;
}

int MQTT::rng_Tls(void* handle, uint8_t* data, const size_t len_) {
  size_t len = len_;
  while (len>=4) {
 8081550:	e7f6      	b.n	8081540 <_ZN4MQTT7rng_TlsEPvPhj+0x8>
 8081552:	08ac      	lsrs	r4, r5, #2
 8081554:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8081558:	4435      	add	r5, r6
      *((uint32_t*)data) = HAL_RNG_GetRandomNumber();
      data += 4;
      len -= 4;
  }

  while (len-->0) {
 808155a:	42ac      	cmp	r4, r5
 808155c:	d004      	beq.n	8081568 <_ZN4MQTT7rng_TlsEPvPhj+0x30>
      *data++ = HAL_RNG_GetRandomNumber();
 808155e:	f00e ff73 	bl	8090448 <HAL_RNG_GetRandomNumber>
 8081562:	f804 0b01 	strb.w	r0, [r4], #1
      *((uint32_t*)data) = HAL_RNG_GetRandomNumber();
      data += 4;
      len -= 4;
  }

  while (len-->0) {
 8081566:	e7f8      	b.n	808155a <_ZN4MQTT7rng_TlsEPvPhj+0x22>
      *data++ = HAL_RNG_GetRandomNumber();
  }
  return 0;
}
 8081568:	2000      	movs	r0, #0
 808156a:	bd70      	pop	{r4, r5, r6, pc}

0808156c <_ZN4MQTT14veryfyCert_TlsEPvP16mbedtls_x509_crtiPm>:
    return false;
  }
  return true;
}

int MQTT::veryfyCert_Tls(void *data, mbedtls_x509_crt *crt, int depth, uint32_t *flags) {
 808156c:	b500      	push	{lr}
 808156e:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
  char buf[1024];
  ((void) data);

  debug_tls("Verify requested for (Depth %d):\n", depth);
  mbedtls_x509_crt_info(buf, sizeof(buf) - 1, "", crt);
 8081572:	460b      	mov	r3, r1
 8081574:	4a05      	ldr	r2, [pc, #20]	; (808158c <_ZN4MQTT14veryfyCert_TlsEPvP16mbedtls_x509_crtiPm+0x20>)
 8081576:	f240 31ff 	movw	r1, #1023	; 0x3ff
 808157a:	4668      	mov	r0, sp
 808157c:	f006 fa94 	bl	8087aa8 <mbedtls_x509_crt_info>
  } else {
    debug_tls(buf, sizeof(buf), "  ! ", *flags);
    debug_tls("%s\n", buf);
  }
  return 0;
}
 8081580:	2000      	movs	r0, #0
 8081582:	f20d 4d04 	addw	sp, sp, #1028	; 0x404
 8081586:	f85d fb04 	ldr.w	pc, [sp], #4
 808158a:	bf00      	nop
 808158c:	08092be8 	.word	0x08092be8

08081590 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
	TCPClient();
	TCPClient(sock_handle_t sock);
        virtual ~TCPClient() {};
 8081590:	b538      	push	{r3, r4, r5, lr}
 8081592:	4b0b      	ldr	r3, [pc, #44]	; (80815c0 <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 8081594:	6984      	ldr	r4, [r0, #24]
 8081596:	4605      	mov	r5, r0
 8081598:	6003      	str	r3, [r0, #0]
 808159a:	b17c      	cbz	r4, 80815bc <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 808159c:	6863      	ldr	r3, [r4, #4]
 808159e:	3b01      	subs	r3, #1
 80815a0:	6063      	str	r3, [r4, #4]
 80815a2:	b95b      	cbnz	r3, 80815bc <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
 80815a4:	6823      	ldr	r3, [r4, #0]
 80815a6:	4620      	mov	r0, r4
 80815a8:	689b      	ldr	r3, [r3, #8]
 80815aa:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80815ac:	68a3      	ldr	r3, [r4, #8]
 80815ae:	3b01      	subs	r3, #1
 80815b0:	60a3      	str	r3, [r4, #8]
 80815b2:	b91b      	cbnz	r3, 80815bc <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80815b4:	6823      	ldr	r3, [r4, #0]
 80815b6:	4620      	mov	r0, r4
 80815b8:	68db      	ldr	r3, [r3, #12]
 80815ba:	4798      	blx	r3
 80815bc:	4628      	mov	r0, r5
 80815be:	bd38      	pop	{r3, r4, r5, pc}
 80815c0:	08095bc4 	.word	0x08095bc4

080815c4 <_ZN9TCPClientD0Ev>:
 80815c4:	b510      	push	{r4, lr}
 80815c6:	4604      	mov	r4, r0
 80815c8:	f7ff ffe2 	bl	8081590 <_ZN9TCPClientD1Ev>
 80815cc:	4620      	mov	r0, r4
 80815ce:	f7fe fd68 	bl	80800a2 <_ZdlPv>
 80815d2:	4620      	mov	r0, r4
 80815d4:	bd10      	pop	{r4, pc}
	...

080815d8 <_ZN4MQTTC1Ev>:
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT() {
 80815d8:	b538      	push	{r3, r4, r5, lr}
 80815da:	4604      	mov	r4, r0
 80815dc:	2500      	movs	r5, #0
 80815de:	f00f fbbd 	bl	8090d5c <_ZN9TCPClientC1Ev>
 80815e2:	61e5      	str	r5, [r4, #28]
 80815e4:	4905      	ldr	r1, [pc, #20]	; (80815fc <_ZN4MQTTC1Ev+0x24>)
 80815e6:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80815ea:	f00f fd06 	bl	8090ffa <_ZN6StringC1EPK19__FlashStringHelper>
 80815ee:	2301      	movs	r3, #1
 80815f0:	64a5      	str	r5, [r4, #72]	; 0x48
 80815f2:	f884 3682 	strb.w	r3, [r4, #1666]	; 0x682
    this->ip = NULL;
}
 80815f6:	4620      	mov	r0, r4
 80815f8:	bd38      	pop	{r3, r4, r5, pc}
 80815fa:	bf00      	nop
 80815fc:	08092be8 	.word	0x08092be8

08081600 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:
        disconnect();
        free(buffer);
    }
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 8081600:	b538      	push	{r3, r4, r5, lr}
 8081602:	4604      	mov	r4, r0
 8081604:	461d      	mov	r5, r3
    this->callback = callback;
 8081606:	9b05      	ldr	r3, [sp, #20]
 8081608:	6303      	str	r3, [r0, #48]	; 0x30
    this->tls = false;
 808160a:	2000      	movs	r0, #0
 808160c:	f884 0681 	strb.w	r0, [r4, #1665]	; 0x681
    this->tlsConnected = false;
 8081610:	f884 0680 	strb.w	r0, [r4, #1664]	; 0x680
    this->qoscallback = NULL;
 8081614:	6360      	str	r0, [r4, #52]	; 0x34
    if (ip != NULL)
 8081616:	b102      	cbz	r2, 808161a <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1a>
        this->ip = ip;
 8081618:	64a2      	str	r2, [r4, #72]	; 0x48
    if (domain != NULL)
 808161a:	b119      	cbz	r1, 8081624 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x24>
        this->domain = domain;
 808161c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8081620:	f00f fd0d 	bl	809103e <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
 8081624:	9b04      	ldr	r3, [sp, #16]

    this->maxpacketsize = maxpacketsize;
    if (buffer != NULL)
 8081626:	69e0      	ldr	r0, [r4, #28]
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
    this->keepalive = keepalive;
 8081628:	6523      	str	r3, [r4, #80]	; 0x50

    this->maxpacketsize = maxpacketsize;
 808162a:	9b06      	ldr	r3, [sp, #24]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
 808162c:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    this->maxpacketsize = maxpacketsize;
 8081630:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
 8081634:	b108      	cbz	r0, 808163a <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x3a>
      delete[] buffer;
 8081636:	f7fe fd36 	bl	80800a6 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
 808163a:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 808163e:	f7fe fd2e 	bl	808009e <_Znaj>
 8081642:	61e0      	str	r0, [r4, #28]
 8081644:	bd38      	pop	{r3, r4, r5, pc}
	...

08081648 <_ZN4MQTTC1EPctPFvS0_PhjE>:

MQTT::MQTT() {
    this->ip = NULL;
}

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
 8081648:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 808164c:	4604      	mov	r4, r0
 808164e:	4617      	mov	r7, r2
 8081650:	4698      	mov	r8, r3
 8081652:	460e      	mov	r6, r1
 8081654:	2500      	movs	r5, #0
 8081656:	f00f fb81 	bl	8090d5c <_ZN9TCPClientC1Ev>
 808165a:	61e5      	str	r5, [r4, #28]
 808165c:	490c      	ldr	r1, [pc, #48]	; (8081690 <_ZN4MQTTC1EPctPFvS0_PhjE+0x48>)
 808165e:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8081662:	f00f fcca 	bl	8090ffa <_ZN6StringC1EPK19__FlashStringHelper>
 8081666:	2301      	movs	r3, #1
 8081668:	f884 3682 	strb.w	r3, [r4, #1666]	; 0x682
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
 808166c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8081670:	9302      	str	r3, [sp, #8]
 8081672:	230f      	movs	r3, #15
 8081674:	9300      	str	r3, [sp, #0]
 8081676:	4620      	mov	r0, r4

MQTT::MQTT() {
    this->ip = NULL;
}

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
 8081678:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
 808167a:	f8cd 8004 	str.w	r8, [sp, #4]
 808167e:	463b      	mov	r3, r7
 8081680:	462a      	mov	r2, r5
 8081682:	4631      	mov	r1, r6
 8081684:	f7ff ffbc 	bl	8081600 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
 8081688:	4620      	mov	r0, r4
 808168a:	b004      	add	sp, #16
 808168c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081690:	08092be8 	.word	0x08092be8

08081694 <_ZN4MQTT11writeStringEPKcPht>:
    }
    tcpClient.stop();
    lastInActivity = lastOutActivity = millis();
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
 8081694:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
 8081696:	460d      	mov	r5, r1
 8081698:	3302      	adds	r3, #2
 808169a:	b29b      	uxth	r3, r3
 808169c:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
 808169e:	f815 6b01 	ldrb.w	r6, [r5], #1
 80816a2:	b2a4      	uxth	r4, r4
 80816a4:	b13e      	cbz	r6, 80816b6 <_ZN4MQTT11writeStringEPKcPht+0x22>
 80816a6:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
 80816aa:	429f      	cmp	r7, r3
 80816ac:	d903      	bls.n	80816b6 <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
 80816ae:	1c5c      	adds	r4, r3, #1
 80816b0:	54d6      	strb	r6, [r2, r3]
 80816b2:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
 80816b4:	e7f2      	b.n	808169c <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
 80816b6:	1b19      	subs	r1, r3, r4
 80816b8:	440a      	add	r2, r1
 80816ba:	1221      	asrs	r1, r4, #8
 80816bc:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
 80816c0:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
 80816c4:	4618      	mov	r0, r3
 80816c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080816c8 <_ZN4MQTT8netWriteEPhi>:


uint16_t MQTT::netWrite(unsigned char *buff, int length) {
 80816c8:	b510      	push	{r4, lr}
    debug_tls("netWrite!!\n");
    if (tls == false) {
 80816ca:	f890 4681 	ldrb.w	r4, [r0, #1665]	; 0x681
 80816ce:	b914      	cbnz	r4, 80816d6 <_ZN4MQTT8netWriteEPhi+0xe>
        return tcpClient.write(buff, length);
 80816d0:	f00f fbf8 	bl	8090ec4 <_ZN9TCPClient5writeEPKhj>
 80816d4:	e003      	b.n	80816de <_ZN4MQTT8netWriteEPhi+0x16>
    } else {
        return mbedtls_ssl_write(&ssl, buff, length);
 80816d6:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
 80816da:	f008 ff4d 	bl	808a578 <mbedtls_ssl_write>
 80816de:	b280      	uxth	r0, r0
    }
}
 80816e0:	bd10      	pop	{r4, pc}

080816e2 <_ZN4MQTT5writeEhPht>:
    }
    return false;
}


bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80816e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80816e4:	4607      	mov	r7, r0
 80816e6:	468e      	mov	lr, r1
 80816e8:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
 80816ea:	461d      	mov	r5, r3
}


bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
 80816ec:	2400      	movs	r4, #0
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
 80816ee:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80816f2:	a902      	add	r1, sp, #8
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
 80816f4:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80816f6:	4421      	add	r1, r4
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
 80816f8:	bf18      	it	ne
 80816fa:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
 80816fe:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 8081700:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
 8081704:	b2e4      	uxtb	r4, r4
    } while(len > 0);
 8081706:	2d00      	cmp	r5, #0
 8081708:	d1f1      	bne.n	80816ee <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
 808170a:	f1c4 0304 	rsb	r3, r4, #4
 808170e:	18d1      	adds	r1, r2, r3
 8081710:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
 8081714:	42a5      	cmp	r5, r4
 8081716:	da06      	bge.n	8081726 <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
 8081718:	a801      	add	r0, sp, #4
 808171a:	1b2b      	subs	r3, r5, r4
 808171c:	5c28      	ldrb	r0, [r5, r0]
 808171e:	4413      	add	r3, r2
 8081720:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
 8081722:	3501      	adds	r5, #1
 8081724:	e7f6      	b.n	8081714 <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = netWrite(buf+(4-llen), length+1+llen);
 8081726:	1c72      	adds	r2, r6, #1
 8081728:	4422      	add	r2, r4
 808172a:	4638      	mov	r0, r7
 808172c:	f7ff ffcc 	bl	80816c8 <_ZN4MQTT8netWriteEPhi>
 8081730:	4605      	mov	r5, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8081732:	f00e fe99 	bl	8090468 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
 8081736:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = netWrite(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
 8081738:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
 808173a:	19a0      	adds	r0, r4, r6
}
 808173c:	1b43      	subs	r3, r0, r5
 808173e:	4258      	negs	r0, r3
 8081740:	4158      	adcs	r0, r3
 8081742:	b003      	add	sp, #12
 8081744:	bdf0      	pop	{r4, r5, r6, r7, pc}

08081746 <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
 8081746:	b538      	push	{r3, r4, r5, lr}
 8081748:	4604      	mov	r4, r0
    debug_tls("mqtt disconnected\n");

    buffer[0] = MQTTDISCONNECT;
 808174a:	69c3      	ldr	r3, [r0, #28]
 808174c:	22e0      	movs	r2, #224	; 0xe0
 808174e:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
 8081750:	69c3      	ldr	r3, [r0, #28]
 8081752:	2500      	movs	r5, #0
 8081754:	705d      	strb	r5, [r3, #1]
    netWrite(buffer,2);
 8081756:	2202      	movs	r2, #2
 8081758:	69c1      	ldr	r1, [r0, #28]
 808175a:	f7ff ffb5 	bl	80816c8 <_ZN4MQTT8netWriteEPhi>

    if (tls) {
 808175e:	f894 3681 	ldrb.w	r3, [r4, #1665]	; 0x681
 8081762:	b1bb      	cbz	r3, 8081794 <_ZN4MQTT10disconnectEv+0x4e>
        debug_tls("tls close\n");
        tlsConnected = false;
        tls = false;
        mbedtls_x509_crt_free(&cacert);
 8081764:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
    buffer[1] = 0;
    netWrite(buffer,2);

    if (tls) {
        debug_tls("tls close\n");
        tlsConnected = false;
 8081768:	f884 5680 	strb.w	r5, [r4, #1664]	; 0x680
        tls = false;
 808176c:	f884 5681 	strb.w	r5, [r4, #1665]	; 0x681
        mbedtls_x509_crt_free(&cacert);
 8081770:	f007 f8d1 	bl	8088916 <mbedtls_x509_crt_free>
        mbedtls_x509_crt_free(&clicert);
 8081774:	f204 501c 	addw	r0, r4, #1308	; 0x51c
 8081778:	f007 f8cd 	bl	8088916 <mbedtls_x509_crt_free>
        mbedtls_pk_free(&pkey);
 808177c:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
 8081780:	f00a fe97 	bl	808c4b2 <mbedtls_pk_free>
        mbedtls_ssl_config_free (&conf);
 8081784:	f504 7061 	add.w	r0, r4, #900	; 0x384
 8081788:	f009 f8e6 	bl	808a958 <mbedtls_ssl_config_free>
        mbedtls_ssl_free (&ssl);
 808178c:	f504 7034 	add.w	r0, r4, #720	; 0x2d0
 8081790:	f009 f84e 	bl	808a830 <mbedtls_ssl_free>
    }
    tcpClient.stop();
 8081794:	4620      	mov	r0, r4
 8081796:	f00f fa7d 	bl	8090c94 <_ZN9TCPClient4stopEv>
 808179a:	f00e fe65 	bl	8090468 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
 808179e:	6260      	str	r0, [r4, #36]	; 0x24
 80817a0:	62a0      	str	r0, [r4, #40]	; 0x28
 80817a2:	bd38      	pop	{r3, r4, r5, pc}

080817a4 <_ZN4MQTT8readByteEv>:
        disconnect();
    }
    return false;
}

uint8_t MQTT::readByte() {
 80817a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (tls == false) {
 80817a6:	f890 3681 	ldrb.w	r3, [r0, #1665]	; 0x681
        disconnect();
    }
    return false;
}

uint8_t MQTT::readByte() {
 80817aa:	4604      	mov	r4, r0
    if (tls == false) {
 80817ac:	b94b      	cbnz	r3, 80817c2 <_ZN4MQTT8readByteEv+0x1e>
        while(!tcpClient.available()) {}
 80817ae:	4620      	mov	r0, r4
 80817b0:	f00f fa20 	bl	8090bf4 <_ZN9TCPClient9availableEv>
 80817b4:	2800      	cmp	r0, #0
 80817b6:	d0fa      	beq.n	80817ae <_ZN4MQTT8readByteEv+0xa>
        return tcpClient.read();
 80817b8:	4620      	mov	r0, r4
 80817ba:	f00f f9c2 	bl	8090b42 <_ZN9TCPClient4readEv>
 80817be:	b2c0      	uxtb	r0, r0
 80817c0:	e017      	b.n	80817f2 <_ZN4MQTT8readByteEv+0x4e>
    } else {
        uint8_t val = 0;
        uint8_t buff;

        if (tlsConnected) {
 80817c2:	f890 3680 	ldrb.w	r3, [r0, #1664]	; 0x680
 80817c6:	b19b      	cbz	r3, 80817f0 <_ZN4MQTT8readByteEv+0x4c>
            while (1) {
                int ret = mbedtls_ssl_read(&ssl, &buff, 1);
 80817c8:	f500 7534 	add.w	r5, r0, #720	; 0x2d0
 80817cc:	2201      	movs	r2, #1
 80817ce:	f10d 0107 	add.w	r1, sp, #7
 80817d2:	4628      	mov	r0, r5
 80817d4:	f008 fe4a 	bl	808a46c <mbedtls_ssl_read>
                if (ret < 0) {
 80817d8:	2800      	cmp	r0, #0
 80817da:	da06      	bge.n	80817ea <_ZN4MQTT8readByteEv+0x46>
                      switch (ret) {
 80817dc:	f510 4fd2 	cmn.w	r0, #26880	; 0x6900
 80817e0:	d0f4      	beq.n	80817cc <_ZN4MQTT8readByteEv+0x28>
                        case MBEDTLS_ERR_SSL_WANT_READ:
                          break;
                      case MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE:
                      case MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY:
                      default:
                          disconnect();
 80817e2:	4620      	mov	r0, r4
 80817e4:	f7ff ffaf 	bl	8081746 <_ZN4MQTT10disconnectEv>
 80817e8:	e002      	b.n	80817f0 <_ZN4MQTT8readByteEv+0x4c>
                          return -1;
                    }
                } else {
                    return buff;
 80817ea:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80817ee:	e000      	b.n	80817f2 <_ZN4MQTT8readByteEv+0x4e>
                }
            }
        } else {
            return -1;
 80817f0:	20ff      	movs	r0, #255	; 0xff
        }
    }
}
 80817f2:	b003      	add	sp, #12
 80817f4:	bd30      	pop	{r4, r5, pc}

080817f6 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80817f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80817fa:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
 80817fc:	69c4      	ldr	r4, [r0, #28]
            return -1;
        }
    }
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80817fe:	468a      	mov	sl, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
 8081800:	f7ff ffd0 	bl	80817a4 <_ZN4MQTT8readByteEv>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
 8081804:	f04f 0801 	mov.w	r8, #1
    }
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
 8081808:	4646      	mov	r6, r8
 808180a:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
 808180c:	69eb      	ldr	r3, [r5, #28]
    uint32_t multiplier = 1;
    uint16_t length = 0;
 808180e:	2700      	movs	r7, #0
 8081810:	f893 9000 	ldrb.w	r9, [r3]
 8081814:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
 8081818:	4628      	mov	r0, r5
 808181a:	f7ff ffc3 	bl	80817a4 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
 808181e:	69eb      	ldr	r3, [r5, #28]
 8081820:	1c74      	adds	r4, r6, #1
 8081822:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
 8081824:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 8081828:	fb03 7708 	mla	r7, r3, r8, r7
        multiplier *= 128;
    } while ((digit & 128) != 0);
 808182c:	0603      	lsls	r3, r0, #24
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 808182e:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
 8081830:	b2bf      	uxth	r7, r7
        multiplier *= 128;
 8081832:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    } while ((digit & 128) != 0);
 8081836:	d501      	bpl.n	808183c <_ZN4MQTT10readPacketEPh+0x46>
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 8081838:	4626      	mov	r6, r4
 808183a:	e7ed      	b.n	8081818 <_ZN4MQTT10readPacketEPh+0x22>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 808183c:	1e63      	subs	r3, r4, #1

    if (isPublish) {
 808183e:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 8081842:	f88a 3000 	strb.w	r3, [sl]

    if (isPublish) {
 8081846:	d113      	bne.n	8081870 <_ZN4MQTT10readPacketEPh+0x7a>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
 8081848:	4628      	mov	r0, r5
 808184a:	f8d5 801c 	ldr.w	r8, [r5, #28]
 808184e:	f7ff ffa9 	bl	80817a4 <_ZN4MQTT8readByteEv>
 8081852:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
 8081856:	4628      	mov	r0, r5
 8081858:	f8d5 801c 	ldr.w	r8, [r5, #28]
 808185c:	f7ff ffa2 	bl	80817a4 <_ZN4MQTT8readByteEv>
 8081860:	1cf4      	adds	r4, r6, #3
 8081862:	3602      	adds	r6, #2
 8081864:	b2b6      	uxth	r6, r6
 8081866:	b2a4      	uxth	r4, r4
 8081868:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
 808186c:	2302      	movs	r3, #2
 808186e:	e000      	b.n	8081872 <_ZN4MQTT10readPacketEPh+0x7c>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
 8081870:	2300      	movs	r3, #0
 8081872:	1b1b      	subs	r3, r3, r4
 8081874:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 8081876:	19a3      	adds	r3, r4, r6
 8081878:	b29b      	uxth	r3, r3
 808187a:	429f      	cmp	r7, r3
 808187c:	d90b      	bls.n	8081896 <_ZN4MQTT10readPacketEPh+0xa0>
        digit = readByte();
 808187e:	4628      	mov	r0, r5
 8081880:	f7ff ff90 	bl	80817a4 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
 8081884:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
 8081888:	42a3      	cmp	r3, r4
            buffer[len] = digit;
 808188a:	bf84      	itt	hi
 808188c:	69eb      	ldrhi	r3, [r5, #28]
 808188e:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
 8081890:	3401      	adds	r4, #1
 8081892:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 8081894:	e7ef      	b.n	8081876 <_ZN4MQTT10readPacketEPh+0x80>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
 8081896:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
 808189a:	42a0      	cmp	r0, r4
 808189c:	bf2c      	ite	cs
 808189e:	4620      	movcs	r0, r4
 80818a0:	2000      	movcc	r0, #0
 80818a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080818a6 <_ZN4MQTT11isConnectedEv>:
        return mbedtls_ssl_write(&ssl, buff, length);
    }
}


bool MQTT::isConnected() {
 80818a6:	b510      	push	{r4, lr}
 80818a8:	4604      	mov	r4, r0
    bool rc = (int)tcpClient.connected();
 80818aa:	f00f fb25 	bl	8090ef8 <_ZN9TCPClient9connectedEv>
    if (tls)
 80818ae:	f894 3681 	ldrb.w	r3, [r4, #1665]	; 0x681
 80818b2:	b91b      	cbnz	r3, 80818bc <_ZN4MQTT11isConnectedEv+0x16>
    }
}


bool MQTT::isConnected() {
    bool rc = (int)tcpClient.connected();
 80818b4:	3000      	adds	r0, #0
 80818b6:	bf18      	it	ne
 80818b8:	2001      	movne	r0, #1
 80818ba:	bd10      	pop	{r4, pc}
    if (tls)
        return tlsConnected;
 80818bc:	f894 0680 	ldrb.w	r0, [r4, #1664]	; 0x680
    return rc;
}
 80818c0:	bd10      	pop	{r4, pc}

080818c2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80818c2:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80818c6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80818c8:	4604      	mov	r4, r0
 80818ca:	468b      	mov	fp, r1
 80818cc:	4691      	mov	r9, r2
 80818ce:	469a      	mov	sl, r3
 80818d0:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80818d4:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80818d8:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    if (isConnected()) {
 80818dc:	f7ff ffe3 	bl	80818a6 <_ZN4MQTT11isConnectedEv>
 80818e0:	2800      	cmp	r0, #0
 80818e2:	d048      	beq.n	8081976 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, sizeof(buffer));
 80818e4:	69e3      	ldr	r3, [r4, #28]
 80818e6:	2200      	movs	r2, #0
 80818e8:	601a      	str	r2, [r3, #0]

        length = writeString(topic, buffer, length);
 80818ea:	69e2      	ldr	r2, [r4, #28]
 80818ec:	2305      	movs	r3, #5
 80818ee:	4659      	mov	r1, fp
 80818f0:	4620      	mov	r0, r4
 80818f2:	f7ff fecf 	bl	8081694 <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
 80818f6:	1e6b      	subs	r3, r5, #1
 80818f8:	2b01      	cmp	r3, #1
 80818fa:	d812      	bhi.n	8081922 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x60>
            nextMsgId += 1;
 80818fc:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80818fe:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, sizeof(buffer));

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
 8081900:	3301      	adds	r3, #1
 8081902:	b29b      	uxth	r3, r3
 8081904:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 8081906:	121b      	asrs	r3, r3, #8
 8081908:	5413      	strb	r3, [r2, r0]
 808190a:	1c41      	adds	r1, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
 808190c:	69e3      	ldr	r3, [r4, #28]
 808190e:	8c22      	ldrh	r2, [r4, #32]

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
            buffer[length++] = (nextMsgId >> 8);
 8081910:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
 8081912:	3002      	adds	r0, #2
 8081914:	b280      	uxth	r0, r0
 8081916:	545a      	strb	r2, [r3, r1]
            if (messageid != NULL)
 8081918:	b11e      	cbz	r6, 8081922 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x60>
                *messageid = nextMsgId++;
 808191a:	8c23      	ldrh	r3, [r4, #32]
 808191c:	1c5a      	adds	r2, r3, #1
 808191e:	8422      	strh	r2, [r4, #32]
 8081920:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 8081922:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 8081924:	b291      	uxth	r1, r2
 8081926:	1883      	adds	r3, r0, r2
 8081928:	458a      	cmp	sl, r1
 808192a:	b29b      	uxth	r3, r3
 808192c:	d909      	bls.n	8081942 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x80>
 808192e:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
 8081932:	3201      	adds	r2, #1
 8081934:	429e      	cmp	r6, r3
 8081936:	d904      	bls.n	8081942 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x80>
            buffer[length++] = payload[i];
 8081938:	f819 6001 	ldrb.w	r6, [r9, r1]
 808193c:	69e1      	ldr	r1, [r4, #28]
 808193e:	54ce      	strb	r6, [r1, r3]
 8081940:	e7f0      	b.n	8081924 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x62>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
 8081942:	f1b8 0f00 	cmp.w	r8, #0
 8081946:	bf0c      	ite	eq
 8081948:	2130      	moveq	r1, #48	; 0x30
 808194a:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
 808194c:	b10f      	cbz	r7, 8081952 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x90>
            header |= DUP_FLAG_ON_MASK;
 808194e:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
 8081952:	2d02      	cmp	r5, #2
 8081954:	d102      	bne.n	808195c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x9a>
            header |= MQTTQOS2_HEADER_MASK;
 8081956:	f041 0104 	orr.w	r1, r1, #4
 808195a:	e003      	b.n	8081964 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa2>
        else if (qos == QOS1)
 808195c:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
 808195e:	bf08      	it	eq
 8081960:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 8081964:	4620      	mov	r0, r4
 8081966:	3b05      	subs	r3, #5
 8081968:	69e2      	ldr	r2, [r4, #28]
 808196a:	b29b      	uxth	r3, r3
    }
    return false;
}
 808196c:	b001      	add	sp, #4
 808196e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 8081972:	f7ff beb6 	b.w	80816e2 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
 8081976:	b001      	add	sp, #4
 8081978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808197c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain) {
    return publish(topic, payload, plength, retain, QOS0, NULL);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
 808197c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
 808197e:	9c08      	ldr	r4, [sp, #32]
 8081980:	9403      	str	r4, [sp, #12]
 8081982:	2400      	movs	r4, #0
 8081984:	9402      	str	r4, [sp, #8]
 8081986:	f89d 401c 	ldrb.w	r4, [sp, #28]
 808198a:	9401      	str	r4, [sp, #4]
 808198c:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8081990:	9400      	str	r4, [sp, #0]
 8081992:	f7ff ff96 	bl	80818c2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
 8081996:	b004      	add	sp, #16
 8081998:	bd10      	pop	{r4, pc}

0808199a <_ZN4MQTT7publishEPKcS1_>:
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
 808199a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 808199c:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 808199e:	4610      	mov	r0, r2
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
 80819a0:	460e      	mov	r6, r1
 80819a2:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80819a4:	f010 fd2e 	bl	8092404 <strlen>
 80819a8:	2300      	movs	r3, #0
 80819aa:	9302      	str	r3, [sp, #8]
 80819ac:	9301      	str	r3, [sp, #4]
 80819ae:	9300      	str	r3, [sp, #0]
 80819b0:	4622      	mov	r2, r4
 80819b2:	4603      	mov	r3, r0
 80819b4:	4631      	mov	r1, r6
 80819b6:	4628      	mov	r0, r5
 80819b8:	f7ff ffe0 	bl	808197c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
 80819bc:	b004      	add	sp, #16
 80819be:	bd70      	pop	{r4, r5, r6, pc}

080819c0 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
}

bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
    if (qos < 0 || qos > 1)
 80819c0:	2a01      	cmp	r2, #1

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
}

bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
 80819c2:	b570      	push	{r4, r5, r6, lr}
 80819c4:	4604      	mov	r4, r0
 80819c6:	460e      	mov	r6, r1
 80819c8:	4615      	mov	r5, r2
    if (qos < 0 || qos > 1)
 80819ca:	d820      	bhi.n	8081a0e <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x4e>
        return false;

    if (isConnected()) {
 80819cc:	f7ff ff6b 	bl	80818a6 <_ZN4MQTT11isConnectedEv>
 80819d0:	b1e8      	cbz	r0, 8081a0e <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x4e>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
 80819d2:	8c23      	ldrh	r3, [r4, #32]
 80819d4:	3301      	adds	r3, #1
 80819d6:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
 80819d8:	b903      	cbnz	r3, 80819dc <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x1c>
            nextMsgId = 1;
 80819da:	2301      	movs	r3, #1
 80819dc:	8423      	strh	r3, [r4, #32]
        }
        buffer[length++] = (nextMsgId >> 8);
 80819de:	8c23      	ldrh	r3, [r4, #32]
 80819e0:	69e2      	ldr	r2, [r4, #28]
 80819e2:	121b      	asrs	r3, r3, #8
 80819e4:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
 80819e6:	69e3      	ldr	r3, [r4, #28]
 80819e8:	8c22      	ldrh	r2, [r4, #32]
        length = writeString(topic, buffer,length);
 80819ea:	4631      	mov	r1, r6
        nextMsgId++;
        if (nextMsgId == 0) {
            nextMsgId = 1;
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
 80819ec:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
 80819ee:	69e2      	ldr	r2, [r4, #28]
 80819f0:	2307      	movs	r3, #7
 80819f2:	4620      	mov	r0, r4
 80819f4:	f7ff fe4e 	bl	8081694 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
 80819f8:	69e3      	ldr	r3, [r4, #28]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80819fa:	2182      	movs	r1, #130	; 0x82
            nextMsgId = 1;
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
 80819fc:	541d      	strb	r5, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80819fe:	1f03      	subs	r3, r0, #4
 8081a00:	69e2      	ldr	r2, [r4, #28]
 8081a02:	4620      	mov	r0, r4
    }
    return false;
}
 8081a04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 8081a08:	b29b      	uxth	r3, r3
 8081a0a:	f7ff be6a 	b.w	80816e2 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
 8081a0e:	2000      	movs	r0, #0
 8081a10:	bd70      	pop	{r4, r5, r6, pc}

08081a12 <_ZN4MQTT9subscribeEPKc>:
    lastOutActivity = millis();
    return (rc == 1+llen+length);
}

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
 8081a12:	2200      	movs	r2, #0
 8081a14:	f7ff bfd4 	b.w	80819c0 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

08081a18 <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 8081a18:	b510      	push	{r4, lr}
 8081a1a:	4604      	mov	r4, r0
    if (isConnected()) {
 8081a1c:	f7ff ff43 	bl	80818a6 <_ZN4MQTT11isConnectedEv>
 8081a20:	b128      	cbz	r0, 8081a2e <_ZN4MQTTD1Ev+0x16>
        disconnect();
 8081a22:	4620      	mov	r0, r4
 8081a24:	f7ff fe8f 	bl	8081746 <_ZN4MQTT10disconnectEv>
        free(buffer);
 8081a28:	69e0      	ldr	r0, [r4, #28]
 8081a2a:	f00e ff25 	bl	8090878 <free>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 8081a2e:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8081a32:	f00f fa9b 	bl	8090f6c <_ZN6StringD1Ev>
 8081a36:	4620      	mov	r0, r4
 8081a38:	f7ff fdaa 	bl	8081590 <_ZN9TCPClientD1Ev>
    if (isConnected()) {
        disconnect();
        free(buffer);
    }
}
 8081a3c:	4620      	mov	r0, r4
 8081a3e:	bd10      	pop	{r4, pc}

08081a40 <_ZN4MQTT9availableEv>:
    if (tls)
        return tlsConnected;
    return rc;
}

bool MQTT::available() {
 8081a40:	b508      	push	{r3, lr}
    return tcpClient.available();
 8081a42:	f00f f8d7 	bl	8090bf4 <_ZN9TCPClient9availableEv>
}
 8081a46:	3000      	adds	r0, #0
 8081a48:	bf18      	it	ne
 8081a4a:	2001      	movne	r0, #1
 8081a4c:	bd08      	pop	{r3, pc}

08081a4e <_ZN4MQTT4loopEv>:
    }

    return len;
}

bool MQTT::loop() {
 8081a4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081a52:	b083      	sub	sp, #12
 8081a54:	af00      	add	r7, sp, #0
 8081a56:	4604      	mov	r4, r0
    if (isConnected()) {
 8081a58:	f7ff ff25 	bl	80818a6 <_ZN4MQTT11isConnectedEv>
 8081a5c:	4606      	mov	r6, r0
 8081a5e:	2800      	cmp	r0, #0
 8081a60:	f000 80be 	beq.w	8081be0 <_ZN4MQTT4loopEv+0x192>
 8081a64:	f00e fd00 	bl	8090468 <HAL_Timer_Get_Milli_Seconds>
        unsigned long t = millis();
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
 8081a68:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8081a6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8081a6e:	4353      	muls	r3, r2
 8081a70:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8081a72:	4605      	mov	r5, r0
 8081a74:	1a82      	subs	r2, r0, r2
 8081a76:	429a      	cmp	r2, r3
 8081a78:	d803      	bhi.n	8081a82 <_ZN4MQTT4loopEv+0x34>
 8081a7a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8081a7c:	1a82      	subs	r2, r0, r2
 8081a7e:	4293      	cmp	r3, r2
 8081a80:	d216      	bcs.n	8081ab0 <_ZN4MQTT4loopEv+0x62>
            if (pingOutstanding) {
 8081a82:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8081a86:	b123      	cbz	r3, 8081a92 <_ZN4MQTT4loopEv+0x44>
                disconnect();
 8081a88:	4620      	mov	r0, r4
 8081a8a:	f7ff fe5c 	bl	8081746 <_ZN4MQTT10disconnectEv>
                return false;
 8081a8e:	2600      	movs	r6, #0
 8081a90:	e0a6      	b.n	8081be0 <_ZN4MQTT4loopEv+0x192>
            } else {
                buffer[0] = MQTTPINGREQ;
 8081a92:	69e2      	ldr	r2, [r4, #28]
 8081a94:	21c0      	movs	r1, #192	; 0xc0
 8081a96:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
 8081a98:	69e2      	ldr	r2, [r4, #28]
                netWrite(buffer,2);
 8081a9a:	4620      	mov	r0, r4
            if (pingOutstanding) {
                disconnect();
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
 8081a9c:	7053      	strb	r3, [r2, #1]
                netWrite(buffer,2);
 8081a9e:	69e1      	ldr	r1, [r4, #28]
 8081aa0:	2202      	movs	r2, #2
 8081aa2:	f7ff fe11 	bl	80816c8 <_ZN4MQTT8netWriteEPhi>
                lastOutActivity = t;
                lastInActivity = t;
                pingOutstanding = true;
 8081aa6:	2301      	movs	r3, #1
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
                netWrite(buffer,2);
                lastOutActivity = t;
 8081aa8:	6265      	str	r5, [r4, #36]	; 0x24
                lastInActivity = t;
 8081aaa:	62a5      	str	r5, [r4, #40]	; 0x28
                pingOutstanding = true;
 8081aac:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            }
        }
        if (available()) {
 8081ab0:	4620      	mov	r0, r4
 8081ab2:	f7ff ffc5 	bl	8081a40 <_ZN4MQTT9availableEv>
 8081ab6:	4681      	mov	r9, r0
 8081ab8:	2800      	cmp	r0, #0
 8081aba:	f000 8091 	beq.w	8081be0 <_ZN4MQTT4loopEv+0x192>
            uint8_t llen;
            uint16_t len = readPacket(&llen);
 8081abe:	1df9      	adds	r1, r7, #7
 8081ac0:	4620      	mov	r0, r4
 8081ac2:	f7ff fe98 	bl	80817f6 <_ZN4MQTT10readPacketEPh>
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
 8081ac6:	4602      	mov	r2, r0
 8081ac8:	2800      	cmp	r0, #0
 8081aca:	f000 8088 	beq.w	8081bde <_ZN4MQTT4loopEv+0x190>
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
 8081ace:	69e1      	ldr	r1, [r4, #28]
            uint8_t llen;
            uint16_t len = readPacket(&llen);
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
                lastInActivity = t;
 8081ad0:	62a5      	str	r5, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
 8081ad2:	7808      	ldrb	r0, [r1, #0]
 8081ad4:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
                if (type == MQTTPUBLISH) {
 8081ad8:	2b30      	cmp	r3, #48	; 0x30
 8081ada:	d158      	bne.n	8081b8e <_ZN4MQTT4loopEv+0x140>
                    if (callback) {
 8081adc:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
 8081ae0:	f1bb 0f00 	cmp.w	fp, #0
 8081ae4:	d07b      	beq.n	8081bde <_ZN4MQTT4loopEv+0x190>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
 8081ae6:	f897 e007 	ldrb.w	lr, [r7, #7]
                            netWrite(buffer,4);
                            lastOutActivity = t;
                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
 8081aea:	46ea      	mov	sl, sp
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
 8081aec:	eb01 000e 	add.w	r0, r1, lr
 8081af0:	7846      	ldrb	r6, [r0, #1]
 8081af2:	7883      	ldrb	r3, [r0, #2]
 8081af4:	eb03 2306 	add.w	r3, r3, r6, lsl #8
 8081af8:	b29b      	uxth	r3, r3
                        char topic[tl+1];
 8081afa:	f103 0008 	add.w	r0, r3, #8
 8081afe:	f020 0007 	bic.w	r0, r0, #7
 8081b02:	ebad 0d00 	sub.w	sp, sp, r0
 8081b06:	4668      	mov	r0, sp
 8081b08:	2600      	movs	r6, #0
                        for (uint16_t i=0;i<tl;i++) {
 8081b0a:	fa1f fc86 	uxth.w	ip, r6
 8081b0e:	4563      	cmp	r3, ip
 8081b10:	d908      	bls.n	8081b24 <_ZN4MQTT4loopEv+0xd6>
                            topic[i] = buffer[llen+3+i];
 8081b12:	eb0e 0c06 	add.w	ip, lr, r6
 8081b16:	448c      	add	ip, r1
 8081b18:	f89c c003 	ldrb.w	ip, [ip, #3]
 8081b1c:	f800 c006 	strb.w	ip, [r0, r6]
 8081b20:	3601      	adds	r6, #1
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2];
                        char topic[tl+1];
                        for (uint16_t i=0;i<tl;i++) {
 8081b22:	e7f2      	b.n	8081b0a <_ZN4MQTT4loopEv+0xbc>
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
 8081b24:	2600      	movs	r6, #0
 8081b26:	54c6      	strb	r6, [r0, r3]
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) {
 8081b28:	f891 8000 	ldrb.w	r8, [r1]
 8081b2c:	f10e 0603 	add.w	r6, lr, #3
 8081b30:	f008 0806 	and.w	r8, r8, #6
 8081b34:	f1b8 0f02 	cmp.w	r8, #2
 8081b38:	ebce 0202 	rsb	r2, lr, r2
 8081b3c:	d120      	bne.n	8081b80 <_ZN4MQTT4loopEv+0x132>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 8081b3e:	441e      	add	r6, r3
 8081b40:	f811 c006 	ldrb.w	ip, [r1, r6]
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 8081b44:	f10e 0e05 	add.w	lr, lr, #5
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) {
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 8081b48:	440e      	add	r6, r1
 8081b4a:	7876      	ldrb	r6, [r6, #1]
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 8081b4c:	1ad2      	subs	r2, r2, r3
 8081b4e:	4473      	add	r3, lr
 8081b50:	4419      	add	r1, r3
 8081b52:	3a05      	subs	r2, #5
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) {
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 8081b54:	eb06 260c 	add.w	r6, r6, ip, lsl #8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 8081b58:	47d8      	blx	fp

                            buffer[0] = MQTTPUBACK;
 8081b5a:	69e3      	ldr	r3, [r4, #28]
 8081b5c:	2240      	movs	r2, #64	; 0x40
 8081b5e:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
 8081b60:	69e3      	ldr	r3, [r4, #28]
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) {
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 8081b62:	b2b6      	uxth	r6, r6
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK;
                            buffer[1] = 2;
 8081b64:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
 8081b68:	69e3      	ldr	r3, [r4, #28]
 8081b6a:	1232      	asrs	r2, r6, #8
 8081b6c:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
 8081b6e:	69e3      	ldr	r3, [r4, #28]
                            netWrite(buffer,4);
 8081b70:	2204      	movs	r2, #4
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK;
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
 8081b72:	70de      	strb	r6, [r3, #3]
                            netWrite(buffer,4);
 8081b74:	69e1      	ldr	r1, [r4, #28]
 8081b76:	4620      	mov	r0, r4
 8081b78:	f7ff fda6 	bl	80816c8 <_ZN4MQTT8netWriteEPhi>
                            lastOutActivity = t;
 8081b7c:	6265      	str	r5, [r4, #36]	; 0x24
 8081b7e:	e004      	b.n	8081b8a <_ZN4MQTT4loopEv+0x13c>
                        } else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
 8081b80:	3a03      	subs	r2, #3
 8081b82:	441e      	add	r6, r3
 8081b84:	1ad2      	subs	r2, r2, r3
 8081b86:	4431      	add	r1, r6
 8081b88:	47d8      	blx	fp
 8081b8a:	46d5      	mov	sp, sl
 8081b8c:	e027      	b.n	8081bde <_ZN4MQTT4loopEv+0x190>
                        }
                    }
                } else if (type == MQTTPUBACK || type == MQTTPUBREC) {
 8081b8e:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
 8081b92:	2d40      	cmp	r5, #64	; 0x40
 8081b94:	d10d      	bne.n	8081bb2 <_ZN4MQTT4loopEv+0x164>
                    if (qoscallback) {
 8081b96:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8081b98:	b30c      	cbz	r4, 8081bde <_ZN4MQTT4loopEv+0x190>
                        // msgId only present for QOS==0
                        if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
 8081b9a:	2a04      	cmp	r2, #4
 8081b9c:	d11f      	bne.n	8081bde <_ZN4MQTT4loopEv+0x190>
 8081b9e:	f010 0f06 	tst.w	r0, #6
 8081ba2:	d11c      	bne.n	8081bde <_ZN4MQTT4loopEv+0x190>
                            msgId = (buffer[2]<<8)+buffer[3];
                            this->qoscallback(msgId);
 8081ba4:	7888      	ldrb	r0, [r1, #2]
 8081ba6:	78cb      	ldrb	r3, [r1, #3]
 8081ba8:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8081bac:	b280      	uxth	r0, r0
 8081bae:	47a0      	blx	r4
 8081bb0:	e015      	b.n	8081bde <_ZN4MQTT4loopEv+0x190>
                        }
                    }
                } else if (type == MQTTPUBCOMP) {
 8081bb2:	2b70      	cmp	r3, #112	; 0x70
 8081bb4:	d013      	beq.n	8081bde <_ZN4MQTT4loopEv+0x190>
                    // TODO:if something...
                } else if (type == MQTTSUBACK) {
 8081bb6:	2b90      	cmp	r3, #144	; 0x90
 8081bb8:	d011      	beq.n	8081bde <_ZN4MQTT4loopEv+0x190>
                    // if something...
                } else if (type == MQTTPINGREQ) {
 8081bba:	2bc0      	cmp	r3, #192	; 0xc0
 8081bbc:	d10a      	bne.n	8081bd4 <_ZN4MQTT4loopEv+0x186>
                    buffer[0] = MQTTPINGRESP;
 8081bbe:	23d0      	movs	r3, #208	; 0xd0
 8081bc0:	700b      	strb	r3, [r1, #0]
                    buffer[1] = 0;
 8081bc2:	69e3      	ldr	r3, [r4, #28]
 8081bc4:	2200      	movs	r2, #0
 8081bc6:	705a      	strb	r2, [r3, #1]
                    netWrite(buffer,2);
 8081bc8:	69e1      	ldr	r1, [r4, #28]
 8081bca:	2202      	movs	r2, #2
 8081bcc:	4620      	mov	r0, r4
 8081bce:	f7ff fd7b 	bl	80816c8 <_ZN4MQTT8netWriteEPhi>
 8081bd2:	e004      	b.n	8081bde <_ZN4MQTT4loopEv+0x190>
                } else if (type == MQTTPINGRESP) {
 8081bd4:	2bd0      	cmp	r3, #208	; 0xd0
                    pingOutstanding = false;
 8081bd6:	bf04      	itt	eq
 8081bd8:	2300      	moveq	r3, #0
 8081bda:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
                }
            }
        }
        return true;
 8081bde:	464e      	mov	r6, r9
    }
    return false;
}
 8081be0:	4630      	mov	r0, r6
 8081be2:	370c      	adds	r7, #12
 8081be4:	46bd      	mov	sp, r7
 8081be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08081bec <_ZN4MQTT9enableTlsEPKcjS1_jS1_j>:
    return this->enableTls(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int MQTT::enableTls(const char *rootCaPem, const size_t rootCaPemSize,
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
 8081bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081bf0:	4605      	mov	r5, r0
 8081bf2:	4693      	mov	fp, r2
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
 8081bf4:	f500 7461 	add.w	r4, r0, #900	; 0x384
    return this->enableTls(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int MQTT::enableTls(const char *rootCaPem, const size_t rootCaPemSize,
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
 8081bf8:	4699      	mov	r9, r3
    int ret;
    tls = true;
 8081bfa:	2301      	movs	r3, #1
    return this->enableTls(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int MQTT::enableTls(const char *rootCaPem, const size_t rootCaPemSize,
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
 8081bfc:	b085      	sub	sp, #20
    int ret;
    tls = true;
 8081bfe:	f880 3681 	strb.w	r3, [r0, #1665]	; 0x681

    mbedtls_ssl_config_init(&conf);
    mbedtls_ssl_init(&ssl);
 8081c02:	f505 7634 	add.w	r6, r5, #720	; 0x2d0
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
 8081c06:	4620      	mov	r0, r4
    return this->enableTls(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int MQTT::enableTls(const char *rootCaPem, const size_t rootCaPemSize,
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
 8081c08:	9103      	str	r1, [sp, #12]
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
    mbedtls_ssl_init(&ssl);
    mbedtls_x509_crt_init(&cacert);
 8081c0a:	f505 7a7a 	add.w	sl, r5, #1000	; 0x3e8
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
 8081c0e:	f008 fe5d 	bl	808a8cc <mbedtls_ssl_config_init>
    mbedtls_ssl_init(&ssl);
 8081c12:	4630      	mov	r0, r6
 8081c14:	f008 fb82 	bl	808a31c <mbedtls_ssl_init>
    mbedtls_x509_crt_init(&cacert);
    mbedtls_x509_crt_init(&clicert);
 8081c18:	f205 571c 	addw	r7, r5, #1308	; 0x51c
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
    mbedtls_ssl_init(&ssl);
    mbedtls_x509_crt_init(&cacert);
 8081c1c:	4650      	mov	r0, sl
 8081c1e:	f006 fe75 	bl	808890c <mbedtls_x509_crt_init>
    mbedtls_x509_crt_init(&clicert);
    mbedtls_pk_init(&pkey);
 8081c22:	f505 68ca 	add.w	r8, r5, #1616	; 0x650
    tls = true;

    mbedtls_ssl_config_init(&conf);
    mbedtls_ssl_init(&ssl);
    mbedtls_x509_crt_init(&cacert);
    mbedtls_x509_crt_init(&clicert);
 8081c26:	4638      	mov	r0, r7
 8081c28:	f006 fe70 	bl	808890c <mbedtls_x509_crt_init>
    mbedtls_pk_init(&pkey);
 8081c2c:	4640      	mov	r0, r8
 8081c2e:	f00a fc3b 	bl	808c4a8 <mbedtls_pk_init>

    mbedtls_ssl_conf_dbg(&conf, &MQTT::debug_Tls, nullptr);
 8081c32:	2200      	movs	r2, #0
 8081c34:	4935      	ldr	r1, [pc, #212]	; (8081d0c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x120>)
 8081c36:	4620      	mov	r0, r4
 8081c38:	f008 fb81 	bl	808a33e <mbedtls_ssl_conf_dbg>
    #if defined(MBEDTLS_DEBUG_C)
      mbedtls_debug_set_threshold(DEBUG_TLS_CORE_LEVEL);
    #endif

    if ((ret = mbedtls_x509_crt_parse(&cacert, (const unsigned char *)rootCaPem, rootCaPemSize)) < 0) {
 8081c3c:	465a      	mov	r2, fp
 8081c3e:	9903      	ldr	r1, [sp, #12]
 8081c40:	4650      	mov	r0, sl
 8081c42:	f007 fa01 	bl	8089048 <mbedtls_x509_crt_parse>
 8081c46:	2800      	cmp	r0, #0
 8081c48:	db5d      	blt.n	8081d06 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x11a>
      debug_tls(" enableTls mbedtls_x509_crt_parse error : %d\n", ret);
      return ret;
    }

    if (clientCertPem != NULL && clientCertPemSize > 0) {
 8081c4a:	f1b9 0f00 	cmp.w	r9, #0
 8081c4e:	d102      	bne.n	8081c56 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x6a>
        debug_tls(" tlsClientKey mbedtls_x509_crt_parse error : %d\n", ret);
        return ret;
      }
    }

    if (clientKeyPem != NULL && clientKeyPemSize > 0) {
 8081c50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8081c52:	b95b      	cbnz	r3, 8081c6c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x80>
 8081c54:	e00c      	b.n	8081c70 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x84>
    if ((ret = mbedtls_x509_crt_parse(&cacert, (const unsigned char *)rootCaPem, rootCaPemSize)) < 0) {
      debug_tls(" enableTls mbedtls_x509_crt_parse error : %d\n", ret);
      return ret;
    }

    if (clientCertPem != NULL && clientCertPemSize > 0) {
 8081c56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8081c58:	2b00      	cmp	r3, #0
 8081c5a:	d0f9      	beq.n	8081c50 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x64>
      if ((ret = mbedtls_x509_crt_parse(&clicert, (const unsigned char *)clientCertPem, clientCertPemSize)) < 0) {
 8081c5c:	461a      	mov	r2, r3
 8081c5e:	4649      	mov	r1, r9
 8081c60:	4638      	mov	r0, r7
 8081c62:	f007 f9f1 	bl	8089048 <mbedtls_x509_crt_parse>
 8081c66:	2800      	cmp	r0, #0
 8081c68:	daf2      	bge.n	8081c50 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x64>
 8081c6a:	e04c      	b.n	8081d06 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x11a>
        debug_tls(" tlsClientKey mbedtls_x509_crt_parse error : %d\n", ret);
        return ret;
      }
    }

    if (clientKeyPem != NULL && clientKeyPemSize > 0) {
 8081c6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8081c6e:	b94b      	cbnz	r3, 8081c84 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x98>
        debug_tls(" tlsClientKey mbedtls_pk_parse_key error : %d\n", ret);
        return ret;
      }
    }

    if ((ret = mbedtls_ssl_config_defaults(&conf, MBEDTLS_SSL_IS_CLIENT,
 8081c70:	2300      	movs	r3, #0
 8081c72:	461a      	mov	r2, r3
 8081c74:	4619      	mov	r1, r3
 8081c76:	4620      	mov	r0, r4
 8081c78:	f008 fe2c 	bl	808a8d4 <mbedtls_ssl_config_defaults>
 8081c7c:	4683      	mov	fp, r0
 8081c7e:	2800      	cmp	r0, #0
 8081c80:	d141      	bne.n	8081d06 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x11a>
 8081c82:	e009      	b.n	8081c98 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0xac>
        return ret;
      }
    }

    if (clientKeyPem != NULL && clientKeyPemSize > 0) {
      if ((ret = mbedtls_pk_parse_key(&pkey, (const unsigned char *)clientKeyPem, clientKeyPemSize, NULL, 0)) != 0) {
 8081c84:	2300      	movs	r3, #0
 8081c86:	9300      	str	r3, [sp, #0]
 8081c88:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8081c8a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8081c8c:	4640      	mov	r0, r8
 8081c8e:	f005 f83b 	bl	8086d08 <mbedtls_pk_parse_key>
 8081c92:	2800      	cmp	r0, #0
 8081c94:	d0ec      	beq.n	8081c70 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x84>
 8081c96:	e036      	b.n	8081d06 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x11a>

    if ((ret = mbedtls_ssl_config_defaults(&conf, MBEDTLS_SSL_IS_CLIENT,
                   MBEDTLS_SSL_TRANSPORT_STREAM, MBEDTLS_SSL_PRESET_DEFAULT)) != 0) {
      return ret;
    }
    mbedtls_ssl_conf_min_version(&conf, MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3);
 8081c98:	2203      	movs	r2, #3
 8081c9a:	4611      	mov	r1, r2
 8081c9c:	4620      	mov	r0, r4
 8081c9e:	f008 fb9b 	bl	808a3d8 <mbedtls_ssl_conf_min_version>
    mbedtls_ssl_conf_verify(&conf, &MQTT::veryfyCert_Tls, NULL);
 8081ca2:	465a      	mov	r2, fp
 8081ca4:	491a      	ldr	r1, [pc, #104]	; (8081d10 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x124>)
 8081ca6:	4620      	mov	r0, r4
 8081ca8:	f008 fb43 	bl	808a332 <mbedtls_ssl_conf_verify>

    // if server certificates is not valid, connection will success. check certificates on verify() function.
    mbedtls_ssl_conf_authmode(&conf, MBEDTLS_SSL_VERIFY_OPTIONAL);
 8081cac:	2101      	movs	r1, #1
 8081cae:	4620      	mov	r0, r4
 8081cb0:	f008 fb38 	bl	808a324 <mbedtls_ssl_conf_authmode>
    mbedtls_ssl_conf_rng(&conf, &MQTT::rng_Tls, nullptr);
 8081cb4:	465a      	mov	r2, fp
 8081cb6:	4917      	ldr	r1, [pc, #92]	; (8081d14 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x128>)
 8081cb8:	4620      	mov	r0, r4
 8081cba:	f008 fb3d 	bl	808a338 <mbedtls_ssl_conf_rng>
    mbedtls_ssl_conf_ca_chain(&conf, &cacert, nullptr);
 8081cbe:	465a      	mov	r2, fp
 8081cc0:	4651      	mov	r1, sl
 8081cc2:	4620      	mov	r0, r4
 8081cc4:	f008 fb4f 	bl	808a366 <mbedtls_ssl_conf_ca_chain>

    if (clientCertPem != NULL && clientKeyPem != NULL) {
 8081cc8:	f1b9 0f00 	cmp.w	r9, #0
 8081ccc:	d006      	beq.n	8081cdc <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0xf0>
 8081cce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8081cd0:	b123      	cbz	r3, 8081cdc <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0xf0>
      mbedtls_ssl_conf_own_cert(&conf, &clicert, &pkey);
 8081cd2:	4642      	mov	r2, r8
 8081cd4:	4639      	mov	r1, r7
 8081cd6:	4620      	mov	r0, r4
 8081cd8:	f008 fb42 	bl	808a360 <mbedtls_ssl_conf_own_cert>
    }

    if((ret = mbedtls_ssl_setup(&ssl, &conf)) != 0) {
 8081cdc:	4621      	mov	r1, r4
 8081cde:	4630      	mov	r0, r6
 8081ce0:	f008 fd6c 	bl	808a7bc <mbedtls_ssl_setup>
 8081ce4:	4604      	mov	r4, r0
 8081ce6:	b968      	cbnz	r0, 8081d04 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x118>
      return ret;
    }

    mbedtls_ssl_set_timer_cb(&ssl, &timer, mbedtls_timing_set_delay, mbedtls_timing_get_delay);
 8081ce8:	4b0b      	ldr	r3, [pc, #44]	; (8081d18 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x12c>)
 8081cea:	4a0c      	ldr	r2, [pc, #48]	; (8081d1c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x130>)
 8081cec:	f505 61cb 	add.w	r1, r5, #1624	; 0x658
 8081cf0:	4630      	mov	r0, r6
 8081cf2:	f008 fb2d 	bl	808a350 <mbedtls_ssl_set_timer_cb>
    mbedtls_ssl_set_bio(&ssl, this, &MQTT::send_Tls,  &MQTT::recv_Tls, nullptr);
 8081cf6:	9400      	str	r4, [sp, #0]
 8081cf8:	4b09      	ldr	r3, [pc, #36]	; (8081d20 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x134>)
 8081cfa:	4a0a      	ldr	r2, [pc, #40]	; (8081d24 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x138>)
 8081cfc:	4629      	mov	r1, r5
 8081cfe:	4630      	mov	r0, r6
 8081d00:	f008 fb20 	bl	808a344 <mbedtls_ssl_set_bio>
 8081d04:	4620      	mov	r0, r4
    return 0;
}
 8081d06:	b005      	add	sp, #20
 8081d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081d0c:	080814d3 	.word	0x080814d3
 8081d10:	0808156d 	.word	0x0808156d
 8081d14:	08081539 	.word	0x08081539
 8081d18:	08085f51 	.word	0x08085f51
 8081d1c:	08085f43 	.word	0x08085f43
 8081d20:	08081509 	.word	0x08081509
 8081d24:	080814d5 	.word	0x080814d5

08081d28 <_ZN4MQTT6verifyEv>:
      return 0;
  }
  return ret;
}

bool MQTT::verify() {
 8081d28:	b500      	push	{lr}
  int ret;
  if ((ret = mbedtls_ssl_get_verify_result(&ssl)) != 0 ) {
 8081d2a:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
      return 0;
  }
  return ret;
}

bool MQTT::verify() {
 8081d2e:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
  int ret;
  if ((ret = mbedtls_ssl_get_verify_result(&ssl)) != 0 ) {
 8081d32:	f008 fb56 	bl	808a3e2 <mbedtls_ssl_get_verify_result>
 8081d36:	4603      	mov	r3, r0
 8081d38:	b138      	cbz	r0, 8081d4a <_ZN4MQTT6verifyEv+0x22>
    char vrfy_buf[512];
    mbedtls_x509_crt_verify_info( vrfy_buf, sizeof( vrfy_buf ), "  ! ", ret );
 8081d3a:	4a06      	ldr	r2, [pc, #24]	; (8081d54 <_ZN4MQTT6verifyEv+0x2c>)
 8081d3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8081d40:	4668      	mov	r0, sp
 8081d42:	f006 f9cd 	bl	80880e0 <mbedtls_x509_crt_verify_info>
    debug_tls("%s\n", vrfy_buf);
    return false;
 8081d46:	2000      	movs	r0, #0
 8081d48:	e000      	b.n	8081d4c <_ZN4MQTT6verifyEv+0x24>
  }
  return true;
 8081d4a:	2001      	movs	r0, #1
}
 8081d4c:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
 8081d50:	f85d fb04 	ldr.w	pc, [sp], #4
 8081d54:	08092584 	.word	0x08092584

08081d58 <_ZN4MQTT12handShakeTlsEv>:
    mbedtls_ssl_set_bio(&ssl, this, &MQTT::send_Tls,  &MQTT::recv_Tls, nullptr);
    return 0;
}


int MQTT::handShakeTls() {
 8081d58:	b570      	push	{r4, r5, r6, lr}
 8081d5a:	4604      	mov	r4, r0
  int ret;
  debug_tls("hand shake start\n");
  do {
      while (ssl.state != MBEDTLS_SSL_HANDSHAKE_OVER) {
          ret = mbedtls_ssl_handshake_client_step(&ssl);
 8081d5c:	f500 7634 	add.w	r6, r0, #720	; 0x2d0

int MQTT::handShakeTls() {
  int ret;
  debug_tls("hand shake start\n");
  do {
      while (ssl.state != MBEDTLS_SSL_HANDSHAKE_OVER) {
 8081d60:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8081d64:	2b10      	cmp	r3, #16
 8081d66:	d005      	beq.n	8081d74 <_ZN4MQTT12handShakeTlsEv+0x1c>
          ret = mbedtls_ssl_handshake_client_step(&ssl);
 8081d68:	4630      	mov	r0, r6
 8081d6a:	f00d f93d 	bl	808efe8 <mbedtls_ssl_handshake_client_step>
          if (ret != 0)
 8081d6e:	4605      	mov	r5, r0
 8081d70:	2800      	cmp	r0, #0
 8081d72:	d0f5      	beq.n	8081d60 <_ZN4MQTT12handShakeTlsEv+0x8>
              break;
      }
  } while (ret == MBEDTLS_ERR_SSL_WANT_READ || ret == MBEDTLS_ERR_SSL_WANT_WRITE);
 8081d74:	f515 4fd2 	cmn.w	r5, #26880	; 0x6900
 8081d78:	d0f2      	beq.n	8081d60 <_ZN4MQTT12handShakeTlsEv+0x8>
 8081d7a:	f515 4fd1 	cmn.w	r5, #26752	; 0x6880
 8081d7e:	d0ef      	beq.n	8081d60 <_ZN4MQTT12handShakeTlsEv+0x8>

  // clean ca cert/crt/pkey for memory limitation
  mbedtls_x509_crt_free(&cacert);
 8081d80:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
 8081d84:	f006 fdc7 	bl	8088916 <mbedtls_x509_crt_free>
  mbedtls_x509_crt_free(&clicert);
 8081d88:	f204 501c 	addw	r0, r4, #1308	; 0x51c
 8081d8c:	f006 fdc3 	bl	8088916 <mbedtls_x509_crt_free>
  mbedtls_pk_free(&pkey);
 8081d90:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
 8081d94:	f00a fb8d 	bl	808c4b2 <mbedtls_pk_free>

  debug_tls("%s, ret = %d\n", "handshake done", ret);
  if (ssl.state == MBEDTLS_SSL_HANDSHAKE_OVER) {
 8081d98:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8081d9c:	2b10      	cmp	r3, #16
 8081d9e:	d109      	bne.n	8081db4 <_ZN4MQTT12handShakeTlsEv+0x5c>
      if (enableVerify && !verify())
 8081da0:	f894 3682 	ldrb.w	r3, [r4, #1666]	; 0x682
 8081da4:	b143      	cbz	r3, 8081db8 <_ZN4MQTT12handShakeTlsEv+0x60>
 8081da6:	4620      	mov	r0, r4
 8081da8:	f7ff ffbe 	bl	8081d28 <_ZN4MQTT6verifyEv>
 8081dac:	b920      	cbnz	r0, 8081db8 <_ZN4MQTT12handShakeTlsEv+0x60>
        return -1;
 8081dae:	f04f 30ff 	mov.w	r0, #4294967295
 8081db2:	bd70      	pop	{r4, r5, r6, pc}
 8081db4:	4628      	mov	r0, r5
 8081db6:	bd70      	pop	{r4, r5, r6, pc}
      tlsConnected = true;
 8081db8:	2301      	movs	r3, #1
 8081dba:	f884 3680 	strb.w	r3, [r4, #1664]	; 0x680
      debug_tls("tls connected\n");
      return 0;
 8081dbe:	2000      	movs	r0, #0
  }
  return ret;
}
 8081dc0:	bd70      	pop	{r4, r5, r6, pc}
	...

08081dc4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:

bool MQTT::connect(const char *id, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage) {
    return connect(id,NULL,NULL,willTopic,willQos,willRetain,willMessage,true,MQTT_V311);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
 8081dc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8081dc8:	b08b      	sub	sp, #44	; 0x2c
 8081dca:	4604      	mov	r4, r0
 8081dcc:	4689      	mov	r9, r1
 8081dce:	4617      	mov	r7, r2
 8081dd0:	461e      	mov	r6, r3
 8081dd2:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
    if (!isConnected()) {
 8081dd6:	f7ff fd66 	bl	80818a6 <_ZN4MQTT11isConnectedEv>
 8081dda:	4605      	mov	r5, r0
 8081ddc:	2800      	cmp	r0, #0
 8081dde:	f040 80e7 	bne.w	8081fb0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ec>
        int result = 0;
        if (ip == NULL) {
 8081de2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8081de4:	2900      	cmp	r1, #0
 8081de6:	d138      	bne.n	8081e5a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
            result = tcpClient.connect(this->domain.c_str(), this->port);
 8081de8:	4603      	mov	r3, r0
 8081dea:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 8081dee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8081df0:	4620      	mov	r0, r4
 8081df2:	f00e fe3b 	bl	8090a6c <_ZN9TCPClient7connectEPKctm>
            if (tls) {
 8081df6:	f894 3681 	ldrb.w	r3, [r4, #1665]	; 0x681
 8081dfa:	2b00      	cmp	r3, #0
 8081dfc:	d050      	beq.n	8081ea0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
                mbedtls_ssl_set_hostname(&ssl, domain);
 8081dfe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8081e00:	f504 7034 	add.w	r0, r4, #720	; 0x2d0
 8081e04:	f008 fab2 	bl	808a36c <mbedtls_ssl_set_hostname>
                result = (0 == this->handShakeTls() ? 1 : 0);
 8081e08:	4620      	mov	r0, r4
 8081e0a:	f7ff ffa5 	bl	8081d58 <_ZN4MQTT12handShakeTlsEv>
 8081e0e:	2800      	cmp	r0, #0
 8081e10:	f040 80ca 	bne.w	8081fa8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1e4>
                result = (0 == this->handShakeTls() ? 1 : 0);
            }
        }

        if (result) {
            nextMsgId = 1;
 8081e14:	2301      	movs	r3, #1
 8081e16:	8423      	strh	r3, [r4, #32]

            // Leave room in the buffer for header and variable length field
            uint16_t length = 5;
            const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 8081e18:	4b68      	ldr	r3, [pc, #416]	; (8081fbc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1f8>)
 8081e1a:	aa06      	add	r2, sp, #24
 8081e1c:	6859      	ldr	r1, [r3, #4]
 8081e1e:	6818      	ldr	r0, [r3, #0]
 8081e20:	c203      	stmia	r2!, {r0, r1}
 8081e22:	7a19      	ldrb	r1, [r3, #8]
            const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 8081e24:	f853 0f09 	ldr.w	r0, [r3, #9]!
        if (result) {
            nextMsgId = 1;

            // Leave room in the buffer for header and variable length field
            uint16_t length = 5;
            const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 8081e28:	7011      	strb	r1, [r2, #0]
            const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 8081e2a:	889a      	ldrh	r2, [r3, #4]
 8081e2c:	799b      	ldrb	r3, [r3, #6]
 8081e2e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8081e32:	f88d 3016 	strb.w	r3, [sp, #22]

            if (version == MQTT_V311) {
 8081e36:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
            nextMsgId = 1;

            // Leave room in the buffer for header and variable length field
            uint16_t length = 5;
            const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
            const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 8081e3a:	9004      	str	r0, [sp, #16]

            if (version == MQTT_V311) {
 8081e3c:	2b04      	cmp	r3, #4
 8081e3e:	69e2      	ldr	r2, [r4, #28]
 8081e40:	d131      	bne.n	8081ea6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe2>
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 8081e42:	9804      	ldr	r0, [sp, #16]
 8081e44:	1d53      	adds	r3, r2, #5
 8081e46:	f8c2 0005 	str.w	r0, [r2, #5]
 8081e4a:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8081e4e:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8081e52:	8099      	strh	r1, [r3, #4]
 8081e54:	719a      	strb	r2, [r3, #6]
                length+=sizeof(MQTT_HEADER_V311);
 8081e56:	230c      	movs	r3, #12
 8081e58:	e02e      	b.n	8081eb8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xf4>
                mbedtls_ssl_set_hostname(&ssl, domain);
                result = (0 == this->handShakeTls() ? 1 : 0);
            }

        } else {
            result = tcpClient.connect(this->ip, this->port);
 8081e5a:	a806      	add	r0, sp, #24
 8081e5c:	f00f faaa 	bl	80913b4 <_ZN9IPAddressC1EPKh>
 8081e60:	462b      	mov	r3, r5
 8081e62:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 8081e66:	a906      	add	r1, sp, #24
 8081e68:	4620      	mov	r0, r4
 8081e6a:	f00e ff81 	bl	8090d70 <_ZN9TCPClient7connectE9IPAddresstm>
            if (tls) {
 8081e6e:	f894 3681 	ldrb.w	r3, [r4, #1665]	; 0x681
 8081e72:	b1ab      	cbz	r3, 8081ea0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
                char buffername[16];
                sprintf(buffername, "%d.%d.%d.%d", ip[0], ip[1], ip[2], ip[3]);
 8081e74:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8081e76:	78c8      	ldrb	r0, [r1, #3]
 8081e78:	784b      	ldrb	r3, [r1, #1]
 8081e7a:	780a      	ldrb	r2, [r1, #0]
 8081e7c:	9001      	str	r0, [sp, #4]
 8081e7e:	7889      	ldrb	r1, [r1, #2]
 8081e80:	a806      	add	r0, sp, #24
 8081e82:	9100      	str	r1, [sp, #0]
 8081e84:	494e      	ldr	r1, [pc, #312]	; (8081fc0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1fc>)
 8081e86:	f00e fd07 	bl	8090898 <sprintf>
                mbedtls_ssl_set_hostname(&ssl, buffername);
 8081e8a:	a906      	add	r1, sp, #24
 8081e8c:	f504 7034 	add.w	r0, r4, #720	; 0x2d0
 8081e90:	f008 fa6c 	bl	808a36c <mbedtls_ssl_set_hostname>
                result = (0 == this->handShakeTls() ? 1 : 0);
 8081e94:	4620      	mov	r0, r4
 8081e96:	f7ff ff5f 	bl	8081d58 <_ZN4MQTT12handShakeTlsEv>
 8081e9a:	fab0 f080 	clz	r0, r0
 8081e9e:	0940      	lsrs	r0, r0, #5
            }
        }

        if (result) {
 8081ea0:	2800      	cmp	r0, #0
 8081ea2:	d1b7      	bne.n	8081e14 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x50>
 8081ea4:	e080      	b.n	8081fa8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1e4>

            if (version == MQTT_V311) {
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
                length+=sizeof(MQTT_HEADER_V311);
            } else {
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 8081ea6:	ab06      	add	r3, sp, #24
 8081ea8:	cb03      	ldmia	r3!, {r0, r1}
 8081eaa:	f8c2 0005 	str.w	r0, [r2, #5]
 8081eae:	f8c2 1009 	str.w	r1, [r2, #9]
 8081eb2:	781b      	ldrb	r3, [r3, #0]
 8081eb4:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
 8081eb6:	230e      	movs	r3, #14
            }

            uint8_t v = 0;
            if (willTopic) {
 8081eb8:	f1b8 0f00 	cmp.w	r8, #0
 8081ebc:	d00a      	beq.n	8081ed4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x110>
                v = 0x06|(willQos<<3)|(willRetain<<5);
 8081ebe:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8081ec2:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
 8081ec6:	0152      	lsls	r2, r2, #5
 8081ec8:	f042 0206 	orr.w	r2, r2, #6
 8081ecc:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8081ed0:	b2d2      	uxtb	r2, r2
 8081ed2:	e000      	b.n	8081ed6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x112>
            } else {
                v = 0x02;
 8081ed4:	2202      	movs	r2, #2
            }

            if (!cleanSession) {
 8081ed6:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
 8081eda:	b909      	cbnz	r1, 8081ee0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x11c>
              v = v&0xfd;
 8081edc:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
            }

            if(user != NULL) {
 8081ee0:	b12f      	cbz	r7, 8081eee <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x12a>
                v = v|0x80;

                if(pass != NULL) {
 8081ee2:	b916      	cbnz	r6, 8081eea <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x126>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
 8081ee4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8081ee8:	e001      	b.n	8081eee <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x12a>

                if(pass != NULL) {
                    v = v|(0x80>>1);
 8081eea:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
                }
            }

            buffer[length++] = v;
 8081eee:	69e1      	ldr	r1, [r4, #28]

            buffer[length++] = ((this->keepalive) >> 8);
 8081ef0:	1c58      	adds	r0, r3, #1
                if(pass != NULL) {
                    v = v|(0x80>>1);
                }
            }

            buffer[length++] = v;
 8081ef2:	54ca      	strb	r2, [r1, r3]

            buffer[length++] = ((this->keepalive) >> 8);
 8081ef4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8081ef6:	69e1      	ldr	r1, [r4, #28]
 8081ef8:	1212      	asrs	r2, r2, #8
 8081efa:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
 8081efc:	69e1      	ldr	r1, [r4, #28]
 8081efe:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8081f00:	1c9a      	adds	r2, r3, #2
 8081f02:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
 8081f04:	3303      	adds	r3, #3
 8081f06:	69e2      	ldr	r2, [r4, #28]
 8081f08:	4649      	mov	r1, r9
 8081f0a:	4620      	mov	r0, r4
 8081f0c:	f7ff fbc2 	bl	8081694 <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
 8081f10:	f1b8 0f00 	cmp.w	r8, #0
 8081f14:	d00b      	beq.n	8081f2e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x16a>
                length = writeString(willTopic, buffer, length);
 8081f16:	4603      	mov	r3, r0
 8081f18:	69e2      	ldr	r2, [r4, #28]
 8081f1a:	4641      	mov	r1, r8
 8081f1c:	4620      	mov	r0, r4
 8081f1e:	f7ff fbb9 	bl	8081694 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
 8081f22:	69e2      	ldr	r2, [r4, #28]
 8081f24:	4603      	mov	r3, r0
 8081f26:	9915      	ldr	r1, [sp, #84]	; 0x54
 8081f28:	4620      	mov	r0, r4
 8081f2a:	f7ff fbb3 	bl	8081694 <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
 8081f2e:	b167      	cbz	r7, 8081f4a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x186>
                length = writeString(user,buffer,length);
 8081f30:	4603      	mov	r3, r0
 8081f32:	69e2      	ldr	r2, [r4, #28]
 8081f34:	4639      	mov	r1, r7
 8081f36:	4620      	mov	r0, r4
 8081f38:	f7ff fbac 	bl	8081694 <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
 8081f3c:	b12e      	cbz	r6, 8081f4a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x186>
                    length = writeString(pass,buffer,length);
 8081f3e:	4603      	mov	r3, r0
 8081f40:	69e2      	ldr	r2, [r4, #28]
 8081f42:	4631      	mov	r1, r6
 8081f44:	4620      	mov	r0, r4
 8081f46:	f7ff fba5 	bl	8081694 <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
 8081f4a:	1f43      	subs	r3, r0, #5
 8081f4c:	b29b      	uxth	r3, r3
 8081f4e:	69e2      	ldr	r2, [r4, #28]
 8081f50:	2110      	movs	r1, #16
 8081f52:	4620      	mov	r0, r4
 8081f54:	f7ff fbc5 	bl	80816e2 <_ZN4MQTT5writeEhPht>
 8081f58:	f00e fa86 	bl	8090468 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 8081f5c:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
 8081f60:	6260      	str	r0, [r4, #36]	; 0x24
 8081f62:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!available()) {
 8081f64:	4620      	mov	r0, r4
 8081f66:	f7ff fd6b 	bl	8081a40 <_ZN4MQTT9availableEv>
 8081f6a:	4606      	mov	r6, r0
 8081f6c:	b958      	cbnz	r0, 8081f86 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c2>
 8081f6e:	f00e fa7b 	bl	8090468 <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 8081f72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8081f74:	1ac0      	subs	r0, r0, r3
 8081f76:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8081f78:	437b      	muls	r3, r7
 8081f7a:	4298      	cmp	r0, r3
 8081f7c:	d9f2      	bls.n	8081f64 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a0>
                    debug_tls("MQTT connection timeout.\n");
                    disconnect();
 8081f7e:	4620      	mov	r0, r4
 8081f80:	f7ff fbe1 	bl	8081746 <_ZN4MQTT10disconnectEv>
 8081f84:	e00e      	b.n	8081fa4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1e0>
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
 8081f86:	f10d 010f 	add.w	r1, sp, #15
 8081f8a:	4620      	mov	r0, r4
 8081f8c:	f7ff fc33 	bl	80817f6 <_ZN4MQTT10readPacketEPh>

            if (len == 4 && buffer[3] == 0) {
 8081f90:	2804      	cmp	r0, #4
 8081f92:	d109      	bne.n	8081fa8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1e4>
 8081f94:	69e3      	ldr	r3, [r4, #28]
 8081f96:	78df      	ldrb	r7, [r3, #3]
 8081f98:	b937      	cbnz	r7, 8081fa8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1e4>
 8081f9a:	f00e fa65 	bl	8090468 <HAL_Timer_Get_Milli_Seconds>
                lastInActivity = millis();
                pingOutstanding = false;
 8081f9e:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4 && buffer[3] == 0) {
                lastInActivity = millis();
 8081fa2:	62a0      	str	r0, [r4, #40]	; 0x28
            while (!available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
                    debug_tls("MQTT connection timeout.\n");
                    disconnect();
                    return false;
 8081fa4:	4635      	mov	r5, r6
 8081fa6:	e004      	b.n	8081fb2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ee>
                pingOutstanding = false;
                debug_tls("MQTT connected.\n");
                return true;
            }
        }
        disconnect();
 8081fa8:	4620      	mov	r0, r4
 8081faa:	f7ff fbcc 	bl	8081746 <_ZN4MQTT10disconnectEv>
 8081fae:	e000      	b.n	8081fb2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ee>
    }
    return false;
 8081fb0:	2500      	movs	r5, #0
}
 8081fb2:	4628      	mov	r0, r5
 8081fb4:	b00b      	add	sp, #44	; 0x2c
 8081fb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8081fba:	bf00      	nop
 8081fbc:	08092574 	.word	0x08092574
 8081fc0:	08092589 	.word	0x08092589

08081fc4 <_ZN4MQTT7connectEPKc>:

void MQTT::addQosCallback(void (*qoscallback)(unsigned int)) {
    this->qoscallback = qoscallback;
}

bool MQTT::connect(const char *id) {
 8081fc4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id,NULL,NULL,0,QOS0,0,0,true,MQTT_V311);
 8081fc6:	2304      	movs	r3, #4
 8081fc8:	9305      	str	r3, [sp, #20]
 8081fca:	2301      	movs	r3, #1
 8081fcc:	9304      	str	r3, [sp, #16]
 8081fce:	2300      	movs	r3, #0
 8081fd0:	9303      	str	r3, [sp, #12]
 8081fd2:	9302      	str	r3, [sp, #8]
 8081fd4:	9301      	str	r3, [sp, #4]
 8081fd6:	9300      	str	r3, [sp, #0]
 8081fd8:	461a      	mov	r2, r3
 8081fda:	f7ff fef3 	bl	8081dc4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
 8081fde:	b007      	add	sp, #28
 8081fe0:	f85d fb04 	ldr.w	pc, [sp], #4

08081fe4 <_GLOBAL__sub_I__ZN4MQTTC2Ev>:
 8081fe4:	f00e b9c0 	b.w	8090368 <HAL_Pin_Map>

08081fe8 <mbedtls_sha256_init>:
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 8081fe8:	226c      	movs	r2, #108	; 0x6c
 8081fea:	2100      	movs	r1, #0
 8081fec:	f010 b9d3 	b.w	8092396 <memset>

08081ff0 <mbedtls_sha256_free>:
}

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
    if( ctx == NULL )
 8081ff0:	b138      	cbz	r0, 8082002 <mbedtls_sha256_free+0x12>
 8081ff2:	f100 026c 	add.w	r2, r0, #108	; 0x6c

#if !defined(MBEDTLS_SHA256_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8081ff6:	2300      	movs	r3, #0
 8081ff8:	4290      	cmp	r0, r2
 8081ffa:	d002      	beq.n	8082002 <mbedtls_sha256_free+0x12>
 8081ffc:	7003      	strb	r3, [r0, #0]
 8081ffe:	3001      	adds	r0, #1
 8082000:	e7fa      	b.n	8081ff8 <mbedtls_sha256_free+0x8>
 8082002:	4770      	bx	lr

08082004 <mbedtls_sha256_clone>:
    mbedtls_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
}

void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
                           const mbedtls_sha256_context *src )
{
 8082004:	b508      	push	{r3, lr}
    *dst = *src;
 8082006:	226c      	movs	r2, #108	; 0x6c
 8082008:	f010 f99f 	bl	809234a <memcpy>
 808200c:	bd08      	pop	{r3, pc}
	...

08082010 <mbedtls_sha256_starts_ret>:
/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    ctx->total[0] = 0;
 8082010:	2300      	movs	r3, #0
 8082012:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
 8082014:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
 8082016:	b9a1      	cbnz	r1, 8082042 <mbedtls_sha256_starts_ret+0x32>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
 8082018:	4b18      	ldr	r3, [pc, #96]	; (808207c <mbedtls_sha256_starts_ret+0x6c>)
 808201a:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
 808201c:	4b18      	ldr	r3, [pc, #96]	; (8082080 <mbedtls_sha256_starts_ret+0x70>)
 808201e:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
 8082020:	4b18      	ldr	r3, [pc, #96]	; (8082084 <mbedtls_sha256_starts_ret+0x74>)
 8082022:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
 8082024:	4b18      	ldr	r3, [pc, #96]	; (8082088 <mbedtls_sha256_starts_ret+0x78>)
 8082026:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0x510E527F;
 8082028:	4b18      	ldr	r3, [pc, #96]	; (808208c <mbedtls_sha256_starts_ret+0x7c>)
 808202a:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x9B05688C;
 808202c:	4b18      	ldr	r3, [pc, #96]	; (8082090 <mbedtls_sha256_starts_ret+0x80>)
 808202e:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
 8082030:	4b18      	ldr	r3, [pc, #96]	; (8082094 <mbedtls_sha256_starts_ret+0x84>)
 8082032:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
 8082034:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8082038:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 808203c:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 8082040:	e018      	b.n	8082074 <mbedtls_sha256_starts_ret+0x64>
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
 8082042:	4b15      	ldr	r3, [pc, #84]	; (8082098 <mbedtls_sha256_starts_ret+0x88>)
 8082044:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0x367CD507;
 8082046:	4b15      	ldr	r3, [pc, #84]	; (808209c <mbedtls_sha256_starts_ret+0x8c>)
 8082048:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3070DD17;
 808204a:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
 808204e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8082052:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8082056:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xF70E5939;
 8082058:	4b11      	ldr	r3, [pc, #68]	; (80820a0 <mbedtls_sha256_starts_ret+0x90>)
 808205a:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
 808205c:	4b11      	ldr	r3, [pc, #68]	; (80820a4 <mbedtls_sha256_starts_ret+0x94>)
 808205e:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x68581511;
 8082060:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
 8082064:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
 8082068:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 808206c:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
 808206e:	4b0e      	ldr	r3, [pc, #56]	; (80820a8 <mbedtls_sha256_starts_ret+0x98>)
 8082070:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
 8082072:	4b0e      	ldr	r3, [pc, #56]	; (80820ac <mbedtls_sha256_starts_ret+0x9c>)
 8082074:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
 8082076:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
 8082078:	2000      	movs	r0, #0
 808207a:	4770      	bx	lr
 808207c:	6a09e667 	.word	0x6a09e667
 8082080:	bb67ae85 	.word	0xbb67ae85
 8082084:	3c6ef372 	.word	0x3c6ef372
 8082088:	a54ff53a 	.word	0xa54ff53a
 808208c:	510e527f 	.word	0x510e527f
 8082090:	9b05688c 	.word	0x9b05688c
 8082094:	1f83d9ab 	.word	0x1f83d9ab
 8082098:	c1059ed8 	.word	0xc1059ed8
 808209c:	367cd507 	.word	0x367cd507
 80820a0:	f70e5939 	.word	0xf70e5939
 80820a4:	ffc00b31 	.word	0xffc00b31
 80820a8:	64f98fa7 	.word	0x64f98fa7
 80820ac:	befa4fa4 	.word	0xbefa4fa4

080820b0 <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
 80820b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80820b4:	1d03      	adds	r3, r0, #4
 80820b6:	b0cf      	sub	sp, #316	; 0x13c
 80820b8:	9305      	str	r3, [sp, #20]
 80820ba:	461a      	mov	r2, r3
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
 80820bc:	2300      	movs	r3, #0
        A[i] = ctx->state[i];
 80820be:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80820c2:	ac06      	add	r4, sp, #24
 80820c4:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
{
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
 80820c8:	3301      	adds	r3, #1
 80820ca:	2b08      	cmp	r3, #8
 80820cc:	d1f7      	bne.n	80820be <mbedtls_internal_sha256_process+0xe>
 80820ce:	4608      	mov	r0, r1
 80820d0:	2200      	movs	r2, #0
        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );
 80820d2:	ac0e      	add	r4, sp, #56	; 0x38
 80820d4:	f811 5022 	ldrb.w	r5, [r1, r2, lsl #2]
 80820d8:	78c3      	ldrb	r3, [r0, #3]
 80820da:	3004      	adds	r0, #4
 80820dc:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80820e0:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 80820e4:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80820e8:	f810 5c02 	ldrb.w	r5, [r0, #-2]
 80820ec:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80820f0:	f844 3022 	str.w	r3, [r4, r2, lsl #2]

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
 80820f4:	3201      	adds	r2, #1
 80820f6:	2a10      	cmp	r2, #16
 80820f8:	d1ec      	bne.n	80820d4 <mbedtls_internal_sha256_process+0x24>
 80820fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80820fc:	4c9f      	ldr	r4, [pc, #636]	; (808237c <mbedtls_internal_sha256_process+0x2cc>)
 80820fe:	9300      	str	r3, [sp, #0]
 8082100:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8082102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8082104:	9f08      	ldr	r7, [sp, #32]
 8082106:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 808210a:	f8dd e01c 	ldr.w	lr, [sp, #28]
 808210e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8082112:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8082116:	ad0f      	add	r5, sp, #60	; 0x3c
 8082118:	f104 0a40 	add.w	sl, r4, #64	; 0x40
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 808211c:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8082120:	ea4f 22f8 	mov.w	r2, r8, ror #11
 8082124:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8082128:	ea86 0c0b 	eor.w	ip, r6, fp
 808212c:	ea82 12b8 	eor.w	r2, r2, r8, ror #6
 8082130:	4401      	add	r1, r0
 8082132:	ea82 6278 	eor.w	r2, r2, r8, ror #25
 8082136:	ea0c 0c08 	and.w	ip, ip, r8
 808213a:	ea8c 0c06 	eor.w	ip, ip, r6
 808213e:	440a      	add	r2, r1
 8082140:	9900      	ldr	r1, [sp, #0]
 8082142:	4462      	add	r2, ip
 8082144:	ea4f 3079 	mov.w	r0, r9, ror #13
 8082148:	ea4e 0c09 	orr.w	ip, lr, r9
 808214c:	440a      	add	r2, r1
 808214e:	ea0c 0c07 	and.w	ip, ip, r7
 8082152:	ea0e 0109 	and.w	r1, lr, r9
 8082156:	ea80 00b9 	eor.w	r0, r0, r9, ror #2
 808215a:	ea4c 0101 	orr.w	r1, ip, r1
 808215e:	ea80 50b9 	eor.w	r0, r0, r9, ror #22
 8082162:	4408      	add	r0, r1
 8082164:	4413      	add	r3, r2
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8082166:	6829      	ldr	r1, [r5, #0]
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 8082168:	4402      	add	r2, r0
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 808216a:	6820      	ldr	r0, [r4, #0]
 808216c:	ea8b 0c08 	eor.w	ip, fp, r8
 8082170:	4401      	add	r1, r0
 8082172:	ea0c 0c03 	and.w	ip, ip, r3
 8082176:	ea4f 20f3 	mov.w	r0, r3, ror #11
 808217a:	ea8c 0c0b 	eor.w	ip, ip, fp
 808217e:	440e      	add	r6, r1
 8082180:	ea80 10b3 	eor.w	r0, r0, r3, ror #6
 8082184:	eb06 010c 	add.w	r1, r6, ip
 8082188:	ea80 6073 	eor.w	r0, r0, r3, ror #25
 808218c:	180e      	adds	r6, r1, r0
 808218e:	eb06 0c07 	add.w	ip, r6, r7
 8082192:	ea42 0009 	orr.w	r0, r2, r9
 8082196:	ea4f 3772 	mov.w	r7, r2, ror #13
 808219a:	ea02 0109 	and.w	r1, r2, r9
 808219e:	ea87 07b2 	eor.w	r7, r7, r2, ror #2
 80821a2:	ea00 000e 	and.w	r0, r0, lr
 80821a6:	ea87 57b2 	eor.w	r7, r7, r2, ror #22
 80821aa:	4308      	orrs	r0, r1
 80821ac:	4438      	add	r0, r7
 80821ae:	4430      	add	r0, r6
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 80821b0:	6869      	ldr	r1, [r5, #4]
 80821b2:	6866      	ldr	r6, [r4, #4]
 80821b4:	ea83 0708 	eor.w	r7, r3, r8
 80821b8:	440e      	add	r6, r1
 80821ba:	ea07 070c 	and.w	r7, r7, ip
 80821be:	ea4f 21fc 	mov.w	r1, ip, ror #11
 80821c2:	ea87 0708 	eor.w	r7, r7, r8
 80821c6:	44b3      	add	fp, r6
 80821c8:	ea81 11bc 	eor.w	r1, r1, ip, ror #6
 80821cc:	eb0b 0607 	add.w	r6, fp, r7
 80821d0:	ea81 617c 	eor.w	r1, r1, ip, ror #25
 80821d4:	eb06 0b01 	add.w	fp, r6, r1
 80821d8:	ea4f 3770 	mov.w	r7, r0, ror #13
 80821dc:	ea42 0100 	orr.w	r1, r2, r0
 80821e0:	ea02 0600 	and.w	r6, r2, r0
 80821e4:	ea87 07b0 	eor.w	r7, r7, r0, ror #2
 80821e8:	ea01 0109 	and.w	r1, r1, r9
 80821ec:	ea87 57b0 	eor.w	r7, r7, r0, ror #22
 80821f0:	4331      	orrs	r1, r6
 80821f2:	4439      	add	r1, r7
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 80821f4:	68ae      	ldr	r6, [r5, #8]
 80821f6:	68a7      	ldr	r7, [r4, #8]

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 80821f8:	4459      	add	r1, fp
 80821fa:	44de      	add	lr, fp
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 80821fc:	443e      	add	r6, r7
 80821fe:	ea83 0b0c 	eor.w	fp, r3, ip
 8082202:	44b0      	add	r8, r6
 8082204:	ea0b 0b0e 	and.w	fp, fp, lr
 8082208:	ea4f 26fe 	mov.w	r6, lr, ror #11
 808220c:	ea8b 0b03 	eor.w	fp, fp, r3
 8082210:	ea86 16be 	eor.w	r6, r6, lr, ror #6
 8082214:	44d8      	add	r8, fp
 8082216:	ea86 667e 	eor.w	r6, r6, lr, ror #25
 808221a:	4446      	add	r6, r8
 808221c:	ea4f 3b71 	mov.w	fp, r1, ror #13
 8082220:	ea40 0801 	orr.w	r8, r0, r1
 8082224:	ea00 0701 	and.w	r7, r0, r1
 8082228:	ea8b 0bb1 	eor.w	fp, fp, r1, ror #2
 808222c:	ea08 0802 	and.w	r8, r8, r2
 8082230:	ea8b 5bb1 	eor.w	fp, fp, r1, ror #22
 8082234:	ea48 0807 	orr.w	r8, r8, r7
 8082238:	44d8      	add	r8, fp
 808223a:	44b0      	add	r8, r6
 808223c:	44b1      	add	r9, r6
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 808223e:	68e7      	ldr	r7, [r4, #12]
 8082240:	68ee      	ldr	r6, [r5, #12]
 8082242:	ea8c 0b0e 	eor.w	fp, ip, lr
 8082246:	4437      	add	r7, r6
 8082248:	ea0b 0b09 	and.w	fp, fp, r9
 808224c:	ea8b 0b0c 	eor.w	fp, fp, ip
 8082250:	443b      	add	r3, r7
 8082252:	eb03 070b 	add.w	r7, r3, fp
 8082256:	ea4f 23f9 	mov.w	r3, r9, ror #11
 808225a:	ea83 13b9 	eor.w	r3, r3, r9, ror #6
 808225e:	ea83 6379 	eor.w	r3, r3, r9, ror #25
 8082262:	18fe      	adds	r6, r7, r3
 8082264:	1993      	adds	r3, r2, r6
 8082266:	9300      	str	r3, [sp, #0]
 8082268:	ea4f 3778 	mov.w	r7, r8, ror #13
 808226c:	ea41 0308 	orr.w	r3, r1, r8
 8082270:	ea01 0208 	and.w	r2, r1, r8
 8082274:	ea87 07b8 	eor.w	r7, r7, r8, ror #2
 8082278:	4003      	ands	r3, r0
 808227a:	ea87 57b8 	eor.w	r7, r7, r8, ror #22
 808227e:	4313      	orrs	r3, r2
 8082280:	443b      	add	r3, r7
 8082282:	4433      	add	r3, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 8082284:	692a      	ldr	r2, [r5, #16]
 8082286:	6926      	ldr	r6, [r4, #16]
 8082288:	ea4f 3b73 	mov.w	fp, r3, ror #13
 808228c:	4432      	add	r2, r6
 808228e:	4494      	add	ip, r2
 8082290:	9a00      	ldr	r2, [sp, #0]
 8082292:	ea8e 0609 	eor.w	r6, lr, r9
 8082296:	4016      	ands	r6, r2
 8082298:	ea4f 27f2 	mov.w	r7, r2, ror #11
 808229c:	ea86 060e 	eor.w	r6, r6, lr
 80822a0:	ea87 17b2 	eor.w	r7, r7, r2, ror #6
 80822a4:	44b4      	add	ip, r6
 80822a6:	ea87 6772 	eor.w	r7, r7, r2, ror #25
 80822aa:	eb0c 0207 	add.w	r2, ip, r7
 80822ae:	ea48 0703 	orr.w	r7, r8, r3
 80822b2:	1886      	adds	r6, r0, r2
 80822b4:	400f      	ands	r7, r1
 80822b6:	ea08 0003 	and.w	r0, r8, r3
 80822ba:	ea8b 0bb3 	eor.w	fp, fp, r3, ror #2
 80822be:	ea8b 5bb3 	eor.w	fp, fp, r3, ror #22
 80822c2:	4307      	orrs	r7, r0
 80822c4:	445f      	add	r7, fp
 80822c6:	4417      	add	r7, r2
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 80822c8:	6960      	ldr	r0, [r4, #20]
 80822ca:	696a      	ldr	r2, [r5, #20]
 80822cc:	3420      	adds	r4, #32
 80822ce:	4410      	add	r0, r2
 80822d0:	9a00      	ldr	r2, [sp, #0]
 80822d2:	4486      	add	lr, r0
 80822d4:	ea89 0c02 	eor.w	ip, r9, r2
 80822d8:	ea0c 0c06 	and.w	ip, ip, r6
 80822dc:	ea8c 0c09 	eor.w	ip, ip, r9
 80822e0:	eb0e 000c 	add.w	r0, lr, ip
 80822e4:	ea4f 2ef6 	mov.w	lr, r6, ror #11
 80822e8:	ea8e 1eb6 	eor.w	lr, lr, r6, ror #6
 80822ec:	ea8e 6e76 	eor.w	lr, lr, r6, ror #25
 80822f0:	eb00 020e 	add.w	r2, r0, lr
 80822f4:	ea4f 3077 	mov.w	r0, r7, ror #13
 80822f8:	ea43 0e07 	orr.w	lr, r3, r7
 80822fc:	eb01 0b02 	add.w	fp, r1, r2
 8082300:	ea0e 0e08 	and.w	lr, lr, r8
 8082304:	ea03 0107 	and.w	r1, r3, r7
 8082308:	ea80 00b7 	eor.w	r0, r0, r7, ror #2
 808230c:	ea80 50b7 	eor.w	r0, r0, r7, ror #22
 8082310:	ea4e 0e01 	orr.w	lr, lr, r1
 8082314:	4486      	add	lr, r0
 8082316:	4496      	add	lr, r2
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 8082318:	f854 1c08 	ldr.w	r1, [r4, #-8]
 808231c:	69aa      	ldr	r2, [r5, #24]
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
 808231e:	45a2      	cmp	sl, r4
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 8082320:	4411      	add	r1, r2
 8082322:	9a00      	ldr	r2, [sp, #0]
 8082324:	4489      	add	r9, r1
 8082326:	ea82 0006 	eor.w	r0, r2, r6
 808232a:	ea00 000b 	and.w	r0, r0, fp
 808232e:	ea80 0002 	eor.w	r0, r0, r2
 8082332:	eb09 0100 	add.w	r1, r9, r0
 8082336:	ea4f 29fb 	mov.w	r9, fp, ror #11
 808233a:	ea89 19bb 	eor.w	r9, r9, fp, ror #6
 808233e:	ea89 697b 	eor.w	r9, r9, fp, ror #25
 8082342:	eb01 0209 	add.w	r2, r1, r9
 8082346:	ea4f 307e 	mov.w	r0, lr, ror #13
 808234a:	ea47 090e 	orr.w	r9, r7, lr
 808234e:	ea80 00be 	eor.w	r0, r0, lr, ror #2
 8082352:	ea09 0903 	and.w	r9, r9, r3
 8082356:	ea07 010e 	and.w	r1, r7, lr
 808235a:	ea80 50be 	eor.w	r0, r0, lr, ror #22
 808235e:	ea49 0901 	orr.w	r9, r9, r1
 8082362:	4481      	add	r9, r0
 8082364:	4490      	add	r8, r2
 8082366:	4491      	add	r9, r2
 8082368:	f105 0520 	add.w	r5, r5, #32
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
 808236c:	f47f aed6 	bne.w	808211c <mbedtls_internal_sha256_process+0x6c>
 8082370:	2200      	movs	r2, #0
 8082372:	f8df a00c 	ldr.w	sl, [pc, #12]	; 8082380 <mbedtls_internal_sha256_process+0x2d0>
 8082376:	ac0e      	add	r4, sp, #56	; 0x38
 8082378:	9204      	str	r2, [sp, #16]
 808237a:	e003      	b.n	8082384 <mbedtls_internal_sha256_process+0x2d4>
 808237c:	0809259c 	.word	0x0809259c
 8082380:	08092598 	.word	0x08092598
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 8082384:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8082386:	6860      	ldr	r0, [r4, #4]
 8082388:	ea4f 45f2 	mov.w	r5, r2, ror #19
 808238c:	ea85 4572 	eor.w	r5, r5, r2, ror #17
 8082390:	ea85 2592 	eor.w	r5, r5, r2, lsr #10
 8082394:	9a04      	ldr	r2, [sp, #16]
 8082396:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 808239a:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 808239e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80823a0:	ea4f 4cb0 	mov.w	ip, r0, ror #18
 80823a4:	440a      	add	r2, r1
 80823a6:	ea8c 1cf0 	eor.w	ip, ip, r0, ror #7
 80823aa:	ea4f 21f8 	mov.w	r1, r8, ror #11
 80823ae:	ea8c 0cd0 	eor.w	ip, ip, r0, lsr #3
 80823b2:	ea81 11b8 	eor.w	r1, r1, r8, ror #6
 80823b6:	4415      	add	r5, r2
 80823b8:	eb05 020c 	add.w	r2, r5, ip
 80823bc:	ea81 6578 	eor.w	r5, r1, r8, ror #25
 80823c0:	ea86 010b 	eor.w	r1, r6, fp
 80823c4:	ea01 0108 	and.w	r1, r1, r8
 80823c8:	9203      	str	r2, [sp, #12]
 80823ca:	ea81 0206 	eor.w	r2, r1, r6
 80823ce:	18a9      	adds	r1, r5, r2
 80823d0:	f8da 2040 	ldr.w	r2, [sl, #64]	; 0x40
 80823d4:	ea4e 0509 	orr.w	r5, lr, r9
 80823d8:	440a      	add	r2, r1
 80823da:	9903      	ldr	r1, [sp, #12]
 80823dc:	403d      	ands	r5, r7
 80823de:	6421      	str	r1, [r4, #64]	; 0x40
 80823e0:	440a      	add	r2, r1
 80823e2:	9900      	ldr	r1, [sp, #0]
 80823e4:	f10a 0a20 	add.w	sl, sl, #32
 80823e8:	440a      	add	r2, r1
 80823ea:	18d3      	adds	r3, r2, r3
 80823ec:	ea4f 3179 	mov.w	r1, r9, ror #13
 80823f0:	9300      	str	r3, [sp, #0]
 80823f2:	ea81 01b9 	eor.w	r1, r1, r9, ror #2
 80823f6:	ea0e 0309 	and.w	r3, lr, r9
 80823fa:	ea81 51b9 	eor.w	r1, r1, r9, ror #22
 80823fe:	432b      	orrs	r3, r5
 8082400:	440b      	add	r3, r1
 8082402:	441a      	add	r2, r3
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 8082404:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8082406:	68a5      	ldr	r5, [r4, #8]
 8082408:	ea4f 41f3 	mov.w	r1, r3, ror #19
 808240c:	ea81 4173 	eor.w	r1, r1, r3, ror #17
 8082410:	ea81 2193 	eor.w	r1, r1, r3, lsr #10
 8082414:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8082416:	3420      	adds	r4, #32
 8082418:	4403      	add	r3, r0
 808241a:	4419      	add	r1, r3
 808241c:	ea4f 43b5 	mov.w	r3, r5, ror #18
 8082420:	ea83 13f5 	eor.w	r3, r3, r5, ror #7
 8082424:	ea83 0cd5 	eor.w	ip, r3, r5, lsr #3
 8082428:	eb01 030c 	add.w	r3, r1, ip
 808242c:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
 8082430:	9900      	ldr	r1, [sp, #0]
 8082432:	ea8b 0c08 	eor.w	ip, fp, r8
 8082436:	4430      	add	r0, r6
 8082438:	ea0c 0c01 	and.w	ip, ip, r1
 808243c:	ea8c 0c0b 	eor.w	ip, ip, fp
 8082440:	18c1      	adds	r1, r0, r3
 8082442:	448c      	add	ip, r1
 8082444:	9900      	ldr	r1, [sp, #0]
 8082446:	6263      	str	r3, [r4, #36]	; 0x24
 8082448:	ea4f 20f1 	mov.w	r0, r1, ror #11
 808244c:	ea80 10b1 	eor.w	r0, r0, r1, ror #6
 8082450:	ea80 6071 	eor.w	r0, r0, r1, ror #25
 8082454:	eb00 010c 	add.w	r1, r0, ip
 8082458:	19c8      	adds	r0, r1, r7
 808245a:	9001      	str	r0, [sp, #4]
 808245c:	ea4f 3c72 	mov.w	ip, r2, ror #13
 8082460:	ea42 0009 	orr.w	r0, r2, r9
 8082464:	ea02 0709 	and.w	r7, r2, r9
 8082468:	ea8c 0cb2 	eor.w	ip, ip, r2, ror #2
 808246c:	ea00 000e 	and.w	r0, r0, lr
 8082470:	ea8c 5cb2 	eor.w	ip, ip, r2, ror #22
 8082474:	4338      	orrs	r0, r7
 8082476:	4460      	add	r0, ip
 8082478:	4408      	add	r0, r1
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 808247a:	9903      	ldr	r1, [sp, #12]
 808247c:	f854 7c14 	ldr.w	r7, [r4, #-20]
 8082480:	ea4f 46f1 	mov.w	r6, r1, ror #19
 8082484:	ea86 4671 	eor.w	r6, r6, r1, ror #17
 8082488:	ea86 2691 	eor.w	r6, r6, r1, lsr #10
 808248c:	68e1      	ldr	r1, [r4, #12]
 808248e:	ea4f 4cb7 	mov.w	ip, r7, ror #18
 8082492:	4429      	add	r1, r5
 8082494:	440e      	add	r6, r1
 8082496:	ea8c 1cf7 	eor.w	ip, ip, r7, ror #7
 808249a:	9900      	ldr	r1, [sp, #0]
 808249c:	ea8c 0cd7 	eor.w	ip, ip, r7, lsr #3
 80824a0:	4466      	add	r6, ip
 80824a2:	ea81 0c08 	eor.w	ip, r1, r8
 80824a6:	9901      	ldr	r1, [sp, #4]
 80824a8:	62a6      	str	r6, [r4, #40]	; 0x28
 80824aa:	ea0c 0c01 	and.w	ip, ip, r1
 80824ae:	f8da 1028 	ldr.w	r1, [sl, #40]	; 0x28
 80824b2:	ea8c 0c08 	eor.w	ip, ip, r8
 80824b6:	4459      	add	r1, fp
 80824b8:	198d      	adds	r5, r1, r6
 80824ba:	9901      	ldr	r1, [sp, #4]
 80824bc:	44ac      	add	ip, r5
 80824be:	9d01      	ldr	r5, [sp, #4]
 80824c0:	ea4f 21f1 	mov.w	r1, r1, ror #11
 80824c4:	ea81 11b5 	eor.w	r1, r1, r5, ror #6
 80824c8:	ea81 6175 	eor.w	r1, r1, r5, ror #25
 80824cc:	eb01 050c 	add.w	r5, r1, ip
 80824d0:	ea42 0100 	orr.w	r1, r2, r0
 80824d4:	ea4f 3c70 	mov.w	ip, r0, ror #13
 80824d8:	eb05 0b0e 	add.w	fp, r5, lr
 80824dc:	ea8c 0cb0 	eor.w	ip, ip, r0, ror #2
 80824e0:	ea02 0e00 	and.w	lr, r2, r0
 80824e4:	ea01 0109 	and.w	r1, r1, r9
 80824e8:	ea8c 5cb0 	eor.w	ip, ip, r0, ror #22
 80824ec:	ea41 010e 	orr.w	r1, r1, lr
 80824f0:	4461      	add	r1, ip
 80824f2:	4429      	add	r1, r5
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 80824f4:	ea4f 45f3 	mov.w	r5, r3, ror #19
 80824f8:	ea85 4573 	eor.w	r5, r5, r3, ror #17
 80824fc:	ea85 2393 	eor.w	r3, r5, r3, lsr #10
 8082500:	6925      	ldr	r5, [r4, #16]
 8082502:	f854 cc10 	ldr.w	ip, [r4, #-16]
 8082506:	442f      	add	r7, r5
 8082508:	443b      	add	r3, r7
 808250a:	ea4f 47bc 	mov.w	r7, ip, ror #18
 808250e:	ea87 17fc 	eor.w	r7, r7, ip, ror #7
 8082512:	ea87 0edc 	eor.w	lr, r7, ip, lsr #3
 8082516:	eb03 070e 	add.w	r7, r3, lr
 808251a:	e89d 0028 	ldmia.w	sp, {r3, r5}
 808251e:	405d      	eors	r5, r3
 8082520:	ea05 050b 	and.w	r5, r5, fp
 8082524:	405d      	eors	r5, r3
 8082526:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
 808252a:	ea4f 3e71 	mov.w	lr, r1, ror #13
 808252e:	4498      	add	r8, r3
 8082530:	44b8      	add	r8, r7
 8082532:	4445      	add	r5, r8
 8082534:	ea4f 28fb 	mov.w	r8, fp, ror #11
 8082538:	ea88 18bb 	eor.w	r8, r8, fp, ror #6
 808253c:	ea88 687b 	eor.w	r8, r8, fp, ror #25
 8082540:	eb08 0305 	add.w	r3, r8, r5
 8082544:	eb03 0509 	add.w	r5, r3, r9
 8082548:	ea40 0801 	orr.w	r8, r0, r1
 808254c:	9502      	str	r5, [sp, #8]
 808254e:	ea8e 0eb1 	eor.w	lr, lr, r1, ror #2
 8082552:	ea00 0501 	and.w	r5, r0, r1
 8082556:	ea08 0802 	and.w	r8, r8, r2
 808255a:	ea8e 5eb1 	eor.w	lr, lr, r1, ror #22
 808255e:	ea48 0805 	orr.w	r8, r8, r5
 8082562:	44f0      	add	r8, lr
 8082564:	4498      	add	r8, r3
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8082566:	ea4f 4ef6 	mov.w	lr, r6, ror #19
 808256a:	6963      	ldr	r3, [r4, #20]
 808256c:	ea8e 4e76 	eor.w	lr, lr, r6, ror #17
 8082570:	f854 5c0c 	ldr.w	r5, [r4, #-12]
 8082574:	ea8e 2696 	eor.w	r6, lr, r6, lsr #10
 8082578:	eb0c 0e03 	add.w	lr, ip, r3
 808257c:	9b01      	ldr	r3, [sp, #4]
 808257e:	4476      	add	r6, lr
 8082580:	ea83 0c0b 	eor.w	ip, r3, fp
 8082584:	ea4f 4eb5 	mov.w	lr, r5, ror #18
 8082588:	9b02      	ldr	r3, [sp, #8]
 808258a:	ea8e 1ef5 	eor.w	lr, lr, r5, ror #7
 808258e:	ea8e 09d5 	eor.w	r9, lr, r5, lsr #3
 8082592:	ea0c 0c03 	and.w	ip, ip, r3
 8082596:	9b01      	ldr	r3, [sp, #4]
 8082598:	eb06 0e09 	add.w	lr, r6, r9
 808259c:	f8da 6030 	ldr.w	r6, [sl, #48]	; 0x30
 80825a0:	ea8c 0c03 	eor.w	ip, ip, r3
 80825a4:	9b00      	ldr	r3, [sp, #0]
 80825a6:	4476      	add	r6, lr
 80825a8:	441e      	add	r6, r3
 80825aa:	9b02      	ldr	r3, [sp, #8]
 80825ac:	44b4      	add	ip, r6
 80825ae:	9e02      	ldr	r6, [sp, #8]
 80825b0:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80825b4:	ea83 13b6 	eor.w	r3, r3, r6, ror #6
 80825b8:	ea83 6376 	eor.w	r3, r3, r6, ror #25
 80825bc:	eb03 060c 	add.w	r6, r3, ip
 80825c0:	1993      	adds	r3, r2, r6
 80825c2:	9300      	str	r3, [sp, #0]
 80825c4:	ea41 0308 	orr.w	r3, r1, r8
 80825c8:	ea01 0208 	and.w	r2, r1, r8
 80825cc:	4003      	ands	r3, r0
 80825ce:	4313      	orrs	r3, r2
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80825d0:	ea4f 42f7 	mov.w	r2, r7, ror #19
 80825d4:	ea82 4277 	eor.w	r2, r2, r7, ror #17
    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 80825d8:	62e7      	str	r7, [r4, #44]	; 0x2c
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 80825da:	ea4f 3c78 	mov.w	ip, r8, ror #13
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80825de:	ea82 2797 	eor.w	r7, r2, r7, lsr #10
 80825e2:	69a2      	ldr	r2, [r4, #24]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 80825e4:	ea8c 0cb8 	eor.w	ip, ip, r8, ror #2
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80825e8:	f854 9c08 	ldr.w	r9, [r4, #-8]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 80825ec:	ea8c 5cb8 	eor.w	ip, ip, r8, ror #22
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80825f0:	4415      	add	r5, r2
 80825f2:	9a02      	ldr	r2, [sp, #8]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 80825f4:	4463      	add	r3, ip
 80825f6:	4433      	add	r3, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80825f8:	442f      	add	r7, r5
 80825fa:	ea8b 0602 	eor.w	r6, fp, r2
 80825fe:	ea4f 45b9 	mov.w	r5, r9, ror #18
 8082602:	9a00      	ldr	r2, [sp, #0]
 8082604:	ea85 15f9 	eor.w	r5, r5, r9, ror #7
 8082608:	ea85 05d9 	eor.w	r5, r5, r9, lsr #3
 808260c:	4016      	ands	r6, r2
 808260e:	f8da 2034 	ldr.w	r2, [sl, #52]	; 0x34
 8082612:	443d      	add	r5, r7
 8082614:	9f01      	ldr	r7, [sp, #4]
 8082616:	442a      	add	r2, r5
 8082618:	443a      	add	r2, r7
 808261a:	ea86 060b 	eor.w	r6, r6, fp
 808261e:	4416      	add	r6, r2
 8082620:	9a00      	ldr	r2, [sp, #0]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8082622:	f8c4 e030 	str.w	lr, [r4, #48]	; 0x30
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8082626:	ea4f 27f2 	mov.w	r7, r2, ror #11
 808262a:	ea87 17b2 	eor.w	r7, r7, r2, ror #6
 808262e:	ea87 6772 	eor.w	r7, r7, r2, ror #25
 8082632:	19ba      	adds	r2, r7, r6
 8082634:	1886      	adds	r6, r0, r2
 8082636:	ea4f 3073 	mov.w	r0, r3, ror #13
 808263a:	ea80 00b3 	eor.w	r0, r0, r3, ror #2
 808263e:	ea48 0703 	orr.w	r7, r8, r3
 8082642:	ea80 5cb3 	eor.w	ip, r0, r3, ror #22
 8082646:	400f      	ands	r7, r1
 8082648:	ea08 0003 	and.w	r0, r8, r3
 808264c:	4307      	orrs	r7, r0
 808264e:	4467      	add	r7, ip
 8082650:	4417      	add	r7, r2
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 8082652:	ea4f 42fe 	mov.w	r2, lr, ror #19
 8082656:	ea82 427e 	eor.w	r2, r2, lr, ror #17
 808265a:	ea82 2e9e 	eor.w	lr, r2, lr, lsr #10
 808265e:	69e2      	ldr	r2, [r4, #28]
 8082660:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8082664:	4491      	add	r9, r2
 8082666:	eb0e 0209 	add.w	r2, lr, r9
 808266a:	ea4f 49b0 	mov.w	r9, r0, ror #18
 808266e:	ea89 19f0 	eor.w	r9, r9, r0, ror #7
 8082672:	ea89 09d0 	eor.w	r9, r9, r0, lsr #3
 8082676:	4491      	add	r9, r2
 8082678:	9a02      	ldr	r2, [sp, #8]
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 808267a:	6365      	str	r5, [r4, #52]	; 0x34
 808267c:	4696      	mov	lr, r2
 808267e:	9a00      	ldr	r2, [sp, #0]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 8082680:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
 8082684:	ea8e 0c02 	eor.w	ip, lr, r2
 8082688:	f8da 2038 	ldr.w	r2, [sl, #56]	; 0x38
 808268c:	ea0c 0c06 	and.w	ip, ip, r6
 8082690:	ea8c 0c0e 	eor.w	ip, ip, lr
 8082694:	444a      	add	r2, r9
 8082696:	ea4f 2ef6 	mov.w	lr, r6, ror #11
 808269a:	445a      	add	r2, fp
 808269c:	ea8e 1eb6 	eor.w	lr, lr, r6, ror #6
 80826a0:	4462      	add	r2, ip
 80826a2:	ea8e 6e76 	eor.w	lr, lr, r6, ror #25
 80826a6:	4472      	add	r2, lr
 80826a8:	ea4f 3c77 	mov.w	ip, r7, ror #13
 80826ac:	ea43 0e07 	orr.w	lr, r3, r7
 80826b0:	eb01 0b02 	add.w	fp, r1, r2
 80826b4:	ea0e 0e08 	and.w	lr, lr, r8
 80826b8:	ea03 0107 	and.w	r1, r3, r7
 80826bc:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 80826c0:	ea8c 5cb7 	eor.w	ip, ip, r7, ror #22
 80826c4:	ea4e 0e01 	orr.w	lr, lr, r1
 80826c8:	44e6      	add	lr, ip
 80826ca:	4496      	add	lr, r2
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 80826cc:	ea4f 42f5 	mov.w	r2, r5, ror #19
 80826d0:	6821      	ldr	r1, [r4, #0]
 80826d2:	ea82 4275 	eor.w	r2, r2, r5, ror #17
 80826d6:	ea82 2595 	eor.w	r5, r2, r5, lsr #10
 80826da:	9a03      	ldr	r2, [sp, #12]
 80826dc:	ea4f 4cb1 	mov.w	ip, r1, ror #18
 80826e0:	4410      	add	r0, r2
 80826e2:	ea8c 1cf1 	eor.w	ip, ip, r1, ror #7
 80826e6:	f8da 203c 	ldr.w	r2, [sl, #60]	; 0x3c
 80826ea:	4405      	add	r5, r0
 80826ec:	ea8c 01d1 	eor.w	r1, ip, r1, lsr #3
 80826f0:	440d      	add	r5, r1
 80826f2:	9902      	ldr	r1, [sp, #8]
 80826f4:	442a      	add	r2, r5
 80826f6:	eb02 0901 	add.w	r9, r2, r1
 80826fa:	9a00      	ldr	r2, [sp, #0]
 80826fc:	ea4f 307e 	mov.w	r0, lr, ror #13
 8082700:	ea82 0106 	eor.w	r1, r2, r6
 8082704:	ea01 010b 	and.w	r1, r1, fp
 8082708:	4051      	eors	r1, r2
 808270a:	ea4f 22fb 	mov.w	r2, fp, ror #11
 808270e:	ea82 12bb 	eor.w	r2, r2, fp, ror #6
 8082712:	4489      	add	r9, r1
 8082714:	ea82 627b 	eor.w	r2, r2, fp, ror #25
 8082718:	444a      	add	r2, r9
 808271a:	ea47 090e 	orr.w	r9, r7, lr
 808271e:	ea80 00be 	eor.w	r0, r0, lr, ror #2
 8082722:	ea09 0903 	and.w	r9, r9, r3
 8082726:	ea07 010e 	and.w	r1, r7, lr
 808272a:	ea80 50be 	eor.w	r0, r0, lr, ror #22
 808272e:	ea49 0901 	orr.w	r9, r9, r1
 8082732:	4481      	add	r9, r0
 8082734:	4490      	add	r8, r2
 8082736:	4491      	add	r9, r2
 8082738:	9a04      	ldr	r2, [sp, #16]
 808273a:	63e5      	str	r5, [r4, #60]	; 0x3c
 808273c:	3208      	adds	r2, #8
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
 808273e:	2a30      	cmp	r2, #48	; 0x30
 8082740:	9204      	str	r2, [sp, #16]
 8082742:	f47f ae1f 	bne.w	8082384 <mbedtls_internal_sha256_process+0x2d4>
 8082746:	9a00      	ldr	r2, [sp, #0]
 8082748:	9309      	str	r3, [sp, #36]	; 0x24
 808274a:	920d      	str	r2, [sp, #52]	; 0x34
 808274c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8082750:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8082754:	960c      	str	r6, [sp, #48]	; 0x30
 8082756:	f8cd 9018 	str.w	r9, [sp, #24]
 808275a:	f8cd e01c 	str.w	lr, [sp, #28]
 808275e:	9708      	str	r7, [sp, #32]
 8082760:	2300      	movs	r3, #0
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += A[i];
 8082762:	9a05      	ldr	r2, [sp, #20]
 8082764:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8082768:	9205      	str	r2, [sp, #20]
 808276a:	aa06      	add	r2, sp, #24
 808276c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 8082770:	3301      	adds	r3, #1
        ctx->state[i] += A[i];
 8082772:	440a      	add	r2, r1
 8082774:	9905      	ldr	r1, [sp, #20]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 8082776:	2b08      	cmp	r3, #8
        ctx->state[i] += A[i];
 8082778:	600a      	str	r2, [r1, #0]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 808277a:	d1f2      	bne.n	8082762 <mbedtls_internal_sha256_process+0x6b2>
        ctx->state[i] += A[i];

    return( 0 );
}
 808277c:	2000      	movs	r0, #0
 808277e:	b04f      	add	sp, #316	; 0x13c
 8082780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08082784 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 8082784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8082788:	4604      	mov	r4, r0
 808278a:	460e      	mov	r6, r1
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
 808278c:	4615      	mov	r5, r2
 808278e:	b382      	cbz	r2, 80827f2 <mbedtls_sha256_update_ret+0x6e>
        return( 0 );

    left = ctx->total[0] & 0x3F;
 8082790:	6803      	ldr	r3, [r0, #0]
 8082792:	f003 003f 	and.w	r0, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 8082796:	4413      	add	r3, r2
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
 8082798:	429a      	cmp	r2, r3
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 808279a:	6023      	str	r3, [r4, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
 808279c:	bf82      	ittt	hi
 808279e:	6863      	ldrhi	r3, [r4, #4]
 80827a0:	3301      	addhi	r3, #1
 80827a2:	6063      	strhi	r3, [r4, #4]

    if( left && ilen >= fill )
 80827a4:	b180      	cbz	r0, 80827c8 <mbedtls_sha256_update_ret+0x44>

    if( ilen == 0 )
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
 80827a6:	f1c0 0740 	rsb	r7, r0, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
 80827aa:	42ba      	cmp	r2, r7
 80827ac:	d31b      	bcc.n	80827e6 <mbedtls_sha256_update_ret+0x62>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 80827ae:	f104 0828 	add.w	r8, r4, #40	; 0x28
 80827b2:	463a      	mov	r2, r7
 80827b4:	4440      	add	r0, r8
 80827b6:	f00f fdc8 	bl	809234a <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 80827ba:	4641      	mov	r1, r8
 80827bc:	4620      	mov	r0, r4
 80827be:	f7ff fc77 	bl	80820b0 <mbedtls_internal_sha256_process>
 80827c2:	b9b8      	cbnz	r0, 80827f4 <mbedtls_sha256_update_ret+0x70>
            return( ret );

        input += fill;
 80827c4:	443e      	add	r6, r7
        ilen  -= fill;
 80827c6:	1bed      	subs	r5, r5, r7
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 80827c8:	462f      	mov	r7, r5
 80827ca:	1be9      	subs	r1, r5, r7
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
 80827cc:	2f3f      	cmp	r7, #63	; 0x3f
 80827ce:	4431      	add	r1, r6
 80827d0:	d905      	bls.n	80827de <mbedtls_sha256_update_ret+0x5a>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 80827d2:	4620      	mov	r0, r4
 80827d4:	f7ff fc6c 	bl	80820b0 <mbedtls_internal_sha256_process>
 80827d8:	b960      	cbnz	r0, 80827f4 <mbedtls_sha256_update_ret+0x70>
            return( ret );

        input += 64;
        ilen  -= 64;
 80827da:	3f40      	subs	r7, #64	; 0x40
 80827dc:	e7f5      	b.n	80827ca <mbedtls_sha256_update_ret+0x46>
    }

    if( ilen > 0 )
 80827de:	b147      	cbz	r7, 80827f2 <mbedtls_sha256_update_ret+0x6e>
 80827e0:	463d      	mov	r5, r7
 80827e2:	460e      	mov	r6, r1
 80827e4:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 80827e6:	3428      	adds	r4, #40	; 0x28
 80827e8:	462a      	mov	r2, r5
 80827ea:	4631      	mov	r1, r6
 80827ec:	4420      	add	r0, r4
 80827ee:	f00f fdac 	bl	809234a <memcpy>

    return( 0 );
 80827f2:	2000      	movs	r0, #0
}
 80827f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080827f8 <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 80827f8:	b570      	push	{r4, r5, r6, lr}
 80827fa:	4604      	mov	r4, r0
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 80827fc:	6803      	ldr	r3, [r0, #0]

    ctx->buffer[used++] = 0x80;
 80827fe:	2280      	movs	r2, #128	; 0x80
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 8082800:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
 8082804:	1c58      	adds	r0, r3, #1

    if( used <= 56 )
 8082806:	2838      	cmp	r0, #56	; 0x38
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 8082808:	4423      	add	r3, r4
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 808280a:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 808280c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8082810:	f104 0628 	add.w	r6, r4, #40	; 0x28

    if( used <= 56 )
 8082814:	d804      	bhi.n	8082820 <mbedtls_sha256_finish_ret+0x28>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 8082816:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 808281a:	2100      	movs	r1, #0
 808281c:	4430      	add	r0, r6
 808281e:	e00e      	b.n	808283e <mbedtls_sha256_finish_ret+0x46>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 8082820:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 8082824:	2100      	movs	r1, #0
 8082826:	4430      	add	r0, r6
 8082828:	f00f fdb5 	bl	8092396 <memset>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 808282c:	4631      	mov	r1, r6
 808282e:	4620      	mov	r0, r4
 8082830:	f7ff fc3e 	bl	80820b0 <mbedtls_internal_sha256_process>
 8082834:	2800      	cmp	r0, #0
 8082836:	d175      	bne.n	8082924 <mbedtls_sha256_finish_ret+0x12c>
            return( ret );

        memset( ctx->buffer, 0, 56 );
 8082838:	4601      	mov	r1, r0
 808283a:	4630      	mov	r0, r6
 808283c:	2238      	movs	r2, #56	; 0x38
 808283e:	f00f fdaa 	bl	8092396 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 8082842:	6823      	ldr	r3, [r4, #0]
         | ( ctx->total[1] <<  3 );
 8082844:	6861      	ldr	r1, [r4, #4]
 8082846:	0f5a      	lsrs	r2, r3, #29
 8082848:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 808284c:	0e11      	lsrs	r1, r2, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 808284e:	00db      	lsls	r3, r3, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 8082850:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
 8082854:	0c11      	lsrs	r1, r2, #16
 8082856:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
 808285a:	f884 2063 	strb.w	r2, [r4, #99]	; 0x63
 808285e:	0a11      	lsrs	r1, r2, #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 8082860:	0e1a      	lsrs	r2, r3, #24
 8082862:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8082866:	0c1a      	lsrs	r2, r3, #16
 8082868:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 808286c:	0a1a      	lsrs	r2, r3, #8
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 808286e:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 8082872:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8082876:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 808287a:	4631      	mov	r1, r6
 808287c:	4620      	mov	r0, r4
 808287e:	f7ff fc17 	bl	80820b0 <mbedtls_internal_sha256_process>
 8082882:	4603      	mov	r3, r0
 8082884:	2800      	cmp	r0, #0
 8082886:	d14c      	bne.n	8082922 <mbedtls_sha256_finish_ret+0x12a>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 8082888:	7ae2      	ldrb	r2, [r4, #11]
 808288a:	702a      	strb	r2, [r5, #0]
 808288c:	8962      	ldrh	r2, [r4, #10]
 808288e:	706a      	strb	r2, [r5, #1]
 8082890:	68a2      	ldr	r2, [r4, #8]
 8082892:	0a12      	lsrs	r2, r2, #8
 8082894:	70aa      	strb	r2, [r5, #2]
 8082896:	68a2      	ldr	r2, [r4, #8]
 8082898:	70ea      	strb	r2, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 808289a:	7be2      	ldrb	r2, [r4, #15]
 808289c:	712a      	strb	r2, [r5, #4]
 808289e:	89e2      	ldrh	r2, [r4, #14]
 80828a0:	716a      	strb	r2, [r5, #5]
 80828a2:	68e2      	ldr	r2, [r4, #12]
 80828a4:	0a12      	lsrs	r2, r2, #8
 80828a6:	71aa      	strb	r2, [r5, #6]
 80828a8:	68e2      	ldr	r2, [r4, #12]
 80828aa:	71ea      	strb	r2, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 80828ac:	7ce2      	ldrb	r2, [r4, #19]
 80828ae:	722a      	strb	r2, [r5, #8]
 80828b0:	8a62      	ldrh	r2, [r4, #18]
 80828b2:	726a      	strb	r2, [r5, #9]
 80828b4:	6922      	ldr	r2, [r4, #16]
 80828b6:	0a12      	lsrs	r2, r2, #8
 80828b8:	72aa      	strb	r2, [r5, #10]
 80828ba:	6922      	ldr	r2, [r4, #16]
 80828bc:	72ea      	strb	r2, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 80828be:	7de2      	ldrb	r2, [r4, #23]
 80828c0:	732a      	strb	r2, [r5, #12]
 80828c2:	8ae2      	ldrh	r2, [r4, #22]
 80828c4:	736a      	strb	r2, [r5, #13]
 80828c6:	6962      	ldr	r2, [r4, #20]
 80828c8:	0a12      	lsrs	r2, r2, #8
 80828ca:	73aa      	strb	r2, [r5, #14]
 80828cc:	6962      	ldr	r2, [r4, #20]
 80828ce:	73ea      	strb	r2, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 80828d0:	7ee2      	ldrb	r2, [r4, #27]
 80828d2:	742a      	strb	r2, [r5, #16]
 80828d4:	8b62      	ldrh	r2, [r4, #26]
 80828d6:	746a      	strb	r2, [r5, #17]
 80828d8:	69a2      	ldr	r2, [r4, #24]
 80828da:	0a12      	lsrs	r2, r2, #8
 80828dc:	74aa      	strb	r2, [r5, #18]
 80828de:	69a2      	ldr	r2, [r4, #24]
 80828e0:	74ea      	strb	r2, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 80828e2:	7fe2      	ldrb	r2, [r4, #31]
 80828e4:	752a      	strb	r2, [r5, #20]
 80828e6:	8be2      	ldrh	r2, [r4, #30]
 80828e8:	756a      	strb	r2, [r5, #21]
 80828ea:	69e2      	ldr	r2, [r4, #28]
 80828ec:	0a12      	lsrs	r2, r2, #8
 80828ee:	75aa      	strb	r2, [r5, #22]
 80828f0:	69e2      	ldr	r2, [r4, #28]
 80828f2:	75ea      	strb	r2, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 80828f4:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 80828f8:	762a      	strb	r2, [r5, #24]
 80828fa:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 80828fc:	766a      	strb	r2, [r5, #25]
 80828fe:	6a22      	ldr	r2, [r4, #32]
 8082900:	0a12      	lsrs	r2, r2, #8
 8082902:	76aa      	strb	r2, [r5, #26]
 8082904:	6a22      	ldr	r2, [r4, #32]
 8082906:	76ea      	strb	r2, [r5, #27]

    if( ctx->is224 == 0 )
 8082908:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 808290a:	b950      	cbnz	r0, 8082922 <mbedtls_sha256_finish_ret+0x12a>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 808290c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8082910:	772b      	strb	r3, [r5, #28]
 8082912:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8082914:	776b      	strb	r3, [r5, #29]
 8082916:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8082918:	0a1b      	lsrs	r3, r3, #8
 808291a:	77ab      	strb	r3, [r5, #30]
 808291c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808291e:	77eb      	strb	r3, [r5, #31]
 8082920:	bd70      	pop	{r4, r5, r6, pc}

    return( 0 );
 8082922:	4618      	mov	r0, r3
}
 8082924:	bd70      	pop	{r4, r5, r6, pc}

08082926 <mbedtls_sha256_ret>:
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 8082926:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082928:	461f      	mov	r7, r3
 808292a:	b09d      	sub	sp, #116	; 0x74
 808292c:	4605      	mov	r5, r0
    int ret;
    mbedtls_sha256_context ctx;

    mbedtls_sha256_init( &ctx );
 808292e:	a801      	add	r0, sp, #4
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 8082930:	460e      	mov	r6, r1
 8082932:	4614      	mov	r4, r2
    int ret;
    mbedtls_sha256_context ctx;

    mbedtls_sha256_init( &ctx );
 8082934:	f7ff fb58 	bl	8081fe8 <mbedtls_sha256_init>

    if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )
 8082938:	4639      	mov	r1, r7
 808293a:	a801      	add	r0, sp, #4
 808293c:	f7ff fb68 	bl	8082010 <mbedtls_sha256_starts_ret>
 8082940:	4601      	mov	r1, r0
 8082942:	b958      	cbnz	r0, 808295c <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
 8082944:	4629      	mov	r1, r5
 8082946:	4632      	mov	r2, r6
 8082948:	a801      	add	r0, sp, #4
 808294a:	f7ff ff1b 	bl	8082784 <mbedtls_sha256_update_ret>
 808294e:	4601      	mov	r1, r0
 8082950:	b920      	cbnz	r0, 808295c <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
 8082952:	4621      	mov	r1, r4
 8082954:	a801      	add	r0, sp, #4
 8082956:	f7ff ff4f 	bl	80827f8 <mbedtls_sha256_finish_ret>
 808295a:	4601      	mov	r1, r0
        goto exit;

exit:
    mbedtls_sha256_free( &ctx );
 808295c:	a801      	add	r0, sp, #4
 808295e:	f7ff fb47 	bl	8081ff0 <mbedtls_sha256_free>

    return( ret );
}
 8082962:	4608      	mov	r0, r1
 8082964:	b01d      	add	sp, #116	; 0x74
 8082966:	bdf0      	pop	{r4, r5, r6, r7, pc}

08082968 <mbedtls_pkcs5_pbkdf2_hmac>:

int mbedtls_pkcs5_pbkdf2_hmac( mbedtls_md_context_t *ctx, const unsigned char *password,
                       size_t plen, const unsigned char *salt, size_t slen,
                       unsigned int iteration_count,
                       uint32_t key_length, unsigned char *output )
{
 8082968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808296c:	4604      	mov	r4, r0
 808296e:	b0a5      	sub	sp, #148	; 0x94
    int ret, j;
    unsigned int i;
    unsigned char md1[MBEDTLS_MD_MAX_SIZE];
    unsigned char work[MBEDTLS_MD_MAX_SIZE];
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
 8082970:	6800      	ldr	r0, [r0, #0]

int mbedtls_pkcs5_pbkdf2_hmac( mbedtls_md_context_t *ctx, const unsigned char *password,
                       size_t plen, const unsigned char *salt, size_t slen,
                       unsigned int iteration_count,
                       uint32_t key_length, unsigned char *output )
{
 8082972:	9301      	str	r3, [sp, #4]
 8082974:	460f      	mov	r7, r1
 8082976:	4693      	mov	fp, r2
 8082978:	9e30      	ldr	r6, [sp, #192]	; 0xc0
    int ret, j;
    unsigned int i;
    unsigned char md1[MBEDTLS_MD_MAX_SIZE];
    unsigned char work[MBEDTLS_MD_MAX_SIZE];
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
 808297a:	f004 ffd9 	bl	8087930 <mbedtls_md_get_size>
 808297e:	4681      	mov	r9, r0
    size_t use_len;
    unsigned char *out_p = output;
    unsigned char counter[4];

    memset( counter, 0, 4 );
 8082980:	2300      	movs	r3, #0
 8082982:	9303      	str	r3, [sp, #12]
    counter[3] = 1;
 8082984:	2301      	movs	r3, #1
 8082986:	f88d 300f 	strb.w	r3, [sp, #15]
            return( ret );

        if( ( ret = mbedtls_md_hmac_update( ctx, counter, 4 ) ) != 0 )
            return( ret );

        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
 808298a:	f10d 0850 	add.w	r8, sp, #80	; 0x50
#if UINT_MAX > 0xFFFFFFFF
    if( iteration_count > 0xFFFFFFFF )
        return( MBEDTLS_ERR_PKCS5_BAD_INPUT_DATA );
#endif

    while( key_length )
 808298e:	2e00      	cmp	r6, #0
 8082990:	d05c      	beq.n	8082a4c <mbedtls_pkcs5_pbkdf2_hmac+0xe4>
    {
        // U1 ends up in work
        //
        if( ( ret = mbedtls_md_hmac_starts( ctx, password, plen ) ) != 0 )
 8082992:	465a      	mov	r2, fp
 8082994:	4639      	mov	r1, r7
 8082996:	4620      	mov	r0, r4
 8082998:	f004 ff08 	bl	80877ac <mbedtls_md_hmac_starts>
 808299c:	2800      	cmp	r0, #0
 808299e:	d156      	bne.n	8082a4e <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        if( ( ret = mbedtls_md_hmac_update( ctx, salt, slen ) ) != 0 )
 80829a0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80829a2:	9901      	ldr	r1, [sp, #4]
 80829a4:	4620      	mov	r0, r4
 80829a6:	f004 ff61 	bl	808786c <mbedtls_md_hmac_update>
 80829aa:	2800      	cmp	r0, #0
 80829ac:	d14f      	bne.n	8082a4e <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        if( ( ret = mbedtls_md_hmac_update( ctx, counter, 4 ) ) != 0 )
 80829ae:	2204      	movs	r2, #4
 80829b0:	a903      	add	r1, sp, #12
 80829b2:	4620      	mov	r0, r4
 80829b4:	f004 ff5a 	bl	808786c <mbedtls_md_hmac_update>
 80829b8:	2800      	cmp	r0, #0
 80829ba:	d148      	bne.n	8082a4e <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
 80829bc:	4641      	mov	r1, r8
 80829be:	4620      	mov	r0, r4
 80829c0:	f004 ff64 	bl	808788c <mbedtls_md_hmac_finish>
 80829c4:	2800      	cmp	r0, #0
 80829c6:	d142      	bne.n	8082a4e <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        memcpy( md1, work, md_size );
 80829c8:	ad04      	add	r5, sp, #16
 80829ca:	464a      	mov	r2, r9
 80829cc:	4641      	mov	r1, r8
 80829ce:	4628      	mov	r0, r5
 80829d0:	f00f fcbb 	bl	809234a <memcpy>

        for( i = 1; i < iteration_count; i++ )
 80829d4:	f04f 0a01 	mov.w	sl, #1
 80829d8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80829da:	459a      	cmp	sl, r3
 80829dc:	d21d      	bcs.n	8082a1a <mbedtls_pkcs5_pbkdf2_hmac+0xb2>
        {
            // U2 ends up in md1
            //
            if( ( ret = mbedtls_md_hmac_starts( ctx, password, plen ) ) != 0 )
 80829de:	465a      	mov	r2, fp
 80829e0:	4639      	mov	r1, r7
 80829e2:	4620      	mov	r0, r4
 80829e4:	f004 fee2 	bl	80877ac <mbedtls_md_hmac_starts>
 80829e8:	bb88      	cbnz	r0, 8082a4e <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
                return( ret );

            if( ( ret = mbedtls_md_hmac_update( ctx, md1, md_size ) ) != 0 )
 80829ea:	464a      	mov	r2, r9
 80829ec:	4629      	mov	r1, r5
 80829ee:	4620      	mov	r0, r4
 80829f0:	f004 ff3c 	bl	808786c <mbedtls_md_hmac_update>
 80829f4:	bb58      	cbnz	r0, 8082a4e <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
                return( ret );

            if( ( ret = mbedtls_md_hmac_finish( ctx, md1 ) ) != 0 )
 80829f6:	4629      	mov	r1, r5
 80829f8:	4620      	mov	r0, r4
 80829fa:	f004 ff47 	bl	808788c <mbedtls_md_hmac_finish>
 80829fe:	bb30      	cbnz	r0, 8082a4e <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
                return( ret );

            // U1 xor U2
            //
            for( j = 0; j < md_size; j++ )
 8082a00:	4548      	cmp	r0, r9
 8082a02:	da07      	bge.n	8082a14 <mbedtls_pkcs5_pbkdf2_hmac+0xac>
                work[j] ^= md1[j];
 8082a04:	f810 2008 	ldrb.w	r2, [r0, r8]
 8082a08:	5d43      	ldrb	r3, [r0, r5]
 8082a0a:	4053      	eors	r3, r2
 8082a0c:	f800 3008 	strb.w	r3, [r0, r8]
            if( ( ret = mbedtls_md_hmac_finish( ctx, md1 ) ) != 0 )
                return( ret );

            // U1 xor U2
            //
            for( j = 0; j < md_size; j++ )
 8082a10:	3001      	adds	r0, #1
 8082a12:	e7f5      	b.n	8082a00 <mbedtls_pkcs5_pbkdf2_hmac+0x98>
        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
            return( ret );

        memcpy( md1, work, md_size );

        for( i = 1; i < iteration_count; i++ )
 8082a14:	f10a 0a01 	add.w	sl, sl, #1
 8082a18:	e7de      	b.n	80829d8 <mbedtls_pkcs5_pbkdf2_hmac+0x70>
            //
            for( j = 0; j < md_size; j++ )
                work[j] ^= md1[j];
        }

        use_len = ( key_length < md_size ) ? key_length : md_size;
 8082a1a:	454e      	cmp	r6, r9
 8082a1c:	4635      	mov	r5, r6
 8082a1e:	bf28      	it	cs
 8082a20:	464d      	movcs	r5, r9
        memcpy( out_p, work, use_len );
 8082a22:	4641      	mov	r1, r8
 8082a24:	462a      	mov	r2, r5
 8082a26:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8082a28:	f00f fc8f 	bl	809234a <memcpy>

        key_length -= (uint32_t) use_len;
        out_p += use_len;
 8082a2c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
        }

        use_len = ( key_length < md_size ) ? key_length : md_size;
        memcpy( out_p, work, use_len );

        key_length -= (uint32_t) use_len;
 8082a2e:	1b76      	subs	r6, r6, r5
        out_p += use_len;
 8082a30:	442b      	add	r3, r5
 8082a32:	9331      	str	r3, [sp, #196]	; 0xc4
 8082a34:	aa04      	add	r2, sp, #16

        for( i = 4; i > 0; i-- )
            if( ++counter[i - 1] != 0 )
 8082a36:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 8082a3a:	3301      	adds	r3, #1
 8082a3c:	b2db      	uxtb	r3, r3
 8082a3e:	7013      	strb	r3, [r2, #0]
 8082a40:	2b00      	cmp	r3, #0
 8082a42:	d1a4      	bne.n	808298e <mbedtls_pkcs5_pbkdf2_hmac+0x26>
        memcpy( out_p, work, use_len );

        key_length -= (uint32_t) use_len;
        out_p += use_len;

        for( i = 4; i > 0; i-- )
 8082a44:	ab03      	add	r3, sp, #12
 8082a46:	4293      	cmp	r3, r2
 8082a48:	d1f5      	bne.n	8082a36 <mbedtls_pkcs5_pbkdf2_hmac+0xce>
 8082a4a:	e7a0      	b.n	808298e <mbedtls_pkcs5_pbkdf2_hmac+0x26>
            if( ++counter[i - 1] != 0 )
                break;
    }

    return( 0 );
 8082a4c:	4630      	mov	r0, r6
}
 8082a4e:	b025      	add	sp, #148	; 0x94
 8082a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08082a54 <mbedtls_pkcs5_pbes2>:

int mbedtls_pkcs5_pbes2( const mbedtls_asn1_buf *pbe_params, int mode,
                 const unsigned char *pwd,  size_t pwdlen,
                 const unsigned char *data, size_t datalen,
                 unsigned char *output )
{
 8082a54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8082a58:	461f      	mov	r7, r3
 8082a5a:	b0bd      	sub	sp, #244	; 0xf4
    int ret, iterations = 0, keylen = 0;
 8082a5c:	2300      	movs	r3, #0
 8082a5e:	9306      	str	r3, [sp, #24]
 8082a60:	9307      	str	r3, [sp, #28]
    unsigned char *p, *end;
    mbedtls_asn1_buf kdf_alg_oid, enc_scheme_oid, kdf_alg_params, enc_scheme_params;
    mbedtls_asn1_buf salt;
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
    unsigned char key[32], iv[32];
    size_t olen = 0;
 8082a62:	9309      	str	r3, [sp, #36]	; 0x24
    mbedtls_md_context_t md_ctx;
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_cipher_context_t cipher_ctx;

    p = pbe_params->p;
    end = p + pbe_params->len;
 8082a64:	6844      	ldr	r4, [r0, #4]
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_md_context_t md_ctx;
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_cipher_context_t cipher_ctx;

    p = pbe_params->p;
 8082a66:	6883      	ldr	r3, [r0, #8]
{
    int ret, iterations = 0, keylen = 0;
    unsigned char *p, *end;
    mbedtls_asn1_buf kdf_alg_oid, enc_scheme_oid, kdf_alg_params, enc_scheme_params;
    mbedtls_asn1_buf salt;
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
 8082a68:	f04f 0904 	mov.w	r9, #4
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_md_context_t md_ctx;
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_cipher_context_t cipher_ctx;

    p = pbe_params->p;
 8082a6c:	9308      	str	r3, [sp, #32]
    end = p + pbe_params->len;
 8082a6e:	441c      	add	r4, r3
     *  PBES2-params ::= SEQUENCE {
     *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 8082a70:	6803      	ldr	r3, [r0, #0]

int mbedtls_pkcs5_pbes2( const mbedtls_asn1_buf *pbe_params, int mode,
                 const unsigned char *pwd,  size_t pwdlen,
                 const unsigned char *data, size_t datalen,
                 unsigned char *output )
{
 8082a72:	460d      	mov	r5, r1
     *  PBES2-params ::= SEQUENCE {
     *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 8082a74:	2b30      	cmp	r3, #48	; 0x30

int mbedtls_pkcs5_pbes2( const mbedtls_asn1_buf *pbe_params, int mode,
                 const unsigned char *pwd,  size_t pwdlen,
                 const unsigned char *data, size_t datalen,
                 unsigned char *output )
{
 8082a76:	4616      	mov	r6, r2
    int ret, iterations = 0, keylen = 0;
    unsigned char *p, *end;
    mbedtls_asn1_buf kdf_alg_oid, enc_scheme_oid, kdf_alg_params, enc_scheme_params;
    mbedtls_asn1_buf salt;
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
 8082a78:	f88d 9016 	strb.w	r9, [sp, #22]
     *  PBES2-params ::= SEQUENCE {
     *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 8082a7c:	f040 80c9 	bne.w	8082c12 <mbedtls_pkcs5_pbes2+0x1be>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &kdf_alg_oid, &kdf_alg_params ) ) != 0 )
 8082a80:	ab10      	add	r3, sp, #64	; 0x40
 8082a82:	aa0a      	add	r2, sp, #40	; 0x28
 8082a84:	4621      	mov	r1, r4
 8082a86:	a808      	add	r0, sp, #32
 8082a88:	f000 fd65 	bl	8083556 <mbedtls_asn1_get_alg>
 8082a8c:	2800      	cmp	r0, #0
 8082a8e:	d158      	bne.n	8082b42 <mbedtls_pkcs5_pbes2+0xee>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    // Only PBKDF2 supported at the moment
    //
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBKDF2, &kdf_alg_oid ) != 0 )
 8082a90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8082a92:	2a09      	cmp	r2, #9
 8082a94:	d14c      	bne.n	8082b30 <mbedtls_pkcs5_pbes2+0xdc>
 8082a96:	990c      	ldr	r1, [sp, #48]	; 0x30
 8082a98:	4861      	ldr	r0, [pc, #388]	; (8082c20 <mbedtls_pkcs5_pbes2+0x1cc>)
 8082a9a:	f00f fc47 	bl	809232c <memcmp>
 8082a9e:	2800      	cmp	r0, #0
 8082aa0:	d146      	bne.n	8082b30 <mbedtls_pkcs5_pbes2+0xdc>
                                      mbedtls_asn1_buf *salt, int *iterations,
                                      int *keylen, mbedtls_md_type_t *md_type )
{
    int ret;
    mbedtls_asn1_buf prf_alg_oid;
    unsigned char *p = params->p;
 8082aa2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    const unsigned char *end = params->p + params->len;
 8082aa4:	9a11      	ldr	r2, [sp, #68]	; 0x44
                                      mbedtls_asn1_buf *salt, int *iterations,
                                      int *keylen, mbedtls_md_type_t *md_type )
{
    int ret;
    mbedtls_asn1_buf prf_alg_oid;
    unsigned char *p = params->p;
 8082aa6:	9324      	str	r3, [sp, #144]	; 0x90
    const unsigned char *end = params->p + params->len;
 8082aa8:	eb03 0802 	add.w	r8, r3, r2

    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 8082aac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8082aae:	2b30      	cmp	r3, #48	; 0x30
 8082ab0:	f040 80af 	bne.w	8082c12 <mbedtls_pkcs5_pbes2+0x1be>
     *    keyLength         INTEGER OPTIONAL
     *    prf               AlgorithmIdentifier DEFAULT algid-hmacWithSHA1
     *  }
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 8082ab4:	464b      	mov	r3, r9
 8082ab6:	aa17      	add	r2, sp, #92	; 0x5c
 8082ab8:	4641      	mov	r1, r8
 8082aba:	a824      	add	r0, sp, #144	; 0x90
 8082abc:	f000 fc72 	bl	80833a4 <mbedtls_asn1_get_tag>
 8082ac0:	b9f8      	cbnz	r0, 8082b02 <mbedtls_pkcs5_pbes2+0xae>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    salt->p = p;
 8082ac2:	9a24      	ldr	r2, [sp, #144]	; 0x90
    p += salt->len;
 8082ac4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    salt->p = p;
 8082ac6:	9218      	str	r2, [sp, #96]	; 0x60
    p += salt->len;
 8082ac8:	4413      	add	r3, r2

    if( ( ret = mbedtls_asn1_get_int( &p, end, iterations ) ) != 0 )
 8082aca:	4641      	mov	r1, r8
 8082acc:	aa06      	add	r2, sp, #24
 8082ace:	a824      	add	r0, sp, #144	; 0x90
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    salt->p = p;
    p += salt->len;
 8082ad0:	9324      	str	r3, [sp, #144]	; 0x90

    if( ( ret = mbedtls_asn1_get_int( &p, end, iterations ) ) != 0 )
 8082ad2:	f000 fc94 	bl	80833fe <mbedtls_asn1_get_int>
 8082ad6:	b9a0      	cbnz	r0, 8082b02 <mbedtls_pkcs5_pbes2+0xae>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    if( p == end )
 8082ad8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8082ada:	4598      	cmp	r8, r3
 8082adc:	d022      	beq.n	8082b24 <mbedtls_pkcs5_pbes2+0xd0>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_int( &p, end, keylen ) ) != 0 )
 8082ade:	aa07      	add	r2, sp, #28
 8082ae0:	4641      	mov	r1, r8
 8082ae2:	a824      	add	r0, sp, #144	; 0x90
 8082ae4:	f000 fc8b 	bl	80833fe <mbedtls_asn1_get_int>
 8082ae8:	b110      	cbz	r0, 8082af0 <mbedtls_pkcs5_pbes2+0x9c>
    {
        if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8082aea:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8082aee:	d108      	bne.n	8082b02 <mbedtls_pkcs5_pbes2+0xae>
            return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
    }

    if( p == end )
 8082af0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8082af2:	4598      	cmp	r8, r3
 8082af4:	d016      	beq.n	8082b24 <mbedtls_pkcs5_pbes2+0xd0>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
 8082af6:	aa2c      	add	r2, sp, #176	; 0xb0
 8082af8:	4641      	mov	r1, r8
 8082afa:	a824      	add	r0, sp, #144	; 0x90
 8082afc:	f000 fd73 	bl	80835e6 <mbedtls_asn1_get_alg_null>
 8082b00:	b128      	cbz	r0, 8082b0e <mbedtls_pkcs5_pbes2+0xba>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
 8082b02:	f5a0 503c 	sub.w	r0, r0, #12032	; 0x2f00
    // Only PBKDF2 supported at the moment
    //
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBKDF2, &kdf_alg_oid ) != 0 )
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    if( ( ret = pkcs5_parse_pbkdf2_params( &kdf_alg_params,
 8082b06:	2800      	cmp	r0, #0
 8082b08:	f040 8086 	bne.w	8082c18 <mbedtls_pkcs5_pbes2+0x1c4>
 8082b0c:	e00a      	b.n	8082b24 <mbedtls_pkcs5_pbes2+0xd0>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    if( mbedtls_oid_get_md_hmac( &prf_alg_oid, md_type ) != 0 )
 8082b0e:	f10d 0116 	add.w	r1, sp, #22
 8082b12:	a82c      	add	r0, sp, #176	; 0xb0
 8082b14:	f002 f90c 	bl	8084d30 <mbedtls_oid_get_md_hmac>
 8082b18:	b950      	cbnz	r0, 8082b30 <mbedtls_pkcs5_pbes2+0xdc>
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    if( p != end )
 8082b1a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8082b1c:	4598      	cmp	r8, r3
 8082b1e:	d001      	beq.n	8082b24 <mbedtls_pkcs5_pbes2+0xd0>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8082b20:	4840      	ldr	r0, [pc, #256]	; (8082c24 <mbedtls_pkcs5_pbes2+0x1d0>)
 8082b22:	e079      	b.n	8082c18 <mbedtls_pkcs5_pbes2+0x1c4>
                                           &md_type ) ) != 0 )
    {
        return( ret );
    }

    md_info = mbedtls_md_info_from_type( md_type );
 8082b24:	f89d 0016 	ldrb.w	r0, [sp, #22]
 8082b28:	f004 fdbe 	bl	80876a8 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8082b2c:	4681      	mov	r9, r0
 8082b2e:	b908      	cbnz	r0, 8082b34 <mbedtls_pkcs5_pbes2+0xe0>

    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    if( mbedtls_oid_get_md_hmac( &prf_alg_oid, md_type ) != 0 )
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );
 8082b30:	483d      	ldr	r0, [pc, #244]	; (8082c28 <mbedtls_pkcs5_pbes2+0x1d4>)
 8082b32:	e071      	b.n	8082c18 <mbedtls_pkcs5_pbes2+0x1c4>

    md_info = mbedtls_md_info_from_type( md_type );
    if( md_info == NULL )
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &enc_scheme_oid,
 8082b34:	ab13      	add	r3, sp, #76	; 0x4c
 8082b36:	aa0d      	add	r2, sp, #52	; 0x34
 8082b38:	4621      	mov	r1, r4
 8082b3a:	a808      	add	r0, sp, #32
 8082b3c:	f000 fd0b 	bl	8083556 <mbedtls_asn1_get_alg>
 8082b40:	b110      	cbz	r0, 8082b48 <mbedtls_pkcs5_pbes2+0xf4>
                              &enc_scheme_params ) ) != 0 )
    {
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
 8082b42:	f5a0 503c 	sub.w	r0, r0, #12032	; 0x2f00
 8082b46:	e067      	b.n	8082c18 <mbedtls_pkcs5_pbes2+0x1c4>
    }

    if( mbedtls_oid_get_cipher_alg( &enc_scheme_oid, &cipher_alg ) != 0 )
 8082b48:	f10d 0117 	add.w	r1, sp, #23
 8082b4c:	a80d      	add	r0, sp, #52	; 0x34
 8082b4e:	f002 f8c1 	bl	8084cd4 <mbedtls_oid_get_cipher_alg>
 8082b52:	2800      	cmp	r0, #0
 8082b54:	d1ec      	bne.n	8082b30 <mbedtls_pkcs5_pbes2+0xdc>
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    cipher_info = mbedtls_cipher_info_from_type( cipher_alg );
 8082b56:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8082b5a:	f000 f949 	bl	8082df0 <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
 8082b5e:	4680      	mov	r8, r0
 8082b60:	2800      	cmp	r0, #0
 8082b62:	d0e5      	beq.n	8082b30 <mbedtls_pkcs5_pbes2+0xdc>

    /*
     * The value of keylen from pkcs5_parse_pbkdf2_params() is ignored
     * since it is optional and we don't know if it was set or not
     */
    keylen = cipher_info->key_bitlen / 8;
 8082b64:	6843      	ldr	r3, [r0, #4]
 8082b66:	08db      	lsrs	r3, r3, #3
 8082b68:	9307      	str	r3, [sp, #28]

    if( enc_scheme_params.tag != MBEDTLS_ASN1_OCTET_STRING ||
 8082b6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8082b6c:	2b04      	cmp	r3, #4
 8082b6e:	d152      	bne.n	8082c16 <mbedtls_pkcs5_pbes2+0x1c2>
 8082b70:	68c3      	ldr	r3, [r0, #12]
 8082b72:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8082b74:	429a      	cmp	r2, r3
 8082b76:	d14e      	bne.n	8082c16 <mbedtls_pkcs5_pbes2+0x1c2>
        enc_scheme_params.len != cipher_info->iv_size )
    {
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT );
    }

    mbedtls_md_init( &md_ctx );
 8082b78:	a819      	add	r0, sp, #100	; 0x64
 8082b7a:	f004 fda1 	bl	80876c0 <mbedtls_md_init>
    mbedtls_cipher_init( &cipher_ctx );
 8082b7e:	a82c      	add	r0, sp, #176	; 0xb0
 8082b80:	f000 f958 	bl	8082e34 <mbedtls_cipher_init>

    memcpy( iv, enc_scheme_params.p, enc_scheme_params.len );
 8082b84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8082b86:	9915      	ldr	r1, [sp, #84]	; 0x54
 8082b88:	a824      	add	r0, sp, #144	; 0x90
 8082b8a:	f00f fbde 	bl	809234a <memcpy>

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
 8082b8e:	2201      	movs	r2, #1
 8082b90:	4649      	mov	r1, r9
 8082b92:	a819      	add	r0, sp, #100	; 0x64
 8082b94:	f004 fdba 	bl	808770c <mbedtls_md_setup>
 8082b98:	4604      	mov	r4, r0
 8082b9a:	2800      	cmp	r0, #0
 8082b9c:	d131      	bne.n	8082c02 <mbedtls_pkcs5_pbes2+0x1ae>
        goto exit;

    if( ( ret = mbedtls_pkcs5_pbkdf2_hmac( &md_ctx, pwd, pwdlen, salt.p, salt.len,
 8082b9e:	9b07      	ldr	r3, [sp, #28]
 8082ba0:	f10d 0970 	add.w	r9, sp, #112	; 0x70
 8082ba4:	9302      	str	r3, [sp, #8]
 8082ba6:	9b06      	ldr	r3, [sp, #24]
 8082ba8:	f8cd 900c 	str.w	r9, [sp, #12]
 8082bac:	9301      	str	r3, [sp, #4]
 8082bae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8082bb0:	463a      	mov	r2, r7
 8082bb2:	9300      	str	r3, [sp, #0]
 8082bb4:	4631      	mov	r1, r6
 8082bb6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8082bb8:	a819      	add	r0, sp, #100	; 0x64
 8082bba:	f7ff fed5 	bl	8082968 <mbedtls_pkcs5_pbkdf2_hmac>
 8082bbe:	4604      	mov	r4, r0
 8082bc0:	b9f8      	cbnz	r0, 8082c02 <mbedtls_pkcs5_pbes2+0x1ae>
                                   iterations, keylen, key ) ) != 0 )
    {
        goto exit;
    }

    if( ( ret = mbedtls_cipher_setup( &cipher_ctx, cipher_info ) ) != 0 )
 8082bc2:	4641      	mov	r1, r8
 8082bc4:	a82c      	add	r0, sp, #176	; 0xb0
 8082bc6:	f000 fb09 	bl	80831dc <mbedtls_cipher_setup>
 8082bca:	4604      	mov	r4, r0
 8082bcc:	b9c8      	cbnz	r0, 8082c02 <mbedtls_pkcs5_pbes2+0x1ae>
        goto exit;

    if( ( ret = mbedtls_cipher_setkey( &cipher_ctx, key, 8 * keylen, (mbedtls_operation_t) mode ) ) != 0 )
 8082bce:	9a07      	ldr	r2, [sp, #28]
 8082bd0:	b26b      	sxtb	r3, r5
 8082bd2:	00d2      	lsls	r2, r2, #3
 8082bd4:	4649      	mov	r1, r9
 8082bd6:	a82c      	add	r0, sp, #176	; 0xb0
 8082bd8:	f000 f942 	bl	8082e60 <mbedtls_cipher_setkey>
 8082bdc:	4604      	mov	r4, r0
 8082bde:	b980      	cbnz	r0, 8082c02 <mbedtls_pkcs5_pbes2+0x1ae>
        goto exit;

    if( ( ret = mbedtls_cipher_crypt( &cipher_ctx, iv, enc_scheme_params.len,
 8082be0:	ab09      	add	r3, sp, #36	; 0x24
 8082be2:	9302      	str	r3, [sp, #8]
 8082be4:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8082be6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8082be8:	9301      	str	r3, [sp, #4]
 8082bea:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8082bec:	a924      	add	r1, sp, #144	; 0x90
 8082bee:	9300      	str	r3, [sp, #0]
 8082bf0:	a82c      	add	r0, sp, #176	; 0xb0
 8082bf2:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8082bf4:	f000 fb10 	bl	8083218 <mbedtls_cipher_crypt>
                              data, datalen, output, &olen ) ) != 0 )
        ret = MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH;
 8082bf8:	f5a4 5438 	sub.w	r4, r4, #11776	; 0x2e00
 8082bfc:	2800      	cmp	r0, #0
 8082bfe:	bf08      	it	eq
 8082c00:	2400      	moveq	r4, #0

exit:
    mbedtls_md_free( &md_ctx );
 8082c02:	a819      	add	r0, sp, #100	; 0x64
 8082c04:	f004 fd61 	bl	80876ca <mbedtls_md_free>
    mbedtls_cipher_free( &cipher_ctx );
 8082c08:	a82c      	add	r0, sp, #176	; 0xb0
 8082c0a:	f000 f917 	bl	8082e3c <mbedtls_cipher_free>

    return( ret );
 8082c0e:	4620      	mov	r0, r4
 8082c10:	e002      	b.n	8082c18 <mbedtls_pkcs5_pbes2+0x1c4>
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 8082c12:	4806      	ldr	r0, [pc, #24]	; (8082c2c <mbedtls_pkcs5_pbes2+0x1d8>)
 8082c14:	e000      	b.n	8082c18 <mbedtls_pkcs5_pbes2+0x1c4>
    keylen = cipher_info->key_bitlen / 8;

    if( enc_scheme_params.tag != MBEDTLS_ASN1_OCTET_STRING ||
        enc_scheme_params.len != cipher_info->iv_size )
    {
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT );
 8082c16:	4806      	ldr	r0, [pc, #24]	; (8082c30 <mbedtls_pkcs5_pbes2+0x1dc>)
exit:
    mbedtls_md_free( &md_ctx );
    mbedtls_cipher_free( &cipher_ctx );

    return( ret );
}
 8082c18:	b03d      	add	sp, #244	; 0xf4
 8082c1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8082c1e:	bf00      	nop
 8082c20:	08092698 	.word	0x08092698
 8082c24:	ffffd09a 	.word	0xffffd09a
 8082c28:	ffffd180 	.word	0xffffd180
 8082c2c:	ffffd09e 	.word	0xffffd09e
 8082c30:	ffffd100 	.word	0xffffd100

08082c34 <mbedtls_cipher_get_block_size>:
 * \return       The size of the blocks of the cipher, or zero if \p ctx
 *               has not been initialized.
 */
static inline unsigned int mbedtls_cipher_get_block_size( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
 8082c34:	b110      	cbz	r0, 8082c3c <mbedtls_cipher_get_block_size+0x8>
 8082c36:	6800      	ldr	r0, [r0, #0]
 8082c38:	b100      	cbz	r0, 8082c3c <mbedtls_cipher_get_block_size+0x8>
        return 0;

    return ctx->cipher_info->block_size;
 8082c3a:	6940      	ldr	r0, [r0, #20]
}
 8082c3c:	4770      	bx	lr

08082c3e <_ZL16add_pkcs_paddingPhjj>:
/*
 * PKCS7 (and PKCS5) padding: fill with ll bytes, with ll = padding_len
 */
static void add_pkcs_padding( unsigned char *output, size_t output_len,
        size_t data_len )
{
 8082c3e:	b510      	push	{r4, lr}
    size_t padding_len = output_len - data_len;
 8082c40:	1a89      	subs	r1, r1, r2
 8082c42:	2400      	movs	r4, #0
    unsigned char i;

    for( i = 0; i < padding_len; i++ )
 8082c44:	b2e3      	uxtb	r3, r4
 8082c46:	4299      	cmp	r1, r3
 8082c48:	f104 0401 	add.w	r4, r4, #1
 8082c4c:	d902      	bls.n	8082c54 <_ZL16add_pkcs_paddingPhjj+0x16>
        output[data_len + i] = (unsigned char) padding_len;
 8082c4e:	4403      	add	r3, r0
 8082c50:	5499      	strb	r1, [r3, r2]
        size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i;

    for( i = 0; i < padding_len; i++ )
 8082c52:	e7f7      	b.n	8082c44 <_ZL16add_pkcs_paddingPhjj+0x6>
 8082c54:	bd10      	pop	{r4, pc}
	...

08082c58 <_ZL16get_pkcs_paddingPhjPj>:
        output[data_len + i] = (unsigned char) padding_len;
}

static int get_pkcs_padding( unsigned char *input, size_t input_len,
        size_t *data_len )
{
 8082c58:	b5f0      	push	{r4, r5, r6, r7, lr}
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
 8082c5a:	b300      	cbz	r0, 8082c9e <_ZL16get_pkcs_paddingPhjPj+0x46>
 8082c5c:	b1fa      	cbz	r2, 8082c9e <_ZL16get_pkcs_paddingPhjPj+0x46>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
 8082c5e:	1843      	adds	r3, r0, r1
 8082c60:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    *data_len = input_len - padding_len;

    /* Avoid logical || since it results in a branch */
    bad |= padding_len > input_len;
    bad |= padding_len == 0;
 8082c64:	fab4 f384 	clz	r3, r4
 8082c68:	095b      	lsrs	r3, r3, #5
 8082c6a:	42a1      	cmp	r1, r4
 8082c6c:	bf38      	it	cc
 8082c6e:	f043 0301 	orrcc.w	r3, r3, #1

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
    *data_len = input_len - padding_len;
 8082c72:	1b0f      	subs	r7, r1, r4
 8082c74:	6017      	str	r7, [r2, #0]
    bad |= padding_len == 0;

    /* The number of bytes checked must be independent of padding_len,
     * so pick input_len, which is usually 8 or 16 (one block) */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len; i++ )
 8082c76:	2200      	movs	r2, #0
 8082c78:	428a      	cmp	r2, r1
 8082c7a:	d00b      	beq.n	8082c94 <_ZL16get_pkcs_paddingPhjPj+0x3c>
        bad |= ( input[i] ^ padding_len ) * ( i >= pad_idx );
 8082c7c:	5c85      	ldrb	r5, [r0, r2]
 8082c7e:	42ba      	cmp	r2, r7
 8082c80:	ea84 0605 	eor.w	r6, r4, r5
 8082c84:	bf34      	ite	cc
 8082c86:	2500      	movcc	r5, #0
 8082c88:	2501      	movcs	r5, #1
 8082c8a:	4375      	muls	r5, r6
 8082c8c:	432b      	orrs	r3, r5
 8082c8e:	b2db      	uxtb	r3, r3
    bad |= padding_len == 0;

    /* The number of bytes checked must be independent of padding_len,
     * so pick input_len, which is usually 8 or 16 (one block) */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len; i++ )
 8082c90:	3201      	adds	r2, #1
 8082c92:	e7f1      	b.n	8082c78 <_ZL16get_pkcs_paddingPhjPj+0x20>
        bad |= ( input[i] ^ padding_len ) * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 8082c94:	2b00      	cmp	r3, #0
 8082c96:	4803      	ldr	r0, [pc, #12]	; (8082ca4 <_ZL16get_pkcs_paddingPhjPj+0x4c>)
 8082c98:	bf08      	it	eq
 8082c9a:	2000      	moveq	r0, #0
 8082c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8082c9e:	4802      	ldr	r0, [pc, #8]	; (8082ca8 <_ZL16get_pkcs_paddingPhjPj+0x50>)
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len; i++ )
        bad |= ( input[i] ^ padding_len ) * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
}
 8082ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082ca2:	bf00      	nop
 8082ca4:	ffff9e00 	.word	0xffff9e00
 8082ca8:	ffff9f00 	.word	0xffff9f00

08082cac <_ZL25add_one_and_zeros_paddingPhjj>:
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
 8082cac:	2380      	movs	r3, #128	; 0x80
/*
 * One and zeros padding: fill with 80 00 ... 00
 */
static void add_one_and_zeros_padding( unsigned char *output,
                                       size_t output_len, size_t data_len )
{
 8082cae:	b530      	push	{r4, r5, lr}
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
 8082cb0:	5483      	strb	r3, [r0, r2]
 * One and zeros padding: fill with 80 00 ... 00
 */
static void add_one_and_zeros_padding( unsigned char *output,
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
 8082cb2:	1a89      	subs	r1, r1, r2
    unsigned char i = 0;

    output[data_len] = 0x80;
    for( i = 1; i < padding_len; i++ )
 8082cb4:	2301      	movs	r3, #1
        output[data_len + i] = 0x00;
 8082cb6:	2500      	movs	r5, #0
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
    for( i = 1; i < padding_len; i++ )
 8082cb8:	4299      	cmp	r1, r3
 8082cba:	d904      	bls.n	8082cc6 <_ZL25add_one_and_zeros_paddingPhjj+0x1a>
        output[data_len + i] = 0x00;
 8082cbc:	18c4      	adds	r4, r0, r3
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
    for( i = 1; i < padding_len; i++ )
 8082cbe:	3301      	adds	r3, #1
        output[data_len + i] = 0x00;
 8082cc0:	54a5      	strb	r5, [r4, r2]
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
    for( i = 1; i < padding_len; i++ )
 8082cc2:	b2db      	uxtb	r3, r3
 8082cc4:	e7f8      	b.n	8082cb8 <_ZL25add_one_and_zeros_paddingPhjj+0xc>
 8082cc6:	bd30      	pop	{r4, r5, pc}

08082cc8 <_ZL25add_zeros_and_len_paddingPhjj>:
/*
 * Zeros and len padding: fill with 00 ... 00 ll, where ll is padding length
 */
static void add_zeros_and_len_padding( unsigned char *output,
                                       size_t output_len, size_t data_len )
{
 8082cc8:	b570      	push	{r4, r5, r6, lr}
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
 8082cca:	2301      	movs	r3, #1
 * Zeros and len padding: fill with 00 ... 00 ll, where ll is padding length
 */
static void add_zeros_and_len_padding( unsigned char *output,
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
 8082ccc:	1a8d      	subs	r5, r1, r2
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
        output[data_len + i - 1] = 0x00;
 8082cce:	2600      	movs	r6, #0
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
 8082cd0:	429d      	cmp	r5, r3
 8082cd2:	d906      	bls.n	8082ce2 <_ZL25add_zeros_and_len_paddingPhjj+0x1a>
        output[data_len + i - 1] = 0x00;
 8082cd4:	18c4      	adds	r4, r0, r3
 8082cd6:	4414      	add	r4, r2
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
 8082cd8:	3301      	adds	r3, #1
        output[data_len + i - 1] = 0x00;
 8082cda:	f804 6c01 	strb.w	r6, [r4, #-1]
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
 8082cde:	b2db      	uxtb	r3, r3
 8082ce0:	e7f6      	b.n	8082cd0 <_ZL25add_zeros_and_len_paddingPhjj+0x8>
        output[data_len + i - 1] = 0x00;
    output[output_len - 1] = (unsigned char) padding_len;
 8082ce2:	4401      	add	r1, r0
 8082ce4:	f801 5c01 	strb.w	r5, [r1, #-1]
 8082ce8:	bd70      	pop	{r4, r5, r6, pc}
	...

08082cec <_ZL25get_zeros_and_len_paddingPhjPj>:
}

static int get_zeros_and_len_padding( unsigned char *input, size_t input_len,
                                      size_t *data_len )
{
 8082cec:	b570      	push	{r4, r5, r6, lr}
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
 8082cee:	b1f0      	cbz	r0, 8082d2e <_ZL25get_zeros_and_len_paddingPhjPj+0x42>
 8082cf0:	b1ea      	cbz	r2, 8082d2e <_ZL25get_zeros_and_len_paddingPhjPj+0x42>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
 8082cf2:	1e4e      	subs	r6, r1, #1
 8082cf4:	5d84      	ldrb	r4, [r0, r6]
    *data_len = input_len - padding_len;

    /* Avoid logical || since it results in a branch */
    bad |= padding_len > input_len;
    bad |= padding_len == 0;
 8082cf6:	fab4 f384 	clz	r3, r4

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
    *data_len = input_len - padding_len;
 8082cfa:	1b0d      	subs	r5, r1, r4

    /* Avoid logical || since it results in a branch */
    bad |= padding_len > input_len;
    bad |= padding_len == 0;
 8082cfc:	095b      	lsrs	r3, r3, #5
 8082cfe:	42a1      	cmp	r1, r4
 8082d00:	bf2c      	ite	cs
 8082d02:	4619      	movcs	r1, r3
 8082d04:	f043 0101 	orrcc.w	r1, r3, #1

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
    *data_len = input_len - padding_len;
 8082d08:	6015      	str	r5, [r2, #0]
    bad |= padding_len > input_len;
    bad |= padding_len == 0;

    /* The number of bytes checked must be independent of padding_len */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len - 1; i++ )
 8082d0a:	2300      	movs	r3, #0
 8082d0c:	42b3      	cmp	r3, r6
 8082d0e:	d209      	bcs.n	8082d24 <_ZL25get_zeros_and_len_paddingPhjPj+0x38>
        bad |= input[i] * ( i >= pad_idx );
 8082d10:	42ab      	cmp	r3, r5
 8082d12:	5cc4      	ldrb	r4, [r0, r3]
 8082d14:	bf34      	ite	cc
 8082d16:	2200      	movcc	r2, #0
 8082d18:	2201      	movcs	r2, #1
 8082d1a:	4362      	muls	r2, r4
 8082d1c:	4311      	orrs	r1, r2
 8082d1e:	b2c9      	uxtb	r1, r1
    bad |= padding_len > input_len;
    bad |= padding_len == 0;

    /* The number of bytes checked must be independent of padding_len */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len - 1; i++ )
 8082d20:	3301      	adds	r3, #1
 8082d22:	e7f3      	b.n	8082d0c <_ZL25get_zeros_and_len_paddingPhjPj+0x20>
        bad |= input[i] * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 8082d24:	2900      	cmp	r1, #0
 8082d26:	4803      	ldr	r0, [pc, #12]	; (8082d34 <_ZL25get_zeros_and_len_paddingPhjPj+0x48>)
 8082d28:	bf08      	it	eq
 8082d2a:	2000      	moveq	r0, #0
 8082d2c:	bd70      	pop	{r4, r5, r6, pc}
{
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8082d2e:	4802      	ldr	r0, [pc, #8]	; (8082d38 <_ZL25get_zeros_and_len_paddingPhjPj+0x4c>)
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len - 1; i++ )
        bad |= input[i] * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
}
 8082d30:	bd70      	pop	{r4, r5, r6, pc}
 8082d32:	bf00      	nop
 8082d34:	ffff9e00 	.word	0xffff9e00
 8082d38:	ffff9f00 	.word	0xffff9f00

08082d3c <_ZL17add_zeros_paddingPhjj>:
/*
 * Zero padding: fill with 00 ... 00
 */
static void add_zeros_padding( unsigned char *output,
                               size_t output_len, size_t data_len )
{
 8082d3c:	b510      	push	{r4, lr}
 8082d3e:	4402      	add	r2, r0
    size_t i;

    for( i = data_len; i < output_len; i++ )
        output[i] = 0x00;
 8082d40:	2300      	movs	r3, #0
static void add_zeros_padding( unsigned char *output,
                               size_t output_len, size_t data_len )
{
    size_t i;

    for( i = data_len; i < output_len; i++ )
 8082d42:	1a14      	subs	r4, r2, r0
 8082d44:	42a1      	cmp	r1, r4
 8082d46:	d902      	bls.n	8082d4e <_ZL17add_zeros_paddingPhjj+0x12>
        output[i] = 0x00;
 8082d48:	f802 3b01 	strb.w	r3, [r2], #1
static void add_zeros_padding( unsigned char *output,
                               size_t output_len, size_t data_len )
{
    size_t i;

    for( i = data_len; i < output_len; i++ )
 8082d4c:	e7f9      	b.n	8082d42 <_ZL17add_zeros_paddingPhjj+0x6>
 8082d4e:	bd10      	pop	{r4, pc}

08082d50 <_ZL14get_no_paddingPhjPj>:
 * but a trivial get_padding function
 */
static int get_no_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
    if( NULL == input || NULL == data_len )
 8082d50:	b118      	cbz	r0, 8082d5a <_ZL14get_no_paddingPhjPj+0xa>
 8082d52:	b112      	cbz	r2, 8082d5a <_ZL14get_no_paddingPhjPj+0xa>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *data_len = input_len;
 8082d54:	6011      	str	r1, [r2, #0]

    return( 0 );
 8082d56:	2000      	movs	r0, #0
 8082d58:	4770      	bx	lr
 */
static int get_no_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8082d5a:	4801      	ldr	r0, [pc, #4]	; (8082d60 <_ZL14get_no_paddingPhjPj+0x10>)

    *data_len = input_len;

    return( 0 );
}
 8082d5c:	4770      	bx	lr
 8082d5e:	bf00      	nop
 8082d60:	ffff9f00 	.word	0xffff9f00

08082d64 <_ZL25get_one_and_zeros_paddingPhjPj>:
        output[data_len + i] = 0x00;
}

static int get_one_and_zeros_padding( unsigned char *input, size_t input_len,
                                      size_t *data_len )
{
 8082d64:	b5f0      	push	{r4, r5, r6, r7, lr}
    size_t i;
    unsigned char done = 0, prev_done, bad;

    if( NULL == input || NULL == data_len )
 8082d66:	b1f0      	cbz	r0, 8082da6 <_ZL25get_one_and_zeros_paddingPhjPj+0x42>
 8082d68:	b1ea      	cbz	r2, 8082da6 <_ZL25get_one_and_zeros_paddingPhjPj+0x42>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    bad = 0x80;
    *data_len = 0;
 8082d6a:	2300      	movs	r3, #0
 8082d6c:	6013      	str	r3, [r2, #0]
 8082d6e:	4408      	add	r0, r1
    unsigned char done = 0, prev_done, bad;

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    bad = 0x80;
 8082d70:	2480      	movs	r4, #128	; 0x80
    *data_len = 0;
    for( i = input_len; i > 0; i-- )
 8082d72:	b199      	cbz	r1, 8082d9c <_ZL25get_one_and_zeros_paddingPhjPj+0x38>
    {
        prev_done = done;
        done |= ( input[i - 1] != 0 );
 8082d74:	f810 5d01 	ldrb.w	r5, [r0, #-1]!
 8082d78:	3901      	subs	r1, #1
 8082d7a:	2d00      	cmp	r5, #0
 8082d7c:	bf0c      	ite	eq
 8082d7e:	461d      	moveq	r5, r3
 8082d80:	f043 0501 	orrne.w	r5, r3, #1
 8082d84:	406b      	eors	r3, r5
        *data_len |= ( i - 1 ) * ( done != prev_done );
 8082d86:	fb01 f603 	mul.w	r6, r1, r3
 8082d8a:	6817      	ldr	r7, [r2, #0]
 8082d8c:	433e      	orrs	r6, r7
 8082d8e:	6016      	str	r6, [r2, #0]
        bad ^= input[i - 1] * ( done != prev_done );
 8082d90:	7806      	ldrb	r6, [r0, #0]
 8082d92:	4373      	muls	r3, r6
 8082d94:	405c      	eors	r4, r3
 8082d96:	b2e4      	uxtb	r4, r4
    bad = 0x80;
    *data_len = 0;
    for( i = input_len; i > 0; i-- )
    {
        prev_done = done;
        done |= ( input[i - 1] != 0 );
 8082d98:	462b      	mov	r3, r5
 8082d9a:	e7ea      	b.n	8082d72 <_ZL25get_one_and_zeros_paddingPhjPj+0xe>
        *data_len |= ( i - 1 ) * ( done != prev_done );
        bad ^= input[i - 1] * ( done != prev_done );
    }

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 8082d9c:	2c00      	cmp	r4, #0
 8082d9e:	4803      	ldr	r0, [pc, #12]	; (8082dac <_ZL25get_one_and_zeros_paddingPhjPj+0x48>)
 8082da0:	bf08      	it	eq
 8082da2:	2000      	moveq	r0, #0
 8082da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
    size_t i;
    unsigned char done = 0, prev_done, bad;

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8082da6:	4802      	ldr	r0, [pc, #8]	; (8082db0 <_ZL25get_one_and_zeros_paddingPhjPj+0x4c>)
        bad ^= input[i - 1] * ( done != prev_done );
    }

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );

}
 8082da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082daa:	bf00      	nop
 8082dac:	ffff9e00 	.word	0xffff9e00
 8082db0:	ffff9f00 	.word	0xffff9f00

08082db4 <_ZL17get_zeros_paddingPhjPj>:
        output[i] = 0x00;
}

static int get_zeros_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
 8082db4:	b530      	push	{r4, r5, lr}
    size_t i;
    unsigned char done = 0, prev_done;

    if( NULL == input || NULL == data_len )
 8082db6:	b1a8      	cbz	r0, 8082de4 <_ZL17get_zeros_paddingPhjPj+0x30>
 8082db8:	b1a2      	cbz	r2, 8082de4 <_ZL17get_zeros_paddingPhjPj+0x30>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *data_len = 0;
 8082dba:	2300      	movs	r3, #0
 8082dbc:	6013      	str	r3, [r2, #0]
 8082dbe:	4401      	add	r1, r0
    for( i = input_len; i > 0; i-- )
 8082dc0:	4281      	cmp	r1, r0
 8082dc2:	eba1 0400 	sub.w	r4, r1, r0
 8082dc6:	d00f      	beq.n	8082de8 <_ZL17get_zeros_paddingPhjPj+0x34>
    {
        prev_done = done;
        done |= ( input[i-1] != 0 );
 8082dc8:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
 8082dcc:	2d00      	cmp	r5, #0
 8082dce:	bf0c      	ite	eq
 8082dd0:	461d      	moveq	r5, r3
 8082dd2:	f043 0501 	orrne.w	r5, r3, #1
        *data_len |= i * ( done != prev_done );
 8082dd6:	406b      	eors	r3, r5
 8082dd8:	4363      	muls	r3, r4
 8082dda:	6814      	ldr	r4, [r2, #0]
 8082ddc:	4323      	orrs	r3, r4
 8082dde:	6013      	str	r3, [r2, #0]

    *data_len = 0;
    for( i = input_len; i > 0; i-- )
    {
        prev_done = done;
        done |= ( input[i-1] != 0 );
 8082de0:	462b      	mov	r3, r5
 8082de2:	e7ed      	b.n	8082dc0 <_ZL17get_zeros_paddingPhjPj+0xc>
{
    size_t i;
    unsigned char done = 0, prev_done;

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8082de4:	4801      	ldr	r0, [pc, #4]	; (8082dec <_ZL17get_zeros_paddingPhjPj+0x38>)
 8082de6:	bd30      	pop	{r4, r5, pc}

    *data_len = 0;
    for( i = input_len; i > 0; i-- )
 8082de8:	2000      	movs	r0, #0
        done |= ( input[i-1] != 0 );
        *data_len |= i * ( done != prev_done );
    }

    return( 0 );
}
 8082dea:	bd30      	pop	{r4, r5, pc}
 8082dec:	ffff9f00 	.word	0xffff9f00

08082df0 <mbedtls_cipher_info_from_type>:

    return( mbedtls_cipher_supported );
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_type( const mbedtls_cipher_type_t cipher_type )
{
 8082df0:	4b05      	ldr	r3, [pc, #20]	; (8082e08 <mbedtls_cipher_info_from_type+0x18>)
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 8082df2:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8082df6:	b122      	cbz	r2, 8082e02 <mbedtls_cipher_info_from_type+0x12>
 8082df8:	3308      	adds	r3, #8
        if( def->type == cipher_type )
 8082dfa:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8082dfe:	4281      	cmp	r1, r0
 8082e00:	d1f7      	bne.n	8082df2 <mbedtls_cipher_info_from_type+0x2>
            return( def->info );

    return( NULL );
}
 8082e02:	4610      	mov	r0, r2
 8082e04:	4770      	bx	lr
 8082e06:	bf00      	nop
 8082e08:	080934ac 	.word	0x080934ac

08082e0c <mbedtls_cipher_info_from_values>:
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_values( const mbedtls_cipher_id_t cipher_id,
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
 8082e0c:	b530      	push	{r4, r5, lr}
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 8082e0e:	4c08      	ldr	r4, [pc, #32]	; (8082e30 <mbedtls_cipher_info_from_values+0x24>)
 8082e10:	6863      	ldr	r3, [r4, #4]
 8082e12:	b15b      	cbz	r3, 8082e2c <mbedtls_cipher_info_from_values+0x20>
        if( def->info->base->cipher == cipher_id &&
 8082e14:	699d      	ldr	r5, [r3, #24]
 8082e16:	782d      	ldrb	r5, [r5, #0]
 8082e18:	4285      	cmp	r5, r0
 8082e1a:	d105      	bne.n	8082e28 <mbedtls_cipher_info_from_values+0x1c>
 8082e1c:	685d      	ldr	r5, [r3, #4]
 8082e1e:	428d      	cmp	r5, r1
 8082e20:	d102      	bne.n	8082e28 <mbedtls_cipher_info_from_values+0x1c>
            def->info->key_bitlen == (unsigned) key_bitlen &&
 8082e22:	785d      	ldrb	r5, [r3, #1]
 8082e24:	4295      	cmp	r5, r2
 8082e26:	d001      	beq.n	8082e2c <mbedtls_cipher_info_from_values+0x20>
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 8082e28:	3408      	adds	r4, #8
 8082e2a:	e7f1      	b.n	8082e10 <mbedtls_cipher_info_from_values+0x4>
            def->info->key_bitlen == (unsigned) key_bitlen &&
            def->info->mode == mode )
            return( def->info );

    return( NULL );
}
 8082e2c:	4618      	mov	r0, r3
 8082e2e:	bd30      	pop	{r4, r5, pc}
 8082e30:	080934a4 	.word	0x080934a4

08082e34 <mbedtls_cipher_init>:

void mbedtls_cipher_init( mbedtls_cipher_context_t *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 8082e34:	2240      	movs	r2, #64	; 0x40
 8082e36:	2100      	movs	r1, #0
 8082e38:	f00f baad 	b.w	8092396 <memset>

08082e3c <mbedtls_cipher_free>:
}

void mbedtls_cipher_free( mbedtls_cipher_context_t *ctx )
{
 8082e3c:	b510      	push	{r4, lr}
    if( ctx == NULL )
 8082e3e:	4604      	mov	r4, r0
 8082e40:	b168      	cbz	r0, 8082e5e <mbedtls_cipher_free+0x22>
       mbedtls_zeroize( ctx->cmac_ctx, sizeof( mbedtls_cmac_context_t ) );
       mbedtls_free( ctx->cmac_ctx );
    }
#endif

    if( ctx->cipher_ctx )
 8082e42:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8082e44:	b118      	cbz	r0, 8082e4e <mbedtls_cipher_free+0x12>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
 8082e46:	6823      	ldr	r3, [r4, #0]
 8082e48:	699b      	ldr	r3, [r3, #24]
 8082e4a:	699b      	ldr	r3, [r3, #24]
 8082e4c:	4798      	blx	r3
 8082e4e:	f104 0240 	add.w	r2, r4, #64	; 0x40
#define mbedtls_free   free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 8082e52:	2300      	movs	r3, #0
 8082e54:	4294      	cmp	r4, r2
 8082e56:	d002      	beq.n	8082e5e <mbedtls_cipher_free+0x22>
 8082e58:	7023      	strb	r3, [r4, #0]
 8082e5a:	3401      	adds	r4, #1
 8082e5c:	e7fa      	b.n	8082e54 <mbedtls_cipher_free+0x18>
 8082e5e:	bd10      	pop	{r4, pc}

08082e60 <mbedtls_cipher_setkey>:
    return( 0 );
}

int mbedtls_cipher_setkey( mbedtls_cipher_context_t *ctx, const unsigned char *key,
        int key_bitlen, const mbedtls_operation_t operation )
{
 8082e60:	b430      	push	{r4, r5}
    if( NULL == ctx || NULL == ctx->cipher_info )
 8082e62:	b1c8      	cbz	r0, 8082e98 <mbedtls_cipher_setkey+0x38>
 8082e64:	6804      	ldr	r4, [r0, #0]
 8082e66:	b1bc      	cbz	r4, 8082e98 <mbedtls_cipher_setkey+0x38>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 8082e68:	6925      	ldr	r5, [r4, #16]
 8082e6a:	07ad      	lsls	r5, r5, #30
 8082e6c:	d402      	bmi.n	8082e74 <mbedtls_cipher_setkey+0x14>
 8082e6e:	6865      	ldr	r5, [r4, #4]
 8082e70:	4295      	cmp	r5, r2
 8082e72:	d111      	bne.n	8082e98 <mbedtls_cipher_setkey+0x38>
    ctx->operation = operation;

    /*
     * For CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 8082e74:	2b01      	cmp	r3, #1
        (int) ctx->cipher_info->key_bitlen != key_bitlen )
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    ctx->key_bitlen = key_bitlen;
 8082e76:	6042      	str	r2, [r0, #4]
    ctx->operation = operation;
 8082e78:	7203      	strb	r3, [r0, #8]

    /*
     * For CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 8082e7a:	d004      	beq.n	8082e86 <mbedtls_cipher_setkey+0x26>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 8082e7c:	7865      	ldrb	r5, [r4, #1]
    ctx->operation = operation;

    /*
     * For CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 8082e7e:	2d03      	cmp	r5, #3
 8082e80:	d001      	beq.n	8082e86 <mbedtls_cipher_setkey+0x26>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 8082e82:	2d05      	cmp	r5, #5
 8082e84:	d102      	bne.n	8082e8c <mbedtls_cipher_setkey+0x2c>
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode )
    {
        return ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 8082e86:	69a3      	ldr	r3, [r4, #24]
                ctx->key_bitlen );
 8082e88:	68db      	ldr	r3, [r3, #12]
 8082e8a:	e002      	b.n	8082e92 <mbedtls_cipher_setkey+0x32>
    }

    if( MBEDTLS_DECRYPT == operation )
 8082e8c:	b923      	cbnz	r3, 8082e98 <mbedtls_cipher_setkey+0x38>
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 8082e8e:	69a3      	ldr	r3, [r4, #24]
                ctx->key_bitlen );
 8082e90:	691b      	ldr	r3, [r3, #16]
 8082e92:	6bc0      	ldr	r0, [r0, #60]	; 0x3c

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
}
 8082e94:	bc30      	pop	{r4, r5}
                ctx->key_bitlen );
    }

    if( MBEDTLS_DECRYPT == operation )
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
                ctx->key_bitlen );
 8082e96:	4718      	bx	r3

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
}
 8082e98:	4801      	ldr	r0, [pc, #4]	; (8082ea0 <mbedtls_cipher_setkey+0x40>)
 8082e9a:	bc30      	pop	{r4, r5}
 8082e9c:	4770      	bx	lr
 8082e9e:	bf00      	nop
 8082ea0:	ffff9f00 	.word	0xffff9f00

08082ea4 <mbedtls_cipher_set_iv>:

int mbedtls_cipher_set_iv( mbedtls_cipher_context_t *ctx,
                   const unsigned char *iv, size_t iv_len )
{
 8082ea4:	b538      	push	{r3, r4, r5, lr}
    size_t actual_iv_size;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == iv )
 8082ea6:	4604      	mov	r4, r0
 8082ea8:	b1b0      	cbz	r0, 8082ed8 <mbedtls_cipher_set_iv+0x34>
 8082eaa:	6803      	ldr	r3, [r0, #0]
 8082eac:	b1a3      	cbz	r3, 8082ed8 <mbedtls_cipher_set_iv+0x34>
 8082eae:	b199      	cbz	r1, 8082ed8 <mbedtls_cipher_set_iv+0x34>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    /* avoid buffer overflow in ctx->iv */
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
 8082eb0:	2a10      	cmp	r2, #16
 8082eb2:	d80f      	bhi.n	8082ed4 <mbedtls_cipher_set_iv+0x30>
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_IV_LEN ) != 0 )
 8082eb4:	6918      	ldr	r0, [r3, #16]
 8082eb6:	07c0      	lsls	r0, r0, #31
 8082eb8:	d403      	bmi.n	8082ec2 <mbedtls_cipher_set_iv+0x1e>
        actual_iv_size = iv_len;
    else
    {
        actual_iv_size = ctx->cipher_info->iv_size;
 8082eba:	68dd      	ldr	r5, [r3, #12]

        /* avoid reading past the end of input buffer */
        if( actual_iv_size > iv_len )
 8082ebc:	42aa      	cmp	r2, r5
 8082ebe:	d201      	bcs.n	8082ec4 <mbedtls_cipher_set_iv+0x20>
 8082ec0:	e00a      	b.n	8082ed8 <mbedtls_cipher_set_iv+0x34>
 8082ec2:	4615      	mov	r5, r2
            return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    memcpy( ctx->iv, iv, actual_iv_size );
 8082ec4:	462a      	mov	r2, r5
 8082ec6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8082eca:	f00f fa3e 	bl	809234a <memcpy>
    ctx->iv_size = actual_iv_size;
 8082ece:	63a5      	str	r5, [r4, #56]	; 0x38

    return( 0 );
 8082ed0:	2000      	movs	r0, #0
 8082ed2:	bd38      	pop	{r3, r4, r5, pc}
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == iv )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    /* avoid buffer overflow in ctx->iv */
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8082ed4:	4801      	ldr	r0, [pc, #4]	; (8082edc <mbedtls_cipher_set_iv+0x38>)
 8082ed6:	bd38      	pop	{r3, r4, r5, pc}
                   const unsigned char *iv, size_t iv_len )
{
    size_t actual_iv_size;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == iv )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8082ed8:	4801      	ldr	r0, [pc, #4]	; (8082ee0 <mbedtls_cipher_set_iv+0x3c>)

    memcpy( ctx->iv, iv, actual_iv_size );
    ctx->iv_size = actual_iv_size;

    return( 0 );
}
 8082eda:	bd38      	pop	{r3, r4, r5, pc}
 8082edc:	ffff9f80 	.word	0xffff9f80
 8082ee0:	ffff9f00 	.word	0xffff9f00

08082ee4 <mbedtls_cipher_reset>:

int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
 8082ee4:	b128      	cbz	r0, 8082ef2 <mbedtls_cipher_reset+0xe>
 8082ee6:	6803      	ldr	r3, [r0, #0]
 8082ee8:	b11b      	cbz	r3, 8082ef2 <mbedtls_cipher_reset+0xe>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    ctx->unprocessed_len = 0;
 8082eea:	2300      	movs	r3, #0
 8082eec:	6243      	str	r3, [r0, #36]	; 0x24

    return( 0 );
 8082eee:	4618      	mov	r0, r3
 8082ef0:	4770      	bx	lr
}

int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8082ef2:	4801      	ldr	r0, [pc, #4]	; (8082ef8 <mbedtls_cipher_reset+0x14>)

    ctx->unprocessed_len = 0;

    return( 0 );
}
 8082ef4:	4770      	bx	lr
 8082ef6:	bf00      	nop
 8082ef8:	ffff9f00 	.word	0xffff9f00

08082efc <mbedtls_cipher_update>:
}
#endif /* MBEDTLS_GCM_C */

int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen )
{
 8082efc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8082f00:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8082f04:	460f      	mov	r7, r1
 8082f06:	4615      	mov	r5, r2
 8082f08:	4699      	mov	r9, r3
    int ret;
    size_t block_size = 0;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 8082f0a:	4604      	mov	r4, r0
 8082f0c:	b908      	cbnz	r0, 8082f12 <mbedtls_cipher_update+0x16>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8082f0e:	485c      	ldr	r0, [pc, #368]	; (8083080 <mbedtls_cipher_update+0x184>)
 8082f10:	e0b2      	b.n	8083078 <mbedtls_cipher_update+0x17c>
                   size_t ilen, unsigned char *output, size_t *olen )
{
    int ret;
    size_t block_size = 0;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 8082f12:	6803      	ldr	r3, [r0, #0]
 8082f14:	2b00      	cmp	r3, #0
 8082f16:	d0fa      	beq.n	8082f0e <mbedtls_cipher_update+0x12>
 8082f18:	f1b8 0f00 	cmp.w	r8, #0
 8082f1c:	d0f7      	beq.n	8082f0e <mbedtls_cipher_update+0x12>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    *olen = 0;
 8082f1e:	2300      	movs	r3, #0
 8082f20:	f8c8 3000 	str.w	r3, [r8]
    block_size = mbedtls_cipher_get_block_size( ctx );
 8082f24:	f7ff fe86 	bl	8082c34 <mbedtls_cipher_get_block_size>

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 8082f28:	6823      	ldr	r3, [r4, #0]
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    *olen = 0;
    block_size = mbedtls_cipher_get_block_size( ctx );
 8082f2a:	4606      	mov	r6, r0

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 8082f2c:	785b      	ldrb	r3, [r3, #1]
 8082f2e:	2b01      	cmp	r3, #1
 8082f30:	d110      	bne.n	8082f54 <mbedtls_cipher_update+0x58>
    {
        if( ilen != block_size )
 8082f32:	4290      	cmp	r0, r2
 8082f34:	d17d      	bne.n	8083032 <mbedtls_cipher_update+0x136>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;
 8082f36:	f8c8 0000 	str.w	r0, [r8]

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 8082f3a:	6823      	ldr	r3, [r4, #0]
 8082f3c:	460a      	mov	r2, r1
 8082f3e:	699b      	ldr	r3, [r3, #24]
 8082f40:	f994 1008 	ldrsb.w	r1, [r4, #8]
 8082f44:	685d      	ldr	r5, [r3, #4]
 8082f46:	464b      	mov	r3, r9
 8082f48:	46ac      	mov	ip, r5
 8082f4a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 8082f4c:	b003      	add	sp, #12
 8082f4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if( ilen != block_size )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 8082f52:	4760      	bx	ip

        return( 0 );
    }

#if defined(MBEDTLS_GCM_C)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
 8082f54:	2b06      	cmp	r3, #6
 8082f56:	d10a      	bne.n	8082f6e <mbedtls_cipher_update+0x72>
    {
        *olen = ilen;
 8082f58:	f8c8 2000 	str.w	r2, [r8]
        return mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
                           output );
 8082f5c:	464b      	mov	r3, r9
 8082f5e:	460a      	mov	r2, r1
 8082f60:	4629      	mov	r1, r5
 8082f62:	6be0      	ldr	r0, [r4, #60]	; 0x3c
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 8082f64:	b003      	add	sp, #12
 8082f66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(MBEDTLS_GCM_C)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
    {
        *olen = ilen;
        return mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
                           output );
 8082f6a:	f004 b9bb 	b.w	80872e4 <mbedtls_gcm_update>
    }
#endif

    if ( 0 == block_size )
 8082f6e:	2800      	cmp	r0, #0
 8082f70:	d061      	beq.n	8083036 <mbedtls_cipher_update+0x13a>
    {
        return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;
    }

    if( input == output &&
 8082f72:	4549      	cmp	r1, r9
 8082f74:	d108      	bne.n	8082f88 <mbedtls_cipher_update+0x8c>
 8082f76:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8082f78:	2a00      	cmp	r2, #0
 8082f7a:	d1c8      	bne.n	8082f0e <mbedtls_cipher_update+0x12>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 8082f7c:	fbb5 f2f0 	udiv	r2, r5, r0
 8082f80:	fb00 5212 	mls	r2, r0, r2, r5
 8082f84:	2a00      	cmp	r2, #0
 8082f86:	d1c2      	bne.n	8082f0e <mbedtls_cipher_update+0x12>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_CBC )
 8082f88:	2b02      	cmp	r3, #2
 8082f8a:	d156      	bne.n	808303a <mbedtls_cipher_update+0x13e>
        size_t copy_len = 0;

        /*
         * If there is not enough data for a full block, cache it.
         */
        if( ( ctx->operation == MBEDTLS_DECRYPT && NULL != ctx->add_padding &&
 8082f8c:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8082f90:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8082f92:	b92b      	cbnz	r3, 8082fa0 <mbedtls_cipher_update+0xa4>
 8082f94:	68e3      	ldr	r3, [r4, #12]
 8082f96:	b12b      	cbz	r3, 8082fa4 <mbedtls_cipher_update+0xa8>
 8082f98:	1a33      	subs	r3, r6, r0
 8082f9a:	429d      	cmp	r5, r3
 8082f9c:	d80f      	bhi.n	8082fbe <mbedtls_cipher_update+0xc2>
 8082f9e:	e004      	b.n	8082faa <mbedtls_cipher_update+0xae>
                ilen <= block_size - ctx->unprocessed_len ) ||
            ( ctx->operation == MBEDTLS_DECRYPT && NULL == ctx->add_padding &&
                ilen < block_size - ctx->unprocessed_len ) ||
 8082fa0:	2b01      	cmp	r3, #1
 8082fa2:	d10c      	bne.n	8082fbe <mbedtls_cipher_update+0xc2>
             ( ctx->operation == MBEDTLS_ENCRYPT &&
 8082fa4:	1a33      	subs	r3, r6, r0
 8082fa6:	429d      	cmp	r5, r3
 8082fa8:	d209      	bcs.n	8082fbe <mbedtls_cipher_update+0xc2>
                ilen < block_size - ctx->unprocessed_len ) )
        {
            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
                    ilen );
 8082faa:	4420      	add	r0, r4
 8082fac:	462a      	mov	r2, r5
 8082fae:	4639      	mov	r1, r7
 8082fb0:	3014      	adds	r0, #20
 8082fb2:	f00f f9ca 	bl	809234a <memcpy>

            ctx->unprocessed_len += ilen;
 8082fb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8082fb8:	441d      	add	r5, r3
 8082fba:	6265      	str	r5, [r4, #36]	; 0x24
 8082fbc:	e037      	b.n	808302e <mbedtls_cipher_update+0x132>
        }

        /*
         * Process cached data first
         */
        if( 0 != ctx->unprocessed_len )
 8082fbe:	b310      	cbz	r0, 8083006 <mbedtls_cipher_update+0x10a>
        {
            copy_len = block_size - ctx->unprocessed_len;
 8082fc0:	ebc0 0a06 	rsb	sl, r0, r6

            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
                    copy_len );
 8082fc4:	4420      	add	r0, r4
 8082fc6:	4652      	mov	r2, sl
 8082fc8:	4639      	mov	r1, r7
 8082fca:	3014      	adds	r0, #20
 8082fcc:	f00f f9bd 	bl	809234a <memcpy>

            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8082fd0:	4623      	mov	r3, r4
 8082fd2:	f853 2b14 	ldr.w	r2, [r3], #20
 8082fd6:	f994 1008 	ldrsb.w	r1, [r4, #8]
 8082fda:	6992      	ldr	r2, [r2, #24]
 8082fdc:	e88d 0208 	stmia.w	sp, {r3, r9}
 8082fe0:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8082fe4:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8082fe8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8082fea:	4632      	mov	r2, r6
 8082fec:	47d8      	blx	fp
 8082fee:	2800      	cmp	r0, #0
 8082ff0:	d142      	bne.n	8083078 <mbedtls_cipher_update+0x17c>
                    ctx->unprocessed_data, output ) ) )
            {
                return( ret );
            }

            *olen += block_size;
 8082ff2:	f8d8 3000 	ldr.w	r3, [r8]
            output += block_size;
 8082ff6:	44b1      	add	r9, r6
                    ctx->unprocessed_data, output ) ) )
            {
                return( ret );
            }

            *olen += block_size;
 8082ff8:	4433      	add	r3, r6
 8082ffa:	f8c8 3000 	str.w	r3, [r8]
            output += block_size;
            ctx->unprocessed_len = 0;

            input += copy_len;
 8082ffe:	4457      	add	r7, sl
                return( ret );
            }

            *olen += block_size;
            output += block_size;
            ctx->unprocessed_len = 0;
 8083000:	6260      	str	r0, [r4, #36]	; 0x24

            input += copy_len;
            ilen -= copy_len;
 8083002:	ebca 0505 	rsb	r5, sl, r5
        }

        /*
         * Cache final, incomplete block
         */
        if( 0 != ilen )
 8083006:	b195      	cbz	r5, 808302e <mbedtls_cipher_update+0x132>

            /* Encryption: only cache partial blocks
             * Decryption w/ padding: always keep at least one whole block
             * Decryption w/o padding: only cache partial blocks
             */
            copy_len = ilen % block_size;
 8083008:	fbb5 faf6 	udiv	sl, r5, r6
 808300c:	fb06 5a1a 	mls	sl, r6, sl, r5
            if( copy_len == 0 &&
 8083010:	f1ba 0f00 	cmp.w	sl, #0
 8083014:	d013      	beq.n	808303e <mbedtls_cipher_update+0x142>
                NULL != ctx->add_padding)
            {
                copy_len = block_size;
            }

            memcpy( ctx->unprocessed_data, &( input[ilen - copy_len] ),
 8083016:	ebca 0505 	rsb	r5, sl, r5
                    copy_len );
 808301a:	4652      	mov	r2, sl
 808301c:	1979      	adds	r1, r7, r5
 808301e:	f104 0014 	add.w	r0, r4, #20
 8083022:	f00f f992 	bl	809234a <memcpy>

            ctx->unprocessed_len += copy_len;
 8083026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8083028:	4453      	add	r3, sl
 808302a:	6263      	str	r3, [r4, #36]	; 0x24
        }

        /*
         * Process remaining full blocks
         */
        if( ilen )
 808302c:	b995      	cbnz	r5, 8083054 <mbedtls_cipher_update+0x158>
            }

            *olen += ilen;
        }

        return( 0 );
 808302e:	2000      	movs	r0, #0
 8083030:	e022      	b.n	8083078 <mbedtls_cipher_update+0x17c>
    block_size = mbedtls_cipher_get_block_size( ctx );

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
    {
        if( ilen != block_size )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 8083032:	4814      	ldr	r0, [pc, #80]	; (8083084 <mbedtls_cipher_update+0x188>)
 8083034:	e020      	b.n	8083078 <mbedtls_cipher_update+0x17c>
    }
#endif

    if ( 0 == block_size )
    {
        return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;
 8083036:	4814      	ldr	r0, [pc, #80]	; (8083088 <mbedtls_cipher_update+0x18c>)
 8083038:	e01e      	b.n	8083078 <mbedtls_cipher_update+0x17c>

        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 808303a:	4814      	ldr	r0, [pc, #80]	; (808308c <mbedtls_cipher_update+0x190>)
 808303c:	e01c      	b.n	8083078 <mbedtls_cipher_update+0x17c>
            /* Encryption: only cache partial blocks
             * Decryption w/ padding: always keep at least one whole block
             * Decryption w/o padding: only cache partial blocks
             */
            copy_len = ilen % block_size;
            if( copy_len == 0 &&
 808303e:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8083042:	2b00      	cmp	r3, #0
 8083044:	d1e7      	bne.n	8083016 <mbedtls_cipher_update+0x11a>
                ctx->operation == MBEDTLS_DECRYPT &&
 8083046:	68e3      	ldr	r3, [r4, #12]
 8083048:	2b00      	cmp	r3, #0
 808304a:	bf0c      	ite	eq
 808304c:	f04f 0a00 	moveq.w	sl, #0
 8083050:	46b2      	movne	sl, r6
 8083052:	e7e0      	b.n	8083016 <mbedtls_cipher_update+0x11a>
        /*
         * Process remaining full blocks
         */
        if( ilen )
        {
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8083054:	6823      	ldr	r3, [r4, #0]
 8083056:	f994 1008 	ldrsb.w	r1, [r4, #8]
 808305a:	699b      	ldr	r3, [r3, #24]
 808305c:	e88d 0280 	stmia.w	sp, {r7, r9}
 8083060:	462a      	mov	r2, r5
 8083062:	689e      	ldr	r6, [r3, #8]
 8083064:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8083066:	f104 0328 	add.w	r3, r4, #40	; 0x28
 808306a:	47b0      	blx	r6
 808306c:	b920      	cbnz	r0, 8083078 <mbedtls_cipher_update+0x17c>
                    ctx->operation, ilen, ctx->iv, input, output ) ) )
            {
                return( ret );
            }

            *olen += ilen;
 808306e:	f8d8 3000 	ldr.w	r3, [r8]
 8083072:	441d      	add	r5, r3
 8083074:	f8c8 5000 	str.w	r5, [r8]
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 8083078:	b003      	add	sp, #12
 808307a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808307e:	bf00      	nop
 8083080:	ffff9f00 	.word	0xffff9f00
 8083084:	ffff9d80 	.word	0xffff9d80
 8083088:	ffff9c80 	.word	0xffff9c80
 808308c:	ffff9f80 	.word	0xffff9f80

08083090 <mbedtls_cipher_finish>:
}
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

int mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,
                   unsigned char *output, size_t *olen )
{
 8083090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8083092:	460e      	mov	r6, r1
 8083094:	4615      	mov	r5, r2
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 8083096:	4604      	mov	r4, r0
 8083098:	2800      	cmp	r0, #0
 808309a:	d052      	beq.n	8083142 <mbedtls_cipher_finish+0xb2>
 808309c:	6803      	ldr	r3, [r0, #0]
 808309e:	2b00      	cmp	r3, #0
 80830a0:	d04f      	beq.n	8083142 <mbedtls_cipher_finish+0xb2>
 80830a2:	2a00      	cmp	r2, #0
 80830a4:	d04d      	beq.n	8083142 <mbedtls_cipher_finish+0xb2>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *olen = 0;
 80830a6:	2300      	movs	r3, #0
 80830a8:	6013      	str	r3, [r2, #0]

    if( MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 80830aa:	6807      	ldr	r7, [r0, #0]
 80830ac:	787a      	ldrb	r2, [r7, #1]
 80830ae:	2a03      	cmp	r2, #3
 80830b0:	d04d      	beq.n	808314e <mbedtls_cipher_finish+0xbe>
 80830b2:	1f51      	subs	r1, r2, #5
 80830b4:	2902      	cmp	r1, #2
 80830b6:	d94a      	bls.n	808314e <mbedtls_cipher_finish+0xbe>
        MBEDTLS_MODE_STREAM == ctx->cipher_info->mode )
    {
        return( 0 );
    }

    if( MBEDTLS_MODE_ECB == ctx->cipher_info->mode )
 80830b8:	2a01      	cmp	r2, #1
 80830ba:	d101      	bne.n	80830c0 <mbedtls_cipher_finish+0x30>
    {
        if( ctx->unprocessed_len != 0 )
 80830bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80830be:	e016      	b.n	80830ee <mbedtls_cipher_finish+0x5e>

        return( 0 );
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( MBEDTLS_MODE_CBC == ctx->cipher_info->mode )
 80830c0:	2a02      	cmp	r2, #2
 80830c2:	d140      	bne.n	8083146 <mbedtls_cipher_finish+0xb6>
    {
        int ret = 0;

        if( MBEDTLS_ENCRYPT == ctx->operation )
 80830c4:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80830c8:	2b01      	cmp	r3, #1
 80830ca:	d109      	bne.n	80830e0 <mbedtls_cipher_finish+0x50>
        {
            /* check for 'no padding' mode */
            if( NULL == ctx->add_padding )
 80830cc:	68c3      	ldr	r3, [r0, #12]
 80830ce:	2b00      	cmp	r3, #0
 80830d0:	d0f4      	beq.n	80830bc <mbedtls_cipher_finish+0x2c>
static inline int mbedtls_cipher_get_iv_size( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
        return 0;

    if( ctx->iv_size != 0 )
 80830d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
                    return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

                return( 0 );
            }

            ctx->add_padding( ctx->unprocessed_data, mbedtls_cipher_get_iv_size( ctx ),
 80830d4:	3014      	adds	r0, #20
 80830d6:	b901      	cbnz	r1, 80830da <mbedtls_cipher_finish+0x4a>
        return (int) ctx->iv_size;

    return (int) ctx->cipher_info->iv_size;
 80830d8:	68f9      	ldr	r1, [r7, #12]
                    ctx->unprocessed_len );
 80830da:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80830dc:	4798      	blx	r3
 80830de:	e00b      	b.n	80830f8 <mbedtls_cipher_finish+0x68>
        }
        else if( mbedtls_cipher_get_block_size( ctx ) != ctx->unprocessed_len )
 80830e0:	f7ff fda8 	bl	8082c34 <mbedtls_cipher_get_block_size>
 80830e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80830e6:	4298      	cmp	r0, r3
 80830e8:	d006      	beq.n	80830f8 <mbedtls_cipher_finish+0x68>
        {
            /*
             * For decrypt operations, expect a full block,
             * or an empty block if no padding
             */
            if( NULL == ctx->add_padding && 0 == ctx->unprocessed_len )
 80830ea:	68e2      	ldr	r2, [r4, #12]
 80830ec:	bb6a      	cbnz	r2, 808314a <mbedtls_cipher_finish+0xba>
    if( MBEDTLS_MODE_ECB == ctx->cipher_info->mode )
    {
        if( ctx->unprocessed_len != 0 )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        return( 0 );
 80830ee:	2b00      	cmp	r3, #0
 80830f0:	4818      	ldr	r0, [pc, #96]	; (8083154 <mbedtls_cipher_finish+0xc4>)
 80830f2:	bf08      	it	eq
 80830f4:	2000      	moveq	r0, #0
 80830f6:	e02b      	b.n	8083150 <mbedtls_cipher_finish+0xc0>

            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
        }

        /* cipher block */
        if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 80830f8:	4620      	mov	r0, r4
 80830fa:	f7ff fd9b 	bl	8082c34 <mbedtls_cipher_get_block_size>
 80830fe:	4623      	mov	r3, r4
 8083100:	f853 2b14 	ldr.w	r2, [r3], #20
 8083104:	f994 1008 	ldrsb.w	r1, [r4, #8]
 8083108:	6992      	ldr	r2, [r2, #24]
 808310a:	e88d 0048 	stmia.w	sp, {r3, r6}
 808310e:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8083112:	6897      	ldr	r7, [r2, #8]
 8083114:	4602      	mov	r2, r0
 8083116:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8083118:	47b8      	blx	r7
 808311a:	4603      	mov	r3, r0
 808311c:	b9b8      	cbnz	r0, 808314e <mbedtls_cipher_finish+0xbe>
        {
            return( ret );
        }

        /* Set output size for decryption */
        if( MBEDTLS_DECRYPT == ctx->operation )
 808311e:	f994 2008 	ldrsb.w	r2, [r4, #8]
            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 8083122:	4620      	mov	r0, r4
        {
            return( ret );
        }

        /* Set output size for decryption */
        if( MBEDTLS_DECRYPT == ctx->operation )
 8083124:	b94a      	cbnz	r2, 808313a <mbedtls_cipher_finish+0xaa>
            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 8083126:	f7ff fd85 	bl	8082c34 <mbedtls_cipher_get_block_size>
                                     olen );
 808312a:	462a      	mov	r2, r5
 808312c:	4601      	mov	r1, r0
 808312e:	4630      	mov	r0, r6
 8083130:	6923      	ldr	r3, [r4, #16]
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 8083132:	b003      	add	sp, #12
 8083134:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        }

        /* Set output size for decryption */
        if( MBEDTLS_DECRYPT == ctx->operation )
            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
                                     olen );
 8083138:	4718      	bx	r3

        /* Set output size for encryption */
        *olen = mbedtls_cipher_get_block_size( ctx );
 808313a:	f7ff fd7b 	bl	8082c34 <mbedtls_cipher_get_block_size>
 808313e:	6028      	str	r0, [r5, #0]
 8083140:	e005      	b.n	808314e <mbedtls_cipher_finish+0xbe>

int mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,
                   unsigned char *output, size_t *olen )
{
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8083142:	4805      	ldr	r0, [pc, #20]	; (8083158 <mbedtls_cipher_finish+0xc8>)
 8083144:	e004      	b.n	8083150 <mbedtls_cipher_finish+0xc0>
    }
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8083146:	4805      	ldr	r0, [pc, #20]	; (808315c <mbedtls_cipher_finish+0xcc>)
 8083148:	e002      	b.n	8083150 <mbedtls_cipher_finish+0xc0>
             * or an empty block if no padding
             */
            if( NULL == ctx->add_padding && 0 == ctx->unprocessed_len )
                return( 0 );

            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 808314a:	4802      	ldr	r0, [pc, #8]	; (8083154 <mbedtls_cipher_finish+0xc4>)
 808314c:	e000      	b.n	8083150 <mbedtls_cipher_finish+0xc0>
        }

        /* cipher block */
        if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 808314e:	4618      	mov	r0, r3
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 8083150:	b003      	add	sp, #12
 8083152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083154:	ffff9d80 	.word	0xffff9d80
 8083158:	ffff9f00 	.word	0xffff9f00
 808315c:	ffff9f80 	.word	0xffff9f80

08083160 <mbedtls_cipher_set_padding_mode>:

#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx, mbedtls_cipher_padding_t mode )
{
    if( NULL == ctx ||
 8083160:	b308      	cbz	r0, 80831a6 <mbedtls_cipher_set_padding_mode+0x46>
        MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
 8083162:	6803      	ldr	r3, [r0, #0]
}

#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx, mbedtls_cipher_padding_t mode )
{
    if( NULL == ctx ||
 8083164:	785b      	ldrb	r3, [r3, #1]
 8083166:	2b02      	cmp	r3, #2
 8083168:	d11d      	bne.n	80831a6 <mbedtls_cipher_set_padding_mode+0x46>
        MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    switch( mode )
 808316a:	2904      	cmp	r1, #4
 808316c:	d81d      	bhi.n	80831aa <mbedtls_cipher_set_padding_mode+0x4a>
 808316e:	e8df f001 	tbb	[pc, r1]
 8083172:	0703      	.short	0x0703
 8083174:	110d      	.short	0x110d
 8083176:	15          	.byte	0x15
 8083177:	00          	.byte	0x00
    {
#if defined(MBEDTLS_CIPHER_PADDING_PKCS7)
    case MBEDTLS_PADDING_PKCS7:
        ctx->add_padding = add_pkcs_padding;
 8083178:	4b0d      	ldr	r3, [pc, #52]	; (80831b0 <mbedtls_cipher_set_padding_mode+0x50>)
 808317a:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_pkcs_padding;
 808317c:	4b0d      	ldr	r3, [pc, #52]	; (80831b4 <mbedtls_cipher_set_padding_mode+0x54>)
 808317e:	e002      	b.n	8083186 <mbedtls_cipher_set_padding_mode+0x26>
        break;
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS)
    case MBEDTLS_PADDING_ONE_AND_ZEROS:
        ctx->add_padding = add_one_and_zeros_padding;
 8083180:	4b0d      	ldr	r3, [pc, #52]	; (80831b8 <mbedtls_cipher_set_padding_mode+0x58>)
 8083182:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_one_and_zeros_padding;
 8083184:	4b0d      	ldr	r3, [pc, #52]	; (80831bc <mbedtls_cipher_set_padding_mode+0x5c>)
 8083186:	6103      	str	r3, [r0, #16]

    default:
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 8083188:	2000      	movs	r0, #0
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS)
    case MBEDTLS_PADDING_ONE_AND_ZEROS:
        ctx->add_padding = add_one_and_zeros_padding;
        ctx->get_padding = get_one_and_zeros_padding;
        break;
 808318a:	4770      	bx	lr
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN)
    case MBEDTLS_PADDING_ZEROS_AND_LEN:
        ctx->add_padding = add_zeros_and_len_padding;
 808318c:	4b0c      	ldr	r3, [pc, #48]	; (80831c0 <mbedtls_cipher_set_padding_mode+0x60>)
 808318e:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_zeros_and_len_padding;
 8083190:	4b0c      	ldr	r3, [pc, #48]	; (80831c4 <mbedtls_cipher_set_padding_mode+0x64>)
 8083192:	e7f8      	b.n	8083186 <mbedtls_cipher_set_padding_mode+0x26>
        break;
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ZEROS)
    case MBEDTLS_PADDING_ZEROS:
        ctx->add_padding = add_zeros_padding;
 8083194:	4b0c      	ldr	r3, [pc, #48]	; (80831c8 <mbedtls_cipher_set_padding_mode+0x68>)
 8083196:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_zeros_padding;
 8083198:	4b0c      	ldr	r3, [pc, #48]	; (80831cc <mbedtls_cipher_set_padding_mode+0x6c>)
 808319a:	e7f4      	b.n	8083186 <mbedtls_cipher_set_padding_mode+0x26>
        break;
#endif
    case MBEDTLS_PADDING_NONE:
        ctx->add_padding = NULL;
        ctx->get_padding = get_no_padding;
 808319c:	4a0c      	ldr	r2, [pc, #48]	; (80831d0 <mbedtls_cipher_set_padding_mode+0x70>)
        ctx->add_padding = add_zeros_padding;
        ctx->get_padding = get_zeros_padding;
        break;
#endif
    case MBEDTLS_PADDING_NONE:
        ctx->add_padding = NULL;
 808319e:	2300      	movs	r3, #0
 80831a0:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_no_padding;
 80831a2:	6102      	str	r2, [r0, #16]
 80831a4:	e7f0      	b.n	8083188 <mbedtls_cipher_set_padding_mode+0x28>
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx, mbedtls_cipher_padding_t mode )
{
    if( NULL == ctx ||
        MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80831a6:	480b      	ldr	r0, [pc, #44]	; (80831d4 <mbedtls_cipher_set_padding_mode+0x74>)
 80831a8:	4770      	bx	lr
        ctx->add_padding = NULL;
        ctx->get_padding = get_no_padding;
        break;

    default:
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 80831aa:	480b      	ldr	r0, [pc, #44]	; (80831d8 <mbedtls_cipher_set_padding_mode+0x78>)
    }

    return( 0 );
}
 80831ac:	4770      	bx	lr
 80831ae:	bf00      	nop
 80831b0:	08082c3f 	.word	0x08082c3f
 80831b4:	08082c59 	.word	0x08082c59
 80831b8:	08082cad 	.word	0x08082cad
 80831bc:	08082d65 	.word	0x08082d65
 80831c0:	08082cc9 	.word	0x08082cc9
 80831c4:	08082ced 	.word	0x08082ced
 80831c8:	08082d3d 	.word	0x08082d3d
 80831cc:	08082db5 	.word	0x08082db5
 80831d0:	08082d51 	.word	0x08082d51
 80831d4:	ffff9f00 	.word	0xffff9f00
 80831d8:	ffff9f80 	.word	0xffff9f80

080831dc <mbedtls_cipher_setup>:

    mbedtls_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
}

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
 80831dc:	b538      	push	{r3, r4, r5, lr}
 80831de:	4604      	mov	r4, r0
    if( NULL == cipher_info || NULL == ctx )
 80831e0:	460d      	mov	r5, r1
 80831e2:	b181      	cbz	r1, 8083206 <mbedtls_cipher_setup+0x2a>
 80831e4:	b178      	cbz	r0, 8083206 <mbedtls_cipher_setup+0x2a>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 80831e6:	2240      	movs	r2, #64	; 0x40
 80831e8:	2100      	movs	r1, #0
 80831ea:	f00f f8d4 	bl	8092396 <memset>

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
 80831ee:	69ab      	ldr	r3, [r5, #24]
 80831f0:	695b      	ldr	r3, [r3, #20]
 80831f2:	4798      	blx	r3
 80831f4:	63e0      	str	r0, [r4, #60]	; 0x3c
 80831f6:	b140      	cbz	r0, 808320a <mbedtls_cipher_setup+0x2e>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );

    ctx->cipher_info = cipher_info;
 80831f8:	6025      	str	r5, [r4, #0]
#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)
    /*
     * Ignore possible errors caused by a cipher mode that doesn't use padding
     */
#if defined(MBEDTLS_CIPHER_PADDING_PKCS7)
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_PKCS7 );
 80831fa:	2100      	movs	r1, #0
 80831fc:	4620      	mov	r0, r4
 80831fe:	f7ff ffaf 	bl	8083160 <mbedtls_cipher_set_padding_mode>
#else
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
 8083202:	2000      	movs	r0, #0
 8083204:	bd38      	pop	{r3, r4, r5, pc}
}

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
    if( NULL == cipher_info || NULL == ctx )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8083206:	4802      	ldr	r0, [pc, #8]	; (8083210 <mbedtls_cipher_setup+0x34>)
 8083208:	bd38      	pop	{r3, r4, r5, pc}

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
 808320a:	4802      	ldr	r0, [pc, #8]	; (8083214 <mbedtls_cipher_setup+0x38>)
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
}
 808320c:	bd38      	pop	{r3, r4, r5, pc}
 808320e:	bf00      	nop
 8083210:	ffff9f00 	.word	0xffff9f00
 8083214:	ffff9e80 	.word	0xffff9e80

08083218 <mbedtls_cipher_crypt>:
 */
int mbedtls_cipher_crypt( mbedtls_cipher_context_t *ctx,
                  const unsigned char *iv, size_t iv_len,
                  const unsigned char *input, size_t ilen,
                  unsigned char *output, size_t *olen )
{
 8083218:	b5f0      	push	{r4, r5, r6, r7, lr}
 808321a:	b085      	sub	sp, #20
 808321c:	4605      	mov	r5, r0
 808321e:	461f      	mov	r7, r3
 8083220:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8083222:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    int ret;
    size_t finish_olen;

    if( ( ret = mbedtls_cipher_set_iv( ctx, iv, iv_len ) ) != 0 )
 8083224:	f7ff fe3e 	bl	8082ea4 <mbedtls_cipher_set_iv>
 8083228:	b9b0      	cbnz	r0, 8083258 <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_reset( ctx ) ) != 0 )
 808322a:	4628      	mov	r0, r5
 808322c:	f7ff fe5a 	bl	8082ee4 <mbedtls_cipher_reset>
 8083230:	b990      	cbnz	r0, 8083258 <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_update( ctx, input, ilen, output, olen ) ) != 0 )
 8083232:	9400      	str	r4, [sp, #0]
 8083234:	4633      	mov	r3, r6
 8083236:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8083238:	4639      	mov	r1, r7
 808323a:	4628      	mov	r0, r5
 808323c:	f7ff fe5e 	bl	8082efc <mbedtls_cipher_update>
 8083240:	b950      	cbnz	r0, 8083258 <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_finish( ctx, output + *olen, &finish_olen ) ) != 0 )
 8083242:	6821      	ldr	r1, [r4, #0]
 8083244:	aa03      	add	r2, sp, #12
 8083246:	4431      	add	r1, r6
 8083248:	4628      	mov	r0, r5
 808324a:	f7ff ff21 	bl	8083090 <mbedtls_cipher_finish>
 808324e:	b918      	cbnz	r0, 8083258 <mbedtls_cipher_crypt+0x40>
        return( ret );

    *olen += finish_olen;
 8083250:	6822      	ldr	r2, [r4, #0]
 8083252:	9b03      	ldr	r3, [sp, #12]
 8083254:	4413      	add	r3, r2
 8083256:	6023      	str	r3, [r4, #0]

    return( 0 );
}
 8083258:	b005      	add	sp, #20
 808325a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808325c <mbedtls_cipher_auth_encrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 808325c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8083260:	6807      	ldr	r7, [r0, #0]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 8083262:	4614      	mov	r4, r2
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8083264:	787f      	ldrb	r7, [r7, #1]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 8083266:	9d07      	ldr	r5, [sp, #28]
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8083268:	2f06      	cmp	r7, #6
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 808326a:	9e08      	ldr	r6, [sp, #32]
 808326c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 808326e:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8083272:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8083276:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 808327a:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 808327e:	d112      	bne.n	80832a6 <mbedtls_cipher_auth_encrypt+0x4a>
    {
        *olen = ilen;
 8083280:	f8c9 2000 	str.w	r2, [r9]
        return( mbedtls_gcm_crypt_and_tag( (mbedtls_gcm_context *)ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
                                   iv, iv_len, ad, ad_len, input, output,
                                   tag_len, tag ) );
 8083284:	9308      	str	r3, [sp, #32]
 8083286:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 808328a:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 808328e:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8083292:	960a      	str	r6, [sp, #40]	; 0x28
 8083294:	9509      	str	r5, [sp, #36]	; 0x24
 8083296:	9407      	str	r4, [sp, #28]
 8083298:	460b      	mov	r3, r1
                                     tag, tag_len ) );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 808329a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
    {
        *olen = ilen;
        return( mbedtls_gcm_crypt_and_tag( (mbedtls_gcm_context *)ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
                                   iv, iv_len, ad, ad_len, input, output,
                                   tag_len, tag ) );
 808329e:	2101      	movs	r1, #1
 80832a0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80832a2:	f004 b90a 	b.w	80874ba <mbedtls_gcm_crypt_and_tag>
                                     tag, tag_len ) );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 80832a6:	4801      	ldr	r0, [pc, #4]	; (80832ac <mbedtls_cipher_auth_encrypt+0x50>)
 80832a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80832ac:	ffff9f80 	.word	0xffff9f80

080832b0 <mbedtls_cipher_auth_decrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 80832b0:	b530      	push	{r4, r5, lr}
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80832b2:	6805      	ldr	r5, [r0, #0]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 80832b4:	b087      	sub	sp, #28
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80832b6:	786d      	ldrb	r5, [r5, #1]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 80832b8:	460c      	mov	r4, r1
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80832ba:	2d06      	cmp	r5, #6
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 80832bc:	990c      	ldr	r1, [sp, #48]	; 0x30
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80832be:	d117      	bne.n	80832f0 <mbedtls_cipher_auth_decrypt+0x40>
    {
        int ret;

        *olen = ilen;
 80832c0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80832c2:	6029      	str	r1, [r5, #0]
        ret = mbedtls_gcm_auth_decrypt( (mbedtls_gcm_context *)ctx->cipher_ctx, ilen,
                                iv, iv_len, ad, ad_len,
                                tag, tag_len, input, output );
 80832c4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80832c6:	9505      	str	r5, [sp, #20]
 80832c8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80832ca:	9504      	str	r5, [sp, #16]
 80832cc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80832ce:	9503      	str	r5, [sp, #12]
 80832d0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80832d2:	9502      	str	r5, [sp, #8]
 80832d4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80832d6:	e88d 0028 	stmia.w	sp, {r3, r5}
 80832da:	4613      	mov	r3, r2
 80832dc:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80832de:	4622      	mov	r2, r4
 80832e0:	f004 f910 	bl	8087504 <mbedtls_gcm_auth_decrypt>

        if( ret == MBEDTLS_ERR_GCM_AUTH_FAILED )
            ret = MBEDTLS_ERR_CIPHER_AUTH_FAILED;
 80832e4:	4b04      	ldr	r3, [pc, #16]	; (80832f8 <mbedtls_cipher_auth_decrypt+0x48>)
 80832e6:	f110 0f12 	cmn.w	r0, #18
 80832ea:	bf08      	it	eq
 80832ec:	4618      	moveq	r0, r3
 80832ee:	e000      	b.n	80832f2 <mbedtls_cipher_auth_decrypt+0x42>

        return( ret );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 80832f0:	4802      	ldr	r0, [pc, #8]	; (80832fc <mbedtls_cipher_auth_decrypt+0x4c>)
}
 80832f2:	b007      	add	sp, #28
 80832f4:	bd30      	pop	{r4, r5, pc}
 80832f6:	bf00      	nop
 80832f8:	ffff9d00 	.word	0xffff9d00
 80832fc:	ffff9f80 	.word	0xffff9f80

08083300 <mbedtls_asn1_get_len>:
 * ASN.1 DER decoding routines
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
 8083300:	b530      	push	{r4, r5, lr}
    if( ( end - *p ) < 1 )
 8083302:	6803      	ldr	r3, [r0, #0]
 8083304:	1acd      	subs	r5, r1, r3
 8083306:	2d00      	cmp	r5, #0
 8083308:	dc02      	bgt.n	8083310 <mbedtls_asn1_get_len+0x10>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 808330a:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 808330e:	bd30      	pop	{r4, r5, pc}

    if( ( **p & 0x80 ) == 0 )
 8083310:	781c      	ldrb	r4, [r3, #0]
 8083312:	f014 0f80 	tst.w	r4, #128	; 0x80
 8083316:	d104      	bne.n	8083322 <mbedtls_asn1_get_len+0x22>
        *len = *(*p)++;
 8083318:	1c5c      	adds	r4, r3, #1
 808331a:	6004      	str	r4, [r0, #0]
 808331c:	781b      	ldrb	r3, [r3, #0]
 808331e:	6013      	str	r3, [r2, #0]
 8083320:	e036      	b.n	8083390 <mbedtls_asn1_get_len+0x90>
    else
    {
        switch( **p & 0x7F )
 8083322:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8083326:	3c01      	subs	r4, #1
 8083328:	2c03      	cmp	r4, #3
 808332a:	d838      	bhi.n	808339e <mbedtls_asn1_get_len+0x9e>
 808332c:	e8df f004 	tbb	[pc, r4]
 8083330:	20130902 	.word	0x20130902
        {
        case 1:
            if( ( end - *p ) < 2 )
 8083334:	2d01      	cmp	r5, #1
 8083336:	d0e8      	beq.n	808330a <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = (*p)[1];
 8083338:	785b      	ldrb	r3, [r3, #1]
 808333a:	6013      	str	r3, [r2, #0]
            (*p) += 2;
 808333c:	6803      	ldr	r3, [r0, #0]
 808333e:	3302      	adds	r3, #2
 8083340:	e025      	b.n	808338e <mbedtls_asn1_get_len+0x8e>
            break;

        case 2:
            if( ( end - *p ) < 3 )
 8083342:	2d02      	cmp	r5, #2
 8083344:	dde1      	ble.n	808330a <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 8083346:	785c      	ldrb	r4, [r3, #1]
 8083348:	789b      	ldrb	r3, [r3, #2]
 808334a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 808334e:	6013      	str	r3, [r2, #0]
            (*p) += 3;
 8083350:	6803      	ldr	r3, [r0, #0]
 8083352:	3303      	adds	r3, #3
 8083354:	e01b      	b.n	808338e <mbedtls_asn1_get_len+0x8e>
            break;

        case 3:
            if( ( end - *p ) < 4 )
 8083356:	2d03      	cmp	r5, #3
 8083358:	ddd7      	ble.n	808330a <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = ( (size_t)(*p)[1] << 16 ) |
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 808335a:	789c      	ldrb	r4, [r3, #2]
 808335c:	785d      	ldrb	r5, [r3, #1]
 808335e:	0224      	lsls	r4, r4, #8
 8083360:	78db      	ldrb	r3, [r3, #3]
 8083362:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8083366:	431c      	orrs	r4, r3
 8083368:	6014      	str	r4, [r2, #0]
            (*p) += 4;
 808336a:	6803      	ldr	r3, [r0, #0]
 808336c:	3304      	adds	r3, #4
 808336e:	e00e      	b.n	808338e <mbedtls_asn1_get_len+0x8e>
            break;

        case 4:
            if( ( end - *p ) < 5 )
 8083370:	2d04      	cmp	r5, #4
 8083372:	ddca      	ble.n	808330a <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
 8083374:	789c      	ldrb	r4, [r3, #2]
 8083376:	785d      	ldrb	r5, [r3, #1]
 8083378:	0424      	lsls	r4, r4, #16
 808337a:	ea44 6505 	orr.w	r5, r4, r5, lsl #24
 808337e:	791c      	ldrb	r4, [r3, #4]
 8083380:	78db      	ldrb	r3, [r3, #3]
 8083382:	432c      	orrs	r4, r5
 8083384:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8083388:	6013      	str	r3, [r2, #0]
            (*p) += 5;
 808338a:	6803      	ldr	r3, [r0, #0]
 808338c:	3305      	adds	r3, #5
 808338e:	6003      	str	r3, [r0, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
 8083390:	6803      	ldr	r3, [r0, #0]
 8083392:	1ac9      	subs	r1, r1, r3
 8083394:	6813      	ldr	r3, [r2, #0]
 8083396:	428b      	cmp	r3, r1
 8083398:	d8b7      	bhi.n	808330a <mbedtls_asn1_get_len+0xa>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
 808339a:	2000      	movs	r0, #0
 808339c:	bd30      	pop	{r4, r5, pc}
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
            (*p) += 5;
            break;

        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 808339e:	f06f 0063 	mvn.w	r0, #99	; 0x63

    if( *len > (size_t) ( end - *p ) )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
}
 80833a2:	bd30      	pop	{r4, r5, pc}

080833a4 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
 80833a4:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
 80833a6:	6804      	ldr	r4, [r0, #0]
 80833a8:	1b0e      	subs	r6, r1, r4
 80833aa:	2e00      	cmp	r6, #0
 80833ac:	dd07      	ble.n	80833be <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
 80833ae:	7826      	ldrb	r6, [r4, #0]
 80833b0:	429e      	cmp	r6, r3
 80833b2:	d107      	bne.n	80833c4 <mbedtls_asn1_get_tag+0x20>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 80833b4:	3401      	adds	r4, #1
 80833b6:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
 80833b8:	bc70      	pop	{r4, r5, r6}
    if( **p != tag )
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;

    return( mbedtls_asn1_get_len( p, end, len ) );
 80833ba:	f7ff bfa1 	b.w	8083300 <mbedtls_asn1_get_len>
int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80833be:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 80833c2:	e001      	b.n	80833c8 <mbedtls_asn1_get_tag+0x24>

    if( **p != tag )
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 80833c4:	f06f 0061 	mvn.w	r0, #97	; 0x61

    (*p)++;

    return( mbedtls_asn1_get_len( p, end, len ) );
}
 80833c8:	bc70      	pop	{r4, r5, r6}
 80833ca:	4770      	bx	lr

080833cc <mbedtls_asn1_get_bool>:

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 80833cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 80833ce:	2301      	movs	r3, #1
}

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 80833d0:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 80833d2:	aa01      	add	r2, sp, #4
}

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 80833d4:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 80833d6:	f7ff ffe5 	bl	80833a4 <mbedtls_asn1_get_tag>
 80833da:	b970      	cbnz	r0, 80833fa <mbedtls_asn1_get_bool+0x2e>
        return( ret );

    if( len != 1 )
 80833dc:	9b01      	ldr	r3, [sp, #4]
 80833de:	2b01      	cmp	r3, #1
 80833e0:	d109      	bne.n	80833f6 <mbedtls_asn1_get_bool+0x2a>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = ( **p != 0 ) ? 1 : 0;
 80833e2:	6823      	ldr	r3, [r4, #0]
 80833e4:	781b      	ldrb	r3, [r3, #0]
 80833e6:	3300      	adds	r3, #0
 80833e8:	bf18      	it	ne
 80833ea:	2301      	movne	r3, #1
 80833ec:	602b      	str	r3, [r5, #0]
    (*p)++;
 80833ee:	6823      	ldr	r3, [r4, #0]
 80833f0:	3301      	adds	r3, #1
 80833f2:	6023      	str	r3, [r4, #0]

    return( 0 );
 80833f4:	e001      	b.n	80833fa <mbedtls_asn1_get_bool+0x2e>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
        return( ret );

    if( len != 1 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 80833f6:	f06f 0063 	mvn.w	r0, #99	; 0x63

    *val = ( **p != 0 ) ? 1 : 0;
    (*p)++;

    return( 0 );
}
 80833fa:	b003      	add	sp, #12
 80833fc:	bd30      	pop	{r4, r5, pc}

080833fe <mbedtls_asn1_get_int>:

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 80833fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8083400:	2302      	movs	r3, #2
}

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 8083402:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8083404:	aa01      	add	r2, sp, #4
}

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 8083406:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8083408:	f7ff ffcc 	bl	80833a4 <mbedtls_asn1_get_tag>
 808340c:	b9c8      	cbnz	r0, 8083442 <mbedtls_asn1_get_int+0x44>
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
 808340e:	9b01      	ldr	r3, [sp, #4]
 8083410:	3b01      	subs	r3, #1
 8083412:	2b03      	cmp	r3, #3
 8083414:	d813      	bhi.n	808343e <mbedtls_asn1_get_int+0x40>
 8083416:	6823      	ldr	r3, [r4, #0]
 8083418:	f993 3000 	ldrsb.w	r3, [r3]
 808341c:	2b00      	cmp	r3, #0
 808341e:	db0e      	blt.n	808343e <mbedtls_asn1_get_int+0x40>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;
 8083420:	6028      	str	r0, [r5, #0]

    while( len-- > 0 )
 8083422:	9801      	ldr	r0, [sp, #4]
 8083424:	1e43      	subs	r3, r0, #1
 8083426:	9301      	str	r3, [sp, #4]
 8083428:	b158      	cbz	r0, 8083442 <mbedtls_asn1_get_int+0x44>
    {
        *val = ( *val << 8 ) | **p;
 808342a:	6823      	ldr	r3, [r4, #0]
 808342c:	682a      	ldr	r2, [r5, #0]
 808342e:	781b      	ldrb	r3, [r3, #0]
 8083430:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8083434:	602b      	str	r3, [r5, #0]
        (*p)++;
 8083436:	6823      	ldr	r3, [r4, #0]
 8083438:	3301      	adds	r3, #1
 808343a:	6023      	str	r3, [r4, #0]
    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;

    while( len-- > 0 )
 808343c:	e7f1      	b.n	8083422 <mbedtls_asn1_get_int+0x24>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 808343e:	f06f 0063 	mvn.w	r0, #99	; 0x63
        *val = ( *val << 8 ) | **p;
        (*p)++;
    }

    return( 0 );
}
 8083442:	b003      	add	sp, #12
 8083444:	bd30      	pop	{r4, r5, pc}

08083446 <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
 8083446:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8083448:	2302      	movs	r3, #2

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
 808344a:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 808344c:	aa01      	add	r2, sp, #4

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
 808344e:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8083450:	f7ff ffa8 	bl	80833a4 <mbedtls_asn1_get_tag>
 8083454:	b940      	cbnz	r0, 8083468 <mbedtls_asn1_get_mpi+0x22>
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
 8083456:	9a01      	ldr	r2, [sp, #4]
 8083458:	6821      	ldr	r1, [r4, #0]
 808345a:	4628      	mov	r0, r5
 808345c:	f007 fea7 	bl	808b1ae <mbedtls_mpi_read_binary>

    *p += len;
 8083460:	6822      	ldr	r2, [r4, #0]
 8083462:	9b01      	ldr	r3, [sp, #4]
 8083464:	4413      	add	r3, r2
 8083466:	6023      	str	r3, [r4, #0]

    return( ret );
}
 8083468:	b003      	add	sp, #12
 808346a:	bd30      	pop	{r4, r5, pc}

0808346c <mbedtls_asn1_get_bitstring>:
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
 808346c:	b570      	push	{r4, r5, r6, lr}
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 808346e:	2303      	movs	r3, #3
}
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
 8083470:	4604      	mov	r4, r0
 8083472:	460e      	mov	r6, r1
 8083474:	4615      	mov	r5, r2
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 8083476:	f7ff ff95 	bl	80833a4 <mbedtls_asn1_get_tag>
 808347a:	b9d8      	cbnz	r0, 80834b4 <mbedtls_asn1_get_bitstring+0x48>
        return( ret );

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
 808347c:	6813      	ldr	r3, [r2, #0]
 808347e:	b1a3      	cbz	r3, 80834aa <mbedtls_asn1_get_bitstring+0x3e>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    bs->len -= 1;
 8083480:	3b01      	subs	r3, #1
 8083482:	6013      	str	r3, [r2, #0]

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
 8083484:	6823      	ldr	r3, [r4, #0]
 8083486:	781b      	ldrb	r3, [r3, #0]
    if( bs->unused_bits > 7 )
 8083488:	2b07      	cmp	r3, #7
    if( bs->len < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    bs->len -= 1;

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
 808348a:	7113      	strb	r3, [r2, #4]
    if( bs->unused_bits > 7 )
 808348c:	d810      	bhi.n	80834b0 <mbedtls_asn1_get_bitstring+0x44>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    (*p)++;
 808348e:	6823      	ldr	r3, [r4, #0]
 8083490:	3301      	adds	r3, #1
 8083492:	6023      	str	r3, [r4, #0]

    /* Get actual bitstring */
    bs->p = *p;
 8083494:	6093      	str	r3, [r2, #8]
    *p += bs->len;
 8083496:	6822      	ldr	r2, [r4, #0]
 8083498:	682b      	ldr	r3, [r5, #0]
 808349a:	4413      	add	r3, r2

    if( *p != end )
 808349c:	429e      	cmp	r6, r3
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    (*p)++;

    /* Get actual bitstring */
    bs->p = *p;
    *p += bs->len;
 808349e:	6023      	str	r3, [r4, #0]

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 80834a0:	bf14      	ite	ne
 80834a2:	f06f 0065 	mvnne.w	r0, #101	; 0x65
 80834a6:	2000      	moveq	r0, #0
 80834a8:	bd70      	pop	{r4, r5, r6, pc}
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
        return( ret );

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80834aa:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 80834ae:	bd70      	pop	{r4, r5, r6, pc}
    bs->len -= 1;

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
    if( bs->unused_bits > 7 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 80834b0:	f06f 0063 	mvn.w	r0, #99	; 0x63

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 80834b4:	bd70      	pop	{r4, r5, r6, pc}

080834b6 <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
 80834b6:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 80834b8:	2303      	movs	r3, #3
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
 80834ba:	4604      	mov	r4, r0
 80834bc:	4615      	mov	r5, r2
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 80834be:	f7ff ff71 	bl	80833a4 <mbedtls_asn1_get_tag>
 80834c2:	b958      	cbnz	r0, 80834dc <mbedtls_asn1_get_bitstring_null+0x26>
        return( ret );

    if( (*len)-- < 2 || *(*p)++ != 0 )
 80834c4:	6813      	ldr	r3, [r2, #0]
 80834c6:	1e5a      	subs	r2, r3, #1
 80834c8:	2b01      	cmp	r3, #1
 80834ca:	602a      	str	r2, [r5, #0]
 80834cc:	d904      	bls.n	80834d8 <mbedtls_asn1_get_bitstring_null+0x22>
 80834ce:	6823      	ldr	r3, [r4, #0]
 80834d0:	1c5a      	adds	r2, r3, #1
 80834d2:	6022      	str	r2, [r4, #0]
 80834d4:	7818      	ldrb	r0, [r3, #0]
 80834d6:	b108      	cbz	r0, 80834dc <mbedtls_asn1_get_bitstring_null+0x26>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 80834d8:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
 80834dc:	bd38      	pop	{r3, r4, r5, pc}

080834de <mbedtls_asn1_get_sequence_of>:
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
 80834de:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80834e2:	4615      	mov	r5, r2
 80834e4:	461f      	mov	r7, r3
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80834e6:	aa01      	add	r2, sp, #4
 80834e8:	2330      	movs	r3, #48	; 0x30
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
 80834ea:	4604      	mov	r4, r0
 80834ec:	460e      	mov	r6, r1
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80834ee:	f7ff ff59 	bl	80833a4 <mbedtls_asn1_get_tag>
 80834f2:	bb68      	cbnz	r0, 8083550 <mbedtls_asn1_get_sequence_of+0x72>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( *p + len != end )
 80834f4:	6822      	ldr	r2, [r4, #0]
 80834f6:	9b01      	ldr	r3, [sp, #4]
 80834f8:	4413      	add	r3, r2
 80834fa:	429e      	cmp	r6, r3
 80834fc:	d01d      	beq.n	808353a <mbedtls_asn1_get_sequence_of+0x5c>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80834fe:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8083502:	e025      	b.n	8083550 <mbedtls_asn1_get_sequence_of+0x72>

    while( *p < end )
 8083504:	6823      	ldr	r3, [r4, #0]
 8083506:	429e      	cmp	r6, r3
 8083508:	d91a      	bls.n	8083540 <mbedtls_asn1_get_sequence_of+0x62>
    {
        buf = &(cur->buf);
        buf->tag = **p;
 808350a:	781b      	ldrb	r3, [r3, #0]

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 808350c:	4642      	mov	r2, r8
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    while( *p < end )
    {
        buf = &(cur->buf);
        buf->tag = **p;
 808350e:	602b      	str	r3, [r5, #0]

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 8083510:	4631      	mov	r1, r6
 8083512:	463b      	mov	r3, r7
 8083514:	4620      	mov	r0, r4
 8083516:	f7ff ff45 	bl	80833a4 <mbedtls_asn1_get_tag>
 808351a:	b9c8      	cbnz	r0, 8083550 <mbedtls_asn1_get_sequence_of+0x72>
            return( ret );

        buf->p = *p;
 808351c:	6823      	ldr	r3, [r4, #0]
 808351e:	60ab      	str	r3, [r5, #8]
        *p += buf->len;
 8083520:	6822      	ldr	r2, [r4, #0]
 8083522:	686b      	ldr	r3, [r5, #4]
 8083524:	4413      	add	r3, r2

        /* Allocate and assign next pointer */
        if( *p < end )
 8083526:	429e      	cmp	r6, r3

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
            return( ret );

        buf->p = *p;
        *p += buf->len;
 8083528:	6023      	str	r3, [r4, #0]

        /* Allocate and assign next pointer */
        if( *p < end )
 808352a:	d9eb      	bls.n	8083504 <mbedtls_asn1_get_sequence_of+0x26>
        {
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
 808352c:	2110      	movs	r1, #16
 808352e:	2001      	movs	r0, #1
 8083530:	f00e fee6 	bl	8092300 <calloc>
                                            sizeof( mbedtls_asn1_sequence ) );
 8083534:	60e8      	str	r0, [r5, #12]

            if( cur->next == NULL )
 8083536:	b148      	cbz	r0, 808354c <mbedtls_asn1_get_sequence_of+0x6e>
 8083538:	4605      	mov	r5, r0
    while( *p < end )
    {
        buf = &(cur->buf);
        buf->tag = **p;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 808353a:	f105 0804 	add.w	r8, r5, #4
 808353e:	e7e1      	b.n	8083504 <mbedtls_asn1_get_sequence_of+0x26>
            cur = cur->next;
        }
    }

    /* Set final sequence entry's next pointer to NULL */
    cur->next = NULL;
 8083540:	2000      	movs	r0, #0
 8083542:	60e8      	str	r0, [r5, #12]

    if( *p != end )
 8083544:	6823      	ldr	r3, [r4, #0]
 8083546:	429e      	cmp	r6, r3
 8083548:	d002      	beq.n	8083550 <mbedtls_asn1_get_sequence_of+0x72>
 808354a:	e7d8      	b.n	80834fe <mbedtls_asn1_get_sequence_of+0x20>
        {
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
                                            sizeof( mbedtls_asn1_sequence ) );

            if( cur->next == NULL )
                return( MBEDTLS_ERR_ASN1_ALLOC_FAILED );
 808354c:	f06f 0069 	mvn.w	r0, #105	; 0x69

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 8083550:	b002      	add	sp, #8
 8083552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08083556 <mbedtls_asn1_get_alg>:

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
 8083556:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8083558:	4617      	mov	r7, r2
 808355a:	461d      	mov	r5, r3
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 808355c:	aa01      	add	r2, sp, #4
 808355e:	2330      	movs	r3, #48	; 0x30
}

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
 8083560:	4604      	mov	r4, r0
 8083562:	460e      	mov	r6, r1
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8083564:	f7ff ff1e 	bl	80833a4 <mbedtls_asn1_get_tag>
 8083568:	2800      	cmp	r0, #0
 808356a:	d13a      	bne.n	80835e2 <mbedtls_asn1_get_alg+0x8c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
 808356c:	6823      	ldr	r3, [r4, #0]
 808356e:	1af6      	subs	r6, r6, r3
 8083570:	2e00      	cmp	r6, #0
 8083572:	dd31      	ble.n	80835d8 <mbedtls_asn1_get_alg+0x82>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
 8083574:	463a      	mov	r2, r7
 8083576:	781b      	ldrb	r3, [r3, #0]
    end = *p + len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
 8083578:	4620      	mov	r0, r4
        return( ret );

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
 808357a:	f842 3b04 	str.w	r3, [r2], #4
    end = *p + len;
 808357e:	6826      	ldr	r6, [r4, #0]
 8083580:	9b01      	ldr	r3, [sp, #4]
 8083582:	441e      	add	r6, r3

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
 8083584:	4631      	mov	r1, r6
 8083586:	2306      	movs	r3, #6
 8083588:	f7ff ff0c 	bl	80833a4 <mbedtls_asn1_get_tag>
 808358c:	bb48      	cbnz	r0, 80835e2 <mbedtls_asn1_get_alg+0x8c>
        return( ret );

    alg->p = *p;
 808358e:	6823      	ldr	r3, [r4, #0]
 8083590:	60bb      	str	r3, [r7, #8]
    *p += alg->len;
 8083592:	6822      	ldr	r2, [r4, #0]
 8083594:	687b      	ldr	r3, [r7, #4]
 8083596:	18d1      	adds	r1, r2, r3

    if( *p == end )
 8083598:	428e      	cmp	r6, r1

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( ret );

    alg->p = *p;
    *p += alg->len;
 808359a:	6021      	str	r1, [r4, #0]

    if( *p == end )
 808359c:	d106      	bne.n	80835ac <mbedtls_asn1_get_alg+0x56>
 808359e:	f105 030c 	add.w	r3, r5, #12
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 80835a2:	429d      	cmp	r5, r3
 80835a4:	d016      	beq.n	80835d4 <mbedtls_asn1_get_alg+0x7e>
 80835a6:	7028      	strb	r0, [r5, #0]
 80835a8:	3501      	adds	r5, #1
 80835aa:	e7fa      	b.n	80835a2 <mbedtls_asn1_get_alg+0x4c>
    {
        mbedtls_zeroize( params, sizeof(mbedtls_asn1_buf) );
        return( 0 );
    }

    params->tag = **p;
 80835ac:	5cd3      	ldrb	r3, [r2, r3]
 80835ae:	462a      	mov	r2, r5
 80835b0:	f842 3b04 	str.w	r3, [r2], #4
    (*p)++;
 80835b4:	6823      	ldr	r3, [r4, #0]

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 80835b6:	4631      	mov	r1, r6
        mbedtls_zeroize( params, sizeof(mbedtls_asn1_buf) );
        return( 0 );
    }

    params->tag = **p;
    (*p)++;
 80835b8:	3301      	adds	r3, #1
 80835ba:	6023      	str	r3, [r4, #0]

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 80835bc:	4620      	mov	r0, r4
 80835be:	f7ff fe9f 	bl	8083300 <mbedtls_asn1_get_len>
 80835c2:	b970      	cbnz	r0, 80835e2 <mbedtls_asn1_get_alg+0x8c>
        return( ret );

    params->p = *p;
 80835c4:	6823      	ldr	r3, [r4, #0]
 80835c6:	60ab      	str	r3, [r5, #8]
    *p += params->len;
 80835c8:	6822      	ldr	r2, [r4, #0]
 80835ca:	686b      	ldr	r3, [r5, #4]
 80835cc:	4413      	add	r3, r2

    if( *p != end )
 80835ce:	429e      	cmp	r6, r3

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
        return( ret );

    params->p = *p;
    *p += params->len;
 80835d0:	6023      	str	r3, [r4, #0]

    if( *p != end )
 80835d2:	d104      	bne.n	80835de <mbedtls_asn1_get_alg+0x88>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 80835d4:	2000      	movs	r0, #0
 80835d6:	e004      	b.n	80835e2 <mbedtls_asn1_get_alg+0x8c>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80835d8:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 80835dc:	e001      	b.n	80835e2 <mbedtls_asn1_get_alg+0x8c>

    params->p = *p;
    *p += params->len;

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80835de:	f06f 0065 	mvn.w	r0, #101	; 0x65

    return( 0 );
}
 80835e2:	b003      	add	sp, #12
 80835e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080835e6 <mbedtls_asn1_get_alg_null>:

int mbedtls_asn1_get_alg_null( unsigned char **p,
                       const unsigned char *end,
                       mbedtls_asn1_buf *alg )
{
 80835e6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int ret;
    mbedtls_asn1_buf params;

    memset( &params, 0, sizeof(mbedtls_asn1_buf) );
 80835e8:	2300      	movs	r3, #0
 80835ea:	9301      	str	r3, [sp, #4]
 80835ec:	9302      	str	r3, [sp, #8]
 80835ee:	9303      	str	r3, [sp, #12]

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, &params ) ) != 0 )
 80835f0:	ab01      	add	r3, sp, #4
 80835f2:	f7ff ffb0 	bl	8083556 <mbedtls_asn1_get_alg>
 80835f6:	b960      	cbnz	r0, 8083612 <mbedtls_asn1_get_alg_null+0x2c>
        return( ret );

    if( ( params.tag != MBEDTLS_ASN1_NULL && params.tag != 0 ) || params.len != 0 )
 80835f8:	9b01      	ldr	r3, [sp, #4]
 80835fa:	2b05      	cmp	r3, #5
 80835fc:	d000      	beq.n	8083600 <mbedtls_asn1_get_alg_null+0x1a>
 80835fe:	b933      	cbnz	r3, 808360e <mbedtls_asn1_get_alg_null+0x28>
 8083600:	9b02      	ldr	r3, [sp, #8]
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );

    return( 0 );
 8083602:	2b00      	cmp	r3, #0
 8083604:	bf14      	ite	ne
 8083606:	f06f 0067 	mvnne.w	r0, #103	; 0x67
 808360a:	2000      	moveq	r0, #0
 808360c:	e001      	b.n	8083612 <mbedtls_asn1_get_alg_null+0x2c>

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, &params ) ) != 0 )
        return( ret );

    if( ( params.tag != MBEDTLS_ASN1_NULL && params.tag != 0 ) || params.len != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 808360e:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
 8083612:	b005      	add	sp, #20
 8083614:	f85d fb04 	ldr.w	pc, [sp], #4

08083618 <_ZL17sha1_process_wrapPvPKh>:
}

static int sha1_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha1_process( (mbedtls_sha1_context *) ctx,
                                           data ) );
 8083618:	f001 bbee 	b.w	8084df8 <mbedtls_internal_sha1_process>

0808361c <_ZL15sha1_clone_wrapPvPKv>:
}

static void sha1_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha1_clone( (mbedtls_sha1_context *) dst,
                  (const mbedtls_sha1_context *) src );
 808361c:	f001 bbcc 	b.w	8084db8 <mbedtls_sha1_clone>

08083620 <_ZL13sha1_ctx_freePv>:
}

static void sha1_ctx_free( void *ctx )
{
 8083620:	b510      	push	{r4, lr}
 8083622:	4604      	mov	r4, r0
    mbedtls_sha1_free( (mbedtls_sha1_context *) ctx );
 8083624:	f001 fbbe 	bl	8084da4 <mbedtls_sha1_free>
    mbedtls_free( ctx );
 8083628:	4620      	mov	r0, r4
}
 808362a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha1_ctx_free( void *ctx )
{
    mbedtls_sha1_free( (mbedtls_sha1_context *) ctx );
    mbedtls_free( ctx );
 808362e:	f00d b923 	b.w	8090878 <free>

08083632 <_ZL14sha1_ctx_allocv>:
{
    return( mbedtls_sha1_finish_ret( (mbedtls_sha1_context *) ctx, output ) );
}

static void *sha1_ctx_alloc( void )
{
 8083632:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha1_context ) );
 8083634:	215c      	movs	r1, #92	; 0x5c
 8083636:	2001      	movs	r0, #1
 8083638:	f00e fe62 	bl	8092300 <calloc>

    if( ctx != NULL )
 808363c:	4604      	mov	r4, r0
 808363e:	b108      	cbz	r0, 8083644 <_ZL14sha1_ctx_allocv+0x12>
        mbedtls_sha1_init( (mbedtls_sha1_context *) ctx );
 8083640:	f001 fbac 	bl	8084d9c <mbedtls_sha1_init>

    return( ctx );
}
 8083644:	4620      	mov	r0, r4
 8083646:	bd10      	pop	{r4, pc}

08083648 <_ZL16sha1_finish_wrapPvPh>:
                                     input, ilen ) );
}

static int sha1_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha1_finish_ret( (mbedtls_sha1_context *) ctx, output ) );
 8083648:	f002 bbc2 	b.w	8085dd0 <mbedtls_sha1_finish_ret>

0808364c <_ZL16sha1_update_wrapPvPKhj>:

static int sha1_update_wrap( void *ctx, const unsigned char *input,
                              size_t ilen )
{
    return( mbedtls_sha1_update_ret( (mbedtls_sha1_context *) ctx,
                                     input, ilen ) );
 808364c:	f002 bb86 	b.w	8085d5c <mbedtls_sha1_update_ret>

08083650 <_ZL16sha1_starts_wrapPv>:

#if defined(MBEDTLS_SHA1_C)

static int sha1_starts_wrap( void *ctx )
{
    return( mbedtls_sha1_starts_ret( (mbedtls_sha1_context *) ctx ) );
 8083650:	f001 bbb8 	b.w	8084dc4 <mbedtls_sha1_starts_ret>

08083654 <_ZL19sha224_process_wrapPvPKh>:
}

static int sha224_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha256_process( (mbedtls_sha256_context *) ctx,
                                             data ) );
 8083654:	f7fe bd2c 	b.w	80820b0 <mbedtls_internal_sha256_process>

08083658 <_ZL17sha224_clone_wrapPvPKv>:
}

static void sha224_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
                    (const mbedtls_sha256_context *) src );
 8083658:	f7fe bcd4 	b.w	8082004 <mbedtls_sha256_clone>

0808365c <_ZL15sha224_ctx_freePv>:

    return( ctx );
}

static void sha224_ctx_free( void *ctx )
{
 808365c:	b510      	push	{r4, lr}
 808365e:	4604      	mov	r4, r0
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
 8083660:	f7fe fcc6 	bl	8081ff0 <mbedtls_sha256_free>
    mbedtls_free( ctx );
 8083664:	4620      	mov	r0, r4
}
 8083666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha224_ctx_free( void *ctx )
{
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
    mbedtls_free( ctx );
 808366a:	f00d b905 	b.w	8090878 <free>

0808366e <_ZL16sha224_ctx_allocv>:
{
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
}

static void *sha224_ctx_alloc( void )
{
 808366e:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
 8083670:	216c      	movs	r1, #108	; 0x6c
 8083672:	2001      	movs	r0, #1
 8083674:	f00e fe44 	bl	8092300 <calloc>

    if( ctx != NULL )
 8083678:	4604      	mov	r4, r0
 808367a:	b108      	cbz	r0, 8083680 <_ZL16sha224_ctx_allocv+0x12>
        mbedtls_sha256_init( (mbedtls_sha256_context *) ctx );
 808367c:	f7fe fcb4 	bl	8081fe8 <mbedtls_sha256_init>

    return( ctx );
}
 8083680:	4620      	mov	r0, r4
 8083682:	bd10      	pop	{r4, pc}

08083684 <_ZL11sha224_wrapPKhjPh>:
}

static int sha224_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
 8083684:	2301      	movs	r3, #1
 8083686:	f7ff b94e 	b.w	8082926 <mbedtls_sha256_ret>

0808368a <_ZL11sha256_wrapPKhjPh>:
}

static int sha256_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 0 ) );
 808368a:	2300      	movs	r3, #0
 808368c:	f7ff b94b 	b.w	8082926 <mbedtls_sha256_ret>

08083690 <_ZL18sha224_finish_wrapPvPh>:
}

static int sha224_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha256_finish_ret( (mbedtls_sha256_context *) ctx,
                                       output ) );
 8083690:	f7ff b8b2 	b.w	80827f8 <mbedtls_sha256_finish_ret>

08083694 <_ZL18sha224_update_wrapPvPKhj>:

static int sha224_update_wrap( void *ctx, const unsigned char *input,
                                size_t ilen )
{
    return( mbedtls_sha256_update_ret( (mbedtls_sha256_context *) ctx,
                                       input, ilen ) );
 8083694:	f7ff b876 	b.w	8082784 <mbedtls_sha256_update_ret>

08083698 <_ZL18sha224_starts_wrapPv>:
 */
#if defined(MBEDTLS_SHA256_C)

static int sha224_starts_wrap( void *ctx )
{
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 1 ) );
 8083698:	2101      	movs	r1, #1
 808369a:	f7fe bcb9 	b.w	8082010 <mbedtls_sha256_starts_ret>

0808369e <_ZL18sha256_starts_wrapPv>:
    sha224_process_wrap,
};

static int sha256_starts_wrap( void *ctx )
{
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 0 ) );
 808369e:	2100      	movs	r1, #0
 80836a0:	f7fe bcb6 	b.w	8082010 <mbedtls_sha256_starts_ret>

080836a4 <_ZL19sha384_process_wrapPvPKh>:
}

static int sha384_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha512_process( (mbedtls_sha512_context *) ctx,
                                             data ) );
 80836a4:	f00a b928 	b.w	808d8f8 <mbedtls_internal_sha512_process>

080836a8 <_ZL17sha384_clone_wrapPvPKv>:
}

static void sha384_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha512_clone( (mbedtls_sha512_context *) dst,
                    (const mbedtls_sha512_context *) src );
 80836a8:	f00a b884 	b.w	808d7b4 <mbedtls_sha512_clone>

080836ac <_ZL15sha384_ctx_freePv>:

    return( ctx );
}

static void sha384_ctx_free( void *ctx )
{
 80836ac:	b510      	push	{r4, lr}
 80836ae:	4604      	mov	r4, r0
    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );
 80836b0:	f00a f876 	bl	808d7a0 <mbedtls_sha512_free>
    mbedtls_free( ctx );
 80836b4:	4620      	mov	r0, r4
}
 80836b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha384_ctx_free( void *ctx )
{
    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );
    mbedtls_free( ctx );
 80836ba:	f00d b8dd 	b.w	8090878 <free>

080836be <_ZL16sha384_ctx_allocv>:
{
    return( mbedtls_sha512_ret( input, ilen, output, 1 ) );
}

static void *sha384_ctx_alloc( void )
{
 80836be:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha512_context ) );
 80836c0:	21d8      	movs	r1, #216	; 0xd8
 80836c2:	2001      	movs	r0, #1
 80836c4:	f00e fe1c 	bl	8092300 <calloc>

    if( ctx != NULL )
 80836c8:	4604      	mov	r4, r0
 80836ca:	b108      	cbz	r0, 80836d0 <_ZL16sha384_ctx_allocv+0x12>
        mbedtls_sha512_init( (mbedtls_sha512_context *) ctx );
 80836cc:	f00a f864 	bl	808d798 <mbedtls_sha512_init>

    return( ctx );
}
 80836d0:	4620      	mov	r0, r4
 80836d2:	bd10      	pop	{r4, pc}

080836d4 <_ZL11sha384_wrapPKhjPh>:
}

static int sha384_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha512_ret( input, ilen, output, 1 ) );
 80836d4:	2301      	movs	r3, #1
 80836d6:	f00b b8ca 	b.w	808e86e <mbedtls_sha512_ret>

080836da <_ZL11sha512_wrapPKhjPh>:
}

static int sha512_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha512_ret( input, ilen, output, 0 ) );
 80836da:	2300      	movs	r3, #0
 80836dc:	f00b b8c7 	b.w	808e86e <mbedtls_sha512_ret>

080836e0 <_ZL18sha384_finish_wrapPvPh>:
}

static int sha384_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha512_finish_ret( (mbedtls_sha512_context *) ctx,
                                       output ) );
 80836e0:	f00a bf92 	b.w	808e608 <mbedtls_sha512_finish_ret>

080836e4 <_ZL18sha384_update_wrapPvPKhj>:

static int sha384_update_wrap( void *ctx, const unsigned char *input,
                               size_t ilen )
{
    return( mbedtls_sha512_update_ret( (mbedtls_sha512_context *) ctx,
                                       input, ilen ) );
 80836e4:	f00a bf48 	b.w	808e578 <mbedtls_sha512_update_ret>

080836e8 <_ZL18sha384_starts_wrapPv>:

#if defined(MBEDTLS_SHA512_C)

static int sha384_starts_wrap( void *ctx )
{
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 1 ) );
 80836e8:	2101      	movs	r1, #1
 80836ea:	f00a b869 	b.w	808d7c0 <mbedtls_sha512_starts_ret>

080836ee <_ZL18sha512_starts_wrapPv>:
    sha384_process_wrap,
};

static int sha512_starts_wrap( void *ctx )
{
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 0 ) );
 80836ee:	2100      	movs	r1, #0
 80836f0:	f00a b866 	b.w	808d7c0 <mbedtls_sha512_starts_ret>

080836f4 <_ZL15mbedtls_zeroizePvj>:
#endif

#if !defined(MBEDTLS_RSA_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 80836f4:	4401      	add	r1, r0
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 80836f6:	2300      	movs	r3, #0
 80836f8:	4288      	cmp	r0, r1
 80836fa:	d002      	beq.n	8083702 <_ZL15mbedtls_zeroizePvj+0xe>
 80836fc:	7003      	strb	r3, [r0, #0]
 80836fe:	3001      	adds	r0, #1
 8083700:	e7fa      	b.n	80836f8 <_ZL15mbedtls_zeroizePvj+0x4>
 8083702:	4770      	bx	lr

08083704 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>:
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
 8083704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8083708:	b095      	sub	sp, #84	; 0x54
 808370a:	9d1e      	ldr	r5, [sp, #120]	; 0x78
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 808370c:	ae04      	add	r6, sp, #16
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
 808370e:	4607      	mov	r7, r0
 8083710:	460c      	mov	r4, r1
 8083712:	4691      	mov	r9, r2
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 8083714:	2100      	movs	r1, #0
 8083716:	2240      	movs	r2, #64	; 0x40
 8083718:	4630      	mov	r0, r6
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
 808371a:	9301      	str	r3, [sp, #4]
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
    memset( counter, 0, 4 );
 808371c:	f10d 0850 	add.w	r8, sp, #80	; 0x50
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 8083720:	f00e fe39 	bl	8092396 <memset>
    memset( counter, 0, 4 );
 8083724:	2300      	movs	r3, #0

    hlen = mbedtls_md_get_size( md_ctx->md_info );
 8083726:	6828      	ldr	r0, [r5, #0]
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
    memset( counter, 0, 4 );
 8083728:	f848 3d44 	str.w	r3, [r8, #-68]!

    hlen = mbedtls_md_get_size( md_ctx->md_info );
 808372c:	f004 f900 	bl	8087930 <mbedtls_md_get_size>
 8083730:	4682      	mov	sl, r0

    /* Generate and apply dbMask */
    p = dst;

    while( dlen > 0 )
 8083732:	b37c      	cbz	r4, 8083794 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x90>
 8083734:	4554      	cmp	r4, sl
    {
        use_len = hlen;
        if( dlen < hlen )
            use_len = dlen;

        if( ( ret = mbedtls_md_starts( md_ctx ) ) != 0 )
 8083736:	4628      	mov	r0, r5
 8083738:	46a3      	mov	fp, r4
 808373a:	bf28      	it	cs
 808373c:	46d3      	movcs	fp, sl
 808373e:	f004 f807 	bl	8087750 <mbedtls_md_starts>
 8083742:	4602      	mov	r2, r0
 8083744:	bb38      	cbnz	r0, 8083796 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
            goto exit;
        if( ( ret = mbedtls_md_update( md_ctx, src, slen ) ) != 0 )
 8083746:	9a01      	ldr	r2, [sp, #4]
 8083748:	4649      	mov	r1, r9
 808374a:	4628      	mov	r0, r5
 808374c:	f004 f80a 	bl	8087764 <mbedtls_md_update>
 8083750:	4602      	mov	r2, r0
 8083752:	bb00      	cbnz	r0, 8083796 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
            goto exit;
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
 8083754:	2204      	movs	r2, #4
 8083756:	4641      	mov	r1, r8
 8083758:	4628      	mov	r0, r5
 808375a:	f004 f803 	bl	8087764 <mbedtls_md_update>
 808375e:	4602      	mov	r2, r0
 8083760:	b9c8      	cbnz	r0, 8083796 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
            goto exit;
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
 8083762:	4631      	mov	r1, r6
 8083764:	4628      	mov	r0, r5
 8083766:	f004 f807 	bl	8087778 <mbedtls_md_finish>
 808376a:	4602      	mov	r2, r0
 808376c:	b998      	cbnz	r0, 8083796 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
 808376e:	463b      	mov	r3, r7
            goto exit;

        for( i = 0; i < use_len; ++i )
 8083770:	455a      	cmp	r2, fp
 8083772:	d007      	beq.n	8083784 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x80>
            *p++ ^= mask[i];
 8083774:	f813 0b01 	ldrb.w	r0, [r3], #1
 8083778:	5cb1      	ldrb	r1, [r6, r2]
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
            goto exit;
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
            goto exit;

        for( i = 0; i < use_len; ++i )
 808377a:	3201      	adds	r2, #1
            *p++ ^= mask[i];
 808377c:	4041      	eors	r1, r0
 808377e:	f803 1c01 	strb.w	r1, [r3, #-1]
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
            goto exit;
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
            goto exit;

        for( i = 0; i < use_len; ++i )
 8083782:	e7f5      	b.n	8083770 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x6c>
            *p++ ^= mask[i];

        counter[3]++;
 8083784:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8083788:	4417      	add	r7, r2
 808378a:	3301      	adds	r3, #1
 808378c:	f88d 300f 	strb.w	r3, [sp, #15]

        dlen -= use_len;
 8083790:	1aa4      	subs	r4, r4, r2
    hlen = mbedtls_md_get_size( md_ctx->md_info );

    /* Generate and apply dbMask */
    p = dst;

    while( dlen > 0 )
 8083792:	e7ce      	b.n	8083732 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x2e>
 8083794:	4622      	mov	r2, r4

        dlen -= use_len;
    }

exit:
    mbedtls_zeroize( mask, sizeof( mask ) );
 8083796:	4630      	mov	r0, r6
 8083798:	2140      	movs	r1, #64	; 0x40
 808379a:	f7ff ffab 	bl	80836f4 <_ZL15mbedtls_zeroizePvj>

    return( ret );
}
 808379e:	4610      	mov	r0, r2
 80837a0:	b015      	add	sp, #84	; 0x54
 80837a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080837a8 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>:
static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
                                        unsigned int hashlen,
                                        const unsigned char *hash,
                                        size_t dst_len,
                                        unsigned char *dst )
{
 80837a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80837ac:	461d      	mov	r5, r3
    size_t oid_size  = 0;
 80837ae:	2300      	movs	r3, #0
static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
                                        unsigned int hashlen,
                                        const unsigned char *hash,
                                        size_t dst_len,
                                        unsigned char *dst )
{
 80837b0:	460e      	mov	r6, r1
 80837b2:	4691      	mov	r9, r2
 80837b4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    size_t oid_size  = 0;
 80837b8:	9300      	str	r3, [sp, #0]
    size_t nb_pad    = dst_len;
    unsigned char *p = dst;
    const char *oid  = NULL;
 80837ba:	9301      	str	r3, [sp, #4]

    /* Are we signing hashed or raw data? */
    if( md_alg != MBEDTLS_MD_NONE )
 80837bc:	4604      	mov	r4, r0
 80837be:	b328      	cbz	r0, 808380c <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x64>
    {
        const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
 80837c0:	f003 ff72 	bl	80876a8 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 80837c4:	4606      	mov	r6, r0
 80837c6:	2800      	cmp	r0, #0
 80837c8:	d063      	beq.n	8083892 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
 80837ca:	4620      	mov	r0, r4
 80837cc:	466a      	mov	r2, sp
 80837ce:	a901      	add	r1, sp, #4
 80837d0:	f001 fa9a 	bl	8084d08 <mbedtls_oid_get_oid_by_md>
 80837d4:	4604      	mov	r4, r0
 80837d6:	2800      	cmp	r0, #0
 80837d8:	d15b      	bne.n	8083892 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
 80837da:	4630      	mov	r0, r6
 80837dc:	f004 f8a8 	bl	8087930 <mbedtls_md_get_size>

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
 80837e0:	9f00      	ldr	r7, [sp, #0]
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
 80837e2:	4606      	mov	r6, r0

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
 80837e4:	4407      	add	r7, r0
 80837e6:	f107 0308 	add.w	r3, r7, #8
 80837ea:	2b7f      	cmp	r3, #127	; 0x7f
 80837ec:	d851      	bhi.n	8083892 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
 80837ee:	f110 020a 	adds.w	r2, r0, #10
 80837f2:	d24e      	bcs.n	8083892 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            10 + hashlen            <  hashlen      ||
            10 + hashlen + oid_size <  10 + hashlen )
 80837f4:	f107 030a 	add.w	r3, r7, #10
        hashlen = mbedtls_md_get_size( md_info );

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
            10 + hashlen            <  hashlen      ||
 80837f8:	429a      	cmp	r2, r3
 80837fa:	d84a      	bhi.n	8083892 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
         *   (Insist on 1-byte length encodings to protect against variants of
         *    Bleichenbacher's forgery attack against lax PKCS#1v1.5 verification)
         * - Need hashlen bytes for hash
         * - Need oid_size bytes for hash alg OID.
         */
        if( nb_pad < 10 + hashlen + oid_size )
 80837fc:	429d      	cmp	r5, r3
 80837fe:	d348      	bcc.n	8083892 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
        nb_pad -= 10 + hashlen + oid_size;
 8083800:	f1a5 030a 	sub.w	r3, r5, #10
 8083804:	1bdf      	subs	r7, r3, r7
        nb_pad -= hashlen;
    }

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
 8083806:	2f0a      	cmp	r7, #10
 8083808:	d806      	bhi.n	8083818 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x70>
 808380a:	e042      	b.n	8083892 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
        nb_pad -= 10 + hashlen + oid_size;
    }
    else
    {
        if( nb_pad < hashlen )
 808380c:	428d      	cmp	r5, r1
 808380e:	d340      	bcc.n	8083892 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        nb_pad -= hashlen;
 8083810:	1a6d      	subs	r5, r5, r1
    }

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
 8083812:	2d0a      	cmp	r5, #10
 8083814:	d93d      	bls.n	8083892 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
 8083816:	e03e      	b.n	8083896 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xee>

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 8083818:	46c2      	mov	sl, r8

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    nb_pad -= 3;
 808381a:	3f03      	subs	r7, #3

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 808381c:	f80a 4b02 	strb.w	r4, [sl], #2
    *p++ = MBEDTLS_RSA_SIGN;
 8083820:	2301      	movs	r3, #1
    memset( p, 0xFF, nb_pad );
 8083822:	463a      	mov	r2, r7
    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
    *p++ = MBEDTLS_RSA_SIGN;
 8083824:	f888 3001 	strb.w	r3, [r8, #1]
    memset( p, 0xFF, nb_pad );
 8083828:	21ff      	movs	r1, #255	; 0xff
 808382a:	4650      	mov	r0, sl
 808382c:	f00e fdb3 	bl	8092396 <memset>
    p += nb_pad;
 8083830:	eb0a 0307 	add.w	r3, sl, r7
     * Schematic:
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 8083834:	2130      	movs	r1, #48	; 0x30
    /* Write signature header and padding */
    *p++ = 0;
    *p++ = MBEDTLS_RSA_SIGN;
    memset( p, 0xFF, nb_pad );
    p += nb_pad;
    *p++ = 0;
 8083836:	f80a 4007 	strb.w	r4, [sl, r7]
     * Schematic:
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 808383a:	7059      	strb	r1, [r3, #1]
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
 808383c:	9f00      	ldr	r7, [sp, #0]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 808383e:	70d9      	strb	r1, [r3, #3]
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
 8083840:	f107 0208 	add.w	r2, r7, #8
 8083844:	4432      	add	r2, r6
 8083846:	709a      	strb	r2, [r3, #2]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x04 + oid_size );
 8083848:	b2fa      	uxtb	r2, r7
 808384a:	1d11      	adds	r1, r2, #4
    *p++ = MBEDTLS_ASN1_OID;
    *p++ = (unsigned char) oid_size;
 808384c:	f103 0a07 	add.w	sl, r3, #7
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x04 + oid_size );
 8083850:	7119      	strb	r1, [r3, #4]
    *p++ = MBEDTLS_ASN1_OID;
 8083852:	2106      	movs	r1, #6
 8083854:	7159      	strb	r1, [r3, #5]
    *p++ = (unsigned char) oid_size;
 8083856:	719a      	strb	r2, [r3, #6]
    memcpy( p, oid, oid_size );
 8083858:	9901      	ldr	r1, [sp, #4]
 808385a:	463a      	mov	r2, r7
 808385c:	4650      	mov	r0, sl
 808385e:	f00e fd74 	bl	809234a <memcpy>
    p += oid_size;
    *p++ = MBEDTLS_ASN1_NULL;
 8083862:	2205      	movs	r2, #5
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x04 + oid_size );
    *p++ = MBEDTLS_ASN1_OID;
    *p++ = (unsigned char) oid_size;
    memcpy( p, oid, oid_size );
    p += oid_size;
 8083864:	eb0a 0307 	add.w	r3, sl, r7
    *p++ = MBEDTLS_ASN1_NULL;
 8083868:	f80a 2007 	strb.w	r2, [sl, r7]
    *p++ = 0x00;
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
 808386c:	2204      	movs	r2, #4
    *p++ = (unsigned char) hashlen;
 808386e:	189f      	adds	r7, r3, r2
    *p++ = (unsigned char) oid_size;
    memcpy( p, oid, oid_size );
    p += oid_size;
    *p++ = MBEDTLS_ASN1_NULL;
    *p++ = 0x00;
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
 8083870:	709a      	strb	r2, [r3, #2]
    *p++ = (unsigned char) hashlen;
 8083872:	70de      	strb	r6, [r3, #3]
    *p++ = MBEDTLS_ASN1_OID;
    *p++ = (unsigned char) oid_size;
    memcpy( p, oid, oid_size );
    p += oid_size;
    *p++ = MBEDTLS_ASN1_NULL;
    *p++ = 0x00;
 8083874:	705c      	strb	r4, [r3, #1]
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
    *p++ = (unsigned char) hashlen;
    memcpy( p, hash, hashlen );
 8083876:	4632      	mov	r2, r6
 8083878:	4649      	mov	r1, r9
 808387a:	4638      	mov	r0, r7
 808387c:	f00e fd65 	bl	809234a <memcpy>
    p += hashlen;

    /* Just a sanity-check, should be automatic
     * after the initial bounds check. */
    if( p != dst + dst_len )
 8083880:	443e      	add	r6, r7
 8083882:	eb08 0305 	add.w	r3, r8, r5
 8083886:	429e      	cmp	r6, r3
 8083888:	d019      	beq.n	80838be <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x116>
    {
        mbedtls_zeroize( dst, dst_len );
 808388a:	4629      	mov	r1, r5
 808388c:	4640      	mov	r0, r8
 808388e:	f7ff ff31 	bl	80836f4 <_ZL15mbedtls_zeroizePvj>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8083892:	4c0d      	ldr	r4, [pc, #52]	; (80838c8 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x120>)
 8083894:	e013      	b.n	80838be <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x116>

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 8083896:	4643      	mov	r3, r8

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    nb_pad -= 3;
 8083898:	1eef      	subs	r7, r5, #3

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 808389a:	f803 0b02 	strb.w	r0, [r3], #2
    *p++ = MBEDTLS_RSA_SIGN;
 808389e:	2201      	movs	r2, #1
 80838a0:	f888 2001 	strb.w	r2, [r8, #1]
    memset( p, 0xFF, nb_pad );
 80838a4:	21ff      	movs	r1, #255	; 0xff
 80838a6:	463a      	mov	r2, r7
 80838a8:	4618      	mov	r0, r3
 80838aa:	f00e fd74 	bl	8092396 <memset>
 80838ae:	4603      	mov	r3, r0
    p += nb_pad;
    *p++ = 0;
 80838b0:	55c4      	strb	r4, [r0, r7]

    /* Are we signing raw data? */
    if( md_alg == MBEDTLS_MD_NONE )
    {
        memcpy( p, hash, hashlen );
 80838b2:	1ea8      	subs	r0, r5, #2
 80838b4:	4632      	mov	r2, r6
 80838b6:	4649      	mov	r1, r9
 80838b8:	4418      	add	r0, r3
 80838ba:	f00e fd46 	bl	809234a <memcpy>
        mbedtls_zeroize( dst, dst_len );
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }

    return( 0 );
}
 80838be:	4620      	mov	r0, r4
 80838c0:	b002      	add	sp, #8
 80838c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80838c6:	bf00      	nop
 80838c8:	ffffbf80 	.word	0xffffbf80

080838cc <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>:
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 80838cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 80838ce:	f100 0508 	add.w	r5, r0, #8
 80838d2:	6847      	ldr	r7, [r0, #4]
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 80838d4:	4604      	mov	r4, r0
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 80838d6:	4628      	mov	r0, r5
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 80838d8:	460e      	mov	r6, r1
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 80838da:	f007 fc62 	bl	808b1a2 <mbedtls_mpi_size>
 80838de:	4287      	cmp	r7, r0
 80838e0:	d117      	bne.n	8083912 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
 80838e2:	6863      	ldr	r3, [r4, #4]
 80838e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80838e8:	d813      	bhi.n	8083912 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 80838ea:	2100      	movs	r1, #0
 80838ec:	4628      	mov	r0, r5
 80838ee:	f007 fe29 	bl	808b544 <mbedtls_mpi_cmp_int>
 80838f2:	2800      	cmp	r0, #0
 80838f4:	dd0d      	ble.n	8083912 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
 80838f6:	2100      	movs	r1, #0
 80838f8:	4628      	mov	r0, r5
 80838fa:	f007 fc08 	bl	808b10e <mbedtls_mpi_get_bit>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 80838fe:	b140      	cbz	r0, 8083912 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
 8083900:	b1ee      	cbz	r6, 808393e <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x72>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 8083902:	f104 052c 	add.w	r5, r4, #44	; 0x2c
 8083906:	2100      	movs	r1, #0
 8083908:	4628      	mov	r0, r5
 808390a:	f007 fe1b 	bl	808b544 <mbedtls_mpi_cmp_int>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
 808390e:	2800      	cmp	r0, #0
 8083910:	dc01      	bgt.n	8083916 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x4a>
    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8083912:	481a      	ldr	r0, [pc, #104]	; (808397c <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0xb0>)
 8083914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 8083916:	2100      	movs	r1, #0
 8083918:	4628      	mov	r0, r5
 808391a:	f007 fbf8 	bl	808b10e <mbedtls_mpi_get_bit>
#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 808391e:	2800      	cmp	r0, #0
 8083920:	d0f7      	beq.n	8083912 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 8083922:	f104 0538 	add.w	r5, r4, #56	; 0x38
 8083926:	2100      	movs	r1, #0
 8083928:	4628      	mov	r0, r5
 808392a:	f007 fe0b 	bl	808b544 <mbedtls_mpi_cmp_int>
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 808392e:	2800      	cmp	r0, #0
 8083930:	ddef      	ble.n	8083912 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
 8083932:	2100      	movs	r1, #0
 8083934:	4628      	mov	r0, r5
 8083936:	f007 fbea 	bl	808b10e <mbedtls_mpi_get_bit>
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 808393a:	2800      	cmp	r0, #0
 808393c:	d0e9      	beq.n	8083912 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
 808393e:	2100      	movs	r1, #0
 8083940:	f104 0014 	add.w	r0, r4, #20
 8083944:	f007 fdfe 	bl	808b544 <mbedtls_mpi_cmp_int>
 8083948:	2800      	cmp	r0, #0
 808394a:	dde2      	ble.n	8083912 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
    /* For private key operations, use D or DP & DQ
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
 808394c:	b1a6      	cbz	r6, 8083978 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0xac>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 808394e:	2100      	movs	r1, #0
 8083950:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8083954:	f007 fdf6 	bl	808b544 <mbedtls_mpi_cmp_int>
    /* For private key operations, use D or DP & DQ
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
 8083958:	2800      	cmp	r0, #0
 808395a:	ddda      	ble.n	8083912 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
 808395c:	2100      	movs	r1, #0
 808395e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8083962:	f007 fdef 	bl	808b544 <mbedtls_mpi_cmp_int>
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 8083966:	2800      	cmp	r0, #0
 8083968:	ddd3      	ble.n	8083912 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
 808396a:	2100      	movs	r1, #0
 808396c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8083970:	f007 fde8 	bl	808b544 <mbedtls_mpi_cmp_int>
#endif

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
 8083974:	2800      	cmp	r0, #0
 8083976:	ddcc      	ble.n	8083912 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }
#endif

    return( 0 );
 8083978:	2000      	movs	r0, #0
 808397a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808397c:	ffffbf80 	.word	0xffffbf80

08083980 <mbedtls_rsa_import_raw>:
                            unsigned char const *N, size_t N_len,
                            unsigned char const *P, size_t P_len,
                            unsigned char const *Q, size_t Q_len,
                            unsigned char const *D, size_t D_len,
                            unsigned char const *E, size_t E_len )
{
 8083980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8083984:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8083986:	4604      	mov	r4, r0
 8083988:	4698      	mov	r8, r3
 808398a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 808398c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    int ret = 0;

    if( N != NULL )
 808398e:	b149      	cbz	r1, 80839a4 <mbedtls_rsa_import_raw+0x24>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
 8083990:	f100 0908 	add.w	r9, r0, #8
 8083994:	4648      	mov	r0, r9
 8083996:	f007 fc0a 	bl	808b1ae <mbedtls_mpi_read_binary>
 808399a:	bb50      	cbnz	r0, 80839f2 <mbedtls_rsa_import_raw+0x72>
        ctx->len = mbedtls_mpi_size( &ctx->N );
 808399c:	4648      	mov	r0, r9
 808399e:	f007 fc00 	bl	808b1a2 <mbedtls_mpi_size>
 80839a2:	6060      	str	r0, [r4, #4]
    }

    if( P != NULL )
 80839a4:	f1b8 0f00 	cmp.w	r8, #0
 80839a8:	d101      	bne.n	80839ae <mbedtls_rsa_import_raw+0x2e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );

    if( Q != NULL )
 80839aa:	b947      	cbnz	r7, 80839be <mbedtls_rsa_import_raw+0x3e>
 80839ac:	e00e      	b.n	80839cc <mbedtls_rsa_import_raw+0x4c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
        ctx->len = mbedtls_mpi_size( &ctx->N );
    }

    if( P != NULL )
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );
 80839ae:	9a08      	ldr	r2, [sp, #32]
 80839b0:	4641      	mov	r1, r8
 80839b2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80839b6:	f007 fbfa 	bl	808b1ae <mbedtls_mpi_read_binary>
 80839ba:	b9d0      	cbnz	r0, 80839f2 <mbedtls_rsa_import_raw+0x72>
 80839bc:	e7f5      	b.n	80839aa <mbedtls_rsa_import_raw+0x2a>

    if( Q != NULL )
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->Q, Q, Q_len ) );
 80839be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80839c0:	4639      	mov	r1, r7
 80839c2:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80839c6:	f007 fbf2 	bl	808b1ae <mbedtls_mpi_read_binary>
 80839ca:	b990      	cbnz	r0, 80839f2 <mbedtls_rsa_import_raw+0x72>

    if( D != NULL )
 80839cc:	b136      	cbz	r6, 80839dc <mbedtls_rsa_import_raw+0x5c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->D, D, D_len ) );
 80839ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80839d0:	4631      	mov	r1, r6
 80839d2:	f104 0020 	add.w	r0, r4, #32
 80839d6:	f007 fbea 	bl	808b1ae <mbedtls_mpi_read_binary>
 80839da:	b950      	cbnz	r0, 80839f2 <mbedtls_rsa_import_raw+0x72>

    if( E != NULL )
 80839dc:	b135      	cbz	r5, 80839ec <mbedtls_rsa_import_raw+0x6c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );
 80839de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80839e0:	4629      	mov	r1, r5
 80839e2:	f104 0014 	add.w	r0, r4, #20
 80839e6:	f007 fbe2 	bl	808b1ae <mbedtls_mpi_read_binary>

cleanup:

    if( ret != 0 )
 80839ea:	b910      	cbnz	r0, 80839f2 <mbedtls_rsa_import_raw+0x72>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );

    return( 0 );
 80839ec:	2000      	movs	r0, #0
 80839ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );

cleanup:

    if( ret != 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 80839f2:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080

    return( 0 );
}
 80839f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080839fc <mbedtls_rsa_complete>:

    return( 0 );
}

int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
 80839fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 8083a00:	f100 0b08 	add.w	fp, r0, #8

    return( 0 );
}

int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
 8083a04:	b087      	sub	sp, #28
 8083a06:	4607      	mov	r7, r0
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 8083a08:	2100      	movs	r1, #0
 8083a0a:	4658      	mov	r0, fp
 8083a0c:	f007 fd9a 	bl	808b544 <mbedtls_mpi_cmp_int>
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 8083a10:	f107 092c 	add.w	r9, r7, #44	; 0x2c
 8083a14:	2100      	movs	r1, #0

int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 8083a16:	4680      	mov	r8, r0
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 8083a18:	4648      	mov	r0, r9
 8083a1a:	f007 fd93 	bl	808b544 <mbedtls_mpi_cmp_int>
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 8083a1e:	f107 0a38 	add.w	sl, r7, #56	; 0x38
int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 8083a22:	9005      	str	r0, [sp, #20]
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 8083a24:	2100      	movs	r1, #0
 8083a26:	4650      	mov	r0, sl
 8083a28:	f007 fd8c 	bl	808b544 <mbedtls_mpi_cmp_int>
    const int have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 8083a2c:	f107 0320 	add.w	r3, r7, #32
 8083a30:	2100      	movs	r1, #0
{
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 8083a32:	4605      	mov	r5, r0
    const int have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 8083a34:	4618      	mov	r0, r3
 8083a36:	9302      	str	r3, [sp, #8]
 8083a38:	f007 fd84 	bl	808b544 <mbedtls_mpi_cmp_int>
    const int have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
 8083a3c:	f107 0314 	add.w	r3, r7, #20
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
    const int have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 8083a40:	9004      	str	r0, [sp, #16]
    const int have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
 8083a42:	2100      	movs	r1, #0
 8083a44:	4618      	mov	r0, r3
 8083a46:	9303      	str	r3, [sp, #12]
 8083a48:	f007 fd7c 	bl	808b544 <mbedtls_mpi_cmp_int>
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 8083a4c:	9b05      	ldr	r3, [sp, #20]
 8083a4e:	9a04      	ldr	r2, [sp, #16]
 8083a50:	b14b      	cbz	r3, 8083a66 <mbedtls_rsa_complete+0x6a>
 8083a52:	b125      	cbz	r5, 8083a5e <mbedtls_rsa_complete+0x62>
 8083a54:	b12a      	cbz	r2, 8083a62 <mbedtls_rsa_complete+0x66>
 8083a56:	1c06      	adds	r6, r0, #0
 8083a58:	bf18      	it	ne
 8083a5a:	2601      	movne	r6, #1
 8083a5c:	e013      	b.n	8083a86 <mbedtls_rsa_complete+0x8a>
 8083a5e:	462e      	mov	r6, r5
 8083a60:	e011      	b.n	8083a86 <mbedtls_rsa_complete+0x8a>
 8083a62:	4616      	mov	r6, r2
 8083a64:	e00f      	b.n	8083a86 <mbedtls_rsa_complete+0x8a>
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 8083a66:	f1b8 0f00 	cmp.w	r8, #0
 8083a6a:	d103      	bne.n	8083a74 <mbedtls_rsa_complete+0x78>
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 8083a6c:	4644      	mov	r4, r8
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 8083a6e:	4646      	mov	r6, r8
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
 8083a70:	2200      	movs	r2, #0
 8083a72:	e024      	b.n	8083abe <mbedtls_rsa_complete+0xc2>
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 8083a74:	b9cd      	cbnz	r5, 8083aaa <mbedtls_rsa_complete+0xae>
 8083a76:	b11a      	cbz	r2, 8083a80 <mbedtls_rsa_complete+0x84>
 8083a78:	b9f0      	cbnz	r0, 8083ab8 <mbedtls_rsa_complete+0xbc>
 8083a7a:	4606      	mov	r6, r0
 8083a7c:	4604      	mov	r4, r0
 8083a7e:	e00e      	b.n	8083a9e <mbedtls_rsa_complete+0xa2>
 8083a80:	462e      	mov	r6, r5
 8083a82:	462c      	mov	r4, r5
 8083a84:	e00d      	b.n	8083aa2 <mbedtls_rsa_complete+0xa6>
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 8083a86:	b1ad      	cbz	r5, 8083ab4 <mbedtls_rsa_complete+0xb8>
 8083a88:	b992      	cbnz	r2, 8083ab0 <mbedtls_rsa_complete+0xb4>
 8083a8a:	1c04      	adds	r4, r0, #0
 8083a8c:	bf18      	it	ne
 8083a8e:	2401      	movne	r4, #1
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
 8083a90:	f1b8 0f00 	cmp.w	r8, #0
 8083a94:	d0ec      	beq.n	8083a70 <mbedtls_rsa_complete+0x74>
 8083a96:	2b00      	cmp	r3, #0
 8083a98:	d1ea      	bne.n	8083a70 <mbedtls_rsa_complete+0x74>
 8083a9a:	2d00      	cmp	r5, #0
 8083a9c:	d1e8      	bne.n	8083a70 <mbedtls_rsa_complete+0x74>
 8083a9e:	2a00      	cmp	r2, #0
 8083aa0:	d1e6      	bne.n	8083a70 <mbedtls_rsa_complete+0x74>
 8083aa2:	2800      	cmp	r0, #0
 8083aa4:	d0e4      	beq.n	8083a70 <mbedtls_rsa_complete+0x74>
 8083aa6:	2201      	movs	r2, #1
 8083aa8:	e009      	b.n	8083abe <mbedtls_rsa_complete+0xc2>
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 8083aaa:	461c      	mov	r4, r3
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 8083aac:	461e      	mov	r6, r3
 8083aae:	e7df      	b.n	8083a70 <mbedtls_rsa_complete+0x74>
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 8083ab0:	2400      	movs	r4, #0
 8083ab2:	e7ed      	b.n	8083a90 <mbedtls_rsa_complete+0x94>
 8083ab4:	462c      	mov	r4, r5
 8083ab6:	e7db      	b.n	8083a70 <mbedtls_rsa_complete+0x74>
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 8083ab8:	2601      	movs	r6, #1
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 8083aba:	462c      	mov	r4, r5
 8083abc:	e002      	b.n	8083ac4 <mbedtls_rsa_complete+0xc8>
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;

    /* These three alternatives are mutually exclusive */
    const int is_priv = n_missing || pq_missing || d_missing;
 8083abe:	2e00      	cmp	r6, #0
 8083ac0:	d03d      	beq.n	8083b3e <mbedtls_rsa_complete+0x142>
 8083ac2:	2600      	movs	r6, #0
 8083ac4:	9404      	str	r4, [sp, #16]
 8083ac6:	2401      	movs	r4, #1

    /*
     * Step 1: Deduce N if P, Q are provided.
     */

    if( !have_N && have_P && have_Q )
 8083ac8:	f1b8 0f00 	cmp.w	r8, #0
 8083acc:	d10b      	bne.n	8083ae6 <mbedtls_rsa_complete+0xea>
 8083ace:	b153      	cbz	r3, 8083ae6 <mbedtls_rsa_complete+0xea>
 8083ad0:	b14d      	cbz	r5, 8083ae6 <mbedtls_rsa_complete+0xea>
    {
        if( ( ret = mbedtls_mpi_mul_mpi( &ctx->N, &ctx->P,
 8083ad2:	4652      	mov	r2, sl
 8083ad4:	4649      	mov	r1, r9
 8083ad6:	4658      	mov	r0, fp
 8083ad8:	f007 fe53 	bl	808b782 <mbedtls_mpi_mul_mpi>
 8083adc:	bb28      	cbnz	r0, 8083b2a <mbedtls_rsa_complete+0x12e>
                                         &ctx->Q ) ) != 0 )
        {
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
        }

        ctx->len = mbedtls_mpi_size( &ctx->N );
 8083ade:	4658      	mov	r0, fp
 8083ae0:	f007 fb5f 	bl	808b1a2 <mbedtls_mpi_size>
 8083ae4:	6078      	str	r0, [r7, #4]

    /*
     * Step 2: Deduce and verify all remaining core parameters.
     */

    if( pq_missing )
 8083ae6:	b146      	cbz	r6, 8083afa <mbedtls_rsa_complete+0xfe>
    {
        ret = mbedtls_rsa_deduce_primes( &ctx->N, &ctx->E, &ctx->D,
                                         &ctx->P, &ctx->Q );
 8083ae8:	f8cd a000 	str.w	sl, [sp]
 8083aec:	464b      	mov	r3, r9
 8083aee:	9a02      	ldr	r2, [sp, #8]
 8083af0:	9903      	ldr	r1, [sp, #12]
 8083af2:	4658      	mov	r0, fp
 8083af4:	f00a ff8c 	bl	808ea10 <mbedtls_rsa_deduce_primes>
 8083af8:	e007      	b.n	8083b0a <mbedtls_rsa_complete+0x10e>
        if( ret != 0 )
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );

    }
    else if( d_missing )
 8083afa:	9b04      	ldr	r3, [sp, #16]
 8083afc:	b133      	cbz	r3, 8083b0c <mbedtls_rsa_complete+0x110>
    {
        if( ( ret = mbedtls_rsa_deduce_private_exponent( &ctx->P,
 8083afe:	9b02      	ldr	r3, [sp, #8]
 8083b00:	9a03      	ldr	r2, [sp, #12]
 8083b02:	4651      	mov	r1, sl
 8083b04:	4648      	mov	r0, r9
 8083b06:	f00b f87f 	bl	808ec08 <mbedtls_rsa_deduce_private_exponent>
 8083b0a:	b970      	cbnz	r0, 8083b2a <mbedtls_rsa_complete+0x12e>
     * Step 3: Deduce all additional parameters specific
     *         to our current RSA implementation.
     */

#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv )
 8083b0c:	b184      	cbz	r4, 8083b30 <mbedtls_rsa_complete+0x134>
    {
        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
 8083b0e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
                                      &ctx->DP, &ctx->DQ, &ctx->QP );
 8083b12:	9301      	str	r3, [sp, #4]
     */

#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv )
    {
        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
 8083b14:	f107 0350 	add.w	r3, r7, #80	; 0x50
                                      &ctx->DP, &ctx->DQ, &ctx->QP );
 8083b18:	9300      	str	r3, [sp, #0]
 8083b1a:	9a02      	ldr	r2, [sp, #8]
 8083b1c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8083b20:	4651      	mov	r1, sl
 8083b22:	4648      	mov	r0, r9
 8083b24:	f00b fa14 	bl	808ef50 <mbedtls_rsa_deduce_crt>
        if( ret != 0 )
 8083b28:	b110      	cbz	r0, 8083b30 <mbedtls_rsa_complete+0x134>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 8083b2a:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
 8083b2e:	e00c      	b.n	8083b4a <mbedtls_rsa_complete+0x14e>

    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
 8083b30:	4621      	mov	r1, r4
 8083b32:	4638      	mov	r0, r7
}
 8083b34:	b007      	add	sp, #28
 8083b36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
 8083b3a:	f7ff bec7 	b.w	80838cc <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;

    /* These three alternatives are mutually exclusive */
    const int is_priv = n_missing || pq_missing || d_missing;

    if( !is_priv && !is_pub )
 8083b3e:	b90c      	cbnz	r4, 8083b44 <mbedtls_rsa_complete+0x148>
 8083b40:	b112      	cbz	r2, 8083b48 <mbedtls_rsa_complete+0x14c>
 8083b42:	4626      	mov	r6, r4
 8083b44:	9404      	str	r4, [sp, #16]
 8083b46:	e7bf      	b.n	8083ac8 <mbedtls_rsa_complete+0xcc>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8083b48:	4801      	ldr	r0, [pc, #4]	; (8083b50 <mbedtls_rsa_complete+0x154>)
    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
}
 8083b4a:	b007      	add	sp, #28
 8083b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8083b50:	ffffbf80 	.word	0xffffbf80

08083b54 <mbedtls_rsa_init>:
 * Initialize an RSA context
 */
void mbedtls_rsa_init( mbedtls_rsa_context *ctx,
               int padding,
               int hash_id )
{
 8083b54:	b570      	push	{r4, r5, r6, lr}
 8083b56:	4604      	mov	r4, r0
 8083b58:	460e      	mov	r6, r1
 8083b5a:	4615      	mov	r5, r2
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
 8083b5c:	2100      	movs	r1, #0
 8083b5e:	22ac      	movs	r2, #172	; 0xac
 8083b60:	f00e fc19 	bl	8092396 <memset>
/*
 * Set padding for an existing RSA context
 */
void mbedtls_rsa_set_padding( mbedtls_rsa_context *ctx, int padding, int hash_id )
{
    ctx->padding = padding;
 8083b64:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
    ctx->hash_id = hash_id;
 8083b68:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 8083b6c:	bd70      	pop	{r4, r5, r6, pc}

08083b6e <mbedtls_rsa_get_len>:
 */

size_t mbedtls_rsa_get_len( const mbedtls_rsa_context *ctx )
{
    return( ctx->len );
}
 8083b6e:	6840      	ldr	r0, [r0, #4]
 8083b70:	4770      	bx	lr
	...

08083b74 <mbedtls_rsa_check_pubkey>:

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
 8083b74:	b570      	push	{r4, r5, r6, lr}
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
 8083b76:	2100      	movs	r1, #0

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
 8083b78:	4604      	mov	r4, r0
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
 8083b7a:	f7ff fea7 	bl	80838cc <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
 8083b7e:	4605      	mov	r5, r0
 8083b80:	b9b8      	cbnz	r0, 8083bb2 <mbedtls_rsa_check_pubkey+0x3e>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );

    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
 8083b82:	f104 0608 	add.w	r6, r4, #8
 8083b86:	4630      	mov	r0, r6
 8083b88:	f007 faeb 	bl	808b162 <mbedtls_mpi_bitlen>
 8083b8c:	287f      	cmp	r0, #127	; 0x7f
 8083b8e:	d910      	bls.n	8083bb2 <mbedtls_rsa_check_pubkey+0x3e>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 8083b90:	3414      	adds	r4, #20
 8083b92:	4629      	mov	r1, r5
 8083b94:	4620      	mov	r0, r4
 8083b96:	f007 faba 	bl	808b10e <mbedtls_mpi_get_bit>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 8083b9a:	b150      	cbz	r0, 8083bb2 <mbedtls_rsa_check_pubkey+0x3e>
 8083b9c:	4620      	mov	r0, r4
 8083b9e:	f007 fae0 	bl	808b162 <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 8083ba2:	2801      	cmp	r0, #1
 8083ba4:	d905      	bls.n	8083bb2 <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
 8083ba6:	4631      	mov	r1, r6
 8083ba8:	4620      	mov	r0, r4
 8083baa:	f007 fc86 	bl	808b4ba <mbedtls_mpi_cmp_mpi>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 8083bae:	2800      	cmp	r0, #0
 8083bb0:	db00      	blt.n	8083bb4 <mbedtls_rsa_check_pubkey+0x40>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 8083bb2:	4d01      	ldr	r5, [pc, #4]	; (8083bb8 <mbedtls_rsa_check_pubkey+0x44>)
    }

    return( 0 );
}
 8083bb4:	4628      	mov	r0, r5
 8083bb6:	bd70      	pop	{r4, r5, r6, pc}
 8083bb8:	ffffbe00 	.word	0xffffbe00

08083bbc <mbedtls_rsa_check_privkey>:

/*
 * Check for the consistency of all fields in an RSA private key context
 */
int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
{
 8083bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8083bbe:	b085      	sub	sp, #20
 8083bc0:	4604      	mov	r4, r0
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
 8083bc2:	f7ff ffd7 	bl	8083b74 <mbedtls_rsa_check_pubkey>
 8083bc6:	bb28      	cbnz	r0, 8083c14 <mbedtls_rsa_check_privkey+0x58>
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
 8083bc8:	2101      	movs	r1, #1
 8083bca:	4620      	mov	r0, r4
 8083bcc:	f7ff fe7e 	bl	80838cc <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
/*
 * Check for the consistency of all fields in an RSA private key context
 */
int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
{
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
 8083bd0:	bb00      	cbnz	r0, 8083c14 <mbedtls_rsa_check_privkey+0x58>
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_rsa_validate_params( &ctx->N, &ctx->P, &ctx->Q,
 8083bd2:	f104 0314 	add.w	r3, r4, #20
 8083bd6:	f104 052c 	add.w	r5, r4, #44	; 0x2c
 8083bda:	f104 0638 	add.w	r6, r4, #56	; 0x38
 8083bde:	f104 0720 	add.w	r7, r4, #32
 8083be2:	9002      	str	r0, [sp, #8]
 8083be4:	9001      	str	r0, [sp, #4]
 8083be6:	9300      	str	r3, [sp, #0]
 8083be8:	4632      	mov	r2, r6
 8083bea:	463b      	mov	r3, r7
 8083bec:	4629      	mov	r1, r5
 8083bee:	f104 0008 	add.w	r0, r4, #8
 8083bf2:	f00b f8e7 	bl	808edc4 <mbedtls_rsa_validate_params>
 8083bf6:	b968      	cbnz	r0, 8083c14 <mbedtls_rsa_check_privkey+0x58>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

#if !defined(MBEDTLS_RSA_NO_CRT)
    else if( mbedtls_rsa_validate_crt( &ctx->P, &ctx->Q, &ctx->D,
 8083bf8:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8083bfc:	9301      	str	r3, [sp, #4]
 8083bfe:	f104 0350 	add.w	r3, r4, #80	; 0x50
 8083c02:	9300      	str	r3, [sp, #0]
 8083c04:	463a      	mov	r2, r7
 8083c06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8083c0a:	4631      	mov	r1, r6
 8083c0c:	4628      	mov	r0, r5
 8083c0e:	f00b f859 	bl	808ecc4 <mbedtls_rsa_validate_crt>
 8083c12:	b100      	cbz	r0, 8083c16 <mbedtls_rsa_check_privkey+0x5a>
int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
{
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 8083c14:	4801      	ldr	r0, [pc, #4]	; (8083c1c <mbedtls_rsa_check_privkey+0x60>)
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }
#endif

    return( 0 );
}
 8083c16:	b005      	add	sp, #20
 8083c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083c1a:	bf00      	nop
 8083c1c:	ffffbe00 	.word	0xffffbe00

08083c20 <mbedtls_rsa_check_pub_priv>:
/*
 * Check if contexts holding a public and private key match
 */
int mbedtls_rsa_check_pub_priv( const mbedtls_rsa_context *pub,
                                const mbedtls_rsa_context *prv )
{
 8083c20:	b538      	push	{r3, r4, r5, lr}
 8083c22:	4605      	mov	r5, r0
 8083c24:	460c      	mov	r4, r1
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
 8083c26:	f7ff ffa5 	bl	8083b74 <mbedtls_rsa_check_pubkey>
 8083c2a:	b950      	cbnz	r0, 8083c42 <mbedtls_rsa_check_pub_priv+0x22>
        mbedtls_rsa_check_privkey( prv ) != 0 )
 8083c2c:	4620      	mov	r0, r4
 8083c2e:	f7ff ffc5 	bl	8083bbc <mbedtls_rsa_check_privkey>
 * Check if contexts holding a public and private key match
 */
int mbedtls_rsa_check_pub_priv( const mbedtls_rsa_context *pub,
                                const mbedtls_rsa_context *prv )
{
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
 8083c32:	b930      	cbnz	r0, 8083c42 <mbedtls_rsa_check_pub_priv+0x22>
        mbedtls_rsa_check_privkey( prv ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 8083c34:	f104 0108 	add.w	r1, r4, #8
 8083c38:	f105 0008 	add.w	r0, r5, #8
 8083c3c:	f007 fc3d 	bl	808b4ba <mbedtls_mpi_cmp_mpi>
 8083c40:	b108      	cbz	r0, 8083c46 <mbedtls_rsa_check_pub_priv+0x26>
                                const mbedtls_rsa_context *prv )
{
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
        mbedtls_rsa_check_privkey( prv ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 8083c42:	4805      	ldr	r0, [pc, #20]	; (8083c58 <mbedtls_rsa_check_pub_priv+0x38>)
 8083c44:	bd38      	pop	{r3, r4, r5, pc}
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
        mbedtls_mpi_cmp_mpi( &pub->E, &prv->E ) != 0 )
 8083c46:	f104 0114 	add.w	r1, r4, #20
 8083c4a:	f105 0014 	add.w	r0, r5, #20
 8083c4e:	f007 fc34 	bl	808b4ba <mbedtls_mpi_cmp_mpi>
        mbedtls_rsa_check_privkey( prv ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 8083c52:	2800      	cmp	r0, #0
 8083c54:	d1f5      	bne.n	8083c42 <mbedtls_rsa_check_pub_priv+0x22>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    return( 0 );
}
 8083c56:	bd38      	pop	{r3, r4, r5, pc}
 8083c58:	ffffbe00 	.word	0xffffbe00

08083c5c <mbedtls_rsa_public>:
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
 8083c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8083c60:	460c      	mov	r4, r1
 8083c62:	b086      	sub	sp, #24
    int ret;
    size_t olen;
    mbedtls_mpi T;

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
 8083c64:	2100      	movs	r1, #0
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
 8083c66:	4605      	mov	r5, r0
 8083c68:	4617      	mov	r7, r2
    int ret;
    size_t olen;
    mbedtls_mpi T;

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
 8083c6a:	f7ff fe2f 	bl	80838cc <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
 8083c6e:	4606      	mov	r6, r0
 8083c70:	bb78      	cbnz	r0, 8083cd2 <mbedtls_rsa_public+0x76>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T );
 8083c72:	a803      	add	r0, sp, #12
 8083c74:	f007 f9bc 	bl	808aff0 <mbedtls_mpi_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 8083c78:	4621      	mov	r1, r4
 8083c7a:	686a      	ldr	r2, [r5, #4]
 8083c7c:	a803      	add	r0, sp, #12
 8083c7e:	f007 fa96 	bl	808b1ae <mbedtls_mpi_read_binary>
 8083c82:	4604      	mov	r4, r0
 8083c84:	b9f0      	cbnz	r0, 8083cc4 <mbedtls_rsa_public+0x68>

    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 8083c86:	f105 0408 	add.w	r4, r5, #8
 8083c8a:	4621      	mov	r1, r4
 8083c8c:	a803      	add	r0, sp, #12
 8083c8e:	f007 fc14 	bl	808b4ba <mbedtls_mpi_cmp_mpi>
 8083c92:	2800      	cmp	r0, #0
 8083c94:	da14      	bge.n	8083cc0 <mbedtls_rsa_public+0x64>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    olen = ctx->len;
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 8083c96:	f105 0368 	add.w	r3, r5, #104	; 0x68
 8083c9a:	a903      	add	r1, sp, #12
 8083c9c:	9300      	str	r3, [sp, #0]
 8083c9e:	f105 0214 	add.w	r2, r5, #20
 8083ca2:	4623      	mov	r3, r4
 8083ca4:	4608      	mov	r0, r1
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    olen = ctx->len;
 8083ca6:	f8d5 8004 	ldr.w	r8, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 8083caa:	f007 ffd8 	bl	808bc5e <mbedtls_mpi_exp_mod>
 8083cae:	4604      	mov	r4, r0
 8083cb0:	b940      	cbnz	r0, 8083cc4 <mbedtls_rsa_public+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 8083cb2:	4642      	mov	r2, r8
 8083cb4:	4639      	mov	r1, r7
 8083cb6:	a803      	add	r0, sp, #12
 8083cb8:	f007 faae 	bl	808b218 <mbedtls_mpi_write_binary>
 8083cbc:	4604      	mov	r4, r0
 8083cbe:	e001      	b.n	8083cc4 <mbedtls_rsa_public+0x68>

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );

    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 8083cc0:	f06f 0403 	mvn.w	r4, #3
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &T );
 8083cc4:	a803      	add	r0, sp, #12
 8083cc6:	f007 f99a 	bl	808affe <mbedtls_mpi_free>

    if( ret != 0 )
 8083cca:	b11c      	cbz	r4, 8083cd4 <mbedtls_rsa_public+0x78>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
 8083ccc:	f5a4 4685 	sub.w	r6, r4, #17024	; 0x4280
 8083cd0:	e000      	b.n	8083cd4 <mbedtls_rsa_public+0x78>
    int ret;
    size_t olen;
    mbedtls_mpi T;

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8083cd2:	4e02      	ldr	r6, [pc, #8]	; (8083cdc <mbedtls_rsa_public+0x80>)

    if( ret != 0 )
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );

    return( 0 );
}
 8083cd4:	4630      	mov	r0, r6
 8083cd6:	b006      	add	sp, #24
 8083cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8083cdc:	ffffbf80 	.word	0xffffbf80

08083ce0 <mbedtls_rsa_private>:
int mbedtls_rsa_private( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t),
                 void *p_rng,
                 const unsigned char *input,
                 unsigned char *output )
{
 8083ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8083ce4:	460e      	mov	r6, r1
 8083ce6:	b0a5      	sub	sp, #148	; 0x94

    /* Temporaries holding the initial input and the double
     * checked result; should be the same in the end. */
    mbedtls_mpi I, C;

    if( rsa_check_context( ctx, 1             /* private key checks */,
 8083ce8:	2101      	movs	r1, #1
int mbedtls_rsa_private( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t),
                 void *p_rng,
                 const unsigned char *input,
                 unsigned char *output )
{
 8083cea:	4604      	mov	r4, r0
 8083cec:	4692      	mov	sl, r2
 8083cee:	461d      	mov	r5, r3

    /* Temporaries holding the initial input and the double
     * checked result; should be the same in the end. */
    mbedtls_mpi I, C;

    if( rsa_check_context( ctx, 1             /* private key checks */,
 8083cf0:	f7ff fdec 	bl	80838cc <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
 8083cf4:	9003      	str	r0, [sp, #12]
 8083cf6:	2800      	cmp	r0, #0
 8083cf8:	f040 819b 	bne.w	8084032 <mbedtls_rsa_private+0x352>
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    /* MPI Initialization */
    mbedtls_mpi_init( &T );
 8083cfc:	a806      	add	r0, sp, #24
 8083cfe:	f007 f977 	bl	808aff0 <mbedtls_mpi_init>

    mbedtls_mpi_init( &P1 );
 8083d02:	a809      	add	r0, sp, #36	; 0x24
 8083d04:	f007 f974 	bl	808aff0 <mbedtls_mpi_init>
    mbedtls_mpi_init( &Q1 );
 8083d08:	a80c      	add	r0, sp, #48	; 0x30
 8083d0a:	f007 f971 	bl	808aff0 <mbedtls_mpi_init>
    mbedtls_mpi_init( &R );
 8083d0e:	a80f      	add	r0, sp, #60	; 0x3c
 8083d10:	f007 f96e 	bl	808aff0 <mbedtls_mpi_init>

    if( f_rng != NULL )
 8083d14:	b12e      	cbz	r6, 8083d22 <mbedtls_rsa_private+0x42>
    {
#if defined(MBEDTLS_RSA_NO_CRT)
        mbedtls_mpi_init( &D_blind );
#else
        mbedtls_mpi_init( &DP_blind );
 8083d16:	a818      	add	r0, sp, #96	; 0x60
 8083d18:	f007 f96a 	bl	808aff0 <mbedtls_mpi_init>
        mbedtls_mpi_init( &DQ_blind );
 8083d1c:	a81b      	add	r0, sp, #108	; 0x6c
 8083d1e:	f007 f967 	bl	808aff0 <mbedtls_mpi_init>
#endif
    }

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_init( &TP ); mbedtls_mpi_init( &TQ );
 8083d22:	a812      	add	r0, sp, #72	; 0x48
 8083d24:	f007 f964 	bl	808aff0 <mbedtls_mpi_init>
 8083d28:	a815      	add	r0, sp, #84	; 0x54
 8083d2a:	f007 f961 	bl	808aff0 <mbedtls_mpi_init>
#endif

    mbedtls_mpi_init( &I );
 8083d2e:	a81e      	add	r0, sp, #120	; 0x78
 8083d30:	f007 f95e 	bl	808aff0 <mbedtls_mpi_init>
    mbedtls_mpi_init( &C );
 8083d34:	a821      	add	r0, sp, #132	; 0x84
 8083d36:	f007 f95b 	bl	808aff0 <mbedtls_mpi_init>

    /* End of MPI initialization */

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 8083d3a:	6862      	ldr	r2, [r4, #4]
 8083d3c:	4629      	mov	r1, r5
 8083d3e:	a806      	add	r0, sp, #24
 8083d40:	f007 fa35 	bl	808b1ae <mbedtls_mpi_read_binary>
 8083d44:	4607      	mov	r7, r0
 8083d46:	2800      	cmp	r0, #0
 8083d48:	f040 8150 	bne.w	8083fec <mbedtls_rsa_private+0x30c>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 8083d4c:	f104 0508 	add.w	r5, r4, #8
 8083d50:	4629      	mov	r1, r5
 8083d52:	a806      	add	r0, sp, #24
 8083d54:	f007 fbb1 	bl	808b4ba <mbedtls_mpi_cmp_mpi>
 8083d58:	2800      	cmp	r0, #0
 8083d5a:	f280 8143 	bge.w	8083fe4 <mbedtls_rsa_private+0x304>
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );
 8083d5e:	a906      	add	r1, sp, #24
 8083d60:	a81e      	add	r0, sp, #120	; 0x78
 8083d62:	f007 f98e 	bl	808b082 <mbedtls_mpi_copy>
 8083d66:	4607      	mov	r7, r0
 8083d68:	2800      	cmp	r0, #0
 8083d6a:	f040 813f 	bne.w	8083fec <mbedtls_rsa_private+0x30c>
    mbedtls_mpi DP_blind, DQ_blind;

    /* Pointers to actual exponents to be used - either the unblinded
     * or the blinded ones, depending on the presence of a PRNG. */
    mbedtls_mpi *DP = &ctx->DP;
    mbedtls_mpi *DQ = &ctx->DQ;
 8083d6e:	f104 0350 	add.w	r3, r4, #80	; 0x50
     * the mod p resp. mod q computation (if used). */
    mbedtls_mpi DP_blind, DQ_blind;

    /* Pointers to actual exponents to be used - either the unblinded
     * or the blinded ones, depending on the presence of a PRNG. */
    mbedtls_mpi *DP = &ctx->DP;
 8083d72:	f104 0944 	add.w	r9, r4, #68	; 0x44
    mbedtls_mpi *DQ = &ctx->DQ;
 8083d76:	9304      	str	r3, [sp, #16]
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );

    if( f_rng != NULL )
 8083d78:	2e00      	cmp	r6, #0
 8083d7a:	f000 80c5 	beq.w	8083f08 <mbedtls_rsa_private+0x228>
static int rsa_prepare_blinding( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    int ret, count = 0;

    if( ctx->Vf.p != NULL )
 8083d7e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8083d82:	b323      	cbz	r3, 8083dce <mbedtls_rsa_private+0xee>
    {
        /* We already have blinding values, just update them by squaring */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vi, &ctx->Vi ) );
 8083d84:	f104 088c 	add.w	r8, r4, #140	; 0x8c
 8083d88:	4642      	mov	r2, r8
 8083d8a:	4641      	mov	r1, r8
 8083d8c:	4640      	mov	r0, r8
 8083d8e:	f007 fcf8 	bl	808b782 <mbedtls_mpi_mul_mpi>
 8083d92:	4607      	mov	r7, r0
 8083d94:	2800      	cmp	r0, #0
 8083d96:	f040 8129 	bne.w	8083fec <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vi, &ctx->Vi, &ctx->N ) );
 8083d9a:	462a      	mov	r2, r5
 8083d9c:	4641      	mov	r1, r8
 8083d9e:	4640      	mov	r0, r8
 8083da0:	f007 ff2b 	bl	808bbfa <mbedtls_mpi_mod_mpi>
 8083da4:	4607      	mov	r7, r0
 8083da6:	2800      	cmp	r0, #0
 8083da8:	f040 8120 	bne.w	8083fec <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vf, &ctx->Vf, &ctx->Vf ) );
 8083dac:	f104 0898 	add.w	r8, r4, #152	; 0x98
 8083db0:	4642      	mov	r2, r8
 8083db2:	4641      	mov	r1, r8
 8083db4:	4640      	mov	r0, r8
 8083db6:	f007 fce4 	bl	808b782 <mbedtls_mpi_mul_mpi>
 8083dba:	4607      	mov	r7, r0
 8083dbc:	2800      	cmp	r0, #0
 8083dbe:	f040 8115 	bne.w	8083fec <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vf, &ctx->Vf, &ctx->N ) );
 8083dc2:	462a      	mov	r2, r5
 8083dc4:	4641      	mov	r1, r8
 8083dc6:	4640      	mov	r0, r8
 8083dc8:	f007 ff17 	bl	808bbfa <mbedtls_mpi_mod_mpi>
 8083dcc:	e037      	b.n	8083e3e <mbedtls_rsa_private+0x15e>
static int rsa_prepare_blinding( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    int ret, count = 0;

    if( ctx->Vf.p != NULL )
 8083dce:	230c      	movs	r3, #12
 8083dd0:	9305      	str	r3, [sp, #20]
    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
            return( MBEDTLS_ERR_RSA_RNG_FAILED );

        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 8083dd2:	f104 0b98 	add.w	fp, r4, #152	; 0x98
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 8083dd6:	f104 088c 	add.w	r8, r4, #140	; 0x8c
        goto cleanup;
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
 8083dda:	9b05      	ldr	r3, [sp, #20]
 8083ddc:	3b01      	subs	r3, #1
 8083dde:	9305      	str	r3, [sp, #20]
 8083de0:	f000 812a 	beq.w	8084038 <mbedtls_rsa_private+0x358>
            return( MBEDTLS_ERR_RSA_RNG_FAILED );

        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 8083de4:	6861      	ldr	r1, [r4, #4]
 8083de6:	4653      	mov	r3, sl
 8083de8:	4632      	mov	r2, r6
 8083dea:	3901      	subs	r1, #1
 8083dec:	4658      	mov	r0, fp
 8083dee:	f008 f9da 	bl	808c1a6 <mbedtls_mpi_fill_random>
 8083df2:	4607      	mov	r7, r0
 8083df4:	2800      	cmp	r0, #0
 8083df6:	f040 80f9 	bne.w	8083fec <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 8083dfa:	462a      	mov	r2, r5
 8083dfc:	4659      	mov	r1, fp
 8083dfe:	4640      	mov	r0, r8
 8083e00:	f008 f94c 	bl	808c09c <mbedtls_mpi_gcd>
 8083e04:	4607      	mov	r7, r0
 8083e06:	2800      	cmp	r0, #0
 8083e08:	f040 80f0 	bne.w	8083fec <mbedtls_rsa_private+0x30c>
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );
 8083e0c:	2101      	movs	r1, #1
 8083e0e:	4640      	mov	r0, r8
 8083e10:	f007 fb98 	bl	808b544 <mbedtls_mpi_cmp_int>

        goto cleanup;
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
 8083e14:	2800      	cmp	r0, #0
 8083e16:	d1e0      	bne.n	8083dda <mbedtls_rsa_private+0xfa>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );

    /* Blinding value: Vi =  Vf^(-e) mod N */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 8083e18:	462a      	mov	r2, r5
 8083e1a:	4659      	mov	r1, fp
 8083e1c:	4640      	mov	r0, r8
 8083e1e:	f008 f9e5 	bl	808c1ec <mbedtls_mpi_inv_mod>
 8083e22:	4607      	mov	r7, r0
 8083e24:	2800      	cmp	r0, #0
 8083e26:	f040 80e1 	bne.w	8083fec <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vi, &ctx->Vi, &ctx->E, &ctx->N, &ctx->RN ) );
 8083e2a:	f104 0368 	add.w	r3, r4, #104	; 0x68
 8083e2e:	9300      	str	r3, [sp, #0]
 8083e30:	f104 0214 	add.w	r2, r4, #20
 8083e34:	462b      	mov	r3, r5
 8083e36:	4641      	mov	r1, r8
 8083e38:	4640      	mov	r0, r8
 8083e3a:	f007 ff10 	bl	808bc5e <mbedtls_mpi_exp_mod>
 8083e3e:	4607      	mov	r7, r0
    {
        /*
         * Blinding
         * T = T * Vi mod N
         */
        MBEDTLS_MPI_CHK( rsa_prepare_blinding( ctx, f_rng, p_rng ) );
 8083e40:	2800      	cmp	r0, #0
 8083e42:	f040 80d3 	bne.w	8083fec <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vi ) );
 8083e46:	a906      	add	r1, sp, #24
 8083e48:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 8083e4c:	4608      	mov	r0, r1
 8083e4e:	f007 fc98 	bl	808b782 <mbedtls_mpi_mul_mpi>
 8083e52:	4607      	mov	r7, r0
 8083e54:	2800      	cmp	r0, #0
 8083e56:	f040 80c9 	bne.w	8083fec <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 8083e5a:	a906      	add	r1, sp, #24
 8083e5c:	462a      	mov	r2, r5
 8083e5e:	4608      	mov	r0, r1
 8083e60:	f007 fecb 	bl	808bbfa <mbedtls_mpi_mod_mpi>
 8083e64:	4607      	mov	r7, r0
 8083e66:	2800      	cmp	r0, #0
 8083e68:	f040 80c0 	bne.w	8083fec <mbedtls_rsa_private+0x30c>

        /*
         * Exponent blinding
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
 8083e6c:	2201      	movs	r2, #1
 8083e6e:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8083e72:	a809      	add	r0, sp, #36	; 0x24
 8083e74:	f007 fc6f 	bl	808b756 <mbedtls_mpi_sub_int>
 8083e78:	4607      	mov	r7, r0
 8083e7a:	2800      	cmp	r0, #0
 8083e7c:	f040 80b6 	bne.w	8083fec <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
 8083e80:	2201      	movs	r2, #1
 8083e82:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8083e86:	a80c      	add	r0, sp, #48	; 0x30
 8083e88:	f007 fc65 	bl	808b756 <mbedtls_mpi_sub_int>
 8083e8c:	4607      	mov	r7, r0
 8083e8e:	2800      	cmp	r0, #0
 8083e90:	f040 80ac 	bne.w	8083fec <mbedtls_rsa_private+0x30c>
        D = &D_blind;
#else
        /*
         * DP_blind = ( P - 1 ) * R + DP
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 8083e94:	4653      	mov	r3, sl
 8083e96:	4632      	mov	r2, r6
 8083e98:	211c      	movs	r1, #28
 8083e9a:	a80f      	add	r0, sp, #60	; 0x3c
 8083e9c:	f008 f983 	bl	808c1a6 <mbedtls_mpi_fill_random>
 8083ea0:	4607      	mov	r7, r0
 8083ea2:	2800      	cmp	r0, #0
 8083ea4:	f040 80a2 	bne.w	8083fec <mbedtls_rsa_private+0x30c>
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
 8083ea8:	aa0f      	add	r2, sp, #60	; 0x3c
 8083eaa:	a909      	add	r1, sp, #36	; 0x24
 8083eac:	a818      	add	r0, sp, #96	; 0x60
 8083eae:	f007 fc68 	bl	808b782 <mbedtls_mpi_mul_mpi>
 8083eb2:	4607      	mov	r7, r0
 8083eb4:	2800      	cmp	r0, #0
 8083eb6:	f040 8099 	bne.w	8083fec <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
 8083eba:	a918      	add	r1, sp, #96	; 0x60
 8083ebc:	464a      	mov	r2, r9
 8083ebe:	4608      	mov	r0, r1
 8083ec0:	f007 fbf0 	bl	808b6a4 <mbedtls_mpi_add_mpi>
 8083ec4:	4607      	mov	r7, r0
 8083ec6:	2800      	cmp	r0, #0
 8083ec8:	f040 8090 	bne.w	8083fec <mbedtls_rsa_private+0x30c>
        DP = &DP_blind;

        /*
         * DQ_blind = ( Q - 1 ) * R + DQ
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 8083ecc:	4653      	mov	r3, sl
 8083ece:	4632      	mov	r2, r6
 8083ed0:	211c      	movs	r1, #28
 8083ed2:	a80f      	add	r0, sp, #60	; 0x3c
 8083ed4:	f008 f967 	bl	808c1a6 <mbedtls_mpi_fill_random>
 8083ed8:	4607      	mov	r7, r0
 8083eda:	2800      	cmp	r0, #0
 8083edc:	f040 8086 	bne.w	8083fec <mbedtls_rsa_private+0x30c>
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DQ_blind, &Q1, &R ) );
 8083ee0:	aa0f      	add	r2, sp, #60	; 0x3c
 8083ee2:	a90c      	add	r1, sp, #48	; 0x30
 8083ee4:	a81b      	add	r0, sp, #108	; 0x6c
 8083ee6:	f007 fc4c 	bl	808b782 <mbedtls_mpi_mul_mpi>
 8083eea:	4607      	mov	r7, r0
 8083eec:	2800      	cmp	r0, #0
 8083eee:	d17d      	bne.n	8083fec <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DQ_blind, &DQ_blind,
 8083ef0:	a91b      	add	r1, sp, #108	; 0x6c
 8083ef2:	9a04      	ldr	r2, [sp, #16]
 8083ef4:	4608      	mov	r0, r1
 8083ef6:	f007 fbd5 	bl	808b6a4 <mbedtls_mpi_add_mpi>
 8083efa:	4607      	mov	r7, r0
 8083efc:	2800      	cmp	r0, #0
 8083efe:	d175      	bne.n	8083fec <mbedtls_rsa_private+0x30c>
                    &ctx->DQ ) );

        DQ = &DQ_blind;
 8083f00:	ab1b      	add	r3, sp, #108	; 0x6c
 8083f02:	9304      	str	r3, [sp, #16]
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
                    &ctx->DP ) );

        DP = &DP_blind;
 8083f04:	f10d 0960 	add.w	r9, sp, #96	; 0x60
     *
     * TP = input ^ dP mod P
     * TQ = input ^ dQ mod Q
     */

    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TP, &T, DP, &ctx->P, &ctx->RP ) );
 8083f08:	f104 0374 	add.w	r3, r4, #116	; 0x74
 8083f0c:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8083f10:	9300      	str	r3, [sp, #0]
 8083f12:	464a      	mov	r2, r9
 8083f14:	4643      	mov	r3, r8
 8083f16:	a906      	add	r1, sp, #24
 8083f18:	a812      	add	r0, sp, #72	; 0x48
 8083f1a:	f007 fea0 	bl	808bc5e <mbedtls_mpi_exp_mod>
 8083f1e:	4607      	mov	r7, r0
 8083f20:	2800      	cmp	r0, #0
 8083f22:	d163      	bne.n	8083fec <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TQ, &T, DQ, &ctx->Q, &ctx->RQ ) );
 8083f24:	f104 0380 	add.w	r3, r4, #128	; 0x80
 8083f28:	f104 0938 	add.w	r9, r4, #56	; 0x38
 8083f2c:	9300      	str	r3, [sp, #0]
 8083f2e:	9a04      	ldr	r2, [sp, #16]
 8083f30:	464b      	mov	r3, r9
 8083f32:	a906      	add	r1, sp, #24
 8083f34:	a815      	add	r0, sp, #84	; 0x54
 8083f36:	f007 fe92 	bl	808bc5e <mbedtls_mpi_exp_mod>
 8083f3a:	4607      	mov	r7, r0
 8083f3c:	2800      	cmp	r0, #0
 8083f3e:	d155      	bne.n	8083fec <mbedtls_rsa_private+0x30c>

    /*
     * T = (TP - TQ) * (Q^-1 mod P) mod P
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T, &TP, &TQ ) );
 8083f40:	aa15      	add	r2, sp, #84	; 0x54
 8083f42:	a912      	add	r1, sp, #72	; 0x48
 8083f44:	a806      	add	r0, sp, #24
 8083f46:	f007 fbce 	bl	808b6e6 <mbedtls_mpi_sub_mpi>
 8083f4a:	4607      	mov	r7, r0
 8083f4c:	2800      	cmp	r0, #0
 8083f4e:	d14d      	bne.n	8083fec <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->QP ) );
 8083f50:	f104 025c 	add.w	r2, r4, #92	; 0x5c
 8083f54:	a906      	add	r1, sp, #24
 8083f56:	a812      	add	r0, sp, #72	; 0x48
 8083f58:	f007 fc13 	bl	808b782 <mbedtls_mpi_mul_mpi>
 8083f5c:	4607      	mov	r7, r0
 8083f5e:	2800      	cmp	r0, #0
 8083f60:	d144      	bne.n	8083fec <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &TP, &ctx->P ) );
 8083f62:	4642      	mov	r2, r8
 8083f64:	a912      	add	r1, sp, #72	; 0x48
 8083f66:	a806      	add	r0, sp, #24
 8083f68:	f007 fe47 	bl	808bbfa <mbedtls_mpi_mod_mpi>
 8083f6c:	4607      	mov	r7, r0
 8083f6e:	2800      	cmp	r0, #0
 8083f70:	d13c      	bne.n	8083fec <mbedtls_rsa_private+0x30c>

    /*
     * T = TQ + T * Q
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->Q ) );
 8083f72:	464a      	mov	r2, r9
 8083f74:	a906      	add	r1, sp, #24
 8083f76:	a812      	add	r0, sp, #72	; 0x48
 8083f78:	f007 fc03 	bl	808b782 <mbedtls_mpi_mul_mpi>
 8083f7c:	4607      	mov	r7, r0
 8083f7e:	2800      	cmp	r0, #0
 8083f80:	d134      	bne.n	8083fec <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T, &TQ, &TP ) );
 8083f82:	aa12      	add	r2, sp, #72	; 0x48
 8083f84:	a915      	add	r1, sp, #84	; 0x54
 8083f86:	a806      	add	r0, sp, #24
 8083f88:	f007 fb8c 	bl	808b6a4 <mbedtls_mpi_add_mpi>
 8083f8c:	4607      	mov	r7, r0
 8083f8e:	bb68      	cbnz	r0, 8083fec <mbedtls_rsa_private+0x30c>
#endif /* MBEDTLS_RSA_NO_CRT */

    if( f_rng != NULL )
 8083f90:	b966      	cbnz	r6, 8083fac <mbedtls_rsa_private+0x2cc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
    }

    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
 8083f92:	f104 0368 	add.w	r3, r4, #104	; 0x68
 8083f96:	9300      	str	r3, [sp, #0]
 8083f98:	f104 0214 	add.w	r2, r4, #20
 8083f9c:	462b      	mov	r3, r5
 8083f9e:	a906      	add	r1, sp, #24
 8083fa0:	a821      	add	r0, sp, #132	; 0x84
 8083fa2:	f007 fe5c 	bl	808bc5e <mbedtls_mpi_exp_mod>
 8083fa6:	4607      	mov	r7, r0
 8083fa8:	bb00      	cbnz	r0, 8083fec <mbedtls_rsa_private+0x30c>
 8083faa:	e00f      	b.n	8083fcc <mbedtls_rsa_private+0x2ec>
    {
        /*
         * Unblind
         * T = T * Vf mod N
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
 8083fac:	a906      	add	r1, sp, #24
 8083fae:	f104 0298 	add.w	r2, r4, #152	; 0x98
 8083fb2:	4608      	mov	r0, r1
 8083fb4:	f007 fbe5 	bl	808b782 <mbedtls_mpi_mul_mpi>
 8083fb8:	4607      	mov	r7, r0
 8083fba:	b9b8      	cbnz	r0, 8083fec <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 8083fbc:	a906      	add	r1, sp, #24
 8083fbe:	462a      	mov	r2, r5
 8083fc0:	4608      	mov	r0, r1
 8083fc2:	f007 fe1a 	bl	808bbfa <mbedtls_mpi_mod_mpi>
 8083fc6:	4607      	mov	r7, r0
 8083fc8:	b980      	cbnz	r0, 8083fec <mbedtls_rsa_private+0x30c>
 8083fca:	e7e2      	b.n	8083f92 <mbedtls_rsa_private+0x2b2>
    }

    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
                                          &ctx->N, &ctx->RN ) );
    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
 8083fcc:	a91e      	add	r1, sp, #120	; 0x78
 8083fce:	a821      	add	r0, sp, #132	; 0x84
 8083fd0:	f007 fa73 	bl	808b4ba <mbedtls_mpi_cmp_mpi>
 8083fd4:	b948      	cbnz	r0, 8083fea <mbedtls_rsa_private+0x30a>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
        goto cleanup;
    }

    olen = ctx->len;
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 8083fd6:	6862      	ldr	r2, [r4, #4]
 8083fd8:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8083fda:	a806      	add	r0, sp, #24
 8083fdc:	f007 f91c 	bl	808b218 <mbedtls_mpi_write_binary>
 8083fe0:	4607      	mov	r7, r0
 8083fe2:	e003      	b.n	8083fec <mbedtls_rsa_private+0x30c>
    /* End of MPI initialization */

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 8083fe4:	f06f 0703 	mvn.w	r7, #3
 8083fe8:	e000      	b.n	8083fec <mbedtls_rsa_private+0x30c>
    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
                                          &ctx->N, &ctx->RN ) );
    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 8083fea:	4f16      	ldr	r7, [pc, #88]	; (8084044 <mbedtls_rsa_private+0x364>)
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &P1 );
 8083fec:	a809      	add	r0, sp, #36	; 0x24
 8083fee:	f007 f806 	bl	808affe <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
 8083ff2:	a80c      	add	r0, sp, #48	; 0x30
 8083ff4:	f007 f803 	bl	808affe <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
 8083ff8:	a80f      	add	r0, sp, #60	; 0x3c
 8083ffa:	f007 f800 	bl	808affe <mbedtls_mpi_free>

    if( f_rng != NULL )
 8083ffe:	b12e      	cbz	r6, 808400c <mbedtls_rsa_private+0x32c>
    {
#if defined(MBEDTLS_RSA_NO_CRT)
        mbedtls_mpi_free( &D_blind );
#else
        mbedtls_mpi_free( &DP_blind );
 8084000:	a818      	add	r0, sp, #96	; 0x60
 8084002:	f006 fffc 	bl	808affe <mbedtls_mpi_free>
        mbedtls_mpi_free( &DQ_blind );
 8084006:	a81b      	add	r0, sp, #108	; 0x6c
 8084008:	f006 fff9 	bl	808affe <mbedtls_mpi_free>
#endif
    }

    mbedtls_mpi_free( &T );
 808400c:	a806      	add	r0, sp, #24
 808400e:	f006 fff6 	bl	808affe <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &TP ); mbedtls_mpi_free( &TQ );
 8084012:	a812      	add	r0, sp, #72	; 0x48
 8084014:	f006 fff3 	bl	808affe <mbedtls_mpi_free>
 8084018:	a815      	add	r0, sp, #84	; 0x54
 808401a:	f006 fff0 	bl	808affe <mbedtls_mpi_free>
#endif

    mbedtls_mpi_free( &C );
 808401e:	a821      	add	r0, sp, #132	; 0x84
 8084020:	f006 ffed 	bl	808affe <mbedtls_mpi_free>
    mbedtls_mpi_free( &I );
 8084024:	a81e      	add	r0, sp, #120	; 0x78
 8084026:	f006 ffea 	bl	808affe <mbedtls_mpi_free>

    if( ret != 0 )
 808402a:	b13f      	cbz	r7, 808403c <mbedtls_rsa_private+0x35c>
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );
 808402c:	f5a7 4386 	sub.w	r3, r7, #17152	; 0x4300
 8084030:	e000      	b.n	8084034 <mbedtls_rsa_private+0x354>
    mbedtls_mpi I, C;

    if( rsa_check_context( ctx, 1             /* private key checks */,
                                f_rng != NULL /* blinding y/n       */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8084032:	4b05      	ldr	r3, [pc, #20]	; (8084048 <mbedtls_rsa_private+0x368>)
 8084034:	9303      	str	r3, [sp, #12]
 8084036:	e001      	b.n	808403c <mbedtls_rsa_private+0x35c>
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
            return( MBEDTLS_ERR_RSA_RNG_FAILED );
 8084038:	4f04      	ldr	r7, [pc, #16]	; (808404c <mbedtls_rsa_private+0x36c>)
 808403a:	e7d7      	b.n	8083fec <mbedtls_rsa_private+0x30c>

    if( ret != 0 )
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );

    return( 0 );
}
 808403c:	9803      	ldr	r0, [sp, #12]
 808403e:	b025      	add	sp, #148	; 0x94
 8084040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084044:	ffffbc80 	.word	0xffffbc80
 8084048:	ffffbf80 	.word	0xffffbf80
 808404c:	ffffbb80 	.word	0xffffbb80

08084050 <mbedtls_rsa_rsaes_oaep_encrypt>:
                            int mode,
                            const unsigned char *label, size_t label_len,
                            size_t ilen,
                            const unsigned char *input,
                            unsigned char *output )
{
 8084050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    unsigned char *p = output;
    unsigned int hlen;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8084054:	2b01      	cmp	r3, #1
                            int mode,
                            const unsigned char *label, size_t label_len,
                            size_t ilen,
                            const unsigned char *input,
                            unsigned char *output )
{
 8084056:	b08b      	sub	sp, #44	; 0x2c
 8084058:	4680      	mov	r8, r0
 808405a:	468b      	mov	fp, r1
 808405c:	9203      	str	r2, [sp, #12]
 808405e:	9304      	str	r3, [sp, #16]
 8084060:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8084062:	9e18      	ldr	r6, [sp, #96]	; 0x60
    unsigned char *p = output;
    unsigned int hlen;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8084064:	d105      	bne.n	8084072 <mbedtls_rsa_rsaes_oaep_encrypt+0x22>
 8084066:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 808406a:	2b01      	cmp	r3, #1
 808406c:	d001      	beq.n	8084072 <mbedtls_rsa_rsaes_oaep_encrypt+0x22>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 808406e:	4840      	ldr	r0, [pc, #256]	; (8084170 <mbedtls_rsa_rsaes_oaep_encrypt+0x120>)
 8084070:	e07a      	b.n	8084168 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>

    if( f_rng == NULL )
 8084072:	f1bb 0f00 	cmp.w	fp, #0
 8084076:	d0fa      	beq.n	808406e <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 8084078:	f898 00a8 	ldrb.w	r0, [r8, #168]	; 0xa8
 808407c:	f003 fb14 	bl	80876a8 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8084080:	9002      	str	r0, [sp, #8]
 8084082:	2800      	cmp	r0, #0
 8084084:	d0f3      	beq.n	808406e <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
 8084086:	f8d8 4004 	ldr.w	r4, [r8, #4]
    hlen = mbedtls_md_get_size( md_info );
 808408a:	f003 fc51 	bl	8087930 <mbedtls_md_get_size>

    /* first comparison checks for overflow */
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
 808408e:	0043      	lsls	r3, r0, #1
 8084090:	9305      	str	r3, [sp, #20]
 8084092:	0042      	lsls	r2, r0, #1
 8084094:	1cbb      	adds	r3, r7, #2
 8084096:	4413      	add	r3, r2
 8084098:	429f      	cmp	r7, r3
    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
    hlen = mbedtls_md_get_size( md_info );
 808409a:	4605      	mov	r5, r0

    /* first comparison checks for overflow */
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
 808409c:	d8e7      	bhi.n	808406e <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
 808409e:	429c      	cmp	r4, r3
 80840a0:	d3e5      	bcc.n	808406e <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    memset( output, 0, olen );
 80840a2:	4622      	mov	r2, r4
 80840a4:	2100      	movs	r1, #0
 80840a6:	4630      	mov	r0, r6
 80840a8:	f00e f975 	bl	8092396 <memset>

    *p++ = 0;
 80840ac:	f106 0901 	add.w	r9, r6, #1
 80840b0:	2300      	movs	r3, #0
 80840b2:	7033      	strb	r3, [r6, #0]

    /* Generate a random octet string seed */
    if( ( ret = f_rng( p_rng, p, hlen ) ) != 0 )
 80840b4:	462a      	mov	r2, r5
 80840b6:	4649      	mov	r1, r9
 80840b8:	9803      	ldr	r0, [sp, #12]
 80840ba:	47d8      	blx	fp
 80840bc:	b110      	cbz	r0, 80840c4 <mbedtls_rsa_rsaes_oaep_encrypt+0x74>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 80840be:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
 80840c2:	e051      	b.n	8084168 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>

    p += hlen;
 80840c4:	eb09 0a05 	add.w	sl, r9, r5

    /* Construct DB */
    if( ( ret = mbedtls_md( md_info, label, label_len, p ) ) != 0 )
 80840c8:	4653      	mov	r3, sl
 80840ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80840cc:	9914      	ldr	r1, [sp, #80]	; 0x50
 80840ce:	9802      	ldr	r0, [sp, #8]
 80840d0:	f003 fb5c 	bl	808778c <mbedtls_md>
 80840d4:	2800      	cmp	r0, #0
 80840d6:	d147      	bne.n	8084168 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>
 80840d8:	9005      	str	r0, [sp, #20]
 80840da:	1ea0      	subs	r0, r4, #2
 80840dc:	1bc0      	subs	r0, r0, r7
 80840de:	006b      	lsls	r3, r5, #1
 80840e0:	4428      	add	r0, r5
 80840e2:	1ac0      	subs	r0, r0, r3
        return( ret );
    p += hlen;
    p += olen - 2 * hlen - 2 - ilen;
    *p++ = 1;
 80840e4:	2201      	movs	r2, #1
 80840e6:	f80a 2000 	strb.w	r2, [sl, r0]
    memcpy( p, input, ilen );
 80840ea:	4410      	add	r0, r2
 80840ec:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80840ee:	463a      	mov	r2, r7
 80840f0:	4450      	add	r0, sl

    mbedtls_md_init( &md_ctx );
 80840f2:	af07      	add	r7, sp, #28
    if( ( ret = mbedtls_md( md_info, label, label_len, p ) ) != 0 )
        return( ret );
    p += hlen;
    p += olen - 2 * hlen - 2 - ilen;
    *p++ = 1;
    memcpy( p, input, ilen );
 80840f4:	f00e f929 	bl	809234a <memcpy>

    mbedtls_md_init( &md_ctx );
 80840f8:	4638      	mov	r0, r7
 80840fa:	f003 fae1 	bl	80876c0 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 80840fe:	9b05      	ldr	r3, [sp, #20]
 8084100:	9902      	ldr	r1, [sp, #8]
 8084102:	461a      	mov	r2, r3
 8084104:	4638      	mov	r0, r7
 8084106:	f003 fb01 	bl	808770c <mbedtls_md_setup>
 808410a:	4602      	mov	r2, r0
 808410c:	b9a8      	cbnz	r0, 808413a <mbedtls_rsa_rsaes_oaep_encrypt+0xea>
        goto exit;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( output + hlen + 1, olen - hlen - 1, output + 1, hlen,
 808410e:	f105 0a01 	add.w	sl, r5, #1
 8084112:	3c01      	subs	r4, #1
 8084114:	44b2      	add	sl, r6
 8084116:	1b64      	subs	r4, r4, r5
 8084118:	464a      	mov	r2, r9
 808411a:	9700      	str	r7, [sp, #0]
 808411c:	462b      	mov	r3, r5
 808411e:	4621      	mov	r1, r4
 8084120:	4650      	mov	r0, sl
 8084122:	f7ff faef 	bl	8083704 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 8084126:	4602      	mov	r2, r0
 8084128:	b938      	cbnz	r0, 808413a <mbedtls_rsa_rsaes_oaep_encrypt+0xea>
                          &md_ctx ) ) != 0 )
        goto exit;

    /* maskedSeed: Apply seedMask to seed */
    if( ( ret = mgf_mask( output + 1, hlen, output + hlen + 1, olen - hlen - 1,
 808412a:	4652      	mov	r2, sl
 808412c:	9700      	str	r7, [sp, #0]
 808412e:	4623      	mov	r3, r4
 8084130:	4629      	mov	r1, r5
 8084132:	4648      	mov	r0, r9
 8084134:	f7ff fae6 	bl	8083704 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 8084138:	4602      	mov	r2, r0
                          &md_ctx ) ) != 0 )
        goto exit;

exit:
    mbedtls_md_free( &md_ctx );
 808413a:	a807      	add	r0, sp, #28
 808413c:	9202      	str	r2, [sp, #8]
 808413e:	f003 fac4 	bl	80876ca <mbedtls_md_free>

    if( ret != 0 )
 8084142:	9a02      	ldr	r2, [sp, #8]
 8084144:	b97a      	cbnz	r2, 8084166 <mbedtls_rsa_rsaes_oaep_encrypt+0x116>
        return( ret );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8084146:	9b04      	ldr	r3, [sp, #16]
 8084148:	b92b      	cbnz	r3, 8084156 <mbedtls_rsa_rsaes_oaep_encrypt+0x106>
 808414a:	4632      	mov	r2, r6
 808414c:	4631      	mov	r1, r6
 808414e:	4640      	mov	r0, r8
 8084150:	f7ff fd84 	bl	8083c5c <mbedtls_rsa_public>
 8084154:	e008      	b.n	8084168 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>
 8084156:	9600      	str	r6, [sp, #0]
 8084158:	4633      	mov	r3, r6
 808415a:	9a03      	ldr	r2, [sp, #12]
 808415c:	4659      	mov	r1, fp
 808415e:	4640      	mov	r0, r8
 8084160:	f7ff fdbe 	bl	8083ce0 <mbedtls_rsa_private>
 8084164:	e000      	b.n	8084168 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>
 8084166:	4610      	mov	r0, r2
}
 8084168:	b00b      	add	sp, #44	; 0x2c
 808416a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808416e:	bf00      	nop
 8084170:	ffffbf80 	.word	0xffffbf80

08084174 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>:
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng,
                                 int mode, size_t ilen,
                                 const unsigned char *input,
                                 unsigned char *output )
{
 8084174:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084178:	469a      	mov	sl, r3
    size_t nb_pad, olen;
    int ret;
    unsigned char *p = output;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 808417a:	f1ba 0f01 	cmp.w	sl, #1
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng,
                                 int mode, size_t ilen,
                                 const unsigned char *input,
                                 unsigned char *output )
{
 808417e:	4607      	mov	r7, r0
 8084180:	4689      	mov	r9, r1
 8084182:	4693      	mov	fp, r2
 8084184:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8084188:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808418a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    size_t nb_pad, olen;
    int ret;
    unsigned char *p = output;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 808418c:	d103      	bne.n	8084196 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x22>
 808418e:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 8084192:	2a00      	cmp	r2, #0
 8084194:	d155      	bne.n	8084242 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    // We don't check p_rng because it won't be dereferenced here
    if( f_rng == NULL || input == NULL || output == NULL )
 8084196:	f1b9 0f00 	cmp.w	r9, #0
 808419a:	d052      	beq.n	8084242 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
 808419c:	2b00      	cmp	r3, #0
 808419e:	d050      	beq.n	8084242 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
 80841a0:	2e00      	cmp	r6, #0
 80841a2:	d04e      	beq.n	8084242 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
 80841a4:	f118 020b 	adds.w	r2, r8, #11

    // We don't check p_rng because it won't be dereferenced here
    if( f_rng == NULL || input == NULL || output == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
 80841a8:	687c      	ldr	r4, [r7, #4]

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
 80841aa:	d24a      	bcs.n	8084242 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
 80841ac:	4294      	cmp	r4, r2
 80841ae:	d348      	bcc.n	8084242 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    nb_pad = olen - 3 - ilen;

    *p++ = 0;
 80841b0:	4635      	mov	r5, r6

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    nb_pad = olen - 3 - ilen;
 80841b2:	3c03      	subs	r4, #3

    *p++ = 0;
 80841b4:	2200      	movs	r2, #0

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    nb_pad = olen - 3 - ilen;
 80841b6:	ebc8 0404 	rsb	r4, r8, r4

    *p++ = 0;
 80841ba:	f805 2b02 	strb.w	r2, [r5], #2
    if( mode == MBEDTLS_RSA_PUBLIC )
 80841be:	f1ba 0f00 	cmp.w	sl, #0
 80841c2:	d118      	bne.n	80841f6 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x82>
    {
        *p++ = MBEDTLS_RSA_CRYPT;
 80841c4:	2202      	movs	r2, #2
 80841c6:	7072      	strb	r2, [r6, #1]
 80841c8:	442c      	add	r4, r5

        while( nb_pad-- > 0 )
 80841ca:	42a5      	cmp	r5, r4
 80841cc:	d01c      	beq.n	8084208 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x94>
 80841ce:	2264      	movs	r2, #100	; 0x64
 80841d0:	9200      	str	r2, [sp, #0]
        {
            int rng_dl = 100;

            do {
                ret = f_rng( p_rng, p, 1 );
 80841d2:	2201      	movs	r2, #1
 80841d4:	4629      	mov	r1, r5
 80841d6:	4658      	mov	r0, fp
 80841d8:	9301      	str	r3, [sp, #4]
 80841da:	47c8      	blx	r9
            } while( *p == 0 && --rng_dl && ret == 0 );
 80841dc:	782a      	ldrb	r2, [r5, #0]
 80841de:	9b01      	ldr	r3, [sp, #4]
 80841e0:	bb8a      	cbnz	r2, 8084246 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd2>
 80841e2:	9a00      	ldr	r2, [sp, #0]
 80841e4:	3a01      	subs	r2, #1
 80841e6:	9200      	str	r2, [sp, #0]
 80841e8:	d102      	bne.n	80841f0 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x7c>

            /* Check if RNG failed to generate data */
            if( rng_dl == 0 || ret != 0 )
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 80841ea:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
 80841ee:	e02e      	b.n	808424e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xda>
        {
            int rng_dl = 100;

            do {
                ret = f_rng( p_rng, p, 1 );
            } while( *p == 0 && --rng_dl && ret == 0 );
 80841f0:	2800      	cmp	r0, #0
 80841f2:	d0ee      	beq.n	80841d2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x5e>
 80841f4:	e7f9      	b.n	80841ea <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x76>
            p++;
        }
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;
 80841f6:	2201      	movs	r2, #1
 80841f8:	7072      	strb	r2, [r6, #1]
 80841fa:	442c      	add	r4, r5

        while( nb_pad-- > 0 )
            *p++ = 0xFF;
 80841fc:	22ff      	movs	r2, #255	; 0xff
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;

        while( nb_pad-- > 0 )
 80841fe:	42ac      	cmp	r4, r5
 8084200:	d002      	beq.n	8084208 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x94>
            *p++ = 0xFF;
 8084202:	f805 2b01 	strb.w	r2, [r5], #1
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;

        while( nb_pad-- > 0 )
 8084206:	e7fa      	b.n	80841fe <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x8a>
            *p++ = 0xFF;
    }

    *p++ = 0;
 8084208:	4620      	mov	r0, r4
 808420a:	2200      	movs	r2, #0
 808420c:	f800 2b01 	strb.w	r2, [r0], #1
    memcpy( p, input, ilen );
 8084210:	4619      	mov	r1, r3
 8084212:	4642      	mov	r2, r8
 8084214:	f00e f899 	bl	809234a <memcpy>

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8084218:	f1ba 0f00 	cmp.w	sl, #0
 808421c:	d107      	bne.n	808422e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xba>
 808421e:	4632      	mov	r2, r6
 8084220:	4631      	mov	r1, r6
 8084222:	4638      	mov	r0, r7
}
 8084224:	b003      	add	sp, #12
 8084226:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    *p++ = 0;
    memcpy( p, input, ilen );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 808422a:	f7ff bd17 	b.w	8083c5c <mbedtls_rsa_public>
 808422e:	4633      	mov	r3, r6
 8084230:	465a      	mov	r2, fp
 8084232:	4649      	mov	r1, r9
 8084234:	4638      	mov	r0, r7
 8084236:	960c      	str	r6, [sp, #48]	; 0x30
}
 8084238:	b003      	add	sp, #12
 808423a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    *p++ = 0;
    memcpy( p, input, ilen );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 808423e:	f7ff bd4f 	b.w	8083ce0 <mbedtls_rsa_private>
    size_t nb_pad, olen;
    int ret;
    unsigned char *p = output;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8084242:	4804      	ldr	r0, [pc, #16]	; (8084254 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xe0>)
 8084244:	e003      	b.n	808424e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xda>
            do {
                ret = f_rng( p_rng, p, 1 );
            } while( *p == 0 && --rng_dl && ret == 0 );

            /* Check if RNG failed to generate data */
            if( rng_dl == 0 || ret != 0 )
 8084246:	2800      	cmp	r0, #0
 8084248:	d1cf      	bne.n	80841ea <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x76>
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );

            p++;
 808424a:	3501      	adds	r5, #1
    *p++ = 0;
    if( mode == MBEDTLS_RSA_PUBLIC )
    {
        *p++ = MBEDTLS_RSA_CRYPT;

        while( nb_pad-- > 0 )
 808424c:	e7bd      	b.n	80841ca <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x56>
    memcpy( p, input, ilen );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
}
 808424e:	b003      	add	sp, #12
 8084250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084254:	ffffbf80 	.word	0xffffbf80

08084258 <mbedtls_rsa_pkcs1_encrypt>:
                       int (*f_rng)(void *, unsigned char *, size_t),
                       void *p_rng,
                       int mode, size_t ilen,
                       const unsigned char *input,
                       unsigned char *output )
{
 8084258:	b5f0      	push	{r4, r5, r6, r7, lr}
 808425a:	b087      	sub	sp, #28
    switch( ctx->padding )
 808425c:	f8d0 70a4 	ldr.w	r7, [r0, #164]	; 0xa4
                       int (*f_rng)(void *, unsigned char *, size_t),
                       void *p_rng,
                       int mode, size_t ilen,
                       const unsigned char *input,
                       unsigned char *output )
{
 8084260:	ac0c      	add	r4, sp, #48	; 0x30
 8084262:	cc70      	ldmia	r4, {r4, r5, r6}
    switch( ctx->padding )
 8084264:	b157      	cbz	r7, 808427c <mbedtls_rsa_pkcs1_encrypt+0x24>
 8084266:	2f01      	cmp	r7, #1
 8084268:	d110      	bne.n	808428c <mbedtls_rsa_pkcs1_encrypt+0x34>
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           ilen, input, output );
 808426a:	9402      	str	r4, [sp, #8]
 808426c:	2400      	movs	r4, #0
 808426e:	9604      	str	r6, [sp, #16]
 8084270:	9503      	str	r5, [sp, #12]
 8084272:	9401      	str	r4, [sp, #4]
 8084274:	9400      	str	r4, [sp, #0]
 8084276:	f7ff feeb 	bl	8084050 <mbedtls_rsa_rsaes_oaep_encrypt>
 808427a:	e008      	b.n	808428e <mbedtls_rsa_pkcs1_encrypt+0x36>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
                                                input, output );
 808427c:	960e      	str	r6, [sp, #56]	; 0x38
 808427e:	950d      	str	r5, [sp, #52]	; 0x34
 8084280:	940c      	str	r4, [sp, #48]	; 0x30
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8084282:	b007      	add	sp, #28
 8084284:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
                                                input, output );
 8084288:	f7ff bf74 	b.w	8084174 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           ilen, input, output );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 808428c:	4801      	ldr	r0, [pc, #4]	; (8084294 <mbedtls_rsa_pkcs1_encrypt+0x3c>)
    }
}
 808428e:	b007      	add	sp, #28
 8084290:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084292:	bf00      	nop
 8084294:	ffffbf00 	.word	0xffffbf00

08084298 <mbedtls_rsa_rsaes_oaep_decrypt>:
                            const unsigned char *label, size_t label_len,
                            size_t *olen,
                            const unsigned char *input,
                            unsigned char *output,
                            size_t output_max_len )
{
 8084298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    mbedtls_md_context_t md_ctx;

    /*
     * Parameters sanity checks
     */
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 808429c:	2b01      	cmp	r3, #1
                            const unsigned char *label, size_t label_len,
                            size_t *olen,
                            const unsigned char *input,
                            unsigned char *output,
                            size_t output_max_len )
{
 808429e:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
 80842a2:	4606      	mov	r6, r0
 80842a4:	468a      	mov	sl, r1
 80842a6:	9203      	str	r2, [sp, #12]
 80842a8:	469b      	mov	fp, r3
    mbedtls_md_context_t md_ctx;

    /*
     * Parameters sanity checks
     */
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80842aa:	d105      	bne.n	80842b8 <mbedtls_rsa_rsaes_oaep_decrypt+0x20>
 80842ac:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80842b0:	2b01      	cmp	r3, #1
 80842b2:	d001      	beq.n	80842b8 <mbedtls_rsa_rsaes_oaep_decrypt+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80842b4:	485c      	ldr	r0, [pc, #368]	; (8084428 <mbedtls_rsa_rsaes_oaep_decrypt+0x190>)
 80842b6:	e0b2      	b.n	808441e <mbedtls_rsa_rsaes_oaep_decrypt+0x186>

    ilen = ctx->len;
 80842b8:	6877      	ldr	r7, [r6, #4]

    if( ilen < 16 || ilen > sizeof( buf ) )
 80842ba:	f1a7 0310 	sub.w	r3, r7, #16
 80842be:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 80842c2:	d8f7      	bhi.n	80842b4 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 80842c4:	f896 00a8 	ldrb.w	r0, [r6, #168]	; 0xa8
 80842c8:	f003 f9ee 	bl	80876a8 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 80842cc:	9002      	str	r0, [sp, #8]
 80842ce:	2800      	cmp	r0, #0
 80842d0:	d0f0      	beq.n	80842b4 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 80842d2:	f003 fb2d 	bl	8087930 <mbedtls_md_get_size>

    // checking for integer underflow
    if( 2 * hlen + 2 > ilen )
 80842d6:	f100 0801 	add.w	r8, r0, #1
 80842da:	ea4f 0548 	mov.w	r5, r8, lsl #1
 80842de:	42af      	cmp	r7, r5

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 80842e0:	4604      	mov	r4, r0

    // checking for integer underflow
    if( 2 * hlen + 2 > ilen )
 80842e2:	d3e7      	bcc.n	80842b4 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
 80842e4:	f10d 0960 	add.w	r9, sp, #96	; 0x60
    /*
     * RSA operation
     */
    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 80842e8:	f1bb 0f00 	cmp.w	fp, #0
 80842ec:	d106      	bne.n	80842fc <mbedtls_rsa_rsaes_oaep_decrypt+0x64>
 80842ee:	464a      	mov	r2, r9
 80842f0:	f8dd 1494 	ldr.w	r1, [sp, #1172]	; 0x494
 80842f4:	4630      	mov	r0, r6
 80842f6:	f7ff fcb1 	bl	8083c5c <mbedtls_rsa_public>
 80842fa:	e008      	b.n	808430e <mbedtls_rsa_rsaes_oaep_decrypt+0x76>
 80842fc:	f8cd 9000 	str.w	r9, [sp]
 8084300:	f8dd 3494 	ldr.w	r3, [sp, #1172]	; 0x494
 8084304:	9a03      	ldr	r2, [sp, #12]
 8084306:	4651      	mov	r1, sl
 8084308:	4630      	mov	r0, r6
 808430a:	f7ff fce9 	bl	8083ce0 <mbedtls_rsa_private>
 808430e:	4682      	mov	sl, r0

    if( ret != 0 )
 8084310:	2800      	cmp	r0, #0
 8084312:	d13c      	bne.n	808438e <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
        goto cleanup;

    /*
     * Unmask data and generate lHash
     */
    mbedtls_md_init( &md_ctx );
 8084314:	ae05      	add	r6, sp, #20
 8084316:	4630      	mov	r0, r6
 8084318:	f003 f9d2 	bl	80876c0 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 808431c:	4652      	mov	r2, sl
 808431e:	9902      	ldr	r1, [sp, #8]
 8084320:	4630      	mov	r0, r6
 8084322:	f003 f9f3 	bl	808770c <mbedtls_md_setup>
 8084326:	4682      	mov	sl, r0
 8084328:	b108      	cbz	r0, 808432e <mbedtls_rsa_rsaes_oaep_decrypt+0x96>
    {
        mbedtls_md_free( &md_ctx );
 808432a:	4630      	mov	r0, r6
 808432c:	e03b      	b.n	80843a6 <mbedtls_rsa_rsaes_oaep_decrypt+0x10e>
        goto cleanup;
    }

    /* seed: Apply seedMask to maskedSeed */
    if( ( ret = mgf_mask( buf + 1, hlen, buf + hlen + 1, ilen - hlen - 1,
 808432e:	f107 3bff 	add.w	fp, r7, #4294967295
 8084332:	44c8      	add	r8, r9
 8084334:	ebc4 0b0b 	rsb	fp, r4, fp
                          &md_ctx ) ) != 0 ||
 8084338:	9600      	str	r6, [sp, #0]
 808433a:	465b      	mov	r3, fp
 808433c:	4642      	mov	r2, r8
 808433e:	4621      	mov	r1, r4
 8084340:	f10d 0061 	add.w	r0, sp, #97	; 0x61
 8084344:	f7ff f9de 	bl	8083704 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 8084348:	4682      	mov	sl, r0
 808434a:	bb58      	cbnz	r0, 80843a4 <mbedtls_rsa_rsaes_oaep_decrypt+0x10c>
 808434c:	9600      	str	r6, [sp, #0]
 808434e:	4623      	mov	r3, r4
 8084350:	f10d 0261 	add.w	r2, sp, #97	; 0x61
 8084354:	4659      	mov	r1, fp
 8084356:	4640      	mov	r0, r8
 8084358:	f7ff f9d4 	bl	8083704 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 808435c:	4682      	mov	sl, r0
 808435e:	bb08      	cbnz	r0, 80843a4 <mbedtls_rsa_rsaes_oaep_decrypt+0x10c>
 8084360:	e024      	b.n	80843ac <mbedtls_rsa_rsaes_oaep_decrypt+0x114>
     * The only information "leaked" is whether the padding was correct or not
     * (eg, no data is copied if it was not correct). This meets the
     * recommendations in PKCS#1 v2.2: an opponent cannot distinguish between
     * the different error conditions.
     */
    if( bad != 0 )
 8084362:	5c88      	ldrb	r0, [r1, r2]
 8084364:	f080 0001 	eor.w	r0, r0, #1
 8084368:	ea50 030e 	orrs.w	r3, r0, lr
 808436c:	d151      	bne.n	8084412 <mbedtls_rsa_rsaes_oaep_decrypt+0x17a>
        pad_done |= p[i];
        pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
    }

    p += pad_len;
    bad |= *p++ ^ 0x01;
 808436e:	3201      	adds	r2, #1
 8084370:	4411      	add	r1, r2
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
 8084372:	aa18      	add	r2, sp, #96	; 0x60
 8084374:	1a8a      	subs	r2, r1, r2
 8084376:	f8dd 049c 	ldr.w	r0, [sp, #1180]	; 0x49c
 808437a:	1aba      	subs	r2, r7, r2
 808437c:	4282      	cmp	r2, r0
 808437e:	d84b      	bhi.n	8084418 <mbedtls_rsa_rsaes_oaep_decrypt+0x180>
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
        goto cleanup;
    }

    *olen = ilen - (p - buf);
 8084380:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
 8084384:	6002      	str	r2, [r0, #0]
    memcpy( output, p, *olen );
 8084386:	f8dd 0498 	ldr.w	r0, [sp, #1176]	; 0x498
 808438a:	f00d ffde 	bl	809234a <memcpy>
    ret = 0;

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
 808438e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8084392:	a818      	add	r0, sp, #96	; 0x60
 8084394:	f7ff f9ae 	bl	80836f4 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( lhash, sizeof( lhash ) );
 8084398:	a808      	add	r0, sp, #32
 808439a:	2140      	movs	r1, #64	; 0x40
 808439c:	f7ff f9aa 	bl	80836f4 <_ZL15mbedtls_zeroizePvj>

    return( ret );
 80843a0:	4650      	mov	r0, sl
 80843a2:	e03c      	b.n	808441e <mbedtls_rsa_rsaes_oaep_decrypt+0x186>
                          &md_ctx ) ) != 0 ||
    /* DB: Apply dbMask to maskedDB */
        ( ret = mgf_mask( buf + hlen + 1, ilen - hlen - 1, buf + 1, hlen,
                          &md_ctx ) ) != 0 )
    {
        mbedtls_md_free( &md_ctx );
 80843a4:	a805      	add	r0, sp, #20
 80843a6:	f003 f990 	bl	80876ca <mbedtls_md_free>
        goto cleanup;
 80843aa:	e7f0      	b.n	808438e <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
    }

    mbedtls_md_free( &md_ctx );
 80843ac:	4630      	mov	r0, r6

    /* Generate lHash */
    if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )
 80843ae:	ae08      	add	r6, sp, #32
    {
        mbedtls_md_free( &md_ctx );
        goto cleanup;
    }

    mbedtls_md_free( &md_ctx );
 80843b0:	f003 f98b 	bl	80876ca <mbedtls_md_free>

    /* Generate lHash */
    if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )
 80843b4:	4633      	mov	r3, r6
 80843b6:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
 80843ba:	f8dd 1488 	ldr.w	r1, [sp, #1160]	; 0x488
 80843be:	9802      	ldr	r0, [sp, #8]
 80843c0:	f003 f9e4 	bl	808778c <mbedtls_md>
 80843c4:	4682      	mov	sl, r0
 80843c6:	2800      	cmp	r0, #0
 80843c8:	d1e1      	bne.n	808438e <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
 80843ca:	4650      	mov	r0, sl
    p = buf;
    bad = 0;

    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */
 80843cc:	f10d 0361 	add.w	r3, sp, #97	; 0x61
     * Check contents, in "constant-time"
     */
    p = buf;
    bad = 0;

    bad |= *p++; /* First byte must be 0 */
 80843d0:	f899 e000 	ldrb.w	lr, [r9]

    p += hlen; /* Skip seed */
 80843d4:	1919      	adds	r1, r3, r4

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
 80843d6:	42a0      	cmp	r0, r4
 80843d8:	d208      	bcs.n	80843ec <mbedtls_rsa_rsaes_oaep_decrypt+0x154>
        bad |= lhash[i] ^ *p++;
 80843da:	5c32      	ldrb	r2, [r6, r0]
 80843dc:	f811 c000 	ldrb.w	ip, [r1, r0]
    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
 80843e0:	3001      	adds	r0, #1
        bad |= lhash[i] ^ *p++;
 80843e2:	ea82 0c0c 	eor.w	ip, r2, ip
 80843e6:	ea4c 0e0e 	orr.w	lr, ip, lr
    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
 80843ea:	e7f4      	b.n	80843d6 <mbedtls_rsa_rsaes_oaep_decrypt+0x13e>
 80843ec:	4421      	add	r1, r4

    /* Get zero-padding len, but always read till end of buffer
     * (minus one, for the 01 byte) */
    pad_len = 0;
    pad_done = 0;
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
 80843ee:	2400      	movs	r4, #0
 80843f0:	460e      	mov	r6, r1
 80843f2:	4622      	mov	r2, r4
 80843f4:	1b7d      	subs	r5, r7, r5
 80843f6:	440d      	add	r5, r1
 80843f8:	42b5      	cmp	r5, r6
 80843fa:	d0b2      	beq.n	8084362 <mbedtls_rsa_rsaes_oaep_decrypt+0xca>
    {
        pad_done |= p[i];
 80843fc:	f816 0b01 	ldrb.w	r0, [r6], #1
 8084400:	4304      	orrs	r4, r0
        pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 8084402:	4260      	negs	r0, r4
 8084404:	4320      	orrs	r0, r4
 8084406:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 808440a:	f080 0001 	eor.w	r0, r0, #1
 808440e:	4402      	add	r2, r0

    /* Get zero-padding len, but always read till end of buffer
     * (minus one, for the 01 byte) */
    pad_len = 0;
    pad_done = 0;
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
 8084410:	e7f2      	b.n	80843f8 <mbedtls_rsa_rsaes_oaep_decrypt+0x160>
     * recommendations in PKCS#1 v2.2: an opponent cannot distinguish between
     * the different error conditions.
     */
    if( bad != 0 )
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 8084412:	f8df a018 	ldr.w	sl, [pc, #24]	; 808442c <mbedtls_rsa_rsaes_oaep_decrypt+0x194>
 8084416:	e7ba      	b.n	808438e <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
 8084418:	f8df a014 	ldr.w	sl, [pc, #20]	; 8084430 <mbedtls_rsa_rsaes_oaep_decrypt+0x198>
 808441c:	e7b7      	b.n	808438e <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
    mbedtls_zeroize( lhash, sizeof( lhash ) );

    return( ret );
}
 808441e:	f20d 4d64 	addw	sp, sp, #1124	; 0x464
 8084422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084426:	bf00      	nop
 8084428:	ffffbf80 	.word	0xffffbf80
 808442c:	ffffbf00 	.word	0xffffbf00
 8084430:	ffffbc00 	.word	0xffffbc00

08084434 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>:
                                 void *p_rng,
                                 int mode, size_t *olen,
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
 8084434:	b5f0      	push	{r4, r5, r6, r7, lr}
    int ret;
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8084436:	2b01      	cmp	r3, #1
                                 void *p_rng,
                                 int mode, size_t *olen,
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
 8084438:	f2ad 4d0c 	subw	sp, sp, #1036	; 0x40c
 808443c:	461d      	mov	r5, r3
    int ret;
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 808443e:	d103      	bne.n	8084448 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x14>
 8084440:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8084444:	2b00      	cmp	r3, #0
 8084446:	d17f      	bne.n	8084548 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x114>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ilen = ctx->len;
 8084448:	6847      	ldr	r7, [r0, #4]

    if( ilen < 16 || ilen > sizeof( buf ) )
 808444a:	f1a7 0310 	sub.w	r3, r7, #16
 808444e:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 8084452:	d879      	bhi.n	8084548 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x114>
 8084454:	ae02      	add	r6, sp, #8
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8084456:	b945      	cbnz	r5, 808446a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x36>
 8084458:	4632      	mov	r2, r6
 808445a:	f8dd 1424 	ldr.w	r1, [sp, #1060]	; 0x424
 808445e:	f7ff fbfd 	bl	8083c5c <mbedtls_rsa_public>

    if( ret != 0 )
 8084462:	4604      	mov	r4, r0
 8084464:	2800      	cmp	r0, #0
 8084466:	d168      	bne.n	808453a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>
 8084468:	e02f      	b.n	80844ca <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x96>
    if( ilen < 16 || ilen > sizeof( buf ) )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 808446a:	9600      	str	r6, [sp, #0]
 808446c:	f8dd 3424 	ldr.w	r3, [sp, #1060]	; 0x424
 8084470:	f7ff fc36 	bl	8083ce0 <mbedtls_rsa_private>

    if( ret != 0 )
 8084474:	4604      	mov	r4, r0
 8084476:	2800      	cmp	r0, #0
 8084478:	d15f      	bne.n	808453a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>
     * Check and get padding len in "constant-time"
     */
    bad |= *p++; /* First byte must be 0 */

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
 808447a:	2d01      	cmp	r5, #1
    bad = 0;

    /*
     * Check and get padding len in "constant-time"
     */
    bad |= *p++; /* First byte must be 0 */
 808447c:	7832      	ldrb	r2, [r6, #0]

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
 808447e:	d125      	bne.n	80844cc <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x98>
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 8084480:	4601      	mov	r1, r0
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
    int ret;
    size_t ilen, pad_count = 0, i;
 8084482:	4686      	mov	lr, r0
    bad |= *p++; /* First byte must be 0 */

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;
 8084484:	7873      	ldrb	r3, [r6, #1]

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 8084486:	1efd      	subs	r5, r7, #3
    bad |= *p++; /* First byte must be 0 */

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;
 8084488:	f083 0302 	eor.w	r3, r3, #2
 808448c:	4313      	orrs	r3, r2

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 808448e:	42a9      	cmp	r1, r5
 8084490:	d212      	bcs.n	80844b8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x84>
        {
            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
 8084492:	1872      	adds	r2, r6, r1
 8084494:	7890      	ldrb	r0, [r2, #2]
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 8084496:	3101      	adds	r1, #1
        {
            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
 8084498:	4242      	negs	r2, r0
 808449a:	4310      	orrs	r0, r2
 808449c:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 80844a0:	f080 0001 	eor.w	r0, r0, #1
 80844a4:	4304      	orrs	r4, r0
 80844a6:	b2e4      	uxtb	r4, r4
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 80844a8:	4262      	negs	r2, r4
 80844aa:	4322      	orrs	r2, r4
 80844ac:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 80844b0:	f082 0201 	eor.w	r2, r2, #1
 80844b4:	4496      	add	lr, r2
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80844b6:	e7ea      	b.n	808448e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x5a>
            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
        }

        p += pad_count;
        bad |= *p++; /* Must be zero */
 80844b8:	f10d 020a 	add.w	r2, sp, #10
 80844bc:	f10e 0101 	add.w	r1, lr, #1
 80844c0:	4411      	add	r1, r2
 80844c2:	f812 200e 	ldrb.w	r2, [r2, lr]
 80844c6:	4313      	orrs	r3, r2
 80844c8:	e01e      	b.n	8084508 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xd4>
    bad = 0;

    /*
     * Check and get padding len in "constant-time"
     */
    bad |= *p++; /* First byte must be 0 */
 80844ca:	7832      	ldrb	r2, [r6, #0]
        p += pad_count;
        bad |= *p++; /* Must be zero */
    }
    else
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;
 80844cc:	7873      	ldrb	r3, [r6, #1]

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80844ce:	1efc      	subs	r4, r7, #3
        p += pad_count;
        bad |= *p++; /* Must be zero */
    }
    else
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;
 80844d0:	f083 0301 	eor.w	r3, r3, #1
 80844d4:	4313      	orrs	r3, r2
                                 unsigned char *output,
                                 size_t output_max_len)
{
    int ret;
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
 80844d6:	2200      	movs	r2, #0
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80844d8:	4611      	mov	r1, r2
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
    int ret;
    size_t ilen, pad_count = 0, i;
 80844da:	4696      	mov	lr, r2
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80844dc:	42a1      	cmp	r1, r4
 80844de:	d20b      	bcs.n	80844f8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xc4>
        {
            pad_done |= ( p[i] != 0xFF );
 80844e0:	1870      	adds	r0, r6, r1
 80844e2:	7880      	ldrb	r0, [r0, #2]
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80844e4:	3101      	adds	r1, #1
        {
            pad_done |= ( p[i] != 0xFF );
 80844e6:	28ff      	cmp	r0, #255	; 0xff
 80844e8:	bf18      	it	ne
 80844ea:	f042 0201 	orrne.w	r2, r2, #1
            pad_count += ( pad_done == 0 );
 80844ee:	f082 0001 	eor.w	r0, r2, #1
 80844f2:	b2c0      	uxtb	r0, r0
 80844f4:	4486      	add	lr, r0
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80844f6:	e7f1      	b.n	80844dc <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xa8>
            pad_done |= ( p[i] != 0xFF );
            pad_count += ( pad_done == 0 );
        }

        p += pad_count;
        bad |= *p++; /* Must be zero */
 80844f8:	f10d 020a 	add.w	r2, sp, #10
 80844fc:	f812 500e 	ldrb.w	r5, [r2, lr]
 8084500:	f10e 0101 	add.w	r1, lr, #1
 8084504:	4411      	add	r1, r2
 8084506:	432b      	orrs	r3, r5
    }

    bad |= ( pad_count < 8 );

    if( bad )
 8084508:	f1be 0f07 	cmp.w	lr, #7
 808450c:	bf8c      	ite	hi
 808450e:	461c      	movhi	r4, r3
 8084510:	f043 0401 	orrls.w	r4, r3, #1
 8084514:	b264      	sxtb	r4, r4
 8084516:	b96c      	cbnz	r4, 8084534 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x100>
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
 8084518:	1b8a      	subs	r2, r1, r6
 808451a:	f8dd 342c 	ldr.w	r3, [sp, #1068]	; 0x42c
 808451e:	1aba      	subs	r2, r7, r2
 8084520:	429a      	cmp	r2, r3
 8084522:	d809      	bhi.n	8084538 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x104>
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
        goto cleanup;
    }

    *olen = ilen - (p - buf);
 8084524:	f8dd 3420 	ldr.w	r3, [sp, #1056]	; 0x420
    memcpy( output, p, *olen );
 8084528:	f8dd 0428 	ldr.w	r0, [sp, #1064]	; 0x428
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
        goto cleanup;
    }

    *olen = ilen - (p - buf);
 808452c:	601a      	str	r2, [r3, #0]
    memcpy( output, p, *olen );
 808452e:	f00d ff0c 	bl	809234a <memcpy>
 8084532:	e002      	b.n	808453a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>

    bad |= ( pad_count < 8 );

    if( bad )
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 8084534:	4c06      	ldr	r4, [pc, #24]	; (8084550 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x11c>)
 8084536:	e000      	b.n	808453a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
 8084538:	4c06      	ldr	r4, [pc, #24]	; (8084554 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x120>)
    *olen = ilen - (p - buf);
    memcpy( output, p, *olen );
    ret = 0;

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
 808453a:	4630      	mov	r0, r6
 808453c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8084540:	f7ff f8d8 	bl	80836f4 <_ZL15mbedtls_zeroizePvj>

    return( ret );
 8084544:	4620      	mov	r0, r4
 8084546:	e000      	b.n	808454a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x116>
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8084548:	4803      	ldr	r0, [pc, #12]	; (8084558 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x124>)

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );

    return( ret );
}
 808454a:	f20d 4d0c 	addw	sp, sp, #1036	; 0x40c
 808454e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084550:	ffffbf00 	.word	0xffffbf00
 8084554:	ffffbc00 	.word	0xffffbc00
 8084558:	ffffbf80 	.word	0xffffbf80

0808455c <mbedtls_rsa_pkcs1_decrypt>:
                       void *p_rng,
                       int mode, size_t *olen,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t output_max_len)
{
 808455c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808455e:	b087      	sub	sp, #28
    switch( ctx->padding )
 8084560:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	; 0xa4
                       void *p_rng,
                       int mode, size_t *olen,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t output_max_len)
{
 8084564:	ac0c      	add	r4, sp, #48	; 0x30
 8084566:	ccf0      	ldmia	r4, {r4, r5, r6, r7}
    switch( ctx->padding )
 8084568:	f1be 0f00 	cmp.w	lr, #0
 808456c:	d00c      	beq.n	8084588 <mbedtls_rsa_pkcs1_decrypt+0x2c>
 808456e:	f1be 0f01 	cmp.w	lr, #1
 8084572:	d112      	bne.n	808459a <mbedtls_rsa_pkcs1_decrypt+0x3e>

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsaes_oaep_decrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           olen, input, output,
                                           output_max_len );
 8084574:	9402      	str	r4, [sp, #8]
 8084576:	2400      	movs	r4, #0
 8084578:	9705      	str	r7, [sp, #20]
 808457a:	9604      	str	r6, [sp, #16]
 808457c:	9503      	str	r5, [sp, #12]
 808457e:	9401      	str	r4, [sp, #4]
 8084580:	9400      	str	r4, [sp, #0]
 8084582:	f7ff fe89 	bl	8084298 <mbedtls_rsa_rsaes_oaep_decrypt>
 8084586:	e009      	b.n	808459c <mbedtls_rsa_pkcs1_decrypt+0x40>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
                                                input, output, output_max_len );
 8084588:	970f      	str	r7, [sp, #60]	; 0x3c
 808458a:	960e      	str	r6, [sp, #56]	; 0x38
 808458c:	950d      	str	r5, [sp, #52]	; 0x34
 808458e:	940c      	str	r4, [sp, #48]	; 0x30
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8084590:	b007      	add	sp, #28
 8084592:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
                                                input, output, output_max_len );
 8084596:	f7ff bf4d 	b.w	8084434 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>
                                           olen, input, output,
                                           output_max_len );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 808459a:	4801      	ldr	r0, [pc, #4]	; (80845a0 <mbedtls_rsa_pkcs1_decrypt+0x44>)
    }
}
 808459c:	b007      	add	sp, #28
 808459e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80845a0:	ffffbf00 	.word	0xffffbf00

080845a4 <mbedtls_rsa_rsassa_pss_sign>:
                         int mode,
                         mbedtls_md_type_t md_alg,
                         unsigned int hashlen,
                         const unsigned char *hash,
                         unsigned char *sig )
{
 80845a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret;
    size_t msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80845a8:	2b01      	cmp	r3, #1
                         int mode,
                         mbedtls_md_type_t md_alg,
                         unsigned int hashlen,
                         const unsigned char *hash,
                         unsigned char *sig )
{
 80845aa:	b09d      	sub	sp, #116	; 0x74
 80845ac:	4680      	mov	r8, r0
 80845ae:	468a      	mov	sl, r1
 80845b0:	9204      	str	r2, [sp, #16]
 80845b2:	9305      	str	r3, [sp, #20]
 80845b4:	f89d 0098 	ldrb.w	r0, [sp, #152]	; 0x98
 80845b8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
    int ret;
    size_t msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80845ba:	d105      	bne.n	80845c8 <mbedtls_rsa_rsassa_pss_sign+0x24>
 80845bc:	f8d8 30a4 	ldr.w	r3, [r8, #164]	; 0xa4
 80845c0:	2b01      	cmp	r3, #1
 80845c2:	d001      	beq.n	80845c8 <mbedtls_rsa_rsassa_pss_sign+0x24>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80845c4:	4858      	ldr	r0, [pc, #352]	; (8084728 <mbedtls_rsa_rsassa_pss_sign+0x184>)
 80845c6:	e0ab      	b.n	8084720 <mbedtls_rsa_rsassa_pss_sign+0x17c>

    if( f_rng == NULL )
 80845c8:	f1ba 0f00 	cmp.w	sl, #0
 80845cc:	d0fa      	beq.n	80845c4 <mbedtls_rsa_rsassa_pss_sign+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
 80845ce:	f8d8 6004 	ldr.w	r6, [r8, #4]

    if( md_alg != MBEDTLS_MD_NONE )
 80845d2:	b130      	cbz	r0, 80845e2 <mbedtls_rsa_rsassa_pss_sign+0x3e>
    {
        /* Gather length of hash to sign */
        md_info = mbedtls_md_info_from_type( md_alg );
 80845d4:	f003 f868 	bl	80876a8 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 80845d8:	2800      	cmp	r0, #0
 80845da:	d0f3      	beq.n	80845c4 <mbedtls_rsa_rsassa_pss_sign+0x20>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
 80845dc:	f003 f9a8 	bl	8087930 <mbedtls_md_get_size>
 80845e0:	9027      	str	r0, [sp, #156]	; 0x9c
    }

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 80845e2:	f898 00a8 	ldrb.w	r0, [r8, #168]	; 0xa8
 80845e6:	f003 f85f 	bl	80876a8 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 80845ea:	4683      	mov	fp, r0
 80845ec:	2800      	cmp	r0, #0
 80845ee:	d0e9      	beq.n	80845c4 <mbedtls_rsa_rsassa_pss_sign+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 80845f0:	f003 f99e 	bl	8087930 <mbedtls_md_get_size>
    slen = hlen;

    if( olen < hlen + slen + 2 )
 80845f4:	0045      	lsls	r5, r0, #1
 80845f6:	1cab      	adds	r3, r5, #2
 80845f8:	429e      	cmp	r6, r3

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 80845fa:	4607      	mov	r7, r0
    slen = hlen;

    if( olen < hlen + slen + 2 )
 80845fc:	d3e2      	bcc.n	80845c4 <mbedtls_rsa_rsassa_pss_sign+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    memset( sig, 0, olen );
 80845fe:	4632      	mov	r2, r6
 8084600:	2100      	movs	r1, #0
 8084602:	4620      	mov	r0, r4
 8084604:	f00d fec7 	bl	8092396 <memset>

    /* Generate salt of length slen */
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
 8084608:	463a      	mov	r2, r7
 808460a:	a90c      	add	r1, sp, #48	; 0x30
 808460c:	9804      	ldr	r0, [sp, #16]
 808460e:	47d0      	blx	sl
 8084610:	b110      	cbz	r0, 8084618 <mbedtls_rsa_rsassa_pss_sign+0x74>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 8084612:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
 8084616:	e083      	b.n	8084720 <mbedtls_rsa_rsassa_pss_sign+0x17c>

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 8084618:	f108 0308 	add.w	r3, r8, #8
 808461c:	9007      	str	r0, [sp, #28]
 808461e:	4618      	mov	r0, r3
 8084620:	9303      	str	r3, [sp, #12]
 8084622:	f006 fd9e 	bl	808b162 <mbedtls_mpi_bitlen>
    p += olen - hlen * 2 - 2;
 8084626:	1b75      	subs	r5, r6, r5
    *p++ = 0x01;
 8084628:	f105 39ff 	add.w	r9, r5, #4294967295
 808462c:	2201      	movs	r2, #1
 808462e:	4425      	add	r5, r4
 8084630:	44a1      	add	r9, r4
 8084632:	f805 2c02 	strb.w	r2, [r5, #-2]
    memcpy( p, salt, slen );
 8084636:	a90c      	add	r1, sp, #48	; 0x30
 8084638:	463a      	mov	r2, r7
    /* Generate salt of length slen */
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 808463a:	9006      	str	r0, [sp, #24]
    p += olen - hlen * 2 - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
    p += slen;

    mbedtls_md_init( &md_ctx );
 808463c:	ad09      	add	r5, sp, #36	; 0x24

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    p += olen - hlen * 2 - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
 808463e:	4648      	mov	r0, r9
 8084640:	f00d fe83 	bl	809234a <memcpy>
    p += slen;

    mbedtls_md_init( &md_ctx );
 8084644:	4628      	mov	r0, r5
 8084646:	f003 f83b 	bl	80876c0 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 808464a:	9b07      	ldr	r3, [sp, #28]
 808464c:	4659      	mov	r1, fp
 808464e:	461a      	mov	r2, r3
 8084650:	4628      	mov	r0, r5
 8084652:	f003 f85b 	bl	808770c <mbedtls_md_setup>
 8084656:	4602      	mov	r2, r0
 8084658:	2800      	cmp	r0, #0
 808465a:	d14a      	bne.n	80846f2 <mbedtls_rsa_rsassa_pss_sign+0x14e>
        goto exit;

    /* Generate H = Hash( M' ) */
    if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
 808465c:	4628      	mov	r0, r5
 808465e:	f003 f877 	bl	8087750 <mbedtls_md_starts>
 8084662:	4602      	mov	r2, r0
 8084664:	2800      	cmp	r0, #0
 8084666:	d144      	bne.n	80846f2 <mbedtls_rsa_rsassa_pss_sign+0x14e>
    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    p += olen - hlen * 2 - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
    p += slen;
 8084668:	eb09 0b07 	add.w	fp, r9, r7
        goto exit;

    /* Generate H = Hash( M' ) */
    if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
        goto exit;
    if( ( ret = mbedtls_md_update( &md_ctx, p, 8 ) ) != 0 )
 808466c:	2208      	movs	r2, #8
 808466e:	4659      	mov	r1, fp
 8084670:	4628      	mov	r0, r5
 8084672:	f003 f877 	bl	8087764 <mbedtls_md_update>
 8084676:	4602      	mov	r2, r0
 8084678:	2800      	cmp	r0, #0
 808467a:	d13a      	bne.n	80846f2 <mbedtls_rsa_rsassa_pss_sign+0x14e>
        goto exit;
    if( ( ret = mbedtls_md_update( &md_ctx, hash, hashlen ) ) != 0 )
 808467c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 808467e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8084680:	4628      	mov	r0, r5
 8084682:	f003 f86f 	bl	8087764 <mbedtls_md_update>
 8084686:	4602      	mov	r2, r0
 8084688:	bb98      	cbnz	r0, 80846f2 <mbedtls_rsa_rsassa_pss_sign+0x14e>
        goto exit;
    if( ( ret = mbedtls_md_update( &md_ctx, salt, slen ) ) != 0 )
 808468a:	463a      	mov	r2, r7
 808468c:	a90c      	add	r1, sp, #48	; 0x30
 808468e:	4628      	mov	r0, r5
 8084690:	f003 f868 	bl	8087764 <mbedtls_md_update>
 8084694:	4602      	mov	r2, r0
 8084696:	bb60      	cbnz	r0, 80846f2 <mbedtls_rsa_rsassa_pss_sign+0x14e>
        goto exit;
    if( ( ret = mbedtls_md_finish( &md_ctx, p ) ) != 0 )
 8084698:	4659      	mov	r1, fp
 808469a:	4628      	mov	r0, r5
 808469c:	f003 f86c 	bl	8087778 <mbedtls_md_finish>
 80846a0:	4602      	mov	r2, r0
 80846a2:	bb30      	cbnz	r0, 80846f2 <mbedtls_rsa_rsassa_pss_sign+0x14e>
                         unsigned char *sig )
{
    size_t olen;
    unsigned char *p = sig;
    unsigned char salt[MBEDTLS_MD_MAX_SIZE];
    unsigned int slen, hlen, offset = 0;
 80846a4:	9b06      	ldr	r3, [sp, #24]
    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
        offset = 1;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
 80846a6:	1e71      	subs	r1, r6, #1
                         unsigned char *sig )
{
    size_t olen;
    unsigned char *p = sig;
    unsigned char salt[MBEDTLS_MD_MAX_SIZE];
    unsigned int slen, hlen, offset = 0;
 80846a8:	3b01      	subs	r3, #1
 80846aa:	f013 0f07 	tst.w	r3, #7
 80846ae:	bf0c      	ite	eq
 80846b0:	2001      	moveq	r0, #1
 80846b2:	2000      	movne	r0, #0
    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
        offset = 1;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
 80846b4:	1bc9      	subs	r1, r1, r7
 80846b6:	465a      	mov	r2, fp
 80846b8:	1a09      	subs	r1, r1, r0
 80846ba:	9500      	str	r5, [sp, #0]
 80846bc:	463b      	mov	r3, r7
 80846be:	4420      	add	r0, r4
 80846c0:	f7ff f820 	bl	8083704 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 80846c4:	4602      	mov	r2, r0
 80846c6:	b9a0      	cbnz	r0, 80846f2 <mbedtls_rsa_rsassa_pss_sign+0x14e>
 80846c8:	9006      	str	r0, [sp, #24]
                          &md_ctx ) ) != 0 )
        goto exit;

    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80846ca:	9803      	ldr	r0, [sp, #12]
 80846cc:	f006 fd49 	bl	808b162 <mbedtls_mpi_bitlen>
    sig[0] &= 0xFF >> ( olen * 8 - msb );
 80846d0:	ebc0 00c6 	rsb	r0, r0, r6, lsl #3
 80846d4:	7823      	ldrb	r3, [r4, #0]
 80846d6:	3001      	adds	r0, #1
 80846d8:	26ff      	movs	r6, #255	; 0xff
 80846da:	fa46 f000 	asr.w	r0, r6, r0
 80846de:	4018      	ands	r0, r3

    p += hlen;
    *p++ = 0xBC;
 80846e0:	23bc      	movs	r3, #188	; 0xbc
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
                          &md_ctx ) ) != 0 )
        goto exit;

    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    sig[0] &= 0xFF >> ( olen * 8 - msb );
 80846e2:	7020      	strb	r0, [r4, #0]

    p += hlen;
    *p++ = 0xBC;

    mbedtls_zeroize( salt, sizeof( salt ) );
 80846e4:	2140      	movs	r1, #64	; 0x40

    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    sig[0] &= 0xFF >> ( olen * 8 - msb );

    p += hlen;
    *p++ = 0xBC;
 80846e6:	f809 3017 	strb.w	r3, [r9, r7, lsl #1]

    mbedtls_zeroize( salt, sizeof( salt ) );
 80846ea:	a80c      	add	r0, sp, #48	; 0x30
 80846ec:	f7ff f802 	bl	80836f4 <_ZL15mbedtls_zeroizePvj>
 80846f0:	9a06      	ldr	r2, [sp, #24]

exit:
    mbedtls_md_free( &md_ctx );
 80846f2:	4628      	mov	r0, r5
 80846f4:	9203      	str	r2, [sp, #12]
 80846f6:	f002 ffe8 	bl	80876ca <mbedtls_md_free>

    if( ret != 0 )
 80846fa:	9a03      	ldr	r2, [sp, #12]
 80846fc:	b97a      	cbnz	r2, 808471e <mbedtls_rsa_rsassa_pss_sign+0x17a>
        return( ret );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, sig, sig )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig ) );
 80846fe:	9b05      	ldr	r3, [sp, #20]
 8084700:	b92b      	cbnz	r3, 808470e <mbedtls_rsa_rsassa_pss_sign+0x16a>
 8084702:	4622      	mov	r2, r4
 8084704:	4621      	mov	r1, r4
 8084706:	4640      	mov	r0, r8
 8084708:	f7ff faa8 	bl	8083c5c <mbedtls_rsa_public>
 808470c:	e008      	b.n	8084720 <mbedtls_rsa_rsassa_pss_sign+0x17c>
 808470e:	9400      	str	r4, [sp, #0]
 8084710:	4623      	mov	r3, r4
 8084712:	9a04      	ldr	r2, [sp, #16]
 8084714:	4651      	mov	r1, sl
 8084716:	4640      	mov	r0, r8
 8084718:	f7ff fae2 	bl	8083ce0 <mbedtls_rsa_private>
 808471c:	e000      	b.n	8084720 <mbedtls_rsa_rsassa_pss_sign+0x17c>
 808471e:	4610      	mov	r0, r2
}
 8084720:	b01d      	add	sp, #116	; 0x74
 8084722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084726:	bf00      	nop
 8084728:	ffffbf80 	.word	0xffffbf80

0808472c <mbedtls_rsa_rsassa_pkcs1_v15_sign>:
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
 808472c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    int ret;
    unsigned char *sig_try = NULL, *verif = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8084730:	2b01      	cmp	r3, #1
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
 8084732:	4689      	mov	r9, r1
 8084734:	a90b      	add	r1, sp, #44	; 0x2c
 8084736:	4605      	mov	r5, r0
 8084738:	4692      	mov	sl, r2
 808473a:	c986      	ldmia	r1, {r1, r2, r7}
 808473c:	461c      	mov	r4, r3
 808473e:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
    int ret;
    unsigned char *sig_try = NULL, *verif = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8084742:	d103      	bne.n	808474c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x20>
 8084744:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 8084748:	2b00      	cmp	r3, #0
 808474a:	d14b      	bne.n	80847e4 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xb8>

    /*
     * Prepare PKCS1-v1.5 encoding (padding and hash identifier)
     */

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash,
 808474c:	9700      	str	r7, [sp, #0]
 808474e:	686b      	ldr	r3, [r5, #4]
 8084750:	f7ff f82a 	bl	80837a8 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>
 8084754:	2800      	cmp	r0, #0
 8084756:	d149      	bne.n	80847ec <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>

    /*
     * Call respective RSA primitive
     */

    if( mode == MBEDTLS_RSA_PUBLIC )
 8084758:	b93c      	cbnz	r4, 808476a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x3e>
    {
        /* Skip verification on a public key operation */
        return( mbedtls_rsa_public( ctx, sig, sig ) );
 808475a:	463a      	mov	r2, r7
 808475c:	4639      	mov	r1, r7
 808475e:	4628      	mov	r0, r5
cleanup:
    mbedtls_free( sig_try );
    mbedtls_free( verif );

    return( ret );
}
 8084760:	b002      	add	sp, #8
 8084762:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     */

    if( mode == MBEDTLS_RSA_PUBLIC )
    {
        /* Skip verification on a public key operation */
        return( mbedtls_rsa_public( ctx, sig, sig ) );
 8084766:	f7ff ba79 	b.w	8083c5c <mbedtls_rsa_public>
     *
     * In order to prevent Lenstra's attack, make the signature in a
     * temporary buffer and check it before returning it.
     */

    sig_try = (unsigned char *)mbedtls_calloc( 1, ctx->len );
 808476a:	686c      	ldr	r4, [r5, #4]
 808476c:	2001      	movs	r0, #1
 808476e:	4621      	mov	r1, r4
 8084770:	f00d fdc6 	bl	8092300 <calloc>
    if( sig_try == NULL )
 8084774:	4606      	mov	r6, r0
 8084776:	b3b8      	cbz	r0, 80847e8 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xbc>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );

    verif = (unsigned char *)mbedtls_calloc( 1, ctx->len );
 8084778:	4621      	mov	r1, r4
 808477a:	2001      	movs	r0, #1
 808477c:	f00d fdc0 	bl	8092300 <calloc>
    if( verif == NULL )
 8084780:	4680      	mov	r8, r0
 8084782:	b918      	cbnz	r0, 808478c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x60>
    {
        mbedtls_free( sig_try );
 8084784:	4630      	mov	r0, r6
 8084786:	f00c f877 	bl	8090878 <free>
 808478a:	e02d      	b.n	80847e8 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xbc>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    }

    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
 808478c:	9600      	str	r6, [sp, #0]
 808478e:	463b      	mov	r3, r7
 8084790:	4652      	mov	r2, sl
 8084792:	4649      	mov	r1, r9
 8084794:	4628      	mov	r0, r5
 8084796:	f7ff faa3 	bl	8083ce0 <mbedtls_rsa_private>
 808479a:	4604      	mov	r4, r0
 808479c:	b9d0      	cbnz	r0, 80847d4 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );
 808479e:	4642      	mov	r2, r8
 80847a0:	4631      	mov	r1, r6
 80847a2:	4628      	mov	r0, r5
 80847a4:	f7ff fa5a 	bl	8083c5c <mbedtls_rsa_public>
 80847a8:	4604      	mov	r4, r0
 80847aa:	b998      	cbnz	r0, 80847d4 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa8>
static inline int mbedtls_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;
 80847ac:	4603      	mov	r3, r0

    for( i = 0; i < n; i++ )
 80847ae:	4602      	mov	r2, r0
    }

    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
 80847b0:	686d      	ldr	r5, [r5, #4]
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 80847b2:	42aa      	cmp	r2, r5
 80847b4:	d007      	beq.n	80847c6 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x9a>
        diff |= A[i] ^ B[i];
 80847b6:	f818 0002 	ldrb.w	r0, [r8, r2]
 80847ba:	5cb9      	ldrb	r1, [r7, r2]
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 80847bc:	3201      	adds	r2, #1
        diff |= A[i] ^ B[i];
 80847be:	4041      	eors	r1, r0
 80847c0:	430b      	orrs	r3, r1
 80847c2:	b2db      	uxtb	r3, r3
 80847c4:	e7f5      	b.n	80847b2 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x86>
    }

    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
 80847c6:	b923      	cbnz	r3, 80847d2 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa6>
    {
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
        goto cleanup;
    }

    memcpy( sig, sig_try, ctx->len );
 80847c8:	4631      	mov	r1, r6
 80847ca:	4638      	mov	r0, r7
 80847cc:	f00d fdbd 	bl	809234a <memcpy>
 80847d0:	e000      	b.n	80847d4 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
 80847d2:	4c08      	ldr	r4, [pc, #32]	; (80847f4 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc8>)
    }

    memcpy( sig, sig_try, ctx->len );

cleanup:
    mbedtls_free( sig_try );
 80847d4:	4630      	mov	r0, r6
 80847d6:	f00c f84f 	bl	8090878 <free>
    mbedtls_free( verif );
 80847da:	4640      	mov	r0, r8
 80847dc:	f00c f84c 	bl	8090878 <free>

    return( ret );
 80847e0:	4620      	mov	r0, r4
 80847e2:	e003      	b.n	80847ec <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>
{
    int ret;
    unsigned char *sig_try = NULL, *verif = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80847e4:	4804      	ldr	r0, [pc, #16]	; (80847f8 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xcc>)
 80847e6:	e001      	b.n	80847ec <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>
     * temporary buffer and check it before returning it.
     */

    sig_try = (unsigned char *)mbedtls_calloc( 1, ctx->len );
    if( sig_try == NULL )
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 80847e8:	f06f 000f 	mvn.w	r0, #15
cleanup:
    mbedtls_free( sig_try );
    mbedtls_free( verif );

    return( ret );
}
 80847ec:	b002      	add	sp, #8
 80847ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80847f2:	bf00      	nop
 80847f4:	ffffbd00 	.word	0xffffbd00
 80847f8:	ffffbf80 	.word	0xffffbf80

080847fc <mbedtls_rsa_pkcs1_sign>:
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
 80847fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
 80847fe:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	; 0xa4
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
 8084802:	ad06      	add	r5, sp, #24
 8084804:	f89d 4014 	ldrb.w	r4, [sp, #20]
 8084808:	cde0      	ldmia	r5, {r5, r6, r7}
    switch( ctx->padding )
 808480a:	f1be 0f00 	cmp.w	lr, #0
 808480e:	d00a      	beq.n	8084826 <mbedtls_rsa_pkcs1_sign+0x2a>
 8084810:	f1be 0f01 	cmp.w	lr, #1
 8084814:	d10f      	bne.n	8084836 <mbedtls_rsa_pkcs1_sign+0x3a>
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
                                        hashlen, hash, sig );
 8084816:	9708      	str	r7, [sp, #32]
 8084818:	9607      	str	r6, [sp, #28]
 808481a:	9506      	str	r5, [sp, #24]
 808481c:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 808481e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
                                        hashlen, hash, sig );
 8084822:	f7ff bebf 	b.w	80845a4 <mbedtls_rsa_rsassa_pss_sign>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
                                              hashlen, hash, sig );
 8084826:	9708      	str	r7, [sp, #32]
 8084828:	9607      	str	r6, [sp, #28]
 808482a:	9506      	str	r5, [sp, #24]
 808482c:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 808482e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
                                              hashlen, hash, sig );
 8084832:	f7ff bf7b 	b.w	808472c <mbedtls_rsa_rsassa_pkcs1_v15_sign>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8084836:	4801      	ldr	r0, [pc, #4]	; (808483c <mbedtls_rsa_pkcs1_sign+0x40>)
 8084838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808483a:	bf00      	nop
 808483c:	ffffbf00 	.word	0xffffbf00

08084840 <mbedtls_rsa_rsassa_pss_verify_ext>:
                               unsigned int hashlen,
                               const unsigned char *hash,
                               mbedtls_md_type_t mgf1_hash_id,
                               int expected_salt_len,
                               const unsigned char *sig )
{
 8084840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t observed_salt_len, msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8084844:	2b01      	cmp	r3, #1
                               unsigned int hashlen,
                               const unsigned char *hash,
                               mbedtls_md_type_t mgf1_hash_id,
                               int expected_salt_len,
                               const unsigned char *sig )
{
 8084846:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
 808484a:	4605      	mov	r5, r0
 808484c:	f89d 8488 	ldrb.w	r8, [sp, #1160]	; 0x488
    size_t observed_salt_len, msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8084850:	d105      	bne.n	808485e <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
 8084852:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
 8084856:	2801      	cmp	r0, #1
 8084858:	d001      	beq.n	808485e <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 808485a:	4861      	ldr	r0, [pc, #388]	; (80849e0 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a0>)
 808485c:	e0bb      	b.n	80849d6 <mbedtls_rsa_rsassa_pss_verify_ext+0x196>

    siglen = ctx->len;
 808485e:	686f      	ldr	r7, [r5, #4]

    if( siglen < 16 || siglen > sizeof( buf ) )
 8084860:	f1a7 0010 	sub.w	r0, r7, #16
 8084864:	f5b0 7f7c 	cmp.w	r0, #1008	; 0x3f0
 8084868:	d8f7      	bhi.n	808485a <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
 808486a:	ae18      	add	r6, sp, #96	; 0x60
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
 808486c:	b933      	cbnz	r3, 808487c <mbedtls_rsa_rsassa_pss_verify_ext+0x3c>
 808486e:	4632      	mov	r2, r6
 8084870:	f8dd 149c 	ldr.w	r1, [sp, #1180]	; 0x49c
 8084874:	4628      	mov	r0, r5
 8084876:	f7ff f9f1 	bl	8083c5c <mbedtls_rsa_public>
 808487a:	e005      	b.n	8084888 <mbedtls_rsa_rsassa_pss_verify_ext+0x48>
 808487c:	9600      	str	r6, [sp, #0]
 808487e:	f8dd 349c 	ldr.w	r3, [sp, #1180]	; 0x49c
 8084882:	4628      	mov	r0, r5
 8084884:	f7ff fa2c 	bl	8083ce0 <mbedtls_rsa_private>

    if( ret != 0 )
 8084888:	2800      	cmp	r0, #0
 808488a:	f040 80a4 	bne.w	80849d6 <mbedtls_rsa_rsassa_pss_verify_ext+0x196>
        return( ret );

    p = buf;

    if( buf[siglen - 1] != 0xBC )
 808488e:	1e7c      	subs	r4, r7, #1
 8084890:	5d33      	ldrb	r3, [r6, r4]
 8084892:	2bbc      	cmp	r3, #188	; 0xbc
 8084894:	f040 809e 	bne.w	80849d4 <mbedtls_rsa_rsassa_pss_verify_ext+0x194>
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );

    if( md_alg != MBEDTLS_MD_NONE )
 8084898:	f1b8 0f00 	cmp.w	r8, #0
 808489c:	d008      	beq.n	80848b0 <mbedtls_rsa_rsassa_pss_verify_ext+0x70>
    {
        /* Gather length of hash to sign */
        md_info = mbedtls_md_info_from_type( md_alg );
 808489e:	4640      	mov	r0, r8
 80848a0:	f002 ff02 	bl	80876a8 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 80848a4:	2800      	cmp	r0, #0
 80848a6:	d0d8      	beq.n	808485a <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
 80848a8:	f003 f842 	bl	8087930 <mbedtls_md_get_size>
 80848ac:	f8cd 048c 	str.w	r0, [sp, #1164]	; 0x48c
    }

    md_info = mbedtls_md_info_from_type( mgf1_hash_id );
 80848b0:	f89d 0494 	ldrb.w	r0, [sp, #1172]	; 0x494
 80848b4:	f002 fef8 	bl	80876a8 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 80848b8:	4681      	mov	r9, r0
 80848ba:	2800      	cmp	r0, #0
 80848bc:	d0cd      	beq.n	808485a <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 80848be:	f003 f837 	bl	8087930 <mbedtls_md_get_size>

    memset( zeros, 0, 8 );
 80848c2:	2300      	movs	r3, #0

    md_info = mbedtls_md_info_from_type( mgf1_hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 80848c4:	4682      	mov	sl, r0
    memset( zeros, 0, 8 );

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80848c6:	f105 0008 	add.w	r0, r5, #8
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );

    memset( zeros, 0, 8 );
 80848ca:	9303      	str	r3, [sp, #12]
 80848cc:	9304      	str	r3, [sp, #16]

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80848ce:	f006 fc48 	bl	808b162 <mbedtls_mpi_bitlen>

    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
 80848d2:	00fb      	lsls	r3, r7, #3
    memset( zeros, 0, 8 );

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80848d4:	f100 38ff 	add.w	r8, r0, #4294967295

    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
 80848d8:	7832      	ldrb	r2, [r6, #0]
 80848da:	f1c3 0308 	rsb	r3, r3, #8
 80848de:	4443      	add	r3, r8
 80848e0:	fa52 f303 	asrs.w	r3, r2, r3
 80848e4:	d1b9      	bne.n	808485a <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
 80848e6:	f018 0f07 	tst.w	r8, #7
    {
        p++;
        siglen -= 1;
 80848ea:	bf08      	it	eq
 80848ec:	4627      	moveq	r7, r4
    }

    if( siglen < hlen + 2 )
 80848ee:	f10a 0302 	add.w	r3, sl, #2
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
    {
        p++;
 80848f2:	bf0c      	ite	eq
 80848f4:	f10d 0561 	addeq.w	r5, sp, #97	; 0x61
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );

    if( ret != 0 )
        return( ret );

    p = buf;
 80848f8:	4635      	movne	r5, r6
    {
        p++;
        siglen -= 1;
    }

    if( siglen < hlen + 2 )
 80848fa:	429f      	cmp	r7, r3
 80848fc:	d3ad      	bcc.n	808485a <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    hash_start = p + siglen - hlen - 1;

    mbedtls_md_init( &md_ctx );
 80848fe:	ac05      	add	r4, sp, #20
 8084900:	4620      	mov	r0, r4
 8084902:	f002 fedd 	bl	80876c0 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 8084906:	2200      	movs	r2, #0
 8084908:	4649      	mov	r1, r9
 808490a:	4620      	mov	r0, r4
 808490c:	f002 fefe 	bl	808770c <mbedtls_md_setup>
 8084910:	4683      	mov	fp, r0
 8084912:	2800      	cmp	r0, #0
 8084914:	d159      	bne.n	80849ca <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        siglen -= 1;
    }

    if( siglen < hlen + 2 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    hash_start = p + siglen - hlen - 1;
 8084916:	ea6f 010a 	mvn.w	r1, sl
 808491a:	4439      	add	r1, r7
 808491c:	eb05 0901 	add.w	r9, r5, r1

    mbedtls_md_init( &md_ctx );
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
        goto exit;

    ret = mgf_mask( p, siglen - hlen - 1, hash_start, hlen, &md_ctx );
 8084920:	9400      	str	r4, [sp, #0]
 8084922:	4653      	mov	r3, sl
 8084924:	464a      	mov	r2, r9
 8084926:	4628      	mov	r0, r5
 8084928:	f7fe feec 	bl	8083704 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
    if( ret != 0 )
 808492c:	4683      	mov	fp, r0
 808492e:	2800      	cmp	r0, #0
 8084930:	d14b      	bne.n	80849ca <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;

    buf[0] &= 0xFF >> ( siglen * 8 - msb );
 8084932:	ebc8 07c7 	rsb	r7, r8, r7, lsl #3
 8084936:	7833      	ldrb	r3, [r6, #0]
 8084938:	f04f 08ff 	mov.w	r8, #255	; 0xff
 808493c:	fa48 f707 	asr.w	r7, r8, r7
 8084940:	401f      	ands	r7, r3
 8084942:	7037      	strb	r7, [r6, #0]

    while( p < hash_start - 1 && *p == 0 )
 8084944:	f109 32ff 	add.w	r2, r9, #4294967295
 8084948:	4295      	cmp	r5, r2
 808494a:	4629      	mov	r1, r5
 808494c:	d203      	bcs.n	8084956 <mbedtls_rsa_rsassa_pss_verify_ext+0x116>
 808494e:	780b      	ldrb	r3, [r1, #0]
 8084950:	3501      	adds	r5, #1
 8084952:	2b00      	cmp	r3, #0
 8084954:	d0f8      	beq.n	8084948 <mbedtls_rsa_rsassa_pss_verify_ext+0x108>
        p++;

    if( *p++ != 0x01 )
 8084956:	780b      	ldrb	r3, [r1, #0]
 8084958:	2b01      	cmp	r3, #1
 808495a:	d134      	bne.n	80849c6 <mbedtls_rsa_rsassa_pss_verify_ext+0x186>
        goto exit;
    }

    observed_salt_len = hash_start - p;

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 808495c:	f8dd 3498 	ldr.w	r3, [sp, #1176]	; 0x498
    buf[0] &= 0xFF >> ( siglen * 8 - msb );

    while( p < hash_start - 1 && *p == 0 )
        p++;

    if( *p++ != 0x01 )
 8084960:	1c4d      	adds	r5, r1, #1
        goto exit;
    }

    observed_salt_len = hash_start - p;

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 8084962:	1c5a      	adds	r2, r3, #1
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
        goto exit;
    }

    observed_salt_len = hash_start - p;
 8084964:	ebc5 0609 	rsb	r6, r5, r9

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 8084968:	d001      	beq.n	808496e <mbedtls_rsa_rsassa_pss_verify_ext+0x12e>
 808496a:	429e      	cmp	r6, r3
 808496c:	d12b      	bne.n	80849c6 <mbedtls_rsa_rsassa_pss_verify_ext+0x186>
    }

    /*
     * Generate H = Hash( M' )
     */
    ret = mbedtls_md_starts( &md_ctx );
 808496e:	4620      	mov	r0, r4
 8084970:	f002 feee 	bl	8087750 <mbedtls_md_starts>
    if ( ret != 0 )
 8084974:	4683      	mov	fp, r0
 8084976:	bb40      	cbnz	r0, 80849ca <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_update( &md_ctx, zeros, 8 );
 8084978:	2208      	movs	r2, #8
 808497a:	a903      	add	r1, sp, #12
 808497c:	4620      	mov	r0, r4
 808497e:	f002 fef1 	bl	8087764 <mbedtls_md_update>
    if ( ret != 0 )
 8084982:	4683      	mov	fp, r0
 8084984:	bb08      	cbnz	r0, 80849ca <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_update( &md_ctx, hash, hashlen );
 8084986:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
 808498a:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
 808498e:	4620      	mov	r0, r4
 8084990:	f002 fee8 	bl	8087764 <mbedtls_md_update>
    if ( ret != 0 )
 8084994:	4683      	mov	fp, r0
 8084996:	b9c0      	cbnz	r0, 80849ca <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_update( &md_ctx, p, observed_salt_len );
 8084998:	4632      	mov	r2, r6
 808499a:	4629      	mov	r1, r5
 808499c:	4620      	mov	r0, r4
 808499e:	f002 fee1 	bl	8087764 <mbedtls_md_update>
    if ( ret != 0 )
 80849a2:	4683      	mov	fp, r0
 80849a4:	b988      	cbnz	r0, 80849ca <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_finish( &md_ctx, result );
 80849a6:	a908      	add	r1, sp, #32
 80849a8:	4620      	mov	r0, r4
 80849aa:	f002 fee5 	bl	8087778 <mbedtls_md_finish>
    if ( ret != 0 )
 80849ae:	4683      	mov	fp, r0
 80849b0:	b958      	cbnz	r0, 80849ca <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;

    if( memcmp( hash_start, result, hlen ) != 0 )
 80849b2:	4652      	mov	r2, sl
 80849b4:	a908      	add	r1, sp, #32
 80849b6:	4648      	mov	r0, r9
 80849b8:	f00d fcb8 	bl	809232c <memcmp>
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 80849bc:	4a09      	ldr	r2, [pc, #36]	; (80849e4 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a4>)
 80849be:	2800      	cmp	r0, #0
 80849c0:	bf18      	it	ne
 80849c2:	4693      	movne	fp, r2
 80849c4:	e001      	b.n	80849ca <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
    while( p < hash_start - 1 && *p == 0 )
        p++;

    if( *p++ != 0x01 )
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 80849c6:	f8df b020 	ldr.w	fp, [pc, #32]	; 80849e8 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a8>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
        goto exit;
    }

exit:
    mbedtls_md_free( &md_ctx );
 80849ca:	4620      	mov	r0, r4
 80849cc:	f002 fe7d 	bl	80876ca <mbedtls_md_free>

    return( ret );
 80849d0:	4658      	mov	r0, fp
 80849d2:	e000      	b.n	80849d6 <mbedtls_rsa_rsassa_pss_verify_ext+0x196>
        return( ret );

    p = buf;

    if( buf[siglen - 1] != 0xBC )
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 80849d4:	4804      	ldr	r0, [pc, #16]	; (80849e8 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a8>)

exit:
    mbedtls_md_free( &md_ctx );

    return( ret );
}
 80849d6:	f20d 4d64 	addw	sp, sp, #1124	; 0x464
 80849da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80849de:	bf00      	nop
 80849e0:	ffffbf80 	.word	0xffffbf80
 80849e4:	ffffbc80 	.word	0xffffbc80
 80849e8:	ffffbf00 	.word	0xffffbf00

080849ec <mbedtls_rsa_rsassa_pss_verify>:
                           int mode,
                           mbedtls_md_type_t md_alg,
                           unsigned int hashlen,
                           const unsigned char *hash,
                           const unsigned char *sig )
{
 80849ec:	b570      	push	{r4, r5, r6, lr}
    mbedtls_md_type_t mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )
 80849ee:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
                           int mode,
                           mbedtls_md_type_t md_alg,
                           unsigned int hashlen,
                           const unsigned char *hash,
                           const unsigned char *sig )
{
 80849f2:	b086      	sub	sp, #24
 80849f4:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
    mbedtls_md_type_t mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )
                             ? (mbedtls_md_type_t) ctx->hash_id
                             : md_alg;
 80849f8:	b10c      	cbz	r4, 80849fe <mbedtls_rsa_rsassa_pss_verify+0x12>
 80849fa:	b2e4      	uxtb	r4, r4
 80849fc:	e000      	b.n	8084a00 <mbedtls_rsa_rsassa_pss_verify+0x14>
 80849fe:	462c      	mov	r4, r5

    return( mbedtls_rsa_rsassa_pss_verify_ext( ctx, f_rng, p_rng, mode,
                                       md_alg, hashlen, hash,
                                       mgf1_hash_id, MBEDTLS_RSA_SALT_LEN_ANY,
                                       sig ) );
 8084a00:	9403      	str	r4, [sp, #12]
 8084a02:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8084a04:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8084a06:	9402      	str	r4, [sp, #8]
 8084a08:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8084a0a:	9605      	str	r6, [sp, #20]
 8084a0c:	f04f 36ff 	mov.w	r6, #4294967295
 8084a10:	9604      	str	r6, [sp, #16]
 8084a12:	9401      	str	r4, [sp, #4]
 8084a14:	9500      	str	r5, [sp, #0]
 8084a16:	f7ff ff13 	bl	8084840 <mbedtls_rsa_rsassa_pss_verify_ext>

}
 8084a1a:	b006      	add	sp, #24
 8084a1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08084a20 <mbedtls_rsa_rsassa_pkcs1_v15_verify>:
                                 int mode,
                                 mbedtls_md_type_t md_alg,
                                 unsigned int hashlen,
                                 const unsigned char *hash,
                                 const unsigned char *sig )
{
 8084a20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;
    const size_t sig_len = ctx->len;
    unsigned char *encoded = NULL, *encoded_expected = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8084a24:	2b01      	cmp	r3, #1
                                 int mode,
                                 mbedtls_md_type_t md_alg,
                                 unsigned int hashlen,
                                 const unsigned char *hash,
                                 const unsigned char *sig )
{
 8084a26:	4680      	mov	r8, r0
 8084a28:	468a      	mov	sl, r1
 8084a2a:	4693      	mov	fp, r2
 8084a2c:	4699      	mov	r9, r3
    int ret = 0;
    const size_t sig_len = ctx->len;
 8084a2e:	6845      	ldr	r5, [r0, #4]
    unsigned char *encoded = NULL, *encoded_expected = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8084a30:	d102      	bne.n	8084a38 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x18>
 8084a32:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8084a36:	b9eb      	cbnz	r3, 8084a74 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x54>

    /*
     * Prepare expected PKCS1 v1.5 encoding of hash.
     */

    if( ( encoded          = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL ||
 8084a38:	4629      	mov	r1, r5
 8084a3a:	2001      	movs	r0, #1
 8084a3c:	f00d fc60 	bl	8092300 <calloc>
 8084a40:	4606      	mov	r6, r0
 8084a42:	b1c8      	cbz	r0, 8084a78 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x58>
 8084a44:	4629      	mov	r1, r5
 8084a46:	2001      	movs	r0, #1
 8084a48:	f00d fc5a 	bl	8092300 <calloc>
 8084a4c:	4607      	mov	r7, r0
 8084a4e:	b9c0      	cbnz	r0, 8084a82 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x62>
        ( encoded_expected = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL )
    {
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
 8084a50:	f06f 040f 	mvn.w	r4, #15

cleanup:

    if( encoded != NULL )
    {
        mbedtls_zeroize( encoded, sig_len );
 8084a54:	4630      	mov	r0, r6
 8084a56:	4629      	mov	r1, r5
 8084a58:	f7fe fe4c 	bl	80836f4 <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( encoded );
 8084a5c:	4630      	mov	r0, r6
 8084a5e:	f00b ff0b 	bl	8090878 <free>
    }

    if( encoded_expected != NULL )
 8084a62:	b167      	cbz	r7, 8084a7e <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x5e>
    {
        mbedtls_zeroize( encoded_expected, sig_len );
 8084a64:	4638      	mov	r0, r7
 8084a66:	4629      	mov	r1, r5
 8084a68:	f7fe fe44 	bl	80836f4 <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( encoded_expected );
 8084a6c:	4638      	mov	r0, r7
 8084a6e:	f00b ff03 	bl	8090878 <free>
 8084a72:	e004      	b.n	8084a7e <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x5e>
    int ret = 0;
    const size_t sig_len = ctx->len;
    unsigned char *encoded = NULL, *encoded_expected = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8084a74:	481b      	ldr	r0, [pc, #108]	; (8084ae4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc4>)
 8084a76:	e031      	b.n	8084adc <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
     */

    if( ( encoded          = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL ||
        ( encoded_expected = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL )
    {
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
 8084a78:	f06f 000f 	mvn.w	r0, #15
 8084a7c:	e02e      	b.n	8084adc <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
 8084a7e:	4620      	mov	r0, r4
 8084a80:	e02c      	b.n	8084adc <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
        goto cleanup;
    }

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash, sig_len,
 8084a82:	9000      	str	r0, [sp, #0]
 8084a84:	462b      	mov	r3, r5
 8084a86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8084a88:	990d      	ldr	r1, [sp, #52]	; 0x34
 8084a8a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 8084a8e:	f7fe fe8b 	bl	80837a8 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>
 8084a92:	4604      	mov	r4, r0
 8084a94:	2800      	cmp	r0, #0
 8084a96:	d1dd      	bne.n	8084a54 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
     * Apply RSA primitive to get what should be PKCS1 encoded hash.
     */

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, encoded )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
 8084a98:	f1b9 0f00 	cmp.w	r9, #0
 8084a9c:	d105      	bne.n	8084aaa <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x8a>
 8084a9e:	4632      	mov	r2, r6
 8084aa0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8084aa2:	4640      	mov	r0, r8
 8084aa4:	f7ff f8da 	bl	8083c5c <mbedtls_rsa_public>
 8084aa8:	e006      	b.n	8084ab8 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x98>
 8084aaa:	9600      	str	r6, [sp, #0]
 8084aac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8084aae:	465a      	mov	r2, fp
 8084ab0:	4651      	mov	r1, sl
 8084ab2:	4640      	mov	r0, r8
 8084ab4:	f7ff f914 	bl	8083ce0 <mbedtls_rsa_private>
 8084ab8:	4604      	mov	r4, r0
    if( ret != 0 )
 8084aba:	2800      	cmp	r0, #0
 8084abc:	d1ca      	bne.n	8084a54 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
 8084abe:	4603      	mov	r3, r0
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 8084ac0:	429d      	cmp	r5, r3
 8084ac2:	d006      	beq.n	8084ad2 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xb2>
        diff |= A[i] ^ B[i];
 8084ac4:	5cf0      	ldrb	r0, [r6, r3]
 8084ac6:	5cfa      	ldrb	r2, [r7, r3]
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 8084ac8:	3301      	adds	r3, #1
        diff |= A[i] ^ B[i];
 8084aca:	4050      	eors	r0, r2
 8084acc:	4304      	orrs	r4, r0
 8084ace:	b2e4      	uxtb	r4, r4
 8084ad0:	e7f6      	b.n	8084ac0 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xa0>
     */

    if( ( ret = mbedtls_safer_memcmp( encoded, encoded_expected,
                                      sig_len ) ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 8084ad2:	2c00      	cmp	r4, #0
 8084ad4:	4c04      	ldr	r4, [pc, #16]	; (8084ae8 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc8>)
 8084ad6:	bf08      	it	eq
 8084ad8:	2400      	moveq	r4, #0
 8084ada:	e7bb      	b.n	8084a54 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
        mbedtls_zeroize( encoded_expected, sig_len );
        mbedtls_free( encoded_expected );
    }

    return( ret );
}
 8084adc:	b003      	add	sp, #12
 8084ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084ae2:	bf00      	nop
 8084ae4:	ffffbf80 	.word	0xffffbf80
 8084ae8:	ffffbc80 	.word	0xffffbc80

08084aec <mbedtls_rsa_pkcs1_verify>:
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
 8084aec:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
 8084aee:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	; 0xa4
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
 8084af2:	ad06      	add	r5, sp, #24
 8084af4:	f89d 4014 	ldrb.w	r4, [sp, #20]
 8084af8:	cde0      	ldmia	r5, {r5, r6, r7}
    switch( ctx->padding )
 8084afa:	f1be 0f00 	cmp.w	lr, #0
 8084afe:	d00a      	beq.n	8084b16 <mbedtls_rsa_pkcs1_verify+0x2a>
 8084b00:	f1be 0f01 	cmp.w	lr, #1
 8084b04:	d10f      	bne.n	8084b26 <mbedtls_rsa_pkcs1_verify+0x3a>
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
                                          hashlen, hash, sig );
 8084b06:	9708      	str	r7, [sp, #32]
 8084b08:	9607      	str	r6, [sp, #28]
 8084b0a:	9506      	str	r5, [sp, #24]
 8084b0c:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8084b0e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
                                          hashlen, hash, sig );
 8084b12:	f7ff bf6b 	b.w	80849ec <mbedtls_rsa_rsassa_pss_verify>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
                                                hashlen, hash, sig );
 8084b16:	9708      	str	r7, [sp, #32]
 8084b18:	9607      	str	r6, [sp, #28]
 8084b1a:	9506      	str	r5, [sp, #24]
 8084b1c:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8084b1e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
                                                hashlen, hash, sig );
 8084b22:	f7ff bf7d 	b.w	8084a20 <mbedtls_rsa_rsassa_pkcs1_v15_verify>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8084b26:	4801      	ldr	r0, [pc, #4]	; (8084b2c <mbedtls_rsa_pkcs1_verify+0x40>)
 8084b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084b2a:	bf00      	nop
 8084b2c:	ffffbf00 	.word	0xffffbf00

08084b30 <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
 8084b30:	b510      	push	{r4, lr}
 8084b32:	4604      	mov	r4, r0
    mbedtls_mpi_free( &ctx->Vi ); mbedtls_mpi_free( &ctx->Vf );
 8084b34:	308c      	adds	r0, #140	; 0x8c
 8084b36:	f006 fa62 	bl	808affe <mbedtls_mpi_free>
 8084b3a:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8084b3e:	f006 fa5e 	bl	808affe <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN ); mbedtls_mpi_free( &ctx->D  );
 8084b42:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8084b46:	f006 fa5a 	bl	808affe <mbedtls_mpi_free>
 8084b4a:	f104 0020 	add.w	r0, r4, #32
 8084b4e:	f006 fa56 	bl	808affe <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  ); mbedtls_mpi_free( &ctx->P  );
 8084b52:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8084b56:	f006 fa52 	bl	808affe <mbedtls_mpi_free>
 8084b5a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8084b5e:	f006 fa4e 	bl	808affe <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  ); mbedtls_mpi_free( &ctx->N  );
 8084b62:	f104 0014 	add.w	r0, r4, #20
 8084b66:	f006 fa4a 	bl	808affe <mbedtls_mpi_free>
 8084b6a:	f104 0008 	add.w	r0, r4, #8
 8084b6e:	f006 fa46 	bl	808affe <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ ); mbedtls_mpi_free( &ctx->RP );
 8084b72:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8084b76:	f006 fa42 	bl	808affe <mbedtls_mpi_free>
 8084b7a:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8084b7e:	f006 fa3e 	bl	808affe <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP ); mbedtls_mpi_free( &ctx->DQ );
 8084b82:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8084b86:	f006 fa3a 	bl	808affe <mbedtls_mpi_free>
 8084b8a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8084b8e:	f006 fa36 	bl	808affe <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
 8084b92:	f104 0044 	add.w	r0, r4, #68	; 0x44
#endif /* MBEDTLS_RSA_NO_CRT */

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
}
 8084b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->E  ); mbedtls_mpi_free( &ctx->N  );

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ ); mbedtls_mpi_free( &ctx->RP );
    mbedtls_mpi_free( &ctx->QP ); mbedtls_mpi_free( &ctx->DQ );
    mbedtls_mpi_free( &ctx->DP );
 8084b9a:	f006 ba30 	b.w	808affe <mbedtls_mpi_free>
	...

08084ba0 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf>:
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
 8084ba0:	b538      	push	{r3, r4, r5, lr}
 8084ba2:	4605      	mov	r5, r0
 8084ba4:	b160      	cbz	r0, 8084bc0 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x20>
 8084ba6:	4c08      	ldr	r4, [pc, #32]	; (8084bc8 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x28>)
 8084ba8:	6820      	ldr	r0, [r4, #0]
 8084baa:	b158      	cbz	r0, 8084bc4 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x24>
 8084bac:	6862      	ldr	r2, [r4, #4]
 8084bae:	686b      	ldr	r3, [r5, #4]
 8084bb0:	429a      	cmp	r2, r3
 8084bb2:	d103      	bne.n	8084bbc <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x1c>
 8084bb4:	68a9      	ldr	r1, [r5, #8]
 8084bb6:	f00d fbb9 	bl	809232c <memcmp>
 8084bba:	b110      	cbz	r0, 8084bc2 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x22>
 8084bbc:	3414      	adds	r4, #20
 8084bbe:	e7f3      	b.n	8084ba8 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x8>
 8084bc0:	bd38      	pop	{r3, r4, r5, pc}
 8084bc2:	4620      	mov	r0, r4
 8084bc4:	bd38      	pop	{r3, r4, r5, pc}
 8084bc6:	bf00      	nop
 8084bc8:	080932a4 	.word	0x080932a4

08084bcc <mbedtls_oid_get_attr_short_name>:
        NULL,
    }
};

FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 8084bcc:	b570      	push	{r4, r5, r6, lr}
 8084bce:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        NULL,
    }
};

FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
 8084bd0:	4605      	mov	r5, r0
 8084bd2:	b160      	cbz	r0, 8084bee <mbedtls_oid_get_attr_short_name+0x22>
 8084bd4:	4c09      	ldr	r4, [pc, #36]	; (8084bfc <mbedtls_oid_get_attr_short_name+0x30>)
 8084bd6:	6820      	ldr	r0, [r4, #0]
 8084bd8:	b148      	cbz	r0, 8084bee <mbedtls_oid_get_attr_short_name+0x22>
 8084bda:	6862      	ldr	r2, [r4, #4]
 8084bdc:	686b      	ldr	r3, [r5, #4]
 8084bde:	429a      	cmp	r2, r3
 8084be0:	d103      	bne.n	8084bea <mbedtls_oid_get_attr_short_name+0x1e>
 8084be2:	68a9      	ldr	r1, [r5, #8]
 8084be4:	f00d fba2 	bl	809232c <memcmp>
 8084be8:	b120      	cbz	r0, 8084bf4 <mbedtls_oid_get_attr_short_name+0x28>
 8084bea:	3414      	adds	r4, #20
 8084bec:	e7f3      	b.n	8084bd6 <mbedtls_oid_get_attr_short_name+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 8084bee:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8084bf2:	bd70      	pop	{r4, r5, r6, pc}
 8084bf4:	6923      	ldr	r3, [r4, #16]
 8084bf6:	6033      	str	r3, [r6, #0]
 8084bf8:	bd70      	pop	{r4, r5, r6, pc}
 8084bfa:	bf00      	nop
 8084bfc:	08092794 	.word	0x08092794

08084c00 <mbedtls_oid_get_x509_ext_type>:
        0,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 8084c00:	b570      	push	{r4, r5, r6, lr}
 8084c02:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        0,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
 8084c04:	4605      	mov	r5, r0
 8084c06:	b160      	cbz	r0, 8084c22 <mbedtls_oid_get_x509_ext_type+0x22>
 8084c08:	4c09      	ldr	r4, [pc, #36]	; (8084c30 <mbedtls_oid_get_x509_ext_type+0x30>)
 8084c0a:	6820      	ldr	r0, [r4, #0]
 8084c0c:	b148      	cbz	r0, 8084c22 <mbedtls_oid_get_x509_ext_type+0x22>
 8084c0e:	6862      	ldr	r2, [r4, #4]
 8084c10:	686b      	ldr	r3, [r5, #4]
 8084c12:	429a      	cmp	r2, r3
 8084c14:	d103      	bne.n	8084c1e <mbedtls_oid_get_x509_ext_type+0x1e>
 8084c16:	68a9      	ldr	r1, [r5, #8]
 8084c18:	f00d fb88 	bl	809232c <memcmp>
 8084c1c:	b120      	cbz	r0, 8084c28 <mbedtls_oid_get_x509_ext_type+0x28>
 8084c1e:	3414      	adds	r4, #20
 8084c20:	e7f3      	b.n	8084c0a <mbedtls_oid_get_x509_ext_type+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 8084c22:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8084c26:	bd70      	pop	{r4, r5, r6, pc}
 8084c28:	6923      	ldr	r3, [r4, #16]
 8084c2a:	6033      	str	r3, [r6, #0]
 8084c2c:	bd70      	pop	{r4, r5, r6, pc}
 8084c2e:	bf00      	nop
 8084c30:	080933bc 	.word	0x080933bc

08084c34 <mbedtls_oid_get_extended_key_usage>:
    { ADD_LEN( MBEDTLS_OID_OCSP_SIGNING ),     "id-kp-OCSPSigning",     "OCSP Signing" },
    { NULL, 0, NULL, NULL },
};

FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 8084c34:	b570      	push	{r4, r5, r6, lr}
 8084c36:	460e      	mov	r6, r1
    { ADD_LEN( MBEDTLS_OID_TIME_STAMPING ),    "id-kp-timeStamping",    "Time Stamping" },
    { ADD_LEN( MBEDTLS_OID_OCSP_SIGNING ),     "id-kp-OCSPSigning",     "OCSP Signing" },
    { NULL, 0, NULL, NULL },
};

FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
 8084c38:	4605      	mov	r5, r0
 8084c3a:	b160      	cbz	r0, 8084c56 <mbedtls_oid_get_extended_key_usage+0x22>
 8084c3c:	4c09      	ldr	r4, [pc, #36]	; (8084c64 <mbedtls_oid_get_extended_key_usage+0x30>)
 8084c3e:	6820      	ldr	r0, [r4, #0]
 8084c40:	b148      	cbz	r0, 8084c56 <mbedtls_oid_get_extended_key_usage+0x22>
 8084c42:	6862      	ldr	r2, [r4, #4]
 8084c44:	686b      	ldr	r3, [r5, #4]
 8084c46:	429a      	cmp	r2, r3
 8084c48:	d103      	bne.n	8084c52 <mbedtls_oid_get_extended_key_usage+0x1e>
 8084c4a:	68a9      	ldr	r1, [r5, #8]
 8084c4c:	f00d fb6e 	bl	809232c <memcmp>
 8084c50:	b120      	cbz	r0, 8084c5c <mbedtls_oid_get_extended_key_usage+0x28>
 8084c52:	3410      	adds	r4, #16
 8084c54:	e7f3      	b.n	8084c3e <mbedtls_oid_get_extended_key_usage+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 8084c56:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8084c5a:	bd70      	pop	{r4, r5, r6, pc}
 8084c5c:	68e3      	ldr	r3, [r4, #12]
 8084c5e:	6033      	str	r3, [r6, #0]
 8084c60:	bd70      	pop	{r4, r5, r6, pc}
 8084c62:	bf00      	nop
 8084c64:	08092924 	.word	0x08092924

08084c68 <mbedtls_oid_get_sig_alg_desc>:
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
FN_OID_GET_DESCRIPTOR_ATTR1(mbedtls_oid_get_sig_alg_desc, oid_sig_alg_t, sig_alg, const char *, description)
 8084c68:	b510      	push	{r4, lr}
 8084c6a:	460c      	mov	r4, r1
 8084c6c:	f7ff ff98 	bl	8084ba0 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf>
 8084c70:	b118      	cbz	r0, 8084c7a <mbedtls_oid_get_sig_alg_desc+0x12>
 8084c72:	68c3      	ldr	r3, [r0, #12]
 8084c74:	2000      	movs	r0, #0
 8084c76:	6023      	str	r3, [r4, #0]
 8084c78:	bd10      	pop	{r4, pc}
 8084c7a:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8084c7e:	bd10      	pop	{r4, pc}

08084c80 <mbedtls_oid_get_sig_alg>:
FN_OID_GET_ATTR2(mbedtls_oid_get_sig_alg, oid_sig_alg_t, sig_alg, mbedtls_md_type_t, md_alg, mbedtls_pk_type_t, pk_alg)
 8084c80:	b538      	push	{r3, r4, r5, lr}
 8084c82:	460d      	mov	r5, r1
 8084c84:	4614      	mov	r4, r2
 8084c86:	f7ff ff8b 	bl	8084ba0 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf>
 8084c8a:	b128      	cbz	r0, 8084c98 <mbedtls_oid_get_sig_alg+0x18>
 8084c8c:	7c03      	ldrb	r3, [r0, #16]
 8084c8e:	702b      	strb	r3, [r5, #0]
 8084c90:	7c43      	ldrb	r3, [r0, #17]
 8084c92:	2000      	movs	r0, #0
 8084c94:	7023      	strb	r3, [r4, #0]
 8084c96:	bd38      	pop	{r3, r4, r5, pc}
 8084c98:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8084c9c:	bd38      	pop	{r3, r4, r5, pc}
	...

08084ca0 <mbedtls_oid_get_pk_alg>:
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 8084ca0:	b570      	push	{r4, r5, r6, lr}
 8084ca2:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
 8084ca4:	4605      	mov	r5, r0
 8084ca6:	b160      	cbz	r0, 8084cc2 <mbedtls_oid_get_pk_alg+0x22>
 8084ca8:	4c09      	ldr	r4, [pc, #36]	; (8084cd0 <mbedtls_oid_get_pk_alg+0x30>)
 8084caa:	6820      	ldr	r0, [r4, #0]
 8084cac:	b148      	cbz	r0, 8084cc2 <mbedtls_oid_get_pk_alg+0x22>
 8084cae:	6862      	ldr	r2, [r4, #4]
 8084cb0:	686b      	ldr	r3, [r5, #4]
 8084cb2:	429a      	cmp	r2, r3
 8084cb4:	d103      	bne.n	8084cbe <mbedtls_oid_get_pk_alg+0x1e>
 8084cb6:	68a9      	ldr	r1, [r5, #8]
 8084cb8:	f00d fb38 	bl	809232c <memcmp>
 8084cbc:	b120      	cbz	r0, 8084cc8 <mbedtls_oid_get_pk_alg+0x28>
 8084cbe:	3414      	adds	r4, #20
 8084cc0:	e7f3      	b.n	8084caa <mbedtls_oid_get_pk_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 8084cc2:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8084cc6:	bd70      	pop	{r4, r5, r6, pc}
 8084cc8:	7c23      	ldrb	r3, [r4, #16]
 8084cca:	7033      	strb	r3, [r6, #0]
 8084ccc:	bd70      	pop	{r4, r5, r6, pc}
 8084cce:	bf00      	nop
 8084cd0:	08092994 	.word	0x08092994

08084cd4 <mbedtls_oid_get_cipher_alg>:
        MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_cipher_alg_t, cipher_alg, oid_cipher_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_cipher_alg, oid_cipher_alg_t, cipher_alg, mbedtls_cipher_type_t, cipher_alg)
 8084cd4:	b570      	push	{r4, r5, r6, lr}
 8084cd6:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_cipher_alg_t, cipher_alg, oid_cipher_alg)
 8084cd8:	4605      	mov	r5, r0
 8084cda:	b160      	cbz	r0, 8084cf6 <mbedtls_oid_get_cipher_alg+0x22>
 8084cdc:	4c09      	ldr	r4, [pc, #36]	; (8084d04 <mbedtls_oid_get_cipher_alg+0x30>)
 8084cde:	6820      	ldr	r0, [r4, #0]
 8084ce0:	b148      	cbz	r0, 8084cf6 <mbedtls_oid_get_cipher_alg+0x22>
 8084ce2:	6862      	ldr	r2, [r4, #4]
 8084ce4:	686b      	ldr	r3, [r5, #4]
 8084ce6:	429a      	cmp	r2, r3
 8084ce8:	d103      	bne.n	8084cf2 <mbedtls_oid_get_cipher_alg+0x1e>
 8084cea:	68a9      	ldr	r1, [r5, #8]
 8084cec:	f00d fb1e 	bl	809232c <memcmp>
 8084cf0:	b120      	cbz	r0, 8084cfc <mbedtls_oid_get_cipher_alg+0x28>
 8084cf2:	3414      	adds	r4, #20
 8084cf4:	e7f3      	b.n	8084cde <mbedtls_oid_get_cipher_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_cipher_alg, oid_cipher_alg_t, cipher_alg, mbedtls_cipher_type_t, cipher_alg)
 8084cf6:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8084cfa:	bd70      	pop	{r4, r5, r6, pc}
 8084cfc:	7c23      	ldrb	r3, [r4, #16]
 8084cfe:	7033      	strb	r3, [r6, #0]
 8084d00:	bd70      	pop	{r4, r5, r6, pc}
 8084d02:	bf00      	nop
 8084d04:	080929e4 	.word	0x080929e4

08084d08 <mbedtls_oid_get_oid_by_md>:
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
FN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_md, oid_md_alg_t, oid_md_alg, mbedtls_md_type_t, md_alg)
 8084d08:	b530      	push	{r4, r5, lr}
 8084d0a:	4b08      	ldr	r3, [pc, #32]	; (8084d2c <mbedtls_oid_get_oid_by_md+0x24>)
 8084d0c:	681c      	ldr	r4, [r3, #0]
 8084d0e:	b14c      	cbz	r4, 8084d24 <mbedtls_oid_get_oid_by_md+0x1c>
 8084d10:	7c1d      	ldrb	r5, [r3, #16]
 8084d12:	4285      	cmp	r5, r0
 8084d14:	d104      	bne.n	8084d20 <mbedtls_oid_get_oid_by_md+0x18>
 8084d16:	600c      	str	r4, [r1, #0]
 8084d18:	685b      	ldr	r3, [r3, #4]
 8084d1a:	2000      	movs	r0, #0
 8084d1c:	6013      	str	r3, [r2, #0]
 8084d1e:	bd30      	pop	{r4, r5, pc}
 8084d20:	3314      	adds	r3, #20
 8084d22:	e7f3      	b.n	8084d0c <mbedtls_oid_get_oid_by_md+0x4>
 8084d24:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8084d28:	bd30      	pop	{r4, r5, pc}
 8084d2a:	bf00      	nop
 8084d2c:	0809322c 	.word	0x0809322c

08084d30 <mbedtls_oid_get_md_hmac>:
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_hmac_t, md_hmac, oid_md_hmac)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_hmac, oid_md_hmac_t, md_hmac, mbedtls_md_type_t, md_hmac)
 8084d30:	b570      	push	{r4, r5, r6, lr}
 8084d32:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_hmac_t, md_hmac, oid_md_hmac)
 8084d34:	4605      	mov	r5, r0
 8084d36:	b160      	cbz	r0, 8084d52 <mbedtls_oid_get_md_hmac+0x22>
 8084d38:	4c09      	ldr	r4, [pc, #36]	; (8084d60 <mbedtls_oid_get_md_hmac+0x30>)
 8084d3a:	6820      	ldr	r0, [r4, #0]
 8084d3c:	b148      	cbz	r0, 8084d52 <mbedtls_oid_get_md_hmac+0x22>
 8084d3e:	6862      	ldr	r2, [r4, #4]
 8084d40:	686b      	ldr	r3, [r5, #4]
 8084d42:	429a      	cmp	r2, r3
 8084d44:	d103      	bne.n	8084d4e <mbedtls_oid_get_md_hmac+0x1e>
 8084d46:	68a9      	ldr	r1, [r5, #8]
 8084d48:	f00d faf0 	bl	809232c <memcmp>
 8084d4c:	b120      	cbz	r0, 8084d58 <mbedtls_oid_get_md_hmac+0x28>
 8084d4e:	3414      	adds	r4, #20
 8084d50:	e7f3      	b.n	8084d3a <mbedtls_oid_get_md_hmac+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_md_hmac, oid_md_hmac_t, md_hmac, mbedtls_md_type_t, md_hmac)
 8084d52:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8084d56:	bd70      	pop	{r4, r5, r6, pc}
 8084d58:	7c23      	ldrb	r3, [r4, #16]
 8084d5a:	7033      	strb	r3, [r6, #0]
 8084d5c:	bd70      	pop	{r4, r5, r6, pc}
 8084d5e:	bf00      	nop
 8084d60:	08093344 	.word	0x08093344

08084d64 <mbedtls_oid_get_pkcs12_pbe_alg>:
        MBEDTLS_MD_NONE, MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, oid_pkcs12_pbe_alg)
FN_OID_GET_ATTR2(mbedtls_oid_get_pkcs12_pbe_alg, oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, mbedtls_md_type_t, md_alg, mbedtls_cipher_type_t, cipher_alg)
 8084d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8084d66:	460f      	mov	r7, r1
 8084d68:	4616      	mov	r6, r2
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, oid_pkcs12_pbe_alg)
 8084d6a:	4605      	mov	r5, r0
 8084d6c:	b160      	cbz	r0, 8084d88 <mbedtls_oid_get_pkcs12_pbe_alg+0x24>
 8084d6e:	4c0a      	ldr	r4, [pc, #40]	; (8084d98 <mbedtls_oid_get_pkcs12_pbe_alg+0x34>)
 8084d70:	6820      	ldr	r0, [r4, #0]
 8084d72:	b148      	cbz	r0, 8084d88 <mbedtls_oid_get_pkcs12_pbe_alg+0x24>
 8084d74:	6862      	ldr	r2, [r4, #4]
 8084d76:	686b      	ldr	r3, [r5, #4]
 8084d78:	429a      	cmp	r2, r3
 8084d7a:	d103      	bne.n	8084d84 <mbedtls_oid_get_pkcs12_pbe_alg+0x20>
 8084d7c:	68a9      	ldr	r1, [r5, #8]
 8084d7e:	f00d fad5 	bl	809232c <memcmp>
 8084d82:	b120      	cbz	r0, 8084d8e <mbedtls_oid_get_pkcs12_pbe_alg+0x2a>
 8084d84:	3414      	adds	r4, #20
 8084d86:	e7f3      	b.n	8084d70 <mbedtls_oid_get_pkcs12_pbe_alg+0xc>
FN_OID_GET_ATTR2(mbedtls_oid_get_pkcs12_pbe_alg, oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, mbedtls_md_type_t, md_alg, mbedtls_cipher_type_t, cipher_alg)
 8084d88:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8084d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8084d8e:	7c23      	ldrb	r3, [r4, #16]
 8084d90:	703b      	strb	r3, [r7, #0]
 8084d92:	7c63      	ldrb	r3, [r4, #17]
 8084d94:	7033      	strb	r3, [r6, #0]
 8084d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8084d98:	080931f0 	.word	0x080931f0

08084d9c <mbedtls_sha1_init>:
}
#endif

void mbedtls_sha1_init( mbedtls_sha1_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha1_context ) );
 8084d9c:	225c      	movs	r2, #92	; 0x5c
 8084d9e:	2100      	movs	r1, #0
 8084da0:	f00d baf9 	b.w	8092396 <memset>

08084da4 <mbedtls_sha1_free>:
}

void mbedtls_sha1_free( mbedtls_sha1_context *ctx )
{
    if( ctx == NULL )
 8084da4:	b138      	cbz	r0, 8084db6 <mbedtls_sha1_free+0x12>
 8084da6:	f100 025c 	add.w	r2, r0, #92	; 0x5c

#if !defined(MBEDTLS_SHA1_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 8084daa:	2300      	movs	r3, #0
 8084dac:	4290      	cmp	r0, r2
 8084dae:	d002      	beq.n	8084db6 <mbedtls_sha1_free+0x12>
 8084db0:	7003      	strb	r3, [r0, #0]
 8084db2:	3001      	adds	r0, #1
 8084db4:	e7fa      	b.n	8084dac <mbedtls_sha1_free+0x8>
 8084db6:	4770      	bx	lr

08084db8 <mbedtls_sha1_clone>:
    mbedtls_zeroize( ctx, sizeof( mbedtls_sha1_context ) );
}

void mbedtls_sha1_clone( mbedtls_sha1_context *dst,
                         const mbedtls_sha1_context *src )
{
 8084db8:	b508      	push	{r3, lr}
    *dst = *src;
 8084dba:	225c      	movs	r2, #92	; 0x5c
 8084dbc:	f00d fac5 	bl	809234a <memcpy>
 8084dc0:	bd08      	pop	{r3, pc}
	...

08084dc4 <mbedtls_sha1_starts_ret>:

/*
 * SHA-1 context setup
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
 8084dc4:	4603      	mov	r3, r0
    ctx->total[0] = 0;
    ctx->total[1] = 0;

    ctx->state[0] = 0x67452301;
 8084dc6:	4a0a      	ldr	r2, [pc, #40]	; (8084df0 <mbedtls_sha1_starts_ret+0x2c>)
/*
 * SHA-1 context setup
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
    ctx->total[0] = 0;
 8084dc8:	2000      	movs	r0, #0
    ctx->total[1] = 0;

    ctx->state[0] = 0x67452301;
 8084dca:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xEFCDAB89;
 8084dcc:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8084dd0:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x98BADCFE;
 8084dd2:	f102 4229 	add.w	r2, r2, #2835349504	; 0xa9000000
 8084dd6:	f5a2 1296 	sub.w	r2, r2, #1228800	; 0x12c000
 8084dda:	f6a2 628b 	subw	r2, r2, #3723	; 0xe8b
 8084dde:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0x10325476;
 8084de0:	f1a2 3288 	sub.w	r2, r2, #2290649224	; 0x88888888
 8084de4:	615a      	str	r2, [r3, #20]
    ctx->state[4] = 0xC3D2E1F0;
 8084de6:	4a03      	ldr	r2, [pc, #12]	; (8084df4 <mbedtls_sha1_starts_ret+0x30>)
/*
 * SHA-1 context setup
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
    ctx->total[0] = 0;
 8084de8:	6018      	str	r0, [r3, #0]
    ctx->total[1] = 0;
 8084dea:	6058      	str	r0, [r3, #4]

    ctx->state[0] = 0x67452301;
    ctx->state[1] = 0xEFCDAB89;
    ctx->state[2] = 0x98BADCFE;
    ctx->state[3] = 0x10325476;
    ctx->state[4] = 0xC3D2E1F0;
 8084dec:	619a      	str	r2, [r3, #24]

    return( 0 );
}
 8084dee:	4770      	bx	lr
 8084df0:	67452301 	.word	0x67452301
 8084df4:	c3d2e1f0 	.word	0xc3d2e1f0

08084df8 <mbedtls_internal_sha1_process>:
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
 8084df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
 8084dfc:	784b      	ldrb	r3, [r1, #1]
 8084dfe:	780a      	ldrb	r2, [r1, #0]
 8084e00:	041b      	lsls	r3, r3, #16
 8084e02:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8084e06:	78ca      	ldrb	r2, [r1, #3]
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
 8084e08:	b097      	sub	sp, #92	; 0x5c
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
 8084e0a:	4313      	orrs	r3, r2
 8084e0c:	788a      	ldrb	r2, [r1, #2]
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
 8084e0e:	f891 c008 	ldrb.w	ip, [r1, #8]
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
 8084e12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8084e16:	9306      	str	r3, [sp, #24]
    GET_UINT32_BE( W[ 1], data,  4 );
 8084e18:	794b      	ldrb	r3, [r1, #5]
 8084e1a:	790a      	ldrb	r2, [r1, #4]
 8084e1c:	041b      	lsls	r3, r3, #16
 8084e1e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8084e22:	79ca      	ldrb	r2, [r1, #7]
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
 8084e24:	f891 800c 	ldrb.w	r8, [r1, #12]
                                   const unsigned char data[64] )
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
 8084e28:	4313      	orrs	r3, r2
 8084e2a:	798a      	ldrb	r2, [r1, #6]
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
 8084e2c:	f891 e014 	ldrb.w	lr, [r1, #20]
                                   const unsigned char data[64] )
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
 8084e30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8084e34:	9307      	str	r3, [sp, #28]
    GET_UINT32_BE( W[ 2], data,  8 );
 8084e36:	7a4b      	ldrb	r3, [r1, #9]
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
 8084e38:	7c0a      	ldrb	r2, [r1, #16]
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
 8084e3a:	041b      	lsls	r3, r3, #16
 8084e3c:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 8084e40:	f891 c00b 	ldrb.w	ip, [r1, #11]
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
 8084e44:	7e0f      	ldrb	r7, [r1, #24]
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
 8084e46:	ea43 030c 	orr.w	r3, r3, ip
 8084e4a:	f891 c00a 	ldrb.w	ip, [r1, #10]
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
 8084e4e:	9001      	str	r0, [sp, #4]
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
 8084e50:	ea43 2c0c 	orr.w	ip, r3, ip, lsl #8
    GET_UINT32_BE( W[ 3], data, 12 );
 8084e54:	7b4b      	ldrb	r3, [r1, #13]
 8084e56:	041b      	lsls	r3, r3, #16
 8084e58:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 8084e5c:	f891 800f 	ldrb.w	r8, [r1, #15]
 8084e60:	ea43 0308 	orr.w	r3, r3, r8
 8084e64:	f891 800e 	ldrb.w	r8, [r1, #14]
 8084e68:	ea43 2808 	orr.w	r8, r3, r8, lsl #8
    GET_UINT32_BE( W[ 4], data, 16 );
 8084e6c:	7c4b      	ldrb	r3, [r1, #17]
 8084e6e:	041b      	lsls	r3, r3, #16
 8084e70:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8084e74:	7cca      	ldrb	r2, [r1, #19]
 8084e76:	4313      	orrs	r3, r2
 8084e78:	7c8a      	ldrb	r2, [r1, #18]
 8084e7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8084e7e:	930e      	str	r3, [sp, #56]	; 0x38
    GET_UINT32_BE( W[ 5], data, 20 );
 8084e80:	7d4b      	ldrb	r3, [r1, #21]
 8084e82:	041b      	lsls	r3, r3, #16
 8084e84:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 8084e88:	f891 e017 	ldrb.w	lr, [r1, #23]
 8084e8c:	ea43 030e 	orr.w	r3, r3, lr
 8084e90:	f891 e016 	ldrb.w	lr, [r1, #22]
 8084e94:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 8084e98:	930f      	str	r3, [sp, #60]	; 0x3c
    GET_UINT32_BE( W[ 6], data, 24 );
 8084e9a:	7e4b      	ldrb	r3, [r1, #25]
 8084e9c:	041b      	lsls	r3, r3, #16
 8084e9e:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 8084ea2:	7ecf      	ldrb	r7, [r1, #27]
    GET_UINT32_BE( W[ 7], data, 28 );
 8084ea4:	7f0e      	ldrb	r6, [r1, #28]
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
 8084ea6:	433b      	orrs	r3, r7
 8084ea8:	7e8f      	ldrb	r7, [r1, #26]
    GET_UINT32_BE( W[ 7], data, 28 );
    GET_UINT32_BE( W[ 8], data, 32 );
 8084eaa:	f891 4020 	ldrb.w	r4, [r1, #32]
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
 8084eae:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8084eb2:	9310      	str	r3, [sp, #64]	; 0x40
    GET_UINT32_BE( W[ 7], data, 28 );
 8084eb4:	7f4b      	ldrb	r3, [r1, #29]
    GET_UINT32_BE( W[ 8], data, 32 );
    GET_UINT32_BE( W[ 9], data, 36 );
 8084eb6:	f891 2024 	ldrb.w	r2, [r1, #36]	; 0x24
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
    GET_UINT32_BE( W[ 7], data, 28 );
 8084eba:	041b      	lsls	r3, r3, #16
 8084ebc:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8084ec0:	7fce      	ldrb	r6, [r1, #31]
    GET_UINT32_BE( W[ 8], data, 32 );
    GET_UINT32_BE( W[ 9], data, 36 );
    GET_UINT32_BE( W[10], data, 40 );
    GET_UINT32_BE( W[11], data, 44 );
 8084ec2:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
    GET_UINT32_BE( W[ 7], data, 28 );
 8084ec6:	4333      	orrs	r3, r6
 8084ec8:	7f8e      	ldrb	r6, [r1, #30]
 8084eca:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8084ece:	9311      	str	r3, [sp, #68]	; 0x44
    GET_UINT32_BE( W[ 8], data, 32 );
 8084ed0:	f891 3021 	ldrb.w	r3, [r1, #33]	; 0x21
 8084ed4:	041b      	lsls	r3, r3, #16
 8084ed6:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8084eda:	f891 4023 	ldrb.w	r4, [r1, #35]	; 0x23
 8084ede:	4323      	orrs	r3, r4
 8084ee0:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
 8084ee4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8084ee8:	9309      	str	r3, [sp, #36]	; 0x24
    GET_UINT32_BE( W[ 9], data, 36 );
 8084eea:	f891 3025 	ldrb.w	r3, [r1, #37]	; 0x25
 8084eee:	041b      	lsls	r3, r3, #16
 8084ef0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8084ef4:	f891 2027 	ldrb.w	r2, [r1, #39]	; 0x27
 8084ef8:	4313      	orrs	r3, r2
 8084efa:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
 8084efe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8084f02:	930a      	str	r3, [sp, #40]	; 0x28
    GET_UINT32_BE( W[10], data, 40 );
 8084f04:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 8084f08:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 8084f0c:	041b      	lsls	r3, r3, #16
 8084f0e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8084f12:	f891 202b 	ldrb.w	r2, [r1, #43]	; 0x2b
 8084f16:	4313      	orrs	r3, r2
 8084f18:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
 8084f1c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8084f20:	930b      	str	r3, [sp, #44]	; 0x2c
    GET_UINT32_BE( W[11], data, 44 );
 8084f22:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 8084f26:	041b      	lsls	r3, r3, #16
 8084f28:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8084f2c:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
 8084f30:	4303      	orrs	r3, r0
 8084f32:	f891 002e 	ldrb.w	r0, [r1, #46]	; 0x2e
 8084f36:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8084f3a:	930c      	str	r3, [sp, #48]	; 0x30
    GET_UINT32_BE( W[12], data, 48 );
 8084f3c:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 8084f40:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
 8084f44:	041b      	lsls	r3, r3, #16
 8084f46:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8084f4a:	f891 0033 	ldrb.w	r0, [r1, #51]	; 0x33
 8084f4e:	4303      	orrs	r3, r0
 8084f50:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
 8084f54:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8084f58:	930d      	str	r3, [sp, #52]	; 0x34
    GET_UINT32_BE( W[13], data, 52 );
 8084f5a:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 8084f5e:	f891 9034 	ldrb.w	r9, [r1, #52]	; 0x34
 8084f62:	041b      	lsls	r3, r3, #16
 8084f64:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
 8084f68:	f891 9037 	ldrb.w	r9, [r1, #55]	; 0x37
    GET_UINT32_BE( W[14], data, 56 );
 8084f6c:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
    GET_UINT32_BE( W[ 8], data, 32 );
    GET_UINT32_BE( W[ 9], data, 36 );
    GET_UINT32_BE( W[10], data, 40 );
    GET_UINT32_BE( W[11], data, 44 );
    GET_UINT32_BE( W[12], data, 48 );
    GET_UINT32_BE( W[13], data, 52 );
 8084f70:	ea43 0309 	orr.w	r3, r3, r9
 8084f74:	f891 9036 	ldrb.w	r9, [r1, #54]	; 0x36
 8084f78:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
 8084f7c:	9302      	str	r3, [sp, #8]
    GET_UINT32_BE( W[14], data, 56 );
 8084f7e:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
 8084f82:	041b      	lsls	r3, r3, #16
 8084f84:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8084f88:	f891 203b 	ldrb.w	r2, [r1, #59]	; 0x3b
 8084f8c:	4313      	orrs	r3, r2
 8084f8e:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8084f92:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8084f96:	9303      	str	r3, [sp, #12]
    GET_UINT32_BE( W[15], data, 60 );
 8084f98:	f891 303d 	ldrb.w	r3, [r1, #61]	; 0x3d
 8084f9c:	f891 203c 	ldrb.w	r2, [r1, #60]	; 0x3c
 8084fa0:	041b      	lsls	r3, r3, #16
 8084fa2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8084fa6:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
 8084faa:	4313      	orrs	r3, r2
 8084fac:	f891 203e 	ldrb.w	r2, [r1, #62]	; 0x3e
 8084fb0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8084fb4:	9304      	str	r3, [sp, #16]
#define P(a,b,c,d,e,x)                                  \
{                                                       \
    e += S(a,5) + F(b,c,d) + K + x; b = S(b,30);        \
}

    A = ctx->state[0];
 8084fb6:	9b01      	ldr	r3, [sp, #4]
 8084fb8:	689b      	ldr	r3, [r3, #8]
 8084fba:	9312      	str	r3, [sp, #72]	; 0x48
    B = ctx->state[1];
 8084fbc:	9b01      	ldr	r3, [sp, #4]
 8084fbe:	68db      	ldr	r3, [r3, #12]
 8084fc0:	9314      	str	r3, [sp, #80]	; 0x50
    C = ctx->state[2];
 8084fc2:	9b01      	ldr	r3, [sp, #4]
 8084fc4:	691b      	ldr	r3, [r3, #16]
 8084fc6:	9305      	str	r3, [sp, #20]
    D = ctx->state[3];
 8084fc8:	9b01      	ldr	r3, [sp, #4]
 8084fca:	695b      	ldr	r3, [r3, #20]
 8084fcc:	9313      	str	r3, [sp, #76]	; 0x4c
    E = ctx->state[4];
 8084fce:	9b01      	ldr	r3, [sp, #4]
 8084fd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8084fd2:	699b      	ldr	r3, [r3, #24]
 8084fd4:	9315      	str	r3, [sp, #84]	; 0x54
 8084fd6:	9b05      	ldr	r3, [sp, #20]
 8084fd8:	ea83 0e02 	eor.w	lr, r3, r2
 8084fdc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8084fde:	9912      	ldr	r1, [sp, #72]	; 0x48
 8084fe0:	ea0e 0e03 	and.w	lr, lr, r3
 8084fe4:	ea8e 0e02 	eor.w	lr, lr, r2
 8084fe8:	4bdd      	ldr	r3, [pc, #884]	; (8085360 <mbedtls_internal_sha1_process+0x568>)
 8084fea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8084fec:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8084fee:	441a      	add	r2, r3
 8084ff0:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8084ff4:	4496      	add	lr, r2

#define F(x,y,z) (z ^ (x & (y ^ z)))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
 8084ff6:	9a06      	ldr	r2, [sp, #24]
 8084ff8:	eb04 0b03 	add.w	fp, r4, r3
 8084ffc:	4496      	add	lr, r2
 8084ffe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8085000:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8085002:	ea4f 00b2 	mov.w	r0, r2, ror #2
 8085006:	9a05      	ldr	r2, [sp, #20]
 8085008:	18c5      	adds	r5, r0, r3
 808500a:	ea82 0700 	eor.w	r7, r2, r0
 808500e:	9a05      	ldr	r2, [sp, #20]
 8085010:	400f      	ands	r7, r1
 8085012:	4057      	eors	r7, r2
 8085014:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    P( E, A, B, C, D, W[1]  );
 8085016:	ea4f 01b1 	mov.w	r1, r1, ror #2
 808501a:	441a      	add	r2, r3
 808501c:	4417      	add	r7, r2
 808501e:	9a07      	ldr	r2, [sp, #28]
 8085020:	ea80 0901 	eor.w	r9, r0, r1
 8085024:	4417      	add	r7, r2
 8085026:	9a05      	ldr	r2, [sp, #20]
 8085028:	ea09 090e 	and.w	r9, r9, lr
 808502c:	441a      	add	r2, r3
 808502e:	eb07 67fe 	add.w	r7, r7, lr, ror #27
 8085032:	4462      	add	r2, ip
    P( D, E, A, B, C, W[2]  );
 8085034:	ea4f 0ebe 	mov.w	lr, lr, ror #2
 8085038:	ea89 0900 	eor.w	r9, r9, r0
 808503c:	4491      	add	r9, r2
 808503e:	ea81 020e 	eor.w	r2, r1, lr
 8085042:	403a      	ands	r2, r7
 8085044:	eb09 69f7 	add.w	r9, r9, r7, ror #27
 8085048:	404a      	eors	r2, r1
    P( C, D, E, A, B, W[3]  );
 808504a:	ea4f 07b7 	mov.w	r7, r7, ror #2
 808504e:	4445      	add	r5, r8
 8085050:	18c8      	adds	r0, r1, r3
 8085052:	4415      	add	r5, r2
 8085054:	990e      	ldr	r1, [sp, #56]	; 0x38
 8085056:	ea8e 0207 	eor.w	r2, lr, r7
 808505a:	ea02 0209 	and.w	r2, r2, r9
 808505e:	eb05 65f9 	add.w	r5, r5, r9, ror #27
 8085062:	ea82 020e 	eor.w	r2, r2, lr
    P( B, C, D, E, A, W[4]  );
 8085066:	ea4f 09b9 	mov.w	r9, r9, ror #2
 808506a:	4408      	add	r0, r1
 808506c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 808506e:	4410      	add	r0, r2
 8085070:	ea87 0209 	eor.w	r2, r7, r9
 8085074:	18ce      	adds	r6, r1, r3
 8085076:	402a      	ands	r2, r5
 8085078:	407a      	eors	r2, r7
 808507a:	4476      	add	r6, lr
 808507c:	eb00 60f5 	add.w	r0, r0, r5, ror #27
 8085080:	4416      	add	r6, r2
    P( A, B, C, D, E, W[5]  );
 8085082:	ea4f 05b5 	mov.w	r5, r5, ror #2
 8085086:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8085088:	ea89 0105 	eor.w	r1, r9, r5
 808508c:	4001      	ands	r1, r0
 808508e:	441a      	add	r2, r3
 8085090:	eb06 66f0 	add.w	r6, r6, r0, ror #27
 8085094:	ea81 0109 	eor.w	r1, r1, r9
    P( E, A, B, C, D, W[6]  );
 8085098:	ea4f 00b0 	mov.w	r0, r0, ror #2
 808509c:	443a      	add	r2, r7
 808509e:	440a      	add	r2, r1
 80850a0:	ea85 0100 	eor.w	r1, r5, r0
 80850a4:	4031      	ands	r1, r6
 80850a6:	eb02 62f6 	add.w	r2, r2, r6, ror #27
 80850aa:	4069      	eors	r1, r5
    P( D, E, A, B, C, W[7]  );
 80850ac:	ea4f 06b6 	mov.w	r6, r6, ror #2
 80850b0:	44cb      	add	fp, r9
 80850b2:	448b      	add	fp, r1
 80850b4:	ea80 0106 	eor.w	r1, r0, r6
 80850b8:	4011      	ands	r1, r2
 80850ba:	441c      	add	r4, r3
 80850bc:	4041      	eors	r1, r0
 80850be:	442c      	add	r4, r5
 80850c0:	eb0b 6bf2 	add.w	fp, fp, r2, ror #27
 80850c4:	440c      	add	r4, r1
    P( C, D, E, A, B, W[8]  );
 80850c6:	ea4f 02b2 	mov.w	r2, r2, ror #2
 80850ca:	990a      	ldr	r1, [sp, #40]	; 0x28
 80850cc:	ea86 0502 	eor.w	r5, r6, r2
 80850d0:	ea05 050b 	and.w	r5, r5, fp
 80850d4:	4419      	add	r1, r3
 80850d6:	4075      	eors	r5, r6
 80850d8:	4401      	add	r1, r0
 80850da:	eb04 64fb 	add.w	r4, r4, fp, ror #27
 80850de:	4429      	add	r1, r5
    P( B, C, D, E, A, W[9]  );
 80850e0:	ea4f 0bbb 	mov.w	fp, fp, ror #2
 80850e4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80850e6:	ea82 000b 	eor.w	r0, r2, fp
 80850ea:	eb05 0a03 	add.w	sl, r5, r3
 80850ee:	4020      	ands	r0, r4
 80850f0:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 80850f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    P( A, B, C, D, E, W[10] );
 80850f6:	ea4f 04b4 	mov.w	r4, r4, ror #2
 80850fa:	4050      	eors	r0, r2
 80850fc:	44b2      	add	sl, r6
 80850fe:	4482      	add	sl, r0
 8085100:	ea8b 0004 	eor.w	r0, fp, r4
 8085104:	eb05 0903 	add.w	r9, r5, r3
 8085108:	4008      	ands	r0, r1
 808510a:	ea80 000b 	eor.w	r0, r0, fp
 808510e:	4491      	add	r9, r2
 8085110:	eb0a 6af1 	add.w	sl, sl, r1, ror #27
 8085114:	4481      	add	r9, r0
    P( E, A, B, C, D, W[11] );
 8085116:	ea4f 01b1 	mov.w	r1, r1, ror #2
 808511a:	980d      	ldr	r0, [sp, #52]	; 0x34
 808511c:	ea84 0201 	eor.w	r2, r4, r1
 8085120:	eb00 0e03 	add.w	lr, r0, r3
 8085124:	ea02 020a 	and.w	r2, r2, sl
 8085128:	eb09 69fa 	add.w	r9, r9, sl, ror #27
 808512c:	9802      	ldr	r0, [sp, #8]
    P( D, E, A, B, C, W[12] );
 808512e:	ea4f 0aba 	mov.w	sl, sl, ror #2
 8085132:	4062      	eors	r2, r4
 8085134:	44de      	add	lr, fp
 8085136:	4496      	add	lr, r2
 8085138:	ea81 020a 	eor.w	r2, r1, sl
 808513c:	18c5      	adds	r5, r0, r3
 808513e:	ea02 0209 	and.w	r2, r2, r9
 8085142:	eb0e 6ef9 	add.w	lr, lr, r9, ror #27
 8085146:	404a      	eors	r2, r1
    P( C, D, E, A, B, W[13] );
 8085148:	ea4f 09b9 	mov.w	r9, r9, ror #2
 808514c:	9803      	ldr	r0, [sp, #12]
 808514e:	4425      	add	r5, r4
 8085150:	4415      	add	r5, r2
 8085152:	ea8a 0209 	eor.w	r2, sl, r9
 8085156:	ea02 020e 	and.w	r2, r2, lr
 808515a:	4418      	add	r0, r3
 808515c:	eb05 65fe 	add.w	r5, r5, lr, ror #27
 8085160:	ea82 020a 	eor.w	r2, r2, sl
    P( B, C, D, E, A, W[14] );
 8085164:	ea4f 0ebe 	mov.w	lr, lr, ror #2
 8085168:	4408      	add	r0, r1
 808516a:	9904      	ldr	r1, [sp, #16]
 808516c:	4410      	add	r0, r2
 808516e:	ea89 020e 	eor.w	r2, r9, lr
 8085172:	18cf      	adds	r7, r1, r3
 8085174:	402a      	ands	r2, r5
 8085176:	ea82 0209 	eor.w	r2, r2, r9
 808517a:	4457      	add	r7, sl
 808517c:	4417      	add	r7, r2
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 808517e:	9a06      	ldr	r2, [sp, #24]
 8085180:	9909      	ldr	r1, [sp, #36]	; 0x24
 8085182:	ea82 020c 	eor.w	r2, r2, ip
 8085186:	404a      	eors	r2, r1
 8085188:	9902      	ldr	r1, [sp, #8]
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
 808518a:	eb00 60f5 	add.w	r0, r0, r5, ror #27
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 808518e:	404a      	eors	r2, r1
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
 8085190:	ea4f 05b5 	mov.w	r5, r5, ror #2
 8085194:	ea8e 0105 	eor.w	r1, lr, r5
    P( E, A, B, C, D, R(16) );
 8085198:	ea4f 72f2 	mov.w	r2, r2, ror #31
 808519c:	9206      	str	r2, [sp, #24]
 808519e:	4001      	ands	r1, r0
 80851a0:	441a      	add	r2, r3
 80851a2:	ea81 010e 	eor.w	r1, r1, lr
 80851a6:	444a      	add	r2, r9
 80851a8:	440a      	add	r2, r1
    P( D, E, A, B, C, R(17) );
 80851aa:	9907      	ldr	r1, [sp, #28]
 80851ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80851ae:	ea81 0108 	eor.w	r1, r1, r8
 80851b2:	4061      	eors	r1, r4
 80851b4:	9c03      	ldr	r4, [sp, #12]
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
 80851b6:	eb07 67f0 	add.w	r7, r7, r0, ror #27
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
 80851ba:	4061      	eors	r1, r4
 80851bc:	ea4f 71f1 	mov.w	r1, r1, ror #31
 80851c0:	9107      	str	r1, [sp, #28]
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 80851c2:	ea4f 00b0 	mov.w	r0, r0, ror #2
 80851c6:	9c07      	ldr	r4, [sp, #28]
 80851c8:	ea85 0100 	eor.w	r1, r5, r0
 80851cc:	18e6      	adds	r6, r4, r3
 80851ce:	4039      	ands	r1, r7
 80851d0:	4069      	eors	r1, r5
 80851d2:	4476      	add	r6, lr
 80851d4:	440e      	add	r6, r1
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
 80851d6:	990e      	ldr	r1, [sp, #56]	; 0x38
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 80851d8:	eb02 62f7 	add.w	r2, r2, r7, ror #27
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
 80851dc:	ea8c 0c01 	eor.w	ip, ip, r1
 80851e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
 80851e2:	ea4f 07b7 	mov.w	r7, r7, ror #2
    P( C, D, E, A, B, R(18) );
 80851e6:	ea8c 0c01 	eor.w	ip, ip, r1
 80851ea:	9904      	ldr	r1, [sp, #16]
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
 80851ec:	eb06 66f2 	add.w	r6, r6, r2, ror #27
    P( C, D, E, A, B, R(18) );
 80851f0:	ea8c 0c01 	eor.w	ip, ip, r1
 80851f4:	ea4f 71fc 	mov.w	r1, ip, ror #31
 80851f8:	9108      	str	r1, [sp, #32]
 80851fa:	9c08      	ldr	r4, [sp, #32]
 80851fc:	ea80 0107 	eor.w	r1, r0, r7
 8085200:	4011      	ands	r1, r2
 8085202:	441c      	add	r4, r3
 8085204:	4041      	eors	r1, r0
 8085206:	442c      	add	r4, r5
 8085208:	440c      	add	r4, r1
    P( B, C, D, E, A, R(19) );
 808520a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
 808520c:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( B, C, D, E, A, R(19) );
 8085210:	ea88 0801 	eor.w	r8, r8, r1
 8085214:	990c      	ldr	r1, [sp, #48]	; 0x30
 8085216:	ea87 0502 	eor.w	r5, r7, r2
 808521a:	ea88 0801 	eor.w	r8, r8, r1
 808521e:	9906      	ldr	r1, [sp, #24]
 8085220:	4035      	ands	r5, r6
 8085222:	ea88 0801 	eor.w	r8, r8, r1
 8085226:	ea4f 78f8 	mov.w	r8, r8, ror #31
 808522a:	4443      	add	r3, r8
 808522c:	407d      	eors	r5, r7
 808522e:	4403      	add	r3, r0
 8085230:	18e9      	adds	r1, r5, r3
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 8085232:	9810      	ldr	r0, [sp, #64]	; 0x40
 8085234:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8085236:	4d4b      	ldr	r5, [pc, #300]	; (8085364 <mbedtls_internal_sha1_process+0x56c>)
 8085238:	ea83 0c00 	eor.w	ip, r3, r0
 808523c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
 808523e:	eb04 64f6 	add.w	r4, r4, r6, ror #27
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 8085242:	ea8c 0c03 	eor.w	ip, ip, r3
 8085246:	9b07      	ldr	r3, [sp, #28]
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
    P( B, C, D, E, A, R(19) );
 8085248:	ea4f 06b6 	mov.w	r6, r6, ror #2
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 808524c:	ea8c 0c03 	eor.w	ip, ip, r3
 8085250:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 8085254:	ea82 0306 	eor.w	r3, r2, r6
 8085258:	eb0c 0b05 	add.w	fp, ip, r5
 808525c:	4063      	eors	r3, r4
 808525e:	44bb      	add	fp, r7
    P( E, A, B, C, D, R(21) );
 8085260:	9811      	ldr	r0, [sp, #68]	; 0x44
 8085262:	449b      	add	fp, r3
 8085264:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
    P( B, C, D, E, A, R(19) );
 8085266:	eb01 61f4 	add.w	r1, r1, r4, ror #27

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
 808526a:	ea83 0e00 	eor.w	lr, r3, r0
 808526e:	9b02      	ldr	r3, [sp, #8]
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 8085270:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( E, A, B, C, D, R(21) );
 8085274:	ea8e 0e03 	eor.w	lr, lr, r3
 8085278:	9b08      	ldr	r3, [sp, #32]
 808527a:	ea86 0004 	eor.w	r0, r6, r4
 808527e:	ea8e 0e03 	eor.w	lr, lr, r3
 8085282:	ea4f 7efe 	mov.w	lr, lr, ror #31
 8085286:	eb0e 0305 	add.w	r3, lr, r5
 808528a:	4048      	eors	r0, r1
 808528c:	4413      	add	r3, r2
 808528e:	4403      	add	r3, r0
    P( D, E, A, B, C, R(22) );
 8085290:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8085292:	9809      	ldr	r0, [sp, #36]	; 0x24
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 8085294:	eb0b 6bf1 	add.w	fp, fp, r1, ror #27
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
 8085298:	ea82 0700 	eor.w	r7, r2, r0
 808529c:	9a03      	ldr	r2, [sp, #12]

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
 808529e:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( D, E, A, B, C, R(22) );
 80852a2:	4057      	eors	r7, r2
 80852a4:	ea87 0708 	eor.w	r7, r7, r8
 80852a8:	ea4f 77f7 	mov.w	r7, r7, ror #31
 80852ac:	ea84 0201 	eor.w	r2, r4, r1
 80852b0:	eb07 0a05 	add.w	sl, r7, r5
 80852b4:	ea82 020b 	eor.w	r2, r2, fp
 80852b8:	44b2      	add	sl, r6
    P( C, D, E, A, B, R(23) );
 80852ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 80852bc:	4492      	add	sl, r2
 80852be:	9a11      	ldr	r2, [sp, #68]	; 0x44

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
 80852c0:	eb03 63fb 	add.w	r3, r3, fp, ror #27
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
 80852c4:	ea82 0600 	eor.w	r6, r2, r0
 80852c8:	9a04      	ldr	r2, [sp, #16]
#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
 80852ca:	ea4f 0bbb 	mov.w	fp, fp, ror #2
    P( C, D, E, A, B, R(23) );
 80852ce:	4056      	eors	r6, r2
 80852d0:	ea86 060c 	eor.w	r6, r6, ip
 80852d4:	ea4f 76f6 	mov.w	r6, r6, ror #31
 80852d8:	ea81 020b 	eor.w	r2, r1, fp
 80852dc:	eb06 0905 	add.w	r9, r6, r5
 80852e0:	405a      	eors	r2, r3
 80852e2:	44a1      	add	r9, r4
    P( B, C, D, E, A, R(24) );
 80852e4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80852e6:	4491      	add	r9, r2
 80852e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
 80852ea:	eb0a 6af3 	add.w	sl, sl, r3, ror #27
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
 80852ee:	ea82 0400 	eor.w	r4, r2, r0
 80852f2:	9a06      	ldr	r2, [sp, #24]
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
 80852f4:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( B, C, D, E, A, R(24) );
 80852f8:	4054      	eors	r4, r2
 80852fa:	ea84 040e 	eor.w	r4, r4, lr
 80852fe:	ea4f 72f4 	mov.w	r2, r4, ror #31
 8085302:	9209      	str	r2, [sp, #36]	; 0x24
 8085304:	9809      	ldr	r0, [sp, #36]	; 0x24
 8085306:	ea8b 0203 	eor.w	r2, fp, r3
 808530a:	4428      	add	r0, r5
 808530c:	ea82 020a 	eor.w	r2, r2, sl
 8085310:	4408      	add	r0, r1
 8085312:	4410      	add	r0, r2
    P( A, B, C, D, E, R(25) );
 8085314:	990c      	ldr	r1, [sp, #48]	; 0x30
 8085316:	9a0a      	ldr	r2, [sp, #40]	; 0x28
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
 8085318:	eb09 69fa 	add.w	r9, r9, sl, ror #27
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
 808531c:	404a      	eors	r2, r1
 808531e:	9907      	ldr	r1, [sp, #28]

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
 8085320:	ea4f 0aba 	mov.w	sl, sl, ror #2
    P( A, B, C, D, E, R(25) );
 8085324:	404a      	eors	r2, r1
 8085326:	407a      	eors	r2, r7
 8085328:	ea4f 72f2 	mov.w	r2, r2, ror #31
 808532c:	920a      	str	r2, [sp, #40]	; 0x28
 808532e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8085330:	ea83 020a 	eor.w	r2, r3, sl
 8085334:	4429      	add	r1, r5
 8085336:	ea82 0209 	eor.w	r2, r2, r9
 808533a:	4459      	add	r1, fp
 808533c:	4411      	add	r1, r2
    P( E, A, B, C, D, R(26) );
 808533e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
 8085340:	eb00 60f9 	add.w	r0, r0, r9, ror #27
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
 8085344:	4614      	mov	r4, r2
 8085346:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
 8085348:	ea4f 09b9 	mov.w	r9, r9, ror #2
    P( E, A, B, C, D, R(26) );
 808534c:	4062      	eors	r2, r4
 808534e:	9c08      	ldr	r4, [sp, #32]
 8085350:	ea8a 0b09 	eor.w	fp, sl, r9
 8085354:	4062      	eors	r2, r4
 8085356:	4072      	eors	r2, r6
 8085358:	ea4f 72f2 	mov.w	r2, r2, ror #31
 808535c:	e004      	b.n	8085368 <mbedtls_internal_sha1_process+0x570>
 808535e:	bf00      	nop
 8085360:	5a827999 	.word	0x5a827999
 8085364:	6ed9eba1 	.word	0x6ed9eba1
 8085368:	920b      	str	r2, [sp, #44]	; 0x2c
 808536a:	442a      	add	r2, r5
    P( D, E, A, B, C, R(27) );
 808536c:	9c02      	ldr	r4, [sp, #8]
    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
 808536e:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 8085372:	ea8b 0b00 	eor.w	fp, fp, r0
 8085376:	441a      	add	r2, r3
    P( E, A, B, C, D, R(26) );
 8085378:	ea4f 03b0 	mov.w	r3, r0, ror #2
    P( D, E, A, B, C, R(27) );
 808537c:	980c      	ldr	r0, [sp, #48]	; 0x30
 808537e:	445a      	add	r2, fp
 8085380:	4060      	eors	r0, r4
 8085382:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8085384:	ea80 0008 	eor.w	r0, r0, r8
 8085388:	4060      	eors	r0, r4
 808538a:	ea4f 70f0 	mov.w	r0, r0, ror #31
 808538e:	900c      	str	r0, [sp, #48]	; 0x30
 8085390:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8085392:	ea89 0003 	eor.w	r0, r9, r3
 8085396:	eb04 0b05 	add.w	fp, r4, r5
 808539a:	4048      	eors	r0, r1
 808539c:	44da      	add	sl, fp
    P( C, D, E, A, B, R(28) );
 808539e:	9c03      	ldr	r4, [sp, #12]
 80853a0:	4482      	add	sl, r0
 80853a2:	980d      	ldr	r0, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
 80853a4:	eb02 62f1 	add.w	r2, r2, r1, ror #27
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
 80853a8:	4060      	eors	r0, r4
 80853aa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80853ac:	ea80 000c 	eor.w	r0, r0, ip
 80853b0:	4060      	eors	r0, r4
 80853b2:	ea4f 70f0 	mov.w	r0, r0, ror #31
    P( B, C, D, E, A, R(29) );
 80853b6:	9c02      	ldr	r4, [sp, #8]
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
 80853b8:	900d      	str	r0, [sp, #52]	; 0x34
 80853ba:	4428      	add	r0, r5
 80853bc:	4448      	add	r0, r9
    P( B, C, D, E, A, R(29) );
 80853be:	46a1      	mov	r9, r4
 80853c0:	9c04      	ldr	r4, [sp, #16]
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
 80853c2:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
 80853c6:	ea89 0904 	eor.w	r9, r9, r4
 80853ca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80853cc:	ea89 090e 	eor.w	r9, r9, lr
 80853d0:	ea89 0904 	eor.w	r9, r9, r4
 80853d4:	ea4f 74f9 	mov.w	r4, r9, ror #31
 80853d8:	eb04 0905 	add.w	r9, r4, r5
 80853dc:	9402      	str	r4, [sp, #8]
 80853de:	ea83 0b01 	eor.w	fp, r3, r1
    P( A, B, C, D, E, R(30) );
 80853e2:	9c06      	ldr	r4, [sp, #24]
 80853e4:	4499      	add	r9, r3
 80853e6:	9b03      	ldr	r3, [sp, #12]
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
 80853e8:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
 80853ec:	4063      	eors	r3, r4
 80853ee:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80853f0:	407b      	eors	r3, r7
 80853f2:	4063      	eors	r3, r4
 80853f4:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80853f8:	9303      	str	r3, [sp, #12]
 80853fa:	ea8b 0b02 	eor.w	fp, fp, r2
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
 80853fe:	ea4f 02b2 	mov.w	r2, r2, ror #2
 8085402:	9c03      	ldr	r4, [sp, #12]
 8085404:	4458      	add	r0, fp
 8085406:	ea81 0b02 	eor.w	fp, r1, r2
 808540a:	eb00 60fa 	add.w	r0, r0, sl, ror #27
 808540e:	ea8b 0b0a 	eor.w	fp, fp, sl
    P( B, C, D, E, A, R(29) );
 8085412:	ea4f 0aba 	mov.w	sl, sl, ror #2
 8085416:	ea82 030a 	eor.w	r3, r2, sl
 808541a:	44d9      	add	r9, fp
 808541c:	eb04 0b05 	add.w	fp, r4, r5
 8085420:	4043      	eors	r3, r0
 8085422:	4459      	add	r1, fp
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
 8085424:	9c07      	ldr	r4, [sp, #28]
 8085426:	4419      	add	r1, r3
 8085428:	9b04      	ldr	r3, [sp, #16]
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
 808542a:	eb09 69f0 	add.w	r9, r9, r0, ror #27
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
 808542e:	4063      	eors	r3, r4
 8085430:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8085432:	4073      	eors	r3, r6
 8085434:	4063      	eors	r3, r4
 8085436:	ea4f 73f3 	mov.w	r3, r3, ror #31
 808543a:	9304      	str	r3, [sp, #16]
 808543c:	442b      	add	r3, r5
    P( D, E, A, B, C, R(32) );
 808543e:	9c08      	ldr	r4, [sp, #32]
 8085440:	4413      	add	r3, r2
 8085442:	9a06      	ldr	r2, [sp, #24]
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
 8085444:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
 8085448:	4062      	eors	r2, r4
 808544a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 808544c:	ea8a 0b00 	eor.w	fp, sl, r0
 8085450:	4062      	eors	r2, r4
 8085452:	9c02      	ldr	r4, [sp, #8]
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
 8085454:	eb01 61f9 	add.w	r1, r1, r9, ror #27
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
 8085458:	4062      	eors	r2, r4
 808545a:	ea4f 72f2 	mov.w	r2, r2, ror #31
 808545e:	9206      	str	r2, [sp, #24]
 8085460:	9c06      	ldr	r4, [sp, #24]
 8085462:	ea8b 0b09 	eor.w	fp, fp, r9
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
 8085466:	ea4f 09b9 	mov.w	r9, r9, ror #2
 808546a:	ea80 0209 	eor.w	r2, r0, r9
 808546e:	445b      	add	r3, fp
 8085470:	eb04 0b05 	add.w	fp, r4, r5
 8085474:	404a      	eors	r2, r1
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 8085476:	9c07      	ldr	r4, [sp, #28]
 8085478:	44da      	add	sl, fp
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
 808547a:	eb03 63f1 	add.w	r3, r3, r1, ror #27
 808547e:	4492      	add	sl, r2
    P( D, E, A, B, C, R(32) );
 8085480:	eb0a 62f3 	add.w	r2, sl, r3, ror #27
    P( C, D, E, A, B, R(33) );
 8085484:	ea84 0a08 	eor.w	sl, r4, r8
 8085488:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
 808548a:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(33) );
 808548e:	ea8a 0a04 	eor.w	sl, sl, r4
 8085492:	9c03      	ldr	r4, [sp, #12]
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
 8085494:	ea88 080e 	eor.w	r8, r8, lr
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 8085498:	ea8a 0a04 	eor.w	sl, sl, r4
 808549c:	ea4f 74fa 	mov.w	r4, sl, ror #31
 80854a0:	eb04 0b05 	add.w	fp, r4, r5
 80854a4:	ea89 0a01 	eor.w	sl, r9, r1
 80854a8:	4458      	add	r0, fp
 80854aa:	ea8a 0a03 	eor.w	sl, sl, r3
 80854ae:	4482      	add	sl, r0
    P( B, C, D, E, A, R(34) );
 80854b0:	9808      	ldr	r0, [sp, #32]
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 80854b2:	9407      	str	r4, [sp, #28]
    P( B, C, D, E, A, R(34) );
 80854b4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80854b6:	ea80 000c 	eor.w	r0, r0, ip
 80854ba:	4060      	eors	r0, r4
 80854bc:	9c04      	ldr	r4, [sp, #16]
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 80854be:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( B, C, D, E, A, R(34) );
 80854c2:	4060      	eors	r0, r4
 80854c4:	ea4f 70f0 	mov.w	r0, r0, ror #31
 80854c8:	9008      	str	r0, [sp, #32]
 80854ca:	9c08      	ldr	r4, [sp, #32]
 80854cc:	ea81 0003 	eor.w	r0, r1, r3
 80854d0:	eb04 0b05 	add.w	fp, r4, r5
    P( A, B, C, D, E, R(35) );
 80854d4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80854d6:	4050      	eors	r0, r2
 80854d8:	ea88 0804 	eor.w	r8, r8, r4
 80854dc:	9c06      	ldr	r4, [sp, #24]
 80854de:	44d9      	add	r9, fp
 80854e0:	ea88 0804 	eor.w	r8, r8, r4
 80854e4:	ea4f 7bf8 	mov.w	fp, r8, ror #31
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 80854e8:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
 80854ec:	4481      	add	r9, r0
    P( B, C, D, E, A, R(34) );
 80854ee:	ea4f 02b2 	mov.w	r2, r2, ror #2
 80854f2:	eb09 60fa 	add.w	r0, r9, sl, ror #27
 80854f6:	ea83 0802 	eor.w	r8, r3, r2
 80854fa:	eb0b 0905 	add.w	r9, fp, r5
 80854fe:	ea88 080a 	eor.w	r8, r8, sl
 8085502:	4449      	add	r1, r9
 8085504:	4441      	add	r1, r8
    P( A, B, C, D, E, R(35) );
 8085506:	eb01 68f0 	add.w	r8, r1, r0, ror #27
    P( E, A, B, C, D, R(36) );
 808550a:	990d      	ldr	r1, [sp, #52]	; 0x34
 808550c:	ea8c 0c07 	eor.w	ip, ip, r7
 8085510:	ea8c 0c01 	eor.w	ip, ip, r1
 8085514:	9907      	ldr	r1, [sp, #28]
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
 8085516:	ea4f 0aba 	mov.w	sl, sl, ror #2
    P( E, A, B, C, D, R(36) );
 808551a:	ea8c 0c01 	eor.w	ip, ip, r1
 808551e:	ea4f 71fc 	mov.w	r1, ip, ror #31
 8085522:	910e      	str	r1, [sp, #56]	; 0x38
 8085524:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8085526:	ea82 010a 	eor.w	r1, r2, sl
 808552a:	eb04 0c05 	add.w	ip, r4, r5
 808552e:	4041      	eors	r1, r0
 8085530:	4463      	add	r3, ip
 8085532:	440b      	add	r3, r1
 8085534:	eb03 61f8 	add.w	r1, r3, r8, ror #27
    P( D, E, A, B, C, R(37) );
 8085538:	9b02      	ldr	r3, [sp, #8]
 808553a:	ea8e 0e06 	eor.w	lr, lr, r6
 808553e:	ea8e 0e03 	eor.w	lr, lr, r3
 8085542:	9b08      	ldr	r3, [sp, #32]
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
 8085544:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(37) );
 8085548:	ea8e 0e03 	eor.w	lr, lr, r3
 808554c:	ea4f 73fe 	mov.w	r3, lr, ror #31
 8085550:	930f      	str	r3, [sp, #60]	; 0x3c
 8085552:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8085554:	ea8a 0300 	eor.w	r3, sl, r0
 8085558:	eb04 0e05 	add.w	lr, r4, r5
 808555c:	ea83 0308 	eor.w	r3, r3, r8
 8085560:	4472      	add	r2, lr
 8085562:	441a      	add	r2, r3
 8085564:	eb02 63f1 	add.w	r3, r2, r1, ror #27
    P( C, D, E, A, B, R(38) );
 8085568:	9a09      	ldr	r2, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
 808556a:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( C, D, E, A, B, R(38) );
 808556e:	4057      	eors	r7, r2
 8085570:	9a03      	ldr	r2, [sp, #12]
 8085572:	4057      	eors	r7, r2
 8085574:	ea87 070b 	eor.w	r7, r7, fp
 8085578:	ea4f 72f7 	mov.w	r2, r7, ror #31
 808557c:	9210      	str	r2, [sp, #64]	; 0x40
 808557e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8085580:	ea80 0208 	eor.w	r2, r0, r8
 8085584:	1967      	adds	r7, r4, r5
    P( B, C, D, E, A, R(39) );
 8085586:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8085588:	404a      	eors	r2, r1
 808558a:	4066      	eors	r6, r4
 808558c:	9c04      	ldr	r4, [sp, #16]
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
 808558e:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( B, C, D, E, A, R(39) );
 8085592:	4066      	eors	r6, r4
 8085594:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8085596:	44ba      	add	sl, r7
 8085598:	4066      	eors	r6, r4
 808559a:	ea4f 74f6 	mov.w	r4, r6, ror #31
 808559e:	4425      	add	r5, r4
 80855a0:	9411      	str	r4, [sp, #68]	; 0x44
 80855a2:	4428      	add	r0, r5
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 80855a4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80855a6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80855a8:	ea88 0601 	eor.w	r6, r8, r1
 80855ac:	4065      	eors	r5, r4
 80855ae:	462c      	mov	r4, r5
 80855b0:	9d06      	ldr	r5, [sp, #24]
 80855b2:	405e      	eors	r6, r3
 80855b4:	406c      	eors	r4, r5
 80855b6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80855b8:	4492      	add	sl, r2
 80855ba:	4430      	add	r0, r6
 80855bc:	406c      	eors	r4, r5
 80855be:	4ed6      	ldr	r6, [pc, #856]	; (8085918 <mbedtls_internal_sha1_process+0xb20>)
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
 80855c0:	eb0a 62f3 	add.w	r2, sl, r3, ror #27
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 80855c4:	ea4f 74f4 	mov.w	r4, r4, ror #31
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
    P( B, C, D, E, A, R(39) );
 80855c8:	ea4f 03b3 	mov.w	r3, r3, ror #2
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 80855cc:	9409      	str	r4, [sp, #36]	; 0x24
 80855ce:	ea42 0503 	orr.w	r5, r2, r3
 80855d2:	4434      	add	r4, r6
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
    P( B, C, D, E, A, R(39) );
 80855d4:	eb00 60f2 	add.w	r0, r0, r2, ror #27
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 80855d8:	400d      	ands	r5, r1
 80855da:	44a0      	add	r8, r4
 80855dc:	ea02 0403 	and.w	r4, r2, r3
 80855e0:	432c      	orrs	r4, r5
 80855e2:	eb08 68f0 	add.w	r8, r8, r0, ror #27
 80855e6:	ea4f 0ab2 	mov.w	sl, r2, ror #2
 80855ea:	44a0      	add	r8, r4
    P( E, A, B, C, D, R(41) );
 80855ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80855ee:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80855f0:	ea4f 0cb0 	mov.w	ip, r0, ror #2
 80855f4:	4062      	eors	r2, r4
 80855f6:	9c07      	ldr	r4, [sp, #28]
 80855f8:	4062      	eors	r2, r4
 80855fa:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80855fc:	4062      	eors	r2, r4
 80855fe:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8085602:	920a      	str	r2, [sp, #40]	; 0x28
 8085604:	ea40 020a 	orr.w	r2, r0, sl
 8085608:	ea02 0403 	and.w	r4, r2, r3
 808560c:	ea00 020a 	and.w	r2, r0, sl
 8085610:	4322      	orrs	r2, r4
 8085612:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    P( D, E, A, B, C, R(42) );
 8085614:	980d      	ldr	r0, [sp, #52]	; 0x34
 8085616:	4434      	add	r4, r6
 8085618:	4421      	add	r1, r4
 808561a:	4411      	add	r1, r2
 808561c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
 808561e:	eb01 61f8 	add.w	r1, r1, r8, ror #27
    P( D, E, A, B, C, R(42) );
 8085622:	4042      	eors	r2, r0
 8085624:	9808      	ldr	r0, [sp, #32]
 8085626:	4042      	eors	r2, r0
 8085628:	9811      	ldr	r0, [sp, #68]	; 0x44
 808562a:	4042      	eors	r2, r0
 808562c:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8085630:	920b      	str	r2, [sp, #44]	; 0x2c
 8085632:	ea48 000c 	orr.w	r0, r8, ip
 8085636:	4432      	add	r2, r6
 8085638:	ea00 000a 	and.w	r0, r0, sl
 808563c:	4413      	add	r3, r2
 808563e:	ea08 020c 	and.w	r2, r8, ip
 8085642:	4302      	orrs	r2, r0
 8085644:	eb03 63f1 	add.w	r3, r3, r1, ror #27
 8085648:	4413      	add	r3, r2
    P( C, D, E, A, B, R(43) );
 808564a:	9802      	ldr	r0, [sp, #8]
 808564c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
 808564e:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( C, D, E, A, B, R(43) );
 8085652:	4050      	eors	r0, r2
 8085654:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8085656:	ea80 000b 	eor.w	r0, r0, fp
 808565a:	4050      	eors	r0, r2
 808565c:	ea4f 72f0 	mov.w	r2, r0, ror #31
 8085660:	ea41 0008 	orr.w	r0, r1, r8
 8085664:	920c      	str	r2, [sp, #48]	; 0x30
 8085666:	ea00 000c 	and.w	r0, r0, ip
 808566a:	ea01 0208 	and.w	r2, r1, r8
 808566e:	4310      	orrs	r0, r2
 8085670:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8085672:	ea4f 01b1 	mov.w	r1, r1, ror #2
 8085676:	4432      	add	r2, r6
 8085678:	4452      	add	r2, sl
 808567a:	4402      	add	r2, r0
 808567c:	eb02 6af3 	add.w	sl, r2, r3, ror #27
    P( B, C, D, E, A, R(44) );
 8085680:	9803      	ldr	r0, [sp, #12]
 8085682:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8085684:	ea43 0401 	orr.w	r4, r3, r1
 8085688:	4050      	eors	r0, r2
 808568a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 808568c:	ea04 0408 	and.w	r4, r4, r8
 8085690:	4050      	eors	r0, r2
 8085692:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8085694:	ea4f 07b3 	mov.w	r7, r3, ror #2
 8085698:	4050      	eors	r0, r2
 808569a:	ea4f 72f0 	mov.w	r2, r0, ror #31
 808569e:	1990      	adds	r0, r2, r6
 80856a0:	920d      	str	r2, [sp, #52]	; 0x34
 80856a2:	4460      	add	r0, ip
 80856a4:	ea03 0201 	and.w	r2, r3, r1
 80856a8:	4322      	orrs	r2, r4
 80856aa:	eb00 60fa 	add.w	r0, r0, sl, ror #27
 80856ae:	4410      	add	r0, r2
    P( A, B, C, D, E, R(45) );
 80856b0:	9b02      	ldr	r3, [sp, #8]
 80856b2:	9a04      	ldr	r2, [sp, #16]
 80856b4:	ea4f 09ba 	mov.w	r9, sl, ror #2
 80856b8:	4053      	eors	r3, r2
 80856ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80856bc:	4053      	eors	r3, r2
 80856be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80856c0:	4053      	eors	r3, r2
 80856c2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80856c6:	9302      	str	r3, [sp, #8]
 80856c8:	9a02      	ldr	r2, [sp, #8]
 80856ca:	ea4a 0307 	orr.w	r3, sl, r7
 80856ce:	ea03 0e01 	and.w	lr, r3, r1
 80856d2:	ea0a 0307 	and.w	r3, sl, r7
 80856d6:	ea4e 0303 	orr.w	r3, lr, r3
 80856da:	eb02 0e06 	add.w	lr, r2, r6
 80856de:	44f0      	add	r8, lr
 80856e0:	4498      	add	r8, r3
    P( E, A, B, C, D, R(46) );
 80856e2:	9a06      	ldr	r2, [sp, #24]
 80856e4:	9b03      	ldr	r3, [sp, #12]
    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
 80856e6:	eb08 6ef0 	add.w	lr, r8, r0, ror #27
    P( E, A, B, C, D, R(46) );
 80856ea:	ea83 0802 	eor.w	r8, r3, r2
 80856ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80856f0:	ea88 0803 	eor.w	r8, r8, r3
 80856f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80856f6:	ea88 0803 	eor.w	r8, r8, r3
 80856fa:	ea4f 73f8 	mov.w	r3, r8, ror #31
 80856fe:	199c      	adds	r4, r3, r6
 8085700:	4421      	add	r1, r4
 8085702:	ea40 0409 	orr.w	r4, r0, r9
 8085706:	9303      	str	r3, [sp, #12]
 8085708:	403c      	ands	r4, r7
 808570a:	ea00 0309 	and.w	r3, r0, r9
 808570e:	431c      	orrs	r4, r3
    P( D, E, A, B, C, R(47) );
 8085710:	9b04      	ldr	r3, [sp, #16]
 8085712:	9a07      	ldr	r2, [sp, #28]
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
 8085714:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(47) );
 8085718:	ea83 0c02 	eor.w	ip, r3, r2
 808571c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 808571e:	eb01 61fe 	add.w	r1, r1, lr, ror #27
 8085722:	ea8c 0c03 	eor.w	ip, ip, r3
 8085726:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
 8085728:	440c      	add	r4, r1
    P( D, E, A, B, C, R(47) );
 808572a:	ea8c 0c03 	eor.w	ip, ip, r3
 808572e:	ea4f 73fc 	mov.w	r3, ip, ror #31
 8085732:	ea4e 0100 	orr.w	r1, lr, r0
 8085736:	9304      	str	r3, [sp, #16]
 8085738:	ea01 0109 	and.w	r1, r1, r9
 808573c:	ea0e 0300 	and.w	r3, lr, r0
 8085740:	4319      	orrs	r1, r3
 8085742:	9b04      	ldr	r3, [sp, #16]
    P( C, D, E, A, B, R(48) );
 8085744:	9a08      	ldr	r2, [sp, #32]
 8085746:	4433      	add	r3, r6
 8085748:	443b      	add	r3, r7
 808574a:	18cf      	adds	r7, r1, r3
 808574c:	9b06      	ldr	r3, [sp, #24]
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
 808574e:	ea4f 01be 	mov.w	r1, lr, ror #2
    P( C, D, E, A, B, R(48) );
 8085752:	ea83 0802 	eor.w	r8, r3, r2
 8085756:	9b09      	ldr	r3, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
 8085758:	eb07 67f4 	add.w	r7, r7, r4, ror #27
    P( C, D, E, A, B, R(48) );
 808575c:	ea88 0803 	eor.w	r8, r8, r3
 8085760:	9b02      	ldr	r3, [sp, #8]
    P( B, C, D, E, A, R(49) );
 8085762:	ea4f 0ab7 	mov.w	sl, r7, ror #2
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
 8085766:	ea88 0803 	eor.w	r8, r8, r3
 808576a:	ea4f 73f8 	mov.w	r3, r8, ror #31
 808576e:	199a      	adds	r2, r3, r6
 8085770:	4491      	add	r9, r2
 8085772:	ea44 0201 	orr.w	r2, r4, r1
 8085776:	9306      	str	r3, [sp, #24]
 8085778:	4002      	ands	r2, r0
 808577a:	ea04 0301 	and.w	r3, r4, r1
 808577e:	431a      	orrs	r2, r3
    P( B, C, D, E, A, R(49) );
 8085780:	9b07      	ldr	r3, [sp, #28]
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
 8085782:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( B, C, D, E, A, R(49) );
 8085786:	ea83 0c0b 	eor.w	ip, r3, fp
 808578a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808578c:	eb09 69f7 	add.w	r9, r9, r7, ror #27
 8085790:	ea8c 0c03 	eor.w	ip, ip, r3
 8085794:	9b03      	ldr	r3, [sp, #12]
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
 8085796:	444a      	add	r2, r9
    P( B, C, D, E, A, R(49) );
 8085798:	ea8c 0c03 	eor.w	ip, ip, r3
 808579c:	ea4f 73fc 	mov.w	r3, ip, ror #31
 80857a0:	9307      	str	r3, [sp, #28]
 80857a2:	9d07      	ldr	r5, [sp, #28]
 80857a4:	ea47 0304 	orr.w	r3, r7, r4
 80857a8:	ea03 0c01 	and.w	ip, r3, r1
 80857ac:	ea07 0304 	and.w	r3, r7, r4
 80857b0:	ea4c 0303 	orr.w	r3, ip, r3
 80857b4:	eb05 0c06 	add.w	ip, r5, r6
 80857b8:	4460      	add	r0, ip
 80857ba:	4418      	add	r0, r3
 80857bc:	eb00 6cf2 	add.w	ip, r0, r2, ror #27
    P( A, B, C, D, E, R(50) );
 80857c0:	9b08      	ldr	r3, [sp, #32]
 80857c2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80857c4:	ea83 0500 	eor.w	r5, r3, r0
 80857c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80857ca:	ea42 000a 	orr.w	r0, r2, sl
 80857ce:	405d      	eors	r5, r3
 80857d0:	9b04      	ldr	r3, [sp, #16]
 80857d2:	4020      	ands	r0, r4
 80857d4:	405d      	eors	r5, r3
 80857d6:	ea4f 77f5 	mov.w	r7, r5, ror #31
 80857da:	19bb      	adds	r3, r7, r6
 80857dc:	4419      	add	r1, r3
 80857de:	eb01 63fc 	add.w	r3, r1, ip, ror #27
 80857e2:	ea02 010a 	and.w	r1, r2, sl
 80857e6:	4301      	orrs	r1, r0
 80857e8:	4419      	add	r1, r3
    P( E, A, B, C, D, R(51) );
 80857ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
 80857ec:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(51) );
 80857f0:	ea8b 0903 	eor.w	r9, fp, r3
 80857f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80857f6:	ea4f 00bc 	mov.w	r0, ip, ror #2
 80857fa:	ea89 0903 	eor.w	r9, r9, r3
 80857fe:	9b06      	ldr	r3, [sp, #24]
 8085800:	ea89 0903 	eor.w	r9, r9, r3
 8085804:	ea4c 0302 	orr.w	r3, ip, r2
 8085808:	ea4f 7ef9 	mov.w	lr, r9, ror #31
 808580c:	ea03 050a 	and.w	r5, r3, sl
 8085810:	ea0c 0302 	and.w	r3, ip, r2
 8085814:	432b      	orrs	r3, r5
 8085816:	eb0e 0506 	add.w	r5, lr, r6
 808581a:	4425      	add	r5, r4
 808581c:	441d      	add	r5, r3
    P( D, E, A, B, C, R(52) );
 808581e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8085820:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
 8085822:	eb05 65f1 	add.w	r5, r5, r1, ror #27
    P( D, E, A, B, C, R(52) );
 8085826:	4063      	eors	r3, r4
 8085828:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 808582a:	4063      	eors	r3, r4
 808582c:	9c07      	ldr	r4, [sp, #28]
 808582e:	4063      	eors	r3, r4
 8085830:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8085834:	9308      	str	r3, [sp, #32]
 8085836:	4433      	add	r3, r6
 8085838:	449a      	add	sl, r3
 808583a:	eb0a 63f5 	add.w	r3, sl, r5, ror #27
 808583e:	ea41 0a00 	orr.w	sl, r1, r0
 8085842:	ea01 0400 	and.w	r4, r1, r0
 8085846:	ea0a 0a02 	and.w	sl, sl, r2
 808584a:	ea4a 0a04 	orr.w	sl, sl, r4
 808584e:	449a      	add	sl, r3
    P( C, D, E, A, B, R(53) );
 8085850:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8085852:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
 8085854:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(53) );
 8085858:	4063      	eors	r3, r4
 808585a:	9c02      	ldr	r4, [sp, #8]
 808585c:	4063      	eors	r3, r4
 808585e:	407b      	eors	r3, r7
 8085860:	ea45 0401 	orr.w	r4, r5, r1
 8085864:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8085868:	930e      	str	r3, [sp, #56]	; 0x38
 808586a:	4004      	ands	r4, r0
 808586c:	ea05 0301 	and.w	r3, r5, r1
 8085870:	431c      	orrs	r4, r3
 8085872:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8085874:	ea4f 05b5 	mov.w	r5, r5, ror #2
 8085878:	4433      	add	r3, r6
 808587a:	4413      	add	r3, r2
 808587c:	4423      	add	r3, r4
    P( B, C, D, E, A, R(54) );
 808587e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8085880:	9c09      	ldr	r4, [sp, #36]	; 0x24
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
 8085882:	eb03 63fa 	add.w	r3, r3, sl, ror #27
    P( B, C, D, E, A, R(54) );
 8085886:	ea82 0804 	eor.w	r8, r2, r4
 808588a:	9a03      	ldr	r2, [sp, #12]
 808588c:	ea88 0802 	eor.w	r8, r8, r2
 8085890:	ea88 080e 	eor.w	r8, r8, lr
 8085894:	ea4f 72f8 	mov.w	r2, r8, ror #31
 8085898:	eb02 0806 	add.w	r8, r2, r6
 808589c:	4480      	add	r8, r0
 808589e:	eb08 60f3 	add.w	r0, r8, r3, ror #27
 80858a2:	ea4a 0805 	orr.w	r8, sl, r5
 80858a6:	920f      	str	r2, [sp, #60]	; 0x3c
 80858a8:	ea08 0801 	and.w	r8, r8, r1
 80858ac:	ea0a 0205 	and.w	r2, sl, r5
 80858b0:	ea48 0802 	orr.w	r8, r8, r2
 80858b4:	4480      	add	r8, r0
    P( A, B, C, D, E, R(55) );
 80858b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80858b8:	980a      	ldr	r0, [sp, #40]	; 0x28
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
 80858ba:	ea4f 0aba 	mov.w	sl, sl, ror #2
    P( A, B, C, D, E, R(55) );
 80858be:	ea82 0c00 	eor.w	ip, r2, r0
 80858c2:	9a04      	ldr	r2, [sp, #16]
 80858c4:	ea8c 0c02 	eor.w	ip, ip, r2
 80858c8:	9a08      	ldr	r2, [sp, #32]
 80858ca:	ea8c 0c02 	eor.w	ip, ip, r2
 80858ce:	ea4f 72fc 	mov.w	r2, ip, ror #31
 80858d2:	9210      	str	r2, [sp, #64]	; 0x40
 80858d4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80858d6:	ea43 020a 	orr.w	r2, r3, sl
 80858da:	ea02 0c05 	and.w	ip, r2, r5
 80858de:	ea03 020a 	and.w	r2, r3, sl
 80858e2:	ea4c 0202 	orr.w	r2, ip, r2
 80858e6:	eb00 0c06 	add.w	ip, r0, r6
 80858ea:	448c      	add	ip, r1
    P( E, A, B, C, D, R(56) );
 80858ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80858ee:	4494      	add	ip, r2
 80858f0:	9a06      	ldr	r2, [sp, #24]
 80858f2:	404c      	eors	r4, r1
 80858f4:	4054      	eors	r4, r2
 80858f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
 80858f8:	eb0c 6cf8 	add.w	ip, ip, r8, ror #27
    P( E, A, B, C, D, R(56) );
 80858fc:	4054      	eors	r4, r2
 80858fe:	ea4f 72f4 	mov.w	r2, r4, ror #31
 8085902:	9209      	str	r2, [sp, #36]	; 0x24
 8085904:	4432      	add	r2, r6
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
 8085906:	ea4f 03b3 	mov.w	r3, r3, ror #2
 808590a:	4415      	add	r5, r2
 808590c:	eb05 62fc 	add.w	r2, r5, ip, ror #27
    P( E, A, B, C, D, R(56) );
 8085910:	ea48 0503 	orr.w	r5, r8, r3
 8085914:	e002      	b.n	808591c <mbedtls_internal_sha1_process+0xb24>
 8085916:	bf00      	nop
 8085918:	8f1bbcdc 	.word	0x8f1bbcdc
 808591c:	ea08 0103 	and.w	r1, r8, r3
 8085920:	ea05 050a 	and.w	r5, r5, sl
 8085924:	430d      	orrs	r5, r1
 8085926:	4415      	add	r5, r2
    P( D, E, A, B, C, R(57) );
 8085928:	990c      	ldr	r1, [sp, #48]	; 0x30
 808592a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
 808592c:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( D, E, A, B, C, R(57) );
 8085930:	ea82 0b01 	eor.w	fp, r2, r1
 8085934:	9a07      	ldr	r2, [sp, #28]
    P( C, D, E, A, B, R(58) );
 8085936:	990d      	ldr	r1, [sp, #52]	; 0x34
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
 8085938:	ea8b 0b02 	eor.w	fp, fp, r2
 808593c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 808593e:	ea8b 0b02 	eor.w	fp, fp, r2
 8085942:	ea4c 0208 	orr.w	r2, ip, r8
 8085946:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 808594a:	ea02 0903 	and.w	r9, r2, r3
 808594e:	ea0c 0208 	and.w	r2, ip, r8
 8085952:	ea49 0202 	orr.w	r2, r9, r2
 8085956:	eb0b 0906 	add.w	r9, fp, r6
 808595a:	44d1      	add	r9, sl
 808595c:	4491      	add	r9, r2
    P( C, D, E, A, B, R(58) );
 808595e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
 8085960:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( C, D, E, A, B, R(58) );
 8085964:	ea82 0a01 	eor.w	sl, r2, r1
 8085968:	ea8a 0a07 	eor.w	sl, sl, r7
 808596c:	ea8a 0a00 	eor.w	sl, sl, r0
 8085970:	ea4f 72fa 	mov.w	r2, sl, ror #31
 8085974:	920a      	str	r2, [sp, #40]	; 0x28
 8085976:	4432      	add	r2, r6
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
 8085978:	eb09 69f5 	add.w	r9, r9, r5, ror #27
    P( C, D, E, A, B, R(58) );
 808597c:	ea45 010c 	orr.w	r1, r5, ip
 8085980:	441a      	add	r2, r3
 8085982:	eb02 63f9 	add.w	r3, r2, r9, ror #27
 8085986:	ea01 0108 	and.w	r1, r1, r8
 808598a:	ea05 020c 	and.w	r2, r5, ip
 808598e:	430a      	orrs	r2, r1
 8085990:	441a      	add	r2, r3
    P( B, C, D, E, A, R(59) );
 8085992:	9902      	ldr	r1, [sp, #8]
 8085994:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
 8085996:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( B, C, D, E, A, R(59) );
 808599a:	ea83 0001 	eor.w	r0, r3, r1
 808599e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80859a0:	ea80 000e 	eor.w	r0, r0, lr
 80859a4:	4058      	eors	r0, r3
 80859a6:	ea4f 73f0 	mov.w	r3, r0, ror #31
 80859aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80859ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80859ae:	ea49 0005 	orr.w	r0, r9, r5
 80859b2:	ea00 000c 	and.w	r0, r0, ip
 80859b6:	ea09 0305 	and.w	r3, r9, r5
 80859ba:	440e      	add	r6, r1
 80859bc:	4446      	add	r6, r8
 80859be:	4303      	orrs	r3, r0
 80859c0:	1998      	adds	r0, r3, r6
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 80859c2:	9903      	ldr	r1, [sp, #12]
 80859c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80859c6:	4ed8      	ldr	r6, [pc, #864]	; (8085d28 <mbedtls_internal_sha1_process+0xf30>)
 80859c8:	4059      	eors	r1, r3
 80859ca:	9b08      	ldr	r3, [sp, #32]
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
    P( B, C, D, E, A, R(59) );
 80859cc:	ea4f 09b9 	mov.w	r9, r9, ror #2
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 80859d0:	4059      	eors	r1, r3
 80859d2:	ea81 010b 	eor.w	r1, r1, fp
 80859d6:	ea4f 73f1 	mov.w	r3, r1, ror #31
 80859da:	930c      	str	r3, [sp, #48]	; 0x30
 80859dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80859de:	ea85 0309 	eor.w	r3, r5, r9
 80859e2:	4431      	add	r1, r6
 80859e4:	4053      	eors	r3, r2
 80859e6:	4461      	add	r1, ip
 80859e8:	4419      	add	r1, r3
    P( E, A, B, C, D, R(61) );
 80859ea:	9b02      	ldr	r3, [sp, #8]
 80859ec:	9c04      	ldr	r4, [sp, #16]
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
    P( B, C, D, E, A, R(59) );
 80859ee:	eb00 60f2 	add.w	r0, r0, r2, ror #27

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
 80859f2:	4063      	eors	r3, r4
 80859f4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 80859f6:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(61) );
 80859fa:	4063      	eors	r3, r4
 80859fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 80859fe:	eb01 61f0 	add.w	r1, r1, r0, ror #27
    P( E, A, B, C, D, R(61) );
 8085a02:	4063      	eors	r3, r4
 8085a04:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8085a08:	9302      	str	r3, [sp, #8]
 8085a0a:	ea89 0402 	eor.w	r4, r9, r2
 8085a0e:	4433      	add	r3, r6
 8085a10:	4044      	eors	r4, r0
 8085a12:	442b      	add	r3, r5
 8085a14:	4423      	add	r3, r4
    P( D, E, A, B, C, R(62) );
 8085a16:	9d06      	ldr	r5, [sp, #24]
 8085a18:	9c03      	ldr	r4, [sp, #12]

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
 8085a1a:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(62) );
 8085a1e:	ea84 0805 	eor.w	r8, r4, r5
 8085a22:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8085a24:	ea82 0500 	eor.w	r5, r2, r0
 8085a28:	ea88 0804 	eor.w	r8, r8, r4
 8085a2c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8085a2e:	404d      	eors	r5, r1
 8085a30:	ea88 0804 	eor.w	r8, r8, r4
 8085a34:	ea4f 74f8 	mov.w	r4, r8, ror #31
 8085a38:	9403      	str	r4, [sp, #12]
 8085a3a:	4434      	add	r4, r6
 8085a3c:	444c      	add	r4, r9
 8085a3e:	442c      	add	r4, r5
    P( C, D, E, A, B, R(63) );
 8085a40:	9d04      	ldr	r5, [sp, #16]

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
 8085a42:	eb03 63f1 	add.w	r3, r3, r1, ror #27
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
 8085a46:	46ac      	mov	ip, r5
 8085a48:	9d07      	ldr	r5, [sp, #28]
#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
 8085a4a:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(63) );
 8085a4e:	ea8c 0c05 	eor.w	ip, ip, r5
 8085a52:	9d10      	ldr	r5, [sp, #64]	; 0x40
#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
 8085a54:	eb04 64f3 	add.w	r4, r4, r3, ror #27
    P( C, D, E, A, B, R(63) );
 8085a58:	ea8c 0c05 	eor.w	ip, ip, r5
 8085a5c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8085a5e:	ea8c 0c05 	eor.w	ip, ip, r5
 8085a62:	ea4f 75fc 	mov.w	r5, ip, ror #31
 8085a66:	9504      	str	r5, [sp, #16]
 8085a68:	ea80 0501 	eor.w	r5, r0, r1
 8085a6c:	ea85 0c03 	eor.w	ip, r5, r3
 8085a70:	9d04      	ldr	r5, [sp, #16]
 8085a72:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8085a76:	eb05 0a06 	add.w	sl, r5, r6
 8085a7a:	4492      	add	sl, r2
    P( B, C, D, E, A, R(64) );
 8085a7c:	9a06      	ldr	r2, [sp, #24]
 8085a7e:	44e2      	add	sl, ip
 8085a80:	ea82 0807 	eor.w	r8, r2, r7
 8085a84:	9a09      	ldr	r2, [sp, #36]	; 0x24
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
 8085a86:	eb0a 6af4 	add.w	sl, sl, r4, ror #27
    P( B, C, D, E, A, R(64) );
 8085a8a:	ea88 0802 	eor.w	r8, r8, r2
 8085a8e:	9a02      	ldr	r2, [sp, #8]
 8085a90:	ea88 0802 	eor.w	r8, r8, r2
 8085a94:	ea4f 72f8 	mov.w	r2, r8, ror #31
 8085a98:	9206      	str	r2, [sp, #24]
 8085a9a:	9d06      	ldr	r5, [sp, #24]
 8085a9c:	ea81 0203 	eor.w	r2, r1, r3
 8085aa0:	eb05 0806 	add.w	r8, r5, r6
 8085aa4:	4062      	eors	r2, r4
 8085aa6:	4480      	add	r8, r0
 8085aa8:	4490      	add	r8, r2
    P( A, B, C, D, E, R(65) );
 8085aaa:	9a07      	ldr	r2, [sp, #28]

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
 8085aac:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( A, B, C, D, E, R(65) );
 8085ab0:	ea82 0c0e 	eor.w	ip, r2, lr
 8085ab4:	9a03      	ldr	r2, [sp, #12]
 8085ab6:	ea8c 0c0b 	eor.w	ip, ip, fp
 8085aba:	ea8c 0c02 	eor.w	ip, ip, r2
 8085abe:	ea4f 72fc 	mov.w	r2, ip, ror #31
 8085ac2:	9207      	str	r2, [sp, #28]
 8085ac4:	9807      	ldr	r0, [sp, #28]
 8085ac6:	ea83 0204 	eor.w	r2, r3, r4
 8085aca:	eb00 0c06 	add.w	ip, r0, r6
 8085ace:	ea82 020a 	eor.w	r2, r2, sl
 8085ad2:	448c      	add	ip, r1
 8085ad4:	4494      	add	ip, r2
    P( E, A, B, C, D, R(66) );
 8085ad6:	9a08      	ldr	r2, [sp, #32]

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
 8085ad8:	eb08 68fa 	add.w	r8, r8, sl, ror #27
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
 8085adc:	ea87 0502 	eor.w	r5, r7, r2
 8085ae0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
 8085ae2:	ea4f 0aba 	mov.w	sl, sl, ror #2
    P( E, A, B, C, D, R(66) );
 8085ae6:	4055      	eors	r5, r2
 8085ae8:	9a04      	ldr	r2, [sp, #16]
    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
 8085aea:	eb0c 6cf8 	add.w	ip, ip, r8, ror #27
    P( E, A, B, C, D, R(66) );
 8085aee:	4055      	eors	r5, r2
 8085af0:	ea4f 75f5 	mov.w	r5, r5, ror #31
 8085af4:	19af      	adds	r7, r5, r6
 8085af6:	441f      	add	r7, r3
    P( D, E, A, B, C, R(67) );
 8085af8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8085afa:	ea84 020a 	eor.w	r2, r4, sl
 8085afe:	ea8e 0903 	eor.w	r9, lr, r3
 8085b02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8085b04:	ea82 0208 	eor.w	r2, r2, r8
 8085b08:	ea89 0903 	eor.w	r9, r9, r3
 8085b0c:	9b06      	ldr	r3, [sp, #24]
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
 8085b0e:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( D, E, A, B, C, R(67) );
 8085b12:	ea89 0903 	eor.w	r9, r9, r3
 8085b16:	ea4f 79f9 	mov.w	r9, r9, ror #31
 8085b1a:	ea8a 0308 	eor.w	r3, sl, r8
 8085b1e:	eb09 0e06 	add.w	lr, r9, r6
 8085b22:	ea83 030c 	eor.w	r3, r3, ip
 8085b26:	44a6      	add	lr, r4
 8085b28:	4417      	add	r7, r2
 8085b2a:	449e      	add	lr, r3
    P( C, D, E, A, B, R(68) );
 8085b2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8085b2e:	9b08      	ldr	r3, [sp, #32]
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
 8085b30:	eb07 67fc 	add.w	r7, r7, ip, ror #27
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
 8085b34:	4053      	eors	r3, r2
 8085b36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
 8085b38:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( C, D, E, A, B, R(68) );
 8085b3c:	4053      	eors	r3, r2
 8085b3e:	4043      	eors	r3, r0
 8085b40:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8085b44:	9308      	str	r3, [sp, #32]
 8085b46:	9a08      	ldr	r2, [sp, #32]
 8085b48:	ea88 030c 	eor.w	r3, r8, ip
 8085b4c:	4432      	add	r2, r6
 8085b4e:	407b      	eors	r3, r7
 8085b50:	4452      	add	r2, sl
    P( B, C, D, E, A, R(69) );
 8085b52:	9910      	ldr	r1, [sp, #64]	; 0x40
 8085b54:	441a      	add	r2, r3
 8085b56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
 8085b58:	eb0e 6ef7 	add.w	lr, lr, r7, ror #27
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
 8085b5c:	404b      	eors	r3, r1
 8085b5e:	9902      	ldr	r1, [sp, #8]
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
 8085b60:	ea4f 07b7 	mov.w	r7, r7, ror #2
    P( B, C, D, E, A, R(69) );
 8085b64:	404b      	eors	r3, r1
 8085b66:	406b      	eors	r3, r5
 8085b68:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8085b6c:	930d      	str	r3, [sp, #52]	; 0x34
 8085b6e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8085b70:	ea8c 0307 	eor.w	r3, ip, r7
 8085b74:	1988      	adds	r0, r1, r6
 8085b76:	ea83 030e 	eor.w	r3, r3, lr
 8085b7a:	4440      	add	r0, r8
    P( A, B, C, D, E, R(70) );
 8085b7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8085b7e:	4418      	add	r0, r3
 8085b80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
 8085b82:	eb02 62fe 	add.w	r2, r2, lr, ror #27
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
 8085b86:	ea83 0801 	eor.w	r8, r3, r1
 8085b8a:	9b03      	ldr	r3, [sp, #12]
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
 8085b8c:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( A, B, C, D, E, R(70) );
 8085b90:	ea88 0803 	eor.w	r8, r8, r3
 8085b94:	ea88 0809 	eor.w	r8, r8, r9
 8085b98:	ea4f 78f8 	mov.w	r8, r8, ror #31
 8085b9c:	ea87 030e 	eor.w	r3, r7, lr
 8085ba0:	eb08 0106 	add.w	r1, r8, r6
 8085ba4:	4053      	eors	r3, r2
 8085ba6:	4461      	add	r1, ip
 8085ba8:	4419      	add	r1, r3
    P( E, A, B, C, D, R(71) );
 8085baa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
 8085bac:	eb00 60f2 	add.w	r0, r0, r2, ror #27
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
 8085bb0:	ea83 0c0b 	eor.w	ip, r3, fp
 8085bb4:	9b04      	ldr	r3, [sp, #16]
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
 8085bb6:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(71) );
 8085bba:	ea8c 0c03 	eor.w	ip, ip, r3
 8085bbe:	9b08      	ldr	r3, [sp, #32]
 8085bc0:	ea8e 0402 	eor.w	r4, lr, r2
 8085bc4:	ea8c 0c03 	eor.w	ip, ip, r3
 8085bc8:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 8085bcc:	eb0c 0306 	add.w	r3, ip, r6
 8085bd0:	4044      	eors	r4, r0
 8085bd2:	443b      	add	r3, r7
 8085bd4:	4423      	add	r3, r4
    P( D, E, A, B, C, R(72) );
 8085bd6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8085bd8:	9c09      	ldr	r4, [sp, #36]	; 0x24
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
 8085bda:	eb01 61f0 	add.w	r1, r1, r0, ror #27
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
 8085bde:	4067      	eors	r7, r4
 8085be0:	9c06      	ldr	r4, [sp, #24]
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
 8085be2:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(72) );
 8085be6:	4067      	eors	r7, r4
 8085be8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8085bea:	ea82 0a00 	eor.w	sl, r2, r0
 8085bee:	4067      	eors	r7, r4
 8085bf0:	ea4f 74f7 	mov.w	r4, r7, ror #31
    P( C, D, E, A, B, R(73) );
 8085bf4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
 8085bf6:	9409      	str	r4, [sp, #36]	; 0x24
 8085bf8:	4434      	add	r4, r6
 8085bfa:	4474      	add	r4, lr
    P( C, D, E, A, B, R(73) );
 8085bfc:	ea8b 0e07 	eor.w	lr, fp, r7
 8085c00:	9f07      	ldr	r7, [sp, #28]
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
 8085c02:	eb03 63f1 	add.w	r3, r3, r1, ror #27
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
 8085c06:	ea8e 0e07 	eor.w	lr, lr, r7
 8085c0a:	ea8e 0e08 	eor.w	lr, lr, r8
 8085c0e:	ea8a 0a01 	eor.w	sl, sl, r1
 8085c12:	ea4f 7efe 	mov.w	lr, lr, ror #31
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
 8085c16:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 8085c1a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8085c1c:	eb0e 0b06 	add.w	fp, lr, r6
 8085c20:	4454      	add	r4, sl
 8085c22:	ea80 0a01 	eor.w	sl, r0, r1
 8085c26:	ea8a 0a03 	eor.w	sl, sl, r3
 8085c2a:	445a      	add	r2, fp
 8085c2c:	4452      	add	r2, sl
 8085c2e:	46ba      	mov	sl, r7
 8085c30:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
 8085c32:	eb04 64f3 	add.w	r4, r4, r3, ror #27
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 8085c36:	ea8a 0a07 	eor.w	sl, sl, r7
 8085c3a:	ea8a 0505 	eor.w	r5, sl, r5
 8085c3e:	ea85 050c 	eor.w	r5, r5, ip
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
 8085c42:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( B, C, D, E, A, R(74) );
 8085c46:	ea4f 75f5 	mov.w	r5, r5, ror #31
 8085c4a:	eb05 0b06 	add.w	fp, r5, r6
 8085c4e:	ea81 0a03 	eor.w	sl, r1, r3
 8085c52:	4458      	add	r0, fp
 8085c54:	ea8a 0a04 	eor.w	sl, sl, r4
    P( A, B, C, D, E, R(75) );
 8085c58:	9f02      	ldr	r7, [sp, #8]
 8085c5a:	4482      	add	sl, r0
 8085c5c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
 8085c5e:	eb02 62f4 	add.w	r2, r2, r4, ror #27
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
 8085c62:	4078      	eors	r0, r7
 8085c64:	ea80 0909 	eor.w	r9, r0, r9
 8085c68:	9809      	ldr	r0, [sp, #36]	; 0x24
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 8085c6a:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( A, B, C, D, E, R(75) );
 8085c6e:	ea89 0700 	eor.w	r7, r9, r0
 8085c72:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8085c76:	eb07 0906 	add.w	r9, r7, r6
 8085c7a:	ea83 0004 	eor.w	r0, r3, r4
 8085c7e:	4449      	add	r1, r9
 8085c80:	4050      	eors	r0, r2
 8085c82:	4408      	add	r0, r1
    P( E, A, B, C, D, R(76) );
 8085c84:	990c      	ldr	r1, [sp, #48]	; 0x30
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 8085c86:	950a      	str	r5, [sp, #40]	; 0x28
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
 8085c88:	460d      	mov	r5, r1
 8085c8a:	9903      	ldr	r1, [sp, #12]
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 8085c8c:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
 8085c90:	4069      	eors	r1, r5
 8085c92:	9d08      	ldr	r5, [sp, #32]
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
 8085c94:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(76) );
 8085c98:	4069      	eors	r1, r5
 8085c9a:	ea81 0e0e 	eor.w	lr, r1, lr
 8085c9e:	ea4f 7efe 	mov.w	lr, lr, ror #31
 8085ca2:	eb0e 0906 	add.w	r9, lr, r6
 8085ca6:	ea84 0102 	eor.w	r1, r4, r2
 8085caa:	444b      	add	r3, r9
 8085cac:	ea81 010a 	eor.w	r1, r1, sl
 8085cb0:	9d04      	ldr	r5, [sp, #16]
 8085cb2:	4419      	add	r1, r3
 8085cb4:	9b02      	ldr	r3, [sp, #8]
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
 8085cb6:	eb00 60fa 	add.w	r0, r0, sl, ror #27
 8085cba:	406b      	eors	r3, r5
 8085cbc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(76) );
 8085cbe:	ea4f 0aba 	mov.w	sl, sl, ror #2
 8085cc2:	406b      	eors	r3, r5
 8085cc4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8085cc6:	ea82 090a 	eor.w	r9, r2, sl
 8085cca:	406b      	eors	r3, r5
 8085ccc:	eb06 73f3 	add.w	r3, r6, r3, ror #31
 8085cd0:	9d06      	ldr	r5, [sp, #24]
 8085cd2:	441c      	add	r4, r3
 8085cd4:	9b03      	ldr	r3, [sp, #12]
 8085cd6:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 8085cda:	406b      	eors	r3, r5
 8085cdc:	ea83 0808 	eor.w	r8, r3, r8
 8085ce0:	ea89 0900 	eor.w	r9, r9, r0
 8085ce4:	ea88 0807 	eor.w	r8, r8, r7
    P( D, E, A, B, C, R(77) );
 8085ce8:	ea4f 00b0 	mov.w	r0, r0, ror #2
 8085cec:	eb06 78f8 	add.w	r8, r6, r8, ror #31
 8085cf0:	ea8a 0500 	eor.w	r5, sl, r0
 8085cf4:	404d      	eors	r5, r1
 8085cf6:	4442      	add	r2, r8
 8085cf8:	442a      	add	r2, r5
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
 8085cfa:	9b04      	ldr	r3, [sp, #16]
 8085cfc:	9d07      	ldr	r5, [sp, #28]
 8085cfe:	444c      	add	r4, r9
 8085d00:	406b      	eors	r3, r5
 8085d02:	ea83 0c0c 	eor.w	ip, r3, ip
 8085d06:	9b12      	ldr	r3, [sp, #72]	; 0x48
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
 8085d08:	eb04 64f1 	add.w	r4, r4, r1, ror #27
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
 8085d0c:	441e      	add	r6, r3
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
    P( C, D, E, A, B, R(78) );
 8085d0e:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
 8085d12:	ea8c 0e0e 	eor.w	lr, ip, lr
 8085d16:	ea80 0501 	eor.w	r5, r0, r1
 8085d1a:	eb06 7efe 	add.w	lr, r6, lr, ror #31
 8085d1e:	4065      	eors	r5, r4
 8085d20:	44f2      	add	sl, lr
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
    P( C, D, E, A, B, R(78) );
 8085d22:	eb02 62f4 	add.w	r2, r2, r4, ror #27
 8085d26:	e001      	b.n	8085d2c <mbedtls_internal_sha1_process+0xf34>
 8085d28:	ca62c1d6 	.word	0xca62c1d6
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
 8085d2c:	eb0a 0305 	add.w	r3, sl, r5
 8085d30:	9d01      	ldr	r5, [sp, #4]
 8085d32:	eb03 63f2 	add.w	r3, r3, r2, ror #27
 8085d36:	60ab      	str	r3, [r5, #8]
    ctx->state[1] += B;
 8085d38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8085d3a:	441a      	add	r2, r3
    ctx->state[2] += C;
 8085d3c:	9b05      	ldr	r3, [sp, #20]

#undef K
#undef F

    ctx->state[0] += A;
    ctx->state[1] += B;
 8085d3e:	60ea      	str	r2, [r5, #12]
    ctx->state[2] += C;
 8085d40:	eb03 04b4 	add.w	r4, r3, r4, ror #2
    ctx->state[3] += D;
 8085d44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
#undef K
#undef F

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
 8085d46:	612c      	str	r4, [r5, #16]
    ctx->state[3] += D;
 8085d48:	4419      	add	r1, r3
    ctx->state[4] += E;
 8085d4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
#undef F

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
 8085d4c:	6169      	str	r1, [r5, #20]
    ctx->state[4] += E;
 8085d4e:	4418      	add	r0, r3
 8085d50:	61a8      	str	r0, [r5, #24]

    return( 0 );
}
 8085d52:	2000      	movs	r0, #0
 8085d54:	b017      	add	sp, #92	; 0x5c
 8085d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085d5a:	bf00      	nop

08085d5c <mbedtls_sha1_update_ret>:
 * SHA-1 process buffer
 */
int mbedtls_sha1_update_ret( mbedtls_sha1_context *ctx,
                             const unsigned char *input,
                             size_t ilen )
{
 8085d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8085d60:	4604      	mov	r4, r0
 8085d62:	460e      	mov	r6, r1
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
 8085d64:	4615      	mov	r5, r2
 8085d66:	b382      	cbz	r2, 8085dca <mbedtls_sha1_update_ret+0x6e>
        return( 0 );

    left = ctx->total[0] & 0x3F;
 8085d68:	6803      	ldr	r3, [r0, #0]
 8085d6a:	f003 003f 	and.w	r0, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 8085d6e:	4413      	add	r3, r2
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
 8085d70:	429a      	cmp	r2, r3
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 8085d72:	6023      	str	r3, [r4, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
 8085d74:	bf82      	ittt	hi
 8085d76:	6863      	ldrhi	r3, [r4, #4]
 8085d78:	3301      	addhi	r3, #1
 8085d7a:	6063      	strhi	r3, [r4, #4]

    if( left && ilen >= fill )
 8085d7c:	b180      	cbz	r0, 8085da0 <mbedtls_sha1_update_ret+0x44>

    if( ilen == 0 )
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
 8085d7e:	f1c0 0740 	rsb	r7, r0, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
 8085d82:	42ba      	cmp	r2, r7
 8085d84:	d31b      	bcc.n	8085dbe <mbedtls_sha1_update_ret+0x62>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 8085d86:	f104 081c 	add.w	r8, r4, #28
 8085d8a:	463a      	mov	r2, r7
 8085d8c:	4440      	add	r0, r8
 8085d8e:	f00c fadc 	bl	809234a <memcpy>

        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
 8085d92:	4641      	mov	r1, r8
 8085d94:	4620      	mov	r0, r4
 8085d96:	f7ff f82f 	bl	8084df8 <mbedtls_internal_sha1_process>
 8085d9a:	b9b8      	cbnz	r0, 8085dcc <mbedtls_sha1_update_ret+0x70>
            return( ret );

        input += fill;
 8085d9c:	443e      	add	r6, r7
        ilen  -= fill;
 8085d9e:	1bed      	subs	r5, r5, r7
 * SHA-1 process buffer
 */
int mbedtls_sha1_update_ret( mbedtls_sha1_context *ctx,
                             const unsigned char *input,
                             size_t ilen )
{
 8085da0:	462f      	mov	r7, r5
 8085da2:	1be9      	subs	r1, r5, r7
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
 8085da4:	2f3f      	cmp	r7, #63	; 0x3f
 8085da6:	4431      	add	r1, r6
 8085da8:	d905      	bls.n	8085db6 <mbedtls_sha1_update_ret+0x5a>
    {
        if( ( ret = mbedtls_internal_sha1_process( ctx, input ) ) != 0 )
 8085daa:	4620      	mov	r0, r4
 8085dac:	f7ff f824 	bl	8084df8 <mbedtls_internal_sha1_process>
 8085db0:	b960      	cbnz	r0, 8085dcc <mbedtls_sha1_update_ret+0x70>
            return( ret );

        input += 64;
        ilen  -= 64;
 8085db2:	3f40      	subs	r7, #64	; 0x40
 8085db4:	e7f5      	b.n	8085da2 <mbedtls_sha1_update_ret+0x46>
    }

    if( ilen > 0 )
 8085db6:	b147      	cbz	r7, 8085dca <mbedtls_sha1_update_ret+0x6e>
 8085db8:	463d      	mov	r5, r7
 8085dba:	460e      	mov	r6, r1
 8085dbc:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8085dbe:	341c      	adds	r4, #28
 8085dc0:	462a      	mov	r2, r5
 8085dc2:	4631      	mov	r1, r6
 8085dc4:	4420      	add	r0, r4
 8085dc6:	f00c fac0 	bl	809234a <memcpy>

    return( 0 );
 8085dca:	2000      	movs	r0, #0
}
 8085dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08085dd0 <mbedtls_sha1_finish_ret>:
/*
 * SHA-1 final digest
 */
int mbedtls_sha1_finish_ret( mbedtls_sha1_context *ctx,
                             unsigned char output[20] )
{
 8085dd0:	b570      	push	{r4, r5, r6, lr}
 8085dd2:	4604      	mov	r4, r0
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 8085dd4:	6803      	ldr	r3, [r0, #0]

    ctx->buffer[used++] = 0x80;
 8085dd6:	2280      	movs	r2, #128	; 0x80
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 8085dd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
 8085ddc:	1c58      	adds	r0, r3, #1

    if( used <= 56 )
 8085dde:	2838      	cmp	r0, #56	; 0x38
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 8085de0:	4423      	add	r3, r4
/*
 * SHA-1 final digest
 */
int mbedtls_sha1_finish_ret( mbedtls_sha1_context *ctx,
                             unsigned char output[20] )
{
 8085de2:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 8085de4:	771a      	strb	r2, [r3, #28]
 8085de6:	f104 061c 	add.w	r6, r4, #28

    if( used <= 56 )
 8085dea:	d804      	bhi.n	8085df6 <mbedtls_sha1_finish_ret+0x26>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 8085dec:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 8085df0:	2100      	movs	r1, #0
 8085df2:	4430      	add	r0, r6
 8085df4:	e00e      	b.n	8085e14 <mbedtls_sha1_finish_ret+0x44>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 8085df6:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 8085dfa:	2100      	movs	r1, #0
 8085dfc:	4430      	add	r0, r6
 8085dfe:	f00c faca 	bl	8092396 <memset>

        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
 8085e02:	4631      	mov	r1, r6
 8085e04:	4620      	mov	r0, r4
 8085e06:	f7fe fff7 	bl	8084df8 <mbedtls_internal_sha1_process>
 8085e0a:	2800      	cmp	r0, #0
 8085e0c:	d153      	bne.n	8085eb6 <mbedtls_sha1_finish_ret+0xe6>
            return( ret );

        memset( ctx->buffer, 0, 56 );
 8085e0e:	4601      	mov	r1, r0
 8085e10:	4630      	mov	r0, r6
 8085e12:	2238      	movs	r2, #56	; 0x38
 8085e14:	f00c fabf 	bl	8092396 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 8085e18:	6823      	ldr	r3, [r4, #0]
         | ( ctx->total[1] <<  3 );
 8085e1a:	6861      	ldr	r1, [r4, #4]
 8085e1c:	0f5a      	lsrs	r2, r3, #29
 8085e1e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 8085e22:	0e11      	lsrs	r1, r2, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 8085e24:	00db      	lsls	r3, r3, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 8085e26:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
 8085e2a:	0c11      	lsrs	r1, r2, #16
 8085e2c:	f884 1055 	strb.w	r1, [r4, #85]	; 0x55
 8085e30:	f884 2057 	strb.w	r2, [r4, #87]	; 0x57
 8085e34:	0a11      	lsrs	r1, r2, #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 8085e36:	0e1a      	lsrs	r2, r3, #24
 8085e38:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 8085e3c:	0c1a      	lsrs	r2, r3, #16
 8085e3e:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8085e42:	0a1a      	lsrs	r2, r3, #8
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 8085e44:	f884 1056 	strb.w	r1, [r4, #86]	; 0x56
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 8085e48:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a
 8085e4c:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b

    if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
 8085e50:	4631      	mov	r1, r6
 8085e52:	4620      	mov	r0, r4
 8085e54:	f7fe ffd0 	bl	8084df8 <mbedtls_internal_sha1_process>
 8085e58:	2800      	cmp	r0, #0
 8085e5a:	d12c      	bne.n	8085eb6 <mbedtls_sha1_finish_ret+0xe6>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 8085e5c:	7ae3      	ldrb	r3, [r4, #11]
 8085e5e:	702b      	strb	r3, [r5, #0]
 8085e60:	8963      	ldrh	r3, [r4, #10]
 8085e62:	706b      	strb	r3, [r5, #1]
 8085e64:	68a3      	ldr	r3, [r4, #8]
 8085e66:	0a1b      	lsrs	r3, r3, #8
 8085e68:	70ab      	strb	r3, [r5, #2]
 8085e6a:	68a3      	ldr	r3, [r4, #8]
 8085e6c:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 8085e6e:	7be3      	ldrb	r3, [r4, #15]
 8085e70:	712b      	strb	r3, [r5, #4]
 8085e72:	89e3      	ldrh	r3, [r4, #14]
 8085e74:	716b      	strb	r3, [r5, #5]
 8085e76:	68e3      	ldr	r3, [r4, #12]
 8085e78:	0a1b      	lsrs	r3, r3, #8
 8085e7a:	71ab      	strb	r3, [r5, #6]
 8085e7c:	68e3      	ldr	r3, [r4, #12]
 8085e7e:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 8085e80:	7ce3      	ldrb	r3, [r4, #19]
 8085e82:	722b      	strb	r3, [r5, #8]
 8085e84:	8a63      	ldrh	r3, [r4, #18]
 8085e86:	726b      	strb	r3, [r5, #9]
 8085e88:	6923      	ldr	r3, [r4, #16]
 8085e8a:	0a1b      	lsrs	r3, r3, #8
 8085e8c:	72ab      	strb	r3, [r5, #10]
 8085e8e:	6923      	ldr	r3, [r4, #16]
 8085e90:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 8085e92:	7de3      	ldrb	r3, [r4, #23]
 8085e94:	732b      	strb	r3, [r5, #12]
 8085e96:	8ae3      	ldrh	r3, [r4, #22]
 8085e98:	736b      	strb	r3, [r5, #13]
 8085e9a:	6963      	ldr	r3, [r4, #20]
 8085e9c:	0a1b      	lsrs	r3, r3, #8
 8085e9e:	73ab      	strb	r3, [r5, #14]
 8085ea0:	6963      	ldr	r3, [r4, #20]
 8085ea2:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 8085ea4:	7ee3      	ldrb	r3, [r4, #27]
 8085ea6:	742b      	strb	r3, [r5, #16]
 8085ea8:	8b63      	ldrh	r3, [r4, #26]
 8085eaa:	746b      	strb	r3, [r5, #17]
 8085eac:	69a3      	ldr	r3, [r4, #24]
 8085eae:	0a1b      	lsrs	r3, r3, #8
 8085eb0:	74ab      	strb	r3, [r5, #18]
 8085eb2:	69a3      	ldr	r3, [r4, #24]
 8085eb4:	74eb      	strb	r3, [r5, #19]

    return( 0 );
}
 8085eb6:	bd70      	pop	{r4, r5, r6, pc}

08085eb8 <mbedtls_sha1_ret>:
 * output = SHA-1( input buffer )
 */
int mbedtls_sha1_ret( const unsigned char *input,
                      size_t ilen,
                      unsigned char output[20] )
{
 8085eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8085eba:	b099      	sub	sp, #100	; 0x64
 8085ebc:	4606      	mov	r6, r0
    int ret;
    mbedtls_sha1_context ctx;

    mbedtls_sha1_init( &ctx );
 8085ebe:	a801      	add	r0, sp, #4
 * output = SHA-1( input buffer )
 */
int mbedtls_sha1_ret( const unsigned char *input,
                      size_t ilen,
                      unsigned char output[20] )
{
 8085ec0:	460f      	mov	r7, r1
 8085ec2:	4615      	mov	r5, r2
    int ret;
    mbedtls_sha1_context ctx;

    mbedtls_sha1_init( &ctx );
 8085ec4:	f7fe ff6a 	bl	8084d9c <mbedtls_sha1_init>

    if( ( ret = mbedtls_sha1_starts_ret( &ctx ) ) != 0 )
 8085ec8:	a801      	add	r0, sp, #4
 8085eca:	f7fe ff7b 	bl	8084dc4 <mbedtls_sha1_starts_ret>
 8085ece:	4604      	mov	r4, r0
 8085ed0:	b958      	cbnz	r0, 8085eea <mbedtls_sha1_ret+0x32>
        goto exit;

    if( ( ret = mbedtls_sha1_update_ret( &ctx, input, ilen ) ) != 0 )
 8085ed2:	463a      	mov	r2, r7
 8085ed4:	4631      	mov	r1, r6
 8085ed6:	a801      	add	r0, sp, #4
 8085ed8:	f7ff ff40 	bl	8085d5c <mbedtls_sha1_update_ret>
 8085edc:	4604      	mov	r4, r0
 8085ede:	b920      	cbnz	r0, 8085eea <mbedtls_sha1_ret+0x32>
        goto exit;

    if( ( ret = mbedtls_sha1_finish_ret( &ctx, output ) ) != 0 )
 8085ee0:	4629      	mov	r1, r5
 8085ee2:	a801      	add	r0, sp, #4
 8085ee4:	f7ff ff74 	bl	8085dd0 <mbedtls_sha1_finish_ret>
 8085ee8:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_sha1_free( &ctx );
 8085eea:	a801      	add	r0, sp, #4
 8085eec:	f7fe ff5a 	bl	8084da4 <mbedtls_sha1_free>

    return( ret );
}
 8085ef0:	4620      	mov	r0, r4
 8085ef2:	b019      	add	sp, #100	; 0x64
 8085ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08085ef6 <mbedtls_timing_get_timer.part.0>:
    CloseHandle( CreateThread( NULL, 0, TimerProc, NULL, 0, &ThreadId ) );
}

#else /* _WIN32 && !EFIX64 && !EFI32 */

unsigned long mbedtls_timing_get_timer( struct mbedtls_timing_hr_time *val, int reset )
 8085ef6:	b513      	push	{r0, r1, r4, lr}
 8085ef8:	4604      	mov	r4, r0
    }
    else
    {
        unsigned long delta;
        struct timeval now;
        gettimeofday( &now, NULL );
 8085efa:	2100      	movs	r1, #0
 8085efc:	4668      	mov	r0, sp
 8085efe:	f00c faa3 	bl	8092448 <gettimeofday>
        delta = ( now.tv_sec  - t->start.tv_sec  ) * 1000ul
              + ( now.tv_usec - t->start.tv_usec ) / 1000;
 8085f02:	9b00      	ldr	r3, [sp, #0]
 8085f04:	6822      	ldr	r2, [r4, #0]
 8085f06:	6861      	ldr	r1, [r4, #4]
 8085f08:	1a9a      	subs	r2, r3, r2
 8085f0a:	9b01      	ldr	r3, [sp, #4]
 8085f0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8085f10:	1a5b      	subs	r3, r3, r1
 8085f12:	fb93 f3f0 	sdiv	r3, r3, r0
        return( delta );
    }
}
 8085f16:	fb00 3002 	mla	r0, r0, r2, r3
 8085f1a:	b002      	add	sp, #8
 8085f1c:	bd10      	pop	{r4, pc}

08085f1e <_gettimeofday>:
#define HAVE_HARDCLOCK

#include "rtc_hal.h"
#include "timer_hal.h"
extern "C" int _gettimeofday( struct timeval *tv, void *tzvp )
{
 8085f1e:	b538      	push	{r3, r4, r5, lr}
 8085f20:	4604      	mov	r4, r0
    uint32_t t = HAL_Timer_Milliseconds();  // get uptime
 8085f22:	f00a faa1 	bl	8090468 <HAL_Timer_Get_Milli_Seconds>
 8085f26:	4605      	mov	r5, r0
    tv->tv_sec = HAL_RTC_Get_UnixTime();    // get rtc time before Particle.syncTime()
 8085f28:	f00a faa6 	bl	8090478 <HAL_RTC_Get_UnixTime>
    tv->tv_usec = ( t % 1000 )*1000;        // get remaining microseconds
 8085f2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
#include "rtc_hal.h"
#include "timer_hal.h"
extern "C" int _gettimeofday( struct timeval *tv, void *tzvp )
{
    uint32_t t = HAL_Timer_Milliseconds();  // get uptime
    tv->tv_sec = HAL_RTC_Get_UnixTime();    // get rtc time before Particle.syncTime()
 8085f30:	6020      	str	r0, [r4, #0]
    tv->tv_usec = ( t % 1000 )*1000;        // get remaining microseconds
 8085f32:	fbb5 f0f3 	udiv	r0, r5, r3
 8085f36:	fb03 5010 	mls	r0, r3, r0, r5
 8085f3a:	4343      	muls	r3, r0
 8085f3c:	6063      	str	r3, [r4, #4]
    return 0;
} // end _gettimeofday()
 8085f3e:	2000      	movs	r0, #0
 8085f40:	bd38      	pop	{r3, r4, r5, pc}

08085f42 <mbedtls_timing_set_delay>:
 */
void mbedtls_timing_set_delay( void *data, uint32_t int_ms, uint32_t fin_ms )
{
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;

    ctx->int_ms = int_ms;
 8085f42:	6201      	str	r1, [r0, #32]
    ctx->fin_ms = fin_ms;
 8085f44:	6242      	str	r2, [r0, #36]	; 0x24

    if( fin_ms != 0 )
 8085f46:	b112      	cbz	r2, 8085f4e <mbedtls_timing_set_delay+0xc>
{
    struct _hr_time *t = (struct _hr_time *) val;

    if( reset )
    {
        gettimeofday( &t->start, NULL );
 8085f48:	2100      	movs	r1, #0
 8085f4a:	f00c ba7d 	b.w	8092448 <gettimeofday>
 8085f4e:	4770      	bx	lr

08085f50 <mbedtls_timing_get_delay>:

/*
 * Get number of delays expired
 */
int mbedtls_timing_get_delay( void *data )
{
 8085f50:	b510      	push	{r4, lr}
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;
    unsigned long elapsed_ms;

    if( ctx->fin_ms == 0 )
 8085f52:	6a43      	ldr	r3, [r0, #36]	; 0x24

/*
 * Get number of delays expired
 */
int mbedtls_timing_get_delay( void *data )
{
 8085f54:	4604      	mov	r4, r0
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;
    unsigned long elapsed_ms;

    if( ctx->fin_ms == 0 )
 8085f56:	b153      	cbz	r3, 8085f6e <mbedtls_timing_get_delay+0x1e>
 8085f58:	f7ff ffcd 	bl	8085ef6 <mbedtls_timing_get_timer.part.0>
        return( -1 );

    elapsed_ms = mbedtls_timing_get_timer( &ctx->timer, 0 );

    if( elapsed_ms >= ctx->fin_ms )
 8085f5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8085f5e:	4283      	cmp	r3, r0
 8085f60:	d908      	bls.n	8085f74 <mbedtls_timing_get_delay+0x24>
{
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;
    unsigned long elapsed_ms;

    if( ctx->fin_ms == 0 )
        return( -1 );
 8085f62:	6a23      	ldr	r3, [r4, #32]
 8085f64:	4283      	cmp	r3, r0
 8085f66:	bf8c      	ite	hi
 8085f68:	2000      	movhi	r0, #0
 8085f6a:	2001      	movls	r0, #1
 8085f6c:	bd10      	pop	{r4, pc}
 8085f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8085f72:	bd10      	pop	{r4, pc}

    elapsed_ms = mbedtls_timing_get_timer( &ctx->timer, 0 );

    if( elapsed_ms >= ctx->fin_ms )
        return( 2 );
 8085f74:	2002      	movs	r0, #2

    if( elapsed_ms >= ctx->int_ms )
        return( 1 );

    return( 0 );
}
 8085f76:	bd10      	pop	{r4, pc}

08085f78 <_ZL12gcm_ctx_freePv>:

    return( ctx );
}

static void gcm_ctx_free( void *ctx )
{
 8085f78:	b510      	push	{r4, lr}
 8085f7a:	4604      	mov	r4, r0
    mbedtls_gcm_free( (mbedtls_gcm_context *)ctx );
 8085f7c:	f001 faee 	bl	808755c <mbedtls_gcm_free>
    mbedtls_free( ctx );
 8085f80:	4620      	mov	r0, r4
}
 8085f82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void gcm_ctx_free( void *ctx )
{
    mbedtls_gcm_free( (mbedtls_gcm_context *)ctx );
    mbedtls_free( ctx );
 8085f86:	f00a bc77 	b.w	8090878 <free>

08085f8a <_ZL13gcm_ctx_allocv>:
#endif

#if defined(MBEDTLS_GCM_C)
/* shared by all GCM ciphers */
static void *gcm_ctx_alloc( void )
{
 8085f8a:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );
 8085f8c:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8085f90:	2001      	movs	r0, #1
 8085f92:	f00c f9b5 	bl	8092300 <calloc>

    if( ctx != NULL )
 8085f96:	4604      	mov	r4, r0
 8085f98:	b108      	cbz	r0, 8085f9e <_ZL13gcm_ctx_allocv+0x14>
        mbedtls_gcm_init( (mbedtls_gcm_context *) ctx );
 8085f9a:	f001 f84d 	bl	8087038 <mbedtls_gcm_init>

    return( ctx );
}
 8085f9e:	4620      	mov	r0, r4
 8085fa0:	bd10      	pop	{r4, pc}

08085fa2 <_ZL19gcm_aes_setkey_wrapPvPKhj>:
#if defined(MBEDTLS_GCM_C)
static int gcm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
                     key, key_bitlen );
 8085fa2:	4613      	mov	r3, r2
 8085fa4:	460a      	mov	r2, r1
 8085fa6:	2102      	movs	r1, #2
 8085fa8:	f001 b84b 	b.w	8087042 <mbedtls_gcm_setkey>

08085fac <_ZL12aes_ctx_freePv>:

    return( aes );
}

static void aes_ctx_free( void *ctx )
{
 8085fac:	b510      	push	{r4, lr}
 8085fae:	4604      	mov	r4, r0
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
 8085fb0:	f006 fca3 	bl	808c8fa <mbedtls_aes_free>
    mbedtls_free( ctx );
 8085fb4:	4620      	mov	r0, r4
}
 8085fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void aes_ctx_free( void *ctx )
{
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
    mbedtls_free( ctx );
 8085fba:	f00a bc5d 	b.w	8090878 <free>

08085fbe <_ZL13aes_ctx_allocv>:
{
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
}

static void * aes_ctx_alloc( void )
{
 8085fbe:	b510      	push	{r4, lr}
    mbedtls_aes_context *aes = (mbedtls_aes_context *)mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
 8085fc0:	f44f 718c 	mov.w	r1, #280	; 0x118
 8085fc4:	2001      	movs	r0, #1
 8085fc6:	f00c f99b 	bl	8092300 <calloc>

    if( aes == NULL )
 8085fca:	4604      	mov	r4, r0
 8085fcc:	b108      	cbz	r0, 8085fd2 <_ZL13aes_ctx_allocv+0x14>
        return( NULL );

    mbedtls_aes_init( aes );
 8085fce:	f006 fc8f 	bl	808c8f0 <mbedtls_aes_init>

    return( aes );
}
 8085fd2:	4620      	mov	r0, r4
 8085fd4:	bd10      	pop	{r4, pc}

08085fd6 <_ZL19aes_setkey_dec_wrapPvPKhj>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

static int aes_setkey_dec_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
 8085fd6:	f006 bd97 	b.w	808cb08 <mbedtls_aes_setkey_dec>

08085fda <_ZL19aes_setkey_enc_wrapPvPKhj>:
}

static int aes_setkey_enc_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
 8085fda:	f006 bc99 	b.w	808c910 <mbedtls_aes_setkey_enc>

08085fde <_ZL18aes_crypt_cbc_wrapPv19mbedtls_operation_tjPhPKhS1_>:
}

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int aes_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation, size_t length,
        unsigned char *iv, const unsigned char *input, unsigned char *output )
{
 8085fde:	b410      	push	{r4}
    return mbedtls_aes_crypt_cbc( (mbedtls_aes_context *) ctx, operation, length, iv, input,
                          output );
}
 8085fe0:	bc10      	pop	{r4}
#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int aes_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation, size_t length,
        unsigned char *iv, const unsigned char *input, unsigned char *output )
{
    return mbedtls_aes_crypt_cbc( (mbedtls_aes_context *) ctx, operation, length, iv, input,
                          output );
 8085fe2:	f007 b9a7 	b.w	808d334 <mbedtls_aes_crypt_cbc>

08085fe6 <_ZL18aes_crypt_ecb_wrapPv19mbedtls_operation_tPKhPh>:
#if defined(MBEDTLS_AES_C)

static int aes_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        const unsigned char *input, unsigned char *output )
{
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
 8085fe6:	f007 b999 	b.w	808d31c <mbedtls_aes_crypt_ecb>

08085fea <_ZL10rsa_can_do17mbedtls_pk_type_t>:
#endif

#if defined(MBEDTLS_RSA_C)
static int rsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_RSA ||
 8085fea:	2801      	cmp	r0, #1
 8085fec:	d002      	beq.n	8085ff4 <_ZL10rsa_can_do17mbedtls_pk_type_t+0xa>
 8085fee:	1f83      	subs	r3, r0, #6
 8085ff0:	4258      	negs	r0, r3
 8085ff2:	4158      	adcs	r0, r3
            type == MBEDTLS_PK_RSASSA_PSS );
}
 8085ff4:	4770      	bx	lr
	...

08085ff8 <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item>:
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
 8085ff8:	2301      	movs	r3, #1
    items->name = "rsa.N";
 8085ffa:	4a06      	ldr	r2, [pc, #24]	; (8086014 <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item+0x1c>)
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
 8085ffc:	700b      	strb	r3, [r1, #0]
    items->name = "rsa.N";
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
 8085ffe:	730b      	strb	r3, [r1, #12]
    items->name = "rsa.E";
 8086000:	4b05      	ldr	r3, [pc, #20]	; (8086018 <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item+0x20>)
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.N";
 8086002:	604a      	str	r2, [r1, #4]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 8086004:	f100 0208 	add.w	r2, r0, #8

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.E";
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 8086008:	3014      	adds	r0, #20

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.N";
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 808600a:	608a      	str	r2, [r1, #8]

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.E";
 808600c:	610b      	str	r3, [r1, #16]
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 808600e:	6148      	str	r0, [r1, #20]
 8086010:	4770      	bx	lr
 8086012:	bf00      	nop
 8086014:	08093624 	.word	0x08093624
 8086018:	0809362a 	.word	0x0809362a

0808601c <_ZL13rsa_free_wrapPv>:

    return( ctx );
}

static void rsa_free_wrap( void *ctx )
{
 808601c:	b510      	push	{r4, lr}
 808601e:	4604      	mov	r4, r0
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
 8086020:	f7fe fd86 	bl	8084b30 <mbedtls_rsa_free>
    mbedtls_free( ctx );
 8086024:	4620      	mov	r0, r4
}
 8086026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void rsa_free_wrap( void *ctx )
{
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
    mbedtls_free( ctx );
 808602a:	f00a bc25 	b.w	8090878 <free>

0808602e <_ZL14rsa_alloc_wrapv>:
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
                                (const mbedtls_rsa_context *) prv ) );
}

static void *rsa_alloc_wrap( void )
{
 808602e:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_rsa_context ) );
 8086030:	21ac      	movs	r1, #172	; 0xac
 8086032:	2001      	movs	r0, #1
 8086034:	f00c f964 	bl	8092300 <calloc>

    if( ctx != NULL )
 8086038:	4604      	mov	r4, r0
 808603a:	b118      	cbz	r0, 8086044 <_ZL14rsa_alloc_wrapv+0x16>
        mbedtls_rsa_init( (mbedtls_rsa_context *) ctx, 0, 0 );
 808603c:	2200      	movs	r2, #0
 808603e:	4611      	mov	r1, r2
 8086040:	f7fd fd88 	bl	8083b54 <mbedtls_rsa_init>

    return( ctx );
}
 8086044:	4620      	mov	r0, r4
 8086046:	bd10      	pop	{r4, pc}

08086048 <_ZL19rsa_check_pair_wrapPKvS0_>:
}

static int rsa_check_pair_wrap( const void *pub, const void *prv )
{
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
                                (const mbedtls_rsa_context *) prv ) );
 8086048:	f7fd bdea 	b.w	8083c20 <mbedtls_rsa_check_pub_priv>

0808604c <_ZL14rsa_get_bitlenPKv>:
    return( type == MBEDTLS_PK_RSA ||
            type == MBEDTLS_PK_RSASSA_PSS );
}

static size_t rsa_get_bitlen( const void *ctx )
{
 808604c:	b508      	push	{r3, lr}
    const mbedtls_rsa_context * rsa = (const mbedtls_rsa_context *) ctx;
    return( 8 * mbedtls_rsa_get_len( rsa ) );
 808604e:	f7fd fd8e 	bl	8083b6e <mbedtls_rsa_get_len>
}
 8086052:	00c0      	lsls	r0, r0, #3
 8086054:	bd08      	pop	{r3, pc}
	...

08086058 <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_>:

static int rsa_encrypt_wrap( void *ctx,
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 8086058:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808605c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8086060:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8086064:	4604      	mov	r4, r0
 8086066:	4688      	mov	r8, r1
 8086068:	4617      	mov	r7, r2
 808606a:	4699      	mov	r9, r3
 808606c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 808606e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    *olen = mbedtls_rsa_get_len( rsa );
 8086070:	f7fd fd7d 	bl	8083b6e <mbedtls_rsa_get_len>

    if( *olen > osize )
 8086074:	4550      	cmp	r0, sl
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    *olen = mbedtls_rsa_get_len( rsa );
 8086076:	f8cb 0000 	str.w	r0, [fp]

    if( *olen > osize )
 808607a:	d80d      	bhi.n	8086098 <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x40>
        return( MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE );

    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
                                       ilen, input, output ) );
 808607c:	4632      	mov	r2, r6
 808607e:	4629      	mov	r1, r5
 8086080:	4620      	mov	r0, r4
 8086082:	2300      	movs	r3, #0
 8086084:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8086088:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 808608c:	970a      	str	r7, [sp, #40]	; 0x28
}
 808608e:	b001      	add	sp, #4
 8086090:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    if( *olen > osize )
        return( MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE );

    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
                                       ilen, input, output ) );
 8086094:	f7fe b8e0 	b.w	8084258 <mbedtls_rsa_pkcs1_encrypt>
}
 8086098:	4801      	ldr	r0, [pc, #4]	; (80860a0 <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x48>)
 808609a:	b001      	add	sp, #4
 808609c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80860a0:	ffffbc00 	.word	0xffffbc00

080860a4 <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_>:

static int rsa_decrypt_wrap( void *ctx,
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 80860a4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80860a8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80860aa:	4693      	mov	fp, r2
 80860ac:	4604      	mov	r4, r0
 80860ae:	4688      	mov	r8, r1
 80860b0:	4699      	mov	r9, r3
 80860b2:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80860b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80860b8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;

    if( ilen != mbedtls_rsa_get_len( rsa ) )
 80860ba:	f7fd fd58 	bl	8083b6e <mbedtls_rsa_get_len>
 80860be:	4558      	cmp	r0, fp
 80860c0:	d10f      	bne.n	80860e2 <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x3e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
                MBEDTLS_RSA_PRIVATE, olen, input, output, osize ) );
 80860c2:	4632      	mov	r2, r6
 80860c4:	4629      	mov	r1, r5
 80860c6:	4620      	mov	r0, r4
 80860c8:	2301      	movs	r3, #1
 80860ca:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80860ce:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80860d2:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80860d6:	970a      	str	r7, [sp, #40]	; 0x28
}
 80860d8:	b001      	add	sp, #4
 80860da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    if( ilen != mbedtls_rsa_get_len( rsa ) )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
                MBEDTLS_RSA_PRIVATE, olen, input, output, osize ) );
 80860de:	f7fe ba3d 	b.w	808455c <mbedtls_rsa_pkcs1_decrypt>
}
 80860e2:	4802      	ldr	r0, [pc, #8]	; (80860ec <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x48>)
 80860e4:	b001      	add	sp, #4
 80860e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80860ea:	bf00      	nop
 80860ec:	ffffbf80 	.word	0xffffbf80

080860f0 <_ZL13rsa_sign_wrapPv17mbedtls_md_type_tPKhjPhPjPFiS_S3_jES_>:

static int rsa_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 80860f0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80860f4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80860f8:	460f      	mov	r7, r1
 80860fa:	4691      	mov	r9, r2
 80860fc:	4698      	mov	r8, r3
 80860fe:	4604      	mov	r4, r0
 8086100:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8086104:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8086106:	9e0d      	ldr	r6, [sp, #52]	; 0x34
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );
 8086108:	f7fd fd31 	bl	8083b6e <mbedtls_rsa_get_len>

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
                md_alg, (unsigned int) hash_len, hash, sig ) );
 808610c:	4632      	mov	r2, r6
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );
 808610e:	f8cb 0000 	str.w	r0, [fp]

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
                md_alg, (unsigned int) hash_len, hash, sig ) );
 8086112:	4629      	mov	r1, r5
 8086114:	4620      	mov	r0, r4
 8086116:	2301      	movs	r3, #1
 8086118:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 808611c:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8086120:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8086124:	970a      	str	r7, [sp, #40]	; 0x28
}
 8086126:	b001      	add	sp, #4
 8086128:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
                md_alg, (unsigned int) hash_len, hash, sig ) );
 808612c:	f7fe bb66 	b.w	80847fc <mbedtls_rsa_pkcs1_sign>

08086130 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j>:
}

static int rsa_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
 8086130:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8086134:	b085      	sub	sp, #20
 8086136:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8086138:	4606      	mov	r6, r0
 808613a:	460f      	mov	r7, r1
 808613c:	4691      	mov	r9, r2
 808613e:	4698      	mov	r8, r3
    int ret;
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
 8086140:	f7fd fd15 	bl	8083b6e <mbedtls_rsa_get_len>
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
 8086144:	42a0      	cmp	r0, r4
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
    int ret;
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
 8086146:	4605      	mov	r5, r0
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
 8086148:	d810      	bhi.n	808616c <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3c>
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );

    if( ( ret = mbedtls_rsa_pkcs1_verify( rsa, NULL, NULL,
 808614a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808614c:	e88d 0380 	stmia.w	sp, {r7, r8, r9}
 8086150:	9303      	str	r3, [sp, #12]
 8086152:	2300      	movs	r3, #0
 8086154:	461a      	mov	r2, r3
 8086156:	4619      	mov	r1, r3
 8086158:	4630      	mov	r0, r6
 808615a:	f7fe fcc7 	bl	8084aec <mbedtls_rsa_pkcs1_verify>
 808615e:	b930      	cbnz	r0, 808616e <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3e>
     * valid signature?" and not just "Does the buffer contain a valid
     * signature?". */
    if( sig_len > rsa_len )
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

    return( 0 );
 8086160:	f5a0 5064 	sub.w	r0, r0, #14592	; 0x3900
 8086164:	42a5      	cmp	r5, r4
 8086166:	bf28      	it	cs
 8086168:	2000      	movcs	r0, #0
 808616a:	e000      	b.n	808616e <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3e>
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 808616c:	4801      	ldr	r0, [pc, #4]	; (8086174 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x44>)
     * signature?". */
    if( sig_len > rsa_len )
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

    return( 0 );
}
 808616e:	b005      	add	sp, #20
 8086170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8086174:	ffffbc80 	.word	0xffffbc80

08086178 <mbedtls_ssl_ciphersuite_from_id>:
    return( NULL );
}

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;
 8086178:	4b05      	ldr	r3, [pc, #20]	; (8086190 <mbedtls_ssl_ciphersuite_from_id+0x18>)

    while( cur->id != 0 )
 808617a:	681a      	ldr	r2, [r3, #0]
 808617c:	b11a      	cbz	r2, 8086186 <mbedtls_ssl_ciphersuite_from_id+0xe>
    {
        if( cur->id == ciphersuite )
 808617e:	4282      	cmp	r2, r0
 8086180:	d003      	beq.n	808618a <mbedtls_ssl_ciphersuite_from_id+0x12>
            return( cur );

        cur++;
 8086182:	3320      	adds	r3, #32

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;

    while( cur->id != 0 )
 8086184:	e7f9      	b.n	808617a <mbedtls_ssl_ciphersuite_from_id+0x2>
            return( cur );

        cur++;
    }

    return( NULL );
 8086186:	4610      	mov	r0, r2
 8086188:	4770      	bx	lr
 808618a:	4618      	mov	r0, r3
}
 808618c:	4770      	bx	lr
 808618e:	bf00      	nop
 8086190:	08093724 	.word	0x08093724

08086194 <mbedtls_ssl_list_ciphersuites>:
                            sizeof( ciphersuite_definitions[0]  )
static int supported_ciphersuites[MAX_CIPHERSUITES];
static int supported_init = 0;

const int *mbedtls_ssl_list_ciphersuites( void )
{
 8086194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /*
     * On initial call filter out all ciphersuites not supported by current
     * build based on presence in the ciphersuite_definitions.
     */
    if( supported_init == 0 )
 8086196:	4b0d      	ldr	r3, [pc, #52]	; (80861cc <mbedtls_ssl_list_ciphersuites+0x38>)
 8086198:	681a      	ldr	r2, [r3, #0]
 808619a:	461c      	mov	r4, r3
 808619c:	b9a2      	cbnz	r2, 80861c8 <mbedtls_ssl_list_ciphersuites+0x34>
 808619e:	490c      	ldr	r1, [pc, #48]	; (80861d0 <mbedtls_ssl_list_ciphersuites+0x3c>)
 80861a0:	4e0c      	ldr	r6, [pc, #48]	; (80861d4 <mbedtls_ssl_list_ciphersuites+0x40>)
    {
        const int *p;
        int *q;

        for( p = ciphersuite_preference, q = supported_ciphersuites;
             *p != 0 && q < supported_ciphersuites + MAX_CIPHERSUITES - 1;
 80861a2:	f101 0718 	add.w	r7, r1, #24
 80861a6:	f856 5f04 	ldr.w	r5, [r6, #4]!
 80861aa:	b14d      	cbz	r5, 80861c0 <mbedtls_ssl_list_ciphersuites+0x2c>
 80861ac:	42b9      	cmp	r1, r7
 80861ae:	d207      	bcs.n	80861c0 <mbedtls_ssl_list_ciphersuites+0x2c>
#if defined(MBEDTLS_REMOVE_ARC4_CIPHERSUITES)
            const mbedtls_ssl_ciphersuite_t *cs_info;
            if( ( cs_info = mbedtls_ssl_ciphersuite_from_id( *p ) ) != NULL &&
                cs_info->cipher != MBEDTLS_CIPHER_ARC4_128 )
#else
            if( mbedtls_ssl_ciphersuite_from_id( *p ) != NULL )
 80861b0:	4628      	mov	r0, r5
 80861b2:	f7ff ffe1 	bl	8086178 <mbedtls_ssl_ciphersuite_from_id>
 80861b6:	2800      	cmp	r0, #0
 80861b8:	d0f5      	beq.n	80861a6 <mbedtls_ssl_list_ciphersuites+0x12>
#endif
                *(q++) = *p;
 80861ba:	600d      	str	r5, [r1, #0]
 80861bc:	3104      	adds	r1, #4
    if( supported_init == 0 )
    {
        const int *p;
        int *q;

        for( p = ciphersuite_preference, q = supported_ciphersuites;
 80861be:	e7f2      	b.n	80861a6 <mbedtls_ssl_list_ciphersuites+0x12>
#else
            if( mbedtls_ssl_ciphersuite_from_id( *p ) != NULL )
#endif
                *(q++) = *p;
        }
        *q = 0;
 80861c0:	2300      	movs	r3, #0
 80861c2:	600b      	str	r3, [r1, #0]

        supported_init = 1;
 80861c4:	2301      	movs	r3, #1
 80861c6:	6023      	str	r3, [r4, #0]
    }

    return( supported_ciphersuites );
}
 80861c8:	4801      	ldr	r0, [pc, #4]	; (80861d0 <mbedtls_ssl_list_ciphersuites+0x3c>)
 80861ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80861cc:	200009d4 	.word	0x200009d4
 80861d0:	200009d8 	.word	0x200009d8
 80861d4:	08093800 	.word	0x08093800

080861d8 <_ZL14x509_parse_intPPhjPi>:
    }
}

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;
 80861d8:	2300      	movs	r3, #0
        cur = cur->next;
    }
}

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
 80861da:	b530      	push	{r4, r5, lr}
    *res = 0;
 80861dc:	6013      	str	r3, [r2, #0]
    for( ; n > 0; --n )
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
 80861de:	250a      	movs	r5, #10

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;

    for( ; n > 0; --n )
 80861e0:	b189      	cbz	r1, 8086206 <_ZL14x509_parse_intPPhjPi+0x2e>
    {
        if( ( **p < '0') || ( **p > '9' ) )
 80861e2:	6803      	ldr	r3, [r0, #0]
 80861e4:	781b      	ldrb	r3, [r3, #0]
 80861e6:	3b30      	subs	r3, #48	; 0x30
 80861e8:	2b09      	cmp	r3, #9
 80861ea:	d80e      	bhi.n	808620a <_ZL14x509_parse_intPPhjPi+0x32>
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
 80861ec:	6813      	ldr	r3, [r2, #0]

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;

    for( ; n > 0; --n )
 80861ee:	3901      	subs	r1, #1
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
 80861f0:	436b      	muls	r3, r5
 80861f2:	6013      	str	r3, [r2, #0]
        *res += ( *(*p)++ - '0' );
 80861f4:	6803      	ldr	r3, [r0, #0]
 80861f6:	1c5c      	adds	r4, r3, #1
 80861f8:	6004      	str	r4, [r0, #0]
 80861fa:	781b      	ldrb	r3, [r3, #0]
 80861fc:	6814      	ldr	r4, [r2, #0]
 80861fe:	3b30      	subs	r3, #48	; 0x30
 8086200:	4423      	add	r3, r4
 8086202:	6013      	str	r3, [r2, #0]

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;

    for( ; n > 0; --n )
 8086204:	e7ec      	b.n	80861e0 <_ZL14x509_parse_intPPhjPi+0x8>

        *res *= 10;
        *res += ( *(*p)++ - '0' );
    }

    return( 0 );
 8086206:	4608      	mov	r0, r1
 8086208:	bd30      	pop	{r4, r5, pc}
    *res = 0;

    for( ; n > 0; --n )
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );
 808620a:	4801      	ldr	r0, [pc, #4]	; (8086210 <_ZL14x509_parse_intPPhjPi+0x38>)
        *res *= 10;
        *res += ( *(*p)++ - '0' );
    }

    return( 0 );
}
 808620c:	bd30      	pop	{r4, r5, pc}
 808620e:	bf00      	nop
 8086210:	ffffdc00 	.word	0xffffdc00

08086214 <mbedtls_x509_get_serial>:
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
 8086214:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( end - *p ) < 1 )
 8086216:	6803      	ldr	r3, [r0, #0]
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
 8086218:	4615      	mov	r5, r2
    int ret;

    if( ( end - *p ) < 1 )
 808621a:	1aca      	subs	r2, r1, r3
 808621c:	2a00      	cmp	r2, #0
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
 808621e:	4604      	mov	r4, r0
    int ret;

    if( ( end - *p ) < 1 )
 8086220:	dd17      	ble.n	8086252 <mbedtls_x509_get_serial+0x3e>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
 8086222:	781a      	ldrb	r2, [r3, #0]
 8086224:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8086228:	2a02      	cmp	r2, #2
 808622a:	d114      	bne.n	8086256 <mbedtls_x509_get_serial+0x42>
        **p !=   MBEDTLS_ASN1_INTEGER )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    serial->tag = *(*p)++;
 808622c:	1c5a      	adds	r2, r3, #1
 808622e:	6002      	str	r2, [r0, #0]
 8086230:	462a      	mov	r2, r5
 8086232:	781b      	ldrb	r3, [r3, #0]
 8086234:	f842 3b04 	str.w	r3, [r2], #4

    if( ( ret = mbedtls_asn1_get_len( p, end, &serial->len ) ) != 0 )
 8086238:	f7fd f862 	bl	8083300 <mbedtls_asn1_get_len>
 808623c:	b110      	cbz	r0, 8086244 <mbedtls_x509_get_serial+0x30>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL + ret );
 808623e:	f5a0 500a 	sub.w	r0, r0, #8832	; 0x2280
 8086242:	bd38      	pop	{r3, r4, r5, pc}

    serial->p = *p;
 8086244:	6823      	ldr	r3, [r4, #0]
 8086246:	60ab      	str	r3, [r5, #8]
    *p += serial->len;
 8086248:	6822      	ldr	r2, [r4, #0]
 808624a:	686b      	ldr	r3, [r5, #4]
 808624c:	4413      	add	r3, r2
 808624e:	6023      	str	r3, [r4, #0]

    return( 0 );
 8086250:	bd38      	pop	{r3, r4, r5, pc}
{
    int ret;

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8086252:	4802      	ldr	r0, [pc, #8]	; (808625c <mbedtls_x509_get_serial+0x48>)
 8086254:	bd38      	pop	{r3, r4, r5, pc}

    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
        **p !=   MBEDTLS_ASN1_INTEGER )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 8086256:	4802      	ldr	r0, [pc, #8]	; (8086260 <mbedtls_x509_get_serial+0x4c>)

    serial->p = *p;
    *p += serial->len;

    return( 0 );
}
 8086258:	bd38      	pop	{r3, r4, r5, pc}
 808625a:	bf00      	nop
 808625c:	ffffdd20 	.word	0xffffdd20
 8086260:	ffffdd1e 	.word	0xffffdd1e

08086264 <mbedtls_x509_get_alg>:
/*
 * Parse an algorithm identifier with (optional) paramaters
 */
int mbedtls_x509_get_alg( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *alg, mbedtls_x509_buf *params )
{
 8086264:	b508      	push	{r3, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, params ) ) != 0 )
 8086266:	f7fd f976 	bl	8083556 <mbedtls_asn1_get_alg>
 808626a:	b108      	cbz	r0, 8086270 <mbedtls_x509_get_alg+0xc>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
 808626c:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300

    return( 0 );
}
 8086270:	bd08      	pop	{r3, pc}
	...

08086274 <mbedtls_x509_get_name>:
 * same set so that they are "merged" together in the functions that consume
 * this list, eg mbedtls_x509_dn_gets().
 */
int mbedtls_x509_get_name( unsigned char **p, const unsigned char *end,
                   mbedtls_x509_name *cur )
{
 8086274:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8086278:	4604      	mov	r4, r0
 808627a:	460f      	mov	r7, r1
 808627c:	4691      	mov	r9, r2
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 808627e:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8086360 <mbedtls_x509_get_name+0xec>
    while( 1 )
    {
        /*
         * parse SET
         */
        if( ( ret = mbedtls_asn1_get_tag( p, end, &set_len,
 8086282:	2331      	movs	r3, #49	; 0x31
 8086284:	466a      	mov	r2, sp
 8086286:	4639      	mov	r1, r7
 8086288:	4620      	mov	r0, r4
 808628a:	f7fd f88b 	bl	80833a4 <mbedtls_asn1_get_tag>
 808628e:	b110      	cbz	r0, 8086296 <mbedtls_x509_get_name+0x22>
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SET ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 8086290:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380
 8086294:	e05a      	b.n	808634c <mbedtls_x509_get_name+0xd8>

        end_set  = *p + set_len;
 8086296:	464d      	mov	r5, r9
 8086298:	6826      	ldr	r6, [r4, #0]
 808629a:	9b00      	ldr	r3, [sp, #0]
 808629c:	441e      	add	r6, r3
    int ret;
    size_t len;
    mbedtls_x509_buf *oid;
    mbedtls_x509_buf *val;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 808629e:	2330      	movs	r3, #48	; 0x30
 80862a0:	aa01      	add	r2, sp, #4
 80862a2:	4631      	mov	r1, r6
 80862a4:	4620      	mov	r0, r4
 80862a6:	f7fd f87d 	bl	80833a4 <mbedtls_asn1_get_tag>
 80862aa:	bb50      	cbnz	r0, 8086302 <mbedtls_x509_get_name+0x8e>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    if( ( end - *p ) < 1 )
 80862ac:	6823      	ldr	r3, [r4, #0]
 80862ae:	1af2      	subs	r2, r6, r3
 80862b0:	2a00      	cmp	r2, #0
 80862b2:	dc01      	bgt.n	80862b8 <mbedtls_x509_get_name+0x44>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80862b4:	4827      	ldr	r0, [pc, #156]	; (8086354 <mbedtls_x509_get_name+0xe0>)
 80862b6:	e049      	b.n	808634c <mbedtls_x509_get_name+0xd8>

    oid = &cur->oid;
    oid->tag = **p;
 80862b8:	462a      	mov	r2, r5
 80862ba:	781b      	ldrb	r3, [r3, #0]

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
 80862bc:	4631      	mov	r1, r6
    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    oid = &cur->oid;
    oid->tag = **p;
 80862be:	f842 3b04 	str.w	r3, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
 80862c2:	4620      	mov	r0, r4
 80862c4:	2306      	movs	r3, #6
 80862c6:	f7fd f86d 	bl	80833a4 <mbedtls_asn1_get_tag>
 80862ca:	b9d0      	cbnz	r0, 8086302 <mbedtls_x509_get_name+0x8e>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    oid->p = *p;
 80862cc:	6823      	ldr	r3, [r4, #0]
    *p += oid->len;
 80862ce:	6869      	ldr	r1, [r5, #4]
    oid->tag = **p;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    oid->p = *p;
 80862d0:	60ab      	str	r3, [r5, #8]
    *p += oid->len;
 80862d2:	6820      	ldr	r0, [r4, #0]
 80862d4:	1843      	adds	r3, r0, r1

    if( ( end - *p ) < 1 )
 80862d6:	1af2      	subs	r2, r6, r3
 80862d8:	2a00      	cmp	r2, #0

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    oid->p = *p;
    *p += oid->len;
 80862da:	6023      	str	r3, [r4, #0]

    if( ( end - *p ) < 1 )
 80862dc:	ddea      	ble.n	80862b4 <mbedtls_x509_get_name+0x40>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
 80862de:	5c42      	ldrb	r2, [r0, r1]
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 80862e0:	2a1e      	cmp	r2, #30
 80862e2:	d81a      	bhi.n	808631a <mbedtls_x509_get_name+0xa6>
 80862e4:	fa28 f202 	lsr.w	r2, r8, r2
 80862e8:	07d2      	lsls	r2, r2, #31
 80862ea:	d516      	bpl.n	808631a <mbedtls_x509_get_name+0xa6>
        **p != MBEDTLS_ASN1_BIT_STRING )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    val = &cur->val;
    val->tag = *(*p)++;
 80862ec:	3301      	adds	r3, #1
 80862ee:	6023      	str	r3, [r4, #0]
 80862f0:	5c43      	ldrb	r3, [r0, r1]

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
 80862f2:	f105 0210 	add.w	r2, r5, #16
        **p != MBEDTLS_ASN1_BIT_STRING )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    val = &cur->val;
    val->tag = *(*p)++;
 80862f6:	60eb      	str	r3, [r5, #12]

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
 80862f8:	4631      	mov	r1, r6
 80862fa:	4620      	mov	r0, r4
 80862fc:	f7fd f800 	bl	8083300 <mbedtls_asn1_get_len>
 8086300:	b118      	cbz	r0, 808630a <mbedtls_x509_get_name+0x96>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 8086302:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380

        end_set  = *p + set_len;

        while( 1 )
        {
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
 8086306:	b150      	cbz	r0, 808631e <mbedtls_x509_get_name+0xaa>
 8086308:	e020      	b.n	808634c <mbedtls_x509_get_name+0xd8>
    val->tag = *(*p)++;

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    val->p = *p;
 808630a:	6823      	ldr	r3, [r4, #0]
 808630c:	616b      	str	r3, [r5, #20]
    *p += val->len;
 808630e:	6822      	ldr	r2, [r4, #0]
 8086310:	692b      	ldr	r3, [r5, #16]
 8086312:	4413      	add	r3, r2
 8086314:	6023      	str	r3, [r4, #0]

    cur->next = NULL;
 8086316:	61a8      	str	r0, [r5, #24]
 8086318:	e001      	b.n	808631e <mbedtls_x509_get_name+0xaa>
    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
        **p != MBEDTLS_ASN1_BIT_STRING )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 808631a:	480f      	ldr	r0, [pc, #60]	; (8086358 <mbedtls_x509_get_name+0xe4>)
 808631c:	e016      	b.n	808634c <mbedtls_x509_get_name+0xd8>
        while( 1 )
        {
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
                return( ret );

            if( *p == end_set )
 808631e:	6823      	ldr	r3, [r4, #0]
 8086320:	429e      	cmp	r6, r3
 8086322:	d008      	beq.n	8086336 <mbedtls_x509_get_name+0xc2>
                break;

            /* Mark this item as being no the only one in a set */
            cur->next_merged = 1;
 8086324:	2001      	movs	r0, #1
 8086326:	7728      	strb	r0, [r5, #28]

            cur->next = (mbedtls_x509_name *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 8086328:	2120      	movs	r1, #32
 808632a:	f00b ffe9 	bl	8092300 <calloc>
 808632e:	61a8      	str	r0, [r5, #24]

            if( cur->next == NULL )
 8086330:	b158      	cbz	r0, 808634a <mbedtls_x509_get_name+0xd6>
 8086332:	4605      	mov	r5, r0
 8086334:	e7b3      	b.n	808629e <mbedtls_x509_get_name+0x2a>
        }

        /*
         * continue until end of SEQUENCE is reached
         */
        if( *p == end )
 8086336:	42b7      	cmp	r7, r6
 8086338:	d008      	beq.n	808634c <mbedtls_x509_get_name+0xd8>
            return( 0 );

        cur->next = (mbedtls_x509_name *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 808633a:	2120      	movs	r1, #32
 808633c:	2001      	movs	r0, #1
 808633e:	f00b ffdf 	bl	8092300 <calloc>
 8086342:	4681      	mov	r9, r0
 8086344:	61a8      	str	r0, [r5, #24]

        if( cur->next == NULL )
 8086346:	2800      	cmp	r0, #0
 8086348:	d19b      	bne.n	8086282 <mbedtls_x509_get_name+0xe>
            cur->next_merged = 1;

            cur->next = (mbedtls_x509_name *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );

            if( cur->next == NULL )
                return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 808634a:	4804      	ldr	r0, [pc, #16]	; (808635c <mbedtls_x509_get_name+0xe8>)
        if( cur->next == NULL )
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );

        cur = cur->next;
    }
}
 808634c:	b003      	add	sp, #12
 808634e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8086352:	bf00      	nop
 8086354:	ffffdc20 	.word	0xffffdc20
 8086358:	ffffdc1e 	.word	0xffffdc1e
 808635c:	ffffd780 	.word	0xffffd780
 8086360:	50581008 	.word	0x50581008

08086364 <mbedtls_x509_get_time>:
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
 8086364:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
 8086366:	6803      	ldr	r3, [r0, #0]
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
 8086368:	4614      	mov	r4, r2
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
 808636a:	1aca      	subs	r2, r1, r3
 808636c:	2a00      	cmp	r2, #0
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
 808636e:	4605      	mov	r5, r0
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
 8086370:	f340 80a1 	ble.w	80864b6 <mbedtls_x509_get_time+0x152>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag = **p;
 8086374:	781a      	ldrb	r2, [r3, #0]

    if( tag == MBEDTLS_ASN1_UTC_TIME )
 8086376:	2a17      	cmp	r2, #23
 8086378:	d004      	beq.n	8086384 <mbedtls_x509_get_time+0x20>
        year_len = 2;
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
 808637a:	2a18      	cmp	r2, #24
 808637c:	f040 809d 	bne.w	80864ba <mbedtls_x509_get_time+0x156>
        year_len = 4;
 8086380:	2704      	movs	r7, #4
 8086382:	e000      	b.n	8086386 <mbedtls_x509_get_time+0x22>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag = **p;

    if( tag == MBEDTLS_ASN1_UTC_TIME )
        year_len = 2;
 8086384:	2702      	movs	r7, #2
        year_len = 4;
    else
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 8086386:	3301      	adds	r3, #1
 8086388:	602b      	str	r3, [r5, #0]
    ret = mbedtls_asn1_get_len( p, end, &len );
 808638a:	aa01      	add	r2, sp, #4
 808638c:	4628      	mov	r0, r5
 808638e:	f7fc ffb7 	bl	8083300 <mbedtls_asn1_get_len>

    if( ret != 0 )
 8086392:	b110      	cbz	r0, 808639a <mbedtls_x509_get_time+0x36>
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
 8086394:	f5a0 5010 	sub.w	r0, r0, #9216	; 0x2400
 8086398:	e092      	b.n	80864c0 <mbedtls_x509_get_time+0x15c>

    return x509_parse_time( p, len, year_len, tm );
 808639a:	9e01      	ldr	r6, [sp, #4]
    int ret;

    /*
     * Minimum length is 10 or 12 depending on yearlen
     */
    if ( len < yearlen + 8 )
 808639c:	f107 0308 	add.w	r3, r7, #8
 80863a0:	429e      	cmp	r6, r3
 80863a2:	f0c0 808c 	bcc.w	80864be <mbedtls_x509_get_time+0x15a>
    len -= yearlen + 8;

    /*
     * Parse year, month, day, hour, minute
     */
    CHECK( x509_parse_int( p, yearlen, &tm->year ) );
 80863a6:	4622      	mov	r2, r4
 80863a8:	4639      	mov	r1, r7
 80863aa:	4628      	mov	r0, r5
 80863ac:	f7ff ff14 	bl	80861d8 <_ZL14x509_parse_intPPhjPi>
 80863b0:	2800      	cmp	r0, #0
 80863b2:	f040 8085 	bne.w	80864c0 <mbedtls_x509_get_time+0x15c>
    if ( 2 == yearlen )
 80863b6:	2f02      	cmp	r7, #2
 80863b8:	d108      	bne.n	80863cc <mbedtls_x509_get_time+0x68>
    {
        if ( tm->year < 50 )
 80863ba:	6823      	ldr	r3, [r4, #0]
 80863bc:	2b31      	cmp	r3, #49	; 0x31
            tm->year += 100;
 80863be:	bfdc      	itt	le
 80863c0:	3364      	addle	r3, #100	; 0x64
 80863c2:	6023      	strle	r3, [r4, #0]

        tm->year += 1900;
 80863c4:	6823      	ldr	r3, [r4, #0]
 80863c6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80863ca:	6023      	str	r3, [r4, #0]
    }

    CHECK( x509_parse_int( p, 2, &tm->mon ) );
 80863cc:	1d22      	adds	r2, r4, #4
 80863ce:	2102      	movs	r1, #2
 80863d0:	4628      	mov	r0, r5
 80863d2:	f7ff ff01 	bl	80861d8 <_ZL14x509_parse_intPPhjPi>
 80863d6:	2800      	cmp	r0, #0
 80863d8:	d172      	bne.n	80864c0 <mbedtls_x509_get_time+0x15c>
    CHECK( x509_parse_int( p, 2, &tm->day ) );
 80863da:	f104 0208 	add.w	r2, r4, #8
 80863de:	2102      	movs	r1, #2
 80863e0:	4628      	mov	r0, r5
 80863e2:	f7ff fef9 	bl	80861d8 <_ZL14x509_parse_intPPhjPi>
 80863e6:	2800      	cmp	r0, #0
 80863e8:	d16a      	bne.n	80864c0 <mbedtls_x509_get_time+0x15c>
    CHECK( x509_parse_int( p, 2, &tm->hour ) );
 80863ea:	f104 020c 	add.w	r2, r4, #12
 80863ee:	2102      	movs	r1, #2
 80863f0:	4628      	mov	r0, r5
 80863f2:	f7ff fef1 	bl	80861d8 <_ZL14x509_parse_intPPhjPi>
 80863f6:	2800      	cmp	r0, #0
 80863f8:	d162      	bne.n	80864c0 <mbedtls_x509_get_time+0x15c>
    CHECK( x509_parse_int( p, 2, &tm->min ) );
 80863fa:	f104 0210 	add.w	r2, r4, #16
 80863fe:	2102      	movs	r1, #2
 8086400:	4628      	mov	r0, r5
 8086402:	f7ff fee9 	bl	80861d8 <_ZL14x509_parse_intPPhjPi>
 8086406:	2800      	cmp	r0, #0
 8086408:	d15a      	bne.n	80864c0 <mbedtls_x509_get_time+0x15c>
    /*
     * Minimum length is 10 or 12 depending on yearlen
     */
    if ( len < yearlen + 8 )
        return ( MBEDTLS_ERR_X509_INVALID_DATE );
    len -= yearlen + 8;
 808640a:	1bf6      	subs	r6, r6, r7
    CHECK( x509_parse_int( p, 2, &tm->min ) );

    /*
     * Parse seconds if present
     */
    if ( len >= 2 )
 808640c:	f1a6 0308 	sub.w	r3, r6, #8
 8086410:	2b01      	cmp	r3, #1
 8086412:	d954      	bls.n	80864be <mbedtls_x509_get_time+0x15a>
    {
        CHECK( x509_parse_int( p, 2, &tm->sec ) );
 8086414:	f104 0214 	add.w	r2, r4, #20
 8086418:	2102      	movs	r1, #2
 808641a:	4628      	mov	r0, r5
 808641c:	f7ff fedc 	bl	80861d8 <_ZL14x509_parse_intPPhjPi>
 8086420:	2800      	cmp	r0, #0
 8086422:	d14d      	bne.n	80864c0 <mbedtls_x509_get_time+0x15c>
        len -= 2;
 8086424:	f1a6 030a 	sub.w	r3, r6, #10
        return ( MBEDTLS_ERR_X509_INVALID_DATE );

    /*
     * Parse trailing 'Z' if present
     */
    if ( 1 == len && 'Z' == **p )
 8086428:	2b01      	cmp	r3, #1
 808642a:	d107      	bne.n	808643c <mbedtls_x509_get_time+0xd8>
 808642c:	682b      	ldr	r3, [r5, #0]
 808642e:	781a      	ldrb	r2, [r3, #0]
 8086430:	2a5a      	cmp	r2, #90	; 0x5a
 8086432:	d144      	bne.n	80864be <mbedtls_x509_get_time+0x15a>
    {
        (*p)++;
 8086434:	3301      	adds	r3, #1
 8086436:	602b      	str	r3, [r5, #0]
        len--;
 8086438:	f1a6 030b 	sub.w	r3, r6, #11
    }

    /*
     * We should have parsed all characters at this point
     */
    if ( 0 != len )
 808643c:	2b00      	cmp	r3, #0
 808643e:	d13e      	bne.n	80864be <mbedtls_x509_get_time+0x15a>
static int x509_date_is_valid(const mbedtls_x509_time *t )
{
    int ret = MBEDTLS_ERR_X509_INVALID_DATE;
    int month_len;

    CHECK_RANGE( 0, 9999, t->year );
 8086440:	f242 720f 	movw	r2, #9999	; 0x270f
 8086444:	6823      	ldr	r3, [r4, #0]
 8086446:	4293      	cmp	r3, r2
 8086448:	d839      	bhi.n	80864be <mbedtls_x509_get_time+0x15a>
    CHECK_RANGE( 0, 23,   t->hour );
 808644a:	68e2      	ldr	r2, [r4, #12]
 808644c:	2a17      	cmp	r2, #23
 808644e:	d836      	bhi.n	80864be <mbedtls_x509_get_time+0x15a>
    CHECK_RANGE( 0, 59,   t->min  );
 8086450:	6922      	ldr	r2, [r4, #16]
 8086452:	2a3b      	cmp	r2, #59	; 0x3b
 8086454:	d833      	bhi.n	80864be <mbedtls_x509_get_time+0x15a>
    CHECK_RANGE( 0, 59,   t->sec  );
 8086456:	6962      	ldr	r2, [r4, #20]
 8086458:	2a3b      	cmp	r2, #59	; 0x3b
 808645a:	d830      	bhi.n	80864be <mbedtls_x509_get_time+0x15a>
 808645c:	6861      	ldr	r1, [r4, #4]
 808645e:	290c      	cmp	r1, #12
 8086460:	d82d      	bhi.n	80864be <mbedtls_x509_get_time+0x15a>
 8086462:	2201      	movs	r2, #1
 8086464:	408a      	lsls	r2, r1
 8086466:	f241 51aa 	movw	r1, #5546	; 0x15aa
 808646a:	4011      	ands	r1, r2
 808646c:	b9b9      	cbnz	r1, 808649e <mbedtls_x509_get_time+0x13a>
 808646e:	f412 6f25 	tst.w	r2, #2640	; 0xa50
 8086472:	d116      	bne.n	80864a2 <mbedtls_x509_get_time+0x13e>
 8086474:	0751      	lsls	r1, r2, #29
 8086476:	d522      	bpl.n	80864be <mbedtls_x509_get_time+0x15a>
            break;
        case 4: case 6: case 9: case 11:
            month_len = 30;
            break;
        case 2:
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
 8086478:	079a      	lsls	r2, r3, #30
 808647a:	d105      	bne.n	8086488 <mbedtls_x509_get_time+0x124>
 808647c:	2164      	movs	r1, #100	; 0x64
 808647e:	fb93 f2f1 	sdiv	r2, r3, r1
 8086482:	fb01 3212 	mls	r2, r1, r2, r3
 8086486:	b972      	cbnz	r2, 80864a6 <mbedtls_x509_get_time+0x142>
 8086488:	f44f 71c8 	mov.w	r1, #400	; 0x190
 808648c:	fb93 f2f1 	sdiv	r2, r3, r1
 8086490:	fb01 3312 	mls	r3, r1, r2, r3
                !( t->year % 400 ) )
                month_len = 29;
            else
                month_len = 28;
 8086494:	2b00      	cmp	r3, #0
 8086496:	bf0c      	ite	eq
 8086498:	231d      	moveq	r3, #29
 808649a:	231c      	movne	r3, #28
 808649c:	e004      	b.n	80864a8 <mbedtls_x509_get_time+0x144>
    CHECK_RANGE( 0, 59,   t->sec  );

    switch( t->mon )
    {
        case 1: case 3: case 5: case 7: case 8: case 10: case 12:
            month_len = 31;
 808649e:	231f      	movs	r3, #31
 80864a0:	e002      	b.n	80864a8 <mbedtls_x509_get_time+0x144>
            break;
        case 4: case 6: case 9: case 11:
            month_len = 30;
 80864a2:	231e      	movs	r3, #30
 80864a4:	e000      	b.n	80864a8 <mbedtls_x509_get_time+0x144>
            break;
        case 2:
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
                !( t->year % 400 ) )
                month_len = 29;
 80864a6:	231d      	movs	r3, #29
                month_len = 28;
            break;
        default:
            return( ret );
    }
    CHECK_RANGE( 1, month_len, t->day );
 80864a8:	68a2      	ldr	r2, [r4, #8]
 80864aa:	2a00      	cmp	r2, #0
 80864ac:	dd07      	ble.n	80864be <mbedtls_x509_get_time+0x15a>
 80864ae:	429a      	cmp	r2, r3
 80864b0:	dc05      	bgt.n	80864be <mbedtls_x509_get_time+0x15a>
    if ( 0 != len )
        return ( MBEDTLS_ERR_X509_INVALID_DATE );

    CHECK( x509_date_is_valid( tm ) );

    return ( 0 );
 80864b2:	2000      	movs	r0, #0
 80864b4:	e004      	b.n	80864c0 <mbedtls_x509_get_time+0x15c>
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80864b6:	4803      	ldr	r0, [pc, #12]	; (80864c4 <mbedtls_x509_get_time+0x160>)
 80864b8:	e002      	b.n	80864c0 <mbedtls_x509_get_time+0x15c>
        year_len = 2;
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
        year_len = 4;
    else
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 80864ba:	4803      	ldr	r0, [pc, #12]	; (80864c8 <mbedtls_x509_get_time+0x164>)
 80864bc:	e000      	b.n	80864c0 <mbedtls_x509_get_time+0x15c>

        tm->year += 1900;
    }

    CHECK( x509_parse_int( p, 2, &tm->mon ) );
    CHECK( x509_parse_int( p, 2, &tm->day ) );
 80864be:	4803      	ldr	r0, [pc, #12]	; (80864cc <mbedtls_x509_get_time+0x168>)

    if( ret != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );

    return x509_parse_time( p, len, year_len, tm );
}
 80864c0:	b003      	add	sp, #12
 80864c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80864c4:	ffffdba0 	.word	0xffffdba0
 80864c8:	ffffdb9e 	.word	0xffffdb9e
 80864cc:	ffffdc00 	.word	0xffffdc00

080864d0 <mbedtls_x509_get_sig>:

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
 80864d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
 80864d2:	6803      	ldr	r3, [r0, #0]

    return x509_parse_time( p, len, year_len, tm );
}

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
 80864d4:	4615      	mov	r5, r2
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
 80864d6:	1aca      	subs	r2, r1, r3
 80864d8:	2a00      	cmp	r2, #0

    return x509_parse_time( p, len, year_len, tm );
}

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
 80864da:	4604      	mov	r4, r0
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
 80864dc:	dd10      	ble.n	8086500 <mbedtls_x509_get_sig+0x30>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag_type = **p;

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 80864de:	aa01      	add	r2, sp, #4

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag_type = **p;
 80864e0:	781e      	ldrb	r6, [r3, #0]

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 80864e2:	f7fc ffe8 	bl	80834b6 <mbedtls_asn1_get_bitstring_null>
 80864e6:	b110      	cbz	r0, 80864ee <mbedtls_x509_get_sig+0x1e>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );
 80864e8:	f5a0 5012 	sub.w	r0, r0, #9344	; 0x2480
 80864ec:	e009      	b.n	8086502 <mbedtls_x509_get_sig+0x32>

    sig->tag = tag_type;
    sig->len = len;
 80864ee:	9b01      	ldr	r3, [sp, #4]
    tag_type = **p;

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );

    sig->tag = tag_type;
 80864f0:	602e      	str	r6, [r5, #0]
    sig->len = len;
 80864f2:	606b      	str	r3, [r5, #4]
    sig->p = *p;
 80864f4:	6822      	ldr	r2, [r4, #0]
 80864f6:	60aa      	str	r2, [r5, #8]

    *p += len;
 80864f8:	6822      	ldr	r2, [r4, #0]
 80864fa:	4413      	add	r3, r2
 80864fc:	6023      	str	r3, [r4, #0]

    return( 0 );
 80864fe:	e000      	b.n	8086502 <mbedtls_x509_get_sig+0x32>
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8086500:	4801      	ldr	r0, [pc, #4]	; (8086508 <mbedtls_x509_get_sig+0x38>)
    sig->p = *p;

    *p += len;

    return( 0 );
}
 8086502:	b002      	add	sp, #8
 8086504:	bd70      	pop	{r4, r5, r6, pc}
 8086506:	bf00      	nop
 8086508:	ffffdb20 	.word	0xffffdb20

0808650c <mbedtls_x509_get_sig_alg>:
 * Get signature algorithm from alg OID and optional parameters
 */
int mbedtls_x509_get_sig_alg( const mbedtls_x509_buf *sig_oid, const mbedtls_x509_buf *sig_params,
                      mbedtls_md_type_t *md_alg, mbedtls_pk_type_t *pk_alg,
                      void **sig_opts )
{
 808650c:	b510      	push	{r4, lr}
 808650e:	460c      	mov	r4, r1
 8086510:	4611      	mov	r1, r2
    int ret;

    if( *sig_opts != NULL )
 8086512:	9a02      	ldr	r2, [sp, #8]
 8086514:	6812      	ldr	r2, [r2, #0]
 8086516:	b982      	cbnz	r2, 808653a <mbedtls_x509_get_sig_alg+0x2e>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    if( ( ret = mbedtls_oid_get_sig_alg( sig_oid, md_alg, pk_alg ) ) != 0 )
 8086518:	461a      	mov	r2, r3
 808651a:	f7fe fbb1 	bl	8084c80 <mbedtls_oid_get_sig_alg>
 808651e:	b110      	cbz	r0, 8086526 <mbedtls_x509_get_sig_alg+0x1a>
        return( MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG + ret );
 8086520:	f5a0 5018 	sub.w	r0, r0, #9728	; 0x2600
 8086524:	bd10      	pop	{r4, pc}
    }
    else
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */
    {
        /* Make sure parameters are absent or NULL */
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
 8086526:	6823      	ldr	r3, [r4, #0]
 8086528:	2b05      	cmp	r3, #5
 808652a:	d000      	beq.n	808652e <mbedtls_x509_get_sig_alg+0x22>
 808652c:	b93b      	cbnz	r3, 808653e <mbedtls_x509_get_sig_alg+0x32>
 808652e:	6863      	ldr	r3, [r4, #4]
              sig_params->len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG );
    }

    return( 0 );
 8086530:	4804      	ldr	r0, [pc, #16]	; (8086544 <mbedtls_x509_get_sig_alg+0x38>)
 8086532:	2b00      	cmp	r3, #0
 8086534:	bf08      	it	eq
 8086536:	2000      	moveq	r0, #0
 8086538:	bd10      	pop	{r4, pc}
                      void **sig_opts )
{
    int ret;

    if( *sig_opts != NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 808653a:	4803      	ldr	r0, [pc, #12]	; (8086548 <mbedtls_x509_get_sig_alg+0x3c>)
 808653c:	bd10      	pop	{r4, pc}
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */
    {
        /* Make sure parameters are absent or NULL */
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
              sig_params->len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG );
 808653e:	4801      	ldr	r0, [pc, #4]	; (8086544 <mbedtls_x509_get_sig_alg+0x38>)
    }

    return( 0 );
}
 8086540:	bd10      	pop	{r4, pc}
 8086542:	bf00      	nop
 8086544:	ffffdd00 	.word	0xffffdd00
 8086548:	ffffd800 	.word	0xffffd800

0808654c <mbedtls_x509_get_ext>:
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *ext, int tag )
{
 808654c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 808654e:	4616      	mov	r6, r2
    int ret;
    size_t len;

    if( *p == end )
 8086550:	6802      	ldr	r2, [r0, #0]
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *ext, int tag )
{
 8086552:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( *p == end )
 8086554:	428a      	cmp	r2, r1
 8086556:	d01c      	beq.n	8086592 <mbedtls_x509_get_ext+0x46>
        return( 0 );

    ext->tag = **p;
 8086558:	7815      	ldrb	r5, [r2, #0]
 808655a:	4632      	mov	r2, r6

    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 808655c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    size_t len;

    if( *p == end )
        return( 0 );

    ext->tag = **p;
 8086560:	f842 5b04 	str.w	r5, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 8086564:	f7fc ff1e 	bl	80833a4 <mbedtls_asn1_get_tag>
 8086568:	b9b0      	cbnz	r0, 8086598 <mbedtls_x509_get_ext+0x4c>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag ) ) != 0 )
        return( ret );

    ext->p = *p;
 808656a:	6823      	ldr	r3, [r4, #0]
     * Extension  ::=  SEQUENCE  {
     *      extnID      OBJECT IDENTIFIER,
     *      critical    BOOLEAN DEFAULT FALSE,
     *      extnValue   OCTET STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 808656c:	aa01      	add	r2, sp, #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag ) ) != 0 )
        return( ret );

    ext->p = *p;
 808656e:	60b3      	str	r3, [r6, #8]
    end = *p + ext->len;
 8086570:	6825      	ldr	r5, [r4, #0]
 8086572:	6873      	ldr	r3, [r6, #4]
     * Extension  ::=  SEQUENCE  {
     *      extnID      OBJECT IDENTIFIER,
     *      critical    BOOLEAN DEFAULT FALSE,
     *      extnValue   OCTET STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8086574:	4620      	mov	r0, r4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag ) ) != 0 )
        return( ret );

    ext->p = *p;
    end = *p + ext->len;
 8086576:	441d      	add	r5, r3
     * Extension  ::=  SEQUENCE  {
     *      extnID      OBJECT IDENTIFIER,
     *      critical    BOOLEAN DEFAULT FALSE,
     *      extnValue   OCTET STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8086578:	4629      	mov	r1, r5
 808657a:	2330      	movs	r3, #48	; 0x30
 808657c:	f7fc ff12 	bl	80833a4 <mbedtls_asn1_get_tag>
 8086580:	b110      	cbz	r0, 8086588 <mbedtls_x509_get_ext+0x3c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 8086582:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
 8086586:	e007      	b.n	8086598 <mbedtls_x509_get_ext+0x4c>

    if( end != *p + len )
 8086588:	6822      	ldr	r2, [r4, #0]
 808658a:	9b01      	ldr	r3, [sp, #4]
 808658c:	4413      	add	r3, r2
 808658e:	429d      	cmp	r5, r3
 8086590:	d101      	bne.n	8086596 <mbedtls_x509_get_ext+0x4a>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 8086592:	2000      	movs	r0, #0
 8086594:	e000      	b.n	8086598 <mbedtls_x509_get_ext+0x4c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( end != *p + len )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8086596:	4801      	ldr	r0, [pc, #4]	; (808659c <mbedtls_x509_get_ext+0x50>)

    return( 0 );
}
 8086598:	b002      	add	sp, #8
 808659a:	bd70      	pop	{r4, r5, r6, pc}
 808659c:	ffffda9a 	.word	0xffffda9a

080865a0 <mbedtls_x509_dn_gets>:
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
 80865a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80865a4:	460f      	mov	r7, r1
 80865a6:	4691      	mov	r9, r2

    memset( s, 0, sizeof( s ) );

    name = dn;
    p = buf;
    n = size;
 80865a8:	463d      	mov	r5, r7
    const char *short_name = NULL;
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );

    name = dn;
 80865aa:	464e      	mov	r6, r9
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
 80865ac:	b0c2      	sub	sp, #264	; 0x108
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
 80865ae:	f04f 0a00 	mov.w	sl, #0
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
 80865b2:	f10d 0808 	add.w	r8, sp, #8
 80865b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80865ba:	4651      	mov	r1, sl
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
 80865bc:	4604      	mov	r4, r0
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
 80865be:	4640      	mov	r0, r8
{
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
 80865c0:	f8cd a004 	str.w	sl, [sp, #4]
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
 80865c4:	f00b fee7 	bl	8092396 <memset>
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
 80865c8:	4652      	mov	r2, sl
            if( i >= sizeof( s ) - 1 )
                break;

            c = name->val.p[i];
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
                 s[i] = '?';
 80865ca:	f04f 0a3f 	mov.w	sl, #63	; 0x3f

    name = dn;
    p = buf;
    n = size;

    while( name != NULL )
 80865ce:	2e00      	cmp	r6, #0
 80865d0:	d057      	beq.n	8086682 <mbedtls_x509_dn_gets+0xe2>
    {
        if( !name->oid.p )
 80865d2:	68b3      	ldr	r3, [r6, #8]
 80865d4:	2b00      	cmp	r3, #0
 80865d6:	d052      	beq.n	808667e <mbedtls_x509_dn_gets+0xde>
        {
            name = name->next;
            continue;
        }

        if( name != dn )
 80865d8:	454e      	cmp	r6, r9
 80865da:	d011      	beq.n	8086600 <mbedtls_x509_dn_gets+0x60>
        {
            ret = mbedtls_snprintf( p, n, merge ? " + " : ", " );
 80865dc:	4b2b      	ldr	r3, [pc, #172]	; (808668c <mbedtls_x509_dn_gets+0xec>)
 80865de:	492c      	ldr	r1, [pc, #176]	; (8086690 <mbedtls_x509_dn_gets+0xf0>)
 80865e0:	4620      	mov	r0, r4
 80865e2:	2a00      	cmp	r2, #0
 80865e4:	bf14      	ite	ne
 80865e6:	460a      	movne	r2, r1
 80865e8:	461a      	moveq	r2, r3
 80865ea:	4629      	mov	r1, r5
 80865ec:	f00a f95c 	bl	80908a8 <snprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
 80865f0:	2800      	cmp	r0, #0
 80865f2:	da01      	bge.n	80865f8 <mbedtls_x509_dn_gets+0x58>
 80865f4:	4827      	ldr	r0, [pc, #156]	; (8086694 <mbedtls_x509_dn_gets+0xf4>)
 80865f6:	e045      	b.n	8086684 <mbedtls_x509_dn_gets+0xe4>
 80865f8:	4285      	cmp	r5, r0
 80865fa:	d9fb      	bls.n	80865f4 <mbedtls_x509_dn_gets+0x54>
 80865fc:	1a2d      	subs	r5, r5, r0
 80865fe:	4404      	add	r4, r0
        }

        ret = mbedtls_oid_get_attr_short_name( &name->oid, &short_name );
 8086600:	a901      	add	r1, sp, #4
 8086602:	4630      	mov	r0, r6
 8086604:	f7fe fae2 	bl	8084bcc <mbedtls_oid_get_attr_short_name>

        if( ret == 0 )
 8086608:	b930      	cbnz	r0, 8086618 <mbedtls_x509_dn_gets+0x78>
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
 808660a:	9b01      	ldr	r3, [sp, #4]
 808660c:	4a22      	ldr	r2, [pc, #136]	; (8086698 <mbedtls_x509_dn_gets+0xf8>)
 808660e:	4629      	mov	r1, r5
 8086610:	4620      	mov	r0, r4
 8086612:	f00a f949 	bl	80908a8 <snprintf>
 8086616:	e004      	b.n	8086622 <mbedtls_x509_dn_gets+0x82>
        else
            ret = mbedtls_snprintf( p, n, "\?\?=" );
 8086618:	4a20      	ldr	r2, [pc, #128]	; (808669c <mbedtls_x509_dn_gets+0xfc>)
 808661a:	4629      	mov	r1, r5
 808661c:	4620      	mov	r0, r4
 808661e:	f00a f943 	bl	80908a8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8086622:	2800      	cmp	r0, #0
 8086624:	dbe6      	blt.n	80865f4 <mbedtls_x509_dn_gets+0x54>
 8086626:	4285      	cmp	r5, r0
 8086628:	d9e4      	bls.n	80865f4 <mbedtls_x509_dn_gets+0x54>
 808662a:	1a2d      	subs	r5, r5, r0
 808662c:	4404      	add	r4, r0

        for( i = 0; i < name->val.len; i++ )
 808662e:	2300      	movs	r3, #0
 8086630:	6932      	ldr	r2, [r6, #16]
 8086632:	4293      	cmp	r3, r2
 8086634:	d213      	bcs.n	808665e <mbedtls_x509_dn_gets+0xbe>
        {
            if( i >= sizeof( s ) - 1 )
 8086636:	2bff      	cmp	r3, #255	; 0xff
 8086638:	d011      	beq.n	808665e <mbedtls_x509_dn_gets+0xbe>
                break;

            c = name->val.p[i];
 808663a:	6972      	ldr	r2, [r6, #20]
 808663c:	5cd2      	ldrb	r2, [r2, r3]
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
 808663e:	2a1f      	cmp	r2, #31
 8086640:	d906      	bls.n	8086650 <mbedtls_x509_dn_gets+0xb0>
 8086642:	2a7f      	cmp	r2, #127	; 0x7f
 8086644:	d004      	beq.n	8086650 <mbedtls_x509_dn_gets+0xb0>
 8086646:	f102 017f 	add.w	r1, r2, #127	; 0x7f
 808664a:	b2c9      	uxtb	r1, r1
 808664c:	291e      	cmp	r1, #30
 808664e:	d802      	bhi.n	8086656 <mbedtls_x509_dn_gets+0xb6>
                 s[i] = '?';
 8086650:	f808 a003 	strb.w	sl, [r8, r3]
 8086654:	e001      	b.n	808665a <mbedtls_x509_dn_gets+0xba>
            else s[i] = c;
 8086656:	f808 2003 	strb.w	r2, [r8, r3]
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
        else
            ret = mbedtls_snprintf( p, n, "\?\?=" );
        MBEDTLS_X509_SAFE_SNPRINTF;

        for( i = 0; i < name->val.len; i++ )
 808665a:	3301      	adds	r3, #1
 808665c:	e7e8      	b.n	8086630 <mbedtls_x509_dn_gets+0x90>
            c = name->val.p[i];
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
                 s[i] = '?';
            else s[i] = c;
        }
        s[i] = '\0';
 808665e:	2200      	movs	r2, #0
 8086660:	f808 2003 	strb.w	r2, [r8, r3]
        ret = mbedtls_snprintf( p, n, "%s", s );
 8086664:	4629      	mov	r1, r5
 8086666:	4643      	mov	r3, r8
 8086668:	4a0d      	ldr	r2, [pc, #52]	; (80866a0 <mbedtls_x509_dn_gets+0x100>)
 808666a:	4620      	mov	r0, r4
 808666c:	f00a f91c 	bl	80908a8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8086670:	2800      	cmp	r0, #0
 8086672:	dbbf      	blt.n	80865f4 <mbedtls_x509_dn_gets+0x54>
 8086674:	4285      	cmp	r5, r0
 8086676:	d9bd      	bls.n	80865f4 <mbedtls_x509_dn_gets+0x54>

        merge = name->next_merged;
 8086678:	7f32      	ldrb	r2, [r6, #28]
                 s[i] = '?';
            else s[i] = c;
        }
        s[i] = '\0';
        ret = mbedtls_snprintf( p, n, "%s", s );
        MBEDTLS_X509_SAFE_SNPRINTF;
 808667a:	1a2d      	subs	r5, r5, r0
 808667c:	4404      	add	r4, r0

        merge = name->next_merged;
        name = name->next;
 808667e:	69b6      	ldr	r6, [r6, #24]
 8086680:	e7a5      	b.n	80865ce <mbedtls_x509_dn_gets+0x2e>
    }

    return( (int) ( size - n ) );
 8086682:	1b78      	subs	r0, r7, r5
}
 8086684:	b042      	add	sp, #264	; 0x108
 8086686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808668a:	bf00      	nop
 808668c:	08093a94 	.word	0x08093a94
 8086690:	08093a90 	.word	0x08093a90
 8086694:	ffffd680 	.word	0xffffd680
 8086698:	08093a97 	.word	0x08093a97
 808669c:	08093a9b 	.word	0x08093a9b
 80866a0:	08093ece 	.word	0x08093ece

080866a4 <mbedtls_x509_serial_gets>:
/*
 * Store the serial in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_serial_gets( char *buf, size_t size, const mbedtls_x509_buf *serial )
{
 80866a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80866a8:	4680      	mov	r8, r0
 80866aa:	460f      	mov	r7, r1
 80866ac:	4691      	mov	r9, r2
    int ret;
    size_t i, n, nr;
    char *p;

    p = buf;
    n = size;
 80866ae:	460c      	mov	r4, r1

    nr = ( serial->len <= 32 )
 80866b0:	6856      	ldr	r6, [r2, #4]
    for( i = 0; i < nr; i++ )
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
 80866b2:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8086730 <mbedtls_x509_serial_gets+0x8c>

    p = buf;
    n = size;

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;
 80866b6:	2e21      	cmp	r6, #33	; 0x21
    for( i = 0; i < nr; i++ )
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
 80866b8:	f8df b078 	ldr.w	fp, [pc, #120]	; 8086734 <mbedtls_x509_serial_gets+0x90>

    p = buf;
    n = size;

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;
 80866bc:	bf28      	it	cs
 80866be:	261c      	movcs	r6, #28

    for( i = 0; i < nr; i++ )
 80866c0:	2500      	movs	r5, #0
 80866c2:	42b5      	cmp	r5, r6
 80866c4:	d01c      	beq.n	8086700 <mbedtls_x509_serial_gets+0x5c>
 80866c6:	f8d9 3008 	ldr.w	r3, [r9, #8]
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
 80866ca:	b91d      	cbnz	r5, 80866d4 <mbedtls_x509_serial_gets+0x30>
 80866cc:	2e01      	cmp	r6, #1
 80866ce:	d001      	beq.n	80866d4 <mbedtls_x509_serial_gets+0x30>
 80866d0:	781a      	ldrb	r2, [r3, #0]
 80866d2:	b19a      	cbz	r2, 80866fc <mbedtls_x509_serial_gets+0x58>
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
 80866d4:	1e72      	subs	r2, r6, #1
 80866d6:	4295      	cmp	r5, r2
 80866d8:	bf34      	ite	cc
 80866da:	4652      	movcc	r2, sl
 80866dc:	465a      	movcs	r2, fp
 80866de:	5d5b      	ldrb	r3, [r3, r5]
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
 80866e0:	4621      	mov	r1, r4
 80866e2:	9200      	str	r2, [sp, #0]
 80866e4:	4640      	mov	r0, r8
 80866e6:	4a0f      	ldr	r2, [pc, #60]	; (8086724 <mbedtls_x509_serial_gets+0x80>)
 80866e8:	f00a f8de 	bl	80908a8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80866ec:	2800      	cmp	r0, #0
 80866ee:	da01      	bge.n	80866f4 <mbedtls_x509_serial_gets+0x50>
 80866f0:	480d      	ldr	r0, [pc, #52]	; (8086728 <mbedtls_x509_serial_gets+0x84>)
 80866f2:	e014      	b.n	808671e <mbedtls_x509_serial_gets+0x7a>
 80866f4:	4284      	cmp	r4, r0
 80866f6:	d9fb      	bls.n	80866f0 <mbedtls_x509_serial_gets+0x4c>
 80866f8:	1a24      	subs	r4, r4, r0
 80866fa:	4480      	add	r8, r0
    n = size;

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;

    for( i = 0; i < nr; i++ )
 80866fc:	3501      	adds	r5, #1
 80866fe:	e7e0      	b.n	80866c2 <mbedtls_x509_serial_gets+0x1e>
        ret = mbedtls_snprintf( p, n, "%02X%s",
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
        MBEDTLS_X509_SAFE_SNPRINTF;
    }

    if( nr != serial->len )
 8086700:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8086704:	429d      	cmp	r5, r3
 8086706:	d009      	beq.n	808671c <mbedtls_x509_serial_gets+0x78>
    {
        ret = mbedtls_snprintf( p, n, "...." );
 8086708:	4a08      	ldr	r2, [pc, #32]	; (808672c <mbedtls_x509_serial_gets+0x88>)
 808670a:	4621      	mov	r1, r4
 808670c:	4640      	mov	r0, r8
 808670e:	f00a f8cb 	bl	80908a8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8086712:	2800      	cmp	r0, #0
 8086714:	dbec      	blt.n	80866f0 <mbedtls_x509_serial_gets+0x4c>
 8086716:	4284      	cmp	r4, r0
 8086718:	d9ea      	bls.n	80866f0 <mbedtls_x509_serial_gets+0x4c>
 808671a:	1a24      	subs	r4, r4, r0
    }

    return( (int) ( size - n ) );
 808671c:	1b38      	subs	r0, r7, r4
}
 808671e:	b003      	add	sp, #12
 8086720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8086724:	08093aa1 	.word	0x08093aa1
 8086728:	ffffd680 	.word	0xffffd680
 808672c:	08093aa8 	.word	0x08093aa8
 8086730:	08093a9f 	.word	0x08093a9f
 8086734:	08092be8 	.word	0x08092be8

08086738 <mbedtls_x509_sig_alg_gets>:
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
 8086738:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;
 808673a:	2300      	movs	r3, #0
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
 808673c:	460c      	mov	r4, r1
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;
 808673e:	a902      	add	r1, sp, #8
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
 8086740:	4605      	mov	r5, r0
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;
 8086742:	f841 3d04 	str.w	r3, [r1, #-4]!

    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
 8086746:	4610      	mov	r0, r2
 8086748:	f7fe fa8e 	bl	8084c68 <mbedtls_oid_get_sig_alg_desc>
    if( ret != 0 )
 808674c:	b128      	cbz	r0, 808675a <mbedtls_x509_sig_alg_gets+0x22>
        ret = mbedtls_snprintf( p, n, "???"  );
 808674e:	4a0b      	ldr	r2, [pc, #44]	; (808677c <mbedtls_x509_sig_alg_gets+0x44>)
 8086750:	4621      	mov	r1, r4
 8086752:	4628      	mov	r0, r5
 8086754:	f00a f8a8 	bl	80908a8 <snprintf>
 8086758:	e005      	b.n	8086766 <mbedtls_x509_sig_alg_gets+0x2e>
    else
        ret = mbedtls_snprintf( p, n, "%s", desc );
 808675a:	9b01      	ldr	r3, [sp, #4]
 808675c:	4a08      	ldr	r2, [pc, #32]	; (8086780 <mbedtls_x509_sig_alg_gets+0x48>)
 808675e:	4621      	mov	r1, r4
 8086760:	4628      	mov	r0, r5
 8086762:	f00a f8a1 	bl	80908a8 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8086766:	2800      	cmp	r0, #0
 8086768:	db04      	blt.n	8086774 <mbedtls_x509_sig_alg_gets+0x3c>
 808676a:	4b06      	ldr	r3, [pc, #24]	; (8086784 <mbedtls_x509_sig_alg_gets+0x4c>)
 808676c:	4284      	cmp	r4, r0
 808676e:	bf98      	it	ls
 8086770:	4618      	movls	r0, r3
 8086772:	e000      	b.n	8086776 <mbedtls_x509_sig_alg_gets+0x3e>
 8086774:	4803      	ldr	r0, [pc, #12]	; (8086784 <mbedtls_x509_sig_alg_gets+0x4c>)
    ((void) md_alg);
    ((void) sig_opts);
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */

    return( (int)( size - n ) );
}
 8086776:	b003      	add	sp, #12
 8086778:	bd30      	pop	{r4, r5, pc}
 808677a:	bf00      	nop
 808677c:	08093aad 	.word	0x08093aad
 8086780:	08093ece 	.word	0x08093ece
 8086784:	ffffd680 	.word	0xffffd680

08086788 <mbedtls_x509_key_size_helper>:

/*
 * Helper for writing "RSA key size", "EC key size", etc
 */
int mbedtls_x509_key_size_helper( char *buf, size_t buf_size, const char *name )
{
 8086788:	b510      	push	{r4, lr}
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
 808678a:	4613      	mov	r3, r2
 808678c:	4a06      	ldr	r2, [pc, #24]	; (80867a8 <mbedtls_x509_key_size_helper+0x20>)

/*
 * Helper for writing "RSA key size", "EC key size", etc
 */
int mbedtls_x509_key_size_helper( char *buf, size_t buf_size, const char *name )
{
 808678e:	460c      	mov	r4, r1
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
 8086790:	f00a f88a 	bl	80908a8 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8086794:	2800      	cmp	r0, #0
 8086796:	db05      	blt.n	80867a4 <mbedtls_x509_key_size_helper+0x1c>

    return( 0 );
 8086798:	4b04      	ldr	r3, [pc, #16]	; (80867ac <mbedtls_x509_key_size_helper+0x24>)
 808679a:	4284      	cmp	r4, r0
 808679c:	bf94      	ite	ls
 808679e:	4618      	movls	r0, r3
 80867a0:	2000      	movhi	r0, #0
 80867a2:	bd10      	pop	{r4, pc}
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
    MBEDTLS_X509_SAFE_SNPRINTF;
 80867a4:	4801      	ldr	r0, [pc, #4]	; (80867ac <mbedtls_x509_key_size_helper+0x24>)

    return( 0 );
}
 80867a6:	bd10      	pop	{r4, pc}
 80867a8:	08093ab1 	.word	0x08093ab1
 80867ac:	ffffd680 	.word	0xffffd680

080867b0 <mbedtls_x509_time_is_past>:
 80867b0:	2000      	movs	r0, #0
 80867b2:	4770      	bx	lr

080867b4 <mbedtls_x509_time_is_future>:

int mbedtls_x509_time_is_future( const mbedtls_x509_time *from )
{
    ((void) from);
    return( 0 );
}
 80867b4:	2000      	movs	r0, #0
 80867b6:	4770      	bx	lr

080867b8 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>:
 * Parse a PKCS#1 encoded private RSA key
 */
static int pk_parse_key_pkcs1_der( mbedtls_rsa_context *rsa,
                                   const unsigned char *key,
                                   size_t keylen )
{
 80867b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80867ba:	460c      	mov	r4, r1
 80867bc:	4615      	mov	r5, r2
 80867be:	b08f      	sub	sp, #60	; 0x3c
 80867c0:	4607      	mov	r7, r0
    int ret, version;
    size_t len;
    unsigned char *p, *end;

    mbedtls_mpi T;
    mbedtls_mpi_init( &T );
 80867c2:	a80b      	add	r0, sp, #44	; 0x2c
 80867c4:	f004 fc14 	bl	808aff0 <mbedtls_mpi_init>
     *      exponent2         INTEGER,  -- d mod (q-1)
     *      coefficient       INTEGER,  -- (inverse of q) mod p
     *      otherPrimeInfos   OtherPrimeInfos OPTIONAL
     *  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80867c8:	2330      	movs	r3, #48	; 0x30
 80867ca:	aa09      	add	r2, sp, #36	; 0x24
 80867cc:	1961      	adds	r1, r4, r5
 80867ce:	a80a      	add	r0, sp, #40	; 0x28
    unsigned char *p, *end;

    mbedtls_mpi T;
    mbedtls_mpi_init( &T );

    p = (unsigned char *) key;
 80867d0:	940a      	str	r4, [sp, #40]	; 0x28
     *      exponent2         INTEGER,  -- d mod (q-1)
     *      coefficient       INTEGER,  -- (inverse of q) mod p
     *      otherPrimeInfos   OtherPrimeInfos OPTIONAL
     *  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80867d2:	f7fc fde7 	bl	80833a4 <mbedtls_asn1_get_tag>
 80867d6:	b940      	cbnz	r0, 80867ea <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x32>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 80867d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80867da:	9e0a      	ldr	r6, [sp, #40]	; 0x28

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 80867dc:	aa08      	add	r2, sp, #32
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 80867de:	441e      	add	r6, r3

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 80867e0:	4631      	mov	r1, r6
 80867e2:	a80a      	add	r0, sp, #40	; 0x28
 80867e4:	f7fc fe0b 	bl	80833fe <mbedtls_asn1_get_int>
 80867e8:	b110      	cbz	r0, 80867f0 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x38>
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 80867ea:	f5a0 5574 	sub.w	r5, r0, #15616	; 0x3d00
 80867ee:	e0d4      	b.n	808699a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
    }

    if( version != 0 )
 80867f0:	9d08      	ldr	r5, [sp, #32]
 80867f2:	b9dd      	cbnz	r5, 808682c <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x74>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
    }

    /* Import N */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 80867f4:	2302      	movs	r3, #2
 80867f6:	aa09      	add	r2, sp, #36	; 0x24
 80867f8:	4631      	mov	r1, r6
 80867fa:	a80a      	add	r0, sp, #40	; 0x28
 80867fc:	f7fc fdd2 	bl	80833a4 <mbedtls_asn1_get_tag>
 8086800:	4604      	mov	r4, r0
 8086802:	2800      	cmp	r0, #0
 8086804:	f040 80c5 	bne.w	8086992 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 8086808:	9006      	str	r0, [sp, #24]
 808680a:	9005      	str	r0, [sp, #20]
 808680c:	9004      	str	r0, [sp, #16]
 808680e:	9003      	str	r0, [sp, #12]
 8086810:	9002      	str	r0, [sp, #8]
 8086812:	9001      	str	r0, [sp, #4]
 8086814:	9000      	str	r0, [sp, #0]
 8086816:	4603      	mov	r3, r0
 8086818:	9a09      	ldr	r2, [sp, #36]	; 0x24
 808681a:	990a      	ldr	r1, [sp, #40]	; 0x28
 808681c:	4638      	mov	r0, r7
 808681e:	f7fd f8af 	bl	8083980 <mbedtls_rsa_import_raw>
 8086822:	4604      	mov	r4, r0
 8086824:	2800      	cmp	r0, #0
 8086826:	f040 80b4 	bne.w	8086992 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 808682a:	e001      	b.n	8086830 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x78>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    if( version != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
 808682c:	4d5c      	ldr	r5, [pc, #368]	; (80869a0 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e8>)
 808682e:	e0b4      	b.n	808699a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, p, len, NULL, 0, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 8086830:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8086832:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 8086834:	4631      	mov	r1, r6
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, p, len, NULL, 0, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 8086836:	4413      	add	r3, r2
 8086838:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 808683a:	aa09      	add	r2, sp, #36	; 0x24
 808683c:	2302      	movs	r3, #2
 808683e:	a80a      	add	r0, sp, #40	; 0x28
 8086840:	f7fc fdb0 	bl	80833a4 <mbedtls_asn1_get_tag>
 8086844:	4604      	mov	r4, r0
 8086846:	2800      	cmp	r0, #0
 8086848:	f040 80a3 	bne.w	8086992 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 808684c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808684e:	9404      	str	r4, [sp, #16]
 8086850:	9306      	str	r3, [sp, #24]
 8086852:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8086854:	9403      	str	r4, [sp, #12]
 8086856:	9305      	str	r3, [sp, #20]
 8086858:	9402      	str	r4, [sp, #8]
 808685a:	9401      	str	r4, [sp, #4]
 808685c:	9400      	str	r4, [sp, #0]
 808685e:	4623      	mov	r3, r4
 8086860:	4622      	mov	r2, r4
 8086862:	4621      	mov	r1, r4
 8086864:	4638      	mov	r0, r7
 8086866:	f7fd f88b 	bl	8083980 <mbedtls_rsa_import_raw>
 808686a:	4604      	mov	r4, r0
 808686c:	2800      	cmp	r0, #0
 808686e:	f040 8090 	bne.w	8086992 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        NULL, 0, p, len ) ) != 0 )
        goto cleanup;
    p += len;
 8086872:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8086874:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Import D */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 8086876:	4631      	mov	r1, r6
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        NULL, 0, p, len ) ) != 0 )
        goto cleanup;
    p += len;
 8086878:	4413      	add	r3, r2
 808687a:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import D */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 808687c:	aa09      	add	r2, sp, #36	; 0x24
 808687e:	2302      	movs	r3, #2
 8086880:	a80a      	add	r0, sp, #40	; 0x28
 8086882:	f7fc fd8f 	bl	80833a4 <mbedtls_asn1_get_tag>
 8086886:	4604      	mov	r4, r0
 8086888:	2800      	cmp	r0, #0
 808688a:	f040 8082 	bne.w	8086992 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 808688e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8086890:	9406      	str	r4, [sp, #24]
 8086892:	9304      	str	r3, [sp, #16]
 8086894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8086896:	9405      	str	r4, [sp, #20]
 8086898:	9303      	str	r3, [sp, #12]
 808689a:	9402      	str	r4, [sp, #8]
 808689c:	9401      	str	r4, [sp, #4]
 808689e:	9400      	str	r4, [sp, #0]
 80868a0:	4623      	mov	r3, r4
 80868a2:	4622      	mov	r2, r4
 80868a4:	4621      	mov	r1, r4
 80868a6:	4638      	mov	r0, r7
 80868a8:	f7fd f86a 	bl	8083980 <mbedtls_rsa_import_raw>
 80868ac:	4604      	mov	r4, r0
 80868ae:	2800      	cmp	r0, #0
 80868b0:	d16f      	bne.n	8086992 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        p, len, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 80868b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80868b4:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Import P */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 80868b6:	4631      	mov	r1, r6
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        p, len, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 80868b8:	4413      	add	r3, r2
 80868ba:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import P */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 80868bc:	aa09      	add	r2, sp, #36	; 0x24
 80868be:	2302      	movs	r3, #2
 80868c0:	a80a      	add	r0, sp, #40	; 0x28
 80868c2:	f7fc fd6f 	bl	80833a4 <mbedtls_asn1_get_tag>
 80868c6:	4604      	mov	r4, r0
 80868c8:	2800      	cmp	r0, #0
 80868ca:	d162      	bne.n	8086992 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 80868cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80868ce:	2200      	movs	r2, #0
 80868d0:	9300      	str	r3, [sp, #0]
 80868d2:	9206      	str	r2, [sp, #24]
 80868d4:	9205      	str	r2, [sp, #20]
 80868d6:	9204      	str	r2, [sp, #16]
 80868d8:	9203      	str	r2, [sp, #12]
 80868da:	9202      	str	r2, [sp, #8]
 80868dc:	9201      	str	r2, [sp, #4]
 80868de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80868e0:	4611      	mov	r1, r2
 80868e2:	4638      	mov	r0, r7
 80868e4:	f7fd f84c 	bl	8083980 <mbedtls_rsa_import_raw>
 80868e8:	4604      	mov	r4, r0
 80868ea:	2800      	cmp	r0, #0
 80868ec:	d151      	bne.n	8086992 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, p, len, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 80868ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80868f0:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Import Q */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 80868f2:	4631      	mov	r1, r6
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, p, len, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 80868f4:	4413      	add	r3, r2
 80868f6:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import Q */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 80868f8:	aa09      	add	r2, sp, #36	; 0x24
 80868fa:	2302      	movs	r3, #2
 80868fc:	a80a      	add	r0, sp, #40	; 0x28
 80868fe:	f7fc fd51 	bl	80833a4 <mbedtls_asn1_get_tag>
 8086902:	4604      	mov	r4, r0
 8086904:	2800      	cmp	r0, #0
 8086906:	d144      	bne.n	8086992 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 8086908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808690a:	9406      	str	r4, [sp, #24]
 808690c:	9302      	str	r3, [sp, #8]
 808690e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8086910:	9405      	str	r4, [sp, #20]
 8086912:	9404      	str	r4, [sp, #16]
 8086914:	9403      	str	r4, [sp, #12]
 8086916:	9301      	str	r3, [sp, #4]
 8086918:	9400      	str	r4, [sp, #0]
 808691a:	4623      	mov	r3, r4
 808691c:	4622      	mov	r2, r4
 808691e:	4621      	mov	r1, r4
 8086920:	4638      	mov	r0, r7
 8086922:	f7fd f82d 	bl	8083980 <mbedtls_rsa_import_raw>
 8086926:	4604      	mov	r4, r0
 8086928:	2800      	cmp	r0, #0
 808692a:	d132      	bne.n	8086992 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, p, len,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 808692c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 808692e:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Complete the RSA private key */
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
 8086930:	4638      	mov	r0, r7
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, p, len,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 8086932:	4413      	add	r3, r2
 8086934:	930a      	str	r3, [sp, #40]	; 0x28

    /* Complete the RSA private key */
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
 8086936:	f7fd f861 	bl	80839fc <mbedtls_rsa_complete>
 808693a:	4604      	mov	r4, r0
 808693c:	b9c8      	cbnz	r0, 8086972 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1ba>
        goto cleanup;

    /* Check optional parameters */
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
 808693e:	aa0b      	add	r2, sp, #44	; 0x2c
 8086940:	4631      	mov	r1, r6
 8086942:	a80a      	add	r0, sp, #40	; 0x28
 8086944:	f7fc fd7f 	bl	8083446 <mbedtls_asn1_get_mpi>
 8086948:	4604      	mov	r4, r0
 808694a:	bb10      	cbnz	r0, 8086992 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
    /* Complete the RSA private key */
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
        goto cleanup;

    /* Check optional parameters */
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
 808694c:	aa0b      	add	r2, sp, #44	; 0x2c
 808694e:	4631      	mov	r1, r6
 8086950:	a80a      	add	r0, sp, #40	; 0x28
 8086952:	f7fc fd78 	bl	8083446 <mbedtls_asn1_get_mpi>
 8086956:	4604      	mov	r4, r0
 8086958:	b9d8      	cbnz	r0, 8086992 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
 808695a:	aa0b      	add	r2, sp, #44	; 0x2c
 808695c:	4631      	mov	r1, r6
 808695e:	a80a      	add	r0, sp, #40	; 0x28
 8086960:	f7fc fd71 	bl	8083446 <mbedtls_asn1_get_mpi>
 8086964:	4604      	mov	r4, r0
 8086966:	b9a0      	cbnz	r0, 8086992 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        goto cleanup;

    if( p != end )
    {
        ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH ;
 8086968:	4b0e      	ldr	r3, [pc, #56]	; (80869a4 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1ec>)
 808696a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 808696c:	4296      	cmp	r6, r2
 808696e:	bf18      	it	ne
 8086970:	461c      	movne	r4, r3
    }

cleanup:

    mbedtls_mpi_free( &T );
 8086972:	a80b      	add	r0, sp, #44	; 0x2c
 8086974:	f004 fb43 	bl	808affe <mbedtls_mpi_free>

    if( ret != 0 )
 8086978:	b17c      	cbz	r4, 808699a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
    {
        /* Wrap error code if it's coming from a lower level */
        if( ( ret & 0xff80 ) == 0 )
 808697a:	f64f 7380 	movw	r3, #65408	; 0xff80
 808697e:	4023      	ands	r3, r4
 8086980:	b913      	cbnz	r3, 8086988 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1d0>
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret;
 8086982:	f5a4 5574 	sub.w	r5, r4, #15616	; 0x3d00
 8086986:	e000      	b.n	808698a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1d2>
        else
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT;
 8086988:	4d07      	ldr	r5, [pc, #28]	; (80869a8 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1f0>)

        mbedtls_rsa_free( rsa );
 808698a:	4638      	mov	r0, r7
 808698c:	f7fe f8d0 	bl	8084b30 <mbedtls_rsa_free>
 8086990:	e003      	b.n	808699a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH ;
    }

cleanup:

    mbedtls_mpi_free( &T );
 8086992:	a80b      	add	r0, sp, #44	; 0x2c
 8086994:	f004 fb33 	bl	808affe <mbedtls_mpi_free>
 8086998:	e7ef      	b.n	808697a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1c2>

        mbedtls_rsa_free( rsa );
    }

    return( ret );
}
 808699a:	4628      	mov	r0, r5
 808699c:	b00f      	add	sp, #60	; 0x3c
 808699e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80869a0:	ffffc280 	.word	0xffffc280
 80869a4:	ffffc29a 	.word	0xffffc29a
 80869a8:	ffffc300 	.word	0xffffc300

080869ac <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>:
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */
static int pk_get_pk_alg( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_pk_type_t *pk_alg, mbedtls_asn1_buf *params )
{
 80869ac:	b530      	push	{r4, r5, lr}
 80869ae:	4615      	mov	r5, r2
 80869b0:	b085      	sub	sp, #20
    int ret;
    mbedtls_asn1_buf alg_oid;

    memset( params, 0, sizeof(mbedtls_asn1_buf) );
 80869b2:	2200      	movs	r2, #0
 80869b4:	601a      	str	r2, [r3, #0]
 80869b6:	605a      	str	r2, [r3, #4]
 80869b8:	609a      	str	r2, [r3, #8]

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 80869ba:	aa01      	add	r2, sp, #4
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */
static int pk_get_pk_alg( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_pk_type_t *pk_alg, mbedtls_asn1_buf *params )
{
 80869bc:	461c      	mov	r4, r3
    int ret;
    mbedtls_asn1_buf alg_oid;

    memset( params, 0, sizeof(mbedtls_asn1_buf) );

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 80869be:	f7fc fdca 	bl	8083556 <mbedtls_asn1_get_alg>
 80869c2:	b110      	cbz	r0, 80869ca <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x1e>
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );
 80869c4:	f5a0 506a 	sub.w	r0, r0, #14976	; 0x3a80
 80869c8:	e014      	b.n	80869f4 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>

    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
 80869ca:	4629      	mov	r1, r5
 80869cc:	a801      	add	r0, sp, #4
 80869ce:	f7fe f967 	bl	8084ca0 <mbedtls_oid_get_pk_alg>
 80869d2:	b960      	cbnz	r0, 80869ee <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x42>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    /*
     * No parameters with RSA (only for EC)
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
 80869d4:	782b      	ldrb	r3, [r5, #0]
 80869d6:	2b01      	cmp	r3, #1
 80869d8:	d10c      	bne.n	80869f4 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 80869da:	6823      	ldr	r3, [r4, #0]
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    /*
     * No parameters with RSA (only for EC)
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
 80869dc:	2b05      	cmp	r3, #5
 80869de:	d000      	beq.n	80869e2 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x36>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 80869e0:	b93b      	cbnz	r3, 80869f2 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x46>
 80869e2:	6863      	ldr	r3, [r4, #4]
                params->len != 0 ) )
    {
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 80869e4:	4804      	ldr	r0, [pc, #16]	; (80869f8 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x4c>)
 80869e6:	2b00      	cmp	r3, #0
 80869e8:	bf08      	it	eq
 80869ea:	2000      	moveq	r0, #0
 80869ec:	e002      	b.n	80869f4 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );

    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 80869ee:	4803      	ldr	r0, [pc, #12]	; (80869fc <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x50>)
 80869f0:	e000      	b.n	80869f4 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
                params->len != 0 ) )
    {
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 80869f2:	4801      	ldr	r0, [pc, #4]	; (80869f8 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x4c>)
    }

    return( 0 );
}
 80869f4:	b005      	add	sp, #20
 80869f6:	bd30      	pop	{r4, r5, pc}
 80869f8:	ffffc580 	.word	0xffffc580
 80869fc:	ffffc380 	.word	0xffffc380

08086a00 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>:
 */
static int pk_parse_key_pkcs8_unencrypted_der(
                                    mbedtls_pk_context *pk,
                                    const unsigned char* key,
                                    size_t keylen )
{
 8086a00:	b530      	push	{r4, r5, lr}
    int ret, version;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
    unsigned char *end = p + keylen;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 8086a02:	2300      	movs	r3, #0
 */
static int pk_parse_key_pkcs8_unencrypted_der(
                                    mbedtls_pk_context *pk,
                                    const unsigned char* key,
                                    size_t keylen )
{
 8086a04:	b089      	sub	sp, #36	; 0x24
 8086a06:	4605      	mov	r5, r0
    int ret, version;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
 8086a08:	9104      	str	r1, [sp, #16]
    unsigned char *end = p + keylen;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 8086a0a:	f88d 3007 	strb.w	r3, [sp, #7]
     *    PrivateKey ::= OCTET STRING
     *
     *  The PrivateKey OCTET STRING is a SEC1 ECPrivateKey
     */

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8086a0e:	4411      	add	r1, r2
 8086a10:	2330      	movs	r3, #48	; 0x30
 8086a12:	aa03      	add	r2, sp, #12
 8086a14:	a804      	add	r0, sp, #16
 8086a16:	f7fc fcc5 	bl	80833a4 <mbedtls_asn1_get_tag>
 8086a1a:	b9c8      	cbnz	r0, 8086a50 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x50>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 8086a1c:	9b03      	ldr	r3, [sp, #12]
 8086a1e:	9c04      	ldr	r4, [sp, #16]

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 8086a20:	aa02      	add	r2, sp, #8
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 8086a22:	441c      	add	r4, r3

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 8086a24:	4621      	mov	r1, r4
 8086a26:	a804      	add	r0, sp, #16
 8086a28:	f7fc fce9 	bl	80833fe <mbedtls_asn1_get_int>
 8086a2c:	b980      	cbnz	r0, 8086a50 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x50>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( version != 0 )
 8086a2e:	9b02      	ldr	r3, [sp, #8]
 8086a30:	bb7b      	cbnz	r3, 8086a92 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x92>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION + ret );

    if( ( ret = pk_get_pk_alg( &p, end, &pk_alg, &params ) ) != 0 )
 8086a32:	ab05      	add	r3, sp, #20
 8086a34:	f10d 0207 	add.w	r2, sp, #7
 8086a38:	4621      	mov	r1, r4
 8086a3a:	a804      	add	r0, sp, #16
 8086a3c:	f7ff ffb6 	bl	80869ac <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>
 8086a40:	b930      	cbnz	r0, 8086a50 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x50>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 8086a42:	2304      	movs	r3, #4
 8086a44:	aa03      	add	r2, sp, #12
 8086a46:	4621      	mov	r1, r4
 8086a48:	a804      	add	r0, sp, #16
 8086a4a:	f7fc fcab 	bl	80833a4 <mbedtls_asn1_get_tag>
 8086a4e:	b110      	cbz	r0, 8086a56 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x56>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8086a50:	f5a0 5074 	sub.w	r0, r0, #15616	; 0x3d00
 8086a54:	e022      	b.n	8086a9c <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>

    if( len < 1 )
 8086a56:	9b03      	ldr	r3, [sp, #12]
 8086a58:	b1eb      	cbz	r3, 8086a96 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x96>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 8086a5a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8086a5e:	f005 fd39 	bl	808c4d4 <mbedtls_pk_info_from_type>
 8086a62:	4601      	mov	r1, r0
 8086a64:	b908      	cbnz	r0, 8086a6a <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x6a>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 8086a66:	480e      	ldr	r0, [pc, #56]	; (8086aa0 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xa0>)
 8086a68:	e018      	b.n	8086a9c <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>

    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 8086a6a:	4628      	mov	r0, r5
 8086a6c:	f005 fd3a 	bl	808c4e4 <mbedtls_pk_setup>
 8086a70:	b9a0      	cbnz	r0, 8086a9c <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>
        return( ret );

#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA )
 8086a72:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8086a76:	2b01      	cmp	r3, #1
 8086a78:	d1f5      	bne.n	8086a66 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x66>
    {
        if( ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), p, len ) ) != 0 )
 8086a7a:	9a03      	ldr	r2, [sp, #12]
 8086a7c:	9904      	ldr	r1, [sp, #16]
 8086a7e:	6868      	ldr	r0, [r5, #4]
 8086a80:	f7ff fe9a 	bl	80867b8 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
 8086a84:	4604      	mov	r4, r0
 8086a86:	b140      	cbz	r0, 8086a9a <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9a>
        {
            mbedtls_pk_free( pk );
 8086a88:	4628      	mov	r0, r5
 8086a8a:	f005 fd12 	bl	808c4b2 <mbedtls_pk_free>
            return( ret );
 8086a8e:	4620      	mov	r0, r4
 8086a90:	e004      	b.n	8086a9c <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( version != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION + ret );
 8086a92:	4804      	ldr	r0, [pc, #16]	; (8086aa4 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xa4>)
 8086a94:	e002      	b.n	8086a9c <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( len < 1 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8086a96:	4804      	ldr	r0, [pc, #16]	; (8086aa8 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xa8>)
 8086a98:	e000      	b.n	8086a9c <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>
        }
    } else
#endif /* MBEDTLS_ECP_C */
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    return( 0 );
 8086a9a:	2000      	movs	r0, #0
}
 8086a9c:	b009      	add	sp, #36	; 0x24
 8086a9e:	bd30      	pop	{r4, r5, pc}
 8086aa0:	ffffc380 	.word	0xffffc380
 8086aa4:	ffffc280 	.word	0xffffc280
 8086aa8:	ffffc2a0 	.word	0xffffc2a0

08086aac <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>:
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
static int pk_parse_key_pkcs8_encrypted_der(
                                    mbedtls_pk_context *pk,
                                    unsigned char *key, size_t keylen,
                                    const unsigned char *pwd, size_t pwdlen )
{
 8086aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8086aae:	b091      	sub	sp, #68	; 0x44
 8086ab0:	9e16      	ldr	r6, [sp, #88]	; 0x58
#if defined(MBEDTLS_PKCS12_C)
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_md_type_t md_alg;
#endif

    p = key;
 8086ab2:	9109      	str	r1, [sp, #36]	; 0x24
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
static int pk_parse_key_pkcs8_encrypted_der(
                                    mbedtls_pk_context *pk,
                                    unsigned char *key, size_t keylen,
                                    const unsigned char *pwd, size_t pwdlen )
{
 8086ab4:	4605      	mov	r5, r0
 8086ab6:	461f      	mov	r7, r3
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_md_type_t md_alg;
#endif

    p = key;
    end = p + keylen;
 8086ab8:	4411      	add	r1, r2

    if( pwdlen == 0 )
 8086aba:	2e00      	cmp	r6, #0
 8086abc:	d066      	beq.n	8086b8c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe0>
     *  EncryptedData ::= OCTET STRING
     *
     *  The EncryptedData OCTET STRING is a PKCS#8 PrivateKeyInfo
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8086abe:	2330      	movs	r3, #48	; 0x30
 8086ac0:	aa08      	add	r2, sp, #32
 8086ac2:	a809      	add	r0, sp, #36	; 0x24
 8086ac4:	f7fc fc6e 	bl	80833a4 <mbedtls_asn1_get_tag>
 8086ac8:	b980      	cbnz	r0, 8086aec <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x40>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 8086aca:	9b08      	ldr	r3, [sp, #32]
 8086acc:	9c09      	ldr	r4, [sp, #36]	; 0x24

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &pbe_alg_oid, &pbe_params ) ) != 0 )
 8086ace:	aa0a      	add	r2, sp, #40	; 0x28
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 8086ad0:	441c      	add	r4, r3

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &pbe_alg_oid, &pbe_params ) ) != 0 )
 8086ad2:	4621      	mov	r1, r4
 8086ad4:	ab0d      	add	r3, sp, #52	; 0x34
 8086ad6:	a809      	add	r0, sp, #36	; 0x24
 8086ad8:	f7fc fd3d 	bl	8083556 <mbedtls_asn1_get_alg>
 8086adc:	b930      	cbnz	r0, 8086aec <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x40>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 8086ade:	2304      	movs	r3, #4
 8086ae0:	aa08      	add	r2, sp, #32
 8086ae2:	4621      	mov	r1, r4
 8086ae4:	a809      	add	r0, sp, #36	; 0x24
 8086ae6:	f7fc fc5d 	bl	80833a4 <mbedtls_asn1_get_tag>
 8086aea:	b110      	cbz	r0, 8086af2 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x46>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8086aec:	f5a0 5074 	sub.w	r0, r0, #15616	; 0x3d00
 8086af0:	e055      	b.n	8086b9e <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>

    /*
     * Decrypt EncryptedData with appropriate PBE
     */
#if defined(MBEDTLS_PKCS12_C)
    if( mbedtls_oid_get_pkcs12_pbe_alg( &pbe_alg_oid, &md_alg, &cipher_alg ) == 0 )
 8086af2:	f10d 011f 	add.w	r1, sp, #31
 8086af6:	f10d 021e 	add.w	r2, sp, #30
 8086afa:	a80a      	add	r0, sp, #40	; 0x28
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    buf = p;
 8086afc:	9c09      	ldr	r4, [sp, #36]	; 0x24

    /*
     * Decrypt EncryptedData with appropriate PBE
     */
#if defined(MBEDTLS_PKCS12_C)
    if( mbedtls_oid_get_pkcs12_pbe_alg( &pbe_alg_oid, &md_alg, &cipher_alg ) == 0 )
 8086afe:	f7fe f931 	bl	8084d64 <mbedtls_oid_get_pkcs12_pbe_alg>
 8086b02:	4601      	mov	r1, r0
 8086b04:	b9a0      	cbnz	r0, 8086b30 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x84>
    {
        if( ( ret = mbedtls_pkcs12_pbe( &pbe_params, MBEDTLS_PKCS12_PBE_DECRYPT,
 8086b06:	9808      	ldr	r0, [sp, #32]
 8086b08:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8086b0c:	9003      	str	r0, [sp, #12]
 8086b0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8086b10:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8086b14:	9002      	str	r0, [sp, #8]
 8086b16:	9404      	str	r4, [sp, #16]
 8086b18:	9601      	str	r6, [sp, #4]
 8086b1a:	9700      	str	r7, [sp, #0]
 8086b1c:	a80d      	add	r0, sp, #52	; 0x34
 8086b1e:	f006 fd6f 	bl	808d600 <mbedtls_pkcs12_pbe>
 8086b22:	2800      	cmp	r0, #0
 8086b24:	d036      	beq.n	8086b94 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe8>
                                cipher_alg, md_alg,
                                pwd, pwdlen, p, len, buf ) ) != 0 )
        {
            if( ret == MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH )
 8086b26:	f510 5ff0 	cmn.w	r0, #7680	; 0x1e00
 8086b2a:	d138      	bne.n	8086b9e <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
                return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
 8086b2c:	481d      	ldr	r0, [pc, #116]	; (8086ba4 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf8>)
 8086b2e:	e036      	b.n	8086b9e <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
            return( ret );
        }

        decrypted = 1;
    }
    else if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS12_PBE_SHA1_RC4_128, &pbe_alg_oid ) == 0 )
 8086b30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8086b32:	2a0a      	cmp	r2, #10
 8086b34:	d114      	bne.n	8086b60 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xb4>
 8086b36:	990c      	ldr	r1, [sp, #48]	; 0x30
 8086b38:	481b      	ldr	r0, [pc, #108]	; (8086ba8 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xfc>)
 8086b3a:	f00b fbf7 	bl	809232c <memcmp>
 8086b3e:	4601      	mov	r1, r0
 8086b40:	bb30      	cbnz	r0, 8086b90 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe4>
    {
        if( ( ret = mbedtls_pkcs12_pbe_sha1_rc4_128( &pbe_params,
 8086b42:	9b08      	ldr	r3, [sp, #32]
 8086b44:	9402      	str	r4, [sp, #8]
 8086b46:	9301      	str	r3, [sp, #4]
 8086b48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8086b4a:	463a      	mov	r2, r7
 8086b4c:	9300      	str	r3, [sp, #0]
 8086b4e:	a80d      	add	r0, sp, #52	; 0x34
 8086b50:	4633      	mov	r3, r6
 8086b52:	f006 fc77 	bl	808d444 <mbedtls_pkcs12_pbe_sha1_rc4_128>
 8086b56:	bb10      	cbnz	r0, 8086b9e <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
        }

        // Best guess for password mismatch when using RC4. If first tag is
        // not MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE
        //
        if( *buf != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 8086b58:	7823      	ldrb	r3, [r4, #0]
 8086b5a:	2b30      	cmp	r3, #48	; 0x30
 8086b5c:	d01a      	beq.n	8086b94 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe8>
 8086b5e:	e7e5      	b.n	8086b2c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x80>
        decrypted = 1;
    }
    else
#endif /* MBEDTLS_PKCS12_C */
#if defined(MBEDTLS_PKCS5_C)
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBES2, &pbe_alg_oid ) == 0 )
 8086b60:	2a09      	cmp	r2, #9
 8086b62:	d115      	bne.n	8086b90 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe4>
 8086b64:	990c      	ldr	r1, [sp, #48]	; 0x30
 8086b66:	4811      	ldr	r0, [pc, #68]	; (8086bac <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x100>)
 8086b68:	f00b fbe0 	bl	809232c <memcmp>
 8086b6c:	4601      	mov	r1, r0
 8086b6e:	b978      	cbnz	r0, 8086b90 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe4>
    {
        if( ( ret = mbedtls_pkcs5_pbes2( &pbe_params, MBEDTLS_PKCS5_DECRYPT, pwd, pwdlen,
 8086b70:	9b08      	ldr	r3, [sp, #32]
 8086b72:	9402      	str	r4, [sp, #8]
 8086b74:	9301      	str	r3, [sp, #4]
 8086b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8086b78:	463a      	mov	r2, r7
 8086b7a:	9300      	str	r3, [sp, #0]
 8086b7c:	a80d      	add	r0, sp, #52	; 0x34
 8086b7e:	4633      	mov	r3, r6
 8086b80:	f7fb ff68 	bl	8082a54 <mbedtls_pkcs5_pbes2>
 8086b84:	b130      	cbz	r0, 8086b94 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe8>
                                  p, len, buf ) ) != 0 )
        {
            if( ret == MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH )
 8086b86:	f510 5f38 	cmn.w	r0, #11776	; 0x2e00
 8086b8a:	e7ce      	b.n	8086b2a <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x7e>

    p = key;
    end = p + keylen;

    if( pwdlen == 0 )
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
 8086b8c:	4808      	ldr	r0, [pc, #32]	; (8086bb0 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x104>)
 8086b8e:	e006      	b.n	8086b9e <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
    {
        ((void) pwd);
    }

    if( decrypted == 0 )
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
 8086b90:	4808      	ldr	r0, [pc, #32]	; (8086bb4 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x108>)
 8086b92:	e004      	b.n	8086b9e <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>

    return( pk_parse_key_pkcs8_unencrypted_der( pk, buf, len ) );
 8086b94:	9a08      	ldr	r2, [sp, #32]
 8086b96:	4621      	mov	r1, r4
 8086b98:	4628      	mov	r0, r5
 8086b9a:	f7ff ff31 	bl	8086a00 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
}
 8086b9e:	b011      	add	sp, #68	; 0x44
 8086ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8086ba2:	bf00      	nop
 8086ba4:	ffffc480 	.word	0xffffc480
 8086ba8:	08093abd 	.word	0x08093abd
 8086bac:	08093ac8 	.word	0x08093ac8
 8086bb0:	ffffc400 	.word	0xffffc400
 8086bb4:	ffffc680 	.word	0xffffc680

08086bb8 <mbedtls_pk_parse_subpubkey>:
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
 8086bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    int ret;
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 8086bba:	2300      	movs	r3, #0
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
 8086bbc:	b08f      	sub	sp, #60	; 0x3c
 8086bbe:	4617      	mov	r7, r2
    int ret;
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 8086bc0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    const mbedtls_pk_info_t *pk_info;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8086bc4:	aa09      	add	r2, sp, #36	; 0x24
 8086bc6:	2330      	movs	r3, #48	; 0x30
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
 8086bc8:	4605      	mov	r5, r0
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
    const mbedtls_pk_info_t *pk_info;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8086bca:	f7fc fbeb 	bl	80833a4 <mbedtls_asn1_get_tag>
 8086bce:	b110      	cbz	r0, 8086bd6 <mbedtls_pk_parse_subpubkey+0x1e>
                    MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8086bd0:	f5a0 5074 	sub.w	r0, r0, #15616	; 0x3d00
 8086bd4:	e090      	b.n	8086cf8 <mbedtls_pk_parse_subpubkey+0x140>
    }

    end = *p + len;
 8086bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8086bd8:	682e      	ldr	r6, [r5, #0]

    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
 8086bda:	f10d 0223 	add.w	r2, sp, #35	; 0x23
                    MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = *p + len;
 8086bde:	441e      	add	r6, r3

    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
 8086be0:	4631      	mov	r1, r6
 8086be2:	ab0b      	add	r3, sp, #44	; 0x2c
 8086be4:	4628      	mov	r0, r5
 8086be6:	f7ff fee1 	bl	80869ac <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>
 8086bea:	2800      	cmp	r0, #0
 8086bec:	f040 8084 	bne.w	8086cf8 <mbedtls_pk_parse_subpubkey+0x140>
        return( ret );

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 8086bf0:	aa09      	add	r2, sp, #36	; 0x24
 8086bf2:	4631      	mov	r1, r6
 8086bf4:	4628      	mov	r0, r5
 8086bf6:	f7fc fc5e 	bl	80834b6 <mbedtls_asn1_get_bitstring_null>
 8086bfa:	b110      	cbz	r0, 8086c02 <mbedtls_pk_parse_subpubkey+0x4a>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 8086bfc:	f5a0 506c 	sub.w	r0, r0, #15104	; 0x3b00
 8086c00:	e07a      	b.n	8086cf8 <mbedtls_pk_parse_subpubkey+0x140>

    if( *p + len != end )
 8086c02:	682a      	ldr	r2, [r5, #0]
 8086c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8086c06:	4413      	add	r3, r2
 8086c08:	429e      	cmp	r6, r3
 8086c0a:	d169      	bne.n	8086ce0 <mbedtls_pk_parse_subpubkey+0x128>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 8086c0c:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
 8086c10:	f005 fc60 	bl	808c4d4 <mbedtls_pk_info_from_type>
 8086c14:	4601      	mov	r1, r0
 8086c16:	2800      	cmp	r0, #0
 8086c18:	d064      	beq.n	8086ce4 <mbedtls_pk_parse_subpubkey+0x12c>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 8086c1a:	4638      	mov	r0, r7
 8086c1c:	f005 fc62 	bl	808c4e4 <mbedtls_pk_setup>
 8086c20:	4604      	mov	r4, r0
 8086c22:	2800      	cmp	r0, #0
 8086c24:	d160      	bne.n	8086ce8 <mbedtls_pk_parse_subpubkey+0x130>
        return( ret );

#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA )
 8086c26:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8086c2a:	2b01      	cmp	r3, #1
 8086c2c:	d162      	bne.n	8086cf4 <mbedtls_pk_parse_subpubkey+0x13c>
                             mbedtls_rsa_context *rsa )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8086c2e:	2330      	movs	r3, #48	; 0x30
 8086c30:	aa0a      	add	r2, sp, #40	; 0x28
 8086c32:	4631      	mov	r1, r6
 8086c34:	4628      	mov	r0, r5
 8086c36:	687c      	ldr	r4, [r7, #4]
 8086c38:	f7fc fbb4 	bl	80833a4 <mbedtls_asn1_get_tag>
 8086c3c:	bb28      	cbnz	r0, 8086c8a <mbedtls_pk_parse_subpubkey+0xd2>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( *p + len != end )
 8086c3e:	682a      	ldr	r2, [r5, #0]
 8086c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8086c42:	4413      	add	r3, r2
 8086c44:	429e      	cmp	r6, r3
 8086c46:	d146      	bne.n	8086cd6 <mbedtls_pk_parse_subpubkey+0x11e>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    /* Import N */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8086c48:	2302      	movs	r3, #2
 8086c4a:	aa0a      	add	r2, sp, #40	; 0x28
 8086c4c:	4631      	mov	r1, r6
 8086c4e:	4628      	mov	r0, r5
 8086c50:	f7fc fba8 	bl	80833a4 <mbedtls_asn1_get_tag>
 8086c54:	b9c8      	cbnz	r0, 8086c8a <mbedtls_pk_parse_subpubkey+0xd2>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( ( ret = mbedtls_rsa_import_raw( rsa, *p, len, NULL, 0, NULL, 0,
 8086c56:	2300      	movs	r3, #0
 8086c58:	9306      	str	r3, [sp, #24]
 8086c5a:	9305      	str	r3, [sp, #20]
 8086c5c:	9304      	str	r3, [sp, #16]
 8086c5e:	9303      	str	r3, [sp, #12]
 8086c60:	9302      	str	r3, [sp, #8]
 8086c62:	9301      	str	r3, [sp, #4]
 8086c64:	9300      	str	r3, [sp, #0]
 8086c66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8086c68:	6829      	ldr	r1, [r5, #0]
 8086c6a:	4620      	mov	r0, r4
 8086c6c:	f7fc fe88 	bl	8083980 <mbedtls_rsa_import_raw>
 8086c70:	2800      	cmp	r0, #0
 8086c72:	d13d      	bne.n	8086cf0 <mbedtls_pk_parse_subpubkey+0x138>
                                        NULL, 0, NULL, 0 ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
 8086c74:	682a      	ldr	r2, [r5, #0]
 8086c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8086c78:	4631      	mov	r1, r6

    if( ( ret = mbedtls_rsa_import_raw( rsa, *p, len, NULL, 0, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
 8086c7a:	4413      	add	r3, r2
 8086c7c:	602b      	str	r3, [r5, #0]

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8086c7e:	aa0a      	add	r2, sp, #40	; 0x28
 8086c80:	2302      	movs	r3, #2
 8086c82:	4628      	mov	r0, r5
 8086c84:	f7fc fb8e 	bl	80833a4 <mbedtls_asn1_get_tag>
 8086c88:	b118      	cbz	r0, 8086c92 <mbedtls_pk_parse_subpubkey+0xda>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 8086c8a:	f5a0 546c 	sub.w	r4, r0, #15104	; 0x3b00
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;

    if( ret == 0 && *p != end )
 8086c8e:	b1fc      	cbz	r4, 8086cd0 <mbedtls_pk_parse_subpubkey+0x118>
 8086c90:	e022      	b.n	8086cd8 <mbedtls_pk_parse_subpubkey+0x120>

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
 8086c92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8086c94:	9004      	str	r0, [sp, #16]
 8086c96:	9306      	str	r3, [sp, #24]
 8086c98:	682b      	ldr	r3, [r5, #0]
 8086c9a:	9003      	str	r0, [sp, #12]
 8086c9c:	9305      	str	r3, [sp, #20]
 8086c9e:	9002      	str	r0, [sp, #8]
 8086ca0:	9001      	str	r0, [sp, #4]
 8086ca2:	9000      	str	r0, [sp, #0]
 8086ca4:	4603      	mov	r3, r0
 8086ca6:	4602      	mov	r2, r0
 8086ca8:	4601      	mov	r1, r0
 8086caa:	4620      	mov	r0, r4
 8086cac:	f7fc fe68 	bl	8083980 <mbedtls_rsa_import_raw>
 8086cb0:	b9f0      	cbnz	r0, 8086cf0 <mbedtls_pk_parse_subpubkey+0x138>
                                        NULL, 0, *p, len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
 8086cb2:	682a      	ldr	r2, [r5, #0]
 8086cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28

    if( mbedtls_rsa_complete( rsa ) != 0 ||
 8086cb6:	4620      	mov	r0, r4

    if( ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        NULL, 0, *p, len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
 8086cb8:	4413      	add	r3, r2
 8086cba:	602b      	str	r3, [r5, #0]

    if( mbedtls_rsa_complete( rsa ) != 0 ||
 8086cbc:	f7fc fe9e 	bl	80839fc <mbedtls_rsa_complete>
 8086cc0:	b9b0      	cbnz	r0, 8086cf0 <mbedtls_pk_parse_subpubkey+0x138>
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
 8086cc2:	4620      	mov	r0, r4
 8086cc4:	f7fc ff56 	bl	8083b74 <mbedtls_rsa_check_pubkey>
                                        NULL, 0, *p, len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;

    if( mbedtls_rsa_complete( rsa ) != 0 ||
 8086cc8:	b990      	cbnz	r0, 8086cf0 <mbedtls_pk_parse_subpubkey+0x138>
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
    {
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
    }

    if( *p != end )
 8086cca:	682b      	ldr	r3, [r5, #0]
 8086ccc:	429e      	cmp	r6, r3
 8086cce:	d102      	bne.n	8086cd6 <mbedtls_pk_parse_subpubkey+0x11e>
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;

    if( ret == 0 && *p != end )
 8086cd0:	682b      	ldr	r3, [r5, #0]
 8086cd2:	429e      	cmp	r6, r3
 8086cd4:	d00a      	beq.n	8086cec <mbedtls_pk_parse_subpubkey+0x134>
        ret = MBEDTLS_ERR_PK_INVALID_PUBKEY
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;
 8086cd6:	4c09      	ldr	r4, [pc, #36]	; (8086cfc <mbedtls_pk_parse_subpubkey+0x144>)

    if( ret != 0 )
        mbedtls_pk_free( pk );
 8086cd8:	4638      	mov	r0, r7
 8086cda:	f005 fbea 	bl	808c4b2 <mbedtls_pk_free>
 8086cde:	e003      	b.n	8086ce8 <mbedtls_pk_parse_subpubkey+0x130>
    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( *p + len != end )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8086ce0:	4806      	ldr	r0, [pc, #24]	; (8086cfc <mbedtls_pk_parse_subpubkey+0x144>)
 8086ce2:	e009      	b.n	8086cf8 <mbedtls_pk_parse_subpubkey+0x140>

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 8086ce4:	4806      	ldr	r0, [pc, #24]	; (8086d00 <mbedtls_pk_parse_subpubkey+0x148>)
 8086ce6:	e007      	b.n	8086cf8 <mbedtls_pk_parse_subpubkey+0x140>
 8086ce8:	4620      	mov	r0, r4
 8086cea:	e005      	b.n	8086cf8 <mbedtls_pk_parse_subpubkey+0x140>
 8086cec:	2000      	movs	r0, #0
 8086cee:	e003      	b.n	8086cf8 <mbedtls_pk_parse_subpubkey+0x140>
    *p += len;

    if( mbedtls_rsa_complete( rsa ) != 0 ||
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
    {
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
 8086cf0:	4c04      	ldr	r4, [pc, #16]	; (8086d04 <mbedtls_pk_parse_subpubkey+0x14c>)
 8086cf2:	e7f1      	b.n	8086cd8 <mbedtls_pk_parse_subpubkey+0x120>
        ret = pk_use_ecparams( &alg_params, &mbedtls_pk_ec( *pk )->grp );
        if( ret == 0 )
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;
 8086cf4:	4c02      	ldr	r4, [pc, #8]	; (8086d00 <mbedtls_pk_parse_subpubkey+0x148>)
 8086cf6:	e7ef      	b.n	8086cd8 <mbedtls_pk_parse_subpubkey+0x120>

    if( ret != 0 )
        mbedtls_pk_free( pk );

    return( ret );
}
 8086cf8:	b00f      	add	sp, #60	; 0x3c
 8086cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8086cfc:	ffffc49a 	.word	0xffffc49a
 8086d00:	ffffc380 	.word	0xffffc380
 8086d04:	ffffc500 	.word	0xffffc500

08086d08 <mbedtls_pk_parse_key>:
 * Parse a private key
 */
int mbedtls_pk_parse_key( mbedtls_pk_context *pk,
                  const unsigned char *key, size_t keylen,
                  const unsigned char *pwd, size_t pwdlen )
{
 8086d08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8086d0c:	4616      	mov	r6, r2
 8086d0e:	b089      	sub	sp, #36	; 0x24
 8086d10:	4605      	mov	r5, r0

#if defined(MBEDTLS_PEM_PARSE_C)
    size_t len;
    mbedtls_pem_context pem;

    mbedtls_pem_init( &pem );
 8086d12:	a805      	add	r0, sp, #20
 * Parse a private key
 */
int mbedtls_pk_parse_key( mbedtls_pk_context *pk,
                  const unsigned char *key, size_t keylen,
                  const unsigned char *pwd, size_t pwdlen )
{
 8086d14:	460c      	mov	r4, r1
 8086d16:	461f      	mov	r7, r3
 8086d18:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40

#if defined(MBEDTLS_PEM_PARSE_C)
    size_t len;
    mbedtls_pem_context pem;

    mbedtls_pem_init( &pem );
 8086d1c:	f007 fdc8 	bl	808e8b0 <mbedtls_pem_init>

#if defined(MBEDTLS_RSA_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( keylen == 0 || key[keylen - 1] != '\0' )
 8086d20:	2e00      	cmp	r6, #0
 8086d22:	f000 80b8 	beq.w	8086e96 <mbedtls_pk_parse_key+0x18e>
 8086d26:	f106 39ff 	add.w	r9, r6, #4294967295
 8086d2a:	f814 3009 	ldrb.w	r3, [r4, r9]
 8086d2e:	b11b      	cbz	r3, 8086d38 <mbedtls_pk_parse_key+0x30>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
        return( ret );
#endif /* MBEDTLS_ECP_C */

    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( keylen == 0 || key[keylen - 1] != '\0' )
 8086d30:	f814 3009 	ldrb.w	r3, [r4, r9]
 8086d34:	bb6b      	cbnz	r3, 8086d92 <mbedtls_pk_parse_key+0x8a>
 8086d36:	e031      	b.n	8086d9c <mbedtls_pk_parse_key+0x94>
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
                               "-----BEGIN RSA PRIVATE KEY-----",
                               "-----END RSA PRIVATE KEY-----",
                               key, pwd, pwdlen, &len );
 8086d38:	ab04      	add	r3, sp, #16
 8086d3a:	9302      	str	r3, [sp, #8]
 8086d3c:	e88d 0180 	stmia.w	sp, {r7, r8}
 8086d40:	4623      	mov	r3, r4
 8086d42:	4a57      	ldr	r2, [pc, #348]	; (8086ea0 <mbedtls_pk_parse_key+0x198>)
 8086d44:	4957      	ldr	r1, [pc, #348]	; (8086ea4 <mbedtls_pk_parse_key+0x19c>)
 8086d46:	a805      	add	r0, sp, #20
 8086d48:	f007 fdb8 	bl	808e8bc <mbedtls_pem_read_buffer>

    if( ret == 0 )
 8086d4c:	b978      	cbnz	r0, 8086d6e <mbedtls_pk_parse_key+0x66>
    {
        pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
 8086d4e:	2001      	movs	r0, #1
 8086d50:	f005 fbc0 	bl	808c4d4 <mbedtls_pk_info_from_type>
        if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
 8086d54:	4601      	mov	r1, r0
 8086d56:	4628      	mov	r0, r5
 8086d58:	f005 fbc4 	bl	808c4e4 <mbedtls_pk_setup>
 8086d5c:	4604      	mov	r4, r0
 8086d5e:	2800      	cmp	r0, #0
 8086d60:	d160      	bne.n	8086e24 <mbedtls_pk_parse_key+0x11c>
 8086d62:	9a06      	ldr	r2, [sp, #24]
 8086d64:	9905      	ldr	r1, [sp, #20]
 8086d66:	6868      	ldr	r0, [r5, #4]
 8086d68:	f7ff fd26 	bl	80867b8 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
 8086d6c:	e058      	b.n	8086e20 <mbedtls_pk_parse_key+0x118>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
 8086d6e:	f510 5f9c 	cmn.w	r0, #4992	; 0x1380
 8086d72:	d101      	bne.n	8086d78 <mbedtls_pk_parse_key+0x70>
        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
 8086d74:	484c      	ldr	r0, [pc, #304]	; (8086ea8 <mbedtls_pk_parse_key+0x1a0>)
 8086d76:	e08f      	b.n	8086e98 <mbedtls_pk_parse_key+0x190>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
 8086d78:	f510 5f98 	cmn.w	r0, #4864	; 0x1300
 8086d7c:	f000 8084 	beq.w	8086e88 <mbedtls_pk_parse_key+0x180>
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 8086d80:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 8086d84:	f040 8088 	bne.w	8086e98 <mbedtls_pk_parse_key+0x190>
 8086d88:	e7d2      	b.n	8086d30 <mbedtls_pk_parse_key+0x28>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 8086d8a:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 8086d8e:	f040 8083 	bne.w	8086e98 <mbedtls_pk_parse_key+0x190>
        return( ret );

#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( keylen == 0 || key[keylen - 1] != '\0' )
 8086d92:	19a3      	adds	r3, r4, r6
 8086d94:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8086d98:	b9ab      	cbnz	r3, 8086dc6 <mbedtls_pk_parse_key+0xbe>
 8086d9a:	e02d      	b.n	8086df8 <mbedtls_pk_parse_key+0xf0>
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
                               "-----BEGIN PRIVATE KEY-----",
                               "-----END PRIVATE KEY-----",
                               key, NULL, 0, &len );
 8086d9c:	aa04      	add	r2, sp, #16
 8086d9e:	9202      	str	r2, [sp, #8]
 8086da0:	9301      	str	r3, [sp, #4]
 8086da2:	9300      	str	r3, [sp, #0]
 8086da4:	4a41      	ldr	r2, [pc, #260]	; (8086eac <mbedtls_pk_parse_key+0x1a4>)
 8086da6:	4623      	mov	r3, r4
 8086da8:	4941      	ldr	r1, [pc, #260]	; (8086eb0 <mbedtls_pk_parse_key+0x1a8>)
 8086daa:	a805      	add	r0, sp, #20
 8086dac:	f007 fd86 	bl	808e8bc <mbedtls_pem_read_buffer>
    if( ret == 0 )
 8086db0:	2800      	cmp	r0, #0
 8086db2:	d1ea      	bne.n	8086d8a <mbedtls_pk_parse_key+0x82>
    {
        if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk,
 8086db4:	9a06      	ldr	r2, [sp, #24]
 8086db6:	9905      	ldr	r1, [sp, #20]
 8086db8:	4628      	mov	r0, r5
 8086dba:	f7ff fe21 	bl	8086a00 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
 8086dbe:	e02f      	b.n	8086e20 <mbedtls_pk_parse_key+0x118>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 8086dc0:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 8086dc4:	d168      	bne.n	8086e98 <mbedtls_pk_parse_key+0x190>
        unsigned char *key_copy;

        if( keylen == 0 )
            return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );

        if( ( key_copy = (unsigned char *)mbedtls_calloc( 1, keylen ) ) == NULL )
 8086dc6:	4631      	mov	r1, r6
 8086dc8:	2001      	movs	r0, #1
 8086dca:	f00b fa99 	bl	8092300 <calloc>
 8086dce:	4681      	mov	r9, r0
 8086dd0:	2800      	cmp	r0, #0
 8086dd2:	d05b      	beq.n	8086e8c <mbedtls_pk_parse_key+0x184>
            return( MBEDTLS_ERR_PK_ALLOC_FAILED );

        memcpy( key_copy, key, keylen );
 8086dd4:	4632      	mov	r2, r6
 8086dd6:	4621      	mov	r1, r4
 8086dd8:	f00b fab7 	bl	809234a <memcpy>

        ret = pk_parse_key_pkcs8_encrypted_der( pk, key_copy, keylen,
                                                pwd, pwdlen );
 8086ddc:	463b      	mov	r3, r7
 8086dde:	4632      	mov	r2, r6
 8086de0:	4649      	mov	r1, r9
 8086de2:	f8cd 8000 	str.w	r8, [sp]
 8086de6:	4628      	mov	r0, r5
 8086de8:	f7ff fe60 	bl	8086aac <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>
 8086dec:	eb09 0106 	add.w	r1, r9, r6
 8086df0:	4607      	mov	r7, r0
 8086df2:	464b      	mov	r3, r9

#if defined(MBEDTLS_FS_IO) || \
    defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8086df4:	2200      	movs	r2, #0
 8086df6:	e01d      	b.n	8086e34 <mbedtls_pk_parse_key+0x12c>
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
                               "-----BEGIN ENCRYPTED PRIVATE KEY-----",
                               "-----END ENCRYPTED PRIVATE KEY-----",
                               key, NULL, 0, &len );
 8086df8:	aa04      	add	r2, sp, #16
 8086dfa:	9202      	str	r2, [sp, #8]
 8086dfc:	9301      	str	r3, [sp, #4]
 8086dfe:	9300      	str	r3, [sp, #0]
 8086e00:	4a2c      	ldr	r2, [pc, #176]	; (8086eb4 <mbedtls_pk_parse_key+0x1ac>)
 8086e02:	4623      	mov	r3, r4
 8086e04:	492c      	ldr	r1, [pc, #176]	; (8086eb8 <mbedtls_pk_parse_key+0x1b0>)
 8086e06:	a805      	add	r0, sp, #20
 8086e08:	f007 fd58 	bl	808e8bc <mbedtls_pem_read_buffer>
    if( ret == 0 )
 8086e0c:	2800      	cmp	r0, #0
 8086e0e:	d1d7      	bne.n	8086dc0 <mbedtls_pk_parse_key+0xb8>
    {
        if( ( ret = pk_parse_key_pkcs8_encrypted_der( pk,
 8086e10:	f8cd 8000 	str.w	r8, [sp]
 8086e14:	463b      	mov	r3, r7
 8086e16:	9a06      	ldr	r2, [sp, #24]
 8086e18:	9905      	ldr	r1, [sp, #20]
 8086e1a:	4628      	mov	r0, r5
 8086e1c:	f7ff fe46 	bl	8086aac <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>
 8086e20:	4604      	mov	r4, r0
 8086e22:	b110      	cbz	r0, 8086e2a <mbedtls_pk_parse_key+0x122>
                                                      pem.buf, pem.buflen,
                                                      pwd, pwdlen ) ) != 0 )
        {
            mbedtls_pk_free( pk );
 8086e24:	4628      	mov	r0, r5
 8086e26:	f005 fb44 	bl	808c4b2 <mbedtls_pk_free>
        }

        mbedtls_pem_free( &pem );
 8086e2a:	a805      	add	r0, sp, #20
 8086e2c:	f007 fdd4 	bl	808e9d8 <mbedtls_pem_free>
                               "-----BEGIN ENCRYPTED PRIVATE KEY-----",
                               "-----END ENCRYPTED PRIVATE KEY-----",
                               key, NULL, 0, &len );
    if( ret == 0 )
    {
        if( ( ret = pk_parse_key_pkcs8_encrypted_der( pk,
 8086e30:	4620      	mov	r0, r4
        {
            mbedtls_pk_free( pk );
        }

        mbedtls_pem_free( &pem );
        return( ret );
 8086e32:	e031      	b.n	8086e98 <mbedtls_pk_parse_key+0x190>

#if defined(MBEDTLS_FS_IO) || \
    defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8086e34:	428b      	cmp	r3, r1
 8086e36:	d002      	beq.n	8086e3e <mbedtls_pk_parse_key+0x136>
 8086e38:	701a      	strb	r2, [r3, #0]
 8086e3a:	3301      	adds	r3, #1
 8086e3c:	e7fa      	b.n	8086e34 <mbedtls_pk_parse_key+0x12c>

        ret = pk_parse_key_pkcs8_encrypted_der( pk, key_copy, keylen,
                                                pwd, pwdlen );

        mbedtls_zeroize( key_copy, keylen );
        mbedtls_free( key_copy );
 8086e3e:	4648      	mov	r0, r9
 8086e40:	f009 fd1a 	bl	8090878 <free>
    }

    if( ret == 0 )
 8086e44:	b90f      	cbnz	r7, 8086e4a <mbedtls_pk_parse_key+0x142>
        return( 0 );
 8086e46:	2000      	movs	r0, #0
 8086e48:	e026      	b.n	8086e98 <mbedtls_pk_parse_key+0x190>

    mbedtls_pk_free( pk );
 8086e4a:	4628      	mov	r0, r5
 8086e4c:	f005 fb31 	bl	808c4b2 <mbedtls_pk_free>

    if( ret == MBEDTLS_ERR_PK_PASSWORD_MISMATCH )
 8086e50:	f517 5f6e 	cmn.w	r7, #15232	; 0x3b80
 8086e54:	d08e      	beq.n	8086d74 <mbedtls_pk_parse_key+0x6c>
    {
        return( ret );
    }
#endif /* MBEDTLS_PKCS12_C || MBEDTLS_PKCS5_C */

    if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk, key, keylen ) ) == 0 )
 8086e56:	4632      	mov	r2, r6
 8086e58:	4621      	mov	r1, r4
 8086e5a:	4628      	mov	r0, r5
 8086e5c:	f7ff fdd0 	bl	8086a00 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
 8086e60:	2800      	cmp	r0, #0
 8086e62:	d0f0      	beq.n	8086e46 <mbedtls_pk_parse_key+0x13e>
        return( 0 );

    mbedtls_pk_free( pk );
 8086e64:	4628      	mov	r0, r5
 8086e66:	f005 fb24 	bl	808c4b2 <mbedtls_pk_free>

#if defined(MBEDTLS_RSA_C)

    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
 8086e6a:	2001      	movs	r0, #1
 8086e6c:	f005 fb32 	bl	808c4d4 <mbedtls_pk_info_from_type>
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
 8086e70:	4601      	mov	r1, r0
 8086e72:	4628      	mov	r0, r5
 8086e74:	f005 fb36 	bl	808c4e4 <mbedtls_pk_setup>
 8086e78:	b950      	cbnz	r0, 8086e90 <mbedtls_pk_parse_key+0x188>
 8086e7a:	4632      	mov	r2, r6
 8086e7c:	4621      	mov	r1, r4
 8086e7e:	6868      	ldr	r0, [r5, #4]
 8086e80:	f7ff fc9a 	bl	80867b8 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
 8086e84:	b920      	cbnz	r0, 8086e90 <mbedtls_pk_parse_key+0x188>
 8086e86:	e7de      	b.n	8086e46 <mbedtls_pk_parse_key+0x13e>
        return( ret );
    }
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
 8086e88:	480c      	ldr	r0, [pc, #48]	; (8086ebc <mbedtls_pk_parse_key+0x1b4>)
 8086e8a:	e005      	b.n	8086e98 <mbedtls_pk_parse_key+0x190>

        if( keylen == 0 )
            return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );

        if( ( key_copy = (unsigned char *)mbedtls_calloc( 1, keylen ) ) == NULL )
            return( MBEDTLS_ERR_PK_ALLOC_FAILED );
 8086e8c:	480c      	ldr	r0, [pc, #48]	; (8086ec0 <mbedtls_pk_parse_key+0x1b8>)
 8086e8e:	e003      	b.n	8086e98 <mbedtls_pk_parse_key+0x190>
    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
        ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ),
                                        key, keylen ) ) != 0 )
    {
        mbedtls_pk_free( pk );
 8086e90:	4628      	mov	r0, r5
 8086e92:	f005 fb0e 	bl	808c4b2 <mbedtls_pk_free>
        return( 0 );
    }

#endif /* MBEDTLS_ECP_C */

    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 8086e96:	480b      	ldr	r0, [pc, #44]	; (8086ec4 <mbedtls_pk_parse_key+0x1bc>)
}
 8086e98:	b009      	add	sp, #36	; 0x24
 8086e9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8086e9e:	bf00      	nop
 8086ea0:	08093ad2 	.word	0x08093ad2
 8086ea4:	08093af0 	.word	0x08093af0
 8086ea8:	ffffc480 	.word	0xffffc480
 8086eac:	08093b10 	.word	0x08093b10
 8086eb0:	08093b2a 	.word	0x08093b2a
 8086eb4:	08093b46 	.word	0x08093b46
 8086eb8:	08093b6a 	.word	0x08093b6a
 8086ebc:	ffffc400 	.word	0xffffc400
 8086ec0:	ffffc080 	.word	0xffffc080
 8086ec4:	ffffc300 	.word	0xffffc300

08086ec8 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>:
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],
                      unsigned char output[16] )
{
 8086ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086ecc:	7bcb      	ldrb	r3, [r1, #15]
 8086ece:	b093      	sub	sp, #76	; 0x4c
 8086ed0:	f003 030f 	and.w	r3, r3, #15
 8086ed4:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    }
#endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */

    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
 8086ed8:	e9d3 6730 	ldrd	r6, r7, [r3, #192]	; 0xc0
    zl = ctx->HL[lo];
 8086edc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
        if( i != 15 )
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
 8086ee0:	f8df c150 	ldr.w	ip, [pc, #336]	; 8087034 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0x16c>
 8086ee4:	f101 0310 	add.w	r3, r1, #16
 8086ee8:	9310      	str	r3, [sp, #64]	; 0x40
    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
    {
        lo = x[i] & 0xf;
 8086eea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8086eec:	f813 ed01 	ldrb.w	lr, [r3, #-1]!
 8086ef0:	9310      	str	r3, [sp, #64]	; 0x40
 8086ef2:	f00e 030f 	and.w	r3, lr, #15
 8086ef6:	9311      	str	r3, [sp, #68]	; 0x44
        hi = x[i] >> 4;

        if( i != 15 )
 8086ef8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
    {
        lo = x[i] & 0xf;
        hi = x[i] >> 4;
 8086efa:	ea4f 1e2e 	mov.w	lr, lr, asr #4

        if( i != 15 )
 8086efe:	ebc1 0803 	rsb	r8, r1, r3
 8086f02:	f1b8 0f0f 	cmp.w	r8, #15
 8086f06:	d03a      	beq.n	8086f7e <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0xb6>
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
 8086f08:	0923      	lsrs	r3, r4, #4
 8086f0a:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8086f0e:	9300      	str	r3, [sp, #0]
 8086f10:	092b      	lsrs	r3, r5, #4
 8086f12:	9301      	str	r3, [sp, #4]
 8086f14:	0733      	lsls	r3, r6, #28
 8086f16:	9309      	str	r3, [sp, #36]	; 0x24
 8086f18:	2300      	movs	r3, #0
 8086f1a:	9308      	str	r3, [sp, #32]
 8086f1c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8086f1e:	e9dd ab00 	ldrd	sl, fp, [sp]
 8086f22:	eb00 05c3 	add.w	r5, r0, r3, lsl #3
 8086f26:	0933      	lsrs	r3, r6, #4
 8086f28:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8086f2c:	9304      	str	r3, [sp, #16]
 8086f2e:	093b      	lsrs	r3, r7, #4
 8086f30:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8086f34:	9305      	str	r3, [sp, #20]
 8086f36:	ea48 080a 	orr.w	r8, r8, sl
 8086f3a:	ea49 090b 	orr.w	r9, r9, fp
 8086f3e:	e9d5 6730 	ldrd	r6, r7, [r5, #192]	; 0xc0
 8086f42:	46c2      	mov	sl, r8
 8086f44:	46cb      	mov	fp, r9
 8086f46:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8086f4a:	ea88 0806 	eor.w	r8, r8, r6
 8086f4e:	4646      	mov	r6, r8
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
 8086f50:	f004 040f 	and.w	r4, r4, #15
            zh ^= ctx->HH[lo];
 8086f54:	f85c 4034 	ldr.w	r4, [ip, r4, lsl #3]
 8086f58:	ea89 0907 	eor.w	r9, r9, r7
 8086f5c:	0423      	lsls	r3, r4, #16
 8086f5e:	930d      	str	r3, [sp, #52]	; 0x34
 8086f60:	2300      	movs	r3, #0
 8086f62:	464f      	mov	r7, r9
 8086f64:	930c      	str	r3, [sp, #48]	; 0x30
 8086f66:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8086f6a:	4073      	eors	r3, r6
 8086f6c:	461e      	mov	r6, r3
 8086f6e:	407c      	eors	r4, r7
 8086f70:	4627      	mov	r7, r4
            zl ^= ctx->HL[lo];
 8086f72:	e9d5 4510 	ldrd	r4, r5, [r5, #64]	; 0x40
 8086f76:	ea84 040a 	eor.w	r4, r4, sl
 8086f7a:	ea85 050b 	eor.w	r5, r5, fp

        }

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
 8086f7e:	0923      	lsrs	r3, r4, #4
 8086f80:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8086f84:	9302      	str	r3, [sp, #8]
 8086f86:	092b      	lsrs	r3, r5, #4
 8086f88:	9303      	str	r3, [sp, #12]
 8086f8a:	0733      	lsls	r3, r6, #28
 8086f8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8086f8e:	2300      	movs	r3, #0
 8086f90:	930a      	str	r3, [sp, #40]	; 0x28
 8086f92:	0933      	lsrs	r3, r6, #4
 8086f94:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8086f98:	9306      	str	r3, [sp, #24]
 8086f9a:	093b      	lsrs	r3, r7, #4
 8086f9c:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 8086fa0:	9307      	str	r3, [sp, #28]
 8086fa2:	e9de 6730 	ldrd	r6, r7, [lr, #192]	; 0xc0
 8086fa6:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 8086faa:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
 8086fae:	ea48 080a 	orr.w	r8, r8, sl
 8086fb2:	ea49 090b 	orr.w	r9, r9, fp
 8086fb6:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8086fba:	ea8a 0a06 	eor.w	sl, sl, r6
 8086fbe:	4656      	mov	r6, sl
 8086fc0:	ea8b 0b07 	eor.w	fp, fp, r7
 8086fc4:	465f      	mov	r7, fp
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
 8086fc6:	f004 040f 	and.w	r4, r4, #15
        zh ^= ctx->HH[hi];
 8086fca:	f85c 4034 	ldr.w	r4, [ip, r4, lsl #3]
 8086fce:	0423      	lsls	r3, r4, #16
 8086fd0:	930f      	str	r3, [sp, #60]	; 0x3c
 8086fd2:	2300      	movs	r3, #0
 8086fd4:	930e      	str	r3, [sp, #56]	; 0x38
 8086fd6:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 8086fda:	4073      	eors	r3, r6
 8086fdc:	461e      	mov	r6, r3
    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
 8086fde:	9b10      	ldr	r3, [sp, #64]	; 0x40

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
 8086fe0:	407c      	eors	r4, r7
    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
 8086fe2:	4299      	cmp	r1, r3

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
 8086fe4:	4627      	mov	r7, r4
        zl ^= ctx->HL[hi];
 8086fe6:	e9de 4510 	ldrd	r4, r5, [lr, #64]	; 0x40
 8086fea:	ea84 0408 	eor.w	r4, r4, r8
 8086fee:	ea85 0509 	eor.w	r5, r5, r9
    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
 8086ff2:	f47f af7a 	bne.w	8086eea <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0x22>
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
        zl ^= ctx->HL[hi];
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
 8086ff6:	0e3b      	lsrs	r3, r7, #24
 8086ff8:	7013      	strb	r3, [r2, #0]
 8086ffa:	0c3b      	lsrs	r3, r7, #16
 8086ffc:	7053      	strb	r3, [r2, #1]
 8086ffe:	0a3b      	lsrs	r3, r7, #8
 8087000:	7093      	strb	r3, [r2, #2]
    PUT_UINT32_BE( zh, output, 4 );
 8087002:	0e33      	lsrs	r3, r6, #24
 8087004:	7113      	strb	r3, [r2, #4]
 8087006:	0c33      	lsrs	r3, r6, #16
 8087008:	7153      	strb	r3, [r2, #5]
 808700a:	0a33      	lsrs	r3, r6, #8
 808700c:	7193      	strb	r3, [r2, #6]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 808700e:	0e2b      	lsrs	r3, r5, #24
 8087010:	7213      	strb	r3, [r2, #8]
 8087012:	0c2b      	lsrs	r3, r5, #16
 8087014:	7253      	strb	r3, [r2, #9]
 8087016:	0a2b      	lsrs	r3, r5, #8
 8087018:	7293      	strb	r3, [r2, #10]
    PUT_UINT32_BE( zl, output, 12 );
 808701a:	0e23      	lsrs	r3, r4, #24
 808701c:	7313      	strb	r3, [r2, #12]
 808701e:	0c23      	lsrs	r3, r4, #16
 8087020:	7353      	strb	r3, [r2, #13]
 8087022:	0a23      	lsrs	r3, r4, #8
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
        zl ^= ctx->HL[hi];
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
 8087024:	70d7      	strb	r7, [r2, #3]
    PUT_UINT32_BE( zh, output, 4 );
 8087026:	71d6      	strb	r6, [r2, #7]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 8087028:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_BE( zl, output, 12 );
 808702a:	7393      	strb	r3, [r2, #14]
 808702c:	73d4      	strb	r4, [r2, #15]
}
 808702e:	b013      	add	sp, #76	; 0x4c
 8087030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8087034:	08093bc8 	.word	0x08093bc8

08087038 <mbedtls_gcm_init>:
/*
 * Initialize a context
 */
void mbedtls_gcm_init( mbedtls_gcm_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_gcm_context ) );
 8087038:	f44f 72c4 	mov.w	r2, #392	; 0x188
 808703c:	2100      	movs	r1, #0
 808703e:	f00b b9aa 	b.w	8092396 <memset>

08087042 <mbedtls_gcm_setkey>:

int mbedtls_gcm_setkey( mbedtls_gcm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
 8087042:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8087046:	4604      	mov	r4, r0
 8087048:	b08d      	sub	sp, #52	; 0x34
 808704a:	4608      	mov	r0, r1
 808704c:	4691      	mov	r9, r2
    int ret;
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 808704e:	4619      	mov	r1, r3
 8087050:	2201      	movs	r2, #1

int mbedtls_gcm_setkey( mbedtls_gcm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
 8087052:	4698      	mov	r8, r3
    int ret;
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 8087054:	f7fb feda 	bl	8082e0c <mbedtls_cipher_info_from_values>
    if( cipher_info == NULL )
 8087058:	2800      	cmp	r0, #0
 808705a:	f000 809b 	beq.w	8087194 <mbedtls_gcm_setkey+0x152>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    if( cipher_info->block_size != 16 )
 808705e:	6945      	ldr	r5, [r0, #20]
 8087060:	9002      	str	r0, [sp, #8]
 8087062:	2d10      	cmp	r5, #16
 8087064:	f040 8096 	bne.w	8087194 <mbedtls_gcm_setkey+0x152>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    mbedtls_cipher_free( &ctx->cipher_ctx );
 8087068:	4620      	mov	r0, r4
 808706a:	f7fb fee7 	bl	8082e3c <mbedtls_cipher_free>

    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
 808706e:	9902      	ldr	r1, [sp, #8]
 8087070:	4620      	mov	r0, r4
 8087072:	f7fc f8b3 	bl	80831dc <mbedtls_cipher_setup>
 8087076:	2800      	cmp	r0, #0
 8087078:	f040 808e 	bne.w	8087198 <mbedtls_gcm_setkey+0x156>
        return( ret );

    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 808707c:	2301      	movs	r3, #1
 808707e:	4642      	mov	r2, r8
 8087080:	4649      	mov	r1, r9
 8087082:	4620      	mov	r0, r4
 8087084:	f7fb feec 	bl	8082e60 <mbedtls_cipher_setkey>
 8087088:	2800      	cmp	r0, #0
 808708a:	f040 8085 	bne.w	8087198 <mbedtls_gcm_setkey+0x156>
    uint64_t hi, lo;
    uint64_t vl, vh;
    unsigned char h[16];
    size_t olen = 0;

    memset( h, 0, 16 );
 808708e:	4601      	mov	r1, r0
{
    int ret, i, j;
    uint64_t hi, lo;
    uint64_t vl, vh;
    unsigned char h[16];
    size_t olen = 0;
 8087090:	9007      	str	r0, [sp, #28]

    memset( h, 0, 16 );
 8087092:	462a      	mov	r2, r5
 8087094:	a808      	add	r0, sp, #32
 8087096:	f00b f97e 	bl	8092396 <memset>
    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, h, 16, h, &olen ) ) != 0 )
 808709a:	ab07      	add	r3, sp, #28
 808709c:	9300      	str	r3, [sp, #0]
 808709e:	ab08      	add	r3, sp, #32
 80870a0:	462a      	mov	r2, r5
 80870a2:	4619      	mov	r1, r3
 80870a4:	4620      	mov	r0, r4
 80870a6:	f7fb ff29 	bl	8082efc <mbedtls_cipher_update>
 80870aa:	2800      	cmp	r0, #0
 80870ac:	d174      	bne.n	8087198 <mbedtls_gcm_setkey+0x156>
        return( ret );

    /* pack h as two 64-bits ints, big-endian */
    GET_UINT32_BE( hi, h,  0  );
    GET_UINT32_BE( lo, h,  4  );
    vh = (uint64_t) hi << 32 | lo;
 80870ae:	4602      	mov	r2, r0
 80870b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80870b2:	9908      	ldr	r1, [sp, #32]
 80870b4:	ba1d      	rev	r5, r3
 80870b6:	432a      	orrs	r2, r5

    GET_UINT32_BE( hi, h,  8  );
    GET_UINT32_BE( lo, h,  12 );
    vl = (uint64_t) hi << 32 | lo;
 80870b8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
        return( ret );

    /* pack h as two 64-bits ints, big-endian */
    GET_UINT32_BE( hi, h,  0  );
    GET_UINT32_BE( lo, h,  4  );
    vh = (uint64_t) hi << 32 | lo;
 80870ba:	ba0b      	rev	r3, r1
 80870bc:	990b      	ldr	r1, [sp, #44]	; 0x2c

    GET_UINT32_BE( hi, h,  8  );
    GET_UINT32_BE( lo, h,  12 );
    vl = (uint64_t) hi << 32 | lo;
 80870be:	fa95 f985 	rev.w	r9, r5
 80870c2:	fa91 fe81 	rev.w	lr, r1
 80870c6:	4649      	mov	r1, r9
 80870c8:	ea40 000e 	orr.w	r0, r0, lr

    /* 8 = 1000 corresponds to 1 in GF(2^128) */
    ctx->HL[8] = vl;
    ctx->HH[8] = vh;
 80870cc:	f504 7580 	add.w	r5, r4, #256	; 0x100
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_CLMUL ) )
        return( 0 );
#endif

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
 80870d0:	f04f 0800 	mov.w	r8, #0
 80870d4:	f04f 0900 	mov.w	r9, #0
    GET_UINT32_BE( hi, h,  8  );
    GET_UINT32_BE( lo, h,  12 );
    vl = (uint64_t) hi << 32 | lo;

    /* 8 = 1000 corresponds to 1 in GF(2^128) */
    ctx->HL[8] = vl;
 80870d8:	e9c4 0120 	strd	r0, r1, [r4, #128]	; 0x80
    ctx->HH[8] = vh;
 80870dc:	e9c5 2300 	strd	r2, r3, [r5]
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_CLMUL ) )
        return( 0 );
#endif

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
 80870e0:	e9c4 8930 	strd	r8, r9, [r4, #192]	; 0xc0
    ctx->HL[0] = 0;
 80870e4:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
 80870e8:	f04f 0e03 	mov.w	lr, #3

    for( i = 4; i > 0; i >>= 1 )
 80870ec:	2504      	movs	r5, #4
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 80870ee:	f04f 4c61 	mov.w	ip, #3774873600	; 0xe1000000
 80870f2:	f000 0801 	and.w	r8, r0, #1
        vl  = ( vh << 63 ) | ( vl >> 1 );
 80870f6:	07d7      	lsls	r7, r2, #31
 80870f8:	0849      	lsrs	r1, r1, #1
 80870fa:	ea4f 0030 	mov.w	r0, r0, rrx
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 80870fe:	085b      	lsrs	r3, r3, #1
 8087100:	ea4f 0232 	mov.w	r2, r2, rrx
 8087104:	fb0c fb08 	mul.w	fp, ip, r8
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
        vl  = ( vh << 63 ) | ( vl >> 1 );
 8087108:	2600      	movs	r6, #0
 808710a:	eb04 08c5 	add.w	r8, r4, r5, lsl #3
 808710e:	4330      	orrs	r0, r6
 8087110:	4339      	orrs	r1, r7
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 8087112:	4072      	eors	r2, r6
 8087114:	ea83 030b 	eor.w	r3, r3, fp

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
 8087118:	f1be 0e01 	subs.w	lr, lr, #1
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
        vl  = ( vh << 63 ) | ( vl >> 1 );
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);

        ctx->HL[i] = vl;
 808711c:	e9c8 0110 	strd	r0, r1, [r8, #64]	; 0x40
        ctx->HH[i] = vh;
 8087120:	e9c8 2330 	strd	r2, r3, [r8, #192]	; 0xc0

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
 8087124:	ea4f 0565 	mov.w	r5, r5, asr #1
 8087128:	d1e3      	bne.n	80870f2 <mbedtls_gcm_setkey+0xb0>
 808712a:	2003      	movs	r0, #3
 808712c:	2102      	movs	r1, #2
        ctx->HH[i] = vh;
    }

    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
 808712e:	f104 0840 	add.w	r8, r4, #64	; 0x40
 8087132:	f104 0cc0 	add.w	ip, r4, #192	; 0xc0
 8087136:	00cb      	lsls	r3, r1, #3
 8087138:	eb08 0e03 	add.w	lr, r8, r3
 808713c:	4463      	add	r3, ip
        vh = *HiH;
 808713e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8087142:	e9cd 4502 	strd	r4, r5, [sp, #8]
        vl = *HiL;
 8087146:	e9de 4500 	ldrd	r4, r5, [lr]
 808714a:	e9cd 4504 	strd	r4, r5, [sp, #16]
 808714e:	4665      	mov	r5, ip
 8087150:	4644      	mov	r4, r8
        for( j = 1; j < i; j++ )
 8087152:	2201      	movs	r2, #1
        {
            HiH[j] = vh ^ ctx->HH[j];
 8087154:	e9f5 6702 	ldrd	r6, r7, [r5, #8]!
 8087158:	e9dd 9a02 	ldrd	r9, sl, [sp, #8]
 808715c:	ea89 0906 	eor.w	r9, r9, r6
 8087160:	ea8a 0a07 	eor.w	sl, sl, r7
 8087164:	464e      	mov	r6, r9
 8087166:	4657      	mov	r7, sl
            HiL[j] = vl ^ ctx->HL[j];
 8087168:	e9dd 9a04 	ldrd	r9, sl, [sp, #16]
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
        vh = *HiH;
        vl = *HiL;
        for( j = 1; j < i; j++ )
        {
            HiH[j] = vh ^ ctx->HH[j];
 808716c:	e9e3 6702 	strd	r6, r7, [r3, #8]!
            HiL[j] = vl ^ ctx->HL[j];
 8087170:	e9f4 6702 	ldrd	r6, r7, [r4, #8]!
 8087174:	ea89 0906 	eor.w	r9, r9, r6
 8087178:	ea8a 0a07 	eor.w	sl, sl, r7
 808717c:	464e      	mov	r6, r9
 808717e:	4657      	mov	r7, sl
    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
        vh = *HiH;
        vl = *HiL;
        for( j = 1; j < i; j++ )
 8087180:	3201      	adds	r2, #1
 8087182:	428a      	cmp	r2, r1
        {
            HiH[j] = vh ^ ctx->HH[j];
            HiL[j] = vl ^ ctx->HL[j];
 8087184:	e9ee 6702 	strd	r6, r7, [lr, #8]!
    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
        vh = *HiH;
        vl = *HiL;
        for( j = 1; j < i; j++ )
 8087188:	d1e4      	bne.n	8087154 <mbedtls_gcm_setkey+0x112>

        ctx->HL[i] = vl;
        ctx->HH[i] = vh;
    }

    for( i = 2; i <= 8; i *= 2 )
 808718a:	3801      	subs	r0, #1
 808718c:	ea4f 0142 	mov.w	r1, r2, lsl #1
 8087190:	d1d1      	bne.n	8087136 <mbedtls_gcm_setkey+0xf4>
 8087192:	e001      	b.n	8087198 <mbedtls_gcm_setkey+0x156>
    int ret;
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8087194:	f06f 0013 	mvn.w	r0, #19

    if( ( ret = gcm_gen_table( ctx ) ) != 0 )
        return( ret );

    return( 0 );
}
 8087198:	b00d      	add	sp, #52	; 0x34
 808719a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808719e <mbedtls_gcm_starts>:
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
 808719e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
 80871a2:	f04f 0900 	mov.w	r9, #0
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
 80871a6:	b08b      	sub	sp, #44	; 0x2c
 80871a8:	4604      	mov	r4, r0
 80871aa:	468b      	mov	fp, r1
 80871ac:	4690      	mov	r8, r2
 80871ae:	9e15      	ldr	r6, [sp, #84]	; 0x54
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
 80871b0:	f8cd 9014 	str.w	r9, [sp, #20]

    /* IV and AD are limited to 2^64 bits, so 2^61 bytes */
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
 80871b4:	461d      	mov	r5, r3
 80871b6:	2b00      	cmp	r3, #0
 80871b8:	f000 808d 	beq.w	80872d6 <mbedtls_gcm_starts+0x138>
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
 80871bc:	f500 77b0 	add.w	r7, r0, #352	; 0x160
 80871c0:	2210      	movs	r2, #16
 80871c2:	4649      	mov	r1, r9
 80871c4:	4638      	mov	r0, r7
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 80871c6:	f504 7ab8 	add.w	sl, r4, #368	; 0x170
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
 80871ca:	f00b f8e4 	bl	8092396 <memset>
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 80871ce:	4649      	mov	r1, r9
 80871d0:	2210      	movs	r2, #16
 80871d2:	4650      	mov	r0, sl
 80871d4:	f00b f8df 	bl	8092396 <memset>

    ctx->mode = mode;
 80871d8:	f8c4 b180 	str.w	fp, [r4, #384]	; 0x180
    ctx->len = 0;
    ctx->add_len = 0;
 80871dc:	46a3      	mov	fp, r4

    memset( ctx->y, 0x00, sizeof(ctx->y) );
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );

    ctx->mode = mode;
    ctx->len = 0;
 80871de:	2000      	movs	r0, #0
 80871e0:	2100      	movs	r1, #0
 80871e2:	f504 73a0 	add.w	r3, r4, #320	; 0x140
    ctx->add_len = 0;

    if( iv_len == 12 )
 80871e6:	2d0c      	cmp	r5, #12

    memset( ctx->y, 0x00, sizeof(ctx->y) );
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );

    ctx->mode = mode;
    ctx->len = 0;
 80871e8:	e9c3 0100 	strd	r0, r1, [r3]
    ctx->add_len = 0;
 80871ec:	e9eb 0152 	strd	r0, r1, [fp, #328]!	; 0x148

    if( iv_len == 12 )
 80871f0:	d10d      	bne.n	808720e <mbedtls_gcm_starts+0x70>
    {
        memcpy( ctx->y, iv, iv_len );
 80871f2:	f8d8 3000 	ldr.w	r3, [r8]
 80871f6:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
 80871fa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80871fe:	607b      	str	r3, [r7, #4]
 8087200:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8087204:	60bb      	str	r3, [r7, #8]
        ctx->y[15] = 1;
 8087206:	2301      	movs	r3, #1
 8087208:	f884 316f 	strb.w	r3, [r4, #367]	; 0x16f
 808720c:	e03a      	b.n	8087284 <mbedtls_gcm_starts+0xe6>
    }
    else
    {
        memset( work_buf, 0x00, 16 );
 808720e:	2210      	movs	r2, #16
 8087210:	4649      	mov	r1, r9
 8087212:	a806      	add	r0, sp, #24
 8087214:	f00b f8bf 	bl	8092396 <memset>
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
 8087218:	00eb      	lsls	r3, r5, #3
 808721a:	0e1a      	lsrs	r2, r3, #24
 808721c:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8087220:	0c1a      	lsrs	r2, r3, #16
 8087222:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
 8087226:	0a1a      	lsrs	r2, r3, #8
 8087228:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
 808722c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27

        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;
 8087230:	462b      	mov	r3, r5
 8087232:	f204 195f 	addw	r9, r4, #351	; 0x15f
 8087236:	4649      	mov	r1, r9
 8087238:	2d10      	cmp	r5, #16
 808723a:	bf28      	it	cs
 808723c:	2310      	movcs	r3, #16
 808723e:	4642      	mov	r2, r8
 8087240:	4498      	add	r8, r3

            for( i = 0; i < use_len; i++ )
                ctx->y[i] ^= p[i];
 8087242:	f812 eb01 	ldrb.w	lr, [r2], #1
 8087246:	f811 0f01 	ldrb.w	r0, [r1, #1]!
        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;

            for( i = 0; i < use_len; i++ )
 808724a:	4542      	cmp	r2, r8
                ctx->y[i] ^= p[i];
 808724c:	ea8e 0000 	eor.w	r0, lr, r0
 8087250:	7008      	strb	r0, [r1, #0]
        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;

            for( i = 0; i < use_len; i++ )
 8087252:	d1f6      	bne.n	8087242 <mbedtls_gcm_starts+0xa4>
                ctx->y[i] ^= p[i];

            gcm_mult( ctx, ctx->y, ctx->y );
 8087254:	463a      	mov	r2, r7
 8087256:	4639      	mov	r1, r7
 8087258:	4620      	mov	r0, r4
 808725a:	9303      	str	r3, [sp, #12]
 808725c:	f7ff fe34 	bl	8086ec8 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
    {
        memset( work_buf, 0x00, 16 );
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );

        p = iv;
        while( iv_len > 0 )
 8087260:	9b03      	ldr	r3, [sp, #12]
 8087262:	1aed      	subs	r5, r5, r3
 8087264:	d1e4      	bne.n	8087230 <mbedtls_gcm_starts+0x92>
            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
            ctx->y[i] ^= work_buf[i];
 8087266:	ab06      	add	r3, sp, #24
 8087268:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 808726c:	5d5b      	ldrb	r3, [r3, r5]

            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
 808726e:	3501      	adds	r5, #1
            ctx->y[i] ^= work_buf[i];
 8087270:	4053      	eors	r3, r2

            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
 8087272:	2d10      	cmp	r5, #16
            ctx->y[i] ^= work_buf[i];
 8087274:	f889 3000 	strb.w	r3, [r9]

            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
 8087278:	d1f5      	bne.n	8087266 <mbedtls_gcm_starts+0xc8>
            ctx->y[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->y, ctx->y );
 808727a:	463a      	mov	r2, r7
 808727c:	4639      	mov	r1, r7
 808727e:	4620      	mov	r0, r4
 8087280:	f7ff fe22 	bl	8086ec8 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
    }

    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ctx->base_ectr,
 8087284:	ab05      	add	r3, sp, #20
 8087286:	9300      	str	r3, [sp, #0]
 8087288:	2210      	movs	r2, #16
 808728a:	f504 73a8 	add.w	r3, r4, #336	; 0x150
 808728e:	4639      	mov	r1, r7
 8087290:	4620      	mov	r0, r4
 8087292:	f7fb fe33 	bl	8082efc <mbedtls_cipher_update>
 8087296:	bb10      	cbnz	r0, 80872de <mbedtls_gcm_starts+0x140>
                             &olen ) ) != 0 )
    {
        return( ret );
    }

    ctx->add_len = add_len;
 8087298:	f8c4 6148 	str.w	r6, [r4, #328]	; 0x148
 808729c:	f8cb 0004 	str.w	r0, [fp, #4]
    p = add;
    while( add_len > 0 )
 80872a0:	b1e6      	cbz	r6, 80872dc <mbedtls_gcm_starts+0x13e>
 80872a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    {
        use_len = ( add_len < 16 ) ? add_len : 16;
 80872a4:	4635      	mov	r5, r6
 80872a6:	4619      	mov	r1, r3
 80872a8:	2e10      	cmp	r6, #16
 80872aa:	bf28      	it	cs
 80872ac:	2510      	movcs	r5, #16
 80872ae:	4429      	add	r1, r5
 80872b0:	f204 126f 	addw	r2, r4, #367	; 0x16f
 80872b4:	9114      	str	r1, [sp, #80]	; 0x50

        for( i = 0; i < use_len; i++ )
            ctx->buf[i] ^= p[i];
 80872b6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80872ba:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80872be:	4041      	eors	r1, r0
 80872c0:	7011      	strb	r1, [r2, #0]
    p = add;
    while( add_len > 0 )
    {
        use_len = ( add_len < 16 ) ? add_len : 16;

        for( i = 0; i < use_len; i++ )
 80872c2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80872c4:	4299      	cmp	r1, r3
 80872c6:	d1f6      	bne.n	80872b6 <mbedtls_gcm_starts+0x118>
            ctx->buf[i] ^= p[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );
 80872c8:	4652      	mov	r2, sl
 80872ca:	4651      	mov	r1, sl
 80872cc:	4620      	mov	r0, r4
 80872ce:	f7ff fdfb 	bl	8086ec8 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>

        add_len -= use_len;
 80872d2:	1b76      	subs	r6, r6, r5
        return( ret );
    }

    ctx->add_len = add_len;
    p = add;
    while( add_len > 0 )
 80872d4:	e7e4      	b.n	80872a0 <mbedtls_gcm_starts+0x102>
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
      ( (uint64_t) iv_len  ) >> 61 != 0 ||
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 80872d6:	f06f 0013 	mvn.w	r0, #19
 80872da:	e000      	b.n	80872de <mbedtls_gcm_starts+0x140>

        add_len -= use_len;
        p += use_len;
    }

    return( 0 );
 80872dc:	4630      	mov	r0, r6
}
 80872de:	b00b      	add	sp, #44	; 0x2c
 80872e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080872e4 <mbedtls_gcm_update>:

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
 80872e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80872e8:	461f      	mov	r7, r3
 80872ea:	b08b      	sub	sp, #44	; 0x2c
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;
 80872ec:	2300      	movs	r3, #0

    if( output > input && (size_t) ( output - input ) < length )
 80872ee:	4297      	cmp	r7, r2

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
 80872f0:	4604      	mov	r4, r0
 80872f2:	460e      	mov	r6, r1
 80872f4:	4690      	mov	r8, r2
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;
 80872f6:	9305      	str	r3, [sp, #20]

    if( output > input && (size_t) ( output - input ) < length )
 80872f8:	d902      	bls.n	8087300 <mbedtls_gcm_update+0x1c>
 80872fa:	1abb      	subs	r3, r7, r2
 80872fc:	428b      	cmp	r3, r1
 80872fe:	d35c      	bcc.n	80873ba <mbedtls_gcm_update+0xd6>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */
    if( ctx->len + length < ctx->len ||
 8087300:	4625      	mov	r5, r4
 8087302:	e9f5 0150 	ldrd	r0, r1, [r5, #320]!	; 0x140
 8087306:	1982      	adds	r2, r0, r6
 8087308:	f141 0300 	adc.w	r3, r1, #0
 808730c:	428b      	cmp	r3, r1
 808730e:	bf08      	it	eq
 8087310:	4282      	cmpeq	r2, r0
 8087312:	d352      	bcc.n	80873ba <mbedtls_gcm_update+0xd6>
 8087314:	210f      	movs	r1, #15
 8087316:	f06f 001f 	mvn.w	r0, #31
 808731a:	4299      	cmp	r1, r3
 808731c:	bf08      	it	eq
 808731e:	4290      	cmpeq	r0, r2
 8087320:	d34b      	bcc.n	80873ba <mbedtls_gcm_update+0xd6>
        (uint64_t) ctx->len + length > 0xFFFFFFFE0ull )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    ctx->len += length;
 8087322:	e9c5 2300 	strd	r2, r3, [r5]
 8087326:	f504 73b6 	add.w	r3, r4, #364	; 0x16c
 808732a:	9302      	str	r3, [sp, #8]

        for( i = 16; i > 12; i-- )
            if( ++ctx->y[i - 1] != 0 )
                break;

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 808732c:	f504 73b0 	add.w	r3, r4, #352	; 0x160
 8087330:	f10d 0a18 	add.w	sl, sp, #24
 8087334:	9303      	str	r3, [sp, #12]
    }

    ctx->len += length;

    p = input;
    while( length > 0 )
 8087336:	2e00      	cmp	r6, #0
 8087338:	d042      	beq.n	80873c0 <mbedtls_gcm_update+0xdc>
 808733a:	f504 75b8 	add.w	r5, r4, #368	; 0x170
    {
        use_len = ( length < 16 ) ? length : 16;
 808733e:	462a      	mov	r2, r5
 8087340:	46ab      	mov	fp, r5
 8087342:	2e10      	cmp	r6, #16
 8087344:	46b1      	mov	r9, r6
 8087346:	bf28      	it	cs
 8087348:	f04f 0910 	movcs.w	r9, #16

        for( i = 16; i > 12; i-- )
            if( ++ctx->y[i - 1] != 0 )
 808734c:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 8087350:	3301      	adds	r3, #1
 8087352:	b2db      	uxtb	r3, r3
 8087354:	7013      	strb	r3, [r2, #0]
 8087356:	b913      	cbnz	r3, 808735e <mbedtls_gcm_update+0x7a>
    p = input;
    while( length > 0 )
    {
        use_len = ( length < 16 ) ? length : 16;

        for( i = 16; i > 12; i-- )
 8087358:	9b02      	ldr	r3, [sp, #8]
 808735a:	429a      	cmp	r2, r3
 808735c:	d1f6      	bne.n	808734c <mbedtls_gcm_update+0x68>
            if( ++ctx->y[i - 1] != 0 )
                break;

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 808735e:	ab05      	add	r3, sp, #20
 8087360:	9300      	str	r3, [sp, #0]
 8087362:	2210      	movs	r2, #16
 8087364:	4653      	mov	r3, sl
 8087366:	9903      	ldr	r1, [sp, #12]
 8087368:	4620      	mov	r0, r4
 808736a:	f7fb fdc7 	bl	8082efc <mbedtls_cipher_update>
 808736e:	bb40      	cbnz	r0, 80873c2 <mbedtls_gcm_update+0xde>
 8087370:	4642      	mov	r2, r8
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
        {
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
 8087372:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8087376:	b91b      	cbnz	r3, 8087380 <mbedtls_gcm_update+0x9c>
                ctx->buf[i] ^= p[i];
 8087378:	7829      	ldrb	r1, [r5, #0]
 808737a:	7813      	ldrb	r3, [r2, #0]
 808737c:	404b      	eors	r3, r1
 808737e:	702b      	strb	r3, [r5, #0]
            out_p[i] = ectr[i] ^ p[i];
 8087380:	f812 1b01 	ldrb.w	r1, [r2], #1
 8087384:	f81a 3000 	ldrb.w	r3, [sl, r0]
 8087388:	3501      	adds	r5, #1
 808738a:	404b      	eors	r3, r1
 808738c:	543b      	strb	r3, [r7, r0]
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
 808738e:	f8d4 1180 	ldr.w	r1, [r4, #384]	; 0x180
                                   &olen ) ) != 0 )
        {
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
 8087392:	3001      	adds	r0, #1
        {
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
                ctx->buf[i] ^= p[i];
            out_p[i] = ectr[i] ^ p[i];
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
 8087394:	2901      	cmp	r1, #1
                ctx->buf[i] ^= out_p[i];
 8087396:	bf02      	ittt	eq
 8087398:	f815 1c01 	ldrbeq.w	r1, [r5, #-1]
 808739c:	404b      	eoreq	r3, r1
 808739e:	f805 3c01 	strbeq.w	r3, [r5, #-1]
                                   &olen ) ) != 0 )
        {
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
 80873a2:	4581      	cmp	r9, r0
 80873a4:	d1e5      	bne.n	8087372 <mbedtls_gcm_update+0x8e>
            out_p[i] = ectr[i] ^ p[i];
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
                ctx->buf[i] ^= out_p[i];
        }

        gcm_mult( ctx, ctx->buf, ctx->buf );
 80873a6:	465a      	mov	r2, fp
 80873a8:	4659      	mov	r1, fp
 80873aa:	4620      	mov	r0, r4
 80873ac:	f7ff fd8c 	bl	8086ec8 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>

        length -= use_len;
 80873b0:	ebc9 0606 	rsb	r6, r9, r6
        p += use_len;
 80873b4:	44c8      	add	r8, r9
        out_p += use_len;
 80873b6:	444f      	add	r7, r9
    }

    ctx->len += length;

    p = input;
    while( length > 0 )
 80873b8:	e7bd      	b.n	8087336 <mbedtls_gcm_update+0x52>
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;

    if( output > input && (size_t) ( output - input ) < length )
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 80873ba:	f06f 0013 	mvn.w	r0, #19
 80873be:	e000      	b.n	80873c2 <mbedtls_gcm_update+0xde>
        length -= use_len;
        p += use_len;
        out_p += use_len;
    }

    return( 0 );
 80873c0:	4630      	mov	r0, r6
}
 80873c2:	b00b      	add	sp, #44	; 0x2c
 80873c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080873c8 <mbedtls_gcm_finish>:

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
 80873c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80873cc:	4688      	mov	r8, r1
    unsigned char work_buf[16];
    size_t i;
    uint64_t orig_len = ctx->len * 8;
 80873ce:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
 80873d2:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
 80873d6:	00cd      	lsls	r5, r1, #3
    uint64_t orig_add_len = ctx->add_len * 8;
 80873d8:	f8d0 114c 	ldr.w	r1, [r0, #332]	; 0x14c
                unsigned char *tag,
                size_t tag_len )
{
    unsigned char work_buf[16];
    size_t i;
    uint64_t orig_len = ctx->len * 8;
 80873dc:	ea45 7553 	orr.w	r5, r5, r3, lsr #29
 80873e0:	00dc      	lsls	r4, r3, #3
    uint64_t orig_add_len = ctx->add_len * 8;
 80873e2:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
 80873e6:	00cf      	lsls	r7, r1, #3
 80873e8:	ea47 7753 	orr.w	r7, r7, r3, lsr #29
 80873ec:	00de      	lsls	r6, r3, #3

    if( tag_len > 16 || tag_len < 4 )
 80873ee:	1f13      	subs	r3, r2, #4
 80873f0:	2b0c      	cmp	r3, #12
}

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
 80873f2:	4681      	mov	r9, r0
 80873f4:	4692      	mov	sl, r2
    unsigned char work_buf[16];
    size_t i;
    uint64_t orig_len = ctx->len * 8;
    uint64_t orig_add_len = ctx->add_len * 8;

    if( tag_len > 16 || tag_len < 4 )
 80873f6:	d85b      	bhi.n	80874b0 <mbedtls_gcm_finish+0xe8>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    memcpy( tag, ctx->base_ectr, tag_len );
 80873f8:	f500 71a8 	add.w	r1, r0, #336	; 0x150
 80873fc:	4640      	mov	r0, r8
 80873fe:	f00a ffa4 	bl	809234a <memcpy>

    if( orig_len || orig_add_len )
 8087402:	ea54 0305 	orrs.w	r3, r4, r5
 8087406:	d104      	bne.n	8087412 <mbedtls_gcm_finish+0x4a>
 8087408:	ea56 0307 	orrs.w	r3, r6, r7
 808740c:	d101      	bne.n	8087412 <mbedtls_gcm_finish+0x4a>

        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
    }

    return( 0 );
 808740e:	2000      	movs	r0, #0
 8087410:	e050      	b.n	80874b4 <mbedtls_gcm_finish+0xec>

    memcpy( tag, ctx->base_ectr, tag_len );

    if( orig_len || orig_add_len )
    {
        memset( work_buf, 0x00, 16 );
 8087412:	2210      	movs	r2, #16
 8087414:	2100      	movs	r1, #0
 8087416:	4668      	mov	r0, sp
 8087418:	f00a ffbd 	bl	8092396 <memset>

        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 808741c:	0e3b      	lsrs	r3, r7, #24
 808741e:	f88d 3000 	strb.w	r3, [sp]
 8087422:	0c3b      	lsrs	r3, r7, #16
 8087424:	f88d 3001 	strb.w	r3, [sp, #1]
 8087428:	0a3b      	lsrs	r3, r7, #8
 808742a:	f88d 3002 	strb.w	r3, [sp, #2]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 808742e:	0e33      	lsrs	r3, r6, #24
 8087430:	f88d 3004 	strb.w	r3, [sp, #4]
 8087434:	0c33      	lsrs	r3, r6, #16
 8087436:	f88d 3005 	strb.w	r3, [sp, #5]
 808743a:	0a33      	lsrs	r3, r6, #8
 808743c:	f88d 3006 	strb.w	r3, [sp, #6]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 8087440:	0e2b      	lsrs	r3, r5, #24
 8087442:	f88d 3008 	strb.w	r3, [sp, #8]
 8087446:	0c2b      	lsrs	r3, r5, #16
 8087448:	f88d 3009 	strb.w	r3, [sp, #9]
 808744c:	0a2b      	lsrs	r3, r5, #8
 808744e:	f88d 300a 	strb.w	r3, [sp, #10]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
 8087452:	0e23      	lsrs	r3, r4, #24
 8087454:	f88d 300c 	strb.w	r3, [sp, #12]
 8087458:	0c23      	lsrs	r3, r4, #16
 808745a:	f88d 300d 	strb.w	r3, [sp, #13]
 808745e:	f88d 400f 	strb.w	r4, [sp, #15]
 8087462:	0a23      	lsrs	r3, r4, #8
 8087464:	f209 146f 	addw	r4, r9, #367	; 0x16f
 8087468:	4622      	mov	r2, r4
 808746a:	f88d 300e 	strb.w	r3, [sp, #14]

    if( orig_len || orig_add_len )
    {
        memset( work_buf, 0x00, 16 );

        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 808746e:	f88d 7003 	strb.w	r7, [sp, #3]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 8087472:	f88d 6007 	strb.w	r6, [sp, #7]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 8087476:	f88d 500b 	strb.w	r5, [sp, #11]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
 808747a:	2300      	movs	r3, #0
            ctx->buf[i] ^= work_buf[i];
 808747c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8087480:	f81d 1003 	ldrb.w	r1, [sp, r3]
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
 8087484:	3301      	adds	r3, #1
            ctx->buf[i] ^= work_buf[i];
 8087486:	4041      	eors	r1, r0
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
 8087488:	2b10      	cmp	r3, #16
            ctx->buf[i] ^= work_buf[i];
 808748a:	7011      	strb	r1, [r2, #0]
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
 808748c:	d1f6      	bne.n	808747c <mbedtls_gcm_finish+0xb4>
            ctx->buf[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );
 808748e:	f509 72b8 	add.w	r2, r9, #368	; 0x170
 8087492:	4611      	mov	r1, r2
 8087494:	4648      	mov	r0, r9
 8087496:	f7ff fd17 	bl	8086ec8 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
 808749a:	4641      	mov	r1, r8
 808749c:	44c2      	add	sl, r8

        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
 808749e:	780a      	ldrb	r2, [r1, #0]
 80874a0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80874a4:	4053      	eors	r3, r2
 80874a6:	f801 3b01 	strb.w	r3, [r1], #1
        for( i = 0; i < 16; i++ )
            ctx->buf[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );

        for( i = 0; i < tag_len; i++ )
 80874aa:	4551      	cmp	r1, sl
 80874ac:	d1f7      	bne.n	808749e <mbedtls_gcm_finish+0xd6>
 80874ae:	e7ae      	b.n	808740e <mbedtls_gcm_finish+0x46>
    size_t i;
    uint64_t orig_len = ctx->len * 8;
    uint64_t orig_add_len = ctx->add_len * 8;

    if( tag_len > 16 || tag_len < 4 )
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 80874b0:	f06f 0013 	mvn.w	r0, #19
        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
    }

    return( 0 );
}
 80874b4:	b004      	add	sp, #16
 80874b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080874ba <mbedtls_gcm_crypt_and_tag>:
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 80874ba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80874be:	4617      	mov	r7, r2
 80874c0:	461a      	mov	r2, r3
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 80874c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 80874c4:	4604      	mov	r4, r0
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 80874c6:	9301      	str	r3, [sp, #4]
 80874c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 80874ca:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 80874ce:	9300      	str	r3, [sp, #0]
 80874d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 80874d2:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80874d6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80874d8:	9d10      	ldr	r5, [sp, #64]	; 0x40
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 80874da:	f7ff fe60 	bl	808719e <mbedtls_gcm_starts>
 80874de:	b970      	cbnz	r0, 80874fe <mbedtls_gcm_crypt_and_tag+0x44>
        return( ret );

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
 80874e0:	464b      	mov	r3, r9
 80874e2:	4642      	mov	r2, r8
 80874e4:	4639      	mov	r1, r7
 80874e6:	4620      	mov	r0, r4
 80874e8:	f7ff fefc 	bl	80872e4 <mbedtls_gcm_update>
 80874ec:	b938      	cbnz	r0, 80874fe <mbedtls_gcm_crypt_and_tag+0x44>
        return( ret );

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 80874ee:	4632      	mov	r2, r6
 80874f0:	4629      	mov	r1, r5
 80874f2:	4620      	mov	r0, r4
        return( ret );

    return( 0 );
}
 80874f4:	b003      	add	sp, #12
 80874f6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return( ret );

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
        return( ret );

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 80874fa:	f7ff bf65 	b.w	80873c8 <mbedtls_gcm_finish>
        return( ret );

    return( 0 );
}
 80874fe:	b003      	add	sp, #12
 8087500:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08087504 <mbedtls_gcm_auth_decrypt>:
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 8087504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8087506:	460e      	mov	r6, r1
 8087508:	b08d      	sub	sp, #52	; 0x34
    int ret;
    unsigned char check_tag[16];
    size_t i;
    int diff;

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 808750a:	9916      	ldr	r1, [sp, #88]	; 0x58
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 808750c:	9d15      	ldr	r5, [sp, #84]	; 0x54
    int ret;
    unsigned char check_tag[16];
    size_t i;
    int diff;

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 808750e:	9103      	str	r1, [sp, #12]
 8087510:	9913      	ldr	r1, [sp, #76]	; 0x4c
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 8087512:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    int ret;
    unsigned char check_tag[16];
    size_t i;
    int diff;

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 8087514:	9102      	str	r1, [sp, #8]
 8087516:	9912      	ldr	r1, [sp, #72]	; 0x48
 8087518:	af08      	add	r7, sp, #32
 808751a:	9101      	str	r1, [sp, #4]
 808751c:	9300      	str	r3, [sp, #0]
 808751e:	9706      	str	r7, [sp, #24]
 8087520:	4613      	mov	r3, r2
 8087522:	9505      	str	r5, [sp, #20]
 8087524:	9404      	str	r4, [sp, #16]
 8087526:	4632      	mov	r2, r6
 8087528:	2100      	movs	r1, #0
 808752a:	f7ff ffc6 	bl	80874ba <mbedtls_gcm_crypt_and_tag>
 808752e:	b998      	cbnz	r0, 8087558 <mbedtls_gcm_auth_decrypt+0x54>
 8087530:	4603      	mov	r3, r0
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 8087532:	42ab      	cmp	r3, r5
 8087534:	d006      	beq.n	8087544 <mbedtls_gcm_auth_decrypt+0x40>
        diff |= tag[i] ^ check_tag[i];
 8087536:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8087538:	5cd1      	ldrb	r1, [r2, r3]
 808753a:	5cfa      	ldrb	r2, [r7, r3]
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 808753c:	3301      	adds	r3, #1
        diff |= tag[i] ^ check_tag[i];
 808753e:	404a      	eors	r2, r1
 8087540:	4310      	orrs	r0, r2
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 8087542:	e7f6      	b.n	8087532 <mbedtls_gcm_auth_decrypt+0x2e>
        diff |= tag[i] ^ check_tag[i];

    if( diff != 0 )
 8087544:	b140      	cbz	r0, 8087558 <mbedtls_gcm_auth_decrypt+0x54>
 8087546:	4426      	add	r6, r4
}
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8087548:	2300      	movs	r3, #0
 808754a:	42a6      	cmp	r6, r4
 808754c:	d002      	beq.n	8087554 <mbedtls_gcm_auth_decrypt+0x50>
 808754e:	7023      	strb	r3, [r4, #0]
 8087550:	3401      	adds	r4, #1
 8087552:	e7fa      	b.n	808754a <mbedtls_gcm_auth_decrypt+0x46>
        diff |= tag[i] ^ check_tag[i];

    if( diff != 0 )
    {
        mbedtls_zeroize( output, length );
        return( MBEDTLS_ERR_GCM_AUTH_FAILED );
 8087554:	f06f 0011 	mvn.w	r0, #17
    }

    return( 0 );
}
 8087558:	b00d      	add	sp, #52	; 0x34
 808755a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808755c <mbedtls_gcm_free>:

void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
{
 808755c:	b510      	push	{r4, lr}
 808755e:	4604      	mov	r4, r0
    mbedtls_cipher_free( &ctx->cipher_ctx );
 8087560:	f7fb fc6c 	bl	8082e3c <mbedtls_cipher_free>
 8087564:	f504 72c4 	add.w	r2, r4, #392	; 0x188
}
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8087568:	2300      	movs	r3, #0
 808756a:	4294      	cmp	r4, r2
 808756c:	d002      	beq.n	8087574 <mbedtls_gcm_free+0x18>
 808756e:	7023      	strb	r3, [r4, #0]
 8087570:	3401      	adds	r4, #1
 8087572:	e7fa      	b.n	808756a <mbedtls_gcm_free+0xe>
 8087574:	bd10      	pop	{r4, pc}
	...

08087578 <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 8087578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 808757c:	2700      	movs	r7, #0
 808757e:	463c      	mov	r4, r7
 8087580:	463d      	mov	r5, r7
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 8087582:	f8dd e01c 	ldr.w	lr, [sp, #28]
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] == '=' && ++j > 2 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 8087586:	f8df 8118 	ldr.w	r8, [pc, #280]	; 80876a0 <mbedtls_base64_decode+0x128>
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 808758a:	4575      	cmp	r5, lr
 808758c:	d22d      	bcs.n	80875ea <mbedtls_base64_decode+0x72>
 808758e:	f04f 0c00 	mov.w	ip, #0
    {
        /* Skip spaces before checking for EOL */
        x = 0;
        while( i < slen && src[i] == ' ' )
 8087592:	5d5e      	ldrb	r6, [r3, r5]
 8087594:	2e20      	cmp	r6, #32
 8087596:	d104      	bne.n	80875a2 <mbedtls_base64_decode+0x2a>
        {
            ++i;
 8087598:	3501      	adds	r5, #1
    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
    {
        /* Skip spaces before checking for EOL */
        x = 0;
        while( i < slen && src[i] == ' ' )
 808759a:	45ae      	cmp	lr, r5
        {
            ++i;
            ++x;
 808759c:	f10c 0c01 	add.w	ip, ip, #1
    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
    {
        /* Skip spaces before checking for EOL */
        x = 0;
        while( i < slen && src[i] == ' ' )
 80875a0:	d8f7      	bhi.n	8087592 <mbedtls_base64_decode+0x1a>
            ++i;
            ++x;
        }

        /* Spaces at end of buffer are OK */
        if( i == slen )
 80875a2:	45ae      	cmp	lr, r5
 80875a4:	d021      	beq.n	80875ea <mbedtls_base64_decode+0x72>
            break;

        if( ( slen - i ) >= 2 &&
 80875a6:	ebc5 060e 	rsb	r6, r5, lr
 80875aa:	2e01      	cmp	r6, #1
 80875ac:	d906      	bls.n	80875bc <mbedtls_base64_decode+0x44>
 80875ae:	5d5e      	ldrb	r6, [r3, r5]
 80875b0:	2e0d      	cmp	r6, #13
 80875b2:	d103      	bne.n	80875bc <mbedtls_base64_decode+0x44>
            src[i] == '\r' && src[i + 1] == '\n' )
 80875b4:	195e      	adds	r6, r3, r5
 80875b6:	7876      	ldrb	r6, [r6, #1]
 80875b8:	2e0a      	cmp	r6, #10
 80875ba:	d014      	beq.n	80875e6 <mbedtls_base64_decode+0x6e>
            continue;

        if( src[i] == '\n' )
 80875bc:	5d5e      	ldrb	r6, [r3, r5]
 80875be:	2e0a      	cmp	r6, #10
 80875c0:	d011      	beq.n	80875e6 <mbedtls_base64_decode+0x6e>
            continue;

        /* Space inside a line is an error */
        if( x != 0 )
 80875c2:	f1bc 0f00 	cmp.w	ip, #0
 80875c6:	d166      	bne.n	8087696 <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] == '=' && ++j > 2 )
 80875c8:	2e3d      	cmp	r6, #61	; 0x3d
 80875ca:	d102      	bne.n	80875d2 <mbedtls_base64_decode+0x5a>
 80875cc:	3701      	adds	r7, #1
 80875ce:	2f02      	cmp	r7, #2
 80875d0:	d861      	bhi.n	8087696 <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 80875d2:	f016 0f80 	tst.w	r6, #128	; 0x80
 80875d6:	d15e      	bne.n	8087696 <mbedtls_base64_decode+0x11e>
 80875d8:	f818 6006 	ldrb.w	r6, [r8, r6]
 80875dc:	2e7f      	cmp	r6, #127	; 0x7f
 80875de:	d05a      	beq.n	8087696 <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( base64_dec_map[src[i]] < 64 && j != 0 )
 80875e0:	2e3f      	cmp	r6, #63	; 0x3f
 80875e2:	d956      	bls.n	8087692 <mbedtls_base64_decode+0x11a>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        n++;
 80875e4:	3401      	adds	r4, #1
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 80875e6:	3501      	adds	r5, #1
 80875e8:	e7cf      	b.n	808758a <mbedtls_base64_decode+0x12>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        n++;
    }

    if( n == 0 )
 80875ea:	b91c      	cbnz	r4, 80875f4 <mbedtls_base64_decode+0x7c>
    {
        *olen = 0;
 80875ec:	6014      	str	r4, [r2, #0]
        return( 0 );
 80875ee:	4620      	mov	r0, r4
 80875f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    /* The following expression is to calculate the following formula without
     * risk of integer overflow in n:
     *     n = ( ( n * 6 ) + 7 ) >> 3;
     */
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
    n -= j;
 80875f4:	f004 0e07 	and.w	lr, r4, #7
 80875f8:	2606      	movs	r6, #6
 80875fa:	08e4      	lsrs	r4, r4, #3
 80875fc:	fb06 fe0e 	mul.w	lr, r6, lr
 8087600:	4366      	muls	r6, r4
 8087602:	f10e 0e07 	add.w	lr, lr, #7
 8087606:	1bf6      	subs	r6, r6, r7
 8087608:	eb06 04de 	add.w	r4, r6, lr, lsr #3

    if( dst == NULL || dlen < n )
 808760c:	b160      	cbz	r0, 8087628 <mbedtls_base64_decode+0xb0>
 808760e:	428c      	cmp	r4, r1
 8087610:	d80a      	bhi.n	8087628 <mbedtls_base64_decode+0xb0>
 8087612:	2600      	movs	r6, #0
 8087614:	eb03 0e05 	add.w	lr, r3, r5
 8087618:	4601      	mov	r1, r0
 808761a:	2503      	movs	r5, #3
 808761c:	4634      	mov	r4, r6
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 808761e:	f8df c080 	ldr.w	ip, [pc, #128]	; 80876a0 <mbedtls_base64_decode+0x128>
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 8087622:	f8df 8080 	ldr.w	r8, [pc, #128]	; 80876a4 <mbedtls_base64_decode+0x12c>
 8087626:	e00f      	b.n	8087648 <mbedtls_base64_decode+0xd0>
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
    n -= j;

    if( dst == NULL || dlen < n )
    {
        *olen = n;
 8087628:	6014      	str	r4, [r2, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
 808762a:	f06f 0029 	mvn.w	r0, #41	; 0x29
 808762e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 8087632:	f813 9b01 	ldrb.w	r9, [r3], #1
 8087636:	f1a9 070a 	sub.w	r7, r9, #10
 808763a:	b2ff      	uxtb	r7, r7
 808763c:	2f16      	cmp	r7, #22
 808763e:	d806      	bhi.n	808764e <mbedtls_base64_decode+0xd6>
 8087640:	fa28 f707 	lsr.w	r7, r8, r7
 8087644:	07ff      	lsls	r7, r7, #31
 8087646:	d502      	bpl.n	808764e <mbedtls_base64_decode+0xd6>
    {
        *olen = n;
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 8087648:	4573      	cmp	r3, lr
 808764a:	d1f2      	bne.n	8087632 <mbedtls_base64_decode+0xba>
 808764c:	e01c      	b.n	8087688 <mbedtls_base64_decode+0x110>
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 808764e:	f81c 7009 	ldrb.w	r7, [ip, r9]
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
 8087652:	3401      	adds	r4, #1
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 8087654:	2f40      	cmp	r7, #64	; 0x40
 8087656:	bf08      	it	eq
 8087658:	3d01      	subeq	r5, #1
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 808765a:	f007 073f 	and.w	r7, r7, #63	; 0x3f

        if( ++n == 4 )
 808765e:	2c04      	cmp	r4, #4
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 8087660:	ea47 1686 	orr.w	r6, r7, r6, lsl #6

        if( ++n == 4 )
 8087664:	d1f0      	bne.n	8087648 <mbedtls_base64_decode+0xd0>
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 8087666:	b16d      	cbz	r5, 8087684 <mbedtls_base64_decode+0x10c>
 8087668:	0c34      	lsrs	r4, r6, #16
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 808766a:	2d01      	cmp	r5, #1
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 808766c:	700c      	strb	r4, [r1, #0]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 808766e:	d101      	bne.n	8087674 <mbedtls_base64_decode+0xfc>
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 8087670:	3101      	adds	r1, #1
 8087672:	e007      	b.n	8087684 <mbedtls_base64_decode+0x10c>
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
            if( j > 2 ) *p++ = (unsigned char)( x       );
 8087674:	2d02      	cmp	r5, #2

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 8087676:	ea4f 2416 	mov.w	r4, r6, lsr #8
 808767a:	704c      	strb	r4, [r1, #1]
            if( j > 2 ) *p++ = (unsigned char)( x       );
 808767c:	bf16      	itet	ne
 808767e:	708e      	strbne	r6, [r1, #2]

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 8087680:	3102      	addeq	r1, #2
            if( j > 2 ) *p++ = (unsigned char)( x       );
 8087682:	3103      	addne	r1, #3
        j -= ( base64_dec_map[*src] == 64 );
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
        {
            n = 0;
 8087684:	2400      	movs	r4, #0
 8087686:	e7df      	b.n	8087648 <mbedtls_base64_decode+0xd0>
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
            if( j > 2 ) *p++ = (unsigned char)( x       );
        }
    }

    *olen = p - dst;
 8087688:	1a08      	subs	r0, r1, r0
 808768a:	6010      	str	r0, [r2, #0]

    return( 0 );
 808768c:	2000      	movs	r0, #0
 808768e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( base64_dec_map[src[i]] < 64 && j != 0 )
 8087692:	2f00      	cmp	r7, #0
 8087694:	d0a6      	beq.n	80875e4 <mbedtls_base64_decode+0x6c>
        if( src[i] == '\n' )
            continue;

        /* Space inside a line is an error */
        if( x != 0 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 8087696:	f06f 002b 	mvn.w	r0, #43	; 0x2b
 808769a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808769e:	bf00      	nop
 80876a0:	08093c48 	.word	0x08093c48
 80876a4:	00400009 	.word	0x00400009

080876a8 <mbedtls_md_info_from_type>:
#endif
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
 80876a8:	3804      	subs	r0, #4
 80876aa:	b2c0      	uxtb	r0, r0
 80876ac:	2804      	cmp	r0, #4
 80876ae:	bf9a      	itte	ls
 80876b0:	4b02      	ldrls	r3, [pc, #8]	; (80876bc <mbedtls_md_info_from_type+0x14>)
 80876b2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80876b6:	2000      	movhi	r0, #0
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
    }
}
 80876b8:	4770      	bx	lr
 80876ba:	bf00      	nop
 80876bc:	08093cc8 	.word	0x08093cc8

080876c0 <mbedtls_md_init>:

void mbedtls_md_init( mbedtls_md_context_t *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_md_context_t ) );
 80876c0:	2300      	movs	r3, #0
 80876c2:	6003      	str	r3, [r0, #0]
 80876c4:	6043      	str	r3, [r0, #4]
 80876c6:	6083      	str	r3, [r0, #8]
 80876c8:	4770      	bx	lr

080876ca <mbedtls_md_free>:
}

void mbedtls_md_free( mbedtls_md_context_t *ctx )
{
 80876ca:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->md_info == NULL )
 80876cc:	4604      	mov	r4, r0
 80876ce:	b1e0      	cbz	r0, 808770a <mbedtls_md_free+0x40>
 80876d0:	6803      	ldr	r3, [r0, #0]
 80876d2:	b1d3      	cbz	r3, 808770a <mbedtls_md_free+0x40>
        return;

    if( ctx->md_ctx != NULL )
 80876d4:	6840      	ldr	r0, [r0, #4]
 80876d6:	b108      	cbz	r0, 80876dc <mbedtls_md_free+0x12>
        ctx->md_info->ctx_free_func( ctx->md_ctx );
 80876d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80876da:	4798      	blx	r3

    if( ctx->hmac_ctx != NULL )
 80876dc:	68a3      	ldr	r3, [r4, #8]
 80876de:	b163      	cbz	r3, 80876fa <mbedtls_md_free+0x30>
    {
        mbedtls_zeroize( ctx->hmac_ctx, 2 * ctx->md_info->block_size );
 80876e0:	6822      	ldr	r2, [r4, #0]
#include <stdio.h>
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80876e2:	2100      	movs	r1, #0
 80876e4:	68d2      	ldr	r2, [r2, #12]
 80876e6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80876ea:	429a      	cmp	r2, r3
 80876ec:	d002      	beq.n	80876f4 <mbedtls_md_free+0x2a>
 80876ee:	7019      	strb	r1, [r3, #0]
 80876f0:	3301      	adds	r3, #1
 80876f2:	e7fa      	b.n	80876ea <mbedtls_md_free+0x20>
        ctx->md_info->ctx_free_func( ctx->md_ctx );

    if( ctx->hmac_ctx != NULL )
    {
        mbedtls_zeroize( ctx->hmac_ctx, 2 * ctx->md_info->block_size );
        mbedtls_free( ctx->hmac_ctx );
 80876f4:	68a0      	ldr	r0, [r4, #8]
 80876f6:	f009 f8bf 	bl	8090878 <free>
 80876fa:	f104 020c 	add.w	r2, r4, #12
#include <stdio.h>
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80876fe:	2300      	movs	r3, #0
 8087700:	4294      	cmp	r4, r2
 8087702:	d002      	beq.n	808770a <mbedtls_md_free+0x40>
 8087704:	7023      	strb	r3, [r4, #0]
 8087706:	3401      	adds	r4, #1
 8087708:	e7fa      	b.n	8087700 <mbedtls_md_free+0x36>
 808770a:	bd10      	pop	{r4, pc}

0808770c <mbedtls_md_setup>:
    return mbedtls_md_setup( ctx, md_info, 1 );
}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
 808770c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808770e:	4605      	mov	r5, r0
 8087710:	4617      	mov	r7, r2
    if( md_info == NULL || ctx == NULL )
 8087712:	460c      	mov	r4, r1
 8087714:	b199      	cbz	r1, 808773e <mbedtls_md_setup+0x32>
 8087716:	b190      	cbz	r0, 808773e <mbedtls_md_setup+0x32>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
 8087718:	6a0b      	ldr	r3, [r1, #32]
 808771a:	4798      	blx	r3
 808771c:	4606      	mov	r6, r0
 808771e:	6068      	str	r0, [r5, #4]
 8087720:	b178      	cbz	r0, 8087742 <mbedtls_md_setup+0x36>
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );

    if( hmac != 0 )
 8087722:	b14f      	cbz	r7, 8087738 <mbedtls_md_setup+0x2c>
    {
        ctx->hmac_ctx = mbedtls_calloc( 2, md_info->block_size );
 8087724:	68e1      	ldr	r1, [r4, #12]
 8087726:	2002      	movs	r0, #2
 8087728:	f00a fdea 	bl	8092300 <calloc>
 808772c:	60a8      	str	r0, [r5, #8]
        if( ctx->hmac_ctx == NULL )
 808772e:	b918      	cbnz	r0, 8087738 <mbedtls_md_setup+0x2c>
        {
            md_info->ctx_free_func( ctx->md_ctx );
 8087730:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8087732:	4630      	mov	r0, r6
 8087734:	4798      	blx	r3
 8087736:	e004      	b.n	8087742 <mbedtls_md_setup+0x36>
            return( MBEDTLS_ERR_MD_ALLOC_FAILED );
        }
    }

    ctx->md_info = md_info;
 8087738:	602c      	str	r4, [r5, #0]

    return( 0 );
 808773a:	2000      	movs	r0, #0
 808773c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
    if( md_info == NULL || ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 808773e:	4802      	ldr	r0, [pc, #8]	; (8087748 <mbedtls_md_setup+0x3c>)
 8087740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );
 8087742:	4802      	ldr	r0, [pc, #8]	; (808774c <mbedtls_md_setup+0x40>)
    }

    ctx->md_info = md_info;

    return( 0 );
}
 8087744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8087746:	bf00      	nop
 8087748:	ffffaf00 	.word	0xffffaf00
 808774c:	ffffae80 	.word	0xffffae80

08087750 <mbedtls_md_starts>:

int mbedtls_md_starts( mbedtls_md_context_t *ctx )
{
    if( ctx == NULL || ctx->md_info == NULL )
 8087750:	b120      	cbz	r0, 808775c <mbedtls_md_starts+0xc>
 8087752:	6803      	ldr	r3, [r0, #0]
 8087754:	b113      	cbz	r3, 808775c <mbedtls_md_starts+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->starts_func( ctx->md_ctx ) );
 8087756:	691b      	ldr	r3, [r3, #16]
 8087758:	6840      	ldr	r0, [r0, #4]
 808775a:	4718      	bx	r3
}
 808775c:	4800      	ldr	r0, [pc, #0]	; (8087760 <mbedtls_md_starts+0x10>)
 808775e:	4770      	bx	lr
 8087760:	ffffaf00 	.word	0xffffaf00

08087764 <mbedtls_md_update>:

int mbedtls_md_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL )
 8087764:	b120      	cbz	r0, 8087770 <mbedtls_md_update+0xc>
 8087766:	6803      	ldr	r3, [r0, #0]
 8087768:	b113      	cbz	r3, 8087770 <mbedtls_md_update+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 808776a:	695b      	ldr	r3, [r3, #20]
 808776c:	6840      	ldr	r0, [r0, #4]
 808776e:	4718      	bx	r3
}
 8087770:	4800      	ldr	r0, [pc, #0]	; (8087774 <mbedtls_md_update+0x10>)
 8087772:	4770      	bx	lr
 8087774:	ffffaf00 	.word	0xffffaf00

08087778 <mbedtls_md_finish>:

int mbedtls_md_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
    if( ctx == NULL || ctx->md_info == NULL )
 8087778:	b120      	cbz	r0, 8087784 <mbedtls_md_finish+0xc>
 808777a:	6803      	ldr	r3, [r0, #0]
 808777c:	b113      	cbz	r3, 8087784 <mbedtls_md_finish+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
 808777e:	699b      	ldr	r3, [r3, #24]
 8087780:	6840      	ldr	r0, [r0, #4]
 8087782:	4718      	bx	r3
}
 8087784:	4800      	ldr	r0, [pc, #0]	; (8087788 <mbedtls_md_finish+0x10>)
 8087786:	4770      	bx	lr
 8087788:	ffffaf00 	.word	0xffffaf00

0808778c <mbedtls_md>:

int mbedtls_md( const mbedtls_md_info_t *md_info, const unsigned char *input, size_t ilen,
            unsigned char *output )
{
 808778c:	b430      	push	{r4, r5}
 808778e:	460d      	mov	r5, r1
 8087790:	4611      	mov	r1, r2
    if( md_info == NULL )
 8087792:	b128      	cbz	r0, 80877a0 <mbedtls_md+0x14>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( md_info->digest_func( input, ilen, output ) );
 8087794:	69c4      	ldr	r4, [r0, #28]
 8087796:	461a      	mov	r2, r3
 8087798:	4628      	mov	r0, r5
 808779a:	4623      	mov	r3, r4
}
 808779c:	bc30      	pop	{r4, r5}
            unsigned char *output )
{
    if( md_info == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( md_info->digest_func( input, ilen, output ) );
 808779e:	4718      	bx	r3
}
 80877a0:	4801      	ldr	r0, [pc, #4]	; (80877a8 <mbedtls_md+0x1c>)
 80877a2:	bc30      	pop	{r4, r5}
 80877a4:	4770      	bx	lr
 80877a6:	bf00      	nop
 80877a8:	ffffaf00 	.word	0xffffaf00

080877ac <mbedtls_md_hmac_starts>:
    return( ret );
}
#endif /* MBEDTLS_FS_IO */

int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )
{
 80877ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80877b0:	460d      	mov	r5, r1
 80877b2:	b090      	sub	sp, #64	; 0x40
 80877b4:	4617      	mov	r7, r2
    int ret;
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 80877b6:	4604      	mov	r4, r0
 80877b8:	2800      	cmp	r0, #0
 80877ba:	d050      	beq.n	808785e <mbedtls_md_hmac_starts+0xb2>
 80877bc:	6803      	ldr	r3, [r0, #0]
 80877be:	2b00      	cmp	r3, #0
 80877c0:	d04d      	beq.n	808785e <mbedtls_md_hmac_starts+0xb2>
 80877c2:	6882      	ldr	r2, [r0, #8]
 80877c4:	2a00      	cmp	r2, #0
 80877c6:	d04a      	beq.n	808785e <mbedtls_md_hmac_starts+0xb2>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( keylen > (size_t) ctx->md_info->block_size )
 80877c8:	68da      	ldr	r2, [r3, #12]
 80877ca:	42ba      	cmp	r2, r7
 80877cc:	d215      	bcs.n	80877fa <mbedtls_md_hmac_starts+0x4e>
    {
        if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 80877ce:	691b      	ldr	r3, [r3, #16]
 80877d0:	6840      	ldr	r0, [r0, #4]
 80877d2:	4798      	blx	r3
 80877d4:	2800      	cmp	r0, #0
 80877d6:	d139      	bne.n	808784c <mbedtls_md_hmac_starts+0xa0>
            goto cleanup;
        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
 80877d8:	6823      	ldr	r3, [r4, #0]
 80877da:	463a      	mov	r2, r7
 80877dc:	695b      	ldr	r3, [r3, #20]
 80877de:	4629      	mov	r1, r5
 80877e0:	6860      	ldr	r0, [r4, #4]
 80877e2:	4798      	blx	r3
 80877e4:	2800      	cmp	r0, #0
 80877e6:	d131      	bne.n	808784c <mbedtls_md_hmac_starts+0xa0>
            goto cleanup;
        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
 80877e8:	6823      	ldr	r3, [r4, #0]
 80877ea:	4669      	mov	r1, sp
 80877ec:	699b      	ldr	r3, [r3, #24]
 80877ee:	6860      	ldr	r0, [r4, #4]
 80877f0:	4798      	blx	r3
 80877f2:	bb58      	cbnz	r0, 808784c <mbedtls_md_hmac_starts+0xa0>
            goto cleanup;

        keylen = ctx->md_info->size;
        key = sum;
 80877f4:	466d      	mov	r5, sp
        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
            goto cleanup;
        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
            goto cleanup;

        keylen = ctx->md_info->size;
 80877f6:	6823      	ldr	r3, [r4, #0]
 80877f8:	689f      	ldr	r7, [r3, #8]
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 80877fa:	6823      	ldr	r3, [r4, #0]

        keylen = ctx->md_info->size;
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
 80877fc:	68a6      	ldr	r6, [r4, #8]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 80877fe:	68da      	ldr	r2, [r3, #12]

    memset( ipad, 0x36, ctx->md_info->block_size );
 8087800:	2136      	movs	r1, #54	; 0x36
 8087802:	4630      	mov	r0, r6
        keylen = ctx->md_info->size;
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8087804:	eb06 0802 	add.w	r8, r6, r2

    memset( ipad, 0x36, ctx->md_info->block_size );
 8087808:	f00a fdc5 	bl	8092396 <memset>
    memset( opad, 0x5C, ctx->md_info->block_size );
 808780c:	6823      	ldr	r3, [r4, #0]
 808780e:	215c      	movs	r1, #92	; 0x5c
 8087810:	68da      	ldr	r2, [r3, #12]
 8087812:	4640      	mov	r0, r8
 8087814:	f00a fdbf 	bl	8092396 <memset>

    for( i = 0; i < keylen; i++ )
 8087818:	2300      	movs	r3, #0
 808781a:	429f      	cmp	r7, r3
 808781c:	d00b      	beq.n	8087836 <mbedtls_md_hmac_starts+0x8a>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 808781e:	5cf1      	ldrb	r1, [r6, r3]
 8087820:	5cea      	ldrb	r2, [r5, r3]
 8087822:	404a      	eors	r2, r1
 8087824:	54f2      	strb	r2, [r6, r3]
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 8087826:	f818 1003 	ldrb.w	r1, [r8, r3]
 808782a:	5cea      	ldrb	r2, [r5, r3]
 808782c:	404a      	eors	r2, r1
 808782e:	f808 2003 	strb.w	r2, [r8, r3]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
 8087832:	3301      	adds	r3, #1
 8087834:	e7f1      	b.n	808781a <mbedtls_md_hmac_starts+0x6e>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
    }

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 8087836:	6823      	ldr	r3, [r4, #0]
 8087838:	6860      	ldr	r0, [r4, #4]
 808783a:	691b      	ldr	r3, [r3, #16]
 808783c:	4798      	blx	r3
 808783e:	b928      	cbnz	r0, 808784c <mbedtls_md_hmac_starts+0xa0>
        goto cleanup;
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, ipad,
 8087840:	6823      	ldr	r3, [r4, #0]
 8087842:	4631      	mov	r1, r6
 8087844:	695d      	ldr	r5, [r3, #20]
 8087846:	68da      	ldr	r2, [r3, #12]
 8087848:	6860      	ldr	r0, [r4, #4]
 808784a:	47a8      	blx	r5
 808784c:	2300      	movs	r3, #0
#include <stdio.h>
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808784e:	4619      	mov	r1, r3
 8087850:	eb0d 0203 	add.w	r2, sp, r3
 8087854:	3301      	adds	r3, #1
 8087856:	2b41      	cmp	r3, #65	; 0x41
 8087858:	d002      	beq.n	8087860 <mbedtls_md_hmac_starts+0xb4>
 808785a:	7011      	strb	r1, [r2, #0]
 808785c:	e7f8      	b.n	8087850 <mbedtls_md_hmac_starts+0xa4>
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 808785e:	4802      	ldr	r0, [pc, #8]	; (8087868 <mbedtls_md_hmac_starts+0xbc>)

cleanup:
    mbedtls_zeroize( sum, sizeof( sum ) );

    return( ret );
}
 8087860:	b010      	add	sp, #64	; 0x40
 8087862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8087866:	bf00      	nop
 8087868:	ffffaf00 	.word	0xffffaf00

0808786c <mbedtls_md_hmac_update>:

int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
 808786c:	b410      	push	{r4}
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 808786e:	b138      	cbz	r0, 8087880 <mbedtls_md_hmac_update+0x14>
 8087870:	6803      	ldr	r3, [r0, #0]
 8087872:	b12b      	cbz	r3, 8087880 <mbedtls_md_hmac_update+0x14>
 8087874:	6884      	ldr	r4, [r0, #8]
 8087876:	b11c      	cbz	r4, 8087880 <mbedtls_md_hmac_update+0x14>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 8087878:	695b      	ldr	r3, [r3, #20]
 808787a:	6840      	ldr	r0, [r0, #4]
}
 808787c:	bc10      	pop	{r4}
int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 808787e:	4718      	bx	r3
}
 8087880:	4801      	ldr	r0, [pc, #4]	; (8087888 <mbedtls_md_hmac_update+0x1c>)
 8087882:	bc10      	pop	{r4}
 8087884:	4770      	bx	lr
 8087886:	bf00      	nop
 8087888:	ffffaf00 	.word	0xffffaf00

0808788c <mbedtls_md_hmac_finish>:

int mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
 808788c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8087890:	460d      	mov	r5, r1
 8087892:	b090      	sub	sp, #64	; 0x40
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8087894:	4604      	mov	r4, r0
 8087896:	b318      	cbz	r0, 80878e0 <mbedtls_md_hmac_finish+0x54>
 8087898:	6803      	ldr	r3, [r0, #0]
 808789a:	b30b      	cbz	r3, 80878e0 <mbedtls_md_hmac_finish+0x54>
 808789c:	6886      	ldr	r6, [r0, #8]
 808789e:	b1fe      	cbz	r6, 80878e0 <mbedtls_md_hmac_finish+0x54>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 80878a0:	68df      	ldr	r7, [r3, #12]

    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
 80878a2:	4669      	mov	r1, sp
 80878a4:	699b      	ldr	r3, [r3, #24]
 80878a6:	6840      	ldr	r0, [r0, #4]
 80878a8:	4798      	blx	r3
 80878aa:	b9d0      	cbnz	r0, 80878e2 <mbedtls_md_hmac_finish+0x56>
        return( ret );
    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 80878ac:	6823      	ldr	r3, [r4, #0]
 80878ae:	6860      	ldr	r0, [r4, #4]
 80878b0:	691b      	ldr	r3, [r3, #16]
 80878b2:	4798      	blx	r3
 80878b4:	b9a8      	cbnz	r0, 80878e2 <mbedtls_md_hmac_finish+0x56>
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, opad,
 80878b6:	6823      	ldr	r3, [r4, #0]
 80878b8:	19f1      	adds	r1, r6, r7
 80878ba:	f8d3 8014 	ldr.w	r8, [r3, #20]
 80878be:	68da      	ldr	r2, [r3, #12]
 80878c0:	6860      	ldr	r0, [r4, #4]
 80878c2:	47c0      	blx	r8
 80878c4:	b968      	cbnz	r0, 80878e2 <mbedtls_md_hmac_finish+0x56>
                                           ctx->md_info->block_size ) ) != 0 )
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
 80878c6:	6823      	ldr	r3, [r4, #0]
 80878c8:	4669      	mov	r1, sp
 80878ca:	695e      	ldr	r6, [r3, #20]
 80878cc:	689a      	ldr	r2, [r3, #8]
 80878ce:	6860      	ldr	r0, [r4, #4]
 80878d0:	47b0      	blx	r6
 80878d2:	b930      	cbnz	r0, 80878e2 <mbedtls_md_hmac_finish+0x56>
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
 80878d4:	6823      	ldr	r3, [r4, #0]
 80878d6:	4629      	mov	r1, r5
 80878d8:	699b      	ldr	r3, [r3, #24]
 80878da:	6860      	ldr	r0, [r4, #4]
 80878dc:	4798      	blx	r3
 80878de:	e000      	b.n	80878e2 <mbedtls_md_hmac_finish+0x56>
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 80878e0:	4801      	ldr	r0, [pc, #4]	; (80878e8 <mbedtls_md_hmac_finish+0x5c>)
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
}
 80878e2:	b010      	add	sp, #64	; 0x40
 80878e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80878e8:	ffffaf00 	.word	0xffffaf00

080878ec <mbedtls_md_hmac_reset>:

int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )
{
 80878ec:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 80878ee:	4604      	mov	r4, r0
 80878f0:	b180      	cbz	r0, 8087914 <mbedtls_md_hmac_reset+0x28>
 80878f2:	6803      	ldr	r3, [r0, #0]
 80878f4:	b173      	cbz	r3, 8087914 <mbedtls_md_hmac_reset+0x28>
 80878f6:	6885      	ldr	r5, [r0, #8]
 80878f8:	b165      	cbz	r5, 8087914 <mbedtls_md_hmac_reset+0x28>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 80878fa:	691b      	ldr	r3, [r3, #16]
 80878fc:	6840      	ldr	r0, [r0, #4]
 80878fe:	4798      	blx	r3
 8087900:	b948      	cbnz	r0, 8087916 <mbedtls_md_hmac_reset+0x2a>
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
 8087902:	6823      	ldr	r3, [r4, #0]
                                       ctx->md_info->block_size ) );
 8087904:	4629      	mov	r1, r5
 8087906:	695e      	ldr	r6, [r3, #20]
 8087908:	68da      	ldr	r2, [r3, #12]
 808790a:	6860      	ldr	r0, [r4, #4]
 808790c:	4633      	mov	r3, r6
}
 808790e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
                                       ctx->md_info->block_size ) );
 8087912:	4718      	bx	r3
{
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8087914:	4800      	ldr	r0, [pc, #0]	; (8087918 <mbedtls_md_hmac_reset+0x2c>)

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
                                       ctx->md_info->block_size ) );
}
 8087916:	bd70      	pop	{r4, r5, r6, pc}
 8087918:	ffffaf00 	.word	0xffffaf00

0808791c <mbedtls_md_process>:
    return( ret );
}

int mbedtls_md_process( mbedtls_md_context_t *ctx, const unsigned char *data )
{
    if( ctx == NULL || ctx->md_info == NULL )
 808791c:	b120      	cbz	r0, 8087928 <mbedtls_md_process+0xc>
 808791e:	6803      	ldr	r3, [r0, #0]
 8087920:	b113      	cbz	r3, 8087928 <mbedtls_md_process+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->process_func( ctx->md_ctx, data ) );
 8087922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8087924:	6840      	ldr	r0, [r0, #4]
 8087926:	4718      	bx	r3
}
 8087928:	4800      	ldr	r0, [pc, #0]	; (808792c <mbedtls_md_process+0x10>)
 808792a:	4770      	bx	lr
 808792c:	ffffaf00 	.word	0xffffaf00

08087930 <mbedtls_md_get_size>:

unsigned char mbedtls_md_get_size( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
 8087930:	b100      	cbz	r0, 8087934 <mbedtls_md_get_size+0x4>
        return( 0 );

    return md_info->size;
 8087932:	7a00      	ldrb	r0, [r0, #8]
}
 8087934:	4770      	bx	lr

08087936 <_ZL15mbedtls_zeroizePvj>:
#include <dirent.h>
#endif /* !_WIN32 || EFIX64 || EFI32 */
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 8087936:	4401      	add	r1, r0
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8087938:	2300      	movs	r3, #0
 808793a:	4288      	cmp	r0, r1
 808793c:	d002      	beq.n	8087944 <_ZL15mbedtls_zeroizePvj+0xe>
 808793e:	7003      	strb	r3, [r0, #0]
 8087940:	3001      	adds	r0, #1
 8087942:	e7fa      	b.n	808793a <_ZL15mbedtls_zeroizePvj+0x4>
 8087944:	4770      	bx	lr

08087946 <_ZL15x509_memcasecmpPKvS0_j>:

/*
 * Like memcmp, but case-insensitive and always returns -1 if different
 */
static int x509_memcasecmp( const void *s1, const void *s2, size_t len )
{
 8087946:	b530      	push	{r4, r5, lr}
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = (unsigned char *)s1, *n2 = (unsigned char *)s2;

    for( i = 0; i < len; i++ )
 8087948:	2400      	movs	r4, #0
 808794a:	4294      	cmp	r4, r2
 808794c:	d00c      	beq.n	8087968 <_ZL15x509_memcasecmpPKvS0_j+0x22>
    {
        diff = n1[i] ^ n2[i];
 808794e:	5d03      	ldrb	r3, [r0, r4]
 8087950:	5d0d      	ldrb	r5, [r1, r4]

        if( diff == 0 )
 8087952:	405d      	eors	r5, r3
 8087954:	d006      	beq.n	8087964 <_ZL15x509_memcasecmpPKvS0_j+0x1e>
            continue;

        if( diff == 32 &&
 8087956:	2d20      	cmp	r5, #32
 8087958:	d108      	bne.n	808796c <_ZL15x509_memcasecmpPKvS0_j+0x26>
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
 808795a:	f023 0320 	bic.w	r3, r3, #32
 808795e:	3b41      	subs	r3, #65	; 0x41
 8087960:	2b19      	cmp	r3, #25
 8087962:	d803      	bhi.n	808796c <_ZL15x509_memcasecmpPKvS0_j+0x26>
{
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = (unsigned char *)s1, *n2 = (unsigned char *)s2;

    for( i = 0; i < len; i++ )
 8087964:	3401      	adds	r4, #1
 8087966:	e7f0      	b.n	808794a <_ZL15x509_memcasecmpPKvS0_j+0x4>
        }

        return( -1 );
    }

    return( 0 );
 8087968:	2000      	movs	r0, #0
 808796a:	bd30      	pop	{r4, r5, pc}
              ( n1[i] >= 'A' && n1[i] <= 'Z' ) ) )
        {
            continue;
        }

        return( -1 );
 808796c:	f04f 30ff 	mov.w	r0, #4294967295
    }

    return( 0 );
}
 8087970:	bd30      	pop	{r4, r5, pc}

08087972 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>:
 * or space folding.)
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
 8087972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8087974:	4605      	mov	r5, r0
 8087976:	460c      	mov	r4, r1
    /* Avoid recursion, it might not be optimised by the compiler */
    while( a != NULL || b != NULL )
 8087978:	b925      	cbnz	r5, 8087984 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x12>
 808797a:	1c20      	adds	r0, r4, #0
 808797c:	bf18      	it	ne
 808797e:	2001      	movne	r0, #1
 8087980:	4240      	negs	r0, r0
 8087982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    {
        if( a == NULL || b == NULL )
 8087984:	2c00      	cmp	r4, #0
 8087986:	d031      	beq.n	80879ec <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
 8087988:	682a      	ldr	r2, [r5, #0]
 808798a:	6823      	ldr	r3, [r4, #0]
 808798c:	429a      	cmp	r2, r3
 808798e:	d12d      	bne.n	80879ec <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            a->oid.len != b->oid.len ||
 8087990:	686a      	ldr	r2, [r5, #4]
    {
        if( a == NULL || b == NULL )
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
 8087992:	6863      	ldr	r3, [r4, #4]
 8087994:	429a      	cmp	r2, r3
 8087996:	d129      	bne.n	80879ec <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            a->oid.len != b->oid.len ||
            memcmp( a->oid.p, b->oid.p, b->oid.len ) != 0 )
 8087998:	68a1      	ldr	r1, [r4, #8]
 808799a:	68a8      	ldr	r0, [r5, #8]
 808799c:	f00a fcc6 	bl	809232c <memcmp>
        if( a == NULL || b == NULL )
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
            a->oid.len != b->oid.len ||
 80879a0:	bb20      	cbnz	r0, 80879ec <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
    if( a->tag == b->tag &&
 80879a2:	68ef      	ldr	r7, [r5, #12]
 80879a4:	68e6      	ldr	r6, [r4, #12]
 80879a6:	42b7      	cmp	r7, r6
 80879a8:	d108      	bne.n	80879bc <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x4a>
        a->len == b->len &&
 80879aa:	692a      	ldr	r2, [r5, #16]
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
    if( a->tag == b->tag &&
 80879ac:	6923      	ldr	r3, [r4, #16]
 80879ae:	429a      	cmp	r2, r3
 80879b0:	d104      	bne.n	80879bc <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x4a>
        a->len == b->len &&
        memcmp( a->p, b->p, b->len ) == 0 )
 80879b2:	6961      	ldr	r1, [r4, #20]
 80879b4:	6968      	ldr	r0, [r5, #20]
 80879b6:	f00a fcb9 	bl	809232c <memcmp>
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
    if( a->tag == b->tag &&
        a->len == b->len &&
 80879ba:	b180      	cbz	r0, 80879de <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x6c>
        return( 0 );
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
        a->len == b->len &&
 80879bc:	2f0c      	cmp	r7, #12
 80879be:	d001      	beq.n	80879c4 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x52>
        memcmp( a->p, b->p, b->len ) == 0 )
    {
        return( 0 );
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 80879c0:	2f13      	cmp	r7, #19
 80879c2:	d113      	bne.n	80879ec <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
 80879c4:	2e0c      	cmp	r6, #12
 80879c6:	d001      	beq.n	80879cc <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x5a>
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 80879c8:	2e13      	cmp	r6, #19
 80879ca:	d10f      	bne.n	80879ec <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
        a->len == b->len &&
 80879cc:	692a      	ldr	r2, [r5, #16]
    {
        return( 0 );
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 80879ce:	6923      	ldr	r3, [r4, #16]
 80879d0:	429a      	cmp	r2, r3
 80879d2:	d10b      	bne.n	80879ec <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
        a->len == b->len &&
        x509_memcasecmp( a->p, b->p, b->len ) == 0 )
 80879d4:	6961      	ldr	r1, [r4, #20]
 80879d6:	6968      	ldr	r0, [r5, #20]
 80879d8:	f7ff ffb5 	bl	8087946 <_ZL15x509_memcasecmpPKvS0_j>
        {
            return( -1 );
        }

        /* value */
        if( x509_string_cmp( &a->val, &b->val ) != 0 )
 80879dc:	b930      	cbnz	r0, 80879ec <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            return( -1 );

        /* structure of the list of sets */
        if( a->next_merged != b->next_merged )
 80879de:	7f2a      	ldrb	r2, [r5, #28]
 80879e0:	7f23      	ldrb	r3, [r4, #28]
 80879e2:	429a      	cmp	r2, r3
 80879e4:	d102      	bne.n	80879ec <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            return( -1 );

        a = a->next;
 80879e6:	69ad      	ldr	r5, [r5, #24]
        b = b->next;
 80879e8:	69a4      	ldr	r4, [r4, #24]
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
    /* Avoid recursion, it might not be optimised by the compiler */
    while( a != NULL || b != NULL )
 80879ea:	e7c5      	b.n	8087978 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x6>
    {
        if( a == NULL || b == NULL )
            return( -1 );
 80879ec:	f04f 30ff 	mov.w	r0, #4294967295
        b = b->next;
    }

    /* a == NULL == b */
    return( 0 );
}
 80879f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080879f2 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf>:

/*
 * Return 0 if name matches wildcard, -1 otherwise
 */
static int x509_check_wildcard( const char *cn, mbedtls_x509_buf *name )
{
 80879f2:	b570      	push	{r4, r5, r6, lr}
 80879f4:	460e      	mov	r6, r1
 80879f6:	4604      	mov	r4, r0
    size_t i;
    size_t cn_idx = 0, cn_len = strlen( cn );
 80879f8:	f00a fd04 	bl	8092404 <strlen>

    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
 80879fc:	6875      	ldr	r5, [r6, #4]
 80879fe:	2d02      	cmp	r5, #2
 8087a00:	d91e      	bls.n	8087a40 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x4e>
 8087a02:	68b6      	ldr	r6, [r6, #8]
 8087a04:	7833      	ldrb	r3, [r6, #0]
 8087a06:	2b2a      	cmp	r3, #42	; 0x2a
 8087a08:	d11a      	bne.n	8087a40 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x4e>
 8087a0a:	7873      	ldrb	r3, [r6, #1]
 8087a0c:	2b2e      	cmp	r3, #46	; 0x2e
 8087a0e:	d117      	bne.n	8087a40 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x4e>
 8087a10:	4623      	mov	r3, r4
 8087a12:	2200      	movs	r2, #0
        return( 0 );

    for( i = 0; i < cn_len; ++i )
 8087a14:	4282      	cmp	r2, r0
 8087a16:	d015      	beq.n	8087a44 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x52>
    {
        if( cn[i] == '.' )
 8087a18:	4619      	mov	r1, r3
 8087a1a:	780c      	ldrb	r4, [r1, #0]
 8087a1c:	3301      	adds	r3, #1
 8087a1e:	2c2e      	cmp	r4, #46	; 0x2e
 8087a20:	d001      	beq.n	8087a26 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x34>
    size_t cn_idx = 0, cn_len = strlen( cn );

    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
        return( 0 );

    for( i = 0; i < cn_len; ++i )
 8087a22:	3201      	adds	r2, #1
 8087a24:	e7f6      	b.n	8087a14 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x22>
            cn_idx = i;
            break;
        }
    }

    if( cn_idx == 0 )
 8087a26:	b16a      	cbz	r2, 8087a44 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x52>
        return( -1 );

    if( cn_len - cn_idx == name->len - 1 &&
 8087a28:	1a82      	subs	r2, r0, r2
 8087a2a:	3d01      	subs	r5, #1
 8087a2c:	42aa      	cmp	r2, r5
 8087a2e:	d109      	bne.n	8087a44 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x52>
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
 8087a30:	1c70      	adds	r0, r6, #1
 8087a32:	f7ff ff88 	bl	8087946 <_ZL15x509_memcasecmpPKvS0_j>
    }

    if( cn_idx == 0 )
        return( -1 );

    if( cn_len - cn_idx == name->len - 1 &&
 8087a36:	3000      	adds	r0, #0
 8087a38:	bf18      	it	ne
 8087a3a:	2001      	movne	r0, #1
 8087a3c:	4240      	negs	r0, r0
 8087a3e:	bd70      	pop	{r4, r5, r6, pc}
{
    size_t i;
    size_t cn_idx = 0, cn_len = strlen( cn );

    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
        return( 0 );
 8087a40:	2000      	movs	r0, #0
 8087a42:	bd70      	pop	{r4, r5, r6, pc}
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
    {
        return( 0 );
    }

    return( -1 );
 8087a44:	f04f 30ff 	mov.w	r0, #4294967295
}
 8087a48:	bd70      	pop	{r4, r5, r6, pc}

08087a4a <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>:
 * X.509 v2/v3 unique identifier (not parsed)
 */
static int x509_get_uid( unsigned char **p,
                         const unsigned char *end,
                         mbedtls_x509_buf *uid, int n )
{
 8087a4a:	b570      	push	{r4, r5, r6, lr}
 8087a4c:	4615      	mov	r5, r2
    int ret;

    if( *p == end )
 8087a4e:	6802      	ldr	r2, [r0, #0]
 * X.509 v2/v3 unique identifier (not parsed)
 */
static int x509_get_uid( unsigned char **p,
                         const unsigned char *end,
                         mbedtls_x509_buf *uid, int n )
{
 8087a50:	4604      	mov	r4, r0
    int ret;

    if( *p == end )
 8087a52:	428a      	cmp	r2, r1
 8087a54:	d00b      	beq.n	8087a6e <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0x24>
        return( 0 );

    uid->tag = **p;
 8087a56:	7816      	ldrb	r6, [r2, #0]
 8087a58:	462a      	mov	r2, r5

    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 8087a5a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    int ret;

    if( *p == end )
        return( 0 );

    uid->tag = **p;
 8087a5e:	f842 6b04 	str.w	r6, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 8087a62:	f7fb fc9f 	bl	80833a4 <mbedtls_asn1_get_tag>
 8087a66:	b120      	cbz	r0, 8087a72 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0x28>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | n ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8087a68:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8087a6c:	d107      	bne.n	8087a7e <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0x34>
            return( 0 );
 8087a6e:	2000      	movs	r0, #0
 8087a70:	bd70      	pop	{r4, r5, r6, pc}

        return( ret );
    }

    uid->p = *p;
 8087a72:	6823      	ldr	r3, [r4, #0]
 8087a74:	60ab      	str	r3, [r5, #8]
    *p += uid->len;
 8087a76:	6822      	ldr	r2, [r4, #0]
 8087a78:	686b      	ldr	r3, [r5, #4]
 8087a7a:	4413      	add	r3, r2
 8087a7c:	6023      	str	r3, [r4, #0]

    return( 0 );
}
 8087a7e:	bd70      	pop	{r4, r5, r6, pc}

08087a80 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>:
static int x509_profile_check_key( const mbedtls_x509_crt_profile *profile,
                                   mbedtls_pk_type_t pk_alg,
                                   const mbedtls_pk_context *pk )
{
#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
 8087a80:	2901      	cmp	r1, #1

/*
 * Check key against profile
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_key( const mbedtls_x509_crt_profile *profile,
 8087a82:	b510      	push	{r4, lr}
 8087a84:	4604      	mov	r4, r0
                                   mbedtls_pk_type_t pk_alg,
                                   const mbedtls_pk_context *pk )
{
#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
 8087a86:	d001      	beq.n	8087a8c <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3+0xc>
 8087a88:	2906      	cmp	r1, #6
 8087a8a:	d109      	bne.n	8087aa0 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3+0x20>
    {
        if( mbedtls_pk_get_bitlen( pk ) >= profile->rsa_min_bitlen )
 8087a8c:	4610      	mov	r0, r2
 8087a8e:	f004 fdbf 	bl	808c610 <mbedtls_pk_get_bitlen>
 8087a92:	6823      	ldr	r3, [r4, #0]
 8087a94:	4298      	cmp	r0, r3
 8087a96:	f04f 30ff 	mov.w	r0, #4294967295
 8087a9a:	bf28      	it	cs
 8087a9c:	2000      	movcs	r0, #0
 8087a9e:	bd10      	pop	{r4, pc}

        return( -1 );
    }
#endif

    return( -1 );
 8087aa0:	f04f 30ff 	mov.w	r0, #4294967295
}
 8087aa4:	bd10      	pop	{r4, pc}
	...

08087aa8 <mbedtls_x509_crt_info>:
 */
#define BEFORE_COLON    18
#define BC              "18"
int mbedtls_x509_crt_info( char *buf, size_t size, const char *prefix,
                   const mbedtls_x509_crt *crt )
{
 8087aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8087aac:	4682      	mov	sl, r0
 8087aae:	b08d      	sub	sp, #52	; 0x34
 8087ab0:	460f      	mov	r7, r1
 8087ab2:	4691      	mov	r9, r2
    char key_size_str[BEFORE_COLON];

    p = buf;
    n = size;

    if( NULL == crt )
 8087ab4:	4698      	mov	r8, r3
 8087ab6:	b94b      	cbnz	r3, 8087acc <mbedtls_x509_crt_info+0x24>
    {
        ret = mbedtls_snprintf( p, n, "\nCertificate is uninitialised!\n" );
 8087ab8:	4aa5      	ldr	r2, [pc, #660]	; (8087d50 <mbedtls_x509_crt_info+0x2a8>)
 8087aba:	f008 fef5 	bl	80908a8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8087abe:	2800      	cmp	r0, #0
 8087ac0:	f2c0 82d6 	blt.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087ac4:	4287      	cmp	r7, r0
 8087ac6:	f200 82d4 	bhi.w	8088072 <mbedtls_x509_crt_info+0x5ca>
 8087aca:	e2d1      	b.n	8088070 <mbedtls_x509_crt_info+0x5c8>

        return( (int) ( size - n ) );
    }

    ret = mbedtls_snprintf( p, n, "%scert. version     : %d\n",
                               prefix, crt->version );
 8087acc:	699b      	ldr	r3, [r3, #24]
 8087ace:	9300      	str	r3, [sp, #0]
 8087ad0:	4613      	mov	r3, r2
 8087ad2:	4aa0      	ldr	r2, [pc, #640]	; (8087d54 <mbedtls_x509_crt_info+0x2ac>)
 8087ad4:	f008 fee8 	bl	80908a8 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087ad8:	2800      	cmp	r0, #0
 8087ada:	f2c0 82c9 	blt.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087ade:	4287      	cmp	r7, r0
 8087ae0:	f240 82c6 	bls.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087ae4:	1a3e      	subs	r6, r7, r0
 8087ae6:	4482      	add	sl, r0
    ret = mbedtls_snprintf( p, n, "%sserial number     : ",
                               prefix );
 8087ae8:	464b      	mov	r3, r9
 8087aea:	4a9b      	ldr	r2, [pc, #620]	; (8087d58 <mbedtls_x509_crt_info+0x2b0>)
 8087aec:	4631      	mov	r1, r6
 8087aee:	4650      	mov	r0, sl
 8087af0:	f008 feda 	bl	80908a8 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087af4:	2800      	cmp	r0, #0
 8087af6:	f2c0 82bb 	blt.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087afa:	4286      	cmp	r6, r0
 8087afc:	f240 82b8 	bls.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087b00:	1a36      	subs	r6, r6, r0
 8087b02:	4482      	add	sl, r0

    ret = mbedtls_x509_serial_gets( p, n, &crt->serial );
 8087b04:	f108 021c 	add.w	r2, r8, #28
 8087b08:	4631      	mov	r1, r6
 8087b0a:	4650      	mov	r0, sl
 8087b0c:	f7fe fdca 	bl	80866a4 <mbedtls_x509_serial_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087b10:	2800      	cmp	r0, #0
 8087b12:	f2c0 82ad 	blt.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087b16:	4286      	cmp	r6, r0
 8087b18:	f240 82aa 	bls.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087b1c:	1a36      	subs	r6, r6, r0
 8087b1e:	4482      	add	sl, r0

    ret = mbedtls_snprintf( p, n, "\n%sissuer name       : ", prefix );
 8087b20:	464b      	mov	r3, r9
 8087b22:	4a8e      	ldr	r2, [pc, #568]	; (8087d5c <mbedtls_x509_crt_info+0x2b4>)
 8087b24:	4631      	mov	r1, r6
 8087b26:	4650      	mov	r0, sl
 8087b28:	f008 febe 	bl	80908a8 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087b2c:	2800      	cmp	r0, #0
 8087b2e:	f2c0 829f 	blt.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087b32:	4286      	cmp	r6, r0
 8087b34:	f240 829c 	bls.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087b38:	1a36      	subs	r6, r6, r0
 8087b3a:	4482      	add	sl, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->issuer  );
 8087b3c:	f108 024c 	add.w	r2, r8, #76	; 0x4c
 8087b40:	4631      	mov	r1, r6
 8087b42:	4650      	mov	r0, sl
 8087b44:	f7fe fd2c 	bl	80865a0 <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087b48:	2800      	cmp	r0, #0
 8087b4a:	f2c0 8291 	blt.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087b4e:	4286      	cmp	r6, r0
 8087b50:	f240 828e 	bls.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087b54:	1a36      	subs	r6, r6, r0
 8087b56:	4482      	add	sl, r0

    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
 8087b58:	464b      	mov	r3, r9
 8087b5a:	4a81      	ldr	r2, [pc, #516]	; (8087d60 <mbedtls_x509_crt_info+0x2b8>)
 8087b5c:	4631      	mov	r1, r6
 8087b5e:	4650      	mov	r0, sl
 8087b60:	f008 fea2 	bl	80908a8 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087b64:	2800      	cmp	r0, #0
 8087b66:	f2c0 8283 	blt.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087b6a:	4286      	cmp	r6, r0
 8087b6c:	f240 8280 	bls.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087b70:	1a36      	subs	r6, r6, r0
 8087b72:	4482      	add	sl, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
 8087b74:	f108 026c 	add.w	r2, r8, #108	; 0x6c
 8087b78:	4631      	mov	r1, r6
 8087b7a:	4650      	mov	r0, sl
 8087b7c:	f7fe fd10 	bl	80865a0 <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087b80:	2800      	cmp	r0, #0
 8087b82:	f2c0 8275 	blt.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087b86:	4286      	cmp	r6, r0
 8087b88:	f240 8272 	bls.w	8088070 <mbedtls_x509_crt_info+0x5c8>

    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
 8087b8c:	f8d8 30a0 	ldr.w	r3, [r8, #160]	; 0xa0
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087b90:	1a36      	subs	r6, r6, r0

    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
 8087b92:	9305      	str	r3, [sp, #20]
 8087b94:	f8d8 309c 	ldr.w	r3, [r8, #156]	; 0x9c
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087b98:	4482      	add	sl, r0

    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
 8087b9a:	9304      	str	r3, [sp, #16]
 8087b9c:	f8d8 3098 	ldr.w	r3, [r8, #152]	; 0x98
 8087ba0:	4a70      	ldr	r2, [pc, #448]	; (8087d64 <mbedtls_x509_crt_info+0x2bc>)
 8087ba2:	9303      	str	r3, [sp, #12]
 8087ba4:	f8d8 3094 	ldr.w	r3, [r8, #148]	; 0x94
 8087ba8:	4631      	mov	r1, r6
 8087baa:	9302      	str	r3, [sp, #8]
 8087bac:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 8087bb0:	4650      	mov	r0, sl
 8087bb2:	9301      	str	r3, [sp, #4]
 8087bb4:	f8d8 308c 	ldr.w	r3, [r8, #140]	; 0x8c
 8087bb8:	9300      	str	r3, [sp, #0]
 8087bba:	464b      	mov	r3, r9
 8087bbc:	f008 fe74 	bl	80908a8 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087bc0:	2800      	cmp	r0, #0
 8087bc2:	f2c0 8255 	blt.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087bc6:	4286      	cmp	r6, r0
 8087bc8:	f240 8252 	bls.w	8088070 <mbedtls_x509_crt_info+0x5c8>

    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_to.year, crt->valid_to.mon,
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
 8087bcc:	f8d8 30b8 	ldr.w	r3, [r8, #184]	; 0xb8
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087bd0:	1a36      	subs	r6, r6, r0

    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_to.year, crt->valid_to.mon,
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
 8087bd2:	9305      	str	r3, [sp, #20]
 8087bd4:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087bd8:	4482      	add	sl, r0

    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_to.year, crt->valid_to.mon,
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
 8087bda:	9304      	str	r3, [sp, #16]
 8087bdc:	f8d8 30b0 	ldr.w	r3, [r8, #176]	; 0xb0
 8087be0:	4a61      	ldr	r2, [pc, #388]	; (8087d68 <mbedtls_x509_crt_info+0x2c0>)
 8087be2:	9303      	str	r3, [sp, #12]
 8087be4:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
 8087be8:	4631      	mov	r1, r6
 8087bea:	9302      	str	r3, [sp, #8]
 8087bec:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
 8087bf0:	4650      	mov	r0, sl
 8087bf2:	9301      	str	r3, [sp, #4]
 8087bf4:	f8d8 30a4 	ldr.w	r3, [r8, #164]	; 0xa4
 8087bf8:	9300      	str	r3, [sp, #0]
 8087bfa:	464b      	mov	r3, r9
 8087bfc:	f008 fe54 	bl	80908a8 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087c00:	2800      	cmp	r0, #0
 8087c02:	f2c0 8235 	blt.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087c06:	4286      	cmp	r6, r0
 8087c08:	f240 8232 	bls.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087c0c:	1a36      	subs	r6, r6, r0
 8087c0e:	4482      	add	sl, r0

    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
 8087c10:	464b      	mov	r3, r9
 8087c12:	4a56      	ldr	r2, [pc, #344]	; (8087d6c <mbedtls_x509_crt_info+0x2c4>)
 8087c14:	4631      	mov	r1, r6
 8087c16:	4650      	mov	r0, sl
 8087c18:	f008 fe46 	bl	80908a8 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087c1c:	2800      	cmp	r0, #0
 8087c1e:	f2c0 8227 	blt.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087c22:	4286      	cmp	r6, r0
 8087c24:	f240 8224 	bls.w	8088070 <mbedtls_x509_crt_info+0x5c8>

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
                             crt->sig_md, crt->sig_opts );
 8087c28:	f8d8 212c 	ldr.w	r2, [r8, #300]	; 0x12c
 8087c2c:	f898 3129 	ldrb.w	r3, [r8, #297]	; 0x129
 8087c30:	9201      	str	r2, [sp, #4]
 8087c32:	f898 2128 	ldrb.w	r2, [r8, #296]	; 0x128
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087c36:	1a36      	subs	r6, r6, r0
 8087c38:	4482      	add	sl, r0

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
                             crt->sig_md, crt->sig_opts );
 8087c3a:	9200      	str	r2, [sp, #0]
 8087c3c:	4631      	mov	r1, r6
 8087c3e:	f108 0228 	add.w	r2, r8, #40	; 0x28
 8087c42:	4650      	mov	r0, sl
 8087c44:	f7fe fd78 	bl	8086738 <mbedtls_x509_sig_alg_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087c48:	1e05      	subs	r5, r0, #0
 8087c4a:	f2c0 8211 	blt.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087c4e:	42ae      	cmp	r6, r5
 8087c50:	f240 820e 	bls.w	8088070 <mbedtls_x509_crt_info+0x5c8>

    /* Key size */
    if( ( ret = mbedtls_x509_key_size_helper( key_size_str, BEFORE_COLON,
 8087c54:	f108 0bbc 	add.w	fp, r8, #188	; 0xbc
 8087c58:	4658      	mov	r0, fp
 8087c5a:	f004 fd3d 	bl	808c6d8 <mbedtls_pk_get_name>
 8087c5e:	ac07      	add	r4, sp, #28
 8087c60:	4602      	mov	r2, r0
 8087c62:	2112      	movs	r1, #18
 8087c64:	4620      	mov	r0, r4
 8087c66:	f7fe fd8f 	bl	8086788 <mbedtls_x509_key_size_helper>
 8087c6a:	2800      	cmp	r0, #0
 8087c6c:	f040 8201 	bne.w	8088072 <mbedtls_x509_crt_info+0x5ca>
    {
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
 8087c70:	4658      	mov	r0, fp
 8087c72:	f004 fccd 	bl	808c610 <mbedtls_pk_get_bitlen>
    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
                             crt->sig_md, crt->sig_opts );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087c76:	1b76      	subs	r6, r6, r5
 8087c78:	4455      	add	r5, sl
    {
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
 8087c7a:	9001      	str	r0, [sp, #4]
 8087c7c:	9400      	str	r4, [sp, #0]
 8087c7e:	464b      	mov	r3, r9
 8087c80:	4a3b      	ldr	r2, [pc, #236]	; (8087d70 <mbedtls_x509_crt_info+0x2c8>)
 8087c82:	4631      	mov	r1, r6
 8087c84:	4628      	mov	r0, r5
 8087c86:	f008 fe0f 	bl	80908a8 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087c8a:	2800      	cmp	r0, #0
 8087c8c:	f2c0 81f0 	blt.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087c90:	4286      	cmp	r6, r0
 8087c92:	f240 81ed 	bls.w	8088070 <mbedtls_x509_crt_info+0x5c8>

    /*
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 8087c96:	f8d8 30f8 	ldr.w	r3, [r8, #248]	; 0xf8
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087c9a:	1a34      	subs	r4, r6, r0

    /*
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 8087c9c:	05db      	lsls	r3, r3, #23
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087c9e:	4405      	add	r5, r0

    /*
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 8087ca0:	d527      	bpl.n	8087cf2 <mbedtls_x509_crt_info+0x24a>
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
 8087ca2:	f8d8 10fc 	ldr.w	r1, [r8, #252]	; 0xfc
 8087ca6:	4a33      	ldr	r2, [pc, #204]	; (8087d74 <mbedtls_x509_crt_info+0x2cc>)
 8087ca8:	4b33      	ldr	r3, [pc, #204]	; (8087d78 <mbedtls_x509_crt_info+0x2d0>)
                        crt->ca_istrue ? "true" : "false" );
 8087caa:	4628      	mov	r0, r5
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
 8087cac:	2900      	cmp	r1, #0
 8087cae:	bf18      	it	ne
 8087cb0:	4613      	movne	r3, r2
                        crt->ca_istrue ? "true" : "false" );
 8087cb2:	4a32      	ldr	r2, [pc, #200]	; (8087d7c <mbedtls_x509_crt_info+0x2d4>)
 8087cb4:	9300      	str	r3, [sp, #0]
 8087cb6:	4621      	mov	r1, r4
 8087cb8:	464b      	mov	r3, r9
 8087cba:	f008 fdf5 	bl	80908a8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8087cbe:	2800      	cmp	r0, #0
 8087cc0:	f2c0 81d6 	blt.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087cc4:	4284      	cmp	r4, r0
 8087cc6:	f240 81d3 	bls.w	8088070 <mbedtls_x509_crt_info+0x5c8>

        if( crt->max_pathlen > 0 )
 8087cca:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
                        crt->ca_istrue ? "true" : "false" );
        MBEDTLS_X509_SAFE_SNPRINTF;
 8087cce:	1a24      	subs	r4, r4, r0

        if( crt->max_pathlen > 0 )
 8087cd0:	2b00      	cmp	r3, #0

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
                        crt->ca_istrue ? "true" : "false" );
        MBEDTLS_X509_SAFE_SNPRINTF;
 8087cd2:	4405      	add	r5, r0

        if( crt->max_pathlen > 0 )
 8087cd4:	dd0d      	ble.n	8087cf2 <mbedtls_x509_crt_info+0x24a>
        {
            ret = mbedtls_snprintf( p, n, ", max_pathlen=%d", crt->max_pathlen - 1 );
 8087cd6:	3b01      	subs	r3, #1
 8087cd8:	4a29      	ldr	r2, [pc, #164]	; (8087d80 <mbedtls_x509_crt_info+0x2d8>)
 8087cda:	4621      	mov	r1, r4
 8087cdc:	4628      	mov	r0, r5
 8087cde:	f008 fde3 	bl	80908a8 <snprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
 8087ce2:	2800      	cmp	r0, #0
 8087ce4:	f2c0 81c4 	blt.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087ce8:	4284      	cmp	r4, r0
 8087cea:	f240 81c1 	bls.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087cee:	1a24      	subs	r4, r4, r0
 8087cf0:	4405      	add	r5, r0
        }
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 8087cf2:	f8d8 30f8 	ldr.w	r3, [r8, #248]	; 0xf8
 8087cf6:	069e      	lsls	r6, r3, #26
 8087cf8:	d54e      	bpl.n	8087d98 <mbedtls_x509_crt_info+0x2f0>
    {
        ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
 8087cfa:	464b      	mov	r3, r9
 8087cfc:	4a21      	ldr	r2, [pc, #132]	; (8087d84 <mbedtls_x509_crt_info+0x2dc>)
 8087cfe:	4621      	mov	r1, r4
 8087d00:	4628      	mov	r0, r5
 8087d02:	f008 fdd1 	bl	80908a8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8087d06:	2800      	cmp	r0, #0
 8087d08:	f2c0 81b2 	blt.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087d0c:	42a0      	cmp	r0, r4
 8087d0e:	f080 81af 	bcs.w	8088070 <mbedtls_x509_crt_info+0x5c8>
{
    size_t i;
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = subject_alt_name;
    const char *sep = "";
 8087d12:	4e1d      	ldr	r6, [pc, #116]	; (8087d88 <mbedtls_x509_crt_info+0x2e0>)
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
    {
        ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
 8087d14:	1a24      	subs	r4, r4, r0
 8087d16:	4405      	add	r5, r0

        if( ( ret = x509_info_subject_alt_name( &p, &n,
 8087d18:	f108 02e8 	add.w	r2, r8, #232	; 0xe8
    size_t i;
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = subject_alt_name;
    const char *sep = "";
    size_t sep_len = 0;
 8087d1c:	2000      	movs	r0, #0

    while( cur != NULL )
    {
        if( cur->buf.len + sep_len >= n )
 8087d1e:	6851      	ldr	r1, [r2, #4]
 8087d20:	2300      	movs	r3, #0
 8087d22:	4401      	add	r1, r0
 8087d24:	42a1      	cmp	r1, r4
 8087d26:	d301      	bcc.n	8087d2c <mbedtls_x509_crt_info+0x284>
        {
            *p = '\0';
 8087d28:	702b      	strb	r3, [r5, #0]
 8087d2a:	e1a1      	b.n	8088070 <mbedtls_x509_crt_info+0x5c8>
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
        }

        n -= cur->buf.len + sep_len;
 8087d2c:	1a64      	subs	r4, r4, r1
        for( i = 0; i < sep_len; i++ )
 8087d2e:	4283      	cmp	r3, r0
 8087d30:	d003      	beq.n	8087d3a <mbedtls_x509_crt_info+0x292>
            *p++ = sep[i];
 8087d32:	5cf1      	ldrb	r1, [r6, r3]
 8087d34:	54e9      	strb	r1, [r5, r3]
            *p = '\0';
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
        }

        n -= cur->buf.len + sep_len;
        for( i = 0; i < sep_len; i++ )
 8087d36:	3301      	adds	r3, #1
 8087d38:	e7f9      	b.n	8087d2e <mbedtls_x509_crt_info+0x286>
 8087d3a:	441d      	add	r5, r3
 8087d3c:	4628      	mov	r0, r5
            *p++ = sep[i];
        for( i = 0; i < cur->buf.len; i++ )
 8087d3e:	6851      	ldr	r1, [r2, #4]
 8087d40:	1a2b      	subs	r3, r5, r0
 8087d42:	4299      	cmp	r1, r3
 8087d44:	d922      	bls.n	8087d8c <mbedtls_x509_crt_info+0x2e4>
            *p++ = cur->buf.p[i];
 8087d46:	6891      	ldr	r1, [r2, #8]
 8087d48:	5ccb      	ldrb	r3, [r1, r3]
 8087d4a:	f805 3b01 	strb.w	r3, [r5], #1
 8087d4e:	e7f6      	b.n	8087d3e <mbedtls_x509_crt_info+0x296>
 8087d50:	08093d9f 	.word	0x08093d9f
 8087d54:	08093dbf 	.word	0x08093dbf
 8087d58:	08093dd9 	.word	0x08093dd9
 8087d5c:	08093df0 	.word	0x08093df0
 8087d60:	08093e08 	.word	0x08093e08
 8087d64:	08093e20 	.word	0x08093e20
 8087d68:	08093e55 	.word	0x08093e55
 8087d6c:	08093e8a 	.word	0x08093e8a
 8087d70:	08093ea2 	.word	0x08093ea2
 8087d74:	08093d94 	.word	0x08093d94
 8087d78:	08093d99 	.word	0x08093d99
 8087d7c:	08093eb4 	.word	0x08093eb4
 8087d80:	08093ed1 	.word	0x08093ed1
 8087d84:	08093ee2 	.word	0x08093ee2
 8087d88:	08092be8 	.word	0x08092be8

        sep = ", ";
        sep_len = 2;

        cur = cur->next;
 8087d8c:	68d2      	ldr	r2, [r2, #12]
            *p++ = sep[i];
        for( i = 0; i < cur->buf.len; i++ )
            *p++ = cur->buf.p[i];

        sep = ", ";
        sep_len = 2;
 8087d8e:	2002      	movs	r0, #2
        for( i = 0; i < sep_len; i++ )
            *p++ = sep[i];
        for( i = 0; i < cur->buf.len; i++ )
            *p++ = cur->buf.p[i];

        sep = ", ";
 8087d90:	4eb9      	ldr	r6, [pc, #740]	; (8088078 <mbedtls_x509_crt_info+0x5d0>)
    char *p = *buf;
    const mbedtls_x509_sequence *cur = subject_alt_name;
    const char *sep = "";
    size_t sep_len = 0;

    while( cur != NULL )
 8087d92:	2a00      	cmp	r2, #0
 8087d94:	d1c3      	bne.n	8087d1e <mbedtls_x509_crt_info+0x276>
        sep_len = 2;

        cur = cur->next;
    }

    *p = '\0';
 8087d96:	702a      	strb	r2, [r5, #0]
        if( ( ret = x509_info_subject_alt_name( &p, &n,
                                            &crt->subject_alt_names ) ) != 0 )
            return( ret );
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
 8087d98:	f8d8 30f8 	ldr.w	r3, [r8, #248]	; 0xf8
 8087d9c:	03d8      	lsls	r0, r3, #15
 8087d9e:	f140 8090 	bpl.w	8087ec2 <mbedtls_x509_crt_info+0x41a>
    {
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
 8087da2:	464b      	mov	r3, r9
 8087da4:	4ab5      	ldr	r2, [pc, #724]	; (808807c <mbedtls_x509_crt_info+0x5d4>)
 8087da6:	4621      	mov	r1, r4
 8087da8:	4628      	mov	r0, r5
 8087daa:	f008 fd7d 	bl	80908a8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8087dae:	2800      	cmp	r0, #0
 8087db0:	f2c0 815e 	blt.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087db4:	42a0      	cmp	r0, r4
 8087db6:	f080 815b 	bcs.w	8088070 <mbedtls_x509_crt_info+0x5c8>

        if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
 8087dba:	f898 6118 	ldrb.w	r6, [r8, #280]	; 0x118
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
    {
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
 8087dbe:	1a24      	subs	r4, r4, r0
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 8087dc0:	0631      	lsls	r1, r6, #24
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
    {
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
 8087dc2:	4405      	add	r5, r0
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 8087dc4:	4bae      	ldr	r3, [pc, #696]	; (8088080 <mbedtls_x509_crt_info+0x5d8>)
 8087dc6:	d50d      	bpl.n	8087de4 <mbedtls_x509_crt_info+0x33c>
 8087dc8:	4aae      	ldr	r2, [pc, #696]	; (8088084 <mbedtls_x509_crt_info+0x5dc>)
 8087dca:	4621      	mov	r1, r4
 8087dcc:	4628      	mov	r0, r5
 8087dce:	f008 fd6b 	bl	80908a8 <snprintf>
 8087dd2:	2800      	cmp	r0, #0
 8087dd4:	f2c0 814c 	blt.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087dd8:	4284      	cmp	r4, r0
 8087dda:	f240 8149 	bls.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087dde:	4ba6      	ldr	r3, [pc, #664]	; (8088078 <mbedtls_x509_crt_info+0x5d0>)
 8087de0:	1a24      	subs	r4, r4, r0
 8087de2:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_SERVER,         "SSL Server" );
 8087de4:	0672      	lsls	r2, r6, #25
 8087de6:	d50d      	bpl.n	8087e04 <mbedtls_x509_crt_info+0x35c>
 8087de8:	4aa7      	ldr	r2, [pc, #668]	; (8088088 <mbedtls_x509_crt_info+0x5e0>)
 8087dea:	4621      	mov	r1, r4
 8087dec:	4628      	mov	r0, r5
 8087dee:	f008 fd5b 	bl	80908a8 <snprintf>
 8087df2:	2800      	cmp	r0, #0
 8087df4:	f2c0 813c 	blt.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087df8:	4284      	cmp	r4, r0
 8087dfa:	f240 8139 	bls.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087dfe:	4b9e      	ldr	r3, [pc, #632]	; (8088078 <mbedtls_x509_crt_info+0x5d0>)
 8087e00:	1a24      	subs	r4, r4, r0
 8087e02:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL,              "Email" );
 8087e04:	06b0      	lsls	r0, r6, #26
 8087e06:	d50d      	bpl.n	8087e24 <mbedtls_x509_crt_info+0x37c>
 8087e08:	4aa0      	ldr	r2, [pc, #640]	; (808808c <mbedtls_x509_crt_info+0x5e4>)
 8087e0a:	4621      	mov	r1, r4
 8087e0c:	4628      	mov	r0, r5
 8087e0e:	f008 fd4b 	bl	80908a8 <snprintf>
 8087e12:	2800      	cmp	r0, #0
 8087e14:	f2c0 812c 	blt.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087e18:	4284      	cmp	r4, r0
 8087e1a:	f240 8129 	bls.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087e1e:	4b96      	ldr	r3, [pc, #600]	; (8088078 <mbedtls_x509_crt_info+0x5d0>)
 8087e20:	1a24      	subs	r4, r4, r0
 8087e22:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING,     "Object Signing" );
 8087e24:	06f1      	lsls	r1, r6, #27
 8087e26:	d50d      	bpl.n	8087e44 <mbedtls_x509_crt_info+0x39c>
 8087e28:	4a99      	ldr	r2, [pc, #612]	; (8088090 <mbedtls_x509_crt_info+0x5e8>)
 8087e2a:	4621      	mov	r1, r4
 8087e2c:	4628      	mov	r0, r5
 8087e2e:	f008 fd3b 	bl	80908a8 <snprintf>
 8087e32:	2800      	cmp	r0, #0
 8087e34:	f2c0 811c 	blt.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087e38:	4284      	cmp	r4, r0
 8087e3a:	f240 8119 	bls.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087e3e:	4b8e      	ldr	r3, [pc, #568]	; (8088078 <mbedtls_x509_crt_info+0x5d0>)
 8087e40:	1a24      	subs	r4, r4, r0
 8087e42:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_RESERVED,           "Reserved" );
 8087e44:	0732      	lsls	r2, r6, #28
 8087e46:	d50d      	bpl.n	8087e64 <mbedtls_x509_crt_info+0x3bc>
 8087e48:	4a92      	ldr	r2, [pc, #584]	; (8088094 <mbedtls_x509_crt_info+0x5ec>)
 8087e4a:	4621      	mov	r1, r4
 8087e4c:	4628      	mov	r0, r5
 8087e4e:	f008 fd2b 	bl	80908a8 <snprintf>
 8087e52:	2800      	cmp	r0, #0
 8087e54:	f2c0 810c 	blt.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087e58:	4284      	cmp	r4, r0
 8087e5a:	f240 8109 	bls.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087e5e:	4b86      	ldr	r3, [pc, #536]	; (8088078 <mbedtls_x509_crt_info+0x5d0>)
 8087e60:	1a24      	subs	r4, r4, r0
 8087e62:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CA,             "SSL CA" );
 8087e64:	0770      	lsls	r0, r6, #29
 8087e66:	d50d      	bpl.n	8087e84 <mbedtls_x509_crt_info+0x3dc>
 8087e68:	4a8b      	ldr	r2, [pc, #556]	; (8088098 <mbedtls_x509_crt_info+0x5f0>)
 8087e6a:	4621      	mov	r1, r4
 8087e6c:	4628      	mov	r0, r5
 8087e6e:	f008 fd1b 	bl	80908a8 <snprintf>
 8087e72:	2800      	cmp	r0, #0
 8087e74:	f2c0 80fc 	blt.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087e78:	4284      	cmp	r4, r0
 8087e7a:	f240 80f9 	bls.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087e7e:	4b7e      	ldr	r3, [pc, #504]	; (8088078 <mbedtls_x509_crt_info+0x5d0>)
 8087e80:	1a24      	subs	r4, r4, r0
 8087e82:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL_CA,           "Email CA" );
 8087e84:	07b1      	lsls	r1, r6, #30
 8087e86:	d50d      	bpl.n	8087ea4 <mbedtls_x509_crt_info+0x3fc>
 8087e88:	4a84      	ldr	r2, [pc, #528]	; (808809c <mbedtls_x509_crt_info+0x5f4>)
 8087e8a:	4621      	mov	r1, r4
 8087e8c:	4628      	mov	r0, r5
 8087e8e:	f008 fd0b 	bl	80908a8 <snprintf>
 8087e92:	2800      	cmp	r0, #0
 8087e94:	f2c0 80ec 	blt.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087e98:	4284      	cmp	r4, r0
 8087e9a:	f240 80e9 	bls.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087e9e:	4b76      	ldr	r3, [pc, #472]	; (8088078 <mbedtls_x509_crt_info+0x5d0>)
 8087ea0:	1a24      	subs	r4, r4, r0
 8087ea2:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING_CA,  "Object Signing CA" );
 8087ea4:	07f2      	lsls	r2, r6, #31
 8087ea6:	d50c      	bpl.n	8087ec2 <mbedtls_x509_crt_info+0x41a>
 8087ea8:	4a7d      	ldr	r2, [pc, #500]	; (80880a0 <mbedtls_x509_crt_info+0x5f8>)
 8087eaa:	4621      	mov	r1, r4
 8087eac:	4628      	mov	r0, r5
 8087eae:	f008 fcfb 	bl	80908a8 <snprintf>
 8087eb2:	2800      	cmp	r0, #0
 8087eb4:	f2c0 80dc 	blt.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087eb8:	4284      	cmp	r4, r0
 8087eba:	f240 80d9 	bls.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087ebe:	1a24      	subs	r4, r4, r0
 8087ec0:	4405      	add	r5, r0

        if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
            return( ret );
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
 8087ec2:	f8d8 30f8 	ldr.w	r3, [r8, #248]	; 0xf8
 8087ec6:	075e      	lsls	r6, r3, #29
 8087ec8:	f140 8096 	bpl.w	8087ff8 <mbedtls_x509_crt_info+0x550>
    {
        ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
 8087ecc:	464b      	mov	r3, r9
 8087ece:	4a75      	ldr	r2, [pc, #468]	; (80880a4 <mbedtls_x509_crt_info+0x5fc>)
 8087ed0:	4621      	mov	r1, r4
 8087ed2:	4628      	mov	r0, r5
 8087ed4:	f008 fce8 	bl	80908a8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8087ed8:	2800      	cmp	r0, #0
 8087eda:	f2c0 80c9 	blt.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087ede:	42a0      	cmp	r0, r4
 8087ee0:	f080 80c6 	bcs.w	8088070 <mbedtls_x509_crt_info+0x5c8>

        if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
 8087ee4:	f8d8 6104 	ldr.w	r6, [r8, #260]	; 0x104
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
    {
        ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
 8087ee8:	1a24      	subs	r4, r4, r0
 8087eea:	4405      	add	r5, r0
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
 8087eec:	0630      	lsls	r0, r6, #24
 8087eee:	4b64      	ldr	r3, [pc, #400]	; (8088080 <mbedtls_x509_crt_info+0x5d8>)
 8087ef0:	d50d      	bpl.n	8087f0e <mbedtls_x509_crt_info+0x466>
 8087ef2:	4a6d      	ldr	r2, [pc, #436]	; (80880a8 <mbedtls_x509_crt_info+0x600>)
 8087ef4:	4621      	mov	r1, r4
 8087ef6:	4628      	mov	r0, r5
 8087ef8:	f008 fcd6 	bl	80908a8 <snprintf>
 8087efc:	2800      	cmp	r0, #0
 8087efe:	f2c0 80b7 	blt.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087f02:	4284      	cmp	r4, r0
 8087f04:	f240 80b4 	bls.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087f08:	4b5b      	ldr	r3, [pc, #364]	; (8088078 <mbedtls_x509_crt_info+0x5d0>)
 8087f0a:	1a24      	subs	r4, r4, r0
 8087f0c:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_NON_REPUDIATION,      "Non Repudiation" );
 8087f0e:	0671      	lsls	r1, r6, #25
 8087f10:	d50d      	bpl.n	8087f2e <mbedtls_x509_crt_info+0x486>
 8087f12:	4a66      	ldr	r2, [pc, #408]	; (80880ac <mbedtls_x509_crt_info+0x604>)
 8087f14:	4621      	mov	r1, r4
 8087f16:	4628      	mov	r0, r5
 8087f18:	f008 fcc6 	bl	80908a8 <snprintf>
 8087f1c:	2800      	cmp	r0, #0
 8087f1e:	f2c0 80a7 	blt.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087f22:	4284      	cmp	r4, r0
 8087f24:	f240 80a4 	bls.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087f28:	4b53      	ldr	r3, [pc, #332]	; (8088078 <mbedtls_x509_crt_info+0x5d0>)
 8087f2a:	1a24      	subs	r4, r4, r0
 8087f2c:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_ENCIPHERMENT,     "Key Encipherment" );
 8087f2e:	06b2      	lsls	r2, r6, #26
 8087f30:	d50d      	bpl.n	8087f4e <mbedtls_x509_crt_info+0x4a6>
 8087f32:	4a5f      	ldr	r2, [pc, #380]	; (80880b0 <mbedtls_x509_crt_info+0x608>)
 8087f34:	4621      	mov	r1, r4
 8087f36:	4628      	mov	r0, r5
 8087f38:	f008 fcb6 	bl	80908a8 <snprintf>
 8087f3c:	2800      	cmp	r0, #0
 8087f3e:	f2c0 8097 	blt.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087f42:	4284      	cmp	r4, r0
 8087f44:	f240 8094 	bls.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087f48:	4b4b      	ldr	r3, [pc, #300]	; (8088078 <mbedtls_x509_crt_info+0x5d0>)
 8087f4a:	1a24      	subs	r4, r4, r0
 8087f4c:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DATA_ENCIPHERMENT,    "Data Encipherment" );
 8087f4e:	06f0      	lsls	r0, r6, #27
 8087f50:	d50d      	bpl.n	8087f6e <mbedtls_x509_crt_info+0x4c6>
 8087f52:	4a58      	ldr	r2, [pc, #352]	; (80880b4 <mbedtls_x509_crt_info+0x60c>)
 8087f54:	4621      	mov	r1, r4
 8087f56:	4628      	mov	r0, r5
 8087f58:	f008 fca6 	bl	80908a8 <snprintf>
 8087f5c:	2800      	cmp	r0, #0
 8087f5e:	f2c0 8087 	blt.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087f62:	4284      	cmp	r4, r0
 8087f64:	f240 8084 	bls.w	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087f68:	4b43      	ldr	r3, [pc, #268]	; (8088078 <mbedtls_x509_crt_info+0x5d0>)
 8087f6a:	1a24      	subs	r4, r4, r0
 8087f6c:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_AGREEMENT,        "Key Agreement" );
 8087f6e:	0731      	lsls	r1, r6, #28
 8087f70:	d50b      	bpl.n	8087f8a <mbedtls_x509_crt_info+0x4e2>
 8087f72:	4a51      	ldr	r2, [pc, #324]	; (80880b8 <mbedtls_x509_crt_info+0x610>)
 8087f74:	4621      	mov	r1, r4
 8087f76:	4628      	mov	r0, r5
 8087f78:	f008 fc96 	bl	80908a8 <snprintf>
 8087f7c:	2800      	cmp	r0, #0
 8087f7e:	db77      	blt.n	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087f80:	4284      	cmp	r4, r0
 8087f82:	d975      	bls.n	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087f84:	4b3c      	ldr	r3, [pc, #240]	; (8088078 <mbedtls_x509_crt_info+0x5d0>)
 8087f86:	1a24      	subs	r4, r4, r0
 8087f88:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_CERT_SIGN,        "Key Cert Sign" );
 8087f8a:	0772      	lsls	r2, r6, #29
 8087f8c:	d50b      	bpl.n	8087fa6 <mbedtls_x509_crt_info+0x4fe>
 8087f8e:	4a4b      	ldr	r2, [pc, #300]	; (80880bc <mbedtls_x509_crt_info+0x614>)
 8087f90:	4621      	mov	r1, r4
 8087f92:	4628      	mov	r0, r5
 8087f94:	f008 fc88 	bl	80908a8 <snprintf>
 8087f98:	2800      	cmp	r0, #0
 8087f9a:	db69      	blt.n	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087f9c:	4284      	cmp	r4, r0
 8087f9e:	d967      	bls.n	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087fa0:	4b35      	ldr	r3, [pc, #212]	; (8088078 <mbedtls_x509_crt_info+0x5d0>)
 8087fa2:	1a24      	subs	r4, r4, r0
 8087fa4:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_CRL_SIGN,             "CRL Sign" );
 8087fa6:	07b0      	lsls	r0, r6, #30
 8087fa8:	d50b      	bpl.n	8087fc2 <mbedtls_x509_crt_info+0x51a>
 8087faa:	4a45      	ldr	r2, [pc, #276]	; (80880c0 <mbedtls_x509_crt_info+0x618>)
 8087fac:	4621      	mov	r1, r4
 8087fae:	4628      	mov	r0, r5
 8087fb0:	f008 fc7a 	bl	80908a8 <snprintf>
 8087fb4:	2800      	cmp	r0, #0
 8087fb6:	db5b      	blt.n	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087fb8:	4284      	cmp	r4, r0
 8087fba:	d959      	bls.n	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087fbc:	4b2e      	ldr	r3, [pc, #184]	; (8088078 <mbedtls_x509_crt_info+0x5d0>)
 8087fbe:	1a24      	subs	r4, r4, r0
 8087fc0:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_ENCIPHER_ONLY,        "Encipher Only" );
 8087fc2:	07f1      	lsls	r1, r6, #31
 8087fc4:	d50b      	bpl.n	8087fde <mbedtls_x509_crt_info+0x536>
 8087fc6:	4a3f      	ldr	r2, [pc, #252]	; (80880c4 <mbedtls_x509_crt_info+0x61c>)
 8087fc8:	4621      	mov	r1, r4
 8087fca:	4628      	mov	r0, r5
 8087fcc:	f008 fc6c 	bl	80908a8 <snprintf>
 8087fd0:	2800      	cmp	r0, #0
 8087fd2:	db4d      	blt.n	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087fd4:	4284      	cmp	r4, r0
 8087fd6:	d94b      	bls.n	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087fd8:	4b27      	ldr	r3, [pc, #156]	; (8088078 <mbedtls_x509_crt_info+0x5d0>)
 8087fda:	1a24      	subs	r4, r4, r0
 8087fdc:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DECIPHER_ONLY,        "Decipher Only" );
 8087fde:	0432      	lsls	r2, r6, #16
 8087fe0:	d50a      	bpl.n	8087ff8 <mbedtls_x509_crt_info+0x550>
 8087fe2:	4a39      	ldr	r2, [pc, #228]	; (80880c8 <mbedtls_x509_crt_info+0x620>)
 8087fe4:	4621      	mov	r1, r4
 8087fe6:	4628      	mov	r0, r5
 8087fe8:	f008 fc5e 	bl	80908a8 <snprintf>
 8087fec:	2800      	cmp	r0, #0
 8087fee:	db3f      	blt.n	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087ff0:	4284      	cmp	r4, r0
 8087ff2:	d93d      	bls.n	8088070 <mbedtls_x509_crt_info+0x5c8>
 8087ff4:	1a24      	subs	r4, r4, r0
 8087ff6:	4405      	add	r5, r0

        if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
            return( ret );
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE )
 8087ff8:	f8d8 30f8 	ldr.w	r3, [r8, #248]	; 0xf8
 8087ffc:	051b      	lsls	r3, r3, #20
 8087ffe:	d52b      	bpl.n	8088058 <mbedtls_x509_crt_info+0x5b0>
    {
        ret = mbedtls_snprintf( p, n, "\n%sext key usage     : ", prefix );
 8088000:	464b      	mov	r3, r9
 8088002:	4a32      	ldr	r2, [pc, #200]	; (80880cc <mbedtls_x509_crt_info+0x624>)
 8088004:	4621      	mov	r1, r4
 8088006:	4628      	mov	r0, r5
 8088008:	f008 fc4e 	bl	80908a8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 808800c:	2800      	cmp	r0, #0
 808800e:	db2f      	blt.n	8088070 <mbedtls_x509_crt_info+0x5c8>
 8088010:	42a0      	cmp	r0, r4
 8088012:	d22d      	bcs.n	8088070 <mbedtls_x509_crt_info+0x5c8>

        if( ( ret = x509_info_ext_key_usage( &p, &n,
 8088014:	f508 7684 	add.w	r6, r8, #264	; 0x108
    const char *sep = "";

    while( cur != NULL )
    {
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
            desc = "???";
 8088018:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 80880dc <mbedtls_x509_crt_info+0x634>
    int ret;
    const char *desc;
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = extended_key_usage;
    const char *sep = "";
 808801c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8088080 <mbedtls_x509_crt_info+0x5d8>
static int x509_info_ext_key_usage( char **buf, size_t *size,
                                    const mbedtls_x509_sequence *extended_key_usage )
{
    int ret;
    const char *desc;
    size_t n = *size;
 8088020:	1a24      	subs	r4, r4, r0
    char *p = *buf;
 8088022:	4405      	add	r5, r0
    const mbedtls_x509_sequence *cur = extended_key_usage;
    const char *sep = "";

    while( cur != NULL )
    {
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
 8088024:	a906      	add	r1, sp, #24
 8088026:	4630      	mov	r0, r6
 8088028:	f7fc fe04 	bl	8084c34 <mbedtls_oid_get_extended_key_usage>
 808802c:	b108      	cbz	r0, 8088032 <mbedtls_x509_crt_info+0x58a>
            desc = "???";
 808802e:	f8cd 9018 	str.w	r9, [sp, #24]

        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
 8088032:	9b06      	ldr	r3, [sp, #24]
 8088034:	4a26      	ldr	r2, [pc, #152]	; (80880d0 <mbedtls_x509_crt_info+0x628>)
 8088036:	9300      	str	r3, [sp, #0]
 8088038:	4621      	mov	r1, r4
 808803a:	4643      	mov	r3, r8
 808803c:	4628      	mov	r0, r5
 808803e:	f008 fc33 	bl	80908a8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8088042:	2800      	cmp	r0, #0
 8088044:	db14      	blt.n	8088070 <mbedtls_x509_crt_info+0x5c8>
 8088046:	42a0      	cmp	r0, r4
 8088048:	d212      	bcs.n	8088070 <mbedtls_x509_crt_info+0x5c8>

        sep = ", ";

        cur = cur->next;
 808804a:	68f6      	ldr	r6, [r6, #12]
    {
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
            desc = "???";

        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
        MBEDTLS_X509_SAFE_SNPRINTF;
 808804c:	1a24      	subs	r4, r4, r0
 808804e:	4405      	add	r5, r0

        sep = ", ";
 8088050:	f8df 8024 	ldr.w	r8, [pc, #36]	; 8088078 <mbedtls_x509_crt_info+0x5d0>
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = extended_key_usage;
    const char *sep = "";

    while( cur != NULL )
 8088054:	2e00      	cmp	r6, #0
 8088056:	d1e5      	bne.n	8088024 <mbedtls_x509_crt_info+0x57c>
        if( ( ret = x509_info_ext_key_usage( &p, &n,
                                             &crt->ext_key_usage ) ) != 0 )
            return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n" );
 8088058:	4a1e      	ldr	r2, [pc, #120]	; (80880d4 <mbedtls_x509_crt_info+0x62c>)
 808805a:	4621      	mov	r1, r4
 808805c:	4628      	mov	r0, r5
 808805e:	f008 fc23 	bl	80908a8 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8088062:	2800      	cmp	r0, #0
 8088064:	db04      	blt.n	8088070 <mbedtls_x509_crt_info+0x5c8>
 8088066:	4284      	cmp	r4, r0
 8088068:	d902      	bls.n	8088070 <mbedtls_x509_crt_info+0x5c8>

    return( (int) ( size - n ) );
 808806a:	1a20      	subs	r0, r4, r0
 808806c:	1a38      	subs	r0, r7, r0
 808806e:	e000      	b.n	8088072 <mbedtls_x509_crt_info+0x5ca>
    while( cur != NULL )
    {
        if( cur->buf.len + sep_len >= n )
        {
            *p = '\0';
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
 8088070:	4819      	ldr	r0, [pc, #100]	; (80880d8 <mbedtls_x509_crt_info+0x630>)

    ret = mbedtls_snprintf( p, n, "\n" );
    MBEDTLS_X509_SAFE_SNPRINTF;

    return( (int) ( size - n ) );
}
 8088072:	b00d      	add	sp, #52	; 0x34
 8088074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8088078:	08093a94 	.word	0x08093a94
 808807c:	08093efa 	.word	0x08093efa
 8088080:	08092be8 	.word	0x08092be8
 8088084:	08093f12 	.word	0x08093f12
 8088088:	08093f1f 	.word	0x08093f1f
 808808c:	08093f2c 	.word	0x08093f2c
 8088090:	08093f34 	.word	0x08093f34
 8088094:	08093f45 	.word	0x08093f45
 8088098:	08093f50 	.word	0x08093f50
 808809c:	08093f59 	.word	0x08093f59
 80880a0:	08093f64 	.word	0x08093f64
 80880a4:	08093f78 	.word	0x08093f78
 80880a8:	08093f90 	.word	0x08093f90
 80880ac:	08093fa4 	.word	0x08093fa4
 80880b0:	08093fb6 	.word	0x08093fb6
 80880b4:	08093fc9 	.word	0x08093fc9
 80880b8:	08093fdd 	.word	0x08093fdd
 80880bc:	08093fed 	.word	0x08093fed
 80880c0:	08093ffd 	.word	0x08093ffd
 80880c4:	08094008 	.word	0x08094008
 80880c8:	08094018 	.word	0x08094018
 80880cc:	08094028 	.word	0x08094028
 80880d0:	08094040 	.word	0x08094040
 80880d4:	08092d48 	.word	0x08092d48
 80880d8:	ffffd680 	.word	0xffffd680
 80880dc:	08093aad 	.word	0x08093aad

080880e0 <mbedtls_x509_crt_verify_info>:
    { 0, NULL }
};

int mbedtls_x509_crt_verify_info( char *buf, size_t size, const char *prefix,
                          uint32_t flags )
{
 80880e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80880e4:	4607      	mov	r7, r0
 80880e6:	460d      	mov	r5, r1
 80880e8:	4691      	mov	r9, r2
 80880ea:	4698      	mov	r8, r3
    int ret;
    const struct x509_crt_verify_string *cur;
    char *p = buf;
    size_t n = size;
 80880ec:	460c      	mov	r4, r1
 80880ee:	4e18      	ldr	r6, [pc, #96]	; (8088150 <mbedtls_x509_crt_verify_info+0x70>)

    for( cur = x509_crt_verify_strings; cur->string != NULL ; cur++ )
 80880f0:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80880f4:	b1cb      	cbz	r3, 808812a <mbedtls_x509_crt_verify_info+0x4a>
    {
        if( ( flags & cur->code ) == 0 )
 80880f6:	f856 2c08 	ldr.w	r2, [r6, #-8]
 80880fa:	ea18 0f02 	tst.w	r8, r2
 80880fe:	d012      	beq.n	8088126 <mbedtls_x509_crt_verify_info+0x46>
            continue;

        ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
 8088100:	9300      	str	r3, [sp, #0]
 8088102:	4a14      	ldr	r2, [pc, #80]	; (8088154 <mbedtls_x509_crt_verify_info+0x74>)
 8088104:	464b      	mov	r3, r9
 8088106:	4621      	mov	r1, r4
 8088108:	4638      	mov	r0, r7
 808810a:	f008 fbcd 	bl	80908a8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 808810e:	2800      	cmp	r0, #0
 8088110:	da01      	bge.n	8088116 <mbedtls_x509_crt_verify_info+0x36>
 8088112:	4811      	ldr	r0, [pc, #68]	; (8088158 <mbedtls_x509_crt_verify_info+0x78>)
 8088114:	e018      	b.n	8088148 <mbedtls_x509_crt_verify_info+0x68>
 8088116:	4284      	cmp	r4, r0
 8088118:	d9fb      	bls.n	8088112 <mbedtls_x509_crt_verify_info+0x32>
        flags ^= cur->code;
 808811a:	f856 3c08 	ldr.w	r3, [r6, #-8]
    {
        if( ( flags & cur->code ) == 0 )
            continue;

        ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
        MBEDTLS_X509_SAFE_SNPRINTF;
 808811e:	1a24      	subs	r4, r4, r0
 8088120:	4407      	add	r7, r0
        flags ^= cur->code;
 8088122:	ea88 0803 	eor.w	r8, r8, r3
 8088126:	3608      	adds	r6, #8
    int ret;
    const struct x509_crt_verify_string *cur;
    char *p = buf;
    size_t n = size;

    for( cur = x509_crt_verify_strings; cur->string != NULL ; cur++ )
 8088128:	e7e2      	b.n	80880f0 <mbedtls_x509_crt_verify_info+0x10>
        ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
        MBEDTLS_X509_SAFE_SNPRINTF;
        flags ^= cur->code;
    }

    if( flags != 0 )
 808812a:	f1b8 0f00 	cmp.w	r8, #0
 808812e:	d00a      	beq.n	8088146 <mbedtls_x509_crt_verify_info+0x66>
    {
        ret = mbedtls_snprintf( p, n, "%sUnknown reason "
                                       "(this should not happen)\n", prefix );
 8088130:	464b      	mov	r3, r9
 8088132:	4a0a      	ldr	r2, [pc, #40]	; (808815c <mbedtls_x509_crt_verify_info+0x7c>)
 8088134:	4621      	mov	r1, r4
 8088136:	4638      	mov	r0, r7
 8088138:	f008 fbb6 	bl	80908a8 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 808813c:	2800      	cmp	r0, #0
 808813e:	dbe8      	blt.n	8088112 <mbedtls_x509_crt_verify_info+0x32>
 8088140:	4284      	cmp	r4, r0
 8088142:	d9e6      	bls.n	8088112 <mbedtls_x509_crt_verify_info+0x32>
 8088144:	1a24      	subs	r4, r4, r0
    }

    return( (int) ( size - n ) );
 8088146:	1b28      	subs	r0, r5, r4
}
 8088148:	b003      	add	sp, #12
 808814a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808814e:	bf00      	nop
 8088150:	08093ce4 	.word	0x08093ce4
 8088154:	08094045 	.word	0x08094045
 8088158:	ffffd680 	.word	0xffffd680
 808815c:	0809404b 	.word	0x0809404b

08088160 <mbedtls_x509_crt_check_key_usage>:
{
    unsigned int usage_must, usage_may;
    unsigned int may_mask = MBEDTLS_X509_KU_ENCIPHER_ONLY
                          | MBEDTLS_X509_KU_DECIPHER_ONLY;

    if( ( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE ) == 0 )
 8088160:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
 8088164:	f013 0304 	ands.w	r3, r3, #4
 8088168:	d01a      	beq.n	80881a0 <mbedtls_x509_crt_check_key_usage+0x40>
        return( 0 );

    usage_must = usage & ~may_mask;

    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
 808816a:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
 808816e:	f421 4000 	bic.w	r0, r1, #32768	; 0x8000
 8088172:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
 8088176:	f023 0301 	bic.w	r3, r3, #1
 808817a:	f020 0001 	bic.w	r0, r0, #1
 808817e:	400b      	ands	r3, r1
 8088180:	4298      	cmp	r0, r3
 8088182:	d10c      	bne.n	808819e <mbedtls_x509_crt_check_key_usage+0x3e>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    usage_may = usage & may_mask;

    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
 8088184:	f248 0301 	movw	r3, #32769	; 0x8001
 8088188:	f248 0001 	movw	r0, #32769	; 0x8001
 808818c:	430a      	orrs	r2, r1
 808818e:	4013      	ands	r3, r2
        return( 0 );

    usage_must = usage & ~may_mask;

    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8088190:	4a04      	ldr	r2, [pc, #16]	; (80881a4 <mbedtls_x509_crt_check_key_usage+0x44>)

    usage_may = usage & may_mask;

    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
 8088192:	4008      	ands	r0, r1
        return( 0 );

    usage_must = usage & ~may_mask;

    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8088194:	4298      	cmp	r0, r3
 8088196:	bf14      	ite	ne
 8088198:	4613      	movne	r3, r2
 808819a:	2300      	moveq	r3, #0
 808819c:	e000      	b.n	80881a0 <mbedtls_x509_crt_check_key_usage+0x40>
 808819e:	4b01      	ldr	r3, [pc, #4]	; (80881a4 <mbedtls_x509_crt_check_key_usage+0x44>)

    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    return( 0 );
}
 80881a0:	4618      	mov	r0, r3
 80881a2:	4770      	bx	lr
 80881a4:	ffffd800 	.word	0xffffd800

080881a8 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>:
 * bottom means child is the end entity cert
 */
static int x509_crt_check_parent( const mbedtls_x509_crt *child,
                                  const mbedtls_x509_crt *parent,
                                  int top, int bottom )
{
 80881a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80881ac:	4606      	mov	r6, r0
 80881ae:	460d      	mov	r5, r1
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 80881b0:	304c      	adds	r0, #76	; 0x4c
 80881b2:	316c      	adds	r1, #108	; 0x6c
 * bottom means child is the end entity cert
 */
static int x509_crt_check_parent( const mbedtls_x509_crt *child,
                                  const mbedtls_x509_crt *parent,
                                  int top, int bottom )
{
 80881b4:	4617      	mov	r7, r2
 80881b6:	4698      	mov	r8, r3
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 80881b8:	f7ff fbdb 	bl	8087972 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
 80881bc:	4604      	mov	r4, r0
 80881be:	b9d8      	cbnz	r0, 80881f8 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x50>

    /* Parent must have the basicConstraints CA bit set as a general rule */
    need_ca_bit = 1;

    /* Exception: v1/v2 certificates that are locally trusted. */
    if( top && parent->version < 3 )
 80881c0:	b177      	cbz	r7, 80881e0 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x38>
 80881c2:	69af      	ldr	r7, [r5, #24]
        need_ca_bit = 0;

    /* Exception: self-signed end-entity certs that are locally trusted. */
    if( top && bottom &&
 80881c4:	f1b8 0f00 	cmp.w	r8, #0
 80881c8:	d008      	beq.n	80881dc <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x34>
        child->raw.len == parent->raw.len &&
 80881ca:	6872      	ldr	r2, [r6, #4]
    /* Exception: v1/v2 certificates that are locally trusted. */
    if( top && parent->version < 3 )
        need_ca_bit = 0;

    /* Exception: self-signed end-entity certs that are locally trusted. */
    if( top && bottom &&
 80881cc:	686b      	ldr	r3, [r5, #4]
 80881ce:	429a      	cmp	r2, r3
 80881d0:	d104      	bne.n	80881dc <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x34>
        child->raw.len == parent->raw.len &&
        memcmp( child->raw.p, parent->raw.p, child->raw.len ) == 0 )
 80881d2:	68a9      	ldr	r1, [r5, #8]
 80881d4:	68b0      	ldr	r0, [r6, #8]
 80881d6:	f00a f8a9 	bl	809232c <memcmp>
    if( top && parent->version < 3 )
        need_ca_bit = 0;

    /* Exception: self-signed end-entity certs that are locally trusted. */
    if( top && bottom &&
        child->raw.len == parent->raw.len &&
 80881da:	b178      	cbz	r0, 80881fc <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x54>
        memcmp( child->raw.p, parent->raw.p, child->raw.len ) == 0 )
    {
        need_ca_bit = 0;
    }

    if( need_ca_bit && ! parent->ca_istrue )
 80881dc:	2f02      	cmp	r7, #2
 80881de:	dd0d      	ble.n	80881fc <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x54>
 80881e0:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
 80881e4:	b143      	cbz	r3, 80881f8 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x50>
        return( -1 );

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( need_ca_bit &&
        mbedtls_x509_crt_check_key_usage( parent, MBEDTLS_X509_KU_KEY_CERT_SIGN ) != 0 )
 80881e6:	2104      	movs	r1, #4
 80881e8:	4628      	mov	r0, r5
 80881ea:	f7ff ffb9 	bl	8088160 <mbedtls_x509_crt_check_key_usage>

    if( need_ca_bit && ! parent->ca_istrue )
        return( -1 );

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( need_ca_bit &&
 80881ee:	3000      	adds	r0, #0
 80881f0:	bf18      	it	ne
 80881f2:	2001      	movne	r0, #1
 80881f4:	4244      	negs	r4, r0
 80881f6:	e001      	b.n	80881fc <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x54>
{
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
        return( -1 );
 80881f8:	f04f 34ff 	mov.w	r4, #4294967295
        return( -1 );
    }
#endif

    return( 0 );
}
 80881fc:	4620      	mov	r0, r4
 80881fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08088202 <mbedtls_x509_crt_is_revoked>:
#if defined(MBEDTLS_X509_CRL_PARSE_C)
/*
 * Return 1 if the certificate is revoked, or 0 otherwise.
 */
int mbedtls_x509_crt_is_revoked( const mbedtls_x509_crt *crt, const mbedtls_x509_crl *crl )
{
 8088202:	b538      	push	{r3, r4, r5, lr}
 8088204:	4605      	mov	r5, r0
    const mbedtls_x509_crl_entry *cur = &crl->entry;
 8088206:	f101 0484 	add.w	r4, r1, #132	; 0x84

    while( cur != NULL && cur->serial.len != 0 )
 808820a:	b1a4      	cbz	r4, 8088236 <mbedtls_x509_crt_is_revoked+0x34>
 808820c:	6922      	ldr	r2, [r4, #16]
 808820e:	b1a2      	cbz	r2, 808823a <mbedtls_x509_crt_is_revoked+0x38>
    {
        if( crt->serial.len == cur->serial.len &&
 8088210:	6a2b      	ldr	r3, [r5, #32]
 8088212:	429a      	cmp	r2, r3
 8088214:	d001      	beq.n	808821a <mbedtls_x509_crt_is_revoked+0x18>
        {
            if( mbedtls_x509_time_is_past( &cur->revocation_date ) )
                return( 1 );
        }

        cur = cur->next;
 8088216:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 */
int mbedtls_x509_crt_is_revoked( const mbedtls_x509_crt *crt, const mbedtls_x509_crl *crl )
{
    const mbedtls_x509_crl_entry *cur = &crl->entry;

    while( cur != NULL && cur->serial.len != 0 )
 8088218:	e7f7      	b.n	808820a <mbedtls_x509_crt_is_revoked+0x8>
    {
        if( crt->serial.len == cur->serial.len &&
            memcmp( crt->serial.p, cur->serial.p, crt->serial.len ) == 0 )
 808821a:	6961      	ldr	r1, [r4, #20]
 808821c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 808821e:	f00a f885 	bl	809232c <memcmp>
{
    const mbedtls_x509_crl_entry *cur = &crl->entry;

    while( cur != NULL && cur->serial.len != 0 )
    {
        if( crt->serial.len == cur->serial.len &&
 8088222:	2800      	cmp	r0, #0
 8088224:	d1f7      	bne.n	8088216 <mbedtls_x509_crt_is_revoked+0x14>
            memcmp( crt->serial.p, cur->serial.p, crt->serial.len ) == 0 )
        {
            if( mbedtls_x509_time_is_past( &cur->revocation_date ) )
 8088226:	f104 0018 	add.w	r0, r4, #24
 808822a:	f7fe fac1 	bl	80867b0 <mbedtls_x509_time_is_past>
 808822e:	2800      	cmp	r0, #0
 8088230:	d0f1      	beq.n	8088216 <mbedtls_x509_crt_is_revoked+0x14>
                return( 1 );
 8088232:	2001      	movs	r0, #1
 8088234:	bd38      	pop	{r3, r4, r5, pc}
        }

        cur = cur->next;
    }

    return( 0 );
 8088236:	4620      	mov	r0, r4
 8088238:	bd38      	pop	{r3, r4, r5, pc}
 808823a:	4610      	mov	r0, r2
}
 808823c:	bd38      	pop	{r3, r4, r5, pc}

0808823e <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile>:
 * Skip validation if no CRL for the given CA is present.
 */
static int x509_crt_verifycrl( mbedtls_x509_crt *crt, mbedtls_x509_crt *ca,
                               mbedtls_x509_crl *crl_list,
                               const mbedtls_x509_crt_profile *profile )
{
 808823e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8088242:	b099      	sub	sp, #100	; 0x64
 8088244:	9005      	str	r0, [sp, #20]
 8088246:	4614      	mov	r4, r2
 8088248:	461f      	mov	r7, r3
    int flags = 0;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;

    if( ca == NULL )
 808824a:	460e      	mov	r6, r1
 808824c:	2900      	cmp	r1, #0
 808824e:	d077      	beq.n	8088340 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x102>
 8088250:	2500      	movs	r5, #0
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 8088252:	f04f 0a01 	mov.w	sl, #1
    const mbedtls_md_info_t *md_info;

    if( ca == NULL )
        return( flags );

    while( crl_list != NULL )
 8088256:	2c00      	cmp	r4, #0
 8088258:	d07a      	beq.n	8088350 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x112>
    {
        if( crl_list->version == 0 ||
 808825a:	69a3      	ldr	r3, [r4, #24]
 808825c:	2b00      	cmp	r3, #0
 808825e:	d06c      	beq.n	808833a <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xfc>
            crl_list->issuer_raw.len != ca->subject_raw.len ||
 8088260:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    if( ca == NULL )
        return( flags );

    while( crl_list != NULL )
    {
        if( crl_list->version == 0 ||
 8088262:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8088264:	429a      	cmp	r2, r3
 8088266:	d168      	bne.n	808833a <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xfc>
            crl_list->issuer_raw.len != ca->subject_raw.len ||
            memcmp( crl_list->issuer_raw.p, ca->subject_raw.p,
 8088268:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 808826a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 808826c:	f00a f85e 	bl	809232c <memcmp>
        return( flags );

    while( crl_list != NULL )
    {
        if( crl_list->version == 0 ||
            crl_list->issuer_raw.len != ca->subject_raw.len ||
 8088270:	2800      	cmp	r0, #0
 8088272:	d162      	bne.n	808833a <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xfc>

        /*
         * Check if the CA is configured to sign CRLs
         */
#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
        if( mbedtls_x509_crt_check_key_usage( ca, MBEDTLS_X509_KU_CRL_SIGN ) != 0 )
 8088274:	2102      	movs	r1, #2
 8088276:	4630      	mov	r0, r6
 8088278:	f7ff ff72 	bl	8088160 <mbedtls_x509_crt_check_key_usage>
 808827c:	2800      	cmp	r0, #0
 808827e:	d143      	bne.n	8088308 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xca>
#endif

        /*
         * Check if CRL is correctly signed by the trusted CA
         */
        if( x509_profile_check_md_alg( profile, crl_list->sig_md ) != 0 )
 8088280:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 8088284:	683a      	ldr	r2, [r7, #0]
 8088286:	1e43      	subs	r3, r0, #1
 8088288:	fa0a f303 	lsl.w	r3, sl, r3
 808828c:	4213      	tst	r3, r2
 808828e:	d059      	beq.n	8088344 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x106>
 8088290:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
 8088294:	2201      	movs	r2, #1
 8088296:	3b01      	subs	r3, #1
 8088298:	fa02 f303 	lsl.w	r3, r2, r3
 808829c:	687a      	ldr	r2, [r7, #4]
 808829e:	4213      	tst	r3, r2
 80882a0:	d053      	beq.n	808834a <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x10c>
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;

        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;

        md_info = mbedtls_md_info_from_type( crl_list->sig_md );
 80882a2:	f7ff fa01 	bl	80876a8 <mbedtls_md_info_from_type>
        if( mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash ) != 0 )
 80882a6:	f10d 0920 	add.w	r9, sp, #32
 80882aa:	464b      	mov	r3, r9
 80882ac:	6922      	ldr	r2, [r4, #16]
 80882ae:	6961      	ldr	r1, [r4, #20]
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;

        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;

        md_info = mbedtls_md_info_from_type( crl_list->sig_md );
 80882b0:	4683      	mov	fp, r0
        if( mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash ) != 0 )
 80882b2:	f7ff fa6b 	bl	808778c <mbedtls_md>
 80882b6:	bb38      	cbnz	r0, 8088308 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xca>
            /* Note: this can't happen except after an internal error */
            flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
            break;
        }

        if( x509_profile_check_key( profile, crl_list->sig_pk, &ca->pk ) != 0 )
 80882b8:	f106 08bc 	add.w	r8, r6, #188	; 0xbc
 80882bc:	4642      	mov	r2, r8
 80882be:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
 80882c2:	f107 000c 	add.w	r0, r7, #12
 80882c6:	f7ff fbdb 	bl	8087a80 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>
 80882ca:	b108      	cbz	r0, 80882d0 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x92>
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 80882cc:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 80882d0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
 80882d4:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
 80882d8:	9304      	str	r3, [sp, #16]
 80882da:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
 80882de:	4658      	mov	r0, fp
        }

        if( x509_profile_check_key( profile, crl_list->sig_pk, &ca->pk ) != 0 )
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 80882e0:	9107      	str	r1, [sp, #28]
 80882e2:	9306      	str	r3, [sp, #24]
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
 80882e4:	f7ff fb24 	bl	8087930 <mbedtls_md_get_size>
        }

        if( x509_profile_check_key( profile, crl_list->sig_pk, &ca->pk ) != 0 )
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 80882e8:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 80882ec:	9b06      	ldr	r3, [sp, #24]
 80882ee:	9203      	str	r2, [sp, #12]
 80882f0:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
 80882f4:	9907      	ldr	r1, [sp, #28]
 80882f6:	9202      	str	r2, [sp, #8]
 80882f8:	9001      	str	r0, [sp, #4]
 80882fa:	f8cd 9000 	str.w	r9, [sp]
 80882fe:	4642      	mov	r2, r8
 8088300:	9804      	ldr	r0, [sp, #16]
 8088302:	f004 f98d 	bl	808c620 <mbedtls_pk_verify_ext>
 8088306:	b110      	cbz	r0, 808830e <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xd0>
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
                           crl_list->sig.p, crl_list->sig.len ) != 0 )
        {
            flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
 8088308:	f045 0510 	orr.w	r5, r5, #16
            break;
 808830c:	e020      	b.n	8088350 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x112>
        }

        /*
         * Check for validity of CRL (Do not drop out)
         */
        if( mbedtls_x509_time_is_past( &crl_list->next_update ) )
 808830e:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 8088312:	f7fe fa4d 	bl	80867b0 <mbedtls_x509_time_is_past>
 8088316:	b108      	cbz	r0, 808831c <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xde>
            flags |= MBEDTLS_X509_BADCRL_EXPIRED;
 8088318:	f045 0520 	orr.w	r5, r5, #32

        if( mbedtls_x509_time_is_future( &crl_list->this_update ) )
 808831c:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8088320:	f7fe fa48 	bl	80867b4 <mbedtls_x509_time_is_future>
 8088324:	b108      	cbz	r0, 808832a <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xec>
            flags |= MBEDTLS_X509_BADCRL_FUTURE;
 8088326:	f445 6580 	orr.w	r5, r5, #1024	; 0x400

        /*
         * Check if certificate is revoked
         */
        if( mbedtls_x509_crt_is_revoked( crt, crl_list ) )
 808832a:	4621      	mov	r1, r4
 808832c:	9805      	ldr	r0, [sp, #20]
 808832e:	f7ff ff68 	bl	8088202 <mbedtls_x509_crt_is_revoked>
 8088332:	b110      	cbz	r0, 808833a <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xfc>
        {
            flags |= MBEDTLS_X509_BADCERT_REVOKED;
 8088334:	f045 0502 	orr.w	r5, r5, #2
            break;
 8088338:	e00a      	b.n	8088350 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x112>
        }

        crl_list = crl_list->next;
 808833a:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 808833e:	e78a      	b.n	8088256 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x18>
    int flags = 0;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;

    if( ca == NULL )
        return( flags );
 8088340:	460d      	mov	r5, r1
 8088342:	e005      	b.n	8088350 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x112>

        /*
         * Check if CRL is correctly signed by the trusted CA
         */
        if( x509_profile_check_md_alg( profile, crl_list->sig_md ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;
 8088344:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
 8088348:	e7a2      	b.n	8088290 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x52>

        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;
 808834a:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000
 808834e:	e7a8      	b.n	80882a2 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x64>

        crl_list = crl_list->next;
    }

    return( flags );
}
 8088350:	4628      	mov	r0, r5
 8088352:	b019      	add	sp, #100	; 0x64
 8088354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08088358 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>:
                mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 8088358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808835c:	4604      	mov	r4, r0
 808835e:	b09d      	sub	sp, #116	; 0x74
 8088360:	4699      	mov	r9, r3
    int check_path_cnt;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_x509_crt *future_past_ca = NULL;

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 8088362:	30a4      	adds	r0, #164	; 0xa4
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
    int ret;
    uint32_t ca_flags = 0;
 8088364:	2300      	movs	r3, #0
                mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 8088366:	460d      	mov	r5, r1
 8088368:	9206      	str	r2, [sp, #24]
 808836a:	f8dd 8098 	ldr.w	r8, [sp, #152]	; 0x98
 808836e:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8088370:	f8dd a0a4 	ldr.w	sl, [sp, #164]	; 0xa4
    int ret;
    uint32_t ca_flags = 0;
 8088374:	930b      	str	r3, [sp, #44]	; 0x2c
    int check_path_cnt;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_x509_crt *future_past_ca = NULL;

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 8088376:	f7fe fa1b 	bl	80867b0 <mbedtls_x509_time_is_past>
 808837a:	b118      	cbz	r0, 8088384 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x2c>
        *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 808837c:	6833      	ldr	r3, [r6, #0]
 808837e:	f043 0301 	orr.w	r3, r3, #1
 8088382:	6033      	str	r3, [r6, #0]

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
 8088384:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 8088388:	f7fe fa14 	bl	80867b4 <mbedtls_x509_time_is_future>
 808838c:	b118      	cbz	r0, 8088396 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x3e>
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;
 808838e:	6833      	ldr	r3, [r6, #0]
 8088390:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8088394:	6033      	str	r3, [r6, #0]
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 8088396:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
 808839a:	1e5a      	subs	r2, r3, #1
 808839c:	2301      	movs	r3, #1
 808839e:	4093      	lsls	r3, r2
 80883a0:	f8d9 2000 	ldr.w	r2, [r9]
 80883a4:	4213      	tst	r3, r2
 80883a6:	f000 80c0 	beq.w	808852a <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1d2>
 80883aa:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
 80883ae:	1e5a      	subs	r2, r3, #1
 80883b0:	2301      	movs	r3, #1
 80883b2:	4093      	lsls	r3, r2
 80883b4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80883b8:	4213      	tst	r3, r2
 80883ba:	f000 80bb 	beq.w	8088534 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1dc>
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    /*
     * Child is the top of the chain. Check against the trust_ca list.
     */
    *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 80883be:	6833      	ldr	r3, [r6, #0]

    md_info = mbedtls_md_info_from_type( child->sig_md );
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 80883c0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    /*
     * Child is the top of the chain. Check against the trust_ca list.
     */
    *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 80883c4:	f043 0308 	orr.w	r3, r3, #8
 80883c8:	6033      	str	r3, [r6, #0]

    md_info = mbedtls_md_info_from_type( child->sig_md );
 80883ca:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
 80883ce:	f7ff f96b 	bl	80876a8 <mbedtls_md_info_from_type>
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 80883d2:	465b      	mov	r3, fp
 80883d4:	6922      	ldr	r2, [r4, #16]
 80883d6:	6961      	ldr	r1, [r4, #20]
    /*
     * Child is the top of the chain. Check against the trust_ca list.
     */
    *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;

    md_info = mbedtls_md_info_from_type( child->sig_md );
 80883d8:	9005      	str	r0, [sp, #20]
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 80883da:	f7ff f9d7 	bl	808778c <mbedtls_md>
 80883de:	2800      	cmp	r0, #0
 80883e0:	d16d      	bne.n	80884be <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x166>
 80883e2:	4607      	mov	r7, r0
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 80883e4:	f8cd b01c 	str.w	fp, [sp, #28]
        /* Note: this can't happen except after an internal error */
        /* Cannot check signature, no need to try any CA */
        trust_ca = NULL;
    }

    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
 80883e8:	b915      	cbnz	r5, 80883f0 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x98>
        }

        break;
    }

    if( trust_ca != NULL || ( trust_ca = future_past_ca ) != NULL )
 80883ea:	2f00      	cmp	r7, #0
 80883ec:	d14c      	bne.n	8088488 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x130>
 80883ee:	e066      	b.n	80884be <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x166>
        trust_ca = NULL;
    }

    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
    {
        if( x509_crt_check_parent( child, trust_ca, 1, path_cnt == 0 ) != 0 )
 80883f0:	fab8 f388 	clz	r3, r8
 80883f4:	2201      	movs	r2, #1
 80883f6:	095b      	lsrs	r3, r3, #5
 80883f8:	4629      	mov	r1, r5
 80883fa:	4620      	mov	r0, r4
 80883fc:	f7ff fed4 	bl	80881a8 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 8088400:	2800      	cmp	r0, #0
 8088402:	d13e      	bne.n	8088482 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x12a>

        /*
         * Reduce check_path_cnt to check against if top of the chain is
         * the same as the trusted CA
         */
        if( child->subject_raw.len == trust_ca->subject_raw.len &&
 8088404:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8088406:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
    {
        if( x509_crt_check_parent( child, trust_ca, 1, path_cnt == 0 ) != 0 )
            continue;

        check_path_cnt = path_cnt + 1;
 8088408:	f108 0b01 	add.w	fp, r8, #1

        /*
         * Reduce check_path_cnt to check against if top of the chain is
         * the same as the trusted CA
         */
        if( child->subject_raw.len == trust_ca->subject_raw.len &&
 808840c:	429a      	cmp	r2, r3
 808840e:	d106      	bne.n	808841e <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xc6>
            memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
 8088410:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8088412:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8088414:	f009 ff8a 	bl	809232c <memcmp>
                    child->subject_raw.len ) == 0 )
        {
            check_path_cnt--;
 8088418:	2800      	cmp	r0, #0
 808841a:	bf08      	it	eq
 808841c:	46c3      	moveq	fp, r8
        }

        /* Self signed certificates do not count towards the limit */
        if( trust_ca->max_pathlen > 0 &&
 808841e:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 8088422:	2b00      	cmp	r3, #0
 8088424:	dd04      	ble.n	8088430 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xd8>
 8088426:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8088428:	ebc2 0b0b 	rsb	fp, r2, fp
 808842c:	455b      	cmp	r3, fp
 808842e:	db28      	blt.n	8088482 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x12a>
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 8088430:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 8088434:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 8088438:	9805      	ldr	r0, [sp, #20]
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 808843a:	f894 b129 	ldrb.w	fp, [r4, #297]	; 0x129
 808843e:	9109      	str	r1, [sp, #36]	; 0x24
 8088440:	9308      	str	r3, [sp, #32]
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 8088442:	f7ff fa75 	bl	8087930 <mbedtls_md_get_size>
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 8088446:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 808844a:	9b07      	ldr	r3, [sp, #28]
 808844c:	9203      	str	r2, [sp, #12]
 808844e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8088452:	9001      	str	r0, [sp, #4]
 8088454:	9202      	str	r2, [sp, #8]
 8088456:	9300      	str	r3, [sp, #0]
 8088458:	f105 02bc 	add.w	r2, r5, #188	; 0xbc
 808845c:	9b08      	ldr	r3, [sp, #32]
 808845e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8088460:	4658      	mov	r0, fp
 8088462:	f004 f8dd 	bl	808c620 <mbedtls_pk_verify_ext>
 8088466:	b960      	cbnz	r0, 8088482 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x12a>
                           child->sig.p, child->sig.len ) != 0 )
        {
            continue;
        }

        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) ||
 8088468:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
 808846c:	f7fe f9a0 	bl	80867b0 <mbedtls_x509_time_is_past>
 8088470:	b920      	cbnz	r0, 808847c <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x124>
            mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
 8088472:	f105 008c 	add.w	r0, r5, #140	; 0x8c
 8088476:	f7fe f99d 	bl	80867b4 <mbedtls_x509_time_is_future>
                           child->sig.p, child->sig.len ) != 0 )
        {
            continue;
        }

        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) ||
 808847a:	b130      	cbz	r0, 808848a <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x132>
            mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
        {
            if ( future_past_ca == NULL )
 808847c:	2f00      	cmp	r7, #0
 808847e:	bf08      	it	eq
 8088480:	462f      	moveq	r7, r5
        /* Note: this can't happen except after an internal error */
        /* Cannot check signature, no need to try any CA */
        trust_ca = NULL;
    }

    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
 8088482:	f8d5 5130 	ldr.w	r5, [r5, #304]	; 0x130
 8088486:	e7af      	b.n	80883e8 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x90>
 8088488:	463d      	mov	r5, r7
    if( trust_ca != NULL || ( trust_ca = future_past_ca ) != NULL )
    {
        /*
         * Top of chain is signed by a trusted CA
         */
        *flags &= ~MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 808848a:	6833      	ldr	r3, [r6, #0]

        if( x509_profile_check_key( profile, child->sig_pk, &trust_ca->pk ) != 0 )
 808848c:	f105 02bc 	add.w	r2, r5, #188	; 0xbc
    if( trust_ca != NULL || ( trust_ca = future_past_ca ) != NULL )
    {
        /*
         * Top of chain is signed by a trusted CA
         */
        *flags &= ~MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 8088490:	f023 0308 	bic.w	r3, r3, #8
 8088494:	6033      	str	r3, [r6, #0]

        if( x509_profile_check_key( profile, child->sig_pk, &trust_ca->pk ) != 0 )
 8088496:	f894 1129 	ldrb.w	r1, [r4, #297]	; 0x129
 808849a:	f109 000c 	add.w	r0, r9, #12
 808849e:	f7ff faef 	bl	8087a80 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>
 80884a2:	b118      	cbz	r0, 80884ac <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x154>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 80884a4:	6833      	ldr	r3, [r6, #0]
 80884a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80884aa:	6033      	str	r3, [r6, #0]
     * If top of chain is not the same as the trusted CA send a verify request
     * to the callback for any issues with validity and CRL presence for the
     * trusted CA certificate.
     */
    if( trust_ca != NULL &&
        ( child->subject_raw.len != trust_ca->subject_raw.len ||
 80884ac:	6c62      	ldr	r2, [r4, #68]	; 0x44
    /*
     * If top of chain is not the same as the trusted CA send a verify request
     * to the callback for any issues with validity and CRL presence for the
     * trusted CA certificate.
     */
    if( trust_ca != NULL &&
 80884ae:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80884b0:	429a      	cmp	r2, r3
 80884b2:	d10d      	bne.n	80884d0 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x178>
        ( child->subject_raw.len != trust_ca->subject_raw.len ||
          memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
 80884b4:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 80884b6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80884b8:	f009 ff38 	bl	809232c <memcmp>
     * If top of chain is not the same as the trusted CA send a verify request
     * to the callback for any issues with validity and CRL presence for the
     * trusted CA certificate.
     */
    if( trust_ca != NULL &&
        ( child->subject_raw.len != trust_ca->subject_raw.len ||
 80884bc:	b940      	cbnz	r0, 80884d0 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x178>
            }
        }
    }

    /* Call callback on top cert */
    if( NULL != f_vrfy )
 80884be:	f1ba 0f00 	cmp.w	sl, #0
 80884c2:	d12a      	bne.n	808851a <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1c2>
    {
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );
    }

    *flags |= ca_flags;
 80884c4:	6832      	ldr	r2, [r6, #0]
 80884c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    return( 0 );
 80884c8:	2000      	movs	r0, #0
    {
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );
    }

    *flags |= ca_flags;
 80884ca:	4313      	orrs	r3, r2
 80884cc:	6033      	str	r3, [r6, #0]

    return( 0 );
 80884ce:	e036      	b.n	808853e <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1e6>
          memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
                  child->subject_raw.len ) != 0 ) )
    {
#if defined(MBEDTLS_X509_CRL_PARSE_C)
        /* Check trusted CA's CRL for the chain's top crt */
        *flags |= x509_crt_verifycrl( child, trust_ca, ca_crl, profile );
 80884d0:	464b      	mov	r3, r9
 80884d2:	9a06      	ldr	r2, [sp, #24]
 80884d4:	4629      	mov	r1, r5
 80884d6:	4620      	mov	r0, r4
 80884d8:	f7ff feb1 	bl	808823e <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile>
 80884dc:	6833      	ldr	r3, [r6, #0]
 80884de:	4318      	orrs	r0, r3
 80884e0:	6030      	str	r0, [r6, #0]
#else
        ((void) ca_crl);
#endif

        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) )
 80884e2:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
 80884e6:	f7fe f963 	bl	80867b0 <mbedtls_x509_time_is_past>
 80884ea:	b118      	cbz	r0, 80884f4 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x19c>
            ca_flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 80884ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80884ee:	f043 0301 	orr.w	r3, r3, #1
 80884f2:	930b      	str	r3, [sp, #44]	; 0x2c

        if( mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
 80884f4:	f105 008c 	add.w	r0, r5, #140	; 0x8c
 80884f8:	f7fe f95c 	bl	80867b4 <mbedtls_x509_time_is_future>
 80884fc:	b118      	cbz	r0, 8088506 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1ae>
            ca_flags |= MBEDTLS_X509_BADCERT_FUTURE;
 80884fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8088500:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8088504:	930b      	str	r3, [sp, #44]	; 0x2c

        if( NULL != f_vrfy )
 8088506:	f1ba 0f00 	cmp.w	sl, #0
 808850a:	d0db      	beq.n	80884c4 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x16c>
        {
            if( ( ret = f_vrfy( p_vrfy, trust_ca, path_cnt + 1,
 808850c:	ab0b      	add	r3, sp, #44	; 0x2c
 808850e:	f108 0201 	add.w	r2, r8, #1
 8088512:	4629      	mov	r1, r5
 8088514:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8088516:	47d0      	blx	sl
 8088518:	b988      	cbnz	r0, 808853e <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1e6>
    }

    /* Call callback on top cert */
    if( NULL != f_vrfy )
    {
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
 808851a:	4633      	mov	r3, r6
 808851c:	4642      	mov	r2, r8
 808851e:	4621      	mov	r1, r4
 8088520:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8088522:	47d0      	blx	sl
 8088524:	2800      	cmp	r0, #0
 8088526:	d0cd      	beq.n	80884c4 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x16c>
 8088528:	e009      	b.n	808853e <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1e6>

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;

    if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
 808852a:	6833      	ldr	r3, [r6, #0]
 808852c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8088530:	6033      	str	r3, [r6, #0]
 8088532:	e73a      	b.n	80883aa <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x52>

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 8088534:	6833      	ldr	r3, [r6, #0]
 8088536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 808853a:	6033      	str	r3, [r6, #0]
 808853c:	e73f      	b.n	80883be <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x66>
    }

    *flags |= ca_flags;

    return( 0 );
}
 808853e:	b01d      	add	sp, #116	; 0x74
 8088540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08088544 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>:
                mbedtls_x509_crt *trust_ca, mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 8088544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8088548:	b09d      	sub	sp, #116	; 0x74
 808854a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 808854c:	469a      	mov	sl, r3
    int ret;
    uint32_t parent_flags = 0;
 808854e:	2300      	movs	r3, #0
                mbedtls_x509_crt *trust_ca, mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 8088550:	4605      	mov	r5, r0
 8088552:	460f      	mov	r7, r1
 8088554:	9206      	str	r2, [sp, #24]
 8088556:	f8dd 8098 	ldr.w	r8, [sp, #152]	; 0x98
 808855a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
    int ret;
    uint32_t parent_flags = 0;
 808855c:	930b      	str	r3, [sp, #44]	; 0x2c
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    mbedtls_x509_crt *grandparent;
    const mbedtls_md_info_t *md_info;

    /* Counting intermediate self signed certificates */
    if( ( path_cnt != 0 ) && x509_name_cmp( &child->issuer, &child->subject ) == 0 )
 808855e:	b146      	cbz	r6, 8088572 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x2e>
 8088560:	f100 016c 	add.w	r1, r0, #108	; 0x6c
 8088564:	304c      	adds	r0, #76	; 0x4c
 8088566:	f7ff fa04 	bl	8087972 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
 808856a:	2800      	cmp	r0, #0
 808856c:	d07a      	beq.n	8088664 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x120>
        self_cnt++;

    /* path_cnt is 0 for the first intermediate CA */
    if( 1 + path_cnt > MBEDTLS_X509_MAX_INTERMEDIATE_CA )
 808856e:	2e07      	cmp	r6, #7
 8088570:	dc76      	bgt.n	8088660 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x11c>
    {
        /* return immediately as the goal is to avoid unbounded recursion */
        return( MBEDTLS_ERR_X509_FATAL_ERROR );
    }

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 8088572:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
 8088576:	f7fe f91b 	bl	80867b0 <mbedtls_x509_time_is_past>
 808857a:	b118      	cbz	r0, 8088584 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x40>
        *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 808857c:	6823      	ldr	r3, [r4, #0]
 808857e:	f043 0301 	orr.w	r3, r3, #1
 8088582:	6023      	str	r3, [r4, #0]

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
 8088584:	f105 008c 	add.w	r0, r5, #140	; 0x8c
 8088588:	f7fe f914 	bl	80867b4 <mbedtls_x509_time_is_future>
 808858c:	b118      	cbz	r0, 8088596 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x52>
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;
 808858e:	6823      	ldr	r3, [r4, #0]
 8088590:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8088594:	6023      	str	r3, [r4, #0]
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 8088596:	f895 3128 	ldrb.w	r3, [r5, #296]	; 0x128
 808859a:	1e5a      	subs	r2, r3, #1
 808859c:	2301      	movs	r3, #1
 808859e:	4093      	lsls	r3, r2
 80885a0:	f8d8 2000 	ldr.w	r2, [r8]
 80885a4:	4213      	tst	r3, r2
 80885a6:	d061      	beq.n	808866c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x128>
 80885a8:	f895 3129 	ldrb.w	r3, [r5, #297]	; 0x129
 80885ac:	1e5a      	subs	r2, r3, #1
 80885ae:	2301      	movs	r3, #1
 80885b0:	4093      	lsls	r3, r2
 80885b2:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80885b6:	4213      	tst	r3, r2
 80885b8:	d05d      	beq.n	8088676 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x132>
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    md_info = mbedtls_md_info_from_type( child->sig_md );
 80885ba:	f895 0128 	ldrb.w	r0, [r5, #296]	; 0x128
 80885be:	f7ff f873 	bl	80876a8 <mbedtls_md_info_from_type>
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 80885c2:	ab0c      	add	r3, sp, #48	; 0x30
 80885c4:	692a      	ldr	r2, [r5, #16]
 80885c6:	6969      	ldr	r1, [r5, #20]
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    md_info = mbedtls_md_info_from_type( child->sig_md );
 80885c8:	4683      	mov	fp, r0
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 80885ca:	f7ff f8df 	bl	808778c <mbedtls_md>
 80885ce:	bb48      	cbnz	r0, 8088624 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xe0>
        /* Note: this can't happen except after an internal error */
        *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
    }
    else
    {
        if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
 80885d0:	f107 09bc 	add.w	r9, r7, #188	; 0xbc
 80885d4:	464a      	mov	r2, r9
 80885d6:	f895 1129 	ldrb.w	r1, [r5, #297]	; 0x129
 80885da:	f108 000c 	add.w	r0, r8, #12
 80885de:	f7ff fa4f 	bl	8087a80 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>
 80885e2:	b118      	cbz	r0, 80885ec <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xa8>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 80885e4:	6823      	ldr	r3, [r4, #0]
 80885e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80885ea:	6023      	str	r3, [r4, #0]

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 80885ec:	f895 3129 	ldrb.w	r3, [r5, #297]	; 0x129
 80885f0:	f8d5 112c 	ldr.w	r1, [r5, #300]	; 0x12c
 80885f4:	9307      	str	r3, [sp, #28]
 80885f6:	f895 3128 	ldrb.w	r3, [r5, #296]	; 0x128
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 80885fa:	4658      	mov	r0, fp
    else
    {
        if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 80885fc:	9109      	str	r1, [sp, #36]	; 0x24
 80885fe:	9308      	str	r3, [sp, #32]
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 8088600:	f7ff f996 	bl	8087930 <mbedtls_md_get_size>
    else
    {
        if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 8088604:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
 8088608:	9b08      	ldr	r3, [sp, #32]
 808860a:	9203      	str	r2, [sp, #12]
 808860c:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
 8088610:	9909      	ldr	r1, [sp, #36]	; 0x24
 8088612:	9202      	str	r2, [sp, #8]
 8088614:	aa0c      	add	r2, sp, #48	; 0x30
 8088616:	9001      	str	r0, [sp, #4]
 8088618:	9200      	str	r2, [sp, #0]
 808861a:	9807      	ldr	r0, [sp, #28]
 808861c:	464a      	mov	r2, r9
 808861e:	f003 ffff 	bl	808c620 <mbedtls_pk_verify_ext>
 8088622:	b118      	cbz	r0, 808862c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xe8>
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
                           child->sig.p, child->sig.len ) != 0 )
        {
            *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 8088624:	6823      	ldr	r3, [r4, #0]
 8088626:	f043 0308 	orr.w	r3, r3, #8
 808862a:	6023      	str	r3, [r4, #0]
        }
    }

#if defined(MBEDTLS_X509_CRL_PARSE_C)
    /* Check trusted CA's CRL for the given crt */
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
 808862c:	4643      	mov	r3, r8
 808862e:	4652      	mov	r2, sl
 8088630:	4639      	mov	r1, r7
 8088632:	4628      	mov	r0, r5
 8088634:	f7ff fe03 	bl	808823e <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile>
 8088638:	6823      	ldr	r3, [r4, #0]
#endif

    /* Look for a grandparent in trusted CAs */
    for( grandparent = trust_ca;
 808863a:	f8dd 9018 	ldr.w	r9, [sp, #24]
        }
    }

#if defined(MBEDTLS_X509_CRL_PARSE_C)
    /* Check trusted CA's CRL for the given crt */
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
 808863e:	4318      	orrs	r0, r3
 8088640:	6020      	str	r0, [r4, #0]
#endif

    /* Look for a grandparent in trusted CAs */
    for( grandparent = trust_ca;
         grandparent != NULL;
 8088642:	f1b9 0f00 	cmp.w	r9, #0
 8088646:	d029      	beq.n	808869c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x158>
         grandparent = grandparent->next )
    {
        if( x509_crt_check_parent( parent, grandparent,
 8088648:	fab6 f386 	clz	r3, r6
 808864c:	2200      	movs	r2, #0
 808864e:	095b      	lsrs	r3, r3, #5
 8088650:	4649      	mov	r1, r9
 8088652:	4638      	mov	r0, r7
 8088654:	f7ff fda8 	bl	80881a8 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 8088658:	b190      	cbz	r0, 8088680 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x13c>
    /* Check trusted CA's CRL for the given crt */
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
#endif

    /* Look for a grandparent in trusted CAs */
    for( grandparent = trust_ca;
 808865a:	f8d9 9130 	ldr.w	r9, [r9, #304]	; 0x130
 808865e:	e7f0      	b.n	8088642 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xfe>

    /* path_cnt is 0 for the first intermediate CA */
    if( 1 + path_cnt > MBEDTLS_X509_MAX_INTERMEDIATE_CA )
    {
        /* return immediately as the goal is to avoid unbounded recursion */
        return( MBEDTLS_ERR_X509_FATAL_ERROR );
 8088660:	4838      	ldr	r0, [pc, #224]	; (8088744 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x200>)
 8088662:	e06b      	b.n	808873c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1f8>
    mbedtls_x509_crt *grandparent;
    const mbedtls_md_info_t *md_info;

    /* Counting intermediate self signed certificates */
    if( ( path_cnt != 0 ) && x509_name_cmp( &child->issuer, &child->subject ) == 0 )
        self_cnt++;
 8088664:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8088666:	3301      	adds	r3, #1
 8088668:	9328      	str	r3, [sp, #160]	; 0xa0
 808866a:	e780      	b.n	808856e <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x2a>

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;

    if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
 808866c:	6823      	ldr	r3, [r4, #0]
 808866e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8088672:	6023      	str	r3, [r4, #0]
 8088674:	e798      	b.n	80885a8 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x64>

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 8088676:	6823      	ldr	r3, [r4, #0]
 8088678:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 808867c:	6023      	str	r3, [r4, #0]
 808867e:	e79c      	b.n	80885ba <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x76>
    }

    if( grandparent != NULL )
    {
        ret = x509_crt_verify_top( parent, grandparent, ca_crl, profile,
                                path_cnt + 1, self_cnt, &parent_flags, f_vrfy, p_vrfy );
 8088680:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8088682:	4652      	mov	r2, sl
 8088684:	9304      	str	r3, [sp, #16]
 8088686:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8088688:	4649      	mov	r1, r9
 808868a:	9303      	str	r3, [sp, #12]
 808868c:	ab0b      	add	r3, sp, #44	; 0x2c
 808868e:	9302      	str	r3, [sp, #8]
 8088690:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8088692:	9301      	str	r3, [sp, #4]
 8088694:	1c73      	adds	r3, r6, #1
 8088696:	9300      	str	r3, [sp, #0]
 8088698:	4643      	mov	r3, r8
 808869a:	e03b      	b.n	8088714 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1d0>
             grandparent = grandparent->next )
        {
            /* +2 because the current step is not yet accounted for
             * and because max_pathlen is one higher than it should be.
             * Also self signed certificates do not count to the limit. */
            if( grandparent->max_pathlen > 0 &&
 808869c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 808869e:	f106 0b02 	add.w	fp, r6, #2
            return( ret );
    }
    else
    {
        /* Look for a grandparent upwards the chain */
        for( grandparent = parent->next;
 80886a2:	f8d7 9130 	ldr.w	r9, [r7, #304]	; 0x130
             grandparent = grandparent->next )
        {
            /* +2 because the current step is not yet accounted for
             * and because max_pathlen is one higher than it should be.
             * Also self signed certificates do not count to the limit. */
            if( grandparent->max_pathlen > 0 &&
 80886a6:	ebc3 0b0b 	rsb	fp, r3, fp
    }
    else
    {
        /* Look for a grandparent upwards the chain */
        for( grandparent = parent->next;
             grandparent != NULL;
 80886aa:	f1b9 0f00 	cmp.w	r9, #0
 80886ae:	d024      	beq.n	80886fa <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1b6>
             grandparent = grandparent->next )
        {
            /* +2 because the current step is not yet accounted for
             * and because max_pathlen is one higher than it should be.
             * Also self signed certificates do not count to the limit. */
            if( grandparent->max_pathlen > 0 &&
 80886b0:	f8d9 3100 	ldr.w	r3, [r9, #256]	; 0x100
 80886b4:	2b00      	cmp	r3, #0
 80886b6:	dd01      	ble.n	80886bc <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x178>
 80886b8:	455b      	cmp	r3, fp
 80886ba:	db08      	blt.n	80886ce <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x18a>
                grandparent->max_pathlen < 2 + path_cnt - self_cnt )
            {
                continue;
            }

            if( x509_crt_check_parent( parent, grandparent,
 80886bc:	fab6 f386 	clz	r3, r6
 80886c0:	2200      	movs	r2, #0
 80886c2:	095b      	lsrs	r3, r3, #5
 80886c4:	4649      	mov	r1, r9
 80886c6:	4638      	mov	r0, r7
 80886c8:	f7ff fd6e 	bl	80881a8 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 80886cc:	b110      	cbz	r0, 80886d4 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x190>
            return( ret );
    }
    else
    {
        /* Look for a grandparent upwards the chain */
        for( grandparent = parent->next;
 80886ce:	f8d9 9130 	ldr.w	r9, [r9, #304]	; 0x130
 80886d2:	e7ea      	b.n	80886aa <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x166>
        /* Is our parent part of the chain or at the top? */
        if( grandparent != NULL )
        {
            ret = x509_crt_verify_child( parent, grandparent, trust_ca, ca_crl,
                                         profile, path_cnt + 1, self_cnt, &parent_flags,
                                         f_vrfy, p_vrfy );
 80886d4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80886d6:	f8cd 8000 	str.w	r8, [sp]
 80886da:	9305      	str	r3, [sp, #20]
 80886dc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80886de:	9a06      	ldr	r2, [sp, #24]
 80886e0:	9304      	str	r3, [sp, #16]
 80886e2:	ab0b      	add	r3, sp, #44	; 0x2c
 80886e4:	9303      	str	r3, [sp, #12]
 80886e6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80886e8:	4649      	mov	r1, r9
 80886ea:	9302      	str	r3, [sp, #8]
 80886ec:	1c73      	adds	r3, r6, #1
 80886ee:	9301      	str	r3, [sp, #4]
 80886f0:	4638      	mov	r0, r7
 80886f2:	4653      	mov	r3, sl
 80886f4:	f7ff ff26 	bl	8088544 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>
 80886f8:	e00f      	b.n	808871a <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1d6>
        }
        else
        {
            ret = x509_crt_verify_top( parent, trust_ca, ca_crl, profile,
                                       path_cnt + 1, self_cnt, &parent_flags,
                                       f_vrfy, p_vrfy );
 80886fa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80886fc:	4652      	mov	r2, sl
 80886fe:	9304      	str	r3, [sp, #16]
 8088700:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8088702:	9906      	ldr	r1, [sp, #24]
 8088704:	9303      	str	r3, [sp, #12]
 8088706:	ab0b      	add	r3, sp, #44	; 0x2c
 8088708:	9302      	str	r3, [sp, #8]
 808870a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 808870c:	9301      	str	r3, [sp, #4]
 808870e:	1c73      	adds	r3, r6, #1
 8088710:	9300      	str	r3, [sp, #0]
 8088712:	4643      	mov	r3, r8
 8088714:	4638      	mov	r0, r7
 8088716:	f7ff fe1f 	bl	8088358 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>
            if( ret != 0 )
 808871a:	b978      	cbnz	r0, 808873c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1f8>
                return( ret );
        }
    }

    /* child is verified to be a child of the parent, call verify callback */
    if( NULL != f_vrfy )
 808871c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 808871e:	b92b      	cbnz	r3, 808872c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1e8>
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );

    *flags |= parent_flags;
 8088720:	6822      	ldr	r2, [r4, #0]
 8088722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    return( 0 );
 8088724:	2000      	movs	r0, #0
    /* child is verified to be a child of the parent, call verify callback */
    if( NULL != f_vrfy )
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );

    *flags |= parent_flags;
 8088726:	4313      	orrs	r3, r2
 8088728:	6023      	str	r3, [r4, #0]

    return( 0 );
 808872a:	e007      	b.n	808873c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1f8>
        }
    }

    /* child is verified to be a child of the parent, call verify callback */
    if( NULL != f_vrfy )
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
 808872c:	4629      	mov	r1, r5
 808872e:	4623      	mov	r3, r4
 8088730:	4632      	mov	r2, r6
 8088732:	982b      	ldr	r0, [sp, #172]	; 0xac
 8088734:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8088736:	47a8      	blx	r5
 8088738:	2800      	cmp	r0, #0
 808873a:	d0f1      	beq.n	8088720 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1dc>
            return( ret );

    *flags |= parent_flags;

    return( 0 );
}
 808873c:	b01d      	add	sp, #116	; 0x74
 808873e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8088742:	bf00      	nop
 8088744:	ffffd000 	.word	0xffffd000

08088748 <mbedtls_x509_crt_verify_with_profile>:
                     mbedtls_x509_crl *ca_crl,
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
 8088748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808874c:	b089      	sub	sp, #36	; 0x24
 808874e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8088750:	4693      	mov	fp, r2
    mbedtls_x509_crt *parent;
    mbedtls_x509_name *name;
    mbedtls_x509_sequence *cur = NULL;
    mbedtls_pk_type_t pk_type;

    *flags = 0;
 8088752:	2200      	movs	r2, #0
                     mbedtls_x509_crl *ca_crl,
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
 8088754:	4605      	mov	r5, r0
 8088756:	468a      	mov	sl, r1
 8088758:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
    mbedtls_x509_crt *parent;
    mbedtls_x509_name *name;
    mbedtls_x509_sequence *cur = NULL;
    mbedtls_pk_type_t pk_type;

    *flags = 0;
 808875c:	6022      	str	r2, [r4, #0]

    if( profile == NULL )
 808875e:	461f      	mov	r7, r3
 8088760:	2b00      	cmp	r3, #0
 8088762:	d06e      	beq.n	8088842 <mbedtls_x509_crt_verify_with_profile+0xfa>
    {
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
        goto exit;
    }

    if( cn != NULL )
 8088764:	f1b8 0f00 	cmp.w	r8, #0
 8088768:	d048      	beq.n	80887fc <mbedtls_x509_crt_verify_with_profile+0xb4>
    {
        name = &crt->subject;
        cn_len = strlen( cn );
 808876a:	4640      	mov	r0, r8
 808876c:	f009 fe4a 	bl	8092404 <strlen>

        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 8088770:	f8d5 30f8 	ldr.w	r3, [r5, #248]	; 0xf8
    }

    if( cn != NULL )
    {
        name = &crt->subject;
        cn_len = strlen( cn );
 8088774:	4681      	mov	r9, r0

        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 8088776:	069b      	lsls	r3, r3, #26
 8088778:	d50d      	bpl.n	8088796 <mbedtls_x509_crt_verify_with_profile+0x4e>
        {
            cur = &crt->subject_alt_names;
 808877a:	f105 06e8 	add.w	r6, r5, #232	; 0xe8

            while( cur != NULL )
            {
                if( cur->buf.len == cn_len &&
 808877e:	6873      	ldr	r3, [r6, #4]
 8088780:	4599      	cmp	r9, r3
 8088782:	d12c      	bne.n	80887de <mbedtls_x509_crt_verify_with_profile+0x96>
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
 8088784:	464a      	mov	r2, r9
 8088786:	68b1      	ldr	r1, [r6, #8]
 8088788:	4640      	mov	r0, r8
 808878a:	9307      	str	r3, [sp, #28]
 808878c:	f7ff f8db 	bl	8087946 <_ZL15x509_memcasecmpPKvS0_j>
        {
            cur = &crt->subject_alt_names;

            while( cur != NULL )
            {
                if( cur->buf.len == cn_len &&
 8088790:	9b07      	ldr	r3, [sp, #28]
 8088792:	bb20      	cbnz	r0, 80887de <mbedtls_x509_crt_verify_with_profile+0x96>
 8088794:	e032      	b.n	80887fc <mbedtls_x509_crt_verify_with_profile+0xb4>
        goto exit;
    }

    if( cn != NULL )
    {
        name = &crt->subject;
 8088796:	f105 066c 	add.w	r6, r5, #108	; 0x6c
        }
        else
        {
            while( name != NULL )
            {
                if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 )
 808879a:	6872      	ldr	r2, [r6, #4]
 808879c:	2a03      	cmp	r2, #3
 808879e:	d118      	bne.n	80887d2 <mbedtls_x509_crt_verify_with_profile+0x8a>
 80887a0:	68b1      	ldr	r1, [r6, #8]
 80887a2:	4855      	ldr	r0, [pc, #340]	; (80888f8 <mbedtls_x509_crt_verify_with_profile+0x1b0>)
 80887a4:	f009 fdc2 	bl	809232c <memcmp>
 80887a8:	b998      	cbnz	r0, 80887d2 <mbedtls_x509_crt_verify_with_profile+0x8a>
                {
                    if( name->val.len == cn_len &&
 80887aa:	6933      	ldr	r3, [r6, #16]
 80887ac:	4599      	cmp	r9, r3
 80887ae:	d107      	bne.n	80887c0 <mbedtls_x509_crt_verify_with_profile+0x78>
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
 80887b0:	464a      	mov	r2, r9
 80887b2:	4641      	mov	r1, r8
 80887b4:	6970      	ldr	r0, [r6, #20]
 80887b6:	9307      	str	r3, [sp, #28]
 80887b8:	f7ff f8c5 	bl	8087946 <_ZL15x509_memcasecmpPKvS0_j>
        {
            while( name != NULL )
            {
                if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 )
                {
                    if( name->val.len == cn_len &&
 80887bc:	9b07      	ldr	r3, [sp, #28]
 80887be:	b1e8      	cbz	r0, 80887fc <mbedtls_x509_crt_verify_with_profile+0xb4>
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
                        break;

                    if( name->val.len > 2 &&
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
 80887c0:	2b02      	cmp	r3, #2
 80887c2:	d906      	bls.n	80887d2 <mbedtls_x509_crt_verify_with_profile+0x8a>
 80887c4:	2202      	movs	r2, #2
 80887c6:	494d      	ldr	r1, [pc, #308]	; (80888fc <mbedtls_x509_crt_verify_with_profile+0x1b4>)
 80887c8:	6970      	ldr	r0, [r6, #20]
 80887ca:	f009 fdaf 	bl	809232c <memcmp>
                {
                    if( name->val.len == cn_len &&
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
                        break;

                    if( name->val.len > 2 &&
 80887ce:	2800      	cmp	r0, #0
 80887d0:	d053      	beq.n	808887a <mbedtls_x509_crt_verify_with_profile+0x132>
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
                        x509_check_wildcard( cn, &name->val ) == 0 )
                        break;
                }

                name = name->next;
 80887d2:	69b6      	ldr	r6, [r6, #24]
            if( cur == NULL )
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
        }
        else
        {
            while( name != NULL )
 80887d4:	2e00      	cmp	r6, #0
 80887d6:	d1e0      	bne.n	808879a <mbedtls_x509_crt_verify_with_profile+0x52>

                cur = cur->next;
            }

            if( cur == NULL )
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
 80887d8:	2304      	movs	r3, #4
 80887da:	6023      	str	r3, [r4, #0]
 80887dc:	e00e      	b.n	80887fc <mbedtls_x509_crt_verify_with_profile+0xb4>
                if( cur->buf.len == cn_len &&
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
                    break;

                if( cur->buf.len > 2 &&
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
 80887de:	2b02      	cmp	r3, #2
 80887e0:	d947      	bls.n	8088872 <mbedtls_x509_crt_verify_with_profile+0x12a>
 80887e2:	2202      	movs	r2, #2
 80887e4:	4945      	ldr	r1, [pc, #276]	; (80888fc <mbedtls_x509_crt_verify_with_profile+0x1b4>)
 80887e6:	68b0      	ldr	r0, [r6, #8]
 80887e8:	f009 fda0 	bl	809232c <memcmp>
            {
                if( cur->buf.len == cn_len &&
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
                    break;

                if( cur->buf.len > 2 &&
 80887ec:	2800      	cmp	r0, #0
 80887ee:	d140      	bne.n	8088872 <mbedtls_x509_crt_verify_with_profile+0x12a>
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
                    x509_check_wildcard( cn, &cur->buf ) == 0 )
 80887f0:	4631      	mov	r1, r6
 80887f2:	4640      	mov	r0, r8
 80887f4:	f7ff f8fd 	bl	80879f2 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf>
                if( cur->buf.len == cn_len &&
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
                    break;

                if( cur->buf.len > 2 &&
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
 80887f8:	2800      	cmp	r0, #0
 80887fa:	d13a      	bne.n	8088872 <mbedtls_x509_crt_verify_with_profile+0x12a>
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
        }
    }

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );
 80887fc:	f105 06bc 	add.w	r6, r5, #188	; 0xbc
 8088800:	4630      	mov	r0, r6
 8088802:	f003 ff73 	bl	808c6ec <mbedtls_pk_get_type>
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 8088806:	2301      	movs	r3, #1
 8088808:	1e42      	subs	r2, r0, #1
 808880a:	4093      	lsls	r3, r2
 808880c:	687a      	ldr	r2, [r7, #4]
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
        }
    }

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );
 808880e:	4601      	mov	r1, r0
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 8088810:	4213      	tst	r3, r2
 8088812:	d03a      	beq.n	808888a <mbedtls_x509_crt_verify_with_profile+0x142>
    pk_type = mbedtls_pk_get_type( &crt->pk );

    if( x509_profile_check_pk_alg( profile, pk_type ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    if( x509_profile_check_key( profile, pk_type, &crt->pk ) != 0 )
 8088814:	4632      	mov	r2, r6
 8088816:	f107 000c 	add.w	r0, r7, #12
 808881a:	f7ff f931 	bl	8087a80 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>
 808881e:	b118      	cbz	r0, 8088828 <mbedtls_x509_crt_verify_with_profile+0xe0>
        *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 8088820:	6823      	ldr	r3, [r4, #0]
 8088822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8088826:	6023      	str	r3, [r4, #0]
                     mbedtls_x509_crl *ca_crl,
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
 8088828:	4656      	mov	r6, sl

    if( x509_profile_check_key( profile, pk_type, &crt->pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

    /* Look for a parent in trusted CAs */
    for( parent = trust_ca; parent != NULL; parent = parent->next )
 808882a:	2e00      	cmp	r6, #0
 808882c:	d03d      	beq.n	80888aa <mbedtls_x509_crt_verify_with_profile+0x162>
    {
        if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
 808882e:	2301      	movs	r3, #1
 8088830:	2200      	movs	r2, #0
 8088832:	4631      	mov	r1, r6
 8088834:	4628      	mov	r0, r5
 8088836:	f7ff fcb7 	bl	80881a8 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 808883a:	b358      	cbz	r0, 8088894 <mbedtls_x509_crt_verify_with_profile+0x14c>

    if( x509_profile_check_key( profile, pk_type, &crt->pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

    /* Look for a parent in trusted CAs */
    for( parent = trust_ca; parent != NULL; parent = parent->next )
 808883c:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
 8088840:	e7f3      	b.n	808882a <mbedtls_x509_crt_verify_with_profile+0xe2>

    *flags = 0;

    if( profile == NULL )
    {
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
 8088842:	482f      	ldr	r0, [pc, #188]	; (8088900 <mbedtls_x509_crt_verify_with_profile+0x1b8>)
 8088844:	e011      	b.n	808886a <mbedtls_x509_crt_verify_with_profile+0x122>

        /* Are we part of the chain or at the top? */
        if( parent != NULL )
        {
            ret = x509_crt_verify_child( crt, parent, trust_ca, ca_crl, profile,
                                         pathlen, selfsigned, flags, f_vrfy, p_vrfy );
 8088846:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8088848:	9002      	str	r0, [sp, #8]
 808884a:	9305      	str	r3, [sp, #20]
 808884c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808884e:	9001      	str	r0, [sp, #4]
 8088850:	9304      	str	r3, [sp, #16]
 8088852:	9403      	str	r4, [sp, #12]
 8088854:	9700      	str	r7, [sp, #0]
 8088856:	465b      	mov	r3, fp
 8088858:	4652      	mov	r2, sl
 808885a:	4631      	mov	r1, r6
 808885c:	4628      	mov	r0, r5
 808885e:	f7ff fe71 	bl	8088544 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>

exit:
    /* prevent misuse of the vrfy callback - VERIFY_FAILED would be ignored by
     * the SSL module for authmode optional, but non-zero return from the
     * callback means a fatal error so it shouldn't be ignored */
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
 8088862:	f510 5f1c 	cmn.w	r0, #9984	; 0x2700
 8088866:	d12e      	bne.n	80888c6 <mbedtls_x509_crt_verify_with_profile+0x17e>
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;
 8088868:	4826      	ldr	r0, [pc, #152]	; (8088904 <mbedtls_x509_crt_verify_with_profile+0x1bc>)

    if( ret != 0 )
    {
        *flags = (uint32_t) -1;
 808886a:	f04f 33ff 	mov.w	r3, #4294967295
 808886e:	6023      	str	r3, [r4, #0]
        return( ret );
 8088870:	e03f      	b.n	80888f2 <mbedtls_x509_crt_verify_with_profile+0x1aa>
                    x509_check_wildcard( cn, &cur->buf ) == 0 )
                {
                    break;
                }

                cur = cur->next;
 8088872:	68f6      	ldr	r6, [r6, #12]

        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
        {
            cur = &crt->subject_alt_names;

            while( cur != NULL )
 8088874:	2e00      	cmp	r6, #0
 8088876:	d182      	bne.n	808877e <mbedtls_x509_crt_verify_with_profile+0x36>
 8088878:	e7ae      	b.n	80887d8 <mbedtls_x509_crt_verify_with_profile+0x90>
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
                        break;

                    if( name->val.len > 2 &&
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
                        x509_check_wildcard( cn, &name->val ) == 0 )
 808887a:	f106 010c 	add.w	r1, r6, #12
 808887e:	4640      	mov	r0, r8
 8088880:	f7ff f8b7 	bl	80879f2 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf>
                    if( name->val.len == cn_len &&
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
                        break;

                    if( name->val.len > 2 &&
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
 8088884:	2800      	cmp	r0, #0
 8088886:	d1a4      	bne.n	80887d2 <mbedtls_x509_crt_verify_with_profile+0x8a>
 8088888:	e7b8      	b.n	80887fc <mbedtls_x509_crt_verify_with_profile+0xb4>

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );

    if( x509_profile_check_pk_alg( profile, pk_type ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 808888a:	6823      	ldr	r3, [r4, #0]
 808888c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8088890:	6023      	str	r3, [r4, #0]
 8088892:	e7bf      	b.n	8088814 <mbedtls_x509_crt_verify_with_profile+0xcc>
    }

    if( parent != NULL )
    {
        ret = x509_crt_verify_top( crt, parent, ca_crl, profile,
                                   pathlen, selfsigned, flags, f_vrfy, p_vrfy );
 8088894:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8088896:	9402      	str	r4, [sp, #8]
 8088898:	9304      	str	r3, [sp, #16]
 808889a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808889c:	9001      	str	r0, [sp, #4]
 808889e:	9303      	str	r3, [sp, #12]
 80888a0:	9000      	str	r0, [sp, #0]
 80888a2:	463b      	mov	r3, r7
 80888a4:	465a      	mov	r2, fp
 80888a6:	4631      	mov	r1, r6
 80888a8:	e01f      	b.n	80888ea <mbedtls_x509_crt_verify_with_profile+0x1a2>
            goto exit;
    }
    else
    {
        /* Look for a parent upwards the chain */
        for( parent = crt->next; parent != NULL; parent = parent->next )
 80888aa:	f8d5 6130 	ldr.w	r6, [r5, #304]	; 0x130
 80888ae:	b196      	cbz	r6, 80888d6 <mbedtls_x509_crt_verify_with_profile+0x18e>
            if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
 80888b0:	2301      	movs	r3, #1
 80888b2:	2200      	movs	r2, #0
 80888b4:	4631      	mov	r1, r6
 80888b6:	4628      	mov	r0, r5
 80888b8:	f7ff fc76 	bl	80881a8 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 80888bc:	2800      	cmp	r0, #0
 80888be:	d0c2      	beq.n	8088846 <mbedtls_x509_crt_verify_with_profile+0xfe>
            goto exit;
    }
    else
    {
        /* Look for a parent upwards the chain */
        for( parent = crt->next; parent != NULL; parent = parent->next )
 80888c0:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
 80888c4:	e7f3      	b.n	80888ae <mbedtls_x509_crt_verify_with_profile+0x166>
     * the SSL module for authmode optional, but non-zero return from the
     * callback means a fatal error so it shouldn't be ignored */
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;

    if( ret != 0 )
 80888c6:	2800      	cmp	r0, #0
 80888c8:	d1cf      	bne.n	808886a <mbedtls_x509_crt_verify_with_profile+0x122>
    {
        *flags = (uint32_t) -1;
        return( ret );
    }

    if( *flags != 0 )
 80888ca:	6823      	ldr	r3, [r4, #0]
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );

    return( 0 );
 80888cc:	480e      	ldr	r0, [pc, #56]	; (8088908 <mbedtls_x509_crt_verify_with_profile+0x1c0>)
 80888ce:	2b00      	cmp	r3, #0
 80888d0:	bf08      	it	eq
 80888d2:	2000      	moveq	r0, #0
 80888d4:	e00d      	b.n	80888f2 <mbedtls_x509_crt_verify_with_profile+0x1aa>
                goto exit;
        }
        else
        {
            ret = x509_crt_verify_top( crt, trust_ca, ca_crl, profile,
                                       pathlen, selfsigned, flags, f_vrfy, p_vrfy );
 80888d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80888d8:	465a      	mov	r2, fp
 80888da:	9304      	str	r3, [sp, #16]
 80888dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80888de:	4651      	mov	r1, sl
 80888e0:	9303      	str	r3, [sp, #12]
 80888e2:	463b      	mov	r3, r7
 80888e4:	9402      	str	r4, [sp, #8]
 80888e6:	9601      	str	r6, [sp, #4]
 80888e8:	9600      	str	r6, [sp, #0]
 80888ea:	4628      	mov	r0, r5
 80888ec:	f7ff fd34 	bl	8088358 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>
 80888f0:	e7b7      	b.n	8088862 <mbedtls_x509_crt_verify_with_profile+0x11a>

    if( *flags != 0 )
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );

    return( 0 );
}
 80888f2:	b009      	add	sp, #36	; 0x24
 80888f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80888f8:	08092f3c 	.word	0x08092f3c
 80888fc:	08094076 	.word	0x08094076
 8088900:	ffffd800 	.word	0xffffd800
 8088904:	ffffd000 	.word	0xffffd000
 8088908:	ffffd900 	.word	0xffffd900

0808890c <mbedtls_x509_crt_init>:
/*
 * Initialize a certificate chain
 */
void mbedtls_x509_crt_init( mbedtls_x509_crt *crt )
{
    memset( crt, 0, sizeof(mbedtls_x509_crt) );
 808890c:	f44f 729a 	mov.w	r2, #308	; 0x134
 8088910:	2100      	movs	r1, #0
 8088912:	f009 bd40 	b.w	8092396 <memset>

08088916 <mbedtls_x509_crt_free>:

/*
 * Unallocate all certificate data
 */
void mbedtls_x509_crt_free( mbedtls_x509_crt *crt )
{
 8088916:	b570      	push	{r4, r5, r6, lr}
    mbedtls_x509_name *name_cur;
    mbedtls_x509_name *name_prv;
    mbedtls_x509_sequence *seq_cur;
    mbedtls_x509_sequence *seq_prv;

    if( crt == NULL )
 8088918:	4605      	mov	r5, r0
 808891a:	2800      	cmp	r0, #0
 808891c:	d053      	beq.n	80889c6 <mbedtls_x509_crt_free+0xb0>
 808891e:	4604      	mov	r4, r0
        return;

    do
    {
        mbedtls_pk_free( &cert_cur->pk );
 8088920:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8088924:	f003 fdc5 	bl	808c4b2 <mbedtls_pk_free>

#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
#endif

        name_cur = cert_cur->issuer.next;
 8088928:	6e62      	ldr	r2, [r4, #100]	; 0x64
        while( name_cur != NULL )
 808892a:	b14a      	cbz	r2, 8088940 <mbedtls_x509_crt_free+0x2a>
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 808892c:	4610      	mov	r0, r2
 808892e:	2120      	movs	r1, #32

        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
 8088930:	6996      	ldr	r6, [r2, #24]
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 8088932:	f7ff f800 	bl	8087936 <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( name_prv );
 8088936:	4610      	mov	r0, r2
 8088938:	f007 ff9e 	bl	8090878 <free>

        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
 808893c:	4632      	mov	r2, r6
#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
#endif

        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
 808893e:	e7f4      	b.n	808892a <mbedtls_x509_crt_free+0x14>
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        name_cur = cert_cur->subject.next;
 8088940:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
        while( name_cur != NULL )
 8088944:	b14a      	cbz	r2, 808895a <mbedtls_x509_crt_free+0x44>
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 8088946:	4610      	mov	r0, r2
 8088948:	2120      	movs	r1, #32

        name_cur = cert_cur->subject.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
 808894a:	6996      	ldr	r6, [r2, #24]
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 808894c:	f7fe fff3 	bl	8087936 <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( name_prv );
 8088950:	4610      	mov	r0, r2
 8088952:	f007 ff91 	bl	8090878 <free>

        name_cur = cert_cur->subject.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
 8088956:	4632      	mov	r2, r6
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        name_cur = cert_cur->subject.next;
        while( name_cur != NULL )
 8088958:	e7f4      	b.n	8088944 <mbedtls_x509_crt_free+0x2e>
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        seq_cur = cert_cur->ext_key_usage.next;
 808895a:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
        while( seq_cur != NULL )
 808895e:	b14a      	cbz	r2, 8088974 <mbedtls_x509_crt_free+0x5e>
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 8088960:	4610      	mov	r0, r2
 8088962:	2110      	movs	r1, #16

        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
 8088964:	68d6      	ldr	r6, [r2, #12]
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 8088966:	f7fe ffe6 	bl	8087936 <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( seq_prv );
 808896a:	4610      	mov	r0, r2
 808896c:	f007 ff84 	bl	8090878 <free>

        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
 8088970:	4632      	mov	r2, r6
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
 8088972:	e7f4      	b.n	808895e <mbedtls_x509_crt_free+0x48>
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        seq_cur = cert_cur->subject_alt_names.next;
 8088974:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
        while( seq_cur != NULL )
 8088978:	b14a      	cbz	r2, 808898e <mbedtls_x509_crt_free+0x78>
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 808897a:	4610      	mov	r0, r2
 808897c:	2110      	movs	r1, #16

        seq_cur = cert_cur->subject_alt_names.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
 808897e:	68d6      	ldr	r6, [r2, #12]
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 8088980:	f7fe ffd9 	bl	8087936 <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( seq_prv );
 8088984:	4610      	mov	r0, r2
 8088986:	f007 ff77 	bl	8090878 <free>

        seq_cur = cert_cur->subject_alt_names.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
 808898a:	4632      	mov	r2, r6
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        seq_cur = cert_cur->subject_alt_names.next;
        while( seq_cur != NULL )
 808898c:	e7f4      	b.n	8088978 <mbedtls_x509_crt_free+0x62>
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        if( cert_cur->raw.p != NULL )
 808898e:	68a0      	ldr	r0, [r4, #8]
 8088990:	b128      	cbz	r0, 808899e <mbedtls_x509_crt_free+0x88>
        {
            mbedtls_zeroize( cert_cur->raw.p, cert_cur->raw.len );
 8088992:	6861      	ldr	r1, [r4, #4]
 8088994:	f7fe ffcf 	bl	8087936 <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( cert_cur->raw.p );
 8088998:	68a0      	ldr	r0, [r4, #8]
 808899a:	f007 ff6d 	bl	8090878 <free>
        }

        cert_cur = cert_cur->next;
 808899e:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    }
    while( cert_cur != NULL );
 80889a2:	2c00      	cmp	r4, #0
 80889a4:	d1bc      	bne.n	8088920 <mbedtls_x509_crt_free+0xa>
 80889a6:	462a      	mov	r2, r5
    do
    {
        cert_prv = cert_cur;
        cert_cur = cert_cur->next;

        mbedtls_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 80889a8:	f44f 719a 	mov.w	r1, #308	; 0x134
 80889ac:	4610      	mov	r0, r2

    cert_cur = crt;
    do
    {
        cert_prv = cert_cur;
        cert_cur = cert_cur->next;
 80889ae:	f8d2 4130 	ldr.w	r4, [r2, #304]	; 0x130

        mbedtls_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 80889b2:	f7fe ffc0 	bl	8087936 <_ZL15mbedtls_zeroizePvj>
        if( cert_prv != crt )
 80889b6:	42aa      	cmp	r2, r5
 80889b8:	d002      	beq.n	80889c0 <mbedtls_x509_crt_free+0xaa>
            mbedtls_free( cert_prv );
 80889ba:	4610      	mov	r0, r2
 80889bc:	f007 ff5c 	bl	8090878 <free>
    }
    while( cert_cur != NULL );
 80889c0:	4622      	mov	r2, r4
 80889c2:	2c00      	cmp	r4, #0
 80889c4:	d1f0      	bne.n	80889a8 <mbedtls_x509_crt_free+0x92>
 80889c6:	bd70      	pop	{r4, r5, r6, pc}

080889c8 <mbedtls_x509_crt_parse_der>:
 * Parse one X.509 certificate in DER format from a buffer and add them to a
 * chained list
 */
int mbedtls_x509_crt_parse_der( mbedtls_x509_crt *chain, const unsigned char *buf,
                        size_t buflen )
{
 80889c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80889cc:	4688      	mov	r8, r1
 80889ce:	b09b      	sub	sp, #108	; 0x6c
 80889d0:	4615      	mov	r5, r2
    mbedtls_x509_crt *crt = chain, *prev = NULL;

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
 80889d2:	4682      	mov	sl, r0
 80889d4:	2800      	cmp	r0, #0
 80889d6:	f000 812c 	beq.w	8088c32 <mbedtls_x509_crt_parse_der+0x26a>
 80889da:	2900      	cmp	r1, #0
 80889dc:	f000 8129 	beq.w	8088c32 <mbedtls_x509_crt_parse_der+0x26a>
 80889e0:	4604      	mov	r4, r0
 80889e2:	f04f 0900 	mov.w	r9, #0
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    while( crt->version != 0 && crt->next != NULL )
 80889e6:	69a3      	ldr	r3, [r4, #24]
 80889e8:	b1a3      	cbz	r3, 8088a14 <mbedtls_x509_crt_parse_der+0x4c>
 80889ea:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 80889ee:	46a1      	mov	r9, r4
 80889f0:	b10b      	cbz	r3, 80889f6 <mbedtls_x509_crt_parse_der+0x2e>
 80889f2:	461c      	mov	r4, r3
 80889f4:	e7f7      	b.n	80889e6 <mbedtls_x509_crt_parse_der+0x1e>
    /*
     * Add new certificate on the end of the chain if needed.
     */
    if( crt->version != 0 && crt->next == NULL )
    {
        crt->next = (mbedtls_x509_crt *)mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );
 80889f6:	f44f 719a 	mov.w	r1, #308	; 0x134
 80889fa:	2001      	movs	r0, #1
 80889fc:	f009 fc80 	bl	8092300 <calloc>
 8088a00:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130

        if( crt->next == NULL )
 8088a04:	2800      	cmp	r0, #0
 8088a06:	f000 8116 	beq.w	8088c36 <mbedtls_x509_crt_parse_der+0x26e>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );

        prev = crt;
        mbedtls_x509_crt_init( crt->next );
 8088a0a:	f7ff ff7f 	bl	808890c <mbedtls_x509_crt_init>
 8088a0e:	46a1      	mov	r9, r4
        crt = crt->next;
 8088a10:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    int ret;
    size_t len;
    unsigned char *p, *end, *crt_end;
    mbedtls_x509_buf sig_params1, sig_params2, sig_oid2;

    memset( &sig_params1, 0, sizeof( mbedtls_x509_buf ) );
 8088a14:	2300      	movs	r3, #0
 8088a16:	930b      	str	r3, [sp, #44]	; 0x2c
 8088a18:	930c      	str	r3, [sp, #48]	; 0x30
 8088a1a:	930d      	str	r3, [sp, #52]	; 0x34
    memset( &sig_params2, 0, sizeof( mbedtls_x509_buf ) );
 8088a1c:	930e      	str	r3, [sp, #56]	; 0x38
 8088a1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8088a20:	9310      	str	r3, [sp, #64]	; 0x40
    memset( &sig_oid2, 0, sizeof( mbedtls_x509_buf ) );
 8088a22:	9311      	str	r3, [sp, #68]	; 0x44
 8088a24:	9312      	str	r3, [sp, #72]	; 0x48
 8088a26:	9313      	str	r3, [sp, #76]	; 0x4c

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
 8088a28:	2c00      	cmp	r4, #0
 8088a2a:	f000 80e9 	beq.w	8088c00 <mbedtls_x509_crt_parse_der+0x238>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    // Use the original buffer until we figure out actual length
    p = (unsigned char*) buf;
    len = buflen;
 8088a2e:	ae1a      	add	r6, sp, #104	; 0x68
 8088a30:	f846 5d54 	str.w	r5, [r6, #-84]!
    end = p + len;
 8088a34:	eb08 0b05 	add.w	fp, r8, r5
     * Certificate  ::=  SEQUENCE  {
     *      tbsCertificate       TBSCertificate,
     *      signatureAlgorithm   AlgorithmIdentifier,
     *      signatureValue       BIT STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8088a38:	2330      	movs	r3, #48	; 0x30
 8088a3a:	4632      	mov	r2, r6
 8088a3c:	4659      	mov	r1, fp
 8088a3e:	a806      	add	r0, sp, #24
     */
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    // Use the original buffer until we figure out actual length
    p = (unsigned char*) buf;
 8088a40:	f8cd 8018 	str.w	r8, [sp, #24]
     * Certificate  ::=  SEQUENCE  {
     *      tbsCertificate       TBSCertificate,
     *      signatureAlgorithm   AlgorithmIdentifier,
     *      signatureValue       BIT STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8088a44:	f7fa fcae 	bl	80833a4 <mbedtls_asn1_get_tag>
 8088a48:	b120      	cbz	r0, 8088a54 <mbedtls_x509_crt_parse_der+0x8c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 8088a4a:	4620      	mov	r0, r4
 8088a4c:	f7ff ff63 	bl	8088916 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT );
 8088a50:	4da3      	ldr	r5, [pc, #652]	; (8088ce0 <mbedtls_x509_crt_parse_der+0x318>)
 8088a52:	e0e1      	b.n	8088c18 <mbedtls_x509_crt_parse_der+0x250>
    }

    if( len > (size_t) ( end - p ) )
 8088a54:	9d06      	ldr	r5, [sp, #24]
 8088a56:	9f05      	ldr	r7, [sp, #20]
 8088a58:	ebc5 0b0b 	rsb	fp, r5, fp
 8088a5c:	45bb      	cmp	fp, r7
 8088a5e:	f0c0 80ca 	bcc.w	8088bf6 <mbedtls_x509_crt_parse_der+0x22e>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    }
    crt_end = p + len;

    // Create and populate a new buffer for the raw field
    crt->raw.len = crt_end - buf;
 8088a62:	443d      	add	r5, r7
 8088a64:	ebc8 0505 	rsb	r5, r8, r5
 8088a68:	6065      	str	r5, [r4, #4]
    crt->raw.p = p = (unsigned char*)mbedtls_calloc( 1, crt->raw.len );
 8088a6a:	4629      	mov	r1, r5
 8088a6c:	2001      	movs	r0, #1
 8088a6e:	f009 fc47 	bl	8092300 <calloc>
 8088a72:	4683      	mov	fp, r0
 8088a74:	9006      	str	r0, [sp, #24]
 8088a76:	60a0      	str	r0, [r4, #8]
    if( p == NULL )
 8088a78:	2800      	cmp	r0, #0
 8088a7a:	f000 80c3 	beq.w	8088c04 <mbedtls_x509_crt_parse_der+0x23c>
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );
 8088a7e:	462a      	mov	r2, r5

    // Direct pointers to the new buffer
    p += crt->raw.len - len;
 8088a80:	1bed      	subs	r5, r5, r7
 8088a82:	445d      	add	r5, fp
    crt->raw.len = crt_end - buf;
    crt->raw.p = p = (unsigned char*)mbedtls_calloc( 1, crt->raw.len );
    if( p == NULL )
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );
 8088a84:	4641      	mov	r1, r8

    // Direct pointers to the new buffer
    p += crt->raw.len - len;
    end = crt_end = p + len;
 8088a86:	442f      	add	r7, r5
    crt->raw.len = crt_end - buf;
    crt->raw.p = p = (unsigned char*)mbedtls_calloc( 1, crt->raw.len );
    if( p == NULL )
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );
 8088a88:	f009 fc5f 	bl	809234a <memcpy>
    end = crt_end = p + len;

    /*
     * TBSCertificate  ::=  SEQUENCE  {
     */
    crt->tbs.p = p;
 8088a8c:	6165      	str	r5, [r4, #20]

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8088a8e:	2330      	movs	r3, #48	; 0x30
 8088a90:	4632      	mov	r2, r6
 8088a92:	4639      	mov	r1, r7
 8088a94:	a806      	add	r0, sp, #24
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );

    // Direct pointers to the new buffer
    p += crt->raw.len - len;
 8088a96:	9506      	str	r5, [sp, #24]
    /*
     * TBSCertificate  ::=  SEQUENCE  {
     */
    crt->tbs.p = p;

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8088a98:	f7fa fc84 	bl	80833a4 <mbedtls_asn1_get_tag>
 8088a9c:	4680      	mov	r8, r0
 8088a9e:	b128      	cbz	r0, 8088aac <mbedtls_x509_crt_parse_der+0xe4>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 8088aa0:	4620      	mov	r0, r4
 8088aa2:	f7ff ff38 	bl	8088916 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 8088aa6:	f5a8 5506 	sub.w	r5, r8, #8576	; 0x2180
 8088aaa:	e0b2      	b.n	8088c12 <mbedtls_x509_crt_parse_der+0x24a>
    }

    end = p + len;
 8088aac:	9b05      	ldr	r3, [sp, #20]
 8088aae:	9e06      	ldr	r6, [sp, #24]
                             int *ver )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8088ab0:	aa17      	add	r2, sp, #92	; 0x5c
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    end = p + len;
 8088ab2:	441e      	add	r6, r3
    crt->tbs.len = end - crt->tbs.p;
 8088ab4:	6963      	ldr	r3, [r4, #20]
                             int *ver )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8088ab6:	4631      	mov	r1, r6
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    end = p + len;
    crt->tbs.len = end - crt->tbs.p;
 8088ab8:	1af3      	subs	r3, r6, r3
 8088aba:	6123      	str	r3, [r4, #16]
                             int *ver )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8088abc:	a806      	add	r0, sp, #24
 8088abe:	23a0      	movs	r3, #160	; 0xa0
 8088ac0:	f7fa fc70 	bl	80833a4 <mbedtls_asn1_get_tag>
 8088ac4:	4605      	mov	r5, r0
 8088ac6:	b128      	cbz	r0, 8088ad4 <mbedtls_x509_crt_parse_der+0x10c>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8088ac8:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8088acc:	d114      	bne.n	8088af8 <mbedtls_x509_crt_parse_der+0x130>
        {
            *ver = 0;
 8088ace:	f8c4 8018 	str.w	r8, [r4, #24]
 8088ad2:	e014      	b.n	8088afe <mbedtls_x509_crt_parse_der+0x136>
        }

        return( ret );
    }

    end = *p + len;
 8088ad4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8088ad6:	9d06      	ldr	r5, [sp, #24]

    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
 8088ad8:	f104 0218 	add.w	r2, r4, #24
        }

        return( ret );
    }

    end = *p + len;
 8088adc:	441d      	add	r5, r3

    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
 8088ade:	4629      	mov	r1, r5
 8088ae0:	a806      	add	r0, sp, #24
 8088ae2:	f7fa fc8c 	bl	80833fe <mbedtls_asn1_get_int>
 8088ae6:	b110      	cbz	r0, 8088aee <mbedtls_x509_crt_parse_der+0x126>
        return( MBEDTLS_ERR_X509_INVALID_VERSION + ret );
 8088ae8:	f5a0 5508 	sub.w	r5, r0, #8704	; 0x2200
 8088aec:	e004      	b.n	8088af8 <mbedtls_x509_crt_parse_der+0x130>

    if( *p != end )
 8088aee:	9b06      	ldr	r3, [sp, #24]
 8088af0:	429d      	cmp	r5, r3
 8088af2:	d004      	beq.n	8088afe <mbedtls_x509_crt_parse_der+0x136>
        return( MBEDTLS_ERR_X509_INVALID_VERSION +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8088af4:	4d7b      	ldr	r5, [pc, #492]	; (8088ce4 <mbedtls_x509_crt_parse_der+0x31c>)
 8088af6:	e0d6      	b.n	8088ca6 <mbedtls_x509_crt_parse_der+0x2de>
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
 8088af8:	2d00      	cmp	r5, #0
 8088afa:	f040 80d4 	bne.w	8088ca6 <mbedtls_x509_crt_parse_der+0x2de>
     *
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
 8088afe:	f104 021c 	add.w	r2, r4, #28
 8088b02:	4631      	mov	r1, r6
 8088b04:	a806      	add	r0, sp, #24
 8088b06:	f7fd fb85 	bl	8086214 <mbedtls_x509_get_serial>
 8088b0a:	4605      	mov	r5, r0
 8088b0c:	2800      	cmp	r0, #0
 8088b0e:	f040 80ca 	bne.w	8088ca6 <mbedtls_x509_crt_parse_der+0x2de>
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
        ( ret = mbedtls_x509_get_alg(      &p, end, &crt->sig_oid,
 8088b12:	f104 0828 	add.w	r8, r4, #40	; 0x28
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
 8088b16:	ab0b      	add	r3, sp, #44	; 0x2c
 8088b18:	4642      	mov	r2, r8
 8088b1a:	4631      	mov	r1, r6
 8088b1c:	a806      	add	r0, sp, #24
 8088b1e:	f7fd fba1 	bl	8086264 <mbedtls_x509_get_alg>
 8088b22:	4605      	mov	r5, r0
 8088b24:	2800      	cmp	r0, #0
 8088b26:	f040 80be 	bne.w	8088ca6 <mbedtls_x509_crt_parse_der+0x2de>
 8088b2a:	e086      	b.n	8088c3a <mbedtls_x509_crt_parse_der+0x272>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
    }

    crt->version++;
 8088b2c:	3301      	adds	r3, #1
 8088b2e:	61a3      	str	r3, [r4, #24]

    if( ( ret = mbedtls_x509_get_sig_alg( &crt->sig_oid, &sig_params1,
 8088b30:	f504 7396 	add.w	r3, r4, #300	; 0x12c
 8088b34:	9300      	str	r3, [sp, #0]
 8088b36:	f504 7294 	add.w	r2, r4, #296	; 0x128
 8088b3a:	f204 1329 	addw	r3, r4, #297	; 0x129
 8088b3e:	a90b      	add	r1, sp, #44	; 0x2c
 8088b40:	4640      	mov	r0, r8
 8088b42:	f7fd fce3 	bl	808650c <mbedtls_x509_get_sig_alg>
 8088b46:	4605      	mov	r5, r0
 8088b48:	2800      	cmp	r0, #0
 8088b4a:	f040 80ac 	bne.w	8088ca6 <mbedtls_x509_crt_parse_der+0x2de>
    }

    /*
     * issuer               Name
     */
    crt->issuer_raw.p = p;
 8088b4e:	9b06      	ldr	r3, [sp, #24]

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8088b50:	aa05      	add	r2, sp, #20
    }

    /*
     * issuer               Name
     */
    crt->issuer_raw.p = p;
 8088b52:	63e3      	str	r3, [r4, #60]	; 0x3c

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8088b54:	4631      	mov	r1, r6
 8088b56:	2330      	movs	r3, #48	; 0x30
 8088b58:	a806      	add	r0, sp, #24
 8088b5a:	f7fa fc23 	bl	80833a4 <mbedtls_asn1_get_tag>
 8088b5e:	4605      	mov	r5, r0
 8088b60:	2800      	cmp	r0, #0
 8088b62:	d151      	bne.n	8088c08 <mbedtls_x509_crt_parse_der+0x240>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( ( ret = mbedtls_x509_get_name( &p, p + len, &crt->issuer ) ) != 0 )
 8088b64:	9b05      	ldr	r3, [sp, #20]
 8088b66:	9906      	ldr	r1, [sp, #24]
 8088b68:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8088b6c:	4419      	add	r1, r3
 8088b6e:	a806      	add	r0, sp, #24
 8088b70:	f7fd fb80 	bl	8086274 <mbedtls_x509_get_name>
 8088b74:	4605      	mov	r5, r0
 8088b76:	2800      	cmp	r0, #0
 8088b78:	f040 8095 	bne.w	8088ca6 <mbedtls_x509_crt_parse_der+0x2de>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->issuer_raw.len = p - crt->issuer_raw.p;
 8088b7c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8088b7e:	9b06      	ldr	r3, [sp, #24]
                           mbedtls_x509_time *to )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8088b80:	4631      	mov	r1, r6
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->issuer_raw.len = p - crt->issuer_raw.p;
 8088b82:	1a9b      	subs	r3, r3, r2
 8088b84:	63a3      	str	r3, [r4, #56]	; 0x38
                           mbedtls_x509_time *to )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8088b86:	aa17      	add	r2, sp, #92	; 0x5c
 8088b88:	2330      	movs	r3, #48	; 0x30
 8088b8a:	a806      	add	r0, sp, #24
 8088b8c:	f7fa fc0a 	bl	80833a4 <mbedtls_asn1_get_tag>
 8088b90:	2800      	cmp	r0, #0
 8088b92:	d05b      	beq.n	8088c4c <mbedtls_x509_crt_parse_der+0x284>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
 8088b94:	f5a0 5510 	sub.w	r5, r0, #9216	; 0x2400
     * Validity ::= SEQUENCE {
     *      notBefore      Time,
     *      notAfter       Time }
     *
     */
    if( ( ret = x509_get_dates( &p, end, &crt->valid_from,
 8088b98:	2d00      	cmp	r5, #0
 8088b9a:	f040 8084 	bne.w	8088ca6 <mbedtls_x509_crt_parse_der+0x2de>
    }

    /*
     * subject              Name
     */
    crt->subject_raw.p = p;
 8088b9e:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 8088ba2:	f85b 3d50 	ldr.w	r3, [fp, #-80]!

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8088ba6:	aa05      	add	r2, sp, #20
    }

    /*
     * subject              Name
     */
    crt->subject_raw.p = p;
 8088ba8:	64a3      	str	r3, [r4, #72]	; 0x48

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8088baa:	4631      	mov	r1, r6
 8088bac:	2330      	movs	r3, #48	; 0x30
 8088bae:	4658      	mov	r0, fp
 8088bb0:	f7fa fbf8 	bl	80833a4 <mbedtls_asn1_get_tag>
 8088bb4:	4605      	mov	r5, r0
 8088bb6:	bb38      	cbnz	r0, 8088c08 <mbedtls_x509_crt_parse_der+0x240>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
 8088bb8:	9b05      	ldr	r3, [sp, #20]
 8088bba:	2b00      	cmp	r3, #0
 8088bbc:	d15f      	bne.n	8088c7e <mbedtls_x509_crt_parse_der+0x2b6>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->subject_raw.len = p - crt->subject_raw.p;
 8088bbe:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8088bc0:	9b06      	ldr	r3, [sp, #24]

    /*
     * SubjectPublicKeyInfo
     */
    if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
 8088bc2:	4631      	mov	r1, r6
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->subject_raw.len = p - crt->subject_raw.p;
 8088bc4:	1a9b      	subs	r3, r3, r2
 8088bc6:	6463      	str	r3, [r4, #68]	; 0x44

    /*
     * SubjectPublicKeyInfo
     */
    if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
 8088bc8:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 8088bcc:	4658      	mov	r0, fp
 8088bce:	f7fd fff3 	bl	8086bb8 <mbedtls_pk_parse_subpubkey>
 8088bd2:	4605      	mov	r5, r0
 8088bd4:	2800      	cmp	r0, #0
 8088bd6:	d166      	bne.n	8088ca6 <mbedtls_x509_crt_parse_der+0x2de>
     *  subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,
     *                       -- If present, version shall be v2 or v3
     *  extensions      [3]  EXPLICIT Extensions OPTIONAL
     *                       -- If present, version shall be v3
     */
    if( crt->version == 2 || crt->version == 3 )
 8088bd8:	69a3      	ldr	r3, [r4, #24]
 8088bda:	3b02      	subs	r3, #2
 8088bdc:	2b01      	cmp	r3, #1
 8088bde:	d958      	bls.n	8088c92 <mbedtls_x509_crt_parse_der+0x2ca>
            mbedtls_x509_crt_free( crt );
            return( ret );
        }
    }

    if( crt->version == 2 || crt->version == 3 )
 8088be0:	69a3      	ldr	r3, [r4, #24]
 8088be2:	3b02      	subs	r3, #2
 8088be4:	2b01      	cmp	r3, #1
 8088be6:	d962      	bls.n	8088cae <mbedtls_x509_crt_parse_der+0x2e6>
            return( ret );
        }
    }

#if !defined(MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3)
    if( crt->version == 3 )
 8088be8:	69a3      	ldr	r3, [r4, #24]
 8088bea:	2b03      	cmp	r3, #3
 8088bec:	d06a      	beq.n	8088cc4 <mbedtls_x509_crt_parse_der+0x2fc>
            mbedtls_x509_crt_free( crt );
            return( ret );
        }
    }

    if( p != end )
 8088bee:	9b06      	ldr	r3, [sp, #24]
 8088bf0:	429e      	cmp	r6, r3
 8088bf2:	f000 811e 	beq.w	8088e32 <mbedtls_x509_crt_parse_der+0x46a>
        return( ret );
    }

    if( p != end )
    {
        mbedtls_x509_crt_free( crt );
 8088bf6:	4620      	mov	r0, r4
 8088bf8:	f7ff fe8d 	bl	8088916 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8088bfc:	4d3a      	ldr	r5, [pc, #232]	; (8088ce8 <mbedtls_x509_crt_parse_der+0x320>)
 8088bfe:	e00b      	b.n	8088c18 <mbedtls_x509_crt_parse_der+0x250>

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8088c00:	4d3a      	ldr	r5, [pc, #232]	; (8088cec <mbedtls_x509_crt_parse_der+0x324>)
 8088c02:	e009      	b.n	8088c18 <mbedtls_x509_crt_parse_der+0x250>

    // Create and populate a new buffer for the raw field
    crt->raw.len = crt_end - buf;
    crt->raw.p = p = (unsigned char*)mbedtls_calloc( 1, crt->raw.len );
    if( p == NULL )
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 8088c04:	4d3a      	ldr	r5, [pc, #232]	; (8088cf0 <mbedtls_x509_crt_parse_der+0x328>)
 8088c06:	e007      	b.n	8088c18 <mbedtls_x509_crt_parse_der+0x250>
    crt->subject_raw.p = p;

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 8088c08:	4620      	mov	r0, r4
 8088c0a:	f7ff fe84 	bl	8088916 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 8088c0e:	f5a5 5506 	sub.w	r5, r5, #8576	; 0x2180
        prev = crt;
        mbedtls_x509_crt_init( crt->next );
        crt = crt->next;
    }

    if( ( ret = x509_crt_parse_der_core( crt, buf, buflen ) ) != 0 )
 8088c12:	2d00      	cmp	r5, #0
 8088c14:	f000 8204 	beq.w	8089020 <mbedtls_x509_crt_parse_der+0x658>
    {
        if( prev )
 8088c18:	f1b9 0f00 	cmp.w	r9, #0
 8088c1c:	d002      	beq.n	8088c24 <mbedtls_x509_crt_parse_der+0x25c>
            prev->next = NULL;
 8088c1e:	2300      	movs	r3, #0
 8088c20:	f8c9 3130 	str.w	r3, [r9, #304]	; 0x130

        if( crt != chain )
 8088c24:	4554      	cmp	r4, sl
 8088c26:	f000 81fb 	beq.w	8089020 <mbedtls_x509_crt_parse_der+0x658>
            mbedtls_free( crt );
 8088c2a:	4620      	mov	r0, r4
 8088c2c:	f007 fe24 	bl	8090878 <free>
 8088c30:	e1f6      	b.n	8089020 <mbedtls_x509_crt_parse_der+0x658>

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8088c32:	4d2e      	ldr	r5, [pc, #184]	; (8088cec <mbedtls_x509_crt_parse_der+0x324>)
 8088c34:	e1f4      	b.n	8089020 <mbedtls_x509_crt_parse_der+0x658>
    if( crt->version != 0 && crt->next == NULL )
    {
        crt->next = (mbedtls_x509_crt *)mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );

        if( crt->next == NULL )
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 8088c36:	4d2e      	ldr	r5, [pc, #184]	; (8088cf0 <mbedtls_x509_crt_parse_der+0x328>)
 8088c38:	e1f2      	b.n	8089020 <mbedtls_x509_crt_parse_der+0x658>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->version < 0 || crt->version > 2 )
 8088c3a:	69a3      	ldr	r3, [r4, #24]
 8088c3c:	2b02      	cmp	r3, #2
 8088c3e:	f67f af75 	bls.w	8088b2c <mbedtls_x509_crt_parse_der+0x164>
    {
        mbedtls_x509_crt_free( crt );
 8088c42:	4620      	mov	r0, r4
 8088c44:	f7ff fe67 	bl	8088916 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
 8088c48:	4d2a      	ldr	r5, [pc, #168]	; (8088cf4 <mbedtls_x509_crt_parse_der+0x32c>)
 8088c4a:	e7e5      	b.n	8088c18 <mbedtls_x509_crt_parse_der+0x250>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );

    end = *p + len;
 8088c4c:	9a06      	ldr	r2, [sp, #24]
 8088c4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c

    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
 8088c50:	a806      	add	r0, sp, #24

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );

    end = *p + len;
 8088c52:	eb02 0b03 	add.w	fp, r2, r3

    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
 8088c56:	4659      	mov	r1, fp
 8088c58:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 8088c5c:	f7fd fb82 	bl	8086364 <mbedtls_x509_get_time>
 8088c60:	b958      	cbnz	r0, 8088c7a <mbedtls_x509_crt_parse_der+0x2b2>
        return( ret );

    if( ( ret = mbedtls_x509_get_time( p, end, to ) ) != 0 )
 8088c62:	f104 02a4 	add.w	r2, r4, #164	; 0xa4
 8088c66:	4659      	mov	r1, fp
 8088c68:	a806      	add	r0, sp, #24
 8088c6a:	f7fd fb7b 	bl	8086364 <mbedtls_x509_get_time>
 8088c6e:	b920      	cbnz	r0, 8088c7a <mbedtls_x509_crt_parse_der+0x2b2>
        return( ret );

    if( *p != end )
 8088c70:	9b06      	ldr	r3, [sp, #24]
 8088c72:	459b      	cmp	fp, r3
 8088c74:	d093      	beq.n	8088b9e <mbedtls_x509_crt_parse_der+0x1d6>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8088c76:	4d20      	ldr	r5, [pc, #128]	; (8088cf8 <mbedtls_x509_crt_parse_der+0x330>)
 8088c78:	e015      	b.n	8088ca6 <mbedtls_x509_crt_parse_der+0x2de>
    end = *p + len;

    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
        return( ret );

    if( ( ret = mbedtls_x509_get_time( p, end, to ) ) != 0 )
 8088c7a:	4605      	mov	r5, r0
 8088c7c:	e78c      	b.n	8088b98 <mbedtls_x509_crt_parse_der+0x1d0>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
 8088c7e:	9906      	ldr	r1, [sp, #24]
 8088c80:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 8088c84:	4419      	add	r1, r3
 8088c86:	4658      	mov	r0, fp
 8088c88:	f7fd faf4 	bl	8086274 <mbedtls_x509_get_name>
 8088c8c:	4605      	mov	r5, r0
 8088c8e:	b950      	cbnz	r0, 8088ca6 <mbedtls_x509_crt_parse_der+0x2de>
 8088c90:	e795      	b.n	8088bbe <mbedtls_x509_crt_parse_der+0x1f6>
     *  extensions      [3]  EXPLICIT Extensions OPTIONAL
     *                       -- If present, version shall be v3
     */
    if( crt->version == 2 || crt->version == 3 )
    {
        ret = x509_get_uid( &p, end, &crt->issuer_id,  1 );
 8088c92:	2301      	movs	r3, #1
 8088c94:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
 8088c98:	4631      	mov	r1, r6
 8088c9a:	4658      	mov	r0, fp
 8088c9c:	f7fe fed5 	bl	8087a4a <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>
        if( ret != 0 )
 8088ca0:	4605      	mov	r5, r0
 8088ca2:	2800      	cmp	r0, #0
 8088ca4:	d09c      	beq.n	8088be0 <mbedtls_x509_crt_parse_der+0x218>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 8088ca6:	4620      	mov	r0, r4
 8088ca8:	f7ff fe35 	bl	8088916 <mbedtls_x509_crt_free>
 8088cac:	e7b1      	b.n	8088c12 <mbedtls_x509_crt_parse_der+0x24a>
        }
    }

    if( crt->version == 2 || crt->version == 3 )
    {
        ret = x509_get_uid( &p, end, &crt->subject_id,  2 );
 8088cae:	2302      	movs	r3, #2
 8088cb0:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
 8088cb4:	4631      	mov	r1, r6
 8088cb6:	4658      	mov	r0, fp
 8088cb8:	f7fe fec7 	bl	8087a4a <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>
        if( ret != 0 )
 8088cbc:	4605      	mov	r5, r0
 8088cbe:	2800      	cmp	r0, #0
 8088cc0:	d092      	beq.n	8088be8 <mbedtls_x509_crt_parse_der+0x220>
 8088cc2:	e7f0      	b.n	8088ca6 <mbedtls_x509_crt_parse_der+0x2de>
{
    int ret;
    size_t len;
    unsigned char *end_ext_data, *end_ext_octet;

    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
 8088cc4:	f104 02dc 	add.w	r2, r4, #220	; 0xdc
 8088cc8:	4631      	mov	r1, r6
 8088cca:	4658      	mov	r0, fp
 8088ccc:	f7fd fc3e 	bl	808654c <mbedtls_x509_get_ext>
 8088cd0:	b908      	cbnz	r0, 8088cd6 <mbedtls_x509_crt_parse_der+0x30e>
         * Extension  ::=  SEQUENCE  {
         *      extnID      OBJECT IDENTIFIER,
         *      critical    BOOLEAN DEFAULT FALSE,
         *      extnValue   OCTET STRING  }
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 8088cd2:	4680      	mov	r8, r0
 8088cd4:	e05a      	b.n	8088d8c <mbedtls_x509_crt_parse_der+0x3c4>
    size_t len;
    unsigned char *end_ext_data, *end_ext_octet;

    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8088cd6:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8088cda:	f040 80a5 	bne.w	8088e28 <mbedtls_x509_crt_parse_der+0x460>
 8088cde:	e786      	b.n	8088bee <mbedtls_x509_crt_parse_der+0x226>
 8088ce0:	ffffde80 	.word	0xffffde80
 8088ce4:	ffffdd9a 	.word	0xffffdd9a
 8088ce8:	ffffde1a 	.word	0xffffde1a
 8088cec:	ffffd800 	.word	0xffffd800
 8088cf0:	ffffd780 	.word	0xffffd780
 8088cf4:	ffffda80 	.word	0xffffda80
 8088cf8:	ffffdb9a 	.word	0xffffdb9a
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
        int is_critical = 0; /* DEFAULT FALSE */
        int ext_type = 0;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8088cfc:	2330      	movs	r3, #48	; 0x30
 8088cfe:	aa07      	add	r2, sp, #28
 8088d00:	4631      	mov	r1, r6
 8088d02:	a806      	add	r0, sp, #24
         * Extension  ::=  SEQUENCE  {
         *      extnID      OBJECT IDENTIFIER,
         *      critical    BOOLEAN DEFAULT FALSE,
         *      extnValue   OCTET STRING  }
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 8088d04:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8088d08:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
 8088d0c:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
        int is_critical = 0; /* DEFAULT FALSE */
 8088d10:	f8cd 8020 	str.w	r8, [sp, #32]
        int ext_type = 0;
 8088d14:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8088d18:	f7fa fb44 	bl	80833a4 <mbedtls_asn1_get_tag>
 8088d1c:	2800      	cmp	r0, #0
 8088d1e:	f040 80bd 	bne.w	8088e9c <mbedtls_x509_crt_parse_der+0x4d4>
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_data = *p + len;
 8088d22:	9b06      	ldr	r3, [sp, #24]
 8088d24:	9d07      	ldr	r5, [sp, #28]

        /* Get extension ID */
        extn_oid.tag = **p;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 8088d26:	aa15      	add	r2, sp, #84	; 0x54

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_data = *p + len;
 8088d28:	441d      	add	r5, r3

        /* Get extension ID */
        extn_oid.tag = **p;
 8088d2a:	781b      	ldrb	r3, [r3, #0]

        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 8088d2c:	4631      	mov	r1, r6
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_data = *p + len;

        /* Get extension ID */
        extn_oid.tag = **p;
 8088d2e:	9314      	str	r3, [sp, #80]	; 0x50

        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 8088d30:	a806      	add	r0, sp, #24
 8088d32:	2306      	movs	r3, #6
 8088d34:	f7fa fb36 	bl	80833a4 <mbedtls_asn1_get_tag>
 8088d38:	2800      	cmp	r0, #0
 8088d3a:	f040 80af 	bne.w	8088e9c <mbedtls_x509_crt_parse_der+0x4d4>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        extn_oid.p = *p;
 8088d3e:	9a06      	ldr	r2, [sp, #24]
        *p += extn_oid.len;
 8088d40:	9b15      	ldr	r3, [sp, #84]	; 0x54
        extn_oid.tag = **p;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        extn_oid.p = *p;
 8088d42:	9216      	str	r2, [sp, #88]	; 0x58
        *p += extn_oid.len;
 8088d44:	4413      	add	r3, r2
 8088d46:	9306      	str	r3, [sp, #24]

        if( ( end - *p ) < 1 )
 8088d48:	1af3      	subs	r3, r6, r3
 8088d4a:	2b00      	cmp	r3, #0
 8088d4c:	dd51      	ble.n	8088df2 <mbedtls_x509_crt_parse_der+0x42a>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
 8088d4e:	aa08      	add	r2, sp, #32
 8088d50:	4629      	mov	r1, r5
 8088d52:	a806      	add	r0, sp, #24
 8088d54:	f7fa fb3a 	bl	80833cc <mbedtls_asn1_get_bool>
 8088d58:	b9e0      	cbnz	r0, 8088d94 <mbedtls_x509_crt_parse_der+0x3cc>
            ( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        /* Data should be octet string type */
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &len,
 8088d5a:	2304      	movs	r3, #4
 8088d5c:	aa07      	add	r2, sp, #28
 8088d5e:	4629      	mov	r1, r5
 8088d60:	a806      	add	r0, sp, #24
 8088d62:	f7fa fb1f 	bl	80833a4 <mbedtls_asn1_get_tag>
 8088d66:	2800      	cmp	r0, #0
 8088d68:	f040 8098 	bne.w	8088e9c <mbedtls_x509_crt_parse_der+0x4d4>
                MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_octet = *p + len;

        if( end_ext_octet != end_ext_data )
 8088d6c:	9b07      	ldr	r3, [sp, #28]
 8088d6e:	9a06      	ldr	r2, [sp, #24]
 8088d70:	4413      	add	r3, r2
 8088d72:	429d      	cmp	r5, r3
 8088d74:	f040 814a 	bne.w	808900c <mbedtls_x509_crt_parse_der+0x644>
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

        /*
         * Detect supported extensions
         */
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );
 8088d78:	a909      	add	r1, sp, #36	; 0x24
 8088d7a:	a814      	add	r0, sp, #80	; 0x50
 8088d7c:	f7fb ff40 	bl	8084c00 <mbedtls_oid_get_x509_ext_type>

        if( ret != 0 )
 8088d80:	b160      	cbz	r0, 8088d9c <mbedtls_x509_crt_parse_der+0x3d4>
        {
            /* No parser found, skip extension */
            *p = end_ext_octet;

#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
 8088d82:	9b08      	ldr	r3, [sp, #32]
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );

        if( ret != 0 )
        {
            /* No parser found, skip extension */
            *p = end_ext_octet;
 8088d84:	9506      	str	r5, [sp, #24]

#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
 8088d86:	2b00      	cmp	r3, #0
 8088d88:	f040 8142 	bne.w	8089010 <mbedtls_x509_crt_parse_der+0x648>
            return( 0 );

        return( ret );
    }

    while( *p < end )
 8088d8c:	9b06      	ldr	r3, [sp, #24]
 8088d8e:	429e      	cmp	r6, r3
 8088d90:	d8b4      	bhi.n	8088cfc <mbedtls_x509_crt_parse_der+0x334>
 8088d92:	e030      	b.n	8088df6 <mbedtls_x509_crt_parse_der+0x42e>
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
 8088d94:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8088d98:	d0df      	beq.n	8088d5a <mbedtls_x509_crt_parse_der+0x392>
 8088d9a:	e07f      	b.n	8088e9c <mbedtls_x509_crt_parse_der+0x4d4>
#endif
            continue;
        }

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
 8088d9c:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
 8088da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8088da2:	ea12 0003 	ands.w	r0, r2, r3
 8088da6:	f040 8135 	bne.w	8089014 <mbedtls_x509_crt_parse_der+0x64c>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

        crt->ext_types |= ext_type;
 8088daa:	431a      	orrs	r2, r3

        switch( ext_type )
 8088dac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

        crt->ext_types |= ext_type;
 8088db0:	f8c4 20f8 	str.w	r2, [r4, #248]	; 0xf8

        switch( ext_type )
 8088db4:	d023      	beq.n	8088dfe <mbedtls_x509_crt_parse_der+0x436>
 8088db6:	dc74      	bgt.n	8088ea2 <mbedtls_x509_crt_parse_der+0x4da>
 8088db8:	2b04      	cmp	r3, #4
 8088dba:	f000 80a9 	beq.w	8088f10 <mbedtls_x509_crt_parse_der+0x548>
 8088dbe:	2b20      	cmp	r3, #32
 8088dc0:	f040 812a 	bne.w	8089018 <mbedtls_x509_crt_parse_der+0x650>
    mbedtls_asn1_buf *buf;
    unsigned char tag;
    mbedtls_asn1_sequence *cur = subject_alt_name;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8088dc4:	2330      	movs	r3, #48	; 0x30
 8088dc6:	aa0a      	add	r2, sp, #40	; 0x28
 8088dc8:	4629      	mov	r1, r5
 8088dca:	a806      	add	r0, sp, #24
                return( ret );
            break;

        case MBEDTLS_X509_EXT_SUBJECT_ALT_NAME:
            /* Parse subject alt name */
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 8088dcc:	f104 0be8 	add.w	fp, r4, #232	; 0xe8
    mbedtls_asn1_buf *buf;
    unsigned char tag;
    mbedtls_asn1_sequence *cur = subject_alt_name;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8088dd0:	f7fa fae8 	bl	80833a4 <mbedtls_asn1_get_tag>
 8088dd4:	bb20      	cbnz	r0, 8088e20 <mbedtls_x509_crt_parse_der+0x458>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( *p + len != end )
 8088dd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8088dd8:	9a06      	ldr	r2, [sp, #24]
 8088dda:	4413      	add	r3, r2
 8088ddc:	429d      	cmp	r5, r3
 8088dde:	f040 8115 	bne.w	808900c <mbedtls_x509_crt_parse_der+0x644>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    while( *p < end )
 8088de2:	9a06      	ldr	r2, [sp, #24]
 8088de4:	4295      	cmp	r5, r2
 8088de6:	f240 80f3 	bls.w	8088fd0 <mbedtls_x509_crt_parse_der+0x608>
    {
        if( ( end - *p ) < 1 )
 8088dea:	1aab      	subs	r3, r5, r2
 8088dec:	2b00      	cmp	r3, #0
 8088dee:	f300 80be 	bgt.w	8088f6e <mbedtls_x509_crt_parse_der+0x5a6>
        extn_oid.p = *p;
        *p += extn_oid.len;

        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8088df2:	488d      	ldr	r0, [pc, #564]	; (8089028 <mbedtls_x509_crt_parse_der+0x660>)
 8088df4:	e018      	b.n	8088e28 <mbedtls_x509_crt_parse_der+0x460>
        default:
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE );
        }
    }

    if( *p != end )
 8088df6:	f43f aefa 	beq.w	8088bee <mbedtls_x509_crt_parse_der+0x226>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8088dfa:	4d8c      	ldr	r5, [pc, #560]	; (808902c <mbedtls_x509_crt_parse_der+0x664>)
 8088dfc:	e753      	b.n	8088ca6 <mbedtls_x509_crt_parse_der+0x2de>

        switch( ext_type )
        {
        case MBEDTLS_X509_EXT_BASIC_CONSTRAINTS:
            /* Parse basic constraints */
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
 8088dfe:	f504 7380 	add.w	r3, r4, #256	; 0x100
 8088e02:	9303      	str	r3, [sp, #12]
    /*
     * BasicConstraints ::= SEQUENCE {
     *      cA                      BOOLEAN DEFAULT FALSE,
     *      pathLenConstraint       INTEGER (0..MAX) OPTIONAL }
     */
    *ca_istrue = 0; /* DEFAULT FALSE */
 8088e04:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
    *max_pathlen = 0; /* endless */
 8088e08:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8088e0c:	2330      	movs	r3, #48	; 0x30
 8088e0e:	aa17      	add	r2, sp, #92	; 0x5c
 8088e10:	4629      	mov	r1, r5
 8088e12:	a806      	add	r0, sp, #24

        switch( ext_type )
        {
        case MBEDTLS_X509_EXT_BASIC_CONSTRAINTS:
            /* Parse basic constraints */
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
 8088e14:	f104 0bfc 	add.w	fp, r4, #252	; 0xfc
     *      pathLenConstraint       INTEGER (0..MAX) OPTIONAL }
     */
    *ca_istrue = 0; /* DEFAULT FALSE */
    *max_pathlen = 0; /* endless */

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8088e18:	f7fa fac4 	bl	80833a4 <mbedtls_asn1_get_tag>
 8088e1c:	2800      	cmp	r0, #0
 8088e1e:	d048      	beq.n	8088eb2 <mbedtls_x509_crt_parse_der+0x4ea>
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
        (*p)++;
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 8088e20:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
                return( ret );
            break;

        case MBEDTLS_X509_EXT_SUBJECT_ALT_NAME:
            /* Parse subject alt name */
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 8088e24:	2800      	cmp	r0, #0
 8088e26:	d0b1      	beq.n	8088d8c <mbedtls_x509_crt_parse_der+0x3c4>
    size_t len;
    unsigned char *end_ext_data, *end_ext_octet;

    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8088e28:	4605      	mov	r5, r0
#if !defined(MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3)
    if( crt->version == 3 )
#endif
    {
        ret = x509_get_crt_ext( &p, end, crt );
        if( ret != 0 )
 8088e2a:	2800      	cmp	r0, #0
 8088e2c:	f43f aedf 	beq.w	8088bee <mbedtls_x509_crt_parse_der+0x226>
 8088e30:	e739      	b.n	8088ca6 <mbedtls_x509_crt_parse_der+0x2de>
     *  -- end of TBSCertificate
     *
     *  signatureAlgorithm   AlgorithmIdentifier,
     *  signatureValue       BIT STRING
     */
    if( ( ret = mbedtls_x509_get_alg( &p, end, &sig_oid2, &sig_params2 ) ) != 0 )
 8088e32:	ab0e      	add	r3, sp, #56	; 0x38
 8088e34:	aa11      	add	r2, sp, #68	; 0x44
 8088e36:	4639      	mov	r1, r7
 8088e38:	a806      	add	r0, sp, #24
 8088e3a:	f7fd fa13 	bl	8086264 <mbedtls_x509_get_alg>
 8088e3e:	4605      	mov	r5, r0
 8088e40:	2800      	cmp	r0, #0
 8088e42:	f47f af30 	bne.w	8088ca6 <mbedtls_x509_crt_parse_der+0x2de>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->sig_oid.len != sig_oid2.len ||
 8088e46:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8088e48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8088e4a:	429a      	cmp	r2, r3
 8088e4c:	d10f      	bne.n	8088e6e <mbedtls_x509_crt_parse_der+0x4a6>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 8088e4e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8088e50:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8088e52:	f009 fa6b 	bl	809232c <memcmp>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->sig_oid.len != sig_oid2.len ||
 8088e56:	4605      	mov	r5, r0
 8088e58:	b948      	cbnz	r0, 8088e6e <mbedtls_x509_crt_parse_der+0x4a6>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
        sig_params1.len != sig_params2.len ||
 8088e5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->sig_oid.len != sig_oid2.len ||
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 8088e5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8088e5e:	429a      	cmp	r2, r3
 8088e60:	d105      	bne.n	8088e6e <mbedtls_x509_crt_parse_der+0x4a6>
        sig_params1.len != sig_params2.len ||
 8088e62:	b14a      	cbz	r2, 8088e78 <mbedtls_x509_crt_parse_der+0x4b0>
        ( sig_params1.len != 0 &&
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
 8088e64:	9910      	ldr	r1, [sp, #64]	; 0x40
 8088e66:	980d      	ldr	r0, [sp, #52]	; 0x34
 8088e68:	f009 fa60 	bl	809232c <memcmp>
    }

    if( crt->sig_oid.len != sig_oid2.len ||
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
        sig_params1.len != sig_params2.len ||
        ( sig_params1.len != 0 &&
 8088e6c:	b120      	cbz	r0, 8088e78 <mbedtls_x509_crt_parse_der+0x4b0>
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
    {
        mbedtls_x509_crt_free( crt );
 8088e6e:	4620      	mov	r0, r4
 8088e70:	f7ff fd51 	bl	8088916 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_SIG_MISMATCH );
 8088e74:	4d6e      	ldr	r5, [pc, #440]	; (8089030 <mbedtls_x509_crt_parse_der+0x668>)
 8088e76:	e6cf      	b.n	8088c18 <mbedtls_x509_crt_parse_der+0x250>
    }

    if( ( ret = mbedtls_x509_get_sig( &p, end, &crt->sig ) ) != 0 )
 8088e78:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 8088e7c:	4639      	mov	r1, r7
 8088e7e:	a806      	add	r0, sp, #24
 8088e80:	f7fd fb26 	bl	80864d0 <mbedtls_x509_get_sig>
 8088e84:	4606      	mov	r6, r0
 8088e86:	b120      	cbz	r0, 8088e92 <mbedtls_x509_crt_parse_der+0x4ca>
    {
        mbedtls_x509_crt_free( crt );
 8088e88:	4620      	mov	r0, r4
 8088e8a:	f7ff fd44 	bl	8088916 <mbedtls_x509_crt_free>
 8088e8e:	4635      	mov	r5, r6
 8088e90:	e6bf      	b.n	8088c12 <mbedtls_x509_crt_parse_der+0x24a>
        return( ret );
    }

    if( p != end )
 8088e92:	9b06      	ldr	r3, [sp, #24]
 8088e94:	429f      	cmp	r7, r3
 8088e96:	f000 80c3 	beq.w	8089020 <mbedtls_x509_crt_parse_der+0x658>
 8088e9a:	e6ac      	b.n	8088bf6 <mbedtls_x509_crt_parse_der+0x22e>
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
            ( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 8088e9c:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
 8088ea0:	e7c2      	b.n	8088e28 <mbedtls_x509_crt_parse_der+0x460>
        if( ( crt->ext_types & ext_type ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

        crt->ext_types |= ext_type;

        switch( ext_type )
 8088ea2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8088ea6:	d053      	beq.n	8088f50 <mbedtls_x509_crt_parse_der+0x588>
 8088ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8088eac:	f000 8097 	beq.w	8088fde <mbedtls_x509_crt_parse_der+0x616>
 8088eb0:	e0b2      	b.n	8089018 <mbedtls_x509_crt_parse_der+0x650>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( *p == end )
 8088eb2:	9b06      	ldr	r3, [sp, #24]
 8088eb4:	429d      	cmp	r5, r3
 8088eb6:	f43f af69 	beq.w	8088d8c <mbedtls_x509_crt_parse_der+0x3c4>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_bool( p, end, ca_istrue ) ) != 0 )
 8088eba:	465a      	mov	r2, fp
 8088ebc:	4629      	mov	r1, r5
 8088ebe:	a806      	add	r0, sp, #24
 8088ec0:	f7fa fa84 	bl	80833cc <mbedtls_asn1_get_bool>
 8088ec4:	b178      	cbz	r0, 8088ee6 <mbedtls_x509_crt_parse_der+0x51e>
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8088ec6:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8088eca:	d1a9      	bne.n	8088e20 <mbedtls_x509_crt_parse_der+0x458>
            ret = mbedtls_asn1_get_int( p, end, ca_istrue );
 8088ecc:	465a      	mov	r2, fp
 8088ece:	4629      	mov	r1, r5
 8088ed0:	a806      	add	r0, sp, #24
 8088ed2:	f7fa fa94 	bl	80833fe <mbedtls_asn1_get_int>

        if( ret != 0 )
 8088ed6:	2800      	cmp	r0, #0
 8088ed8:	d1a2      	bne.n	8088e20 <mbedtls_x509_crt_parse_der+0x458>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        if( *ca_istrue != 0 )
 8088eda:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8088ede:	b113      	cbz	r3, 8088ee6 <mbedtls_x509_crt_parse_der+0x51e>
            *ca_istrue = 1;
 8088ee0:	2301      	movs	r3, #1
 8088ee2:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    }

    if( *p == end )
 8088ee6:	9b06      	ldr	r3, [sp, #24]
 8088ee8:	429d      	cmp	r5, r3
 8088eea:	f43f af4f 	beq.w	8088d8c <mbedtls_x509_crt_parse_der+0x3c4>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_int( p, end, max_pathlen ) ) != 0 )
 8088eee:	9a03      	ldr	r2, [sp, #12]
 8088ef0:	4629      	mov	r1, r5
 8088ef2:	a806      	add	r0, sp, #24
 8088ef4:	f7fa fa83 	bl	80833fe <mbedtls_asn1_get_int>
 8088ef8:	2800      	cmp	r0, #0
 8088efa:	d191      	bne.n	8088e20 <mbedtls_x509_crt_parse_der+0x458>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( *p != end )
 8088efc:	9b06      	ldr	r3, [sp, #24]
 8088efe:	429d      	cmp	r5, r3
 8088f00:	f040 8084 	bne.w	808900c <mbedtls_x509_crt_parse_der+0x644>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    (*max_pathlen)++;
 8088f04:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8088f08:	3301      	adds	r3, #1
 8088f0a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8088f0e:	e73d      	b.n	8088d8c <mbedtls_x509_crt_parse_der+0x3c4>
                               const unsigned char *end,
                               unsigned int *key_usage)
{
    int ret;
    size_t i;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 8088f10:	9017      	str	r0, [sp, #92]	; 0x5c
 8088f12:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
 8088f16:	9019      	str	r0, [sp, #100]	; 0x64

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 8088f18:	aa17      	add	r2, sp, #92	; 0x5c
 8088f1a:	4629      	mov	r1, r5
 8088f1c:	a806      	add	r0, sp, #24
 8088f1e:	f7fa faa5 	bl	808346c <mbedtls_asn1_get_bitstring>
 8088f22:	2800      	cmp	r0, #0
 8088f24:	d165      	bne.n	8088ff2 <mbedtls_x509_crt_parse_der+0x62a>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( bs.len < 1 )
 8088f26:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8088f28:	2a00      	cmp	r2, #0
 8088f2a:	d077      	beq.n	808901c <mbedtls_x509_crt_parse_der+0x654>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
 8088f2c:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 8088f30:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8088f32:	5c2b      	ldrb	r3, [r5, r0]
 8088f34:	00c1      	lsls	r1, r0, #3
 8088f36:	408b      	lsls	r3, r1
 8088f38:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 8088f3c:	3001      	adds	r0, #1
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 8088f3e:	430b      	orrs	r3, r1
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 8088f40:	4282      	cmp	r2, r0
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 8088f42:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 8088f46:	f43f af21 	beq.w	8088d8c <mbedtls_x509_crt_parse_der+0x3c4>
 8088f4a:	2804      	cmp	r0, #4
 8088f4c:	d1f1      	bne.n	8088f32 <mbedtls_x509_crt_parse_der+0x56a>
 8088f4e:	e71d      	b.n	8088d8c <mbedtls_x509_crt_parse_der+0x3c4>
                               const unsigned char *end,
                               mbedtls_x509_sequence *ext_key_usage)
{
    int ret;

    if( ( ret = mbedtls_asn1_get_sequence_of( p, end, ext_key_usage, MBEDTLS_ASN1_OID ) ) != 0 )
 8088f50:	2306      	movs	r3, #6
 8088f52:	f504 7284 	add.w	r2, r4, #264	; 0x108
 8088f56:	4629      	mov	r1, r5
 8088f58:	a806      	add	r0, sp, #24
 8088f5a:	f7fa fac0 	bl	80834de <mbedtls_asn1_get_sequence_of>
 8088f5e:	2800      	cmp	r0, #0
 8088f60:	d147      	bne.n	8088ff2 <mbedtls_x509_crt_parse_der+0x62a>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    /* Sequence length must be >= 1 */
    if( ext_key_usage->buf.p == NULL )
 8088f62:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8088f66:	2b00      	cmp	r3, #0
 8088f68:	f47f af10 	bne.w	8088d8c <mbedtls_x509_crt_parse_der+0x3c4>
 8088f6c:	e056      	b.n	808901c <mbedtls_x509_crt_parse_der+0x654>
    {
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
 8088f6e:	f812 3b01 	ldrb.w	r3, [r2], #1
        (*p)++;
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 8088f72:	4629      	mov	r1, r5
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
        (*p)++;
 8088f74:	9206      	str	r2, [sp, #24]
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 8088f76:	a806      	add	r0, sp, #24
 8088f78:	aa17      	add	r2, sp, #92	; 0x5c
    {
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
 8088f7a:	9303      	str	r3, [sp, #12]
        (*p)++;
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 8088f7c:	f7fa f9c0 	bl	8083300 <mbedtls_asn1_get_len>
 8088f80:	9b03      	ldr	r3, [sp, #12]
 8088f82:	2800      	cmp	r0, #0
 8088f84:	f47f af4c 	bne.w	8088e20 <mbedtls_x509_crt_parse_der+0x458>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        if( ( tag & MBEDTLS_ASN1_TAG_CLASS_MASK ) !=
 8088f88:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8088f8c:	2a80      	cmp	r2, #128	; 0x80
 8088f8e:	d13f      	bne.n	8089010 <mbedtls_x509_crt_parse_der+0x648>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
        }

        /* Skip everything but DNS name */
        if( tag != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | 2 ) )
 8088f90:	2b82      	cmp	r3, #130	; 0x82
 8088f92:	d002      	beq.n	8088f9a <mbedtls_x509_crt_parse_der+0x5d2>
        {
            *p += tag_len;
 8088f94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8088f96:	9a06      	ldr	r2, [sp, #24]
 8088f98:	e017      	b.n	8088fca <mbedtls_x509_crt_parse_der+0x602>
            continue;
        }

        /* Allocate and assign next pointer */
        if( cur->buf.p != NULL )
 8088f9a:	f8db 3008 	ldr.w	r3, [fp, #8]
 8088f9e:	b15b      	cbz	r3, 8088fb8 <mbedtls_x509_crt_parse_der+0x5f0>
        {
            if( cur->next != NULL )
 8088fa0:	f8db 300c 	ldr.w	r3, [fp, #12]
 8088fa4:	2b00      	cmp	r3, #0
 8088fa6:	d135      	bne.n	8089014 <mbedtls_x509_crt_parse_der+0x64c>
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

            cur->next = (mbedtls_asn1_sequence *)mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );
 8088fa8:	2110      	movs	r1, #16
 8088faa:	2001      	movs	r0, #1
 8088fac:	f009 f9a8 	bl	8092300 <calloc>
 8088fb0:	f8cb 000c 	str.w	r0, [fp, #12]

            if( cur->next == NULL )
 8088fb4:	b188      	cbz	r0, 8088fda <mbedtls_x509_crt_parse_der+0x612>
 8088fb6:	4683      	mov	fp, r0

            cur = cur->next;
        }

        buf = &(cur->buf);
        buf->tag = tag;
 8088fb8:	2382      	movs	r3, #130	; 0x82
 8088fba:	f8cb 3000 	str.w	r3, [fp]
        buf->p = *p;
 8088fbe:	9a06      	ldr	r2, [sp, #24]
 8088fc0:	f8cb 2008 	str.w	r2, [fp, #8]
        buf->len = tag_len;
 8088fc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8088fc6:	f8cb 3004 	str.w	r3, [fp, #4]
        *p += buf->len;
 8088fca:	4413      	add	r3, r2
 8088fcc:	9306      	str	r3, [sp, #24]
 8088fce:	e708      	b.n	8088de2 <mbedtls_x509_crt_parse_der+0x41a>
    }

    /* Set final sequence entry's next pointer to NULL */
    cur->next = NULL;
 8088fd0:	f8cb 800c 	str.w	r8, [fp, #12]

    if( *p != end )
 8088fd4:	f43f aeda 	beq.w	8088d8c <mbedtls_x509_crt_parse_der+0x3c4>
 8088fd8:	e018      	b.n	808900c <mbedtls_x509_crt_parse_der+0x644>

            cur->next = (mbedtls_asn1_sequence *)mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );

            if( cur->next == NULL )
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                        MBEDTLS_ERR_ASN1_ALLOC_FAILED );
 8088fda:	4816      	ldr	r0, [pc, #88]	; (8089034 <mbedtls_x509_crt_parse_der+0x66c>)
 8088fdc:	e724      	b.n	8088e28 <mbedtls_x509_crt_parse_der+0x460>
static int x509_get_ns_cert_type( unsigned char **p,
                                       const unsigned char *end,
                                       unsigned char *ns_cert_type)
{
    int ret;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 8088fde:	9017      	str	r0, [sp, #92]	; 0x5c
 8088fe0:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
 8088fe4:	9019      	str	r0, [sp, #100]	; 0x64

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 8088fe6:	aa17      	add	r2, sp, #92	; 0x5c
 8088fe8:	4629      	mov	r1, r5
 8088fea:	a806      	add	r0, sp, #24
 8088fec:	f7fa fa3e 	bl	808346c <mbedtls_asn1_get_bitstring>
 8088ff0:	b120      	cbz	r0, 8088ffc <mbedtls_x509_crt_parse_der+0x634>
                return( ret );
            break;

        case MBEDTLS_X509_EXT_NS_CERT_TYPE:
            /* Parse netscape certificate type */
            if( ( ret = x509_get_ns_cert_type( p, end_ext_octet,
 8088ff2:	f5b0 5014 	subs.w	r0, r0, #9472	; 0x2500
 8088ff6:	f43f aec9 	beq.w	8088d8c <mbedtls_x509_crt_parse_der+0x3c4>
 8088ffa:	e715      	b.n	8088e28 <mbedtls_x509_crt_parse_der+0x460>
    mbedtls_x509_bitstring bs = { 0, 0, NULL };

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( bs.len != 1 )
 8088ffc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8088ffe:	2b01      	cmp	r3, #1
 8089000:	d10c      	bne.n	808901c <mbedtls_x509_crt_parse_der+0x654>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *ns_cert_type = *bs.p;
 8089002:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8089004:	781b      	ldrb	r3, [r3, #0]
 8089006:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
 808900a:	e6bf      	b.n	8088d8c <mbedtls_x509_crt_parse_der+0x3c4>

        end_ext_octet = *p + len;

        if( end_ext_octet != end_ext_data )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 808900c:	4807      	ldr	r0, [pc, #28]	; (808902c <mbedtls_x509_crt_parse_der+0x664>)
 808900e:	e70b      	b.n	8088e28 <mbedtls_x509_crt_parse_der+0x460>
#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
            {
                /* Data is marked as critical: fail */
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                        MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 8089010:	4809      	ldr	r0, [pc, #36]	; (8089038 <mbedtls_x509_crt_parse_der+0x670>)
 8089012:	e709      	b.n	8088e28 <mbedtls_x509_crt_parse_der+0x460>
            continue;
        }

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );
 8089014:	4809      	ldr	r0, [pc, #36]	; (808903c <mbedtls_x509_crt_parse_der+0x674>)
 8089016:	e707      	b.n	8088e28 <mbedtls_x509_crt_parse_der+0x460>
                    &crt->ns_cert_type ) ) != 0 )
                return( ret );
            break;

        default:
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE );
 8089018:	4809      	ldr	r0, [pc, #36]	; (8089040 <mbedtls_x509_crt_parse_der+0x678>)
 808901a:	e705      	b.n	8088e28 <mbedtls_x509_crt_parse_der+0x460>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    /* Sequence length must be >= 1 */
    if( ext_key_usage->buf.p == NULL )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 808901c:	4809      	ldr	r0, [pc, #36]	; (8089044 <mbedtls_x509_crt_parse_der+0x67c>)
 808901e:	e703      	b.n	8088e28 <mbedtls_x509_crt_parse_der+0x460>

        return( ret );
    }

    return( 0 );
}
 8089020:	4628      	mov	r0, r5
 8089022:	b01b      	add	sp, #108	; 0x6c
 8089024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8089028:	ffffdaa0 	.word	0xffffdaa0
 808902c:	ffffda9a 	.word	0xffffda9a
 8089030:	ffffd980 	.word	0xffffd980
 8089034:	ffffda96 	.word	0xffffda96
 8089038:	ffffda9e 	.word	0xffffda9e
 808903c:	ffffdb00 	.word	0xffffdb00
 8089040:	ffffdf80 	.word	0xffffdf80
 8089044:	ffffda9c 	.word	0xffffda9c

08089048 <mbedtls_x509_crt_parse>:
/*
 * Parse one or more PEM certificates from a buffer and add them to the chained
 * list
 */
int mbedtls_x509_crt_parse( mbedtls_x509_crt *chain, const unsigned char *buf, size_t buflen )
{
 8089048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808904c:	460d      	mov	r5, r1
 808904e:	b088      	sub	sp, #32
 8089050:	4617      	mov	r7, r2
#endif

    /*
     * Check for valid input
     */
    if( chain == NULL || buf == NULL )
 8089052:	4681      	mov	r9, r0
 8089054:	2800      	cmp	r0, #0
 8089056:	d054      	beq.n	8089102 <mbedtls_x509_crt_parse+0xba>
 8089058:	2900      	cmp	r1, #0
 808905a:	d052      	beq.n	8089102 <mbedtls_x509_crt_parse+0xba>
    /*
     * Determine buffer content. Buffer contains either one DER certificate or
     * one or more PEM certificates.
     */
#if defined(MBEDTLS_PEM_PARSE_C)
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
 808905c:	2a00      	cmp	r2, #0
 808905e:	d054      	beq.n	808910a <mbedtls_x509_crt_parse+0xc2>
 8089060:	188b      	adds	r3, r1, r2
 8089062:	f813 4c01 	ldrb.w	r4, [r3, #-1]
 8089066:	2c00      	cmp	r4, #0
 8089068:	d14f      	bne.n	808910a <mbedtls_x509_crt_parse+0xc2>
        strstr( (const char *) buf, "-----BEGIN CERTIFICATE-----" ) != NULL )
 808906a:	492c      	ldr	r1, [pc, #176]	; (808911c <mbedtls_x509_crt_parse+0xd4>)
 808906c:	4628      	mov	r0, r5
 808906e:	f009 f9d1 	bl	8092414 <strstr>
    /*
     * Determine buffer content. Buffer contains either one DER certificate or
     * one or more PEM certificates.
     */
#if defined(MBEDTLS_PEM_PARSE_C)
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
 8089072:	2800      	cmp	r0, #0
 8089074:	d049      	beq.n	808910a <mbedtls_x509_crt_parse+0xc2>
 8089076:	46a0      	mov	r8, r4
 8089078:	46a2      	mov	sl, r4
    {
        int ret;
        mbedtls_pem_context pem;

        /* 1 rather than 0 since the terminating NULL byte is counted in */
        while( buflen > 1 )
 808907a:	2f01      	cmp	r7, #1
 808907c:	d938      	bls.n	80890f0 <mbedtls_x509_crt_parse+0xa8>
        {
            size_t use_len;
            mbedtls_pem_init( &pem );
 808907e:	a805      	add	r0, sp, #20
 8089080:	f005 fc16 	bl	808e8b0 <mbedtls_pem_init>

            /* If we get there, we know the string is null-terminated */
            ret = mbedtls_pem_read_buffer( &pem,
                           "-----BEGIN CERTIFICATE-----",
                           "-----END CERTIFICATE-----",
                           buf, NULL, 0, &use_len );
 8089084:	ab04      	add	r3, sp, #16
 8089086:	9302      	str	r3, [sp, #8]
 8089088:	2300      	movs	r3, #0
 808908a:	9301      	str	r3, [sp, #4]
 808908c:	9300      	str	r3, [sp, #0]
 808908e:	4a24      	ldr	r2, [pc, #144]	; (8089120 <mbedtls_x509_crt_parse+0xd8>)
 8089090:	462b      	mov	r3, r5
 8089092:	4922      	ldr	r1, [pc, #136]	; (808911c <mbedtls_x509_crt_parse+0xd4>)
 8089094:	a805      	add	r0, sp, #20
 8089096:	f005 fc11 	bl	808e8bc <mbedtls_pem_read_buffer>

            if( ret == 0 )
 808909a:	4606      	mov	r6, r0
 808909c:	b968      	cbnz	r0, 80890ba <mbedtls_x509_crt_parse+0x72>
            {
                /*
                 * Was PEM encoded
                 */
                buflen -= use_len;
 808909e:	9b04      	ldr	r3, [sp, #16]
                continue;
            }
            else
                break;

            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
 80890a0:	9a06      	ldr	r2, [sp, #24]
 80890a2:	9905      	ldr	r1, [sp, #20]
 80890a4:	4648      	mov	r0, r9
            if( ret == 0 )
            {
                /*
                 * Was PEM encoded
                 */
                buflen -= use_len;
 80890a6:	1aff      	subs	r7, r7, r3
                buf += use_len;
 80890a8:	441d      	add	r5, r3
                continue;
            }
            else
                break;

            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
 80890aa:	f7ff fc8d 	bl	80889c8 <mbedtls_x509_crt_parse_der>
 80890ae:	4606      	mov	r6, r0

            mbedtls_pem_free( &pem );
 80890b0:	a805      	add	r0, sp, #20
 80890b2:	f005 fc91 	bl	808e9d8 <mbedtls_pem_free>

            if( ret != 0 )
 80890b6:	b96e      	cbnz	r6, 80890d4 <mbedtls_x509_crt_parse+0x8c>
 80890b8:	e015      	b.n	80890e6 <mbedtls_x509_crt_parse+0x9e>
                 * Was PEM encoded
                 */
                buflen -= use_len;
                buf += use_len;
            }
            else if( ret == MBEDTLS_ERR_PEM_BAD_INPUT_DATA )
 80890ba:	f510 5fa4 	cmn.w	r0, #5248	; 0x1480
 80890be:	d015      	beq.n	80890ec <mbedtls_x509_crt_parse+0xa4>
            {
                return( ret );
            }
            else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 80890c0:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 80890c4:	d014      	beq.n	80890f0 <mbedtls_x509_crt_parse+0xa8>
            {
                mbedtls_pem_free( &pem );
 80890c6:	a805      	add	r0, sp, #20
 80890c8:	f005 fc86 	bl	808e9d8 <mbedtls_pem_free>

                /*
                 * PEM header and footer were found
                 */
                buflen -= use_len;
 80890cc:	9b04      	ldr	r3, [sp, #16]
 80890ce:	1aff      	subs	r7, r7, r3
                buf += use_len;
 80890d0:	441d      	add	r5, r3
 80890d2:	e002      	b.n	80890da <mbedtls_x509_crt_parse+0x92>
            if( ret != 0 )
            {
                /*
                 * Quit parsing on a memory error
                 */
                if( ret == MBEDTLS_ERR_X509_ALLOC_FAILED )
 80890d4:	f516 5f22 	cmn.w	r6, #10368	; 0x2880
 80890d8:	d008      	beq.n	80890ec <mbedtls_x509_crt_parse+0xa4>
                    return( ret );

                if( first_error == 0 )
 80890da:	f1b8 0f00 	cmp.w	r8, #0
 80890de:	bf08      	it	eq
 80890e0:	46b0      	moveq	r8, r6
                    first_error = ret;

                total_failed++;
 80890e2:	3401      	adds	r4, #1
                continue;
 80890e4:	e7c9      	b.n	808907a <mbedtls_x509_crt_parse+0x32>
            }

            success = 1;
 80890e6:	f04f 0a01 	mov.w	sl, #1
 80890ea:	e7c6      	b.n	808907a <mbedtls_x509_crt_parse+0x32>
 80890ec:	4630      	mov	r0, r6
 80890ee:	e011      	b.n	8089114 <mbedtls_x509_crt_parse+0xcc>
        }
    }

    if( success )
 80890f0:	f1ba 0f00 	cmp.w	sl, #0
 80890f4:	d107      	bne.n	8089106 <mbedtls_x509_crt_parse+0xbe>
        return( total_failed );
    else if( first_error )
 80890f6:	480b      	ldr	r0, [pc, #44]	; (8089124 <mbedtls_x509_crt_parse+0xdc>)
 80890f8:	f1b8 0f00 	cmp.w	r8, #0
 80890fc:	bf18      	it	ne
 80890fe:	4640      	movne	r0, r8
 8089100:	e008      	b.n	8089114 <mbedtls_x509_crt_parse+0xcc>

    /*
     * Check for valid input
     */
    if( chain == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8089102:	4809      	ldr	r0, [pc, #36]	; (8089128 <mbedtls_x509_crt_parse+0xe0>)
 8089104:	e006      	b.n	8089114 <mbedtls_x509_crt_parse+0xcc>
 8089106:	4620      	mov	r0, r4
 8089108:	e004      	b.n	8089114 <mbedtls_x509_crt_parse+0xcc>
    {
        buf_format = MBEDTLS_X509_FORMAT_PEM;
    }

    if( buf_format == MBEDTLS_X509_FORMAT_DER )
        return mbedtls_x509_crt_parse_der( chain, buf, buflen );
 808910a:	463a      	mov	r2, r7
 808910c:	4629      	mov	r1, r5
 808910e:	4648      	mov	r0, r9
 8089110:	f7ff fc5a 	bl	80889c8 <mbedtls_x509_crt_parse_der>
    else if( first_error )
        return( first_error );
    else
        return( MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT );
#endif /* MBEDTLS_PEM_PARSE_C */
}
 8089114:	b008      	add	sp, #32
 8089116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808911a:	bf00      	nop
 808911c:	08094079 	.word	0x08094079
 8089120:	08094095 	.word	0x08094095
 8089124:	ffffd880 	.word	0xffffd880
 8089128:	ffffd800 	.word	0xffffd800

0808912c <_ZL15mbedtls_zeroizePvj>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
#include "mbedtls/oid.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 808912c:	4401      	add	r1, r0
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808912e:	2300      	movs	r3, #0
 8089130:	4288      	cmp	r0, r1
 8089132:	d002      	beq.n	808913a <_ZL15mbedtls_zeroizePvj+0xe>
 8089134:	7003      	strb	r3, [r0, #0]
 8089136:	3001      	adds	r0, #1
 8089138:	e7fa      	b.n	8089130 <_ZL15mbedtls_zeroizePvj+0x4>
 808913a:	4770      	bx	lr

0808913c <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>:
 * Start a timer.
 * Passing millisecs = 0 cancels a running timer.
 */
static void ssl_set_timer( mbedtls_ssl_context *ssl, uint32_t millisecs )
{
    if( ssl->f_set_timer == NULL )
 808913c:	6c83      	ldr	r3, [r0, #72]	; 0x48
/*
 * Start a timer.
 * Passing millisecs = 0 cancels a running timer.
 */
static void ssl_set_timer( mbedtls_ssl_context *ssl, uint32_t millisecs )
{
 808913e:	460a      	mov	r2, r1
    if( ssl->f_set_timer == NULL )
 8089140:	b113      	cbz	r3, 8089148 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm+0xc>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "set_timer to %d ms", (int) millisecs ) );
    ssl->f_set_timer( ssl->p_timer, millisecs / 4, millisecs );
 8089142:	0889      	lsrs	r1, r1, #2
 8089144:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8089146:	4718      	bx	r3
 8089148:	4770      	bx	lr
	...

0808914c <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi>:

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_calc_finished_tls_sha256(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 808914c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int len = 12;
    const char *sender;
    mbedtls_sha256_context sha256;
    unsigned char padbuf[32];

    mbedtls_ssl_session *session = ssl->session_negotiate;
 808914e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_calc_finished_tls_sha256(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 8089150:	b0a9      	sub	sp, #164	; 0xa4
 8089152:	4604      	mov	r4, r0
 8089154:	460f      	mov	r7, r1
 8089156:	4616      	mov	r6, r2
    const char *sender;
    mbedtls_sha256_context sha256;
    unsigned char padbuf[32];

    mbedtls_ssl_session *session = ssl->session_negotiate;
    if( !session )
 8089158:	b905      	cbnz	r5, 808915c <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x10>
        session = ssl->session;
 808915a:	6a85      	ldr	r5, [r0, #40]	; 0x28

    mbedtls_sha256_init( &sha256 );
 808915c:	a80d      	add	r0, sp, #52	; 0x34
 808915e:	f7f8 ff43 	bl	8081fe8 <mbedtls_sha256_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha256" ) );

    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 8089162:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8089164:	a80d      	add	r0, sp, #52	; 0x34
 8089166:	3118      	adds	r1, #24
 8089168:	f7f8 ff4c 	bl	8082004 <mbedtls_sha256_clone>
                   sha256.state, sizeof( sha256.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
 808916c:	4b10      	ldr	r3, [pc, #64]	; (80891b0 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x64>)
 808916e:	4911      	ldr	r1, [pc, #68]	; (80891b4 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x68>)

    mbedtls_sha256_finish_ret( &sha256, padbuf );
 8089170:	a80d      	add	r0, sp, #52	; 0x34
                   sha256.state, sizeof( sha256.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
 8089172:	2e00      	cmp	r6, #0
 8089174:	bf0c      	ite	eq
 8089176:	461e      	moveq	r6, r3
 8089178:	460e      	movne	r6, r1

    mbedtls_sha256_finish_ret( &sha256, padbuf );
 808917a:	a905      	add	r1, sp, #20
 808917c:	f7f9 fb3c 	bl	80827f8 <mbedtls_sha256_finish_ret>

    ssl->handshake->tls_prf( session->master, 48, sender,
 8089180:	6b23      	ldr	r3, [r4, #48]	; 0x30
                             padbuf, 32, buf, len );
 8089182:	220c      	movs	r2, #12
 8089184:	2420      	movs	r4, #32
 8089186:	9202      	str	r2, [sp, #8]
 8089188:	9701      	str	r7, [sp, #4]
 808918a:	9400      	str	r4, [sp, #0]
 808918c:	4632      	mov	r2, r6
 808918e:	f8d3 716c 	ldr.w	r7, [r3, #364]	; 0x16c
 8089192:	2130      	movs	r1, #48	; 0x30
 8089194:	ab05      	add	r3, sp, #20
 8089196:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 808919a:	47b8      	blx	r7

    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );

    mbedtls_sha256_free( &sha256 );
 808919c:	a80d      	add	r0, sp, #52	; 0x34
 808919e:	f7f8 ff27 	bl	8081ff0 <mbedtls_sha256_free>

    mbedtls_zeroize(  padbuf, sizeof(  padbuf ) );
 80891a2:	4621      	mov	r1, r4
 80891a4:	a805      	add	r0, sp, #20
 80891a6:	f7ff ffc1 	bl	808912c <_ZL15mbedtls_zeroizePvj>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
}
 80891aa:	b029      	add	sp, #164	; 0xa4
 80891ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80891ae:	bf00      	nop
 80891b0:	080944a9 	.word	0x080944a9
 80891b4:	080944b9 	.word	0x080944b9

080891b8 <_ZL26ssl_calc_verify_tls_sha256P19mbedtls_ssl_contextPh>:
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 */

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
void ssl_calc_verify_tls_sha256( mbedtls_ssl_context *ssl, unsigned char hash[32] )
{
 80891b8:	b530      	push	{r4, r5, lr}
 80891ba:	4605      	mov	r5, r0
 80891bc:	460c      	mov	r4, r1
 80891be:	b09d      	sub	sp, #116	; 0x74
    mbedtls_sha256_context sha256;

    mbedtls_sha256_init( &sha256 );
 80891c0:	a801      	add	r0, sp, #4
 80891c2:	f7f8 ff11 	bl	8081fe8 <mbedtls_sha256_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha256" ) );

    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 80891c6:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80891c8:	a801      	add	r0, sp, #4
 80891ca:	3118      	adds	r1, #24
 80891cc:	f7f8 ff1a 	bl	8082004 <mbedtls_sha256_clone>
    mbedtls_sha256_finish_ret( &sha256, hash );
 80891d0:	4621      	mov	r1, r4
 80891d2:	a801      	add	r0, sp, #4
 80891d4:	f7f9 fb10 	bl	80827f8 <mbedtls_sha256_finish_ret>

    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 32 );
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );

    mbedtls_sha256_free( &sha256 );
 80891d8:	a801      	add	r0, sp, #4
 80891da:	f7f8 ff09 	bl	8081ff0 <mbedtls_sha256_free>

    return;
}
 80891de:	b01d      	add	sp, #116	; 0x74
 80891e0:	bd30      	pop	{r4, r5, pc}
	...

080891e4 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>:
static int tls_prf_generic( mbedtls_md_type_t md_type,
                            const unsigned char *secret, size_t slen,
                            const char *label,
                            const unsigned char *random, size_t rlen,
                            unsigned char *dstbuf, size_t dlen )
{
 80891e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80891e8:	4604      	mov	r4, r0
 80891ea:	b0b7      	sub	sp, #220	; 0xdc
    unsigned char h_i[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    int ret;

    mbedtls_md_init( &md_ctx );
 80891ec:	a803      	add	r0, sp, #12
static int tls_prf_generic( mbedtls_md_type_t md_type,
                            const unsigned char *secret, size_t slen,
                            const char *label,
                            const unsigned char *random, size_t rlen,
                            unsigned char *dstbuf, size_t dlen )
{
 80891ee:	468a      	mov	sl, r1
 80891f0:	4693      	mov	fp, r2
 80891f2:	4699      	mov	r9, r3
 80891f4:	9e43      	ldr	r6, [sp, #268]	; 0x10c
    unsigned char h_i[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    int ret;

    mbedtls_md_init( &md_ctx );
 80891f6:	f7fe fa63 	bl	80876c0 <mbedtls_md_init>

    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
 80891fa:	4620      	mov	r0, r4
 80891fc:	f7fe fa54 	bl	80876a8 <mbedtls_md_info_from_type>
 8089200:	4607      	mov	r7, r0
 8089202:	2800      	cmp	r0, #0
 8089204:	d073      	beq.n	80892ee <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x10a>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );

    md_len = mbedtls_md_get_size( md_info );
 8089206:	f7fe fb93 	bl	8087930 <mbedtls_md_get_size>
 808920a:	4604      	mov	r4, r0

    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
 808920c:	4648      	mov	r0, r9
 808920e:	f009 f8f9 	bl	8092404 <strlen>
 8089212:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8089214:	1823      	adds	r3, r4, r0
 8089216:	189a      	adds	r2, r3, r2
 8089218:	2a80      	cmp	r2, #128	; 0x80
 808921a:	4605      	mov	r5, r0
 808921c:	9301      	str	r3, [sp, #4]
 808921e:	d868      	bhi.n	80892f2 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x10e>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
 8089220:	ab16      	add	r3, sp, #88	; 0x58
 8089222:	eb03 0804 	add.w	r8, r3, r4
 8089226:	4602      	mov	r2, r0
 8089228:	4649      	mov	r1, r9
 808922a:	4640      	mov	r0, r8
 808922c:	f009 f88d 	bl	809234a <memcpy>
    memcpy( tmp + md_len + nb, random, rlen );
 8089230:	9b01      	ldr	r3, [sp, #4]
 8089232:	a816      	add	r0, sp, #88	; 0x58
 8089234:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8089236:	9940      	ldr	r1, [sp, #256]	; 0x100
 8089238:	4418      	add	r0, r3
 808923a:	f009 f886 	bl	809234a <memcpy>
    nb += rlen;

    /*
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
 808923e:	4639      	mov	r1, r7
 8089240:	2201      	movs	r2, #1
 8089242:	a803      	add	r0, sp, #12
 8089244:	f7fe fa62 	bl	808770c <mbedtls_md_setup>
 8089248:	4607      	mov	r7, r0
 808924a:	2800      	cmp	r0, #0
 808924c:	d152      	bne.n	80892f4 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x110>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
    memcpy( tmp + md_len + nb, random, rlen );
    nb += rlen;
 808924e:	9b41      	ldr	r3, [sp, #260]	; 0x104
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
        return( ret );

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
 8089250:	465a      	mov	r2, fp
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
    memcpy( tmp + md_len + nb, random, rlen );
    nb += rlen;
 8089252:	441d      	add	r5, r3
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
        return( ret );

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
 8089254:	4651      	mov	r1, sl
 8089256:	a803      	add	r0, sp, #12
 8089258:	f7fe faa8 	bl	80877ac <mbedtls_md_hmac_starts>
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
 808925c:	462a      	mov	r2, r5
 808925e:	4641      	mov	r1, r8
 8089260:	a803      	add	r0, sp, #12
 8089262:	f7fe fb03 	bl	808786c <mbedtls_md_hmac_update>
    mbedtls_md_hmac_finish( &md_ctx, tmp );
 8089266:	a916      	add	r1, sp, #88	; 0x58
 8089268:	a803      	add	r0, sp, #12
 808926a:	f7fe fb0f 	bl	808788c <mbedtls_md_hmac_finish>

    for( i = 0; i < dlen; i += md_len )
 808926e:	46b9      	mov	r9, r7
 8089270:	f10d 0818 	add.w	r8, sp, #24
    {
        mbedtls_md_hmac_reset ( &md_ctx );
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
 8089274:	4425      	add	r5, r4

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
    mbedtls_md_hmac_finish( &md_ctx, tmp );

    for( i = 0; i < dlen; i += md_len )
 8089276:	45b1      	cmp	r9, r6

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
    }

    mbedtls_md_free( &md_ctx );
 8089278:	a803      	add	r0, sp, #12

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
    mbedtls_md_hmac_finish( &md_ctx, tmp );

    for( i = 0; i < dlen; i += md_len )
 808927a:	d22c      	bcs.n	80892d6 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xf2>
    {
        mbedtls_md_hmac_reset ( &md_ctx );
 808927c:	f7fe fb36 	bl	80878ec <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
 8089280:	462a      	mov	r2, r5
 8089282:	a916      	add	r1, sp, #88	; 0x58
 8089284:	a803      	add	r0, sp, #12
 8089286:	f7fe faf1 	bl	808786c <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, h_i );
 808928a:	4641      	mov	r1, r8
 808928c:	a803      	add	r0, sp, #12
 808928e:	f7fe fafd 	bl	808788c <mbedtls_md_hmac_finish>

        mbedtls_md_hmac_reset ( &md_ctx );
 8089292:	a803      	add	r0, sp, #12
 8089294:	f7fe fb2a 	bl	80878ec <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
 8089298:	4622      	mov	r2, r4
 808929a:	a916      	add	r1, sp, #88	; 0x58
 808929c:	a803      	add	r0, sp, #12
 808929e:	f7fe fae5 	bl	808786c <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, tmp );
 80892a2:	a916      	add	r1, sp, #88	; 0x58
 80892a4:	a803      	add	r0, sp, #12
 80892a6:	f7fe faf1 	bl	808788c <mbedtls_md_hmac_finish>

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
 80892aa:	eb09 0104 	add.w	r1, r9, r4
 80892ae:	428e      	cmp	r6, r1
 80892b0:	bf36      	itet	cc
 80892b2:	fbb6 f2f4 	udivcc	r2, r6, r4
 80892b6:	4622      	movcs	r2, r4
 80892b8:	fb04 6212 	mlscc	r2, r4, r2, r6

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
 80892bc:	9842      	ldr	r0, [sp, #264]	; 0x108
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;

        for( j = 0; j < k; j++ )
 80892be:	2300      	movs	r3, #0
            dstbuf[i + j]  = h_i[j];
 80892c0:	4481      	add	r9, r0
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;

        for( j = 0; j < k; j++ )
 80892c2:	4293      	cmp	r3, r2
 80892c4:	d101      	bne.n	80892ca <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xe6>

        mbedtls_md_hmac_reset ( &md_ctx );
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
 80892c6:	4689      	mov	r9, r1
 80892c8:	e7d5      	b.n	8089276 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x92>

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
 80892ca:	f818 0003 	ldrb.w	r0, [r8, r3]
 80892ce:	f809 0003 	strb.w	r0, [r9, r3]
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;

        for( j = 0; j < k; j++ )
 80892d2:	3301      	adds	r3, #1
 80892d4:	e7f5      	b.n	80892c2 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xde>
            dstbuf[i + j]  = h_i[j];
    }

    mbedtls_md_free( &md_ctx );
 80892d6:	f7fe f9f8 	bl	80876ca <mbedtls_md_free>

    mbedtls_zeroize( tmp, sizeof( tmp ) );
 80892da:	2180      	movs	r1, #128	; 0x80
 80892dc:	a816      	add	r0, sp, #88	; 0x58
 80892de:	f7ff ff25 	bl	808912c <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( h_i, sizeof( h_i ) );
 80892e2:	4640      	mov	r0, r8
 80892e4:	2140      	movs	r1, #64	; 0x40
 80892e6:	f7ff ff21 	bl	808912c <_ZL15mbedtls_zeroizePvj>

    return( 0 );
 80892ea:	2000      	movs	r0, #0
 80892ec:	e002      	b.n	80892f4 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x110>
    int ret;

    mbedtls_md_init( &md_ctx );

    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80892ee:	4803      	ldr	r0, [pc, #12]	; (80892fc <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x118>)
 80892f0:	e000      	b.n	80892f4 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x110>

    md_len = mbedtls_md_get_size( md_info );

    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80892f2:	4803      	ldr	r0, [pc, #12]	; (8089300 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x11c>)

    mbedtls_zeroize( tmp, sizeof( tmp ) );
    mbedtls_zeroize( h_i, sizeof( h_i ) );

    return( 0 );
}
 80892f4:	b037      	add	sp, #220	; 0xdc
 80892f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80892fa:	bf00      	nop
 80892fc:	ffff9400 	.word	0xffff9400
 8089300:	ffff8f00 	.word	0xffff8f00

08089304 <_ZL14tls_prf_sha256PKhjPKcS0_jPhj>:
#if defined(MBEDTLS_SHA256_C)
static int tls_prf_sha256( const unsigned char *secret, size_t slen,
                           const char *label,
                           const unsigned char *random, size_t rlen,
                           unsigned char *dstbuf, size_t dlen )
{
 8089304:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA256, secret, slen,
                             label, random, rlen, dstbuf, dlen ) );
 8089306:	9c08      	ldr	r4, [sp, #32]
 8089308:	9403      	str	r4, [sp, #12]
 808930a:	9c07      	ldr	r4, [sp, #28]
 808930c:	9402      	str	r4, [sp, #8]
 808930e:	9c06      	ldr	r4, [sp, #24]
 8089310:	e88d 0018 	stmia.w	sp, {r3, r4}
 8089314:	4613      	mov	r3, r2
 8089316:	460a      	mov	r2, r1
 8089318:	4601      	mov	r1, r0
 808931a:	2006      	movs	r0, #6
 808931c:	f7ff ff62 	bl	80891e4 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>
}
 8089320:	b004      	add	sp, #16
 8089322:	bd10      	pop	{r4, pc}

08089324 <_ZL14tls_prf_sha384PKhjPKcS0_jPhj>:
#if defined(MBEDTLS_SHA512_C)
static int tls_prf_sha384( const unsigned char *secret, size_t slen,
                           const char *label,
                           const unsigned char *random, size_t rlen,
                           unsigned char *dstbuf, size_t dlen )
{
 8089324:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA384, secret, slen,
                             label, random, rlen, dstbuf, dlen ) );
 8089326:	9c08      	ldr	r4, [sp, #32]
 8089328:	9403      	str	r4, [sp, #12]
 808932a:	9c07      	ldr	r4, [sp, #28]
 808932c:	9402      	str	r4, [sp, #8]
 808932e:	9c06      	ldr	r4, [sp, #24]
 8089330:	e88d 0018 	stmia.w	sp, {r3, r4}
 8089334:	4613      	mov	r3, r2
 8089336:	460a      	mov	r2, r1
 8089338:	4601      	mov	r1, r0
 808933a:	2007      	movs	r0, #7
 808933c:	f7ff ff52 	bl	80891e4 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>
}
 8089340:	b004      	add	sp, #16
 8089342:	bd10      	pop	{r4, pc}

08089344 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi>:
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
static void ssl_calc_finished_tls_sha384(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 8089344:	b5f0      	push	{r4, r5, r6, r7, lr}
    int len = 12;
    const char *sender;
    mbedtls_sha512_context sha512;
    unsigned char padbuf[48];

    mbedtls_ssl_session *session = ssl->session_negotiate;
 8089346:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
static void ssl_calc_finished_tls_sha384(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 8089348:	b0c7      	sub	sp, #284	; 0x11c
 808934a:	4604      	mov	r4, r0
 808934c:	460f      	mov	r7, r1
 808934e:	4616      	mov	r6, r2
    const char *sender;
    mbedtls_sha512_context sha512;
    unsigned char padbuf[48];

    mbedtls_ssl_session *session = ssl->session_negotiate;
    if( !session )
 8089350:	b905      	cbnz	r5, 8089354 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x10>
        session = ssl->session;
 8089352:	6a85      	ldr	r5, [r0, #40]	; 0x28

    mbedtls_sha512_init( &sha512 );
 8089354:	a810      	add	r0, sp, #64	; 0x40
 8089356:	f004 fa1f 	bl	808d798 <mbedtls_sha512_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha384" ) );

    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
 808935a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 808935c:	a810      	add	r0, sp, #64	; 0x40
 808935e:	3188      	adds	r1, #136	; 0x88
 8089360:	f004 fa28 	bl	808d7b4 <mbedtls_sha512_clone>
                   sha512.state, sizeof( sha512.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
 8089364:	4b10      	ldr	r3, [pc, #64]	; (80893a8 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x64>)
 8089366:	4911      	ldr	r1, [pc, #68]	; (80893ac <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x68>)

    mbedtls_sha512_finish_ret( &sha512, padbuf );
 8089368:	a810      	add	r0, sp, #64	; 0x40
                   sha512.state, sizeof( sha512.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
 808936a:	2e00      	cmp	r6, #0
 808936c:	bf0c      	ite	eq
 808936e:	461e      	moveq	r6, r3
 8089370:	460e      	movne	r6, r1

    mbedtls_sha512_finish_ret( &sha512, padbuf );
 8089372:	a904      	add	r1, sp, #16
 8089374:	f005 f948 	bl	808e608 <mbedtls_sha512_finish_ret>

    ssl->handshake->tls_prf( session->master, 48, sender,
 8089378:	6b23      	ldr	r3, [r4, #48]	; 0x30
                             padbuf, 48, buf, len );
 808937a:	220c      	movs	r2, #12
 808937c:	2430      	movs	r4, #48	; 0x30
 808937e:	9202      	str	r2, [sp, #8]
 8089380:	9701      	str	r7, [sp, #4]
 8089382:	9400      	str	r4, [sp, #0]
 8089384:	4632      	mov	r2, r6
 8089386:	4621      	mov	r1, r4
 8089388:	f8d3 716c 	ldr.w	r7, [r3, #364]	; 0x16c
 808938c:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 8089390:	ab04      	add	r3, sp, #16
 8089392:	47b8      	blx	r7

    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );

    mbedtls_sha512_free( &sha512 );
 8089394:	a810      	add	r0, sp, #64	; 0x40
 8089396:	f004 fa03 	bl	808d7a0 <mbedtls_sha512_free>

    mbedtls_zeroize(  padbuf, sizeof( padbuf ) );
 808939a:	4621      	mov	r1, r4
 808939c:	a804      	add	r0, sp, #16
 808939e:	f7ff fec5 	bl	808912c <_ZL15mbedtls_zeroizePvj>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
}
 80893a2:	b047      	add	sp, #284	; 0x11c
 80893a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80893a6:	bf00      	nop
 80893a8:	080944a9 	.word	0x080944a9
 80893ac:	080944b9 	.word	0x080944b9

080893b0 <_ZL26ssl_calc_verify_tls_sha384P19mbedtls_ssl_contextPh>:
}
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
void ssl_calc_verify_tls_sha384( mbedtls_ssl_context *ssl, unsigned char hash[48] )
{
 80893b0:	b530      	push	{r4, r5, lr}
 80893b2:	4605      	mov	r5, r0
 80893b4:	460c      	mov	r4, r1
 80893b6:	b0b7      	sub	sp, #220	; 0xdc
    mbedtls_sha512_context sha512;

    mbedtls_sha512_init( &sha512 );
 80893b8:	4668      	mov	r0, sp
 80893ba:	f004 f9ed 	bl	808d798 <mbedtls_sha512_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha384" ) );

    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
 80893be:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80893c0:	4668      	mov	r0, sp
 80893c2:	3188      	adds	r1, #136	; 0x88
 80893c4:	f004 f9f6 	bl	808d7b4 <mbedtls_sha512_clone>
    mbedtls_sha512_finish_ret( &sha512, hash );
 80893c8:	4621      	mov	r1, r4
 80893ca:	4668      	mov	r0, sp
 80893cc:	f005 f91c 	bl	808e608 <mbedtls_sha512_finish_ret>

    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 48 );
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );

    mbedtls_sha512_free( &sha512 );
 80893d0:	4668      	mov	r0, sp
 80893d2:	f004 f9e5 	bl	808d7a0 <mbedtls_sha512_free>

    return;
}
 80893d6:	b037      	add	sp, #220	; 0xdc
 80893d8:	bd30      	pop	{r4, r5, pc}
	...

080893dc <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context>:

/* Append a new keycert entry to a (possibly empty) list */
static int ssl_append_key_cert( mbedtls_ssl_key_cert **head,
                                mbedtls_x509_crt *cert,
                                mbedtls_pk_context *key )
{
 80893dc:	b570      	push	{r4, r5, r6, lr}
 80893de:	4604      	mov	r4, r0
 80893e0:	460e      	mov	r6, r1
    mbedtls_ssl_key_cert *new_cert;

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
 80893e2:	2001      	movs	r0, #1
 80893e4:	210c      	movs	r1, #12

/* Append a new keycert entry to a (possibly empty) list */
static int ssl_append_key_cert( mbedtls_ssl_key_cert **head,
                                mbedtls_x509_crt *cert,
                                mbedtls_pk_context *key )
{
 80893e6:	4615      	mov	r5, r2
    mbedtls_ssl_key_cert *new_cert;

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
 80893e8:	f008 ff8a 	bl	8092300 <calloc>
    if( new_cert == NULL )
 80893ec:	b178      	cbz	r0, 808940e <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x32>
    new_cert->cert = cert;
    new_cert->key  = key;
    new_cert->next = NULL;

    /* Update head is the list was null, else add to the end */
    if( *head == NULL )
 80893ee:	6822      	ldr	r2, [r4, #0]
    if( new_cert == NULL )
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

    new_cert->cert = cert;
    new_cert->key  = key;
    new_cert->next = NULL;
 80893f0:	2300      	movs	r3, #0

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
    if( new_cert == NULL )
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

    new_cert->cert = cert;
 80893f2:	6006      	str	r6, [r0, #0]
    new_cert->key  = key;
 80893f4:	6045      	str	r5, [r0, #4]
    new_cert->next = NULL;
 80893f6:	6083      	str	r3, [r0, #8]

    /* Update head is the list was null, else add to the end */
    if( *head == NULL )
 80893f8:	b912      	cbnz	r2, 8089400 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x24>
    {
        *head = new_cert;
 80893fa:	6020      	str	r0, [r4, #0]
        while( cur->next != NULL )
            cur = cur->next;
        cur->next = new_cert;
    }

    return( 0 );
 80893fc:	4610      	mov	r0, r2
 80893fe:	bd70      	pop	{r4, r5, r6, pc}
        *head = new_cert;
    }
    else
    {
        mbedtls_ssl_key_cert *cur = *head;
        while( cur->next != NULL )
 8089400:	6893      	ldr	r3, [r2, #8]
 8089402:	b10b      	cbz	r3, 8089408 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x2c>
 8089404:	461a      	mov	r2, r3
 8089406:	e7fb      	b.n	8089400 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x24>
            cur = cur->next;
        cur->next = new_cert;
 8089408:	6090      	str	r0, [r2, #8]
    }

    return( 0 );
 808940a:	4618      	mov	r0, r3
 808940c:	bd70      	pop	{r4, r5, r6, pc}
{
    mbedtls_ssl_key_cert *new_cert;

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
    if( new_cert == NULL )
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 808940e:	4801      	ldr	r0, [pc, #4]	; (8089414 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x38>)
            cur = cur->next;
        cur->next = new_cert;
    }

    return( 0 );
}
 8089410:	bd70      	pop	{r4, r5, r6, pc}
 8089412:	bf00      	nop
 8089414:	ffff8100 	.word	0xffff8100

08089418 <_ZL26ssl_update_checksum_sha256P19mbedtls_ssl_contextPKhj>:
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_update_checksum_sha256( mbedtls_ssl_context *ssl,
                                        const unsigned char *buf, size_t len )
{
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
 8089418:	6b00      	ldr	r0, [r0, #48]	; 0x30
 808941a:	3018      	adds	r0, #24
 808941c:	f7f9 b9b2 	b.w	8082784 <mbedtls_sha256_update_ret>

08089420 <_ZL26ssl_update_checksum_sha384P19mbedtls_ssl_contextPKhj>:

#if defined(MBEDTLS_SHA512_C)
static void ssl_update_checksum_sha384( mbedtls_ssl_context *ssl,
                                        const unsigned char *buf, size_t len )
{
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
 8089420:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8089422:	3088      	adds	r0, #136	; 0x88
 8089424:	f005 b8a8 	b.w	808e578 <mbedtls_sha512_update_ret>

08089428 <_ZL25ssl_update_checksum_startP19mbedtls_ssl_contextPKhj>:
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
}

static void ssl_update_checksum_start( mbedtls_ssl_context *ssl,
                                       const unsigned char *buf, size_t len )
{
 8089428:	b570      	push	{r4, r5, r6, lr}
 808942a:	4604      	mov	r4, r0
 808942c:	460d      	mov	r5, r1
 808942e:	4616      	mov	r6, r2
     mbedtls_md5_update_ret( &ssl->handshake->fin_md5 , buf, len );
    mbedtls_sha1_update_ret( &ssl->handshake->fin_sha1, buf, len );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
 8089430:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8089432:	3018      	adds	r0, #24
 8089434:	f7f9 f9a6 	bl	8082784 <mbedtls_sha256_update_ret>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
 8089438:	6b20      	ldr	r0, [r4, #48]	; 0x30
 808943a:	4632      	mov	r2, r6
 808943c:	4629      	mov	r1, r5
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
}
 808943e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
 8089442:	3088      	adds	r0, #136	; 0x88
 8089444:	f005 b898 	b.w	808e578 <mbedtls_sha512_update_ret>

08089448 <mbedtls_ssl_derive_keys>:
static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
{
 8089448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t mac_key_len;
    size_t iv_copy_len;
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
 808944c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
 808944e:	6c04      	ldr	r4, [r0, #64]	; 0x40
static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
{
 8089450:	b0d7      	sub	sp, #348	; 0x15c
    size_t mac_key_len;
    size_t iv_copy_len;
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
 8089452:	9305      	str	r3, [sp, #20]
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );

    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
 8089454:	6823      	ldr	r3, [r4, #0]
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;
 8089456:	6b05      	ldr	r5, [r0, #48]	; 0x30
static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
{
 8089458:	4680      	mov	r8, r0
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );

    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
 808945a:	7a18      	ldrb	r0, [r3, #8]
 808945c:	f7f9 fcc8 	bl	8082df0 <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
 8089460:	4606      	mov	r6, r0
 8089462:	b908      	cbnz	r0, 8089468 <mbedtls_ssl_derive_keys+0x20>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "cipher info for %d not found",
                            transform->ciphersuite_info->cipher ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8089464:	48a5      	ldr	r0, [pc, #660]	; (80896fc <mbedtls_ssl_derive_keys+0x2b4>)
 8089466:	e145      	b.n	80896f4 <mbedtls_ssl_derive_keys+0x2ac>
    }

    md_info = mbedtls_md_info_from_type( transform->ciphersuite_info->mac );
 8089468:	6823      	ldr	r3, [r4, #0]
 808946a:	7a58      	ldrb	r0, [r3, #9]
 808946c:	f7fe f91c 	bl	80876a8 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8089470:	4682      	mov	sl, r0
 8089472:	2800      	cmp	r0, #0
 8089474:	d0f6      	beq.n	8089464 <mbedtls_ssl_derive_keys+0x1c>
    }
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
 8089476:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808947a:	2b03      	cmp	r3, #3
 808947c:	d001      	beq.n	8089482 <mbedtls_ssl_derive_keys+0x3a>
    else
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 808947e:	48a0      	ldr	r0, [pc, #640]	; (8089700 <mbedtls_ssl_derive_keys+0x2b8>)
 8089480:	e138      	b.n	80896f4 <mbedtls_ssl_derive_keys+0x2ac>
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
        transform->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
 8089482:	6823      	ldr	r3, [r4, #0]
    }
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
 8089484:	7a5b      	ldrb	r3, [r3, #9]
 8089486:	2b07      	cmp	r3, #7
 8089488:	d107      	bne.n	808949a <mbedtls_ssl_derive_keys+0x52>
        transform->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
    {
        handshake->tls_prf = tls_prf_sha384;
 808948a:	4b9e      	ldr	r3, [pc, #632]	; (8089704 <mbedtls_ssl_derive_keys+0x2bc>)
 808948c:	f8c5 316c 	str.w	r3, [r5, #364]	; 0x16c
        handshake->calc_verify = ssl_calc_verify_tls_sha384;
 8089490:	4b9d      	ldr	r3, [pc, #628]	; (8089708 <mbedtls_ssl_derive_keys+0x2c0>)
 8089492:	f8c5 3164 	str.w	r3, [r5, #356]	; 0x164
        handshake->calc_finished = ssl_calc_finished_tls_sha384;
 8089496:	4b9d      	ldr	r3, [pc, #628]	; (808970c <mbedtls_ssl_derive_keys+0x2c4>)
 8089498:	e006      	b.n	80894a8 <mbedtls_ssl_derive_keys+0x60>
    else
#endif
#if defined(MBEDTLS_SHA256_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
    {
        handshake->tls_prf = tls_prf_sha256;
 808949a:	4b9d      	ldr	r3, [pc, #628]	; (8089710 <mbedtls_ssl_derive_keys+0x2c8>)
 808949c:	f8c5 316c 	str.w	r3, [r5, #364]	; 0x16c
        handshake->calc_verify = ssl_calc_verify_tls_sha256;
 80894a0:	4b9c      	ldr	r3, [pc, #624]	; (8089714 <mbedtls_ssl_derive_keys+0x2cc>)
 80894a2:	f8c5 3164 	str.w	r3, [r5, #356]	; 0x164
        handshake->calc_finished = ssl_calc_finished_tls_sha256;
 80894a6:	4b9c      	ldr	r3, [pc, #624]	; (8089718 <mbedtls_ssl_derive_keys+0x2d0>)
 80894a8:	f8c5 3168 	str.w	r3, [r5, #360]	; 0x168
     *     MD5( premaster + SHA1( 'CCC' + premaster + randbytes ) )
     *
     * TLSv1+:
     *   master = PRF( premaster, "master secret", randbytes )[0..47]
     */
    if( handshake->resume == 0 )
 80894ac:	f8d5 31e4 	ldr.w	r3, [r5, #484]	; 0x1e4
 80894b0:	f505 7bda 	add.w	fp, r5, #436	; 0x1b4
 80894b4:	f505 79ba 	add.w	r9, r5, #372	; 0x174
 80894b8:	b9ab      	cbnz	r3, 80894e6 <mbedtls_ssl_derive_keys+0x9e>
        else
#endif
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
                                  "master secret",
                                  handshake->randbytes, 64,
                                  session->master, 48 );
 80894ba:	2330      	movs	r3, #48	; 0x30
 80894bc:	9302      	str	r3, [sp, #8]
            }

        }
        else
#endif
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 80894be:	9b05      	ldr	r3, [sp, #20]
                                  "master secret",
                                  handshake->randbytes, 64,
                                  session->master, 48 );
 80894c0:	4a96      	ldr	r2, [pc, #600]	; (808971c <mbedtls_ssl_derive_keys+0x2d4>)
            }

        }
        else
#endif
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 80894c2:	332c      	adds	r3, #44	; 0x2c
                                  "master secret",
                                  handshake->randbytes, 64,
                                  session->master, 48 );
 80894c4:	9301      	str	r3, [sp, #4]
 80894c6:	2340      	movs	r3, #64	; 0x40
 80894c8:	9300      	str	r3, [sp, #0]
 80894ca:	f8d5 1170 	ldr.w	r1, [r5, #368]	; 0x170
 80894ce:	464b      	mov	r3, r9
 80894d0:	4658      	mov	r0, fp
 80894d2:	f8d5 716c 	ldr.w	r7, [r5, #364]	; 0x16c
 80894d6:	47b8      	blx	r7
        if( ret != 0 )
 80894d8:	2800      	cmp	r0, #0
 80894da:	f040 810b 	bne.w	80896f4 <mbedtls_ssl_derive_keys+0x2ac>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
            return( ret );
        }

        mbedtls_zeroize( handshake->premaster, sizeof(handshake->premaster) );
 80894de:	2130      	movs	r1, #48	; 0x30
 80894e0:	4658      	mov	r0, fp
 80894e2:	f7ff fe23 	bl	808912c <_ZL15mbedtls_zeroizePvj>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "no premaster (session resumed)" ) );

    /*
     * Swap the client and server random values.
     */
    memcpy( tmp, handshake->randbytes, 64 );
 80894e6:	464b      	mov	r3, r9
 80894e8:	af06      	add	r7, sp, #24
 80894ea:	463a      	mov	r2, r7
 80894ec:	6818      	ldr	r0, [r3, #0]
 80894ee:	6859      	ldr	r1, [r3, #4]
 80894f0:	3308      	adds	r3, #8
 80894f2:	c203      	stmia	r2!, {r0, r1}
 80894f4:	455b      	cmp	r3, fp
 80894f6:	4617      	mov	r7, r2
 80894f8:	d1f7      	bne.n	80894ea <mbedtls_ssl_derive_keys+0xa2>
    memcpy( handshake->randbytes, tmp + 32, 32 );
 80894fa:	464f      	mov	r7, r9
 80894fc:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
 8089500:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
 8089504:	4673      	mov	r3, lr
 8089506:	cb03      	ldmia	r3!, {r0, r1}
 8089508:	455b      	cmp	r3, fp
 808950a:	6038      	str	r0, [r7, #0]
 808950c:	6079      	str	r1, [r7, #4]
 808950e:	469e      	mov	lr, r3
 8089510:	f107 0708 	add.w	r7, r7, #8
 8089514:	d1f6      	bne.n	8089504 <mbedtls_ssl_derive_keys+0xbc>
    memcpy( handshake->randbytes + 32, tmp, 32 );
 8089516:	f10d 0e18 	add.w	lr, sp, #24
 808951a:	f505 77ca 	add.w	r7, r5, #404	; 0x194
 808951e:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 8089522:	4673      	mov	r3, lr
 8089524:	cb03      	ldmia	r3!, {r0, r1}
 8089526:	4563      	cmp	r3, ip
 8089528:	6038      	str	r0, [r7, #0]
 808952a:	6079      	str	r1, [r7, #4]
 808952c:	469e      	mov	lr, r3
 808952e:	f107 0708 	add.w	r7, r7, #8
 8089532:	d1f6      	bne.n	8089522 <mbedtls_ssl_derive_keys+0xda>
    mbedtls_zeroize( tmp, sizeof( tmp ) );
 8089534:	2140      	movs	r1, #64	; 0x40
 8089536:	a806      	add	r0, sp, #24
 8089538:	f7ff fdf8 	bl	808912c <_ZL15mbedtls_zeroizePvj>
     *      ...
     *
     *  TLSv1:
     *    key block = PRF( master, "key expansion", randbytes )
     */
    ret = handshake->tls_prf( session->master, 48, "key expansion",
 808953c:	9f05      	ldr	r7, [sp, #20]
                              handshake->randbytes, 64, keyblk, 256 );
 808953e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8089542:	f8cd b004 	str.w	fp, [sp, #4]
 8089546:	f04f 0b40 	mov.w	fp, #64	; 0x40
 808954a:	9302      	str	r3, [sp, #8]
     *      ...
     *
     *  TLSv1:
     *    key block = PRF( master, "key expansion", randbytes )
     */
    ret = handshake->tls_prf( session->master, 48, "key expansion",
 808954c:	372c      	adds	r7, #44	; 0x2c
                              handshake->randbytes, 64, keyblk, 256 );
 808954e:	f8cd b000 	str.w	fp, [sp]
 8089552:	f8d5 516c 	ldr.w	r5, [r5, #364]	; 0x16c
 8089556:	464b      	mov	r3, r9
 8089558:	4a71      	ldr	r2, [pc, #452]	; (8089720 <mbedtls_ssl_derive_keys+0x2d8>)
 808955a:	2130      	movs	r1, #48	; 0x30
 808955c:	4638      	mov	r0, r7
 808955e:	47a8      	blx	r5
    if( ret != 0 )
 8089560:	2800      	cmp	r0, #0
 8089562:	f040 80c7 	bne.w	80896f4 <mbedtls_ssl_derive_keys+0x2ac>
                   mbedtls_ssl_get_ciphersuite_name( session->ciphersuite ) ) );
    MBEDTLS_SSL_DEBUG_BUF( 3, "master secret", session->master, 48 );
    MBEDTLS_SSL_DEBUG_BUF( 4, "random bytes", handshake->randbytes, 64 );
    MBEDTLS_SSL_DEBUG_BUF( 4, "key block", keyblk, 256 );

    mbedtls_zeroize( handshake->randbytes, sizeof( handshake->randbytes ) );
 8089566:	4659      	mov	r1, fp
 8089568:	4648      	mov	r0, r9
 808956a:	f7ff fddf 	bl	808912c <_ZL15mbedtls_zeroizePvj>

    /*
     * Determine the appropriate key, IV and MAC length.
     */

    transform->keylen = cipher_info->key_bitlen / 8;
 808956e:	6873      	ldr	r3, [r6, #4]
 8089570:	08db      	lsrs	r3, r3, #3
 8089572:	6063      	str	r3, [r4, #4]

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
 8089574:	7873      	ldrb	r3, [r6, #1]
 8089576:	2b06      	cmp	r3, #6
 8089578:	d001      	beq.n	808957e <mbedtls_ssl_derive_keys+0x136>
 808957a:	2b08      	cmp	r3, #8
 808957c:	d10f      	bne.n	808959e <mbedtls_ssl_derive_keys+0x156>
        cipher_info->mode == MBEDTLS_MODE_CCM )
    {
        transform->maclen = 0;
        mac_key_len = 0;

        transform->ivlen = 12;
 808957e:	220c      	movs	r2, #12
 8089580:	60e2      	str	r2, [r4, #12]
        transform->fixed_ivlen = 4;
 8089582:	2204      	movs	r2, #4
    transform->keylen = cipher_info->key_bitlen / 8;

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
        cipher_info->mode == MBEDTLS_MODE_CCM )
    {
        transform->maclen = 0;
 8089584:	2300      	movs	r3, #0
        mac_key_len = 0;

        transform->ivlen = 12;
        transform->fixed_ivlen = 4;
 8089586:	6122      	str	r2, [r4, #16]

        /* Minimum length is expicit IV + tag */
        transform->minlen = transform->ivlen - transform->fixed_ivlen
                            + ( transform->ciphersuite_info->flags &
 8089588:	6822      	ldr	r2, [r4, #0]
    transform->keylen = cipher_info->key_bitlen / 8;

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
        cipher_info->mode == MBEDTLS_MODE_CCM )
    {
        transform->maclen = 0;
 808958a:	6163      	str	r3, [r4, #20]
        transform->ivlen = 12;
        transform->fixed_ivlen = 4;

        /* Minimum length is expicit IV + tag */
        transform->minlen = transform->ivlen - transform->fixed_ivlen
                            + ( transform->ciphersuite_info->flags &
 808958c:	7f12      	ldrb	r2, [r2, #28]

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
        cipher_info->mode == MBEDTLS_MODE_CCM )
    {
        transform->maclen = 0;
        mac_key_len = 0;
 808958e:	469a      	mov	sl, r3
        transform->ivlen = 12;
        transform->fixed_ivlen = 4;

        /* Minimum length is expicit IV + tag */
        transform->minlen = transform->ivlen - transform->fixed_ivlen
                            + ( transform->ciphersuite_info->flags &
 8089590:	f012 0f02 	tst.w	r2, #2
                                MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16 );
 8089594:	bf14      	ite	ne
 8089596:	2210      	movne	r2, #16
 8089598:	2218      	moveq	r2, #24
 808959a:	60a2      	str	r2, [r4, #8]
 808959c:	e01d      	b.n	80895da <mbedtls_ssl_derive_keys+0x192>
    }
    else
    {
        /* Initialize HMAC contexts */
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
 808959e:	2201      	movs	r2, #1
 80895a0:	4651      	mov	r1, sl
 80895a2:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80895a6:	f7fe f8b1 	bl	808770c <mbedtls_md_setup>
 80895aa:	2800      	cmp	r0, #0
 80895ac:	f040 80a2 	bne.w	80896f4 <mbedtls_ssl_derive_keys+0x2ac>
 80895b0:	2201      	movs	r2, #1
 80895b2:	4651      	mov	r1, sl
 80895b4:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80895b8:	f7fe f8a8 	bl	808770c <mbedtls_md_setup>
 80895bc:	2800      	cmp	r0, #0
 80895be:	f040 8099 	bne.w	80896f4 <mbedtls_ssl_derive_keys+0x2ac>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
            return( ret );
        }

        /* Get MAC length */
        mac_key_len = mbedtls_md_get_size( md_info );
 80895c2:	4650      	mov	r0, sl
 80895c4:	f7fe f9b4 	bl	8087930 <mbedtls_md_get_size>
        transform->maclen = mac_key_len;
 80895c8:	6160      	str	r0, [r4, #20]
#endif
        }
#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */

        /* IV length */
        transform->ivlen = cipher_info->iv_size;
 80895ca:	68f1      	ldr	r1, [r6, #12]
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
            return( ret );
        }

        /* Get MAC length */
        mac_key_len = mbedtls_md_get_size( md_info );
 80895cc:	4682      	mov	sl, r0
#endif
        }
#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */

        /* IV length */
        transform->ivlen = cipher_info->iv_size;
 80895ce:	60e1      	str	r1, [r4, #12]

        /* Minimum length */
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
 80895d0:	7873      	ldrb	r3, [r6, #1]
 80895d2:	2b07      	cmp	r3, #7
 80895d4:	d17f      	bne.n	80896d6 <mbedtls_ssl_derive_keys+0x28e>
            transform->minlen = transform->maclen;
 80895d6:	f8c4 a008 	str.w	sl, [r4, #8]

    /*
     * Finally setup the cipher contexts, IVs and MAC secrets.
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 80895da:	f8d8 3000 	ldr.w	r3, [r8]
 80895de:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80895e2:	07db      	lsls	r3, r3, #31
 80895e4:	f53f af4b 	bmi.w	808947e <mbedtls_ssl_derive_keys+0x36>
    {
        key1 = keyblk + mac_key_len * 2;
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
 80895e8:	6863      	ldr	r3, [r4, #4]
     * Finally setup the cipher contexts, IVs and MAC secrets.
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
    {
        key1 = keyblk + mac_key_len * 2;
 80895ea:	ea4f 094a 	mov.w	r9, sl, lsl #1
        mac_dec = keyblk + mac_key_len;

        /*
         * This is not used in TLS v1.1.
         */
        iv_copy_len = ( transform->fixed_ivlen ) ?
 80895ee:	f8d4 b010 	ldr.w	fp, [r4, #16]
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
    {
        key1 = keyblk + mac_key_len * 2;
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
 80895f2:	eb09 0503 	add.w	r5, r9, r3
 80895f6:	aa16      	add	r2, sp, #88	; 0x58
 80895f8:	4415      	add	r5, r2

        /*
         * This is not used in TLS v1.1.
         */
        iv_copy_len = ( transform->fixed_ivlen ) ?
                            transform->fixed_ivlen : transform->ivlen;
 80895fa:	f1bb 0f00 	cmp.w	fp, #0
 80895fe:	d101      	bne.n	8089604 <mbedtls_ssl_derive_keys+0x1bc>
 8089600:	f8d4 b00c 	ldr.w	fp, [r4, #12]
        memcpy( transform->iv_enc, key2 + transform->keylen,  iv_copy_len );
 8089604:	18e9      	adds	r1, r5, r3
 8089606:	465a      	mov	r2, fp
 8089608:	f104 0018 	add.w	r0, r4, #24
 808960c:	9305      	str	r3, [sp, #20]
 808960e:	f008 fe9c 	bl	809234a <memcpy>
        memcpy( transform->iv_dec, key2 + transform->keylen + iv_copy_len,
                iv_copy_len );
 8089612:	9b05      	ldr	r3, [sp, #20]
 8089614:	465a      	mov	r2, fp
 8089616:	eb0b 0103 	add.w	r1, fp, r3
 808961a:	4429      	add	r1, r5
 808961c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8089620:	f008 fe93 	bl	809234a <memcpy>
    }
    else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 8089624:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8089628:	2b00      	cmp	r3, #0
 808962a:	f77f af28 	ble.w	808947e <mbedtls_ssl_derive_keys+0x36>
    {
        /* For HMAC-based ciphersuites, initialize the HMAC transforms.
           For AEAD-based ciphersuites, there is nothing to do here. */
        if( mac_key_len != 0 )
 808962e:	f1ba 0f00 	cmp.w	sl, #0
 8089632:	d00d      	beq.n	8089650 <mbedtls_ssl_derive_keys+0x208>
        {
            mbedtls_md_hmac_starts( &transform->md_ctx_enc, mac_enc, mac_key_len );
 8089634:	4652      	mov	r2, sl
 8089636:	a916      	add	r1, sp, #88	; 0x58
 8089638:	f104 0038 	add.w	r0, r4, #56	; 0x38
 808963c:	f7fe f8b6 	bl	80877ac <mbedtls_md_hmac_starts>
            mbedtls_md_hmac_starts( &transform->md_ctx_dec, mac_dec, mac_key_len );
 8089640:	ab16      	add	r3, sp, #88	; 0x58
 8089642:	4652      	mov	r2, sl
 8089644:	eb03 010a 	add.w	r1, r3, sl
 8089648:	f104 0044 	add.w	r0, r4, #68	; 0x44
 808964c:	f7fe f8ae 	bl	80877ac <mbedtls_md_hmac_starts>
        }
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */

#if defined(MBEDTLS_SSL_EXPORT_KEYS)
    if( ssl->conf->f_export_keys != NULL )
 8089650:	f8d8 0000 	ldr.w	r0, [r8]
 8089654:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8089658:	f1b8 0f00 	cmp.w	r8, #0
 808965c:	d008      	beq.n	8089670 <mbedtls_ssl_derive_keys+0x228>
    {
        ssl->conf->f_export_keys( ssl->conf->p_export_keys,
                                  session->master, keyblk,
                                  mac_key_len, transform->keylen,
                                  iv_copy_len );
 808965e:	f8cd b004 	str.w	fp, [sp, #4]
 8089662:	6863      	ldr	r3, [r4, #4]
 8089664:	aa16      	add	r2, sp, #88	; 0x58
 8089666:	9300      	str	r3, [sp, #0]
 8089668:	4639      	mov	r1, r7
 808966a:	4653      	mov	r3, sl
 808966c:	6c00      	ldr	r0, [r0, #64]	; 0x40
 808966e:	47c0      	blx	r8
    }
#endif

    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_enc,
 8089670:	f104 0750 	add.w	r7, r4, #80	; 0x50
 8089674:	4631      	mov	r1, r6
 8089676:	4638      	mov	r0, r7
 8089678:	f7f9 fdb0 	bl	80831dc <mbedtls_cipher_setup>
 808967c:	2800      	cmp	r0, #0
 808967e:	d139      	bne.n	80896f4 <mbedtls_ssl_derive_keys+0x2ac>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
        return( ret );
    }

    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_dec,
 8089680:	3490      	adds	r4, #144	; 0x90
 8089682:	4631      	mov	r1, r6
 8089684:	4620      	mov	r0, r4
 8089686:	f7f9 fda9 	bl	80831dc <mbedtls_cipher_setup>
 808968a:	bb98      	cbnz	r0, 80896f4 <mbedtls_ssl_derive_keys+0x2ac>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
        return( ret );
    }

    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_enc, key1,
 808968c:	a916      	add	r1, sp, #88	; 0x58
 808968e:	2301      	movs	r3, #1
 8089690:	6872      	ldr	r2, [r6, #4]
 8089692:	4449      	add	r1, r9
 8089694:	4638      	mov	r0, r7
 8089696:	f7f9 fbe3 	bl	8082e60 <mbedtls_cipher_setkey>
 808969a:	bb58      	cbnz	r0, 80896f4 <mbedtls_ssl_derive_keys+0x2ac>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
        return( ret );
    }

    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_dec, key2,
 808969c:	4603      	mov	r3, r0
 808969e:	6872      	ldr	r2, [r6, #4]
 80896a0:	4629      	mov	r1, r5
 80896a2:	4620      	mov	r0, r4
 80896a4:	f7f9 fbdc 	bl	8082e60 <mbedtls_cipher_setkey>
 80896a8:	bb20      	cbnz	r0, 80896f4 <mbedtls_ssl_derive_keys+0x2ac>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
        return( ret );
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( cipher_info->mode == MBEDTLS_MODE_CBC )
 80896aa:	7873      	ldrb	r3, [r6, #1]
 80896ac:	2b02      	cmp	r3, #2
 80896ae:	d006      	beq.n	80896be <mbedtls_ssl_derive_keys+0x276>
            return( ret );
        }
    }
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    mbedtls_zeroize( keyblk, sizeof( keyblk ) );
 80896b0:	a816      	add	r0, sp, #88	; 0x58
 80896b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80896b6:	f7ff fd39 	bl	808912c <_ZL15mbedtls_zeroizePvj>
    }
#endif /* MBEDTLS_ZLIB_SUPPORT */

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= derive keys" ) );

    return( 0 );
 80896ba:	2000      	movs	r0, #0
 80896bc:	e01a      	b.n	80896f4 <mbedtls_ssl_derive_keys+0x2ac>
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( cipher_info->mode == MBEDTLS_MODE_CBC )
    {
        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_enc,
 80896be:	2104      	movs	r1, #4
 80896c0:	4638      	mov	r0, r7
 80896c2:	f7f9 fd4d 	bl	8083160 <mbedtls_cipher_set_padding_mode>
 80896c6:	b9a8      	cbnz	r0, 80896f4 <mbedtls_ssl_derive_keys+0x2ac>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_set_padding_mode", ret );
            return( ret );
        }

        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_dec,
 80896c8:	2104      	movs	r1, #4
 80896ca:	4620      	mov	r0, r4
 80896cc:	f7f9 fd48 	bl	8083160 <mbedtls_cipher_set_padding_mode>
 80896d0:	2800      	cmp	r0, #0
 80896d2:	d0ed      	beq.n	80896b0 <mbedtls_ssl_derive_keys+0x268>
 80896d4:	e00e      	b.n	80896f4 <mbedtls_ssl_derive_keys+0x2ac>
            }
            else
#endif
            {
                transform->minlen = transform->maclen
                                  + cipher_info->block_size
 80896d6:	6973      	ldr	r3, [r6, #20]
                                  - transform->maclen % cipher_info->block_size;
 80896d8:	fbba f2f3 	udiv	r2, sl, r3
 80896dc:	fb03 3302 	mla	r3, r3, r2, r3
 80896e0:	60a3      	str	r3, [r4, #8]
                ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_1 )
                ; /* No need to adjust minlen */
            else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
 80896e2:	f8d8 200c 	ldr.w	r2, [r8, #12]
 80896e6:	3a02      	subs	r2, #2
 80896e8:	2a01      	cmp	r2, #1
 80896ea:	f63f aec8 	bhi.w	808947e <mbedtls_ssl_derive_keys+0x36>
                ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
            {
                transform->minlen += transform->ivlen;
 80896ee:	440b      	add	r3, r1
 80896f0:	60a3      	str	r3, [r4, #8]
 80896f2:	e772      	b.n	80895da <mbedtls_ssl_derive_keys+0x192>
#endif /* MBEDTLS_ZLIB_SUPPORT */

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= derive keys" ) );

    return( 0 );
}
 80896f4:	b057      	add	sp, #348	; 0x15c
 80896f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80896fa:	bf00      	nop
 80896fc:	ffff8f00 	.word	0xffff8f00
 8089700:	ffff9400 	.word	0xffff9400
 8089704:	08089325 	.word	0x08089325
 8089708:	080893b1 	.word	0x080893b1
 808970c:	08089345 	.word	0x08089345
 8089710:	08089305 	.word	0x08089305
 8089714:	080891b9 	.word	0x080891b9
 8089718:	0808914d 	.word	0x0808914d
 808971c:	080944c9 	.word	0x080944c9
 8089720:	080944d7 	.word	0x080944d7

08089724 <mbedtls_ssl_fetch_input>:
 *
 * For DTLS, it is up to the caller to set ssl->next_record_offset when
 * they're done reading a record.
 */
int mbedtls_ssl_fetch_input( mbedtls_ssl_context *ssl, size_t nb_want )
{
 8089724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret;
    size_t len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
 8089726:	6943      	ldr	r3, [r0, #20]
 *
 * For DTLS, it is up to the caller to set ssl->next_record_offset when
 * they're done reading a record.
 */
int mbedtls_ssl_fetch_input( mbedtls_ssl_context *ssl, size_t nb_want )
{
 8089728:	4604      	mov	r4, r0
 808972a:	460e      	mov	r6, r1
    int ret;
    size_t len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
 808972c:	b90b      	cbnz	r3, 8089732 <mbedtls_ssl_fetch_input+0xe>
 808972e:	6983      	ldr	r3, [r0, #24]
 8089730:	b19b      	cbz	r3, 808975a <mbedtls_ssl_fetch_input+0x36>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    }

    if( nb_want > MBEDTLS_SSL_BUFFER_LEN - (size_t)( ssl->in_hdr - ssl->in_buf ) )
 8089732:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8089734:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8089736:	1a9b      	subs	r3, r3, r2
 8089738:	f5c3 5305 	rsb	r3, r3, #8512	; 0x2140
 808973c:	330d      	adds	r3, #13
 808973e:	42b3      	cmp	r3, r6
 8089740:	d30b      	bcc.n	808975a <mbedtls_ssl_fetch_input+0x36>
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                       ssl->in_left, nb_want ) );

        while( ssl->in_left < nb_want )
 8089742:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8089744:	42ae      	cmp	r6, r5
 8089746:	d90a      	bls.n	808975e <mbedtls_ssl_fetch_input+0x3a>
/*
 * Return -1 is timer is expired, 0 if it isn't.
 */
static int ssl_check_timer( mbedtls_ssl_context *ssl )
{
    if( ssl->f_get_timer == NULL )
 8089748:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                       ssl->in_left, nb_want ) );

        while( ssl->in_left < nb_want )
        {
            len = nb_want - ssl->in_left;
 808974a:	1b75      	subs	r5, r6, r5
/*
 * Return -1 is timer is expired, 0 if it isn't.
 */
static int ssl_check_timer( mbedtls_ssl_context *ssl )
{
    if( ssl->f_get_timer == NULL )
 808974c:	b14b      	cbz	r3, 8089762 <mbedtls_ssl_fetch_input+0x3e>
        return( 0 );

    if( ssl->f_get_timer( ssl->p_timer ) == 2 )
 808974e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8089750:	4798      	blx	r3
 8089752:	2802      	cmp	r0, #2
 8089754:	d105      	bne.n	8089762 <mbedtls_ssl_fetch_input+0x3e>
        while( ssl->in_left < nb_want )
        {
            len = nb_want - ssl->in_left;

            if( ssl_check_timer( ssl ) != 0 )
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
 8089756:	4812      	ldr	r0, [pc, #72]	; (80897a0 <mbedtls_ssl_fetch_input+0x7c>)
 8089758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 808975a:	4812      	ldr	r0, [pc, #72]	; (80897a4 <mbedtls_ssl_fetch_input+0x80>)
 808975c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );

    return( 0 );
 808975e:	2000      	movs	r0, #0
 8089760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

            if( ssl_check_timer( ssl ) != 0 )
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
            else
            {
                if( ssl->f_recv_timeout != NULL )
 8089762:	69a7      	ldr	r7, [r4, #24]
 8089764:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8089766:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8089768:	b137      	cbz	r7, 8089778 <mbedtls_ssl_fetch_input+0x54>
                {
                    ret = ssl->f_recv_timeout( ssl->p_bio,
                                               ssl->in_hdr + ssl->in_left, len,
                                               ssl->conf->read_timeout );
 808976a:	6823      	ldr	r3, [r4, #0]
 808976c:	4401      	add	r1, r0
 808976e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8089770:	462a      	mov	r2, r5
 8089772:	69e0      	ldr	r0, [r4, #28]
 8089774:	47b8      	blx	r7
 8089776:	e004      	b.n	8089782 <mbedtls_ssl_fetch_input+0x5e>
                }
                else
                {
                    ret = ssl->f_recv( ssl->p_bio,
                                       ssl->in_hdr + ssl->in_left, len );
 8089778:	4401      	add	r1, r0
 808977a:	6963      	ldr	r3, [r4, #20]
 808977c:	462a      	mov	r2, r5
 808977e:	69e0      	ldr	r0, [r4, #28]
 8089780:	4798      	blx	r3

            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                                        ssl->in_left, nb_want ) );
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );

            if( ret == 0 )
 8089782:	2800      	cmp	r0, #0
 8089784:	d006      	beq.n	8089794 <mbedtls_ssl_fetch_input+0x70>
                return( MBEDTLS_ERR_SSL_CONN_EOF );

            if( ret < 0 )
 8089786:	db09      	blt.n	808979c <mbedtls_ssl_fetch_input+0x78>
                return( ret );

            if ( (size_t)ret > len || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
 8089788:	4285      	cmp	r5, r0
 808978a:	d305      	bcc.n	8089798 <mbedtls_ssl_fetch_input+0x74>
                    ( "f_recv returned %d bytes but only %lu were requested",
                    ret, (unsigned long)len ) );
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
            }

            ssl->in_left += ret;
 808978c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 808978e:	4418      	add	r0, r3
 8089790:	6760      	str	r0, [r4, #116]	; 0x74
 8089792:	e7d6      	b.n	8089742 <mbedtls_ssl_fetch_input+0x1e>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                                        ssl->in_left, nb_want ) );
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );

            if( ret == 0 )
                return( MBEDTLS_ERR_SSL_CONN_EOF );
 8089794:	4804      	ldr	r0, [pc, #16]	; (80897a8 <mbedtls_ssl_fetch_input+0x84>)
 8089796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if ( (size_t)ret > len || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
            {
                MBEDTLS_SSL_DEBUG_MSG( 1,
                    ( "f_recv returned %d bytes but only %lu were requested",
                    ret, (unsigned long)len ) );
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8089798:	4804      	ldr	r0, [pc, #16]	; (80897ac <mbedtls_ssl_fetch_input+0x88>)
 808979a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );

    return( 0 );
}
 808979c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808979e:	bf00      	nop
 80897a0:	ffff9800 	.word	0xffff9800
 80897a4:	ffff8f00 	.word	0xffff8f00
 80897a8:	ffff8d80 	.word	0xffff8d80
 80897ac:	ffff9400 	.word	0xffff9400

080897b0 <mbedtls_ssl_flush_output>:

/*
 * Flush any data not yet written
 */
int mbedtls_ssl_flush_output( mbedtls_ssl_context *ssl )
{
 80897b0:	b510      	push	{r4, lr}
    int ret;
    unsigned char *buf, i;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );

    if( ssl->f_send == NULL )
 80897b2:	6903      	ldr	r3, [r0, #16]

/*
 * Flush any data not yet written
 */
int mbedtls_ssl_flush_output( mbedtls_ssl_context *ssl )
{
 80897b4:	4604      	mov	r4, r0
    int ret;
    unsigned char *buf, i;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );

    if( ssl->f_send == NULL )
 80897b6:	b34b      	cbz	r3, 808980c <mbedtls_ssl_flush_output+0x5c>
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    }

    /* Avoid incrementing counter if data is flushed */
    if( ssl->out_left == 0 )
 80897b8:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80897bc:	b9a3      	cbnz	r3, 80897e8 <mbedtls_ssl_flush_output+0x38>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
        return( 0 );
 80897be:	2000      	movs	r0, #0
 80897c0:	bd10      	pop	{r4, pc}
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "message length: %d, out_left: %d",
                       mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen, ssl->out_left ) );

        buf = ssl->out_hdr + mbedtls_ssl_hdr_len( ssl ) +
              ssl->out_msglen - ssl->out_left;
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
 80897c2:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80897c6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80897ca:	3105      	adds	r1, #5
 80897cc:	1a89      	subs	r1, r1, r2
 80897ce:	4401      	add	r1, r0
 80897d0:	6923      	ldr	r3, [r4, #16]
 80897d2:	69e0      	ldr	r0, [r4, #28]
 80897d4:	4798      	blx	r3

        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );

        if( ret <= 0 )
 80897d6:	2800      	cmp	r0, #0
 80897d8:	dd1b      	ble.n	8089812 <mbedtls_ssl_flush_output+0x62>
            return( ret );

        if( (size_t)ret > ssl->out_left || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
 80897da:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80897de:	4283      	cmp	r3, r0
 80897e0:	d316      	bcc.n	8089810 <mbedtls_ssl_flush_output+0x60>
                ( "f_send returned %d bytes but only %lu bytes were sent",
                ret, (unsigned long)ssl->out_left ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_left -= ret;
 80897e2:	1a18      	subs	r0, r3, r0
 80897e4:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
        return( 0 );
    }

    while( ssl->out_left > 0 )
 80897e8:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 80897ec:	2a00      	cmp	r2, #0
 80897ee:	d1e8      	bne.n	80897c2 <mbedtls_ssl_flush_output+0x12>
 80897f0:	2207      	movs	r2, #7

        ssl->out_left -= ret;
    }

    for( i = 8; i > ssl_ep_len( ssl ); i-- )
        if( ++ssl->out_ctr[i - 1] != 0 )
 80897f2:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80897f6:	5c8b      	ldrb	r3, [r1, r2]
 80897f8:	3301      	adds	r3, #1
 80897fa:	b2db      	uxtb	r3, r3
 80897fc:	548b      	strb	r3, [r1, r2]
 80897fe:	2b00      	cmp	r3, #0
 8089800:	d1dd      	bne.n	80897be <mbedtls_ssl_flush_output+0xe>
        }

        ssl->out_left -= ret;
    }

    for( i = 8; i > ssl_ep_len( ssl ); i-- )
 8089802:	f112 32ff 	adds.w	r2, r2, #4294967295
 8089806:	d2f4      	bcs.n	80897f2 <mbedtls_ssl_flush_output+0x42>

    /* The loop goes to its end iff the counter is wrapping */
    if( i == ssl_ep_len( ssl ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "outgoing message counter would wrap" ) );
        return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 8089808:	4802      	ldr	r0, [pc, #8]	; (8089814 <mbedtls_ssl_flush_output+0x64>)
 808980a:	bd10      	pop	{r4, pc}

    if( ssl->f_send == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 808980c:	4802      	ldr	r0, [pc, #8]	; (8089818 <mbedtls_ssl_flush_output+0x68>)
 808980e:	bd10      	pop	{r4, pc}
        if( (size_t)ret > ssl->out_left || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1,
                ( "f_send returned %d bytes but only %lu bytes were sent",
                ret, (unsigned long)ssl->out_left ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8089810:	4802      	ldr	r0, [pc, #8]	; (808981c <mbedtls_ssl_flush_output+0x6c>)
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );

    return( 0 );
}
 8089812:	bd10      	pop	{r4, pc}
 8089814:	ffff9480 	.word	0xffff9480
 8089818:	ffff8f00 	.word	0xffff8f00
 808981c:	ffff9400 	.word	0xffff9400

08089820 <mbedtls_ssl_write_record>:
/*
 * Write current record.
 * Uses ssl->out_msgtype, ssl->out_msglen and bytes at ssl->out_msg.
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl )
{
 8089820:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        ; /* Skip special handshake treatment when resending */
    }
    else
#endif
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 8089822:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
/*
 * Write current record.
 * Uses ssl->out_msgtype, ssl->out_msglen and bytes at ssl->out_msg.
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl )
{
 8089826:	b097      	sub	sp, #92	; 0x5c
    {
        ; /* Skip special handshake treatment when resending */
    }
    else
#endif
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 8089828:	2b16      	cmp	r3, #22
/*
 * Write current record.
 * Uses ssl->out_msgtype, ssl->out_msglen and bytes at ssl->out_msg.
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl )
{
 808982a:	4604      	mov	r4, r0
    int ret, done = 0, out_msg_type;
    size_t len = ssl->out_msglen;
 808982c:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
    {
        ; /* Skip special handshake treatment when resending */
    }
    else
#endif
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 8089830:	d11a      	bne.n	8089868 <mbedtls_ssl_write_record+0x48>
    {
        out_msg_type = ssl->out_msg[0];
 8089832:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
 8089836:	780a      	ldrb	r2, [r1, #0]

        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST &&
 8089838:	b11a      	cbz	r2, 8089842 <mbedtls_ssl_write_record+0x22>
 808983a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 808983c:	2b00      	cmp	r3, #0
 808983e:	f000 8139 	beq.w	8089ab4 <mbedtls_ssl_write_record+0x294>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msg[1] = (unsigned char)( ( len - 4 ) >> 16 );
 8089842:	1f2b      	subs	r3, r5, #4
 8089844:	0c18      	lsrs	r0, r3, #16
 8089846:	7048      	strb	r0, [r1, #1]
        ssl->out_msg[2] = (unsigned char)( ( len - 4 ) >>  8 );
 8089848:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 808984c:	0a18      	lsrs	r0, r3, #8
 808984e:	7088      	strb	r0, [r1, #2]
        ssl->out_msg[3] = (unsigned char)( ( len - 4 )       );
 8089850:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8089854:	70cb      	strb	r3, [r1, #3]
            memset( ssl->out_msg + 6, 0x00, 3 );
            memcpy( ssl->out_msg + 9, ssl->out_msg + 1, 3 );
        }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST )
 8089856:	b13a      	cbz	r2, 8089868 <mbedtls_ssl_write_record+0x48>
            ssl->handshake->update_checksum( ssl, ssl->out_msg, len );
 8089858:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808985a:	462a      	mov	r2, r5
 808985c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8089860:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8089864:	4620      	mov	r0, r4
 8089866:	4798      	blx	r3
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done )
    {
        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
 8089868:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 808986c:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8089870:	701a      	strb	r2, [r3, #0]
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 8089872:	68e2      	ldr	r2, [r4, #12]
                           ssl->conf->transport, ssl->out_hdr + 1 );
 8089874:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 8089878:	68a1      	ldr	r1, [r4, #8]
        ver[1] = (unsigned char) minor;
 808987a:	709a      	strb	r2, [r3, #2]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 808987c:	7059      	strb	r1, [r3, #1]
    {
        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, ssl->out_hdr + 1 );

        ssl->out_len[0] = (unsigned char)( len >> 8 );
 808987e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8089882:	0a2a      	lsrs	r2, r5, #8
 8089884:	701a      	strb	r2, [r3, #0]
        ssl->out_len[1] = (unsigned char)( len      );
 8089886:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 808988a:	705d      	strb	r5, [r3, #1]

        if( ssl->transform_out != NULL )
 808988c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 808988e:	2800      	cmp	r0, #0
 8089890:	f000 8107 	beq.w	8089aa2 <mbedtls_ssl_write_record+0x282>
    mbedtls_cipher_mode_t mode;
    int auth_done = 0;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );

    if( ssl->session_out == NULL || ssl->transform_out == NULL )
 8089894:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8089896:	2b00      	cmp	r3, #0
 8089898:	f000 810c 	beq.w	8089ab4 <mbedtls_ssl_write_record+0x294>
 * \return       The mode of operation, or #MBEDTLS_MODE_NONE if
 *               \p ctx has not been initialized.
 */
static inline mbedtls_cipher_mode_t mbedtls_cipher_get_cipher_mode( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
 808989c:	6d05      	ldr	r5, [r0, #80]	; 0x50
 808989e:	b105      	cbz	r5, 80898a2 <mbedtls_ssl_write_record+0x82>
        return MBEDTLS_MODE_NONE;

    return ctx->cipher_info->mode;
 80898a0:	786d      	ldrb	r5, [r5, #1]
    mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_out->cipher_ctx_enc );

    MBEDTLS_SSL_DEBUG_BUF( 4, "before encrypt: output payload",
                      ssl->out_msg, ssl->out_msglen );

    if( ssl->out_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
 80898a2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80898a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80898aa:	f200 8105 	bhi.w	8089ab8 <mbedtls_ssl_write_record+0x298>

    /*
     * Add MAC before if needed
     */
#if defined(SSL_SOME_MODES_USE_MAC)
    if( mode == MBEDTLS_MODE_STREAM ||
 80898ae:	2d07      	cmp	r5, #7
 80898b0:	d001      	beq.n	80898b6 <mbedtls_ssl_write_record+0x96>
 80898b2:	2d02      	cmp	r5, #2
 80898b4:	d13b      	bne.n	808992e <mbedtls_ssl_write_record+0x10e>
        }
        else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
        defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 80898b6:	68e3      	ldr	r3, [r4, #12]
 80898b8:	2b00      	cmp	r3, #0
 80898ba:	f340 80fb 	ble.w	8089ab4 <mbedtls_ssl_write_record+0x294>
        {
            unsigned char mac[MBEDTLS_SSL_MAC_ADD];

            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_ctr, 8 );
 80898be:	2208      	movs	r2, #8
 80898c0:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80898c4:	3038      	adds	r0, #56	; 0x38
 80898c6:	f7fd ffd1 	bl	808786c <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_hdr, 3 );
 80898ca:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80898cc:	2203      	movs	r2, #3
 80898ce:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80898d2:	3038      	adds	r0, #56	; 0x38
 80898d4:	f7fd ffca 	bl	808786c <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_len, 2 );
 80898d8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80898da:	2202      	movs	r2, #2
 80898dc:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80898e0:	3038      	adds	r0, #56	; 0x38
 80898e2:	f7fd ffc3 	bl	808786c <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc,
 80898e6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
                             ssl->out_msg, ssl->out_msglen );
 80898e8:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 80898ec:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80898f0:	3038      	adds	r0, #56	; 0x38
 80898f2:	f7fd ffbb 	bl	808786c <mbedtls_md_hmac_update>
            mbedtls_md_hmac_finish( &ssl->transform_out->md_ctx_enc, mac );
 80898f6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80898f8:	a90a      	add	r1, sp, #40	; 0x28
 80898fa:	3038      	adds	r0, #56	; 0x38
 80898fc:	f7fd ffc6 	bl	808788c <mbedtls_md_hmac_finish>
            mbedtls_md_hmac_reset( &ssl->transform_out->md_ctx_enc );
 8089900:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        MBEDTLS_SSL_DEBUG_BUF( 4, "computed mac",
                       ssl->out_msg + ssl->out_msglen,
                       ssl->transform_out->maclen );

        ssl->out_msglen += ssl->transform_out->maclen;
        auth_done++;
 8089902:	2601      	movs	r6, #1
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_hdr, 3 );
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_len, 2 );
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc,
                             ssl->out_msg, ssl->out_msglen );
            mbedtls_md_hmac_finish( &ssl->transform_out->md_ctx_enc, mac );
            mbedtls_md_hmac_reset( &ssl->transform_out->md_ctx_enc );
 8089904:	3038      	adds	r0, #56	; 0x38
 8089906:	f7fd fff1 	bl	80878ec <mbedtls_md_hmac_reset>

            memcpy( ssl->out_msg + ssl->out_msglen, mac, ssl->transform_out->maclen );
 808990a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 808990e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8089912:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8089914:	4418      	add	r0, r3
 8089916:	6952      	ldr	r2, [r2, #20]
 8089918:	a90a      	add	r1, sp, #40	; 0x28
 808991a:	f008 fd16 	bl	809234a <memcpy>

        MBEDTLS_SSL_DEBUG_BUF( 4, "computed mac",
                       ssl->out_msg + ssl->out_msglen,
                       ssl->transform_out->maclen );

        ssl->out_msglen += ssl->transform_out->maclen;
 808991e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8089920:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8089924:	695b      	ldr	r3, [r3, #20]
 8089926:	4413      	add	r3, r2
 8089928:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 808992c:	e000      	b.n	8089930 <mbedtls_ssl_write_record+0x110>
 * Encryption/decryption functions
 */
static int ssl_encrypt_buf( mbedtls_ssl_context *ssl )
{
    mbedtls_cipher_mode_t mode;
    int auth_done = 0;
 808992e:	2600      	movs	r6, #0
        }
    }
    else
#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */
#if defined(MBEDTLS_GCM_C) || defined(MBEDTLS_CCM_C)
    if( mode == MBEDTLS_MODE_GCM ||
 8089930:	2d06      	cmp	r5, #6
 8089932:	d001      	beq.n	8089938 <mbedtls_ssl_write_record+0x118>
 8089934:	2d08      	cmp	r5, #8
 8089936:	d15c      	bne.n	80899f2 <mbedtls_ssl_write_record+0x1d2>
    {
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 8089938:	6ba3      	ldr	r3, [r4, #56]	; 0x38
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;

        memcpy( add_data, ssl->out_ctr, 8 );
 808993a:	f8d4 7088 	ldr.w	r7, [r4, #136]	; 0x88
    {
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 808993e:	681a      	ldr	r2, [r3, #0]
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;

        memcpy( add_data, ssl->out_ctr, 8 );
 8089940:	6879      	ldr	r1, [r7, #4]
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 8089942:	7f12      	ldrb	r2, [r2, #28]

        memcpy( add_data, ssl->out_ctr, 8 );
 8089944:	6838      	ldr	r0, [r7, #0]
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 8089946:	f012 0f02 	tst.w	r2, #2

        memcpy( add_data, ssl->out_ctr, 8 );
 808994a:	aa0a      	add	r2, sp, #40	; 0x28
 808994c:	c203      	stmia	r2!, {r0, r1}
        add_data[8]  = ssl->out_msgtype;
 808994e:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 8089952:	68a1      	ldr	r1, [r4, #8]
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;

        memcpy( add_data, ssl->out_ctr, 8 );
        add_data[8]  = ssl->out_msgtype;
 8089954:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 8089958:	68e2      	ldr	r2, [r4, #12]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 808995a:	f88d 1031 	strb.w	r1, [sp, #49]	; 0x31
        ver[1] = (unsigned char) minor;
 808995e:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32

        memcpy( add_data, ssl->out_ctr, 8 );
        add_data[8]  = ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
 8089962:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 8089966:	bf08      	it	eq
 8089968:	2510      	moveq	r5, #16

        memcpy( add_data, ssl->out_ctr, 8 );
        add_data[8]  = ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
 808996a:	ea4f 2112 	mov.w	r1, r2, lsr #8
 808996e:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
        add_data[12] = ssl->out_msglen & 0xFF;
 8089972:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
                       add_data, 13 );

        /*
         * Generate IV
         */
        if( ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen != 8 )
 8089976:	6919      	ldr	r1, [r3, #16]
 8089978:	68da      	ldr	r2, [r3, #12]
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 808997a:	bf18      	it	ne
 808997c:	2508      	movne	r5, #8
                       add_data, 13 );

        /*
         * Generate IV
         */
        if( ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen != 8 )
 808997e:	1a52      	subs	r2, r2, r1
 8089980:	2a08      	cmp	r2, #8
 8089982:	f040 8097 	bne.w	8089ab4 <mbedtls_ssl_write_record+0x294>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        memcpy( ssl->transform_out->iv_enc + ssl->transform_out->fixed_ivlen,
                             ssl->out_ctr, 8 );
 8089986:	683a      	ldr	r2, [r7, #0]
            /* Reminder if we ever add an AEAD mode with a different size */
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        memcpy( ssl->transform_out->iv_enc + ssl->transform_out->fixed_ivlen,
 8089988:	3318      	adds	r3, #24
                             ssl->out_ctr, 8 );
 808998a:	505a      	str	r2, [r3, r1]
 808998c:	687a      	ldr	r2, [r7, #4]
 808998e:	1858      	adds	r0, r3, r1
 8089990:	6042      	str	r2, [r0, #4]
        memcpy( ssl->out_iv, ssl->out_ctr, 8 );
 8089992:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8089996:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 808999a:	680b      	ldr	r3, [r1, #0]
 808999c:	6013      	str	r3, [r2, #0]
 808999e:	684b      	ldr	r3, [r1, #4]
 80899a0:	6053      	str	r3, [r2, #4]
        /*
         * Fix pointer positions and message length with added IV
         */
        enc_msg = ssl->out_msg;
        enc_msglen = ssl->out_msglen;
        ssl->out_msglen += ssl->transform_out->ivlen -
 80899a2:	6ba0      	ldr	r0, [r4, #56]	; 0x38

        /*
         * Fix pointer positions and message length with added IV
         */
        enc_msg = ssl->out_msg;
        enc_msglen = ssl->out_msglen;
 80899a4:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
        ssl->out_msglen += ssl->transform_out->ivlen -
                           ssl->transform_out->fixed_ivlen;
 80899a8:	68c3      	ldr	r3, [r0, #12]
 80899aa:	6901      	ldr	r1, [r0, #16]
                ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen );

        /*
         * Fix pointer positions and message length with added IV
         */
        enc_msg = ssl->out_msg;
 80899ac:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
        enc_msglen = ssl->out_msglen;
        ssl->out_msglen += ssl->transform_out->ivlen -
                           ssl->transform_out->fixed_ivlen;
 80899b0:	443b      	add	r3, r7
 80899b2:	1a5b      	subs	r3, r3, r1
 80899b4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
                       ssl->out_msglen, 0 ) );

        /*
         * Encrypt and authenticate
         */
        if( ( ret = mbedtls_cipher_auth_encrypt( &ssl->transform_out->cipher_ctx_enc,
 80899b8:	19d3      	adds	r3, r2, r7
 80899ba:	9305      	str	r3, [sp, #20]
 80899bc:	ab09      	add	r3, sp, #36	; 0x24
 80899be:	9304      	str	r3, [sp, #16]
 80899c0:	230d      	movs	r3, #13
 80899c2:	9300      	str	r3, [sp, #0]
 80899c4:	9506      	str	r5, [sp, #24]
 80899c6:	9203      	str	r2, [sp, #12]
 80899c8:	9702      	str	r7, [sp, #8]
 80899ca:	9201      	str	r2, [sp, #4]
 80899cc:	68c2      	ldr	r2, [r0, #12]
 80899ce:	f100 0118 	add.w	r1, r0, #24
 80899d2:	ab0a      	add	r3, sp, #40	; 0x28
 80899d4:	3050      	adds	r0, #80	; 0x50
 80899d6:	f7f9 fc41 	bl	808325c <mbedtls_cipher_auth_encrypt>
 80899da:	2800      	cmp	r0, #0
 80899dc:	d173      	bne.n	8089ac6 <mbedtls_ssl_write_record+0x2a6>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_encrypt", ret );
            return( ret );
        }

        if( olen != enc_msglen )
 80899de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80899e0:	429f      	cmp	r7, r3
 80899e2:	d167      	bne.n	8089ab4 <mbedtls_ssl_write_record+0x294>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msglen += taglen;
 80899e4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        auth_done++;
 80899e8:	3601      	adds	r6, #1
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msglen += taglen;
 80899ea:	441d      	add	r5, r3
 80899ec:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
 80899f0:	e04c      	b.n	8089a8c <mbedtls_ssl_write_record+0x26c>
    }
    else
#endif /* MBEDTLS_GCM_C || MBEDTLS_CCM_C */
#if defined(MBEDTLS_CIPHER_MODE_CBC) &&                                    \
    ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) )
    if( mode == MBEDTLS_MODE_CBC )
 80899f2:	2d02      	cmp	r5, #2
 80899f4:	d15e      	bne.n	8089ab4 <mbedtls_ssl_write_record+0x294>
        int ret;
        unsigned char *enc_msg;
        size_t enc_msglen, padlen, olen = 0, i;

        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
                 ssl->transform_out->ivlen;
 80899f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) )
    if( mode == MBEDTLS_MODE_CBC )
    {
        int ret;
        unsigned char *enc_msg;
        size_t enc_msglen, padlen, olen = 0, i;
 80899f8:	2200      	movs	r2, #0
 80899fa:	920a      	str	r2, [sp, #40]	; 0x28

        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
 80899fc:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
                 ssl->transform_out->ivlen;
 8089a00:	68d9      	ldr	r1, [r3, #12]
 8089a02:	1c45      	adds	r5, r0, #1
 8089a04:	fbb5 f3f1 	udiv	r3, r5, r1
 8089a08:	fb01 5513 	mls	r5, r1, r3, r5
 8089a0c:	1b4b      	subs	r3, r1, r5
        if( padlen == ssl->transform_out->ivlen )
 8089a0e:	4299      	cmp	r1, r3
 8089a10:	d054      	beq.n	8089abc <mbedtls_ssl_write_record+0x29c>
            padlen = 0;

        for( i = 0; i <= padlen; i++ )
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 8089a12:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8089a16:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8089a1a:	4411      	add	r1, r2
        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
                 ssl->transform_out->ivlen;
        if( padlen == ssl->transform_out->ivlen )
            padlen = 0;

        for( i = 0; i <= padlen; i++ )
 8089a1c:	3201      	adds	r2, #1
 8089a1e:	4293      	cmp	r3, r2
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 8089a20:	540b      	strb	r3, [r1, r0]
        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
                 ssl->transform_out->ivlen;
        if( padlen == ssl->transform_out->ivlen )
            padlen = 0;

        for( i = 0; i <= padlen; i++ )
 8089a22:	d2f6      	bcs.n	8089a12 <mbedtls_ssl_write_record+0x1f2>
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;

        ssl->out_msglen += padlen + 1;
 8089a24:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 8089a28:	3501      	adds	r5, #1
 8089a2a:	441d      	add	r5, r3
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * Prepend per-record IV for block cipher in TLS v1.1 and up as per
         * Method 1 (6.2.3.2. in RFC4346 and RFC5246)
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 8089a2c:	68e3      	ldr	r3, [r4, #12]
            padlen = 0;

        for( i = 0; i <= padlen; i++ )
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;

        ssl->out_msglen += padlen + 1;
 8089a2e:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * Prepend per-record IV for block cipher in TLS v1.1 and up as per
         * Method 1 (6.2.3.2. in RFC4346 and RFC5246)
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 8089a32:	2b01      	cmp	r3, #1
 8089a34:	dc02      	bgt.n	8089a3c <mbedtls_ssl_write_record+0x21c>
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;

        ssl->out_msglen += padlen + 1;

        enc_msglen = ssl->out_msglen;
        enc_msg = ssl->out_msg;
 8089a36:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8089a3a:	e018      	b.n	8089a6e <mbedtls_ssl_write_record+0x24e>
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
        {
            /*
             * Generate IV
             */
            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->transform_out->iv_enc,
 8089a3c:	6823      	ldr	r3, [r4, #0]
 8089a3e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
                                  ssl->transform_out->ivlen );
 8089a40:	699d      	ldr	r5, [r3, #24]
 8089a42:	68ca      	ldr	r2, [r1, #12]
 8089a44:	69d8      	ldr	r0, [r3, #28]
 8089a46:	3118      	adds	r1, #24
 8089a48:	47a8      	blx	r5
            if( ret != 0 )
 8089a4a:	2800      	cmp	r0, #0
 8089a4c:	d13b      	bne.n	8089ac6 <mbedtls_ssl_write_record+0x2a6>
                return( ret );

            memcpy( ssl->out_iv, ssl->transform_out->iv_enc,
 8089a4e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
                    ssl->transform_out->ivlen );
 8089a50:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8089a54:	68ca      	ldr	r2, [r1, #12]
 8089a56:	3118      	adds	r1, #24
 8089a58:	f008 fc77 	bl	809234a <memcpy>
            /*
             * Fix pointer positions and message length with added IV
             */
            enc_msg = ssl->out_msg;
            enc_msglen = ssl->out_msglen;
            ssl->out_msglen += ssl->transform_out->ivlen;
 8089a5c:	6ba2      	ldr	r2, [r4, #56]	; 0x38

            /*
             * Fix pointer positions and message length with added IV
             */
            enc_msg = ssl->out_msg;
            enc_msglen = ssl->out_msglen;
 8089a5e:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
            ssl->out_msglen += ssl->transform_out->ivlen;
 8089a62:	68d2      	ldr	r2, [r2, #12]
                    ssl->transform_out->ivlen );

            /*
             * Fix pointer positions and message length with added IV
             */
            enc_msg = ssl->out_msg;
 8089a64:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
            enc_msglen = ssl->out_msglen;
            ssl->out_msglen += ssl->transform_out->ivlen;
 8089a68:	442a      	add	r2, r5
 8089a6a:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
                            "including %d bytes of IV and %d bytes of padding",
                            ssl->out_msglen, ssl->transform_out->ivlen,
                            padlen + 1 ) );

        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_out->cipher_ctx_enc,
 8089a6e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8089a70:	aa0a      	add	r2, sp, #40	; 0x28
 8089a72:	9202      	str	r2, [sp, #8]
 8089a74:	9301      	str	r3, [sp, #4]
 8089a76:	9500      	str	r5, [sp, #0]
 8089a78:	68c2      	ldr	r2, [r0, #12]
 8089a7a:	f100 0118 	add.w	r1, r0, #24
 8089a7e:	3050      	adds	r0, #80	; 0x50
 8089a80:	f7f9 fbca 	bl	8083218 <mbedtls_cipher_crypt>
 8089a84:	b9f8      	cbnz	r0, 8089ac6 <mbedtls_ssl_write_record+0x2a6>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
            return( ret );
        }

        if( enc_msglen != olen )
 8089a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8089a88:	429d      	cmp	r5, r3
 8089a8a:	d113      	bne.n	8089ab4 <mbedtls_ssl_write_record+0x294>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    /* Make extra sure authentication was performed, exactly once */
    if( auth_done != 1 )
 8089a8c:	2e01      	cmp	r6, #1
 8089a8e:	d111      	bne.n	8089ab4 <mbedtls_ssl_write_record+0x294>
            {
                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
                return( ret );
            }

            len = ssl->out_msglen;
 8089a90:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
            ssl->out_len[0] = (unsigned char)( len >> 8 );
 8089a94:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8089a98:	0a19      	lsrs	r1, r3, #8
 8089a9a:	7011      	strb	r1, [r2, #0]
            ssl->out_len[1] = (unsigned char)( len      );
 8089a9c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8089aa0:	7053      	strb	r3, [r2, #1]
        }

        ssl->out_left = mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen;
 8089aa2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0

        MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
                       ssl->out_hdr, mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen );
    }

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 8089aa6:	4620      	mov	r0, r4
            len = ssl->out_msglen;
            ssl->out_len[0] = (unsigned char)( len >> 8 );
            ssl->out_len[1] = (unsigned char)( len      );
        }

        ssl->out_left = mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen;
 8089aa8:	3305      	adds	r3, #5
 8089aaa:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4

        MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
                       ssl->out_hdr, mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen );
    }

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 8089aae:	f7ff fe7f 	bl	80897b0 <mbedtls_ssl_flush_output>
 8089ab2:	e008      	b.n	8089ac6 <mbedtls_ssl_write_record+0x2a6>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );

    if( ssl->session_out == NULL || ssl->transform_out == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8089ab4:	4805      	ldr	r0, [pc, #20]	; (8089acc <mbedtls_ssl_write_record+0x2ac>)
 8089ab6:	e006      	b.n	8089ac6 <mbedtls_ssl_write_record+0x2a6>
    if( ssl->out_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Record content %u too large, maximum %d",
                                    (unsigned) ssl->out_msglen,
                                    MBEDTLS_SSL_MAX_CONTENT_LEN ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8089ab8:	4805      	ldr	r0, [pc, #20]	; (8089ad0 <mbedtls_ssl_write_record+0x2b0>)
 8089aba:	e004      	b.n	8089ac6 <mbedtls_ssl_write_record+0x2a6>
                 ssl->transform_out->ivlen;
        if( padlen == ssl->transform_out->ivlen )
            padlen = 0;

        for( i = 0; i <= padlen; i++ )
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 8089abc:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8089ac0:	541a      	strb	r2, [r3, r0]
        size_t enc_msglen, padlen, olen = 0, i;

        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
                 ssl->transform_out->ivlen;
        if( padlen == ssl->transform_out->ivlen )
            padlen = 0;
 8089ac2:	4613      	mov	r3, r2
 8089ac4:	e7ae      	b.n	8089a24 <mbedtls_ssl_write_record+0x204>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write record" ) );

    return( 0 );
}
 8089ac6:	b017      	add	sp, #92	; 0x5c
 8089ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8089aca:	bf00      	nop
 8089acc:	ffff9400 	.word	0xffff9400
 8089ad0:	ffff8f00 	.word	0xffff8f00

08089ad4 <mbedtls_ssl_prepare_handshake_record>:
    return( 0 );
}
#endif /* MBEDTLS_SSL_PROTO_DTLS */

int mbedtls_ssl_prepare_handshake_record( mbedtls_ssl_context *ssl )
{
 8089ad4:	b510      	push	{r4, lr}
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
 8089ad6:	6f04      	ldr	r4, [r0, #112]	; 0x70
 8089ad8:	2c03      	cmp	r4, #3
 8089ada:	d90f      	bls.n	8089afc <mbedtls_ssl_prepare_handshake_record+0x28>
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
                    ( ssl->in_msg[1] << 16 ) |
 8089adc:	6e41      	ldr	r1, [r0, #100]	; 0x64
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
 8089ade:	788a      	ldrb	r2, [r1, #2]
 8089ae0:	784b      	ldrb	r3, [r1, #1]
 8089ae2:	0212      	lsls	r2, r2, #8
 8089ae4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8089ae8:	78ca      	ldrb	r2, [r1, #3]
 8089aea:	4313      	orrs	r3, r2
 8089aec:	3304      	adds	r3, #4
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 8089aee:	4a04      	ldr	r2, [pc, #16]	; (8089b00 <mbedtls_ssl_prepare_handshake_record+0x2c>)
    }

    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
                    ( ssl->in_msg[1] << 16 ) |
                    ( ssl->in_msg[2] << 8  ) |
                      ssl->in_msg[3] );
 8089af0:	6783      	str	r3, [r0, #120]	; 0x78
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 8089af2:	429c      	cmp	r4, r3
 8089af4:	bf34      	ite	cc
 8089af6:	4610      	movcc	r0, r2
 8089af8:	2000      	movcs	r0, #0
 8089afa:	bd10      	pop	{r4, pc}
{
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 8089afc:	4801      	ldr	r0, [pc, #4]	; (8089b04 <mbedtls_ssl_prepare_handshake_record+0x30>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
    }

    return( 0 );
}
 8089afe:	bd10      	pop	{r4, pc}
 8089b00:	ffff8f80 	.word	0xffff8f80
 8089b04:	ffff8e00 	.word	0xffff8e00

08089b08 <mbedtls_ssl_update_handshake_status>:

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 8089b08:	6842      	ldr	r2, [r0, #4]

    return( 0 );
}

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{
 8089b0a:	b410      	push	{r4}

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 8089b0c:	2a10      	cmp	r2, #16
 8089b0e:	d008      	beq.n	8089b22 <mbedtls_ssl_update_handshake_status+0x1a>
        ssl->handshake != NULL )
 8089b10:	6b02      	ldr	r2, [r0, #48]	; 0x30
}

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 8089b12:	b132      	cbz	r2, 8089b22 <mbedtls_ssl_update_handshake_status+0x1a>
        ssl->handshake != NULL )
    {
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
 8089b14:	f8d2 4160 	ldr.w	r4, [r2, #352]	; 0x160
 8089b18:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8089b1a:	4623      	mov	r3, r4
 8089b1c:	6f82      	ldr	r2, [r0, #120]	; 0x78
        ssl->handshake != NULL )
    {
        ssl->handshake->in_msg_seq++;
    }
#endif
}
 8089b1e:	bc10      	pop	{r4}
{

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
        ssl->handshake != NULL )
    {
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
 8089b20:	4718      	bx	r3
        ssl->handshake != NULL )
    {
        ssl->handshake->in_msg_seq++;
    }
#endif
}
 8089b22:	bc10      	pop	{r4}
 8089b24:	4770      	bx	lr
	...

08089b28 <mbedtls_ssl_handle_message_type>:

    return( 0 );
}

int mbedtls_ssl_handle_message_type( mbedtls_ssl_context *ssl )
{
 8089b28:	b510      	push	{r4, lr}
    int ret;

    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 8089b2a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c

    return( 0 );
}

int mbedtls_ssl_handle_message_type( mbedtls_ssl_context *ssl )
{
 8089b2c:	4604      	mov	r4, r0
    int ret;

    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 8089b2e:	2b16      	cmp	r3, #22
 8089b30:	d004      	beq.n	8089b3c <mbedtls_ssl_handle_message_type+0x14>
        {
            return( ret );
        }
    }

    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
 8089b32:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8089b34:	2b15      	cmp	r3, #21
 8089b36:	d006      	beq.n	8089b46 <mbedtls_ssl_handle_message_type+0x1e>

        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
    }

    return( 0 );
 8089b38:	2000      	movs	r0, #0
 8089b3a:	bd10      	pop	{r4, pc}
    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
    {
        if( ( ret = mbedtls_ssl_prepare_handshake_record( ssl ) ) != 0 )
 8089b3c:	f7ff ffca 	bl	8089ad4 <mbedtls_ssl_prepare_handshake_record>
 8089b40:	2800      	cmp	r0, #0
 8089b42:	d0f6      	beq.n	8089b32 <mbedtls_ssl_handle_message_type+0xa>
 8089b44:	bd10      	pop	{r4, pc}
        }
    }

    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
    {
        if( ssl->in_msglen != 2 )
 8089b46:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8089b48:	2b02      	cmp	r3, #2
 8089b4a:	d10c      	bne.n	8089b66 <mbedtls_ssl_handle_message_type+0x3e>
                       ssl->in_msg[0], ssl->in_msg[1] ) );

        /*
         * Ignore non-fatal alerts, except close_notify and no_renegotiation
         */
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
 8089b4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8089b4e:	781a      	ldrb	r2, [r3, #0]
 8089b50:	2a02      	cmp	r2, #2
 8089b52:	d00a      	beq.n	8089b6a <mbedtls_ssl_handle_message_type+0x42>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
        }

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 8089b54:	2a01      	cmp	r2, #1
 8089b56:	d10a      	bne.n	8089b6e <mbedtls_ssl_handle_message_type+0x46>
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
 8089b58:	785b      	ldrb	r3, [r3, #1]
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
        }

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 8089b5a:	b153      	cbz	r3, 8089b72 <mbedtls_ssl_handle_message_type+0x4a>

        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
    }

    return( 0 );
 8089b5c:	2b64      	cmp	r3, #100	; 0x64
 8089b5e:	4806      	ldr	r0, [pc, #24]	; (8089b78 <mbedtls_ssl_handle_message_type+0x50>)
 8089b60:	bf08      	it	eq
 8089b62:	2000      	moveq	r0, #0
 8089b64:	bd10      	pop	{r4, pc}
            /* Note: Standard allows for more than one 2 byte alert
               to be packed in a single message, but Mbed TLS doesn't
               currently support this. */
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid alert message, len: %d",
                           ssl->in_msglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 8089b66:	4805      	ldr	r0, [pc, #20]	; (8089b7c <mbedtls_ssl_handle_message_type+0x54>)
 8089b68:	bd10      	pop	{r4, pc}
         */
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
 8089b6a:	4805      	ldr	r0, [pc, #20]	; (8089b80 <mbedtls_ssl_handle_message_type+0x58>)
 8089b6c:	bd10      	pop	{r4, pc}
            return( 0 );
        }
#endif /* MBEDTLS_SSL_PROTO_SSL3 && MBEDTLS_SSL_SRV_C */

        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
 8089b6e:	4802      	ldr	r0, [pc, #8]	; (8089b78 <mbedtls_ssl_handle_message_type+0x50>)
 8089b70:	bd10      	pop	{r4, pc}

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a close notify message" ) );
            return( MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY );
 8089b72:	4804      	ldr	r0, [pc, #16]	; (8089b84 <mbedtls_ssl_handle_message_type+0x5c>)
        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
    }

    return( 0 );
}
 8089b74:	bd10      	pop	{r4, pc}
 8089b76:	bf00      	nop
 8089b78:	ffff9980 	.word	0xffff9980
 8089b7c:	ffff8e00 	.word	0xffff8e00
 8089b80:	ffff8880 	.word	0xffff8880
 8089b84:	ffff8780 	.word	0xffff8780

08089b88 <mbedtls_ssl_send_alert_message>:
}

int mbedtls_ssl_send_alert_message( mbedtls_ssl_context *ssl,
                            unsigned char level,
                            unsigned char message )
{
 8089b88:	b410      	push	{r4}
    int ret;

    if( ssl == NULL || ssl->conf == NULL )
 8089b8a:	b180      	cbz	r0, 8089bae <mbedtls_ssl_send_alert_message+0x26>
 8089b8c:	6804      	ldr	r4, [r0, #0]
 8089b8e:	b174      	cbz	r4, 8089bae <mbedtls_ssl_send_alert_message+0x26>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> send alert message" ) );
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "send alert level=%u message=%u", level, message ));

    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
 8089b90:	2415      	movs	r4, #21
 8089b92:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
    ssl->out_msglen = 2;
 8089b96:	2402      	movs	r4, #2
 8089b98:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
    ssl->out_msg[0] = level;
 8089b9c:	f8d0 4098 	ldr.w	r4, [r0, #152]	; 0x98
 8089ba0:	7021      	strb	r1, [r4, #0]
    ssl->out_msg[1] = message;
 8089ba2:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
 8089ba6:	705a      	strb	r2, [r3, #1]
        return( ret );
    }
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );

    return( 0 );
}
 8089ba8:	bc10      	pop	{r4}
    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
    ssl->out_msglen = 2;
    ssl->out_msg[0] = level;
    ssl->out_msg[1] = message;

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 8089baa:	f7ff be39 	b.w	8089820 <mbedtls_ssl_write_record>
        return( ret );
    }
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );

    return( 0 );
}
 8089bae:	4801      	ldr	r0, [pc, #4]	; (8089bb4 <mbedtls_ssl_send_alert_message+0x2c>)
 8089bb0:	bc10      	pop	{r4}
 8089bb2:	4770      	bx	lr
 8089bb4:	ffff8f00 	.word	0xffff8f00

08089bb8 <mbedtls_ssl_read_record_layer>:

    return( 0 );
}

int mbedtls_ssl_read_record_layer( mbedtls_ssl_context *ssl )
{
 8089bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     *     and consumes through mbedtls_ssl_read only.
     *
     */

    /* Case (1): Handshake messages */
    if( ssl->in_hslen != 0 )
 8089bbc:	6f81      	ldr	r1, [r0, #120]	; 0x78

    return( 0 );
}

int mbedtls_ssl_read_record_layer( mbedtls_ssl_context *ssl )
{
 8089bbe:	b096      	sub	sp, #88	; 0x58
 8089bc0:	4604      	mov	r4, r0
 8089bc2:	6e83      	ldr	r3, [r0, #104]	; 0x68
     *     and consumes through mbedtls_ssl_read only.
     *
     */

    /* Case (1): Handshake messages */
    if( ssl->in_hslen != 0 )
 8089bc4:	b181      	cbz	r1, 8089be8 <mbedtls_ssl_read_record_layer+0x30>
    {
        /* Hard assertion to be sure that no application data
         * is in flight, as corrupting ssl->in_msglen during
         * ssl->in_offt != NULL is fatal. */
        if( ssl->in_offt != NULL )
 8089bc6:	2b00      	cmp	r3, #0
 8089bc8:	f040 821c 	bne.w	808a004 <mbedtls_ssl_read_record_layer+0x44c>
         *     should not be treated as a silently corrected assertion.
         *     Additionally, ssl->in_hslen might be arbitrarily out of
         *     bounds after handling a DTLS message with an unexpected
         *     sequence number, see mbedtls_ssl_prepare_handshake_record.
         */
        if( ssl->in_hslen < ssl->in_msglen )
 8089bcc:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8089bce:	4291      	cmp	r1, r2
 8089bd0:	d206      	bcs.n	8089be0 <mbedtls_ssl_read_record_layer+0x28>
        {
            ssl->in_msglen -= ssl->in_hslen;
 8089bd2:	1a52      	subs	r2, r2, r1
 8089bd4:	6702      	str	r2, [r0, #112]	; 0x70
            memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,
 8089bd6:	6e40      	ldr	r0, [r0, #100]	; 0x64
                     ssl->in_msglen );
 8089bd8:	4401      	add	r1, r0
 8089bda:	f008 fbc1 	bl	8092360 <memmove>
 8089bde:	e000      	b.n	8089be2 <mbedtls_ssl_read_record_layer+0x2a>
            MBEDTLS_SSL_DEBUG_BUF( 4, "remaining content in record",
                                   ssl->in_msg, ssl->in_msglen );
        }
        else
        {
            ssl->in_msglen = 0;
 8089be0:	6703      	str	r3, [r0, #112]	; 0x70
        }

        ssl->in_hslen   = 0;
 8089be2:	2300      	movs	r3, #0
 8089be4:	67a3      	str	r3, [r4, #120]	; 0x78
 8089be6:	e003      	b.n	8089bf0 <mbedtls_ssl_read_record_layer+0x38>
    }
    /* Case (4): Application data */
    else if( ssl->in_offt != NULL )
 8089be8:	2b00      	cmp	r3, #0
 8089bea:	f040 820f 	bne.w	808a00c <mbedtls_ssl_read_record_layer+0x454>
        return( 0 );
    }
    /* Everything else (CCS & Alerts) */
    else
    {
        ssl->in_msglen = 0;
 8089bee:	6703      	str	r3, [r0, #112]	; 0x70
     *
     * Fetch and decode new record if current one is fully consumed.
     *
     */

    if( ssl->in_msglen > 0 )
 8089bf0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8089bf2:	2b00      	cmp	r3, #0
 8089bf4:	f040 820a 	bne.w	808a00c <mbedtls_ssl_read_record_layer+0x454>
read_record_header:
#endif

    /* Current record either fully processed or to be discarded. */

    if( ( ret = mbedtls_ssl_fetch_input( ssl, mbedtls_ssl_hdr_len( ssl ) ) ) != 0 )
 8089bf8:	2105      	movs	r1, #5
 8089bfa:	4620      	mov	r0, r4
 8089bfc:	f7ff fd92 	bl	8089724 <mbedtls_ssl_fetch_input>
 8089c00:	2800      	cmp	r0, #0
 8089c02:	f040 8204 	bne.w	808a00e <mbedtls_ssl_read_record_layer+0x456>
{
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
 8089c06:	6da2      	ldr	r2, [r4, #88]	; 0x58
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 8089c08:	6de0      	ldr	r0, [r4, #92]	; 0x5c
{
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
 8089c0a:	7813      	ldrb	r3, [r2, #0]
 8089c0c:	66e3      	str	r3, [r4, #108]	; 0x6c
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 8089c0e:	7805      	ldrb	r5, [r0, #0]
 8089c10:	7841      	ldrb	r1, [r0, #1]
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 8089c12:	3b14      	subs	r3, #20
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 8089c14:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8089c18:	6721      	str	r1, [r4, #112]	; 0x70
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 8089c1a:	2b03      	cmp	r3, #3
    else
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
 8089c1c:	7855      	ldrb	r5, [r2, #1]

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
    mbedtls_ssl_read_version( &major_ver, &minor_ver, ssl->conf->transport, ssl->in_hdr + 1 );
 8089c1e:	6820      	ldr	r0, [r4, #0]
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
        *minor = ver[1];
 8089c20:	7892      	ldrb	r2, [r2, #2]
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 8089c22:	d905      	bls.n	8089c30 <mbedtls_ssl_read_record_layer+0x78>
        /* Silently ignore invalid DTLS records as recommended by RFC 6347
         * Section 4.1.2.7 */
        if( ssl->conf->transport != MBEDTLS_SSL_TRANSPORT_DATAGRAM )
#endif /* MBEDTLS_SSL_PROTO_DTLS */
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                    MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 8089c24:	220a      	movs	r2, #10
 8089c26:	2102      	movs	r1, #2
 8089c28:	4620      	mov	r0, r4
 8089c2a:	f7ff ffad 	bl	8089b88 <mbedtls_ssl_send_alert_message>
 8089c2e:	e1eb      	b.n	808a008 <mbedtls_ssl_read_record_layer+0x450>

        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    /* Check version */
    if( major_ver != ssl->major_ver )
 8089c30:	68a3      	ldr	r3, [r4, #8]
 8089c32:	429d      	cmp	r5, r3
 8089c34:	f040 81e8 	bne.w	808a008 <mbedtls_ssl_read_record_layer+0x450>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "major version mismatch" ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    if( minor_ver > ssl->conf->max_minor_ver )
 8089c38:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8089c3c:	429a      	cmp	r2, r3
 8089c3e:	f300 81e3 	bgt.w	808a008 <mbedtls_ssl_read_record_layer+0x450>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "minor version mismatch" ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    /* Check length against the size of our buffer */
    if( ssl->in_msglen > MBEDTLS_SSL_BUFFER_LEN
 8089c42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8089c44:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8089c46:	1a9b      	subs	r3, r3, r2
 8089c48:	f5c3 5305 	rsb	r3, r3, #8512	; 0x2140
 8089c4c:	330d      	adds	r3, #13
 8089c4e:	4299      	cmp	r1, r3
 8089c50:	f200 81da 	bhi.w	808a008 <mbedtls_ssl_read_record_layer+0x450>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    /* Check length against bounds of the current transform and version */
    if( ssl->transform_in == NULL )
 8089c54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8089c56:	b923      	cbnz	r3, 8089c62 <mbedtls_ssl_read_record_layer+0xaa>
    {
        if( ssl->in_msglen < 1 ||
 8089c58:	1e4b      	subs	r3, r1, #1
 8089c5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8089c5e:	d30c      	bcc.n	8089c7a <mbedtls_ssl_read_record_layer+0xc2>
 8089c60:	e1d2      	b.n	808a008 <mbedtls_ssl_read_record_layer+0x450>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }
    }
    else
    {
        if( ssl->in_msglen < ssl->transform_in->minlen )
 8089c62:	689b      	ldr	r3, [r3, #8]
 8089c64:	4299      	cmp	r1, r3
 8089c66:	f0c0 81cf 	bcc.w	808a008 <mbedtls_ssl_read_record_layer+0x450>
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * TLS encrypted messages can have up to 256 bytes of padding
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
 8089c6a:	68e2      	ldr	r2, [r4, #12]
 8089c6c:	2a00      	cmp	r2, #0
 8089c6e:	dd04      	ble.n	8089c7a <mbedtls_ssl_read_record_layer+0xc2>
 8089c70:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8089c74:	4299      	cmp	r1, r3
 8089c76:	f200 81c7 	bhi.w	808a008 <mbedtls_ssl_read_record_layer+0x450>
    }

    /*
     * Read and optionally decrypt the message contents
     */
    if( ( ret = mbedtls_ssl_fetch_input( ssl,
 8089c7a:	3105      	adds	r1, #5
 8089c7c:	4620      	mov	r0, r4
 8089c7e:	f7ff fd51 	bl	8089724 <mbedtls_ssl_fetch_input>
 8089c82:	2800      	cmp	r0, #0
 8089c84:	f040 81c3 	bne.w	808a00e <mbedtls_ssl_read_record_layer+0x456>

        if( ret == 0 )
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
 8089c88:	6b66      	ldr	r6, [r4, #52]	; 0x34
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        ssl->next_record_offset = ssl->in_msglen + mbedtls_ssl_hdr_len( ssl );
    else
#endif
        ssl->in_left = 0;
 8089c8a:	6760      	str	r0, [r4, #116]	; 0x74

        if( ret == 0 )
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
 8089c8c:	2e00      	cmp	r6, #0
 8089c8e:	f000 81bd 	beq.w	808a00c <mbedtls_ssl_read_record_layer+0x454>
    size_t padlen = 0, correct = 1;
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );

    if( ssl->session_in == NULL || ssl->transform_in == NULL )
 8089c92:	6a23      	ldr	r3, [r4, #32]
 8089c94:	2b00      	cmp	r3, #0
 8089c96:	f000 81b5 	beq.w	808a004 <mbedtls_ssl_read_record_layer+0x44c>
 * \return       The mode of operation, or #MBEDTLS_MODE_NONE if
 *               \p ctx has not been initialized.
 */
static inline mbedtls_cipher_mode_t mbedtls_cipher_get_cipher_mode( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
 8089c9a:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8089c9e:	b103      	cbz	r3, 8089ca2 <mbedtls_ssl_read_record_layer+0xea>
        return MBEDTLS_MODE_NONE;

    return ctx->cipher_info->mode;
 8089ca0:	785b      	ldrb	r3, [r3, #1]
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_in->cipher_ctx_dec );

    if( ssl->in_msglen < ssl->transform_in->minlen )
 8089ca2:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8089ca4:	68b2      	ldr	r2, [r6, #8]
 8089ca6:	4295      	cmp	r5, r2
 8089ca8:	f0c0 819d 	bcc.w	8089fe6 <mbedtls_ssl_read_record_layer+0x42e>
        }
    }
    else
#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */
#if defined(MBEDTLS_GCM_C) || defined(MBEDTLS_CCM_C)
    if( mode == MBEDTLS_MODE_GCM ||
 8089cac:	2b06      	cmp	r3, #6
 8089cae:	d001      	beq.n	8089cb4 <mbedtls_ssl_read_record_layer+0xfc>
 8089cb0:	2b08      	cmp	r3, #8
 8089cb2:	d175      	bne.n	8089da0 <mbedtls_ssl_read_record_layer+0x1e8>
        int ret;
        size_t dec_msglen, olen;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
 8089cb4:	6833      	ldr	r3, [r6, #0]
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
        size_t explicit_iv_len = ssl->transform_in->ivlen -
                                 ssl->transform_in->fixed_ivlen;
 8089cb6:	68f2      	ldr	r2, [r6, #12]
        size_t dec_msglen, olen;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 8089cb8:	7f1b      	ldrb	r3, [r3, #28]
 8089cba:	f013 0f02 	tst.w	r3, #2
        size_t explicit_iv_len = ssl->transform_in->ivlen -
                                 ssl->transform_in->fixed_ivlen;
 8089cbe:	6933      	ldr	r3, [r6, #16]
        size_t dec_msglen, olen;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 8089cc0:	bf14      	ite	ne
 8089cc2:	2708      	movne	r7, #8
 8089cc4:	2710      	moveq	r7, #16
        size_t explicit_iv_len = ssl->transform_in->ivlen -
                                 ssl->transform_in->fixed_ivlen;
 8089cc6:	1ad3      	subs	r3, r2, r3

        if( ssl->in_msglen < explicit_iv_len + taglen )
 8089cc8:	19da      	adds	r2, r3, r7
 8089cca:	4295      	cmp	r5, r2
 8089ccc:	f0c0 818b 	bcc.w	8089fe6 <mbedtls_ssl_read_record_layer+0x42e>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < explicit_iv_len (%d) "
                                "+ taglen (%d)", ssl->in_msglen,
                                explicit_iv_len, taglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;
 8089cd0:	1aed      	subs	r5, r5, r3
 8089cd2:	1bed      	subs	r5, r5, r7

        dec_msg = ssl->in_msg;
        dec_msg_result = ssl->in_msg;
        ssl->in_msglen = dec_msglen;

        memcpy( add_data, ssl->in_ctr, 8 );
 8089cd4:	6d62      	ldr	r2, [r4, #84]	; 0x54
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;

        dec_msg = ssl->in_msg;
        dec_msg_result = ssl->in_msg;
        ssl->in_msglen = dec_msglen;
 8089cd6:	6725      	str	r5, [r4, #112]	; 0x70

        memcpy( add_data, ssl->in_ctr, 8 );
 8089cd8:	6810      	ldr	r0, [r2, #0]
 8089cda:	6851      	ldr	r1, [r2, #4]
 8089cdc:	ab0a      	add	r3, sp, #40	; 0x28
 8089cde:	c303      	stmia	r3!, {r0, r1}
        add_data[8]  = ssl->in_msgtype;
 8089ce0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 8089ce2:	68a2      	ldr	r2, [r4, #8]
        dec_msg = ssl->in_msg;
        dec_msg_result = ssl->in_msg;
        ssl->in_msglen = dec_msglen;

        memcpy( add_data, ssl->in_ctr, 8 );
        add_data[8]  = ssl->in_msgtype;
 8089ce4:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 8089ce8:	68e3      	ldr	r3, [r4, #12]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 8089cea:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
        ver[1] = (unsigned char) minor;
 8089cee:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32

        memcpy( add_data, ssl->in_ctr, 8 );
        add_data[8]  = ssl->in_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->in_msglen >> 8 ) & 0xFF;
 8089cf2:	0a2b      	lsrs	r3, r5, #8
 8089cf4:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
        add_data[12] = ssl->in_msglen & 0xFF;
 8089cf8:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34

        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
                       add_data, 13 );

        memcpy( ssl->transform_in->iv_dec + ssl->transform_in->fixed_ivlen,
 8089cfc:	6933      	ldr	r3, [r6, #16]
                ssl->in_iv,
                ssl->transform_in->ivlen - ssl->transform_in->fixed_ivlen );
 8089cfe:	68f2      	ldr	r2, [r6, #12]
                                explicit_iv_len, taglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;

        dec_msg = ssl->in_msg;
 8089d00:	f8d4 8064 	ldr.w	r8, [r4, #100]	; 0x64
        add_data[12] = ssl->in_msglen & 0xFF;

        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
                       add_data, 13 );

        memcpy( ssl->transform_in->iv_dec + ssl->transform_in->fixed_ivlen,
 8089d04:	f106 0028 	add.w	r0, r6, #40	; 0x28
                ssl->in_iv,
                ssl->transform_in->ivlen - ssl->transform_in->fixed_ivlen );
 8089d08:	1ad2      	subs	r2, r2, r3
 8089d0a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8089d0c:	4418      	add	r0, r3
 8089d0e:	f008 fb1c 	bl	809234a <memcpy>
        MBEDTLS_SSL_DEBUG_BUF( 4, "TAG used", dec_msg + dec_msglen, taglen );

        /*
         * Decrypt and authenticate
         */
        if( ( ret = mbedtls_cipher_auth_decrypt( &ssl->transform_in->cipher_ctx_dec,
 8089d12:	eb08 0305 	add.w	r3, r8, r5
 8089d16:	9305      	str	r3, [sp, #20]
 8089d18:	ab09      	add	r3, sp, #36	; 0x24
 8089d1a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8089d1c:	9304      	str	r3, [sp, #16]
 8089d1e:	230d      	movs	r3, #13
 8089d20:	9300      	str	r3, [sp, #0]
 8089d22:	9706      	str	r7, [sp, #24]
 8089d24:	f8cd 800c 	str.w	r8, [sp, #12]
 8089d28:	9502      	str	r5, [sp, #8]
 8089d2a:	f8cd 8004 	str.w	r8, [sp, #4]
 8089d2e:	68c2      	ldr	r2, [r0, #12]
 8089d30:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8089d34:	ab0a      	add	r3, sp, #40	; 0x28
 8089d36:	3090      	adds	r0, #144	; 0x90
 8089d38:	f7f9 faba 	bl	80832b0 <mbedtls_cipher_auth_decrypt>
 8089d3c:	b128      	cbz	r0, 8089d4a <mbedtls_ssl_read_record_layer+0x192>
                                         dec_msg_result, &olen,
                                         dec_msg + dec_msglen, taglen ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_decrypt", ret );

            if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
 8089d3e:	f510 4fc6 	cmn.w	r0, #25344	; 0x6300
 8089d42:	f000 8150 	beq.w	8089fe6 <mbedtls_ssl_read_record_layer+0x42e>
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
    {
        if( ( ret = ssl_decrypt_buf( ssl ) ) != 0 )
 8089d46:	b328      	cbz	r0, 8089d94 <mbedtls_ssl_read_record_layer+0x1dc>
 8089d48:	e161      	b.n	808a00e <mbedtls_ssl_read_record_layer+0x456>

            return( ret );
        }
        auth_done++;

        if( olen != dec_msglen )
 8089d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8089d4c:	429d      	cmp	r5, r3
 8089d4e:	f040 8159 	bne.w	808a004 <mbedtls_ssl_read_record_layer+0x44c>
 8089d52:	e007      	b.n	8089d64 <mbedtls_ssl_read_record_layer+0x1ac>
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
    }

    return( diff );
 8089d54:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
        MBEDTLS_SSL_DEBUG_BUF( 4, "expected mac", mac_expect, ssl->transform_in->maclen );
        MBEDTLS_SSL_DEBUG_BUF( 4, "message  mac", ssl->in_msg + ssl->in_msglen,
                               ssl->transform_in->maclen );
#endif

        if( mbedtls_ssl_safer_memcmp( ssl->in_msg + ssl->in_msglen, mac_expect,
 8089d58:	2b00      	cmp	r3, #0
 8089d5a:	f040 8144 	bne.w	8089fe6 <mbedtls_ssl_read_record_layer+0x42e>
        auth_done++;

        /*
         * Finally check the correct flag
         */
        if( correct == 0 )
 8089d5e:	2d00      	cmp	r5, #0
 8089d60:	f000 8141 	beq.w	8089fe6 <mbedtls_ssl_read_record_layer+0x42e>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    if( ssl->in_msglen == 0 )
 8089d64:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8089d66:	2b00      	cmp	r3, #0
 8089d68:	f040 8144 	bne.w	8089ff4 <mbedtls_ssl_read_record_layer+0x43c>
    {
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3
 8089d6c:	68e3      	ldr	r3, [r4, #12]
 8089d6e:	2b03      	cmp	r3, #3
 8089d70:	f000 813b 	beq.w	8089fea <mbedtls_ssl_read_record_layer+0x432>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid zero-length message type: %d", ssl->in_msgtype ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

        ssl->nb_zero++;
 8089d74:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8089d76:	3301      	adds	r3, #1

        /*
         * Three or more empty messages may be a DoS attack
         * (excessive CPU consumption).
         */
        if( ssl->nb_zero > 3 )
 8089d78:	2b03      	cmp	r3, #3
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid zero-length message type: %d", ssl->in_msgtype ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

        ssl->nb_zero++;
 8089d7a:	67e3      	str	r3, [r4, #124]	; 0x7c

        /*
         * Three or more empty messages may be a DoS attack
         * (excessive CPU consumption).
         */
        if( ssl->nb_zero > 3 )
 8089d7c:	f300 8133 	bgt.w	8089fe6 <mbedtls_ssl_read_record_layer+0x42e>

        /*
         * Finally check the correct flag
         */
        if( correct == 0 )
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 8089d80:	2208      	movs	r2, #8
    }
    else
#endif
    {
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
            if( ++ssl->in_ctr[i - 1] != 0 )
 8089d82:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8089d84:	3a01      	subs	r2, #1
 8089d86:	5c8b      	ldrb	r3, [r1, r2]
 8089d88:	3301      	adds	r3, #1
 8089d8a:	b2db      	uxtb	r3, r3
 8089d8c:	548b      	strb	r3, [r1, r2]
 8089d8e:	2b00      	cmp	r3, #0
 8089d90:	f000 8133 	beq.w	8089ffa <mbedtls_ssl_read_record_layer+0x442>
        }

        MBEDTLS_SSL_DEBUG_BUF( 4, "input payload after decrypt",
                       ssl->in_msg, ssl->in_msglen );

        if( ssl->in_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
 8089d94:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8089d96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8089d9a:	f240 8137 	bls.w	808a00c <mbedtls_ssl_read_record_layer+0x454>
 8089d9e:	e133      	b.n	808a008 <mbedtls_ssl_read_record_layer+0x450>
    }
    else
#endif /* MBEDTLS_GCM_C || MBEDTLS_CCM_C */
#if defined(MBEDTLS_CIPHER_MODE_CBC) &&                                    \
    ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) )
    if( mode == MBEDTLS_MODE_CBC )
 8089da0:	2b02      	cmp	r3, #2
 8089da2:	f040 812f 	bne.w	808a004 <mbedtls_ssl_read_record_layer+0x44c>
        int ret;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        size_t dec_msglen;
        size_t minlen = 0;
        size_t olen = 0;
 8089da6:	2300      	movs	r3, #0
 8089da8:	930a      	str	r3, [sp, #40]	; 0x28

        /*
         * Check immediate ciphertext sanity
         */
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 8089daa:	68e0      	ldr	r0, [r4, #12]
 8089dac:	68f2      	ldr	r2, [r6, #12]
            minlen += ssl->transform_in->ivlen;
 8089dae:	2802      	cmp	r0, #2
 8089db0:	bfa8      	it	ge
 8089db2:	4613      	movge	r3, r2
#endif

        if( ssl->in_msglen < minlen + ssl->transform_in->ivlen ||
 8089db4:	18d1      	adds	r1, r2, r3
 8089db6:	428d      	cmp	r5, r1
 8089db8:	f0c0 8115 	bcc.w	8089fe6 <mbedtls_ssl_read_record_layer+0x42e>
 8089dbc:	6971      	ldr	r1, [r6, #20]
 8089dbe:	3101      	adds	r1, #1
 8089dc0:	440b      	add	r3, r1
 8089dc2:	429d      	cmp	r5, r3
 8089dc4:	f0c0 810f 	bcc.w	8089fe6 <mbedtls_ssl_read_record_layer+0x42e>
#endif /* MBEDTLS_SSL_ENCRYPT_THEN_MAC */

        /*
         * Check length sanity
         */
        if( ssl->in_msglen % ssl->transform_in->ivlen != 0 )
 8089dc8:	fbb5 f6f2 	udiv	r6, r5, r2
 8089dcc:	fb02 5616 	mls	r6, r2, r6, r5
 8089dd0:	2e00      	cmp	r6, #0
 8089dd2:	f040 8108 	bne.w	8089fe6 <mbedtls_ssl_read_record_layer+0x42e>

#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * Initialize for prepended IV for block cipher in TLS v1.1 and up
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 8089dd6:	2801      	cmp	r0, #1
                                ssl->transform_in->maclen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }

        dec_msglen = ssl->in_msglen;
        dec_msg = ssl->in_msg;
 8089dd8:	6e63      	ldr	r3, [r4, #100]	; 0x64

#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * Initialize for prepended IV for block cipher in TLS v1.1 and up
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 8089dda:	dd0d      	ble.n	8089df8 <mbedtls_ssl_read_record_layer+0x240>
        {
            dec_msglen -= ssl->transform_in->ivlen;
 8089ddc:	1aad      	subs	r5, r5, r2
            ssl->in_msglen -= ssl->transform_in->ivlen;

            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 8089dde:	4632      	mov	r2, r6
         * Initialize for prepended IV for block cipher in TLS v1.1 and up
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
        {
            dec_msglen -= ssl->transform_in->ivlen;
            ssl->in_msglen -= ssl->transform_in->ivlen;
 8089de0:	6725      	str	r5, [r4, #112]	; 0x70

            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 8089de2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8089de4:	68c8      	ldr	r0, [r1, #12]
 8089de6:	4290      	cmp	r0, r2
 8089de8:	d906      	bls.n	8089df8 <mbedtls_ssl_read_record_layer+0x240>
                ssl->transform_in->iv_dec[i] = ssl->in_iv[i];
 8089dea:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8089dec:	4411      	add	r1, r2
 8089dee:	5c80      	ldrb	r0, [r0, r2]
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
        {
            dec_msglen -= ssl->transform_in->ivlen;
            ssl->in_msglen -= ssl->transform_in->ivlen;

            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 8089df0:	3201      	adds	r2, #1
                ssl->transform_in->iv_dec[i] = ssl->in_iv[i];
 8089df2:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28
 8089df6:	e7f4      	b.n	8089de2 <mbedtls_ssl_read_record_layer+0x22a>
        }
#endif /* MBEDTLS_SSL_PROTO_TLS1_1 || MBEDTLS_SSL_PROTO_TLS1_2 */

        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_in->cipher_ctx_dec,
 8089df8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8089dfa:	af0a      	add	r7, sp, #40	; 0x28
 8089dfc:	9702      	str	r7, [sp, #8]
 8089dfe:	9301      	str	r3, [sp, #4]
 8089e00:	9500      	str	r5, [sp, #0]
 8089e02:	68c2      	ldr	r2, [r0, #12]
 8089e04:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8089e08:	3090      	adds	r0, #144	; 0x90
 8089e0a:	f7f9 fa05 	bl	8083218 <mbedtls_cipher_crypt>
 8089e0e:	2800      	cmp	r0, #0
 8089e10:	f040 80fd 	bne.w	808a00e <mbedtls_ssl_read_record_layer+0x456>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
            return( ret );
        }

        if( dec_msglen != olen )
 8089e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8089e16:	429d      	cmp	r5, r3
 8089e18:	f040 80f4 	bne.w	808a004 <mbedtls_ssl_read_record_layer+0x44c>
                    ssl->transform_in->cipher_ctx_dec.iv,
                    ssl->transform_in->ivlen );
        }
#endif

        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 8089e1c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8089e1e:	6e65      	ldr	r5, [r4, #100]	; 0x64

        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 8089e20:	6b61      	ldr	r1, [r4, #52]	; 0x34
                    ssl->transform_in->cipher_ctx_dec.iv,
                    ssl->transform_in->ivlen );
        }
#endif

        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 8089e22:	18ea      	adds	r2, r5, r3
 8089e24:	f812 ac01 	ldrb.w	sl, [r2, #-1]

        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 8089e28:	f8d1 c014 	ldr.w	ip, [r1, #20]
                    ssl->transform_in->cipher_ctx_dec.iv,
                    ssl->transform_in->ivlen );
        }
#endif

        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 8089e2c:	f10a 0e01 	add.w	lr, sl, #1

        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 8089e30:	eb0e 020c 	add.w	r2, lr, ip
 8089e34:	4293      	cmp	r3, r2
        }
        else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 8089e36:	68e2      	ldr	r2, [r4, #12]
        {
#if defined(MBEDTLS_SSL_DEBUG_ALL)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < maclen (%d) + padlen (%d)",
                        ssl->in_msglen, ssl->transform_in->maclen, padlen ) );
#endif
            padlen = 0;
 8089e38:	bf34      	ite	cc
 8089e3a:	4686      	movcc	lr, r0
{
    size_t i;
    mbedtls_cipher_mode_t mode;
    int auth_done = 0;
#if defined(SSL_SOME_MODES_USE_MAC)
    size_t padlen = 0, correct = 1;
 8089e3c:	2001      	movcs	r0, #1
        }
        else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 8089e3e:	2a00      	cmp	r2, #0
 8089e40:	f340 80e0 	ble.w	808a004 <mbedtls_ssl_read_record_layer+0x44c>
             *                     ssl->transform_in->maclen
             *
             * In both cases we reset padding_idx to a safe value (0) to
             * prevent out-of-buffer reads.
             */
            correct &= ( padlen <= ssl->in_msglen );
 8089e44:	4573      	cmp	r3, lr
 8089e46:	bf34      	ite	cc
 8089e48:	2000      	movcc	r0, #0
 8089e4a:	f000 0001 	andcs.w	r0, r0, #1
            /*
             * TLSv1+: always check the padding up to the first failure
             * and fake check up to 256 bytes of padding
             */
            size_t pad_count = 0, real_count = 1;
            size_t padding_idx = ssl->in_msglen - padlen;
 8089e4e:	ebce 0203 	rsb	r2, lr, r3
             * In both cases we reset padding_idx to a safe value (0) to
             * prevent out-of-buffer reads.
             */
            correct &= ( padlen <= ssl->in_msglen );
            correct &= ( padding_idx <= MBEDTLS_SSL_MAX_CONTENT_LEN +
                                       ssl->transform_in->maclen );
 8089e52:	f50c 5c00 	add.w	ip, ip, #8192	; 0x2000
 8089e56:	4562      	cmp	r2, ip
 8089e58:	bf8c      	ite	hi
 8089e5a:	2000      	movhi	r0, #0
 8089e5c:	f000 0001 	andls.w	r0, r0, #1
        {
            /*
             * TLSv1+: always check the padding up to the first failure
             * and fake check up to 256 bytes of padding
             */
            size_t pad_count = 0, real_count = 1;
 8089e60:	f04f 0800 	mov.w	r8, #0
            correct &= ( padding_idx <= MBEDTLS_SSL_MAX_CONTENT_LEN +
                                       ssl->transform_in->maclen );

            padding_idx *= correct;

            for( i = 0; i < 256; i++ )
 8089e64:	46c4      	mov	ip, r8
            {
                real_count &= ( i < padlen );
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 8089e66:	fb00 5202 	mla	r2, r0, r2, r5
        {
            /*
             * TLSv1+: always check the padding up to the first failure
             * and fake check up to 256 bytes of padding
             */
            size_t pad_count = 0, real_count = 1;
 8089e6a:	f04f 0901 	mov.w	r9, #1

            for( i = 0; i < 256; i++ )
            {
                real_count &= ( i < padlen );
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 8089e6e:	f10e 3aff 	add.w	sl, lr, #4294967295

            padding_idx *= correct;

            for( i = 0; i < 256; i++ )
            {
                real_count &= ( i < padlen );
 8089e72:	45e6      	cmp	lr, ip
 8089e74:	bf94      	ite	ls
 8089e76:	f04f 0900 	movls.w	r9, #0
 8089e7a:	f009 0901 	andhi.w	r9, r9, #1
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 8089e7e:	f812 500c 	ldrb.w	r5, [r2, ip]
            correct &= ( padding_idx <= MBEDTLS_SSL_MAX_CONTENT_LEN +
                                       ssl->transform_in->maclen );

            padding_idx *= correct;

            for( i = 0; i < 256; i++ )
 8089e82:	f10c 0c01 	add.w	ip, ip, #1
            {
                real_count &= ( i < padlen );
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 8089e86:	4555      	cmp	r5, sl
 8089e88:	bf14      	ite	ne
 8089e8a:	2500      	movne	r5, #0
 8089e8c:	2501      	moveq	r5, #1
            correct &= ( padding_idx <= MBEDTLS_SSL_MAX_CONTENT_LEN +
                                       ssl->transform_in->maclen );

            padding_idx *= correct;

            for( i = 0; i < 256; i++ )
 8089e8e:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
            {
                real_count &= ( i < padlen );
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 8089e92:	fb09 8805 	mla	r8, r9, r5, r8
            correct &= ( padding_idx <= MBEDTLS_SSL_MAX_CONTENT_LEN +
                                       ssl->transform_in->maclen );

            padding_idx *= correct;

            for( i = 0; i < 256; i++ )
 8089e96:	d1ec      	bne.n	8089e72 <mbedtls_ssl_read_record_layer+0x2ba>
                real_count &= ( i < padlen );
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
            }

            correct &= ( pad_count == padlen ); /* Only 1 on correct padding */
 8089e98:	45c6      	cmp	lr, r8
 8089e9a:	bf14      	ite	ne
 8089e9c:	2500      	movne	r5, #0
 8089e9e:	f000 0501 	andeq.w	r5, r0, #1

#if defined(MBEDTLS_SSL_DEBUG_ALL)
            if( padlen > 0 && correct == 0 )
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad padding byte detected" ) );
#endif
            padlen &= correct * 0x1FF;
 8089ea2:	ea4f 2a45 	mov.w	sl, r5, lsl #9
 8089ea6:	ebc5 0a0a 	rsb	sl, r5, sl
 8089eaa:	ea0a 0a0e 	and.w	sl, sl, lr
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->in_msglen -= padlen;
 8089eae:	ebca 0303 	rsb	r3, sl, r3
 8089eb2:	6723      	str	r3, [r4, #112]	; 0x70
#if defined(SSL_SOME_MODES_USE_MAC)
    if( auth_done == 0 )
    {
        unsigned char mac_expect[MBEDTLS_SSL_MAC_ADD];

        ssl->in_msglen -= ssl->transform_in->maclen;
 8089eb4:	694a      	ldr	r2, [r1, #20]
 8089eb6:	1a9b      	subs	r3, r3, r2

        ssl->in_len[0] = (unsigned char)( ssl->in_msglen >> 8 );
 8089eb8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
#if defined(SSL_SOME_MODES_USE_MAC)
    if( auth_done == 0 )
    {
        unsigned char mac_expect[MBEDTLS_SSL_MAC_ADD];

        ssl->in_msglen -= ssl->transform_in->maclen;
 8089eba:	6723      	str	r3, [r4, #112]	; 0x70

        ssl->in_len[0] = (unsigned char)( ssl->in_msglen >> 8 );
 8089ebc:	0a1b      	lsrs	r3, r3, #8
 8089ebe:	7013      	strb	r3, [r2, #0]
        ssl->in_len[1] = (unsigned char)( ssl->in_msglen      );
 8089ec0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8089ec2:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8089ec4:	705a      	strb	r2, [r3, #1]
        }
        else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
        defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 8089ec6:	68e3      	ldr	r3, [r4, #12]
 8089ec8:	2b00      	cmp	r3, #0
 8089eca:	f340 809b 	ble.w	808a004 <mbedtls_ssl_read_record_layer+0x44c>
             * length, as we previously did in_msglen -= maclen too.
             */
            const size_t max_len = ssl->in_msglen + padlen;
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;

            switch( ssl->transform_in->ciphersuite_info->mac )
 8089ece:	6b60      	ldr	r0, [r4, #52]	; 0x34
             * in_msglen -= padlen.
             *
             * Note that max_len + maclen is never more than the buffer
             * length, as we previously did in_msglen -= maclen too.
             */
            const size_t max_len = ssl->in_msglen + padlen;
 8089ed0:	6f23      	ldr	r3, [r4, #112]	; 0x70
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;

            switch( ssl->transform_in->ciphersuite_info->mac )
 8089ed2:	6802      	ldr	r2, [r0, #0]
             * in_msglen -= padlen.
             *
             * Note that max_len + maclen is never more than the buffer
             * length, as we previously did in_msglen -= maclen too.
             */
            const size_t max_len = ssl->in_msglen + padlen;
 8089ed4:	eb0a 0903 	add.w	r9, sl, r3
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;

            switch( ssl->transform_in->ciphersuite_info->mac )
 8089ed8:	7a52      	ldrb	r2, [r2, #9]
             *
             * Note that max_len + maclen is never more than the buffer
             * length, as we previously did in_msglen -= maclen too.
             */
            const size_t max_len = ssl->in_msglen + padlen;
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;
 8089eda:	f5b9 7f80 	cmp.w	r9, #256	; 0x100

            switch( ssl->transform_in->ciphersuite_info->mac )
 8089ede:	f1a2 0203 	sub.w	r2, r2, #3
             *
             * Note that max_len + maclen is never more than the buffer
             * length, as we previously did in_msglen -= maclen too.
             */
            const size_t max_len = ssl->in_msglen + padlen;
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;
 8089ee2:	bf88      	it	hi
 8089ee4:	f5a9 7680 	subhi.w	r6, r9, #256	; 0x100

            switch( ssl->transform_in->ciphersuite_info->mac )
 8089ee8:	2a04      	cmp	r2, #4
 8089eea:	f200 808b 	bhi.w	808a004 <mbedtls_ssl_read_record_layer+0x44c>
 8089eee:	e8df f002 	tbb	[pc, r2]
 8089ef2:	0303      	.short	0x0303
 8089ef4:	0389      	.short	0x0389
 8089ef6:	0b          	.byte	0x0b
 8089ef7:	00          	.byte	0x00
                case MBEDTLS_MD_MD5:
                case MBEDTLS_MD_SHA1:
                case MBEDTLS_MD_SHA256:
                    /* 8 bytes of message size, 64-byte compression blocks */
                    extra_run = ( 13 + ssl->in_msglen + padlen + 8 ) / 64 -
                                ( 13 + ssl->in_msglen          + 8 ) / 64;
 8089ef8:	f103 0215 	add.w	r2, r3, #21
 8089efc:	f109 0115 	add.w	r1, r9, #21
 8089f00:	0992      	lsrs	r2, r2, #6
 8089f02:	ebc2 1391 	rsb	r3, r2, r1, lsr #6
 8089f06:	e006      	b.n	8089f16 <mbedtls_ssl_read_record_layer+0x35e>
#endif
#if defined(MBEDTLS_SHA512_C)
                case MBEDTLS_MD_SHA384:
                    /* 16 bytes of message size, 128-byte compression blocks */
                    extra_run = ( 13 + ssl->in_msglen + padlen + 16 ) / 128 -
                                ( 13 + ssl->in_msglen          + 16 ) / 128;
 8089f08:	f103 021d 	add.w	r2, r3, #29
 8089f0c:	f109 011d 	add.w	r1, r9, #29
 8089f10:	09d2      	lsrs	r2, r2, #7
 8089f12:	ebc2 13d1 	rsb	r3, r2, r1, lsr #7
                default:
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
            }

            extra_run &= correct * 0xFF;
 8089f16:	ea4f 2805 	mov.w	r8, r5, lsl #8

            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 8089f1a:	2208      	movs	r2, #8
 8089f1c:	6d61      	ldr	r1, [r4, #84]	; 0x54
                default:
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
            }

            extra_run &= correct * 0xFF;
 8089f1e:	ebc5 0808 	rsb	r8, r5, r8

            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 8089f22:	3044      	adds	r0, #68	; 0x44
                default:
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
            }

            extra_run &= correct * 0xFF;
 8089f24:	ea08 0803 	and.w	r8, r8, r3

            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 8089f28:	f7fd fca0 	bl	808786c <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_hdr, 3 );
 8089f2c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8089f2e:	2203      	movs	r2, #3
 8089f30:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8089f32:	3044      	adds	r0, #68	; 0x44
 8089f34:	f7fd fc9a 	bl	808786c <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_len, 2 );
 8089f38:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8089f3a:	2202      	movs	r2, #2
 8089f3c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8089f3e:	3044      	adds	r0, #68	; 0x44
 8089f40:	f7fd fc94 	bl	808786c <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_msg,
 8089f44:	6b60      	ldr	r0, [r4, #52]	; 0x34
                             ssl->in_msglen );
 8089f46:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8089f48:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8089f4a:	3044      	adds	r0, #68	; 0x44
 8089f4c:	f7fd fc8e 	bl	808786c <mbedtls_md_hmac_update>
            /* Make sure we access everything even when padlen > 0. This
             * makes the synchronisation requirements for just-in-time
             * Prime+Probe attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + ssl->in_msglen, padlen );
 8089f50:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8089f52:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8089f54:	4413      	add	r3, r2
 8089f56:	449a      	add	sl, r3
      defined(MBEDTLS_SSL_PROTO_TLS1_2) )
/* This function makes sure every byte in the memory region is accessed
 * (in ascending addresses order) */
static void ssl_read_memory( unsigned char *p, size_t len )
{
    unsigned char acc = 0;
 8089f58:	2200      	movs	r2, #0
    volatile unsigned char force;

    for( ; len != 0; p++, len-- )
 8089f5a:	4553      	cmp	r3, sl
 8089f5c:	d003      	beq.n	8089f66 <mbedtls_ssl_read_record_layer+0x3ae>
        acc ^= *p;
 8089f5e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8089f62:	404a      	eors	r2, r1
 8089f64:	e7f9      	b.n	8089f5a <mbedtls_ssl_read_record_layer+0x3a2>
                             ssl->in_msglen );
            /* Make sure we access everything even when padlen > 0. This
             * makes the synchronisation requirements for just-in-time
             * Prime+Probe attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + ssl->in_msglen, padlen );
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );
 8089f66:	6b60      	ldr	r0, [r4, #52]	; 0x34
    volatile unsigned char force;

    for( ; len != 0; p++, len-- )
        acc ^= *p;

    force = acc;
 8089f68:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                             ssl->in_msglen );
            /* Make sure we access everything even when padlen > 0. This
             * makes the synchronisation requirements for just-in-time
             * Prime+Probe attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + ssl->in_msglen, padlen );
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );
 8089f6c:	4639      	mov	r1, r7
 8089f6e:	3044      	adds	r0, #68	; 0x44

    for( ; len != 0; p++, len-- )
        acc ^= *p;

    force = acc;
    (void) force;
 8089f70:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
                             ssl->in_msglen );
            /* Make sure we access everything even when padlen > 0. This
             * makes the synchronisation requirements for just-in-time
             * Prime+Probe attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + ssl->in_msglen, padlen );
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );
 8089f74:	f7fd fc8a 	bl	808788c <mbedtls_md_hmac_finish>

            /* Call mbedtls_md_process at least once due to cache attacks
             * that observe whether md_process() was called of not */
            for( j = 0; j < extra_run + 1; j++ )
 8089f78:	f04f 0a00 	mov.w	sl, #0
 8089f7c:	f108 0801 	add.w	r8, r8, #1
 8089f80:	45d0      	cmp	r8, sl
 8089f82:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8089f84:	d906      	bls.n	8089f94 <mbedtls_ssl_read_record_layer+0x3dc>
                mbedtls_md_process( &ssl->transform_in->md_ctx_dec, ssl->in_msg );
 8089f86:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8089f88:	3044      	adds	r0, #68	; 0x44
 8089f8a:	f7fd fcc7 	bl	808791c <mbedtls_md_process>
            ssl_read_memory( ssl->in_msg + ssl->in_msglen, padlen );
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );

            /* Call mbedtls_md_process at least once due to cache attacks
             * that observe whether md_process() was called of not */
            for( j = 0; j < extra_run + 1; j++ )
 8089f8e:	f10a 0a01 	add.w	sl, sl, #1
 8089f92:	e7f5      	b.n	8089f80 <mbedtls_ssl_read_record_layer+0x3c8>
                mbedtls_md_process( &ssl->transform_in->md_ctx_dec, ssl->in_msg );

            mbedtls_md_hmac_reset( &ssl->transform_in->md_ctx_dec );
 8089f94:	3044      	adds	r0, #68	; 0x44
 8089f96:	f7fd fca9 	bl	80878ec <mbedtls_md_hmac_reset>
            /* Make sure we access all the memory that could contain the MAC,
             * before we check it in the next code block. This makes the
             * synchronisation requirements for just-in-time Prime+Probe
             * attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + min_len,
                                 max_len - min_len + ssl->transform_in->maclen );
 8089f9a:	6b63      	ldr	r3, [r4, #52]	; 0x34

            /* Make sure we access all the memory that could contain the MAC,
             * before we check it in the next code block. This makes the
             * synchronisation requirements for just-in-time Prime+Probe
             * attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + min_len,
 8089f9c:	6e61      	ldr	r1, [r4, #100]	; 0x64
                                 max_len - min_len + ssl->transform_in->maclen );
 8089f9e:	6958      	ldr	r0, [r3, #20]
 8089fa0:	440e      	add	r6, r1
 8089fa2:	4481      	add	r9, r0
 8089fa4:	4489      	add	r9, r1
      defined(MBEDTLS_SSL_PROTO_TLS1_2) )
/* This function makes sure every byte in the memory region is accessed
 * (in ascending addresses order) */
static void ssl_read_memory( unsigned char *p, size_t len )
{
    unsigned char acc = 0;
 8089fa6:	2300      	movs	r3, #0
    volatile unsigned char force;

    for( ; len != 0; p++, len-- )
 8089fa8:	454e      	cmp	r6, r9
 8089faa:	d003      	beq.n	8089fb4 <mbedtls_ssl_read_record_layer+0x3fc>
        acc ^= *p;
 8089fac:	f816 2b01 	ldrb.w	r2, [r6], #1
 8089fb0:	4053      	eors	r3, r2
 8089fb2:	e7f9      	b.n	8089fa8 <mbedtls_ssl_read_record_layer+0x3f0>

    force = acc;
 8089fb4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    (void) force;
 8089fb8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
        MBEDTLS_SSL_DEBUG_BUF( 4, "expected mac", mac_expect, ssl->transform_in->maclen );
        MBEDTLS_SSL_DEBUG_BUF( 4, "message  mac", ssl->in_msg + ssl->in_msglen,
                               ssl->transform_in->maclen );
#endif

        if( mbedtls_ssl_safer_memcmp( ssl->in_msg + ssl->in_msglen, mac_expect,
 8089fbc:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
static inline int mbedtls_ssl_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;
 8089fc0:	2300      	movs	r3, #0
 8089fc2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23

    for( i = 0; i < n; i++ )
 8089fc6:	4298      	cmp	r0, r3
 8089fc8:	f43f aec4 	beq.w	8089d54 <mbedtls_ssl_read_record_layer+0x19c>
 8089fcc:	eb0c 0203 	add.w	r2, ip, r3
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
 8089fd0:	5c8a      	ldrb	r2, [r1, r2]
 8089fd2:	5cfe      	ldrb	r6, [r7, r3]
        diff |= x ^ y;
 8089fd4:	f89d e023 	ldrb.w	lr, [sp, #35]	; 0x23
 8089fd8:	4072      	eors	r2, r6
 8089fda:	ea4e 0202 	orr.w	r2, lr, r2
 8089fde:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 8089fe2:	3301      	adds	r3, #1
 8089fe4:	e7ef      	b.n	8089fc6 <mbedtls_ssl_read_record_layer+0x40e>

        /*
         * Finally check the correct flag
         */
        if( correct == 0 )
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 8089fe6:	480b      	ldr	r0, [pc, #44]	; (808a014 <mbedtls_ssl_read_record_layer+0x45c>)
 8089fe8:	e011      	b.n	808a00e <mbedtls_ssl_read_record_layer+0x456>

    if( ssl->in_msglen == 0 )
    {
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3
            && ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
 8089fea:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8089fec:	2b17      	cmp	r3, #23
 8089fee:	f43f aec1 	beq.w	8089d74 <mbedtls_ssl_read_record_layer+0x1bc>
 8089ff2:	e009      	b.n	808a008 <mbedtls_ssl_read_record_layer+0x450>
                                "messages, possible DoS attack" ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
    }
    else
        ssl->nb_zero = 0;
 8089ff4:	2300      	movs	r3, #0
 8089ff6:	67e3      	str	r3, [r4, #124]	; 0x7c
 8089ff8:	e6c2      	b.n	8089d80 <mbedtls_ssl_read_record_layer+0x1c8>
        ; /* in_ctr read from peer, not maintained internally */
    }
    else
#endif
    {
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
 8089ffa:	2a00      	cmp	r2, #0
 8089ffc:	f47f aec1 	bne.w	8089d82 <mbedtls_ssl_read_record_layer+0x1ca>

        /* The loop goes to its end iff the counter is wrapping */
        if( i == ssl_ep_len( ssl ) )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "incoming message counter would wrap" ) );
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 808a000:	4805      	ldr	r0, [pc, #20]	; (808a018 <mbedtls_ssl_read_record_layer+0x460>)
 808a002:	e004      	b.n	808a00e <mbedtls_ssl_read_record_layer+0x456>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );

    if( ssl->session_in == NULL || ssl->transform_in == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 808a004:	4805      	ldr	r0, [pc, #20]	; (808a01c <mbedtls_ssl_read_record_layer+0x464>)
 808a006:	e002      	b.n	808a00e <mbedtls_ssl_read_record_layer+0x456>
                       ssl->in_msg, ssl->in_msglen );

        if( ssl->in_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 808a008:	4805      	ldr	r0, [pc, #20]	; (808a020 <mbedtls_ssl_read_record_layer+0x468>)
 808a00a:	e000      	b.n	808a00e <mbedtls_ssl_read_record_layer+0x456>
            ssl_handshake_wrapup_free_hs_transform( ssl );
        }
    }
#endif

    return( 0 );
 808a00c:	2000      	movs	r0, #0
}
 808a00e:	b016      	add	sp, #88	; 0x58
 808a010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808a014:	ffff8e80 	.word	0xffff8e80
 808a018:	ffff9480 	.word	0xffff9480
 808a01c:	ffff9400 	.word	0xffff9400
 808a020:	ffff8e00 	.word	0xffff8e00

0808a024 <mbedtls_ssl_read_record>:
 * Silently ignore non-fatal alert (and for DTLS, invalid records as well,
 * RFC 6347 4.1.2.7) and continue reading until a valid record is found.
 *
 */
int mbedtls_ssl_read_record( mbedtls_ssl_context *ssl )
{
 808a024:	b538      	push	{r3, r4, r5, lr}
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );

    if( ssl->keep_current_message == 0 )
 808a026:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
 * Silently ignore non-fatal alert (and for DTLS, invalid records as well,
 * RFC 6347 4.1.2.7) and continue reading until a valid record is found.
 *
 */
int mbedtls_ssl_read_record( mbedtls_ssl_context *ssl )
{
 808a02a:	4605      	mov	r5, r0
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );

    if( ssl->keep_current_message == 0 )
 808a02c:	b98c      	cbnz	r4, 808a052 <mbedtls_ssl_read_record+0x2e>
    {
        do {

            if( ( ret = mbedtls_ssl_read_record_layer( ssl ) ) != 0 )
 808a02e:	4628      	mov	r0, r5
 808a030:	f7ff fdc2 	bl	8089bb8 <mbedtls_ssl_read_record_layer>
 808a034:	b988      	cbnz	r0, 808a05a <mbedtls_ssl_read_record+0x36>
            {
                MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
                return( ret );
            }

            ret = mbedtls_ssl_handle_message_type( ssl );
 808a036:	4628      	mov	r0, r5
 808a038:	f7ff fd76 	bl	8089b28 <mbedtls_ssl_handle_message_type>

        } while( MBEDTLS_ERR_SSL_NON_FATAL == ret );
 808a03c:	f510 4fcd 	cmn.w	r0, #26240	; 0x6680
 808a040:	d0f5      	beq.n	808a02e <mbedtls_ssl_read_record+0xa>

        if( 0 != ret )
 808a042:	b950      	cbnz	r0, 808a05a <mbedtls_ssl_read_record+0x36>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
            return( ret );
        }

        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 808a044:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 808a046:	2b16      	cmp	r3, #22
 808a048:	d108      	bne.n	808a05c <mbedtls_ssl_read_record+0x38>
        {
            mbedtls_ssl_update_handshake_status( ssl );
 808a04a:	4628      	mov	r0, r5
 808a04c:	f7ff fd5c 	bl	8089b08 <mbedtls_ssl_update_handshake_status>
 808a050:	e004      	b.n	808a05c <mbedtls_ssl_read_record+0x38>
        }
    }
    else
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= reuse previously read message" ) );
        ssl->keep_current_message = 0;
 808a052:	2400      	movs	r4, #0
 808a054:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
 808a058:	e000      	b.n	808a05c <mbedtls_ssl_read_record+0x38>
 808a05a:	4604      	mov	r4, r0
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read record" ) );

    return( 0 );
}
 808a05c:	4620      	mov	r0, r4
 808a05e:	bd38      	pop	{r3, r4, r5, pc}

0808a060 <mbedtls_ssl_write_certificate>:

#else
/* Some certificate support -> implement write and parse */

int mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl )
{
 808a060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_x509_crt *crt;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 808a062:	6c03      	ldr	r3, [r0, #64]	; 0x40

#else
/* Some certificate support -> implement write and parse */

int mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl )
{
 808a064:	4604      	mov	r4, r0
    const mbedtls_x509_crt *crt;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 808a066:	681b      	ldr	r3, [r3, #0]
 808a068:	7a9a      	ldrb	r2, [r3, #10]
 808a06a:	2a0b      	cmp	r2, #11
 808a06c:	d809      	bhi.n	808a082 <mbedtls_ssl_write_certificate+0x22>
 808a06e:	f44f 6316 	mov.w	r3, #2400	; 0x960
 808a072:	40d3      	lsrs	r3, r2
 808a074:	07da      	lsls	r2, r3, #31
 808a076:	d504      	bpl.n	808a082 <mbedtls_ssl_write_certificate+0x22>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
        ssl->state++;
 808a078:	6863      	ldr	r3, [r4, #4]
        return( 0 );
 808a07a:	2000      	movs	r0, #0
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
        ssl->state++;
 808a07c:	3301      	adds	r3, #1
 808a07e:	6063      	str	r3, [r4, #4]
        return( 0 );
 808a080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 808a082:	6822      	ldr	r2, [r4, #0]
 808a084:	f892 3060 	ldrb.w	r3, [r2, #96]	; 0x60
 808a088:	07db      	lsls	r3, r3, #31
 808a08a:	d403      	bmi.n	808a094 <mbedtls_ssl_write_certificate+0x34>
    {
        if( ssl->client_auth == 0 )
 808a08c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 808a090:	2b00      	cmp	r3, #0
 808a092:	d0f1      	beq.n	808a078 <mbedtls_ssl_write_certificate+0x18>

static inline mbedtls_x509_crt *mbedtls_ssl_own_cert( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 808a094:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808a096:	b10b      	cbz	r3, 808a09c <mbedtls_ssl_write_certificate+0x3c>
 808a098:	685b      	ldr	r3, [r3, #4]
 808a09a:	b90b      	cbnz	r3, 808a0a0 <mbedtls_ssl_write_certificate+0x40>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
 808a09c:	6c93      	ldr	r3, [r2, #72]	; 0x48

    return( key_cert == NULL ? NULL : key_cert->cert );
 808a09e:	b30b      	cbz	r3, 808a0e4 <mbedtls_ssl_write_certificate+0x84>
 808a0a0:	681e      	ldr	r6, [r3, #0]
 808a0a2:	2307      	movs	r3, #7
     *    n+3 . ...   upper level cert, etc.
     */
    i = 7;
    crt = mbedtls_ssl_own_cert( ssl );

    while( crt != NULL )
 808a0a4:	b1fe      	cbz	r6, 808a0e6 <mbedtls_ssl_write_certificate+0x86>
    {
        n = crt->raw.len;
 808a0a6:	6875      	ldr	r5, [r6, #4]
        if( n > MBEDTLS_SSL_MAX_CONTENT_LEN - 3 - i )
 808a0a8:	f5c3 52ff 	rsb	r2, r3, #8160	; 0x1fe0
 808a0ac:	321d      	adds	r2, #29
 808a0ae:	4295      	cmp	r5, r2
 808a0b0:	d836      	bhi.n	808a120 <mbedtls_ssl_write_certificate+0xc0>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
                           i + 3 + n, MBEDTLS_SSL_MAX_CONTENT_LEN ) );
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
        }

        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
 808a0b2:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 808a0b6:	0c29      	lsrs	r1, r5, #16
 808a0b8:	54d1      	strb	r1, [r2, r3]
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
 808a0ba:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 808a0be:	0a29      	lsrs	r1, r5, #8
 808a0c0:	441a      	add	r2, r3
 808a0c2:	7051      	strb	r1, [r2, #1]
        ssl->out_msg[i + 2] = (unsigned char)( n       );
 808a0c4:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
 808a0c8:	1cdf      	adds	r7, r3, #3
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
        }

        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
        ssl->out_msg[i + 2] = (unsigned char)( n       );
 808a0ca:	441a      	add	r2, r3
 808a0cc:	7095      	strb	r5, [r2, #2]

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
 808a0ce:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 808a0d2:	68b1      	ldr	r1, [r6, #8]
 808a0d4:	462a      	mov	r2, r5
 808a0d6:	4438      	add	r0, r7
 808a0d8:	f008 f937 	bl	809234a <memcpy>
        i += n; crt = crt->next;
 808a0dc:	19eb      	adds	r3, r5, r7
 808a0de:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
     *    n+3 . ...   upper level cert, etc.
     */
    i = 7;
    crt = mbedtls_ssl_own_cert( ssl );

    while( crt != NULL )
 808a0e2:	e7df      	b.n	808a0a4 <mbedtls_ssl_write_certificate+0x44>
 808a0e4:	2307      	movs	r3, #7

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
        i += n; crt = crt->next;
    }

    ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );
 808a0e6:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 808a0ea:	1fda      	subs	r2, r3, #7
 808a0ec:	0c10      	lsrs	r0, r2, #16
 808a0ee:	7108      	strb	r0, [r1, #4]
    ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );
 808a0f0:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 808a0f4:	0a10      	lsrs	r0, r2, #8
 808a0f6:	7148      	strb	r0, [r1, #5]
    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
 808a0f8:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
write_msg:
#endif

    ssl->state++;

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 808a0fc:	4620      	mov	r0, r4
        i += n; crt = crt->next;
    }

    ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );
    ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );
    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
 808a0fe:	718a      	strb	r2, [r1, #6]

    ssl->out_msglen  = i;
 808a100:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 808a104:	2316      	movs	r3, #22
 808a106:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE;
 808a10a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 808a10e:	220b      	movs	r2, #11
 808a110:	701a      	strb	r2, [r3, #0]

#if defined(MBEDTLS_SSL_PROTO_SSL3) && defined(MBEDTLS_SSL_CLI_C)
write_msg:
#endif

    ssl->state++;
 808a112:	6863      	ldr	r3, [r4, #4]
 808a114:	3301      	adds	r3, #1
 808a116:	6063      	str	r3, [r4, #4]
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );

    return( ret );
}
 808a118:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
write_msg:
#endif

    ssl->state++;

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 808a11c:	f7ff bb80 	b.w	8089820 <mbedtls_ssl_write_record>
        n = crt->raw.len;
        if( n > MBEDTLS_SSL_MAX_CONTENT_LEN - 3 - i )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
                           i + 3 + n, MBEDTLS_SSL_MAX_CONTENT_LEN ) );
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
 808a120:	4800      	ldr	r0, [pc, #0]	; (808a124 <mbedtls_ssl_write_certificate+0xc4>)
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );

    return( ret );
}
 808a122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808a124:	ffff8b00 	.word	0xffff8b00

0808a128 <mbedtls_ssl_write_change_cipher_spec>:
{
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );

    ssl->out_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;
 808a128:	2214      	movs	r2, #20
    ssl->out_msglen  = 1;
    ssl->out_msg[0]  = 1;
 808a12a:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
{
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );

    ssl->out_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;
 808a12e:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
    ssl->out_msglen  = 1;
 808a132:	2201      	movs	r2, #1
 808a134:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
    ssl->out_msg[0]  = 1;
 808a138:	700a      	strb	r2, [r1, #0]

    ssl->state++;
 808a13a:	6842      	ldr	r2, [r0, #4]
 808a13c:	3201      	adds	r2, #1
 808a13e:	6042      	str	r2, [r0, #4]

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 808a140:	f7ff bb6e 	b.w	8089820 <mbedtls_ssl_write_record>

0808a144 <mbedtls_ssl_parse_change_cipher_spec>:

    return( 0 );
}

int mbedtls_ssl_parse_change_cipher_spec( mbedtls_ssl_context *ssl )
{
 808a144:	b510      	push	{r4, lr}
 808a146:	4604      	mov	r4, r0
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse change cipher spec" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808a148:	f7ff ff6c 	bl	808a024 <mbedtls_ssl_read_record>
 808a14c:	2800      	cmp	r0, #0
 808a14e:	d12f      	bne.n	808a1b0 <mbedtls_ssl_parse_change_cipher_spec+0x6c>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
 808a150:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808a152:	2b14      	cmp	r3, #20
 808a154:	d006      	beq.n	808a164 <mbedtls_ssl_parse_change_cipher_spec+0x20>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 808a156:	220a      	movs	r2, #10
 808a158:	2102      	movs	r1, #2
 808a15a:	4620      	mov	r0, r4
 808a15c:	f7ff fd14 	bl	8089b88 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 808a160:	4814      	ldr	r0, [pc, #80]	; (808a1b4 <mbedtls_ssl_parse_change_cipher_spec+0x70>)
 808a162:	bd10      	pop	{r4, pc}
    }

    if( ssl->in_msglen != 1 || ssl->in_msg[0] != 1 )
 808a164:	6f23      	ldr	r3, [r4, #112]	; 0x70
 808a166:	2b01      	cmp	r3, #1
 808a168:	d103      	bne.n	808a172 <mbedtls_ssl_parse_change_cipher_spec+0x2e>
 808a16a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 808a16c:	781b      	ldrb	r3, [r3, #0]
 808a16e:	2b01      	cmp	r3, #1
 808a170:	d006      	beq.n	808a180 <mbedtls_ssl_parse_change_cipher_spec+0x3c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 808a172:	2232      	movs	r2, #50	; 0x32
 808a174:	2102      	movs	r1, #2
 808a176:	4620      	mov	r0, r4
 808a178:	f7ff fd06 	bl	8089b88 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC );
 808a17c:	480e      	ldr	r0, [pc, #56]	; (808a1b8 <mbedtls_ssl_parse_change_cipher_spec+0x74>)
 808a17e:	bd10      	pop	{r4, pc}
    /*
     * Switch to our negotiated transform and session parameters for inbound
     * data.
     */
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for inbound data" ) );
    ssl->transform_in = ssl->transform_negotiate;
 808a180:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808a182:	6363      	str	r3, [r4, #52]	; 0x34
    ssl->session_in = ssl->session_negotiate;
 808a184:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 808a186:	6223      	str	r3, [r4, #32]
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
        }
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->in_ctr, 0, 8 );
 808a188:	6d63      	ldr	r3, [r4, #84]	; 0x54
 808a18a:	6018      	str	r0, [r3, #0]
 808a18c:	6058      	str	r0, [r3, #4]

    /*
     * Set the in_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 808a18e:	68e3      	ldr	r3, [r4, #12]
 808a190:	6e21      	ldr	r1, [r4, #96]	; 0x60
 808a192:	2b01      	cmp	r3, #1
    {
        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
 808a194:	bfc9      	itett	gt
 808a196:	6c23      	ldrgt	r3, [r4, #64]	; 0x40
                      ssl->transform_negotiate->fixed_ivlen;
    }
    else
        ssl->in_msg = ssl->in_iv;
 808a198:	6661      	strle	r1, [r4, #100]	; 0x64
     * Set the in_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
                      ssl->transform_negotiate->fixed_ivlen;
 808a19a:	68da      	ldrgt	r2, [r3, #12]
 808a19c:	691b      	ldrgt	r3, [r3, #16]

    ssl->state++;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );

    return( 0 );
 808a19e:	f04f 0000 	mov.w	r0, #0
     * Set the in_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
                      ssl->transform_negotiate->fixed_ivlen;
 808a1a2:	bfc2      	ittt	gt
 808a1a4:	1ad3      	subgt	r3, r2, r3
 808a1a6:	185b      	addgt	r3, r3, r1
 808a1a8:	6663      	strgt	r3, [r4, #100]	; 0x64
            return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );
        }
    }
#endif

    ssl->state++;
 808a1aa:	6863      	ldr	r3, [r4, #4]
 808a1ac:	3301      	adds	r3, #1
 808a1ae:	6063      	str	r3, [r4, #4]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );

    return( 0 );
}
 808a1b0:	bd10      	pop	{r4, pc}
 808a1b2:	bf00      	nop
 808a1b4:	ffff8900 	.word	0xffff8900
 808a1b8:	ffff8200 	.word	0xffff8200

0808a1bc <mbedtls_ssl_optimize_checksum>:
        ssl->handshake->update_checksum = ssl_update_checksum_md5sha1;
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
 808a1bc:	7a4b      	ldrb	r3, [r1, #9]
 808a1be:	2b07      	cmp	r3, #7
        ssl->handshake->update_checksum = ssl_update_checksum_sha384;
 808a1c0:	bf08      	it	eq
 808a1c2:	4a03      	ldreq	r2, [pc, #12]	; (808a1d0 <mbedtls_ssl_optimize_checksum+0x14>)
 808a1c4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    else
#endif
#if defined(MBEDTLS_SHA256_C)
    if( ciphersuite_info->mac != MBEDTLS_MD_SHA384 )
        ssl->handshake->update_checksum = ssl_update_checksum_sha256;
 808a1c6:	bf18      	it	ne
 808a1c8:	4a02      	ldrne	r2, [pc, #8]	; (808a1d4 <mbedtls_ssl_optimize_checksum+0x18>)
 808a1ca:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
 808a1ce:	4770      	bx	lr
 808a1d0:	08089421 	.word	0x08089421
 808a1d4:	08089419 	.word	0x08089419

0808a1d8 <mbedtls_ssl_write_finished>:

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup" ) );
}

int mbedtls_ssl_write_finished( mbedtls_ssl_context *ssl )
{
 808a1d8:	b510      	push	{r4, lr}
 808a1da:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write finished" ) );

    /*
     * Set the out_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 808a1dc:	68c3      	ldr	r3, [r0, #12]
 808a1de:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94
 808a1e2:	2b01      	cmp	r3, #1
    {
        ssl->out_msg = ssl->out_iv + ssl->transform_negotiate->ivlen -
 808a1e4:	bfc9      	itett	gt
 808a1e6:	6c03      	ldrgt	r3, [r0, #64]	; 0x40
                       ssl->transform_negotiate->fixed_ivlen;
    }
    else
        ssl->out_msg = ssl->out_iv;
 808a1e8:	f8c0 1098 	strle.w	r1, [r0, #152]	; 0x98
     * Set the out_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->out_msg = ssl->out_iv + ssl->transform_negotiate->ivlen -
                       ssl->transform_negotiate->fixed_ivlen;
 808a1ec:	68da      	ldrgt	r2, [r3, #12]
 808a1ee:	691b      	ldrgt	r3, [r3, #16]
 808a1f0:	bfc2      	ittt	gt
 808a1f2:	1ad3      	subgt	r3, r2, r3
 808a1f4:	185b      	addgt	r3, r3, r1
 808a1f6:	f8c0 3098 	strgt.w	r3, [r0, #152]	; 0x98
    }
    else
        ssl->out_msg = ssl->out_iv;

    ssl->handshake->calc_finished( ssl, ssl->out_msg + 4, ssl->conf->endpoint );
 808a1fa:	6803      	ldr	r3, [r0, #0]
 808a1fc:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
 808a200:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 808a204:	6b03      	ldr	r3, [r0, #48]	; 0x30
 808a206:	f002 0201 	and.w	r2, r2, #1
 808a20a:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 808a20e:	3104      	adds	r1, #4
 808a210:	4798      	blx	r3
     * RFC 5246 7.4.9 (Page 63) says 12 is the default length and ciphersuites
     * may define some other value. Currently (early 2016), no defined
     * ciphersuite does this (and this is unlikely to change as activity has
     * moved to TLS 1.3 now) so we can keep the hardcoded 12 here.
     */
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
 808a212:	68e3      	ldr	r3, [r4, #12]
    memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );
#endif

    ssl->out_msglen  = 4 + hash_len;
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
 808a214:	2214      	movs	r2, #20
     * RFC 5246 7.4.9 (Page 63) says 12 is the default length and ciphersuites
     * may define some other value. Currently (early 2016), no defined
     * ciphersuite does this (and this is unlikely to change as activity has
     * moved to TLS 1.3 now) so we can keep the hardcoded 12 here.
     */
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
 808a216:	2b00      	cmp	r3, #0
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    ssl->verify_data_len = hash_len;
    memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );
#endif

    ssl->out_msglen  = 4 + hash_len;
 808a218:	bf14      	ite	ne
 808a21a:	2310      	movne	r3, #16
 808a21c:	2328      	moveq	r3, #40	; 0x28
 808a21e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 808a222:	2316      	movs	r3, #22
 808a224:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
 808a228:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 808a22c:	701a      	strb	r2, [r3, #0]

    /*
     * In case of session resuming, invert the client and server
     * ChangeCipherSpec messages order.
     */
    if( ssl->handshake->resume != 0 )
 808a22e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808a230:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 808a234:	b133      	cbz	r3, 808a244 <mbedtls_ssl_write_finished+0x6c>
    {
#if defined(MBEDTLS_SSL_CLI_C)
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 808a236:	6823      	ldr	r3, [r4, #0]
 808a238:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 808a23c:	07db      	lsls	r3, r3, #31
 808a23e:	d404      	bmi.n	808a24a <mbedtls_ssl_write_finished+0x72>
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 808a240:	230f      	movs	r3, #15
 808a242:	e001      	b.n	808a248 <mbedtls_ssl_write_finished+0x70>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
#endif
    }
    else
        ssl->state++;
 808a244:	6863      	ldr	r3, [r4, #4]
 808a246:	3301      	adds	r3, #1
 808a248:	6063      	str	r3, [r4, #4]
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
        }
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->out_ctr, 0, 8 );
 808a24a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 808a24e:	2200      	movs	r2, #0
 808a250:	601a      	str	r2, [r3, #0]
 808a252:	605a      	str	r2, [r3, #4]

    ssl->transform_out = ssl->transform_negotiate;
 808a254:	6c23      	ldr	r3, [r4, #64]	; 0x40
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        mbedtls_ssl_send_flight_completed( ssl );
#endif

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 808a256:	4620      	mov	r0, r4
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->out_ctr, 0, 8 );

    ssl->transform_out = ssl->transform_negotiate;
 808a258:	63a3      	str	r3, [r4, #56]	; 0x38
    ssl->session_out = ssl->session_negotiate;
 808a25a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 808a25c:	6263      	str	r3, [r4, #36]	; 0x24
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write finished" ) );

    return( 0 );
}
 808a25e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        mbedtls_ssl_send_flight_completed( ssl );
#endif

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 808a262:	f7ff badd 	b.w	8089820 <mbedtls_ssl_write_record>
	...

0808a268 <mbedtls_ssl_parse_finished>:
#else
#define SSL_MAX_HASH_LEN 12
#endif

int mbedtls_ssl_parse_finished( mbedtls_ssl_context *ssl )
{
 808a268:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    unsigned int hash_len;
    unsigned char buf[SSL_MAX_HASH_LEN];

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );

    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
 808a26a:	6803      	ldr	r3, [r0, #0]
#else
#define SSL_MAX_HASH_LEN 12
#endif

int mbedtls_ssl_parse_finished( mbedtls_ssl_context *ssl )
{
 808a26c:	4604      	mov	r4, r0
    unsigned int hash_len;
    unsigned char buf[SSL_MAX_HASH_LEN];

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );

    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
 808a26e:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 808a272:	6b03      	ldr	r3, [r0, #48]	; 0x30
 808a274:	43d2      	mvns	r2, r2
 808a276:	ad01      	add	r5, sp, #4
 808a278:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 808a27c:	f002 0201 	and.w	r2, r2, #1
 808a280:	4629      	mov	r1, r5
 808a282:	4798      	blx	r3

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808a284:	4620      	mov	r0, r4
 808a286:	f7ff fecd 	bl	808a024 <mbedtls_ssl_read_record>
 808a28a:	2800      	cmp	r0, #0
 808a28c:	d13b      	bne.n	808a306 <mbedtls_ssl_parse_finished+0x9e>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 808a28e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808a290:	2b16      	cmp	r3, #22
 808a292:	d006      	beq.n	808a2a2 <mbedtls_ssl_parse_finished+0x3a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 808a294:	220a      	movs	r2, #10
 808a296:	2102      	movs	r1, #2
 808a298:	4620      	mov	r0, r4
 808a29a:	f7ff fc75 	bl	8089b88 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 808a29e:	481b      	ldr	r0, [pc, #108]	; (808a30c <mbedtls_ssl_parse_finished+0xa4>)
 808a2a0:	e031      	b.n	808a306 <mbedtls_ssl_parse_finished+0x9e>
        hash_len = 36;
    else
#endif
        hash_len = 12;

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_FINISHED ||
 808a2a2:	6e61      	ldr	r1, [r4, #100]	; 0x64
 808a2a4:	780b      	ldrb	r3, [r1, #0]
 808a2a6:	2b14      	cmp	r3, #20
 808a2a8:	d115      	bne.n	808a2d6 <mbedtls_ssl_parse_finished+0x6e>
 808a2aa:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 808a2ac:	2b10      	cmp	r3, #16
 808a2ae:	d112      	bne.n	808a2d6 <mbedtls_ssl_parse_finished+0x6e>
static inline int mbedtls_ssl_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;
 808a2b0:	f88d 0003 	strb.w	r0, [sp, #3]
 808a2b4:	1d03      	adds	r3, r0, #4
    for( i = 0; i < n; i++ )
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
 808a2b6:	5ccb      	ldrb	r3, [r1, r3]
 808a2b8:	5c2a      	ldrb	r2, [r5, r0]
        diff |= x ^ y;
 808a2ba:	f89d 6003 	ldrb.w	r6, [sp, #3]
 808a2be:	4053      	eors	r3, r2
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 808a2c0:	3001      	adds	r0, #1
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
 808a2c2:	4333      	orrs	r3, r6
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 808a2c4:	280c      	cmp	r0, #12
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
 808a2c6:	f88d 3003 	strb.w	r3, [sp, #3]
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 808a2ca:	d1f3      	bne.n	808a2b4 <mbedtls_ssl_parse_finished+0x4c>
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
    }

    return( diff );
 808a2cc:	f89d 3003 	ldrb.w	r3, [sp, #3]
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
    }

    if( mbedtls_ssl_safer_memcmp( ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl ),
 808a2d0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 808a2d4:	b133      	cbz	r3, 808a2e4 <mbedtls_ssl_parse_finished+0x7c>
                      buf, hash_len ) != 0 )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 808a2d6:	2232      	movs	r2, #50	; 0x32
 808a2d8:	2102      	movs	r1, #2
 808a2da:	4620      	mov	r0, r4
 808a2dc:	f7ff fc54 	bl	8089b88 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
 808a2e0:	480b      	ldr	r0, [pc, #44]	; (808a310 <mbedtls_ssl_parse_finished+0xa8>)
 808a2e2:	e010      	b.n	808a306 <mbedtls_ssl_parse_finished+0x9e>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    ssl->verify_data_len = hash_len;
    memcpy( ssl->peer_verify_data, buf, hash_len );
#endif

    if( ssl->handshake->resume != 0 )
 808a2e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808a2e6:	f8d3 01e4 	ldr.w	r0, [r3, #484]	; 0x1e4
 808a2ea:	b138      	cbz	r0, 808a2fc <mbedtls_ssl_parse_finished+0x94>
    {
#if defined(MBEDTLS_SSL_CLI_C)
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 808a2ec:	6823      	ldr	r3, [r4, #0]
 808a2ee:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
 808a2f2:	f010 0001 	ands.w	r0, r0, #1
 808a2f6:	d105      	bne.n	808a304 <mbedtls_ssl_parse_finished+0x9c>
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
 808a2f8:	230a      	movs	r3, #10
 808a2fa:	e001      	b.n	808a300 <mbedtls_ssl_parse_finished+0x98>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
#endif
    }
    else
        ssl->state++;
 808a2fc:	6863      	ldr	r3, [r4, #4]
 808a2fe:	3301      	adds	r3, #1
 808a300:	6063      	str	r3, [r4, #4]
 808a302:	e000      	b.n	808a306 <mbedtls_ssl_parse_finished+0x9e>
        mbedtls_ssl_recv_flight_completed( ssl );
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse finished" ) );

    return( 0 );
 808a304:	4610      	mov	r0, r2
}
 808a306:	b004      	add	sp, #16
 808a308:	bd70      	pop	{r4, r5, r6, pc}
 808a30a:	bf00      	nop
 808a30c:	ffff8900 	.word	0xffff8900
 808a310:	ffff8180 	.word	0xffff8180

0808a314 <mbedtls_ssl_session_init>:
    mbedtls_md_init( &transform->md_ctx_dec );
}

void mbedtls_ssl_session_init( mbedtls_ssl_session *session )
{
    memset( session, 0, sizeof(mbedtls_ssl_session) );
 808a314:	2274      	movs	r2, #116	; 0x74
 808a316:	2100      	movs	r1, #0
 808a318:	f008 b83d 	b.w	8092396 <memset>

0808a31c <mbedtls_ssl_init>:
/*
 * Initialize an SSL context
 */
void mbedtls_ssl_init( mbedtls_ssl_context *ssl )
{
    memset( ssl, 0, sizeof( mbedtls_ssl_context ) );
 808a31c:	22b4      	movs	r2, #180	; 0xb4
 808a31e:	2100      	movs	r1, #0
 808a320:	f008 b839 	b.w	8092396 <memset>

0808a324 <mbedtls_ssl_conf_authmode>:
}
#endif

void mbedtls_ssl_conf_authmode( mbedtls_ssl_config *conf, int authmode )
{
    conf->authmode   = authmode;
 808a324:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 808a328:	f361 0383 	bfi	r3, r1, #2, #2
 808a32c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 808a330:	4770      	bx	lr

0808a332 <mbedtls_ssl_conf_verify>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
void mbedtls_ssl_conf_verify( mbedtls_ssl_config *conf,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
    conf->f_vrfy      = f_vrfy;
 808a332:	6341      	str	r1, [r0, #52]	; 0x34
    conf->p_vrfy      = p_vrfy;
 808a334:	6382      	str	r2, [r0, #56]	; 0x38
 808a336:	4770      	bx	lr

0808a338 <mbedtls_ssl_conf_rng>:

void mbedtls_ssl_conf_rng( mbedtls_ssl_config *conf,
                  int (*f_rng)(void *, unsigned char *, size_t),
                  void *p_rng )
{
    conf->f_rng      = f_rng;
 808a338:	6181      	str	r1, [r0, #24]
    conf->p_rng      = p_rng;
 808a33a:	61c2      	str	r2, [r0, #28]
 808a33c:	4770      	bx	lr

0808a33e <mbedtls_ssl_conf_dbg>:

void mbedtls_ssl_conf_dbg( mbedtls_ssl_config *conf,
                  void (*f_dbg)(void *, int, const char *, int, const char *),
                  void  *p_dbg )
{
    conf->f_dbg      = f_dbg;
 808a33e:	6101      	str	r1, [r0, #16]
    conf->p_dbg      = p_dbg;
 808a340:	6142      	str	r2, [r0, #20]
 808a342:	4770      	bx	lr

0808a344 <mbedtls_ssl_set_bio>:
        mbedtls_ssl_recv_t *f_recv,
        mbedtls_ssl_recv_timeout_t *f_recv_timeout )
{
    ssl->p_bio          = p_bio;
    ssl->f_send         = f_send;
    ssl->f_recv         = f_recv;
 808a344:	6143      	str	r3, [r0, #20]
    ssl->f_recv_timeout = f_recv_timeout;
 808a346:	9b00      	ldr	r3, [sp, #0]
        void *p_bio,
        mbedtls_ssl_send_t *f_send,
        mbedtls_ssl_recv_t *f_recv,
        mbedtls_ssl_recv_timeout_t *f_recv_timeout )
{
    ssl->p_bio          = p_bio;
 808a348:	61c1      	str	r1, [r0, #28]
    ssl->f_send         = f_send;
 808a34a:	6102      	str	r2, [r0, #16]
    ssl->f_recv         = f_recv;
    ssl->f_recv_timeout = f_recv_timeout;
 808a34c:	6183      	str	r3, [r0, #24]
 808a34e:	4770      	bx	lr

0808a350 <mbedtls_ssl_set_timer_cb>:

void mbedtls_ssl_set_timer_cb( mbedtls_ssl_context *ssl,
                               void *p_timer,
                               mbedtls_ssl_set_timer_t *f_set_timer,
                               mbedtls_ssl_get_timer_t *f_get_timer )
{
 808a350:	b410      	push	{r4}
    ssl->p_timer        = p_timer;
 808a352:	6441      	str	r1, [r0, #68]	; 0x44
    ssl->f_set_timer    = f_set_timer;
 808a354:	6482      	str	r2, [r0, #72]	; 0x48
    ssl->f_get_timer    = f_get_timer;
 808a356:	64c3      	str	r3, [r0, #76]	; 0x4c

    /* Make sure we start with no timer running */
    ssl_set_timer( ssl, 0 );
 808a358:	2100      	movs	r1, #0
}
 808a35a:	bc10      	pop	{r4}
    ssl->p_timer        = p_timer;
    ssl->f_set_timer    = f_set_timer;
    ssl->f_get_timer    = f_get_timer;

    /* Make sure we start with no timer running */
    ssl_set_timer( ssl, 0 );
 808a35c:	f7fe beee 	b.w	808913c <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>

0808a360 <mbedtls_ssl_conf_own_cert>:

int mbedtls_ssl_conf_own_cert( mbedtls_ssl_config *conf,
                              mbedtls_x509_crt *own_cert,
                              mbedtls_pk_context *pk_key )
{
    return( ssl_append_key_cert( &conf->key_cert, own_cert, pk_key ) );
 808a360:	3048      	adds	r0, #72	; 0x48
 808a362:	f7ff b83b 	b.w	80893dc <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context>

0808a366 <mbedtls_ssl_conf_ca_chain>:

void mbedtls_ssl_conf_ca_chain( mbedtls_ssl_config *conf,
                               mbedtls_x509_crt *ca_chain,
                               mbedtls_x509_crl *ca_crl )
{
    conf->ca_chain   = ca_chain;
 808a366:	64c1      	str	r1, [r0, #76]	; 0x4c
    conf->ca_crl     = ca_crl;
 808a368:	6502      	str	r2, [r0, #80]	; 0x50
 808a36a:	4770      	bx	lr

0808a36c <mbedtls_ssl_set_hostname>:
}
#endif /* MBEDTLS_ECP_C */

#if defined(MBEDTLS_X509_CRT_PARSE_C)
int mbedtls_ssl_set_hostname( mbedtls_ssl_context *ssl, const char *hostname )
{
 808a36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808a36e:	4606      	mov	r6, r0
    /* Initialize to suppress unnecessary compiler warning */
    size_t hostname_len = 0;

    /* Check if new hostname is valid before
     * making any change to current one */
    if( hostname != NULL )
 808a370:	460c      	mov	r4, r1
 808a372:	b131      	cbz	r1, 808a382 <mbedtls_ssl_set_hostname+0x16>
    {
        hostname_len = strlen( hostname );
 808a374:	4608      	mov	r0, r1
 808a376:	f008 f845 	bl	8092404 <strlen>

        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
 808a37a:	28ff      	cmp	r0, #255	; 0xff

    /* Check if new hostname is valid before
     * making any change to current one */
    if( hostname != NULL )
    {
        hostname_len = strlen( hostname );
 808a37c:	4605      	mov	r5, r0

        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
 808a37e:	d901      	bls.n	808a384 <mbedtls_ssl_set_hostname+0x18>
 808a380:	e022      	b.n	808a3c8 <mbedtls_ssl_set_hostname+0x5c>

#if defined(MBEDTLS_X509_CRT_PARSE_C)
int mbedtls_ssl_set_hostname( mbedtls_ssl_context *ssl, const char *hostname )
{
    /* Initialize to suppress unnecessary compiler warning */
    size_t hostname_len = 0;
 808a382:	460d      	mov	r5, r1
    }

    /* Now it's clear that we will overwrite the old hostname,
     * so we can free it safely */

    if( ssl->hostname != NULL )
 808a384:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 808a388:	b157      	cbz	r7, 808a3a0 <mbedtls_ssl_set_hostname+0x34>
    {
        mbedtls_zeroize( ssl->hostname, strlen( ssl->hostname ) );
 808a38a:	4638      	mov	r0, r7
 808a38c:	f008 f83a 	bl	8092404 <strlen>
 808a390:	4601      	mov	r1, r0
 808a392:	4638      	mov	r0, r7
 808a394:	f7fe feca 	bl	808912c <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( ssl->hostname );
 808a398:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
 808a39c:	f006 fa6c 	bl	8090878 <free>
    }

    /* Passing NULL as hostname shall clear the old one */

    if( hostname == NULL )
 808a3a0:	b91c      	cbnz	r4, 808a3aa <mbedtls_ssl_set_hostname+0x3e>
    {
        ssl->hostname = NULL;
 808a3a2:	f8c6 40ac 	str.w	r4, [r6, #172]	; 0xac
        memcpy( ssl->hostname, hostname, hostname_len );

        ssl->hostname[hostname_len] = '\0';
    }

    return( 0 );
 808a3a6:	4620      	mov	r0, r4
 808a3a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    {
        ssl->hostname = NULL;
    }
    else
    {
        ssl->hostname = (char *)mbedtls_calloc( 1, hostname_len + 1 );
 808a3aa:	1c69      	adds	r1, r5, #1
 808a3ac:	2001      	movs	r0, #1
 808a3ae:	f007 ffa7 	bl	8092300 <calloc>
 808a3b2:	4607      	mov	r7, r0
 808a3b4:	f8c6 00ac 	str.w	r0, [r6, #172]	; 0xac
        if( ssl->hostname == NULL )
 808a3b8:	b140      	cbz	r0, 808a3cc <mbedtls_ssl_set_hostname+0x60>
            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

        memcpy( ssl->hostname, hostname, hostname_len );
 808a3ba:	462a      	mov	r2, r5
 808a3bc:	4621      	mov	r1, r4
 808a3be:	f007 ffc4 	bl	809234a <memcpy>

        ssl->hostname[hostname_len] = '\0';
 808a3c2:	2000      	movs	r0, #0
 808a3c4:	5578      	strb	r0, [r7, r5]
 808a3c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if( hostname != NULL )
    {
        hostname_len = strlen( hostname );

        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 808a3c8:	4801      	ldr	r0, [pc, #4]	; (808a3d0 <mbedtls_ssl_set_hostname+0x64>)
 808a3ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    else
    {
        ssl->hostname = (char *)mbedtls_calloc( 1, hostname_len + 1 );
        if( ssl->hostname == NULL )
            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 808a3cc:	4801      	ldr	r0, [pc, #4]	; (808a3d4 <mbedtls_ssl_set_hostname+0x68>)

        ssl->hostname[hostname_len] = '\0';
    }

    return( 0 );
}
 808a3ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808a3d0:	ffff8f00 	.word	0xffff8f00
 808a3d4:	ffff8100 	.word	0xffff8100

0808a3d8 <mbedtls_ssl_conf_min_version>:
    conf->max_minor_ver = minor;
}

void mbedtls_ssl_conf_min_version( mbedtls_ssl_config *conf, int major, int minor )
{
    conf->min_major_ver = major;
 808a3d8:	f880 105e 	strb.w	r1, [r0, #94]	; 0x5e
    conf->min_minor_ver = minor;
 808a3dc:	f880 205f 	strb.w	r2, [r0, #95]	; 0x5f
 808a3e0:	4770      	bx	lr

0808a3e2 <mbedtls_ssl_get_verify_result>:
    return( ssl->in_offt == NULL ? 0 : ssl->in_msglen );
}

uint32_t mbedtls_ssl_get_verify_result( const mbedtls_ssl_context *ssl )
{
    if( ssl->session != NULL )
 808a3e2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 808a3e4:	b90b      	cbnz	r3, 808a3ea <mbedtls_ssl_get_verify_result+0x8>
        return( ssl->session->verify_result );

    if( ssl->session_negotiate != NULL )
 808a3e6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 808a3e8:	b10b      	cbz	r3, 808a3ee <mbedtls_ssl_get_verify_result+0xc>
        return( ssl->session_negotiate->verify_result );
 808a3ea:	6e18      	ldr	r0, [r3, #96]	; 0x60
 808a3ec:	4770      	bx	lr

    return( 0xFFFFFFFF );
 808a3ee:	f04f 30ff 	mov.w	r0, #4294967295
}
 808a3f2:	4770      	bx	lr

0808a3f4 <mbedtls_ssl_get_max_frag_len>:
    size_t max_len;

    /*
     * Assume mfl_code is correct since it was checked when set
     */
    max_len = mfl_code_to_length[ssl->conf->mfl_code];
 808a3f4:	6803      	ldr	r3, [r0, #0]
 808a3f6:	4a09      	ldr	r2, [pc, #36]	; (808a41c <mbedtls_ssl_get_max_frag_len+0x28>)
 808a3f8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60

    /*
     * Check if a smaller max length was negotiated
     */
    if( ssl->session_out != NULL &&
 808a3fc:	6a41      	ldr	r1, [r0, #36]	; 0x24
    size_t max_len;

    /*
     * Assume mfl_code is correct since it was checked when set
     */
    max_len = mfl_code_to_length[ssl->conf->mfl_code];
 808a3fe:	f3c3 1382 	ubfx	r3, r3, #6, #3
 808a402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

    /*
     * Check if a smaller max length was negotiated
     */
    if( ssl->session_out != NULL &&
 808a406:	b131      	cbz	r1, 808a416 <mbedtls_ssl_get_max_frag_len+0x22>
        mfl_code_to_length[ssl->session_out->mfl_code] < max_len )
 808a408:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 808a40c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 808a410:	4293      	cmp	r3, r2
 808a412:	bf28      	it	cs
 808a414:	4613      	movcs	r3, r2
    {
        max_len = mfl_code_to_length[ssl->session_out->mfl_code];
    }

    return max_len;
}
 808a416:	4618      	mov	r0, r3
 808a418:	4770      	bx	lr
 808a41a:	bf00      	nop
 808a41c:	08094508 	.word	0x08094508

0808a420 <mbedtls_ssl_handshake_step>:
 */
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;

    if( ssl == NULL || ssl->conf == NULL )
 808a420:	b138      	cbz	r0, 808a432 <mbedtls_ssl_handshake_step+0x12>
 808a422:	6803      	ldr	r3, [r0, #0]
 808a424:	b12b      	cbz	r3, 808a432 <mbedtls_ssl_handshake_step+0x12>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 808a426:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 808a42a:	07db      	lsls	r3, r3, #31
 808a42c:	d403      	bmi.n	808a436 <mbedtls_ssl_handshake_step+0x16>
        ret = mbedtls_ssl_handshake_client_step( ssl );
 808a42e:	f004 bddb 	b.w	808efe8 <mbedtls_ssl_handshake_client_step>
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 808a432:	4802      	ldr	r0, [pc, #8]	; (808a43c <mbedtls_ssl_handshake_step+0x1c>)
 808a434:	4770      	bx	lr
/*
 * Perform a single step of the SSL handshake
 */
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
 808a436:	4802      	ldr	r0, [pc, #8]	; (808a440 <mbedtls_ssl_handshake_step+0x20>)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
        ret = mbedtls_ssl_handshake_server_step( ssl );
#endif

    return( ret );
}
 808a438:	4770      	bx	lr
 808a43a:	bf00      	nop
 808a43c:	ffff8f00 	.word	0xffff8f00
 808a440:	ffff8f80 	.word	0xffff8f80

0808a444 <mbedtls_ssl_handshake>:

/*
 * Perform the SSL handshake
 */
int mbedtls_ssl_handshake( mbedtls_ssl_context *ssl )
{
 808a444:	b510      	push	{r4, lr}
    int ret = 0;

    if( ssl == NULL || ssl->conf == NULL )
 808a446:	4604      	mov	r4, r0
 808a448:	b150      	cbz	r0, 808a460 <mbedtls_ssl_handshake+0x1c>
 808a44a:	6803      	ldr	r3, [r0, #0]
 808a44c:	b143      	cbz	r3, 808a460 <mbedtls_ssl_handshake+0x1c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> handshake" ) );

    while( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 808a44e:	6863      	ldr	r3, [r4, #4]
 808a450:	2b10      	cmp	r3, #16
 808a452:	d007      	beq.n	808a464 <mbedtls_ssl_handshake+0x20>
    {
        ret = mbedtls_ssl_handshake_step( ssl );
 808a454:	4620      	mov	r0, r4
 808a456:	f7ff ffe3 	bl	808a420 <mbedtls_ssl_handshake_step>

        if( ret != 0 )
 808a45a:	2800      	cmp	r0, #0
 808a45c:	d0f7      	beq.n	808a44e <mbedtls_ssl_handshake+0xa>
 808a45e:	bd10      	pop	{r4, pc}
int mbedtls_ssl_handshake( mbedtls_ssl_context *ssl )
{
    int ret = 0;

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 808a460:	4801      	ldr	r0, [pc, #4]	; (808a468 <mbedtls_ssl_handshake+0x24>)
 808a462:	bd10      	pop	{r4, pc}
 808a464:	2000      	movs	r0, #0
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= handshake" ) );

    return( ret );
}
 808a466:	bd10      	pop	{r4, pc}
 808a468:	ffff8f00 	.word	0xffff8f00

0808a46c <mbedtls_ssl_read>:

/*
 * Receive application data decrypted from the SSL layer
 */
int mbedtls_ssl_read( mbedtls_ssl_context *ssl, unsigned char *buf, size_t len )
{
 808a46c:	b570      	push	{r4, r5, r6, lr}
 808a46e:	460e      	mov	r6, r1
 808a470:	4614      	mov	r4, r2
    int ret;
    size_t n;

    if( ssl == NULL || ssl->conf == NULL )
 808a472:	4605      	mov	r5, r0
 808a474:	2800      	cmp	r0, #0
 808a476:	d061      	beq.n	808a53c <mbedtls_ssl_read+0xd0>
 808a478:	6803      	ldr	r3, [r0, #0]
 808a47a:	2b00      	cmp	r3, #0
 808a47c:	d05e      	beq.n	808a53c <mbedtls_ssl_read+0xd0>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
        return( ret );
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 808a47e:	6843      	ldr	r3, [r0, #4]
 808a480:	2b10      	cmp	r3, #16
 808a482:	d103      	bne.n	808a48c <mbedtls_ssl_read+0x20>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
            return( ret );
        }
    }

    if( ssl->in_offt == NULL )
 808a484:	6eab      	ldr	r3, [r5, #104]	; 0x68
 808a486:	2b00      	cmp	r3, #0
 808a488:	d142      	bne.n	808a510 <mbedtls_ssl_read+0xa4>
 808a48a:	e007      	b.n	808a49c <mbedtls_ssl_read+0x30>
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
    {
        ret = mbedtls_ssl_handshake( ssl );
 808a48c:	f7ff ffda 	bl	808a444 <mbedtls_ssl_handshake>
        if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 808a490:	f510 4fd6 	cmn.w	r0, #27392	; 0x6b00
 808a494:	d0f6      	beq.n	808a484 <mbedtls_ssl_read+0x18>
 808a496:	2800      	cmp	r0, #0
 808a498:	d0f4      	beq.n	808a484 <mbedtls_ssl_read+0x18>
 808a49a:	bd70      	pop	{r4, r5, r6, pc}
    }

    if( ssl->in_offt == NULL )
    {
        /* Start timer if not already running */
        if( ssl->f_get_timer != NULL &&
 808a49c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 808a49e:	b11b      	cbz	r3, 808a4a8 <mbedtls_ssl_read+0x3c>
            ssl->f_get_timer( ssl->p_timer ) == -1 )
 808a4a0:	6c68      	ldr	r0, [r5, #68]	; 0x44
 808a4a2:	4798      	blx	r3
    }

    if( ssl->in_offt == NULL )
    {
        /* Start timer if not already running */
        if( ssl->f_get_timer != NULL &&
 808a4a4:	3001      	adds	r0, #1
 808a4a6:	d04d      	beq.n	808a544 <mbedtls_ssl_read+0xd8>
            ssl->f_get_timer( ssl->p_timer ) == -1 )
        {
            ssl_set_timer( ssl, ssl->conf->read_timeout );
        }

        if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808a4a8:	4628      	mov	r0, r5
 808a4aa:	f7ff fdbb 	bl	808a024 <mbedtls_ssl_read_record>
 808a4ae:	b120      	cbz	r0, 808a4ba <mbedtls_ssl_read+0x4e>
        {
            if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
 808a4b0:	f510 4fe5 	cmn.w	r0, #29312	; 0x7280
 808a4b4:	d157      	bne.n	808a566 <mbedtls_ssl_read+0xfa>
                return( 0 );
 808a4b6:	2000      	movs	r0, #0
 808a4b8:	bd70      	pop	{r4, r5, r6, pc}

            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
            return( ret );
        }

        if( ssl->in_msglen  == 0 &&
 808a4ba:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 808a4bc:	b953      	cbnz	r3, 808a4d4 <mbedtls_ssl_read+0x68>
 808a4be:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 808a4c0:	2b17      	cmp	r3, #23
 808a4c2:	d107      	bne.n	808a4d4 <mbedtls_ssl_read+0x68>
            ssl->in_msgtype == MBEDTLS_SSL_MSG_APPLICATION_DATA )
        {
            /*
             * OpenSSL sends empty messages to randomize the IV
             */
            if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808a4c4:	4628      	mov	r0, r5
 808a4c6:	f7ff fdad 	bl	808a024 <mbedtls_ssl_read_record>
 808a4ca:	b118      	cbz	r0, 808a4d4 <mbedtls_ssl_read+0x68>
            {
                if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
 808a4cc:	f510 4fe5 	cmn.w	r0, #29312	; 0x7280
 808a4d0:	d0f1      	beq.n	808a4b6 <mbedtls_ssl_read+0x4a>
 808a4d2:	bd70      	pop	{r4, r5, r6, pc}
                MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
                return( ret );
            }
        }

        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 808a4d4:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 808a4d6:	2b16      	cmp	r3, #22
 808a4d8:	d10b      	bne.n	808a4f2 <mbedtls_ssl_read+0x86>
             * - For server-side, expect CLIENT_HELLO.
             * - Fail (TLS) or silently drop record (DTLS) in other cases.
             */

#if defined(MBEDTLS_SSL_CLI_C)
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
 808a4da:	682b      	ldr	r3, [r5, #0]
 808a4dc:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 808a4e0:	07db      	lsls	r3, r3, #31
 808a4e2:	d435      	bmi.n	808a550 <mbedtls_ssl_read+0xe4>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
 808a4e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
             * - For server-side, expect CLIENT_HELLO.
             * - Fail (TLS) or silently drop record (DTLS) in other cases.
             */

#if defined(MBEDTLS_SSL_CLI_C)
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
 808a4e6:	781b      	ldrb	r3, [r3, #0]
 808a4e8:	bb53      	cbnz	r3, 808a540 <mbedtls_ssl_read+0xd4>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
 808a4ea:	6fab      	ldr	r3, [r5, #120]	; 0x78
 808a4ec:	2b04      	cmp	r3, #4
 808a4ee:	d127      	bne.n	808a540 <mbedtls_ssl_read+0xd4>
 808a4f0:	e02e      	b.n	808a550 <mbedtls_ssl_read+0xe4>
            }
        }
#endif /* MBEDTLS_SSL_RENEGOTIATION */

        /* Fatal and closure alerts handled by mbedtls_ssl_read_record() */
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
 808a4f2:	2b15      	cmp	r3, #21
 808a4f4:	d101      	bne.n	808a4fa <mbedtls_ssl_read+0x8e>
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
                }
            }

            return( MBEDTLS_ERR_SSL_WANT_READ );
 808a4f6:	481c      	ldr	r0, [pc, #112]	; (808a568 <mbedtls_ssl_read+0xfc>)
 808a4f8:	bd70      	pop	{r4, r5, r6, pc}
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "ignoring non-fatal non-closure alert" ) );
            return( MBEDTLS_ERR_SSL_WANT_READ );
        }

        if( ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
 808a4fa:	2b17      	cmp	r3, #23
 808a4fc:	d120      	bne.n	808a540 <mbedtls_ssl_read+0xd4>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad application data message" ) );
            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
        }

        ssl->in_offt = ssl->in_msg;
 808a4fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 808a500:	66ab      	str	r3, [r5, #104]	; 0x68

        /* We're going to return something now, cancel timer,
         * except if handshake (renegotiation) is in progress */
        if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
 808a502:	686b      	ldr	r3, [r5, #4]
 808a504:	2b10      	cmp	r3, #16
 808a506:	d103      	bne.n	808a510 <mbedtls_ssl_read+0xa4>
            ssl_set_timer( ssl, 0 );
 808a508:	2100      	movs	r1, #0
 808a50a:	4628      	mov	r0, r5
 808a50c:	f7fe fe16 	bl	808913c <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>
        }
#endif /* MBEDTLS_SSL_SRV_C && MBEDTLS_SSL_RENEGOTIATION */
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    }

    n = ( len < ssl->in_msglen )
 808a510:	6f28      	ldr	r0, [r5, #112]	; 0x70
        ? len : ssl->in_msglen;

    memcpy( buf, ssl->in_offt, n );
 808a512:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 808a514:	4284      	cmp	r4, r0
 808a516:	bf28      	it	cs
 808a518:	4604      	movcs	r4, r0
 808a51a:	4630      	mov	r0, r6
 808a51c:	4622      	mov	r2, r4
 808a51e:	f007 ff14 	bl	809234a <memcpy>
    ssl->in_msglen -= n;
 808a522:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 808a524:	1b1b      	subs	r3, r3, r4
 808a526:	672b      	str	r3, [r5, #112]	; 0x70

    if( ssl->in_msglen == 0 )
 808a528:	b91b      	cbnz	r3, 808a532 <mbedtls_ssl_read+0xc6>
    {
        /* all bytes consumed */
        ssl->in_offt = NULL;
 808a52a:	66ab      	str	r3, [r5, #104]	; 0x68
        ssl->keep_current_message = 0;
 808a52c:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
 808a530:	e002      	b.n	808a538 <mbedtls_ssl_read+0xcc>
    }
    else
    {
        /* more data available */
        ssl->in_offt += n;
 808a532:	6eab      	ldr	r3, [r5, #104]	; 0x68
 808a534:	4423      	add	r3, r4
 808a536:	66ab      	str	r3, [r5, #104]	; 0x68
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read" ) );

    return( (int) n );
 808a538:	4620      	mov	r0, r4
 808a53a:	bd70      	pop	{r4, r5, r6, pc}
{
    int ret;
    size_t n;

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 808a53c:	480b      	ldr	r0, [pc, #44]	; (808a56c <mbedtls_ssl_read+0x100>)
 808a53e:	bd70      	pop	{r4, r5, r6, pc}
                /* With DTLS, drop the packet (probably from last handshake) */
#if defined(MBEDTLS_SSL_PROTO_DTLS)
                if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
                    return( MBEDTLS_ERR_SSL_WANT_READ );
#endif
                return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 808a540:	480b      	ldr	r0, [pc, #44]	; (808a570 <mbedtls_ssl_read+0x104>)
 808a542:	bd70      	pop	{r4, r5, r6, pc}
    {
        /* Start timer if not already running */
        if( ssl->f_get_timer != NULL &&
            ssl->f_get_timer( ssl->p_timer ) == -1 )
        {
            ssl_set_timer( ssl, ssl->conf->read_timeout );
 808a544:	682b      	ldr	r3, [r5, #0]
 808a546:	4628      	mov	r0, r5
 808a548:	6d99      	ldr	r1, [r3, #88]	; 0x58
 808a54a:	f7fe fdf7 	bl	808913c <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>
 808a54e:	e7ab      	b.n	808a4a8 <mbedtls_ssl_read+0x3c>
                }
                else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
                if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 808a550:	68eb      	ldr	r3, [r5, #12]
 808a552:	2b00      	cmp	r3, #0
 808a554:	dd06      	ble.n	808a564 <mbedtls_ssl_read+0xf8>
                {
                    if( ( ret = mbedtls_ssl_send_alert_message( ssl,
 808a556:	2264      	movs	r2, #100	; 0x64
 808a558:	2101      	movs	r1, #1
 808a55a:	4628      	mov	r0, r5
 808a55c:	f7ff fb14 	bl	8089b88 <mbedtls_ssl_send_alert_message>
 808a560:	b908      	cbnz	r0, 808a566 <mbedtls_ssl_read+0xfa>
 808a562:	e7c8      	b.n	808a4f6 <mbedtls_ssl_read+0x8a>
                else
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 ||
          MBEDTLS_SSL_PROTO_TLS1_2 */
                {
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 808a564:	4803      	ldr	r0, [pc, #12]	; (808a574 <mbedtls_ssl_read+0x108>)
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read" ) );

    return( (int) n );
}
 808a566:	bd70      	pop	{r4, r5, r6, pc}
 808a568:	ffff9700 	.word	0xffff9700
 808a56c:	ffff8f00 	.word	0xffff8f00
 808a570:	ffff8900 	.word	0xffff8900
 808a574:	ffff9400 	.word	0xffff9400

0808a578 <mbedtls_ssl_write>:

/*
 * Write application data (public-facing wrapper)
 */
int mbedtls_ssl_write( mbedtls_ssl_context *ssl, const unsigned char *buf, size_t len )
{
 808a578:	b570      	push	{r4, r5, r6, lr}
 808a57a:	460e      	mov	r6, r1
 808a57c:	4615      	mov	r5, r2
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );

    if( ssl == NULL || ssl->conf == NULL )
 808a57e:	4604      	mov	r4, r0
 808a580:	b350      	cbz	r0, 808a5d8 <mbedtls_ssl_write+0x60>
 808a582:	6803      	ldr	r3, [r0, #0]
 808a584:	b343      	cbz	r3, 808a5d8 <mbedtls_ssl_write+0x60>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
        return( ret );
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 808a586:	6843      	ldr	r3, [r0, #4]
 808a588:	2b10      	cmp	r3, #16
 808a58a:	d109      	bne.n	808a5a0 <mbedtls_ssl_write+0x28>
static int ssl_write_real( mbedtls_ssl_context *ssl,
                           const unsigned char *buf, size_t len )
{
    int ret;
#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    size_t max_len = mbedtls_ssl_get_max_frag_len( ssl );
 808a58c:	4620      	mov	r0, r4
 808a58e:	f7ff ff31 	bl	808a3f4 <mbedtls_ssl_get_max_frag_len>
        else
#endif
            len = max_len;
    }

    if( ssl->out_left != 0 )
 808a592:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 808a596:	4285      	cmp	r5, r0
 808a598:	bf28      	it	cs
 808a59a:	4605      	movcs	r5, r0
 808a59c:	b92b      	cbnz	r3, 808a5aa <mbedtls_ssl_write+0x32>
 808a59e:	e00a      	b.n	808a5b6 <mbedtls_ssl_write+0x3e>
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
    {
        if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
 808a5a0:	f7ff ff50 	bl	808a444 <mbedtls_ssl_handshake>
 808a5a4:	2800      	cmp	r0, #0
 808a5a6:	d0f1      	beq.n	808a58c <mbedtls_ssl_write+0x14>
 808a5a8:	bd70      	pop	{r4, r5, r6, pc}
         * The user has previously tried to send the data and
         * MBEDTLS_ERR_SSL_WANT_WRITE or the message was only partially
         * written. In this case, we expect the high-level write function
         * (e.g. mbedtls_ssl_write()) to be called with the same parameters
         */
        if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 808a5aa:	4620      	mov	r0, r4
 808a5ac:	f7ff f900 	bl	80897b0 <mbedtls_ssl_flush_output>
 808a5b0:	b998      	cbnz	r0, 808a5da <mbedtls_ssl_write+0x62>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
            return( ret );
        }
    }

    return( (int) len );
 808a5b2:	4628      	mov	r0, r5
 808a5b4:	bd70      	pop	{r4, r5, r6, pc}
         * The user is trying to send a message the first time, so we need to
         * copy the data into the internal buffers and setup the data structure
         * to keep track of partial writes
         */
        ssl->out_msglen  = len;
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
 808a5b6:	2317      	movs	r3, #23
        /*
         * The user is trying to send a message the first time, so we need to
         * copy the data into the internal buffers and setup the data structure
         * to keep track of partial writes
         */
        ssl->out_msglen  = len;
 808a5b8:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
 808a5bc:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        memcpy( ssl->out_msg, buf, len );
 808a5c0:	462a      	mov	r2, r5
 808a5c2:	4631      	mov	r1, r6
 808a5c4:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 808a5c8:	f007 febf 	bl	809234a <memcpy>

        if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 808a5cc:	4620      	mov	r0, r4
 808a5ce:	f7ff f927 	bl	8089820 <mbedtls_ssl_write_record>
 808a5d2:	2800      	cmp	r0, #0
 808a5d4:	d0ed      	beq.n	808a5b2 <mbedtls_ssl_write+0x3a>
 808a5d6:	bd70      	pop	{r4, r5, r6, pc}
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 808a5d8:	4800      	ldr	r0, [pc, #0]	; (808a5dc <mbedtls_ssl_write+0x64>)
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write" ) );

    return( ret );
}
 808a5da:	bd70      	pop	{r4, r5, r6, pc}
 808a5dc:	ffff8f00 	.word	0xffff8f00

0808a5e0 <mbedtls_ssl_transform_free>:

    return( 0 );
}

void mbedtls_ssl_transform_free( mbedtls_ssl_transform *transform )
{
 808a5e0:	b510      	push	{r4, lr}
    if( transform == NULL )
 808a5e2:	4604      	mov	r4, r0
 808a5e4:	b1a0      	cbz	r0, 808a610 <mbedtls_ssl_transform_free+0x30>
#if defined(MBEDTLS_ZLIB_SUPPORT)
    deflateEnd( &transform->ctx_deflate );
    inflateEnd( &transform->ctx_inflate );
#endif

    mbedtls_cipher_free( &transform->cipher_ctx_enc );
 808a5e6:	3050      	adds	r0, #80	; 0x50
 808a5e8:	f7f8 fc28 	bl	8082e3c <mbedtls_cipher_free>
    mbedtls_cipher_free( &transform->cipher_ctx_dec );
 808a5ec:	f104 0090 	add.w	r0, r4, #144	; 0x90
 808a5f0:	f7f8 fc24 	bl	8082e3c <mbedtls_cipher_free>

    mbedtls_md_free( &transform->md_ctx_enc );
 808a5f4:	f104 0038 	add.w	r0, r4, #56	; 0x38
 808a5f8:	f7fd f867 	bl	80876ca <mbedtls_md_free>
    mbedtls_md_free( &transform->md_ctx_dec );
 808a5fc:	f104 0044 	add.w	r0, r4, #68	; 0x44
 808a600:	f7fd f863 	bl	80876ca <mbedtls_md_free>

    mbedtls_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
 808a604:	4620      	mov	r0, r4
}
 808a606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_cipher_free( &transform->cipher_ctx_dec );

    mbedtls_md_free( &transform->md_ctx_enc );
    mbedtls_md_free( &transform->md_ctx_dec );

    mbedtls_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
 808a60a:	21d0      	movs	r1, #208	; 0xd0
 808a60c:	f7fe bd8e 	b.w	808912c <_ZL15mbedtls_zeroizePvj>
 808a610:	bd10      	pop	{r4, pc}

0808a612 <mbedtls_ssl_handshake_free>:
    }
}
#endif /* MBEDTLS_X509_CRT_PARSE_C */

void mbedtls_ssl_handshake_free( mbedtls_ssl_handshake_params *handshake )
{
 808a612:	b538      	push	{r3, r4, r5, lr}
    if( handshake == NULL )
 808a614:	4604      	mov	r4, r0
 808a616:	b1a0      	cbz	r0, 808a642 <mbedtls_ssl_handshake_free+0x30>
    mbedtls_md5_free(    &handshake->fin_md5  );
    mbedtls_sha1_free(   &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_free(   &handshake->fin_sha256    );
 808a618:	3018      	adds	r0, #24
 808a61a:	f7f7 fce9 	bl	8081ff0 <mbedtls_sha256_free>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_free(   &handshake->fin_sha512    );
 808a61e:	f104 0088 	add.w	r0, r4, #136	; 0x88
 808a622:	f003 f8bd 	bl	808d7a0 <mbedtls_sha512_free>
    defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    /*
     * Free only the linked list wrapper, not the keys themselves
     * since the belong to the SNI callback
     */
    if( handshake->sni_key_cert != NULL )
 808a626:	68e0      	ldr	r0, [r4, #12]
 808a628:	b930      	cbnz	r0, 808a638 <mbedtls_ssl_handshake_free+0x26>
    mbedtls_free( handshake->verify_cookie );
    mbedtls_free( handshake->hs_msg );
    ssl_flight_free( handshake->flight );
#endif

    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
 808a62a:	4620      	mov	r0, r4
}
 808a62c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mbedtls_free( handshake->verify_cookie );
    mbedtls_free( handshake->hs_msg );
    ssl_flight_free( handshake->flight );
#endif

    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
 808a630:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 808a634:	f7fe bd7a 	b.w	808912c <_ZL15mbedtls_zeroizePvj>
    {
        mbedtls_ssl_key_cert *cur = handshake->sni_key_cert, *next;

        while( cur != NULL )
        {
            next = cur->next;
 808a638:	6885      	ldr	r5, [r0, #8]
            mbedtls_free( cur );
 808a63a:	f006 f91d 	bl	8090878 <free>
     */
    if( handshake->sni_key_cert != NULL )
    {
        mbedtls_ssl_key_cert *cur = handshake->sni_key_cert, *next;

        while( cur != NULL )
 808a63e:	4628      	mov	r0, r5
 808a640:	e7f2      	b.n	808a628 <mbedtls_ssl_handshake_free+0x16>
 808a642:	bd38      	pop	{r3, r4, r5, pc}

0808a644 <mbedtls_ssl_session_free>:

    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
}

void mbedtls_ssl_session_free( mbedtls_ssl_session *session )
{
 808a644:	b510      	push	{r4, lr}
    if( session == NULL )
 808a646:	4604      	mov	r4, r0
 808a648:	b178      	cbz	r0, 808a66a <mbedtls_ssl_session_free+0x26>
        return;

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    if( session->peer_cert != NULL )
 808a64a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 808a64c:	b120      	cbz	r0, 808a658 <mbedtls_ssl_session_free+0x14>
    {
        mbedtls_x509_crt_free( session->peer_cert );
 808a64e:	f7fe f962 	bl	8088916 <mbedtls_x509_crt_free>
        mbedtls_free( session->peer_cert );
 808a652:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 808a654:	f006 f910 	bl	8090878 <free>
    }
#endif

#if defined(MBEDTLS_SSL_SESSION_TICKETS) && defined(MBEDTLS_SSL_CLI_C)
    mbedtls_free( session->ticket );
 808a658:	6e60      	ldr	r0, [r4, #100]	; 0x64
 808a65a:	f006 f90d 	bl	8090878 <free>
#endif

    mbedtls_zeroize( session, sizeof( mbedtls_ssl_session ) );
 808a65e:	4620      	mov	r0, r4
}
 808a660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if defined(MBEDTLS_SSL_SESSION_TICKETS) && defined(MBEDTLS_SSL_CLI_C)
    mbedtls_free( session->ticket );
#endif

    mbedtls_zeroize( session, sizeof( mbedtls_ssl_session ) );
 808a664:	2174      	movs	r1, #116	; 0x74
 808a666:	f7fe bd61 	b.w	808912c <_ZL15mbedtls_zeroizePvj>
 808a66a:	bd10      	pop	{r4, pc}

0808a66c <mbedtls_ssl_handshake_wrapup>:

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
}

void mbedtls_ssl_handshake_wrapup( mbedtls_ssl_context *ssl )
{
 808a66c:	b538      	push	{r3, r4, r5, lr}
 808a66e:	4604      	mov	r4, r0
    int resume = ssl->handshake->resume;
 808a670:	6b03      	ldr	r3, [r0, #48]	; 0x30
#endif

    /*
     * Free the previous session and switch in the current one
     */
    if( ssl->session )
 808a672:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
}

void mbedtls_ssl_handshake_wrapup( mbedtls_ssl_context *ssl )
{
    int resume = ssl->handshake->resume;
 808a674:	f8d3 51e4 	ldr.w	r5, [r3, #484]	; 0x1e4
#endif

    /*
     * Free the previous session and switch in the current one
     */
    if( ssl->session )
 808a678:	b120      	cbz	r0, 808a684 <mbedtls_ssl_handshake_wrapup+0x18>
        /* RFC 7366 3.1: keep the EtM state */
        ssl->session_negotiate->encrypt_then_mac =
                  ssl->session->encrypt_then_mac;
#endif

        mbedtls_ssl_session_free( ssl->session );
 808a67a:	f7ff ffe3 	bl	808a644 <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
 808a67e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 808a680:	f006 f8fa 	bl	8090878 <free>
    }
    ssl->session = ssl->session_negotiate;
 808a684:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    ssl->session_negotiate = NULL;
 808a686:	2300      	movs	r3, #0

    /*
     * Add cache entry
     */
    if( ssl->conf->f_set_cache != NULL &&
 808a688:	6822      	ldr	r2, [r4, #0]
#endif

        mbedtls_ssl_session_free( ssl->session );
        mbedtls_free( ssl->session );
    }
    ssl->session = ssl->session_negotiate;
 808a68a:	62a1      	str	r1, [r4, #40]	; 0x28
    ssl->session_negotiate = NULL;
 808a68c:	62e3      	str	r3, [r4, #44]	; 0x2c

    /*
     * Add cache entry
     */
    if( ssl->conf->f_set_cache != NULL &&
 808a68e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 808a690:	b123      	cbz	r3, 808a69c <mbedtls_ssl_handshake_wrapup+0x30>
 808a692:	6888      	ldr	r0, [r1, #8]
 808a694:	b110      	cbz	r0, 808a69c <mbedtls_ssl_handshake_wrapup+0x30>
        ssl->session->id_len != 0 &&
 808a696:	b90d      	cbnz	r5, 808a69c <mbedtls_ssl_handshake_wrapup+0x30>
        resume == 0 )
    {
        if( ssl->conf->f_set_cache( ssl->conf->p_cache, ssl->session ) != 0 )
 808a698:	6a90      	ldr	r0, [r2, #40]	; 0x28
 808a69a:	4798      	blx	r3
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup: final free" ) );

    /*
     * Free our handshake params
     */
    mbedtls_ssl_handshake_free( ssl->handshake );
 808a69c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 808a69e:	f7ff ffb8 	bl	808a612 <mbedtls_ssl_handshake_free>
    mbedtls_free( ssl->handshake );
 808a6a2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 808a6a4:	f006 f8e8 	bl	8090878 <free>
    ssl->handshake = NULL;

    /*
     * Free the previous transform and swith in the current one
     */
    if( ssl->transform )
 808a6a8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    /*
     * Free our handshake params
     */
    mbedtls_ssl_handshake_free( ssl->handshake );
    mbedtls_free( ssl->handshake );
    ssl->handshake = NULL;
 808a6aa:	2300      	movs	r3, #0
 808a6ac:	6323      	str	r3, [r4, #48]	; 0x30

    /*
     * Free the previous transform and swith in the current one
     */
    if( ssl->transform )
 808a6ae:	b120      	cbz	r0, 808a6ba <mbedtls_ssl_handshake_wrapup+0x4e>
    {
        mbedtls_ssl_transform_free( ssl->transform );
 808a6b0:	f7ff ff96 	bl	808a5e0 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 808a6b4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 808a6b6:	f006 f8df 	bl	8090878 <free>
    }
    ssl->transform = ssl->transform_negotiate;
 808a6ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808a6bc:	63e3      	str	r3, [r4, #60]	; 0x3c
    ssl->transform_negotiate = NULL;
 808a6be:	2300      	movs	r3, #0
 808a6c0:	6423      	str	r3, [r4, #64]	; 0x40
    }
    else
#endif
        ssl_handshake_wrapup_free_hs_transform( ssl );

    ssl->state++;
 808a6c2:	6863      	ldr	r3, [r4, #4]
 808a6c4:	3301      	adds	r3, #1
 808a6c6:	6063      	str	r3, [r4, #4]
 808a6c8:	bd38      	pop	{r3, r4, r5, pc}
	...

0808a6cc <_ZL18ssl_handshake_initP19mbedtls_ssl_context>:
{
    memset( session, 0, sizeof(mbedtls_ssl_session) );
}

static int ssl_handshake_init( mbedtls_ssl_context *ssl )
{
 808a6cc:	b538      	push	{r3, r4, r5, lr}
 808a6ce:	4604      	mov	r4, r0
    /* Clear old handshake information if present */
    if( ssl->transform_negotiate )
 808a6d0:	6c00      	ldr	r0, [r0, #64]	; 0x40
 808a6d2:	b108      	cbz	r0, 808a6d8 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xc>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
 808a6d4:	f7ff ff84 	bl	808a5e0 <mbedtls_ssl_transform_free>
    if( ssl->session_negotiate )
 808a6d8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 808a6da:	b108      	cbz	r0, 808a6e0 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x14>
        mbedtls_ssl_session_free( ssl->session_negotiate );
 808a6dc:	f7ff ffb2 	bl	808a644 <mbedtls_ssl_session_free>
    if( ssl->handshake )
 808a6e0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 808a6e2:	b108      	cbz	r0, 808a6e8 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x1c>
        mbedtls_ssl_handshake_free( ssl->handshake );
 808a6e4:	f7ff ff95 	bl	808a612 <mbedtls_ssl_handshake_free>

    /*
     * Either the pointers are now NULL or cleared properly and can be freed.
     * Now allocate missing structures.
     */
    if( ssl->transform_negotiate == NULL )
 808a6e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808a6ea:	b923      	cbnz	r3, 808a6f6 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x2a>
    {
        ssl->transform_negotiate = (mbedtls_ssl_transform *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_transform) );
 808a6ec:	21d0      	movs	r1, #208	; 0xd0
 808a6ee:	2001      	movs	r0, #1
 808a6f0:	f007 fe06 	bl	8092300 <calloc>
 808a6f4:	6420      	str	r0, [r4, #64]	; 0x40
    }

    if( ssl->session_negotiate == NULL )
 808a6f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 808a6f8:	b923      	cbnz	r3, 808a704 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x38>
    {
        ssl->session_negotiate = (mbedtls_ssl_session *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_session) );
 808a6fa:	2174      	movs	r1, #116	; 0x74
 808a6fc:	2001      	movs	r0, #1
 808a6fe:	f007 fdff 	bl	8092300 <calloc>
 808a702:	62e0      	str	r0, [r4, #44]	; 0x2c
    }

    if( ssl->handshake == NULL )
 808a704:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808a706:	b92b      	cbnz	r3, 808a714 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x48>
    {
        ssl->handshake = (mbedtls_ssl_handshake_params *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
 808a708:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 808a70c:	2001      	movs	r0, #1
 808a70e:	f007 fdf7 	bl	8092300 <calloc>
 808a712:	6320      	str	r0, [r4, #48]	; 0x30
    }

    /* All pointers should exist and can be directly freed without issue */
    if( ssl->handshake == NULL ||
 808a714:	6b20      	ldr	r0, [r4, #48]	; 0x30
 808a716:	b118      	cbz	r0, 808a720 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x54>
 808a718:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808a71a:	b10b      	cbz	r3, 808a720 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x54>
        ssl->transform_negotiate == NULL ||
        ssl->session_negotiate == NULL )
 808a71c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        ssl->handshake = (mbedtls_ssl_handshake_params *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
    }

    /* All pointers should exist and can be directly freed without issue */
    if( ssl->handshake == NULL ||
        ssl->transform_negotiate == NULL ||
 808a71e:	b96b      	cbnz	r3, 808a73c <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x70>
        ssl->session_negotiate == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc() of ssl sub-contexts failed" ) );

        mbedtls_free( ssl->handshake );
 808a720:	f006 f8aa 	bl	8090878 <free>
        mbedtls_free( ssl->transform_negotiate );
 808a724:	6c20      	ldr	r0, [r4, #64]	; 0x40
 808a726:	f006 f8a7 	bl	8090878 <free>
        mbedtls_free( ssl->session_negotiate );
 808a72a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 808a72c:	f006 f8a4 	bl	8090878 <free>

        ssl->handshake = NULL;
 808a730:	2300      	movs	r3, #0
 808a732:	6323      	str	r3, [r4, #48]	; 0x30
        ssl->transform_negotiate = NULL;
 808a734:	6423      	str	r3, [r4, #64]	; 0x40
        ssl->session_negotiate = NULL;
 808a736:	62e3      	str	r3, [r4, #44]	; 0x2c

        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 808a738:	481e      	ldr	r0, [pc, #120]	; (808a7b4 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xe8>)
 808a73a:	bd38      	pop	{r3, r4, r5, pc}
    }

    /* Initialize structures */
    mbedtls_ssl_session_init( ssl->session_negotiate );
 808a73c:	4618      	mov	r0, r3
 808a73e:	f7ff fde9 	bl	808a314 <mbedtls_ssl_session_init>
    ssl_transform_init( ssl->transform_negotiate );
 808a742:	6c25      	ldr	r5, [r4, #64]	; 0x40
#endif
}

static void ssl_transform_init( mbedtls_ssl_transform *transform )
{
    memset( transform, 0, sizeof(mbedtls_ssl_transform) );
 808a744:	22d0      	movs	r2, #208	; 0xd0
 808a746:	2100      	movs	r1, #0
 808a748:	4628      	mov	r0, r5
 808a74a:	f007 fe24 	bl	8092396 <memset>

    mbedtls_cipher_init( &transform->cipher_ctx_enc );
 808a74e:	f105 0050 	add.w	r0, r5, #80	; 0x50
 808a752:	f7f8 fb6f 	bl	8082e34 <mbedtls_cipher_init>
    mbedtls_cipher_init( &transform->cipher_ctx_dec );
 808a756:	f105 0090 	add.w	r0, r5, #144	; 0x90
 808a75a:	f7f8 fb6b 	bl	8082e34 <mbedtls_cipher_init>

    mbedtls_md_init( &transform->md_ctx_enc );
 808a75e:	f105 0038 	add.w	r0, r5, #56	; 0x38
 808a762:	f7fc ffad 	bl	80876c0 <mbedtls_md_init>
    mbedtls_md_init( &transform->md_ctx_dec );
 808a766:	f105 0044 	add.w	r0, r5, #68	; 0x44
 808a76a:	f7fc ffa9 	bl	80876c0 <mbedtls_md_init>
    }

    /* Initialize structures */
    mbedtls_ssl_session_init( ssl->session_negotiate );
    ssl_transform_init( ssl->transform_negotiate );
    ssl_handshake_params_init( ssl->handshake );
 808a76e:	6b24      	ldr	r4, [r4, #48]	; 0x30
    return( 0 );
}

static void ssl_handshake_params_init( mbedtls_ssl_handshake_params *handshake )
{
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
 808a770:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
     mbedtls_md5_starts_ret( &handshake->fin_md5  );
    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_init(   &handshake->fin_sha256    );
 808a774:	f104 0518 	add.w	r5, r4, #24
    return( 0 );
}

static void ssl_handshake_params_init( mbedtls_ssl_handshake_params *handshake )
{
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
 808a778:	2100      	movs	r1, #0
 808a77a:	4620      	mov	r0, r4
 808a77c:	f007 fe0b 	bl	8092396 <memset>
     mbedtls_md5_starts_ret( &handshake->fin_md5  );
    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_init(   &handshake->fin_sha256    );
 808a780:	4628      	mov	r0, r5
 808a782:	f7f7 fc31 	bl	8081fe8 <mbedtls_sha256_init>
    mbedtls_sha256_starts_ret( &handshake->fin_sha256, 0 );
 808a786:	2100      	movs	r1, #0
 808a788:	4628      	mov	r0, r5
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_init(   &handshake->fin_sha512    );
 808a78a:	f104 0588 	add.w	r5, r4, #136	; 0x88
    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_init(   &handshake->fin_sha256    );
    mbedtls_sha256_starts_ret( &handshake->fin_sha256, 0 );
 808a78e:	f7f7 fc3f 	bl	8082010 <mbedtls_sha256_starts_ret>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_init(   &handshake->fin_sha512    );
 808a792:	4628      	mov	r0, r5
 808a794:	f003 f800 	bl	808d798 <mbedtls_sha512_init>
    mbedtls_sha512_starts_ret( &handshake->fin_sha512, 1 );
 808a798:	2101      	movs	r1, #1
 808a79a:	4628      	mov	r0, r5
 808a79c:	f003 f810 	bl	808d7c0 <mbedtls_sha512_starts_ret>
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

    handshake->update_checksum = ssl_update_checksum_start;
 808a7a0:	4b05      	ldr	r3, [pc, #20]	; (808a7b8 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xec>)

/* Allow exactly one hash algorithm for each signature. */
void mbedtls_ssl_sig_hash_set_const_hash( mbedtls_ssl_sig_hash_set_t *set,
                                          mbedtls_md_type_t md_alg )
{
    set->rsa   = md_alg;
 808a7a2:	2000      	movs	r0, #0
    mbedtls_sha512_init(   &handshake->fin_sha512    );
    mbedtls_sha512_starts_ret( &handshake->fin_sha512, 1 );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

    handshake->update_checksum = ssl_update_checksum_start;
 808a7a4:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
    handshake->ecjpake_cache_len = 0;
#endif
#endif

#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    handshake->sni_authmode = MBEDTLS_SSL_VERIFY_UNSET;
 808a7a8:	2303      	movs	r3, #3

/* Allow exactly one hash algorithm for each signature. */
void mbedtls_ssl_sig_hash_set_const_hash( mbedtls_ssl_sig_hash_set_t *set,
                                          mbedtls_md_type_t md_alg )
{
    set->rsa   = md_alg;
 808a7aa:	7020      	strb	r0, [r4, #0]
    set->ecdsa = md_alg;
 808a7ac:	7060      	strb	r0, [r4, #1]
    handshake->ecjpake_cache_len = 0;
#endif
#endif

#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    handshake->sni_authmode = MBEDTLS_SSL_VERIFY_UNSET;
 808a7ae:	60a3      	str	r3, [r4, #8]
        ssl_set_timer( ssl, 0 );
    }
#endif

    return( 0 );
}
 808a7b0:	bd38      	pop	{r3, r4, r5, pc}
 808a7b2:	bf00      	nop
 808a7b4:	ffff8100 	.word	0xffff8100
 808a7b8:	08089429 	.word	0x08089429

0808a7bc <mbedtls_ssl_setup>:
/*
 * Setup an SSL context
 */
int mbedtls_ssl_setup( mbedtls_ssl_context *ssl,
                       const mbedtls_ssl_config *conf )
{
 808a7bc:	b538      	push	{r3, r4, r5, lr}
    int ret;
    const size_t len = MBEDTLS_SSL_BUFFER_LEN;

    ssl->conf = conf;
 808a7be:	6001      	str	r1, [r0, #0]
/*
 * Setup an SSL context
 */
int mbedtls_ssl_setup( mbedtls_ssl_context *ssl,
                       const mbedtls_ssl_config *conf )
{
 808a7c0:	4604      	mov	r4, r0
    ssl->conf = conf;

    /*
     * Prepare base structures
     */
    if( ( ssl-> in_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL ||
 808a7c2:	f242 114d 	movw	r1, #8525	; 0x214d
 808a7c6:	2001      	movs	r0, #1
 808a7c8:	f007 fd9a 	bl	8092300 <calloc>
 808a7cc:	4605      	mov	r5, r0
 808a7ce:	6520      	str	r0, [r4, #80]	; 0x50
 808a7d0:	b328      	cbz	r0, 808a81e <mbedtls_ssl_setup+0x62>
        ( ssl->out_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
 808a7d2:	f242 114d 	movw	r1, #8525	; 0x214d
 808a7d6:	2001      	movs	r0, #1
 808a7d8:	f007 fd92 	bl	8092300 <calloc>
    ssl->conf = conf;

    /*
     * Prepare base structures
     */
    if( ( ssl-> in_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL ||
 808a7dc:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 808a7e0:	b1e8      	cbz	r0, 808a81e <mbedtls_ssl_setup+0x62>
    }
    else
#endif
    {
        ssl->out_ctr = ssl->out_buf;
        ssl->out_hdr = ssl->out_buf +  8;
 808a7e2:	f100 0308 	add.w	r3, r0, #8
 808a7e6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        ssl->out_len = ssl->out_buf + 11;
 808a7ea:	f100 030b 	add.w	r3, r0, #11
 808a7ee:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        ssl->out_iv  = ssl->out_buf + 13;
        ssl->out_msg = ssl->out_buf + 13;

        ssl->in_ctr = ssl->in_buf;
        ssl->in_hdr = ssl->in_buf +  8;
 808a7f2:	f105 0308 	add.w	r3, r5, #8
        ssl->in_msg = ssl->in_buf + 13;
    }
    else
#endif
    {
        ssl->out_ctr = ssl->out_buf;
 808a7f6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        ssl->out_hdr = ssl->out_buf +  8;
        ssl->out_len = ssl->out_buf + 11;
        ssl->out_iv  = ssl->out_buf + 13;
        ssl->out_msg = ssl->out_buf + 13;

        ssl->in_ctr = ssl->in_buf;
 808a7fa:	6565      	str	r5, [r4, #84]	; 0x54
#endif
    {
        ssl->out_ctr = ssl->out_buf;
        ssl->out_hdr = ssl->out_buf +  8;
        ssl->out_len = ssl->out_buf + 11;
        ssl->out_iv  = ssl->out_buf + 13;
 808a7fc:	300d      	adds	r0, #13
        ssl->out_msg = ssl->out_buf + 13;

        ssl->in_ctr = ssl->in_buf;
        ssl->in_hdr = ssl->in_buf +  8;
 808a7fe:	65a3      	str	r3, [r4, #88]	; 0x58
        ssl->in_len = ssl->in_buf + 11;
 808a800:	f105 030b 	add.w	r3, r5, #11
        ssl->in_iv  = ssl->in_buf + 13;
 808a804:	350d      	adds	r5, #13
#endif
    {
        ssl->out_ctr = ssl->out_buf;
        ssl->out_hdr = ssl->out_buf +  8;
        ssl->out_len = ssl->out_buf + 11;
        ssl->out_iv  = ssl->out_buf + 13;
 808a806:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
        ssl->out_msg = ssl->out_buf + 13;
 808a80a:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98

        ssl->in_ctr = ssl->in_buf;
        ssl->in_hdr = ssl->in_buf +  8;
        ssl->in_len = ssl->in_buf + 11;
 808a80e:	65e3      	str	r3, [r4, #92]	; 0x5c
        ssl->in_iv  = ssl->in_buf + 13;
 808a810:	6625      	str	r5, [r4, #96]	; 0x60
        ssl->in_msg = ssl->in_buf + 13;
 808a812:	6665      	str	r5, [r4, #100]	; 0x64
    }

    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 808a814:	4620      	mov	r0, r4
        return( ret );

    return( 0 );
}
 808a816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ssl->in_len = ssl->in_buf + 11;
        ssl->in_iv  = ssl->in_buf + 13;
        ssl->in_msg = ssl->in_buf + 13;
    }

    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 808a81a:	f7ff bf57 	b.w	808a6cc <_ZL18ssl_handshake_initP19mbedtls_ssl_context>
     */
    if( ( ssl-> in_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL ||
        ( ssl->out_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed", len ) );
        mbedtls_free( ssl->in_buf );
 808a81e:	4628      	mov	r0, r5
 808a820:	f006 f82a 	bl	8090878 <free>
        ssl->in_buf = NULL;
 808a824:	2300      	movs	r3, #0
 808a826:	6523      	str	r3, [r4, #80]	; 0x50

    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
        return( ret );

    return( 0 );
}
 808a828:	4800      	ldr	r0, [pc, #0]	; (808a82c <mbedtls_ssl_setup+0x70>)
 808a82a:	bd38      	pop	{r3, r4, r5, pc}
 808a82c:	ffff8100 	.word	0xffff8100

0808a830 <mbedtls_ssl_free>:

/*
 * Free an SSL context
 */
void mbedtls_ssl_free( mbedtls_ssl_context *ssl )
{
 808a830:	b538      	push	{r3, r4, r5, lr}
    if( ssl == NULL )
 808a832:	4604      	mov	r4, r0
 808a834:	2800      	cmp	r0, #0
 808a836:	d048      	beq.n	808a8ca <mbedtls_ssl_free+0x9a>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> free" ) );

    if( ssl->out_buf != NULL )
 808a838:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 808a83c:	b138      	cbz	r0, 808a84e <mbedtls_ssl_free+0x1e>
    {
        mbedtls_zeroize( ssl->out_buf, MBEDTLS_SSL_BUFFER_LEN );
 808a83e:	f242 114d 	movw	r1, #8525	; 0x214d
 808a842:	f7fe fc73 	bl	808912c <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( ssl->out_buf );
 808a846:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 808a84a:	f006 f815 	bl	8090878 <free>
    }

    if( ssl->in_buf != NULL )
 808a84e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 808a850:	b130      	cbz	r0, 808a860 <mbedtls_ssl_free+0x30>
    {
        mbedtls_zeroize( ssl->in_buf, MBEDTLS_SSL_BUFFER_LEN );
 808a852:	f242 114d 	movw	r1, #8525	; 0x214d
 808a856:	f7fe fc69 	bl	808912c <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( ssl->in_buf );
 808a85a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 808a85c:	f006 f80c 	bl	8090878 <free>
        mbedtls_zeroize( ssl->compress_buf, MBEDTLS_SSL_BUFFER_LEN );
        mbedtls_free( ssl->compress_buf );
    }
#endif

    if( ssl->transform )
 808a860:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 808a862:	b120      	cbz	r0, 808a86e <mbedtls_ssl_free+0x3e>
    {
        mbedtls_ssl_transform_free( ssl->transform );
 808a864:	f7ff febc 	bl	808a5e0 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 808a868:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 808a86a:	f006 f805 	bl	8090878 <free>
    }

    if( ssl->handshake )
 808a86e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 808a870:	b180      	cbz	r0, 808a894 <mbedtls_ssl_free+0x64>
    {
        mbedtls_ssl_handshake_free( ssl->handshake );
 808a872:	f7ff fece 	bl	808a612 <mbedtls_ssl_handshake_free>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
 808a876:	6c20      	ldr	r0, [r4, #64]	; 0x40
 808a878:	f7ff feb2 	bl	808a5e0 <mbedtls_ssl_transform_free>
        mbedtls_ssl_session_free( ssl->session_negotiate );
 808a87c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 808a87e:	f7ff fee1 	bl	808a644 <mbedtls_ssl_session_free>

        mbedtls_free( ssl->handshake );
 808a882:	6b20      	ldr	r0, [r4, #48]	; 0x30
 808a884:	f005 fff8 	bl	8090878 <free>
        mbedtls_free( ssl->transform_negotiate );
 808a888:	6c20      	ldr	r0, [r4, #64]	; 0x40
 808a88a:	f005 fff5 	bl	8090878 <free>
        mbedtls_free( ssl->session_negotiate );
 808a88e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 808a890:	f005 fff2 	bl	8090878 <free>
    }

    if( ssl->session )
 808a894:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 808a896:	b120      	cbz	r0, 808a8a2 <mbedtls_ssl_free+0x72>
    {
        mbedtls_ssl_session_free( ssl->session );
 808a898:	f7ff fed4 	bl	808a644 <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
 808a89c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 808a89e:	f005 ffeb 	bl	8090878 <free>
    }

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    if( ssl->hostname != NULL )
 808a8a2:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 808a8a6:	b155      	cbz	r5, 808a8be <mbedtls_ssl_free+0x8e>
    {
        mbedtls_zeroize( ssl->hostname, strlen( ssl->hostname ) );
 808a8a8:	4628      	mov	r0, r5
 808a8aa:	f007 fdab 	bl	8092404 <strlen>
 808a8ae:	4601      	mov	r1, r0
 808a8b0:	4628      	mov	r0, r5
 808a8b2:	f7fe fc3b 	bl	808912c <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( ssl->hostname );
 808a8b6:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 808a8ba:	f005 ffdd 	bl	8090878 <free>
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= free" ) );

    /* Actually clear after last debug message */
    mbedtls_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
 808a8be:	4620      	mov	r0, r4
}
 808a8c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= free" ) );

    /* Actually clear after last debug message */
    mbedtls_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
 808a8c4:	21b4      	movs	r1, #180	; 0xb4
 808a8c6:	f7fe bc31 	b.w	808912c <_ZL15mbedtls_zeroizePvj>
 808a8ca:	bd38      	pop	{r3, r4, r5, pc}

0808a8cc <mbedtls_ssl_config_init>:
/*
 * Initialze mbedtls_ssl_config
 */
void mbedtls_ssl_config_init( mbedtls_ssl_config *conf )
{
    memset( conf, 0, sizeof( mbedtls_ssl_config ) );
 808a8cc:	2264      	movs	r2, #100	; 0x64
 808a8ce:	2100      	movs	r1, #0
 808a8d0:	f007 bd61 	b.w	8092396 <memset>

0808a8d4 <mbedtls_ssl_config_defaults>:
/*
 * Load default in mbedtls_ssl_config
 */
int mbedtls_ssl_config_defaults( mbedtls_ssl_config *conf,
                                 int endpoint, int transport, int preset )
{
 808a8d4:	b510      	push	{r4, lr}
 808a8d6:	4604      	mov	r4, r0
/*
 * SSL set accessors
 */
void mbedtls_ssl_conf_endpoint( mbedtls_ssl_config *conf, int endpoint )
{
    conf->endpoint   = endpoint;
 808a8d8:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
 808a8dc:	f361 0000 	bfi	r0, r1, #0, #1
}

void mbedtls_ssl_conf_transport( mbedtls_ssl_config *conf, int transport )
{
    conf->transport = transport;
 808a8e0:	f362 0041 	bfi	r0, r2, #1, #1
 808a8e4:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60

    /*
     * Things that are common to all presets
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( endpoint == MBEDTLS_SSL_IS_CLIENT )
 808a8e8:	b951      	cbnz	r1, 808a900 <mbedtls_ssl_config_defaults+0x2c>
    {
        conf->authmode = MBEDTLS_SSL_VERIFY_REQUIRED;
 808a8ea:	2102      	movs	r1, #2
 808a8ec:	b2c2      	uxtb	r2, r0
 808a8ee:	f361 0283 	bfi	r2, r1, #2, #2
 808a8f2:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
        conf->session_tickets = MBEDTLS_SSL_SESSION_TICKETS_ENABLED;
 808a8f6:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 808a8fa:	430a      	orrs	r2, r1
 808a8fc:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
#endif

    /*
     * Preset-specific defaults
     */
    switch( preset )
 808a900:	2b02      	cmp	r3, #2
 808a902:	f04f 0303 	mov.w	r3, #3
    {
        /*
         * NSA Suite B
         */
        case MBEDTLS_SSL_PRESET_SUITEB:
            conf->min_major_ver = MBEDTLS_SSL_MAJOR_VERSION_3;
 808a906:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
            conf->min_minor_ver = MBEDTLS_SSL_MINOR_VERSION_3; /* TLS 1.2 */
 808a90a:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
 808a90e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
            conf->max_minor_ver = MBEDTLS_SSL_MAX_MINOR_VERSION;
 808a912:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
#endif

    /*
     * Preset-specific defaults
     */
    switch( preset )
 808a916:	d108      	bne.n	808a92a <mbedtls_ssl_config_defaults+0x56>

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   ssl_preset_suiteb_ciphersuites;
 808a918:	4b0a      	ldr	r3, [pc, #40]	; (808a944 <mbedtls_ssl_config_defaults+0x70>)
 808a91a:	60e3      	str	r3, [r4, #12]
 808a91c:	60a3      	str	r3, [r4, #8]
 808a91e:	6063      	str	r3, [r4, #4]
 808a920:	6023      	str	r3, [r4, #0]

#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_suiteb;
 808a922:	4b09      	ldr	r3, [pc, #36]	; (808a948 <mbedtls_ssl_config_defaults+0x74>)
 808a924:	6463      	str	r3, [r4, #68]	; 0x44
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_suiteb_hashes;
 808a926:	4b09      	ldr	r3, [pc, #36]	; (808a94c <mbedtls_ssl_config_defaults+0x78>)
 808a928:	e008      	b.n	808a93c <mbedtls_ssl_config_defaults+0x68>

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   mbedtls_ssl_list_ciphersuites();
 808a92a:	f7fb fc33 	bl	8086194 <mbedtls_ssl_list_ciphersuites>

#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
 808a92e:	4b08      	ldr	r3, [pc, #32]	; (808a950 <mbedtls_ssl_config_defaults+0x7c>)

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   mbedtls_ssl_list_ciphersuites();
 808a930:	60e0      	str	r0, [r4, #12]

#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
 808a932:	6463      	str	r3, [r4, #68]	; 0x44
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_default_hashes;
 808a934:	4b07      	ldr	r3, [pc, #28]	; (808a954 <mbedtls_ssl_config_defaults+0x80>)

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   mbedtls_ssl_list_ciphersuites();
 808a936:	60a0      	str	r0, [r4, #8]
 808a938:	6060      	str	r0, [r4, #4]
 808a93a:	6020      	str	r0, [r4, #0]
#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_default_hashes;
 808a93c:	6563      	str	r3, [r4, #84]	; 0x54
            conf->dhm_min_bitlen = 1024;
#endif
    }

    return( 0 );
}
 808a93e:	2000      	movs	r0, #0
 808a940:	bd10      	pop	{r4, pc}
 808a942:	bf00      	nop
 808a944:	20000438 	.word	0x20000438
 808a948:	08094494 	.word	0x08094494
 808a94c:	2000045c 	.word	0x2000045c
 808a950:	08093d84 	.word	0x08093d84
 808a954:	20000444 	.word	0x20000444

0808a958 <mbedtls_ssl_config_free>:

/*
 * Free mbedtls_ssl_config
 */
void mbedtls_ssl_config_free( mbedtls_ssl_config *conf )
{
 808a958:	b538      	push	{r3, r4, r5, lr}
 808a95a:	4604      	mov	r4, r0
        conf->psk_identity_len = 0;
    }
#endif

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
 808a95c:	6c80      	ldr	r0, [r0, #72]	; 0x48
#if defined(MBEDTLS_X509_CRT_PARSE_C)
static void ssl_key_cert_free( mbedtls_ssl_key_cert *key_cert )
{
    mbedtls_ssl_key_cert *cur = key_cert, *next;

    while( cur != NULL )
 808a95e:	b120      	cbz	r0, 808a96a <mbedtls_ssl_config_free+0x12>
    {
        next = cur->next;
 808a960:	6885      	ldr	r5, [r0, #8]
        mbedtls_free( cur );
 808a962:	f005 ff89 	bl	8090878 <free>
        cur = next;
 808a966:	4628      	mov	r0, r5
 808a968:	e7f9      	b.n	808a95e <mbedtls_ssl_config_free+0x6>

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
#endif

    mbedtls_zeroize( conf, sizeof( mbedtls_ssl_config ) );
 808a96a:	4620      	mov	r0, r4
}
 808a96c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
#endif

    mbedtls_zeroize( conf, sizeof( mbedtls_ssl_config ) );
 808a970:	2164      	movs	r1, #100	; 0x64
 808a972:	f7fe bbdb 	b.w	808912c <_ZL15mbedtls_zeroizePvj>

0808a976 <mbedtls_ssl_sig_from_pk>:
    ( defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C) )
/*
 * Convert between MBEDTLS_PK_XXX and SSL_SIG_XXX
 */
unsigned char mbedtls_ssl_sig_from_pk( mbedtls_pk_context *pk )
{
 808a976:	b508      	push	{r3, lr}
#if defined(MBEDTLS_RSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
 808a978:	2101      	movs	r1, #1
 808a97a:	f001 fdc9 	bl	808c510 <mbedtls_pk_can_do>
#if defined(MBEDTLS_ECDSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECDSA ) )
        return( MBEDTLS_SSL_SIG_ECDSA );
#endif
    return( MBEDTLS_SSL_SIG_ANON );
}
 808a97e:	3000      	adds	r0, #0
 808a980:	bf18      	it	ne
 808a982:	2001      	movne	r0, #1
 808a984:	bd08      	pop	{r3, pc}
	...

0808a988 <mbedtls_ssl_hash_from_md_alg>:

/*
 * Convert from MBEDTLS_MD_XXX to MBEDTLS_SSL_HASH_XXX
 */
unsigned char mbedtls_ssl_hash_from_md_alg( int md )
{
 808a988:	3804      	subs	r0, #4
 808a98a:	2804      	cmp	r0, #4
 808a98c:	bf9a      	itte	ls
 808a98e:	4b02      	ldrls	r3, [pc, #8]	; (808a998 <mbedtls_ssl_hash_from_md_alg+0x10>)
 808a990:	5c18      	ldrbls	r0, [r3, r0]
    switch( md )
 808a992:	2000      	movhi	r0, #0
            return( MBEDTLS_SSL_HASH_SHA512 );
#endif
        default:
            return( MBEDTLS_SSL_HASH_NONE );
    }
}
 808a994:	4770      	bx	lr
 808a996:	bf00      	nop
 808a998:	080944a4 	.word	0x080944a4

0808a99c <mbedtls_ssl_check_cert_usage>:
    ((void) cert_endpoint);
    ((void) flags);
#endif

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
 808a99c:	2a01      	cmp	r2, #1
#if defined(MBEDTLS_X509_CRT_PARSE_C)
int mbedtls_ssl_check_cert_usage( const mbedtls_x509_crt *cert,
                          const mbedtls_ssl_ciphersuite_t *ciphersuite,
                          int cert_endpoint,
                          uint32_t *flags )
{
 808a99e:	b510      	push	{r4, lr}
 808a9a0:	461c      	mov	r4, r3
    ((void) cert_endpoint);
    ((void) flags);
#endif

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
 808a9a2:	d10f      	bne.n	808a9c4 <mbedtls_ssl_check_cert_usage+0x28>
    {
        /* Server part of the key exchange */
        switch( ciphersuite->key_exchange )
 808a9a4:	7a8b      	ldrb	r3, [r1, #10]
 808a9a6:	2b0a      	cmp	r3, #10
 808a9a8:	d80e      	bhi.n	808a9c8 <mbedtls_ssl_check_cert_usage+0x2c>
 808a9aa:	409a      	lsls	r2, r3
 808a9ac:	f012 0f82 	tst.w	r2, #130	; 0x82
 808a9b0:	d10c      	bne.n	808a9cc <mbedtls_ssl_check_cert_usage+0x30>
 808a9b2:	f412 6fc0 	tst.w	r2, #1536	; 0x600
 808a9b6:	d10b      	bne.n	808a9d0 <mbedtls_ssl_check_cert_usage+0x34>
 808a9b8:	f012 0f1c 	tst.w	r2, #28
                          int cert_endpoint,
                          uint32_t *flags )
{
    int ret = 0;
#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    int usage = 0;
 808a9bc:	bf14      	ite	ne
 808a9be:	2180      	movne	r1, #128	; 0x80
 808a9c0:	2100      	moveq	r1, #0
 808a9c2:	e006      	b.n	808a9d2 <mbedtls_ssl_check_cert_usage+0x36>
        }
    }
    else
    {
        /* Client auth: we only implement rsa_sign and mbedtls_ecdsa_sign for now */
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
 808a9c4:	2180      	movs	r1, #128	; 0x80
 808a9c6:	e004      	b.n	808a9d2 <mbedtls_ssl_check_cert_usage+0x36>
                          int cert_endpoint,
                          uint32_t *flags )
{
    int ret = 0;
#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    int usage = 0;
 808a9c8:	2100      	movs	r1, #0
 808a9ca:	e002      	b.n	808a9d2 <mbedtls_ssl_check_cert_usage+0x36>
        /* Server part of the key exchange */
        switch( ciphersuite->key_exchange )
        {
            case MBEDTLS_KEY_EXCHANGE_RSA:
            case MBEDTLS_KEY_EXCHANGE_RSA_PSK:
                usage = MBEDTLS_X509_KU_KEY_ENCIPHERMENT;
 808a9cc:	2120      	movs	r1, #32
 808a9ce:	e000      	b.n	808a9d2 <mbedtls_ssl_check_cert_usage+0x36>
                usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
                break;

            case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
            case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
                usage = MBEDTLS_X509_KU_KEY_AGREEMENT;
 808a9d0:	2108      	movs	r1, #8
    {
        /* Client auth: we only implement rsa_sign and mbedtls_ecdsa_sign for now */
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
    }

    if( mbedtls_x509_crt_check_key_usage( cert, usage ) != 0 )
 808a9d2:	f7fd fbc5 	bl	8088160 <mbedtls_x509_crt_check_key_usage>
 808a9d6:	b128      	cbz	r0, 808a9e4 <mbedtls_ssl_check_cert_usage+0x48>
    {
        *flags |= MBEDTLS_X509_BADCERT_KEY_USAGE;
 808a9d8:	6822      	ldr	r2, [r4, #0]
        ret = -1;
 808a9da:	f04f 30ff 	mov.w	r0, #4294967295
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
    }

    if( mbedtls_x509_crt_check_key_usage( cert, usage ) != 0 )
    {
        *flags |= MBEDTLS_X509_BADCERT_KEY_USAGE;
 808a9de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 808a9e2:	6022      	str	r2, [r4, #0]
        ret = -1;
    }
#endif /* MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE */

    return( ret );
}
 808a9e4:	bd10      	pop	{r4, pc}
	...

0808a9e8 <mbedtls_ssl_parse_certificate>:

    return( ret );
}

int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
 808a9e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 808a9ec:	6c03      	ldr	r3, [r0, #64]	; 0x40

    return( ret );
}

int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
 808a9ee:	b085      	sub	sp, #20
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 808a9f0:	f8d3 8000 	ldr.w	r8, [r3]

    return( ret );
}

int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
 808a9f4:	4605      	mov	r5, r0
    int authmode = ssl->conf->authmode;
    uint8_t alert;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 808a9f6:	f898 200a 	ldrb.w	r2, [r8, #10]
 808a9fa:	2a0b      	cmp	r2, #11
 808a9fc:	d80b      	bhi.n	808aa16 <mbedtls_ssl_parse_certificate+0x2e>
 808a9fe:	f44f 6316 	mov.w	r3, #2400	; 0x960
 808aa02:	40d3      	lsrs	r3, r2
 808aa04:	f003 0301 	and.w	r3, r3, #1
 808aa08:	f083 0001 	eor.w	r0, r3, #1
 808aa0c:	b11b      	cbz	r3, 808aa16 <mbedtls_ssl_parse_certificate+0x2e>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate" ) );
        ssl->state++;
 808aa0e:	686b      	ldr	r3, [r5, #4]
 808aa10:	3301      	adds	r3, #1
 808aa12:	606b      	str	r3, [r5, #4]
        return( 0 );
 808aa14:	e0e0      	b.n	808abd8 <mbedtls_ssl_parse_certificate+0x1f0>
int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
    int authmode = ssl->conf->authmode;
 808aa16:	682b      	ldr	r3, [r5, #0]
        ssl->state++;
        return( 0 );
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808aa18:	4628      	mov	r0, r5
int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
    int authmode = ssl->conf->authmode;
 808aa1a:	f893 7060 	ldrb.w	r7, [r3, #96]	; 0x60
        ssl->state++;
        return( 0 );
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808aa1e:	f7ff fb01 	bl	808a024 <mbedtls_ssl_read_record>
int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
    int authmode = ssl->conf->authmode;
 808aa22:	f3c7 0781 	ubfx	r7, r7, #2, #2
        ssl->state++;
        return( 0 );
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808aa26:	4604      	mov	r4, r0
 808aa28:	bb80      	cbnz	r0, 808aa8c <mbedtls_ssl_parse_certificate+0xa4>
           let it decide whether to alert. */
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    ssl->state++;
 808aa2a:	686b      	ldr	r3, [r5, #4]
 808aa2c:	3301      	adds	r3, #1
 808aa2e:	606b      	str	r3, [r5, #4]
    }
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \
          MBEDTLS_SSL_PROTO_TLS1_2 */
#endif /* MBEDTLS_SSL_SRV_C */

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 808aa30:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 808aa32:	2b16      	cmp	r3, #22
 808aa34:	d006      	beq.n	808aa44 <mbedtls_ssl_parse_certificate+0x5c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 808aa36:	220a      	movs	r2, #10
 808aa38:	2102      	movs	r1, #2
 808aa3a:	4628      	mov	r0, r5
 808aa3c:	f7ff f8a4 	bl	8089b88 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 808aa40:	4867      	ldr	r0, [pc, #412]	; (808abe0 <mbedtls_ssl_parse_certificate+0x1f8>)
 808aa42:	e0c9      	b.n	808abd8 <mbedtls_ssl_parse_certificate+0x1f0>
    }

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 808aa44:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 808aa46:	7813      	ldrb	r3, [r2, #0]
 808aa48:	2b0b      	cmp	r3, #11
 808aa4a:	d10b      	bne.n	808aa64 <mbedtls_ssl_parse_certificate+0x7c>
        ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 3 + 3 )
 808aa4c:	6fa9      	ldr	r1, [r5, #120]	; 0x78
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 808aa4e:	2909      	cmp	r1, #9
 808aa50:	d908      	bls.n	808aa64 <mbedtls_ssl_parse_certificate+0x7c>
    /*
     * Same message structure as in mbedtls_ssl_write_certificate()
     */
    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];

    if( ssl->in_msg[i] != 0 ||
 808aa52:	7913      	ldrb	r3, [r2, #4]
 808aa54:	b933      	cbnz	r3, 808aa64 <mbedtls_ssl_parse_certificate+0x7c>
 808aa56:	7950      	ldrb	r0, [r2, #5]
 808aa58:	7993      	ldrb	r3, [r2, #6]
 808aa5a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 808aa5e:	3307      	adds	r3, #7
 808aa60:	4299      	cmp	r1, r3
 808aa62:	d015      	beq.n	808aa90 <mbedtls_ssl_parse_certificate+0xa8>
    while( i < ssl->in_hslen )
    {
        if ( i + 3 > ssl->in_hslen ) {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                           MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 808aa64:	2232      	movs	r2, #50	; 0x32
 808aa66:	2102      	movs	r1, #2
 808aa68:	4628      	mov	r0, r5
 808aa6a:	f7ff f88d 	bl	8089b88 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
 808aa6e:	485d      	ldr	r0, [pc, #372]	; (808abe4 <mbedtls_ssl_parse_certificate+0x1fc>)
 808aa70:	e0b2      	b.n	808abd8 <mbedtls_ssl_parse_certificate+0x1f0>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
 808aa72:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
                                  ssl->in_msg + i, n );
        switch( ret )
 808aa74:	f8df 9178 	ldr.w	r9, [pc, #376]	; 808abf0 <mbedtls_ssl_parse_certificate+0x208>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
 808aa78:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 808aa7a:	f7fd ff47 	bl	808890c <mbedtls_x509_crt_init>

    i += 3;
 808aa7e:	2607      	movs	r6, #7

    while( i < ssl->in_hslen )
 808aa80:	f8d5 e078 	ldr.w	lr, [r5, #120]	; 0x78
 808aa84:	4576      	cmp	r6, lr
 808aa86:	d31c      	bcc.n	808aac2 <mbedtls_ssl_parse_certificate+0xda>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }
    }
#endif /* MBEDTLS_SSL_RENEGOTIATION && MBEDTLS_SSL_CLI_C */

    if( authmode != MBEDTLS_SSL_VERIFY_NONE )
 808aa88:	2f00      	cmp	r7, #0
 808aa8a:	d13f      	bne.n	808ab0c <mbedtls_ssl_parse_certificate+0x124>
         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
         * with details encoded in the verification flags. All other kinds
         * of error codes, including those from the user provided f_vrfy
         * functions, are treated as fatal and lead to a failure of
         * ssl_parse_certificate even if verification was optional. */
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 808aa8c:	4620      	mov	r0, r4
 808aa8e:	e0a3      	b.n	808abd8 <mbedtls_ssl_parse_certificate+0x1f0>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
    }

    /* In case we tried to reuse a session but it failed */
    if( ssl->session_negotiate->peer_cert != NULL )
 808aa90:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 808aa92:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 808aa94:	b128      	cbz	r0, 808aaa2 <mbedtls_ssl_parse_certificate+0xba>
    {
        mbedtls_x509_crt_free( ssl->session_negotiate->peer_cert );
 808aa96:	f7fd ff3e 	bl	8088916 <mbedtls_x509_crt_free>
        mbedtls_free( ssl->session_negotiate->peer_cert );
 808aa9a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 808aa9c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 808aa9e:	f005 feeb 	bl	8090878 <free>
    }

    if( ( ssl->session_negotiate->peer_cert = (mbedtls_x509_crt *)mbedtls_calloc( 1,
 808aaa2:	f44f 719a 	mov.w	r1, #308	; 0x134
 808aaa6:	2001      	movs	r0, #1
 808aaa8:	6aee      	ldr	r6, [r5, #44]	; 0x2c
 808aaaa:	f007 fc29 	bl	8092300 <calloc>
 808aaae:	65f0      	str	r0, [r6, #92]	; 0x5c
 808aab0:	2800      	cmp	r0, #0
 808aab2:	d1de      	bne.n	808aa72 <mbedtls_ssl_parse_certificate+0x8a>
                    sizeof( mbedtls_x509_crt ) ) ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed",
                       sizeof( mbedtls_x509_crt ) ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
 808aab4:	2250      	movs	r2, #80	; 0x50
 808aab6:	2102      	movs	r1, #2
 808aab8:	4628      	mov	r0, r5
 808aaba:	f7ff f865 	bl	8089b88 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 808aabe:	484a      	ldr	r0, [pc, #296]	; (808abe8 <mbedtls_ssl_parse_certificate+0x200>)
 808aac0:	e08a      	b.n	808abd8 <mbedtls_ssl_parse_certificate+0x1f0>

    i += 3;

    while( i < ssl->in_hslen )
    {
        if ( i + 3 > ssl->in_hslen ) {
 808aac2:	1cf1      	adds	r1, r6, #3
 808aac4:	458e      	cmp	lr, r1
 808aac6:	d3cd      	bcc.n	808aa64 <mbedtls_ssl_parse_certificate+0x7c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                           MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }
        if( ssl->in_msg[i] != 0 )
 808aac8:	6e68      	ldr	r0, [r5, #100]	; 0x64
 808aaca:	5d83      	ldrb	r3, [r0, r6]
 808aacc:	2b00      	cmp	r3, #0
 808aace:	d1c9      	bne.n	808aa64 <mbedtls_ssl_parse_certificate+0x7c>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
 808aad0:	4406      	add	r6, r0
            | (unsigned int) ssl->in_msg[i + 2];
 808aad2:	7872      	ldrb	r2, [r6, #1]
 808aad4:	78b3      	ldrb	r3, [r6, #2]
 808aad6:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
        i += 3;

        if( n < 128 || i + n > ssl->in_hslen )
 808aada:	2a7f      	cmp	r2, #127	; 0x7f
 808aadc:	d9c2      	bls.n	808aa64 <mbedtls_ssl_parse_certificate+0x7c>
 808aade:	188e      	adds	r6, r1, r2
 808aae0:	45b6      	cmp	lr, r6
 808aae2:	d3bf      	bcc.n	808aa64 <mbedtls_ssl_parse_certificate+0x7c>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
 808aae4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
                                  ssl->in_msg + i, n );
 808aae6:	4401      	add	r1, r0
 808aae8:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 808aaea:	f7fd ff6d 	bl	80889c8 <mbedtls_x509_crt_parse_der>
        switch( ret )
 808aaee:	4548      	cmp	r0, r9
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
                                  ssl->in_msg + i, n );
 808aaf0:	4604      	mov	r4, r0
        switch( ret )
 808aaf2:	d0c5      	beq.n	808aa80 <mbedtls_ssl_parse_certificate+0x98>
 808aaf4:	dc04      	bgt.n	808ab00 <mbedtls_ssl_parse_certificate+0x118>
 808aaf6:	f510 5f22 	cmn.w	r0, #10368	; 0x2880
 808aafa:	d158      	bne.n	808abae <mbedtls_ssl_parse_certificate+0x1c6>
            /* Ignore certificate with an unknown algorithm: maybe a
               prior certificate was already trusted. */
            break;

        case MBEDTLS_ERR_X509_ALLOC_FAILED:
            alert = MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR;
 808aafc:	2250      	movs	r2, #80	; 0x50
 808aafe:	e05d      	b.n	808abbc <mbedtls_ssl_parse_certificate+0x1d4>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
                                  ssl->in_msg + i, n );
        switch( ret )
 808ab00:	f510 5f16 	cmn.w	r0, #9600	; 0x2580
 808ab04:	d055      	beq.n	808abb2 <mbedtls_ssl_parse_certificate+0x1ca>
 808ab06:	2800      	cmp	r0, #0
 808ab08:	d0ba      	beq.n	808aa80 <mbedtls_ssl_parse_certificate+0x98>
 808ab0a:	e050      	b.n	808abae <mbedtls_ssl_parse_certificate+0x1c6>
    {
        mbedtls_x509_crt *ca_chain;
        mbedtls_x509_crl *ca_crl;

#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
        if( ssl->handshake->sni_ca_chain != NULL )
 808ab0c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 808ab0e:	682b      	ldr	r3, [r5, #0]
 808ab10:	6916      	ldr	r6, [r2, #16]
 808ab12:	b10e      	cbz	r6, 808ab18 <mbedtls_ssl_parse_certificate+0x130>
        {
            ca_chain = ssl->handshake->sni_ca_chain;
            ca_crl   = ssl->handshake->sni_ca_crl;
 808ab14:	6952      	ldr	r2, [r2, #20]
 808ab16:	e001      	b.n	808ab1c <mbedtls_ssl_parse_certificate+0x134>
        }
        else
#endif
        {
            ca_chain = ssl->conf->ca_chain;
 808ab18:	6cde      	ldr	r6, [r3, #76]	; 0x4c
            ca_crl   = ssl->conf->ca_crl;
 808ab1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                ssl->session_negotiate->peer_cert,
                                ca_chain, ca_crl,
                                ssl->conf->cert_profile,
                                ssl->hostname,
                               &ssl->session_negotiate->verify_result,
                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
 808ab1c:	6b99      	ldr	r1, [r3, #56]	; 0x38

        /*
         * Main check: verify certificate
         */
        ret = mbedtls_x509_crt_verify_with_profile(
                                ssl->session_negotiate->peer_cert,
 808ab1e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
                                ca_chain, ca_crl,
                                ssl->conf->cert_profile,
                                ssl->hostname,
                               &ssl->session_negotiate->verify_result,
                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
 808ab20:	9103      	str	r1, [sp, #12]
 808ab22:	6b59      	ldr	r1, [r3, #52]	; 0x34
 808ab24:	9102      	str	r1, [sp, #8]
        }

        /*
         * Main check: verify certificate
         */
        ret = mbedtls_x509_crt_verify_with_profile(
 808ab26:	f100 0160 	add.w	r1, r0, #96	; 0x60
                                ssl->session_negotiate->peer_cert,
                                ca_chain, ca_crl,
                                ssl->conf->cert_profile,
                                ssl->hostname,
                               &ssl->session_negotiate->verify_result,
                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
 808ab2a:	9101      	str	r1, [sp, #4]
 808ab2c:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 808ab30:	9100      	str	r1, [sp, #0]
 808ab32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808ab34:	4631      	mov	r1, r6
 808ab36:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 808ab38:	f7fd fe06 	bl	8088748 <mbedtls_x509_crt_verify_with_profile>
                    ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
            }
        }
#endif /* MBEDTLS_ECP_C */

        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
 808ab3c:	682b      	ldr	r3, [r5, #0]
                                ssl->session_negotiate->peer_cert,
                                ca_chain, ca_crl,
                                ssl->conf->cert_profile,
                                ssl->hostname,
                               &ssl->session_negotiate->verify_result,
                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
 808ab3e:	4604      	mov	r4, r0
                    ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
            }
        }
#endif /* MBEDTLS_ECP_C */

        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
 808ab40:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 808ab44:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 808ab46:	f002 0201 	and.w	r2, r2, #1
 808ab4a:	f100 0360 	add.w	r3, r0, #96	; 0x60
 808ab4e:	f082 0201 	eor.w	r2, r2, #1
 808ab52:	4641      	mov	r1, r8
 808ab54:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 808ab56:	f7ff ff21 	bl	808a99c <mbedtls_ssl_check_cert_usage>
 808ab5a:	b100      	cbz	r0, 808ab5e <mbedtls_ssl_parse_certificate+0x176>
                                 ciphersuite_info,
                                 ! ssl->conf->endpoint,
                                 &ssl->session_negotiate->verify_result ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (usage extensions)" ) );
            if( ret == 0 )
 808ab5c:	b174      	cbz	r4, 808ab7c <mbedtls_ssl_parse_certificate+0x194>
         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
         * with details encoded in the verification flags. All other kinds
         * of error codes, including those from the user provided f_vrfy
         * functions, are treated as fatal and lead to a failure of
         * ssl_parse_certificate even if verification was optional. */
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 808ab5e:	2f01      	cmp	r7, #1
 808ab60:	d105      	bne.n	808ab6e <mbedtls_ssl_parse_certificate+0x186>
 808ab62:	f514 5f1c 	cmn.w	r4, #9984	; 0x2700
 808ab66:	d02e      	beq.n	808abc6 <mbedtls_ssl_parse_certificate+0x1de>
            ( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED ||
 808ab68:	f514 4ff4 	cmn.w	r4, #31232	; 0x7a00
 808ab6c:	d02b      	beq.n	808abc6 <mbedtls_ssl_parse_certificate+0x1de>
              ret == MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE ) )
        {
            ret = 0;
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
 808ab6e:	b90e      	cbnz	r6, 808ab74 <mbedtls_ssl_parse_certificate+0x18c>
 808ab70:	2f02      	cmp	r7, #2
 808ab72:	d001      	beq.n	808ab78 <mbedtls_ssl_parse_certificate+0x190>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
        }

        if( ret != 0 )
 808ab74:	b934      	cbnz	r4, 808ab84 <mbedtls_ssl_parse_certificate+0x19c>
 808ab76:	e789      	b.n	808aa8c <mbedtls_ssl_parse_certificate+0xa4>
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
 808ab78:	4c1c      	ldr	r4, [pc, #112]	; (808abec <mbedtls_ssl_parse_certificate+0x204>)
 808ab7a:	e003      	b.n	808ab84 <mbedtls_ssl_parse_certificate+0x19c>
         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
         * with details encoded in the verification flags. All other kinds
         * of error codes, including those from the user provided f_vrfy
         * functions, are treated as fatal and lead to a failure of
         * ssl_parse_certificate even if verification was optional. */
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 808ab7c:	2f01      	cmp	r7, #1
 808ab7e:	d085      	beq.n	808aa8c <mbedtls_ssl_parse_certificate+0xa4>
              ret == MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE ) )
        {
            ret = 0;
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
 808ab80:	b31e      	cbz	r6, 808abca <mbedtls_ssl_parse_certificate+0x1e2>
                                 ! ssl->conf->endpoint,
                                 &ssl->session_negotiate->verify_result ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (usage extensions)" ) );
            if( ret == 0 )
                ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
 808ab82:	4c18      	ldr	r4, [pc, #96]	; (808abe4 <mbedtls_ssl_parse_certificate+0x1fc>)
        if( ret != 0 )
        {
            /* The certificate may have been rejected for several reasons.
               Pick one and send the corresponding alert. Which alert to send
               may be a subject of debate in some cases. */
            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
 808ab84:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 808ab86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 808ab88:	05df      	lsls	r7, r3, #23
 808ab8a:	d40e      	bmi.n	808abaa <mbedtls_ssl_parse_certificate+0x1c2>
                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
 808ab8c:	075e      	lsls	r6, r3, #29
 808ab8e:	d40e      	bmi.n	808abae <mbedtls_ssl_parse_certificate+0x1c6>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NS_CERT_TYPE )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_PK )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
 808ab90:	f413 3fdc 	tst.w	r3, #112640	; 0x1b800
 808ab94:	d10d      	bne.n	808abb2 <mbedtls_ssl_parse_certificate+0x1ca>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
 808ab96:	07d8      	lsls	r0, r3, #31
 808ab98:	d40d      	bmi.n	808abb6 <mbedtls_ssl_parse_certificate+0x1ce>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
 808ab9a:	0799      	lsls	r1, r3, #30
 808ab9c:	d40d      	bmi.n	808abba <mbedtls_ssl_parse_certificate+0x1d2>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NOT_TRUSTED )
                alert = MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA;
            else
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
 808ab9e:	f013 0f08 	tst.w	r3, #8
 808aba2:	bf14      	ite	ne
 808aba4:	2230      	movne	r2, #48	; 0x30
 808aba6:	222e      	moveq	r2, #46	; 0x2e
 808aba8:	e008      	b.n	808abbc <mbedtls_ssl_parse_certificate+0x1d4>
        {
            /* The certificate may have been rejected for several reasons.
               Pick one and send the corresponding alert. Which alert to send
               may be a subject of debate in some cases. */
            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
 808abaa:	2231      	movs	r2, #49	; 0x31
 808abac:	e006      	b.n	808abbc <mbedtls_ssl_parse_certificate+0x1d4>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
                alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
 808abae:	222a      	movs	r2, #42	; 0x2a
 808abb0:	e004      	b.n	808abbc <mbedtls_ssl_parse_certificate+0x1d4>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NS_CERT_TYPE )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_PK )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 808abb2:	222b      	movs	r2, #43	; 0x2b
 808abb4:	e002      	b.n	808abbc <mbedtls_ssl_parse_certificate+0x1d4>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
 808abb6:	222d      	movs	r2, #45	; 0x2d
 808abb8:	e000      	b.n	808abbc <mbedtls_ssl_parse_certificate+0x1d4>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
 808abba:	222c      	movs	r2, #44	; 0x2c
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NOT_TRUSTED )
                alert = MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA;
            else
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            alert );
 808abbc:	2102      	movs	r1, #2
 808abbe:	4628      	mov	r0, r5
 808abc0:	f7fe ffe2 	bl	8089b88 <mbedtls_ssl_send_alert_message>
 808abc4:	e762      	b.n	808aa8c <mbedtls_ssl_parse_certificate+0xa4>
 808abc6:	2000      	movs	r0, #0
 808abc8:	e006      	b.n	808abd8 <mbedtls_ssl_parse_certificate+0x1f0>
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
 808abca:	4b08      	ldr	r3, [pc, #32]	; (808abec <mbedtls_ssl_parse_certificate+0x204>)
 808abcc:	4805      	ldr	r0, [pc, #20]	; (808abe4 <mbedtls_ssl_parse_certificate+0x1fc>)
 808abce:	2f02      	cmp	r7, #2
 808abd0:	bf14      	ite	ne
 808abd2:	4604      	movne	r4, r0
 808abd4:	461c      	moveq	r4, r3
 808abd6:	e7d5      	b.n	808ab84 <mbedtls_ssl_parse_certificate+0x19c>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate" ) );

    return( ret );
}
 808abd8:	b005      	add	sp, #20
 808abda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808abde:	bf00      	nop
 808abe0:	ffff8900 	.word	0xffff8900
 808abe4:	ffff8600 	.word	0xffff8600
 808abe8:	ffff8100 	.word	0xffff8100
 808abec:	ffff8980 	.word	0xffff8980
 808abf0:	ffffd9d2 	.word	0xffffd9d2

0808abf4 <mbedtls_ssl_write_version>:
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 808abf4:	7018      	strb	r0, [r3, #0]
        ver[1] = (unsigned char) minor;
 808abf6:	7059      	strb	r1, [r3, #1]
 808abf8:	4770      	bx	lr

0808abfa <mbedtls_ssl_read_version>:
    else
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
 808abfa:	781a      	ldrb	r2, [r3, #0]
 808abfc:	6002      	str	r2, [r0, #0]
        *minor = ver[1];
 808abfe:	785b      	ldrb	r3, [r3, #1]
 808ac00:	600b      	str	r3, [r1, #0]
 808ac02:	4770      	bx	lr

0808ac04 <_ZL11mpi_sub_hlpjPmS_>:
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 808ac04:	2300      	movs	r3, #0

/*
 * Helper for mbedtls_mpi subtraction
 */
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
 808ac06:	b5f0      	push	{r4, r5, r6, r7, lr}
 808ac08:	4616      	mov	r6, r2
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 808ac0a:	461c      	mov	r4, r3
 808ac0c:	4284      	cmp	r4, r0
 808ac0e:	d016      	beq.n	808ac3e <_ZL11mpi_sub_hlpjPmS_+0x3a>
    {
        z = ( *d <  c );     *d -=  c;
 808ac10:	f8d6 e000 	ldr.w	lr, [r6]
 808ac14:	ebc3 050e 	rsb	r5, r3, lr
 808ac18:	6035      	str	r5, [r6, #0]
        c = ( *d < *s ) + z; *d -= *s;
 808ac1a:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 808ac1e:	3401      	adds	r4, #1
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
 808ac20:	42bd      	cmp	r5, r7
 808ac22:	bf2c      	ite	cs
 808ac24:	f04f 0c00 	movcs.w	ip, #0
 808ac28:	f04f 0c01 	movcc.w	ip, #1
 808ac2c:	1bed      	subs	r5, r5, r7
 808ac2e:	4573      	cmp	r3, lr
 808ac30:	bf94      	ite	ls
 808ac32:	4663      	movls	r3, ip
 808ac34:	f10c 0301 	addhi.w	r3, ip, #1
 808ac38:	f846 5b04 	str.w	r5, [r6], #4
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 808ac3c:	e7e6      	b.n	808ac0c <_ZL11mpi_sub_hlpjPmS_+0x8>
 808ac3e:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
 808ac42:	b143      	cbz	r3, 808ac56 <_ZL11mpi_sub_hlpjPmS_+0x52>
    {
        z = ( *d < c ); *d -= c;
 808ac44:	6811      	ldr	r1, [r2, #0]
 808ac46:	1ac8      	subs	r0, r1, r3
        c = z; i++; d++;
 808ac48:	428b      	cmp	r3, r1
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
    {
        z = ( *d < c ); *d -= c;
 808ac4a:	f842 0b04 	str.w	r0, [r2], #4
        c = z; i++; d++;
 808ac4e:	bf94      	ite	ls
 808ac50:	2300      	movls	r3, #0
 808ac52:	2301      	movhi	r3, #1
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
 808ac54:	e7f5      	b.n	808ac42 <_ZL11mpi_sub_hlpjPmS_+0x3e>
 808ac56:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808ac58 <_ZL11mpi_mul_hlpjPmS_m>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
 808ac58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808ac5c:	460d      	mov	r5, r1
 808ac5e:	4614      	mov	r4, r2
 808ac60:	4686      	mov	lr, r0
    mbedtls_mpi_uint c = 0, t = 0;
 808ac62:	f04f 0c00 	mov.w	ip, #0
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 808ac66:	f1be 0f0f 	cmp.w	lr, #15
 808ac6a:	f105 0540 	add.w	r5, r5, #64	; 0x40
 808ac6e:	f104 0440 	add.w	r4, r4, #64	; 0x40
 808ac72:	f240 811e 	bls.w	808aeb2 <_ZL11mpi_mul_hlpjPmS_m+0x25a>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 808ac76:	f855 6c40 	ldr.w	r6, [r5, #-64]
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 808ac7a:	f1ae 0e10 	sub.w	lr, lr, #16
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 808ac7e:	fba6 9a03 	umull	r9, sl, r6, r3
 808ac82:	f854 6c40 	ldr.w	r6, [r4, #-64]
 808ac86:	eb1c 0c09 	adds.w	ip, ip, r9
 808ac8a:	bf2c      	ite	cs
 808ac8c:	f04f 0801 	movcs.w	r8, #1
 808ac90:	f04f 0800 	movcc.w	r8, #0
 808ac94:	eb1c 0606 	adds.w	r6, ip, r6
 808ac98:	f844 6c40 	str.w	r6, [r4, #-64]
 808ac9c:	f855 6c3c 	ldr.w	r6, [r5, #-60]
 808aca0:	eb48 080a 	adc.w	r8, r8, sl
 808aca4:	fba3 9a06 	umull	r9, sl, r3, r6
 808aca8:	f854 6c3c 	ldr.w	r6, [r4, #-60]
 808acac:	eb18 0809 	adds.w	r8, r8, r9
 808acb0:	bf2c      	ite	cs
 808acb2:	f04f 0c01 	movcs.w	ip, #1
 808acb6:	f04f 0c00 	movcc.w	ip, #0
 808acba:	eb18 0606 	adds.w	r6, r8, r6
 808acbe:	f844 6c3c 	str.w	r6, [r4, #-60]
        MULADDC_CORE   MULADDC_CORE
 808acc2:	f855 7c38 	ldr.w	r7, [r5, #-56]
 808acc6:	f854 6c38 	ldr.w	r6, [r4, #-56]
 808acca:	fba3 8907 	umull	r8, r9, r3, r7
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 808acce:	eb4c 0c0a 	adc.w	ip, ip, sl
        MULADDC_CORE   MULADDC_CORE
 808acd2:	eb1c 0c08 	adds.w	ip, ip, r8
 808acd6:	bf2c      	ite	cs
 808acd8:	2701      	movcs	r7, #1
 808acda:	2700      	movcc	r7, #0
 808acdc:	eb1c 0606 	adds.w	r6, ip, r6
 808ace0:	f844 6c38 	str.w	r6, [r4, #-56]
 808ace4:	f855 6c34 	ldr.w	r6, [r5, #-52]
 808ace8:	eb47 0709 	adc.w	r7, r7, r9
 808acec:	fba3 8906 	umull	r8, r9, r3, r6
 808acf0:	f854 6c34 	ldr.w	r6, [r4, #-52]
 808acf4:	eb17 0708 	adds.w	r7, r7, r8
 808acf8:	bf2c      	ite	cs
 808acfa:	f04f 0c01 	movcs.w	ip, #1
 808acfe:	f04f 0c00 	movcc.w	ip, #0
 808ad02:	19be      	adds	r6, r7, r6
 808ad04:	f844 6c34 	str.w	r6, [r4, #-52]
        MULADDC_CORE   MULADDC_CORE
 808ad08:	f855 7c30 	ldr.w	r7, [r5, #-48]
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 808ad0c:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 808ad10:	fba3 8907 	umull	r8, r9, r3, r7
 808ad14:	f854 6c30 	ldr.w	r6, [r4, #-48]
 808ad18:	eb1c 0c08 	adds.w	ip, ip, r8
 808ad1c:	bf2c      	ite	cs
 808ad1e:	2701      	movcs	r7, #1
 808ad20:	2700      	movcc	r7, #0
 808ad22:	eb1c 0606 	adds.w	r6, ip, r6
 808ad26:	f844 6c30 	str.w	r6, [r4, #-48]
 808ad2a:	f855 6c2c 	ldr.w	r6, [r5, #-44]
 808ad2e:	eb47 0709 	adc.w	r7, r7, r9
 808ad32:	fba3 8906 	umull	r8, r9, r3, r6
 808ad36:	f854 6c2c 	ldr.w	r6, [r4, #-44]
 808ad3a:	eb17 0708 	adds.w	r7, r7, r8
 808ad3e:	bf2c      	ite	cs
 808ad40:	f04f 0c01 	movcs.w	ip, #1
 808ad44:	f04f 0c00 	movcc.w	ip, #0
 808ad48:	19be      	adds	r6, r7, r6
 808ad4a:	f844 6c2c 	str.w	r6, [r4, #-44]
        MULADDC_CORE   MULADDC_CORE
 808ad4e:	f855 7c28 	ldr.w	r7, [r5, #-40]
    for( ; i >= 16; i -= 16 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 808ad52:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 808ad56:	fba3 8907 	umull	r8, r9, r3, r7
 808ad5a:	f854 6c28 	ldr.w	r6, [r4, #-40]
 808ad5e:	eb1c 0c08 	adds.w	ip, ip, r8
 808ad62:	bf2c      	ite	cs
 808ad64:	2701      	movcs	r7, #1
 808ad66:	2700      	movcc	r7, #0
 808ad68:	eb1c 0606 	adds.w	r6, ip, r6
 808ad6c:	f844 6c28 	str.w	r6, [r4, #-40]
 808ad70:	f855 6c24 	ldr.w	r6, [r5, #-36]
 808ad74:	eb47 0709 	adc.w	r7, r7, r9
 808ad78:	fba3 8906 	umull	r8, r9, r3, r6
 808ad7c:	f854 6c24 	ldr.w	r6, [r4, #-36]
 808ad80:	eb17 0708 	adds.w	r7, r7, r8
 808ad84:	bf2c      	ite	cs
 808ad86:	f04f 0c01 	movcs.w	ip, #1
 808ad8a:	f04f 0c00 	movcc.w	ip, #0
 808ad8e:	19be      	adds	r6, r7, r6
 808ad90:	f844 6c24 	str.w	r6, [r4, #-36]

        MULADDC_CORE   MULADDC_CORE
 808ad94:	f855 7c20 	ldr.w	r7, [r5, #-32]
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 808ad98:	eb4c 0c09 	adc.w	ip, ip, r9

        MULADDC_CORE   MULADDC_CORE
 808ad9c:	fba3 8907 	umull	r8, r9, r3, r7
 808ada0:	f854 6c20 	ldr.w	r6, [r4, #-32]
 808ada4:	eb1c 0c08 	adds.w	ip, ip, r8
 808ada8:	bf2c      	ite	cs
 808adaa:	2701      	movcs	r7, #1
 808adac:	2700      	movcc	r7, #0
 808adae:	eb1c 0606 	adds.w	r6, ip, r6
 808adb2:	f844 6c20 	str.w	r6, [r4, #-32]
 808adb6:	f855 6c1c 	ldr.w	r6, [r5, #-28]
 808adba:	eb47 0709 	adc.w	r7, r7, r9
 808adbe:	fba3 8906 	umull	r8, r9, r3, r6
 808adc2:	f854 6c1c 	ldr.w	r6, [r4, #-28]
 808adc6:	eb17 0708 	adds.w	r7, r7, r8
 808adca:	bf2c      	ite	cs
 808adcc:	f04f 0c01 	movcs.w	ip, #1
 808add0:	f04f 0c00 	movcc.w	ip, #0
 808add4:	19be      	adds	r6, r7, r6
 808add6:	f844 6c1c 	str.w	r6, [r4, #-28]
        MULADDC_CORE   MULADDC_CORE
 808adda:	f855 7c18 	ldr.w	r7, [r5, #-24]
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
 808adde:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 808ade2:	fba3 8907 	umull	r8, r9, r3, r7
 808ade6:	f854 6c18 	ldr.w	r6, [r4, #-24]
 808adea:	eb1c 0c08 	adds.w	ip, ip, r8
 808adee:	bf2c      	ite	cs
 808adf0:	2701      	movcs	r7, #1
 808adf2:	2700      	movcc	r7, #0
 808adf4:	eb1c 0606 	adds.w	r6, ip, r6
 808adf8:	f844 6c18 	str.w	r6, [r4, #-24]
 808adfc:	f855 6c14 	ldr.w	r6, [r5, #-20]
 808ae00:	eb47 0709 	adc.w	r7, r7, r9
 808ae04:	fba3 8906 	umull	r8, r9, r3, r6
 808ae08:	f854 6c14 	ldr.w	r6, [r4, #-20]
 808ae0c:	eb17 0708 	adds.w	r7, r7, r8
 808ae10:	bf2c      	ite	cs
 808ae12:	f04f 0c01 	movcs.w	ip, #1
 808ae16:	f04f 0c00 	movcc.w	ip, #0
 808ae1a:	19be      	adds	r6, r7, r6
 808ae1c:	f844 6c14 	str.w	r6, [r4, #-20]
        MULADDC_CORE   MULADDC_CORE
 808ae20:	f855 7c10 	ldr.w	r7, [r5, #-16]
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 808ae24:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 808ae28:	fba3 8907 	umull	r8, r9, r3, r7
 808ae2c:	f854 6c10 	ldr.w	r6, [r4, #-16]
 808ae30:	eb1c 0c08 	adds.w	ip, ip, r8
 808ae34:	bf2c      	ite	cs
 808ae36:	2701      	movcs	r7, #1
 808ae38:	2700      	movcc	r7, #0
 808ae3a:	eb1c 0606 	adds.w	r6, ip, r6
 808ae3e:	f844 6c10 	str.w	r6, [r4, #-16]
 808ae42:	f855 6c0c 	ldr.w	r6, [r5, #-12]
 808ae46:	eb47 0709 	adc.w	r7, r7, r9
 808ae4a:	fba3 8906 	umull	r8, r9, r3, r6
 808ae4e:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 808ae52:	eb17 0708 	adds.w	r7, r7, r8
 808ae56:	bf2c      	ite	cs
 808ae58:	f04f 0c01 	movcs.w	ip, #1
 808ae5c:	f04f 0c00 	movcc.w	ip, #0
 808ae60:	19be      	adds	r6, r7, r6
 808ae62:	f844 6c0c 	str.w	r6, [r4, #-12]
        MULADDC_CORE   MULADDC_CORE
 808ae66:	f855 7c08 	ldr.w	r7, [r5, #-8]
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 808ae6a:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 808ae6e:	fba3 8907 	umull	r8, r9, r3, r7
 808ae72:	f854 6c08 	ldr.w	r6, [r4, #-8]
 808ae76:	eb1c 0c08 	adds.w	ip, ip, r8
 808ae7a:	bf2c      	ite	cs
 808ae7c:	2701      	movcs	r7, #1
 808ae7e:	2700      	movcc	r7, #0
 808ae80:	eb1c 0606 	adds.w	r6, ip, r6
 808ae84:	f844 6c08 	str.w	r6, [r4, #-8]
 808ae88:	f855 6c04 	ldr.w	r6, [r5, #-4]
 808ae8c:	eb47 0709 	adc.w	r7, r7, r9
 808ae90:	fba3 8906 	umull	r8, r9, r3, r6
 808ae94:	f854 6c04 	ldr.w	r6, [r4, #-4]
 808ae98:	eb17 0708 	adds.w	r7, r7, r8
 808ae9c:	bf2c      	ite	cs
 808ae9e:	f04f 0c01 	movcs.w	ip, #1
 808aea2:	f04f 0c00 	movcc.w	ip, #0
 808aea6:	19be      	adds	r6, r7, r6
 808aea8:	eb4c 0c09 	adc.w	ip, ip, r9
 808aeac:	f844 6c04 	str.w	r6, [r4, #-4]
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 808aeb0:	e6d9      	b.n	808ac66 <_ZL11mpi_mul_hlpjPmS_m+0xe>
 808aeb2:	ea4f 1e10 	mov.w	lr, r0, lsr #4
 808aeb6:	eba0 100e 	sub.w	r0, r0, lr, lsl #4
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
 808aeba:	2807      	cmp	r0, #7
 808aebc:	ea4f 1e8e 	mov.w	lr, lr, lsl #6
 808aec0:	eb01 050e 	add.w	r5, r1, lr
 808aec4:	eb02 040e 	add.w	r4, r2, lr
 808aec8:	d966      	bls.n	808af98 <_ZL11mpi_mul_hlpjPmS_m+0x340>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 808aeca:	f851 600e 	ldr.w	r6, [r1, lr]
 808aece:	fba6 7803 	umull	r7, r8, r6, r3
 808aed2:	f852 600e 	ldr.w	r6, [r2, lr]
 808aed6:	eb1c 0c07 	adds.w	ip, ip, r7
 808aeda:	bf2c      	ite	cs
 808aedc:	2101      	movcs	r1, #1
 808aede:	2100      	movcc	r1, #0
 808aee0:	eb1c 0606 	adds.w	r6, ip, r6
 808aee4:	f842 600e 	str.w	r6, [r2, lr]
 808aee8:	686e      	ldr	r6, [r5, #4]
 808aeea:	eb41 0108 	adc.w	r1, r1, r8
 808aeee:	fba3 7806 	umull	r7, r8, r3, r6
 808aef2:	6866      	ldr	r6, [r4, #4]
 808aef4:	19ca      	adds	r2, r1, r7
 808aef6:	bf2c      	ite	cs
 808aef8:	2101      	movcs	r1, #1
 808aefa:	2100      	movcc	r1, #0
 808aefc:	1992      	adds	r2, r2, r6
 808aefe:	6062      	str	r2, [r4, #4]
        MULADDC_CORE   MULADDC_CORE
 808af00:	68ae      	ldr	r6, [r5, #8]
    }

    for( ; i >= 8; i -= 8 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 808af02:	eb41 0108 	adc.w	r1, r1, r8
        MULADDC_CORE   MULADDC_CORE
 808af06:	fba3 7806 	umull	r7, r8, r3, r6
 808af0a:	68a6      	ldr	r6, [r4, #8]
 808af0c:	19c9      	adds	r1, r1, r7
 808af0e:	bf2c      	ite	cs
 808af10:	2201      	movcs	r2, #1
 808af12:	2200      	movcc	r2, #0
 808af14:	1989      	adds	r1, r1, r6
 808af16:	60a1      	str	r1, [r4, #8]
 808af18:	68ee      	ldr	r6, [r5, #12]
 808af1a:	eb42 0208 	adc.w	r2, r2, r8
 808af1e:	fba3 7806 	umull	r7, r8, r3, r6
 808af22:	68e6      	ldr	r6, [r4, #12]
 808af24:	19d2      	adds	r2, r2, r7
 808af26:	bf2c      	ite	cs
 808af28:	2101      	movcs	r1, #1
 808af2a:	2100      	movcc	r1, #0
 808af2c:	1992      	adds	r2, r2, r6
 808af2e:	60e2      	str	r2, [r4, #12]

        MULADDC_CORE   MULADDC_CORE
 808af30:	692e      	ldr	r6, [r5, #16]

    for( ; i >= 8; i -= 8 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 808af32:	eb41 0108 	adc.w	r1, r1, r8

        MULADDC_CORE   MULADDC_CORE
 808af36:	fba3 7806 	umull	r7, r8, r3, r6
 808af3a:	6926      	ldr	r6, [r4, #16]
 808af3c:	19c9      	adds	r1, r1, r7
 808af3e:	bf2c      	ite	cs
 808af40:	2201      	movcs	r2, #1
 808af42:	2200      	movcc	r2, #0
 808af44:	1989      	adds	r1, r1, r6
 808af46:	6121      	str	r1, [r4, #16]
 808af48:	696e      	ldr	r6, [r5, #20]
 808af4a:	eb42 0208 	adc.w	r2, r2, r8
 808af4e:	fba3 7806 	umull	r7, r8, r3, r6
 808af52:	6966      	ldr	r6, [r4, #20]
 808af54:	19d2      	adds	r2, r2, r7
 808af56:	bf2c      	ite	cs
 808af58:	2101      	movcs	r1, #1
 808af5a:	2100      	movcc	r1, #0
 808af5c:	1992      	adds	r2, r2, r6
 808af5e:	6162      	str	r2, [r4, #20]
        MULADDC_CORE   MULADDC_CORE
 808af60:	69ae      	ldr	r6, [r5, #24]
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
 808af62:	eb41 0108 	adc.w	r1, r1, r8
        MULADDC_CORE   MULADDC_CORE
 808af66:	fba3 7806 	umull	r7, r8, r3, r6
 808af6a:	69a6      	ldr	r6, [r4, #24]
 808af6c:	19c9      	adds	r1, r1, r7
 808af6e:	bf2c      	ite	cs
 808af70:	2201      	movcs	r2, #1
 808af72:	2200      	movcc	r2, #0
 808af74:	1989      	adds	r1, r1, r6
 808af76:	61a1      	str	r1, [r4, #24]
 808af78:	69ee      	ldr	r6, [r5, #28]
 808af7a:	69e1      	ldr	r1, [r4, #28]
 808af7c:	fba3 6706 	umull	r6, r7, r3, r6
 808af80:	eb42 0208 	adc.w	r2, r2, r8
 808af84:	1992      	adds	r2, r2, r6
 808af86:	bf2c      	ite	cs
 808af88:	f04f 0c01 	movcs.w	ip, #1
 808af8c:	f04f 0c00 	movcc.w	ip, #0
 808af90:	1852      	adds	r2, r2, r1
 808af92:	eb4c 0c07 	adc.w	ip, ip, r7
 808af96:	61e2      	str	r2, [r4, #28]
 808af98:	08c2      	lsrs	r2, r0, #3
 808af9a:	0151      	lsls	r1, r2, #5
 808af9c:	440c      	add	r4, r1
 808af9e:	440d      	add	r5, r1
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
    mbedtls_mpi_uint c = 0, t = 0;
 808afa0:	4621      	mov	r1, r4
 808afa2:	eba0 00c2 	sub.w	r0, r0, r2, lsl #3
 808afa6:	0080      	lsls	r0, r0, #2
 808afa8:	eb05 0e00 	add.w	lr, r5, r0
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 808afac:	4575      	cmp	r5, lr
 808afae:	d011      	beq.n	808afd4 <_ZL11mpi_mul_hlpjPmS_m+0x37c>
    {
        MULADDC_INIT
        MULADDC_CORE
 808afb0:	f855 6b04 	ldr.w	r6, [r5], #4
 808afb4:	fba6 7803 	umull	r7, r8, r6, r3
 808afb8:	680e      	ldr	r6, [r1, #0]
 808afba:	eb1c 0207 	adds.w	r2, ip, r7
 808afbe:	bf2c      	ite	cs
 808afc0:	f04f 0c01 	movcs.w	ip, #1
 808afc4:	f04f 0c00 	movcc.w	ip, #0
 808afc8:	1992      	adds	r2, r2, r6
 808afca:	eb4c 0c08 	adc.w	ip, ip, r8
 808afce:	f841 2b04 	str.w	r2, [r1], #4
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 808afd2:	e7eb      	b.n	808afac <_ZL11mpi_mul_hlpjPmS_m+0x354>
 808afd4:	4404      	add	r4, r0
#endif /* MULADDC_HUIT */

    t++;

    do {
        *d += c; c = ( *d < c ); d++;
 808afd6:	6823      	ldr	r3, [r4, #0]
 808afd8:	4463      	add	r3, ip
 808afda:	459c      	cmp	ip, r3
 808afdc:	f844 3b04 	str.w	r3, [r4], #4
 808afe0:	bf8c      	ite	hi
 808afe2:	f04f 0c01 	movhi.w	ip, #1
 808afe6:	f04f 0c00 	movls.w	ip, #0
    }
    while( c != 0 );
 808afea:	d8f4      	bhi.n	808afd6 <_ZL11mpi_mul_hlpjPmS_m+0x37e>
}
 808afec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808aff0 <mbedtls_mpi_init>:
/*
 * Initialize one MPI
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
 808aff0:	b120      	cbz	r0, 808affc <mbedtls_mpi_init+0xc>
        return;

    X->s = 1;
 808aff2:	2301      	movs	r3, #1
 808aff4:	6003      	str	r3, [r0, #0]
    X->n = 0;
 808aff6:	2300      	movs	r3, #0
 808aff8:	6043      	str	r3, [r0, #4]
    X->p = NULL;
 808affa:	6083      	str	r3, [r0, #8]
 808affc:	4770      	bx	lr

0808affe <mbedtls_mpi_free>:

/*
 * Unallocate one MPI
 */
void mbedtls_mpi_free( mbedtls_mpi *X )
{
 808affe:	b510      	push	{r4, lr}
    if( X == NULL )
 808b000:	4604      	mov	r4, r0
 808b002:	b188      	cbz	r0, 808b028 <mbedtls_mpi_free+0x2a>
        return;

    if( X->p != NULL )
 808b004:	6883      	ldr	r3, [r0, #8]
 808b006:	b153      	cbz	r3, 808b01e <mbedtls_mpi_free+0x20>
    {
        mbedtls_mpi_zeroize( X->p, X->n );
 808b008:	6842      	ldr	r2, [r0, #4]
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n ) {
    volatile mbedtls_mpi_uint *p = (mbedtls_mpi_uint *)v; while( n-- ) *p++ = 0;
 808b00a:	2100      	movs	r1, #0
 808b00c:	f112 32ff 	adds.w	r2, r2, #4294967295
 808b010:	d302      	bcc.n	808b018 <mbedtls_mpi_free+0x1a>
 808b012:	6019      	str	r1, [r3, #0]
 808b014:	3304      	adds	r3, #4
 808b016:	e7f9      	b.n	808b00c <mbedtls_mpi_free+0xe>
        return;

    if( X->p != NULL )
    {
        mbedtls_mpi_zeroize( X->p, X->n );
        mbedtls_free( X->p );
 808b018:	68a0      	ldr	r0, [r4, #8]
 808b01a:	f005 fc2d 	bl	8090878 <free>
    }

    X->s = 1;
 808b01e:	2301      	movs	r3, #1
 808b020:	6023      	str	r3, [r4, #0]
    X->n = 0;
 808b022:	2300      	movs	r3, #0
 808b024:	6063      	str	r3, [r4, #4]
    X->p = NULL;
 808b026:	60a3      	str	r3, [r4, #8]
 808b028:	bd10      	pop	{r4, pc}

0808b02a <mbedtls_mpi_grow>:
 */
int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )
{
    mbedtls_mpi_uint *p;

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 808b02a:	f242 7310 	movw	r3, #10000	; 0x2710
 808b02e:	4299      	cmp	r1, r3

/*
 * Enlarge to the specified number of limbs
 */
int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )
{
 808b030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808b034:	4604      	mov	r4, r0
 808b036:	460f      	mov	r7, r1
    mbedtls_mpi_uint *p;

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 808b038:	d903      	bls.n	808b042 <mbedtls_mpi_grow+0x18>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 808b03a:	f06f 000f 	mvn.w	r0, #15
 808b03e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    if( X->n < nblimbs )
 808b042:	6846      	ldr	r6, [r0, #4]
 808b044:	42b1      	cmp	r1, r6
 808b046:	d919      	bls.n	808b07c <mbedtls_mpi_grow+0x52>
    {
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 808b048:	2104      	movs	r1, #4
 808b04a:	4638      	mov	r0, r7
 808b04c:	f007 f958 	bl	8092300 <calloc>
 808b050:	4680      	mov	r8, r0
 808b052:	2800      	cmp	r0, #0
 808b054:	d0f1      	beq.n	808b03a <mbedtls_mpi_grow+0x10>
            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );

        if( X->p != NULL )
 808b056:	68a5      	ldr	r5, [r4, #8]
 808b058:	b16d      	cbz	r5, 808b076 <mbedtls_mpi_grow+0x4c>
        {
            memcpy( p, X->p, X->n * ciL );
 808b05a:	00b2      	lsls	r2, r6, #2
 808b05c:	4629      	mov	r1, r5
 808b05e:	f007 f974 	bl	809234a <memcpy>
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n ) {
    volatile mbedtls_mpi_uint *p = (mbedtls_mpi_uint *)v; while( n-- ) *p++ = 0;
 808b062:	2300      	movs	r3, #0
 808b064:	f116 36ff 	adds.w	r6, r6, #4294967295
 808b068:	d302      	bcc.n	808b070 <mbedtls_mpi_grow+0x46>
 808b06a:	602b      	str	r3, [r5, #0]
 808b06c:	3504      	adds	r5, #4
 808b06e:	e7f9      	b.n	808b064 <mbedtls_mpi_grow+0x3a>

        if( X->p != NULL )
        {
            memcpy( p, X->p, X->n * ciL );
            mbedtls_mpi_zeroize( X->p, X->n );
            mbedtls_free( X->p );
 808b070:	68a0      	ldr	r0, [r4, #8]
 808b072:	f005 fc01 	bl	8090878 <free>
        }

        X->n = nblimbs;
 808b076:	6067      	str	r7, [r4, #4]
        X->p = p;
 808b078:	f8c4 8008 	str.w	r8, [r4, #8]
    }

    return( 0 );
 808b07c:	2000      	movs	r0, #0
}
 808b07e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808b082 <mbedtls_mpi_copy>:
int mbedtls_mpi_copy( mbedtls_mpi *X, const mbedtls_mpi *Y )
{
    int ret;
    size_t i;

    if( X == Y )
 808b082:	4288      	cmp	r0, r1

/*
 * Copy the contents of Y into X
 */
int mbedtls_mpi_copy( mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 808b084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808b086:	4606      	mov	r6, r0
 808b088:	460f      	mov	r7, r1
    int ret;
    size_t i;

    if( X == Y )
 808b08a:	d020      	beq.n	808b0ce <mbedtls_mpi_copy+0x4c>
        return( 0 );

    if( Y->p == NULL )
 808b08c:	688c      	ldr	r4, [r1, #8]
 808b08e:	b914      	cbnz	r4, 808b096 <mbedtls_mpi_copy+0x14>
    {
        mbedtls_mpi_free( X );
 808b090:	f7ff ffb5 	bl	808affe <mbedtls_mpi_free>
 808b094:	e01d      	b.n	808b0d2 <mbedtls_mpi_copy+0x50>
        return( 0 );
    }

    for( i = Y->n - 1; i > 0; i-- )
 808b096:	6849      	ldr	r1, [r1, #4]
 808b098:	3901      	subs	r1, #1
 808b09a:	b119      	cbz	r1, 808b0a4 <mbedtls_mpi_copy+0x22>
        if( Y->p[i] != 0 )
 808b09c:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
 808b0a0:	2b00      	cmp	r3, #0
 808b0a2:	d0f9      	beq.n	808b098 <mbedtls_mpi_copy+0x16>
            break;
    i++;

    X->s = Y->s;
 808b0a4:	683b      	ldr	r3, [r7, #0]
    }

    for( i = Y->n - 1; i > 0; i-- )
        if( Y->p[i] != 0 )
            break;
    i++;
 808b0a6:	1c4d      	adds	r5, r1, #1

    X->s = Y->s;
 808b0a8:	6033      	str	r3, [r6, #0]

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
 808b0aa:	4629      	mov	r1, r5
 808b0ac:	4630      	mov	r0, r6
 808b0ae:	f7ff ffbc 	bl	808b02a <mbedtls_mpi_grow>
 808b0b2:	4604      	mov	r4, r0
 808b0b4:	b968      	cbnz	r0, 808b0d2 <mbedtls_mpi_copy+0x50>

    memset( X->p, 0, X->n * ciL );
 808b0b6:	6872      	ldr	r2, [r6, #4]
 808b0b8:	4601      	mov	r1, r0
 808b0ba:	0092      	lsls	r2, r2, #2
 808b0bc:	68b0      	ldr	r0, [r6, #8]
 808b0be:	f007 f96a 	bl	8092396 <memset>
    memcpy( X->p, Y->p, i * ciL );
 808b0c2:	00aa      	lsls	r2, r5, #2
 808b0c4:	68b9      	ldr	r1, [r7, #8]
 808b0c6:	68b0      	ldr	r0, [r6, #8]
 808b0c8:	f007 f93f 	bl	809234a <memcpy>
 808b0cc:	e001      	b.n	808b0d2 <mbedtls_mpi_copy+0x50>
{
    int ret;
    size_t i;

    if( X == Y )
        return( 0 );
 808b0ce:	2000      	movs	r0, #0
 808b0d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808b0d2:	4620      	mov	r0, r4
    memcpy( X->p, Y->p, i * ciL );

cleanup:

    return( ret );
}
 808b0d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808b0d6 <mbedtls_mpi_lset>:

/*
 * Set value from integer
 */
int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 808b0d6:	b570      	push	{r4, r5, r6, lr}
 808b0d8:	460e      	mov	r6, r1
    int ret;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 808b0da:	2101      	movs	r1, #1

/*
 * Set value from integer
 */
int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 808b0dc:	4604      	mov	r4, r0
    int ret;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 808b0de:	f7ff ffa4 	bl	808b02a <mbedtls_mpi_grow>
 808b0e2:	4605      	mov	r5, r0
 808b0e4:	b988      	cbnz	r0, 808b10a <mbedtls_mpi_lset+0x34>
    memset( X->p, 0, X->n * ciL );
 808b0e6:	6862      	ldr	r2, [r4, #4]
 808b0e8:	4601      	mov	r1, r0
 808b0ea:	0092      	lsls	r2, r2, #2
 808b0ec:	68a0      	ldr	r0, [r4, #8]
 808b0ee:	f007 f952 	bl	8092396 <memset>

    X->p[0] = ( z < 0 ) ? -z : z;
 808b0f2:	68a3      	ldr	r3, [r4, #8]
 808b0f4:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    X->s    = ( z < 0 ) ? -1 : 1;
 808b0f8:	2e00      	cmp	r6, #0
    int ret;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    memset( X->p, 0, X->n * ciL );

    X->p[0] = ( z < 0 ) ? -z : z;
 808b0fa:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
 808b0fe:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 808b100:	bfb4      	ite	lt
 808b102:	f04f 33ff 	movlt.w	r3, #4294967295
 808b106:	2301      	movge	r3, #1
 808b108:	6023      	str	r3, [r4, #0]

cleanup:

    return( ret );
}
 808b10a:	4628      	mov	r0, r5
 808b10c:	bd70      	pop	{r4, r5, r6, pc}

0808b10e <mbedtls_mpi_get_bit>:
/*
 * Get a specific bit
 */
int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )
{
    if( X->n * biL <= pos )
 808b10e:	6843      	ldr	r3, [r0, #4]
 808b110:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
        return( 0 );

    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
 808b114:	bf3f      	itttt	cc
 808b116:	6883      	ldrcc	r3, [r0, #8]
 808b118:	094a      	lsrcc	r2, r1, #5
 808b11a:	f853 3022 	ldrcc.w	r3, [r3, r2, lsl #2]
 808b11e:	f001 001f 	andcc.w	r0, r1, #31
 808b122:	bf3a      	itte	cc
 808b124:	fa23 f000 	lsrcc.w	r0, r3, r0
 808b128:	f000 0001 	andcc.w	r0, r0, #1
 * Get a specific bit
 */
int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )
{
    if( X->n * biL <= pos )
        return( 0 );
 808b12c:	2000      	movcs	r0, #0

    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
}
 808b12e:	4770      	bx	lr

0808b130 <mbedtls_mpi_lsb>:
/*
 * Return the number of less significant zero-bits
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
    size_t i, j, count = 0;
 808b130:	2300      	movs	r3, #0

    for( i = 0; i < X->n; i++ )
 808b132:	461a      	mov	r2, r3

/*
 * Return the number of less significant zero-bits
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
 808b134:	b570      	push	{r4, r5, r6, lr}
    size_t i, j, count = 0;

    for( i = 0; i < X->n; i++ )
 808b136:	6844      	ldr	r4, [r0, #4]
 808b138:	42a2      	cmp	r2, r4
 808b13a:	d00e      	beq.n	808b15a <mbedtls_mpi_lsb+0x2a>
        for( j = 0; j < biL; j++, count++ )
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 808b13c:	6881      	ldr	r1, [r0, #8]
 808b13e:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
 808b142:	2100      	movs	r1, #0
 808b144:	fa25 f601 	lsr.w	r6, r5, r1
 808b148:	07f6      	lsls	r6, r6, #31
 808b14a:	d408      	bmi.n	808b15e <mbedtls_mpi_lsb+0x2e>
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
    size_t i, j, count = 0;

    for( i = 0; i < X->n; i++ )
        for( j = 0; j < biL; j++, count++ )
 808b14c:	3101      	adds	r1, #1
 808b14e:	2920      	cmp	r1, #32
 808b150:	f103 0301 	add.w	r3, r3, #1
 808b154:	d1f6      	bne.n	808b144 <mbedtls_mpi_lsb+0x14>
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
    size_t i, j, count = 0;

    for( i = 0; i < X->n; i++ )
 808b156:	3201      	adds	r2, #1
 808b158:	e7ee      	b.n	808b138 <mbedtls_mpi_lsb+0x8>
        for( j = 0; j < biL; j++, count++ )
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
                return( count );

    return( 0 );
 808b15a:	2000      	movs	r0, #0
 808b15c:	bd70      	pop	{r4, r5, r6, pc}
 808b15e:	4618      	mov	r0, r3
}
 808b160:	bd70      	pop	{r4, r5, r6, pc}

0808b162 <mbedtls_mpi_bitlen>:

/*
 * Return the number of bits
 */
size_t mbedtls_mpi_bitlen( const mbedtls_mpi *X )
{
 808b162:	b510      	push	{r4, lr}
    size_t i, j;

    if( X->n == 0 )
 808b164:	6843      	ldr	r3, [r0, #4]
 808b166:	b1d3      	cbz	r3, 808b19e <mbedtls_mpi_bitlen+0x3c>
 808b168:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 808b16c:	3a01      	subs	r2, #1
        return( 0 );

    for( i = X->n - 1; i > 0; i-- )
 808b16e:	1e59      	subs	r1, r3, #1
 808b170:	0092      	lsls	r2, r2, #2
 808b172:	6883      	ldr	r3, [r0, #8]
 808b174:	b121      	cbz	r1, 808b180 <mbedtls_mpi_bitlen+0x1e>
        if( X->p[i] != 0 )
 808b176:	589c      	ldr	r4, [r3, r2]
 808b178:	3a04      	subs	r2, #4
 808b17a:	b90c      	cbnz	r4, 808b180 <mbedtls_mpi_bitlen+0x1e>
    size_t i, j;

    if( X->n == 0 )
        return( 0 );

    for( i = X->n - 1; i > 0; i-- )
 808b17c:	3901      	subs	r1, #1
 808b17e:	e7f8      	b.n	808b172 <mbedtls_mpi_bitlen+0x10>
        if( X->p[i] != 0 )
            break;

    j = biL - mbedtls_clz( X->p[i] );
 808b180:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 * Count leading zero bits in a given integer
 */
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
 808b184:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000

    for( j = 0; j < biL; j++ )
 808b188:	2300      	movs	r3, #0
    {
        if( x & mask ) break;
 808b18a:	4210      	tst	r0, r2
 808b18c:	d104      	bne.n	808b198 <mbedtls_mpi_bitlen+0x36>
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);

    for( j = 0; j < biL; j++ )
 808b18e:	3301      	adds	r3, #1
 808b190:	2b20      	cmp	r3, #32
    {
        if( x & mask ) break;

        mask >>= 1;
 808b192:	ea4f 0252 	mov.w	r2, r2, lsr #1
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);

    for( j = 0; j < biL; j++ )
 808b196:	d1f8      	bne.n	808b18a <mbedtls_mpi_bitlen+0x28>
        if( X->p[i] != 0 )
            break;

    j = biL - mbedtls_clz( X->p[i] );

    return( ( i * biL ) + j );
 808b198:	ebc3 1341 	rsb	r3, r3, r1, lsl #5
 808b19c:	3320      	adds	r3, #32
}
 808b19e:	4618      	mov	r0, r3
 808b1a0:	bd10      	pop	{r4, pc}

0808b1a2 <mbedtls_mpi_size>:

/*
 * Return the total size in bytes
 */
size_t mbedtls_mpi_size( const mbedtls_mpi *X )
{
 808b1a2:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
 808b1a4:	f7ff ffdd 	bl	808b162 <mbedtls_mpi_bitlen>
 808b1a8:	3007      	adds	r0, #7
}
 808b1aa:	08c0      	lsrs	r0, r0, #3
 808b1ac:	bd08      	pop	{r3, pc}

0808b1ae <mbedtls_mpi_read_binary>:

/*
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
 808b1ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808b1b0:	460d      	mov	r5, r1
    int ret;
    size_t i, j;
    size_t const limbs = CHARS_TO_LIMBS( buflen );
 808b1b2:	f012 0103 	ands.w	r1, r2, #3
 808b1b6:	bf18      	it	ne
 808b1b8:	2101      	movne	r1, #1

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 808b1ba:	6843      	ldr	r3, [r0, #4]
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
    int ret;
    size_t i, j;
    size_t const limbs = CHARS_TO_LIMBS( buflen );
 808b1bc:	eb01 0492 	add.w	r4, r1, r2, lsr #2

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 808b1c0:	429c      	cmp	r4, r3

/*
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
 808b1c2:	4606      	mov	r6, r0
 808b1c4:	4617      	mov	r7, r2
    int ret;
    size_t i, j;
    size_t const limbs = CHARS_TO_LIMBS( buflen );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 808b1c6:	d105      	bne.n	808b1d4 <mbedtls_mpi_read_binary+0x26>
        mbedtls_mpi_free( X );
        mbedtls_mpi_init( X );
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 808b1c8:	2100      	movs	r1, #0
 808b1ca:	4630      	mov	r0, r6
 808b1cc:	f7ff ff83 	bl	808b0d6 <mbedtls_mpi_lset>
 808b1d0:	b160      	cbz	r0, 808b1ec <mbedtls_mpi_read_binary+0x3e>
 808b1d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    size_t const limbs = CHARS_TO_LIMBS( buflen );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
    {
        mbedtls_mpi_free( X );
 808b1d4:	f7ff ff13 	bl	808affe <mbedtls_mpi_free>
        mbedtls_mpi_init( X );
 808b1d8:	4630      	mov	r0, r6
 808b1da:	f7ff ff09 	bl	808aff0 <mbedtls_mpi_init>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 808b1de:	4621      	mov	r1, r4
 808b1e0:	4630      	mov	r0, r6
 808b1e2:	f7ff ff22 	bl	808b02a <mbedtls_mpi_grow>
 808b1e6:	2800      	cmp	r0, #0
 808b1e8:	d0ee      	beq.n	808b1c8 <mbedtls_mpi_read_binary+0x1a>
 808b1ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 808b1ec:	4603      	mov	r3, r0
 808b1ee:	19e9      	adds	r1, r5, r7

    for( i = buflen, j = 0; i > 0; i--, j++ )
 808b1f0:	42bb      	cmp	r3, r7
 808b1f2:	d010      	beq.n	808b216 <mbedtls_mpi_read_binary+0x68>
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);
 808b1f4:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
 808b1f8:	68b2      	ldr	r2, [r6, #8]
 808b1fa:	00dc      	lsls	r4, r3, #3
 808b1fc:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 808b200:	f004 0418 	and.w	r4, r4, #24
 808b204:	fa05 f404 	lsl.w	r4, r5, r4
 808b208:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    for( i = buflen, j = 0; i > 0; i--, j++ )
 808b20c:	3301      	adds	r3, #1
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);
 808b20e:	432c      	orrs	r4, r5
 808b210:	f842 402e 	str.w	r4, [r2, lr, lsl #2]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    for( i = buflen, j = 0; i > 0; i--, j++ )
 808b214:	e7ec      	b.n	808b1f0 <mbedtls_mpi_read_binary+0x42>
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);

cleanup:

    return( ret );
}
 808b216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808b218 <mbedtls_mpi_write_binary>:

/*
 * Export X into unsigned binary data, big endian
 */
int mbedtls_mpi_write_binary( const mbedtls_mpi *X, unsigned char *buf, size_t buflen )
{
 808b218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808b21a:	4614      	mov	r4, r2
 808b21c:	4605      	mov	r5, r0
 808b21e:	460f      	mov	r7, r1
    size_t i, j, n;

    n = mbedtls_mpi_size( X );
 808b220:	f7ff ffbf 	bl	808b1a2 <mbedtls_mpi_size>

    if( buflen < n )
 808b224:	42a0      	cmp	r0, r4
 */
int mbedtls_mpi_write_binary( const mbedtls_mpi *X, unsigned char *buf, size_t buflen )
{
    size_t i, j, n;

    n = mbedtls_mpi_size( X );
 808b226:	4606      	mov	r6, r0

    if( buflen < n )
 808b228:	d814      	bhi.n	808b254 <mbedtls_mpi_write_binary+0x3c>
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );

    memset( buf, 0, buflen );
 808b22a:	4622      	mov	r2, r4
 808b22c:	2100      	movs	r1, #0
 808b22e:	4638      	mov	r0, r7
 808b230:	f007 f8b1 	bl	8092396 <memset>
 808b234:	443c      	add	r4, r7

    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 808b236:	2300      	movs	r3, #0
 808b238:	42b3      	cmp	r3, r6
 808b23a:	d00e      	beq.n	808b25a <mbedtls_mpi_write_binary+0x42>
        buf[i] = (unsigned char)( X->p[j / ciL] >> ((j % ciL) << 3) );
 808b23c:	68a8      	ldr	r0, [r5, #8]
 808b23e:	00da      	lsls	r2, r3, #3
 808b240:	089f      	lsrs	r7, r3, #2
 808b242:	f002 0118 	and.w	r1, r2, #24
 808b246:	f850 2027 	ldr.w	r2, [r0, r7, lsl #2]
    if( buflen < n )
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );

    memset( buf, 0, buflen );

    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 808b24a:	3301      	adds	r3, #1
        buf[i] = (unsigned char)( X->p[j / ciL] >> ((j % ciL) << 3) );
 808b24c:	40ca      	lsrs	r2, r1
 808b24e:	f804 2d01 	strb.w	r2, [r4, #-1]!
    if( buflen < n )
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );

    memset( buf, 0, buflen );

    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 808b252:	e7f1      	b.n	808b238 <mbedtls_mpi_write_binary+0x20>
    size_t i, j, n;

    n = mbedtls_mpi_size( X );

    if( buflen < n )
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
 808b254:	f06f 0007 	mvn.w	r0, #7
 808b258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    memset( buf, 0, buflen );

    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
        buf[i] = (unsigned char)( X->p[j / ciL] >> ((j % ciL) << 3) );

    return( 0 );
 808b25a:	2000      	movs	r0, #0
}
 808b25c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808b25e <mbedtls_mpi_shift_l>:

/*
 * Left-shift: X <<= count
 */
int mbedtls_mpi_shift_l( mbedtls_mpi *X, size_t count )
{
 808b25e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808b260:	4604      	mov	r4, r0
 808b262:	460d      	mov	r5, r1
    int ret;
    size_t i, v0, t1;
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count / (biL    );
 808b264:	094e      	lsrs	r6, r1, #5
    t1 = count & (biL - 1);
 808b266:	f001 071f 	and.w	r7, r1, #31

    i = mbedtls_mpi_bitlen( X ) + count;
 808b26a:	f7ff ff7a 	bl	808b162 <mbedtls_mpi_bitlen>

    if( X->n * biL < i )
 808b26e:	6863      	ldr	r3, [r4, #4]
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count / (biL    );
    t1 = count & (biL - 1);

    i = mbedtls_mpi_bitlen( X ) + count;
 808b270:	4428      	add	r0, r5

    if( X->n * biL < i )
 808b272:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
 808b276:	d809      	bhi.n	808b28c <mbedtls_mpi_shift_l+0x2e>
    ret = 0;

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 808b278:	b346      	cbz	r6, 808b2cc <mbedtls_mpi_shift_l+0x6e>
    {
        for( i = X->n; i > v0; i-- )
 808b27a:	6863      	ldr	r3, [r4, #4]
 808b27c:	f06f 0103 	mvn.w	r1, #3
 808b280:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 808b284:	3a01      	subs	r2, #1
 808b286:	0092      	lsls	r2, r2, #2
 808b288:	4371      	muls	r1, r6
 808b28a:	e00b      	b.n	808b2a4 <mbedtls_mpi_shift_l+0x46>
    t1 = count & (biL - 1);

    i = mbedtls_mpi_bitlen( X ) + count;

    if( X->n * biL < i )
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 808b28c:	f010 011f 	ands.w	r1, r0, #31
 808b290:	bf18      	it	ne
 808b292:	2101      	movne	r1, #1
 808b294:	eb01 1150 	add.w	r1, r1, r0, lsr #5
 808b298:	4620      	mov	r0, r4
 808b29a:	f7ff fec6 	bl	808b02a <mbedtls_mpi_grow>
 808b29e:	2800      	cmp	r0, #0
 808b2a0:	d0ea      	beq.n	808b278 <mbedtls_mpi_shift_l+0x1a>
 808b2a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
 808b2a4:	42b3      	cmp	r3, r6
 808b2a6:	d906      	bls.n	808b2b6 <mbedtls_mpi_shift_l+0x58>
            X->p[i - 1] = X->p[i - v0 - 1];
 808b2a8:	68a0      	ldr	r0, [r4, #8]
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
 808b2aa:	3b01      	subs	r3, #1
            X->p[i - 1] = X->p[i - v0 - 1];
 808b2ac:	1885      	adds	r5, r0, r2
 808b2ae:	586d      	ldr	r5, [r5, r1]
 808b2b0:	5085      	str	r5, [r0, r2]
 808b2b2:	3a04      	subs	r2, #4
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
 808b2b4:	e7f6      	b.n	808b2a4 <mbedtls_mpi_shift_l+0x46>
 808b2b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 808b2ba:	3b01      	subs	r3, #1
 808b2bc:	009b      	lsls	r3, r3, #2
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
            X->p[i - 1] = 0;
 808b2be:	2100      	movs	r1, #0
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
 808b2c0:	1d1a      	adds	r2, r3, #4
 808b2c2:	d003      	beq.n	808b2cc <mbedtls_mpi_shift_l+0x6e>
            X->p[i - 1] = 0;
 808b2c4:	68a2      	ldr	r2, [r4, #8]
 808b2c6:	50d1      	str	r1, [r2, r3]
 808b2c8:	3b04      	subs	r3, #4
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
 808b2ca:	e7f9      	b.n	808b2c0 <mbedtls_mpi_shift_l+0x62>
    }

    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
 808b2cc:	b90f      	cbnz	r7, 808b2d2 <mbedtls_mpi_shift_l+0x74>
    i = mbedtls_mpi_bitlen( X ) + count;

    if( X->n * biL < i )
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );

    ret = 0;
 808b2ce:	2000      	movs	r0, #0
 808b2d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808b2d2:	00b3      	lsls	r3, r6, #2
    }

    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
 808b2d4:	2200      	movs	r2, #0
    {
        for( i = v0; i < X->n; i++ )
        {
            r1 = X->p[i] >> (biL - t1);
 808b2d6:	f1c7 0e20 	rsb	lr, r7, #32
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
 808b2da:	6861      	ldr	r1, [r4, #4]
 808b2dc:	428e      	cmp	r6, r1
 808b2de:	d2f6      	bcs.n	808b2ce <mbedtls_mpi_shift_l+0x70>
        {
            r1 = X->p[i] >> (biL - t1);
 808b2e0:	68a0      	ldr	r0, [r4, #8]
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
 808b2e2:	3601      	adds	r6, #1
        {
            r1 = X->p[i] >> (biL - t1);
 808b2e4:	58c1      	ldr	r1, [r0, r3]
            X->p[i] <<= t1;
 808b2e6:	fa01 f507 	lsl.w	r5, r1, r7
 808b2ea:	50c5      	str	r5, [r0, r3]
            X->p[i] |= r0;
 808b2ec:	68a0      	ldr	r0, [r4, #8]
 808b2ee:	58c5      	ldr	r5, [r0, r3]
 808b2f0:	432a      	orrs	r2, r5
 808b2f2:	50c2      	str	r2, [r0, r3]
 808b2f4:	3304      	adds	r3, #4
            r0 = r1;
 808b2f6:	fa21 f20e 	lsr.w	r2, r1, lr
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
 808b2fa:	e7ee      	b.n	808b2da <mbedtls_mpi_shift_l+0x7c>

0808b2fc <mbedtls_mpi_shift_r>:

/*
 * Right-shift: X >>= count
 */
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
 808b2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count /  biL;
    v1 = count & (biL - 1);

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 808b2fe:	6843      	ldr	r3, [r0, #4]
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count /  biL;
 808b300:	094a      	lsrs	r2, r1, #5
    v1 = count & (biL - 1);

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 808b302:	429a      	cmp	r2, r3
{
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count /  biL;
    v1 = count & (biL - 1);
 808b304:	f001 011f 	and.w	r1, r1, #31

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 808b308:	d801      	bhi.n	808b30e <mbedtls_mpi_shift_r+0x12>
 808b30a:	d105      	bne.n	808b318 <mbedtls_mpi_shift_r+0x1c>
 808b30c:	b159      	cbz	r1, 808b326 <mbedtls_mpi_shift_r+0x2a>
            r0 = r1;
        }
    }

    return( 0 );
}
 808b30e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

    v0 = count /  biL;
    v1 = count & (biL - 1);

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
        return mbedtls_mpi_lset( X, 0 );
 808b312:	2100      	movs	r1, #0
 808b314:	f7ff bedf 	b.w	808b0d6 <mbedtls_mpi_lset>

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 808b318:	b1d2      	cbz	r2, 808b350 <mbedtls_mpi_shift_r+0x54>
 808b31a:	2300      	movs	r3, #0
    {
        for( i = 0; i < X->n - v0; i++ )
 808b31c:	6844      	ldr	r4, [r0, #4]
 808b31e:	1aa4      	subs	r4, r4, r2
 808b320:	42a3      	cmp	r3, r4
 808b322:	d305      	bcc.n	808b330 <mbedtls_mpi_shift_r+0x34>
 808b324:	e001      	b.n	808b32a <mbedtls_mpi_shift_r+0x2e>
        return mbedtls_mpi_lset( X, 0 );

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 808b326:	b35a      	cbz	r2, 808b380 <mbedtls_mpi_shift_r+0x84>
 808b328:	460b      	mov	r3, r1
 808b32a:	009a      	lsls	r2, r3, #2
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
            X->p[i] = 0;
 808b32c:	2500      	movs	r5, #0
 808b32e:	e007      	b.n	808b340 <mbedtls_mpi_shift_r+0x44>
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];
 808b330:	6884      	ldr	r4, [r0, #8]
 808b332:	189d      	adds	r5, r3, r2
 808b334:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 808b338:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
 808b33c:	3301      	adds	r3, #1
 808b33e:	e7ed      	b.n	808b31c <mbedtls_mpi_shift_r+0x20>
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
 808b340:	6844      	ldr	r4, [r0, #4]
 808b342:	42a3      	cmp	r3, r4
 808b344:	d204      	bcs.n	808b350 <mbedtls_mpi_shift_r+0x54>
            X->p[i] = 0;
 808b346:	6884      	ldr	r4, [r0, #8]
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
 808b348:	3301      	adds	r3, #1
            X->p[i] = 0;
 808b34a:	50a5      	str	r5, [r4, r2]
 808b34c:	3204      	adds	r2, #4
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
 808b34e:	e7f7      	b.n	808b340 <mbedtls_mpi_shift_r+0x44>
    }

    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
 808b350:	b1b1      	cbz	r1, 808b380 <mbedtls_mpi_shift_r+0x84>
    {
        for( i = X->n; i > 0; i-- )
 808b352:	6844      	ldr	r4, [r0, #4]
 * Right-shift: X >>= count
 */
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;
 808b354:	2200      	movs	r2, #0
 808b356:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 808b35a:	3b01      	subs	r3, #1
 808b35c:	009b      	lsls	r3, r3, #2
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
        {
            r1 = X->p[i - 1] << (biL - v1);
 808b35e:	f1c1 0e20 	rsb	lr, r1, #32
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
 808b362:	b16c      	cbz	r4, 808b380 <mbedtls_mpi_shift_r+0x84>
        {
            r1 = X->p[i - 1] << (biL - v1);
 808b364:	6886      	ldr	r6, [r0, #8]
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
 808b366:	3c01      	subs	r4, #1
        {
            r1 = X->p[i - 1] << (biL - v1);
 808b368:	58f5      	ldr	r5, [r6, r3]
            X->p[i - 1] >>= v1;
 808b36a:	fa25 f701 	lsr.w	r7, r5, r1
 808b36e:	50f7      	str	r7, [r6, r3]
            X->p[i - 1] |= r0;
 808b370:	6886      	ldr	r6, [r0, #8]
 808b372:	58f7      	ldr	r7, [r6, r3]
 808b374:	433a      	orrs	r2, r7
 808b376:	50f2      	str	r2, [r6, r3]
 808b378:	3b04      	subs	r3, #4
            r0 = r1;
 808b37a:	fa05 f20e 	lsl.w	r2, r5, lr
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
 808b37e:	e7f0      	b.n	808b362 <mbedtls_mpi_shift_r+0x66>
            r0 = r1;
        }
    }

    return( 0 );
}
 808b380:	2000      	movs	r0, #0
 808b382:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808b384 <mbedtls_mpi_cmp_abs>:

/*
 * Compare unsigned values
 */
int mbedtls_mpi_cmp_abs( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 808b384:	b570      	push	{r4, r5, r6, lr}
    size_t i, j;

    for( i = X->n; i > 0; i-- )
 808b386:	6843      	ldr	r3, [r0, #4]
 808b388:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 808b38c:	3a01      	subs	r2, #1
 808b38e:	0092      	lsls	r2, r2, #2
 808b390:	b12b      	cbz	r3, 808b39e <mbedtls_mpi_cmp_abs+0x1a>
        if( X->p[i - 1] != 0 )
 808b392:	6884      	ldr	r4, [r0, #8]
 808b394:	58a4      	ldr	r4, [r4, r2]
 808b396:	3a04      	subs	r2, #4
 808b398:	b90c      	cbnz	r4, 808b39e <mbedtls_mpi_cmp_abs+0x1a>
 */
int mbedtls_mpi_cmp_abs( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
    size_t i, j;

    for( i = X->n; i > 0; i-- )
 808b39a:	3b01      	subs	r3, #1
 808b39c:	e7f8      	b.n	808b390 <mbedtls_mpi_cmp_abs+0xc>
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 808b39e:	684c      	ldr	r4, [r1, #4]
 808b3a0:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 808b3a4:	3a01      	subs	r2, #1
 808b3a6:	0092      	lsls	r2, r2, #2
 808b3a8:	b1c4      	cbz	r4, 808b3dc <mbedtls_mpi_cmp_abs+0x58>
        if( Y->p[j - 1] != 0 )
 808b3aa:	688d      	ldr	r5, [r1, #8]
 808b3ac:	58ae      	ldr	r6, [r5, r2]
 808b3ae:	3a04      	subs	r2, #4
 808b3b0:	b90e      	cbnz	r6, 808b3b6 <mbedtls_mpi_cmp_abs+0x32>

    for( i = X->n; i > 0; i-- )
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 808b3b2:	3c01      	subs	r4, #1
 808b3b4:	e7f8      	b.n	808b3a8 <mbedtls_mpi_cmp_abs+0x24>
            break;

    if( i == 0 && j == 0 )
        return( 0 );

    if( i > j ) return(  1 );
 808b3b6:	429c      	cmp	r4, r3
 808b3b8:	d30b      	bcc.n	808b3d2 <mbedtls_mpi_cmp_abs+0x4e>
    if( j > i ) return( -1 );
 808b3ba:	d913      	bls.n	808b3e4 <mbedtls_mpi_cmp_abs+0x60>
 808b3bc:	e00b      	b.n	808b3d6 <mbedtls_mpi_cmp_abs+0x52>
 808b3be:	f1a2 0204 	sub.w	r2, r2, #4

    for( ; i > 0; i-- )
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
 808b3c2:	d308      	bcc.n	808b3d6 <mbedtls_mpi_cmp_abs+0x52>
        return( 0 );

    if( i > j ) return(  1 );
    if( j > i ) return( -1 );

    for( ; i > 0; i-- )
 808b3c4:	3b01      	subs	r3, #1
 808b3c6:	b193      	cbz	r3, 808b3ee <mbedtls_mpi_cmp_abs+0x6a>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
 808b3c8:	6881      	ldr	r1, [r0, #8]
 808b3ca:	588c      	ldr	r4, [r1, r2]
 808b3cc:	58a9      	ldr	r1, [r5, r2]
 808b3ce:	428c      	cmp	r4, r1
 808b3d0:	d9f5      	bls.n	808b3be <mbedtls_mpi_cmp_abs+0x3a>
            break;

    if( i == 0 && j == 0 )
        return( 0 );

    if( i > j ) return(  1 );
 808b3d2:	2001      	movs	r0, #1
 808b3d4:	bd70      	pop	{r4, r5, r6, pc}
    if( j > i ) return( -1 );
 808b3d6:	f04f 30ff 	mov.w	r0, #4294967295
 808b3da:	bd70      	pop	{r4, r5, r6, pc}
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
    }

    return( 0 );
 808b3dc:	1c18      	adds	r0, r3, #0
 808b3de:	bf18      	it	ne
 808b3e0:	2001      	movne	r0, #1
 808b3e2:	bd70      	pop	{r4, r5, r6, pc}
 808b3e4:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 808b3e8:	3a01      	subs	r2, #1
 808b3ea:	0092      	lsls	r2, r2, #2
 808b3ec:	e7eb      	b.n	808b3c6 <mbedtls_mpi_cmp_abs+0x42>
 808b3ee:	4618      	mov	r0, r3
 808b3f0:	bd70      	pop	{r4, r5, r6, pc}

0808b3f2 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>:
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 808b3f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808b3f6:	4616      	mov	r6, r2
 808b3f8:	b085      	sub	sp, #20
 808b3fa:	9303      	str	r3, [sp, #12]
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 808b3fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 808b3fe:	4681      	mov	r9, r0
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 808b400:	685a      	ldr	r2, [r3, #4]
 808b402:	6873      	ldr	r3, [r6, #4]
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 808b404:	468b      	mov	fp, r1
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 808b406:	3301      	adds	r3, #1
 808b408:	429a      	cmp	r2, r3
 808b40a:	d351      	bcc.n	808b4b0 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xbe>
 808b40c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 808b40e:	6898      	ldr	r0, [r3, #8]
 808b410:	2800      	cmp	r0, #0
 808b412:	d04d      	beq.n	808b4b0 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xbe>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );
 808b414:	0092      	lsls	r2, r2, #2
 808b416:	2100      	movs	r1, #0
 808b418:	f006 ffbd 	bl	8092396 <memset>

    d = T->p;
 808b41c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    n = N->n;
 808b41e:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );

    d = T->p;
 808b422:	689b      	ldr	r3, [r3, #8]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
 808b424:	f10a 0701 	add.w	r7, sl, #1
    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );

    d = T->p;
 808b428:	9300      	str	r3, [sp, #0]
    n = N->n;
    m = ( B->n < n ) ? B->n : n;
 808b42a:	f8db 3004 	ldr.w	r3, [fp, #4]
    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );

    d = T->p;
 808b42e:	9d00      	ldr	r5, [sp, #0]
 808b430:	4553      	cmp	r3, sl
 808b432:	bf28      	it	cs
 808b434:	4653      	movcs	r3, sl
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
 808b436:	00bf      	lsls	r7, r7, #2
 808b438:	9302      	str	r3, [sp, #8]

    d = T->p;
    n = N->n;
    m = ( B->n < n ) ? B->n : n;

    for( i = 0; i < n; i++ )
 808b43a:	2400      	movs	r4, #0
 808b43c:	4554      	cmp	r4, sl
 808b43e:	f8d9 0008 	ldr.w	r0, [r9, #8]
 808b442:	d01b      	beq.n	808b47c <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0x8a>
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 808b444:	f8db 1008 	ldr.w	r1, [fp, #8]
    for( i = 0; i < n; i++ )
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
 808b448:	f850 8024 	ldr.w	r8, [r0, r4, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 808b44c:	682a      	ldr	r2, [r5, #0]
 808b44e:	680b      	ldr	r3, [r1, #0]

        mpi_mul_hlp( m, B->p, d, u0 );
 808b450:	9802      	ldr	r0, [sp, #8]
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 808b452:	fb03 2308 	mla	r3, r3, r8, r2
 808b456:	9a03      	ldr	r2, [sp, #12]

    d = T->p;
    n = N->n;
    m = ( B->n < n ) ? B->n : n;

    for( i = 0; i < n; i++ )
 808b458:	3401      	adds	r4, #1
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 808b45a:	4353      	muls	r3, r2

        mpi_mul_hlp( m, B->p, d, u0 );
 808b45c:	462a      	mov	r2, r5
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 808b45e:	9301      	str	r3, [sp, #4]

        mpi_mul_hlp( m, B->p, d, u0 );
 808b460:	4643      	mov	r3, r8
 808b462:	f7ff fbf9 	bl	808ac58 <_ZL11mpi_mul_hlpjPmS_m>
        mpi_mul_hlp( n, N->p, d, u1 );
 808b466:	9b01      	ldr	r3, [sp, #4]
 808b468:	462a      	mov	r2, r5
 808b46a:	68b1      	ldr	r1, [r6, #8]
 808b46c:	4650      	mov	r0, sl
 808b46e:	f7ff fbf3 	bl	808ac58 <_ZL11mpi_mul_hlpjPmS_m>

        *d++ = u0; d[n + 1] = 0;
 808b472:	f845 8b04 	str.w	r8, [r5], #4
 808b476:	2300      	movs	r3, #0
 808b478:	51eb      	str	r3, [r5, r7]

    d = T->p;
    n = N->n;
    m = ( B->n < n ) ? B->n : n;

    for( i = 0; i < n; i++ )
 808b47a:	e7df      	b.n	808b43c <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0x4a>
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );
 808b47c:	9b00      	ldr	r3, [sp, #0]
 808b47e:	1f39      	subs	r1, r7, #4
 808b480:	440b      	add	r3, r1
 808b482:	463a      	mov	r2, r7
 808b484:	4619      	mov	r1, r3
 808b486:	f006 ff60 	bl	809234a <memcpy>

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
 808b48a:	4631      	mov	r1, r6
 808b48c:	4648      	mov	r0, r9
 808b48e:	f7ff ff79 	bl	808b384 <mbedtls_mpi_cmp_abs>
 808b492:	2800      	cmp	r0, #0
        mpi_sub_hlp( n, N->p, A->p );
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
 808b494:	bfb8      	it	lt
 808b496:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 808b498:	4620      	mov	r0, r4
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
        mpi_sub_hlp( n, N->p, A->p );
 808b49a:	bfa7      	ittee	ge
 808b49c:	f8d9 2008 	ldrge.w	r2, [r9, #8]
 808b4a0:	68b1      	ldrge	r1, [r6, #8]
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
 808b4a2:	689a      	ldrlt	r2, [r3, #8]
 808b4a4:	f8d9 1008 	ldrlt.w	r1, [r9, #8]
 808b4a8:	f7ff fbac 	bl	808ac04 <_ZL11mpi_sub_hlpjPmS_>

    return( 0 );
 808b4ac:	2000      	movs	r0, #0
 808b4ae:	e001      	b.n	808b4b4 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xc2>
{
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 808b4b0:	f06f 0003 	mvn.w	r0, #3
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );

    return( 0 );
}
 808b4b4:	b005      	add	sp, #20
 808b4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808b4ba <mbedtls_mpi_cmp_mpi>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 808b4ba:	b570      	push	{r4, r5, r6, lr}
    size_t i, j;

    for( i = X->n; i > 0; i-- )
 808b4bc:	6843      	ldr	r3, [r0, #4]
 808b4be:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 808b4c2:	3a01      	subs	r2, #1
 808b4c4:	0092      	lsls	r2, r2, #2
 808b4c6:	b12b      	cbz	r3, 808b4d4 <mbedtls_mpi_cmp_mpi+0x1a>
        if( X->p[i - 1] != 0 )
 808b4c8:	6884      	ldr	r4, [r0, #8]
 808b4ca:	58a4      	ldr	r4, [r4, r2]
 808b4cc:	3a04      	subs	r2, #4
 808b4ce:	b90c      	cbnz	r4, 808b4d4 <mbedtls_mpi_cmp_mpi+0x1a>
 */
int mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
    size_t i, j;

    for( i = X->n; i > 0; i-- )
 808b4d0:	3b01      	subs	r3, #1
 808b4d2:	e7f8      	b.n	808b4c6 <mbedtls_mpi_cmp_mpi+0xc>
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 808b4d4:	684c      	ldr	r4, [r1, #4]
 808b4d6:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 808b4da:	3a01      	subs	r2, #1
 808b4dc:	0092      	lsls	r2, r2, #2
 808b4de:	b364      	cbz	r4, 808b53a <mbedtls_mpi_cmp_mpi+0x80>
        if( Y->p[j - 1] != 0 )
 808b4e0:	688d      	ldr	r5, [r1, #8]
 808b4e2:	58ae      	ldr	r6, [r5, r2]
 808b4e4:	3a04      	subs	r2, #4
 808b4e6:	b90e      	cbnz	r6, 808b4ec <mbedtls_mpi_cmp_mpi+0x32>

    for( i = X->n; i > 0; i-- )
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 808b4e8:	3c01      	subs	r4, #1
 808b4ea:	e7f8      	b.n	808b4de <mbedtls_mpi_cmp_mpi+0x24>
            break;

    if( i == 0 && j == 0 )
        return( 0 );

    if( i > j ) return(  X->s );
 808b4ec:	429c      	cmp	r4, r3
 808b4ee:	d201      	bcs.n	808b4f4 <mbedtls_mpi_cmp_mpi+0x3a>
 808b4f0:	6802      	ldr	r2, [r0, #0]
 808b4f2:	e025      	b.n	808b540 <mbedtls_mpi_cmp_mpi+0x86>
 808b4f4:	6809      	ldr	r1, [r1, #0]
    if( j > i ) return( -Y->s );
 808b4f6:	d901      	bls.n	808b4fc <mbedtls_mpi_cmp_mpi+0x42>
 808b4f8:	424a      	negs	r2, r1
 808b4fa:	e021      	b.n	808b540 <mbedtls_mpi_cmp_mpi+0x86>

    if( X->s > 0 && Y->s < 0 ) return(  1 );
 808b4fc:	6802      	ldr	r2, [r0, #0]
 808b4fe:	2a00      	cmp	r2, #0
 808b500:	dd01      	ble.n	808b506 <mbedtls_mpi_cmp_mpi+0x4c>
 808b502:	2900      	cmp	r1, #0
 808b504:	db14      	blt.n	808b530 <mbedtls_mpi_cmp_mpi+0x76>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 808b506:	2900      	cmp	r1, #0
 808b508:	dd01      	ble.n	808b50e <mbedtls_mpi_cmp_mpi+0x54>
 808b50a:	2a00      	cmp	r2, #0
 808b50c:	db12      	blt.n	808b534 <mbedtls_mpi_cmp_mpi+0x7a>
 808b50e:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
 808b512:	3901      	subs	r1, #1
 808b514:	0089      	lsls	r1, r1, #2

    for( ; i > 0; i-- )
 808b516:	b193      	cbz	r3, 808b53e <mbedtls_mpi_cmp_mpi+0x84>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 808b518:	6884      	ldr	r4, [r0, #8]
 808b51a:	5866      	ldr	r6, [r4, r1]
 808b51c:	586c      	ldr	r4, [r5, r1]
 808b51e:	42a6      	cmp	r6, r4
 808b520:	d80e      	bhi.n	808b540 <mbedtls_mpi_cmp_mpi+0x86>
 808b522:	f1a1 0104 	sub.w	r1, r1, #4
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 808b526:	d201      	bcs.n	808b52c <mbedtls_mpi_cmp_mpi+0x72>
 808b528:	4252      	negs	r2, r2
 808b52a:	e009      	b.n	808b540 <mbedtls_mpi_cmp_mpi+0x86>
    if( j > i ) return( -Y->s );

    if( X->s > 0 && Y->s < 0 ) return(  1 );
    if( Y->s > 0 && X->s < 0 ) return( -1 );

    for( ; i > 0; i-- )
 808b52c:	3b01      	subs	r3, #1
 808b52e:	e7f2      	b.n	808b516 <mbedtls_mpi_cmp_mpi+0x5c>
        return( 0 );

    if( i > j ) return(  X->s );
    if( j > i ) return( -Y->s );

    if( X->s > 0 && Y->s < 0 ) return(  1 );
 808b530:	2201      	movs	r2, #1
 808b532:	e005      	b.n	808b540 <mbedtls_mpi_cmp_mpi+0x86>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 808b534:	f04f 32ff 	mov.w	r2, #4294967295
 808b538:	e002      	b.n	808b540 <mbedtls_mpi_cmp_mpi+0x86>

    for( j = Y->n; j > 0; j-- )
        if( Y->p[j - 1] != 0 )
            break;

    if( i == 0 && j == 0 )
 808b53a:	2b00      	cmp	r3, #0
 808b53c:	d1d8      	bne.n	808b4f0 <mbedtls_mpi_cmp_mpi+0x36>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    }

    return( 0 );
 808b53e:	461a      	mov	r2, r3
}
 808b540:	4610      	mov	r0, r2
 808b542:	bd70      	pop	{r4, r5, r6, pc}

0808b544 <mbedtls_mpi_cmp_int>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_int( const mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 808b544:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];

    *p  = ( z < 0 ) ? -z : z;
 808b546:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
 808b54a:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
 808b54e:	2900      	cmp	r1, #0
int mbedtls_mpi_cmp_int( const mbedtls_mpi *X, mbedtls_mpi_sint z )
{
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];

    *p  = ( z < 0 ) ? -z : z;
 808b550:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
 808b552:	bfb4      	ite	lt
 808b554:	f04f 33ff 	movlt.w	r3, #4294967295
 808b558:	2301      	movge	r3, #1
 808b55a:	9301      	str	r3, [sp, #4]
    Y.n = 1;
    Y.p = p;

    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 808b55c:	a901      	add	r1, sp, #4
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];

    *p  = ( z < 0 ) ? -z : z;
    Y.s = ( z < 0 ) ? -1 : 1;
    Y.n = 1;
 808b55e:	2301      	movs	r3, #1
 808b560:	9302      	str	r3, [sp, #8]
    Y.p = p;
 808b562:	f8cd d00c 	str.w	sp, [sp, #12]

    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 808b566:	f7ff ffa8 	bl	808b4ba <mbedtls_mpi_cmp_mpi>
}
 808b56a:	b005      	add	sp, #20
 808b56c:	f85d fb04 	ldr.w	pc, [sp], #4

0808b570 <mbedtls_mpi_add_abs>:
{
    int ret;
    size_t i, j;
    mbedtls_mpi_uint *o, *p, c, tmp;

    if( X == B )
 808b570:	4290      	cmp	r0, r2

/*
 * Unsigned addition: X = |A| + |B|  (HAC 14.7)
 */
int mbedtls_mpi_add_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808b576:	4606      	mov	r6, r0
 808b578:	4615      	mov	r5, r2
    int ret;
    size_t i, j;
    mbedtls_mpi_uint *o, *p, c, tmp;

    if( X == B )
 808b57a:	d006      	beq.n	808b58a <mbedtls_mpi_add_abs+0x1a>
    {
        const mbedtls_mpi *T = A; A = X; B = T;
    }

    if( X != A )
 808b57c:	4288      	cmp	r0, r1
 808b57e:	d005      	beq.n	808b58c <mbedtls_mpi_add_abs+0x1c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 808b580:	f7ff fd7f 	bl	808b082 <mbedtls_mpi_copy>
 808b584:	4607      	mov	r7, r0
 808b586:	b108      	cbz	r0, 808b58c <mbedtls_mpi_add_abs+0x1c>
 808b588:	e049      	b.n	808b61e <mbedtls_mpi_add_abs+0xae>
 808b58a:	460d      	mov	r5, r1

    /*
     * X should always be positive as a result of unsigned additions.
     */
    X->s = 1;
 808b58c:	2301      	movs	r3, #1
 808b58e:	6033      	str	r3, [r6, #0]

    for( j = B->n; j > 0; j-- )
 808b590:	686c      	ldr	r4, [r5, #4]
 808b592:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 808b596:	3b01      	subs	r3, #1
 808b598:	009b      	lsls	r3, r3, #2
 808b59a:	b12c      	cbz	r4, 808b5a8 <mbedtls_mpi_add_abs+0x38>
        if( B->p[j - 1] != 0 )
 808b59c:	68aa      	ldr	r2, [r5, #8]
 808b59e:	58d2      	ldr	r2, [r2, r3]
 808b5a0:	3b04      	subs	r3, #4
 808b5a2:	b90a      	cbnz	r2, 808b5a8 <mbedtls_mpi_add_abs+0x38>
    /*
     * X should always be positive as a result of unsigned additions.
     */
    X->s = 1;

    for( j = B->n; j > 0; j-- )
 808b5a4:	3c01      	subs	r4, #1
 808b5a6:	e7f8      	b.n	808b59a <mbedtls_mpi_add_abs+0x2a>
        if( B->p[j - 1] != 0 )
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 808b5a8:	4621      	mov	r1, r4
 808b5aa:	4630      	mov	r0, r6
 808b5ac:	f7ff fd3d 	bl	808b02a <mbedtls_mpi_grow>
 808b5b0:	4607      	mov	r7, r0
 808b5b2:	2800      	cmp	r0, #0
 808b5b4:	d133      	bne.n	808b61e <mbedtls_mpi_add_abs+0xae>

    o = B->p; p = X->p; c = 0;
 808b5b6:	68b3      	ldr	r3, [r6, #8]
 808b5b8:	f8d5 c008 	ldr.w	ip, [r5, #8]
 808b5bc:	4618      	mov	r0, r3
 808b5be:	463d      	mov	r5, r7

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
 808b5c0:	4639      	mov	r1, r7
 808b5c2:	42a1      	cmp	r1, r4
 808b5c4:	d00f      	beq.n	808b5e6 <mbedtls_mpi_add_abs+0x76>
    {
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
 808b5c6:	6802      	ldr	r2, [r0, #0]
    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
    {
        tmp= *o;
 808b5c8:	f85c e021 	ldr.w	lr, [ip, r1, lsl #2]
        *p +=  c; c  = ( *p <  c );
 808b5cc:	18ad      	adds	r5, r5, r2
        *p += tmp; c += ( *p < tmp );
 808b5ce:	4475      	add	r5, lr
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
    {
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
 808b5d0:	bf2c      	ite	cs
 808b5d2:	2201      	movcs	r2, #1
 808b5d4:	2200      	movcc	r2, #0
        *p += tmp; c += ( *p < tmp );
 808b5d6:	f840 5b04 	str.w	r5, [r0], #4
    o = B->p; p = X->p; c = 0;

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
 808b5da:	3101      	adds	r1, #1
    {
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
 808b5dc:	45ae      	cmp	lr, r5
 808b5de:	bf94      	ite	ls
 808b5e0:	4615      	movls	r5, r2
 808b5e2:	1c55      	addhi	r5, r2, #1
    o = B->p; p = X->p; c = 0;

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
 808b5e4:	e7ed      	b.n	808b5c2 <mbedtls_mpi_add_abs+0x52>
 808b5e6:	ea4f 0884 	mov.w	r8, r4, lsl #2
 808b5ea:	4443      	add	r3, r8
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
    }

    while( c != 0 )
 808b5ec:	b1bd      	cbz	r5, 808b61e <mbedtls_mpi_add_abs+0xae>
    {
        if( i >= X->n )
 808b5ee:	6872      	ldr	r2, [r6, #4]
 808b5f0:	4294      	cmp	r4, r2
 808b5f2:	f104 0401 	add.w	r4, r4, #1
 808b5f6:	d306      	bcc.n	808b606 <mbedtls_mpi_add_abs+0x96>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 808b5f8:	4621      	mov	r1, r4
 808b5fa:	4630      	mov	r0, r6
 808b5fc:	f7ff fd15 	bl	808b02a <mbedtls_mpi_grow>
 808b600:	b960      	cbnz	r0, 808b61c <mbedtls_mpi_add_abs+0xac>
            p = X->p + i;
 808b602:	68b3      	ldr	r3, [r6, #8]
 808b604:	4443      	add	r3, r8
        }

        *p += c; c = ( *p < c ); i++; p++;
 808b606:	681a      	ldr	r2, [r3, #0]
 808b608:	f108 0804 	add.w	r8, r8, #4
 808b60c:	442a      	add	r2, r5
 808b60e:	4295      	cmp	r5, r2
 808b610:	f843 2b04 	str.w	r2, [r3], #4
 808b614:	bf94      	ite	ls
 808b616:	2500      	movls	r5, #0
 808b618:	2501      	movhi	r5, #1
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
    }

    while( c != 0 )
 808b61a:	e7e7      	b.n	808b5ec <mbedtls_mpi_add_abs+0x7c>
    {
        if( i >= X->n )
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 808b61c:	4607      	mov	r7, r0
    }

cleanup:

    return( ret );
}
 808b61e:	4638      	mov	r0, r7
 808b620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808b624 <mbedtls_mpi_sub_abs>:

/*
 * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)
 */
int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b624:	b5f0      	push	{r4, r5, r6, r7, lr}
 808b626:	460f      	mov	r7, r1
 808b628:	b085      	sub	sp, #20
 808b62a:	4606      	mov	r6, r0
    mbedtls_mpi TB;
    int ret;
    size_t n;

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 808b62c:	4611      	mov	r1, r2
 808b62e:	4638      	mov	r0, r7

/*
 * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)
 */
int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b630:	4615      	mov	r5, r2
    mbedtls_mpi TB;
    int ret;
    size_t n;

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 808b632:	f7ff fea7 	bl	808b384 <mbedtls_mpi_cmp_abs>
 808b636:	2800      	cmp	r0, #0
 808b638:	db30      	blt.n	808b69c <mbedtls_mpi_sub_abs+0x78>
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808b63a:	2301      	movs	r3, #1
 808b63c:	9301      	str	r3, [sp, #4]
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    mbedtls_mpi_init( &TB );

    if( X == B )
 808b63e:	42b5      	cmp	r5, r6
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808b640:	f04f 0300 	mov.w	r3, #0
 808b644:	9302      	str	r3, [sp, #8]
    X->p = NULL;
 808b646:	9303      	str	r3, [sp, #12]
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    mbedtls_mpi_init( &TB );

    if( X == B )
 808b648:	d106      	bne.n	808b658 <mbedtls_mpi_sub_abs+0x34>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 808b64a:	4629      	mov	r1, r5
 808b64c:	a801      	add	r0, sp, #4
 808b64e:	f7ff fd18 	bl	808b082 <mbedtls_mpi_copy>
 808b652:	4604      	mov	r4, r0
 808b654:	b9e8      	cbnz	r0, 808b692 <mbedtls_mpi_sub_abs+0x6e>
        B = &TB;
 808b656:	ad01      	add	r5, sp, #4
    }

    if( X != A )
 808b658:	42b7      	cmp	r7, r6
 808b65a:	d107      	bne.n	808b66c <mbedtls_mpi_sub_abs+0x48>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );

    /*
     * X should always be positive as a result of unsigned subtractions.
     */
    X->s = 1;
 808b65c:	2301      	movs	r3, #1
 808b65e:	6033      	str	r3, [r6, #0]

    ret = 0;

    for( n = B->n; n > 0; n-- )
 808b660:	6868      	ldr	r0, [r5, #4]
 808b662:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 808b666:	3b01      	subs	r3, #1
 808b668:	009b      	lsls	r3, r3, #2
 808b66a:	e00b      	b.n	808b684 <mbedtls_mpi_sub_abs+0x60>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
        B = &TB;
    }

    if( X != A )
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 808b66c:	4639      	mov	r1, r7
 808b66e:	4630      	mov	r0, r6
 808b670:	f7ff fd07 	bl	808b082 <mbedtls_mpi_copy>
 808b674:	4604      	mov	r4, r0
 808b676:	b960      	cbnz	r0, 808b692 <mbedtls_mpi_sub_abs+0x6e>
 808b678:	e7f0      	b.n	808b65c <mbedtls_mpi_sub_abs+0x38>
    X->s = 1;

    ret = 0;

    for( n = B->n; n > 0; n-- )
        if( B->p[n - 1] != 0 )
 808b67a:	68aa      	ldr	r2, [r5, #8]
 808b67c:	58d2      	ldr	r2, [r2, r3]
 808b67e:	3b04      	subs	r3, #4
 808b680:	b912      	cbnz	r2, 808b688 <mbedtls_mpi_sub_abs+0x64>
     */
    X->s = 1;

    ret = 0;

    for( n = B->n; n > 0; n-- )
 808b682:	3801      	subs	r0, #1
 808b684:	2800      	cmp	r0, #0
 808b686:	d1f8      	bne.n	808b67a <mbedtls_mpi_sub_abs+0x56>
        if( B->p[n - 1] != 0 )
            break;

    mpi_sub_hlp( n, B->p, X->p );
 808b688:	68b2      	ldr	r2, [r6, #8]
 808b68a:	68a9      	ldr	r1, [r5, #8]
 808b68c:	f7ff faba 	bl	808ac04 <_ZL11mpi_sub_hlpjPmS_>
    /*
     * X should always be positive as a result of unsigned subtractions.
     */
    X->s = 1;

    ret = 0;
 808b690:	2400      	movs	r4, #0

    mpi_sub_hlp( n, B->p, X->p );

cleanup:

    mbedtls_mpi_free( &TB );
 808b692:	a801      	add	r0, sp, #4
 808b694:	f7ff fcb3 	bl	808affe <mbedtls_mpi_free>

    return( ret );
 808b698:	4620      	mov	r0, r4
 808b69a:	e001      	b.n	808b6a0 <mbedtls_mpi_sub_abs+0x7c>
    mbedtls_mpi TB;
    int ret;
    size_t n;

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 808b69c:	f06f 0009 	mvn.w	r0, #9
cleanup:

    mbedtls_mpi_free( &TB );

    return( ret );
}
 808b6a0:	b005      	add	sp, #20
 808b6a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808b6a4 <mbedtls_mpi_add_mpi>:

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s = A->s;
 808b6a6:	680c      	ldr	r4, [r1, #0]

    if( A->s * B->s < 0 )
 808b6a8:	6813      	ldr	r3, [r2, #0]

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b6aa:	4605      	mov	r5, r0
    int ret, s = A->s;

    if( A->s * B->s < 0 )
 808b6ac:	4363      	muls	r3, r4

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b6ae:	460f      	mov	r7, r1
 808b6b0:	4616      	mov	r6, r2
    int ret, s = A->s;

    if( A->s * B->s < 0 )
 808b6b2:	d513      	bpl.n	808b6dc <mbedtls_mpi_add_mpi+0x38>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 808b6b4:	4611      	mov	r1, r2
 808b6b6:	4638      	mov	r0, r7
 808b6b8:	f7ff fe64 	bl	808b384 <mbedtls_mpi_cmp_abs>
 808b6bc:	2800      	cmp	r0, #0
 808b6be:	db05      	blt.n	808b6cc <mbedtls_mpi_add_mpi+0x28>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 808b6c0:	4632      	mov	r2, r6
 808b6c2:	4639      	mov	r1, r7
 808b6c4:	4628      	mov	r0, r5
 808b6c6:	f7ff ffad 	bl	808b624 <mbedtls_mpi_sub_abs>
 808b6ca:	e009      	b.n	808b6e0 <mbedtls_mpi_add_mpi+0x3c>
            X->s =  s;
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 808b6cc:	463a      	mov	r2, r7
 808b6ce:	4631      	mov	r1, r6
 808b6d0:	4628      	mov	r0, r5
 808b6d2:	f7ff ffa7 	bl	808b624 <mbedtls_mpi_sub_abs>
 808b6d6:	b928      	cbnz	r0, 808b6e4 <mbedtls_mpi_add_mpi+0x40>
            X->s = -s;
 808b6d8:	4264      	negs	r4, r4
 808b6da:	e002      	b.n	808b6e2 <mbedtls_mpi_add_mpi+0x3e>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 808b6dc:	f7ff ff48 	bl	808b570 <mbedtls_mpi_add_abs>
 808b6e0:	b900      	cbnz	r0, 808b6e4 <mbedtls_mpi_add_mpi+0x40>
        X->s = s;
 808b6e2:	602c      	str	r4, [r5, #0]
    }

cleanup:

    return( ret );
}
 808b6e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808b6e6 <mbedtls_mpi_sub_mpi>:

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b6e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s = A->s;
 808b6e8:	680c      	ldr	r4, [r1, #0]

    if( A->s * B->s > 0 )
 808b6ea:	6813      	ldr	r3, [r2, #0]

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b6ec:	4605      	mov	r5, r0
    int ret, s = A->s;

    if( A->s * B->s > 0 )
 808b6ee:	4363      	muls	r3, r4
 808b6f0:	2b00      	cmp	r3, #0

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b6f2:	460f      	mov	r7, r1
 808b6f4:	4616      	mov	r6, r2
    int ret, s = A->s;

    if( A->s * B->s > 0 )
 808b6f6:	dd13      	ble.n	808b720 <mbedtls_mpi_sub_mpi+0x3a>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 808b6f8:	4611      	mov	r1, r2
 808b6fa:	4638      	mov	r0, r7
 808b6fc:	f7ff fe42 	bl	808b384 <mbedtls_mpi_cmp_abs>
 808b700:	2800      	cmp	r0, #0
 808b702:	db05      	blt.n	808b710 <mbedtls_mpi_sub_mpi+0x2a>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 808b704:	4632      	mov	r2, r6
 808b706:	4639      	mov	r1, r7
 808b708:	4628      	mov	r0, r5
 808b70a:	f7ff ff8b 	bl	808b624 <mbedtls_mpi_sub_abs>
 808b70e:	e009      	b.n	808b724 <mbedtls_mpi_sub_mpi+0x3e>
            X->s =  s;
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 808b710:	463a      	mov	r2, r7
 808b712:	4631      	mov	r1, r6
 808b714:	4628      	mov	r0, r5
 808b716:	f7ff ff85 	bl	808b624 <mbedtls_mpi_sub_abs>
 808b71a:	b928      	cbnz	r0, 808b728 <mbedtls_mpi_sub_mpi+0x42>
            X->s = -s;
 808b71c:	4264      	negs	r4, r4
 808b71e:	e002      	b.n	808b726 <mbedtls_mpi_sub_mpi+0x40>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 808b720:	f7ff ff26 	bl	808b570 <mbedtls_mpi_add_abs>
 808b724:	b900      	cbnz	r0, 808b728 <mbedtls_mpi_sub_mpi+0x42>
        X->s = s;
 808b726:	602c      	str	r4, [r5, #0]
    }

cleanup:

    return( ret );
}
 808b728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808b72a <mbedtls_mpi_add_int>:

/*
 * Signed addition: X = A + b
 */
int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 808b72a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
 808b72c:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 808b730:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
 808b734:	2a00      	cmp	r2, #0
int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
 808b736:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
 808b738:	bfb4      	ite	lt
 808b73a:	f04f 33ff 	movlt.w	r3, #4294967295
 808b73e:	2301      	movge	r3, #1
 808b740:	9301      	str	r3, [sp, #4]
    _B.n = 1;
    _B.p = p;

    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 808b742:	aa01      	add	r2, sp, #4
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
    _B.s = ( b < 0 ) ? -1 : 1;
    _B.n = 1;
 808b744:	2301      	movs	r3, #1
 808b746:	9302      	str	r3, [sp, #8]
    _B.p = p;
 808b748:	f8cd d00c 	str.w	sp, [sp, #12]

    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 808b74c:	f7ff ffaa 	bl	808b6a4 <mbedtls_mpi_add_mpi>
}
 808b750:	b005      	add	sp, #20
 808b752:	f85d fb04 	ldr.w	pc, [sp], #4

0808b756 <mbedtls_mpi_sub_int>:

/*
 * Signed subtraction: X = A - b
 */
int mbedtls_mpi_sub_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 808b756:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
 808b758:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 808b75c:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
 808b760:	2a00      	cmp	r2, #0
int mbedtls_mpi_sub_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
 808b762:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
 808b764:	bfb4      	ite	lt
 808b766:	f04f 33ff 	movlt.w	r3, #4294967295
 808b76a:	2301      	movge	r3, #1
 808b76c:	9301      	str	r3, [sp, #4]
    _B.n = 1;
    _B.p = p;

    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 808b76e:	aa01      	add	r2, sp, #4
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
    _B.s = ( b < 0 ) ? -1 : 1;
    _B.n = 1;
 808b770:	2301      	movs	r3, #1
 808b772:	9302      	str	r3, [sp, #8]
    _B.p = p;
 808b774:	f8cd d00c 	str.w	sp, [sp, #12]

    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 808b778:	f7ff ffb5 	bl	808b6e6 <mbedtls_mpi_sub_mpi>
}
 808b77c:	b005      	add	sp, #20
 808b77e:	f85d fb04 	ldr.w	pc, [sp], #4

0808b782 <mbedtls_mpi_mul_mpi>:

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b782:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808b786:	2300      	movs	r3, #0

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b788:	b086      	sub	sp, #24
 808b78a:	4615      	mov	r5, r2
    size_t i, j;
    mbedtls_mpi TA, TB;

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 808b78c:	4288      	cmp	r0, r1
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808b78e:	f04f 0201 	mov.w	r2, #1

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b792:	4681      	mov	r9, r0
 808b794:	460e      	mov	r6, r1
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808b796:	e88d 000c 	stmia.w	sp, {r2, r3}
    X->p = NULL;
 808b79a:	9302      	str	r3, [sp, #8]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808b79c:	9203      	str	r2, [sp, #12]
    X->n = 0;
 808b79e:	9304      	str	r3, [sp, #16]
    X->p = NULL;
 808b7a0:	9305      	str	r3, [sp, #20]
    size_t i, j;
    mbedtls_mpi TA, TB;

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 808b7a2:	d106      	bne.n	808b7b2 <mbedtls_mpi_mul_mpi+0x30>
 808b7a4:	4668      	mov	r0, sp
 808b7a6:	f7ff fc6c 	bl	808b082 <mbedtls_mpi_copy>
 808b7aa:	4604      	mov	r4, r0
 808b7ac:	2800      	cmp	r0, #0
 808b7ae:	d14d      	bne.n	808b84c <mbedtls_mpi_mul_mpi+0xca>
 808b7b0:	466e      	mov	r6, sp
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 808b7b2:	45a9      	cmp	r9, r5
 808b7b4:	d107      	bne.n	808b7c6 <mbedtls_mpi_mul_mpi+0x44>
 808b7b6:	4649      	mov	r1, r9
 808b7b8:	a803      	add	r0, sp, #12
 808b7ba:	f7ff fc62 	bl	808b082 <mbedtls_mpi_copy>
 808b7be:	4604      	mov	r4, r0
 808b7c0:	2800      	cmp	r0, #0
 808b7c2:	d143      	bne.n	808b84c <mbedtls_mpi_mul_mpi+0xca>
 808b7c4:	ad03      	add	r5, sp, #12

    for( i = A->n; i > 0; i-- )
 808b7c6:	f8d6 a004 	ldr.w	sl, [r6, #4]
 808b7ca:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
 808b7ce:	3b01      	subs	r3, #1
 808b7d0:	009b      	lsls	r3, r3, #2
 808b7d2:	f1ba 0f00 	cmp.w	sl, #0
 808b7d6:	d006      	beq.n	808b7e6 <mbedtls_mpi_mul_mpi+0x64>
        if( A->p[i - 1] != 0 )
 808b7d8:	68b2      	ldr	r2, [r6, #8]
 808b7da:	58d2      	ldr	r2, [r2, r3]
 808b7dc:	3b04      	subs	r3, #4
 808b7de:	b912      	cbnz	r2, 808b7e6 <mbedtls_mpi_mul_mpi+0x64>
    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }

    for( i = A->n; i > 0; i-- )
 808b7e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 808b7e4:	e7f5      	b.n	808b7d2 <mbedtls_mpi_mul_mpi+0x50>
        if( A->p[i - 1] != 0 )
            break;

    for( j = B->n; j > 0; j-- )
 808b7e6:	686f      	ldr	r7, [r5, #4]
 808b7e8:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
 808b7ec:	3b01      	subs	r3, #1
 808b7ee:	009b      	lsls	r3, r3, #2
 808b7f0:	b12f      	cbz	r7, 808b7fe <mbedtls_mpi_mul_mpi+0x7c>
        if( B->p[j - 1] != 0 )
 808b7f2:	68aa      	ldr	r2, [r5, #8]
 808b7f4:	58d2      	ldr	r2, [r2, r3]
 808b7f6:	3b04      	subs	r3, #4
 808b7f8:	b90a      	cbnz	r2, 808b7fe <mbedtls_mpi_mul_mpi+0x7c>

    for( i = A->n; i > 0; i-- )
        if( A->p[i - 1] != 0 )
            break;

    for( j = B->n; j > 0; j-- )
 808b7fa:	3f01      	subs	r7, #1
 808b7fc:	e7f8      	b.n	808b7f0 <mbedtls_mpi_mul_mpi+0x6e>
        if( B->p[j - 1] != 0 )
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
 808b7fe:	eb0a 0107 	add.w	r1, sl, r7
 808b802:	4648      	mov	r0, r9
 808b804:	f7ff fc11 	bl	808b02a <mbedtls_mpi_grow>
 808b808:	4604      	mov	r4, r0
 808b80a:	b9f8      	cbnz	r0, 808b84c <mbedtls_mpi_mul_mpi+0xca>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 808b80c:	4601      	mov	r1, r0
 808b80e:	4648      	mov	r0, r9
 808b810:	f7ff fc61 	bl	808b0d6 <mbedtls_mpi_lset>
 808b814:	4604      	mov	r4, r0
 808b816:	b9c8      	cbnz	r0, 808b84c <mbedtls_mpi_mul_mpi+0xca>
 808b818:	f107 4880 	add.w	r8, r7, #1073741824	; 0x40000000
 808b81c:	f108 38ff 	add.w	r8, r8, #4294967295
 808b820:	ea4f 0888 	mov.w	r8, r8, lsl #2

    for( i++; j > 0; j-- )
 808b824:	b16f      	cbz	r7, 808b842 <mbedtls_mpi_mul_mpi+0xc0>
        mpi_mul_hlp( i - 1, A->p, X->p + j - 1, B->p[j - 1] );
 808b826:	68ab      	ldr	r3, [r5, #8]
 808b828:	f8d9 2008 	ldr.w	r2, [r9, #8]
 808b82c:	f853 3008 	ldr.w	r3, [r3, r8]
 808b830:	4442      	add	r2, r8
 808b832:	68b1      	ldr	r1, [r6, #8]
 808b834:	4650      	mov	r0, sl
 808b836:	f7ff fa0f 	bl	808ac58 <_ZL11mpi_mul_hlpjPmS_m>
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    for( i++; j > 0; j-- )
 808b83a:	3f01      	subs	r7, #1
 808b83c:	f1a8 0804 	sub.w	r8, r8, #4
 808b840:	e7f0      	b.n	808b824 <mbedtls_mpi_mul_mpi+0xa2>
        mpi_mul_hlp( i - 1, A->p, X->p + j - 1, B->p[j - 1] );

    X->s = A->s * B->s;
 808b842:	6832      	ldr	r2, [r6, #0]
 808b844:	682b      	ldr	r3, [r5, #0]
 808b846:	4353      	muls	r3, r2
 808b848:	f8c9 3000 	str.w	r3, [r9]

cleanup:

    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
 808b84c:	a803      	add	r0, sp, #12
 808b84e:	f7ff fbd6 	bl	808affe <mbedtls_mpi_free>
 808b852:	4668      	mov	r0, sp
 808b854:	f7ff fbd3 	bl	808affe <mbedtls_mpi_free>

    return( ret );
}
 808b858:	4620      	mov	r0, r4
 808b85a:	b006      	add	sp, #24
 808b85c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808b860 <mbedtls_mpi_mul_int>:

/*
 * Baseline multiplication: X = A * b
 */
int mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b )
{
 808b860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    _B.s = 1;
 808b862:	2301      	movs	r3, #1
    _B.n = 1;
    _B.p = p;
    p[0] = b;
 808b864:	9200      	str	r2, [sp, #0]

    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 808b866:	aa01      	add	r2, sp, #4
int mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b )
{
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    _B.s = 1;
 808b868:	9301      	str	r3, [sp, #4]
    _B.n = 1;
 808b86a:	9302      	str	r3, [sp, #8]
    _B.p = p;
 808b86c:	f8cd d00c 	str.w	sp, [sp, #12]
    p[0] = b;

    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 808b870:	f7ff ff87 	bl	808b782 <mbedtls_mpi_mul_mpi>
}
 808b874:	b005      	add	sp, #20
 808b876:	f85d fb04 	ldr.w	pc, [sp], #4

0808b87a <mbedtls_mpi_div_mpi>:

/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b87a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808b87e:	b09b      	sub	sp, #108	; 0x6c
 808b880:	9001      	str	r0, [sp, #4]
 808b882:	460f      	mov	r7, r1
    int ret;
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 808b884:	4618      	mov	r0, r3
 808b886:	2100      	movs	r1, #0

/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b888:	4690      	mov	r8, r2
 808b88a:	9304      	str	r3, [sp, #16]
    int ret;
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 808b88c:	f7ff fe5a 	bl	808b544 <mbedtls_mpi_cmp_int>
 808b890:	2800      	cmp	r0, #0
 808b892:	f000 81ad 	beq.w	808bbf0 <mbedtls_mpi_div_mpi+0x376>
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808b896:	2400      	movs	r4, #0
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808b898:	2501      	movs	r5, #1
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 808b89a:	9904      	ldr	r1, [sp, #16]
 808b89c:	4640      	mov	r0, r8
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808b89e:	950b      	str	r5, [sp, #44]	; 0x2c
    X->n = 0;
 808b8a0:	940c      	str	r4, [sp, #48]	; 0x30
    X->p = NULL;
 808b8a2:	940d      	str	r4, [sp, #52]	; 0x34
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808b8a4:	950e      	str	r5, [sp, #56]	; 0x38
    X->n = 0;
 808b8a6:	940f      	str	r4, [sp, #60]	; 0x3c
    X->p = NULL;
 808b8a8:	9410      	str	r4, [sp, #64]	; 0x40
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808b8aa:	9511      	str	r5, [sp, #68]	; 0x44
    X->n = 0;
 808b8ac:	9412      	str	r4, [sp, #72]	; 0x48
    X->p = NULL;
 808b8ae:	9413      	str	r4, [sp, #76]	; 0x4c
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808b8b0:	9514      	str	r5, [sp, #80]	; 0x50
    X->n = 0;
 808b8b2:	9415      	str	r4, [sp, #84]	; 0x54
    X->p = NULL;
 808b8b4:	9416      	str	r4, [sp, #88]	; 0x58
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808b8b6:	9517      	str	r5, [sp, #92]	; 0x5c
    X->n = 0;
 808b8b8:	9418      	str	r4, [sp, #96]	; 0x60
    X->p = NULL;
 808b8ba:	9419      	str	r4, [sp, #100]	; 0x64
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 808b8bc:	f7ff fd62 	bl	808b384 <mbedtls_mpi_cmp_abs>
 808b8c0:	42a0      	cmp	r0, r4
 808b8c2:	da16      	bge.n	808b8f2 <mbedtls_mpi_div_mpi+0x78>
    {
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 808b8c4:	9b01      	ldr	r3, [sp, #4]
 808b8c6:	b90b      	cbnz	r3, 808b8cc <mbedtls_mpi_div_mpi+0x52>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 808b8c8:	b94f      	cbnz	r7, 808b8de <mbedtls_mpi_div_mpi+0x64>
 808b8ca:	e010      	b.n	808b8ee <mbedtls_mpi_div_mpi+0x74>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    {
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 808b8cc:	4621      	mov	r1, r4
 808b8ce:	9801      	ldr	r0, [sp, #4]
 808b8d0:	f7ff fc01 	bl	808b0d6 <mbedtls_mpi_lset>
 808b8d4:	4604      	mov	r4, r0
 808b8d6:	2800      	cmp	r0, #0
 808b8d8:	f040 8179 	bne.w	808bbce <mbedtls_mpi_div_mpi+0x354>
 808b8dc:	e7f4      	b.n	808b8c8 <mbedtls_mpi_div_mpi+0x4e>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 808b8de:	4641      	mov	r1, r8
 808b8e0:	4638      	mov	r0, r7
 808b8e2:	f7ff fbce 	bl	808b082 <mbedtls_mpi_copy>
 808b8e6:	4604      	mov	r4, r0
 808b8e8:	2800      	cmp	r0, #0
 808b8ea:	f040 8170 	bne.w	808bbce <mbedtls_mpi_div_mpi+0x354>
        return( 0 );
 808b8ee:	2000      	movs	r0, #0
 808b8f0:	e180      	b.n	808bbf4 <mbedtls_mpi_div_mpi+0x37a>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
 808b8f2:	4641      	mov	r1, r8
 808b8f4:	a80b      	add	r0, sp, #44	; 0x2c
 808b8f6:	f7ff fbc4 	bl	808b082 <mbedtls_mpi_copy>
 808b8fa:	4604      	mov	r4, r0
 808b8fc:	2800      	cmp	r0, #0
 808b8fe:	f040 8166 	bne.w	808bbce <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
 808b902:	ae0e      	add	r6, sp, #56	; 0x38
 808b904:	9904      	ldr	r1, [sp, #16]
 808b906:	4630      	mov	r0, r6
 808b908:	f7ff fbbb 	bl	808b082 <mbedtls_mpi_copy>
 808b90c:	4604      	mov	r4, r0
 808b90e:	2800      	cmp	r0, #0
 808b910:	f040 815d 	bne.w	808bbce <mbedtls_mpi_div_mpi+0x354>
    X.s = Y.s = 1;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 808b914:	f8d8 1004 	ldr.w	r1, [r8, #4]
 808b918:	a811      	add	r0, sp, #68	; 0x44
 808b91a:	3102      	adds	r1, #2
        return( 0 );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    X.s = Y.s = 1;
 808b91c:	950e      	str	r5, [sp, #56]	; 0x38
 808b91e:	950b      	str	r5, [sp, #44]	; 0x2c

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 808b920:	f7ff fb83 	bl	808b02a <mbedtls_mpi_grow>
 808b924:	4604      	mov	r4, r0
 808b926:	2800      	cmp	r0, #0
 808b928:	f040 8151 	bne.w	808bbce <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
 808b92c:	4601      	mov	r1, r0
 808b92e:	a811      	add	r0, sp, #68	; 0x44
 808b930:	f7ff fbd1 	bl	808b0d6 <mbedtls_mpi_lset>
 808b934:	4604      	mov	r4, r0
 808b936:	2800      	cmp	r0, #0
 808b938:	f040 8149 	bne.w	808bbce <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
 808b93c:	2102      	movs	r1, #2
 808b93e:	a814      	add	r0, sp, #80	; 0x50
 808b940:	f7ff fb73 	bl	808b02a <mbedtls_mpi_grow>
 808b944:	4604      	mov	r4, r0
 808b946:	2800      	cmp	r0, #0
 808b948:	f040 8141 	bne.w	808bbce <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
 808b94c:	2103      	movs	r1, #3
 808b94e:	a817      	add	r0, sp, #92	; 0x5c
 808b950:	f7ff fb6b 	bl	808b02a <mbedtls_mpi_grow>
 808b954:	4604      	mov	r4, r0
 808b956:	2800      	cmp	r0, #0
 808b958:	f040 8139 	bne.w	808bbce <mbedtls_mpi_div_mpi+0x354>

    k = mbedtls_mpi_bitlen( &Y ) % biL;
 808b95c:	4630      	mov	r0, r6
 808b95e:	f7ff fc00 	bl	808b162 <mbedtls_mpi_bitlen>
 808b962:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
 808b966:	281f      	cmp	r0, #31
 808b968:	d013      	beq.n	808b992 <mbedtls_mpi_div_mpi+0x118>
    {
        k = biL - 1 - k;
 808b96a:	f1c0 031f 	rsb	r3, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 808b96e:	4619      	mov	r1, r3
 808b970:	a80b      	add	r0, sp, #44	; 0x2c
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );

    k = mbedtls_mpi_bitlen( &Y ) % biL;
    if( k < biL - 1 )
    {
        k = biL - 1 - k;
 808b972:	9303      	str	r3, [sp, #12]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 808b974:	f7ff fc73 	bl	808b25e <mbedtls_mpi_shift_l>
 808b978:	4604      	mov	r4, r0
 808b97a:	2800      	cmp	r0, #0
 808b97c:	f040 8127 	bne.w	808bbce <mbedtls_mpi_div_mpi+0x354>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
 808b980:	9903      	ldr	r1, [sp, #12]
 808b982:	4630      	mov	r0, r6
 808b984:	f7ff fc6b 	bl	808b25e <mbedtls_mpi_shift_l>
 808b988:	4604      	mov	r4, r0
 808b98a:	2800      	cmp	r0, #0
 808b98c:	f040 811f 	bne.w	808bbce <mbedtls_mpi_div_mpi+0x354>
 808b990:	e000      	b.n	808b994 <mbedtls_mpi_div_mpi+0x11a>
    }
    else k = 0;
 808b992:	9403      	str	r4, [sp, #12]

    n = X.n - 1;
 808b994:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    t = Y.n - 1;
 808b996:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    }
    else k = 0;

    n = X.n - 1;
 808b99a:	f105 39ff 	add.w	r9, r5, #4294967295
    t = Y.n - 1;
 808b99e:	f10a 33ff 	add.w	r3, sl, #4294967295
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 808b9a2:	ebc3 0b09 	rsb	fp, r3, r9
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    }
    else k = 0;

    n = X.n - 1;
    t = Y.n - 1;
 808b9a6:	9300      	str	r3, [sp, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 808b9a8:	ea4f 134b 	mov.w	r3, fp, lsl #5
 808b9ac:	4619      	mov	r1, r3
 808b9ae:	4630      	mov	r0, r6
 808b9b0:	9302      	str	r3, [sp, #8]
 808b9b2:	f7ff fc54 	bl	808b25e <mbedtls_mpi_shift_l>
 808b9b6:	4604      	mov	r4, r0
 808b9b8:	2800      	cmp	r0, #0
 808b9ba:	f040 8108 	bne.w	808bbce <mbedtls_mpi_div_mpi+0x354>

    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
    {
        Z.p[n - t]++;
 808b9be:	ea4f 0b8b 	mov.w	fp, fp, lsl #2

    n = X.n - 1;
    t = Y.n - 1;
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );

    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 808b9c2:	4631      	mov	r1, r6
 808b9c4:	a80b      	add	r0, sp, #44	; 0x2c
 808b9c6:	f7ff fd78 	bl	808b4ba <mbedtls_mpi_cmp_mpi>
 808b9ca:	2800      	cmp	r0, #0
 808b9cc:	db0e      	blt.n	808b9ec <mbedtls_mpi_div_mpi+0x172>
    {
        Z.p[n - t]++;
 808b9ce:	9913      	ldr	r1, [sp, #76]	; 0x4c
 808b9d0:	f851 200b 	ldr.w	r2, [r1, fp]
 808b9d4:	3201      	adds	r2, #1
 808b9d6:	f841 200b 	str.w	r2, [r1, fp]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
 808b9da:	a90b      	add	r1, sp, #44	; 0x2c
 808b9dc:	4632      	mov	r2, r6
 808b9de:	4608      	mov	r0, r1
 808b9e0:	f7ff fe81 	bl	808b6e6 <mbedtls_mpi_sub_mpi>
 808b9e4:	4604      	mov	r4, r0
 808b9e6:	2800      	cmp	r0, #0
 808b9e8:	d0eb      	beq.n	808b9c2 <mbedtls_mpi_div_mpi+0x148>
 808b9ea:	e0f0      	b.n	808bbce <mbedtls_mpi_div_mpi+0x354>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
 808b9ec:	9902      	ldr	r1, [sp, #8]
 808b9ee:	4630      	mov	r0, r6
 808b9f0:	f7ff fc84 	bl	808b2fc <mbedtls_mpi_shift_r>
 808b9f4:	4604      	mov	r4, r0
 808b9f6:	2800      	cmp	r0, #0
 808b9f8:	f040 80e9 	bne.w	808bbce <mbedtls_mpi_div_mpi+0x354>

    for( i = n; i > t ; i-- )
    {
        if( X.p[i] >= Y.p[t] )
 808b9fc:	9b00      	ldr	r3, [sp, #0]
 808b9fe:	f105 4680 	add.w	r6, r5, #1073741824	; 0x40000000
 808ba02:	009b      	lsls	r3, r3, #2
 808ba04:	9305      	str	r3, [sp, #20]
        do
        {
            Z.p[i - t - 1]--;

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 808ba06:	3b04      	subs	r3, #4
 808ba08:	9308      	str	r3, [sp, #32]
 808ba0a:	f105 6300 	add.w	r3, r5, #134217728	; 0x8000000
 808ba0e:	3b01      	subs	r3, #1
 808ba10:	3e01      	subs	r6, #1
 808ba12:	ebca 0606 	rsb	r6, sl, r6
 808ba16:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 808ba1a:	ebca 0a03 	rsb	sl, sl, r3
 808ba1e:	ea4f 134a 	mov.w	r3, sl, lsl #5
 808ba22:	3d02      	subs	r5, #2
 808ba24:	00b6      	lsls	r6, r6, #2
 808ba26:	9302      	str	r3, [sp, #8]
 808ba28:	00ad      	lsls	r5, r5, #2
        Z.p[n - t]++;
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );

    for( i = n; i > t ; i-- )
 808ba2a:	9b00      	ldr	r3, [sp, #0]
 808ba2c:	4599      	cmp	r9, r3
 808ba2e:	f240 80a8 	bls.w	808bb82 <mbedtls_mpi_div_mpi+0x308>
    {
        if( X.p[i] >= Y.p[t] )
 808ba32:	9805      	ldr	r0, [sp, #20]
 808ba34:	990d      	ldr	r1, [sp, #52]	; 0x34
 808ba36:	9a10      	ldr	r2, [sp, #64]	; 0x40
 808ba38:	1d2b      	adds	r3, r5, #4
 808ba3a:	5812      	ldr	r2, [r2, r0]
 808ba3c:	9309      	str	r3, [sp, #36]	; 0x24
 808ba3e:	58cb      	ldr	r3, [r1, r3]
 808ba40:	9813      	ldr	r0, [sp, #76]	; 0x4c
 808ba42:	4293      	cmp	r3, r2
 808ba44:	d303      	bcc.n	808ba4e <mbedtls_mpi_div_mpi+0x1d4>
            Z.p[i - t - 1] = ~0;
 808ba46:	f04f 33ff 	mov.w	r3, #4294967295
 808ba4a:	5183      	str	r3, [r0, r6]
 808ba4c:	e01b      	b.n	808ba86 <mbedtls_mpi_div_mpi+0x20c>
        else
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 808ba4e:	eb00 0a06 	add.w	sl, r0, r6
 808ba52:	5948      	ldr	r0, [r1, r5]
#endif

    /*
     * Check for overflow
     */
    if( 0 == d || u1 >= d )
 808ba54:	b19a      	cbz	r2, 808ba7e <mbedtls_mpi_div_mpi+0x204>

        return ( ~0 );
    }

#if defined(MBEDTLS_HAVE_UDBL)
    dividend  = (mbedtls_t_udbl) u1 << biL;
 808ba56:	9307      	str	r3, [sp, #28]
 808ba58:	2300      	movs	r3, #0
 808ba5a:	9306      	str	r3, [sp, #24]
    dividend |= (mbedtls_t_udbl) u0;
    quotient = dividend / d;
 808ba5c:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 808ba60:	ea4b 0b00 	orr.w	fp, fp, r0
 808ba64:	4658      	mov	r0, fp
 808ba66:	4661      	mov	r1, ip
 808ba68:	f006 faba 	bl	8091fe0 <__aeabi_uldivmod>
        quotient = ( (mbedtls_t_udbl) 1 << biL ) - 1;

    if( r != NULL )
        *r = (mbedtls_mpi_uint)( dividend - (quotient * d ) );

    return (mbedtls_mpi_uint) quotient;
 808ba6c:	2300      	movs	r3, #0
 808ba6e:	f04f 32ff 	mov.w	r2, #4294967295
 808ba72:	428b      	cmp	r3, r1
 808ba74:	bf08      	it	eq
 808ba76:	4282      	cmpeq	r2, r0
 808ba78:	d203      	bcs.n	808ba82 <mbedtls_mpi_div_mpi+0x208>
 808ba7a:	4610      	mov	r0, r2
 808ba7c:	e001      	b.n	808ba82 <mbedtls_mpi_div_mpi+0x208>
     */
    if( 0 == d || u1 >= d )
    {
        if (r != NULL) *r = ~0;

        return ( ~0 );
 808ba7e:	f04f 30ff 	mov.w	r0, #4294967295
        if( X.p[i] >= Y.p[t] )
            Z.p[i - t - 1] = ~0;
        else
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
                                                            Y.p[t], NULL);
 808ba82:	f8ca 0000 	str.w	r0, [sl]
        }

        Z.p[i - t - 1]++;
 808ba86:	9a13      	ldr	r2, [sp, #76]	; 0x4c
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 808ba88:	f1a5 0a04 	sub.w	sl, r5, #4
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
                                                            Y.p[t], NULL);
        }

        Z.p[i - t - 1]++;
 808ba8c:	5993      	ldr	r3, [r2, r6]
 808ba8e:	3301      	adds	r3, #1
 808ba90:	5193      	str	r3, [r2, r6]
        do
        {
            Z.p[i - t - 1]--;
 808ba92:	9a13      	ldr	r2, [sp, #76]	; 0x4c

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 808ba94:	2100      	movs	r1, #0
        }

        Z.p[i - t - 1]++;
        do
        {
            Z.p[i - t - 1]--;
 808ba96:	5993      	ldr	r3, [r2, r6]

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 808ba98:	a814      	add	r0, sp, #80	; 0x50
        }

        Z.p[i - t - 1]++;
        do
        {
            Z.p[i - t - 1]--;
 808ba9a:	3b01      	subs	r3, #1
 808ba9c:	5193      	str	r3, [r2, r6]

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 808ba9e:	f7ff fb1a 	bl	808b0d6 <mbedtls_mpi_lset>
 808baa2:	2800      	cmp	r0, #0
 808baa4:	f040 8090 	bne.w	808bbc8 <mbedtls_mpi_div_mpi+0x34e>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 808baa8:	9b00      	ldr	r3, [sp, #0]
 808baaa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 808baac:	b11b      	cbz	r3, 808bab6 <mbedtls_mpi_div_mpi+0x23c>
 808baae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 808bab0:	9908      	ldr	r1, [sp, #32]
 808bab2:	585b      	ldr	r3, [r3, r1]
 808bab4:	e000      	b.n	808bab8 <mbedtls_mpi_div_mpi+0x23e>
 808bab6:	9b00      	ldr	r3, [sp, #0]
 808bab8:	6013      	str	r3, [r2, #0]
            T1.p[1] = Y.p[t];
 808baba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 808babc:	9a05      	ldr	r2, [sp, #20]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 808babe:	a914      	add	r1, sp, #80	; 0x50
        {
            Z.p[i - t - 1]--;

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
 808bac0:	589a      	ldr	r2, [r3, r2]
 808bac2:	9b16      	ldr	r3, [sp, #88]	; 0x58
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 808bac4:	4608      	mov	r0, r1
        {
            Z.p[i - t - 1]--;

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
 808bac6:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 808bac8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808baca:	599a      	ldr	r2, [r3, r6]
 808bacc:	f7ff fec8 	bl	808b860 <mbedtls_mpi_mul_int>
 808bad0:	4601      	mov	r1, r0
 808bad2:	2800      	cmp	r0, #0
 808bad4:	d17a      	bne.n	808bbcc <mbedtls_mpi_div_mpi+0x352>

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
 808bad6:	a817      	add	r0, sp, #92	; 0x5c
 808bad8:	f7ff fafd 	bl	808b0d6 <mbedtls_mpi_lset>
 808badc:	2800      	cmp	r0, #0
 808bade:	d173      	bne.n	808bbc8 <mbedtls_mpi_div_mpi+0x34e>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 808bae0:	f1b9 0f01 	cmp.w	r9, #1
 808bae4:	bf18      	it	ne
 808bae6:	9a0d      	ldrne	r2, [sp, #52]	; 0x34
 808bae8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808baea:	bf18      	it	ne
 808baec:	f852 000a 	ldrne.w	r0, [r2, sl]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
            T2.p[2] = X.p[i];
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 808baf0:	a917      	add	r1, sp, #92	; 0x5c
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 808baf2:	6018      	str	r0, [r3, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 808baf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            T2.p[2] = X.p[i];
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 808baf6:	a814      	add	r0, sp, #80	; 0x50
            T1.p[1] = Y.p[t];
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 808baf8:	595a      	ldr	r2, [r3, r5]
 808bafa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808bafc:	605a      	str	r2, [r3, #4]
            T2.p[2] = X.p[i];
 808bafe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808bb00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 808bb02:	589a      	ldr	r2, [r3, r2]
 808bb04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808bb06:	609a      	str	r2, [r3, #8]
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 808bb08:	f7ff fcd7 	bl	808b4ba <mbedtls_mpi_cmp_mpi>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
                                                            Y.p[t], NULL);
        }

        Z.p[i - t - 1]++;
        do
 808bb0c:	2800      	cmp	r0, #0
 808bb0e:	dcc0      	bgt.n	808ba92 <mbedtls_mpi_div_mpi+0x218>
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
            T2.p[2] = X.p[i];
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 808bb10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808bb12:	a90e      	add	r1, sp, #56	; 0x38
 808bb14:	599a      	ldr	r2, [r3, r6]
 808bb16:	a814      	add	r0, sp, #80	; 0x50
 808bb18:	f7ff fea2 	bl	808b860 <mbedtls_mpi_mul_int>
 808bb1c:	2800      	cmp	r0, #0
 808bb1e:	d153      	bne.n	808bbc8 <mbedtls_mpi_div_mpi+0x34e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 808bb20:	9902      	ldr	r1, [sp, #8]
 808bb22:	a814      	add	r0, sp, #80	; 0x50
 808bb24:	f7ff fb9b 	bl	808b25e <mbedtls_mpi_shift_l>
 808bb28:	2800      	cmp	r0, #0
 808bb2a:	d14d      	bne.n	808bbc8 <mbedtls_mpi_div_mpi+0x34e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 808bb2c:	a90b      	add	r1, sp, #44	; 0x2c
 808bb2e:	4608      	mov	r0, r1
 808bb30:	aa14      	add	r2, sp, #80	; 0x50
 808bb32:	f7ff fdd8 	bl	808b6e6 <mbedtls_mpi_sub_mpi>
 808bb36:	4601      	mov	r1, r0
 808bb38:	2800      	cmp	r0, #0
 808bb3a:	d147      	bne.n	808bbcc <mbedtls_mpi_div_mpi+0x352>

        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
 808bb3c:	a80b      	add	r0, sp, #44	; 0x2c
 808bb3e:	f7ff fd01 	bl	808b544 <mbedtls_mpi_cmp_int>
 808bb42:	2800      	cmp	r0, #0
 808bb44:	da15      	bge.n	808bb72 <mbedtls_mpi_div_mpi+0x2f8>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 808bb46:	a90e      	add	r1, sp, #56	; 0x38
 808bb48:	a814      	add	r0, sp, #80	; 0x50
 808bb4a:	f7ff fa9a 	bl	808b082 <mbedtls_mpi_copy>
 808bb4e:	2800      	cmp	r0, #0
 808bb50:	d13a      	bne.n	808bbc8 <mbedtls_mpi_div_mpi+0x34e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 808bb52:	9902      	ldr	r1, [sp, #8]
 808bb54:	a814      	add	r0, sp, #80	; 0x50
 808bb56:	f7ff fb82 	bl	808b25e <mbedtls_mpi_shift_l>
 808bb5a:	2800      	cmp	r0, #0
 808bb5c:	d134      	bne.n	808bbc8 <mbedtls_mpi_div_mpi+0x34e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 808bb5e:	a90b      	add	r1, sp, #44	; 0x2c
 808bb60:	aa14      	add	r2, sp, #80	; 0x50
 808bb62:	4608      	mov	r0, r1
 808bb64:	f7ff fd9e 	bl	808b6a4 <mbedtls_mpi_add_mpi>
 808bb68:	bb70      	cbnz	r0, 808bbc8 <mbedtls_mpi_div_mpi+0x34e>
            Z.p[i - t - 1]--;
 808bb6a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 808bb6c:	5993      	ldr	r3, [r2, r6]
 808bb6e:	3b01      	subs	r3, #1
 808bb70:	5193      	str	r3, [r2, r6]
 808bb72:	9b02      	ldr	r3, [sp, #8]
        Z.p[n - t]++;
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );

    for( i = n; i > t ; i-- )
 808bb74:	f109 39ff 	add.w	r9, r9, #4294967295
 808bb78:	3b20      	subs	r3, #32
 808bb7a:	3e04      	subs	r6, #4
 808bb7c:	9302      	str	r3, [sp, #8]
 808bb7e:	3d04      	subs	r5, #4
 808bb80:	e753      	b.n	808ba2a <mbedtls_mpi_div_mpi+0x1b0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
            Z.p[i - t - 1]--;
        }
    }

    if( Q != NULL )
 808bb82:	9b01      	ldr	r3, [sp, #4]
 808bb84:	b15b      	cbz	r3, 808bb9e <mbedtls_mpi_div_mpi+0x324>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 808bb86:	a911      	add	r1, sp, #68	; 0x44
 808bb88:	4618      	mov	r0, r3
 808bb8a:	f7ff fa7a 	bl	808b082 <mbedtls_mpi_copy>
 808bb8e:	b9d8      	cbnz	r0, 808bbc8 <mbedtls_mpi_div_mpi+0x34e>
        Q->s = A->s * B->s;
 808bb90:	9b04      	ldr	r3, [sp, #16]
 808bb92:	f8d8 2000 	ldr.w	r2, [r8]
 808bb96:	681b      	ldr	r3, [r3, #0]
 808bb98:	4353      	muls	r3, r2
 808bb9a:	9a01      	ldr	r2, [sp, #4]
 808bb9c:	6013      	str	r3, [r2, #0]
    }

    if( R != NULL )
 808bb9e:	b1b7      	cbz	r7, 808bbce <mbedtls_mpi_div_mpi+0x354>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
 808bba0:	9903      	ldr	r1, [sp, #12]
 808bba2:	a80b      	add	r0, sp, #44	; 0x2c
 808bba4:	f7ff fbaa 	bl	808b2fc <mbedtls_mpi_shift_r>
 808bba8:	b970      	cbnz	r0, 808bbc8 <mbedtls_mpi_div_mpi+0x34e>
        X.s = A->s;
 808bbaa:	f8d8 3000 	ldr.w	r3, [r8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 808bbae:	a90b      	add	r1, sp, #44	; 0x2c
 808bbb0:	4638      	mov	r0, r7
    }

    if( R != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
        X.s = A->s;
 808bbb2:	930b      	str	r3, [sp, #44]	; 0x2c
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 808bbb4:	f7ff fa65 	bl	808b082 <mbedtls_mpi_copy>
 808bbb8:	4601      	mov	r1, r0
 808bbba:	b938      	cbnz	r0, 808bbcc <mbedtls_mpi_div_mpi+0x352>

        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
 808bbbc:	4638      	mov	r0, r7
 808bbbe:	f7ff fcc1 	bl	808b544 <mbedtls_mpi_cmp_int>
 808bbc2:	b920      	cbnz	r0, 808bbce <mbedtls_mpi_div_mpi+0x354>
            R->s = 1;
 808bbc4:	2301      	movs	r3, #1
 808bbc6:	603b      	str	r3, [r7, #0]
 808bbc8:	4604      	mov	r4, r0
 808bbca:	e000      	b.n	808bbce <mbedtls_mpi_div_mpi+0x354>
 808bbcc:	460c      	mov	r4, r1
    }

cleanup:

    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 808bbce:	a80b      	add	r0, sp, #44	; 0x2c
 808bbd0:	f7ff fa15 	bl	808affe <mbedtls_mpi_free>
 808bbd4:	a80e      	add	r0, sp, #56	; 0x38
 808bbd6:	f7ff fa12 	bl	808affe <mbedtls_mpi_free>
 808bbda:	a811      	add	r0, sp, #68	; 0x44
 808bbdc:	f7ff fa0f 	bl	808affe <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
 808bbe0:	a814      	add	r0, sp, #80	; 0x50
 808bbe2:	f7ff fa0c 	bl	808affe <mbedtls_mpi_free>
 808bbe6:	a817      	add	r0, sp, #92	; 0x5c
 808bbe8:	f7ff fa09 	bl	808affe <mbedtls_mpi_free>

    return( ret );
 808bbec:	4620      	mov	r0, r4
 808bbee:	e001      	b.n	808bbf4 <mbedtls_mpi_div_mpi+0x37a>
    int ret;
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
 808bbf0:	f06f 000b 	mvn.w	r0, #11

    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );

    return( ret );
}
 808bbf4:	b01b      	add	sp, #108	; 0x6c
 808bbf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808bbfa <mbedtls_mpi_mod_mpi>:

/*
 * Modulo: R = A mod B
 */
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808bbfa:	b570      	push	{r4, r5, r6, lr}
 808bbfc:	4604      	mov	r4, r0
 808bbfe:	460e      	mov	r6, r1
    int ret;

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 808bc00:	4610      	mov	r0, r2
 808bc02:	2100      	movs	r1, #0

/*
 * Modulo: R = A mod B
 */
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808bc04:	4615      	mov	r5, r2
    int ret;

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 808bc06:	f7ff fc9d 	bl	808b544 <mbedtls_mpi_cmp_int>
 808bc0a:	2800      	cmp	r0, #0
 808bc0c:	db22      	blt.n	808bc54 <mbedtls_mpi_mod_mpi+0x5a>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
 808bc0e:	462b      	mov	r3, r5
 808bc10:	4632      	mov	r2, r6
 808bc12:	4621      	mov	r1, r4
 808bc14:	2000      	movs	r0, #0
 808bc16:	f7ff fe30 	bl	808b87a <mbedtls_mpi_div_mpi>
 808bc1a:	b9f8      	cbnz	r0, 808bc5c <mbedtls_mpi_mod_mpi+0x62>

    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 808bc1c:	2100      	movs	r1, #0
 808bc1e:	4620      	mov	r0, r4
 808bc20:	f7ff fc90 	bl	808b544 <mbedtls_mpi_cmp_int>
 808bc24:	2800      	cmp	r0, #0
 808bc26:	da07      	bge.n	808bc38 <mbedtls_mpi_mod_mpi+0x3e>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
 808bc28:	462a      	mov	r2, r5
 808bc2a:	4621      	mov	r1, r4
 808bc2c:	4620      	mov	r0, r4
 808bc2e:	f7ff fd39 	bl	808b6a4 <mbedtls_mpi_add_mpi>
 808bc32:	2800      	cmp	r0, #0
 808bc34:	d0f2      	beq.n	808bc1c <mbedtls_mpi_mod_mpi+0x22>
 808bc36:	bd70      	pop	{r4, r5, r6, pc}

    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 808bc38:	4629      	mov	r1, r5
 808bc3a:	4620      	mov	r0, r4
 808bc3c:	f7ff fc3d 	bl	808b4ba <mbedtls_mpi_cmp_mpi>
 808bc40:	2800      	cmp	r0, #0
 808bc42:	db0a      	blt.n	808bc5a <mbedtls_mpi_mod_mpi+0x60>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
 808bc44:	462a      	mov	r2, r5
 808bc46:	4621      	mov	r1, r4
 808bc48:	4620      	mov	r0, r4
 808bc4a:	f7ff fd4c 	bl	808b6e6 <mbedtls_mpi_sub_mpi>
 808bc4e:	2800      	cmp	r0, #0
 808bc50:	d0f2      	beq.n	808bc38 <mbedtls_mpi_mod_mpi+0x3e>
 808bc52:	bd70      	pop	{r4, r5, r6, pc}
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
    int ret;

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 808bc54:	f06f 0009 	mvn.w	r0, #9
 808bc58:	bd70      	pop	{r4, r5, r6, pc}
 808bc5a:	2000      	movs	r0, #0
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );

cleanup:

    return( ret );
}
 808bc5c:	bd70      	pop	{r4, r5, r6, pc}

0808bc5e <mbedtls_mpi_exp_mod>:

/*
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *E, const mbedtls_mpi *N, mbedtls_mpi *_RR )
{
 808bc5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808bc62:	4606      	mov	r6, r0
 808bc64:	f2ad 6d54 	subw	sp, sp, #1620	; 0x654
 808bc68:	460f      	mov	r7, r1
    size_t bufsize, nbits;
    mbedtls_mpi_uint ei, mm, state;
    mbedtls_mpi RR, T, W[ 2 << MBEDTLS_MPI_WINDOW_SIZE ], Apos;
    int neg;

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
 808bc6a:	4618      	mov	r0, r3
 808bc6c:	2100      	movs	r1, #0

/*
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *E, const mbedtls_mpi *N, mbedtls_mpi *_RR )
{
 808bc6e:	9202      	str	r2, [sp, #8]
 808bc70:	461d      	mov	r5, r3
    size_t bufsize, nbits;
    mbedtls_mpi_uint ei, mm, state;
    mbedtls_mpi RR, T, W[ 2 << MBEDTLS_MPI_WINDOW_SIZE ], Apos;
    int neg;

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
 808bc72:	f7ff fc67 	bl	808b544 <mbedtls_mpi_cmp_int>
 808bc76:	2800      	cmp	r0, #0
 808bc78:	dd05      	ble.n	808bc86 <mbedtls_mpi_exp_mod+0x28>
 808bc7a:	68ab      	ldr	r3, [r5, #8]
 808bc7c:	f8d3 8000 	ldr.w	r8, [r3]
 808bc80:	f018 0f01 	tst.w	r8, #1
 808bc84:	d102      	bne.n	808bc8c <mbedtls_mpi_exp_mod+0x2e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 808bc86:	f06f 0003 	mvn.w	r0, #3
 808bc8a:	e203      	b.n	808c094 <mbedtls_mpi_exp_mod+0x436>

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
 808bc8c:	2100      	movs	r1, #0
 808bc8e:	9802      	ldr	r0, [sp, #8]
 808bc90:	f7ff fc58 	bl	808b544 <mbedtls_mpi_cmp_int>
 808bc94:	2800      	cmp	r0, #0
 808bc96:	dbf6      	blt.n	808bc86 <mbedtls_mpi_exp_mod+0x28>
{
    mbedtls_mpi_uint x, m0 = N->p[0];
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;
 808bc98:	f108 0402 	add.w	r4, r8, #2
 808bc9c:	0064      	lsls	r4, r4, #1
 808bc9e:	f004 0408 	and.w	r4, r4, #8
 808bca2:	4444      	add	r4, r8
 808bca4:	2103      	movs	r1, #3

    for( i = biL; i >= 8; i /= 2 )
        x *= ( 2 - ( m0 * x ) );
 808bca6:	fb04 f308 	mul.w	r3, r4, r8
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
 808bcaa:	3901      	subs	r1, #1
        x *= ( 2 - ( m0 * x ) );
 808bcac:	f1c3 0302 	rsb	r3, r3, #2
 808bcb0:	fb03 f404 	mul.w	r4, r3, r4
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
 808bcb4:	d1f7      	bne.n	808bca6 <mbedtls_mpi_exp_mod+0x48>
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808bcb6:	2301      	movs	r3, #1
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
 808bcb8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 808bcbc:	a814      	add	r0, sp, #80	; 0x50
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808bcbe:	9308      	str	r3, [sp, #32]
    X->n = 0;
 808bcc0:	9109      	str	r1, [sp, #36]	; 0x24
    X->p = NULL;
 808bcc2:	910a      	str	r1, [sp, #40]	; 0x28
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808bcc4:	930b      	str	r3, [sp, #44]	; 0x2c
    X->n = 0;
 808bcc6:	910c      	str	r1, [sp, #48]	; 0x30
    X->p = NULL;
 808bcc8:	910d      	str	r1, [sp, #52]	; 0x34
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808bcca:	930e      	str	r3, [sp, #56]	; 0x38
    X->n = 0;
 808bccc:	910f      	str	r1, [sp, #60]	; 0x3c
    X->p = NULL;
 808bcce:	9110      	str	r1, [sp, #64]	; 0x40
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
 808bcd0:	f006 fb61 	bl	8092396 <memset>

    i = mbedtls_mpi_bitlen( E );
 808bcd4:	9802      	ldr	r0, [sp, #8]
 808bcd6:	f7ff fa44 	bl	808b162 <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
            ( i >  79 ) ? 4 : ( i >  23 ) ? 3 : 1;
 808bcda:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
 808bcde:	d20a      	bcs.n	808bcf6 <mbedtls_mpi_exp_mod+0x98>
 808bce0:	28ef      	cmp	r0, #239	; 0xef
 808bce2:	d80b      	bhi.n	808bcfc <mbedtls_mpi_exp_mod+0x9e>
 808bce4:	284f      	cmp	r0, #79	; 0x4f
 808bce6:	d80c      	bhi.n	808bd02 <mbedtls_mpi_exp_mod+0xa4>
 808bce8:	2818      	cmp	r0, #24
 808bcea:	bf34      	ite	cc
 808bcec:	f04f 0b01 	movcc.w	fp, #1
 808bcf0:	f04f 0b03 	movcs.w	fp, #3
 808bcf4:	e007      	b.n	808bd06 <mbedtls_mpi_exp_mod+0xa8>
 808bcf6:	f04f 0b06 	mov.w	fp, #6
 808bcfa:	e004      	b.n	808bd06 <mbedtls_mpi_exp_mod+0xa8>
 808bcfc:	f04f 0b05 	mov.w	fp, #5
 808bd00:	e001      	b.n	808bd06 <mbedtls_mpi_exp_mod+0xa8>
 808bd02:	f04f 0b04 	mov.w	fp, #4

    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;

    j = N->n + 1;
 808bd06:	686b      	ldr	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 808bd08:	4630      	mov	r0, r6
            ( i >  79 ) ? 4 : ( i >  23 ) ? 3 : 1;

    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;

    j = N->n + 1;
 808bd0a:	f103 0801 	add.w	r8, r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 808bd0e:	4641      	mov	r1, r8
 808bd10:	f7ff f98b 	bl	808b02a <mbedtls_mpi_grow>
 808bd14:	4603      	mov	r3, r0
 808bd16:	2800      	cmp	r0, #0
 808bd18:	f040 8194 	bne.w	808c044 <mbedtls_mpi_exp_mod+0x3e6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
 808bd1c:	4641      	mov	r1, r8
 808bd1e:	a817      	add	r0, sp, #92	; 0x5c
 808bd20:	f7ff f983 	bl	808b02a <mbedtls_mpi_grow>
 808bd24:	4603      	mov	r3, r0
 808bd26:	2800      	cmp	r0, #0
 808bd28:	f040 818c 	bne.w	808c044 <mbedtls_mpi_exp_mod+0x3e6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
 808bd2c:	ea4f 0148 	mov.w	r1, r8, lsl #1
 808bd30:	a80b      	add	r0, sp, #44	; 0x2c
 808bd32:	f7ff f97a 	bl	808b02a <mbedtls_mpi_grow>
 808bd36:	4603      	mov	r3, r0
 808bd38:	2800      	cmp	r0, #0
 808bd3a:	f040 8183 	bne.w	808c044 <mbedtls_mpi_exp_mod+0x3e6>

    /*
     * Compensate for negative A (and correct at the end)
     */
    neg = ( A->s == -1 );
 808bd3e:	683b      	ldr	r3, [r7, #0]
 808bd40:	9304      	str	r3, [sp, #16]
    if( neg )
 808bd42:	3301      	adds	r3, #1
 808bd44:	d10a      	bne.n	808bd5c <mbedtls_mpi_exp_mod+0xfe>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
 808bd46:	4639      	mov	r1, r7
 808bd48:	a80e      	add	r0, sp, #56	; 0x38
 808bd4a:	f7ff f99a 	bl	808b082 <mbedtls_mpi_copy>
 808bd4e:	4603      	mov	r3, r0
 808bd50:	2800      	cmp	r0, #0
 808bd52:	f040 8177 	bne.w	808c044 <mbedtls_mpi_exp_mod+0x3e6>
        Apos.s = 1;
 808bd56:	2301      	movs	r3, #1
 808bd58:	930e      	str	r3, [sp, #56]	; 0x38
        A = &Apos;
 808bd5a:	af0e      	add	r7, sp, #56	; 0x38
    }

    /*
     * If 1st call, pre-compute R^2 mod N
     */
    if( _RR == NULL || _RR->p == NULL )
 808bd5c:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 808bd60:	b10b      	cbz	r3, 808bd66 <mbedtls_mpi_exp_mod+0x108>
 808bd62:	689b      	ldr	r3, [r3, #8]
 808bd64:	bb2b      	cbnz	r3, 808bdb2 <mbedtls_mpi_exp_mod+0x154>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
 808bd66:	2101      	movs	r1, #1
 808bd68:	a808      	add	r0, sp, #32
 808bd6a:	f7ff f9b4 	bl	808b0d6 <mbedtls_mpi_lset>
 808bd6e:	4603      	mov	r3, r0
 808bd70:	2800      	cmp	r0, #0
 808bd72:	f040 8167 	bne.w	808c044 <mbedtls_mpi_exp_mod+0x3e6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
 808bd76:	6869      	ldr	r1, [r5, #4]
 808bd78:	a808      	add	r0, sp, #32
 808bd7a:	0189      	lsls	r1, r1, #6
 808bd7c:	f7ff fa6f 	bl	808b25e <mbedtls_mpi_shift_l>
 808bd80:	4603      	mov	r3, r0
 808bd82:	2800      	cmp	r0, #0
 808bd84:	f040 815e 	bne.w	808c044 <mbedtls_mpi_exp_mod+0x3e6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
 808bd88:	a908      	add	r1, sp, #32
 808bd8a:	462a      	mov	r2, r5
 808bd8c:	4608      	mov	r0, r1
 808bd8e:	f7ff ff34 	bl	808bbfa <mbedtls_mpi_mod_mpi>
 808bd92:	4603      	mov	r3, r0
 808bd94:	2800      	cmp	r0, #0
 808bd96:	f040 8155 	bne.w	808c044 <mbedtls_mpi_exp_mod+0x3e6>

        if( _RR != NULL )
 808bd9a:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 808bd9e:	b183      	cbz	r3, 808bdc2 <mbedtls_mpi_exp_mod+0x164>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
 808bda0:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 808bda4:	ab08      	add	r3, sp, #32
 808bda6:	cb03      	ldmia	r3!, {r0, r1}
 808bda8:	6010      	str	r0, [r2, #0]
 808bdaa:	6818      	ldr	r0, [r3, #0]
 808bdac:	6051      	str	r1, [r2, #4]
 808bdae:	6090      	str	r0, [r2, #8]
 808bdb0:	e007      	b.n	808bdc2 <mbedtls_mpi_exp_mod+0x164>
    }
    else
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
 808bdb2:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 808bdb6:	ab08      	add	r3, sp, #32
 808bdb8:	6810      	ldr	r0, [r2, #0]
 808bdba:	6851      	ldr	r1, [r2, #4]
 808bdbc:	c303      	stmia	r3!, {r0, r1}
 808bdbe:	6890      	ldr	r0, [r2, #8]
 808bdc0:	6018      	str	r0, [r3, #0]

    /*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
 808bdc2:	4629      	mov	r1, r5
 808bdc4:	4638      	mov	r0, r7
 808bdc6:	f7ff fb78 	bl	808b4ba <mbedtls_mpi_cmp_mpi>
 808bdca:	2800      	cmp	r0, #0
 808bdcc:	db18      	blt.n	808be00 <mbedtls_mpi_exp_mod+0x1a2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
 808bdce:	462a      	mov	r2, r5
 808bdd0:	4639      	mov	r1, r7
 808bdd2:	a817      	add	r0, sp, #92	; 0x5c
 808bdd4:	f7ff ff11 	bl	808bbfa <mbedtls_mpi_mod_mpi>
 808bdd8:	4603      	mov	r3, r0
 808bdda:	2800      	cmp	r0, #0
 808bddc:	f040 8132 	bne.w	808c044 <mbedtls_mpi_exp_mod+0x3e6>
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
        x *= ( 2 - ( m0 * x ) );

    *mm = ~x + 1;
 808bde0:	4264      	negs	r4, r4
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );

    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
 808bde2:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
 808bde6:	4623      	mov	r3, r4
 808bde8:	f8cd 9000 	str.w	r9, [sp]
 808bdec:	462a      	mov	r2, r5
 808bdee:	a908      	add	r1, sp, #32
 808bdf0:	a817      	add	r0, sp, #92	; 0x5c
 808bdf2:	f7ff fafe 	bl	808b3f2 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808bdf6:	4603      	mov	r3, r0
 808bdf8:	2800      	cmp	r0, #0
 808bdfa:	f040 8123 	bne.w	808c044 <mbedtls_mpi_exp_mod+0x3e6>
 808bdfe:	e004      	b.n	808be0a <mbedtls_mpi_exp_mod+0x1ac>
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
 808be00:	4639      	mov	r1, r7
 808be02:	a817      	add	r0, sp, #92	; 0x5c
 808be04:	f7ff f93d 	bl	808b082 <mbedtls_mpi_copy>
 808be08:	e7e6      	b.n	808bdd8 <mbedtls_mpi_exp_mod+0x17a>
    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
 808be0a:	a908      	add	r1, sp, #32
 808be0c:	4630      	mov	r0, r6
 808be0e:	f7ff f938 	bl	808b082 <mbedtls_mpi_copy>
 808be12:	4603      	mov	r3, r0
 808be14:	2800      	cmp	r0, #0
 808be16:	f040 8115 	bne.w	808c044 <mbedtls_mpi_exp_mod+0x3e6>
{
    mbedtls_mpi_uint z = 1;
    mbedtls_mpi U;

    U.n = U.s = (int) z;
    U.p = &z;
 808be1a:	ab07      	add	r3, sp, #28
/*
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    mbedtls_mpi_uint z = 1;
 808be1c:	2701      	movs	r7, #1
    mbedtls_mpi U;

    U.n = U.s = (int) z;
    U.p = &z;
 808be1e:	9313      	str	r3, [sp, #76]	; 0x4c

    return( mpi_montmul( A, &U, N, mm, T ) );
 808be20:	f8cd 9000 	str.w	r9, [sp]
 808be24:	4623      	mov	r3, r4
 808be26:	462a      	mov	r2, r5
 808be28:	a911      	add	r1, sp, #68	; 0x44
 808be2a:	4630      	mov	r0, r6
/*
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    mbedtls_mpi_uint z = 1;
 808be2c:	9707      	str	r7, [sp, #28]
    mbedtls_mpi U;

    U.n = U.s = (int) z;
 808be2e:	9711      	str	r7, [sp, #68]	; 0x44
 808be30:	9712      	str	r7, [sp, #72]	; 0x48
    U.p = &z;

    return( mpi_montmul( A, &U, N, mm, T ) );
 808be32:	f7ff fade 	bl	808b3f2 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 808be36:	4603      	mov	r3, r0
 808be38:	2800      	cmp	r0, #0
 808be3a:	f040 8103 	bne.w	808c044 <mbedtls_mpi_exp_mod+0x3e6>

    if( wsize > 1 )
 808be3e:	45bb      	cmp	fp, r7
 808be40:	d05b      	beq.n	808befa <mbedtls_mpi_exp_mod+0x29c>
    {
        /*
         * W[1 << (wsize - 1)] = W[1] ^ (wsize - 1)
         */
        j =  one << ( wsize - 1 );
 808be42:	f10b 33ff 	add.w	r3, fp, #4294967295
 808be46:	9303      	str	r3, [sp, #12]
 808be48:	409f      	lsls	r7, r3

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
 808be4a:	f04f 080c 	mov.w	r8, #12
 808be4e:	ab14      	add	r3, sp, #80	; 0x50
 808be50:	fb08 3807 	mla	r8, r8, r7, r3
 808be54:	6869      	ldr	r1, [r5, #4]
 808be56:	4640      	mov	r0, r8
 808be58:	3101      	adds	r1, #1
 808be5a:	f7ff f8e6 	bl	808b02a <mbedtls_mpi_grow>
 808be5e:	4603      	mov	r3, r0
 808be60:	2800      	cmp	r0, #0
 808be62:	f040 80ef 	bne.w	808c044 <mbedtls_mpi_exp_mod+0x3e6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
 808be66:	a917      	add	r1, sp, #92	; 0x5c
 808be68:	4640      	mov	r0, r8
 808be6a:	f7ff f90a 	bl	808b082 <mbedtls_mpi_copy>
 808be6e:	4603      	mov	r3, r0
 808be70:	2800      	cmp	r0, #0
 808be72:	f040 80e7 	bne.w	808c044 <mbedtls_mpi_exp_mod+0x3e6>
 808be76:	4682      	mov	sl, r0

        for( i = 0; i < wsize - 1; i++ )
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
 808be78:	4623      	mov	r3, r4
 808be7a:	f8cd 9000 	str.w	r9, [sp]
 808be7e:	462a      	mov	r2, r5
 808be80:	4641      	mov	r1, r8
 808be82:	4640      	mov	r0, r8
 808be84:	f7ff fab5 	bl	808b3f2 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808be88:	4603      	mov	r3, r0
 808be8a:	2800      	cmp	r0, #0
 808be8c:	f040 80da 	bne.w	808c044 <mbedtls_mpi_exp_mod+0x3e6>
        j =  one << ( wsize - 1 );

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );

        for( i = 0; i < wsize - 1; i++ )
 808be90:	9b03      	ldr	r3, [sp, #12]
 808be92:	f10a 0a01 	add.w	sl, sl, #1
 808be96:	4553      	cmp	r3, sl
 808be98:	d8ee      	bhi.n	808be78 <mbedtls_mpi_exp_mod+0x21a>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
 808be9a:	3701      	adds	r7, #1
 808be9c:	f04f 080c 	mov.w	r8, #12
 808bea0:	ab14      	add	r3, sp, #80	; 0x50
 808bea2:	fb08 3807 	mla	r8, r8, r7, r3
 808bea6:	f04f 0901 	mov.w	r9, #1
 808beaa:	fa09 f90b 	lsl.w	r9, r9, fp
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 808beae:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
 808beb2:	454f      	cmp	r7, r9
 808beb4:	d221      	bcs.n	808befa <mbedtls_mpi_exp_mod+0x29c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
 808beb6:	6869      	ldr	r1, [r5, #4]
 808beb8:	4640      	mov	r0, r8
 808beba:	3101      	adds	r1, #1
 808bebc:	f7ff f8b5 	bl	808b02a <mbedtls_mpi_grow>
 808bec0:	4603      	mov	r3, r0
 808bec2:	2800      	cmp	r0, #0
 808bec4:	f040 80be 	bne.w	808c044 <mbedtls_mpi_exp_mod+0x3e6>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
 808bec8:	f1a8 010c 	sub.w	r1, r8, #12
 808becc:	4640      	mov	r0, r8
 808bece:	f7ff f8d8 	bl	808b082 <mbedtls_mpi_copy>
 808bed2:	4603      	mov	r3, r0
 808bed4:	2800      	cmp	r0, #0
 808bed6:	f040 80b5 	bne.w	808c044 <mbedtls_mpi_exp_mod+0x3e6>

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 808beda:	4623      	mov	r3, r4
 808bedc:	4640      	mov	r0, r8
 808bede:	f8cd a000 	str.w	sl, [sp]
 808bee2:	462a      	mov	r2, r5
 808bee4:	a917      	add	r1, sp, #92	; 0x5c
 808bee6:	f7ff fa84 	bl	808b3f2 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808beea:	f108 080c 	add.w	r8, r8, #12
 808beee:	4603      	mov	r3, r0
 808bef0:	2800      	cmp	r0, #0
 808bef2:	f040 80a7 	bne.w	808c044 <mbedtls_mpi_exp_mod+0x3e6>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
 808bef6:	3701      	adds	r7, #1
 808bef8:	e7db      	b.n	808beb2 <mbedtls_mpi_exp_mod+0x254>

    nblimbs = E->n;
    bufsize = 0;
    nbits   = 0;
    wbits   = 0;
    state   = 0;
 808befa:	2700      	movs	r7, #0
        }
    }

    nblimbs = E->n;
    bufsize = 0;
    nbits   = 0;
 808befc:	46b9      	mov	r9, r7
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
        }
    }

    nblimbs = E->n;
    bufsize = 0;
 808befe:	46ba      	mov	sl, r7
    nbits   = 0;
    wbits   = 0;
 808bf00:	46b8      	mov	r8, r7

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
        }
    }

    nblimbs = E->n;
 808bf02:	9b02      	ldr	r3, [sp, #8]
 808bf04:	685b      	ldr	r3, [r3, #4]
 808bf06:	9303      	str	r3, [sp, #12]
    wbits   = 0;
    state   = 0;

    while( 1 )
    {
        if( bufsize == 0 )
 808bf08:	f1ba 0f00 	cmp.w	sl, #0
 808bf0c:	d10e      	bne.n	808bf2c <mbedtls_mpi_exp_mod+0x2ce>
        {
            if( nblimbs == 0 )
 808bf0e:	9b03      	ldr	r3, [sp, #12]
 808bf10:	b93b      	cbnz	r3, 808bf22 <mbedtls_mpi_exp_mod+0x2c4>
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
 808bf12:	2301      	movs	r3, #1
 808bf14:	fa03 f30b 	lsl.w	r3, r3, fp
 808bf18:	9305      	str	r3, [sp, #20]
 808bf1a:	9f03      	ldr	r7, [sp, #12]
 808bf1c:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
 808bf20:	e05e      	b.n	808bfe0 <mbedtls_mpi_exp_mod+0x382>
        if( bufsize == 0 )
        {
            if( nblimbs == 0 )
                break;

            nblimbs--;
 808bf22:	9b03      	ldr	r3, [sp, #12]

            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
 808bf24:	f04f 0a20 	mov.w	sl, #32
        if( bufsize == 0 )
        {
            if( nblimbs == 0 )
                break;

            nblimbs--;
 808bf28:	3b01      	subs	r3, #1
 808bf2a:	9303      	str	r3, [sp, #12]
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
        }

        bufsize--;

        ei = (E->p[nblimbs] >> bufsize) & 1;
 808bf2c:	9b02      	ldr	r3, [sp, #8]
 808bf2e:	9a03      	ldr	r2, [sp, #12]
 808bf30:	689b      	ldr	r3, [r3, #8]
            nblimbs--;

            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
        }

        bufsize--;
 808bf32:	f10a 3aff 	add.w	sl, sl, #4294967295

        ei = (E->p[nblimbs] >> bufsize) & 1;
 808bf36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 808bf3a:	fa23 f30a 	lsr.w	r3, r3, sl

        /*
         * skip leading 0s
         */
        if( ei == 0 && state == 0 )
 808bf3e:	f013 0301 	ands.w	r3, r3, #1
 808bf42:	d10f      	bne.n	808bf64 <mbedtls_mpi_exp_mod+0x306>
 808bf44:	2f00      	cmp	r7, #0
 808bf46:	d0df      	beq.n	808bf08 <mbedtls_mpi_exp_mod+0x2aa>
            continue;

        if( ei == 0 && state == 1 )
 808bf48:	2f01      	cmp	r7, #1
 808bf4a:	d10b      	bne.n	808bf64 <mbedtls_mpi_exp_mod+0x306>
        {
            /*
             * out of window, square X
             */
            MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 808bf4c:	ab0b      	add	r3, sp, #44	; 0x2c
 808bf4e:	9300      	str	r3, [sp, #0]
 808bf50:	462a      	mov	r2, r5
 808bf52:	4623      	mov	r3, r4
 808bf54:	4631      	mov	r1, r6
 808bf56:	4630      	mov	r0, r6
 808bf58:	f7ff fa4b 	bl	808b3f2 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808bf5c:	4603      	mov	r3, r0
 808bf5e:	2800      	cmp	r0, #0
 808bf60:	d0d2      	beq.n	808bf08 <mbedtls_mpi_exp_mod+0x2aa>
 808bf62:	e06f      	b.n	808c044 <mbedtls_mpi_exp_mod+0x3e6>
        /*
         * add ei to current window
         */
        state = 2;

        nbits++;
 808bf64:	f109 0901 	add.w	r9, r9, #1
        wbits |= ( ei << ( wsize - nbits ) );
 808bf68:	ebc9 020b 	rsb	r2, r9, fp
 808bf6c:	4093      	lsls	r3, r2

        if( nbits == wsize )
 808bf6e:	45cb      	cmp	fp, r9
         * add ei to current window
         */
        state = 2;

        nbits++;
        wbits |= ( ei << ( wsize - nbits ) );
 808bf70:	ea48 0803 	orr.w	r8, r8, r3

        if( nbits == wsize )
 808bf74:	d001      	beq.n	808bf7a <mbedtls_mpi_exp_mod+0x31c>
        }

        /*
         * add ei to current window
         */
        state = 2;
 808bf76:	2702      	movs	r7, #2
 808bf78:	e7c6      	b.n	808bf08 <mbedtls_mpi_exp_mod+0x2aa>
 808bf7a:	2700      	movs	r7, #0
        {
            /*
             * X = X^wsize R^-1 mod N
             */
            for( i = 0; i < wsize; i++ )
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 808bf7c:	ab0b      	add	r3, sp, #44	; 0x2c
 808bf7e:	9300      	str	r3, [sp, #0]
 808bf80:	462a      	mov	r2, r5
 808bf82:	4623      	mov	r3, r4
 808bf84:	4631      	mov	r1, r6
 808bf86:	4630      	mov	r0, r6
 808bf88:	f7ff fa33 	bl	808b3f2 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808bf8c:	4603      	mov	r3, r0
 808bf8e:	2800      	cmp	r0, #0
 808bf90:	d158      	bne.n	808c044 <mbedtls_mpi_exp_mod+0x3e6>
        if( nbits == wsize )
        {
            /*
             * X = X^wsize R^-1 mod N
             */
            for( i = 0; i < wsize; i++ )
 808bf92:	3701      	adds	r7, #1
 808bf94:	45bb      	cmp	fp, r7
 808bf96:	d1f1      	bne.n	808bf7c <mbedtls_mpi_exp_mod+0x31e>
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

            /*
             * X = X * W[wbits] R^-1 mod N
             */
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );
 808bf98:	ab0b      	add	r3, sp, #44	; 0x2c
 808bf9a:	a814      	add	r0, sp, #80	; 0x50
 808bf9c:	210c      	movs	r1, #12
 808bf9e:	9300      	str	r3, [sp, #0]
 808bfa0:	fb01 0108 	mla	r1, r1, r8, r0
 808bfa4:	4623      	mov	r3, r4
 808bfa6:	462a      	mov	r2, r5
 808bfa8:	4630      	mov	r0, r6
 808bfaa:	f7ff fa22 	bl	808b3f2 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808bfae:	4603      	mov	r3, r0
 808bfb0:	2800      	cmp	r0, #0
 808bfb2:	d147      	bne.n	808c044 <mbedtls_mpi_exp_mod+0x3e6>

            state--;
 808bfb4:	2701      	movs	r7, #1
            nbits = 0;
 808bfb6:	4680      	mov	r8, r0
            wbits = 0;
 808bfb8:	4681      	mov	r9, r0
 808bfba:	e7a5      	b.n	808bf08 <mbedtls_mpi_exp_mod+0x2aa>
    /*
     * process the remaining bits
     */
    for( i = 0; i < nbits; i++ )
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 808bfbc:	4623      	mov	r3, r4
 808bfbe:	f8cd a000 	str.w	sl, [sp]
 808bfc2:	462a      	mov	r2, r5
 808bfc4:	4631      	mov	r1, r6
 808bfc6:	4630      	mov	r0, r6
 808bfc8:	f7ff fa13 	bl	808b3f2 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808bfcc:	4603      	mov	r3, r0
 808bfce:	2800      	cmp	r0, #0
 808bfd0:	d138      	bne.n	808c044 <mbedtls_mpi_exp_mod+0x3e6>

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
 808bfd2:	9b05      	ldr	r3, [sp, #20]
     */
    for( i = 0; i < nbits; i++ )
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;
 808bfd4:	ea4f 0848 	mov.w	r8, r8, lsl #1

        if( ( wbits & ( one << wsize ) ) != 0 )
 808bfd8:	ea18 0f03 	tst.w	r8, r3
 808bfdc:	d103      	bne.n	808bfe6 <mbedtls_mpi_exp_mod+0x388>
    }

    /*
     * process the remaining bits
     */
    for( i = 0; i < nbits; i++ )
 808bfde:	3701      	adds	r7, #1
 808bfe0:	454f      	cmp	r7, r9
 808bfe2:	d1eb      	bne.n	808bfbc <mbedtls_mpi_exp_mod+0x35e>
 808bfe4:	e00b      	b.n	808bffe <mbedtls_mpi_exp_mod+0x3a0>
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );
 808bfe6:	4623      	mov	r3, r4
 808bfe8:	f8cd a000 	str.w	sl, [sp]
 808bfec:	462a      	mov	r2, r5
 808bfee:	a917      	add	r1, sp, #92	; 0x5c
 808bff0:	4630      	mov	r0, r6
 808bff2:	f7ff f9fe 	bl	808b3f2 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808bff6:	4603      	mov	r3, r0
 808bff8:	2800      	cmp	r0, #0
 808bffa:	d0f0      	beq.n	808bfde <mbedtls_mpi_exp_mod+0x380>
 808bffc:	e022      	b.n	808c044 <mbedtls_mpi_exp_mod+0x3e6>
/*
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    mbedtls_mpi_uint z = 1;
 808bffe:	2301      	movs	r3, #1
 808c000:	9307      	str	r3, [sp, #28]
    mbedtls_mpi U;

    U.n = U.s = (int) z;
 808c002:	9311      	str	r3, [sp, #68]	; 0x44
 808c004:	9312      	str	r3, [sp, #72]	; 0x48
    U.p = &z;
 808c006:	ab07      	add	r3, sp, #28
 808c008:	9313      	str	r3, [sp, #76]	; 0x4c

    return( mpi_montmul( A, &U, N, mm, T ) );
 808c00a:	f8cd a000 	str.w	sl, [sp]
 808c00e:	4623      	mov	r3, r4
 808c010:	462a      	mov	r2, r5
 808c012:	a911      	add	r1, sp, #68	; 0x44
 808c014:	4630      	mov	r0, r6
 808c016:	f7ff f9ec 	bl	808b3f2 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
    }

    /*
     * X = A^E * R * R^-1 mod N = A^E mod N
     */
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 808c01a:	4603      	mov	r3, r0
 808c01c:	b990      	cbnz	r0, 808c044 <mbedtls_mpi_exp_mod+0x3e6>

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
 808c01e:	9a04      	ldr	r2, [sp, #16]
 808c020:	3201      	adds	r2, #1
 808c022:	d10f      	bne.n	808c044 <mbedtls_mpi_exp_mod+0x3e6>
 808c024:	9a02      	ldr	r2, [sp, #8]
 808c026:	6852      	ldr	r2, [r2, #4]
 808c028:	b162      	cbz	r2, 808c044 <mbedtls_mpi_exp_mod+0x3e6>
 808c02a:	9a02      	ldr	r2, [sp, #8]
 808c02c:	6892      	ldr	r2, [r2, #8]
 808c02e:	6812      	ldr	r2, [r2, #0]
 808c030:	07d2      	lsls	r2, r2, #31
 808c032:	d507      	bpl.n	808c044 <mbedtls_mpi_exp_mod+0x3e6>
    {
        X->s = -1;
 808c034:	9b04      	ldr	r3, [sp, #16]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
 808c036:	4632      	mov	r2, r6
     */
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
    {
        X->s = -1;
 808c038:	6033      	str	r3, [r6, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
 808c03a:	4629      	mov	r1, r5
 808c03c:	4630      	mov	r0, r6
 808c03e:	f7ff fb31 	bl	808b6a4 <mbedtls_mpi_add_mpi>
 808c042:	4603      	mov	r3, r0
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 808c044:	2201      	movs	r2, #1
 808c046:	f10b 34ff 	add.w	r4, fp, #4294967295
 808c04a:	fa02 f404 	lsl.w	r4, r2, r4
 808c04e:	fa02 f50b 	lsl.w	r5, r2, fp
        mbedtls_mpi_free( &W[i] );
 808c052:	260c      	movs	r6, #12
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 808c054:	42ac      	cmp	r4, r5
 808c056:	9302      	str	r3, [sp, #8]
 808c058:	d207      	bcs.n	808c06a <mbedtls_mpi_exp_mod+0x40c>
        mbedtls_mpi_free( &W[i] );
 808c05a:	ab14      	add	r3, sp, #80	; 0x50
 808c05c:	fb06 3004 	mla	r0, r6, r4, r3
 808c060:	f7fe ffcd 	bl	808affe <mbedtls_mpi_free>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 808c064:	3401      	adds	r4, #1
 808c066:	9b02      	ldr	r3, [sp, #8]
 808c068:	e7f4      	b.n	808c054 <mbedtls_mpi_exp_mod+0x3f6>
        mbedtls_mpi_free( &W[i] );

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
 808c06a:	a817      	add	r0, sp, #92	; 0x5c
 808c06c:	f7fe ffc7 	bl	808affe <mbedtls_mpi_free>
 808c070:	a80b      	add	r0, sp, #44	; 0x2c
 808c072:	f7fe ffc4 	bl	808affe <mbedtls_mpi_free>
 808c076:	a80e      	add	r0, sp, #56	; 0x38
 808c078:	f7fe ffc1 	bl	808affe <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
 808c07c:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 808c080:	9b02      	ldr	r3, [sp, #8]
 808c082:	b10a      	cbz	r2, 808c088 <mbedtls_mpi_exp_mod+0x42a>
 808c084:	6892      	ldr	r2, [r2, #8]
 808c086:	b922      	cbnz	r2, 808c092 <mbedtls_mpi_exp_mod+0x434>
        mbedtls_mpi_free( &RR );
 808c088:	a808      	add	r0, sp, #32
 808c08a:	9302      	str	r3, [sp, #8]
 808c08c:	f7fe ffb7 	bl	808affe <mbedtls_mpi_free>

    return( ret );
 808c090:	9b02      	ldr	r3, [sp, #8]
 808c092:	4618      	mov	r0, r3
}
 808c094:	f20d 6d54 	addw	sp, sp, #1620	; 0x654
 808c098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808c09c <mbedtls_mpi_gcd>:

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808c09c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808c09e:	b08b      	sub	sp, #44	; 0x2c
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808c0a0:	2300      	movs	r3, #0
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c0a2:	2601      	movs	r6, #1

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808c0a4:	4607      	mov	r7, r0
    size_t lz, lzt;
    mbedtls_mpi TG, TA, TB;

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 808c0a6:	a804      	add	r0, sp, #16

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808c0a8:	4615      	mov	r5, r2
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c0aa:	9601      	str	r6, [sp, #4]
    X->n = 0;
 808c0ac:	9302      	str	r3, [sp, #8]
    X->p = NULL;
 808c0ae:	9303      	str	r3, [sp, #12]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c0b0:	9604      	str	r6, [sp, #16]
    X->n = 0;
 808c0b2:	9305      	str	r3, [sp, #20]
    X->p = NULL;
 808c0b4:	9306      	str	r3, [sp, #24]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c0b6:	9607      	str	r6, [sp, #28]
    X->n = 0;
 808c0b8:	9308      	str	r3, [sp, #32]
    X->p = NULL;
 808c0ba:	9309      	str	r3, [sp, #36]	; 0x24
    size_t lz, lzt;
    mbedtls_mpi TG, TA, TB;

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 808c0bc:	f7fe ffe1 	bl	808b082 <mbedtls_mpi_copy>
 808c0c0:	4604      	mov	r4, r0
 808c0c2:	2800      	cmp	r0, #0
 808c0c4:	d163      	bne.n	808c18e <mbedtls_mpi_gcd+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 808c0c6:	4629      	mov	r1, r5
 808c0c8:	a807      	add	r0, sp, #28
 808c0ca:	f7fe ffda 	bl	808b082 <mbedtls_mpi_copy>
 808c0ce:	4604      	mov	r4, r0
 808c0d0:	2800      	cmp	r0, #0
 808c0d2:	d15c      	bne.n	808c18e <mbedtls_mpi_gcd+0xf2>

    lz = mbedtls_mpi_lsb( &TA );
 808c0d4:	a804      	add	r0, sp, #16
 808c0d6:	f7ff f82b 	bl	808b130 <mbedtls_mpi_lsb>
 808c0da:	4605      	mov	r5, r0
    lzt = mbedtls_mpi_lsb( &TB );
 808c0dc:	a807      	add	r0, sp, #28
 808c0de:	f7ff f827 	bl	808b130 <mbedtls_mpi_lsb>
 808c0e2:	4285      	cmp	r5, r0
 808c0e4:	bf28      	it	cs
 808c0e6:	4605      	movcs	r5, r0

    if( lzt < lz )
        lz = lzt;

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
 808c0e8:	a804      	add	r0, sp, #16
 808c0ea:	4629      	mov	r1, r5
 808c0ec:	f7ff f906 	bl	808b2fc <mbedtls_mpi_shift_r>
 808c0f0:	4604      	mov	r4, r0
 808c0f2:	2800      	cmp	r0, #0
 808c0f4:	d14b      	bne.n	808c18e <mbedtls_mpi_gcd+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
 808c0f6:	4629      	mov	r1, r5
 808c0f8:	a807      	add	r0, sp, #28
 808c0fa:	f7ff f8ff 	bl	808b2fc <mbedtls_mpi_shift_r>
 808c0fe:	4604      	mov	r4, r0
 808c100:	2800      	cmp	r0, #0
 808c102:	d144      	bne.n	808c18e <mbedtls_mpi_gcd+0xf2>

    TA.s = TB.s = 1;
 808c104:	9607      	str	r6, [sp, #28]
 808c106:	9604      	str	r6, [sp, #16]

    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 808c108:	2100      	movs	r1, #0
 808c10a:	a804      	add	r0, sp, #16
 808c10c:	f7ff fa1a 	bl	808b544 <mbedtls_mpi_cmp_int>
 808c110:	2800      	cmp	r0, #0
 808c112:	d031      	beq.n	808c178 <mbedtls_mpi_gcd+0xdc>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
 808c114:	a804      	add	r0, sp, #16
 808c116:	f7ff f80b 	bl	808b130 <mbedtls_mpi_lsb>
 808c11a:	4601      	mov	r1, r0
 808c11c:	a804      	add	r0, sp, #16
 808c11e:	f7ff f8ed 	bl	808b2fc <mbedtls_mpi_shift_r>
 808c122:	4604      	mov	r4, r0
 808c124:	2800      	cmp	r0, #0
 808c126:	d132      	bne.n	808c18e <mbedtls_mpi_gcd+0xf2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
 808c128:	a807      	add	r0, sp, #28
 808c12a:	f7ff f801 	bl	808b130 <mbedtls_mpi_lsb>
 808c12e:	4601      	mov	r1, r0
 808c130:	a807      	add	r0, sp, #28
 808c132:	f7ff f8e3 	bl	808b2fc <mbedtls_mpi_shift_r>
 808c136:	4604      	mov	r4, r0
 808c138:	bb48      	cbnz	r0, 808c18e <mbedtls_mpi_gcd+0xf2>

        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
 808c13a:	a907      	add	r1, sp, #28
 808c13c:	a804      	add	r0, sp, #16
 808c13e:	f7ff f9bc 	bl	808b4ba <mbedtls_mpi_cmp_mpi>
 808c142:	2800      	cmp	r0, #0
 808c144:	db09      	blt.n	808c15a <mbedtls_mpi_gcd+0xbe>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
 808c146:	a904      	add	r1, sp, #16
 808c148:	aa07      	add	r2, sp, #28
 808c14a:	4608      	mov	r0, r1
 808c14c:	f7ff fa6a 	bl	808b624 <mbedtls_mpi_sub_abs>
 808c150:	4604      	mov	r4, r0
 808c152:	b9e0      	cbnz	r0, 808c18e <mbedtls_mpi_gcd+0xf2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );
 808c154:	2101      	movs	r1, #1
 808c156:	a804      	add	r0, sp, #16
 808c158:	e008      	b.n	808c16c <mbedtls_mpi_gcd+0xd0>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
 808c15a:	a907      	add	r1, sp, #28
 808c15c:	aa04      	add	r2, sp, #16
 808c15e:	4608      	mov	r0, r1
 808c160:	f7ff fa60 	bl	808b624 <mbedtls_mpi_sub_abs>
 808c164:	4604      	mov	r4, r0
 808c166:	b990      	cbnz	r0, 808c18e <mbedtls_mpi_gcd+0xf2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 808c168:	2101      	movs	r1, #1
 808c16a:	a807      	add	r0, sp, #28
 808c16c:	f7ff f8c6 	bl	808b2fc <mbedtls_mpi_shift_r>
 808c170:	4604      	mov	r4, r0
 808c172:	2800      	cmp	r0, #0
 808c174:	d0c8      	beq.n	808c108 <mbedtls_mpi_gcd+0x6c>
 808c176:	e00a      	b.n	808c18e <mbedtls_mpi_gcd+0xf2>
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
 808c178:	4629      	mov	r1, r5
 808c17a:	a807      	add	r0, sp, #28
 808c17c:	f7ff f86f 	bl	808b25e <mbedtls_mpi_shift_l>
 808c180:	4604      	mov	r4, r0
 808c182:	b920      	cbnz	r0, 808c18e <mbedtls_mpi_gcd+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
 808c184:	a907      	add	r1, sp, #28
 808c186:	4638      	mov	r0, r7
 808c188:	f7fe ff7b 	bl	808b082 <mbedtls_mpi_copy>
 808c18c:	4604      	mov	r4, r0

cleanup:

    mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );
 808c18e:	a801      	add	r0, sp, #4
 808c190:	f7fe ff35 	bl	808affe <mbedtls_mpi_free>
 808c194:	a804      	add	r0, sp, #16
 808c196:	f7fe ff32 	bl	808affe <mbedtls_mpi_free>
 808c19a:	a807      	add	r0, sp, #28
 808c19c:	f7fe ff2f 	bl	808affe <mbedtls_mpi_free>

    return( ret );
}
 808c1a0:	4620      	mov	r0, r4
 808c1a2:	b00b      	add	sp, #44	; 0x2c
 808c1a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808c1a6 <mbedtls_mpi_fill_random>:
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 808c1a6:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( size > MBEDTLS_MPI_MAX_SIZE )
 808c1a8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 808c1ac:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 808c1b0:	4605      	mov	r5, r0
 808c1b2:	460c      	mov	r4, r1
 808c1b4:	4616      	mov	r6, r2
    int ret;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( size > MBEDTLS_MPI_MAX_SIZE )
 808c1b6:	d814      	bhi.n	808c1e2 <mbedtls_mpi_fill_random+0x3c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    MBEDTLS_MPI_CHK( f_rng( p_rng, buf, size ) );
 808c1b8:	460a      	mov	r2, r1
 808c1ba:	4618      	mov	r0, r3
 808c1bc:	4669      	mov	r1, sp
 808c1be:	47b0      	blx	r6
 808c1c0:	b920      	cbnz	r0, 808c1cc <mbedtls_mpi_fill_random+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( X, buf, size ) );
 808c1c2:	4622      	mov	r2, r4
 808c1c4:	4669      	mov	r1, sp
 808c1c6:	4628      	mov	r0, r5
 808c1c8:	f7fe fff1 	bl	808b1ae <mbedtls_mpi_read_binary>
 808c1cc:	2300      	movs	r3, #0
    volatile mbedtls_mpi_uint *p = (mbedtls_mpi_uint *)v; while( n-- ) *p++ = 0;
}

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808c1ce:	f240 4401 	movw	r4, #1025	; 0x401
 808c1d2:	4619      	mov	r1, r3
 808c1d4:	eb0d 0203 	add.w	r2, sp, r3
 808c1d8:	3301      	adds	r3, #1
 808c1da:	42a3      	cmp	r3, r4
 808c1dc:	d003      	beq.n	808c1e6 <mbedtls_mpi_fill_random+0x40>
 808c1de:	7011      	strb	r1, [r2, #0]
 808c1e0:	e7f8      	b.n	808c1d4 <mbedtls_mpi_fill_random+0x2e>
{
    int ret;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( size > MBEDTLS_MPI_MAX_SIZE )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 808c1e2:	f06f 0003 	mvn.w	r0, #3
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( X, buf, size ) );

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
    return( ret );
}
 808c1e6:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
 808c1ea:	bd70      	pop	{r4, r5, r6, pc}

0808c1ec <mbedtls_mpi_inv_mod>:

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
 808c1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808c1f0:	4680      	mov	r8, r0
 808c1f2:	b09c      	sub	sp, #112	; 0x70
 808c1f4:	460f      	mov	r7, r1
    int ret;
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 808c1f6:	4610      	mov	r0, r2
 808c1f8:	2101      	movs	r1, #1

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
 808c1fa:	4616      	mov	r6, r2
    int ret;
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 808c1fc:	f7ff f9a2 	bl	808b544 <mbedtls_mpi_cmp_int>
 808c200:	2800      	cmp	r0, #0
 808c202:	f340 814c 	ble.w	808c49e <mbedtls_mpi_inv_mod+0x2b2>
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808c206:	2300      	movs	r3, #0
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c208:	2501      	movs	r5, #1

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 808c20a:	4632      	mov	r2, r6
 808c20c:	4639      	mov	r1, r7
 808c20e:	a801      	add	r0, sp, #4
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c210:	9504      	str	r5, [sp, #16]
    X->n = 0;
 808c212:	9305      	str	r3, [sp, #20]
    X->p = NULL;
 808c214:	9306      	str	r3, [sp, #24]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c216:	9507      	str	r5, [sp, #28]
    X->n = 0;
 808c218:	9308      	str	r3, [sp, #32]
    X->p = NULL;
 808c21a:	9309      	str	r3, [sp, #36]	; 0x24
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c21c:	950a      	str	r5, [sp, #40]	; 0x28
    X->n = 0;
 808c21e:	930b      	str	r3, [sp, #44]	; 0x2c
    X->p = NULL;
 808c220:	930c      	str	r3, [sp, #48]	; 0x30
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c222:	950d      	str	r5, [sp, #52]	; 0x34
    X->n = 0;
 808c224:	930e      	str	r3, [sp, #56]	; 0x38
    X->p = NULL;
 808c226:	930f      	str	r3, [sp, #60]	; 0x3c
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c228:	9501      	str	r5, [sp, #4]
    X->n = 0;
 808c22a:	9302      	str	r3, [sp, #8]
    X->p = NULL;
 808c22c:	9303      	str	r3, [sp, #12]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c22e:	9510      	str	r5, [sp, #64]	; 0x40
    X->n = 0;
 808c230:	9311      	str	r3, [sp, #68]	; 0x44
    X->p = NULL;
 808c232:	9312      	str	r3, [sp, #72]	; 0x48
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c234:	9513      	str	r5, [sp, #76]	; 0x4c
    X->n = 0;
 808c236:	9314      	str	r3, [sp, #80]	; 0x50
    X->p = NULL;
 808c238:	9315      	str	r3, [sp, #84]	; 0x54
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c23a:	9516      	str	r5, [sp, #88]	; 0x58
    X->n = 0;
 808c23c:	9317      	str	r3, [sp, #92]	; 0x5c
    X->p = NULL;
 808c23e:	9318      	str	r3, [sp, #96]	; 0x60
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808c240:	9519      	str	r5, [sp, #100]	; 0x64
    X->n = 0;
 808c242:	931a      	str	r3, [sp, #104]	; 0x68
    X->p = NULL;
 808c244:	931b      	str	r3, [sp, #108]	; 0x6c

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 808c246:	f7ff ff29 	bl	808c09c <mbedtls_mpi_gcd>
 808c24a:	4604      	mov	r4, r0
 808c24c:	2800      	cmp	r0, #0
 808c24e:	f040 8109 	bne.w	808c464 <mbedtls_mpi_inv_mod+0x278>

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
 808c252:	4629      	mov	r1, r5
 808c254:	a801      	add	r0, sp, #4
 808c256:	f7ff f975 	bl	808b544 <mbedtls_mpi_cmp_int>
 808c25a:	2800      	cmp	r0, #0
 808c25c:	f040 8100 	bne.w	808c460 <mbedtls_mpi_inv_mod+0x274>
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
 808c260:	4632      	mov	r2, r6
 808c262:	4639      	mov	r1, r7
 808c264:	a804      	add	r0, sp, #16
 808c266:	f7ff fcc8 	bl	808bbfa <mbedtls_mpi_mod_mpi>
 808c26a:	4604      	mov	r4, r0
 808c26c:	2800      	cmp	r0, #0
 808c26e:	f040 80f9 	bne.w	808c464 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
 808c272:	a904      	add	r1, sp, #16
 808c274:	a807      	add	r0, sp, #28
 808c276:	f7fe ff04 	bl	808b082 <mbedtls_mpi_copy>
 808c27a:	4604      	mov	r4, r0
 808c27c:	2800      	cmp	r0, #0
 808c27e:	f040 80f1 	bne.w	808c464 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
 808c282:	4631      	mov	r1, r6
 808c284:	a810      	add	r0, sp, #64	; 0x40
 808c286:	f7fe fefc 	bl	808b082 <mbedtls_mpi_copy>
 808c28a:	4604      	mov	r4, r0
 808c28c:	2800      	cmp	r0, #0
 808c28e:	f040 80e9 	bne.w	808c464 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
 808c292:	4631      	mov	r1, r6
 808c294:	a813      	add	r0, sp, #76	; 0x4c
 808c296:	f7fe fef4 	bl	808b082 <mbedtls_mpi_copy>
 808c29a:	4604      	mov	r4, r0
 808c29c:	2800      	cmp	r0, #0
 808c29e:	f040 80e1 	bne.w	808c464 <mbedtls_mpi_inv_mod+0x278>

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
 808c2a2:	4629      	mov	r1, r5
 808c2a4:	a80a      	add	r0, sp, #40	; 0x28
 808c2a6:	f7fe ff16 	bl	808b0d6 <mbedtls_mpi_lset>
 808c2aa:	4604      	mov	r4, r0
 808c2ac:	2800      	cmp	r0, #0
 808c2ae:	f040 80d9 	bne.w	808c464 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
 808c2b2:	4601      	mov	r1, r0
 808c2b4:	a80d      	add	r0, sp, #52	; 0x34
 808c2b6:	f7fe ff0e 	bl	808b0d6 <mbedtls_mpi_lset>
 808c2ba:	4604      	mov	r4, r0
 808c2bc:	2800      	cmp	r0, #0
 808c2be:	f040 80d1 	bne.w	808c464 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
 808c2c2:	4601      	mov	r1, r0
 808c2c4:	a816      	add	r0, sp, #88	; 0x58
 808c2c6:	f7fe ff06 	bl	808b0d6 <mbedtls_mpi_lset>
 808c2ca:	4604      	mov	r4, r0
 808c2cc:	2800      	cmp	r0, #0
 808c2ce:	f040 80c9 	bne.w	808c464 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
 808c2d2:	4629      	mov	r1, r5
 808c2d4:	a819      	add	r0, sp, #100	; 0x64
 808c2d6:	f7fe fefe 	bl	808b0d6 <mbedtls_mpi_lset>
 808c2da:	4604      	mov	r4, r0
 808c2dc:	2800      	cmp	r0, #0
 808c2de:	f040 80c1 	bne.w	808c464 <mbedtls_mpi_inv_mod+0x278>

    do
    {
        while( ( TU.p[0] & 1 ) == 0 )
 808c2e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808c2e4:	681b      	ldr	r3, [r3, #0]
 808c2e6:	07dd      	lsls	r5, r3, #31
 808c2e8:	d44c      	bmi.n	808c384 <mbedtls_mpi_inv_mod+0x198>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
 808c2ea:	2101      	movs	r1, #1
 808c2ec:	a807      	add	r0, sp, #28
 808c2ee:	f7ff f805 	bl	808b2fc <mbedtls_mpi_shift_r>
 808c2f2:	4604      	mov	r4, r0
 808c2f4:	2800      	cmp	r0, #0
 808c2f6:	f040 80b5 	bne.w	808c464 <mbedtls_mpi_inv_mod+0x278>

            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
 808c2fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808c2fc:	681b      	ldr	r3, [r3, #0]
 808c2fe:	07dc      	lsls	r4, r3, #31
 808c300:	d410      	bmi.n	808c324 <mbedtls_mpi_inv_mod+0x138>
 808c302:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 808c304:	681b      	ldr	r3, [r3, #0]
 808c306:	07d8      	lsls	r0, r3, #31
 808c308:	d40c      	bmi.n	808c324 <mbedtls_mpi_inv_mod+0x138>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
 808c30a:	2101      	movs	r1, #1
 808c30c:	a80a      	add	r0, sp, #40	; 0x28
 808c30e:	f7fe fff5 	bl	808b2fc <mbedtls_mpi_shift_r>
 808c312:	4604      	mov	r4, r0
 808c314:	2800      	cmp	r0, #0
 808c316:	f040 80a5 	bne.w	808c464 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 808c31a:	2101      	movs	r1, #1
 808c31c:	a80d      	add	r0, sp, #52	; 0x34
 808c31e:	f7fe ffed 	bl	808b2fc <mbedtls_mpi_shift_r>
 808c322:	e7da      	b.n	808c2da <mbedtls_mpi_inv_mod+0xee>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );

            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
 808c324:	a90a      	add	r1, sp, #40	; 0x28
 808c326:	aa10      	add	r2, sp, #64	; 0x40
 808c328:	4608      	mov	r0, r1
 808c32a:	f7ff f9bb 	bl	808b6a4 <mbedtls_mpi_add_mpi>
 808c32e:	4604      	mov	r4, r0
 808c330:	2800      	cmp	r0, #0
 808c332:	f040 8097 	bne.w	808c464 <mbedtls_mpi_inv_mod+0x278>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
 808c336:	a90d      	add	r1, sp, #52	; 0x34
 808c338:	aa04      	add	r2, sp, #16
 808c33a:	4608      	mov	r0, r1
 808c33c:	f7ff f9d3 	bl	808b6e6 <mbedtls_mpi_sub_mpi>
 808c340:	4604      	mov	r4, r0
 808c342:	2800      	cmp	r0, #0
 808c344:	d0e1      	beq.n	808c30a <mbedtls_mpi_inv_mod+0x11e>
 808c346:	e08d      	b.n	808c464 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
        }

        while( ( TV.p[0] & 1 ) == 0 )
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
 808c348:	2101      	movs	r1, #1
 808c34a:	a813      	add	r0, sp, #76	; 0x4c
 808c34c:	f7fe ffd6 	bl	808b2fc <mbedtls_mpi_shift_r>
 808c350:	4604      	mov	r4, r0
 808c352:	2800      	cmp	r0, #0
 808c354:	f040 8086 	bne.w	808c464 <mbedtls_mpi_inv_mod+0x278>

            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
 808c358:	9b18      	ldr	r3, [sp, #96]	; 0x60
 808c35a:	681b      	ldr	r3, [r3, #0]
 808c35c:	07da      	lsls	r2, r3, #31
 808c35e:	d416      	bmi.n	808c38e <mbedtls_mpi_inv_mod+0x1a2>
 808c360:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808c362:	681b      	ldr	r3, [r3, #0]
 808c364:	07db      	lsls	r3, r3, #31
 808c366:	d412      	bmi.n	808c38e <mbedtls_mpi_inv_mod+0x1a2>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
 808c368:	2101      	movs	r1, #1
 808c36a:	a816      	add	r0, sp, #88	; 0x58
 808c36c:	f7fe ffc6 	bl	808b2fc <mbedtls_mpi_shift_r>
 808c370:	4604      	mov	r4, r0
 808c372:	2800      	cmp	r0, #0
 808c374:	d176      	bne.n	808c464 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
 808c376:	2101      	movs	r1, #1
 808c378:	a819      	add	r0, sp, #100	; 0x64
 808c37a:	f7fe ffbf 	bl	808b2fc <mbedtls_mpi_shift_r>
 808c37e:	4604      	mov	r4, r0
 808c380:	2800      	cmp	r0, #0
 808c382:	d16f      	bne.n	808c464 <mbedtls_mpi_inv_mod+0x278>

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
        }

        while( ( TV.p[0] & 1 ) == 0 )
 808c384:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808c386:	681b      	ldr	r3, [r3, #0]
 808c388:	07d9      	lsls	r1, r3, #31
 808c38a:	d411      	bmi.n	808c3b0 <mbedtls_mpi_inv_mod+0x1c4>
 808c38c:	e7dc      	b.n	808c348 <mbedtls_mpi_inv_mod+0x15c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );

            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
 808c38e:	a916      	add	r1, sp, #88	; 0x58
 808c390:	aa10      	add	r2, sp, #64	; 0x40
 808c392:	4608      	mov	r0, r1
 808c394:	f7ff f986 	bl	808b6a4 <mbedtls_mpi_add_mpi>
 808c398:	4604      	mov	r4, r0
 808c39a:	2800      	cmp	r0, #0
 808c39c:	d162      	bne.n	808c464 <mbedtls_mpi_inv_mod+0x278>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
 808c39e:	a919      	add	r1, sp, #100	; 0x64
 808c3a0:	aa04      	add	r2, sp, #16
 808c3a2:	4608      	mov	r0, r1
 808c3a4:	f7ff f99f 	bl	808b6e6 <mbedtls_mpi_sub_mpi>
 808c3a8:	4604      	mov	r4, r0
 808c3aa:	2800      	cmp	r0, #0
 808c3ac:	d0dc      	beq.n	808c368 <mbedtls_mpi_inv_mod+0x17c>
 808c3ae:	e059      	b.n	808c464 <mbedtls_mpi_inv_mod+0x278>

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
        }

        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
 808c3b0:	a913      	add	r1, sp, #76	; 0x4c
 808c3b2:	a807      	add	r0, sp, #28
 808c3b4:	f7ff f881 	bl	808b4ba <mbedtls_mpi_cmp_mpi>
 808c3b8:	2800      	cmp	r0, #0
 808c3ba:	db1f      	blt.n	808c3fc <mbedtls_mpi_inv_mod+0x210>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
 808c3bc:	a907      	add	r1, sp, #28
 808c3be:	aa13      	add	r2, sp, #76	; 0x4c
 808c3c0:	4608      	mov	r0, r1
 808c3c2:	f7ff f990 	bl	808b6e6 <mbedtls_mpi_sub_mpi>
 808c3c6:	4604      	mov	r4, r0
 808c3c8:	2800      	cmp	r0, #0
 808c3ca:	d14b      	bne.n	808c464 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
 808c3cc:	a90a      	add	r1, sp, #40	; 0x28
 808c3ce:	aa16      	add	r2, sp, #88	; 0x58
 808c3d0:	4608      	mov	r0, r1
 808c3d2:	f7ff f988 	bl	808b6e6 <mbedtls_mpi_sub_mpi>
 808c3d6:	4604      	mov	r4, r0
 808c3d8:	2800      	cmp	r0, #0
 808c3da:	d143      	bne.n	808c464 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
 808c3dc:	aa19      	add	r2, sp, #100	; 0x64
 808c3de:	a90d      	add	r1, sp, #52	; 0x34
 808c3e0:	4608      	mov	r0, r1
 808c3e2:	f7ff f980 	bl	808b6e6 <mbedtls_mpi_sub_mpi>
 808c3e6:	4604      	mov	r4, r0
 808c3e8:	2800      	cmp	r0, #0
 808c3ea:	d13b      	bne.n	808c464 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
 808c3ec:	2100      	movs	r1, #0
 808c3ee:	a807      	add	r0, sp, #28
 808c3f0:	f7ff f8a8 	bl	808b544 <mbedtls_mpi_cmp_int>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );

    do
 808c3f4:	2800      	cmp	r0, #0
 808c3f6:	f47f af74 	bne.w	808c2e2 <mbedtls_mpi_inv_mod+0xf6>
 808c3fa:	e017      	b.n	808c42c <mbedtls_mpi_inv_mod+0x240>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
 808c3fc:	a913      	add	r1, sp, #76	; 0x4c
 808c3fe:	aa07      	add	r2, sp, #28
 808c400:	4608      	mov	r0, r1
 808c402:	f7ff f970 	bl	808b6e6 <mbedtls_mpi_sub_mpi>
 808c406:	4604      	mov	r4, r0
 808c408:	bb60      	cbnz	r0, 808c464 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
 808c40a:	a916      	add	r1, sp, #88	; 0x58
 808c40c:	aa0a      	add	r2, sp, #40	; 0x28
 808c40e:	4608      	mov	r0, r1
 808c410:	f7ff f969 	bl	808b6e6 <mbedtls_mpi_sub_mpi>
 808c414:	4604      	mov	r4, r0
 808c416:	bb28      	cbnz	r0, 808c464 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
 808c418:	aa0d      	add	r2, sp, #52	; 0x34
 808c41a:	a919      	add	r1, sp, #100	; 0x64
 808c41c:	e7e0      	b.n	808c3e0 <mbedtls_mpi_inv_mod+0x1f4>
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
 808c41e:	a916      	add	r1, sp, #88	; 0x58
 808c420:	4632      	mov	r2, r6
 808c422:	4608      	mov	r0, r1
 808c424:	f7ff f93e 	bl	808b6a4 <mbedtls_mpi_add_mpi>
 808c428:	4604      	mov	r4, r0
 808c42a:	b9d8      	cbnz	r0, 808c464 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 808c42c:	2100      	movs	r1, #0
 808c42e:	a816      	add	r0, sp, #88	; 0x58
 808c430:	f7ff f888 	bl	808b544 <mbedtls_mpi_cmp_int>
 808c434:	2800      	cmp	r0, #0
 808c436:	dbf2      	blt.n	808c41e <mbedtls_mpi_inv_mod+0x232>
 808c438:	e006      	b.n	808c448 <mbedtls_mpi_inv_mod+0x25c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );

    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
 808c43a:	a916      	add	r1, sp, #88	; 0x58
 808c43c:	4632      	mov	r2, r6
 808c43e:	4608      	mov	r0, r1
 808c440:	f7ff f951 	bl	808b6e6 <mbedtls_mpi_sub_mpi>
 808c444:	4604      	mov	r4, r0
 808c446:	b968      	cbnz	r0, 808c464 <mbedtls_mpi_inv_mod+0x278>
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );

    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 808c448:	4631      	mov	r1, r6
 808c44a:	a816      	add	r0, sp, #88	; 0x58
 808c44c:	f7ff f835 	bl	808b4ba <mbedtls_mpi_cmp_mpi>
 808c450:	2800      	cmp	r0, #0
 808c452:	daf2      	bge.n	808c43a <mbedtls_mpi_inv_mod+0x24e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
 808c454:	a916      	add	r1, sp, #88	; 0x58
 808c456:	4640      	mov	r0, r8
 808c458:	f7fe fe13 	bl	808b082 <mbedtls_mpi_copy>
 808c45c:	4604      	mov	r4, r0
 808c45e:	e001      	b.n	808c464 <mbedtls_mpi_inv_mod+0x278>

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 808c460:	f06f 040d 	mvn.w	r4, #13

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );

cleanup:

    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
 808c464:	a804      	add	r0, sp, #16
 808c466:	f7fe fdca 	bl	808affe <mbedtls_mpi_free>
 808c46a:	a807      	add	r0, sp, #28
 808c46c:	f7fe fdc7 	bl	808affe <mbedtls_mpi_free>
 808c470:	a80a      	add	r0, sp, #40	; 0x28
 808c472:	f7fe fdc4 	bl	808affe <mbedtls_mpi_free>
 808c476:	a80d      	add	r0, sp, #52	; 0x34
 808c478:	f7fe fdc1 	bl	808affe <mbedtls_mpi_free>
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
 808c47c:	a801      	add	r0, sp, #4
 808c47e:	f7fe fdbe 	bl	808affe <mbedtls_mpi_free>
 808c482:	a810      	add	r0, sp, #64	; 0x40
 808c484:	f7fe fdbb 	bl	808affe <mbedtls_mpi_free>
 808c488:	a813      	add	r0, sp, #76	; 0x4c
 808c48a:	f7fe fdb8 	bl	808affe <mbedtls_mpi_free>
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );
 808c48e:	a816      	add	r0, sp, #88	; 0x58
 808c490:	f7fe fdb5 	bl	808affe <mbedtls_mpi_free>
 808c494:	a819      	add	r0, sp, #100	; 0x64
 808c496:	f7fe fdb2 	bl	808affe <mbedtls_mpi_free>

    return( ret );
 808c49a:	4620      	mov	r0, r4
 808c49c:	e001      	b.n	808c4a2 <mbedtls_mpi_inv_mod+0x2b6>
{
    int ret;
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 808c49e:	f06f 0003 	mvn.w	r0, #3
    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );

    return( ret );
}
 808c4a2:	b01c      	add	sp, #112	; 0x70
 808c4a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808c4a8 <mbedtls_pk_init>:
/*
 * Initialise a mbedtls_pk_context
 */
void mbedtls_pk_init( mbedtls_pk_context *ctx )
{
    if( ctx == NULL )
 808c4a8:	b110      	cbz	r0, 808c4b0 <mbedtls_pk_init+0x8>
        return;

    ctx->pk_info = NULL;
 808c4aa:	2300      	movs	r3, #0
 808c4ac:	6003      	str	r3, [r0, #0]
    ctx->pk_ctx = NULL;
 808c4ae:	6043      	str	r3, [r0, #4]
 808c4b0:	4770      	bx	lr

0808c4b2 <mbedtls_pk_free>:

/*
 * Free (the components of) a mbedtls_pk_context
 */
void mbedtls_pk_free( mbedtls_pk_context *ctx )
{
 808c4b2:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->pk_info == NULL )
 808c4b4:	4604      	mov	r4, r0
 808c4b6:	b160      	cbz	r0, 808c4d2 <mbedtls_pk_free+0x20>
 808c4b8:	6803      	ldr	r3, [r0, #0]
 808c4ba:	b153      	cbz	r3, 808c4d2 <mbedtls_pk_free+0x20>
        return;

    ctx->pk_info->ctx_free_func( ctx->pk_ctx );
 808c4bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808c4be:	6840      	ldr	r0, [r0, #4]
 808c4c0:	4798      	blx	r3
 808c4c2:	f104 0208 	add.w	r2, r4, #8
#include <limits.h>
#include <stdint.h>

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808c4c6:	2300      	movs	r3, #0
 808c4c8:	4294      	cmp	r4, r2
 808c4ca:	d002      	beq.n	808c4d2 <mbedtls_pk_free+0x20>
 808c4cc:	7023      	strb	r3, [r4, #0]
 808c4ce:	3401      	adds	r4, #1
 808c4d0:	e7fa      	b.n	808c4c8 <mbedtls_pk_free+0x16>
 808c4d2:	bd10      	pop	{r4, pc}

0808c4d4 <mbedtls_pk_info_from_type>:
/*
 * Get pk_info structure from type
 */
const mbedtls_pk_info_t * mbedtls_pk_info_from_type( mbedtls_pk_type_t pk_type )
{
    switch( pk_type ) {
 808c4d4:	2801      	cmp	r0, #1
#endif
        /* MBEDTLS_PK_RSA_ALT omitted on purpose */
        default:
            return( NULL );
    }
}
 808c4d6:	4802      	ldr	r0, [pc, #8]	; (808c4e0 <mbedtls_pk_info_from_type+0xc>)
 808c4d8:	bf18      	it	ne
 808c4da:	2000      	movne	r0, #0
 808c4dc:	4770      	bx	lr
 808c4de:	bf00      	nop
 808c4e0:	08093630 	.word	0x08093630

0808c4e4 <mbedtls_pk_setup>:

/*
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
 808c4e4:	b570      	push	{r4, r5, r6, lr}
 808c4e6:	460e      	mov	r6, r1
    if( ctx == NULL || info == NULL || ctx->pk_info != NULL )
 808c4e8:	4605      	mov	r5, r0
 808c4ea:	b148      	cbz	r0, 808c500 <mbedtls_pk_setup+0x1c>
 808c4ec:	b141      	cbz	r1, 808c500 <mbedtls_pk_setup+0x1c>
 808c4ee:	6804      	ldr	r4, [r0, #0]
 808c4f0:	b934      	cbnz	r4, 808c500 <mbedtls_pk_setup+0x1c>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
 808c4f2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 808c4f4:	4798      	blx	r3
 808c4f6:	6068      	str	r0, [r5, #4]
 808c4f8:	b120      	cbz	r0, 808c504 <mbedtls_pk_setup+0x20>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );

    ctx->pk_info = info;
 808c4fa:	602e      	str	r6, [r5, #0]

    return( 0 );
 808c4fc:	4620      	mov	r0, r4
 808c4fe:	bd70      	pop	{r4, r5, r6, pc}
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
    if( ctx == NULL || info == NULL || ctx->pk_info != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 808c500:	4801      	ldr	r0, [pc, #4]	; (808c508 <mbedtls_pk_setup+0x24>)
 808c502:	bd70      	pop	{r4, r5, r6, pc}

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );
 808c504:	4801      	ldr	r0, [pc, #4]	; (808c50c <mbedtls_pk_setup+0x28>)

    ctx->pk_info = info;

    return( 0 );
}
 808c506:	bd70      	pop	{r4, r5, r6, pc}
 808c508:	ffffc180 	.word	0xffffc180
 808c50c:	ffffc080 	.word	0xffffc080

0808c510 <mbedtls_pk_can_do>:
 * Tell if a PK can do the operations of the given type
 */
int mbedtls_pk_can_do( const mbedtls_pk_context *ctx, mbedtls_pk_type_t type )
{
    /* null or NONE context can't do anything */
    if( ctx == NULL || ctx->pk_info == NULL )
 808c510:	b120      	cbz	r0, 808c51c <mbedtls_pk_can_do+0xc>
 808c512:	6803      	ldr	r3, [r0, #0]
 808c514:	b113      	cbz	r3, 808c51c <mbedtls_pk_can_do+0xc>
        return( 0 );

    return( ctx->pk_info->can_do( type ) );
 808c516:	68db      	ldr	r3, [r3, #12]
 808c518:	4608      	mov	r0, r1
 808c51a:	4718      	bx	r3
}
 808c51c:	2000      	movs	r0, #0
 808c51e:	4770      	bx	lr

0808c520 <mbedtls_pk_verify>:
 * Verify a signature
 */
int mbedtls_pk_verify( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len )
{
 808c520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808c524:	f8dd 8020 	ldr.w	r8, [sp, #32]
 808c528:	460e      	mov	r6, r1
 808c52a:	4617      	mov	r7, r2
 808c52c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( ctx == NULL || ctx->pk_info == NULL ||
 808c530:	4604      	mov	r4, r0
 808c532:	b910      	cbnz	r0, 808c53a <mbedtls_pk_verify+0x1a>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 808c534:	480f      	ldr	r0, [pc, #60]	; (808c574 <mbedtls_pk_verify+0x54>)
 808c536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 */
int mbedtls_pk_verify( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len )
{
    if( ctx == NULL || ctx->pk_info == NULL ||
 808c53a:	6802      	ldr	r2, [r0, #0]
 808c53c:	2a00      	cmp	r2, #0
 808c53e:	d0f9      	beq.n	808c534 <mbedtls_pk_verify+0x14>
 */
static inline int pk_hashlen_helper( mbedtls_md_type_t md_alg, size_t *hash_len )
{
    const mbedtls_md_info_t *md_info;

    if( *hash_len != 0 )
 808c540:	b93b      	cbnz	r3, 808c552 <mbedtls_pk_verify+0x32>
        return( 0 );

    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 808c542:	4608      	mov	r0, r1
 808c544:	f7fb f8b0 	bl	80876a8 <mbedtls_md_info_from_type>
 808c548:	2800      	cmp	r0, #0
 808c54a:	d0f3      	beq.n	808c534 <mbedtls_pk_verify+0x14>
        return( -1 );

    *hash_len = mbedtls_md_get_size( md_info );
 808c54c:	f7fb f9f0 	bl	8087930 <mbedtls_md_get_size>
 808c550:	4603      	mov	r3, r0
{
    if( ctx == NULL || ctx->pk_info == NULL ||
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->verify_func == NULL )
 808c552:	6822      	ldr	r2, [r4, #0]
 808c554:	6915      	ldr	r5, [r2, #16]
 808c556:	b155      	cbz	r5, 808c56e <mbedtls_pk_verify+0x4e>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                       sig, sig_len ) );
 808c558:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 808c55c:	f8cd 8020 	str.w	r8, [sp, #32]
 808c560:	463a      	mov	r2, r7
 808c562:	4631      	mov	r1, r6
 808c564:	6860      	ldr	r0, [r4, #4]
 808c566:	46ac      	mov	ip, r5
}
 808c568:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    if( ctx->pk_info->verify_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                       sig, sig_len ) );
 808c56c:	4760      	bx	ip
    if( ctx == NULL || ctx->pk_info == NULL ||
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->verify_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 808c56e:	4802      	ldr	r0, [pc, #8]	; (808c578 <mbedtls_pk_verify+0x58>)
 808c570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808c574:	ffffc180 	.word	0xffffc180
 808c578:	ffffc100 	.word	0xffffc100

0808c57c <mbedtls_pk_sign>:
 */
int mbedtls_pk_sign( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 808c57c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808c580:	af08      	add	r7, sp, #32
 808c582:	460d      	mov	r5, r1
 808c584:	e897 0780 	ldmia.w	r7, {r7, r8, r9, sl}
 808c588:	4616      	mov	r6, r2
    if( ctx == NULL || ctx->pk_info == NULL ||
 808c58a:	4604      	mov	r4, r0
 808c58c:	b910      	cbnz	r0, 808c594 <mbedtls_pk_sign+0x18>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 808c58e:	4813      	ldr	r0, [pc, #76]	; (808c5dc <mbedtls_pk_sign+0x60>)
 808c590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
int mbedtls_pk_sign( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    if( ctx == NULL || ctx->pk_info == NULL ||
 808c594:	6802      	ldr	r2, [r0, #0]
 808c596:	2a00      	cmp	r2, #0
 808c598:	d0f9      	beq.n	808c58e <mbedtls_pk_sign+0x12>
 */
static inline int pk_hashlen_helper( mbedtls_md_type_t md_alg, size_t *hash_len )
{
    const mbedtls_md_info_t *md_info;

    if( *hash_len != 0 )
 808c59a:	b93b      	cbnz	r3, 808c5ac <mbedtls_pk_sign+0x30>
        return( 0 );

    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 808c59c:	4608      	mov	r0, r1
 808c59e:	f7fb f883 	bl	80876a8 <mbedtls_md_info_from_type>
 808c5a2:	2800      	cmp	r0, #0
 808c5a4:	d0f3      	beq.n	808c58e <mbedtls_pk_sign+0x12>
        return( -1 );

    *hash_len = mbedtls_md_get_size( md_info );
 808c5a6:	f7fb f9c3 	bl	8087930 <mbedtls_md_get_size>
 808c5aa:	4603      	mov	r3, r0
{
    if( ctx == NULL || ctx->pk_info == NULL ||
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->sign_func == NULL )
 808c5ac:	6822      	ldr	r2, [r4, #0]
 808c5ae:	f8d2 e014 	ldr.w	lr, [r2, #20]
 808c5b2:	f1be 0f00 	cmp.w	lr, #0
 808c5b6:	d00d      	beq.n	808c5d4 <mbedtls_pk_sign+0x58>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                     sig, sig_len, f_rng, p_rng ) );
 808c5b8:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 808c5bc:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 808c5c0:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 808c5c4:	9708      	str	r7, [sp, #32]
 808c5c6:	4632      	mov	r2, r6
 808c5c8:	4629      	mov	r1, r5
 808c5ca:	6860      	ldr	r0, [r4, #4]
 808c5cc:	46f4      	mov	ip, lr
}
 808c5ce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    if( ctx->pk_info->sign_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                     sig, sig_len, f_rng, p_rng ) );
 808c5d2:	4760      	bx	ip
    if( ctx == NULL || ctx->pk_info == NULL ||
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->sign_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 808c5d4:	4802      	ldr	r0, [pc, #8]	; (808c5e0 <mbedtls_pk_sign+0x64>)
 808c5d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808c5da:	bf00      	nop
 808c5dc:	ffffc180 	.word	0xffffc180
 808c5e0:	ffffc100 	.word	0xffffc100

0808c5e4 <mbedtls_pk_encrypt>:
 */
int mbedtls_pk_encrypt( mbedtls_pk_context *ctx,
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 808c5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 808c5e6:	f8dd e020 	ldr.w	lr, [sp, #32]
    if( ctx == NULL || ctx->pk_info == NULL )
 808c5ea:	b140      	cbz	r0, 808c5fe <mbedtls_pk_encrypt+0x1a>
 808c5ec:	6804      	ldr	r4, [r0, #0]
 808c5ee:	b134      	cbz	r4, 808c5fe <mbedtls_pk_encrypt+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->encrypt_func == NULL )
 808c5f0:	69e4      	ldr	r4, [r4, #28]
 808c5f2:	b134      	cbz	r4, 808c602 <mbedtls_pk_encrypt+0x1e>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                output, olen, osize, f_rng, p_rng ) );
 808c5f4:	46a4      	mov	ip, r4
}
 808c5f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

    if( ctx->pk_info->encrypt_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                output, olen, osize, f_rng, p_rng ) );
 808c5fa:	6840      	ldr	r0, [r0, #4]
 808c5fc:	4760      	bx	ip
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    if( ctx == NULL || ctx->pk_info == NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 808c5fe:	4802      	ldr	r0, [pc, #8]	; (808c608 <mbedtls_pk_encrypt+0x24>)
 808c600:	bdf0      	pop	{r4, r5, r6, r7, pc}

    if( ctx->pk_info->encrypt_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 808c602:	4802      	ldr	r0, [pc, #8]	; (808c60c <mbedtls_pk_encrypt+0x28>)

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                output, olen, osize, f_rng, p_rng ) );
}
 808c604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808c606:	bf00      	nop
 808c608:	ffffc180 	.word	0xffffc180
 808c60c:	ffffc100 	.word	0xffffc100

0808c610 <mbedtls_pk_get_bitlen>:
/*
 * Get key size in bits
 */
size_t mbedtls_pk_get_bitlen( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 808c610:	b120      	cbz	r0, 808c61c <mbedtls_pk_get_bitlen+0xc>
 808c612:	6803      	ldr	r3, [r0, #0]
 808c614:	b113      	cbz	r3, 808c61c <mbedtls_pk_get_bitlen+0xc>
        return( 0 );

    return( ctx->pk_info->get_bitlen( ctx->pk_ctx ) );
 808c616:	689b      	ldr	r3, [r3, #8]
 808c618:	6840      	ldr	r0, [r0, #4]
 808c61a:	4718      	bx	r3
}
 808c61c:	2000      	movs	r0, #0
 808c61e:	4770      	bx	lr

0808c620 <mbedtls_pk_verify_ext>:
 */
int mbedtls_pk_verify_ext( mbedtls_pk_type_t type, const void *options,
                   mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
 808c620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808c624:	b087      	sub	sp, #28
 808c626:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 808c62a:	4683      	mov	fp, r0
 808c62c:	e898 0700 	ldmia.w	r8, {r8, r9, sl}
 808c630:	460d      	mov	r5, r1
 808c632:	461f      	mov	r7, r3
 808c634:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    if( ctx == NULL || ctx->pk_info == NULL )
 808c636:	4614      	mov	r4, r2
 808c638:	b90a      	cbnz	r2, 808c63e <mbedtls_pk_verify_ext+0x1e>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 808c63a:	4823      	ldr	r0, [pc, #140]	; (808c6c8 <mbedtls_pk_verify_ext+0xa8>)
 808c63c:	e040      	b.n	808c6c0 <mbedtls_pk_verify_ext+0xa0>
int mbedtls_pk_verify_ext( mbedtls_pk_type_t type, const void *options,
                   mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 808c63e:	6813      	ldr	r3, [r2, #0]
 808c640:	2b00      	cmp	r3, #0
 808c642:	d0fa      	beq.n	808c63a <mbedtls_pk_verify_ext+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ! mbedtls_pk_can_do( ctx, type ) )
 808c644:	4601      	mov	r1, r0
 808c646:	4610      	mov	r0, r2
 808c648:	f7ff ff62 	bl	808c510 <mbedtls_pk_can_do>
 808c64c:	2800      	cmp	r0, #0
 808c64e:	d034      	beq.n	808c6ba <mbedtls_pk_verify_ext+0x9a>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    if( type == MBEDTLS_PK_RSASSA_PSS )
 808c650:	f1bb 0f06 	cmp.w	fp, #6
 808c654:	d123      	bne.n	808c69e <mbedtls_pk_verify_ext+0x7e>
#if SIZE_MAX > UINT_MAX
        if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

        if( options == NULL )
 808c656:	2d00      	cmp	r5, #0
 808c658:	d0ef      	beq.n	808c63a <mbedtls_pk_verify_ext+0x1a>
 *
 * \return          Key length in bytes, or 0 on error
 */
static inline size_t mbedtls_pk_get_len( const mbedtls_pk_context *ctx )
{
    return( ( mbedtls_pk_get_bitlen( ctx ) + 7 ) / 8 );
 808c65a:	4620      	mov	r0, r4
 808c65c:	f7ff ffd8 	bl	808c610 <mbedtls_pk_get_bitlen>
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

        pss_opts = (const mbedtls_pk_rsassa_pss_options *) options;

        if( sig_len < mbedtls_pk_get_len( ctx ) )
 808c660:	3007      	adds	r0, #7
 808c662:	ebb6 0fd0 	cmp.w	r6, r0, lsr #3
 808c666:	d32a      	bcc.n	808c6be <mbedtls_pk_verify_ext+0x9e>
        ret = mbedtls_rsa_rsassa_pss_verify_ext( mbedtls_pk_rsa( *ctx ),
                NULL, NULL, MBEDTLS_RSA_PUBLIC,
                md_alg, (unsigned int) hash_len, hash,
                pss_opts->mgf1_hash_id,
                pss_opts->expected_salt_len,
                sig );
 808c668:	686b      	ldr	r3, [r5, #4]
 808c66a:	e88d 0280 	stmia.w	sp, {r7, r9}
 808c66e:	9304      	str	r3, [sp, #16]
 808c670:	782b      	ldrb	r3, [r5, #0]
 808c672:	f8cd a014 	str.w	sl, [sp, #20]
 808c676:	9303      	str	r3, [sp, #12]
 808c678:	f8cd 8008 	str.w	r8, [sp, #8]
 808c67c:	2300      	movs	r3, #0
 808c67e:	461a      	mov	r2, r3
 808c680:	4619      	mov	r1, r3
 808c682:	6860      	ldr	r0, [r4, #4]
 808c684:	f7f8 f8dc 	bl	8084840 <mbedtls_rsa_rsassa_pss_verify_ext>
        if( ret != 0 )
 808c688:	b9d0      	cbnz	r0, 808c6c0 <mbedtls_pk_verify_ext+0xa0>
 808c68a:	4620      	mov	r0, r4
 808c68c:	f7ff ffc0 	bl	808c610 <mbedtls_pk_get_bitlen>
            return( ret );

        if( sig_len > mbedtls_pk_get_len( ctx ) )
 808c690:	3007      	adds	r0, #7
            return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

        return( 0 );
 808c692:	ebb6 0fd0 	cmp.w	r6, r0, lsr #3
 808c696:	480d      	ldr	r0, [pc, #52]	; (808c6cc <mbedtls_pk_verify_ext+0xac>)
 808c698:	bf98      	it	ls
 808c69a:	2000      	movls	r0, #0
 808c69c:	e010      	b.n	808c6c0 <mbedtls_pk_verify_ext+0xa0>
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_RSA_C && MBEDTLS_PKCS1_V21 */
    }

    /* General case: no options */
    if( options != NULL )
 808c69e:	2d00      	cmp	r5, #0
 808c6a0:	d1cb      	bne.n	808c63a <mbedtls_pk_verify_ext+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
 808c6a2:	464b      	mov	r3, r9
 808c6a4:	4642      	mov	r2, r8
 808c6a6:	4639      	mov	r1, r7
 808c6a8:	4620      	mov	r0, r4
 808c6aa:	9611      	str	r6, [sp, #68]	; 0x44
 808c6ac:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
}
 808c6b0:	b007      	add	sp, #28
 808c6b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* General case: no options */
    if( options != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
 808c6b6:	f7ff bf33 	b.w	808c520 <mbedtls_pk_verify>
{
    if( ctx == NULL || ctx->pk_info == NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ! mbedtls_pk_can_do( ctx, type ) )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 808c6ba:	4805      	ldr	r0, [pc, #20]	; (808c6d0 <mbedtls_pk_verify_ext+0xb0>)
 808c6bc:	e000      	b.n	808c6c0 <mbedtls_pk_verify_ext+0xa0>
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

        pss_opts = (const mbedtls_pk_rsassa_pss_options *) options;

        if( sig_len < mbedtls_pk_get_len( ctx ) )
            return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 808c6be:	4805      	ldr	r0, [pc, #20]	; (808c6d4 <mbedtls_pk_verify_ext+0xb4>)
    /* General case: no options */
    if( options != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
}
 808c6c0:	b007      	add	sp, #28
 808c6c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808c6c6:	bf00      	nop
 808c6c8:	ffffc180 	.word	0xffffc180
 808c6cc:	ffffc700 	.word	0xffffc700
 808c6d0:	ffffc100 	.word	0xffffc100
 808c6d4:	ffffbc80 	.word	0xffffbc80

0808c6d8 <mbedtls_pk_get_name>:
/*
 * Access the PK type name
 */
const char *mbedtls_pk_get_name( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 808c6d8:	b118      	cbz	r0, 808c6e2 <mbedtls_pk_get_name+0xa>
 808c6da:	6803      	ldr	r3, [r0, #0]
 808c6dc:	b10b      	cbz	r3, 808c6e2 <mbedtls_pk_get_name+0xa>
        return( "invalid PK" );

    return( ctx->pk_info->name );
 808c6de:	6858      	ldr	r0, [r3, #4]
 808c6e0:	4770      	bx	lr
 * Access the PK type name
 */
const char *mbedtls_pk_get_name( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
        return( "invalid PK" );
 808c6e2:	4801      	ldr	r0, [pc, #4]	; (808c6e8 <mbedtls_pk_get_name+0x10>)

    return( ctx->pk_info->name );
}
 808c6e4:	4770      	bx	lr
 808c6e6:	bf00      	nop
 808c6e8:	0809451c 	.word	0x0809451c

0808c6ec <mbedtls_pk_get_type>:
/*
 * Access the PK type
 */
mbedtls_pk_type_t mbedtls_pk_get_type( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 808c6ec:	b110      	cbz	r0, 808c6f4 <mbedtls_pk_get_type+0x8>
 808c6ee:	6800      	ldr	r0, [r0, #0]
 808c6f0:	b100      	cbz	r0, 808c6f4 <mbedtls_pk_get_type+0x8>
        return( MBEDTLS_PK_NONE );

    return( ctx->pk_info->type );
 808c6f2:	7800      	ldrb	r0, [r0, #0]
}
 808c6f4:	4770      	bx	lr
	...

0808c6f8 <_ZL14aes_gen_tablesv>:
#define MUL(x,y) ( ( x && y ) ? pow[(log[x]+log[y]) % 255] : 0 )

static int aes_init_done = 0;

static void aes_gen_tables( void )
{
 808c6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808c6fc:	f6ad 0d14 	subw	sp, sp, #2068	; 0x814
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 808c700:	2301      	movs	r3, #1
 808c702:	2200      	movs	r2, #0
    {
        pow[i] = x;
        log[x] = i;
 808c704:	f50d 6082 	add.w	r0, sp, #1040	; 0x410
    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
    {
        pow[i] = x;
 808c708:	a904      	add	r1, sp, #16
 808c70a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
 808c70e:	f013 0180 	ands.w	r1, r3, #128	; 0x80
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
    {
        pow[i] = x;
        log[x] = i;
 808c712:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        x = ( x ^ XTIME( x ) ) & 0xFF;
 808c716:	bf18      	it	ne
 808c718:	211b      	movne	r1, #27
 808c71a:	ea83 0343 	eor.w	r3, r3, r3, lsl #1
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 808c71e:	3201      	adds	r2, #1
    {
        pow[i] = x;
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
 808c720:	404b      	eors	r3, r1
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 808c722:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    {
        pow[i] = x;
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
 808c726:	b2db      	uxtb	r3, r3
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 808c728:	d1ee      	bne.n	808c708 <_ZL14aes_gen_tablesv+0x10>
    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
    {
        RCON[i] = (uint32_t) x;
 808c72a:	4c66      	ldr	r4, [pc, #408]	; (808c8c4 <_ZL14aes_gen_tablesv+0x1cc>)
 808c72c:	2301      	movs	r3, #1
 808c72e:	2200      	movs	r2, #0
        x = XTIME( x ) & 0xFF;
 808c730:	f013 0180 	ands.w	r1, r3, #128	; 0x80
    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
    {
        RCON[i] = (uint32_t) x;
 808c734:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        x = XTIME( x ) & 0xFF;
 808c738:	bf18      	it	ne
 808c73a:	211b      	movne	r1, #27
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 808c73c:	3201      	adds	r2, #1
    {
        RCON[i] = (uint32_t) x;
        x = XTIME( x ) & 0xFF;
 808c73e:	ea81 0343 	eor.w	r3, r1, r3, lsl #1
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 808c742:	2a0a      	cmp	r2, #10
    {
        RCON[i] = (uint32_t) x;
        x = XTIME( x ) & 0xFF;
 808c744:	b2db      	uxtb	r3, r3
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 808c746:	d1f3      	bne.n	808c730 <_ZL14aes_gen_tablesv+0x38>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 808c748:	4e5f      	ldr	r6, [pc, #380]	; (808c8c8 <_ZL14aes_gen_tablesv+0x1d0>)
 808c74a:	2363      	movs	r3, #99	; 0x63
    RSb[0x63] = 0x00;
 808c74c:	4d5f      	ldr	r5, [pc, #380]	; (808c8cc <_ZL14aes_gen_tablesv+0x1d4>)
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 808c74e:	7033      	strb	r3, [r6, #0]
    RSb[0x63] = 0x00;
 808c750:	2300      	movs	r3, #0
 808c752:	f885 3063 	strb.w	r3, [r5, #99]	; 0x63

    for( i = 1; i < 256; i++ )
 808c756:	2401      	movs	r4, #1
    {
        x = pow[255 - log[i]];
 808c758:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 808c75c:	aa04      	add	r2, sp, #16
 808c75e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 808c762:	f852 e023 	ldr.w	lr, [r2, r3, lsl #2]

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 808c766:	ea4f 11ee 	mov.w	r1, lr, asr #7
 808c76a:	ea41 014e 	orr.w	r1, r1, lr, lsl #1
 808c76e:	b2c9      	uxtb	r1, r1
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 808c770:	11ca      	asrs	r2, r1, #7
 808c772:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 808c776:	b2d2      	uxtb	r2, r2
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 808c778:	11d3      	asrs	r3, r2, #7
 808c77a:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 808c77e:	b2db      	uxtb	r3, r3
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y ^ 0x63;
 808c780:	f08e 0e63 	eor.w	lr, lr, #99	; 0x63
        x = pow[255 - log[i]];

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 808c784:	11df      	asrs	r7, r3, #7
        x ^= y ^ 0x63;
 808c786:	ea8e 0101 	eor.w	r1, lr, r1
        x = pow[255 - log[i]];

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 808c78a:	ea47 0743 	orr.w	r7, r7, r3, lsl #1
        x ^= y ^ 0x63;
 808c78e:	404a      	eors	r2, r1
 808c790:	4053      	eors	r3, r2
 808c792:	b2fa      	uxtb	r2, r7
 808c794:	4053      	eors	r3, r2

        FSb[i] = (unsigned char) x;
 808c796:	5533      	strb	r3, [r6, r4]
        RSb[x] = (unsigned char) i;
 808c798:	54ec      	strb	r4, [r5, r3]
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
    RSb[0x63] = 0x00;

    for( i = 1; i < 256; i++ )
 808c79a:	3401      	adds	r4, #1
 808c79c:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 808c7a0:	d1da      	bne.n	808c758 <_ZL14aes_gen_tablesv+0x60>
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 808c7a2:	6b83      	ldr	r3, [r0, #56]	; 0x38
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 808c7a4:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 808c7a6:	9301      	str	r3, [sp, #4]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 808c7a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
 808c7aa:	f8df e11c 	ldr.w	lr, [pc, #284]	; 808c8c8 <_ZL14aes_gen_tablesv+0x1d0>
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 808c7ae:	9302      	str	r3, [sp, #8]
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 808c7b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
                 ( (uint32_t) z << 24 );
 808c7b2:	f8df c12c 	ldr.w	ip, [pc, #300]	; 808c8e0 <_ZL14aes_gen_tablesv+0x1e8>

        FT1[i] = ROTL8( FT0[i] );
 808c7b6:	f8df 812c 	ldr.w	r8, [pc, #300]	; 808c8e4 <_ZL14aes_gen_tablesv+0x1ec>
        FT2[i] = ROTL8( FT1[i] );
 808c7ba:	f8df 912c 	ldr.w	r9, [pc, #300]	; 808c8e8 <_ZL14aes_gen_tablesv+0x1f0>
        FT3[i] = ROTL8( FT2[i] );
 808c7be:	f8df a12c 	ldr.w	sl, [pc, #300]	; 808c8ec <_ZL14aes_gen_tablesv+0x1f4>

        x = RSb[i];
 808c7c2:	f8df b108 	ldr.w	fp, [pc, #264]	; 808c8cc <_ZL14aes_gen_tablesv+0x1d4>

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 808c7c6:	9303      	str	r3, [sp, #12]
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 808c7c8:	2200      	movs	r2, #0
    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
 808c7ca:	f812 000e 	ldrb.w	r0, [r2, lr]
 808c7ce:	0094      	lsls	r4, r2, #2
        y = XTIME( x ) & 0xFF;
 808c7d0:	f010 0f80 	tst.w	r0, #128	; 0x80
 808c7d4:	bf14      	ite	ne
 808c7d6:	211b      	movne	r1, #27
 808c7d8:	2100      	moveq	r1, #0
 808c7da:	ea81 0140 	eor.w	r1, r1, r0, lsl #1
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
 808c7de:	0403      	lsls	r3, r0, #16
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
        y = XTIME( x ) & 0xFF;
 808c7e0:	b2c9      	uxtb	r1, r1
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
 808c7e2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 808c7e6:	404b      	eors	r3, r1
 808c7e8:	4041      	eors	r1, r0
 808c7ea:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
                 ( (uint32_t) z << 24 );
 808c7ee:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]

        FT1[i] = ROTL8( FT0[i] );
 808c7f2:	ea4f 6333 	mov.w	r3, r3, ror #24
 808c7f6:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
        FT2[i] = ROTL8( FT1[i] );
 808c7fa:	ea4f 6333 	mov.w	r3, r3, ror #24
 808c7fe:	f849 3022 	str.w	r3, [r9, r2, lsl #2]
        FT3[i] = ROTL8( FT2[i] );
 808c802:	ea4f 6333 	mov.w	r3, r3, ror #24
 808c806:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]

        x = RSb[i];
 808c80a:	f81b 3002 	ldrb.w	r3, [fp, r2]

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 808c80e:	b1d3      	cbz	r3, 808c846 <_ZL14aes_gen_tablesv+0x14e>
 808c810:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 808c814:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 808c818:	9801      	ldr	r0, [sp, #4]
 808c81a:	1845      	adds	r5, r0, r1
 808c81c:	20ff      	movs	r0, #255	; 0xff
 808c81e:	fb95 f6f0 	sdiv	r6, r5, r0
 808c822:	ebc6 2606 	rsb	r6, r6, r6, lsl #8
 808c826:	1bae      	subs	r6, r5, r6
 808c828:	ad04      	add	r5, sp, #16
 808c82a:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 808c82e:	9e02      	ldr	r6, [sp, #8]
 808c830:	4431      	add	r1, r6
 808c832:	fb91 f0f0 	sdiv	r0, r1, r0
 808c836:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 808c83a:	1a09      	subs	r1, r1, r0
 808c83c:	a804      	add	r0, sp, #16
 808c83e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 808c842:	0209      	lsls	r1, r1, #8
 808c844:	e001      	b.n	808c84a <_ZL14aes_gen_tablesv+0x152>
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 808c846:	461d      	mov	r5, r3
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 808c848:	4619      	mov	r1, r3
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 808c84a:	404d      	eors	r5, r1
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 808c84c:	b183      	cbz	r3, 808c870 <_ZL14aes_gen_tablesv+0x178>
 808c84e:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 808c852:	9803      	ldr	r0, [sp, #12]
 808c854:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 808c858:	4401      	add	r1, r0
 808c85a:	20ff      	movs	r0, #255	; 0xff
 808c85c:	fb91 f0f0 	sdiv	r0, r1, r0
 808c860:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 808c864:	1a08      	subs	r0, r1, r0
 808c866:	a904      	add	r1, sp, #16
 808c868:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 808c86c:	0409      	lsls	r1, r1, #16
 808c86e:	e000      	b.n	808c872 <_ZL14aes_gen_tablesv+0x17a>
 808c870:	4619      	mov	r1, r3
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 808c872:	404d      	eors	r5, r1
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 808c874:	b173      	cbz	r3, 808c894 <_ZL14aes_gen_tablesv+0x19c>
 808c876:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 808c87a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 808c87e:	21ff      	movs	r1, #255	; 0xff
 808c880:	443b      	add	r3, r7
 808c882:	fb93 f1f1 	sdiv	r1, r3, r1
 808c886:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 808c88a:	1a59      	subs	r1, r3, r1
 808c88c:	ab04      	add	r3, sp, #16
 808c88e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 808c892:	061b      	lsls	r3, r3, #24

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 808c894:	405d      	eors	r5, r3
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 808c896:	4b0e      	ldr	r3, [pc, #56]	; (808c8d0 <_ZL14aes_gen_tablesv+0x1d8>)
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 808c898:	3201      	adds	r2, #1
        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 808c89a:	50e5      	str	r5, [r4, r3]

        RT1[i] = ROTL8( RT0[i] );
 808c89c:	4b0d      	ldr	r3, [pc, #52]	; (808c8d4 <_ZL14aes_gen_tablesv+0x1dc>)
 808c89e:	ea4f 6535 	mov.w	r5, r5, ror #24
 808c8a2:	50e5      	str	r5, [r4, r3]
        RT2[i] = ROTL8( RT1[i] );
 808c8a4:	4b0c      	ldr	r3, [pc, #48]	; (808c8d8 <_ZL14aes_gen_tablesv+0x1e0>)
 808c8a6:	ea4f 6535 	mov.w	r5, r5, ror #24
 808c8aa:	50e5      	str	r5, [r4, r3]
        RT3[i] = ROTL8( RT2[i] );
 808c8ac:	4b0b      	ldr	r3, [pc, #44]	; (808c8dc <_ZL14aes_gen_tablesv+0x1e4>)
 808c8ae:	ea4f 6535 	mov.w	r5, r5, ror #24
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 808c8b2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );

        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
 808c8b6:	50e5      	str	r5, [r4, r3]
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 808c8b8:	d187      	bne.n	808c7ca <_ZL14aes_gen_tablesv+0xd2>

        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
    }
}
 808c8ba:	f60d 0d14 	addw	sp, sp, #2068	; 0x814
 808c8be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808c8c2:	bf00      	nop
 808c8c4:	20002bf8 	.word	0x20002bf8
 808c8c8:	20001af8 	.word	0x20001af8
 808c8cc:	200019f8 	.word	0x200019f8
 808c8d0:	20001ff8 	.word	0x20001ff8
 808c8d4:	200023f8 	.word	0x200023f8
 808c8d8:	200027f8 	.word	0x200027f8
 808c8dc:	20001bf8 	.word	0x20001bf8
 808c8e0:	200009f8 	.word	0x200009f8
 808c8e4:	20000df8 	.word	0x20000df8
 808c8e8:	200011f8 	.word	0x200011f8
 808c8ec:	200015f8 	.word	0x200015f8

0808c8f0 <mbedtls_aes_init>:

#endif /* MBEDTLS_AES_ROM_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 808c8f0:	f44f 728c 	mov.w	r2, #280	; 0x118
 808c8f4:	2100      	movs	r1, #0
 808c8f6:	f005 bd4e 	b.w	8092396 <memset>

0808c8fa <mbedtls_aes_free>:
}

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
 808c8fa:	b138      	cbz	r0, 808c90c <mbedtls_aes_free+0x12>
 808c8fc:	f500 728c 	add.w	r2, r0, #280	; 0x118

#if !defined(MBEDTLS_AES_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 808c900:	2300      	movs	r3, #0
 808c902:	4290      	cmp	r0, r2
 808c904:	d002      	beq.n	808c90c <mbedtls_aes_free+0x12>
 808c906:	7003      	strb	r3, [r0, #0]
 808c908:	3001      	adds	r0, #1
 808c90a:	e7fa      	b.n	808c902 <mbedtls_aes_free+0x8>
 808c90c:	4770      	bx	lr
	...

0808c910 <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 808c910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    unsigned int i;
    uint32_t *RK;

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 808c912:	4e7a      	ldr	r6, [pc, #488]	; (808cafc <mbedtls_aes_setkey_enc+0x1ec>)
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 808c914:	4604      	mov	r4, r0
    unsigned int i;
    uint32_t *RK;

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 808c916:	6833      	ldr	r3, [r6, #0]
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 808c918:	460f      	mov	r7, r1
 808c91a:	4615      	mov	r5, r2
    unsigned int i;
    uint32_t *RK;

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 808c91c:	b91b      	cbnz	r3, 808c926 <mbedtls_aes_setkey_enc+0x16>
    {
        aes_gen_tables();
 808c91e:	f7ff feeb 	bl	808c6f8 <_ZL14aes_gen_tablesv>
        aes_init_done = 1;
 808c922:	2301      	movs	r3, #1
 808c924:	6033      	str	r3, [r6, #0]

    }
#endif

    switch( keybits )
 808c926:	2dc0      	cmp	r5, #192	; 0xc0
 808c928:	d007      	beq.n	808c93a <mbedtls_aes_setkey_enc+0x2a>
 808c92a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 808c92e:	d006      	beq.n	808c93e <mbedtls_aes_setkey_enc+0x2e>
 808c930:	2d80      	cmp	r5, #128	; 0x80
 808c932:	f040 80dd 	bne.w	808caf0 <mbedtls_aes_setkey_enc+0x1e0>
    {
        case 128: ctx->nr = 10; break;
 808c936:	230a      	movs	r3, #10
 808c938:	e002      	b.n	808c940 <mbedtls_aes_setkey_enc+0x30>
        case 192: ctx->nr = 12; break;
 808c93a:	230c      	movs	r3, #12
 808c93c:	e000      	b.n	808c940 <mbedtls_aes_setkey_enc+0x30>
        case 256: ctx->nr = 14; break;
 808c93e:	230e      	movs	r3, #14
 808c940:	6023      	str	r3, [r4, #0]

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 808c942:	f104 0308 	add.w	r3, r4, #8
 808c946:	6063      	str	r3, [r4, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 808c948:	096d      	lsrs	r5, r5, #5
 808c94a:	2000      	movs	r0, #0
 808c94c:	42a8      	cmp	r0, r5
 808c94e:	d010      	beq.n	808c972 <mbedtls_aes_setkey_enc+0x62>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
 808c950:	eb07 0180 	add.w	r1, r7, r0, lsl #2
 808c954:	788a      	ldrb	r2, [r1, #2]
 808c956:	784e      	ldrb	r6, [r1, #1]
 808c958:	0412      	lsls	r2, r2, #16
 808c95a:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 808c95e:	f817 6020 	ldrb.w	r6, [r7, r0, lsl #2]
 808c962:	78c9      	ldrb	r1, [r1, #3]
 808c964:	4332      	orrs	r2, r6
 808c966:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 808c96a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 808c96e:	3001      	adds	r0, #1
 808c970:	e7ec      	b.n	808c94c <mbedtls_aes_setkey_enc+0x3c>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 808c972:	6822      	ldr	r2, [r4, #0]
 808c974:	2a0c      	cmp	r2, #12
 808c976:	d031      	beq.n	808c9dc <mbedtls_aes_setkey_enc+0xcc>
 808c978:	2a0e      	cmp	r2, #14
 808c97a:	d068      	beq.n	808ca4e <mbedtls_aes_setkey_enc+0x13e>
 808c97c:	2a0a      	cmp	r2, #10
 808c97e:	f040 80ba 	bne.w	808caf6 <mbedtls_aes_setkey_enc+0x1e6>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 808c982:	4f5f      	ldr	r7, [pc, #380]	; (808cb00 <mbedtls_aes_setkey_enc+0x1f0>)
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 808c984:	4e5f      	ldr	r6, [pc, #380]	; (808cb04 <mbedtls_aes_setkey_enc+0x1f4>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 808c986:	2500      	movs	r5, #0
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 808c988:	68dc      	ldr	r4, [r3, #12]
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808c98a:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 808c98e:	681a      	ldr	r2, [r3, #0]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 808c990:	3501      	adds	r5, #1
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808c992:	4051      	eors	r1, r2
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 808c994:	f3c4 2207 	ubfx	r2, r4, #8, #8
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808c998:	5cb0      	ldrb	r0, [r6, r2]
 808c99a:	0e22      	lsrs	r2, r4, #24
 808c99c:	5cb2      	ldrb	r2, [r6, r2]
 808c99e:	4041      	eors	r1, r0
 808c9a0:	ea81 4102 	eor.w	r1, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 808c9a4:	b2e2      	uxtb	r2, r4
            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808c9a6:	5cb2      	ldrb	r2, [r6, r2]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 808c9a8:	2d0a      	cmp	r5, #10
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808c9aa:	ea81 6102 	eor.w	r1, r1, r2, lsl #24

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 808c9ae:	f3c4 4207 	ubfx	r2, r4, #16, #8
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808c9b2:	5cb2      	ldrb	r2, [r6, r2]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 808c9b4:	f103 0310 	add.w	r3, r3, #16
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808c9b8:	ea81 2202 	eor.w	r2, r1, r2, lsl #8
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
 808c9bc:	f853 1c0c 	ldr.w	r1, [r3, #-12]
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 808c9c0:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
 808c9c2:	ea82 0201 	eor.w	r2, r2, r1
                RK[6]  = RK[2] ^ RK[5];
 808c9c6:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
 808c9ca:	605a      	str	r2, [r3, #4]
                RK[6]  = RK[2] ^ RK[5];
 808c9cc:	ea82 0201 	eor.w	r2, r2, r1
 808c9d0:	609a      	str	r2, [r3, #8]
                RK[7]  = RK[3] ^ RK[6];
 808c9d2:	ea82 0204 	eor.w	r2, r2, r4
 808c9d6:	60da      	str	r2, [r3, #12]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 808c9d8:	d1d6      	bne.n	808c988 <mbedtls_aes_setkey_enc+0x78>
 808c9da:	e08c      	b.n	808caf6 <mbedtls_aes_setkey_enc+0x1e6>

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
 808c9dc:	4e48      	ldr	r6, [pc, #288]	; (808cb00 <mbedtls_aes_setkey_enc+0x1f0>)
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 808c9de:	4d49      	ldr	r5, [pc, #292]	; (808cb04 <mbedtls_aes_setkey_enc+0x1f4>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 808c9e0:	2400      	movs	r4, #0
            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808c9e2:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 808c9e6:	6958      	ldr	r0, [r3, #20]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808c9e8:	681a      	ldr	r2, [r3, #0]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 808c9ea:	3401      	adds	r4, #1
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808c9ec:	404a      	eors	r2, r1
        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 808c9ee:	f3c0 2107 	ubfx	r1, r0, #8, #8
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808c9f2:	5c69      	ldrb	r1, [r5, r1]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 808c9f4:	2c08      	cmp	r4, #8
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808c9f6:	ea82 0201 	eor.w	r2, r2, r1
 808c9fa:	ea4f 6110 	mov.w	r1, r0, lsr #24
 808c9fe:	5c69      	ldrb	r1, [r5, r1]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 808ca00:	f103 0318 	add.w	r3, r3, #24
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808ca04:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 808ca08:	b2c1      	uxtb	r1, r0
            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808ca0a:	5c69      	ldrb	r1, [r5, r1]
 808ca0c:	ea82 6201 	eor.w	r2, r2, r1, lsl #24

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 808ca10:	f3c0 4107 	ubfx	r1, r0, #16, #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808ca14:	5c69      	ldrb	r1, [r5, r1]
 808ca16:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
 808ca1a:	f853 1c14 	ldr.w	r1, [r3, #-20]
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 808ca1e:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
 808ca20:	ea82 0201 	eor.w	r2, r2, r1
                RK[8]  = RK[2] ^ RK[7];
 808ca24:	f853 1c10 	ldr.w	r1, [r3, #-16]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
 808ca28:	605a      	str	r2, [r3, #4]
                RK[8]  = RK[2] ^ RK[7];
 808ca2a:	ea82 0201 	eor.w	r2, r2, r1
                RK[9]  = RK[3] ^ RK[8];
 808ca2e:	f853 1c0c 	ldr.w	r1, [r3, #-12]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
 808ca32:	609a      	str	r2, [r3, #8]
                RK[9]  = RK[3] ^ RK[8];
 808ca34:	ea82 0201 	eor.w	r2, r2, r1
                RK[10] = RK[4] ^ RK[9];
 808ca38:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
                RK[9]  = RK[3] ^ RK[8];
 808ca3c:	60da      	str	r2, [r3, #12]
                RK[10] = RK[4] ^ RK[9];
 808ca3e:	ea82 0201 	eor.w	r2, r2, r1
 808ca42:	611a      	str	r2, [r3, #16]
                RK[11] = RK[5] ^ RK[10];
 808ca44:	ea82 0200 	eor.w	r2, r2, r0
 808ca48:	615a      	str	r2, [r3, #20]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 808ca4a:	d1ca      	bne.n	808c9e2 <mbedtls_aes_setkey_enc+0xd2>
 808ca4c:	e053      	b.n	808caf6 <mbedtls_aes_setkey_enc+0x1e6>

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
 808ca4e:	4e2c      	ldr	r6, [pc, #176]	; (808cb00 <mbedtls_aes_setkey_enc+0x1f0>)
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 808ca50:	482c      	ldr	r0, [pc, #176]	; (808cb04 <mbedtls_aes_setkey_enc+0x1f4>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 808ca52:	2500      	movs	r5, #0
            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808ca54:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 808ca58:	69dc      	ldr	r4, [r3, #28]
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808ca5a:	681a      	ldr	r2, [r3, #0]
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
 808ca5c:	685f      	ldr	r7, [r3, #4]
            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808ca5e:	4051      	eors	r1, r2
        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 808ca60:	f3c4 2207 	ubfx	r2, r4, #8, #8
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808ca64:	5c82      	ldrb	r2, [r0, r2]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 808ca66:	3501      	adds	r5, #1
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808ca68:	4051      	eors	r1, r2
 808ca6a:	0e22      	lsrs	r2, r4, #24
 808ca6c:	5c82      	ldrb	r2, [r0, r2]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 808ca6e:	2d07      	cmp	r5, #7
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808ca70:	ea81 4102 	eor.w	r1, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 808ca74:	b2e2      	uxtb	r2, r4
            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808ca76:	5c82      	ldrb	r2, [r0, r2]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 808ca78:	f103 0320 	add.w	r3, r3, #32
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808ca7c:	ea81 6102 	eor.w	r1, r1, r2, lsl #24

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 808ca80:	f3c4 4207 	ubfx	r2, r4, #16, #8
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808ca84:	5c82      	ldrb	r2, [r0, r2]
 808ca86:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
 808ca8a:	f853 2c18 	ldr.w	r2, [r3, #-24]
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 808ca8e:	6019      	str	r1, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
 808ca90:	ea81 0107 	eor.w	r1, r1, r7
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];
 808ca94:	f853 7c14 	ldr.w	r7, [r3, #-20]
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
 808ca98:	6059      	str	r1, [r3, #4]
                RK[10] = RK[2] ^ RK[9];
 808ca9a:	ea81 0102 	eor.w	r1, r1, r2
                RK[11] = RK[3] ^ RK[10];
 808ca9e:	ea87 0701 	eor.w	r7, r7, r1
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
 808caa2:	6099      	str	r1, [r3, #8]
                RK[11] = RK[3] ^ RK[10];
 808caa4:	60df      	str	r7, [r3, #12]

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 808caa6:	b2fa      	uxtb	r2, r7
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 808caa8:	5c82      	ldrb	r2, [r0, r2]
 808caaa:	f853 1c10 	ldr.w	r1, [r3, #-16]
 808caae:	ea81 0102 	eor.w	r1, r1, r2
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 808cab2:	ea4f 6217 	mov.w	r2, r7, lsr #24
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 808cab6:	5c82      	ldrb	r2, [r0, r2]
 808cab8:	ea81 6102 	eor.w	r1, r1, r2, lsl #24
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 808cabc:	f3c7 2207 	ubfx	r2, r7, #8, #8
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 808cac0:	5c82      	ldrb	r2, [r0, r2]
 808cac2:	f3c7 4707 	ubfx	r7, r7, #16, #8
 808cac6:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
 808caca:	5dc2      	ldrb	r2, [r0, r7]
 808cacc:	ea81 4202 	eor.w	r2, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
 808cad0:	f853 1c0c 	ldr.w	r1, [r3, #-12]

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 808cad4:	611a      	str	r2, [r3, #16]

                RK[13] = RK[5] ^ RK[12];
 808cad6:	ea82 0201 	eor.w	r2, r2, r1
                RK[14] = RK[6] ^ RK[13];
 808cada:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
 808cade:	615a      	str	r2, [r3, #20]
                RK[14] = RK[6] ^ RK[13];
 808cae0:	ea82 0201 	eor.w	r2, r2, r1
 808cae4:	619a      	str	r2, [r3, #24]
                RK[15] = RK[7] ^ RK[14];
 808cae6:	ea82 0204 	eor.w	r2, r2, r4
 808caea:	61da      	str	r2, [r3, #28]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 808caec:	d1b2      	bne.n	808ca54 <mbedtls_aes_setkey_enc+0x144>
 808caee:	e002      	b.n	808caf6 <mbedtls_aes_setkey_enc+0x1e6>
    switch( keybits )
    {
        case 128: ctx->nr = 10; break;
        case 192: ctx->nr = 12; break;
        case 256: ctx->nr = 14; break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 808caf0:	f06f 001f 	mvn.w	r0, #31
 808caf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                RK[15] = RK[7] ^ RK[14];
            }
            break;
    }

    return( 0 );
 808caf6:	2000      	movs	r0, #0
}
 808caf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808cafa:	bf00      	nop
 808cafc:	200009f4 	.word	0x200009f4
 808cb00:	20002bf8 	.word	0x20002bf8
 808cb04:	20001af8 	.word	0x20001af8

0808cb08 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 808cb08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808cb0c:	4604      	mov	r4, r0
 808cb0e:	460d      	mov	r5, r1
 808cb10:	4616      	mov	r6, r2
 808cb12:	b0c9      	sub	sp, #292	; 0x124
    int i, j, ret;
    mbedtls_aes_context cty;
    uint32_t *RK;
    uint32_t *SK;

    mbedtls_aes_init( &cty );
 808cb14:	a802      	add	r0, sp, #8
 808cb16:	f7ff feeb 	bl	808c8f0 <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 808cb1a:	f104 0308 	add.w	r3, r4, #8
 808cb1e:	6063      	str	r3, [r4, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 808cb20:	4632      	mov	r2, r6
 808cb22:	4629      	mov	r1, r5
 808cb24:	a802      	add	r0, sp, #8
 808cb26:	f7ff fef3 	bl	808c910 <mbedtls_aes_setkey_enc>
 808cb2a:	4680      	mov	r8, r0
 808cb2c:	2800      	cmp	r0, #0
 808cb2e:	d14b      	bne.n	808cbc8 <mbedtls_aes_setkey_dec+0xc0>
        goto exit;

    ctx->nr = cty.nr;
 808cb30:	9902      	ldr	r1, [sp, #8]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 808cb32:	9803      	ldr	r0, [sp, #12]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
        goto exit;

    ctx->nr = cty.nr;
 808cb34:	6021      	str	r1, [r4, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 808cb36:	010a      	lsls	r2, r1, #4
 808cb38:	1883      	adds	r3, r0, r2

    *RK++ = *SK++;
 808cb3a:	5882      	ldr	r2, [r0, r2]
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 808cb3c:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 808cbe0 <mbedtls_aes_setkey_dec+0xd8>
    }
#endif

    SK = cty.rk + cty.nr * 4;

    *RK++ = *SK++;
 808cb40:	60a2      	str	r2, [r4, #8]
    *RK++ = *SK++;
 808cb42:	685a      	ldr	r2, [r3, #4]
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 808cb44:	f8df 909c 	ldr.w	r9, [pc, #156]	; 808cbe4 <mbedtls_aes_setkey_dec+0xdc>
#endif

    SK = cty.rk + cty.nr * 4;

    *RK++ = *SK++;
    *RK++ = *SK++;
 808cb48:	60e2      	str	r2, [r4, #12]
    *RK++ = *SK++;
 808cb4a:	689a      	ldr	r2, [r3, #8]
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 808cb4c:	f8df a098 	ldr.w	sl, [pc, #152]	; 808cbe8 <mbedtls_aes_setkey_dec+0xe0>

    SK = cty.rk + cty.nr * 4;

    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
 808cb50:	6122      	str	r2, [r4, #16]
    *RK++ = *SK++;
 808cb52:	68d8      	ldr	r0, [r3, #12]
 808cb54:	f104 0218 	add.w	r2, r4, #24
 808cb58:	6160      	str	r0, [r4, #20]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 808cb5a:	4c1f      	ldr	r4, [pc, #124]	; (808cbd8 <mbedtls_aes_setkey_dec+0xd0>)
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 808cb5c:	3901      	subs	r1, #1
 808cb5e:	3b10      	subs	r3, #16
 808cb60:	2900      	cmp	r1, #0
 808cb62:	dd29      	ble.n	808cbb8 <mbedtls_aes_setkey_dec+0xb0>
 808cb64:	1f1d      	subs	r5, r3, #4
 808cb66:	f1a2 0e04 	sub.w	lr, r2, #4
 808cb6a:	f103 0b0c 	add.w	fp, r3, #12
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 808cb6e:	f855 0f04 	ldr.w	r0, [r5, #4]!
 808cb72:	b2c6      	uxtb	r6, r0
 808cb74:	5da7      	ldrb	r7, [r4, r6]
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 808cb76:	0e06      	lsrs	r6, r0, #24
 808cb78:	5da6      	ldrb	r6, [r4, r6]
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
 808cb7a:	45ab      	cmp	fp, r5
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 808cb7c:	9601      	str	r6, [sp, #4]
 808cb7e:	4e17      	ldr	r6, [pc, #92]	; (808cbdc <mbedtls_aes_setkey_dec+0xd4>)
 808cb80:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 808cb84:	9e01      	ldr	r6, [sp, #4]
 808cb86:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 808cb8a:	ea87 0706 	eor.w	r7, r7, r6
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 808cb8e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 808cb92:	5da6      	ldrb	r6, [r4, r6]
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 808cb94:	f3c0 4007 	ubfx	r0, r0, #16, #8
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 808cb98:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 808cb9c:	5c20      	ldrb	r0, [r4, r0]
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 808cb9e:	ea86 0607 	eor.w	r6, r6, r7
 808cba2:	f85a 7020 	ldr.w	r7, [sl, r0, lsl #2]
 808cba6:	ea86 0607 	eor.w	r6, r6, r7
 808cbaa:	f84e 6f04 	str.w	r6, [lr, #4]!
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
 808cbae:	d1de      	bne.n	808cb6e <mbedtls_aes_setkey_dec+0x66>
 808cbb0:	3210      	adds	r2, #16
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 808cbb2:	3901      	subs	r1, #1
 808cbb4:	3b10      	subs	r3, #16
 808cbb6:	e7d3      	b.n	808cb60 <mbedtls_aes_setkey_dec+0x58>
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
        }
    }

    *RK++ = *SK++;
 808cbb8:	6819      	ldr	r1, [r3, #0]
 808cbba:	6011      	str	r1, [r2, #0]
    *RK++ = *SK++;
 808cbbc:	6859      	ldr	r1, [r3, #4]
 808cbbe:	6051      	str	r1, [r2, #4]
    *RK++ = *SK++;
 808cbc0:	6899      	ldr	r1, [r3, #8]
 808cbc2:	6091      	str	r1, [r2, #8]
    *RK++ = *SK++;
 808cbc4:	68db      	ldr	r3, [r3, #12]
 808cbc6:	60d3      	str	r3, [r2, #12]

exit:
    mbedtls_aes_free( &cty );
 808cbc8:	a802      	add	r0, sp, #8
 808cbca:	f7ff fe96 	bl	808c8fa <mbedtls_aes_free>

    return( ret );
}
 808cbce:	4640      	mov	r0, r8
 808cbd0:	b049      	add	sp, #292	; 0x124
 808cbd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808cbd6:	bf00      	nop
 808cbd8:	20001af8 	.word	0x20001af8
 808cbdc:	20001ff8 	.word	0x20001ff8
 808cbe0:	20001bf8 	.word	0x20001bf8
 808cbe4:	200023f8 	.word	0x200023f8
 808cbe8:	200027f8 	.word	0x200027f8

0808cbec <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 808cbec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 808cbf0:	6843      	ldr	r3, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 808cbf2:	680d      	ldr	r5, [r1, #0]
 808cbf4:	681c      	ldr	r4, [r3, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808cbf6:	6800      	ldr	r0, [r0, #0]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 808cbf8:	ea85 0b04 	eor.w	fp, r5, r4
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 808cbfc:	684d      	ldr	r5, [r1, #4]
 808cbfe:	685c      	ldr	r4, [r3, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 808cc00:	688e      	ldr	r6, [r1, #8]
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 808cc02:	406c      	eors	r4, r5
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 808cc04:	689d      	ldr	r5, [r3, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808cc06:	1040      	asrs	r0, r0, #1
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 808cc08:	b085      	sub	sp, #20
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808cc0a:	3801      	subs	r0, #1

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 808cc0c:	4075      	eors	r5, r6
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 808cc0e:	68ce      	ldr	r6, [r1, #12]
 808cc10:	68d9      	ldr	r1, [r3, #12]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808cc12:	9001      	str	r0, [sp, #4]
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 808cc14:	f853 0f10 	ldr.w	r0, [r3, #16]!
 808cc18:	4071      	eors	r1, r6
 808cc1a:	f8df e364 	ldr.w	lr, [pc, #868]	; 808cf80 <mbedtls_internal_aes_encrypt+0x394>
 808cc1e:	4ed4      	ldr	r6, [pc, #848]	; (808cf70 <mbedtls_internal_aes_encrypt+0x384>)

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808cc20:	f8df a354 	ldr.w	sl, [pc, #852]	; 808cf78 <mbedtls_internal_aes_encrypt+0x38c>
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 808cc24:	9002      	str	r0, [sp, #8]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808cc26:	9801      	ldr	r0, [sp, #4]
 808cc28:	461f      	mov	r7, r3
 808cc2a:	2800      	cmp	r0, #0
 808cc2c:	ea4f 6011 	mov.w	r0, r1, lsr #24
 808cc30:	f103 0320 	add.w	r3, r3, #32
 808cc34:	f8df 8348 	ldr.w	r8, [pc, #840]	; 808cf80 <mbedtls_internal_aes_encrypt+0x394>
 808cc38:	fa5f f98b 	uxtb.w	r9, fp
 808cc3c:	f8df c330 	ldr.w	ip, [pc, #816]	; 808cf70 <mbedtls_internal_aes_encrypt+0x384>
 808cc40:	9003      	str	r0, [sp, #12]
 808cc42:	f340 80be 	ble.w	808cdc2 <mbedtls_internal_aes_encrypt+0x1d6>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808cc46:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 808cc4a:	f85e 8029 	ldr.w	r8, [lr, r9, lsl #2]
 808cc4e:	48c9      	ldr	r0, [pc, #804]	; (808cf74 <mbedtls_internal_aes_encrypt+0x388>)
 808cc50:	ea88 0807 	eor.w	r8, r8, r7
 808cc54:	f853 7c20 	ldr.w	r7, [r3, #-32]
 808cc58:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 808cc5c:	ea88 0807 	eor.w	r8, r8, r7
 808cc60:	f3c4 2707 	ubfx	r7, r4, #8, #8
 808cc64:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
 808cc68:	ea88 0707 	eor.w	r7, r8, r7
 808cc6c:	f85a 802c 	ldr.w	r8, [sl, ip, lsl #2]
 808cc70:	fa5f fc84 	uxtb.w	ip, r4
 808cc74:	ea87 0808 	eor.w	r8, r7, r8
 808cc78:	ea4f 671b 	mov.w	r7, fp, lsr #24
 808cc7c:	f85e 902c 	ldr.w	r9, [lr, ip, lsl #2]
 808cc80:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 808cc84:	f3c5 2c07 	ubfx	ip, r5, #8, #8
 808cc88:	ea89 0907 	eor.w	r9, r9, r7
 808cc8c:	f853 7c1c 	ldr.w	r7, [r3, #-28]
 808cc90:	ea89 0707 	eor.w	r7, r9, r7
 808cc94:	f850 902c 	ldr.w	r9, [r0, ip, lsl #2]
 808cc98:	f3c1 4c07 	ubfx	ip, r1, #16, #8
 808cc9c:	ea87 0709 	eor.w	r7, r7, r9
 808cca0:	f85a 902c 	ldr.w	r9, [sl, ip, lsl #2]
 808cca4:	fa5f fc85 	uxtb.w	ip, r5
 808cca8:	ea87 0909 	eor.w	r9, r7, r9
 808ccac:	0e27      	lsrs	r7, r4, #24
 808ccae:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 808ccb2:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
 808ccb6:	0e2d      	lsrs	r5, r5, #24
 808ccb8:	ea8c 0c07 	eor.w	ip, ip, r7
 808ccbc:	f853 7c18 	ldr.w	r7, [r3, #-24]
 808ccc0:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 808ccc4:	ea8c 0707 	eor.w	r7, ip, r7
 808ccc8:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 808cccc:	f850 c02c 	ldr.w	ip, [r0, ip, lsl #2]
 808ccd0:	b2c9      	uxtb	r1, r1
 808ccd2:	ea87 070c 	eor.w	r7, r7, ip
 808ccd6:	f3cb 4c07 	ubfx	ip, fp, #16, #8
 808ccda:	f85a c02c 	ldr.w	ip, [sl, ip, lsl #2]
 808ccde:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 808cce2:	ea87 070c 	eor.w	r7, r7, ip
 808cce6:	ea81 0c05 	eor.w	ip, r1, r5
 808ccea:	f853 1c14 	ldr.w	r1, [r3, #-20]
 808ccee:	f3cb 2507 	ubfx	r5, fp, #8, #8
 808ccf2:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
 808ccf6:	f3c4 4407 	ubfx	r4, r4, #16, #8
 808ccfa:	f85a 4024 	ldr.w	r4, [sl, r4, lsl #2]
 808ccfe:	ea8c 0101 	eor.w	r1, ip, r1
 808cd02:	4069      	eors	r1, r5
 808cd04:	ea81 0c04 	eor.w	ip, r1, r4
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808cd08:	ea4f 611c 	mov.w	r1, ip, lsr #24
 808cd0c:	fa5f f488 	uxtb.w	r4, r8
 808cd10:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 808cd14:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 808cd18:	b2fd      	uxtb	r5, r7
 808cd1a:	4061      	eors	r1, r4
 808cd1c:	f853 4c10 	ldr.w	r4, [r3, #-16]
 808cd20:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
 808cd24:	404c      	eors	r4, r1
 808cd26:	f3c9 2107 	ubfx	r1, r9, #8, #8
 808cd2a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 808cd2e:	404c      	eors	r4, r1
 808cd30:	f3c7 4107 	ubfx	r1, r7, #16, #8
 808cd34:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 808cd38:	ea84 0b01 	eor.w	fp, r4, r1
 808cd3c:	fa5f f489 	uxtb.w	r4, r9
 808cd40:	ea4f 6118 	mov.w	r1, r8, lsr #24
 808cd44:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 808cd48:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 808cd4c:	4061      	eors	r1, r4
 808cd4e:	f853 4c0c 	ldr.w	r4, [r3, #-12]
 808cd52:	404c      	eors	r4, r1
 808cd54:	f3c7 2107 	ubfx	r1, r7, #8, #8
 808cd58:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 808cd5c:	0e3f      	lsrs	r7, r7, #24
 808cd5e:	404c      	eors	r4, r1
 808cd60:	f3cc 4107 	ubfx	r1, ip, #16, #8
 808cd64:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 808cd68:	404c      	eors	r4, r1
 808cd6a:	ea4f 6119 	mov.w	r1, r9, lsr #24
 808cd6e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 808cd72:	f3c9 4907 	ubfx	r9, r9, #16, #8
 808cd76:	404d      	eors	r5, r1
 808cd78:	f853 1c08 	ldr.w	r1, [r3, #-8]
 808cd7c:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 808cd80:	4069      	eors	r1, r5
 808cd82:	f3cc 2507 	ubfx	r5, ip, #8, #8
 808cd86:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
 808cd8a:	fa5f fc8c 	uxtb.w	ip, ip
 808cd8e:	4069      	eors	r1, r5
 808cd90:	f3c8 4507 	ubfx	r5, r8, #16, #8
 808cd94:	f85a 5025 	ldr.w	r5, [sl, r5, lsl #2]
 808cd98:	f3c8 2807 	ubfx	r8, r8, #8, #8
 808cd9c:	404d      	eors	r5, r1
 808cd9e:	f85e 102c 	ldr.w	r1, [lr, ip, lsl #2]
 808cda2:	404f      	eors	r7, r1
 808cda4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 808cda8:	4079      	eors	r1, r7
 808cdaa:	f850 7028 	ldr.w	r7, [r0, r8, lsl #2]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808cdae:	9801      	ldr	r0, [sp, #4]
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808cdb0:	4079      	eors	r1, r7
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808cdb2:	3801      	subs	r0, #1
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808cdb4:	f85a 7029 	ldr.w	r7, [sl, r9, lsl #2]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808cdb8:	9001      	str	r0, [sp, #4]
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808cdba:	6818      	ldr	r0, [r3, #0]
 808cdbc:	4079      	eors	r1, r7
 808cdbe:	9002      	str	r0, [sp, #8]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808cdc0:	e731      	b.n	808cc26 <mbedtls_internal_aes_encrypt+0x3a>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808cdc2:	0e0b      	lsrs	r3, r1, #24
 808cdc4:	f858 0029 	ldr.w	r0, [r8, r9, lsl #2]
 808cdc8:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 808cdcc:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 808cf74 <mbedtls_internal_aes_encrypt+0x388>
 808cdd0:	4043      	eors	r3, r0
 808cdd2:	9802      	ldr	r0, [sp, #8]
 808cdd4:	4e68      	ldr	r6, [pc, #416]	; (808cf78 <mbedtls_internal_aes_encrypt+0x38c>)
 808cdd6:	ea83 0900 	eor.w	r9, r3, r0
 808cdda:	f3c4 2307 	ubfx	r3, r4, #8, #8
 808cdde:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 808cde2:	b2e0      	uxtb	r0, r4
 808cde4:	ea89 0903 	eor.w	r9, r9, r3
 808cde8:	f3c5 4307 	ubfx	r3, r5, #16, #8
 808cdec:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 808cdf0:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 808cdf4:	ea89 0903 	eor.w	r9, r9, r3
 808cdf8:	ea4f 631b 	mov.w	r3, fp, lsr #24
 808cdfc:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 808ce00:	fa5f fa85 	uxtb.w	sl, r5
 808ce04:	4058      	eors	r0, r3
 808ce06:	687b      	ldr	r3, [r7, #4]
 808ce08:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 808ce0c:	4043      	eors	r3, r0
 808ce0e:	f3c5 2007 	ubfx	r0, r5, #8, #8
 808ce12:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 808ce16:	0e2d      	lsrs	r5, r5, #24
 808ce18:	4043      	eors	r3, r0
 808ce1a:	f3c1 4007 	ubfx	r0, r1, #16, #8
 808ce1e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 808ce22:	4043      	eors	r3, r0
 808ce24:	0e20      	lsrs	r0, r4, #24
 808ce26:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 808ce2a:	f3c4 4407 	ubfx	r4, r4, #16, #8
 808ce2e:	ea8a 0a00 	eor.w	sl, sl, r0
 808ce32:	68b8      	ldr	r0, [r7, #8]
 808ce34:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 808ce38:	ea8a 0000 	eor.w	r0, sl, r0
 808ce3c:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 808ce40:	b2c9      	uxtb	r1, r1
 808ce42:	f858 8021 	ldr.w	r8, [r8, r1, lsl #2]
 808ce46:	f85c 1025 	ldr.w	r1, [ip, r5, lsl #2]
 808ce4a:	f85e a02a 	ldr.w	sl, [lr, sl, lsl #2]
 808ce4e:	ea88 0501 	eor.w	r5, r8, r1
 808ce52:	68f9      	ldr	r1, [r7, #12]
 808ce54:	ea80 000a 	eor.w	r0, r0, sl
 808ce58:	4069      	eors	r1, r5
 808ce5a:	f3cb 2507 	ubfx	r5, fp, #8, #8
 808ce5e:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
 808ce62:	f3cb 4a07 	ubfx	sl, fp, #16, #8
 808ce66:	4069      	eors	r1, r5
 808ce68:	4061      	eors	r1, r4

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 808ce6a:	4c44      	ldr	r4, [pc, #272]	; (808cf7c <mbedtls_internal_aes_encrypt+0x390>)
 808ce6c:	fa5f f589 	uxtb.w	r5, r9
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808ce70:	f814 e005 	ldrb.w	lr, [r4, r5]
 808ce74:	693d      	ldr	r5, [r7, #16]
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808ce76:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808ce7a:	0e0e      	lsrs	r6, r1, #24
 808ce7c:	ea8e 0505 	eor.w	r5, lr, r5
 808ce80:	f814 e006 	ldrb.w	lr, [r4, r6]

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 808ce84:	f3c3 2607 	ubfx	r6, r3, #8, #8
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808ce88:	ea80 000a 	eor.w	r0, r0, sl

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808ce8c:	ea85 650e 	eor.w	r5, r5, lr, lsl #24
 808ce90:	f814 e006 	ldrb.w	lr, [r4, r6]
    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 808ce94:	f3c0 4607 	ubfx	r6, r0, #16, #8
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808ce98:	ea85 250e 	eor.w	r5, r5, lr, lsl #8
 808ce9c:	f814 e006 	ldrb.w	lr, [r4, r6]
 808cea0:	ea85 4e0e 	eor.w	lr, r5, lr, lsl #16

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 808cea4:	b2dd      	uxtb	r5, r3
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808cea6:	5d66      	ldrb	r6, [r4, r5]
 808cea8:	697d      	ldr	r5, [r7, #20]
 808ceaa:	4075      	eors	r5, r6
 808ceac:	ea4f 6619 	mov.w	r6, r9, lsr #24
 808ceb0:	5da6      	ldrb	r6, [r4, r6]
 808ceb2:	ea85 6506 	eor.w	r5, r5, r6, lsl #24
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 808ceb6:	f3c0 2607 	ubfx	r6, r0, #8, #8
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808ceba:	5da6      	ldrb	r6, [r4, r6]
 808cebc:	ea85 2506 	eor.w	r5, r5, r6, lsl #8
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 808cec0:	f3c1 4607 	ubfx	r6, r1, #16, #8
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808cec4:	5da6      	ldrb	r6, [r4, r6]
 808cec6:	ea85 4606 	eor.w	r6, r5, r6, lsl #16

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 808ceca:	b2c5      	uxtb	r5, r0
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808cecc:	f814 c005 	ldrb.w	ip, [r4, r5]
 808ced0:	69bd      	ldr	r5, [r7, #24]

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808ced2:	0e00      	lsrs	r0, r0, #24

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808ced4:	ea8c 0505 	eor.w	r5, ip, r5
 808ced8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 808cedc:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808cee0:	5c20      	ldrb	r0, [r4, r0]

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808cee2:	ea85 650c 	eor.w	r5, r5, ip, lsl #24
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 808cee6:	f3c1 2c07 	ubfx	ip, r1, #8, #8
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808ceea:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 808ceee:	b2c9      	uxtb	r1, r1

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808cef0:	ea85 250c 	eor.w	r5, r5, ip, lsl #8
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 808cef4:	f3c9 4c07 	ubfx	ip, r9, #16, #8
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808cef8:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 808cefc:	f3c9 2907 	ubfx	r9, r9, #8, #8

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808cf00:	ea85 450c 	eor.w	r5, r5, ip, lsl #16

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808cf04:	f814 c001 	ldrb.w	ip, [r4, r1]
 808cf08:	69f9      	ldr	r1, [r7, #28]
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 808cf0a:	f3c3 4307 	ubfx	r3, r3, #16, #8
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808cf0e:	ea8c 0101 	eor.w	r1, ip, r1
 808cf12:	ea81 6100 	eor.w	r1, r1, r0, lsl #24
 808cf16:	f814 0009 	ldrb.w	r0, [r4, r9]
 808cf1a:	5ce3      	ldrb	r3, [r4, r3]
 808cf1c:	ea81 2100 	eor.w	r1, r1, r0, lsl #8
 808cf20:	ea81 4303 	eor.w	r3, r1, r3, lsl #16

    PUT_UINT32_LE( X0, output,  0 );
 808cf24:	ea4f 211e 	mov.w	r1, lr, lsr #8
 808cf28:	7051      	strb	r1, [r2, #1]
 808cf2a:	ea4f 411e 	mov.w	r1, lr, lsr #16
 808cf2e:	7091      	strb	r1, [r2, #2]
    PUT_UINT32_LE( X1, output,  4 );
 808cf30:	0a31      	lsrs	r1, r6, #8
 808cf32:	7151      	strb	r1, [r2, #5]
 808cf34:	0c31      	lsrs	r1, r6, #16
 808cf36:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
 808cf38:	0a29      	lsrs	r1, r5, #8
 808cf3a:	7251      	strb	r1, [r2, #9]
 808cf3c:	0c29      	lsrs	r1, r5, #16
 808cf3e:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
 808cf40:	0a19      	lsrs	r1, r3, #8
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 808cf42:	f882 e000 	strb.w	lr, [r2]
    PUT_UINT32_LE( X1, output,  4 );
 808cf46:	7116      	strb	r6, [r2, #4]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 808cf48:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    PUT_UINT32_LE( X1, output,  4 );
 808cf4c:	0e36      	lsrs	r6, r6, #24
    PUT_UINT32_LE( X2, output,  8 );
 808cf4e:	7215      	strb	r5, [r2, #8]
    PUT_UINT32_LE( X3, output, 12 );
 808cf50:	7313      	strb	r3, [r2, #12]
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
 808cf52:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X3, output, 12 );
 808cf54:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
 808cf56:	2000      	movs	r0, #0
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
 808cf58:	0c19      	lsrs	r1, r3, #16
 808cf5a:	0e1b      	lsrs	r3, r3, #24
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 808cf5c:	f882 e003 	strb.w	lr, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
 808cf60:	71d6      	strb	r6, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
 808cf62:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
 808cf64:	7391      	strb	r1, [r2, #14]
 808cf66:	73d3      	strb	r3, [r2, #15]

    return( 0 );
}
 808cf68:	b005      	add	sp, #20
 808cf6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808cf6e:	bf00      	nop
 808cf70:	200015f8 	.word	0x200015f8
 808cf74:	20000df8 	.word	0x20000df8
 808cf78:	200011f8 	.word	0x200011f8
 808cf7c:	20001af8 	.word	0x20001af8
 808cf80:	200009f8 	.word	0x200009f8

0808cf84 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 808cf84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 808cf88:	6843      	ldr	r3, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 808cf8a:	680d      	ldr	r5, [r1, #0]
 808cf8c:	681c      	ldr	r4, [r3, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808cf8e:	6800      	ldr	r0, [r0, #0]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 808cf90:	ea85 0a04 	eor.w	sl, r5, r4
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 808cf94:	684d      	ldr	r5, [r1, #4]
 808cf96:	685c      	ldr	r4, [r3, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808cf98:	1040      	asrs	r0, r0, #1
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 808cf9a:	ea85 0b04 	eor.w	fp, r5, r4
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 808cf9e:	688d      	ldr	r5, [r1, #8]
 808cfa0:	689c      	ldr	r4, [r3, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808cfa2:	3801      	subs	r0, #1

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 808cfa4:	406c      	eors	r4, r5
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 808cfa6:	68cd      	ldr	r5, [r1, #12]
 808cfa8:	68d9      	ldr	r1, [r3, #12]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808cfaa:	9000      	str	r0, [sp, #0]
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 808cfac:	f853 0f10 	ldr.w	r0, [r3, #16]!
 808cfb0:	4069      	eors	r1, r5
 808cfb2:	f8df e364 	ldr.w	lr, [pc, #868]	; 808d318 <mbedtls_internal_aes_decrypt+0x394>
 808cfb6:	4ed4      	ldr	r6, [pc, #848]	; (808d308 <mbedtls_internal_aes_decrypt+0x384>)

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808cfb8:	4dd4      	ldr	r5, [pc, #848]	; (808d30c <mbedtls_internal_aes_decrypt+0x388>)
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 808cfba:	9001      	str	r0, [sp, #4]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808cfbc:	9800      	ldr	r0, [sp, #0]
 808cfbe:	461f      	mov	r7, r3
 808cfc0:	2800      	cmp	r0, #0
 808cfc2:	f103 0320 	add.w	r3, r3, #32
 808cfc6:	f8df 8350 	ldr.w	r8, [pc, #848]	; 808d318 <mbedtls_internal_aes_decrypt+0x394>
 808cfca:	fa5f f08a 	uxtb.w	r0, sl
 808cfce:	f8df c338 	ldr.w	ip, [pc, #824]	; 808d308 <mbedtls_internal_aes_decrypt+0x384>
 808cfd2:	ea4f 691b 	mov.w	r9, fp, lsr #24
 808cfd6:	f340 80c1 	ble.w	808d15c <mbedtls_internal_aes_decrypt+0x1d8>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808cfda:	f856 7029 	ldr.w	r7, [r6, r9, lsl #2]
 808cfde:	f85e 8020 	ldr.w	r8, [lr, r0, lsl #2]
 808cfe2:	48cb      	ldr	r0, [pc, #812]	; (808d310 <mbedtls_internal_aes_decrypt+0x38c>)
 808cfe4:	ea88 0807 	eor.w	r8, r8, r7
 808cfe8:	f853 7c20 	ldr.w	r7, [r3, #-32]
 808cfec:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 808cff0:	ea88 0807 	eor.w	r8, r8, r7
 808cff4:	f3c1 2707 	ubfx	r7, r1, #8, #8
 808cff8:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 808cffc:	ea88 0707 	eor.w	r7, r8, r7
 808d000:	f850 802c 	ldr.w	r8, [r0, ip, lsl #2]
 808d004:	fa5f fc8b 	uxtb.w	ip, fp
 808d008:	ea87 0808 	eor.w	r8, r7, r8
 808d00c:	0e27      	lsrs	r7, r4, #24
 808d00e:	f85e 902c 	ldr.w	r9, [lr, ip, lsl #2]
 808d012:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 808d016:	f3ca 2c07 	ubfx	ip, sl, #8, #8
 808d01a:	ea89 0907 	eor.w	r9, r9, r7
 808d01e:	f853 7c1c 	ldr.w	r7, [r3, #-28]
 808d022:	ea89 0707 	eor.w	r7, r9, r7
 808d026:	f855 902c 	ldr.w	r9, [r5, ip, lsl #2]
 808d02a:	f3c1 4c07 	ubfx	ip, r1, #16, #8
 808d02e:	ea87 0709 	eor.w	r7, r7, r9
 808d032:	f850 902c 	ldr.w	r9, [r0, ip, lsl #2]
 808d036:	fa5f fc84 	uxtb.w	ip, r4
 808d03a:	ea87 0909 	eor.w	r9, r7, r9
 808d03e:	0e0f      	lsrs	r7, r1, #24
 808d040:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 808d044:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
 808d048:	b2c9      	uxtb	r1, r1
 808d04a:	ea8c 0c07 	eor.w	ip, ip, r7
 808d04e:	f853 7c18 	ldr.w	r7, [r3, #-24]
 808d052:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 808d056:	ea8c 0707 	eor.w	r7, ip, r7
 808d05a:	f3cb 2c07 	ubfx	ip, fp, #8, #8
 808d05e:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 808d062:	f3c4 2407 	ubfx	r4, r4, #8, #8
 808d066:	ea87 070c 	eor.w	r7, r7, ip
 808d06a:	f3ca 4c07 	ubfx	ip, sl, #16, #8
 808d06e:	f850 c02c 	ldr.w	ip, [r0, ip, lsl #2]
 808d072:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 808d076:	ea87 070c 	eor.w	r7, r7, ip
 808d07a:	f856 c02a 	ldr.w	ip, [r6, sl, lsl #2]
 808d07e:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 808d082:	ea81 0c0c 	eor.w	ip, r1, ip
 808d086:	f853 1c14 	ldr.w	r1, [r3, #-20]
 808d08a:	ea8c 0101 	eor.w	r1, ip, r1
 808d08e:	4061      	eors	r1, r4
 808d090:	f3cb 4407 	ubfx	r4, fp, #16, #8
 808d094:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 808d098:	ea81 0c04 	eor.w	ip, r1, r4
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808d09c:	fa5f f488 	uxtb.w	r4, r8
 808d0a0:	ea4f 6119 	mov.w	r1, r9, lsr #24
 808d0a4:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 808d0a8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 808d0ac:	4061      	eors	r1, r4
 808d0ae:	f853 4c10 	ldr.w	r4, [r3, #-16]
 808d0b2:	404c      	eors	r4, r1
 808d0b4:	f3cc 2107 	ubfx	r1, ip, #8, #8
 808d0b8:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 808d0bc:	404c      	eors	r4, r1
 808d0be:	f3c7 4107 	ubfx	r1, r7, #16, #8
 808d0c2:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 808d0c6:	ea84 0a01 	eor.w	sl, r4, r1
 808d0ca:	fa5f f489 	uxtb.w	r4, r9
 808d0ce:	0e39      	lsrs	r1, r7, #24
 808d0d0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 808d0d4:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 808d0d8:	404c      	eors	r4, r1
 808d0da:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 808d0de:	4061      	eors	r1, r4
 808d0e0:	f3c8 2407 	ubfx	r4, r8, #8, #8
 808d0e4:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 808d0e8:	4061      	eors	r1, r4
 808d0ea:	f3cc 4407 	ubfx	r4, ip, #16, #8
 808d0ee:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 808d0f2:	ea81 0b04 	eor.w	fp, r1, r4
 808d0f6:	b2fc      	uxtb	r4, r7
 808d0f8:	ea4f 611c 	mov.w	r1, ip, lsr #24
 808d0fc:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 808d100:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 808d104:	fa5f fc8c 	uxtb.w	ip, ip
 808d108:	404c      	eors	r4, r1
 808d10a:	f853 1c08 	ldr.w	r1, [r3, #-8]
 808d10e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 808d112:	4061      	eors	r1, r4
 808d114:	f3c9 2407 	ubfx	r4, r9, #8, #8
 808d118:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 808d11c:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 808d120:	4061      	eors	r1, r4
 808d122:	f3c8 4407 	ubfx	r4, r8, #16, #8
 808d126:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 808d12a:	ea4f 6818 	mov.w	r8, r8, lsr #24
 808d12e:	404c      	eors	r4, r1
 808d130:	f85e 102c 	ldr.w	r1, [lr, ip, lsl #2]
 808d134:	f856 c028 	ldr.w	ip, [r6, r8, lsl #2]
 808d138:	f3c9 4907 	ubfx	r9, r9, #16, #8
 808d13c:	ea81 0c0c 	eor.w	ip, r1, ip
 808d140:	f853 1c04 	ldr.w	r1, [r3, #-4]
 808d144:	ea8c 0101 	eor.w	r1, ip, r1
 808d148:	4079      	eors	r1, r7
 808d14a:	f850 7029 	ldr.w	r7, [r0, r9, lsl #2]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d14e:	9800      	ldr	r0, [sp, #0]
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808d150:	4079      	eors	r1, r7
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d152:	3801      	subs	r0, #1
 808d154:	9000      	str	r0, [sp, #0]
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808d156:	6818      	ldr	r0, [r3, #0]
 808d158:	9001      	str	r0, [sp, #4]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808d15a:	e72f      	b.n	808cfbc <mbedtls_internal_aes_decrypt+0x38>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808d15c:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 808d160:	f85c 3029 	ldr.w	r3, [ip, r9, lsl #2]
 808d164:	4e69      	ldr	r6, [pc, #420]	; (808d30c <mbedtls_internal_aes_decrypt+0x388>)
 808d166:	4043      	eors	r3, r0
 808d168:	9801      	ldr	r0, [sp, #4]
 808d16a:	4d69      	ldr	r5, [pc, #420]	; (808d310 <mbedtls_internal_aes_decrypt+0x38c>)
 808d16c:	ea83 0900 	eor.w	r9, r3, r0
 808d170:	f3c1 2307 	ubfx	r3, r1, #8, #8
 808d174:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 808d178:	fa5f f08b 	uxtb.w	r0, fp
 808d17c:	ea89 0903 	eor.w	r9, r9, r3
 808d180:	f3c4 4307 	ubfx	r3, r4, #16, #8
 808d184:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 808d188:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 808d18c:	ea89 0903 	eor.w	r9, r9, r3
 808d190:	0e23      	lsrs	r3, r4, #24
 808d192:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 808d196:	fa5f fe84 	uxtb.w	lr, r4
 808d19a:	4058      	eors	r0, r3
 808d19c:	687b      	ldr	r3, [r7, #4]
 808d19e:	f858 e02e 	ldr.w	lr, [r8, lr, lsl #2]
 808d1a2:	4043      	eors	r3, r0
 808d1a4:	f3ca 2007 	ubfx	r0, sl, #8, #8
 808d1a8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 808d1ac:	f3c4 2407 	ubfx	r4, r4, #8, #8
 808d1b0:	4043      	eors	r3, r0
 808d1b2:	f3c1 4007 	ubfx	r0, r1, #16, #8
 808d1b6:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 808d1ba:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 808d1be:	4043      	eors	r3, r0
 808d1c0:	0e08      	lsrs	r0, r1, #24
 808d1c2:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 808d1c6:	b2c9      	uxtb	r1, r1
 808d1c8:	ea8e 0e00 	eor.w	lr, lr, r0
 808d1cc:	68b8      	ldr	r0, [r7, #8]
 808d1ce:	f858 8021 	ldr.w	r8, [r8, r1, lsl #2]
 808d1d2:	ea8e 0000 	eor.w	r0, lr, r0
 808d1d6:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 808d1da:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808d1de:	0e1e      	lsrs	r6, r3, #24
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808d1e0:	ea80 000e 	eor.w	r0, r0, lr
 808d1e4:	f3ca 4e07 	ubfx	lr, sl, #16, #8
 808d1e8:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 808d1ec:	ea80 000e 	eor.w	r0, r0, lr
 808d1f0:	ea4f 6e1a 	mov.w	lr, sl, lsr #24
 808d1f4:	f85c 102e 	ldr.w	r1, [ip, lr, lsl #2]
 808d1f8:	ea88 0e01 	eor.w	lr, r8, r1
 808d1fc:	68f9      	ldr	r1, [r7, #12]
 808d1fe:	ea8e 0101 	eor.w	r1, lr, r1
 808d202:	4061      	eors	r1, r4
 808d204:	f3cb 4407 	ubfx	r4, fp, #16, #8
 808d208:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 808d20c:	fa5f f589 	uxtb.w	r5, r9
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808d210:	4061      	eors	r1, r4

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 808d212:	4c40      	ldr	r4, [pc, #256]	; (808d314 <mbedtls_internal_aes_decrypt+0x390>)
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808d214:	f814 e005 	ldrb.w	lr, [r4, r5]
 808d218:	693d      	ldr	r5, [r7, #16]
 808d21a:	ea8e 0505 	eor.w	r5, lr, r5
 808d21e:	f814 e006 	ldrb.w	lr, [r4, r6]

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 808d222:	f3c1 2607 	ubfx	r6, r1, #8, #8
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808d226:	ea85 650e 	eor.w	r5, r5, lr, lsl #24
 808d22a:	f814 e006 	ldrb.w	lr, [r4, r6]
    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 808d22e:	f3c0 4607 	ubfx	r6, r0, #16, #8
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808d232:	ea85 250e 	eor.w	r5, r5, lr, lsl #8
 808d236:	f814 e006 	ldrb.w	lr, [r4, r6]
 808d23a:	ea85 4e0e 	eor.w	lr, r5, lr, lsl #16

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 808d23e:	b2dd      	uxtb	r5, r3
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808d240:	5d66      	ldrb	r6, [r4, r5]
 808d242:	697d      	ldr	r5, [r7, #20]
 808d244:	4075      	eors	r5, r6
 808d246:	0e06      	lsrs	r6, r0, #24
 808d248:	5da6      	ldrb	r6, [r4, r6]
 808d24a:	ea85 6506 	eor.w	r5, r5, r6, lsl #24
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 808d24e:	f3c9 2607 	ubfx	r6, r9, #8, #8
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808d252:	5da6      	ldrb	r6, [r4, r6]
 808d254:	ea85 2506 	eor.w	r5, r5, r6, lsl #8
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 808d258:	f3c1 4607 	ubfx	r6, r1, #16, #8
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808d25c:	5da6      	ldrb	r6, [r4, r6]
 808d25e:	ea85 4606 	eor.w	r6, r5, r6, lsl #16

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 808d262:	b2c5      	uxtb	r5, r0
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808d264:	f814 c005 	ldrb.w	ip, [r4, r5]
 808d268:	69bd      	ldr	r5, [r7, #24]

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 808d26a:	f3c0 2007 	ubfx	r0, r0, #8, #8

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808d26e:	ea8c 0505 	eor.w	r5, ip, r5
 808d272:	ea4f 6c11 	mov.w	ip, r1, lsr #24
 808d276:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 808d27a:	b2c9      	uxtb	r1, r1

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808d27c:	ea85 650c 	eor.w	r5, r5, ip, lsl #24
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 808d280:	f3c3 2c07 	ubfx	ip, r3, #8, #8
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808d284:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808d288:	5c20      	ldrb	r0, [r4, r0]

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808d28a:	ea85 250c 	eor.w	r5, r5, ip, lsl #8
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 808d28e:	f3c9 4c07 	ubfx	ip, r9, #16, #8
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808d292:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808d296:	ea4f 6919 	mov.w	r9, r9, lsr #24

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808d29a:	ea85 450c 	eor.w	r5, r5, ip, lsl #16

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808d29e:	f814 c001 	ldrb.w	ip, [r4, r1]
 808d2a2:	69f9      	ldr	r1, [r7, #28]
 808d2a4:	f814 7009 	ldrb.w	r7, [r4, r9]
 808d2a8:	ea8c 0101 	eor.w	r1, ip, r1
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 808d2ac:	f3c3 4307 	ubfx	r3, r3, #16, #8
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808d2b0:	5ce3      	ldrb	r3, [r4, r3]
 808d2b2:	ea81 6107 	eor.w	r1, r1, r7, lsl #24
 808d2b6:	ea81 2100 	eor.w	r1, r1, r0, lsl #8
 808d2ba:	ea81 4303 	eor.w	r3, r1, r3, lsl #16

    PUT_UINT32_LE( X0, output,  0 );
 808d2be:	ea4f 211e 	mov.w	r1, lr, lsr #8
 808d2c2:	7051      	strb	r1, [r2, #1]
 808d2c4:	ea4f 411e 	mov.w	r1, lr, lsr #16
 808d2c8:	7091      	strb	r1, [r2, #2]
    PUT_UINT32_LE( X1, output,  4 );
 808d2ca:	0a31      	lsrs	r1, r6, #8
 808d2cc:	7151      	strb	r1, [r2, #5]
 808d2ce:	0c31      	lsrs	r1, r6, #16
 808d2d0:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
 808d2d2:	0a29      	lsrs	r1, r5, #8
 808d2d4:	7251      	strb	r1, [r2, #9]
 808d2d6:	0c29      	lsrs	r1, r5, #16
 808d2d8:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
 808d2da:	0a19      	lsrs	r1, r3, #8
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 808d2dc:	f882 e000 	strb.w	lr, [r2]
    PUT_UINT32_LE( X1, output,  4 );
 808d2e0:	7116      	strb	r6, [r2, #4]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 808d2e2:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    PUT_UINT32_LE( X1, output,  4 );
 808d2e6:	0e36      	lsrs	r6, r6, #24
    PUT_UINT32_LE( X2, output,  8 );
 808d2e8:	7215      	strb	r5, [r2, #8]
    PUT_UINT32_LE( X3, output, 12 );
 808d2ea:	7313      	strb	r3, [r2, #12]
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
 808d2ec:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X3, output, 12 );
 808d2ee:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
 808d2f0:	2000      	movs	r0, #0
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
 808d2f2:	0c19      	lsrs	r1, r3, #16
 808d2f4:	0e1b      	lsrs	r3, r3, #24
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 808d2f6:	f882 e003 	strb.w	lr, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
 808d2fa:	71d6      	strb	r6, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
 808d2fc:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
 808d2fe:	7391      	strb	r1, [r2, #14]
 808d300:	73d3      	strb	r3, [r2, #15]

    return( 0 );
}
 808d302:	b003      	add	sp, #12
 808d304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d308:	20001bf8 	.word	0x20001bf8
 808d30c:	200023f8 	.word	0x200023f8
 808d310:	200027f8 	.word	0x200027f8
 808d314:	200019f8 	.word	0x200019f8
 808d318:	20001ff8 	.word	0x20001ff8

0808d31c <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
 808d31c:	b410      	push	{r4}
 808d31e:	4614      	mov	r4, r2
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 808d320:	2901      	cmp	r1, #1
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
 808d322:	461a      	mov	r2, r3
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 808d324:	4621      	mov	r1, r4
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 808d326:	d102      	bne.n	808d32e <mbedtls_aes_crypt_ecb+0x12>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
}
 808d328:	bc10      	pop	{r4}
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 808d32a:	f7ff bc5f 	b.w	808cbec <mbedtls_internal_aes_encrypt>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
}
 808d32e:	bc10      	pop	{r4}
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 808d330:	f7ff be28 	b.w	808cf84 <mbedtls_internal_aes_decrypt>

0808d334 <mbedtls_aes_crypt_cbc>:
                    int mode,
                    size_t length,
                    unsigned char iv[16],
                    const unsigned char *input,
                    unsigned char *output )
{
 808d334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808d338:	4698      	mov	r8, r3
 808d33a:	b085      	sub	sp, #20
    int i;
    unsigned char temp[16];

    if( length % 16 )
 808d33c:	0713      	lsls	r3, r2, #28
                    int mode,
                    size_t length,
                    unsigned char iv[16],
                    const unsigned char *input,
                    unsigned char *output )
{
 808d33e:	4681      	mov	r9, r0
 808d340:	460f      	mov	r7, r1
 808d342:	4616      	mov	r6, r2
 808d344:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 808d346:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    int i;
    unsigned char temp[16];

    if( length % 16 )
 808d348:	d15a      	bne.n	808d400 <mbedtls_aes_crypt_cbc+0xcc>
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
 808d34a:	bba9      	cbnz	r1, 808d3b8 <mbedtls_aes_crypt_cbc+0x84>
 808d34c:	462a      	mov	r2, r5
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );

            for( i = 0; i < 16; i++ )
                output[i] = (unsigned char)( output[i] ^ iv[i] );

            memcpy( iv, temp, 16 );
 808d34e:	f10d 0b10 	add.w	fp, sp, #16
 808d352:	1ab3      	subs	r3, r6, r2
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
    {
        while( length > 0 )
 808d354:	42dd      	cmn	r5, r3
 808d356:	d101      	bne.n	808d35c <mbedtls_aes_crypt_cbc+0x28>
            output += 16;
            length -= 16;
        }
    }

    return( 0 );
 808d358:	2000      	movs	r0, #0
 808d35a:	e053      	b.n	808d404 <mbedtls_aes_crypt_cbc+0xd0>

    if( mode == MBEDTLS_AES_DECRYPT )
    {
        while( length > 0 )
        {
            memcpy( temp, input, 16 );
 808d35c:	4613      	mov	r3, r2
 808d35e:	46ee      	mov	lr, sp
 808d360:	466f      	mov	r7, sp
 808d362:	f102 0a10 	add.w	sl, r2, #16
 808d366:	46f4      	mov	ip, lr
 808d368:	6818      	ldr	r0, [r3, #0]
 808d36a:	6859      	ldr	r1, [r3, #4]
 808d36c:	3308      	adds	r3, #8
 808d36e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 808d372:	4553      	cmp	r3, sl
 808d374:	46e6      	mov	lr, ip
 808d376:	d1f6      	bne.n	808d366 <mbedtls_aes_crypt_cbc+0x32>
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );
 808d378:	4623      	mov	r3, r4
 808d37a:	2100      	movs	r1, #0
 808d37c:	4648      	mov	r0, r9
 808d37e:	f7ff ffcd 	bl	808d31c <mbedtls_aes_crypt_ecb>
 808d382:	1e63      	subs	r3, r4, #1
 808d384:	f108 31ff 	add.w	r1, r8, #4294967295
 808d388:	f104 000f 	add.w	r0, r4, #15

            for( i = 0; i < 16; i++ )
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 808d38c:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 808d390:	f811 2f01 	ldrb.w	r2, [r1, #1]!
        while( length > 0 )
        {
            memcpy( temp, input, 16 );
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );

            for( i = 0; i < 16; i++ )
 808d394:	4283      	cmp	r3, r0
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 808d396:	ea8e 0202 	eor.w	r2, lr, r2
 808d39a:	701a      	strb	r2, [r3, #0]
        while( length > 0 )
        {
            memcpy( temp, input, 16 );
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );

            for( i = 0; i < 16; i++ )
 808d39c:	d1f6      	bne.n	808d38c <mbedtls_aes_crypt_cbc+0x58>
                output[i] = (unsigned char)( output[i] ^ iv[i] );

            memcpy( iv, temp, 16 );
 808d39e:	4642      	mov	r2, r8
 808d3a0:	463b      	mov	r3, r7
 808d3a2:	cb03      	ldmia	r3!, {r0, r1}
 808d3a4:	455b      	cmp	r3, fp
 808d3a6:	6010      	str	r0, [r2, #0]
 808d3a8:	6051      	str	r1, [r2, #4]
 808d3aa:	461f      	mov	r7, r3
 808d3ac:	f102 0208 	add.w	r2, r2, #8
 808d3b0:	d1f6      	bne.n	808d3a0 <mbedtls_aes_crypt_cbc+0x6c>

            input  += 16;
 808d3b2:	4652      	mov	r2, sl
            output += 16;
 808d3b4:	3410      	adds	r4, #16
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
    {
        while( length > 0 )
 808d3b6:	e7cc      	b.n	808d352 <mbedtls_aes_crypt_cbc+0x1e>
 808d3b8:	1e6b      	subs	r3, r5, #1
            length -= 16;
        }
    }
    else
    {
        while( length > 0 )
 808d3ba:	2e00      	cmp	r6, #0
 808d3bc:	d0cc      	beq.n	808d358 <mbedtls_aes_crypt_cbc+0x24>
 808d3be:	f108 30ff 	add.w	r0, r8, #4294967295
 808d3c2:	1e61      	subs	r1, r4, #1
 808d3c4:	f103 0510 	add.w	r5, r3, #16
        {
            for( i = 0; i < 16; i++ )
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 808d3c8:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 808d3cc:	f810 2f01 	ldrb.w	r2, [r0, #1]!
    }
    else
    {
        while( length > 0 )
        {
            for( i = 0; i < 16; i++ )
 808d3d0:	42ab      	cmp	r3, r5
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 808d3d2:	ea8e 0202 	eor.w	r2, lr, r2
 808d3d6:	f801 2f01 	strb.w	r2, [r1, #1]!
    }
    else
    {
        while( length > 0 )
        {
            for( i = 0; i < 16; i++ )
 808d3da:	d1f5      	bne.n	808d3c8 <mbedtls_aes_crypt_cbc+0x94>
                output[i] = (unsigned char)( input[i] ^ iv[i] );

            mbedtls_aes_crypt_ecb( ctx, mode, output, output );
 808d3dc:	4623      	mov	r3, r4
 808d3de:	4622      	mov	r2, r4
 808d3e0:	4639      	mov	r1, r7
 808d3e2:	4648      	mov	r0, r9
 808d3e4:	f7ff ff9a 	bl	808d31c <mbedtls_aes_crypt_ecb>
            memcpy( iv, output, 16 );
 808d3e8:	4643      	mov	r3, r8
 808d3ea:	f104 0210 	add.w	r2, r4, #16
 808d3ee:	f854 1b04 	ldr.w	r1, [r4], #4
 808d3f2:	4294      	cmp	r4, r2
 808d3f4:	f843 1b04 	str.w	r1, [r3], #4
 808d3f8:	d1f9      	bne.n	808d3ee <mbedtls_aes_crypt_cbc+0xba>

            input  += 16;
            output += 16;
            length -= 16;
 808d3fa:	3e10      	subs	r6, #16
            length -= 16;
        }
    }
    else
    {
        while( length > 0 )
 808d3fc:	462b      	mov	r3, r5
 808d3fe:	e7dc      	b.n	808d3ba <mbedtls_aes_crypt_cbc+0x86>
{
    int i;
    unsigned char temp[16];

    if( length % 16 )
        return( MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH );
 808d400:	f06f 0021 	mvn.w	r0, #33	; 0x21
            length -= 16;
        }
    }

    return( 0 );
}
 808d404:	b005      	add	sp, #20
 808d406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808d40a <_ZL15mbedtls_zeroizePvj>:
#if defined(MBEDTLS_DES_C)
#include "mbedtls/des.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 808d40a:	4401      	add	r1, r0
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808d40c:	2300      	movs	r3, #0
 808d40e:	4288      	cmp	r0, r1
 808d410:	d002      	beq.n	808d418 <_ZL15mbedtls_zeroizePvj+0xe>
 808d412:	7003      	strb	r3, [r0, #0]
 808d414:	3001      	adds	r0, #1
 808d416:	e7fa      	b.n	808d40e <_ZL15mbedtls_zeroizePvj+0x4>
 808d418:	4770      	bx	lr

0808d41a <_ZL18pkcs12_fill_bufferPhjPKhj>:
    return( ret );
}

static void pkcs12_fill_buffer( unsigned char *data, size_t data_len,
                                const unsigned char *filler, size_t fill_len )
{
 808d41a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808d41e:	4606      	mov	r6, r0
 808d420:	460c      	mov	r4, r1
 808d422:	4617      	mov	r7, r2
 808d424:	4698      	mov	r8, r3
    unsigned char *p = data;
    size_t use_len;

    while( data_len > 0 )
 808d426:	b15c      	cbz	r4, 808d440 <_ZL18pkcs12_fill_bufferPhjPKhj+0x26>
 808d428:	4544      	cmp	r4, r8
 808d42a:	4625      	mov	r5, r4
 808d42c:	bf28      	it	cs
 808d42e:	4645      	movcs	r5, r8
    {
        use_len = ( data_len > fill_len ) ? fill_len : data_len;
        memcpy( p, filler, use_len );
 808d430:	4630      	mov	r0, r6
 808d432:	462a      	mov	r2, r5
 808d434:	4639      	mov	r1, r7
 808d436:	f004 ff88 	bl	809234a <memcpy>
        p += use_len;
 808d43a:	442e      	add	r6, r5
        data_len -= use_len;
 808d43c:	1b64      	subs	r4, r4, r5
                                const unsigned char *filler, size_t fill_len )
{
    unsigned char *p = data;
    size_t use_len;

    while( data_len > 0 )
 808d43e:	e7f2      	b.n	808d426 <_ZL18pkcs12_fill_bufferPhjPKhj+0xc>
 808d440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808d444 <mbedtls_pkcs12_pbe_sha1_rc4_128>:
    mbedtls_zeroize( key, sizeof( key ) );
    mbedtls_arc4_free( &ctx );

    return( ret );
#endif /* MBEDTLS_ARC4_C */
}
 808d444:	4800      	ldr	r0, [pc, #0]	; (808d448 <mbedtls_pkcs12_pbe_sha1_rc4_128+0x4>)
 808d446:	4770      	bx	lr
 808d448:	ffffe100 	.word	0xffffe100

0808d44c <mbedtls_pkcs12_derivation>:

int mbedtls_pkcs12_derivation( unsigned char *data, size_t datalen,
                       const unsigned char *pwd, size_t pwdlen,
                       const unsigned char *salt, size_t saltlen,
                       mbedtls_md_type_t md_type, int id, int iterations )
{
 808d44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
 808d450:	2980      	cmp	r1, #128	; 0x80

int mbedtls_pkcs12_derivation( unsigned char *data, size_t datalen,
                       const unsigned char *pwd, size_t pwdlen,
                       const unsigned char *salt, size_t saltlen,
                       mbedtls_md_type_t md_type, int id, int iterations )
{
 808d452:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 808d456:	9001      	str	r0, [sp, #4]
 808d458:	460f      	mov	r7, r1
 808d45a:	4693      	mov	fp, r2
 808d45c:	4699      	mov	r9, r3
 808d45e:	9da1      	ldr	r5, [sp, #644]	; 0x284

    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
 808d460:	f200 80c3 	bhi.w	808d5ea <mbedtls_pkcs12_derivation+0x19e>
 808d464:	2b40      	cmp	r3, #64	; 0x40
 808d466:	f200 80c0 	bhi.w	808d5ea <mbedtls_pkcs12_derivation+0x19e>
 808d46a:	2d40      	cmp	r5, #64	; 0x40
 808d46c:	f200 80bd 	bhi.w	808d5ea <mbedtls_pkcs12_derivation+0x19e>
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( md_type );
 808d470:	f89d 0288 	ldrb.w	r0, [sp, #648]	; 0x288
 808d474:	f7fa f918 	bl	80876a8 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 808d478:	9000      	str	r0, [sp, #0]
 808d47a:	2800      	cmp	r0, #0
 808d47c:	f000 80b7 	beq.w	808d5ee <mbedtls_pkcs12_derivation+0x1a2>
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    mbedtls_md_init( &md_ctx );
 808d480:	a803      	add	r0, sp, #12
 808d482:	f7fa f91d 	bl	80876c0 <mbedtls_md_init>

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 808d486:	2200      	movs	r2, #0
 808d488:	9900      	ldr	r1, [sp, #0]
 808d48a:	a803      	add	r0, sp, #12
 808d48c:	f7fa f93e 	bl	808770c <mbedtls_md_setup>
 808d490:	2800      	cmp	r0, #0
 808d492:	f040 80ad 	bne.w	808d5f0 <mbedtls_pkcs12_derivation+0x1a4>
        return( ret );
    hlen = mbedtls_md_get_size( md_info );
 808d496:	9800      	ldr	r0, [sp, #0]
 808d498:	f7fa fa4a 	bl	8087930 <mbedtls_md_get_size>

    if( hlen <= 32 )
        v = 64;
 808d49c:	2820      	cmp	r0, #32
 808d49e:	bf8c      	ite	hi
 808d4a0:	2480      	movhi	r4, #128	; 0x80
 808d4a2:	2440      	movls	r4, #64	; 0x40
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );
 808d4a4:	4622      	mov	r2, r4
 808d4a6:	f89d 128c 	ldrb.w	r1, [sp, #652]	; 0x28c

    mbedtls_md_init( &md_ctx );

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
        return( ret );
    hlen = mbedtls_md_get_size( md_info );
 808d4aa:	4682      	mov	sl, r0
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
 808d4ac:	f10d 08d8 	add.w	r8, sp, #216	; 0xd8
    if( hlen <= 32 )
        v = 64;
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );
 808d4b0:	a816      	add	r0, sp, #88	; 0x58
 808d4b2:	f004 ff70 	bl	8092396 <memset>

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
 808d4b6:	462b      	mov	r3, r5
 808d4b8:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 808d4ba:	4621      	mov	r1, r4
 808d4bc:	4640      	mov	r0, r8
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );
 808d4be:	ad56      	add	r5, sp, #344	; 0x158
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
 808d4c0:	f7ff ffab 	bl	808d41a <_ZL18pkcs12_fill_bufferPhjPKhj>
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );
 808d4c4:	464b      	mov	r3, r9
 808d4c6:	465a      	mov	r2, fp
 808d4c8:	4621      	mov	r1, r4
 808d4ca:	4628      	mov	r0, r5
 808d4cc:	f7ff ffa5 	bl	808d41a <_ZL18pkcs12_fill_bufferPhjPKhj>

        if( datalen == 0 )
            break;

        // Concatenating copies of hash_output into hash_block (B)
        pkcs12_fill_buffer( hash_block, v, hash_output, hlen );
 808d4d0:	f50d 79ec 	add.w	r9, sp, #472	; 0x1d8

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );

    p = data;
    while( datalen > 0 )
 808d4d4:	2f00      	cmp	r7, #0
 808d4d6:	d072      	beq.n	808d5be <mbedtls_pkcs12_derivation+0x172>
    {
        // Calculate hash( diversifier || salt_block || pwd_block )
        if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
 808d4d8:	a803      	add	r0, sp, #12
 808d4da:	f7fa f939 	bl	8087750 <mbedtls_md_starts>
 808d4de:	4606      	mov	r6, r0
 808d4e0:	2800      	cmp	r0, #0
 808d4e2:	d16d      	bne.n	808d5c0 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, diversifier, v ) ) != 0 )
 808d4e4:	4622      	mov	r2, r4
 808d4e6:	a916      	add	r1, sp, #88	; 0x58
 808d4e8:	a803      	add	r0, sp, #12
 808d4ea:	f7fa f93b 	bl	8087764 <mbedtls_md_update>
 808d4ee:	4606      	mov	r6, r0
 808d4f0:	2800      	cmp	r0, #0
 808d4f2:	d165      	bne.n	808d5c0 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, salt_block, v ) ) != 0 )
 808d4f4:	4622      	mov	r2, r4
 808d4f6:	4641      	mov	r1, r8
 808d4f8:	a803      	add	r0, sp, #12
 808d4fa:	f7fa f933 	bl	8087764 <mbedtls_md_update>
 808d4fe:	4606      	mov	r6, r0
 808d500:	2800      	cmp	r0, #0
 808d502:	d15d      	bne.n	808d5c0 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, pwd_block, v ) ) != 0 )
 808d504:	4622      	mov	r2, r4
 808d506:	4629      	mov	r1, r5
 808d508:	a803      	add	r0, sp, #12
 808d50a:	f7fa f92b 	bl	8087764 <mbedtls_md_update>
 808d50e:	4606      	mov	r6, r0
 808d510:	2800      	cmp	r0, #0
 808d512:	d155      	bne.n	808d5c0 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_finish( &md_ctx, hash_output ) ) != 0 )
 808d514:	a906      	add	r1, sp, #24
 808d516:	a803      	add	r0, sp, #12
 808d518:	f7fa f92e 	bl	8087778 <mbedtls_md_finish>
 808d51c:	4606      	mov	r6, r0
 808d51e:	2800      	cmp	r0, #0
 808d520:	d14e      	bne.n	808d5c0 <mbedtls_pkcs12_derivation+0x174>
 808d522:	f04f 0b01 	mov.w	fp, #1
            goto exit;

        // Perform remaining ( iterations - 1 ) recursive hash calculations
        for( i = 1; i < (size_t) iterations; i++ )
 808d526:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 808d528:	459b      	cmp	fp, r3
 808d52a:	d20b      	bcs.n	808d544 <mbedtls_pkcs12_derivation+0xf8>
        {
            if( ( ret = mbedtls_md( md_info, hash_output, hlen, hash_output ) ) != 0 )
 808d52c:	ab06      	add	r3, sp, #24
 808d52e:	4652      	mov	r2, sl
 808d530:	4619      	mov	r1, r3
 808d532:	9800      	ldr	r0, [sp, #0]
 808d534:	f7fa f92a 	bl	808778c <mbedtls_md>
 808d538:	4606      	mov	r6, r0
 808d53a:	2800      	cmp	r0, #0
 808d53c:	d140      	bne.n	808d5c0 <mbedtls_pkcs12_derivation+0x174>

        if( ( ret = mbedtls_md_finish( &md_ctx, hash_output ) ) != 0 )
            goto exit;

        // Perform remaining ( iterations - 1 ) recursive hash calculations
        for( i = 1; i < (size_t) iterations; i++ )
 808d53e:	f10b 0b01 	add.w	fp, fp, #1
 808d542:	e7f0      	b.n	808d526 <mbedtls_pkcs12_derivation+0xda>
 808d544:	4557      	cmp	r7, sl
 808d546:	46bb      	mov	fp, r7
 808d548:	bf28      	it	cs
 808d54a:	46d3      	movcs	fp, sl
            if( ( ret = mbedtls_md( md_info, hash_output, hlen, hash_output ) ) != 0 )
                goto exit;
        }

        use_len = ( datalen > hlen ) ? hlen : datalen;
        memcpy( p, hash_output, use_len );
 808d54c:	a906      	add	r1, sp, #24
 808d54e:	465a      	mov	r2, fp
 808d550:	9801      	ldr	r0, [sp, #4]
 808d552:	f004 fefa 	bl	809234a <memcpy>
        datalen -= use_len;
        p += use_len;
 808d556:	9b01      	ldr	r3, [sp, #4]

        if( datalen == 0 )
 808d558:	ebb7 070b 	subs.w	r7, r7, fp
        }

        use_len = ( datalen > hlen ) ? hlen : datalen;
        memcpy( p, hash_output, use_len );
        datalen -= use_len;
        p += use_len;
 808d55c:	445b      	add	r3, fp
 808d55e:	9301      	str	r3, [sp, #4]

        if( datalen == 0 )
 808d560:	d02d      	beq.n	808d5be <mbedtls_pkcs12_derivation+0x172>
            break;

        // Concatenating copies of hash_output into hash_block (B)
        pkcs12_fill_buffer( hash_block, v, hash_output, hlen );
 808d562:	4653      	mov	r3, sl
 808d564:	aa06      	add	r2, sp, #24
 808d566:	4621      	mov	r1, r4
 808d568:	4648      	mov	r0, r9
 808d56a:	f7ff ff56 	bl	808d41a <_ZL18pkcs12_fill_bufferPhjPKhj>
 808d56e:	eb09 0304 	add.w	r3, r9, r4

        // B += 1
        for( i = v; i > 0; i-- )
            if( ++hash_block[i - 1] != 0 )
 808d572:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 808d576:	3201      	adds	r2, #1
 808d578:	b2d2      	uxtb	r2, r2
 808d57a:	701a      	strb	r2, [r3, #0]
 808d57c:	b91a      	cbnz	r2, 808d586 <mbedtls_pkcs12_derivation+0x13a>

        // Concatenating copies of hash_output into hash_block (B)
        pkcs12_fill_buffer( hash_block, v, hash_output, hlen );

        // B += 1
        for( i = v; i > 0; i-- )
 808d57e:	454b      	cmp	r3, r9
 808d580:	d1f7      	bne.n	808d572 <mbedtls_pkcs12_derivation+0x126>
 808d582:	4623      	mov	r3, r4
 808d584:	e001      	b.n	808d58a <mbedtls_pkcs12_derivation+0x13e>
 808d586:	4623      	mov	r3, r4
 808d588:	2200      	movs	r2, #0

        // salt_block += B
        c = 0;
        for( i = v; i > 0; i-- )
        {
            j = salt_block[i - 1] + hash_block[i - 1] + c;
 808d58a:	3b01      	subs	r3, #1
 808d58c:	f818 0003 	ldrb.w	r0, [r8, r3]
 808d590:	f813 1009 	ldrb.w	r1, [r3, r9]
 808d594:	4401      	add	r1, r0
 808d596:	4411      	add	r1, r2
            c = (unsigned char) (j >> 8);
 808d598:	f3c1 2207 	ubfx	r2, r1, #8, #8
            salt_block[i - 1] = j & 0xFF;
 808d59c:	f808 1003 	strb.w	r1, [r8, r3]
            if( ++hash_block[i - 1] != 0 )
                break;

        // salt_block += B
        c = 0;
        for( i = v; i > 0; i-- )
 808d5a0:	2b00      	cmp	r3, #0
 808d5a2:	d1f2      	bne.n	808d58a <mbedtls_pkcs12_derivation+0x13e>
 808d5a4:	4622      	mov	r2, r4

        // pwd_block  += B
        c = 0;
        for( i = v; i > 0; i-- )
        {
            j = pwd_block[i - 1] + hash_block[i - 1] + c;
 808d5a6:	3a01      	subs	r2, #1
 808d5a8:	5d50      	ldrb	r0, [r2, r5]
 808d5aa:	f812 1009 	ldrb.w	r1, [r2, r9]
 808d5ae:	4401      	add	r1, r0
 808d5b0:	4419      	add	r1, r3
            c = (unsigned char) (j >> 8);
 808d5b2:	f3c1 2307 	ubfx	r3, r1, #8, #8
            pwd_block[i - 1] = j & 0xFF;
 808d5b6:	5551      	strb	r1, [r2, r5]
            salt_block[i - 1] = j & 0xFF;
        }

        // pwd_block  += B
        c = 0;
        for( i = v; i > 0; i-- )
 808d5b8:	2a00      	cmp	r2, #0
 808d5ba:	d1f4      	bne.n	808d5a6 <mbedtls_pkcs12_derivation+0x15a>
 808d5bc:	e78a      	b.n	808d4d4 <mbedtls_pkcs12_derivation+0x88>
            c = (unsigned char) (j >> 8);
            pwd_block[i - 1] = j & 0xFF;
        }
    }

    ret = 0;
 808d5be:	2600      	movs	r6, #0

exit:
    mbedtls_zeroize( salt_block, sizeof( salt_block ) );
 808d5c0:	2180      	movs	r1, #128	; 0x80
 808d5c2:	4640      	mov	r0, r8
 808d5c4:	f7ff ff21 	bl	808d40a <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( pwd_block, sizeof( pwd_block ) );
 808d5c8:	2180      	movs	r1, #128	; 0x80
 808d5ca:	4628      	mov	r0, r5
 808d5cc:	f7ff ff1d 	bl	808d40a <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( hash_block, sizeof( hash_block ) );
 808d5d0:	2180      	movs	r1, #128	; 0x80
 808d5d2:	a876      	add	r0, sp, #472	; 0x1d8
 808d5d4:	f7ff ff19 	bl	808d40a <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( hash_output, sizeof( hash_output ) );
 808d5d8:	2140      	movs	r1, #64	; 0x40
 808d5da:	a806      	add	r0, sp, #24
 808d5dc:	f7ff ff15 	bl	808d40a <_ZL15mbedtls_zeroizePvj>

    mbedtls_md_free( &md_ctx );
 808d5e0:	a803      	add	r0, sp, #12
 808d5e2:	f7fa f872 	bl	80876ca <mbedtls_md_free>

    return( ret );
 808d5e6:	4630      	mov	r0, r6
 808d5e8:	e002      	b.n	808d5f0 <mbedtls_pkcs12_derivation+0x1a4>
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );
 808d5ea:	4803      	ldr	r0, [pc, #12]	; (808d5f8 <mbedtls_pkcs12_derivation+0x1ac>)
 808d5ec:	e000      	b.n	808d5f0 <mbedtls_pkcs12_derivation+0x1a4>

    md_info = mbedtls_md_info_from_type( md_type );
    if( md_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );
 808d5ee:	4803      	ldr	r0, [pc, #12]	; (808d5fc <mbedtls_pkcs12_derivation+0x1b0>)
    mbedtls_zeroize( hash_output, sizeof( hash_output ) );

    mbedtls_md_free( &md_ctx );

    return( ret );
}
 808d5f0:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 808d5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d5f8:	ffffe080 	.word	0xffffe080
 808d5fc:	ffffe100 	.word	0xffffe100

0808d600 <mbedtls_pkcs12_pbe>:
int mbedtls_pkcs12_pbe( mbedtls_asn1_buf *pbe_params, int mode,
                mbedtls_cipher_type_t cipher_type, mbedtls_md_type_t md_type,
                const unsigned char *pwd,  size_t pwdlen,
                const unsigned char *data, size_t len,
                unsigned char *output )
{
 808d600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808d604:	4604      	mov	r4, r0
 808d606:	b0d9      	sub	sp, #356	; 0x164
    int ret, keylen = 0;
    unsigned char key[32];
    unsigned char iv[16];
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_cipher_context_t cipher_ctx;
    size_t olen = 0;
 808d608:	2600      	movs	r6, #0

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
 808d60a:	4610      	mov	r0, r2
int mbedtls_pkcs12_pbe( mbedtls_asn1_buf *pbe_params, int mode,
                mbedtls_cipher_type_t cipher_type, mbedtls_md_type_t md_type,
                const unsigned char *pwd,  size_t pwdlen,
                const unsigned char *data, size_t len,
                unsigned char *output )
{
 808d60c:	468b      	mov	fp, r1
 808d60e:	4699      	mov	r9, r3
    int ret, keylen = 0;
    unsigned char key[32];
    unsigned char iv[16];
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_cipher_context_t cipher_ctx;
    size_t olen = 0;
 808d610:	9606      	str	r6, [sp, #24]

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
 808d612:	f7f5 fbed 	bl	8082df0 <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
 808d616:	4605      	mov	r5, r0
 808d618:	2800      	cmp	r0, #0
 808d61a:	f000 80ac 	beq.w	808d776 <mbedtls_pkcs12_pbe+0x176>
    int ret, iterations = 0;
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
 808d61e:	9b63      	ldr	r3, [sp, #396]	; 0x18c

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    keylen = cipher_info->key_bitlen / 8;
 808d620:	6847      	ldr	r7, [r0, #4]
    int ret, iterations = 0;
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
 808d622:	2b80      	cmp	r3, #128	; 0x80

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    keylen = cipher_info->key_bitlen / 8;
 808d624:	ea4f 07d7 	mov.w	r7, r7, lsr #3

    if( ( ret = pkcs12_pbe_derive_key_iv( pbe_params, md_type, pwd, pwdlen,
                                          key, keylen,
                                          iv, cipher_info->iv_size ) ) != 0 )
 808d628:	f8d0 800c 	ldr.w	r8, [r0, #12]
static int pkcs12_pbe_derive_key_iv( mbedtls_asn1_buf *pbe_params, mbedtls_md_type_t md_type,
                                     const unsigned char *pwd,  size_t pwdlen,
                                     unsigned char *key, size_t keylen,
                                     unsigned char *iv,  size_t ivlen )
{
    int ret, iterations = 0;
 808d62c:	9607      	str	r6, [sp, #28]
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
 808d62e:	d85e      	bhi.n	808d6ee <mbedtls_pkcs12_pbe+0xee>
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
    memset( &unipwd, 0, sizeof(unipwd) );
 808d630:	4631      	mov	r1, r6
 808d632:	f44f 7281 	mov.w	r2, #258	; 0x102
 808d636:	a817      	add	r0, sp, #92	; 0x5c
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
 808d638:	9608      	str	r6, [sp, #32]
 808d63a:	9609      	str	r6, [sp, #36]	; 0x24
 808d63c:	960a      	str	r6, [sp, #40]	; 0x28
    memset( &unipwd, 0, sizeof(unipwd) );
 808d63e:	f004 feaa 	bl	8092396 <memset>
static int pkcs12_parse_pbe_params( mbedtls_asn1_buf *params,
                                    mbedtls_asn1_buf *salt, int *iterations )
{
    int ret;
    unsigned char **p = &params->p;
    const unsigned char *end = params->p + params->len;
 808d642:	6863      	ldr	r3, [r4, #4]
 808d644:	68a6      	ldr	r6, [r4, #8]

static int pkcs12_parse_pbe_params( mbedtls_asn1_buf *params,
                                    mbedtls_asn1_buf *salt, int *iterations )
{
    int ret;
    unsigned char **p = &params->p;
 808d646:	f104 0a08 	add.w	sl, r4, #8
    const unsigned char *end = params->p + params->len;
 808d64a:	441e      	add	r6, r3
     *    salt          OCTET STRING,
     *    iterations    INTEGER
     *  }
     *
     */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 808d64c:	6823      	ldr	r3, [r4, #0]
 808d64e:	2b30      	cmp	r3, #48	; 0x30
 808d650:	f040 8093 	bne.w	808d77a <mbedtls_pkcs12_pbe+0x17a>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    if( ( ret = mbedtls_asn1_get_tag( p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 808d654:	2304      	movs	r3, #4
 808d656:	aa09      	add	r2, sp, #36	; 0x24
 808d658:	4631      	mov	r1, r6
 808d65a:	4650      	mov	r0, sl
 808d65c:	f7f5 fea2 	bl	80833a4 <mbedtls_asn1_get_tag>
 808d660:	b950      	cbnz	r0, 808d678 <mbedtls_pkcs12_pbe+0x78>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    salt->p = *p;
 808d662:	68a2      	ldr	r2, [r4, #8]
    *p += salt->len;
 808d664:	9b09      	ldr	r3, [sp, #36]	; 0x24
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    if( ( ret = mbedtls_asn1_get_tag( p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    salt->p = *p;
 808d666:	920a      	str	r2, [sp, #40]	; 0x28
    *p += salt->len;
 808d668:	4413      	add	r3, r2
 808d66a:	60a3      	str	r3, [r4, #8]

    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
 808d66c:	aa07      	add	r2, sp, #28
 808d66e:	4631      	mov	r1, r6
 808d670:	4650      	mov	r0, sl
 808d672:	f7f5 fec4 	bl	80833fe <mbedtls_asn1_get_int>
 808d676:	b118      	cbz	r0, 808d680 <mbedtls_pkcs12_pbe+0x80>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );
 808d678:	f5a0 50f4 	sub.w	r0, r0, #7808	; 0x1e80
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
    memset( &unipwd, 0, sizeof(unipwd) );

    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
 808d67c:	b118      	cbz	r0, 808d686 <mbedtls_pkcs12_pbe+0x86>
 808d67e:	e07f      	b.n	808d780 <mbedtls_pkcs12_pbe+0x180>
    *p += salt->len;

    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    if( *p != end )
 808d680:	68a3      	ldr	r3, [r4, #8]
 808d682:	429e      	cmp	r6, r3
 808d684:	d17b      	bne.n	808d77e <mbedtls_pkcs12_pbe+0x17e>
int mbedtls_pkcs12_pbe( mbedtls_asn1_buf *pbe_params, int mode,
                mbedtls_cipher_type_t cipher_type, mbedtls_md_type_t md_type,
                const unsigned char *pwd,  size_t pwdlen,
                const unsigned char *data, size_t len,
                unsigned char *output )
{
 808d686:	2300      	movs	r3, #0

    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
                                         &iterations ) ) != 0 )
        return( ret );

    for( i = 0; i < pwdlen; i++ )
 808d688:	9a63      	ldr	r2, [sp, #396]	; 0x18c
 808d68a:	429a      	cmp	r2, r3
 808d68c:	d007      	beq.n	808d69e <mbedtls_pkcs12_pbe+0x9e>
        unipwd[i * 2 + 1] = pwd[i];
 808d68e:	9962      	ldr	r1, [sp, #392]	; 0x188
 808d690:	aa17      	add	r2, sp, #92	; 0x5c
 808d692:	5cc9      	ldrb	r1, [r1, r3]
 808d694:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 808d698:	7051      	strb	r1, [r2, #1]

    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
                                         &iterations ) ) != 0 )
        return( ret );

    for( i = 0; i < pwdlen; i++ )
 808d69a:	3301      	adds	r3, #1
 808d69c:	e7f4      	b.n	808d688 <mbedtls_pkcs12_pbe+0x88>
        unipwd[i * 2 + 1] = pwd[i];

    if( ( ret = mbedtls_pkcs12_derivation( key, keylen, unipwd, pwdlen * 2 + 2,
 808d69e:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 808d6a0:	f8cd 9008 	str.w	r9, [sp, #8]
 808d6a4:	1c5c      	adds	r4, r3, #1
 808d6a6:	9b07      	ldr	r3, [sp, #28]
 808d6a8:	0064      	lsls	r4, r4, #1
 808d6aa:	9304      	str	r3, [sp, #16]
 808d6ac:	2301      	movs	r3, #1
 808d6ae:	9303      	str	r3, [sp, #12]
 808d6b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808d6b2:	aa17      	add	r2, sp, #92	; 0x5c
 808d6b4:	9301      	str	r3, [sp, #4]
 808d6b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808d6b8:	4639      	mov	r1, r7
 808d6ba:	9300      	str	r3, [sp, #0]
 808d6bc:	a80f      	add	r0, sp, #60	; 0x3c
 808d6be:	4623      	mov	r3, r4
 808d6c0:	f7ff fec4 	bl	808d44c <mbedtls_pkcs12_derivation>
 808d6c4:	b9a8      	cbnz	r0, 808d6f2 <mbedtls_pkcs12_pbe+0xf2>
                                   MBEDTLS_PKCS12_DERIVE_KEY, iterations ) ) != 0 )
    {
        return( ret );
    }

    if( iv == NULL || ivlen == 0 )
 808d6c6:	f1b8 0f00 	cmp.w	r8, #0
 808d6ca:	d014      	beq.n	808d6f6 <mbedtls_pkcs12_pbe+0xf6>
        return( 0 );

    if( ( ret = mbedtls_pkcs12_derivation( iv, ivlen, unipwd, pwdlen * 2 + 2,
 808d6cc:	9b07      	ldr	r3, [sp, #28]
 808d6ce:	f8cd 9008 	str.w	r9, [sp, #8]
 808d6d2:	9304      	str	r3, [sp, #16]
 808d6d4:	2302      	movs	r3, #2
 808d6d6:	9303      	str	r3, [sp, #12]
 808d6d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808d6da:	aa17      	add	r2, sp, #92	; 0x5c
 808d6dc:	9301      	str	r3, [sp, #4]
 808d6de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808d6e0:	4641      	mov	r1, r8
 808d6e2:	9300      	str	r3, [sp, #0]
 808d6e4:	a80b      	add	r0, sp, #44	; 0x2c
 808d6e6:	4623      	mov	r3, r4
 808d6e8:	f7ff feb0 	bl	808d44c <mbedtls_pkcs12_derivation>
 808d6ec:	e001      	b.n	808d6f2 <mbedtls_pkcs12_pbe+0xf2>
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );
 808d6ee:	4826      	ldr	r0, [pc, #152]	; (808d788 <mbedtls_pkcs12_pbe+0x188>)
 808d6f0:	e046      	b.n	808d780 <mbedtls_pkcs12_pbe+0x180>
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    keylen = cipher_info->key_bitlen / 8;

    if( ( ret = pkcs12_pbe_derive_key_iv( pbe_params, md_type, pwd, pwdlen,
 808d6f2:	2800      	cmp	r0, #0
 808d6f4:	d144      	bne.n	808d780 <mbedtls_pkcs12_pbe+0x180>
                                          iv, cipher_info->iv_size ) ) != 0 )
    {
        return( ret );
    }

    mbedtls_cipher_init( &cipher_ctx );
 808d6f6:	a817      	add	r0, sp, #92	; 0x5c
 808d6f8:	f7f5 fb9c 	bl	8082e34 <mbedtls_cipher_init>

    if( ( ret = mbedtls_cipher_setup( &cipher_ctx, cipher_info ) ) != 0 )
 808d6fc:	4629      	mov	r1, r5
 808d6fe:	a817      	add	r0, sp, #92	; 0x5c
 808d700:	f7f5 fd6c 	bl	80831dc <mbedtls_cipher_setup>
 808d704:	4604      	mov	r4, r0
 808d706:	bb48      	cbnz	r0, 808d75c <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_setkey( &cipher_ctx, key, 8 * keylen, (mbedtls_operation_t) mode ) ) != 0 )
 808d708:	fa4f f38b 	sxtb.w	r3, fp
 808d70c:	00fa      	lsls	r2, r7, #3
 808d70e:	a90f      	add	r1, sp, #60	; 0x3c
 808d710:	a817      	add	r0, sp, #92	; 0x5c
 808d712:	f7f5 fba5 	bl	8082e60 <mbedtls_cipher_setkey>
 808d716:	4604      	mov	r4, r0
 808d718:	bb00      	cbnz	r0, 808d75c <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_set_iv( &cipher_ctx, iv, cipher_info->iv_size ) ) != 0 )
 808d71a:	68ea      	ldr	r2, [r5, #12]
 808d71c:	a90b      	add	r1, sp, #44	; 0x2c
 808d71e:	a817      	add	r0, sp, #92	; 0x5c
 808d720:	f7f5 fbc0 	bl	8082ea4 <mbedtls_cipher_set_iv>
 808d724:	4604      	mov	r4, r0
 808d726:	b9c8      	cbnz	r0, 808d75c <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_reset( &cipher_ctx ) ) != 0 )
 808d728:	a817      	add	r0, sp, #92	; 0x5c
 808d72a:	f7f5 fbdb 	bl	8082ee4 <mbedtls_cipher_reset>
 808d72e:	4604      	mov	r4, r0
 808d730:	b9a0      	cbnz	r0, 808d75c <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_update( &cipher_ctx, data, len,
 808d732:	ad06      	add	r5, sp, #24
 808d734:	9500      	str	r5, [sp, #0]
 808d736:	a964      	add	r1, sp, #400	; 0x190
 808d738:	c90e      	ldmia	r1, {r1, r2, r3}
 808d73a:	a817      	add	r0, sp, #92	; 0x5c
 808d73c:	f7f5 fbde 	bl	8082efc <mbedtls_cipher_update>
 808d740:	4604      	mov	r4, r0
 808d742:	b958      	cbnz	r0, 808d75c <mbedtls_pkcs12_pbe+0x15c>
                                output, &olen ) ) != 0 )
    {
        goto exit;
    }

    if( ( ret = mbedtls_cipher_finish( &cipher_ctx, output + olen, &olen ) ) != 0 )
 808d744:	6829      	ldr	r1, [r5, #0]
 808d746:	9b66      	ldr	r3, [sp, #408]	; 0x198
 808d748:	462a      	mov	r2, r5
 808d74a:	4419      	add	r1, r3
 808d74c:	a817      	add	r0, sp, #92	; 0x5c
 808d74e:	f7f5 fc9f 	bl	8083090 <mbedtls_cipher_finish>
        ret = MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH;
 808d752:	f5a4 54f0 	sub.w	r4, r4, #7680	; 0x1e00
 808d756:	2800      	cmp	r0, #0
 808d758:	bf08      	it	eq
 808d75a:	2400      	moveq	r4, #0

exit:
    mbedtls_zeroize( key, sizeof( key ) );
 808d75c:	2120      	movs	r1, #32
 808d75e:	a80f      	add	r0, sp, #60	; 0x3c
 808d760:	f7ff fe53 	bl	808d40a <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( iv,  sizeof( iv  ) );
 808d764:	2110      	movs	r1, #16
 808d766:	a80b      	add	r0, sp, #44	; 0x2c
 808d768:	f7ff fe4f 	bl	808d40a <_ZL15mbedtls_zeroizePvj>
    mbedtls_cipher_free( &cipher_ctx );
 808d76c:	a817      	add	r0, sp, #92	; 0x5c
 808d76e:	f7f5 fb65 	bl	8082e3c <mbedtls_cipher_free>

    return( ret );
 808d772:	4620      	mov	r0, r4
 808d774:	e004      	b.n	808d780 <mbedtls_pkcs12_pbe+0x180>
    mbedtls_cipher_context_t cipher_ctx;
    size_t olen = 0;

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );
 808d776:	4805      	ldr	r0, [pc, #20]	; (808d78c <mbedtls_pkcs12_pbe+0x18c>)
 808d778:	e002      	b.n	808d780 <mbedtls_pkcs12_pbe+0x180>
     *  }
     *
     */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 808d77a:	4805      	ldr	r0, [pc, #20]	; (808d790 <mbedtls_pkcs12_pbe+0x190>)
 808d77c:	e000      	b.n	808d780 <mbedtls_pkcs12_pbe+0x180>
    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    if( *p != end )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 808d77e:	4805      	ldr	r0, [pc, #20]	; (808d794 <mbedtls_pkcs12_pbe+0x194>)
    mbedtls_zeroize( key, sizeof( key ) );
    mbedtls_zeroize( iv,  sizeof( iv  ) );
    mbedtls_cipher_free( &cipher_ctx );

    return( ret );
}
 808d780:	b059      	add	sp, #356	; 0x164
 808d782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d786:	bf00      	nop
 808d788:	ffffe080 	.word	0xffffe080
 808d78c:	ffffe100 	.word	0xffffe100
 808d790:	ffffe11e 	.word	0xffffe11e
 808d794:	ffffe11a 	.word	0xffffe11a

0808d798 <mbedtls_sha512_init>:
}
#endif /* PUT_UINT64_BE */

void mbedtls_sha512_init( mbedtls_sha512_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha512_context ) );
 808d798:	22d8      	movs	r2, #216	; 0xd8
 808d79a:	2100      	movs	r1, #0
 808d79c:	f004 bdfb 	b.w	8092396 <memset>

0808d7a0 <mbedtls_sha512_free>:
}

void mbedtls_sha512_free( mbedtls_sha512_context *ctx )
{
    if( ctx == NULL )
 808d7a0:	b138      	cbz	r0, 808d7b2 <mbedtls_sha512_free+0x12>
 808d7a2:	f100 02d8 	add.w	r2, r0, #216	; 0xd8

#if !defined(MBEDTLS_SHA512_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808d7a6:	2300      	movs	r3, #0
 808d7a8:	4290      	cmp	r0, r2
 808d7aa:	d002      	beq.n	808d7b2 <mbedtls_sha512_free+0x12>
 808d7ac:	7003      	strb	r3, [r0, #0]
 808d7ae:	3001      	adds	r0, #1
 808d7b0:	e7fa      	b.n	808d7a8 <mbedtls_sha512_free+0x8>
 808d7b2:	4770      	bx	lr

0808d7b4 <mbedtls_sha512_clone>:
    mbedtls_zeroize( ctx, sizeof( mbedtls_sha512_context ) );
}

void mbedtls_sha512_clone( mbedtls_sha512_context *dst,
                           const mbedtls_sha512_context *src )
{
 808d7b4:	b508      	push	{r3, lr}
    *dst = *src;
 808d7b6:	22d8      	movs	r2, #216	; 0xd8
 808d7b8:	f004 fdc7 	bl	809234a <memcpy>
 808d7bc:	bd08      	pop	{r3, pc}
	...

0808d7c0 <mbedtls_sha512_starts_ret>:
/*
 * SHA-512 context setup
 */
int mbedtls_sha512_starts_ret( mbedtls_sha512_context *ctx, int is384 )
{
    ctx->total[0] = 0;
 808d7c0:	2200      	movs	r2, #0
 808d7c2:	2300      	movs	r3, #0
 808d7c4:	e9c0 2300 	strd	r2, r3, [r0]
    ctx->total[1] = 0;
 808d7c8:	e9c0 2302 	strd	r2, r3, [r0, #8]

    if( is384 == 0 )
 808d7cc:	bb31      	cbnz	r1, 808d81c <mbedtls_sha512_starts_ret+0x5c>
    {
        /* SHA-512 */
        ctx->state[0] = UL64(0x6A09E667F3BCC908);
 808d7ce:	a32a      	add	r3, pc, #168	; (adr r3, 808d878 <mbedtls_sha512_starts_ret+0xb8>)
 808d7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d7d4:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0xBB67AE8584CAA73B);
 808d7d8:	a329      	add	r3, pc, #164	; (adr r3, 808d880 <mbedtls_sha512_starts_ret+0xc0>)
 808d7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d7de:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x3C6EF372FE94F82B);
 808d7e2:	a329      	add	r3, pc, #164	; (adr r3, 808d888 <mbedtls_sha512_starts_ret+0xc8>)
 808d7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d7e8:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0xA54FF53A5F1D36F1);
 808d7ec:	a328      	add	r3, pc, #160	; (adr r3, 808d890 <mbedtls_sha512_starts_ret+0xd0>)
 808d7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d7f2:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x510E527FADE682D1);
 808d7f6:	a328      	add	r3, pc, #160	; (adr r3, 808d898 <mbedtls_sha512_starts_ret+0xd8>)
 808d7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d7fc:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x9B05688C2B3E6C1F);
 808d800:	a327      	add	r3, pc, #156	; (adr r3, 808d8a0 <mbedtls_sha512_starts_ret+0xe0>)
 808d802:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d806:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0x1F83D9ABFB41BD6B);
 808d80a:	a327      	add	r3, pc, #156	; (adr r3, 808d8a8 <mbedtls_sha512_starts_ret+0xe8>)
 808d80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d810:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x5BE0CD19137E2179);
 808d814:	a326      	add	r3, pc, #152	; (adr r3, 808d8b0 <mbedtls_sha512_starts_ret+0xf0>)
 808d816:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d81a:	e025      	b.n	808d868 <mbedtls_sha512_starts_ret+0xa8>
    }
    else
    {
        /* SHA-384 */
        ctx->state[0] = UL64(0xCBBB9D5DC1059ED8);
 808d81c:	a326      	add	r3, pc, #152	; (adr r3, 808d8b8 <mbedtls_sha512_starts_ret+0xf8>)
 808d81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d822:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0x629A292A367CD507);
 808d826:	a326      	add	r3, pc, #152	; (adr r3, 808d8c0 <mbedtls_sha512_starts_ret+0x100>)
 808d828:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d82c:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x9159015A3070DD17);
 808d830:	a325      	add	r3, pc, #148	; (adr r3, 808d8c8 <mbedtls_sha512_starts_ret+0x108>)
 808d832:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d836:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0x152FECD8F70E5939);
 808d83a:	a325      	add	r3, pc, #148	; (adr r3, 808d8d0 <mbedtls_sha512_starts_ret+0x110>)
 808d83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d840:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x67332667FFC00B31);
 808d844:	a324      	add	r3, pc, #144	; (adr r3, 808d8d8 <mbedtls_sha512_starts_ret+0x118>)
 808d846:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d84a:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x8EB44A8768581511);
 808d84e:	a324      	add	r3, pc, #144	; (adr r3, 808d8e0 <mbedtls_sha512_starts_ret+0x120>)
 808d850:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d854:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
 808d858:	a323      	add	r3, pc, #140	; (adr r3, 808d8e8 <mbedtls_sha512_starts_ret+0x128>)
 808d85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d85e:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
 808d862:	a323      	add	r3, pc, #140	; (adr r3, 808d8f0 <mbedtls_sha512_starts_ret+0x130>)
 808d864:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d868:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
    }

    ctx->is384 = is384;
 808d86c:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0

    return( 0 );
}
 808d870:	2000      	movs	r0, #0
 808d872:	4770      	bx	lr
 808d874:	f3af 8000 	nop.w
 808d878:	f3bcc908 	.word	0xf3bcc908
 808d87c:	6a09e667 	.word	0x6a09e667
 808d880:	84caa73b 	.word	0x84caa73b
 808d884:	bb67ae85 	.word	0xbb67ae85
 808d888:	fe94f82b 	.word	0xfe94f82b
 808d88c:	3c6ef372 	.word	0x3c6ef372
 808d890:	5f1d36f1 	.word	0x5f1d36f1
 808d894:	a54ff53a 	.word	0xa54ff53a
 808d898:	ade682d1 	.word	0xade682d1
 808d89c:	510e527f 	.word	0x510e527f
 808d8a0:	2b3e6c1f 	.word	0x2b3e6c1f
 808d8a4:	9b05688c 	.word	0x9b05688c
 808d8a8:	fb41bd6b 	.word	0xfb41bd6b
 808d8ac:	1f83d9ab 	.word	0x1f83d9ab
 808d8b0:	137e2179 	.word	0x137e2179
 808d8b4:	5be0cd19 	.word	0x5be0cd19
 808d8b8:	c1059ed8 	.word	0xc1059ed8
 808d8bc:	cbbb9d5d 	.word	0xcbbb9d5d
 808d8c0:	367cd507 	.word	0x367cd507
 808d8c4:	629a292a 	.word	0x629a292a
 808d8c8:	3070dd17 	.word	0x3070dd17
 808d8cc:	9159015a 	.word	0x9159015a
 808d8d0:	f70e5939 	.word	0xf70e5939
 808d8d4:	152fecd8 	.word	0x152fecd8
 808d8d8:	ffc00b31 	.word	0xffc00b31
 808d8dc:	67332667 	.word	0x67332667
 808d8e0:	68581511 	.word	0x68581511
 808d8e4:	8eb44a87 	.word	0x8eb44a87
 808d8e8:	64f98fa7 	.word	0x64f98fa7
 808d8ec:	db0c2e0d 	.word	0xdb0c2e0d
 808d8f0:	befa4fa4 	.word	0xbefa4fa4
 808d8f4:	47b5481d 	.word	0x47b5481d

0808d8f8 <mbedtls_internal_sha512_process>:
    UL64(0x5FCB6FAB3AD6FAEC),  UL64(0x6C44198C4A475817)
};

int mbedtls_internal_sha512_process( mbedtls_sha512_context *ctx,
                                     const unsigned char data[128] )
{
 808d8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808d8fc:	f2ad 4d7c 	subw	sp, sp, #1148	; 0x47c
 808d900:	4686      	mov	lr, r0
 808d902:	f50d 7cf8 	add.w	ip, sp, #496	; 0x1f0
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
 808d906:	2000      	movs	r0, #0
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 808d908:	eb01 04c0 	add.w	r4, r1, r0, lsl #3
 808d90c:	f811 2030 	ldrb.w	r2, [r1, r0, lsl #3]
 808d910:	7866      	ldrb	r6, [r4, #1]
 808d912:	f04f 0a00 	mov.w	sl, #0
 808d916:	ea4f 6b02 	mov.w	fp, r2, lsl #24
 808d91a:	0436      	lsls	r6, r6, #16
 808d91c:	2300      	movs	r3, #0
 808d91e:	ea43 030b 	orr.w	r3, r3, fp
 808d922:	9609      	str	r6, [sp, #36]	; 0x24
 808d924:	f8cd a020 	str.w	sl, [sp, #32]
 808d928:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
 808d92c:	431e      	orrs	r6, r3
 808d92e:	4633      	mov	r3, r6
 808d930:	79e2      	ldrb	r2, [r4, #7]
 808d932:	78a6      	ldrb	r6, [r4, #2]
 808d934:	ea42 020a 	orr.w	r2, r2, sl
 808d938:	4315      	orrs	r5, r2
 808d93a:	462a      	mov	r2, r5
 808d93c:	0236      	lsls	r6, r6, #8
 808d93e:	960b      	str	r6, [sp, #44]	; 0x2c
 808d940:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 808d944:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 808d948:	431e      	orrs	r6, r3
 808d94a:	4633      	mov	r3, r6
 808d94c:	4315      	orrs	r5, r2
 808d94e:	78e6      	ldrb	r6, [r4, #3]
 808d950:	462a      	mov	r2, r5
 808d952:	960d      	str	r6, [sp, #52]	; 0x34
 808d954:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 808d958:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 808d95c:	431e      	orrs	r6, r3
 808d95e:	4633      	mov	r3, r6
 808d960:	7926      	ldrb	r6, [r4, #4]
 808d962:	4315      	orrs	r5, r2
 808d964:	462a      	mov	r2, r5
 808d966:	0635      	lsls	r5, r6, #24
 808d968:	f8cd a014 	str.w	sl, [sp, #20]
 808d96c:	9504      	str	r5, [sp, #16]
 808d96e:	e9dd 5604 	ldrd	r5, r6, [sp, #16]
 808d972:	431e      	orrs	r6, r3
 808d974:	4633      	mov	r3, r6
 808d976:	7966      	ldrb	r6, [r4, #5]
 808d978:	4315      	orrs	r5, r2
 808d97a:	462a      	mov	r2, r5
 808d97c:	0435      	lsls	r5, r6, #16
 808d97e:	f8cd a01c 	str.w	sl, [sp, #28]
 808d982:	9506      	str	r5, [sp, #24]
 808d984:	e9dd 5606 	ldrd	r5, r6, [sp, #24]
 808d988:	431e      	orrs	r6, r3
 808d98a:	4633      	mov	r3, r6
 808d98c:	79a6      	ldrb	r6, [r4, #6]
 808d98e:	4315      	orrs	r5, r2
 808d990:	ea4f 2806 	mov.w	r8, r6, lsl #8
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
 808d994:	3001      	adds	r0, #1
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 808d996:	ea45 0208 	orr.w	r2, r5, r8
 808d99a:	ea43 030a 	orr.w	r3, r3, sl
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
 808d99e:	2810      	cmp	r0, #16
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 808d9a0:	e9ec 2302 	strd	r2, r3, [ip, #8]!
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
 808d9a4:	d1b0      	bne.n	808d908 <mbedtls_internal_sha512_process+0x10>
 808d9a6:	a97e      	add	r1, sp, #504	; 0x1f8
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
 808d9a8:	6f0a      	ldr	r2, [r1, #112]	; 0x70
 808d9aa:	6f4b      	ldr	r3, [r1, #116]	; 0x74
               S0(W[i - 15]) + W[i - 16];
 808d9ac:	0cd4      	lsrs	r4, r2, #19
 808d9ae:	ea44 3443 	orr.w	r4, r4, r3, lsl #13
 808d9b2:	940e      	str	r4, [sp, #56]	; 0x38
 808d9b4:	0cdc      	lsrs	r4, r3, #19
 808d9b6:	ea44 3442 	orr.w	r4, r4, r2, lsl #13
 808d9ba:	940f      	str	r4, [sp, #60]	; 0x3c
 808d9bc:	00dc      	lsls	r4, r3, #3
 808d9be:	ea44 7452 	orr.w	r4, r4, r2, lsr #29
 808d9c2:	9411      	str	r4, [sp, #68]	; 0x44
 808d9c4:	00d4      	lsls	r4, r2, #3
 808d9c6:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
 808d9ca:	0992      	lsrs	r2, r2, #6
 808d9cc:	ea42 6283 	orr.w	r2, r2, r3, lsl #26
 808d9d0:	9410      	str	r4, [sp, #64]	; 0x40
 808d9d2:	099b      	lsrs	r3, r3, #6
 808d9d4:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 808d9d8:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 808d9dc:	9200      	str	r2, [sp, #0]
 808d9de:	4066      	eors	r6, r4
 808d9e0:	9301      	str	r3, [sp, #4]
 808d9e2:	406f      	eors	r7, r5
 808d9e4:	e9dd 3400 	ldrd	r3, r4, [sp]
 808d9e8:	4073      	eors	r3, r6
 808d9ea:	461e      	mov	r6, r3
 808d9ec:	e9d1 2300 	ldrd	r2, r3, [r1]
 808d9f0:	407c      	eors	r4, r7
 808d9f2:	4627      	mov	r7, r4
 808d9f4:	e9d1 4512 	ldrd	r4, r5, [r1, #72]	; 0x48
 808d9f8:	f8d1 8008 	ldr.w	r8, [r1, #8]
 808d9fc:	1912      	adds	r2, r2, r4
 808d9fe:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 808da02:	416b      	adcs	r3, r5
 808da04:	18b4      	adds	r4, r6, r2
 808da06:	eb47 0503 	adc.w	r5, r7, r3
 808da0a:	ea4f 0358 	mov.w	r3, r8, lsr #1
 808da0e:	ea43 73cc 	orr.w	r3, r3, ip, lsl #31
 808da12:	9312      	str	r3, [sp, #72]	; 0x48
 808da14:	ea4f 035c 	mov.w	r3, ip, lsr #1
 808da18:	ea43 73c8 	orr.w	r3, r3, r8, lsl #31
 808da1c:	9313      	str	r3, [sp, #76]	; 0x4c
 808da1e:	ea4f 2318 	mov.w	r3, r8, lsr #8
 808da22:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 808da26:	9314      	str	r3, [sp, #80]	; 0x50
 808da28:	ea4f 231c 	mov.w	r3, ip, lsr #8
 808da2c:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 808da30:	9315      	str	r3, [sp, #84]	; 0x54
 808da32:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 808da36:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 808da3a:	4072      	eors	r2, r6
 808da3c:	ea4f 16d8 	mov.w	r6, r8, lsr #7
 808da40:	ea46 664c 	orr.w	r6, r6, ip, lsl #25
 808da44:	9602      	str	r6, [sp, #8]
 808da46:	ea4f 16dc 	mov.w	r6, ip, lsr #7
 808da4a:	9603      	str	r6, [sp, #12]
 808da4c:	407b      	eors	r3, r7
 808da4e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 808da52:	4056      	eors	r6, r2
 808da54:	1932      	adds	r2, r6, r4
 808da56:	ea87 0703 	eor.w	r7, r7, r3
    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
 808da5a:	f100 0001 	add.w	r0, r0, #1
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
 808da5e:	eb47 0305 	adc.w	r3, r7, r5
    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
 808da62:	2850      	cmp	r0, #80	; 0x50
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
 808da64:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 808da68:	f101 0108 	add.w	r1, r1, #8
    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
 808da6c:	d19c      	bne.n	808d9a8 <mbedtls_internal_sha512_process+0xb0>
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
 808da6e:	e9de 3404 	ldrd	r3, r4, [lr, #16]
 808da72:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    B = ctx->state[1];
 808da76:	e9de 3406 	ldrd	r3, r4, [lr, #24]
 808da7a:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
    C = ctx->state[2];
 808da7e:	e9de 3408 	ldrd	r3, r4, [lr, #32]
 808da82:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    D = ctx->state[3];
 808da86:	e9de 340a 	ldrd	r3, r4, [lr, #40]	; 0x28
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
 808da8a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
    D = ctx->state[3];
 808da8e:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
    E = ctx->state[4];
 808da92:	e9de 340c 	ldrd	r3, r4, [lr, #48]	; 0x30
    }

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
 808da96:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
    E = ctx->state[4];
 808da9a:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
    F = ctx->state[5];
 808da9e:	e9de 340e 	ldrd	r3, r4, [lr, #56]	; 0x38
 808daa2:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
    G = ctx->state[6];
 808daa6:	e9de 3410 	ldrd	r3, r4, [lr, #64]	; 0x40
 808daaa:	e9cd 3418 	strd	r3, r4, [sp, #96]	; 0x60
    H = ctx->state[7];
 808daae:	e9de 3412 	ldrd	r3, r4, [lr, #72]	; 0x48
 808dab2:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
 808dab6:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 808daba:	4b0d      	ldr	r3, [pc, #52]	; (808daf0 <mbedtls_internal_sha512_process+0x1f8>)
 808dabc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
 808dac0:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 808dac4:	e9cd 0108 	strd	r0, r1, [sp, #32]
    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
 808dac8:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 808dacc:	e9cd 0106 	strd	r0, r1, [sp, #24]

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
 808dad0:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 808dad4:	e9cd 0104 	strd	r0, r1, [sp, #16]
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
    B = ctx->state[1];
 808dad8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 808dadc:	e9cd 0102 	strd	r0, r1, [sp, #8]
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
 808dae0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 808dae4:	e9cd 0100 	strd	r0, r1, [sp]
 808dae8:	aa80      	add	r2, sp, #512	; 0x200
 808daea:	f503 7c20 	add.w	ip, r3, #640	; 0x280
 808daee:	e001      	b.n	808daf4 <mbedtls_internal_sha512_process+0x1fc>
 808daf0:	08094530 	.word	0x08094530
    H = ctx->state[7];
    i = 0;

    do
    {
        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
 808daf4:	9904      	ldr	r1, [sp, #16]
 808daf6:	9805      	ldr	r0, [sp, #20]
 808daf8:	0b89      	lsrs	r1, r1, #14
 808dafa:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 808dafe:	911e      	str	r1, [sp, #120]	; 0x78
 808db00:	0b81      	lsrs	r1, r0, #14
 808db02:	9804      	ldr	r0, [sp, #16]
 808db04:	e953 4502 	ldrd	r4, r5, [r3, #-8]
 808db08:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 808db0c:	911f      	str	r1, [sp, #124]	; 0x7c
 808db0e:	0c81      	lsrs	r1, r0, #18
 808db10:	9805      	ldr	r0, [sp, #20]
 808db12:	e9dd 671e 	ldrd	r6, r7, [sp, #120]	; 0x78
 808db16:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 808db1a:	9120      	str	r1, [sp, #128]	; 0x80
 808db1c:	0c81      	lsrs	r1, r0, #18
 808db1e:	9804      	ldr	r0, [sp, #16]
 808db20:	3340      	adds	r3, #64	; 0x40
 808db22:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 808db26:	9121      	str	r1, [sp, #132]	; 0x84
 808db28:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 808db2c:	404f      	eors	r7, r1
 808db2e:	9905      	ldr	r1, [sp, #20]
 808db30:	4046      	eors	r6, r0
 808db32:	9804      	ldr	r0, [sp, #16]
 808db34:	05c9      	lsls	r1, r1, #23
 808db36:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 808db3a:	9123      	str	r1, [sp, #140]	; 0x8c
 808db3c:	05c1      	lsls	r1, r0, #23
 808db3e:	9805      	ldr	r0, [sp, #20]
 808db40:	3240      	adds	r2, #64	; 0x40
 808db42:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 808db46:	9122      	str	r1, [sp, #136]	; 0x88
 808db48:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 808db4c:	4070      	eors	r0, r6
 808db4e:	4079      	eors	r1, r7
 808db50:	4606      	mov	r6, r0
 808db52:	460f      	mov	r7, r1
 808db54:	e952 0112 	ldrd	r0, r1, [r2, #-72]	; 0x48
 808db58:	1900      	adds	r0, r0, r4
 808db5a:	4169      	adcs	r1, r5
 808db5c:	1836      	adds	r6, r6, r0
 808db5e:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 808db62:	414f      	adcs	r7, r1
 808db64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 808db68:	4060      	eors	r0, r4
 808db6a:	4069      	eors	r1, r5
 808db6c:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 808db70:	4004      	ands	r4, r0
 808db72:	4620      	mov	r0, r4
 808db74:	400d      	ands	r5, r1
 808db76:	4629      	mov	r1, r5
 808db78:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 808db7c:	4044      	eors	r4, r0
 808db7e:	1936      	adds	r6, r6, r4
 808db80:	ea85 0501 	eor.w	r5, r5, r1
 808db84:	416f      	adcs	r7, r5
 808db86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808db8a:	1980      	adds	r0, r0, r6
 808db8c:	4179      	adcs	r1, r7
 808db8e:	4606      	mov	r6, r0
 808db90:	460f      	mov	r7, r1
 808db92:	eb18 0800 	adds.w	r8, r8, r0
 808db96:	eb49 0901 	adc.w	r9, r9, r1
 808db9a:	9900      	ldr	r1, [sp, #0]
 808db9c:	9801      	ldr	r0, [sp, #4]
 808db9e:	0f09      	lsrs	r1, r1, #28
 808dba0:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808dba4:	9124      	str	r1, [sp, #144]	; 0x90
 808dba6:	0f01      	lsrs	r1, r0, #28
 808dba8:	9800      	ldr	r0, [sp, #0]
 808dbaa:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808dbae:	9125      	str	r1, [sp, #148]	; 0x94
 808dbb0:	9901      	ldr	r1, [sp, #4]
 808dbb2:	0789      	lsls	r1, r1, #30
 808dbb4:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808dbb8:	9127      	str	r1, [sp, #156]	; 0x9c
 808dbba:	0781      	lsls	r1, r0, #30
 808dbbc:	9801      	ldr	r0, [sp, #4]
 808dbbe:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808dbc2:	9126      	str	r1, [sp, #152]	; 0x98
 808dbc4:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 808dbc8:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
 808dbcc:	404d      	eors	r5, r1
 808dbce:	9901      	ldr	r1, [sp, #4]
 808dbd0:	4044      	eors	r4, r0
 808dbd2:	9800      	ldr	r0, [sp, #0]
 808dbd4:	0649      	lsls	r1, r1, #25
 808dbd6:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808dbda:	9129      	str	r1, [sp, #164]	; 0xa4
 808dbdc:	0641      	lsls	r1, r0, #25
 808dbde:	9801      	ldr	r0, [sp, #4]
 808dbe0:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808dbe4:	9128      	str	r1, [sp, #160]	; 0xa0
 808dbe6:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 808dbea:	4060      	eors	r0, r4
 808dbec:	4069      	eors	r1, r5
 808dbee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 808dbf2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 808dbf6:	e9dd 0100 	ldrd	r0, r1, [sp]
 808dbfa:	4320      	orrs	r0, r4
 808dbfc:	4329      	orrs	r1, r5
 808dbfe:	ea00 040a 	and.w	r4, r0, sl
 808dc02:	ea01 050b 	and.w	r5, r1, fp
 808dc06:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
 808dc0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808dc0e:	e9dd 4500 	ldrd	r4, r5, [sp]
 808dc12:	4004      	ands	r4, r0
 808dc14:	400d      	ands	r5, r1
 808dc16:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 808dc1a:	4320      	orrs	r0, r4
 808dc1c:	4329      	orrs	r1, r5
 808dc1e:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 808dc22:	1824      	adds	r4, r4, r0
 808dc24:	414d      	adcs	r5, r1
 808dc26:	19a4      	adds	r4, r4, r6
 808dc28:	417d      	adcs	r5, r7
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
 808dc2a:	e952 0110 	ldrd	r0, r1, [r2, #-64]	; 0x40
    H = ctx->state[7];
    i = 0;

    do
    {
        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
 808dc2e:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
 808dc32:	e953 4510 	ldrd	r4, r5, [r3, #-64]	; 0x40
 808dc36:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 808dc3a:	1900      	adds	r0, r0, r4
 808dc3c:	4169      	adcs	r1, r5
 808dc3e:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 808dc42:	1824      	adds	r4, r4, r0
 808dc44:	414d      	adcs	r5, r1
 808dc46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 808dc4a:	4070      	eors	r0, r6
 808dc4c:	ea00 0008 	and.w	r0, r0, r8
 808dc50:	4046      	eors	r6, r0
 808dc52:	19a0      	adds	r0, r4, r6
 808dc54:	ea4f 3498 	mov.w	r4, r8, lsr #14
 808dc58:	ea44 4489 	orr.w	r4, r4, r9, lsl #18
 808dc5c:	942a      	str	r4, [sp, #168]	; 0xa8
 808dc5e:	ea4f 3499 	mov.w	r4, r9, lsr #14
 808dc62:	ea44 4488 	orr.w	r4, r4, r8, lsl #18
 808dc66:	942b      	str	r4, [sp, #172]	; 0xac
 808dc68:	ea4f 4498 	mov.w	r4, r8, lsr #18
 808dc6c:	ea44 3489 	orr.w	r4, r4, r9, lsl #14
 808dc70:	942c      	str	r4, [sp, #176]	; 0xb0
 808dc72:	ea81 0107 	eor.w	r1, r1, r7
 808dc76:	ea4f 4499 	mov.w	r4, r9, lsr #18
 808dc7a:	ea01 0109 	and.w	r1, r1, r9
 808dc7e:	ea44 3488 	orr.w	r4, r4, r8, lsl #14
 808dc82:	942d      	str	r4, [sp, #180]	; 0xb4
 808dc84:	ea87 0701 	eor.w	r7, r7, r1
 808dc88:	eb45 0107 	adc.w	r1, r5, r7
 808dc8c:	e9dd 672c 	ldrd	r6, r7, [sp, #176]	; 0xb0
 808dc90:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
 808dc94:	4074      	eors	r4, r6
 808dc96:	ea4f 56c9 	mov.w	r6, r9, lsl #23
 808dc9a:	ea46 2658 	orr.w	r6, r6, r8, lsr #9
 808dc9e:	962f      	str	r6, [sp, #188]	; 0xbc
 808dca0:	ea4f 56c8 	mov.w	r6, r8, lsl #23
 808dca4:	ea46 2659 	orr.w	r6, r6, r9, lsr #9
 808dca8:	962e      	str	r6, [sp, #184]	; 0xb8
 808dcaa:	407d      	eors	r5, r7
 808dcac:	e9dd 672e 	ldrd	r6, r7, [sp, #184]	; 0xb8
 808dcb0:	4066      	eors	r6, r4
 808dcb2:	1986      	adds	r6, r0, r6
 808dcb4:	ea87 0705 	eor.w	r7, r7, r5
 808dcb8:	eb41 0707 	adc.w	r7, r1, r7
 808dcbc:	eb1a 0006 	adds.w	r0, sl, r6
 808dcc0:	eb4b 0107 	adc.w	r1, fp, r7
 808dcc4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 808dcc8:	990a      	ldr	r1, [sp, #40]	; 0x28
 808dcca:	980b      	ldr	r0, [sp, #44]	; 0x2c
 808dccc:	0f09      	lsrs	r1, r1, #28
 808dcce:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808dcd2:	9130      	str	r1, [sp, #192]	; 0xc0
 808dcd4:	0f01      	lsrs	r1, r0, #28
 808dcd6:	980a      	ldr	r0, [sp, #40]	; 0x28
 808dcd8:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 808dcdc:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808dce0:	9131      	str	r1, [sp, #196]	; 0xc4
 808dce2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 808dce4:	e9dd 4530 	ldrd	r4, r5, [sp, #192]	; 0xc0
 808dce8:	0789      	lsls	r1, r1, #30
 808dcea:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808dcee:	9133      	str	r1, [sp, #204]	; 0xcc
 808dcf0:	0781      	lsls	r1, r0, #30
 808dcf2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 808dcf4:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808dcf8:	9132      	str	r1, [sp, #200]	; 0xc8
 808dcfa:	e9dd 0132 	ldrd	r0, r1, [sp, #200]	; 0xc8
 808dcfe:	404d      	eors	r5, r1
 808dd00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 808dd02:	4044      	eors	r4, r0
 808dd04:	980a      	ldr	r0, [sp, #40]	; 0x28
 808dd06:	0649      	lsls	r1, r1, #25
 808dd08:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808dd0c:	9135      	str	r1, [sp, #212]	; 0xd4
 808dd0e:	0641      	lsls	r1, r0, #25
 808dd10:	980b      	ldr	r0, [sp, #44]	; 0x2c
 808dd12:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808dd16:	9134      	str	r1, [sp, #208]	; 0xd0
 808dd18:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
 808dd1c:	4060      	eors	r0, r4
 808dd1e:	4604      	mov	r4, r0
 808dd20:	4069      	eors	r1, r5
 808dd22:	460d      	mov	r5, r1
 808dd24:	e9dd 0100 	ldrd	r0, r1, [sp]
 808dd28:	ea40 000a 	orr.w	r0, r0, sl
 808dd2c:	ea41 010b 	orr.w	r1, r1, fp
 808dd30:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 808dd34:	ea0a 0a00 	and.w	sl, sl, r0
 808dd38:	ea0b 0b01 	and.w	fp, fp, r1
 808dd3c:	e9cd ab1c 	strd	sl, fp, [sp, #112]	; 0x70
 808dd40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808dd44:	e9dd ab00 	ldrd	sl, fp, [sp]
 808dd48:	ea0a 0a00 	and.w	sl, sl, r0
 808dd4c:	ea0b 0b01 	and.w	fp, fp, r1
 808dd50:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 808dd54:	ea40 000a 	orr.w	r0, r0, sl
 808dd58:	1900      	adds	r0, r0, r4
 808dd5a:	ea41 010b 	orr.w	r1, r1, fp
 808dd5e:	4169      	adcs	r1, r5
 808dd60:	eb10 0a06 	adds.w	sl, r0, r6
 808dd64:	eb41 0b07 	adc.w	fp, r1, r7
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
 808dd68:	e953 450e 	ldrd	r4, r5, [r3, #-56]	; 0x38
 808dd6c:	e952 010e 	ldrd	r0, r1, [r2, #-56]	; 0x38
 808dd70:	1900      	adds	r0, r0, r4
 808dd72:	4169      	adcs	r1, r5
 808dd74:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 808dd78:	1824      	adds	r4, r4, r0
 808dd7a:	414d      	adcs	r5, r1
 808dd7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 808dd80:	ea80 0008 	eor.w	r0, r0, r8
 808dd84:	ea81 0109 	eor.w	r1, r1, r9
 808dd88:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 808dd8c:	4006      	ands	r6, r0
 808dd8e:	4630      	mov	r0, r6
 808dd90:	400f      	ands	r7, r1
 808dd92:	4639      	mov	r1, r7
 808dd94:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 808dd98:	4046      	eors	r6, r0
 808dd9a:	19a0      	adds	r0, r4, r6
 808dd9c:	ea87 0701 	eor.w	r7, r7, r1
 808dda0:	9c08      	ldr	r4, [sp, #32]
 808dda2:	eb45 0107 	adc.w	r1, r5, r7
 808dda6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808dda8:	0ba4      	lsrs	r4, r4, #14
 808ddaa:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808ddae:	9436      	str	r4, [sp, #216]	; 0xd8
 808ddb0:	0bac      	lsrs	r4, r5, #14
 808ddb2:	9d08      	ldr	r5, [sp, #32]
 808ddb4:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808ddb8:	9437      	str	r4, [sp, #220]	; 0xdc
 808ddba:	0cac      	lsrs	r4, r5, #18
 808ddbc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808ddbe:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808ddc2:	9438      	str	r4, [sp, #224]	; 0xe0
 808ddc4:	0cac      	lsrs	r4, r5, #18
 808ddc6:	9d08      	ldr	r5, [sp, #32]
 808ddc8:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808ddcc:	9439      	str	r4, [sp, #228]	; 0xe4
 808ddce:	e9dd 6738 	ldrd	r6, r7, [sp, #224]	; 0xe0
 808ddd2:	e9dd 4536 	ldrd	r4, r5, [sp, #216]	; 0xd8
 808ddd6:	4074      	eors	r4, r6
 808ddd8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 808ddda:	407d      	eors	r5, r7
 808dddc:	9f08      	ldr	r7, [sp, #32]
 808ddde:	05f6      	lsls	r6, r6, #23
 808dde0:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808dde4:	963b      	str	r6, [sp, #236]	; 0xec
 808dde6:	05fe      	lsls	r6, r7, #23
 808dde8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 808ddea:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808ddee:	963a      	str	r6, [sp, #232]	; 0xe8
 808ddf0:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 808ddf4:	4066      	eors	r6, r4
 808ddf6:	1986      	adds	r6, r0, r6
 808ddf8:	ea87 0705 	eor.w	r7, r7, r5
 808ddfc:	eb41 0707 	adc.w	r7, r1, r7
 808de00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808de04:	1980      	adds	r0, r0, r6
 808de06:	4179      	adcs	r1, r7
 808de08:	e9cd 0106 	strd	r0, r1, [sp, #24]
 808de0c:	ea4f 711a 	mov.w	r1, sl, lsr #28
 808de10:	ea41 110b 	orr.w	r1, r1, fp, lsl #4
 808de14:	913c      	str	r1, [sp, #240]	; 0xf0
 808de16:	ea4f 711b 	mov.w	r1, fp, lsr #28
 808de1a:	ea41 110a 	orr.w	r1, r1, sl, lsl #4
 808de1e:	913d      	str	r1, [sp, #244]	; 0xf4
 808de20:	ea4f 718b 	mov.w	r1, fp, lsl #30
 808de24:	ea41 019a 	orr.w	r1, r1, sl, lsr #2
 808de28:	913f      	str	r1, [sp, #252]	; 0xfc
 808de2a:	ea4f 718a 	mov.w	r1, sl, lsl #30
 808de2e:	ea41 019b 	orr.w	r1, r1, fp, lsr #2
 808de32:	913e      	str	r1, [sp, #248]	; 0xf8
 808de34:	e9dd 013e 	ldrd	r0, r1, [sp, #248]	; 0xf8
 808de38:	e9dd 453c 	ldrd	r4, r5, [sp, #240]	; 0xf0
 808de3c:	404d      	eors	r5, r1
 808de3e:	ea4f 614b 	mov.w	r1, fp, lsl #25
 808de42:	ea41 11da 	orr.w	r1, r1, sl, lsr #7
 808de46:	9141      	str	r1, [sp, #260]	; 0x104
 808de48:	ea4f 614a 	mov.w	r1, sl, lsl #25
 808de4c:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
 808de50:	4044      	eors	r4, r0
 808de52:	9140      	str	r1, [sp, #256]	; 0x100
 808de54:	a940      	add	r1, sp, #256	; 0x100
 808de56:	e9d1 0100 	ldrd	r0, r1, [r1]
 808de5a:	4060      	eors	r0, r4
 808de5c:	4069      	eors	r1, r5
 808de5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 808de62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808de66:	e9dd 4500 	ldrd	r4, r5, [sp]
 808de6a:	ea40 000a 	orr.w	r0, r0, sl
 808de6e:	ea41 010b 	orr.w	r1, r1, fp
 808de72:	4004      	ands	r4, r0
 808de74:	4620      	mov	r0, r4
 808de76:	400d      	ands	r5, r1
 808de78:	4629      	mov	r1, r5
 808de7a:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 808de7e:	ea04 040a 	and.w	r4, r4, sl
 808de82:	ea05 050b 	and.w	r5, r5, fp
 808de86:	4304      	orrs	r4, r0
 808de88:	4620      	mov	r0, r4
 808de8a:	430d      	orrs	r5, r1
 808de8c:	4629      	mov	r1, r5
 808de8e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 808de92:	1824      	adds	r4, r4, r0
 808de94:	414d      	adcs	r5, r1
 808de96:	19a4      	adds	r4, r4, r6
 808de98:	417d      	adcs	r5, r7
 808de9a:	e9cd 4502 	strd	r4, r5, [sp, #8]
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
 808de9e:	e953 450c 	ldrd	r4, r5, [r3, #-48]	; 0x30
 808dea2:	e952 010c 	ldrd	r0, r1, [r2, #-48]	; 0x30
 808dea6:	1900      	adds	r0, r0, r4
 808dea8:	4169      	adcs	r1, r5
 808deaa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 808deae:	1824      	adds	r4, r4, r0
 808deb0:	414d      	adcs	r5, r1
 808deb2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808deb6:	ea80 0008 	eor.w	r0, r0, r8
 808deba:	ea81 0109 	eor.w	r1, r1, r9
 808debe:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 808dec2:	4006      	ands	r6, r0
 808dec4:	ea86 0608 	eor.w	r6, r6, r8
 808dec8:	400f      	ands	r7, r1
 808deca:	19a0      	adds	r0, r4, r6
 808decc:	ea87 0709 	eor.w	r7, r7, r9
 808ded0:	9c06      	ldr	r4, [sp, #24]
 808ded2:	eb45 0107 	adc.w	r1, r5, r7
 808ded6:	9d07      	ldr	r5, [sp, #28]
 808ded8:	0ba4      	lsrs	r4, r4, #14
 808deda:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808dede:	9442      	str	r4, [sp, #264]	; 0x108
 808dee0:	0bac      	lsrs	r4, r5, #14
 808dee2:	9d06      	ldr	r5, [sp, #24]
 808dee4:	ae44      	add	r6, sp, #272	; 0x110
 808dee6:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808deea:	9443      	str	r4, [sp, #268]	; 0x10c
 808deec:	0cac      	lsrs	r4, r5, #18
 808deee:	9d07      	ldr	r5, [sp, #28]
 808def0:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808def4:	9444      	str	r4, [sp, #272]	; 0x110
 808def6:	0cac      	lsrs	r4, r5, #18
 808def8:	9d06      	ldr	r5, [sp, #24]
 808defa:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808defe:	9445      	str	r4, [sp, #276]	; 0x114
 808df00:	ac42      	add	r4, sp, #264	; 0x108
 808df02:	cec0      	ldmia	r6, {r6, r7}
 808df04:	cc30      	ldmia	r4, {r4, r5}
 808df06:	4074      	eors	r4, r6
 808df08:	9e07      	ldr	r6, [sp, #28]
 808df0a:	407d      	eors	r5, r7
 808df0c:	9f06      	ldr	r7, [sp, #24]
 808df0e:	05f6      	lsls	r6, r6, #23
 808df10:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808df14:	9647      	str	r6, [sp, #284]	; 0x11c
 808df16:	05fe      	lsls	r6, r7, #23
 808df18:	9f07      	ldr	r7, [sp, #28]
 808df1a:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808df1e:	9646      	str	r6, [sp, #280]	; 0x118
 808df20:	ae46      	add	r6, sp, #280	; 0x118
 808df22:	cec0      	ldmia	r6, {r6, r7}
 808df24:	4066      	eors	r6, r4
 808df26:	1986      	adds	r6, r0, r6
 808df28:	ea87 0705 	eor.w	r7, r7, r5
 808df2c:	eb41 0707 	adc.w	r7, r1, r7
 808df30:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 808df34:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 808df38:	e9dd 6700 	ldrd	r6, r7, [sp]
 808df3c:	1836      	adds	r6, r6, r0
 808df3e:	414f      	adcs	r7, r1
 808df40:	9902      	ldr	r1, [sp, #8]
 808df42:	9803      	ldr	r0, [sp, #12]
 808df44:	0f09      	lsrs	r1, r1, #28
 808df46:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808df4a:	9148      	str	r1, [sp, #288]	; 0x120
 808df4c:	0f01      	lsrs	r1, r0, #28
 808df4e:	9802      	ldr	r0, [sp, #8]
 808df50:	e9cd 6704 	strd	r6, r7, [sp, #16]
 808df54:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808df58:	9149      	str	r1, [sp, #292]	; 0x124
 808df5a:	9903      	ldr	r1, [sp, #12]
 808df5c:	0789      	lsls	r1, r1, #30
 808df5e:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808df62:	914b      	str	r1, [sp, #300]	; 0x12c
 808df64:	0781      	lsls	r1, r0, #30
 808df66:	9803      	ldr	r0, [sp, #12]
 808df68:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 808df6c:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808df70:	914a      	str	r1, [sp, #296]	; 0x128
 808df72:	a948      	add	r1, sp, #288	; 0x120
 808df74:	e9d1 4500 	ldrd	r4, r5, [r1]
 808df78:	a94a      	add	r1, sp, #296	; 0x128
 808df7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 808df7e:	404d      	eors	r5, r1
 808df80:	9903      	ldr	r1, [sp, #12]
 808df82:	4044      	eors	r4, r0
 808df84:	9802      	ldr	r0, [sp, #8]
 808df86:	0649      	lsls	r1, r1, #25
 808df88:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808df8c:	914d      	str	r1, [sp, #308]	; 0x134
 808df8e:	0641      	lsls	r1, r0, #25
 808df90:	9803      	ldr	r0, [sp, #12]
 808df92:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808df96:	914c      	str	r1, [sp, #304]	; 0x130
 808df98:	a94c      	add	r1, sp, #304	; 0x130
 808df9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 808df9e:	4060      	eors	r0, r4
 808dfa0:	4069      	eors	r1, r5
 808dfa2:	4604      	mov	r4, r0
 808dfa4:	460d      	mov	r5, r1
 808dfa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808dfaa:	ea40 000a 	orr.w	r0, r0, sl
 808dfae:	ea41 010b 	orr.w	r1, r1, fp
 808dfb2:	4006      	ands	r6, r0
 808dfb4:	4630      	mov	r0, r6
 808dfb6:	400f      	ands	r7, r1
 808dfb8:	4639      	mov	r1, r7
 808dfba:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 808dfbe:	ea06 060a 	and.w	r6, r6, sl
 808dfc2:	ea07 070b 	and.w	r7, r7, fp
 808dfc6:	4306      	orrs	r6, r0
 808dfc8:	1930      	adds	r0, r6, r4
 808dfca:	ea47 0701 	orr.w	r7, r7, r1
 808dfce:	eb47 0105 	adc.w	r1, r7, r5
 808dfd2:	e9dd 451c 	ldrd	r4, r5, [sp, #112]	; 0x70
 808dfd6:	1824      	adds	r4, r4, r0
 808dfd8:	414d      	adcs	r5, r1
 808dfda:	e9cd 4500 	strd	r4, r5, [sp]
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
 808dfde:	e952 010a 	ldrd	r0, r1, [r2, #-40]	; 0x28
 808dfe2:	e953 450a 	ldrd	r4, r5, [r3, #-40]	; 0x28
 808dfe6:	1900      	adds	r0, r0, r4
 808dfe8:	4169      	adcs	r1, r5
 808dfea:	eb10 0008 	adds.w	r0, r0, r8
 808dfee:	eb41 0109 	adc.w	r1, r1, r9
 808dff2:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 808dff6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 808dffa:	ea88 0804 	eor.w	r8, r8, r4
 808dffe:	ea89 0905 	eor.w	r9, r9, r5
 808e002:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 808e006:	ea04 0408 	and.w	r4, r4, r8
 808e00a:	46a0      	mov	r8, r4
 808e00c:	ea05 0509 	and.w	r5, r5, r9
 808e010:	46a9      	mov	r9, r5
 808e012:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 808e016:	ea84 0408 	eor.w	r4, r4, r8
 808e01a:	eb10 0804 	adds.w	r8, r0, r4
 808e01e:	ea85 0509 	eor.w	r5, r5, r9
 808e022:	eb41 0905 	adc.w	r9, r1, r5
 808e026:	9904      	ldr	r1, [sp, #16]
 808e028:	9805      	ldr	r0, [sp, #20]
 808e02a:	0b89      	lsrs	r1, r1, #14
 808e02c:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 808e030:	914e      	str	r1, [sp, #312]	; 0x138
 808e032:	0b81      	lsrs	r1, r0, #14
 808e034:	9804      	ldr	r0, [sp, #16]
 808e036:	ac50      	add	r4, sp, #320	; 0x140
 808e038:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 808e03c:	914f      	str	r1, [sp, #316]	; 0x13c
 808e03e:	0c81      	lsrs	r1, r0, #18
 808e040:	9805      	ldr	r0, [sp, #20]
 808e042:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 808e046:	9150      	str	r1, [sp, #320]	; 0x140
 808e048:	0c81      	lsrs	r1, r0, #18
 808e04a:	9804      	ldr	r0, [sp, #16]
 808e04c:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 808e050:	9151      	str	r1, [sp, #324]	; 0x144
 808e052:	a94e      	add	r1, sp, #312	; 0x138
 808e054:	cc30      	ldmia	r4, {r4, r5}
 808e056:	e9d1 0100 	ldrd	r0, r1, [r1]
 808e05a:	4060      	eors	r0, r4
 808e05c:	9c05      	ldr	r4, [sp, #20]
 808e05e:	4069      	eors	r1, r5
 808e060:	9d04      	ldr	r5, [sp, #16]
 808e062:	05e4      	lsls	r4, r4, #23
 808e064:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 808e068:	9453      	str	r4, [sp, #332]	; 0x14c
 808e06a:	05ec      	lsls	r4, r5, #23
 808e06c:	9d05      	ldr	r5, [sp, #20]
 808e06e:	e9dd 6700 	ldrd	r6, r7, [sp]
 808e072:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 808e076:	9452      	str	r4, [sp, #328]	; 0x148
 808e078:	ac52      	add	r4, sp, #328	; 0x148
 808e07a:	cc30      	ldmia	r4, {r4, r5}
 808e07c:	4044      	eors	r4, r0
 808e07e:	eb18 0804 	adds.w	r8, r8, r4
 808e082:	ea85 0501 	eor.w	r5, r5, r1
 808e086:	eb49 0905 	adc.w	r9, r9, r5
 808e08a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808e08e:	eb10 0008 	adds.w	r0, r0, r8
 808e092:	eb41 0109 	adc.w	r1, r1, r9
 808e096:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 808e09a:	9900      	ldr	r1, [sp, #0]
 808e09c:	9801      	ldr	r0, [sp, #4]
 808e09e:	0f09      	lsrs	r1, r1, #28
 808e0a0:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808e0a4:	9154      	str	r1, [sp, #336]	; 0x150
 808e0a6:	0f01      	lsrs	r1, r0, #28
 808e0a8:	9800      	ldr	r0, [sp, #0]
 808e0aa:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808e0ae:	9155      	str	r1, [sp, #340]	; 0x154
 808e0b0:	9901      	ldr	r1, [sp, #4]
 808e0b2:	0789      	lsls	r1, r1, #30
 808e0b4:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808e0b8:	9157      	str	r1, [sp, #348]	; 0x15c
 808e0ba:	0781      	lsls	r1, r0, #30
 808e0bc:	9801      	ldr	r0, [sp, #4]
 808e0be:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808e0c2:	9156      	str	r1, [sp, #344]	; 0x158
 808e0c4:	a954      	add	r1, sp, #336	; 0x150
 808e0c6:	e9d1 4500 	ldrd	r4, r5, [r1]
 808e0ca:	a956      	add	r1, sp, #344	; 0x158
 808e0cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 808e0d0:	404d      	eors	r5, r1
 808e0d2:	9901      	ldr	r1, [sp, #4]
 808e0d4:	4044      	eors	r4, r0
 808e0d6:	9800      	ldr	r0, [sp, #0]
 808e0d8:	0649      	lsls	r1, r1, #25
 808e0da:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808e0de:	9159      	str	r1, [sp, #356]	; 0x164
 808e0e0:	0641      	lsls	r1, r0, #25
 808e0e2:	9801      	ldr	r0, [sp, #4]
 808e0e4:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808e0e8:	9158      	str	r1, [sp, #352]	; 0x160
 808e0ea:	a958      	add	r1, sp, #352	; 0x160
 808e0ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 808e0f0:	4060      	eors	r0, r4
 808e0f2:	4604      	mov	r4, r0
 808e0f4:	4069      	eors	r1, r5
 808e0f6:	460d      	mov	r5, r1
 808e0f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808e0fc:	4330      	orrs	r0, r6
 808e0fe:	4339      	orrs	r1, r7
 808e100:	ea00 060a 	and.w	r6, r0, sl
 808e104:	ea01 070b 	and.w	r7, r1, fp
 808e108:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 808e10c:	e9dd 0100 	ldrd	r0, r1, [sp]
 808e110:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 808e114:	4006      	ands	r6, r0
 808e116:	400f      	ands	r7, r1
 808e118:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 808e11c:	4330      	orrs	r0, r6
 808e11e:	1900      	adds	r0, r0, r4
 808e120:	ea41 0107 	orr.w	r1, r1, r7
 808e124:	4169      	adcs	r1, r5
 808e126:	eb18 0800 	adds.w	r8, r8, r0
 808e12a:	eb49 0901 	adc.w	r9, r9, r1
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
 808e12e:	e953 4508 	ldrd	r4, r5, [r3, #-32]
 808e132:	e952 0108 	ldrd	r0, r1, [r2, #-32]
 808e136:	1900      	adds	r0, r0, r4
 808e138:	4169      	adcs	r1, r5
 808e13a:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 808e13e:	1824      	adds	r4, r4, r0
 808e140:	414d      	adcs	r5, r1
 808e142:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 808e146:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 808e14a:	4046      	eors	r6, r0
 808e14c:	4630      	mov	r0, r6
 808e14e:	404f      	eors	r7, r1
 808e150:	4639      	mov	r1, r7
 808e152:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 808e156:	4006      	ands	r6, r0
 808e158:	4630      	mov	r0, r6
 808e15a:	400f      	ands	r7, r1
 808e15c:	4639      	mov	r1, r7
 808e15e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 808e162:	4046      	eors	r6, r0
 808e164:	1930      	adds	r0, r6, r4
 808e166:	ea87 0701 	eor.w	r7, r7, r1
 808e16a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 808e16c:	eb47 0105 	adc.w	r1, r7, r5
 808e170:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 808e172:	0ba4      	lsrs	r4, r4, #14
 808e174:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808e178:	945a      	str	r4, [sp, #360]	; 0x168
 808e17a:	0bac      	lsrs	r4, r5, #14
 808e17c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808e17e:	ae5c      	add	r6, sp, #368	; 0x170
 808e180:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808e184:	945b      	str	r4, [sp, #364]	; 0x16c
 808e186:	0cac      	lsrs	r4, r5, #18
 808e188:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 808e18a:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808e18e:	945c      	str	r4, [sp, #368]	; 0x170
 808e190:	0cac      	lsrs	r4, r5, #18
 808e192:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808e194:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808e198:	945d      	str	r4, [sp, #372]	; 0x174
 808e19a:	ac5a      	add	r4, sp, #360	; 0x168
 808e19c:	cec0      	ldmia	r6, {r6, r7}
 808e19e:	cc30      	ldmia	r4, {r4, r5}
 808e1a0:	4074      	eors	r4, r6
 808e1a2:	4626      	mov	r6, r4
 808e1a4:	407d      	eors	r5, r7
 808e1a6:	462f      	mov	r7, r5
 808e1a8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 808e1aa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808e1ac:	05e4      	lsls	r4, r4, #23
 808e1ae:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 808e1b2:	945f      	str	r4, [sp, #380]	; 0x17c
 808e1b4:	05ec      	lsls	r4, r5, #23
 808e1b6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 808e1b8:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 808e1bc:	945e      	str	r4, [sp, #376]	; 0x178
 808e1be:	ac5e      	add	r4, sp, #376	; 0x178
 808e1c0:	cc30      	ldmia	r4, {r4, r5}
 808e1c2:	4074      	eors	r4, r6
 808e1c4:	1906      	adds	r6, r0, r4
 808e1c6:	ea85 0507 	eor.w	r5, r5, r7
 808e1ca:	eb41 0705 	adc.w	r7, r1, r5
 808e1ce:	eb16 000a 	adds.w	r0, r6, sl
 808e1d2:	eb47 010b 	adc.w	r1, r7, fp
 808e1d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 808e1da:	ea4f 7118 	mov.w	r1, r8, lsr #28
 808e1de:	ea41 1109 	orr.w	r1, r1, r9, lsl #4
 808e1e2:	9160      	str	r1, [sp, #384]	; 0x180
 808e1e4:	ea4f 7119 	mov.w	r1, r9, lsr #28
 808e1e8:	ea41 1108 	orr.w	r1, r1, r8, lsl #4
 808e1ec:	9161      	str	r1, [sp, #388]	; 0x184
 808e1ee:	ea4f 7189 	mov.w	r1, r9, lsl #30
 808e1f2:	ea41 0198 	orr.w	r1, r1, r8, lsr #2
 808e1f6:	9163      	str	r1, [sp, #396]	; 0x18c
 808e1f8:	ea4f 7188 	mov.w	r1, r8, lsl #30
 808e1fc:	ea41 0199 	orr.w	r1, r1, r9, lsr #2
 808e200:	9162      	str	r1, [sp, #392]	; 0x188
 808e202:	a960      	add	r1, sp, #384	; 0x180
 808e204:	e9d1 4500 	ldrd	r4, r5, [r1]
 808e208:	a962      	add	r1, sp, #392	; 0x188
 808e20a:	e9d1 0100 	ldrd	r0, r1, [r1]
 808e20e:	404d      	eors	r5, r1
 808e210:	ea4f 6149 	mov.w	r1, r9, lsl #25
 808e214:	ea41 11d8 	orr.w	r1, r1, r8, lsr #7
 808e218:	9165      	str	r1, [sp, #404]	; 0x194
 808e21a:	ea4f 6148 	mov.w	r1, r8, lsl #25
 808e21e:	ea41 11d9 	orr.w	r1, r1, r9, lsr #7
 808e222:	4044      	eors	r4, r0
 808e224:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 808e228:	9164      	str	r1, [sp, #400]	; 0x190
 808e22a:	a964      	add	r1, sp, #400	; 0x190
 808e22c:	e9d1 0100 	ldrd	r0, r1, [r1]
 808e230:	4060      	eors	r0, r4
 808e232:	4604      	mov	r4, r0
 808e234:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 808e238:	e9dd ab00 	ldrd	sl, fp, [sp]
 808e23c:	4069      	eors	r1, r5
 808e23e:	460d      	mov	r5, r1
 808e240:	e9dd 0100 	ldrd	r0, r1, [sp]
 808e244:	ea40 0008 	orr.w	r0, r0, r8
 808e248:	ea41 0109 	orr.w	r1, r1, r9
 808e24c:	4006      	ands	r6, r0
 808e24e:	ea0a 0a08 	and.w	sl, sl, r8
 808e252:	ea46 000a 	orr.w	r0, r6, sl
 808e256:	400f      	ands	r7, r1
 808e258:	ea0b 0b09 	and.w	fp, fp, r9
 808e25c:	1900      	adds	r0, r0, r4
 808e25e:	ea47 010b 	orr.w	r1, r7, fp
 808e262:	4169      	adcs	r1, r5
 808e264:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	; 0x70
 808e268:	eb1a 0a00 	adds.w	sl, sl, r0
 808e26c:	eb4b 0b01 	adc.w	fp, fp, r1
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
 808e270:	e953 4506 	ldrd	r4, r5, [r3, #-24]
 808e274:	e952 0106 	ldrd	r0, r1, [r2, #-24]
 808e278:	1900      	adds	r0, r0, r4
 808e27a:	4169      	adcs	r1, r5
 808e27c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 808e280:	1824      	adds	r4, r4, r0
 808e282:	414d      	adcs	r5, r1
 808e284:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 808e288:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808e28c:	4046      	eors	r6, r0
 808e28e:	4630      	mov	r0, r6
 808e290:	404f      	eors	r7, r1
 808e292:	4639      	mov	r1, r7
 808e294:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 808e298:	4006      	ands	r6, r0
 808e29a:	4630      	mov	r0, r6
 808e29c:	400f      	ands	r7, r1
 808e29e:	4639      	mov	r1, r7
 808e2a0:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 808e2a4:	4046      	eors	r6, r0
 808e2a6:	1930      	adds	r0, r6, r4
 808e2a8:	ea87 0701 	eor.w	r7, r7, r1
 808e2ac:	9c08      	ldr	r4, [sp, #32]
 808e2ae:	eb47 0105 	adc.w	r1, r7, r5
 808e2b2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808e2b4:	0ba4      	lsrs	r4, r4, #14
 808e2b6:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808e2ba:	9466      	str	r4, [sp, #408]	; 0x198
 808e2bc:	0bac      	lsrs	r4, r5, #14
 808e2be:	9d08      	ldr	r5, [sp, #32]
 808e2c0:	ae68      	add	r6, sp, #416	; 0x1a0
 808e2c2:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808e2c6:	9467      	str	r4, [sp, #412]	; 0x19c
 808e2c8:	0cac      	lsrs	r4, r5, #18
 808e2ca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808e2cc:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808e2d0:	9468      	str	r4, [sp, #416]	; 0x1a0
 808e2d2:	0cac      	lsrs	r4, r5, #18
 808e2d4:	9d08      	ldr	r5, [sp, #32]
 808e2d6:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808e2da:	9469      	str	r4, [sp, #420]	; 0x1a4
 808e2dc:	ac66      	add	r4, sp, #408	; 0x198
 808e2de:	cec0      	ldmia	r6, {r6, r7}
 808e2e0:	cc30      	ldmia	r4, {r4, r5}
 808e2e2:	4074      	eors	r4, r6
 808e2e4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 808e2e6:	407d      	eors	r5, r7
 808e2e8:	9f08      	ldr	r7, [sp, #32]
 808e2ea:	05f6      	lsls	r6, r6, #23
 808e2ec:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808e2f0:	966b      	str	r6, [sp, #428]	; 0x1ac
 808e2f2:	05fe      	lsls	r6, r7, #23
 808e2f4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 808e2f6:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808e2fa:	966a      	str	r6, [sp, #424]	; 0x1a8
 808e2fc:	ae6a      	add	r6, sp, #424	; 0x1a8
 808e2fe:	cec0      	ldmia	r6, {r6, r7}
 808e300:	4066      	eors	r6, r4
 808e302:	1986      	adds	r6, r0, r6
 808e304:	ea87 0705 	eor.w	r7, r7, r5
 808e308:	eb41 0707 	adc.w	r7, r1, r7
 808e30c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808e310:	1980      	adds	r0, r0, r6
 808e312:	4179      	adcs	r1, r7
 808e314:	e9cd 0106 	strd	r0, r1, [sp, #24]
 808e318:	ea4f 711a 	mov.w	r1, sl, lsr #28
 808e31c:	ea41 110b 	orr.w	r1, r1, fp, lsl #4
 808e320:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 808e324:	916c      	str	r1, [sp, #432]	; 0x1b0
 808e326:	ea4f 711b 	mov.w	r1, fp, lsr #28
 808e32a:	ea41 110a 	orr.w	r1, r1, sl, lsl #4
 808e32e:	916d      	str	r1, [sp, #436]	; 0x1b4
 808e330:	ea4f 718b 	mov.w	r1, fp, lsl #30
 808e334:	ea41 019a 	orr.w	r1, r1, sl, lsr #2
 808e338:	916f      	str	r1, [sp, #444]	; 0x1bc
 808e33a:	ea4f 718a 	mov.w	r1, sl, lsl #30
 808e33e:	ea41 019b 	orr.w	r1, r1, fp, lsr #2
 808e342:	916e      	str	r1, [sp, #440]	; 0x1b8
 808e344:	a96c      	add	r1, sp, #432	; 0x1b0
 808e346:	e9d1 4500 	ldrd	r4, r5, [r1]
 808e34a:	a96e      	add	r1, sp, #440	; 0x1b8
 808e34c:	e9d1 0100 	ldrd	r0, r1, [r1]
 808e350:	404d      	eors	r5, r1
 808e352:	ea4f 614b 	mov.w	r1, fp, lsl #25
 808e356:	ea41 11da 	orr.w	r1, r1, sl, lsr #7
 808e35a:	9171      	str	r1, [sp, #452]	; 0x1c4
 808e35c:	ea4f 614a 	mov.w	r1, sl, lsl #25
 808e360:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
 808e364:	4044      	eors	r4, r0
 808e366:	9170      	str	r1, [sp, #448]	; 0x1c0
 808e368:	a970      	add	r1, sp, #448	; 0x1c0
 808e36a:	e9d1 0100 	ldrd	r0, r1, [r1]
 808e36e:	4060      	eors	r0, r4
 808e370:	4604      	mov	r4, r0
 808e372:	e9dd 6700 	ldrd	r6, r7, [sp]
 808e376:	4069      	eors	r1, r5
 808e378:	ea48 000a 	orr.w	r0, r8, sl
 808e37c:	460d      	mov	r5, r1
 808e37e:	4006      	ands	r6, r0
 808e380:	ea49 010b 	orr.w	r1, r9, fp
 808e384:	4630      	mov	r0, r6
 808e386:	400f      	ands	r7, r1
 808e388:	4639      	mov	r1, r7
 808e38a:	ea08 060a 	and.w	r6, r8, sl
 808e38e:	4306      	orrs	r6, r0
 808e390:	ea09 070b 	and.w	r7, r9, fp
 808e394:	1930      	adds	r0, r6, r4
 808e396:	ea47 0701 	orr.w	r7, r7, r1
 808e39a:	eb47 0105 	adc.w	r1, r7, r5
 808e39e:	e9dd 451c 	ldrd	r4, r5, [sp, #112]	; 0x70
 808e3a2:	1824      	adds	r4, r4, r0
 808e3a4:	414d      	adcs	r5, r1
 808e3a6:	e9cd 4502 	strd	r4, r5, [sp, #8]
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 808e3aa:	e952 0104 	ldrd	r0, r1, [r2, #-16]
 808e3ae:	e953 4504 	ldrd	r4, r5, [r3, #-16]
 808e3b2:	1900      	adds	r0, r0, r4
 808e3b4:	4169      	adcs	r1, r5
 808e3b6:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 808e3ba:	1824      	adds	r4, r4, r0
 808e3bc:	414d      	adcs	r5, r1
 808e3be:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 808e3c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808e3c6:	4070      	eors	r0, r6
 808e3c8:	4079      	eors	r1, r7
 808e3ca:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 808e3ce:	4006      	ands	r6, r0
 808e3d0:	4630      	mov	r0, r6
 808e3d2:	400f      	ands	r7, r1
 808e3d4:	4639      	mov	r1, r7
 808e3d6:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 808e3da:	4046      	eors	r6, r0
 808e3dc:	19a0      	adds	r0, r4, r6
 808e3de:	ea87 0701 	eor.w	r7, r7, r1
 808e3e2:	9c06      	ldr	r4, [sp, #24]
 808e3e4:	eb45 0107 	adc.w	r1, r5, r7
 808e3e8:	9d07      	ldr	r5, [sp, #28]
 808e3ea:	0ba4      	lsrs	r4, r4, #14
 808e3ec:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808e3f0:	9472      	str	r4, [sp, #456]	; 0x1c8
 808e3f2:	0bac      	lsrs	r4, r5, #14
 808e3f4:	9d06      	ldr	r5, [sp, #24]
 808e3f6:	ae74      	add	r6, sp, #464	; 0x1d0
 808e3f8:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808e3fc:	9473      	str	r4, [sp, #460]	; 0x1cc
 808e3fe:	0cac      	lsrs	r4, r5, #18
 808e400:	9d07      	ldr	r5, [sp, #28]
 808e402:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808e406:	9474      	str	r4, [sp, #464]	; 0x1d0
 808e408:	0cac      	lsrs	r4, r5, #18
 808e40a:	9d06      	ldr	r5, [sp, #24]
 808e40c:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808e410:	9475      	str	r4, [sp, #468]	; 0x1d4
 808e412:	ac72      	add	r4, sp, #456	; 0x1c8
 808e414:	cec0      	ldmia	r6, {r6, r7}
 808e416:	cc30      	ldmia	r4, {r4, r5}
 808e418:	4074      	eors	r4, r6
 808e41a:	9e07      	ldr	r6, [sp, #28]
 808e41c:	407d      	eors	r5, r7
 808e41e:	9f06      	ldr	r7, [sp, #24]
 808e420:	05f6      	lsls	r6, r6, #23
 808e422:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808e426:	9677      	str	r6, [sp, #476]	; 0x1dc
 808e428:	05fe      	lsls	r6, r7, #23
 808e42a:	9f07      	ldr	r7, [sp, #28]
 808e42c:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808e430:	9676      	str	r6, [sp, #472]	; 0x1d8
 808e432:	ae76      	add	r6, sp, #472	; 0x1d8
 808e434:	cec0      	ldmia	r6, {r6, r7}
 808e436:	4066      	eors	r6, r4
 808e438:	1986      	adds	r6, r0, r6
 808e43a:	ea87 0705 	eor.w	r7, r7, r5
 808e43e:	eb41 0707 	adc.w	r7, r1, r7
 808e442:	e9dd 0100 	ldrd	r0, r1, [sp]
 808e446:	1980      	adds	r0, r0, r6
 808e448:	4179      	adcs	r1, r7
 808e44a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 808e44e:	9902      	ldr	r1, [sp, #8]
 808e450:	9803      	ldr	r0, [sp, #12]
 808e452:	0f09      	lsrs	r1, r1, #28
 808e454:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808e458:	9178      	str	r1, [sp, #480]	; 0x1e0
 808e45a:	0f01      	lsrs	r1, r0, #28
 808e45c:	9802      	ldr	r0, [sp, #8]
 808e45e:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808e462:	9179      	str	r1, [sp, #484]	; 0x1e4
 808e464:	9903      	ldr	r1, [sp, #12]
 808e466:	0789      	lsls	r1, r1, #30
 808e468:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808e46c:	917b      	str	r1, [sp, #492]	; 0x1ec
 808e46e:	0781      	lsls	r1, r0, #30
 808e470:	9803      	ldr	r0, [sp, #12]
 808e472:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808e476:	917a      	str	r1, [sp, #488]	; 0x1e8
 808e478:	a978      	add	r1, sp, #480	; 0x1e0
 808e47a:	e9d1 4500 	ldrd	r4, r5, [r1]
 808e47e:	a97a      	add	r1, sp, #488	; 0x1e8
 808e480:	e9d1 0100 	ldrd	r0, r1, [r1]
 808e484:	404d      	eors	r5, r1
 808e486:	9903      	ldr	r1, [sp, #12]
 808e488:	4044      	eors	r4, r0
 808e48a:	9802      	ldr	r0, [sp, #8]
 808e48c:	0649      	lsls	r1, r1, #25
 808e48e:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808e492:	917d      	str	r1, [sp, #500]	; 0x1f4
 808e494:	0641      	lsls	r1, r0, #25
 808e496:	9803      	ldr	r0, [sp, #12]
 808e498:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808e49c:	917c      	str	r1, [sp, #496]	; 0x1f0
 808e49e:	a97c      	add	r1, sp, #496	; 0x1f0
 808e4a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 808e4a4:	4060      	eors	r0, r4
 808e4a6:	4069      	eors	r1, r5
 808e4a8:	e9cd 0100 	strd	r0, r1, [sp]
 808e4ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808e4b0:	ea40 000a 	orr.w	r0, r0, sl
 808e4b4:	ea41 010b 	orr.w	r1, r1, fp
 808e4b8:	ea00 0408 	and.w	r4, r0, r8
 808e4bc:	ea01 0509 	and.w	r5, r1, r9
 808e4c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808e4c4:	ea00 000a 	and.w	r0, r0, sl
 808e4c8:	ea01 010b 	and.w	r1, r1, fp
 808e4cc:	4304      	orrs	r4, r0
 808e4ce:	430d      	orrs	r5, r1
 808e4d0:	4620      	mov	r0, r4
 808e4d2:	4629      	mov	r1, r5
 808e4d4:	e9dd 4500 	ldrd	r4, r5, [sp]
 808e4d8:	1824      	adds	r4, r4, r0
 808e4da:	414d      	adcs	r5, r1
 808e4dc:	19a4      	adds	r4, r4, r6
 808e4de:	417d      	adcs	r5, r7
    }
    while( i < 80 );
 808e4e0:	459c      	cmp	ip, r3
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 808e4e2:	e9cd 4500 	strd	r4, r5, [sp]
    }
    while( i < 80 );
 808e4e6:	f47f ab05 	bne.w	808daf4 <mbedtls_internal_sha512_process+0x1fc>

    ctx->state[0] += A;
 808e4ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 808e4ee:	4623      	mov	r3, r4
 808e4f0:	18c0      	adds	r0, r0, r3
 808e4f2:	4169      	adcs	r1, r5
    ctx->state[1] += B;
 808e4f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808e4f8:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 808e4fc:	18a4      	adds	r4, r4, r2
 808e4fe:	415d      	adcs	r5, r3
 808e500:	e9ce 4506 	strd	r4, r5, [lr, #24]
    ctx->state[2] += C;
 808e504:	e9dd 3410 	ldrd	r3, r4, [sp, #64]	; 0x40
 808e508:	eb13 030a 	adds.w	r3, r3, sl
 808e50c:	eb44 040b 	adc.w	r4, r4, fp
 808e510:	469a      	mov	sl, r3
    ctx->state[3] += D;
    ctx->state[4] += E;
 808e512:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    }
    while( i < 80 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
 808e516:	46a3      	mov	fp, r4
    ctx->state[3] += D;
    ctx->state[4] += E;
 808e518:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
    }
    while( i < 80 );

    ctx->state[0] += A;
 808e51c:	e9ce 0104 	strd	r0, r1, [lr, #16]
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
 808e520:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 808e524:	eb10 0008 	adds.w	r0, r0, r8
 808e528:	eb41 0109 	adc.w	r1, r1, r9
    ctx->state[4] += E;
 808e52c:	18a4      	adds	r4, r4, r2
 808e52e:	415d      	adcs	r5, r3
 808e530:	e9ce 450c 	strd	r4, r5, [lr, #48]	; 0x30
    ctx->state[5] += F;
 808e534:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 808e538:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
 808e53c:	18a4      	adds	r4, r4, r2
 808e53e:	415d      	adcs	r5, r3
 808e540:	e9ce 450e 	strd	r4, r5, [lr, #56]	; 0x38
    ctx->state[6] += G;
 808e544:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 808e548:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
 808e54c:	18a4      	adds	r4, r4, r2
 808e54e:	415d      	adcs	r5, r3
    while( i < 80 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
 808e550:	e9ce 010a 	strd	r0, r1, [lr, #40]	; 0x28
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
    ctx->state[7] += H;
 808e554:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
 808e558:	e9ce 4510 	strd	r4, r5, [lr, #64]	; 0x40
    ctx->state[7] += H;
 808e55c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 808e560:	18c0      	adds	r0, r0, r3
 808e562:	4161      	adcs	r1, r4
 808e564:	e9ce 0112 	strd	r0, r1, [lr, #72]	; 0x48

    return( 0 );
}
 808e568:	2000      	movs	r0, #0
    }
    while( i < 80 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
 808e56a:	e9ce ab08 	strd	sl, fp, [lr, #32]
    ctx->state[5] += F;
    ctx->state[6] += G;
    ctx->state[7] += H;

    return( 0 );
}
 808e56e:	f20d 4d7c 	addw	sp, sp, #1148	; 0x47c
 808e572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808e576:	bf00      	nop

0808e578 <mbedtls_sha512_update_ret>:
 * SHA-512 process buffer
 */
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 808e578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808e57c:	4604      	mov	r4, r0
 808e57e:	460e      	mov	r6, r1
    int ret;
    size_t fill;
    unsigned int left;

    if( ilen == 0 )
 808e580:	4615      	mov	r5, r2
 808e582:	2a00      	cmp	r2, #0
 808e584:	d03d      	beq.n	808e602 <mbedtls_sha512_update_ret+0x8a>
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
 808e586:	e9d0 2300 	ldrd	r2, r3, [r0]
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
 808e58a:	f04f 0900 	mov.w	r9, #0
    unsigned int left;

    if( ilen == 0 )
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
 808e58e:	f002 007f 	and.w	r0, r2, #127	; 0x7f
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
 808e592:	1952      	adds	r2, r2, r5
 808e594:	eb43 0309 	adc.w	r3, r3, r9

    if( ctx->total[0] < (uint64_t) ilen )
 808e598:	454b      	cmp	r3, r9
 808e59a:	bf08      	it	eq
 808e59c:	42aa      	cmpeq	r2, r5
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
 808e59e:	e9c4 2300 	strd	r2, r3, [r4]

    if( ctx->total[0] < (uint64_t) ilen )
 808e5a2:	d206      	bcs.n	808e5b2 <mbedtls_sha512_update_ret+0x3a>
        ctx->total[1]++;
 808e5a4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 808e5a8:	3201      	adds	r2, #1
 808e5aa:	f143 0300 	adc.w	r3, r3, #0
 808e5ae:	e9c4 2302 	strd	r2, r3, [r4, #8]

    if( left && ilen >= fill )
 808e5b2:	b188      	cbz	r0, 808e5d8 <mbedtls_sha512_update_ret+0x60>

    if( ilen == 0 )
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
    fill = 128 - left;
 808e5b4:	f1c0 0780 	rsb	r7, r0, #128	; 0x80
    ctx->total[0] += (uint64_t) ilen;

    if( ctx->total[0] < (uint64_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
 808e5b8:	42bd      	cmp	r5, r7
 808e5ba:	d31c      	bcc.n	808e5f6 <mbedtls_sha512_update_ret+0x7e>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 808e5bc:	f104 0850 	add.w	r8, r4, #80	; 0x50
 808e5c0:	4631      	mov	r1, r6
 808e5c2:	463a      	mov	r2, r7
 808e5c4:	4440      	add	r0, r8
 808e5c6:	f003 fec0 	bl	809234a <memcpy>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 808e5ca:	4641      	mov	r1, r8
 808e5cc:	4620      	mov	r0, r4
 808e5ce:	f7ff f993 	bl	808d8f8 <mbedtls_internal_sha512_process>
 808e5d2:	b9b8      	cbnz	r0, 808e604 <mbedtls_sha512_update_ret+0x8c>
            return( ret );

        input += fill;
 808e5d4:	443e      	add	r6, r7
        ilen  -= fill;
 808e5d6:	1bed      	subs	r5, r5, r7
 * SHA-512 process buffer
 */
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 808e5d8:	462f      	mov	r7, r5
 808e5da:	1be9      	subs	r1, r5, r7
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 128 )
 808e5dc:	2f7f      	cmp	r7, #127	; 0x7f
 808e5de:	4431      	add	r1, r6
 808e5e0:	d905      	bls.n	808e5ee <mbedtls_sha512_update_ret+0x76>
    {
        if( ( ret = mbedtls_internal_sha512_process( ctx, input ) ) != 0 )
 808e5e2:	4620      	mov	r0, r4
 808e5e4:	f7ff f988 	bl	808d8f8 <mbedtls_internal_sha512_process>
 808e5e8:	b960      	cbnz	r0, 808e604 <mbedtls_sha512_update_ret+0x8c>
            return( ret );

        input += 128;
        ilen  -= 128;
 808e5ea:	3f80      	subs	r7, #128	; 0x80
 808e5ec:	e7f5      	b.n	808e5da <mbedtls_sha512_update_ret+0x62>
    }

    if( ilen > 0 )
 808e5ee:	b147      	cbz	r7, 808e602 <mbedtls_sha512_update_ret+0x8a>
 808e5f0:	463d      	mov	r5, r7
 808e5f2:	460e      	mov	r6, r1
 808e5f4:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 808e5f6:	3450      	adds	r4, #80	; 0x50
 808e5f8:	462a      	mov	r2, r5
 808e5fa:	4631      	mov	r1, r6
 808e5fc:	4420      	add	r0, r4
 808e5fe:	f003 fea4 	bl	809234a <memcpy>

    return( 0 );
 808e602:	2000      	movs	r0, #0
}
 808e604:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0808e608 <mbedtls_sha512_finish_ret>:
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
 808e608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808e60a:	4604      	mov	r4, r0
    uint64_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;
 808e60c:	6803      	ldr	r3, [r0, #0]

    ctx->buffer[used++] = 0x80;
 808e60e:	2280      	movs	r2, #128	; 0x80
    uint64_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;
 808e610:	f003 037f 	and.w	r3, r3, #127	; 0x7f

    ctx->buffer[used++] = 0x80;
 808e614:	1c58      	adds	r0, r3, #1

    if( used <= 112 )
 808e616:	2870      	cmp	r0, #112	; 0x70
    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;

    ctx->buffer[used++] = 0x80;
 808e618:	4423      	add	r3, r4
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
 808e61a:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;

    ctx->buffer[used++] = 0x80;
 808e61c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 808e620:	f104 0650 	add.w	r6, r4, #80	; 0x50

    if( used <= 112 )
 808e624:	d804      	bhi.n	808e630 <mbedtls_sha512_finish_ret+0x28>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 112 - used );
 808e626:	f1c0 0270 	rsb	r2, r0, #112	; 0x70
 808e62a:	2100      	movs	r1, #0
 808e62c:	4430      	add	r0, r6
 808e62e:	e00f      	b.n	808e650 <mbedtls_sha512_finish_ret+0x48>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 128 - used );
 808e630:	f1c0 0280 	rsb	r2, r0, #128	; 0x80
 808e634:	2100      	movs	r1, #0
 808e636:	4430      	add	r0, r6
 808e638:	f003 fead 	bl	8092396 <memset>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 808e63c:	4631      	mov	r1, r6
 808e63e:	4620      	mov	r0, r4
 808e640:	f7ff f95a 	bl	808d8f8 <mbedtls_internal_sha512_process>
 808e644:	2800      	cmp	r0, #0
 808e646:	f040 8111 	bne.w	808e86c <mbedtls_sha512_finish_ret+0x264>
            return( ret );

        memset( ctx->buffer, 0, 112 );
 808e64a:	4601      	mov	r1, r0
 808e64c:	4630      	mov	r0, r6
 808e64e:	2270      	movs	r2, #112	; 0x70
 808e650:	f003 fea1 	bl	8092396 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
 808e654:	e894 4080 	ldmia.w	r4, {r7, lr}
         | ( ctx->total[1] <<  3 );
 808e658:	68e3      	ldr	r3, [r4, #12]
 808e65a:	68a2      	ldr	r2, [r4, #8]
 808e65c:	00d9      	lsls	r1, r3, #3
 808e65e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 808e662:	2300      	movs	r3, #0
 808e664:	4319      	orrs	r1, r3
 808e666:	00d0      	lsls	r0, r2, #3
 808e668:	ea4f 725e 	mov.w	r2, lr, lsr #29
 808e66c:	4310      	orrs	r0, r2
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 808e66e:	0e0a      	lsrs	r2, r1, #24
 808e670:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
 808e674:	0c0a      	lsrs	r2, r1, #16
 808e676:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
 808e67a:	0a0a      	lsrs	r2, r1, #8
 808e67c:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
 808e680:	0e02      	lsrs	r2, r0, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 808e682:	ea4f 03ce 	mov.w	r3, lr, lsl #3

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 808e686:	f884 20c4 	strb.w	r2, [r4, #196]	; 0xc4
 808e68a:	0c02      	lsrs	r2, r0, #16
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 808e68c:	ea43 7357 	orr.w	r3, r3, r7, lsr #29

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 808e690:	f884 20c5 	strb.w	r2, [r4, #197]	; 0xc5
 808e694:	0a02      	lsrs	r2, r0, #8
 808e696:	f884 20c6 	strb.w	r2, [r4, #198]	; 0xc6
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 808e69a:	0e1a      	lsrs	r2, r3, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 808e69c:	00ff      	lsls	r7, r7, #3

    PUT_UINT64_BE( high, ctx->buffer, 112 );
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 808e69e:	f884 20c8 	strb.w	r2, [r4, #200]	; 0xc8
 808e6a2:	0c1a      	lsrs	r2, r3, #16
 808e6a4:	f884 20c9 	strb.w	r2, [r4, #201]	; 0xc9
 808e6a8:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb
 808e6ac:	0a1a      	lsrs	r2, r3, #8
 808e6ae:	0e3b      	lsrs	r3, r7, #24
 808e6b0:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
 808e6b4:	0c3b      	lsrs	r3, r7, #16
 808e6b6:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
 808e6ba:	0a3b      	lsrs	r3, r7, #8
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 808e6bc:	f884 10c3 	strb.w	r1, [r4, #195]	; 0xc3
 808e6c0:	f884 00c7 	strb.w	r0, [r4, #199]	; 0xc7
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 808e6c4:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
 808e6c8:	f884 20ca 	strb.w	r2, [r4, #202]	; 0xca
 808e6cc:	f884 70cf 	strb.w	r7, [r4, #207]	; 0xcf

    if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 808e6d0:	4631      	mov	r1, r6
 808e6d2:	4620      	mov	r0, r4
 808e6d4:	f7ff f910 	bl	808d8f8 <mbedtls_internal_sha512_process>
 808e6d8:	4603      	mov	r3, r0
 808e6da:	2800      	cmp	r0, #0
 808e6dc:	f040 80c5 	bne.w	808e86a <mbedtls_sha512_finish_ret+0x262>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT64_BE( ctx->state[0], output,  0 );
 808e6e0:	7de2      	ldrb	r2, [r4, #23]
 808e6e2:	702a      	strb	r2, [r5, #0]
 808e6e4:	8ae2      	ldrh	r2, [r4, #22]
 808e6e6:	706a      	strb	r2, [r5, #1]
 808e6e8:	6962      	ldr	r2, [r4, #20]
 808e6ea:	0a12      	lsrs	r2, r2, #8
 808e6ec:	70aa      	strb	r2, [r5, #2]
 808e6ee:	6962      	ldr	r2, [r4, #20]
 808e6f0:	70ea      	strb	r2, [r5, #3]
 808e6f2:	7ce2      	ldrb	r2, [r4, #19]
 808e6f4:	712a      	strb	r2, [r5, #4]
 808e6f6:	8a62      	ldrh	r2, [r4, #18]
 808e6f8:	716a      	strb	r2, [r5, #5]
 808e6fa:	6922      	ldr	r2, [r4, #16]
 808e6fc:	0a12      	lsrs	r2, r2, #8
 808e6fe:	71aa      	strb	r2, [r5, #6]
 808e700:	6922      	ldr	r2, [r4, #16]
 808e702:	71ea      	strb	r2, [r5, #7]
    PUT_UINT64_BE( ctx->state[1], output,  8 );
 808e704:	7fe2      	ldrb	r2, [r4, #31]
 808e706:	722a      	strb	r2, [r5, #8]
 808e708:	8be2      	ldrh	r2, [r4, #30]
 808e70a:	726a      	strb	r2, [r5, #9]
 808e70c:	69e2      	ldr	r2, [r4, #28]
 808e70e:	0a12      	lsrs	r2, r2, #8
 808e710:	72aa      	strb	r2, [r5, #10]
 808e712:	69e2      	ldr	r2, [r4, #28]
 808e714:	72ea      	strb	r2, [r5, #11]
 808e716:	7ee2      	ldrb	r2, [r4, #27]
 808e718:	732a      	strb	r2, [r5, #12]
 808e71a:	8b62      	ldrh	r2, [r4, #26]
 808e71c:	736a      	strb	r2, [r5, #13]
 808e71e:	69a2      	ldr	r2, [r4, #24]
 808e720:	0a12      	lsrs	r2, r2, #8
 808e722:	73aa      	strb	r2, [r5, #14]
 808e724:	69a2      	ldr	r2, [r4, #24]
 808e726:	73ea      	strb	r2, [r5, #15]
    PUT_UINT64_BE( ctx->state[2], output, 16 );
 808e728:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 808e72c:	742a      	strb	r2, [r5, #16]
 808e72e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 808e730:	746a      	strb	r2, [r5, #17]
 808e732:	6a62      	ldr	r2, [r4, #36]	; 0x24
 808e734:	0a12      	lsrs	r2, r2, #8
 808e736:	74aa      	strb	r2, [r5, #18]
 808e738:	6a62      	ldr	r2, [r4, #36]	; 0x24
 808e73a:	74ea      	strb	r2, [r5, #19]
 808e73c:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 808e740:	752a      	strb	r2, [r5, #20]
 808e742:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 808e744:	756a      	strb	r2, [r5, #21]
 808e746:	6a22      	ldr	r2, [r4, #32]
 808e748:	0a12      	lsrs	r2, r2, #8
 808e74a:	75aa      	strb	r2, [r5, #22]
 808e74c:	6a22      	ldr	r2, [r4, #32]
 808e74e:	75ea      	strb	r2, [r5, #23]
    PUT_UINT64_BE( ctx->state[3], output, 24 );
 808e750:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 808e754:	762a      	strb	r2, [r5, #24]
 808e756:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 808e758:	766a      	strb	r2, [r5, #25]
 808e75a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808e75c:	0a12      	lsrs	r2, r2, #8
 808e75e:	76aa      	strb	r2, [r5, #26]
 808e760:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808e762:	76ea      	strb	r2, [r5, #27]
 808e764:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
 808e768:	772a      	strb	r2, [r5, #28]
 808e76a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 808e76c:	776a      	strb	r2, [r5, #29]
 808e76e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 808e770:	0a12      	lsrs	r2, r2, #8
 808e772:	77aa      	strb	r2, [r5, #30]
 808e774:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 808e776:	77ea      	strb	r2, [r5, #31]
    PUT_UINT64_BE( ctx->state[4], output, 32 );
 808e778:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
 808e77c:	f885 2020 	strb.w	r2, [r5, #32]
 808e780:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 808e782:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
 808e786:	6b62      	ldr	r2, [r4, #52]	; 0x34
 808e788:	0a12      	lsrs	r2, r2, #8
 808e78a:	f885 2022 	strb.w	r2, [r5, #34]	; 0x22
 808e78e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 808e790:	f885 2023 	strb.w	r2, [r5, #35]	; 0x23
 808e794:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
 808e798:	f885 2024 	strb.w	r2, [r5, #36]	; 0x24
 808e79c:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 808e79e:	f885 2025 	strb.w	r2, [r5, #37]	; 0x25
 808e7a2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 808e7a4:	0a12      	lsrs	r2, r2, #8
 808e7a6:	f885 2026 	strb.w	r2, [r5, #38]	; 0x26
 808e7aa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 808e7ac:	f885 2027 	strb.w	r2, [r5, #39]	; 0x27
    PUT_UINT64_BE( ctx->state[5], output, 40 );
 808e7b0:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 808e7b4:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
 808e7b8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 808e7ba:	f885 2029 	strb.w	r2, [r5, #41]	; 0x29
 808e7be:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 808e7c0:	0a12      	lsrs	r2, r2, #8
 808e7c2:	f885 202a 	strb.w	r2, [r5, #42]	; 0x2a
 808e7c6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 808e7c8:	f885 202b 	strb.w	r2, [r5, #43]	; 0x2b
 808e7cc:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
 808e7d0:	f885 202c 	strb.w	r2, [r5, #44]	; 0x2c
 808e7d4:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 808e7d6:	f885 202d 	strb.w	r2, [r5, #45]	; 0x2d
 808e7da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 808e7dc:	0a12      	lsrs	r2, r2, #8
 808e7de:	f885 202e 	strb.w	r2, [r5, #46]	; 0x2e
 808e7e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 808e7e4:	f885 202f 	strb.w	r2, [r5, #47]	; 0x2f

    if( ctx->is384 == 0 )
 808e7e8:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
 808e7ec:	2800      	cmp	r0, #0
 808e7ee:	d13c      	bne.n	808e86a <mbedtls_sha512_finish_ret+0x262>
    {
        PUT_UINT64_BE( ctx->state[6], output, 48 );
 808e7f0:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 808e7f4:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 808e7f8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 808e7fc:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
 808e800:	6c63      	ldr	r3, [r4, #68]	; 0x44
 808e802:	0a1b      	lsrs	r3, r3, #8
 808e804:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
 808e808:	6c63      	ldr	r3, [r4, #68]	; 0x44
 808e80a:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
 808e80e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 808e812:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 808e816:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 808e81a:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
 808e81e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808e820:	0a1b      	lsrs	r3, r3, #8
 808e822:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 808e826:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808e828:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
        PUT_UINT64_BE( ctx->state[7], output, 56 );
 808e82c:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
 808e830:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 808e834:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 808e838:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
 808e83c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 808e83e:	0a1b      	lsrs	r3, r3, #8
 808e840:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
 808e844:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 808e846:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
 808e84a:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 808e84e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
 808e852:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 808e856:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
 808e85a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 808e85c:	0a1b      	lsrs	r3, r3, #8
 808e85e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
 808e862:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 808e864:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
 808e868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    return( 0 );
 808e86a:	4618      	mov	r0, r3
}
 808e86c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808e86e <mbedtls_sha512_ret>:
 */
int mbedtls_sha512_ret( const unsigned char *input,
                    size_t ilen,
                    unsigned char output[64],
                    int is384 )
{
 808e86e:	b5f0      	push	{r4, r5, r6, r7, lr}
 808e870:	461f      	mov	r7, r3
 808e872:	b0b7      	sub	sp, #220	; 0xdc
 808e874:	4605      	mov	r5, r0
    int ret;
    mbedtls_sha512_context ctx;

    mbedtls_sha512_init( &ctx );
 808e876:	4668      	mov	r0, sp
 */
int mbedtls_sha512_ret( const unsigned char *input,
                    size_t ilen,
                    unsigned char output[64],
                    int is384 )
{
 808e878:	460e      	mov	r6, r1
 808e87a:	4614      	mov	r4, r2
    int ret;
    mbedtls_sha512_context ctx;

    mbedtls_sha512_init( &ctx );
 808e87c:	f7fe ff8c 	bl	808d798 <mbedtls_sha512_init>

    if( ( ret = mbedtls_sha512_starts_ret( &ctx, is384 ) ) != 0 )
 808e880:	4639      	mov	r1, r7
 808e882:	4668      	mov	r0, sp
 808e884:	f7fe ff9c 	bl	808d7c0 <mbedtls_sha512_starts_ret>
 808e888:	4601      	mov	r1, r0
 808e88a:	b958      	cbnz	r0, 808e8a4 <mbedtls_sha512_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha512_update_ret( &ctx, input, ilen ) ) != 0 )
 808e88c:	4629      	mov	r1, r5
 808e88e:	4632      	mov	r2, r6
 808e890:	4668      	mov	r0, sp
 808e892:	f7ff fe71 	bl	808e578 <mbedtls_sha512_update_ret>
 808e896:	4601      	mov	r1, r0
 808e898:	b920      	cbnz	r0, 808e8a4 <mbedtls_sha512_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha512_finish_ret( &ctx, output ) ) != 0 )
 808e89a:	4621      	mov	r1, r4
 808e89c:	4668      	mov	r0, sp
 808e89e:	f7ff feb3 	bl	808e608 <mbedtls_sha512_finish_ret>
 808e8a2:	4601      	mov	r1, r0
        goto exit;

exit:
    mbedtls_sha512_free( &ctx );
 808e8a4:	4668      	mov	r0, sp
 808e8a6:	f7fe ff7b 	bl	808d7a0 <mbedtls_sha512_free>

    return( ret );
}
 808e8aa:	4608      	mov	r0, r1
 808e8ac:	b037      	add	sp, #220	; 0xdc
 808e8ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808e8b0 <mbedtls_pem_init>:
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
}

void mbedtls_pem_init( mbedtls_pem_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_pem_context ) );
 808e8b0:	2300      	movs	r3, #0
 808e8b2:	6003      	str	r3, [r0, #0]
 808e8b4:	6043      	str	r3, [r0, #4]
 808e8b6:	6083      	str	r3, [r0, #8]
 808e8b8:	4770      	bx	lr
	...

0808e8bc <mbedtls_pem_read_buffer>:
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

int mbedtls_pem_read_buffer( mbedtls_pem_context *ctx, const char *header, const char *footer,
                     const unsigned char *data, const unsigned char *pwd,
                     size_t pwdlen, size_t *use_len )
{
 808e8bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808e8c0:	4689      	mov	r9, r1
 808e8c2:	b085      	sub	sp, #20
 808e8c4:	4690      	mov	r8, r2
 808e8c6:	461f      	mov	r7, r3
    ((void) pwd);
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
 808e8c8:	4606      	mov	r6, r0
 808e8ca:	2800      	cmp	r0, #0
 808e8cc:	d067      	beq.n	808e99e <mbedtls_pem_read_buffer+0xe2>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );

    s1 = (unsigned char *) strstr( (const char *) data, header );
 808e8ce:	4618      	mov	r0, r3
 808e8d0:	f003 fda0 	bl	8092414 <strstr>

    if( s1 == NULL )
 808e8d4:	4604      	mov	r4, r0
 808e8d6:	2800      	cmp	r0, #0
 808e8d8:	d063      	beq.n	808e9a2 <mbedtls_pem_read_buffer+0xe6>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s2 = (unsigned char *) strstr( (const char *) data, footer );
 808e8da:	4641      	mov	r1, r8
 808e8dc:	4638      	mov	r0, r7
 808e8de:	f003 fd99 	bl	8092414 <strstr>

    if( s2 == NULL || s2 <= s1 )
 808e8e2:	4605      	mov	r5, r0
 808e8e4:	2800      	cmp	r0, #0
 808e8e6:	d05c      	beq.n	808e9a2 <mbedtls_pem_read_buffer+0xe6>
 808e8e8:	4284      	cmp	r4, r0
 808e8ea:	d25a      	bcs.n	808e9a2 <mbedtls_pem_read_buffer+0xe6>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
 808e8ec:	4648      	mov	r0, r9
 808e8ee:	f003 fd89 	bl	8092404 <strlen>
    if( *s1 == ' '  ) s1++;
 808e8f2:	5c22      	ldrb	r2, [r4, r0]
    s2 = (unsigned char *) strstr( (const char *) data, footer );

    if( s2 == NULL || s2 <= s1 )
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
 808e8f4:	1823      	adds	r3, r4, r0
    if( *s1 == ' '  ) s1++;
 808e8f6:	2a20      	cmp	r2, #32
 808e8f8:	bf08      	it	eq
 808e8fa:	3301      	addeq	r3, #1
    if( *s1 == '\r' ) s1++;
 808e8fc:	781a      	ldrb	r2, [r3, #0]
 808e8fe:	2a0d      	cmp	r2, #13
 808e900:	bf08      	it	eq
 808e902:	3301      	addeq	r3, #1
    if( *s1 == '\n' ) s1++;
 808e904:	781a      	ldrb	r2, [r3, #0]
 808e906:	2a0a      	cmp	r2, #10
 808e908:	d14b      	bne.n	808e9a2 <mbedtls_pem_read_buffer+0xe6>
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
 808e90a:	4640      	mov	r0, r8
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
    if( *s1 == ' '  ) s1++;
    if( *s1 == '\r' ) s1++;
    if( *s1 == '\n' ) s1++;
 808e90c:	1c5c      	adds	r4, r3, #1
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
 808e90e:	f003 fd79 	bl	8092404 <strlen>
    if( *end == ' '  ) end++;
 808e912:	5c2a      	ldrb	r2, [r5, r0]
    if( *s1 == '\r' ) s1++;
    if( *s1 == '\n' ) s1++;
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
 808e914:	182b      	adds	r3, r5, r0
    if( *end == ' '  ) end++;
 808e916:	2a20      	cmp	r2, #32
 808e918:	bf08      	it	eq
 808e91a:	3301      	addeq	r3, #1
    if( *end == '\r' ) end++;
 808e91c:	781a      	ldrb	r2, [r3, #0]
 808e91e:	2a0d      	cmp	r2, #13
 808e920:	bf08      	it	eq
 808e922:	3301      	addeq	r3, #1
    if( *end == '\n' ) end++;
 808e924:	781a      	ldrb	r2, [r3, #0]
 808e926:	2a0a      	cmp	r2, #10
 808e928:	bf08      	it	eq
 808e92a:	3301      	addeq	r3, #1
    *use_len = end - data;
 808e92c:	1bdb      	subs	r3, r3, r7
 808e92e:	9a0e      	ldr	r2, [sp, #56]	; 0x38

    enc = 0;

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
 808e930:	1b2f      	subs	r7, r5, r4
 808e932:	2f15      	cmp	r7, #21
    end = s2;
    end += strlen( footer );
    if( *end == ' '  ) end++;
    if( *end == '\r' ) end++;
    if( *end == '\n' ) end++;
    *use_len = end - data;
 808e934:	6013      	str	r3, [r2, #0]

    enc = 0;

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
 808e936:	dd05      	ble.n	808e944 <mbedtls_pem_read_buffer+0x88>
 808e938:	2216      	movs	r2, #22
 808e93a:	4920      	ldr	r1, [pc, #128]	; (808e9bc <mbedtls_pem_read_buffer+0x100>)
 808e93c:	4620      	mov	r0, r4
 808e93e:	f003 fcf5 	bl	809232c <memcmp>
 808e942:	b380      	cbz	r0, 808e9a6 <mbedtls_pem_read_buffer+0xea>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    if( s1 >= s2 )
 808e944:	42a5      	cmp	r5, r4
 808e946:	d930      	bls.n	808e9aa <mbedtls_pem_read_buffer+0xee>
        return( MBEDTLS_ERR_PEM_INVALID_DATA );

    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );
 808e948:	2100      	movs	r1, #0
 808e94a:	9700      	str	r7, [sp, #0]
 808e94c:	4623      	mov	r3, r4
 808e94e:	aa03      	add	r2, sp, #12
 808e950:	4608      	mov	r0, r1
 808e952:	f7f8 fe11 	bl	8087578 <mbedtls_base64_decode>

    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
 808e956:	302c      	adds	r0, #44	; 0x2c
 808e958:	d029      	beq.n	808e9ae <mbedtls_pem_read_buffer+0xf2>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );

    if( ( buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
 808e95a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 808e95e:	2001      	movs	r0, #1
 808e960:	4641      	mov	r1, r8
 808e962:	f003 fccd 	bl	8092300 <calloc>
 808e966:	4605      	mov	r5, r0
 808e968:	b318      	cbz	r0, 808e9b2 <mbedtls_pem_read_buffer+0xf6>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );

    if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
 808e96a:	4623      	mov	r3, r4
 808e96c:	9700      	str	r7, [sp, #0]
 808e96e:	aa03      	add	r2, sp, #12
 808e970:	4641      	mov	r1, r8
 808e972:	f7f8 fe01 	bl	8087578 <mbedtls_base64_decode>
 808e976:	9b03      	ldr	r3, [sp, #12]
 808e978:	4604      	mov	r4, r0
 808e97a:	b168      	cbz	r0, 808e998 <mbedtls_pem_read_buffer+0xdc>
    {
        mbedtls_zeroize( buf, len );
 808e97c:	462a      	mov	r2, r5
 808e97e:	442b      	add	r3, r5
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808e980:	2100      	movs	r1, #0
 808e982:	429a      	cmp	r2, r3
 808e984:	d002      	beq.n	808e98c <mbedtls_pem_read_buffer+0xd0>
 808e986:	7011      	strb	r1, [r2, #0]
 808e988:	3201      	adds	r2, #1
 808e98a:	e7fa      	b.n	808e982 <mbedtls_pem_read_buffer+0xc6>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );

    if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
    {
        mbedtls_zeroize( buf, len );
        mbedtls_free( buf );
 808e98c:	4628      	mov	r0, r5
 808e98e:	f001 ff73 	bl	8090878 <free>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 808e992:	f5a4 5088 	sub.w	r0, r4, #4352	; 0x1100
 808e996:	e00d      	b.n	808e9b4 <mbedtls_pem_read_buffer+0xf8>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    ctx->buf = buf;
 808e998:	6035      	str	r5, [r6, #0]
    ctx->buflen = len;
 808e99a:	6073      	str	r3, [r6, #4]

    return( 0 );
 808e99c:	e00a      	b.n	808e9b4 <mbedtls_pem_read_buffer+0xf8>
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );
 808e99e:	4808      	ldr	r0, [pc, #32]	; (808e9c0 <mbedtls_pem_read_buffer+0x104>)
 808e9a0:	e008      	b.n	808e9b4 <mbedtls_pem_read_buffer+0xf8>

    s1 = (unsigned char *) strstr( (const char *) data, header );

    if( s1 == NULL )
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
 808e9a2:	4808      	ldr	r0, [pc, #32]	; (808e9c4 <mbedtls_pem_read_buffer+0x108>)
 808e9a4:	e006      	b.n	808e9b4 <mbedtls_pem_read_buffer+0xf8>

        if( *s1 == '\r' ) s1++;
        if( *s1 == '\n' ) s1++;
        else return( MBEDTLS_ERR_PEM_INVALID_DATA );
#else
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
 808e9a6:	4808      	ldr	r0, [pc, #32]	; (808e9c8 <mbedtls_pem_read_buffer+0x10c>)
 808e9a8:	e004      	b.n	808e9b4 <mbedtls_pem_read_buffer+0xf8>
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    if( s1 >= s2 )
        return( MBEDTLS_ERR_PEM_INVALID_DATA );
 808e9aa:	4808      	ldr	r0, [pc, #32]	; (808e9cc <mbedtls_pem_read_buffer+0x110>)
 808e9ac:	e002      	b.n	808e9b4 <mbedtls_pem_read_buffer+0xf8>

    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );

    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 808e9ae:	4808      	ldr	r0, [pc, #32]	; (808e9d0 <mbedtls_pem_read_buffer+0x114>)
 808e9b0:	e000      	b.n	808e9b4 <mbedtls_pem_read_buffer+0xf8>

    if( ( buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );
 808e9b2:	4808      	ldr	r0, [pc, #32]	; (808e9d4 <mbedtls_pem_read_buffer+0x118>)

    ctx->buf = buf;
    ctx->buflen = len;

    return( 0 );
}
 808e9b4:	b005      	add	sp, #20
 808e9b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808e9ba:	bf00      	nop
 808e9bc:	080947a8 	.word	0x080947a8
 808e9c0:	ffffeb80 	.word	0xffffeb80
 808e9c4:	ffffef80 	.word	0xffffef80
 808e9c8:	ffffec00 	.word	0xffffec00
 808e9cc:	ffffef00 	.word	0xffffef00
 808e9d0:	ffffeed4 	.word	0xffffeed4
 808e9d4:	ffffee80 	.word	0xffffee80

0808e9d8 <mbedtls_pem_free>:

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
 808e9d8:	b510      	push	{r4, lr}
    if( ctx->buf != NULL )
 808e9da:	6803      	ldr	r3, [r0, #0]

    return( 0 );
}

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
 808e9dc:	4604      	mov	r4, r0
    if( ctx->buf != NULL )
 808e9de:	b13b      	cbz	r3, 808e9f0 <mbedtls_pem_free+0x18>
 808e9e0:	6842      	ldr	r2, [r0, #4]
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808e9e2:	2100      	movs	r1, #0
 808e9e4:	441a      	add	r2, r3
 808e9e6:	429a      	cmp	r2, r3
 808e9e8:	d002      	beq.n	808e9f0 <mbedtls_pem_free+0x18>
 808e9ea:	7019      	strb	r1, [r3, #0]
 808e9ec:	3301      	adds	r3, #1
 808e9ee:	e7fa      	b.n	808e9e6 <mbedtls_pem_free+0xe>

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
    if( ctx->buf != NULL )
        mbedtls_zeroize( ctx->buf, ctx->buflen );
    mbedtls_free( ctx->buf );
 808e9f0:	6820      	ldr	r0, [r4, #0]
 808e9f2:	f001 ff41 	bl	8090878 <free>
    mbedtls_free( ctx->info );
 808e9f6:	68a0      	ldr	r0, [r4, #8]
 808e9f8:	f001 ff3e 	bl	8090878 <free>
 808e9fc:	f104 020c 	add.w	r2, r4, #12
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808ea00:	2300      	movs	r3, #0
 808ea02:	4294      	cmp	r4, r2
 808ea04:	d002      	beq.n	808ea0c <mbedtls_pem_free+0x34>
 808ea06:	7023      	strb	r3, [r4, #0]
 808ea08:	3401      	adds	r4, #1
 808ea0a:	e7fa      	b.n	808ea02 <mbedtls_pem_free+0x2a>
 808ea0c:	bd10      	pop	{r4, pc}
	...

0808ea10 <mbedtls_rsa_deduce_primes>:
 *
 */
int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
                     mbedtls_mpi const *E, mbedtls_mpi const *D,
                     mbedtls_mpi *P, mbedtls_mpi *Q )
{
 808ea10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808ea14:	4606      	mov	r6, r0
 808ea16:	4688      	mov	r8, r1
 808ea18:	b096      	sub	sp, #88	; 0x58
 808ea1a:	461f      	mov	r7, r3
          61,   67,   71,   73,   79,   83,   89,   97,
         101,  103,  107,  109,  113,  127,  131,  137,
         139,  149,  151,  157,  163,  167,  173,  179,
         181,  191,  193,  197,  199,  211,  223,  227,
         229,  233,  239,  241,  251
    };
 808ea1c:	4b79      	ldr	r3, [pc, #484]	; (808ec04 <mbedtls_rsa_deduce_primes+0x1f4>)
 *
 */
int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
                     mbedtls_mpi const *E, mbedtls_mpi const *D,
                     mbedtls_mpi *P, mbedtls_mpi *Q )
{
 808ea1e:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 808ea22:	4615      	mov	r5, r2
          61,   67,   71,   73,   79,   83,   89,   97,
         101,  103,  107,  109,  113,  127,  131,  137,
         139,  149,  151,  157,  163,  167,  173,  179,
         181,  191,  193,  197,  199,  211,  223,  227,
         229,  233,  239,  241,  251
    };
 808ea24:	f103 0e30 	add.w	lr, r3, #48	; 0x30
 808ea28:	aa08      	add	r2, sp, #32
 808ea2a:	4614      	mov	r4, r2
 808ea2c:	6818      	ldr	r0, [r3, #0]
 808ea2e:	6859      	ldr	r1, [r3, #4]
 808ea30:	3308      	adds	r3, #8
 808ea32:	c403      	stmia	r4!, {r0, r1}
 808ea34:	4573      	cmp	r3, lr
 808ea36:	4622      	mov	r2, r4
 808ea38:	d1f7      	bne.n	808ea2a <mbedtls_rsa_deduce_primes+0x1a>
 808ea3a:	6818      	ldr	r0, [r3, #0]
 808ea3c:	889b      	ldrh	r3, [r3, #4]
 808ea3e:	6020      	str	r0, [r4, #0]
 808ea40:	80a3      	strh	r3, [r4, #4]

    const size_t num_primes = sizeof( primes ) / sizeof( *primes );

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
 808ea42:	2f00      	cmp	r7, #0
 808ea44:	f000 80b8 	beq.w	808ebb8 <mbedtls_rsa_deduce_primes+0x1a8>
 808ea48:	f1b9 0f00 	cmp.w	r9, #0
 808ea4c:	f000 80b4 	beq.w	808ebb8 <mbedtls_rsa_deduce_primes+0x1a8>
 808ea50:	68bb      	ldr	r3, [r7, #8]
 808ea52:	2b00      	cmp	r3, #0
 808ea54:	f040 80b0 	bne.w	808ebb8 <mbedtls_rsa_deduce_primes+0x1a8>
 808ea58:	f8d9 1008 	ldr.w	r1, [r9, #8]
 808ea5c:	2900      	cmp	r1, #0
 808ea5e:	f040 80ab 	bne.w	808ebb8 <mbedtls_rsa_deduce_primes+0x1a8>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 808ea62:	4630      	mov	r0, r6
 808ea64:	f7fc fd6e 	bl	808b544 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 808ea68:	2800      	cmp	r0, #0
 808ea6a:	f340 80a5 	ble.w	808ebb8 <mbedtls_rsa_deduce_primes+0x1a8>

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 808ea6e:	2101      	movs	r1, #1
 808ea70:	4628      	mov	r0, r5
 808ea72:	f7fc fd67 	bl	808b544 <mbedtls_mpi_cmp_int>
    const size_t num_primes = sizeof( primes ) / sizeof( *primes );

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 808ea76:	2800      	cmp	r0, #0
 808ea78:	f340 809e 	ble.w	808ebb8 <mbedtls_rsa_deduce_primes+0x1a8>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 808ea7c:	4631      	mov	r1, r6
 808ea7e:	4628      	mov	r0, r5
 808ea80:	f7fc fd1b 	bl	808b4ba <mbedtls_mpi_cmp_mpi>

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 808ea84:	2800      	cmp	r0, #0
 808ea86:	f280 8097 	bge.w	808ebb8 <mbedtls_rsa_deduce_primes+0x1a8>
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 808ea8a:	2101      	movs	r1, #1
 808ea8c:	4640      	mov	r0, r8
 808ea8e:	f7fc fd59 	bl	808b544 <mbedtls_mpi_cmp_int>
    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 808ea92:	2800      	cmp	r0, #0
 808ea94:	f340 8090 	ble.w	808ebb8 <mbedtls_rsa_deduce_primes+0x1a8>
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 808ea98:	4631      	mov	r1, r6
 808ea9a:	4640      	mov	r0, r8
 808ea9c:	f7fc fd0d 	bl	808b4ba <mbedtls_mpi_cmp_mpi>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 808eaa0:	2800      	cmp	r0, #0
 808eaa2:	f280 8089 	bge.w	808ebb8 <mbedtls_rsa_deduce_primes+0x1a8>

    /*
     * Initializations and temporary changes
     */

    mbedtls_mpi_init( &K );
 808eaa6:	a805      	add	r0, sp, #20
 808eaa8:	f7fc faa2 	bl	808aff0 <mbedtls_mpi_init>
    mbedtls_mpi_init( &T );
 808eaac:	a802      	add	r0, sp, #8
 808eaae:	f7fc fa9f 	bl	808aff0 <mbedtls_mpi_init>

    /* T := DE - 1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, D,  E ) );
 808eab2:	4642      	mov	r2, r8
 808eab4:	4629      	mov	r1, r5
 808eab6:	a802      	add	r0, sp, #8
 808eab8:	f7fc fe63 	bl	808b782 <mbedtls_mpi_mul_mpi>
 808eabc:	4604      	mov	r4, r0
 808eabe:	2800      	cmp	r0, #0
 808eac0:	d172      	bne.n	808eba8 <mbedtls_rsa_deduce_primes+0x198>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &T, &T, 1 ) );
 808eac2:	a902      	add	r1, sp, #8
 808eac4:	2201      	movs	r2, #1
 808eac6:	4608      	mov	r0, r1
 808eac8:	f7fc fe45 	bl	808b756 <mbedtls_mpi_sub_int>
 808eacc:	4604      	mov	r4, r0
 808eace:	2800      	cmp	r0, #0
 808ead0:	d16a      	bne.n	808eba8 <mbedtls_rsa_deduce_primes+0x198>

    if( ( order = (uint16_t) mbedtls_mpi_lsb( &T ) ) == 0 )
 808ead2:	a802      	add	r0, sp, #8
 808ead4:	f7fc fb2c 	bl	808b130 <mbedtls_mpi_lsb>
 808ead8:	fa1f fa80 	uxth.w	sl, r0
 808eadc:	f1ba 0f00 	cmp.w	sl, #0
 808eae0:	d102      	bne.n	808eae8 <mbedtls_rsa_deduce_primes+0xd8>
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 808eae2:	f06f 0403 	mvn.w	r4, #3
 808eae6:	e05f      	b.n	808eba8 <mbedtls_rsa_deduce_primes+0x198>
        goto cleanup;
    }

    /* After this operation, T holds the largest odd divisor of DE - 1. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &T, order ) );
 808eae8:	4651      	mov	r1, sl
 808eaea:	a802      	add	r0, sp, #8
 808eaec:	f7fc fc06 	bl	808b2fc <mbedtls_mpi_shift_r>
 808eaf0:	4604      	mov	r4, r0
 808eaf2:	2800      	cmp	r0, #0
 808eaf4:	d158      	bne.n	808eba8 <mbedtls_rsa_deduce_primes+0x198>
     * Actual work
     */

    /* Skip trying 2 if N == 1 mod 8 */
    attempt = 0;
    if( N->p[0] % 8 == 1 )
 808eaf6:	68b3      	ldr	r3, [r6, #8]
        attempt = 1;
 808eaf8:	681d      	ldr	r5, [r3, #0]
 808eafa:	f005 0507 	and.w	r5, r5, #7
 808eafe:	1e6b      	subs	r3, r5, #1
 808eb00:	425d      	negs	r5, r3
 808eb02:	415d      	adcs	r5, r3

    for( ; attempt < num_primes; ++attempt )
    {
        mbedtls_mpi_lset( &K, primes[attempt] );
 808eb04:	ab16      	add	r3, sp, #88	; 0x58
 808eb06:	442b      	add	r3, r5
 808eb08:	f813 1c38 	ldrb.w	r1, [r3, #-56]
 808eb0c:	a805      	add	r0, sp, #20
 808eb0e:	f7fc fae2 	bl	808b0d6 <mbedtls_mpi_lset>

        /* Check if gcd(K,N) = 1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 808eb12:	4632      	mov	r2, r6
 808eb14:	a905      	add	r1, sp, #20
 808eb16:	4638      	mov	r0, r7
 808eb18:	f7fd fac0 	bl	808c09c <mbedtls_mpi_gcd>
 808eb1c:	4604      	mov	r4, r0
 808eb1e:	2800      	cmp	r0, #0
 808eb20:	d142      	bne.n	808eba8 <mbedtls_rsa_deduce_primes+0x198>
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
 808eb22:	2101      	movs	r1, #1
 808eb24:	4638      	mov	r0, r7
 808eb26:	f7fc fd0d 	bl	808b544 <mbedtls_mpi_cmp_int>
 808eb2a:	b120      	cbz	r0, 808eb36 <mbedtls_rsa_deduce_primes+0x126>
    /* Skip trying 2 if N == 1 mod 8 */
    attempt = 0;
    if( N->p[0] % 8 == 1 )
        attempt = 1;

    for( ; attempt < num_primes; ++attempt )
 808eb2c:	3501      	adds	r5, #1
 808eb2e:	b2ad      	uxth	r5, r5
 808eb30:	2d36      	cmp	r5, #54	; 0x36
 808eb32:	d1e7      	bne.n	808eb04 <mbedtls_rsa_deduce_primes+0xf4>
 808eb34:	e7d5      	b.n	808eae2 <mbedtls_rsa_deduce_primes+0xd2>
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
            continue;

        /* Go through K^T + 1, K^(2T) + 1, K^(4T) + 1, ...
         * and check whether they have nontrivial GCD with N. */
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
 808eb36:	a905      	add	r1, sp, #20
 808eb38:	f8cd 9000 	str.w	r9, [sp]
 808eb3c:	4633      	mov	r3, r6
 808eb3e:	aa02      	add	r2, sp, #8
 808eb40:	4608      	mov	r0, r1
 808eb42:	f7fd f88c 	bl	808bc5e <mbedtls_mpi_exp_mod>
 808eb46:	4604      	mov	r4, r0
 808eb48:	bb70      	cbnz	r0, 808eba8 <mbedtls_rsa_deduce_primes+0x198>
 808eb4a:	f04f 0801 	mov.w	r8, #1

        for( iter = 1; iter <= order; ++iter )
        {
            /* If we reach 1 prematurely, there's no point
             * in continuing to square K */
            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
 808eb4e:	2101      	movs	r1, #1
 808eb50:	a805      	add	r0, sp, #20
 808eb52:	f7fc fcf7 	bl	808b544 <mbedtls_mpi_cmp_int>
 808eb56:	b930      	cbnz	r0, 808eb66 <mbedtls_rsa_deduce_primes+0x156>
         * we reached 1, or K holds primes[attempt]^(DE - 1) mod N, which must
         * be 1 if D,E,N were consistent.
         * Check if that's the case and abort if not, to avoid very long,
         * yet eventually failing, computations if N,D,E were not sane.
         */
        if( mbedtls_mpi_cmp_int( &K, 1 ) != 0 )
 808eb58:	2101      	movs	r1, #1
 808eb5a:	a805      	add	r0, sp, #20
 808eb5c:	f7fc fcf2 	bl	808b544 <mbedtls_mpi_cmp_int>
 808eb60:	2800      	cmp	r0, #0
 808eb62:	d0e3      	beq.n	808eb2c <mbedtls_rsa_deduce_primes+0x11c>
 808eb64:	e7bd      	b.n	808eae2 <mbedtls_rsa_deduce_primes+0xd2>
            /* If we reach 1 prematurely, there's no point
             * in continuing to square K */
            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
                break;

            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
 808eb66:	a905      	add	r1, sp, #20
 808eb68:	2201      	movs	r2, #1
 808eb6a:	4608      	mov	r0, r1
 808eb6c:	f7fc fddd 	bl	808b72a <mbedtls_mpi_add_int>
 808eb70:	4604      	mov	r4, r0
 808eb72:	b9c8      	cbnz	r0, 808eba8 <mbedtls_rsa_deduce_primes+0x198>
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 808eb74:	4632      	mov	r2, r6
 808eb76:	a905      	add	r1, sp, #20
 808eb78:	4638      	mov	r0, r7
 808eb7a:	f7fd fa8f 	bl	808c09c <mbedtls_mpi_gcd>
 808eb7e:	4604      	mov	r4, r0
 808eb80:	b990      	cbnz	r0, 808eba8 <mbedtls_rsa_deduce_primes+0x198>

            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 808eb82:	2101      	movs	r1, #1
 808eb84:	4638      	mov	r0, r7
 808eb86:	f7fc fcdd 	bl	808b544 <mbedtls_mpi_cmp_int>
 808eb8a:	2801      	cmp	r0, #1
 808eb8c:	d117      	bne.n	808ebbe <mbedtls_rsa_deduce_primes+0x1ae>
                mbedtls_mpi_cmp_mpi( P, N ) == -1 )
 808eb8e:	4631      	mov	r1, r6
 808eb90:	4638      	mov	r0, r7
 808eb92:	f7fc fc92 	bl	808b4ba <mbedtls_mpi_cmp_mpi>
                break;

            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );

            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 808eb96:	3001      	adds	r0, #1
 808eb98:	d111      	bne.n	808ebbe <mbedtls_rsa_deduce_primes+0x1ae>
                /*
                 * Have found a nontrivial divisor P of N.
                 * Set Q := N / P.
                 */

                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
 808eb9a:	4621      	mov	r1, r4
 808eb9c:	463b      	mov	r3, r7
 808eb9e:	4632      	mov	r2, r6
 808eba0:	4648      	mov	r0, r9
 808eba2:	f7fc fe6a 	bl	808b87a <mbedtls_mpi_div_mpi>
 808eba6:	4604      	mov	r4, r0

    ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;

cleanup:

    mbedtls_mpi_free( &K );
 808eba8:	a805      	add	r0, sp, #20
 808ebaa:	f7fc fa28 	bl	808affe <mbedtls_mpi_free>
    mbedtls_mpi_free( &T );
 808ebae:	a802      	add	r0, sp, #8
 808ebb0:	f7fc fa25 	bl	808affe <mbedtls_mpi_free>
    return( ret );
 808ebb4:	4620      	mov	r0, r4
 808ebb6:	e021      	b.n	808ebfc <mbedtls_rsa_deduce_primes+0x1ec>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
    {
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 808ebb8:	f06f 0003 	mvn.w	r0, #3
 808ebbc:	e01e      	b.n	808ebfc <mbedtls_rsa_deduce_primes+0x1ec>

                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
                goto cleanup;
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 808ebbe:	a905      	add	r1, sp, #20
 808ebc0:	2201      	movs	r2, #1
 808ebc2:	4608      	mov	r0, r1
 808ebc4:	f7fc fdc7 	bl	808b756 <mbedtls_mpi_sub_int>
 808ebc8:	4604      	mov	r4, r0
 808ebca:	2800      	cmp	r0, #0
 808ebcc:	d1ec      	bne.n	808eba8 <mbedtls_rsa_deduce_primes+0x198>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &K ) );
 808ebce:	aa05      	add	r2, sp, #20
 808ebd0:	4611      	mov	r1, r2
 808ebd2:	4610      	mov	r0, r2
 808ebd4:	f7fc fdd5 	bl	808b782 <mbedtls_mpi_mul_mpi>
 808ebd8:	4604      	mov	r4, r0
 808ebda:	2800      	cmp	r0, #0
 808ebdc:	d1e4      	bne.n	808eba8 <mbedtls_rsa_deduce_primes+0x198>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, N ) );
 808ebde:	a905      	add	r1, sp, #20
 808ebe0:	4632      	mov	r2, r6
 808ebe2:	4608      	mov	r0, r1
 808ebe4:	f7fd f809 	bl	808bbfa <mbedtls_mpi_mod_mpi>
 808ebe8:	4604      	mov	r4, r0
 808ebea:	2800      	cmp	r0, #0
 808ebec:	d1dc      	bne.n	808eba8 <mbedtls_rsa_deduce_primes+0x198>
         * and check whether they have nontrivial GCD with N. */
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
                             Q /* temporarily use Q for storing Montgomery
                                * multiplication helper values */ ) );

        for( iter = 1; iter <= order; ++iter )
 808ebee:	f108 0801 	add.w	r8, r8, #1
 808ebf2:	fa1f f888 	uxth.w	r8, r8
 808ebf6:	45c2      	cmp	sl, r8
 808ebf8:	d2a9      	bcs.n	808eb4e <mbedtls_rsa_deduce_primes+0x13e>
 808ebfa:	e7ad      	b.n	808eb58 <mbedtls_rsa_deduce_primes+0x148>
cleanup:

    mbedtls_mpi_free( &K );
    mbedtls_mpi_free( &T );
    return( ret );
}
 808ebfc:	b016      	add	sp, #88	; 0x58
 808ebfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808ec02:	bf00      	nop
 808ec04:	080947bf 	.word	0x080947bf

0808ec08 <mbedtls_rsa_deduce_private_exponent>:
 */
int mbedtls_rsa_deduce_private_exponent( mbedtls_mpi const *P,
                                         mbedtls_mpi const *Q,
                                         mbedtls_mpi const *E,
                                         mbedtls_mpi *D )
{
 808ec08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808ec0c:	4604      	mov	r4, r0
 808ec0e:	b086      	sub	sp, #24
 808ec10:	460e      	mov	r6, r1
 808ec12:	4617      	mov	r7, r2
    int ret = 0;
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
 808ec14:	461d      	mov	r5, r3
 808ec16:	b18b      	cbz	r3, 808ec3c <mbedtls_rsa_deduce_private_exponent+0x34>
 808ec18:	2100      	movs	r1, #0
 808ec1a:	4618      	mov	r0, r3
 808ec1c:	f7fc fc92 	bl	808b544 <mbedtls_mpi_cmp_int>
 808ec20:	4680      	mov	r8, r0
 808ec22:	b958      	cbnz	r0, 808ec3c <mbedtls_rsa_deduce_private_exponent+0x34>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 808ec24:	2101      	movs	r1, #1
 808ec26:	4620      	mov	r0, r4
 808ec28:	f7fc fc8c 	bl	808b544 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 808ec2c:	2800      	cmp	r0, #0
 808ec2e:	dd05      	ble.n	808ec3c <mbedtls_rsa_deduce_private_exponent+0x34>
 808ec30:	2101      	movs	r1, #1
 808ec32:	4630      	mov	r0, r6
 808ec34:	f7fc fc86 	bl	808b544 <mbedtls_mpi_cmp_int>
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 808ec38:	2800      	cmp	r0, #0
 808ec3a:	dc02      	bgt.n	808ec42 <mbedtls_rsa_deduce_private_exponent+0x3a>
{
    int ret = 0;
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 808ec3c:	f06f 0003 	mvn.w	r0, #3
 808ec40:	e03c      	b.n	808ecbc <mbedtls_rsa_deduce_private_exponent+0xb4>

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
        mbedtls_mpi_cmp_int( E, 0 ) == 0 )
 808ec42:	4641      	mov	r1, r8
 808ec44:	4638      	mov	r0, r7
 808ec46:	f7fc fc7d 	bl	808b544 <mbedtls_mpi_cmp_int>

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 808ec4a:	2800      	cmp	r0, #0
 808ec4c:	d0f6      	beq.n	808ec3c <mbedtls_rsa_deduce_private_exponent+0x34>
        mbedtls_mpi_cmp_int( E, 0 ) == 0 )
    {
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    }

    mbedtls_mpi_init( &K );
 808ec4e:	4668      	mov	r0, sp
 808ec50:	f7fc f9ce 	bl	808aff0 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 808ec54:	a803      	add	r0, sp, #12
 808ec56:	f7fc f9cb 	bl	808aff0 <mbedtls_mpi_init>

    /* Temporarily put K := P-1 and L := Q-1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 808ec5a:	4621      	mov	r1, r4
 808ec5c:	2201      	movs	r2, #1
 808ec5e:	4668      	mov	r0, sp
 808ec60:	f7fc fd79 	bl	808b756 <mbedtls_mpi_sub_int>
 808ec64:	4604      	mov	r4, r0
 808ec66:	bb10      	cbnz	r0, 808ecae <mbedtls_rsa_deduce_private_exponent+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 808ec68:	2201      	movs	r2, #1
 808ec6a:	4631      	mov	r1, r6
 808ec6c:	a803      	add	r0, sp, #12
 808ec6e:	f7fc fd72 	bl	808b756 <mbedtls_mpi_sub_int>
 808ec72:	4604      	mov	r4, r0
 808ec74:	b9d8      	cbnz	r0, 808ecae <mbedtls_rsa_deduce_private_exponent+0xa6>

    /* Temporarily put D := gcd(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( D, &K, &L ) );
 808ec76:	aa03      	add	r2, sp, #12
 808ec78:	4669      	mov	r1, sp
 808ec7a:	4628      	mov	r0, r5
 808ec7c:	f7fd fa0e 	bl	808c09c <mbedtls_mpi_gcd>
 808ec80:	4604      	mov	r4, r0
 808ec82:	b9a0      	cbnz	r0, 808ecae <mbedtls_rsa_deduce_private_exponent+0xa6>

    /* K := LCM(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &L ) );
 808ec84:	aa03      	add	r2, sp, #12
 808ec86:	4669      	mov	r1, sp
 808ec88:	4668      	mov	r0, sp
 808ec8a:	f7fc fd7a 	bl	808b782 <mbedtls_mpi_mul_mpi>
 808ec8e:	4604      	mov	r4, r0
 808ec90:	b968      	cbnz	r0, 808ecae <mbedtls_rsa_deduce_private_exponent+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &K, NULL, &K, D ) );
 808ec92:	4601      	mov	r1, r0
 808ec94:	462b      	mov	r3, r5
 808ec96:	466a      	mov	r2, sp
 808ec98:	4668      	mov	r0, sp
 808ec9a:	f7fc fdee 	bl	808b87a <mbedtls_mpi_div_mpi>
 808ec9e:	4604      	mov	r4, r0
 808eca0:	b928      	cbnz	r0, 808ecae <mbedtls_rsa_deduce_private_exponent+0xa6>

    /* Compute modular inverse of E in LCM(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( D, E, &K ) );
 808eca2:	466a      	mov	r2, sp
 808eca4:	4639      	mov	r1, r7
 808eca6:	4628      	mov	r0, r5
 808eca8:	f7fd faa0 	bl	808c1ec <mbedtls_mpi_inv_mod>
 808ecac:	4604      	mov	r4, r0

cleanup:

    mbedtls_mpi_free( &K );
 808ecae:	4668      	mov	r0, sp
 808ecb0:	f7fc f9a5 	bl	808affe <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 808ecb4:	a803      	add	r0, sp, #12
 808ecb6:	f7fc f9a2 	bl	808affe <mbedtls_mpi_free>

    return( ret );
 808ecba:	4620      	mov	r0, r4
}
 808ecbc:	b006      	add	sp, #24
 808ecbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0808ecc4 <mbedtls_rsa_validate_crt>:
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 808ecc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808ecc8:	4699      	mov	r9, r3
 808ecca:	b087      	sub	sp, #28
 808eccc:	4604      	mov	r4, r0
    int ret = 0;

    mbedtls_mpi K, L;
    mbedtls_mpi_init( &K );
 808ecce:	4668      	mov	r0, sp
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 808ecd0:	460d      	mov	r5, r1
 808ecd2:	4690      	mov	r8, r2
 808ecd4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 808ecd6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    int ret = 0;

    mbedtls_mpi K, L;
    mbedtls_mpi_init( &K );
 808ecd8:	f7fc f98a 	bl	808aff0 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 808ecdc:	a803      	add	r0, sp, #12
 808ecde:	f7fc f987 	bl	808aff0 <mbedtls_mpi_init>

    /* Check that DP - D == 0 mod P - 1 */
    if( DP != NULL )
 808ece2:	f1b9 0f00 	cmp.w	r9, #0
 808ece6:	d101      	bne.n	808ecec <mbedtls_rsa_validate_crt+0x28>
            goto cleanup;
        }
    }

    /* Check that DQ - D == 0 mod Q - 1 */
    if( DQ != NULL )
 808ece8:	b9f7      	cbnz	r7, 808ed28 <mbedtls_rsa_validate_crt+0x64>
 808ecea:	e035      	b.n	808ed58 <mbedtls_rsa_validate_crt+0x94>
    mbedtls_mpi_init( &L );

    /* Check that DP - D == 0 mod P - 1 */
    if( DP != NULL )
    {
        if( P == NULL )
 808ecec:	2c00      	cmp	r4, #0
 808ecee:	d058      	beq.n	808eda2 <mbedtls_rsa_validate_crt+0xde>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 808ecf0:	2201      	movs	r2, #1
 808ecf2:	4621      	mov	r1, r4
 808ecf4:	4668      	mov	r0, sp
 808ecf6:	f7fc fd2e 	bl	808b756 <mbedtls_mpi_sub_int>
 808ecfa:	2800      	cmp	r0, #0
 808ecfc:	d148      	bne.n	808ed90 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DP, D ) );
 808ecfe:	4642      	mov	r2, r8
 808ed00:	4649      	mov	r1, r9
 808ed02:	a803      	add	r0, sp, #12
 808ed04:	f7fc fcef 	bl	808b6e6 <mbedtls_mpi_sub_mpi>
 808ed08:	2800      	cmp	r0, #0
 808ed0a:	d141      	bne.n	808ed90 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 808ed0c:	a903      	add	r1, sp, #12
 808ed0e:	466a      	mov	r2, sp
 808ed10:	4608      	mov	r0, r1
 808ed12:	f7fc ff72 	bl	808bbfa <mbedtls_mpi_mod_mpi>
 808ed16:	2800      	cmp	r0, #0
 808ed18:	d13a      	bne.n	808ed90 <mbedtls_rsa_validate_crt+0xcc>

        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 808ed1a:	4601      	mov	r1, r0
 808ed1c:	a803      	add	r0, sp, #12
 808ed1e:	f7fc fc11 	bl	808b544 <mbedtls_mpi_cmp_int>
 808ed22:	2800      	cmp	r0, #0
 808ed24:	d13f      	bne.n	808eda6 <mbedtls_rsa_validate_crt+0xe2>
 808ed26:	e7df      	b.n	808ece8 <mbedtls_rsa_validate_crt+0x24>
    }

    /* Check that DQ - D == 0 mod Q - 1 */
    if( DQ != NULL )
    {
        if( Q == NULL )
 808ed28:	b3dd      	cbz	r5, 808eda2 <mbedtls_rsa_validate_crt+0xde>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1 ) );
 808ed2a:	2201      	movs	r2, #1
 808ed2c:	4629      	mov	r1, r5
 808ed2e:	4668      	mov	r0, sp
 808ed30:	f7fc fd11 	bl	808b756 <mbedtls_mpi_sub_int>
 808ed34:	bb60      	cbnz	r0, 808ed90 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DQ, D ) );
 808ed36:	4642      	mov	r2, r8
 808ed38:	4639      	mov	r1, r7
 808ed3a:	a803      	add	r0, sp, #12
 808ed3c:	f7fc fcd3 	bl	808b6e6 <mbedtls_mpi_sub_mpi>
 808ed40:	bb30      	cbnz	r0, 808ed90 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 808ed42:	a903      	add	r1, sp, #12
 808ed44:	466a      	mov	r2, sp
 808ed46:	4608      	mov	r0, r1
 808ed48:	f7fc ff57 	bl	808bbfa <mbedtls_mpi_mod_mpi>
 808ed4c:	bb00      	cbnz	r0, 808ed90 <mbedtls_rsa_validate_crt+0xcc>

        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 808ed4e:	4601      	mov	r1, r0
 808ed50:	a803      	add	r0, sp, #12
 808ed52:	f7fc fbf7 	bl	808b544 <mbedtls_mpi_cmp_int>
 808ed56:	bb30      	cbnz	r0, 808eda6 <mbedtls_rsa_validate_crt+0xe2>
            goto cleanup;
        }
    }

    /* Check that QP * Q - 1 == 0 mod P */
    if( QP != NULL )
 808ed58:	b1c6      	cbz	r6, 808ed8c <mbedtls_rsa_validate_crt+0xc8>
    {
        if( P == NULL || Q == NULL )
 808ed5a:	b314      	cbz	r4, 808eda2 <mbedtls_rsa_validate_crt+0xde>
 808ed5c:	b30d      	cbz	r5, 808eda2 <mbedtls_rsa_validate_crt+0xde>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, QP, Q ) );
 808ed5e:	462a      	mov	r2, r5
 808ed60:	4631      	mov	r1, r6
 808ed62:	4668      	mov	r0, sp
 808ed64:	f7fc fd0d 	bl	808b782 <mbedtls_mpi_mul_mpi>
 808ed68:	b990      	cbnz	r0, 808ed90 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 808ed6a:	2201      	movs	r2, #1
 808ed6c:	4669      	mov	r1, sp
 808ed6e:	4668      	mov	r0, sp
 808ed70:	f7fc fcf1 	bl	808b756 <mbedtls_mpi_sub_int>
 808ed74:	b960      	cbnz	r0, 808ed90 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, P ) );
 808ed76:	4622      	mov	r2, r4
 808ed78:	4669      	mov	r1, sp
 808ed7a:	4668      	mov	r0, sp
 808ed7c:	f7fc ff3d 	bl	808bbfa <mbedtls_mpi_mod_mpi>
 808ed80:	b930      	cbnz	r0, 808ed90 <mbedtls_rsa_validate_crt+0xcc>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 808ed82:	4601      	mov	r1, r0
 808ed84:	4668      	mov	r0, sp
 808ed86:	f7fc fbdd 	bl	808b544 <mbedtls_mpi_cmp_int>
 808ed8a:	b960      	cbnz	r0, 808eda6 <mbedtls_rsa_validate_crt+0xe2>
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 808ed8c:	2400      	movs	r4, #0
 808ed8e:	e00b      	b.n	808eda8 <mbedtls_rsa_validate_crt+0xe4>
    }

cleanup:

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 &&
 808ed90:	f510 4f84 	cmn.w	r0, #16896	; 0x4200
 808ed94:	d007      	beq.n	808eda6 <mbedtls_rsa_validate_crt+0xe2>
        ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED &&
 808ed96:	f510 4f81 	cmn.w	r0, #16512	; 0x4080
 808ed9a:	d002      	beq.n	808eda2 <mbedtls_rsa_validate_crt+0xde>
        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 808ed9c:	f5a0 4484 	sub.w	r4, r0, #16896	; 0x4200
 808eda0:	e002      	b.n	808eda8 <mbedtls_rsa_validate_crt+0xe4>
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 808eda2:	4c06      	ldr	r4, [pc, #24]	; (808edbc <mbedtls_rsa_validate_crt+0xf8>)
 808eda4:	e000      	b.n	808eda8 <mbedtls_rsa_validate_crt+0xe4>
 808eda6:	4c06      	ldr	r4, [pc, #24]	; (808edc0 <mbedtls_rsa_validate_crt+0xfc>)
        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
    }

    mbedtls_mpi_free( &K );
 808eda8:	4668      	mov	r0, sp
 808edaa:	f7fc f928 	bl	808affe <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 808edae:	a803      	add	r0, sp, #12
 808edb0:	f7fc f925 	bl	808affe <mbedtls_mpi_free>

    return( ret );
}
 808edb4:	4620      	mov	r0, r4
 808edb6:	b007      	add	sp, #28
 808edb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808edbc:	ffffbf80 	.word	0xffffbf80
 808edc0:	ffffbe00 	.word	0xffffbe00

0808edc4 <mbedtls_rsa_validate_params>:
int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,
                                 const mbedtls_mpi *E,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
 808edc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808edc8:	4688      	mov	r8, r1
 808edca:	b087      	sub	sp, #28
 808edcc:	4605      	mov	r5, r0
    int ret = 0;
    mbedtls_mpi K, L;

    mbedtls_mpi_init( &K );
 808edce:	4668      	mov	r0, sp
int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,
                                 const mbedtls_mpi *E,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
 808edd0:	4691      	mov	r9, r2
 808edd2:	461e      	mov	r6, r3
 808edd4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    int ret = 0;
    mbedtls_mpi K, L;

    mbedtls_mpi_init( &K );
 808edd6:	f7fc f90b 	bl	808aff0 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 808edda:	a803      	add	r0, sp, #12
 808eddc:	f7fc f908 	bl	808aff0 <mbedtls_mpi_init>

    /*
     * Step 2: Check that 1 < N = P * Q
     */

    if( P != NULL && Q != NULL && N != NULL )
 808ede0:	f1b8 0f00 	cmp.w	r8, #0
 808ede4:	d018      	beq.n	808ee18 <mbedtls_rsa_validate_params+0x54>
 808ede6:	f1b9 0f00 	cmp.w	r9, #0
 808edea:	d015      	beq.n	808ee18 <mbedtls_rsa_validate_params+0x54>
 808edec:	b90d      	cbnz	r5, 808edf2 <mbedtls_rsa_validate_params+0x2e>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 808edee:	b9de      	cbnz	r6, 808ee28 <mbedtls_rsa_validate_params+0x64>
 808edf0:	e018      	b.n	808ee24 <mbedtls_rsa_validate_params+0x60>
     * Step 2: Check that 1 < N = P * Q
     */

    if( P != NULL && Q != NULL && N != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
 808edf2:	464a      	mov	r2, r9
 808edf4:	4641      	mov	r1, r8
 808edf6:	4668      	mov	r0, sp
 808edf8:	f7fc fcc3 	bl	808b782 <mbedtls_mpi_mul_mpi>
 808edfc:	4604      	mov	r4, r0
 808edfe:	bb68      	cbnz	r0, 808ee5c <mbedtls_rsa_validate_params+0x98>
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 808ee00:	2101      	movs	r1, #1
 808ee02:	4628      	mov	r0, r5
 808ee04:	f7fc fb9e 	bl	808b544 <mbedtls_mpi_cmp_int>
 808ee08:	2800      	cmp	r0, #0
 808ee0a:	dd26      	ble.n	808ee5a <mbedtls_rsa_validate_params+0x96>
            mbedtls_mpi_cmp_mpi( &K, N ) != 0 )
 808ee0c:	4629      	mov	r1, r5
 808ee0e:	4668      	mov	r0, sp
 808ee10:	f7fc fb53 	bl	808b4ba <mbedtls_mpi_cmp_mpi>
     */

    if( P != NULL && Q != NULL && N != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 808ee14:	bb08      	cbnz	r0, 808ee5a <mbedtls_rsa_validate_params+0x96>
 808ee16:	e016      	b.n	808ee46 <mbedtls_rsa_validate_params+0x82>

    /*
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
 808ee18:	b125      	cbz	r5, 808ee24 <mbedtls_rsa_validate_params+0x60>
 808ee1a:	b9b6      	cbnz	r6, 808ee4a <mbedtls_rsa_validate_params+0x86>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 808ee1c:	f1b8 0f00 	cmp.w	r8, #0
 808ee20:	f040 808a 	bne.w	808ef38 <mbedtls_rsa_validate_params+0x174>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 808ee24:	2400      	movs	r4, #0
 808ee26:	e019      	b.n	808ee5c <mbedtls_rsa_validate_params+0x98>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 808ee28:	2f00      	cmp	r7, #0
 808ee2a:	d0fb      	beq.n	808ee24 <mbedtls_rsa_validate_params+0x60>
    {
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 808ee2c:	2101      	movs	r1, #1
 808ee2e:	4640      	mov	r0, r8
 808ee30:	f7fc fb88 	bl	808b544 <mbedtls_mpi_cmp_int>
 808ee34:	2800      	cmp	r0, #0
 808ee36:	dd10      	ble.n	808ee5a <mbedtls_rsa_validate_params+0x96>
            mbedtls_mpi_cmp_int( Q, 1 ) <= 0 )
 808ee38:	2101      	movs	r1, #1
 808ee3a:	4648      	mov	r0, r9
 808ee3c:	f7fc fb82 	bl	808b544 <mbedtls_mpi_cmp_int>
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
    {
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 808ee40:	2800      	cmp	r0, #0
 808ee42:	dc19      	bgt.n	808ee78 <mbedtls_rsa_validate_params+0xb4>
 808ee44:	e009      	b.n	808ee5a <mbedtls_rsa_validate_params+0x96>

    /*
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
 808ee46:	2e00      	cmp	r6, #0
 808ee48:	d0ec      	beq.n	808ee24 <mbedtls_rsa_validate_params+0x60>
 808ee4a:	2f00      	cmp	r7, #0
 808ee4c:	d0e6      	beq.n	808ee1c <mbedtls_rsa_validate_params+0x58>
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 808ee4e:	2101      	movs	r1, #1
 808ee50:	4630      	mov	r0, r6
 808ee52:	f7fc fb77 	bl	808b544 <mbedtls_mpi_cmp_int>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 808ee56:	2800      	cmp	r0, #0
 808ee58:	dc5b      	bgt.n	808ef12 <mbedtls_rsa_validate_params+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 808ee5a:	4c3c      	ldr	r4, [pc, #240]	; (808ef4c <mbedtls_rsa_validate_params+0x188>)
        }
    }

cleanup:

    mbedtls_mpi_free( &K );
 808ee5c:	4668      	mov	r0, sp
 808ee5e:	f7fc f8ce 	bl	808affe <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 808ee62:	a803      	add	r0, sp, #12
 808ee64:	f7fc f8cb 	bl	808affe <mbedtls_mpi_free>

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 && ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED )
 808ee68:	2c00      	cmp	r4, #0
 808ee6a:	d06a      	beq.n	808ef42 <mbedtls_rsa_validate_params+0x17e>
 808ee6c:	f514 4f84 	cmn.w	r4, #16896	; 0x4200
 808ee70:	d067      	beq.n	808ef42 <mbedtls_rsa_validate_params+0x17e>
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 808ee72:	f5a4 4484 	sub.w	r4, r4, #16896	; 0x4200
    }

    return( ret );
 808ee76:	e064      	b.n	808ef42 <mbedtls_rsa_validate_params+0x17e>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
            goto cleanup;
        }

        /* Compute DE-1 mod P-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 808ee78:	463a      	mov	r2, r7
 808ee7a:	4631      	mov	r1, r6
 808ee7c:	4668      	mov	r0, sp
 808ee7e:	f7fc fc80 	bl	808b782 <mbedtls_mpi_mul_mpi>
 808ee82:	4604      	mov	r4, r0
 808ee84:	2800      	cmp	r0, #0
 808ee86:	d1e9      	bne.n	808ee5c <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 808ee88:	2201      	movs	r2, #1
 808ee8a:	4669      	mov	r1, sp
 808ee8c:	4668      	mov	r0, sp
 808ee8e:	f7fc fc62 	bl	808b756 <mbedtls_mpi_sub_int>
 808ee92:	4604      	mov	r4, r0
 808ee94:	2800      	cmp	r0, #0
 808ee96:	d1e1      	bne.n	808ee5c <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, P, 1 ) );
 808ee98:	2201      	movs	r2, #1
 808ee9a:	4641      	mov	r1, r8
 808ee9c:	a803      	add	r0, sp, #12
 808ee9e:	f7fc fc5a 	bl	808b756 <mbedtls_mpi_sub_int>
 808eea2:	4604      	mov	r4, r0
 808eea4:	2800      	cmp	r0, #0
 808eea6:	d1d9      	bne.n	808ee5c <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 808eea8:	aa03      	add	r2, sp, #12
 808eeaa:	4669      	mov	r1, sp
 808eeac:	4668      	mov	r0, sp
 808eeae:	f7fc fea4 	bl	808bbfa <mbedtls_mpi_mod_mpi>
 808eeb2:	4604      	mov	r4, r0
 808eeb4:	2800      	cmp	r0, #0
 808eeb6:	d1d1      	bne.n	808ee5c <mbedtls_rsa_validate_params+0x98>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 808eeb8:	4601      	mov	r1, r0
 808eeba:	4668      	mov	r0, sp
 808eebc:	f7fc fb42 	bl	808b544 <mbedtls_mpi_cmp_int>
 808eec0:	2800      	cmp	r0, #0
 808eec2:	d1ca      	bne.n	808ee5a <mbedtls_rsa_validate_params+0x96>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
            goto cleanup;
        }

        /* Compute DE-1 mod Q-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 808eec4:	463a      	mov	r2, r7
 808eec6:	4631      	mov	r1, r6
 808eec8:	4668      	mov	r0, sp
 808eeca:	f7fc fc5a 	bl	808b782 <mbedtls_mpi_mul_mpi>
 808eece:	4604      	mov	r4, r0
 808eed0:	2800      	cmp	r0, #0
 808eed2:	d1c3      	bne.n	808ee5c <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 808eed4:	2201      	movs	r2, #1
 808eed6:	4669      	mov	r1, sp
 808eed8:	4668      	mov	r0, sp
 808eeda:	f7fc fc3c 	bl	808b756 <mbedtls_mpi_sub_int>
 808eede:	4604      	mov	r4, r0
 808eee0:	2800      	cmp	r0, #0
 808eee2:	d1bb      	bne.n	808ee5c <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 808eee4:	2201      	movs	r2, #1
 808eee6:	4649      	mov	r1, r9
 808eee8:	a803      	add	r0, sp, #12
 808eeea:	f7fc fc34 	bl	808b756 <mbedtls_mpi_sub_int>
 808eeee:	4604      	mov	r4, r0
 808eef0:	2800      	cmp	r0, #0
 808eef2:	d1b3      	bne.n	808ee5c <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 808eef4:	aa03      	add	r2, sp, #12
 808eef6:	4669      	mov	r1, sp
 808eef8:	4668      	mov	r0, sp
 808eefa:	f7fc fe7e 	bl	808bbfa <mbedtls_mpi_mod_mpi>
 808eefe:	4604      	mov	r4, r0
 808ef00:	2800      	cmp	r0, #0
 808ef02:	d1ab      	bne.n	808ee5c <mbedtls_rsa_validate_params+0x98>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 808ef04:	4601      	mov	r1, r0
 808ef06:	4668      	mov	r0, sp
 808ef08:	f7fc fb1c 	bl	808b544 <mbedtls_mpi_cmp_int>
 808ef0c:	2800      	cmp	r0, #0
 808ef0e:	d089      	beq.n	808ee24 <mbedtls_rsa_validate_params+0x60>
 808ef10:	e7a3      	b.n	808ee5a <mbedtls_rsa_validate_params+0x96>
     */

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 808ef12:	2101      	movs	r1, #1
 808ef14:	4638      	mov	r0, r7
 808ef16:	f7fc fb15 	bl	808b544 <mbedtls_mpi_cmp_int>
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 808ef1a:	2800      	cmp	r0, #0
 808ef1c:	dd9d      	ble.n	808ee5a <mbedtls_rsa_validate_params+0x96>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 808ef1e:	4629      	mov	r1, r5
 808ef20:	4630      	mov	r0, r6
 808ef22:	f7fc faca 	bl	808b4ba <mbedtls_mpi_cmp_mpi>
     */

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 808ef26:	2800      	cmp	r0, #0
 808ef28:	da97      	bge.n	808ee5a <mbedtls_rsa_validate_params+0x96>
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
             mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 808ef2a:	4629      	mov	r1, r5
 808ef2c:	4638      	mov	r0, r7
 808ef2e:	f7fc fac4 	bl	808b4ba <mbedtls_mpi_cmp_mpi>

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 808ef32:	2800      	cmp	r0, #0
 808ef34:	da91      	bge.n	808ee5a <mbedtls_rsa_validate_params+0x96>
 808ef36:	e771      	b.n	808ee1c <mbedtls_rsa_validate_params+0x58>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 808ef38:	f1b9 0f00 	cmp.w	r9, #0
 808ef3c:	f47f af57 	bne.w	808edee <mbedtls_rsa_validate_params+0x2a>
 808ef40:	e770      	b.n	808ee24 <mbedtls_rsa_validate_params+0x60>
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
    }

    return( ret );
}
 808ef42:	4620      	mov	r0, r4
 808ef44:	b007      	add	sp, #28
 808ef46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808ef4a:	bf00      	nop
 808ef4c:	ffffbe00 	.word	0xffffbe00

0808ef50 <mbedtls_rsa_deduce_crt>:

int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
                            const mbedtls_mpi *D, mbedtls_mpi *DP,
                            mbedtls_mpi *DQ, mbedtls_mpi *QP )
{
 808ef50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 808ef54:	469a      	mov	sl, r3
 808ef56:	4607      	mov	r7, r0
    int ret = 0;
    mbedtls_mpi K;
    mbedtls_mpi_init( &K );
 808ef58:	a801      	add	r0, sp, #4
}

int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
                            const mbedtls_mpi *D, mbedtls_mpi *DP,
                            mbedtls_mpi *DQ, mbedtls_mpi *QP )
{
 808ef5a:	460e      	mov	r6, r1
 808ef5c:	4691      	mov	r9, r2
 808ef5e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 808ef62:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    int ret = 0;
    mbedtls_mpi K;
    mbedtls_mpi_init( &K );
 808ef64:	f7fc f844 	bl	808aff0 <mbedtls_mpi_init>

    /* DP = D mod P-1 */
    if( DP != NULL )
 808ef68:	f1ba 0f00 	cmp.w	sl, #0
 808ef6c:	d103      	bne.n	808ef76 <mbedtls_rsa_deduce_crt+0x26>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
    }

    /* DQ = D mod Q-1 */
    if( DQ != NULL )
 808ef6e:	f1b8 0f00 	cmp.w	r8, #0
 808ef72:	d110      	bne.n	808ef96 <mbedtls_rsa_deduce_crt+0x46>
 808ef74:	e01d      	b.n	808efb2 <mbedtls_rsa_deduce_crt+0x62>
    mbedtls_mpi_init( &K );

    /* DP = D mod P-1 */
    if( DP != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
 808ef76:	2201      	movs	r2, #1
 808ef78:	4639      	mov	r1, r7
 808ef7a:	a801      	add	r0, sp, #4
 808ef7c:	f7fc fbeb 	bl	808b756 <mbedtls_mpi_sub_int>
 808ef80:	4604      	mov	r4, r0
 808ef82:	b9f8      	cbnz	r0, 808efc4 <mbedtls_rsa_deduce_crt+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
 808ef84:	aa01      	add	r2, sp, #4
 808ef86:	4649      	mov	r1, r9
 808ef88:	4650      	mov	r0, sl
 808ef8a:	f7fc fe36 	bl	808bbfa <mbedtls_mpi_mod_mpi>
 808ef8e:	4604      	mov	r4, r0
 808ef90:	2800      	cmp	r0, #0
 808ef92:	d0ec      	beq.n	808ef6e <mbedtls_rsa_deduce_crt+0x1e>
 808ef94:	e016      	b.n	808efc4 <mbedtls_rsa_deduce_crt+0x74>
    }

    /* DQ = D mod Q-1 */
    if( DQ != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );
 808ef96:	2201      	movs	r2, #1
 808ef98:	4631      	mov	r1, r6
 808ef9a:	a801      	add	r0, sp, #4
 808ef9c:	f7fc fbdb 	bl	808b756 <mbedtls_mpi_sub_int>
 808efa0:	4604      	mov	r4, r0
 808efa2:	b978      	cbnz	r0, 808efc4 <mbedtls_rsa_deduce_crt+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );
 808efa4:	aa01      	add	r2, sp, #4
 808efa6:	4649      	mov	r1, r9
 808efa8:	4640      	mov	r0, r8
 808efaa:	f7fc fe26 	bl	808bbfa <mbedtls_mpi_mod_mpi>
 808efae:	4604      	mov	r4, r0
 808efb0:	b940      	cbnz	r0, 808efc4 <mbedtls_rsa_deduce_crt+0x74>
    }

    /* QP = Q^{-1} mod P */
    if( QP != NULL )
 808efb2:	b90d      	cbnz	r5, 808efb8 <mbedtls_rsa_deduce_crt+0x68>
 808efb4:	462c      	mov	r4, r5
 808efb6:	e005      	b.n	808efc4 <mbedtls_rsa_deduce_crt+0x74>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( QP, Q, P ) );
 808efb8:	463a      	mov	r2, r7
 808efba:	4631      	mov	r1, r6
 808efbc:	4628      	mov	r0, r5
 808efbe:	f7fd f915 	bl	808c1ec <mbedtls_mpi_inv_mod>
 808efc2:	4604      	mov	r4, r0
    }

cleanup:
    mbedtls_mpi_free( &K );
 808efc4:	a801      	add	r0, sp, #4
 808efc6:	f7fc f81a 	bl	808affe <mbedtls_mpi_free>

    return( ret );
}
 808efca:	4620      	mov	r0, r4
 808efcc:	b004      	add	sp, #16
 808efce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808efd2 <mbedtls_ssl_own_key>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
static inline mbedtls_pk_context *mbedtls_ssl_own_key( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 808efd2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 808efd4:	b10b      	cbz	r3, 808efda <mbedtls_ssl_own_key+0x8>
 808efd6:	685b      	ldr	r3, [r3, #4]
 808efd8:	b913      	cbnz	r3, 808efe0 <mbedtls_ssl_own_key+0xe>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
 808efda:	6803      	ldr	r3, [r0, #0]
 808efdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return( key_cert == NULL ? NULL : key_cert->key );
 808efde:	b10b      	cbz	r3, 808efe4 <mbedtls_ssl_own_key+0x12>
 808efe0:	6858      	ldr	r0, [r3, #4]
 808efe2:	4770      	bx	lr
 808efe4:	4618      	mov	r0, r3
}
 808efe6:	4770      	bx	lr

0808efe8 <mbedtls_ssl_handshake_client_step>:

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
 808efe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 808efec:	6843      	ldr	r3, [r0, #4]

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
 808efee:	b095      	sub	sp, #84	; 0x54
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 808eff0:	2b10      	cmp	r3, #16

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
 808eff2:	4604      	mov	r4, r0
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 808eff4:	f000 80c1 	beq.w	808f17a <mbedtls_ssl_handshake_client_step+0x192>
 808eff8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 808effa:	2b00      	cmp	r3, #0
 808effc:	f000 80bd 	beq.w	808f17a <mbedtls_ssl_handshake_client_step+0x192>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "client state: %d", ssl->state ) );

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 808f000:	f7fa fbd6 	bl	80897b0 <mbedtls_ssl_flush_output>
 808f004:	2800      	cmp	r0, #0
 808f006:	f040 8514 	bne.w	808fa32 <mbedtls_ssl_handshake_client_step+0xa4a>
#endif

    /* Change state now, so that it is right in mbedtls_ssl_read_record(), used
     * by DTLS for dropping out-of-sequence ChangeCipherSpec records */
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&
 808f00a:	6863      	ldr	r3, [r4, #4]
 808f00c:	2b0c      	cmp	r3, #12
 808f00e:	d105      	bne.n	808f01c <mbedtls_ssl_handshake_client_step+0x34>
        ssl->handshake->new_session_ticket != 0 )
 808f010:	6b23      	ldr	r3, [r4, #48]	; 0x30
#endif

    /* Change state now, so that it is right in mbedtls_ssl_read_record(), used
     * by DTLS for dropping out-of-sequence ChangeCipherSpec records */
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&
 808f012:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 808f016:	b10b      	cbz	r3, 808f01c <mbedtls_ssl_handshake_client_step+0x34>
        ssl->handshake->new_session_ticket != 0 )
    {
        ssl->state = MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET;
 808f018:	2311      	movs	r3, #17
 808f01a:	6063      	str	r3, [r4, #4]
    }
#endif

    switch( ssl->state )
 808f01c:	6860      	ldr	r0, [r4, #4]
 808f01e:	2811      	cmp	r0, #17
 808f020:	f200 80ab 	bhi.w	808f17a <mbedtls_ssl_handshake_client_step+0x192>
 808f024:	e8df f010 	tbh	[pc, r0, lsl #1]
 808f028:	00140012 	.word	0x00140012
 808f02c:	00dc004b 	.word	0x00dc004b
 808f030:	010500e1 	.word	0x010500e1
 808f034:	012b0117 	.word	0x012b0117
 808f038:	0190012f 	.word	0x0190012f
 808f03c:	020201fe 	.word	0x020201fe
 808f040:	02290225 	.word	0x02290225
 808f044:	022f022d 	.word	0x022f022d
 808f048:	020c00a9 	.word	0x020c00a9
    {
        case MBEDTLS_SSL_HELLO_REQUEST:
            ssl->state = MBEDTLS_SSL_CLIENT_HELLO;
 808f04c:	2301      	movs	r3, #1
 808f04e:	e0ed      	b.n	808f22c <mbedtls_ssl_handshake_client_step+0x244>
    const int *ciphersuites;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );

    if( ssl->conf->f_rng == NULL )
 808f050:	6821      	ldr	r1, [r4, #0]
 808f052:	698b      	ldr	r3, [r1, #24]
 808f054:	2b00      	cmp	r3, #0
 808f056:	f000 821a 	beq.w	808f48e <mbedtls_ssl_handshake_client_step+0x4a6>

#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        ssl->major_ver = ssl->conf->min_major_ver;
 808f05a:	f891 305e 	ldrb.w	r3, [r1, #94]	; 0x5e
 808f05e:	60a3      	str	r3, [r4, #8]
        ssl->minor_ver = ssl->conf->min_minor_ver;
 808f060:	f891 305f 	ldrb.w	r3, [r1, #95]	; 0x5f
 808f064:	60e3      	str	r3, [r4, #12]
    }

    if( ssl->conf->max_major_ver == 0 )
 808f066:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 808f06a:	2800      	cmp	r0, #0
 808f06c:	f000 8085 	beq.w	808f17a <mbedtls_ssl_handshake_client_step+0x192>
     */
    buf = ssl->out_msg;
    p = buf + 4;

    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 808f070:	f891 2060 	ldrb.w	r2, [r1, #96]	; 0x60
     *     1  .   3   handshake length
     *     4  .   5   highest version supported
     *     6  .   9   current UNIX time
     *    10  .  37   random bytes
     */
    buf = ssl->out_msg;
 808f074:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
    p = buf + 4;

    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 808f078:	f3c2 0240 	ubfx	r2, r2, #1, #1
 808f07c:	1d33      	adds	r3, r6, #4
 808f07e:	f891 105d 	ldrb.w	r1, [r1, #93]	; 0x5d
 808f082:	f7fb fdb7 	bl	808abf4 <mbedtls_ssl_write_version>
    *p++ = (unsigned char)( t >>  8 );
    *p++ = (unsigned char)( t       );

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, current time: %lu", t ) );
#else
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
 808f086:	6823      	ldr	r3, [r4, #0]
 * Generate random bytes for ClientHello
 */
static int ssl_generate_random( mbedtls_ssl_context *ssl )
{
    int ret;
    unsigned char *p = ssl->handshake->randbytes;
 808f088:	6b25      	ldr	r5, [r4, #48]	; 0x30
    *p++ = (unsigned char)( t >>  8 );
    *p++ = (unsigned char)( t       );

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, current time: %lu", t ) );
#else
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
 808f08a:	699f      	ldr	r7, [r3, #24]
 808f08c:	2204      	movs	r2, #4
 808f08e:	f505 71ba 	add.w	r1, r5, #372	; 0x174
 808f092:	69d8      	ldr	r0, [r3, #28]
 808f094:	47b8      	blx	r7
 808f096:	2800      	cmp	r0, #0
 808f098:	f040 84cb 	bne.w	808fa32 <mbedtls_ssl_handshake_client_step+0xa4a>
        return( ret );

    p += 4;
#endif /* MBEDTLS_HAVE_TIME */

    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 28 ) ) != 0 )
 808f09c:	6823      	ldr	r3, [r4, #0]
 808f09e:	221c      	movs	r2, #28
 808f0a0:	699f      	ldr	r7, [r3, #24]
 808f0a2:	f505 71bc 	add.w	r1, r5, #376	; 0x178
 808f0a6:	69d8      	ldr	r0, [r3, #28]
 808f0a8:	47b8      	blx	r7
 808f0aa:	2800      	cmp	r0, #0
 808f0ac:	f040 84c1 	bne.w	808fa32 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_generate_random", ret );
        return( ret );
    }

    memcpy( p, ssl->handshake->randbytes, 32 );
 808f0b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808f0b2:	1db1      	adds	r1, r6, #6
 808f0b4:	f503 72ba 	add.w	r2, r3, #372	; 0x174
 808f0b8:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 808f0bc:	e1eb      	b.n	808f496 <mbedtls_ssl_handshake_client_step+0x4ae>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello" ) );

    buf = ssl->in_msg;

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808f0be:	4620      	mov	r0, r4
    int handshake_failure = 0;
    const mbedtls_ssl_ciphersuite_t *suite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello" ) );

    buf = ssl->in_msg;
 808f0c0:	6e65      	ldr	r5, [r4, #100]	; 0x64

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808f0c2:	f7fa ffaf 	bl	808a024 <mbedtls_ssl_read_record>
 808f0c6:	2800      	cmp	r0, #0
 808f0c8:	f040 84b3 	bne.w	808fa32 <mbedtls_ssl_handshake_client_step+0xa4a>
        /* No alert on a read error. */
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 808f0cc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808f0ce:	2b16      	cmp	r3, #22
 808f0d0:	d006      	beq.n	808f0e0 <mbedtls_ssl_handshake_client_step+0xf8>
        }
#endif /* MBEDTLS_SSL_RENEGOTIATION */

        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 808f0d2:	220a      	movs	r2, #10
 808f0d4:	2102      	movs	r1, #2
 808f0d6:	4620      	mov	r0, r4
 808f0d8:	f7fa fd56 	bl	8089b88 <mbedtls_ssl_send_alert_message>
 808f0dc:	f000 bc5b 	b.w	808f996 <mbedtls_ssl_handshake_client_step+0x9ae>
            ssl->handshake->verify_cookie_len = 0;
        }
    }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    if( ssl->in_hslen < 38 + mbedtls_ssl_hs_hdr_len( ssl ) ||
 808f0e0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 808f0e2:	2b29      	cmp	r3, #41	; 0x29
 808f0e4:	d938      	bls.n	808f158 <mbedtls_ssl_handshake_client_step+0x170>
 808f0e6:	782b      	ldrb	r3, [r5, #0]
 808f0e8:	2b02      	cmp	r3, #2
 808f0ea:	d135      	bne.n	808f158 <mbedtls_ssl_handshake_client_step+0x170>
     */
    buf += mbedtls_ssl_hs_hdr_len( ssl );

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
                      ssl->conf->transport, buf + 0 );
 808f0ec:	4621      	mov	r1, r4
 808f0ee:	f851 3b0c 	ldr.w	r3, [r1], #12
     * 37+n . 37+n  compression_method
     *
     * 38+n . 39+n  extensions length (optional)
     * 40+n .  ..   extensions
     */
    buf += mbedtls_ssl_hs_hdr_len( ssl );
 808f0f2:	f105 0804 	add.w	r8, r5, #4

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
                      ssl->conf->transport, buf + 0 );
 808f0f6:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 808f0fa:	f104 0008 	add.w	r0, r4, #8
 808f0fe:	4643      	mov	r3, r8
 808f100:	f3c2 0240 	ubfx	r2, r2, #1, #1
 808f104:	f7fb fd79 	bl	808abfa <mbedtls_ssl_read_version>

    if( ssl->major_ver < ssl->conf->min_major_ver ||
 808f108:	6823      	ldr	r3, [r4, #0]
 808f10a:	68a2      	ldr	r2, [r4, #8]
 808f10c:	f893 105e 	ldrb.w	r1, [r3, #94]	; 0x5e
 808f110:	428a      	cmp	r2, r1
 808f112:	f2c0 830f 	blt.w	808f734 <mbedtls_ssl_handshake_client_step+0x74c>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 808f116:	68e1      	ldr	r1, [r4, #12]

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
                      ssl->conf->transport, buf + 0 );

    if( ssl->major_ver < ssl->conf->min_major_ver ||
 808f118:	f893 005f 	ldrb.w	r0, [r3, #95]	; 0x5f
 808f11c:	4281      	cmp	r1, r0
 808f11e:	f2c0 8309 	blt.w	808f734 <mbedtls_ssl_handshake_client_step+0x74c>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 808f122:	f893 005c 	ldrb.w	r0, [r3, #92]	; 0x5c
 808f126:	4282      	cmp	r2, r0
 808f128:	f300 8304 	bgt.w	808f734 <mbedtls_ssl_handshake_client_step+0x74c>
        ssl->major_ver > ssl->conf->max_major_ver ||
 808f12c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 808f130:	4299      	cmp	r1, r3
 808f132:	f300 82ff 	bgt.w	808f734 <mbedtls_ssl_handshake_client_step+0x74c>
                           ( (uint32_t) buf[2] << 24 ) |
                           ( (uint32_t) buf[3] << 16 ) |
                           ( (uint32_t) buf[4] <<  8 ) |
                           ( (uint32_t) buf[5]       ) ) );

    memcpy( ssl->handshake->randbytes + 32, buf + 2, 32 );
 808f136:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808f138:	1daa      	adds	r2, r5, #6
 808f13a:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 808f13e:	f105 0126 	add.w	r1, r5, #38	; 0x26
 808f142:	f852 0b04 	ldr.w	r0, [r2], #4
 808f146:	428a      	cmp	r2, r1
 808f148:	f843 0b04 	str.w	r0, [r3], #4
 808f14c:	d1f9      	bne.n	808f142 <mbedtls_ssl_handshake_client_step+0x15a>

    n = buf[34];
 808f14e:	f895 6026 	ldrb.w	r6, [r5, #38]	; 0x26

    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, random bytes", buf + 2, 32 );

    if( n > 32 )
 808f152:	2e20      	cmp	r6, #32
 808f154:	f240 82f5 	bls.w	808f742 <mbedtls_ssl_handshake_client_step+0x75a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 808f158:	2232      	movs	r2, #50	; 0x32
 808f15a:	e03a      	b.n	808f1d2 <mbedtls_ssl_handshake_client_step+0x1ea>
    }

    /*
     * Initialize update checksum functions
     */
    ssl->transform_negotiate->ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( i );
 808f15c:	4648      	mov	r0, r9
 808f15e:	f8d4 a040 	ldr.w	sl, [r4, #64]	; 0x40
 808f162:	f7f7 f809 	bl	8086178 <mbedtls_ssl_ciphersuite_from_id>
 808f166:	f8ca 0000 	str.w	r0, [sl]

    if( ssl->transform_negotiate->ciphersuite_info == NULL )
 808f16a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808f16c:	6819      	ldr	r1, [r3, #0]
 808f16e:	b939      	cbnz	r1, 808f180 <mbedtls_ssl_handshake_client_step+0x198>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ciphersuite info for %04x not found", i ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
 808f170:	2250      	movs	r2, #80	; 0x50
 808f172:	2102      	movs	r1, #2
 808f174:	4620      	mov	r0, r4
 808f176:	f7fa fd07 	bl	8089b88 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 808f17a:	48ae      	ldr	r0, [pc, #696]	; (808f434 <mbedtls_ssl_handshake_client_step+0x44c>)
 808f17c:	f000 bc59 	b.w	808fa32 <mbedtls_ssl_handshake_client_step+0xa4a>
    }

    mbedtls_ssl_optimize_checksum( ssl, ssl->transform_negotiate->ciphersuite_info );
 808f180:	4620      	mov	r0, r4
 808f182:	f7fb f81b 	bl	808a1bc <mbedtls_ssl_optimize_checksum>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
 808f186:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 808f18a:	3527      	adds	r5, #39	; 0x27
 808f18c:	f8da 31e4 	ldr.w	r3, [sl, #484]	; 0x1e4
 808f190:	2b00      	cmp	r3, #0
 808f192:	f040 8311 	bne.w	808f7b8 <mbedtls_ssl_handshake_client_step+0x7d0>
        ssl->session_negotiate->ciphersuite != i ||
        ssl->session_negotiate->compression != comp ||
        ssl->session_negotiate->id_len != n ||
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
    {
        ssl->state++;
 808f196:	6863      	ldr	r3, [r4, #4]
        ssl->session_negotiate->start = mbedtls_time( NULL );
#endif
        ssl->session_negotiate->ciphersuite = i;
        ssl->session_negotiate->compression = comp;
        ssl->session_negotiate->id_len = n;
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 808f198:	4629      	mov	r1, r5
        ssl->session_negotiate->ciphersuite != i ||
        ssl->session_negotiate->compression != comp ||
        ssl->session_negotiate->id_len != n ||
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
    {
        ssl->state++;
 808f19a:	3301      	adds	r3, #1
 808f19c:	6063      	str	r3, [r4, #4]
        ssl->handshake->resume = 0;
 808f19e:	2300      	movs	r3, #0
 808f1a0:	f8ca 31e4 	str.w	r3, [sl, #484]	; 0x1e4
#if defined(MBEDTLS_HAVE_TIME)
        ssl->session_negotiate->start = mbedtls_time( NULL );
#endif
        ssl->session_negotiate->ciphersuite = i;
 808f1a4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808f1a6:	f8c2 9000 	str.w	r9, [r2]
        ssl->session_negotiate->compression = comp;
 808f1aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808f1ac:	6053      	str	r3, [r2, #4]
        ssl->session_negotiate->id_len = n;
 808f1ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 808f1b0:	4632      	mov	r2, r6
#if defined(MBEDTLS_HAVE_TIME)
        ssl->session_negotiate->start = mbedtls_time( NULL );
#endif
        ssl->session_negotiate->ciphersuite = i;
        ssl->session_negotiate->compression = comp;
        ssl->session_negotiate->id_len = n;
 808f1b2:	609e      	str	r6, [r3, #8]
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 808f1b4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 808f1b6:	300c      	adds	r0, #12
 808f1b8:	f003 f8c7 	bl	809234a <memcpy>
     * Perform cipher suite validation in same way as in ssl_write_client_hello.
     */
    i = 0;
    while( 1 )
    {
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i] == 0 )
 808f1bc:	6823      	ldr	r3, [r4, #0]
 808f1be:	68e2      	ldr	r2, [r4, #12]
 808f1c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 808f1c4:	3b04      	subs	r3, #4
 808f1c6:	f853 0f04 	ldr.w	r0, [r3, #4]!
 808f1ca:	2800      	cmp	r0, #0
 808f1cc:	f040 831b 	bne.w	808f806 <mbedtls_ssl_handshake_client_step+0x81e>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
 808f1d0:	222f      	movs	r2, #47	; 0x2f
 808f1d2:	2102      	movs	r1, #2
 808f1d4:	4620      	mov	r0, r4
 808f1d6:	f7fa fcd7 	bl	8089b88 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 808f1da:	4897      	ldr	r0, [pc, #604]	; (808f438 <mbedtls_ssl_handshake_client_step+0x450>)
 808f1dc:	f000 bc29 	b.w	808fa32 <mbedtls_ssl_handshake_client_step+0xa4a>
       case MBEDTLS_SSL_SERVER_HELLO:
           ret = ssl_parse_server_hello( ssl );
           break;

       case MBEDTLS_SSL_SERVER_CERTIFICATE:
           ret = mbedtls_ssl_parse_certificate( ssl );
 808f1e0:	4620      	mov	r0, r4
 808f1e2:	f7fb fc01 	bl	808a9e8 <mbedtls_ssl_parse_certificate>
           break;
 808f1e6:	f000 bc24 	b.w	808fa32 <mbedtls_ssl_handshake_client_step+0xa4a>

static int ssl_parse_server_key_exchange( mbedtls_ssl_context *ssl )
{
    int ret;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 808f1ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808f1ec:	681d      	ldr	r5, [r3, #0]
    unsigned char *p = NULL, *end = NULL;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server key exchange" ) );

#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 808f1ee:	7aab      	ldrb	r3, [r5, #10]
 808f1f0:	2b01      	cmp	r3, #1
 808f1f2:	d101      	bne.n	808f1f8 <mbedtls_ssl_handshake_client_step+0x210>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse server key exchange" ) );
        ssl->state++;
 808f1f4:	2305      	movs	r3, #5
 808f1f6:	e386      	b.n	808f906 <mbedtls_ssl_handshake_client_step+0x91e>
    ((void) p);
    ((void) end);
#endif /* MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808f1f8:	4620      	mov	r0, r4
 808f1fa:	f7fa ff13 	bl	808a024 <mbedtls_ssl_read_record>
 808f1fe:	2800      	cmp	r0, #0
 808f200:	f040 8417 	bne.w	808fa32 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 808f204:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808f206:	2b16      	cmp	r3, #22
 808f208:	f47f af63 	bne.w	808f0d2 <mbedtls_ssl_handshake_client_step+0xea>

    /*
     * ServerKeyExchange may be skipped with PSK and RSA-PSK when the server
     * doesn't use a psk_identity_hint
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE )
 808f20c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 808f20e:	781b      	ldrb	r3, [r3, #0]
 808f210:	2b0c      	cmp	r3, #12
 808f212:	f000 813e 	beq.w	808f492 <mbedtls_ssl_handshake_client_step+0x4aa>
    {
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 808f216:	7aab      	ldrb	r3, [r5, #10]
 808f218:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 808f21c:	2b05      	cmp	r3, #5
 808f21e:	f47f af58 	bne.w	808f0d2 <mbedtls_ssl_handshake_client_step+0xea>
            ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK )
        {
            /* Current message is probably either
             * CertificateRequest or ServerHelloDone */
            ssl->keep_current_message = 1;
 808f222:	2301      	movs	r3, #1
 808f224:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        }
    }
#endif /* MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED */

exit:
    ssl->state++;
 808f228:	6863      	ldr	r3, [r4, #4]
 808f22a:	3301      	adds	r3, #1
 808f22c:	6063      	str	r3, [r4, #4]
 808f22e:	f000 bc00 	b.w	808fa32 <mbedtls_ssl_handshake_client_step+0xa4a>
    int ret;
    unsigned char *buf;
    size_t n = 0;
    size_t cert_type_len = 0, dn_len = 0;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 808f232:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808f234:	681b      	ldr	r3, [r3, #0]
 808f236:	7a9b      	ldrb	r3, [r3, #10]
 808f238:	3b01      	subs	r3, #1
 808f23a:	b2db      	uxtb	r3, r3
 808f23c:	2b09      	cmp	r3, #9
 808f23e:	f200 8361 	bhi.w	808f904 <mbedtls_ssl_handshake_client_step+0x91c>
 808f242:	f240 320f 	movw	r2, #783	; 0x30f
 808f246:	2501      	movs	r5, #1
 808f248:	fa05 f303 	lsl.w	r3, r5, r3
 808f24c:	401a      	ands	r2, r3
 808f24e:	2a00      	cmp	r2, #0
 808f250:	f000 8358 	beq.w	808f904 <mbedtls_ssl_handshake_client_step+0x91c>
 808f254:	e35a      	b.n	808f90c <mbedtls_ssl_handshake_client_step+0x924>
{
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello done" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808f256:	4620      	mov	r0, r4
 808f258:	f7fa fee4 	bl	808a024 <mbedtls_ssl_read_record>
 808f25c:	2800      	cmp	r0, #0
 808f25e:	f040 83e8 	bne.w	808fa32 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 808f262:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808f264:	2b16      	cmp	r3, #22
 808f266:	f040 8396 	bne.w	808f996 <mbedtls_ssl_handshake_client_step+0x9ae>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 808f26a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 808f26c:	2b04      	cmp	r3, #4
 808f26e:	f040 838b 	bne.w	808f988 <mbedtls_ssl_handshake_client_step+0x9a0>
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
 808f272:	6e63      	ldr	r3, [r4, #100]	; 0x64
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 808f274:	781b      	ldrb	r3, [r3, #0]
 808f276:	2b0e      	cmp	r3, #14
 808f278:	f040 8386 	bne.w	808f988 <mbedtls_ssl_handshake_client_step+0x9a0>
 808f27c:	e7d4      	b.n	808f228 <mbedtls_ssl_handshake_client_step+0x240>
        *      ( CertificateVerify  )
        *        ChangeCipherSpec
        *        Finished
        */
       case MBEDTLS_SSL_CLIENT_CERTIFICATE:
           ret = mbedtls_ssl_write_certificate( ssl );
 808f27e:	4620      	mov	r0, r4
 808f280:	f7fa feee 	bl	808a060 <mbedtls_ssl_write_certificate>
           break;
 808f284:	e3d5      	b.n	808fa32 <mbedtls_ssl_handshake_client_step+0xa4a>
static int ssl_write_client_key_exchange( mbedtls_ssl_context *ssl )
{
    int ret;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 808f286:	6c23      	ldr	r3, [r4, #64]	; 0x40
        }
    }
    else
#endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */
#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 808f288:	681b      	ldr	r3, [r3, #0]
 808f28a:	7a9f      	ldrb	r7, [r3, #10]
 808f28c:	2f01      	cmp	r7, #1
 808f28e:	f040 8100 	bne.w	808f492 <mbedtls_ssl_handshake_client_step+0x4aa>
     *  struct {
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 808f292:	6820      	ldr	r0, [r4, #0]
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
    unsigned char *p = ssl->handshake->premaster + pms_offset;
 808f294:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 808f298:	68e3      	ldr	r3, [r4, #12]
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 808f29a:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
    unsigned char *p = ssl->handshake->premaster + pms_offset;
 808f29e:	f508 76da 	add.w	r6, r8, #436	; 0x1b4
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 808f2a2:	2b00      	cmp	r3, #0
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 808f2a4:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 808f2a8:	4633      	mov	r3, r6
 808f2aa:	f3c2 0240 	ubfx	r2, r2, #1, #1
 808f2ae:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 808f2b2:	bf14      	ite	ne
 808f2b4:	2502      	movne	r5, #2
 808f2b6:	2500      	moveq	r5, #0
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 808f2b8:	f7fb fc9c 	bl	808abf4 <mbedtls_ssl_write_version>

    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p + 2, 46 ) ) != 0 )
 808f2bc:	6823      	ldr	r3, [r4, #0]
 808f2be:	222e      	movs	r2, #46	; 0x2e
 808f2c0:	f8d3 9018 	ldr.w	r9, [r3, #24]
 808f2c4:	f508 71db 	add.w	r1, r8, #438	; 0x1b6
 808f2c8:	69d8      	ldr	r0, [r3, #28]
 808f2ca:	47c8      	blx	r9
 808f2cc:	2800      	cmp	r0, #0
 808f2ce:	f040 83b0 	bne.w	808fa32 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "f_rng", ret );
        return( ret );
    }

    ssl->handshake->pmslen = 48;
 808f2d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808f2d4:	2230      	movs	r2, #48	; 0x30
 808f2d6:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

    if( ssl->session_negotiate->peer_cert == NULL )
 808f2da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 808f2dc:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 808f2de:	2800      	cmp	r0, #0
 808f2e0:	f000 8359 	beq.w	808f996 <mbedtls_ssl_handshake_client_step+0x9ae>
    }

    /*
     * Now write it out, encrypted
     */
    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
 808f2e4:	4639      	mov	r1, r7
 808f2e6:	30bc      	adds	r0, #188	; 0xbc
 808f2e8:	f7fd f912 	bl	808c510 <mbedtls_pk_can_do>
 808f2ec:	2800      	cmp	r0, #0
 808f2ee:	f000 8354 	beq.w	808f99a <mbedtls_ssl_handshake_client_step+0x9b2>

    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
                            p, ssl->handshake->pmslen,
                            ssl->out_msg + offset + len_bytes, olen,
                            MBEDTLS_SSL_MAX_CONTENT_LEN - offset - len_bytes,
                            ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 808f2f2:	6822      	ldr	r2, [r4, #0]
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
    }

    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 808f2f4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 808f2f6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 808f2f8:	9104      	str	r1, [sp, #16]
 808f2fa:	69d1      	ldr	r1, [r2, #28]
 808f2fc:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 808f2fe:	9103      	str	r1, [sp, #12]
 808f300:	6992      	ldr	r2, [r2, #24]
 808f302:	f8d4 7098 	ldr.w	r7, [r4, #152]	; 0x98
 808f306:	9202      	str	r2, [sp, #8]
 808f308:	f5c5 52ff 	rsb	r2, r5, #8160	; 0x1fe0
 808f30c:	321c      	adds	r2, #28
 808f30e:	9201      	str	r2, [sp, #4]
 808f310:	aa08      	add	r2, sp, #32
 808f312:	9200      	str	r2, [sp, #0]
 808f314:	9a04      	ldr	r2, [sp, #16]
 808f316:	1d2b      	adds	r3, r5, #4
 808f318:	443b      	add	r3, r7
 808f31a:	f8d2 2170 	ldr.w	r2, [r2, #368]	; 0x170
 808f31e:	4631      	mov	r1, r6
 808f320:	30bc      	adds	r0, #188	; 0xbc
 808f322:	f7fd f95f 	bl	808c5e4 <mbedtls_pk_encrypt>
 808f326:	2800      	cmp	r0, #0
 808f328:	f040 8383 	bne.w	808fa32 <mbedtls_ssl_handshake_client_step+0xa4a>
        return( ret );
    }

#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( len_bytes == 2 )
 808f32c:	2d00      	cmp	r5, #0
 808f32e:	f000 8336 	beq.w	808f99e <mbedtls_ssl_handshake_client_step+0x9b6>
    {
        ssl->out_msg[offset+0] = (unsigned char)( *olen >> 8 );
 808f332:	9b08      	ldr	r3, [sp, #32]
 808f334:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 808f338:	0a19      	lsrs	r1, r3, #8
 808f33a:	7111      	strb	r1, [r2, #4]
        ssl->out_msg[offset+1] = (unsigned char)( *olen      );
 808f33c:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 808f340:	7153      	strb	r3, [r2, #5]
        *olen += 2;
 808f342:	3302      	adds	r3, #2
 808f344:	9308      	str	r3, [sp, #32]
 808f346:	e32a      	b.n	808f99e <mbedtls_ssl_handshake_client_step+0x9b6>
#else
static int ssl_write_certificate_verify( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 808f348:	6c23      	ldr	r3, [r4, #64]	; 0x40
    mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;
    unsigned int hashlen;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate verify" ) );

    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 808f34a:	4620      	mov	r0, r4
#else
static int ssl_write_certificate_verify( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 808f34c:	681d      	ldr	r5, [r3, #0]
    size_t n = 0, offset = 0;
 808f34e:	2300      	movs	r3, #0
 808f350:	9307      	str	r3, [sp, #28]
    mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;
    unsigned int hashlen;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate verify" ) );

    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 808f352:	f7fa f879 	bl	8089448 <mbedtls_ssl_derive_keys>
 808f356:	2800      	cmp	r0, #0
 808f358:	f040 836b 	bne.w	808fa32 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
        return( ret );
    }

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 808f35c:	7aab      	ldrb	r3, [r5, #10]
 808f35e:	1f5a      	subs	r2, r3, #5
 808f360:	2a03      	cmp	r2, #3
 808f362:	d901      	bls.n	808f368 <mbedtls_ssl_handshake_client_step+0x380>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
 808f364:	2b0b      	cmp	r3, #11
 808f366:	d102      	bne.n	808f36e <mbedtls_ssl_handshake_client_step+0x386>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
        ssl->state++;
 808f368:	6863      	ldr	r3, [r4, #4]
 808f36a:	3301      	adds	r3, #1
 808f36c:	e2cb      	b.n	808f906 <mbedtls_ssl_handshake_client_step+0x91e>
        return( 0 );
    }

    if( ssl->client_auth == 0 || mbedtls_ssl_own_cert( ssl ) == NULL )
 808f36e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 808f372:	2b00      	cmp	r3, #0
 808f374:	d0f8      	beq.n	808f368 <mbedtls_ssl_handshake_client_step+0x380>

static inline mbedtls_x509_crt *mbedtls_ssl_own_cert( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 808f376:	6b25      	ldr	r5, [r4, #48]	; 0x30
 808f378:	b10d      	cbz	r5, 808f37e <mbedtls_ssl_handshake_client_step+0x396>
 808f37a:	686b      	ldr	r3, [r5, #4]
 808f37c:	b91b      	cbnz	r3, 808f386 <mbedtls_ssl_handshake_client_step+0x39e>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
 808f37e:	6823      	ldr	r3, [r4, #0]
 808f380:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return( key_cert == NULL ? NULL : key_cert->cert );
 808f382:	2b00      	cmp	r3, #0
 808f384:	d0f0      	beq.n	808f368 <mbedtls_ssl_handshake_client_step+0x380>
 808f386:	681b      	ldr	r3, [r3, #0]
 808f388:	2b00      	cmp	r3, #0
 808f38a:	d0ed      	beq.n	808f368 <mbedtls_ssl_handshake_client_step+0x380>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
        ssl->state++;
        return( 0 );
    }

    if( mbedtls_ssl_own_key( ssl ) == NULL )
 808f38c:	4620      	mov	r0, r4
 808f38e:	f7ff fe20 	bl	808efd2 <mbedtls_ssl_own_key>
 808f392:	2800      	cmp	r0, #0
 808f394:	d044      	beq.n	808f420 <mbedtls_ssl_handshake_client_step+0x438>
    }

    /*
     * Make an RSA signature of the handshake digests
     */
    ssl->handshake->calc_verify( ssl, hash );
 808f396:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
 808f39a:	a908      	add	r1, sp, #32
 808f39c:	4620      	mov	r0, r4
 808f39e:	4798      	blx	r3
    }
    else
#endif /* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 || \
          MBEDTLS_SSL_PROTO_TLS1_1 */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 808f3a0:	68e3      	ldr	r3, [r4, #12]
 808f3a2:	2b03      	cmp	r3, #3
 808f3a4:	d175      	bne.n	808f492 <mbedtls_ssl_handshake_client_step+0x4aa>
         * shortcut.
         *
         * Reason: Otherwise we should have running hashes for SHA512 and SHA224
         *         in order to satisfy 'weird' needs from the server side.
         */
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
 808f3a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
        }
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
 808f3a8:	4620      	mov	r0, r4
         * shortcut.
         *
         * Reason: Otherwise we should have running hashes for SHA512 and SHA224
         *         in order to satisfy 'weird' needs from the server side.
         */
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
 808f3aa:	681b      	ldr	r3, [r3, #0]
 808f3ac:	7a5d      	ldrb	r5, [r3, #9]
 808f3ae:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 808f3b2:	2d07      	cmp	r5, #7
            MBEDTLS_MD_SHA384 )
        {
            md_alg = MBEDTLS_MD_SHA384;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
 808f3b4:	bf0b      	itete	eq
 808f3b6:	2205      	moveq	r2, #5
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
 808f3b8:	2204      	movne	r2, #4
         */
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
            MBEDTLS_MD_SHA384 )
        {
            md_alg = MBEDTLS_MD_SHA384;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
 808f3ba:	711a      	strbeq	r2, [r3, #4]
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
 808f3bc:	711a      	strbne	r2, [r3, #4]
            md_alg = MBEDTLS_MD_SHA384;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
 808f3be:	bf18      	it	ne
 808f3c0:	2506      	movne	r5, #6
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
        }
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
 808f3c2:	f7ff fe06 	bl	808efd2 <mbedtls_ssl_own_key>
 808f3c6:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
 808f3ca:	f7fb fad4 	bl	808a976 <mbedtls_ssl_sig_from_pk>
 808f3ce:	7170      	strb	r0, [r6, #5]
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 808f3d0:	4620      	mov	r0, r4
 808f3d2:	f7ff fdfe 	bl	808efd2 <mbedtls_ssl_own_key>
                         ssl->out_msg + 6 + offset, &n,
                         ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 808f3d6:	6823      	ldr	r3, [r4, #0]
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 808f3d8:	4629      	mov	r1, r5
 808f3da:	69da      	ldr	r2, [r3, #28]
 808f3dc:	9203      	str	r2, [sp, #12]
 808f3de:	699b      	ldr	r3, [r3, #24]
 808f3e0:	aa08      	add	r2, sp, #32
 808f3e2:	9302      	str	r3, [sp, #8]
 808f3e4:	ab07      	add	r3, sp, #28
 808f3e6:	9301      	str	r3, [sp, #4]
 808f3e8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 808f3ec:	3308      	adds	r3, #8
 808f3ee:	9300      	str	r3, [sp, #0]
 808f3f0:	2300      	movs	r3, #0
 808f3f2:	f7fd f8c3 	bl	808c57c <mbedtls_pk_sign>
 808f3f6:	2800      	cmp	r0, #0
 808f3f8:	f040 831b 	bne.w	808fa32 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_pk_sign", ret );
        return( ret );
    }

    ssl->out_msg[4 + offset] = (unsigned char)( n >> 8 );
 808f3fc:	9b07      	ldr	r3, [sp, #28]
 808f3fe:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 808f402:	0a19      	lsrs	r1, r3, #8
 808f404:	7191      	strb	r1, [r2, #6]
    ssl->out_msg[5 + offset] = (unsigned char)( n      );
 808f406:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 808f40a:	71d3      	strb	r3, [r2, #7]

    ssl->out_msglen  = 6 + n + offset;
 808f40c:	3308      	adds	r3, #8
 808f40e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 808f412:	2316      	movs	r3, #22
 808f414:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE_VERIFY;
 808f418:	220f      	movs	r2, #15
 808f41a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 808f41e:	e2c8      	b.n	808f9b2 <mbedtls_ssl_handshake_client_step+0x9ca>
    }

    if( mbedtls_ssl_own_key( ssl ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no private key for certificate" ) );
        return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
 808f420:	4806      	ldr	r0, [pc, #24]	; (808f43c <mbedtls_ssl_handshake_client_step+0x454>)
 808f422:	e306      	b.n	808fa32 <mbedtls_ssl_handshake_client_step+0xa4a>
       case MBEDTLS_SSL_CERTIFICATE_VERIFY:
           ret = ssl_write_certificate_verify( ssl );
           break;

       case MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC:
           ret = mbedtls_ssl_write_change_cipher_spec( ssl );
 808f424:	4620      	mov	r0, r4
 808f426:	f7fa fe7f 	bl	808a128 <mbedtls_ssl_write_change_cipher_spec>
           break;
 808f42a:	e302      	b.n	808fa32 <mbedtls_ssl_handshake_client_step+0xa4a>

       case MBEDTLS_SSL_CLIENT_FINISHED:
           ret = mbedtls_ssl_write_finished( ssl );
 808f42c:	4620      	mov	r0, r4
 808f42e:	f7fa fed3 	bl	808a1d8 <mbedtls_ssl_write_finished>
           break;
 808f432:	e2fe      	b.n	808fa32 <mbedtls_ssl_handshake_client_step+0xa4a>
 808f434:	ffff8f00 	.word	0xffff8f00
 808f438:	ffff8680 	.word	0xffff8680
 808f43c:	ffff8a00 	.word	0xffff8a00
    unsigned char *ticket;
    const unsigned char *msg;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse new session ticket" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808f440:	4620      	mov	r0, r4
 808f442:	f7fa fdef 	bl	808a024 <mbedtls_ssl_read_record>
 808f446:	2800      	cmp	r0, #0
 808f448:	f040 82f3 	bne.w	808fa32 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 808f44c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808f44e:	2b16      	cmp	r3, #22
 808f450:	f47f ae3f 	bne.w	808f0d2 <mbedtls_ssl_handshake_client_step+0xea>
     *
     * 0  .  3   ticket_lifetime_hint
     * 4  .  5   ticket_len (n)
     * 6  .  5+n ticket content
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||
 808f454:	6e67      	ldr	r7, [r4, #100]	; 0x64
 808f456:	783b      	ldrb	r3, [r7, #0]
 808f458:	2b04      	cmp	r3, #4
 808f45a:	d103      	bne.n	808f464 <mbedtls_ssl_handshake_client_step+0x47c>
        ssl->in_hslen < 6 + mbedtls_ssl_hs_hdr_len( ssl ) )
 808f45c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
     *
     * 0  .  3   ticket_lifetime_hint
     * 4  .  5   ticket_len (n)
     * 6  .  5+n ticket content
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||
 808f45e:	2b09      	cmp	r3, #9
 808f460:	f200 82af 	bhi.w	808f9c2 <mbedtls_ssl_handshake_client_step+0x9da>

    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad new session ticket message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 808f464:	2232      	movs	r2, #50	; 0x32
 808f466:	2102      	movs	r1, #2
 808f468:	4620      	mov	r0, r4
 808f46a:	f7fa fb8d 	bl	8089b88 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
 808f46e:	48c1      	ldr	r0, [pc, #772]	; (808f774 <mbedtls_ssl_handshake_client_step+0x78c>)
 808f470:	e2df      	b.n	808fa32 <mbedtls_ssl_handshake_client_step+0xa4a>
           ret = ssl_parse_new_session_ticket( ssl );
           break;
#endif

       case MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC:
           ret = mbedtls_ssl_parse_change_cipher_spec( ssl );
 808f472:	4620      	mov	r0, r4
 808f474:	f7fa fe66 	bl	808a144 <mbedtls_ssl_parse_change_cipher_spec>
           break;
 808f478:	e2db      	b.n	808fa32 <mbedtls_ssl_handshake_client_step+0xa4a>

       case MBEDTLS_SSL_SERVER_FINISHED:
           ret = mbedtls_ssl_parse_finished( ssl );
 808f47a:	4620      	mov	r0, r4
 808f47c:	f7fa fef4 	bl	808a268 <mbedtls_ssl_parse_finished>
           break;
 808f480:	e2d7      	b.n	808fa32 <mbedtls_ssl_handshake_client_step+0xa4a>

       case MBEDTLS_SSL_FLUSH_BUFFERS:
           MBEDTLS_SSL_DEBUG_MSG( 2, ( "handshake: done" ) );
           ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 808f482:	230f      	movs	r3, #15
 808f484:	e23f      	b.n	808f906 <mbedtls_ssl_handshake_client_step+0x91e>
           break;

       case MBEDTLS_SSL_HANDSHAKE_WRAPUP:
           mbedtls_ssl_handshake_wrapup( ssl );
 808f486:	4620      	mov	r0, r4
 808f488:	f7fb f8f0 	bl	808a66c <mbedtls_ssl_handshake_wrapup>
 808f48c:	e23c      	b.n	808f908 <mbedtls_ssl_handshake_client_step+0x920>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );

    if( ssl->conf->f_rng == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "no RNG provided") );
        return( MBEDTLS_ERR_SSL_NO_RNG );
 808f48e:	48ba      	ldr	r0, [pc, #744]	; (808f778 <mbedtls_ssl_handshake_client_step+0x790>)
 808f490:	e2cf      	b.n	808fa32 <mbedtls_ssl_handshake_client_step+0xa4a>
    }
    else
#endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 808f492:	48ba      	ldr	r0, [pc, #744]	; (808f77c <mbedtls_ssl_handshake_client_step+0x794>)
 808f494:	e2cd      	b.n	808fa32 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_generate_random", ret );
        return( ret );
    }

    memcpy( p, ssl->handshake->randbytes, 32 );
 808f496:	f852 0b04 	ldr.w	r0, [r2], #4
 808f49a:	429a      	cmp	r2, r3
 808f49c:	f841 0b04 	str.w	r0, [r1], #4
 808f4a0:	d1f9      	bne.n	808f496 <mbedtls_ssl_handshake_client_step+0x4ae>
     *   ..   . ..    compression methods length (1 byte)
     *   ..   . ..    compression methods
     *   ..   . ..    extensions length (2 bytes)
     *   ..   . ..    extensions
     */
    n = ssl->session_negotiate->id_len;
 808f4a2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 808f4a4:	688b      	ldr	r3, [r1, #8]

    if( n < 16 || n > 32 ||
 808f4a6:	f1a3 0210 	sub.w	r2, r3, #16
 808f4aa:	2a10      	cmp	r2, #16
 808f4ac:	d806      	bhi.n	808f4bc <mbedtls_ssl_handshake_client_step+0x4d4>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->handshake->resume == 0 )
 808f4ae:	6b22      	ldr	r2, [r4, #48]	; 0x30
     *   ..   . ..    extensions length (2 bytes)
     *   ..   . ..    extensions
     */
    n = ssl->session_negotiate->id_len;

    if( n < 16 || n > 32 ||
 808f4b0:	f8d2 21e4 	ldr.w	r2, [r2, #484]	; 0x1e4
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->handshake->resume == 0 )
    {
        n = 0;
 808f4b4:	2a00      	cmp	r2, #0
 808f4b6:	bf08      	it	eq
 808f4b8:	2300      	moveq	r3, #0
 808f4ba:	e000      	b.n	808f4be <mbedtls_ssl_handshake_client_step+0x4d6>
 808f4bc:	2300      	movs	r3, #0
     */
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        if( ssl->session_negotiate->ticket != NULL &&
 808f4be:	6e4a      	ldr	r2, [r1, #100]	; 0x64
 808f4c0:	b16a      	cbz	r2, 808f4de <mbedtls_ssl_handshake_client_step+0x4f6>
 808f4c2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
 808f4c4:	b15a      	cbz	r2, 808f4de <mbedtls_ssl_handshake_client_step+0x4f6>
                ssl->session_negotiate->ticket_len != 0 )
        {
            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->session_negotiate->id, 32 );
 808f4c6:	6823      	ldr	r3, [r4, #0]
 808f4c8:	2220      	movs	r2, #32
 808f4ca:	699d      	ldr	r5, [r3, #24]
 808f4cc:	310c      	adds	r1, #12
 808f4ce:	69d8      	ldr	r0, [r3, #28]
 808f4d0:	47a8      	blx	r5

            if( ret != 0 )
 808f4d2:	2800      	cmp	r0, #0
 808f4d4:	f040 82ad 	bne.w	808fa32 <mbedtls_ssl_handshake_client_step+0xa4a>
                return( ret );

            ssl->session_negotiate->id_len = n = 32;
 808f4d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808f4da:	2320      	movs	r3, #32
 808f4dc:	6093      	str	r3, [r2, #8]
        }
    }
#endif /* MBEDTLS_SSL_SESSION_TICKETS */

    *p++ = (unsigned char) n;
 808f4de:	f106 0527 	add.w	r5, r6, #39	; 0x27
 808f4e2:	f886 3026 	strb.w	r3, [r6, #38]	; 0x26

    for( i = 0; i < n; i++ )
 808f4e6:	2200      	movs	r2, #0
 808f4e8:	4293      	cmp	r3, r2
 808f4ea:	d005      	beq.n	808f4f8 <mbedtls_ssl_handshake_client_step+0x510>
        *p++ = ssl->session_negotiate->id[i];
 808f4ec:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 808f4ee:	4411      	add	r1, r2
 808f4f0:	7b09      	ldrb	r1, [r1, #12]
 808f4f2:	54a9      	strb	r1, [r5, r2]
    }
#endif /* MBEDTLS_SSL_SESSION_TICKETS */

    *p++ = (unsigned char) n;

    for( i = 0; i < n; i++ )
 808f4f4:	3201      	adds	r2, #1
 808f4f6:	e7f7      	b.n	808f4e8 <mbedtls_ssl_handshake_client_step+0x500>
 808f4f8:	441d      	add	r5, r3
#endif

    /*
     * Ciphersuite list
     */
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];
 808f4fa:	68e2      	ldr	r2, [r4, #12]
 808f4fc:	6823      	ldr	r3, [r4, #0]

    /* Skip writing ciphersuite length for now */
    n = 0;
    q = p;
    p += 2;
 808f4fe:	f105 0902 	add.w	r9, r5, #2
 808f502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     * Ciphersuite list
     */
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];

    /* Skip writing ciphersuite length for now */
    n = 0;
 808f506:	2700      	movs	r7, #0
 808f508:	f1a3 0804 	sub.w	r8, r3, #4
    q = p;
    p += 2;

    for( i = 0; ciphersuites[i] != 0; i++ )
 808f50c:	f858 bf04 	ldr.w	fp, [r8, #4]!
 808f510:	f1bb 0f00 	cmp.w	fp, #0
 808f514:	d01c      	beq.n	808f550 <mbedtls_ssl_handshake_client_step+0x568>
    {
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );
 808f516:	4658      	mov	r0, fp
 808f518:	f7f6 fe2e 	bl	8086178 <mbedtls_ssl_ciphersuite_from_id>

        if( ssl_validate_ciphersuite( ciphersuite_info, ssl,
                                      ssl->conf->min_minor_ver,
 808f51c:	6822      	ldr	r2, [r4, #0]

    for( i = 0; ciphersuites[i] != 0; i++ )
    {
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );

        if( ssl_validate_ciphersuite( ciphersuite_info, ssl,
 808f51e:	f892 105d 	ldrb.w	r1, [r2, #93]	; 0x5d
static int ssl_validate_ciphersuite( const mbedtls_ssl_ciphersuite_t * suite_info,
                                     const mbedtls_ssl_context * ssl,
                                     int min_minor_ver, int max_minor_ver )
{
    (void) ssl;
    if( suite_info == NULL )
 808f522:	2800      	cmp	r0, #0
 808f524:	d0f2      	beq.n	808f50c <mbedtls_ssl_handshake_client_step+0x524>
        return( 1 );

    if( suite_info->min_minor_ver > max_minor_ver ||
 808f526:	6903      	ldr	r3, [r0, #16]
 808f528:	4299      	cmp	r1, r3
 808f52a:	dbef      	blt.n	808f50c <mbedtls_ssl_handshake_client_step+0x524>
 808f52c:	f892 205f 	ldrb.w	r2, [r2, #95]	; 0x5f
 808f530:	6983      	ldr	r3, [r0, #24]
 808f532:	429a      	cmp	r2, r3
 808f534:	dcea      	bgt.n	808f50c <mbedtls_ssl_handshake_client_step+0x524>

        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
                                    ciphersuites[i] ) );

        n++;
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
 808f536:	f8d8 3000 	ldr.w	r3, [r8]
            continue;

        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
                                    ciphersuites[i] ) );

        n++;
 808f53a:	3701      	adds	r7, #1
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
 808f53c:	121a      	asrs	r2, r3, #8
 808f53e:	464b      	mov	r3, r9
 808f540:	f803 2b02 	strb.w	r2, [r3], #2
        *p++ = (unsigned char)( ciphersuites[i]      );
 808f544:	f8d8 2000 	ldr.w	r2, [r8]
 808f548:	f889 2001 	strb.w	r2, [r9, #1]
 808f54c:	4699      	mov	r9, r3
 808f54e:	e7dd      	b.n	808f50c <mbedtls_ssl_handshake_client_step+0x524>
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
 808f550:	23ff      	movs	r3, #255	; 0xff
        n++;
 808f552:	3701      	adds	r7, #1
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
 808f554:	f889 3001 	strb.w	r3, [r9, #1]
        *p++ = (unsigned char)( MBEDTLS_SSL_FALLBACK_SCSV_VALUE      );
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
 808f558:	09fb      	lsrs	r3, r7, #7
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
 808f55a:	f889 b000 	strb.w	fp, [r9]
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
    *q++ = (unsigned char)( n << 1 );
 808f55e:	007f      	lsls	r7, r7, #1
        *p++ = (unsigned char)( MBEDTLS_SSL_FALLBACK_SCSV_VALUE      );
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
 808f560:	702b      	strb	r3, [r5, #0]
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
 808f562:	2301      	movs	r3, #1
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
    *q++ = (unsigned char)( n << 1 );
 808f564:	706f      	strb	r7, [r5, #1]
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
 808f566:	f889 3002 	strb.w	r3, [r9, #2]
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
 808f56a:	f889 b003 	strb.w	fp, [r9, #3]
static void ssl_write_hostname_ext( mbedtls_ssl_context *ssl,
                                    unsigned char *buf,
                                    size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 808f56e:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
    size_t hostname_len;

    *olen = 0;

    if( ssl->hostname == NULL )
 808f572:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
 808f576:	f109 0704 	add.w	r7, r9, #4
    }

    // First write extensions, then the total length
    //
#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    ssl_write_hostname_ext( ssl, p + 2 + ext_len, &olen );
 808f57a:	f109 0806 	add.w	r8, r9, #6
static void ssl_write_hostname_ext( mbedtls_ssl_context *ssl,
                                    unsigned char *buf,
                                    size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 808f57e:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
    size_t hostname_len;

    *olen = 0;

    if( ssl->hostname == NULL )
 808f582:	b358      	cbz	r0, 808f5dc <mbedtls_ssl_handshake_client_step+0x5f4>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding server name extension: %s",
                   ssl->hostname ) );

    hostname_len = strlen( ssl->hostname );
 808f584:	f002 ff3e 	bl	8092404 <strlen>

    if( end < p || (size_t)( end - p ) < hostname_len + 9 )
 808f588:	45a8      	cmp	r8, r5
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding server name extension: %s",
                   ssl->hostname ) );

    hostname_len = strlen( ssl->hostname );
 808f58a:	4602      	mov	r2, r0

    if( end < p || (size_t)( end - p ) < hostname_len + 9 )
 808f58c:	d828      	bhi.n	808f5e0 <mbedtls_ssl_handshake_client_step+0x5f8>
 808f58e:	f100 0a09 	add.w	sl, r0, #9
 808f592:	ebc8 0505 	rsb	r5, r8, r5
 808f596:	4555      	cmp	r5, sl
 808f598:	d322      	bcc.n	808f5e0 <mbedtls_ssl_handshake_client_step+0x5f8>
     *
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME      ) & 0xFF );

    *p++ = (unsigned char)( ( (hostname_len + 5) >> 8 ) & 0xFF );
 808f59a:	1d43      	adds	r3, r0, #5
 808f59c:	0a1b      	lsrs	r3, r3, #8
 808f59e:	f889 3008 	strb.w	r3, [r9, #8]
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );
 808f5a2:	b2c3      	uxtb	r3, r0
 808f5a4:	1d59      	adds	r1, r3, #5
 808f5a6:	f889 1009 	strb.w	r1, [r9, #9]

    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
 808f5aa:	1cc1      	adds	r1, r0, #3
 808f5ac:	0a09      	lsrs	r1, r1, #8
 808f5ae:	f889 100a 	strb.w	r1, [r9, #10]
    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );
 808f5b2:	1cd9      	adds	r1, r3, #3
 808f5b4:	f889 100b 	strb.w	r1, [r9, #11]

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME ) & 0xFF );
    *p++ = (unsigned char)( ( hostname_len >> 8 ) & 0xFF );
 808f5b8:	0a01      	lsrs	r1, r0, #8
     * struct {
     *     ServerName server_name_list<1..2^16-1>
     * } ServerNameList;
     *
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME >> 8 ) & 0xFF );
 808f5ba:	f889 b006 	strb.w	fp, [r9, #6]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME      ) & 0xFF );
 808f5be:	f889 b007 	strb.w	fp, [r9, #7]
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );

    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME ) & 0xFF );
 808f5c2:	f889 b00c 	strb.w	fp, [r9, #12]
    *p++ = (unsigned char)( ( hostname_len >> 8 ) & 0xFF );
 808f5c6:	f889 100d 	strb.w	r1, [r9, #13]
    *p++ = (unsigned char)( ( hostname_len      ) & 0xFF );
 808f5ca:	f889 300e 	strb.w	r3, [r9, #14]

    memcpy( p, ssl->hostname, hostname_len );
 808f5ce:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 808f5d2:	f109 000f 	add.w	r0, r9, #15
 808f5d6:	f002 feb8 	bl	809234a <memcpy>
 808f5da:	e002      	b.n	808f5e2 <mbedtls_ssl_handshake_client_step+0x5fa>
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t hostname_len;

    *olen = 0;
 808f5dc:	4682      	mov	sl, r0
 808f5de:	e000      	b.n	808f5e2 <mbedtls_ssl_handshake_client_step+0x5fa>
 808f5e0:	46da      	mov	sl, fp
    unsigned char *sig_alg_list = buf + 6;
#endif

    *olen = 0;

    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
 808f5e2:	6823      	ldr	r3, [r4, #0]
 808f5e4:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 808f5e8:	2a03      	cmp	r2, #3
 808f5ea:	d13c      	bne.n	808f666 <mbedtls_ssl_handshake_client_step+0x67e>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 808f5ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
                                                unsigned char *buf,
                                                size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t sig_alg_len = 0;
 808f5ee:	2000      	movs	r0, #0
    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 808f5f0:	f851 3010 	ldr.w	r3, [r1, r0, lsl #1]
 808f5f4:	b10b      	cbz	r3, 808f5fa <mbedtls_ssl_handshake_client_step+0x612>
    {
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_len += 2;
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_len += 2;
 808f5f6:	3002      	adds	r0, #2
 808f5f8:	e7fa      	b.n	808f5f0 <mbedtls_ssl_handshake_client_step+0x608>
static void ssl_write_signature_algorithms_ext( mbedtls_ssl_context *ssl,
                                                unsigned char *buf,
                                                size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 808f5fa:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
 808f5fe:	f10a 0b02 	add.w	fp, sl, #2
 808f602:	44bb      	add	fp, r7
static void ssl_write_signature_algorithms_ext( mbedtls_ssl_context *ssl,
                                                unsigned char *buf,
                                                size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 808f604:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
#if defined(MBEDTLS_RSA_C)
        sig_alg_len += 2;
#endif
    }

    if( end < p || (size_t)( end - p ) < sig_alg_len + 6 )
 808f608:	4593      	cmp	fp, r2
 808f60a:	d82d      	bhi.n	808f668 <mbedtls_ssl_handshake_client_step+0x680>
 808f60c:	ebcb 0202 	rsb	r2, fp, r2
 808f610:	3006      	adds	r0, #6
 808f612:	4282      	cmp	r2, r0
 808f614:	d328      	bcc.n	808f668 <mbedtls_ssl_handshake_client_step+0x680>
 808f616:	461d      	mov	r5, r3
    /*
     * Prepare signature_algorithms extension (TLS 1.2)
     */
    sig_alg_len = 0;

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 808f618:	f851 0015 	ldr.w	r0, [r1, r5, lsl #1]
 808f61c:	9105      	str	r1, [sp, #20]
 808f61e:	1caa      	adds	r2, r5, #2
 808f620:	b170      	cbz	r0, 808f640 <mbedtls_ssl_handshake_client_step+0x658>
 808f622:	9204      	str	r2, [sp, #16]
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 808f624:	f7fb f9b0 	bl	808a988 <mbedtls_ssl_hash_from_md_alg>
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 808f628:	9a04      	ldr	r2, [sp, #16]
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 808f62a:	eb0b 0305 	add.w	r3, fp, r5
 808f62e:	7198      	strb	r0, [r3, #6]
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 808f630:	4615      	mov	r5, r2
 808f632:	eb0b 0302 	add.w	r3, fp, r2
 808f636:	f04f 0201 	mov.w	r2, #1
 808f63a:	9905      	ldr	r1, [sp, #20]
 808f63c:	715a      	strb	r2, [r3, #5]
 808f63e:	e7eb      	b.n	808f618 <mbedtls_ssl_handshake_client_step+0x630>
     *
     * SignatureAndHashAlgorithm
     *   supported_signature_algorithms<2..2^16-2>;
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );
 808f640:	230d      	movs	r3, #13
 808f642:	f88b 3001 	strb.w	r3, [fp, #1]

    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
 808f646:	0a13      	lsrs	r3, r2, #8
 808f648:	f88b 3002 	strb.w	r3, [fp, #2]
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );
 808f64c:	b2eb      	uxtb	r3, r5
 808f64e:	1c9a      	adds	r2, r3, #2
 808f650:	f88b 2003 	strb.w	r2, [fp, #3]

    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
 808f654:	0a2a      	lsrs	r2, r5, #8
    *p++ = (unsigned char)( ( sig_alg_len      ) & 0xFF );
 808f656:	f88b 3005 	strb.w	r3, [fp, #5]
     * } SignatureAndHashAlgorithm;
     *
     * SignatureAndHashAlgorithm
     *   supported_signature_algorithms<2..2^16-2>;
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
 808f65a:	f88b 0000 	strb.w	r0, [fp]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );

    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );

    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
 808f65e:	f88b 2004 	strb.w	r2, [fp, #4]
    *p++ = (unsigned char)( ( sig_alg_len      ) & 0xFF );

    *olen = 6 + sig_alg_len;
 808f662:	1dab      	adds	r3, r5, #6
 808f664:	e000      	b.n	808f668 <mbedtls_ssl_handshake_client_step+0x680>
    const int *md;
#if defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C)
    unsigned char *sig_alg_list = buf + 6;
#endif

    *olen = 0;
 808f666:	2300      	movs	r3, #0
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;

    *olen = 0;

    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ) {
 808f668:	6822      	ldr	r2, [r4, #0]
#endif

#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
 808f66a:	4453      	add	r3, sl
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;

    *olen = 0;

    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ) {
 808f66c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 808f670:	f412 72e0 	ands.w	r2, r2, #448	; 0x1c0
 808f674:	d018      	beq.n	808f6a8 <mbedtls_ssl_handshake_client_step+0x6c0>
static void ssl_write_max_fragment_length_ext( mbedtls_ssl_context *ssl,
                                               unsigned char *buf,
                                               size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 808f676:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    ssl_write_ecjpake_kkpp_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );
 808f67a:	1c99      	adds	r1, r3, #2
 808f67c:	4439      	add	r1, r7
static void ssl_write_max_fragment_length_ext( mbedtls_ssl_context *ssl,
                                               unsigned char *buf,
                                               size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 808f67e:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding max_fragment_length extension" ) );

    if( end < p || (size_t)( end - p ) < 5 )
 808f682:	4281      	cmp	r1, r0
 808f684:	f04f 0200 	mov.w	r2, #0
 808f688:	d80e      	bhi.n	808f6a8 <mbedtls_ssl_handshake_client_step+0x6c0>
 808f68a:	1a40      	subs	r0, r0, r1
 808f68c:	2804      	cmp	r0, #4
 808f68e:	d90b      	bls.n	808f6a8 <mbedtls_ssl_handshake_client_step+0x6c0>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );
 808f690:	2001      	movs	r0, #1
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );
 808f692:	700a      	strb	r2, [r1, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );
 808f694:	7048      	strb	r0, [r1, #1]

    *p++ = 0x00;
 808f696:	708a      	strb	r2, [r1, #2]
    *p++ = 1;
 808f698:	70c8      	strb	r0, [r1, #3]

    *p++ = ssl->conf->mfl_code;
 808f69a:	6822      	ldr	r2, [r4, #0]
 808f69c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 808f6a0:	f3c2 1282 	ubfx	r2, r2, #6, #3
 808f6a4:	710a      	strb	r2, [r1, #4]

    *olen = 5;
 808f6a6:	2205      	movs	r2, #5
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
 808f6a8:	189d      	adds	r5, r3, r2
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;

    *olen = 0;

    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED )
 808f6aa:	6823      	ldr	r3, [r4, #0]
 808f6ac:	f893 1061 	ldrb.w	r1, [r3, #97]	; 0x61
 808f6b0:	f001 0102 	and.w	r1, r1, #2
 808f6b4:	f001 0aff 	and.w	sl, r1, #255	; 0xff
 808f6b8:	b329      	cbz	r1, 808f706 <mbedtls_ssl_handshake_client_step+0x71e>
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 808f6ba:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    ssl_write_alpn_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    ssl_write_session_ticket_ext( ssl, p + 2 + ext_len, &olen );
 808f6be:	1ca8      	adds	r0, r5, #2
 808f6c0:	4438      	add	r0, r7
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 808f6c2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );

    if( end < p || (size_t)( end - p ) < 4 + tlen )
 808f6c6:	4298      	cmp	r0, r3
 808f6c8:	d816      	bhi.n	808f6f8 <mbedtls_ssl_handshake_client_step+0x710>
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;
 808f6ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );

    if( end < p || (size_t)( end - p ) < 4 + tlen )
 808f6cc:	1a1b      	subs	r3, r3, r0
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;
 808f6ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );

    if( end < p || (size_t)( end - p ) < 4 + tlen )
 808f6d0:	f102 0a04 	add.w	sl, r2, #4
 808f6d4:	4553      	cmp	r3, sl
 808f6d6:	f04f 0300 	mov.w	r3, #0
 808f6da:	d310      	bcc.n	808f6fe <mbedtls_ssl_handshake_client_step+0x716>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET >> 8 ) & 0xFF );
 808f6dc:	7003      	strb	r3, [r0, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET      ) & 0xFF );
 808f6de:	2323      	movs	r3, #35	; 0x23
 808f6e0:	7043      	strb	r3, [r0, #1]

    *p++ = (unsigned char)( ( tlen >> 8 ) & 0xFF );
 808f6e2:	0a13      	lsrs	r3, r2, #8
 808f6e4:	7083      	strb	r3, [r0, #2]
    *p++ = (unsigned char)( ( tlen      ) & 0xFF );
 808f6e6:	70c2      	strb	r2, [r0, #3]

    *olen = 4;

    if( ssl->session_negotiate->ticket == NULL || tlen == 0 )
 808f6e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 808f6ea:	6e59      	ldr	r1, [r3, #100]	; 0x64
 808f6ec:	b149      	cbz	r1, 808f702 <mbedtls_ssl_handshake_client_step+0x71a>
 808f6ee:	b142      	cbz	r2, 808f702 <mbedtls_ssl_handshake_client_step+0x71a>
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "sending session ticket of length %d", tlen ) );

    memcpy( p, ssl->session_negotiate->ticket, tlen );
 808f6f0:	3004      	adds	r0, #4
 808f6f2:	f002 fe2a 	bl	809234a <memcpy>
 808f6f6:	e006      	b.n	808f706 <mbedtls_ssl_handshake_client_step+0x71e>
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;

    *olen = 0;
 808f6f8:	f04f 0a00 	mov.w	sl, #0
 808f6fc:	e003      	b.n	808f706 <mbedtls_ssl_handshake_client_step+0x71e>
 808f6fe:	469a      	mov	sl, r3
 808f700:	e001      	b.n	808f706 <mbedtls_ssl_handshake_client_step+0x71e>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET      ) & 0xFF );

    *p++ = (unsigned char)( ( tlen >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( tlen      ) & 0xFF );

    *olen = 4;
 808f702:	f04f 0a04 	mov.w	sl, #4
    ((void) olen);

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, total extension length: %d",
                   ext_len ) );

    if( ext_len > 0 )
 808f706:	eb15 030a 	adds.w	r3, r5, sl
    {
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
 808f70a:	bf1f      	itttt	ne
 808f70c:	0a1a      	lsrne	r2, r3, #8
 808f70e:	f889 2004 	strbne.w	r2, [r9, #4]
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
 808f712:	f889 3005 	strbne.w	r3, [r9, #5]
        p += ext_len;
 808f716:	eb08 0703 	addne.w	r7, r8, r3
    }

    ssl->out_msglen  = p - buf;
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 808f71a:	2316      	movs	r3, #22
 808f71c:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 808f720:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 808f724:	2201      	movs	r2, #1
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
        p += ext_len;
    }

    ssl->out_msglen  = p - buf;
 808f726:	1bbe      	subs	r6, r7, r6
 808f728:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 808f72c:	701a      	strb	r2, [r3, #0]

    ssl->state++;
 808f72e:	6863      	ldr	r3, [r4, #4]
 808f730:	4413      	add	r3, r2
 808f732:	e141      	b.n	808f9b8 <mbedtls_ssl_handshake_client_step+0x9d0>
                            ssl->conf->min_major_ver, ssl->conf->min_minor_ver,
                            ssl->major_ver, ssl->minor_ver,
                            ssl->conf->max_major_ver, ssl->conf->max_minor_ver ) );

        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                     MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION );
 808f734:	2246      	movs	r2, #70	; 0x46
 808f736:	2102      	movs	r1, #2
 808f738:	4620      	mov	r0, r4
 808f73a:	f7fa fa25 	bl	8089b88 <mbedtls_ssl_send_alert_message>

        return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );
 808f73e:	4810      	ldr	r0, [pc, #64]	; (808f780 <mbedtls_ssl_handshake_client_step+0x798>)
 808f740:	e177      	b.n	808fa32 <mbedtls_ssl_handshake_client_step+0xa4a>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    if( ssl->in_hslen > mbedtls_ssl_hs_hdr_len( ssl ) + 39 + n )
 808f742:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 808f744:	f106 022b 	add.w	r2, r6, #43	; 0x2b
 808f748:	4293      	cmp	r3, r2
 808f74a:	d91b      	bls.n	808f784 <mbedtls_ssl_handshake_client_step+0x79c>
    {
        ext_len = ( ( buf[38 + n] <<  8 )
 808f74c:	eb08 0206 	add.w	r2, r8, r6
                  | ( buf[39 + n]       ) );
 808f750:	f892 7026 	ldrb.w	r7, [r2, #38]	; 0x26
 808f754:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 808f758:	ea42 2707 	orr.w	r7, r2, r7, lsl #8

        if( ( ext_len > 0 && ext_len < 4 ) ||
 808f75c:	1e7a      	subs	r2, r7, #1
 808f75e:	2a02      	cmp	r2, #2
 808f760:	f67f acfa 	bls.w	808f158 <mbedtls_ssl_handshake_client_step+0x170>
 808f764:	f106 022c 	add.w	r2, r6, #44	; 0x2c
 808f768:	443a      	add	r2, r7
 808f76a:	4293      	cmp	r3, r2
 808f76c:	f47f acf4 	bne.w	808f158 <mbedtls_ssl_handshake_client_step+0x170>
 808f770:	e00e      	b.n	808f790 <mbedtls_ssl_handshake_client_step+0x7a8>
 808f772:	bf00      	nop
 808f774:	ffff9200 	.word	0xffff9200
 808f778:	ffff8c00 	.word	0xffff8c00
 808f77c:	ffff9400 	.word	0xffff9400
 808f780:	ffff9180 	.word	0xffff9180
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }
    }
    else if( ssl->in_hslen == mbedtls_ssl_hs_hdr_len( ssl ) + 38 + n )
 808f784:	f106 022a 	add.w	r2, r6, #42	; 0x2a
 808f788:	4293      	cmp	r3, r2
 808f78a:	f47f ace5 	bne.w	808f158 <mbedtls_ssl_handshake_client_step+0x170>
    {
        ext_len = 0;
 808f78e:	2700      	movs	r7, #0
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    /* ciphersuite (used later) */
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
 808f790:	eb08 0306 	add.w	r3, r8, r6
 808f794:	f893 9023 	ldrb.w	r9, [r3, #35]	; 0x23
 808f798:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
        accept_comp = 1;

    if( comp != MBEDTLS_SSL_COMPRESS_NULL &&
        ( comp != MBEDTLS_SSL_COMPRESS_DEFLATE || accept_comp == 0 ) )
#else /* MBEDTLS_ZLIB_SUPPORT */
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
 808f79c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    /* ciphersuite (used later) */
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
 808f7a0:	ea42 2909 	orr.w	r9, r2, r9, lsl #8
        accept_comp = 1;

    if( comp != MBEDTLS_SSL_COMPRESS_NULL &&
        ( comp != MBEDTLS_SSL_COMPRESS_DEFLATE || accept_comp == 0 ) )
#else /* MBEDTLS_ZLIB_SUPPORT */
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
 808f7a4:	2b00      	cmp	r3, #0
 808f7a6:	f43f acd9 	beq.w	808f15c <mbedtls_ssl_handshake_client_step+0x174>
#endif/* MBEDTLS_ZLIB_SUPPORT */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server hello, bad compression: %d", comp ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
 808f7aa:	222f      	movs	r2, #47	; 0x2f
 808f7ac:	2102      	movs	r1, #2
 808f7ae:	4620      	mov	r0, r4
 808f7b0:	f7fa f9ea 	bl	8089b88 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
 808f7b4:	48a0      	ldr	r0, [pc, #640]	; (808fa38 <mbedtls_ssl_handshake_client_step+0xa50>)
 808f7b6:	e13c      	b.n	808fa32 <mbedtls_ssl_handshake_client_step+0xa4a>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
 808f7b8:	2e00      	cmp	r6, #0
 808f7ba:	f43f acec 	beq.w	808f196 <mbedtls_ssl_handshake_client_step+0x1ae>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
 808f7be:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
 808f7c0:	6803      	ldr	r3, [r0, #0]
 808f7c2:	4599      	cmp	r9, r3
 808f7c4:	f47f ace7 	bne.w	808f196 <mbedtls_ssl_handshake_client_step+0x1ae>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
 808f7c8:	6843      	ldr	r3, [r0, #4]
 808f7ca:	2b00      	cmp	r3, #0
 808f7cc:	f47f ace3 	bne.w	808f196 <mbedtls_ssl_handshake_client_step+0x1ae>
        ssl->session_negotiate->compression != comp ||
 808f7d0:	6883      	ldr	r3, [r0, #8]
 808f7d2:	429e      	cmp	r6, r3
 808f7d4:	f47f acdf 	bne.w	808f196 <mbedtls_ssl_handshake_client_step+0x1ae>
        ssl->session_negotiate->id_len != n ||
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
 808f7d8:	4632      	mov	r2, r6
 808f7da:	4629      	mov	r1, r5
 808f7dc:	300c      	adds	r0, #12
 808f7de:	f002 fda5 	bl	809232c <memcmp>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
        ssl->session_negotiate->compression != comp ||
        ssl->session_negotiate->id_len != n ||
 808f7e2:	2800      	cmp	r0, #0
 808f7e4:	f47f acd7 	bne.w	808f196 <mbedtls_ssl_handshake_client_step+0x1ae>
        ssl->session_negotiate->id_len = n;
        memcpy( ssl->session_negotiate->id, buf + 35, n );
    }
    else
    {
        ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
 808f7e8:	230c      	movs	r3, #12
 808f7ea:	6063      	str	r3, [r4, #4]

        if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 808f7ec:	4620      	mov	r0, r4
 808f7ee:	f7f9 fe2b 	bl	8089448 <mbedtls_ssl_derive_keys>
 808f7f2:	4605      	mov	r5, r0
 808f7f4:	2800      	cmp	r0, #0
 808f7f6:	f43f ace1 	beq.w	808f1bc <mbedtls_ssl_handshake_client_step+0x1d4>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
 808f7fa:	2250      	movs	r2, #80	; 0x50
 808f7fc:	2102      	movs	r1, #2
 808f7fe:	4620      	mov	r0, r4
 808f800:	f7fa f9c2 	bl	8089b88 <mbedtls_ssl_send_alert_message>
 808f804:	e07c      	b.n	808f900 <mbedtls_ssl_handshake_client_step+0x918>
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
            ssl->session_negotiate->ciphersuite )
 808f806:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808f808:	6812      	ldr	r2, [r2, #0]
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
 808f80a:	4290      	cmp	r0, r2
 808f80c:	f47f acdb 	bne.w	808f1c6 <mbedtls_ssl_handshake_client_step+0x1de>
        {
            break;
        }
    }

    suite_info = mbedtls_ssl_ciphersuite_from_id( ssl->session_negotiate->ciphersuite );
 808f810:	f7f6 fcb2 	bl	8086178 <mbedtls_ssl_ciphersuite_from_id>
    if( ssl_validate_ciphersuite( suite_info, ssl, ssl->minor_ver, ssl->minor_ver ) != 0 )
 808f814:	68e3      	ldr	r3, [r4, #12]
static int ssl_validate_ciphersuite( const mbedtls_ssl_ciphersuite_t * suite_info,
                                     const mbedtls_ssl_context * ssl,
                                     int min_minor_ver, int max_minor_ver )
{
    (void) ssl;
    if( suite_info == NULL )
 808f816:	2800      	cmp	r0, #0
 808f818:	f43f acda 	beq.w	808f1d0 <mbedtls_ssl_handshake_client_step+0x1e8>
        return( 1 );

    if( suite_info->min_minor_ver > max_minor_ver ||
 808f81c:	6902      	ldr	r2, [r0, #16]
 808f81e:	429a      	cmp	r2, r3
 808f820:	f73f acd6 	bgt.w	808f1d0 <mbedtls_ssl_handshake_client_step+0x1e8>
 808f824:	6982      	ldr	r2, [r0, #24]
 808f826:	4293      	cmp	r3, r2
 808f828:	f73f acd2 	bgt.w	808f1d0 <mbedtls_ssl_handshake_client_step+0x1e8>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        switch( ext_id )
 808f82c:	f64f 7001 	movw	r0, #65281	; 0xff01
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }
    ssl->session_negotiate->compression = comp;
 808f830:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 808f832:	2200      	movs	r2, #0

    ext = buf + 40 + n;
 808f834:	3628      	adds	r6, #40	; 0x28
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }
    ssl->session_negotiate->compression = comp;
 808f836:	605a      	str	r2, [r3, #4]

    ext = buf + 40 + n;
 808f838:	4446      	add	r6, r8
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    ((void) buf);

    ssl->handshake->new_session_ticket = 1;
 808f83a:	2501      	movs	r5, #1

    ext = buf + 40 + n;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );

    while( ext_len )
 808f83c:	2f00      	cmp	r7, #0
 808f83e:	d03d      	beq.n	808f8bc <mbedtls_ssl_handshake_client_step+0x8d4>
    {
        unsigned int ext_id   = ( ( ext[0] <<  8 )
                                | ( ext[1]       ) );
 808f840:	7873      	ldrb	r3, [r6, #1]
 808f842:	7832      	ldrb	r2, [r6, #0]
        unsigned int ext_size = ( ( ext[2] <<  8 )
                                | ( ext[3]       ) );
 808f844:	78b1      	ldrb	r1, [r6, #2]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );

    while( ext_len )
    {
        unsigned int ext_id   = ( ( ext[0] <<  8 )
                                | ( ext[1]       ) );
 808f846:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
        unsigned int ext_size = ( ( ext[2] <<  8 )
                                | ( ext[3]       ) );
 808f84a:	78f3      	ldrb	r3, [r6, #3]
 808f84c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8

        if( ext_size + 4 > ext_len )
 808f850:	1d19      	adds	r1, r3, #4
 808f852:	428f      	cmp	r7, r1
 808f854:	f4ff ac80 	bcc.w	808f158 <mbedtls_ssl_handshake_client_step+0x170>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        switch( ext_id )
 808f858:	2a23      	cmp	r2, #35	; 0x23
 808f85a:	d01e      	beq.n	808f89a <mbedtls_ssl_handshake_client_step+0x8b2>
 808f85c:	4282      	cmp	r2, r0
 808f85e:	d002      	beq.n	808f866 <mbedtls_ssl_handshake_client_step+0x87e>
 808f860:	2a01      	cmp	r2, #1
 808f862:	d124      	bne.n	808f8ae <mbedtls_ssl_handshake_client_step+0x8c6>
 808f864:	e008      	b.n	808f878 <mbedtls_ssl_handshake_client_step+0x890>
        }
    }
    else
#endif /* MBEDTLS_SSL_RENEGOTIATION */
    {
        if( len != 1 || buf[0] != 0x00 )
 808f866:	2b01      	cmp	r3, #1
 808f868:	d101      	bne.n	808f86e <mbedtls_ssl_handshake_client_step+0x886>
 808f86a:	7932      	ldrb	r2, [r6, #4]
 808f86c:	b10a      	cbz	r2, 808f872 <mbedtls_ssl_handshake_client_step+0x88a>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-zero length renegotiation info" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
 808f86e:	2228      	movs	r2, #40	; 0x28
 808f870:	e4af      	b.n	808f1d2 <mbedtls_ssl_handshake_client_step+0x1ea>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;
 808f872:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
 808f876:	e01a      	b.n	808f8ae <mbedtls_ssl_handshake_client_step+0x8c6>
{
    /*
     * server should use the extension only if we did,
     * and if so the server's value should match ours (and len is always 1)
     */
    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ||
 808f878:	6822      	ldr	r2, [r4, #0]
 808f87a:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 808f87e:	f402 7ee0 	and.w	lr, r2, #448	; 0x1c0
 808f882:	f1be 0f00 	cmp.w	lr, #0
 808f886:	d0f2      	beq.n	808f86e <mbedtls_ssl_handshake_client_step+0x886>
 808f888:	2b01      	cmp	r3, #1
 808f88a:	d1f0      	bne.n	808f86e <mbedtls_ssl_handshake_client_step+0x886>
        len != 1 ||
 808f88c:	f896 e004 	ldrb.w	lr, [r6, #4]
 808f890:	f3c2 1282 	ubfx	r2, r2, #6, #3
 808f894:	4596      	cmp	lr, r2
 808f896:	d00a      	beq.n	808f8ae <mbedtls_ssl_handshake_client_step+0x8c6>
 808f898:	e7e9      	b.n	808f86e <mbedtls_ssl_handshake_client_step+0x886>
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
static int ssl_parse_session_ticket_ext( mbedtls_ssl_context *ssl,
                                         const unsigned char *buf,
                                         size_t len )
{
    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED ||
 808f89a:	6822      	ldr	r2, [r4, #0]
 808f89c:	f892 2061 	ldrb.w	r2, [r2, #97]	; 0x61
 808f8a0:	0792      	lsls	r2, r2, #30
 808f8a2:	d5e4      	bpl.n	808f86e <mbedtls_ssl_handshake_client_step+0x886>
 808f8a4:	2b00      	cmp	r3, #0
 808f8a6:	d1e2      	bne.n	808f86e <mbedtls_ssl_handshake_client_step+0x886>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    ((void) buf);

    ssl->handshake->new_session_ticket = 1;
 808f8a8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 808f8aa:	f8c2 51f4 	str.w	r5, [r2, #500]	; 0x1f4
        default:
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
                           ext_id ) );
        }

        ext_len -= 4 + ext_size;
 808f8ae:	1afb      	subs	r3, r7, r3
 808f8b0:	1f1f      	subs	r7, r3, #4
        ext += 4 + ext_size;

        if( ext_len > 0 && ext_len < 4 )
 808f8b2:	3b05      	subs	r3, #5
 808f8b4:	2b02      	cmp	r3, #2
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
                           ext_id ) );
        }

        ext_len -= 4 + ext_size;
        ext += 4 + ext_size;
 808f8b6:	440e      	add	r6, r1

        if( ext_len > 0 && ext_len < 4 )
 808f8b8:	d8c0      	bhi.n	808f83c <mbedtls_ssl_handshake_client_step+0x854>
 808f8ba:	e48e      	b.n	808f1da <mbedtls_ssl_handshake_client_step+0x1f2>
    }

    /*
     * Renegotiation security checks
     */
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 808f8bc:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 808f8c0:	bb13      	cbnz	r3, 808f908 <mbedtls_ssl_handshake_client_step+0x920>
        ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE )
 808f8c2:	6823      	ldr	r3, [r4, #0]
    }

    /*
     * Renegotiation security checks
     */
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 808f8c4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 808f8c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 808f8cc:	2b20      	cmp	r3, #32
 808f8ce:	d11b      	bne.n	808f908 <mbedtls_ssl_handshake_client_step+0x920>
 808f8d0:	e7cd      	b.n	808f86e <mbedtls_ssl_handshake_client_step+0x886>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    memcpy( ticket, msg + 6, ticket_len );
 808f8d2:	465a      	mov	r2, fp
 808f8d4:	f107 010a 	add.w	r1, r7, #10
 808f8d8:	9004      	str	r0, [sp, #16]
 808f8da:	f002 fd36 	bl	809234a <memcpy>

    ssl->session_negotiate->ticket = ticket;
 808f8de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808f8e0:	9b04      	ldr	r3, [sp, #16]
    ssl->session_negotiate->ticket_len = ticket_len;
    ssl->session_negotiate->ticket_lifetime = lifetime;
 808f8e2:	0436      	lsls	r6, r6, #16
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    memcpy( ticket, msg + 6, ticket_len );

    ssl->session_negotiate->ticket = ticket;
 808f8e4:	6653      	str	r3, [r2, #100]	; 0x64
    ssl->session_negotiate->ticket_len = ticket_len;
 808f8e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ssl->session_negotiate->ticket_lifetime = lifetime;
 808f8e8:	ea46 660a 	orr.w	r6, r6, sl, lsl #24
    }

    memcpy( ticket, msg + 6, ticket_len );

    ssl->session_negotiate->ticket = ticket;
    ssl->session_negotiate->ticket_len = ticket_len;
 808f8ec:	f8c3 b068 	str.w	fp, [r3, #104]	; 0x68
    ssl->session_negotiate->ticket_lifetime = lifetime;
 808f8f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 808f8f2:	ea46 0808 	orr.w	r8, r6, r8
 808f8f6:	ea48 2609 	orr.w	r6, r8, r9, lsl #8
 808f8fa:	66de      	str	r6, [r3, #108]	; 0x6c
     * RFC 5077 section 3.4:
     * "If the client receives a session ticket from the server, then it
     * discards any Session ID that was sent in the ServerHello."
     */
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ticket in use, discarding session id" ) );
    ssl->session_negotiate->id_len = 0;
 808f8fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 808f8fe:	609d      	str	r5, [r3, #8]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse new session ticket" ) );

    return( 0 );
 808f900:	4628      	mov	r0, r5
 808f902:	e096      	b.n	808fa32 <mbedtls_ssl_handshake_client_step+0xa4a>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate request" ) );

    if( ! mbedtls_ssl_ciphersuite_cert_req_allowed( ciphersuite_info ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate request" ) );
        ssl->state++;
 808f904:	2306      	movs	r3, #6
 808f906:	6063      	str	r3, [r4, #4]
        return( 0 );
 808f908:	2000      	movs	r0, #0
 808f90a:	e092      	b.n	808fa32 <mbedtls_ssl_handshake_client_step+0xa4a>
    }

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808f90c:	4620      	mov	r0, r4
 808f90e:	f7fa fb89 	bl	808a024 <mbedtls_ssl_read_record>
 808f912:	2800      	cmp	r0, #0
 808f914:	f040 808d 	bne.w	808fa32 <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 808f918:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808f91a:	2b16      	cmp	r3, #22
 808f91c:	f47f abd9 	bne.w	808f0d2 <mbedtls_ssl_handshake_client_step+0xea>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    ssl->state++;
 808f920:	6863      	ldr	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
 808f922:	6e62      	ldr	r2, [r4, #100]	; 0x64
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    ssl->state++;
 808f924:	3301      	adds	r3, #1
 808f926:	6063      	str	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
 808f928:	7813      	ldrb	r3, [r2, #0]
 808f92a:	2b0d      	cmp	r3, #13
 808f92c:	bf0c      	ite	eq
 808f92e:	2301      	moveq	r3, #1
 808f930:	2300      	movne	r3, #0
 808f932:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "got %s certificate request",
                        ssl->client_auth ? "a" : "no" ) );

    if( ssl->client_auth == 0 )
 808f936:	d002      	beq.n	808f93e <mbedtls_ssl_handshake_client_step+0x956>
    {
        /* Current message is probably the ServerHelloDone */
        ssl->keep_current_message = 1;
 808f938:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 808f93c:	e079      	b.n	808fa32 <mbedtls_ssl_handshake_client_step+0xa4a>
     *  superficially sane.
     */
    buf = ssl->in_msg;

    /* certificate_types */
    if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) )
 808f93e:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 808f940:	2904      	cmp	r1, #4
 808f942:	d806      	bhi.n	808f952 <mbedtls_ssl_handshake_client_step+0x96a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 808f944:	2232      	movs	r2, #50	; 0x32
 808f946:	2102      	movs	r1, #2
 808f948:	4620      	mov	r0, r4
 808f94a:	f7fa f91d 	bl	8089b88 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
 808f94e:	483b      	ldr	r0, [pc, #236]	; (808fa3c <mbedtls_ssl_handshake_client_step+0xa54>)
 808f950:	e06f      	b.n	808fa32 <mbedtls_ssl_handshake_client_step+0xa4a>
    }
    cert_type_len = buf[mbedtls_ssl_hs_hdr_len( ssl )];
 808f952:	7913      	ldrb	r3, [r2, #4]
     * Both reach at most the index:
     *    ...hdr_len + 2 + n,
     * therefore the buffer length at this point must be greater than that
     * regardless of the actual code path.
     */
    if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
 808f954:	1ddd      	adds	r5, r3, #7
 808f956:	42a9      	cmp	r1, r5
 808f958:	d9f4      	bls.n	808f944 <mbedtls_ssl_handshake_client_step+0x95c>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
    }

    /* supported_signature_algorithms */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 808f95a:	68e0      	ldr	r0, [r4, #12]
 808f95c:	2803      	cmp	r0, #3
 808f95e:	d109      	bne.n	808f974 <mbedtls_ssl_handshake_client_step+0x98c>
    {
        size_t sig_alg_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 808f960:	18d6      	adds	r6, r2, r3
                             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
 808f962:	7977      	ldrb	r7, [r6, #5]
 808f964:	79b0      	ldrb	r0, [r6, #6]
 808f966:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
         *     buf[...hdr_len + 3 + n + sig_alg_len - 1 + 1],
         * which reduces to:
         *     buf[...hdr_len + 3 + n + sig_alg_len],
         * which is one less than we need the buf to be.
         */
        if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n + sig_alg_len )
 808f96a:	4405      	add	r5, r0
 808f96c:	42a9      	cmp	r1, r5
 808f96e:	d9e9      	bls.n	808f944 <mbedtls_ssl_handshake_client_step+0x95c>
 808f970:	3302      	adds	r3, #2
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Supported Signature Algorithm found: %d"
                                        ",%d", sig_alg[i], sig_alg[i + 1]  ) );
        }
#endif

        n += 2 + sig_alg_len;
 808f972:	4403      	add	r3, r0
    }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

    /* certificate_authorities */
    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 808f974:	441a      	add	r2, r3
             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );

    n += dn_len;
    if( ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
 808f976:	7950      	ldrb	r0, [r2, #5]
 808f978:	7992      	ldrb	r2, [r2, #6]
 808f97a:	3307      	adds	r3, #7
 808f97c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 808f980:	4413      	add	r3, r2
 808f982:	4299      	cmp	r1, r3
 808f984:	d0c0      	beq.n	808f908 <mbedtls_ssl_handshake_client_step+0x920>
 808f986:	e7dd      	b.n	808f944 <mbedtls_ssl_handshake_client_step+0x95c>
    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 808f988:	2232      	movs	r2, #50	; 0x32
 808f98a:	2102      	movs	r1, #2
 808f98c:	4620      	mov	r0, r4
 808f98e:	f7fa f8fb 	bl	8089b88 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE );
 808f992:	482b      	ldr	r0, [pc, #172]	; (808fa40 <mbedtls_ssl_handshake_client_step+0xa58>)
 808f994:	e04d      	b.n	808fa32 <mbedtls_ssl_handshake_client_step+0xa4a>
    ssl->handshake->pmslen = 48;

    if( ssl->session_negotiate->peer_cert == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 808f996:	482b      	ldr	r0, [pc, #172]	; (808fa44 <mbedtls_ssl_handshake_client_step+0xa5c>)
 808f998:	e04b      	b.n	808fa32 <mbedtls_ssl_handshake_client_step+0xa4a>
     */
    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
                MBEDTLS_PK_RSA ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
 808f99a:	482b      	ldr	r0, [pc, #172]	; (808fa48 <mbedtls_ssl_handshake_client_step+0xa60>)
 808f99c:	e049      	b.n	808fa32 <mbedtls_ssl_handshake_client_step+0xa4a>
        ((void) ciphersuite_info);
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    ssl->out_msglen  = i + n;
 808f99e:	9b08      	ldr	r3, [sp, #32]
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
 808f9a0:	2210      	movs	r2, #16
        ((void) ciphersuite_info);
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    ssl->out_msglen  = i + n;
 808f9a2:	3304      	adds	r3, #4
 808f9a4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 808f9a8:	2316      	movs	r3, #22
 808f9aa:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
 808f9ae:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 808f9b2:	701a      	strb	r2, [r3, #0]

    ssl->state++;
 808f9b4:	6863      	ldr	r3, [r4, #4]
 808f9b6:	3301      	adds	r3, #1
 808f9b8:	6063      	str	r3, [r4, #4]

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 808f9ba:	4620      	mov	r0, r4
 808f9bc:	f7f9 ff30 	bl	8089820 <mbedtls_ssl_write_record>
 808f9c0:	e037      	b.n	808fa32 <mbedtls_ssl_handshake_client_step+0xa4a>
    msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );

    lifetime = ( msg[0] << 24 ) | ( msg[1] << 16 ) |
               ( msg[2] <<  8 ) | ( msg[3]       );

    ticket_len = ( msg[4] << 8 ) | ( msg[5] );
 808f9c2:	7a7a      	ldrb	r2, [r7, #9]
 808f9c4:	f897 b008 	ldrb.w	fp, [r7, #8]
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
    }

    msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );

    lifetime = ( msg[0] << 24 ) | ( msg[1] << 16 ) |
 808f9c8:	f897 a004 	ldrb.w	sl, [r7, #4]
               ( msg[2] <<  8 ) | ( msg[3]       );

    ticket_len = ( msg[4] << 8 ) | ( msg[5] );
 808f9cc:	ea42 2b0b 	orr.w	fp, r2, fp, lsl #8

    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
 808f9d0:	f10b 020a 	add.w	r2, fp, #10
 808f9d4:	4293      	cmp	r3, r2
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
    }

    msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );

    lifetime = ( msg[0] << 24 ) | ( msg[1] << 16 ) |
 808f9d6:	797e      	ldrb	r6, [r7, #5]
               ( msg[2] <<  8 ) | ( msg[3]       );
 808f9d8:	f897 9006 	ldrb.w	r9, [r7, #6]
 808f9dc:	f897 8007 	ldrb.w	r8, [r7, #7]

    ticket_len = ( msg[4] << 8 ) | ( msg[5] );

    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
 808f9e0:	f47f ad40 	bne.w	808f464 <mbedtls_ssl_handshake_client_step+0x47c>
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ticket length: %d", ticket_len ) );

    /* We're not waiting for a NewSessionTicket message any more */
    ssl->handshake->new_session_ticket = 0;
 808f9e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808f9e6:	f8c3 01f4 	str.w	r0, [r3, #500]	; 0x1f4
    ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
 808f9ea:	230c      	movs	r3, #12
 808f9ec:	6063      	str	r3, [r4, #4]

    /*
     * Zero-length ticket means the server changed his mind and doesn't want
     * to send a ticket after all, so just forget it
     */
    if( ticket_len == 0 )
 808f9ee:	f1bb 0f00 	cmp.w	fp, #0
 808f9f2:	d089      	beq.n	808f908 <mbedtls_ssl_handshake_client_step+0x920>
        return( 0 );

    mbedtls_zeroize( ssl->session_negotiate->ticket,
 808f9f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808f9f6:	6e53      	ldr	r3, [r2, #100]	; 0x64
 808f9f8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 808f9fa:	441a      	add	r2, r3
#endif

#if defined(MBEDTLS_SSL_SESSION_TICKETS)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808f9fc:	429a      	cmp	r2, r3
 808f9fe:	d002      	beq.n	808fa06 <mbedtls_ssl_handshake_client_step+0xa1e>
 808fa00:	7018      	strb	r0, [r3, #0]
 808fa02:	3301      	adds	r3, #1
 808fa04:	e7fa      	b.n	808f9fc <mbedtls_ssl_handshake_client_step+0xa14>
    if( ticket_len == 0 )
        return( 0 );

    mbedtls_zeroize( ssl->session_negotiate->ticket,
                      ssl->session_negotiate->ticket_len );
    mbedtls_free( ssl->session_negotiate->ticket );
 808fa06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ssl->session_negotiate->ticket = NULL;
 808fa08:	2500      	movs	r5, #0
    if( ticket_len == 0 )
        return( 0 );

    mbedtls_zeroize( ssl->session_negotiate->ticket,
                      ssl->session_negotiate->ticket_len );
    mbedtls_free( ssl->session_negotiate->ticket );
 808fa0a:	6e58      	ldr	r0, [r3, #100]	; 0x64
 808fa0c:	f000 ff34 	bl	8090878 <free>
    ssl->session_negotiate->ticket = NULL;
 808fa10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ssl->session_negotiate->ticket_len = 0;

    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
 808fa12:	4659      	mov	r1, fp
        return( 0 );

    mbedtls_zeroize( ssl->session_negotiate->ticket,
                      ssl->session_negotiate->ticket_len );
    mbedtls_free( ssl->session_negotiate->ticket );
    ssl->session_negotiate->ticket = NULL;
 808fa14:	665d      	str	r5, [r3, #100]	; 0x64
    ssl->session_negotiate->ticket_len = 0;
 808fa16:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
 808fa18:	2001      	movs	r0, #1

    mbedtls_zeroize( ssl->session_negotiate->ticket,
                      ssl->session_negotiate->ticket_len );
    mbedtls_free( ssl->session_negotiate->ticket );
    ssl->session_negotiate->ticket = NULL;
    ssl->session_negotiate->ticket_len = 0;
 808fa1a:	669d      	str	r5, [r3, #104]	; 0x68

    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
 808fa1c:	f002 fc70 	bl	8092300 <calloc>
 808fa20:	2800      	cmp	r0, #0
 808fa22:	f47f af56 	bne.w	808f8d2 <mbedtls_ssl_handshake_client_step+0x8ea>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ticket alloc failed" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
 808fa26:	2250      	movs	r2, #80	; 0x50
 808fa28:	2102      	movs	r1, #2
 808fa2a:	4620      	mov	r0, r4
 808fa2c:	f7fa f8ac 	bl	8089b88 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 808fa30:	4806      	ldr	r0, [pc, #24]	; (808fa4c <mbedtls_ssl_handshake_client_step+0xa64>)
           MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid state %d", ssl->state ) );
           return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   }

    return( ret );
}
 808fa32:	b015      	add	sp, #84	; 0x54
 808fa34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808fa38:	ffff8f80 	.word	0xffff8f80
 808fa3c:	ffff8580 	.word	0xffff8580
 808fa40:	ffff8480 	.word	0xffff8480
 808fa44:	ffff8900 	.word	0xffff8900
 808fa48:	ffff9300 	.word	0xffff9300
 808fa4c:	ffff8100 	.word	0xffff8100

0808fa50 <_ZN5CryptC1Ev>:
#include "Crypt.h"
#include "application.h"
Crypt::Crypt(){
 808fa50:	b570      	push	{r4, r5, r6, lr}
 808fa52:	4604      	mov	r4, r0
 808fa54:	4b35      	ldr	r3, [pc, #212]	; (808fb2c <_ZN5CryptC1Ev+0xdc>)
 808fa56:	2220      	movs	r2, #32
 808fa58:	6003      	str	r3, [r0, #0]
 808fa5a:	2100      	movs	r1, #0
 808fa5c:	f500 700d 	add.w	r0, r0, #564	; 0x234
 808fa60:	f002 fc99 	bl	8092396 <memset>
 808fa64:	2266      	movs	r2, #102	; 0x66
 808fa66:	f884 2236 	strb.w	r2, [r4, #566]	; 0x236
 808fa6a:	224a      	movs	r2, #74	; 0x4a
 808fa6c:	f884 2237 	strb.w	r2, [r4, #567]	; 0x237
 808fa70:	2201      	movs	r2, #1
 808fa72:	f884 2238 	strb.w	r2, [r4, #568]	; 0x238
 808fa76:	2263      	movs	r2, #99	; 0x63
 808fa78:	f884 2239 	strb.w	r2, [r4, #569]	; 0x239
 808fa7c:	2279      	movs	r2, #121	; 0x79
 808fa7e:	f884 223a 	strb.w	r2, [r4, #570]	; 0x23a
 808fa82:	2262      	movs	r2, #98	; 0x62
 808fa84:	f884 223b 	strb.w	r2, [r4, #571]	; 0x23b
 808fa88:	2224      	movs	r2, #36	; 0x24
 808fa8a:	f884 223d 	strb.w	r2, [r4, #573]	; 0x23d
 808fa8e:	2253      	movs	r2, #83	; 0x53
 808fa90:	f884 223e 	strb.w	r2, [r4, #574]	; 0x23e
 808fa94:	2235      	movs	r2, #53	; 0x35
 808fa96:	230c      	movs	r3, #12
 808fa98:	205b      	movs	r0, #91	; 0x5b
 808fa9a:	f884 223f 	strb.w	r2, [r4, #575]	; 0x23f
 808fa9e:	2202      	movs	r2, #2
 808faa0:	f884 3235 	strb.w	r3, [r4, #565]	; 0x235
 808faa4:	f884 323c 	strb.w	r3, [r4, #572]	; 0x23c
 808faa8:	f884 2240 	strb.w	r2, [r4, #576]	; 0x240
 808faac:	f884 0245 	strb.w	r0, [r4, #581]	; 0x245
 808fab0:	2205      	movs	r2, #5
 808fab2:	2037      	movs	r0, #55	; 0x37
 808fab4:	f884 324e 	strb.w	r3, [r4, #590]	; 0x24e
 808fab8:	232d      	movs	r3, #45	; 0x2d
 808faba:	2143      	movs	r1, #67	; 0x43
 808fabc:	f884 2241 	strb.w	r2, [r4, #577]	; 0x241
 808fac0:	f884 024a 	strb.w	r0, [r4, #586]	; 0x24a
 808fac4:	2222      	movs	r2, #34	; 0x22
 808fac6:	2064      	movs	r0, #100	; 0x64
 808fac8:	f884 324f 	strb.w	r3, [r4, #591]	; 0x24f
 808facc:	231d      	movs	r3, #29
 808face:	f884 1234 	strb.w	r1, [r4, #564]	; 0x234
 808fad2:	f884 2242 	strb.w	r2, [r4, #578]	; 0x242
 808fad6:	f884 1246 	strb.w	r1, [r4, #582]	; 0x246
 808fada:	2265      	movs	r2, #101	; 0x65
 808fadc:	212b      	movs	r1, #43	; 0x2b
 808fade:	f884 024b 	strb.w	r0, [r4, #587]	; 0x24b
 808fae2:	f884 3250 	strb.w	r3, [r4, #592]	; 0x250
 808fae6:	2041      	movs	r0, #65	; 0x41
 808fae8:	4b11      	ldr	r3, [pc, #68]	; (808fb30 <_ZN5CryptC1Ev+0xe0>)
 808faea:	f884 2243 	strb.w	r2, [r4, #579]	; 0x243
 808faee:	f884 1247 	strb.w	r1, [r4, #583]	; 0x247
 808faf2:	2252      	movs	r2, #82	; 0x52
 808faf4:	216e      	movs	r1, #110	; 0x6e
 808faf6:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
 808fafa:	200d      	movs	r0, #13
 808fafc:	f884 2244 	strb.w	r2, [r4, #580]	; 0x244
 808fb00:	f884 1248 	strb.w	r1, [r4, #584]	; 0x248
 808fb04:	f884 024d 	strb.w	r0, [r4, #589]	; 0x24d
 808fb08:	f884 1251 	strb.w	r1, [r4, #593]	; 0x251
 808fb0c:	f884 2252 	strb.w	r2, [r4, #594]	; 0x252
 808fb10:	f504 7519 	add.w	r5, r4, #612	; 0x264
 808fb14:	f103 0610 	add.w	r6, r3, #16
 808fb18:	462a      	mov	r2, r5
 808fb1a:	6818      	ldr	r0, [r3, #0]
 808fb1c:	6859      	ldr	r1, [r3, #4]
 808fb1e:	3308      	adds	r3, #8
 808fb20:	c203      	stmia	r2!, {r0, r1}
 808fb22:	42b3      	cmp	r3, r6
 808fb24:	4615      	mov	r5, r2
 808fb26:	d1f7      	bne.n	808fb18 <_ZN5CryptC1Ev+0xc8>

}
 808fb28:	4620      	mov	r0, r4
 808fb2a:	bd70      	pop	{r4, r5, r6, pc}
 808fb2c:	08094805 	.word	0x08094805
 808fb30:	080947f5 	.word	0x080947f5

0808fb34 <_GLOBAL__sub_I__ZN5CryptC2Ev>:
 808fb34:	f000 bc18 	b.w	8090368 <HAL_Pin_Map>

0808fb38 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 808fb38:	4770      	bx	lr

0808fb3a <_ZN11USARTSerialD0Ev>:
 808fb3a:	b510      	push	{r4, lr}
 808fb3c:	4604      	mov	r4, r0
 808fb3e:	f7f0 fab0 	bl	80800a2 <_ZdlPv>
 808fb42:	4620      	mov	r0, r4
 808fb44:	bd10      	pop	{r4, pc}
	...

0808fb48 <_Z22__fetch_global_Serial5v>:
// instantiate Serial5
static Ring_Buffer serial5_rx_buffer;
static Ring_Buffer serial5_tx_buffer;

USARTSerial& __fetch_global_Serial5()
{
 808fb48:	b510      	push	{r4, lr}
	static USARTSerial serial5(HAL_USART_SERIAL5, &serial5_rx_buffer, &serial5_tx_buffer);
 808fb4a:	4c0c      	ldr	r4, [pc, #48]	; (808fb7c <_Z22__fetch_global_Serial5v+0x34>)
 808fb4c:	6823      	ldr	r3, [r4, #0]
 808fb4e:	07db      	lsls	r3, r3, #31
 808fb50:	d411      	bmi.n	808fb76 <_Z22__fetch_global_Serial5v+0x2e>
 808fb52:	4620      	mov	r0, r4
 808fb54:	f7f0 faa9 	bl	80800aa <__cxa_guard_acquire>
 808fb58:	b168      	cbz	r0, 808fb76 <_Z22__fetch_global_Serial5v+0x2e>
 808fb5a:	4a09      	ldr	r2, [pc, #36]	; (808fb80 <_Z22__fetch_global_Serial5v+0x38>)
 808fb5c:	2104      	movs	r1, #4
 808fb5e:	4b09      	ldr	r3, [pc, #36]	; (808fb84 <_Z22__fetch_global_Serial5v+0x3c>)
 808fb60:	4809      	ldr	r0, [pc, #36]	; (808fb88 <_Z22__fetch_global_Serial5v+0x40>)
 808fb62:	f001 fd33 	bl	80915cc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 808fb66:	4620      	mov	r0, r4
 808fb68:	f7f0 faa4 	bl	80800b4 <__cxa_guard_release>
 808fb6c:	4a07      	ldr	r2, [pc, #28]	; (808fb8c <_Z22__fetch_global_Serial5v+0x44>)
 808fb6e:	4908      	ldr	r1, [pc, #32]	; (808fb90 <_Z22__fetch_global_Serial5v+0x48>)
 808fb70:	4805      	ldr	r0, [pc, #20]	; (808fb88 <_Z22__fetch_global_Serial5v+0x40>)
 808fb72:	f001 fe87 	bl	8091884 <__aeabi_atexit>
	return serial5;
}
 808fb76:	4804      	ldr	r0, [pc, #16]	; (808fb88 <_Z22__fetch_global_Serial5v+0x40>)
 808fb78:	bd10      	pop	{r4, pc}
 808fb7a:	bf00      	nop
 808fb7c:	20002c20 	.word	0x20002c20
 808fb80:	20002c24 	.word	0x20002c24
 808fb84:	20002cbc 	.word	0x20002cbc
 808fb88:	20002ca8 	.word	0x20002ca8
 808fb8c:	200004d0 	.word	0x200004d0
 808fb90:	0808fb39 	.word	0x0808fb39

0808fb94 <_Z15serialEventRun5v>:


void serialEventRun5()
{
 808fb94:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial5, serialEvent5);
 808fb96:	f7ff ffd7 	bl	808fb48 <_Z22__fetch_global_Serial5v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 808fb9a:	4b07      	ldr	r3, [pc, #28]	; (808fbb8 <_Z15serialEventRun5v+0x24>)
 808fb9c:	4604      	mov	r4, r0
 808fb9e:	b153      	cbz	r3, 808fbb6 <_Z15serialEventRun5v+0x22>
 808fba0:	f001 fd33 	bl	809160a <_ZN11USARTSerial9isEnabledEv>
 808fba4:	b138      	cbz	r0, 808fbb6 <_Z15serialEventRun5v+0x22>
 808fba6:	6823      	ldr	r3, [r4, #0]
 808fba8:	4620      	mov	r0, r4
 808fbaa:	691b      	ldr	r3, [r3, #16]
 808fbac:	4798      	blx	r3
 808fbae:	2800      	cmp	r0, #0
 808fbb0:	dd01      	ble.n	808fbb6 <_Z15serialEventRun5v+0x22>
        handler();
 808fbb2:	f3af 8000 	nop.w
 808fbb6:	bd10      	pop	{r4, pc}
 808fbb8:	00000000 	.word	0x00000000

0808fbbc <_Z11clearBufferv>:
#include "CAN.h"
#include "CarT_declerations.h"
#include "Serial5/Serial5.h"


void clearBuffer(){
 808fbbc:	b508      	push	{r3, lr}
    while(Serial5.available())Serial5.read();
 808fbbe:	f7ff ffc3 	bl	808fb48 <_Z22__fetch_global_Serial5v>
 808fbc2:	6803      	ldr	r3, [r0, #0]
 808fbc4:	691b      	ldr	r3, [r3, #16]
 808fbc6:	4798      	blx	r3
 808fbc8:	b128      	cbz	r0, 808fbd6 <_Z11clearBufferv+0x1a>
 808fbca:	f7ff ffbd 	bl	808fb48 <_Z22__fetch_global_Serial5v>
 808fbce:	6803      	ldr	r3, [r0, #0]
 808fbd0:	695b      	ldr	r3, [r3, #20]
 808fbd2:	4798      	blx	r3
 808fbd4:	e7f3      	b.n	808fbbe <_Z11clearBufferv+0x2>
 808fbd6:	bd08      	pop	{r3, pc}

0808fbd8 <_ZN3CANC1Ev>:
}

CAN::CAN() 
{
    //initialization parameters
}
 808fbd8:	4770      	bx	lr
	...

0808fbdc <_ZN3CAN5beginEv>:
int CAN::newData()
{
    return(Serial5.available());
}
void CAN::begin()
{
 808fbdc:	b510      	push	{r4, lr}
    Serial5.begin(9600); 
 808fbde:	f7ff ffb3 	bl	808fb48 <_Z22__fetch_global_Serial5v>
 808fbe2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 808fbe6:	f001 fd0b 	bl	8091600 <_ZN11USARTSerial5beginEm>
    while(!Serial5);
 808fbea:	f7ff ffad 	bl	808fb48 <_Z22__fetch_global_Serial5v>
 808fbee:	f001 fd0a 	bl	8091606 <_ZN11USARTSerialcvbEv>
 808fbf2:	2800      	cmp	r0, #0
 808fbf4:	d0f9      	beq.n	808fbea <_ZN3CAN5beginEv+0xe>
    Serial5.println("ATSH7DF"); //set header for diagnostic message as default
 808fbf6:	f7ff ffa7 	bl	808fb48 <_Z22__fetch_global_Serial5v>
 808fbfa:	490b      	ldr	r1, [pc, #44]	; (808fc28 <_ZN3CAN5beginEv+0x4c>)
 808fbfc:	f001 fa67 	bl	80910ce <_ZN5Print7printlnEPKc>
    Serial5.flush();   
 808fc00:	f7ff ffa2 	bl	808fb48 <_Z22__fetch_global_Serial5v>
 808fc04:	6803      	ldr	r3, [r0, #0]
 808fc06:	69db      	ldr	r3, [r3, #28]
 808fc08:	4798      	blx	r3
    delay(200);
 808fc0a:	20c8      	movs	r0, #200	; 0xc8
 808fc0c:	f001 faa8 	bl	8091160 <delay>
    Serial5.println("ATE0"); //set header for diagnostic message as default
 808fc10:	f7ff ff9a 	bl	808fb48 <_Z22__fetch_global_Serial5v>
 808fc14:	4905      	ldr	r1, [pc, #20]	; (808fc2c <_ZN3CAN5beginEv+0x50>)
 808fc16:	f001 fa5a 	bl	80910ce <_ZN5Print7printlnEPKc>
    Serial5.flush();   
 808fc1a:	f7ff ff95 	bl	808fb48 <_Z22__fetch_global_Serial5v>
    //Serial5.write("atz\r");
    //delay(1200);
    //SetHS();
}
 808fc1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    while(!Serial5);
    Serial5.println("ATSH7DF"); //set header for diagnostic message as default
    Serial5.flush();   
    delay(200);
    Serial5.println("ATE0"); //set header for diagnostic message as default
    Serial5.flush();   
 808fc22:	6803      	ldr	r3, [r0, #0]
 808fc24:	69db      	ldr	r3, [r3, #28]
 808fc26:	4718      	bx	r3
 808fc28:	080924d3 	.word	0x080924d3
 808fc2c:	08094825 	.word	0x08094825

0808fc30 <_ZN3CAN7receiveEPhi>:
}

//insert buffer and size of buffer
//returns buffer with recived can data and the size of the buffer
int CAN::receive(unsigned char* buffer, int number_bytes_to_write)
{
 808fc30:	b570      	push	{r4, r5, r6, lr}
 808fc32:	460e      	mov	r6, r1
    int temp;
    for (int i= 0 ; i < (number_bytes_to_write*2); i++)
 808fc34:	0055      	lsls	r5, r2, #1
 808fc36:	2400      	movs	r4, #0
 808fc38:	42ac      	cmp	r4, r5
 808fc3a:	da0d      	bge.n	808fc58 <_ZN3CAN7receiveEPhi+0x28>
    {
        temp = Serial5.read();
 808fc3c:	f7ff ff84 	bl	808fb48 <_Z22__fetch_global_Serial5v>
 808fc40:	6803      	ldr	r3, [r0, #0]
 808fc42:	695b      	ldr	r3, [r3, #20]
 808fc44:	4798      	blx	r3
        
        //handle spaces in stn uart response
        if(temp == 32){
 808fc46:	2820      	cmp	r0, #32
 808fc48:	d101      	bne.n	808fc4e <_ZN3CAN7receiveEPhi+0x1e>
            i--;         
 808fc4a:	3c01      	subs	r4, #1
 808fc4c:	e002      	b.n	808fc54 <_ZN3CAN7receiveEPhi+0x24>
        } else {
            if(temp != -1){
 808fc4e:	1c43      	adds	r3, r0, #1
                *(buffer+i) = (unsigned char)temp;  //store value in buffer
 808fc50:	bf18      	it	ne
 808fc52:	5530      	strbne	r0, [r6, r4]
//insert buffer and size of buffer
//returns buffer with recived can data and the size of the buffer
int CAN::receive(unsigned char* buffer, int number_bytes_to_write)
{
    int temp;
    for (int i= 0 ; i < (number_bytes_to_write*2); i++)
 808fc54:	3401      	adds	r4, #1
 808fc56:	e7ef      	b.n	808fc38 <_ZN3CAN7receiveEPhi+0x8>
        }
          

    }
    return 1;
}
 808fc58:	2001      	movs	r0, #1
 808fc5a:	bd70      	pop	{r4, r5, r6, pc}

0808fc5c <_ZN3CAN6GetPIDEPPcii>:
    Serial5.flush();

}

int CAN::GetPID(char** pid_requests,int num_requests,int current_record_count)
{
 808fc5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808fc60:	4688      	mov	r8, r1
 808fc62:	4691      	mov	r9, r2
 808fc64:	461c      	mov	r4, r3
	clearBuffer();
 808fc66:	f7ff ffa9 	bl	808fbbc <_Z11clearBufferv>
	{
		char* current_request = pid_requests[i];
		Serial5.println(current_request);
		Serial5.flush();
		delay(50);
		stn->receive(temp_can_buffer[current_record_count],4);
 808fc6a:	4f12      	ldr	r7, [pc, #72]	; (808fcb4 <_ZN3CAN6GetPIDEPPcii+0x58>)
 808fc6c:	f8df a048 	ldr.w	sl, [pc, #72]	; 808fcb8 <_ZN3CAN6GetPIDEPPcii+0x5c>
}

int CAN::GetPID(char** pid_requests,int num_requests,int current_record_count)
{
	clearBuffer();
	for(int i = 0; i < num_requests; i++)
 808fc70:	2500      	movs	r5, #0
 808fc72:	454d      	cmp	r5, r9
 808fc74:	da1a      	bge.n	808fcac <_ZN3CAN6GetPIDEPPcii+0x50>
	{
		char* current_request = pid_requests[i];
 808fc76:	f858 6025 	ldr.w	r6, [r8, r5, lsl #2]
		Serial5.println(current_request);
 808fc7a:	f7ff ff65 	bl	808fb48 <_Z22__fetch_global_Serial5v>
 808fc7e:	4631      	mov	r1, r6
 808fc80:	f001 fa25 	bl	80910ce <_ZN5Print7printlnEPKc>
		Serial5.flush();
 808fc84:	f7ff ff60 	bl	808fb48 <_Z22__fetch_global_Serial5v>
 808fc88:	6803      	ldr	r3, [r0, #0]
		delay(50);
		stn->receive(temp_can_buffer[current_record_count],4);
 808fc8a:	0126      	lsls	r6, r4, #4
	clearBuffer();
	for(int i = 0; i < num_requests; i++)
	{
		char* current_request = pid_requests[i];
		Serial5.println(current_request);
		Serial5.flush();
 808fc8c:	69db      	ldr	r3, [r3, #28]
 808fc8e:	4798      	blx	r3
		delay(50);
 808fc90:	2032      	movs	r0, #50	; 0x32
 808fc92:	f001 fa65 	bl	8091160 <delay>
		stn->receive(temp_can_buffer[current_record_count],4);
 808fc96:	2204      	movs	r2, #4
 808fc98:	19b9      	adds	r1, r7, r6
 808fc9a:	f8da 0000 	ldr.w	r0, [sl]
 808fc9e:	f7ff ffc7 	bl	808fc30 <_ZN3CAN7receiveEPhi>
		if(temp_can_buffer[current_record_count][0] != 0){
 808fca2:	5df3      	ldrb	r3, [r6, r7]
 808fca4:	b103      	cbz	r3, 808fca8 <_ZN3CAN6GetPIDEPPcii+0x4c>
			  current_record_count++;
 808fca6:	3401      	adds	r4, #1
}

int CAN::GetPID(char** pid_requests,int num_requests,int current_record_count)
{
	clearBuffer();
	for(int i = 0; i < num_requests; i++)
 808fca8:	3501      	adds	r5, #1
 808fcaa:	e7e2      	b.n	808fc72 <_ZN3CAN6GetPIDEPPcii+0x16>
		if(temp_can_buffer[current_record_count][0] != 0){
			  current_record_count++;
		}
	}
	return current_record_count;
}
 808fcac:	4620      	mov	r0, r4
 808fcae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808fcb2:	bf00      	nop
 808fcb4:	20002d48 	.word	0x20002d48
 808fcb8:	20003408 	.word	0x20003408

0808fcbc <_GLOBAL__sub_I__Z22__fetch_global_Serial5v>:
 808fcbc:	f000 bb54 	b.w	8090368 <HAL_Pin_Map>

0808fcc0 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 808fcc0:	6803      	ldr	r3, [r0, #0]
 808fcc2:	4718      	bx	r3

0808fcc4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 808fcc4:	2a01      	cmp	r2, #1
 808fcc6:	d002      	beq.n	808fcce <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
 808fcc8:	2a02      	cmp	r2, #2
 808fcca:	d002      	beq.n	808fcd2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
 808fccc:	e004      	b.n	808fcd8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808fcce:	6001      	str	r1, [r0, #0]
	      break;
 808fcd0:	e002      	b.n	808fcd8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 808fcd2:	680b      	ldr	r3, [r1, #0]
 808fcd4:	b100      	cbz	r0, 808fcd8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
 808fcd6:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 808fcd8:	2000      	movs	r0, #0
 808fcda:	4770      	bx	lr

0808fcdc <_Z8callbackPcPhj>:
void releaseMutexs();

// recieve message handler for server_thread
//used for handling all subscription messages
//will be using for updating recv buffer
void callback(char* topic, byte* payload, unsigned int length) {
 808fcdc:	b5b0      	push	{r4, r5, r7, lr}
 808fcde:	4615      	mov	r5, r2
    char p[length + 1];
 808fce0:	f102 0308 	add.w	r3, r2, #8
 808fce4:	f023 0307 	bic.w	r3, r3, #7
void releaseMutexs();

// recieve message handler for server_thread
//used for handling all subscription messages
//will be using for updating recv buffer
void callback(char* topic, byte* payload, unsigned int length) {
 808fce8:	b084      	sub	sp, #16
 808fcea:	af00      	add	r7, sp, #0
    char p[length + 1];
 808fcec:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(p, payload, length);
 808fcf0:	4668      	mov	r0, sp
 808fcf2:	f002 fb2a 	bl	809234a <memcpy>
    p[length] = NULL;
 808fcf6:	2400      	movs	r4, #0
    String message(p);
 808fcf8:	4669      	mov	r1, sp
 808fcfa:	4638      	mov	r0, r7
//used for handling all subscription messages
//will be using for updating recv buffer
void callback(char* topic, byte* payload, unsigned int length) {
    char p[length + 1];
    memcpy(p, payload, length);
    p[length] = NULL;
 808fcfc:	f80d 4005 	strb.w	r4, [sp, r5]
    String message(p);
 808fd00:	f001 f97b 	bl	8090ffa <_ZN6StringC1EPK19__FlashStringHelper>

    if (message.equals("RED"))
 808fd04:	4914      	ldr	r1, [pc, #80]	; (808fd58 <_Z8callbackPcPhj+0x7c>)
 808fd06:	4638      	mov	r0, r7
 808fd08:	f001 f9aa 	bl	8091060 <_ZNK6String6equalsEPKc>
 808fd0c:	4605      	mov	r5, r0
 808fd0e:	b118      	cbz	r0, 808fd18 <_Z8callbackPcPhj+0x3c>
        RGB.color(255, 0, 0);
 808fd10:	4622      	mov	r2, r4
 808fd12:	4621      	mov	r1, r4
 808fd14:	20ff      	movs	r0, #255	; 0xff
 808fd16:	e013      	b.n	808fd40 <_Z8callbackPcPhj+0x64>
    else if (message.equals("GREEN"))
 808fd18:	4910      	ldr	r1, [pc, #64]	; (808fd5c <_Z8callbackPcPhj+0x80>)
 808fd1a:	4638      	mov	r0, r7
 808fd1c:	f001 f9a0 	bl	8091060 <_ZNK6String6equalsEPKc>
 808fd20:	4604      	mov	r4, r0
 808fd22:	b110      	cbz	r0, 808fd2a <_Z8callbackPcPhj+0x4e>
        RGB.color(0, 255, 0);
 808fd24:	462a      	mov	r2, r5
 808fd26:	21ff      	movs	r1, #255	; 0xff
 808fd28:	e009      	b.n	808fd3e <_Z8callbackPcPhj+0x62>
    else if (message.equals("BLUE"))
 808fd2a:	490d      	ldr	r1, [pc, #52]	; (808fd60 <_Z8callbackPcPhj+0x84>)
 808fd2c:	4638      	mov	r0, r7
 808fd2e:	f001 f997 	bl	8091060 <_ZNK6String6equalsEPKc>
        RGB.color(0, 0, 255);
 808fd32:	22ff      	movs	r2, #255	; 0xff

    if (message.equals("RED"))
        RGB.color(255, 0, 0);
    else if (message.equals("GREEN"))
        RGB.color(0, 255, 0);
    else if (message.equals("BLUE"))
 808fd34:	b110      	cbz	r0, 808fd3c <_Z8callbackPcPhj+0x60>
        RGB.color(0, 0, 255);
 808fd36:	4621      	mov	r1, r4
 808fd38:	4620      	mov	r0, r4
 808fd3a:	e001      	b.n	808fd40 <_Z8callbackPcPhj+0x64>
    else
        RGB.color(255, 255, 255);
 808fd3c:	4611      	mov	r1, r2
 808fd3e:	4610      	mov	r0, r2
 808fd40:	f001 fa27 	bl	8091192 <_ZN8RGBClass5colorEiii>
    delay(1000);
 808fd44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808fd48:	f001 fa0a 	bl	8091160 <delay>
//will be using for updating recv buffer
void callback(char* topic, byte* payload, unsigned int length) {
    char p[length + 1];
    memcpy(p, payload, length);
    p[length] = NULL;
    String message(p);
 808fd4c:	4638      	mov	r0, r7
 808fd4e:	f001 f90d 	bl	8090f6c <_ZN6StringD1Ev>
    else if (message.equals("BLUE"))
        RGB.color(0, 0, 255);
    else
        RGB.color(255, 255, 255);
    delay(1000);
}
 808fd52:	3710      	adds	r7, #16
 808fd54:	46bd      	mov	sp, r7
 808fd56:	bdb0      	pop	{r4, r5, r7, pc}
 808fd58:	0809482a 	.word	0x0809482a
 808fd5c:	0809482e 	.word	0x0809482e
 808fd60:	08094834 	.word	0x08094834

0808fd64 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
 808fd64:	b510      	push	{r4, lr}
        Thread* th = (Thread*)param;
        if (th->func_) {
 808fd66:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
 808fd68:	4604      	mov	r4, r0
        Thread* th = (Thread*)param;
        if (th->func_) {
 808fd6a:	b10b      	cbz	r3, 808fd70 <_ZN6Thread3runEPv+0xc>
            (*(th->func_))(th->func_param_);
 808fd6c:	68c0      	ldr	r0, [r0, #12]
 808fd6e:	e006      	b.n	808fd7e <_ZN6Thread3runEPv+0x1a>
        } else if (th->wrapper) {
 808fd70:	6840      	ldr	r0, [r0, #4]
 808fd72:	b128      	cbz	r0, 808fd80 <_ZN6Thread3runEPv+0x1c>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808fd74:	6883      	ldr	r3, [r0, #8]
 808fd76:	b90b      	cbnz	r3, 808fd7c <_ZN6Thread3runEPv+0x18>
	__throw_bad_function_call();
 808fd78:	f001 fd89 	bl	809188e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808fd7c:	68c3      	ldr	r3, [r0, #12]
 808fd7e:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited_ = true;
 808fd80:	2301      	movs	r3, #1
 808fd82:	7423      	strb	r3, [r4, #16]
        os_thread_exit(nullptr);
 808fd84:	2000      	movs	r0, #0
    }
 808fd86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func_))(th->func_param_);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited_ = true;
        os_thread_exit(nullptr);
 808fd8a:	f000 bbc5 	b.w	8090518 <os_thread_exit>
	...

0808fd90 <_Z22server_thread_functionv>:
    releaseMutexs();       
}

//AWS server thread that poles for MQTT requests on different subscribed nodes
//requires cell connection
void server_thread_function(void) {
 808fd90:	b580      	push	{r7, lr}
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 808fd92:	2200      	movs	r2, #0
 808fd94:	4611      	mov	r1, r2
 808fd96:	4610      	mov	r0, r2
 808fd98:	f000 fd56 	bl	8090848 <network_ready>
  
    while(!Cellular.ready());           //wait for cell connection
 808fd9c:	2800      	cmp	r0, #0
 808fd9e:	d0f8      	beq.n	808fd92 <_Z22server_thread_functionv+0x2>
    awsiot->connect("sparkclient");     //setup AWS connection
 808fda0:	4c13      	ldr	r4, [pc, #76]	; (808fdf0 <_Z22server_thread_functionv+0x60>)
 808fda2:	4914      	ldr	r1, [pc, #80]	; (808fdf4 <_Z22server_thread_functionv+0x64>)
 808fda4:	6820      	ldr	r0, [r4, #0]
 808fda6:	f000 f9d9 	bl	809015c <_ZN3AWS7connectEPKc>
	if (awsiot->isConnected()) {
 808fdaa:	6820      	ldr	r0, [r4, #0]
 808fdac:	f000 f9ce 	bl	809014c <_ZN3AWS11isConnectedEv>
 808fdb0:	b140      	cbz	r0, 808fdc4 <_Z22server_thread_functionv+0x34>
		awsiot->publish("outTopic/message", "hello world"); //send hello world confirmation
 808fdb2:	4911      	ldr	r1, [pc, #68]	; (808fdf8 <_Z22server_thread_functionv+0x68>)
 808fdb4:	4a11      	ldr	r2, [pc, #68]	; (808fdfc <_Z22server_thread_functionv+0x6c>)
 808fdb6:	6820      	ldr	r0, [r4, #0]
 808fdb8:	f000 f9ca 	bl	8090150 <_ZN3AWS7publishEPKcS1_>
		awsiot->subscribe("inTopic/message");               //subscribe to topic to recv messages
 808fdbc:	4910      	ldr	r1, [pc, #64]	; (808fe00 <_Z22server_thread_functionv+0x70>)
 808fdbe:	6820      	ldr	r0, [r4, #0]
 808fdc0:	f000 f9c8 	bl	8090154 <_ZN3AWS9subscribeEPKc>
	}

	while(true) { 
        //check for any new recieve messages      
        os_mutex_lock(mqtt_mutex);                 //grab lock    
 808fdc4:	4d0f      	ldr	r5, [pc, #60]	; (808fe04 <_Z22server_thread_functionv+0x74>)
        if (awsiot->isConnected()) {               //check for connection     
 808fdc6:	4f0a      	ldr	r7, [pc, #40]	; (808fdf0 <_Z22server_thread_functionv+0x60>)
 808fdc8:	462e      	mov	r6, r5
		awsiot->subscribe("inTopic/message");               //subscribe to topic to recv messages
	}

	while(true) { 
        //check for any new recieve messages      
        os_mutex_lock(mqtt_mutex);                 //grab lock    
 808fdca:	6828      	ldr	r0, [r5, #0]
 808fdcc:	f000 fb8c 	bl	80904e8 <os_mutex_lock>
        if (awsiot->isConnected()) {               //check for connection     
 808fdd0:	6820      	ldr	r0, [r4, #0]
 808fdd2:	f000 f9bb 	bl	809014c <_ZN3AWS11isConnectedEv>
 808fdd6:	b110      	cbz	r0, 808fdde <_Z22server_thread_functionv+0x4e>
            awsiot->loop();                        //look for any received messages
 808fdd8:	6838      	ldr	r0, [r7, #0]
 808fdda:	f000 f9bd 	bl	8090158 <_ZN3AWS4loopEv>
        }
        os_mutex_unlock(mqtt_mutex);               //release lock
 808fdde:	6830      	ldr	r0, [r6, #0]
 808fde0:	f000 fb92 	bl	8090508 <os_mutex_unlock>

        os_thread_delay_until(&lastThreadTime, 10);     //delay thread
 808fde4:	210a      	movs	r1, #10
 808fde6:	4808      	ldr	r0, [pc, #32]	; (808fe08 <_Z22server_thread_functionv+0x78>)
 808fde8:	f000 fb6e 	bl	80904c8 <os_thread_delay_until>
	if (awsiot->isConnected()) {
		awsiot->publish("outTopic/message", "hello world"); //send hello world confirmation
		awsiot->subscribe("inTopic/message");               //subscribe to topic to recv messages
	}

	while(true) { 
 808fdec:	e7ed      	b.n	808fdca <_Z22server_thread_functionv+0x3a>
 808fdee:	bf00      	nop
 808fdf0:	2000340c 	.word	0x2000340c
 808fdf4:	08094839 	.word	0x08094839
 808fdf8:	08094851 	.word	0x08094851
 808fdfc:	08094845 	.word	0x08094845
 808fe00:	08094862 	.word	0x08094862
 808fe04:	20002d40 	.word	0x20002d40
 808fe08:	20003410 	.word	0x20003410

0808fe0c <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 808fe0c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 808fe0e:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 808fe10:	4604      	mov	r4, r0
    {
      if (_M_manager)
 808fe12:	b113      	cbz	r3, 808fe1a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 808fe14:	2203      	movs	r2, #3
 808fe16:	4601      	mov	r1, r0
 808fe18:	4798      	blx	r3
    }
 808fe1a:	4620      	mov	r0, r4
 808fe1c:	bd10      	pop	{r4, pc}

0808fe1e <_ZN6ThreadD1Ev>:
            wrapper = new wiring_thread_fn_t(function);
            os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
        }
    }

    ~Thread()
 808fe1e:	b538      	push	{r3, r4, r5, lr}
 808fe20:	4604      	mov	r4, r0
 808fe22:	6800      	ldr	r0, [r0, #0]
        dispose();
    }

    void dispose()
    {
        if (!is_valid())
 808fe24:	b1a8      	cbz	r0, 808fe52 <_ZN6ThreadD1Ev+0x34>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
 808fe26:	f000 fb37 	bl	8090498 <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
 808fe2a:	b990      	cbnz	r0, 808fe52 <_ZN6ThreadD1Ev+0x34>
            return;

        if (!exited_) {
 808fe2c:	7c23      	ldrb	r3, [r4, #16]
 808fe2e:	b91b      	cbnz	r3, 808fe38 <_ZN6ThreadD1Ev+0x1a>
 808fe30:	6820      	ldr	r0, [r4, #0]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
 808fe32:	b108      	cbz	r0, 808fe38 <_ZN6ThreadD1Ev+0x1a>
 808fe34:	f000 fb38 	bl	80904a8 <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
 808fe38:	6865      	ldr	r5, [r4, #4]
 808fe3a:	b13d      	cbz	r5, 808fe4c <_ZN6ThreadD1Ev+0x2e>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808fe3c:	4628      	mov	r0, r5
 808fe3e:	f7ff ffe5 	bl	808fe0c <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
 808fe42:	4628      	mov	r0, r5
 808fe44:	f7f0 f92d 	bl	80800a2 <_ZdlPv>
            wrapper = NULL;
 808fe48:	2300      	movs	r3, #0
 808fe4a:	6063      	str	r3, [r4, #4]
        }

        os_thread_cleanup(handle);
 808fe4c:	6820      	ldr	r0, [r4, #0]
 808fe4e:	f000 fb33 	bl	80904b8 <os_thread_cleanup>
    }

    ~Thread()
    {
        dispose();
    }
 808fe52:	4620      	mov	r0, r4
 808fe54:	bd38      	pop	{r3, r4, r5, pc}
	...

0808fe58 <_Z12createMutexsv>:

        os_thread_delay_until(&lastThreadTime, 10);     //delay thread
	} 
}

void createMutexs(){
 808fe58:	b508      	push	{r3, lr}

     // Create mutexs
    os_mutex_create(&mqtt_mutex);
 808fe5a:	4805      	ldr	r0, [pc, #20]	; (808fe70 <_Z12createMutexsv+0x18>)
 808fe5c:	f000 fb3c 	bl	80904d8 <os_mutex_create>
	os_mutex_create(&mqtt_recv_mutex);
 808fe60:	4804      	ldr	r0, [pc, #16]	; (808fe74 <_Z12createMutexsv+0x1c>)
 808fe62:	f000 fb39 	bl	80904d8 <os_mutex_create>
    //os_mutex_create(&gps_recv_mutex);
    //os_mutex_create(&dof_recv_mutex);

    //os_mutex_create(&startup_internal_mutex);
    //os_mutex_create(&startup_can_mutex);
}
 808fe66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void createMutexs(){

     // Create mutexs
    os_mutex_create(&mqtt_mutex);
	os_mutex_create(&mqtt_recv_mutex);
    os_mutex_create(&mqtt_send_mutex);
 808fe6a:	4803      	ldr	r0, [pc, #12]	; (808fe78 <_Z12createMutexsv+0x20>)
 808fe6c:	f000 bb34 	b.w	80904d8 <os_mutex_create>
 808fe70:	20002d40 	.word	0x20002d40
 808fe74:	20002d44 	.word	0x20002d44
 808fe78:	2000338c 	.word	0x2000338c

0808fe7c <_Z10lockMutexsv>:
    //os_mutex_create(&dof_recv_mutex);

    //os_mutex_create(&startup_internal_mutex);
    //os_mutex_create(&startup_can_mutex);
}
void lockMutexs(){
 808fe7c:	b508      	push	{r3, lr}

    //lock mutex
    os_mutex_lock(mqtt_mutex);
 808fe7e:	4b07      	ldr	r3, [pc, #28]	; (808fe9c <_Z10lockMutexsv+0x20>)
 808fe80:	6818      	ldr	r0, [r3, #0]
 808fe82:	f000 fb31 	bl	80904e8 <os_mutex_lock>
	os_mutex_lock(mqtt_recv_mutex);
 808fe86:	4b06      	ldr	r3, [pc, #24]	; (808fea0 <_Z10lockMutexsv+0x24>)
 808fe88:	6818      	ldr	r0, [r3, #0]
 808fe8a:	f000 fb2d 	bl	80904e8 <os_mutex_lock>
    os_mutex_lock(mqtt_send_mutex);
 808fe8e:	4b05      	ldr	r3, [pc, #20]	; (808fea4 <_Z10lockMutexsv+0x28>)
 808fe90:	6818      	ldr	r0, [r3, #0]

    //os_mutex_lock(startup_internal_mutex);
    //os_mutex_lock(startup_can_mutex);


}
 808fe92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void lockMutexs(){

    //lock mutex
    os_mutex_lock(mqtt_mutex);
	os_mutex_lock(mqtt_recv_mutex);
    os_mutex_lock(mqtt_send_mutex);
 808fe96:	f000 bb27 	b.w	80904e8 <os_mutex_lock>
 808fe9a:	bf00      	nop
 808fe9c:	20002d40 	.word	0x20002d40
 808fea0:	20002d44 	.word	0x20002d44
 808fea4:	2000338c 	.word	0x2000338c

0808fea8 <_Z13releaseMutexsv>:
    //os_mutex_lock(startup_internal_mutex);
    //os_mutex_lock(startup_can_mutex);


}
void releaseMutexs(){
 808fea8:	b508      	push	{r3, lr}
    //unlock mutex
    os_mutex_unlock(mqtt_mutex);
 808feaa:	4b07      	ldr	r3, [pc, #28]	; (808fec8 <_Z13releaseMutexsv+0x20>)
 808feac:	6818      	ldr	r0, [r3, #0]
 808feae:	f000 fb2b 	bl	8090508 <os_mutex_unlock>
	os_mutex_unlock(mqtt_recv_mutex);
 808feb2:	4b06      	ldr	r3, [pc, #24]	; (808fecc <_Z13releaseMutexsv+0x24>)
 808feb4:	6818      	ldr	r0, [r3, #0]
 808feb6:	f000 fb27 	bl	8090508 <os_mutex_unlock>
    os_mutex_unlock(mqtt_send_mutex);
 808feba:	4b05      	ldr	r3, [pc, #20]	; (808fed0 <_Z13releaseMutexsv+0x28>)
 808febc:	6818      	ldr	r0, [r3, #0]
    //os_mutex_unlock(dof_recv_mutex);

    //os_mutex_unlock(startup_internal_mutex);
    //os_mutex_unlock(startup_can_mutex);
    //startup complete          
}
 808febe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}
void releaseMutexs(){
    //unlock mutex
    os_mutex_unlock(mqtt_mutex);
	os_mutex_unlock(mqtt_recv_mutex);
    os_mutex_unlock(mqtt_send_mutex);
 808fec2:	f000 bb21 	b.w	8090508 <os_mutex_unlock>
 808fec6:	bf00      	nop
 808fec8:	20002d40 	.word	0x20002d40
 808fecc:	20002d44 	.word	0x20002d44
 808fed0:	2000338c 	.word	0x2000338c

0808fed4 <_Z16startup_functionv>:
    delay(1000);
}

//use for thread setup
//use for connection setup
void startup_function() {
 808fed4:	b508      	push	{r3, lr}

    createMutexs();
 808fed6:	f7ff ffbf 	bl	808fe58 <_Z12createMutexsv>
    lockMutexs();
 808feda:	f7ff ffcf 	bl	808fe7c <_Z10lockMutexsv>

    //setup Cellular
#if CELLULAR
    cellular_credentials_set("wireless.twilio.com", "", "", NULL);  //setup to work twilio sim
 808fede:	4a10      	ldr	r2, [pc, #64]	; (808ff20 <_Z16startup_functionv+0x4c>)
 808fee0:	2300      	movs	r3, #0
 808fee2:	4611      	mov	r1, r2
 808fee4:	480f      	ldr	r0, [pc, #60]	; (808ff24 <_Z16startup_functionv+0x50>)
 808fee6:	f000 fbff 	bl	80906e8 <cellular_credentials_set>

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 808feea:	2300      	movs	r3, #0
 808feec:	461a      	mov	r2, r3
 808feee:	4619      	mov	r1, r3
 808fef0:	4618      	mov	r0, r3
 808fef2:	f000 fcb1 	bl	8090858 <network_on>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 808fef6:	2300      	movs	r3, #0
 808fef8:	461a      	mov	r2, r3
 808fefa:	4619      	mov	r1, r3
 808fefc:	4618      	mov	r0, r3
 808fefe:	f000 fc9b 	bl	8090838 <network_connect>
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 808ff02:	2200      	movs	r2, #0
 808ff04:	4611      	mov	r1, r2
 808ff06:	4610      	mov	r0, r2
 808ff08:	f000 fc9e 	bl	8090848 <network_ready>
    Cellular.on();                                                  //turn on celluar modem
    Cellular.connect();                                             //connect using twillio
    while(!Cellular.ready());                                       //wait until connected
 808ff0c:	2800      	cmp	r0, #0
 808ff0e:	d0f8      	beq.n	808ff02 <_Z16startup_functionv+0x2e>
#endif
    RGB.control(true);
 808ff10:	2001      	movs	r0, #1
 808ff12:	f001 f92e 	bl	8091172 <_ZN8RGBClass7controlEb>

    releaseMutexs();       
}
 808ff16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Cellular.connect();                                             //connect using twillio
    while(!Cellular.ready());                                       //wait until connected
#endif
    RGB.control(true);

    releaseMutexs();       
 808ff1a:	f7ff bfc5 	b.w	808fea8 <_Z13releaseMutexsv>
 808ff1e:	bf00      	nop
 808ff20:	08092be8 	.word	0x08092be8
 808ff24:	08094872 	.word	0x08094872

0808ff28 <_Z12CAN_functionPPciRi>:
    temp_dof_buffer[record_num][6] = dof->MX;
    temp_dof_buffer[record_num][7] = dof->MY;
    temp_dof_buffer[record_num][8] = dof->MZ;
}

void CAN_function(char** pid_list,int num_pids,int& can_records){
 808ff28:	b510      	push	{r4, lr}
 808ff2a:	4614      	mov	r4, r2
	can_records = stn->GetPID(pid_list,num_pids,can_records);
 808ff2c:	6813      	ldr	r3, [r2, #0]
 808ff2e:	460a      	mov	r2, r1
 808ff30:	4601      	mov	r1, r0
 808ff32:	4803      	ldr	r0, [pc, #12]	; (808ff40 <_Z12CAN_functionPPciRi+0x18>)
 808ff34:	6800      	ldr	r0, [r0, #0]
 808ff36:	f7ff fe91 	bl	808fc5c <_ZN3CAN6GetPIDEPPcii>
 808ff3a:	6020      	str	r0, [r4, #0]
 808ff3c:	bd10      	pop	{r4, pc}
 808ff3e:	bf00      	nop
 808ff40:	20003408 	.word	0x20003408

0808ff44 <_GLOBAL__sub_I_lastThreadTime>:
* Example private method
*/
void CarT::doit()
{
    Serial.println("called doit");
}
 808ff44:	b570      	push	{r4, r5, r6, lr}
 808ff46:	b086      	sub	sp, #24
 808ff48:	f000 fa0e 	bl	8090368 <HAL_Pin_Map>
os_mutex_t dof_recv_mutex;

os_mutex_t startup_internal_mutex;
os_mutex_t startup_can_mutex;
*/
Adafruit_GPS gps = Adafruit_GPS(&Serial1);
 808ff4c:	f001 fb60 	bl	8091610 <_Z22__fetch_global_Serial1v>
 808ff50:	4601      	mov	r1, r0
 808ff52:	4834      	ldr	r0, [pc, #208]	; (8090024 <_GLOBAL__sub_I_lastThreadTime+0xe0>)
 808ff54:	f7f0 fa1c 	bl	8080390 <_ZN12Adafruit_GPSC1EP11USARTSerial>
CAN* stn = new CAN();
 808ff58:	2001      	movs	r0, #1
 808ff5a:	f7f0 f89e 	bl	808009a <_Znwj>
 808ff5e:	4604      	mov	r4, r0
 808ff60:	b108      	cbz	r0, 808ff66 <_GLOBAL__sub_I_lastThreadTime+0x22>
 808ff62:	f7ff fe39 	bl	808fbd8 <_ZN3CANC1Ev>
 808ff66:	4b30      	ldr	r3, [pc, #192]	; (8090028 <_GLOBAL__sub_I_lastThreadTime+0xe4>)
DOF* dof = new DOF();
 808ff68:	20b8      	movs	r0, #184	; 0xb8

os_mutex_t startup_internal_mutex;
os_mutex_t startup_can_mutex;
*/
Adafruit_GPS gps = Adafruit_GPS(&Serial1);
CAN* stn = new CAN();
 808ff6a:	601c      	str	r4, [r3, #0]
DOF* dof = new DOF();
 808ff6c:	f7f0 f895 	bl	808009a <_Znwj>
 808ff70:	4604      	mov	r4, r0
 808ff72:	b108      	cbz	r0, 808ff78 <_GLOBAL__sub_I_lastThreadTime+0x34>
 808ff74:	f000 f9d9 	bl	809032a <_ZN3DOFC1Ev>
 808ff78:	4b2c      	ldr	r3, [pc, #176]	; (809002c <_GLOBAL__sub_I_lastThreadTime+0xe8>)
SD* sd_storage = new SD();
 808ff7a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
os_mutex_t startup_internal_mutex;
os_mutex_t startup_can_mutex;
*/
Adafruit_GPS gps = Adafruit_GPS(&Serial1);
CAN* stn = new CAN();
DOF* dof = new DOF();
 808ff7e:	601c      	str	r4, [r3, #0]
SD* sd_storage = new SD();
 808ff80:	f7f0 f88b 	bl	808009a <_Znwj>
 808ff84:	4604      	mov	r4, r0
 808ff86:	b108      	cbz	r0, 808ff8c <_GLOBAL__sub_I_lastThreadTime+0x48>
 808ff88:	f000 f8ba 	bl	8090100 <_ZN2SDC1Ev>
 808ff8c:	4b28      	ldr	r3, [pc, #160]	; (8090030 <_GLOBAL__sub_I_lastThreadTime+0xec>)
Crypt* secretStuff = new Crypt();
 808ff8e:	f44f 701d 	mov.w	r0, #628	; 0x274
os_mutex_t startup_can_mutex;
*/
Adafruit_GPS gps = Adafruit_GPS(&Serial1);
CAN* stn = new CAN();
DOF* dof = new DOF();
SD* sd_storage = new SD();
 808ff92:	601c      	str	r4, [r3, #0]
Crypt* secretStuff = new Crypt();
 808ff94:	f7f0 f881 	bl	808009a <_Znwj>
 808ff98:	4604      	mov	r4, r0
 808ff9a:	b108      	cbz	r0, 808ffa0 <_GLOBAL__sub_I_lastThreadTime+0x5c>
 808ff9c:	f7ff fd58 	bl	808fa50 <_ZN5CryptC1Ev>
 808ffa0:	4b24      	ldr	r3, [pc, #144]	; (8090034 <_GLOBAL__sub_I_lastThreadTime+0xf0>)
AWS* awsiot = new AWS("a3mb0mz6legbs8.iot.us-east-2.amazonaws.com", 8883, callback);
 808ffa2:	f640 2098 	movw	r0, #2712	; 0xa98
*/
Adafruit_GPS gps = Adafruit_GPS(&Serial1);
CAN* stn = new CAN();
DOF* dof = new DOF();
SD* sd_storage = new SD();
Crypt* secretStuff = new Crypt();
 808ffa6:	601c      	str	r4, [r3, #0]
AWS* awsiot = new AWS("a3mb0mz6legbs8.iot.us-east-2.amazonaws.com", 8883, callback);
 808ffa8:	f7f0 f877 	bl	808009a <_Znwj>
 808ffac:	4604      	mov	r4, r0
 808ffae:	b128      	cbz	r0, 808ffbc <_GLOBAL__sub_I_lastThreadTime+0x78>
 808ffb0:	4b21      	ldr	r3, [pc, #132]	; (8090038 <_GLOBAL__sub_I_lastThreadTime+0xf4>)
 808ffb2:	f242 22b3 	movw	r2, #8883	; 0x22b3
 808ffb6:	4921      	ldr	r1, [pc, #132]	; (809003c <_GLOBAL__sub_I_lastThreadTime+0xf8>)
 808ffb8:	f000 f9a8 	bl	809030c <_ZN3AWSC1EPctPFvS0_PhjE>
 808ffbc:	4b20      	ldr	r3, [pc, #128]	; (8090040 <_GLOBAL__sub_I_lastThreadTime+0xfc>)
        os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
    }

    Thread(const char *name, wiring_thread_fn_t function,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : handle(OS_THREAD_INVALID_HANDLE), wrapper(NULL)
 808ffbe:	2500      	movs	r5, #0
 808ffc0:	601c      	str	r4, [r3, #0]
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 808ffc2:	4b20      	ldr	r3, [pc, #128]	; (8090044 <_GLOBAL__sub_I_lastThreadTime+0x100>)
 808ffc4:	4c20      	ldr	r4, [pc, #128]	; (8090048 <_GLOBAL__sub_I_lastThreadTime+0x104>)
 808ffc6:	9302      	str	r3, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808ffc8:	4b20      	ldr	r3, [pc, #128]	; (809004c <_GLOBAL__sub_I_lastThreadTime+0x108>)
    {
        if(function) {
            wrapper = new wiring_thread_fn_t(function);
 808ffca:	2010      	movs	r0, #16
 808ffcc:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 808ffce:	4b20      	ldr	r3, [pc, #128]	; (8090050 <_GLOBAL__sub_I_lastThreadTime+0x10c>)
        os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
    }

    Thread(const char *name, wiring_thread_fn_t function,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : handle(OS_THREAD_INVALID_HANDLE), wrapper(NULL)
 808ffd0:	6025      	str	r5, [r4, #0]
 808ffd2:	9304      	str	r3, [sp, #16]
 808ffd4:	6065      	str	r5, [r4, #4]
 808ffd6:	60a5      	str	r5, [r4, #8]
 808ffd8:	60e5      	str	r5, [r4, #12]
 808ffda:	7425      	strb	r5, [r4, #16]
    {
        if(function) {
            wrapper = new wiring_thread_fn_t(function);
 808ffdc:	f7f0 f85d 	bl	808009a <_Znwj>
 808ffe0:	4606      	mov	r6, r0
 808ffe2:	b148      	cbz	r0, 808fff8 <_GLOBAL__sub_I_lastThreadTime+0xb4>
 808ffe4:	9b04      	ldr	r3, [sp, #16]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808ffe6:	6085      	str	r5, [r0, #8]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 808ffe8:	b133      	cbz	r3, 808fff8 <_GLOBAL__sub_I_lastThreadTime+0xb4>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808ffea:	2202      	movs	r2, #2
 808ffec:	a902      	add	r1, sp, #8
 808ffee:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808fff0:	9b05      	ldr	r3, [sp, #20]
 808fff2:	60f3      	str	r3, [r6, #12]
	  _M_manager = __x._M_manager;
 808fff4:	9b04      	ldr	r3, [sp, #16]
 808fff6:	60b3      	str	r3, [r6, #8]
            os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
 808fff8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    Thread(const char *name, wiring_thread_fn_t function,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : handle(OS_THREAD_INVALID_HANDLE), wrapper(NULL)
    {
        if(function) {
            wrapper = new wiring_thread_fn_t(function);
 808fffc:	6066      	str	r6, [r4, #4]
            os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
 808fffe:	2202      	movs	r2, #2
 8090000:	9301      	str	r3, [sp, #4]
 8090002:	4914      	ldr	r1, [pc, #80]	; (8090054 <_GLOBAL__sub_I_lastThreadTime+0x110>)
 8090004:	4b14      	ldr	r3, [pc, #80]	; (8090058 <_GLOBAL__sub_I_lastThreadTime+0x114>)
 8090006:	9400      	str	r4, [sp, #0]
 8090008:	480f      	ldr	r0, [pc, #60]	; (8090048 <_GLOBAL__sub_I_lastThreadTime+0x104>)
 809000a:	f000 fa3d 	bl	8090488 <os_thread_create>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 809000e:	a802      	add	r0, sp, #8
 8090010:	f7ff fefc 	bl	808fe0c <_ZNSt14_Function_baseD1Ev>

//setup threads
#if MQTT_STATUS
Thread server_thread("server_thread", server_thread_function, 2,3*1024);
 8090014:	4a11      	ldr	r2, [pc, #68]	; (809005c <_GLOBAL__sub_I_lastThreadTime+0x118>)
 8090016:	4912      	ldr	r1, [pc, #72]	; (8090060 <_GLOBAL__sub_I_lastThreadTime+0x11c>)
 8090018:	480b      	ldr	r0, [pc, #44]	; (8090048 <_GLOBAL__sub_I_lastThreadTime+0x104>)
 809001a:	f001 fc33 	bl	8091884 <__aeabi_atexit>
* Example private method
*/
void CarT::doit()
{
    Serial.println("called doit");
}
 809001e:	b006      	add	sp, #24
 8090020:	bd70      	pop	{r4, r5, r6, pc}
 8090022:	bf00      	nop
 8090024:	20003394 	.word	0x20003394
 8090028:	20003408 	.word	0x20003408
 809002c:	20003390 	.word	0x20003390
 8090030:	200033ec 	.word	0x200033ec
 8090034:	200033e4 	.word	0x200033e4
 8090038:	0808fcdd 	.word	0x0808fcdd
 809003c:	080948ae 	.word	0x080948ae
 8090040:	2000340c 	.word	0x2000340c
 8090044:	0808fd91 	.word	0x0808fd91
 8090048:	200033f4 	.word	0x200033f4
 809004c:	0808fcc1 	.word	0x0808fcc1
 8090050:	0808fcc5 	.word	0x0808fcc5
 8090054:	080948d9 	.word	0x080948d9
 8090058:	0808fd65 	.word	0x0808fd65
 809005c:	200004d0 	.word	0x200004d0
 8090060:	0808fe1f 	.word	0x0808fe1f

08090064 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
 8090064:	7c03      	ldrb	r3, [r0, #16]
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
 8090066:	4602      	mov	r2, r0
 8090068:	f003 0308 	and.w	r3, r3, #8
 809006c:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8090070:	b12b      	cbz	r3, 809007e <_ZN4File9availableEv+0x1a>
 8090072:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8090074:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
 8090076:	1a18      	subs	r0, r3, r0
 8090078:	bf48      	it	mi
 809007a:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
 809007e:	4770      	bx	lr

08090080 <_ZN4FileD1Ev>:
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
#if ARDUINO_FILE_USES_STREAM
class File : public FatFile, public Stream {
 8090080:	4770      	bx	lr

08090082 <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
 8090082:	3010      	adds	r0, #16
 8090084:	f7f1 b824 	b.w	80810d0 <_ZN7FatFile4syncEv>

08090088 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
 8090088:	3010      	adds	r0, #16
 809008a:	f7f0 bfc4 	b.w	8081016 <_ZN7FatFile4peekEv>

0809008e <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 809008e:	3010      	adds	r0, #16
 8090090:	f7f1 b854 	b.w	808113c <_ZN7FatFile5writeEPKvj>

08090094 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
 8090094:	b507      	push	{r0, r1, r2, lr}
 8090096:	ab02      	add	r3, sp, #8
 8090098:	f803 1d01 	strb.w	r1, [r3, #-1]!
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 809009c:	2201      	movs	r2, #1
 809009e:	4619      	mov	r1, r3
 80900a0:	3010      	adds	r0, #16
 80900a2:	f7f1 f84b 	bl	808113c <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
 80900a6:	b003      	add	sp, #12
 80900a8:	f85d fb04 	ldr.w	pc, [sp], #4

080900ac <_ZN4FileD0Ev>:
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
#if ARDUINO_FILE_USES_STREAM
class File : public FatFile, public Stream {
 80900ac:	b510      	push	{r4, lr}
 80900ae:	4604      	mov	r4, r0
 80900b0:	f7ef fff7 	bl	80800a2 <_ZdlPv>
 80900b4:	4620      	mov	r0, r4
 80900b6:	bd10      	pop	{r4, pc}

080900b8 <_ZN9SdFatBase11writeBlocksEmPKhj>:
  }
  bool readBlocks(uint32_t block, uint8_t* dst, size_t n) {
    return m_sdCard.readBlocks(block, dst, n);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t n) {
    return m_sdCard.writeBlocks(block, src, n);
 80900b8:	f200 4064 	addw	r0, r0, #1124	; 0x464
 80900bc:	f7f0 be17 	b.w	8080cee <_ZN9SdSpiCard11writeBlocksEmPKhj>

080900c0 <_ZN9SdFatBase10readBlocksEmPhj>:
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_sdCard.writeBlock(block, src);
  }
  bool readBlocks(uint32_t block, uint8_t* dst, size_t n) {
    return m_sdCard.readBlocks(block, dst, n);
 80900c0:	f200 4064 	addw	r0, r0, #1124	; 0x464
 80900c4:	f7f0 bd4b 	b.w	8080b5e <_ZN9SdSpiCard10readBlocksEmPhj>

080900c8 <_ZN9SdFatBase10writeBlockEmPKh>:

  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_sdCard.readBlock(block, dst);
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_sdCard.writeBlock(block, src);
 80900c8:	f200 4064 	addw	r0, r0, #1124	; 0x464
 80900cc:	f7f0 bd8a 	b.w	8080be4 <_ZN9SdSpiCard10writeBlockEmPKh>

080900d0 <_ZN9SdFatBase9readBlockEmPh>:
#endif  // defined(ARDUINO) || defined(DOXYGEN)

 private:

  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_sdCard.readBlock(block, dst);
 80900d0:	f200 4064 	addw	r0, r0, #1124	; 0x464
 80900d4:	f7f0 bcfb 	b.w	8080ace <_ZN9SdSpiCard9readBlockEmPh>

080900d8 <_ZN7FatFile4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
 80900d8:	b507      	push	{r0, r1, r2, lr}
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 80900da:	2201      	movs	r2, #1
 80900dc:	f10d 0107 	add.w	r1, sp, #7
 80900e0:	f7f0 fee5 	bl	8080eae <_ZN7FatFile4readEPvj>
 80900e4:	2801      	cmp	r0, #1
 80900e6:	bf0c      	ite	eq
 80900e8:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 80900ec:	f04f 30ff 	movne.w	r0, #4294967295
  }
 80900f0:	b003      	add	sp, #12
 80900f2:	f85d fb04 	ldr.w	pc, [sp], #4

080900f6 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
 80900f6:	b508      	push	{r3, lr}
    return FatFile::read();
 80900f8:	3010      	adds	r0, #16
 80900fa:	f7ff ffed 	bl	80900d8 <_ZN7FatFile4readEv>
  }
 80900fe:	bd08      	pop	{r3, pc}

08090100 <_ZN2SDC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8090100:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8090104:	6081      	str	r1, [r0, #8]
class File : public FatFile, public Stream {
#else  // ARDUINO_FILE_USES_STREAM
class File : public FatFile, public Print {
#endif  // ARDUINO_FILE_USES_STREAM
 public:
  File() {}
 8090106:	490d      	ldr	r1, [pc, #52]	; (809013c <_ZN2SDC1Ev+0x3c>)
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8090108:	2200      	movs	r2, #0
 809010a:	6001      	str	r1, [r0, #0]
#else  // SD_SPI_CONFIGURATION < 3
  typedef SdSpiBase m_spi_t;
#endif  // SD_SPI_CONFIGURATION < 3
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_selected(false),
                m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
 809010c:	2119      	movs	r1, #25
 809010e:	f880 149e 	strb.w	r1, [r0, #1182]	; 0x49e
 * \brief Main file system class for %SdFat library.
 */
class SdFat : public SdFatBase {
 public:
#if IMPLEMENT_SPI_INTERFACE_SELECTION
  SdFat() {
 8090112:	490b      	ldr	r1, [pc, #44]	; (8090140 <_ZN2SDC1Ev+0x40>)
 8090114:	7402      	strb	r2, [r0, #16]
 8090116:	6341      	str	r1, [r0, #52]	; 0x34
/**
 * \class SdSpi
 * \brief SPI class for access to SD and SDHC flash memory cards.
 */
#if SD_SPI_CONFIGURATION >= 3
class SdSpi : public SdSpiBase {
 8090118:	490a      	ldr	r1, [pc, #40]	; (8090144 <_ZN2SDC1Ev+0x44>)
 809011a:	7442      	strb	r2, [r0, #17]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 809011c:	6042      	str	r2, [r0, #4]
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
 809011e:	f880 203b 	strb.w	r2, [r0, #59]	; 0x3b
 8090122:	f880 2474 	strb.w	r2, [r0, #1140]	; 0x474
 8090126:	f880 2475 	strb.w	r2, [r0, #1141]	; 0x475
 809012a:	f880 249c 	strb.w	r2, [r0, #1180]	; 0x49c
 809012e:	f880 24a1 	strb.w	r2, [r0, #1185]	; 0x4a1
 8090132:	f8c0 14a4 	str.w	r1, [r0, #1188]	; 0x4a4
   */
  void send(const uint8_t* buf, size_t n);
  /** \return true - uses SPI transactions */
#if IMPLEMENT_SPI_INTERFACE_SELECTION
  void setSpiIf(uint8_t spiIf) {
    m_spiIf = spiIf;
 8090136:	f880 24a8 	strb.w	r2, [r0, #1192]	; 0x4a8
#include "SD.h"

SD::SD()
{
    //initialize variables
}
 809013a:	4770      	bx	lr
 809013c:	080948f0 	.word	0x080948f0
 8090140:	08094918 	.word	0x08094918
 8090144:	08092558 	.word	0x08092558

08090148 <_GLOBAL__sub_I__ZN2SDC2Ev>:
 8090148:	f000 b90e 	b.w	8090368 <HAL_Pin_Map>

0809014c <_ZN3AWS11isConnectedEv>:
AWS::AWS(char* domain, uint16_t port, void (*callbackRef)(char*,uint8_t*,unsigned int)){
    setupCon(domain,port,callbackRef);
}

bool AWS::isConnected(){
    return (awsMqtt.isConnected());
 809014c:	f7f1 bbab 	b.w	80818a6 <_ZN4MQTT11isConnectedEv>

08090150 <_ZN3AWS7publishEPKcS1_>:
}

bool AWS::publish(const char * topic, const char *message){
    return (awsMqtt.publish(topic, message));
 8090150:	f7f1 bc23 	b.w	808199a <_ZN4MQTT7publishEPKcS1_>

08090154 <_ZN3AWS9subscribeEPKc>:
}

bool AWS::subscribe(const char * topic){
    return (awsMqtt.subscribe(topic));
 8090154:	f7f1 bc5d 	b.w	8081a12 <_ZN4MQTT9subscribeEPKc>

08090158 <_ZN3AWS4loopEv>:
}

bool AWS::loop(){
    awsMqtt.loop();
 8090158:	f7f1 bc79 	b.w	8081a4e <_ZN4MQTT4loopEv>

0809015c <_ZN3AWS7connectEPKc>:
}

bool AWS::connect(const char * ID){
    clientID = ID;   
 809015c:	f8c0 1688 	str.w	r1, [r0, #1672]	; 0x688
    return(awsMqtt.connect(clientID));  
 8090160:	f7f1 bf30 	b.w	8081fc4 <_ZN4MQTT7connectEPKc>

08090164 <_ZN3AWS8setupConEPctPFvS0_PhjE>:
}

bool AWS::setupCon(char* domain, uint16_t port, void (*callbackRef)(char*,uint8_t*,unsigned int)) {
 8090164:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    bool ret=0;
    static MQTT temp(domain,port,callbackRef);
 8090168:	4d5a      	ldr	r5, [pc, #360]	; (80902d4 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x170>)
bool AWS::connect(const char * ID){
    clientID = ID;   
    return(awsMqtt.connect(clientID));  
}

bool AWS::setupCon(char* domain, uint16_t port, void (*callbackRef)(char*,uint8_t*,unsigned int)) {
 809016a:	4698      	mov	r8, r3
    bool ret=0;
    static MQTT temp(domain,port,callbackRef);
 809016c:	682b      	ldr	r3, [r5, #0]
bool AWS::connect(const char * ID){
    clientID = ID;   
    return(awsMqtt.connect(clientID));  
}

bool AWS::setupCon(char* domain, uint16_t port, void (*callbackRef)(char*,uint8_t*,unsigned int)) {
 809016e:	4604      	mov	r4, r0
    bool ret=0;
    static MQTT temp(domain,port,callbackRef);
 8090170:	07db      	lsls	r3, r3, #31
bool AWS::connect(const char * ID){
    clientID = ID;   
    return(awsMqtt.connect(clientID));  
}

bool AWS::setupCon(char* domain, uint16_t port, void (*callbackRef)(char*,uint8_t*,unsigned int)) {
 8090172:	460e      	mov	r6, r1
 8090174:	4617      	mov	r7, r2
    bool ret=0;
    static MQTT temp(domain,port,callbackRef);
 8090176:	d411      	bmi.n	809019c <_ZN3AWS8setupConEPctPFvS0_PhjE+0x38>
 8090178:	4628      	mov	r0, r5
 809017a:	f7ef ff96 	bl	80800aa <__cxa_guard_acquire>
 809017e:	b168      	cbz	r0, 809019c <_ZN3AWS8setupConEPctPFvS0_PhjE+0x38>
 8090180:	463a      	mov	r2, r7
 8090182:	4631      	mov	r1, r6
 8090184:	4643      	mov	r3, r8
 8090186:	4854      	ldr	r0, [pc, #336]	; (80902d8 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x174>)
 8090188:	f7f1 fa5e 	bl	8081648 <_ZN4MQTTC1EPctPFvS0_PhjE>
 809018c:	4628      	mov	r0, r5
 809018e:	f7ef ff91 	bl	80800b4 <__cxa_guard_release>
 8090192:	4a52      	ldr	r2, [pc, #328]	; (80902dc <_ZN3AWS8setupConEPctPFvS0_PhjE+0x178>)
 8090194:	4952      	ldr	r1, [pc, #328]	; (80902e0 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x17c>)
 8090196:	4850      	ldr	r0, [pc, #320]	; (80902d8 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x174>)
 8090198:	f001 fb74 	bl	8091884 <__aeabi_atexit>
 809019c:	4d4e      	ldr	r5, [pc, #312]	; (80902d8 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x174>)
 809019e:	686b      	ldr	r3, [r5, #4]
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
 80901a0:	6063      	str	r3, [r4, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
 80901a2:	68ab      	ldr	r3, [r5, #8]
 80901a4:	60a3      	str	r3, [r4, #8]
 80901a6:	68eb      	ldr	r3, [r5, #12]
 80901a8:	60e3      	str	r3, [r4, #12]
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 80901aa:	692b      	ldr	r3, [r5, #16]
 80901ac:	6123      	str	r3, [r4, #16]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
 80901ae:	696b      	ldr	r3, [r5, #20]
 80901b0:	6163      	str	r3, [r4, #20]
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80901b2:	69af      	ldr	r7, [r5, #24]
	if (__tmp != _M_pi)
 80901b4:	69a3      	ldr	r3, [r4, #24]
 80901b6:	429f      	cmp	r7, r3
 80901b8:	d016      	beq.n	80901e8 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x84>
	  {
	    if (__tmp != 0)
 80901ba:	b117      	cbz	r7, 80901c2 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x5e>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80901bc:	687b      	ldr	r3, [r7, #4]
 80901be:	3301      	adds	r3, #1
 80901c0:	607b      	str	r3, [r7, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
 80901c2:	69a6      	ldr	r6, [r4, #24]
 80901c4:	b17e      	cbz	r6, 80901e6 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x82>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80901c6:	6873      	ldr	r3, [r6, #4]
 80901c8:	3b01      	subs	r3, #1
 80901ca:	6073      	str	r3, [r6, #4]
 80901cc:	b95b      	cbnz	r3, 80901e6 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x82>
        {
          _M_dispose();
 80901ce:	6833      	ldr	r3, [r6, #0]
 80901d0:	4630      	mov	r0, r6
 80901d2:	689b      	ldr	r3, [r3, #8]
 80901d4:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80901d6:	68b3      	ldr	r3, [r6, #8]
 80901d8:	3b01      	subs	r3, #1
 80901da:	60b3      	str	r3, [r6, #8]
 80901dc:	b91b      	cbnz	r3, 80901e6 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x82>
            _M_destroy();
 80901de:	6833      	ldr	r3, [r6, #0]
 80901e0:	4630      	mov	r0, r6
 80901e2:	68db      	ldr	r3, [r3, #12]
 80901e4:	4798      	blx	r3
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
 80901e6:	61a7      	str	r7, [r4, #24]
#define MQTTPINGREQ     12 << 4 // PING Request
#define MQTTPINGRESP    13 << 4 // PING Response
#define MQTTDISCONNECT  14 << 4 // Client is Disconnecting
#define MQTTReserved    15 << 4 // Reserved

class MQTT {
 80901e8:	69eb      	ldr	r3, [r5, #28]
 80901ea:	493e      	ldr	r1, [pc, #248]	; (80902e4 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x180>)
 80901ec:	61e3      	str	r3, [r4, #28]
 80901ee:	8c2b      	ldrh	r3, [r5, #32]
 80901f0:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80901f4:	8423      	strh	r3, [r4, #32]
 80901f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80901f8:	4e3b      	ldr	r6, [pc, #236]	; (80902e8 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x184>)
 80901fa:	6263      	str	r3, [r4, #36]	; 0x24
 80901fc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80901fe:	f504 67cb 	add.w	r7, r4, #1624	; 0x658
 8090202:	62a3      	str	r3, [r4, #40]	; 0x28
 8090204:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8090208:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 809020c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 809020e:	6323      	str	r3, [r4, #48]	; 0x30
 8090210:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8090212:	6363      	str	r3, [r4, #52]	; 0x34
 8090214:	f000 ff04 	bl	8091020 <_ZN6StringaSERKS_>
 8090218:	6cab      	ldr	r3, [r5, #72]	; 0x48
 809021a:	f44f 721e 	mov.w	r2, #632	; 0x278
 809021e:	64a3      	str	r3, [r4, #72]	; 0x48
 8090220:	f8b5 304c 	ldrh.w	r3, [r5, #76]	; 0x4c
 8090224:	4931      	ldr	r1, [pc, #196]	; (80902ec <_ZN3AWS8setupConEPctPFvS0_PhjE+0x188>)
 8090226:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 809022a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 809022c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8090230:	6523      	str	r3, [r4, #80]	; 0x50
 8090232:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
 8090236:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 809023a:	f002 f886 	bl	809234a <memcpy>
 809023e:	22b4      	movs	r2, #180	; 0xb4
 8090240:	492b      	ldr	r1, [pc, #172]	; (80902f0 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x18c>)
 8090242:	f504 7034 	add.w	r0, r4, #720	; 0x2d0
 8090246:	f002 f880 	bl	809234a <memcpy>
 809024a:	2264      	movs	r2, #100	; 0x64
 809024c:	4929      	ldr	r1, [pc, #164]	; (80902f4 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x190>)
 809024e:	f504 7061 	add.w	r0, r4, #900	; 0x384
 8090252:	f002 f87a 	bl	809234a <memcpy>
 8090256:	f44f 729a 	mov.w	r2, #308	; 0x134
 809025a:	4927      	ldr	r1, [pc, #156]	; (80902f8 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x194>)
 809025c:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
 8090260:	f002 f873 	bl	809234a <memcpy>
 8090264:	f44f 729a 	mov.w	r2, #308	; 0x134
 8090268:	4924      	ldr	r1, [pc, #144]	; (80902fc <_ZN3AWS8setupConEPctPFvS0_PhjE+0x198>)
 809026a:	f204 501c 	addw	r0, r4, #1308	; 0x51c
 809026e:	f002 f86c 	bl	809234a <memcpy>
 8090272:	e896 0003 	ldmia.w	r6, {r0, r1}
 8090276:	f504 63ca 	add.w	r3, r4, #1616	; 0x650
 809027a:	e883 0003 	stmia.w	r3, {r0, r1}
 809027e:	3608      	adds	r6, #8
 8090280:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8090282:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8090284:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8090286:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8090288:	e896 0003 	ldmia.w	r6, {r0, r1}
 809028c:	e887 0003 	stmia.w	r7, {r0, r1}
 8090290:	f895 3680 	ldrb.w	r3, [r5, #1664]	; 0x680
    awsMqtt = temp;
    ret = awsMqtt.enableTls(amazonIoTRootCaPem, sizeof(amazonIoTRootCaPem),
 8090294:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8090298:	f884 3680 	strb.w	r3, [r4, #1664]	; 0x680
 809029c:	f895 3681 	ldrb.w	r3, [r5, #1665]	; 0x681
 80902a0:	4917      	ldr	r1, [pc, #92]	; (8090300 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x19c>)
 80902a2:	f884 3681 	strb.w	r3, [r4, #1665]	; 0x681
 80902a6:	f895 3682 	ldrb.w	r3, [r5, #1666]	; 0x682
 80902aa:	4620      	mov	r0, r4
 80902ac:	f884 3682 	strb.w	r3, [r4, #1666]	; 0x682
 80902b0:	f240 63a6 	movw	r3, #1702	; 0x6a6
 80902b4:	9302      	str	r3, [sp, #8]
 80902b6:	4b13      	ldr	r3, [pc, #76]	; (8090304 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x1a0>)
 80902b8:	9301      	str	r3, [sp, #4]
 80902ba:	f44f 639b 	mov.w	r3, #1240	; 0x4d8
 80902be:	9300      	str	r3, [sp, #0]
 80902c0:	4b11      	ldr	r3, [pc, #68]	; (8090308 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x1a4>)
 80902c2:	f7f1 fc93 	bl	8081bec <_ZN4MQTT9enableTlsEPKcjS1_jS1_j>
                     clientKeyCrtPem, sizeof(clientKeyCrtPem),
                     clientKeyPem, sizeof(clientKeyPem));            
    return(ret);  
}
 80902c6:	3000      	adds	r0, #0
 80902c8:	bf18      	it	ne
 80902ca:	2001      	movne	r0, #1
 80902cc:	b004      	add	sp, #16
 80902ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80902d2:	bf00      	nop
 80902d4:	20003414 	.word	0x20003414
 80902d8:	20003418 	.word	0x20003418
 80902dc:	200004d0 	.word	0x200004d0
 80902e0:	08081a19 	.word	0x08081a19
 80902e4:	20003450 	.word	0x20003450
 80902e8:	20003a68 	.word	0x20003a68
 80902ec:	20003470 	.word	0x20003470
 80902f0:	200036e8 	.word	0x200036e8
 80902f4:	2000379c 	.word	0x2000379c
 80902f8:	20003800 	.word	0x20003800
 80902fc:	20003934 	.word	0x20003934
 8090300:	08094e00 	.word	0x08094e00
 8090304:	080954e0 	.word	0x080954e0
 8090308:	08094928 	.word	0x08094928

0809030c <_ZN3AWSC1EPctPFvS0_PhjE>:

AWS::AWS() {
    //add initializations for default case
}

AWS::AWS(char* domain, uint16_t port, void (*callbackRef)(char*,uint8_t*,unsigned int)){
 809030c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 809030e:	4604      	mov	r4, r0
 8090310:	460d      	mov	r5, r1
 8090312:	4616      	mov	r6, r2
 8090314:	461f      	mov	r7, r3
 8090316:	f7f1 f95f 	bl	80815d8 <_ZN4MQTTC1Ev>
    setupCon(domain,port,callbackRef);
 809031a:	463b      	mov	r3, r7
 809031c:	4632      	mov	r2, r6
 809031e:	4629      	mov	r1, r5
 8090320:	4620      	mov	r0, r4
 8090322:	f7ff ff1f 	bl	8090164 <_ZN3AWS8setupConEPctPFvS0_PhjE>
}
 8090326:	4620      	mov	r0, r4
 8090328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0809032a <_ZN3DOFC1Ev>:
// http://www.ngdc.noaa.gov/geomag-web/#declination
#define DECLINATION -7.140 // Declination (degrees) in Columbus, OH.
//In future 


DOF::DOF()
 809032a:	b510      	push	{r4, lr}
 809032c:	4604      	mov	r4, r0
 809032e:	3034      	adds	r0, #52	; 0x34
 8090330:	f7f0 f88e 	bl	8080450 <_ZN7LSM9DS1C1Ev>
{
  //initialize variables
} 
 8090334:	4620      	mov	r0, r4
 8090336:	bd10      	pop	{r4, pc}

08090338 <_ZN3DOF5beginEv>:


void DOF::begin() 
{
 8090338:	b508      	push	{r3, lr}
  imu.settings.device.commInterface = IMU_MODE_I2C;
 809033a:	2301      	movs	r3, #1
 809033c:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  imu.settings.device.mAddress = LSM9DS1_M;
 8090340:	231e      	movs	r3, #30
 8090342:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
  imu.settings.device.agAddress = LSM9DS1_AG;
 8090346:	236b      	movs	r3, #107	; 0x6b
 8090348:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  imu.begin();
 809034c:	3034      	adds	r0, #52	; 0x34
 809034e:	f7f0 fac8 	bl	80808e2 <_ZN7LSM9DS15beginEv>
  Wire.begin();
 8090352:	f001 fa77 	bl	8091844 <_Z19__fetch_global_Wirev>
}
 8090356:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  imu.settings.device.commInterface = IMU_MODE_I2C;
  imu.settings.device.mAddress = LSM9DS1_M;
  imu.settings.device.agAddress = LSM9DS1_AG;
  imu.begin();
  Wire.begin();
 809035a:	f001 b9bd 	b.w	80916d8 <_ZN7TwoWire5beginEv>

0809035e <_GLOBAL__sub_I__ZN3DOFC2Ev>:
 809035e:	f000 b803 	b.w	8090368 <HAL_Pin_Map>

08090362 <_GLOBAL__sub_I__ZN3GPSC2Ev>:
 8090362:	f000 b801 	b.w	8090368 <HAL_Pin_Map>
	...

08090368 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 8090368:	b508      	push	{r3, lr}
 809036a:	4b02      	ldr	r3, [pc, #8]	; (8090374 <HAL_Pin_Map+0xc>)
 809036c:	681b      	ldr	r3, [r3, #0]
 809036e:	681b      	ldr	r3, [r3, #0]
 8090370:	9301      	str	r3, [sp, #4]
 8090372:	bd08      	pop	{r3, pc}
 8090374:	080401b0 	.word	0x080401b0

08090378 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8090378:	b508      	push	{r3, lr}
 809037a:	4b02      	ldr	r3, [pc, #8]	; (8090384 <HAL_Pin_Mode+0xc>)
 809037c:	681b      	ldr	r3, [r3, #0]
 809037e:	689b      	ldr	r3, [r3, #8]
 8090380:	9301      	str	r3, [sp, #4]
 8090382:	bd08      	pop	{r3, pc}
 8090384:	080401b0 	.word	0x080401b0

08090388 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8090388:	b508      	push	{r3, lr}
 809038a:	4b02      	ldr	r3, [pc, #8]	; (8090394 <HAL_Get_Pin_Mode+0xc>)
 809038c:	681b      	ldr	r3, [r3, #0]
 809038e:	68db      	ldr	r3, [r3, #12]
 8090390:	9301      	str	r3, [sp, #4]
 8090392:	bd08      	pop	{r3, pc}
 8090394:	080401b0 	.word	0x080401b0

08090398 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8090398:	b508      	push	{r3, lr}
 809039a:	4b02      	ldr	r3, [pc, #8]	; (80903a4 <HAL_GPIO_Write+0xc>)
 809039c:	681b      	ldr	r3, [r3, #0]
 809039e:	691b      	ldr	r3, [r3, #16]
 80903a0:	9301      	str	r3, [sp, #4]
 80903a2:	bd08      	pop	{r3, pc}
 80903a4:	080401b0 	.word	0x080401b0

080903a8 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80903a8:	b508      	push	{r3, lr}
 80903aa:	4b02      	ldr	r3, [pc, #8]	; (80903b4 <HAL_SPI_Begin+0xc>)
 80903ac:	681b      	ldr	r3, [r3, #0]
 80903ae:	681b      	ldr	r3, [r3, #0]
 80903b0:	9301      	str	r3, [sp, #4]
 80903b2:	bd08      	pop	{r3, pc}
 80903b4:	080401b4 	.word	0x080401b4

080903b8 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 80903b8:	b508      	push	{r3, lr}
 80903ba:	4b02      	ldr	r3, [pc, #8]	; (80903c4 <HAL_SPI_Set_Bit_Order+0xc>)
 80903bc:	681b      	ldr	r3, [r3, #0]
 80903be:	689b      	ldr	r3, [r3, #8]
 80903c0:	9301      	str	r3, [sp, #4]
 80903c2:	bd08      	pop	{r3, pc}
 80903c4:	080401b4 	.word	0x080401b4

080903c8 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 80903c8:	b508      	push	{r3, lr}
 80903ca:	4b02      	ldr	r3, [pc, #8]	; (80903d4 <HAL_SPI_Set_Data_Mode+0xc>)
 80903cc:	681b      	ldr	r3, [r3, #0]
 80903ce:	68db      	ldr	r3, [r3, #12]
 80903d0:	9301      	str	r3, [sp, #4]
 80903d2:	bd08      	pop	{r3, pc}
 80903d4:	080401b4 	.word	0x080401b4

080903d8 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 80903d8:	b508      	push	{r3, lr}
 80903da:	4b02      	ldr	r3, [pc, #8]	; (80903e4 <HAL_SPI_Set_Clock_Divider+0xc>)
 80903dc:	681b      	ldr	r3, [r3, #0]
 80903de:	691b      	ldr	r3, [r3, #16]
 80903e0:	9301      	str	r3, [sp, #4]
 80903e2:	bd08      	pop	{r3, pc}
 80903e4:	080401b4 	.word	0x080401b4

080903e8 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80903e8:	b508      	push	{r3, lr}
 80903ea:	4b02      	ldr	r3, [pc, #8]	; (80903f4 <HAL_SPI_Send_Receive_Data+0xc>)
 80903ec:	681b      	ldr	r3, [r3, #0]
 80903ee:	695b      	ldr	r3, [r3, #20]
 80903f0:	9301      	str	r3, [sp, #4]
 80903f2:	bd08      	pop	{r3, pc}
 80903f4:	080401b4 	.word	0x080401b4

080903f8 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80903f8:	b508      	push	{r3, lr}
 80903fa:	4b02      	ldr	r3, [pc, #8]	; (8090404 <HAL_SPI_Init+0xc>)
 80903fc:	681b      	ldr	r3, [r3, #0]
 80903fe:	69db      	ldr	r3, [r3, #28]
 8090400:	9301      	str	r3, [sp, #4]
 8090402:	bd08      	pop	{r3, pc}
 8090404:	080401b4 	.word	0x080401b4

08090408 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 8090408:	b508      	push	{r3, lr}
 809040a:	4b02      	ldr	r3, [pc, #8]	; (8090414 <HAL_SPI_Is_Enabled+0xc>)
 809040c:	681b      	ldr	r3, [r3, #0]
 809040e:	6a1b      	ldr	r3, [r3, #32]
 8090410:	9301      	str	r3, [sp, #4]
 8090412:	bd08      	pop	{r3, pc}
 8090414:	080401b4 	.word	0x080401b4

08090418 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 8090418:	b508      	push	{r3, lr}
 809041a:	4b02      	ldr	r3, [pc, #8]	; (8090424 <HAL_SPI_Info+0xc>)
 809041c:	681b      	ldr	r3, [r3, #0]
 809041e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8090420:	9301      	str	r3, [sp, #4]
 8090422:	bd08      	pop	{r3, pc}
 8090424:	080401b4 	.word	0x080401b4

08090428 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
 8090428:	b508      	push	{r3, lr}
 809042a:	4b02      	ldr	r3, [pc, #8]	; (8090434 <HAL_SPI_DMA_Transfer+0xc>)
 809042c:	681b      	ldr	r3, [r3, #0]
 809042e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8090430:	9301      	str	r3, [sp, #4]
 8090432:	bd08      	pop	{r3, pc}
 8090434:	080401b4 	.word	0x080401b4

08090438 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
 8090438:	b508      	push	{r3, lr}
 809043a:	4b02      	ldr	r3, [pc, #8]	; (8090444 <HAL_SPI_DMA_Transfer_Status+0xc>)
 809043c:	681b      	ldr	r3, [r3, #0]
 809043e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8090440:	9301      	str	r3, [sp, #4]
 8090442:	bd08      	pop	{r3, pc}
 8090444:	080401b4 	.word	0x080401b4

08090448 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8090448:	b508      	push	{r3, lr}
 809044a:	4b02      	ldr	r3, [pc, #8]	; (8090454 <HAL_RNG_GetRandomNumber+0xc>)
 809044c:	681b      	ldr	r3, [r3, #0]
 809044e:	685b      	ldr	r3, [r3, #4]
 8090450:	9301      	str	r3, [sp, #4]
 8090452:	bd08      	pop	{r3, pc}
 8090454:	0804019c 	.word	0x0804019c

08090458 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 8090458:	b508      	push	{r3, lr}
 809045a:	4b02      	ldr	r3, [pc, #8]	; (8090464 <HAL_Delay_Microseconds+0xc>)
 809045c:	681b      	ldr	r3, [r3, #0]
 809045e:	68db      	ldr	r3, [r3, #12]
 8090460:	9301      	str	r3, [sp, #4]
 8090462:	bd08      	pop	{r3, pc}
 8090464:	0804019c 	.word	0x0804019c

08090468 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8090468:	b508      	push	{r3, lr}
 809046a:	4b02      	ldr	r3, [pc, #8]	; (8090474 <HAL_Timer_Get_Milli_Seconds+0xc>)
 809046c:	681b      	ldr	r3, [r3, #0]
 809046e:	695b      	ldr	r3, [r3, #20]
 8090470:	9301      	str	r3, [sp, #4]
 8090472:	bd08      	pop	{r3, pc}
 8090474:	0804019c 	.word	0x0804019c

08090478 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 8090478:	b508      	push	{r3, lr}
 809047a:	4b02      	ldr	r3, [pc, #8]	; (8090484 <HAL_RTC_Get_UnixTime+0xc>)
 809047c:	681b      	ldr	r3, [r3, #0]
 809047e:	69db      	ldr	r3, [r3, #28]
 8090480:	9301      	str	r3, [sp, #4]
 8090482:	bd08      	pop	{r3, pc}
 8090484:	0804019c 	.word	0x0804019c

08090488 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
 8090488:	b508      	push	{r3, lr}
 809048a:	4b02      	ldr	r3, [pc, #8]	; (8090494 <os_thread_create+0xc>)
 809048c:	681b      	ldr	r3, [r3, #0]
 809048e:	685b      	ldr	r3, [r3, #4]
 8090490:	9301      	str	r3, [sp, #4]
 8090492:	bd08      	pop	{r3, pc}
 8090494:	080401d0 	.word	0x080401d0

08090498 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
 8090498:	b508      	push	{r3, lr}
 809049a:	4b02      	ldr	r3, [pc, #8]	; (80904a4 <os_thread_is_current+0xc>)
 809049c:	681b      	ldr	r3, [r3, #0]
 809049e:	689b      	ldr	r3, [r3, #8]
 80904a0:	9301      	str	r3, [sp, #4]
 80904a2:	bd08      	pop	{r3, pc}
 80904a4:	080401d0 	.word	0x080401d0

080904a8 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
 80904a8:	b508      	push	{r3, lr}
 80904aa:	4b02      	ldr	r3, [pc, #8]	; (80904b4 <os_thread_join+0xc>)
 80904ac:	681b      	ldr	r3, [r3, #0]
 80904ae:	691b      	ldr	r3, [r3, #16]
 80904b0:	9301      	str	r3, [sp, #4]
 80904b2:	bd08      	pop	{r3, pc}
 80904b4:	080401d0 	.word	0x080401d0

080904b8 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
 80904b8:	b508      	push	{r3, lr}
 80904ba:	4b02      	ldr	r3, [pc, #8]	; (80904c4 <os_thread_cleanup+0xc>)
 80904bc:	681b      	ldr	r3, [r3, #0]
 80904be:	695b      	ldr	r3, [r3, #20]
 80904c0:	9301      	str	r3, [sp, #4]
 80904c2:	bd08      	pop	{r3, pc}
 80904c4:	080401d0 	.word	0x080401d0

080904c8 <os_thread_delay_until>:
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
 80904c8:	b508      	push	{r3, lr}
 80904ca:	4b02      	ldr	r3, [pc, #8]	; (80904d4 <os_thread_delay_until+0xc>)
 80904cc:	681b      	ldr	r3, [r3, #0]
 80904ce:	699b      	ldr	r3, [r3, #24]
 80904d0:	9301      	str	r3, [sp, #4]
 80904d2:	bd08      	pop	{r3, pc}
 80904d4:	080401d0 	.word	0x080401d0

080904d8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80904d8:	b508      	push	{r3, lr}
 80904da:	4b02      	ldr	r3, [pc, #8]	; (80904e4 <os_mutex_create+0xc>)
 80904dc:	681b      	ldr	r3, [r3, #0]
 80904de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80904e0:	9301      	str	r3, [sp, #4]
 80904e2:	bd08      	pop	{r3, pc}
 80904e4:	080401d0 	.word	0x080401d0

080904e8 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
 80904e8:	b508      	push	{r3, lr}
 80904ea:	4b02      	ldr	r3, [pc, #8]	; (80904f4 <os_mutex_lock+0xc>)
 80904ec:	681b      	ldr	r3, [r3, #0]
 80904ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80904f0:	9301      	str	r3, [sp, #4]
 80904f2:	bd08      	pop	{r3, pc}
 80904f4:	080401d0 	.word	0x080401d0

080904f8 <os_mutex_trylock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
 80904f8:	b508      	push	{r3, lr}
 80904fa:	4b02      	ldr	r3, [pc, #8]	; (8090504 <os_mutex_trylock+0xc>)
 80904fc:	681b      	ldr	r3, [r3, #0]
 80904fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8090500:	9301      	str	r3, [sp, #4]
 8090502:	bd08      	pop	{r3, pc}
 8090504:	080401d0 	.word	0x080401d0

08090508 <os_mutex_unlock>:
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
 8090508:	b508      	push	{r3, lr}
 809050a:	4b02      	ldr	r3, [pc, #8]	; (8090514 <os_mutex_unlock+0xc>)
 809050c:	681b      	ldr	r3, [r3, #0]
 809050e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8090510:	9301      	str	r3, [sp, #4]
 8090512:	bd08      	pop	{r3, pc}
 8090514:	080401d0 	.word	0x080401d0

08090518 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
 8090518:	b508      	push	{r3, lr}
 809051a:	4b02      	ldr	r3, [pc, #8]	; (8090524 <os_thread_exit+0xc>)
 809051c:	681b      	ldr	r3, [r3, #0]
 809051e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8090520:	9301      	str	r3, [sp, #4]
 8090522:	bd08      	pop	{r3, pc}
 8090524:	080401d0 	.word	0x080401d0

08090528 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 8090528:	b508      	push	{r3, lr}
 809052a:	4b02      	ldr	r3, [pc, #8]	; (8090534 <HAL_USART_Init+0xc>)
 809052c:	681b      	ldr	r3, [r3, #0]
 809052e:	699b      	ldr	r3, [r3, #24]
 8090530:	9301      	str	r3, [sp, #4]
 8090532:	bd08      	pop	{r3, pc}
 8090534:	080401c4 	.word	0x080401c4

08090538 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 8090538:	b508      	push	{r3, lr}
 809053a:	4b02      	ldr	r3, [pc, #8]	; (8090544 <HAL_USART_Write_Data+0xc>)
 809053c:	681b      	ldr	r3, [r3, #0]
 809053e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8090540:	9301      	str	r3, [sp, #4]
 8090542:	bd08      	pop	{r3, pc}
 8090544:	080401c4 	.word	0x080401c4

08090548 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 8090548:	b508      	push	{r3, lr}
 809054a:	4b02      	ldr	r3, [pc, #8]	; (8090554 <HAL_USART_Available_Data+0xc>)
 809054c:	681b      	ldr	r3, [r3, #0]
 809054e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8090550:	9301      	str	r3, [sp, #4]
 8090552:	bd08      	pop	{r3, pc}
 8090554:	080401c4 	.word	0x080401c4

08090558 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 8090558:	b508      	push	{r3, lr}
 809055a:	4b02      	ldr	r3, [pc, #8]	; (8090564 <HAL_USART_Read_Data+0xc>)
 809055c:	681b      	ldr	r3, [r3, #0]
 809055e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8090560:	9301      	str	r3, [sp, #4]
 8090562:	bd08      	pop	{r3, pc}
 8090564:	080401c4 	.word	0x080401c4

08090568 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 8090568:	b508      	push	{r3, lr}
 809056a:	4b02      	ldr	r3, [pc, #8]	; (8090574 <HAL_USART_Peek_Data+0xc>)
 809056c:	681b      	ldr	r3, [r3, #0]
 809056e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8090570:	9301      	str	r3, [sp, #4]
 8090572:	bd08      	pop	{r3, pc}
 8090574:	080401c4 	.word	0x080401c4

08090578 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 8090578:	b508      	push	{r3, lr}
 809057a:	4b02      	ldr	r3, [pc, #8]	; (8090584 <HAL_USART_Flush_Data+0xc>)
 809057c:	681b      	ldr	r3, [r3, #0]
 809057e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8090580:	9301      	str	r3, [sp, #4]
 8090582:	bd08      	pop	{r3, pc}
 8090584:	080401c4 	.word	0x080401c4

08090588 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 8090588:	b508      	push	{r3, lr}
 809058a:	4b02      	ldr	r3, [pc, #8]	; (8090594 <HAL_USART_Is_Enabled+0xc>)
 809058c:	681b      	ldr	r3, [r3, #0]
 809058e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8090590:	9301      	str	r3, [sp, #4]
 8090592:	bd08      	pop	{r3, pc}
 8090594:	080401c4 	.word	0x080401c4

08090598 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 8090598:	b508      	push	{r3, lr}
 809059a:	4b02      	ldr	r3, [pc, #8]	; (80905a4 <HAL_USART_Available_Data_For_Write+0xc>)
 809059c:	681b      	ldr	r3, [r3, #0]
 809059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80905a0:	9301      	str	r3, [sp, #4]
 80905a2:	bd08      	pop	{r3, pc}
 80905a4:	080401c4 	.word	0x080401c4

080905a8 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 80905a8:	b508      	push	{r3, lr}
 80905aa:	4b02      	ldr	r3, [pc, #8]	; (80905b4 <HAL_USART_BeginConfig+0xc>)
 80905ac:	681b      	ldr	r3, [r3, #0]
 80905ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80905b0:	9301      	str	r3, [sp, #4]
 80905b2:	bd08      	pop	{r3, pc}
 80905b4:	080401c4 	.word	0x080401c4

080905b8 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80905b8:	b508      	push	{r3, lr}
 80905ba:	4b02      	ldr	r3, [pc, #8]	; (80905c4 <HAL_I2C_Begin+0xc>)
 80905bc:	681b      	ldr	r3, [r3, #0]
 80905be:	68db      	ldr	r3, [r3, #12]
 80905c0:	9301      	str	r3, [sp, #4]
 80905c2:	bd08      	pop	{r3, pc}
 80905c4:	080401ac 	.word	0x080401ac

080905c8 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80905c8:	b508      	push	{r3, lr}
 80905ca:	4b02      	ldr	r3, [pc, #8]	; (80905d4 <HAL_I2C_Request_Data+0xc>)
 80905cc:	681b      	ldr	r3, [r3, #0]
 80905ce:	695b      	ldr	r3, [r3, #20]
 80905d0:	9301      	str	r3, [sp, #4]
 80905d2:	bd08      	pop	{r3, pc}
 80905d4:	080401ac 	.word	0x080401ac

080905d8 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80905d8:	b508      	push	{r3, lr}
 80905da:	4b02      	ldr	r3, [pc, #8]	; (80905e4 <HAL_I2C_Begin_Transmission+0xc>)
 80905dc:	681b      	ldr	r3, [r3, #0]
 80905de:	699b      	ldr	r3, [r3, #24]
 80905e0:	9301      	str	r3, [sp, #4]
 80905e2:	bd08      	pop	{r3, pc}
 80905e4:	080401ac 	.word	0x080401ac

080905e8 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80905e8:	b508      	push	{r3, lr}
 80905ea:	4b02      	ldr	r3, [pc, #8]	; (80905f4 <HAL_I2C_End_Transmission+0xc>)
 80905ec:	681b      	ldr	r3, [r3, #0]
 80905ee:	69db      	ldr	r3, [r3, #28]
 80905f0:	9301      	str	r3, [sp, #4]
 80905f2:	bd08      	pop	{r3, pc}
 80905f4:	080401ac 	.word	0x080401ac

080905f8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80905f8:	b508      	push	{r3, lr}
 80905fa:	4b02      	ldr	r3, [pc, #8]	; (8090604 <HAL_I2C_Write_Data+0xc>)
 80905fc:	681b      	ldr	r3, [r3, #0]
 80905fe:	6a1b      	ldr	r3, [r3, #32]
 8090600:	9301      	str	r3, [sp, #4]
 8090602:	bd08      	pop	{r3, pc}
 8090604:	080401ac 	.word	0x080401ac

08090608 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 8090608:	b508      	push	{r3, lr}
 809060a:	4b02      	ldr	r3, [pc, #8]	; (8090614 <HAL_I2C_Available_Data+0xc>)
 809060c:	681b      	ldr	r3, [r3, #0]
 809060e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8090610:	9301      	str	r3, [sp, #4]
 8090612:	bd08      	pop	{r3, pc}
 8090614:	080401ac 	.word	0x080401ac

08090618 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 8090618:	b508      	push	{r3, lr}
 809061a:	4b02      	ldr	r3, [pc, #8]	; (8090624 <HAL_I2C_Read_Data+0xc>)
 809061c:	681b      	ldr	r3, [r3, #0]
 809061e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8090620:	9301      	str	r3, [sp, #4]
 8090622:	bd08      	pop	{r3, pc}
 8090624:	080401ac 	.word	0x080401ac

08090628 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 8090628:	b508      	push	{r3, lr}
 809062a:	4b02      	ldr	r3, [pc, #8]	; (8090634 <HAL_I2C_Peek_Data+0xc>)
 809062c:	681b      	ldr	r3, [r3, #0]
 809062e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8090630:	9301      	str	r3, [sp, #4]
 8090632:	bd08      	pop	{r3, pc}
 8090634:	080401ac 	.word	0x080401ac

08090638 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 8090638:	b508      	push	{r3, lr}
 809063a:	4b02      	ldr	r3, [pc, #8]	; (8090644 <HAL_I2C_Flush_Data+0xc>)
 809063c:	681b      	ldr	r3, [r3, #0]
 809063e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8090640:	9301      	str	r3, [sp, #4]
 8090642:	bd08      	pop	{r3, pc}
 8090644:	080401ac 	.word	0x080401ac

08090648 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 8090648:	b508      	push	{r3, lr}
 809064a:	4b02      	ldr	r3, [pc, #8]	; (8090654 <HAL_I2C_Is_Enabled+0xc>)
 809064c:	681b      	ldr	r3, [r3, #0]
 809064e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8090650:	9301      	str	r3, [sp, #4]
 8090652:	bd08      	pop	{r3, pc}
 8090654:	080401ac 	.word	0x080401ac

08090658 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 8090658:	b508      	push	{r3, lr}
 809065a:	4b02      	ldr	r3, [pc, #8]	; (8090664 <HAL_I2C_Init+0xc>)
 809065c:	681b      	ldr	r3, [r3, #0]
 809065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8090660:	9301      	str	r3, [sp, #4]
 8090662:	bd08      	pop	{r3, pc}
 8090664:	080401ac 	.word	0x080401ac

08090668 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 8090668:	b508      	push	{r3, lr}
 809066a:	4b02      	ldr	r3, [pc, #8]	; (8090674 <socket_active_status+0xc>)
 809066c:	681b      	ldr	r3, [r3, #0]
 809066e:	681b      	ldr	r3, [r3, #0]
 8090670:	9301      	str	r3, [sp, #4]
 8090672:	bd08      	pop	{r3, pc}
 8090674:	08060024 	.word	0x08060024

08090678 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 8090678:	b508      	push	{r3, lr}
 809067a:	4b02      	ldr	r3, [pc, #8]	; (8090684 <socket_handle_valid+0xc>)
 809067c:	681b      	ldr	r3, [r3, #0]
 809067e:	685b      	ldr	r3, [r3, #4]
 8090680:	9301      	str	r3, [sp, #4]
 8090682:	bd08      	pop	{r3, pc}
 8090684:	08060024 	.word	0x08060024

08090688 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 8090688:	b508      	push	{r3, lr}
 809068a:	4b02      	ldr	r3, [pc, #8]	; (8090694 <socket_create+0xc>)
 809068c:	681b      	ldr	r3, [r3, #0]
 809068e:	689b      	ldr	r3, [r3, #8]
 8090690:	9301      	str	r3, [sp, #4]
 8090692:	bd08      	pop	{r3, pc}
 8090694:	08060024 	.word	0x08060024

08090698 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 8090698:	b508      	push	{r3, lr}
 809069a:	4b02      	ldr	r3, [pc, #8]	; (80906a4 <socket_connect+0xc>)
 809069c:	681b      	ldr	r3, [r3, #0]
 809069e:	68db      	ldr	r3, [r3, #12]
 80906a0:	9301      	str	r3, [sp, #4]
 80906a2:	bd08      	pop	{r3, pc}
 80906a4:	08060024 	.word	0x08060024

080906a8 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80906a8:	b508      	push	{r3, lr}
 80906aa:	4b02      	ldr	r3, [pc, #8]	; (80906b4 <socket_receive+0xc>)
 80906ac:	681b      	ldr	r3, [r3, #0]
 80906ae:	691b      	ldr	r3, [r3, #16]
 80906b0:	9301      	str	r3, [sp, #4]
 80906b2:	bd08      	pop	{r3, pc}
 80906b4:	08060024 	.word	0x08060024

080906b8 <socket_send>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
 80906b8:	b508      	push	{r3, lr}
 80906ba:	4b02      	ldr	r3, [pc, #8]	; (80906c4 <socket_send+0xc>)
 80906bc:	681b      	ldr	r3, [r3, #0]
 80906be:	699b      	ldr	r3, [r3, #24]
 80906c0:	9301      	str	r3, [sp, #4]
 80906c2:	bd08      	pop	{r3, pc}
 80906c4:	08060024 	.word	0x08060024

080906c8 <socket_close>:
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80906c8:	b508      	push	{r3, lr}
 80906ca:	4b02      	ldr	r3, [pc, #8]	; (80906d4 <socket_close+0xc>)
 80906cc:	681b      	ldr	r3, [r3, #0]
 80906ce:	6a1b      	ldr	r3, [r3, #32]
 80906d0:	9301      	str	r3, [sp, #4]
 80906d2:	bd08      	pop	{r3, pc}
 80906d4:	08060024 	.word	0x08060024

080906d8 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80906d8:	b508      	push	{r3, lr}
 80906da:	4b02      	ldr	r3, [pc, #8]	; (80906e4 <socket_handle_invalid+0xc>)
 80906dc:	681b      	ldr	r3, [r3, #0]
 80906de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80906e0:	9301      	str	r3, [sp, #4]
 80906e2:	bd08      	pop	{r3, pc}
 80906e4:	08060024 	.word	0x08060024

080906e8 <cellular_credentials_set>:
DYNALIB_FN(5, hal_cellular, cellular_pdp_deactivate, cellular_result_t(void*))
DYNALIB_FN(6, hal_cellular, cellular_gprs_attach, cellular_result_t(CellularCredentials*, void*))
DYNALIB_FN(7, hal_cellular, cellular_gprs_detach, cellular_result_t(void*))
DYNALIB_FN(8, hal_cellular, cellular_fetch_ipconfig, cellular_result_t(CellularConfig*, void*))
DYNALIB_FN(9, hal_cellular, cellular_device_info, cellular_result_t(CellularDevice*, void*))
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
 80906e8:	b508      	push	{r3, lr}
 80906ea:	4b02      	ldr	r3, [pc, #8]	; (80906f4 <cellular_credentials_set+0xc>)
 80906ec:	681b      	ldr	r3, [r3, #0]
 80906ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80906f0:	9301      	str	r3, [sp, #4]
 80906f2:	bd08      	pop	{r3, pc}
 80906f4:	08060020 	.word	0x08060020

080906f8 <HAL_NET_SetNetWatchDog>:
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80906f8:	b508      	push	{r3, lr}
 80906fa:	4b02      	ldr	r3, [pc, #8]	; (8090704 <HAL_NET_SetNetWatchDog+0xc>)
 80906fc:	681b      	ldr	r3, [r3, #0]
 80906fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8090700:	9301      	str	r3, [sp, #4]
 8090702:	bd08      	pop	{r3, pc}
 8090704:	08060020 	.word	0x08060020

08090708 <inet_gethostbyname>:
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8090708:	b508      	push	{r3, lr}
 809070a:	4b02      	ldr	r3, [pc, #8]	; (8090714 <inet_gethostbyname+0xc>)
 809070c:	681b      	ldr	r3, [r3, #0]
 809070e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8090710:	9301      	str	r3, [sp, #4]
 8090712:	bd08      	pop	{r3, pc}
 8090714:	08060020 	.word	0x08060020

08090718 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8090718:	b508      	push	{r3, lr}
 809071a:	4b02      	ldr	r3, [pc, #8]	; (8090724 <HAL_USB_USART_Init+0xc>)
 809071c:	681b      	ldr	r3, [r3, #0]
 809071e:	681b      	ldr	r3, [r3, #0]
 8090720:	9301      	str	r3, [sp, #4]
 8090722:	bd08      	pop	{r3, pc}
 8090724:	0806001c 	.word	0x0806001c

08090728 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 8090728:	b508      	push	{r3, lr}
 809072a:	4b02      	ldr	r3, [pc, #8]	; (8090734 <HAL_USB_USART_Begin+0xc>)
 809072c:	681b      	ldr	r3, [r3, #0]
 809072e:	685b      	ldr	r3, [r3, #4]
 8090730:	9301      	str	r3, [sp, #4]
 8090732:	bd08      	pop	{r3, pc}
 8090734:	0806001c 	.word	0x0806001c

08090738 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8090738:	b508      	push	{r3, lr}
 809073a:	4b02      	ldr	r3, [pc, #8]	; (8090744 <HAL_USB_USART_Available_Data+0xc>)
 809073c:	681b      	ldr	r3, [r3, #0]
 809073e:	691b      	ldr	r3, [r3, #16]
 8090740:	9301      	str	r3, [sp, #4]
 8090742:	bd08      	pop	{r3, pc}
 8090744:	0806001c 	.word	0x0806001c

08090748 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8090748:	b508      	push	{r3, lr}
 809074a:	4b02      	ldr	r3, [pc, #8]	; (8090754 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 809074c:	681b      	ldr	r3, [r3, #0]
 809074e:	695b      	ldr	r3, [r3, #20]
 8090750:	9301      	str	r3, [sp, #4]
 8090752:	bd08      	pop	{r3, pc}
 8090754:	0806001c 	.word	0x0806001c

08090758 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8090758:	b508      	push	{r3, lr}
 809075a:	4b02      	ldr	r3, [pc, #8]	; (8090764 <HAL_USB_USART_Receive_Data+0xc>)
 809075c:	681b      	ldr	r3, [r3, #0]
 809075e:	699b      	ldr	r3, [r3, #24]
 8090760:	9301      	str	r3, [sp, #4]
 8090762:	bd08      	pop	{r3, pc}
 8090764:	0806001c 	.word	0x0806001c

08090768 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8090768:	b508      	push	{r3, lr}
 809076a:	4b02      	ldr	r3, [pc, #8]	; (8090774 <HAL_USB_USART_Send_Data+0xc>)
 809076c:	681b      	ldr	r3, [r3, #0]
 809076e:	69db      	ldr	r3, [r3, #28]
 8090770:	9301      	str	r3, [sp, #4]
 8090772:	bd08      	pop	{r3, pc}
 8090774:	0806001c 	.word	0x0806001c

08090778 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8090778:	b508      	push	{r3, lr}
 809077a:	4b02      	ldr	r3, [pc, #8]	; (8090784 <HAL_USB_USART_Flush_Data+0xc>)
 809077c:	681b      	ldr	r3, [r3, #0]
 809077e:	6a1b      	ldr	r3, [r3, #32]
 8090780:	9301      	str	r3, [sp, #4]
 8090782:	bd08      	pop	{r3, pc}
 8090784:	0806001c 	.word	0x0806001c

08090788 <LED_SetSignalingColor>:
#include "dynalib.h"

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
 8090788:	b508      	push	{r3, lr}
 809078a:	4b02      	ldr	r3, [pc, #8]	; (8090794 <LED_SetSignalingColor+0xc>)
 809078c:	681b      	ldr	r3, [r3, #0]
 809078e:	685b      	ldr	r3, [r3, #4]
 8090790:	9301      	str	r3, [sp, #4]
 8090792:	bd08      	pop	{r3, pc}
 8090794:	080201a0 	.word	0x080201a0

08090798 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
 8090798:	b508      	push	{r3, lr}
 809079a:	4b02      	ldr	r3, [pc, #8]	; (80907a4 <LED_Signaling_Start+0xc>)
 809079c:	681b      	ldr	r3, [r3, #0]
 809079e:	689b      	ldr	r3, [r3, #8]
 80907a0:	9301      	str	r3, [sp, #4]
 80907a2:	bd08      	pop	{r3, pc}
 80907a4:	080201a0 	.word	0x080201a0

080907a8 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
 80907a8:	b508      	push	{r3, lr}
 80907aa:	4b02      	ldr	r3, [pc, #8]	; (80907b4 <LED_Signaling_Stop+0xc>)
 80907ac:	681b      	ldr	r3, [r3, #0]
 80907ae:	68db      	ldr	r3, [r3, #12]
 80907b0:	9301      	str	r3, [sp, #4]
 80907b2:	bd08      	pop	{r3, pc}
 80907b4:	080201a0 	.word	0x080201a0

080907b8 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
 80907b8:	b508      	push	{r3, lr}
 80907ba:	4b02      	ldr	r3, [pc, #8]	; (80907c4 <LED_RGB_IsOverRidden+0xc>)
 80907bc:	681b      	ldr	r3, [r3, #0]
 80907be:	699b      	ldr	r3, [r3, #24]
 80907c0:	9301      	str	r3, [sp, #4]
 80907c2:	bd08      	pop	{r3, pc}
 80907c4:	080201a0 	.word	0x080201a0

080907c8 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
 80907c8:	b508      	push	{r3, lr}
 80907ca:	4b02      	ldr	r3, [pc, #8]	; (80907d4 <LED_On+0xc>)
 80907cc:	681b      	ldr	r3, [r3, #0]
 80907ce:	69db      	ldr	r3, [r3, #28]
 80907d0:	9301      	str	r3, [sp, #4]
 80907d2:	bd08      	pop	{r3, pc}
 80907d4:	080201a0 	.word	0x080201a0

080907d8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80907d8:	b508      	push	{r3, lr}
 80907da:	4b02      	ldr	r3, [pc, #8]	; (80907e4 <log_message+0xc>)
 80907dc:	681b      	ldr	r3, [r3, #0]
 80907de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80907e0:	9301      	str	r3, [sp, #4]
 80907e2:	bd08      	pop	{r3, pc}
 80907e4:	080201a0 	.word	0x080201a0

080907e8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80907e8:	b508      	push	{r3, lr}
 80907ea:	4b02      	ldr	r3, [pc, #8]	; (80907f4 <set_system_mode+0xc>)
 80907ec:	681b      	ldr	r3, [r3, #0]
 80907ee:	685b      	ldr	r3, [r3, #4]
 80907f0:	9301      	str	r3, [sp, #4]
 80907f2:	bd08      	pop	{r3, pc}
 80907f4:	080401a4 	.word	0x080401a4

080907f8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80907f8:	b508      	push	{r3, lr}
 80907fa:	4b02      	ldr	r3, [pc, #8]	; (8090804 <system_delay_ms+0xc>)
 80907fc:	681b      	ldr	r3, [r3, #0]
 80907fe:	695b      	ldr	r3, [r3, #20]
 8090800:	9301      	str	r3, [sp, #4]
 8090802:	bd08      	pop	{r3, pc}
 8090804:	080401a4 	.word	0x080401a4

08090808 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, void(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, void(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 8090808:	b508      	push	{r3, lr}
 809080a:	4b02      	ldr	r3, [pc, #8]	; (8090814 <system_thread_set_state+0xc>)
 809080c:	681b      	ldr	r3, [r3, #0]
 809080e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8090810:	9301      	str	r3, [sp, #4]
 8090812:	bd08      	pop	{r3, pc}
 8090814:	080401a4 	.word	0x080401a4

08090818 <system_set_usb_request_app_handler>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
DYNALIB_FN(24, system, main_thread_current, uint8_t(void*))

#ifdef USB_VENDOR_REQUEST_ENABLE
DYNALIB_FN(25, system, system_set_usb_request_app_handler, void(usb_request_app_handler_type, void*))
 8090818:	b508      	push	{r3, lr}
 809081a:	4b02      	ldr	r3, [pc, #8]	; (8090824 <system_set_usb_request_app_handler+0xc>)
 809081c:	681b      	ldr	r3, [r3, #0]
 809081e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8090820:	9301      	str	r3, [sp, #4]
 8090822:	bd08      	pop	{r3, pc}
 8090824:	080401a4 	.word	0x080401a4

08090828 <system_set_usb_request_result>:
DYNALIB_FN(26, system, system_set_usb_request_result, void(USBRequest*, int, void*))
 8090828:	b508      	push	{r3, lr}
 809082a:	4b02      	ldr	r3, [pc, #8]	; (8090834 <system_set_usb_request_result+0xc>)
 809082c:	681b      	ldr	r3, [r3, #0]
 809082e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8090830:	9301      	str	r3, [sp, #4]
 8090832:	bd08      	pop	{r3, pc}
 8090834:	080401a4 	.word	0x080401a4

08090838 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8090838:	b508      	push	{r3, lr}
 809083a:	4b02      	ldr	r3, [pc, #8]	; (8090844 <network_connect+0xc>)
 809083c:	681b      	ldr	r3, [r3, #0]
 809083e:	685b      	ldr	r3, [r3, #4]
 8090840:	9301      	str	r3, [sp, #4]
 8090842:	bd08      	pop	{r3, pc}
 8090844:	080401c8 	.word	0x080401c8

08090848 <network_ready>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8090848:	b508      	push	{r3, lr}
 809084a:	4b02      	ldr	r3, [pc, #8]	; (8090854 <network_ready+0xc>)
 809084c:	681b      	ldr	r3, [r3, #0]
 809084e:	691b      	ldr	r3, [r3, #16]
 8090850:	9301      	str	r3, [sp, #4]
 8090852:	bd08      	pop	{r3, pc}
 8090854:	080401c8 	.word	0x080401c8

08090858 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8090858:	b508      	push	{r3, lr}
 809085a:	4b02      	ldr	r3, [pc, #8]	; (8090864 <network_on+0xc>)
 809085c:	681b      	ldr	r3, [r3, #0]
 809085e:	695b      	ldr	r3, [r3, #20]
 8090860:	9301      	str	r3, [sp, #4]
 8090862:	bd08      	pop	{r3, pc}
 8090864:	080401c8 	.word	0x080401c8

08090868 <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8090868:	b508      	push	{r3, lr}
 809086a:	4b02      	ldr	r3, [pc, #8]	; (8090874 <malloc+0xc>)
 809086c:	681b      	ldr	r3, [r3, #0]
 809086e:	681b      	ldr	r3, [r3, #0]
 8090870:	9301      	str	r3, [sp, #4]
 8090872:	bd08      	pop	{r3, pc}
 8090874:	080401a0 	.word	0x080401a0

08090878 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8090878:	b508      	push	{r3, lr}
 809087a:	4b02      	ldr	r3, [pc, #8]	; (8090884 <free+0xc>)
 809087c:	681b      	ldr	r3, [r3, #0]
 809087e:	685b      	ldr	r3, [r3, #4]
 8090880:	9301      	str	r3, [sp, #4]
 8090882:	bd08      	pop	{r3, pc}
 8090884:	080401a0 	.word	0x080401a0

08090888 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8090888:	b508      	push	{r3, lr}
 809088a:	4b02      	ldr	r3, [pc, #8]	; (8090894 <realloc+0xc>)
 809088c:	681b      	ldr	r3, [r3, #0]
 809088e:	689b      	ldr	r3, [r3, #8]
 8090890:	9301      	str	r3, [sp, #4]
 8090892:	bd08      	pop	{r3, pc}
 8090894:	080401a0 	.word	0x080401a0

08090898 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 8090898:	b508      	push	{r3, lr}
 809089a:	4b02      	ldr	r3, [pc, #8]	; (80908a4 <sprintf+0xc>)
 809089c:	681b      	ldr	r3, [r3, #0]
 809089e:	68db      	ldr	r3, [r3, #12]
 80908a0:	9301      	str	r3, [sp, #4]
 80908a2:	bd08      	pop	{r3, pc}
 80908a4:	080401a0 	.word	0x080401a0

080908a8 <snprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80908a8:	b508      	push	{r3, lr}
 80908aa:	4b02      	ldr	r3, [pc, #8]	; (80908b4 <snprintf+0xc>)
 80908ac:	681b      	ldr	r3, [r3, #0]
 80908ae:	69db      	ldr	r3, [r3, #28]
 80908b0:	9301      	str	r3, [sp, #4]
 80908b2:	bd08      	pop	{r3, pc}
 80908b4:	080401a0 	.word	0x080401a0

080908b8 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80908b8:	b508      	push	{r3, lr}
 80908ba:	4b02      	ldr	r3, [pc, #8]	; (80908c4 <abort+0xc>)
 80908bc:	681b      	ldr	r3, [r3, #0]
 80908be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80908c0:	9301      	str	r3, [sp, #4]
 80908c2:	bd08      	pop	{r3, pc}
 80908c4:	080401a0 	.word	0x080401a0

080908c8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80908c8:	b508      	push	{r3, lr}
 80908ca:	4b02      	ldr	r3, [pc, #8]	; (80908d4 <_malloc_r+0xc>)
 80908cc:	681b      	ldr	r3, [r3, #0]
 80908ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80908d0:	9301      	str	r3, [sp, #4]
 80908d2:	bd08      	pop	{r3, pc}
 80908d4:	080401a0 	.word	0x080401a0

080908d8 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80908d8:	4770      	bx	lr

080908da <_ZN8SPIClassD0Ev>:
 80908da:	b510      	push	{r4, lr}
 80908dc:	4604      	mov	r4, r0
 80908de:	f7ef fbe0 	bl	80800a2 <_ZdlPv>
 80908e2:	4620      	mov	r0, r4
 80908e4:	bd10      	pop	{r4, pc}
	...

080908e8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80908e8:	b570      	push	{r4, r5, r6, lr}
 80908ea:	4604      	mov	r4, r0
 80908ec:	460e      	mov	r6, r1
 80908ee:	4b07      	ldr	r3, [pc, #28]	; (809090c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80908f0:	2500      	movs	r5, #0
 80908f2:	6003      	str	r3, [r0, #0]
 80908f4:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80908f8:	f7ff fdee 	bl	80904d8 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80908fc:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80908fe:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 8090900:	f7ff fd7a 	bl	80903f8 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 8090904:	60a5      	str	r5, [r4, #8]
}
 8090906:	4620      	mov	r0, r4
 8090908:	bd70      	pop	{r4, r5, r6, pc}
 809090a:	bf00      	nop
 809090c:	08095b90 	.word	0x08095b90

08090910 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 8090910:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8090914:	7900      	ldrb	r0, [r0, #4]
 8090916:	f7ff bd47 	b.w	80903a8 <HAL_SPI_Begin>

0809091a <_ZN8SPIClass5beginEt>:
}

void SPIClass::begin(uint16_t ss_pin)
{
  if (ss_pin >= TOTAL_PINS)
 809091a:	292e      	cmp	r1, #46	; 0x2e
 809091c:	d802      	bhi.n	8090924 <_ZN8SPIClass5beginEt+0xa>
  {
    return;
  }

  HAL_SPI_Begin(_spi, ss_pin);
 809091e:	7900      	ldrb	r0, [r0, #4]
 8090920:	f7ff bd42 	b.w	80903a8 <HAL_SPI_Begin>
 8090924:	4770      	bx	lr

08090926 <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 8090926:	7900      	ldrb	r0, [r0, #4]
 8090928:	f7ff bd46 	b.w	80903b8 <HAL_SPI_Set_Bit_Order>

0809092c <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 809092c:	7900      	ldrb	r0, [r0, #4]
 809092e:	f7ff bd4b 	b.w	80903c8 <HAL_SPI_Set_Data_Mode>
	...

08090934 <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 8090934:	4a05      	ldr	r2, [pc, #20]	; (809094c <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
 8090936:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 8090938:	5c99      	ldrb	r1, [r3, r2]
 809093a:	4281      	cmp	r1, r0
 809093c:	d002      	beq.n	8090944 <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
 809093e:	3301      	adds	r3, #1
 8090940:	2b08      	cmp	r3, #8
 8090942:	d1f9      	bne.n	8090938 <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
 8090944:	1c58      	adds	r0, r3, #1
}
 8090946:	b2c0      	uxtb	r0, r0
 8090948:	4770      	bx	lr
 809094a:	bf00      	nop
 809094c:	08095b98 	.word	0x08095b98

08090950 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 8090950:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 8090952:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 8090954:	6018      	str	r0, [r3, #0]
 8090956:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 8090958:	6818      	ldr	r0, [r3, #0]
 809095a:	b2e5      	uxtb	r5, r4
 809095c:	4288      	cmp	r0, r1
 809095e:	d906      	bls.n	809096e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 8090960:	3401      	adds	r4, #1
 8090962:	2c08      	cmp	r4, #8
 8090964:	d002      	beq.n	809096c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 8090966:	0840      	lsrs	r0, r0, #1
 8090968:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 809096a:	e7f5      	b.n	8090958 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 809096c:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 809096e:	4b02      	ldr	r3, [pc, #8]	; (8090978 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 8090970:	5d5b      	ldrb	r3, [r3, r5]
 8090972:	7013      	strb	r3, [r2, #0]
 8090974:	bd30      	pop	{r4, r5, pc}
 8090976:	bf00      	nop
 8090978:	08095b98 	.word	0x08095b98

0809097c <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 809097c:	b570      	push	{r4, r5, r6, lr}
 809097e:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 8090980:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 8090984:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 8090986:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 8090988:	2214      	movs	r2, #20
 809098a:	2100      	movs	r1, #0
 809098c:	a803      	add	r0, sp, #12
 809098e:	f001 fd02 	bl	8092396 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 8090992:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 8090994:	a903      	add	r1, sp, #12
 8090996:	4630      	mov	r0, r6
 8090998:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 809099a:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 809099e:	f7ff fd3b 	bl	8090418 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 80909a2:	ab02      	add	r3, sp, #8
 80909a4:	f10d 0207 	add.w	r2, sp, #7
 80909a8:	4629      	mov	r1, r5
 80909aa:	9804      	ldr	r0, [sp, #16]
 80909ac:	f7ff ffd0 	bl	8090950 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 80909b0:	7920      	ldrb	r0, [r4, #4]
 80909b2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80909b6:	f7ff fd0f 	bl	80903d8 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 80909ba:	9802      	ldr	r0, [sp, #8]
 80909bc:	b008      	add	sp, #32
 80909be:	bd70      	pop	{r4, r5, r6, pc}

080909c0 <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80909c0:	b538      	push	{r3, r4, r5, lr}
 80909c2:	4604      	mov	r4, r0
    if (dividerReference)
 80909c4:	68a5      	ldr	r5, [r4, #8]
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80909c6:	4608      	mov	r0, r1
    if (dividerReference)
 80909c8:	b14d      	cbz	r5, 80909de <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
 80909ca:	f7ff ffb3 	bl	8090934 <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80909ce:	2201      	movs	r2, #1
 80909d0:	fa25 f100 	lsr.w	r1, r5, r0
 80909d4:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
 80909d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80909da:	f7ff bfcf 	b.w	809097c <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80909de:	7920      	ldrb	r0, [r4, #4]
    }
}
 80909e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80909e4:	f7ff bcf8 	b.w	80903d8 <HAL_SPI_Set_Clock_Divider>

080909e8 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80909e8:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 80909ea:	7900      	ldrb	r0, [r0, #4]
 80909ec:	f7ff fcfc 	bl	80903e8 <HAL_SPI_Send_Receive_Data>
}
 80909f0:	b2c0      	uxtb	r0, r0
 80909f2:	bd08      	pop	{r3, pc}

080909f4 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 80909f4:	b530      	push	{r4, r5, lr}
 80909f6:	b087      	sub	sp, #28
 80909f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80909fa:	4604      	mov	r4, r0
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
 80909fc:	7900      	ldrb	r0, [r0, #4]
 80909fe:	9500      	str	r5, [sp, #0]
 8090a00:	f7ff fd12 	bl	8090428 <HAL_SPI_DMA_Transfer>
  if (user_callback == NULL) {
 8090a04:	b93d      	cbnz	r5, 8090a16 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    HAL_SPI_TransferStatus st;
    do {
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
 8090a06:	a902      	add	r1, sp, #8
 8090a08:	7920      	ldrb	r0, [r4, #4]
 8090a0a:	f7ff fd15 	bl	8090438 <HAL_SPI_DMA_Transfer_Status>
void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
  if (user_callback == NULL) {
    HAL_SPI_TransferStatus st;
    do {
 8090a0e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8090a12:	07db      	lsls	r3, r3, #31
 8090a14:	d4f7      	bmi.n	8090a06 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
    } while(st.transfer_ongoing);
  }
}
 8090a16:	b007      	add	sp, #28
 8090a18:	bd30      	pop	{r4, r5, pc}

08090a1a <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 8090a1a:	7900      	ldrb	r0, [r0, #4]
 8090a1c:	f7ff bcf4 	b.w	8090408 <HAL_SPI_Is_Enabled>

08090a20 <_GLOBAL__sub_I_System>:

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8090a20:	2000      	movs	r0, #0
 8090a22:	f7ff bee1 	b.w	80907e8 <set_system_mode>

08090a26 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 8090a26:	b513      	push	{r0, r1, r4, lr}
 8090a28:	ab02      	add	r3, sp, #8
        return write(&b, 1);
 8090a2a:	6802      	ldr	r2, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 8090a2c:	f803 1d01 	strb.w	r1, [r3, #-1]!
        return write(&b, 1);
 8090a30:	68d4      	ldr	r4, [r2, #12]
 8090a32:	4619      	mov	r1, r3
 8090a34:	2201      	movs	r2, #1
 8090a36:	47a0      	blx	r4
}
 8090a38:	b002      	add	sp, #8
 8090a3a:	bd10      	pop	{r4, pc}

08090a3c <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 8090a3c:	4770      	bx	lr
	...

08090a40 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 8090a40:	694a      	ldr	r2, [r1, #20]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 8090a42:	4903      	ldr	r1, [pc, #12]	; (8090a50 <_ZN9TCPClient8remoteIPEv+0x10>)
 8090a44:	6001      	str	r1, [r0, #0]
 8090a46:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8090a4a:	6042      	str	r2, [r0, #4]
    return d_->remoteIP;
}
 8090a4c:	4770      	bx	lr
 8090a4e:	bf00      	nop
 8090a50:	08095da0 	.word	0x08095da0

08090a54 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 8090a54:	4770      	bx	lr

08090a56 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 8090a56:	2000      	movs	r0, #0
 8090a58:	4770      	bx	lr

08090a5a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 8090a5a:	b510      	push	{r4, lr}
 8090a5c:	4604      	mov	r4, r0
 8090a5e:	f7ef fb20 	bl	80800a2 <_ZdlPv>
 8090a62:	4620      	mov	r0, r4
 8090a64:	bd10      	pop	{r4, pc}

08090a66 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 8090a66:	f7ef bb1c 	b.w	80800a2 <_ZdlPv>
	...

08090a6c <_ZN9TCPClient7connectEPKctm>:
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 8090a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8090a70:	461f      	mov	r7, r3
    stop();
 8090a72:	6803      	ldr	r3, [r0, #0]
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 8090a74:	b08c      	sub	sp, #48	; 0x30
    stop();
 8090a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 8090a78:	4606      	mov	r6, r0
 8090a7a:	460c      	mov	r4, r1
 8090a7c:	4690      	mov	r8, r2
    stop();
 8090a7e:	4798      	blx	r3
      int rv = 0;
      if(Network.ready())
 8090a80:	4b18      	ldr	r3, [pc, #96]	; (8090ae4 <_ZN9TCPClient7connectEPKctm+0x78>)
 8090a82:	6818      	ldr	r0, [r3, #0]
 8090a84:	6803      	ldr	r3, [r0, #0]
 8090a86:	681b      	ldr	r3, [r3, #0]
 8090a88:	4798      	blx	r3
 8090a8a:	b338      	cbz	r0, 8090adc <_ZN9TCPClient7connectEPKctm+0x70>
      {
        IPAddress ip_addr;
 8090a8c:	a802      	add	r0, sp, #8
 8090a8e:	f000 fc65 	bl	809135c <_ZN9IPAddressC1Ev>

        if((rv = inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL)) == 0)
 8090a92:	4620      	mov	r0, r4
 8090a94:	f001 fcb6 	bl	8092404 <strlen>
 8090a98:	2500      	movs	r5, #0
 8090a9a:	b281      	uxth	r1, r0
 8090a9c:	9500      	str	r5, [sp, #0]
 8090a9e:	4620      	mov	r0, r4
 8090aa0:	463b      	mov	r3, r7
 8090aa2:	aa03      	add	r2, sp, #12
 8090aa4:	f7ff fe30 	bl	8090708 <inet_gethostbyname>
 8090aa8:	4604      	mov	r4, r0
 8090aaa:	b958      	cbnz	r0, 8090ac4 <_ZN9TCPClient7connectEPKctm+0x58>
        {
                return connect(ip_addr, port, nif);
 8090aac:	6833      	ldr	r3, [r6, #0]
 8090aae:	4642      	mov	r2, r8
 8090ab0:	6a1c      	ldr	r4, [r3, #32]
 8090ab2:	4b0d      	ldr	r3, [pc, #52]	; (8090ae8 <_ZN9TCPClient7connectEPKctm+0x7c>)
 8090ab4:	a904      	add	r1, sp, #16
 8090ab6:	9304      	str	r3, [sp, #16]
 8090ab8:	9b03      	ldr	r3, [sp, #12]
 8090aba:	4630      	mov	r0, r6
 8090abc:	9305      	str	r3, [sp, #20]
 8090abe:	463b      	mov	r3, r7
 8090ac0:	47a0      	blx	r4
 8090ac2:	e00b      	b.n	8090adc <_ZN9TCPClient7connectEPKctm+0x70>
        }
        else
            DEBUG("unable to get IP for hostname");
 8090ac4:	2320      	movs	r3, #32
 8090ac6:	9304      	str	r3, [sp, #16]
 8090ac8:	4b08      	ldr	r3, [pc, #32]	; (8090aec <_ZN9TCPClient7connectEPKctm+0x80>)
 8090aca:	2001      	movs	r0, #1
 8090acc:	9300      	str	r3, [sp, #0]
 8090ace:	aa04      	add	r2, sp, #16
 8090ad0:	462b      	mov	r3, r5
 8090ad2:	4907      	ldr	r1, [pc, #28]	; (8090af0 <_ZN9TCPClient7connectEPKctm+0x84>)
 8090ad4:	9505      	str	r5, [sp, #20]
 8090ad6:	f7ff fe7f 	bl	80907d8 <log_message>
 8090ada:	4620      	mov	r0, r4
      }
      return rv;
}
 8090adc:	b00c      	add	sp, #48	; 0x30
 8090ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8090ae2:	bf00      	nop
 8090ae4:	08095de8 	.word	0x08095de8
 8090ae8:	08095da0 	.word	0x08095da0
 8090aec:	08095c07 	.word	0x08095c07
 8090af0:	08095c00 	.word	0x08095c00

08090af4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.32>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 8090af4:	b510      	push	{r4, lr}
 8090af6:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 8090af8:	6803      	ldr	r3, [r0, #0]
 8090afa:	689b      	ldr	r3, [r3, #8]
 8090afc:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8090afe:	68a3      	ldr	r3, [r4, #8]
 8090b00:	3b01      	subs	r3, #1
 8090b02:	60a3      	str	r3, [r4, #8]
 8090b04:	b92b      	cbnz	r3, 8090b12 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.32+0x1e>
            _M_destroy();
 8090b06:	6823      	ldr	r3, [r4, #0]
 8090b08:	4620      	mov	r0, r4
        }
    }
 8090b0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 8090b0e:	68db      	ldr	r3, [r3, #12]
 8090b10:	4718      	bx	r3
 8090b12:	bd10      	pop	{r4, pc}

08090b14 <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 8090b14:	b510      	push	{r4, lr}
 8090b16:	6943      	ldr	r3, [r0, #20]
 8090b18:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 8090b1a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8090b1e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8090b22:	429a      	cmp	r2, r3
 8090b24:	d005      	beq.n	8090b32 <_ZN9TCPClient4peekEv+0x1e>
 8090b26:	6962      	ldr	r2, [r4, #20]
 8090b28:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 8090b2c:	4413      	add	r3, r2
 8090b2e:	7918      	ldrb	r0, [r3, #4]
 8090b30:	bd10      	pop	{r4, pc}
 8090b32:	6803      	ldr	r3, [r0, #0]
 8090b34:	691b      	ldr	r3, [r3, #16]
 8090b36:	4798      	blx	r3
 8090b38:	2800      	cmp	r0, #0
 8090b3a:	d1f4      	bne.n	8090b26 <_ZN9TCPClient4peekEv+0x12>
 8090b3c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8090b40:	bd10      	pop	{r4, pc}

08090b42 <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 8090b42:	b510      	push	{r4, lr}
 8090b44:	6943      	ldr	r3, [r0, #20]
 8090b46:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 8090b48:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8090b4c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8090b50:	429a      	cmp	r2, r3
 8090b52:	d008      	beq.n	8090b66 <_ZN9TCPClient4readEv+0x24>
 8090b54:	6962      	ldr	r2, [r4, #20]
 8090b56:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 8090b5a:	1c59      	adds	r1, r3, #1
 8090b5c:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 8090b60:	4413      	add	r3, r2
 8090b62:	7918      	ldrb	r0, [r3, #4]
 8090b64:	bd10      	pop	{r4, pc}
 8090b66:	6803      	ldr	r3, [r0, #0]
 8090b68:	691b      	ldr	r3, [r3, #16]
 8090b6a:	4798      	blx	r3
 8090b6c:	2800      	cmp	r0, #0
 8090b6e:	d1f1      	bne.n	8090b54 <_ZN9TCPClient4readEv+0x12>
 8090b70:	f04f 30ff 	mov.w	r0, #4294967295
}
 8090b74:	bd10      	pop	{r4, pc}

08090b76 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 8090b76:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8090b78:	6904      	ldr	r4, [r0, #16]
                offset(0),
                total(0) {
        }

        ~Data() {
            if (socket_handle_valid(sock)) {
 8090b7a:	6820      	ldr	r0, [r4, #0]
 8090b7c:	f7ff fd7c 	bl	8090678 <socket_handle_valid>
 8090b80:	b110      	cbz	r0, 8090b88 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x12>
                socket_close(sock);
 8090b82:	6820      	ldr	r0, [r4, #0]
 8090b84:	f7ff fda0 	bl	80906c8 <socket_close>
 8090b88:	4620      	mov	r0, r4
 8090b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8090b8e:	f7ef ba88 	b.w	80800a2 <_ZdlPv>

08090b92 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 8090b92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8090b94:	6943      	ldr	r3, [r0, #20]
 8090b96:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 8090b98:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8090b9c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 8090ba0:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 8090ba2:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 8090ba4:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 8090ba6:	d106      	bne.n	8090bb6 <_ZN9TCPClient4readEPhj+0x24>
 8090ba8:	6803      	ldr	r3, [r0, #0]
 8090baa:	691b      	ldr	r3, [r3, #16]
 8090bac:	4798      	blx	r3
 8090bae:	b910      	cbnz	r0, 8090bb6 <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 8090bb0:	f04f 34ff 	mov.w	r4, #4294967295
 8090bb4:	e014      	b.n	8090be0 <_ZN9TCPClient4readEPhj+0x4e>
 8090bb6:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 8090bb8:	4630      	mov	r0, r6
        return status() ? socket_send(d_->sock, buffer, size) : -1;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 8090bba:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 8090bbe:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 8090bc2:	4419      	add	r1, r3
        return status() ? socket_send(d_->sock, buffer, size) : -1;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 8090bc4:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 8090bc6:	42bc      	cmp	r4, r7
 8090bc8:	bf28      	it	cs
 8090bca:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 8090bcc:	3104      	adds	r1, #4
 8090bce:	4622      	mov	r2, r4
 8090bd0:	f001 fbbb 	bl	809234a <memcpy>
 8090bd4:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 8090bd6:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 8090bda:	4423      	add	r3, r4
 8090bdc:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 8090be0:	4620      	mov	r0, r4
 8090be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08090be4 <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 8090be4:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 8090be6:	2300      	movs	r3, #0
 8090be8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 8090bec:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 8090bee:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 8090bf2:	4770      	bx	lr

08090bf4 <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 8090bf4:	b530      	push	{r4, r5, lr}
 8090bf6:	6942      	ldr	r2, [r0, #20]
 8090bf8:	b08b      	sub	sp, #44	; 0x2c
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 8090bfa:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 8090bfe:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 8090c00:	b11b      	cbz	r3, 8090c0a <_ZN9TCPClient9availableEv+0x16>
 8090c02:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 8090c06:	429a      	cmp	r2, r3
 8090c08:	d00b      	beq.n	8090c22 <_ZN9TCPClient9availableEv+0x2e>
    }


    static NetworkClass& from(network_interface_t nif) {
        // hard-code for now until multiple-networks are implemented.
        return Network;
 8090c0a:	4b1f      	ldr	r3, [pc, #124]	; (8090c88 <_ZN9TCPClient9availableEv+0x94>)
 8090c0c:	6818      	ldr	r0, [r3, #0]
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 8090c0e:	6803      	ldr	r3, [r0, #0]
 8090c10:	681b      	ldr	r3, [r3, #0]
 8090c12:	4798      	blx	r3
 8090c14:	b378      	cbz	r0, 8090c76 <_ZN9TCPClient9availableEv+0x82>
 8090c16:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 8090c18:	6818      	ldr	r0, [r3, #0]
 8090c1a:	f7ff fd2d 	bl	8090678 <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 8090c1e:	b918      	cbnz	r0, 8090c28 <_ZN9TCPClient9availableEv+0x34>
 8090c20:	e029      	b.n	8090c76 <_ZN9TCPClient9availableEv+0x82>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 8090c22:	f7ff ffdf 	bl	8090be4 <_ZN9TCPClient12flush_bufferEv>
 8090c26:	e7f0      	b.n	8090c0a <_ZN9TCPClient9availableEv+0x16>
 8090c28:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 8090c2a:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 8090c2e:	297f      	cmp	r1, #127	; 0x7f
 8090c30:	d821      	bhi.n	8090c76 <_ZN9TCPClient9availableEv+0x82>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 8090c32:	1d05      	adds	r5, r0, #4
 8090c34:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 8090c38:	2300      	movs	r3, #0
 8090c3a:	4429      	add	r1, r5
 8090c3c:	6800      	ldr	r0, [r0, #0]
 8090c3e:	f7ff fd33 	bl	80906a8 <socket_receive>
            if (ret > 0)
 8090c42:	1e05      	subs	r5, r0, #0
 8090c44:	dd17      	ble.n	8090c76 <_ZN9TCPClient9availableEv+0x82>
            {
                DEBUG("recv(=%d)",ret);
 8090c46:	4a11      	ldr	r2, [pc, #68]	; (8090c8c <_ZN9TCPClient9availableEv+0x98>)
 8090c48:	2320      	movs	r3, #32
 8090c4a:	9302      	str	r3, [sp, #8]
 8090c4c:	9200      	str	r2, [sp, #0]
 8090c4e:	2300      	movs	r3, #0
 8090c50:	aa02      	add	r2, sp, #8
 8090c52:	9501      	str	r5, [sp, #4]
 8090c54:	490e      	ldr	r1, [pc, #56]	; (8090c90 <_ZN9TCPClient9availableEv+0x9c>)
 8090c56:	2001      	movs	r0, #1
 8090c58:	9303      	str	r3, [sp, #12]
 8090c5a:	f7ff fdbd 	bl	80907d8 <log_message>
 8090c5e:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) d_->offset = 0;
 8090c60:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8090c64:	b90a      	cbnz	r2, 8090c6a <_ZN9TCPClient9availableEv+0x76>
 8090c66:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8090c6a:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
 8090c6c:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
 8090c70:	4428      	add	r0, r5
 8090c72:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
 8090c76:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 8090c78:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 8090c7c:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 8090c80:	1a18      	subs	r0, r3, r0
}
 8090c82:	b00b      	add	sp, #44	; 0x2c
 8090c84:	bd30      	pop	{r4, r5, pc}
 8090c86:	bf00      	nop
 8090c88:	08095de8 	.word	0x08095de8
 8090c8c:	08095c25 	.word	0x08095c25
 8090c90:	08095c00 	.word	0x08095c00

08090c94 <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 8090c94:	b530      	push	{r4, r5, lr}
 8090c96:	4604      	mov	r4, r0
 8090c98:	b08b      	sub	sp, #44	; 0x2c
  DEBUG("sock %d closesocket", d_->sock);
 8090c9a:	2320      	movs	r3, #32
 8090c9c:	6942      	ldr	r2, [r0, #20]
 8090c9e:	9302      	str	r3, [sp, #8]
 8090ca0:	2300      	movs	r3, #0
 8090ca2:	9303      	str	r3, [sp, #12]
 8090ca4:	6812      	ldr	r2, [r2, #0]
 8090ca6:	2001      	movs	r0, #1
 8090ca8:	9201      	str	r2, [sp, #4]
 8090caa:	4a0e      	ldr	r2, [pc, #56]	; (8090ce4 <_ZN9TCPClient4stopEv+0x50>)
 8090cac:	490e      	ldr	r1, [pc, #56]	; (8090ce8 <_ZN9TCPClient4stopEv+0x54>)
 8090cae:	9200      	str	r2, [sp, #0]
 8090cb0:	aa02      	add	r2, sp, #8
 8090cb2:	f7ff fd91 	bl	80907d8 <log_message>

  if (isOpen(d_->sock))
 8090cb6:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 8090cb8:	6818      	ldr	r0, [r3, #0]
 8090cba:	f7ff fcdd 	bl	8090678 <socket_handle_valid>

void TCPClient::stop()
{
  DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 8090cbe:	b118      	cbz	r0, 8090cc8 <_ZN9TCPClient4stopEv+0x34>
      socket_close(d_->sock);
 8090cc0:	6963      	ldr	r3, [r4, #20]
 8090cc2:	6818      	ldr	r0, [r3, #0]
 8090cc4:	f7ff fd00 	bl	80906c8 <socket_close>
 8090cc8:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 8090cca:	f7ff fd05 	bl	80906d8 <socket_handle_invalid>
 8090cce:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8090cd0:	6963      	ldr	r3, [r4, #20]
 8090cd2:	2200      	movs	r2, #0
 8090cd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  d_->remoteIP.clear();
  flush_buffer();
 8090cd8:	4620      	mov	r0, r4
 8090cda:	f7ff ff83 	bl	8090be4 <_ZN9TCPClient12flush_bufferEv>
}
 8090cde:	b00b      	add	sp, #44	; 0x2c
 8090ce0:	bd30      	pop	{r4, r5, pc}
 8090ce2:	bf00      	nop
 8090ce4:	08095c2f 	.word	0x08095c2f
 8090ce8:	08095c00 	.word	0x08095c00

08090cec <_ZN9TCPClientC1Em>:

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 8090cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8090cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8090cf2:	6083      	str	r3, [r0, #8]
        d_(std::make_shared<Data>(sock))
 8090cf4:	4b17      	ldr	r3, [pc, #92]	; (8090d54 <_ZN9TCPClientC1Em+0x68>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8090cf6:	2600      	movs	r6, #0
 8090cf8:	6046      	str	r6, [r0, #4]
 8090cfa:	6003      	str	r3, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 8090cfc:	6146      	str	r6, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 8090cfe:	6186      	str	r6, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 8090d00:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8090d02:	2090      	movs	r0, #144	; 0x90
 8090d04:	460f      	mov	r7, r1
 8090d06:	f7ef f9c8 	bl	808009a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8090d0a:	4605      	mov	r5, r0
 8090d0c:	b138      	cbz	r0, 8090d1e <_ZN9TCPClientC1Em+0x32>
        IPAddress remoteIP;

        explicit Data(sock_handle_t sock) :
                sock(sock),
                offset(0),
                total(0) {
 8090d0e:	6007      	str	r7, [r0, #0]
 8090d10:	f8a0 6084 	strh.w	r6, [r0, #132]	; 0x84
 8090d14:	f8a0 6086 	strh.w	r6, [r0, #134]	; 0x86
 8090d18:	3088      	adds	r0, #136	; 0x88
 8090d1a:	f000 fb1f 	bl	809135c <_ZN9IPAddressC1Ev>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8090d1e:	2014      	movs	r0, #20
 8090d20:	f7ef f9bb 	bl	808009a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 8090d24:	4603      	mov	r3, r0
 8090d26:	b128      	cbz	r0, 8090d34 <_ZN9TCPClientC1Em+0x48>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 8090d28:	2201      	movs	r2, #1
 8090d2a:	6042      	str	r2, [r0, #4]
 8090d2c:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 8090d2e:	4a0a      	ldr	r2, [pc, #40]	; (8090d58 <_ZN9TCPClientC1Em+0x6c>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 8090d30:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 8090d32:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 8090d34:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 8090d36:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 8090d38:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 8090d3a:	b128      	cbz	r0, 8090d48 <_ZN9TCPClientC1Em+0x5c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8090d3c:	6843      	ldr	r3, [r0, #4]
 8090d3e:	3b01      	subs	r3, #1
 8090d40:	6043      	str	r3, [r0, #4]
 8090d42:	b90b      	cbnz	r3, 8090d48 <_ZN9TCPClientC1Em+0x5c>
 8090d44:	f7ff fed6 	bl	8090af4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.32>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 8090d48:	4620      	mov	r0, r4
 8090d4a:	f7ff ff4b 	bl	8090be4 <_ZN9TCPClient12flush_bufferEv>
}
 8090d4e:	4620      	mov	r0, r4
 8090d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8090d52:	bf00      	nop
 8090d54:	08095bc4 	.word	0x08095bc4
 8090d58:	08095ba8 	.word	0x08095ba8

08090d5c <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 8090d5c:	b510      	push	{r4, lr}
 8090d5e:	4604      	mov	r4, r0
 8090d60:	f7ff fcba 	bl	80906d8 <socket_handle_invalid>
 8090d64:	4601      	mov	r1, r0
 8090d66:	4620      	mov	r0, r4
 8090d68:	f7ff ffc0 	bl	8090cec <_ZN9TCPClientC1Em>
{
}
 8090d6c:	4620      	mov	r0, r4
 8090d6e:	bd10      	pop	{r4, pc}

08090d70 <_ZN9TCPClient7connectE9IPAddresstm>:
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 8090d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8090d74:	461f      	mov	r7, r3
    stop();
 8090d76:	6803      	ldr	r3, [r0, #0]
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 8090d78:	b090      	sub	sp, #64	; 0x40
    stop();
 8090d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 8090d7c:	4604      	mov	r4, r0
 8090d7e:	460e      	mov	r6, r1
 8090d80:	4690      	mov	r8, r2
    stop();
 8090d82:	4798      	blx	r3
 8090d84:	4b3d      	ldr	r3, [pc, #244]	; (8090e7c <_ZN9TCPClient7connectE9IPAddresstm+0x10c>)
 8090d86:	6818      	ldr	r0, [r3, #0]
        int connected = 0;
        if(Network.from(nif).ready())
 8090d88:	6803      	ldr	r3, [r0, #0]
 8090d8a:	681b      	ldr	r3, [r3, #0]
 8090d8c:	4798      	blx	r3
 8090d8e:	2800      	cmp	r0, #0
 8090d90:	d071      	beq.n	8090e76 <_ZN9TCPClient7connectE9IPAddresstm+0x106>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 8090d92:	9700      	str	r7, [sp, #0]
 8090d94:	4643      	mov	r3, r8
 8090d96:	2206      	movs	r2, #6
 8090d98:	2101      	movs	r1, #1
 8090d9a:	2002      	movs	r0, #2
 8090d9c:	6965      	ldr	r5, [r4, #20]
 8090d9e:	f7ff fc73 	bl	8090688 <socket_create>
 8090da2:	6028      	str	r0, [r5, #0]
          DEBUG("socket=%d",d_->sock);
 8090da4:	2720      	movs	r7, #32
 8090da6:	2500      	movs	r5, #0
 8090da8:	6963      	ldr	r3, [r4, #20]
 8090daa:	9708      	str	r7, [sp, #32]
 8090dac:	9509      	str	r5, [sp, #36]	; 0x24
 8090dae:	681b      	ldr	r3, [r3, #0]
 8090db0:	2001      	movs	r0, #1
 8090db2:	9301      	str	r3, [sp, #4]
 8090db4:	4b32      	ldr	r3, [pc, #200]	; (8090e80 <_ZN9TCPClient7connectE9IPAddresstm+0x110>)
 8090db6:	eb0d 0207 	add.w	r2, sp, r7
 8090dba:	9300      	str	r3, [sp, #0]
 8090dbc:	4931      	ldr	r1, [pc, #196]	; (8090e84 <_ZN9TCPClient7connectE9IPAddresstm+0x114>)
 8090dbe:	462b      	mov	r3, r5
 8090dc0:	f7ff fd0a 	bl	80907d8 <log_message>

          if (socket_handle_valid(d_->sock))
 8090dc4:	6963      	ldr	r3, [r4, #20]
 8090dc6:	6818      	ldr	r0, [r3, #0]
 8090dc8:	f7ff fc56 	bl	8090678 <socket_handle_valid>
 8090dcc:	2800      	cmp	r0, #0
 8090dce:	d052      	beq.n	8090e76 <_ZN9TCPClient7connectE9IPAddresstm+0x106>
          {
            flush_buffer();
 8090dd0:	4620      	mov	r0, r4
 8090dd2:	f7ff ff07 	bl	8090be4 <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 8090dd6:	2302      	movs	r3, #2
 8090dd8:	f8ad 3010 	strh.w	r3, [sp, #16]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 8090ddc:	ea4f 2318 	mov.w	r3, r8, lsr #8
 8090de0:	f88d 3012 	strb.w	r3, [sp, #18]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 8090de4:	79f3      	ldrb	r3, [r6, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 8090de6:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 8090dea:	f88d 3014 	strb.w	r3, [sp, #20]
            tSocketAddr.sa_data[3] = ip[1];
 8090dee:	79b3      	ldrb	r3, [r6, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 8090df0:	f88d 8013 	strb.w	r8, [sp, #19]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 8090df4:	f88d 3015 	strb.w	r3, [sp, #21]
            tSocketAddr.sa_data[4] = ip[2];
 8090df8:	7973      	ldrb	r3, [r6, #5]
 8090dfa:	f88d 3016 	strb.w	r3, [sp, #22]
            tSocketAddr.sa_data[5] = ip[3];
 8090dfe:	7933      	ldrb	r3, [r6, #4]
 8090e00:	f88d 3017 	strb.w	r3, [sp, #23]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 8090e04:	f7ff fc78 	bl	80906f8 <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
 8090e08:	6963      	ldr	r3, [r4, #20]
 8090e0a:	9708      	str	r7, [sp, #32]
 8090e0c:	9509      	str	r5, [sp, #36]	; 0x24
 8090e0e:	681b      	ldr	r3, [r3, #0]
 8090e10:	eb0d 0207 	add.w	r2, sp, r7
 8090e14:	9301      	str	r3, [sp, #4]
 8090e16:	4b1c      	ldr	r3, [pc, #112]	; (8090e88 <_ZN9TCPClient7connectE9IPAddresstm+0x118>)
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 8090e18:	4680      	mov	r8, r0
            DEBUG("sock %d connect",d_->sock);
 8090e1a:	9300      	str	r3, [sp, #0]
 8090e1c:	4919      	ldr	r1, [pc, #100]	; (8090e84 <_ZN9TCPClient7connectE9IPAddresstm+0x114>)
 8090e1e:	462b      	mov	r3, r5
 8090e20:	2001      	movs	r0, #1
 8090e22:	f7ff fcd9 	bl	80907d8 <log_message>
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 8090e26:	6963      	ldr	r3, [r4, #20]
 8090e28:	2210      	movs	r2, #16
 8090e2a:	eb0d 0102 	add.w	r1, sp, r2
 8090e2e:	6818      	ldr	r0, [r3, #0]
 8090e30:	f7ff fc32 	bl	8090698 <socket_connect>
            DEBUG("sock %d connected=%d",d_->sock, connected);
 8090e34:	9708      	str	r7, [sp, #32]
 8090e36:	4607      	mov	r7, r0
 8090e38:	fab0 f080 	clz	r0, r0
 8090e3c:	6963      	ldr	r3, [r4, #20]
 8090e3e:	0940      	lsrs	r0, r0, #5
 8090e40:	9002      	str	r0, [sp, #8]
 8090e42:	9509      	str	r5, [sp, #36]	; 0x24
 8090e44:	681b      	ldr	r3, [r3, #0]
 8090e46:	aa08      	add	r2, sp, #32
 8090e48:	9301      	str	r3, [sp, #4]
 8090e4a:	4b10      	ldr	r3, [pc, #64]	; (8090e8c <_ZN9TCPClient7connectE9IPAddresstm+0x11c>)
 8090e4c:	490d      	ldr	r1, [pc, #52]	; (8090e84 <_ZN9TCPClient7connectE9IPAddresstm+0x114>)
 8090e4e:	9300      	str	r3, [sp, #0]
 8090e50:	2001      	movs	r0, #1
 8090e52:	462b      	mov	r3, r5
 8090e54:	f7ff fcc0 	bl	80907d8 <log_message>
            HAL_NET_SetNetWatchDog(ot);
 8090e58:	4640      	mov	r0, r8
 8090e5a:	f7ff fc4d 	bl	80906f8 <HAL_NET_SetNetWatchDog>
 8090e5e:	6963      	ldr	r3, [r4, #20]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 8090e60:	6872      	ldr	r2, [r6, #4]
 8090e62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            d_->remoteIP = ip;
            if(!connected)
 8090e66:	b12f      	cbz	r7, 8090e74 <_ZN9TCPClient7connectE9IPAddresstm+0x104>
            {
                stop();
 8090e68:	6823      	ldr	r3, [r4, #0]
 8090e6a:	4620      	mov	r0, r4
 8090e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8090e6e:	4798      	blx	r3
 8090e70:	4628      	mov	r0, r5
 8090e72:	e000      	b.n	8090e76 <_ZN9TCPClient7connectE9IPAddresstm+0x106>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 8090e74:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 8090e76:	b010      	add	sp, #64	; 0x40
 8090e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8090e7c:	08095de8 	.word	0x08095de8
 8090e80:	08095c43 	.word	0x08095c43
 8090e84:	08095c00 	.word	0x08095c00
 8090e88:	08095c4d 	.word	0x08095c4d
 8090e8c:	08095c5d 	.word	0x08095c5d

08090e90 <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 8090e90:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 8090e92:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 8090e94:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 8090e96:	6818      	ldr	r0, [r3, #0]
 8090e98:	f7ff fbee 	bl	8090678 <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 8090e9c:	b908      	cbnz	r0, 8090ea2 <_ZN9TCPClient6statusEv+0x12>
 8090e9e:	2000      	movs	r0, #0
 8090ea0:	bd10      	pop	{r4, pc}
 8090ea2:	4b07      	ldr	r3, [pc, #28]	; (8090ec0 <_ZN9TCPClient6statusEv+0x30>)
 8090ea4:	6818      	ldr	r0, [r3, #0]
 8090ea6:	6803      	ldr	r3, [r0, #0]
 8090ea8:	681b      	ldr	r3, [r3, #0]
 8090eaa:	4798      	blx	r3
 8090eac:	2800      	cmp	r0, #0
 8090eae:	d0f6      	beq.n	8090e9e <_ZN9TCPClient6statusEv+0xe>
 8090eb0:	6963      	ldr	r3, [r4, #20]
 8090eb2:	6818      	ldr	r0, [r3, #0]
 8090eb4:	f7ff fbd8 	bl	8090668 <socket_active_status>
 8090eb8:	fab0 f080 	clz	r0, r0
 8090ebc:	0940      	lsrs	r0, r0, #5
}
 8090ebe:	bd10      	pop	{r4, pc}
 8090ec0:	08095de8 	.word	0x08095de8

08090ec4 <_ZN9TCPClient5writeEPKhj>:
{
        return write(&b, 1);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 8090ec4:	b570      	push	{r4, r5, r6, lr}
 8090ec6:	4606      	mov	r6, r0
 8090ec8:	460c      	mov	r4, r1
 8090eca:	4615      	mov	r5, r2
        return status() ? socket_send(d_->sock, buffer, size) : -1;
 8090ecc:	f7ff ffe0 	bl	8090e90 <_ZN9TCPClient6statusEv>
 8090ed0:	b138      	cbz	r0, 8090ee2 <_ZN9TCPClient5writeEPKhj+0x1e>
 8090ed2:	6973      	ldr	r3, [r6, #20]
 8090ed4:	462a      	mov	r2, r5
 8090ed6:	4621      	mov	r1, r4
}
 8090ed8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return write(&b, 1);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
        return status() ? socket_send(d_->sock, buffer, size) : -1;
 8090edc:	6818      	ldr	r0, [r3, #0]
 8090ede:	f7ff bbeb 	b.w	80906b8 <socket_send>
}
 8090ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8090ee6:	bd70      	pop	{r4, r5, r6, pc}

08090ee8 <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 8090ee8:	b508      	push	{r3, lr}
   return (status()!=0);
 8090eea:	f7ff ffd1 	bl	8090e90 <_ZN9TCPClient6statusEv>
}
 8090eee:	3000      	adds	r0, #0
 8090ef0:	bf18      	it	ne
 8090ef2:	2001      	movne	r0, #1
 8090ef4:	bd08      	pop	{r3, pc}
	...

08090ef8 <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 8090ef8:	b570      	push	{r4, r5, r6, lr}
 8090efa:	b08a      	sub	sp, #40	; 0x28
 8090efc:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 8090efe:	f7ff ffc7 	bl	8090e90 <_ZN9TCPClient6statusEv>
 8090f02:	bb58      	cbnz	r0, 8090f5c <_ZN9TCPClient9connectedEv+0x64>
 8090f04:	6963      	ldr	r3, [r4, #20]
 8090f06:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 8090f0a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 8090f0e:	4291      	cmp	r1, r2
 8090f10:	d124      	bne.n	8090f5c <_ZN9TCPClient9connectedEv+0x64>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 8090f12:	6818      	ldr	r0, [r3, #0]
 8090f14:	f7ff fbb0 	bl	8090678 <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 8090f18:	b130      	cbz	r0, 8090f28 <_ZN9TCPClient9connectedEv+0x30>
 8090f1a:	6963      	ldr	r3, [r4, #20]
 8090f1c:	6818      	ldr	r0, [r3, #0]
 8090f1e:	f7ff fba3 	bl	8090668 <socket_active_status>
 8090f22:	2801      	cmp	r0, #1
 8090f24:	4606      	mov	r6, r0
 8090f26:	d001      	beq.n	8090f2c <_ZN9TCPClient9connectedEv+0x34>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 8090f28:	2500      	movs	r5, #0
 8090f2a:	e018      	b.n	8090f5e <_ZN9TCPClient9connectedEv+0x66>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 8090f2c:	6823      	ldr	r3, [r4, #0]
 8090f2e:	4620      	mov	r0, r4
 8090f30:	691b      	ldr	r3, [r3, #16]
 8090f32:	4798      	blx	r3
 8090f34:	1e03      	subs	r3, r0, #0
 8090f36:	bf14      	ite	ne
 8090f38:	2501      	movne	r5, #1
 8090f3a:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 8090f3c:	d10f      	bne.n	8090f5e <_ZN9TCPClient9connectedEv+0x66>
          DEBUG("caling Stop No more Data and in CLOSE_WAIT");
 8090f3e:	2220      	movs	r2, #32
 8090f40:	9202      	str	r2, [sp, #8]
 8090f42:	4a08      	ldr	r2, [pc, #32]	; (8090f64 <_ZN9TCPClient9connectedEv+0x6c>)
 8090f44:	4630      	mov	r0, r6
 8090f46:	9200      	str	r2, [sp, #0]
 8090f48:	4907      	ldr	r1, [pc, #28]	; (8090f68 <_ZN9TCPClient9connectedEv+0x70>)
 8090f4a:	aa02      	add	r2, sp, #8
 8090f4c:	9303      	str	r3, [sp, #12]
 8090f4e:	f7ff fc43 	bl	80907d8 <log_message>
          stop();       // Close our side
 8090f52:	6823      	ldr	r3, [r4, #0]
 8090f54:	4620      	mov	r0, r4
 8090f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8090f58:	4798      	blx	r3
 8090f5a:	e000      	b.n	8090f5e <_ZN9TCPClient9connectedEv+0x66>
 8090f5c:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 8090f5e:	4628      	mov	r0, r5
 8090f60:	b00a      	add	sp, #40	; 0x28
 8090f62:	bd70      	pop	{r4, r5, r6, pc}
 8090f64:	08095c72 	.word	0x08095c72
 8090f68:	08095c00 	.word	0x08095c00

08090f6c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8090f6c:	b510      	push	{r4, lr}
 8090f6e:	4604      	mov	r4, r0
{
	free(buffer);
 8090f70:	6800      	ldr	r0, [r0, #0]
 8090f72:	f7ff fc81 	bl	8090878 <free>
}
 8090f76:	4620      	mov	r0, r4
 8090f78:	bd10      	pop	{r4, pc}

08090f7a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8090f7a:	b510      	push	{r4, lr}
 8090f7c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8090f7e:	6800      	ldr	r0, [r0, #0]
 8090f80:	b108      	cbz	r0, 8090f86 <_ZN6String10invalidateEv+0xc>
 8090f82:	f7ff fc79 	bl	8090878 <free>
	buffer = NULL;
 8090f86:	2300      	movs	r3, #0
 8090f88:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 8090f8a:	60a3      	str	r3, [r4, #8]
 8090f8c:	6063      	str	r3, [r4, #4]
 8090f8e:	bd10      	pop	{r4, pc}

08090f90 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8090f90:	b538      	push	{r3, r4, r5, lr}
 8090f92:	4604      	mov	r4, r0
 8090f94:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8090f96:	6800      	ldr	r0, [r0, #0]
 8090f98:	3101      	adds	r1, #1
 8090f9a:	f7ff fc75 	bl	8090888 <realloc>
	if (newbuffer) {
 8090f9e:	b110      	cbz	r0, 8090fa6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8090fa0:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 8090fa4:	2001      	movs	r0, #1
	}
	return 0;
}
 8090fa6:	bd38      	pop	{r3, r4, r5, pc}

08090fa8 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8090fa8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8090faa:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8090fac:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8090fae:	b113      	cbz	r3, 8090fb6 <_ZN6String7reserveEj+0xe>
 8090fb0:	6843      	ldr	r3, [r0, #4]
 8090fb2:	428b      	cmp	r3, r1
 8090fb4:	d207      	bcs.n	8090fc6 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 8090fb6:	4620      	mov	r0, r4
 8090fb8:	f7ff ffea 	bl	8090f90 <_ZN6String12changeBufferEj>
 8090fbc:	b120      	cbz	r0, 8090fc8 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 8090fbe:	68a3      	ldr	r3, [r4, #8]
 8090fc0:	b90b      	cbnz	r3, 8090fc6 <_ZN6String7reserveEj+0x1e>
 8090fc2:	6822      	ldr	r2, [r4, #0]
 8090fc4:	7013      	strb	r3, [r2, #0]
 8090fc6:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 8090fc8:	bd10      	pop	{r4, pc}

08090fca <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8090fca:	b570      	push	{r4, r5, r6, lr}
 8090fcc:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8090fce:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8090fd0:	4604      	mov	r4, r0
 8090fd2:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8090fd4:	f7ff ffe8 	bl	8090fa8 <_ZN6String7reserveEj>
 8090fd8:	b918      	cbnz	r0, 8090fe2 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 8090fda:	4620      	mov	r0, r4
 8090fdc:	f7ff ffcd 	bl	8090f7a <_ZN6String10invalidateEv>
		return *this;
 8090fe0:	e009      	b.n	8090ff6 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 8090fe2:	462a      	mov	r2, r5
 8090fe4:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 8090fe6:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8090fe8:	6820      	ldr	r0, [r4, #0]
 8090fea:	f001 f9ae 	bl	809234a <memcpy>
	buffer[len] = 0;
 8090fee:	6822      	ldr	r2, [r4, #0]
 8090ff0:	68a3      	ldr	r3, [r4, #8]
 8090ff2:	2100      	movs	r1, #0
 8090ff4:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 8090ff6:	4620      	mov	r0, r4
 8090ff8:	bd70      	pop	{r4, r5, r6, pc}

08090ffa <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8090ffa:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8090ffc:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8090ffe:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8091000:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8091002:	6043      	str	r3, [r0, #4]
	len = 0;
 8091004:	6083      	str	r3, [r0, #8]
	flags = 0;
 8091006:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 8091008:	460d      	mov	r5, r1
 809100a:	b139      	cbz	r1, 809101c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 809100c:	4608      	mov	r0, r1
 809100e:	f001 f9f9 	bl	8092404 <strlen>
 8091012:	4629      	mov	r1, r5
 8091014:	4602      	mov	r2, r0
 8091016:	4620      	mov	r0, r4
 8091018:	f7ff ffd7 	bl	8090fca <_ZN6String4copyEPKcj>
}
 809101c:	4620      	mov	r0, r4
 809101e:	bd38      	pop	{r3, r4, r5, pc}

08091020 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8091020:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 8091022:	b510      	push	{r4, lr}
 8091024:	460b      	mov	r3, r1
 8091026:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8091028:	d007      	beq.n	809103a <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 809102a:	6809      	ldr	r1, [r1, #0]
 809102c:	b119      	cbz	r1, 8091036 <_ZN6StringaSERKS_+0x16>
 809102e:	689a      	ldr	r2, [r3, #8]
 8091030:	f7ff ffcb 	bl	8090fca <_ZN6String4copyEPKcj>
 8091034:	e001      	b.n	809103a <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 8091036:	f7ff ffa0 	bl	8090f7a <_ZN6String10invalidateEv>

	return *this;
}
 809103a:	4620      	mov	r0, r4
 809103c:	bd10      	pop	{r4, pc}

0809103e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 809103e:	b538      	push	{r3, r4, r5, lr}
 8091040:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 8091042:	460c      	mov	r4, r1
 8091044:	b141      	cbz	r1, 8091058 <_ZN6StringaSEPKc+0x1a>
 8091046:	4608      	mov	r0, r1
 8091048:	f001 f9dc 	bl	8092404 <strlen>
 809104c:	4621      	mov	r1, r4
 809104e:	4602      	mov	r2, r0
 8091050:	4628      	mov	r0, r5
 8091052:	f7ff ffba 	bl	8090fca <_ZN6String4copyEPKcj>
 8091056:	e001      	b.n	809105c <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 8091058:	f7ff ff8f 	bl	8090f7a <_ZN6String10invalidateEv>

	return *this;
}
 809105c:	4628      	mov	r0, r5
 809105e:	bd38      	pop	{r3, r4, r5, pc}

08091060 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8091060:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8091062:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8091064:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8091066:	b912      	cbnz	r2, 809106e <_ZNK6String6equalsEPKc+0xe>
 8091068:	b919      	cbnz	r1, 8091072 <_ZNK6String6equalsEPKc+0x12>
 809106a:	2001      	movs	r0, #1
 809106c:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 809106e:	b911      	cbnz	r1, 8091076 <_ZNK6String6equalsEPKc+0x16>
 8091070:	6803      	ldr	r3, [r0, #0]
 8091072:	7818      	ldrb	r0, [r3, #0]
 8091074:	e002      	b.n	809107c <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 8091076:	6800      	ldr	r0, [r0, #0]
 8091078:	f001 f9b2 	bl	80923e0 <strcmp>
 809107c:	fab0 f080 	clz	r0, r0
 8091080:	0940      	lsrs	r0, r0, #5
}
 8091082:	bd08      	pop	{r3, pc}

08091084 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8091084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8091086:	4606      	mov	r6, r0
 8091088:	460d      	mov	r5, r1
 809108a:	188f      	adds	r7, r1, r2
  size_t n = 0;
 809108c:	2400      	movs	r4, #0
  while (size--) {
 809108e:	42bd      	cmp	r5, r7
 8091090:	d00c      	beq.n	80910ac <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8091092:	6833      	ldr	r3, [r6, #0]
 8091094:	f815 1b01 	ldrb.w	r1, [r5], #1
 8091098:	689b      	ldr	r3, [r3, #8]
 809109a:	4630      	mov	r0, r6
 809109c:	4798      	blx	r3
     if (chunk>=0)
 809109e:	2800      	cmp	r0, #0
 80910a0:	db01      	blt.n	80910a6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80910a2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80910a4:	e7f3      	b.n	809108e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80910a6:	2c00      	cmp	r4, #0
 80910a8:	bf08      	it	eq
 80910aa:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80910ac:	4620      	mov	r0, r4
 80910ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080910b0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80910b0:	6803      	ldr	r3, [r0, #0]
 80910b2:	689b      	ldr	r3, [r3, #8]
 80910b4:	4718      	bx	r3

080910b6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80910b6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80910b8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80910ba:	4605      	mov	r5, r0
  size_t n = print('\r');
 80910bc:	f7ff fff8 	bl	80910b0 <_ZN5Print5printEc>
  n += print('\n');
 80910c0:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80910c2:	4604      	mov	r4, r0
  n += print('\n');
 80910c4:	4628      	mov	r0, r5
 80910c6:	f7ff fff3 	bl	80910b0 <_ZN5Print5printEc>
  return n;
}
 80910ca:	4420      	add	r0, r4
 80910cc:	bd38      	pop	{r3, r4, r5, pc}

080910ce <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80910ce:	b538      	push	{r3, r4, r5, lr}
 80910d0:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80910d2:	f7f0 f901 	bl	80812d8 <_ZN5Print5writeEPKc>
 80910d6:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80910d8:	4628      	mov	r0, r5
 80910da:	f7ff ffec 	bl	80910b6 <_ZN5Print7printlnEv>
  return n;
}
 80910de:	4420      	add	r0, r4
 80910e0:	bd38      	pop	{r3, r4, r5, pc}

080910e2 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80910e2:	2a01      	cmp	r2, #1
 80910e4:	bf98      	it	ls
 80910e6:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80910e8:	b530      	push	{r4, r5, lr}
 80910ea:	460b      	mov	r3, r1
 80910ec:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80910ee:	2100      	movs	r1, #0
 80910f0:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80910f4:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80910f8:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80910fc:	fb05 3312 	mls	r3, r5, r2, r3
 8091100:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8091102:	2b09      	cmp	r3, #9
 8091104:	bf94      	ite	ls
 8091106:	3330      	addls	r3, #48	; 0x30
 8091108:	3337      	addhi	r3, #55	; 0x37
 809110a:	b2db      	uxtb	r3, r3
 809110c:	4621      	mov	r1, r4
 809110e:	f804 3901 	strb.w	r3, [r4], #-1
 8091112:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 8091114:	2d00      	cmp	r5, #0
 8091116:	d1ef      	bne.n	80910f8 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 8091118:	f7f0 f8de 	bl	80812d8 <_ZN5Print5writeEPKc>
}
 809111c:	b00b      	add	sp, #44	; 0x2c
 809111e:	bd30      	pop	{r4, r5, pc}

08091120 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 8091120:	b410      	push	{r4}
  if (base == 0) return write(n);
 8091122:	b922      	cbnz	r2, 809112e <_ZN5Print5printEmi+0xe>
 8091124:	6803      	ldr	r3, [r0, #0]
 8091126:	b2c9      	uxtb	r1, r1
 8091128:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 809112a:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 809112c:	4718      	bx	r3
  else return printNumber(n, base);
 809112e:	b2d2      	uxtb	r2, r2
}
 8091130:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8091132:	f7ff bfd6 	b.w	80910e2 <_ZN5Print11printNumberEmh>

08091136 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 8091136:	f7ff bff3 	b.w	8091120 <_ZN5Print5printEmi>
	...

0809113c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 809113c:	4a01      	ldr	r2, [pc, #4]	; (8091144 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 809113e:	4b02      	ldr	r3, [pc, #8]	; (8091148 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8091140:	601a      	str	r2, [r3, #0]
 8091142:	4770      	bx	lr
 8091144:	08095d45 	.word	0x08095d45
 8091148:	20003aa0 	.word	0x20003aa0

0809114c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 809114c:	4b02      	ldr	r3, [pc, #8]	; (8091158 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 809114e:	681a      	ldr	r2, [r3, #0]
 8091150:	4b02      	ldr	r3, [pc, #8]	; (809115c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8091152:	601a      	str	r2, [r3, #0]
 8091154:	4770      	bx	lr
 8091156:	bf00      	nop
 8091158:	20000468 	.word	0x20000468
 809115c:	20003aa4 	.word	0x20003aa4

08091160 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8091160:	2100      	movs	r1, #0
 8091162:	f7ff bb49 	b.w	80907f8 <system_delay_ms>

08091166 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8091166:	b510      	push	{r4, lr}
 8091168:	4604      	mov	r4, r0
 809116a:	f7fe fe4f 	bl	808fe0c <_ZNSt14_Function_baseD1Ev>
 809116e:	4620      	mov	r0, r4
 8091170:	bd10      	pop	{r4, pc}

08091172 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
 8091172:	b510      	push	{r4, lr}
 8091174:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
 8091176:	f7ff fb1f 	bl	80907b8 <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
 809117a:	4284      	cmp	r4, r0
 809117c:	d008      	beq.n	8091190 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
 809117e:	b11c      	cbz	r4, 8091188 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
 8091180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
 8091184:	f7ff bb08 	b.w	8090798 <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
 8091188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
 809118c:	f7ff bb0c 	b.w	80907a8 <LED_Signaling_Stop>
 8091190:	bd10      	pop	{r4, pc}

08091192 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
 8091192:	b570      	push	{r4, r5, r6, lr}
 8091194:	4605      	mov	r5, r0
 8091196:	460e      	mov	r6, r1
 8091198:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
 809119a:	f7ff fb0d 	bl	80907b8 <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
 809119e:	b150      	cbz	r0, 80911b6 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
 80911a0:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
 80911a4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80911a8:	f7ff faee 	bl	8090788 <LED_SetSignalingColor>
    LED_On(LED_RGB);
}
 80911ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
 80911b0:	20e7      	movs	r0, #231	; 0xe7
 80911b2:	f7ff bb09 	b.w	80907c8 <LED_On>
 80911b6:	bd70      	pop	{r4, r5, r6, pc}

080911b8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80911b8:	4803      	ldr	r0, [pc, #12]	; (80911c8 <_GLOBAL__sub_I_RGB+0x10>)
 80911ba:	2300      	movs	r3, #0
 80911bc:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80911be:	4a03      	ldr	r2, [pc, #12]	; (80911cc <_GLOBAL__sub_I_RGB+0x14>)
 80911c0:	4903      	ldr	r1, [pc, #12]	; (80911d0 <_GLOBAL__sub_I_RGB+0x18>)
 80911c2:	f000 bb5f 	b.w	8091884 <__aeabi_atexit>
 80911c6:	bf00      	nop
 80911c8:	20003aa8 	.word	0x20003aa8
 80911cc:	200004d0 	.word	0x200004d0
 80911d0:	08091167 	.word	0x08091167

080911d4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80911d4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80911d6:	4b18      	ldr	r3, [pc, #96]	; (8091238 <serialEventRun+0x64>)
 80911d8:	b133      	cbz	r3, 80911e8 <serialEventRun+0x14>
 80911da:	f000 f94d 	bl	8091478 <_Z16_fetch_usbserialv>
 80911de:	6803      	ldr	r3, [r0, #0]
 80911e0:	691b      	ldr	r3, [r3, #16]
 80911e2:	4798      	blx	r3
 80911e4:	2800      	cmp	r0, #0
 80911e6:	dc1e      	bgt.n	8091226 <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80911e8:	4b14      	ldr	r3, [pc, #80]	; (809123c <serialEventRun+0x68>)
 80911ea:	b133      	cbz	r3, 80911fa <serialEventRun+0x26>
 80911ec:	f000 fa10 	bl	8091610 <_Z22__fetch_global_Serial1v>
 80911f0:	6803      	ldr	r3, [r0, #0]
 80911f2:	691b      	ldr	r3, [r3, #16]
 80911f4:	4798      	blx	r3
 80911f6:	2800      	cmp	r0, #0
 80911f8:	dc18      	bgt.n	809122c <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80911fa:	4b11      	ldr	r3, [pc, #68]	; (8091240 <serialEventRun+0x6c>)
 80911fc:	b10b      	cbz	r3, 8091202 <serialEventRun+0x2e>
 80911fe:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 8091202:	4b10      	ldr	r3, [pc, #64]	; (8091244 <serialEventRun+0x70>)
 8091204:	b10b      	cbz	r3, 809120a <serialEventRun+0x36>
 8091206:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 809120a:	4b0f      	ldr	r3, [pc, #60]	; (8091248 <serialEventRun+0x74>)
 809120c:	b10b      	cbz	r3, 8091212 <serialEventRun+0x3e>
 809120e:	f7fe fcc1 	bl	808fb94 <_Z15serialEventRun5v>
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8091212:	4b0e      	ldr	r3, [pc, #56]	; (809124c <serialEventRun+0x78>)
 8091214:	b17b      	cbz	r3, 8091236 <serialEventRun+0x62>
 8091216:	f000 f96b 	bl	80914f0 <_Z17_fetch_usbserial1v>
 809121a:	6803      	ldr	r3, [r0, #0]
 809121c:	691b      	ldr	r3, [r3, #16]
 809121e:	4798      	blx	r3
 8091220:	2800      	cmp	r0, #0
 8091222:	dc06      	bgt.n	8091232 <serialEventRun+0x5e>
 8091224:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8091226:	f3af 8000 	nop.w
 809122a:	e7dd      	b.n	80911e8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 809122c:	f3af 8000 	nop.w
 8091230:	e7e3      	b.n	80911fa <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 8091232:	f3af 8000 	nop.w
 8091236:	bd08      	pop	{r3, pc}
	...
 8091248:	0808fb95 	.word	0x0808fb95
 809124c:	00000000 	.word	0x00000000

08091250 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 8091250:	b508      	push	{r3, lr}
	serialEventRun();
 8091252:	f7ff ffbf 	bl	80911d4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8091256:	f7ff f907 	bl	8090468 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 809125a:	4b01      	ldr	r3, [pc, #4]	; (8091260 <_post_loop+0x10>)
 809125c:	6018      	str	r0, [r3, #0]
 809125e:	bd08      	pop	{r3, pc}
 8091260:	20003fa0 	.word	0x20003fa0

08091264 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8091264:	4802      	ldr	r0, [pc, #8]	; (8091270 <_Z33system_initialize_user_backup_ramv+0xc>)
 8091266:	4a03      	ldr	r2, [pc, #12]	; (8091274 <_Z33system_initialize_user_backup_ramv+0x10>)
 8091268:	4903      	ldr	r1, [pc, #12]	; (8091278 <_Z33system_initialize_user_backup_ramv+0x14>)
 809126a:	1a12      	subs	r2, r2, r0
 809126c:	f001 b86d 	b.w	809234a <memcpy>
 8091270:	40024000 	.word	0x40024000
 8091274:	40024004 	.word	0x40024004
 8091278:	08095f38 	.word	0x08095f38

0809127c <_Z26usb_request_custom_handlerPcjjPj>:
#ifdef USB_VENDOR_REQUEST_ENABLE

// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}
 809127c:	2000      	movs	r0, #0
 809127e:	4770      	bx	lr

08091280 <_Z23usb_request_app_handlerP10USBRequestPv>:

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 8091280:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch (req->type) {
 8091282:	6843      	ldr	r3, [r0, #4]
// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 8091284:	4604      	mov	r4, r0
    switch (req->type) {
 8091286:	2b0a      	cmp	r3, #10
 8091288:	d00e      	beq.n	80912a8 <_Z23usb_request_app_handlerP10USBRequestPv+0x28>
 809128a:	2b50      	cmp	r3, #80	; 0x50
 809128c:	d11c      	bne.n	80912c8 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
 809128e:	4b10      	ldr	r3, [pc, #64]	; (80912d0 <_Z23usb_request_app_handlerP10USBRequestPv+0x50>)
 8091290:	681d      	ldr	r5, [r3, #0]
 8091292:	b1cd      	cbz	r5, 80912c8 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
 8091294:	7d03      	ldrb	r3, [r0, #20]
 8091296:	f44f 7100 	mov.w	r1, #512	; 0x200
 809129a:	9300      	str	r3, [sp, #0]
 809129c:	68c2      	ldr	r2, [r0, #12]
 809129e:	f100 0310 	add.w	r3, r0, #16
 80912a2:	6880      	ldr	r0, [r0, #8]
 80912a4:	47a8      	blx	r5
 80912a6:	e007      	b.n	80912b8 <_Z23usb_request_app_handlerP10USBRequestPv+0x38>
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
        return true;
    }
#endif
    case USB_REQUEST_CUSTOM: {
        if (!usb_request_custom_handler(req->data, USB_REQUEST_BUFFER_SIZE, req->request_size, &req->reply_size)) {
 80912a8:	f100 0310 	add.w	r3, r0, #16
 80912ac:	68c2      	ldr	r2, [r0, #12]
 80912ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80912b2:	6880      	ldr	r0, [r0, #8]
 80912b4:	f7ff ffe2 	bl	809127c <_Z26usb_request_custom_handlerPcjjPj>
 80912b8:	b130      	cbz	r0, 80912c8 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
            return false;
        }
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
 80912ba:	2200      	movs	r2, #0
 80912bc:	4620      	mov	r0, r4
 80912be:	4611      	mov	r1, r2
 80912c0:	f7ff fab2 	bl	8090828 <system_set_usb_request_result>
        return true;
 80912c4:	2001      	movs	r0, #1
 80912c6:	e000      	b.n	80912ca <_Z23usb_request_app_handlerP10USBRequestPv+0x4a>
    switch (req->type) {
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
                req->request_size, &req->reply_size, (DataFormat)req->format)) {
            return false;
 80912c8:	2000      	movs	r0, #0
        return true;
    }
    default:
        return false; // Unsupported request type
    }
}
 80912ca:	b003      	add	sp, #12
 80912cc:	bd30      	pop	{r4, r5, pc}
 80912ce:	bf00      	nop
 80912d0:	20003ab8 	.word	0x20003ab8

080912d4 <module_user_init_hook>:

#endif // USB_VENDOR_REQUEST_ENABLE

void module_user_init_hook()
{
 80912d4:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80912d6:	4c0c      	ldr	r4, [pc, #48]	; (8091308 <module_user_init_hook+0x34>)
 80912d8:	4d0c      	ldr	r5, [pc, #48]	; (809130c <module_user_init_hook+0x38>)
 80912da:	6823      	ldr	r3, [r4, #0]
 80912dc:	42ab      	cmp	r3, r5
 80912de:	4b0c      	ldr	r3, [pc, #48]	; (8091310 <module_user_init_hook+0x3c>)
 80912e0:	bf0c      	ite	eq
 80912e2:	2201      	moveq	r2, #1
 80912e4:	2200      	movne	r2, #0
 80912e6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80912e8:	d002      	beq.n	80912f0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80912ea:	f7ff ffbb 	bl	8091264 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80912ee:	6025      	str	r5, [r4, #0]
    /* for dynamically linked user part, set the random seed if the user
     * app defines random_seed_from_cloud.
     */
// todo - add a RNG define for that capability
#if defined(STM32F2XX)
    if (random_seed_from_cloud) {
 80912f0:	4b08      	ldr	r3, [pc, #32]	; (8091314 <module_user_init_hook+0x40>)
 80912f2:	b11b      	cbz	r3, 80912fc <module_user_init_hook+0x28>
    		uint32_t seed = HAL_RNG_GetRandomNumber();
 80912f4:	f7ff f8a8 	bl	8090448 <HAL_RNG_GetRandomNumber>
    		random_seed_from_cloud(seed);
 80912f8:	f3af 8000 	nop.w
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
#endif
}
 80912fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    		random_seed_from_cloud(seed);
    }
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
 8091300:	2100      	movs	r1, #0
 8091302:	4805      	ldr	r0, [pc, #20]	; (8091318 <module_user_init_hook+0x44>)
 8091304:	f7ff ba88 	b.w	8090818 <system_set_usb_request_app_handler>
 8091308:	40024000 	.word	0x40024000
 809130c:	9a271c1e 	.word	0x9a271c1e
 8091310:	20003abc 	.word	0x20003abc
 8091314:	00000000 	.word	0x00000000
 8091318:	08091281 	.word	0x08091281

0809131c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 809131c:	4770      	bx	lr

0809131e <_ZN9IPAddressD0Ev>:
 809131e:	b510      	push	{r4, lr}
 8091320:	4604      	mov	r4, r0
 8091322:	f7ee febe 	bl	80800a2 <_ZdlPv>
 8091326:	4620      	mov	r0, r4
 8091328:	bd10      	pop	{r4, pc}

0809132a <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 809132a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 809132c:	460f      	mov	r7, r1
 809132e:	f100 0608 	add.w	r6, r0, #8
 8091332:	1d05      	adds	r5, r0, #4
 8091334:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8091336:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 809133a:	220a      	movs	r2, #10
 809133c:	4638      	mov	r0, r7
 809133e:	f7ff fefa 	bl	8091136 <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8091342:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8091344:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8091346:	d007      	beq.n	8091358 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 8091348:	2c00      	cmp	r4, #0
 809134a:	d0f4      	beq.n	8091336 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 809134c:	212e      	movs	r1, #46	; 0x2e
 809134e:	4638      	mov	r0, r7
 8091350:	f7ff feae 	bl	80910b0 <_ZN5Print5printEc>
 8091354:	4404      	add	r4, r0
 8091356:	e7ee      	b.n	8091336 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 8091358:	4620      	mov	r0, r4
 809135a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0809135c <_ZN9IPAddressC1Ev>:
#include "spark_wiring_ipaddress.h"
#include "spark_wiring_print.h"
#include "spark_wiring_platform.h"
#include "string.h"

IPAddress::IPAddress()
 809135c:	4a02      	ldr	r2, [pc, #8]	; (8091368 <_ZN9IPAddressC1Ev+0xc>)
 809135e:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8091360:	2200      	movs	r2, #0
 8091362:	6042      	str	r2, [r0, #4]
{
    clear();
}
 8091364:	4770      	bx	lr
 8091366:	bf00      	nop
 8091368:	08095da0 	.word	0x08095da0

0809136c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 809136c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 809136e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8091372:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8091376:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 809137a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 809137e:	6041      	str	r1, [r0, #4]
 8091380:	bd10      	pop	{r4, pc}
	...

08091384 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8091384:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8091386:	4d04      	ldr	r5, [pc, #16]	; (8091398 <_ZN9IPAddressC1Ehhhh+0x14>)
 8091388:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 809138a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 809138e:	9500      	str	r5, [sp, #0]
 8091390:	f7ff ffec 	bl	809136c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8091394:	b003      	add	sp, #12
 8091396:	bd30      	pop	{r4, r5, pc}
 8091398:	08095da0 	.word	0x08095da0

0809139c <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 809139c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 809139e:	780d      	ldrb	r5, [r1, #0]
 80913a0:	788b      	ldrb	r3, [r1, #2]
 80913a2:	784a      	ldrb	r2, [r1, #1]
 80913a4:	78c9      	ldrb	r1, [r1, #3]
 80913a6:	9100      	str	r1, [sp, #0]
 80913a8:	4629      	mov	r1, r5
 80913aa:	f7ff ffdf 	bl	809136c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80913ae:	b003      	add	sp, #12
 80913b0:	bd30      	pop	{r4, r5, pc}
	...

080913b4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
 80913b4:	b510      	push	{r4, lr}
 80913b6:	4604      	mov	r4, r0
 80913b8:	4b02      	ldr	r3, [pc, #8]	; (80913c4 <_ZN9IPAddressC1EPKh+0x10>)
 80913ba:	6003      	str	r3, [r0, #0]
{
    *this = address;
 80913bc:	f7ff ffee 	bl	809139c <_ZN9IPAddressaSEPKh>
}
 80913c0:	4620      	mov	r0, r4
 80913c2:	bd10      	pop	{r4, pc}
 80913c4:	08095da0 	.word	0x08095da0

080913c8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80913c8:	7441      	strb	r1, [r0, #17]
 80913ca:	4770      	bx	lr

080913cc <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80913cc:	4770      	bx	lr

080913ce <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80913ce:	2100      	movs	r1, #0
 80913d0:	7c00      	ldrb	r0, [r0, #16]
 80913d2:	f7ff b9c1 	b.w	8090758 <HAL_USB_USART_Receive_Data>

080913d6 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80913d6:	2101      	movs	r1, #1
 80913d8:	7c00      	ldrb	r0, [r0, #16]
 80913da:	f7ff b9bd 	b.w	8090758 <HAL_USB_USART_Receive_Data>

080913de <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80913de:	7c00      	ldrb	r0, [r0, #16]
 80913e0:	f7ff b9b2 	b.w	8090748 <HAL_USB_USART_Available_Data_For_Write>

080913e4 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80913e4:	7c00      	ldrb	r0, [r0, #16]
 80913e6:	f7ff b9a7 	b.w	8090738 <HAL_USB_USART_Available_Data>

080913ea <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80913ea:	b538      	push	{r3, r4, r5, lr}
 80913ec:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80913ee:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80913f0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80913f2:	f7ff f9a9 	bl	8090748 <HAL_USB_USART_Available_Data_For_Write>
 80913f6:	2800      	cmp	r0, #0
 80913f8:	dc01      	bgt.n	80913fe <_ZN9USBSerial5writeEh+0x14>
 80913fa:	7c60      	ldrb	r0, [r4, #17]
 80913fc:	b120      	cbz	r0, 8091408 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80913fe:	4629      	mov	r1, r5
 8091400:	7c20      	ldrb	r0, [r4, #16]
 8091402:	f7ff f9b1 	bl	8090768 <HAL_USB_USART_Send_Data>
    return 1;
 8091406:	2001      	movs	r0, #1
  }
  return 0;
}
 8091408:	bd38      	pop	{r3, r4, r5, pc}

0809140a <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 809140a:	7c00      	ldrb	r0, [r0, #16]
 809140c:	f7ff b9b4 	b.w	8090778 <HAL_USB_USART_Flush_Data>

08091410 <_ZN9USBSerialD0Ev>:
 8091410:	b510      	push	{r4, lr}
 8091412:	4604      	mov	r4, r0
 8091414:	f7ee fe45 	bl	80800a2 <_ZdlPv>
 8091418:	4620      	mov	r0, r4
 809141a:	bd10      	pop	{r4, pc}

0809141c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 809141c:	b510      	push	{r4, lr}
 809141e:	4604      	mov	r4, r0
 8091420:	2300      	movs	r3, #0
 8091422:	6063      	str	r3, [r4, #4]
 8091424:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8091428:	60a3      	str	r3, [r4, #8]
 809142a:	4b05      	ldr	r3, [pc, #20]	; (8091440 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 809142c:	4608      	mov	r0, r1
 809142e:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8091430:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 8091432:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 8091434:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 8091436:	4611      	mov	r1, r2
 8091438:	f7ff f96e 	bl	8090718 <HAL_USB_USART_Init>
}
 809143c:	4620      	mov	r0, r4
 809143e:	bd10      	pop	{r4, pc}
 8091440:	08095db4 	.word	0x08095db4

08091444 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 8091444:	2200      	movs	r2, #0
 8091446:	7c00      	ldrb	r0, [r0, #16]
 8091448:	f7ff b96e 	b.w	8090728 <HAL_USB_USART_Begin>

0809144c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 809144c:	b510      	push	{r4, lr}
 809144e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8091450:	2214      	movs	r2, #20
 8091452:	2100      	movs	r1, #0
 8091454:	f000 ff9f 	bl	8092396 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8091458:	4b05      	ldr	r3, [pc, #20]	; (8091470 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 809145a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 809145c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 809145e:	4b05      	ldr	r3, [pc, #20]	; (8091474 <_Z19acquireSerialBufferv+0x28>)
 8091460:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8091462:	f240 1301 	movw	r3, #257	; 0x101
 8091466:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8091468:	2381      	movs	r3, #129	; 0x81
 809146a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 809146c:	bd10      	pop	{r4, pc}
 809146e:	bf00      	nop
 8091470:	20003b45 	.word	0x20003b45
 8091474:	20003ac4 	.word	0x20003ac4

08091478 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8091478:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 809147a:	4d0e      	ldr	r5, [pc, #56]	; (80914b4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 809147c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 809147e:	a801      	add	r0, sp, #4
 8091480:	f7ff ffe4 	bl	809144c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8091484:	6829      	ldr	r1, [r5, #0]
 8091486:	f011 0401 	ands.w	r4, r1, #1
 809148a:	d110      	bne.n	80914ae <_Z16_fetch_usbserialv+0x36>
 809148c:	4628      	mov	r0, r5
 809148e:	f7ee fe0c 	bl	80800aa <__cxa_guard_acquire>
 8091492:	b160      	cbz	r0, 80914ae <_Z16_fetch_usbserialv+0x36>
 8091494:	aa01      	add	r2, sp, #4
 8091496:	4621      	mov	r1, r4
 8091498:	4807      	ldr	r0, [pc, #28]	; (80914b8 <_Z16_fetch_usbserialv+0x40>)
 809149a:	f7ff ffbf 	bl	809141c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 809149e:	4628      	mov	r0, r5
 80914a0:	f7ee fe08 	bl	80800b4 <__cxa_guard_release>
 80914a4:	4a05      	ldr	r2, [pc, #20]	; (80914bc <_Z16_fetch_usbserialv+0x44>)
 80914a6:	4906      	ldr	r1, [pc, #24]	; (80914c0 <_Z16_fetch_usbserialv+0x48>)
 80914a8:	4803      	ldr	r0, [pc, #12]	; (80914b8 <_Z16_fetch_usbserialv+0x40>)
 80914aa:	f000 f9eb 	bl	8091884 <__aeabi_atexit>
	return _usbserial;
}
 80914ae:	4802      	ldr	r0, [pc, #8]	; (80914b8 <_Z16_fetch_usbserialv+0x40>)
 80914b0:	b007      	add	sp, #28
 80914b2:	bd30      	pop	{r4, r5, pc}
 80914b4:	20003ac0 	.word	0x20003ac0
 80914b8:	20003c48 	.word	0x20003c48
 80914bc:	200004d0 	.word	0x200004d0
 80914c0:	080913cd 	.word	0x080913cd

080914c4 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80914c4:	b510      	push	{r4, lr}
 80914c6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80914c8:	2214      	movs	r2, #20
 80914ca:	2100      	movs	r1, #0
 80914cc:	f000 ff63 	bl	8092396 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80914d0:	4b05      	ldr	r3, [pc, #20]	; (80914e8 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80914d2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80914d4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80914d6:	4b05      	ldr	r3, [pc, #20]	; (80914ec <_Z23acquireUSBSerial1Bufferv+0x28>)
 80914d8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80914da:	f240 1301 	movw	r3, #257	; 0x101
 80914de:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80914e0:	2381      	movs	r3, #129	; 0x81
 80914e2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80914e4:	bd10      	pop	{r4, pc}
 80914e6:	bf00      	nop
 80914e8:	20003cf8 	.word	0x20003cf8
 80914ec:	20003c60 	.word	0x20003c60

080914f0 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80914f0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80914f2:	4c0e      	ldr	r4, [pc, #56]	; (809152c <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80914f4:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80914f6:	a801      	add	r0, sp, #4
 80914f8:	f7ff ffe4 	bl	80914c4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80914fc:	6823      	ldr	r3, [r4, #0]
 80914fe:	07db      	lsls	r3, r3, #31
 8091500:	d410      	bmi.n	8091524 <_Z17_fetch_usbserial1v+0x34>
 8091502:	4620      	mov	r0, r4
 8091504:	f7ee fdd1 	bl	80800aa <__cxa_guard_acquire>
 8091508:	b160      	cbz	r0, 8091524 <_Z17_fetch_usbserial1v+0x34>
 809150a:	aa01      	add	r2, sp, #4
 809150c:	2101      	movs	r1, #1
 809150e:	4808      	ldr	r0, [pc, #32]	; (8091530 <_Z17_fetch_usbserial1v+0x40>)
 8091510:	f7ff ff84 	bl	809141c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8091514:	4620      	mov	r0, r4
 8091516:	f7ee fdcd 	bl	80800b4 <__cxa_guard_release>
 809151a:	4a06      	ldr	r2, [pc, #24]	; (8091534 <_Z17_fetch_usbserial1v+0x44>)
 809151c:	4906      	ldr	r1, [pc, #24]	; (8091538 <_Z17_fetch_usbserial1v+0x48>)
 809151e:	4804      	ldr	r0, [pc, #16]	; (8091530 <_Z17_fetch_usbserial1v+0x40>)
 8091520:	f000 f9b0 	bl	8091884 <__aeabi_atexit>
  return _usbserial1;
}
 8091524:	4802      	ldr	r0, [pc, #8]	; (8091530 <_Z17_fetch_usbserial1v+0x40>)
 8091526:	b006      	add	sp, #24
 8091528:	bd10      	pop	{r4, pc}
 809152a:	bf00      	nop
 809152c:	20003c5c 	.word	0x20003c5c
 8091530:	20003ce4 	.word	0x20003ce4
 8091534:	200004d0 	.word	0x200004d0
 8091538:	080913cd 	.word	0x080913cd

0809153c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 809153c:	2200      	movs	r2, #0
 809153e:	4611      	mov	r1, r2
 8091540:	4610      	mov	r0, r2
 8091542:	f7ff b981 	b.w	8090848 <network_ready>
	...

08091548 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    NetworkClass& Network = Cellular;
}
 8091548:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 809154a:	4d0b      	ldr	r5, [pc, #44]	; (8091578 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x30>)
 809154c:	2428      	movs	r4, #40	; 0x28
 809154e:	4622      	mov	r2, r4
 8091550:	2100      	movs	r1, #0
 8091552:	4628      	mov	r0, r5
 8091554:	f000 ff1f 	bl	8092396 <memset>
        cid = -1;
 8091558:	f04f 33ff 	mov.w	r3, #4294967295
 809155c:	606b      	str	r3, [r5, #4]
        size = sizeof(*this);
 809155e:	802c      	strh	r4, [r5, #0]
#include "inet_hal.h"
#include "spark_wiring_cellular_printable.h"

namespace spark {

class CellularClass : public NetworkClass
 8091560:	4d06      	ldr	r5, [pc, #24]	; (809157c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
 8091562:	4b07      	ldr	r3, [pc, #28]	; (8091580 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
 8091564:	4628      	mov	r0, r5
    char iccid[21];
    char imei[16];

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
 8091566:	4622      	mov	r2, r4
 8091568:	f840 3b04 	str.w	r3, [r0], #4
 809156c:	2100      	movs	r1, #0
 809156e:	f000 ff12 	bl	8092396 <memset>
        size = sizeof(*this);
 8091572:	80ac      	strh	r4, [r5, #4]
 8091574:	bd38      	pop	{r3, r4, r5, pc}
 8091576:	bf00      	nop
 8091578:	20003e28 	.word	0x20003e28
 809157c:	20003dfc 	.word	0x20003dfc
 8091580:	08095de4 	.word	0x08095de4

08091584 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8091584:	7441      	strb	r1, [r0, #17]
 8091586:	4770      	bx	lr

08091588 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 8091588:	7c00      	ldrb	r0, [r0, #16]
 809158a:	f7ff b805 	b.w	8090598 <HAL_USART_Available_Data_For_Write>

0809158e <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 809158e:	7c00      	ldrb	r0, [r0, #16]
 8091590:	f7fe bfda 	b.w	8090548 <HAL_USART_Available_Data>

08091594 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 8091594:	7c00      	ldrb	r0, [r0, #16]
 8091596:	f7fe bfe7 	b.w	8090568 <HAL_USART_Peek_Data>

0809159a <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 809159a:	7c00      	ldrb	r0, [r0, #16]
 809159c:	f7fe bfdc 	b.w	8090558 <HAL_USART_Read_Data>

080915a0 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80915a0:	7c00      	ldrb	r0, [r0, #16]
 80915a2:	f7fe bfe9 	b.w	8090578 <HAL_USART_Flush_Data>

080915a6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80915a6:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80915a8:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80915aa:	4604      	mov	r4, r0
 80915ac:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80915ae:	b925      	cbnz	r5, 80915ba <_ZN11USARTSerial5writeEh+0x14>
 80915b0:	7c00      	ldrb	r0, [r0, #16]
 80915b2:	f7fe fff1 	bl	8090598 <HAL_USART_Available_Data_For_Write>
 80915b6:	2800      	cmp	r0, #0
 80915b8:	dd05      	ble.n	80915c6 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80915ba:	4631      	mov	r1, r6
 80915bc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80915be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80915c2:	f7fe bfb9 	b.w	8090538 <HAL_USART_Write_Data>
  }
  return 0;
}
 80915c6:	4628      	mov	r0, r5
 80915c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080915cc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80915cc:	b510      	push	{r4, lr}
 80915ce:	4604      	mov	r4, r0
 80915d0:	4608      	mov	r0, r1
 80915d2:	4611      	mov	r1, r2
 80915d4:	2200      	movs	r2, #0
 80915d6:	6062      	str	r2, [r4, #4]
 80915d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80915dc:	60a2      	str	r2, [r4, #8]
 80915de:	4a05      	ldr	r2, [pc, #20]	; (80915f4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80915e0:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80915e2:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80915e4:	2201      	movs	r2, #1
 80915e6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80915e8:	461a      	mov	r2, r3
 80915ea:	f7fe ff9d 	bl	8090528 <HAL_USART_Init>
}
 80915ee:	4620      	mov	r0, r4
 80915f0:	bd10      	pop	{r4, pc}
 80915f2:	bf00      	nop
 80915f4:	08095df4 	.word	0x08095df4

080915f8 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 80915f8:	2300      	movs	r3, #0
 80915fa:	7c00      	ldrb	r0, [r0, #16]
 80915fc:	f7fe bfd4 	b.w	80905a8 <HAL_USART_BeginConfig>

08091600 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 8091600:	2200      	movs	r2, #0
 8091602:	f7ff bff9 	b.w	80915f8 <_ZN11USARTSerial5beginEmm>

08091606 <_ZN11USARTSerialcvbEv>:
  return HAL_USART_Write_NineBitData(_serial, c);
}

USARTSerial::operator bool() {
  return true;
}
 8091606:	2001      	movs	r0, #1
 8091608:	4770      	bx	lr

0809160a <_ZN11USARTSerial9isEnabledEv>:

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 809160a:	7c00      	ldrb	r0, [r0, #16]
 809160c:	f7fe bfbc 	b.w	8090588 <HAL_USART_Is_Enabled>

08091610 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8091610:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8091612:	4d0c      	ldr	r5, [pc, #48]	; (8091644 <_Z22__fetch_global_Serial1v+0x34>)
 8091614:	6829      	ldr	r1, [r5, #0]
 8091616:	f011 0401 	ands.w	r4, r1, #1
 809161a:	d111      	bne.n	8091640 <_Z22__fetch_global_Serial1v+0x30>
 809161c:	4628      	mov	r0, r5
 809161e:	f7ee fd44 	bl	80800aa <__cxa_guard_acquire>
 8091622:	b168      	cbz	r0, 8091640 <_Z22__fetch_global_Serial1v+0x30>
 8091624:	4a08      	ldr	r2, [pc, #32]	; (8091648 <_Z22__fetch_global_Serial1v+0x38>)
 8091626:	4621      	mov	r1, r4
 8091628:	4b08      	ldr	r3, [pc, #32]	; (809164c <_Z22__fetch_global_Serial1v+0x3c>)
 809162a:	4809      	ldr	r0, [pc, #36]	; (8091650 <_Z22__fetch_global_Serial1v+0x40>)
 809162c:	f7ff ffce 	bl	80915cc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8091630:	4628      	mov	r0, r5
 8091632:	f7ee fd3f 	bl	80800b4 <__cxa_guard_release>
 8091636:	4a07      	ldr	r2, [pc, #28]	; (8091654 <_Z22__fetch_global_Serial1v+0x44>)
 8091638:	4907      	ldr	r1, [pc, #28]	; (8091658 <_Z22__fetch_global_Serial1v+0x48>)
 809163a:	4805      	ldr	r0, [pc, #20]	; (8091650 <_Z22__fetch_global_Serial1v+0x40>)
 809163c:	f000 f922 	bl	8091884 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8091640:	4803      	ldr	r0, [pc, #12]	; (8091650 <_Z22__fetch_global_Serial1v+0x40>)
 8091642:	bd38      	pop	{r3, r4, r5, pc}
 8091644:	20003ee8 	.word	0x20003ee8
 8091648:	20003eec 	.word	0x20003eec
 809164c:	20003e64 	.word	0x20003e64
 8091650:	20003e50 	.word	0x20003e50
 8091654:	200004d0 	.word	0x200004d0
 8091658:	0808fb39 	.word	0x0808fb39

0809165c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 809165c:	4770      	bx	lr

0809165e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 809165e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8091660:	4606      	mov	r6, r0
 8091662:	4615      	mov	r5, r2
 8091664:	460c      	mov	r4, r1
 8091666:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8091668:	42bc      	cmp	r4, r7
 809166a:	d006      	beq.n	809167a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 809166c:	6833      	ldr	r3, [r6, #0]
 809166e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8091672:	689b      	ldr	r3, [r3, #8]
 8091674:	4630      	mov	r0, r6
 8091676:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8091678:	e7f6      	b.n	8091668 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 809167a:	4628      	mov	r0, r5
 809167c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0809167e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 809167e:	2200      	movs	r2, #0
 8091680:	7c00      	ldrb	r0, [r0, #16]
 8091682:	f7fe bfb9 	b.w	80905f8 <HAL_I2C_Write_Data>

08091686 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 8091686:	2100      	movs	r1, #0
 8091688:	7c00      	ldrb	r0, [r0, #16]
 809168a:	f7fe bfbd 	b.w	8090608 <HAL_I2C_Available_Data>

0809168e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 809168e:	2100      	movs	r1, #0
 8091690:	7c00      	ldrb	r0, [r0, #16]
 8091692:	f7fe bfc1 	b.w	8090618 <HAL_I2C_Read_Data>

08091696 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 8091696:	2100      	movs	r1, #0
 8091698:	7c00      	ldrb	r0, [r0, #16]
 809169a:	f7fe bfc5 	b.w	8090628 <HAL_I2C_Peek_Data>

0809169e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 809169e:	2100      	movs	r1, #0
 80916a0:	7c00      	ldrb	r0, [r0, #16]
 80916a2:	f7fe bfc9 	b.w	8090638 <HAL_I2C_Flush_Data>

080916a6 <_ZN7TwoWireD0Ev>:
 80916a6:	b510      	push	{r4, lr}
 80916a8:	4604      	mov	r4, r0
 80916aa:	f7ee fcfa 	bl	80800a2 <_ZdlPv>
 80916ae:	4620      	mov	r0, r4
 80916b0:	bd10      	pop	{r4, pc}
	...

080916b4 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80916b4:	b510      	push	{r4, lr}
 80916b6:	4604      	mov	r4, r0
 80916b8:	4608      	mov	r0, r1
 80916ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80916be:	60a3      	str	r3, [r4, #8]
 80916c0:	4b04      	ldr	r3, [pc, #16]	; (80916d4 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80916c2:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80916c4:	7420      	strb	r0, [r4, #16]
 80916c6:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80916c8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80916ca:	f7fe ffc5 	bl	8090658 <HAL_I2C_Init>

}
 80916ce:	4620      	mov	r0, r4
 80916d0:	bd10      	pop	{r4, pc}
 80916d2:	bf00      	nop
 80916d4:	08095e24 	.word	0x08095e24

080916d8 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80916d8:	2300      	movs	r3, #0
 80916da:	461a      	mov	r2, r3
 80916dc:	4619      	mov	r1, r3
 80916de:	7c00      	ldrb	r0, [r0, #16]
 80916e0:	f7fe bf6a 	b.w	80905b8 <HAL_I2C_Begin>

080916e4 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80916e4:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80916e6:	2400      	movs	r4, #0
 80916e8:	7c00      	ldrb	r0, [r0, #16]
 80916ea:	9400      	str	r4, [sp, #0]
 80916ec:	f7fe ff6c 	bl	80905c8 <HAL_I2C_Request_Data>
  return result;
}
 80916f0:	b2c0      	uxtb	r0, r0
 80916f2:	b002      	add	sp, #8
 80916f4:	bd10      	pop	{r4, pc}

080916f6 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80916f6:	2301      	movs	r3, #1
 80916f8:	f7ff bff4 	b.w	80916e4 <_ZN7TwoWire11requestFromEhhh>

080916fc <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80916fc:	2200      	movs	r2, #0
 80916fe:	7c00      	ldrb	r0, [r0, #16]
 8091700:	f7fe bf6a 	b.w	80905d8 <HAL_I2C_Begin_Transmission>

08091704 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 8091704:	2200      	movs	r2, #0
 8091706:	7c00      	ldrb	r0, [r0, #16]
 8091708:	f7fe bf6e 	b.w	80905e8 <HAL_I2C_End_Transmission>

0809170c <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 809170c:	2101      	movs	r1, #1
 809170e:	f7ff bff9 	b.w	8091704 <_ZN7TwoWire15endTransmissionEh>

08091712 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 8091712:	2100      	movs	r1, #0
 8091714:	7c00      	ldrb	r0, [r0, #16]
 8091716:	f7fe bf97 	b.w	8090648 <HAL_I2C_Is_Enabled>
	...

0809171c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 809171c:	b510      	push	{r4, lr}
 809171e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 8091720:	480f      	ldr	r0, [pc, #60]	; (8091760 <pinAvailable+0x44>)
 8091722:	f7ff f97a 	bl	8090a1a <_ZN8SPIClass9isEnabledEv>
 8091726:	b128      	cbz	r0, 8091734 <pinAvailable+0x18>
 8091728:	f1a4 030d 	sub.w	r3, r4, #13
 809172c:	2b02      	cmp	r3, #2
 809172e:	d801      	bhi.n	8091734 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 8091730:	2000      	movs	r0, #0
 8091732:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 8091734:	f000 f886 	bl	8091844 <_Z19__fetch_global_Wirev>
 8091738:	f7ff ffeb 	bl	8091712 <_ZN7TwoWire9isEnabledEv>
 809173c:	b108      	cbz	r0, 8091742 <pinAvailable+0x26>
 809173e:	2c01      	cmp	r4, #1
 8091740:	d9f6      	bls.n	8091730 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 8091742:	f7ff ff65 	bl	8091610 <_Z22__fetch_global_Serial1v>
 8091746:	f7ff ff60 	bl	809160a <_ZN11USARTSerial9isEnabledEv>
 809174a:	b118      	cbz	r0, 8091754 <pinAvailable+0x38>
 809174c:	f1a4 0312 	sub.w	r3, r4, #18
 8091750:	2b01      	cmp	r3, #1
 8091752:	d9ed      	bls.n	8091730 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 8091754:	2c2e      	cmp	r4, #46	; 0x2e
 8091756:	bf8c      	ite	hi
 8091758:	2000      	movhi	r0, #0
 809175a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 809175c:	bd10      	pop	{r4, pc}
 809175e:	bf00      	nop
 8091760:	20003f70 	.word	0x20003f70

08091764 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8091764:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 8091766:	b538      	push	{r3, r4, r5, lr}
 8091768:	4604      	mov	r4, r0
 809176a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 809176c:	d80a      	bhi.n	8091784 <pinMode+0x20>
 809176e:	29ff      	cmp	r1, #255	; 0xff
 8091770:	d008      	beq.n	8091784 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8091772:	f7ff ffd3 	bl	809171c <pinAvailable>
 8091776:	b128      	cbz	r0, 8091784 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8091778:	4629      	mov	r1, r5
 809177a:	4620      	mov	r0, r4
}
 809177c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8091780:	f7fe bdfa 	b.w	8090378 <HAL_Pin_Mode>
 8091784:	bd38      	pop	{r3, r4, r5, pc}

08091786 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8091786:	b538      	push	{r3, r4, r5, lr}
 8091788:	4604      	mov	r4, r0
 809178a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 809178c:	f7fe fdfc 	bl	8090388 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8091790:	28ff      	cmp	r0, #255	; 0xff
 8091792:	d010      	beq.n	80917b6 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 8091794:	2806      	cmp	r0, #6
 8091796:	d804      	bhi.n	80917a2 <digitalWrite+0x1c>
 8091798:	234d      	movs	r3, #77	; 0x4d
 809179a:	fa23 f000 	lsr.w	r0, r3, r0
 809179e:	07c3      	lsls	r3, r0, #31
 80917a0:	d409      	bmi.n	80917b6 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80917a2:	4620      	mov	r0, r4
 80917a4:	f7ff ffba 	bl	809171c <pinAvailable>
 80917a8:	b128      	cbz	r0, 80917b6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80917aa:	4629      	mov	r1, r5
 80917ac:	4620      	mov	r0, r4
}
 80917ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80917b2:	f7fe bdf1 	b.w	8090398 <HAL_GPIO_Write>
 80917b6:	bd38      	pop	{r3, r4, r5, pc}

080917b8 <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80917b8:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80917ba:	4e11      	ldr	r6, [pc, #68]	; (8091800 <_GLOBAL__sub_I_SPI+0x48>)
 80917bc:	4d11      	ldr	r5, [pc, #68]	; (8091804 <_GLOBAL__sub_I_SPI+0x4c>)
 80917be:	4c12      	ldr	r4, [pc, #72]	; (8091808 <_GLOBAL__sub_I_SPI+0x50>)
 80917c0:	2100      	movs	r1, #0
 80917c2:	4630      	mov	r0, r6
 80917c4:	f7ff f890 	bl	80908e8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80917c8:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80917ca:	4e10      	ldr	r6, [pc, #64]	; (809180c <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80917cc:	462a      	mov	r2, r5
 80917ce:	4621      	mov	r1, r4
 80917d0:	f000 f858 	bl	8091884 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80917d4:	2101      	movs	r1, #1
 80917d6:	4630      	mov	r0, r6
 80917d8:	f7ff f886 	bl	80908e8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80917dc:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80917de:	4e0c      	ldr	r6, [pc, #48]	; (8091810 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80917e0:	462a      	mov	r2, r5
 80917e2:	4621      	mov	r1, r4
 80917e4:	f000 f84e 	bl	8091884 <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80917e8:	2102      	movs	r1, #2
 80917ea:	4630      	mov	r0, r6
 80917ec:	f7ff f87c 	bl	80908e8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80917f0:	462a      	mov	r2, r5
 80917f2:	4621      	mov	r1, r4
 80917f4:	4630      	mov	r0, r6
 80917f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80917fa:	f000 b843 	b.w	8091884 <__aeabi_atexit>
 80917fe:	bf00      	nop
 8091800:	20003f70 	.word	0x20003f70
 8091804:	200004d0 	.word	0x200004d0
 8091808:	080908d9 	.word	0x080908d9
 809180c:	20003f80 	.word	0x20003f80
 8091810:	20003f90 	.word	0x20003f90

08091814 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 8091814:	b513      	push	{r0, r1, r4, lr}
 8091816:	4c08      	ldr	r4, [pc, #32]	; (8091838 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8091818:	2300      	movs	r3, #0
 809181a:	461a      	mov	r2, r3
 809181c:	4619      	mov	r1, r3
 809181e:	9300      	str	r3, [sp, #0]
 8091820:	4620      	mov	r0, r4
 8091822:	f7ff fdaf 	bl	8091384 <_ZN9IPAddressC1Ehhhh>
 8091826:	4620      	mov	r0, r4
 8091828:	4a04      	ldr	r2, [pc, #16]	; (809183c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 809182a:	4905      	ldr	r1, [pc, #20]	; (8091840 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 809182c:	b002      	add	sp, #8
 809182e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8091832:	f000 b827 	b.w	8091884 <__aeabi_atexit>
 8091836:	bf00      	nop
 8091838:	20003fa4 	.word	0x20003fa4
 809183c:	200004d0 	.word	0x200004d0
 8091840:	0809131d 	.word	0x0809131d

08091844 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 8091844:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 8091846:	4d0b      	ldr	r5, [pc, #44]	; (8091874 <_Z19__fetch_global_Wirev+0x30>)
 8091848:	6829      	ldr	r1, [r5, #0]
 809184a:	f011 0401 	ands.w	r4, r1, #1
 809184e:	d10f      	bne.n	8091870 <_Z19__fetch_global_Wirev+0x2c>
 8091850:	4628      	mov	r0, r5
 8091852:	f7ee fc2a 	bl	80800aa <__cxa_guard_acquire>
 8091856:	b158      	cbz	r0, 8091870 <_Z19__fetch_global_Wirev+0x2c>
 8091858:	4621      	mov	r1, r4
 809185a:	4807      	ldr	r0, [pc, #28]	; (8091878 <_Z19__fetch_global_Wirev+0x34>)
 809185c:	f7ff ff2a 	bl	80916b4 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 8091860:	4628      	mov	r0, r5
 8091862:	f7ee fc27 	bl	80800b4 <__cxa_guard_release>
 8091866:	4a05      	ldr	r2, [pc, #20]	; (809187c <_Z19__fetch_global_Wirev+0x38>)
 8091868:	4905      	ldr	r1, [pc, #20]	; (8091880 <_Z19__fetch_global_Wirev+0x3c>)
 809186a:	4803      	ldr	r0, [pc, #12]	; (8091878 <_Z19__fetch_global_Wirev+0x34>)
 809186c:	f000 f80a 	bl	8091884 <__aeabi_atexit>
	return wire;
}
 8091870:	4801      	ldr	r0, [pc, #4]	; (8091878 <_Z19__fetch_global_Wirev+0x34>)
 8091872:	bd38      	pop	{r3, r4, r5, pc}
 8091874:	20003fac 	.word	0x20003fac
 8091878:	20003fb0 	.word	0x20003fb0
 809187c:	200004d0 	.word	0x200004d0
 8091880:	0809165d 	.word	0x0809165d

08091884 <__aeabi_atexit>:
 8091884:	460b      	mov	r3, r1
 8091886:	4601      	mov	r1, r0
 8091888:	4618      	mov	r0, r3
 809188a:	f000 bd41 	b.w	8092310 <__cxa_atexit>

0809188e <_ZSt25__throw_bad_function_callv>:
 809188e:	b508      	push	{r3, lr}
 8091890:	f7ff f812 	bl	80908b8 <abort>

08091894 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8091894:	4b18      	ldr	r3, [pc, #96]	; (80918f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8091896:	681a      	ldr	r2, [r3, #0]
 8091898:	07d1      	lsls	r1, r2, #31
 809189a:	bf5c      	itt	pl
 809189c:	2201      	movpl	r2, #1
 809189e:	601a      	strpl	r2, [r3, #0]
 80918a0:	4b16      	ldr	r3, [pc, #88]	; (80918fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80918a2:	681a      	ldr	r2, [r3, #0]
 80918a4:	07d2      	lsls	r2, r2, #31
 80918a6:	bf5c      	itt	pl
 80918a8:	2201      	movpl	r2, #1
 80918aa:	601a      	strpl	r2, [r3, #0]
 80918ac:	4b14      	ldr	r3, [pc, #80]	; (8091900 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80918ae:	681a      	ldr	r2, [r3, #0]
 80918b0:	07d0      	lsls	r0, r2, #31
 80918b2:	bf5c      	itt	pl
 80918b4:	2201      	movpl	r2, #1
 80918b6:	601a      	strpl	r2, [r3, #0]
 80918b8:	4b12      	ldr	r3, [pc, #72]	; (8091904 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80918ba:	681a      	ldr	r2, [r3, #0]
 80918bc:	07d1      	lsls	r1, r2, #31
 80918be:	bf5c      	itt	pl
 80918c0:	2201      	movpl	r2, #1
 80918c2:	601a      	strpl	r2, [r3, #0]
 80918c4:	4b10      	ldr	r3, [pc, #64]	; (8091908 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80918c6:	681a      	ldr	r2, [r3, #0]
 80918c8:	07d2      	lsls	r2, r2, #31
 80918ca:	bf5c      	itt	pl
 80918cc:	2201      	movpl	r2, #1
 80918ce:	601a      	strpl	r2, [r3, #0]
 80918d0:	4b0e      	ldr	r3, [pc, #56]	; (809190c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80918d2:	681a      	ldr	r2, [r3, #0]
 80918d4:	07d0      	lsls	r0, r2, #31
 80918d6:	bf5c      	itt	pl
 80918d8:	2201      	movpl	r2, #1
 80918da:	601a      	strpl	r2, [r3, #0]
 80918dc:	4b0c      	ldr	r3, [pc, #48]	; (8091910 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80918de:	681a      	ldr	r2, [r3, #0]
 80918e0:	07d1      	lsls	r1, r2, #31
 80918e2:	bf5c      	itt	pl
 80918e4:	2201      	movpl	r2, #1
 80918e6:	601a      	strpl	r2, [r3, #0]
 80918e8:	4b0a      	ldr	r3, [pc, #40]	; (8091914 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80918ea:	681a      	ldr	r2, [r3, #0]
 80918ec:	07d2      	lsls	r2, r2, #31
 80918ee:	bf5c      	itt	pl
 80918f0:	2201      	movpl	r2, #1
 80918f2:	601a      	strpl	r2, [r3, #0]
 80918f4:	4770      	bx	lr
 80918f6:	bf00      	nop
 80918f8:	20003fe0 	.word	0x20003fe0
 80918fc:	20003fdc 	.word	0x20003fdc
 8091900:	20003fd8 	.word	0x20003fd8
 8091904:	20003fd4 	.word	0x20003fd4
 8091908:	20003fd0 	.word	0x20003fd0
 809190c:	20003fcc 	.word	0x20003fcc
 8091910:	20003fc8 	.word	0x20003fc8
 8091914:	20003fc4 	.word	0x20003fc4

08091918 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8091918:	4b24      	ldr	r3, [pc, #144]	; (80919ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 809191a:	681a      	ldr	r2, [r3, #0]
 809191c:	07d0      	lsls	r0, r2, #31
 809191e:	bf5c      	itt	pl
 8091920:	2201      	movpl	r2, #1
 8091922:	601a      	strpl	r2, [r3, #0]
 8091924:	4b22      	ldr	r3, [pc, #136]	; (80919b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8091926:	681a      	ldr	r2, [r3, #0]
 8091928:	07d1      	lsls	r1, r2, #31
 809192a:	bf5c      	itt	pl
 809192c:	2201      	movpl	r2, #1
 809192e:	601a      	strpl	r2, [r3, #0]
 8091930:	4b20      	ldr	r3, [pc, #128]	; (80919b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8091932:	681a      	ldr	r2, [r3, #0]
 8091934:	07d2      	lsls	r2, r2, #31
 8091936:	bf5c      	itt	pl
 8091938:	2201      	movpl	r2, #1
 809193a:	601a      	strpl	r2, [r3, #0]
 809193c:	4b1e      	ldr	r3, [pc, #120]	; (80919b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 809193e:	681a      	ldr	r2, [r3, #0]
 8091940:	07d0      	lsls	r0, r2, #31
 8091942:	bf5c      	itt	pl
 8091944:	2201      	movpl	r2, #1
 8091946:	601a      	strpl	r2, [r3, #0]
 8091948:	4b1c      	ldr	r3, [pc, #112]	; (80919bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 809194a:	681a      	ldr	r2, [r3, #0]
 809194c:	07d1      	lsls	r1, r2, #31
 809194e:	bf5c      	itt	pl
 8091950:	2201      	movpl	r2, #1
 8091952:	601a      	strpl	r2, [r3, #0]
 8091954:	4b1a      	ldr	r3, [pc, #104]	; (80919c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8091956:	681a      	ldr	r2, [r3, #0]
 8091958:	07d2      	lsls	r2, r2, #31
 809195a:	bf5c      	itt	pl
 809195c:	2201      	movpl	r2, #1
 809195e:	601a      	strpl	r2, [r3, #0]
 8091960:	4b18      	ldr	r3, [pc, #96]	; (80919c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8091962:	681a      	ldr	r2, [r3, #0]
 8091964:	07d0      	lsls	r0, r2, #31
 8091966:	bf5c      	itt	pl
 8091968:	2201      	movpl	r2, #1
 809196a:	601a      	strpl	r2, [r3, #0]
 809196c:	4b16      	ldr	r3, [pc, #88]	; (80919c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 809196e:	681a      	ldr	r2, [r3, #0]
 8091970:	07d1      	lsls	r1, r2, #31
 8091972:	bf5c      	itt	pl
 8091974:	2201      	movpl	r2, #1
 8091976:	601a      	strpl	r2, [r3, #0]
 8091978:	4b14      	ldr	r3, [pc, #80]	; (80919cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 809197a:	681a      	ldr	r2, [r3, #0]
 809197c:	07d2      	lsls	r2, r2, #31
 809197e:	bf5c      	itt	pl
 8091980:	2201      	movpl	r2, #1
 8091982:	601a      	strpl	r2, [r3, #0]
 8091984:	4b12      	ldr	r3, [pc, #72]	; (80919d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8091986:	681a      	ldr	r2, [r3, #0]
 8091988:	07d0      	lsls	r0, r2, #31
 809198a:	bf5c      	itt	pl
 809198c:	2201      	movpl	r2, #1
 809198e:	601a      	strpl	r2, [r3, #0]
 8091990:	4b10      	ldr	r3, [pc, #64]	; (80919d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8091992:	681a      	ldr	r2, [r3, #0]
 8091994:	07d1      	lsls	r1, r2, #31
 8091996:	bf5c      	itt	pl
 8091998:	2201      	movpl	r2, #1
 809199a:	601a      	strpl	r2, [r3, #0]
 809199c:	4b0e      	ldr	r3, [pc, #56]	; (80919d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 809199e:	681a      	ldr	r2, [r3, #0]
 80919a0:	07d2      	lsls	r2, r2, #31
 80919a2:	bf5c      	itt	pl
 80919a4:	2201      	movpl	r2, #1
 80919a6:	601a      	strpl	r2, [r3, #0]
 80919a8:	4770      	bx	lr
 80919aa:	bf00      	nop
 80919ac:	20004010 	.word	0x20004010
 80919b0:	2000400c 	.word	0x2000400c
 80919b4:	20004008 	.word	0x20004008
 80919b8:	20004004 	.word	0x20004004
 80919bc:	20004000 	.word	0x20004000
 80919c0:	20003ffc 	.word	0x20003ffc
 80919c4:	20003ff8 	.word	0x20003ff8
 80919c8:	20003ff4 	.word	0x20003ff4
 80919cc:	20003ff0 	.word	0x20003ff0
 80919d0:	20003fec 	.word	0x20003fec
 80919d4:	20003fe8 	.word	0x20003fe8
 80919d8:	20003fe4 	.word	0x20003fe4

080919dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80919dc:	4b24      	ldr	r3, [pc, #144]	; (8091a70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80919de:	681a      	ldr	r2, [r3, #0]
 80919e0:	07d0      	lsls	r0, r2, #31
 80919e2:	bf5c      	itt	pl
 80919e4:	2201      	movpl	r2, #1
 80919e6:	601a      	strpl	r2, [r3, #0]
 80919e8:	4b22      	ldr	r3, [pc, #136]	; (8091a74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80919ea:	681a      	ldr	r2, [r3, #0]
 80919ec:	07d1      	lsls	r1, r2, #31
 80919ee:	bf5c      	itt	pl
 80919f0:	2201      	movpl	r2, #1
 80919f2:	601a      	strpl	r2, [r3, #0]
 80919f4:	4b20      	ldr	r3, [pc, #128]	; (8091a78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80919f6:	681a      	ldr	r2, [r3, #0]
 80919f8:	07d2      	lsls	r2, r2, #31
 80919fa:	bf5c      	itt	pl
 80919fc:	2201      	movpl	r2, #1
 80919fe:	601a      	strpl	r2, [r3, #0]
 8091a00:	4b1e      	ldr	r3, [pc, #120]	; (8091a7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8091a02:	681a      	ldr	r2, [r3, #0]
 8091a04:	07d0      	lsls	r0, r2, #31
 8091a06:	bf5c      	itt	pl
 8091a08:	2201      	movpl	r2, #1
 8091a0a:	601a      	strpl	r2, [r3, #0]
 8091a0c:	4b1c      	ldr	r3, [pc, #112]	; (8091a80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8091a0e:	681a      	ldr	r2, [r3, #0]
 8091a10:	07d1      	lsls	r1, r2, #31
 8091a12:	bf5c      	itt	pl
 8091a14:	2201      	movpl	r2, #1
 8091a16:	601a      	strpl	r2, [r3, #0]
 8091a18:	4b1a      	ldr	r3, [pc, #104]	; (8091a84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 8091a1a:	681a      	ldr	r2, [r3, #0]
 8091a1c:	07d2      	lsls	r2, r2, #31
 8091a1e:	bf5c      	itt	pl
 8091a20:	2201      	movpl	r2, #1
 8091a22:	601a      	strpl	r2, [r3, #0]
 8091a24:	4b18      	ldr	r3, [pc, #96]	; (8091a88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 8091a26:	681a      	ldr	r2, [r3, #0]
 8091a28:	07d0      	lsls	r0, r2, #31
 8091a2a:	bf5c      	itt	pl
 8091a2c:	2201      	movpl	r2, #1
 8091a2e:	601a      	strpl	r2, [r3, #0]
 8091a30:	4b16      	ldr	r3, [pc, #88]	; (8091a8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8091a32:	681a      	ldr	r2, [r3, #0]
 8091a34:	07d1      	lsls	r1, r2, #31
 8091a36:	bf5c      	itt	pl
 8091a38:	2201      	movpl	r2, #1
 8091a3a:	601a      	strpl	r2, [r3, #0]
 8091a3c:	4b14      	ldr	r3, [pc, #80]	; (8091a90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8091a3e:	681a      	ldr	r2, [r3, #0]
 8091a40:	07d2      	lsls	r2, r2, #31
 8091a42:	bf5c      	itt	pl
 8091a44:	2201      	movpl	r2, #1
 8091a46:	601a      	strpl	r2, [r3, #0]
 8091a48:	4b12      	ldr	r3, [pc, #72]	; (8091a94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8091a4a:	681a      	ldr	r2, [r3, #0]
 8091a4c:	07d0      	lsls	r0, r2, #31
 8091a4e:	bf5c      	itt	pl
 8091a50:	2201      	movpl	r2, #1
 8091a52:	601a      	strpl	r2, [r3, #0]
 8091a54:	4b10      	ldr	r3, [pc, #64]	; (8091a98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 8091a56:	681a      	ldr	r2, [r3, #0]
 8091a58:	07d1      	lsls	r1, r2, #31
 8091a5a:	bf5c      	itt	pl
 8091a5c:	2201      	movpl	r2, #1
 8091a5e:	601a      	strpl	r2, [r3, #0]
 8091a60:	4b0e      	ldr	r3, [pc, #56]	; (8091a9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8091a62:	681a      	ldr	r2, [r3, #0]
 8091a64:	07d2      	lsls	r2, r2, #31
 8091a66:	bf5c      	itt	pl
 8091a68:	2201      	movpl	r2, #1
 8091a6a:	601a      	strpl	r2, [r3, #0]
 8091a6c:	4770      	bx	lr
 8091a6e:	bf00      	nop
 8091a70:	20004040 	.word	0x20004040
 8091a74:	2000403c 	.word	0x2000403c
 8091a78:	20004038 	.word	0x20004038
 8091a7c:	20004034 	.word	0x20004034
 8091a80:	20004030 	.word	0x20004030
 8091a84:	2000402c 	.word	0x2000402c
 8091a88:	20004028 	.word	0x20004028
 8091a8c:	20004024 	.word	0x20004024
 8091a90:	20004020 	.word	0x20004020
 8091a94:	2000401c 	.word	0x2000401c
 8091a98:	20004018 	.word	0x20004018
 8091a9c:	20004014 	.word	0x20004014

08091aa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8091aa0:	4b18      	ldr	r3, [pc, #96]	; (8091b04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8091aa2:	681a      	ldr	r2, [r3, #0]
 8091aa4:	07d1      	lsls	r1, r2, #31
 8091aa6:	bf5c      	itt	pl
 8091aa8:	2201      	movpl	r2, #1
 8091aaa:	601a      	strpl	r2, [r3, #0]
 8091aac:	4b16      	ldr	r3, [pc, #88]	; (8091b08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8091aae:	681a      	ldr	r2, [r3, #0]
 8091ab0:	07d2      	lsls	r2, r2, #31
 8091ab2:	bf5c      	itt	pl
 8091ab4:	2201      	movpl	r2, #1
 8091ab6:	601a      	strpl	r2, [r3, #0]
 8091ab8:	4b14      	ldr	r3, [pc, #80]	; (8091b0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8091aba:	681a      	ldr	r2, [r3, #0]
 8091abc:	07d0      	lsls	r0, r2, #31
 8091abe:	bf5c      	itt	pl
 8091ac0:	2201      	movpl	r2, #1
 8091ac2:	601a      	strpl	r2, [r3, #0]
 8091ac4:	4b12      	ldr	r3, [pc, #72]	; (8091b10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8091ac6:	681a      	ldr	r2, [r3, #0]
 8091ac8:	07d1      	lsls	r1, r2, #31
 8091aca:	bf5c      	itt	pl
 8091acc:	2201      	movpl	r2, #1
 8091ace:	601a      	strpl	r2, [r3, #0]
 8091ad0:	4b10      	ldr	r3, [pc, #64]	; (8091b14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8091ad2:	681a      	ldr	r2, [r3, #0]
 8091ad4:	07d2      	lsls	r2, r2, #31
 8091ad6:	bf5c      	itt	pl
 8091ad8:	2201      	movpl	r2, #1
 8091ada:	601a      	strpl	r2, [r3, #0]
 8091adc:	4b0e      	ldr	r3, [pc, #56]	; (8091b18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8091ade:	681a      	ldr	r2, [r3, #0]
 8091ae0:	07d0      	lsls	r0, r2, #31
 8091ae2:	bf5c      	itt	pl
 8091ae4:	2201      	movpl	r2, #1
 8091ae6:	601a      	strpl	r2, [r3, #0]
 8091ae8:	4b0c      	ldr	r3, [pc, #48]	; (8091b1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8091aea:	681a      	ldr	r2, [r3, #0]
 8091aec:	07d1      	lsls	r1, r2, #31
 8091aee:	bf5c      	itt	pl
 8091af0:	2201      	movpl	r2, #1
 8091af2:	601a      	strpl	r2, [r3, #0]
 8091af4:	4b0a      	ldr	r3, [pc, #40]	; (8091b20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8091af6:	681a      	ldr	r2, [r3, #0]
 8091af8:	07d2      	lsls	r2, r2, #31
 8091afa:	bf5c      	itt	pl
 8091afc:	2201      	movpl	r2, #1
 8091afe:	601a      	strpl	r2, [r3, #0]
 8091b00:	4770      	bx	lr
 8091b02:	bf00      	nop
 8091b04:	20004060 	.word	0x20004060
 8091b08:	2000405c 	.word	0x2000405c
 8091b0c:	20004058 	.word	0x20004058
 8091b10:	20004054 	.word	0x20004054
 8091b14:	20004050 	.word	0x20004050
 8091b18:	2000404c 	.word	0x2000404c
 8091b1c:	20004048 	.word	0x20004048
 8091b20:	20004044 	.word	0x20004044

08091b24 <__aeabi_frsub>:
 8091b24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8091b28:	e002      	b.n	8091b30 <__addsf3>
 8091b2a:	bf00      	nop

08091b2c <__aeabi_fsub>:
 8091b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08091b30 <__addsf3>:
 8091b30:	0042      	lsls	r2, r0, #1
 8091b32:	bf1f      	itttt	ne
 8091b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8091b38:	ea92 0f03 	teqne	r2, r3
 8091b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8091b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8091b44:	d06a      	beq.n	8091c1c <__addsf3+0xec>
 8091b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8091b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8091b4e:	bfc1      	itttt	gt
 8091b50:	18d2      	addgt	r2, r2, r3
 8091b52:	4041      	eorgt	r1, r0
 8091b54:	4048      	eorgt	r0, r1
 8091b56:	4041      	eorgt	r1, r0
 8091b58:	bfb8      	it	lt
 8091b5a:	425b      	neglt	r3, r3
 8091b5c:	2b19      	cmp	r3, #25
 8091b5e:	bf88      	it	hi
 8091b60:	4770      	bxhi	lr
 8091b62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8091b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8091b6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8091b6e:	bf18      	it	ne
 8091b70:	4240      	negne	r0, r0
 8091b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8091b76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8091b7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8091b7e:	bf18      	it	ne
 8091b80:	4249      	negne	r1, r1
 8091b82:	ea92 0f03 	teq	r2, r3
 8091b86:	d03f      	beq.n	8091c08 <__addsf3+0xd8>
 8091b88:	f1a2 0201 	sub.w	r2, r2, #1
 8091b8c:	fa41 fc03 	asr.w	ip, r1, r3
 8091b90:	eb10 000c 	adds.w	r0, r0, ip
 8091b94:	f1c3 0320 	rsb	r3, r3, #32
 8091b98:	fa01 f103 	lsl.w	r1, r1, r3
 8091b9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8091ba0:	d502      	bpl.n	8091ba8 <__addsf3+0x78>
 8091ba2:	4249      	negs	r1, r1
 8091ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8091ba8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8091bac:	d313      	bcc.n	8091bd6 <__addsf3+0xa6>
 8091bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8091bb2:	d306      	bcc.n	8091bc2 <__addsf3+0x92>
 8091bb4:	0840      	lsrs	r0, r0, #1
 8091bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8091bba:	f102 0201 	add.w	r2, r2, #1
 8091bbe:	2afe      	cmp	r2, #254	; 0xfe
 8091bc0:	d251      	bcs.n	8091c66 <__addsf3+0x136>
 8091bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8091bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8091bca:	bf08      	it	eq
 8091bcc:	f020 0001 	biceq.w	r0, r0, #1
 8091bd0:	ea40 0003 	orr.w	r0, r0, r3
 8091bd4:	4770      	bx	lr
 8091bd6:	0049      	lsls	r1, r1, #1
 8091bd8:	eb40 0000 	adc.w	r0, r0, r0
 8091bdc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8091be0:	f1a2 0201 	sub.w	r2, r2, #1
 8091be4:	d1ed      	bne.n	8091bc2 <__addsf3+0x92>
 8091be6:	fab0 fc80 	clz	ip, r0
 8091bea:	f1ac 0c08 	sub.w	ip, ip, #8
 8091bee:	ebb2 020c 	subs.w	r2, r2, ip
 8091bf2:	fa00 f00c 	lsl.w	r0, r0, ip
 8091bf6:	bfaa      	itet	ge
 8091bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8091bfc:	4252      	neglt	r2, r2
 8091bfe:	4318      	orrge	r0, r3
 8091c00:	bfbc      	itt	lt
 8091c02:	40d0      	lsrlt	r0, r2
 8091c04:	4318      	orrlt	r0, r3
 8091c06:	4770      	bx	lr
 8091c08:	f092 0f00 	teq	r2, #0
 8091c0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8091c10:	bf06      	itte	eq
 8091c12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8091c16:	3201      	addeq	r2, #1
 8091c18:	3b01      	subne	r3, #1
 8091c1a:	e7b5      	b.n	8091b88 <__addsf3+0x58>
 8091c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8091c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8091c24:	bf18      	it	ne
 8091c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8091c2a:	d021      	beq.n	8091c70 <__addsf3+0x140>
 8091c2c:	ea92 0f03 	teq	r2, r3
 8091c30:	d004      	beq.n	8091c3c <__addsf3+0x10c>
 8091c32:	f092 0f00 	teq	r2, #0
 8091c36:	bf08      	it	eq
 8091c38:	4608      	moveq	r0, r1
 8091c3a:	4770      	bx	lr
 8091c3c:	ea90 0f01 	teq	r0, r1
 8091c40:	bf1c      	itt	ne
 8091c42:	2000      	movne	r0, #0
 8091c44:	4770      	bxne	lr
 8091c46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8091c4a:	d104      	bne.n	8091c56 <__addsf3+0x126>
 8091c4c:	0040      	lsls	r0, r0, #1
 8091c4e:	bf28      	it	cs
 8091c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8091c54:	4770      	bx	lr
 8091c56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8091c5a:	bf3c      	itt	cc
 8091c5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8091c60:	4770      	bxcc	lr
 8091c62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8091c66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8091c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8091c6e:	4770      	bx	lr
 8091c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8091c74:	bf16      	itet	ne
 8091c76:	4608      	movne	r0, r1
 8091c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8091c7c:	4601      	movne	r1, r0
 8091c7e:	0242      	lsls	r2, r0, #9
 8091c80:	bf06      	itte	eq
 8091c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8091c86:	ea90 0f01 	teqeq	r0, r1
 8091c8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8091c8e:	4770      	bx	lr

08091c90 <__aeabi_ui2f>:
 8091c90:	f04f 0300 	mov.w	r3, #0
 8091c94:	e004      	b.n	8091ca0 <__aeabi_i2f+0x8>
 8091c96:	bf00      	nop

08091c98 <__aeabi_i2f>:
 8091c98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8091c9c:	bf48      	it	mi
 8091c9e:	4240      	negmi	r0, r0
 8091ca0:	ea5f 0c00 	movs.w	ip, r0
 8091ca4:	bf08      	it	eq
 8091ca6:	4770      	bxeq	lr
 8091ca8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8091cac:	4601      	mov	r1, r0
 8091cae:	f04f 0000 	mov.w	r0, #0
 8091cb2:	e01c      	b.n	8091cee <__aeabi_l2f+0x2a>

08091cb4 <__aeabi_ul2f>:
 8091cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8091cb8:	bf08      	it	eq
 8091cba:	4770      	bxeq	lr
 8091cbc:	f04f 0300 	mov.w	r3, #0
 8091cc0:	e00a      	b.n	8091cd8 <__aeabi_l2f+0x14>
 8091cc2:	bf00      	nop

08091cc4 <__aeabi_l2f>:
 8091cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8091cc8:	bf08      	it	eq
 8091cca:	4770      	bxeq	lr
 8091ccc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8091cd0:	d502      	bpl.n	8091cd8 <__aeabi_l2f+0x14>
 8091cd2:	4240      	negs	r0, r0
 8091cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8091cd8:	ea5f 0c01 	movs.w	ip, r1
 8091cdc:	bf02      	ittt	eq
 8091cde:	4684      	moveq	ip, r0
 8091ce0:	4601      	moveq	r1, r0
 8091ce2:	2000      	moveq	r0, #0
 8091ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8091ce8:	bf08      	it	eq
 8091cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8091cee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8091cf2:	fabc f28c 	clz	r2, ip
 8091cf6:	3a08      	subs	r2, #8
 8091cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8091cfc:	db10      	blt.n	8091d20 <__aeabi_l2f+0x5c>
 8091cfe:	fa01 fc02 	lsl.w	ip, r1, r2
 8091d02:	4463      	add	r3, ip
 8091d04:	fa00 fc02 	lsl.w	ip, r0, r2
 8091d08:	f1c2 0220 	rsb	r2, r2, #32
 8091d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8091d10:	fa20 f202 	lsr.w	r2, r0, r2
 8091d14:	eb43 0002 	adc.w	r0, r3, r2
 8091d18:	bf08      	it	eq
 8091d1a:	f020 0001 	biceq.w	r0, r0, #1
 8091d1e:	4770      	bx	lr
 8091d20:	f102 0220 	add.w	r2, r2, #32
 8091d24:	fa01 fc02 	lsl.w	ip, r1, r2
 8091d28:	f1c2 0220 	rsb	r2, r2, #32
 8091d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8091d30:	fa21 f202 	lsr.w	r2, r1, r2
 8091d34:	eb43 0002 	adc.w	r0, r3, r2
 8091d38:	bf08      	it	eq
 8091d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8091d3e:	4770      	bx	lr

08091d40 <__aeabi_fmul>:
 8091d40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8091d44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8091d48:	bf1e      	ittt	ne
 8091d4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8091d4e:	ea92 0f0c 	teqne	r2, ip
 8091d52:	ea93 0f0c 	teqne	r3, ip
 8091d56:	d06f      	beq.n	8091e38 <__aeabi_fmul+0xf8>
 8091d58:	441a      	add	r2, r3
 8091d5a:	ea80 0c01 	eor.w	ip, r0, r1
 8091d5e:	0240      	lsls	r0, r0, #9
 8091d60:	bf18      	it	ne
 8091d62:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8091d66:	d01e      	beq.n	8091da6 <__aeabi_fmul+0x66>
 8091d68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8091d6c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8091d70:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8091d74:	fba0 3101 	umull	r3, r1, r0, r1
 8091d78:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8091d7c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8091d80:	bf3e      	ittt	cc
 8091d82:	0049      	lslcc	r1, r1, #1
 8091d84:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8091d88:	005b      	lslcc	r3, r3, #1
 8091d8a:	ea40 0001 	orr.w	r0, r0, r1
 8091d8e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8091d92:	2afd      	cmp	r2, #253	; 0xfd
 8091d94:	d81d      	bhi.n	8091dd2 <__aeabi_fmul+0x92>
 8091d96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8091d9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8091d9e:	bf08      	it	eq
 8091da0:	f020 0001 	biceq.w	r0, r0, #1
 8091da4:	4770      	bx	lr
 8091da6:	f090 0f00 	teq	r0, #0
 8091daa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8091dae:	bf08      	it	eq
 8091db0:	0249      	lsleq	r1, r1, #9
 8091db2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8091db6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8091dba:	3a7f      	subs	r2, #127	; 0x7f
 8091dbc:	bfc2      	ittt	gt
 8091dbe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8091dc2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8091dc6:	4770      	bxgt	lr
 8091dc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8091dcc:	f04f 0300 	mov.w	r3, #0
 8091dd0:	3a01      	subs	r2, #1
 8091dd2:	dc5d      	bgt.n	8091e90 <__aeabi_fmul+0x150>
 8091dd4:	f112 0f19 	cmn.w	r2, #25
 8091dd8:	bfdc      	itt	le
 8091dda:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8091dde:	4770      	bxle	lr
 8091de0:	f1c2 0200 	rsb	r2, r2, #0
 8091de4:	0041      	lsls	r1, r0, #1
 8091de6:	fa21 f102 	lsr.w	r1, r1, r2
 8091dea:	f1c2 0220 	rsb	r2, r2, #32
 8091dee:	fa00 fc02 	lsl.w	ip, r0, r2
 8091df2:	ea5f 0031 	movs.w	r0, r1, rrx
 8091df6:	f140 0000 	adc.w	r0, r0, #0
 8091dfa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8091dfe:	bf08      	it	eq
 8091e00:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8091e04:	4770      	bx	lr
 8091e06:	f092 0f00 	teq	r2, #0
 8091e0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8091e0e:	bf02      	ittt	eq
 8091e10:	0040      	lsleq	r0, r0, #1
 8091e12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8091e16:	3a01      	subeq	r2, #1
 8091e18:	d0f9      	beq.n	8091e0e <__aeabi_fmul+0xce>
 8091e1a:	ea40 000c 	orr.w	r0, r0, ip
 8091e1e:	f093 0f00 	teq	r3, #0
 8091e22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8091e26:	bf02      	ittt	eq
 8091e28:	0049      	lsleq	r1, r1, #1
 8091e2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8091e2e:	3b01      	subeq	r3, #1
 8091e30:	d0f9      	beq.n	8091e26 <__aeabi_fmul+0xe6>
 8091e32:	ea41 010c 	orr.w	r1, r1, ip
 8091e36:	e78f      	b.n	8091d58 <__aeabi_fmul+0x18>
 8091e38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8091e3c:	ea92 0f0c 	teq	r2, ip
 8091e40:	bf18      	it	ne
 8091e42:	ea93 0f0c 	teqne	r3, ip
 8091e46:	d00a      	beq.n	8091e5e <__aeabi_fmul+0x11e>
 8091e48:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8091e4c:	bf18      	it	ne
 8091e4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8091e52:	d1d8      	bne.n	8091e06 <__aeabi_fmul+0xc6>
 8091e54:	ea80 0001 	eor.w	r0, r0, r1
 8091e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8091e5c:	4770      	bx	lr
 8091e5e:	f090 0f00 	teq	r0, #0
 8091e62:	bf17      	itett	ne
 8091e64:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8091e68:	4608      	moveq	r0, r1
 8091e6a:	f091 0f00 	teqne	r1, #0
 8091e6e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8091e72:	d014      	beq.n	8091e9e <__aeabi_fmul+0x15e>
 8091e74:	ea92 0f0c 	teq	r2, ip
 8091e78:	d101      	bne.n	8091e7e <__aeabi_fmul+0x13e>
 8091e7a:	0242      	lsls	r2, r0, #9
 8091e7c:	d10f      	bne.n	8091e9e <__aeabi_fmul+0x15e>
 8091e7e:	ea93 0f0c 	teq	r3, ip
 8091e82:	d103      	bne.n	8091e8c <__aeabi_fmul+0x14c>
 8091e84:	024b      	lsls	r3, r1, #9
 8091e86:	bf18      	it	ne
 8091e88:	4608      	movne	r0, r1
 8091e8a:	d108      	bne.n	8091e9e <__aeabi_fmul+0x15e>
 8091e8c:	ea80 0001 	eor.w	r0, r0, r1
 8091e90:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8091e94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8091e98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8091e9c:	4770      	bx	lr
 8091e9e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8091ea2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8091ea6:	4770      	bx	lr

08091ea8 <__aeabi_fdiv>:
 8091ea8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8091eac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8091eb0:	bf1e      	ittt	ne
 8091eb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8091eb6:	ea92 0f0c 	teqne	r2, ip
 8091eba:	ea93 0f0c 	teqne	r3, ip
 8091ebe:	d069      	beq.n	8091f94 <__aeabi_fdiv+0xec>
 8091ec0:	eba2 0203 	sub.w	r2, r2, r3
 8091ec4:	ea80 0c01 	eor.w	ip, r0, r1
 8091ec8:	0249      	lsls	r1, r1, #9
 8091eca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8091ece:	d037      	beq.n	8091f40 <__aeabi_fdiv+0x98>
 8091ed0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8091ed4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8091ed8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8091edc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8091ee0:	428b      	cmp	r3, r1
 8091ee2:	bf38      	it	cc
 8091ee4:	005b      	lslcc	r3, r3, #1
 8091ee6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8091eea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8091eee:	428b      	cmp	r3, r1
 8091ef0:	bf24      	itt	cs
 8091ef2:	1a5b      	subcs	r3, r3, r1
 8091ef4:	ea40 000c 	orrcs.w	r0, r0, ip
 8091ef8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8091efc:	bf24      	itt	cs
 8091efe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8091f02:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8091f06:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8091f0a:	bf24      	itt	cs
 8091f0c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8091f10:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8091f14:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8091f18:	bf24      	itt	cs
 8091f1a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8091f1e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8091f22:	011b      	lsls	r3, r3, #4
 8091f24:	bf18      	it	ne
 8091f26:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8091f2a:	d1e0      	bne.n	8091eee <__aeabi_fdiv+0x46>
 8091f2c:	2afd      	cmp	r2, #253	; 0xfd
 8091f2e:	f63f af50 	bhi.w	8091dd2 <__aeabi_fmul+0x92>
 8091f32:	428b      	cmp	r3, r1
 8091f34:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8091f38:	bf08      	it	eq
 8091f3a:	f020 0001 	biceq.w	r0, r0, #1
 8091f3e:	4770      	bx	lr
 8091f40:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8091f44:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8091f48:	327f      	adds	r2, #127	; 0x7f
 8091f4a:	bfc2      	ittt	gt
 8091f4c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8091f50:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8091f54:	4770      	bxgt	lr
 8091f56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8091f5a:	f04f 0300 	mov.w	r3, #0
 8091f5e:	3a01      	subs	r2, #1
 8091f60:	e737      	b.n	8091dd2 <__aeabi_fmul+0x92>
 8091f62:	f092 0f00 	teq	r2, #0
 8091f66:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8091f6a:	bf02      	ittt	eq
 8091f6c:	0040      	lsleq	r0, r0, #1
 8091f6e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8091f72:	3a01      	subeq	r2, #1
 8091f74:	d0f9      	beq.n	8091f6a <__aeabi_fdiv+0xc2>
 8091f76:	ea40 000c 	orr.w	r0, r0, ip
 8091f7a:	f093 0f00 	teq	r3, #0
 8091f7e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8091f82:	bf02      	ittt	eq
 8091f84:	0049      	lsleq	r1, r1, #1
 8091f86:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8091f8a:	3b01      	subeq	r3, #1
 8091f8c:	d0f9      	beq.n	8091f82 <__aeabi_fdiv+0xda>
 8091f8e:	ea41 010c 	orr.w	r1, r1, ip
 8091f92:	e795      	b.n	8091ec0 <__aeabi_fdiv+0x18>
 8091f94:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8091f98:	ea92 0f0c 	teq	r2, ip
 8091f9c:	d108      	bne.n	8091fb0 <__aeabi_fdiv+0x108>
 8091f9e:	0242      	lsls	r2, r0, #9
 8091fa0:	f47f af7d 	bne.w	8091e9e <__aeabi_fmul+0x15e>
 8091fa4:	ea93 0f0c 	teq	r3, ip
 8091fa8:	f47f af70 	bne.w	8091e8c <__aeabi_fmul+0x14c>
 8091fac:	4608      	mov	r0, r1
 8091fae:	e776      	b.n	8091e9e <__aeabi_fmul+0x15e>
 8091fb0:	ea93 0f0c 	teq	r3, ip
 8091fb4:	d104      	bne.n	8091fc0 <__aeabi_fdiv+0x118>
 8091fb6:	024b      	lsls	r3, r1, #9
 8091fb8:	f43f af4c 	beq.w	8091e54 <__aeabi_fmul+0x114>
 8091fbc:	4608      	mov	r0, r1
 8091fbe:	e76e      	b.n	8091e9e <__aeabi_fmul+0x15e>
 8091fc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8091fc4:	bf18      	it	ne
 8091fc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8091fca:	d1ca      	bne.n	8091f62 <__aeabi_fdiv+0xba>
 8091fcc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8091fd0:	f47f af5c 	bne.w	8091e8c <__aeabi_fmul+0x14c>
 8091fd4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8091fd8:	f47f af3c 	bne.w	8091e54 <__aeabi_fmul+0x114>
 8091fdc:	e75f      	b.n	8091e9e <__aeabi_fmul+0x15e>
 8091fde:	bf00      	nop

08091fe0 <__aeabi_uldivmod>:
 8091fe0:	b953      	cbnz	r3, 8091ff8 <__aeabi_uldivmod+0x18>
 8091fe2:	b94a      	cbnz	r2, 8091ff8 <__aeabi_uldivmod+0x18>
 8091fe4:	2900      	cmp	r1, #0
 8091fe6:	bf08      	it	eq
 8091fe8:	2800      	cmpeq	r0, #0
 8091fea:	bf1c      	itt	ne
 8091fec:	f04f 31ff 	movne.w	r1, #4294967295
 8091ff0:	f04f 30ff 	movne.w	r0, #4294967295
 8091ff4:	f000 b982 	b.w	80922fc <__aeabi_idiv0>
 8091ff8:	f1ad 0c08 	sub.w	ip, sp, #8
 8091ffc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8092000:	f000 f806 	bl	8092010 <__udivmoddi4>
 8092004:	f8dd e004 	ldr.w	lr, [sp, #4]
 8092008:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 809200c:	b004      	add	sp, #16
 809200e:	4770      	bx	lr

08092010 <__udivmoddi4>:
 8092010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8092014:	468c      	mov	ip, r1
 8092016:	460c      	mov	r4, r1
 8092018:	4605      	mov	r5, r0
 809201a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 809201c:	2b00      	cmp	r3, #0
 809201e:	d14f      	bne.n	80920c0 <__udivmoddi4+0xb0>
 8092020:	428a      	cmp	r2, r1
 8092022:	4617      	mov	r7, r2
 8092024:	d96b      	bls.n	80920fe <__udivmoddi4+0xee>
 8092026:	fab2 fe82 	clz	lr, r2
 809202a:	f1be 0f00 	cmp.w	lr, #0
 809202e:	d00b      	beq.n	8092048 <__udivmoddi4+0x38>
 8092030:	f1ce 0520 	rsb	r5, lr, #32
 8092034:	fa20 f505 	lsr.w	r5, r0, r5
 8092038:	fa01 f30e 	lsl.w	r3, r1, lr
 809203c:	ea45 0c03 	orr.w	ip, r5, r3
 8092040:	fa02 f70e 	lsl.w	r7, r2, lr
 8092044:	fa00 f50e 	lsl.w	r5, r0, lr
 8092048:	0c39      	lsrs	r1, r7, #16
 809204a:	fbbc f0f1 	udiv	r0, ip, r1
 809204e:	b2ba      	uxth	r2, r7
 8092050:	fb01 c310 	mls	r3, r1, r0, ip
 8092054:	fb00 f802 	mul.w	r8, r0, r2
 8092058:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 809205c:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 8092060:	45a0      	cmp	r8, r4
 8092062:	d909      	bls.n	8092078 <__udivmoddi4+0x68>
 8092064:	19e4      	adds	r4, r4, r7
 8092066:	f100 33ff 	add.w	r3, r0, #4294967295
 809206a:	f080 8128 	bcs.w	80922be <__udivmoddi4+0x2ae>
 809206e:	45a0      	cmp	r8, r4
 8092070:	f240 8125 	bls.w	80922be <__udivmoddi4+0x2ae>
 8092074:	3802      	subs	r0, #2
 8092076:	443c      	add	r4, r7
 8092078:	ebc8 0404 	rsb	r4, r8, r4
 809207c:	fbb4 f3f1 	udiv	r3, r4, r1
 8092080:	fb01 4c13 	mls	ip, r1, r3, r4
 8092084:	fb03 f202 	mul.w	r2, r3, r2
 8092088:	b2ac      	uxth	r4, r5
 809208a:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 809208e:	428a      	cmp	r2, r1
 8092090:	d909      	bls.n	80920a6 <__udivmoddi4+0x96>
 8092092:	19c9      	adds	r1, r1, r7
 8092094:	f103 34ff 	add.w	r4, r3, #4294967295
 8092098:	f080 810f 	bcs.w	80922ba <__udivmoddi4+0x2aa>
 809209c:	428a      	cmp	r2, r1
 809209e:	f240 810c 	bls.w	80922ba <__udivmoddi4+0x2aa>
 80920a2:	3b02      	subs	r3, #2
 80920a4:	4439      	add	r1, r7
 80920a6:	1a8a      	subs	r2, r1, r2
 80920a8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80920ac:	2100      	movs	r1, #0
 80920ae:	2e00      	cmp	r6, #0
 80920b0:	d063      	beq.n	809217a <__udivmoddi4+0x16a>
 80920b2:	fa22 f20e 	lsr.w	r2, r2, lr
 80920b6:	2300      	movs	r3, #0
 80920b8:	e886 000c 	stmia.w	r6, {r2, r3}
 80920bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80920c0:	428b      	cmp	r3, r1
 80920c2:	d907      	bls.n	80920d4 <__udivmoddi4+0xc4>
 80920c4:	2e00      	cmp	r6, #0
 80920c6:	d056      	beq.n	8092176 <__udivmoddi4+0x166>
 80920c8:	2100      	movs	r1, #0
 80920ca:	e886 0011 	stmia.w	r6, {r0, r4}
 80920ce:	4608      	mov	r0, r1
 80920d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80920d4:	fab3 f183 	clz	r1, r3
 80920d8:	2900      	cmp	r1, #0
 80920da:	f040 8093 	bne.w	8092204 <__udivmoddi4+0x1f4>
 80920de:	42a3      	cmp	r3, r4
 80920e0:	d302      	bcc.n	80920e8 <__udivmoddi4+0xd8>
 80920e2:	4282      	cmp	r2, r0
 80920e4:	f200 80fe 	bhi.w	80922e4 <__udivmoddi4+0x2d4>
 80920e8:	1a85      	subs	r5, r0, r2
 80920ea:	eb64 0303 	sbc.w	r3, r4, r3
 80920ee:	469c      	mov	ip, r3
 80920f0:	2001      	movs	r0, #1
 80920f2:	2e00      	cmp	r6, #0
 80920f4:	d041      	beq.n	809217a <__udivmoddi4+0x16a>
 80920f6:	e886 1020 	stmia.w	r6, {r5, ip}
 80920fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80920fe:	b912      	cbnz	r2, 8092106 <__udivmoddi4+0xf6>
 8092100:	2701      	movs	r7, #1
 8092102:	fbb7 f7f2 	udiv	r7, r7, r2
 8092106:	fab7 fe87 	clz	lr, r7
 809210a:	f1be 0f00 	cmp.w	lr, #0
 809210e:	d136      	bne.n	809217e <__udivmoddi4+0x16e>
 8092110:	1be4      	subs	r4, r4, r7
 8092112:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8092116:	fa1f f987 	uxth.w	r9, r7
 809211a:	2101      	movs	r1, #1
 809211c:	fbb4 f3f8 	udiv	r3, r4, r8
 8092120:	fb08 4413 	mls	r4, r8, r3, r4
 8092124:	fb09 f203 	mul.w	r2, r9, r3
 8092128:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 809212c:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 8092130:	42a2      	cmp	r2, r4
 8092132:	d907      	bls.n	8092144 <__udivmoddi4+0x134>
 8092134:	19e4      	adds	r4, r4, r7
 8092136:	f103 30ff 	add.w	r0, r3, #4294967295
 809213a:	d202      	bcs.n	8092142 <__udivmoddi4+0x132>
 809213c:	42a2      	cmp	r2, r4
 809213e:	f200 80d3 	bhi.w	80922e8 <__udivmoddi4+0x2d8>
 8092142:	4603      	mov	r3, r0
 8092144:	1aa4      	subs	r4, r4, r2
 8092146:	fbb4 f0f8 	udiv	r0, r4, r8
 809214a:	fb08 4810 	mls	r8, r8, r0, r4
 809214e:	fb09 f900 	mul.w	r9, r9, r0
 8092152:	b2ac      	uxth	r4, r5
 8092154:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 8092158:	4591      	cmp	r9, r2
 809215a:	d907      	bls.n	809216c <__udivmoddi4+0x15c>
 809215c:	19d2      	adds	r2, r2, r7
 809215e:	f100 34ff 	add.w	r4, r0, #4294967295
 8092162:	d202      	bcs.n	809216a <__udivmoddi4+0x15a>
 8092164:	4591      	cmp	r9, r2
 8092166:	f200 80ba 	bhi.w	80922de <__udivmoddi4+0x2ce>
 809216a:	4620      	mov	r0, r4
 809216c:	ebc9 0202 	rsb	r2, r9, r2
 8092170:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8092174:	e79b      	b.n	80920ae <__udivmoddi4+0x9e>
 8092176:	4631      	mov	r1, r6
 8092178:	4630      	mov	r0, r6
 809217a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 809217e:	fa07 f70e 	lsl.w	r7, r7, lr
 8092182:	f1ce 0c20 	rsb	ip, lr, #32
 8092186:	fa24 f30c 	lsr.w	r3, r4, ip
 809218a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 809218e:	fbb3 faf8 	udiv	sl, r3, r8
 8092192:	fa1f f987 	uxth.w	r9, r7
 8092196:	fb08 351a 	mls	r5, r8, sl, r3
 809219a:	fa20 fc0c 	lsr.w	ip, r0, ip
 809219e:	fa04 f40e 	lsl.w	r4, r4, lr
 80921a2:	fb0a fb09 	mul.w	fp, sl, r9
 80921a6:	ea4c 0c04 	orr.w	ip, ip, r4
 80921aa:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80921ae:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 80921b2:	459b      	cmp	fp, r3
 80921b4:	fa00 f50e 	lsl.w	r5, r0, lr
 80921b8:	d90a      	bls.n	80921d0 <__udivmoddi4+0x1c0>
 80921ba:	19db      	adds	r3, r3, r7
 80921bc:	f10a 32ff 	add.w	r2, sl, #4294967295
 80921c0:	f080 808b 	bcs.w	80922da <__udivmoddi4+0x2ca>
 80921c4:	459b      	cmp	fp, r3
 80921c6:	f240 8088 	bls.w	80922da <__udivmoddi4+0x2ca>
 80921ca:	f1aa 0a02 	sub.w	sl, sl, #2
 80921ce:	443b      	add	r3, r7
 80921d0:	ebcb 0303 	rsb	r3, fp, r3
 80921d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80921d8:	fb08 3310 	mls	r3, r8, r0, r3
 80921dc:	fb00 f409 	mul.w	r4, r0, r9
 80921e0:	fa1f fc8c 	uxth.w	ip, ip
 80921e4:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 80921e8:	429c      	cmp	r4, r3
 80921ea:	d907      	bls.n	80921fc <__udivmoddi4+0x1ec>
 80921ec:	19db      	adds	r3, r3, r7
 80921ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80921f2:	d26e      	bcs.n	80922d2 <__udivmoddi4+0x2c2>
 80921f4:	429c      	cmp	r4, r3
 80921f6:	d96c      	bls.n	80922d2 <__udivmoddi4+0x2c2>
 80921f8:	3802      	subs	r0, #2
 80921fa:	443b      	add	r3, r7
 80921fc:	1b1c      	subs	r4, r3, r4
 80921fe:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 8092202:	e78b      	b.n	809211c <__udivmoddi4+0x10c>
 8092204:	f1c1 0e20 	rsb	lr, r1, #32
 8092208:	408b      	lsls	r3, r1
 809220a:	fa22 fc0e 	lsr.w	ip, r2, lr
 809220e:	ea4c 0c03 	orr.w	ip, ip, r3
 8092212:	fa24 f70e 	lsr.w	r7, r4, lr
 8092216:	ea4f 491c 	mov.w	r9, ip, lsr #16
 809221a:	fbb7 faf9 	udiv	sl, r7, r9
 809221e:	fa1f f38c 	uxth.w	r3, ip
 8092222:	fb09 771a 	mls	r7, r9, sl, r7
 8092226:	fa20 f80e 	lsr.w	r8, r0, lr
 809222a:	408c      	lsls	r4, r1
 809222c:	fb0a f503 	mul.w	r5, sl, r3
 8092230:	ea48 0404 	orr.w	r4, r8, r4
 8092234:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8092238:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 809223c:	42bd      	cmp	r5, r7
 809223e:	fa02 f201 	lsl.w	r2, r2, r1
 8092242:	fa00 fb01 	lsl.w	fp, r0, r1
 8092246:	d909      	bls.n	809225c <__udivmoddi4+0x24c>
 8092248:	eb17 070c 	adds.w	r7, r7, ip
 809224c:	f10a 30ff 	add.w	r0, sl, #4294967295
 8092250:	d241      	bcs.n	80922d6 <__udivmoddi4+0x2c6>
 8092252:	42bd      	cmp	r5, r7
 8092254:	d93f      	bls.n	80922d6 <__udivmoddi4+0x2c6>
 8092256:	f1aa 0a02 	sub.w	sl, sl, #2
 809225a:	4467      	add	r7, ip
 809225c:	1b7f      	subs	r7, r7, r5
 809225e:	fbb7 f5f9 	udiv	r5, r7, r9
 8092262:	fb09 7715 	mls	r7, r9, r5, r7
 8092266:	fb05 f303 	mul.w	r3, r5, r3
 809226a:	b2a4      	uxth	r4, r4
 809226c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8092270:	42bb      	cmp	r3, r7
 8092272:	d908      	bls.n	8092286 <__udivmoddi4+0x276>
 8092274:	eb17 070c 	adds.w	r7, r7, ip
 8092278:	f105 30ff 	add.w	r0, r5, #4294967295
 809227c:	d227      	bcs.n	80922ce <__udivmoddi4+0x2be>
 809227e:	42bb      	cmp	r3, r7
 8092280:	d925      	bls.n	80922ce <__udivmoddi4+0x2be>
 8092282:	3d02      	subs	r5, #2
 8092284:	4467      	add	r7, ip
 8092286:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 809228a:	fba0 8902 	umull	r8, r9, r0, r2
 809228e:	1aff      	subs	r7, r7, r3
 8092290:	454f      	cmp	r7, r9
 8092292:	4645      	mov	r5, r8
 8092294:	464c      	mov	r4, r9
 8092296:	d314      	bcc.n	80922c2 <__udivmoddi4+0x2b2>
 8092298:	d029      	beq.n	80922ee <__udivmoddi4+0x2de>
 809229a:	b366      	cbz	r6, 80922f6 <__udivmoddi4+0x2e6>
 809229c:	ebbb 0305 	subs.w	r3, fp, r5
 80922a0:	eb67 0704 	sbc.w	r7, r7, r4
 80922a4:	fa07 fe0e 	lsl.w	lr, r7, lr
 80922a8:	40cb      	lsrs	r3, r1
 80922aa:	40cf      	lsrs	r7, r1
 80922ac:	ea4e 0303 	orr.w	r3, lr, r3
 80922b0:	e886 0088 	stmia.w	r6, {r3, r7}
 80922b4:	2100      	movs	r1, #0
 80922b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80922ba:	4623      	mov	r3, r4
 80922bc:	e6f3      	b.n	80920a6 <__udivmoddi4+0x96>
 80922be:	4618      	mov	r0, r3
 80922c0:	e6da      	b.n	8092078 <__udivmoddi4+0x68>
 80922c2:	ebb8 0502 	subs.w	r5, r8, r2
 80922c6:	eb69 040c 	sbc.w	r4, r9, ip
 80922ca:	3801      	subs	r0, #1
 80922cc:	e7e5      	b.n	809229a <__udivmoddi4+0x28a>
 80922ce:	4605      	mov	r5, r0
 80922d0:	e7d9      	b.n	8092286 <__udivmoddi4+0x276>
 80922d2:	4610      	mov	r0, r2
 80922d4:	e792      	b.n	80921fc <__udivmoddi4+0x1ec>
 80922d6:	4682      	mov	sl, r0
 80922d8:	e7c0      	b.n	809225c <__udivmoddi4+0x24c>
 80922da:	4692      	mov	sl, r2
 80922dc:	e778      	b.n	80921d0 <__udivmoddi4+0x1c0>
 80922de:	3802      	subs	r0, #2
 80922e0:	443a      	add	r2, r7
 80922e2:	e743      	b.n	809216c <__udivmoddi4+0x15c>
 80922e4:	4608      	mov	r0, r1
 80922e6:	e704      	b.n	80920f2 <__udivmoddi4+0xe2>
 80922e8:	3b02      	subs	r3, #2
 80922ea:	443c      	add	r4, r7
 80922ec:	e72a      	b.n	8092144 <__udivmoddi4+0x134>
 80922ee:	45c3      	cmp	fp, r8
 80922f0:	d3e7      	bcc.n	80922c2 <__udivmoddi4+0x2b2>
 80922f2:	463c      	mov	r4, r7
 80922f4:	e7d1      	b.n	809229a <__udivmoddi4+0x28a>
 80922f6:	4631      	mov	r1, r6
 80922f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080922fc <__aeabi_idiv0>:
 80922fc:	4770      	bx	lr
 80922fe:	bf00      	nop

08092300 <calloc>:
 8092300:	4b02      	ldr	r3, [pc, #8]	; (809230c <calloc+0xc>)
 8092302:	460a      	mov	r2, r1
 8092304:	4601      	mov	r1, r0
 8092306:	6818      	ldr	r0, [r3, #0]
 8092308:	f000 b84d 	b.w	80923a6 <_calloc_r>
 809230c:	200004cc 	.word	0x200004cc

08092310 <__cxa_atexit>:
 8092310:	b510      	push	{r4, lr}
 8092312:	4c05      	ldr	r4, [pc, #20]	; (8092328 <__cxa_atexit+0x18>)
 8092314:	4613      	mov	r3, r2
 8092316:	b12c      	cbz	r4, 8092324 <__cxa_atexit+0x14>
 8092318:	460a      	mov	r2, r1
 809231a:	4601      	mov	r1, r0
 809231c:	2002      	movs	r0, #2
 809231e:	f3af 8000 	nop.w
 8092322:	bd10      	pop	{r4, pc}
 8092324:	4620      	mov	r0, r4
 8092326:	bd10      	pop	{r4, pc}
 8092328:	00000000 	.word	0x00000000

0809232c <memcmp>:
 809232c:	b510      	push	{r4, lr}
 809232e:	3901      	subs	r1, #1
 8092330:	4402      	add	r2, r0
 8092332:	4290      	cmp	r0, r2
 8092334:	d007      	beq.n	8092346 <memcmp+0x1a>
 8092336:	f810 3b01 	ldrb.w	r3, [r0], #1
 809233a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 809233e:	42a3      	cmp	r3, r4
 8092340:	d0f7      	beq.n	8092332 <memcmp+0x6>
 8092342:	1b18      	subs	r0, r3, r4
 8092344:	bd10      	pop	{r4, pc}
 8092346:	2000      	movs	r0, #0
 8092348:	bd10      	pop	{r4, pc}

0809234a <memcpy>:
 809234a:	b510      	push	{r4, lr}
 809234c:	1e43      	subs	r3, r0, #1
 809234e:	440a      	add	r2, r1
 8092350:	4291      	cmp	r1, r2
 8092352:	d004      	beq.n	809235e <memcpy+0x14>
 8092354:	f811 4b01 	ldrb.w	r4, [r1], #1
 8092358:	f803 4f01 	strb.w	r4, [r3, #1]!
 809235c:	e7f8      	b.n	8092350 <memcpy+0x6>
 809235e:	bd10      	pop	{r4, pc}

08092360 <memmove>:
 8092360:	4288      	cmp	r0, r1
 8092362:	b510      	push	{r4, lr}
 8092364:	eb01 0302 	add.w	r3, r1, r2
 8092368:	d801      	bhi.n	809236e <memmove+0xe>
 809236a:	1e42      	subs	r2, r0, #1
 809236c:	e00b      	b.n	8092386 <memmove+0x26>
 809236e:	4298      	cmp	r0, r3
 8092370:	d2fb      	bcs.n	809236a <memmove+0xa>
 8092372:	1881      	adds	r1, r0, r2
 8092374:	1ad2      	subs	r2, r2, r3
 8092376:	42d3      	cmn	r3, r2
 8092378:	d004      	beq.n	8092384 <memmove+0x24>
 809237a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 809237e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8092382:	e7f8      	b.n	8092376 <memmove+0x16>
 8092384:	bd10      	pop	{r4, pc}
 8092386:	4299      	cmp	r1, r3
 8092388:	d004      	beq.n	8092394 <memmove+0x34>
 809238a:	f811 4b01 	ldrb.w	r4, [r1], #1
 809238e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8092392:	e7f8      	b.n	8092386 <memmove+0x26>
 8092394:	bd10      	pop	{r4, pc}

08092396 <memset>:
 8092396:	4603      	mov	r3, r0
 8092398:	4402      	add	r2, r0
 809239a:	4293      	cmp	r3, r2
 809239c:	d002      	beq.n	80923a4 <memset+0xe>
 809239e:	f803 1b01 	strb.w	r1, [r3], #1
 80923a2:	e7fa      	b.n	809239a <memset+0x4>
 80923a4:	4770      	bx	lr

080923a6 <_calloc_r>:
 80923a6:	b538      	push	{r3, r4, r5, lr}
 80923a8:	fb02 f401 	mul.w	r4, r2, r1
 80923ac:	4621      	mov	r1, r4
 80923ae:	f7fe fa8b 	bl	80908c8 <_malloc_r>
 80923b2:	4605      	mov	r5, r0
 80923b4:	b118      	cbz	r0, 80923be <_calloc_r+0x18>
 80923b6:	4622      	mov	r2, r4
 80923b8:	2100      	movs	r1, #0
 80923ba:	f7ff ffec 	bl	8092396 <memset>
 80923be:	4628      	mov	r0, r5
 80923c0:	bd38      	pop	{r3, r4, r5, pc}

080923c2 <strcat>:
 80923c2:	4602      	mov	r2, r0
 80923c4:	b510      	push	{r4, lr}
 80923c6:	4613      	mov	r3, r2
 80923c8:	781c      	ldrb	r4, [r3, #0]
 80923ca:	3201      	adds	r2, #1
 80923cc:	2c00      	cmp	r4, #0
 80923ce:	d1fa      	bne.n	80923c6 <strcat+0x4>
 80923d0:	3b01      	subs	r3, #1
 80923d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80923d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80923da:	2a00      	cmp	r2, #0
 80923dc:	d1f9      	bne.n	80923d2 <strcat+0x10>
 80923de:	bd10      	pop	{r4, pc}

080923e0 <strcmp>:
 80923e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80923e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80923e8:	2a01      	cmp	r2, #1
 80923ea:	bf28      	it	cs
 80923ec:	429a      	cmpcs	r2, r3
 80923ee:	d0f7      	beq.n	80923e0 <strcmp>
 80923f0:	1ad0      	subs	r0, r2, r3
 80923f2:	4770      	bx	lr

080923f4 <strcpy>:
 80923f4:	4603      	mov	r3, r0
 80923f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80923fa:	f803 2b01 	strb.w	r2, [r3], #1
 80923fe:	2a00      	cmp	r2, #0
 8092400:	d1f9      	bne.n	80923f6 <strcpy+0x2>
 8092402:	4770      	bx	lr

08092404 <strlen>:
 8092404:	4603      	mov	r3, r0
 8092406:	f813 2b01 	ldrb.w	r2, [r3], #1
 809240a:	2a00      	cmp	r2, #0
 809240c:	d1fb      	bne.n	8092406 <strlen+0x2>
 809240e:	1a18      	subs	r0, r3, r0
 8092410:	3801      	subs	r0, #1
 8092412:	4770      	bx	lr

08092414 <strstr>:
 8092414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8092416:	7803      	ldrb	r3, [r0, #0]
 8092418:	b963      	cbnz	r3, 8092434 <strstr+0x20>
 809241a:	780b      	ldrb	r3, [r1, #0]
 809241c:	2b00      	cmp	r3, #0
 809241e:	bf18      	it	ne
 8092420:	2000      	movne	r0, #0
 8092422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8092424:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8092428:	b162      	cbz	r2, 8092444 <strstr+0x30>
 809242a:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 809242e:	4630      	mov	r0, r6
 8092430:	4297      	cmp	r7, r2
 8092432:	d0f7      	beq.n	8092424 <strstr+0x10>
 8092434:	4603      	mov	r3, r0
 8092436:	1c46      	adds	r6, r0, #1
 8092438:	7800      	ldrb	r0, [r0, #0]
 809243a:	b110      	cbz	r0, 8092442 <strstr+0x2e>
 809243c:	1e4d      	subs	r5, r1, #1
 809243e:	1e5c      	subs	r4, r3, #1
 8092440:	e7f0      	b.n	8092424 <strstr+0x10>
 8092442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8092444:	4618      	mov	r0, r3
 8092446:	bdf0      	pop	{r4, r5, r6, r7, pc}

08092448 <gettimeofday>:
 8092448:	4b02      	ldr	r3, [pc, #8]	; (8092454 <gettimeofday+0xc>)
 809244a:	460a      	mov	r2, r1
 809244c:	4601      	mov	r1, r0
 809244e:	6818      	ldr	r0, [r3, #0]
 8092450:	f000 b802 	b.w	8092458 <_gettimeofday_r>
 8092454:	200004cc 	.word	0x200004cc

08092458 <_gettimeofday_r>:
 8092458:	b538      	push	{r3, r4, r5, lr}
 809245a:	4c07      	ldr	r4, [pc, #28]	; (8092478 <_gettimeofday_r+0x20>)
 809245c:	2300      	movs	r3, #0
 809245e:	4605      	mov	r5, r0
 8092460:	4608      	mov	r0, r1
 8092462:	4611      	mov	r1, r2
 8092464:	6023      	str	r3, [r4, #0]
 8092466:	f7f3 fd5a 	bl	8085f1e <_gettimeofday>
 809246a:	1c43      	adds	r3, r0, #1
 809246c:	d102      	bne.n	8092474 <_gettimeofday_r+0x1c>
 809246e:	6823      	ldr	r3, [r4, #0]
 8092470:	b103      	cbz	r3, 8092474 <_gettimeofday_r+0x1c>
 8092472:	602b      	str	r3, [r5, #0]
 8092474:	bd38      	pop	{r3, r4, r5, pc}
 8092476:	bf00      	nop
 8092478:	20004064 	.word	0x20004064

0809247c <dynalib_user>:
 809247c:	0808001d 0808005d 08080089 0808008d     ....]...........
 809248c:	00000000 544d5024 3431334b 312c302c     ....$PMTK314,0,1
 809249c:	312c302c 302c302c 302c302c 302c302c     ,0,1,0,0,0,0,0,0
 80924ac:	302c302c 302c302c 302c302c 302c302c     ,0,0,0,0,0,0,0,0
 80924bc:	322a302c 50240038 324b544d 312c3032     ,0*28.$PMTK220,1
 80924cc:	2a303030 41004631 37485354 7b004644     000*1F.ATSH7DF.{
 80924dc:	7373656d 69656761 00203a64 4e41437b     messageid: .{CAN
 80924ec:	7461645f 005b3a61 6172667b 203a656d     _data:[.{frame: 
 80924fc:	6325005b 7d005d00 72616300 00312f74     [.%c.].}.cart/1.
 809250c:	46323130 30313000 31300034 30003131     012F.0104.0111.0
 809251c:	00433031 44303130 30313000 31300045     10C.010D.010E.01
 809252c:	30004535 00333631 34413130 00002000              5E.0163.01A4.

08092539 <CSWTCH.59>:
 8092539:	00000020 00000040 70000060                        ...@...`..

08092544 <_ZL6spiPtr>:
 8092544:	20003f70 20003f80 20003f90              p?. .?. .?. 

08092550 <_ZTV5SdSpi>:
	...
 8092558:	08080d3d 08080d4d 08080d39 08080dc9     =...M...9.......
 8092568:	08080ded 08080ddd 08080e31 514d0600     ........1.....MQ
 8092578:	70647349 4d040003 04545451 20212020     Isdp...MQTT.  ! 
 8092588:	2e642500 252e6425 64252e64 00000000     .%d.%d.%d.%d....

08092598 <_ZL1K>:
 8092598:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
 80925a8:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
 80925b8:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
 80925c8:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
 80925d8:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
 80925e8:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
 80925f8:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
 8092608:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
 8092618:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
 8092628:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
 8092638:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
 8092648:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
 8092658:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
 8092668:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
 8092678:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
 8092688:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.
 8092698:	8648862a 05010df7 0000000c              *.H.........

080926a4 <mbedtls_sha1_info>:
 80926a4:	00000004 08092c69 00000014 00000040     ....i,......@...
 80926b4:	08083651 0808364d 08083649 08085eb9     Q6..M6..I6...^..
 80926c4:	08083633 08083621 0808361d 08083619     36..!6...6...6..

080926d4 <mbedtls_sha224_info>:
 80926d4:	00000005 08092ada 0000001c 00000040     .....*......@...
 80926e4:	08083699 08083695 08083691 08083685     .6...6...6...6..
 80926f4:	0808366f 0808365d 08083659 08083655     o6..]6..Y6..U6..

08092704 <mbedtls_sha384_info>:
 8092704:	00000007 08093681 00000030 00000080     .....6..0.......
 8092714:	080836e9 080836e5 080836e1 080836d5     .6...6...6...6..
 8092724:	080836bf 080836ad 080836a9 080836a5     .6...6...6...6..

08092734 <mbedtls_sha512_info>:
 8092734:	00000008 08092b3d 00000040 00000080     ....=+..@.......
 8092744:	080836ef 080836e5 080836e1 080836db     .6...6...6...6..
 8092754:	080836bf 080836ad 080836a9 080836a5     .6...6...6...6..

08092764 <mbedtls_sha256_info>:
 8092764:	00000006 080936e1 00000020 00000040     .....6.. ...@...
 8092774:	0808369f 08083695 08083691 0808368b     .6...6...6...6..
 8092784:	0808366f 0808365d 08083659 08083655     o6..]6..Y6..U6..

08092794 <_ZL18oid_x520_attr_type>:
 8092794:	08092f3c 00000003 08092f40 08092f51     </......@/..Q/..
 80927a4:	08094145 08092f5d 00000003 08092f61     EA..]/......a/..
 80927b4:	08092f73 0809251e 08092f7b 00000003     s/...%..{/......
 80927c4:	08092f7f 08092f8e 08092f97 08092f99     ./.../.../.../..
 80927d4:	00000003 08092f9d 08092fa9 08092faf     ...../.../.../..
 80927e4:	08092fb2 00000003 08092fb6 08092fcd     ./......./.../..
 80927f4:	08092fda 08092fdc 00000003 08092fe0     ./.../......./..
 8092804:	08092ffd 08093006 08093009 00000009     ./...0...0......
 8092814:	08093013 08093020 08093013 0809302f     .0.. 0...0../0..
 8092824:	00000003 08093033 08093046 08093039     ....30..F0..90..
 8092834:	08093054 00000003 08093058 0809306c     T0......X0..l0..
 8092844:	0809305e 0809307b 00000003 0809307f     ^0..{0.......0..
 8092854:	08093090 08093085 0809309c 00000003     .0...0...0......
 8092864:	080930a0 080930ae 080930b6 080930b9     .0...0...0...0..
 8092874:	00000003 080930bd 080930cd 080930d8     .....0...0...0..
 8092884:	080930db 00000003 080930df 080930ee     .0.......0...0..
 8092894:	080930e5 080930f7 00000003 080930fb     .0...0.......0..
 80928a4:	08093115 08093101 0809312a 00000003     .1...1..*1......
 80928b4:	0809312e 0809313a 08093134 08093140     .1..:1..41..@1..
 80928c4:	00000003 08093144 08093156 0809314a     ....D1..V1..J1..
 80928d4:	08093173 00000003 08093177 08093187     s1......w1...1..
 80928e4:	0809317d 08093191 0000000a 0809319c     }1...1.......1..
 80928f4:	080931af 080931c0 080931c3 00000003     .1...1...1......
 8092904:	080931c7 080931de 080931cd 00000000     .1...1...1......
	...

08092924 <_ZL17oid_ext_key_usage>:
 8092924:	08092d55 00000008 08092d5e 08092d6f     U-......^-..o-..
 8092934:	08092d8d 00000008 08092d96 08092da7     .-.......-...-..
 8092944:	08092dc5 00000008 08092dce 08092de0     .-.......-...-..
 8092954:	08092ded 00000008 08092df6 08092e0c     .-.......-......
 8092964:	08092e1e 00000008 08092e27 08092e3a     ........'...:...
 8092974:	08092e48 00000008 08092e51 08092e63     H.......Q...c...
	...

08092994 <_ZL10oid_pk_alg>:
 8092994:	08092bdf 00000009 08092be9 08092bf7     .+.......+...+..
 80929a4:	00000001 08092bfb 00000007 08092c03     .....+.......,..
 80929b4:	08092c12 00000002 08092c21 00000005     .,......!,......
 80929c4:	08092c27 08092c2f 00000003 00000000     ',../,..........
	...

080929e4 <_ZL14oid_cipher_alg>:
 80929e4:	08092baf 00000005 08092bb5 08092a8b     .+.......+...*..
 80929f4:	00000021 08092bbc 00000008 08092bc5     !....+.......+..
 8092a04:	08092bd2 00000025 00000000 00000000     .+..%...........
	...
 8092a20:	8648862a 0c010df7 70000301 69576562     *.H........pbeWi
 8092a30:	48536874 646e4141 654b2d33 69725479     thSHAAnd3-KeyTri
 8092a40:	44656c70 432d5345 50004342 77204542     pleDES-CBC.PBE w
 8092a50:	20687469 31414853 646e6120 4b2d3320     ith SHA1 and 3-K
 8092a60:	33207965 00534544 8648862a 0c010df7     ey 3DES.*.H.....
 8092a70:	70000401 69576562 48536874 646e4141     ...pbeWithSHAAnd
 8092a80:	654b2d32 69725479 44656c70 432d5345     2-KeyTripleDES-C
 8092a90:	50004342 77204542 20687469 31414853     BC.PBE with SHA1
 8092aa0:	646e6120 4b2d3220 33207965 00534544      and 2-Key 3DES.
 8092ab0:	8648862a 07020df7 616d6800 41485363     *.H......hmacSHA
 8092ac0:	4d480031 532d4341 312d4148 48862a00     1.HMAC-SHA-1.*.H
 8092ad0:	020df786 6d680008 48536361 34323241     ......hmacSHA224
 8092ae0:	414d4800 48532d43 32322d41 862a0034     .HMAC-SHA-224.*.
 8092af0:	0df78648 68000902 5363616d 35324148     H......hmacSHA25
 8092b00:	4d480036 532d4341 322d4148 2a003635     6.HMAC-SHA-256.*
 8092b10:	f7864886 000a020d 63616d68 33414853     .H......hmacSHA3
 8092b20:	48003438 2d43414d 2d414853 00343833     84.HMAC-SHA-384.
 8092b30:	8648862a 0b020df7 616d6800 41485363     *.H......hmacSHA
 8092b40:	00323135 43414d48 4148532d 3231352d     512.HMAC-SHA-512
 8092b50:	030e2b00 69001a02 68732d64 60003161     .+.....id-sha1.`
 8092b60:	65014886 04020403 2d646900 32616873     .H.e.....id-sha2
 8092b70:	60003432 65014886 01020403 2d646900     24.`.H.e.....id-
 8092b80:	32616873 60003635 65014886 02020403     sha256.`.H.e....
 8092b90:	2d646900 33616873 60003438 65014886     .id-sha384.`.H.e
 8092ba0:	03020403 2d646900 35616873 2b003231     .....id-sha512.+
 8092bb0:	0702030e 73656400 00434243 8648862a     .....desCBC.*.H.
 8092bc0:	07030df7 73656400 6564652d 62632d33     .....des-ede3-cb
 8092bd0:	45440063 44452d53 432d3345 2a004342     c.DES-EDE3-CBC.*
 8092be0:	f7864886 0101010d 61737200 72636e45     .H.......rsaEncr
 8092bf0:	69747079 52006e6f 2a004153 3dce4886     yption.RSA.*.H.=
 8092c00:	69000102 63652d64 6c627550 654b6369     ...id-ecPublicKe
 8092c10:	65470079 6972656e 43452063 79656b20     y.Generic EC key
 8092c20:	04812b00 69000c01 63652d64 45004844     .+.....id-ecDH.E
 8092c30:	656b2043 6f662079 43452072 2a004844     C key for ECDH.*
 8092c40:	f7864886 0501010d 61687300 6957312d     .H.......sha-1Wi
 8092c50:	53526874 636e4541 74707972 006e6f69     thRSAEncryption.
 8092c60:	20415352 68746977 41485320 862a0031     RSA with SHA1.*.
 8092c70:	0df78648 000e0101 32616873 69573432     H.......sha224Wi
 8092c80:	53526874 636e4541 74707972 006e6f69     thRSAEncryption.
 8092c90:	20415352 68746977 41485320 3432322d     RSA with SHA-224
 8092ca0:	48862a00 010df786 73000b01 35326168     .*.H.......sha25
 8092cb0:	74695736 41535268 72636e45 69747079     6WithRSAEncrypti
 8092cc0:	52006e6f 77204153 20687469 2d414853     on.RSA with SHA-
 8092cd0:	00363532 8648862a 01010df7 6873000c     256.*.H.......sh
 8092ce0:	34383361 68746957 45415352 7972636e     a384WithRSAEncry
 8092cf0:	6f697470 5352006e 69772041 53206874     ption.RSA with S
 8092d00:	332d4148 2a003438 f7864886 0d01010d     HA-384.*.H......
 8092d10:	61687300 57323135 52687469 6e454153     .sha512WithRSAEn
 8092d20:	70797263 6e6f6974 41535200 74697720     cryption.RSA wit
 8092d30:	48532068 31352d41 0e2b0032 001d0203     h SHA-512.+.....
 8092d40:	8648862a 01010df7 5352000a 41535341     *.H.......RSASSA
 8092d50:	5353502d 01062b00 03070505 64690001     -PSS.+........id
 8092d60:	2d706b2d 76726573 75417265 54006874     -kp-serverAuth.T
 8092d70:	5720534c 53206265 65767265 75412072     LS Web Server Au
 8092d80:	6e656874 61636974 6e6f6974 01062b00     thentication.+..
 8092d90:	03070505 64690002 2d706b2d 65696c63     ......id-kp-clie
 8092da0:	7541746e 54006874 5720534c 43206265     ntAuth.TLS Web C
 8092db0:	6e65696c 75412074 6e656874 61636974     lient Authentica
 8092dc0:	6e6f6974 01062b00 03070505 64690003     tion.+........id
 8092dd0:	2d706b2d 65646f63 6e676953 00676e69     -kp-codeSigning.
 8092de0:	65646f43 67695320 676e696e 01062b00     Code Signing.+..
 8092df0:	03070505 64690004 2d706b2d 69616d65     ......id-kp-emai
 8092e00:	6f72506c 74636574 006e6f69 616d2d45     lProtection.E-ma
 8092e10:	50206c69 65746f72 6f697463 062b006e     il Protection.+.
 8092e20:	07050501 69000803 706b2d64 6d69742d     .......id-kp-tim
 8092e30:	61745365 6e69706d 69540067 5320656d     eStamping.Time S
 8092e40:	706d6174 00676e69 0501062b 09030705     tamping.+.......
 8092e50:	2d646900 4f2d706b 53505343 696e6769     .id-kp-OCSPSigni
 8092e60:	4f00676e 20505343 6e676953 00676e69     ng.OCSP Signing.
 8092e70:	00131d55 632d6469 61622d65 43636973     U...id-ce-basicC
 8092e80:	74736e6f 6e696172 42007374 63697361     onstraints.Basic
 8092e90:	6e6f4320 61727473 73746e69 0f1d5500      Constraints.U..
 8092ea0:	2d646900 6b2d6563 73557965 00656761     .id-ce-keyUsage.
 8092eb0:	00251d55 632d6469 78652d65 79654b74     U.%.id-ce-extKey
 8092ec0:	67617355 78450065 646e6574 4b206465     Usage.Extended K
 8092ed0:	55207965 65676173 111d5500 2d646900     ey Usage.U...id-
 8092ee0:	732d6563 656a6275 6c417463 6d614e74     ce-subjectAltNam
 8092ef0:	75530065 63656a62 6c412074 614e2074     e.Subject Alt Na
 8092f00:	6000656d 86014886 010142f8 2d646900     me.`.H...B...id-
 8092f10:	7374656e 65706163 7265632d 70797474     netscape-certtyp
 8092f20:	654e0065 61637374 43206570 69747265     e.Netscape Certi
 8092f30:	61636966 54206574 00657079 00030455     ficate Type.U...
 8092f40:	612d6469 6f632d74 6e6f6d6d 656d614e     id-at-commonName
 8092f50:	6d6f4300 206e6f6d 656d614e 06045500     .Common Name.U..
 8092f60:	2d646900 632d7461 746e756f 614e7972     .id-at-countryNa
 8092f70:	4300656d 746e756f 55007972 69000704     me.Country.U...i
 8092f80:	74612d64 636f6c2d 74696c61 6f4c0079     d-at-locality.Lo
 8092f90:	696c6163 4c007974 08045500 2d646900     cality.L.U...id-
 8092fa0:	732d7461 65746174 61745300 53006574     at-state.State.S
 8092fb0:	04550054 6469000a 2d74612d 6167726f     T.U...id-at-orga
 8092fc0:	617a696e 6e6f6974 656d614e 67724f00     nizationName.Org
 8092fd0:	7a696e61 6f697461 004f006e 000b0455     anization.O.U...
 8092fe0:	612d6469 726f2d74 696e6167 6974617a     id-at-organizati
 8092ff0:	6c616e6f 74696e55 656d614e 67724f00     onalUnitName.Org
 8093000:	696e5520 554f0074 48862a00 010df786      Unit.OU.*.H....
 8093010:	65000109 6c69616d 72646441 00737365     ...emailAddress.
 8093020:	616d2d45 61206c69 65726464 55007373     E-mail address.U
 8093030:	69000504 74612d64 7265732d 4e6c6169     ...id-at-serialN
 8093040:	65626d75 65530072 6c616972 6d756e20     umber.Serial num
 8093050:	00726562 00100455 612d6469 6f702d74     ber.U...id-at-po
 8093060:	6c617473 72646441 00737365 74736f50     stalAddress.Post
 8093070:	61206c61 65726464 55007373 69001104     al address.U...i
 8093080:	74612d64 736f702d 436c6174 0065646f     d-at-postalCode.
 8093090:	74736f50 63206c61 0065646f 00040455     Postal code.U...
 80930a0:	612d6469 75732d74 6d614e72 75530065     id-at-surName.Su
 80930b0:	6d616e72 4e530065 2a045500 2d646900     rname.SN.U.*.id-
 80930c0:	672d7461 6e657669 656d614e 76694700     at-givenName.Giv
 80930d0:	6e206e65 00656d61 55004e47 69002b04     en name.GN.U.+.i
 80930e0:	74612d64 696e692d 6c616974 6e490073     d-at-initials.In
 80930f0:	61697469 5500736c 69002c04 74612d64     itials.U.,.id-at
 8093100:	6e65672d 74617265 516e6f69 696c6175     -generationQuali
 8093110:	72656966 6e654700 74617265 206e6f69     fier.Generation 
 8093120:	6c617571 65696669 04550072 6469000c     qualifier.U...id
 8093130:	2d74612d 6c746974 69540065 00656c74     -at-title.Title.
 8093140:	002e0455 612d6469 6e642d74 6c617551     U...id-at-dnQual
 8093150:	65696669 69440072 6e697473 73697567     ifier.Distinguis
 8093160:	20646568 656d614e 61757120 6966696c     hed Name qualifi
 8093170:	55007265 69004104 74612d64 6573702d     er.U.A.id-at-pse
 8093180:	6e6f6475 50006d79 64756573 6d796e6f     udonym.Pseudonym
 8093190:	26920900 2cf29389 00190164 642d6469     ...&...,d...id-d
 80931a0:	69616d6f 6d6f436e 656e6f70 4400746e     omainComponent.D
 80931b0:	69616d6f 6f63206e 6e6f706d 00746e65     omain component.
 80931c0:	55004344 69002d04 74612d64 696e752d     DC.U.-.id-at-uni
 80931d0:	49657571 746e6564 65696669 6e550072     queIdentifier.Un
 80931e0:	65757169 65644920 6669746e 00726569     ique Identifier.

080931f0 <_ZL18oid_pkcs12_pbe_alg>:
 80931f0:	08092a20 0000000a 08092a2b 08092a4b      *......+*..K*..
 8093200:	00002504 08092a68 0000000a 08092a73     .%..h*......s*..
 8093210:	08092a93 00002304 00000000 00000000     .*...#..........
	...

0809322c <_ZL10oid_md_alg>:
 809322c:	08092b51 00000005 08092b57 08092ac7     Q+......W+...*..
 809323c:	00000004 08092b5f 00000009 08092b69     ...._+......i+..
 809324c:	08092c99 00000005 08092b73 00000009     .,......s+......
 809325c:	08092b7d 08092ccc 00000006 08092b87     }+...,.......+..
 809326c:	00000009 08092b91 08092cff 00000007     .....+...,......
 809327c:	08092b9b 00000009 08092ba5 08092d32     .+.......+..2-..
 809328c:	00000008 00000000 00000000 00000000     ................
	...

080932a4 <_ZL11oid_sig_alg>:
 80932a4:	08092c3f 00000009 08092c49 08092c60     ?,......I,..`,..
 80932b4:	00000104 08092c6e 00000009 08092c78     ....n,......x,..
 80932c4:	08092c90 00000105 08092ca1 00000009     .,.......,......
 80932d4:	08092cab 08092cc3 00000106 08092cd4     .,...,.......,..
 80932e4:	00000009 08092cde 08092cf6 00000107     .....,...,......
 80932f4:	08092d07 00000009 08092d11 08092d29     .-.......-..)-..
 8093304:	00000108 08092d3a 00000005 08092c49     ....:-......I,..
 8093314:	08092c60 00000104 08092d40 00000009     `,......@-......
 8093324:	08092d4a 08092d4a 00000600 00000000     J-..J-..........
	...

08093344 <_ZL11oid_md_hmac>:
 8093344:	08092ab0 00000008 08092ab9 08092ac2     .*.......*...*..
 8093354:	00000004 08092acd 00000008 08092ad6     .....*.......*..
 8093364:	08092ae1 00000005 08092aee 00000008     .*.......*......
 8093374:	08092af7 08092b02 00000006 08092b0f     .*...+.......+..
 8093384:	00000008 08092b18 08092b23 00000007     .....+..#+......
 8093394:	08092b30 00000008 08092b39 08092b44     0+......9+..D+..
 80933a4:	00000008 00000000 00000000 00000000     ................
	...

080933bc <_ZL12oid_x509_ext>:
 80933bc:	08092e70 00000003 08092e74 08092e8b     p.......t.......
 80933cc:	00000100 08092e9d 00000003 08092ea1     ................
 80933dc:	08092ecf 00000004 08092eb0 00000003     ................
 80933ec:	08092eb4 08092ec6 00000800 08092ed9     ................
 80933fc:	00000003 08092edd 08092ef2 00000020     ............ ...
 809340c:	08092f03 00000009 08092f0d 08092f22     ./......./.."/..
 809341c:	00010000 00000000 00000000 00000000     ................
	...

08093434 <_ZL16aes_192_cbc_info>:
 8093434:	00000206 000000c0 0809355c 00000010     ........\5......
 8093444:	00000000 00000010 080935ec              .........5..

08093450 <_ZL16aes_256_ecb_info>:
 8093450:	00000104 00000100 08093574 00000010     ........t5......
 8093460:	00000000 00000010 080935ec              .........5..

0809346c <_ZL16aes_128_ecb_info>:
 809346c:	00000102 00000080 0809358c 00000010     .........5......
 809347c:	00000000 00000010 080935ec              .........5..

08093488 <_ZL12gcm_aes_info>:
 8093488:	00000002 00000000 00000000 08085fa3     ............._..
 8093498:	08085fa3 08085f8b 08085f79              ._..._..y_..

080934a4 <mbedtls_cipher_definitions>:
 80934a4:	00000002 0809346c 00000003 080935b4     ....l4.......5..
 80934b4:	00000004 08093450 00000005 08093510     ....P4.......5..
 80934c4:	00000006 08093434 00000007 08093598     ....44.......5..
 80934d4:	0000000e 080935d0 0000000f 080934f4     .....5.......4..
 80934e4:	00000010 08093608 00000000 00000000     .....6..........

080934f4 <_ZL16aes_192_gcm_info>:
 80934f4:	0000060f 000000c0 08093538 0000000c     ........85......
 8093504:	00000001 00000010 08093488              .........4..

08093510 <_ZL16aes_128_cbc_info>:
 8093510:	00000205 00000080 08093568 00000010     ........h5......
 8093520:	00000000 00000010 080935ec 2d534541     .........5..AES-
 8093530:	2d363532 004d4347 2d534541 2d323931     256-GCM.AES-192-
 8093540:	004d4347 2d534541 2d383231 004d4347     GCM.AES-128-GCM.
 8093550:	2d534541 2d363532 00434243 2d534541     AES-256-CBC.AES-
 8093560:	2d323931 00434243 2d534541 2d383231     192-CBC.AES-128-
 8093570:	00434243 2d534541 2d363532 00424345     CBC.AES-256-ECB.
 8093580:	2d534541 2d323931 00424345 2d534541     AES-192-ECB.AES-
 8093590:	2d383231 00424345                       128-ECB.

08093598 <_ZL16aes_256_cbc_info>:
 8093598:	00000207 00000100 08093550 00000010     ........P5......
 80935a8:	00000000 00000010 080935ec              .........5..

080935b4 <_ZL16aes_192_ecb_info>:
 80935b4:	00000103 000000c0 08093580 00000010     .........5......
 80935c4:	00000000 00000010 080935ec              .........5..

080935d0 <_ZL16aes_128_gcm_info>:
 80935d0:	0000060e 00000080 08093544 0000000c     ........D5......
 80935e0:	00000001 00000010 08093488              .........4..

080935ec <_ZL8aes_info>:
 80935ec:	00000002 08085fe7 08085fdf 08085fdb     ....._..._..._..
 80935fc:	08085fd7 08085fbf 08085fad              ._..._..._..

08093608 <_ZL16aes_256_gcm_info>:
 8093608:	00000610 00000100 0809352c 0000000c     ........,5......
 8093618:	00000001 00000010 08093488 2e617372     .........4..rsa.
 8093628:	7372004e 00452e61                       N.rsa.E.

08093630 <mbedtls_rsa_info>:
 8093630:	00000001 08092bf7 0808604d 08085feb     .....+..M`..._..
 8093640:	08086131 080860f1 080860a5 08086059     1a...`...`..Y`..
 8093650:	08086049 0808602f 0808601d 08085ff9     I`../`...`..._..
 8093660:	6e6b6e75 006e776f 2d534c54 2d415352     unknown.TLS-RSA-
 8093670:	48544957 5345412d 3635322d 4d43472d     WITH-AES-256-GCM
 8093680:	4148532d 00343833 2d534c54 2d415352     -SHA384.TLS-RSA-
 8093690:	48544957 5345412d 3832312d 4d43472d     WITH-AES-128-GCM
 80936a0:	4148532d 00363532 2d534c54 2d415352     -SHA256.TLS-RSA-
 80936b0:	48544957 5345412d 3832312d 4342432d     WITH-AES-128-CBC
 80936c0:	4148532d 00363532 2d534c54 2d415352     -SHA256.TLS-RSA-
 80936d0:	48544957 5345412d 3635322d 4342432d     WITH-AES-256-CBC
 80936e0:	4148532d 00363532 2d534c54 2d415352     -SHA256.TLS-RSA-
 80936f0:	48544957 5345412d 3832312d 4342432d     WITH-AES-128-CBC
 8093700:	4148532d 534c5400 4153522d 5449572d     -SHA.TLS-RSA-WIT
 8093710:	45412d48 35322d53 42432d36 48532d43     H-AES-256-CBC-SH
 8093720:	00000041                                A...

08093724 <_ZL23ciphersuite_definitions>:
 8093724:	0000009d 08093668 00010710 00000003     ....h6..........
 8093734:	00000003 00000003 00000003 00000000     ................
 8093744:	0000009c 08093688 0001060e 00000003     .....6..........
 8093754:	00000003 00000003 00000003 00000000     ................
 8093764:	0000003c 080936a8 00010605 00000003     <....6..........
 8093774:	00000003 00000003 00000003 00000000     ................
 8093784:	0000003d 080936c8 00010607 00000003     =....6..........
 8093794:	00000003 00000003 00000003 00000000     ................
 80937a4:	0000002f 080936e8 00010405 00000003     /....6..........
 80937b4:	00000000 00000003 00000003 00000000     ................
 80937c4:	00000035 08093705 00010407 00000003     5....7..........
 80937d4:	00000000 00000003 00000003 00000000     ................
 80937e4:	00000000 08092be8 00000000 00000000     .....+..........
	...

08093804 <_ZL22ciphersuite_preference>:
 8093804:	0000c02c 0000c030 0000009f 0000c0ad     ,...0...........
 8093814:	0000c09f 0000c024 0000c028 0000006b     ....$...(...k...
 8093824:	0000c00a 0000c014 00000039 0000c0af     ........9.......
 8093834:	0000c0a3 0000c087 0000c08b 0000c07d     ............}...
 8093844:	0000c073 0000c077 000000c4 00000088     s...w...........
 8093854:	0000c02b 0000c02f 0000009e 0000c0ac     +.../...........
 8093864:	0000c09e 0000c023 0000c027 00000067     ....#...'...g...
 8093874:	0000c009 0000c013 00000033 0000c0ae     ........3.......
 8093884:	0000c0a2 0000c086 0000c08a 0000c07c     ............|...
 8093894:	0000c072 0000c076 000000be 00000045     r...v.......E...
 80938a4:	0000c008 0000c012 00000016 000000ab     ................
 80938b4:	0000c0a7 0000c038 000000b3 0000c036     ....8.......6...
 80938c4:	00000091 0000c091 0000c09b 0000c097     ................
 80938d4:	0000c0ab 000000aa 0000c0a6 0000c037     ............7...
 80938e4:	000000b2 0000c035 00000090 0000c090     ....5...........
 80938f4:	0000c096 0000c09a 0000c0aa 0000c034     ............4...
 8093904:	0000008f 0000c0ff 0000009d 0000c09d     ................
 8093914:	0000003d 00000035 0000c032 0000c02a     =...5...2...*...
 8093924:	0000c00f 0000c02e 0000c026 0000c005     ........&.......
 8093934:	0000c0a1 0000c07b 000000c0 00000084     ....{...........
 8093944:	0000c08d 0000c079 0000c089 0000c075     ....y.......u...
 8093954:	0000009c 0000c09c 0000003c 0000002f     ........<.../...
 8093964:	0000c031 0000c029 0000c00e 0000c02d     1...).......-...
 8093974:	0000c025 0000c004 0000c0a0 0000c07a     %...........z...
 8093984:	000000ba 00000041 0000c08c 0000c078     ....A.......x...
 8093994:	0000c088 0000c074 0000000a 0000c00d     ....t...........
 80939a4:	0000c003 000000ad 000000b7 00000095     ................
 80939b4:	0000c093 0000c099 000000ac 000000b6     ................
 80939c4:	00000094 0000c092 0000c098 00000093     ................
 80939d4:	000000a9 0000c0a5 000000af 0000008d     ................
 80939e4:	0000c08f 0000c095 0000c0a9 000000a8     ................
 80939f4:	0000c0a4 000000ae 0000008c 0000c08e     ................
 8093a04:	0000c094 0000c0a8 0000008b 0000c007     ................
 8093a14:	0000c011 0000c033 0000008e 00000005     ....3...........
 8093a24:	00000004 0000c00c 0000c002 00000092     ................
 8093a34:	0000008a 00000015 00000009 0000c006     ................
 8093a44:	0000c010 0000c03b 0000c03a 0000c039     ....;...:...9...
 8093a54:	000000b5 000000b4 0000002d 0000003b     ........-...;...
 8093a64:	00000002 00000001 0000c00b 0000c001     ................
 8093a74:	000000b9 000000b8 0000002e 000000b1     ................
 8093a84:	000000b0 0000002c 00000000 00202b20     ....,....... + .
 8093a94:	2500202c 3f003d73 3a003d3f 32302500     , .%s=.??=.:.%02
 8093aa4:	00732558 2e2e2e2e 3f3f3f00 20732500     X%s......???.%s 
 8093ab4:	2079656b 657a6973 48862a00 010df786     key size.*.H....
 8093ac4:	0001010c 8648862a 05010df7 2d2d000d     ....*.H.......--
 8093ad4:	452d2d2d 5220444e 50204153 41564952     ---END RSA PRIVA
 8093ae4:	4b204554 2d2d5945 002d2d2d 2d2d2d2d     TE KEY-----.----
 8093af4:	4745422d 52204e49 50204153 41564952     -BEGIN RSA PRIVA
 8093b04:	4b204554 2d2d5945 002d2d2d 2d2d2d2d     TE KEY-----.----
 8093b14:	444e452d 49525020 45544156 59454b20     -END PRIVATE KEY
 8093b24:	2d2d2d2d 2d2d002d 422d2d2d 4e494745     -----.-----BEGIN
 8093b34:	49525020 45544156 59454b20 2d2d2d2d      PRIVATE KEY----
 8093b44:	2d2d002d 452d2d2d 4520444e 5952434e     -.-----END ENCRY
 8093b54:	44455450 49525020 45544156 59454b20     PTED PRIVATE KEY
 8093b64:	2d2d2d2d 2d2d002d 422d2d2d 4e494745     -----.-----BEGIN
 8093b74:	434e4520 54505952 50204445 41564952      ENCRYPTED PRIVA
 8093b84:	4b204554 2d2d5945 002d2d2d 2d2d2d2d     TE KEY-----.----
 8093b94:	444e452d 42555020 2043494c 2d59454b     -END PUBLIC KEY-
 8093ba4:	2d2d2d2d 2d2d2d00 45422d2d 204e4947     ----.-----BEGIN 
 8093bb4:	4c425550 4b204349 2d2d5945 002d2d2d     PUBLIC KEY-----.
 8093bc4:	00000000                                ....

08093bc8 <_ZL5last4>:
	...
 8093bd0:	00001c20 00000000 00003840 00000000      .......@8......
 8093be0:	00002460 00000000 00007080 00000000     `$.......p......
 8093bf0:	00006ca0 00000000 000048c0 00000000     .l.......H......
 8093c00:	000054e0 00000000 0000e100 00000000     .T..............
 8093c10:	0000fd20 00000000 0000d940 00000000      .......@.......
 8093c20:	0000c560 00000000 00009180 00000000     `...............
 8093c30:	00008da0 00000000 0000a9c0 00000000     ................
 8093c40:	0000b5e0 00000000                       ........

08093c48 <_ZL14base64_dec_map>:
 8093c48:	7f7f7f7f 7f7f7f7f 7f7f7f7f 7f7f7f7f     ................
 8093c58:	7f7f7f7f 7f7f7f7f 7f7f7f7f 7f7f7f7f     ................
 8093c68:	7f7f7f7f 7f7f7f7f 3e7f7f7f 3f7f7f7f     ...........>...?
 8093c78:	37363534 3b3a3938 7f7f3d3c 7f7f407f     456789:;<=...@..
 8093c88:	0201007f 06050403 0a090807 0e0d0c0b     ................
 8093c98:	1211100f 16151413 7f191817 7f7f7f7f     ................
 8093ca8:	1c1b1a7f 201f1e1d 24232221 28272625     ....... !"#$%&'(
 8093cb8:	2c2b2a29 302f2e2d 7f333231 7f7f7f7f     )*+,-./0123.....

08093cc8 <CSWTCH.21>:
 8093cc8:	080926a4 080926d4 08092764 08092704     .&...&..d'...'..
 8093cd8:	08092734                                4'..

08093cdc <_ZL23x509_crt_verify_strings>:
 8093cdc:	00000001 080940af 00000002 080940d4     .....@.......@..
 8093cec:	00000004 08094103 00000008 08094148     .....A......HA..
 8093cfc:	00000010 08094182 00000020 080941b4     .....A.. ....A..
 8093d0c:	00000040 080941c7 00000080 080941df     @....A.......A..
 8093d1c:	00000100 08094204 00000200 08094232     .....B......2B..
 8093d2c:	00000400 08094260 00000800 0809427b     ....`B......{B..
 8093d3c:	00001000 080942a7 00002000 080942db     .....B... ...B..
 8093d4c:	00004000 08094309 00008000 0809433e     .@...C......>C..
 8093d5c:	00010000 08094387 00020000 080943d9     .....C.......C..
 8093d6c:	00040000 08094406 00080000 08094447     .....D......GD..
	...

08093d84 <mbedtls_x509_crt_profile_default>:
 8093d84:	000000f0 0fffffff 0fffffff 00000800     ................
 8093d94:	65757274 6c616600 0a006573 74726543     true.false..Cert
 8093da4:	63696669 20657461 75207369 696e696e     ificate is unini
 8093db4:	6c616974 64657369 25000a21 72656373     tialised!..%scer
 8093dc4:	76202e74 69737265 20206e6f 3a202020     t. version     :
 8093dd4:	0a642520 73732500 61697265 756e206c      %d..%sserial nu
 8093de4:	7265626d 20202020 00203a20 6973250a     mber     : ..%si
 8093df4:	65757373 616e2072 2020656d 20202020     ssuer name      
 8093e04:	00203a20 7373250a 656a6275 6e207463      : ..%ssubject n
 8093e14:	20656d61 20202020 00203a20 6973250a     ame      : ..%si
 8093e24:	65757373 6f202064 2020206e 20202020     ssued  on       
 8093e34:	25203a20 2d643430 64323025 3230252d      : %04d-%02d-%02
 8093e44:	30252064 253a6432 3a643230 64323025     d %02d:%02d:%02d
 8093e54:	73250a00 69707865 20736572 20206e6f     ..%sexpires on  
 8093e64:	20202020 203a2020 64343025 3230252d           : %04d-%02
 8093e74:	30252d64 25206432 3a643230 64323025     d-%02d %02d:%02d
 8093e84:	3230253a 250a0064 67697373 2064656e     :%02d..%ssigned 
 8093e94:	6e697375 20202067 3a202020 250a0020     using      : ..%
 8093ea4:	312d2573 203a7338 62206425 00737469     s%-18s: %d bits.
 8093eb4:	6273250a 63697361 6e6f6320 61727473     .%sbasic constra
 8093ec4:	73746e69 43203a20 73253d41 6d202c00     ints : CA=%s., m
 8093ed4:	705f7861 6c687461 253d6e65 250a0064     ax_pathlen=%d..%
 8093ee4:	62757373 7463656a 746c6120 6d616e20     ssubject alt nam
 8093ef4:	3a202065 250a0020 72656373 74202e74     e  : ..%scert. t
 8093f04:	20657079 20202020 3a202020 73250020     ype        : .%s
 8093f14:	204c5353 65696c43 2500746e 4c535373     SSL Client.%sSSL
 8093f24:	72655320 00726576 6d457325 006c6961      Server.%sEmail.
 8093f34:	624f7325 7463656a 67695320 676e696e     %sObject Signing
 8093f44:	52732500 72657365 00646576 53537325     .%sReserved.%sSS
 8093f54:	4143204c 45732500 6c69616d 00414320     L CA.%sEmail CA.
 8093f64:	624f7325 7463656a 67695320 676e696e     %sObject Signing
 8093f74:	00414320 6b73250a 75207965 65676173      CA..%skey usage
 8093f84:	20202020 20202020 00203a20 69447325              : .%sDi
 8093f94:	61746967 6953206c 74616e67 00657275     gital Signature.
 8093fa4:	6f4e7325 6552206e 69647570 6f697461     %sNon Repudiatio
 8093fb4:	7325006e 2079654b 69636e45 72656870     n.%sKey Encipher
 8093fc4:	746e656d 44732500 20617461 69636e45     ment.%sData Enci
 8093fd4:	72656870 746e656d 4b732500 41207965     pherment.%sKey A
 8093fe4:	65657267 746e656d 4b732500 43207965     greement.%sKey C
 8093ff4:	20747265 6e676953 43732500 53204c52     ert Sign.%sCRL S
 8094004:	006e6769 6e457325 68706963 4f207265     ign.%sEncipher O
 8094014:	00796c6e 65447325 68706963 4f207265     nly.%sDecipher O
 8094024:	00796c6e 6573250a 6b207478 75207965     nly..%sext key u
 8094034:	65676173 20202020 00203a20 73257325     sage     : .%s%s
 8094044:	25732500 25000a73 6b6e5573 6e776f6e     .%s%s..%sUnknown
 8094054:	61657220 206e6f73 69687428 68732073      reason (this sh
 8094064:	646c756f 746f6e20 70616820 296e6570     ould not happen)
 8094074:	2e2a000a 2d2d2d00 45422d2d 204e4947     ..*..-----BEGIN 
 8094084:	54524543 43494649 2d455441 2d2d2d2d     CERTIFICATE-----
 8094094:	2d2d2d00 4e452d2d 45432044 46495452     .-----END CERTIF
 80940a4:	54414349 2d2d2d45 54002d2d 63206568     ICATE-----.The c
 80940b4:	69747265 61636966 76206574 64696c61     ertificate valid
 80940c4:	20797469 20736168 69707865 00646572     ity has expired.
 80940d4:	20656854 74726563 63696669 20657461     The certificate 
 80940e4:	20736168 6e656562 76657220 64656b6f     has been revoked
 80940f4:	73692820 206e6f20 52432061 5400294c      (is on a CRL).T
 8094104:	63206568 69747265 61636966 43206574     he certificate C
 8094114:	6f6d6d6f 614e206e 2820656d 20294e43     ommon Name (CN) 
 8094124:	73656f64 746f6e20 74616d20 77206863     does not match w
 8094134:	20687469 20656874 65707865 64657463     ith the expected
 8094144:	004e4320 20656854 74726563 63696669      CN.The certific
 8094154:	20657461 6e207369 6320746f 6572726f     ate is not corre
 8094164:	796c7463 67697320 2064656e 74207962     ctly signed by t
 8094174:	74206568 74737572 43206465 68540041     he trusted CA.Th
 8094184:	52432065 7369204c 746f6e20 726f6320     e CRL is not cor
 8094194:	74636572 7320796c 656e6769 79622064     rectly signed by
 80941a4:	65687420 75727420 64657473 00414320      the trusted CA.
 80941b4:	20656854 204c5243 65207369 72697078     The CRL is expir
 80941c4:	43006465 69747265 61636966 77206574     ed.Certificate w
 80941d4:	6d207361 69737369 4300676e 69747265     as missing.Certi
 80941e4:	61636966 76206574 66697265 74616369     ficate verificat
 80941f4:	206e6f69 20736177 70696b73 00646570     ion was skipped.
 8094204:	6568744f 65722072 6e6f7361 61632820     Other reason (ca
 8094214:	6562206e 65737520 79622064 72657620     n be used by ver
 8094224:	20796669 6c6c6163 6b636162 68540029     ify callback).Th
 8094234:	65632065 66697472 74616369 61762065     e certificate va
 8094244:	6964696c 73207974 74726174 6e692073     lidity starts in
 8094254:	65687420 74756620 00657275 20656854      the future.The 
 8094264:	204c5243 66207369 206d6f72 20656874     CRL is from the 
 8094274:	75747566 55006572 65676173 656f6420     future.Usage doe
 8094284:	6f6e2073 616d2074 20686374 20656874     s not match the 
 8094294:	5579656b 65676173 74786520 69736e65     keyUsage extensi
 80942a4:	55006e6f 65676173 656f6420 6f6e2073     on.Usage does no
 80942b4:	616d2074 20686374 20656874 65747865     t match the exte
 80942c4:	6465646e 5579654b 65676173 74786520     ndedKeyUsage ext
 80942d4:	69736e65 55006e6f 65676173 656f6420     ension.Usage doe
 80942e4:	6f6e2073 616d2074 20686374 20656874     s not match the 
 80942f4:	6543736e 79547472 65206570 6e657478     nsCertType exten
 8094304:	6e6f6973 65685400 72656320 69666974     sion.The certifi
 8094314:	65746163 20736920 6e676973 77206465     cate is signed w
 8094324:	20687469 75206e61 6363616e 61747065     ith an unaccepta
 8094334:	20656c62 68736168 6854002e 65632065     ble hash..The ce
 8094344:	66697472 74616369 73692065 67697320     rtificate is sig
 8094354:	2064656e 68746977 206e6120 63616e75     ned with an unac
 8094364:	74706563 656c6261 204b5020 20676c61     ceptable PK alg 
 8094374:	20676528 20415352 45207376 41534443     (eg RSA vs ECDSA
 8094384:	54002e29 63206568 69747265 61636966     )..The certifica
 8094394:	69206574 69732073 64656e67 74697720     te is signed wit
 80943a4:	6e612068 616e7520 70656363 6c626174     h an unacceptabl
 80943b4:	656b2065 65282079 61622067 75632064     e key (eg bad cu
 80943c4:	2c657672 41535220 6f6f7420 6f687320     rve, RSA too sho
 80943d4:	2e297472 65685400 4c524320 20736920     rt)..The CRL is 
 80943e4:	6e676973 77206465 20687469 75206e61     signed with an u
 80943f4:	6363616e 61747065 20656c62 68736168     nacceptable hash
 8094404:	6854002e 52432065 7369204c 67697320     ..The CRL is sig
 8094414:	2064656e 68746977 206e6120 63616e75     ned with an unac
 8094424:	74706563 656c6261 204b5020 20676c61     ceptable PK alg 
 8094434:	20676528 20415352 45207376 41534443     (eg RSA vs ECDSA
 8094444:	54002e29 43206568 69204c52 69732073     )..The CRL is si
 8094454:	64656e67 74697720 6e612068 616e7520     gned with an una
 8094464:	70656363 6c626174 656b2065 65282079     cceptable key (e
 8094474:	61622067 75632064 2c657672 41535220     g bad curve, RSA
 8094484:	6f6f7420 6f687320 2e297472 00000000      too short).....

08094494 <mbedtls_x509_crt_profile_suiteb>:
 8094494:	00000060 0000000a 00000000 00000000     `...............

080944a4 <CSWTCH.205>:
 80944a4:	05040302 696c6306 20746e65 696e6966     .....client fini
 80944b4:	64656873 72657300 20726576 696e6966     shed.server fini
 80944c4:	64656873 73616d00 20726574 72636573     shed.master secr
 80944d4:	6b007465 65207965 6e617078 6e6f6973     et.key expansion
 80944e4:	4c535300 302e3376 534c5400 302e3176     .SSLv3.0.TLSv1.0
 80944f4:	534c5400 312e3176 534c5400 322e3176     .TLSv1.1.TLSv1.2
 8094504:	00000000                                ....

08094508 <_ZL18mfl_code_to_length>:
 8094508:	00002000 00000200 00000400 00000800     . ..............
 8094518:	00001000 61766e69 2064696c 00004b50     ....invalid PK..

08094528 <_ZL1K>:
 8094528:	d728ae22 428a2f98 23ef65cd 71374491     ".(../.B.e.#.D7q
 8094538:	ec4d3b2f b5c0fbcf 8189dbbc e9b5dba5     /;M.............
 8094548:	f348b538 3956c25b b605d019 59f111f1     8.H.[.V9.......Y
 8094558:	af194f9b 923f82a4 da6d8118 ab1c5ed5     .O....?...m..^..
 8094568:	a3030242 d807aa98 45706fbe 12835b01     B........opE.[..
 8094578:	4ee4b28c 243185be d5ffb4e2 550c7dc3     ...N..1$.....}.U
 8094588:	f27b896f 72be5d74 3b1696b1 80deb1fe     o.{.t].r...;....
 8094598:	25c71235 9bdc06a7 cf692694 c19bf174     5..%.....&i.t...
 80945a8:	9ef14ad2 e49b69c1 384f25e3 efbe4786     .J...i...%O8.G..
 80945b8:	8b8cd5b5 0fc19dc6 77ac9c65 240ca1cc     ........e..w...$
 80945c8:	592b0275 2de92c6f 6ea6e483 4a7484aa     u.+Yo,.-...n..tJ
 80945d8:	bd41fbd4 5cb0a9dc 831153b5 76f988da     ..A....\.S.....v
 80945e8:	ee66dfab 983e5152 2db43210 a831c66d     ..f.RQ>..2.-m.1.
 80945f8:	98fb213f b00327c8 beef0ee4 bf597fc7     ?!...'........Y.
 8094608:	3da88fc2 c6e00bf3 930aa725 d5a79147     ...=....%...G...
 8094618:	e003826f 06ca6351 0a0e6e70 14292967     o...Qc..pn..g)).
 8094628:	46d22ffc 27b70a85 5c26c926 2e1b2138     ./.F...'&.&\8!..
 8094638:	5ac42aed 4d2c6dfc 9d95b3df 53380d13     .*.Z.m,M......8S
 8094648:	8baf63de 650a7354 3c77b2a8 766a0abb     .c..Ts.e..w<..jv
 8094658:	47edaee6 81c2c92e 1482353b 92722c85     ...G....;5...,r.
 8094668:	4cf10364 a2bfe8a1 bc423001 a81a664b     d..L.....0B.Kf..
 8094678:	d0f89791 c24b8b70 0654be30 c76c51a3     ....p.K.0.T..Ql.
 8094688:	d6ef5218 d192e819 5565a910 d6990624     .R........eU$...
 8094698:	5771202a f40e3585 32bbd1b8 106aa070     * qW.5.....2p.j.
 80946a8:	b8d2d0c8 19a4c116 5141ab53 1e376c08     ........S.AQ.l7.
 80946b8:	df8eeb99 2748774c e19b48a8 34b0bcb5     ....LwH'.H.....4
 80946c8:	c5c95a63 391c0cb3 e3418acb 4ed8aa4a     cZ.....9..A.J..N
 80946d8:	7763e373 5b9cca4f d6b2b8a3 682e6ff3     s.cwO..[.....o.h
 80946e8:	5defb2fc 748f82ee 43172f60 78a5636f     ...]...t`/.Coc.x
 80946f8:	a1f0ab72 84c87814 1a6439ec 8cc70208     r....x...9d.....
 8094708:	23631e28 90befffa de82bde9 a4506ceb     (.c#.........lP.
 8094718:	b2c67915 bef9a3f7 e372532b c67178f2     .y......+Sr..xq.
 8094728:	ea26619c ca273ece 21c0c207 d186b8c7     .a&..>'....!....
 8094738:	cde0eb1e eada7dd6 ee6ed178 f57d4f7f     .....}..x.n..O}.
 8094748:	72176fba 06f067aa a2c898a6 0a637dc5     .o.r.g.......}c.
 8094758:	bef90dae 113f9804 131c471b 1b710b35     ......?..G..5.q.
 8094768:	23047d84 28db77f5 40c72493 32caab7b     .}.#.w.(.$.@{..2
 8094778:	15c9bebc 3c9ebe0a 9c100d4c 431d67c4     .......<L....g.C
 8094788:	cb3e42b6 4cc5d4be fc657e2a 597f299c     .B>....L*~e..).Y
 8094798:	3ad6faec 5fcb6fab 4a475817 6c44198c     ...:.o._.XGJ..Dl
 80947a8:	636f7250 7079542d 34203a65 434e452c     Proc-Type: 4,ENC
 80947b8:	54505952 02004445 0b070503 1713110d     RYPTED..........
 80947c8:	29251f1d 3b352f2b 4947433d 6159534f     ..%)+/5;=CGIOSYa
 80947d8:	6d6b6765 89837f71 9d97958b b3ada7a3     egkmq...........
 80947e8:	c5c1bfb5 e3dfd3c7 f1efe9e5 061f0efb     ................
 80947f8:	240c127e 2a096446 03546f33 62794319     ~..$Fd.*3oT..Cyb
 8094808:	75417265 53006f74 0d414d54 53544100     erAuto.STMA..ATS
 8094818:	000d3650 43435453 0d504346 45544100     P6..STCCFCP..ATE
 8094828:	45520030 52470044 004e4545 45554c42     0.RED.GREEN.BLUE
 8094838:	61707300 6c636b72 746e6569 6c656800     .sparkclient.hel
 8094848:	77206f6c 646c726f 74756f00 69706f54     lo world.outTopi
 8094858:	656d2f63 67617373 6e690065 69706f54     c/message.inTopi
 8094868:	656d2f63 67617373 69770065 656c6572     c/message.wirele
 8094878:	742e7373 696c6977 6f632e6f 6163006d     ss.twilio.com.ca
 8094888:	64656c6c 67656220 63006e69 656c6c61     lled begin.calle
 8094898:	6f642064 63007469 656c6c61 72702064     d doit.called pr
 80948a8:	7365636f 33610073 6d30626d 656c367a     ocess.a3mb0mz6le
 80948b8:	38736267 746f692e 2d73752e 74736165     gbs8.iot.us-east
 80948c8:	612e322d 6f7a616d 7377616e 6d6f632e     -2.amazonaws.com
 80948d8:	72657300 5f726576 65726874 00006461     .server_thread..

080948e8 <_ZTV4File>:
	...
 80948f0:	08090081 080900ad 08090095 0809008f     ................
 8094900:	08090065 080900f7 08090089 08090083     e...............

08094910 <_ZTV5SdFat>:
	...
 8094918:	080900d1 080900c9 080900c1 080900b9     ................

08094928 <_ZL15clientKeyCrtPem>:
 8094928:	2d2d2d2d 4745422d 43204e49 49545245     -----BEGIN CERTI
 8094938:	41434946 2d2d4554 202d2d2d 494d0a0d     FICATE----- ..MI
 8094948:	54574449 6b414343 77416747 67414249     IDWTCCAkGgAwIBAg
 8094958:	32515549 4168412f 522f497a 69475451     IUQ2/AhAzI/RQTGi
 8094968:	466e7278 7569352f 7541336f 51447749     xrnF/5iuo3AuIwDQ
 8094978:	6f4b4a59 7668495a 51414e63 0a0d4c45     YJKoZIhvcNAQEL..
 8094988:	77415142 4c465454 476b454d 45553141     BQAwTTFLMEkGA1UE
 8094998:	43787743 68315751 75396d65 6c644649     CwxCQW1hem9uIFdl
 80949a8:	54426959 324a585a 6c4e5761 50427963     YiBTZXJ2aWNlcyBP
 80949b8:	74465550 76705859 6a356962 67303262     PUFtYXpvbi5jb20g
 80949c8:	57530a0d 694c6a35 56504d42 58596c4e     ..SW5jLiBMPVNlYX
 80949d8:	47623052 31556755 32563951 47617a46     R0bGUgU1Q9V2FzaG
 80949e8:	335a756c 69627652 56504442 424d5456     luZ3RvbiBDPVVTMB
 80949f8:	54445834 444d3445 444f796b 544e3245     4XDTE4MDkyODE2NT
 8094a08:	0a0d7a51 586f6c4e 35515444 7a49544d     Qz..NloXDTQ5MTIz
 8094a18:	7a49544d 316b544e 776f564f 63456a48     MTIzNTk1OVowHjEc
 8094a28:	476f424d 45553141 54777741 54645651     MBoGA1UEAwwTQVdT
 8094a38:	766c4549 44424356 304a585a 705a5761     IElvVCBDZXJ0aWZp
 8094a48:	30463259 545a0a0d 53414343 51447749     Y2F0..ZTCCASIwDQ
 8094a58:	6f4b4a59 7668495a 51414e63 51424245     YJKoZIhvcNAQEBBQ
 8094a68:	67674441 44415045 51414343 6767436f     ADggEPADCCAQoCgg
 8094a78:	4d414245 65427278 50735554 395a4c6d     EBAMxrBeTUsPmLZ9
 8094a88:	45595036 0a0d6b6a 41776762 74664364     6PYEjk..bgwAdCft
 8094a98:	634c7170 2b416d41 545a752f 64414548     pqLcAmA+/uZTHEAd
 8094aa8:	646b4b2b 64387532 72385256 42394766     +Kkd2u8dVR8rfG9B
 8094ab8:	64385977 43715734 48455271 3641484f     wY8d4WqCqREHOHA6
 8094ac8:	774d7531 52794c6d 542b0a0d 58504f76     1uMwmLyR..+TvOPX
 8094ad8:	61544c4a 65746d36 567a3146 536f724a     JLTa6mteF1zVJroS
 8094ae8:	32526876 5a6d2f4c 3037524f 31424e77     vhR2L/mZOR70wNB1
 8094af8:	6b433475 38356b52 556e7432 4f2f5830     u4CkRk582tnU0X/O
 8094b08:	7151516d 754f4e2f 0a0d6d77 616b3663     mQQq/NOuwm..c6ka
 8094b18:	71735948 644f7178 52336b32 7a414955     HYsqxqOd2k3RUIAz
 8094b28:	4862546f 372f3544 2f502b59 74752b30     oTbHD5/7Y+P/0+ut
 8094b38:	58664d57 37514f67 476e4b30 43674839     WMfXgOQ70KnG9HgC
 8094b48:	2f343266 5a795052 52796867 73320a0d     f24/RPyZghyR..2s
 8094b58:	54386a68 6d7a5a6d 566e5746 57644944     hj8TmZzmFWnVDIdW
 8094b68:	36666356 3779724b 344a664e 61455974     Vcf6Kry7NfJ4tYEa
 8094b78:	2b784261 53473849 49306570 78594e52     aBx+I8GSpe0IRNYx
 8094b88:	457a4674 776d3078 54543756 0a0d7277     tFzEx0mwV7TTwr..
 8094b98:	4151686f 70775837 4e7a6a64 35423365     ohQA7XwpdjzNe3B5
 8094ba8:	6e6f4b66 7a46726a 6c6a457a 574d4453     fKonjrFzzEjlSDMW
 8094bb8:	7333466d 4b4e3848 53754273 35766f67     mF3sH8NKsBuSgov5
 8094bc8:	72625066 6b39456e 434f6547 38346349     fPbrnE9kGeOCIc48
 8094bd8:	78780a0d 77414330 61414145 464d674e     ..xx0CAwEAAaNgMF
 8094be8:	77487734 52564459 42426a30 6f467767     4wHwYDVR0jBBgwFo
 8094bf8:	69675541 56764f47 38464254 704e5550     AUgiGOvVTBF8PUNp
 8094c08:	4f386462 4d724653 37563059 5148776b     bd8OSFrMY0V7kwHQ
 8094c18:	0a0d4459 4f305256 45594242 36484446     YD..VR0OBBYEFDH6
 8094c28:	35465837 69527957 67416d6f 56567243     7XF5WyRiomAgCrVV
 8094c38:	2b765335 502f5a46 4777414d 64553141     5Sv+FZ/PMAwGA1Ud
 8094c48:	42457745 4351772f 7741414d 44596744     EwEB/wQCMAAwDgYD
 8094c58:	50305256 51410a0d 41422f48 67414451     VR0P..AQH/BAQDAg
 8094c68:	414d4165 53434730 49534771 51443362     eAMA0GCSqGSIb3DQ
 8094c78:	77434245 34414155 51414249 4d796441     EBCwUAA4IBAQAdyM
 8094c88:	49795244 56307269 3761644f 77594931     DRyIir0VOda71IYw
 8094c98:	71675432 0a0d5362 6b447a38 5552384c     2TgqbS..8zDkL8RU
 8094ca8:	616e4d72 30785549 36366973 71704b56     rMnaIUx0si66VKpq
 8094cb8:	4b655166 4476554b 6d724170 654c6a38     fQeKKUvDpArm8jLe
 8094cc8:	36436a4e 7753494f 54735553 455a7449     NjC6OISwSUsTItZE
 8094cd8:	4a746f47 39426b36 30590a0d 70594341     GotJ6kB9..Y0ACYp
 8094ce8:	36677370 36385834 4555525a 42396271     psg64X86ZRUEqb9B
 8094cf8:	4161692f 7a486b67 3678496b 68306238     /iaAgkHzkIx68b0h
 8094d08:	6e445736 47394146 755a6757 4150766f     6WDnFA9GWgZuovPA
 8094d18:	54544653 44384a6f 0a0d3539 69416531     SFTToJ8D95..1eAi
 8094d28:	62755a55 70504933 666b6e36 386c7350     UZub3IPp6nkfPsl8
 8094d38:	634b2b6c 396a6b56 2b784c79 4a4d6433     l+KcVkj9yLx+3dMJ
 8094d48:	422b7170 72513633 41564a76 48423979     pq+B36QrvJVAy9BH
 8094d58:	4e734e61 38344d46 48636c45 2b4f0a0d     aNsNFM48ElcH..O+
 8094d68:	5949394a 672f796b 4a457944 784b5241     J9IYky/gDyEJARKx
 8094d78:	63444234 6f417574 33506b6b 472f4c52     4BDctuAokkP3RL/G
 8094d88:	4e382f6a 4c4c584b 75362b67 64434d30     j/8NKXLLg+6u0MCd
 8094d98:	346b3147 65486958 3243656a 0a0d7634     G1k4XiHejeC24v..
 8094da8:	5a51476b 55374b4f 675a7461 2b504735     kGQZOK7UatZg5GP+
 8094db8:	64646d6f 65514534 376a3436 77465570     omdd4EQe64j7pUFw
 8094dc8:	4b776e6d 57505a55 4b617877 39623264     mnwKUZPWwxaKd2b9
 8094dd8:	6633474d 4b4e744c 54427341 2d2d0a0d     MG3fLtNKAsBT..--
 8094de8:	452d2d2d 4320444e 49545245 41434946     ---END CERTIFICA
 8094df8:	2d2d4554 002d2d2d                       TE-----.

08094e00 <_ZL18amazonIoTRootCaPem>:
 8094e00:	2d2d2d2d 4745422d 43204e49 49545245     -----BEGIN CERTI
 8094e10:	41434946 2d2d4554 202d2d2d 494d0a0d     FICATE----- ..MI
 8094e20:	7a304549 37414343 77416775 67414249     IE0zCCA7ugAwIBAg
 8094e30:	4e475149 696e5272 4c36395a 56494b74     IQGNrRniZ96LtKIV
 8094e40:	477a4e6a 6a533773 67424e41 6b68716b     jNzGs7SjANBgkqhk
 8094e50:	77394769 51414230 44414655 0a0d4243     iG9w0BAQUFADCB..
 8094e60:	4c456a79 476b414d 45553141 434d6842     yjELMAkGA1UEBhMC
 8094e70:	784d5656 56417a46 564e6742 546f4142     VVMxFzAVBgNVBAoT
 8094e80:	6c5a6c44 546c6d63 75645761 4a42434c     DlZlcmlTaWduLCBJ
 8094e90:	754d6d62 7738524d 44595148 4c515156     bmMuMR8wHQYDVQQL
 8094ea0:	78450a0d 585a575a 3255704a 69626e6c     ..ExZWZXJpU2lnbi
 8094eb0:	6e635542 43647a56 585a4f42 33623352     BUcnVzdCBOZXR3b3
 8094ec0:	544d724a 414f776f 51564459 7a454c51     JrMTowOAYDVQQLEz
 8094ed0:	79596f45 6a4d676b 694e7741 585a5742     EoYykgMjAwNiBWZX
 8094ee0:	0a0d704a 6e6c3255 67776962 6a355753     Jp..U2lnbiwgSW5j
 8094ef0:	7441694c 765a4549 68426963 6f525864     LiAtIEZvciBhdXRo
 8094f00:	704a3362 6b566d65 7a564849 7642535a     b3JpemVkIHVzZSBv
 8094f10:	35786d62 7755554d 44597751 44515156     bmx5MUUwQwYDVQQD
 8094f20:	57787a45 585a0a0d 3255704a 69626e6c     EzxW..ZXJpU2lnbi
 8094f30:	47624442 79637a46 46497a41 6d593142     BDbGFzcyAzIFB1Ym
 8094f40:	79597078 6d635142 5859746c 4549354a     xpYyBQcmltYXJ5IE
 8094f50:	6e636c4e 6d5a7052 58596a6c 32627052     NlcnRpZmljYXRpb2
 8094f60:	58516734 0a0d3056 79394761 35525861     4gQXV0..aG9yaXR5
 8094f70:	67304349 77557a52 4e636848 7859444d     IC0gRzUwHhcNMDYx
 8094f80:	3441544d 7741444d 7741444d 4e636857     MTA4MDAwMDAwWhcN
 8094f90:	77597a4d 32457a4e 314d6a4d 3555544f     MzYwNzE2MjM1OTU5
 8094fa0:	42436a57 4c456a79 414d0a0d 3141476b     WjCByjEL..MAkGA1
 8094fb0:	68424555 5656434d 7a46784d 67425641     UEBhMCVVMxFzAVBg
 8094fc0:	4142564e 6c44546f 6d636c5a 5761546c     NVBAoTDlZlcmlTaW
 8094fd0:	434c7564 6d624a42 524d754d 51487738     duLCBJbmMuMR8wHQ
 8094fe0:	51564459 78454c51 0a0d575a 704a585a     YDVQQLExZW..ZXJp
 8094ff0:	6e6c3255 55426962 7a566e63 4f424364     U2lnbiBUcnVzdCBO
 8095000:	3352585a 724a3362 776f544d 4459414f     ZXR3b3JrMTowOAYD
 8095010:	4c515156 6f457a45 676b7959 77416a4d     VQQLEzEoYykgMjAw
 8095020:	5742694e 704a585a 6e6c3255 69620a0d     NiBWZXJpU2ln..bi
 8095030:	57536777 694c6a35 45497441 6963765a     wgSW5jLiAtIEZvci
 8095040:	58646842 33626f52 6d65704a 48496b56     BhdXRob3JpemVkIH
 8095050:	535a7a56 6d627642 554d3578 77517755     VzZSBvbmx5MUUwQw
 8095060:	51564459 7a454451 585a5778 0a0d704a     YDVQQDEzxWZXJp..
 8095070:	6e6c3255 44426962 7a464762 7a417963     U2lnbiBDbGFzcyAz
 8095080:	31424649 70786d59 51427959 746c6d63     IFB1YmxpYyBQcmlt
 8095090:	354a5859 6c4e4549 70526e63 6a6c6d5a     YXJ5IENlcnRpZmlj
 80950a0:	70525859 67343262 30565851 79394761     YXRpb24gQXV0aG9y
 80950b0:	58610a0d 43493552 7a526730 67677755     ..aXR5IC0gRzUwgg
 80950c0:	414d6945 53434730 49534771 51443362     EiMA0GCSqGSIb3DQ
 80950d0:	51414245 34414155 77444249 67677741     EBAQUAA4IBDwAwgg
 80950e0:	6f414b45 51414249 414a7643 584b4967     EKAoIBAQCvJAgIKX
 80950f0:	0a0d316f 4d416d6e 4c647571 6337304f     o1..nmAMqudLO07c
 8095100:	38774c66 37795252 2b442b4b 354c514b     fLw8RRy7K+D+KQL5
 8095110:	6a697756 5655495a 78582f4a 78676372     VwijZIUVJ/Xxrcgx
 8095120:	69305669 71714336 7a4b6b70 35692f6a     iV0i6CqqpkKzj/i5
 8095130:	78656256 30740a0d 6f2f7a75 31422b39     Vbex..t0uz/o9+B1
 8095140:	30377366 6d5a6250 63595649 61446739     fs70PbZmIVYc9gDa
 8095150:	76335954 3277676a 56504949 30365451     TY3vjgw2IIPVQT60
 8095160:	56574b6e 754a4653 786a7255 2f366675     nKWVSFJuUrjxuf6/
 8095170:	636b6857 0a0d7a49 44686453 53703259     WhkcIz..SdhDY2pS
 8095180:	504b3953 52424836 4a476454 48765861     S9KP6HBRTdGJaXvH
 8095190:	7a615063 304a4233 64743332 54623153     cPaz3BJ023tdS1bT
 80951a0:	5638726c 77473664 6c494b39 63387138     lr8Vd6Gw9KIl8q8c
 80951b0:	59636d6b 47516635 4f420a0d 6575512b     kmcY5fQG..BO+Que
 80951c0:	4e354151 52743630 72412f6e 4f503072     QA5N06tRn/Arr0PO
 80951d0:	2b696737 2b693373 3631307a 7639797a     7gi+s3i+z016zy9v
 80951e0:	39723941 546b3131 52485a4d 33794178     A9r911kTMZHRxAy3
 80951f0:	53476b51 52325447 0a0d2b54 53704372     QkGSGT2RT+..rCpS
 8095200:	562f3478 6b6e4542 484e576a 70784469     x4/VBEnkjWNHiDxp
 8095210:	2b763867 72303752 462f6b66 4f34616c     g8v+R70rfk/Fla4O
 8095220:	5254646e 6e423851 554d2b63 6c374843     ndTRQ8Bnc+MUCH7l
 8095230:	7a393550 4b4d4475 2f30317a 494e0a0d     P59zuDMKz10/..NI
 8095240:	75695765 43365435 67415655 4141424d     eWiu5T6CUVAgMBAA
 8095250:	62676a47 61677749 77447738 52564459     GjgbIwga8wDwYDVR
 8095260:	51415430 41422f48 77417755 7a2f4245     0TAQH/BAUwAwEB/z
 8095270:	67424f41 5148564e 66414238 0a0d4538     AOBgNVHQ8BAf8E..
 8095280:	434d4142 77595141 49595162 4259774b     BAMCAQYwbQYIKwYB
 8095290:	48555142 45775141 66425459 6732566f     BQUHAQwEYTBfoV2g
 80952a0:	5a427a57 7763464d 4a595256 68315761     WzBZMFcwVRYJaW1h
 80952b0:	7655325a 6d6c325a 7745434d 48417a48     Z2UvZ2lmMCEwHzAH
 80952c0:	67420a0d 67447255 6747434d 2b6a5551     ..BgUrDgMCGgQUj+
 80952d0:	6f475458 596a7361 38777235 7461412b     XTGoasjY5rw8+Aat
 80952e0:	43474952 53473778 524a7734 48616a59     RIGCx7GS4wJRYjaH
 80952f0:	44633052 324c766f 325a7678 6d647538     R0cDovL2xvZ28udm
 8095300:	0a0d7956 704e5861 7534325a 74393259     Vy..aXNpZ24uY29t
 8095310:	7a5a334c 6e394762 6e357962 77595761     L3ZzbG9nby5naWYw
 8095320:	44595148 4f305256 45594242 542f4846     HQYDVR0OBBYEFH/T
 8095330:	4366615a 37796533 4a414438 354d3038     ZafC3ey78DAJ80M5
 8095340:	764b672b 7a4d0a0d 414d7a45 53434730     +gKv..MzEzMA0GCS
 8095350:	49534771 51443362 51424245 34414155     qGSIb3DQEBBQUAA4
 8095360:	51414249 454a5443 3258776f 4232504c     IBAQCTJEowX2LP2B
 8095370:	7a4c5971 4a337133 5876746b 58703266     qYLz3q3JktvXf2pX
 8095380:	4f4f696b 0a0d457a 34423670 69317145     kiOOzE..p6B4Eq1i
 8095390:	77566b44 6e584d5a 7459326c 2b6c416d     DkVwZMXnl2YtmAl+
 80953a0:	572f3658 6c68437a 71476738 48704243     X6/WzChl8gGqCBpH
 80953b0:	356e7633 614a4a66 676b4743 2b6b6444     3vn5fJJaCGkgDdk+
 80953c0:	38345762 59375744 67350a0d 42515261     bW48DW7Y..5gaRQB
 80953d0:	4d2b3569 39337448 75714274 4d495743     i5+MHt39tBquCWIM
 80953e0:	425a4e6e 63673455 7137556d 514b454b     nNZBU4gcmU7qKEKQ
 80953f0:	34625473 4e446237 74416c30 78696b75     sTb47bDN0lAtukix
 8095400:	6b30456c 57423646 0a0d4b6c 67394557     lE0kF6BWlK..WE9g
 8095410:	43366e79 43736761 58556971 6258624f     yn6CagsCqiUXObXb
 8095420:	45652b66 5671535a 47327269 42366c33     f+eEZSqVir2G3l6B
 8095430:	744d6f46 657a4d45 4369612f 6f306d4b     FoMtEMze/aiCKm0o
 8095440:	4c307748 6e584f78 5a596947 66340a0d     Hw0LxOXnGiYZ..4f
 8095450:	78625251 666c3143 67516e7a 38327955     QRbxC1lfznQgUy28
 8095460:	56556436 70746f34 31304636 58707676     6dUV4otp6F01vvpX
 8095470:	48514631 77744f4b 67447235 7a4d3762     1FQHKOtw5rDgb7Mz
 8095480:	62634956 344a6469 565a4576 0a0d4e38     VIcbidJ4vEZV8N..
 8095490:	63616e68 32724852 327a566c 49495458     hnacRHr2lVz2XTII
 80954a0:	5552364d 2f676874 797a4661 46716b51     M6RUthg/aFzyQkqF
 80954b0:	4453464f 6f483958 734b504c 6f616445     OFSDX9HoLPKsEdao
 80954c0:	714e5737 2d2d0a0d 452d2d2d 4320444e     7WNq..-----END C
 80954d0:	49545245 41434946 2d2d4554 002d2d2d     ERTIFICATE-----.

080954e0 <_ZL12clientKeyPem>:
 80954e0:	2d2d2d2d 4745422d 52204e49 50204153     -----BEGIN RSA P
 80954f0:	41564952 4b204554 2d2d5945 202d2d2d     RIVATE KEY----- 
 8095500:	494d0a0d 776f4549 41414249 5141434b     ..MIIEowIBAAKCAQ
 8095510:	477a4145 4e354673 592b7753 6f336e74     EAzGsF5NSw+Ytn3o
 8095520:	4f536739 41447552 2b4a3042 746f6d32     9gSORuDAB0J+2mot
 8095530:	44594377 6c352b37 4251634d 52713433     wCYD7+5lMcQB34qR
 8095540:	0a0d6133 56317837 38747948 42483062     3a..7x1VHyt8b0HB
 8095550:	6833786a 704b6f61 34635145 57724463     jx3haoKpEQc4cDrW
 8095560:	59437a34 35484a76 3934384f 4e746b63     4zCYvJH5O849cktN
 8095570:	31617172 4e585834 68756d55 48462b4b     rqa14XXNUmuhK+FH
 8095580:	5a2b7659 356b0a0d 41547648 37574830     Yv+Z..k5HvTA0HW7
 8095590:	47524b67 617a6e54 52546432 5a363866     gKRGTnza2dTRf86Z
 80955a0:	38724342 43373630 52717a5a 7969646f     BCr8067CZzqRodiy
 80955b0:	356f4772 64546133 44675146 734e684f     rGo53aTdFQgDOhNs
 80955c0:	2f6e5063 0a0d6a74 542f2f34 59313636     cPn/tj..4//T661Y
 80955d0:	41653978 51764435 30626371 2f4a4165     x9eA5DvQqcb0eAJ/
 80955e0:	45396a62 436d4a2f 61484a48 78504779     bj9E/JmCHJHayGPx
 80955f0:	4f6e5a4f 64615659 31684d55 2f78565a     OZnOYVadUMh1ZVx/
 8095600:	4c76716f 6e383173 31690a0d 6f705267     oqvLs18n..i1gRpo
 8095610:	6a344848 6c4b5a77 45685137 30476a31     HH4jwZKl7QhE1jG0
 8095620:	48544d58 58426253 43504e74 41466975     XMTHSbBXtNPCuiFA
 8095630:	43667444 4d50326c 48633731 6971386c     DtfCl2PM17cHl8qi
 8095640:	58734f65 4f534d50 0a0d4956 5961784d     eOsXPMSOVI..MxaY
 8095650:	66776558 77713077 434b3547 386c2f69     Xewfw0qwG5KCi/l8
 8095660:	63757539 5a513254 68493434 487a6a7a     9uucT2QZ44IhzjzH
 8095670:	44495148 42415141 42496f41 55694841     HQIDAQABAoIBAHiU
 8095680:	45764c51 51676b67 786f5535 4c420a0d     QLvEgkgQ5Uox..BL
 8095690:	666c3669 535a6164 7855516f 68394a55     i6lfdaZSoQUxUJ9h
 80956a0:	41315454 6b7a4551 71343773 6f515076     TT1AQEzks74qvPQo
 80956b0:	2f6d3939 6b38774a 41586d75 5a745269     99m/Jw8kumXAiRtZ
 80956c0:	7452672f 6b685734 78556449 0a0d6368     /gRt4WhkIdUxhc..
 80956d0:	54774257 434c7864 616a7843 70356f4e     WBwTdxLCCxjaNo5p
 80956e0:	4578434a 6c4d7345 474c6358 39646864     JCxEEsMlXcLGdhd9
 80956f0:	4d666863 57323349 65706479 41417961     chfMI32WydpeayAA
 8095700:	7a4d5937 7a412f66 746e4330 32684977     7YMzf/Az0CntwIh2
 8095710:	4f350a0d 616f6254 3544456f 44744231     ..5OTboaoED51BtD
 8095720:	4b4a6235 61623252 4b7a5266 4448457a     5bJKR2bafRzKzEHD
 8095730:	6b4d4462 447a3962 64374779 7a683976     bDMkb9zDyG7dv9hz
 8095740:	33705643 5332637a 2f4f615a 542f3077     CVp3zc2SZaO/w0/T
 8095750:	0a0d364b 78434d66 6f4f5144 4c587739     K6..fMCxDQOo9wXL
 8095760:	612f7238 304f716d 70434a6c 76447550     8r/amqO0lJCpPuDv
 8095770:	494b4973 6c394161 61316170 4a486d77     sIKIaA9lpa1awmHJ
 8095780:	596a526b 6c6f3463 41567a31 394b5144     kRjYc4ol1zVADQK9
 8095790:	31707a54 38340a0d 4e474d35 46523048     Tzp1..485MGNH0RF
 80957a0:	57357a6e 2b413769 562f7533 41362b78     nz5Wi7A+3u/Vx+6A
 80957b0:	43435171 444a4a34 50414c49 3649766b     qQCC4JJDILAPkvI6
 80957c0:	43675069 67696170 34546a73 43536d43     iPgCpaigsjT4CmSC
 80957d0:	5168316b 0a0d6a6d 56713561 436b5837     k1hQmj..a5qV7XkC
 80957e0:	41455967 4c78462b 46704973 746e6152     gYEA+FxLsIpFRant
 80957f0:	482f4d6e 58665933 5a516663 32364171     nM/H3YfXcfQZqA62
 8095800:	4b59756c 6357334a 56545438 64396e76     luYKJ3Wc8TTVvn9d
 8095810:	4d742f56 6c5a4f67 61750a0d 43556545     V/tMgOZl..uaEeUC
 8095820:	39374774 3743472b 6d717672 4c4a3744     tG79+GC7rvqmD7JL
 8095830:	504e426c 2f2f2f73 685a3539 68713159     lBNPs///95ZhY1qh
 8095840:	2b764b5a 416f487a 30727859 62564a41     ZKv+zHoAYxr0AJVb
 8095850:	34783337 50333736 0a0d726e 54367354     73x4673Pnr..Ts6T
 8095860:	61394b4b 53504633 324c7552 64395948     KK9a3FPSRuL2HY9d
 8095870:	35653575 4a6a554a 4c474259 626d4f37     u5e5JUjJYBGL7Omb
 8095880:	756e2b43 4a757879 31324471 42435132     C+nuyxuJqD212QCB
 8095890:	434d4134 41455967 30537230 68530a0d     4AMCgYEA0rS0..Sh
 80958a0:	325a5477 4b795156 6d386d61 44684e33     wTZ2VQyKam8m3NhD
 80958b0:	47315141 53733156 526d4f65 54543379     AQ1GV1sSeOmRy3TT
 80958c0:	316e3645 47313769 3165416f 3839436a     E6n1i71GoAe1jC98
 80958d0:	6e336a31 75497435 374e6145 0a0d557a     1j3n5tIuEaN7zU..
 80958e0:	64696c63 6347364f 706d7159 55314b37     clidO6GcYqmp7K1U
 80958f0:	72795157 4b4b5833 52356139 6c787169     WQyr3XKK9a5Riqxl
 8095900:	51472f6f 725a547a 342b4b76 5165366c     o/GQzTZrvK+4l6eQ
 8095910:	6b6b4763 334b4151 6c6d7979 316f6565     cGkkQAK3yymleeo1
 8095920:	55780a0d 69797a6b 70536e6f 414d5555     ..xUkzyionSpUUMA
 8095930:	74547971 4d397738 66364735 67374d6b     qyTt8w9M5G6fkM7g
 8095940:	6c764553 6c345949 59674338 32394145     SEvlIY4l8CgYEA92
 8095950:	5367436e 7a6e4e6b 53474d75 666e6f59     nCgSkNnzuMGSYonf
 8095960:	0a0d416a 71584b57 722b536c 73493646     jA..WKXqlS+rF6Is
 8095970:	32685778 57677849 514c6f51 462f3138     xWh2IxgWQoLQ81/F
 8095980:	52643773 6e325636 51674150 6c39387a     s7dR6V2nPAgQz89l
 8095990:	7a4f7630 66423534 494e4251 47585538     0vOz45BfQBNI8UXG
 80959a0:	676b5057 2b370a0d 754c3644 344a736d     WPkg..7+D6LumsJ4
 80959b0:	65787976 4377466a 64355462 654d7261     vyxejFwCbT5darMe
 80959c0:	634a774a 5261572f 77494469 30516c6d     JwJc/WaRiDIwmlQ0
 80959d0:	52634235 5a515371 78726270 61675443     5BcRqSQZpbrxCTga
 80959e0:	43394441 0a0d6d38 2f6c4b72 7477704b     AD9C8m..rKl/Kpwt
 80959f0:	57706170 634c514e 674f4530 43386748     papWNQLc0EOgHg8C
 8095a00:	4e415967 666e332b 672b5256 704f2b67     gYAN+3nfVR+gg+Op
 8095a10:	6c325166 46357346 3937466b 58495569     fQ2lFs5FkF79iUIX
 8095a20:	68584849 4d765443 70760a0d 48565343     IHXhCTvM..vpCSVH
 8095a30:	33636151 5276574a 35447277 5a437145     Qac3JWvRwrD5EqCZ
 8095a40:	6361362b 546c772b 4436504a 6f342b74     +6ac+wlTJP6Dt+4o
 8095a50:	6f4c626d 4a4f6445 58545a39 6750324c     mbLoEdOJ9ZTXL2Pg
 8095a60:	776f6b79 784d3832 0a0d4861 7463356d     ykow28MxaH..m5ct
 8095a70:	74677756 32664550 414d476f 4b6e7159     VwgtPEf2oGMAYqnK
 8095a80:	4351614b 4e2f6c73 4c494679 75466f4a     KaQCsl/NyFILJoFu
 8095a90:	4e2f2f54 5a6b6a66 38767775 496d6547     T//NfjkZuwv8GemI
 8095aa0:	46755578 48615561 69745059 64470a0d     xUuFaUaHYPti..Gd
 8095ab0:	77355761 4467424b 4661364c 43524633     aW5wKBgDL6aF3FRC
 8095ac0:	4f59774f 5a6e4e73 354a6d58 76617149     OwYOsNnZXmJ5Iqav
 8095ad0:	4c647a30 4e676362 4e764e51 4935794d     0zdLbcgNQNvNMy5I
 8095ae0:	754b5258 69464a37 532b3373 0a0d6931     XRKu7JFis3+S1i..
 8095af0:	4664657a 6d63666e 2b704741 45534271     zedFnfcmAGp+qBSE
 8095b00:	6a766457 68384743 304b784a 6d573863     WdvjCG8hJxK0c8Wm
 8095b10:	3048702f 67666434 3656426e 46395361     /pH04dfgnBV6aS9F
 8095b20:	4f4b6155 6647436c 6c6b3336 75796651     UaKOlCGf63klQfyu
 8095b30:	2b4a0a0d 32455236 50654b53 6872634a     ..J+6RE2SKePJcrh
 8095b40:	36714f46 4768666f 35704336 56777449     FOq6ofhG6Cp5ItwV
 8095b50:	42446e48 3352334f 734a7537 73427852     HnDBO3R37uJsRxBs
 8095b60:	6267796b 0a0d4a43 2d2d2d2d 444e452d     kygbCJ..-----END
 8095b70:	41535220 49525020 45544156 59454b20      RSA PRIVATE KEY
 8095b80:	2d2d2d2d 0000002d                       -----...

08095b88 <_ZTV8SPIClass>:
	...
 8095b90:	080908d9 080908db                       ........

08095b98 <_ZL14clock_divisors>:
 8095b98:	18100800 38302820                       .... (08

08095ba0 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 8095ba8:	08090a55 08090a5b 08090b77 08090a67     U...[...w...g...
 8095bb8:	08090a57                                W...

08095bbc <_ZTV9TCPClient>:
	...
 8095bc4:	08081591 080815c5 08090a27 08090ec5     ........'.......
 8095bd4:	08090bf5 08090b43 08090b15 08090a3d     ....C.......=...
 8095be4:	08090d71 08090a6d 08090b93 08090c95     q...m...........
 8095bf4:	08090ef9 08090ee9 08090a41 69726977     ........A...wiri
 8095c04:	7500676e 6c62616e 6f742065 74656720     ng.unable to get
 8095c14:	20504920 20726f66 74736f68 656d616e      IP for hostname
 8095c24:	63657200 253d2876 73002964 206b636f     .recv(=%d).sock 
 8095c34:	63206425 65736f6c 6b636f73 73007465     %d closesocket.s
 8095c44:	656b636f 64253d74 636f7300 6425206b     ocket=%d.sock %d
 8095c54:	6e6f6320 7463656e 636f7300 6425206b      connect.sock %d
 8095c64:	6e6f6320 7463656e 253d6465 61630064      connected=%d.ca
 8095c74:	676e696c 6f745320 6f4e2070 726f6d20     ling Stop No mor
 8095c84:	61442065 61206174 6920646e 4c43206e     e Data and in CL
 8095c94:	5f45534f 54494157 6c006600 6e66006e     OSE_WAIT.f.ln.fn
 8095ca4:	74656400 006c6961 25000a0d 75303130     .detail....%010u
 8095cb4:	205d0020 3a292800 6f630020 3d206564      .] .(): .code =
 8095cc4:	69250020 74656400 736c6961 00203d20      .%i.details = .
 8095cd4:	64756162 72655300 006c6169 53425355     baud.Serial.USBS
 8095ce4:	61697265 7000316c 6d617261 646d6300     erial1.param.cmd
 8095cf4:	00646900 00646e68 6d727473 6c696600     .id.hnd.strm.fil
 8095d04:	766c0074 6461006c 6e614864 72656c64     t.lvl.addHandler
 8095d14:	6d657200 4865766f 6c646e61 65007265     .removeHandler.e
 8095d24:	486d756e 6c646e61 00737265 4e4f534a     numHandlers.JSON
 8095d34:	65727453 6f4c6d61 6e614867 72656c64     StreamLogHandler
 8095d44:	70706100 6e6f6e00 72740065 00656361     .app.none.trace.
 8095d54:	6f666e69 72617700 7265006e 00726f72     info.warn.error.
 8095d64:	696e6170 6c610063 005a006c 33302b25     panic.all.Z.%+03
 8095d74:	30253a64 25007532 6d252d59 5464252d     d:%02u.%Y-%m-%dT
 8095d84:	253a4825 53253a4d 61007a25 69746373     %H:%M:%S%z.ascti
 8095d94:	0000656d                                me..

08095d98 <_ZTV9IPAddress>:
	...
 8095da0:	0809132b 0809131d 0809131f              +...........

08095dac <_ZTV9USBSerial>:
	...
 8095db4:	080913cd 08091411 080913eb 08091085     ................
 8095dc4:	080913e5 080913cf 080913d7 0809140b     ................
 8095dd4:	080913df 080913c9                       ........

08095ddc <_ZTVN5spark13CellularClassE>:
	...
 8095de4:	0809153d                                =...

08095de8 <_ZN5spark7NetworkE>:
 8095de8:	20003dfc                                .=. 

08095dec <_ZTV11USARTSerial>:
	...
 8095df4:	0808fb39 0808fb3b 080915a7 08091085     9...;...........
 8095e04:	0809158f 0809159b 08091595 080915a1     ................
 8095e14:	08091585 08091589                       ........

08095e1c <_ZTV7TwoWire>:
	...
 8095e24:	0809165d 080916a7 0809167f 0809165f     ]..........._...
 8095e34:	08091687 0809168f 08091697 0809169f     ................

08095e44 <__sf_fake_stdin>:
	...

08095e64 <__sf_fake_stdout>:
	...

08095e84 <__sf_fake_stderr>:
	...

08095ea4 <link_const_variable_data_end>:
 8095ea4:	080802f9 	.word	0x080802f9
 8095ea8:	080803b5 	.word	0x080803b5
 8095eac:	08080957 	.word	0x08080957
 8095eb0:	0808095b 	.word	0x0808095b
 8095eb4:	08080979 	.word	0x08080979
 8095eb8:	0808097d 	.word	0x0808097d
 8095ebc:	08080981 	.word	0x08080981
 8095ec0:	08080985 	.word	0x08080985
 8095ec4:	08080d27 	.word	0x08080d27
 8095ec8:	08080e79 	.word	0x08080e79
 8095ecc:	080812d5 	.word	0x080812d5
 8095ed0:	080812f9 	.word	0x080812f9
 8095ed4:	080812fd 	.word	0x080812fd
 8095ed8:	080814cb 	.word	0x080814cb
 8095edc:	080814cf 	.word	0x080814cf
 8095ee0:	08081fe5 	.word	0x08081fe5
 8095ee4:	0808fb35 	.word	0x0808fb35
 8095ee8:	0808fcbd 	.word	0x0808fcbd
 8095eec:	0808ff45 	.word	0x0808ff45
 8095ef0:	08090149 	.word	0x08090149
 8095ef4:	0809035f 	.word	0x0809035f
 8095ef8:	08090363 	.word	0x08090363
 8095efc:	08090a21 	.word	0x08090a21
 8095f00:	0809113d 	.word	0x0809113d
 8095f04:	0809114d 	.word	0x0809114d
 8095f08:	080911b9 	.word	0x080911b9
 8095f0c:	08091549 	.word	0x08091549
 8095f10:	080917b9 	.word	0x080917b9
 8095f14:	08091815 	.word	0x08091815
 8095f18:	08091895 	.word	0x08091895
 8095f1c:	08091919 	.word	0x08091919
 8095f20:	080919dd 	.word	0x080919dd
 8095f24:	08091aa1 	.word	0x08091aa1

08095f28 <link_constructors_end>:
	...
