
d:/CAR/TelematicsLocal/CybeSe/Telematics/src/telematics/target/telematics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a1a8  08080018  08080018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  0809a1c0  0809a1c0  0002a1c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .backup       00000004  40024000  0809a1c8  00034000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000134  20000400  0809a1cc  00040400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00003b0c  20000538  20000538  00050538  2**3
                  ALLOC
  6 .module_info_suffix 00000028  0809a300  0809a300  0004a300  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  0809a328  0809a328  0004a328  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001b72dd  00000000  00000000  0004a32c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00026b2c  00000000  00000000  00201609  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0004bcf7  00000000  00000000  00228135  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003de8  00000000  00000000  00273e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005fc8  00000000  00000000  00277c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00044090  00000000  00000000  0027dbdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0005f5f0  00000000  00000000  002c1c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b2e6d  00000000  00000000  0032125c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0001220c  00000000  00000000  003d40cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080018 <user_part_module>:
 8080018:	94 63 09 08                                         .c..

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <module_user_pre_init+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <module_user_pre_init+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f013 ff98 	bl	8093f62 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <module_user_pre_init+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <module_user_pre_init+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f013 ffb8 	bl	8093fae <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <module_user_pre_init+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000400 	.word	0x20000400
 8080048:	0809a1cc 	.word	0x0809a1cc
 808004c:	20000534 	.word	0x20000534
 8080050:	20000538 	.word	0x20000538
 8080054:	20004044 	.word	0x20004044
 8080058:	20004044 	.word	0x20004044

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f011 ff49 	bl	8091ef4 <module_user_init_hook>
 8080062:	4b07      	ldr	r3, [pc, #28]	; (8080080 <module_user_init+0x24>)
 8080064:	4c07      	ldr	r4, [pc, #28]	; (8080084 <module_user_init+0x28>)
 8080066:	461e      	mov	r6, r3
 8080068:	1ae4      	subs	r4, r4, r3
 808006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808006c:	2500      	movs	r5, #0
 808006e:	42a5      	cmp	r5, r4
 8080070:	d004      	beq.n	808007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8080076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f8      	b.n	808006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 808007c:	bd70      	pop	{r4, r5, r6, pc}
 808007e:	bf00      	nop
 8080080:	0809a124 	.word	0x0809a124
 8080084:	0809a1b8 	.word	0x0809a1b8

08080088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080088:	f000 b91e 	b.w	80802c8 <setup>

0808008c <module_user_loop>:
}

void module_user_loop() {
 808008c:	b508      	push	{r3, lr}
    loop();
 808008e:	f000 fa49 	bl	8080524 <loop>
    _post_loop();
}
 8080092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 8080096:	f011 beeb 	b.w	8091e70 <_post_loop>

0808009a <_Znwj>:
 808009a:	f011 b855 	b.w	8091148 <malloc>

0808009e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 808009e:	f011 b853 	b.w	8091148 <malloc>

080800a2 <_ZdlPv>:
 80800a2:	f011 b859 	b.w	8091158 <free>

080800a6 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
 80800a6:	f011 b857 	b.w	8091158 <free>

080800aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800aa:	7800      	ldrb	r0, [r0, #0]
 80800ac:	fab0 f080 	clz	r0, r0
 80800b0:	0940      	lsrs	r0, r0, #5
 80800b2:	4770      	bx	lr

080800b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800b4:	2301      	movs	r3, #1
 80800b6:	7003      	strb	r3, [r0, #0]
 80800b8:	4770      	bx	lr
	...

080800bc <_ZN11ArduinoJson9Internals21DynamicJsonBufferBaseINS0_16DefaultAllocatorEED1Ev>:
  enum { EmptyBlockSize = sizeof(EmptyBlock) };

  DynamicJsonBufferBase(size_t initialSize = 256)
      : _head(NULL), _nextBlockCapacity(initialSize) {}

  ~DynamicJsonBufferBase() {
 80800bc:	b538      	push	{r3, r4, r5, lr}
    clear();
  }
 80800be:	4b07      	ldr	r3, [pc, #28]	; (80800dc <_ZN11ArduinoJson9Internals21DynamicJsonBufferBaseINS0_16DefaultAllocatorEED1Ev+0x20>)
  enum { EmptyBlockSize = sizeof(EmptyBlock) };

  DynamicJsonBufferBase(size_t initialSize = 256)
      : _head(NULL), _nextBlockCapacity(initialSize) {}

  ~DynamicJsonBufferBase() {
 80800c0:	4604      	mov	r4, r0
    clear();
  }
 80800c2:	6003      	str	r3, [r0, #0]
  }

  // Resets the buffer.
  // USE WITH CAUTION: this invalidates all previously allocated data
  void clear() {
    Block* currentBlock = _head;
 80800c4:	6880      	ldr	r0, [r0, #8]
    while (currentBlock != NULL) {
 80800c6:	b130      	cbz	r0, 80800d6 <_ZN11ArduinoJson9Internals21DynamicJsonBufferBaseINS0_16DefaultAllocatorEED1Ev+0x1a>
      _nextBlockCapacity = currentBlock->capacity;
 80800c8:	6843      	ldr	r3, [r0, #4]
 80800ca:	60e3      	str	r3, [r4, #12]
      Block* nextBlock = currentBlock->next;
 80800cc:	6805      	ldr	r5, [r0, #0]
 public:
  void* allocate(size_t size) {
    return malloc(size);
  }
  void deallocate(void* pointer) {
    free(pointer);
 80800ce:	f011 f843 	bl	8091158 <free>
    Block* currentBlock = _head;
    while (currentBlock != NULL) {
      _nextBlockCapacity = currentBlock->capacity;
      Block* nextBlock = currentBlock->next;
      _allocator.deallocate(currentBlock);
      currentBlock = nextBlock;
 80800d2:	4628      	mov	r0, r5
 80800d4:	e7f7      	b.n	80800c6 <_ZN11ArduinoJson9Internals21DynamicJsonBufferBaseINS0_16DefaultAllocatorEED1Ev+0xa>
  DynamicJsonBufferBase(size_t initialSize = 256)
      : _head(NULL), _nextBlockCapacity(initialSize) {}

  ~DynamicJsonBufferBase() {
    clear();
  }
 80800d6:	4620      	mov	r0, r4
 80800d8:	bd38      	pop	{r3, r4, r5, pc}
 80800da:	bf00      	nop
 80800dc:	080963b0 	.word	0x080963b0

080800e0 <_ZN11ArduinoJson9Internals10ValueSaverIRKNS_9JsonArrayEvE4saveINS_11JsonVariantEEEbPNS_10JsonBufferERT_S4_.isra.12>:
#include <string.h>  // for strcmp

namespace ArduinoJson {

inline JsonVariant::JsonVariant(const JsonArray &array) {
  if (array.success()) {
 80800e0:	680b      	ldr	r3, [r1, #0]
 80800e2:	2b00      	cmp	r3, #0
    _type = Internals::JSON_ARRAY;
    _content.asArray = const_cast<JsonArray *>(&array);
  } else {
    _type = Internals::JSON_UNDEFINED;
 80800e4:	bf12      	itee	ne
 80800e6:	2306      	movne	r3, #6
 80800e8:	2300      	moveq	r3, #0
 80800ea:	2100      	moveq	r1, #0

template <typename Source, typename Enable = void>
struct ValueSaver {
  template <typename Destination>
  static bool save(JsonBuffer*, Destination& destination, Source source) {
    destination = source;
 80800ec:	7003      	strb	r3, [r0, #0]
 80800ee:	6081      	str	r1, [r0, #8]
    return true;
  }
 80800f0:	2001      	movs	r0, #1
 80800f2:	4770      	bx	lr

080800f4 <_ZN11ArduinoJson9Internals21DynamicJsonBufferBaseINS0_16DefaultAllocatorEE5allocEj>:
    for (const Block* b = _head; b; b = b->next) total += b->size;
    return total;
  }

  // Allocates the specified amount of bytes in the buffer
  virtual void* alloc(size_t bytes) {
 80800f4:	b570      	push	{r4, r5, r6, lr}
 80800f6:	6882      	ldr	r2, [r0, #8]
 80800f8:	4604      	mov	r4, r0
 80800fa:	460d      	mov	r5, r1
    return String(this);
  }

 private:
  void alignNextAlloc() {
    if (_head) _head->size = this->round_size_up(_head->size);
 80800fc:	b122      	cbz	r2, 8080108 <_ZN11ArduinoJson9Internals21DynamicJsonBufferBaseINS0_16DefaultAllocatorEE5allocEj+0x14>
 80800fe:	6893      	ldr	r3, [r2, #8]
 8080100:	3303      	adds	r3, #3
 8080102:	f023 0303 	bic.w	r3, r3, #3
 8080106:	6093      	str	r3, [r2, #8]
 8080108:	68a2      	ldr	r2, [r4, #8]
  }

  bool canAllocInHead(size_t bytes) const {
    return _head != NULL && _head->size + bytes <= _head->capacity;
 808010a:	b14a      	cbz	r2, 8080120 <_ZN11ArduinoJson9Internals21DynamicJsonBufferBaseINS0_16DefaultAllocatorEE5allocEj+0x2c>
 808010c:	6893      	ldr	r3, [r2, #8]
 808010e:	6850      	ldr	r0, [r2, #4]
 8080110:	18e9      	adds	r1, r5, r3
 8080112:	4281      	cmp	r1, r0
 8080114:	d804      	bhi.n	8080120 <_ZN11ArduinoJson9Internals21DynamicJsonBufferBaseINS0_16DefaultAllocatorEE5allocEj+0x2c>
  }

  void* allocInHead(size_t bytes) {
    void* p = _head->data + _head->size;
 8080116:	f102 000c 	add.w	r0, r2, #12
    _head->size += bytes;
 808011a:	6091      	str	r1, [r2, #8]
  }

  // Allocates the specified amount of bytes in the buffer
  virtual void* alloc(size_t bytes) {
    alignNextAlloc();
    return canAllocInHead(bytes) ? allocInHead(bytes) : allocInNewBlock(bytes);
 808011c:	4418      	add	r0, r3
 808011e:	bd70      	pop	{r4, r5, r6, pc}
    _head->size += bytes;
    return p;
  }

  void* allocInNewBlock(size_t bytes) {
    size_t capacity = _nextBlockCapacity;
 8080120:	68e6      	ldr	r6, [r4, #12]
 8080122:	42ae      	cmp	r6, r5
 8080124:	bf38      	it	cc
 8080126:	462e      	movcc	r6, r5
namespace ArduinoJson {
namespace Internals {
class DefaultAllocator {
 public:
  void* allocate(size_t size) {
    return malloc(size);
 8080128:	f106 000c 	add.w	r0, r6, #12
 808012c:	f011 f80c 	bl	8091148 <malloc>
  }

  bool addNewBlock(size_t capacity) {
    size_t bytes = EmptyBlockSize + capacity;
    Block* block = static_cast<Block*>(_allocator.allocate(bytes));
    if (block == NULL) return false;
 8080130:	b178      	cbz	r0, 8080152 <_ZN11ArduinoJson9Internals21DynamicJsonBufferBaseINS0_16DefaultAllocatorEE5allocEj+0x5e>
    block->capacity = capacity;
    block->size = 0;
 8080132:	2300      	movs	r3, #0
 8080134:	6083      	str	r3, [r0, #8]

  bool addNewBlock(size_t capacity) {
    size_t bytes = EmptyBlockSize + capacity;
    Block* block = static_cast<Block*>(_allocator.allocate(bytes));
    if (block == NULL) return false;
    block->capacity = capacity;
 8080136:	6046      	str	r6, [r0, #4]
    block->size = 0;
    block->next = _head;
 8080138:	68a3      	ldr	r3, [r4, #8]
  bool canAllocInHead(size_t bytes) const {
    return _head != NULL && _head->size + bytes <= _head->capacity;
  }

  void* allocInHead(size_t bytes) {
    void* p = _head->data + _head->size;
 808013a:	f100 020c 	add.w	r2, r0, #12
    size_t bytes = EmptyBlockSize + capacity;
    Block* block = static_cast<Block*>(_allocator.allocate(bytes));
    if (block == NULL) return false;
    block->capacity = capacity;
    block->size = 0;
    block->next = _head;
 808013e:	6003      	str	r3, [r0, #0]

  void* allocInNewBlock(size_t bytes) {
    size_t capacity = _nextBlockCapacity;
    if (bytes > capacity) capacity = bytes;
    if (!addNewBlock(capacity)) return NULL;
    _nextBlockCapacity *= 2;
 8080140:	68e3      	ldr	r3, [r4, #12]
    Block* block = static_cast<Block*>(_allocator.allocate(bytes));
    if (block == NULL) return false;
    block->capacity = capacity;
    block->size = 0;
    block->next = _head;
    _head = block;
 8080142:	60a0      	str	r0, [r4, #8]

  void* allocInNewBlock(size_t bytes) {
    size_t capacity = _nextBlockCapacity;
    if (bytes > capacity) capacity = bytes;
    if (!addNewBlock(capacity)) return NULL;
    _nextBlockCapacity *= 2;
 8080144:	005b      	lsls	r3, r3, #1
 8080146:	60e3      	str	r3, [r4, #12]
  bool canAllocInHead(size_t bytes) const {
    return _head != NULL && _head->size + bytes <= _head->capacity;
  }

  void* allocInHead(size_t bytes) {
    void* p = _head->data + _head->size;
 8080148:	6883      	ldr	r3, [r0, #8]
    _head->size += bytes;
 808014a:	441d      	add	r5, r3
 808014c:	6085      	str	r5, [r0, #8]
  void* allocInNewBlock(size_t bytes) {
    size_t capacity = _nextBlockCapacity;
    if (bytes > capacity) capacity = bytes;
    if (!addNewBlock(capacity)) return NULL;
    _nextBlockCapacity *= 2;
    return allocInHead(bytes);
 808014e:	18d0      	adds	r0, r2, r3
 8080150:	bd70      	pop	{r4, r5, r6, pc}

  // Allocates the specified amount of bytes in the buffer
  virtual void* alloc(size_t bytes) {
    alignNextAlloc();
    return canAllocInHead(bytes) ? allocInHead(bytes) : allocInNewBlock(bytes);
  }
 8080152:	bd70      	pop	{r4, r5, r6, pc}

08080154 <_ZN11ArduinoJson9Internals19JsonBufferAllocatednwEjPNS_10JsonBufferE>:
namespace ArduinoJson {
namespace Internals {

class JsonBufferAllocated {
 public:
  void *operator new(size_t n, JsonBuffer *jsonBuffer) throw() {
 8080154:	4602      	mov	r2, r0
    if (!jsonBuffer) return NULL;
 8080156:	4608      	mov	r0, r1
 8080158:	b119      	cbz	r1, 8080162 <_ZN11ArduinoJson9Internals19JsonBufferAllocatednwEjPNS_10JsonBufferE+0xe>
    return jsonBuffer->alloc(n);
 808015a:	680b      	ldr	r3, [r1, #0]
 808015c:	4611      	mov	r1, r2
 808015e:	681b      	ldr	r3, [r3, #0]
 8080160:	4718      	bx	r3
  }
 8080162:	4770      	bx	lr

08080164 <_ZN11ArduinoJson9JsonArray6removeEj>:
  // Creates a JsonObject and adds a reference at the end of the array.
  // It's a shortcut for JsonBuffer::createObject() and JsonArray::add()
  JsonObject &createNestedObject();

  // Removes element at specified index.
  void remove(size_t index) {
 8080164:	6842      	ldr	r2, [r0, #4]
 8080166:	4613      	mov	r3, r2
    if (_node) _node = _node->next;
    return *this;
  }

  ListIterator<T> &operator+=(size_t distance) {
    while (_node && distance) {
 8080168:	b183      	cbz	r3, 808018c <_ZN11ArduinoJson9JsonArray6removeEj+0x28>
 808016a:	b111      	cbz	r1, 8080172 <_ZN11ArduinoJson9JsonArray6removeEj+0xe>
      _node = _node->next;
 808016c:	681b      	ldr	r3, [r3, #0]
      --distance;
 808016e:	3901      	subs	r1, #1
 8080170:	e7fa      	b.n	8080168 <_ZN11ArduinoJson9JsonArray6removeEj+0x4>
  }

  void remove(iterator it) {
    node_type *nodeToRemove = it._node;
    if (!nodeToRemove) return;
    if (nodeToRemove == _firstNode) {
 8080172:	4293      	cmp	r3, r2
 8080174:	d102      	bne.n	808017c <_ZN11ArduinoJson9JsonArray6removeEj+0x18>
      _firstNode = nodeToRemove->next;
 8080176:	681b      	ldr	r3, [r3, #0]
 8080178:	6043      	str	r3, [r0, #4]
 808017a:	4770      	bx	lr
    } else {
      for (node_type *node = _firstNode; node; node = node->next)
 808017c:	b132      	cbz	r2, 808018c <_ZN11ArduinoJson9JsonArray6removeEj+0x28>
        if (node->next == nodeToRemove) node->next = nodeToRemove->next;
 808017e:	6811      	ldr	r1, [r2, #0]
 8080180:	428b      	cmp	r3, r1
 8080182:	bf04      	itt	eq
 8080184:	6819      	ldreq	r1, [r3, #0]
 8080186:	6011      	streq	r1, [r2, #0]
    node_type *nodeToRemove = it._node;
    if (!nodeToRemove) return;
    if (nodeToRemove == _firstNode) {
      _firstNode = nodeToRemove->next;
    } else {
      for (node_type *node = _firstNode; node; node = node->next)
 8080188:	6812      	ldr	r2, [r2, #0]
 808018a:	e7f7      	b.n	808017c <_ZN11ArduinoJson9JsonArray6removeEj+0x18>
 808018c:	4770      	bx	lr
	...

08080190 <_ZN11ArduinoJson9JsonArray7invalidEv>:
  using Internals::List<JsonVariant>::remove;

  // Returns a reference an invalid JsonArray.
  // This object is meant to replace a NULL pointer.
  // This is used when memory allocation or JSON parsing fail.
  static JsonArray &invalid() {
 8080190:	b538      	push	{r3, r4, r5, lr}
    static JsonArray instance(NULL);
 8080192:	4d08      	ldr	r5, [pc, #32]	; (80801b4 <_ZN11ArduinoJson9JsonArray7invalidEv+0x24>)
 8080194:	682b      	ldr	r3, [r5, #0]
 8080196:	f013 0401 	ands.w	r4, r3, #1
 808019a:	d109      	bne.n	80801b0 <_ZN11ArduinoJson9JsonArray7invalidEv+0x20>
 808019c:	4628      	mov	r0, r5
 808019e:	f7ff ff84 	bl	80800aa <__cxa_guard_acquire>
 80801a2:	b128      	cbz	r0, 80801b0 <_ZN11ArduinoJson9JsonArray7invalidEv+0x20>
  // Creates an empty List<T> attached to a JsonBuffer.
  // The JsonBuffer allows to allocate new nodes.
  // When buffer is NULL, the List is not able to grow and success() returns
  // false. This is used to identify bad memory allocations and parsing
  // failures.
  explicit List(JsonBuffer *buffer) : _buffer(buffer), _firstNode(NULL) {}
 80801a4:	4b04      	ldr	r3, [pc, #16]	; (80801b8 <_ZN11ArduinoJson9JsonArray7invalidEv+0x28>)
 80801a6:	4628      	mov	r0, r5
 80801a8:	601c      	str	r4, [r3, #0]
 80801aa:	605c      	str	r4, [r3, #4]
 80801ac:	f7ff ff82 	bl	80800b4 <__cxa_guard_release>
    return instance;
  }
 80801b0:	4801      	ldr	r0, [pc, #4]	; (80801b8 <_ZN11ArduinoJson9JsonArray7invalidEv+0x28>)
 80801b2:	bd38      	pop	{r3, r4, r5, pc}
 80801b4:	20000548 	.word	0x20000548
 80801b8:	2000054c 	.word	0x2000054c

080801bc <_ZN11ArduinoJson10JsonBuffer11createArrayEv>:

#pragma once

#include "Deserialization/JsonParser.hpp"

inline ArduinoJson::JsonArray &ArduinoJson::JsonBuffer::createArray() {
 80801bc:	b510      	push	{r4, lr}
  JsonArray *ptr = new (this) JsonArray(this);
 80801be:	4601      	mov	r1, r0

#pragma once

#include "Deserialization/JsonParser.hpp"

inline ArduinoJson::JsonArray &ArduinoJson::JsonBuffer::createArray() {
 80801c0:	4604      	mov	r4, r0
  JsonArray *ptr = new (this) JsonArray(this);
 80801c2:	2008      	movs	r0, #8
 80801c4:	f7ff ffc6 	bl	8080154 <_ZN11ArduinoJson9Internals19JsonBufferAllocatednwEjPNS_10JsonBufferE>
 80801c8:	b118      	cbz	r0, 80801d2 <_ZN11ArduinoJson10JsonBuffer11createArrayEv+0x16>
 80801ca:	2300      	movs	r3, #0
 80801cc:	6004      	str	r4, [r0, #0]
 80801ce:	6043      	str	r3, [r0, #4]
 80801d0:	bd10      	pop	{r4, pc}
  return ptr ? *ptr : JsonArray::invalid();
 80801d2:	f7ff ffdd 	bl	8080190 <_ZN11ArduinoJson9JsonArray7invalidEv>
}
 80801d6:	bd10      	pop	{r4, pc}

080801d8 <_ZN11ArduinoJson9JsonArray17createNestedArrayEv>:
#include "JsonArraySubscript.hpp"
#include "JsonObject.hpp"

namespace ArduinoJson {

inline JsonArray &JsonArray::createNestedArray() {
 80801d8:	b538      	push	{r3, r4, r5, lr}
 80801da:	4605      	mov	r5, r0
  if (!_buffer) return JsonArray::invalid();
 80801dc:	6800      	ldr	r0, [r0, #0]
 80801de:	b910      	cbnz	r0, 80801e6 <_ZN11ArduinoJson9JsonArray17createNestedArrayEv+0xe>
 80801e0:	f7ff ffd6 	bl	8080190 <_ZN11ArduinoJson9JsonArray7invalidEv>
 80801e4:	bd38      	pop	{r3, r4, r5, pc}
  JsonArray &array = _buffer->createArray();
 80801e6:	f7ff ffe9 	bl	80801bc <_ZN11ArduinoJson10JsonBuffer11createArrayEv>
    for (node_type *node = _firstNode; node; node = node->next) nodeCount++;
    return nodeCount;
  }

  iterator add() {
    node_type *newNode = new (_buffer) node_type();
 80801ea:	6829      	ldr	r1, [r5, #0]
 80801ec:	4604      	mov	r4, r0
 80801ee:	2018      	movs	r0, #24
 80801f0:	f7ff ffb0 	bl	8080154 <_ZN11ArduinoJson9Internals19JsonBufferAllocatednwEjPNS_10JsonBufferE>
 80801f4:	b110      	cbz	r0, 80801fc <_ZN11ArduinoJson9JsonArray17createNestedArrayEv+0x24>

// A node for a singly-linked list.
// Used by List<T> and its iterators.
template <typename T>
struct ListNode : public Internals::JsonBufferAllocated {
  ListNode() throw() : next(NULL) {}
 80801f6:	2300      	movs	r3, #0
 80801f8:	6003      	str	r3, [r0, #0]
  template <typename Print>
  friend class Internals::JsonSerializer;

 public:
  // Creates an uninitialized JsonVariant
  JsonVariant() : _type(Internals::JSON_UNDEFINED) {}
 80801fa:	7203      	strb	r3, [r0, #8]

    if (_firstNode) {
 80801fc:	686b      	ldr	r3, [r5, #4]
 80801fe:	b12b      	cbz	r3, 808020c <_ZN11ArduinoJson9JsonArray17createNestedArrayEv+0x34>
      node_type *lastNode = _firstNode;
      while (lastNode->next) lastNode = lastNode->next;
 8080200:	681a      	ldr	r2, [r3, #0]
 8080202:	b10a      	cbz	r2, 8080208 <_ZN11ArduinoJson9JsonArray17createNestedArrayEv+0x30>
 8080204:	4613      	mov	r3, r2
 8080206:	e7fb      	b.n	8080200 <_ZN11ArduinoJson9JsonArray17createNestedArrayEv+0x28>
      lastNode->next = newNode;
 8080208:	6018      	str	r0, [r3, #0]
 808020a:	e000      	b.n	808020e <_ZN11ArduinoJson9JsonArray17createNestedArrayEv+0x36>
    } else {
      _firstNode = newNode;
 808020c:	6068      	str	r0, [r5, #4]
  }

  template <typename TValueRef>
  bool add_impl(TValueRef value) {
    iterator it = Internals::List<JsonVariant>::add();
    if (it == end()) return false;
 808020e:	b118      	cbz	r0, 8080218 <_ZN11ArduinoJson9JsonArray17createNestedArrayEv+0x40>
    return Internals::ValueSaver<TValueRef>::save(_buffer, *it, value);
 8080210:	4621      	mov	r1, r4
 8080212:	3008      	adds	r0, #8
 8080214:	f7ff ff64 	bl	80800e0 <_ZN11ArduinoJson9Internals10ValueSaverIRKNS_9JsonArrayEvE4saveINS_11JsonVariantEEEbPNS_10JsonBufferERT_S4_.isra.12>
  add(array);
  return array;
 8080218:	4620      	mov	r0, r4
}
 808021a:	bd38      	pop	{r3, r4, r5, pc}

0808021c <_ZN11ArduinoJson9JsonArray8set_implIPiEEbjT_>:
  }
#endif

 private:
  template <typename TValueRef>
  bool set_impl(size_t index, TValueRef value) {
 808021c:	6840      	ldr	r0, [r0, #4]
    if (_node) _node = _node->next;
    return *this;
  }

  ListIterator<T> &operator+=(size_t distance) {
    while (_node && distance) {
 808021e:	b160      	cbz	r0, 808023a <_ZN11ArduinoJson9JsonArray8set_implIPiEEbjT_+0x1e>
 8080220:	b111      	cbz	r1, 8080228 <_ZN11ArduinoJson9JsonArray8set_implIPiEEbjT_+0xc>
      _node = _node->next;
 8080222:	6800      	ldr	r0, [r0, #0]
      --distance;
 8080224:	3901      	subs	r1, #1
 8080226:	e7fa      	b.n	808021e <_ZN11ArduinoJson9JsonArray8set_implIPiEEbjT_+0x2>

template <typename Source, typename Enable = void>
struct ValueSaver {
  template <typename Destination>
  static bool save(JsonBuffer*, Destination& destination, Source source) {
    destination = source;
 8080228:	3200      	adds	r2, #0
 808022a:	f04f 0303 	mov.w	r3, #3
 808022e:	bf18      	it	ne
 8080230:	2201      	movne	r2, #1
 8080232:	7203      	strb	r3, [r0, #8]
 8080234:	6102      	str	r2, [r0, #16]
 8080236:	6141      	str	r1, [r0, #20]
    iterator it = begin() += index;
    if (it == end()) return false;
    return Internals::ValueSaver<TValueRef>::save(_buffer, *it, value);
 8080238:	2001      	movs	r0, #1
  }
 808023a:	4770      	bx	lr

0808023c <_ZN11ArduinoJson10JsonObject7findKeyIPKcEENS_9Internals12ListIteratorINS_8JsonPairEEET_>:
  }

 private:
  // Returns the list node that matches the specified key.
  template <typename TStringRef>
  iterator findKey(TStringRef key) {
 808023c:	b538      	push	{r3, r4, r5, lr}
 808023e:	460d      	mov	r5, r1
 8080240:	6844      	ldr	r4, [r0, #4]
    iterator it;
    for (it = begin(); it != end(); ++it) {
 8080242:	b17c      	cbz	r4, 8080264 <_ZN11ArduinoJson10JsonObject7findKeyIPKcEENS_9Internals12ListIteratorINS_8JsonPairEEET_+0x28>
      if (Internals::StringTraits<TStringRef>::equals(key, it->key)) break;
 8080244:	68a1      	ldr	r1, [r4, #8]
    }
  };

  static bool equals(const TChar* str, const char* expected) {
    const char* actual = reinterpret_cast<const char*>(str);
    if (!actual || !expected) return actual == expected;
 8080246:	b105      	cbz	r5, 808024a <_ZN11ArduinoJson10JsonObject7findKeyIPKcEENS_9Internals12ListIteratorINS_8JsonPairEEET_+0xe>
 8080248:	b919      	cbnz	r1, 8080252 <_ZN11ArduinoJson10JsonObject7findKeyIPKcEENS_9Internals12ListIteratorINS_8JsonPairEEET_+0x16>
 808024a:	1b4b      	subs	r3, r1, r5
 808024c:	4258      	negs	r0, r3
 808024e:	4158      	adcs	r0, r3
 8080250:	e005      	b.n	808025e <_ZN11ArduinoJson10JsonObject7findKeyIPKcEENS_9Internals12ListIteratorINS_8JsonPairEEET_+0x22>
    return strcmp(actual, expected) == 0;
 8080252:	4628      	mov	r0, r5
 8080254:	f013 fecf 	bl	8093ff6 <strcmp>
 8080258:	fab0 f080 	clz	r0, r0
 808025c:	0940      	lsrs	r0, r0, #5
 808025e:	b908      	cbnz	r0, 8080264 <_ZN11ArduinoJson10JsonObject7findKeyIPKcEENS_9Internals12ListIteratorINS_8JsonPairEEET_+0x28>
  bool operator!=(const ListIterator<T> &other) const {
    return _node != other._node;
  }

  ListIterator<T> &operator++() {
    if (_node) _node = _node->next;
 8080260:	6824      	ldr	r4, [r4, #0]
 8080262:	e7ee      	b.n	8080242 <_ZN11ArduinoJson10JsonObject7findKeyIPKcEENS_9Internals12ListIteratorINS_8JsonPairEEET_+0x6>
    }
    return it;
  }
 8080264:	4620      	mov	r0, r4
 8080266:	bd38      	pop	{r3, r4, r5, pc}

08080268 <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3addEv>:
    size_t nodeCount = 0;
    for (node_type *node = _firstNode; node; node = node->next) nodeCount++;
    return nodeCount;
  }

  iterator add() {
 8080268:	b510      	push	{r4, lr}
 808026a:	4604      	mov	r4, r0
    node_type *newNode = new (_buffer) node_type();
 808026c:	6801      	ldr	r1, [r0, #0]
 808026e:	2020      	movs	r0, #32
 8080270:	f7ff ff70 	bl	8080154 <_ZN11ArduinoJson9Internals19JsonBufferAllocatednwEjPNS_10JsonBufferE>
 8080274:	b110      	cbz	r0, 808027c <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3addEv+0x14>
 8080276:	2300      	movs	r3, #0
 8080278:	6003      	str	r3, [r0, #0]
 808027a:	7403      	strb	r3, [r0, #16]

    if (_firstNode) {
 808027c:	6863      	ldr	r3, [r4, #4]
 808027e:	b12b      	cbz	r3, 808028c <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3addEv+0x24>
      node_type *lastNode = _firstNode;
      while (lastNode->next) lastNode = lastNode->next;
 8080280:	681a      	ldr	r2, [r3, #0]
 8080282:	b10a      	cbz	r2, 8080288 <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3addEv+0x20>
 8080284:	4613      	mov	r3, r2
 8080286:	e7fb      	b.n	8080280 <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3addEv+0x18>
      lastNode->next = newNode;
 8080288:	6018      	str	r0, [r3, #0]
 808028a:	bd10      	pop	{r4, pc}
    } else {
      _firstNode = newNode;
 808028c:	6060      	str	r0, [r4, #4]
    }

    return iterator(newNode);
  }
 808028e:	bd10      	pop	{r4, pc}

08080290 <_ZN11ArduinoJson10JsonObject22createNestedArray_implIPKcEERNS_9JsonArrayET_>:
#include "JsonObjectSubscript.hpp"

namespace ArduinoJson {

template <typename TStringRef>
inline JsonArray &JsonObject::createNestedArray_impl(TStringRef key) {
 8080290:	b570      	push	{r4, r5, r6, lr}
 8080292:	4606      	mov	r6, r0
  if (!_buffer) return JsonArray::invalid();
 8080294:	6800      	ldr	r0, [r0, #0]
#include "JsonObjectSubscript.hpp"

namespace ArduinoJson {

template <typename TStringRef>
inline JsonArray &JsonObject::createNestedArray_impl(TStringRef key) {
 8080296:	460d      	mov	r5, r1
  if (!_buffer) return JsonArray::invalid();
 8080298:	b910      	cbnz	r0, 80802a0 <_ZN11ArduinoJson10JsonObject22createNestedArray_implIPKcEERNS_9JsonArrayET_+0x10>
 808029a:	f7ff ff79 	bl	8080190 <_ZN11ArduinoJson9JsonArray7invalidEv>
 808029e:	bd70      	pop	{r4, r5, r6, pc}
  JsonArray &array = _buffer->createArray();
 80802a0:	f7ff ff8c 	bl	80801bc <_ZN11ArduinoJson10JsonBuffer11createArrayEv>
 80802a4:	4604      	mov	r4, r0
  }

  template <typename TStringRef, typename TValueRef>
  bool set_impl(TStringRef key, TValueRef value) {
    // ignore null key
    if (Internals::StringTraits<TStringRef>::is_null(key)) return false;
 80802a6:	b16d      	cbz	r5, 80802c4 <_ZN11ArduinoJson10JsonObject22createNestedArray_implIPKcEERNS_9JsonArrayET_+0x34>

    // search a matching key
    iterator it = findKey<TStringRef>(key);
 80802a8:	4629      	mov	r1, r5
 80802aa:	4630      	mov	r0, r6
 80802ac:	f7ff ffc6 	bl	808023c <_ZN11ArduinoJson10JsonObject7findKeyIPKcEENS_9Internals12ListIteratorINS_8JsonPairEEET_>
    if (it == end()) {
 80802b0:	b920      	cbnz	r0, 80802bc <_ZN11ArduinoJson10JsonObject22createNestedArray_implIPKcEERNS_9JsonArrayET_+0x2c>
      // add the key
      it = Internals::List<JsonPair>::add();
 80802b2:	4630      	mov	r0, r6
 80802b4:	f7ff ffd8 	bl	8080268 <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3addEv>
      if (it == end()) return false;
 80802b8:	b120      	cbz	r0, 80802c4 <_ZN11ArduinoJson10JsonObject22createNestedArray_implIPKcEERNS_9JsonArrayET_+0x34>
template <typename Char>
struct ValueSaver<
    Char*, typename EnableIf<!StringTraits<Char*>::should_duplicate>::type> {
  template <typename Destination>
  static bool save(JsonBuffer*, Destination& dest, Char* source) {
    dest = reinterpret_cast<const char*>(source);
 80802ba:	6085      	str	r5, [r0, #8]
          Internals::ValueSaver<TStringRef>::save(_buffer, it->key, key);
      if (!key_ok) return false;
    }

    // save the value
    return Internals::ValueSaver<TValueRef>::save(_buffer, it->value, value);
 80802bc:	4621      	mov	r1, r4
 80802be:	3010      	adds	r0, #16
 80802c0:	f7ff ff0e 	bl	80800e0 <_ZN11ArduinoJson9Internals10ValueSaverIRKNS_9JsonArrayEvE4saveINS_11JsonVariantEEEbPNS_10JsonBufferERT_S4_.isra.12>
  set(key, array);
  return array;
 80802c4:	4620      	mov	r0, r4
}
 80802c6:	bd70      	pop	{r4, r5, r6, pc}

080802c8 <setup>:
JsonArray* DOF_data;
//create Gps object
Adafruit_GPS gps = Adafruit_GPS(&Serial1);
int timer;

void setup() {
 80802c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80802ca:	b0e1      	sub	sp, #388	; 0x184
    
    Serial.begin(9600); //start Serial output
 80802cc:	f011 fece 	bl	809206c <_Z16_fetch_usbserialv>
 80802d0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80802d4:	f011 feb0 	bl	8092038 <_ZN9USBSerial5beginEl>
    delay(5000);        //wait for user, needs to be updated
 80802d8:	f241 3088 	movw	r0, #5000	; 0x1388
 80802dc:	f011 fd50 	bl	8091d80 <delay>

    pinMode(D6, OUTPUT);
 80802e0:	2101      	movs	r1, #1
 80802e2:	2006      	movs	r0, #6
 80802e4:	f012 f838 	bl	8092358 <pinMode>
    digitalWrite(D6,LOW);
 80802e8:	2100      	movs	r1, #0
 80802ea:	2006      	movs	r0, #6
 80802ec:	f012 f845 	bl	809237a <digitalWrite>
    gps.begin(9600);
 80802f0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80802f4:	486f      	ldr	r0, [pc, #444]	; (80804b4 <setup+0x1ec>)
 80802f6:	f010 f935 	bl	8090564 <_ZN12Adafruit_GPS5beginEm>
    gps.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
 80802fa:	496f      	ldr	r1, [pc, #444]	; (80804b8 <setup+0x1f0>)
 80802fc:	486d      	ldr	r0, [pc, #436]	; (80804b4 <setup+0x1ec>)
 80802fe:	f010 f93a 	bl	8090576 <_ZN12Adafruit_GPS11sendCommandEPKc>
    delay(500);
 8080302:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8080306:	f011 fd3b 	bl	8091d80 <delay>
    // Default is 1 Hz update rate
    gps.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ);
 808030a:	496c      	ldr	r1, [pc, #432]	; (80804bc <setup+0x1f4>)
 808030c:	4869      	ldr	r0, [pc, #420]	; (80804b4 <setup+0x1ec>)
 808030e:	f010 f932 	bl	8090576 <_ZN12Adafruit_GPS11sendCommandEPKc>
    delay(500);
 8080312:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8080316:	f011 fd33 	bl	8091d80 <delay>

    //initialize the json parser
    static JsonObject& root_temp = jsonBuffer.createObject();
 808031a:	4869      	ldr	r0, [pc, #420]	; (80804c0 <setup+0x1f8>)
 808031c:	4f69      	ldr	r7, [pc, #420]	; (80804c4 <setup+0x1fc>)
 808031e:	6803      	ldr	r3, [r0, #0]
 8080320:	f013 0401 	ands.w	r4, r3, #1
 8080324:	d11c      	bne.n	8080360 <setup+0x98>
 8080326:	f7ff fec0 	bl	80800aa <__cxa_guard_acquire>
 808032a:	b1c8      	cbz	r0, 8080360 <setup+0x98>

inline ArduinoJson::JsonObject &ArduinoJson::JsonBuffer::createObject() {
  JsonObject *ptr = new (this) JsonObject(this);
 808032c:	4d66      	ldr	r5, [pc, #408]	; (80804c8 <setup+0x200>)
 808032e:	2008      	movs	r0, #8
 8080330:	4629      	mov	r1, r5
 8080332:	f7ff ff0f 	bl	8080154 <_ZN11ArduinoJson9Internals19JsonBufferAllocatednwEjPNS_10JsonBufferE>
 8080336:	b110      	cbz	r0, 808033e <setup+0x76>
  // Creates an empty List<T> attached to a JsonBuffer.
  // The JsonBuffer allows to allocate new nodes.
  // When buffer is NULL, the List is not able to grow and success() returns
  // false. This is used to identify bad memory allocations and parsing
  // failures.
  explicit List(JsonBuffer *buffer) : _buffer(buffer), _firstNode(NULL) {}
 8080338:	6005      	str	r5, [r0, #0]
 808033a:	6044      	str	r4, [r0, #4]
 808033c:	e00c      	b.n	8080358 <setup+0x90>

  // Returns a reference an invalid JsonObject.
  // This object is meant to replace a NULL pointer.
  // This is used when memory allocation or JSON parsing fail.
  static JsonObject& invalid() {
    static JsonObject instance(NULL);
 808033e:	4e63      	ldr	r6, [pc, #396]	; (80804cc <setup+0x204>)
 8080340:	4c63      	ldr	r4, [pc, #396]	; (80804d0 <setup+0x208>)
 8080342:	6833      	ldr	r3, [r6, #0]
 8080344:	f013 0501 	ands.w	r5, r3, #1
 8080348:	d105      	bne.n	8080356 <setup+0x8e>
 808034a:	4630      	mov	r0, r6
 808034c:	f7ff fead 	bl	80800aa <__cxa_guard_acquire>
 8080350:	2800      	cmp	r0, #0
 8080352:	f040 80a8 	bne.w	80804a6 <setup+0x1de>
  return ptr ? *ptr : JsonObject::invalid();
 8080356:	485e      	ldr	r0, [pc, #376]	; (80804d0 <setup+0x208>)
 8080358:	6038      	str	r0, [r7, #0]
 808035a:	4859      	ldr	r0, [pc, #356]	; (80804c0 <setup+0x1f8>)
 808035c:	f7ff feaa 	bl	80800b4 <__cxa_guard_release>
    root=&root_temp;
 8080360:	683b      	ldr	r3, [r7, #0]
 8080362:	4c5c      	ldr	r4, [pc, #368]	; (80804d4 <setup+0x20c>)

    static JsonArray& CAN_data_temp = root->createNestedArray("CAN_data");
 8080364:	4d5c      	ldr	r5, [pc, #368]	; (80804d8 <setup+0x210>)
    gps.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ);
    delay(500);

    //initialize the json parser
    static JsonObject& root_temp = jsonBuffer.createObject();
    root=&root_temp;
 8080366:	6023      	str	r3, [r4, #0]

    static JsonArray& CAN_data_temp = root->createNestedArray("CAN_data");
 8080368:	682b      	ldr	r3, [r5, #0]
 808036a:	4e5c      	ldr	r6, [pc, #368]	; (80804dc <setup+0x214>)
 808036c:	f013 0f01 	tst.w	r3, #1
 8080370:	d10b      	bne.n	808038a <setup+0xc2>
 8080372:	4628      	mov	r0, r5
 8080374:	f7ff fe99 	bl	80800aa <__cxa_guard_acquire>
 8080378:	b138      	cbz	r0, 808038a <setup+0xc2>
  }
  // JsonArray& createNestedArray(TKey);
  // TKey = char*, const char*, char[], const char[], const FlashStringHelper*
  template <typename TString>
  JsonArray& createNestedArray(TString* key) {
    return createNestedArray_impl<TString*>(key);
 808037a:	4959      	ldr	r1, [pc, #356]	; (80804e0 <setup+0x218>)
 808037c:	6820      	ldr	r0, [r4, #0]
 808037e:	f7ff ff87 	bl	8080290 <_ZN11ArduinoJson10JsonObject22createNestedArray_implIPKcEERNS_9JsonArrayET_>
 8080382:	6030      	str	r0, [r6, #0]
 8080384:	4628      	mov	r0, r5
 8080386:	f7ff fe95 	bl	80800b4 <__cxa_guard_release>
    CAN_data=&CAN_data_temp;
 808038a:	6832      	ldr	r2, [r6, #0]
 808038c:	4b55      	ldr	r3, [pc, #340]	; (80804e4 <setup+0x21c>)

    static JsonArray& GPS_data_temp = root->createNestedArray("GPS_data");
 808038e:	4d56      	ldr	r5, [pc, #344]	; (80804e8 <setup+0x220>)
    //initialize the json parser
    static JsonObject& root_temp = jsonBuffer.createObject();
    root=&root_temp;

    static JsonArray& CAN_data_temp = root->createNestedArray("CAN_data");
    CAN_data=&CAN_data_temp;
 8080390:	601a      	str	r2, [r3, #0]

    static JsonArray& GPS_data_temp = root->createNestedArray("GPS_data");
 8080392:	682b      	ldr	r3, [r5, #0]
 8080394:	4e55      	ldr	r6, [pc, #340]	; (80804ec <setup+0x224>)
 8080396:	f013 0f01 	tst.w	r3, #1
 808039a:	d10b      	bne.n	80803b4 <setup+0xec>
 808039c:	4628      	mov	r0, r5
 808039e:	f7ff fe84 	bl	80800aa <__cxa_guard_acquire>
 80803a2:	b138      	cbz	r0, 80803b4 <setup+0xec>
 80803a4:	4952      	ldr	r1, [pc, #328]	; (80804f0 <setup+0x228>)
 80803a6:	6820      	ldr	r0, [r4, #0]
 80803a8:	f7ff ff72 	bl	8080290 <_ZN11ArduinoJson10JsonObject22createNestedArray_implIPKcEERNS_9JsonArrayET_>
 80803ac:	6030      	str	r0, [r6, #0]
 80803ae:	4628      	mov	r0, r5
 80803b0:	f7ff fe80 	bl	80800b4 <__cxa_guard_release>
    GPS_data=&GPS_data_temp;
 80803b4:	6832      	ldr	r2, [r6, #0]
 80803b6:	4b4f      	ldr	r3, [pc, #316]	; (80804f4 <setup+0x22c>)

    static JsonArray& DOF_data_temp = root->createNestedArray("DOF_data");
 80803b8:	4d4f      	ldr	r5, [pc, #316]	; (80804f8 <setup+0x230>)

    static JsonArray& CAN_data_temp = root->createNestedArray("CAN_data");
    CAN_data=&CAN_data_temp;

    static JsonArray& GPS_data_temp = root->createNestedArray("GPS_data");
    GPS_data=&GPS_data_temp;
 80803ba:	601a      	str	r2, [r3, #0]

    static JsonArray& DOF_data_temp = root->createNestedArray("DOF_data");
 80803bc:	682b      	ldr	r3, [r5, #0]
 80803be:	4e4f      	ldr	r6, [pc, #316]	; (80804fc <setup+0x234>)
 80803c0:	f013 0f01 	tst.w	r3, #1
 80803c4:	d10b      	bne.n	80803de <setup+0x116>
 80803c6:	4628      	mov	r0, r5
 80803c8:	f7ff fe6f 	bl	80800aa <__cxa_guard_acquire>
 80803cc:	b138      	cbz	r0, 80803de <setup+0x116>
 80803ce:	494c      	ldr	r1, [pc, #304]	; (8080500 <setup+0x238>)
 80803d0:	6820      	ldr	r0, [r4, #0]
 80803d2:	f7ff ff5d 	bl	8080290 <_ZN11ArduinoJson10JsonObject22createNestedArray_implIPKcEERNS_9JsonArrayET_>
 80803d6:	6030      	str	r0, [r6, #0]
 80803d8:	4628      	mov	r0, r5
 80803da:	f7ff fe6b 	bl	80800b4 <__cxa_guard_release>
    DOF_data=&DOF_data_temp;
 80803de:	4b49      	ldr	r3, [pc, #292]	; (8080504 <setup+0x23c>)
 80803e0:	6832      	ldr	r2, [r6, #0]

    WITH_LOCK(Serial)
    {

        secretStuff->generateKey();
 80803e2:	4c49      	ldr	r4, [pc, #292]	; (8080508 <setup+0x240>)

    static JsonArray& GPS_data_temp = root->createNestedArray("GPS_data");
    GPS_data=&GPS_data_temp;

    static JsonArray& DOF_data_temp = root->createNestedArray("DOF_data");
    DOF_data=&DOF_data_temp;
 80803e4:	601a      	str	r2, [r3, #0]

    WITH_LOCK(Serial)
 80803e6:	f011 fe41 	bl	809206c <_Z16_fetch_usbserialv>
	virtual void blockOnOverrun(bool);

#if PLATFORM_THREADING
	os_mutex_recursive_t get_mutex()
	{
		return os_mutex_recursive_t(system_internal(2, nullptr));
 80803ea:	2100      	movs	r1, #0
 80803ec:	2002      	movs	r0, #2
 80803ee:	f010 fe6b 	bl	80910c8 <system_internal>
	}

	void lock()
	{
#if PLATFORM_THREADING
		os_mutex_recursive_lock(get_mutex());
 80803f2:	f010 fce1 	bl	8090db8 <os_mutex_recursive_lock>
    {

        secretStuff->generateKey();
 80803f6:	6820      	ldr	r0, [r4, #0]
 80803f8:	f00f fa30 	bl	808f85c <_ZN5Crypt11generateKeyEv>
        unsigned char output[128];
        unsigned char in[128];
        unsigned char put[128];

        memset(input, 0, 128);
        memset(output, 0, 128);
 80803fc:	ad20      	add	r5, sp, #128	; 0x80
        unsigned char input[128];
        unsigned char output[128];
        unsigned char in[128];
        unsigned char put[128];

        memset(input, 0, 128);
 80803fe:	2280      	movs	r2, #128	; 0x80
 8080400:	2100      	movs	r1, #0
 8080402:	4668      	mov	r0, sp
 8080404:	f013 fdd3 	bl	8093fae <memset>
        memset(output, 0, 128);
        memset(in, 0, 128);
        memset(put, 0, 128);
 8080408:	af40      	add	r7, sp, #256	; 0x100
        unsigned char output[128];
        unsigned char in[128];
        unsigned char put[128];

        memset(input, 0, 128);
        memset(output, 0, 128);
 808040a:	2280      	movs	r2, #128	; 0x80
 808040c:	2100      	movs	r1, #0
 808040e:	4628      	mov	r0, r5
 8080410:	f013 fdcd 	bl	8093fae <memset>
        memset(in, 0, 128);
        memset(put, 0, 128);
 8080414:	2280      	movs	r2, #128	; 0x80
 8080416:	2100      	movs	r1, #0
 8080418:	4638      	mov	r0, r7
 808041a:	f013 fdc8 	bl	8093fae <memset>

        memcpy(input,"hello",strlen("hello"));
 808041e:	4b3b      	ldr	r3, [pc, #236]	; (808050c <setup+0x244>)

        Serial.print("Encrypted Data: ");
        secretStuff->encryptData(input,output);
        for(int i = 0; i < 16; i++){
 8080420:	2600      	movs	r6, #0
        memset(input, 0, 128);
        memset(output, 0, 128);
        memset(in, 0, 128);
        memset(put, 0, 128);

        memcpy(input,"hello",strlen("hello"));
 8080422:	6818      	ldr	r0, [r3, #0]
 8080424:	791b      	ldrb	r3, [r3, #4]
 8080426:	9000      	str	r0, [sp, #0]
 8080428:	f88d 3004 	strb.w	r3, [sp, #4]

        Serial.print("Encrypted Data: ");
 808042c:	f011 fe1e 	bl	809206c <_Z16_fetch_usbserialv>
 8080430:	4937      	ldr	r1, [pc, #220]	; (8080510 <setup+0x248>)
 8080432:	f011 fada 	bl	80919ea <_ZN5Print5printEPKc>
        secretStuff->encryptData(input,output);
 8080436:	462a      	mov	r2, r5
 8080438:	4669      	mov	r1, sp
 808043a:	6820      	ldr	r0, [r4, #0]
 808043c:	f00f fa35 	bl	808f8aa <_ZN5Crypt11encryptDataEPhS0_>
        for(int i = 0; i < 16; i++){
            Serial.printf("%d",output[i]);
 8080440:	f011 fe14 	bl	809206c <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 8080444:	5dab      	ldrb	r3, [r5, r6]
 8080446:	4a33      	ldr	r2, [pc, #204]	; (8080514 <setup+0x24c>)
 8080448:	2100      	movs	r1, #0

        memcpy(input,"hello",strlen("hello"));

        Serial.print("Encrypted Data: ");
        secretStuff->encryptData(input,output);
        for(int i = 0; i < 16; i++){
 808044a:	3601      	adds	r6, #1
 808044c:	f011 fbf4 	bl	8091c38 <_ZN5Print11printf_implEbPKcz>
 8080450:	2e10      	cmp	r6, #16
 8080452:	d1f5      	bne.n	8080440 <setup+0x178>
            Serial.printf("%d",output[i]);
        }

        Serial.println();
 8080454:	f011 fe0a 	bl	809206c <_Z16_fetch_usbserialv>
 8080458:	f011 face 	bl	80919f8 <_ZN5Print7printlnEv>

        Serial.print("Decrypted Data: ");
 808045c:	f011 fe06 	bl	809206c <_Z16_fetch_usbserialv>
 8080460:	492d      	ldr	r1, [pc, #180]	; (8080518 <setup+0x250>)
 8080462:	f011 fac2 	bl	80919ea <_ZN5Print5printEPKc>
        secretStuff->decryptData(output,put);
 8080466:	6820      	ldr	r0, [r4, #0]
 8080468:	463a      	mov	r2, r7
 808046a:	4629      	mov	r1, r5
 808046c:	f00f fa2a 	bl	808f8c4 <_ZN5Crypt11decryptDataEPhS0_>
        for(int i = 0; i < 16; i++){
 8080470:	2400      	movs	r4, #0
            Serial.printf("%c",put[i]);
 8080472:	f011 fdfb 	bl	809206c <_Z16_fetch_usbserialv>
 8080476:	5d3b      	ldrb	r3, [r7, r4]
 8080478:	4a28      	ldr	r2, [pc, #160]	; (808051c <setup+0x254>)
 808047a:	2100      	movs	r1, #0

        Serial.println();

        Serial.print("Decrypted Data: ");
        secretStuff->decryptData(output,put);
        for(int i = 0; i < 16; i++){
 808047c:	3401      	adds	r4, #1
 808047e:	f011 fbdb 	bl	8091c38 <_ZN5Print11printf_implEbPKcz>
 8080482:	2c10      	cmp	r4, #16
 8080484:	d1f5      	bne.n	8080472 <setup+0x1aa>
            Serial.printf("%c",put[i]);
        }
        Serial.println();   
 8080486:	f011 fdf1 	bl	809206c <_Z16_fetch_usbserialv>
 808048a:	f011 fab5 	bl	80919f8 <_ZN5Print7printlnEv>
	virtual void blockOnOverrun(bool);

#if PLATFORM_THREADING
	os_mutex_recursive_t get_mutex()
	{
		return os_mutex_recursive_t(system_internal(2, nullptr));
 808048e:	2100      	movs	r1, #0
 8080490:	2002      	movs	r0, #2
 8080492:	f010 fe19 	bl	80910c8 <system_internal>
	}

	void unlock()
	{
#if PLATFORM_THREADING
		os_mutex_recursive_unlock(get_mutex());
 8080496:	f010 fc97 	bl	8090dc8 <os_mutex_recursive_unlock>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 808049a:	f010 fc35 	bl	8090d08 <HAL_Timer_Get_Milli_Seconds>

    }

    timer = millis();
 808049e:	4b20      	ldr	r3, [pc, #128]	; (8080520 <setup+0x258>)
 80804a0:	6018      	str	r0, [r3, #0]
}
 80804a2:	b061      	add	sp, #388	; 0x184
 80804a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

  // Returns a reference an invalid JsonObject.
  // This object is meant to replace a NULL pointer.
  // This is used when memory allocation or JSON parsing fail.
  static JsonObject& invalid() {
    static JsonObject instance(NULL);
 80804a6:	4630      	mov	r0, r6
 80804a8:	6025      	str	r5, [r4, #0]
 80804aa:	6065      	str	r5, [r4, #4]
 80804ac:	f7ff fe02 	bl	80800b4 <__cxa_guard_release>
 80804b0:	4620      	mov	r0, r4
 80804b2:	e751      	b.n	8080358 <setup+0x90>
 80804b4:	20000564 	.word	0x20000564
 80804b8:	080963b4 	.word	0x080963b4
 80804bc:	080963e6 	.word	0x080963e6
 80804c0:	200005e8 	.word	0x200005e8
 80804c4:	200005e0 	.word	0x200005e0
 80804c8:	200005d0 	.word	0x200005d0
 80804cc:	2000053c 	.word	0x2000053c
 80804d0:	20000540 	.word	0x20000540
 80804d4:	2000055c 	.word	0x2000055c
 80804d8:	200005e4 	.word	0x200005e4
 80804dc:	20000560 	.word	0x20000560
 80804e0:	080963f7 	.word	0x080963f7
 80804e4:	200005c4 	.word	0x200005c4
 80804e8:	20000558 	.word	0x20000558
 80804ec:	200005bc 	.word	0x200005bc
 80804f0:	08096400 	.word	0x08096400
 80804f4:	20000554 	.word	0x20000554
 80804f8:	200005c0 	.word	0x200005c0
 80804fc:	200005cc 	.word	0x200005cc
 8080500:	08096409 	.word	0x08096409
 8080504:	200005b8 	.word	0x200005b8
 8080508:	20002a88 	.word	0x20002a88
 808050c:	08096412 	.word	0x08096412
 8080510:	08096418 	.word	0x08096418
 8080514:	08096502 	.word	0x08096502
 8080518:	08096429 	.word	0x08096429
 808051c:	0809643a 	.word	0x0809643a
 8080520:	200005c8 	.word	0x200005c8

08080524 <loop>:
void loop() {
 8080524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080528:	b085      	sub	sp, #20

    //update gps
    while (Serial1.available()) {
 808052a:	f011 fe6b 	bl	8092204 <_Z22__fetch_global_Serial1v>
 808052e:	6803      	ldr	r3, [r0, #0]
 8080530:	691b      	ldr	r3, [r3, #16]
 8080532:	4798      	blx	r3
 8080534:	b178      	cbz	r0, 8080556 <loop+0x32>
        char c = gps.read();
 8080536:	488a      	ldr	r0, [pc, #552]	; (8080760 <loop+0x23c>)
 8080538:	f00f ff8e 	bl	8090458 <_ZN12Adafruit_GPS4readEv>
        if (gps.newNMEAreceived()) {
 808053c:	4888      	ldr	r0, [pc, #544]	; (8080760 <loop+0x23c>)
 808053e:	f010 f81d 	bl	809057c <_ZN12Adafruit_GPS15newNMEAreceivedEv>
 8080542:	2800      	cmp	r0, #0
 8080544:	d0f1      	beq.n	808052a <loop+0x6>
            gps.parse(gps.lastNMEA());
 8080546:	4886      	ldr	r0, [pc, #536]	; (8080760 <loop+0x23c>)
 8080548:	f010 f81e 	bl	8090588 <_ZN12Adafruit_GPS8lastNMEAEv>
 808054c:	4601      	mov	r1, r0
 808054e:	4884      	ldr	r0, [pc, #528]	; (8080760 <loop+0x23c>)
 8080550:	f010 f834 	bl	80905bc <_ZN12Adafruit_GPS5parseEPc>
 8080554:	e7e9      	b.n	808052a <loop+0x6>
 8080556:	f010 fbd7 	bl	8090d08 <HAL_Timer_Get_Milli_Seconds>
        }
    }

     if (millis() - timer > 2000) {
 808055a:	4c82      	ldr	r4, [pc, #520]	; (8080764 <loop+0x240>)
 808055c:	6823      	ldr	r3, [r4, #0]
 808055e:	1ac0      	subs	r0, r0, r3
 8080560:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8080564:	d935      	bls.n	80805d2 <loop+0xae>
 8080566:	f010 fbcf 	bl	8090d08 <HAL_Timer_Get_Milli_Seconds>
        timer=millis();
 808056a:	6020      	str	r0, [r4, #0]
        Serial.println("Global Positioning System");
 808056c:	f011 fd7e 	bl	809206c <_Z16_fetch_usbserialv>
 8080570:	497d      	ldr	r1, [pc, #500]	; (8080768 <loop+0x244>)
 8080572:	f011 fa4d 	bl	8091a10 <_ZN5Print7printlnEPKc>
        Serial.println("======================================================");
 8080576:	f011 fd79 	bl	809206c <_Z16_fetch_usbserialv>
 808057a:	497c      	ldr	r1, [pc, #496]	; (808076c <loop+0x248>)
 808057c:	f011 fa48 	bl	8091a10 <_ZN5Print7printlnEPKc>
        Serial.print("Latitude: "); Serial.println(gps.latitudeDegrees);
 8080580:	f011 fd74 	bl	809206c <_Z16_fetch_usbserialv>
 8080584:	497a      	ldr	r1, [pc, #488]	; (8080770 <loop+0x24c>)
 8080586:	f011 fa30 	bl	80919ea <_ZN5Print5printEPKc>
 808058a:	f011 fd6f 	bl	809206c <_Z16_fetch_usbserialv>
 808058e:	4d74      	ldr	r5, [pc, #464]	; (8080760 <loop+0x23c>)
 8080590:	4606      	mov	r6, r0
 8080592:	69a8      	ldr	r0, [r5, #24]
 8080594:	f012 fba6 	bl	8092ce4 <__aeabi_f2d>
 8080598:	2402      	movs	r4, #2
 808059a:	4602      	mov	r2, r0
 808059c:	460b      	mov	r3, r1
 808059e:	4630      	mov	r0, r6
 80805a0:	9400      	str	r4, [sp, #0]
 80805a2:	f011 fb3b 	bl	8091c1c <_ZN5Print7printlnEdi>
        Serial.print("Longitude: "); Serial.println(gps.longitudeDegrees);
 80805a6:	f011 fd61 	bl	809206c <_Z16_fetch_usbserialv>
 80805aa:	4972      	ldr	r1, [pc, #456]	; (8080774 <loop+0x250>)
 80805ac:	f011 fa1d 	bl	80919ea <_ZN5Print5printEPKc>
 80805b0:	f011 fd5c 	bl	809206c <_Z16_fetch_usbserialv>
 80805b4:	4606      	mov	r6, r0
 80805b6:	69e8      	ldr	r0, [r5, #28]
 80805b8:	f012 fb94 	bl	8092ce4 <__aeabi_f2d>
 80805bc:	9400      	str	r4, [sp, #0]
 80805be:	4602      	mov	r2, r0
 80805c0:	460b      	mov	r3, r1
 80805c2:	4630      	mov	r0, r6
 80805c4:	f011 fb2a 	bl	8091c1c <_ZN5Print7printlnEdi>
        Serial.println("");
 80805c8:	f011 fd50 	bl	809206c <_Z16_fetch_usbserialv>
 80805cc:	496a      	ldr	r1, [pc, #424]	; (8080778 <loop+0x254>)
 80805ce:	f011 fa1f 	bl	8091a10 <_ZN5Print7printlnEPKc>
     }
    

    os_mutex_lock(dof_recv_mutex);    
 80805d2:	4f6a      	ldr	r7, [pc, #424]	; (808077c <loop+0x258>)
    os_mutex_lock(gps_recv_mutex);
 80805d4:	4d6a      	ldr	r5, [pc, #424]	; (8080780 <loop+0x25c>)
        Serial.print("Longitude: "); Serial.println(gps.longitudeDegrees);
        Serial.println("");
     }
    

    os_mutex_lock(dof_recv_mutex);    
 80805d6:	6838      	ldr	r0, [r7, #0]
    os_mutex_lock(gps_recv_mutex);
    os_mutex_lock(can_recv_mutex);   
 80805d8:	4e6a      	ldr	r6, [pc, #424]	; (8080784 <loop+0x260>)
        Serial.print("Longitude: "); Serial.println(gps.longitudeDegrees);
        Serial.println("");
     }
    

    os_mutex_lock(dof_recv_mutex);    
 80805da:	f010 fbd5 	bl	8090d88 <os_mutex_lock>
    os_mutex_lock(gps_recv_mutex);
 80805de:	6828      	ldr	r0, [r5, #0]
 80805e0:	f010 fbd2 	bl	8090d88 <os_mutex_lock>
    os_mutex_lock(can_recv_mutex);   
 80805e4:	6830      	ldr	r0, [r6, #0]
 80805e6:	f010 fbcf 	bl	8090d88 <os_mutex_lock>

    Serial.println("CAN_frame: ");
 80805ea:	f011 fd3f 	bl	809206c <_Z16_fetch_usbserialv>
 80805ee:	4966      	ldr	r1, [pc, #408]	; (8080788 <loop+0x264>)
 80805f0:	f011 fa0e 	bl	8091a10 <_ZN5Print7printlnEPKc>
 80805f4:	46bb      	mov	fp, r7
    for(int i=0; i< 9; i++){
        Serial.print((char)can_recv_buffer[0][i]);
 80805f6:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 80807b4 <loop+0x290>
        new_can_flag=0;
 80805fa:	4f64      	ldr	r7, [pc, #400]	; (808078c <loop+0x268>)
    os_mutex_lock(dof_recv_mutex);    
    os_mutex_lock(gps_recv_mutex);
    os_mutex_lock(can_recv_mutex);   

    Serial.println("CAN_frame: ");
    for(int i=0; i< 9; i++){
 80805fc:	2400      	movs	r4, #0
        Serial.print((char)can_recv_buffer[0][i]);
 80805fe:	f011 fd35 	bl	809206c <_Z16_fetch_usbserialv>
 8080602:	f819 1024 	ldrb.w	r1, [r9, r4, lsl #2]
    os_mutex_lock(dof_recv_mutex);    
    os_mutex_lock(gps_recv_mutex);
    os_mutex_lock(can_recv_mutex);   

    Serial.println("CAN_frame: ");
    for(int i=0; i< 9; i++){
 8080606:	3401      	adds	r4, #1
        Serial.print((char)can_recv_buffer[0][i]);
 8080608:	f011 f9f3 	bl	80919f2 <_ZN5Print5printEc>
        new_can_flag=0;
 808060c:	2300      	movs	r3, #0
    os_mutex_lock(dof_recv_mutex);    
    os_mutex_lock(gps_recv_mutex);
    os_mutex_lock(can_recv_mutex);   

    Serial.println("CAN_frame: ");
    for(int i=0; i< 9; i++){
 808060e:	2c09      	cmp	r4, #9
        Serial.print((char)can_recv_buffer[0][i]);
        new_can_flag=0;
 8080610:	703b      	strb	r3, [r7, #0]
 8080612:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 80807b4 <loop+0x290>
 8080616:	f8df 8174 	ldr.w	r8, [pc, #372]	; 808078c <loop+0x268>
    os_mutex_lock(dof_recv_mutex);    
    os_mutex_lock(gps_recv_mutex);
    os_mutex_lock(can_recv_mutex);   

    Serial.println("CAN_frame: ");
    for(int i=0; i< 9; i++){
 808061a:	d1f0      	bne.n	80805fe <loop+0xda>
        Serial.print((char)can_recv_buffer[0][i]);
        new_can_flag=0;
    }
    Serial.println();
 808061c:	f011 fd26 	bl	809206c <_Z16_fetch_usbserialv>
 8080620:	f011 f9ea 	bl	80919f8 <_ZN5Print7printlnEv>

    //meesage type
    byte message_id;
    message_id = message_id || (new_can_flag << 3);
 8080624:	f898 2000 	ldrb.w	r2, [r8]
 8080628:	2a00      	cmp	r2, #0
 808062a:	f000 8091 	beq.w	8080750 <loop+0x22c>
    message_id = message_id || (new_can_flag << 2);
    message_id = message_id || (new_can_flag << 1);
 808062e:	2401      	movs	r4, #1

    (*root)["messageid"] = message_id;
 8080630:	4b57      	ldr	r3, [pc, #348]	; (8080790 <loop+0x26c>)
  bool set_impl(TStringRef key, TValueRef value) {
    // ignore null key
    if (Internals::StringTraits<TStringRef>::is_null(key)) return false;

    // search a matching key
    iterator it = findKey<TStringRef>(key);
 8080632:	4f58      	ldr	r7, [pc, #352]	; (8080794 <loop+0x270>)
 8080634:	f8d3 9000 	ldr.w	r9, [r3]
 8080638:	4639      	mov	r1, r7
 808063a:	4648      	mov	r0, r9
 808063c:	f7ff fdfe 	bl	808023c <_ZN11ArduinoJson10JsonObject7findKeyIPKcEENS_9Internals12ListIteratorINS_8JsonPairEEET_>
    if (it == end()) {
 8080640:	b920      	cbnz	r0, 808064c <loop+0x128>
      // add the key
      it = Internals::List<JsonPair>::add();
 8080642:	4648      	mov	r0, r9
 8080644:	f7ff fe10 	bl	8080268 <_ZN11ArduinoJson9Internals4ListINS_8JsonPairEE3addEv>
      if (it == end()) return false;
 8080648:	b130      	cbz	r0, 8080658 <loop+0x134>
 808064a:	6087      	str	r7, [r0, #8]

template <typename Source, typename Enable = void>
struct ValueSaver {
  template <typename Destination>
  static bool save(JsonBuffer*, Destination& destination, Source source) {
    destination = source;
 808064c:	2304      	movs	r3, #4
 808064e:	7403      	strb	r3, [r0, #16]
 8080650:	b2e2      	uxtb	r2, r4
 8080652:	2300      	movs	r3, #0
 8080654:	e9c0 2306 	strd	r2, r3, [r0, #24]

    
    if(new_dof_flag){
 8080658:	4f4f      	ldr	r7, [pc, #316]	; (8080798 <loop+0x274>)
 808065a:	783b      	ldrb	r3, [r7, #0]
 808065c:	b1cb      	cbz	r3, 8080692 <loop+0x16e>
        for(int i =0; i < dof_frames_in_buffer; i++)
 808065e:	4b4f      	ldr	r3, [pc, #316]	; (808079c <loop+0x278>)
        {
            DOF_data->createNestedArray(); 
 8080660:	f8df 9148 	ldr.w	r9, [pc, #328]	; 80807ac <loop+0x288>
 8080664:	2400      	movs	r4, #0

    (*root)["messageid"] = message_id;

    
    if(new_dof_flag){
        for(int i =0; i < dof_frames_in_buffer; i++)
 8080666:	681a      	ldr	r2, [r3, #0]
 8080668:	9303      	str	r3, [sp, #12]
 808066a:	4294      	cmp	r4, r2
 808066c:	da0f      	bge.n	808068e <loop+0x16a>
        {
            DOF_data->createNestedArray(); 
 808066e:	f8d9 0000 	ldr.w	r0, [r9]
 8080672:	f7ff fdb1 	bl	80801d8 <_ZN11ArduinoJson9JsonArray17createNestedArrayEv>
  //
  // bool add(size_t index, TValue);
  // TValue = char*, const char*, const FlashStringHelper*
  template <typename T>
  bool set(size_t index, T *value) {
    return set_impl<T *>(index, value);
 8080676:	4b4a      	ldr	r3, [pc, #296]	; (80807a0 <loop+0x27c>)
 8080678:	2224      	movs	r2, #36	; 0x24
 808067a:	fb02 3204 	mla	r2, r2, r4, r3
 808067e:	4621      	mov	r1, r4
 8080680:	f8d9 0000 	ldr.w	r0, [r9]
 8080684:	f7ff fdca 	bl	808021c <_ZN11ArduinoJson9JsonArray8set_implIPiEEbjT_>

    (*root)["messageid"] = message_id;

    
    if(new_dof_flag){
        for(int i =0; i < dof_frames_in_buffer; i++)
 8080688:	3401      	adds	r4, #1
 808068a:	9b03      	ldr	r3, [sp, #12]
 808068c:	e7eb      	b.n	8080666 <loop+0x142>
        {
            DOF_data->createNestedArray(); 
            (*DOF_data)[i]=dof_recv_buffer[i];    
        }
        new_dof_flag = false; 
 808068e:	2300      	movs	r3, #0
 8080690:	703b      	strb	r3, [r7, #0]
    }

    if(new_can_flag){
 8080692:	f898 3000 	ldrb.w	r3, [r8]
 8080696:	b1ab      	cbz	r3, 80806c4 <loop+0x1a0>
        for(int i =0; i < can_frames_in_buffer; i++)
 8080698:	f8df 911c 	ldr.w	r9, [pc, #284]	; 80807b8 <loop+0x294>
        {
            CAN_data->createNestedArray();  
 808069c:	4f41      	ldr	r7, [pc, #260]	; (80807a4 <loop+0x280>)
 808069e:	2400      	movs	r4, #0
        }
        new_dof_flag = false; 
    }

    if(new_can_flag){
        for(int i =0; i < can_frames_in_buffer; i++)
 80806a0:	f8d9 3000 	ldr.w	r3, [r9]
 80806a4:	429c      	cmp	r4, r3
 80806a6:	da0a      	bge.n	80806be <loop+0x19a>
        {
            CAN_data->createNestedArray();  
 80806a8:	6838      	ldr	r0, [r7, #0]
 80806aa:	f7ff fd95 	bl	80801d8 <_ZN11ArduinoJson9JsonArray17createNestedArrayEv>
 80806ae:	eb0a 1244 	add.w	r2, sl, r4, lsl #5
 80806b2:	4621      	mov	r1, r4
 80806b4:	6838      	ldr	r0, [r7, #0]
 80806b6:	f7ff fdb1 	bl	808021c <_ZN11ArduinoJson9JsonArray8set_implIPiEEbjT_>
        }
        new_dof_flag = false; 
    }

    if(new_can_flag){
        for(int i =0; i < can_frames_in_buffer; i++)
 80806ba:	3401      	adds	r4, #1
 80806bc:	e7f0      	b.n	80806a0 <loop+0x17c>
        {
            CAN_data->createNestedArray();  
            (*CAN_data)[i]=can_recv_buffer[i];      
        }
        new_can_flag = false; 
 80806be:	2300      	movs	r3, #0
 80806c0:	f888 3000 	strb.w	r3, [r8]
    }

    if(new_gps_flag){
 80806c4:	4b38      	ldr	r3, [pc, #224]	; (80807a8 <loop+0x284>)
 80806c6:	781a      	ldrb	r2, [r3, #0]
 80806c8:	461f      	mov	r7, r3
 80806ca:	b1ca      	cbz	r2, 8080700 <loop+0x1dc>
        
        for(int i =0; i < gps_frames_in_buffer; i++)
 80806cc:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 80807bc <loop+0x298>
        {
            GPS_data->createNestedArray(); 
 80806d0:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 80807b0 <loop+0x28c>
 80806d4:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 80807c0 <loop+0x29c>
 80806d8:	2400      	movs	r4, #0
        new_can_flag = false; 
    }

    if(new_gps_flag){
        
        for(int i =0; i < gps_frames_in_buffer; i++)
 80806da:	f8da 3000 	ldr.w	r3, [sl]
 80806de:	429c      	cmp	r4, r3
 80806e0:	da0c      	bge.n	80806fc <loop+0x1d8>
        {
            GPS_data->createNestedArray(); 
 80806e2:	f8d8 0000 	ldr.w	r0, [r8]
 80806e6:	f7ff fd77 	bl	80801d8 <_ZN11ArduinoJson9JsonArray17createNestedArrayEv>
 80806ea:	eb09 02c4 	add.w	r2, r9, r4, lsl #3
 80806ee:	4621      	mov	r1, r4
 80806f0:	f8d8 0000 	ldr.w	r0, [r8]
 80806f4:	f7ff fd92 	bl	808021c <_ZN11ArduinoJson9JsonArray8set_implIPiEEbjT_>
        new_can_flag = false; 
    }

    if(new_gps_flag){
        
        for(int i =0; i < gps_frames_in_buffer; i++)
 80806f8:	3401      	adds	r4, #1
 80806fa:	e7ee      	b.n	80806da <loop+0x1b6>
        {
            GPS_data->createNestedArray(); 
            (*GPS_data)[i]=gps_recv_buffer[i];       
        }
        new_gps_flag = false;  
 80806fc:	2300      	movs	r3, #0
 80806fe:	703b      	strb	r3, [r7, #0]
    os_mutex_unlock(mqtt_mutex);
#endif
    //clear arrays
    for(int i =0; i < RECORDS; i++)
    {
        DOF_data->remove(i); 
 8080700:	4f2a      	ldr	r7, [pc, #168]	; (80807ac <loop+0x288>)
 8080702:	2400      	movs	r4, #0
 8080704:	4621      	mov	r1, r4
 8080706:	6838      	ldr	r0, [r7, #0]
    root->prettyPrintTo(mqtt_send_buffer,buflen+1);                 //create send char array
    //awsiot->publish("cart/2",mqtt_send_buffer);                     //aws send new buffer
    os_mutex_unlock(mqtt_mutex);
#endif
    //clear arrays
    for(int i =0; i < RECORDS; i++)
 8080708:	3401      	adds	r4, #1
    {
        DOF_data->remove(i); 
 808070a:	f7ff fd2b 	bl	8080164 <_ZN11ArduinoJson9JsonArray6removeEj>
    root->prettyPrintTo(mqtt_send_buffer,buflen+1);                 //create send char array
    //awsiot->publish("cart/2",mqtt_send_buffer);                     //aws send new buffer
    os_mutex_unlock(mqtt_mutex);
#endif
    //clear arrays
    for(int i =0; i < RECORDS; i++)
 808070e:	2c1e      	cmp	r4, #30
 8080710:	d1f8      	bne.n	8080704 <loop+0x1e0>
    {
        DOF_data->remove(i); 
    }
    for(int i =0; i < RECORDS; i++)
    {
        CAN_data->remove(i);        
 8080712:	4f24      	ldr	r7, [pc, #144]	; (80807a4 <loop+0x280>)
 8080714:	2400      	movs	r4, #0
 8080716:	4621      	mov	r1, r4
 8080718:	6838      	ldr	r0, [r7, #0]
    //clear arrays
    for(int i =0; i < RECORDS; i++)
    {
        DOF_data->remove(i); 
    }
    for(int i =0; i < RECORDS; i++)
 808071a:	3401      	adds	r4, #1
    {
        CAN_data->remove(i);        
 808071c:	f7ff fd22 	bl	8080164 <_ZN11ArduinoJson9JsonArray6removeEj>
    //clear arrays
    for(int i =0; i < RECORDS; i++)
    {
        DOF_data->remove(i); 
    }
    for(int i =0; i < RECORDS; i++)
 8080720:	2c1e      	cmp	r4, #30
 8080722:	d1f8      	bne.n	8080716 <loop+0x1f2>
    {
        CAN_data->remove(i);        
    }       
    for(int i =0; i < RECORDS; i++)
    {
        GPS_data->remove(i);     
 8080724:	4f22      	ldr	r7, [pc, #136]	; (80807b0 <loop+0x28c>)
 8080726:	2400      	movs	r4, #0
 8080728:	4621      	mov	r1, r4
 808072a:	6838      	ldr	r0, [r7, #0]
    }
    for(int i =0; i < RECORDS; i++)
    {
        CAN_data->remove(i);        
    }       
    for(int i =0; i < RECORDS; i++)
 808072c:	3401      	adds	r4, #1
    {
        GPS_data->remove(i);     
 808072e:	f7ff fd19 	bl	8080164 <_ZN11ArduinoJson9JsonArray6removeEj>
    }
    for(int i =0; i < RECORDS; i++)
    {
        CAN_data->remove(i);        
    }       
    for(int i =0; i < RECORDS; i++)
 8080732:	2c1e      	cmp	r4, #30
 8080734:	d1f8      	bne.n	8080728 <loop+0x204>
    {
        GPS_data->remove(i);     
    }
    os_mutex_unlock(dof_recv_mutex);
 8080736:	f8db 0000 	ldr.w	r0, [fp]
 808073a:	f010 fb35 	bl	8090da8 <os_mutex_unlock>
    os_mutex_unlock(gps_recv_mutex);
 808073e:	6828      	ldr	r0, [r5, #0]
 8080740:	f010 fb32 	bl	8090da8 <os_mutex_unlock>
    os_mutex_unlock(can_recv_mutex);
 8080744:	6830      	ldr	r0, [r6, #0]

}
 8080746:	b005      	add	sp, #20
 8080748:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    {
        GPS_data->remove(i);     
    }
    os_mutex_unlock(dof_recv_mutex);
    os_mutex_unlock(gps_recv_mutex);
    os_mutex_unlock(can_recv_mutex);
 808074c:	f010 bb2c 	b.w	8090da8 <os_mutex_unlock>
    Serial.println();

    //meesage type
    byte message_id;
    message_id = message_id || (new_can_flag << 3);
    message_id = message_id || (new_can_flag << 2);
 8080750:	2a00      	cmp	r2, #0
 8080752:	f47f af6c 	bne.w	808062e <loop+0x10a>
    message_id = message_id || (new_can_flag << 1);
 8080756:	1c14      	adds	r4, r2, #0
 8080758:	bf18      	it	ne
 808075a:	2401      	movne	r4, #1
 808075c:	e768      	b.n	8080630 <loop+0x10c>
 808075e:	bf00      	nop
 8080760:	20000564 	.word	0x20000564
 8080764:	200005c8 	.word	0x200005c8
 8080768:	0809643d 	.word	0x0809643d
 808076c:	08096457 	.word	0x08096457
 8080770:	0809648e 	.word	0x0809648e
 8080774:	08096499 	.word	0x08096499
 8080778:	08096b58 	.word	0x08096b58
 808077c:	20002980 	.word	0x20002980
 8080780:	20002e84 	.word	0x20002e84
 8080784:	20002e6c 	.word	0x20002e6c
 8080788:	080964a5 	.word	0x080964a5
 808078c:	2000298c 	.word	0x2000298c
 8080790:	2000055c 	.word	0x2000055c
 8080794:	080964b1 	.word	0x080964b1
 8080798:	20002e68 	.word	0x20002e68
 808079c:	200032c0 	.word	0x200032c0
 80807a0:	20002e88 	.word	0x20002e88
 80807a4:	200005c4 	.word	0x200005c4
 80807a8:	20002a8c 	.word	0x20002a8c
 80807ac:	200005b8 	.word	0x200005b8
 80807b0:	20000554 	.word	0x20000554
 80807b4:	20002aa8 	.word	0x20002aa8
 80807b8:	20002990 	.word	0x20002990
 80807bc:	20002994 	.word	0x20002994
 80807c0:	20002998 	.word	0x20002998

080807c4 <_GLOBAL__sub_I_SystemMode>:
    }
    os_mutex_unlock(dof_recv_mutex);
    os_mutex_unlock(gps_recv_mutex);
    os_mutex_unlock(can_recv_mutex);

}
 80807c4:	b508      	push	{r3, lr}
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80807c6:	f010 fa1f 	bl	8090c08 <HAL_Pin_Map>
#include <ArduinoJson.h>
#include <CarT.h>
//#include <SparkJson.h>


SYSTEM_THREAD(ENABLED);     //setup threading
 80807ca:	2100      	movs	r1, #0
 80807cc:	2001      	movs	r0, #1
 80807ce:	f010 fc73 	bl	80910b8 <system_thread_set_state>

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80807d2:	2003      	movs	r0, #3
 80807d4:	f010 fc60 	bl	8091098 <set_system_mode>
SYSTEM_MODE(MANUAL);        //system mode to disable auto cell connect        
STARTUP(startup_function());//setup stratup function and block everything untill finished
 80807d8:	f00f fab2 	bl	808fd40 <_Z16startup_functionv>
 80807dc:	f010 fa94 	bl	8090d08 <HAL_Timer_Get_Milli_Seconds>

//holds encryption key
unsigned char key[32];
#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)
unsigned long lastSync = millis();
 80807e0:	4b0a      	ldr	r3, [pc, #40]	; (808080c <_GLOBAL__sub_I_SystemMode+0x48>)
int counter = 0;


//create json buffer for parsing data 
DynamicJsonBuffer jsonBuffer;
 80807e2:	490b      	ldr	r1, [pc, #44]	; (8080810 <_GLOBAL__sub_I_SystemMode+0x4c>)
STARTUP(startup_function());//setup stratup function and block everything untill finished

//holds encryption key
unsigned char key[32];
#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)
unsigned long lastSync = millis();
 80807e4:	6018      	str	r0, [r3, #0]

 public:
  enum { EmptyBlockSize = sizeof(EmptyBlock) };

  DynamicJsonBufferBase(size_t initialSize = 256)
      : _head(NULL), _nextBlockCapacity(initialSize) {}
 80807e6:	480b      	ldr	r0, [pc, #44]	; (8080814 <_GLOBAL__sub_I_SystemMode+0x50>)
 80807e8:	4b0b      	ldr	r3, [pc, #44]	; (8080818 <_GLOBAL__sub_I_SystemMode+0x54>)
int counter = 0;


//create json buffer for parsing data 
DynamicJsonBuffer jsonBuffer;
 80807ea:	4a0c      	ldr	r2, [pc, #48]	; (808081c <_GLOBAL__sub_I_SystemMode+0x58>)
 80807ec:	6003      	str	r3, [r0, #0]
 80807ee:	2300      	movs	r3, #0
 80807f0:	6083      	str	r3, [r0, #8]
 80807f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80807f6:	60c3      	str	r3, [r0, #12]
 80807f8:	f011 fe3e 	bl	8092478 <__aeabi_atexit>
JsonObject* root;
JsonArray* CAN_data;
JsonArray* GPS_data;
JsonArray* DOF_data;
//create Gps object
Adafruit_GPS gps = Adafruit_GPS(&Serial1);
 80807fc:	f011 fd02 	bl	8092204 <_Z22__fetch_global_Serial1v>
    }
    os_mutex_unlock(dof_recv_mutex);
    os_mutex_unlock(gps_recv_mutex);
    os_mutex_unlock(can_recv_mutex);

}
 8080800:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
JsonObject* root;
JsonArray* CAN_data;
JsonArray* GPS_data;
JsonArray* DOF_data;
//create Gps object
Adafruit_GPS gps = Adafruit_GPS(&Serial1);
 8080804:	4601      	mov	r1, r0
 8080806:	4806      	ldr	r0, [pc, #24]	; (8080820 <_GLOBAL__sub_I_SystemMode+0x5c>)
 8080808:	f00f bea6 	b.w	8090558 <_ZN12Adafruit_GPSC1EP11USARTSerial>
 808080c:	200005b4 	.word	0x200005b4
 8080810:	080800bd 	.word	0x080800bd
 8080814:	200005d0 	.word	0x200005d0
 8080818:	080963b0 	.word	0x080963b0
 808081c:	20000538 	.word	0x20000538
 8080820:	20000564 	.word	0x20000564

08080824 <_GLOBAL__sub_I__ZN4NmeaC2E6Stringh9NmeaCache>:
 8080824:	f010 b9f0 	b.w	8090c08 <HAL_Pin_Map>

08080828 <_GLOBAL__sub_I__ZN9NmeaCacheC2Ev>:
 8080828:	f010 b9ee 	b.w	8090c08 <HAL_Pin_Map>

0808082c <_GLOBAL__sub_I__ZN5PgtopC2E9NmeaCache>:
 808082c:	f010 b9ec 	b.w	8090c08 <HAL_Pin_Map>

08080830 <_GLOBAL__sub_I__ZN3GpsC2EP11USARTSerial>:
 8080830:	f010 b9ea 	b.w	8090c08 <HAL_Pin_Map>

08080834 <_ZN7LSM9DS14initE14interface_modehh>:
{
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
 8080834:	b530      	push	{r4, r5, lr}
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 8080836:	2402      	movs	r4, #2
	init(interface, xgAddr, mAddr);
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
 8080838:	7001      	strb	r1, [r0, #0]
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;
 808083a:	7083      	strb	r3, [r0, #2]
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 808083c:	2106      	movs	r1, #6
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 808083e:	23f5      	movs	r3, #245	; 0xf5
	settings.accel.enabled = true;
	settings.accel.enableX = true;
	settings.accel.enableY = true;
	settings.accel.enableZ = true;
	// accel scale can be 2, 4, 8, or 16
	settings.accel.scale = 2;
 8080840:	75c4      	strb	r4, [r0, #23]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 8080842:	2404      	movs	r4, #4
}

void LSM9DS1::init(interface_mode interface, uint8_t xgAddr, uint8_t mAddr)
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
 8080844:	7042      	strb	r2, [r0, #1]
	settings.gyro.enabled = true;
	settings.gyro.enableX = true;
	settings.gyro.enableY = true;
	settings.gyro.enableZ = true;
	// gyro scale can be 245, 500, or 2000
	settings.gyro.scale = 245;
 8080846:	80c3      	strh	r3, [r0, #6]
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 8080848:	2201      	movs	r2, #1
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 808084a:	2300      	movs	r3, #0
	settings.gyro.scale = 245;
	// gyro sample rate: value between 1-6
	// 1 = 14.9    4 = 238
	// 2 = 59.5    5 = 476
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
 808084c:	7201      	strb	r1, [r0, #8]
	settings.accel.scale = 2;
	// accel sample rate can be 1-6
	// 1 = 10 Hz    4 = 238 Hz
	// 2 = 50 Hz    5 = 476 Hz
	// 3 = 119 Hz   6 = 952 Hz
	settings.accel.sampleRate = 6;
 808084e:	7601      	strb	r1, [r0, #24]
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
	// mag scale can be 4, 8, 12, or 16
	settings.mag.scale = 4;
 8080850:	f880 4020 	strb.w	r4, [r0, #32]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 8080854:	2103      	movs	r1, #3
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 8080856:	2407      	movs	r4, #7
{
	settings.device.commInterface = interface;
	settings.device.agAddress = xgAddr;
	settings.device.mAddress = mAddr;

	settings.gyro.enabled = true;
 8080858:	7102      	strb	r2, [r0, #4]
	settings.gyro.enableX = true;
 808085a:	7442      	strb	r2, [r0, #17]
	settings.gyro.enableY = true;
 808085c:	7482      	strb	r2, [r0, #18]
	settings.gyro.enableZ = true;
 808085e:	74c2      	strb	r2, [r0, #19]
	settings.gyro.HPFCutoff = 0;
	settings.gyro.flipX = false;
	settings.gyro.flipY = false;
	settings.gyro.flipZ = false;
	settings.gyro.orientation = 0;
	settings.gyro.latchInterrupt = true;
 8080860:	7502      	strb	r2, [r0, #20]

	settings.accel.enabled = true;
 8080862:	7582      	strb	r2, [r0, #22]
	settings.accel.enableX = true;
 8080864:	7642      	strb	r2, [r0, #25]
	settings.accel.enableY = true;
 8080866:	7682      	strb	r2, [r0, #26]
	settings.accel.enableZ = true;
 8080868:	76c2      	strb	r2, [r0, #27]
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;

	settings.mag.enabled = true;
 808086a:	77c2      	strb	r2, [r0, #31]
	// mag data rate can be 0-7
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
 808086c:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
	// 3 = 119     6 = 952
	settings.gyro.sampleRate = 6;
	// gyro cutoff frequency: value between 0-3
	// Actual value of cutoff frequency depends
	// on sample rate.
	settings.gyro.bandwidth = 0;
 8080870:	7243      	strb	r3, [r0, #9]
	settings.gyro.lowPowerEnable = false;
 8080872:	7283      	strb	r3, [r0, #10]
	settings.gyro.HPFEnable = false;
 8080874:	72c3      	strb	r3, [r0, #11]
	// Gyro HPF cutoff frequency: value between 0-9
	// Actual value depends on sample rate. Only applies
	// if gyroHPFEnable is true.
	settings.gyro.HPFCutoff = 0;
 8080876:	7303      	strb	r3, [r0, #12]
	settings.gyro.flipX = false;
 8080878:	7343      	strb	r3, [r0, #13]
	settings.gyro.flipY = false;
 808087a:	7383      	strb	r3, [r0, #14]
	settings.gyro.flipZ = false;
 808087c:	73c3      	strb	r3, [r0, #15]
	settings.gyro.orientation = 0;
 808087e:	7403      	strb	r3, [r0, #16]
	settings.accel.sampleRate = 6;
	// Accel cutoff freqeuncy can be any value between -1 - 3. 
	// -1 = bandwidth determined by sample rate
	// 0 = 408 Hz   2 = 105 Hz
	// 1 = 211 Hz   3 = 50 Hz
	settings.accel.bandwidth = 3;
 8080880:	7701      	strb	r1, [r0, #28]
	settings.accel.highResEnable = false;
 8080882:	7743      	strb	r3, [r0, #29]
	// accelHighResBandwidth can be any value between 0-3
	// LP cutoff is set to a factor of sample rate
	// 0 = ODR/50    2 = ODR/9
	// 1 = ODR/100   3 = ODR/400
	settings.accel.highResBandwidth = 0;
 8080884:	7783      	strb	r3, [r0, #30]
	// 0 = 0.625 Hz  4 = 10 Hz
	// 1 = 1.25 Hz   5 = 20 Hz
	// 2 = 2.5 Hz    6 = 40 Hz
	// 3 = 5 Hz      7 = 80 Hz
	settings.mag.sampleRate = 7;
	settings.mag.tempCompensationEnable = false;
 8080886:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 808088a:	4604      	mov	r4, r0
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
 808088c:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
 8080890:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
 8080894:	4602      	mov	r2, r0
	settings.mag.tempCompensationEnable = false;
	// magPerformance can be any value between 0-3
	// 0 = Low power mode      2 = high performance
	// 1 = medium performance  3 = ultra-high performance
	settings.mag.XYPerformance = 3;
	settings.mag.ZPerformance = 3;
 8080896:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
	settings.mag.lowPowerEnable = false;
 808089a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	// magOperatingMode can be 0-2
	// 0 = continuous conversion
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;
 808089e:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
	{
		gBias[i] = 0;
 80808a2:	2500      	movs	r5, #0
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 80808a4:	3901      	subs	r1, #1
	{
		gBias[i] = 0;
 80808a6:	63e5      	str	r5, [r4, #60]	; 0x3c
		aBias[i] = 0;
 80808a8:	64a5      	str	r5, [r4, #72]	; 0x48
		mBias[i] = 0;
 80808aa:	6565      	str	r5, [r4, #84]	; 0x54
 80808ac:	f102 0202 	add.w	r2, r2, #2
		gBiasRaw[i] = 0;
 80808b0:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
		aBiasRaw[i] = 0;
 80808b4:	f8a2 3064 	strh.w	r3, [r2, #100]	; 0x64
		mBiasRaw[i] = 0;
 80808b8:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
 80808bc:	f104 0404 	add.w	r4, r4, #4
	// 1 = single-conversion
	// 2 = power down
	settings.mag.operatingMode = 0;

	settings.temp.enabled = true;
	for (int i=0; i<3; i++)
 80808c0:	d1f0      	bne.n	80808a4 <_ZN7LSM9DS14initE14interface_modehh+0x70>
		mBias[i] = 0;
		gBiasRaw[i] = 0;
		aBiasRaw[i] = 0;
		mBiasRaw[i] = 0;
	}
	_autoCalc = false;
 80808c2:	f04f 0300 	mov.w	r3, #0
 80808c6:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
 80808ca:	bd30      	pop	{r4, r5, pc}

080808cc <_ZN7LSM9DS1C1Ev>:

#define COMMUNICATION_TIMEOUT 1000 // Set timeout to 1s

float magSensitivity[4] = {0.00014, 0.00029, 0.00043, 0.00058};

LSM9DS1::LSM9DS1()
 80808cc:	b510      	push	{r4, lr}
{
	init(IMU_MODE_I2C, LSM9DS1_AG_ADDR(1), LSM9DS1_M_ADDR(1));
 80808ce:	231e      	movs	r3, #30
 80808d0:	226b      	movs	r2, #107	; 0x6b
 80808d2:	2101      	movs	r1, #1
 80808d4:	f7ff ffae 	bl	8080834 <_ZN7LSM9DS14initE14interface_modehh>
}
 80808d8:	bd10      	pop	{r4, pc}

080808da <_ZN7LSM9DS18calcgResEv>:
	// And write the new register value back into CTRL_REG5_XM:
	mWriteByte(CTRL_REG1_M, temp);
}

void LSM9DS1::calcgRes()
{
 80808da:	b510      	push	{r4, lr}
 80808dc:	4604      	mov	r4, r0
	gRes = ((float) settings.gyro.scale) / 32768.0;
 80808de:	88c0      	ldrh	r0, [r0, #6]
 80808e0:	f012 fe52 	bl	8093588 <__aeabi_ui2f>
 80808e4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 80808e8:	f012 fea6 	bl	8093638 <__aeabi_fmul>
 80808ec:	6760      	str	r0, [r4, #116]	; 0x74
 80808ee:	bd10      	pop	{r4, pc}

080808f0 <_ZN7LSM9DS18calcaResEv>:
}

void LSM9DS1::calcaRes()
{
 80808f0:	b510      	push	{r4, lr}
 80808f2:	4604      	mov	r4, r0
	aRes = ((float) settings.accel.scale) / 32768.0;
 80808f4:	7dc0      	ldrb	r0, [r0, #23]
 80808f6:	f012 fe47 	bl	8093588 <__aeabi_ui2f>
 80808fa:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
 80808fe:	f012 fe9b 	bl	8093638 <__aeabi_fmul>
 8080902:	67a0      	str	r0, [r4, #120]	; 0x78
 8080904:	bd10      	pop	{r4, pc}
	...

08080908 <_ZN7LSM9DS18calcmResEv>:
}

void LSM9DS1::calcmRes()
{
	//mRes = ((float) settings.mag.scale) / 32768.0;
	switch (settings.mag.scale)
 8080908:	f890 3020 	ldrb.w	r3, [r0, #32]
 808090c:	3b04      	subs	r3, #4
 808090e:	2b0c      	cmp	r3, #12
 8080910:	d814      	bhi.n	808093c <_ZN7LSM9DS18calcmResEv+0x34>
 8080912:	e8df f003 	tbb	[pc, r3]
 8080916:	1307      	.short	0x1307
 8080918:	130a1313 	.word	0x130a1313
 808091c:	130d1313 	.word	0x130d1313
 8080920:	1313      	.short	0x1313
 8080922:	10          	.byte	0x10
 8080923:	00          	.byte	0x00
	{
	case 4:
		mRes = magSensitivity[0];
 8080924:	4b06      	ldr	r3, [pc, #24]	; (8080940 <_ZN7LSM9DS18calcmResEv+0x38>)
 8080926:	681b      	ldr	r3, [r3, #0]
 8080928:	e007      	b.n	808093a <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 8:
		mRes = magSensitivity[1];
 808092a:	4b05      	ldr	r3, [pc, #20]	; (8080940 <_ZN7LSM9DS18calcmResEv+0x38>)
 808092c:	685b      	ldr	r3, [r3, #4]
 808092e:	e004      	b.n	808093a <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 12:
		mRes = magSensitivity[2];
 8080930:	4b03      	ldr	r3, [pc, #12]	; (8080940 <_ZN7LSM9DS18calcmResEv+0x38>)
 8080932:	689b      	ldr	r3, [r3, #8]
 8080934:	e001      	b.n	808093a <_ZN7LSM9DS18calcmResEv+0x32>
		break;
	case 16:
		mRes = magSensitivity[3];
 8080936:	4b02      	ldr	r3, [pc, #8]	; (8080940 <_ZN7LSM9DS18calcmResEv+0x38>)
 8080938:	68db      	ldr	r3, [r3, #12]
 808093a:	67c3      	str	r3, [r0, #124]	; 0x7c
 808093c:	4770      	bx	lr
 808093e:	bf00      	nop
 8080940:	20000400 	.word	0x20000400

08080944 <_ZN7LSM9DS115constrainScalesEv>:
	return (xgReadByte(FIFO_SRC) & 0x3F);
}

void LSM9DS1::constrainScales()
{
	if ((settings.gyro.scale != 245) && (settings.gyro.scale != 500) && 
 8080944:	88c3      	ldrh	r3, [r0, #6]
 8080946:	2bf5      	cmp	r3, #245	; 0xf5
 8080948:	d007      	beq.n	808095a <_ZN7LSM9DS115constrainScalesEv+0x16>
 808094a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 808094e:	d004      	beq.n	808095a <_ZN7LSM9DS115constrainScalesEv+0x16>
 8080950:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
		(settings.gyro.scale != 2000))
	{
		settings.gyro.scale = 245;
 8080954:	bf1c      	itt	ne
 8080956:	23f5      	movne	r3, #245	; 0xf5
 8080958:	80c3      	strhne	r3, [r0, #6]
	}
		
	if ((settings.accel.scale != 2) && (settings.accel.scale != 4) &&
 808095a:	7dc2      	ldrb	r2, [r0, #23]
 808095c:	2a10      	cmp	r2, #16
 808095e:	d803      	bhi.n	8080968 <_ZN7LSM9DS115constrainScalesEv+0x24>
 8080960:	4b08      	ldr	r3, [pc, #32]	; (8080984 <_ZN7LSM9DS115constrainScalesEv+0x40>)
 8080962:	40d3      	lsrs	r3, r2
 8080964:	07da      	lsls	r2, r3, #31
 8080966:	d401      	bmi.n	808096c <_ZN7LSM9DS115constrainScalesEv+0x28>
		(settings.accel.scale != 8) && (settings.accel.scale != 16))
	{
		settings.accel.scale = 2;
 8080968:	2302      	movs	r3, #2
 808096a:	75c3      	strb	r3, [r0, #23]
	}
		
	if ((settings.mag.scale != 4) && (settings.mag.scale != 8) &&
 808096c:	f890 2020 	ldrb.w	r2, [r0, #32]
 8080970:	2a10      	cmp	r2, #16
 8080972:	d803      	bhi.n	808097c <_ZN7LSM9DS115constrainScalesEv+0x38>
 8080974:	4b04      	ldr	r3, [pc, #16]	; (8080988 <_ZN7LSM9DS115constrainScalesEv+0x44>)
 8080976:	40d3      	lsrs	r3, r2
 8080978:	07db      	lsls	r3, r3, #31
 808097a:	d402      	bmi.n	8080982 <_ZN7LSM9DS115constrainScalesEv+0x3e>
		(settings.mag.scale != 12) && (settings.mag.scale != 16))
	{
		settings.mag.scale = 4;
 808097c:	2304      	movs	r3, #4
 808097e:	f880 3020 	strb.w	r3, [r0, #32]
 8080982:	4770      	bx	lr
 8080984:	00010114 	.word	0x00010114
 8080988:	00011110 	.word	0x00011110

0808098c <_ZN7LSM9DS17initSPIEv>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadBytes(_mAddress, subAddress, dest, count);
}

void LSM9DS1::initSPI()
{
 808098c:	b510      	push	{r4, lr}
 808098e:	4604      	mov	r4, r0
	pinMode(_xgAddress, OUTPUT);
 8080990:	2101      	movs	r1, #1
 8080992:	f890 0073 	ldrb.w	r0, [r0, #115]	; 0x73
 8080996:	f011 fcdf 	bl	8092358 <pinMode>
	digitalWrite(_xgAddress, HIGH);
 808099a:	f894 0073 	ldrb.w	r0, [r4, #115]	; 0x73
 808099e:	2101      	movs	r1, #1
 80809a0:	f011 fceb 	bl	809237a <digitalWrite>
	pinMode(_mAddress, OUTPUT);
 80809a4:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
 80809a8:	2101      	movs	r1, #1
 80809aa:	f011 fcd5 	bl	8092358 <pinMode>
	digitalWrite(_mAddress, HIGH);
 80809ae:	f894 0072 	ldrb.w	r0, [r4, #114]	; 0x72
	
	SPI.begin();
 80809b2:	4c0a      	ldr	r4, [pc, #40]	; (80809dc <_ZN7LSM9DS17initSPIEv+0x50>)
void LSM9DS1::initSPI()
{
	pinMode(_xgAddress, OUTPUT);
	digitalWrite(_xgAddress, HIGH);
	pinMode(_mAddress, OUTPUT);
	digitalWrite(_mAddress, HIGH);
 80809b4:	2101      	movs	r1, #1
 80809b6:	f011 fce0 	bl	809237a <digitalWrite>
	
	SPI.begin();
 80809ba:	4620      	mov	r0, r4
 80809bc:	f010 fc28 	bl	8091210 <_ZN8SPIClass5beginEv>
	// Maximum SPI frequency is 10MHz:
	SPI.setClockDivider(SPI_CLOCK_DIV4); // Photon requires min. DIV4
 80809c0:	4620      	mov	r0, r4
 80809c2:	2108      	movs	r1, #8
 80809c4:	f010 fc7c 	bl	80912c0 <_ZN8SPIClass15setClockDividerEh>
	// Data is read and written MSb first.
	SPI.setBitOrder(MSBFIRST);
 80809c8:	4620      	mov	r0, r4
 80809ca:	2101      	movs	r1, #1
 80809cc:	f010 fc2b 	bl	8091226 <_ZN8SPIClass11setBitOrderEh>
	// Data is captured on rising edge of clock (CPHA = 0)
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
 80809d0:	4620      	mov	r0, r4
}
 80809d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SPI.setClockDivider(SPI_CLOCK_DIV4); // Photon requires min. DIV4
	// Data is read and written MSb first.
	SPI.setBitOrder(MSBFIRST);
	// Data is captured on rising edge of clock (CPHA = 0)
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
 80809d6:	2100      	movs	r1, #0
 80809d8:	f010 bc28 	b.w	809122c <_ZN8SPIClass11setDataModeEh>
 80809dc:	20003f24 	.word	0x20003f24

080809e0 <_ZN7LSM9DS112SPIwriteByteEhhh>:
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
 80809e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	digitalWrite(csPin, LOW); // Initiate communication
 80809e2:	460c      	mov	r4, r1
	// Base value of the clock is HIGH (CPOL = 1)
	SPI.setDataMode(SPI_MODE0);
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
 80809e4:	4617      	mov	r7, r2
 80809e6:	461e      	mov	r6, r3
	digitalWrite(csPin, LOW); // Initiate communication
	
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
 80809e8:	4d09      	ldr	r5, [pc, #36]	; (8080a10 <_ZN7LSM9DS112SPIwriteByteEhhh+0x30>)
	SPI.setDataMode(SPI_MODE0);
}

void LSM9DS1::SPIwriteByte(uint8_t csPin, uint8_t subAddress, uint8_t data)
{
	digitalWrite(csPin, LOW); // Initiate communication
 80809ea:	4620      	mov	r0, r4
 80809ec:	2100      	movs	r1, #0
 80809ee:	f011 fcc4 	bl	809237a <digitalWrite>
	
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
 80809f2:	f007 013f 	and.w	r1, r7, #63	; 0x3f
 80809f6:	4628      	mov	r0, r5
 80809f8:	f010 fc76 	bl	80912e8 <_ZN8SPIClass8transferEh>
	SPI.transfer(data); // Send data
 80809fc:	4631      	mov	r1, r6
 80809fe:	4628      	mov	r0, r5
 8080a00:	f010 fc72 	bl	80912e8 <_ZN8SPIClass8transferEh>
	
	digitalWrite(csPin, HIGH); // Close communication
 8080a04:	4620      	mov	r0, r4
}
 8080a06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// If write, bit 0 (MSB) should be 0
	// If single write, bit 1 should be 0
	SPI.transfer(subAddress & 0x3F); // Send Address
	SPI.transfer(data); // Send data
	
	digitalWrite(csPin, HIGH); // Close communication
 8080a0a:	2101      	movs	r1, #1
 8080a0c:	f011 bcb5 	b.w	809237a <digitalWrite>
 8080a10:	20003f24 	.word	0x20003f24

08080a14 <_ZN7LSM9DS112SPIreadBytesEhhPhh>:
	return temp;
}

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
 8080a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080a16:	461e      	mov	r6, r3
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 8080a18:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 8080a1c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 8080a20:	428b      	cmp	r3, r1
	return temp;
}

uint8_t LSM9DS1::SPIreadBytes(uint8_t csPin, uint8_t subAddress,
							uint8_t * dest, uint8_t count)
{
 8080a22:	f89d 7018 	ldrb.w	r7, [sp, #24]
	// To indicate a read, set bit 0 (msb) of first byte to 1
	uint8_t rAddress = 0x80 | (subAddress & 0x3F);
 8080a26:	f042 0580 	orr.w	r5, r2, #128	; 0x80
	// Mag SPI port is different. If we're reading multiple bytes, 
	// set bit 1 to 1. The remaining six bytes are the address to be read
	if ((csPin == _mAddress) && count > 1)
 8080a2a:	d103      	bne.n	8080a34 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x20>
 8080a2c:	2f01      	cmp	r7, #1
		rAddress |= 0x40;
 8080a2e:	bf88      	it	hi
 8080a30:	f045 0540 	orrhi.w	r5, r5, #64	; 0x40
	
	digitalWrite(csPin, LOW); // Initiate communication
 8080a34:	b28c      	uxth	r4, r1
 8080a36:	4620      	mov	r0, r4
 8080a38:	2100      	movs	r1, #0
 8080a3a:	f011 fc9e 	bl	809237a <digitalWrite>
	SPI.transfer(rAddress);
 8080a3e:	4629      	mov	r1, r5
 8080a40:	4809      	ldr	r0, [pc, #36]	; (8080a68 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x54>)
 8080a42:	f010 fc51 	bl	80912e8 <_ZN8SPIClass8transferEh>
 8080a46:	4635      	mov	r5, r6
	for (int i=0; i<count; i++)
 8080a48:	1bab      	subs	r3, r5, r6
 8080a4a:	429f      	cmp	r7, r3
 8080a4c:	dd06      	ble.n	8080a5c <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x48>
	{
		dest[i] = SPI.transfer(0x00); // Read into destination array
 8080a4e:	2100      	movs	r1, #0
 8080a50:	4805      	ldr	r0, [pc, #20]	; (8080a68 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x54>)
 8080a52:	f010 fc49 	bl	80912e8 <_ZN8SPIClass8transferEh>
 8080a56:	f805 0b01 	strb.w	r0, [r5], #1
	if ((csPin == _mAddress) && count > 1)
		rAddress |= 0x40;
	
	digitalWrite(csPin, LOW); // Initiate communication
	SPI.transfer(rAddress);
	for (int i=0; i<count; i++)
 8080a5a:	e7f5      	b.n	8080a48 <_ZN7LSM9DS112SPIreadBytesEhhPhh+0x34>
	{
		dest[i] = SPI.transfer(0x00); // Read into destination array
	}
	digitalWrite(csPin, HIGH); // Close communication
 8080a5c:	4620      	mov	r0, r4
 8080a5e:	2101      	movs	r1, #1
 8080a60:	f011 fc8b 	bl	809237a <digitalWrite>
	
	return 1;
}
 8080a64:	2001      	movs	r0, #1
 8080a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8080a68:	20003f24 	.word	0x20003f24

08080a6c <_ZN7LSM9DS111SPIreadByteEhh>:
	
	digitalWrite(csPin, HIGH); // Close communication
}

uint8_t LSM9DS1::SPIreadByte(uint8_t csPin, uint8_t subAddress)
{
 8080a6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t temp;
	// Use the multiple read function to read 1 byte. 
	// Value is returned to `temp`.
	SPIreadBytes(csPin, subAddress, &temp, 1);
 8080a6e:	2301      	movs	r3, #1
 8080a70:	9300      	str	r3, [sp, #0]
 8080a72:	f10d 030f 	add.w	r3, sp, #15
 8080a76:	f7ff ffcd 	bl	8080a14 <_ZN7LSM9DS112SPIreadBytesEhhPhh>
	return temp;
}
 8080a7a:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8080a7e:	b005      	add	sp, #20
 8080a80:	f85d fb04 	ldr.w	pc, [sp], #4

08080a84 <_ZN7LSM9DS17initI2CEv>:
	
	return 1;
}

void LSM9DS1::initI2C()
{
 8080a84:	b508      	push	{r3, lr}
	Wire.begin();	// Initialize I2C library
 8080a86:	f011 fcd7 	bl	8092438 <_Z19__fetch_global_Wirev>
}
 8080a8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return 1;
}

void LSM9DS1::initI2C()
{
	Wire.begin();	// Initialize I2C library
 8080a8e:	f011 bc1d 	b.w	80922cc <_ZN7TwoWire5beginEv>

08080a92 <_ZN7LSM9DS112I2CwriteByteEhhh>:
}

// Wire.h read and write protocols
void LSM9DS1::I2CwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 8080a92:	b570      	push	{r4, r5, r6, lr}
 8080a94:	460e      	mov	r6, r1
 8080a96:	4615      	mov	r5, r2
 8080a98:	461c      	mov	r4, r3
	Wire.beginTransmission(address);  // Initialize the Tx buffer
 8080a9a:	f011 fccd 	bl	8092438 <_Z19__fetch_global_Wirev>
 8080a9e:	4631      	mov	r1, r6
 8080aa0:	f011 fc26 	bl	80922f0 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);           // Put slave register address in Tx buffer
 8080aa4:	f011 fcc8 	bl	8092438 <_Z19__fetch_global_Wirev>
 8080aa8:	6803      	ldr	r3, [r0, #0]
 8080aaa:	4629      	mov	r1, r5
 8080aac:	689b      	ldr	r3, [r3, #8]
 8080aae:	4798      	blx	r3
	Wire.write(data);                 // Put data in Tx buffer
 8080ab0:	f011 fcc2 	bl	8092438 <_Z19__fetch_global_Wirev>
 8080ab4:	6803      	ldr	r3, [r0, #0]
 8080ab6:	4621      	mov	r1, r4
 8080ab8:	689a      	ldr	r2, [r3, #8]
 8080aba:	4790      	blx	r2
	Wire.endTransmission();           // Send the Tx buffer
 8080abc:	f011 fcbc 	bl	8092438 <_Z19__fetch_global_Wirev>
}
 8080ac0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void LSM9DS1::I2CwriteByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
	Wire.beginTransmission(address);  // Initialize the Tx buffer
	Wire.write(subAddress);           // Put slave register address in Tx buffer
	Wire.write(data);                 // Put data in Tx buffer
	Wire.endTransmission();           // Send the Tx buffer
 8080ac4:	f011 bc1c 	b.w	8092300 <_ZN7TwoWire15endTransmissionEv>

08080ac8 <_ZN7LSM9DS111xgWriteByteEhh>:
		settings.mag.scale = 4;
	}
}

void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
 8080ac8:	4613      	mov	r3, r2
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 8080aca:	7802      	ldrb	r2, [r0, #0]
		settings.mag.scale = 4;
	}
}

void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
 8080acc:	b410      	push	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 8080ace:	2a01      	cmp	r2, #1
 8080ad0:	d105      	bne.n	8080ade <_ZN7LSM9DS111xgWriteByteEhh+0x16>
		I2CwriteByte(_xgAddress, subAddress, data);
 8080ad2:	460a      	mov	r2, r1
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}
 8080ad4:	bc10      	pop	{r4}
void LSM9DS1::xgWriteByte(uint8_t subAddress, uint8_t data)
{
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		I2CwriteByte(_xgAddress, subAddress, data);
 8080ad6:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 8080ada:	f7ff bfda 	b.w	8080a92 <_ZN7LSM9DS112I2CwriteByteEhhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 8080ade:	b92a      	cbnz	r2, 8080aec <_ZN7LSM9DS111xgWriteByteEhh+0x24>
		SPIwriteByte(_xgAddress, subAddress, data);
 8080ae0:	460a      	mov	r2, r1
}
 8080ae2:	bc10      	pop	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		I2CwriteByte(_xgAddress, subAddress, data);
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
 8080ae4:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 8080ae8:	f7ff bf7a 	b.w	80809e0 <_ZN7LSM9DS112SPIwriteByteEhhh>
}
 8080aec:	bc10      	pop	{r4}
 8080aee:	4770      	bx	lr

08080af0 <_ZN7LSM9DS18initGyroEv>:
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}

void LSM9DS1::initGyro()
{
 8080af0:	b510      	push	{r4, lr}
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
 8080af2:	7903      	ldrb	r3, [r0, #4]
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}

void LSM9DS1::initGyro()
{
 8080af4:	4604      	mov	r4, r0
	// FS_G[1:0] - Gyroscope full-scale selection
	// BW_G[1:0] - Gyroscope bandwidth selection
	
	// To disable gyro, set sample rate bits to 0. We'll only set sample
	// rate if the gyro is enabled.
	if (settings.gyro.enabled)
 8080af6:	b113      	cbz	r3, 8080afe <_ZN7LSM9DS18initGyroEv+0xe>
	{
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
 8080af8:	7a03      	ldrb	r3, [r0, #8]
 8080afa:	015b      	lsls	r3, r3, #5
 8080afc:	b2db      	uxtb	r3, r3
	}
	switch (settings.gyro.scale)
 8080afe:	88e2      	ldrh	r2, [r4, #6]
 8080b00:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
 8080b04:	d005      	beq.n	8080b12 <_ZN7LSM9DS18initGyroEv+0x22>
 8080b06:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 8080b0a:	d104      	bne.n	8080b16 <_ZN7LSM9DS18initGyroEv+0x26>
	{
		case 500:
			tempRegValue |= (0x1 << 3);
			break;
		case 2000:
			tempRegValue |= (0x3 << 3);
 8080b0c:	f043 0318 	orr.w	r3, r3, #24
			break;
 8080b10:	e001      	b.n	8080b16 <_ZN7LSM9DS18initGyroEv+0x26>
		tempRegValue = (settings.gyro.sampleRate & 0x07) << 5;
	}
	switch (settings.gyro.scale)
	{
		case 500:
			tempRegValue |= (0x1 << 3);
 8080b12:	f043 0308 	orr.w	r3, r3, #8
		case 2000:
			tempRegValue |= (0x3 << 3);
			break;
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
 8080b16:	7a62      	ldrb	r2, [r4, #9]
	xgWriteByte(CTRL_REG1_G, tempRegValue);
 8080b18:	2110      	movs	r1, #16
		case 2000:
			tempRegValue |= (0x3 << 3);
			break;
		// Otherwise we'll set it to 245 dps (0x0 << 4)
	}
	tempRegValue |= (settings.gyro.bandwidth & 0x3);
 8080b1a:	f002 0203 	and.w	r2, r2, #3
	xgWriteByte(CTRL_REG1_G, tempRegValue);
 8080b1e:	431a      	orrs	r2, r3
 8080b20:	4620      	mov	r0, r4
 8080b22:	f7ff ffd1 	bl	8080ac8 <_ZN7LSM9DS111xgWriteByteEhh>
	
	// CTRL_REG2_G (Default value: 0x00)
	// [0][0][0][0][INT_SEL1][INT_SEL0][OUT_SEL1][OUT_SEL0]
	// INT_SEL[1:0] - INT selection configuration
	// OUT_SEL[1:0] - Out selection configuration
	xgWriteByte(CTRL_REG2_G, 0x00);	
 8080b26:	2200      	movs	r2, #0
 8080b28:	2111      	movs	r1, #17
 8080b2a:	4620      	mov	r0, r4
 8080b2c:	f7ff ffcc 	bl	8080ac8 <_ZN7LSM9DS111xgWriteByteEhh>
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
 8080b30:	7aa3      	ldrb	r3, [r4, #10]
 8080b32:	2b00      	cmp	r3, #0
	if (settings.gyro.HPFEnable)
 8080b34:	7ae3      	ldrb	r3, [r4, #11]
	// CTRL_REG3_G (Default value: 0x00)
	// [LP_mode][HP_EN][0][0][HPCF3_G][HPCF2_G][HPCF1_G][HPCF0_G]
	// LP_mode - Low-power mode enable (0: disabled, 1: enabled)
	// HP_EN - HPF enable (0:disabled, 1: enabled)
	// HPCF_G[3:0] - HPF cutoff frequency
	tempRegValue = settings.gyro.lowPowerEnable ? (1<<7) : 0;
 8080b36:	bf14      	ite	ne
 8080b38:	2280      	movne	r2, #128	; 0x80
 8080b3a:	2200      	moveq	r2, #0
	if (settings.gyro.HPFEnable)
 8080b3c:	b12b      	cbz	r3, 8080b4a <_ZN7LSM9DS18initGyroEv+0x5a>
	{
		tempRegValue |= (1<<6) | (settings.gyro.HPFCutoff & 0x0F);
 8080b3e:	7b23      	ldrb	r3, [r4, #12]
 8080b40:	f003 030f 	and.w	r3, r3, #15
 8080b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8080b48:	431a      	orrs	r2, r3
	}
	xgWriteByte(CTRL_REG3_G, tempRegValue);
 8080b4a:	2112      	movs	r1, #18
 8080b4c:	4620      	mov	r0, r4
 8080b4e:	f7ff ffbb 	bl	8080ac8 <_ZN7LSM9DS111xgWriteByteEhh>
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
 8080b52:	7ce3      	ldrb	r3, [r4, #19]
 8080b54:	2b00      	cmp	r3, #0
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
 8080b56:	7ca3      	ldrb	r3, [r4, #18]
	// Yen_G - Y-axis output enable (0:disable, 1:enable)
	// Xen_G - X-axis output enable (0:disable, 1:enable)
	// LIR_XL1 - Latched interrupt (0:not latched, 1:latched)
	// 4D_XL1 - 4D option on interrupt (0:6D used, 1:4D used)
	tempRegValue = 0;
	if (settings.gyro.enableZ) tempRegValue |= (1<<5);
 8080b58:	bf0c      	ite	eq
 8080b5a:	2200      	moveq	r2, #0
 8080b5c:	2220      	movne	r2, #32
	if (settings.gyro.enableY) tempRegValue |= (1<<4);
 8080b5e:	b113      	cbz	r3, 8080b66 <_ZN7LSM9DS18initGyroEv+0x76>
 8080b60:	f042 0210 	orr.w	r2, r2, #16
 8080b64:	b2d2      	uxtb	r2, r2
	if (settings.gyro.enableX) tempRegValue |= (1<<3);
 8080b66:	7c63      	ldrb	r3, [r4, #17]
 8080b68:	b10b      	cbz	r3, 8080b6e <_ZN7LSM9DS18initGyroEv+0x7e>
 8080b6a:	f042 0208 	orr.w	r2, r2, #8
	if (settings.gyro.latchInterrupt) tempRegValue |= (1<<1);
 8080b6e:	7d23      	ldrb	r3, [r4, #20]
 8080b70:	b10b      	cbz	r3, 8080b76 <_ZN7LSM9DS18initGyroEv+0x86>
 8080b72:	f042 0202 	orr.w	r2, r2, #2
	xgWriteByte(CTRL_REG4, tempRegValue);
 8080b76:	211e      	movs	r1, #30
 8080b78:	4620      	mov	r0, r4
 8080b7a:	f7ff ffa5 	bl	8080ac8 <_ZN7LSM9DS111xgWriteByteEhh>
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
 8080b7e:	7b63      	ldrb	r3, [r4, #13]
 8080b80:	2b00      	cmp	r3, #0
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
 8080b82:	7ba3      	ldrb	r3, [r4, #14]
	// ORIENT_CFG_G (Default value: 0x00)
	// [0][0][SignX_G][SignY_G][SignZ_G][Orient_2][Orient_1][Orient_0]
	// SignX_G - Pitch axis (X) angular rate sign (0: positive, 1: negative)
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
 8080b84:	bf0c      	ite	eq
 8080b86:	2200      	moveq	r2, #0
 8080b88:	2220      	movne	r2, #32
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
 8080b8a:	b113      	cbz	r3, 8080b92 <_ZN7LSM9DS18initGyroEv+0xa2>
 8080b8c:	f042 0210 	orr.w	r2, r2, #16
 8080b90:	b2d2      	uxtb	r2, r2
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
 8080b92:	7be3      	ldrb	r3, [r4, #15]
 8080b94:	b10b      	cbz	r3, 8080b9a <_ZN7LSM9DS18initGyroEv+0xaa>
 8080b96:	f042 0208 	orr.w	r2, r2, #8
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
 8080b9a:	4620      	mov	r0, r4
}
 8080b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// Orient [2:0] - Directional user orientation selection
	tempRegValue = 0;
	if (settings.gyro.flipX) tempRegValue |= (1<<5);
	if (settings.gyro.flipY) tempRegValue |= (1<<4);
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
 8080ba0:	2113      	movs	r1, #19
 8080ba2:	f7ff bf91 	b.w	8080ac8 <_ZN7LSM9DS111xgWriteByteEhh>

08080ba6 <_ZN7LSM9DS19initAccelEv>:
}

void LSM9DS1::initAccel()
{
 8080ba6:	b510      	push	{r4, lr}
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 8080ba8:	7ec3      	ldrb	r3, [r0, #27]
	if (settings.gyro.flipZ) tempRegValue |= (1<<3);
	xgWriteByte(ORIENT_CFG_G, tempRegValue);
}

void LSM9DS1::initAccel()
{
 8080baa:	4604      	mov	r4, r0
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 8080bac:	2b00      	cmp	r3, #0
	if (settings.accel.enableY) tempRegValue |= (1<<4);
 8080bae:	7e83      	ldrb	r3, [r0, #26]
	//	DEC[0:1] - Decimation of accel data on OUT REG and FIFO.
	//		00: None, 01: 2 samples, 10: 4 samples 11: 8 samples
	//	Zen_XL - Z-axis output enabled
	//	Yen_XL - Y-axis output enabled
	//	Xen_XL - X-axis output enabled
	if (settings.accel.enableZ) tempRegValue |= (1<<5);
 8080bb0:	bf0c      	ite	eq
 8080bb2:	2200      	moveq	r2, #0
 8080bb4:	2220      	movne	r2, #32
	if (settings.accel.enableY) tempRegValue |= (1<<4);
 8080bb6:	b113      	cbz	r3, 8080bbe <_ZN7LSM9DS19initAccelEv+0x18>
 8080bb8:	f042 0210 	orr.w	r2, r2, #16
 8080bbc:	b2d2      	uxtb	r2, r2
	if (settings.accel.enableX) tempRegValue |= (1<<3);
 8080bbe:	7e63      	ldrb	r3, [r4, #25]
 8080bc0:	b10b      	cbz	r3, 8080bc6 <_ZN7LSM9DS19initAccelEv+0x20>
 8080bc2:	f042 0208 	orr.w	r2, r2, #8
	
	xgWriteByte(CTRL_REG5_XL, tempRegValue);
 8080bc6:	211f      	movs	r1, #31
 8080bc8:	4620      	mov	r0, r4
 8080bca:	f7ff ff7d 	bl	8080ac8 <_ZN7LSM9DS111xgWriteByteEhh>
	// FS_XL[1:0] - Full-scale selection
	// BW_SCAL_ODR - Bandwidth selection
	// BW_XL[1:0] - Anti-aliasing filter bandwidth selection
	tempRegValue = 0;
	// To disable the accel, set the sampleRate bits to 0.
	if (settings.accel.enabled)
 8080bce:	7da2      	ldrb	r2, [r4, #22]
 8080bd0:	b112      	cbz	r2, 8080bd8 <_ZN7LSM9DS19initAccelEv+0x32>
	{
		tempRegValue |= (settings.accel.sampleRate & 0x07) << 5;
 8080bd2:	7e22      	ldrb	r2, [r4, #24]
 8080bd4:	0152      	lsls	r2, r2, #5
 8080bd6:	b2d2      	uxtb	r2, r2
	}
	switch (settings.accel.scale)
 8080bd8:	7de3      	ldrb	r3, [r4, #23]
 8080bda:	2b08      	cmp	r3, #8
 8080bdc:	d006      	beq.n	8080bec <_ZN7LSM9DS19initAccelEv+0x46>
 8080bde:	2b10      	cmp	r3, #16
 8080be0:	d007      	beq.n	8080bf2 <_ZN7LSM9DS19initAccelEv+0x4c>
 8080be2:	2b04      	cmp	r3, #4
 8080be4:	d107      	bne.n	8080bf6 <_ZN7LSM9DS19initAccelEv+0x50>
	{
		case 4:
			tempRegValue |= (0x2 << 3);
 8080be6:	f042 0210 	orr.w	r2, r2, #16
			break;
 8080bea:	e004      	b.n	8080bf6 <_ZN7LSM9DS19initAccelEv+0x50>
		case 8:
			tempRegValue |= (0x3 << 3);
 8080bec:	f042 0218 	orr.w	r2, r2, #24
			break;
 8080bf0:	e001      	b.n	8080bf6 <_ZN7LSM9DS19initAccelEv+0x50>
		case 16:
			tempRegValue |= (0x1 << 3);
 8080bf2:	f042 0208 	orr.w	r2, r2, #8
			break;
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
 8080bf6:	f994 301c 	ldrsb.w	r3, [r4, #28]
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
		tempRegValue |= (settings.accel.bandwidth & 0x03);
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 8080bfa:	2120      	movs	r1, #32
		case 16:
			tempRegValue |= (0x1 << 3);
			break;
		// Otherwise it'll be set to 2g (0x0 << 3)
	}
	if (settings.accel.bandwidth >= 0)
 8080bfc:	2b00      	cmp	r3, #0
	{
		tempRegValue |= (1<<2); // Set BW_SCAL_ODR
		tempRegValue |= (settings.accel.bandwidth & 0x03);
 8080bfe:	bfa2      	ittt	ge
 8080c00:	f003 0303 	andge.w	r3, r3, #3
 8080c04:	431a      	orrge	r2, r3
 8080c06:	f042 0204 	orrge.w	r2, r2, #4
	}
	xgWriteByte(CTRL_REG6_XL, tempRegValue);
 8080c0a:	4620      	mov	r0, r4
 8080c0c:	f7ff ff5c 	bl	8080ac8 <_ZN7LSM9DS111xgWriteByteEhh>
	// HR - High resolution mode (0: disable, 1: enable)
	// DCF[1:0] - Digital filter cutoff frequency
	// FDS - Filtered data selection
	// HPIS1 - HPF enabled for interrupt function
	tempRegValue = 0;
	if (settings.accel.highResEnable)
 8080c10:	7f62      	ldrb	r2, [r4, #29]
 8080c12:	b12a      	cbz	r2, 8080c20 <_ZN7LSM9DS19initAccelEv+0x7a>
	{
		tempRegValue |= (1<<7); // Set HR bit
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
 8080c14:	7fa2      	ldrb	r2, [r4, #30]
 8080c16:	0152      	lsls	r2, r2, #5
 8080c18:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8080c1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
 8080c20:	4620      	mov	r0, r4
}
 8080c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (settings.accel.highResEnable)
	{
		tempRegValue |= (1<<7); // Set HR bit
		tempRegValue |= (settings.accel.highResBandwidth & 0x3) << 5;
	}
	xgWriteByte(CTRL_REG7_XL, tempRegValue);
 8080c26:	2121      	movs	r1, #33	; 0x21
 8080c28:	f7ff bf4e 	b.w	8080ac8 <_ZN7LSM9DS111xgWriteByteEhh>

08080c2c <_ZN7LSM9DS110mWriteByteEhh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}

void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
 8080c2c:	4613      	mov	r3, r2
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 8080c2e:	7802      	ldrb	r2, [r0, #0]
	else if (settings.device.commInterface == IMU_MODE_SPI)
		SPIwriteByte(_xgAddress, subAddress, data);
}

void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
 8080c30:	b410      	push	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 8080c32:	2a01      	cmp	r2, #1
 8080c34:	d105      	bne.n	8080c42 <_ZN7LSM9DS110mWriteByteEhh+0x16>
		return I2CwriteByte(_mAddress, subAddress, data);
 8080c36:	460a      	mov	r2, r1
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
}
 8080c38:	bc10      	pop	{r4}
void LSM9DS1::mWriteByte(uint8_t subAddress, uint8_t data)
{
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		return I2CwriteByte(_mAddress, subAddress, data);
 8080c3a:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 8080c3e:	f7ff bf28 	b.w	8080a92 <_ZN7LSM9DS112I2CwriteByteEhhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 8080c42:	b92a      	cbnz	r2, 8080c50 <_ZN7LSM9DS110mWriteByteEhh+0x24>
		return SPIwriteByte(_mAddress, subAddress, data);
 8080c44:	460a      	mov	r2, r1
}
 8080c46:	bc10      	pop	{r4}
	// Whether we're using I2C or SPI, write a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
		return I2CwriteByte(_mAddress, subAddress, data);
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
 8080c48:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 8080c4c:	f7ff bec8 	b.w	80809e0 <_ZN7LSM9DS112SPIwriteByteEhhh>
}
 8080c50:	bc10      	pop	{r4}
 8080c52:	4770      	bx	lr

08080c54 <_ZN7LSM9DS17initMagEv>:
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
}

void LSM9DS1::initMag()
{
 8080c54:	b510      	push	{r4, lr}
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 8080c56:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
	mWriteByte(OFFSET_X_REG_L_M + (2 * axis), lsb);
	mWriteByte(OFFSET_X_REG_H_M + (2 * axis), msb);
}

void LSM9DS1::initMag()
{
 8080c5a:	4604      	mov	r4, r0
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 8080c5c:	2b00      	cmp	r3, #0
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 8080c5e:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 8080c62:	bf08      	it	eq
 8080c64:	2200      	moveq	r2, #0
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 8080c66:	ea4f 1343 	mov.w	r3, r3, lsl #5
 8080c6a:	f003 0160 	and.w	r1, r3, #96	; 0x60
 8080c6e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
	// OM[1:0] - X & Y axes op mode selection
	//	00:low-power, 01:medium performance
	//	10: high performance, 11:ultra-high performance
	// DO[2:0] - Output data rate selection
	// ST - Self-test enable
	if (settings.mag.tempCompensationEnable) tempRegValue |= (1<<7);
 8080c72:	bf18      	it	ne
 8080c74:	2280      	movne	r2, #128	; 0x80
	tempRegValue |= (settings.mag.XYPerformance & 0x3) << 5;
	tempRegValue |= (settings.mag.sampleRate & 0x7) << 2;
 8080c76:	009b      	lsls	r3, r3, #2
 8080c78:	f003 031c 	and.w	r3, r3, #28
 8080c7c:	430b      	orrs	r3, r1
	mWriteByte(CTRL_REG1_M, tempRegValue);
 8080c7e:	431a      	orrs	r2, r3
 8080c80:	2120      	movs	r1, #32
 8080c82:	f7ff ffd3 	bl	8080c2c <_ZN7LSM9DS110mWriteByteEhh>
 8080c86:	f894 3020 	ldrb.w	r3, [r4, #32]
	case 16:
		tempRegValue |= (0x3 << 5);
		break;
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
 8080c8a:	4620      	mov	r0, r4
 8080c8c:	3b08      	subs	r3, #8
 8080c8e:	b2db      	uxtb	r3, r3
 8080c90:	2b08      	cmp	r3, #8
 8080c92:	bf96      	itet	ls
 8080c94:	4a12      	ldrls	r2, [pc, #72]	; (8080ce0 <_ZN7LSM9DS17initMagEv+0x8c>)
	// [0][FS1][FS0][0][REBOOT][SOFT_RST][0][0]
	// FS[1:0] - Full-scale configuration
	// REBOOT - Reboot memory content (0:normal, 1:reboot)
	// SOFT_RST - Reset config and user registers (0:default, 1:reset)
	tempRegValue = 0;
	switch (settings.mag.scale)
 8080c96:	2200      	movhi	r2, #0
 8080c98:	5cd2      	ldrbls	r2, [r2, r3]
	case 16:
		tempRegValue |= (0x3 << 5);
		break;
	// Otherwise we'll default to 4 gauss (00)
	}
	mWriteByte(CTRL_REG2_M, tempRegValue); // +/-4Gauss
 8080c9a:	2121      	movs	r1, #33	; 0x21
 8080c9c:	f7ff ffc6 	bl	8080c2c <_ZN7LSM9DS110mWriteByteEhh>
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 8080ca0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
	tempRegValue |= (settings.mag.operatingMode & 0x3);
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
 8080ca4:	4620      	mov	r0, r4
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 8080ca6:	2b00      	cmp	r3, #0
	tempRegValue |= (settings.mag.operatingMode & 0x3);
 8080ca8:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	// SIM - SPI mode selection (0:write-only, 1:read/write enable)
	// MD[1:0] - Operating mode
	//	00:continuous conversion, 01:single-conversion,
	//  10,11: Power-down
	tempRegValue = 0;
	if (settings.mag.lowPowerEnable) tempRegValue |= (1<<5);
 8080cac:	bf0c      	ite	eq
 8080cae:	2200      	moveq	r2, #0
 8080cb0:	2220      	movne	r2, #32
	tempRegValue |= (settings.mag.operatingMode & 0x3);
 8080cb2:	f003 0303 	and.w	r3, r3, #3
	mWriteByte(CTRL_REG3_M, tempRegValue); // Continuous conversion mode
 8080cb6:	431a      	orrs	r2, r3
 8080cb8:	2122      	movs	r1, #34	; 0x22
 8080cba:	f7ff ffb7 	bl	8080c2c <_ZN7LSM9DS110mWriteByteEhh>
	//	00:low-power mode, 01:medium performance
	//	10:high performance, 10:ultra-high performance
	// BLE - Big/little endian data
	tempRegValue = 0;
	tempRegValue = (settings.mag.ZPerformance & 0x3) << 2;
	mWriteByte(CTRL_REG4_M, tempRegValue);
 8080cbe:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8080cc2:	4620      	mov	r0, r4
 8080cc4:	0092      	lsls	r2, r2, #2
 8080cc6:	f002 020c 	and.w	r2, r2, #12
 8080cca:	2123      	movs	r1, #35	; 0x23
 8080ccc:	f7ff ffae 	bl	8080c2c <_ZN7LSM9DS110mWriteByteEhh>
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
 8080cd0:	4620      	mov	r0, r4
}
 8080cd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// CTRL_REG5_M (Default value: 0x00)
	// [0][BDU][0][0][0][0][0][0]
	// BDU - Block data update for magnetic data
	//	0:continuous, 1:not updated until MSB/LSB are read
	tempRegValue = 0;
	mWriteByte(CTRL_REG5_M, tempRegValue);
 8080cd6:	2200      	movs	r2, #0
 8080cd8:	2124      	movs	r1, #36	; 0x24
 8080cda:	f7ff bfa7 	b.w	8080c2c <_ZN7LSM9DS110mWriteByteEhh>
 8080cde:	bf00      	nop
 8080ce0:	080964bb 	.word	0x080964bb

08080ce4 <_ZN7LSM9DS111I2CreadByteEhh>:
	Wire.write(data);                 // Put data in Tx buffer
	Wire.endTransmission();           // Send the Tx buffer
}

uint8_t LSM9DS1::I2CreadByte(uint8_t address, uint8_t subAddress)
{
 8080ce4:	b538      	push	{r3, r4, r5, lr}
 8080ce6:	460c      	mov	r4, r1
 8080ce8:	4615      	mov	r5, r2
	uint8_t data; // `data` will store the register data	 
	Wire.beginTransmission(address);         // Initialize the Tx buffer
 8080cea:	f011 fba5 	bl	8092438 <_Z19__fetch_global_Wirev>
 8080cee:	4621      	mov	r1, r4
 8080cf0:	f011 fafe 	bl	80922f0 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write(subAddress);	                 // Put slave register address in Tx buffer
 8080cf4:	f011 fba0 	bl	8092438 <_Z19__fetch_global_Wirev>
 8080cf8:	6803      	ldr	r3, [r0, #0]
 8080cfa:	4629      	mov	r1, r5
 8080cfc:	689b      	ldr	r3, [r3, #8]
 8080cfe:	4798      	blx	r3
	Wire.endTransmission(false);             // Send the Tx buffer, but send a restart to keep connection alive
 8080d00:	f011 fb9a 	bl	8092438 <_Z19__fetch_global_Wirev>
 8080d04:	2100      	movs	r1, #0
 8080d06:	f011 faf7 	bl	80922f8 <_ZN7TwoWire15endTransmissionEh>
	Wire.requestFrom(address, (uint8_t) 1);  // Read one byte from slave register address 
 8080d0a:	f011 fb95 	bl	8092438 <_Z19__fetch_global_Wirev>
 8080d0e:	2201      	movs	r2, #1
 8080d10:	4621      	mov	r1, r4
 8080d12:	f011 faea 	bl	80922ea <_ZN7TwoWire11requestFromEhh>
	data = Wire.read();                      // Fill Rx buffer with result
 8080d16:	f011 fb8f 	bl	8092438 <_Z19__fetch_global_Wirev>
 8080d1a:	6803      	ldr	r3, [r0, #0]
 8080d1c:	695b      	ldr	r3, [r3, #20]
 8080d1e:	4798      	blx	r3
	return data;                             // Return data read from slave register
}
 8080d20:	b2c0      	uxtb	r0, r0
 8080d22:	bd38      	pop	{r3, r4, r5, pc}

08080d24 <_ZN7LSM9DS110xgReadByteEh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIwriteByte(_mAddress, subAddress, data);
}

uint8_t LSM9DS1::xgReadByte(uint8_t subAddress)
{
 8080d24:	460a      	mov	r2, r1
	// Whether we're using I2C or SPI, read a byte using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 8080d26:	7801      	ldrb	r1, [r0, #0]
 8080d28:	2901      	cmp	r1, #1
 8080d2a:	d103      	bne.n	8080d34 <_ZN7LSM9DS110xgReadByteEh+0x10>
		return I2CreadByte(_xgAddress, subAddress);
 8080d2c:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 8080d30:	f7ff bfd8 	b.w	8080ce4 <_ZN7LSM9DS111I2CreadByteEhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 8080d34:	b919      	cbnz	r1, 8080d3e <_ZN7LSM9DS110xgReadByteEh+0x1a>
		return SPIreadByte(_xgAddress, subAddress);
 8080d36:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 8080d3a:	f7ff be97 	b.w	8080a6c <_ZN7LSM9DS111SPIreadByteEhh>
	
	return 0;
}
 8080d3e:	2000      	movs	r0, #0
 8080d40:	4770      	bx	lr

08080d42 <_ZN7LSM9DS19mReadByteEh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadBytes(_xgAddress, subAddress, dest, count);
}

uint8_t LSM9DS1::mReadByte(uint8_t subAddress)
{
 8080d42:	460a      	mov	r2, r1
	// Whether we're using I2C or SPI, read a byte using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 8080d44:	7801      	ldrb	r1, [r0, #0]
 8080d46:	2901      	cmp	r1, #1
 8080d48:	d103      	bne.n	8080d52 <_ZN7LSM9DS19mReadByteEh+0x10>
		return I2CreadByte(_mAddress, subAddress);
 8080d4a:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 8080d4e:	f7ff bfc9 	b.w	8080ce4 <_ZN7LSM9DS111I2CreadByteEhh>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 8080d52:	b919      	cbnz	r1, 8080d5c <_ZN7LSM9DS19mReadByteEh+0x1a>
		return SPIreadByte(_mAddress, subAddress);
 8080d54:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 8080d58:	f7ff be88 	b.w	8080a6c <_ZN7LSM9DS111SPIreadByteEhh>
}
 8080d5c:	4770      	bx	lr

08080d5e <_ZN7LSM9DS15beginEv>:
	_autoCalc = false;
}


uint16_t LSM9DS1::begin()
{
 8080d5e:	b538      	push	{r3, r4, r5, lr}
 8080d60:	4604      	mov	r4, r0
	//! Todo: don't use _xgAddress or _mAddress, duplicating memory
	_xgAddress = settings.device.agAddress;
 8080d62:	7843      	ldrb	r3, [r0, #1]
 8080d64:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
	_mAddress = settings.device.mAddress;
 8080d68:	7883      	ldrb	r3, [r0, #2]
 8080d6a:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
	
	constrainScales();
 8080d6e:	f7ff fde9 	bl	8080944 <_ZN7LSM9DS115constrainScalesEv>
	// Once we have the scale values, we can calculate the resolution
	// of each sensor. That's what these functions are for. One for each sensor
	calcgRes(); // Calculate DPS / ADC tick, stored in gRes variable
 8080d72:	f7ff fdb2 	bl	80808da <_ZN7LSM9DS18calcgResEv>
	calcmRes(); // Calculate Gs / ADC tick, stored in mRes variable
 8080d76:	4620      	mov	r0, r4
 8080d78:	f7ff fdc6 	bl	8080908 <_ZN7LSM9DS18calcmResEv>
	calcaRes(); // Calculate g / ADC tick, stored in aRes variable
 8080d7c:	4620      	mov	r0, r4
 8080d7e:	f7ff fdb7 	bl	80808f0 <_ZN7LSM9DS18calcaResEv>
	
	// Now, initialize our hardware interface.
	if (settings.device.commInterface == IMU_MODE_I2C)	// If we're using I2C
 8080d82:	7823      	ldrb	r3, [r4, #0]
 8080d84:	2b01      	cmp	r3, #1
 8080d86:	d103      	bne.n	8080d90 <_ZN7LSM9DS15beginEv+0x32>
		initI2C();	// Initialize I2C
 8080d88:	4620      	mov	r0, r4
 8080d8a:	f7ff fe7b 	bl	8080a84 <_ZN7LSM9DS17initI2CEv>
 8080d8e:	e003      	b.n	8080d98 <_ZN7LSM9DS15beginEv+0x3a>
	else if (settings.device.commInterface == IMU_MODE_SPI) 	// else, if we're using SPI
 8080d90:	b913      	cbnz	r3, 8080d98 <_ZN7LSM9DS15beginEv+0x3a>
		initSPI();	// Initialize SPI
 8080d92:	4620      	mov	r0, r4
 8080d94:	f7ff fdfa 	bl	808098c <_ZN7LSM9DS17initSPIEv>
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
 8080d98:	210f      	movs	r1, #15
 8080d9a:	4620      	mov	r0, r4
 8080d9c:	f7ff ffd1 	bl	8080d42 <_ZN7LSM9DS19mReadByteEh>
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
 8080da0:	210f      	movs	r1, #15
	else if (settings.device.commInterface == IMU_MODE_SPI) 	// else, if we're using SPI
		initSPI();	// Initialize SPI
		
	// To verify communication, we can read from the WHO_AM_I register of
	// each device. Store those in a variable so we can return them.
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
 8080da2:	4605      	mov	r5, r0
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
 8080da4:	4620      	mov	r0, r4
 8080da6:	f7ff ffbd 	bl	8080d24 <_ZN7LSM9DS110xgReadByteEh>
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
 8080daa:	f646 033d 	movw	r3, #26685	; 0x683d
 8080dae:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
 8080db2:	b205      	sxth	r5, r0
 8080db4:	429d      	cmp	r5, r3
 8080db6:	d10a      	bne.n	8080dce <_ZN7LSM9DS15beginEv+0x70>
		return 0;
	
	// Gyro initialization stuff:
	initGyro();	// This will "turn on" the gyro. Setting up interrupts, etc.
 8080db8:	4620      	mov	r0, r4
 8080dba:	f7ff fe99 	bl	8080af0 <_ZN7LSM9DS18initGyroEv>
	
	// Accelerometer initialization stuff:
	initAccel(); // "Turn on" all axes of the accel. Set up interrupts, etc.
 8080dbe:	4620      	mov	r0, r4
 8080dc0:	f7ff fef1 	bl	8080ba6 <_ZN7LSM9DS19initAccelEv>
	
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
 8080dc4:	4620      	mov	r0, r4
 8080dc6:	f7ff ff45 	bl	8080c54 <_ZN7LSM9DS17initMagEv>
	
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
 8080dca:	4628      	mov	r0, r5
 8080dcc:	bd38      	pop	{r3, r4, r5, pc}
	uint8_t mTest = mReadByte(WHO_AM_I_M);		// Read the gyro WHO_AM_I
	uint8_t xgTest = xgReadByte(WHO_AM_I_XG);	// Read the accel/mag WHO_AM_I
	uint16_t whoAmICombined = (xgTest << 8) | mTest;
	
	if (whoAmICombined != ((WHO_AM_I_AG_RSP << 8) | WHO_AM_I_M_RSP))
		return 0;
 8080dce:	2000      	movs	r0, #0
	// Magnetometer initialization stuff:
	initMag(); // "Turn on" all axes of the mag. Set up interrupts, etc.
	
	// Once everything is initialized, return the WHO_AM_I registers we read:
	return whoAmICombined;
}
 8080dd0:	bd38      	pop	{r3, r4, r5, pc}

08080dd2 <_ZN7LSM9DS112I2CreadBytesEhhPhh>:
	data = Wire.read();                      // Fill Rx buffer with result
	return data;                             // Return data read from slave register
}

uint8_t LSM9DS1::I2CreadBytes(uint8_t address, uint8_t subAddress, uint8_t * dest, uint8_t count)
{  
 8080dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8080dd6:	4690      	mov	r8, r2
 8080dd8:	460c      	mov	r4, r1
 8080dda:	461d      	mov	r5, r3
 8080ddc:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8080de0:	f00f ff92 	bl	8090d08 <HAL_Timer_Get_Milli_Seconds>
 8080de4:	4607      	mov	r7, r0
	unsigned long timeIn = millis();
	
	Wire.beginTransmission(address);   // Initialize the Tx buffer
 8080de6:	f011 fb27 	bl	8092438 <_Z19__fetch_global_Wirev>
 8080dea:	4621      	mov	r1, r4
 8080dec:	f011 fa80 	bl	80922f0 <_ZN7TwoWire17beginTransmissionEh>
	// Next send the register to be read. OR with 0x80 to indicate multi-read.
	Wire.write(subAddress | 0x80);     // Put slave register address in Tx buffer
 8080df0:	f011 fb22 	bl	8092438 <_Z19__fetch_global_Wirev>
  void onRequest(void (*)(void));

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 8080df4:	6803      	ldr	r3, [r0, #0]
 8080df6:	f048 0180 	orr.w	r1, r8, #128	; 0x80
 8080dfa:	689b      	ldr	r3, [r3, #8]
 8080dfc:	4798      	blx	r3
	Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
 8080dfe:	f011 fb1b 	bl	8092438 <_Z19__fetch_global_Wirev>
 8080e02:	2100      	movs	r1, #0
 8080e04:	f011 fa78 	bl	80922f8 <_ZN7TwoWire15endTransmissionEh>
	
	Wire.requestFrom(address, count);  // Read bytes from slave register address 
 8080e08:	f011 fb16 	bl	8092438 <_Z19__fetch_global_Wirev>
 8080e0c:	4621      	mov	r1, r4
 8080e0e:	4632      	mov	r2, r6
 8080e10:	f011 fa6b 	bl	80922ea <_ZN7TwoWire11requestFromEhh>
	for (int i=0; i<count;)
 8080e14:	2400      	movs	r4, #0
	{
		if (Wire.available())
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
 8080e16:	f507 777a 	add.w	r7, r7, #1000	; 0x3e8
	// Next send the register to be read. OR with 0x80 to indicate multi-read.
	Wire.write(subAddress | 0x80);     // Put slave register address in Tx buffer
	Wire.endTransmission(false);       // Send the Tx buffer, but send a restart to keep connection alive
	
	Wire.requestFrom(address, count);  // Read bytes from slave register address 
	for (int i=0; i<count;)
 8080e1a:	42b4      	cmp	r4, r6
 8080e1c:	da1a      	bge.n	8080e54 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x82>
	{
		if (Wire.available())
 8080e1e:	f011 fb0b 	bl	8092438 <_Z19__fetch_global_Wirev>
 8080e22:	6803      	ldr	r3, [r0, #0]
 8080e24:	691b      	ldr	r3, [r3, #16]
 8080e26:	4798      	blx	r3
 8080e28:	b140      	cbz	r0, 8080e3c <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x6a>
		{
			dest[i++] = Wire.read();
 8080e2a:	f011 fb05 	bl	8092438 <_Z19__fetch_global_Wirev>
 8080e2e:	6803      	ldr	r3, [r0, #0]
 8080e30:	f104 0801 	add.w	r8, r4, #1
 8080e34:	695b      	ldr	r3, [r3, #20]
 8080e36:	4798      	blx	r3
 8080e38:	5528      	strb	r0, [r5, r4]
 8080e3a:	4644      	mov	r4, r8
 8080e3c:	f00f ff64 	bl	8090d08 <HAL_Timer_Get_Milli_Seconds>
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
 8080e40:	42b8      	cmp	r0, r7
 8080e42:	d9ea      	bls.n	8080e1a <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x48>
 8080e44:	442c      	add	r4, r5
		{
			while (i < count)
				dest[i++] = 0xFF;
 8080e46:	23ff      	movs	r3, #255	; 0xff
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
 8080e48:	1b62      	subs	r2, r4, r5
 8080e4a:	4296      	cmp	r6, r2
 8080e4c:	dd05      	ble.n	8080e5a <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x88>
				dest[i++] = 0xFF;
 8080e4e:	f804 3b01 	strb.w	r3, [r4], #1
		{
			dest[i++] = Wire.read();
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
 8080e52:	e7f9      	b.n	8080e48 <_ZN7LSM9DS112I2CreadBytesEhhPhh+0x76>
				dest[i++] = 0xFF;
			return 0;
		}
	}
	return 1;
 8080e54:	2001      	movs	r0, #1
 8080e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		if (timeIn + COMMUNICATION_TIMEOUT < millis())
		{
			while (i < count)
				dest[i++] = 0xFF;
			return 0;
 8080e5a:	2000      	movs	r0, #0
		}
	}
	return 1;
}
 8080e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08080e60 <_ZN7LSM9DS111xgReadBytesEhPhh>:
	
	return 0;
}

uint8_t LSM9DS1::xgReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
 8080e60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080e62:	460d      	mov	r5, r1
	// Whether we're using I2C or SPI, read multiple bytes using the
	// gyro-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 8080e64:	7801      	ldrb	r1, [r0, #0]
 8080e66:	2901      	cmp	r1, #1
 8080e68:	d107      	bne.n	8080e7a <_ZN7LSM9DS111xgReadBytesEhPhh+0x1a>
		return I2CreadBytes(_xgAddress, subAddress, dest, count);
 8080e6a:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 8080e6e:	9300      	str	r3, [sp, #0]
 8080e70:	4613      	mov	r3, r2
 8080e72:	462a      	mov	r2, r5
 8080e74:	f7ff ffad 	bl	8080dd2 <_ZN7LSM9DS112I2CreadBytesEhhPhh>
 8080e78:	e007      	b.n	8080e8a <_ZN7LSM9DS111xgReadBytesEhPhh+0x2a>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 8080e7a:	b931      	cbnz	r1, 8080e8a <_ZN7LSM9DS111xgReadBytesEhPhh+0x2a>
		return SPIreadBytes(_xgAddress, subAddress, dest, count);
 8080e7c:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
 8080e80:	9300      	str	r3, [sp, #0]
 8080e82:	4613      	mov	r3, r2
 8080e84:	462a      	mov	r2, r5
 8080e86:	f7ff fdc5 	bl	8080a14 <_ZN7LSM9DS112SPIreadBytesEhhPhh>
}
 8080e8a:	b003      	add	sp, #12
 8080e8c:	bd30      	pop	{r4, r5, pc}

08080e8e <_ZN7LSM9DS19readAccelEv>:
	
	return ((status & (1<<axis)) >> axis);
}

uint8_t LSM9DS1::readAccel()
{
 8080e8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
 8080e90:	2306      	movs	r3, #6
 8080e92:	466a      	mov	r2, sp
 8080e94:	2128      	movs	r1, #40	; 0x28
	
	return ((status & (1<<axis)) >> axis);
}

uint8_t LSM9DS1::readAccel()
{
 8080e96:	4604      	mov	r4, r0
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
 8080e98:	f7ff ffe2 	bl	8080e60 <_ZN7LSM9DS111xgReadBytesEhPhh>
	
	if (status)
 8080e9c:	b330      	cbz	r0, 8080eec <_ZN7LSM9DS19readAccelEv+0x5e>
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 8080e9e:	f89d 3000 	ldrb.w	r3, [sp]
 8080ea2:	f89d 1001 	ldrb.w	r1, [sp, #1]
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 8080ea6:	f89d 2003 	ldrb.w	r2, [sp, #3]
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 8080eaa:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 8080eae:	f89d 3002 	ldrb.w	r3, [sp, #2]
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 8080eb2:	f89d 5005 	ldrb.w	r5, [sp, #5]
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 8080eb6:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 8080eba:	f89d 3004 	ldrb.w	r3, [sp, #4]
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 8080ebe:	b209      	sxth	r1, r1
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 8080ec0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		if (_autoCalc)
 8080ec4:	f894 5080 	ldrb.w	r5, [r4, #128]	; 0x80
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 8080ec8:	b212      	sxth	r2, r2
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 8080eca:	b21b      	sxth	r3, r3
	uint8_t temp[6]; // We'll read six bytes from the accelerometer into temp	
	uint8_t status = xgReadBytes(OUT_X_L_XL, temp, 6); // Read 6 bytes, beginning at OUT_X_L_XL
	
	if (status)
	{
		ax = (temp[1] << 8) | temp[0]; // Store x-axis values into ax
 8080ecc:	85e1      	strh	r1, [r4, #46]	; 0x2e
		ay = (temp[3] << 8) | temp[2]; // Store y-axis values into ay
 8080ece:	8622      	strh	r2, [r4, #48]	; 0x30
		az = (temp[5] << 8) | temp[4]; // Store z-axis values into az
 8080ed0:	8663      	strh	r3, [r4, #50]	; 0x32
		if (_autoCalc)
 8080ed2:	b15d      	cbz	r5, 8080eec <_ZN7LSM9DS19readAccelEv+0x5e>
		{
			ax -= aBiasRaw[X_AXIS];
 8080ed4:	f8b4 5066 	ldrh.w	r5, [r4, #102]	; 0x66
 8080ed8:	1b49      	subs	r1, r1, r5
 8080eda:	85e1      	strh	r1, [r4, #46]	; 0x2e
			ay -= aBiasRaw[Y_AXIS];
 8080edc:	f8b4 1068 	ldrh.w	r1, [r4, #104]	; 0x68
 8080ee0:	1a52      	subs	r2, r2, r1
 8080ee2:	8622      	strh	r2, [r4, #48]	; 0x30
			az -= aBiasRaw[Z_AXIS];
 8080ee4:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8080ee8:	1a9b      	subs	r3, r3, r2
 8080eea:	8663      	strh	r3, [r4, #50]	; 0x32
		}
	}
	return status;
}
 8080eec:	b003      	add	sp, #12
 8080eee:	bd30      	pop	{r4, r5, pc}

08080ef0 <_ZN7LSM9DS18readTempEv>:
	else
		return 0;
}

uint8_t LSM9DS1::readTemp()
{
 8080ef0:	b513      	push	{r0, r1, r4, lr}
	uint8_t temp[2]; // We'll read two bytes from the temperature sensor into temp	
	uint8_t status = xgReadBytes(OUT_TEMP_L, temp, 2); // Read 2 bytes, beginning at OUT_TEMP_L
 8080ef2:	2302      	movs	r3, #2
 8080ef4:	aa01      	add	r2, sp, #4
 8080ef6:	2115      	movs	r1, #21
	else
		return 0;
}

uint8_t LSM9DS1::readTemp()
{
 8080ef8:	4604      	mov	r4, r0
	uint8_t temp[2]; // We'll read two bytes from the temperature sensor into temp	
	uint8_t status = xgReadBytes(OUT_TEMP_L, temp, 2); // Read 2 bytes, beginning at OUT_TEMP_L
 8080efa:	f7ff ffb1 	bl	8080e60 <_ZN7LSM9DS111xgReadBytesEhPhh>
	if (status)
 8080efe:	b130      	cbz	r0, 8080f0e <_ZN7LSM9DS18readTempEv+0x1e>
		temperature = ((int16_t)temp[1] << 8) | temp[0];
 8080f00:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8080f04:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8080f08:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8080f0c:	8763      	strh	r3, [r4, #58]	; 0x3a
	
	return status;
}
 8080f0e:	b002      	add	sp, #8
 8080f10:	bd10      	pop	{r4, pc}

08080f12 <_ZN7LSM9DS18readGyroEv>:

uint8_t LSM9DS1::readGyro()
{
 8080f12:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
 8080f14:	2306      	movs	r3, #6
 8080f16:	466a      	mov	r2, sp
 8080f18:	2118      	movs	r1, #24
	
	return status;
}

uint8_t LSM9DS1::readGyro()
{
 8080f1a:	4604      	mov	r4, r0
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
 8080f1c:	f7ff ffa0 	bl	8080e60 <_ZN7LSM9DS111xgReadBytesEhPhh>
	
	if (status)
 8080f20:	b330      	cbz	r0, 8080f70 <_ZN7LSM9DS18readGyroEv+0x5e>
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 8080f22:	f89d 3000 	ldrb.w	r3, [sp]
 8080f26:	f89d 1001 	ldrb.w	r1, [sp, #1]
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 8080f2a:	f89d 2003 	ldrb.w	r2, [sp, #3]
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 8080f2e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 8080f32:	f89d 3002 	ldrb.w	r3, [sp, #2]
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 8080f36:	f89d 5005 	ldrb.w	r5, [sp, #5]
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 8080f3a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 8080f3e:	f89d 3004 	ldrb.w	r3, [sp, #4]
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 8080f42:	b209      	sxth	r1, r1
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 8080f44:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		if (_autoCalc)
 8080f48:	f894 5080 	ldrb.w	r5, [r4, #128]	; 0x80
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 8080f4c:	b212      	sxth	r2, r2
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 8080f4e:	b21b      	sxth	r3, r3
	uint8_t temp[6]; // We'll read six bytes from the gyro into temp
	uint8_t status = xgReadBytes(OUT_X_L_G, temp, 6); // Read 6 bytes, beginning at OUT_X_L_G
	
	if (status)
	{
		gx = (temp[1] << 8) | temp[0]; // Store x-axis values into gx
 8080f50:	8521      	strh	r1, [r4, #40]	; 0x28
		gy = (temp[3] << 8) | temp[2]; // Store y-axis values into gy
 8080f52:	8562      	strh	r2, [r4, #42]	; 0x2a
		gz = (temp[5] << 8) | temp[4]; // Store z-axis values into gz
 8080f54:	85a3      	strh	r3, [r4, #44]	; 0x2c
		if (_autoCalc)
 8080f56:	b15d      	cbz	r5, 8080f70 <_ZN7LSM9DS18readGyroEv+0x5e>
		{
			gx -= gBiasRaw[X_AXIS];
 8080f58:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8080f5c:	1b49      	subs	r1, r1, r5
 8080f5e:	8521      	strh	r1, [r4, #40]	; 0x28
			gy -= gBiasRaw[Y_AXIS];
 8080f60:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 8080f64:	1a52      	subs	r2, r2, r1
 8080f66:	8562      	strh	r2, [r4, #42]	; 0x2a
			gz -= gBiasRaw[Z_AXIS];
 8080f68:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 8080f6c:	1a9b      	subs	r3, r3, r2
 8080f6e:	85a3      	strh	r3, [r4, #44]	; 0x2c
		}
	}
	
	return status;
}
 8080f70:	b003      	add	sp, #12
 8080f72:	bd30      	pop	{r4, r5, pc}

08080f74 <_ZN7LSM9DS110mReadBytesEhPhh>:
	else if (settings.device.commInterface == IMU_MODE_SPI)
		return SPIreadByte(_mAddress, subAddress);
}

uint8_t LSM9DS1::mReadBytes(uint8_t subAddress, uint8_t * dest, uint8_t count)
{
 8080f74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080f76:	460d      	mov	r5, r1
	// Whether we're using I2C or SPI, read multiple bytes using the
	// accelerometer-specific I2C address or SPI CS pin.
	if (settings.device.commInterface == IMU_MODE_I2C)
 8080f78:	7801      	ldrb	r1, [r0, #0]
 8080f7a:	2901      	cmp	r1, #1
 8080f7c:	d107      	bne.n	8080f8e <_ZN7LSM9DS110mReadBytesEhPhh+0x1a>
		return I2CreadBytes(_mAddress, subAddress, dest, count);
 8080f7e:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 8080f82:	9300      	str	r3, [sp, #0]
 8080f84:	4613      	mov	r3, r2
 8080f86:	462a      	mov	r2, r5
 8080f88:	f7ff ff23 	bl	8080dd2 <_ZN7LSM9DS112I2CreadBytesEhhPhh>
 8080f8c:	e007      	b.n	8080f9e <_ZN7LSM9DS110mReadBytesEhPhh+0x2a>
	else if (settings.device.commInterface == IMU_MODE_SPI)
 8080f8e:	b931      	cbnz	r1, 8080f9e <_ZN7LSM9DS110mReadBytesEhPhh+0x2a>
		return SPIreadBytes(_mAddress, subAddress, dest, count);
 8080f90:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
 8080f94:	9300      	str	r3, [sp, #0]
 8080f96:	4613      	mov	r3, r2
 8080f98:	462a      	mov	r2, r5
 8080f9a:	f7ff fd3b 	bl	8080a14 <_ZN7LSM9DS112SPIreadBytesEhhPhh>
}
 8080f9e:	b003      	add	sp, #12
 8080fa0:	bd30      	pop	{r4, r5, pc}

08080fa2 <_ZN7LSM9DS17readMagEv>:
	else
		return 0;
}

uint8_t LSM9DS1::readMag()
{
 8080fa2:	b513      	push	{r0, r1, r4, lr}
	uint8_t temp[6]; // We'll read six bytes from the mag into temp	
	uint8_t status = mReadBytes(OUT_X_L_M, temp, 6); // Read 6 bytes, beginning at OUT_X_L_M
 8080fa4:	2306      	movs	r3, #6
 8080fa6:	466a      	mov	r2, sp
 8080fa8:	2128      	movs	r1, #40	; 0x28
	else
		return 0;
}

uint8_t LSM9DS1::readMag()
{
 8080faa:	4604      	mov	r4, r0
	uint8_t temp[6]; // We'll read six bytes from the mag into temp	
	uint8_t status = mReadBytes(OUT_X_L_M, temp, 6); // Read 6 bytes, beginning at OUT_X_L_M
 8080fac:	f7ff ffe2 	bl	8080f74 <_ZN7LSM9DS110mReadBytesEhPhh>
	
	if (status)
 8080fb0:	b1a0      	cbz	r0, 8080fdc <_ZN7LSM9DS17readMagEv+0x3a>
	{
		mx = (temp[1] << 8) | temp[0]; // Store x-axis values into mx
 8080fb2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8080fb6:	f89d 3000 	ldrb.w	r3, [sp]
 8080fba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8080fbe:	86a3      	strh	r3, [r4, #52]	; 0x34
		my = (temp[3] << 8) | temp[2]; // Store y-axis values into my
 8080fc0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8080fc4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8080fc8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8080fcc:	86e3      	strh	r3, [r4, #54]	; 0x36
		mz = (temp[5] << 8) | temp[4]; // Store z-axis values into mz
 8080fce:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8080fd2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8080fd6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8080fda:	8723      	strh	r3, [r4, #56]	; 0x38
	}
	
	return status;
}
 8080fdc:	b002      	add	sp, #8
 8080fde:	bd10      	pop	{r4, pc}

08080fe0 <_GLOBAL__sub_I_magSensitivity>:
 8080fe0:	f00f be12 	b.w	8090c08 <HAL_Pin_Map>

08080fe4 <_GLOBAL__sub_I__ZN7istream3getEv>:
 8080fe4:	f00f be10 	b.w	8090c08 <HAL_Pin_Map>

08080fe8 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
 8080fe8:	b510      	push	{r4, lr}
 8080fea:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync();
 8080fec:	3028      	adds	r0, #40	; 0x28
 8080fee:	f000 fccb 	bl	8081988 <_ZN8FatCache4syncEv>
 8080ff2:	b128      	cbz	r0, 8081000 <_ZN9FatVolume9cacheSyncEv+0x18>
 8080ff4:	f504 700d 	add.w	r0, r4, #564	; 0x234
  }
 8080ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync();
 8080ffc:	f000 bcc4 	b.w	8081988 <_ZN8FatCache4syncEv>
  }
 8081000:	bd10      	pop	{r4, pc}

08081002 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
 8081002:	f00f be01 	b.w	8090c08 <HAL_Pin_Map>

08081006 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
 8081006:	f00f bdff 	b.w	8090c08 <HAL_Pin_Map>

0808100a <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
 808100a:	f00f bdfd 	b.w	8090c08 <HAL_Pin_Map>

0808100e <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
 808100e:	f00f bdfb 	b.w	8090c08 <HAL_Pin_Map>

08081012 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spi->receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spi->send(data);
 8081012:	6803      	ldr	r3, [r0, #0]
 8081014:	695b      	ldr	r3, [r3, #20]
 8081016:	4718      	bx	r3

08081018 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>:
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
  }
  uint8_t spiReceive() {
    return m_spi->receive();
 8081018:	6803      	ldr	r3, [r0, #0]
 808101a:	68db      	ldr	r3, [r3, #12]
 808101c:	4718      	bx	r3

0808101e <_ZN9SdSpiCard14chipSelectHighEv>:
    error(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectHigh() {
 808101e:	b510      	push	{r4, lr}
  if (!m_selected) {
 8081020:	7903      	ldrb	r3, [r0, #4]
    error(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectHigh() {
 8081022:	4604      	mov	r4, r0
  if (!m_selected) {
 8081024:	b16b      	cbz	r3, 8081042 <_ZN9SdSpiCard14chipSelectHighEv+0x24>
    SD_CS_DBG("chipSelectHigh error");
    return;
  }
  digitalWrite(m_chipSelectPin, HIGH);
 8081026:	2101      	movs	r1, #1
 8081028:	7940      	ldrb	r0, [r0, #5]
 808102a:	f011 f9a6 	bl	809237a <digitalWrite>
  // insure MISO goes high impedance
  spiSend(0XFF);
 808102e:	21ff      	movs	r1, #255	; 0xff
 8081030:	6820      	ldr	r0, [r4, #0]
 8081032:	f7ff ffee 	bl	8081012 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
 8081036:	6820      	ldr	r0, [r4, #0]
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
 8081038:	6803      	ldr	r3, [r0, #0]
 808103a:	689b      	ldr	r3, [r3, #8]
 808103c:	4798      	blx	r3
  spiEndTransaction();
  m_selected = false;
 808103e:	2300      	movs	r3, #0
 8081040:	7123      	strb	r3, [r4, #4]
 8081042:	bd10      	pop	{r4, pc}

08081044 <_ZN9SdSpiCard13chipSelectLowEv>:
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectLow() {
 8081044:	b538      	push	{r3, r4, r5, lr}
  if (m_selected) {
 8081046:	7905      	ldrb	r5, [r0, #4]
  spiSend(0XFF);
  spiEndTransaction();
  m_selected = false;
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectLow() {
 8081048:	4604      	mov	r4, r0
  if (m_selected) {
 808104a:	b955      	cbnz	r5, 8081062 <_ZN9SdSpiCard13chipSelectLowEv+0x1e>
 808104c:	6800      	ldr	r0, [r0, #0]
  bool writeData(uint8_t token, const uint8_t* src);
  void spiBegin(uint8_t chipSelectPin) {
    m_spi->begin(chipSelectPin);
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
 808104e:	79e1      	ldrb	r1, [r4, #7]
 8081050:	6803      	ldr	r3, [r0, #0]
 8081052:	685b      	ldr	r3, [r3, #4]
 8081054:	4798      	blx	r3
    SD_CS_DBG("chipSelectLow error");
    return;
  }
  spiBeginTransaction(m_sckDivisor);
  digitalWrite(m_chipSelectPin, LOW);
 8081056:	4629      	mov	r1, r5
 8081058:	7960      	ldrb	r0, [r4, #5]
 808105a:	f011 f98e 	bl	809237a <digitalWrite>
  m_selected = true;
 808105e:	2301      	movs	r3, #1
 8081060:	7123      	strb	r3, [r4, #4]
 8081062:	bd38      	pop	{r3, r4, r5, pc}

08081064 <_ZN9SdSpiCard8readDataEPhj>:
    chipSelectHigh();
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
 8081064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081066:	4604      	mov	r4, r0
 8081068:	460d      	mov	r5, r1
 808106a:	4616      	mov	r6, r2
 808106c:	f00f fe4c 	bl	8090d08 <HAL_Timer_Get_Milli_Seconds>
 8081070:	4607      	mov	r7, r0
#if USE_SD_CRC
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start block token
  unsigned t0 = millis();
  while ((m_status = spiReceive()) == 0XFF) {
 8081072:	6820      	ldr	r0, [r4, #0]
 8081074:	f7ff ffd0 	bl	8081018 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8081078:	28ff      	cmp	r0, #255	; 0xff
 808107a:	7220      	strb	r0, [r4, #8]
 808107c:	d107      	bne.n	808108e <_ZN9SdSpiCard8readDataEPhj+0x2a>
 808107e:	f00f fe43 	bl	8090d08 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_READ_TIMEOUT) {
 8081082:	1bc0      	subs	r0, r0, r7
 8081084:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 8081088:	d9f3      	bls.n	8081072 <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 808108a:	2311      	movs	r3, #17
 808108c:	e00c      	b.n	80810a8 <_ZN9SdSpiCard8readDataEPhj+0x44>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (m_status != DATA_START_BLOCK) {
 808108e:	28fe      	cmp	r0, #254	; 0xfe
 8081090:	d001      	beq.n	8081096 <_ZN9SdSpiCard8readDataEPhj+0x32>
 8081092:	230f      	movs	r3, #15
 8081094:	e008      	b.n	80810a8 <_ZN9SdSpiCard8readDataEPhj+0x44>
 8081096:	6820      	ldr	r0, [r4, #0]
  }
  uint8_t spiReceive() {
    return m_spi->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spi->receive(buf, n);
 8081098:	4632      	mov	r2, r6
 808109a:	6803      	ldr	r3, [r0, #0]
 808109c:	4629      	mov	r1, r5
 808109e:	691b      	ldr	r3, [r3, #16]
 80810a0:	4798      	blx	r3
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
 80810a2:	7220      	strb	r0, [r4, #8]
 80810a4:	b130      	cbz	r0, 80810b4 <_ZN9SdSpiCard8readDataEPhj+0x50>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80810a6:	231c      	movs	r3, #28
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  chipSelectHigh();
 80810a8:	4620      	mov	r0, r4
 80810aa:	71a3      	strb	r3, [r4, #6]
 80810ac:	f7ff ffb7 	bl	808101e <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 80810b0:	2000      	movs	r0, #0
}
 80810b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    error(SD_CARD_ERROR_READ_CRC);
    goto fail;
  }
#else
  // discard crc
  spiReceive();
 80810b4:	6820      	ldr	r0, [r4, #0]
 80810b6:	f7ff ffaf 	bl	8081018 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
  spiReceive();
 80810ba:	6820      	ldr	r0, [r4, #0]
 80810bc:	f7ff ffac 	bl	8081018 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 80810c0:	2001      	movs	r0, #1
 80810c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080810c4 <_ZN9SdSpiCard11waitNotBusyEt>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMillis) {
 80810c4:	b570      	push	{r4, r5, r6, lr}
 80810c6:	4606      	mov	r6, r0
 80810c8:	460c      	mov	r4, r1
 80810ca:	f00f fe1d 	bl	8090d08 <HAL_Timer_Get_Milli_Seconds>
 80810ce:	4605      	mov	r5, r0
  unsigned t0 = millis();
  while (spiReceive() != 0XFF) {
 80810d0:	6830      	ldr	r0, [r6, #0]
 80810d2:	f7ff ffa1 	bl	8081018 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 80810d6:	28ff      	cmp	r0, #255	; 0xff
 80810d8:	d006      	beq.n	80810e8 <_ZN9SdSpiCard11waitNotBusyEt+0x24>
 80810da:	f00f fe15 	bl	8090d08 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) >= timeoutMillis) {
 80810de:	1b40      	subs	r0, r0, r5
 80810e0:	42a0      	cmp	r0, r4
 80810e2:	d3f5      	bcc.n	80810d0 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
    }
  }
  return true;

fail:
  return false;
 80810e4:	2000      	movs	r0, #0
 80810e6:	bd70      	pop	{r4, r5, r6, pc}
  while (spiReceive() != 0XFF) {
    if (((unsigned)millis() - t0) >= timeoutMillis) {
      goto fail;
    }
  }
  return true;
 80810e8:	2001      	movs	r0, #1

fail:
  return false;
}
 80810ea:	bd70      	pop	{r4, r5, r6, pc}

080810ec <_ZN9SdSpiCard11cardCommandEhm>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 80810ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_selected) {
 80810ee:	7903      	ldrb	r3, [r0, #4]
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 80810f0:	4604      	mov	r4, r0
 80810f2:	460d      	mov	r5, r1
 80810f4:	9201      	str	r2, [sp, #4]
  // select card
  if (!m_selected) {
 80810f6:	b90b      	cbnz	r3, 80810fc <_ZN9SdSpiCard11cardCommandEhm+0x10>
    chipSelectLow();
 80810f8:	f7ff ffa4 	bl	8081044 <_ZN9SdSpiCard13chipSelectLowEv>
  }
  // wait if busy
  waitNotBusy(SD_WRITE_TIMEOUT);
 80810fc:	f44f 7116 	mov.w	r1, #600	; 0x258
 8081100:	4620      	mov	r0, r4
 8081102:	f7ff ffdf 	bl	80810c4 <_ZN9SdSpiCard11waitNotBusyEt>
  for (uint8_t k = 0; k < 6; k++) {
    spiSend(d[k]);
  }
#else  // USE_SD_CRC
  // send command
  spiSend(cmd | 0x40);
 8081106:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 808110a:	6820      	ldr	r0, [r4, #0]
 808110c:	f7ff ff81 	bl	8081012 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
 8081110:	f10d 0607 	add.w	r6, sp, #7
 8081114:	f10d 0703 	add.w	r7, sp, #3

  // send argument
  for (int8_t i = 3; i >= 0; i--) {
    spiSend(pa[i]);
 8081118:	f816 1901 	ldrb.w	r1, [r6], #-1
 808111c:	6820      	ldr	r0, [r4, #0]
 808111e:	f7ff ff78 	bl	8081012 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
#else  // USE_SD_CRC
  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t i = 3; i >= 0; i--) {
 8081122:	42be      	cmp	r6, r7
 8081124:	d1f8      	bne.n	8081118 <_ZN9SdSpiCard11cardCommandEhm+0x2c>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 8081126:	2d00      	cmp	r5, #0
 8081128:	bf0c      	ite	eq
 808112a:	2195      	moveq	r1, #149	; 0x95
 808112c:	2187      	movne	r1, #135	; 0x87
 808112e:	6820      	ldr	r0, [r4, #0]
 8081130:	f7ff ff6f 	bl	8081012 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
#endif  // USE_SD_CRC

  // skip stuff byte for stop read
  if (cmd == CMD12) {
 8081134:	2d0c      	cmp	r5, #12
 8081136:	d102      	bne.n	808113e <_ZN9SdSpiCard11cardCommandEhm+0x52>
    spiReceive();
 8081138:	6820      	ldr	r0, [r4, #0]
 808113a:	f7ff ff6d 	bl	8081018 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
  for (int8_t i = 3; i >= 0; i--) {
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 808113e:	2500      	movs	r5, #0
  if (cmd == CMD12) {
    spiReceive();
  }

  // wait for response
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i != 0XFF; i++) {
 8081140:	6820      	ldr	r0, [r4, #0]
 8081142:	f7ff ff69 	bl	8081018 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8081146:	0603      	lsls	r3, r0, #24
 8081148:	7220      	strb	r0, [r4, #8]
 808114a:	d503      	bpl.n	8081154 <_ZN9SdSpiCard11cardCommandEhm+0x68>
 808114c:	3501      	adds	r5, #1
 808114e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8081152:	d1f5      	bne.n	8081140 <_ZN9SdSpiCard11cardCommandEhm+0x54>
  }
  return m_status;
}
 8081154:	b003      	add	sp, #12
 8081156:	bdf0      	pop	{r4, r5, r6, r7, pc}

08081158 <_ZN9SdSpiCard9readBlockEmPh>:
    chipSelectHigh();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8081158:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 808115a:	7a43      	ldrb	r3, [r0, #9]
    chipSelectHigh();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 808115c:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 808115e:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8081160:	bf18      	it	ne
 8081162:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD17, blockNumber)) {
 8081164:	460a      	mov	r2, r1
 8081166:	2111      	movs	r1, #17
    chipSelectHigh();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8081168:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
 808116a:	f7ff ffbf 	bl	80810ec <_ZN9SdSpiCard11cardCommandEhm>
 808116e:	b110      	cbz	r0, 8081176 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
 8081170:	2304      	movs	r3, #4
 8081172:	71a3      	strb	r3, [r4, #6]
 8081174:	e00b      	b.n	808118e <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
 8081176:	4629      	mov	r1, r5
 8081178:	f44f 7200 	mov.w	r2, #512	; 0x200
 808117c:	4620      	mov	r0, r4
 808117e:	f7ff ff71 	bl	8081064 <_ZN9SdSpiCard8readDataEPhj>
 8081182:	4605      	mov	r5, r0
 8081184:	b118      	cbz	r0, 808118e <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  chipSelectHigh();
 8081186:	4620      	mov	r0, r4
 8081188:	f7ff ff49 	bl	808101e <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 808118c:	e003      	b.n	8081196 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  chipSelectHigh();
 808118e:	4620      	mov	r0, r4
 8081190:	f7ff ff45 	bl	808101e <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8081194:	2500      	movs	r5, #0
}
 8081196:	4628      	mov	r0, r5
 8081198:	bd38      	pop	{r3, r4, r5, pc}

0808119a <_ZN9SdSpiCard9readStartEm>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 808119a:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 808119c:	7a43      	ldrb	r3, [r0, #9]
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 808119e:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 80811a0:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 80811a2:	bf18      	it	ne
 80811a4:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
 80811a6:	2112      	movs	r1, #18
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 80811a8:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
 80811aa:	f7ff ff9f 	bl	80810ec <_ZN9SdSpiCard11cardCommandEhm>
 80811ae:	b130      	cbz	r0, 80811be <_ZN9SdSpiCard9readStartEm+0x24>
 80811b0:	2305      	movs	r3, #5
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 80811b2:	4620      	mov	r0, r4
 80811b4:	71a3      	strb	r3, [r4, #6]
 80811b6:	f7ff ff32 	bl	808101e <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 80811ba:	2000      	movs	r0, #0
 80811bc:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
  return true;
 80811be:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 80811c0:	bd10      	pop	{r4, pc}

080811c2 <_ZN9SdSpiCard8readStopEv>:
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 80811c2:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
 80811c4:	2200      	movs	r2, #0
 80811c6:	210c      	movs	r1, #12
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 80811c8:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
 80811ca:	f7ff ff8f 	bl	80810ec <_ZN9SdSpiCard11cardCommandEhm>
 80811ce:	b130      	cbz	r0, 80811de <_ZN9SdSpiCard8readStopEv+0x1c>
 80811d0:	2303      	movs	r3, #3
  }
  chipSelectHigh();
  return true;

fail:
  chipSelectHigh();
 80811d2:	4620      	mov	r0, r4
 80811d4:	71a3      	strb	r3, [r4, #6]
 80811d6:	f7ff ff22 	bl	808101e <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 80811da:	2000      	movs	r0, #0
 80811dc:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  chipSelectHigh();
 80811de:	4620      	mov	r0, r4
 80811e0:	f7ff ff1d 	bl	808101e <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 80811e4:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 80811e6:	bd10      	pop	{r4, pc}

080811e8 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
 80811e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80811ea:	4605      	mov	r5, r0
 80811ec:	4616      	mov	r6, r2
 80811ee:	461f      	mov	r7, r3
  if (!readStart(block)) {
 80811f0:	f7ff ffd3 	bl	808119a <_ZN9SdSpiCard9readStartEm>
 80811f4:	b198      	cbz	r0, 808121e <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
 80811f6:	2400      	movs	r4, #0
 80811f8:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
 80811fa:	429f      	cmp	r7, r3
 80811fc:	eb06 2144 	add.w	r1, r6, r4, lsl #9
 8081200:	d908      	bls.n	8081214 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
 8081202:	f44f 7200 	mov.w	r2, #512	; 0x200
 8081206:	4628      	mov	r0, r5
 8081208:	f7ff ff2c 	bl	8081064 <_ZN9SdSpiCard8readDataEPhj>
 808120c:	3401      	adds	r4, #1
 808120e:	2800      	cmp	r0, #0
 8081210:	d1f2      	bne.n	80811f8 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
 8081212:	e004      	b.n	808121e <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
 8081214:	4628      	mov	r0, r5
}
 8081216:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
 808121a:	f7ff bfd2 	b.w	80811c2 <_ZN9SdSpiCard8readStopEv>
}
 808121e:	2000      	movs	r0, #0
 8081220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081222 <_ZN9SdSpiCard9writeDataEhPKh>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
 8081222:	b538      	push	{r3, r4, r5, lr}
 8081224:	4604      	mov	r4, r0
 8081226:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
 8081228:	6800      	ldr	r0, [r0, #0]
 808122a:	f7ff fef2 	bl	8081012 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
 808122e:	6820      	ldr	r0, [r4, #0]
  }
  void spiSend(uint8_t data) {
    m_spi->send(data);
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spi->send(buf, n);
 8081230:	f44f 7200 	mov.w	r2, #512	; 0x200
 8081234:	6803      	ldr	r3, [r0, #0]
 8081236:	4629      	mov	r1, r5
 8081238:	699b      	ldr	r3, [r3, #24]
 808123a:	4798      	blx	r3
  spiSend(src, 512);
  spiSend(crc >> 8);
 808123c:	21ff      	movs	r1, #255	; 0xff
 808123e:	6820      	ldr	r0, [r4, #0]
 8081240:	f7ff fee7 	bl	8081012 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
  spiSend(crc & 0XFF);
 8081244:	21ff      	movs	r1, #255	; 0xff
 8081246:	6820      	ldr	r0, [r4, #0]
 8081248:	f7ff fee3 	bl	8081012 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>

  m_status = spiReceive();
 808124c:	6820      	ldr	r0, [r4, #0]
 808124e:	f7ff fee3 	bl	8081018 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8081252:	7220      	strb	r0, [r4, #8]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 8081254:	f000 001f 	and.w	r0, r0, #31
 8081258:	2805      	cmp	r0, #5
 808125a:	d006      	beq.n	808126a <_ZN9SdSpiCard9writeDataEhPKh+0x48>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 808125c:	2313      	movs	r3, #19
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 808125e:	4620      	mov	r0, r4
 8081260:	71a3      	strb	r3, [r4, #6]
 8081262:	f7ff fedc 	bl	808101e <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8081266:	2000      	movs	r0, #0
 8081268:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
 808126a:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 808126c:	bd38      	pop	{r3, r4, r5, pc}

0808126e <_ZN9SdSpiCard10writeBlockEmPKh>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 808126e:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8081270:	7a43      	ldrb	r3, [r0, #9]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8081272:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8081274:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8081276:	bf18      	it	ne
 8081278:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD24, blockNumber)) {
 808127a:	460a      	mov	r2, r1
 808127c:	2118      	movs	r1, #24

fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 808127e:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
 8081280:	f7ff ff34 	bl	80810ec <_ZN9SdSpiCard11cardCommandEhm>
 8081284:	b110      	cbz	r0, 808128c <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
 8081286:	2306      	movs	r3, #6
 8081288:	71a3      	strb	r3, [r4, #6]
 808128a:	e00a      	b.n	80812a2 <_ZN9SdSpiCard10writeBlockEmPKh+0x34>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
 808128c:	462a      	mov	r2, r5
 808128e:	21fe      	movs	r1, #254	; 0xfe
 8081290:	4620      	mov	r0, r4
 8081292:	f7ff ffc6 	bl	8081222 <_ZN9SdSpiCard9writeDataEhPKh>
 8081296:	4605      	mov	r5, r0
 8081298:	b118      	cbz	r0, 80812a2 <_ZN9SdSpiCard10writeBlockEmPKh+0x34>
    error(SD_CARD_ERROR_WRITE_PROGRAMMING);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  chipSelectHigh();
 808129a:	4620      	mov	r0, r4
 808129c:	f7ff febf 	bl	808101e <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 80812a0:	e003      	b.n	80812aa <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>

fail:
  chipSelectHigh();
 80812a2:	4620      	mov	r0, r4
 80812a4:	f7ff febb 	bl	808101e <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 80812a8:	2500      	movs	r5, #0
}
 80812aa:	4628      	mov	r0, r5
 80812ac:	bd38      	pop	{r3, r4, r5, pc}

080812ae <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
 80812ae:	b570      	push	{r4, r5, r6, lr}
 80812b0:	4604      	mov	r4, r0
 80812b2:	460d      	mov	r5, r1
  bool selected = m_selected;
 80812b4:	7906      	ldrb	r6, [r0, #4]
  chipSelectLow();
 80812b6:	f7ff fec5 	bl	8081044 <_ZN9SdSpiCard13chipSelectLowEv>
  // wait for previous write to finish
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 80812ba:	f44f 7116 	mov.w	r1, #600	; 0x258
 80812be:	4620      	mov	r0, r4
 80812c0:	f7ff ff00 	bl	80810c4 <_ZN9SdSpiCard11waitNotBusyEt>
 80812c4:	b910      	cbnz	r0, 80812cc <_ZN9SdSpiCard9writeDataEPKh+0x1e>
 80812c6:	2317      	movs	r3, #23
 80812c8:	71a3      	strb	r3, [r4, #6]
 80812ca:	e00b      	b.n	80812e4 <_ZN9SdSpiCard9writeDataEPKh+0x36>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
 80812cc:	462a      	mov	r2, r5
 80812ce:	21fc      	movs	r1, #252	; 0xfc
 80812d0:	4620      	mov	r0, r4
 80812d2:	f7ff ffa6 	bl	8081222 <_ZN9SdSpiCard9writeDataEhPKh>
 80812d6:	4605      	mov	r5, r0
 80812d8:	b120      	cbz	r0, 80812e4 <_ZN9SdSpiCard9writeDataEPKh+0x36>
    goto fail;
  }
  if (!selected) {
 80812da:	b93e      	cbnz	r6, 80812ec <_ZN9SdSpiCard9writeDataEPKh+0x3e>
    chipSelectHigh();
 80812dc:	4620      	mov	r0, r4
 80812de:	f7ff fe9e 	bl	808101e <_ZN9SdSpiCard14chipSelectHighEv>
 80812e2:	e003      	b.n	80812ec <_ZN9SdSpiCard9writeDataEPKh+0x3e>
  }
  return true;

fail:
  chipSelectHigh();
 80812e4:	4620      	mov	r0, r4
 80812e6:	f7ff fe9a 	bl	808101e <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 80812ea:	2500      	movs	r5, #0
}
 80812ec:	4628      	mov	r0, r5
 80812ee:	bd70      	pop	{r4, r5, r6, pc}

080812f0 <_ZN9SdSpiCard10writeStartEmm>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber, uint32_t eraseCount) {
 80812f0:	b570      	push	{r4, r5, r6, lr}
 80812f2:	4604      	mov	r4, r0
 80812f4:	4616      	mov	r6, r2
 80812f6:	460d      	mov	r5, r1
  bool writeStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
 80812f8:	2200      	movs	r2, #0
 80812fa:	2137      	movs	r1, #55	; 0x37
 80812fc:	f7ff fef6 	bl	80810ec <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 8081300:	4632      	mov	r2, r6
 8081302:	2117      	movs	r1, #23
 8081304:	4620      	mov	r0, r4
 8081306:	f7ff fef1 	bl	80810ec <_ZN9SdSpiCard11cardCommandEhm>
  SD_TRACE("WS", blockNumber);
  // send pre-erase count
  if (cardAcmd(ACMD23, eraseCount)) {
 808130a:	b108      	cbz	r0, 8081310 <_ZN9SdSpiCard10writeStartEmm+0x20>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 808130c:	2309      	movs	r3, #9
 808130e:	e00a      	b.n	8081326 <_ZN9SdSpiCard10writeStartEmm+0x36>
    error(SD_CARD_ERROR_ACMD23);
    goto fail;
  }
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8081310:	7a63      	ldrb	r3, [r4, #9]
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
 8081312:	2119      	movs	r1, #25
  if (cardAcmd(ACMD23, eraseCount)) {
    error(SD_CARD_ERROR_ACMD23);
    goto fail;
  }
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8081314:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8081316:	bf18      	it	ne
 8081318:	026d      	lslne	r5, r5, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
 808131a:	462a      	mov	r2, r5
 808131c:	4620      	mov	r0, r4
 808131e:	f7ff fee5 	bl	80810ec <_ZN9SdSpiCard11cardCommandEhm>
 8081322:	b130      	cbz	r0, 8081332 <_ZN9SdSpiCard10writeStartEmm+0x42>
 8081324:	2307      	movs	r3, #7
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8081326:	4620      	mov	r0, r4
 8081328:	71a3      	strb	r3, [r4, #6]
 808132a:	f7ff fe78 	bl	808101e <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 808132e:	2000      	movs	r0, #0
 8081330:	bd70      	pop	{r4, r5, r6, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
 8081332:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 8081334:	bd70      	pop	{r4, r5, r6, pc}

08081336 <_ZN9SdSpiCard9writeStopEv>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 8081336:	b538      	push	{r3, r4, r5, lr}
 8081338:	4604      	mov	r4, r0
  chipSelectLow();
 808133a:	f7ff fe83 	bl	8081044 <_ZN9SdSpiCard13chipSelectLowEv>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 808133e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8081342:	4620      	mov	r0, r4
 8081344:	f7ff febe 	bl	80810c4 <_ZN9SdSpiCard11waitNotBusyEt>
 8081348:	b170      	cbz	r0, 8081368 <_ZN9SdSpiCard9writeStopEv+0x32>
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
 808134a:	21fd      	movs	r1, #253	; 0xfd
 808134c:	6820      	ldr	r0, [r4, #0]
 808134e:	f7ff fe60 	bl	8081012 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8081352:	f44f 7116 	mov.w	r1, #600	; 0x258
 8081356:	4620      	mov	r0, r4
 8081358:	f7ff feb4 	bl	80810c4 <_ZN9SdSpiCard11waitNotBusyEt>
 808135c:	4605      	mov	r5, r0
 808135e:	b118      	cbz	r0, 8081368 <_ZN9SdSpiCard9writeStopEv+0x32>
    goto fail;
  }
  chipSelectHigh();
 8081360:	4620      	mov	r0, r4
 8081362:	f7ff fe5c 	bl	808101e <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8081366:	e005      	b.n	8081374 <_ZN9SdSpiCard9writeStopEv+0x3e>
 8081368:	2312      	movs	r3, #18
 808136a:	71a3      	strb	r3, [r4, #6]

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
 808136c:	4620      	mov	r0, r4
 808136e:	f7ff fe56 	bl	808101e <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8081372:	2500      	movs	r5, #0
}
 8081374:	4628      	mov	r0, r5
 8081376:	bd38      	pop	{r3, r4, r5, pc}

08081378 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 8081378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808137a:	4617      	mov	r7, r2
  if (!writeStart(block, count)) {
 808137c:	461a      	mov	r2, r3
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 808137e:	4605      	mov	r5, r0
 8081380:	461e      	mov	r6, r3
  if (!writeStart(block, count)) {
 8081382:	f7ff ffb5 	bl	80812f0 <_ZN9SdSpiCard10writeStartEmm>
 8081386:	b170      	cbz	r0, 80813a6 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
 8081388:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 808138a:	42b4      	cmp	r4, r6
 808138c:	eb07 2144 	add.w	r1, r7, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 8081390:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block, count)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8081392:	d004      	beq.n	808139e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x26>
    if (!writeData(src)) {
 8081394:	f7ff ff8b 	bl	80812ae <_ZN9SdSpiCard9writeDataEPKh>
 8081398:	b128      	cbz	r0, 80813a6 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block, count)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 808139a:	3401      	adds	r4, #1
 808139c:	e7f5      	b.n	808138a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x12>
  return writeStop();

 fail:
  chipSelectHigh();
  return false;
}
 808139e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 80813a2:	f7ff bfc8 	b.w	8081336 <_ZN9SdSpiCard9writeStopEv>

 fail:
  chipSelectHigh();
 80813a6:	4628      	mov	r0, r5
 80813a8:	f7ff fe39 	bl	808101e <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
}
 80813ac:	2000      	movs	r0, #0
 80813ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080813b0 <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP9SdSpiBasehh>:
 80813b0:	f00f bc2a 	b.w	8090c08 <HAL_Pin_Map>

080813b4 <_Z36SD_SPI_DMA_TransferComplete_Callbackv>:
#if SPI_INTERFACE_COUNT == 1
const uint8_t m_spiIf = 0;
#endif
//-----------------------------------------------------------------------------
void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
 80813b4:	4b01      	ldr	r3, [pc, #4]	; (80813bc <_Z36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 80813b6:	2201      	movs	r2, #1
 80813b8:	701a      	strb	r2, [r3, #0]
 80813ba:	4770      	bx	lr
 80813bc:	200005ec 	.word	0x200005ec

080813c0 <_ZN5SdSpi14endTransactionEv>:
#endif  // SPI_CLOCK_DIV128
  // delay for SPI transfer done callback too soon bug.
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
}
//-----------------------------------------------------------------------------
void SdSpi::endTransaction() {
 80813c0:	4770      	bx	lr
	...

080813c4 <_ZN5SdSpi5beginEh>:
void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
}
//------------------------------------------------------------------------------
void SdSpi::begin(uint8_t chipSelectPin) {
  spiPtr[m_spiIf]->begin(chipSelectPin);
 80813c4:	7902      	ldrb	r2, [r0, #4]
 80813c6:	4b02      	ldr	r3, [pc, #8]	; (80813d0 <_ZN5SdSpi5beginEh+0xc>)
 80813c8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80813cc:	f00f bf25 	b.w	809121a <_ZN8SPIClass5beginEt>
 80813d0:	080964c4 	.word	0x080964c4

080813d4 <_ZN5SdSpi16beginTransactionEh>:
}
//------------------------------------------------------------------------------
void SdSpi::beginTransaction(uint8_t divisor) {
 80813d4:	b570      	push	{r4, r5, r6, lr}
 80813d6:	4606      	mov	r6, r0
 80813d8:	460c      	mov	r4, r1
  spiPtr[m_spiIf]->setBitOrder(MSBFIRST);
 80813da:	7903      	ldrb	r3, [r0, #4]
 80813dc:	4d1a      	ldr	r5, [pc, #104]	; (8081448 <_ZN5SdSpi16beginTransactionEh+0x74>)
 80813de:	2101      	movs	r1, #1
 80813e0:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 80813e4:	f00f ff1f 	bl	8091226 <_ZN8SPIClass11setBitOrderEh>
  spiPtr[m_spiIf]->setDataMode(SPI_MODE0);
 80813e8:	7933      	ldrb	r3, [r6, #4]
 80813ea:	2100      	movs	r1, #0
 80813ec:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 80813f0:	f00f ff1c 	bl	809122c <_ZN8SPIClass11setDataModeEh>
#ifndef SPI_CLOCK_DIV128
  spiPtr[m_spiIf]->setClockDivider(divisor);
#else  // SPI_CLOCK_DIV128
  int v;
  if (divisor <= 2) {
 80813f4:	2c02      	cmp	r4, #2
 80813f6:	d90c      	bls.n	8081412 <_ZN5SdSpi16beginTransactionEh+0x3e>
    v = SPI_CLOCK_DIV2;
  } else  if (divisor <= 4) {
 80813f8:	2c04      	cmp	r4, #4
 80813fa:	d90c      	bls.n	8081416 <_ZN5SdSpi16beginTransactionEh+0x42>
    v = SPI_CLOCK_DIV4;
  } else  if (divisor <= 8) {
 80813fc:	2c08      	cmp	r4, #8
 80813fe:	d90c      	bls.n	808141a <_ZN5SdSpi16beginTransactionEh+0x46>
    v = SPI_CLOCK_DIV8;
  } else  if (divisor <= 16) {
 8081400:	2c10      	cmp	r4, #16
 8081402:	d90c      	bls.n	808141e <_ZN5SdSpi16beginTransactionEh+0x4a>
    v = SPI_CLOCK_DIV16;
  } else  if (divisor <= 32) {
 8081404:	2c20      	cmp	r4, #32
 8081406:	d90c      	bls.n	8081422 <_ZN5SdSpi16beginTransactionEh+0x4e>
    v = SPI_CLOCK_DIV32;
  } else  if (divisor <= 64) {
    v = SPI_CLOCK_DIV64;
  } else {
    v = SPI_CLOCK_DIV128;
 8081408:	2c41      	cmp	r4, #65	; 0x41
 808140a:	bf34      	ite	cc
 808140c:	2128      	movcc	r1, #40	; 0x28
 808140e:	2130      	movcs	r1, #48	; 0x30
 8081410:	e008      	b.n	8081424 <_ZN5SdSpi16beginTransactionEh+0x50>
#ifndef SPI_CLOCK_DIV128
  spiPtr[m_spiIf]->setClockDivider(divisor);
#else  // SPI_CLOCK_DIV128
  int v;
  if (divisor <= 2) {
    v = SPI_CLOCK_DIV2;
 8081412:	2100      	movs	r1, #0
 8081414:	e006      	b.n	8081424 <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 4) {
    v = SPI_CLOCK_DIV4;
 8081416:	2108      	movs	r1, #8
 8081418:	e004      	b.n	8081424 <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 8) {
    v = SPI_CLOCK_DIV8;
 808141a:	2110      	movs	r1, #16
 808141c:	e002      	b.n	8081424 <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 16) {
    v = SPI_CLOCK_DIV16;
 808141e:	2118      	movs	r1, #24
 8081420:	e000      	b.n	8081424 <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 32) {
    v = SPI_CLOCK_DIV32;
 8081422:	2120      	movs	r1, #32
  } else  if (divisor <= 64) {
    v = SPI_CLOCK_DIV64;
  } else {
    v = SPI_CLOCK_DIV128;
  }
  spiPtr[m_spiIf]->setClockDivider(v);
 8081424:	7933      	ldrb	r3, [r6, #4]
 8081426:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 808142a:	f00f ff49 	bl	80912c0 <_ZN8SPIClass15setClockDividerEh>
#endif  // SPI_CLOCK_DIV128
  // delay for SPI transfer done callback too soon bug.
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
 808142e:	2318      	movs	r3, #24
 8081430:	fb03 f104 	mul.w	r1, r3, r4
 8081434:	7932      	ldrb	r2, [r6, #4]
 8081436:	233c      	movs	r3, #60	; 0x3c
 8081438:	fb02 1101 	mla	r1, r2, r1, r1
 808143c:	fb91 f1f3 	sdiv	r1, r1, r3
 8081440:	4b02      	ldr	r3, [pc, #8]	; (808144c <_ZN5SdSpi16beginTransactionEh+0x78>)
 8081442:	6019      	str	r1, [r3, #0]
 8081444:	bd70      	pop	{r4, r5, r6, pc}
 8081446:	bf00      	nop
 8081448:	080964c4 	.word	0x080964c4
 808144c:	200005f0 	.word	0x200005f0

08081450 <_ZN5SdSpi7receiveEv>:
void SdSpi::endTransaction() {
}
//-----------------------------------------------------------------------------
/** SPI receive a byte */
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
 8081450:	7902      	ldrb	r2, [r0, #4]
 8081452:	4b03      	ldr	r3, [pc, #12]	; (8081460 <_ZN5SdSpi7receiveEv+0x10>)
 8081454:	21ff      	movs	r1, #255	; 0xff
 8081456:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 808145a:	f00f bf45 	b.w	80912e8 <_ZN8SPIClass8transferEh>
 808145e:	bf00      	nop
 8081460:	080964c4 	.word	0x080964c4

08081464 <_ZN5SdSpi4sendEh>:
  return 0;
}
//-----------------------------------------------------------------------------
/** SPI send a byte */
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
 8081464:	7902      	ldrb	r2, [r0, #4]
 8081466:	4b02      	ldr	r3, [pc, #8]	; (8081470 <_ZN5SdSpi4sendEh+0xc>)
 8081468:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 808146c:	f00f bf3c 	b.w	80912e8 <_ZN8SPIClass8transferEh>
 8081470:	080964c4 	.word	0x080964c4

08081474 <_ZN5SdSpi7receiveEPhj>:
/** SPI receive a byte */
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
}
//-----------------------------------------------------------------------------
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
 8081474:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SPI_DMA_TransferCompleted = false;
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8081476:	4b0c      	ldr	r3, [pc, #48]	; (80814a8 <_ZN5SdSpi7receiveEPhj+0x34>)
 8081478:	7906      	ldrb	r6, [r0, #4]
 808147a:	480c      	ldr	r0, [pc, #48]	; (80814ac <_ZN5SdSpi7receiveEPhj+0x38>)
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
}
//-----------------------------------------------------------------------------
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 808147c:	2500      	movs	r5, #0
 808147e:	4c0c      	ldr	r4, [pc, #48]	; (80814b0 <_ZN5SdSpi7receiveEPhj+0x3c>)
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8081480:	9300      	str	r3, [sp, #0]
 8081482:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8081486:	4613      	mov	r3, r2
 8081488:	460a      	mov	r2, r1
 808148a:	4629      	mov	r1, r5
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
}
//-----------------------------------------------------------------------------
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 808148c:	7025      	strb	r5, [r4, #0]
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 808148e:	f00f ff31 	bl	80912f4 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
 8081492:	7823      	ldrb	r3, [r4, #0]
 8081494:	2b00      	cmp	r3, #0
 8081496:	d0fc      	beq.n	8081492 <_ZN5SdSpi7receiveEPhj+0x1e>
  if (bugDelay) {
 8081498:	4b06      	ldr	r3, [pc, #24]	; (80814b4 <_ZN5SdSpi7receiveEPhj+0x40>)
 808149a:	6818      	ldr	r0, [r3, #0]
 808149c:	b108      	cbz	r0, 80814a2 <_ZN5SdSpi7receiveEPhj+0x2e>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 808149e:	f00f fc2b 	bl	8090cf8 <HAL_Delay_Microseconds>
    delayMicroseconds(bugDelay);
  }
  return 0;
}
 80814a2:	2000      	movs	r0, #0
 80814a4:	b002      	add	sp, #8
 80814a6:	bd70      	pop	{r4, r5, r6, pc}
 80814a8:	080813b5 	.word	0x080813b5
 80814ac:	080964c4 	.word	0x080964c4
 80814b0:	200005ec 	.word	0x200005ec
 80814b4:	200005f0 	.word	0x200005f0

080814b8 <_ZN5SdSpi4sendEPKhj>:
/** SPI send a byte */
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
 80814b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SPI_DMA_TransferCompleted = false;

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 80814ba:	4b0d      	ldr	r3, [pc, #52]	; (80814f0 <_ZN5SdSpi4sendEPKhj+0x38>)
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
 80814bc:	7906      	ldrb	r6, [r0, #4]
                            SD_SPI_DMA_TransferComplete_Callback);
 80814be:	480d      	ldr	r0, [pc, #52]	; (80814f4 <_ZN5SdSpi4sendEPKhj+0x3c>)
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 80814c0:	2500      	movs	r5, #0
 80814c2:	4c0d      	ldr	r4, [pc, #52]	; (80814f8 <_ZN5SdSpi4sendEPKhj+0x40>)

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 80814c4:	9300      	str	r3, [sp, #0]
 80814c6:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 80814ca:	4613      	mov	r3, r2
 80814cc:	462a      	mov	r2, r5
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 80814ce:	7025      	strb	r5, [r4, #0]

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 80814d0:	f00f ff10 	bl	80912f4 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
 80814d4:	7823      	ldrb	r3, [r4, #0]
 80814d6:	2b00      	cmp	r3, #0
 80814d8:	d0fc      	beq.n	80814d4 <_ZN5SdSpi4sendEPKhj+0x1c>
  if (bugDelay) {
 80814da:	4b08      	ldr	r3, [pc, #32]	; (80814fc <_ZN5SdSpi4sendEPKhj+0x44>)
 80814dc:	6818      	ldr	r0, [r3, #0]
 80814de:	b120      	cbz	r0, 80814ea <_ZN5SdSpi4sendEPKhj+0x32>
    delayMicroseconds(bugDelay);
  }
}
 80814e0:	b002      	add	sp, #8
 80814e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80814e6:	f00f bc07 	b.w	8090cf8 <HAL_Delay_Microseconds>
 80814ea:	b002      	add	sp, #8
 80814ec:	bd70      	pop	{r4, r5, r6, pc}
 80814ee:	bf00      	nop
 80814f0:	080813b5 	.word	0x080813b5
 80814f4:	080964c4 	.word	0x080964c4
 80814f8:	200005ec 	.word	0x200005ec
 80814fc:	200005f0 	.word	0x200005f0

08081500 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv>:
 8081500:	f00f bb82 	b.w	8090c08 <HAL_Pin_Map>

08081504 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 8081504:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8081506:	f100 0210 	add.w	r2, r0, #16
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 808150a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 808150e:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8081510:	6901      	ldr	r1, [r0, #16]
 8081512:	6880      	ldr	r0, [r0, #8]
 8081514:	f000 bae2 	b.w	8081adc <_ZN9FatVolume15allocateClusterEmPm>

08081518 <_ZN7FatFile13cacheDirEntryEh>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
 8081518:	b510      	push	{r4, lr}
 808151a:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 808151c:	6880      	ldr	r0, [r0, #8]
 808151e:	460a      	mov	r2, r1
 8081520:	3028      	adds	r0, #40	; 0x28
 8081522:	69a1      	ldr	r1, [r4, #24]
 8081524:	f000 fa57 	bl	80819d6 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
 8081528:	b120      	cbz	r0, 8081534 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
 808152a:	88a3      	ldrh	r3, [r4, #4]
 808152c:	f003 030f 	and.w	r3, r3, #15
 8081530:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
 8081534:	bd10      	pop	{r4, pc}

08081536 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
 8081536:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808153a:	7803      	ldrb	r3, [r0, #0]
 808153c:	4604      	mov	r4, r0
 808153e:	4689      	mov	r9, r1
 8081540:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & O_READ)) {
 8081542:	b14b      	cbz	r3, 8081558 <_ZN7FatFile4readEPvj+0x22>
 8081544:	7882      	ldrb	r2, [r0, #2]
 8081546:	07d1      	lsls	r1, r2, #31
 8081548:	d506      	bpl.n	8081558 <_ZN7FatFile4readEPvj+0x22>
 808154a:	e00c      	b.n	8081566 <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 808154c:	465a      	mov	r2, fp
 808154e:	6921      	ldr	r1, [r4, #16]
 8081550:	f000 fa6b 	bl	8081a2a <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
 8081554:	2800      	cmp	r0, #0
 8081556:	da3d      	bge.n	80815d4 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 8081558:	7863      	ldrb	r3, [r4, #1]
  return -1;
 808155a:	f04f 30ff 	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 808155e:	f043 0302 	orr.w	r3, r3, #2
 8081562:	7063      	strb	r3, [r4, #1]
  return -1;
 8081564:	e098      	b.n	8081698 <_ZN7FatFile4readEPvj+0x162>
  if (!isOpen() || !(m_flags & O_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
 8081566:	071a      	lsls	r2, r3, #28
 8081568:	d503      	bpl.n	8081572 <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
 808156a:	69e3      	ldr	r3, [r4, #28]
 808156c:	6962      	ldr	r2, [r4, #20]
 808156e:	1a9b      	subs	r3, r3, r2
 8081570:	e007      	b.n	8081582 <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
 8081572:	069a      	lsls	r2, r3, #26
 8081574:	d508      	bpl.n	8081588 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
 8081576:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
 8081578:	891a      	ldrh	r2, [r3, #8]
 808157a:	6963      	ldr	r3, [r4, #20]
 808157c:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
 8081580:	b29b      	uxth	r3, r3
 8081582:	429d      	cmp	r5, r3
 8081584:	bf28      	it	cs
 8081586:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
 8081588:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
 808158a:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 808158e:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 8081592:	2e00      	cmp	r6, #0
 8081594:	d035      	beq.n	8081602 <_ZN7FatFile4readEPvj+0xcc>
 8081596:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 8081598:	6963      	ldr	r3, [r4, #20]
    if (isRootFixed()) {
 808159a:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 808159e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80815a2:	68a0      	ldr	r0, [r4, #8]
 80815a4:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
 80815a8:	d002      	beq.n	80815b0 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 80815aa:	6a03      	ldr	r3, [r0, #32]
 80815ac:	4419      	add	r1, r3
 80815ae:	e01d      	b.n	80815ec <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 80815b0:	f890 8005 	ldrb.w	r8, [r0, #5]
 80815b4:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
 80815b8:	f1ba 0f00 	cmp.w	sl, #0
 80815bc:	d110      	bne.n	80815e0 <_ZN7FatFile4readEPvj+0xaa>
 80815be:	f1b8 0f00 	cmp.w	r8, #0
 80815c2:	d10d      	bne.n	80815e0 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
 80815c4:	2b00      	cmp	r3, #0
 80815c6:	d1c1      	bne.n	808154c <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 80815c8:	0653      	lsls	r3, r2, #25
 80815ca:	bf4c      	ite	mi
 80815cc:	6a03      	ldrmi	r3, [r0, #32]
 80815ce:	6a23      	ldrpl	r3, [r4, #32]
 80815d0:	6123      	str	r3, [r4, #16]
 80815d2:	e005      	b.n	80815e0 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
 80815d4:	d104      	bne.n	80815e0 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
 80815d6:	7823      	ldrb	r3, [r4, #0]
 80815d8:	f013 0f70 	tst.w	r3, #112	; 0x70
 80815dc:	d111      	bne.n	8081602 <_ZN7FatFile4readEPvj+0xcc>
 80815de:	e7bb      	b.n	8081558 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 80815e0:	6921      	ldr	r1, [r4, #16]
 80815e2:	68a0      	ldr	r0, [r4, #8]
 80815e4:	f000 fa1b 	bl	8081a1e <_ZNK9FatVolume17clusterStartBlockEm>
 80815e8:	eb08 0100 	add.w	r1, r8, r0
 80815ec:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
 80815ee:	f1ba 0f00 	cmp.w	sl, #0
 80815f2:	d135      	bne.n	8081660 <_ZN7FatFile4readEPvj+0x12a>
 80815f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80815f8:	d332      	bcc.n	8081660 <_ZN7FatFile4readEPvj+0x12a>
 80815fa:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80815fc:	4291      	cmp	r1, r2
 80815fe:	d102      	bne.n	8081606 <_ZN7FatFile4readEPvj+0xd0>
 8081600:	e02e      	b.n	8081660 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
 8081602:	1ba8      	subs	r0, r5, r6
 8081604:	e048      	b.n	8081698 <_ZN7FatFile4readEPvj+0x162>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
 8081606:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 808160a:	d31b      	bcc.n	8081644 <_ZN7FatFile4readEPvj+0x10e>
      uint8_t nb = toRead >> 9;
      if (!isRootFixed()) {
 808160c:	7827      	ldrb	r7, [r4, #0]
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      uint8_t nb = toRead >> 9;
 808160e:	f3c6 2347 	ubfx	r3, r6, #9, #8
      if (!isRootFixed()) {
 8081612:	06bf      	lsls	r7, r7, #26
 8081614:	d406      	bmi.n	8081624 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
 8081616:	7907      	ldrb	r7, [r0, #4]
 8081618:	ebc8 0707 	rsb	r7, r8, r7
 808161c:	b2ff      	uxtb	r7, r7
 808161e:	42bb      	cmp	r3, r7
 8081620:	bf28      	it	cs
 8081622:	463b      	movcs	r3, r7
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8081624:	4291      	cmp	r1, r2
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
 8081626:	ea4f 2743 	mov.w	r7, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 808162a:	d207      	bcs.n	808163c <_ZN7FatFile4readEPvj+0x106>
        if (!m_vol->cacheSync()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
 808162c:	68a0      	ldr	r0, [r4, #8]
 808162e:	6802      	ldr	r2, [r0, #0]
 8081630:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8081634:	464a      	mov	r2, r9
 8081636:	47d0      	blx	sl
 8081638:	b960      	cbnz	r0, 8081654 <_ZN7FatFile4readEPvj+0x11e>
 808163a:	e78d      	b.n	8081558 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 808163c:	441a      	add	r2, r3
 808163e:	4291      	cmp	r1, r2
 8081640:	d321      	bcc.n	8081686 <_ZN7FatFile4readEPvj+0x150>
 8081642:	e7f3      	b.n	808162c <_ZN7FatFile4readEPvj+0xf6>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
 8081644:	6803      	ldr	r3, [r0, #0]
 8081646:	464a      	mov	r2, r9
 8081648:	681b      	ldr	r3, [r3, #0]
 808164a:	4798      	blx	r3
 808164c:	2800      	cmp	r0, #0
 808164e:	d083      	beq.n	8081558 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
 8081650:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
 8081654:	6963      	ldr	r3, [r4, #20]
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
 8081656:	44b9      	add	r9, r7
    m_curPosition += n;
 8081658:	443b      	add	r3, r7
 808165a:	6163      	str	r3, [r4, #20]
    toRead -= n;
 808165c:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 808165e:	e798      	b.n	8081592 <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8081660:	2200      	movs	r2, #0
 8081662:	3028      	adds	r0, #40	; 0x28
 8081664:	f000 f9b7 	bl	80819d6 <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
 8081668:	2800      	cmp	r0, #0
 808166a:	f43f af75 	beq.w	8081558 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
 808166e:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
 8081672:	42b7      	cmp	r7, r6
 8081674:	bf28      	it	cs
 8081676:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
 8081678:	eb00 010a 	add.w	r1, r0, sl
 808167c:	463a      	mov	r2, r7
 808167e:	4648      	mov	r0, r9
 8081680:	f012 fc6f 	bl	8093f62 <memcpy>
 8081684:	e7e6      	b.n	8081654 <_ZN7FatFile4readEPvj+0x11e>
 8081686:	e88d 000a 	stmia.w	sp, {r1, r3}
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSync()) {
 808168a:	f7ff fcad 	bl	8080fe8 <_ZN9FatVolume9cacheSyncEv>
 808168e:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8081692:	2800      	cmp	r0, #0
 8081694:	d1ca      	bne.n	808162c <_ZN7FatFile4readEPvj+0xf6>
 8081696:	e75f      	b.n	8081558 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
 8081698:	b003      	add	sp, #12
 808169a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808169e <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
 808169e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 80816a0:	2201      	movs	r2, #1
 80816a2:	f10d 0107 	add.w	r1, sp, #7
 80816a6:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
 80816a8:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
 80816aa:	6905      	ldr	r5, [r0, #16]
 80816ac:	f7ff ff43 	bl	8081536 <_ZN7FatFile4readEPvj>
 80816b0:	2801      	cmp	r0, #1
 80816b2:	bf09      	itett	eq
 80816b4:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 80816b8:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
 80816bc:	6166      	streq	r6, [r4, #20]
  m_curCluster = pos->cluster;
 80816be:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
 80816c0:	b002      	add	sp, #8
 80816c2:	bd70      	pop	{r4, r5, r6, pc}

080816c4 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
 80816c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80816c8:	460e      	mov	r6, r1
 80816ca:	7801      	ldrb	r1, [r0, #0]
 80816cc:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
 80816ce:	6907      	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
 80816d0:	2900      	cmp	r1, #0
 80816d2:	d039      	beq.n	8081748 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
 80816d4:	6945      	ldr	r5, [r0, #20]
 80816d6:	42b5      	cmp	r5, r6
 80816d8:	d03a      	beq.n	8081750 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
 80816da:	b90e      	cbnz	r6, 80816e0 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
 80816dc:	6106      	str	r6, [r0, #16]
    goto done;
 80816de:	e031      	b.n	8081744 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
 80816e0:	070b      	lsls	r3, r1, #28
 80816e2:	d503      	bpl.n	80816ec <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
 80816e4:	69c3      	ldr	r3, [r0, #28]
 80816e6:	429e      	cmp	r6, r3
 80816e8:	d82e      	bhi.n	8081748 <_ZN7FatFile7seekSetEm+0x84>
 80816ea:	e007      	b.n	80816fc <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
 80816ec:	0688      	lsls	r0, r1, #26
 80816ee:	d505      	bpl.n	80816fc <_ZN7FatFile7seekSetEm+0x38>
 80816f0:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
 80816f2:	891b      	ldrh	r3, [r3, #8]
 80816f4:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
 80816f8:	d826      	bhi.n	8081748 <_ZN7FatFile7seekSetEm+0x84>
 80816fa:	e023      	b.n	8081744 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 80816fc:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8081700:	1e6a      	subs	r2, r5, #1
 8081702:	f89e 3006 	ldrb.w	r3, [lr, #6]
 8081706:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 808170a:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 808170c:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 808170e:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
 8081710:	429a      	cmp	r2, r3
 8081712:	d800      	bhi.n	8081716 <_ZN7FatFile7seekSetEm+0x52>
 8081714:	b94d      	cbnz	r5, 808172a <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 8081716:	064a      	lsls	r2, r1, #25
 8081718:	bf4c      	ite	mi
 808171a:	f8de 2020 	ldrmi.w	r2, [lr, #32]
 808171e:	6a22      	ldrpl	r2, [r4, #32]
 8081720:	6122      	str	r2, [r4, #16]
 8081722:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 8081724:	f104 0810 	add.w	r8, r4, #16
 8081728:	e00a      	b.n	8081740 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
 808172a:	1a9b      	subs	r3, r3, r2
 808172c:	e7f9      	b.n	8081722 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 808172e:	4642      	mov	r2, r8
 8081730:	6921      	ldr	r1, [r4, #16]
 8081732:	68a0      	ldr	r0, [r4, #8]
 8081734:	f000 f979 	bl	8081a2a <_ZN9FatVolume6fatGetEmPm>
 8081738:	2800      	cmp	r0, #0
 808173a:	f105 35ff 	add.w	r5, r5, #4294967295
 808173e:	dd03      	ble.n	8081748 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
 8081740:	2d00      	cmp	r5, #0
 8081742:	d1f4      	bne.n	808172e <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
 8081744:	6166      	str	r6, [r4, #20]
 8081746:	e003      	b.n	8081750 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
 8081748:	6127      	str	r7, [r4, #16]
  return false;
 808174a:	2000      	movs	r0, #0
 808174c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
 8081750:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
 8081752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08081758 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 8081758:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
 808175a:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 808175c:	4604      	mov	r4, r0
  if (!isOpen()) {
 808175e:	b90b      	cbnz	r3, 8081764 <_ZN7FatFile4syncEv+0xc>
    return true;
 8081760:	2001      	movs	r0, #1
 8081762:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (m_flags & F_FILE_DIR_DIRTY) {
 8081764:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8081768:	2b00      	cmp	r3, #0
 808176a:	da23      	bge.n	80817b4 <_ZN7FatFile4syncEv+0x5c>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 808176c:	2101      	movs	r1, #1
 808176e:	f7ff fed3 	bl	8081518 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 8081772:	4605      	mov	r5, r0
 8081774:	b928      	cbnz	r0, 8081782 <_ZN7FatFile4syncEv+0x2a>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 8081776:	7863      	ldrb	r3, [r4, #1]
  return false;
 8081778:	2000      	movs	r0, #0
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 808177a:	f043 0301 	orr.w	r3, r3, #1
 808177e:	7063      	strb	r3, [r4, #1]
 8081780:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 8081782:	7803      	ldrb	r3, [r0, #0]
 8081784:	2be5      	cmp	r3, #229	; 0xe5
 8081786:	d0f6      	beq.n	8081776 <_ZN7FatFile4syncEv+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
 8081788:	7823      	ldrb	r3, [r4, #0]
 808178a:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
 808178c:	bf44      	itt	mi
 808178e:	69e3      	ldrmi	r3, [r4, #28]
 8081790:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
 8081792:	8c23      	ldrh	r3, [r4, #32]
 8081794:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
 8081796:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8081798:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
 808179a:	4b09      	ldr	r3, [pc, #36]	; (80817c0 <_ZN7FatFile4syncEv+0x68>)
 808179c:	681b      	ldr	r3, [r3, #0]
 808179e:	b12b      	cbz	r3, 80817ac <_ZN7FatFile4syncEv+0x54>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
 80817a0:	f100 0116 	add.w	r1, r0, #22
 80817a4:	3018      	adds	r0, #24
 80817a6:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
 80817a8:	8b2b      	ldrh	r3, [r5, #24]
 80817aa:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
 80817ac:	78a3      	ldrb	r3, [r4, #2]
 80817ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80817b2:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
 80817b4:	68a0      	ldr	r0, [r4, #8]
 80817b6:	f7ff fc17 	bl	8080fe8 <_ZN9FatVolume9cacheSyncEv>
 80817ba:	2800      	cmp	r0, #0
 80817bc:	d0db      	beq.n	8081776 <_ZN7FatFile4syncEv+0x1e>
 80817be:	e7cf      	b.n	8081760 <_ZN7FatFile4syncEv+0x8>
 80817c0:	200005f4 	.word	0x200005f4

080817c4 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 80817c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 80817c8:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 80817ca:	4604      	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 80817cc:	071d      	lsls	r5, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 80817ce:	4689      	mov	r9, r1
 80817d0:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 80817d2:	d508      	bpl.n	80817e6 <_ZN7FatFile5writeEPKvj+0x22>
 80817d4:	7883      	ldrb	r3, [r0, #2]
 80817d6:	0799      	lsls	r1, r3, #30
 80817d8:	d505      	bpl.n	80817e6 <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & O_APPEND)) {
 80817da:	075b      	lsls	r3, r3, #29
 80817dc:	d50b      	bpl.n	80817f6 <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
 80817de:	69e1      	ldr	r1, [r4, #28]
 80817e0:	f7ff ff70 	bl	80816c4 <_ZN7FatFile7seekSetEm>
 80817e4:	b938      	cbnz	r0, 80817f6 <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 80817e6:	7863      	ldrb	r3, [r4, #1]
  return -1;
 80817e8:	f04f 30ff 	mov.w	r0, #4294967295
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 80817ec:	f043 0301 	orr.w	r3, r3, #1
 80817f0:	7063      	strb	r3, [r4, #1]
  return -1;
 80817f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
 80817f6:	6963      	ldr	r3, [r4, #20]
 80817f8:	43db      	mvns	r3, r3
 80817fa:	4598      	cmp	r8, r3
 80817fc:	d8f3      	bhi.n	80817e6 <_ZN7FatFile5writeEPKvj+0x22>
 80817fe:	4647      	mov	r7, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8081800:	f04f 0a00 	mov.w	sl, #0
 8081804:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 8081806:	2f00      	cmp	r7, #0
 8081808:	f000 8082 	beq.w	8081910 <_ZN7FatFile5writeEPKvj+0x14c>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
 808180c:	68a0      	ldr	r0, [r4, #8]
    uint16_t blockOffset = m_curPosition & 0X1FF;
 808180e:	f3c3 0608 	ubfx	r6, r3, #0, #9
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 8081812:	7945      	ldrb	r5, [r0, #5]
    if (blockOfCluster == 0 && blockOffset == 0) {
 8081814:	ea15 2553 	ands.w	r5, r5, r3, lsr #9
 8081818:	d11c      	bne.n	8081854 <_ZN7FatFile5writeEPKvj+0x90>
 808181a:	b9de      	cbnz	r6, 8081854 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
 808181c:	6921      	ldr	r1, [r4, #16]
 808181e:	b171      	cbz	r1, 808183e <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8081820:	f104 0210 	add.w	r2, r4, #16
 8081824:	f000 f901 	bl	8081a2a <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
 8081828:	2800      	cmp	r0, #0
 808182a:	dbdc      	blt.n	80817e6 <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
 808182c:	f040 808e 	bne.w	808194c <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
 8081830:	4620      	mov	r0, r4
 8081832:	f7ff fe67 	bl	8081504 <_ZN7FatFile10addClusterEv>
 8081836:	2800      	cmp	r0, #0
 8081838:	f040 8088 	bne.w	808194c <_ZN7FatFile5writeEPKvj+0x188>
 808183c:	e7d3      	b.n	80817e6 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
 808183e:	6a23      	ldr	r3, [r4, #32]
 8081840:	b93b      	cbnz	r3, 8081852 <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
 8081842:	4620      	mov	r0, r4
 8081844:	f7ff fe5e 	bl	8081504 <_ZN7FatFile10addClusterEv>
 8081848:	2800      	cmp	r0, #0
 808184a:	d0cc      	beq.n	80817e6 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
 808184c:	6923      	ldr	r3, [r4, #16]
 808184e:	6223      	str	r3, [r4, #32]
 8081850:	e000      	b.n	8081854 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
 8081852:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 8081854:	6921      	ldr	r1, [r4, #16]
 8081856:	68a0      	ldr	r0, [r4, #8]
 8081858:	f000 f8e1 	bl	8081a1e <_ZNK9FatVolume17clusterStartBlockEm>
 808185c:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
 808185e:	b916      	cbnz	r6, 8081866 <_ZN7FatFile5writeEPKvj+0xa2>
 8081860:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 8081864:	d221      	bcs.n	80818aa <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
 8081866:	f5c6 7500 	rsb	r5, r6, #512	; 0x200
 808186a:	42bd      	cmp	r5, r7
 808186c:	bf28      	it	cs
 808186e:	463d      	movcs	r5, r7
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
 8081870:	b936      	cbnz	r6, 8081880 <_ZN7FatFile5writeEPKvj+0xbc>
 8081872:	6963      	ldr	r3, [r4, #20]
 8081874:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
 8081876:	4293      	cmp	r3, r2
 8081878:	bf34      	ite	cc
 808187a:	2201      	movcc	r2, #1
 808187c:	2205      	movcs	r2, #5
 808187e:	e000      	b.n	8081882 <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
 8081880:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8081882:	68a0      	ldr	r0, [r4, #8]
 8081884:	3028      	adds	r0, #40	; 0x28
 8081886:	f000 f8a6 	bl	80819d6 <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
 808188a:	2800      	cmp	r0, #0
 808188c:	d0ab      	beq.n	80817e6 <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 808188e:	4430      	add	r0, r6
 8081890:	462a      	mov	r2, r5
 8081892:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
 8081894:	442e      	add	r6, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 8081896:	f012 fb64 	bl	8093f62 <memcpy>
      if (512 == (n + blockOffset)) {
 808189a:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 808189e:	d131      	bne.n	8081904 <_ZN7FatFile5writeEPKvj+0x140>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
 80818a0:	68a0      	ldr	r0, [r4, #8]
 80818a2:	3028      	adds	r0, #40	; 0x28
 80818a4:	f000 f870 	bl	8081988 <_ZN8FatCache4syncEv>
 80818a8:	e018      	b.n	80818dc <_ZN7FatFile5writeEPKvj+0x118>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
 80818aa:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 80818ae:	68a2      	ldr	r2, [r4, #8]
 80818b0:	d316      	bcc.n	80818e0 <_ZN7FatFile5writeEPKvj+0x11c>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
 80818b2:	7913      	ldrb	r3, [r2, #4]
 80818b4:	6b10      	ldr	r0, [r2, #48]	; 0x30
 80818b6:	1b5d      	subs	r5, r3, r5
 80818b8:	b2ed      	uxtb	r5, r5
      uint8_t nBlock = nToWrite >> 9;
 80818ba:	f3c7 2347 	ubfx	r3, r7, #9, #8
 80818be:	42ab      	cmp	r3, r5
 80818c0:	bf28      	it	cs
 80818c2:	462b      	movcs	r3, r5
      if (nBlock > maxBlocks) {
        nBlock = maxBlocks;
      }
      n = 512*nBlock;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 80818c4:	4281      	cmp	r1, r0
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      uint8_t nBlock = nToWrite >> 9;
      if (nBlock > maxBlocks) {
        nBlock = maxBlocks;
      }
      n = 512*nBlock;
 80818c6:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 80818ca:	d302      	bcc.n	80818d2 <_ZN7FatFile5writeEPKvj+0x10e>
 80818cc:	4418      	add	r0, r3
 80818ce:	4281      	cmp	r1, r0
 80818d0:	d336      	bcc.n	8081940 <_ZN7FatFile5writeEPKvj+0x17c>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nBlock)) {
 80818d2:	68a0      	ldr	r0, [r4, #8]
 80818d4:	6802      	ldr	r2, [r0, #0]
 80818d6:	68d6      	ldr	r6, [r2, #12]
 80818d8:	464a      	mov	r2, r9
 80818da:	47b0      	blx	r6
 80818dc:	b990      	cbnz	r0, 8081904 <_ZN7FatFile5writeEPKvj+0x140>
 80818de:	e782      	b.n	80817e6 <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
 80818e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80818e2:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 80818e4:	bf02      	ittt	eq
 80818e6:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 80818ea:	f882 a028 	strbeq.w	sl, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 80818ee:	6313      	streq	r3, [r2, #48]	; 0x30
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
 80818f0:	68a0      	ldr	r0, [r4, #8]
 80818f2:	464a      	mov	r2, r9
 80818f4:	6803      	ldr	r3, [r0, #0]
 80818f6:	685b      	ldr	r3, [r3, #4]
 80818f8:	4798      	blx	r3
 80818fa:	2800      	cmp	r0, #0
 80818fc:	f43f af73 	beq.w	80817e6 <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
 8081900:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 8081904:	6963      	ldr	r3, [r4, #20]
    src += n;
 8081906:	44a9      	add	r9, r5
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 8081908:	442b      	add	r3, r5
 808190a:	6163      	str	r3, [r4, #20]
    src += n;
    nToWrite -= n;
 808190c:	1b7f      	subs	r7, r7, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 808190e:	e779      	b.n	8081804 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
 8081910:	69e2      	ldr	r2, [r4, #28]
 8081912:	4293      	cmp	r3, r2
 8081914:	78a2      	ldrb	r2, [r4, #2]
 8081916:	d901      	bls.n	808191c <_ZN7FatFile5writeEPKvj+0x158>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
 8081918:	61e3      	str	r3, [r4, #28]
 808191a:	e002      	b.n	8081922 <_ZN7FatFile5writeEPKvj+0x15e>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
 808191c:	4b0e      	ldr	r3, [pc, #56]	; (8081958 <_ZN7FatFile5writeEPKvj+0x194>)
 808191e:	681b      	ldr	r3, [r3, #0]
 8081920:	b113      	cbz	r3, 8081928 <_ZN7FatFile5writeEPKvj+0x164>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
 8081922:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8081926:	70a2      	strb	r2, [r4, #2]
  }

  if (m_flags & O_SYNC) {
 8081928:	78a3      	ldrb	r3, [r4, #2]
 808192a:	071a      	lsls	r2, r3, #28
 808192c:	d402      	bmi.n	8081934 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
 808192e:	4640      	mov	r0, r8
 8081930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & O_SYNC) {
    if (!sync()) {
 8081934:	4620      	mov	r0, r4
 8081936:	f7ff ff0f 	bl	8081758 <_ZN7FatFile4syncEv>
 808193a:	2800      	cmp	r0, #0
 808193c:	d1f7      	bne.n	808192e <_ZN7FatFile5writeEPKvj+0x16a>
 808193e:	e752      	b.n	80817e6 <_ZN7FatFile5writeEPKvj+0x22>
 8081940:	f04f 30ff 	mov.w	r0, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8081944:	f882 a028 	strb.w	sl, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 8081948:	6310      	str	r0, [r2, #48]	; 0x30
 808194a:	e7c2      	b.n	80818d2 <_ZN7FatFile5writeEPKvj+0x10e>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 808194c:	6921      	ldr	r1, [r4, #16]
 808194e:	68a0      	ldr	r0, [r4, #8]
 8081950:	f000 f865 	bl	8081a1e <_ZNK9FatVolume17clusterStartBlockEm>
 8081954:	4601      	mov	r1, r0
 8081956:	e783      	b.n	8081860 <_ZN7FatFile5writeEPKvj+0x9c>
 8081958:	200005f4 	.word	0x200005f4

0808195c <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
 808195c:	f00f b954 	b.w	8090c08 <HAL_Pin_Map>

08081960 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8081960:	b570      	push	{r4, r5, r6, lr}
 8081962:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8081964:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8081966:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8081968:	b149      	cbz	r1, 808197e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 808196a:	f012 fb56 	bl	809401a <strlen>
 808196e:	682b      	ldr	r3, [r5, #0]
 8081970:	4602      	mov	r2, r0
 8081972:	4621      	mov	r1, r4
 8081974:	4628      	mov	r0, r5
    }
 8081976:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 808197a:	68db      	ldr	r3, [r3, #12]
 808197c:	4718      	bx	r3
    }
 808197e:	bd70      	pop	{r4, r5, r6, pc}

08081980 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
 8081980:	f00f b942 	b.w	8090c08 <HAL_Pin_Map>

08081984 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
 8081984:	f00f b940 	b.w	8090c08 <HAL_Pin_Map>

08081988 <_ZN8FatCache4syncEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 8081988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
 808198a:	7803      	ldrb	r3, [r0, #0]

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 808198c:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
 808198e:	07da      	lsls	r2, r3, #31
 8081990:	d51e      	bpl.n	80819d0 <_ZN8FatCache4syncEv+0x48>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
 8081992:	6840      	ldr	r0, [r0, #4]
 8081994:	f104 060c 	add.w	r6, r4, #12
 8081998:	6803      	ldr	r3, [r0, #0]
 808199a:	4632      	mov	r2, r6
 808199c:	685b      	ldr	r3, [r3, #4]
 808199e:	68a1      	ldr	r1, [r4, #8]
 80819a0:	4798      	blx	r3
 80819a2:	4605      	mov	r5, r0
 80819a4:	b908      	cbnz	r0, 80819aa <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
 80819a6:	2500      	movs	r5, #0
 80819a8:	e013      	b.n	80819d2 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
 80819aa:	7823      	ldrb	r3, [r4, #0]
 80819ac:	079b      	lsls	r3, r3, #30
 80819ae:	d404      	bmi.n	80819ba <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
 80819b0:	7823      	ldrb	r3, [r4, #0]
 80819b2:	f023 0301 	bic.w	r3, r3, #1
 80819b6:	7023      	strb	r3, [r4, #0]
 80819b8:	e00b      	b.n	80819d2 <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
 80819ba:	6860      	ldr	r0, [r4, #4]
      if (!m_vol->writeBlock(lbn, m_block.data)) {
 80819bc:	68a7      	ldr	r7, [r4, #8]
 80819be:	6901      	ldr	r1, [r0, #16]
 80819c0:	6803      	ldr	r3, [r0, #0]
 80819c2:	4632      	mov	r2, r6
 80819c4:	685b      	ldr	r3, [r3, #4]
 80819c6:	4439      	add	r1, r7
 80819c8:	4798      	blx	r3
 80819ca:	2800      	cmp	r0, #0
 80819cc:	d1f0      	bne.n	80819b0 <_ZN8FatCache4syncEv+0x28>
 80819ce:	e7ea      	b.n	80819a6 <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
 80819d0:	2501      	movs	r5, #1

fail:
  return false;
}
 80819d2:	4628      	mov	r0, r5
 80819d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080819d6 <_ZN8FatCache4readEmh>:
 * <http://www.gnu.org/licenses/>.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 80819d6:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
 80819d8:	6883      	ldr	r3, [r0, #8]
 * <http://www.gnu.org/licenses/>.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 80819da:	4604      	mov	r4, r0
  if (m_lbn != lbn) {
 80819dc:	428b      	cmp	r3, r1
 * <http://www.gnu.org/licenses/>.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 80819de:	460e      	mov	r6, r1
 80819e0:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
 80819e2:	d014      	beq.n	8081a0e <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
 80819e4:	f7ff ffd0 	bl	8081988 <_ZN8FatCache4syncEv>
 80819e8:	b908      	cbnz	r0, 80819ee <_ZN8FatCache4readEmh+0x18>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:
  return 0;
 80819ea:	2000      	movs	r0, #0
 80819ec:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
 80819ee:	076b      	lsls	r3, r5, #29
 80819f0:	d503      	bpl.n	80819fa <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
 80819f2:	2300      	movs	r3, #0
 80819f4:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
 80819f6:	60a6      	str	r6, [r4, #8]
 80819f8:	e009      	b.n	8081a0e <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
 80819fa:	6860      	ldr	r0, [r4, #4]
 80819fc:	f104 020c 	add.w	r2, r4, #12
 8081a00:	6803      	ldr	r3, [r0, #0]
 8081a02:	4631      	mov	r1, r6
 8081a04:	681b      	ldr	r3, [r3, #0]
 8081a06:	4798      	blx	r3
 8081a08:	2800      	cmp	r0, #0
 8081a0a:	d1f2      	bne.n	80819f2 <_ZN8FatCache4readEmh+0x1c>
 8081a0c:	e7ed      	b.n	80819ea <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
 8081a0e:	4620      	mov	r0, r4
 8081a10:	7823      	ldrb	r3, [r4, #0]
 8081a12:	f005 0503 	and.w	r5, r5, #3
 8081a16:	431d      	orrs	r5, r3
 8081a18:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:
  return 0;
}
 8081a1c:	bd70      	pop	{r4, r5, r6, pc}

08081a1e <_ZNK9FatVolume17clusterStartBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
 8081a1e:	7983      	ldrb	r3, [r0, #6]
 8081a20:	3902      	subs	r1, #2
 8081a22:	6940      	ldr	r0, [r0, #20]
 8081a24:	4099      	lsls	r1, r3
}
 8081a26:	4408      	add	r0, r1
 8081a28:	4770      	bx	lr

08081a2a <_ZN9FatVolume6fatGetEmPm>:
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8081a2a:	b570      	push	{r4, r5, r6, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8081a2c:	79c3      	ldrb	r3, [r0, #7]
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8081a2e:	4605      	mov	r5, r0
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8081a30:	2b20      	cmp	r3, #32
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8081a32:	460c      	mov	r4, r1
 8081a34:	4616      	mov	r6, r2
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8081a36:	d112      	bne.n	8081a5e <_ZN9FatVolume6fatGetEmPm+0x34>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
 8081a38:	6981      	ldr	r1, [r0, #24]
 8081a3a:	2202      	movs	r2, #2
 8081a3c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8081a40:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8081a44:	f7ff ffc7 	bl	80819d6 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8081a48:	b910      	cbnz	r0, 8081a50 <_ZN9FatVolume6fatGetEmPm+0x26>
  }
  *value = next;
  return 1;

fail:
  return -1;
 8081a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8081a4e:	bd70      	pop	{r4, r5, r6, pc}
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
 8081a50:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8081a54:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8081a58:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
 8081a5c:	e00f      	b.n	8081a7e <_ZN9FatVolume6fatGetEmPm+0x54>
  }

  if (m_fatType == 16) {
 8081a5e:	2b10      	cmp	r3, #16
 8081a60:	d1f3      	bne.n	8081a4a <_ZN9FatVolume6fatGetEmPm+0x20>
 8081a62:	6983      	ldr	r3, [r0, #24]
 8081a64:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8081a68:	2202      	movs	r2, #2
 8081a6a:	4419      	add	r1, r3
 8081a6c:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8081a70:	f7ff ffb1 	bl	80819d6 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8081a74:	2800      	cmp	r0, #0
 8081a76:	d0e8      	beq.n	8081a4a <_ZN9FatVolume6fatGetEmPm+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
 8081a78:	b2e4      	uxtb	r4, r4
 8081a7a:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
 8081a7e:	69ea      	ldr	r2, [r5, #28]
 8081a80:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
 8081a82:	bf9a      	itte	ls
 8081a84:	6033      	strls	r3, [r6, #0]
  return 1;
 8081a86:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
 8081a88:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
 8081a8a:	bd70      	pop	{r4, r5, r6, pc}

08081a8c <_ZN9FatVolume6fatPutEmm>:
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8081a8c:	b538      	push	{r3, r4, r5, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8081a8e:	79c3      	ldrb	r3, [r0, #7]
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8081a90:	460c      	mov	r4, r1
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8081a92:	2b20      	cmp	r3, #32
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8081a94:	4615      	mov	r5, r2
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8081a96:	d10f      	bne.n	8081ab8 <_ZN9FatVolume6fatPutEmm+0x2c>
 8081a98:	6981      	ldr	r1, [r0, #24]
 8081a9a:	2203      	movs	r2, #3
 8081a9c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8081aa0:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8081aa4:	f7ff ff97 	bl	80819d6 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 8081aa8:	b908      	cbnz	r0, 8081aae <_ZN9FatVolume6fatPutEmm+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
 8081aaa:	2000      	movs	r0, #0
 8081aac:	bd38      	pop	{r3, r4, r5, pc}
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
 8081aae:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8081ab2:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
 8081ab6:	e00f      	b.n	8081ad8 <_ZN9FatVolume6fatPutEmm+0x4c>
    return true;
  }

  if (m_fatType == 16) {
 8081ab8:	2b10      	cmp	r3, #16
 8081aba:	d1f6      	bne.n	8081aaa <_ZN9FatVolume6fatPutEmm+0x1e>
 8081abc:	6983      	ldr	r3, [r0, #24]
 8081abe:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8081ac2:	2203      	movs	r2, #3
 8081ac4:	4419      	add	r1, r3
 8081ac6:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8081aca:	f7ff ff84 	bl	80819d6 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 8081ace:	2800      	cmp	r0, #0
 8081ad0:	d0eb      	beq.n	8081aaa <_ZN9FatVolume6fatPutEmm+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
 8081ad2:	b2e4      	uxtb	r4, r4
 8081ad4:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
 8081ad8:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
 8081ada:	bd38      	pop	{r3, r4, r5, pc}

08081adc <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 8081adc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8081ae0:	4605      	mov	r5, r0
 8081ae2:	4690      	mov	r8, r2
  uint32_t find = current ? current : m_allocSearchStart;
 8081ae4:	460f      	mov	r7, r1
 8081ae6:	b909      	cbnz	r1, 8081aec <_ZN9FatVolume15allocateClusterEmPm+0x10>
 8081ae8:	68c6      	ldr	r6, [r0, #12]
 8081aea:	e000      	b.n	8081aee <_ZN9FatVolume15allocateClusterEmPm+0x12>
 8081aec:	460e      	mov	r6, r1
 8081aee:	4634      	mov	r4, r6
  uint32_t start = find;
  while (1) {
    find++;
    // If at end of FAT go to beginning of FAT.
    if (find > m_lastCluster) {
 8081af0:	69eb      	ldr	r3, [r5, #28]
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
  uint32_t find = current ? current : m_allocSearchStart;
  uint32_t start = find;
  while (1) {
    find++;
 8081af2:	3401      	adds	r4, #1
    // If at end of FAT go to beginning of FAT.
    if (find > m_lastCluster) {
      find = 2;
 8081af4:	429c      	cmp	r4, r3
 8081af6:	bf88      	it	hi
 8081af8:	2402      	movhi	r4, #2
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
 8081afa:	aa01      	add	r2, sp, #4
 8081afc:	4621      	mov	r1, r4
 8081afe:	4628      	mov	r0, r5
 8081b00:	f7ff ff93 	bl	8081a2a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8081b04:	2800      	cmp	r0, #0
 8081b06:	db0d      	blt.n	8081b24 <_ZN9FatVolume15allocateClusterEmPm+0x48>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
 8081b08:	d001      	beq.n	8081b0e <_ZN9FatVolume15allocateClusterEmPm+0x32>
 8081b0a:	9b01      	ldr	r3, [sp, #4]
 8081b0c:	b113      	cbz	r3, 8081b14 <_ZN9FatVolume15allocateClusterEmPm+0x38>
      break;
    }
    if (find == start) {
 8081b0e:	42b4      	cmp	r4, r6
 8081b10:	d1ee      	bne.n	8081af0 <_ZN9FatVolume15allocateClusterEmPm+0x14>
 8081b12:	e007      	b.n	8081b24 <_ZN9FatVolume15allocateClusterEmPm+0x48>
  }
  uint32_t clusterStartBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
 8081b14:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8081b18:	4621      	mov	r1, r4
 8081b1a:	4628      	mov	r0, r5
 8081b1c:	f7ff ffb6 	bl	8081a8c <_ZN9FatVolume6fatPutEmm>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // mark end of chain
  if (!fatPutEOC(find)) {
 8081b20:	4606      	mov	r6, r0
 8081b22:	b908      	cbnz	r0, 8081b28 <_ZN9FatVolume15allocateClusterEmPm+0x4c>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
 8081b24:	2600      	movs	r6, #0
 8081b26:	e010      	b.n	8081b4a <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // mark end of chain
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
 8081b28:	b137      	cbz	r7, 8081b38 <_ZN9FatVolume15allocateClusterEmPm+0x5c>
    // link clusters
    if (!fatPut(current, find)) {
 8081b2a:	4622      	mov	r2, r4
 8081b2c:	4639      	mov	r1, r7
 8081b2e:	4628      	mov	r0, r5
 8081b30:	f7ff ffac 	bl	8081a8c <_ZN9FatVolume6fatPutEmm>
 8081b34:	b908      	cbnz	r0, 8081b3a <_ZN9FatVolume15allocateClusterEmPm+0x5e>
 8081b36:	e7f5      	b.n	8081b24 <_ZN9FatVolume15allocateClusterEmPm+0x48>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // Remember place for search start.
    m_allocSearchStart = find;
 8081b38:	60ec      	str	r4, [r5, #12]
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
 8081b3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8081b3c:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 8081b3e:	bfa4      	itt	ge
 8081b40:	f103 33ff 	addge.w	r3, r3, #4294967295
 8081b44:	626b      	strge	r3, [r5, #36]	; 0x24
  }
  updateFreeClusterCount(-1);
  *next = find;
 8081b46:	f8c8 4000 	str.w	r4, [r8]
  return true;

fail:
  return false;
}
 8081b4a:	4630      	mov	r0, r6
 8081b4c:	b002      	add	sp, #8
 8081b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08081b52 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
 8081b52:	f00f b859 	b.w	8090c08 <HAL_Pin_Map>

08081b56 <_GLOBAL__sub_I__ZN9SdFatBase9errorHaltEP5Print>:
 8081b56:	f00f b857 	b.w	8090c08 <HAL_Pin_Map>

08081b5a <_ZN4MQTT9debug_TlsEPviPKciS2_>:
  return 0;
}

void MQTT::debug_Tls( void *ctx, int level,
                      const char *file, int line,
                      const char *str ) {
 8081b5a:	4770      	bx	lr

08081b5c <_ZN4MQTT8send_TlsEPvPKhj>:

bool MQTT::available() {
    return tcpClient.available();
}

int MQTT::send_Tls(void *ctx, const unsigned char *buf, size_t len) {
 8081b5c:	b570      	push	{r4, r5, r6, lr}
 8081b5e:	4605      	mov	r5, r0
 8081b60:	460c      	mov	r4, r1
 8081b62:	4616      	mov	r6, r2
  MQTT *sock = (MQTT *)ctx;

  if (!sock->tcpClient.connected()) {
 8081b64:	f00f fe1c 	bl	80917a0 <_ZN9TCPClient9connectedEv>
 8081b68:	b158      	cbz	r0, 8081b82 <_ZN4MQTT8send_TlsEPvPKhj+0x26>
    return -1;
  }

  int ret = sock->tcpClient.write(buf, len);
 8081b6a:	4621      	mov	r1, r4
 8081b6c:	4632      	mov	r2, r6
 8081b6e:	4628      	mov	r0, r5
 8081b70:	f00f fe04 	bl	809177c <_ZN9TCPClient5writeEPKhj>
  if (ret == 0) {
 8081b74:	4604      	mov	r4, r0
 8081b76:	b138      	cbz	r0, 8081b88 <_ZN4MQTT8send_TlsEPvPKhj+0x2c>
      return MBEDTLS_ERR_SSL_WANT_WRITE;
  }
  sock->tcpClient.flush();
 8081b78:	4628      	mov	r0, r5
 8081b7a:	f00f fc2e 	bl	80913da <_ZN9TCPClient5flushEv>
  return ret;
 8081b7e:	4620      	mov	r0, r4
 8081b80:	bd70      	pop	{r4, r5, r6, pc}

int MQTT::send_Tls(void *ctx, const unsigned char *buf, size_t len) {
  MQTT *sock = (MQTT *)ctx;

  if (!sock->tcpClient.connected()) {
    return -1;
 8081b82:	f04f 30ff 	mov.w	r0, #4294967295
 8081b86:	bd70      	pop	{r4, r5, r6, pc}
  }

  int ret = sock->tcpClient.write(buf, len);
  if (ret == 0) {
      return MBEDTLS_ERR_SSL_WANT_WRITE;
 8081b88:	4800      	ldr	r0, [pc, #0]	; (8081b8c <_ZN4MQTT8send_TlsEPvPKhj+0x30>)
  }
  sock->tcpClient.flush();
  return ret;
}
 8081b8a:	bd70      	pop	{r4, r5, r6, pc}
 8081b8c:	ffff9780 	.word	0xffff9780

08081b90 <_ZN4MQTT8recv_TlsEPvPhj>:

int MQTT::recv_Tls(void *ctx, unsigned char *buf, size_t len) {
 8081b90:	b570      	push	{r4, r5, r6, lr}
 8081b92:	4604      	mov	r4, r0
 8081b94:	460d      	mov	r5, r1
 8081b96:	4616      	mov	r6, r2
  MQTT *sock = (MQTT *)ctx;
  if (!sock->tcpClient.connected()) {
 8081b98:	f00f fe02 	bl	80917a0 <_ZN9TCPClient9connectedEv>
 8081b9c:	b158      	cbz	r0, 8081bb6 <_ZN4MQTT8recv_TlsEPvPhj+0x26>
    return -1;
  }

  if (sock->tcpClient.available() == 0) {
 8081b9e:	4620      	mov	r0, r4
 8081ba0:	f00f fce2 	bl	8091568 <_ZN9TCPClient9availableEv>
 8081ba4:	b128      	cbz	r0, 8081bb2 <_ZN4MQTT8recv_TlsEPvPhj+0x22>
    return MBEDTLS_ERR_SSL_WANT_READ;
  }

  int ret = sock->tcpClient.read(buf, len);
 8081ba6:	4632      	mov	r2, r6
 8081ba8:	4629      	mov	r1, r5
 8081baa:	4620      	mov	r0, r4
 8081bac:	f00f fcab 	bl	8091506 <_ZN9TCPClient4readEPhj>
  if (ret == 0) {
 8081bb0:	b918      	cbnz	r0, 8081bba <_ZN4MQTT8recv_TlsEPvPhj+0x2a>
    return MBEDTLS_ERR_SSL_WANT_READ;
 8081bb2:	4802      	ldr	r0, [pc, #8]	; (8081bbc <_ZN4MQTT8recv_TlsEPvPhj+0x2c>)
 8081bb4:	bd70      	pop	{r4, r5, r6, pc}
}

int MQTT::recv_Tls(void *ctx, unsigned char *buf, size_t len) {
  MQTT *sock = (MQTT *)ctx;
  if (!sock->tcpClient.connected()) {
    return -1;
 8081bb6:	f04f 30ff 	mov.w	r0, #4294967295
  int ret = sock->tcpClient.read(buf, len);
  if (ret == 0) {
    return MBEDTLS_ERR_SSL_WANT_READ;
  }
  return ret;
}
 8081bba:	bd70      	pop	{r4, r5, r6, pc}
 8081bbc:	ffff9700 	.word	0xffff9700

08081bc0 <_ZN4MQTT7rng_TlsEPvPhj>:

int MQTT::rng_Tls(void* handle, uint8_t* data, const size_t len_) {
 8081bc0:	b570      	push	{r4, r5, r6, lr}
 8081bc2:	460e      	mov	r6, r1
 8081bc4:	4615      	mov	r5, r2
 8081bc6:	460c      	mov	r4, r1
  size_t len = len_;
  while (len>=4) {
 8081bc8:	1b2b      	subs	r3, r5, r4
 8081bca:	4433      	add	r3, r6
 8081bcc:	2b03      	cmp	r3, #3
 8081bce:	d904      	bls.n	8081bda <_ZN4MQTT7rng_TlsEPvPhj+0x1a>
      *((uint32_t*)data) = HAL_RNG_GetRandomNumber();
 8081bd0:	f00f f88a 	bl	8090ce8 <HAL_RNG_GetRandomNumber>
 8081bd4:	f844 0b04 	str.w	r0, [r4], #4
  return ret;
}

int MQTT::rng_Tls(void* handle, uint8_t* data, const size_t len_) {
  size_t len = len_;
  while (len>=4) {
 8081bd8:	e7f6      	b.n	8081bc8 <_ZN4MQTT7rng_TlsEPvPhj+0x8>
 8081bda:	08ac      	lsrs	r4, r5, #2
 8081bdc:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8081be0:	4435      	add	r5, r6
      *((uint32_t*)data) = HAL_RNG_GetRandomNumber();
      data += 4;
      len -= 4;
  }

  while (len-->0) {
 8081be2:	42ac      	cmp	r4, r5
 8081be4:	d004      	beq.n	8081bf0 <_ZN4MQTT7rng_TlsEPvPhj+0x30>
      *data++ = HAL_RNG_GetRandomNumber();
 8081be6:	f00f f87f 	bl	8090ce8 <HAL_RNG_GetRandomNumber>
 8081bea:	f804 0b01 	strb.w	r0, [r4], #1
      *((uint32_t*)data) = HAL_RNG_GetRandomNumber();
      data += 4;
      len -= 4;
  }

  while (len-->0) {
 8081bee:	e7f8      	b.n	8081be2 <_ZN4MQTT7rng_TlsEPvPhj+0x22>
      *data++ = HAL_RNG_GetRandomNumber();
  }
  return 0;
}
 8081bf0:	2000      	movs	r0, #0
 8081bf2:	bd70      	pop	{r4, r5, r6, pc}

08081bf4 <_ZN4MQTT14veryfyCert_TlsEPvP16mbedtls_x509_crtiPm>:
    return false;
  }
  return true;
}

int MQTT::veryfyCert_Tls(void *data, mbedtls_x509_crt *crt, int depth, uint32_t *flags) {
 8081bf4:	b500      	push	{lr}
 8081bf6:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
  char buf[1024];
  ((void) data);

  debug_tls("Verify requested for (Depth %d):\n", depth);
  mbedtls_x509_crt_info(buf, sizeof(buf) - 1, "", crt);
 8081bfa:	460b      	mov	r3, r1
 8081bfc:	4a05      	ldr	r2, [pc, #20]	; (8081c14 <_ZN4MQTT14veryfyCert_TlsEPvP16mbedtls_x509_crtiPm+0x20>)
 8081bfe:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8081c02:	4668      	mov	r0, sp
 8081c04:	f005 fee8 	bl	80879d8 <mbedtls_x509_crt_info>
  } else {
    debug_tls(buf, sizeof(buf), "  ! ", *flags);
    debug_tls("%s\n", buf);
  }
  return 0;
}
 8081c08:	2000      	movs	r0, #0
 8081c0a:	f20d 4d04 	addw	sp, sp, #1028	; 0x404
 8081c0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8081c12:	bf00      	nop
 8081c14:	08096b58 	.word	0x08096b58

08081c18 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
	TCPClient();
	TCPClient(sock_handle_t sock);
        virtual ~TCPClient() {};
 8081c18:	b538      	push	{r3, r4, r5, lr}
 8081c1a:	4b0b      	ldr	r3, [pc, #44]	; (8081c48 <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 8081c1c:	6984      	ldr	r4, [r0, #24]
 8081c1e:	4605      	mov	r5, r0
 8081c20:	6003      	str	r3, [r0, #0]
 8081c22:	b17c      	cbz	r4, 8081c44 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8081c24:	6863      	ldr	r3, [r4, #4]
 8081c26:	3b01      	subs	r3, #1
 8081c28:	6063      	str	r3, [r4, #4]
 8081c2a:	b95b      	cbnz	r3, 8081c44 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
 8081c2c:	6823      	ldr	r3, [r4, #0]
 8081c2e:	4620      	mov	r0, r4
 8081c30:	689b      	ldr	r3, [r3, #8]
 8081c32:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8081c34:	68a3      	ldr	r3, [r4, #8]
 8081c36:	3b01      	subs	r3, #1
 8081c38:	60a3      	str	r3, [r4, #8]
 8081c3a:	b91b      	cbnz	r3, 8081c44 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 8081c3c:	6823      	ldr	r3, [r4, #0]
 8081c3e:	4620      	mov	r0, r4
 8081c40:	68db      	ldr	r3, [r3, #12]
 8081c42:	4798      	blx	r3
 8081c44:	4628      	mov	r0, r5
 8081c46:	bd38      	pop	{r3, r4, r5, pc}
 8081c48:	08099b64 	.word	0x08099b64

08081c4c <_ZN9TCPClientD0Ev>:
 8081c4c:	b510      	push	{r4, lr}
 8081c4e:	4604      	mov	r4, r0
 8081c50:	f7ff ffe2 	bl	8081c18 <_ZN9TCPClientD1Ev>
 8081c54:	4620      	mov	r0, r4
 8081c56:	f7fe fa24 	bl	80800a2 <_ZdlPv>
 8081c5a:	4620      	mov	r0, r4
 8081c5c:	bd10      	pop	{r4, pc}
	...

08081c60 <_ZN4MQTTC1Ev>:
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT() {
 8081c60:	b538      	push	{r3, r4, r5, lr}
 8081c62:	4604      	mov	r4, r0
 8081c64:	2500      	movs	r5, #0
 8081c66:	f00f fd0d 	bl	8091684 <_ZN9TCPClientC1Ev>
 8081c6a:	61e5      	str	r5, [r4, #28]
 8081c6c:	4905      	ldr	r1, [pc, #20]	; (8081c84 <_ZN4MQTTC1Ev+0x24>)
 8081c6e:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8081c72:	f00f fe0c 	bl	809188e <_ZN6StringC1EPK19__FlashStringHelper>
 8081c76:	2301      	movs	r3, #1
 8081c78:	64a5      	str	r5, [r4, #72]	; 0x48
 8081c7a:	f884 3682 	strb.w	r3, [r4, #1666]	; 0x682
    this->ip = NULL;
}
 8081c7e:	4620      	mov	r0, r4
 8081c80:	bd38      	pop	{r3, r4, r5, pc}
 8081c82:	bf00      	nop
 8081c84:	08096b58 	.word	0x08096b58

08081c88 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:
        disconnect();
        free(buffer);
    }
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 8081c88:	b538      	push	{r3, r4, r5, lr}
 8081c8a:	4604      	mov	r4, r0
 8081c8c:	461d      	mov	r5, r3
    this->callback = callback;
 8081c8e:	9b05      	ldr	r3, [sp, #20]
 8081c90:	6303      	str	r3, [r0, #48]	; 0x30
    this->tls = false;
 8081c92:	2000      	movs	r0, #0
 8081c94:	f884 0681 	strb.w	r0, [r4, #1665]	; 0x681
    this->tlsConnected = false;
 8081c98:	f884 0680 	strb.w	r0, [r4, #1664]	; 0x680
    this->qoscallback = NULL;
 8081c9c:	6360      	str	r0, [r4, #52]	; 0x34
    if (ip != NULL)
 8081c9e:	b102      	cbz	r2, 8081ca2 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1a>
        this->ip = ip;
 8081ca0:	64a2      	str	r2, [r4, #72]	; 0x48
    if (domain != NULL)
 8081ca2:	b119      	cbz	r1, 8081cac <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x24>
        this->domain = domain;
 8081ca4:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8081ca8:	f00f fe1e 	bl	80918e8 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
 8081cac:	9b04      	ldr	r3, [sp, #16]

    this->maxpacketsize = maxpacketsize;
    if (buffer != NULL)
 8081cae:	69e0      	ldr	r0, [r4, #28]
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
    this->keepalive = keepalive;
 8081cb0:	6523      	str	r3, [r4, #80]	; 0x50

    this->maxpacketsize = maxpacketsize;
 8081cb2:	9b06      	ldr	r3, [sp, #24]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
 8081cb4:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    this->maxpacketsize = maxpacketsize;
 8081cb8:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
 8081cbc:	b108      	cbz	r0, 8081cc2 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x3a>
      delete[] buffer;
 8081cbe:	f7fe f9f2 	bl	80800a6 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
 8081cc2:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 8081cc6:	f7fe f9ea 	bl	808009e <_Znaj>
 8081cca:	61e0      	str	r0, [r4, #28]
 8081ccc:	bd38      	pop	{r3, r4, r5, pc}
	...

08081cd0 <_ZN4MQTTC1EPctPFvS0_PhjE>:

MQTT::MQTT() {
    this->ip = NULL;
}

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
 8081cd0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8081cd4:	4604      	mov	r4, r0
 8081cd6:	4617      	mov	r7, r2
 8081cd8:	4698      	mov	r8, r3
 8081cda:	460e      	mov	r6, r1
 8081cdc:	2500      	movs	r5, #0
 8081cde:	f00f fcd1 	bl	8091684 <_ZN9TCPClientC1Ev>
 8081ce2:	61e5      	str	r5, [r4, #28]
 8081ce4:	490c      	ldr	r1, [pc, #48]	; (8081d18 <_ZN4MQTTC1EPctPFvS0_PhjE+0x48>)
 8081ce6:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8081cea:	f00f fdd0 	bl	809188e <_ZN6StringC1EPK19__FlashStringHelper>
 8081cee:	2301      	movs	r3, #1
 8081cf0:	f884 3682 	strb.w	r3, [r4, #1666]	; 0x682
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
 8081cf4:	23ff      	movs	r3, #255	; 0xff
 8081cf6:	9302      	str	r3, [sp, #8]
 8081cf8:	230f      	movs	r3, #15
 8081cfa:	9300      	str	r3, [sp, #0]
 8081cfc:	4620      	mov	r0, r4

MQTT::MQTT() {
    this->ip = NULL;
}

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
 8081cfe:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
 8081d00:	f8cd 8004 	str.w	r8, [sp, #4]
 8081d04:	463b      	mov	r3, r7
 8081d06:	462a      	mov	r2, r5
 8081d08:	4631      	mov	r1, r6
 8081d0a:	f7ff ffbd 	bl	8081c88 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
 8081d0e:	4620      	mov	r0, r4
 8081d10:	b004      	add	sp, #16
 8081d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081d16:	bf00      	nop
 8081d18:	08096b58 	.word	0x08096b58

08081d1c <_ZN4MQTT8netWriteEPhi>:
    buf[pos-i-1] = (i & 0xFF);
    return pos;
}


uint16_t MQTT::netWrite(unsigned char *buff, int length) {
 8081d1c:	b510      	push	{r4, lr}
    debug_tls("netWrite!!\n");
    if (tls == false) {
 8081d1e:	f890 4681 	ldrb.w	r4, [r0, #1665]	; 0x681
 8081d22:	b914      	cbnz	r4, 8081d2a <_ZN4MQTT8netWriteEPhi+0xe>
        return tcpClient.write(buff, length);
 8081d24:	f00f fd2a 	bl	809177c <_ZN9TCPClient5writeEPKhj>
 8081d28:	e003      	b.n	8081d32 <_ZN4MQTT8netWriteEPhi+0x16>
    } else {
        return mbedtls_ssl_write(&ssl, buff, length);
 8081d2a:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
 8081d2e:	f008 fab7 	bl	808a2a0 <mbedtls_ssl_write>
 8081d32:	b280      	uxth	r0, r0
    }
}
 8081d34:	bd10      	pop	{r4, pc}

08081d36 <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
 8081d36:	b538      	push	{r3, r4, r5, lr}
 8081d38:	4604      	mov	r4, r0
    debug_tls("mqtt disconnected\n");

    buffer[0] = MQTTDISCONNECT;
 8081d3a:	69c3      	ldr	r3, [r0, #28]
 8081d3c:	22e0      	movs	r2, #224	; 0xe0
 8081d3e:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
 8081d40:	69c3      	ldr	r3, [r0, #28]
 8081d42:	2500      	movs	r5, #0
 8081d44:	705d      	strb	r5, [r3, #1]
    netWrite(buffer,2);
 8081d46:	2202      	movs	r2, #2
 8081d48:	69c1      	ldr	r1, [r0, #28]
 8081d4a:	f7ff ffe7 	bl	8081d1c <_ZN4MQTT8netWriteEPhi>

    if (tls) {
 8081d4e:	f894 3681 	ldrb.w	r3, [r4, #1665]	; 0x681
 8081d52:	b1bb      	cbz	r3, 8081d84 <_ZN4MQTT10disconnectEv+0x4e>
        debug_tls("tls close\n");
        tlsConnected = false;
        tls = false;
        mbedtls_x509_crt_free(&cacert);
 8081d54:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
    buffer[1] = 0;
    netWrite(buffer,2);

    if (tls) {
        debug_tls("tls close\n");
        tlsConnected = false;
 8081d58:	f884 5680 	strb.w	r5, [r4, #1664]	; 0x680
        tls = false;
 8081d5c:	f884 5681 	strb.w	r5, [r4, #1665]	; 0x681
        mbedtls_x509_crt_free(&cacert);
 8081d60:	f006 fd31 	bl	80887c6 <mbedtls_x509_crt_free>
        mbedtls_x509_crt_free(&clicert);
 8081d64:	f204 501c 	addw	r0, r4, #1308	; 0x51c
 8081d68:	f006 fd2d 	bl	80887c6 <mbedtls_x509_crt_free>
        mbedtls_pk_free(&pkey);
 8081d6c:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
 8081d70:	f00a fa33 	bl	808c1da <mbedtls_pk_free>
        mbedtls_ssl_config_free (&conf);
 8081d74:	f504 7061 	add.w	r0, r4, #900	; 0x384
 8081d78:	f008 fc82 	bl	808a680 <mbedtls_ssl_config_free>
        mbedtls_ssl_free (&ssl);
 8081d7c:	f504 7034 	add.w	r0, r4, #720	; 0x2d0
 8081d80:	f008 fbea 	bl	808a558 <mbedtls_ssl_free>
    }
    tcpClient.stop();
 8081d84:	4620      	mov	r0, r4
 8081d86:	f00f fc2d 	bl	80915e4 <_ZN9TCPClient4stopEv>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8081d8a:	f00e ffbd 	bl	8090d08 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
 8081d8e:	6260      	str	r0, [r4, #36]	; 0x24
 8081d90:	62a0      	str	r0, [r4, #40]	; 0x28
 8081d92:	bd38      	pop	{r3, r4, r5, pc}

08081d94 <_ZN4MQTT11isConnectedEv>:
        return mbedtls_ssl_write(&ssl, buff, length);
    }
}


bool MQTT::isConnected() {
 8081d94:	b510      	push	{r4, lr}
 8081d96:	4604      	mov	r4, r0
    bool rc = (int)tcpClient.connected();
 8081d98:	f00f fd02 	bl	80917a0 <_ZN9TCPClient9connectedEv>
    if (tls)
 8081d9c:	f894 3681 	ldrb.w	r3, [r4, #1665]	; 0x681
 8081da0:	b91b      	cbnz	r3, 8081daa <_ZN4MQTT11isConnectedEv+0x16>
    }
}


bool MQTT::isConnected() {
    bool rc = (int)tcpClient.connected();
 8081da2:	3000      	adds	r0, #0
 8081da4:	bf18      	it	ne
 8081da6:	2001      	movne	r0, #1
 8081da8:	bd10      	pop	{r4, pc}
    if (tls)
        return tlsConnected;
 8081daa:	f894 0680 	ldrb.w	r0, [r4, #1664]	; 0x680
    return rc;
}
 8081dae:	bd10      	pop	{r4, pc}

08081db0 <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 8081db0:	b510      	push	{r4, lr}
 8081db2:	4604      	mov	r4, r0
    if (isConnected()) {
 8081db4:	f7ff ffee 	bl	8081d94 <_ZN4MQTT11isConnectedEv>
 8081db8:	b128      	cbz	r0, 8081dc6 <_ZN4MQTTD1Ev+0x16>
        disconnect();
 8081dba:	4620      	mov	r0, r4
 8081dbc:	f7ff ffbb 	bl	8081d36 <_ZN4MQTT10disconnectEv>
        free(buffer);
 8081dc0:	69e0      	ldr	r0, [r4, #28]
 8081dc2:	f00f f9c9 	bl	8091158 <free>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 8081dc6:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8081dca:	f00f fd19 	bl	8091800 <_ZN6StringD1Ev>
 8081dce:	4620      	mov	r0, r4
 8081dd0:	f7ff ff22 	bl	8081c18 <_ZN9TCPClientD1Ev>
    if (isConnected()) {
        disconnect();
        free(buffer);
    }
}
 8081dd4:	4620      	mov	r0, r4
 8081dd6:	bd10      	pop	{r4, pc}

08081dd8 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j>:
    return this->enableTls(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int MQTT::enableTls(const char *rootCaPem, const size_t rootCaPemSize,
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
 8081dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081ddc:	4605      	mov	r5, r0
 8081dde:	4693      	mov	fp, r2
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
 8081de0:	f500 7461 	add.w	r4, r0, #900	; 0x384
    return this->enableTls(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int MQTT::enableTls(const char *rootCaPem, const size_t rootCaPemSize,
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
 8081de4:	4699      	mov	r9, r3
    int ret;
    tls = true;
 8081de6:	2301      	movs	r3, #1
    return this->enableTls(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int MQTT::enableTls(const char *rootCaPem, const size_t rootCaPemSize,
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
 8081de8:	b085      	sub	sp, #20
    int ret;
    tls = true;
 8081dea:	f880 3681 	strb.w	r3, [r0, #1665]	; 0x681

    mbedtls_ssl_config_init(&conf);
    mbedtls_ssl_init(&ssl);
 8081dee:	f505 7634 	add.w	r6, r5, #720	; 0x2d0
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
 8081df2:	4620      	mov	r0, r4
    return this->enableTls(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int MQTT::enableTls(const char *rootCaPem, const size_t rootCaPemSize,
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
 8081df4:	9103      	str	r1, [sp, #12]
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
    mbedtls_ssl_init(&ssl);
    mbedtls_x509_crt_init(&cacert);
 8081df6:	f505 7a7a 	add.w	sl, r5, #1000	; 0x3e8
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
 8081dfa:	f008 fbfb 	bl	808a5f4 <mbedtls_ssl_config_init>
    mbedtls_ssl_init(&ssl);
 8081dfe:	4630      	mov	r0, r6
 8081e00:	f008 f9e4 	bl	808a1cc <mbedtls_ssl_init>
    mbedtls_x509_crt_init(&cacert);
    mbedtls_x509_crt_init(&clicert);
 8081e04:	f205 571c 	addw	r7, r5, #1308	; 0x51c
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
    mbedtls_ssl_init(&ssl);
    mbedtls_x509_crt_init(&cacert);
 8081e08:	4650      	mov	r0, sl
 8081e0a:	f006 fcd7 	bl	80887bc <mbedtls_x509_crt_init>
    mbedtls_x509_crt_init(&clicert);
    mbedtls_pk_init(&pkey);
 8081e0e:	f505 68ca 	add.w	r8, r5, #1616	; 0x650
    tls = true;

    mbedtls_ssl_config_init(&conf);
    mbedtls_ssl_init(&ssl);
    mbedtls_x509_crt_init(&cacert);
    mbedtls_x509_crt_init(&clicert);
 8081e12:	4638      	mov	r0, r7
 8081e14:	f006 fcd2 	bl	80887bc <mbedtls_x509_crt_init>
    mbedtls_pk_init(&pkey);
 8081e18:	4640      	mov	r0, r8
 8081e1a:	f00a f9d9 	bl	808c1d0 <mbedtls_pk_init>

    mbedtls_ssl_conf_dbg(&conf, &MQTT::debug_Tls, nullptr);
 8081e1e:	2200      	movs	r2, #0
 8081e20:	4935      	ldr	r1, [pc, #212]	; (8081ef8 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x120>)
 8081e22:	4620      	mov	r0, r4
 8081e24:	f008 f9e3 	bl	808a1ee <mbedtls_ssl_conf_dbg>
    #if defined(MBEDTLS_DEBUG_C)
      mbedtls_debug_set_threshold(DEBUG_TLS_CORE_LEVEL);
    #endif

    if ((ret = mbedtls_x509_crt_parse(&cacert, (const unsigned char *)rootCaPem, rootCaPemSize)) < 0) {
 8081e28:	465a      	mov	r2, fp
 8081e2a:	9903      	ldr	r1, [sp, #12]
 8081e2c:	4650      	mov	r0, sl
 8081e2e:	f007 f863 	bl	8088ef8 <mbedtls_x509_crt_parse>
 8081e32:	2800      	cmp	r0, #0
 8081e34:	db5d      	blt.n	8081ef2 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x11a>
      debug_tls(" enableTls mbedtls_x509_crt_parse error : %d\n", ret);
      return ret;
    }

    if (clientCertPem != NULL && clientCertPemSize > 0) {
 8081e36:	f1b9 0f00 	cmp.w	r9, #0
 8081e3a:	d102      	bne.n	8081e42 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x6a>
        debug_tls(" tlsClientKey mbedtls_x509_crt_parse error : %d\n", ret);
        return ret;
      }
    }

    if (clientKeyPem != NULL && clientKeyPemSize > 0) {
 8081e3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8081e3e:	b95b      	cbnz	r3, 8081e58 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x80>
 8081e40:	e00c      	b.n	8081e5c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x84>
    if ((ret = mbedtls_x509_crt_parse(&cacert, (const unsigned char *)rootCaPem, rootCaPemSize)) < 0) {
      debug_tls(" enableTls mbedtls_x509_crt_parse error : %d\n", ret);
      return ret;
    }

    if (clientCertPem != NULL && clientCertPemSize > 0) {
 8081e42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8081e44:	2b00      	cmp	r3, #0
 8081e46:	d0f9      	beq.n	8081e3c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x64>
      if ((ret = mbedtls_x509_crt_parse(&clicert, (const unsigned char *)clientCertPem, clientCertPemSize)) < 0) {
 8081e48:	461a      	mov	r2, r3
 8081e4a:	4649      	mov	r1, r9
 8081e4c:	4638      	mov	r0, r7
 8081e4e:	f007 f853 	bl	8088ef8 <mbedtls_x509_crt_parse>
 8081e52:	2800      	cmp	r0, #0
 8081e54:	daf2      	bge.n	8081e3c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x64>
 8081e56:	e04c      	b.n	8081ef2 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x11a>
        debug_tls(" tlsClientKey mbedtls_x509_crt_parse error : %d\n", ret);
        return ret;
      }
    }

    if (clientKeyPem != NULL && clientKeyPemSize > 0) {
 8081e58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8081e5a:	b94b      	cbnz	r3, 8081e70 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x98>
        debug_tls(" tlsClientKey mbedtls_pk_parse_key error : %d\n", ret);
        return ret;
      }
    }

    if ((ret = mbedtls_ssl_config_defaults(&conf, MBEDTLS_SSL_IS_CLIENT,
 8081e5c:	2300      	movs	r3, #0
 8081e5e:	461a      	mov	r2, r3
 8081e60:	4619      	mov	r1, r3
 8081e62:	4620      	mov	r0, r4
 8081e64:	f008 fbca 	bl	808a5fc <mbedtls_ssl_config_defaults>
 8081e68:	4683      	mov	fp, r0
 8081e6a:	2800      	cmp	r0, #0
 8081e6c:	d141      	bne.n	8081ef2 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x11a>
 8081e6e:	e009      	b.n	8081e84 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0xac>
        return ret;
      }
    }

    if (clientKeyPem != NULL && clientKeyPemSize > 0) {
      if ((ret = mbedtls_pk_parse_key(&pkey, (const unsigned char *)clientKeyPem, clientKeyPemSize, NULL, 0)) != 0) {
 8081e70:	2300      	movs	r3, #0
 8081e72:	9300      	str	r3, [sp, #0]
 8081e74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8081e76:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8081e78:	4640      	mov	r0, r8
 8081e7a:	f004 fedd 	bl	8086c38 <mbedtls_pk_parse_key>
 8081e7e:	2800      	cmp	r0, #0
 8081e80:	d0ec      	beq.n	8081e5c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x84>
 8081e82:	e036      	b.n	8081ef2 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x11a>

    if ((ret = mbedtls_ssl_config_defaults(&conf, MBEDTLS_SSL_IS_CLIENT,
                   MBEDTLS_SSL_TRANSPORT_STREAM, MBEDTLS_SSL_PRESET_DEFAULT)) != 0) {
      return ret;
    }
    mbedtls_ssl_conf_min_version(&conf, MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3);
 8081e84:	2203      	movs	r2, #3
 8081e86:	4611      	mov	r1, r2
 8081e88:	4620      	mov	r0, r4
 8081e8a:	f008 f9c7 	bl	808a21c <mbedtls_ssl_conf_min_version>
    mbedtls_ssl_conf_verify(&conf, &MQTT::veryfyCert_Tls, NULL);
 8081e8e:	465a      	mov	r2, fp
 8081e90:	491a      	ldr	r1, [pc, #104]	; (8081efc <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x124>)
 8081e92:	4620      	mov	r0, r4
 8081e94:	f008 f9a5 	bl	808a1e2 <mbedtls_ssl_conf_verify>

    // if server certificates is not valid, connection will success. check certificates on verify() function.
    mbedtls_ssl_conf_authmode(&conf, MBEDTLS_SSL_VERIFY_OPTIONAL);
 8081e98:	2101      	movs	r1, #1
 8081e9a:	4620      	mov	r0, r4
 8081e9c:	f008 f99a 	bl	808a1d4 <mbedtls_ssl_conf_authmode>
    mbedtls_ssl_conf_rng(&conf, &MQTT::rng_Tls, nullptr);
 8081ea0:	465a      	mov	r2, fp
 8081ea2:	4917      	ldr	r1, [pc, #92]	; (8081f00 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x128>)
 8081ea4:	4620      	mov	r0, r4
 8081ea6:	f008 f99f 	bl	808a1e8 <mbedtls_ssl_conf_rng>
    mbedtls_ssl_conf_ca_chain(&conf, &cacert, nullptr);
 8081eaa:	465a      	mov	r2, fp
 8081eac:	4651      	mov	r1, sl
 8081eae:	4620      	mov	r0, r4
 8081eb0:	f008 f9b1 	bl	808a216 <mbedtls_ssl_conf_ca_chain>

    if (clientCertPem != NULL && clientKeyPem != NULL) {
 8081eb4:	f1b9 0f00 	cmp.w	r9, #0
 8081eb8:	d006      	beq.n	8081ec8 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0xf0>
 8081eba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8081ebc:	b123      	cbz	r3, 8081ec8 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0xf0>
      mbedtls_ssl_conf_own_cert(&conf, &clicert, &pkey);
 8081ebe:	4642      	mov	r2, r8
 8081ec0:	4639      	mov	r1, r7
 8081ec2:	4620      	mov	r0, r4
 8081ec4:	f008 f9a4 	bl	808a210 <mbedtls_ssl_conf_own_cert>
    }

    if((ret = mbedtls_ssl_setup(&ssl, &conf)) != 0) {
 8081ec8:	4621      	mov	r1, r4
 8081eca:	4630      	mov	r0, r6
 8081ecc:	f008 fb0a 	bl	808a4e4 <mbedtls_ssl_setup>
 8081ed0:	4604      	mov	r4, r0
 8081ed2:	b968      	cbnz	r0, 8081ef0 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x118>
      return ret;
    }

    mbedtls_ssl_set_timer_cb(&ssl, &timer, mbedtls_timing_set_delay, mbedtls_timing_get_delay);
 8081ed4:	4b0b      	ldr	r3, [pc, #44]	; (8081f04 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x12c>)
 8081ed6:	4a0c      	ldr	r2, [pc, #48]	; (8081f08 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x130>)
 8081ed8:	f505 61cb 	add.w	r1, r5, #1624	; 0x658
 8081edc:	4630      	mov	r0, r6
 8081ede:	f008 f98f 	bl	808a200 <mbedtls_ssl_set_timer_cb>
    mbedtls_ssl_set_bio(&ssl, this, &MQTT::send_Tls,  &MQTT::recv_Tls, nullptr);
 8081ee2:	9400      	str	r4, [sp, #0]
 8081ee4:	4b09      	ldr	r3, [pc, #36]	; (8081f0c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x134>)
 8081ee6:	4a0a      	ldr	r2, [pc, #40]	; (8081f10 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x138>)
 8081ee8:	4629      	mov	r1, r5
 8081eea:	4630      	mov	r0, r6
 8081eec:	f008 f982 	bl	808a1f4 <mbedtls_ssl_set_bio>
 8081ef0:	4620      	mov	r0, r4
    return 0;
}
 8081ef2:	b005      	add	sp, #20
 8081ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081ef8:	08081b5b 	.word	0x08081b5b
 8081efc:	08081bf5 	.word	0x08081bf5
 8081f00:	08081bc1 	.word	0x08081bc1
 8081f04:	08085e81 	.word	0x08085e81
 8081f08:	08085e73 	.word	0x08085e73
 8081f0c:	08081b91 	.word	0x08081b91
 8081f10:	08081b5d 	.word	0x08081b5d

08081f14 <_GLOBAL__sub_I__ZN4MQTTC2Ev>:
 8081f14:	f00e be78 	b.w	8090c08 <HAL_Pin_Map>

08081f18 <mbedtls_sha256_init>:
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 8081f18:	226c      	movs	r2, #108	; 0x6c
 8081f1a:	2100      	movs	r1, #0
 8081f1c:	f012 b847 	b.w	8093fae <memset>

08081f20 <mbedtls_sha256_free>:
}

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
    if( ctx == NULL )
 8081f20:	b138      	cbz	r0, 8081f32 <mbedtls_sha256_free+0x12>
 8081f22:	f100 026c 	add.w	r2, r0, #108	; 0x6c

#if !defined(MBEDTLS_SHA256_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8081f26:	2300      	movs	r3, #0
 8081f28:	4290      	cmp	r0, r2
 8081f2a:	d002      	beq.n	8081f32 <mbedtls_sha256_free+0x12>
 8081f2c:	7003      	strb	r3, [r0, #0]
 8081f2e:	3001      	adds	r0, #1
 8081f30:	e7fa      	b.n	8081f28 <mbedtls_sha256_free+0x8>
 8081f32:	4770      	bx	lr

08081f34 <mbedtls_sha256_clone>:
    mbedtls_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
}

void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
                           const mbedtls_sha256_context *src )
{
 8081f34:	b508      	push	{r3, lr}
    *dst = *src;
 8081f36:	226c      	movs	r2, #108	; 0x6c
 8081f38:	f012 f813 	bl	8093f62 <memcpy>
 8081f3c:	bd08      	pop	{r3, pc}
	...

08081f40 <mbedtls_sha256_starts_ret>:
/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    ctx->total[0] = 0;
 8081f40:	2300      	movs	r3, #0
 8081f42:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
 8081f44:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
 8081f46:	b9a1      	cbnz	r1, 8081f72 <mbedtls_sha256_starts_ret+0x32>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
 8081f48:	4b18      	ldr	r3, [pc, #96]	; (8081fac <mbedtls_sha256_starts_ret+0x6c>)
 8081f4a:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
 8081f4c:	4b18      	ldr	r3, [pc, #96]	; (8081fb0 <mbedtls_sha256_starts_ret+0x70>)
 8081f4e:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
 8081f50:	4b18      	ldr	r3, [pc, #96]	; (8081fb4 <mbedtls_sha256_starts_ret+0x74>)
 8081f52:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
 8081f54:	4b18      	ldr	r3, [pc, #96]	; (8081fb8 <mbedtls_sha256_starts_ret+0x78>)
 8081f56:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0x510E527F;
 8081f58:	4b18      	ldr	r3, [pc, #96]	; (8081fbc <mbedtls_sha256_starts_ret+0x7c>)
 8081f5a:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x9B05688C;
 8081f5c:	4b18      	ldr	r3, [pc, #96]	; (8081fc0 <mbedtls_sha256_starts_ret+0x80>)
 8081f5e:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
 8081f60:	4b18      	ldr	r3, [pc, #96]	; (8081fc4 <mbedtls_sha256_starts_ret+0x84>)
 8081f62:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
 8081f64:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8081f68:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8081f6c:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 8081f70:	e018      	b.n	8081fa4 <mbedtls_sha256_starts_ret+0x64>
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
 8081f72:	4b15      	ldr	r3, [pc, #84]	; (8081fc8 <mbedtls_sha256_starts_ret+0x88>)
 8081f74:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0x367CD507;
 8081f76:	4b15      	ldr	r3, [pc, #84]	; (8081fcc <mbedtls_sha256_starts_ret+0x8c>)
 8081f78:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3070DD17;
 8081f7a:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
 8081f7e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8081f82:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8081f86:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xF70E5939;
 8081f88:	4b11      	ldr	r3, [pc, #68]	; (8081fd0 <mbedtls_sha256_starts_ret+0x90>)
 8081f8a:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
 8081f8c:	4b11      	ldr	r3, [pc, #68]	; (8081fd4 <mbedtls_sha256_starts_ret+0x94>)
 8081f8e:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x68581511;
 8081f90:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
 8081f94:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
 8081f98:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 8081f9c:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
 8081f9e:	4b0e      	ldr	r3, [pc, #56]	; (8081fd8 <mbedtls_sha256_starts_ret+0x98>)
 8081fa0:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
 8081fa2:	4b0e      	ldr	r3, [pc, #56]	; (8081fdc <mbedtls_sha256_starts_ret+0x9c>)
 8081fa4:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
 8081fa6:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
 8081fa8:	2000      	movs	r0, #0
 8081faa:	4770      	bx	lr
 8081fac:	6a09e667 	.word	0x6a09e667
 8081fb0:	bb67ae85 	.word	0xbb67ae85
 8081fb4:	3c6ef372 	.word	0x3c6ef372
 8081fb8:	a54ff53a 	.word	0xa54ff53a
 8081fbc:	510e527f 	.word	0x510e527f
 8081fc0:	9b05688c 	.word	0x9b05688c
 8081fc4:	1f83d9ab 	.word	0x1f83d9ab
 8081fc8:	c1059ed8 	.word	0xc1059ed8
 8081fcc:	367cd507 	.word	0x367cd507
 8081fd0:	f70e5939 	.word	0xf70e5939
 8081fd4:	ffc00b31 	.word	0xffc00b31
 8081fd8:	64f98fa7 	.word	0x64f98fa7
 8081fdc:	befa4fa4 	.word	0xbefa4fa4

08081fe0 <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
 8081fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081fe4:	1d03      	adds	r3, r0, #4
 8081fe6:	b0cf      	sub	sp, #316	; 0x13c
 8081fe8:	9305      	str	r3, [sp, #20]
 8081fea:	461a      	mov	r2, r3
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
 8081fec:	2300      	movs	r3, #0
        A[i] = ctx->state[i];
 8081fee:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8081ff2:	ac06      	add	r4, sp, #24
 8081ff4:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
{
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
 8081ff8:	3301      	adds	r3, #1
 8081ffa:	2b08      	cmp	r3, #8
 8081ffc:	d1f7      	bne.n	8081fee <mbedtls_internal_sha256_process+0xe>
 8081ffe:	4608      	mov	r0, r1
 8082000:	2200      	movs	r2, #0
        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );
 8082002:	ac0e      	add	r4, sp, #56	; 0x38
 8082004:	f811 5022 	ldrb.w	r5, [r1, r2, lsl #2]
 8082008:	78c3      	ldrb	r3, [r0, #3]
 808200a:	3004      	adds	r0, #4
 808200c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8082010:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 8082014:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8082018:	f810 5c02 	ldrb.w	r5, [r0, #-2]
 808201c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8082020:	f844 3022 	str.w	r3, [r4, r2, lsl #2]

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
 8082024:	3201      	adds	r2, #1
 8082026:	2a10      	cmp	r2, #16
 8082028:	d1ec      	bne.n	8082004 <mbedtls_internal_sha256_process+0x24>
 808202a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808202c:	4c9f      	ldr	r4, [pc, #636]	; (80822ac <mbedtls_internal_sha256_process+0x2cc>)
 808202e:	9300      	str	r3, [sp, #0]
 8082030:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8082032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8082034:	9f08      	ldr	r7, [sp, #32]
 8082036:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 808203a:	f8dd e01c 	ldr.w	lr, [sp, #28]
 808203e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8082042:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8082046:	ad0f      	add	r5, sp, #60	; 0x3c
 8082048:	f104 0a40 	add.w	sl, r4, #64	; 0x40
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 808204c:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8082050:	ea4f 22f8 	mov.w	r2, r8, ror #11
 8082054:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8082058:	ea86 0c0b 	eor.w	ip, r6, fp
 808205c:	ea82 12b8 	eor.w	r2, r2, r8, ror #6
 8082060:	4401      	add	r1, r0
 8082062:	ea82 6278 	eor.w	r2, r2, r8, ror #25
 8082066:	ea0c 0c08 	and.w	ip, ip, r8
 808206a:	ea8c 0c06 	eor.w	ip, ip, r6
 808206e:	440a      	add	r2, r1
 8082070:	9900      	ldr	r1, [sp, #0]
 8082072:	4462      	add	r2, ip
 8082074:	ea4f 3079 	mov.w	r0, r9, ror #13
 8082078:	ea4e 0c09 	orr.w	ip, lr, r9
 808207c:	440a      	add	r2, r1
 808207e:	ea0c 0c07 	and.w	ip, ip, r7
 8082082:	ea0e 0109 	and.w	r1, lr, r9
 8082086:	ea80 00b9 	eor.w	r0, r0, r9, ror #2
 808208a:	ea4c 0101 	orr.w	r1, ip, r1
 808208e:	ea80 50b9 	eor.w	r0, r0, r9, ror #22
 8082092:	4408      	add	r0, r1
 8082094:	4413      	add	r3, r2
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8082096:	6829      	ldr	r1, [r5, #0]
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 8082098:	4402      	add	r2, r0
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 808209a:	6820      	ldr	r0, [r4, #0]
 808209c:	ea8b 0c08 	eor.w	ip, fp, r8
 80820a0:	4401      	add	r1, r0
 80820a2:	ea0c 0c03 	and.w	ip, ip, r3
 80820a6:	ea4f 20f3 	mov.w	r0, r3, ror #11
 80820aa:	ea8c 0c0b 	eor.w	ip, ip, fp
 80820ae:	440e      	add	r6, r1
 80820b0:	ea80 10b3 	eor.w	r0, r0, r3, ror #6
 80820b4:	eb06 010c 	add.w	r1, r6, ip
 80820b8:	ea80 6073 	eor.w	r0, r0, r3, ror #25
 80820bc:	180e      	adds	r6, r1, r0
 80820be:	eb06 0c07 	add.w	ip, r6, r7
 80820c2:	ea42 0009 	orr.w	r0, r2, r9
 80820c6:	ea4f 3772 	mov.w	r7, r2, ror #13
 80820ca:	ea02 0109 	and.w	r1, r2, r9
 80820ce:	ea87 07b2 	eor.w	r7, r7, r2, ror #2
 80820d2:	ea00 000e 	and.w	r0, r0, lr
 80820d6:	ea87 57b2 	eor.w	r7, r7, r2, ror #22
 80820da:	4308      	orrs	r0, r1
 80820dc:	4438      	add	r0, r7
 80820de:	4430      	add	r0, r6
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 80820e0:	6869      	ldr	r1, [r5, #4]
 80820e2:	6866      	ldr	r6, [r4, #4]
 80820e4:	ea83 0708 	eor.w	r7, r3, r8
 80820e8:	440e      	add	r6, r1
 80820ea:	ea07 070c 	and.w	r7, r7, ip
 80820ee:	ea4f 21fc 	mov.w	r1, ip, ror #11
 80820f2:	ea87 0708 	eor.w	r7, r7, r8
 80820f6:	44b3      	add	fp, r6
 80820f8:	ea81 11bc 	eor.w	r1, r1, ip, ror #6
 80820fc:	eb0b 0607 	add.w	r6, fp, r7
 8082100:	ea81 617c 	eor.w	r1, r1, ip, ror #25
 8082104:	eb06 0b01 	add.w	fp, r6, r1
 8082108:	ea4f 3770 	mov.w	r7, r0, ror #13
 808210c:	ea42 0100 	orr.w	r1, r2, r0
 8082110:	ea02 0600 	and.w	r6, r2, r0
 8082114:	ea87 07b0 	eor.w	r7, r7, r0, ror #2
 8082118:	ea01 0109 	and.w	r1, r1, r9
 808211c:	ea87 57b0 	eor.w	r7, r7, r0, ror #22
 8082120:	4331      	orrs	r1, r6
 8082122:	4439      	add	r1, r7
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 8082124:	68ae      	ldr	r6, [r5, #8]
 8082126:	68a7      	ldr	r7, [r4, #8]

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 8082128:	4459      	add	r1, fp
 808212a:	44de      	add	lr, fp
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 808212c:	443e      	add	r6, r7
 808212e:	ea83 0b0c 	eor.w	fp, r3, ip
 8082132:	44b0      	add	r8, r6
 8082134:	ea0b 0b0e 	and.w	fp, fp, lr
 8082138:	ea4f 26fe 	mov.w	r6, lr, ror #11
 808213c:	ea8b 0b03 	eor.w	fp, fp, r3
 8082140:	ea86 16be 	eor.w	r6, r6, lr, ror #6
 8082144:	44d8      	add	r8, fp
 8082146:	ea86 667e 	eor.w	r6, r6, lr, ror #25
 808214a:	4446      	add	r6, r8
 808214c:	ea4f 3b71 	mov.w	fp, r1, ror #13
 8082150:	ea40 0801 	orr.w	r8, r0, r1
 8082154:	ea00 0701 	and.w	r7, r0, r1
 8082158:	ea8b 0bb1 	eor.w	fp, fp, r1, ror #2
 808215c:	ea08 0802 	and.w	r8, r8, r2
 8082160:	ea8b 5bb1 	eor.w	fp, fp, r1, ror #22
 8082164:	ea48 0807 	orr.w	r8, r8, r7
 8082168:	44d8      	add	r8, fp
 808216a:	44b0      	add	r8, r6
 808216c:	44b1      	add	r9, r6
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 808216e:	68e7      	ldr	r7, [r4, #12]
 8082170:	68ee      	ldr	r6, [r5, #12]
 8082172:	ea8c 0b0e 	eor.w	fp, ip, lr
 8082176:	4437      	add	r7, r6
 8082178:	ea0b 0b09 	and.w	fp, fp, r9
 808217c:	ea8b 0b0c 	eor.w	fp, fp, ip
 8082180:	443b      	add	r3, r7
 8082182:	eb03 070b 	add.w	r7, r3, fp
 8082186:	ea4f 23f9 	mov.w	r3, r9, ror #11
 808218a:	ea83 13b9 	eor.w	r3, r3, r9, ror #6
 808218e:	ea83 6379 	eor.w	r3, r3, r9, ror #25
 8082192:	18fe      	adds	r6, r7, r3
 8082194:	1993      	adds	r3, r2, r6
 8082196:	9300      	str	r3, [sp, #0]
 8082198:	ea4f 3778 	mov.w	r7, r8, ror #13
 808219c:	ea41 0308 	orr.w	r3, r1, r8
 80821a0:	ea01 0208 	and.w	r2, r1, r8
 80821a4:	ea87 07b8 	eor.w	r7, r7, r8, ror #2
 80821a8:	4003      	ands	r3, r0
 80821aa:	ea87 57b8 	eor.w	r7, r7, r8, ror #22
 80821ae:	4313      	orrs	r3, r2
 80821b0:	443b      	add	r3, r7
 80821b2:	4433      	add	r3, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 80821b4:	692a      	ldr	r2, [r5, #16]
 80821b6:	6926      	ldr	r6, [r4, #16]
 80821b8:	ea4f 3b73 	mov.w	fp, r3, ror #13
 80821bc:	4432      	add	r2, r6
 80821be:	4494      	add	ip, r2
 80821c0:	9a00      	ldr	r2, [sp, #0]
 80821c2:	ea8e 0609 	eor.w	r6, lr, r9
 80821c6:	4016      	ands	r6, r2
 80821c8:	ea4f 27f2 	mov.w	r7, r2, ror #11
 80821cc:	ea86 060e 	eor.w	r6, r6, lr
 80821d0:	ea87 17b2 	eor.w	r7, r7, r2, ror #6
 80821d4:	44b4      	add	ip, r6
 80821d6:	ea87 6772 	eor.w	r7, r7, r2, ror #25
 80821da:	eb0c 0207 	add.w	r2, ip, r7
 80821de:	ea48 0703 	orr.w	r7, r8, r3
 80821e2:	1886      	adds	r6, r0, r2
 80821e4:	400f      	ands	r7, r1
 80821e6:	ea08 0003 	and.w	r0, r8, r3
 80821ea:	ea8b 0bb3 	eor.w	fp, fp, r3, ror #2
 80821ee:	ea8b 5bb3 	eor.w	fp, fp, r3, ror #22
 80821f2:	4307      	orrs	r7, r0
 80821f4:	445f      	add	r7, fp
 80821f6:	4417      	add	r7, r2
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 80821f8:	6960      	ldr	r0, [r4, #20]
 80821fa:	696a      	ldr	r2, [r5, #20]
 80821fc:	3420      	adds	r4, #32
 80821fe:	4410      	add	r0, r2
 8082200:	9a00      	ldr	r2, [sp, #0]
 8082202:	4486      	add	lr, r0
 8082204:	ea89 0c02 	eor.w	ip, r9, r2
 8082208:	ea0c 0c06 	and.w	ip, ip, r6
 808220c:	ea8c 0c09 	eor.w	ip, ip, r9
 8082210:	eb0e 000c 	add.w	r0, lr, ip
 8082214:	ea4f 2ef6 	mov.w	lr, r6, ror #11
 8082218:	ea8e 1eb6 	eor.w	lr, lr, r6, ror #6
 808221c:	ea8e 6e76 	eor.w	lr, lr, r6, ror #25
 8082220:	eb00 020e 	add.w	r2, r0, lr
 8082224:	ea4f 3077 	mov.w	r0, r7, ror #13
 8082228:	ea43 0e07 	orr.w	lr, r3, r7
 808222c:	eb01 0b02 	add.w	fp, r1, r2
 8082230:	ea0e 0e08 	and.w	lr, lr, r8
 8082234:	ea03 0107 	and.w	r1, r3, r7
 8082238:	ea80 00b7 	eor.w	r0, r0, r7, ror #2
 808223c:	ea80 50b7 	eor.w	r0, r0, r7, ror #22
 8082240:	ea4e 0e01 	orr.w	lr, lr, r1
 8082244:	4486      	add	lr, r0
 8082246:	4496      	add	lr, r2
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 8082248:	f854 1c08 	ldr.w	r1, [r4, #-8]
 808224c:	69aa      	ldr	r2, [r5, #24]
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
 808224e:	45a2      	cmp	sl, r4
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 8082250:	4411      	add	r1, r2
 8082252:	9a00      	ldr	r2, [sp, #0]
 8082254:	4489      	add	r9, r1
 8082256:	ea82 0006 	eor.w	r0, r2, r6
 808225a:	ea00 000b 	and.w	r0, r0, fp
 808225e:	ea80 0002 	eor.w	r0, r0, r2
 8082262:	eb09 0100 	add.w	r1, r9, r0
 8082266:	ea4f 29fb 	mov.w	r9, fp, ror #11
 808226a:	ea89 19bb 	eor.w	r9, r9, fp, ror #6
 808226e:	ea89 697b 	eor.w	r9, r9, fp, ror #25
 8082272:	eb01 0209 	add.w	r2, r1, r9
 8082276:	ea4f 307e 	mov.w	r0, lr, ror #13
 808227a:	ea47 090e 	orr.w	r9, r7, lr
 808227e:	ea80 00be 	eor.w	r0, r0, lr, ror #2
 8082282:	ea09 0903 	and.w	r9, r9, r3
 8082286:	ea07 010e 	and.w	r1, r7, lr
 808228a:	ea80 50be 	eor.w	r0, r0, lr, ror #22
 808228e:	ea49 0901 	orr.w	r9, r9, r1
 8082292:	4481      	add	r9, r0
 8082294:	4490      	add	r8, r2
 8082296:	4491      	add	r9, r2
 8082298:	f105 0520 	add.w	r5, r5, #32
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
 808229c:	f47f aed6 	bne.w	808204c <mbedtls_internal_sha256_process+0x6c>
 80822a0:	2200      	movs	r2, #0
 80822a2:	f8df a00c 	ldr.w	sl, [pc, #12]	; 80822b0 <mbedtls_internal_sha256_process+0x2d0>
 80822a6:	ac0e      	add	r4, sp, #56	; 0x38
 80822a8:	9204      	str	r2, [sp, #16]
 80822aa:	e003      	b.n	80822b4 <mbedtls_internal_sha256_process+0x2d4>
 80822ac:	0809650c 	.word	0x0809650c
 80822b0:	08096508 	.word	0x08096508
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 80822b4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80822b6:	6860      	ldr	r0, [r4, #4]
 80822b8:	ea4f 45f2 	mov.w	r5, r2, ror #19
 80822bc:	ea85 4572 	eor.w	r5, r5, r2, ror #17
 80822c0:	ea85 2592 	eor.w	r5, r5, r2, lsr #10
 80822c4:	9a04      	ldr	r2, [sp, #16]
 80822c6:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 80822ca:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 80822ce:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80822d0:	ea4f 4cb0 	mov.w	ip, r0, ror #18
 80822d4:	440a      	add	r2, r1
 80822d6:	ea8c 1cf0 	eor.w	ip, ip, r0, ror #7
 80822da:	ea4f 21f8 	mov.w	r1, r8, ror #11
 80822de:	ea8c 0cd0 	eor.w	ip, ip, r0, lsr #3
 80822e2:	ea81 11b8 	eor.w	r1, r1, r8, ror #6
 80822e6:	4415      	add	r5, r2
 80822e8:	eb05 020c 	add.w	r2, r5, ip
 80822ec:	ea81 6578 	eor.w	r5, r1, r8, ror #25
 80822f0:	ea86 010b 	eor.w	r1, r6, fp
 80822f4:	ea01 0108 	and.w	r1, r1, r8
 80822f8:	9203      	str	r2, [sp, #12]
 80822fa:	ea81 0206 	eor.w	r2, r1, r6
 80822fe:	18a9      	adds	r1, r5, r2
 8082300:	f8da 2040 	ldr.w	r2, [sl, #64]	; 0x40
 8082304:	ea4e 0509 	orr.w	r5, lr, r9
 8082308:	440a      	add	r2, r1
 808230a:	9903      	ldr	r1, [sp, #12]
 808230c:	403d      	ands	r5, r7
 808230e:	6421      	str	r1, [r4, #64]	; 0x40
 8082310:	440a      	add	r2, r1
 8082312:	9900      	ldr	r1, [sp, #0]
 8082314:	f10a 0a20 	add.w	sl, sl, #32
 8082318:	440a      	add	r2, r1
 808231a:	18d3      	adds	r3, r2, r3
 808231c:	ea4f 3179 	mov.w	r1, r9, ror #13
 8082320:	9300      	str	r3, [sp, #0]
 8082322:	ea81 01b9 	eor.w	r1, r1, r9, ror #2
 8082326:	ea0e 0309 	and.w	r3, lr, r9
 808232a:	ea81 51b9 	eor.w	r1, r1, r9, ror #22
 808232e:	432b      	orrs	r3, r5
 8082330:	440b      	add	r3, r1
 8082332:	441a      	add	r2, r3
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 8082334:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8082336:	68a5      	ldr	r5, [r4, #8]
 8082338:	ea4f 41f3 	mov.w	r1, r3, ror #19
 808233c:	ea81 4173 	eor.w	r1, r1, r3, ror #17
 8082340:	ea81 2193 	eor.w	r1, r1, r3, lsr #10
 8082344:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8082346:	3420      	adds	r4, #32
 8082348:	4403      	add	r3, r0
 808234a:	4419      	add	r1, r3
 808234c:	ea4f 43b5 	mov.w	r3, r5, ror #18
 8082350:	ea83 13f5 	eor.w	r3, r3, r5, ror #7
 8082354:	ea83 0cd5 	eor.w	ip, r3, r5, lsr #3
 8082358:	eb01 030c 	add.w	r3, r1, ip
 808235c:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
 8082360:	9900      	ldr	r1, [sp, #0]
 8082362:	ea8b 0c08 	eor.w	ip, fp, r8
 8082366:	4430      	add	r0, r6
 8082368:	ea0c 0c01 	and.w	ip, ip, r1
 808236c:	ea8c 0c0b 	eor.w	ip, ip, fp
 8082370:	18c1      	adds	r1, r0, r3
 8082372:	448c      	add	ip, r1
 8082374:	9900      	ldr	r1, [sp, #0]
 8082376:	6263      	str	r3, [r4, #36]	; 0x24
 8082378:	ea4f 20f1 	mov.w	r0, r1, ror #11
 808237c:	ea80 10b1 	eor.w	r0, r0, r1, ror #6
 8082380:	ea80 6071 	eor.w	r0, r0, r1, ror #25
 8082384:	eb00 010c 	add.w	r1, r0, ip
 8082388:	19c8      	adds	r0, r1, r7
 808238a:	9001      	str	r0, [sp, #4]
 808238c:	ea4f 3c72 	mov.w	ip, r2, ror #13
 8082390:	ea42 0009 	orr.w	r0, r2, r9
 8082394:	ea02 0709 	and.w	r7, r2, r9
 8082398:	ea8c 0cb2 	eor.w	ip, ip, r2, ror #2
 808239c:	ea00 000e 	and.w	r0, r0, lr
 80823a0:	ea8c 5cb2 	eor.w	ip, ip, r2, ror #22
 80823a4:	4338      	orrs	r0, r7
 80823a6:	4460      	add	r0, ip
 80823a8:	4408      	add	r0, r1
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 80823aa:	9903      	ldr	r1, [sp, #12]
 80823ac:	f854 7c14 	ldr.w	r7, [r4, #-20]
 80823b0:	ea4f 46f1 	mov.w	r6, r1, ror #19
 80823b4:	ea86 4671 	eor.w	r6, r6, r1, ror #17
 80823b8:	ea86 2691 	eor.w	r6, r6, r1, lsr #10
 80823bc:	68e1      	ldr	r1, [r4, #12]
 80823be:	ea4f 4cb7 	mov.w	ip, r7, ror #18
 80823c2:	4429      	add	r1, r5
 80823c4:	440e      	add	r6, r1
 80823c6:	ea8c 1cf7 	eor.w	ip, ip, r7, ror #7
 80823ca:	9900      	ldr	r1, [sp, #0]
 80823cc:	ea8c 0cd7 	eor.w	ip, ip, r7, lsr #3
 80823d0:	4466      	add	r6, ip
 80823d2:	ea81 0c08 	eor.w	ip, r1, r8
 80823d6:	9901      	ldr	r1, [sp, #4]
 80823d8:	62a6      	str	r6, [r4, #40]	; 0x28
 80823da:	ea0c 0c01 	and.w	ip, ip, r1
 80823de:	f8da 1028 	ldr.w	r1, [sl, #40]	; 0x28
 80823e2:	ea8c 0c08 	eor.w	ip, ip, r8
 80823e6:	4459      	add	r1, fp
 80823e8:	198d      	adds	r5, r1, r6
 80823ea:	9901      	ldr	r1, [sp, #4]
 80823ec:	44ac      	add	ip, r5
 80823ee:	9d01      	ldr	r5, [sp, #4]
 80823f0:	ea4f 21f1 	mov.w	r1, r1, ror #11
 80823f4:	ea81 11b5 	eor.w	r1, r1, r5, ror #6
 80823f8:	ea81 6175 	eor.w	r1, r1, r5, ror #25
 80823fc:	eb01 050c 	add.w	r5, r1, ip
 8082400:	ea42 0100 	orr.w	r1, r2, r0
 8082404:	ea4f 3c70 	mov.w	ip, r0, ror #13
 8082408:	eb05 0b0e 	add.w	fp, r5, lr
 808240c:	ea8c 0cb0 	eor.w	ip, ip, r0, ror #2
 8082410:	ea02 0e00 	and.w	lr, r2, r0
 8082414:	ea01 0109 	and.w	r1, r1, r9
 8082418:	ea8c 5cb0 	eor.w	ip, ip, r0, ror #22
 808241c:	ea41 010e 	orr.w	r1, r1, lr
 8082420:	4461      	add	r1, ip
 8082422:	4429      	add	r1, r5
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8082424:	ea4f 45f3 	mov.w	r5, r3, ror #19
 8082428:	ea85 4573 	eor.w	r5, r5, r3, ror #17
 808242c:	ea85 2393 	eor.w	r3, r5, r3, lsr #10
 8082430:	6925      	ldr	r5, [r4, #16]
 8082432:	f854 cc10 	ldr.w	ip, [r4, #-16]
 8082436:	442f      	add	r7, r5
 8082438:	443b      	add	r3, r7
 808243a:	ea4f 47bc 	mov.w	r7, ip, ror #18
 808243e:	ea87 17fc 	eor.w	r7, r7, ip, ror #7
 8082442:	ea87 0edc 	eor.w	lr, r7, ip, lsr #3
 8082446:	eb03 070e 	add.w	r7, r3, lr
 808244a:	e89d 0028 	ldmia.w	sp, {r3, r5}
 808244e:	405d      	eors	r5, r3
 8082450:	ea05 050b 	and.w	r5, r5, fp
 8082454:	405d      	eors	r5, r3
 8082456:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
 808245a:	ea4f 3e71 	mov.w	lr, r1, ror #13
 808245e:	4498      	add	r8, r3
 8082460:	44b8      	add	r8, r7
 8082462:	4445      	add	r5, r8
 8082464:	ea4f 28fb 	mov.w	r8, fp, ror #11
 8082468:	ea88 18bb 	eor.w	r8, r8, fp, ror #6
 808246c:	ea88 687b 	eor.w	r8, r8, fp, ror #25
 8082470:	eb08 0305 	add.w	r3, r8, r5
 8082474:	eb03 0509 	add.w	r5, r3, r9
 8082478:	ea40 0801 	orr.w	r8, r0, r1
 808247c:	9502      	str	r5, [sp, #8]
 808247e:	ea8e 0eb1 	eor.w	lr, lr, r1, ror #2
 8082482:	ea00 0501 	and.w	r5, r0, r1
 8082486:	ea08 0802 	and.w	r8, r8, r2
 808248a:	ea8e 5eb1 	eor.w	lr, lr, r1, ror #22
 808248e:	ea48 0805 	orr.w	r8, r8, r5
 8082492:	44f0      	add	r8, lr
 8082494:	4498      	add	r8, r3
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8082496:	ea4f 4ef6 	mov.w	lr, r6, ror #19
 808249a:	6963      	ldr	r3, [r4, #20]
 808249c:	ea8e 4e76 	eor.w	lr, lr, r6, ror #17
 80824a0:	f854 5c0c 	ldr.w	r5, [r4, #-12]
 80824a4:	ea8e 2696 	eor.w	r6, lr, r6, lsr #10
 80824a8:	eb0c 0e03 	add.w	lr, ip, r3
 80824ac:	9b01      	ldr	r3, [sp, #4]
 80824ae:	4476      	add	r6, lr
 80824b0:	ea83 0c0b 	eor.w	ip, r3, fp
 80824b4:	ea4f 4eb5 	mov.w	lr, r5, ror #18
 80824b8:	9b02      	ldr	r3, [sp, #8]
 80824ba:	ea8e 1ef5 	eor.w	lr, lr, r5, ror #7
 80824be:	ea8e 09d5 	eor.w	r9, lr, r5, lsr #3
 80824c2:	ea0c 0c03 	and.w	ip, ip, r3
 80824c6:	9b01      	ldr	r3, [sp, #4]
 80824c8:	eb06 0e09 	add.w	lr, r6, r9
 80824cc:	f8da 6030 	ldr.w	r6, [sl, #48]	; 0x30
 80824d0:	ea8c 0c03 	eor.w	ip, ip, r3
 80824d4:	9b00      	ldr	r3, [sp, #0]
 80824d6:	4476      	add	r6, lr
 80824d8:	441e      	add	r6, r3
 80824da:	9b02      	ldr	r3, [sp, #8]
 80824dc:	44b4      	add	ip, r6
 80824de:	9e02      	ldr	r6, [sp, #8]
 80824e0:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80824e4:	ea83 13b6 	eor.w	r3, r3, r6, ror #6
 80824e8:	ea83 6376 	eor.w	r3, r3, r6, ror #25
 80824ec:	eb03 060c 	add.w	r6, r3, ip
 80824f0:	1993      	adds	r3, r2, r6
 80824f2:	9300      	str	r3, [sp, #0]
 80824f4:	ea41 0308 	orr.w	r3, r1, r8
 80824f8:	ea01 0208 	and.w	r2, r1, r8
 80824fc:	4003      	ands	r3, r0
 80824fe:	4313      	orrs	r3, r2
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8082500:	ea4f 42f7 	mov.w	r2, r7, ror #19
 8082504:	ea82 4277 	eor.w	r2, r2, r7, ror #17
    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8082508:	62e7      	str	r7, [r4, #44]	; 0x2c
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 808250a:	ea4f 3c78 	mov.w	ip, r8, ror #13
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 808250e:	ea82 2797 	eor.w	r7, r2, r7, lsr #10
 8082512:	69a2      	ldr	r2, [r4, #24]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8082514:	ea8c 0cb8 	eor.w	ip, ip, r8, ror #2
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8082518:	f854 9c08 	ldr.w	r9, [r4, #-8]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 808251c:	ea8c 5cb8 	eor.w	ip, ip, r8, ror #22
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8082520:	4415      	add	r5, r2
 8082522:	9a02      	ldr	r2, [sp, #8]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8082524:	4463      	add	r3, ip
 8082526:	4433      	add	r3, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8082528:	442f      	add	r7, r5
 808252a:	ea8b 0602 	eor.w	r6, fp, r2
 808252e:	ea4f 45b9 	mov.w	r5, r9, ror #18
 8082532:	9a00      	ldr	r2, [sp, #0]
 8082534:	ea85 15f9 	eor.w	r5, r5, r9, ror #7
 8082538:	ea85 05d9 	eor.w	r5, r5, r9, lsr #3
 808253c:	4016      	ands	r6, r2
 808253e:	f8da 2034 	ldr.w	r2, [sl, #52]	; 0x34
 8082542:	443d      	add	r5, r7
 8082544:	9f01      	ldr	r7, [sp, #4]
 8082546:	442a      	add	r2, r5
 8082548:	443a      	add	r2, r7
 808254a:	ea86 060b 	eor.w	r6, r6, fp
 808254e:	4416      	add	r6, r2
 8082550:	9a00      	ldr	r2, [sp, #0]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8082552:	f8c4 e030 	str.w	lr, [r4, #48]	; 0x30
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8082556:	ea4f 27f2 	mov.w	r7, r2, ror #11
 808255a:	ea87 17b2 	eor.w	r7, r7, r2, ror #6
 808255e:	ea87 6772 	eor.w	r7, r7, r2, ror #25
 8082562:	19ba      	adds	r2, r7, r6
 8082564:	1886      	adds	r6, r0, r2
 8082566:	ea4f 3073 	mov.w	r0, r3, ror #13
 808256a:	ea80 00b3 	eor.w	r0, r0, r3, ror #2
 808256e:	ea48 0703 	orr.w	r7, r8, r3
 8082572:	ea80 5cb3 	eor.w	ip, r0, r3, ror #22
 8082576:	400f      	ands	r7, r1
 8082578:	ea08 0003 	and.w	r0, r8, r3
 808257c:	4307      	orrs	r7, r0
 808257e:	4467      	add	r7, ip
 8082580:	4417      	add	r7, r2
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 8082582:	ea4f 42fe 	mov.w	r2, lr, ror #19
 8082586:	ea82 427e 	eor.w	r2, r2, lr, ror #17
 808258a:	ea82 2e9e 	eor.w	lr, r2, lr, lsr #10
 808258e:	69e2      	ldr	r2, [r4, #28]
 8082590:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8082594:	4491      	add	r9, r2
 8082596:	eb0e 0209 	add.w	r2, lr, r9
 808259a:	ea4f 49b0 	mov.w	r9, r0, ror #18
 808259e:	ea89 19f0 	eor.w	r9, r9, r0, ror #7
 80825a2:	ea89 09d0 	eor.w	r9, r9, r0, lsr #3
 80825a6:	4491      	add	r9, r2
 80825a8:	9a02      	ldr	r2, [sp, #8]
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80825aa:	6365      	str	r5, [r4, #52]	; 0x34
 80825ac:	4696      	mov	lr, r2
 80825ae:	9a00      	ldr	r2, [sp, #0]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 80825b0:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
 80825b4:	ea8e 0c02 	eor.w	ip, lr, r2
 80825b8:	f8da 2038 	ldr.w	r2, [sl, #56]	; 0x38
 80825bc:	ea0c 0c06 	and.w	ip, ip, r6
 80825c0:	ea8c 0c0e 	eor.w	ip, ip, lr
 80825c4:	444a      	add	r2, r9
 80825c6:	ea4f 2ef6 	mov.w	lr, r6, ror #11
 80825ca:	445a      	add	r2, fp
 80825cc:	ea8e 1eb6 	eor.w	lr, lr, r6, ror #6
 80825d0:	4462      	add	r2, ip
 80825d2:	ea8e 6e76 	eor.w	lr, lr, r6, ror #25
 80825d6:	4472      	add	r2, lr
 80825d8:	ea4f 3c77 	mov.w	ip, r7, ror #13
 80825dc:	ea43 0e07 	orr.w	lr, r3, r7
 80825e0:	eb01 0b02 	add.w	fp, r1, r2
 80825e4:	ea0e 0e08 	and.w	lr, lr, r8
 80825e8:	ea03 0107 	and.w	r1, r3, r7
 80825ec:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 80825f0:	ea8c 5cb7 	eor.w	ip, ip, r7, ror #22
 80825f4:	ea4e 0e01 	orr.w	lr, lr, r1
 80825f8:	44e6      	add	lr, ip
 80825fa:	4496      	add	lr, r2
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 80825fc:	ea4f 42f5 	mov.w	r2, r5, ror #19
 8082600:	6821      	ldr	r1, [r4, #0]
 8082602:	ea82 4275 	eor.w	r2, r2, r5, ror #17
 8082606:	ea82 2595 	eor.w	r5, r2, r5, lsr #10
 808260a:	9a03      	ldr	r2, [sp, #12]
 808260c:	ea4f 4cb1 	mov.w	ip, r1, ror #18
 8082610:	4410      	add	r0, r2
 8082612:	ea8c 1cf1 	eor.w	ip, ip, r1, ror #7
 8082616:	f8da 203c 	ldr.w	r2, [sl, #60]	; 0x3c
 808261a:	4405      	add	r5, r0
 808261c:	ea8c 01d1 	eor.w	r1, ip, r1, lsr #3
 8082620:	440d      	add	r5, r1
 8082622:	9902      	ldr	r1, [sp, #8]
 8082624:	442a      	add	r2, r5
 8082626:	eb02 0901 	add.w	r9, r2, r1
 808262a:	9a00      	ldr	r2, [sp, #0]
 808262c:	ea4f 307e 	mov.w	r0, lr, ror #13
 8082630:	ea82 0106 	eor.w	r1, r2, r6
 8082634:	ea01 010b 	and.w	r1, r1, fp
 8082638:	4051      	eors	r1, r2
 808263a:	ea4f 22fb 	mov.w	r2, fp, ror #11
 808263e:	ea82 12bb 	eor.w	r2, r2, fp, ror #6
 8082642:	4489      	add	r9, r1
 8082644:	ea82 627b 	eor.w	r2, r2, fp, ror #25
 8082648:	444a      	add	r2, r9
 808264a:	ea47 090e 	orr.w	r9, r7, lr
 808264e:	ea80 00be 	eor.w	r0, r0, lr, ror #2
 8082652:	ea09 0903 	and.w	r9, r9, r3
 8082656:	ea07 010e 	and.w	r1, r7, lr
 808265a:	ea80 50be 	eor.w	r0, r0, lr, ror #22
 808265e:	ea49 0901 	orr.w	r9, r9, r1
 8082662:	4481      	add	r9, r0
 8082664:	4490      	add	r8, r2
 8082666:	4491      	add	r9, r2
 8082668:	9a04      	ldr	r2, [sp, #16]
 808266a:	63e5      	str	r5, [r4, #60]	; 0x3c
 808266c:	3208      	adds	r2, #8
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
 808266e:	2a30      	cmp	r2, #48	; 0x30
 8082670:	9204      	str	r2, [sp, #16]
 8082672:	f47f ae1f 	bne.w	80822b4 <mbedtls_internal_sha256_process+0x2d4>
 8082676:	9a00      	ldr	r2, [sp, #0]
 8082678:	9309      	str	r3, [sp, #36]	; 0x24
 808267a:	920d      	str	r2, [sp, #52]	; 0x34
 808267c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8082680:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8082684:	960c      	str	r6, [sp, #48]	; 0x30
 8082686:	f8cd 9018 	str.w	r9, [sp, #24]
 808268a:	f8cd e01c 	str.w	lr, [sp, #28]
 808268e:	9708      	str	r7, [sp, #32]
 8082690:	2300      	movs	r3, #0
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += A[i];
 8082692:	9a05      	ldr	r2, [sp, #20]
 8082694:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8082698:	9205      	str	r2, [sp, #20]
 808269a:	aa06      	add	r2, sp, #24
 808269c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 80826a0:	3301      	adds	r3, #1
        ctx->state[i] += A[i];
 80826a2:	440a      	add	r2, r1
 80826a4:	9905      	ldr	r1, [sp, #20]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 80826a6:	2b08      	cmp	r3, #8
        ctx->state[i] += A[i];
 80826a8:	600a      	str	r2, [r1, #0]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 80826aa:	d1f2      	bne.n	8082692 <mbedtls_internal_sha256_process+0x6b2>
        ctx->state[i] += A[i];

    return( 0 );
}
 80826ac:	2000      	movs	r0, #0
 80826ae:	b04f      	add	sp, #316	; 0x13c
 80826b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080826b4 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 80826b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80826b8:	4604      	mov	r4, r0
 80826ba:	460e      	mov	r6, r1
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
 80826bc:	4615      	mov	r5, r2
 80826be:	b382      	cbz	r2, 8082722 <mbedtls_sha256_update_ret+0x6e>
        return( 0 );

    left = ctx->total[0] & 0x3F;
 80826c0:	6803      	ldr	r3, [r0, #0]
 80826c2:	f003 003f 	and.w	r0, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 80826c6:	4413      	add	r3, r2
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
 80826c8:	429a      	cmp	r2, r3
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 80826ca:	6023      	str	r3, [r4, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
 80826cc:	bf82      	ittt	hi
 80826ce:	6863      	ldrhi	r3, [r4, #4]
 80826d0:	3301      	addhi	r3, #1
 80826d2:	6063      	strhi	r3, [r4, #4]

    if( left && ilen >= fill )
 80826d4:	b180      	cbz	r0, 80826f8 <mbedtls_sha256_update_ret+0x44>

    if( ilen == 0 )
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
 80826d6:	f1c0 0740 	rsb	r7, r0, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
 80826da:	42ba      	cmp	r2, r7
 80826dc:	d31b      	bcc.n	8082716 <mbedtls_sha256_update_ret+0x62>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 80826de:	f104 0828 	add.w	r8, r4, #40	; 0x28
 80826e2:	463a      	mov	r2, r7
 80826e4:	4440      	add	r0, r8
 80826e6:	f011 fc3c 	bl	8093f62 <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 80826ea:	4641      	mov	r1, r8
 80826ec:	4620      	mov	r0, r4
 80826ee:	f7ff fc77 	bl	8081fe0 <mbedtls_internal_sha256_process>
 80826f2:	b9b8      	cbnz	r0, 8082724 <mbedtls_sha256_update_ret+0x70>
            return( ret );

        input += fill;
 80826f4:	443e      	add	r6, r7
        ilen  -= fill;
 80826f6:	1bed      	subs	r5, r5, r7
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 80826f8:	462f      	mov	r7, r5
 80826fa:	1be9      	subs	r1, r5, r7
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
 80826fc:	2f3f      	cmp	r7, #63	; 0x3f
 80826fe:	4431      	add	r1, r6
 8082700:	d905      	bls.n	808270e <mbedtls_sha256_update_ret+0x5a>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 8082702:	4620      	mov	r0, r4
 8082704:	f7ff fc6c 	bl	8081fe0 <mbedtls_internal_sha256_process>
 8082708:	b960      	cbnz	r0, 8082724 <mbedtls_sha256_update_ret+0x70>
            return( ret );

        input += 64;
        ilen  -= 64;
 808270a:	3f40      	subs	r7, #64	; 0x40
 808270c:	e7f5      	b.n	80826fa <mbedtls_sha256_update_ret+0x46>
    }

    if( ilen > 0 )
 808270e:	b147      	cbz	r7, 8082722 <mbedtls_sha256_update_ret+0x6e>
 8082710:	463d      	mov	r5, r7
 8082712:	460e      	mov	r6, r1
 8082714:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8082716:	3428      	adds	r4, #40	; 0x28
 8082718:	462a      	mov	r2, r5
 808271a:	4631      	mov	r1, r6
 808271c:	4420      	add	r0, r4
 808271e:	f011 fc20 	bl	8093f62 <memcpy>

    return( 0 );
 8082722:	2000      	movs	r0, #0
}
 8082724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08082728 <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 8082728:	b570      	push	{r4, r5, r6, lr}
 808272a:	4604      	mov	r4, r0
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 808272c:	6803      	ldr	r3, [r0, #0]

    ctx->buffer[used++] = 0x80;
 808272e:	2280      	movs	r2, #128	; 0x80
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 8082730:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
 8082734:	1c58      	adds	r0, r3, #1

    if( used <= 56 )
 8082736:	2838      	cmp	r0, #56	; 0x38
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 8082738:	4423      	add	r3, r4
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 808273a:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 808273c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8082740:	f104 0628 	add.w	r6, r4, #40	; 0x28

    if( used <= 56 )
 8082744:	d804      	bhi.n	8082750 <mbedtls_sha256_finish_ret+0x28>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 8082746:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 808274a:	2100      	movs	r1, #0
 808274c:	4430      	add	r0, r6
 808274e:	e00e      	b.n	808276e <mbedtls_sha256_finish_ret+0x46>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 8082750:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 8082754:	2100      	movs	r1, #0
 8082756:	4430      	add	r0, r6
 8082758:	f011 fc29 	bl	8093fae <memset>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 808275c:	4631      	mov	r1, r6
 808275e:	4620      	mov	r0, r4
 8082760:	f7ff fc3e 	bl	8081fe0 <mbedtls_internal_sha256_process>
 8082764:	2800      	cmp	r0, #0
 8082766:	d175      	bne.n	8082854 <mbedtls_sha256_finish_ret+0x12c>
            return( ret );

        memset( ctx->buffer, 0, 56 );
 8082768:	4601      	mov	r1, r0
 808276a:	4630      	mov	r0, r6
 808276c:	2238      	movs	r2, #56	; 0x38
 808276e:	f011 fc1e 	bl	8093fae <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 8082772:	6823      	ldr	r3, [r4, #0]
         | ( ctx->total[1] <<  3 );
 8082774:	6861      	ldr	r1, [r4, #4]
 8082776:	0f5a      	lsrs	r2, r3, #29
 8082778:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 808277c:	0e11      	lsrs	r1, r2, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 808277e:	00db      	lsls	r3, r3, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 8082780:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
 8082784:	0c11      	lsrs	r1, r2, #16
 8082786:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
 808278a:	f884 2063 	strb.w	r2, [r4, #99]	; 0x63
 808278e:	0a11      	lsrs	r1, r2, #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 8082790:	0e1a      	lsrs	r2, r3, #24
 8082792:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8082796:	0c1a      	lsrs	r2, r3, #16
 8082798:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 808279c:	0a1a      	lsrs	r2, r3, #8
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 808279e:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 80827a2:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80827a6:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 80827aa:	4631      	mov	r1, r6
 80827ac:	4620      	mov	r0, r4
 80827ae:	f7ff fc17 	bl	8081fe0 <mbedtls_internal_sha256_process>
 80827b2:	4603      	mov	r3, r0
 80827b4:	2800      	cmp	r0, #0
 80827b6:	d14c      	bne.n	8082852 <mbedtls_sha256_finish_ret+0x12a>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 80827b8:	7ae2      	ldrb	r2, [r4, #11]
 80827ba:	702a      	strb	r2, [r5, #0]
 80827bc:	8962      	ldrh	r2, [r4, #10]
 80827be:	706a      	strb	r2, [r5, #1]
 80827c0:	68a2      	ldr	r2, [r4, #8]
 80827c2:	0a12      	lsrs	r2, r2, #8
 80827c4:	70aa      	strb	r2, [r5, #2]
 80827c6:	68a2      	ldr	r2, [r4, #8]
 80827c8:	70ea      	strb	r2, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 80827ca:	7be2      	ldrb	r2, [r4, #15]
 80827cc:	712a      	strb	r2, [r5, #4]
 80827ce:	89e2      	ldrh	r2, [r4, #14]
 80827d0:	716a      	strb	r2, [r5, #5]
 80827d2:	68e2      	ldr	r2, [r4, #12]
 80827d4:	0a12      	lsrs	r2, r2, #8
 80827d6:	71aa      	strb	r2, [r5, #6]
 80827d8:	68e2      	ldr	r2, [r4, #12]
 80827da:	71ea      	strb	r2, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 80827dc:	7ce2      	ldrb	r2, [r4, #19]
 80827de:	722a      	strb	r2, [r5, #8]
 80827e0:	8a62      	ldrh	r2, [r4, #18]
 80827e2:	726a      	strb	r2, [r5, #9]
 80827e4:	6922      	ldr	r2, [r4, #16]
 80827e6:	0a12      	lsrs	r2, r2, #8
 80827e8:	72aa      	strb	r2, [r5, #10]
 80827ea:	6922      	ldr	r2, [r4, #16]
 80827ec:	72ea      	strb	r2, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 80827ee:	7de2      	ldrb	r2, [r4, #23]
 80827f0:	732a      	strb	r2, [r5, #12]
 80827f2:	8ae2      	ldrh	r2, [r4, #22]
 80827f4:	736a      	strb	r2, [r5, #13]
 80827f6:	6962      	ldr	r2, [r4, #20]
 80827f8:	0a12      	lsrs	r2, r2, #8
 80827fa:	73aa      	strb	r2, [r5, #14]
 80827fc:	6962      	ldr	r2, [r4, #20]
 80827fe:	73ea      	strb	r2, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 8082800:	7ee2      	ldrb	r2, [r4, #27]
 8082802:	742a      	strb	r2, [r5, #16]
 8082804:	8b62      	ldrh	r2, [r4, #26]
 8082806:	746a      	strb	r2, [r5, #17]
 8082808:	69a2      	ldr	r2, [r4, #24]
 808280a:	0a12      	lsrs	r2, r2, #8
 808280c:	74aa      	strb	r2, [r5, #18]
 808280e:	69a2      	ldr	r2, [r4, #24]
 8082810:	74ea      	strb	r2, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 8082812:	7fe2      	ldrb	r2, [r4, #31]
 8082814:	752a      	strb	r2, [r5, #20]
 8082816:	8be2      	ldrh	r2, [r4, #30]
 8082818:	756a      	strb	r2, [r5, #21]
 808281a:	69e2      	ldr	r2, [r4, #28]
 808281c:	0a12      	lsrs	r2, r2, #8
 808281e:	75aa      	strb	r2, [r5, #22]
 8082820:	69e2      	ldr	r2, [r4, #28]
 8082822:	75ea      	strb	r2, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 8082824:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8082828:	762a      	strb	r2, [r5, #24]
 808282a:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 808282c:	766a      	strb	r2, [r5, #25]
 808282e:	6a22      	ldr	r2, [r4, #32]
 8082830:	0a12      	lsrs	r2, r2, #8
 8082832:	76aa      	strb	r2, [r5, #26]
 8082834:	6a22      	ldr	r2, [r4, #32]
 8082836:	76ea      	strb	r2, [r5, #27]

    if( ctx->is224 == 0 )
 8082838:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 808283a:	b950      	cbnz	r0, 8082852 <mbedtls_sha256_finish_ret+0x12a>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 808283c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8082840:	772b      	strb	r3, [r5, #28]
 8082842:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8082844:	776b      	strb	r3, [r5, #29]
 8082846:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8082848:	0a1b      	lsrs	r3, r3, #8
 808284a:	77ab      	strb	r3, [r5, #30]
 808284c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808284e:	77eb      	strb	r3, [r5, #31]
 8082850:	bd70      	pop	{r4, r5, r6, pc}

    return( 0 );
 8082852:	4618      	mov	r0, r3
}
 8082854:	bd70      	pop	{r4, r5, r6, pc}

08082856 <mbedtls_sha256_ret>:
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 8082856:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082858:	461f      	mov	r7, r3
 808285a:	b09d      	sub	sp, #116	; 0x74
 808285c:	4605      	mov	r5, r0
    int ret;
    mbedtls_sha256_context ctx;

    mbedtls_sha256_init( &ctx );
 808285e:	a801      	add	r0, sp, #4
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 8082860:	460e      	mov	r6, r1
 8082862:	4614      	mov	r4, r2
    int ret;
    mbedtls_sha256_context ctx;

    mbedtls_sha256_init( &ctx );
 8082864:	f7ff fb58 	bl	8081f18 <mbedtls_sha256_init>

    if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )
 8082868:	4639      	mov	r1, r7
 808286a:	a801      	add	r0, sp, #4
 808286c:	f7ff fb68 	bl	8081f40 <mbedtls_sha256_starts_ret>
 8082870:	4601      	mov	r1, r0
 8082872:	b958      	cbnz	r0, 808288c <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
 8082874:	4629      	mov	r1, r5
 8082876:	4632      	mov	r2, r6
 8082878:	a801      	add	r0, sp, #4
 808287a:	f7ff ff1b 	bl	80826b4 <mbedtls_sha256_update_ret>
 808287e:	4601      	mov	r1, r0
 8082880:	b920      	cbnz	r0, 808288c <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
 8082882:	4621      	mov	r1, r4
 8082884:	a801      	add	r0, sp, #4
 8082886:	f7ff ff4f 	bl	8082728 <mbedtls_sha256_finish_ret>
 808288a:	4601      	mov	r1, r0
        goto exit;

exit:
    mbedtls_sha256_free( &ctx );
 808288c:	a801      	add	r0, sp, #4
 808288e:	f7ff fb47 	bl	8081f20 <mbedtls_sha256_free>

    return( ret );
}
 8082892:	4608      	mov	r0, r1
 8082894:	b01d      	add	sp, #116	; 0x74
 8082896:	bdf0      	pop	{r4, r5, r6, r7, pc}

08082898 <mbedtls_pkcs5_pbkdf2_hmac>:

int mbedtls_pkcs5_pbkdf2_hmac( mbedtls_md_context_t *ctx, const unsigned char *password,
                       size_t plen, const unsigned char *salt, size_t slen,
                       unsigned int iteration_count,
                       uint32_t key_length, unsigned char *output )
{
 8082898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808289c:	4604      	mov	r4, r0
 808289e:	b0a5      	sub	sp, #148	; 0x94
    int ret, j;
    unsigned int i;
    unsigned char md1[MBEDTLS_MD_MAX_SIZE];
    unsigned char work[MBEDTLS_MD_MAX_SIZE];
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
 80828a0:	6800      	ldr	r0, [r0, #0]

int mbedtls_pkcs5_pbkdf2_hmac( mbedtls_md_context_t *ctx, const unsigned char *password,
                       size_t plen, const unsigned char *salt, size_t slen,
                       unsigned int iteration_count,
                       uint32_t key_length, unsigned char *output )
{
 80828a2:	9301      	str	r3, [sp, #4]
 80828a4:	460f      	mov	r7, r1
 80828a6:	4693      	mov	fp, r2
 80828a8:	9e30      	ldr	r6, [sp, #192]	; 0xc0
    int ret, j;
    unsigned int i;
    unsigned char md1[MBEDTLS_MD_MAX_SIZE];
    unsigned char work[MBEDTLS_MD_MAX_SIZE];
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
 80828aa:	f004 ffd9 	bl	8087860 <mbedtls_md_get_size>
 80828ae:	4681      	mov	r9, r0
    size_t use_len;
    unsigned char *out_p = output;
    unsigned char counter[4];

    memset( counter, 0, 4 );
 80828b0:	2300      	movs	r3, #0
 80828b2:	9303      	str	r3, [sp, #12]
    counter[3] = 1;
 80828b4:	2301      	movs	r3, #1
 80828b6:	f88d 300f 	strb.w	r3, [sp, #15]
            return( ret );

        if( ( ret = mbedtls_md_hmac_update( ctx, counter, 4 ) ) != 0 )
            return( ret );

        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
 80828ba:	f10d 0850 	add.w	r8, sp, #80	; 0x50
#if UINT_MAX > 0xFFFFFFFF
    if( iteration_count > 0xFFFFFFFF )
        return( MBEDTLS_ERR_PKCS5_BAD_INPUT_DATA );
#endif

    while( key_length )
 80828be:	2e00      	cmp	r6, #0
 80828c0:	d05c      	beq.n	808297c <mbedtls_pkcs5_pbkdf2_hmac+0xe4>
    {
        // U1 ends up in work
        //
        if( ( ret = mbedtls_md_hmac_starts( ctx, password, plen ) ) != 0 )
 80828c2:	465a      	mov	r2, fp
 80828c4:	4639      	mov	r1, r7
 80828c6:	4620      	mov	r0, r4
 80828c8:	f004 ff08 	bl	80876dc <mbedtls_md_hmac_starts>
 80828cc:	2800      	cmp	r0, #0
 80828ce:	d156      	bne.n	808297e <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        if( ( ret = mbedtls_md_hmac_update( ctx, salt, slen ) ) != 0 )
 80828d0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80828d2:	9901      	ldr	r1, [sp, #4]
 80828d4:	4620      	mov	r0, r4
 80828d6:	f004 ff61 	bl	808779c <mbedtls_md_hmac_update>
 80828da:	2800      	cmp	r0, #0
 80828dc:	d14f      	bne.n	808297e <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        if( ( ret = mbedtls_md_hmac_update( ctx, counter, 4 ) ) != 0 )
 80828de:	2204      	movs	r2, #4
 80828e0:	a903      	add	r1, sp, #12
 80828e2:	4620      	mov	r0, r4
 80828e4:	f004 ff5a 	bl	808779c <mbedtls_md_hmac_update>
 80828e8:	2800      	cmp	r0, #0
 80828ea:	d148      	bne.n	808297e <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
 80828ec:	4641      	mov	r1, r8
 80828ee:	4620      	mov	r0, r4
 80828f0:	f004 ff64 	bl	80877bc <mbedtls_md_hmac_finish>
 80828f4:	2800      	cmp	r0, #0
 80828f6:	d142      	bne.n	808297e <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        memcpy( md1, work, md_size );
 80828f8:	ad04      	add	r5, sp, #16
 80828fa:	464a      	mov	r2, r9
 80828fc:	4641      	mov	r1, r8
 80828fe:	4628      	mov	r0, r5
 8082900:	f011 fb2f 	bl	8093f62 <memcpy>

        for( i = 1; i < iteration_count; i++ )
 8082904:	f04f 0a01 	mov.w	sl, #1
 8082908:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 808290a:	459a      	cmp	sl, r3
 808290c:	d21d      	bcs.n	808294a <mbedtls_pkcs5_pbkdf2_hmac+0xb2>
        {
            // U2 ends up in md1
            //
            if( ( ret = mbedtls_md_hmac_starts( ctx, password, plen ) ) != 0 )
 808290e:	465a      	mov	r2, fp
 8082910:	4639      	mov	r1, r7
 8082912:	4620      	mov	r0, r4
 8082914:	f004 fee2 	bl	80876dc <mbedtls_md_hmac_starts>
 8082918:	bb88      	cbnz	r0, 808297e <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
                return( ret );

            if( ( ret = mbedtls_md_hmac_update( ctx, md1, md_size ) ) != 0 )
 808291a:	464a      	mov	r2, r9
 808291c:	4629      	mov	r1, r5
 808291e:	4620      	mov	r0, r4
 8082920:	f004 ff3c 	bl	808779c <mbedtls_md_hmac_update>
 8082924:	bb58      	cbnz	r0, 808297e <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
                return( ret );

            if( ( ret = mbedtls_md_hmac_finish( ctx, md1 ) ) != 0 )
 8082926:	4629      	mov	r1, r5
 8082928:	4620      	mov	r0, r4
 808292a:	f004 ff47 	bl	80877bc <mbedtls_md_hmac_finish>
 808292e:	bb30      	cbnz	r0, 808297e <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
                return( ret );

            // U1 xor U2
            //
            for( j = 0; j < md_size; j++ )
 8082930:	4548      	cmp	r0, r9
 8082932:	da07      	bge.n	8082944 <mbedtls_pkcs5_pbkdf2_hmac+0xac>
                work[j] ^= md1[j];
 8082934:	f810 2008 	ldrb.w	r2, [r0, r8]
 8082938:	5d43      	ldrb	r3, [r0, r5]
 808293a:	4053      	eors	r3, r2
 808293c:	f800 3008 	strb.w	r3, [r0, r8]
            if( ( ret = mbedtls_md_hmac_finish( ctx, md1 ) ) != 0 )
                return( ret );

            // U1 xor U2
            //
            for( j = 0; j < md_size; j++ )
 8082940:	3001      	adds	r0, #1
 8082942:	e7f5      	b.n	8082930 <mbedtls_pkcs5_pbkdf2_hmac+0x98>
        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
            return( ret );

        memcpy( md1, work, md_size );

        for( i = 1; i < iteration_count; i++ )
 8082944:	f10a 0a01 	add.w	sl, sl, #1
 8082948:	e7de      	b.n	8082908 <mbedtls_pkcs5_pbkdf2_hmac+0x70>
            //
            for( j = 0; j < md_size; j++ )
                work[j] ^= md1[j];
        }

        use_len = ( key_length < md_size ) ? key_length : md_size;
 808294a:	454e      	cmp	r6, r9
 808294c:	4635      	mov	r5, r6
 808294e:	bf28      	it	cs
 8082950:	464d      	movcs	r5, r9
        memcpy( out_p, work, use_len );
 8082952:	4641      	mov	r1, r8
 8082954:	462a      	mov	r2, r5
 8082956:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8082958:	f011 fb03 	bl	8093f62 <memcpy>

        key_length -= (uint32_t) use_len;
        out_p += use_len;
 808295c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
        }

        use_len = ( key_length < md_size ) ? key_length : md_size;
        memcpy( out_p, work, use_len );

        key_length -= (uint32_t) use_len;
 808295e:	1b76      	subs	r6, r6, r5
        out_p += use_len;
 8082960:	442b      	add	r3, r5
 8082962:	9331      	str	r3, [sp, #196]	; 0xc4
 8082964:	aa04      	add	r2, sp, #16

        for( i = 4; i > 0; i-- )
            if( ++counter[i - 1] != 0 )
 8082966:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 808296a:	3301      	adds	r3, #1
 808296c:	b2db      	uxtb	r3, r3
 808296e:	7013      	strb	r3, [r2, #0]
 8082970:	2b00      	cmp	r3, #0
 8082972:	d1a4      	bne.n	80828be <mbedtls_pkcs5_pbkdf2_hmac+0x26>
        memcpy( out_p, work, use_len );

        key_length -= (uint32_t) use_len;
        out_p += use_len;

        for( i = 4; i > 0; i-- )
 8082974:	ab03      	add	r3, sp, #12
 8082976:	4293      	cmp	r3, r2
 8082978:	d1f5      	bne.n	8082966 <mbedtls_pkcs5_pbkdf2_hmac+0xce>
 808297a:	e7a0      	b.n	80828be <mbedtls_pkcs5_pbkdf2_hmac+0x26>
            if( ++counter[i - 1] != 0 )
                break;
    }

    return( 0 );
 808297c:	4630      	mov	r0, r6
}
 808297e:	b025      	add	sp, #148	; 0x94
 8082980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08082984 <mbedtls_pkcs5_pbes2>:

int mbedtls_pkcs5_pbes2( const mbedtls_asn1_buf *pbe_params, int mode,
                 const unsigned char *pwd,  size_t pwdlen,
                 const unsigned char *data, size_t datalen,
                 unsigned char *output )
{
 8082984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8082988:	461f      	mov	r7, r3
 808298a:	b0bd      	sub	sp, #244	; 0xf4
    int ret, iterations = 0, keylen = 0;
 808298c:	2300      	movs	r3, #0
 808298e:	9306      	str	r3, [sp, #24]
 8082990:	9307      	str	r3, [sp, #28]
    unsigned char *p, *end;
    mbedtls_asn1_buf kdf_alg_oid, enc_scheme_oid, kdf_alg_params, enc_scheme_params;
    mbedtls_asn1_buf salt;
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
    unsigned char key[32], iv[32];
    size_t olen = 0;
 8082992:	9309      	str	r3, [sp, #36]	; 0x24
    mbedtls_md_context_t md_ctx;
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_cipher_context_t cipher_ctx;

    p = pbe_params->p;
    end = p + pbe_params->len;
 8082994:	6844      	ldr	r4, [r0, #4]
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_md_context_t md_ctx;
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_cipher_context_t cipher_ctx;

    p = pbe_params->p;
 8082996:	6883      	ldr	r3, [r0, #8]
{
    int ret, iterations = 0, keylen = 0;
    unsigned char *p, *end;
    mbedtls_asn1_buf kdf_alg_oid, enc_scheme_oid, kdf_alg_params, enc_scheme_params;
    mbedtls_asn1_buf salt;
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
 8082998:	f04f 0904 	mov.w	r9, #4
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_md_context_t md_ctx;
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_cipher_context_t cipher_ctx;

    p = pbe_params->p;
 808299c:	9308      	str	r3, [sp, #32]
    end = p + pbe_params->len;
 808299e:	441c      	add	r4, r3
     *  PBES2-params ::= SEQUENCE {
     *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 80829a0:	6803      	ldr	r3, [r0, #0]

int mbedtls_pkcs5_pbes2( const mbedtls_asn1_buf *pbe_params, int mode,
                 const unsigned char *pwd,  size_t pwdlen,
                 const unsigned char *data, size_t datalen,
                 unsigned char *output )
{
 80829a2:	460d      	mov	r5, r1
     *  PBES2-params ::= SEQUENCE {
     *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 80829a4:	2b30      	cmp	r3, #48	; 0x30

int mbedtls_pkcs5_pbes2( const mbedtls_asn1_buf *pbe_params, int mode,
                 const unsigned char *pwd,  size_t pwdlen,
                 const unsigned char *data, size_t datalen,
                 unsigned char *output )
{
 80829a6:	4616      	mov	r6, r2
    int ret, iterations = 0, keylen = 0;
    unsigned char *p, *end;
    mbedtls_asn1_buf kdf_alg_oid, enc_scheme_oid, kdf_alg_params, enc_scheme_params;
    mbedtls_asn1_buf salt;
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
 80829a8:	f88d 9016 	strb.w	r9, [sp, #22]
     *  PBES2-params ::= SEQUENCE {
     *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 80829ac:	f040 80c9 	bne.w	8082b42 <mbedtls_pkcs5_pbes2+0x1be>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &kdf_alg_oid, &kdf_alg_params ) ) != 0 )
 80829b0:	ab10      	add	r3, sp, #64	; 0x40
 80829b2:	aa0a      	add	r2, sp, #40	; 0x28
 80829b4:	4621      	mov	r1, r4
 80829b6:	a808      	add	r0, sp, #32
 80829b8:	f000 fd65 	bl	8083486 <mbedtls_asn1_get_alg>
 80829bc:	2800      	cmp	r0, #0
 80829be:	d158      	bne.n	8082a72 <mbedtls_pkcs5_pbes2+0xee>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    // Only PBKDF2 supported at the moment
    //
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBKDF2, &kdf_alg_oid ) != 0 )
 80829c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80829c2:	2a09      	cmp	r2, #9
 80829c4:	d14c      	bne.n	8082a60 <mbedtls_pkcs5_pbes2+0xdc>
 80829c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80829c8:	4861      	ldr	r0, [pc, #388]	; (8082b50 <mbedtls_pkcs5_pbes2+0x1cc>)
 80829ca:	f011 fabb 	bl	8093f44 <memcmp>
 80829ce:	2800      	cmp	r0, #0
 80829d0:	d146      	bne.n	8082a60 <mbedtls_pkcs5_pbes2+0xdc>
                                      mbedtls_asn1_buf *salt, int *iterations,
                                      int *keylen, mbedtls_md_type_t *md_type )
{
    int ret;
    mbedtls_asn1_buf prf_alg_oid;
    unsigned char *p = params->p;
 80829d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    const unsigned char *end = params->p + params->len;
 80829d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
                                      mbedtls_asn1_buf *salt, int *iterations,
                                      int *keylen, mbedtls_md_type_t *md_type )
{
    int ret;
    mbedtls_asn1_buf prf_alg_oid;
    unsigned char *p = params->p;
 80829d6:	9324      	str	r3, [sp, #144]	; 0x90
    const unsigned char *end = params->p + params->len;
 80829d8:	eb03 0802 	add.w	r8, r3, r2

    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 80829dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80829de:	2b30      	cmp	r3, #48	; 0x30
 80829e0:	f040 80af 	bne.w	8082b42 <mbedtls_pkcs5_pbes2+0x1be>
     *    keyLength         INTEGER OPTIONAL
     *    prf               AlgorithmIdentifier DEFAULT algid-hmacWithSHA1
     *  }
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 80829e4:	464b      	mov	r3, r9
 80829e6:	aa17      	add	r2, sp, #92	; 0x5c
 80829e8:	4641      	mov	r1, r8
 80829ea:	a824      	add	r0, sp, #144	; 0x90
 80829ec:	f000 fc72 	bl	80832d4 <mbedtls_asn1_get_tag>
 80829f0:	b9f8      	cbnz	r0, 8082a32 <mbedtls_pkcs5_pbes2+0xae>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    salt->p = p;
 80829f2:	9a24      	ldr	r2, [sp, #144]	; 0x90
    p += salt->len;
 80829f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    salt->p = p;
 80829f6:	9218      	str	r2, [sp, #96]	; 0x60
    p += salt->len;
 80829f8:	4413      	add	r3, r2

    if( ( ret = mbedtls_asn1_get_int( &p, end, iterations ) ) != 0 )
 80829fa:	4641      	mov	r1, r8
 80829fc:	aa06      	add	r2, sp, #24
 80829fe:	a824      	add	r0, sp, #144	; 0x90
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    salt->p = p;
    p += salt->len;
 8082a00:	9324      	str	r3, [sp, #144]	; 0x90

    if( ( ret = mbedtls_asn1_get_int( &p, end, iterations ) ) != 0 )
 8082a02:	f000 fc94 	bl	808332e <mbedtls_asn1_get_int>
 8082a06:	b9a0      	cbnz	r0, 8082a32 <mbedtls_pkcs5_pbes2+0xae>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    if( p == end )
 8082a08:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8082a0a:	4598      	cmp	r8, r3
 8082a0c:	d022      	beq.n	8082a54 <mbedtls_pkcs5_pbes2+0xd0>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_int( &p, end, keylen ) ) != 0 )
 8082a0e:	aa07      	add	r2, sp, #28
 8082a10:	4641      	mov	r1, r8
 8082a12:	a824      	add	r0, sp, #144	; 0x90
 8082a14:	f000 fc8b 	bl	808332e <mbedtls_asn1_get_int>
 8082a18:	b110      	cbz	r0, 8082a20 <mbedtls_pkcs5_pbes2+0x9c>
    {
        if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8082a1a:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8082a1e:	d108      	bne.n	8082a32 <mbedtls_pkcs5_pbes2+0xae>
            return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
    }

    if( p == end )
 8082a20:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8082a22:	4598      	cmp	r8, r3
 8082a24:	d016      	beq.n	8082a54 <mbedtls_pkcs5_pbes2+0xd0>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
 8082a26:	aa2c      	add	r2, sp, #176	; 0xb0
 8082a28:	4641      	mov	r1, r8
 8082a2a:	a824      	add	r0, sp, #144	; 0x90
 8082a2c:	f000 fd73 	bl	8083516 <mbedtls_asn1_get_alg_null>
 8082a30:	b128      	cbz	r0, 8082a3e <mbedtls_pkcs5_pbes2+0xba>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
 8082a32:	f5a0 503c 	sub.w	r0, r0, #12032	; 0x2f00
    // Only PBKDF2 supported at the moment
    //
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBKDF2, &kdf_alg_oid ) != 0 )
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    if( ( ret = pkcs5_parse_pbkdf2_params( &kdf_alg_params,
 8082a36:	2800      	cmp	r0, #0
 8082a38:	f040 8086 	bne.w	8082b48 <mbedtls_pkcs5_pbes2+0x1c4>
 8082a3c:	e00a      	b.n	8082a54 <mbedtls_pkcs5_pbes2+0xd0>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    if( mbedtls_oid_get_md_hmac( &prf_alg_oid, md_type ) != 0 )
 8082a3e:	f10d 0116 	add.w	r1, sp, #22
 8082a42:	a82c      	add	r0, sp, #176	; 0xb0
 8082a44:	f002 f90c 	bl	8084c60 <mbedtls_oid_get_md_hmac>
 8082a48:	b950      	cbnz	r0, 8082a60 <mbedtls_pkcs5_pbes2+0xdc>
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    if( p != end )
 8082a4a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8082a4c:	4598      	cmp	r8, r3
 8082a4e:	d001      	beq.n	8082a54 <mbedtls_pkcs5_pbes2+0xd0>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8082a50:	4840      	ldr	r0, [pc, #256]	; (8082b54 <mbedtls_pkcs5_pbes2+0x1d0>)
 8082a52:	e079      	b.n	8082b48 <mbedtls_pkcs5_pbes2+0x1c4>
                                           &md_type ) ) != 0 )
    {
        return( ret );
    }

    md_info = mbedtls_md_info_from_type( md_type );
 8082a54:	f89d 0016 	ldrb.w	r0, [sp, #22]
 8082a58:	f004 fdbe 	bl	80875d8 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8082a5c:	4681      	mov	r9, r0
 8082a5e:	b908      	cbnz	r0, 8082a64 <mbedtls_pkcs5_pbes2+0xe0>

    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    if( mbedtls_oid_get_md_hmac( &prf_alg_oid, md_type ) != 0 )
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );
 8082a60:	483d      	ldr	r0, [pc, #244]	; (8082b58 <mbedtls_pkcs5_pbes2+0x1d4>)
 8082a62:	e071      	b.n	8082b48 <mbedtls_pkcs5_pbes2+0x1c4>

    md_info = mbedtls_md_info_from_type( md_type );
    if( md_info == NULL )
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &enc_scheme_oid,
 8082a64:	ab13      	add	r3, sp, #76	; 0x4c
 8082a66:	aa0d      	add	r2, sp, #52	; 0x34
 8082a68:	4621      	mov	r1, r4
 8082a6a:	a808      	add	r0, sp, #32
 8082a6c:	f000 fd0b 	bl	8083486 <mbedtls_asn1_get_alg>
 8082a70:	b110      	cbz	r0, 8082a78 <mbedtls_pkcs5_pbes2+0xf4>
                              &enc_scheme_params ) ) != 0 )
    {
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
 8082a72:	f5a0 503c 	sub.w	r0, r0, #12032	; 0x2f00
 8082a76:	e067      	b.n	8082b48 <mbedtls_pkcs5_pbes2+0x1c4>
    }

    if( mbedtls_oid_get_cipher_alg( &enc_scheme_oid, &cipher_alg ) != 0 )
 8082a78:	f10d 0117 	add.w	r1, sp, #23
 8082a7c:	a80d      	add	r0, sp, #52	; 0x34
 8082a7e:	f002 f8c1 	bl	8084c04 <mbedtls_oid_get_cipher_alg>
 8082a82:	2800      	cmp	r0, #0
 8082a84:	d1ec      	bne.n	8082a60 <mbedtls_pkcs5_pbes2+0xdc>
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    cipher_info = mbedtls_cipher_info_from_type( cipher_alg );
 8082a86:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8082a8a:	f000 f949 	bl	8082d20 <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
 8082a8e:	4680      	mov	r8, r0
 8082a90:	2800      	cmp	r0, #0
 8082a92:	d0e5      	beq.n	8082a60 <mbedtls_pkcs5_pbes2+0xdc>

    /*
     * The value of keylen from pkcs5_parse_pbkdf2_params() is ignored
     * since it is optional and we don't know if it was set or not
     */
    keylen = cipher_info->key_bitlen / 8;
 8082a94:	6843      	ldr	r3, [r0, #4]
 8082a96:	08db      	lsrs	r3, r3, #3
 8082a98:	9307      	str	r3, [sp, #28]

    if( enc_scheme_params.tag != MBEDTLS_ASN1_OCTET_STRING ||
 8082a9a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8082a9c:	2b04      	cmp	r3, #4
 8082a9e:	d152      	bne.n	8082b46 <mbedtls_pkcs5_pbes2+0x1c2>
 8082aa0:	68c3      	ldr	r3, [r0, #12]
 8082aa2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8082aa4:	429a      	cmp	r2, r3
 8082aa6:	d14e      	bne.n	8082b46 <mbedtls_pkcs5_pbes2+0x1c2>
        enc_scheme_params.len != cipher_info->iv_size )
    {
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT );
    }

    mbedtls_md_init( &md_ctx );
 8082aa8:	a819      	add	r0, sp, #100	; 0x64
 8082aaa:	f004 fda1 	bl	80875f0 <mbedtls_md_init>
    mbedtls_cipher_init( &cipher_ctx );
 8082aae:	a82c      	add	r0, sp, #176	; 0xb0
 8082ab0:	f000 f958 	bl	8082d64 <mbedtls_cipher_init>

    memcpy( iv, enc_scheme_params.p, enc_scheme_params.len );
 8082ab4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8082ab6:	9915      	ldr	r1, [sp, #84]	; 0x54
 8082ab8:	a824      	add	r0, sp, #144	; 0x90
 8082aba:	f011 fa52 	bl	8093f62 <memcpy>

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
 8082abe:	2201      	movs	r2, #1
 8082ac0:	4649      	mov	r1, r9
 8082ac2:	a819      	add	r0, sp, #100	; 0x64
 8082ac4:	f004 fdba 	bl	808763c <mbedtls_md_setup>
 8082ac8:	4604      	mov	r4, r0
 8082aca:	2800      	cmp	r0, #0
 8082acc:	d131      	bne.n	8082b32 <mbedtls_pkcs5_pbes2+0x1ae>
        goto exit;

    if( ( ret = mbedtls_pkcs5_pbkdf2_hmac( &md_ctx, pwd, pwdlen, salt.p, salt.len,
 8082ace:	9b07      	ldr	r3, [sp, #28]
 8082ad0:	f10d 0970 	add.w	r9, sp, #112	; 0x70
 8082ad4:	9302      	str	r3, [sp, #8]
 8082ad6:	9b06      	ldr	r3, [sp, #24]
 8082ad8:	f8cd 900c 	str.w	r9, [sp, #12]
 8082adc:	9301      	str	r3, [sp, #4]
 8082ade:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8082ae0:	463a      	mov	r2, r7
 8082ae2:	9300      	str	r3, [sp, #0]
 8082ae4:	4631      	mov	r1, r6
 8082ae6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8082ae8:	a819      	add	r0, sp, #100	; 0x64
 8082aea:	f7ff fed5 	bl	8082898 <mbedtls_pkcs5_pbkdf2_hmac>
 8082aee:	4604      	mov	r4, r0
 8082af0:	b9f8      	cbnz	r0, 8082b32 <mbedtls_pkcs5_pbes2+0x1ae>
                                   iterations, keylen, key ) ) != 0 )
    {
        goto exit;
    }

    if( ( ret = mbedtls_cipher_setup( &cipher_ctx, cipher_info ) ) != 0 )
 8082af2:	4641      	mov	r1, r8
 8082af4:	a82c      	add	r0, sp, #176	; 0xb0
 8082af6:	f000 fb09 	bl	808310c <mbedtls_cipher_setup>
 8082afa:	4604      	mov	r4, r0
 8082afc:	b9c8      	cbnz	r0, 8082b32 <mbedtls_pkcs5_pbes2+0x1ae>
        goto exit;

    if( ( ret = mbedtls_cipher_setkey( &cipher_ctx, key, 8 * keylen, (mbedtls_operation_t) mode ) ) != 0 )
 8082afe:	9a07      	ldr	r2, [sp, #28]
 8082b00:	b26b      	sxtb	r3, r5
 8082b02:	00d2      	lsls	r2, r2, #3
 8082b04:	4649      	mov	r1, r9
 8082b06:	a82c      	add	r0, sp, #176	; 0xb0
 8082b08:	f000 f942 	bl	8082d90 <mbedtls_cipher_setkey>
 8082b0c:	4604      	mov	r4, r0
 8082b0e:	b980      	cbnz	r0, 8082b32 <mbedtls_pkcs5_pbes2+0x1ae>
        goto exit;

    if( ( ret = mbedtls_cipher_crypt( &cipher_ctx, iv, enc_scheme_params.len,
 8082b10:	ab09      	add	r3, sp, #36	; 0x24
 8082b12:	9302      	str	r3, [sp, #8]
 8082b14:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8082b16:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8082b18:	9301      	str	r3, [sp, #4]
 8082b1a:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8082b1c:	a924      	add	r1, sp, #144	; 0x90
 8082b1e:	9300      	str	r3, [sp, #0]
 8082b20:	a82c      	add	r0, sp, #176	; 0xb0
 8082b22:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8082b24:	f000 fb10 	bl	8083148 <mbedtls_cipher_crypt>
                              data, datalen, output, &olen ) ) != 0 )
        ret = MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH;
 8082b28:	f5a4 5438 	sub.w	r4, r4, #11776	; 0x2e00
 8082b2c:	2800      	cmp	r0, #0
 8082b2e:	bf08      	it	eq
 8082b30:	2400      	moveq	r4, #0

exit:
    mbedtls_md_free( &md_ctx );
 8082b32:	a819      	add	r0, sp, #100	; 0x64
 8082b34:	f004 fd61 	bl	80875fa <mbedtls_md_free>
    mbedtls_cipher_free( &cipher_ctx );
 8082b38:	a82c      	add	r0, sp, #176	; 0xb0
 8082b3a:	f000 f917 	bl	8082d6c <mbedtls_cipher_free>

    return( ret );
 8082b3e:	4620      	mov	r0, r4
 8082b40:	e002      	b.n	8082b48 <mbedtls_pkcs5_pbes2+0x1c4>
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 8082b42:	4806      	ldr	r0, [pc, #24]	; (8082b5c <mbedtls_pkcs5_pbes2+0x1d8>)
 8082b44:	e000      	b.n	8082b48 <mbedtls_pkcs5_pbes2+0x1c4>
    keylen = cipher_info->key_bitlen / 8;

    if( enc_scheme_params.tag != MBEDTLS_ASN1_OCTET_STRING ||
        enc_scheme_params.len != cipher_info->iv_size )
    {
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT );
 8082b46:	4806      	ldr	r0, [pc, #24]	; (8082b60 <mbedtls_pkcs5_pbes2+0x1dc>)
exit:
    mbedtls_md_free( &md_ctx );
    mbedtls_cipher_free( &cipher_ctx );

    return( ret );
}
 8082b48:	b03d      	add	sp, #244	; 0xf4
 8082b4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8082b4e:	bf00      	nop
 8082b50:	08096608 	.word	0x08096608
 8082b54:	ffffd09a 	.word	0xffffd09a
 8082b58:	ffffd180 	.word	0xffffd180
 8082b5c:	ffffd09e 	.word	0xffffd09e
 8082b60:	ffffd100 	.word	0xffffd100

08082b64 <mbedtls_cipher_get_block_size>:
 * \return       The size of the blocks of the cipher, or zero if \p ctx
 *               has not been initialized.
 */
static inline unsigned int mbedtls_cipher_get_block_size( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
 8082b64:	b110      	cbz	r0, 8082b6c <mbedtls_cipher_get_block_size+0x8>
 8082b66:	6800      	ldr	r0, [r0, #0]
 8082b68:	b100      	cbz	r0, 8082b6c <mbedtls_cipher_get_block_size+0x8>
        return 0;

    return ctx->cipher_info->block_size;
 8082b6a:	6940      	ldr	r0, [r0, #20]
}
 8082b6c:	4770      	bx	lr

08082b6e <_ZL16add_pkcs_paddingPhjj>:
/*
 * PKCS7 (and PKCS5) padding: fill with ll bytes, with ll = padding_len
 */
static void add_pkcs_padding( unsigned char *output, size_t output_len,
        size_t data_len )
{
 8082b6e:	b510      	push	{r4, lr}
    size_t padding_len = output_len - data_len;
 8082b70:	1a89      	subs	r1, r1, r2
 8082b72:	2400      	movs	r4, #0
    unsigned char i;

    for( i = 0; i < padding_len; i++ )
 8082b74:	b2e3      	uxtb	r3, r4
 8082b76:	4299      	cmp	r1, r3
 8082b78:	f104 0401 	add.w	r4, r4, #1
 8082b7c:	d902      	bls.n	8082b84 <_ZL16add_pkcs_paddingPhjj+0x16>
        output[data_len + i] = (unsigned char) padding_len;
 8082b7e:	4403      	add	r3, r0
 8082b80:	5499      	strb	r1, [r3, r2]
        size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i;

    for( i = 0; i < padding_len; i++ )
 8082b82:	e7f7      	b.n	8082b74 <_ZL16add_pkcs_paddingPhjj+0x6>
 8082b84:	bd10      	pop	{r4, pc}
	...

08082b88 <_ZL16get_pkcs_paddingPhjPj>:
        output[data_len + i] = (unsigned char) padding_len;
}

static int get_pkcs_padding( unsigned char *input, size_t input_len,
        size_t *data_len )
{
 8082b88:	b5f0      	push	{r4, r5, r6, r7, lr}
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
 8082b8a:	b300      	cbz	r0, 8082bce <_ZL16get_pkcs_paddingPhjPj+0x46>
 8082b8c:	b1fa      	cbz	r2, 8082bce <_ZL16get_pkcs_paddingPhjPj+0x46>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
 8082b8e:	1843      	adds	r3, r0, r1
 8082b90:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    *data_len = input_len - padding_len;

    /* Avoid logical || since it results in a branch */
    bad |= padding_len > input_len;
    bad |= padding_len == 0;
 8082b94:	fab4 f384 	clz	r3, r4
 8082b98:	095b      	lsrs	r3, r3, #5
 8082b9a:	42a1      	cmp	r1, r4
 8082b9c:	bf38      	it	cc
 8082b9e:	f043 0301 	orrcc.w	r3, r3, #1

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
    *data_len = input_len - padding_len;
 8082ba2:	1b0f      	subs	r7, r1, r4
 8082ba4:	6017      	str	r7, [r2, #0]
    bad |= padding_len == 0;

    /* The number of bytes checked must be independent of padding_len,
     * so pick input_len, which is usually 8 or 16 (one block) */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len; i++ )
 8082ba6:	2200      	movs	r2, #0
 8082ba8:	428a      	cmp	r2, r1
 8082baa:	d00b      	beq.n	8082bc4 <_ZL16get_pkcs_paddingPhjPj+0x3c>
        bad |= ( input[i] ^ padding_len ) * ( i >= pad_idx );
 8082bac:	5c85      	ldrb	r5, [r0, r2]
 8082bae:	42ba      	cmp	r2, r7
 8082bb0:	ea84 0605 	eor.w	r6, r4, r5
 8082bb4:	bf34      	ite	cc
 8082bb6:	2500      	movcc	r5, #0
 8082bb8:	2501      	movcs	r5, #1
 8082bba:	4375      	muls	r5, r6
 8082bbc:	432b      	orrs	r3, r5
 8082bbe:	b2db      	uxtb	r3, r3
    bad |= padding_len == 0;

    /* The number of bytes checked must be independent of padding_len,
     * so pick input_len, which is usually 8 or 16 (one block) */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len; i++ )
 8082bc0:	3201      	adds	r2, #1
 8082bc2:	e7f1      	b.n	8082ba8 <_ZL16get_pkcs_paddingPhjPj+0x20>
        bad |= ( input[i] ^ padding_len ) * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 8082bc4:	2b00      	cmp	r3, #0
 8082bc6:	4803      	ldr	r0, [pc, #12]	; (8082bd4 <_ZL16get_pkcs_paddingPhjPj+0x4c>)
 8082bc8:	bf08      	it	eq
 8082bca:	2000      	moveq	r0, #0
 8082bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8082bce:	4802      	ldr	r0, [pc, #8]	; (8082bd8 <_ZL16get_pkcs_paddingPhjPj+0x50>)
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len; i++ )
        bad |= ( input[i] ^ padding_len ) * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
}
 8082bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082bd2:	bf00      	nop
 8082bd4:	ffff9e00 	.word	0xffff9e00
 8082bd8:	ffff9f00 	.word	0xffff9f00

08082bdc <_ZL25add_one_and_zeros_paddingPhjj>:
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
 8082bdc:	2380      	movs	r3, #128	; 0x80
/*
 * One and zeros padding: fill with 80 00 ... 00
 */
static void add_one_and_zeros_padding( unsigned char *output,
                                       size_t output_len, size_t data_len )
{
 8082bde:	b530      	push	{r4, r5, lr}
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
 8082be0:	5483      	strb	r3, [r0, r2]
 * One and zeros padding: fill with 80 00 ... 00
 */
static void add_one_and_zeros_padding( unsigned char *output,
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
 8082be2:	1a89      	subs	r1, r1, r2
    unsigned char i = 0;

    output[data_len] = 0x80;
    for( i = 1; i < padding_len; i++ )
 8082be4:	2301      	movs	r3, #1
        output[data_len + i] = 0x00;
 8082be6:	2500      	movs	r5, #0
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
    for( i = 1; i < padding_len; i++ )
 8082be8:	4299      	cmp	r1, r3
 8082bea:	d904      	bls.n	8082bf6 <_ZL25add_one_and_zeros_paddingPhjj+0x1a>
        output[data_len + i] = 0x00;
 8082bec:	18c4      	adds	r4, r0, r3
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
    for( i = 1; i < padding_len; i++ )
 8082bee:	3301      	adds	r3, #1
        output[data_len + i] = 0x00;
 8082bf0:	54a5      	strb	r5, [r4, r2]
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
    for( i = 1; i < padding_len; i++ )
 8082bf2:	b2db      	uxtb	r3, r3
 8082bf4:	e7f8      	b.n	8082be8 <_ZL25add_one_and_zeros_paddingPhjj+0xc>
 8082bf6:	bd30      	pop	{r4, r5, pc}

08082bf8 <_ZL25add_zeros_and_len_paddingPhjj>:
/*
 * Zeros and len padding: fill with 00 ... 00 ll, where ll is padding length
 */
static void add_zeros_and_len_padding( unsigned char *output,
                                       size_t output_len, size_t data_len )
{
 8082bf8:	b570      	push	{r4, r5, r6, lr}
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
 8082bfa:	2301      	movs	r3, #1
 * Zeros and len padding: fill with 00 ... 00 ll, where ll is padding length
 */
static void add_zeros_and_len_padding( unsigned char *output,
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
 8082bfc:	1a8d      	subs	r5, r1, r2
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
        output[data_len + i - 1] = 0x00;
 8082bfe:	2600      	movs	r6, #0
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
 8082c00:	429d      	cmp	r5, r3
 8082c02:	d906      	bls.n	8082c12 <_ZL25add_zeros_and_len_paddingPhjj+0x1a>
        output[data_len + i - 1] = 0x00;
 8082c04:	18c4      	adds	r4, r0, r3
 8082c06:	4414      	add	r4, r2
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
 8082c08:	3301      	adds	r3, #1
        output[data_len + i - 1] = 0x00;
 8082c0a:	f804 6c01 	strb.w	r6, [r4, #-1]
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
 8082c0e:	b2db      	uxtb	r3, r3
 8082c10:	e7f6      	b.n	8082c00 <_ZL25add_zeros_and_len_paddingPhjj+0x8>
        output[data_len + i - 1] = 0x00;
    output[output_len - 1] = (unsigned char) padding_len;
 8082c12:	4401      	add	r1, r0
 8082c14:	f801 5c01 	strb.w	r5, [r1, #-1]
 8082c18:	bd70      	pop	{r4, r5, r6, pc}
	...

08082c1c <_ZL25get_zeros_and_len_paddingPhjPj>:
}

static int get_zeros_and_len_padding( unsigned char *input, size_t input_len,
                                      size_t *data_len )
{
 8082c1c:	b570      	push	{r4, r5, r6, lr}
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
 8082c1e:	b1f0      	cbz	r0, 8082c5e <_ZL25get_zeros_and_len_paddingPhjPj+0x42>
 8082c20:	b1ea      	cbz	r2, 8082c5e <_ZL25get_zeros_and_len_paddingPhjPj+0x42>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
 8082c22:	1e4e      	subs	r6, r1, #1
 8082c24:	5d84      	ldrb	r4, [r0, r6]
    *data_len = input_len - padding_len;

    /* Avoid logical || since it results in a branch */
    bad |= padding_len > input_len;
    bad |= padding_len == 0;
 8082c26:	fab4 f384 	clz	r3, r4

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
    *data_len = input_len - padding_len;
 8082c2a:	1b0d      	subs	r5, r1, r4

    /* Avoid logical || since it results in a branch */
    bad |= padding_len > input_len;
    bad |= padding_len == 0;
 8082c2c:	095b      	lsrs	r3, r3, #5
 8082c2e:	42a1      	cmp	r1, r4
 8082c30:	bf2c      	ite	cs
 8082c32:	4619      	movcs	r1, r3
 8082c34:	f043 0101 	orrcc.w	r1, r3, #1

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
    *data_len = input_len - padding_len;
 8082c38:	6015      	str	r5, [r2, #0]
    bad |= padding_len > input_len;
    bad |= padding_len == 0;

    /* The number of bytes checked must be independent of padding_len */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len - 1; i++ )
 8082c3a:	2300      	movs	r3, #0
 8082c3c:	42b3      	cmp	r3, r6
 8082c3e:	d209      	bcs.n	8082c54 <_ZL25get_zeros_and_len_paddingPhjPj+0x38>
        bad |= input[i] * ( i >= pad_idx );
 8082c40:	42ab      	cmp	r3, r5
 8082c42:	5cc4      	ldrb	r4, [r0, r3]
 8082c44:	bf34      	ite	cc
 8082c46:	2200      	movcc	r2, #0
 8082c48:	2201      	movcs	r2, #1
 8082c4a:	4362      	muls	r2, r4
 8082c4c:	4311      	orrs	r1, r2
 8082c4e:	b2c9      	uxtb	r1, r1
    bad |= padding_len > input_len;
    bad |= padding_len == 0;

    /* The number of bytes checked must be independent of padding_len */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len - 1; i++ )
 8082c50:	3301      	adds	r3, #1
 8082c52:	e7f3      	b.n	8082c3c <_ZL25get_zeros_and_len_paddingPhjPj+0x20>
        bad |= input[i] * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 8082c54:	2900      	cmp	r1, #0
 8082c56:	4803      	ldr	r0, [pc, #12]	; (8082c64 <_ZL25get_zeros_and_len_paddingPhjPj+0x48>)
 8082c58:	bf08      	it	eq
 8082c5a:	2000      	moveq	r0, #0
 8082c5c:	bd70      	pop	{r4, r5, r6, pc}
{
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8082c5e:	4802      	ldr	r0, [pc, #8]	; (8082c68 <_ZL25get_zeros_and_len_paddingPhjPj+0x4c>)
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len - 1; i++ )
        bad |= input[i] * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
}
 8082c60:	bd70      	pop	{r4, r5, r6, pc}
 8082c62:	bf00      	nop
 8082c64:	ffff9e00 	.word	0xffff9e00
 8082c68:	ffff9f00 	.word	0xffff9f00

08082c6c <_ZL17add_zeros_paddingPhjj>:
/*
 * Zero padding: fill with 00 ... 00
 */
static void add_zeros_padding( unsigned char *output,
                               size_t output_len, size_t data_len )
{
 8082c6c:	b510      	push	{r4, lr}
 8082c6e:	4402      	add	r2, r0
    size_t i;

    for( i = data_len; i < output_len; i++ )
        output[i] = 0x00;
 8082c70:	2300      	movs	r3, #0
static void add_zeros_padding( unsigned char *output,
                               size_t output_len, size_t data_len )
{
    size_t i;

    for( i = data_len; i < output_len; i++ )
 8082c72:	1a14      	subs	r4, r2, r0
 8082c74:	42a1      	cmp	r1, r4
 8082c76:	d902      	bls.n	8082c7e <_ZL17add_zeros_paddingPhjj+0x12>
        output[i] = 0x00;
 8082c78:	f802 3b01 	strb.w	r3, [r2], #1
static void add_zeros_padding( unsigned char *output,
                               size_t output_len, size_t data_len )
{
    size_t i;

    for( i = data_len; i < output_len; i++ )
 8082c7c:	e7f9      	b.n	8082c72 <_ZL17add_zeros_paddingPhjj+0x6>
 8082c7e:	bd10      	pop	{r4, pc}

08082c80 <_ZL14get_no_paddingPhjPj>:
 * but a trivial get_padding function
 */
static int get_no_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
    if( NULL == input || NULL == data_len )
 8082c80:	b118      	cbz	r0, 8082c8a <_ZL14get_no_paddingPhjPj+0xa>
 8082c82:	b112      	cbz	r2, 8082c8a <_ZL14get_no_paddingPhjPj+0xa>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *data_len = input_len;
 8082c84:	6011      	str	r1, [r2, #0]

    return( 0 );
 8082c86:	2000      	movs	r0, #0
 8082c88:	4770      	bx	lr
 */
static int get_no_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8082c8a:	4801      	ldr	r0, [pc, #4]	; (8082c90 <_ZL14get_no_paddingPhjPj+0x10>)

    *data_len = input_len;

    return( 0 );
}
 8082c8c:	4770      	bx	lr
 8082c8e:	bf00      	nop
 8082c90:	ffff9f00 	.word	0xffff9f00

08082c94 <_ZL25get_one_and_zeros_paddingPhjPj>:
        output[data_len + i] = 0x00;
}

static int get_one_and_zeros_padding( unsigned char *input, size_t input_len,
                                      size_t *data_len )
{
 8082c94:	b5f0      	push	{r4, r5, r6, r7, lr}
    size_t i;
    unsigned char done = 0, prev_done, bad;

    if( NULL == input || NULL == data_len )
 8082c96:	b1f0      	cbz	r0, 8082cd6 <_ZL25get_one_and_zeros_paddingPhjPj+0x42>
 8082c98:	b1ea      	cbz	r2, 8082cd6 <_ZL25get_one_and_zeros_paddingPhjPj+0x42>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    bad = 0x80;
    *data_len = 0;
 8082c9a:	2300      	movs	r3, #0
 8082c9c:	6013      	str	r3, [r2, #0]
 8082c9e:	4408      	add	r0, r1
    unsigned char done = 0, prev_done, bad;

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    bad = 0x80;
 8082ca0:	2480      	movs	r4, #128	; 0x80
    *data_len = 0;
    for( i = input_len; i > 0; i-- )
 8082ca2:	b199      	cbz	r1, 8082ccc <_ZL25get_one_and_zeros_paddingPhjPj+0x38>
    {
        prev_done = done;
        done |= ( input[i - 1] != 0 );
 8082ca4:	f810 5d01 	ldrb.w	r5, [r0, #-1]!
 8082ca8:	3901      	subs	r1, #1
 8082caa:	2d00      	cmp	r5, #0
 8082cac:	bf0c      	ite	eq
 8082cae:	461d      	moveq	r5, r3
 8082cb0:	f043 0501 	orrne.w	r5, r3, #1
 8082cb4:	406b      	eors	r3, r5
        *data_len |= ( i - 1 ) * ( done != prev_done );
 8082cb6:	fb01 f603 	mul.w	r6, r1, r3
 8082cba:	6817      	ldr	r7, [r2, #0]
 8082cbc:	433e      	orrs	r6, r7
 8082cbe:	6016      	str	r6, [r2, #0]
        bad ^= input[i - 1] * ( done != prev_done );
 8082cc0:	7806      	ldrb	r6, [r0, #0]
 8082cc2:	4373      	muls	r3, r6
 8082cc4:	405c      	eors	r4, r3
 8082cc6:	b2e4      	uxtb	r4, r4
    bad = 0x80;
    *data_len = 0;
    for( i = input_len; i > 0; i-- )
    {
        prev_done = done;
        done |= ( input[i - 1] != 0 );
 8082cc8:	462b      	mov	r3, r5
 8082cca:	e7ea      	b.n	8082ca2 <_ZL25get_one_and_zeros_paddingPhjPj+0xe>
        *data_len |= ( i - 1 ) * ( done != prev_done );
        bad ^= input[i - 1] * ( done != prev_done );
    }

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 8082ccc:	2c00      	cmp	r4, #0
 8082cce:	4803      	ldr	r0, [pc, #12]	; (8082cdc <_ZL25get_one_and_zeros_paddingPhjPj+0x48>)
 8082cd0:	bf08      	it	eq
 8082cd2:	2000      	moveq	r0, #0
 8082cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
    size_t i;
    unsigned char done = 0, prev_done, bad;

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8082cd6:	4802      	ldr	r0, [pc, #8]	; (8082ce0 <_ZL25get_one_and_zeros_paddingPhjPj+0x4c>)
        bad ^= input[i - 1] * ( done != prev_done );
    }

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );

}
 8082cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082cda:	bf00      	nop
 8082cdc:	ffff9e00 	.word	0xffff9e00
 8082ce0:	ffff9f00 	.word	0xffff9f00

08082ce4 <_ZL17get_zeros_paddingPhjPj>:
        output[i] = 0x00;
}

static int get_zeros_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
 8082ce4:	b530      	push	{r4, r5, lr}
    size_t i;
    unsigned char done = 0, prev_done;

    if( NULL == input || NULL == data_len )
 8082ce6:	b1a8      	cbz	r0, 8082d14 <_ZL17get_zeros_paddingPhjPj+0x30>
 8082ce8:	b1a2      	cbz	r2, 8082d14 <_ZL17get_zeros_paddingPhjPj+0x30>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *data_len = 0;
 8082cea:	2300      	movs	r3, #0
 8082cec:	6013      	str	r3, [r2, #0]
 8082cee:	4401      	add	r1, r0
    for( i = input_len; i > 0; i-- )
 8082cf0:	4281      	cmp	r1, r0
 8082cf2:	eba1 0400 	sub.w	r4, r1, r0
 8082cf6:	d00f      	beq.n	8082d18 <_ZL17get_zeros_paddingPhjPj+0x34>
    {
        prev_done = done;
        done |= ( input[i-1] != 0 );
 8082cf8:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
 8082cfc:	2d00      	cmp	r5, #0
 8082cfe:	bf0c      	ite	eq
 8082d00:	461d      	moveq	r5, r3
 8082d02:	f043 0501 	orrne.w	r5, r3, #1
        *data_len |= i * ( done != prev_done );
 8082d06:	406b      	eors	r3, r5
 8082d08:	4363      	muls	r3, r4
 8082d0a:	6814      	ldr	r4, [r2, #0]
 8082d0c:	4323      	orrs	r3, r4
 8082d0e:	6013      	str	r3, [r2, #0]

    *data_len = 0;
    for( i = input_len; i > 0; i-- )
    {
        prev_done = done;
        done |= ( input[i-1] != 0 );
 8082d10:	462b      	mov	r3, r5
 8082d12:	e7ed      	b.n	8082cf0 <_ZL17get_zeros_paddingPhjPj+0xc>
{
    size_t i;
    unsigned char done = 0, prev_done;

    if( NULL == input || NULL == data_len )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8082d14:	4801      	ldr	r0, [pc, #4]	; (8082d1c <_ZL17get_zeros_paddingPhjPj+0x38>)
 8082d16:	bd30      	pop	{r4, r5, pc}

    *data_len = 0;
    for( i = input_len; i > 0; i-- )
 8082d18:	2000      	movs	r0, #0
        done |= ( input[i-1] != 0 );
        *data_len |= i * ( done != prev_done );
    }

    return( 0 );
}
 8082d1a:	bd30      	pop	{r4, r5, pc}
 8082d1c:	ffff9f00 	.word	0xffff9f00

08082d20 <mbedtls_cipher_info_from_type>:

    return( mbedtls_cipher_supported );
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_type( const mbedtls_cipher_type_t cipher_type )
{
 8082d20:	4b05      	ldr	r3, [pc, #20]	; (8082d38 <mbedtls_cipher_info_from_type+0x18>)
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 8082d22:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8082d26:	b122      	cbz	r2, 8082d32 <mbedtls_cipher_info_from_type+0x12>
 8082d28:	3308      	adds	r3, #8
        if( def->type == cipher_type )
 8082d2a:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8082d2e:	4281      	cmp	r1, r0
 8082d30:	d1f7      	bne.n	8082d22 <mbedtls_cipher_info_from_type+0x2>
            return( def->info );

    return( NULL );
}
 8082d32:	4610      	mov	r0, r2
 8082d34:	4770      	bx	lr
 8082d36:	bf00      	nop
 8082d38:	0809741c 	.word	0x0809741c

08082d3c <mbedtls_cipher_info_from_values>:
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_values( const mbedtls_cipher_id_t cipher_id,
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
 8082d3c:	b530      	push	{r4, r5, lr}
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 8082d3e:	4c08      	ldr	r4, [pc, #32]	; (8082d60 <mbedtls_cipher_info_from_values+0x24>)
 8082d40:	6863      	ldr	r3, [r4, #4]
 8082d42:	b15b      	cbz	r3, 8082d5c <mbedtls_cipher_info_from_values+0x20>
        if( def->info->base->cipher == cipher_id &&
 8082d44:	699d      	ldr	r5, [r3, #24]
 8082d46:	782d      	ldrb	r5, [r5, #0]
 8082d48:	4285      	cmp	r5, r0
 8082d4a:	d105      	bne.n	8082d58 <mbedtls_cipher_info_from_values+0x1c>
 8082d4c:	685d      	ldr	r5, [r3, #4]
 8082d4e:	428d      	cmp	r5, r1
 8082d50:	d102      	bne.n	8082d58 <mbedtls_cipher_info_from_values+0x1c>
            def->info->key_bitlen == (unsigned) key_bitlen &&
 8082d52:	785d      	ldrb	r5, [r3, #1]
 8082d54:	4295      	cmp	r5, r2
 8082d56:	d001      	beq.n	8082d5c <mbedtls_cipher_info_from_values+0x20>
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 8082d58:	3408      	adds	r4, #8
 8082d5a:	e7f1      	b.n	8082d40 <mbedtls_cipher_info_from_values+0x4>
            def->info->key_bitlen == (unsigned) key_bitlen &&
            def->info->mode == mode )
            return( def->info );

    return( NULL );
}
 8082d5c:	4618      	mov	r0, r3
 8082d5e:	bd30      	pop	{r4, r5, pc}
 8082d60:	08097414 	.word	0x08097414

08082d64 <mbedtls_cipher_init>:

void mbedtls_cipher_init( mbedtls_cipher_context_t *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 8082d64:	2240      	movs	r2, #64	; 0x40
 8082d66:	2100      	movs	r1, #0
 8082d68:	f011 b921 	b.w	8093fae <memset>

08082d6c <mbedtls_cipher_free>:
}

void mbedtls_cipher_free( mbedtls_cipher_context_t *ctx )
{
 8082d6c:	b510      	push	{r4, lr}
    if( ctx == NULL )
 8082d6e:	4604      	mov	r4, r0
 8082d70:	b168      	cbz	r0, 8082d8e <mbedtls_cipher_free+0x22>
       mbedtls_zeroize( ctx->cmac_ctx, sizeof( mbedtls_cmac_context_t ) );
       mbedtls_free( ctx->cmac_ctx );
    }
#endif

    if( ctx->cipher_ctx )
 8082d72:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8082d74:	b118      	cbz	r0, 8082d7e <mbedtls_cipher_free+0x12>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
 8082d76:	6823      	ldr	r3, [r4, #0]
 8082d78:	699b      	ldr	r3, [r3, #24]
 8082d7a:	699b      	ldr	r3, [r3, #24]
 8082d7c:	4798      	blx	r3
 8082d7e:	f104 0240 	add.w	r2, r4, #64	; 0x40
#define mbedtls_free   free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 8082d82:	2300      	movs	r3, #0
 8082d84:	4294      	cmp	r4, r2
 8082d86:	d002      	beq.n	8082d8e <mbedtls_cipher_free+0x22>
 8082d88:	7023      	strb	r3, [r4, #0]
 8082d8a:	3401      	adds	r4, #1
 8082d8c:	e7fa      	b.n	8082d84 <mbedtls_cipher_free+0x18>
 8082d8e:	bd10      	pop	{r4, pc}

08082d90 <mbedtls_cipher_setkey>:
    return( 0 );
}

int mbedtls_cipher_setkey( mbedtls_cipher_context_t *ctx, const unsigned char *key,
        int key_bitlen, const mbedtls_operation_t operation )
{
 8082d90:	b430      	push	{r4, r5}
    if( NULL == ctx || NULL == ctx->cipher_info )
 8082d92:	b1c8      	cbz	r0, 8082dc8 <mbedtls_cipher_setkey+0x38>
 8082d94:	6804      	ldr	r4, [r0, #0]
 8082d96:	b1bc      	cbz	r4, 8082dc8 <mbedtls_cipher_setkey+0x38>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 8082d98:	6925      	ldr	r5, [r4, #16]
 8082d9a:	07ad      	lsls	r5, r5, #30
 8082d9c:	d402      	bmi.n	8082da4 <mbedtls_cipher_setkey+0x14>
 8082d9e:	6865      	ldr	r5, [r4, #4]
 8082da0:	4295      	cmp	r5, r2
 8082da2:	d111      	bne.n	8082dc8 <mbedtls_cipher_setkey+0x38>
    ctx->operation = operation;

    /*
     * For CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 8082da4:	2b01      	cmp	r3, #1
        (int) ctx->cipher_info->key_bitlen != key_bitlen )
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    ctx->key_bitlen = key_bitlen;
 8082da6:	6042      	str	r2, [r0, #4]
    ctx->operation = operation;
 8082da8:	7203      	strb	r3, [r0, #8]

    /*
     * For CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 8082daa:	d004      	beq.n	8082db6 <mbedtls_cipher_setkey+0x26>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 8082dac:	7865      	ldrb	r5, [r4, #1]
    ctx->operation = operation;

    /*
     * For CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 8082dae:	2d03      	cmp	r5, #3
 8082db0:	d001      	beq.n	8082db6 <mbedtls_cipher_setkey+0x26>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 8082db2:	2d05      	cmp	r5, #5
 8082db4:	d102      	bne.n	8082dbc <mbedtls_cipher_setkey+0x2c>
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode )
    {
        return ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 8082db6:	69a3      	ldr	r3, [r4, #24]
                ctx->key_bitlen );
 8082db8:	68db      	ldr	r3, [r3, #12]
 8082dba:	e002      	b.n	8082dc2 <mbedtls_cipher_setkey+0x32>
    }

    if( MBEDTLS_DECRYPT == operation )
 8082dbc:	b923      	cbnz	r3, 8082dc8 <mbedtls_cipher_setkey+0x38>
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 8082dbe:	69a3      	ldr	r3, [r4, #24]
                ctx->key_bitlen );
 8082dc0:	691b      	ldr	r3, [r3, #16]
 8082dc2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
}
 8082dc4:	bc30      	pop	{r4, r5}
                ctx->key_bitlen );
    }

    if( MBEDTLS_DECRYPT == operation )
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
                ctx->key_bitlen );
 8082dc6:	4718      	bx	r3

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
}
 8082dc8:	4801      	ldr	r0, [pc, #4]	; (8082dd0 <mbedtls_cipher_setkey+0x40>)
 8082dca:	bc30      	pop	{r4, r5}
 8082dcc:	4770      	bx	lr
 8082dce:	bf00      	nop
 8082dd0:	ffff9f00 	.word	0xffff9f00

08082dd4 <mbedtls_cipher_set_iv>:

int mbedtls_cipher_set_iv( mbedtls_cipher_context_t *ctx,
                   const unsigned char *iv, size_t iv_len )
{
 8082dd4:	b538      	push	{r3, r4, r5, lr}
    size_t actual_iv_size;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == iv )
 8082dd6:	4604      	mov	r4, r0
 8082dd8:	b1b0      	cbz	r0, 8082e08 <mbedtls_cipher_set_iv+0x34>
 8082dda:	6803      	ldr	r3, [r0, #0]
 8082ddc:	b1a3      	cbz	r3, 8082e08 <mbedtls_cipher_set_iv+0x34>
 8082dde:	b199      	cbz	r1, 8082e08 <mbedtls_cipher_set_iv+0x34>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    /* avoid buffer overflow in ctx->iv */
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
 8082de0:	2a10      	cmp	r2, #16
 8082de2:	d80f      	bhi.n	8082e04 <mbedtls_cipher_set_iv+0x30>
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_IV_LEN ) != 0 )
 8082de4:	6918      	ldr	r0, [r3, #16]
 8082de6:	07c0      	lsls	r0, r0, #31
 8082de8:	d403      	bmi.n	8082df2 <mbedtls_cipher_set_iv+0x1e>
        actual_iv_size = iv_len;
    else
    {
        actual_iv_size = ctx->cipher_info->iv_size;
 8082dea:	68dd      	ldr	r5, [r3, #12]

        /* avoid reading past the end of input buffer */
        if( actual_iv_size > iv_len )
 8082dec:	42aa      	cmp	r2, r5
 8082dee:	d201      	bcs.n	8082df4 <mbedtls_cipher_set_iv+0x20>
 8082df0:	e00a      	b.n	8082e08 <mbedtls_cipher_set_iv+0x34>
 8082df2:	4615      	mov	r5, r2
            return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    memcpy( ctx->iv, iv, actual_iv_size );
 8082df4:	462a      	mov	r2, r5
 8082df6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8082dfa:	f011 f8b2 	bl	8093f62 <memcpy>
    ctx->iv_size = actual_iv_size;
 8082dfe:	63a5      	str	r5, [r4, #56]	; 0x38

    return( 0 );
 8082e00:	2000      	movs	r0, #0
 8082e02:	bd38      	pop	{r3, r4, r5, pc}
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == iv )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    /* avoid buffer overflow in ctx->iv */
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8082e04:	4801      	ldr	r0, [pc, #4]	; (8082e0c <mbedtls_cipher_set_iv+0x38>)
 8082e06:	bd38      	pop	{r3, r4, r5, pc}
                   const unsigned char *iv, size_t iv_len )
{
    size_t actual_iv_size;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == iv )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8082e08:	4801      	ldr	r0, [pc, #4]	; (8082e10 <mbedtls_cipher_set_iv+0x3c>)

    memcpy( ctx->iv, iv, actual_iv_size );
    ctx->iv_size = actual_iv_size;

    return( 0 );
}
 8082e0a:	bd38      	pop	{r3, r4, r5, pc}
 8082e0c:	ffff9f80 	.word	0xffff9f80
 8082e10:	ffff9f00 	.word	0xffff9f00

08082e14 <mbedtls_cipher_reset>:

int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
 8082e14:	b128      	cbz	r0, 8082e22 <mbedtls_cipher_reset+0xe>
 8082e16:	6803      	ldr	r3, [r0, #0]
 8082e18:	b11b      	cbz	r3, 8082e22 <mbedtls_cipher_reset+0xe>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    ctx->unprocessed_len = 0;
 8082e1a:	2300      	movs	r3, #0
 8082e1c:	6243      	str	r3, [r0, #36]	; 0x24

    return( 0 );
 8082e1e:	4618      	mov	r0, r3
 8082e20:	4770      	bx	lr
}

int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8082e22:	4801      	ldr	r0, [pc, #4]	; (8082e28 <mbedtls_cipher_reset+0x14>)

    ctx->unprocessed_len = 0;

    return( 0 );
}
 8082e24:	4770      	bx	lr
 8082e26:	bf00      	nop
 8082e28:	ffff9f00 	.word	0xffff9f00

08082e2c <mbedtls_cipher_update>:
}
#endif /* MBEDTLS_GCM_C */

int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen )
{
 8082e2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8082e30:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8082e34:	460f      	mov	r7, r1
 8082e36:	4615      	mov	r5, r2
 8082e38:	4699      	mov	r9, r3
    int ret;
    size_t block_size = 0;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 8082e3a:	4604      	mov	r4, r0
 8082e3c:	b908      	cbnz	r0, 8082e42 <mbedtls_cipher_update+0x16>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8082e3e:	485c      	ldr	r0, [pc, #368]	; (8082fb0 <mbedtls_cipher_update+0x184>)
 8082e40:	e0b2      	b.n	8082fa8 <mbedtls_cipher_update+0x17c>
                   size_t ilen, unsigned char *output, size_t *olen )
{
    int ret;
    size_t block_size = 0;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 8082e42:	6803      	ldr	r3, [r0, #0]
 8082e44:	2b00      	cmp	r3, #0
 8082e46:	d0fa      	beq.n	8082e3e <mbedtls_cipher_update+0x12>
 8082e48:	f1b8 0f00 	cmp.w	r8, #0
 8082e4c:	d0f7      	beq.n	8082e3e <mbedtls_cipher_update+0x12>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    *olen = 0;
 8082e4e:	2300      	movs	r3, #0
 8082e50:	f8c8 3000 	str.w	r3, [r8]
    block_size = mbedtls_cipher_get_block_size( ctx );
 8082e54:	f7ff fe86 	bl	8082b64 <mbedtls_cipher_get_block_size>

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 8082e58:	6823      	ldr	r3, [r4, #0]
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    *olen = 0;
    block_size = mbedtls_cipher_get_block_size( ctx );
 8082e5a:	4606      	mov	r6, r0

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 8082e5c:	785b      	ldrb	r3, [r3, #1]
 8082e5e:	2b01      	cmp	r3, #1
 8082e60:	d110      	bne.n	8082e84 <mbedtls_cipher_update+0x58>
    {
        if( ilen != block_size )
 8082e62:	4290      	cmp	r0, r2
 8082e64:	d17d      	bne.n	8082f62 <mbedtls_cipher_update+0x136>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;
 8082e66:	f8c8 0000 	str.w	r0, [r8]

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 8082e6a:	6823      	ldr	r3, [r4, #0]
 8082e6c:	460a      	mov	r2, r1
 8082e6e:	699b      	ldr	r3, [r3, #24]
 8082e70:	f994 1008 	ldrsb.w	r1, [r4, #8]
 8082e74:	685d      	ldr	r5, [r3, #4]
 8082e76:	464b      	mov	r3, r9
 8082e78:	46ac      	mov	ip, r5
 8082e7a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 8082e7c:	b003      	add	sp, #12
 8082e7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if( ilen != block_size )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 8082e82:	4760      	bx	ip

        return( 0 );
    }

#if defined(MBEDTLS_GCM_C)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
 8082e84:	2b06      	cmp	r3, #6
 8082e86:	d10a      	bne.n	8082e9e <mbedtls_cipher_update+0x72>
    {
        *olen = ilen;
 8082e88:	f8c8 2000 	str.w	r2, [r8]
        return mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
                           output );
 8082e8c:	464b      	mov	r3, r9
 8082e8e:	460a      	mov	r2, r1
 8082e90:	4629      	mov	r1, r5
 8082e92:	6be0      	ldr	r0, [r4, #60]	; 0x3c
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 8082e94:	b003      	add	sp, #12
 8082e96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(MBEDTLS_GCM_C)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
    {
        *olen = ilen;
        return mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
                           output );
 8082e9a:	f004 b9bb 	b.w	8087214 <mbedtls_gcm_update>
    }
#endif

    if ( 0 == block_size )
 8082e9e:	2800      	cmp	r0, #0
 8082ea0:	d061      	beq.n	8082f66 <mbedtls_cipher_update+0x13a>
    {
        return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;
    }

    if( input == output &&
 8082ea2:	4549      	cmp	r1, r9
 8082ea4:	d108      	bne.n	8082eb8 <mbedtls_cipher_update+0x8c>
 8082ea6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8082ea8:	2a00      	cmp	r2, #0
 8082eaa:	d1c8      	bne.n	8082e3e <mbedtls_cipher_update+0x12>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 8082eac:	fbb5 f2f0 	udiv	r2, r5, r0
 8082eb0:	fb00 5212 	mls	r2, r0, r2, r5
 8082eb4:	2a00      	cmp	r2, #0
 8082eb6:	d1c2      	bne.n	8082e3e <mbedtls_cipher_update+0x12>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_CBC )
 8082eb8:	2b02      	cmp	r3, #2
 8082eba:	d156      	bne.n	8082f6a <mbedtls_cipher_update+0x13e>
        size_t copy_len = 0;

        /*
         * If there is not enough data for a full block, cache it.
         */
        if( ( ctx->operation == MBEDTLS_DECRYPT && NULL != ctx->add_padding &&
 8082ebc:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8082ec0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8082ec2:	b92b      	cbnz	r3, 8082ed0 <mbedtls_cipher_update+0xa4>
 8082ec4:	68e3      	ldr	r3, [r4, #12]
 8082ec6:	b12b      	cbz	r3, 8082ed4 <mbedtls_cipher_update+0xa8>
 8082ec8:	1a33      	subs	r3, r6, r0
 8082eca:	429d      	cmp	r5, r3
 8082ecc:	d80f      	bhi.n	8082eee <mbedtls_cipher_update+0xc2>
 8082ece:	e004      	b.n	8082eda <mbedtls_cipher_update+0xae>
                ilen <= block_size - ctx->unprocessed_len ) ||
            ( ctx->operation == MBEDTLS_DECRYPT && NULL == ctx->add_padding &&
                ilen < block_size - ctx->unprocessed_len ) ||
 8082ed0:	2b01      	cmp	r3, #1
 8082ed2:	d10c      	bne.n	8082eee <mbedtls_cipher_update+0xc2>
             ( ctx->operation == MBEDTLS_ENCRYPT &&
 8082ed4:	1a33      	subs	r3, r6, r0
 8082ed6:	429d      	cmp	r5, r3
 8082ed8:	d209      	bcs.n	8082eee <mbedtls_cipher_update+0xc2>
                ilen < block_size - ctx->unprocessed_len ) )
        {
            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
                    ilen );
 8082eda:	4420      	add	r0, r4
 8082edc:	462a      	mov	r2, r5
 8082ede:	4639      	mov	r1, r7
 8082ee0:	3014      	adds	r0, #20
 8082ee2:	f011 f83e 	bl	8093f62 <memcpy>

            ctx->unprocessed_len += ilen;
 8082ee6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8082ee8:	441d      	add	r5, r3
 8082eea:	6265      	str	r5, [r4, #36]	; 0x24
 8082eec:	e037      	b.n	8082f5e <mbedtls_cipher_update+0x132>
        }

        /*
         * Process cached data first
         */
        if( 0 != ctx->unprocessed_len )
 8082eee:	b310      	cbz	r0, 8082f36 <mbedtls_cipher_update+0x10a>
        {
            copy_len = block_size - ctx->unprocessed_len;
 8082ef0:	ebc0 0a06 	rsb	sl, r0, r6

            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
                    copy_len );
 8082ef4:	4420      	add	r0, r4
 8082ef6:	4652      	mov	r2, sl
 8082ef8:	4639      	mov	r1, r7
 8082efa:	3014      	adds	r0, #20
 8082efc:	f011 f831 	bl	8093f62 <memcpy>

            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8082f00:	4623      	mov	r3, r4
 8082f02:	f853 2b14 	ldr.w	r2, [r3], #20
 8082f06:	f994 1008 	ldrsb.w	r1, [r4, #8]
 8082f0a:	6992      	ldr	r2, [r2, #24]
 8082f0c:	e88d 0208 	stmia.w	sp, {r3, r9}
 8082f10:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8082f14:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8082f18:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8082f1a:	4632      	mov	r2, r6
 8082f1c:	47d8      	blx	fp
 8082f1e:	2800      	cmp	r0, #0
 8082f20:	d142      	bne.n	8082fa8 <mbedtls_cipher_update+0x17c>
                    ctx->unprocessed_data, output ) ) )
            {
                return( ret );
            }

            *olen += block_size;
 8082f22:	f8d8 3000 	ldr.w	r3, [r8]
            output += block_size;
 8082f26:	44b1      	add	r9, r6
                    ctx->unprocessed_data, output ) ) )
            {
                return( ret );
            }

            *olen += block_size;
 8082f28:	4433      	add	r3, r6
 8082f2a:	f8c8 3000 	str.w	r3, [r8]
            output += block_size;
            ctx->unprocessed_len = 0;

            input += copy_len;
 8082f2e:	4457      	add	r7, sl
                return( ret );
            }

            *olen += block_size;
            output += block_size;
            ctx->unprocessed_len = 0;
 8082f30:	6260      	str	r0, [r4, #36]	; 0x24

            input += copy_len;
            ilen -= copy_len;
 8082f32:	ebca 0505 	rsb	r5, sl, r5
        }

        /*
         * Cache final, incomplete block
         */
        if( 0 != ilen )
 8082f36:	b195      	cbz	r5, 8082f5e <mbedtls_cipher_update+0x132>

            /* Encryption: only cache partial blocks
             * Decryption w/ padding: always keep at least one whole block
             * Decryption w/o padding: only cache partial blocks
             */
            copy_len = ilen % block_size;
 8082f38:	fbb5 faf6 	udiv	sl, r5, r6
 8082f3c:	fb06 5a1a 	mls	sl, r6, sl, r5
            if( copy_len == 0 &&
 8082f40:	f1ba 0f00 	cmp.w	sl, #0
 8082f44:	d013      	beq.n	8082f6e <mbedtls_cipher_update+0x142>
                NULL != ctx->add_padding)
            {
                copy_len = block_size;
            }

            memcpy( ctx->unprocessed_data, &( input[ilen - copy_len] ),
 8082f46:	ebca 0505 	rsb	r5, sl, r5
                    copy_len );
 8082f4a:	4652      	mov	r2, sl
 8082f4c:	1979      	adds	r1, r7, r5
 8082f4e:	f104 0014 	add.w	r0, r4, #20
 8082f52:	f011 f806 	bl	8093f62 <memcpy>

            ctx->unprocessed_len += copy_len;
 8082f56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8082f58:	4453      	add	r3, sl
 8082f5a:	6263      	str	r3, [r4, #36]	; 0x24
        }

        /*
         * Process remaining full blocks
         */
        if( ilen )
 8082f5c:	b995      	cbnz	r5, 8082f84 <mbedtls_cipher_update+0x158>
            }

            *olen += ilen;
        }

        return( 0 );
 8082f5e:	2000      	movs	r0, #0
 8082f60:	e022      	b.n	8082fa8 <mbedtls_cipher_update+0x17c>
    block_size = mbedtls_cipher_get_block_size( ctx );

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
    {
        if( ilen != block_size )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 8082f62:	4814      	ldr	r0, [pc, #80]	; (8082fb4 <mbedtls_cipher_update+0x188>)
 8082f64:	e020      	b.n	8082fa8 <mbedtls_cipher_update+0x17c>
    }
#endif

    if ( 0 == block_size )
    {
        return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;
 8082f66:	4814      	ldr	r0, [pc, #80]	; (8082fb8 <mbedtls_cipher_update+0x18c>)
 8082f68:	e01e      	b.n	8082fa8 <mbedtls_cipher_update+0x17c>

        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8082f6a:	4814      	ldr	r0, [pc, #80]	; (8082fbc <mbedtls_cipher_update+0x190>)
 8082f6c:	e01c      	b.n	8082fa8 <mbedtls_cipher_update+0x17c>
            /* Encryption: only cache partial blocks
             * Decryption w/ padding: always keep at least one whole block
             * Decryption w/o padding: only cache partial blocks
             */
            copy_len = ilen % block_size;
            if( copy_len == 0 &&
 8082f6e:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8082f72:	2b00      	cmp	r3, #0
 8082f74:	d1e7      	bne.n	8082f46 <mbedtls_cipher_update+0x11a>
                ctx->operation == MBEDTLS_DECRYPT &&
 8082f76:	68e3      	ldr	r3, [r4, #12]
 8082f78:	2b00      	cmp	r3, #0
 8082f7a:	bf0c      	ite	eq
 8082f7c:	f04f 0a00 	moveq.w	sl, #0
 8082f80:	46b2      	movne	sl, r6
 8082f82:	e7e0      	b.n	8082f46 <mbedtls_cipher_update+0x11a>
        /*
         * Process remaining full blocks
         */
        if( ilen )
        {
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8082f84:	6823      	ldr	r3, [r4, #0]
 8082f86:	f994 1008 	ldrsb.w	r1, [r4, #8]
 8082f8a:	699b      	ldr	r3, [r3, #24]
 8082f8c:	e88d 0280 	stmia.w	sp, {r7, r9}
 8082f90:	462a      	mov	r2, r5
 8082f92:	689e      	ldr	r6, [r3, #8]
 8082f94:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8082f96:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8082f9a:	47b0      	blx	r6
 8082f9c:	b920      	cbnz	r0, 8082fa8 <mbedtls_cipher_update+0x17c>
                    ctx->operation, ilen, ctx->iv, input, output ) ) )
            {
                return( ret );
            }

            *olen += ilen;
 8082f9e:	f8d8 3000 	ldr.w	r3, [r8]
 8082fa2:	441d      	add	r5, r3
 8082fa4:	f8c8 5000 	str.w	r5, [r8]
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 8082fa8:	b003      	add	sp, #12
 8082faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8082fae:	bf00      	nop
 8082fb0:	ffff9f00 	.word	0xffff9f00
 8082fb4:	ffff9d80 	.word	0xffff9d80
 8082fb8:	ffff9c80 	.word	0xffff9c80
 8082fbc:	ffff9f80 	.word	0xffff9f80

08082fc0 <mbedtls_cipher_finish>:
}
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

int mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,
                   unsigned char *output, size_t *olen )
{
 8082fc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8082fc2:	460e      	mov	r6, r1
 8082fc4:	4615      	mov	r5, r2
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 8082fc6:	4604      	mov	r4, r0
 8082fc8:	2800      	cmp	r0, #0
 8082fca:	d052      	beq.n	8083072 <mbedtls_cipher_finish+0xb2>
 8082fcc:	6803      	ldr	r3, [r0, #0]
 8082fce:	2b00      	cmp	r3, #0
 8082fd0:	d04f      	beq.n	8083072 <mbedtls_cipher_finish+0xb2>
 8082fd2:	2a00      	cmp	r2, #0
 8082fd4:	d04d      	beq.n	8083072 <mbedtls_cipher_finish+0xb2>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *olen = 0;
 8082fd6:	2300      	movs	r3, #0
 8082fd8:	6013      	str	r3, [r2, #0]

    if( MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 8082fda:	6807      	ldr	r7, [r0, #0]
 8082fdc:	787a      	ldrb	r2, [r7, #1]
 8082fde:	2a03      	cmp	r2, #3
 8082fe0:	d04d      	beq.n	808307e <mbedtls_cipher_finish+0xbe>
 8082fe2:	1f51      	subs	r1, r2, #5
 8082fe4:	2902      	cmp	r1, #2
 8082fe6:	d94a      	bls.n	808307e <mbedtls_cipher_finish+0xbe>
        MBEDTLS_MODE_STREAM == ctx->cipher_info->mode )
    {
        return( 0 );
    }

    if( MBEDTLS_MODE_ECB == ctx->cipher_info->mode )
 8082fe8:	2a01      	cmp	r2, #1
 8082fea:	d101      	bne.n	8082ff0 <mbedtls_cipher_finish+0x30>
    {
        if( ctx->unprocessed_len != 0 )
 8082fec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8082fee:	e016      	b.n	808301e <mbedtls_cipher_finish+0x5e>

        return( 0 );
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( MBEDTLS_MODE_CBC == ctx->cipher_info->mode )
 8082ff0:	2a02      	cmp	r2, #2
 8082ff2:	d140      	bne.n	8083076 <mbedtls_cipher_finish+0xb6>
    {
        int ret = 0;

        if( MBEDTLS_ENCRYPT == ctx->operation )
 8082ff4:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8082ff8:	2b01      	cmp	r3, #1
 8082ffa:	d109      	bne.n	8083010 <mbedtls_cipher_finish+0x50>
        {
            /* check for 'no padding' mode */
            if( NULL == ctx->add_padding )
 8082ffc:	68c3      	ldr	r3, [r0, #12]
 8082ffe:	2b00      	cmp	r3, #0
 8083000:	d0f4      	beq.n	8082fec <mbedtls_cipher_finish+0x2c>
static inline int mbedtls_cipher_get_iv_size( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
        return 0;

    if( ctx->iv_size != 0 )
 8083002:	6ba1      	ldr	r1, [r4, #56]	; 0x38
                    return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

                return( 0 );
            }

            ctx->add_padding( ctx->unprocessed_data, mbedtls_cipher_get_iv_size( ctx ),
 8083004:	3014      	adds	r0, #20
 8083006:	b901      	cbnz	r1, 808300a <mbedtls_cipher_finish+0x4a>
        return (int) ctx->iv_size;

    return (int) ctx->cipher_info->iv_size;
 8083008:	68f9      	ldr	r1, [r7, #12]
                    ctx->unprocessed_len );
 808300a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 808300c:	4798      	blx	r3
 808300e:	e00b      	b.n	8083028 <mbedtls_cipher_finish+0x68>
        }
        else if( mbedtls_cipher_get_block_size( ctx ) != ctx->unprocessed_len )
 8083010:	f7ff fda8 	bl	8082b64 <mbedtls_cipher_get_block_size>
 8083014:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8083016:	4298      	cmp	r0, r3
 8083018:	d006      	beq.n	8083028 <mbedtls_cipher_finish+0x68>
        {
            /*
             * For decrypt operations, expect a full block,
             * or an empty block if no padding
             */
            if( NULL == ctx->add_padding && 0 == ctx->unprocessed_len )
 808301a:	68e2      	ldr	r2, [r4, #12]
 808301c:	bb6a      	cbnz	r2, 808307a <mbedtls_cipher_finish+0xba>
    if( MBEDTLS_MODE_ECB == ctx->cipher_info->mode )
    {
        if( ctx->unprocessed_len != 0 )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        return( 0 );
 808301e:	2b00      	cmp	r3, #0
 8083020:	4818      	ldr	r0, [pc, #96]	; (8083084 <mbedtls_cipher_finish+0xc4>)
 8083022:	bf08      	it	eq
 8083024:	2000      	moveq	r0, #0
 8083026:	e02b      	b.n	8083080 <mbedtls_cipher_finish+0xc0>

            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
        }

        /* cipher block */
        if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8083028:	4620      	mov	r0, r4
 808302a:	f7ff fd9b 	bl	8082b64 <mbedtls_cipher_get_block_size>
 808302e:	4623      	mov	r3, r4
 8083030:	f853 2b14 	ldr.w	r2, [r3], #20
 8083034:	f994 1008 	ldrsb.w	r1, [r4, #8]
 8083038:	6992      	ldr	r2, [r2, #24]
 808303a:	e88d 0048 	stmia.w	sp, {r3, r6}
 808303e:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8083042:	6897      	ldr	r7, [r2, #8]
 8083044:	4602      	mov	r2, r0
 8083046:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8083048:	47b8      	blx	r7
 808304a:	4603      	mov	r3, r0
 808304c:	b9b8      	cbnz	r0, 808307e <mbedtls_cipher_finish+0xbe>
        {
            return( ret );
        }

        /* Set output size for decryption */
        if( MBEDTLS_DECRYPT == ctx->operation )
 808304e:	f994 2008 	ldrsb.w	r2, [r4, #8]
            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 8083052:	4620      	mov	r0, r4
        {
            return( ret );
        }

        /* Set output size for decryption */
        if( MBEDTLS_DECRYPT == ctx->operation )
 8083054:	b94a      	cbnz	r2, 808306a <mbedtls_cipher_finish+0xaa>
            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 8083056:	f7ff fd85 	bl	8082b64 <mbedtls_cipher_get_block_size>
                                     olen );
 808305a:	462a      	mov	r2, r5
 808305c:	4601      	mov	r1, r0
 808305e:	4630      	mov	r0, r6
 8083060:	6923      	ldr	r3, [r4, #16]
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 8083062:	b003      	add	sp, #12
 8083064:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        }

        /* Set output size for decryption */
        if( MBEDTLS_DECRYPT == ctx->operation )
            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
                                     olen );
 8083068:	4718      	bx	r3

        /* Set output size for encryption */
        *olen = mbedtls_cipher_get_block_size( ctx );
 808306a:	f7ff fd7b 	bl	8082b64 <mbedtls_cipher_get_block_size>
 808306e:	6028      	str	r0, [r5, #0]
 8083070:	e005      	b.n	808307e <mbedtls_cipher_finish+0xbe>

int mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,
                   unsigned char *output, size_t *olen )
{
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8083072:	4805      	ldr	r0, [pc, #20]	; (8083088 <mbedtls_cipher_finish+0xc8>)
 8083074:	e004      	b.n	8083080 <mbedtls_cipher_finish+0xc0>
    }
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8083076:	4805      	ldr	r0, [pc, #20]	; (808308c <mbedtls_cipher_finish+0xcc>)
 8083078:	e002      	b.n	8083080 <mbedtls_cipher_finish+0xc0>
             * or an empty block if no padding
             */
            if( NULL == ctx->add_padding && 0 == ctx->unprocessed_len )
                return( 0 );

            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 808307a:	4802      	ldr	r0, [pc, #8]	; (8083084 <mbedtls_cipher_finish+0xc4>)
 808307c:	e000      	b.n	8083080 <mbedtls_cipher_finish+0xc0>
        }

        /* cipher block */
        if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 808307e:	4618      	mov	r0, r3
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 8083080:	b003      	add	sp, #12
 8083082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083084:	ffff9d80 	.word	0xffff9d80
 8083088:	ffff9f00 	.word	0xffff9f00
 808308c:	ffff9f80 	.word	0xffff9f80

08083090 <mbedtls_cipher_set_padding_mode>:

#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx, mbedtls_cipher_padding_t mode )
{
    if( NULL == ctx ||
 8083090:	b308      	cbz	r0, 80830d6 <mbedtls_cipher_set_padding_mode+0x46>
        MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
 8083092:	6803      	ldr	r3, [r0, #0]
}

#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx, mbedtls_cipher_padding_t mode )
{
    if( NULL == ctx ||
 8083094:	785b      	ldrb	r3, [r3, #1]
 8083096:	2b02      	cmp	r3, #2
 8083098:	d11d      	bne.n	80830d6 <mbedtls_cipher_set_padding_mode+0x46>
        MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    switch( mode )
 808309a:	2904      	cmp	r1, #4
 808309c:	d81d      	bhi.n	80830da <mbedtls_cipher_set_padding_mode+0x4a>
 808309e:	e8df f001 	tbb	[pc, r1]
 80830a2:	0703      	.short	0x0703
 80830a4:	110d      	.short	0x110d
 80830a6:	15          	.byte	0x15
 80830a7:	00          	.byte	0x00
    {
#if defined(MBEDTLS_CIPHER_PADDING_PKCS7)
    case MBEDTLS_PADDING_PKCS7:
        ctx->add_padding = add_pkcs_padding;
 80830a8:	4b0d      	ldr	r3, [pc, #52]	; (80830e0 <mbedtls_cipher_set_padding_mode+0x50>)
 80830aa:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_pkcs_padding;
 80830ac:	4b0d      	ldr	r3, [pc, #52]	; (80830e4 <mbedtls_cipher_set_padding_mode+0x54>)
 80830ae:	e002      	b.n	80830b6 <mbedtls_cipher_set_padding_mode+0x26>
        break;
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS)
    case MBEDTLS_PADDING_ONE_AND_ZEROS:
        ctx->add_padding = add_one_and_zeros_padding;
 80830b0:	4b0d      	ldr	r3, [pc, #52]	; (80830e8 <mbedtls_cipher_set_padding_mode+0x58>)
 80830b2:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_one_and_zeros_padding;
 80830b4:	4b0d      	ldr	r3, [pc, #52]	; (80830ec <mbedtls_cipher_set_padding_mode+0x5c>)
 80830b6:	6103      	str	r3, [r0, #16]

    default:
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 80830b8:	2000      	movs	r0, #0
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS)
    case MBEDTLS_PADDING_ONE_AND_ZEROS:
        ctx->add_padding = add_one_and_zeros_padding;
        ctx->get_padding = get_one_and_zeros_padding;
        break;
 80830ba:	4770      	bx	lr
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN)
    case MBEDTLS_PADDING_ZEROS_AND_LEN:
        ctx->add_padding = add_zeros_and_len_padding;
 80830bc:	4b0c      	ldr	r3, [pc, #48]	; (80830f0 <mbedtls_cipher_set_padding_mode+0x60>)
 80830be:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_zeros_and_len_padding;
 80830c0:	4b0c      	ldr	r3, [pc, #48]	; (80830f4 <mbedtls_cipher_set_padding_mode+0x64>)
 80830c2:	e7f8      	b.n	80830b6 <mbedtls_cipher_set_padding_mode+0x26>
        break;
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ZEROS)
    case MBEDTLS_PADDING_ZEROS:
        ctx->add_padding = add_zeros_padding;
 80830c4:	4b0c      	ldr	r3, [pc, #48]	; (80830f8 <mbedtls_cipher_set_padding_mode+0x68>)
 80830c6:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_zeros_padding;
 80830c8:	4b0c      	ldr	r3, [pc, #48]	; (80830fc <mbedtls_cipher_set_padding_mode+0x6c>)
 80830ca:	e7f4      	b.n	80830b6 <mbedtls_cipher_set_padding_mode+0x26>
        break;
#endif
    case MBEDTLS_PADDING_NONE:
        ctx->add_padding = NULL;
        ctx->get_padding = get_no_padding;
 80830cc:	4a0c      	ldr	r2, [pc, #48]	; (8083100 <mbedtls_cipher_set_padding_mode+0x70>)
        ctx->add_padding = add_zeros_padding;
        ctx->get_padding = get_zeros_padding;
        break;
#endif
    case MBEDTLS_PADDING_NONE:
        ctx->add_padding = NULL;
 80830ce:	2300      	movs	r3, #0
 80830d0:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_no_padding;
 80830d2:	6102      	str	r2, [r0, #16]
 80830d4:	e7f0      	b.n	80830b8 <mbedtls_cipher_set_padding_mode+0x28>
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx, mbedtls_cipher_padding_t mode )
{
    if( NULL == ctx ||
        MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80830d6:	480b      	ldr	r0, [pc, #44]	; (8083104 <mbedtls_cipher_set_padding_mode+0x74>)
 80830d8:	4770      	bx	lr
        ctx->add_padding = NULL;
        ctx->get_padding = get_no_padding;
        break;

    default:
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 80830da:	480b      	ldr	r0, [pc, #44]	; (8083108 <mbedtls_cipher_set_padding_mode+0x78>)
    }

    return( 0 );
}
 80830dc:	4770      	bx	lr
 80830de:	bf00      	nop
 80830e0:	08082b6f 	.word	0x08082b6f
 80830e4:	08082b89 	.word	0x08082b89
 80830e8:	08082bdd 	.word	0x08082bdd
 80830ec:	08082c95 	.word	0x08082c95
 80830f0:	08082bf9 	.word	0x08082bf9
 80830f4:	08082c1d 	.word	0x08082c1d
 80830f8:	08082c6d 	.word	0x08082c6d
 80830fc:	08082ce5 	.word	0x08082ce5
 8083100:	08082c81 	.word	0x08082c81
 8083104:	ffff9f00 	.word	0xffff9f00
 8083108:	ffff9f80 	.word	0xffff9f80

0808310c <mbedtls_cipher_setup>:

    mbedtls_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
}

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
 808310c:	b538      	push	{r3, r4, r5, lr}
 808310e:	4604      	mov	r4, r0
    if( NULL == cipher_info || NULL == ctx )
 8083110:	460d      	mov	r5, r1
 8083112:	b181      	cbz	r1, 8083136 <mbedtls_cipher_setup+0x2a>
 8083114:	b178      	cbz	r0, 8083136 <mbedtls_cipher_setup+0x2a>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 8083116:	2240      	movs	r2, #64	; 0x40
 8083118:	2100      	movs	r1, #0
 808311a:	f010 ff48 	bl	8093fae <memset>

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
 808311e:	69ab      	ldr	r3, [r5, #24]
 8083120:	695b      	ldr	r3, [r3, #20]
 8083122:	4798      	blx	r3
 8083124:	63e0      	str	r0, [r4, #60]	; 0x3c
 8083126:	b140      	cbz	r0, 808313a <mbedtls_cipher_setup+0x2e>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );

    ctx->cipher_info = cipher_info;
 8083128:	6025      	str	r5, [r4, #0]
#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)
    /*
     * Ignore possible errors caused by a cipher mode that doesn't use padding
     */
#if defined(MBEDTLS_CIPHER_PADDING_PKCS7)
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_PKCS7 );
 808312a:	2100      	movs	r1, #0
 808312c:	4620      	mov	r0, r4
 808312e:	f7ff ffaf 	bl	8083090 <mbedtls_cipher_set_padding_mode>
#else
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
 8083132:	2000      	movs	r0, #0
 8083134:	bd38      	pop	{r3, r4, r5, pc}
}

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
    if( NULL == cipher_info || NULL == ctx )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8083136:	4802      	ldr	r0, [pc, #8]	; (8083140 <mbedtls_cipher_setup+0x34>)
 8083138:	bd38      	pop	{r3, r4, r5, pc}

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
 808313a:	4802      	ldr	r0, [pc, #8]	; (8083144 <mbedtls_cipher_setup+0x38>)
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
}
 808313c:	bd38      	pop	{r3, r4, r5, pc}
 808313e:	bf00      	nop
 8083140:	ffff9f00 	.word	0xffff9f00
 8083144:	ffff9e80 	.word	0xffff9e80

08083148 <mbedtls_cipher_crypt>:
 */
int mbedtls_cipher_crypt( mbedtls_cipher_context_t *ctx,
                  const unsigned char *iv, size_t iv_len,
                  const unsigned char *input, size_t ilen,
                  unsigned char *output, size_t *olen )
{
 8083148:	b5f0      	push	{r4, r5, r6, r7, lr}
 808314a:	b085      	sub	sp, #20
 808314c:	4605      	mov	r5, r0
 808314e:	461f      	mov	r7, r3
 8083150:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8083152:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    int ret;
    size_t finish_olen;

    if( ( ret = mbedtls_cipher_set_iv( ctx, iv, iv_len ) ) != 0 )
 8083154:	f7ff fe3e 	bl	8082dd4 <mbedtls_cipher_set_iv>
 8083158:	b9b0      	cbnz	r0, 8083188 <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_reset( ctx ) ) != 0 )
 808315a:	4628      	mov	r0, r5
 808315c:	f7ff fe5a 	bl	8082e14 <mbedtls_cipher_reset>
 8083160:	b990      	cbnz	r0, 8083188 <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_update( ctx, input, ilen, output, olen ) ) != 0 )
 8083162:	9400      	str	r4, [sp, #0]
 8083164:	4633      	mov	r3, r6
 8083166:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8083168:	4639      	mov	r1, r7
 808316a:	4628      	mov	r0, r5
 808316c:	f7ff fe5e 	bl	8082e2c <mbedtls_cipher_update>
 8083170:	b950      	cbnz	r0, 8083188 <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_finish( ctx, output + *olen, &finish_olen ) ) != 0 )
 8083172:	6821      	ldr	r1, [r4, #0]
 8083174:	aa03      	add	r2, sp, #12
 8083176:	4431      	add	r1, r6
 8083178:	4628      	mov	r0, r5
 808317a:	f7ff ff21 	bl	8082fc0 <mbedtls_cipher_finish>
 808317e:	b918      	cbnz	r0, 8083188 <mbedtls_cipher_crypt+0x40>
        return( ret );

    *olen += finish_olen;
 8083180:	6822      	ldr	r2, [r4, #0]
 8083182:	9b03      	ldr	r3, [sp, #12]
 8083184:	4413      	add	r3, r2
 8083186:	6023      	str	r3, [r4, #0]

    return( 0 );
}
 8083188:	b005      	add	sp, #20
 808318a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808318c <mbedtls_cipher_auth_encrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 808318c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8083190:	6807      	ldr	r7, [r0, #0]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 8083192:	4614      	mov	r4, r2
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8083194:	787f      	ldrb	r7, [r7, #1]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 8083196:	9d07      	ldr	r5, [sp, #28]
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8083198:	2f06      	cmp	r7, #6
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 808319a:	9e08      	ldr	r6, [sp, #32]
 808319c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 808319e:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 80831a2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80831a6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80831aa:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80831ae:	d112      	bne.n	80831d6 <mbedtls_cipher_auth_encrypt+0x4a>
    {
        *olen = ilen;
 80831b0:	f8c9 2000 	str.w	r2, [r9]
        return( mbedtls_gcm_crypt_and_tag( (mbedtls_gcm_context *)ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
                                   iv, iv_len, ad, ad_len, input, output,
                                   tag_len, tag ) );
 80831b4:	9308      	str	r3, [sp, #32]
 80831b6:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 80831ba:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 80831be:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 80831c2:	960a      	str	r6, [sp, #40]	; 0x28
 80831c4:	9509      	str	r5, [sp, #36]	; 0x24
 80831c6:	9407      	str	r4, [sp, #28]
 80831c8:	460b      	mov	r3, r1
                                     tag, tag_len ) );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 80831ca:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
    {
        *olen = ilen;
        return( mbedtls_gcm_crypt_and_tag( (mbedtls_gcm_context *)ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
                                   iv, iv_len, ad, ad_len, input, output,
                                   tag_len, tag ) );
 80831ce:	2101      	movs	r1, #1
 80831d0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80831d2:	f004 b90a 	b.w	80873ea <mbedtls_gcm_crypt_and_tag>
                                     tag, tag_len ) );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 80831d6:	4801      	ldr	r0, [pc, #4]	; (80831dc <mbedtls_cipher_auth_encrypt+0x50>)
 80831d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80831dc:	ffff9f80 	.word	0xffff9f80

080831e0 <mbedtls_cipher_auth_decrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 80831e0:	b530      	push	{r4, r5, lr}
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80831e2:	6805      	ldr	r5, [r0, #0]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 80831e4:	b087      	sub	sp, #28
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80831e6:	786d      	ldrb	r5, [r5, #1]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 80831e8:	460c      	mov	r4, r1
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80831ea:	2d06      	cmp	r5, #6
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 80831ec:	990c      	ldr	r1, [sp, #48]	; 0x30
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80831ee:	d117      	bne.n	8083220 <mbedtls_cipher_auth_decrypt+0x40>
    {
        int ret;

        *olen = ilen;
 80831f0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80831f2:	6029      	str	r1, [r5, #0]
        ret = mbedtls_gcm_auth_decrypt( (mbedtls_gcm_context *)ctx->cipher_ctx, ilen,
                                iv, iv_len, ad, ad_len,
                                tag, tag_len, input, output );
 80831f4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80831f6:	9505      	str	r5, [sp, #20]
 80831f8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80831fa:	9504      	str	r5, [sp, #16]
 80831fc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80831fe:	9503      	str	r5, [sp, #12]
 8083200:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8083202:	9502      	str	r5, [sp, #8]
 8083204:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8083206:	e88d 0028 	stmia.w	sp, {r3, r5}
 808320a:	4613      	mov	r3, r2
 808320c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 808320e:	4622      	mov	r2, r4
 8083210:	f004 f910 	bl	8087434 <mbedtls_gcm_auth_decrypt>

        if( ret == MBEDTLS_ERR_GCM_AUTH_FAILED )
            ret = MBEDTLS_ERR_CIPHER_AUTH_FAILED;
 8083214:	4b04      	ldr	r3, [pc, #16]	; (8083228 <mbedtls_cipher_auth_decrypt+0x48>)
 8083216:	f110 0f12 	cmn.w	r0, #18
 808321a:	bf08      	it	eq
 808321c:	4618      	moveq	r0, r3
 808321e:	e000      	b.n	8083222 <mbedtls_cipher_auth_decrypt+0x42>

        return( ret );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8083220:	4802      	ldr	r0, [pc, #8]	; (808322c <mbedtls_cipher_auth_decrypt+0x4c>)
}
 8083222:	b007      	add	sp, #28
 8083224:	bd30      	pop	{r4, r5, pc}
 8083226:	bf00      	nop
 8083228:	ffff9d00 	.word	0xffff9d00
 808322c:	ffff9f80 	.word	0xffff9f80

08083230 <mbedtls_asn1_get_len>:
 * ASN.1 DER decoding routines
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
 8083230:	b530      	push	{r4, r5, lr}
    if( ( end - *p ) < 1 )
 8083232:	6803      	ldr	r3, [r0, #0]
 8083234:	1acd      	subs	r5, r1, r3
 8083236:	2d00      	cmp	r5, #0
 8083238:	dc02      	bgt.n	8083240 <mbedtls_asn1_get_len+0x10>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 808323a:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 808323e:	bd30      	pop	{r4, r5, pc}

    if( ( **p & 0x80 ) == 0 )
 8083240:	781c      	ldrb	r4, [r3, #0]
 8083242:	f014 0f80 	tst.w	r4, #128	; 0x80
 8083246:	d104      	bne.n	8083252 <mbedtls_asn1_get_len+0x22>
        *len = *(*p)++;
 8083248:	1c5c      	adds	r4, r3, #1
 808324a:	6004      	str	r4, [r0, #0]
 808324c:	781b      	ldrb	r3, [r3, #0]
 808324e:	6013      	str	r3, [r2, #0]
 8083250:	e036      	b.n	80832c0 <mbedtls_asn1_get_len+0x90>
    else
    {
        switch( **p & 0x7F )
 8083252:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8083256:	3c01      	subs	r4, #1
 8083258:	2c03      	cmp	r4, #3
 808325a:	d838      	bhi.n	80832ce <mbedtls_asn1_get_len+0x9e>
 808325c:	e8df f004 	tbb	[pc, r4]
 8083260:	20130902 	.word	0x20130902
        {
        case 1:
            if( ( end - *p ) < 2 )
 8083264:	2d01      	cmp	r5, #1
 8083266:	d0e8      	beq.n	808323a <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = (*p)[1];
 8083268:	785b      	ldrb	r3, [r3, #1]
 808326a:	6013      	str	r3, [r2, #0]
            (*p) += 2;
 808326c:	6803      	ldr	r3, [r0, #0]
 808326e:	3302      	adds	r3, #2
 8083270:	e025      	b.n	80832be <mbedtls_asn1_get_len+0x8e>
            break;

        case 2:
            if( ( end - *p ) < 3 )
 8083272:	2d02      	cmp	r5, #2
 8083274:	dde1      	ble.n	808323a <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 8083276:	785c      	ldrb	r4, [r3, #1]
 8083278:	789b      	ldrb	r3, [r3, #2]
 808327a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 808327e:	6013      	str	r3, [r2, #0]
            (*p) += 3;
 8083280:	6803      	ldr	r3, [r0, #0]
 8083282:	3303      	adds	r3, #3
 8083284:	e01b      	b.n	80832be <mbedtls_asn1_get_len+0x8e>
            break;

        case 3:
            if( ( end - *p ) < 4 )
 8083286:	2d03      	cmp	r5, #3
 8083288:	ddd7      	ble.n	808323a <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = ( (size_t)(*p)[1] << 16 ) |
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 808328a:	789c      	ldrb	r4, [r3, #2]
 808328c:	785d      	ldrb	r5, [r3, #1]
 808328e:	0224      	lsls	r4, r4, #8
 8083290:	78db      	ldrb	r3, [r3, #3]
 8083292:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8083296:	431c      	orrs	r4, r3
 8083298:	6014      	str	r4, [r2, #0]
            (*p) += 4;
 808329a:	6803      	ldr	r3, [r0, #0]
 808329c:	3304      	adds	r3, #4
 808329e:	e00e      	b.n	80832be <mbedtls_asn1_get_len+0x8e>
            break;

        case 4:
            if( ( end - *p ) < 5 )
 80832a0:	2d04      	cmp	r5, #4
 80832a2:	ddca      	ble.n	808323a <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
 80832a4:	789c      	ldrb	r4, [r3, #2]
 80832a6:	785d      	ldrb	r5, [r3, #1]
 80832a8:	0424      	lsls	r4, r4, #16
 80832aa:	ea44 6505 	orr.w	r5, r4, r5, lsl #24
 80832ae:	791c      	ldrb	r4, [r3, #4]
 80832b0:	78db      	ldrb	r3, [r3, #3]
 80832b2:	432c      	orrs	r4, r5
 80832b4:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80832b8:	6013      	str	r3, [r2, #0]
            (*p) += 5;
 80832ba:	6803      	ldr	r3, [r0, #0]
 80832bc:	3305      	adds	r3, #5
 80832be:	6003      	str	r3, [r0, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
 80832c0:	6803      	ldr	r3, [r0, #0]
 80832c2:	1ac9      	subs	r1, r1, r3
 80832c4:	6813      	ldr	r3, [r2, #0]
 80832c6:	428b      	cmp	r3, r1
 80832c8:	d8b7      	bhi.n	808323a <mbedtls_asn1_get_len+0xa>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
 80832ca:	2000      	movs	r0, #0
 80832cc:	bd30      	pop	{r4, r5, pc}
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
            (*p) += 5;
            break;

        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 80832ce:	f06f 0063 	mvn.w	r0, #99	; 0x63

    if( *len > (size_t) ( end - *p ) )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
}
 80832d2:	bd30      	pop	{r4, r5, pc}

080832d4 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
 80832d4:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
 80832d6:	6804      	ldr	r4, [r0, #0]
 80832d8:	1b0e      	subs	r6, r1, r4
 80832da:	2e00      	cmp	r6, #0
 80832dc:	dd07      	ble.n	80832ee <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
 80832de:	7826      	ldrb	r6, [r4, #0]
 80832e0:	429e      	cmp	r6, r3
 80832e2:	d107      	bne.n	80832f4 <mbedtls_asn1_get_tag+0x20>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 80832e4:	3401      	adds	r4, #1
 80832e6:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
 80832e8:	bc70      	pop	{r4, r5, r6}
    if( **p != tag )
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;

    return( mbedtls_asn1_get_len( p, end, len ) );
 80832ea:	f7ff bfa1 	b.w	8083230 <mbedtls_asn1_get_len>
int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80832ee:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 80832f2:	e001      	b.n	80832f8 <mbedtls_asn1_get_tag+0x24>

    if( **p != tag )
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 80832f4:	f06f 0061 	mvn.w	r0, #97	; 0x61

    (*p)++;

    return( mbedtls_asn1_get_len( p, end, len ) );
}
 80832f8:	bc70      	pop	{r4, r5, r6}
 80832fa:	4770      	bx	lr

080832fc <mbedtls_asn1_get_bool>:

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 80832fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 80832fe:	2301      	movs	r3, #1
}

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 8083300:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 8083302:	aa01      	add	r2, sp, #4
}

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 8083304:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 8083306:	f7ff ffe5 	bl	80832d4 <mbedtls_asn1_get_tag>
 808330a:	b970      	cbnz	r0, 808332a <mbedtls_asn1_get_bool+0x2e>
        return( ret );

    if( len != 1 )
 808330c:	9b01      	ldr	r3, [sp, #4]
 808330e:	2b01      	cmp	r3, #1
 8083310:	d109      	bne.n	8083326 <mbedtls_asn1_get_bool+0x2a>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = ( **p != 0 ) ? 1 : 0;
 8083312:	6823      	ldr	r3, [r4, #0]
 8083314:	781b      	ldrb	r3, [r3, #0]
 8083316:	3300      	adds	r3, #0
 8083318:	bf18      	it	ne
 808331a:	2301      	movne	r3, #1
 808331c:	602b      	str	r3, [r5, #0]
    (*p)++;
 808331e:	6823      	ldr	r3, [r4, #0]
 8083320:	3301      	adds	r3, #1
 8083322:	6023      	str	r3, [r4, #0]

    return( 0 );
 8083324:	e001      	b.n	808332a <mbedtls_asn1_get_bool+0x2e>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
        return( ret );

    if( len != 1 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 8083326:	f06f 0063 	mvn.w	r0, #99	; 0x63

    *val = ( **p != 0 ) ? 1 : 0;
    (*p)++;

    return( 0 );
}
 808332a:	b003      	add	sp, #12
 808332c:	bd30      	pop	{r4, r5, pc}

0808332e <mbedtls_asn1_get_int>:

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 808332e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8083330:	2302      	movs	r3, #2
}

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 8083332:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8083334:	aa01      	add	r2, sp, #4
}

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 8083336:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8083338:	f7ff ffcc 	bl	80832d4 <mbedtls_asn1_get_tag>
 808333c:	b9c8      	cbnz	r0, 8083372 <mbedtls_asn1_get_int+0x44>
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
 808333e:	9b01      	ldr	r3, [sp, #4]
 8083340:	3b01      	subs	r3, #1
 8083342:	2b03      	cmp	r3, #3
 8083344:	d813      	bhi.n	808336e <mbedtls_asn1_get_int+0x40>
 8083346:	6823      	ldr	r3, [r4, #0]
 8083348:	f993 3000 	ldrsb.w	r3, [r3]
 808334c:	2b00      	cmp	r3, #0
 808334e:	db0e      	blt.n	808336e <mbedtls_asn1_get_int+0x40>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;
 8083350:	6028      	str	r0, [r5, #0]

    while( len-- > 0 )
 8083352:	9801      	ldr	r0, [sp, #4]
 8083354:	1e43      	subs	r3, r0, #1
 8083356:	9301      	str	r3, [sp, #4]
 8083358:	b158      	cbz	r0, 8083372 <mbedtls_asn1_get_int+0x44>
    {
        *val = ( *val << 8 ) | **p;
 808335a:	6823      	ldr	r3, [r4, #0]
 808335c:	682a      	ldr	r2, [r5, #0]
 808335e:	781b      	ldrb	r3, [r3, #0]
 8083360:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8083364:	602b      	str	r3, [r5, #0]
        (*p)++;
 8083366:	6823      	ldr	r3, [r4, #0]
 8083368:	3301      	adds	r3, #1
 808336a:	6023      	str	r3, [r4, #0]
    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;

    while( len-- > 0 )
 808336c:	e7f1      	b.n	8083352 <mbedtls_asn1_get_int+0x24>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 808336e:	f06f 0063 	mvn.w	r0, #99	; 0x63
        *val = ( *val << 8 ) | **p;
        (*p)++;
    }

    return( 0 );
}
 8083372:	b003      	add	sp, #12
 8083374:	bd30      	pop	{r4, r5, pc}

08083376 <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
 8083376:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8083378:	2302      	movs	r3, #2

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
 808337a:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 808337c:	aa01      	add	r2, sp, #4

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
 808337e:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8083380:	f7ff ffa8 	bl	80832d4 <mbedtls_asn1_get_tag>
 8083384:	b940      	cbnz	r0, 8083398 <mbedtls_asn1_get_mpi+0x22>
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
 8083386:	9a01      	ldr	r2, [sp, #4]
 8083388:	6821      	ldr	r1, [r4, #0]
 808338a:	4628      	mov	r0, r5
 808338c:	f007 fda3 	bl	808aed6 <mbedtls_mpi_read_binary>

    *p += len;
 8083390:	6822      	ldr	r2, [r4, #0]
 8083392:	9b01      	ldr	r3, [sp, #4]
 8083394:	4413      	add	r3, r2
 8083396:	6023      	str	r3, [r4, #0]

    return( ret );
}
 8083398:	b003      	add	sp, #12
 808339a:	bd30      	pop	{r4, r5, pc}

0808339c <mbedtls_asn1_get_bitstring>:
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
 808339c:	b570      	push	{r4, r5, r6, lr}
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 808339e:	2303      	movs	r3, #3
}
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
 80833a0:	4604      	mov	r4, r0
 80833a2:	460e      	mov	r6, r1
 80833a4:	4615      	mov	r5, r2
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 80833a6:	f7ff ff95 	bl	80832d4 <mbedtls_asn1_get_tag>
 80833aa:	b9d8      	cbnz	r0, 80833e4 <mbedtls_asn1_get_bitstring+0x48>
        return( ret );

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
 80833ac:	6813      	ldr	r3, [r2, #0]
 80833ae:	b1a3      	cbz	r3, 80833da <mbedtls_asn1_get_bitstring+0x3e>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    bs->len -= 1;
 80833b0:	3b01      	subs	r3, #1
 80833b2:	6013      	str	r3, [r2, #0]

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
 80833b4:	6823      	ldr	r3, [r4, #0]
 80833b6:	781b      	ldrb	r3, [r3, #0]
    if( bs->unused_bits > 7 )
 80833b8:	2b07      	cmp	r3, #7
    if( bs->len < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    bs->len -= 1;

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
 80833ba:	7113      	strb	r3, [r2, #4]
    if( bs->unused_bits > 7 )
 80833bc:	d810      	bhi.n	80833e0 <mbedtls_asn1_get_bitstring+0x44>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    (*p)++;
 80833be:	6823      	ldr	r3, [r4, #0]
 80833c0:	3301      	adds	r3, #1
 80833c2:	6023      	str	r3, [r4, #0]

    /* Get actual bitstring */
    bs->p = *p;
 80833c4:	6093      	str	r3, [r2, #8]
    *p += bs->len;
 80833c6:	6822      	ldr	r2, [r4, #0]
 80833c8:	682b      	ldr	r3, [r5, #0]
 80833ca:	4413      	add	r3, r2

    if( *p != end )
 80833cc:	429e      	cmp	r6, r3
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    (*p)++;

    /* Get actual bitstring */
    bs->p = *p;
    *p += bs->len;
 80833ce:	6023      	str	r3, [r4, #0]

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 80833d0:	bf14      	ite	ne
 80833d2:	f06f 0065 	mvnne.w	r0, #101	; 0x65
 80833d6:	2000      	moveq	r0, #0
 80833d8:	bd70      	pop	{r4, r5, r6, pc}
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
        return( ret );

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80833da:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 80833de:	bd70      	pop	{r4, r5, r6, pc}
    bs->len -= 1;

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
    if( bs->unused_bits > 7 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 80833e0:	f06f 0063 	mvn.w	r0, #99	; 0x63

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 80833e4:	bd70      	pop	{r4, r5, r6, pc}

080833e6 <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
 80833e6:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 80833e8:	2303      	movs	r3, #3
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
 80833ea:	4604      	mov	r4, r0
 80833ec:	4615      	mov	r5, r2
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 80833ee:	f7ff ff71 	bl	80832d4 <mbedtls_asn1_get_tag>
 80833f2:	b958      	cbnz	r0, 808340c <mbedtls_asn1_get_bitstring_null+0x26>
        return( ret );

    if( (*len)-- < 2 || *(*p)++ != 0 )
 80833f4:	6813      	ldr	r3, [r2, #0]
 80833f6:	1e5a      	subs	r2, r3, #1
 80833f8:	2b01      	cmp	r3, #1
 80833fa:	602a      	str	r2, [r5, #0]
 80833fc:	d904      	bls.n	8083408 <mbedtls_asn1_get_bitstring_null+0x22>
 80833fe:	6823      	ldr	r3, [r4, #0]
 8083400:	1c5a      	adds	r2, r3, #1
 8083402:	6022      	str	r2, [r4, #0]
 8083404:	7818      	ldrb	r0, [r3, #0]
 8083406:	b108      	cbz	r0, 808340c <mbedtls_asn1_get_bitstring_null+0x26>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 8083408:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
 808340c:	bd38      	pop	{r3, r4, r5, pc}

0808340e <mbedtls_asn1_get_sequence_of>:
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
 808340e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8083412:	4615      	mov	r5, r2
 8083414:	461f      	mov	r7, r3
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8083416:	aa01      	add	r2, sp, #4
 8083418:	2330      	movs	r3, #48	; 0x30
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
 808341a:	4604      	mov	r4, r0
 808341c:	460e      	mov	r6, r1
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 808341e:	f7ff ff59 	bl	80832d4 <mbedtls_asn1_get_tag>
 8083422:	bb68      	cbnz	r0, 8083480 <mbedtls_asn1_get_sequence_of+0x72>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( *p + len != end )
 8083424:	6822      	ldr	r2, [r4, #0]
 8083426:	9b01      	ldr	r3, [sp, #4]
 8083428:	4413      	add	r3, r2
 808342a:	429e      	cmp	r6, r3
 808342c:	d01d      	beq.n	808346a <mbedtls_asn1_get_sequence_of+0x5c>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 808342e:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8083432:	e025      	b.n	8083480 <mbedtls_asn1_get_sequence_of+0x72>

    while( *p < end )
 8083434:	6823      	ldr	r3, [r4, #0]
 8083436:	429e      	cmp	r6, r3
 8083438:	d91a      	bls.n	8083470 <mbedtls_asn1_get_sequence_of+0x62>
    {
        buf = &(cur->buf);
        buf->tag = **p;
 808343a:	781b      	ldrb	r3, [r3, #0]

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 808343c:	4642      	mov	r2, r8
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    while( *p < end )
    {
        buf = &(cur->buf);
        buf->tag = **p;
 808343e:	602b      	str	r3, [r5, #0]

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 8083440:	4631      	mov	r1, r6
 8083442:	463b      	mov	r3, r7
 8083444:	4620      	mov	r0, r4
 8083446:	f7ff ff45 	bl	80832d4 <mbedtls_asn1_get_tag>
 808344a:	b9c8      	cbnz	r0, 8083480 <mbedtls_asn1_get_sequence_of+0x72>
            return( ret );

        buf->p = *p;
 808344c:	6823      	ldr	r3, [r4, #0]
 808344e:	60ab      	str	r3, [r5, #8]
        *p += buf->len;
 8083450:	6822      	ldr	r2, [r4, #0]
 8083452:	686b      	ldr	r3, [r5, #4]
 8083454:	4413      	add	r3, r2

        /* Allocate and assign next pointer */
        if( *p < end )
 8083456:	429e      	cmp	r6, r3

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
            return( ret );

        buf->p = *p;
        *p += buf->len;
 8083458:	6023      	str	r3, [r4, #0]

        /* Allocate and assign next pointer */
        if( *p < end )
 808345a:	d9eb      	bls.n	8083434 <mbedtls_asn1_get_sequence_of+0x26>
        {
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
 808345c:	2110      	movs	r1, #16
 808345e:	2001      	movs	r0, #1
 8083460:	f010 fc58 	bl	8093d14 <calloc>
                                            sizeof( mbedtls_asn1_sequence ) );
 8083464:	60e8      	str	r0, [r5, #12]

            if( cur->next == NULL )
 8083466:	b148      	cbz	r0, 808347c <mbedtls_asn1_get_sequence_of+0x6e>
 8083468:	4605      	mov	r5, r0
    while( *p < end )
    {
        buf = &(cur->buf);
        buf->tag = **p;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 808346a:	f105 0804 	add.w	r8, r5, #4
 808346e:	e7e1      	b.n	8083434 <mbedtls_asn1_get_sequence_of+0x26>
            cur = cur->next;
        }
    }

    /* Set final sequence entry's next pointer to NULL */
    cur->next = NULL;
 8083470:	2000      	movs	r0, #0
 8083472:	60e8      	str	r0, [r5, #12]

    if( *p != end )
 8083474:	6823      	ldr	r3, [r4, #0]
 8083476:	429e      	cmp	r6, r3
 8083478:	d002      	beq.n	8083480 <mbedtls_asn1_get_sequence_of+0x72>
 808347a:	e7d8      	b.n	808342e <mbedtls_asn1_get_sequence_of+0x20>
        {
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
                                            sizeof( mbedtls_asn1_sequence ) );

            if( cur->next == NULL )
                return( MBEDTLS_ERR_ASN1_ALLOC_FAILED );
 808347c:	f06f 0069 	mvn.w	r0, #105	; 0x69

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 8083480:	b002      	add	sp, #8
 8083482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08083486 <mbedtls_asn1_get_alg>:

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
 8083486:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8083488:	4617      	mov	r7, r2
 808348a:	461d      	mov	r5, r3
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 808348c:	aa01      	add	r2, sp, #4
 808348e:	2330      	movs	r3, #48	; 0x30
}

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
 8083490:	4604      	mov	r4, r0
 8083492:	460e      	mov	r6, r1
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8083494:	f7ff ff1e 	bl	80832d4 <mbedtls_asn1_get_tag>
 8083498:	2800      	cmp	r0, #0
 808349a:	d13a      	bne.n	8083512 <mbedtls_asn1_get_alg+0x8c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
 808349c:	6823      	ldr	r3, [r4, #0]
 808349e:	1af6      	subs	r6, r6, r3
 80834a0:	2e00      	cmp	r6, #0
 80834a2:	dd31      	ble.n	8083508 <mbedtls_asn1_get_alg+0x82>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
 80834a4:	463a      	mov	r2, r7
 80834a6:	781b      	ldrb	r3, [r3, #0]
    end = *p + len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
 80834a8:	4620      	mov	r0, r4
        return( ret );

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
 80834aa:	f842 3b04 	str.w	r3, [r2], #4
    end = *p + len;
 80834ae:	6826      	ldr	r6, [r4, #0]
 80834b0:	9b01      	ldr	r3, [sp, #4]
 80834b2:	441e      	add	r6, r3

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
 80834b4:	4631      	mov	r1, r6
 80834b6:	2306      	movs	r3, #6
 80834b8:	f7ff ff0c 	bl	80832d4 <mbedtls_asn1_get_tag>
 80834bc:	bb48      	cbnz	r0, 8083512 <mbedtls_asn1_get_alg+0x8c>
        return( ret );

    alg->p = *p;
 80834be:	6823      	ldr	r3, [r4, #0]
 80834c0:	60bb      	str	r3, [r7, #8]
    *p += alg->len;
 80834c2:	6822      	ldr	r2, [r4, #0]
 80834c4:	687b      	ldr	r3, [r7, #4]
 80834c6:	18d1      	adds	r1, r2, r3

    if( *p == end )
 80834c8:	428e      	cmp	r6, r1

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( ret );

    alg->p = *p;
    *p += alg->len;
 80834ca:	6021      	str	r1, [r4, #0]

    if( *p == end )
 80834cc:	d106      	bne.n	80834dc <mbedtls_asn1_get_alg+0x56>
 80834ce:	f105 030c 	add.w	r3, r5, #12
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 80834d2:	429d      	cmp	r5, r3
 80834d4:	d016      	beq.n	8083504 <mbedtls_asn1_get_alg+0x7e>
 80834d6:	7028      	strb	r0, [r5, #0]
 80834d8:	3501      	adds	r5, #1
 80834da:	e7fa      	b.n	80834d2 <mbedtls_asn1_get_alg+0x4c>
    {
        mbedtls_zeroize( params, sizeof(mbedtls_asn1_buf) );
        return( 0 );
    }

    params->tag = **p;
 80834dc:	5cd3      	ldrb	r3, [r2, r3]
 80834de:	462a      	mov	r2, r5
 80834e0:	f842 3b04 	str.w	r3, [r2], #4
    (*p)++;
 80834e4:	6823      	ldr	r3, [r4, #0]

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 80834e6:	4631      	mov	r1, r6
        mbedtls_zeroize( params, sizeof(mbedtls_asn1_buf) );
        return( 0 );
    }

    params->tag = **p;
    (*p)++;
 80834e8:	3301      	adds	r3, #1
 80834ea:	6023      	str	r3, [r4, #0]

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 80834ec:	4620      	mov	r0, r4
 80834ee:	f7ff fe9f 	bl	8083230 <mbedtls_asn1_get_len>
 80834f2:	b970      	cbnz	r0, 8083512 <mbedtls_asn1_get_alg+0x8c>
        return( ret );

    params->p = *p;
 80834f4:	6823      	ldr	r3, [r4, #0]
 80834f6:	60ab      	str	r3, [r5, #8]
    *p += params->len;
 80834f8:	6822      	ldr	r2, [r4, #0]
 80834fa:	686b      	ldr	r3, [r5, #4]
 80834fc:	4413      	add	r3, r2

    if( *p != end )
 80834fe:	429e      	cmp	r6, r3

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
        return( ret );

    params->p = *p;
    *p += params->len;
 8083500:	6023      	str	r3, [r4, #0]

    if( *p != end )
 8083502:	d104      	bne.n	808350e <mbedtls_asn1_get_alg+0x88>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 8083504:	2000      	movs	r0, #0
 8083506:	e004      	b.n	8083512 <mbedtls_asn1_get_alg+0x8c>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8083508:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 808350c:	e001      	b.n	8083512 <mbedtls_asn1_get_alg+0x8c>

    params->p = *p;
    *p += params->len;

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 808350e:	f06f 0065 	mvn.w	r0, #101	; 0x65

    return( 0 );
}
 8083512:	b003      	add	sp, #12
 8083514:	bdf0      	pop	{r4, r5, r6, r7, pc}

08083516 <mbedtls_asn1_get_alg_null>:

int mbedtls_asn1_get_alg_null( unsigned char **p,
                       const unsigned char *end,
                       mbedtls_asn1_buf *alg )
{
 8083516:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int ret;
    mbedtls_asn1_buf params;

    memset( &params, 0, sizeof(mbedtls_asn1_buf) );
 8083518:	2300      	movs	r3, #0
 808351a:	9301      	str	r3, [sp, #4]
 808351c:	9302      	str	r3, [sp, #8]
 808351e:	9303      	str	r3, [sp, #12]

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, &params ) ) != 0 )
 8083520:	ab01      	add	r3, sp, #4
 8083522:	f7ff ffb0 	bl	8083486 <mbedtls_asn1_get_alg>
 8083526:	b960      	cbnz	r0, 8083542 <mbedtls_asn1_get_alg_null+0x2c>
        return( ret );

    if( ( params.tag != MBEDTLS_ASN1_NULL && params.tag != 0 ) || params.len != 0 )
 8083528:	9b01      	ldr	r3, [sp, #4]
 808352a:	2b05      	cmp	r3, #5
 808352c:	d000      	beq.n	8083530 <mbedtls_asn1_get_alg_null+0x1a>
 808352e:	b933      	cbnz	r3, 808353e <mbedtls_asn1_get_alg_null+0x28>
 8083530:	9b02      	ldr	r3, [sp, #8]
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );

    return( 0 );
 8083532:	2b00      	cmp	r3, #0
 8083534:	bf14      	ite	ne
 8083536:	f06f 0067 	mvnne.w	r0, #103	; 0x67
 808353a:	2000      	moveq	r0, #0
 808353c:	e001      	b.n	8083542 <mbedtls_asn1_get_alg_null+0x2c>

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, &params ) ) != 0 )
        return( ret );

    if( ( params.tag != MBEDTLS_ASN1_NULL && params.tag != 0 ) || params.len != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 808353e:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
 8083542:	b005      	add	sp, #20
 8083544:	f85d fb04 	ldr.w	pc, [sp], #4

08083548 <_ZL17sha1_process_wrapPvPKh>:
}

static int sha1_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha1_process( (mbedtls_sha1_context *) ctx,
                                           data ) );
 8083548:	f001 bbee 	b.w	8084d28 <mbedtls_internal_sha1_process>

0808354c <_ZL15sha1_clone_wrapPvPKv>:
}

static void sha1_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha1_clone( (mbedtls_sha1_context *) dst,
                  (const mbedtls_sha1_context *) src );
 808354c:	f001 bbcc 	b.w	8084ce8 <mbedtls_sha1_clone>

08083550 <_ZL13sha1_ctx_freePv>:
}

static void sha1_ctx_free( void *ctx )
{
 8083550:	b510      	push	{r4, lr}
 8083552:	4604      	mov	r4, r0
    mbedtls_sha1_free( (mbedtls_sha1_context *) ctx );
 8083554:	f001 fbbe 	bl	8084cd4 <mbedtls_sha1_free>
    mbedtls_free( ctx );
 8083558:	4620      	mov	r0, r4
}
 808355a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha1_ctx_free( void *ctx )
{
    mbedtls_sha1_free( (mbedtls_sha1_context *) ctx );
    mbedtls_free( ctx );
 808355e:	f00d bdfb 	b.w	8091158 <free>

08083562 <_ZL14sha1_ctx_allocv>:
{
    return( mbedtls_sha1_finish_ret( (mbedtls_sha1_context *) ctx, output ) );
}

static void *sha1_ctx_alloc( void )
{
 8083562:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha1_context ) );
 8083564:	215c      	movs	r1, #92	; 0x5c
 8083566:	2001      	movs	r0, #1
 8083568:	f010 fbd4 	bl	8093d14 <calloc>

    if( ctx != NULL )
 808356c:	4604      	mov	r4, r0
 808356e:	b108      	cbz	r0, 8083574 <_ZL14sha1_ctx_allocv+0x12>
        mbedtls_sha1_init( (mbedtls_sha1_context *) ctx );
 8083570:	f001 fbac 	bl	8084ccc <mbedtls_sha1_init>

    return( ctx );
}
 8083574:	4620      	mov	r0, r4
 8083576:	bd10      	pop	{r4, pc}

08083578 <_ZL16sha1_finish_wrapPvPh>:
                                     input, ilen ) );
}

static int sha1_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha1_finish_ret( (mbedtls_sha1_context *) ctx, output ) );
 8083578:	f002 bbc2 	b.w	8085d00 <mbedtls_sha1_finish_ret>

0808357c <_ZL16sha1_update_wrapPvPKhj>:

static int sha1_update_wrap( void *ctx, const unsigned char *input,
                              size_t ilen )
{
    return( mbedtls_sha1_update_ret( (mbedtls_sha1_context *) ctx,
                                     input, ilen ) );
 808357c:	f002 bb86 	b.w	8085c8c <mbedtls_sha1_update_ret>

08083580 <_ZL16sha1_starts_wrapPv>:

#if defined(MBEDTLS_SHA1_C)

static int sha1_starts_wrap( void *ctx )
{
    return( mbedtls_sha1_starts_ret( (mbedtls_sha1_context *) ctx ) );
 8083580:	f001 bbb8 	b.w	8084cf4 <mbedtls_sha1_starts_ret>

08083584 <_ZL19sha224_process_wrapPvPKh>:
}

static int sha224_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha256_process( (mbedtls_sha256_context *) ctx,
                                             data ) );
 8083584:	f7fe bd2c 	b.w	8081fe0 <mbedtls_internal_sha256_process>

08083588 <_ZL17sha224_clone_wrapPvPKv>:
}

static void sha224_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
                    (const mbedtls_sha256_context *) src );
 8083588:	f7fe bcd4 	b.w	8081f34 <mbedtls_sha256_clone>

0808358c <_ZL15sha224_ctx_freePv>:

    return( ctx );
}

static void sha224_ctx_free( void *ctx )
{
 808358c:	b510      	push	{r4, lr}
 808358e:	4604      	mov	r4, r0
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
 8083590:	f7fe fcc6 	bl	8081f20 <mbedtls_sha256_free>
    mbedtls_free( ctx );
 8083594:	4620      	mov	r0, r4
}
 8083596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha224_ctx_free( void *ctx )
{
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
    mbedtls_free( ctx );
 808359a:	f00d bddd 	b.w	8091158 <free>

0808359e <_ZL16sha224_ctx_allocv>:
{
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
}

static void *sha224_ctx_alloc( void )
{
 808359e:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
 80835a0:	216c      	movs	r1, #108	; 0x6c
 80835a2:	2001      	movs	r0, #1
 80835a4:	f010 fbb6 	bl	8093d14 <calloc>

    if( ctx != NULL )
 80835a8:	4604      	mov	r4, r0
 80835aa:	b108      	cbz	r0, 80835b0 <_ZL16sha224_ctx_allocv+0x12>
        mbedtls_sha256_init( (mbedtls_sha256_context *) ctx );
 80835ac:	f7fe fcb4 	bl	8081f18 <mbedtls_sha256_init>

    return( ctx );
}
 80835b0:	4620      	mov	r0, r4
 80835b2:	bd10      	pop	{r4, pc}

080835b4 <_ZL11sha224_wrapPKhjPh>:
}

static int sha224_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
 80835b4:	2301      	movs	r3, #1
 80835b6:	f7ff b94e 	b.w	8082856 <mbedtls_sha256_ret>

080835ba <_ZL11sha256_wrapPKhjPh>:
}

static int sha256_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 0 ) );
 80835ba:	2300      	movs	r3, #0
 80835bc:	f7ff b94b 	b.w	8082856 <mbedtls_sha256_ret>

080835c0 <_ZL18sha224_finish_wrapPvPh>:
}

static int sha224_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha256_finish_ret( (mbedtls_sha256_context *) ctx,
                                       output ) );
 80835c0:	f7ff b8b2 	b.w	8082728 <mbedtls_sha256_finish_ret>

080835c4 <_ZL18sha224_update_wrapPvPKhj>:

static int sha224_update_wrap( void *ctx, const unsigned char *input,
                                size_t ilen )
{
    return( mbedtls_sha256_update_ret( (mbedtls_sha256_context *) ctx,
                                       input, ilen ) );
 80835c4:	f7ff b876 	b.w	80826b4 <mbedtls_sha256_update_ret>

080835c8 <_ZL18sha224_starts_wrapPv>:
 */
#if defined(MBEDTLS_SHA256_C)

static int sha224_starts_wrap( void *ctx )
{
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 1 ) );
 80835c8:	2101      	movs	r1, #1
 80835ca:	f7fe bcb9 	b.w	8081f40 <mbedtls_sha256_starts_ret>

080835ce <_ZL18sha256_starts_wrapPv>:
    sha224_process_wrap,
};

static int sha256_starts_wrap( void *ctx )
{
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 0 ) );
 80835ce:	2100      	movs	r1, #0
 80835d0:	f7fe bcb6 	b.w	8081f40 <mbedtls_sha256_starts_ret>

080835d4 <_ZL19sha384_process_wrapPvPKh>:
}

static int sha384_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha512_process( (mbedtls_sha512_context *) ctx,
                                             data ) );
 80835d4:	f00a b824 	b.w	808d620 <mbedtls_internal_sha512_process>

080835d8 <_ZL17sha384_clone_wrapPvPKv>:
}

static void sha384_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha512_clone( (mbedtls_sha512_context *) dst,
                    (const mbedtls_sha512_context *) src );
 80835d8:	f009 bf80 	b.w	808d4dc <mbedtls_sha512_clone>

080835dc <_ZL15sha384_ctx_freePv>:

    return( ctx );
}

static void sha384_ctx_free( void *ctx )
{
 80835dc:	b510      	push	{r4, lr}
 80835de:	4604      	mov	r4, r0
    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );
 80835e0:	f009 ff72 	bl	808d4c8 <mbedtls_sha512_free>
    mbedtls_free( ctx );
 80835e4:	4620      	mov	r0, r4
}
 80835e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha384_ctx_free( void *ctx )
{
    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );
    mbedtls_free( ctx );
 80835ea:	f00d bdb5 	b.w	8091158 <free>

080835ee <_ZL16sha384_ctx_allocv>:
{
    return( mbedtls_sha512_ret( input, ilen, output, 1 ) );
}

static void *sha384_ctx_alloc( void )
{
 80835ee:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha512_context ) );
 80835f0:	21d8      	movs	r1, #216	; 0xd8
 80835f2:	2001      	movs	r0, #1
 80835f4:	f010 fb8e 	bl	8093d14 <calloc>

    if( ctx != NULL )
 80835f8:	4604      	mov	r4, r0
 80835fa:	b108      	cbz	r0, 8083600 <_ZL16sha384_ctx_allocv+0x12>
        mbedtls_sha512_init( (mbedtls_sha512_context *) ctx );
 80835fc:	f009 ff60 	bl	808d4c0 <mbedtls_sha512_init>

    return( ctx );
}
 8083600:	4620      	mov	r0, r4
 8083602:	bd10      	pop	{r4, pc}

08083604 <_ZL11sha384_wrapPKhjPh>:
}

static int sha384_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha512_ret( input, ilen, output, 1 ) );
 8083604:	2301      	movs	r3, #1
 8083606:	f00a bfc6 	b.w	808e596 <mbedtls_sha512_ret>

0808360a <_ZL11sha512_wrapPKhjPh>:
}

static int sha512_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha512_ret( input, ilen, output, 0 ) );
 808360a:	2300      	movs	r3, #0
 808360c:	f00a bfc3 	b.w	808e596 <mbedtls_sha512_ret>

08083610 <_ZL18sha384_finish_wrapPvPh>:
}

static int sha384_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha512_finish_ret( (mbedtls_sha512_context *) ctx,
                                       output ) );
 8083610:	f00a be8e 	b.w	808e330 <mbedtls_sha512_finish_ret>

08083614 <_ZL18sha384_update_wrapPvPKhj>:

static int sha384_update_wrap( void *ctx, const unsigned char *input,
                               size_t ilen )
{
    return( mbedtls_sha512_update_ret( (mbedtls_sha512_context *) ctx,
                                       input, ilen ) );
 8083614:	f00a be44 	b.w	808e2a0 <mbedtls_sha512_update_ret>

08083618 <_ZL18sha384_starts_wrapPv>:

#if defined(MBEDTLS_SHA512_C)

static int sha384_starts_wrap( void *ctx )
{
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 1 ) );
 8083618:	2101      	movs	r1, #1
 808361a:	f009 bf65 	b.w	808d4e8 <mbedtls_sha512_starts_ret>

0808361e <_ZL18sha512_starts_wrapPv>:
    sha384_process_wrap,
};

static int sha512_starts_wrap( void *ctx )
{
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 0 ) );
 808361e:	2100      	movs	r1, #0
 8083620:	f009 bf62 	b.w	808d4e8 <mbedtls_sha512_starts_ret>

08083624 <_ZL15mbedtls_zeroizePvj>:
#endif

#if !defined(MBEDTLS_RSA_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 8083624:	4401      	add	r1, r0
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 8083626:	2300      	movs	r3, #0
 8083628:	4288      	cmp	r0, r1
 808362a:	d002      	beq.n	8083632 <_ZL15mbedtls_zeroizePvj+0xe>
 808362c:	7003      	strb	r3, [r0, #0]
 808362e:	3001      	adds	r0, #1
 8083630:	e7fa      	b.n	8083628 <_ZL15mbedtls_zeroizePvj+0x4>
 8083632:	4770      	bx	lr

08083634 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>:
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
 8083634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8083638:	b095      	sub	sp, #84	; 0x54
 808363a:	9d1e      	ldr	r5, [sp, #120]	; 0x78
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 808363c:	ae04      	add	r6, sp, #16
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
 808363e:	4607      	mov	r7, r0
 8083640:	460c      	mov	r4, r1
 8083642:	4691      	mov	r9, r2
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 8083644:	2100      	movs	r1, #0
 8083646:	2240      	movs	r2, #64	; 0x40
 8083648:	4630      	mov	r0, r6
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
 808364a:	9301      	str	r3, [sp, #4]
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
    memset( counter, 0, 4 );
 808364c:	f10d 0850 	add.w	r8, sp, #80	; 0x50
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 8083650:	f010 fcad 	bl	8093fae <memset>
    memset( counter, 0, 4 );
 8083654:	2300      	movs	r3, #0

    hlen = mbedtls_md_get_size( md_ctx->md_info );
 8083656:	6828      	ldr	r0, [r5, #0]
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
    memset( counter, 0, 4 );
 8083658:	f848 3d44 	str.w	r3, [r8, #-68]!

    hlen = mbedtls_md_get_size( md_ctx->md_info );
 808365c:	f004 f900 	bl	8087860 <mbedtls_md_get_size>
 8083660:	4682      	mov	sl, r0

    /* Generate and apply dbMask */
    p = dst;

    while( dlen > 0 )
 8083662:	b37c      	cbz	r4, 80836c4 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x90>
 8083664:	4554      	cmp	r4, sl
    {
        use_len = hlen;
        if( dlen < hlen )
            use_len = dlen;

        if( ( ret = mbedtls_md_starts( md_ctx ) ) != 0 )
 8083666:	4628      	mov	r0, r5
 8083668:	46a3      	mov	fp, r4
 808366a:	bf28      	it	cs
 808366c:	46d3      	movcs	fp, sl
 808366e:	f004 f807 	bl	8087680 <mbedtls_md_starts>
 8083672:	4602      	mov	r2, r0
 8083674:	bb38      	cbnz	r0, 80836c6 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
            goto exit;
        if( ( ret = mbedtls_md_update( md_ctx, src, slen ) ) != 0 )
 8083676:	9a01      	ldr	r2, [sp, #4]
 8083678:	4649      	mov	r1, r9
 808367a:	4628      	mov	r0, r5
 808367c:	f004 f80a 	bl	8087694 <mbedtls_md_update>
 8083680:	4602      	mov	r2, r0
 8083682:	bb00      	cbnz	r0, 80836c6 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
            goto exit;
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
 8083684:	2204      	movs	r2, #4
 8083686:	4641      	mov	r1, r8
 8083688:	4628      	mov	r0, r5
 808368a:	f004 f803 	bl	8087694 <mbedtls_md_update>
 808368e:	4602      	mov	r2, r0
 8083690:	b9c8      	cbnz	r0, 80836c6 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
            goto exit;
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
 8083692:	4631      	mov	r1, r6
 8083694:	4628      	mov	r0, r5
 8083696:	f004 f807 	bl	80876a8 <mbedtls_md_finish>
 808369a:	4602      	mov	r2, r0
 808369c:	b998      	cbnz	r0, 80836c6 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
 808369e:	463b      	mov	r3, r7
            goto exit;

        for( i = 0; i < use_len; ++i )
 80836a0:	455a      	cmp	r2, fp
 80836a2:	d007      	beq.n	80836b4 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x80>
            *p++ ^= mask[i];
 80836a4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80836a8:	5cb1      	ldrb	r1, [r6, r2]
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
            goto exit;
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
            goto exit;

        for( i = 0; i < use_len; ++i )
 80836aa:	3201      	adds	r2, #1
            *p++ ^= mask[i];
 80836ac:	4041      	eors	r1, r0
 80836ae:	f803 1c01 	strb.w	r1, [r3, #-1]
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
            goto exit;
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
            goto exit;

        for( i = 0; i < use_len; ++i )
 80836b2:	e7f5      	b.n	80836a0 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x6c>
            *p++ ^= mask[i];

        counter[3]++;
 80836b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80836b8:	4417      	add	r7, r2
 80836ba:	3301      	adds	r3, #1
 80836bc:	f88d 300f 	strb.w	r3, [sp, #15]

        dlen -= use_len;
 80836c0:	1aa4      	subs	r4, r4, r2
    hlen = mbedtls_md_get_size( md_ctx->md_info );

    /* Generate and apply dbMask */
    p = dst;

    while( dlen > 0 )
 80836c2:	e7ce      	b.n	8083662 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x2e>
 80836c4:	4622      	mov	r2, r4

        dlen -= use_len;
    }

exit:
    mbedtls_zeroize( mask, sizeof( mask ) );
 80836c6:	4630      	mov	r0, r6
 80836c8:	2140      	movs	r1, #64	; 0x40
 80836ca:	f7ff ffab 	bl	8083624 <_ZL15mbedtls_zeroizePvj>

    return( ret );
}
 80836ce:	4610      	mov	r0, r2
 80836d0:	b015      	add	sp, #84	; 0x54
 80836d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080836d8 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>:
static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
                                        unsigned int hashlen,
                                        const unsigned char *hash,
                                        size_t dst_len,
                                        unsigned char *dst )
{
 80836d8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80836dc:	461d      	mov	r5, r3
    size_t oid_size  = 0;
 80836de:	2300      	movs	r3, #0
static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
                                        unsigned int hashlen,
                                        const unsigned char *hash,
                                        size_t dst_len,
                                        unsigned char *dst )
{
 80836e0:	460e      	mov	r6, r1
 80836e2:	4691      	mov	r9, r2
 80836e4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    size_t oid_size  = 0;
 80836e8:	9300      	str	r3, [sp, #0]
    size_t nb_pad    = dst_len;
    unsigned char *p = dst;
    const char *oid  = NULL;
 80836ea:	9301      	str	r3, [sp, #4]

    /* Are we signing hashed or raw data? */
    if( md_alg != MBEDTLS_MD_NONE )
 80836ec:	4604      	mov	r4, r0
 80836ee:	b328      	cbz	r0, 808373c <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x64>
    {
        const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
 80836f0:	f003 ff72 	bl	80875d8 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 80836f4:	4606      	mov	r6, r0
 80836f6:	2800      	cmp	r0, #0
 80836f8:	d063      	beq.n	80837c2 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
 80836fa:	4620      	mov	r0, r4
 80836fc:	466a      	mov	r2, sp
 80836fe:	a901      	add	r1, sp, #4
 8083700:	f001 fa9a 	bl	8084c38 <mbedtls_oid_get_oid_by_md>
 8083704:	4604      	mov	r4, r0
 8083706:	2800      	cmp	r0, #0
 8083708:	d15b      	bne.n	80837c2 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
 808370a:	4630      	mov	r0, r6
 808370c:	f004 f8a8 	bl	8087860 <mbedtls_md_get_size>

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
 8083710:	9f00      	ldr	r7, [sp, #0]
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
 8083712:	4606      	mov	r6, r0

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
 8083714:	4407      	add	r7, r0
 8083716:	f107 0308 	add.w	r3, r7, #8
 808371a:	2b7f      	cmp	r3, #127	; 0x7f
 808371c:	d851      	bhi.n	80837c2 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
 808371e:	f110 020a 	adds.w	r2, r0, #10
 8083722:	d24e      	bcs.n	80837c2 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            10 + hashlen            <  hashlen      ||
            10 + hashlen + oid_size <  10 + hashlen )
 8083724:	f107 030a 	add.w	r3, r7, #10
        hashlen = mbedtls_md_get_size( md_info );

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
            10 + hashlen            <  hashlen      ||
 8083728:	429a      	cmp	r2, r3
 808372a:	d84a      	bhi.n	80837c2 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
         *   (Insist on 1-byte length encodings to protect against variants of
         *    Bleichenbacher's forgery attack against lax PKCS#1v1.5 verification)
         * - Need hashlen bytes for hash
         * - Need oid_size bytes for hash alg OID.
         */
        if( nb_pad < 10 + hashlen + oid_size )
 808372c:	429d      	cmp	r5, r3
 808372e:	d348      	bcc.n	80837c2 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
        nb_pad -= 10 + hashlen + oid_size;
 8083730:	f1a5 030a 	sub.w	r3, r5, #10
 8083734:	1bdf      	subs	r7, r3, r7
        nb_pad -= hashlen;
    }

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
 8083736:	2f0a      	cmp	r7, #10
 8083738:	d806      	bhi.n	8083748 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x70>
 808373a:	e042      	b.n	80837c2 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
        nb_pad -= 10 + hashlen + oid_size;
    }
    else
    {
        if( nb_pad < hashlen )
 808373c:	428d      	cmp	r5, r1
 808373e:	d340      	bcc.n	80837c2 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        nb_pad -= hashlen;
 8083740:	1a6d      	subs	r5, r5, r1
    }

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
 8083742:	2d0a      	cmp	r5, #10
 8083744:	d93d      	bls.n	80837c2 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
 8083746:	e03e      	b.n	80837c6 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xee>

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 8083748:	46c2      	mov	sl, r8

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    nb_pad -= 3;
 808374a:	3f03      	subs	r7, #3

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 808374c:	f80a 4b02 	strb.w	r4, [sl], #2
    *p++ = MBEDTLS_RSA_SIGN;
 8083750:	2301      	movs	r3, #1
    memset( p, 0xFF, nb_pad );
 8083752:	463a      	mov	r2, r7
    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
    *p++ = MBEDTLS_RSA_SIGN;
 8083754:	f888 3001 	strb.w	r3, [r8, #1]
    memset( p, 0xFF, nb_pad );
 8083758:	21ff      	movs	r1, #255	; 0xff
 808375a:	4650      	mov	r0, sl
 808375c:	f010 fc27 	bl	8093fae <memset>
    p += nb_pad;
 8083760:	eb0a 0307 	add.w	r3, sl, r7
     * Schematic:
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 8083764:	2130      	movs	r1, #48	; 0x30
    /* Write signature header and padding */
    *p++ = 0;
    *p++ = MBEDTLS_RSA_SIGN;
    memset( p, 0xFF, nb_pad );
    p += nb_pad;
    *p++ = 0;
 8083766:	f80a 4007 	strb.w	r4, [sl, r7]
     * Schematic:
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 808376a:	7059      	strb	r1, [r3, #1]
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
 808376c:	9f00      	ldr	r7, [sp, #0]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 808376e:	70d9      	strb	r1, [r3, #3]
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
 8083770:	f107 0208 	add.w	r2, r7, #8
 8083774:	4432      	add	r2, r6
 8083776:	709a      	strb	r2, [r3, #2]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x04 + oid_size );
 8083778:	b2fa      	uxtb	r2, r7
 808377a:	1d11      	adds	r1, r2, #4
    *p++ = MBEDTLS_ASN1_OID;
    *p++ = (unsigned char) oid_size;
 808377c:	f103 0a07 	add.w	sl, r3, #7
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x04 + oid_size );
 8083780:	7119      	strb	r1, [r3, #4]
    *p++ = MBEDTLS_ASN1_OID;
 8083782:	2106      	movs	r1, #6
 8083784:	7159      	strb	r1, [r3, #5]
    *p++ = (unsigned char) oid_size;
 8083786:	719a      	strb	r2, [r3, #6]
    memcpy( p, oid, oid_size );
 8083788:	9901      	ldr	r1, [sp, #4]
 808378a:	463a      	mov	r2, r7
 808378c:	4650      	mov	r0, sl
 808378e:	f010 fbe8 	bl	8093f62 <memcpy>
    p += oid_size;
    *p++ = MBEDTLS_ASN1_NULL;
 8083792:	2205      	movs	r2, #5
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x04 + oid_size );
    *p++ = MBEDTLS_ASN1_OID;
    *p++ = (unsigned char) oid_size;
    memcpy( p, oid, oid_size );
    p += oid_size;
 8083794:	eb0a 0307 	add.w	r3, sl, r7
    *p++ = MBEDTLS_ASN1_NULL;
 8083798:	f80a 2007 	strb.w	r2, [sl, r7]
    *p++ = 0x00;
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
 808379c:	2204      	movs	r2, #4
    *p++ = (unsigned char) hashlen;
 808379e:	189f      	adds	r7, r3, r2
    *p++ = (unsigned char) oid_size;
    memcpy( p, oid, oid_size );
    p += oid_size;
    *p++ = MBEDTLS_ASN1_NULL;
    *p++ = 0x00;
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
 80837a0:	709a      	strb	r2, [r3, #2]
    *p++ = (unsigned char) hashlen;
 80837a2:	70de      	strb	r6, [r3, #3]
    *p++ = MBEDTLS_ASN1_OID;
    *p++ = (unsigned char) oid_size;
    memcpy( p, oid, oid_size );
    p += oid_size;
    *p++ = MBEDTLS_ASN1_NULL;
    *p++ = 0x00;
 80837a4:	705c      	strb	r4, [r3, #1]
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
    *p++ = (unsigned char) hashlen;
    memcpy( p, hash, hashlen );
 80837a6:	4632      	mov	r2, r6
 80837a8:	4649      	mov	r1, r9
 80837aa:	4638      	mov	r0, r7
 80837ac:	f010 fbd9 	bl	8093f62 <memcpy>
    p += hashlen;

    /* Just a sanity-check, should be automatic
     * after the initial bounds check. */
    if( p != dst + dst_len )
 80837b0:	443e      	add	r6, r7
 80837b2:	eb08 0305 	add.w	r3, r8, r5
 80837b6:	429e      	cmp	r6, r3
 80837b8:	d019      	beq.n	80837ee <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x116>
    {
        mbedtls_zeroize( dst, dst_len );
 80837ba:	4629      	mov	r1, r5
 80837bc:	4640      	mov	r0, r8
 80837be:	f7ff ff31 	bl	8083624 <_ZL15mbedtls_zeroizePvj>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80837c2:	4c0d      	ldr	r4, [pc, #52]	; (80837f8 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x120>)
 80837c4:	e013      	b.n	80837ee <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x116>

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 80837c6:	4643      	mov	r3, r8

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    nb_pad -= 3;
 80837c8:	1eef      	subs	r7, r5, #3

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 80837ca:	f803 0b02 	strb.w	r0, [r3], #2
    *p++ = MBEDTLS_RSA_SIGN;
 80837ce:	2201      	movs	r2, #1
 80837d0:	f888 2001 	strb.w	r2, [r8, #1]
    memset( p, 0xFF, nb_pad );
 80837d4:	21ff      	movs	r1, #255	; 0xff
 80837d6:	463a      	mov	r2, r7
 80837d8:	4618      	mov	r0, r3
 80837da:	f010 fbe8 	bl	8093fae <memset>
 80837de:	4603      	mov	r3, r0
    p += nb_pad;
    *p++ = 0;
 80837e0:	55c4      	strb	r4, [r0, r7]

    /* Are we signing raw data? */
    if( md_alg == MBEDTLS_MD_NONE )
    {
        memcpy( p, hash, hashlen );
 80837e2:	1ea8      	subs	r0, r5, #2
 80837e4:	4632      	mov	r2, r6
 80837e6:	4649      	mov	r1, r9
 80837e8:	4418      	add	r0, r3
 80837ea:	f010 fbba 	bl	8093f62 <memcpy>
        mbedtls_zeroize( dst, dst_len );
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }

    return( 0 );
}
 80837ee:	4620      	mov	r0, r4
 80837f0:	b002      	add	sp, #8
 80837f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80837f6:	bf00      	nop
 80837f8:	ffffbf80 	.word	0xffffbf80

080837fc <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>:
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 80837fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 80837fe:	f100 0508 	add.w	r5, r0, #8
 8083802:	6847      	ldr	r7, [r0, #4]
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 8083804:	4604      	mov	r4, r0
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 8083806:	4628      	mov	r0, r5
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 8083808:	460e      	mov	r6, r1
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 808380a:	f007 fb5e 	bl	808aeca <mbedtls_mpi_size>
 808380e:	4287      	cmp	r7, r0
 8083810:	d117      	bne.n	8083842 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
 8083812:	6863      	ldr	r3, [r4, #4]
 8083814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8083818:	d813      	bhi.n	8083842 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 808381a:	2100      	movs	r1, #0
 808381c:	4628      	mov	r0, r5
 808381e:	f007 fd25 	bl	808b26c <mbedtls_mpi_cmp_int>
 8083822:	2800      	cmp	r0, #0
 8083824:	dd0d      	ble.n	8083842 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
 8083826:	2100      	movs	r1, #0
 8083828:	4628      	mov	r0, r5
 808382a:	f007 fb04 	bl	808ae36 <mbedtls_mpi_get_bit>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 808382e:	b140      	cbz	r0, 8083842 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
 8083830:	b1ee      	cbz	r6, 808386e <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x72>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 8083832:	f104 052c 	add.w	r5, r4, #44	; 0x2c
 8083836:	2100      	movs	r1, #0
 8083838:	4628      	mov	r0, r5
 808383a:	f007 fd17 	bl	808b26c <mbedtls_mpi_cmp_int>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
 808383e:	2800      	cmp	r0, #0
 8083840:	dc01      	bgt.n	8083846 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x4a>
    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8083842:	481a      	ldr	r0, [pc, #104]	; (80838ac <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0xb0>)
 8083844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 8083846:	2100      	movs	r1, #0
 8083848:	4628      	mov	r0, r5
 808384a:	f007 faf4 	bl	808ae36 <mbedtls_mpi_get_bit>
#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 808384e:	2800      	cmp	r0, #0
 8083850:	d0f7      	beq.n	8083842 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 8083852:	f104 0538 	add.w	r5, r4, #56	; 0x38
 8083856:	2100      	movs	r1, #0
 8083858:	4628      	mov	r0, r5
 808385a:	f007 fd07 	bl	808b26c <mbedtls_mpi_cmp_int>
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 808385e:	2800      	cmp	r0, #0
 8083860:	ddef      	ble.n	8083842 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
 8083862:	2100      	movs	r1, #0
 8083864:	4628      	mov	r0, r5
 8083866:	f007 fae6 	bl	808ae36 <mbedtls_mpi_get_bit>
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 808386a:	2800      	cmp	r0, #0
 808386c:	d0e9      	beq.n	8083842 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
 808386e:	2100      	movs	r1, #0
 8083870:	f104 0014 	add.w	r0, r4, #20
 8083874:	f007 fcfa 	bl	808b26c <mbedtls_mpi_cmp_int>
 8083878:	2800      	cmp	r0, #0
 808387a:	dde2      	ble.n	8083842 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
    /* For private key operations, use D or DP & DQ
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
 808387c:	b1a6      	cbz	r6, 80838a8 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0xac>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 808387e:	2100      	movs	r1, #0
 8083880:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8083884:	f007 fcf2 	bl	808b26c <mbedtls_mpi_cmp_int>
    /* For private key operations, use D or DP & DQ
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
 8083888:	2800      	cmp	r0, #0
 808388a:	ddda      	ble.n	8083842 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
 808388c:	2100      	movs	r1, #0
 808388e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8083892:	f007 fceb 	bl	808b26c <mbedtls_mpi_cmp_int>
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 8083896:	2800      	cmp	r0, #0
 8083898:	ddd3      	ble.n	8083842 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
 808389a:	2100      	movs	r1, #0
 808389c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80838a0:	f007 fce4 	bl	808b26c <mbedtls_mpi_cmp_int>
#endif

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
 80838a4:	2800      	cmp	r0, #0
 80838a6:	ddcc      	ble.n	8083842 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }
#endif

    return( 0 );
 80838a8:	2000      	movs	r0, #0
 80838aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80838ac:	ffffbf80 	.word	0xffffbf80

080838b0 <mbedtls_rsa_import_raw>:
                            unsigned char const *N, size_t N_len,
                            unsigned char const *P, size_t P_len,
                            unsigned char const *Q, size_t Q_len,
                            unsigned char const *D, size_t D_len,
                            unsigned char const *E, size_t E_len )
{
 80838b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80838b4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80838b6:	4604      	mov	r4, r0
 80838b8:	4698      	mov	r8, r3
 80838ba:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80838bc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    int ret = 0;

    if( N != NULL )
 80838be:	b149      	cbz	r1, 80838d4 <mbedtls_rsa_import_raw+0x24>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
 80838c0:	f100 0908 	add.w	r9, r0, #8
 80838c4:	4648      	mov	r0, r9
 80838c6:	f007 fb06 	bl	808aed6 <mbedtls_mpi_read_binary>
 80838ca:	bb50      	cbnz	r0, 8083922 <mbedtls_rsa_import_raw+0x72>
        ctx->len = mbedtls_mpi_size( &ctx->N );
 80838cc:	4648      	mov	r0, r9
 80838ce:	f007 fafc 	bl	808aeca <mbedtls_mpi_size>
 80838d2:	6060      	str	r0, [r4, #4]
    }

    if( P != NULL )
 80838d4:	f1b8 0f00 	cmp.w	r8, #0
 80838d8:	d101      	bne.n	80838de <mbedtls_rsa_import_raw+0x2e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );

    if( Q != NULL )
 80838da:	b947      	cbnz	r7, 80838ee <mbedtls_rsa_import_raw+0x3e>
 80838dc:	e00e      	b.n	80838fc <mbedtls_rsa_import_raw+0x4c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
        ctx->len = mbedtls_mpi_size( &ctx->N );
    }

    if( P != NULL )
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );
 80838de:	9a08      	ldr	r2, [sp, #32]
 80838e0:	4641      	mov	r1, r8
 80838e2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80838e6:	f007 faf6 	bl	808aed6 <mbedtls_mpi_read_binary>
 80838ea:	b9d0      	cbnz	r0, 8083922 <mbedtls_rsa_import_raw+0x72>
 80838ec:	e7f5      	b.n	80838da <mbedtls_rsa_import_raw+0x2a>

    if( Q != NULL )
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->Q, Q, Q_len ) );
 80838ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80838f0:	4639      	mov	r1, r7
 80838f2:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80838f6:	f007 faee 	bl	808aed6 <mbedtls_mpi_read_binary>
 80838fa:	b990      	cbnz	r0, 8083922 <mbedtls_rsa_import_raw+0x72>

    if( D != NULL )
 80838fc:	b136      	cbz	r6, 808390c <mbedtls_rsa_import_raw+0x5c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->D, D, D_len ) );
 80838fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8083900:	4631      	mov	r1, r6
 8083902:	f104 0020 	add.w	r0, r4, #32
 8083906:	f007 fae6 	bl	808aed6 <mbedtls_mpi_read_binary>
 808390a:	b950      	cbnz	r0, 8083922 <mbedtls_rsa_import_raw+0x72>

    if( E != NULL )
 808390c:	b135      	cbz	r5, 808391c <mbedtls_rsa_import_raw+0x6c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );
 808390e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8083910:	4629      	mov	r1, r5
 8083912:	f104 0014 	add.w	r0, r4, #20
 8083916:	f007 fade 	bl	808aed6 <mbedtls_mpi_read_binary>

cleanup:

    if( ret != 0 )
 808391a:	b910      	cbnz	r0, 8083922 <mbedtls_rsa_import_raw+0x72>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );

    return( 0 );
 808391c:	2000      	movs	r0, #0
 808391e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );

cleanup:

    if( ret != 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 8083922:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080

    return( 0 );
}
 8083926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0808392c <mbedtls_rsa_complete>:

    return( 0 );
}

int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
 808392c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 8083930:	f100 0b08 	add.w	fp, r0, #8

    return( 0 );
}

int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
 8083934:	b087      	sub	sp, #28
 8083936:	4607      	mov	r7, r0
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 8083938:	2100      	movs	r1, #0
 808393a:	4658      	mov	r0, fp
 808393c:	f007 fc96 	bl	808b26c <mbedtls_mpi_cmp_int>
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 8083940:	f107 092c 	add.w	r9, r7, #44	; 0x2c
 8083944:	2100      	movs	r1, #0

int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 8083946:	4680      	mov	r8, r0
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 8083948:	4648      	mov	r0, r9
 808394a:	f007 fc8f 	bl	808b26c <mbedtls_mpi_cmp_int>
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 808394e:	f107 0a38 	add.w	sl, r7, #56	; 0x38
int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 8083952:	9005      	str	r0, [sp, #20]
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 8083954:	2100      	movs	r1, #0
 8083956:	4650      	mov	r0, sl
 8083958:	f007 fc88 	bl	808b26c <mbedtls_mpi_cmp_int>
    const int have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 808395c:	f107 0320 	add.w	r3, r7, #32
 8083960:	2100      	movs	r1, #0
{
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 8083962:	4605      	mov	r5, r0
    const int have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 8083964:	4618      	mov	r0, r3
 8083966:	9302      	str	r3, [sp, #8]
 8083968:	f007 fc80 	bl	808b26c <mbedtls_mpi_cmp_int>
    const int have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
 808396c:	f107 0314 	add.w	r3, r7, #20
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
    const int have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 8083970:	9004      	str	r0, [sp, #16]
    const int have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
 8083972:	2100      	movs	r1, #0
 8083974:	4618      	mov	r0, r3
 8083976:	9303      	str	r3, [sp, #12]
 8083978:	f007 fc78 	bl	808b26c <mbedtls_mpi_cmp_int>
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 808397c:	9b05      	ldr	r3, [sp, #20]
 808397e:	9a04      	ldr	r2, [sp, #16]
 8083980:	b14b      	cbz	r3, 8083996 <mbedtls_rsa_complete+0x6a>
 8083982:	b125      	cbz	r5, 808398e <mbedtls_rsa_complete+0x62>
 8083984:	b12a      	cbz	r2, 8083992 <mbedtls_rsa_complete+0x66>
 8083986:	1c06      	adds	r6, r0, #0
 8083988:	bf18      	it	ne
 808398a:	2601      	movne	r6, #1
 808398c:	e013      	b.n	80839b6 <mbedtls_rsa_complete+0x8a>
 808398e:	462e      	mov	r6, r5
 8083990:	e011      	b.n	80839b6 <mbedtls_rsa_complete+0x8a>
 8083992:	4616      	mov	r6, r2
 8083994:	e00f      	b.n	80839b6 <mbedtls_rsa_complete+0x8a>
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 8083996:	f1b8 0f00 	cmp.w	r8, #0
 808399a:	d103      	bne.n	80839a4 <mbedtls_rsa_complete+0x78>
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 808399c:	4644      	mov	r4, r8
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 808399e:	4646      	mov	r6, r8
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
 80839a0:	2200      	movs	r2, #0
 80839a2:	e024      	b.n	80839ee <mbedtls_rsa_complete+0xc2>
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 80839a4:	b9cd      	cbnz	r5, 80839da <mbedtls_rsa_complete+0xae>
 80839a6:	b11a      	cbz	r2, 80839b0 <mbedtls_rsa_complete+0x84>
 80839a8:	b9f0      	cbnz	r0, 80839e8 <mbedtls_rsa_complete+0xbc>
 80839aa:	4606      	mov	r6, r0
 80839ac:	4604      	mov	r4, r0
 80839ae:	e00e      	b.n	80839ce <mbedtls_rsa_complete+0xa2>
 80839b0:	462e      	mov	r6, r5
 80839b2:	462c      	mov	r4, r5
 80839b4:	e00d      	b.n	80839d2 <mbedtls_rsa_complete+0xa6>
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 80839b6:	b1ad      	cbz	r5, 80839e4 <mbedtls_rsa_complete+0xb8>
 80839b8:	b992      	cbnz	r2, 80839e0 <mbedtls_rsa_complete+0xb4>
 80839ba:	1c04      	adds	r4, r0, #0
 80839bc:	bf18      	it	ne
 80839be:	2401      	movne	r4, #1
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
 80839c0:	f1b8 0f00 	cmp.w	r8, #0
 80839c4:	d0ec      	beq.n	80839a0 <mbedtls_rsa_complete+0x74>
 80839c6:	2b00      	cmp	r3, #0
 80839c8:	d1ea      	bne.n	80839a0 <mbedtls_rsa_complete+0x74>
 80839ca:	2d00      	cmp	r5, #0
 80839cc:	d1e8      	bne.n	80839a0 <mbedtls_rsa_complete+0x74>
 80839ce:	2a00      	cmp	r2, #0
 80839d0:	d1e6      	bne.n	80839a0 <mbedtls_rsa_complete+0x74>
 80839d2:	2800      	cmp	r0, #0
 80839d4:	d0e4      	beq.n	80839a0 <mbedtls_rsa_complete+0x74>
 80839d6:	2201      	movs	r2, #1
 80839d8:	e009      	b.n	80839ee <mbedtls_rsa_complete+0xc2>
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 80839da:	461c      	mov	r4, r3
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 80839dc:	461e      	mov	r6, r3
 80839de:	e7df      	b.n	80839a0 <mbedtls_rsa_complete+0x74>
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 80839e0:	2400      	movs	r4, #0
 80839e2:	e7ed      	b.n	80839c0 <mbedtls_rsa_complete+0x94>
 80839e4:	462c      	mov	r4, r5
 80839e6:	e7db      	b.n	80839a0 <mbedtls_rsa_complete+0x74>
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 80839e8:	2601      	movs	r6, #1
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 80839ea:	462c      	mov	r4, r5
 80839ec:	e002      	b.n	80839f4 <mbedtls_rsa_complete+0xc8>
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;

    /* These three alternatives are mutually exclusive */
    const int is_priv = n_missing || pq_missing || d_missing;
 80839ee:	2e00      	cmp	r6, #0
 80839f0:	d03d      	beq.n	8083a6e <mbedtls_rsa_complete+0x142>
 80839f2:	2600      	movs	r6, #0
 80839f4:	9404      	str	r4, [sp, #16]
 80839f6:	2401      	movs	r4, #1

    /*
     * Step 1: Deduce N if P, Q are provided.
     */

    if( !have_N && have_P && have_Q )
 80839f8:	f1b8 0f00 	cmp.w	r8, #0
 80839fc:	d10b      	bne.n	8083a16 <mbedtls_rsa_complete+0xea>
 80839fe:	b153      	cbz	r3, 8083a16 <mbedtls_rsa_complete+0xea>
 8083a00:	b14d      	cbz	r5, 8083a16 <mbedtls_rsa_complete+0xea>
    {
        if( ( ret = mbedtls_mpi_mul_mpi( &ctx->N, &ctx->P,
 8083a02:	4652      	mov	r2, sl
 8083a04:	4649      	mov	r1, r9
 8083a06:	4658      	mov	r0, fp
 8083a08:	f007 fd4f 	bl	808b4aa <mbedtls_mpi_mul_mpi>
 8083a0c:	bb28      	cbnz	r0, 8083a5a <mbedtls_rsa_complete+0x12e>
                                         &ctx->Q ) ) != 0 )
        {
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
        }

        ctx->len = mbedtls_mpi_size( &ctx->N );
 8083a0e:	4658      	mov	r0, fp
 8083a10:	f007 fa5b 	bl	808aeca <mbedtls_mpi_size>
 8083a14:	6078      	str	r0, [r7, #4]

    /*
     * Step 2: Deduce and verify all remaining core parameters.
     */

    if( pq_missing )
 8083a16:	b146      	cbz	r6, 8083a2a <mbedtls_rsa_complete+0xfe>
    {
        ret = mbedtls_rsa_deduce_primes( &ctx->N, &ctx->E, &ctx->D,
                                         &ctx->P, &ctx->Q );
 8083a18:	f8cd a000 	str.w	sl, [sp]
 8083a1c:	464b      	mov	r3, r9
 8083a1e:	9a02      	ldr	r2, [sp, #8]
 8083a20:	9903      	ldr	r1, [sp, #12]
 8083a22:	4658      	mov	r0, fp
 8083a24:	f00a fe88 	bl	808e738 <mbedtls_rsa_deduce_primes>
 8083a28:	e007      	b.n	8083a3a <mbedtls_rsa_complete+0x10e>
        if( ret != 0 )
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );

    }
    else if( d_missing )
 8083a2a:	9b04      	ldr	r3, [sp, #16]
 8083a2c:	b133      	cbz	r3, 8083a3c <mbedtls_rsa_complete+0x110>
    {
        if( ( ret = mbedtls_rsa_deduce_private_exponent( &ctx->P,
 8083a2e:	9b02      	ldr	r3, [sp, #8]
 8083a30:	9a03      	ldr	r2, [sp, #12]
 8083a32:	4651      	mov	r1, sl
 8083a34:	4648      	mov	r0, r9
 8083a36:	f00a ff7b 	bl	808e930 <mbedtls_rsa_deduce_private_exponent>
 8083a3a:	b970      	cbnz	r0, 8083a5a <mbedtls_rsa_complete+0x12e>
     * Step 3: Deduce all additional parameters specific
     *         to our current RSA implementation.
     */

#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv )
 8083a3c:	b184      	cbz	r4, 8083a60 <mbedtls_rsa_complete+0x134>
    {
        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
 8083a3e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
                                      &ctx->DP, &ctx->DQ, &ctx->QP );
 8083a42:	9301      	str	r3, [sp, #4]
     */

#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv )
    {
        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
 8083a44:	f107 0350 	add.w	r3, r7, #80	; 0x50
                                      &ctx->DP, &ctx->DQ, &ctx->QP );
 8083a48:	9300      	str	r3, [sp, #0]
 8083a4a:	9a02      	ldr	r2, [sp, #8]
 8083a4c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8083a50:	4651      	mov	r1, sl
 8083a52:	4648      	mov	r0, r9
 8083a54:	f00b f910 	bl	808ec78 <mbedtls_rsa_deduce_crt>
        if( ret != 0 )
 8083a58:	b110      	cbz	r0, 8083a60 <mbedtls_rsa_complete+0x134>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 8083a5a:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
 8083a5e:	e00c      	b.n	8083a7a <mbedtls_rsa_complete+0x14e>

    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
 8083a60:	4621      	mov	r1, r4
 8083a62:	4638      	mov	r0, r7
}
 8083a64:	b007      	add	sp, #28
 8083a66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
 8083a6a:	f7ff bec7 	b.w	80837fc <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;

    /* These three alternatives are mutually exclusive */
    const int is_priv = n_missing || pq_missing || d_missing;

    if( !is_priv && !is_pub )
 8083a6e:	b90c      	cbnz	r4, 8083a74 <mbedtls_rsa_complete+0x148>
 8083a70:	b112      	cbz	r2, 8083a78 <mbedtls_rsa_complete+0x14c>
 8083a72:	4626      	mov	r6, r4
 8083a74:	9404      	str	r4, [sp, #16]
 8083a76:	e7bf      	b.n	80839f8 <mbedtls_rsa_complete+0xcc>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8083a78:	4801      	ldr	r0, [pc, #4]	; (8083a80 <mbedtls_rsa_complete+0x154>)
    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
}
 8083a7a:	b007      	add	sp, #28
 8083a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8083a80:	ffffbf80 	.word	0xffffbf80

08083a84 <mbedtls_rsa_init>:
 * Initialize an RSA context
 */
void mbedtls_rsa_init( mbedtls_rsa_context *ctx,
               int padding,
               int hash_id )
{
 8083a84:	b570      	push	{r4, r5, r6, lr}
 8083a86:	4604      	mov	r4, r0
 8083a88:	460e      	mov	r6, r1
 8083a8a:	4615      	mov	r5, r2
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
 8083a8c:	2100      	movs	r1, #0
 8083a8e:	22ac      	movs	r2, #172	; 0xac
 8083a90:	f010 fa8d 	bl	8093fae <memset>
/*
 * Set padding for an existing RSA context
 */
void mbedtls_rsa_set_padding( mbedtls_rsa_context *ctx, int padding, int hash_id )
{
    ctx->padding = padding;
 8083a94:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
    ctx->hash_id = hash_id;
 8083a98:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 8083a9c:	bd70      	pop	{r4, r5, r6, pc}

08083a9e <mbedtls_rsa_get_len>:
 */

size_t mbedtls_rsa_get_len( const mbedtls_rsa_context *ctx )
{
    return( ctx->len );
}
 8083a9e:	6840      	ldr	r0, [r0, #4]
 8083aa0:	4770      	bx	lr
	...

08083aa4 <mbedtls_rsa_check_pubkey>:

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
 8083aa4:	b570      	push	{r4, r5, r6, lr}
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
 8083aa6:	2100      	movs	r1, #0

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
 8083aa8:	4604      	mov	r4, r0
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
 8083aaa:	f7ff fea7 	bl	80837fc <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
 8083aae:	4605      	mov	r5, r0
 8083ab0:	b9b8      	cbnz	r0, 8083ae2 <mbedtls_rsa_check_pubkey+0x3e>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );

    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
 8083ab2:	f104 0608 	add.w	r6, r4, #8
 8083ab6:	4630      	mov	r0, r6
 8083ab8:	f007 f9e7 	bl	808ae8a <mbedtls_mpi_bitlen>
 8083abc:	287f      	cmp	r0, #127	; 0x7f
 8083abe:	d910      	bls.n	8083ae2 <mbedtls_rsa_check_pubkey+0x3e>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 8083ac0:	3414      	adds	r4, #20
 8083ac2:	4629      	mov	r1, r5
 8083ac4:	4620      	mov	r0, r4
 8083ac6:	f007 f9b6 	bl	808ae36 <mbedtls_mpi_get_bit>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 8083aca:	b150      	cbz	r0, 8083ae2 <mbedtls_rsa_check_pubkey+0x3e>
 8083acc:	4620      	mov	r0, r4
 8083ace:	f007 f9dc 	bl	808ae8a <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 8083ad2:	2801      	cmp	r0, #1
 8083ad4:	d905      	bls.n	8083ae2 <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
 8083ad6:	4631      	mov	r1, r6
 8083ad8:	4620      	mov	r0, r4
 8083ada:	f007 fb82 	bl	808b1e2 <mbedtls_mpi_cmp_mpi>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 8083ade:	2800      	cmp	r0, #0
 8083ae0:	db00      	blt.n	8083ae4 <mbedtls_rsa_check_pubkey+0x40>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 8083ae2:	4d01      	ldr	r5, [pc, #4]	; (8083ae8 <mbedtls_rsa_check_pubkey+0x44>)
    }

    return( 0 );
}
 8083ae4:	4628      	mov	r0, r5
 8083ae6:	bd70      	pop	{r4, r5, r6, pc}
 8083ae8:	ffffbe00 	.word	0xffffbe00

08083aec <mbedtls_rsa_check_privkey>:

/*
 * Check for the consistency of all fields in an RSA private key context
 */
int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
{
 8083aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8083aee:	b085      	sub	sp, #20
 8083af0:	4604      	mov	r4, r0
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
 8083af2:	f7ff ffd7 	bl	8083aa4 <mbedtls_rsa_check_pubkey>
 8083af6:	bb28      	cbnz	r0, 8083b44 <mbedtls_rsa_check_privkey+0x58>
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
 8083af8:	2101      	movs	r1, #1
 8083afa:	4620      	mov	r0, r4
 8083afc:	f7ff fe7e 	bl	80837fc <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
/*
 * Check for the consistency of all fields in an RSA private key context
 */
int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
{
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
 8083b00:	bb00      	cbnz	r0, 8083b44 <mbedtls_rsa_check_privkey+0x58>
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_rsa_validate_params( &ctx->N, &ctx->P, &ctx->Q,
 8083b02:	f104 0314 	add.w	r3, r4, #20
 8083b06:	f104 052c 	add.w	r5, r4, #44	; 0x2c
 8083b0a:	f104 0638 	add.w	r6, r4, #56	; 0x38
 8083b0e:	f104 0720 	add.w	r7, r4, #32
 8083b12:	9002      	str	r0, [sp, #8]
 8083b14:	9001      	str	r0, [sp, #4]
 8083b16:	9300      	str	r3, [sp, #0]
 8083b18:	4632      	mov	r2, r6
 8083b1a:	463b      	mov	r3, r7
 8083b1c:	4629      	mov	r1, r5
 8083b1e:	f104 0008 	add.w	r0, r4, #8
 8083b22:	f00a ffe3 	bl	808eaec <mbedtls_rsa_validate_params>
 8083b26:	b968      	cbnz	r0, 8083b44 <mbedtls_rsa_check_privkey+0x58>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

#if !defined(MBEDTLS_RSA_NO_CRT)
    else if( mbedtls_rsa_validate_crt( &ctx->P, &ctx->Q, &ctx->D,
 8083b28:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8083b2c:	9301      	str	r3, [sp, #4]
 8083b2e:	f104 0350 	add.w	r3, r4, #80	; 0x50
 8083b32:	9300      	str	r3, [sp, #0]
 8083b34:	463a      	mov	r2, r7
 8083b36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8083b3a:	4631      	mov	r1, r6
 8083b3c:	4628      	mov	r0, r5
 8083b3e:	f00a ff55 	bl	808e9ec <mbedtls_rsa_validate_crt>
 8083b42:	b100      	cbz	r0, 8083b46 <mbedtls_rsa_check_privkey+0x5a>
int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
{
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 8083b44:	4801      	ldr	r0, [pc, #4]	; (8083b4c <mbedtls_rsa_check_privkey+0x60>)
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }
#endif

    return( 0 );
}
 8083b46:	b005      	add	sp, #20
 8083b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083b4a:	bf00      	nop
 8083b4c:	ffffbe00 	.word	0xffffbe00

08083b50 <mbedtls_rsa_check_pub_priv>:
/*
 * Check if contexts holding a public and private key match
 */
int mbedtls_rsa_check_pub_priv( const mbedtls_rsa_context *pub,
                                const mbedtls_rsa_context *prv )
{
 8083b50:	b538      	push	{r3, r4, r5, lr}
 8083b52:	4605      	mov	r5, r0
 8083b54:	460c      	mov	r4, r1
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
 8083b56:	f7ff ffa5 	bl	8083aa4 <mbedtls_rsa_check_pubkey>
 8083b5a:	b950      	cbnz	r0, 8083b72 <mbedtls_rsa_check_pub_priv+0x22>
        mbedtls_rsa_check_privkey( prv ) != 0 )
 8083b5c:	4620      	mov	r0, r4
 8083b5e:	f7ff ffc5 	bl	8083aec <mbedtls_rsa_check_privkey>
 * Check if contexts holding a public and private key match
 */
int mbedtls_rsa_check_pub_priv( const mbedtls_rsa_context *pub,
                                const mbedtls_rsa_context *prv )
{
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
 8083b62:	b930      	cbnz	r0, 8083b72 <mbedtls_rsa_check_pub_priv+0x22>
        mbedtls_rsa_check_privkey( prv ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 8083b64:	f104 0108 	add.w	r1, r4, #8
 8083b68:	f105 0008 	add.w	r0, r5, #8
 8083b6c:	f007 fb39 	bl	808b1e2 <mbedtls_mpi_cmp_mpi>
 8083b70:	b108      	cbz	r0, 8083b76 <mbedtls_rsa_check_pub_priv+0x26>
                                const mbedtls_rsa_context *prv )
{
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
        mbedtls_rsa_check_privkey( prv ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 8083b72:	4805      	ldr	r0, [pc, #20]	; (8083b88 <mbedtls_rsa_check_pub_priv+0x38>)
 8083b74:	bd38      	pop	{r3, r4, r5, pc}
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
        mbedtls_mpi_cmp_mpi( &pub->E, &prv->E ) != 0 )
 8083b76:	f104 0114 	add.w	r1, r4, #20
 8083b7a:	f105 0014 	add.w	r0, r5, #20
 8083b7e:	f007 fb30 	bl	808b1e2 <mbedtls_mpi_cmp_mpi>
        mbedtls_rsa_check_privkey( prv ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 8083b82:	2800      	cmp	r0, #0
 8083b84:	d1f5      	bne.n	8083b72 <mbedtls_rsa_check_pub_priv+0x22>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    return( 0 );
}
 8083b86:	bd38      	pop	{r3, r4, r5, pc}
 8083b88:	ffffbe00 	.word	0xffffbe00

08083b8c <mbedtls_rsa_public>:
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
 8083b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8083b90:	460c      	mov	r4, r1
 8083b92:	b086      	sub	sp, #24
    int ret;
    size_t olen;
    mbedtls_mpi T;

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
 8083b94:	2100      	movs	r1, #0
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
 8083b96:	4605      	mov	r5, r0
 8083b98:	4617      	mov	r7, r2
    int ret;
    size_t olen;
    mbedtls_mpi T;

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
 8083b9a:	f7ff fe2f 	bl	80837fc <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
 8083b9e:	4606      	mov	r6, r0
 8083ba0:	bb78      	cbnz	r0, 8083c02 <mbedtls_rsa_public+0x76>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T );
 8083ba2:	a803      	add	r0, sp, #12
 8083ba4:	f007 f8b8 	bl	808ad18 <mbedtls_mpi_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 8083ba8:	4621      	mov	r1, r4
 8083baa:	686a      	ldr	r2, [r5, #4]
 8083bac:	a803      	add	r0, sp, #12
 8083bae:	f007 f992 	bl	808aed6 <mbedtls_mpi_read_binary>
 8083bb2:	4604      	mov	r4, r0
 8083bb4:	b9f0      	cbnz	r0, 8083bf4 <mbedtls_rsa_public+0x68>

    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 8083bb6:	f105 0408 	add.w	r4, r5, #8
 8083bba:	4621      	mov	r1, r4
 8083bbc:	a803      	add	r0, sp, #12
 8083bbe:	f007 fb10 	bl	808b1e2 <mbedtls_mpi_cmp_mpi>
 8083bc2:	2800      	cmp	r0, #0
 8083bc4:	da14      	bge.n	8083bf0 <mbedtls_rsa_public+0x64>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    olen = ctx->len;
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 8083bc6:	f105 0368 	add.w	r3, r5, #104	; 0x68
 8083bca:	a903      	add	r1, sp, #12
 8083bcc:	9300      	str	r3, [sp, #0]
 8083bce:	f105 0214 	add.w	r2, r5, #20
 8083bd2:	4623      	mov	r3, r4
 8083bd4:	4608      	mov	r0, r1
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    olen = ctx->len;
 8083bd6:	f8d5 8004 	ldr.w	r8, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 8083bda:	f007 fed4 	bl	808b986 <mbedtls_mpi_exp_mod>
 8083bde:	4604      	mov	r4, r0
 8083be0:	b940      	cbnz	r0, 8083bf4 <mbedtls_rsa_public+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 8083be2:	4642      	mov	r2, r8
 8083be4:	4639      	mov	r1, r7
 8083be6:	a803      	add	r0, sp, #12
 8083be8:	f007 f9aa 	bl	808af40 <mbedtls_mpi_write_binary>
 8083bec:	4604      	mov	r4, r0
 8083bee:	e001      	b.n	8083bf4 <mbedtls_rsa_public+0x68>

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );

    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 8083bf0:	f06f 0403 	mvn.w	r4, #3
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &T );
 8083bf4:	a803      	add	r0, sp, #12
 8083bf6:	f007 f896 	bl	808ad26 <mbedtls_mpi_free>

    if( ret != 0 )
 8083bfa:	b11c      	cbz	r4, 8083c04 <mbedtls_rsa_public+0x78>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
 8083bfc:	f5a4 4685 	sub.w	r6, r4, #17024	; 0x4280
 8083c00:	e000      	b.n	8083c04 <mbedtls_rsa_public+0x78>
    int ret;
    size_t olen;
    mbedtls_mpi T;

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8083c02:	4e02      	ldr	r6, [pc, #8]	; (8083c0c <mbedtls_rsa_public+0x80>)

    if( ret != 0 )
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );

    return( 0 );
}
 8083c04:	4630      	mov	r0, r6
 8083c06:	b006      	add	sp, #24
 8083c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8083c0c:	ffffbf80 	.word	0xffffbf80

08083c10 <mbedtls_rsa_private>:
int mbedtls_rsa_private( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t),
                 void *p_rng,
                 const unsigned char *input,
                 unsigned char *output )
{
 8083c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8083c14:	460e      	mov	r6, r1
 8083c16:	b0a5      	sub	sp, #148	; 0x94

    /* Temporaries holding the initial input and the double
     * checked result; should be the same in the end. */
    mbedtls_mpi I, C;

    if( rsa_check_context( ctx, 1             /* private key checks */,
 8083c18:	2101      	movs	r1, #1
int mbedtls_rsa_private( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t),
                 void *p_rng,
                 const unsigned char *input,
                 unsigned char *output )
{
 8083c1a:	4604      	mov	r4, r0
 8083c1c:	4692      	mov	sl, r2
 8083c1e:	461d      	mov	r5, r3

    /* Temporaries holding the initial input and the double
     * checked result; should be the same in the end. */
    mbedtls_mpi I, C;

    if( rsa_check_context( ctx, 1             /* private key checks */,
 8083c20:	f7ff fdec 	bl	80837fc <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
 8083c24:	9003      	str	r0, [sp, #12]
 8083c26:	2800      	cmp	r0, #0
 8083c28:	f040 819b 	bne.w	8083f62 <mbedtls_rsa_private+0x352>
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    /* MPI Initialization */
    mbedtls_mpi_init( &T );
 8083c2c:	a806      	add	r0, sp, #24
 8083c2e:	f007 f873 	bl	808ad18 <mbedtls_mpi_init>

    mbedtls_mpi_init( &P1 );
 8083c32:	a809      	add	r0, sp, #36	; 0x24
 8083c34:	f007 f870 	bl	808ad18 <mbedtls_mpi_init>
    mbedtls_mpi_init( &Q1 );
 8083c38:	a80c      	add	r0, sp, #48	; 0x30
 8083c3a:	f007 f86d 	bl	808ad18 <mbedtls_mpi_init>
    mbedtls_mpi_init( &R );
 8083c3e:	a80f      	add	r0, sp, #60	; 0x3c
 8083c40:	f007 f86a 	bl	808ad18 <mbedtls_mpi_init>

    if( f_rng != NULL )
 8083c44:	b12e      	cbz	r6, 8083c52 <mbedtls_rsa_private+0x42>
    {
#if defined(MBEDTLS_RSA_NO_CRT)
        mbedtls_mpi_init( &D_blind );
#else
        mbedtls_mpi_init( &DP_blind );
 8083c46:	a818      	add	r0, sp, #96	; 0x60
 8083c48:	f007 f866 	bl	808ad18 <mbedtls_mpi_init>
        mbedtls_mpi_init( &DQ_blind );
 8083c4c:	a81b      	add	r0, sp, #108	; 0x6c
 8083c4e:	f007 f863 	bl	808ad18 <mbedtls_mpi_init>
#endif
    }

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_init( &TP ); mbedtls_mpi_init( &TQ );
 8083c52:	a812      	add	r0, sp, #72	; 0x48
 8083c54:	f007 f860 	bl	808ad18 <mbedtls_mpi_init>
 8083c58:	a815      	add	r0, sp, #84	; 0x54
 8083c5a:	f007 f85d 	bl	808ad18 <mbedtls_mpi_init>
#endif

    mbedtls_mpi_init( &I );
 8083c5e:	a81e      	add	r0, sp, #120	; 0x78
 8083c60:	f007 f85a 	bl	808ad18 <mbedtls_mpi_init>
    mbedtls_mpi_init( &C );
 8083c64:	a821      	add	r0, sp, #132	; 0x84
 8083c66:	f007 f857 	bl	808ad18 <mbedtls_mpi_init>

    /* End of MPI initialization */

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 8083c6a:	6862      	ldr	r2, [r4, #4]
 8083c6c:	4629      	mov	r1, r5
 8083c6e:	a806      	add	r0, sp, #24
 8083c70:	f007 f931 	bl	808aed6 <mbedtls_mpi_read_binary>
 8083c74:	4607      	mov	r7, r0
 8083c76:	2800      	cmp	r0, #0
 8083c78:	f040 8150 	bne.w	8083f1c <mbedtls_rsa_private+0x30c>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 8083c7c:	f104 0508 	add.w	r5, r4, #8
 8083c80:	4629      	mov	r1, r5
 8083c82:	a806      	add	r0, sp, #24
 8083c84:	f007 faad 	bl	808b1e2 <mbedtls_mpi_cmp_mpi>
 8083c88:	2800      	cmp	r0, #0
 8083c8a:	f280 8143 	bge.w	8083f14 <mbedtls_rsa_private+0x304>
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );
 8083c8e:	a906      	add	r1, sp, #24
 8083c90:	a81e      	add	r0, sp, #120	; 0x78
 8083c92:	f007 f88a 	bl	808adaa <mbedtls_mpi_copy>
 8083c96:	4607      	mov	r7, r0
 8083c98:	2800      	cmp	r0, #0
 8083c9a:	f040 813f 	bne.w	8083f1c <mbedtls_rsa_private+0x30c>
    mbedtls_mpi DP_blind, DQ_blind;

    /* Pointers to actual exponents to be used - either the unblinded
     * or the blinded ones, depending on the presence of a PRNG. */
    mbedtls_mpi *DP = &ctx->DP;
    mbedtls_mpi *DQ = &ctx->DQ;
 8083c9e:	f104 0350 	add.w	r3, r4, #80	; 0x50
     * the mod p resp. mod q computation (if used). */
    mbedtls_mpi DP_blind, DQ_blind;

    /* Pointers to actual exponents to be used - either the unblinded
     * or the blinded ones, depending on the presence of a PRNG. */
    mbedtls_mpi *DP = &ctx->DP;
 8083ca2:	f104 0944 	add.w	r9, r4, #68	; 0x44
    mbedtls_mpi *DQ = &ctx->DQ;
 8083ca6:	9304      	str	r3, [sp, #16]
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );

    if( f_rng != NULL )
 8083ca8:	2e00      	cmp	r6, #0
 8083caa:	f000 80c5 	beq.w	8083e38 <mbedtls_rsa_private+0x228>
static int rsa_prepare_blinding( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    int ret, count = 0;

    if( ctx->Vf.p != NULL )
 8083cae:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8083cb2:	b323      	cbz	r3, 8083cfe <mbedtls_rsa_private+0xee>
    {
        /* We already have blinding values, just update them by squaring */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vi, &ctx->Vi ) );
 8083cb4:	f104 088c 	add.w	r8, r4, #140	; 0x8c
 8083cb8:	4642      	mov	r2, r8
 8083cba:	4641      	mov	r1, r8
 8083cbc:	4640      	mov	r0, r8
 8083cbe:	f007 fbf4 	bl	808b4aa <mbedtls_mpi_mul_mpi>
 8083cc2:	4607      	mov	r7, r0
 8083cc4:	2800      	cmp	r0, #0
 8083cc6:	f040 8129 	bne.w	8083f1c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vi, &ctx->Vi, &ctx->N ) );
 8083cca:	462a      	mov	r2, r5
 8083ccc:	4641      	mov	r1, r8
 8083cce:	4640      	mov	r0, r8
 8083cd0:	f007 fe27 	bl	808b922 <mbedtls_mpi_mod_mpi>
 8083cd4:	4607      	mov	r7, r0
 8083cd6:	2800      	cmp	r0, #0
 8083cd8:	f040 8120 	bne.w	8083f1c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vf, &ctx->Vf, &ctx->Vf ) );
 8083cdc:	f104 0898 	add.w	r8, r4, #152	; 0x98
 8083ce0:	4642      	mov	r2, r8
 8083ce2:	4641      	mov	r1, r8
 8083ce4:	4640      	mov	r0, r8
 8083ce6:	f007 fbe0 	bl	808b4aa <mbedtls_mpi_mul_mpi>
 8083cea:	4607      	mov	r7, r0
 8083cec:	2800      	cmp	r0, #0
 8083cee:	f040 8115 	bne.w	8083f1c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vf, &ctx->Vf, &ctx->N ) );
 8083cf2:	462a      	mov	r2, r5
 8083cf4:	4641      	mov	r1, r8
 8083cf6:	4640      	mov	r0, r8
 8083cf8:	f007 fe13 	bl	808b922 <mbedtls_mpi_mod_mpi>
 8083cfc:	e037      	b.n	8083d6e <mbedtls_rsa_private+0x15e>
static int rsa_prepare_blinding( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    int ret, count = 0;

    if( ctx->Vf.p != NULL )
 8083cfe:	230c      	movs	r3, #12
 8083d00:	9305      	str	r3, [sp, #20]
    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
            return( MBEDTLS_ERR_RSA_RNG_FAILED );

        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 8083d02:	f104 0b98 	add.w	fp, r4, #152	; 0x98
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 8083d06:	f104 088c 	add.w	r8, r4, #140	; 0x8c
        goto cleanup;
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
 8083d0a:	9b05      	ldr	r3, [sp, #20]
 8083d0c:	3b01      	subs	r3, #1
 8083d0e:	9305      	str	r3, [sp, #20]
 8083d10:	f000 812a 	beq.w	8083f68 <mbedtls_rsa_private+0x358>
            return( MBEDTLS_ERR_RSA_RNG_FAILED );

        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 8083d14:	6861      	ldr	r1, [r4, #4]
 8083d16:	4653      	mov	r3, sl
 8083d18:	4632      	mov	r2, r6
 8083d1a:	3901      	subs	r1, #1
 8083d1c:	4658      	mov	r0, fp
 8083d1e:	f008 f8d6 	bl	808bece <mbedtls_mpi_fill_random>
 8083d22:	4607      	mov	r7, r0
 8083d24:	2800      	cmp	r0, #0
 8083d26:	f040 80f9 	bne.w	8083f1c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 8083d2a:	462a      	mov	r2, r5
 8083d2c:	4659      	mov	r1, fp
 8083d2e:	4640      	mov	r0, r8
 8083d30:	f008 f848 	bl	808bdc4 <mbedtls_mpi_gcd>
 8083d34:	4607      	mov	r7, r0
 8083d36:	2800      	cmp	r0, #0
 8083d38:	f040 80f0 	bne.w	8083f1c <mbedtls_rsa_private+0x30c>
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );
 8083d3c:	2101      	movs	r1, #1
 8083d3e:	4640      	mov	r0, r8
 8083d40:	f007 fa94 	bl	808b26c <mbedtls_mpi_cmp_int>

        goto cleanup;
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
 8083d44:	2800      	cmp	r0, #0
 8083d46:	d1e0      	bne.n	8083d0a <mbedtls_rsa_private+0xfa>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );

    /* Blinding value: Vi =  Vf^(-e) mod N */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 8083d48:	462a      	mov	r2, r5
 8083d4a:	4659      	mov	r1, fp
 8083d4c:	4640      	mov	r0, r8
 8083d4e:	f008 f8e1 	bl	808bf14 <mbedtls_mpi_inv_mod>
 8083d52:	4607      	mov	r7, r0
 8083d54:	2800      	cmp	r0, #0
 8083d56:	f040 80e1 	bne.w	8083f1c <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vi, &ctx->Vi, &ctx->E, &ctx->N, &ctx->RN ) );
 8083d5a:	f104 0368 	add.w	r3, r4, #104	; 0x68
 8083d5e:	9300      	str	r3, [sp, #0]
 8083d60:	f104 0214 	add.w	r2, r4, #20
 8083d64:	462b      	mov	r3, r5
 8083d66:	4641      	mov	r1, r8
 8083d68:	4640      	mov	r0, r8
 8083d6a:	f007 fe0c 	bl	808b986 <mbedtls_mpi_exp_mod>
 8083d6e:	4607      	mov	r7, r0
    {
        /*
         * Blinding
         * T = T * Vi mod N
         */
        MBEDTLS_MPI_CHK( rsa_prepare_blinding( ctx, f_rng, p_rng ) );
 8083d70:	2800      	cmp	r0, #0
 8083d72:	f040 80d3 	bne.w	8083f1c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vi ) );
 8083d76:	a906      	add	r1, sp, #24
 8083d78:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 8083d7c:	4608      	mov	r0, r1
 8083d7e:	f007 fb94 	bl	808b4aa <mbedtls_mpi_mul_mpi>
 8083d82:	4607      	mov	r7, r0
 8083d84:	2800      	cmp	r0, #0
 8083d86:	f040 80c9 	bne.w	8083f1c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 8083d8a:	a906      	add	r1, sp, #24
 8083d8c:	462a      	mov	r2, r5
 8083d8e:	4608      	mov	r0, r1
 8083d90:	f007 fdc7 	bl	808b922 <mbedtls_mpi_mod_mpi>
 8083d94:	4607      	mov	r7, r0
 8083d96:	2800      	cmp	r0, #0
 8083d98:	f040 80c0 	bne.w	8083f1c <mbedtls_rsa_private+0x30c>

        /*
         * Exponent blinding
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
 8083d9c:	2201      	movs	r2, #1
 8083d9e:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8083da2:	a809      	add	r0, sp, #36	; 0x24
 8083da4:	f007 fb6b 	bl	808b47e <mbedtls_mpi_sub_int>
 8083da8:	4607      	mov	r7, r0
 8083daa:	2800      	cmp	r0, #0
 8083dac:	f040 80b6 	bne.w	8083f1c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
 8083db0:	2201      	movs	r2, #1
 8083db2:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8083db6:	a80c      	add	r0, sp, #48	; 0x30
 8083db8:	f007 fb61 	bl	808b47e <mbedtls_mpi_sub_int>
 8083dbc:	4607      	mov	r7, r0
 8083dbe:	2800      	cmp	r0, #0
 8083dc0:	f040 80ac 	bne.w	8083f1c <mbedtls_rsa_private+0x30c>
        D = &D_blind;
#else
        /*
         * DP_blind = ( P - 1 ) * R + DP
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 8083dc4:	4653      	mov	r3, sl
 8083dc6:	4632      	mov	r2, r6
 8083dc8:	211c      	movs	r1, #28
 8083dca:	a80f      	add	r0, sp, #60	; 0x3c
 8083dcc:	f008 f87f 	bl	808bece <mbedtls_mpi_fill_random>
 8083dd0:	4607      	mov	r7, r0
 8083dd2:	2800      	cmp	r0, #0
 8083dd4:	f040 80a2 	bne.w	8083f1c <mbedtls_rsa_private+0x30c>
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
 8083dd8:	aa0f      	add	r2, sp, #60	; 0x3c
 8083dda:	a909      	add	r1, sp, #36	; 0x24
 8083ddc:	a818      	add	r0, sp, #96	; 0x60
 8083dde:	f007 fb64 	bl	808b4aa <mbedtls_mpi_mul_mpi>
 8083de2:	4607      	mov	r7, r0
 8083de4:	2800      	cmp	r0, #0
 8083de6:	f040 8099 	bne.w	8083f1c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
 8083dea:	a918      	add	r1, sp, #96	; 0x60
 8083dec:	464a      	mov	r2, r9
 8083dee:	4608      	mov	r0, r1
 8083df0:	f007 faec 	bl	808b3cc <mbedtls_mpi_add_mpi>
 8083df4:	4607      	mov	r7, r0
 8083df6:	2800      	cmp	r0, #0
 8083df8:	f040 8090 	bne.w	8083f1c <mbedtls_rsa_private+0x30c>
        DP = &DP_blind;

        /*
         * DQ_blind = ( Q - 1 ) * R + DQ
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 8083dfc:	4653      	mov	r3, sl
 8083dfe:	4632      	mov	r2, r6
 8083e00:	211c      	movs	r1, #28
 8083e02:	a80f      	add	r0, sp, #60	; 0x3c
 8083e04:	f008 f863 	bl	808bece <mbedtls_mpi_fill_random>
 8083e08:	4607      	mov	r7, r0
 8083e0a:	2800      	cmp	r0, #0
 8083e0c:	f040 8086 	bne.w	8083f1c <mbedtls_rsa_private+0x30c>
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DQ_blind, &Q1, &R ) );
 8083e10:	aa0f      	add	r2, sp, #60	; 0x3c
 8083e12:	a90c      	add	r1, sp, #48	; 0x30
 8083e14:	a81b      	add	r0, sp, #108	; 0x6c
 8083e16:	f007 fb48 	bl	808b4aa <mbedtls_mpi_mul_mpi>
 8083e1a:	4607      	mov	r7, r0
 8083e1c:	2800      	cmp	r0, #0
 8083e1e:	d17d      	bne.n	8083f1c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DQ_blind, &DQ_blind,
 8083e20:	a91b      	add	r1, sp, #108	; 0x6c
 8083e22:	9a04      	ldr	r2, [sp, #16]
 8083e24:	4608      	mov	r0, r1
 8083e26:	f007 fad1 	bl	808b3cc <mbedtls_mpi_add_mpi>
 8083e2a:	4607      	mov	r7, r0
 8083e2c:	2800      	cmp	r0, #0
 8083e2e:	d175      	bne.n	8083f1c <mbedtls_rsa_private+0x30c>
                    &ctx->DQ ) );

        DQ = &DQ_blind;
 8083e30:	ab1b      	add	r3, sp, #108	; 0x6c
 8083e32:	9304      	str	r3, [sp, #16]
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
                    &ctx->DP ) );

        DP = &DP_blind;
 8083e34:	f10d 0960 	add.w	r9, sp, #96	; 0x60
     *
     * TP = input ^ dP mod P
     * TQ = input ^ dQ mod Q
     */

    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TP, &T, DP, &ctx->P, &ctx->RP ) );
 8083e38:	f104 0374 	add.w	r3, r4, #116	; 0x74
 8083e3c:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8083e40:	9300      	str	r3, [sp, #0]
 8083e42:	464a      	mov	r2, r9
 8083e44:	4643      	mov	r3, r8
 8083e46:	a906      	add	r1, sp, #24
 8083e48:	a812      	add	r0, sp, #72	; 0x48
 8083e4a:	f007 fd9c 	bl	808b986 <mbedtls_mpi_exp_mod>
 8083e4e:	4607      	mov	r7, r0
 8083e50:	2800      	cmp	r0, #0
 8083e52:	d163      	bne.n	8083f1c <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TQ, &T, DQ, &ctx->Q, &ctx->RQ ) );
 8083e54:	f104 0380 	add.w	r3, r4, #128	; 0x80
 8083e58:	f104 0938 	add.w	r9, r4, #56	; 0x38
 8083e5c:	9300      	str	r3, [sp, #0]
 8083e5e:	9a04      	ldr	r2, [sp, #16]
 8083e60:	464b      	mov	r3, r9
 8083e62:	a906      	add	r1, sp, #24
 8083e64:	a815      	add	r0, sp, #84	; 0x54
 8083e66:	f007 fd8e 	bl	808b986 <mbedtls_mpi_exp_mod>
 8083e6a:	4607      	mov	r7, r0
 8083e6c:	2800      	cmp	r0, #0
 8083e6e:	d155      	bne.n	8083f1c <mbedtls_rsa_private+0x30c>

    /*
     * T = (TP - TQ) * (Q^-1 mod P) mod P
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T, &TP, &TQ ) );
 8083e70:	aa15      	add	r2, sp, #84	; 0x54
 8083e72:	a912      	add	r1, sp, #72	; 0x48
 8083e74:	a806      	add	r0, sp, #24
 8083e76:	f007 faca 	bl	808b40e <mbedtls_mpi_sub_mpi>
 8083e7a:	4607      	mov	r7, r0
 8083e7c:	2800      	cmp	r0, #0
 8083e7e:	d14d      	bne.n	8083f1c <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->QP ) );
 8083e80:	f104 025c 	add.w	r2, r4, #92	; 0x5c
 8083e84:	a906      	add	r1, sp, #24
 8083e86:	a812      	add	r0, sp, #72	; 0x48
 8083e88:	f007 fb0f 	bl	808b4aa <mbedtls_mpi_mul_mpi>
 8083e8c:	4607      	mov	r7, r0
 8083e8e:	2800      	cmp	r0, #0
 8083e90:	d144      	bne.n	8083f1c <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &TP, &ctx->P ) );
 8083e92:	4642      	mov	r2, r8
 8083e94:	a912      	add	r1, sp, #72	; 0x48
 8083e96:	a806      	add	r0, sp, #24
 8083e98:	f007 fd43 	bl	808b922 <mbedtls_mpi_mod_mpi>
 8083e9c:	4607      	mov	r7, r0
 8083e9e:	2800      	cmp	r0, #0
 8083ea0:	d13c      	bne.n	8083f1c <mbedtls_rsa_private+0x30c>

    /*
     * T = TQ + T * Q
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->Q ) );
 8083ea2:	464a      	mov	r2, r9
 8083ea4:	a906      	add	r1, sp, #24
 8083ea6:	a812      	add	r0, sp, #72	; 0x48
 8083ea8:	f007 faff 	bl	808b4aa <mbedtls_mpi_mul_mpi>
 8083eac:	4607      	mov	r7, r0
 8083eae:	2800      	cmp	r0, #0
 8083eb0:	d134      	bne.n	8083f1c <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T, &TQ, &TP ) );
 8083eb2:	aa12      	add	r2, sp, #72	; 0x48
 8083eb4:	a915      	add	r1, sp, #84	; 0x54
 8083eb6:	a806      	add	r0, sp, #24
 8083eb8:	f007 fa88 	bl	808b3cc <mbedtls_mpi_add_mpi>
 8083ebc:	4607      	mov	r7, r0
 8083ebe:	bb68      	cbnz	r0, 8083f1c <mbedtls_rsa_private+0x30c>
#endif /* MBEDTLS_RSA_NO_CRT */

    if( f_rng != NULL )
 8083ec0:	b966      	cbnz	r6, 8083edc <mbedtls_rsa_private+0x2cc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
    }

    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
 8083ec2:	f104 0368 	add.w	r3, r4, #104	; 0x68
 8083ec6:	9300      	str	r3, [sp, #0]
 8083ec8:	f104 0214 	add.w	r2, r4, #20
 8083ecc:	462b      	mov	r3, r5
 8083ece:	a906      	add	r1, sp, #24
 8083ed0:	a821      	add	r0, sp, #132	; 0x84
 8083ed2:	f007 fd58 	bl	808b986 <mbedtls_mpi_exp_mod>
 8083ed6:	4607      	mov	r7, r0
 8083ed8:	bb00      	cbnz	r0, 8083f1c <mbedtls_rsa_private+0x30c>
 8083eda:	e00f      	b.n	8083efc <mbedtls_rsa_private+0x2ec>
    {
        /*
         * Unblind
         * T = T * Vf mod N
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
 8083edc:	a906      	add	r1, sp, #24
 8083ede:	f104 0298 	add.w	r2, r4, #152	; 0x98
 8083ee2:	4608      	mov	r0, r1
 8083ee4:	f007 fae1 	bl	808b4aa <mbedtls_mpi_mul_mpi>
 8083ee8:	4607      	mov	r7, r0
 8083eea:	b9b8      	cbnz	r0, 8083f1c <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 8083eec:	a906      	add	r1, sp, #24
 8083eee:	462a      	mov	r2, r5
 8083ef0:	4608      	mov	r0, r1
 8083ef2:	f007 fd16 	bl	808b922 <mbedtls_mpi_mod_mpi>
 8083ef6:	4607      	mov	r7, r0
 8083ef8:	b980      	cbnz	r0, 8083f1c <mbedtls_rsa_private+0x30c>
 8083efa:	e7e2      	b.n	8083ec2 <mbedtls_rsa_private+0x2b2>
    }

    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
                                          &ctx->N, &ctx->RN ) );
    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
 8083efc:	a91e      	add	r1, sp, #120	; 0x78
 8083efe:	a821      	add	r0, sp, #132	; 0x84
 8083f00:	f007 f96f 	bl	808b1e2 <mbedtls_mpi_cmp_mpi>
 8083f04:	b948      	cbnz	r0, 8083f1a <mbedtls_rsa_private+0x30a>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
        goto cleanup;
    }

    olen = ctx->len;
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 8083f06:	6862      	ldr	r2, [r4, #4]
 8083f08:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8083f0a:	a806      	add	r0, sp, #24
 8083f0c:	f007 f818 	bl	808af40 <mbedtls_mpi_write_binary>
 8083f10:	4607      	mov	r7, r0
 8083f12:	e003      	b.n	8083f1c <mbedtls_rsa_private+0x30c>
    /* End of MPI initialization */

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 8083f14:	f06f 0703 	mvn.w	r7, #3
 8083f18:	e000      	b.n	8083f1c <mbedtls_rsa_private+0x30c>
    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
                                          &ctx->N, &ctx->RN ) );
    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 8083f1a:	4f16      	ldr	r7, [pc, #88]	; (8083f74 <mbedtls_rsa_private+0x364>)
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &P1 );
 8083f1c:	a809      	add	r0, sp, #36	; 0x24
 8083f1e:	f006 ff02 	bl	808ad26 <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
 8083f22:	a80c      	add	r0, sp, #48	; 0x30
 8083f24:	f006 feff 	bl	808ad26 <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
 8083f28:	a80f      	add	r0, sp, #60	; 0x3c
 8083f2a:	f006 fefc 	bl	808ad26 <mbedtls_mpi_free>

    if( f_rng != NULL )
 8083f2e:	b12e      	cbz	r6, 8083f3c <mbedtls_rsa_private+0x32c>
    {
#if defined(MBEDTLS_RSA_NO_CRT)
        mbedtls_mpi_free( &D_blind );
#else
        mbedtls_mpi_free( &DP_blind );
 8083f30:	a818      	add	r0, sp, #96	; 0x60
 8083f32:	f006 fef8 	bl	808ad26 <mbedtls_mpi_free>
        mbedtls_mpi_free( &DQ_blind );
 8083f36:	a81b      	add	r0, sp, #108	; 0x6c
 8083f38:	f006 fef5 	bl	808ad26 <mbedtls_mpi_free>
#endif
    }

    mbedtls_mpi_free( &T );
 8083f3c:	a806      	add	r0, sp, #24
 8083f3e:	f006 fef2 	bl	808ad26 <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &TP ); mbedtls_mpi_free( &TQ );
 8083f42:	a812      	add	r0, sp, #72	; 0x48
 8083f44:	f006 feef 	bl	808ad26 <mbedtls_mpi_free>
 8083f48:	a815      	add	r0, sp, #84	; 0x54
 8083f4a:	f006 feec 	bl	808ad26 <mbedtls_mpi_free>
#endif

    mbedtls_mpi_free( &C );
 8083f4e:	a821      	add	r0, sp, #132	; 0x84
 8083f50:	f006 fee9 	bl	808ad26 <mbedtls_mpi_free>
    mbedtls_mpi_free( &I );
 8083f54:	a81e      	add	r0, sp, #120	; 0x78
 8083f56:	f006 fee6 	bl	808ad26 <mbedtls_mpi_free>

    if( ret != 0 )
 8083f5a:	b13f      	cbz	r7, 8083f6c <mbedtls_rsa_private+0x35c>
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );
 8083f5c:	f5a7 4386 	sub.w	r3, r7, #17152	; 0x4300
 8083f60:	e000      	b.n	8083f64 <mbedtls_rsa_private+0x354>
    mbedtls_mpi I, C;

    if( rsa_check_context( ctx, 1             /* private key checks */,
                                f_rng != NULL /* blinding y/n       */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8083f62:	4b05      	ldr	r3, [pc, #20]	; (8083f78 <mbedtls_rsa_private+0x368>)
 8083f64:	9303      	str	r3, [sp, #12]
 8083f66:	e001      	b.n	8083f6c <mbedtls_rsa_private+0x35c>
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
            return( MBEDTLS_ERR_RSA_RNG_FAILED );
 8083f68:	4f04      	ldr	r7, [pc, #16]	; (8083f7c <mbedtls_rsa_private+0x36c>)
 8083f6a:	e7d7      	b.n	8083f1c <mbedtls_rsa_private+0x30c>

    if( ret != 0 )
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );

    return( 0 );
}
 8083f6c:	9803      	ldr	r0, [sp, #12]
 8083f6e:	b025      	add	sp, #148	; 0x94
 8083f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8083f74:	ffffbc80 	.word	0xffffbc80
 8083f78:	ffffbf80 	.word	0xffffbf80
 8083f7c:	ffffbb80 	.word	0xffffbb80

08083f80 <mbedtls_rsa_rsaes_oaep_encrypt>:
                            int mode,
                            const unsigned char *label, size_t label_len,
                            size_t ilen,
                            const unsigned char *input,
                            unsigned char *output )
{
 8083f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    unsigned char *p = output;
    unsigned int hlen;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8083f84:	2b01      	cmp	r3, #1
                            int mode,
                            const unsigned char *label, size_t label_len,
                            size_t ilen,
                            const unsigned char *input,
                            unsigned char *output )
{
 8083f86:	b08b      	sub	sp, #44	; 0x2c
 8083f88:	4680      	mov	r8, r0
 8083f8a:	468b      	mov	fp, r1
 8083f8c:	9203      	str	r2, [sp, #12]
 8083f8e:	9304      	str	r3, [sp, #16]
 8083f90:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8083f92:	9e18      	ldr	r6, [sp, #96]	; 0x60
    unsigned char *p = output;
    unsigned int hlen;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8083f94:	d105      	bne.n	8083fa2 <mbedtls_rsa_rsaes_oaep_encrypt+0x22>
 8083f96:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8083f9a:	2b01      	cmp	r3, #1
 8083f9c:	d001      	beq.n	8083fa2 <mbedtls_rsa_rsaes_oaep_encrypt+0x22>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8083f9e:	4840      	ldr	r0, [pc, #256]	; (80840a0 <mbedtls_rsa_rsaes_oaep_encrypt+0x120>)
 8083fa0:	e07a      	b.n	8084098 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>

    if( f_rng == NULL )
 8083fa2:	f1bb 0f00 	cmp.w	fp, #0
 8083fa6:	d0fa      	beq.n	8083f9e <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 8083fa8:	f898 00a8 	ldrb.w	r0, [r8, #168]	; 0xa8
 8083fac:	f003 fb14 	bl	80875d8 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8083fb0:	9002      	str	r0, [sp, #8]
 8083fb2:	2800      	cmp	r0, #0
 8083fb4:	d0f3      	beq.n	8083f9e <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
 8083fb6:	f8d8 4004 	ldr.w	r4, [r8, #4]
    hlen = mbedtls_md_get_size( md_info );
 8083fba:	f003 fc51 	bl	8087860 <mbedtls_md_get_size>

    /* first comparison checks for overflow */
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
 8083fbe:	0043      	lsls	r3, r0, #1
 8083fc0:	9305      	str	r3, [sp, #20]
 8083fc2:	0042      	lsls	r2, r0, #1
 8083fc4:	1cbb      	adds	r3, r7, #2
 8083fc6:	4413      	add	r3, r2
 8083fc8:	429f      	cmp	r7, r3
    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
    hlen = mbedtls_md_get_size( md_info );
 8083fca:	4605      	mov	r5, r0

    /* first comparison checks for overflow */
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
 8083fcc:	d8e7      	bhi.n	8083f9e <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
 8083fce:	429c      	cmp	r4, r3
 8083fd0:	d3e5      	bcc.n	8083f9e <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    memset( output, 0, olen );
 8083fd2:	4622      	mov	r2, r4
 8083fd4:	2100      	movs	r1, #0
 8083fd6:	4630      	mov	r0, r6
 8083fd8:	f00f ffe9 	bl	8093fae <memset>

    *p++ = 0;
 8083fdc:	f106 0901 	add.w	r9, r6, #1
 8083fe0:	2300      	movs	r3, #0
 8083fe2:	7033      	strb	r3, [r6, #0]

    /* Generate a random octet string seed */
    if( ( ret = f_rng( p_rng, p, hlen ) ) != 0 )
 8083fe4:	462a      	mov	r2, r5
 8083fe6:	4649      	mov	r1, r9
 8083fe8:	9803      	ldr	r0, [sp, #12]
 8083fea:	47d8      	blx	fp
 8083fec:	b110      	cbz	r0, 8083ff4 <mbedtls_rsa_rsaes_oaep_encrypt+0x74>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 8083fee:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
 8083ff2:	e051      	b.n	8084098 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>

    p += hlen;
 8083ff4:	eb09 0a05 	add.w	sl, r9, r5

    /* Construct DB */
    if( ( ret = mbedtls_md( md_info, label, label_len, p ) ) != 0 )
 8083ff8:	4653      	mov	r3, sl
 8083ffa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8083ffc:	9914      	ldr	r1, [sp, #80]	; 0x50
 8083ffe:	9802      	ldr	r0, [sp, #8]
 8084000:	f003 fb5c 	bl	80876bc <mbedtls_md>
 8084004:	2800      	cmp	r0, #0
 8084006:	d147      	bne.n	8084098 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>
 8084008:	9005      	str	r0, [sp, #20]
 808400a:	1ea0      	subs	r0, r4, #2
 808400c:	1bc0      	subs	r0, r0, r7
 808400e:	006b      	lsls	r3, r5, #1
 8084010:	4428      	add	r0, r5
 8084012:	1ac0      	subs	r0, r0, r3
        return( ret );
    p += hlen;
    p += olen - 2 * hlen - 2 - ilen;
    *p++ = 1;
 8084014:	2201      	movs	r2, #1
 8084016:	f80a 2000 	strb.w	r2, [sl, r0]
    memcpy( p, input, ilen );
 808401a:	4410      	add	r0, r2
 808401c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 808401e:	463a      	mov	r2, r7
 8084020:	4450      	add	r0, sl

    mbedtls_md_init( &md_ctx );
 8084022:	af07      	add	r7, sp, #28
    if( ( ret = mbedtls_md( md_info, label, label_len, p ) ) != 0 )
        return( ret );
    p += hlen;
    p += olen - 2 * hlen - 2 - ilen;
    *p++ = 1;
    memcpy( p, input, ilen );
 8084024:	f00f ff9d 	bl	8093f62 <memcpy>

    mbedtls_md_init( &md_ctx );
 8084028:	4638      	mov	r0, r7
 808402a:	f003 fae1 	bl	80875f0 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 808402e:	9b05      	ldr	r3, [sp, #20]
 8084030:	9902      	ldr	r1, [sp, #8]
 8084032:	461a      	mov	r2, r3
 8084034:	4638      	mov	r0, r7
 8084036:	f003 fb01 	bl	808763c <mbedtls_md_setup>
 808403a:	4602      	mov	r2, r0
 808403c:	b9a8      	cbnz	r0, 808406a <mbedtls_rsa_rsaes_oaep_encrypt+0xea>
        goto exit;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( output + hlen + 1, olen - hlen - 1, output + 1, hlen,
 808403e:	f105 0a01 	add.w	sl, r5, #1
 8084042:	3c01      	subs	r4, #1
 8084044:	44b2      	add	sl, r6
 8084046:	1b64      	subs	r4, r4, r5
 8084048:	464a      	mov	r2, r9
 808404a:	9700      	str	r7, [sp, #0]
 808404c:	462b      	mov	r3, r5
 808404e:	4621      	mov	r1, r4
 8084050:	4650      	mov	r0, sl
 8084052:	f7ff faef 	bl	8083634 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 8084056:	4602      	mov	r2, r0
 8084058:	b938      	cbnz	r0, 808406a <mbedtls_rsa_rsaes_oaep_encrypt+0xea>
                          &md_ctx ) ) != 0 )
        goto exit;

    /* maskedSeed: Apply seedMask to seed */
    if( ( ret = mgf_mask( output + 1, hlen, output + hlen + 1, olen - hlen - 1,
 808405a:	4652      	mov	r2, sl
 808405c:	9700      	str	r7, [sp, #0]
 808405e:	4623      	mov	r3, r4
 8084060:	4629      	mov	r1, r5
 8084062:	4648      	mov	r0, r9
 8084064:	f7ff fae6 	bl	8083634 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 8084068:	4602      	mov	r2, r0
                          &md_ctx ) ) != 0 )
        goto exit;

exit:
    mbedtls_md_free( &md_ctx );
 808406a:	a807      	add	r0, sp, #28
 808406c:	9202      	str	r2, [sp, #8]
 808406e:	f003 fac4 	bl	80875fa <mbedtls_md_free>

    if( ret != 0 )
 8084072:	9a02      	ldr	r2, [sp, #8]
 8084074:	b97a      	cbnz	r2, 8084096 <mbedtls_rsa_rsaes_oaep_encrypt+0x116>
        return( ret );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8084076:	9b04      	ldr	r3, [sp, #16]
 8084078:	b92b      	cbnz	r3, 8084086 <mbedtls_rsa_rsaes_oaep_encrypt+0x106>
 808407a:	4632      	mov	r2, r6
 808407c:	4631      	mov	r1, r6
 808407e:	4640      	mov	r0, r8
 8084080:	f7ff fd84 	bl	8083b8c <mbedtls_rsa_public>
 8084084:	e008      	b.n	8084098 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>
 8084086:	9600      	str	r6, [sp, #0]
 8084088:	4633      	mov	r3, r6
 808408a:	9a03      	ldr	r2, [sp, #12]
 808408c:	4659      	mov	r1, fp
 808408e:	4640      	mov	r0, r8
 8084090:	f7ff fdbe 	bl	8083c10 <mbedtls_rsa_private>
 8084094:	e000      	b.n	8084098 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>
 8084096:	4610      	mov	r0, r2
}
 8084098:	b00b      	add	sp, #44	; 0x2c
 808409a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808409e:	bf00      	nop
 80840a0:	ffffbf80 	.word	0xffffbf80

080840a4 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>:
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng,
                                 int mode, size_t ilen,
                                 const unsigned char *input,
                                 unsigned char *output )
{
 80840a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80840a8:	469a      	mov	sl, r3
    size_t nb_pad, olen;
    int ret;
    unsigned char *p = output;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80840aa:	f1ba 0f01 	cmp.w	sl, #1
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng,
                                 int mode, size_t ilen,
                                 const unsigned char *input,
                                 unsigned char *output )
{
 80840ae:	4607      	mov	r7, r0
 80840b0:	4689      	mov	r9, r1
 80840b2:	4693      	mov	fp, r2
 80840b4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80840b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80840ba:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    size_t nb_pad, olen;
    int ret;
    unsigned char *p = output;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80840bc:	d103      	bne.n	80840c6 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x22>
 80840be:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 80840c2:	2a00      	cmp	r2, #0
 80840c4:	d155      	bne.n	8084172 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    // We don't check p_rng because it won't be dereferenced here
    if( f_rng == NULL || input == NULL || output == NULL )
 80840c6:	f1b9 0f00 	cmp.w	r9, #0
 80840ca:	d052      	beq.n	8084172 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
 80840cc:	2b00      	cmp	r3, #0
 80840ce:	d050      	beq.n	8084172 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
 80840d0:	2e00      	cmp	r6, #0
 80840d2:	d04e      	beq.n	8084172 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
 80840d4:	f118 020b 	adds.w	r2, r8, #11

    // We don't check p_rng because it won't be dereferenced here
    if( f_rng == NULL || input == NULL || output == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
 80840d8:	687c      	ldr	r4, [r7, #4]

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
 80840da:	d24a      	bcs.n	8084172 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
 80840dc:	4294      	cmp	r4, r2
 80840de:	d348      	bcc.n	8084172 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    nb_pad = olen - 3 - ilen;

    *p++ = 0;
 80840e0:	4635      	mov	r5, r6

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    nb_pad = olen - 3 - ilen;
 80840e2:	3c03      	subs	r4, #3

    *p++ = 0;
 80840e4:	2200      	movs	r2, #0

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    nb_pad = olen - 3 - ilen;
 80840e6:	ebc8 0404 	rsb	r4, r8, r4

    *p++ = 0;
 80840ea:	f805 2b02 	strb.w	r2, [r5], #2
    if( mode == MBEDTLS_RSA_PUBLIC )
 80840ee:	f1ba 0f00 	cmp.w	sl, #0
 80840f2:	d118      	bne.n	8084126 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x82>
    {
        *p++ = MBEDTLS_RSA_CRYPT;
 80840f4:	2202      	movs	r2, #2
 80840f6:	7072      	strb	r2, [r6, #1]
 80840f8:	442c      	add	r4, r5

        while( nb_pad-- > 0 )
 80840fa:	42a5      	cmp	r5, r4
 80840fc:	d01c      	beq.n	8084138 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x94>
 80840fe:	2264      	movs	r2, #100	; 0x64
 8084100:	9200      	str	r2, [sp, #0]
        {
            int rng_dl = 100;

            do {
                ret = f_rng( p_rng, p, 1 );
 8084102:	2201      	movs	r2, #1
 8084104:	4629      	mov	r1, r5
 8084106:	4658      	mov	r0, fp
 8084108:	9301      	str	r3, [sp, #4]
 808410a:	47c8      	blx	r9
            } while( *p == 0 && --rng_dl && ret == 0 );
 808410c:	782a      	ldrb	r2, [r5, #0]
 808410e:	9b01      	ldr	r3, [sp, #4]
 8084110:	bb8a      	cbnz	r2, 8084176 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd2>
 8084112:	9a00      	ldr	r2, [sp, #0]
 8084114:	3a01      	subs	r2, #1
 8084116:	9200      	str	r2, [sp, #0]
 8084118:	d102      	bne.n	8084120 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x7c>

            /* Check if RNG failed to generate data */
            if( rng_dl == 0 || ret != 0 )
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 808411a:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
 808411e:	e02e      	b.n	808417e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xda>
        {
            int rng_dl = 100;

            do {
                ret = f_rng( p_rng, p, 1 );
            } while( *p == 0 && --rng_dl && ret == 0 );
 8084120:	2800      	cmp	r0, #0
 8084122:	d0ee      	beq.n	8084102 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x5e>
 8084124:	e7f9      	b.n	808411a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x76>
            p++;
        }
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;
 8084126:	2201      	movs	r2, #1
 8084128:	7072      	strb	r2, [r6, #1]
 808412a:	442c      	add	r4, r5

        while( nb_pad-- > 0 )
            *p++ = 0xFF;
 808412c:	22ff      	movs	r2, #255	; 0xff
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;

        while( nb_pad-- > 0 )
 808412e:	42ac      	cmp	r4, r5
 8084130:	d002      	beq.n	8084138 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x94>
            *p++ = 0xFF;
 8084132:	f805 2b01 	strb.w	r2, [r5], #1
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;

        while( nb_pad-- > 0 )
 8084136:	e7fa      	b.n	808412e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x8a>
            *p++ = 0xFF;
    }

    *p++ = 0;
 8084138:	4620      	mov	r0, r4
 808413a:	2200      	movs	r2, #0
 808413c:	f800 2b01 	strb.w	r2, [r0], #1
    memcpy( p, input, ilen );
 8084140:	4619      	mov	r1, r3
 8084142:	4642      	mov	r2, r8
 8084144:	f00f ff0d 	bl	8093f62 <memcpy>

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8084148:	f1ba 0f00 	cmp.w	sl, #0
 808414c:	d107      	bne.n	808415e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xba>
 808414e:	4632      	mov	r2, r6
 8084150:	4631      	mov	r1, r6
 8084152:	4638      	mov	r0, r7
}
 8084154:	b003      	add	sp, #12
 8084156:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    *p++ = 0;
    memcpy( p, input, ilen );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 808415a:	f7ff bd17 	b.w	8083b8c <mbedtls_rsa_public>
 808415e:	4633      	mov	r3, r6
 8084160:	465a      	mov	r2, fp
 8084162:	4649      	mov	r1, r9
 8084164:	4638      	mov	r0, r7
 8084166:	960c      	str	r6, [sp, #48]	; 0x30
}
 8084168:	b003      	add	sp, #12
 808416a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    *p++ = 0;
    memcpy( p, input, ilen );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 808416e:	f7ff bd4f 	b.w	8083c10 <mbedtls_rsa_private>
    size_t nb_pad, olen;
    int ret;
    unsigned char *p = output;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8084172:	4804      	ldr	r0, [pc, #16]	; (8084184 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xe0>)
 8084174:	e003      	b.n	808417e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xda>
            do {
                ret = f_rng( p_rng, p, 1 );
            } while( *p == 0 && --rng_dl && ret == 0 );

            /* Check if RNG failed to generate data */
            if( rng_dl == 0 || ret != 0 )
 8084176:	2800      	cmp	r0, #0
 8084178:	d1cf      	bne.n	808411a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x76>
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );

            p++;
 808417a:	3501      	adds	r5, #1
    *p++ = 0;
    if( mode == MBEDTLS_RSA_PUBLIC )
    {
        *p++ = MBEDTLS_RSA_CRYPT;

        while( nb_pad-- > 0 )
 808417c:	e7bd      	b.n	80840fa <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x56>
    memcpy( p, input, ilen );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
}
 808417e:	b003      	add	sp, #12
 8084180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084184:	ffffbf80 	.word	0xffffbf80

08084188 <mbedtls_rsa_pkcs1_encrypt>:
                       int (*f_rng)(void *, unsigned char *, size_t),
                       void *p_rng,
                       int mode, size_t ilen,
                       const unsigned char *input,
                       unsigned char *output )
{
 8084188:	b5f0      	push	{r4, r5, r6, r7, lr}
 808418a:	b087      	sub	sp, #28
    switch( ctx->padding )
 808418c:	f8d0 70a4 	ldr.w	r7, [r0, #164]	; 0xa4
                       int (*f_rng)(void *, unsigned char *, size_t),
                       void *p_rng,
                       int mode, size_t ilen,
                       const unsigned char *input,
                       unsigned char *output )
{
 8084190:	ac0c      	add	r4, sp, #48	; 0x30
 8084192:	cc70      	ldmia	r4, {r4, r5, r6}
    switch( ctx->padding )
 8084194:	b157      	cbz	r7, 80841ac <mbedtls_rsa_pkcs1_encrypt+0x24>
 8084196:	2f01      	cmp	r7, #1
 8084198:	d110      	bne.n	80841bc <mbedtls_rsa_pkcs1_encrypt+0x34>
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           ilen, input, output );
 808419a:	9402      	str	r4, [sp, #8]
 808419c:	2400      	movs	r4, #0
 808419e:	9604      	str	r6, [sp, #16]
 80841a0:	9503      	str	r5, [sp, #12]
 80841a2:	9401      	str	r4, [sp, #4]
 80841a4:	9400      	str	r4, [sp, #0]
 80841a6:	f7ff feeb 	bl	8083f80 <mbedtls_rsa_rsaes_oaep_encrypt>
 80841aa:	e008      	b.n	80841be <mbedtls_rsa_pkcs1_encrypt+0x36>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
                                                input, output );
 80841ac:	960e      	str	r6, [sp, #56]	; 0x38
 80841ae:	950d      	str	r5, [sp, #52]	; 0x34
 80841b0:	940c      	str	r4, [sp, #48]	; 0x30
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 80841b2:	b007      	add	sp, #28
 80841b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
                                                input, output );
 80841b8:	f7ff bf74 	b.w	80840a4 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           ilen, input, output );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 80841bc:	4801      	ldr	r0, [pc, #4]	; (80841c4 <mbedtls_rsa_pkcs1_encrypt+0x3c>)
    }
}
 80841be:	b007      	add	sp, #28
 80841c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80841c2:	bf00      	nop
 80841c4:	ffffbf00 	.word	0xffffbf00

080841c8 <mbedtls_rsa_rsaes_oaep_decrypt>:
                            const unsigned char *label, size_t label_len,
                            size_t *olen,
                            const unsigned char *input,
                            unsigned char *output,
                            size_t output_max_len )
{
 80841c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    mbedtls_md_context_t md_ctx;

    /*
     * Parameters sanity checks
     */
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80841cc:	2b01      	cmp	r3, #1
                            const unsigned char *label, size_t label_len,
                            size_t *olen,
                            const unsigned char *input,
                            unsigned char *output,
                            size_t output_max_len )
{
 80841ce:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
 80841d2:	4606      	mov	r6, r0
 80841d4:	468a      	mov	sl, r1
 80841d6:	9203      	str	r2, [sp, #12]
 80841d8:	469b      	mov	fp, r3
    mbedtls_md_context_t md_ctx;

    /*
     * Parameters sanity checks
     */
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80841da:	d105      	bne.n	80841e8 <mbedtls_rsa_rsaes_oaep_decrypt+0x20>
 80841dc:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80841e0:	2b01      	cmp	r3, #1
 80841e2:	d001      	beq.n	80841e8 <mbedtls_rsa_rsaes_oaep_decrypt+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80841e4:	485c      	ldr	r0, [pc, #368]	; (8084358 <mbedtls_rsa_rsaes_oaep_decrypt+0x190>)
 80841e6:	e0b2      	b.n	808434e <mbedtls_rsa_rsaes_oaep_decrypt+0x186>

    ilen = ctx->len;
 80841e8:	6877      	ldr	r7, [r6, #4]

    if( ilen < 16 || ilen > sizeof( buf ) )
 80841ea:	f1a7 0310 	sub.w	r3, r7, #16
 80841ee:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 80841f2:	d8f7      	bhi.n	80841e4 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 80841f4:	f896 00a8 	ldrb.w	r0, [r6, #168]	; 0xa8
 80841f8:	f003 f9ee 	bl	80875d8 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 80841fc:	9002      	str	r0, [sp, #8]
 80841fe:	2800      	cmp	r0, #0
 8084200:	d0f0      	beq.n	80841e4 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 8084202:	f003 fb2d 	bl	8087860 <mbedtls_md_get_size>

    // checking for integer underflow
    if( 2 * hlen + 2 > ilen )
 8084206:	f100 0801 	add.w	r8, r0, #1
 808420a:	ea4f 0548 	mov.w	r5, r8, lsl #1
 808420e:	42af      	cmp	r7, r5

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 8084210:	4604      	mov	r4, r0

    // checking for integer underflow
    if( 2 * hlen + 2 > ilen )
 8084212:	d3e7      	bcc.n	80841e4 <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
 8084214:	f10d 0960 	add.w	r9, sp, #96	; 0x60
    /*
     * RSA operation
     */
    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8084218:	f1bb 0f00 	cmp.w	fp, #0
 808421c:	d106      	bne.n	808422c <mbedtls_rsa_rsaes_oaep_decrypt+0x64>
 808421e:	464a      	mov	r2, r9
 8084220:	f8dd 1494 	ldr.w	r1, [sp, #1172]	; 0x494
 8084224:	4630      	mov	r0, r6
 8084226:	f7ff fcb1 	bl	8083b8c <mbedtls_rsa_public>
 808422a:	e008      	b.n	808423e <mbedtls_rsa_rsaes_oaep_decrypt+0x76>
 808422c:	f8cd 9000 	str.w	r9, [sp]
 8084230:	f8dd 3494 	ldr.w	r3, [sp, #1172]	; 0x494
 8084234:	9a03      	ldr	r2, [sp, #12]
 8084236:	4651      	mov	r1, sl
 8084238:	4630      	mov	r0, r6
 808423a:	f7ff fce9 	bl	8083c10 <mbedtls_rsa_private>
 808423e:	4682      	mov	sl, r0

    if( ret != 0 )
 8084240:	2800      	cmp	r0, #0
 8084242:	d13c      	bne.n	80842be <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
        goto cleanup;

    /*
     * Unmask data and generate lHash
     */
    mbedtls_md_init( &md_ctx );
 8084244:	ae05      	add	r6, sp, #20
 8084246:	4630      	mov	r0, r6
 8084248:	f003 f9d2 	bl	80875f0 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 808424c:	4652      	mov	r2, sl
 808424e:	9902      	ldr	r1, [sp, #8]
 8084250:	4630      	mov	r0, r6
 8084252:	f003 f9f3 	bl	808763c <mbedtls_md_setup>
 8084256:	4682      	mov	sl, r0
 8084258:	b108      	cbz	r0, 808425e <mbedtls_rsa_rsaes_oaep_decrypt+0x96>
    {
        mbedtls_md_free( &md_ctx );
 808425a:	4630      	mov	r0, r6
 808425c:	e03b      	b.n	80842d6 <mbedtls_rsa_rsaes_oaep_decrypt+0x10e>
        goto cleanup;
    }

    /* seed: Apply seedMask to maskedSeed */
    if( ( ret = mgf_mask( buf + 1, hlen, buf + hlen + 1, ilen - hlen - 1,
 808425e:	f107 3bff 	add.w	fp, r7, #4294967295
 8084262:	44c8      	add	r8, r9
 8084264:	ebc4 0b0b 	rsb	fp, r4, fp
                          &md_ctx ) ) != 0 ||
 8084268:	9600      	str	r6, [sp, #0]
 808426a:	465b      	mov	r3, fp
 808426c:	4642      	mov	r2, r8
 808426e:	4621      	mov	r1, r4
 8084270:	f10d 0061 	add.w	r0, sp, #97	; 0x61
 8084274:	f7ff f9de 	bl	8083634 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 8084278:	4682      	mov	sl, r0
 808427a:	bb58      	cbnz	r0, 80842d4 <mbedtls_rsa_rsaes_oaep_decrypt+0x10c>
 808427c:	9600      	str	r6, [sp, #0]
 808427e:	4623      	mov	r3, r4
 8084280:	f10d 0261 	add.w	r2, sp, #97	; 0x61
 8084284:	4659      	mov	r1, fp
 8084286:	4640      	mov	r0, r8
 8084288:	f7ff f9d4 	bl	8083634 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 808428c:	4682      	mov	sl, r0
 808428e:	bb08      	cbnz	r0, 80842d4 <mbedtls_rsa_rsaes_oaep_decrypt+0x10c>
 8084290:	e024      	b.n	80842dc <mbedtls_rsa_rsaes_oaep_decrypt+0x114>
     * The only information "leaked" is whether the padding was correct or not
     * (eg, no data is copied if it was not correct). This meets the
     * recommendations in PKCS#1 v2.2: an opponent cannot distinguish between
     * the different error conditions.
     */
    if( bad != 0 )
 8084292:	5c88      	ldrb	r0, [r1, r2]
 8084294:	f080 0001 	eor.w	r0, r0, #1
 8084298:	ea50 030e 	orrs.w	r3, r0, lr
 808429c:	d151      	bne.n	8084342 <mbedtls_rsa_rsaes_oaep_decrypt+0x17a>
        pad_done |= p[i];
        pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
    }

    p += pad_len;
    bad |= *p++ ^ 0x01;
 808429e:	3201      	adds	r2, #1
 80842a0:	4411      	add	r1, r2
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
 80842a2:	aa18      	add	r2, sp, #96	; 0x60
 80842a4:	1a8a      	subs	r2, r1, r2
 80842a6:	f8dd 049c 	ldr.w	r0, [sp, #1180]	; 0x49c
 80842aa:	1aba      	subs	r2, r7, r2
 80842ac:	4282      	cmp	r2, r0
 80842ae:	d84b      	bhi.n	8084348 <mbedtls_rsa_rsaes_oaep_decrypt+0x180>
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
        goto cleanup;
    }

    *olen = ilen - (p - buf);
 80842b0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
 80842b4:	6002      	str	r2, [r0, #0]
    memcpy( output, p, *olen );
 80842b6:	f8dd 0498 	ldr.w	r0, [sp, #1176]	; 0x498
 80842ba:	f00f fe52 	bl	8093f62 <memcpy>
    ret = 0;

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
 80842be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80842c2:	a818      	add	r0, sp, #96	; 0x60
 80842c4:	f7ff f9ae 	bl	8083624 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( lhash, sizeof( lhash ) );
 80842c8:	a808      	add	r0, sp, #32
 80842ca:	2140      	movs	r1, #64	; 0x40
 80842cc:	f7ff f9aa 	bl	8083624 <_ZL15mbedtls_zeroizePvj>

    return( ret );
 80842d0:	4650      	mov	r0, sl
 80842d2:	e03c      	b.n	808434e <mbedtls_rsa_rsaes_oaep_decrypt+0x186>
                          &md_ctx ) ) != 0 ||
    /* DB: Apply dbMask to maskedDB */
        ( ret = mgf_mask( buf + hlen + 1, ilen - hlen - 1, buf + 1, hlen,
                          &md_ctx ) ) != 0 )
    {
        mbedtls_md_free( &md_ctx );
 80842d4:	a805      	add	r0, sp, #20
 80842d6:	f003 f990 	bl	80875fa <mbedtls_md_free>
        goto cleanup;
 80842da:	e7f0      	b.n	80842be <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
    }

    mbedtls_md_free( &md_ctx );
 80842dc:	4630      	mov	r0, r6

    /* Generate lHash */
    if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )
 80842de:	ae08      	add	r6, sp, #32
    {
        mbedtls_md_free( &md_ctx );
        goto cleanup;
    }

    mbedtls_md_free( &md_ctx );
 80842e0:	f003 f98b 	bl	80875fa <mbedtls_md_free>

    /* Generate lHash */
    if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )
 80842e4:	4633      	mov	r3, r6
 80842e6:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
 80842ea:	f8dd 1488 	ldr.w	r1, [sp, #1160]	; 0x488
 80842ee:	9802      	ldr	r0, [sp, #8]
 80842f0:	f003 f9e4 	bl	80876bc <mbedtls_md>
 80842f4:	4682      	mov	sl, r0
 80842f6:	2800      	cmp	r0, #0
 80842f8:	d1e1      	bne.n	80842be <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
 80842fa:	4650      	mov	r0, sl
    p = buf;
    bad = 0;

    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */
 80842fc:	f10d 0361 	add.w	r3, sp, #97	; 0x61
     * Check contents, in "constant-time"
     */
    p = buf;
    bad = 0;

    bad |= *p++; /* First byte must be 0 */
 8084300:	f899 e000 	ldrb.w	lr, [r9]

    p += hlen; /* Skip seed */
 8084304:	1919      	adds	r1, r3, r4

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
 8084306:	42a0      	cmp	r0, r4
 8084308:	d208      	bcs.n	808431c <mbedtls_rsa_rsaes_oaep_decrypt+0x154>
        bad |= lhash[i] ^ *p++;
 808430a:	5c32      	ldrb	r2, [r6, r0]
 808430c:	f811 c000 	ldrb.w	ip, [r1, r0]
    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
 8084310:	3001      	adds	r0, #1
        bad |= lhash[i] ^ *p++;
 8084312:	ea82 0c0c 	eor.w	ip, r2, ip
 8084316:	ea4c 0e0e 	orr.w	lr, ip, lr
    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
 808431a:	e7f4      	b.n	8084306 <mbedtls_rsa_rsaes_oaep_decrypt+0x13e>
 808431c:	4421      	add	r1, r4

    /* Get zero-padding len, but always read till end of buffer
     * (minus one, for the 01 byte) */
    pad_len = 0;
    pad_done = 0;
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
 808431e:	2400      	movs	r4, #0
 8084320:	460e      	mov	r6, r1
 8084322:	4622      	mov	r2, r4
 8084324:	1b7d      	subs	r5, r7, r5
 8084326:	440d      	add	r5, r1
 8084328:	42b5      	cmp	r5, r6
 808432a:	d0b2      	beq.n	8084292 <mbedtls_rsa_rsaes_oaep_decrypt+0xca>
    {
        pad_done |= p[i];
 808432c:	f816 0b01 	ldrb.w	r0, [r6], #1
 8084330:	4304      	orrs	r4, r0
        pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 8084332:	4260      	negs	r0, r4
 8084334:	4320      	orrs	r0, r4
 8084336:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 808433a:	f080 0001 	eor.w	r0, r0, #1
 808433e:	4402      	add	r2, r0

    /* Get zero-padding len, but always read till end of buffer
     * (minus one, for the 01 byte) */
    pad_len = 0;
    pad_done = 0;
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
 8084340:	e7f2      	b.n	8084328 <mbedtls_rsa_rsaes_oaep_decrypt+0x160>
     * recommendations in PKCS#1 v2.2: an opponent cannot distinguish between
     * the different error conditions.
     */
    if( bad != 0 )
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 8084342:	f8df a018 	ldr.w	sl, [pc, #24]	; 808435c <mbedtls_rsa_rsaes_oaep_decrypt+0x194>
 8084346:	e7ba      	b.n	80842be <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
 8084348:	f8df a014 	ldr.w	sl, [pc, #20]	; 8084360 <mbedtls_rsa_rsaes_oaep_decrypt+0x198>
 808434c:	e7b7      	b.n	80842be <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
    mbedtls_zeroize( lhash, sizeof( lhash ) );

    return( ret );
}
 808434e:	f20d 4d64 	addw	sp, sp, #1124	; 0x464
 8084352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084356:	bf00      	nop
 8084358:	ffffbf80 	.word	0xffffbf80
 808435c:	ffffbf00 	.word	0xffffbf00
 8084360:	ffffbc00 	.word	0xffffbc00

08084364 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>:
                                 void *p_rng,
                                 int mode, size_t *olen,
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
 8084364:	b5f0      	push	{r4, r5, r6, r7, lr}
    int ret;
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8084366:	2b01      	cmp	r3, #1
                                 void *p_rng,
                                 int mode, size_t *olen,
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
 8084368:	f2ad 4d0c 	subw	sp, sp, #1036	; 0x40c
 808436c:	461d      	mov	r5, r3
    int ret;
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 808436e:	d103      	bne.n	8084378 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x14>
 8084370:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8084374:	2b00      	cmp	r3, #0
 8084376:	d17f      	bne.n	8084478 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x114>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ilen = ctx->len;
 8084378:	6847      	ldr	r7, [r0, #4]

    if( ilen < 16 || ilen > sizeof( buf ) )
 808437a:	f1a7 0310 	sub.w	r3, r7, #16
 808437e:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 8084382:	d879      	bhi.n	8084478 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x114>
 8084384:	ae02      	add	r6, sp, #8
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8084386:	b945      	cbnz	r5, 808439a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x36>
 8084388:	4632      	mov	r2, r6
 808438a:	f8dd 1424 	ldr.w	r1, [sp, #1060]	; 0x424
 808438e:	f7ff fbfd 	bl	8083b8c <mbedtls_rsa_public>

    if( ret != 0 )
 8084392:	4604      	mov	r4, r0
 8084394:	2800      	cmp	r0, #0
 8084396:	d168      	bne.n	808446a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>
 8084398:	e02f      	b.n	80843fa <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x96>
    if( ilen < 16 || ilen > sizeof( buf ) )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 808439a:	9600      	str	r6, [sp, #0]
 808439c:	f8dd 3424 	ldr.w	r3, [sp, #1060]	; 0x424
 80843a0:	f7ff fc36 	bl	8083c10 <mbedtls_rsa_private>

    if( ret != 0 )
 80843a4:	4604      	mov	r4, r0
 80843a6:	2800      	cmp	r0, #0
 80843a8:	d15f      	bne.n	808446a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>
     * Check and get padding len in "constant-time"
     */
    bad |= *p++; /* First byte must be 0 */

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
 80843aa:	2d01      	cmp	r5, #1
    bad = 0;

    /*
     * Check and get padding len in "constant-time"
     */
    bad |= *p++; /* First byte must be 0 */
 80843ac:	7832      	ldrb	r2, [r6, #0]

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
 80843ae:	d125      	bne.n	80843fc <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x98>
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80843b0:	4601      	mov	r1, r0
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
    int ret;
    size_t ilen, pad_count = 0, i;
 80843b2:	4686      	mov	lr, r0
    bad |= *p++; /* First byte must be 0 */

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;
 80843b4:	7873      	ldrb	r3, [r6, #1]

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80843b6:	1efd      	subs	r5, r7, #3
    bad |= *p++; /* First byte must be 0 */

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;
 80843b8:	f083 0302 	eor.w	r3, r3, #2
 80843bc:	4313      	orrs	r3, r2

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80843be:	42a9      	cmp	r1, r5
 80843c0:	d212      	bcs.n	80843e8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x84>
        {
            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
 80843c2:	1872      	adds	r2, r6, r1
 80843c4:	7890      	ldrb	r0, [r2, #2]
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80843c6:	3101      	adds	r1, #1
        {
            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
 80843c8:	4242      	negs	r2, r0
 80843ca:	4310      	orrs	r0, r2
 80843cc:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 80843d0:	f080 0001 	eor.w	r0, r0, #1
 80843d4:	4304      	orrs	r4, r0
 80843d6:	b2e4      	uxtb	r4, r4
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 80843d8:	4262      	negs	r2, r4
 80843da:	4322      	orrs	r2, r4
 80843dc:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 80843e0:	f082 0201 	eor.w	r2, r2, #1
 80843e4:	4496      	add	lr, r2
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80843e6:	e7ea      	b.n	80843be <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x5a>
            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
        }

        p += pad_count;
        bad |= *p++; /* Must be zero */
 80843e8:	f10d 020a 	add.w	r2, sp, #10
 80843ec:	f10e 0101 	add.w	r1, lr, #1
 80843f0:	4411      	add	r1, r2
 80843f2:	f812 200e 	ldrb.w	r2, [r2, lr]
 80843f6:	4313      	orrs	r3, r2
 80843f8:	e01e      	b.n	8084438 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xd4>
    bad = 0;

    /*
     * Check and get padding len in "constant-time"
     */
    bad |= *p++; /* First byte must be 0 */
 80843fa:	7832      	ldrb	r2, [r6, #0]
        p += pad_count;
        bad |= *p++; /* Must be zero */
    }
    else
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;
 80843fc:	7873      	ldrb	r3, [r6, #1]

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80843fe:	1efc      	subs	r4, r7, #3
        p += pad_count;
        bad |= *p++; /* Must be zero */
    }
    else
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;
 8084400:	f083 0301 	eor.w	r3, r3, #1
 8084404:	4313      	orrs	r3, r2
                                 unsigned char *output,
                                 size_t output_max_len)
{
    int ret;
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
 8084406:	2200      	movs	r2, #0
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 8084408:	4611      	mov	r1, r2
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
    int ret;
    size_t ilen, pad_count = 0, i;
 808440a:	4696      	mov	lr, r2
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 808440c:	42a1      	cmp	r1, r4
 808440e:	d20b      	bcs.n	8084428 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xc4>
        {
            pad_done |= ( p[i] != 0xFF );
 8084410:	1870      	adds	r0, r6, r1
 8084412:	7880      	ldrb	r0, [r0, #2]
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 8084414:	3101      	adds	r1, #1
        {
            pad_done |= ( p[i] != 0xFF );
 8084416:	28ff      	cmp	r0, #255	; 0xff
 8084418:	bf18      	it	ne
 808441a:	f042 0201 	orrne.w	r2, r2, #1
            pad_count += ( pad_done == 0 );
 808441e:	f082 0001 	eor.w	r0, r2, #1
 8084422:	b2c0      	uxtb	r0, r0
 8084424:	4486      	add	lr, r0
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 8084426:	e7f1      	b.n	808440c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xa8>
            pad_done |= ( p[i] != 0xFF );
            pad_count += ( pad_done == 0 );
        }

        p += pad_count;
        bad |= *p++; /* Must be zero */
 8084428:	f10d 020a 	add.w	r2, sp, #10
 808442c:	f812 500e 	ldrb.w	r5, [r2, lr]
 8084430:	f10e 0101 	add.w	r1, lr, #1
 8084434:	4411      	add	r1, r2
 8084436:	432b      	orrs	r3, r5
    }

    bad |= ( pad_count < 8 );

    if( bad )
 8084438:	f1be 0f07 	cmp.w	lr, #7
 808443c:	bf8c      	ite	hi
 808443e:	461c      	movhi	r4, r3
 8084440:	f043 0401 	orrls.w	r4, r3, #1
 8084444:	b264      	sxtb	r4, r4
 8084446:	b96c      	cbnz	r4, 8084464 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x100>
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
 8084448:	1b8a      	subs	r2, r1, r6
 808444a:	f8dd 342c 	ldr.w	r3, [sp, #1068]	; 0x42c
 808444e:	1aba      	subs	r2, r7, r2
 8084450:	429a      	cmp	r2, r3
 8084452:	d809      	bhi.n	8084468 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x104>
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
        goto cleanup;
    }

    *olen = ilen - (p - buf);
 8084454:	f8dd 3420 	ldr.w	r3, [sp, #1056]	; 0x420
    memcpy( output, p, *olen );
 8084458:	f8dd 0428 	ldr.w	r0, [sp, #1064]	; 0x428
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
        goto cleanup;
    }

    *olen = ilen - (p - buf);
 808445c:	601a      	str	r2, [r3, #0]
    memcpy( output, p, *olen );
 808445e:	f00f fd80 	bl	8093f62 <memcpy>
 8084462:	e002      	b.n	808446a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>

    bad |= ( pad_count < 8 );

    if( bad )
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 8084464:	4c06      	ldr	r4, [pc, #24]	; (8084480 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x11c>)
 8084466:	e000      	b.n	808446a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
 8084468:	4c06      	ldr	r4, [pc, #24]	; (8084484 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x120>)
    *olen = ilen - (p - buf);
    memcpy( output, p, *olen );
    ret = 0;

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
 808446a:	4630      	mov	r0, r6
 808446c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8084470:	f7ff f8d8 	bl	8083624 <_ZL15mbedtls_zeroizePvj>

    return( ret );
 8084474:	4620      	mov	r0, r4
 8084476:	e000      	b.n	808447a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x116>
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8084478:	4803      	ldr	r0, [pc, #12]	; (8084488 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x124>)

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );

    return( ret );
}
 808447a:	f20d 4d0c 	addw	sp, sp, #1036	; 0x40c
 808447e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084480:	ffffbf00 	.word	0xffffbf00
 8084484:	ffffbc00 	.word	0xffffbc00
 8084488:	ffffbf80 	.word	0xffffbf80

0808448c <mbedtls_rsa_pkcs1_decrypt>:
                       void *p_rng,
                       int mode, size_t *olen,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t output_max_len)
{
 808448c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808448e:	b087      	sub	sp, #28
    switch( ctx->padding )
 8084490:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	; 0xa4
                       void *p_rng,
                       int mode, size_t *olen,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t output_max_len)
{
 8084494:	ac0c      	add	r4, sp, #48	; 0x30
 8084496:	ccf0      	ldmia	r4, {r4, r5, r6, r7}
    switch( ctx->padding )
 8084498:	f1be 0f00 	cmp.w	lr, #0
 808449c:	d00c      	beq.n	80844b8 <mbedtls_rsa_pkcs1_decrypt+0x2c>
 808449e:	f1be 0f01 	cmp.w	lr, #1
 80844a2:	d112      	bne.n	80844ca <mbedtls_rsa_pkcs1_decrypt+0x3e>

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsaes_oaep_decrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           olen, input, output,
                                           output_max_len );
 80844a4:	9402      	str	r4, [sp, #8]
 80844a6:	2400      	movs	r4, #0
 80844a8:	9705      	str	r7, [sp, #20]
 80844aa:	9604      	str	r6, [sp, #16]
 80844ac:	9503      	str	r5, [sp, #12]
 80844ae:	9401      	str	r4, [sp, #4]
 80844b0:	9400      	str	r4, [sp, #0]
 80844b2:	f7ff fe89 	bl	80841c8 <mbedtls_rsa_rsaes_oaep_decrypt>
 80844b6:	e009      	b.n	80844cc <mbedtls_rsa_pkcs1_decrypt+0x40>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
                                                input, output, output_max_len );
 80844b8:	970f      	str	r7, [sp, #60]	; 0x3c
 80844ba:	960e      	str	r6, [sp, #56]	; 0x38
 80844bc:	950d      	str	r5, [sp, #52]	; 0x34
 80844be:	940c      	str	r4, [sp, #48]	; 0x30
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 80844c0:	b007      	add	sp, #28
 80844c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
                                                input, output, output_max_len );
 80844c6:	f7ff bf4d 	b.w	8084364 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>
                                           olen, input, output,
                                           output_max_len );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 80844ca:	4801      	ldr	r0, [pc, #4]	; (80844d0 <mbedtls_rsa_pkcs1_decrypt+0x44>)
    }
}
 80844cc:	b007      	add	sp, #28
 80844ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80844d0:	ffffbf00 	.word	0xffffbf00

080844d4 <mbedtls_rsa_rsassa_pss_sign>:
                         int mode,
                         mbedtls_md_type_t md_alg,
                         unsigned int hashlen,
                         const unsigned char *hash,
                         unsigned char *sig )
{
 80844d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret;
    size_t msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80844d8:	2b01      	cmp	r3, #1
                         int mode,
                         mbedtls_md_type_t md_alg,
                         unsigned int hashlen,
                         const unsigned char *hash,
                         unsigned char *sig )
{
 80844da:	b09d      	sub	sp, #116	; 0x74
 80844dc:	4680      	mov	r8, r0
 80844de:	468a      	mov	sl, r1
 80844e0:	9204      	str	r2, [sp, #16]
 80844e2:	9305      	str	r3, [sp, #20]
 80844e4:	f89d 0098 	ldrb.w	r0, [sp, #152]	; 0x98
 80844e8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
    int ret;
    size_t msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80844ea:	d105      	bne.n	80844f8 <mbedtls_rsa_rsassa_pss_sign+0x24>
 80844ec:	f8d8 30a4 	ldr.w	r3, [r8, #164]	; 0xa4
 80844f0:	2b01      	cmp	r3, #1
 80844f2:	d001      	beq.n	80844f8 <mbedtls_rsa_rsassa_pss_sign+0x24>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80844f4:	4858      	ldr	r0, [pc, #352]	; (8084658 <mbedtls_rsa_rsassa_pss_sign+0x184>)
 80844f6:	e0ab      	b.n	8084650 <mbedtls_rsa_rsassa_pss_sign+0x17c>

    if( f_rng == NULL )
 80844f8:	f1ba 0f00 	cmp.w	sl, #0
 80844fc:	d0fa      	beq.n	80844f4 <mbedtls_rsa_rsassa_pss_sign+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
 80844fe:	f8d8 6004 	ldr.w	r6, [r8, #4]

    if( md_alg != MBEDTLS_MD_NONE )
 8084502:	b130      	cbz	r0, 8084512 <mbedtls_rsa_rsassa_pss_sign+0x3e>
    {
        /* Gather length of hash to sign */
        md_info = mbedtls_md_info_from_type( md_alg );
 8084504:	f003 f868 	bl	80875d8 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 8084508:	2800      	cmp	r0, #0
 808450a:	d0f3      	beq.n	80844f4 <mbedtls_rsa_rsassa_pss_sign+0x20>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
 808450c:	f003 f9a8 	bl	8087860 <mbedtls_md_get_size>
 8084510:	9027      	str	r0, [sp, #156]	; 0x9c
    }

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 8084512:	f898 00a8 	ldrb.w	r0, [r8, #168]	; 0xa8
 8084516:	f003 f85f 	bl	80875d8 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 808451a:	4683      	mov	fp, r0
 808451c:	2800      	cmp	r0, #0
 808451e:	d0e9      	beq.n	80844f4 <mbedtls_rsa_rsassa_pss_sign+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 8084520:	f003 f99e 	bl	8087860 <mbedtls_md_get_size>
    slen = hlen;

    if( olen < hlen + slen + 2 )
 8084524:	0045      	lsls	r5, r0, #1
 8084526:	1cab      	adds	r3, r5, #2
 8084528:	429e      	cmp	r6, r3

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 808452a:	4607      	mov	r7, r0
    slen = hlen;

    if( olen < hlen + slen + 2 )
 808452c:	d3e2      	bcc.n	80844f4 <mbedtls_rsa_rsassa_pss_sign+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    memset( sig, 0, olen );
 808452e:	4632      	mov	r2, r6
 8084530:	2100      	movs	r1, #0
 8084532:	4620      	mov	r0, r4
 8084534:	f00f fd3b 	bl	8093fae <memset>

    /* Generate salt of length slen */
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
 8084538:	463a      	mov	r2, r7
 808453a:	a90c      	add	r1, sp, #48	; 0x30
 808453c:	9804      	ldr	r0, [sp, #16]
 808453e:	47d0      	blx	sl
 8084540:	b110      	cbz	r0, 8084548 <mbedtls_rsa_rsassa_pss_sign+0x74>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 8084542:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
 8084546:	e083      	b.n	8084650 <mbedtls_rsa_rsassa_pss_sign+0x17c>

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 8084548:	f108 0308 	add.w	r3, r8, #8
 808454c:	9007      	str	r0, [sp, #28]
 808454e:	4618      	mov	r0, r3
 8084550:	9303      	str	r3, [sp, #12]
 8084552:	f006 fc9a 	bl	808ae8a <mbedtls_mpi_bitlen>
    p += olen - hlen * 2 - 2;
 8084556:	1b75      	subs	r5, r6, r5
    *p++ = 0x01;
 8084558:	f105 39ff 	add.w	r9, r5, #4294967295
 808455c:	2201      	movs	r2, #1
 808455e:	4425      	add	r5, r4
 8084560:	44a1      	add	r9, r4
 8084562:	f805 2c02 	strb.w	r2, [r5, #-2]
    memcpy( p, salt, slen );
 8084566:	a90c      	add	r1, sp, #48	; 0x30
 8084568:	463a      	mov	r2, r7
    /* Generate salt of length slen */
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 808456a:	9006      	str	r0, [sp, #24]
    p += olen - hlen * 2 - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
    p += slen;

    mbedtls_md_init( &md_ctx );
 808456c:	ad09      	add	r5, sp, #36	; 0x24

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    p += olen - hlen * 2 - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
 808456e:	4648      	mov	r0, r9
 8084570:	f00f fcf7 	bl	8093f62 <memcpy>
    p += slen;

    mbedtls_md_init( &md_ctx );
 8084574:	4628      	mov	r0, r5
 8084576:	f003 f83b 	bl	80875f0 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 808457a:	9b07      	ldr	r3, [sp, #28]
 808457c:	4659      	mov	r1, fp
 808457e:	461a      	mov	r2, r3
 8084580:	4628      	mov	r0, r5
 8084582:	f003 f85b 	bl	808763c <mbedtls_md_setup>
 8084586:	4602      	mov	r2, r0
 8084588:	2800      	cmp	r0, #0
 808458a:	d14a      	bne.n	8084622 <mbedtls_rsa_rsassa_pss_sign+0x14e>
        goto exit;

    /* Generate H = Hash( M' ) */
    if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
 808458c:	4628      	mov	r0, r5
 808458e:	f003 f877 	bl	8087680 <mbedtls_md_starts>
 8084592:	4602      	mov	r2, r0
 8084594:	2800      	cmp	r0, #0
 8084596:	d144      	bne.n	8084622 <mbedtls_rsa_rsassa_pss_sign+0x14e>
    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    p += olen - hlen * 2 - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
    p += slen;
 8084598:	eb09 0b07 	add.w	fp, r9, r7
        goto exit;

    /* Generate H = Hash( M' ) */
    if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
        goto exit;
    if( ( ret = mbedtls_md_update( &md_ctx, p, 8 ) ) != 0 )
 808459c:	2208      	movs	r2, #8
 808459e:	4659      	mov	r1, fp
 80845a0:	4628      	mov	r0, r5
 80845a2:	f003 f877 	bl	8087694 <mbedtls_md_update>
 80845a6:	4602      	mov	r2, r0
 80845a8:	2800      	cmp	r0, #0
 80845aa:	d13a      	bne.n	8084622 <mbedtls_rsa_rsassa_pss_sign+0x14e>
        goto exit;
    if( ( ret = mbedtls_md_update( &md_ctx, hash, hashlen ) ) != 0 )
 80845ac:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80845ae:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80845b0:	4628      	mov	r0, r5
 80845b2:	f003 f86f 	bl	8087694 <mbedtls_md_update>
 80845b6:	4602      	mov	r2, r0
 80845b8:	bb98      	cbnz	r0, 8084622 <mbedtls_rsa_rsassa_pss_sign+0x14e>
        goto exit;
    if( ( ret = mbedtls_md_update( &md_ctx, salt, slen ) ) != 0 )
 80845ba:	463a      	mov	r2, r7
 80845bc:	a90c      	add	r1, sp, #48	; 0x30
 80845be:	4628      	mov	r0, r5
 80845c0:	f003 f868 	bl	8087694 <mbedtls_md_update>
 80845c4:	4602      	mov	r2, r0
 80845c6:	bb60      	cbnz	r0, 8084622 <mbedtls_rsa_rsassa_pss_sign+0x14e>
        goto exit;
    if( ( ret = mbedtls_md_finish( &md_ctx, p ) ) != 0 )
 80845c8:	4659      	mov	r1, fp
 80845ca:	4628      	mov	r0, r5
 80845cc:	f003 f86c 	bl	80876a8 <mbedtls_md_finish>
 80845d0:	4602      	mov	r2, r0
 80845d2:	bb30      	cbnz	r0, 8084622 <mbedtls_rsa_rsassa_pss_sign+0x14e>
                         unsigned char *sig )
{
    size_t olen;
    unsigned char *p = sig;
    unsigned char salt[MBEDTLS_MD_MAX_SIZE];
    unsigned int slen, hlen, offset = 0;
 80845d4:	9b06      	ldr	r3, [sp, #24]
    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
        offset = 1;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
 80845d6:	1e71      	subs	r1, r6, #1
                         unsigned char *sig )
{
    size_t olen;
    unsigned char *p = sig;
    unsigned char salt[MBEDTLS_MD_MAX_SIZE];
    unsigned int slen, hlen, offset = 0;
 80845d8:	3b01      	subs	r3, #1
 80845da:	f013 0f07 	tst.w	r3, #7
 80845de:	bf0c      	ite	eq
 80845e0:	2001      	moveq	r0, #1
 80845e2:	2000      	movne	r0, #0
    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
        offset = 1;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
 80845e4:	1bc9      	subs	r1, r1, r7
 80845e6:	465a      	mov	r2, fp
 80845e8:	1a09      	subs	r1, r1, r0
 80845ea:	9500      	str	r5, [sp, #0]
 80845ec:	463b      	mov	r3, r7
 80845ee:	4420      	add	r0, r4
 80845f0:	f7ff f820 	bl	8083634 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 80845f4:	4602      	mov	r2, r0
 80845f6:	b9a0      	cbnz	r0, 8084622 <mbedtls_rsa_rsassa_pss_sign+0x14e>
 80845f8:	9006      	str	r0, [sp, #24]
                          &md_ctx ) ) != 0 )
        goto exit;

    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80845fa:	9803      	ldr	r0, [sp, #12]
 80845fc:	f006 fc45 	bl	808ae8a <mbedtls_mpi_bitlen>
    sig[0] &= 0xFF >> ( olen * 8 - msb );
 8084600:	ebc0 00c6 	rsb	r0, r0, r6, lsl #3
 8084604:	7823      	ldrb	r3, [r4, #0]
 8084606:	3001      	adds	r0, #1
 8084608:	26ff      	movs	r6, #255	; 0xff
 808460a:	fa46 f000 	asr.w	r0, r6, r0
 808460e:	4018      	ands	r0, r3

    p += hlen;
    *p++ = 0xBC;
 8084610:	23bc      	movs	r3, #188	; 0xbc
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
                          &md_ctx ) ) != 0 )
        goto exit;

    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    sig[0] &= 0xFF >> ( olen * 8 - msb );
 8084612:	7020      	strb	r0, [r4, #0]

    p += hlen;
    *p++ = 0xBC;

    mbedtls_zeroize( salt, sizeof( salt ) );
 8084614:	2140      	movs	r1, #64	; 0x40

    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    sig[0] &= 0xFF >> ( olen * 8 - msb );

    p += hlen;
    *p++ = 0xBC;
 8084616:	f809 3017 	strb.w	r3, [r9, r7, lsl #1]

    mbedtls_zeroize( salt, sizeof( salt ) );
 808461a:	a80c      	add	r0, sp, #48	; 0x30
 808461c:	f7ff f802 	bl	8083624 <_ZL15mbedtls_zeroizePvj>
 8084620:	9a06      	ldr	r2, [sp, #24]

exit:
    mbedtls_md_free( &md_ctx );
 8084622:	4628      	mov	r0, r5
 8084624:	9203      	str	r2, [sp, #12]
 8084626:	f002 ffe8 	bl	80875fa <mbedtls_md_free>

    if( ret != 0 )
 808462a:	9a03      	ldr	r2, [sp, #12]
 808462c:	b97a      	cbnz	r2, 808464e <mbedtls_rsa_rsassa_pss_sign+0x17a>
        return( ret );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, sig, sig )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig ) );
 808462e:	9b05      	ldr	r3, [sp, #20]
 8084630:	b92b      	cbnz	r3, 808463e <mbedtls_rsa_rsassa_pss_sign+0x16a>
 8084632:	4622      	mov	r2, r4
 8084634:	4621      	mov	r1, r4
 8084636:	4640      	mov	r0, r8
 8084638:	f7ff faa8 	bl	8083b8c <mbedtls_rsa_public>
 808463c:	e008      	b.n	8084650 <mbedtls_rsa_rsassa_pss_sign+0x17c>
 808463e:	9400      	str	r4, [sp, #0]
 8084640:	4623      	mov	r3, r4
 8084642:	9a04      	ldr	r2, [sp, #16]
 8084644:	4651      	mov	r1, sl
 8084646:	4640      	mov	r0, r8
 8084648:	f7ff fae2 	bl	8083c10 <mbedtls_rsa_private>
 808464c:	e000      	b.n	8084650 <mbedtls_rsa_rsassa_pss_sign+0x17c>
 808464e:	4610      	mov	r0, r2
}
 8084650:	b01d      	add	sp, #116	; 0x74
 8084652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084656:	bf00      	nop
 8084658:	ffffbf80 	.word	0xffffbf80

0808465c <mbedtls_rsa_rsassa_pkcs1_v15_sign>:
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
 808465c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    int ret;
    unsigned char *sig_try = NULL, *verif = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8084660:	2b01      	cmp	r3, #1
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
 8084662:	4689      	mov	r9, r1
 8084664:	a90b      	add	r1, sp, #44	; 0x2c
 8084666:	4605      	mov	r5, r0
 8084668:	4692      	mov	sl, r2
 808466a:	c986      	ldmia	r1, {r1, r2, r7}
 808466c:	461c      	mov	r4, r3
 808466e:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
    int ret;
    unsigned char *sig_try = NULL, *verif = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8084672:	d103      	bne.n	808467c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x20>
 8084674:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 8084678:	2b00      	cmp	r3, #0
 808467a:	d14b      	bne.n	8084714 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xb8>

    /*
     * Prepare PKCS1-v1.5 encoding (padding and hash identifier)
     */

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash,
 808467c:	9700      	str	r7, [sp, #0]
 808467e:	686b      	ldr	r3, [r5, #4]
 8084680:	f7ff f82a 	bl	80836d8 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>
 8084684:	2800      	cmp	r0, #0
 8084686:	d149      	bne.n	808471c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>

    /*
     * Call respective RSA primitive
     */

    if( mode == MBEDTLS_RSA_PUBLIC )
 8084688:	b93c      	cbnz	r4, 808469a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x3e>
    {
        /* Skip verification on a public key operation */
        return( mbedtls_rsa_public( ctx, sig, sig ) );
 808468a:	463a      	mov	r2, r7
 808468c:	4639      	mov	r1, r7
 808468e:	4628      	mov	r0, r5
cleanup:
    mbedtls_free( sig_try );
    mbedtls_free( verif );

    return( ret );
}
 8084690:	b002      	add	sp, #8
 8084692:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     */

    if( mode == MBEDTLS_RSA_PUBLIC )
    {
        /* Skip verification on a public key operation */
        return( mbedtls_rsa_public( ctx, sig, sig ) );
 8084696:	f7ff ba79 	b.w	8083b8c <mbedtls_rsa_public>
     *
     * In order to prevent Lenstra's attack, make the signature in a
     * temporary buffer and check it before returning it.
     */

    sig_try = (unsigned char *)mbedtls_calloc( 1, ctx->len );
 808469a:	686c      	ldr	r4, [r5, #4]
 808469c:	2001      	movs	r0, #1
 808469e:	4621      	mov	r1, r4
 80846a0:	f00f fb38 	bl	8093d14 <calloc>
    if( sig_try == NULL )
 80846a4:	4606      	mov	r6, r0
 80846a6:	b3b8      	cbz	r0, 8084718 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xbc>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );

    verif = (unsigned char *)mbedtls_calloc( 1, ctx->len );
 80846a8:	4621      	mov	r1, r4
 80846aa:	2001      	movs	r0, #1
 80846ac:	f00f fb32 	bl	8093d14 <calloc>
    if( verif == NULL )
 80846b0:	4680      	mov	r8, r0
 80846b2:	b918      	cbnz	r0, 80846bc <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x60>
    {
        mbedtls_free( sig_try );
 80846b4:	4630      	mov	r0, r6
 80846b6:	f00c fd4f 	bl	8091158 <free>
 80846ba:	e02d      	b.n	8084718 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xbc>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    }

    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
 80846bc:	9600      	str	r6, [sp, #0]
 80846be:	463b      	mov	r3, r7
 80846c0:	4652      	mov	r2, sl
 80846c2:	4649      	mov	r1, r9
 80846c4:	4628      	mov	r0, r5
 80846c6:	f7ff faa3 	bl	8083c10 <mbedtls_rsa_private>
 80846ca:	4604      	mov	r4, r0
 80846cc:	b9d0      	cbnz	r0, 8084704 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );
 80846ce:	4642      	mov	r2, r8
 80846d0:	4631      	mov	r1, r6
 80846d2:	4628      	mov	r0, r5
 80846d4:	f7ff fa5a 	bl	8083b8c <mbedtls_rsa_public>
 80846d8:	4604      	mov	r4, r0
 80846da:	b998      	cbnz	r0, 8084704 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa8>
static inline int mbedtls_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;
 80846dc:	4603      	mov	r3, r0

    for( i = 0; i < n; i++ )
 80846de:	4602      	mov	r2, r0
    }

    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
 80846e0:	686d      	ldr	r5, [r5, #4]
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 80846e2:	42aa      	cmp	r2, r5
 80846e4:	d007      	beq.n	80846f6 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x9a>
        diff |= A[i] ^ B[i];
 80846e6:	f818 0002 	ldrb.w	r0, [r8, r2]
 80846ea:	5cb9      	ldrb	r1, [r7, r2]
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 80846ec:	3201      	adds	r2, #1
        diff |= A[i] ^ B[i];
 80846ee:	4041      	eors	r1, r0
 80846f0:	430b      	orrs	r3, r1
 80846f2:	b2db      	uxtb	r3, r3
 80846f4:	e7f5      	b.n	80846e2 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x86>
    }

    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
 80846f6:	b923      	cbnz	r3, 8084702 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa6>
    {
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
        goto cleanup;
    }

    memcpy( sig, sig_try, ctx->len );
 80846f8:	4631      	mov	r1, r6
 80846fa:	4638      	mov	r0, r7
 80846fc:	f00f fc31 	bl	8093f62 <memcpy>
 8084700:	e000      	b.n	8084704 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
 8084702:	4c08      	ldr	r4, [pc, #32]	; (8084724 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc8>)
    }

    memcpy( sig, sig_try, ctx->len );

cleanup:
    mbedtls_free( sig_try );
 8084704:	4630      	mov	r0, r6
 8084706:	f00c fd27 	bl	8091158 <free>
    mbedtls_free( verif );
 808470a:	4640      	mov	r0, r8
 808470c:	f00c fd24 	bl	8091158 <free>

    return( ret );
 8084710:	4620      	mov	r0, r4
 8084712:	e003      	b.n	808471c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>
{
    int ret;
    unsigned char *sig_try = NULL, *verif = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8084714:	4804      	ldr	r0, [pc, #16]	; (8084728 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xcc>)
 8084716:	e001      	b.n	808471c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>
     * temporary buffer and check it before returning it.
     */

    sig_try = (unsigned char *)mbedtls_calloc( 1, ctx->len );
    if( sig_try == NULL )
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8084718:	f06f 000f 	mvn.w	r0, #15
cleanup:
    mbedtls_free( sig_try );
    mbedtls_free( verif );

    return( ret );
}
 808471c:	b002      	add	sp, #8
 808471e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8084722:	bf00      	nop
 8084724:	ffffbd00 	.word	0xffffbd00
 8084728:	ffffbf80 	.word	0xffffbf80

0808472c <mbedtls_rsa_pkcs1_sign>:
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
 808472c:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
 808472e:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	; 0xa4
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
 8084732:	ad06      	add	r5, sp, #24
 8084734:	f89d 4014 	ldrb.w	r4, [sp, #20]
 8084738:	cde0      	ldmia	r5, {r5, r6, r7}
    switch( ctx->padding )
 808473a:	f1be 0f00 	cmp.w	lr, #0
 808473e:	d00a      	beq.n	8084756 <mbedtls_rsa_pkcs1_sign+0x2a>
 8084740:	f1be 0f01 	cmp.w	lr, #1
 8084744:	d10f      	bne.n	8084766 <mbedtls_rsa_pkcs1_sign+0x3a>
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
                                        hashlen, hash, sig );
 8084746:	9708      	str	r7, [sp, #32]
 8084748:	9607      	str	r6, [sp, #28]
 808474a:	9506      	str	r5, [sp, #24]
 808474c:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 808474e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
                                        hashlen, hash, sig );
 8084752:	f7ff bebf 	b.w	80844d4 <mbedtls_rsa_rsassa_pss_sign>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
                                              hashlen, hash, sig );
 8084756:	9708      	str	r7, [sp, #32]
 8084758:	9607      	str	r6, [sp, #28]
 808475a:	9506      	str	r5, [sp, #24]
 808475c:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 808475e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
                                              hashlen, hash, sig );
 8084762:	f7ff bf7b 	b.w	808465c <mbedtls_rsa_rsassa_pkcs1_v15_sign>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8084766:	4801      	ldr	r0, [pc, #4]	; (808476c <mbedtls_rsa_pkcs1_sign+0x40>)
 8084768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808476a:	bf00      	nop
 808476c:	ffffbf00 	.word	0xffffbf00

08084770 <mbedtls_rsa_rsassa_pss_verify_ext>:
                               unsigned int hashlen,
                               const unsigned char *hash,
                               mbedtls_md_type_t mgf1_hash_id,
                               int expected_salt_len,
                               const unsigned char *sig )
{
 8084770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t observed_salt_len, msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8084774:	2b01      	cmp	r3, #1
                               unsigned int hashlen,
                               const unsigned char *hash,
                               mbedtls_md_type_t mgf1_hash_id,
                               int expected_salt_len,
                               const unsigned char *sig )
{
 8084776:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
 808477a:	4605      	mov	r5, r0
 808477c:	f89d 8488 	ldrb.w	r8, [sp, #1160]	; 0x488
    size_t observed_salt_len, msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8084780:	d105      	bne.n	808478e <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
 8084782:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
 8084786:	2801      	cmp	r0, #1
 8084788:	d001      	beq.n	808478e <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 808478a:	4861      	ldr	r0, [pc, #388]	; (8084910 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a0>)
 808478c:	e0bb      	b.n	8084906 <mbedtls_rsa_rsassa_pss_verify_ext+0x196>

    siglen = ctx->len;
 808478e:	686f      	ldr	r7, [r5, #4]

    if( siglen < 16 || siglen > sizeof( buf ) )
 8084790:	f1a7 0010 	sub.w	r0, r7, #16
 8084794:	f5b0 7f7c 	cmp.w	r0, #1008	; 0x3f0
 8084798:	d8f7      	bhi.n	808478a <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
 808479a:	ae18      	add	r6, sp, #96	; 0x60
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
 808479c:	b933      	cbnz	r3, 80847ac <mbedtls_rsa_rsassa_pss_verify_ext+0x3c>
 808479e:	4632      	mov	r2, r6
 80847a0:	f8dd 149c 	ldr.w	r1, [sp, #1180]	; 0x49c
 80847a4:	4628      	mov	r0, r5
 80847a6:	f7ff f9f1 	bl	8083b8c <mbedtls_rsa_public>
 80847aa:	e005      	b.n	80847b8 <mbedtls_rsa_rsassa_pss_verify_ext+0x48>
 80847ac:	9600      	str	r6, [sp, #0]
 80847ae:	f8dd 349c 	ldr.w	r3, [sp, #1180]	; 0x49c
 80847b2:	4628      	mov	r0, r5
 80847b4:	f7ff fa2c 	bl	8083c10 <mbedtls_rsa_private>

    if( ret != 0 )
 80847b8:	2800      	cmp	r0, #0
 80847ba:	f040 80a4 	bne.w	8084906 <mbedtls_rsa_rsassa_pss_verify_ext+0x196>
        return( ret );

    p = buf;

    if( buf[siglen - 1] != 0xBC )
 80847be:	1e7c      	subs	r4, r7, #1
 80847c0:	5d33      	ldrb	r3, [r6, r4]
 80847c2:	2bbc      	cmp	r3, #188	; 0xbc
 80847c4:	f040 809e 	bne.w	8084904 <mbedtls_rsa_rsassa_pss_verify_ext+0x194>
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );

    if( md_alg != MBEDTLS_MD_NONE )
 80847c8:	f1b8 0f00 	cmp.w	r8, #0
 80847cc:	d008      	beq.n	80847e0 <mbedtls_rsa_rsassa_pss_verify_ext+0x70>
    {
        /* Gather length of hash to sign */
        md_info = mbedtls_md_info_from_type( md_alg );
 80847ce:	4640      	mov	r0, r8
 80847d0:	f002 ff02 	bl	80875d8 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 80847d4:	2800      	cmp	r0, #0
 80847d6:	d0d8      	beq.n	808478a <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
 80847d8:	f003 f842 	bl	8087860 <mbedtls_md_get_size>
 80847dc:	f8cd 048c 	str.w	r0, [sp, #1164]	; 0x48c
    }

    md_info = mbedtls_md_info_from_type( mgf1_hash_id );
 80847e0:	f89d 0494 	ldrb.w	r0, [sp, #1172]	; 0x494
 80847e4:	f002 fef8 	bl	80875d8 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 80847e8:	4681      	mov	r9, r0
 80847ea:	2800      	cmp	r0, #0
 80847ec:	d0cd      	beq.n	808478a <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 80847ee:	f003 f837 	bl	8087860 <mbedtls_md_get_size>

    memset( zeros, 0, 8 );
 80847f2:	2300      	movs	r3, #0

    md_info = mbedtls_md_info_from_type( mgf1_hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 80847f4:	4682      	mov	sl, r0
    memset( zeros, 0, 8 );

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80847f6:	f105 0008 	add.w	r0, r5, #8
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );

    memset( zeros, 0, 8 );
 80847fa:	9303      	str	r3, [sp, #12]
 80847fc:	9304      	str	r3, [sp, #16]

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80847fe:	f006 fb44 	bl	808ae8a <mbedtls_mpi_bitlen>

    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
 8084802:	00fb      	lsls	r3, r7, #3
    memset( zeros, 0, 8 );

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 8084804:	f100 38ff 	add.w	r8, r0, #4294967295

    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
 8084808:	7832      	ldrb	r2, [r6, #0]
 808480a:	f1c3 0308 	rsb	r3, r3, #8
 808480e:	4443      	add	r3, r8
 8084810:	fa52 f303 	asrs.w	r3, r2, r3
 8084814:	d1b9      	bne.n	808478a <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
 8084816:	f018 0f07 	tst.w	r8, #7
    {
        p++;
        siglen -= 1;
 808481a:	bf08      	it	eq
 808481c:	4627      	moveq	r7, r4
    }

    if( siglen < hlen + 2 )
 808481e:	f10a 0302 	add.w	r3, sl, #2
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
    {
        p++;
 8084822:	bf0c      	ite	eq
 8084824:	f10d 0561 	addeq.w	r5, sp, #97	; 0x61
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );

    if( ret != 0 )
        return( ret );

    p = buf;
 8084828:	4635      	movne	r5, r6
    {
        p++;
        siglen -= 1;
    }

    if( siglen < hlen + 2 )
 808482a:	429f      	cmp	r7, r3
 808482c:	d3ad      	bcc.n	808478a <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    hash_start = p + siglen - hlen - 1;

    mbedtls_md_init( &md_ctx );
 808482e:	ac05      	add	r4, sp, #20
 8084830:	4620      	mov	r0, r4
 8084832:	f002 fedd 	bl	80875f0 <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 8084836:	2200      	movs	r2, #0
 8084838:	4649      	mov	r1, r9
 808483a:	4620      	mov	r0, r4
 808483c:	f002 fefe 	bl	808763c <mbedtls_md_setup>
 8084840:	4683      	mov	fp, r0
 8084842:	2800      	cmp	r0, #0
 8084844:	d159      	bne.n	80848fa <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        siglen -= 1;
    }

    if( siglen < hlen + 2 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    hash_start = p + siglen - hlen - 1;
 8084846:	ea6f 010a 	mvn.w	r1, sl
 808484a:	4439      	add	r1, r7
 808484c:	eb05 0901 	add.w	r9, r5, r1

    mbedtls_md_init( &md_ctx );
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
        goto exit;

    ret = mgf_mask( p, siglen - hlen - 1, hash_start, hlen, &md_ctx );
 8084850:	9400      	str	r4, [sp, #0]
 8084852:	4653      	mov	r3, sl
 8084854:	464a      	mov	r2, r9
 8084856:	4628      	mov	r0, r5
 8084858:	f7fe feec 	bl	8083634 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
    if( ret != 0 )
 808485c:	4683      	mov	fp, r0
 808485e:	2800      	cmp	r0, #0
 8084860:	d14b      	bne.n	80848fa <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;

    buf[0] &= 0xFF >> ( siglen * 8 - msb );
 8084862:	ebc8 07c7 	rsb	r7, r8, r7, lsl #3
 8084866:	7833      	ldrb	r3, [r6, #0]
 8084868:	f04f 08ff 	mov.w	r8, #255	; 0xff
 808486c:	fa48 f707 	asr.w	r7, r8, r7
 8084870:	401f      	ands	r7, r3
 8084872:	7037      	strb	r7, [r6, #0]

    while( p < hash_start - 1 && *p == 0 )
 8084874:	f109 32ff 	add.w	r2, r9, #4294967295
 8084878:	4295      	cmp	r5, r2
 808487a:	4629      	mov	r1, r5
 808487c:	d203      	bcs.n	8084886 <mbedtls_rsa_rsassa_pss_verify_ext+0x116>
 808487e:	780b      	ldrb	r3, [r1, #0]
 8084880:	3501      	adds	r5, #1
 8084882:	2b00      	cmp	r3, #0
 8084884:	d0f8      	beq.n	8084878 <mbedtls_rsa_rsassa_pss_verify_ext+0x108>
        p++;

    if( *p++ != 0x01 )
 8084886:	780b      	ldrb	r3, [r1, #0]
 8084888:	2b01      	cmp	r3, #1
 808488a:	d134      	bne.n	80848f6 <mbedtls_rsa_rsassa_pss_verify_ext+0x186>
        goto exit;
    }

    observed_salt_len = hash_start - p;

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 808488c:	f8dd 3498 	ldr.w	r3, [sp, #1176]	; 0x498
    buf[0] &= 0xFF >> ( siglen * 8 - msb );

    while( p < hash_start - 1 && *p == 0 )
        p++;

    if( *p++ != 0x01 )
 8084890:	1c4d      	adds	r5, r1, #1
        goto exit;
    }

    observed_salt_len = hash_start - p;

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 8084892:	1c5a      	adds	r2, r3, #1
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
        goto exit;
    }

    observed_salt_len = hash_start - p;
 8084894:	ebc5 0609 	rsb	r6, r5, r9

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 8084898:	d001      	beq.n	808489e <mbedtls_rsa_rsassa_pss_verify_ext+0x12e>
 808489a:	429e      	cmp	r6, r3
 808489c:	d12b      	bne.n	80848f6 <mbedtls_rsa_rsassa_pss_verify_ext+0x186>
    }

    /*
     * Generate H = Hash( M' )
     */
    ret = mbedtls_md_starts( &md_ctx );
 808489e:	4620      	mov	r0, r4
 80848a0:	f002 feee 	bl	8087680 <mbedtls_md_starts>
    if ( ret != 0 )
 80848a4:	4683      	mov	fp, r0
 80848a6:	bb40      	cbnz	r0, 80848fa <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_update( &md_ctx, zeros, 8 );
 80848a8:	2208      	movs	r2, #8
 80848aa:	a903      	add	r1, sp, #12
 80848ac:	4620      	mov	r0, r4
 80848ae:	f002 fef1 	bl	8087694 <mbedtls_md_update>
    if ( ret != 0 )
 80848b2:	4683      	mov	fp, r0
 80848b4:	bb08      	cbnz	r0, 80848fa <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_update( &md_ctx, hash, hashlen );
 80848b6:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
 80848ba:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
 80848be:	4620      	mov	r0, r4
 80848c0:	f002 fee8 	bl	8087694 <mbedtls_md_update>
    if ( ret != 0 )
 80848c4:	4683      	mov	fp, r0
 80848c6:	b9c0      	cbnz	r0, 80848fa <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_update( &md_ctx, p, observed_salt_len );
 80848c8:	4632      	mov	r2, r6
 80848ca:	4629      	mov	r1, r5
 80848cc:	4620      	mov	r0, r4
 80848ce:	f002 fee1 	bl	8087694 <mbedtls_md_update>
    if ( ret != 0 )
 80848d2:	4683      	mov	fp, r0
 80848d4:	b988      	cbnz	r0, 80848fa <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_finish( &md_ctx, result );
 80848d6:	a908      	add	r1, sp, #32
 80848d8:	4620      	mov	r0, r4
 80848da:	f002 fee5 	bl	80876a8 <mbedtls_md_finish>
    if ( ret != 0 )
 80848de:	4683      	mov	fp, r0
 80848e0:	b958      	cbnz	r0, 80848fa <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;

    if( memcmp( hash_start, result, hlen ) != 0 )
 80848e2:	4652      	mov	r2, sl
 80848e4:	a908      	add	r1, sp, #32
 80848e6:	4648      	mov	r0, r9
 80848e8:	f00f fb2c 	bl	8093f44 <memcmp>
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 80848ec:	4a09      	ldr	r2, [pc, #36]	; (8084914 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a4>)
 80848ee:	2800      	cmp	r0, #0
 80848f0:	bf18      	it	ne
 80848f2:	4693      	movne	fp, r2
 80848f4:	e001      	b.n	80848fa <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
    while( p < hash_start - 1 && *p == 0 )
        p++;

    if( *p++ != 0x01 )
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 80848f6:	f8df b020 	ldr.w	fp, [pc, #32]	; 8084918 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a8>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
        goto exit;
    }

exit:
    mbedtls_md_free( &md_ctx );
 80848fa:	4620      	mov	r0, r4
 80848fc:	f002 fe7d 	bl	80875fa <mbedtls_md_free>

    return( ret );
 8084900:	4658      	mov	r0, fp
 8084902:	e000      	b.n	8084906 <mbedtls_rsa_rsassa_pss_verify_ext+0x196>
        return( ret );

    p = buf;

    if( buf[siglen - 1] != 0xBC )
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 8084904:	4804      	ldr	r0, [pc, #16]	; (8084918 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a8>)

exit:
    mbedtls_md_free( &md_ctx );

    return( ret );
}
 8084906:	f20d 4d64 	addw	sp, sp, #1124	; 0x464
 808490a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808490e:	bf00      	nop
 8084910:	ffffbf80 	.word	0xffffbf80
 8084914:	ffffbc80 	.word	0xffffbc80
 8084918:	ffffbf00 	.word	0xffffbf00

0808491c <mbedtls_rsa_rsassa_pss_verify>:
                           int mode,
                           mbedtls_md_type_t md_alg,
                           unsigned int hashlen,
                           const unsigned char *hash,
                           const unsigned char *sig )
{
 808491c:	b570      	push	{r4, r5, r6, lr}
    mbedtls_md_type_t mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )
 808491e:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
                           int mode,
                           mbedtls_md_type_t md_alg,
                           unsigned int hashlen,
                           const unsigned char *hash,
                           const unsigned char *sig )
{
 8084922:	b086      	sub	sp, #24
 8084924:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
    mbedtls_md_type_t mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )
                             ? (mbedtls_md_type_t) ctx->hash_id
                             : md_alg;
 8084928:	b10c      	cbz	r4, 808492e <mbedtls_rsa_rsassa_pss_verify+0x12>
 808492a:	b2e4      	uxtb	r4, r4
 808492c:	e000      	b.n	8084930 <mbedtls_rsa_rsassa_pss_verify+0x14>
 808492e:	462c      	mov	r4, r5

    return( mbedtls_rsa_rsassa_pss_verify_ext( ctx, f_rng, p_rng, mode,
                                       md_alg, hashlen, hash,
                                       mgf1_hash_id, MBEDTLS_RSA_SALT_LEN_ANY,
                                       sig ) );
 8084930:	9403      	str	r4, [sp, #12]
 8084932:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8084934:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8084936:	9402      	str	r4, [sp, #8]
 8084938:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 808493a:	9605      	str	r6, [sp, #20]
 808493c:	f04f 36ff 	mov.w	r6, #4294967295
 8084940:	9604      	str	r6, [sp, #16]
 8084942:	9401      	str	r4, [sp, #4]
 8084944:	9500      	str	r5, [sp, #0]
 8084946:	f7ff ff13 	bl	8084770 <mbedtls_rsa_rsassa_pss_verify_ext>

}
 808494a:	b006      	add	sp, #24
 808494c:	bd70      	pop	{r4, r5, r6, pc}
	...

08084950 <mbedtls_rsa_rsassa_pkcs1_v15_verify>:
                                 int mode,
                                 mbedtls_md_type_t md_alg,
                                 unsigned int hashlen,
                                 const unsigned char *hash,
                                 const unsigned char *sig )
{
 8084950:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;
    const size_t sig_len = ctx->len;
    unsigned char *encoded = NULL, *encoded_expected = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8084954:	2b01      	cmp	r3, #1
                                 int mode,
                                 mbedtls_md_type_t md_alg,
                                 unsigned int hashlen,
                                 const unsigned char *hash,
                                 const unsigned char *sig )
{
 8084956:	4680      	mov	r8, r0
 8084958:	468a      	mov	sl, r1
 808495a:	4693      	mov	fp, r2
 808495c:	4699      	mov	r9, r3
    int ret = 0;
    const size_t sig_len = ctx->len;
 808495e:	6845      	ldr	r5, [r0, #4]
    unsigned char *encoded = NULL, *encoded_expected = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8084960:	d102      	bne.n	8084968 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x18>
 8084962:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8084966:	b9eb      	cbnz	r3, 80849a4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x54>

    /*
     * Prepare expected PKCS1 v1.5 encoding of hash.
     */

    if( ( encoded          = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL ||
 8084968:	4629      	mov	r1, r5
 808496a:	2001      	movs	r0, #1
 808496c:	f00f f9d2 	bl	8093d14 <calloc>
 8084970:	4606      	mov	r6, r0
 8084972:	b1c8      	cbz	r0, 80849a8 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x58>
 8084974:	4629      	mov	r1, r5
 8084976:	2001      	movs	r0, #1
 8084978:	f00f f9cc 	bl	8093d14 <calloc>
 808497c:	4607      	mov	r7, r0
 808497e:	b9c0      	cbnz	r0, 80849b2 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x62>
        ( encoded_expected = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL )
    {
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
 8084980:	f06f 040f 	mvn.w	r4, #15

cleanup:

    if( encoded != NULL )
    {
        mbedtls_zeroize( encoded, sig_len );
 8084984:	4630      	mov	r0, r6
 8084986:	4629      	mov	r1, r5
 8084988:	f7fe fe4c 	bl	8083624 <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( encoded );
 808498c:	4630      	mov	r0, r6
 808498e:	f00c fbe3 	bl	8091158 <free>
    }

    if( encoded_expected != NULL )
 8084992:	b167      	cbz	r7, 80849ae <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x5e>
    {
        mbedtls_zeroize( encoded_expected, sig_len );
 8084994:	4638      	mov	r0, r7
 8084996:	4629      	mov	r1, r5
 8084998:	f7fe fe44 	bl	8083624 <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( encoded_expected );
 808499c:	4638      	mov	r0, r7
 808499e:	f00c fbdb 	bl	8091158 <free>
 80849a2:	e004      	b.n	80849ae <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x5e>
    int ret = 0;
    const size_t sig_len = ctx->len;
    unsigned char *encoded = NULL, *encoded_expected = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80849a4:	481b      	ldr	r0, [pc, #108]	; (8084a14 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc4>)
 80849a6:	e031      	b.n	8084a0c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
     */

    if( ( encoded          = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL ||
        ( encoded_expected = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL )
    {
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
 80849a8:	f06f 000f 	mvn.w	r0, #15
 80849ac:	e02e      	b.n	8084a0c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
 80849ae:	4620      	mov	r0, r4
 80849b0:	e02c      	b.n	8084a0c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
        goto cleanup;
    }

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash, sig_len,
 80849b2:	9000      	str	r0, [sp, #0]
 80849b4:	462b      	mov	r3, r5
 80849b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80849b8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80849ba:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 80849be:	f7fe fe8b 	bl	80836d8 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>
 80849c2:	4604      	mov	r4, r0
 80849c4:	2800      	cmp	r0, #0
 80849c6:	d1dd      	bne.n	8084984 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
     * Apply RSA primitive to get what should be PKCS1 encoded hash.
     */

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, encoded )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
 80849c8:	f1b9 0f00 	cmp.w	r9, #0
 80849cc:	d105      	bne.n	80849da <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x8a>
 80849ce:	4632      	mov	r2, r6
 80849d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80849d2:	4640      	mov	r0, r8
 80849d4:	f7ff f8da 	bl	8083b8c <mbedtls_rsa_public>
 80849d8:	e006      	b.n	80849e8 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x98>
 80849da:	9600      	str	r6, [sp, #0]
 80849dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80849de:	465a      	mov	r2, fp
 80849e0:	4651      	mov	r1, sl
 80849e2:	4640      	mov	r0, r8
 80849e4:	f7ff f914 	bl	8083c10 <mbedtls_rsa_private>
 80849e8:	4604      	mov	r4, r0
    if( ret != 0 )
 80849ea:	2800      	cmp	r0, #0
 80849ec:	d1ca      	bne.n	8084984 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
 80849ee:	4603      	mov	r3, r0
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 80849f0:	429d      	cmp	r5, r3
 80849f2:	d006      	beq.n	8084a02 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xb2>
        diff |= A[i] ^ B[i];
 80849f4:	5cf0      	ldrb	r0, [r6, r3]
 80849f6:	5cfa      	ldrb	r2, [r7, r3]
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 80849f8:	3301      	adds	r3, #1
        diff |= A[i] ^ B[i];
 80849fa:	4050      	eors	r0, r2
 80849fc:	4304      	orrs	r4, r0
 80849fe:	b2e4      	uxtb	r4, r4
 8084a00:	e7f6      	b.n	80849f0 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xa0>
     */

    if( ( ret = mbedtls_safer_memcmp( encoded, encoded_expected,
                                      sig_len ) ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 8084a02:	2c00      	cmp	r4, #0
 8084a04:	4c04      	ldr	r4, [pc, #16]	; (8084a18 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc8>)
 8084a06:	bf08      	it	eq
 8084a08:	2400      	moveq	r4, #0
 8084a0a:	e7bb      	b.n	8084984 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
        mbedtls_zeroize( encoded_expected, sig_len );
        mbedtls_free( encoded_expected );
    }

    return( ret );
}
 8084a0c:	b003      	add	sp, #12
 8084a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084a12:	bf00      	nop
 8084a14:	ffffbf80 	.word	0xffffbf80
 8084a18:	ffffbc80 	.word	0xffffbc80

08084a1c <mbedtls_rsa_pkcs1_verify>:
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
 8084a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
 8084a1e:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	; 0xa4
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
 8084a22:	ad06      	add	r5, sp, #24
 8084a24:	f89d 4014 	ldrb.w	r4, [sp, #20]
 8084a28:	cde0      	ldmia	r5, {r5, r6, r7}
    switch( ctx->padding )
 8084a2a:	f1be 0f00 	cmp.w	lr, #0
 8084a2e:	d00a      	beq.n	8084a46 <mbedtls_rsa_pkcs1_verify+0x2a>
 8084a30:	f1be 0f01 	cmp.w	lr, #1
 8084a34:	d10f      	bne.n	8084a56 <mbedtls_rsa_pkcs1_verify+0x3a>
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
                                          hashlen, hash, sig );
 8084a36:	9708      	str	r7, [sp, #32]
 8084a38:	9607      	str	r6, [sp, #28]
 8084a3a:	9506      	str	r5, [sp, #24]
 8084a3c:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8084a3e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
                                          hashlen, hash, sig );
 8084a42:	f7ff bf6b 	b.w	808491c <mbedtls_rsa_rsassa_pss_verify>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
                                                hashlen, hash, sig );
 8084a46:	9708      	str	r7, [sp, #32]
 8084a48:	9607      	str	r6, [sp, #28]
 8084a4a:	9506      	str	r5, [sp, #24]
 8084a4c:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8084a4e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
                                                hashlen, hash, sig );
 8084a52:	f7ff bf7d 	b.w	8084950 <mbedtls_rsa_rsassa_pkcs1_v15_verify>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8084a56:	4801      	ldr	r0, [pc, #4]	; (8084a5c <mbedtls_rsa_pkcs1_verify+0x40>)
 8084a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084a5a:	bf00      	nop
 8084a5c:	ffffbf00 	.word	0xffffbf00

08084a60 <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
 8084a60:	b510      	push	{r4, lr}
 8084a62:	4604      	mov	r4, r0
    mbedtls_mpi_free( &ctx->Vi ); mbedtls_mpi_free( &ctx->Vf );
 8084a64:	308c      	adds	r0, #140	; 0x8c
 8084a66:	f006 f95e 	bl	808ad26 <mbedtls_mpi_free>
 8084a6a:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8084a6e:	f006 f95a 	bl	808ad26 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN ); mbedtls_mpi_free( &ctx->D  );
 8084a72:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8084a76:	f006 f956 	bl	808ad26 <mbedtls_mpi_free>
 8084a7a:	f104 0020 	add.w	r0, r4, #32
 8084a7e:	f006 f952 	bl	808ad26 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  ); mbedtls_mpi_free( &ctx->P  );
 8084a82:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8084a86:	f006 f94e 	bl	808ad26 <mbedtls_mpi_free>
 8084a8a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8084a8e:	f006 f94a 	bl	808ad26 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  ); mbedtls_mpi_free( &ctx->N  );
 8084a92:	f104 0014 	add.w	r0, r4, #20
 8084a96:	f006 f946 	bl	808ad26 <mbedtls_mpi_free>
 8084a9a:	f104 0008 	add.w	r0, r4, #8
 8084a9e:	f006 f942 	bl	808ad26 <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ ); mbedtls_mpi_free( &ctx->RP );
 8084aa2:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8084aa6:	f006 f93e 	bl	808ad26 <mbedtls_mpi_free>
 8084aaa:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8084aae:	f006 f93a 	bl	808ad26 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP ); mbedtls_mpi_free( &ctx->DQ );
 8084ab2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8084ab6:	f006 f936 	bl	808ad26 <mbedtls_mpi_free>
 8084aba:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8084abe:	f006 f932 	bl	808ad26 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
 8084ac2:	f104 0044 	add.w	r0, r4, #68	; 0x44
#endif /* MBEDTLS_RSA_NO_CRT */

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
}
 8084ac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->E  ); mbedtls_mpi_free( &ctx->N  );

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ ); mbedtls_mpi_free( &ctx->RP );
    mbedtls_mpi_free( &ctx->QP ); mbedtls_mpi_free( &ctx->DQ );
    mbedtls_mpi_free( &ctx->DP );
 8084aca:	f006 b92c 	b.w	808ad26 <mbedtls_mpi_free>
	...

08084ad0 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf>:
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
 8084ad0:	b538      	push	{r3, r4, r5, lr}
 8084ad2:	4605      	mov	r5, r0
 8084ad4:	b160      	cbz	r0, 8084af0 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x20>
 8084ad6:	4c08      	ldr	r4, [pc, #32]	; (8084af8 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x28>)
 8084ad8:	6820      	ldr	r0, [r4, #0]
 8084ada:	b158      	cbz	r0, 8084af4 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x24>
 8084adc:	6862      	ldr	r2, [r4, #4]
 8084ade:	686b      	ldr	r3, [r5, #4]
 8084ae0:	429a      	cmp	r2, r3
 8084ae2:	d103      	bne.n	8084aec <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x1c>
 8084ae4:	68a9      	ldr	r1, [r5, #8]
 8084ae6:	f00f fa2d 	bl	8093f44 <memcmp>
 8084aea:	b110      	cbz	r0, 8084af2 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x22>
 8084aec:	3414      	adds	r4, #20
 8084aee:	e7f3      	b.n	8084ad8 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x8>
 8084af0:	bd38      	pop	{r3, r4, r5, pc}
 8084af2:	4620      	mov	r0, r4
 8084af4:	bd38      	pop	{r3, r4, r5, pc}
 8084af6:	bf00      	nop
 8084af8:	08097214 	.word	0x08097214

08084afc <mbedtls_oid_get_attr_short_name>:
        NULL,
    }
};

FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 8084afc:	b570      	push	{r4, r5, r6, lr}
 8084afe:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        NULL,
    }
};

FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
 8084b00:	4605      	mov	r5, r0
 8084b02:	b160      	cbz	r0, 8084b1e <mbedtls_oid_get_attr_short_name+0x22>
 8084b04:	4c09      	ldr	r4, [pc, #36]	; (8084b2c <mbedtls_oid_get_attr_short_name+0x30>)
 8084b06:	6820      	ldr	r0, [r4, #0]
 8084b08:	b148      	cbz	r0, 8084b1e <mbedtls_oid_get_attr_short_name+0x22>
 8084b0a:	6862      	ldr	r2, [r4, #4]
 8084b0c:	686b      	ldr	r3, [r5, #4]
 8084b0e:	429a      	cmp	r2, r3
 8084b10:	d103      	bne.n	8084b1a <mbedtls_oid_get_attr_short_name+0x1e>
 8084b12:	68a9      	ldr	r1, [r5, #8]
 8084b14:	f00f fa16 	bl	8093f44 <memcmp>
 8084b18:	b120      	cbz	r0, 8084b24 <mbedtls_oid_get_attr_short_name+0x28>
 8084b1a:	3414      	adds	r4, #20
 8084b1c:	e7f3      	b.n	8084b06 <mbedtls_oid_get_attr_short_name+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 8084b1e:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8084b22:	bd70      	pop	{r4, r5, r6, pc}
 8084b24:	6923      	ldr	r3, [r4, #16]
 8084b26:	6033      	str	r3, [r6, #0]
 8084b28:	bd70      	pop	{r4, r5, r6, pc}
 8084b2a:	bf00      	nop
 8084b2c:	08096704 	.word	0x08096704

08084b30 <mbedtls_oid_get_x509_ext_type>:
        0,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 8084b30:	b570      	push	{r4, r5, r6, lr}
 8084b32:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        0,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
 8084b34:	4605      	mov	r5, r0
 8084b36:	b160      	cbz	r0, 8084b52 <mbedtls_oid_get_x509_ext_type+0x22>
 8084b38:	4c09      	ldr	r4, [pc, #36]	; (8084b60 <mbedtls_oid_get_x509_ext_type+0x30>)
 8084b3a:	6820      	ldr	r0, [r4, #0]
 8084b3c:	b148      	cbz	r0, 8084b52 <mbedtls_oid_get_x509_ext_type+0x22>
 8084b3e:	6862      	ldr	r2, [r4, #4]
 8084b40:	686b      	ldr	r3, [r5, #4]
 8084b42:	429a      	cmp	r2, r3
 8084b44:	d103      	bne.n	8084b4e <mbedtls_oid_get_x509_ext_type+0x1e>
 8084b46:	68a9      	ldr	r1, [r5, #8]
 8084b48:	f00f f9fc 	bl	8093f44 <memcmp>
 8084b4c:	b120      	cbz	r0, 8084b58 <mbedtls_oid_get_x509_ext_type+0x28>
 8084b4e:	3414      	adds	r4, #20
 8084b50:	e7f3      	b.n	8084b3a <mbedtls_oid_get_x509_ext_type+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 8084b52:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8084b56:	bd70      	pop	{r4, r5, r6, pc}
 8084b58:	6923      	ldr	r3, [r4, #16]
 8084b5a:	6033      	str	r3, [r6, #0]
 8084b5c:	bd70      	pop	{r4, r5, r6, pc}
 8084b5e:	bf00      	nop
 8084b60:	0809732c 	.word	0x0809732c

08084b64 <mbedtls_oid_get_extended_key_usage>:
    { ADD_LEN( MBEDTLS_OID_OCSP_SIGNING ),     "id-kp-OCSPSigning",     "OCSP Signing" },
    { NULL, 0, NULL, NULL },
};

FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 8084b64:	b570      	push	{r4, r5, r6, lr}
 8084b66:	460e      	mov	r6, r1
    { ADD_LEN( MBEDTLS_OID_TIME_STAMPING ),    "id-kp-timeStamping",    "Time Stamping" },
    { ADD_LEN( MBEDTLS_OID_OCSP_SIGNING ),     "id-kp-OCSPSigning",     "OCSP Signing" },
    { NULL, 0, NULL, NULL },
};

FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
 8084b68:	4605      	mov	r5, r0
 8084b6a:	b160      	cbz	r0, 8084b86 <mbedtls_oid_get_extended_key_usage+0x22>
 8084b6c:	4c09      	ldr	r4, [pc, #36]	; (8084b94 <mbedtls_oid_get_extended_key_usage+0x30>)
 8084b6e:	6820      	ldr	r0, [r4, #0]
 8084b70:	b148      	cbz	r0, 8084b86 <mbedtls_oid_get_extended_key_usage+0x22>
 8084b72:	6862      	ldr	r2, [r4, #4]
 8084b74:	686b      	ldr	r3, [r5, #4]
 8084b76:	429a      	cmp	r2, r3
 8084b78:	d103      	bne.n	8084b82 <mbedtls_oid_get_extended_key_usage+0x1e>
 8084b7a:	68a9      	ldr	r1, [r5, #8]
 8084b7c:	f00f f9e2 	bl	8093f44 <memcmp>
 8084b80:	b120      	cbz	r0, 8084b8c <mbedtls_oid_get_extended_key_usage+0x28>
 8084b82:	3410      	adds	r4, #16
 8084b84:	e7f3      	b.n	8084b6e <mbedtls_oid_get_extended_key_usage+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 8084b86:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8084b8a:	bd70      	pop	{r4, r5, r6, pc}
 8084b8c:	68e3      	ldr	r3, [r4, #12]
 8084b8e:	6033      	str	r3, [r6, #0]
 8084b90:	bd70      	pop	{r4, r5, r6, pc}
 8084b92:	bf00      	nop
 8084b94:	08096894 	.word	0x08096894

08084b98 <mbedtls_oid_get_sig_alg_desc>:
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
FN_OID_GET_DESCRIPTOR_ATTR1(mbedtls_oid_get_sig_alg_desc, oid_sig_alg_t, sig_alg, const char *, description)
 8084b98:	b510      	push	{r4, lr}
 8084b9a:	460c      	mov	r4, r1
 8084b9c:	f7ff ff98 	bl	8084ad0 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf>
 8084ba0:	b118      	cbz	r0, 8084baa <mbedtls_oid_get_sig_alg_desc+0x12>
 8084ba2:	68c3      	ldr	r3, [r0, #12]
 8084ba4:	2000      	movs	r0, #0
 8084ba6:	6023      	str	r3, [r4, #0]
 8084ba8:	bd10      	pop	{r4, pc}
 8084baa:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8084bae:	bd10      	pop	{r4, pc}

08084bb0 <mbedtls_oid_get_sig_alg>:
FN_OID_GET_ATTR2(mbedtls_oid_get_sig_alg, oid_sig_alg_t, sig_alg, mbedtls_md_type_t, md_alg, mbedtls_pk_type_t, pk_alg)
 8084bb0:	b538      	push	{r3, r4, r5, lr}
 8084bb2:	460d      	mov	r5, r1
 8084bb4:	4614      	mov	r4, r2
 8084bb6:	f7ff ff8b 	bl	8084ad0 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf>
 8084bba:	b128      	cbz	r0, 8084bc8 <mbedtls_oid_get_sig_alg+0x18>
 8084bbc:	7c03      	ldrb	r3, [r0, #16]
 8084bbe:	702b      	strb	r3, [r5, #0]
 8084bc0:	7c43      	ldrb	r3, [r0, #17]
 8084bc2:	2000      	movs	r0, #0
 8084bc4:	7023      	strb	r3, [r4, #0]
 8084bc6:	bd38      	pop	{r3, r4, r5, pc}
 8084bc8:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8084bcc:	bd38      	pop	{r3, r4, r5, pc}
	...

08084bd0 <mbedtls_oid_get_pk_alg>:
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 8084bd0:	b570      	push	{r4, r5, r6, lr}
 8084bd2:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
 8084bd4:	4605      	mov	r5, r0
 8084bd6:	b160      	cbz	r0, 8084bf2 <mbedtls_oid_get_pk_alg+0x22>
 8084bd8:	4c09      	ldr	r4, [pc, #36]	; (8084c00 <mbedtls_oid_get_pk_alg+0x30>)
 8084bda:	6820      	ldr	r0, [r4, #0]
 8084bdc:	b148      	cbz	r0, 8084bf2 <mbedtls_oid_get_pk_alg+0x22>
 8084bde:	6862      	ldr	r2, [r4, #4]
 8084be0:	686b      	ldr	r3, [r5, #4]
 8084be2:	429a      	cmp	r2, r3
 8084be4:	d103      	bne.n	8084bee <mbedtls_oid_get_pk_alg+0x1e>
 8084be6:	68a9      	ldr	r1, [r5, #8]
 8084be8:	f00f f9ac 	bl	8093f44 <memcmp>
 8084bec:	b120      	cbz	r0, 8084bf8 <mbedtls_oid_get_pk_alg+0x28>
 8084bee:	3414      	adds	r4, #20
 8084bf0:	e7f3      	b.n	8084bda <mbedtls_oid_get_pk_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 8084bf2:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8084bf6:	bd70      	pop	{r4, r5, r6, pc}
 8084bf8:	7c23      	ldrb	r3, [r4, #16]
 8084bfa:	7033      	strb	r3, [r6, #0]
 8084bfc:	bd70      	pop	{r4, r5, r6, pc}
 8084bfe:	bf00      	nop
 8084c00:	08096904 	.word	0x08096904

08084c04 <mbedtls_oid_get_cipher_alg>:
        MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_cipher_alg_t, cipher_alg, oid_cipher_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_cipher_alg, oid_cipher_alg_t, cipher_alg, mbedtls_cipher_type_t, cipher_alg)
 8084c04:	b570      	push	{r4, r5, r6, lr}
 8084c06:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_cipher_alg_t, cipher_alg, oid_cipher_alg)
 8084c08:	4605      	mov	r5, r0
 8084c0a:	b160      	cbz	r0, 8084c26 <mbedtls_oid_get_cipher_alg+0x22>
 8084c0c:	4c09      	ldr	r4, [pc, #36]	; (8084c34 <mbedtls_oid_get_cipher_alg+0x30>)
 8084c0e:	6820      	ldr	r0, [r4, #0]
 8084c10:	b148      	cbz	r0, 8084c26 <mbedtls_oid_get_cipher_alg+0x22>
 8084c12:	6862      	ldr	r2, [r4, #4]
 8084c14:	686b      	ldr	r3, [r5, #4]
 8084c16:	429a      	cmp	r2, r3
 8084c18:	d103      	bne.n	8084c22 <mbedtls_oid_get_cipher_alg+0x1e>
 8084c1a:	68a9      	ldr	r1, [r5, #8]
 8084c1c:	f00f f992 	bl	8093f44 <memcmp>
 8084c20:	b120      	cbz	r0, 8084c2c <mbedtls_oid_get_cipher_alg+0x28>
 8084c22:	3414      	adds	r4, #20
 8084c24:	e7f3      	b.n	8084c0e <mbedtls_oid_get_cipher_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_cipher_alg, oid_cipher_alg_t, cipher_alg, mbedtls_cipher_type_t, cipher_alg)
 8084c26:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8084c2a:	bd70      	pop	{r4, r5, r6, pc}
 8084c2c:	7c23      	ldrb	r3, [r4, #16]
 8084c2e:	7033      	strb	r3, [r6, #0]
 8084c30:	bd70      	pop	{r4, r5, r6, pc}
 8084c32:	bf00      	nop
 8084c34:	08096954 	.word	0x08096954

08084c38 <mbedtls_oid_get_oid_by_md>:
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
FN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_md, oid_md_alg_t, oid_md_alg, mbedtls_md_type_t, md_alg)
 8084c38:	b530      	push	{r4, r5, lr}
 8084c3a:	4b08      	ldr	r3, [pc, #32]	; (8084c5c <mbedtls_oid_get_oid_by_md+0x24>)
 8084c3c:	681c      	ldr	r4, [r3, #0]
 8084c3e:	b14c      	cbz	r4, 8084c54 <mbedtls_oid_get_oid_by_md+0x1c>
 8084c40:	7c1d      	ldrb	r5, [r3, #16]
 8084c42:	4285      	cmp	r5, r0
 8084c44:	d104      	bne.n	8084c50 <mbedtls_oid_get_oid_by_md+0x18>
 8084c46:	600c      	str	r4, [r1, #0]
 8084c48:	685b      	ldr	r3, [r3, #4]
 8084c4a:	2000      	movs	r0, #0
 8084c4c:	6013      	str	r3, [r2, #0]
 8084c4e:	bd30      	pop	{r4, r5, pc}
 8084c50:	3314      	adds	r3, #20
 8084c52:	e7f3      	b.n	8084c3c <mbedtls_oid_get_oid_by_md+0x4>
 8084c54:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8084c58:	bd30      	pop	{r4, r5, pc}
 8084c5a:	bf00      	nop
 8084c5c:	0809719c 	.word	0x0809719c

08084c60 <mbedtls_oid_get_md_hmac>:
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_hmac_t, md_hmac, oid_md_hmac)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_hmac, oid_md_hmac_t, md_hmac, mbedtls_md_type_t, md_hmac)
 8084c60:	b570      	push	{r4, r5, r6, lr}
 8084c62:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_hmac_t, md_hmac, oid_md_hmac)
 8084c64:	4605      	mov	r5, r0
 8084c66:	b160      	cbz	r0, 8084c82 <mbedtls_oid_get_md_hmac+0x22>
 8084c68:	4c09      	ldr	r4, [pc, #36]	; (8084c90 <mbedtls_oid_get_md_hmac+0x30>)
 8084c6a:	6820      	ldr	r0, [r4, #0]
 8084c6c:	b148      	cbz	r0, 8084c82 <mbedtls_oid_get_md_hmac+0x22>
 8084c6e:	6862      	ldr	r2, [r4, #4]
 8084c70:	686b      	ldr	r3, [r5, #4]
 8084c72:	429a      	cmp	r2, r3
 8084c74:	d103      	bne.n	8084c7e <mbedtls_oid_get_md_hmac+0x1e>
 8084c76:	68a9      	ldr	r1, [r5, #8]
 8084c78:	f00f f964 	bl	8093f44 <memcmp>
 8084c7c:	b120      	cbz	r0, 8084c88 <mbedtls_oid_get_md_hmac+0x28>
 8084c7e:	3414      	adds	r4, #20
 8084c80:	e7f3      	b.n	8084c6a <mbedtls_oid_get_md_hmac+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_md_hmac, oid_md_hmac_t, md_hmac, mbedtls_md_type_t, md_hmac)
 8084c82:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8084c86:	bd70      	pop	{r4, r5, r6, pc}
 8084c88:	7c23      	ldrb	r3, [r4, #16]
 8084c8a:	7033      	strb	r3, [r6, #0]
 8084c8c:	bd70      	pop	{r4, r5, r6, pc}
 8084c8e:	bf00      	nop
 8084c90:	080972b4 	.word	0x080972b4

08084c94 <mbedtls_oid_get_pkcs12_pbe_alg>:
        MBEDTLS_MD_NONE, MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, oid_pkcs12_pbe_alg)
FN_OID_GET_ATTR2(mbedtls_oid_get_pkcs12_pbe_alg, oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, mbedtls_md_type_t, md_alg, mbedtls_cipher_type_t, cipher_alg)
 8084c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8084c96:	460f      	mov	r7, r1
 8084c98:	4616      	mov	r6, r2
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, oid_pkcs12_pbe_alg)
 8084c9a:	4605      	mov	r5, r0
 8084c9c:	b160      	cbz	r0, 8084cb8 <mbedtls_oid_get_pkcs12_pbe_alg+0x24>
 8084c9e:	4c0a      	ldr	r4, [pc, #40]	; (8084cc8 <mbedtls_oid_get_pkcs12_pbe_alg+0x34>)
 8084ca0:	6820      	ldr	r0, [r4, #0]
 8084ca2:	b148      	cbz	r0, 8084cb8 <mbedtls_oid_get_pkcs12_pbe_alg+0x24>
 8084ca4:	6862      	ldr	r2, [r4, #4]
 8084ca6:	686b      	ldr	r3, [r5, #4]
 8084ca8:	429a      	cmp	r2, r3
 8084caa:	d103      	bne.n	8084cb4 <mbedtls_oid_get_pkcs12_pbe_alg+0x20>
 8084cac:	68a9      	ldr	r1, [r5, #8]
 8084cae:	f00f f949 	bl	8093f44 <memcmp>
 8084cb2:	b120      	cbz	r0, 8084cbe <mbedtls_oid_get_pkcs12_pbe_alg+0x2a>
 8084cb4:	3414      	adds	r4, #20
 8084cb6:	e7f3      	b.n	8084ca0 <mbedtls_oid_get_pkcs12_pbe_alg+0xc>
FN_OID_GET_ATTR2(mbedtls_oid_get_pkcs12_pbe_alg, oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, mbedtls_md_type_t, md_alg, mbedtls_cipher_type_t, cipher_alg)
 8084cb8:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8084cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8084cbe:	7c23      	ldrb	r3, [r4, #16]
 8084cc0:	703b      	strb	r3, [r7, #0]
 8084cc2:	7c63      	ldrb	r3, [r4, #17]
 8084cc4:	7033      	strb	r3, [r6, #0]
 8084cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8084cc8:	08097160 	.word	0x08097160

08084ccc <mbedtls_sha1_init>:
}
#endif

void mbedtls_sha1_init( mbedtls_sha1_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha1_context ) );
 8084ccc:	225c      	movs	r2, #92	; 0x5c
 8084cce:	2100      	movs	r1, #0
 8084cd0:	f00f b96d 	b.w	8093fae <memset>

08084cd4 <mbedtls_sha1_free>:
}

void mbedtls_sha1_free( mbedtls_sha1_context *ctx )
{
    if( ctx == NULL )
 8084cd4:	b138      	cbz	r0, 8084ce6 <mbedtls_sha1_free+0x12>
 8084cd6:	f100 025c 	add.w	r2, r0, #92	; 0x5c

#if !defined(MBEDTLS_SHA1_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 8084cda:	2300      	movs	r3, #0
 8084cdc:	4290      	cmp	r0, r2
 8084cde:	d002      	beq.n	8084ce6 <mbedtls_sha1_free+0x12>
 8084ce0:	7003      	strb	r3, [r0, #0]
 8084ce2:	3001      	adds	r0, #1
 8084ce4:	e7fa      	b.n	8084cdc <mbedtls_sha1_free+0x8>
 8084ce6:	4770      	bx	lr

08084ce8 <mbedtls_sha1_clone>:
    mbedtls_zeroize( ctx, sizeof( mbedtls_sha1_context ) );
}

void mbedtls_sha1_clone( mbedtls_sha1_context *dst,
                         const mbedtls_sha1_context *src )
{
 8084ce8:	b508      	push	{r3, lr}
    *dst = *src;
 8084cea:	225c      	movs	r2, #92	; 0x5c
 8084cec:	f00f f939 	bl	8093f62 <memcpy>
 8084cf0:	bd08      	pop	{r3, pc}
	...

08084cf4 <mbedtls_sha1_starts_ret>:

/*
 * SHA-1 context setup
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
 8084cf4:	4603      	mov	r3, r0
    ctx->total[0] = 0;
    ctx->total[1] = 0;

    ctx->state[0] = 0x67452301;
 8084cf6:	4a0a      	ldr	r2, [pc, #40]	; (8084d20 <mbedtls_sha1_starts_ret+0x2c>)
/*
 * SHA-1 context setup
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
    ctx->total[0] = 0;
 8084cf8:	2000      	movs	r0, #0
    ctx->total[1] = 0;

    ctx->state[0] = 0x67452301;
 8084cfa:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xEFCDAB89;
 8084cfc:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8084d00:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x98BADCFE;
 8084d02:	f102 4229 	add.w	r2, r2, #2835349504	; 0xa9000000
 8084d06:	f5a2 1296 	sub.w	r2, r2, #1228800	; 0x12c000
 8084d0a:	f6a2 628b 	subw	r2, r2, #3723	; 0xe8b
 8084d0e:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0x10325476;
 8084d10:	f1a2 3288 	sub.w	r2, r2, #2290649224	; 0x88888888
 8084d14:	615a      	str	r2, [r3, #20]
    ctx->state[4] = 0xC3D2E1F0;
 8084d16:	4a03      	ldr	r2, [pc, #12]	; (8084d24 <mbedtls_sha1_starts_ret+0x30>)
/*
 * SHA-1 context setup
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
    ctx->total[0] = 0;
 8084d18:	6018      	str	r0, [r3, #0]
    ctx->total[1] = 0;
 8084d1a:	6058      	str	r0, [r3, #4]

    ctx->state[0] = 0x67452301;
    ctx->state[1] = 0xEFCDAB89;
    ctx->state[2] = 0x98BADCFE;
    ctx->state[3] = 0x10325476;
    ctx->state[4] = 0xC3D2E1F0;
 8084d1c:	619a      	str	r2, [r3, #24]

    return( 0 );
}
 8084d1e:	4770      	bx	lr
 8084d20:	67452301 	.word	0x67452301
 8084d24:	c3d2e1f0 	.word	0xc3d2e1f0

08084d28 <mbedtls_internal_sha1_process>:
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
 8084d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
 8084d2c:	784b      	ldrb	r3, [r1, #1]
 8084d2e:	780a      	ldrb	r2, [r1, #0]
 8084d30:	041b      	lsls	r3, r3, #16
 8084d32:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8084d36:	78ca      	ldrb	r2, [r1, #3]
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
 8084d38:	b097      	sub	sp, #92	; 0x5c
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
 8084d3a:	4313      	orrs	r3, r2
 8084d3c:	788a      	ldrb	r2, [r1, #2]
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
 8084d3e:	f891 c008 	ldrb.w	ip, [r1, #8]
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
 8084d42:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8084d46:	9306      	str	r3, [sp, #24]
    GET_UINT32_BE( W[ 1], data,  4 );
 8084d48:	794b      	ldrb	r3, [r1, #5]
 8084d4a:	790a      	ldrb	r2, [r1, #4]
 8084d4c:	041b      	lsls	r3, r3, #16
 8084d4e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8084d52:	79ca      	ldrb	r2, [r1, #7]
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
 8084d54:	f891 800c 	ldrb.w	r8, [r1, #12]
                                   const unsigned char data[64] )
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
 8084d58:	4313      	orrs	r3, r2
 8084d5a:	798a      	ldrb	r2, [r1, #6]
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
 8084d5c:	f891 e014 	ldrb.w	lr, [r1, #20]
                                   const unsigned char data[64] )
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
 8084d60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8084d64:	9307      	str	r3, [sp, #28]
    GET_UINT32_BE( W[ 2], data,  8 );
 8084d66:	7a4b      	ldrb	r3, [r1, #9]
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
 8084d68:	7c0a      	ldrb	r2, [r1, #16]
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
 8084d6a:	041b      	lsls	r3, r3, #16
 8084d6c:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 8084d70:	f891 c00b 	ldrb.w	ip, [r1, #11]
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
 8084d74:	7e0f      	ldrb	r7, [r1, #24]
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
 8084d76:	ea43 030c 	orr.w	r3, r3, ip
 8084d7a:	f891 c00a 	ldrb.w	ip, [r1, #10]
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
 8084d7e:	9001      	str	r0, [sp, #4]
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
 8084d80:	ea43 2c0c 	orr.w	ip, r3, ip, lsl #8
    GET_UINT32_BE( W[ 3], data, 12 );
 8084d84:	7b4b      	ldrb	r3, [r1, #13]
 8084d86:	041b      	lsls	r3, r3, #16
 8084d88:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 8084d8c:	f891 800f 	ldrb.w	r8, [r1, #15]
 8084d90:	ea43 0308 	orr.w	r3, r3, r8
 8084d94:	f891 800e 	ldrb.w	r8, [r1, #14]
 8084d98:	ea43 2808 	orr.w	r8, r3, r8, lsl #8
    GET_UINT32_BE( W[ 4], data, 16 );
 8084d9c:	7c4b      	ldrb	r3, [r1, #17]
 8084d9e:	041b      	lsls	r3, r3, #16
 8084da0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8084da4:	7cca      	ldrb	r2, [r1, #19]
 8084da6:	4313      	orrs	r3, r2
 8084da8:	7c8a      	ldrb	r2, [r1, #18]
 8084daa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8084dae:	930e      	str	r3, [sp, #56]	; 0x38
    GET_UINT32_BE( W[ 5], data, 20 );
 8084db0:	7d4b      	ldrb	r3, [r1, #21]
 8084db2:	041b      	lsls	r3, r3, #16
 8084db4:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 8084db8:	f891 e017 	ldrb.w	lr, [r1, #23]
 8084dbc:	ea43 030e 	orr.w	r3, r3, lr
 8084dc0:	f891 e016 	ldrb.w	lr, [r1, #22]
 8084dc4:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 8084dc8:	930f      	str	r3, [sp, #60]	; 0x3c
    GET_UINT32_BE( W[ 6], data, 24 );
 8084dca:	7e4b      	ldrb	r3, [r1, #25]
 8084dcc:	041b      	lsls	r3, r3, #16
 8084dce:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 8084dd2:	7ecf      	ldrb	r7, [r1, #27]
    GET_UINT32_BE( W[ 7], data, 28 );
 8084dd4:	7f0e      	ldrb	r6, [r1, #28]
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
 8084dd6:	433b      	orrs	r3, r7
 8084dd8:	7e8f      	ldrb	r7, [r1, #26]
    GET_UINT32_BE( W[ 7], data, 28 );
    GET_UINT32_BE( W[ 8], data, 32 );
 8084dda:	f891 4020 	ldrb.w	r4, [r1, #32]
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
 8084dde:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8084de2:	9310      	str	r3, [sp, #64]	; 0x40
    GET_UINT32_BE( W[ 7], data, 28 );
 8084de4:	7f4b      	ldrb	r3, [r1, #29]
    GET_UINT32_BE( W[ 8], data, 32 );
    GET_UINT32_BE( W[ 9], data, 36 );
 8084de6:	f891 2024 	ldrb.w	r2, [r1, #36]	; 0x24
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
    GET_UINT32_BE( W[ 7], data, 28 );
 8084dea:	041b      	lsls	r3, r3, #16
 8084dec:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8084df0:	7fce      	ldrb	r6, [r1, #31]
    GET_UINT32_BE( W[ 8], data, 32 );
    GET_UINT32_BE( W[ 9], data, 36 );
    GET_UINT32_BE( W[10], data, 40 );
    GET_UINT32_BE( W[11], data, 44 );
 8084df2:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
    GET_UINT32_BE( W[ 7], data, 28 );
 8084df6:	4333      	orrs	r3, r6
 8084df8:	7f8e      	ldrb	r6, [r1, #30]
 8084dfa:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8084dfe:	9311      	str	r3, [sp, #68]	; 0x44
    GET_UINT32_BE( W[ 8], data, 32 );
 8084e00:	f891 3021 	ldrb.w	r3, [r1, #33]	; 0x21
 8084e04:	041b      	lsls	r3, r3, #16
 8084e06:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8084e0a:	f891 4023 	ldrb.w	r4, [r1, #35]	; 0x23
 8084e0e:	4323      	orrs	r3, r4
 8084e10:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
 8084e14:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8084e18:	9309      	str	r3, [sp, #36]	; 0x24
    GET_UINT32_BE( W[ 9], data, 36 );
 8084e1a:	f891 3025 	ldrb.w	r3, [r1, #37]	; 0x25
 8084e1e:	041b      	lsls	r3, r3, #16
 8084e20:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8084e24:	f891 2027 	ldrb.w	r2, [r1, #39]	; 0x27
 8084e28:	4313      	orrs	r3, r2
 8084e2a:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
 8084e2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8084e32:	930a      	str	r3, [sp, #40]	; 0x28
    GET_UINT32_BE( W[10], data, 40 );
 8084e34:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 8084e38:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 8084e3c:	041b      	lsls	r3, r3, #16
 8084e3e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8084e42:	f891 202b 	ldrb.w	r2, [r1, #43]	; 0x2b
 8084e46:	4313      	orrs	r3, r2
 8084e48:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
 8084e4c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8084e50:	930b      	str	r3, [sp, #44]	; 0x2c
    GET_UINT32_BE( W[11], data, 44 );
 8084e52:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 8084e56:	041b      	lsls	r3, r3, #16
 8084e58:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8084e5c:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
 8084e60:	4303      	orrs	r3, r0
 8084e62:	f891 002e 	ldrb.w	r0, [r1, #46]	; 0x2e
 8084e66:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8084e6a:	930c      	str	r3, [sp, #48]	; 0x30
    GET_UINT32_BE( W[12], data, 48 );
 8084e6c:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 8084e70:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
 8084e74:	041b      	lsls	r3, r3, #16
 8084e76:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8084e7a:	f891 0033 	ldrb.w	r0, [r1, #51]	; 0x33
 8084e7e:	4303      	orrs	r3, r0
 8084e80:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
 8084e84:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8084e88:	930d      	str	r3, [sp, #52]	; 0x34
    GET_UINT32_BE( W[13], data, 52 );
 8084e8a:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 8084e8e:	f891 9034 	ldrb.w	r9, [r1, #52]	; 0x34
 8084e92:	041b      	lsls	r3, r3, #16
 8084e94:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
 8084e98:	f891 9037 	ldrb.w	r9, [r1, #55]	; 0x37
    GET_UINT32_BE( W[14], data, 56 );
 8084e9c:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
    GET_UINT32_BE( W[ 8], data, 32 );
    GET_UINT32_BE( W[ 9], data, 36 );
    GET_UINT32_BE( W[10], data, 40 );
    GET_UINT32_BE( W[11], data, 44 );
    GET_UINT32_BE( W[12], data, 48 );
    GET_UINT32_BE( W[13], data, 52 );
 8084ea0:	ea43 0309 	orr.w	r3, r3, r9
 8084ea4:	f891 9036 	ldrb.w	r9, [r1, #54]	; 0x36
 8084ea8:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
 8084eac:	9302      	str	r3, [sp, #8]
    GET_UINT32_BE( W[14], data, 56 );
 8084eae:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
 8084eb2:	041b      	lsls	r3, r3, #16
 8084eb4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8084eb8:	f891 203b 	ldrb.w	r2, [r1, #59]	; 0x3b
 8084ebc:	4313      	orrs	r3, r2
 8084ebe:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8084ec2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8084ec6:	9303      	str	r3, [sp, #12]
    GET_UINT32_BE( W[15], data, 60 );
 8084ec8:	f891 303d 	ldrb.w	r3, [r1, #61]	; 0x3d
 8084ecc:	f891 203c 	ldrb.w	r2, [r1, #60]	; 0x3c
 8084ed0:	041b      	lsls	r3, r3, #16
 8084ed2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8084ed6:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
 8084eda:	4313      	orrs	r3, r2
 8084edc:	f891 203e 	ldrb.w	r2, [r1, #62]	; 0x3e
 8084ee0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8084ee4:	9304      	str	r3, [sp, #16]
#define P(a,b,c,d,e,x)                                  \
{                                                       \
    e += S(a,5) + F(b,c,d) + K + x; b = S(b,30);        \
}

    A = ctx->state[0];
 8084ee6:	9b01      	ldr	r3, [sp, #4]
 8084ee8:	689b      	ldr	r3, [r3, #8]
 8084eea:	9312      	str	r3, [sp, #72]	; 0x48
    B = ctx->state[1];
 8084eec:	9b01      	ldr	r3, [sp, #4]
 8084eee:	68db      	ldr	r3, [r3, #12]
 8084ef0:	9314      	str	r3, [sp, #80]	; 0x50
    C = ctx->state[2];
 8084ef2:	9b01      	ldr	r3, [sp, #4]
 8084ef4:	691b      	ldr	r3, [r3, #16]
 8084ef6:	9305      	str	r3, [sp, #20]
    D = ctx->state[3];
 8084ef8:	9b01      	ldr	r3, [sp, #4]
 8084efa:	695b      	ldr	r3, [r3, #20]
 8084efc:	9313      	str	r3, [sp, #76]	; 0x4c
    E = ctx->state[4];
 8084efe:	9b01      	ldr	r3, [sp, #4]
 8084f00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8084f02:	699b      	ldr	r3, [r3, #24]
 8084f04:	9315      	str	r3, [sp, #84]	; 0x54
 8084f06:	9b05      	ldr	r3, [sp, #20]
 8084f08:	ea83 0e02 	eor.w	lr, r3, r2
 8084f0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8084f0e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8084f10:	ea0e 0e03 	and.w	lr, lr, r3
 8084f14:	ea8e 0e02 	eor.w	lr, lr, r2
 8084f18:	4bdd      	ldr	r3, [pc, #884]	; (8085290 <mbedtls_internal_sha1_process+0x568>)
 8084f1a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8084f1c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8084f1e:	441a      	add	r2, r3
 8084f20:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8084f24:	4496      	add	lr, r2

#define F(x,y,z) (z ^ (x & (y ^ z)))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
 8084f26:	9a06      	ldr	r2, [sp, #24]
 8084f28:	eb04 0b03 	add.w	fp, r4, r3
 8084f2c:	4496      	add	lr, r2
 8084f2e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8084f30:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8084f32:	ea4f 00b2 	mov.w	r0, r2, ror #2
 8084f36:	9a05      	ldr	r2, [sp, #20]
 8084f38:	18c5      	adds	r5, r0, r3
 8084f3a:	ea82 0700 	eor.w	r7, r2, r0
 8084f3e:	9a05      	ldr	r2, [sp, #20]
 8084f40:	400f      	ands	r7, r1
 8084f42:	4057      	eors	r7, r2
 8084f44:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    P( E, A, B, C, D, W[1]  );
 8084f46:	ea4f 01b1 	mov.w	r1, r1, ror #2
 8084f4a:	441a      	add	r2, r3
 8084f4c:	4417      	add	r7, r2
 8084f4e:	9a07      	ldr	r2, [sp, #28]
 8084f50:	ea80 0901 	eor.w	r9, r0, r1
 8084f54:	4417      	add	r7, r2
 8084f56:	9a05      	ldr	r2, [sp, #20]
 8084f58:	ea09 090e 	and.w	r9, r9, lr
 8084f5c:	441a      	add	r2, r3
 8084f5e:	eb07 67fe 	add.w	r7, r7, lr, ror #27
 8084f62:	4462      	add	r2, ip
    P( D, E, A, B, C, W[2]  );
 8084f64:	ea4f 0ebe 	mov.w	lr, lr, ror #2
 8084f68:	ea89 0900 	eor.w	r9, r9, r0
 8084f6c:	4491      	add	r9, r2
 8084f6e:	ea81 020e 	eor.w	r2, r1, lr
 8084f72:	403a      	ands	r2, r7
 8084f74:	eb09 69f7 	add.w	r9, r9, r7, ror #27
 8084f78:	404a      	eors	r2, r1
    P( C, D, E, A, B, W[3]  );
 8084f7a:	ea4f 07b7 	mov.w	r7, r7, ror #2
 8084f7e:	4445      	add	r5, r8
 8084f80:	18c8      	adds	r0, r1, r3
 8084f82:	4415      	add	r5, r2
 8084f84:	990e      	ldr	r1, [sp, #56]	; 0x38
 8084f86:	ea8e 0207 	eor.w	r2, lr, r7
 8084f8a:	ea02 0209 	and.w	r2, r2, r9
 8084f8e:	eb05 65f9 	add.w	r5, r5, r9, ror #27
 8084f92:	ea82 020e 	eor.w	r2, r2, lr
    P( B, C, D, E, A, W[4]  );
 8084f96:	ea4f 09b9 	mov.w	r9, r9, ror #2
 8084f9a:	4408      	add	r0, r1
 8084f9c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8084f9e:	4410      	add	r0, r2
 8084fa0:	ea87 0209 	eor.w	r2, r7, r9
 8084fa4:	18ce      	adds	r6, r1, r3
 8084fa6:	402a      	ands	r2, r5
 8084fa8:	407a      	eors	r2, r7
 8084faa:	4476      	add	r6, lr
 8084fac:	eb00 60f5 	add.w	r0, r0, r5, ror #27
 8084fb0:	4416      	add	r6, r2
    P( A, B, C, D, E, W[5]  );
 8084fb2:	ea4f 05b5 	mov.w	r5, r5, ror #2
 8084fb6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8084fb8:	ea89 0105 	eor.w	r1, r9, r5
 8084fbc:	4001      	ands	r1, r0
 8084fbe:	441a      	add	r2, r3
 8084fc0:	eb06 66f0 	add.w	r6, r6, r0, ror #27
 8084fc4:	ea81 0109 	eor.w	r1, r1, r9
    P( E, A, B, C, D, W[6]  );
 8084fc8:	ea4f 00b0 	mov.w	r0, r0, ror #2
 8084fcc:	443a      	add	r2, r7
 8084fce:	440a      	add	r2, r1
 8084fd0:	ea85 0100 	eor.w	r1, r5, r0
 8084fd4:	4031      	ands	r1, r6
 8084fd6:	eb02 62f6 	add.w	r2, r2, r6, ror #27
 8084fda:	4069      	eors	r1, r5
    P( D, E, A, B, C, W[7]  );
 8084fdc:	ea4f 06b6 	mov.w	r6, r6, ror #2
 8084fe0:	44cb      	add	fp, r9
 8084fe2:	448b      	add	fp, r1
 8084fe4:	ea80 0106 	eor.w	r1, r0, r6
 8084fe8:	4011      	ands	r1, r2
 8084fea:	441c      	add	r4, r3
 8084fec:	4041      	eors	r1, r0
 8084fee:	442c      	add	r4, r5
 8084ff0:	eb0b 6bf2 	add.w	fp, fp, r2, ror #27
 8084ff4:	440c      	add	r4, r1
    P( C, D, E, A, B, W[8]  );
 8084ff6:	ea4f 02b2 	mov.w	r2, r2, ror #2
 8084ffa:	990a      	ldr	r1, [sp, #40]	; 0x28
 8084ffc:	ea86 0502 	eor.w	r5, r6, r2
 8085000:	ea05 050b 	and.w	r5, r5, fp
 8085004:	4419      	add	r1, r3
 8085006:	4075      	eors	r5, r6
 8085008:	4401      	add	r1, r0
 808500a:	eb04 64fb 	add.w	r4, r4, fp, ror #27
 808500e:	4429      	add	r1, r5
    P( B, C, D, E, A, W[9]  );
 8085010:	ea4f 0bbb 	mov.w	fp, fp, ror #2
 8085014:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8085016:	ea82 000b 	eor.w	r0, r2, fp
 808501a:	eb05 0a03 	add.w	sl, r5, r3
 808501e:	4020      	ands	r0, r4
 8085020:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 8085024:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    P( A, B, C, D, E, W[10] );
 8085026:	ea4f 04b4 	mov.w	r4, r4, ror #2
 808502a:	4050      	eors	r0, r2
 808502c:	44b2      	add	sl, r6
 808502e:	4482      	add	sl, r0
 8085030:	ea8b 0004 	eor.w	r0, fp, r4
 8085034:	eb05 0903 	add.w	r9, r5, r3
 8085038:	4008      	ands	r0, r1
 808503a:	ea80 000b 	eor.w	r0, r0, fp
 808503e:	4491      	add	r9, r2
 8085040:	eb0a 6af1 	add.w	sl, sl, r1, ror #27
 8085044:	4481      	add	r9, r0
    P( E, A, B, C, D, W[11] );
 8085046:	ea4f 01b1 	mov.w	r1, r1, ror #2
 808504a:	980d      	ldr	r0, [sp, #52]	; 0x34
 808504c:	ea84 0201 	eor.w	r2, r4, r1
 8085050:	eb00 0e03 	add.w	lr, r0, r3
 8085054:	ea02 020a 	and.w	r2, r2, sl
 8085058:	eb09 69fa 	add.w	r9, r9, sl, ror #27
 808505c:	9802      	ldr	r0, [sp, #8]
    P( D, E, A, B, C, W[12] );
 808505e:	ea4f 0aba 	mov.w	sl, sl, ror #2
 8085062:	4062      	eors	r2, r4
 8085064:	44de      	add	lr, fp
 8085066:	4496      	add	lr, r2
 8085068:	ea81 020a 	eor.w	r2, r1, sl
 808506c:	18c5      	adds	r5, r0, r3
 808506e:	ea02 0209 	and.w	r2, r2, r9
 8085072:	eb0e 6ef9 	add.w	lr, lr, r9, ror #27
 8085076:	404a      	eors	r2, r1
    P( C, D, E, A, B, W[13] );
 8085078:	ea4f 09b9 	mov.w	r9, r9, ror #2
 808507c:	9803      	ldr	r0, [sp, #12]
 808507e:	4425      	add	r5, r4
 8085080:	4415      	add	r5, r2
 8085082:	ea8a 0209 	eor.w	r2, sl, r9
 8085086:	ea02 020e 	and.w	r2, r2, lr
 808508a:	4418      	add	r0, r3
 808508c:	eb05 65fe 	add.w	r5, r5, lr, ror #27
 8085090:	ea82 020a 	eor.w	r2, r2, sl
    P( B, C, D, E, A, W[14] );
 8085094:	ea4f 0ebe 	mov.w	lr, lr, ror #2
 8085098:	4408      	add	r0, r1
 808509a:	9904      	ldr	r1, [sp, #16]
 808509c:	4410      	add	r0, r2
 808509e:	ea89 020e 	eor.w	r2, r9, lr
 80850a2:	18cf      	adds	r7, r1, r3
 80850a4:	402a      	ands	r2, r5
 80850a6:	ea82 0209 	eor.w	r2, r2, r9
 80850aa:	4457      	add	r7, sl
 80850ac:	4417      	add	r7, r2
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 80850ae:	9a06      	ldr	r2, [sp, #24]
 80850b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80850b2:	ea82 020c 	eor.w	r2, r2, ip
 80850b6:	404a      	eors	r2, r1
 80850b8:	9902      	ldr	r1, [sp, #8]
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
 80850ba:	eb00 60f5 	add.w	r0, r0, r5, ror #27
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 80850be:	404a      	eors	r2, r1
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
 80850c0:	ea4f 05b5 	mov.w	r5, r5, ror #2
 80850c4:	ea8e 0105 	eor.w	r1, lr, r5
    P( E, A, B, C, D, R(16) );
 80850c8:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80850cc:	9206      	str	r2, [sp, #24]
 80850ce:	4001      	ands	r1, r0
 80850d0:	441a      	add	r2, r3
 80850d2:	ea81 010e 	eor.w	r1, r1, lr
 80850d6:	444a      	add	r2, r9
 80850d8:	440a      	add	r2, r1
    P( D, E, A, B, C, R(17) );
 80850da:	9907      	ldr	r1, [sp, #28]
 80850dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80850de:	ea81 0108 	eor.w	r1, r1, r8
 80850e2:	4061      	eors	r1, r4
 80850e4:	9c03      	ldr	r4, [sp, #12]
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
 80850e6:	eb07 67f0 	add.w	r7, r7, r0, ror #27
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
 80850ea:	4061      	eors	r1, r4
 80850ec:	ea4f 71f1 	mov.w	r1, r1, ror #31
 80850f0:	9107      	str	r1, [sp, #28]
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 80850f2:	ea4f 00b0 	mov.w	r0, r0, ror #2
 80850f6:	9c07      	ldr	r4, [sp, #28]
 80850f8:	ea85 0100 	eor.w	r1, r5, r0
 80850fc:	18e6      	adds	r6, r4, r3
 80850fe:	4039      	ands	r1, r7
 8085100:	4069      	eors	r1, r5
 8085102:	4476      	add	r6, lr
 8085104:	440e      	add	r6, r1
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
 8085106:	990e      	ldr	r1, [sp, #56]	; 0x38
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 8085108:	eb02 62f7 	add.w	r2, r2, r7, ror #27
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
 808510c:	ea8c 0c01 	eor.w	ip, ip, r1
 8085110:	990b      	ldr	r1, [sp, #44]	; 0x2c
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
 8085112:	ea4f 07b7 	mov.w	r7, r7, ror #2
    P( C, D, E, A, B, R(18) );
 8085116:	ea8c 0c01 	eor.w	ip, ip, r1
 808511a:	9904      	ldr	r1, [sp, #16]
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
 808511c:	eb06 66f2 	add.w	r6, r6, r2, ror #27
    P( C, D, E, A, B, R(18) );
 8085120:	ea8c 0c01 	eor.w	ip, ip, r1
 8085124:	ea4f 71fc 	mov.w	r1, ip, ror #31
 8085128:	9108      	str	r1, [sp, #32]
 808512a:	9c08      	ldr	r4, [sp, #32]
 808512c:	ea80 0107 	eor.w	r1, r0, r7
 8085130:	4011      	ands	r1, r2
 8085132:	441c      	add	r4, r3
 8085134:	4041      	eors	r1, r0
 8085136:	442c      	add	r4, r5
 8085138:	440c      	add	r4, r1
    P( B, C, D, E, A, R(19) );
 808513a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
 808513c:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( B, C, D, E, A, R(19) );
 8085140:	ea88 0801 	eor.w	r8, r8, r1
 8085144:	990c      	ldr	r1, [sp, #48]	; 0x30
 8085146:	ea87 0502 	eor.w	r5, r7, r2
 808514a:	ea88 0801 	eor.w	r8, r8, r1
 808514e:	9906      	ldr	r1, [sp, #24]
 8085150:	4035      	ands	r5, r6
 8085152:	ea88 0801 	eor.w	r8, r8, r1
 8085156:	ea4f 78f8 	mov.w	r8, r8, ror #31
 808515a:	4443      	add	r3, r8
 808515c:	407d      	eors	r5, r7
 808515e:	4403      	add	r3, r0
 8085160:	18e9      	adds	r1, r5, r3
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 8085162:	9810      	ldr	r0, [sp, #64]	; 0x40
 8085164:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8085166:	4d4b      	ldr	r5, [pc, #300]	; (8085294 <mbedtls_internal_sha1_process+0x56c>)
 8085168:	ea83 0c00 	eor.w	ip, r3, r0
 808516c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
 808516e:	eb04 64f6 	add.w	r4, r4, r6, ror #27
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 8085172:	ea8c 0c03 	eor.w	ip, ip, r3
 8085176:	9b07      	ldr	r3, [sp, #28]
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
    P( B, C, D, E, A, R(19) );
 8085178:	ea4f 06b6 	mov.w	r6, r6, ror #2
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 808517c:	ea8c 0c03 	eor.w	ip, ip, r3
 8085180:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 8085184:	ea82 0306 	eor.w	r3, r2, r6
 8085188:	eb0c 0b05 	add.w	fp, ip, r5
 808518c:	4063      	eors	r3, r4
 808518e:	44bb      	add	fp, r7
    P( E, A, B, C, D, R(21) );
 8085190:	9811      	ldr	r0, [sp, #68]	; 0x44
 8085192:	449b      	add	fp, r3
 8085194:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
    P( B, C, D, E, A, R(19) );
 8085196:	eb01 61f4 	add.w	r1, r1, r4, ror #27

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
 808519a:	ea83 0e00 	eor.w	lr, r3, r0
 808519e:	9b02      	ldr	r3, [sp, #8]
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 80851a0:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( E, A, B, C, D, R(21) );
 80851a4:	ea8e 0e03 	eor.w	lr, lr, r3
 80851a8:	9b08      	ldr	r3, [sp, #32]
 80851aa:	ea86 0004 	eor.w	r0, r6, r4
 80851ae:	ea8e 0e03 	eor.w	lr, lr, r3
 80851b2:	ea4f 7efe 	mov.w	lr, lr, ror #31
 80851b6:	eb0e 0305 	add.w	r3, lr, r5
 80851ba:	4048      	eors	r0, r1
 80851bc:	4413      	add	r3, r2
 80851be:	4403      	add	r3, r0
    P( D, E, A, B, C, R(22) );
 80851c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80851c2:	9809      	ldr	r0, [sp, #36]	; 0x24
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 80851c4:	eb0b 6bf1 	add.w	fp, fp, r1, ror #27
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
 80851c8:	ea82 0700 	eor.w	r7, r2, r0
 80851cc:	9a03      	ldr	r2, [sp, #12]

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
 80851ce:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( D, E, A, B, C, R(22) );
 80851d2:	4057      	eors	r7, r2
 80851d4:	ea87 0708 	eor.w	r7, r7, r8
 80851d8:	ea4f 77f7 	mov.w	r7, r7, ror #31
 80851dc:	ea84 0201 	eor.w	r2, r4, r1
 80851e0:	eb07 0a05 	add.w	sl, r7, r5
 80851e4:	ea82 020b 	eor.w	r2, r2, fp
 80851e8:	44b2      	add	sl, r6
    P( C, D, E, A, B, R(23) );
 80851ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 80851ec:	4492      	add	sl, r2
 80851ee:	9a11      	ldr	r2, [sp, #68]	; 0x44

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
 80851f0:	eb03 63fb 	add.w	r3, r3, fp, ror #27
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
 80851f4:	ea82 0600 	eor.w	r6, r2, r0
 80851f8:	9a04      	ldr	r2, [sp, #16]
#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
 80851fa:	ea4f 0bbb 	mov.w	fp, fp, ror #2
    P( C, D, E, A, B, R(23) );
 80851fe:	4056      	eors	r6, r2
 8085200:	ea86 060c 	eor.w	r6, r6, ip
 8085204:	ea4f 76f6 	mov.w	r6, r6, ror #31
 8085208:	ea81 020b 	eor.w	r2, r1, fp
 808520c:	eb06 0905 	add.w	r9, r6, r5
 8085210:	405a      	eors	r2, r3
 8085212:	44a1      	add	r9, r4
    P( B, C, D, E, A, R(24) );
 8085214:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8085216:	4491      	add	r9, r2
 8085218:	9a09      	ldr	r2, [sp, #36]	; 0x24
#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
 808521a:	eb0a 6af3 	add.w	sl, sl, r3, ror #27
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
 808521e:	ea82 0400 	eor.w	r4, r2, r0
 8085222:	9a06      	ldr	r2, [sp, #24]
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
 8085224:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( B, C, D, E, A, R(24) );
 8085228:	4054      	eors	r4, r2
 808522a:	ea84 040e 	eor.w	r4, r4, lr
 808522e:	ea4f 72f4 	mov.w	r2, r4, ror #31
 8085232:	9209      	str	r2, [sp, #36]	; 0x24
 8085234:	9809      	ldr	r0, [sp, #36]	; 0x24
 8085236:	ea8b 0203 	eor.w	r2, fp, r3
 808523a:	4428      	add	r0, r5
 808523c:	ea82 020a 	eor.w	r2, r2, sl
 8085240:	4408      	add	r0, r1
 8085242:	4410      	add	r0, r2
    P( A, B, C, D, E, R(25) );
 8085244:	990c      	ldr	r1, [sp, #48]	; 0x30
 8085246:	9a0a      	ldr	r2, [sp, #40]	; 0x28
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
 8085248:	eb09 69fa 	add.w	r9, r9, sl, ror #27
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
 808524c:	404a      	eors	r2, r1
 808524e:	9907      	ldr	r1, [sp, #28]

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
 8085250:	ea4f 0aba 	mov.w	sl, sl, ror #2
    P( A, B, C, D, E, R(25) );
 8085254:	404a      	eors	r2, r1
 8085256:	407a      	eors	r2, r7
 8085258:	ea4f 72f2 	mov.w	r2, r2, ror #31
 808525c:	920a      	str	r2, [sp, #40]	; 0x28
 808525e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8085260:	ea83 020a 	eor.w	r2, r3, sl
 8085264:	4429      	add	r1, r5
 8085266:	ea82 0209 	eor.w	r2, r2, r9
 808526a:	4459      	add	r1, fp
 808526c:	4411      	add	r1, r2
    P( E, A, B, C, D, R(26) );
 808526e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
 8085270:	eb00 60f9 	add.w	r0, r0, r9, ror #27
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
 8085274:	4614      	mov	r4, r2
 8085276:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
 8085278:	ea4f 09b9 	mov.w	r9, r9, ror #2
    P( E, A, B, C, D, R(26) );
 808527c:	4062      	eors	r2, r4
 808527e:	9c08      	ldr	r4, [sp, #32]
 8085280:	ea8a 0b09 	eor.w	fp, sl, r9
 8085284:	4062      	eors	r2, r4
 8085286:	4072      	eors	r2, r6
 8085288:	ea4f 72f2 	mov.w	r2, r2, ror #31
 808528c:	e004      	b.n	8085298 <mbedtls_internal_sha1_process+0x570>
 808528e:	bf00      	nop
 8085290:	5a827999 	.word	0x5a827999
 8085294:	6ed9eba1 	.word	0x6ed9eba1
 8085298:	920b      	str	r2, [sp, #44]	; 0x2c
 808529a:	442a      	add	r2, r5
    P( D, E, A, B, C, R(27) );
 808529c:	9c02      	ldr	r4, [sp, #8]
    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
 808529e:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 80852a2:	ea8b 0b00 	eor.w	fp, fp, r0
 80852a6:	441a      	add	r2, r3
    P( E, A, B, C, D, R(26) );
 80852a8:	ea4f 03b0 	mov.w	r3, r0, ror #2
    P( D, E, A, B, C, R(27) );
 80852ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 80852ae:	445a      	add	r2, fp
 80852b0:	4060      	eors	r0, r4
 80852b2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80852b4:	ea80 0008 	eor.w	r0, r0, r8
 80852b8:	4060      	eors	r0, r4
 80852ba:	ea4f 70f0 	mov.w	r0, r0, ror #31
 80852be:	900c      	str	r0, [sp, #48]	; 0x30
 80852c0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80852c2:	ea89 0003 	eor.w	r0, r9, r3
 80852c6:	eb04 0b05 	add.w	fp, r4, r5
 80852ca:	4048      	eors	r0, r1
 80852cc:	44da      	add	sl, fp
    P( C, D, E, A, B, R(28) );
 80852ce:	9c03      	ldr	r4, [sp, #12]
 80852d0:	4482      	add	sl, r0
 80852d2:	980d      	ldr	r0, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
 80852d4:	eb02 62f1 	add.w	r2, r2, r1, ror #27
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
 80852d8:	4060      	eors	r0, r4
 80852da:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80852dc:	ea80 000c 	eor.w	r0, r0, ip
 80852e0:	4060      	eors	r0, r4
 80852e2:	ea4f 70f0 	mov.w	r0, r0, ror #31
    P( B, C, D, E, A, R(29) );
 80852e6:	9c02      	ldr	r4, [sp, #8]
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
 80852e8:	900d      	str	r0, [sp, #52]	; 0x34
 80852ea:	4428      	add	r0, r5
 80852ec:	4448      	add	r0, r9
    P( B, C, D, E, A, R(29) );
 80852ee:	46a1      	mov	r9, r4
 80852f0:	9c04      	ldr	r4, [sp, #16]
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
 80852f2:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
 80852f6:	ea89 0904 	eor.w	r9, r9, r4
 80852fa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80852fc:	ea89 090e 	eor.w	r9, r9, lr
 8085300:	ea89 0904 	eor.w	r9, r9, r4
 8085304:	ea4f 74f9 	mov.w	r4, r9, ror #31
 8085308:	eb04 0905 	add.w	r9, r4, r5
 808530c:	9402      	str	r4, [sp, #8]
 808530e:	ea83 0b01 	eor.w	fp, r3, r1
    P( A, B, C, D, E, R(30) );
 8085312:	9c06      	ldr	r4, [sp, #24]
 8085314:	4499      	add	r9, r3
 8085316:	9b03      	ldr	r3, [sp, #12]
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
 8085318:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
 808531c:	4063      	eors	r3, r4
 808531e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8085320:	407b      	eors	r3, r7
 8085322:	4063      	eors	r3, r4
 8085324:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8085328:	9303      	str	r3, [sp, #12]
 808532a:	ea8b 0b02 	eor.w	fp, fp, r2
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
 808532e:	ea4f 02b2 	mov.w	r2, r2, ror #2
 8085332:	9c03      	ldr	r4, [sp, #12]
 8085334:	4458      	add	r0, fp
 8085336:	ea81 0b02 	eor.w	fp, r1, r2
 808533a:	eb00 60fa 	add.w	r0, r0, sl, ror #27
 808533e:	ea8b 0b0a 	eor.w	fp, fp, sl
    P( B, C, D, E, A, R(29) );
 8085342:	ea4f 0aba 	mov.w	sl, sl, ror #2
 8085346:	ea82 030a 	eor.w	r3, r2, sl
 808534a:	44d9      	add	r9, fp
 808534c:	eb04 0b05 	add.w	fp, r4, r5
 8085350:	4043      	eors	r3, r0
 8085352:	4459      	add	r1, fp
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
 8085354:	9c07      	ldr	r4, [sp, #28]
 8085356:	4419      	add	r1, r3
 8085358:	9b04      	ldr	r3, [sp, #16]
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
 808535a:	eb09 69f0 	add.w	r9, r9, r0, ror #27
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
 808535e:	4063      	eors	r3, r4
 8085360:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8085362:	4073      	eors	r3, r6
 8085364:	4063      	eors	r3, r4
 8085366:	ea4f 73f3 	mov.w	r3, r3, ror #31
 808536a:	9304      	str	r3, [sp, #16]
 808536c:	442b      	add	r3, r5
    P( D, E, A, B, C, R(32) );
 808536e:	9c08      	ldr	r4, [sp, #32]
 8085370:	4413      	add	r3, r2
 8085372:	9a06      	ldr	r2, [sp, #24]
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
 8085374:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
 8085378:	4062      	eors	r2, r4
 808537a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 808537c:	ea8a 0b00 	eor.w	fp, sl, r0
 8085380:	4062      	eors	r2, r4
 8085382:	9c02      	ldr	r4, [sp, #8]
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
 8085384:	eb01 61f9 	add.w	r1, r1, r9, ror #27
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
 8085388:	4062      	eors	r2, r4
 808538a:	ea4f 72f2 	mov.w	r2, r2, ror #31
 808538e:	9206      	str	r2, [sp, #24]
 8085390:	9c06      	ldr	r4, [sp, #24]
 8085392:	ea8b 0b09 	eor.w	fp, fp, r9
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
 8085396:	ea4f 09b9 	mov.w	r9, r9, ror #2
 808539a:	ea80 0209 	eor.w	r2, r0, r9
 808539e:	445b      	add	r3, fp
 80853a0:	eb04 0b05 	add.w	fp, r4, r5
 80853a4:	404a      	eors	r2, r1
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 80853a6:	9c07      	ldr	r4, [sp, #28]
 80853a8:	44da      	add	sl, fp
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
 80853aa:	eb03 63f1 	add.w	r3, r3, r1, ror #27
 80853ae:	4492      	add	sl, r2
    P( D, E, A, B, C, R(32) );
 80853b0:	eb0a 62f3 	add.w	r2, sl, r3, ror #27
    P( C, D, E, A, B, R(33) );
 80853b4:	ea84 0a08 	eor.w	sl, r4, r8
 80853b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
 80853ba:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(33) );
 80853be:	ea8a 0a04 	eor.w	sl, sl, r4
 80853c2:	9c03      	ldr	r4, [sp, #12]
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
 80853c4:	ea88 080e 	eor.w	r8, r8, lr
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 80853c8:	ea8a 0a04 	eor.w	sl, sl, r4
 80853cc:	ea4f 74fa 	mov.w	r4, sl, ror #31
 80853d0:	eb04 0b05 	add.w	fp, r4, r5
 80853d4:	ea89 0a01 	eor.w	sl, r9, r1
 80853d8:	4458      	add	r0, fp
 80853da:	ea8a 0a03 	eor.w	sl, sl, r3
 80853de:	4482      	add	sl, r0
    P( B, C, D, E, A, R(34) );
 80853e0:	9808      	ldr	r0, [sp, #32]
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 80853e2:	9407      	str	r4, [sp, #28]
    P( B, C, D, E, A, R(34) );
 80853e4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80853e6:	ea80 000c 	eor.w	r0, r0, ip
 80853ea:	4060      	eors	r0, r4
 80853ec:	9c04      	ldr	r4, [sp, #16]
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 80853ee:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( B, C, D, E, A, R(34) );
 80853f2:	4060      	eors	r0, r4
 80853f4:	ea4f 70f0 	mov.w	r0, r0, ror #31
 80853f8:	9008      	str	r0, [sp, #32]
 80853fa:	9c08      	ldr	r4, [sp, #32]
 80853fc:	ea81 0003 	eor.w	r0, r1, r3
 8085400:	eb04 0b05 	add.w	fp, r4, r5
    P( A, B, C, D, E, R(35) );
 8085404:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8085406:	4050      	eors	r0, r2
 8085408:	ea88 0804 	eor.w	r8, r8, r4
 808540c:	9c06      	ldr	r4, [sp, #24]
 808540e:	44d9      	add	r9, fp
 8085410:	ea88 0804 	eor.w	r8, r8, r4
 8085414:	ea4f 7bf8 	mov.w	fp, r8, ror #31
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 8085418:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
 808541c:	4481      	add	r9, r0
    P( B, C, D, E, A, R(34) );
 808541e:	ea4f 02b2 	mov.w	r2, r2, ror #2
 8085422:	eb09 60fa 	add.w	r0, r9, sl, ror #27
 8085426:	ea83 0802 	eor.w	r8, r3, r2
 808542a:	eb0b 0905 	add.w	r9, fp, r5
 808542e:	ea88 080a 	eor.w	r8, r8, sl
 8085432:	4449      	add	r1, r9
 8085434:	4441      	add	r1, r8
    P( A, B, C, D, E, R(35) );
 8085436:	eb01 68f0 	add.w	r8, r1, r0, ror #27
    P( E, A, B, C, D, R(36) );
 808543a:	990d      	ldr	r1, [sp, #52]	; 0x34
 808543c:	ea8c 0c07 	eor.w	ip, ip, r7
 8085440:	ea8c 0c01 	eor.w	ip, ip, r1
 8085444:	9907      	ldr	r1, [sp, #28]
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
 8085446:	ea4f 0aba 	mov.w	sl, sl, ror #2
    P( E, A, B, C, D, R(36) );
 808544a:	ea8c 0c01 	eor.w	ip, ip, r1
 808544e:	ea4f 71fc 	mov.w	r1, ip, ror #31
 8085452:	910e      	str	r1, [sp, #56]	; 0x38
 8085454:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8085456:	ea82 010a 	eor.w	r1, r2, sl
 808545a:	eb04 0c05 	add.w	ip, r4, r5
 808545e:	4041      	eors	r1, r0
 8085460:	4463      	add	r3, ip
 8085462:	440b      	add	r3, r1
 8085464:	eb03 61f8 	add.w	r1, r3, r8, ror #27
    P( D, E, A, B, C, R(37) );
 8085468:	9b02      	ldr	r3, [sp, #8]
 808546a:	ea8e 0e06 	eor.w	lr, lr, r6
 808546e:	ea8e 0e03 	eor.w	lr, lr, r3
 8085472:	9b08      	ldr	r3, [sp, #32]
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
 8085474:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(37) );
 8085478:	ea8e 0e03 	eor.w	lr, lr, r3
 808547c:	ea4f 73fe 	mov.w	r3, lr, ror #31
 8085480:	930f      	str	r3, [sp, #60]	; 0x3c
 8085482:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8085484:	ea8a 0300 	eor.w	r3, sl, r0
 8085488:	eb04 0e05 	add.w	lr, r4, r5
 808548c:	ea83 0308 	eor.w	r3, r3, r8
 8085490:	4472      	add	r2, lr
 8085492:	441a      	add	r2, r3
 8085494:	eb02 63f1 	add.w	r3, r2, r1, ror #27
    P( C, D, E, A, B, R(38) );
 8085498:	9a09      	ldr	r2, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
 808549a:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( C, D, E, A, B, R(38) );
 808549e:	4057      	eors	r7, r2
 80854a0:	9a03      	ldr	r2, [sp, #12]
 80854a2:	4057      	eors	r7, r2
 80854a4:	ea87 070b 	eor.w	r7, r7, fp
 80854a8:	ea4f 72f7 	mov.w	r2, r7, ror #31
 80854ac:	9210      	str	r2, [sp, #64]	; 0x40
 80854ae:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80854b0:	ea80 0208 	eor.w	r2, r0, r8
 80854b4:	1967      	adds	r7, r4, r5
    P( B, C, D, E, A, R(39) );
 80854b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80854b8:	404a      	eors	r2, r1
 80854ba:	4066      	eors	r6, r4
 80854bc:	9c04      	ldr	r4, [sp, #16]
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
 80854be:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( B, C, D, E, A, R(39) );
 80854c2:	4066      	eors	r6, r4
 80854c4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80854c6:	44ba      	add	sl, r7
 80854c8:	4066      	eors	r6, r4
 80854ca:	ea4f 74f6 	mov.w	r4, r6, ror #31
 80854ce:	4425      	add	r5, r4
 80854d0:	9411      	str	r4, [sp, #68]	; 0x44
 80854d2:	4428      	add	r0, r5
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 80854d4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80854d6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80854d8:	ea88 0601 	eor.w	r6, r8, r1
 80854dc:	4065      	eors	r5, r4
 80854de:	462c      	mov	r4, r5
 80854e0:	9d06      	ldr	r5, [sp, #24]
 80854e2:	405e      	eors	r6, r3
 80854e4:	406c      	eors	r4, r5
 80854e6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80854e8:	4492      	add	sl, r2
 80854ea:	4430      	add	r0, r6
 80854ec:	406c      	eors	r4, r5
 80854ee:	4ed6      	ldr	r6, [pc, #856]	; (8085848 <mbedtls_internal_sha1_process+0xb20>)
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
 80854f0:	eb0a 62f3 	add.w	r2, sl, r3, ror #27
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 80854f4:	ea4f 74f4 	mov.w	r4, r4, ror #31
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
    P( B, C, D, E, A, R(39) );
 80854f8:	ea4f 03b3 	mov.w	r3, r3, ror #2
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 80854fc:	9409      	str	r4, [sp, #36]	; 0x24
 80854fe:	ea42 0503 	orr.w	r5, r2, r3
 8085502:	4434      	add	r4, r6
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
    P( B, C, D, E, A, R(39) );
 8085504:	eb00 60f2 	add.w	r0, r0, r2, ror #27
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 8085508:	400d      	ands	r5, r1
 808550a:	44a0      	add	r8, r4
 808550c:	ea02 0403 	and.w	r4, r2, r3
 8085510:	432c      	orrs	r4, r5
 8085512:	eb08 68f0 	add.w	r8, r8, r0, ror #27
 8085516:	ea4f 0ab2 	mov.w	sl, r2, ror #2
 808551a:	44a0      	add	r8, r4
    P( E, A, B, C, D, R(41) );
 808551c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 808551e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8085520:	ea4f 0cb0 	mov.w	ip, r0, ror #2
 8085524:	4062      	eors	r2, r4
 8085526:	9c07      	ldr	r4, [sp, #28]
 8085528:	4062      	eors	r2, r4
 808552a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 808552c:	4062      	eors	r2, r4
 808552e:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8085532:	920a      	str	r2, [sp, #40]	; 0x28
 8085534:	ea40 020a 	orr.w	r2, r0, sl
 8085538:	ea02 0403 	and.w	r4, r2, r3
 808553c:	ea00 020a 	and.w	r2, r0, sl
 8085540:	4322      	orrs	r2, r4
 8085542:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    P( D, E, A, B, C, R(42) );
 8085544:	980d      	ldr	r0, [sp, #52]	; 0x34
 8085546:	4434      	add	r4, r6
 8085548:	4421      	add	r1, r4
 808554a:	4411      	add	r1, r2
 808554c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
 808554e:	eb01 61f8 	add.w	r1, r1, r8, ror #27
    P( D, E, A, B, C, R(42) );
 8085552:	4042      	eors	r2, r0
 8085554:	9808      	ldr	r0, [sp, #32]
 8085556:	4042      	eors	r2, r0
 8085558:	9811      	ldr	r0, [sp, #68]	; 0x44
 808555a:	4042      	eors	r2, r0
 808555c:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8085560:	920b      	str	r2, [sp, #44]	; 0x2c
 8085562:	ea48 000c 	orr.w	r0, r8, ip
 8085566:	4432      	add	r2, r6
 8085568:	ea00 000a 	and.w	r0, r0, sl
 808556c:	4413      	add	r3, r2
 808556e:	ea08 020c 	and.w	r2, r8, ip
 8085572:	4302      	orrs	r2, r0
 8085574:	eb03 63f1 	add.w	r3, r3, r1, ror #27
 8085578:	4413      	add	r3, r2
    P( C, D, E, A, B, R(43) );
 808557a:	9802      	ldr	r0, [sp, #8]
 808557c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
 808557e:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( C, D, E, A, B, R(43) );
 8085582:	4050      	eors	r0, r2
 8085584:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8085586:	ea80 000b 	eor.w	r0, r0, fp
 808558a:	4050      	eors	r0, r2
 808558c:	ea4f 72f0 	mov.w	r2, r0, ror #31
 8085590:	ea41 0008 	orr.w	r0, r1, r8
 8085594:	920c      	str	r2, [sp, #48]	; 0x30
 8085596:	ea00 000c 	and.w	r0, r0, ip
 808559a:	ea01 0208 	and.w	r2, r1, r8
 808559e:	4310      	orrs	r0, r2
 80855a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80855a2:	ea4f 01b1 	mov.w	r1, r1, ror #2
 80855a6:	4432      	add	r2, r6
 80855a8:	4452      	add	r2, sl
 80855aa:	4402      	add	r2, r0
 80855ac:	eb02 6af3 	add.w	sl, r2, r3, ror #27
    P( B, C, D, E, A, R(44) );
 80855b0:	9803      	ldr	r0, [sp, #12]
 80855b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80855b4:	ea43 0401 	orr.w	r4, r3, r1
 80855b8:	4050      	eors	r0, r2
 80855ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80855bc:	ea04 0408 	and.w	r4, r4, r8
 80855c0:	4050      	eors	r0, r2
 80855c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80855c4:	ea4f 07b3 	mov.w	r7, r3, ror #2
 80855c8:	4050      	eors	r0, r2
 80855ca:	ea4f 72f0 	mov.w	r2, r0, ror #31
 80855ce:	1990      	adds	r0, r2, r6
 80855d0:	920d      	str	r2, [sp, #52]	; 0x34
 80855d2:	4460      	add	r0, ip
 80855d4:	ea03 0201 	and.w	r2, r3, r1
 80855d8:	4322      	orrs	r2, r4
 80855da:	eb00 60fa 	add.w	r0, r0, sl, ror #27
 80855de:	4410      	add	r0, r2
    P( A, B, C, D, E, R(45) );
 80855e0:	9b02      	ldr	r3, [sp, #8]
 80855e2:	9a04      	ldr	r2, [sp, #16]
 80855e4:	ea4f 09ba 	mov.w	r9, sl, ror #2
 80855e8:	4053      	eors	r3, r2
 80855ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80855ec:	4053      	eors	r3, r2
 80855ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80855f0:	4053      	eors	r3, r2
 80855f2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80855f6:	9302      	str	r3, [sp, #8]
 80855f8:	9a02      	ldr	r2, [sp, #8]
 80855fa:	ea4a 0307 	orr.w	r3, sl, r7
 80855fe:	ea03 0e01 	and.w	lr, r3, r1
 8085602:	ea0a 0307 	and.w	r3, sl, r7
 8085606:	ea4e 0303 	orr.w	r3, lr, r3
 808560a:	eb02 0e06 	add.w	lr, r2, r6
 808560e:	44f0      	add	r8, lr
 8085610:	4498      	add	r8, r3
    P( E, A, B, C, D, R(46) );
 8085612:	9a06      	ldr	r2, [sp, #24]
 8085614:	9b03      	ldr	r3, [sp, #12]
    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
 8085616:	eb08 6ef0 	add.w	lr, r8, r0, ror #27
    P( E, A, B, C, D, R(46) );
 808561a:	ea83 0802 	eor.w	r8, r3, r2
 808561e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8085620:	ea88 0803 	eor.w	r8, r8, r3
 8085624:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8085626:	ea88 0803 	eor.w	r8, r8, r3
 808562a:	ea4f 73f8 	mov.w	r3, r8, ror #31
 808562e:	199c      	adds	r4, r3, r6
 8085630:	4421      	add	r1, r4
 8085632:	ea40 0409 	orr.w	r4, r0, r9
 8085636:	9303      	str	r3, [sp, #12]
 8085638:	403c      	ands	r4, r7
 808563a:	ea00 0309 	and.w	r3, r0, r9
 808563e:	431c      	orrs	r4, r3
    P( D, E, A, B, C, R(47) );
 8085640:	9b04      	ldr	r3, [sp, #16]
 8085642:	9a07      	ldr	r2, [sp, #28]
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
 8085644:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(47) );
 8085648:	ea83 0c02 	eor.w	ip, r3, r2
 808564c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 808564e:	eb01 61fe 	add.w	r1, r1, lr, ror #27
 8085652:	ea8c 0c03 	eor.w	ip, ip, r3
 8085656:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
 8085658:	440c      	add	r4, r1
    P( D, E, A, B, C, R(47) );
 808565a:	ea8c 0c03 	eor.w	ip, ip, r3
 808565e:	ea4f 73fc 	mov.w	r3, ip, ror #31
 8085662:	ea4e 0100 	orr.w	r1, lr, r0
 8085666:	9304      	str	r3, [sp, #16]
 8085668:	ea01 0109 	and.w	r1, r1, r9
 808566c:	ea0e 0300 	and.w	r3, lr, r0
 8085670:	4319      	orrs	r1, r3
 8085672:	9b04      	ldr	r3, [sp, #16]
    P( C, D, E, A, B, R(48) );
 8085674:	9a08      	ldr	r2, [sp, #32]
 8085676:	4433      	add	r3, r6
 8085678:	443b      	add	r3, r7
 808567a:	18cf      	adds	r7, r1, r3
 808567c:	9b06      	ldr	r3, [sp, #24]
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
 808567e:	ea4f 01be 	mov.w	r1, lr, ror #2
    P( C, D, E, A, B, R(48) );
 8085682:	ea83 0802 	eor.w	r8, r3, r2
 8085686:	9b09      	ldr	r3, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
 8085688:	eb07 67f4 	add.w	r7, r7, r4, ror #27
    P( C, D, E, A, B, R(48) );
 808568c:	ea88 0803 	eor.w	r8, r8, r3
 8085690:	9b02      	ldr	r3, [sp, #8]
    P( B, C, D, E, A, R(49) );
 8085692:	ea4f 0ab7 	mov.w	sl, r7, ror #2
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
 8085696:	ea88 0803 	eor.w	r8, r8, r3
 808569a:	ea4f 73f8 	mov.w	r3, r8, ror #31
 808569e:	199a      	adds	r2, r3, r6
 80856a0:	4491      	add	r9, r2
 80856a2:	ea44 0201 	orr.w	r2, r4, r1
 80856a6:	9306      	str	r3, [sp, #24]
 80856a8:	4002      	ands	r2, r0
 80856aa:	ea04 0301 	and.w	r3, r4, r1
 80856ae:	431a      	orrs	r2, r3
    P( B, C, D, E, A, R(49) );
 80856b0:	9b07      	ldr	r3, [sp, #28]
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
 80856b2:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( B, C, D, E, A, R(49) );
 80856b6:	ea83 0c0b 	eor.w	ip, r3, fp
 80856ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80856bc:	eb09 69f7 	add.w	r9, r9, r7, ror #27
 80856c0:	ea8c 0c03 	eor.w	ip, ip, r3
 80856c4:	9b03      	ldr	r3, [sp, #12]
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
 80856c6:	444a      	add	r2, r9
    P( B, C, D, E, A, R(49) );
 80856c8:	ea8c 0c03 	eor.w	ip, ip, r3
 80856cc:	ea4f 73fc 	mov.w	r3, ip, ror #31
 80856d0:	9307      	str	r3, [sp, #28]
 80856d2:	9d07      	ldr	r5, [sp, #28]
 80856d4:	ea47 0304 	orr.w	r3, r7, r4
 80856d8:	ea03 0c01 	and.w	ip, r3, r1
 80856dc:	ea07 0304 	and.w	r3, r7, r4
 80856e0:	ea4c 0303 	orr.w	r3, ip, r3
 80856e4:	eb05 0c06 	add.w	ip, r5, r6
 80856e8:	4460      	add	r0, ip
 80856ea:	4418      	add	r0, r3
 80856ec:	eb00 6cf2 	add.w	ip, r0, r2, ror #27
    P( A, B, C, D, E, R(50) );
 80856f0:	9b08      	ldr	r3, [sp, #32]
 80856f2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80856f4:	ea83 0500 	eor.w	r5, r3, r0
 80856f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80856fa:	ea42 000a 	orr.w	r0, r2, sl
 80856fe:	405d      	eors	r5, r3
 8085700:	9b04      	ldr	r3, [sp, #16]
 8085702:	4020      	ands	r0, r4
 8085704:	405d      	eors	r5, r3
 8085706:	ea4f 77f5 	mov.w	r7, r5, ror #31
 808570a:	19bb      	adds	r3, r7, r6
 808570c:	4419      	add	r1, r3
 808570e:	eb01 63fc 	add.w	r3, r1, ip, ror #27
 8085712:	ea02 010a 	and.w	r1, r2, sl
 8085716:	4301      	orrs	r1, r0
 8085718:	4419      	add	r1, r3
    P( E, A, B, C, D, R(51) );
 808571a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
 808571c:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(51) );
 8085720:	ea8b 0903 	eor.w	r9, fp, r3
 8085724:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8085726:	ea4f 00bc 	mov.w	r0, ip, ror #2
 808572a:	ea89 0903 	eor.w	r9, r9, r3
 808572e:	9b06      	ldr	r3, [sp, #24]
 8085730:	ea89 0903 	eor.w	r9, r9, r3
 8085734:	ea4c 0302 	orr.w	r3, ip, r2
 8085738:	ea4f 7ef9 	mov.w	lr, r9, ror #31
 808573c:	ea03 050a 	and.w	r5, r3, sl
 8085740:	ea0c 0302 	and.w	r3, ip, r2
 8085744:	432b      	orrs	r3, r5
 8085746:	eb0e 0506 	add.w	r5, lr, r6
 808574a:	4425      	add	r5, r4
 808574c:	441d      	add	r5, r3
    P( D, E, A, B, C, R(52) );
 808574e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8085750:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
 8085752:	eb05 65f1 	add.w	r5, r5, r1, ror #27
    P( D, E, A, B, C, R(52) );
 8085756:	4063      	eors	r3, r4
 8085758:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 808575a:	4063      	eors	r3, r4
 808575c:	9c07      	ldr	r4, [sp, #28]
 808575e:	4063      	eors	r3, r4
 8085760:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8085764:	9308      	str	r3, [sp, #32]
 8085766:	4433      	add	r3, r6
 8085768:	449a      	add	sl, r3
 808576a:	eb0a 63f5 	add.w	r3, sl, r5, ror #27
 808576e:	ea41 0a00 	orr.w	sl, r1, r0
 8085772:	ea01 0400 	and.w	r4, r1, r0
 8085776:	ea0a 0a02 	and.w	sl, sl, r2
 808577a:	ea4a 0a04 	orr.w	sl, sl, r4
 808577e:	449a      	add	sl, r3
    P( C, D, E, A, B, R(53) );
 8085780:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8085782:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
 8085784:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(53) );
 8085788:	4063      	eors	r3, r4
 808578a:	9c02      	ldr	r4, [sp, #8]
 808578c:	4063      	eors	r3, r4
 808578e:	407b      	eors	r3, r7
 8085790:	ea45 0401 	orr.w	r4, r5, r1
 8085794:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8085798:	930e      	str	r3, [sp, #56]	; 0x38
 808579a:	4004      	ands	r4, r0
 808579c:	ea05 0301 	and.w	r3, r5, r1
 80857a0:	431c      	orrs	r4, r3
 80857a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80857a4:	ea4f 05b5 	mov.w	r5, r5, ror #2
 80857a8:	4433      	add	r3, r6
 80857aa:	4413      	add	r3, r2
 80857ac:	4423      	add	r3, r4
    P( B, C, D, E, A, R(54) );
 80857ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80857b0:	9c09      	ldr	r4, [sp, #36]	; 0x24
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
 80857b2:	eb03 63fa 	add.w	r3, r3, sl, ror #27
    P( B, C, D, E, A, R(54) );
 80857b6:	ea82 0804 	eor.w	r8, r2, r4
 80857ba:	9a03      	ldr	r2, [sp, #12]
 80857bc:	ea88 0802 	eor.w	r8, r8, r2
 80857c0:	ea88 080e 	eor.w	r8, r8, lr
 80857c4:	ea4f 72f8 	mov.w	r2, r8, ror #31
 80857c8:	eb02 0806 	add.w	r8, r2, r6
 80857cc:	4480      	add	r8, r0
 80857ce:	eb08 60f3 	add.w	r0, r8, r3, ror #27
 80857d2:	ea4a 0805 	orr.w	r8, sl, r5
 80857d6:	920f      	str	r2, [sp, #60]	; 0x3c
 80857d8:	ea08 0801 	and.w	r8, r8, r1
 80857dc:	ea0a 0205 	and.w	r2, sl, r5
 80857e0:	ea48 0802 	orr.w	r8, r8, r2
 80857e4:	4480      	add	r8, r0
    P( A, B, C, D, E, R(55) );
 80857e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80857e8:	980a      	ldr	r0, [sp, #40]	; 0x28
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
 80857ea:	ea4f 0aba 	mov.w	sl, sl, ror #2
    P( A, B, C, D, E, R(55) );
 80857ee:	ea82 0c00 	eor.w	ip, r2, r0
 80857f2:	9a04      	ldr	r2, [sp, #16]
 80857f4:	ea8c 0c02 	eor.w	ip, ip, r2
 80857f8:	9a08      	ldr	r2, [sp, #32]
 80857fa:	ea8c 0c02 	eor.w	ip, ip, r2
 80857fe:	ea4f 72fc 	mov.w	r2, ip, ror #31
 8085802:	9210      	str	r2, [sp, #64]	; 0x40
 8085804:	9810      	ldr	r0, [sp, #64]	; 0x40
 8085806:	ea43 020a 	orr.w	r2, r3, sl
 808580a:	ea02 0c05 	and.w	ip, r2, r5
 808580e:	ea03 020a 	and.w	r2, r3, sl
 8085812:	ea4c 0202 	orr.w	r2, ip, r2
 8085816:	eb00 0c06 	add.w	ip, r0, r6
 808581a:	448c      	add	ip, r1
    P( E, A, B, C, D, R(56) );
 808581c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 808581e:	4494      	add	ip, r2
 8085820:	9a06      	ldr	r2, [sp, #24]
 8085822:	404c      	eors	r4, r1
 8085824:	4054      	eors	r4, r2
 8085826:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
 8085828:	eb0c 6cf8 	add.w	ip, ip, r8, ror #27
    P( E, A, B, C, D, R(56) );
 808582c:	4054      	eors	r4, r2
 808582e:	ea4f 72f4 	mov.w	r2, r4, ror #31
 8085832:	9209      	str	r2, [sp, #36]	; 0x24
 8085834:	4432      	add	r2, r6
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
 8085836:	ea4f 03b3 	mov.w	r3, r3, ror #2
 808583a:	4415      	add	r5, r2
 808583c:	eb05 62fc 	add.w	r2, r5, ip, ror #27
    P( E, A, B, C, D, R(56) );
 8085840:	ea48 0503 	orr.w	r5, r8, r3
 8085844:	e002      	b.n	808584c <mbedtls_internal_sha1_process+0xb24>
 8085846:	bf00      	nop
 8085848:	8f1bbcdc 	.word	0x8f1bbcdc
 808584c:	ea08 0103 	and.w	r1, r8, r3
 8085850:	ea05 050a 	and.w	r5, r5, sl
 8085854:	430d      	orrs	r5, r1
 8085856:	4415      	add	r5, r2
    P( D, E, A, B, C, R(57) );
 8085858:	990c      	ldr	r1, [sp, #48]	; 0x30
 808585a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
 808585c:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( D, E, A, B, C, R(57) );
 8085860:	ea82 0b01 	eor.w	fp, r2, r1
 8085864:	9a07      	ldr	r2, [sp, #28]
    P( C, D, E, A, B, R(58) );
 8085866:	990d      	ldr	r1, [sp, #52]	; 0x34
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
 8085868:	ea8b 0b02 	eor.w	fp, fp, r2
 808586c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 808586e:	ea8b 0b02 	eor.w	fp, fp, r2
 8085872:	ea4c 0208 	orr.w	r2, ip, r8
 8085876:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 808587a:	ea02 0903 	and.w	r9, r2, r3
 808587e:	ea0c 0208 	and.w	r2, ip, r8
 8085882:	ea49 0202 	orr.w	r2, r9, r2
 8085886:	eb0b 0906 	add.w	r9, fp, r6
 808588a:	44d1      	add	r9, sl
 808588c:	4491      	add	r9, r2
    P( C, D, E, A, B, R(58) );
 808588e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
 8085890:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( C, D, E, A, B, R(58) );
 8085894:	ea82 0a01 	eor.w	sl, r2, r1
 8085898:	ea8a 0a07 	eor.w	sl, sl, r7
 808589c:	ea8a 0a00 	eor.w	sl, sl, r0
 80858a0:	ea4f 72fa 	mov.w	r2, sl, ror #31
 80858a4:	920a      	str	r2, [sp, #40]	; 0x28
 80858a6:	4432      	add	r2, r6
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
 80858a8:	eb09 69f5 	add.w	r9, r9, r5, ror #27
    P( C, D, E, A, B, R(58) );
 80858ac:	ea45 010c 	orr.w	r1, r5, ip
 80858b0:	441a      	add	r2, r3
 80858b2:	eb02 63f9 	add.w	r3, r2, r9, ror #27
 80858b6:	ea01 0108 	and.w	r1, r1, r8
 80858ba:	ea05 020c 	and.w	r2, r5, ip
 80858be:	430a      	orrs	r2, r1
 80858c0:	441a      	add	r2, r3
    P( B, C, D, E, A, R(59) );
 80858c2:	9902      	ldr	r1, [sp, #8]
 80858c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
 80858c6:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( B, C, D, E, A, R(59) );
 80858ca:	ea83 0001 	eor.w	r0, r3, r1
 80858ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80858d0:	ea80 000e 	eor.w	r0, r0, lr
 80858d4:	4058      	eors	r0, r3
 80858d6:	ea4f 73f0 	mov.w	r3, r0, ror #31
 80858da:	930b      	str	r3, [sp, #44]	; 0x2c
 80858dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80858de:	ea49 0005 	orr.w	r0, r9, r5
 80858e2:	ea00 000c 	and.w	r0, r0, ip
 80858e6:	ea09 0305 	and.w	r3, r9, r5
 80858ea:	440e      	add	r6, r1
 80858ec:	4446      	add	r6, r8
 80858ee:	4303      	orrs	r3, r0
 80858f0:	1998      	adds	r0, r3, r6
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 80858f2:	9903      	ldr	r1, [sp, #12]
 80858f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80858f6:	4ed8      	ldr	r6, [pc, #864]	; (8085c58 <mbedtls_internal_sha1_process+0xf30>)
 80858f8:	4059      	eors	r1, r3
 80858fa:	9b08      	ldr	r3, [sp, #32]
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
    P( B, C, D, E, A, R(59) );
 80858fc:	ea4f 09b9 	mov.w	r9, r9, ror #2
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 8085900:	4059      	eors	r1, r3
 8085902:	ea81 010b 	eor.w	r1, r1, fp
 8085906:	ea4f 73f1 	mov.w	r3, r1, ror #31
 808590a:	930c      	str	r3, [sp, #48]	; 0x30
 808590c:	990c      	ldr	r1, [sp, #48]	; 0x30
 808590e:	ea85 0309 	eor.w	r3, r5, r9
 8085912:	4431      	add	r1, r6
 8085914:	4053      	eors	r3, r2
 8085916:	4461      	add	r1, ip
 8085918:	4419      	add	r1, r3
    P( E, A, B, C, D, R(61) );
 808591a:	9b02      	ldr	r3, [sp, #8]
 808591c:	9c04      	ldr	r4, [sp, #16]
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
    P( B, C, D, E, A, R(59) );
 808591e:	eb00 60f2 	add.w	r0, r0, r2, ror #27

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
 8085922:	4063      	eors	r3, r4
 8085924:	9c0e      	ldr	r4, [sp, #56]	; 0x38
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 8085926:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(61) );
 808592a:	4063      	eors	r3, r4
 808592c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 808592e:	eb01 61f0 	add.w	r1, r1, r0, ror #27
    P( E, A, B, C, D, R(61) );
 8085932:	4063      	eors	r3, r4
 8085934:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8085938:	9302      	str	r3, [sp, #8]
 808593a:	ea89 0402 	eor.w	r4, r9, r2
 808593e:	4433      	add	r3, r6
 8085940:	4044      	eors	r4, r0
 8085942:	442b      	add	r3, r5
 8085944:	4423      	add	r3, r4
    P( D, E, A, B, C, R(62) );
 8085946:	9d06      	ldr	r5, [sp, #24]
 8085948:	9c03      	ldr	r4, [sp, #12]

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
 808594a:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(62) );
 808594e:	ea84 0805 	eor.w	r8, r4, r5
 8085952:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8085954:	ea82 0500 	eor.w	r5, r2, r0
 8085958:	ea88 0804 	eor.w	r8, r8, r4
 808595c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 808595e:	404d      	eors	r5, r1
 8085960:	ea88 0804 	eor.w	r8, r8, r4
 8085964:	ea4f 74f8 	mov.w	r4, r8, ror #31
 8085968:	9403      	str	r4, [sp, #12]
 808596a:	4434      	add	r4, r6
 808596c:	444c      	add	r4, r9
 808596e:	442c      	add	r4, r5
    P( C, D, E, A, B, R(63) );
 8085970:	9d04      	ldr	r5, [sp, #16]

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
 8085972:	eb03 63f1 	add.w	r3, r3, r1, ror #27
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
 8085976:	46ac      	mov	ip, r5
 8085978:	9d07      	ldr	r5, [sp, #28]
#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
 808597a:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(63) );
 808597e:	ea8c 0c05 	eor.w	ip, ip, r5
 8085982:	9d10      	ldr	r5, [sp, #64]	; 0x40
#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
 8085984:	eb04 64f3 	add.w	r4, r4, r3, ror #27
    P( C, D, E, A, B, R(63) );
 8085988:	ea8c 0c05 	eor.w	ip, ip, r5
 808598c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 808598e:	ea8c 0c05 	eor.w	ip, ip, r5
 8085992:	ea4f 75fc 	mov.w	r5, ip, ror #31
 8085996:	9504      	str	r5, [sp, #16]
 8085998:	ea80 0501 	eor.w	r5, r0, r1
 808599c:	ea85 0c03 	eor.w	ip, r5, r3
 80859a0:	9d04      	ldr	r5, [sp, #16]
 80859a2:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80859a6:	eb05 0a06 	add.w	sl, r5, r6
 80859aa:	4492      	add	sl, r2
    P( B, C, D, E, A, R(64) );
 80859ac:	9a06      	ldr	r2, [sp, #24]
 80859ae:	44e2      	add	sl, ip
 80859b0:	ea82 0807 	eor.w	r8, r2, r7
 80859b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
 80859b6:	eb0a 6af4 	add.w	sl, sl, r4, ror #27
    P( B, C, D, E, A, R(64) );
 80859ba:	ea88 0802 	eor.w	r8, r8, r2
 80859be:	9a02      	ldr	r2, [sp, #8]
 80859c0:	ea88 0802 	eor.w	r8, r8, r2
 80859c4:	ea4f 72f8 	mov.w	r2, r8, ror #31
 80859c8:	9206      	str	r2, [sp, #24]
 80859ca:	9d06      	ldr	r5, [sp, #24]
 80859cc:	ea81 0203 	eor.w	r2, r1, r3
 80859d0:	eb05 0806 	add.w	r8, r5, r6
 80859d4:	4062      	eors	r2, r4
 80859d6:	4480      	add	r8, r0
 80859d8:	4490      	add	r8, r2
    P( A, B, C, D, E, R(65) );
 80859da:	9a07      	ldr	r2, [sp, #28]

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
 80859dc:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( A, B, C, D, E, R(65) );
 80859e0:	ea82 0c0e 	eor.w	ip, r2, lr
 80859e4:	9a03      	ldr	r2, [sp, #12]
 80859e6:	ea8c 0c0b 	eor.w	ip, ip, fp
 80859ea:	ea8c 0c02 	eor.w	ip, ip, r2
 80859ee:	ea4f 72fc 	mov.w	r2, ip, ror #31
 80859f2:	9207      	str	r2, [sp, #28]
 80859f4:	9807      	ldr	r0, [sp, #28]
 80859f6:	ea83 0204 	eor.w	r2, r3, r4
 80859fa:	eb00 0c06 	add.w	ip, r0, r6
 80859fe:	ea82 020a 	eor.w	r2, r2, sl
 8085a02:	448c      	add	ip, r1
 8085a04:	4494      	add	ip, r2
    P( E, A, B, C, D, R(66) );
 8085a06:	9a08      	ldr	r2, [sp, #32]

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
 8085a08:	eb08 68fa 	add.w	r8, r8, sl, ror #27
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
 8085a0c:	ea87 0502 	eor.w	r5, r7, r2
 8085a10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
 8085a12:	ea4f 0aba 	mov.w	sl, sl, ror #2
    P( E, A, B, C, D, R(66) );
 8085a16:	4055      	eors	r5, r2
 8085a18:	9a04      	ldr	r2, [sp, #16]
    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
 8085a1a:	eb0c 6cf8 	add.w	ip, ip, r8, ror #27
    P( E, A, B, C, D, R(66) );
 8085a1e:	4055      	eors	r5, r2
 8085a20:	ea4f 75f5 	mov.w	r5, r5, ror #31
 8085a24:	19af      	adds	r7, r5, r6
 8085a26:	441f      	add	r7, r3
    P( D, E, A, B, C, R(67) );
 8085a28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8085a2a:	ea84 020a 	eor.w	r2, r4, sl
 8085a2e:	ea8e 0903 	eor.w	r9, lr, r3
 8085a32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8085a34:	ea82 0208 	eor.w	r2, r2, r8
 8085a38:	ea89 0903 	eor.w	r9, r9, r3
 8085a3c:	9b06      	ldr	r3, [sp, #24]
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
 8085a3e:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( D, E, A, B, C, R(67) );
 8085a42:	ea89 0903 	eor.w	r9, r9, r3
 8085a46:	ea4f 79f9 	mov.w	r9, r9, ror #31
 8085a4a:	ea8a 0308 	eor.w	r3, sl, r8
 8085a4e:	eb09 0e06 	add.w	lr, r9, r6
 8085a52:	ea83 030c 	eor.w	r3, r3, ip
 8085a56:	44a6      	add	lr, r4
 8085a58:	4417      	add	r7, r2
 8085a5a:	449e      	add	lr, r3
    P( C, D, E, A, B, R(68) );
 8085a5c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8085a5e:	9b08      	ldr	r3, [sp, #32]
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
 8085a60:	eb07 67fc 	add.w	r7, r7, ip, ror #27
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
 8085a64:	4053      	eors	r3, r2
 8085a66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
 8085a68:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( C, D, E, A, B, R(68) );
 8085a6c:	4053      	eors	r3, r2
 8085a6e:	4043      	eors	r3, r0
 8085a70:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8085a74:	9308      	str	r3, [sp, #32]
 8085a76:	9a08      	ldr	r2, [sp, #32]
 8085a78:	ea88 030c 	eor.w	r3, r8, ip
 8085a7c:	4432      	add	r2, r6
 8085a7e:	407b      	eors	r3, r7
 8085a80:	4452      	add	r2, sl
    P( B, C, D, E, A, R(69) );
 8085a82:	9910      	ldr	r1, [sp, #64]	; 0x40
 8085a84:	441a      	add	r2, r3
 8085a86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
 8085a88:	eb0e 6ef7 	add.w	lr, lr, r7, ror #27
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
 8085a8c:	404b      	eors	r3, r1
 8085a8e:	9902      	ldr	r1, [sp, #8]
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
 8085a90:	ea4f 07b7 	mov.w	r7, r7, ror #2
    P( B, C, D, E, A, R(69) );
 8085a94:	404b      	eors	r3, r1
 8085a96:	406b      	eors	r3, r5
 8085a98:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8085a9c:	930d      	str	r3, [sp, #52]	; 0x34
 8085a9e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8085aa0:	ea8c 0307 	eor.w	r3, ip, r7
 8085aa4:	1988      	adds	r0, r1, r6
 8085aa6:	ea83 030e 	eor.w	r3, r3, lr
 8085aaa:	4440      	add	r0, r8
    P( A, B, C, D, E, R(70) );
 8085aac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8085aae:	4418      	add	r0, r3
 8085ab0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
 8085ab2:	eb02 62fe 	add.w	r2, r2, lr, ror #27
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
 8085ab6:	ea83 0801 	eor.w	r8, r3, r1
 8085aba:	9b03      	ldr	r3, [sp, #12]
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
 8085abc:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( A, B, C, D, E, R(70) );
 8085ac0:	ea88 0803 	eor.w	r8, r8, r3
 8085ac4:	ea88 0809 	eor.w	r8, r8, r9
 8085ac8:	ea4f 78f8 	mov.w	r8, r8, ror #31
 8085acc:	ea87 030e 	eor.w	r3, r7, lr
 8085ad0:	eb08 0106 	add.w	r1, r8, r6
 8085ad4:	4053      	eors	r3, r2
 8085ad6:	4461      	add	r1, ip
 8085ad8:	4419      	add	r1, r3
    P( E, A, B, C, D, R(71) );
 8085ada:	9b10      	ldr	r3, [sp, #64]	; 0x40
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
 8085adc:	eb00 60f2 	add.w	r0, r0, r2, ror #27
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
 8085ae0:	ea83 0c0b 	eor.w	ip, r3, fp
 8085ae4:	9b04      	ldr	r3, [sp, #16]
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
 8085ae6:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(71) );
 8085aea:	ea8c 0c03 	eor.w	ip, ip, r3
 8085aee:	9b08      	ldr	r3, [sp, #32]
 8085af0:	ea8e 0402 	eor.w	r4, lr, r2
 8085af4:	ea8c 0c03 	eor.w	ip, ip, r3
 8085af8:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 8085afc:	eb0c 0306 	add.w	r3, ip, r6
 8085b00:	4044      	eors	r4, r0
 8085b02:	443b      	add	r3, r7
 8085b04:	4423      	add	r3, r4
    P( D, E, A, B, C, R(72) );
 8085b06:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8085b08:	9c09      	ldr	r4, [sp, #36]	; 0x24
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
 8085b0a:	eb01 61f0 	add.w	r1, r1, r0, ror #27
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
 8085b0e:	4067      	eors	r7, r4
 8085b10:	9c06      	ldr	r4, [sp, #24]
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
 8085b12:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(72) );
 8085b16:	4067      	eors	r7, r4
 8085b18:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8085b1a:	ea82 0a00 	eor.w	sl, r2, r0
 8085b1e:	4067      	eors	r7, r4
 8085b20:	ea4f 74f7 	mov.w	r4, r7, ror #31
    P( C, D, E, A, B, R(73) );
 8085b24:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
 8085b26:	9409      	str	r4, [sp, #36]	; 0x24
 8085b28:	4434      	add	r4, r6
 8085b2a:	4474      	add	r4, lr
    P( C, D, E, A, B, R(73) );
 8085b2c:	ea8b 0e07 	eor.w	lr, fp, r7
 8085b30:	9f07      	ldr	r7, [sp, #28]
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
 8085b32:	eb03 63f1 	add.w	r3, r3, r1, ror #27
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
 8085b36:	ea8e 0e07 	eor.w	lr, lr, r7
 8085b3a:	ea8e 0e08 	eor.w	lr, lr, r8
 8085b3e:	ea8a 0a01 	eor.w	sl, sl, r1
 8085b42:	ea4f 7efe 	mov.w	lr, lr, ror #31
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
 8085b46:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 8085b4a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8085b4c:	eb0e 0b06 	add.w	fp, lr, r6
 8085b50:	4454      	add	r4, sl
 8085b52:	ea80 0a01 	eor.w	sl, r0, r1
 8085b56:	ea8a 0a03 	eor.w	sl, sl, r3
 8085b5a:	445a      	add	r2, fp
 8085b5c:	4452      	add	r2, sl
 8085b5e:	46ba      	mov	sl, r7
 8085b60:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
 8085b62:	eb04 64f3 	add.w	r4, r4, r3, ror #27
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 8085b66:	ea8a 0a07 	eor.w	sl, sl, r7
 8085b6a:	ea8a 0505 	eor.w	r5, sl, r5
 8085b6e:	ea85 050c 	eor.w	r5, r5, ip
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
 8085b72:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( B, C, D, E, A, R(74) );
 8085b76:	ea4f 75f5 	mov.w	r5, r5, ror #31
 8085b7a:	eb05 0b06 	add.w	fp, r5, r6
 8085b7e:	ea81 0a03 	eor.w	sl, r1, r3
 8085b82:	4458      	add	r0, fp
 8085b84:	ea8a 0a04 	eor.w	sl, sl, r4
    P( A, B, C, D, E, R(75) );
 8085b88:	9f02      	ldr	r7, [sp, #8]
 8085b8a:	4482      	add	sl, r0
 8085b8c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
 8085b8e:	eb02 62f4 	add.w	r2, r2, r4, ror #27
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
 8085b92:	4078      	eors	r0, r7
 8085b94:	ea80 0909 	eor.w	r9, r0, r9
 8085b98:	9809      	ldr	r0, [sp, #36]	; 0x24
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 8085b9a:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( A, B, C, D, E, R(75) );
 8085b9e:	ea89 0700 	eor.w	r7, r9, r0
 8085ba2:	ea4f 77f7 	mov.w	r7, r7, ror #31
 8085ba6:	eb07 0906 	add.w	r9, r7, r6
 8085baa:	ea83 0004 	eor.w	r0, r3, r4
 8085bae:	4449      	add	r1, r9
 8085bb0:	4050      	eors	r0, r2
 8085bb2:	4408      	add	r0, r1
    P( E, A, B, C, D, R(76) );
 8085bb4:	990c      	ldr	r1, [sp, #48]	; 0x30
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 8085bb6:	950a      	str	r5, [sp, #40]	; 0x28
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
 8085bb8:	460d      	mov	r5, r1
 8085bba:	9903      	ldr	r1, [sp, #12]
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 8085bbc:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
 8085bc0:	4069      	eors	r1, r5
 8085bc2:	9d08      	ldr	r5, [sp, #32]
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
 8085bc4:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(76) );
 8085bc8:	4069      	eors	r1, r5
 8085bca:	ea81 0e0e 	eor.w	lr, r1, lr
 8085bce:	ea4f 7efe 	mov.w	lr, lr, ror #31
 8085bd2:	eb0e 0906 	add.w	r9, lr, r6
 8085bd6:	ea84 0102 	eor.w	r1, r4, r2
 8085bda:	444b      	add	r3, r9
 8085bdc:	ea81 010a 	eor.w	r1, r1, sl
 8085be0:	9d04      	ldr	r5, [sp, #16]
 8085be2:	4419      	add	r1, r3
 8085be4:	9b02      	ldr	r3, [sp, #8]
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
 8085be6:	eb00 60fa 	add.w	r0, r0, sl, ror #27
 8085bea:	406b      	eors	r3, r5
 8085bec:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(76) );
 8085bee:	ea4f 0aba 	mov.w	sl, sl, ror #2
 8085bf2:	406b      	eors	r3, r5
 8085bf4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8085bf6:	ea82 090a 	eor.w	r9, r2, sl
 8085bfa:	406b      	eors	r3, r5
 8085bfc:	eb06 73f3 	add.w	r3, r6, r3, ror #31
 8085c00:	9d06      	ldr	r5, [sp, #24]
 8085c02:	441c      	add	r4, r3
 8085c04:	9b03      	ldr	r3, [sp, #12]
 8085c06:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 8085c0a:	406b      	eors	r3, r5
 8085c0c:	ea83 0808 	eor.w	r8, r3, r8
 8085c10:	ea89 0900 	eor.w	r9, r9, r0
 8085c14:	ea88 0807 	eor.w	r8, r8, r7
    P( D, E, A, B, C, R(77) );
 8085c18:	ea4f 00b0 	mov.w	r0, r0, ror #2
 8085c1c:	eb06 78f8 	add.w	r8, r6, r8, ror #31
 8085c20:	ea8a 0500 	eor.w	r5, sl, r0
 8085c24:	404d      	eors	r5, r1
 8085c26:	4442      	add	r2, r8
 8085c28:	442a      	add	r2, r5
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
 8085c2a:	9b04      	ldr	r3, [sp, #16]
 8085c2c:	9d07      	ldr	r5, [sp, #28]
 8085c2e:	444c      	add	r4, r9
 8085c30:	406b      	eors	r3, r5
 8085c32:	ea83 0c0c 	eor.w	ip, r3, ip
 8085c36:	9b12      	ldr	r3, [sp, #72]	; 0x48
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
 8085c38:	eb04 64f1 	add.w	r4, r4, r1, ror #27
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
 8085c3c:	441e      	add	r6, r3
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
    P( C, D, E, A, B, R(78) );
 8085c3e:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
 8085c42:	ea8c 0e0e 	eor.w	lr, ip, lr
 8085c46:	ea80 0501 	eor.w	r5, r0, r1
 8085c4a:	eb06 7efe 	add.w	lr, r6, lr, ror #31
 8085c4e:	4065      	eors	r5, r4
 8085c50:	44f2      	add	sl, lr
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
    P( C, D, E, A, B, R(78) );
 8085c52:	eb02 62f4 	add.w	r2, r2, r4, ror #27
 8085c56:	e001      	b.n	8085c5c <mbedtls_internal_sha1_process+0xf34>
 8085c58:	ca62c1d6 	.word	0xca62c1d6
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
 8085c5c:	eb0a 0305 	add.w	r3, sl, r5
 8085c60:	9d01      	ldr	r5, [sp, #4]
 8085c62:	eb03 63f2 	add.w	r3, r3, r2, ror #27
 8085c66:	60ab      	str	r3, [r5, #8]
    ctx->state[1] += B;
 8085c68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8085c6a:	441a      	add	r2, r3
    ctx->state[2] += C;
 8085c6c:	9b05      	ldr	r3, [sp, #20]

#undef K
#undef F

    ctx->state[0] += A;
    ctx->state[1] += B;
 8085c6e:	60ea      	str	r2, [r5, #12]
    ctx->state[2] += C;
 8085c70:	eb03 04b4 	add.w	r4, r3, r4, ror #2
    ctx->state[3] += D;
 8085c74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
#undef K
#undef F

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
 8085c76:	612c      	str	r4, [r5, #16]
    ctx->state[3] += D;
 8085c78:	4419      	add	r1, r3
    ctx->state[4] += E;
 8085c7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
#undef F

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
 8085c7c:	6169      	str	r1, [r5, #20]
    ctx->state[4] += E;
 8085c7e:	4418      	add	r0, r3
 8085c80:	61a8      	str	r0, [r5, #24]

    return( 0 );
}
 8085c82:	2000      	movs	r0, #0
 8085c84:	b017      	add	sp, #92	; 0x5c
 8085c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085c8a:	bf00      	nop

08085c8c <mbedtls_sha1_update_ret>:
 * SHA-1 process buffer
 */
int mbedtls_sha1_update_ret( mbedtls_sha1_context *ctx,
                             const unsigned char *input,
                             size_t ilen )
{
 8085c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8085c90:	4604      	mov	r4, r0
 8085c92:	460e      	mov	r6, r1
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
 8085c94:	4615      	mov	r5, r2
 8085c96:	b382      	cbz	r2, 8085cfa <mbedtls_sha1_update_ret+0x6e>
        return( 0 );

    left = ctx->total[0] & 0x3F;
 8085c98:	6803      	ldr	r3, [r0, #0]
 8085c9a:	f003 003f 	and.w	r0, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 8085c9e:	4413      	add	r3, r2
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
 8085ca0:	429a      	cmp	r2, r3
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 8085ca2:	6023      	str	r3, [r4, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
 8085ca4:	bf82      	ittt	hi
 8085ca6:	6863      	ldrhi	r3, [r4, #4]
 8085ca8:	3301      	addhi	r3, #1
 8085caa:	6063      	strhi	r3, [r4, #4]

    if( left && ilen >= fill )
 8085cac:	b180      	cbz	r0, 8085cd0 <mbedtls_sha1_update_ret+0x44>

    if( ilen == 0 )
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
 8085cae:	f1c0 0740 	rsb	r7, r0, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
 8085cb2:	42ba      	cmp	r2, r7
 8085cb4:	d31b      	bcc.n	8085cee <mbedtls_sha1_update_ret+0x62>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 8085cb6:	f104 081c 	add.w	r8, r4, #28
 8085cba:	463a      	mov	r2, r7
 8085cbc:	4440      	add	r0, r8
 8085cbe:	f00e f950 	bl	8093f62 <memcpy>

        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
 8085cc2:	4641      	mov	r1, r8
 8085cc4:	4620      	mov	r0, r4
 8085cc6:	f7ff f82f 	bl	8084d28 <mbedtls_internal_sha1_process>
 8085cca:	b9b8      	cbnz	r0, 8085cfc <mbedtls_sha1_update_ret+0x70>
            return( ret );

        input += fill;
 8085ccc:	443e      	add	r6, r7
        ilen  -= fill;
 8085cce:	1bed      	subs	r5, r5, r7
 * SHA-1 process buffer
 */
int mbedtls_sha1_update_ret( mbedtls_sha1_context *ctx,
                             const unsigned char *input,
                             size_t ilen )
{
 8085cd0:	462f      	mov	r7, r5
 8085cd2:	1be9      	subs	r1, r5, r7
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
 8085cd4:	2f3f      	cmp	r7, #63	; 0x3f
 8085cd6:	4431      	add	r1, r6
 8085cd8:	d905      	bls.n	8085ce6 <mbedtls_sha1_update_ret+0x5a>
    {
        if( ( ret = mbedtls_internal_sha1_process( ctx, input ) ) != 0 )
 8085cda:	4620      	mov	r0, r4
 8085cdc:	f7ff f824 	bl	8084d28 <mbedtls_internal_sha1_process>
 8085ce0:	b960      	cbnz	r0, 8085cfc <mbedtls_sha1_update_ret+0x70>
            return( ret );

        input += 64;
        ilen  -= 64;
 8085ce2:	3f40      	subs	r7, #64	; 0x40
 8085ce4:	e7f5      	b.n	8085cd2 <mbedtls_sha1_update_ret+0x46>
    }

    if( ilen > 0 )
 8085ce6:	b147      	cbz	r7, 8085cfa <mbedtls_sha1_update_ret+0x6e>
 8085ce8:	463d      	mov	r5, r7
 8085cea:	460e      	mov	r6, r1
 8085cec:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8085cee:	341c      	adds	r4, #28
 8085cf0:	462a      	mov	r2, r5
 8085cf2:	4631      	mov	r1, r6
 8085cf4:	4420      	add	r0, r4
 8085cf6:	f00e f934 	bl	8093f62 <memcpy>

    return( 0 );
 8085cfa:	2000      	movs	r0, #0
}
 8085cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08085d00 <mbedtls_sha1_finish_ret>:
/*
 * SHA-1 final digest
 */
int mbedtls_sha1_finish_ret( mbedtls_sha1_context *ctx,
                             unsigned char output[20] )
{
 8085d00:	b570      	push	{r4, r5, r6, lr}
 8085d02:	4604      	mov	r4, r0
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 8085d04:	6803      	ldr	r3, [r0, #0]

    ctx->buffer[used++] = 0x80;
 8085d06:	2280      	movs	r2, #128	; 0x80
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 8085d08:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
 8085d0c:	1c58      	adds	r0, r3, #1

    if( used <= 56 )
 8085d0e:	2838      	cmp	r0, #56	; 0x38
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 8085d10:	4423      	add	r3, r4
/*
 * SHA-1 final digest
 */
int mbedtls_sha1_finish_ret( mbedtls_sha1_context *ctx,
                             unsigned char output[20] )
{
 8085d12:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 8085d14:	771a      	strb	r2, [r3, #28]
 8085d16:	f104 061c 	add.w	r6, r4, #28

    if( used <= 56 )
 8085d1a:	d804      	bhi.n	8085d26 <mbedtls_sha1_finish_ret+0x26>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 8085d1c:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 8085d20:	2100      	movs	r1, #0
 8085d22:	4430      	add	r0, r6
 8085d24:	e00e      	b.n	8085d44 <mbedtls_sha1_finish_ret+0x44>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 8085d26:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 8085d2a:	2100      	movs	r1, #0
 8085d2c:	4430      	add	r0, r6
 8085d2e:	f00e f93e 	bl	8093fae <memset>

        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
 8085d32:	4631      	mov	r1, r6
 8085d34:	4620      	mov	r0, r4
 8085d36:	f7fe fff7 	bl	8084d28 <mbedtls_internal_sha1_process>
 8085d3a:	2800      	cmp	r0, #0
 8085d3c:	d153      	bne.n	8085de6 <mbedtls_sha1_finish_ret+0xe6>
            return( ret );

        memset( ctx->buffer, 0, 56 );
 8085d3e:	4601      	mov	r1, r0
 8085d40:	4630      	mov	r0, r6
 8085d42:	2238      	movs	r2, #56	; 0x38
 8085d44:	f00e f933 	bl	8093fae <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 8085d48:	6823      	ldr	r3, [r4, #0]
         | ( ctx->total[1] <<  3 );
 8085d4a:	6861      	ldr	r1, [r4, #4]
 8085d4c:	0f5a      	lsrs	r2, r3, #29
 8085d4e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 8085d52:	0e11      	lsrs	r1, r2, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 8085d54:	00db      	lsls	r3, r3, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 8085d56:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
 8085d5a:	0c11      	lsrs	r1, r2, #16
 8085d5c:	f884 1055 	strb.w	r1, [r4, #85]	; 0x55
 8085d60:	f884 2057 	strb.w	r2, [r4, #87]	; 0x57
 8085d64:	0a11      	lsrs	r1, r2, #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 8085d66:	0e1a      	lsrs	r2, r3, #24
 8085d68:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 8085d6c:	0c1a      	lsrs	r2, r3, #16
 8085d6e:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8085d72:	0a1a      	lsrs	r2, r3, #8
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 8085d74:	f884 1056 	strb.w	r1, [r4, #86]	; 0x56
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 8085d78:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a
 8085d7c:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b

    if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
 8085d80:	4631      	mov	r1, r6
 8085d82:	4620      	mov	r0, r4
 8085d84:	f7fe ffd0 	bl	8084d28 <mbedtls_internal_sha1_process>
 8085d88:	2800      	cmp	r0, #0
 8085d8a:	d12c      	bne.n	8085de6 <mbedtls_sha1_finish_ret+0xe6>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 8085d8c:	7ae3      	ldrb	r3, [r4, #11]
 8085d8e:	702b      	strb	r3, [r5, #0]
 8085d90:	8963      	ldrh	r3, [r4, #10]
 8085d92:	706b      	strb	r3, [r5, #1]
 8085d94:	68a3      	ldr	r3, [r4, #8]
 8085d96:	0a1b      	lsrs	r3, r3, #8
 8085d98:	70ab      	strb	r3, [r5, #2]
 8085d9a:	68a3      	ldr	r3, [r4, #8]
 8085d9c:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 8085d9e:	7be3      	ldrb	r3, [r4, #15]
 8085da0:	712b      	strb	r3, [r5, #4]
 8085da2:	89e3      	ldrh	r3, [r4, #14]
 8085da4:	716b      	strb	r3, [r5, #5]
 8085da6:	68e3      	ldr	r3, [r4, #12]
 8085da8:	0a1b      	lsrs	r3, r3, #8
 8085daa:	71ab      	strb	r3, [r5, #6]
 8085dac:	68e3      	ldr	r3, [r4, #12]
 8085dae:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 8085db0:	7ce3      	ldrb	r3, [r4, #19]
 8085db2:	722b      	strb	r3, [r5, #8]
 8085db4:	8a63      	ldrh	r3, [r4, #18]
 8085db6:	726b      	strb	r3, [r5, #9]
 8085db8:	6923      	ldr	r3, [r4, #16]
 8085dba:	0a1b      	lsrs	r3, r3, #8
 8085dbc:	72ab      	strb	r3, [r5, #10]
 8085dbe:	6923      	ldr	r3, [r4, #16]
 8085dc0:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 8085dc2:	7de3      	ldrb	r3, [r4, #23]
 8085dc4:	732b      	strb	r3, [r5, #12]
 8085dc6:	8ae3      	ldrh	r3, [r4, #22]
 8085dc8:	736b      	strb	r3, [r5, #13]
 8085dca:	6963      	ldr	r3, [r4, #20]
 8085dcc:	0a1b      	lsrs	r3, r3, #8
 8085dce:	73ab      	strb	r3, [r5, #14]
 8085dd0:	6963      	ldr	r3, [r4, #20]
 8085dd2:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 8085dd4:	7ee3      	ldrb	r3, [r4, #27]
 8085dd6:	742b      	strb	r3, [r5, #16]
 8085dd8:	8b63      	ldrh	r3, [r4, #26]
 8085dda:	746b      	strb	r3, [r5, #17]
 8085ddc:	69a3      	ldr	r3, [r4, #24]
 8085dde:	0a1b      	lsrs	r3, r3, #8
 8085de0:	74ab      	strb	r3, [r5, #18]
 8085de2:	69a3      	ldr	r3, [r4, #24]
 8085de4:	74eb      	strb	r3, [r5, #19]

    return( 0 );
}
 8085de6:	bd70      	pop	{r4, r5, r6, pc}

08085de8 <mbedtls_sha1_ret>:
 * output = SHA-1( input buffer )
 */
int mbedtls_sha1_ret( const unsigned char *input,
                      size_t ilen,
                      unsigned char output[20] )
{
 8085de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8085dea:	b099      	sub	sp, #100	; 0x64
 8085dec:	4606      	mov	r6, r0
    int ret;
    mbedtls_sha1_context ctx;

    mbedtls_sha1_init( &ctx );
 8085dee:	a801      	add	r0, sp, #4
 * output = SHA-1( input buffer )
 */
int mbedtls_sha1_ret( const unsigned char *input,
                      size_t ilen,
                      unsigned char output[20] )
{
 8085df0:	460f      	mov	r7, r1
 8085df2:	4615      	mov	r5, r2
    int ret;
    mbedtls_sha1_context ctx;

    mbedtls_sha1_init( &ctx );
 8085df4:	f7fe ff6a 	bl	8084ccc <mbedtls_sha1_init>

    if( ( ret = mbedtls_sha1_starts_ret( &ctx ) ) != 0 )
 8085df8:	a801      	add	r0, sp, #4
 8085dfa:	f7fe ff7b 	bl	8084cf4 <mbedtls_sha1_starts_ret>
 8085dfe:	4604      	mov	r4, r0
 8085e00:	b958      	cbnz	r0, 8085e1a <mbedtls_sha1_ret+0x32>
        goto exit;

    if( ( ret = mbedtls_sha1_update_ret( &ctx, input, ilen ) ) != 0 )
 8085e02:	463a      	mov	r2, r7
 8085e04:	4631      	mov	r1, r6
 8085e06:	a801      	add	r0, sp, #4
 8085e08:	f7ff ff40 	bl	8085c8c <mbedtls_sha1_update_ret>
 8085e0c:	4604      	mov	r4, r0
 8085e0e:	b920      	cbnz	r0, 8085e1a <mbedtls_sha1_ret+0x32>
        goto exit;

    if( ( ret = mbedtls_sha1_finish_ret( &ctx, output ) ) != 0 )
 8085e10:	4629      	mov	r1, r5
 8085e12:	a801      	add	r0, sp, #4
 8085e14:	f7ff ff74 	bl	8085d00 <mbedtls_sha1_finish_ret>
 8085e18:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_sha1_free( &ctx );
 8085e1a:	a801      	add	r0, sp, #4
 8085e1c:	f7fe ff5a 	bl	8084cd4 <mbedtls_sha1_free>

    return( ret );
}
 8085e20:	4620      	mov	r0, r4
 8085e22:	b019      	add	sp, #100	; 0x64
 8085e24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08085e26 <mbedtls_timing_get_timer.part.0>:
    CloseHandle( CreateThread( NULL, 0, TimerProc, NULL, 0, &ThreadId ) );
}

#else /* _WIN32 && !EFIX64 && !EFI32 */

unsigned long mbedtls_timing_get_timer( struct mbedtls_timing_hr_time *val, int reset )
 8085e26:	b513      	push	{r0, r1, r4, lr}
 8085e28:	4604      	mov	r4, r0
    }
    else
    {
        unsigned long delta;
        struct timeval now;
        gettimeofday( &now, NULL );
 8085e2a:	2100      	movs	r1, #0
 8085e2c:	4668      	mov	r0, sp
 8085e2e:	f00f f87f 	bl	8094f30 <gettimeofday>
        delta = ( now.tv_sec  - t->start.tv_sec  ) * 1000ul
              + ( now.tv_usec - t->start.tv_usec ) / 1000;
 8085e32:	9b00      	ldr	r3, [sp, #0]
 8085e34:	6822      	ldr	r2, [r4, #0]
 8085e36:	6861      	ldr	r1, [r4, #4]
 8085e38:	1a9a      	subs	r2, r3, r2
 8085e3a:	9b01      	ldr	r3, [sp, #4]
 8085e3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8085e40:	1a5b      	subs	r3, r3, r1
 8085e42:	fb93 f3f0 	sdiv	r3, r3, r0
        return( delta );
    }
}
 8085e46:	fb00 3002 	mla	r0, r0, r2, r3
 8085e4a:	b002      	add	sp, #8
 8085e4c:	bd10      	pop	{r4, pc}

08085e4e <_gettimeofday>:
#define HAVE_HARDCLOCK

#include "rtc_hal.h"
#include "timer_hal.h"
extern "C" int _gettimeofday( struct timeval *tv, void *tzvp )
{
 8085e4e:	b538      	push	{r3, r4, r5, lr}
 8085e50:	4604      	mov	r4, r0
    uint32_t t = HAL_Timer_Milliseconds();  // get uptime
 8085e52:	f00a ff59 	bl	8090d08 <HAL_Timer_Get_Milli_Seconds>
 8085e56:	4605      	mov	r5, r0
    tv->tv_sec = HAL_RTC_Get_UnixTime();    // get rtc time before Particle.syncTime()
 8085e58:	f00a ff5e 	bl	8090d18 <HAL_RTC_Get_UnixTime>
    tv->tv_usec = ( t % 1000 )*1000;        // get remaining microseconds
 8085e5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
#include "rtc_hal.h"
#include "timer_hal.h"
extern "C" int _gettimeofday( struct timeval *tv, void *tzvp )
{
    uint32_t t = HAL_Timer_Milliseconds();  // get uptime
    tv->tv_sec = HAL_RTC_Get_UnixTime();    // get rtc time before Particle.syncTime()
 8085e60:	6020      	str	r0, [r4, #0]
    tv->tv_usec = ( t % 1000 )*1000;        // get remaining microseconds
 8085e62:	fbb5 f0f3 	udiv	r0, r5, r3
 8085e66:	fb03 5010 	mls	r0, r3, r0, r5
 8085e6a:	4343      	muls	r3, r0
 8085e6c:	6063      	str	r3, [r4, #4]
    return 0;
} // end _gettimeofday()
 8085e6e:	2000      	movs	r0, #0
 8085e70:	bd38      	pop	{r3, r4, r5, pc}

08085e72 <mbedtls_timing_set_delay>:
 */
void mbedtls_timing_set_delay( void *data, uint32_t int_ms, uint32_t fin_ms )
{
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;

    ctx->int_ms = int_ms;
 8085e72:	6201      	str	r1, [r0, #32]
    ctx->fin_ms = fin_ms;
 8085e74:	6242      	str	r2, [r0, #36]	; 0x24

    if( fin_ms != 0 )
 8085e76:	b112      	cbz	r2, 8085e7e <mbedtls_timing_set_delay+0xc>
{
    struct _hr_time *t = (struct _hr_time *) val;

    if( reset )
    {
        gettimeofday( &t->start, NULL );
 8085e78:	2100      	movs	r1, #0
 8085e7a:	f00f b859 	b.w	8094f30 <gettimeofday>
 8085e7e:	4770      	bx	lr

08085e80 <mbedtls_timing_get_delay>:

/*
 * Get number of delays expired
 */
int mbedtls_timing_get_delay( void *data )
{
 8085e80:	b510      	push	{r4, lr}
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;
    unsigned long elapsed_ms;

    if( ctx->fin_ms == 0 )
 8085e82:	6a43      	ldr	r3, [r0, #36]	; 0x24

/*
 * Get number of delays expired
 */
int mbedtls_timing_get_delay( void *data )
{
 8085e84:	4604      	mov	r4, r0
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;
    unsigned long elapsed_ms;

    if( ctx->fin_ms == 0 )
 8085e86:	b153      	cbz	r3, 8085e9e <mbedtls_timing_get_delay+0x1e>
 8085e88:	f7ff ffcd 	bl	8085e26 <mbedtls_timing_get_timer.part.0>
        return( -1 );

    elapsed_ms = mbedtls_timing_get_timer( &ctx->timer, 0 );

    if( elapsed_ms >= ctx->fin_ms )
 8085e8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8085e8e:	4283      	cmp	r3, r0
 8085e90:	d908      	bls.n	8085ea4 <mbedtls_timing_get_delay+0x24>
{
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;
    unsigned long elapsed_ms;

    if( ctx->fin_ms == 0 )
        return( -1 );
 8085e92:	6a23      	ldr	r3, [r4, #32]
 8085e94:	4283      	cmp	r3, r0
 8085e96:	bf8c      	ite	hi
 8085e98:	2000      	movhi	r0, #0
 8085e9a:	2001      	movls	r0, #1
 8085e9c:	bd10      	pop	{r4, pc}
 8085e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8085ea2:	bd10      	pop	{r4, pc}

    elapsed_ms = mbedtls_timing_get_timer( &ctx->timer, 0 );

    if( elapsed_ms >= ctx->fin_ms )
        return( 2 );
 8085ea4:	2002      	movs	r0, #2

    if( elapsed_ms >= ctx->int_ms )
        return( 1 );

    return( 0 );
}
 8085ea6:	bd10      	pop	{r4, pc}

08085ea8 <_ZL12gcm_ctx_freePv>:

    return( ctx );
}

static void gcm_ctx_free( void *ctx )
{
 8085ea8:	b510      	push	{r4, lr}
 8085eaa:	4604      	mov	r4, r0
    mbedtls_gcm_free( (mbedtls_gcm_context *)ctx );
 8085eac:	f001 faee 	bl	808748c <mbedtls_gcm_free>
    mbedtls_free( ctx );
 8085eb0:	4620      	mov	r0, r4
}
 8085eb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void gcm_ctx_free( void *ctx )
{
    mbedtls_gcm_free( (mbedtls_gcm_context *)ctx );
    mbedtls_free( ctx );
 8085eb6:	f00b b94f 	b.w	8091158 <free>

08085eba <_ZL13gcm_ctx_allocv>:
#endif

#if defined(MBEDTLS_GCM_C)
/* shared by all GCM ciphers */
static void *gcm_ctx_alloc( void )
{
 8085eba:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );
 8085ebc:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8085ec0:	2001      	movs	r0, #1
 8085ec2:	f00d ff27 	bl	8093d14 <calloc>

    if( ctx != NULL )
 8085ec6:	4604      	mov	r4, r0
 8085ec8:	b108      	cbz	r0, 8085ece <_ZL13gcm_ctx_allocv+0x14>
        mbedtls_gcm_init( (mbedtls_gcm_context *) ctx );
 8085eca:	f001 f84d 	bl	8086f68 <mbedtls_gcm_init>

    return( ctx );
}
 8085ece:	4620      	mov	r0, r4
 8085ed0:	bd10      	pop	{r4, pc}

08085ed2 <_ZL19gcm_aes_setkey_wrapPvPKhj>:
#if defined(MBEDTLS_GCM_C)
static int gcm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
                     key, key_bitlen );
 8085ed2:	4613      	mov	r3, r2
 8085ed4:	460a      	mov	r2, r1
 8085ed6:	2102      	movs	r1, #2
 8085ed8:	f001 b84b 	b.w	8086f72 <mbedtls_gcm_setkey>

08085edc <_ZL12aes_ctx_freePv>:

    return( aes );
}

static void aes_ctx_free( void *ctx )
{
 8085edc:	b510      	push	{r4, lr}
 8085ede:	4604      	mov	r4, r0
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
 8085ee0:	f006 fb9f 	bl	808c622 <mbedtls_aes_free>
    mbedtls_free( ctx );
 8085ee4:	4620      	mov	r0, r4
}
 8085ee6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void aes_ctx_free( void *ctx )
{
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
    mbedtls_free( ctx );
 8085eea:	f00b b935 	b.w	8091158 <free>

08085eee <_ZL13aes_ctx_allocv>:
{
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
}

static void * aes_ctx_alloc( void )
{
 8085eee:	b510      	push	{r4, lr}
    mbedtls_aes_context *aes = (mbedtls_aes_context *)mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
 8085ef0:	f44f 718c 	mov.w	r1, #280	; 0x118
 8085ef4:	2001      	movs	r0, #1
 8085ef6:	f00d ff0d 	bl	8093d14 <calloc>

    if( aes == NULL )
 8085efa:	4604      	mov	r4, r0
 8085efc:	b108      	cbz	r0, 8085f02 <_ZL13aes_ctx_allocv+0x14>
        return( NULL );

    mbedtls_aes_init( aes );
 8085efe:	f006 fb8b 	bl	808c618 <mbedtls_aes_init>

    return( aes );
}
 8085f02:	4620      	mov	r0, r4
 8085f04:	bd10      	pop	{r4, pc}

08085f06 <_ZL19aes_setkey_dec_wrapPvPKhj>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

static int aes_setkey_dec_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
 8085f06:	f006 bc93 	b.w	808c830 <mbedtls_aes_setkey_dec>

08085f0a <_ZL19aes_setkey_enc_wrapPvPKhj>:
}

static int aes_setkey_enc_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
 8085f0a:	f006 bb95 	b.w	808c638 <mbedtls_aes_setkey_enc>

08085f0e <_ZL18aes_crypt_cbc_wrapPv19mbedtls_operation_tjPhPKhS1_>:
}

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int aes_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation, size_t length,
        unsigned char *iv, const unsigned char *input, unsigned char *output )
{
 8085f0e:	b410      	push	{r4}
    return mbedtls_aes_crypt_cbc( (mbedtls_aes_context *) ctx, operation, length, iv, input,
                          output );
}
 8085f10:	bc10      	pop	{r4}
#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int aes_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation, size_t length,
        unsigned char *iv, const unsigned char *input, unsigned char *output )
{
    return mbedtls_aes_crypt_cbc( (mbedtls_aes_context *) ctx, operation, length, iv, input,
                          output );
 8085f12:	f007 b8a3 	b.w	808d05c <mbedtls_aes_crypt_cbc>

08085f16 <_ZL18aes_crypt_ecb_wrapPv19mbedtls_operation_tPKhPh>:
#if defined(MBEDTLS_AES_C)

static int aes_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        const unsigned char *input, unsigned char *output )
{
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
 8085f16:	f007 b895 	b.w	808d044 <mbedtls_aes_crypt_ecb>

08085f1a <_ZL10rsa_can_do17mbedtls_pk_type_t>:
#endif

#if defined(MBEDTLS_RSA_C)
static int rsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_RSA ||
 8085f1a:	2801      	cmp	r0, #1
 8085f1c:	d002      	beq.n	8085f24 <_ZL10rsa_can_do17mbedtls_pk_type_t+0xa>
 8085f1e:	1f83      	subs	r3, r0, #6
 8085f20:	4258      	negs	r0, r3
 8085f22:	4158      	adcs	r0, r3
            type == MBEDTLS_PK_RSASSA_PSS );
}
 8085f24:	4770      	bx	lr
	...

08085f28 <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item>:
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
 8085f28:	2301      	movs	r3, #1
    items->name = "rsa.N";
 8085f2a:	4a06      	ldr	r2, [pc, #24]	; (8085f44 <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item+0x1c>)
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
 8085f2c:	700b      	strb	r3, [r1, #0]
    items->name = "rsa.N";
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
 8085f2e:	730b      	strb	r3, [r1, #12]
    items->name = "rsa.E";
 8085f30:	4b05      	ldr	r3, [pc, #20]	; (8085f48 <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item+0x20>)
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.N";
 8085f32:	604a      	str	r2, [r1, #4]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 8085f34:	f100 0208 	add.w	r2, r0, #8

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.E";
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 8085f38:	3014      	adds	r0, #20

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.N";
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 8085f3a:	608a      	str	r2, [r1, #8]

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.E";
 8085f3c:	610b      	str	r3, [r1, #16]
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 8085f3e:	6148      	str	r0, [r1, #20]
 8085f40:	4770      	bx	lr
 8085f42:	bf00      	nop
 8085f44:	08097594 	.word	0x08097594
 8085f48:	0809759a 	.word	0x0809759a

08085f4c <_ZL13rsa_free_wrapPv>:

    return( ctx );
}

static void rsa_free_wrap( void *ctx )
{
 8085f4c:	b510      	push	{r4, lr}
 8085f4e:	4604      	mov	r4, r0
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
 8085f50:	f7fe fd86 	bl	8084a60 <mbedtls_rsa_free>
    mbedtls_free( ctx );
 8085f54:	4620      	mov	r0, r4
}
 8085f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void rsa_free_wrap( void *ctx )
{
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
    mbedtls_free( ctx );
 8085f5a:	f00b b8fd 	b.w	8091158 <free>

08085f5e <_ZL14rsa_alloc_wrapv>:
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
                                (const mbedtls_rsa_context *) prv ) );
}

static void *rsa_alloc_wrap( void )
{
 8085f5e:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_rsa_context ) );
 8085f60:	21ac      	movs	r1, #172	; 0xac
 8085f62:	2001      	movs	r0, #1
 8085f64:	f00d fed6 	bl	8093d14 <calloc>

    if( ctx != NULL )
 8085f68:	4604      	mov	r4, r0
 8085f6a:	b118      	cbz	r0, 8085f74 <_ZL14rsa_alloc_wrapv+0x16>
        mbedtls_rsa_init( (mbedtls_rsa_context *) ctx, 0, 0 );
 8085f6c:	2200      	movs	r2, #0
 8085f6e:	4611      	mov	r1, r2
 8085f70:	f7fd fd88 	bl	8083a84 <mbedtls_rsa_init>

    return( ctx );
}
 8085f74:	4620      	mov	r0, r4
 8085f76:	bd10      	pop	{r4, pc}

08085f78 <_ZL19rsa_check_pair_wrapPKvS0_>:
}

static int rsa_check_pair_wrap( const void *pub, const void *prv )
{
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
                                (const mbedtls_rsa_context *) prv ) );
 8085f78:	f7fd bdea 	b.w	8083b50 <mbedtls_rsa_check_pub_priv>

08085f7c <_ZL14rsa_get_bitlenPKv>:
    return( type == MBEDTLS_PK_RSA ||
            type == MBEDTLS_PK_RSASSA_PSS );
}

static size_t rsa_get_bitlen( const void *ctx )
{
 8085f7c:	b508      	push	{r3, lr}
    const mbedtls_rsa_context * rsa = (const mbedtls_rsa_context *) ctx;
    return( 8 * mbedtls_rsa_get_len( rsa ) );
 8085f7e:	f7fd fd8e 	bl	8083a9e <mbedtls_rsa_get_len>
}
 8085f82:	00c0      	lsls	r0, r0, #3
 8085f84:	bd08      	pop	{r3, pc}
	...

08085f88 <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_>:

static int rsa_encrypt_wrap( void *ctx,
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 8085f88:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085f8c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8085f90:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8085f94:	4604      	mov	r4, r0
 8085f96:	4688      	mov	r8, r1
 8085f98:	4617      	mov	r7, r2
 8085f9a:	4699      	mov	r9, r3
 8085f9c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8085f9e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    *olen = mbedtls_rsa_get_len( rsa );
 8085fa0:	f7fd fd7d 	bl	8083a9e <mbedtls_rsa_get_len>

    if( *olen > osize )
 8085fa4:	4550      	cmp	r0, sl
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    *olen = mbedtls_rsa_get_len( rsa );
 8085fa6:	f8cb 0000 	str.w	r0, [fp]

    if( *olen > osize )
 8085faa:	d80d      	bhi.n	8085fc8 <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x40>
        return( MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE );

    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
                                       ilen, input, output ) );
 8085fac:	4632      	mov	r2, r6
 8085fae:	4629      	mov	r1, r5
 8085fb0:	4620      	mov	r0, r4
 8085fb2:	2300      	movs	r3, #0
 8085fb4:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8085fb8:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8085fbc:	970a      	str	r7, [sp, #40]	; 0x28
}
 8085fbe:	b001      	add	sp, #4
 8085fc0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    if( *olen > osize )
        return( MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE );

    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
                                       ilen, input, output ) );
 8085fc4:	f7fe b8e0 	b.w	8084188 <mbedtls_rsa_pkcs1_encrypt>
}
 8085fc8:	4801      	ldr	r0, [pc, #4]	; (8085fd0 <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x48>)
 8085fca:	b001      	add	sp, #4
 8085fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085fd0:	ffffbc00 	.word	0xffffbc00

08085fd4 <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_>:

static int rsa_decrypt_wrap( void *ctx,
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 8085fd4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085fd8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8085fda:	4693      	mov	fp, r2
 8085fdc:	4604      	mov	r4, r0
 8085fde:	4688      	mov	r8, r1
 8085fe0:	4699      	mov	r9, r3
 8085fe2:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8085fe6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8085fe8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;

    if( ilen != mbedtls_rsa_get_len( rsa ) )
 8085fea:	f7fd fd58 	bl	8083a9e <mbedtls_rsa_get_len>
 8085fee:	4558      	cmp	r0, fp
 8085ff0:	d10f      	bne.n	8086012 <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x3e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
                MBEDTLS_RSA_PRIVATE, olen, input, output, osize ) );
 8085ff2:	4632      	mov	r2, r6
 8085ff4:	4629      	mov	r1, r5
 8085ff6:	4620      	mov	r0, r4
 8085ff8:	2301      	movs	r3, #1
 8085ffa:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8085ffe:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8086002:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8086006:	970a      	str	r7, [sp, #40]	; 0x28
}
 8086008:	b001      	add	sp, #4
 808600a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    if( ilen != mbedtls_rsa_get_len( rsa ) )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
                MBEDTLS_RSA_PRIVATE, olen, input, output, osize ) );
 808600e:	f7fe ba3d 	b.w	808448c <mbedtls_rsa_pkcs1_decrypt>
}
 8086012:	4802      	ldr	r0, [pc, #8]	; (808601c <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x48>)
 8086014:	b001      	add	sp, #4
 8086016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808601a:	bf00      	nop
 808601c:	ffffbf80 	.word	0xffffbf80

08086020 <_ZL13rsa_sign_wrapPv17mbedtls_md_type_tPKhjPhPjPFiS_S3_jES_>:

static int rsa_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 8086020:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086024:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8086028:	460f      	mov	r7, r1
 808602a:	4691      	mov	r9, r2
 808602c:	4698      	mov	r8, r3
 808602e:	4604      	mov	r4, r0
 8086030:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8086034:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8086036:	9e0d      	ldr	r6, [sp, #52]	; 0x34
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );
 8086038:	f7fd fd31 	bl	8083a9e <mbedtls_rsa_get_len>

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
                md_alg, (unsigned int) hash_len, hash, sig ) );
 808603c:	4632      	mov	r2, r6
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );
 808603e:	f8cb 0000 	str.w	r0, [fp]

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
                md_alg, (unsigned int) hash_len, hash, sig ) );
 8086042:	4629      	mov	r1, r5
 8086044:	4620      	mov	r0, r4
 8086046:	2301      	movs	r3, #1
 8086048:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 808604c:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8086050:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8086054:	970a      	str	r7, [sp, #40]	; 0x28
}
 8086056:	b001      	add	sp, #4
 8086058:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
                md_alg, (unsigned int) hash_len, hash, sig ) );
 808605c:	f7fe bb66 	b.w	808472c <mbedtls_rsa_pkcs1_sign>

08086060 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j>:
}

static int rsa_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
 8086060:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8086064:	b085      	sub	sp, #20
 8086066:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8086068:	4606      	mov	r6, r0
 808606a:	460f      	mov	r7, r1
 808606c:	4691      	mov	r9, r2
 808606e:	4698      	mov	r8, r3
    int ret;
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
 8086070:	f7fd fd15 	bl	8083a9e <mbedtls_rsa_get_len>
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
 8086074:	42a0      	cmp	r0, r4
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
    int ret;
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
 8086076:	4605      	mov	r5, r0
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
 8086078:	d810      	bhi.n	808609c <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3c>
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );

    if( ( ret = mbedtls_rsa_pkcs1_verify( rsa, NULL, NULL,
 808607a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808607c:	e88d 0380 	stmia.w	sp, {r7, r8, r9}
 8086080:	9303      	str	r3, [sp, #12]
 8086082:	2300      	movs	r3, #0
 8086084:	461a      	mov	r2, r3
 8086086:	4619      	mov	r1, r3
 8086088:	4630      	mov	r0, r6
 808608a:	f7fe fcc7 	bl	8084a1c <mbedtls_rsa_pkcs1_verify>
 808608e:	b930      	cbnz	r0, 808609e <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3e>
     * valid signature?" and not just "Does the buffer contain a valid
     * signature?". */
    if( sig_len > rsa_len )
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

    return( 0 );
 8086090:	f5a0 5064 	sub.w	r0, r0, #14592	; 0x3900
 8086094:	42a5      	cmp	r5, r4
 8086096:	bf28      	it	cs
 8086098:	2000      	movcs	r0, #0
 808609a:	e000      	b.n	808609e <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3e>
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 808609c:	4801      	ldr	r0, [pc, #4]	; (80860a4 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x44>)
     * signature?". */
    if( sig_len > rsa_len )
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

    return( 0 );
}
 808609e:	b005      	add	sp, #20
 80860a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80860a4:	ffffbc80 	.word	0xffffbc80

080860a8 <mbedtls_ssl_ciphersuite_from_id>:
    return( NULL );
}

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;
 80860a8:	4b05      	ldr	r3, [pc, #20]	; (80860c0 <mbedtls_ssl_ciphersuite_from_id+0x18>)

    while( cur->id != 0 )
 80860aa:	681a      	ldr	r2, [r3, #0]
 80860ac:	b11a      	cbz	r2, 80860b6 <mbedtls_ssl_ciphersuite_from_id+0xe>
    {
        if( cur->id == ciphersuite )
 80860ae:	4282      	cmp	r2, r0
 80860b0:	d003      	beq.n	80860ba <mbedtls_ssl_ciphersuite_from_id+0x12>
            return( cur );

        cur++;
 80860b2:	3320      	adds	r3, #32

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;

    while( cur->id != 0 )
 80860b4:	e7f9      	b.n	80860aa <mbedtls_ssl_ciphersuite_from_id+0x2>
            return( cur );

        cur++;
    }

    return( NULL );
 80860b6:	4610      	mov	r0, r2
 80860b8:	4770      	bx	lr
 80860ba:	4618      	mov	r0, r3
}
 80860bc:	4770      	bx	lr
 80860be:	bf00      	nop
 80860c0:	08097694 	.word	0x08097694

080860c4 <mbedtls_ssl_list_ciphersuites>:
                            sizeof( ciphersuite_definitions[0]  )
static int supported_ciphersuites[MAX_CIPHERSUITES];
static int supported_init = 0;

const int *mbedtls_ssl_list_ciphersuites( void )
{
 80860c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /*
     * On initial call filter out all ciphersuites not supported by current
     * build based on presence in the ciphersuite_definitions.
     */
    if( supported_init == 0 )
 80860c6:	4b0d      	ldr	r3, [pc, #52]	; (80860fc <mbedtls_ssl_list_ciphersuites+0x38>)
 80860c8:	681a      	ldr	r2, [r3, #0]
 80860ca:	461c      	mov	r4, r3
 80860cc:	b9a2      	cbnz	r2, 80860f8 <mbedtls_ssl_list_ciphersuites+0x34>
 80860ce:	490c      	ldr	r1, [pc, #48]	; (8086100 <mbedtls_ssl_list_ciphersuites+0x3c>)
 80860d0:	4e0c      	ldr	r6, [pc, #48]	; (8086104 <mbedtls_ssl_list_ciphersuites+0x40>)
    {
        const int *p;
        int *q;

        for( p = ciphersuite_preference, q = supported_ciphersuites;
             *p != 0 && q < supported_ciphersuites + MAX_CIPHERSUITES - 1;
 80860d2:	f101 0718 	add.w	r7, r1, #24
 80860d6:	f856 5f04 	ldr.w	r5, [r6, #4]!
 80860da:	b14d      	cbz	r5, 80860f0 <mbedtls_ssl_list_ciphersuites+0x2c>
 80860dc:	42b9      	cmp	r1, r7
 80860de:	d207      	bcs.n	80860f0 <mbedtls_ssl_list_ciphersuites+0x2c>
#if defined(MBEDTLS_REMOVE_ARC4_CIPHERSUITES)
            const mbedtls_ssl_ciphersuite_t *cs_info;
            if( ( cs_info = mbedtls_ssl_ciphersuite_from_id( *p ) ) != NULL &&
                cs_info->cipher != MBEDTLS_CIPHER_ARC4_128 )
#else
            if( mbedtls_ssl_ciphersuite_from_id( *p ) != NULL )
 80860e0:	4628      	mov	r0, r5
 80860e2:	f7ff ffe1 	bl	80860a8 <mbedtls_ssl_ciphersuite_from_id>
 80860e6:	2800      	cmp	r0, #0
 80860e8:	d0f5      	beq.n	80860d6 <mbedtls_ssl_list_ciphersuites+0x12>
#endif
                *(q++) = *p;
 80860ea:	600d      	str	r5, [r1, #0]
 80860ec:	3104      	adds	r1, #4
    if( supported_init == 0 )
    {
        const int *p;
        int *q;

        for( p = ciphersuite_preference, q = supported_ciphersuites;
 80860ee:	e7f2      	b.n	80860d6 <mbedtls_ssl_list_ciphersuites+0x12>
#else
            if( mbedtls_ssl_ciphersuite_from_id( *p ) != NULL )
#endif
                *(q++) = *p;
        }
        *q = 0;
 80860f0:	2300      	movs	r3, #0
 80860f2:	600b      	str	r3, [r1, #0]

        supported_init = 1;
 80860f4:	2301      	movs	r3, #1
 80860f6:	6023      	str	r3, [r4, #0]
    }

    return( supported_ciphersuites );
}
 80860f8:	4801      	ldr	r0, [pc, #4]	; (8086100 <mbedtls_ssl_list_ciphersuites+0x3c>)
 80860fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80860fc:	200005f8 	.word	0x200005f8
 8086100:	200005fc 	.word	0x200005fc
 8086104:	08097770 	.word	0x08097770

08086108 <_ZL14x509_parse_intPPhjPi>:
    }
}

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;
 8086108:	2300      	movs	r3, #0
        cur = cur->next;
    }
}

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
 808610a:	b530      	push	{r4, r5, lr}
    *res = 0;
 808610c:	6013      	str	r3, [r2, #0]
    for( ; n > 0; --n )
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
 808610e:	250a      	movs	r5, #10

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;

    for( ; n > 0; --n )
 8086110:	b189      	cbz	r1, 8086136 <_ZL14x509_parse_intPPhjPi+0x2e>
    {
        if( ( **p < '0') || ( **p > '9' ) )
 8086112:	6803      	ldr	r3, [r0, #0]
 8086114:	781b      	ldrb	r3, [r3, #0]
 8086116:	3b30      	subs	r3, #48	; 0x30
 8086118:	2b09      	cmp	r3, #9
 808611a:	d80e      	bhi.n	808613a <_ZL14x509_parse_intPPhjPi+0x32>
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
 808611c:	6813      	ldr	r3, [r2, #0]

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;

    for( ; n > 0; --n )
 808611e:	3901      	subs	r1, #1
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
 8086120:	436b      	muls	r3, r5
 8086122:	6013      	str	r3, [r2, #0]
        *res += ( *(*p)++ - '0' );
 8086124:	6803      	ldr	r3, [r0, #0]
 8086126:	1c5c      	adds	r4, r3, #1
 8086128:	6004      	str	r4, [r0, #0]
 808612a:	781b      	ldrb	r3, [r3, #0]
 808612c:	6814      	ldr	r4, [r2, #0]
 808612e:	3b30      	subs	r3, #48	; 0x30
 8086130:	4423      	add	r3, r4
 8086132:	6013      	str	r3, [r2, #0]

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;

    for( ; n > 0; --n )
 8086134:	e7ec      	b.n	8086110 <_ZL14x509_parse_intPPhjPi+0x8>

        *res *= 10;
        *res += ( *(*p)++ - '0' );
    }

    return( 0 );
 8086136:	4608      	mov	r0, r1
 8086138:	bd30      	pop	{r4, r5, pc}
    *res = 0;

    for( ; n > 0; --n )
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );
 808613a:	4801      	ldr	r0, [pc, #4]	; (8086140 <_ZL14x509_parse_intPPhjPi+0x38>)
        *res *= 10;
        *res += ( *(*p)++ - '0' );
    }

    return( 0 );
}
 808613c:	bd30      	pop	{r4, r5, pc}
 808613e:	bf00      	nop
 8086140:	ffffdc00 	.word	0xffffdc00

08086144 <mbedtls_x509_get_serial>:
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
 8086144:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( end - *p ) < 1 )
 8086146:	6803      	ldr	r3, [r0, #0]
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
 8086148:	4615      	mov	r5, r2
    int ret;

    if( ( end - *p ) < 1 )
 808614a:	1aca      	subs	r2, r1, r3
 808614c:	2a00      	cmp	r2, #0
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
 808614e:	4604      	mov	r4, r0
    int ret;

    if( ( end - *p ) < 1 )
 8086150:	dd17      	ble.n	8086182 <mbedtls_x509_get_serial+0x3e>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
 8086152:	781a      	ldrb	r2, [r3, #0]
 8086154:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8086158:	2a02      	cmp	r2, #2
 808615a:	d114      	bne.n	8086186 <mbedtls_x509_get_serial+0x42>
        **p !=   MBEDTLS_ASN1_INTEGER )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    serial->tag = *(*p)++;
 808615c:	1c5a      	adds	r2, r3, #1
 808615e:	6002      	str	r2, [r0, #0]
 8086160:	462a      	mov	r2, r5
 8086162:	781b      	ldrb	r3, [r3, #0]
 8086164:	f842 3b04 	str.w	r3, [r2], #4

    if( ( ret = mbedtls_asn1_get_len( p, end, &serial->len ) ) != 0 )
 8086168:	f7fd f862 	bl	8083230 <mbedtls_asn1_get_len>
 808616c:	b110      	cbz	r0, 8086174 <mbedtls_x509_get_serial+0x30>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL + ret );
 808616e:	f5a0 500a 	sub.w	r0, r0, #8832	; 0x2280
 8086172:	bd38      	pop	{r3, r4, r5, pc}

    serial->p = *p;
 8086174:	6823      	ldr	r3, [r4, #0]
 8086176:	60ab      	str	r3, [r5, #8]
    *p += serial->len;
 8086178:	6822      	ldr	r2, [r4, #0]
 808617a:	686b      	ldr	r3, [r5, #4]
 808617c:	4413      	add	r3, r2
 808617e:	6023      	str	r3, [r4, #0]

    return( 0 );
 8086180:	bd38      	pop	{r3, r4, r5, pc}
{
    int ret;

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8086182:	4802      	ldr	r0, [pc, #8]	; (808618c <mbedtls_x509_get_serial+0x48>)
 8086184:	bd38      	pop	{r3, r4, r5, pc}

    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
        **p !=   MBEDTLS_ASN1_INTEGER )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 8086186:	4802      	ldr	r0, [pc, #8]	; (8086190 <mbedtls_x509_get_serial+0x4c>)

    serial->p = *p;
    *p += serial->len;

    return( 0 );
}
 8086188:	bd38      	pop	{r3, r4, r5, pc}
 808618a:	bf00      	nop
 808618c:	ffffdd20 	.word	0xffffdd20
 8086190:	ffffdd1e 	.word	0xffffdd1e

08086194 <mbedtls_x509_get_alg>:
/*
 * Parse an algorithm identifier with (optional) paramaters
 */
int mbedtls_x509_get_alg( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *alg, mbedtls_x509_buf *params )
{
 8086194:	b508      	push	{r3, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, params ) ) != 0 )
 8086196:	f7fd f976 	bl	8083486 <mbedtls_asn1_get_alg>
 808619a:	b108      	cbz	r0, 80861a0 <mbedtls_x509_get_alg+0xc>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
 808619c:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300

    return( 0 );
}
 80861a0:	bd08      	pop	{r3, pc}
	...

080861a4 <mbedtls_x509_get_name>:
 * same set so that they are "merged" together in the functions that consume
 * this list, eg mbedtls_x509_dn_gets().
 */
int mbedtls_x509_get_name( unsigned char **p, const unsigned char *end,
                   mbedtls_x509_name *cur )
{
 80861a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80861a8:	4604      	mov	r4, r0
 80861aa:	460f      	mov	r7, r1
 80861ac:	4691      	mov	r9, r2
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 80861ae:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8086290 <mbedtls_x509_get_name+0xec>
    while( 1 )
    {
        /*
         * parse SET
         */
        if( ( ret = mbedtls_asn1_get_tag( p, end, &set_len,
 80861b2:	2331      	movs	r3, #49	; 0x31
 80861b4:	466a      	mov	r2, sp
 80861b6:	4639      	mov	r1, r7
 80861b8:	4620      	mov	r0, r4
 80861ba:	f7fd f88b 	bl	80832d4 <mbedtls_asn1_get_tag>
 80861be:	b110      	cbz	r0, 80861c6 <mbedtls_x509_get_name+0x22>
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SET ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 80861c0:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380
 80861c4:	e05a      	b.n	808627c <mbedtls_x509_get_name+0xd8>

        end_set  = *p + set_len;
 80861c6:	464d      	mov	r5, r9
 80861c8:	6826      	ldr	r6, [r4, #0]
 80861ca:	9b00      	ldr	r3, [sp, #0]
 80861cc:	441e      	add	r6, r3
    int ret;
    size_t len;
    mbedtls_x509_buf *oid;
    mbedtls_x509_buf *val;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80861ce:	2330      	movs	r3, #48	; 0x30
 80861d0:	aa01      	add	r2, sp, #4
 80861d2:	4631      	mov	r1, r6
 80861d4:	4620      	mov	r0, r4
 80861d6:	f7fd f87d 	bl	80832d4 <mbedtls_asn1_get_tag>
 80861da:	bb50      	cbnz	r0, 8086232 <mbedtls_x509_get_name+0x8e>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    if( ( end - *p ) < 1 )
 80861dc:	6823      	ldr	r3, [r4, #0]
 80861de:	1af2      	subs	r2, r6, r3
 80861e0:	2a00      	cmp	r2, #0
 80861e2:	dc01      	bgt.n	80861e8 <mbedtls_x509_get_name+0x44>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80861e4:	4827      	ldr	r0, [pc, #156]	; (8086284 <mbedtls_x509_get_name+0xe0>)
 80861e6:	e049      	b.n	808627c <mbedtls_x509_get_name+0xd8>

    oid = &cur->oid;
    oid->tag = **p;
 80861e8:	462a      	mov	r2, r5
 80861ea:	781b      	ldrb	r3, [r3, #0]

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
 80861ec:	4631      	mov	r1, r6
    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    oid = &cur->oid;
    oid->tag = **p;
 80861ee:	f842 3b04 	str.w	r3, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
 80861f2:	4620      	mov	r0, r4
 80861f4:	2306      	movs	r3, #6
 80861f6:	f7fd f86d 	bl	80832d4 <mbedtls_asn1_get_tag>
 80861fa:	b9d0      	cbnz	r0, 8086232 <mbedtls_x509_get_name+0x8e>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    oid->p = *p;
 80861fc:	6823      	ldr	r3, [r4, #0]
    *p += oid->len;
 80861fe:	6869      	ldr	r1, [r5, #4]
    oid->tag = **p;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    oid->p = *p;
 8086200:	60ab      	str	r3, [r5, #8]
    *p += oid->len;
 8086202:	6820      	ldr	r0, [r4, #0]
 8086204:	1843      	adds	r3, r0, r1

    if( ( end - *p ) < 1 )
 8086206:	1af2      	subs	r2, r6, r3
 8086208:	2a00      	cmp	r2, #0

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    oid->p = *p;
    *p += oid->len;
 808620a:	6023      	str	r3, [r4, #0]

    if( ( end - *p ) < 1 )
 808620c:	ddea      	ble.n	80861e4 <mbedtls_x509_get_name+0x40>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
 808620e:	5c42      	ldrb	r2, [r0, r1]
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 8086210:	2a1e      	cmp	r2, #30
 8086212:	d81a      	bhi.n	808624a <mbedtls_x509_get_name+0xa6>
 8086214:	fa28 f202 	lsr.w	r2, r8, r2
 8086218:	07d2      	lsls	r2, r2, #31
 808621a:	d516      	bpl.n	808624a <mbedtls_x509_get_name+0xa6>
        **p != MBEDTLS_ASN1_BIT_STRING )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    val = &cur->val;
    val->tag = *(*p)++;
 808621c:	3301      	adds	r3, #1
 808621e:	6023      	str	r3, [r4, #0]
 8086220:	5c43      	ldrb	r3, [r0, r1]

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
 8086222:	f105 0210 	add.w	r2, r5, #16
        **p != MBEDTLS_ASN1_BIT_STRING )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    val = &cur->val;
    val->tag = *(*p)++;
 8086226:	60eb      	str	r3, [r5, #12]

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
 8086228:	4631      	mov	r1, r6
 808622a:	4620      	mov	r0, r4
 808622c:	f7fd f800 	bl	8083230 <mbedtls_asn1_get_len>
 8086230:	b118      	cbz	r0, 808623a <mbedtls_x509_get_name+0x96>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 8086232:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380

        end_set  = *p + set_len;

        while( 1 )
        {
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
 8086236:	b150      	cbz	r0, 808624e <mbedtls_x509_get_name+0xaa>
 8086238:	e020      	b.n	808627c <mbedtls_x509_get_name+0xd8>
    val->tag = *(*p)++;

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    val->p = *p;
 808623a:	6823      	ldr	r3, [r4, #0]
 808623c:	616b      	str	r3, [r5, #20]
    *p += val->len;
 808623e:	6822      	ldr	r2, [r4, #0]
 8086240:	692b      	ldr	r3, [r5, #16]
 8086242:	4413      	add	r3, r2
 8086244:	6023      	str	r3, [r4, #0]

    cur->next = NULL;
 8086246:	61a8      	str	r0, [r5, #24]
 8086248:	e001      	b.n	808624e <mbedtls_x509_get_name+0xaa>
    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
        **p != MBEDTLS_ASN1_BIT_STRING )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 808624a:	480f      	ldr	r0, [pc, #60]	; (8086288 <mbedtls_x509_get_name+0xe4>)
 808624c:	e016      	b.n	808627c <mbedtls_x509_get_name+0xd8>
        while( 1 )
        {
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
                return( ret );

            if( *p == end_set )
 808624e:	6823      	ldr	r3, [r4, #0]
 8086250:	429e      	cmp	r6, r3
 8086252:	d008      	beq.n	8086266 <mbedtls_x509_get_name+0xc2>
                break;

            /* Mark this item as being no the only one in a set */
            cur->next_merged = 1;
 8086254:	2001      	movs	r0, #1
 8086256:	7728      	strb	r0, [r5, #28]

            cur->next = (mbedtls_x509_name *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 8086258:	2120      	movs	r1, #32
 808625a:	f00d fd5b 	bl	8093d14 <calloc>
 808625e:	61a8      	str	r0, [r5, #24]

            if( cur->next == NULL )
 8086260:	b158      	cbz	r0, 808627a <mbedtls_x509_get_name+0xd6>
 8086262:	4605      	mov	r5, r0
 8086264:	e7b3      	b.n	80861ce <mbedtls_x509_get_name+0x2a>
        }

        /*
         * continue until end of SEQUENCE is reached
         */
        if( *p == end )
 8086266:	42b7      	cmp	r7, r6
 8086268:	d008      	beq.n	808627c <mbedtls_x509_get_name+0xd8>
            return( 0 );

        cur->next = (mbedtls_x509_name *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 808626a:	2120      	movs	r1, #32
 808626c:	2001      	movs	r0, #1
 808626e:	f00d fd51 	bl	8093d14 <calloc>
 8086272:	4681      	mov	r9, r0
 8086274:	61a8      	str	r0, [r5, #24]

        if( cur->next == NULL )
 8086276:	2800      	cmp	r0, #0
 8086278:	d19b      	bne.n	80861b2 <mbedtls_x509_get_name+0xe>
            cur->next_merged = 1;

            cur->next = (mbedtls_x509_name *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );

            if( cur->next == NULL )
                return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 808627a:	4804      	ldr	r0, [pc, #16]	; (808628c <mbedtls_x509_get_name+0xe8>)
        if( cur->next == NULL )
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );

        cur = cur->next;
    }
}
 808627c:	b003      	add	sp, #12
 808627e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8086282:	bf00      	nop
 8086284:	ffffdc20 	.word	0xffffdc20
 8086288:	ffffdc1e 	.word	0xffffdc1e
 808628c:	ffffd780 	.word	0xffffd780
 8086290:	50581008 	.word	0x50581008

08086294 <mbedtls_x509_get_time>:
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
 8086294:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
 8086296:	6803      	ldr	r3, [r0, #0]
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
 8086298:	4614      	mov	r4, r2
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
 808629a:	1aca      	subs	r2, r1, r3
 808629c:	2a00      	cmp	r2, #0
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
 808629e:	4605      	mov	r5, r0
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
 80862a0:	f340 80a1 	ble.w	80863e6 <mbedtls_x509_get_time+0x152>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag = **p;
 80862a4:	781a      	ldrb	r2, [r3, #0]

    if( tag == MBEDTLS_ASN1_UTC_TIME )
 80862a6:	2a17      	cmp	r2, #23
 80862a8:	d004      	beq.n	80862b4 <mbedtls_x509_get_time+0x20>
        year_len = 2;
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
 80862aa:	2a18      	cmp	r2, #24
 80862ac:	f040 809d 	bne.w	80863ea <mbedtls_x509_get_time+0x156>
        year_len = 4;
 80862b0:	2704      	movs	r7, #4
 80862b2:	e000      	b.n	80862b6 <mbedtls_x509_get_time+0x22>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag = **p;

    if( tag == MBEDTLS_ASN1_UTC_TIME )
        year_len = 2;
 80862b4:	2702      	movs	r7, #2
        year_len = 4;
    else
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 80862b6:	3301      	adds	r3, #1
 80862b8:	602b      	str	r3, [r5, #0]
    ret = mbedtls_asn1_get_len( p, end, &len );
 80862ba:	aa01      	add	r2, sp, #4
 80862bc:	4628      	mov	r0, r5
 80862be:	f7fc ffb7 	bl	8083230 <mbedtls_asn1_get_len>

    if( ret != 0 )
 80862c2:	b110      	cbz	r0, 80862ca <mbedtls_x509_get_time+0x36>
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
 80862c4:	f5a0 5010 	sub.w	r0, r0, #9216	; 0x2400
 80862c8:	e092      	b.n	80863f0 <mbedtls_x509_get_time+0x15c>

    return x509_parse_time( p, len, year_len, tm );
 80862ca:	9e01      	ldr	r6, [sp, #4]
    int ret;

    /*
     * Minimum length is 10 or 12 depending on yearlen
     */
    if ( len < yearlen + 8 )
 80862cc:	f107 0308 	add.w	r3, r7, #8
 80862d0:	429e      	cmp	r6, r3
 80862d2:	f0c0 808c 	bcc.w	80863ee <mbedtls_x509_get_time+0x15a>
    len -= yearlen + 8;

    /*
     * Parse year, month, day, hour, minute
     */
    CHECK( x509_parse_int( p, yearlen, &tm->year ) );
 80862d6:	4622      	mov	r2, r4
 80862d8:	4639      	mov	r1, r7
 80862da:	4628      	mov	r0, r5
 80862dc:	f7ff ff14 	bl	8086108 <_ZL14x509_parse_intPPhjPi>
 80862e0:	2800      	cmp	r0, #0
 80862e2:	f040 8085 	bne.w	80863f0 <mbedtls_x509_get_time+0x15c>
    if ( 2 == yearlen )
 80862e6:	2f02      	cmp	r7, #2
 80862e8:	d108      	bne.n	80862fc <mbedtls_x509_get_time+0x68>
    {
        if ( tm->year < 50 )
 80862ea:	6823      	ldr	r3, [r4, #0]
 80862ec:	2b31      	cmp	r3, #49	; 0x31
            tm->year += 100;
 80862ee:	bfdc      	itt	le
 80862f0:	3364      	addle	r3, #100	; 0x64
 80862f2:	6023      	strle	r3, [r4, #0]

        tm->year += 1900;
 80862f4:	6823      	ldr	r3, [r4, #0]
 80862f6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80862fa:	6023      	str	r3, [r4, #0]
    }

    CHECK( x509_parse_int( p, 2, &tm->mon ) );
 80862fc:	1d22      	adds	r2, r4, #4
 80862fe:	2102      	movs	r1, #2
 8086300:	4628      	mov	r0, r5
 8086302:	f7ff ff01 	bl	8086108 <_ZL14x509_parse_intPPhjPi>
 8086306:	2800      	cmp	r0, #0
 8086308:	d172      	bne.n	80863f0 <mbedtls_x509_get_time+0x15c>
    CHECK( x509_parse_int( p, 2, &tm->day ) );
 808630a:	f104 0208 	add.w	r2, r4, #8
 808630e:	2102      	movs	r1, #2
 8086310:	4628      	mov	r0, r5
 8086312:	f7ff fef9 	bl	8086108 <_ZL14x509_parse_intPPhjPi>
 8086316:	2800      	cmp	r0, #0
 8086318:	d16a      	bne.n	80863f0 <mbedtls_x509_get_time+0x15c>
    CHECK( x509_parse_int( p, 2, &tm->hour ) );
 808631a:	f104 020c 	add.w	r2, r4, #12
 808631e:	2102      	movs	r1, #2
 8086320:	4628      	mov	r0, r5
 8086322:	f7ff fef1 	bl	8086108 <_ZL14x509_parse_intPPhjPi>
 8086326:	2800      	cmp	r0, #0
 8086328:	d162      	bne.n	80863f0 <mbedtls_x509_get_time+0x15c>
    CHECK( x509_parse_int( p, 2, &tm->min ) );
 808632a:	f104 0210 	add.w	r2, r4, #16
 808632e:	2102      	movs	r1, #2
 8086330:	4628      	mov	r0, r5
 8086332:	f7ff fee9 	bl	8086108 <_ZL14x509_parse_intPPhjPi>
 8086336:	2800      	cmp	r0, #0
 8086338:	d15a      	bne.n	80863f0 <mbedtls_x509_get_time+0x15c>
    /*
     * Minimum length is 10 or 12 depending on yearlen
     */
    if ( len < yearlen + 8 )
        return ( MBEDTLS_ERR_X509_INVALID_DATE );
    len -= yearlen + 8;
 808633a:	1bf6      	subs	r6, r6, r7
    CHECK( x509_parse_int( p, 2, &tm->min ) );

    /*
     * Parse seconds if present
     */
    if ( len >= 2 )
 808633c:	f1a6 0308 	sub.w	r3, r6, #8
 8086340:	2b01      	cmp	r3, #1
 8086342:	d954      	bls.n	80863ee <mbedtls_x509_get_time+0x15a>
    {
        CHECK( x509_parse_int( p, 2, &tm->sec ) );
 8086344:	f104 0214 	add.w	r2, r4, #20
 8086348:	2102      	movs	r1, #2
 808634a:	4628      	mov	r0, r5
 808634c:	f7ff fedc 	bl	8086108 <_ZL14x509_parse_intPPhjPi>
 8086350:	2800      	cmp	r0, #0
 8086352:	d14d      	bne.n	80863f0 <mbedtls_x509_get_time+0x15c>
        len -= 2;
 8086354:	f1a6 030a 	sub.w	r3, r6, #10
        return ( MBEDTLS_ERR_X509_INVALID_DATE );

    /*
     * Parse trailing 'Z' if present
     */
    if ( 1 == len && 'Z' == **p )
 8086358:	2b01      	cmp	r3, #1
 808635a:	d107      	bne.n	808636c <mbedtls_x509_get_time+0xd8>
 808635c:	682b      	ldr	r3, [r5, #0]
 808635e:	781a      	ldrb	r2, [r3, #0]
 8086360:	2a5a      	cmp	r2, #90	; 0x5a
 8086362:	d144      	bne.n	80863ee <mbedtls_x509_get_time+0x15a>
    {
        (*p)++;
 8086364:	3301      	adds	r3, #1
 8086366:	602b      	str	r3, [r5, #0]
        len--;
 8086368:	f1a6 030b 	sub.w	r3, r6, #11
    }

    /*
     * We should have parsed all characters at this point
     */
    if ( 0 != len )
 808636c:	2b00      	cmp	r3, #0
 808636e:	d13e      	bne.n	80863ee <mbedtls_x509_get_time+0x15a>
static int x509_date_is_valid(const mbedtls_x509_time *t )
{
    int ret = MBEDTLS_ERR_X509_INVALID_DATE;
    int month_len;

    CHECK_RANGE( 0, 9999, t->year );
 8086370:	f242 720f 	movw	r2, #9999	; 0x270f
 8086374:	6823      	ldr	r3, [r4, #0]
 8086376:	4293      	cmp	r3, r2
 8086378:	d839      	bhi.n	80863ee <mbedtls_x509_get_time+0x15a>
    CHECK_RANGE( 0, 23,   t->hour );
 808637a:	68e2      	ldr	r2, [r4, #12]
 808637c:	2a17      	cmp	r2, #23
 808637e:	d836      	bhi.n	80863ee <mbedtls_x509_get_time+0x15a>
    CHECK_RANGE( 0, 59,   t->min  );
 8086380:	6922      	ldr	r2, [r4, #16]
 8086382:	2a3b      	cmp	r2, #59	; 0x3b
 8086384:	d833      	bhi.n	80863ee <mbedtls_x509_get_time+0x15a>
    CHECK_RANGE( 0, 59,   t->sec  );
 8086386:	6962      	ldr	r2, [r4, #20]
 8086388:	2a3b      	cmp	r2, #59	; 0x3b
 808638a:	d830      	bhi.n	80863ee <mbedtls_x509_get_time+0x15a>
 808638c:	6861      	ldr	r1, [r4, #4]
 808638e:	290c      	cmp	r1, #12
 8086390:	d82d      	bhi.n	80863ee <mbedtls_x509_get_time+0x15a>
 8086392:	2201      	movs	r2, #1
 8086394:	408a      	lsls	r2, r1
 8086396:	f241 51aa 	movw	r1, #5546	; 0x15aa
 808639a:	4011      	ands	r1, r2
 808639c:	b9b9      	cbnz	r1, 80863ce <mbedtls_x509_get_time+0x13a>
 808639e:	f412 6f25 	tst.w	r2, #2640	; 0xa50
 80863a2:	d116      	bne.n	80863d2 <mbedtls_x509_get_time+0x13e>
 80863a4:	0751      	lsls	r1, r2, #29
 80863a6:	d522      	bpl.n	80863ee <mbedtls_x509_get_time+0x15a>
            break;
        case 4: case 6: case 9: case 11:
            month_len = 30;
            break;
        case 2:
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
 80863a8:	079a      	lsls	r2, r3, #30
 80863aa:	d105      	bne.n	80863b8 <mbedtls_x509_get_time+0x124>
 80863ac:	2164      	movs	r1, #100	; 0x64
 80863ae:	fb93 f2f1 	sdiv	r2, r3, r1
 80863b2:	fb01 3212 	mls	r2, r1, r2, r3
 80863b6:	b972      	cbnz	r2, 80863d6 <mbedtls_x509_get_time+0x142>
 80863b8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80863bc:	fb93 f2f1 	sdiv	r2, r3, r1
 80863c0:	fb01 3312 	mls	r3, r1, r2, r3
                !( t->year % 400 ) )
                month_len = 29;
            else
                month_len = 28;
 80863c4:	2b00      	cmp	r3, #0
 80863c6:	bf0c      	ite	eq
 80863c8:	231d      	moveq	r3, #29
 80863ca:	231c      	movne	r3, #28
 80863cc:	e004      	b.n	80863d8 <mbedtls_x509_get_time+0x144>
    CHECK_RANGE( 0, 59,   t->sec  );

    switch( t->mon )
    {
        case 1: case 3: case 5: case 7: case 8: case 10: case 12:
            month_len = 31;
 80863ce:	231f      	movs	r3, #31
 80863d0:	e002      	b.n	80863d8 <mbedtls_x509_get_time+0x144>
            break;
        case 4: case 6: case 9: case 11:
            month_len = 30;
 80863d2:	231e      	movs	r3, #30
 80863d4:	e000      	b.n	80863d8 <mbedtls_x509_get_time+0x144>
            break;
        case 2:
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
                !( t->year % 400 ) )
                month_len = 29;
 80863d6:	231d      	movs	r3, #29
                month_len = 28;
            break;
        default:
            return( ret );
    }
    CHECK_RANGE( 1, month_len, t->day );
 80863d8:	68a2      	ldr	r2, [r4, #8]
 80863da:	2a00      	cmp	r2, #0
 80863dc:	dd07      	ble.n	80863ee <mbedtls_x509_get_time+0x15a>
 80863de:	429a      	cmp	r2, r3
 80863e0:	dc05      	bgt.n	80863ee <mbedtls_x509_get_time+0x15a>
    if ( 0 != len )
        return ( MBEDTLS_ERR_X509_INVALID_DATE );

    CHECK( x509_date_is_valid( tm ) );

    return ( 0 );
 80863e2:	2000      	movs	r0, #0
 80863e4:	e004      	b.n	80863f0 <mbedtls_x509_get_time+0x15c>
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80863e6:	4803      	ldr	r0, [pc, #12]	; (80863f4 <mbedtls_x509_get_time+0x160>)
 80863e8:	e002      	b.n	80863f0 <mbedtls_x509_get_time+0x15c>
        year_len = 2;
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
        year_len = 4;
    else
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 80863ea:	4803      	ldr	r0, [pc, #12]	; (80863f8 <mbedtls_x509_get_time+0x164>)
 80863ec:	e000      	b.n	80863f0 <mbedtls_x509_get_time+0x15c>

        tm->year += 1900;
    }

    CHECK( x509_parse_int( p, 2, &tm->mon ) );
    CHECK( x509_parse_int( p, 2, &tm->day ) );
 80863ee:	4803      	ldr	r0, [pc, #12]	; (80863fc <mbedtls_x509_get_time+0x168>)

    if( ret != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );

    return x509_parse_time( p, len, year_len, tm );
}
 80863f0:	b003      	add	sp, #12
 80863f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80863f4:	ffffdba0 	.word	0xffffdba0
 80863f8:	ffffdb9e 	.word	0xffffdb9e
 80863fc:	ffffdc00 	.word	0xffffdc00

08086400 <mbedtls_x509_get_sig>:

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
 8086400:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
 8086402:	6803      	ldr	r3, [r0, #0]

    return x509_parse_time( p, len, year_len, tm );
}

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
 8086404:	4615      	mov	r5, r2
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
 8086406:	1aca      	subs	r2, r1, r3
 8086408:	2a00      	cmp	r2, #0

    return x509_parse_time( p, len, year_len, tm );
}

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
 808640a:	4604      	mov	r4, r0
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
 808640c:	dd10      	ble.n	8086430 <mbedtls_x509_get_sig+0x30>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag_type = **p;

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 808640e:	aa01      	add	r2, sp, #4

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag_type = **p;
 8086410:	781e      	ldrb	r6, [r3, #0]

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 8086412:	f7fc ffe8 	bl	80833e6 <mbedtls_asn1_get_bitstring_null>
 8086416:	b110      	cbz	r0, 808641e <mbedtls_x509_get_sig+0x1e>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );
 8086418:	f5a0 5012 	sub.w	r0, r0, #9344	; 0x2480
 808641c:	e009      	b.n	8086432 <mbedtls_x509_get_sig+0x32>

    sig->tag = tag_type;
    sig->len = len;
 808641e:	9b01      	ldr	r3, [sp, #4]
    tag_type = **p;

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );

    sig->tag = tag_type;
 8086420:	602e      	str	r6, [r5, #0]
    sig->len = len;
 8086422:	606b      	str	r3, [r5, #4]
    sig->p = *p;
 8086424:	6822      	ldr	r2, [r4, #0]
 8086426:	60aa      	str	r2, [r5, #8]

    *p += len;
 8086428:	6822      	ldr	r2, [r4, #0]
 808642a:	4413      	add	r3, r2
 808642c:	6023      	str	r3, [r4, #0]

    return( 0 );
 808642e:	e000      	b.n	8086432 <mbedtls_x509_get_sig+0x32>
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8086430:	4801      	ldr	r0, [pc, #4]	; (8086438 <mbedtls_x509_get_sig+0x38>)
    sig->p = *p;

    *p += len;

    return( 0 );
}
 8086432:	b002      	add	sp, #8
 8086434:	bd70      	pop	{r4, r5, r6, pc}
 8086436:	bf00      	nop
 8086438:	ffffdb20 	.word	0xffffdb20

0808643c <mbedtls_x509_get_sig_alg>:
 * Get signature algorithm from alg OID and optional parameters
 */
int mbedtls_x509_get_sig_alg( const mbedtls_x509_buf *sig_oid, const mbedtls_x509_buf *sig_params,
                      mbedtls_md_type_t *md_alg, mbedtls_pk_type_t *pk_alg,
                      void **sig_opts )
{
 808643c:	b510      	push	{r4, lr}
 808643e:	460c      	mov	r4, r1
 8086440:	4611      	mov	r1, r2
    int ret;

    if( *sig_opts != NULL )
 8086442:	9a02      	ldr	r2, [sp, #8]
 8086444:	6812      	ldr	r2, [r2, #0]
 8086446:	b982      	cbnz	r2, 808646a <mbedtls_x509_get_sig_alg+0x2e>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    if( ( ret = mbedtls_oid_get_sig_alg( sig_oid, md_alg, pk_alg ) ) != 0 )
 8086448:	461a      	mov	r2, r3
 808644a:	f7fe fbb1 	bl	8084bb0 <mbedtls_oid_get_sig_alg>
 808644e:	b110      	cbz	r0, 8086456 <mbedtls_x509_get_sig_alg+0x1a>
        return( MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG + ret );
 8086450:	f5a0 5018 	sub.w	r0, r0, #9728	; 0x2600
 8086454:	bd10      	pop	{r4, pc}
    }
    else
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */
    {
        /* Make sure parameters are absent or NULL */
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
 8086456:	6823      	ldr	r3, [r4, #0]
 8086458:	2b05      	cmp	r3, #5
 808645a:	d000      	beq.n	808645e <mbedtls_x509_get_sig_alg+0x22>
 808645c:	b93b      	cbnz	r3, 808646e <mbedtls_x509_get_sig_alg+0x32>
 808645e:	6863      	ldr	r3, [r4, #4]
              sig_params->len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG );
    }

    return( 0 );
 8086460:	4804      	ldr	r0, [pc, #16]	; (8086474 <mbedtls_x509_get_sig_alg+0x38>)
 8086462:	2b00      	cmp	r3, #0
 8086464:	bf08      	it	eq
 8086466:	2000      	moveq	r0, #0
 8086468:	bd10      	pop	{r4, pc}
                      void **sig_opts )
{
    int ret;

    if( *sig_opts != NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 808646a:	4803      	ldr	r0, [pc, #12]	; (8086478 <mbedtls_x509_get_sig_alg+0x3c>)
 808646c:	bd10      	pop	{r4, pc}
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */
    {
        /* Make sure parameters are absent or NULL */
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
              sig_params->len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG );
 808646e:	4801      	ldr	r0, [pc, #4]	; (8086474 <mbedtls_x509_get_sig_alg+0x38>)
    }

    return( 0 );
}
 8086470:	bd10      	pop	{r4, pc}
 8086472:	bf00      	nop
 8086474:	ffffdd00 	.word	0xffffdd00
 8086478:	ffffd800 	.word	0xffffd800

0808647c <mbedtls_x509_get_ext>:
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *ext, int tag )
{
 808647c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 808647e:	4616      	mov	r6, r2
    int ret;
    size_t len;

    if( *p == end )
 8086480:	6802      	ldr	r2, [r0, #0]
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *ext, int tag )
{
 8086482:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( *p == end )
 8086484:	428a      	cmp	r2, r1
 8086486:	d01c      	beq.n	80864c2 <mbedtls_x509_get_ext+0x46>
        return( 0 );

    ext->tag = **p;
 8086488:	7815      	ldrb	r5, [r2, #0]
 808648a:	4632      	mov	r2, r6

    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 808648c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    size_t len;

    if( *p == end )
        return( 0 );

    ext->tag = **p;
 8086490:	f842 5b04 	str.w	r5, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 8086494:	f7fc ff1e 	bl	80832d4 <mbedtls_asn1_get_tag>
 8086498:	b9b0      	cbnz	r0, 80864c8 <mbedtls_x509_get_ext+0x4c>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag ) ) != 0 )
        return( ret );

    ext->p = *p;
 808649a:	6823      	ldr	r3, [r4, #0]
     * Extension  ::=  SEQUENCE  {
     *      extnID      OBJECT IDENTIFIER,
     *      critical    BOOLEAN DEFAULT FALSE,
     *      extnValue   OCTET STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 808649c:	aa01      	add	r2, sp, #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag ) ) != 0 )
        return( ret );

    ext->p = *p;
 808649e:	60b3      	str	r3, [r6, #8]
    end = *p + ext->len;
 80864a0:	6825      	ldr	r5, [r4, #0]
 80864a2:	6873      	ldr	r3, [r6, #4]
     * Extension  ::=  SEQUENCE  {
     *      extnID      OBJECT IDENTIFIER,
     *      critical    BOOLEAN DEFAULT FALSE,
     *      extnValue   OCTET STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80864a4:	4620      	mov	r0, r4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag ) ) != 0 )
        return( ret );

    ext->p = *p;
    end = *p + ext->len;
 80864a6:	441d      	add	r5, r3
     * Extension  ::=  SEQUENCE  {
     *      extnID      OBJECT IDENTIFIER,
     *      critical    BOOLEAN DEFAULT FALSE,
     *      extnValue   OCTET STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80864a8:	4629      	mov	r1, r5
 80864aa:	2330      	movs	r3, #48	; 0x30
 80864ac:	f7fc ff12 	bl	80832d4 <mbedtls_asn1_get_tag>
 80864b0:	b110      	cbz	r0, 80864b8 <mbedtls_x509_get_ext+0x3c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 80864b2:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
 80864b6:	e007      	b.n	80864c8 <mbedtls_x509_get_ext+0x4c>

    if( end != *p + len )
 80864b8:	6822      	ldr	r2, [r4, #0]
 80864ba:	9b01      	ldr	r3, [sp, #4]
 80864bc:	4413      	add	r3, r2
 80864be:	429d      	cmp	r5, r3
 80864c0:	d101      	bne.n	80864c6 <mbedtls_x509_get_ext+0x4a>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 80864c2:	2000      	movs	r0, #0
 80864c4:	e000      	b.n	80864c8 <mbedtls_x509_get_ext+0x4c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( end != *p + len )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80864c6:	4801      	ldr	r0, [pc, #4]	; (80864cc <mbedtls_x509_get_ext+0x50>)

    return( 0 );
}
 80864c8:	b002      	add	sp, #8
 80864ca:	bd70      	pop	{r4, r5, r6, pc}
 80864cc:	ffffda9a 	.word	0xffffda9a

080864d0 <mbedtls_x509_dn_gets>:
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
 80864d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80864d4:	460f      	mov	r7, r1
 80864d6:	4691      	mov	r9, r2

    memset( s, 0, sizeof( s ) );

    name = dn;
    p = buf;
    n = size;
 80864d8:	463d      	mov	r5, r7
    const char *short_name = NULL;
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );

    name = dn;
 80864da:	464e      	mov	r6, r9
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
 80864dc:	b0c2      	sub	sp, #264	; 0x108
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
 80864de:	f04f 0a00 	mov.w	sl, #0
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
 80864e2:	f10d 0808 	add.w	r8, sp, #8
 80864e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80864ea:	4651      	mov	r1, sl
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
 80864ec:	4604      	mov	r4, r0
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
 80864ee:	4640      	mov	r0, r8
{
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
 80864f0:	f8cd a004 	str.w	sl, [sp, #4]
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
 80864f4:	f00d fd5b 	bl	8093fae <memset>
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
 80864f8:	4652      	mov	r2, sl
            if( i >= sizeof( s ) - 1 )
                break;

            c = name->val.p[i];
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
                 s[i] = '?';
 80864fa:	f04f 0a3f 	mov.w	sl, #63	; 0x3f

    name = dn;
    p = buf;
    n = size;

    while( name != NULL )
 80864fe:	2e00      	cmp	r6, #0
 8086500:	d057      	beq.n	80865b2 <mbedtls_x509_dn_gets+0xe2>
    {
        if( !name->oid.p )
 8086502:	68b3      	ldr	r3, [r6, #8]
 8086504:	2b00      	cmp	r3, #0
 8086506:	d052      	beq.n	80865ae <mbedtls_x509_dn_gets+0xde>
        {
            name = name->next;
            continue;
        }

        if( name != dn )
 8086508:	454e      	cmp	r6, r9
 808650a:	d011      	beq.n	8086530 <mbedtls_x509_dn_gets+0x60>
        {
            ret = mbedtls_snprintf( p, n, merge ? " + " : ", " );
 808650c:	4b2b      	ldr	r3, [pc, #172]	; (80865bc <mbedtls_x509_dn_gets+0xec>)
 808650e:	492c      	ldr	r1, [pc, #176]	; (80865c0 <mbedtls_x509_dn_gets+0xf0>)
 8086510:	4620      	mov	r0, r4
 8086512:	2a00      	cmp	r2, #0
 8086514:	bf14      	ite	ne
 8086516:	460a      	movne	r2, r1
 8086518:	461a      	moveq	r2, r3
 808651a:	4629      	mov	r1, r5
 808651c:	f00a fe3c 	bl	8091198 <snprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
 8086520:	2800      	cmp	r0, #0
 8086522:	da01      	bge.n	8086528 <mbedtls_x509_dn_gets+0x58>
 8086524:	4827      	ldr	r0, [pc, #156]	; (80865c4 <mbedtls_x509_dn_gets+0xf4>)
 8086526:	e045      	b.n	80865b4 <mbedtls_x509_dn_gets+0xe4>
 8086528:	4285      	cmp	r5, r0
 808652a:	d9fb      	bls.n	8086524 <mbedtls_x509_dn_gets+0x54>
 808652c:	1a2d      	subs	r5, r5, r0
 808652e:	4404      	add	r4, r0
        }

        ret = mbedtls_oid_get_attr_short_name( &name->oid, &short_name );
 8086530:	a901      	add	r1, sp, #4
 8086532:	4630      	mov	r0, r6
 8086534:	f7fe fae2 	bl	8084afc <mbedtls_oid_get_attr_short_name>

        if( ret == 0 )
 8086538:	b930      	cbnz	r0, 8086548 <mbedtls_x509_dn_gets+0x78>
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
 808653a:	9b01      	ldr	r3, [sp, #4]
 808653c:	4a22      	ldr	r2, [pc, #136]	; (80865c8 <mbedtls_x509_dn_gets+0xf8>)
 808653e:	4629      	mov	r1, r5
 8086540:	4620      	mov	r0, r4
 8086542:	f00a fe29 	bl	8091198 <snprintf>
 8086546:	e004      	b.n	8086552 <mbedtls_x509_dn_gets+0x82>
        else
            ret = mbedtls_snprintf( p, n, "\?\?=" );
 8086548:	4a20      	ldr	r2, [pc, #128]	; (80865cc <mbedtls_x509_dn_gets+0xfc>)
 808654a:	4629      	mov	r1, r5
 808654c:	4620      	mov	r0, r4
 808654e:	f00a fe23 	bl	8091198 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8086552:	2800      	cmp	r0, #0
 8086554:	dbe6      	blt.n	8086524 <mbedtls_x509_dn_gets+0x54>
 8086556:	4285      	cmp	r5, r0
 8086558:	d9e4      	bls.n	8086524 <mbedtls_x509_dn_gets+0x54>
 808655a:	1a2d      	subs	r5, r5, r0
 808655c:	4404      	add	r4, r0

        for( i = 0; i < name->val.len; i++ )
 808655e:	2300      	movs	r3, #0
 8086560:	6932      	ldr	r2, [r6, #16]
 8086562:	4293      	cmp	r3, r2
 8086564:	d213      	bcs.n	808658e <mbedtls_x509_dn_gets+0xbe>
        {
            if( i >= sizeof( s ) - 1 )
 8086566:	2bff      	cmp	r3, #255	; 0xff
 8086568:	d011      	beq.n	808658e <mbedtls_x509_dn_gets+0xbe>
                break;

            c = name->val.p[i];
 808656a:	6972      	ldr	r2, [r6, #20]
 808656c:	5cd2      	ldrb	r2, [r2, r3]
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
 808656e:	2a1f      	cmp	r2, #31
 8086570:	d906      	bls.n	8086580 <mbedtls_x509_dn_gets+0xb0>
 8086572:	2a7f      	cmp	r2, #127	; 0x7f
 8086574:	d004      	beq.n	8086580 <mbedtls_x509_dn_gets+0xb0>
 8086576:	f102 017f 	add.w	r1, r2, #127	; 0x7f
 808657a:	b2c9      	uxtb	r1, r1
 808657c:	291e      	cmp	r1, #30
 808657e:	d802      	bhi.n	8086586 <mbedtls_x509_dn_gets+0xb6>
                 s[i] = '?';
 8086580:	f808 a003 	strb.w	sl, [r8, r3]
 8086584:	e001      	b.n	808658a <mbedtls_x509_dn_gets+0xba>
            else s[i] = c;
 8086586:	f808 2003 	strb.w	r2, [r8, r3]
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
        else
            ret = mbedtls_snprintf( p, n, "\?\?=" );
        MBEDTLS_X509_SAFE_SNPRINTF;

        for( i = 0; i < name->val.len; i++ )
 808658a:	3301      	adds	r3, #1
 808658c:	e7e8      	b.n	8086560 <mbedtls_x509_dn_gets+0x90>
            c = name->val.p[i];
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
                 s[i] = '?';
            else s[i] = c;
        }
        s[i] = '\0';
 808658e:	2200      	movs	r2, #0
 8086590:	f808 2003 	strb.w	r2, [r8, r3]
        ret = mbedtls_snprintf( p, n, "%s", s );
 8086594:	4629      	mov	r1, r5
 8086596:	4643      	mov	r3, r8
 8086598:	4a0d      	ldr	r2, [pc, #52]	; (80865d0 <mbedtls_x509_dn_gets+0x100>)
 808659a:	4620      	mov	r0, r4
 808659c:	f00a fdfc 	bl	8091198 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80865a0:	2800      	cmp	r0, #0
 80865a2:	dbbf      	blt.n	8086524 <mbedtls_x509_dn_gets+0x54>
 80865a4:	4285      	cmp	r5, r0
 80865a6:	d9bd      	bls.n	8086524 <mbedtls_x509_dn_gets+0x54>

        merge = name->next_merged;
 80865a8:	7f32      	ldrb	r2, [r6, #28]
                 s[i] = '?';
            else s[i] = c;
        }
        s[i] = '\0';
        ret = mbedtls_snprintf( p, n, "%s", s );
        MBEDTLS_X509_SAFE_SNPRINTF;
 80865aa:	1a2d      	subs	r5, r5, r0
 80865ac:	4404      	add	r4, r0

        merge = name->next_merged;
        name = name->next;
 80865ae:	69b6      	ldr	r6, [r6, #24]
 80865b0:	e7a5      	b.n	80864fe <mbedtls_x509_dn_gets+0x2e>
    }

    return( (int) ( size - n ) );
 80865b2:	1b78      	subs	r0, r7, r5
}
 80865b4:	b042      	add	sp, #264	; 0x108
 80865b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80865ba:	bf00      	nop
 80865bc:	08097a04 	.word	0x08097a04
 80865c0:	08097a00 	.word	0x08097a00
 80865c4:	ffffd680 	.word	0xffffd680
 80865c8:	08097a07 	.word	0x08097a07
 80865cc:	08097a0b 	.word	0x08097a0b
 80865d0:	08097d96 	.word	0x08097d96

080865d4 <mbedtls_x509_serial_gets>:
/*
 * Store the serial in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_serial_gets( char *buf, size_t size, const mbedtls_x509_buf *serial )
{
 80865d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80865d8:	4680      	mov	r8, r0
 80865da:	460f      	mov	r7, r1
 80865dc:	4691      	mov	r9, r2
    int ret;
    size_t i, n, nr;
    char *p;

    p = buf;
    n = size;
 80865de:	460c      	mov	r4, r1

    nr = ( serial->len <= 32 )
 80865e0:	6856      	ldr	r6, [r2, #4]
    for( i = 0; i < nr; i++ )
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
 80865e2:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8086660 <mbedtls_x509_serial_gets+0x8c>

    p = buf;
    n = size;

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;
 80865e6:	2e21      	cmp	r6, #33	; 0x21
    for( i = 0; i < nr; i++ )
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
 80865e8:	f8df b078 	ldr.w	fp, [pc, #120]	; 8086664 <mbedtls_x509_serial_gets+0x90>

    p = buf;
    n = size;

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;
 80865ec:	bf28      	it	cs
 80865ee:	261c      	movcs	r6, #28

    for( i = 0; i < nr; i++ )
 80865f0:	2500      	movs	r5, #0
 80865f2:	42b5      	cmp	r5, r6
 80865f4:	d01c      	beq.n	8086630 <mbedtls_x509_serial_gets+0x5c>
 80865f6:	f8d9 3008 	ldr.w	r3, [r9, #8]
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
 80865fa:	b91d      	cbnz	r5, 8086604 <mbedtls_x509_serial_gets+0x30>
 80865fc:	2e01      	cmp	r6, #1
 80865fe:	d001      	beq.n	8086604 <mbedtls_x509_serial_gets+0x30>
 8086600:	781a      	ldrb	r2, [r3, #0]
 8086602:	b19a      	cbz	r2, 808662c <mbedtls_x509_serial_gets+0x58>
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
 8086604:	1e72      	subs	r2, r6, #1
 8086606:	4295      	cmp	r5, r2
 8086608:	bf34      	ite	cc
 808660a:	4652      	movcc	r2, sl
 808660c:	465a      	movcs	r2, fp
 808660e:	5d5b      	ldrb	r3, [r3, r5]
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
 8086610:	4621      	mov	r1, r4
 8086612:	9200      	str	r2, [sp, #0]
 8086614:	4640      	mov	r0, r8
 8086616:	4a0f      	ldr	r2, [pc, #60]	; (8086654 <mbedtls_x509_serial_gets+0x80>)
 8086618:	f00a fdbe 	bl	8091198 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 808661c:	2800      	cmp	r0, #0
 808661e:	da01      	bge.n	8086624 <mbedtls_x509_serial_gets+0x50>
 8086620:	480d      	ldr	r0, [pc, #52]	; (8086658 <mbedtls_x509_serial_gets+0x84>)
 8086622:	e014      	b.n	808664e <mbedtls_x509_serial_gets+0x7a>
 8086624:	4284      	cmp	r4, r0
 8086626:	d9fb      	bls.n	8086620 <mbedtls_x509_serial_gets+0x4c>
 8086628:	1a24      	subs	r4, r4, r0
 808662a:	4480      	add	r8, r0
    n = size;

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;

    for( i = 0; i < nr; i++ )
 808662c:	3501      	adds	r5, #1
 808662e:	e7e0      	b.n	80865f2 <mbedtls_x509_serial_gets+0x1e>
        ret = mbedtls_snprintf( p, n, "%02X%s",
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
        MBEDTLS_X509_SAFE_SNPRINTF;
    }

    if( nr != serial->len )
 8086630:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8086634:	429d      	cmp	r5, r3
 8086636:	d009      	beq.n	808664c <mbedtls_x509_serial_gets+0x78>
    {
        ret = mbedtls_snprintf( p, n, "...." );
 8086638:	4a08      	ldr	r2, [pc, #32]	; (808665c <mbedtls_x509_serial_gets+0x88>)
 808663a:	4621      	mov	r1, r4
 808663c:	4640      	mov	r0, r8
 808663e:	f00a fdab 	bl	8091198 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8086642:	2800      	cmp	r0, #0
 8086644:	dbec      	blt.n	8086620 <mbedtls_x509_serial_gets+0x4c>
 8086646:	4284      	cmp	r4, r0
 8086648:	d9ea      	bls.n	8086620 <mbedtls_x509_serial_gets+0x4c>
 808664a:	1a24      	subs	r4, r4, r0
    }

    return( (int) ( size - n ) );
 808664c:	1b38      	subs	r0, r7, r4
}
 808664e:	b003      	add	sp, #12
 8086650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8086654:	08097a0f 	.word	0x08097a0f
 8086658:	ffffd680 	.word	0xffffd680
 808665c:	08097a16 	.word	0x08097a16
 8086660:	08099a65 	.word	0x08099a65
 8086664:	08096b58 	.word	0x08096b58

08086668 <mbedtls_x509_sig_alg_gets>:
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
 8086668:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;
 808666a:	2300      	movs	r3, #0
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
 808666c:	460c      	mov	r4, r1
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;
 808666e:	a902      	add	r1, sp, #8
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
 8086670:	4605      	mov	r5, r0
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;
 8086672:	f841 3d04 	str.w	r3, [r1, #-4]!

    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
 8086676:	4610      	mov	r0, r2
 8086678:	f7fe fa8e 	bl	8084b98 <mbedtls_oid_get_sig_alg_desc>
    if( ret != 0 )
 808667c:	b128      	cbz	r0, 808668a <mbedtls_x509_sig_alg_gets+0x22>
        ret = mbedtls_snprintf( p, n, "???"  );
 808667e:	4a0b      	ldr	r2, [pc, #44]	; (80866ac <mbedtls_x509_sig_alg_gets+0x44>)
 8086680:	4621      	mov	r1, r4
 8086682:	4628      	mov	r0, r5
 8086684:	f00a fd88 	bl	8091198 <snprintf>
 8086688:	e005      	b.n	8086696 <mbedtls_x509_sig_alg_gets+0x2e>
    else
        ret = mbedtls_snprintf( p, n, "%s", desc );
 808668a:	9b01      	ldr	r3, [sp, #4]
 808668c:	4a08      	ldr	r2, [pc, #32]	; (80866b0 <mbedtls_x509_sig_alg_gets+0x48>)
 808668e:	4621      	mov	r1, r4
 8086690:	4628      	mov	r0, r5
 8086692:	f00a fd81 	bl	8091198 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8086696:	2800      	cmp	r0, #0
 8086698:	db04      	blt.n	80866a4 <mbedtls_x509_sig_alg_gets+0x3c>
 808669a:	4b06      	ldr	r3, [pc, #24]	; (80866b4 <mbedtls_x509_sig_alg_gets+0x4c>)
 808669c:	4284      	cmp	r4, r0
 808669e:	bf98      	it	ls
 80866a0:	4618      	movls	r0, r3
 80866a2:	e000      	b.n	80866a6 <mbedtls_x509_sig_alg_gets+0x3e>
 80866a4:	4803      	ldr	r0, [pc, #12]	; (80866b4 <mbedtls_x509_sig_alg_gets+0x4c>)
    ((void) md_alg);
    ((void) sig_opts);
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */

    return( (int)( size - n ) );
}
 80866a6:	b003      	add	sp, #12
 80866a8:	bd30      	pop	{r4, r5, pc}
 80866aa:	bf00      	nop
 80866ac:	08097a1b 	.word	0x08097a1b
 80866b0:	08097d96 	.word	0x08097d96
 80866b4:	ffffd680 	.word	0xffffd680

080866b8 <mbedtls_x509_key_size_helper>:

/*
 * Helper for writing "RSA key size", "EC key size", etc
 */
int mbedtls_x509_key_size_helper( char *buf, size_t buf_size, const char *name )
{
 80866b8:	b510      	push	{r4, lr}
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
 80866ba:	4613      	mov	r3, r2
 80866bc:	4a06      	ldr	r2, [pc, #24]	; (80866d8 <mbedtls_x509_key_size_helper+0x20>)

/*
 * Helper for writing "RSA key size", "EC key size", etc
 */
int mbedtls_x509_key_size_helper( char *buf, size_t buf_size, const char *name )
{
 80866be:	460c      	mov	r4, r1
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
 80866c0:	f00a fd6a 	bl	8091198 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80866c4:	2800      	cmp	r0, #0
 80866c6:	db05      	blt.n	80866d4 <mbedtls_x509_key_size_helper+0x1c>

    return( 0 );
 80866c8:	4b04      	ldr	r3, [pc, #16]	; (80866dc <mbedtls_x509_key_size_helper+0x24>)
 80866ca:	4284      	cmp	r4, r0
 80866cc:	bf94      	ite	ls
 80866ce:	4618      	movls	r0, r3
 80866d0:	2000      	movhi	r0, #0
 80866d2:	bd10      	pop	{r4, pc}
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
    MBEDTLS_X509_SAFE_SNPRINTF;
 80866d4:	4801      	ldr	r0, [pc, #4]	; (80866dc <mbedtls_x509_key_size_helper+0x24>)

    return( 0 );
}
 80866d6:	bd10      	pop	{r4, pc}
 80866d8:	08097a1f 	.word	0x08097a1f
 80866dc:	ffffd680 	.word	0xffffd680

080866e0 <mbedtls_x509_time_is_past>:
 80866e0:	2000      	movs	r0, #0
 80866e2:	4770      	bx	lr

080866e4 <mbedtls_x509_time_is_future>:

int mbedtls_x509_time_is_future( const mbedtls_x509_time *from )
{
    ((void) from);
    return( 0 );
}
 80866e4:	2000      	movs	r0, #0
 80866e6:	4770      	bx	lr

080866e8 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>:
 * Parse a PKCS#1 encoded private RSA key
 */
static int pk_parse_key_pkcs1_der( mbedtls_rsa_context *rsa,
                                   const unsigned char *key,
                                   size_t keylen )
{
 80866e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80866ea:	460c      	mov	r4, r1
 80866ec:	4615      	mov	r5, r2
 80866ee:	b08f      	sub	sp, #60	; 0x3c
 80866f0:	4607      	mov	r7, r0
    int ret, version;
    size_t len;
    unsigned char *p, *end;

    mbedtls_mpi T;
    mbedtls_mpi_init( &T );
 80866f2:	a80b      	add	r0, sp, #44	; 0x2c
 80866f4:	f004 fb10 	bl	808ad18 <mbedtls_mpi_init>
     *      exponent2         INTEGER,  -- d mod (q-1)
     *      coefficient       INTEGER,  -- (inverse of q) mod p
     *      otherPrimeInfos   OtherPrimeInfos OPTIONAL
     *  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80866f8:	2330      	movs	r3, #48	; 0x30
 80866fa:	aa09      	add	r2, sp, #36	; 0x24
 80866fc:	1961      	adds	r1, r4, r5
 80866fe:	a80a      	add	r0, sp, #40	; 0x28
    unsigned char *p, *end;

    mbedtls_mpi T;
    mbedtls_mpi_init( &T );

    p = (unsigned char *) key;
 8086700:	940a      	str	r4, [sp, #40]	; 0x28
     *      exponent2         INTEGER,  -- d mod (q-1)
     *      coefficient       INTEGER,  -- (inverse of q) mod p
     *      otherPrimeInfos   OtherPrimeInfos OPTIONAL
     *  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8086702:	f7fc fde7 	bl	80832d4 <mbedtls_asn1_get_tag>
 8086706:	b940      	cbnz	r0, 808671a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x32>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 8086708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808670a:	9e0a      	ldr	r6, [sp, #40]	; 0x28

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 808670c:	aa08      	add	r2, sp, #32
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 808670e:	441e      	add	r6, r3

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 8086710:	4631      	mov	r1, r6
 8086712:	a80a      	add	r0, sp, #40	; 0x28
 8086714:	f7fc fe0b 	bl	808332e <mbedtls_asn1_get_int>
 8086718:	b110      	cbz	r0, 8086720 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x38>
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 808671a:	f5a0 5574 	sub.w	r5, r0, #15616	; 0x3d00
 808671e:	e0d4      	b.n	80868ca <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
    }

    if( version != 0 )
 8086720:	9d08      	ldr	r5, [sp, #32]
 8086722:	b9dd      	cbnz	r5, 808675c <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x74>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
    }

    /* Import N */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 8086724:	2302      	movs	r3, #2
 8086726:	aa09      	add	r2, sp, #36	; 0x24
 8086728:	4631      	mov	r1, r6
 808672a:	a80a      	add	r0, sp, #40	; 0x28
 808672c:	f7fc fdd2 	bl	80832d4 <mbedtls_asn1_get_tag>
 8086730:	4604      	mov	r4, r0
 8086732:	2800      	cmp	r0, #0
 8086734:	f040 80c5 	bne.w	80868c2 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 8086738:	9006      	str	r0, [sp, #24]
 808673a:	9005      	str	r0, [sp, #20]
 808673c:	9004      	str	r0, [sp, #16]
 808673e:	9003      	str	r0, [sp, #12]
 8086740:	9002      	str	r0, [sp, #8]
 8086742:	9001      	str	r0, [sp, #4]
 8086744:	9000      	str	r0, [sp, #0]
 8086746:	4603      	mov	r3, r0
 8086748:	9a09      	ldr	r2, [sp, #36]	; 0x24
 808674a:	990a      	ldr	r1, [sp, #40]	; 0x28
 808674c:	4638      	mov	r0, r7
 808674e:	f7fd f8af 	bl	80838b0 <mbedtls_rsa_import_raw>
 8086752:	4604      	mov	r4, r0
 8086754:	2800      	cmp	r0, #0
 8086756:	f040 80b4 	bne.w	80868c2 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 808675a:	e001      	b.n	8086760 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x78>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    if( version != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
 808675c:	4d5c      	ldr	r5, [pc, #368]	; (80868d0 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e8>)
 808675e:	e0b4      	b.n	80868ca <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, p, len, NULL, 0, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 8086760:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8086762:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 8086764:	4631      	mov	r1, r6
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, p, len, NULL, 0, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 8086766:	4413      	add	r3, r2
 8086768:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 808676a:	aa09      	add	r2, sp, #36	; 0x24
 808676c:	2302      	movs	r3, #2
 808676e:	a80a      	add	r0, sp, #40	; 0x28
 8086770:	f7fc fdb0 	bl	80832d4 <mbedtls_asn1_get_tag>
 8086774:	4604      	mov	r4, r0
 8086776:	2800      	cmp	r0, #0
 8086778:	f040 80a3 	bne.w	80868c2 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 808677c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808677e:	9404      	str	r4, [sp, #16]
 8086780:	9306      	str	r3, [sp, #24]
 8086782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8086784:	9403      	str	r4, [sp, #12]
 8086786:	9305      	str	r3, [sp, #20]
 8086788:	9402      	str	r4, [sp, #8]
 808678a:	9401      	str	r4, [sp, #4]
 808678c:	9400      	str	r4, [sp, #0]
 808678e:	4623      	mov	r3, r4
 8086790:	4622      	mov	r2, r4
 8086792:	4621      	mov	r1, r4
 8086794:	4638      	mov	r0, r7
 8086796:	f7fd f88b 	bl	80838b0 <mbedtls_rsa_import_raw>
 808679a:	4604      	mov	r4, r0
 808679c:	2800      	cmp	r0, #0
 808679e:	f040 8090 	bne.w	80868c2 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        NULL, 0, p, len ) ) != 0 )
        goto cleanup;
    p += len;
 80867a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80867a4:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Import D */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 80867a6:	4631      	mov	r1, r6
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        NULL, 0, p, len ) ) != 0 )
        goto cleanup;
    p += len;
 80867a8:	4413      	add	r3, r2
 80867aa:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import D */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 80867ac:	aa09      	add	r2, sp, #36	; 0x24
 80867ae:	2302      	movs	r3, #2
 80867b0:	a80a      	add	r0, sp, #40	; 0x28
 80867b2:	f7fc fd8f 	bl	80832d4 <mbedtls_asn1_get_tag>
 80867b6:	4604      	mov	r4, r0
 80867b8:	2800      	cmp	r0, #0
 80867ba:	f040 8082 	bne.w	80868c2 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 80867be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80867c0:	9406      	str	r4, [sp, #24]
 80867c2:	9304      	str	r3, [sp, #16]
 80867c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80867c6:	9405      	str	r4, [sp, #20]
 80867c8:	9303      	str	r3, [sp, #12]
 80867ca:	9402      	str	r4, [sp, #8]
 80867cc:	9401      	str	r4, [sp, #4]
 80867ce:	9400      	str	r4, [sp, #0]
 80867d0:	4623      	mov	r3, r4
 80867d2:	4622      	mov	r2, r4
 80867d4:	4621      	mov	r1, r4
 80867d6:	4638      	mov	r0, r7
 80867d8:	f7fd f86a 	bl	80838b0 <mbedtls_rsa_import_raw>
 80867dc:	4604      	mov	r4, r0
 80867de:	2800      	cmp	r0, #0
 80867e0:	d16f      	bne.n	80868c2 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        p, len, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 80867e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80867e4:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Import P */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 80867e6:	4631      	mov	r1, r6
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        p, len, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 80867e8:	4413      	add	r3, r2
 80867ea:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import P */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 80867ec:	aa09      	add	r2, sp, #36	; 0x24
 80867ee:	2302      	movs	r3, #2
 80867f0:	a80a      	add	r0, sp, #40	; 0x28
 80867f2:	f7fc fd6f 	bl	80832d4 <mbedtls_asn1_get_tag>
 80867f6:	4604      	mov	r4, r0
 80867f8:	2800      	cmp	r0, #0
 80867fa:	d162      	bne.n	80868c2 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 80867fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80867fe:	2200      	movs	r2, #0
 8086800:	9300      	str	r3, [sp, #0]
 8086802:	9206      	str	r2, [sp, #24]
 8086804:	9205      	str	r2, [sp, #20]
 8086806:	9204      	str	r2, [sp, #16]
 8086808:	9203      	str	r2, [sp, #12]
 808680a:	9202      	str	r2, [sp, #8]
 808680c:	9201      	str	r2, [sp, #4]
 808680e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8086810:	4611      	mov	r1, r2
 8086812:	4638      	mov	r0, r7
 8086814:	f7fd f84c 	bl	80838b0 <mbedtls_rsa_import_raw>
 8086818:	4604      	mov	r4, r0
 808681a:	2800      	cmp	r0, #0
 808681c:	d151      	bne.n	80868c2 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, p, len, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 808681e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8086820:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Import Q */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 8086822:	4631      	mov	r1, r6
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, p, len, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 8086824:	4413      	add	r3, r2
 8086826:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import Q */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 8086828:	aa09      	add	r2, sp, #36	; 0x24
 808682a:	2302      	movs	r3, #2
 808682c:	a80a      	add	r0, sp, #40	; 0x28
 808682e:	f7fc fd51 	bl	80832d4 <mbedtls_asn1_get_tag>
 8086832:	4604      	mov	r4, r0
 8086834:	2800      	cmp	r0, #0
 8086836:	d144      	bne.n	80868c2 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 8086838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808683a:	9406      	str	r4, [sp, #24]
 808683c:	9302      	str	r3, [sp, #8]
 808683e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8086840:	9405      	str	r4, [sp, #20]
 8086842:	9404      	str	r4, [sp, #16]
 8086844:	9403      	str	r4, [sp, #12]
 8086846:	9301      	str	r3, [sp, #4]
 8086848:	9400      	str	r4, [sp, #0]
 808684a:	4623      	mov	r3, r4
 808684c:	4622      	mov	r2, r4
 808684e:	4621      	mov	r1, r4
 8086850:	4638      	mov	r0, r7
 8086852:	f7fd f82d 	bl	80838b0 <mbedtls_rsa_import_raw>
 8086856:	4604      	mov	r4, r0
 8086858:	2800      	cmp	r0, #0
 808685a:	d132      	bne.n	80868c2 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, p, len,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 808685c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 808685e:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Complete the RSA private key */
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
 8086860:	4638      	mov	r0, r7
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, p, len,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 8086862:	4413      	add	r3, r2
 8086864:	930a      	str	r3, [sp, #40]	; 0x28

    /* Complete the RSA private key */
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
 8086866:	f7fd f861 	bl	808392c <mbedtls_rsa_complete>
 808686a:	4604      	mov	r4, r0
 808686c:	b9c8      	cbnz	r0, 80868a2 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1ba>
        goto cleanup;

    /* Check optional parameters */
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
 808686e:	aa0b      	add	r2, sp, #44	; 0x2c
 8086870:	4631      	mov	r1, r6
 8086872:	a80a      	add	r0, sp, #40	; 0x28
 8086874:	f7fc fd7f 	bl	8083376 <mbedtls_asn1_get_mpi>
 8086878:	4604      	mov	r4, r0
 808687a:	bb10      	cbnz	r0, 80868c2 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
    /* Complete the RSA private key */
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
        goto cleanup;

    /* Check optional parameters */
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
 808687c:	aa0b      	add	r2, sp, #44	; 0x2c
 808687e:	4631      	mov	r1, r6
 8086880:	a80a      	add	r0, sp, #40	; 0x28
 8086882:	f7fc fd78 	bl	8083376 <mbedtls_asn1_get_mpi>
 8086886:	4604      	mov	r4, r0
 8086888:	b9d8      	cbnz	r0, 80868c2 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
 808688a:	aa0b      	add	r2, sp, #44	; 0x2c
 808688c:	4631      	mov	r1, r6
 808688e:	a80a      	add	r0, sp, #40	; 0x28
 8086890:	f7fc fd71 	bl	8083376 <mbedtls_asn1_get_mpi>
 8086894:	4604      	mov	r4, r0
 8086896:	b9a0      	cbnz	r0, 80868c2 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        goto cleanup;

    if( p != end )
    {
        ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH ;
 8086898:	4b0e      	ldr	r3, [pc, #56]	; (80868d4 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1ec>)
 808689a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 808689c:	4296      	cmp	r6, r2
 808689e:	bf18      	it	ne
 80868a0:	461c      	movne	r4, r3
    }

cleanup:

    mbedtls_mpi_free( &T );
 80868a2:	a80b      	add	r0, sp, #44	; 0x2c
 80868a4:	f004 fa3f 	bl	808ad26 <mbedtls_mpi_free>

    if( ret != 0 )
 80868a8:	b17c      	cbz	r4, 80868ca <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
    {
        /* Wrap error code if it's coming from a lower level */
        if( ( ret & 0xff80 ) == 0 )
 80868aa:	f64f 7380 	movw	r3, #65408	; 0xff80
 80868ae:	4023      	ands	r3, r4
 80868b0:	b913      	cbnz	r3, 80868b8 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1d0>
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret;
 80868b2:	f5a4 5574 	sub.w	r5, r4, #15616	; 0x3d00
 80868b6:	e000      	b.n	80868ba <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1d2>
        else
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT;
 80868b8:	4d07      	ldr	r5, [pc, #28]	; (80868d8 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1f0>)

        mbedtls_rsa_free( rsa );
 80868ba:	4638      	mov	r0, r7
 80868bc:	f7fe f8d0 	bl	8084a60 <mbedtls_rsa_free>
 80868c0:	e003      	b.n	80868ca <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH ;
    }

cleanup:

    mbedtls_mpi_free( &T );
 80868c2:	a80b      	add	r0, sp, #44	; 0x2c
 80868c4:	f004 fa2f 	bl	808ad26 <mbedtls_mpi_free>
 80868c8:	e7ef      	b.n	80868aa <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1c2>

        mbedtls_rsa_free( rsa );
    }

    return( ret );
}
 80868ca:	4628      	mov	r0, r5
 80868cc:	b00f      	add	sp, #60	; 0x3c
 80868ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80868d0:	ffffc280 	.word	0xffffc280
 80868d4:	ffffc29a 	.word	0xffffc29a
 80868d8:	ffffc300 	.word	0xffffc300

080868dc <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>:
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */
static int pk_get_pk_alg( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_pk_type_t *pk_alg, mbedtls_asn1_buf *params )
{
 80868dc:	b530      	push	{r4, r5, lr}
 80868de:	4615      	mov	r5, r2
 80868e0:	b085      	sub	sp, #20
    int ret;
    mbedtls_asn1_buf alg_oid;

    memset( params, 0, sizeof(mbedtls_asn1_buf) );
 80868e2:	2200      	movs	r2, #0
 80868e4:	601a      	str	r2, [r3, #0]
 80868e6:	605a      	str	r2, [r3, #4]
 80868e8:	609a      	str	r2, [r3, #8]

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 80868ea:	aa01      	add	r2, sp, #4
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */
static int pk_get_pk_alg( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_pk_type_t *pk_alg, mbedtls_asn1_buf *params )
{
 80868ec:	461c      	mov	r4, r3
    int ret;
    mbedtls_asn1_buf alg_oid;

    memset( params, 0, sizeof(mbedtls_asn1_buf) );

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 80868ee:	f7fc fdca 	bl	8083486 <mbedtls_asn1_get_alg>
 80868f2:	b110      	cbz	r0, 80868fa <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x1e>
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );
 80868f4:	f5a0 506a 	sub.w	r0, r0, #14976	; 0x3a80
 80868f8:	e014      	b.n	8086924 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>

    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
 80868fa:	4629      	mov	r1, r5
 80868fc:	a801      	add	r0, sp, #4
 80868fe:	f7fe f967 	bl	8084bd0 <mbedtls_oid_get_pk_alg>
 8086902:	b960      	cbnz	r0, 808691e <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x42>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    /*
     * No parameters with RSA (only for EC)
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
 8086904:	782b      	ldrb	r3, [r5, #0]
 8086906:	2b01      	cmp	r3, #1
 8086908:	d10c      	bne.n	8086924 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 808690a:	6823      	ldr	r3, [r4, #0]
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    /*
     * No parameters with RSA (only for EC)
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
 808690c:	2b05      	cmp	r3, #5
 808690e:	d000      	beq.n	8086912 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x36>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 8086910:	b93b      	cbnz	r3, 8086922 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x46>
 8086912:	6863      	ldr	r3, [r4, #4]
                params->len != 0 ) )
    {
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 8086914:	4804      	ldr	r0, [pc, #16]	; (8086928 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x4c>)
 8086916:	2b00      	cmp	r3, #0
 8086918:	bf08      	it	eq
 808691a:	2000      	moveq	r0, #0
 808691c:	e002      	b.n	8086924 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );

    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 808691e:	4803      	ldr	r0, [pc, #12]	; (808692c <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x50>)
 8086920:	e000      	b.n	8086924 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
                params->len != 0 ) )
    {
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 8086922:	4801      	ldr	r0, [pc, #4]	; (8086928 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x4c>)
    }

    return( 0 );
}
 8086924:	b005      	add	sp, #20
 8086926:	bd30      	pop	{r4, r5, pc}
 8086928:	ffffc580 	.word	0xffffc580
 808692c:	ffffc380 	.word	0xffffc380

08086930 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>:
 */
static int pk_parse_key_pkcs8_unencrypted_der(
                                    mbedtls_pk_context *pk,
                                    const unsigned char* key,
                                    size_t keylen )
{
 8086930:	b530      	push	{r4, r5, lr}
    int ret, version;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
    unsigned char *end = p + keylen;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 8086932:	2300      	movs	r3, #0
 */
static int pk_parse_key_pkcs8_unencrypted_der(
                                    mbedtls_pk_context *pk,
                                    const unsigned char* key,
                                    size_t keylen )
{
 8086934:	b089      	sub	sp, #36	; 0x24
 8086936:	4605      	mov	r5, r0
    int ret, version;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
 8086938:	9104      	str	r1, [sp, #16]
    unsigned char *end = p + keylen;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 808693a:	f88d 3007 	strb.w	r3, [sp, #7]
     *    PrivateKey ::= OCTET STRING
     *
     *  The PrivateKey OCTET STRING is a SEC1 ECPrivateKey
     */

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 808693e:	4411      	add	r1, r2
 8086940:	2330      	movs	r3, #48	; 0x30
 8086942:	aa03      	add	r2, sp, #12
 8086944:	a804      	add	r0, sp, #16
 8086946:	f7fc fcc5 	bl	80832d4 <mbedtls_asn1_get_tag>
 808694a:	b9c8      	cbnz	r0, 8086980 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x50>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 808694c:	9b03      	ldr	r3, [sp, #12]
 808694e:	9c04      	ldr	r4, [sp, #16]

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 8086950:	aa02      	add	r2, sp, #8
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 8086952:	441c      	add	r4, r3

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 8086954:	4621      	mov	r1, r4
 8086956:	a804      	add	r0, sp, #16
 8086958:	f7fc fce9 	bl	808332e <mbedtls_asn1_get_int>
 808695c:	b980      	cbnz	r0, 8086980 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x50>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( version != 0 )
 808695e:	9b02      	ldr	r3, [sp, #8]
 8086960:	bb7b      	cbnz	r3, 80869c2 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x92>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION + ret );

    if( ( ret = pk_get_pk_alg( &p, end, &pk_alg, &params ) ) != 0 )
 8086962:	ab05      	add	r3, sp, #20
 8086964:	f10d 0207 	add.w	r2, sp, #7
 8086968:	4621      	mov	r1, r4
 808696a:	a804      	add	r0, sp, #16
 808696c:	f7ff ffb6 	bl	80868dc <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>
 8086970:	b930      	cbnz	r0, 8086980 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x50>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 8086972:	2304      	movs	r3, #4
 8086974:	aa03      	add	r2, sp, #12
 8086976:	4621      	mov	r1, r4
 8086978:	a804      	add	r0, sp, #16
 808697a:	f7fc fcab 	bl	80832d4 <mbedtls_asn1_get_tag>
 808697e:	b110      	cbz	r0, 8086986 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x56>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8086980:	f5a0 5074 	sub.w	r0, r0, #15616	; 0x3d00
 8086984:	e022      	b.n	80869cc <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>

    if( len < 1 )
 8086986:	9b03      	ldr	r3, [sp, #12]
 8086988:	b1eb      	cbz	r3, 80869c6 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x96>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 808698a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 808698e:	f005 fc35 	bl	808c1fc <mbedtls_pk_info_from_type>
 8086992:	4601      	mov	r1, r0
 8086994:	b908      	cbnz	r0, 808699a <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x6a>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 8086996:	480e      	ldr	r0, [pc, #56]	; (80869d0 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xa0>)
 8086998:	e018      	b.n	80869cc <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>

    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 808699a:	4628      	mov	r0, r5
 808699c:	f005 fc36 	bl	808c20c <mbedtls_pk_setup>
 80869a0:	b9a0      	cbnz	r0, 80869cc <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>
        return( ret );

#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA )
 80869a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80869a6:	2b01      	cmp	r3, #1
 80869a8:	d1f5      	bne.n	8086996 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x66>
    {
        if( ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), p, len ) ) != 0 )
 80869aa:	9a03      	ldr	r2, [sp, #12]
 80869ac:	9904      	ldr	r1, [sp, #16]
 80869ae:	6868      	ldr	r0, [r5, #4]
 80869b0:	f7ff fe9a 	bl	80866e8 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
 80869b4:	4604      	mov	r4, r0
 80869b6:	b140      	cbz	r0, 80869ca <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9a>
        {
            mbedtls_pk_free( pk );
 80869b8:	4628      	mov	r0, r5
 80869ba:	f005 fc0e 	bl	808c1da <mbedtls_pk_free>
            return( ret );
 80869be:	4620      	mov	r0, r4
 80869c0:	e004      	b.n	80869cc <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( version != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION + ret );
 80869c2:	4804      	ldr	r0, [pc, #16]	; (80869d4 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xa4>)
 80869c4:	e002      	b.n	80869cc <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( len < 1 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80869c6:	4804      	ldr	r0, [pc, #16]	; (80869d8 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xa8>)
 80869c8:	e000      	b.n	80869cc <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>
        }
    } else
#endif /* MBEDTLS_ECP_C */
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    return( 0 );
 80869ca:	2000      	movs	r0, #0
}
 80869cc:	b009      	add	sp, #36	; 0x24
 80869ce:	bd30      	pop	{r4, r5, pc}
 80869d0:	ffffc380 	.word	0xffffc380
 80869d4:	ffffc280 	.word	0xffffc280
 80869d8:	ffffc2a0 	.word	0xffffc2a0

080869dc <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>:
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
static int pk_parse_key_pkcs8_encrypted_der(
                                    mbedtls_pk_context *pk,
                                    unsigned char *key, size_t keylen,
                                    const unsigned char *pwd, size_t pwdlen )
{
 80869dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80869de:	b091      	sub	sp, #68	; 0x44
 80869e0:	9e16      	ldr	r6, [sp, #88]	; 0x58
#if defined(MBEDTLS_PKCS12_C)
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_md_type_t md_alg;
#endif

    p = key;
 80869e2:	9109      	str	r1, [sp, #36]	; 0x24
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
static int pk_parse_key_pkcs8_encrypted_der(
                                    mbedtls_pk_context *pk,
                                    unsigned char *key, size_t keylen,
                                    const unsigned char *pwd, size_t pwdlen )
{
 80869e4:	4605      	mov	r5, r0
 80869e6:	461f      	mov	r7, r3
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_md_type_t md_alg;
#endif

    p = key;
    end = p + keylen;
 80869e8:	4411      	add	r1, r2

    if( pwdlen == 0 )
 80869ea:	2e00      	cmp	r6, #0
 80869ec:	d066      	beq.n	8086abc <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe0>
     *  EncryptedData ::= OCTET STRING
     *
     *  The EncryptedData OCTET STRING is a PKCS#8 PrivateKeyInfo
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80869ee:	2330      	movs	r3, #48	; 0x30
 80869f0:	aa08      	add	r2, sp, #32
 80869f2:	a809      	add	r0, sp, #36	; 0x24
 80869f4:	f7fc fc6e 	bl	80832d4 <mbedtls_asn1_get_tag>
 80869f8:	b980      	cbnz	r0, 8086a1c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x40>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 80869fa:	9b08      	ldr	r3, [sp, #32]
 80869fc:	9c09      	ldr	r4, [sp, #36]	; 0x24

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &pbe_alg_oid, &pbe_params ) ) != 0 )
 80869fe:	aa0a      	add	r2, sp, #40	; 0x28
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 8086a00:	441c      	add	r4, r3

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &pbe_alg_oid, &pbe_params ) ) != 0 )
 8086a02:	4621      	mov	r1, r4
 8086a04:	ab0d      	add	r3, sp, #52	; 0x34
 8086a06:	a809      	add	r0, sp, #36	; 0x24
 8086a08:	f7fc fd3d 	bl	8083486 <mbedtls_asn1_get_alg>
 8086a0c:	b930      	cbnz	r0, 8086a1c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x40>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 8086a0e:	2304      	movs	r3, #4
 8086a10:	aa08      	add	r2, sp, #32
 8086a12:	4621      	mov	r1, r4
 8086a14:	a809      	add	r0, sp, #36	; 0x24
 8086a16:	f7fc fc5d 	bl	80832d4 <mbedtls_asn1_get_tag>
 8086a1a:	b110      	cbz	r0, 8086a22 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x46>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8086a1c:	f5a0 5074 	sub.w	r0, r0, #15616	; 0x3d00
 8086a20:	e055      	b.n	8086ace <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>

    /*
     * Decrypt EncryptedData with appropriate PBE
     */
#if defined(MBEDTLS_PKCS12_C)
    if( mbedtls_oid_get_pkcs12_pbe_alg( &pbe_alg_oid, &md_alg, &cipher_alg ) == 0 )
 8086a22:	f10d 011f 	add.w	r1, sp, #31
 8086a26:	f10d 021e 	add.w	r2, sp, #30
 8086a2a:	a80a      	add	r0, sp, #40	; 0x28
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    buf = p;
 8086a2c:	9c09      	ldr	r4, [sp, #36]	; 0x24

    /*
     * Decrypt EncryptedData with appropriate PBE
     */
#if defined(MBEDTLS_PKCS12_C)
    if( mbedtls_oid_get_pkcs12_pbe_alg( &pbe_alg_oid, &md_alg, &cipher_alg ) == 0 )
 8086a2e:	f7fe f931 	bl	8084c94 <mbedtls_oid_get_pkcs12_pbe_alg>
 8086a32:	4601      	mov	r1, r0
 8086a34:	b9a0      	cbnz	r0, 8086a60 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x84>
    {
        if( ( ret = mbedtls_pkcs12_pbe( &pbe_params, MBEDTLS_PKCS12_PBE_DECRYPT,
 8086a36:	9808      	ldr	r0, [sp, #32]
 8086a38:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8086a3c:	9003      	str	r0, [sp, #12]
 8086a3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8086a40:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8086a44:	9002      	str	r0, [sp, #8]
 8086a46:	9404      	str	r4, [sp, #16]
 8086a48:	9601      	str	r6, [sp, #4]
 8086a4a:	9700      	str	r7, [sp, #0]
 8086a4c:	a80d      	add	r0, sp, #52	; 0x34
 8086a4e:	f006 fc6b 	bl	808d328 <mbedtls_pkcs12_pbe>
 8086a52:	2800      	cmp	r0, #0
 8086a54:	d036      	beq.n	8086ac4 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe8>
                                cipher_alg, md_alg,
                                pwd, pwdlen, p, len, buf ) ) != 0 )
        {
            if( ret == MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH )
 8086a56:	f510 5ff0 	cmn.w	r0, #7680	; 0x1e00
 8086a5a:	d138      	bne.n	8086ace <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
                return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
 8086a5c:	481d      	ldr	r0, [pc, #116]	; (8086ad4 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf8>)
 8086a5e:	e036      	b.n	8086ace <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
            return( ret );
        }

        decrypted = 1;
    }
    else if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS12_PBE_SHA1_RC4_128, &pbe_alg_oid ) == 0 )
 8086a60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8086a62:	2a0a      	cmp	r2, #10
 8086a64:	d114      	bne.n	8086a90 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xb4>
 8086a66:	990c      	ldr	r1, [sp, #48]	; 0x30
 8086a68:	481b      	ldr	r0, [pc, #108]	; (8086ad8 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xfc>)
 8086a6a:	f00d fa6b 	bl	8093f44 <memcmp>
 8086a6e:	4601      	mov	r1, r0
 8086a70:	bb30      	cbnz	r0, 8086ac0 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe4>
    {
        if( ( ret = mbedtls_pkcs12_pbe_sha1_rc4_128( &pbe_params,
 8086a72:	9b08      	ldr	r3, [sp, #32]
 8086a74:	9402      	str	r4, [sp, #8]
 8086a76:	9301      	str	r3, [sp, #4]
 8086a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8086a7a:	463a      	mov	r2, r7
 8086a7c:	9300      	str	r3, [sp, #0]
 8086a7e:	a80d      	add	r0, sp, #52	; 0x34
 8086a80:	4633      	mov	r3, r6
 8086a82:	f006 fb73 	bl	808d16c <mbedtls_pkcs12_pbe_sha1_rc4_128>
 8086a86:	bb10      	cbnz	r0, 8086ace <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
        }

        // Best guess for password mismatch when using RC4. If first tag is
        // not MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE
        //
        if( *buf != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 8086a88:	7823      	ldrb	r3, [r4, #0]
 8086a8a:	2b30      	cmp	r3, #48	; 0x30
 8086a8c:	d01a      	beq.n	8086ac4 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe8>
 8086a8e:	e7e5      	b.n	8086a5c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x80>
        decrypted = 1;
    }
    else
#endif /* MBEDTLS_PKCS12_C */
#if defined(MBEDTLS_PKCS5_C)
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBES2, &pbe_alg_oid ) == 0 )
 8086a90:	2a09      	cmp	r2, #9
 8086a92:	d115      	bne.n	8086ac0 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe4>
 8086a94:	990c      	ldr	r1, [sp, #48]	; 0x30
 8086a96:	4811      	ldr	r0, [pc, #68]	; (8086adc <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x100>)
 8086a98:	f00d fa54 	bl	8093f44 <memcmp>
 8086a9c:	4601      	mov	r1, r0
 8086a9e:	b978      	cbnz	r0, 8086ac0 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe4>
    {
        if( ( ret = mbedtls_pkcs5_pbes2( &pbe_params, MBEDTLS_PKCS5_DECRYPT, pwd, pwdlen,
 8086aa0:	9b08      	ldr	r3, [sp, #32]
 8086aa2:	9402      	str	r4, [sp, #8]
 8086aa4:	9301      	str	r3, [sp, #4]
 8086aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8086aa8:	463a      	mov	r2, r7
 8086aaa:	9300      	str	r3, [sp, #0]
 8086aac:	a80d      	add	r0, sp, #52	; 0x34
 8086aae:	4633      	mov	r3, r6
 8086ab0:	f7fb ff68 	bl	8082984 <mbedtls_pkcs5_pbes2>
 8086ab4:	b130      	cbz	r0, 8086ac4 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe8>
                                  p, len, buf ) ) != 0 )
        {
            if( ret == MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH )
 8086ab6:	f510 5f38 	cmn.w	r0, #11776	; 0x2e00
 8086aba:	e7ce      	b.n	8086a5a <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x7e>

    p = key;
    end = p + keylen;

    if( pwdlen == 0 )
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
 8086abc:	4808      	ldr	r0, [pc, #32]	; (8086ae0 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x104>)
 8086abe:	e006      	b.n	8086ace <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
    {
        ((void) pwd);
    }

    if( decrypted == 0 )
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
 8086ac0:	4808      	ldr	r0, [pc, #32]	; (8086ae4 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x108>)
 8086ac2:	e004      	b.n	8086ace <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>

    return( pk_parse_key_pkcs8_unencrypted_der( pk, buf, len ) );
 8086ac4:	9a08      	ldr	r2, [sp, #32]
 8086ac6:	4621      	mov	r1, r4
 8086ac8:	4628      	mov	r0, r5
 8086aca:	f7ff ff31 	bl	8086930 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
}
 8086ace:	b011      	add	sp, #68	; 0x44
 8086ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8086ad2:	bf00      	nop
 8086ad4:	ffffc480 	.word	0xffffc480
 8086ad8:	08097a2b 	.word	0x08097a2b
 8086adc:	08097a36 	.word	0x08097a36
 8086ae0:	ffffc400 	.word	0xffffc400
 8086ae4:	ffffc680 	.word	0xffffc680

08086ae8 <mbedtls_pk_parse_subpubkey>:
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
 8086ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
    int ret;
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 8086aea:	2300      	movs	r3, #0
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
 8086aec:	b08f      	sub	sp, #60	; 0x3c
 8086aee:	4617      	mov	r7, r2
    int ret;
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 8086af0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    const mbedtls_pk_info_t *pk_info;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8086af4:	aa09      	add	r2, sp, #36	; 0x24
 8086af6:	2330      	movs	r3, #48	; 0x30
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
 8086af8:	4605      	mov	r5, r0
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
    const mbedtls_pk_info_t *pk_info;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8086afa:	f7fc fbeb 	bl	80832d4 <mbedtls_asn1_get_tag>
 8086afe:	b110      	cbz	r0, 8086b06 <mbedtls_pk_parse_subpubkey+0x1e>
                    MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8086b00:	f5a0 5074 	sub.w	r0, r0, #15616	; 0x3d00
 8086b04:	e090      	b.n	8086c28 <mbedtls_pk_parse_subpubkey+0x140>
    }

    end = *p + len;
 8086b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8086b08:	682e      	ldr	r6, [r5, #0]

    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
 8086b0a:	f10d 0223 	add.w	r2, sp, #35	; 0x23
                    MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = *p + len;
 8086b0e:	441e      	add	r6, r3

    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
 8086b10:	4631      	mov	r1, r6
 8086b12:	ab0b      	add	r3, sp, #44	; 0x2c
 8086b14:	4628      	mov	r0, r5
 8086b16:	f7ff fee1 	bl	80868dc <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>
 8086b1a:	2800      	cmp	r0, #0
 8086b1c:	f040 8084 	bne.w	8086c28 <mbedtls_pk_parse_subpubkey+0x140>
        return( ret );

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 8086b20:	aa09      	add	r2, sp, #36	; 0x24
 8086b22:	4631      	mov	r1, r6
 8086b24:	4628      	mov	r0, r5
 8086b26:	f7fc fc5e 	bl	80833e6 <mbedtls_asn1_get_bitstring_null>
 8086b2a:	b110      	cbz	r0, 8086b32 <mbedtls_pk_parse_subpubkey+0x4a>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 8086b2c:	f5a0 506c 	sub.w	r0, r0, #15104	; 0x3b00
 8086b30:	e07a      	b.n	8086c28 <mbedtls_pk_parse_subpubkey+0x140>

    if( *p + len != end )
 8086b32:	682a      	ldr	r2, [r5, #0]
 8086b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8086b36:	4413      	add	r3, r2
 8086b38:	429e      	cmp	r6, r3
 8086b3a:	d169      	bne.n	8086c10 <mbedtls_pk_parse_subpubkey+0x128>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 8086b3c:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
 8086b40:	f005 fb5c 	bl	808c1fc <mbedtls_pk_info_from_type>
 8086b44:	4601      	mov	r1, r0
 8086b46:	2800      	cmp	r0, #0
 8086b48:	d064      	beq.n	8086c14 <mbedtls_pk_parse_subpubkey+0x12c>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 8086b4a:	4638      	mov	r0, r7
 8086b4c:	f005 fb5e 	bl	808c20c <mbedtls_pk_setup>
 8086b50:	4604      	mov	r4, r0
 8086b52:	2800      	cmp	r0, #0
 8086b54:	d160      	bne.n	8086c18 <mbedtls_pk_parse_subpubkey+0x130>
        return( ret );

#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA )
 8086b56:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8086b5a:	2b01      	cmp	r3, #1
 8086b5c:	d162      	bne.n	8086c24 <mbedtls_pk_parse_subpubkey+0x13c>
                             mbedtls_rsa_context *rsa )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8086b5e:	2330      	movs	r3, #48	; 0x30
 8086b60:	aa0a      	add	r2, sp, #40	; 0x28
 8086b62:	4631      	mov	r1, r6
 8086b64:	4628      	mov	r0, r5
 8086b66:	687c      	ldr	r4, [r7, #4]
 8086b68:	f7fc fbb4 	bl	80832d4 <mbedtls_asn1_get_tag>
 8086b6c:	bb28      	cbnz	r0, 8086bba <mbedtls_pk_parse_subpubkey+0xd2>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( *p + len != end )
 8086b6e:	682a      	ldr	r2, [r5, #0]
 8086b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8086b72:	4413      	add	r3, r2
 8086b74:	429e      	cmp	r6, r3
 8086b76:	d146      	bne.n	8086c06 <mbedtls_pk_parse_subpubkey+0x11e>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    /* Import N */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8086b78:	2302      	movs	r3, #2
 8086b7a:	aa0a      	add	r2, sp, #40	; 0x28
 8086b7c:	4631      	mov	r1, r6
 8086b7e:	4628      	mov	r0, r5
 8086b80:	f7fc fba8 	bl	80832d4 <mbedtls_asn1_get_tag>
 8086b84:	b9c8      	cbnz	r0, 8086bba <mbedtls_pk_parse_subpubkey+0xd2>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( ( ret = mbedtls_rsa_import_raw( rsa, *p, len, NULL, 0, NULL, 0,
 8086b86:	2300      	movs	r3, #0
 8086b88:	9306      	str	r3, [sp, #24]
 8086b8a:	9305      	str	r3, [sp, #20]
 8086b8c:	9304      	str	r3, [sp, #16]
 8086b8e:	9303      	str	r3, [sp, #12]
 8086b90:	9302      	str	r3, [sp, #8]
 8086b92:	9301      	str	r3, [sp, #4]
 8086b94:	9300      	str	r3, [sp, #0]
 8086b96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8086b98:	6829      	ldr	r1, [r5, #0]
 8086b9a:	4620      	mov	r0, r4
 8086b9c:	f7fc fe88 	bl	80838b0 <mbedtls_rsa_import_raw>
 8086ba0:	2800      	cmp	r0, #0
 8086ba2:	d13d      	bne.n	8086c20 <mbedtls_pk_parse_subpubkey+0x138>
                                        NULL, 0, NULL, 0 ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
 8086ba4:	682a      	ldr	r2, [r5, #0]
 8086ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8086ba8:	4631      	mov	r1, r6

    if( ( ret = mbedtls_rsa_import_raw( rsa, *p, len, NULL, 0, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
 8086baa:	4413      	add	r3, r2
 8086bac:	602b      	str	r3, [r5, #0]

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 8086bae:	aa0a      	add	r2, sp, #40	; 0x28
 8086bb0:	2302      	movs	r3, #2
 8086bb2:	4628      	mov	r0, r5
 8086bb4:	f7fc fb8e 	bl	80832d4 <mbedtls_asn1_get_tag>
 8086bb8:	b118      	cbz	r0, 8086bc2 <mbedtls_pk_parse_subpubkey+0xda>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 8086bba:	f5a0 546c 	sub.w	r4, r0, #15104	; 0x3b00
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;

    if( ret == 0 && *p != end )
 8086bbe:	b1fc      	cbz	r4, 8086c00 <mbedtls_pk_parse_subpubkey+0x118>
 8086bc0:	e022      	b.n	8086c08 <mbedtls_pk_parse_subpubkey+0x120>

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
 8086bc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8086bc4:	9004      	str	r0, [sp, #16]
 8086bc6:	9306      	str	r3, [sp, #24]
 8086bc8:	682b      	ldr	r3, [r5, #0]
 8086bca:	9003      	str	r0, [sp, #12]
 8086bcc:	9305      	str	r3, [sp, #20]
 8086bce:	9002      	str	r0, [sp, #8]
 8086bd0:	9001      	str	r0, [sp, #4]
 8086bd2:	9000      	str	r0, [sp, #0]
 8086bd4:	4603      	mov	r3, r0
 8086bd6:	4602      	mov	r2, r0
 8086bd8:	4601      	mov	r1, r0
 8086bda:	4620      	mov	r0, r4
 8086bdc:	f7fc fe68 	bl	80838b0 <mbedtls_rsa_import_raw>
 8086be0:	b9f0      	cbnz	r0, 8086c20 <mbedtls_pk_parse_subpubkey+0x138>
                                        NULL, 0, *p, len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
 8086be2:	682a      	ldr	r2, [r5, #0]
 8086be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28

    if( mbedtls_rsa_complete( rsa ) != 0 ||
 8086be6:	4620      	mov	r0, r4

    if( ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        NULL, 0, *p, len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
 8086be8:	4413      	add	r3, r2
 8086bea:	602b      	str	r3, [r5, #0]

    if( mbedtls_rsa_complete( rsa ) != 0 ||
 8086bec:	f7fc fe9e 	bl	808392c <mbedtls_rsa_complete>
 8086bf0:	b9b0      	cbnz	r0, 8086c20 <mbedtls_pk_parse_subpubkey+0x138>
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
 8086bf2:	4620      	mov	r0, r4
 8086bf4:	f7fc ff56 	bl	8083aa4 <mbedtls_rsa_check_pubkey>
                                        NULL, 0, *p, len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;

    if( mbedtls_rsa_complete( rsa ) != 0 ||
 8086bf8:	b990      	cbnz	r0, 8086c20 <mbedtls_pk_parse_subpubkey+0x138>
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
    {
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
    }

    if( *p != end )
 8086bfa:	682b      	ldr	r3, [r5, #0]
 8086bfc:	429e      	cmp	r6, r3
 8086bfe:	d102      	bne.n	8086c06 <mbedtls_pk_parse_subpubkey+0x11e>
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;

    if( ret == 0 && *p != end )
 8086c00:	682b      	ldr	r3, [r5, #0]
 8086c02:	429e      	cmp	r6, r3
 8086c04:	d00a      	beq.n	8086c1c <mbedtls_pk_parse_subpubkey+0x134>
        ret = MBEDTLS_ERR_PK_INVALID_PUBKEY
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;
 8086c06:	4c09      	ldr	r4, [pc, #36]	; (8086c2c <mbedtls_pk_parse_subpubkey+0x144>)

    if( ret != 0 )
        mbedtls_pk_free( pk );
 8086c08:	4638      	mov	r0, r7
 8086c0a:	f005 fae6 	bl	808c1da <mbedtls_pk_free>
 8086c0e:	e003      	b.n	8086c18 <mbedtls_pk_parse_subpubkey+0x130>
    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( *p + len != end )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8086c10:	4806      	ldr	r0, [pc, #24]	; (8086c2c <mbedtls_pk_parse_subpubkey+0x144>)
 8086c12:	e009      	b.n	8086c28 <mbedtls_pk_parse_subpubkey+0x140>

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 8086c14:	4806      	ldr	r0, [pc, #24]	; (8086c30 <mbedtls_pk_parse_subpubkey+0x148>)
 8086c16:	e007      	b.n	8086c28 <mbedtls_pk_parse_subpubkey+0x140>
 8086c18:	4620      	mov	r0, r4
 8086c1a:	e005      	b.n	8086c28 <mbedtls_pk_parse_subpubkey+0x140>
 8086c1c:	2000      	movs	r0, #0
 8086c1e:	e003      	b.n	8086c28 <mbedtls_pk_parse_subpubkey+0x140>
    *p += len;

    if( mbedtls_rsa_complete( rsa ) != 0 ||
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
    {
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
 8086c20:	4c04      	ldr	r4, [pc, #16]	; (8086c34 <mbedtls_pk_parse_subpubkey+0x14c>)
 8086c22:	e7f1      	b.n	8086c08 <mbedtls_pk_parse_subpubkey+0x120>
        ret = pk_use_ecparams( &alg_params, &mbedtls_pk_ec( *pk )->grp );
        if( ret == 0 )
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;
 8086c24:	4c02      	ldr	r4, [pc, #8]	; (8086c30 <mbedtls_pk_parse_subpubkey+0x148>)
 8086c26:	e7ef      	b.n	8086c08 <mbedtls_pk_parse_subpubkey+0x120>

    if( ret != 0 )
        mbedtls_pk_free( pk );

    return( ret );
}
 8086c28:	b00f      	add	sp, #60	; 0x3c
 8086c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8086c2c:	ffffc49a 	.word	0xffffc49a
 8086c30:	ffffc380 	.word	0xffffc380
 8086c34:	ffffc500 	.word	0xffffc500

08086c38 <mbedtls_pk_parse_key>:
 * Parse a private key
 */
int mbedtls_pk_parse_key( mbedtls_pk_context *pk,
                  const unsigned char *key, size_t keylen,
                  const unsigned char *pwd, size_t pwdlen )
{
 8086c38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8086c3c:	4616      	mov	r6, r2
 8086c3e:	b089      	sub	sp, #36	; 0x24
 8086c40:	4605      	mov	r5, r0

#if defined(MBEDTLS_PEM_PARSE_C)
    size_t len;
    mbedtls_pem_context pem;

    mbedtls_pem_init( &pem );
 8086c42:	a805      	add	r0, sp, #20
 * Parse a private key
 */
int mbedtls_pk_parse_key( mbedtls_pk_context *pk,
                  const unsigned char *key, size_t keylen,
                  const unsigned char *pwd, size_t pwdlen )
{
 8086c44:	460c      	mov	r4, r1
 8086c46:	461f      	mov	r7, r3
 8086c48:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40

#if defined(MBEDTLS_PEM_PARSE_C)
    size_t len;
    mbedtls_pem_context pem;

    mbedtls_pem_init( &pem );
 8086c4c:	f007 fcc4 	bl	808e5d8 <mbedtls_pem_init>

#if defined(MBEDTLS_RSA_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( keylen == 0 || key[keylen - 1] != '\0' )
 8086c50:	2e00      	cmp	r6, #0
 8086c52:	f000 80b8 	beq.w	8086dc6 <mbedtls_pk_parse_key+0x18e>
 8086c56:	f106 39ff 	add.w	r9, r6, #4294967295
 8086c5a:	f814 3009 	ldrb.w	r3, [r4, r9]
 8086c5e:	b11b      	cbz	r3, 8086c68 <mbedtls_pk_parse_key+0x30>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
        return( ret );
#endif /* MBEDTLS_ECP_C */

    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( keylen == 0 || key[keylen - 1] != '\0' )
 8086c60:	f814 3009 	ldrb.w	r3, [r4, r9]
 8086c64:	bb6b      	cbnz	r3, 8086cc2 <mbedtls_pk_parse_key+0x8a>
 8086c66:	e031      	b.n	8086ccc <mbedtls_pk_parse_key+0x94>
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
                               "-----BEGIN RSA PRIVATE KEY-----",
                               "-----END RSA PRIVATE KEY-----",
                               key, pwd, pwdlen, &len );
 8086c68:	ab04      	add	r3, sp, #16
 8086c6a:	9302      	str	r3, [sp, #8]
 8086c6c:	e88d 0180 	stmia.w	sp, {r7, r8}
 8086c70:	4623      	mov	r3, r4
 8086c72:	4a57      	ldr	r2, [pc, #348]	; (8086dd0 <mbedtls_pk_parse_key+0x198>)
 8086c74:	4957      	ldr	r1, [pc, #348]	; (8086dd4 <mbedtls_pk_parse_key+0x19c>)
 8086c76:	a805      	add	r0, sp, #20
 8086c78:	f007 fcb4 	bl	808e5e4 <mbedtls_pem_read_buffer>

    if( ret == 0 )
 8086c7c:	b978      	cbnz	r0, 8086c9e <mbedtls_pk_parse_key+0x66>
    {
        pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
 8086c7e:	2001      	movs	r0, #1
 8086c80:	f005 fabc 	bl	808c1fc <mbedtls_pk_info_from_type>
        if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
 8086c84:	4601      	mov	r1, r0
 8086c86:	4628      	mov	r0, r5
 8086c88:	f005 fac0 	bl	808c20c <mbedtls_pk_setup>
 8086c8c:	4604      	mov	r4, r0
 8086c8e:	2800      	cmp	r0, #0
 8086c90:	d160      	bne.n	8086d54 <mbedtls_pk_parse_key+0x11c>
 8086c92:	9a06      	ldr	r2, [sp, #24]
 8086c94:	9905      	ldr	r1, [sp, #20]
 8086c96:	6868      	ldr	r0, [r5, #4]
 8086c98:	f7ff fd26 	bl	80866e8 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
 8086c9c:	e058      	b.n	8086d50 <mbedtls_pk_parse_key+0x118>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
 8086c9e:	f510 5f9c 	cmn.w	r0, #4992	; 0x1380
 8086ca2:	d101      	bne.n	8086ca8 <mbedtls_pk_parse_key+0x70>
        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
 8086ca4:	484c      	ldr	r0, [pc, #304]	; (8086dd8 <mbedtls_pk_parse_key+0x1a0>)
 8086ca6:	e08f      	b.n	8086dc8 <mbedtls_pk_parse_key+0x190>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
 8086ca8:	f510 5f98 	cmn.w	r0, #4864	; 0x1300
 8086cac:	f000 8084 	beq.w	8086db8 <mbedtls_pk_parse_key+0x180>
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 8086cb0:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 8086cb4:	f040 8088 	bne.w	8086dc8 <mbedtls_pk_parse_key+0x190>
 8086cb8:	e7d2      	b.n	8086c60 <mbedtls_pk_parse_key+0x28>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 8086cba:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 8086cbe:	f040 8083 	bne.w	8086dc8 <mbedtls_pk_parse_key+0x190>
        return( ret );

#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( keylen == 0 || key[keylen - 1] != '\0' )
 8086cc2:	19a3      	adds	r3, r4, r6
 8086cc4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8086cc8:	b9ab      	cbnz	r3, 8086cf6 <mbedtls_pk_parse_key+0xbe>
 8086cca:	e02d      	b.n	8086d28 <mbedtls_pk_parse_key+0xf0>
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
                               "-----BEGIN PRIVATE KEY-----",
                               "-----END PRIVATE KEY-----",
                               key, NULL, 0, &len );
 8086ccc:	aa04      	add	r2, sp, #16
 8086cce:	9202      	str	r2, [sp, #8]
 8086cd0:	9301      	str	r3, [sp, #4]
 8086cd2:	9300      	str	r3, [sp, #0]
 8086cd4:	4a41      	ldr	r2, [pc, #260]	; (8086ddc <mbedtls_pk_parse_key+0x1a4>)
 8086cd6:	4623      	mov	r3, r4
 8086cd8:	4941      	ldr	r1, [pc, #260]	; (8086de0 <mbedtls_pk_parse_key+0x1a8>)
 8086cda:	a805      	add	r0, sp, #20
 8086cdc:	f007 fc82 	bl	808e5e4 <mbedtls_pem_read_buffer>
    if( ret == 0 )
 8086ce0:	2800      	cmp	r0, #0
 8086ce2:	d1ea      	bne.n	8086cba <mbedtls_pk_parse_key+0x82>
    {
        if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk,
 8086ce4:	9a06      	ldr	r2, [sp, #24]
 8086ce6:	9905      	ldr	r1, [sp, #20]
 8086ce8:	4628      	mov	r0, r5
 8086cea:	f7ff fe21 	bl	8086930 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
 8086cee:	e02f      	b.n	8086d50 <mbedtls_pk_parse_key+0x118>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 8086cf0:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 8086cf4:	d168      	bne.n	8086dc8 <mbedtls_pk_parse_key+0x190>
        unsigned char *key_copy;

        if( keylen == 0 )
            return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );

        if( ( key_copy = (unsigned char *)mbedtls_calloc( 1, keylen ) ) == NULL )
 8086cf6:	4631      	mov	r1, r6
 8086cf8:	2001      	movs	r0, #1
 8086cfa:	f00d f80b 	bl	8093d14 <calloc>
 8086cfe:	4681      	mov	r9, r0
 8086d00:	2800      	cmp	r0, #0
 8086d02:	d05b      	beq.n	8086dbc <mbedtls_pk_parse_key+0x184>
            return( MBEDTLS_ERR_PK_ALLOC_FAILED );

        memcpy( key_copy, key, keylen );
 8086d04:	4632      	mov	r2, r6
 8086d06:	4621      	mov	r1, r4
 8086d08:	f00d f92b 	bl	8093f62 <memcpy>

        ret = pk_parse_key_pkcs8_encrypted_der( pk, key_copy, keylen,
                                                pwd, pwdlen );
 8086d0c:	463b      	mov	r3, r7
 8086d0e:	4632      	mov	r2, r6
 8086d10:	4649      	mov	r1, r9
 8086d12:	f8cd 8000 	str.w	r8, [sp]
 8086d16:	4628      	mov	r0, r5
 8086d18:	f7ff fe60 	bl	80869dc <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>
 8086d1c:	eb09 0106 	add.w	r1, r9, r6
 8086d20:	4607      	mov	r7, r0
 8086d22:	464b      	mov	r3, r9

#if defined(MBEDTLS_FS_IO) || \
    defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8086d24:	2200      	movs	r2, #0
 8086d26:	e01d      	b.n	8086d64 <mbedtls_pk_parse_key+0x12c>
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
                               "-----BEGIN ENCRYPTED PRIVATE KEY-----",
                               "-----END ENCRYPTED PRIVATE KEY-----",
                               key, NULL, 0, &len );
 8086d28:	aa04      	add	r2, sp, #16
 8086d2a:	9202      	str	r2, [sp, #8]
 8086d2c:	9301      	str	r3, [sp, #4]
 8086d2e:	9300      	str	r3, [sp, #0]
 8086d30:	4a2c      	ldr	r2, [pc, #176]	; (8086de4 <mbedtls_pk_parse_key+0x1ac>)
 8086d32:	4623      	mov	r3, r4
 8086d34:	492c      	ldr	r1, [pc, #176]	; (8086de8 <mbedtls_pk_parse_key+0x1b0>)
 8086d36:	a805      	add	r0, sp, #20
 8086d38:	f007 fc54 	bl	808e5e4 <mbedtls_pem_read_buffer>
    if( ret == 0 )
 8086d3c:	2800      	cmp	r0, #0
 8086d3e:	d1d7      	bne.n	8086cf0 <mbedtls_pk_parse_key+0xb8>
    {
        if( ( ret = pk_parse_key_pkcs8_encrypted_der( pk,
 8086d40:	f8cd 8000 	str.w	r8, [sp]
 8086d44:	463b      	mov	r3, r7
 8086d46:	9a06      	ldr	r2, [sp, #24]
 8086d48:	9905      	ldr	r1, [sp, #20]
 8086d4a:	4628      	mov	r0, r5
 8086d4c:	f7ff fe46 	bl	80869dc <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>
 8086d50:	4604      	mov	r4, r0
 8086d52:	b110      	cbz	r0, 8086d5a <mbedtls_pk_parse_key+0x122>
                                                      pem.buf, pem.buflen,
                                                      pwd, pwdlen ) ) != 0 )
        {
            mbedtls_pk_free( pk );
 8086d54:	4628      	mov	r0, r5
 8086d56:	f005 fa40 	bl	808c1da <mbedtls_pk_free>
        }

        mbedtls_pem_free( &pem );
 8086d5a:	a805      	add	r0, sp, #20
 8086d5c:	f007 fcd0 	bl	808e700 <mbedtls_pem_free>
                               "-----BEGIN ENCRYPTED PRIVATE KEY-----",
                               "-----END ENCRYPTED PRIVATE KEY-----",
                               key, NULL, 0, &len );
    if( ret == 0 )
    {
        if( ( ret = pk_parse_key_pkcs8_encrypted_der( pk,
 8086d60:	4620      	mov	r0, r4
        {
            mbedtls_pk_free( pk );
        }

        mbedtls_pem_free( &pem );
        return( ret );
 8086d62:	e031      	b.n	8086dc8 <mbedtls_pk_parse_key+0x190>

#if defined(MBEDTLS_FS_IO) || \
    defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8086d64:	428b      	cmp	r3, r1
 8086d66:	d002      	beq.n	8086d6e <mbedtls_pk_parse_key+0x136>
 8086d68:	701a      	strb	r2, [r3, #0]
 8086d6a:	3301      	adds	r3, #1
 8086d6c:	e7fa      	b.n	8086d64 <mbedtls_pk_parse_key+0x12c>

        ret = pk_parse_key_pkcs8_encrypted_der( pk, key_copy, keylen,
                                                pwd, pwdlen );

        mbedtls_zeroize( key_copy, keylen );
        mbedtls_free( key_copy );
 8086d6e:	4648      	mov	r0, r9
 8086d70:	f00a f9f2 	bl	8091158 <free>
    }

    if( ret == 0 )
 8086d74:	b90f      	cbnz	r7, 8086d7a <mbedtls_pk_parse_key+0x142>
        return( 0 );
 8086d76:	2000      	movs	r0, #0
 8086d78:	e026      	b.n	8086dc8 <mbedtls_pk_parse_key+0x190>

    mbedtls_pk_free( pk );
 8086d7a:	4628      	mov	r0, r5
 8086d7c:	f005 fa2d 	bl	808c1da <mbedtls_pk_free>

    if( ret == MBEDTLS_ERR_PK_PASSWORD_MISMATCH )
 8086d80:	f517 5f6e 	cmn.w	r7, #15232	; 0x3b80
 8086d84:	d08e      	beq.n	8086ca4 <mbedtls_pk_parse_key+0x6c>
    {
        return( ret );
    }
#endif /* MBEDTLS_PKCS12_C || MBEDTLS_PKCS5_C */

    if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk, key, keylen ) ) == 0 )
 8086d86:	4632      	mov	r2, r6
 8086d88:	4621      	mov	r1, r4
 8086d8a:	4628      	mov	r0, r5
 8086d8c:	f7ff fdd0 	bl	8086930 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
 8086d90:	2800      	cmp	r0, #0
 8086d92:	d0f0      	beq.n	8086d76 <mbedtls_pk_parse_key+0x13e>
        return( 0 );

    mbedtls_pk_free( pk );
 8086d94:	4628      	mov	r0, r5
 8086d96:	f005 fa20 	bl	808c1da <mbedtls_pk_free>

#if defined(MBEDTLS_RSA_C)

    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
 8086d9a:	2001      	movs	r0, #1
 8086d9c:	f005 fa2e 	bl	808c1fc <mbedtls_pk_info_from_type>
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
 8086da0:	4601      	mov	r1, r0
 8086da2:	4628      	mov	r0, r5
 8086da4:	f005 fa32 	bl	808c20c <mbedtls_pk_setup>
 8086da8:	b950      	cbnz	r0, 8086dc0 <mbedtls_pk_parse_key+0x188>
 8086daa:	4632      	mov	r2, r6
 8086dac:	4621      	mov	r1, r4
 8086dae:	6868      	ldr	r0, [r5, #4]
 8086db0:	f7ff fc9a 	bl	80866e8 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
 8086db4:	b920      	cbnz	r0, 8086dc0 <mbedtls_pk_parse_key+0x188>
 8086db6:	e7de      	b.n	8086d76 <mbedtls_pk_parse_key+0x13e>
        return( ret );
    }
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
 8086db8:	480c      	ldr	r0, [pc, #48]	; (8086dec <mbedtls_pk_parse_key+0x1b4>)
 8086dba:	e005      	b.n	8086dc8 <mbedtls_pk_parse_key+0x190>

        if( keylen == 0 )
            return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );

        if( ( key_copy = (unsigned char *)mbedtls_calloc( 1, keylen ) ) == NULL )
            return( MBEDTLS_ERR_PK_ALLOC_FAILED );
 8086dbc:	480c      	ldr	r0, [pc, #48]	; (8086df0 <mbedtls_pk_parse_key+0x1b8>)
 8086dbe:	e003      	b.n	8086dc8 <mbedtls_pk_parse_key+0x190>
    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
        ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ),
                                        key, keylen ) ) != 0 )
    {
        mbedtls_pk_free( pk );
 8086dc0:	4628      	mov	r0, r5
 8086dc2:	f005 fa0a 	bl	808c1da <mbedtls_pk_free>
        return( 0 );
    }

#endif /* MBEDTLS_ECP_C */

    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 8086dc6:	480b      	ldr	r0, [pc, #44]	; (8086df4 <mbedtls_pk_parse_key+0x1bc>)
}
 8086dc8:	b009      	add	sp, #36	; 0x24
 8086dca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8086dce:	bf00      	nop
 8086dd0:	08097a40 	.word	0x08097a40
 8086dd4:	08097a5e 	.word	0x08097a5e
 8086dd8:	ffffc480 	.word	0xffffc480
 8086ddc:	08097a7e 	.word	0x08097a7e
 8086de0:	08097a98 	.word	0x08097a98
 8086de4:	08097ab4 	.word	0x08097ab4
 8086de8:	08097ad8 	.word	0x08097ad8
 8086dec:	ffffc400 	.word	0xffffc400
 8086df0:	ffffc080 	.word	0xffffc080
 8086df4:	ffffc300 	.word	0xffffc300

08086df8 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>:
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],
                      unsigned char output[16] )
{
 8086df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086dfc:	7bcb      	ldrb	r3, [r1, #15]
 8086dfe:	b093      	sub	sp, #76	; 0x4c
 8086e00:	f003 030f 	and.w	r3, r3, #15
 8086e04:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    }
#endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */

    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
 8086e08:	e9d3 6730 	ldrd	r6, r7, [r3, #192]	; 0xc0
    zl = ctx->HL[lo];
 8086e0c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
        if( i != 15 )
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
 8086e10:	f8df c150 	ldr.w	ip, [pc, #336]	; 8086f64 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0x16c>
 8086e14:	f101 0310 	add.w	r3, r1, #16
 8086e18:	9310      	str	r3, [sp, #64]	; 0x40
    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
    {
        lo = x[i] & 0xf;
 8086e1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8086e1c:	f813 ed01 	ldrb.w	lr, [r3, #-1]!
 8086e20:	9310      	str	r3, [sp, #64]	; 0x40
 8086e22:	f00e 030f 	and.w	r3, lr, #15
 8086e26:	9311      	str	r3, [sp, #68]	; 0x44
        hi = x[i] >> 4;

        if( i != 15 )
 8086e28:	9b10      	ldr	r3, [sp, #64]	; 0x40
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
    {
        lo = x[i] & 0xf;
        hi = x[i] >> 4;
 8086e2a:	ea4f 1e2e 	mov.w	lr, lr, asr #4

        if( i != 15 )
 8086e2e:	ebc1 0803 	rsb	r8, r1, r3
 8086e32:	f1b8 0f0f 	cmp.w	r8, #15
 8086e36:	d03a      	beq.n	8086eae <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0xb6>
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
 8086e38:	0923      	lsrs	r3, r4, #4
 8086e3a:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8086e3e:	9300      	str	r3, [sp, #0]
 8086e40:	092b      	lsrs	r3, r5, #4
 8086e42:	9301      	str	r3, [sp, #4]
 8086e44:	0733      	lsls	r3, r6, #28
 8086e46:	9309      	str	r3, [sp, #36]	; 0x24
 8086e48:	2300      	movs	r3, #0
 8086e4a:	9308      	str	r3, [sp, #32]
 8086e4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8086e4e:	e9dd ab00 	ldrd	sl, fp, [sp]
 8086e52:	eb00 05c3 	add.w	r5, r0, r3, lsl #3
 8086e56:	0933      	lsrs	r3, r6, #4
 8086e58:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8086e5c:	9304      	str	r3, [sp, #16]
 8086e5e:	093b      	lsrs	r3, r7, #4
 8086e60:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8086e64:	9305      	str	r3, [sp, #20]
 8086e66:	ea48 080a 	orr.w	r8, r8, sl
 8086e6a:	ea49 090b 	orr.w	r9, r9, fp
 8086e6e:	e9d5 6730 	ldrd	r6, r7, [r5, #192]	; 0xc0
 8086e72:	46c2      	mov	sl, r8
 8086e74:	46cb      	mov	fp, r9
 8086e76:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8086e7a:	ea88 0806 	eor.w	r8, r8, r6
 8086e7e:	4646      	mov	r6, r8
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
 8086e80:	f004 040f 	and.w	r4, r4, #15
            zh ^= ctx->HH[lo];
 8086e84:	f85c 4034 	ldr.w	r4, [ip, r4, lsl #3]
 8086e88:	ea89 0907 	eor.w	r9, r9, r7
 8086e8c:	0423      	lsls	r3, r4, #16
 8086e8e:	930d      	str	r3, [sp, #52]	; 0x34
 8086e90:	2300      	movs	r3, #0
 8086e92:	464f      	mov	r7, r9
 8086e94:	930c      	str	r3, [sp, #48]	; 0x30
 8086e96:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8086e9a:	4073      	eors	r3, r6
 8086e9c:	461e      	mov	r6, r3
 8086e9e:	407c      	eors	r4, r7
 8086ea0:	4627      	mov	r7, r4
            zl ^= ctx->HL[lo];
 8086ea2:	e9d5 4510 	ldrd	r4, r5, [r5, #64]	; 0x40
 8086ea6:	ea84 040a 	eor.w	r4, r4, sl
 8086eaa:	ea85 050b 	eor.w	r5, r5, fp

        }

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
 8086eae:	0923      	lsrs	r3, r4, #4
 8086eb0:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8086eb4:	9302      	str	r3, [sp, #8]
 8086eb6:	092b      	lsrs	r3, r5, #4
 8086eb8:	9303      	str	r3, [sp, #12]
 8086eba:	0733      	lsls	r3, r6, #28
 8086ebc:	930b      	str	r3, [sp, #44]	; 0x2c
 8086ebe:	2300      	movs	r3, #0
 8086ec0:	930a      	str	r3, [sp, #40]	; 0x28
 8086ec2:	0933      	lsrs	r3, r6, #4
 8086ec4:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8086ec8:	9306      	str	r3, [sp, #24]
 8086eca:	093b      	lsrs	r3, r7, #4
 8086ecc:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 8086ed0:	9307      	str	r3, [sp, #28]
 8086ed2:	e9de 6730 	ldrd	r6, r7, [lr, #192]	; 0xc0
 8086ed6:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 8086eda:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
 8086ede:	ea48 080a 	orr.w	r8, r8, sl
 8086ee2:	ea49 090b 	orr.w	r9, r9, fp
 8086ee6:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8086eea:	ea8a 0a06 	eor.w	sl, sl, r6
 8086eee:	4656      	mov	r6, sl
 8086ef0:	ea8b 0b07 	eor.w	fp, fp, r7
 8086ef4:	465f      	mov	r7, fp
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
 8086ef6:	f004 040f 	and.w	r4, r4, #15
        zh ^= ctx->HH[hi];
 8086efa:	f85c 4034 	ldr.w	r4, [ip, r4, lsl #3]
 8086efe:	0423      	lsls	r3, r4, #16
 8086f00:	930f      	str	r3, [sp, #60]	; 0x3c
 8086f02:	2300      	movs	r3, #0
 8086f04:	930e      	str	r3, [sp, #56]	; 0x38
 8086f06:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 8086f0a:	4073      	eors	r3, r6
 8086f0c:	461e      	mov	r6, r3
    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
 8086f0e:	9b10      	ldr	r3, [sp, #64]	; 0x40

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
 8086f10:	407c      	eors	r4, r7
    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
 8086f12:	4299      	cmp	r1, r3

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
 8086f14:	4627      	mov	r7, r4
        zl ^= ctx->HL[hi];
 8086f16:	e9de 4510 	ldrd	r4, r5, [lr, #64]	; 0x40
 8086f1a:	ea84 0408 	eor.w	r4, r4, r8
 8086f1e:	ea85 0509 	eor.w	r5, r5, r9
    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
 8086f22:	f47f af7a 	bne.w	8086e1a <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0x22>
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
        zl ^= ctx->HL[hi];
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
 8086f26:	0e3b      	lsrs	r3, r7, #24
 8086f28:	7013      	strb	r3, [r2, #0]
 8086f2a:	0c3b      	lsrs	r3, r7, #16
 8086f2c:	7053      	strb	r3, [r2, #1]
 8086f2e:	0a3b      	lsrs	r3, r7, #8
 8086f30:	7093      	strb	r3, [r2, #2]
    PUT_UINT32_BE( zh, output, 4 );
 8086f32:	0e33      	lsrs	r3, r6, #24
 8086f34:	7113      	strb	r3, [r2, #4]
 8086f36:	0c33      	lsrs	r3, r6, #16
 8086f38:	7153      	strb	r3, [r2, #5]
 8086f3a:	0a33      	lsrs	r3, r6, #8
 8086f3c:	7193      	strb	r3, [r2, #6]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 8086f3e:	0e2b      	lsrs	r3, r5, #24
 8086f40:	7213      	strb	r3, [r2, #8]
 8086f42:	0c2b      	lsrs	r3, r5, #16
 8086f44:	7253      	strb	r3, [r2, #9]
 8086f46:	0a2b      	lsrs	r3, r5, #8
 8086f48:	7293      	strb	r3, [r2, #10]
    PUT_UINT32_BE( zl, output, 12 );
 8086f4a:	0e23      	lsrs	r3, r4, #24
 8086f4c:	7313      	strb	r3, [r2, #12]
 8086f4e:	0c23      	lsrs	r3, r4, #16
 8086f50:	7353      	strb	r3, [r2, #13]
 8086f52:	0a23      	lsrs	r3, r4, #8
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
        zl ^= ctx->HL[hi];
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
 8086f54:	70d7      	strb	r7, [r2, #3]
    PUT_UINT32_BE( zh, output, 4 );
 8086f56:	71d6      	strb	r6, [r2, #7]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 8086f58:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_BE( zl, output, 12 );
 8086f5a:	7393      	strb	r3, [r2, #14]
 8086f5c:	73d4      	strb	r4, [r2, #15]
}
 8086f5e:	b013      	add	sp, #76	; 0x4c
 8086f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8086f64:	08097b38 	.word	0x08097b38

08086f68 <mbedtls_gcm_init>:
/*
 * Initialize a context
 */
void mbedtls_gcm_init( mbedtls_gcm_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_gcm_context ) );
 8086f68:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8086f6c:	2100      	movs	r1, #0
 8086f6e:	f00d b81e 	b.w	8093fae <memset>

08086f72 <mbedtls_gcm_setkey>:

int mbedtls_gcm_setkey( mbedtls_gcm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
 8086f72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086f76:	4604      	mov	r4, r0
 8086f78:	b08d      	sub	sp, #52	; 0x34
 8086f7a:	4608      	mov	r0, r1
 8086f7c:	4691      	mov	r9, r2
    int ret;
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 8086f7e:	4619      	mov	r1, r3
 8086f80:	2201      	movs	r2, #1

int mbedtls_gcm_setkey( mbedtls_gcm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
 8086f82:	4698      	mov	r8, r3
    int ret;
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 8086f84:	f7fb feda 	bl	8082d3c <mbedtls_cipher_info_from_values>
    if( cipher_info == NULL )
 8086f88:	2800      	cmp	r0, #0
 8086f8a:	f000 809b 	beq.w	80870c4 <mbedtls_gcm_setkey+0x152>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    if( cipher_info->block_size != 16 )
 8086f8e:	6945      	ldr	r5, [r0, #20]
 8086f90:	9002      	str	r0, [sp, #8]
 8086f92:	2d10      	cmp	r5, #16
 8086f94:	f040 8096 	bne.w	80870c4 <mbedtls_gcm_setkey+0x152>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    mbedtls_cipher_free( &ctx->cipher_ctx );
 8086f98:	4620      	mov	r0, r4
 8086f9a:	f7fb fee7 	bl	8082d6c <mbedtls_cipher_free>

    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
 8086f9e:	9902      	ldr	r1, [sp, #8]
 8086fa0:	4620      	mov	r0, r4
 8086fa2:	f7fc f8b3 	bl	808310c <mbedtls_cipher_setup>
 8086fa6:	2800      	cmp	r0, #0
 8086fa8:	f040 808e 	bne.w	80870c8 <mbedtls_gcm_setkey+0x156>
        return( ret );

    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 8086fac:	2301      	movs	r3, #1
 8086fae:	4642      	mov	r2, r8
 8086fb0:	4649      	mov	r1, r9
 8086fb2:	4620      	mov	r0, r4
 8086fb4:	f7fb feec 	bl	8082d90 <mbedtls_cipher_setkey>
 8086fb8:	2800      	cmp	r0, #0
 8086fba:	f040 8085 	bne.w	80870c8 <mbedtls_gcm_setkey+0x156>
    uint64_t hi, lo;
    uint64_t vl, vh;
    unsigned char h[16];
    size_t olen = 0;

    memset( h, 0, 16 );
 8086fbe:	4601      	mov	r1, r0
{
    int ret, i, j;
    uint64_t hi, lo;
    uint64_t vl, vh;
    unsigned char h[16];
    size_t olen = 0;
 8086fc0:	9007      	str	r0, [sp, #28]

    memset( h, 0, 16 );
 8086fc2:	462a      	mov	r2, r5
 8086fc4:	a808      	add	r0, sp, #32
 8086fc6:	f00c fff2 	bl	8093fae <memset>
    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, h, 16, h, &olen ) ) != 0 )
 8086fca:	ab07      	add	r3, sp, #28
 8086fcc:	9300      	str	r3, [sp, #0]
 8086fce:	ab08      	add	r3, sp, #32
 8086fd0:	462a      	mov	r2, r5
 8086fd2:	4619      	mov	r1, r3
 8086fd4:	4620      	mov	r0, r4
 8086fd6:	f7fb ff29 	bl	8082e2c <mbedtls_cipher_update>
 8086fda:	2800      	cmp	r0, #0
 8086fdc:	d174      	bne.n	80870c8 <mbedtls_gcm_setkey+0x156>
        return( ret );

    /* pack h as two 64-bits ints, big-endian */
    GET_UINT32_BE( hi, h,  0  );
    GET_UINT32_BE( lo, h,  4  );
    vh = (uint64_t) hi << 32 | lo;
 8086fde:	4602      	mov	r2, r0
 8086fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8086fe2:	9908      	ldr	r1, [sp, #32]
 8086fe4:	ba1d      	rev	r5, r3
 8086fe6:	432a      	orrs	r2, r5

    GET_UINT32_BE( hi, h,  8  );
    GET_UINT32_BE( lo, h,  12 );
    vl = (uint64_t) hi << 32 | lo;
 8086fe8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
        return( ret );

    /* pack h as two 64-bits ints, big-endian */
    GET_UINT32_BE( hi, h,  0  );
    GET_UINT32_BE( lo, h,  4  );
    vh = (uint64_t) hi << 32 | lo;
 8086fea:	ba0b      	rev	r3, r1
 8086fec:	990b      	ldr	r1, [sp, #44]	; 0x2c

    GET_UINT32_BE( hi, h,  8  );
    GET_UINT32_BE( lo, h,  12 );
    vl = (uint64_t) hi << 32 | lo;
 8086fee:	fa95 f985 	rev.w	r9, r5
 8086ff2:	fa91 fe81 	rev.w	lr, r1
 8086ff6:	4649      	mov	r1, r9
 8086ff8:	ea40 000e 	orr.w	r0, r0, lr

    /* 8 = 1000 corresponds to 1 in GF(2^128) */
    ctx->HL[8] = vl;
    ctx->HH[8] = vh;
 8086ffc:	f504 7580 	add.w	r5, r4, #256	; 0x100
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_CLMUL ) )
        return( 0 );
#endif

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
 8087000:	f04f 0800 	mov.w	r8, #0
 8087004:	f04f 0900 	mov.w	r9, #0
    GET_UINT32_BE( hi, h,  8  );
    GET_UINT32_BE( lo, h,  12 );
    vl = (uint64_t) hi << 32 | lo;

    /* 8 = 1000 corresponds to 1 in GF(2^128) */
    ctx->HL[8] = vl;
 8087008:	e9c4 0120 	strd	r0, r1, [r4, #128]	; 0x80
    ctx->HH[8] = vh;
 808700c:	e9c5 2300 	strd	r2, r3, [r5]
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_CLMUL ) )
        return( 0 );
#endif

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
 8087010:	e9c4 8930 	strd	r8, r9, [r4, #192]	; 0xc0
    ctx->HL[0] = 0;
 8087014:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
 8087018:	f04f 0e03 	mov.w	lr, #3

    for( i = 4; i > 0; i >>= 1 )
 808701c:	2504      	movs	r5, #4
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 808701e:	f04f 4c61 	mov.w	ip, #3774873600	; 0xe1000000
 8087022:	f000 0801 	and.w	r8, r0, #1
        vl  = ( vh << 63 ) | ( vl >> 1 );
 8087026:	07d7      	lsls	r7, r2, #31
 8087028:	0849      	lsrs	r1, r1, #1
 808702a:	ea4f 0030 	mov.w	r0, r0, rrx
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 808702e:	085b      	lsrs	r3, r3, #1
 8087030:	ea4f 0232 	mov.w	r2, r2, rrx
 8087034:	fb0c fb08 	mul.w	fp, ip, r8
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
        vl  = ( vh << 63 ) | ( vl >> 1 );
 8087038:	2600      	movs	r6, #0
 808703a:	eb04 08c5 	add.w	r8, r4, r5, lsl #3
 808703e:	4330      	orrs	r0, r6
 8087040:	4339      	orrs	r1, r7
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 8087042:	4072      	eors	r2, r6
 8087044:	ea83 030b 	eor.w	r3, r3, fp

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
 8087048:	f1be 0e01 	subs.w	lr, lr, #1
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
        vl  = ( vh << 63 ) | ( vl >> 1 );
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);

        ctx->HL[i] = vl;
 808704c:	e9c8 0110 	strd	r0, r1, [r8, #64]	; 0x40
        ctx->HH[i] = vh;
 8087050:	e9c8 2330 	strd	r2, r3, [r8, #192]	; 0xc0

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
 8087054:	ea4f 0565 	mov.w	r5, r5, asr #1
 8087058:	d1e3      	bne.n	8087022 <mbedtls_gcm_setkey+0xb0>
 808705a:	2003      	movs	r0, #3
 808705c:	2102      	movs	r1, #2
        ctx->HH[i] = vh;
    }

    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
 808705e:	f104 0840 	add.w	r8, r4, #64	; 0x40
 8087062:	f104 0cc0 	add.w	ip, r4, #192	; 0xc0
 8087066:	00cb      	lsls	r3, r1, #3
 8087068:	eb08 0e03 	add.w	lr, r8, r3
 808706c:	4463      	add	r3, ip
        vh = *HiH;
 808706e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8087072:	e9cd 4502 	strd	r4, r5, [sp, #8]
        vl = *HiL;
 8087076:	e9de 4500 	ldrd	r4, r5, [lr]
 808707a:	e9cd 4504 	strd	r4, r5, [sp, #16]
 808707e:	4665      	mov	r5, ip
 8087080:	4644      	mov	r4, r8
        for( j = 1; j < i; j++ )
 8087082:	2201      	movs	r2, #1
        {
            HiH[j] = vh ^ ctx->HH[j];
 8087084:	e9f5 6702 	ldrd	r6, r7, [r5, #8]!
 8087088:	e9dd 9a02 	ldrd	r9, sl, [sp, #8]
 808708c:	ea89 0906 	eor.w	r9, r9, r6
 8087090:	ea8a 0a07 	eor.w	sl, sl, r7
 8087094:	464e      	mov	r6, r9
 8087096:	4657      	mov	r7, sl
            HiL[j] = vl ^ ctx->HL[j];
 8087098:	e9dd 9a04 	ldrd	r9, sl, [sp, #16]
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
        vh = *HiH;
        vl = *HiL;
        for( j = 1; j < i; j++ )
        {
            HiH[j] = vh ^ ctx->HH[j];
 808709c:	e9e3 6702 	strd	r6, r7, [r3, #8]!
            HiL[j] = vl ^ ctx->HL[j];
 80870a0:	e9f4 6702 	ldrd	r6, r7, [r4, #8]!
 80870a4:	ea89 0906 	eor.w	r9, r9, r6
 80870a8:	ea8a 0a07 	eor.w	sl, sl, r7
 80870ac:	464e      	mov	r6, r9
 80870ae:	4657      	mov	r7, sl
    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
        vh = *HiH;
        vl = *HiL;
        for( j = 1; j < i; j++ )
 80870b0:	3201      	adds	r2, #1
 80870b2:	428a      	cmp	r2, r1
        {
            HiH[j] = vh ^ ctx->HH[j];
            HiL[j] = vl ^ ctx->HL[j];
 80870b4:	e9ee 6702 	strd	r6, r7, [lr, #8]!
    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
        vh = *HiH;
        vl = *HiL;
        for( j = 1; j < i; j++ )
 80870b8:	d1e4      	bne.n	8087084 <mbedtls_gcm_setkey+0x112>

        ctx->HL[i] = vl;
        ctx->HH[i] = vh;
    }

    for( i = 2; i <= 8; i *= 2 )
 80870ba:	3801      	subs	r0, #1
 80870bc:	ea4f 0142 	mov.w	r1, r2, lsl #1
 80870c0:	d1d1      	bne.n	8087066 <mbedtls_gcm_setkey+0xf4>
 80870c2:	e001      	b.n	80870c8 <mbedtls_gcm_setkey+0x156>
    int ret;
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 80870c4:	f06f 0013 	mvn.w	r0, #19

    if( ( ret = gcm_gen_table( ctx ) ) != 0 )
        return( ret );

    return( 0 );
}
 80870c8:	b00d      	add	sp, #52	; 0x34
 80870ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080870ce <mbedtls_gcm_starts>:
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
 80870ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
 80870d2:	f04f 0900 	mov.w	r9, #0
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
 80870d6:	b08b      	sub	sp, #44	; 0x2c
 80870d8:	4604      	mov	r4, r0
 80870da:	468b      	mov	fp, r1
 80870dc:	4690      	mov	r8, r2
 80870de:	9e15      	ldr	r6, [sp, #84]	; 0x54
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
 80870e0:	f8cd 9014 	str.w	r9, [sp, #20]

    /* IV and AD are limited to 2^64 bits, so 2^61 bytes */
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
 80870e4:	461d      	mov	r5, r3
 80870e6:	2b00      	cmp	r3, #0
 80870e8:	f000 808d 	beq.w	8087206 <mbedtls_gcm_starts+0x138>
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
 80870ec:	f500 77b0 	add.w	r7, r0, #352	; 0x160
 80870f0:	2210      	movs	r2, #16
 80870f2:	4649      	mov	r1, r9
 80870f4:	4638      	mov	r0, r7
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 80870f6:	f504 7ab8 	add.w	sl, r4, #368	; 0x170
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
 80870fa:	f00c ff58 	bl	8093fae <memset>
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 80870fe:	4649      	mov	r1, r9
 8087100:	2210      	movs	r2, #16
 8087102:	4650      	mov	r0, sl
 8087104:	f00c ff53 	bl	8093fae <memset>

    ctx->mode = mode;
 8087108:	f8c4 b180 	str.w	fp, [r4, #384]	; 0x180
    ctx->len = 0;
    ctx->add_len = 0;
 808710c:	46a3      	mov	fp, r4

    memset( ctx->y, 0x00, sizeof(ctx->y) );
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );

    ctx->mode = mode;
    ctx->len = 0;
 808710e:	2000      	movs	r0, #0
 8087110:	2100      	movs	r1, #0
 8087112:	f504 73a0 	add.w	r3, r4, #320	; 0x140
    ctx->add_len = 0;

    if( iv_len == 12 )
 8087116:	2d0c      	cmp	r5, #12

    memset( ctx->y, 0x00, sizeof(ctx->y) );
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );

    ctx->mode = mode;
    ctx->len = 0;
 8087118:	e9c3 0100 	strd	r0, r1, [r3]
    ctx->add_len = 0;
 808711c:	e9eb 0152 	strd	r0, r1, [fp, #328]!	; 0x148

    if( iv_len == 12 )
 8087120:	d10d      	bne.n	808713e <mbedtls_gcm_starts+0x70>
    {
        memcpy( ctx->y, iv, iv_len );
 8087122:	f8d8 3000 	ldr.w	r3, [r8]
 8087126:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
 808712a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 808712e:	607b      	str	r3, [r7, #4]
 8087130:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8087134:	60bb      	str	r3, [r7, #8]
        ctx->y[15] = 1;
 8087136:	2301      	movs	r3, #1
 8087138:	f884 316f 	strb.w	r3, [r4, #367]	; 0x16f
 808713c:	e03a      	b.n	80871b4 <mbedtls_gcm_starts+0xe6>
    }
    else
    {
        memset( work_buf, 0x00, 16 );
 808713e:	2210      	movs	r2, #16
 8087140:	4649      	mov	r1, r9
 8087142:	a806      	add	r0, sp, #24
 8087144:	f00c ff33 	bl	8093fae <memset>
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
 8087148:	00eb      	lsls	r3, r5, #3
 808714a:	0e1a      	lsrs	r2, r3, #24
 808714c:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8087150:	0c1a      	lsrs	r2, r3, #16
 8087152:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
 8087156:	0a1a      	lsrs	r2, r3, #8
 8087158:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
 808715c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27

        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;
 8087160:	462b      	mov	r3, r5
 8087162:	f204 195f 	addw	r9, r4, #351	; 0x15f
 8087166:	4649      	mov	r1, r9
 8087168:	2d10      	cmp	r5, #16
 808716a:	bf28      	it	cs
 808716c:	2310      	movcs	r3, #16
 808716e:	4642      	mov	r2, r8
 8087170:	4498      	add	r8, r3

            for( i = 0; i < use_len; i++ )
                ctx->y[i] ^= p[i];
 8087172:	f812 eb01 	ldrb.w	lr, [r2], #1
 8087176:	f811 0f01 	ldrb.w	r0, [r1, #1]!
        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;

            for( i = 0; i < use_len; i++ )
 808717a:	4542      	cmp	r2, r8
                ctx->y[i] ^= p[i];
 808717c:	ea8e 0000 	eor.w	r0, lr, r0
 8087180:	7008      	strb	r0, [r1, #0]
        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;

            for( i = 0; i < use_len; i++ )
 8087182:	d1f6      	bne.n	8087172 <mbedtls_gcm_starts+0xa4>
                ctx->y[i] ^= p[i];

            gcm_mult( ctx, ctx->y, ctx->y );
 8087184:	463a      	mov	r2, r7
 8087186:	4639      	mov	r1, r7
 8087188:	4620      	mov	r0, r4
 808718a:	9303      	str	r3, [sp, #12]
 808718c:	f7ff fe34 	bl	8086df8 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
    {
        memset( work_buf, 0x00, 16 );
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );

        p = iv;
        while( iv_len > 0 )
 8087190:	9b03      	ldr	r3, [sp, #12]
 8087192:	1aed      	subs	r5, r5, r3
 8087194:	d1e4      	bne.n	8087160 <mbedtls_gcm_starts+0x92>
            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
            ctx->y[i] ^= work_buf[i];
 8087196:	ab06      	add	r3, sp, #24
 8087198:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 808719c:	5d5b      	ldrb	r3, [r3, r5]

            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
 808719e:	3501      	adds	r5, #1
            ctx->y[i] ^= work_buf[i];
 80871a0:	4053      	eors	r3, r2

            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
 80871a2:	2d10      	cmp	r5, #16
            ctx->y[i] ^= work_buf[i];
 80871a4:	f889 3000 	strb.w	r3, [r9]

            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
 80871a8:	d1f5      	bne.n	8087196 <mbedtls_gcm_starts+0xc8>
            ctx->y[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->y, ctx->y );
 80871aa:	463a      	mov	r2, r7
 80871ac:	4639      	mov	r1, r7
 80871ae:	4620      	mov	r0, r4
 80871b0:	f7ff fe22 	bl	8086df8 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
    }

    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ctx->base_ectr,
 80871b4:	ab05      	add	r3, sp, #20
 80871b6:	9300      	str	r3, [sp, #0]
 80871b8:	2210      	movs	r2, #16
 80871ba:	f504 73a8 	add.w	r3, r4, #336	; 0x150
 80871be:	4639      	mov	r1, r7
 80871c0:	4620      	mov	r0, r4
 80871c2:	f7fb fe33 	bl	8082e2c <mbedtls_cipher_update>
 80871c6:	bb10      	cbnz	r0, 808720e <mbedtls_gcm_starts+0x140>
                             &olen ) ) != 0 )
    {
        return( ret );
    }

    ctx->add_len = add_len;
 80871c8:	f8c4 6148 	str.w	r6, [r4, #328]	; 0x148
 80871cc:	f8cb 0004 	str.w	r0, [fp, #4]
    p = add;
    while( add_len > 0 )
 80871d0:	b1e6      	cbz	r6, 808720c <mbedtls_gcm_starts+0x13e>
 80871d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    {
        use_len = ( add_len < 16 ) ? add_len : 16;
 80871d4:	4635      	mov	r5, r6
 80871d6:	4619      	mov	r1, r3
 80871d8:	2e10      	cmp	r6, #16
 80871da:	bf28      	it	cs
 80871dc:	2510      	movcs	r5, #16
 80871de:	4429      	add	r1, r5
 80871e0:	f204 126f 	addw	r2, r4, #367	; 0x16f
 80871e4:	9114      	str	r1, [sp, #80]	; 0x50

        for( i = 0; i < use_len; i++ )
            ctx->buf[i] ^= p[i];
 80871e6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80871ea:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80871ee:	4041      	eors	r1, r0
 80871f0:	7011      	strb	r1, [r2, #0]
    p = add;
    while( add_len > 0 )
    {
        use_len = ( add_len < 16 ) ? add_len : 16;

        for( i = 0; i < use_len; i++ )
 80871f2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80871f4:	4299      	cmp	r1, r3
 80871f6:	d1f6      	bne.n	80871e6 <mbedtls_gcm_starts+0x118>
            ctx->buf[i] ^= p[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );
 80871f8:	4652      	mov	r2, sl
 80871fa:	4651      	mov	r1, sl
 80871fc:	4620      	mov	r0, r4
 80871fe:	f7ff fdfb 	bl	8086df8 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>

        add_len -= use_len;
 8087202:	1b76      	subs	r6, r6, r5
        return( ret );
    }

    ctx->add_len = add_len;
    p = add;
    while( add_len > 0 )
 8087204:	e7e4      	b.n	80871d0 <mbedtls_gcm_starts+0x102>
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
      ( (uint64_t) iv_len  ) >> 61 != 0 ||
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8087206:	f06f 0013 	mvn.w	r0, #19
 808720a:	e000      	b.n	808720e <mbedtls_gcm_starts+0x140>

        add_len -= use_len;
        p += use_len;
    }

    return( 0 );
 808720c:	4630      	mov	r0, r6
}
 808720e:	b00b      	add	sp, #44	; 0x2c
 8087210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08087214 <mbedtls_gcm_update>:

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
 8087214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8087218:	461f      	mov	r7, r3
 808721a:	b08b      	sub	sp, #44	; 0x2c
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;
 808721c:	2300      	movs	r3, #0

    if( output > input && (size_t) ( output - input ) < length )
 808721e:	4297      	cmp	r7, r2

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
 8087220:	4604      	mov	r4, r0
 8087222:	460e      	mov	r6, r1
 8087224:	4690      	mov	r8, r2
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;
 8087226:	9305      	str	r3, [sp, #20]

    if( output > input && (size_t) ( output - input ) < length )
 8087228:	d902      	bls.n	8087230 <mbedtls_gcm_update+0x1c>
 808722a:	1abb      	subs	r3, r7, r2
 808722c:	428b      	cmp	r3, r1
 808722e:	d35c      	bcc.n	80872ea <mbedtls_gcm_update+0xd6>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */
    if( ctx->len + length < ctx->len ||
 8087230:	4625      	mov	r5, r4
 8087232:	e9f5 0150 	ldrd	r0, r1, [r5, #320]!	; 0x140
 8087236:	1982      	adds	r2, r0, r6
 8087238:	f141 0300 	adc.w	r3, r1, #0
 808723c:	428b      	cmp	r3, r1
 808723e:	bf08      	it	eq
 8087240:	4282      	cmpeq	r2, r0
 8087242:	d352      	bcc.n	80872ea <mbedtls_gcm_update+0xd6>
 8087244:	210f      	movs	r1, #15
 8087246:	f06f 001f 	mvn.w	r0, #31
 808724a:	4299      	cmp	r1, r3
 808724c:	bf08      	it	eq
 808724e:	4290      	cmpeq	r0, r2
 8087250:	d34b      	bcc.n	80872ea <mbedtls_gcm_update+0xd6>
        (uint64_t) ctx->len + length > 0xFFFFFFFE0ull )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    ctx->len += length;
 8087252:	e9c5 2300 	strd	r2, r3, [r5]
 8087256:	f504 73b6 	add.w	r3, r4, #364	; 0x16c
 808725a:	9302      	str	r3, [sp, #8]

        for( i = 16; i > 12; i-- )
            if( ++ctx->y[i - 1] != 0 )
                break;

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 808725c:	f504 73b0 	add.w	r3, r4, #352	; 0x160
 8087260:	f10d 0a18 	add.w	sl, sp, #24
 8087264:	9303      	str	r3, [sp, #12]
    }

    ctx->len += length;

    p = input;
    while( length > 0 )
 8087266:	2e00      	cmp	r6, #0
 8087268:	d042      	beq.n	80872f0 <mbedtls_gcm_update+0xdc>
 808726a:	f504 75b8 	add.w	r5, r4, #368	; 0x170
    {
        use_len = ( length < 16 ) ? length : 16;
 808726e:	462a      	mov	r2, r5
 8087270:	46ab      	mov	fp, r5
 8087272:	2e10      	cmp	r6, #16
 8087274:	46b1      	mov	r9, r6
 8087276:	bf28      	it	cs
 8087278:	f04f 0910 	movcs.w	r9, #16

        for( i = 16; i > 12; i-- )
            if( ++ctx->y[i - 1] != 0 )
 808727c:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 8087280:	3301      	adds	r3, #1
 8087282:	b2db      	uxtb	r3, r3
 8087284:	7013      	strb	r3, [r2, #0]
 8087286:	b913      	cbnz	r3, 808728e <mbedtls_gcm_update+0x7a>
    p = input;
    while( length > 0 )
    {
        use_len = ( length < 16 ) ? length : 16;

        for( i = 16; i > 12; i-- )
 8087288:	9b02      	ldr	r3, [sp, #8]
 808728a:	429a      	cmp	r2, r3
 808728c:	d1f6      	bne.n	808727c <mbedtls_gcm_update+0x68>
            if( ++ctx->y[i - 1] != 0 )
                break;

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 808728e:	ab05      	add	r3, sp, #20
 8087290:	9300      	str	r3, [sp, #0]
 8087292:	2210      	movs	r2, #16
 8087294:	4653      	mov	r3, sl
 8087296:	9903      	ldr	r1, [sp, #12]
 8087298:	4620      	mov	r0, r4
 808729a:	f7fb fdc7 	bl	8082e2c <mbedtls_cipher_update>
 808729e:	bb40      	cbnz	r0, 80872f2 <mbedtls_gcm_update+0xde>
 80872a0:	4642      	mov	r2, r8
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
        {
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
 80872a2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80872a6:	b91b      	cbnz	r3, 80872b0 <mbedtls_gcm_update+0x9c>
                ctx->buf[i] ^= p[i];
 80872a8:	7829      	ldrb	r1, [r5, #0]
 80872aa:	7813      	ldrb	r3, [r2, #0]
 80872ac:	404b      	eors	r3, r1
 80872ae:	702b      	strb	r3, [r5, #0]
            out_p[i] = ectr[i] ^ p[i];
 80872b0:	f812 1b01 	ldrb.w	r1, [r2], #1
 80872b4:	f81a 3000 	ldrb.w	r3, [sl, r0]
 80872b8:	3501      	adds	r5, #1
 80872ba:	404b      	eors	r3, r1
 80872bc:	543b      	strb	r3, [r7, r0]
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
 80872be:	f8d4 1180 	ldr.w	r1, [r4, #384]	; 0x180
                                   &olen ) ) != 0 )
        {
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
 80872c2:	3001      	adds	r0, #1
        {
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
                ctx->buf[i] ^= p[i];
            out_p[i] = ectr[i] ^ p[i];
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
 80872c4:	2901      	cmp	r1, #1
                ctx->buf[i] ^= out_p[i];
 80872c6:	bf02      	ittt	eq
 80872c8:	f815 1c01 	ldrbeq.w	r1, [r5, #-1]
 80872cc:	404b      	eoreq	r3, r1
 80872ce:	f805 3c01 	strbeq.w	r3, [r5, #-1]
                                   &olen ) ) != 0 )
        {
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
 80872d2:	4581      	cmp	r9, r0
 80872d4:	d1e5      	bne.n	80872a2 <mbedtls_gcm_update+0x8e>
            out_p[i] = ectr[i] ^ p[i];
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
                ctx->buf[i] ^= out_p[i];
        }

        gcm_mult( ctx, ctx->buf, ctx->buf );
 80872d6:	465a      	mov	r2, fp
 80872d8:	4659      	mov	r1, fp
 80872da:	4620      	mov	r0, r4
 80872dc:	f7ff fd8c 	bl	8086df8 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>

        length -= use_len;
 80872e0:	ebc9 0606 	rsb	r6, r9, r6
        p += use_len;
 80872e4:	44c8      	add	r8, r9
        out_p += use_len;
 80872e6:	444f      	add	r7, r9
    }

    ctx->len += length;

    p = input;
    while( length > 0 )
 80872e8:	e7bd      	b.n	8087266 <mbedtls_gcm_update+0x52>
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;

    if( output > input && (size_t) ( output - input ) < length )
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 80872ea:	f06f 0013 	mvn.w	r0, #19
 80872ee:	e000      	b.n	80872f2 <mbedtls_gcm_update+0xde>
        length -= use_len;
        p += use_len;
        out_p += use_len;
    }

    return( 0 );
 80872f0:	4630      	mov	r0, r6
}
 80872f2:	b00b      	add	sp, #44	; 0x2c
 80872f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080872f8 <mbedtls_gcm_finish>:

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
 80872f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80872fc:	4688      	mov	r8, r1
    unsigned char work_buf[16];
    size_t i;
    uint64_t orig_len = ctx->len * 8;
 80872fe:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
 8087302:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
 8087306:	00cd      	lsls	r5, r1, #3
    uint64_t orig_add_len = ctx->add_len * 8;
 8087308:	f8d0 114c 	ldr.w	r1, [r0, #332]	; 0x14c
                unsigned char *tag,
                size_t tag_len )
{
    unsigned char work_buf[16];
    size_t i;
    uint64_t orig_len = ctx->len * 8;
 808730c:	ea45 7553 	orr.w	r5, r5, r3, lsr #29
 8087310:	00dc      	lsls	r4, r3, #3
    uint64_t orig_add_len = ctx->add_len * 8;
 8087312:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
 8087316:	00cf      	lsls	r7, r1, #3
 8087318:	ea47 7753 	orr.w	r7, r7, r3, lsr #29
 808731c:	00de      	lsls	r6, r3, #3

    if( tag_len > 16 || tag_len < 4 )
 808731e:	1f13      	subs	r3, r2, #4
 8087320:	2b0c      	cmp	r3, #12
}

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
 8087322:	4681      	mov	r9, r0
 8087324:	4692      	mov	sl, r2
    unsigned char work_buf[16];
    size_t i;
    uint64_t orig_len = ctx->len * 8;
    uint64_t orig_add_len = ctx->add_len * 8;

    if( tag_len > 16 || tag_len < 4 )
 8087326:	d85b      	bhi.n	80873e0 <mbedtls_gcm_finish+0xe8>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    memcpy( tag, ctx->base_ectr, tag_len );
 8087328:	f500 71a8 	add.w	r1, r0, #336	; 0x150
 808732c:	4640      	mov	r0, r8
 808732e:	f00c fe18 	bl	8093f62 <memcpy>

    if( orig_len || orig_add_len )
 8087332:	ea54 0305 	orrs.w	r3, r4, r5
 8087336:	d104      	bne.n	8087342 <mbedtls_gcm_finish+0x4a>
 8087338:	ea56 0307 	orrs.w	r3, r6, r7
 808733c:	d101      	bne.n	8087342 <mbedtls_gcm_finish+0x4a>

        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
    }

    return( 0 );
 808733e:	2000      	movs	r0, #0
 8087340:	e050      	b.n	80873e4 <mbedtls_gcm_finish+0xec>

    memcpy( tag, ctx->base_ectr, tag_len );

    if( orig_len || orig_add_len )
    {
        memset( work_buf, 0x00, 16 );
 8087342:	2210      	movs	r2, #16
 8087344:	2100      	movs	r1, #0
 8087346:	4668      	mov	r0, sp
 8087348:	f00c fe31 	bl	8093fae <memset>

        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 808734c:	0e3b      	lsrs	r3, r7, #24
 808734e:	f88d 3000 	strb.w	r3, [sp]
 8087352:	0c3b      	lsrs	r3, r7, #16
 8087354:	f88d 3001 	strb.w	r3, [sp, #1]
 8087358:	0a3b      	lsrs	r3, r7, #8
 808735a:	f88d 3002 	strb.w	r3, [sp, #2]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 808735e:	0e33      	lsrs	r3, r6, #24
 8087360:	f88d 3004 	strb.w	r3, [sp, #4]
 8087364:	0c33      	lsrs	r3, r6, #16
 8087366:	f88d 3005 	strb.w	r3, [sp, #5]
 808736a:	0a33      	lsrs	r3, r6, #8
 808736c:	f88d 3006 	strb.w	r3, [sp, #6]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 8087370:	0e2b      	lsrs	r3, r5, #24
 8087372:	f88d 3008 	strb.w	r3, [sp, #8]
 8087376:	0c2b      	lsrs	r3, r5, #16
 8087378:	f88d 3009 	strb.w	r3, [sp, #9]
 808737c:	0a2b      	lsrs	r3, r5, #8
 808737e:	f88d 300a 	strb.w	r3, [sp, #10]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
 8087382:	0e23      	lsrs	r3, r4, #24
 8087384:	f88d 300c 	strb.w	r3, [sp, #12]
 8087388:	0c23      	lsrs	r3, r4, #16
 808738a:	f88d 300d 	strb.w	r3, [sp, #13]
 808738e:	f88d 400f 	strb.w	r4, [sp, #15]
 8087392:	0a23      	lsrs	r3, r4, #8
 8087394:	f209 146f 	addw	r4, r9, #367	; 0x16f
 8087398:	4622      	mov	r2, r4
 808739a:	f88d 300e 	strb.w	r3, [sp, #14]

    if( orig_len || orig_add_len )
    {
        memset( work_buf, 0x00, 16 );

        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 808739e:	f88d 7003 	strb.w	r7, [sp, #3]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 80873a2:	f88d 6007 	strb.w	r6, [sp, #7]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 80873a6:	f88d 500b 	strb.w	r5, [sp, #11]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
 80873aa:	2300      	movs	r3, #0
            ctx->buf[i] ^= work_buf[i];
 80873ac:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80873b0:	f81d 1003 	ldrb.w	r1, [sp, r3]
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
 80873b4:	3301      	adds	r3, #1
            ctx->buf[i] ^= work_buf[i];
 80873b6:	4041      	eors	r1, r0
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
 80873b8:	2b10      	cmp	r3, #16
            ctx->buf[i] ^= work_buf[i];
 80873ba:	7011      	strb	r1, [r2, #0]
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
 80873bc:	d1f6      	bne.n	80873ac <mbedtls_gcm_finish+0xb4>
            ctx->buf[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );
 80873be:	f509 72b8 	add.w	r2, r9, #368	; 0x170
 80873c2:	4611      	mov	r1, r2
 80873c4:	4648      	mov	r0, r9
 80873c6:	f7ff fd17 	bl	8086df8 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
 80873ca:	4641      	mov	r1, r8
 80873cc:	44c2      	add	sl, r8

        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
 80873ce:	780a      	ldrb	r2, [r1, #0]
 80873d0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80873d4:	4053      	eors	r3, r2
 80873d6:	f801 3b01 	strb.w	r3, [r1], #1
        for( i = 0; i < 16; i++ )
            ctx->buf[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );

        for( i = 0; i < tag_len; i++ )
 80873da:	4551      	cmp	r1, sl
 80873dc:	d1f7      	bne.n	80873ce <mbedtls_gcm_finish+0xd6>
 80873de:	e7ae      	b.n	808733e <mbedtls_gcm_finish+0x46>
    size_t i;
    uint64_t orig_len = ctx->len * 8;
    uint64_t orig_add_len = ctx->add_len * 8;

    if( tag_len > 16 || tag_len < 4 )
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 80873e0:	f06f 0013 	mvn.w	r0, #19
        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
    }

    return( 0 );
}
 80873e4:	b004      	add	sp, #16
 80873e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080873ea <mbedtls_gcm_crypt_and_tag>:
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 80873ea:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80873ee:	4617      	mov	r7, r2
 80873f0:	461a      	mov	r2, r3
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 80873f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 80873f4:	4604      	mov	r4, r0
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 80873f6:	9301      	str	r3, [sp, #4]
 80873f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 80873fa:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 80873fe:	9300      	str	r3, [sp, #0]
 8087400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 8087402:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8087406:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8087408:	9d10      	ldr	r5, [sp, #64]	; 0x40
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 808740a:	f7ff fe60 	bl	80870ce <mbedtls_gcm_starts>
 808740e:	b970      	cbnz	r0, 808742e <mbedtls_gcm_crypt_and_tag+0x44>
        return( ret );

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
 8087410:	464b      	mov	r3, r9
 8087412:	4642      	mov	r2, r8
 8087414:	4639      	mov	r1, r7
 8087416:	4620      	mov	r0, r4
 8087418:	f7ff fefc 	bl	8087214 <mbedtls_gcm_update>
 808741c:	b938      	cbnz	r0, 808742e <mbedtls_gcm_crypt_and_tag+0x44>
        return( ret );

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 808741e:	4632      	mov	r2, r6
 8087420:	4629      	mov	r1, r5
 8087422:	4620      	mov	r0, r4
        return( ret );

    return( 0 );
}
 8087424:	b003      	add	sp, #12
 8087426:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return( ret );

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
        return( ret );

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 808742a:	f7ff bf65 	b.w	80872f8 <mbedtls_gcm_finish>
        return( ret );

    return( 0 );
}
 808742e:	b003      	add	sp, #12
 8087430:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08087434 <mbedtls_gcm_auth_decrypt>:
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 8087434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8087436:	460e      	mov	r6, r1
 8087438:	b08d      	sub	sp, #52	; 0x34
    int ret;
    unsigned char check_tag[16];
    size_t i;
    int diff;

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 808743a:	9916      	ldr	r1, [sp, #88]	; 0x58
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 808743c:	9d15      	ldr	r5, [sp, #84]	; 0x54
    int ret;
    unsigned char check_tag[16];
    size_t i;
    int diff;

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 808743e:	9103      	str	r1, [sp, #12]
 8087440:	9913      	ldr	r1, [sp, #76]	; 0x4c
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 8087442:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    int ret;
    unsigned char check_tag[16];
    size_t i;
    int diff;

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 8087444:	9102      	str	r1, [sp, #8]
 8087446:	9912      	ldr	r1, [sp, #72]	; 0x48
 8087448:	af08      	add	r7, sp, #32
 808744a:	9101      	str	r1, [sp, #4]
 808744c:	9300      	str	r3, [sp, #0]
 808744e:	9706      	str	r7, [sp, #24]
 8087450:	4613      	mov	r3, r2
 8087452:	9505      	str	r5, [sp, #20]
 8087454:	9404      	str	r4, [sp, #16]
 8087456:	4632      	mov	r2, r6
 8087458:	2100      	movs	r1, #0
 808745a:	f7ff ffc6 	bl	80873ea <mbedtls_gcm_crypt_and_tag>
 808745e:	b998      	cbnz	r0, 8087488 <mbedtls_gcm_auth_decrypt+0x54>
 8087460:	4603      	mov	r3, r0
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 8087462:	42ab      	cmp	r3, r5
 8087464:	d006      	beq.n	8087474 <mbedtls_gcm_auth_decrypt+0x40>
        diff |= tag[i] ^ check_tag[i];
 8087466:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8087468:	5cd1      	ldrb	r1, [r2, r3]
 808746a:	5cfa      	ldrb	r2, [r7, r3]
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 808746c:	3301      	adds	r3, #1
        diff |= tag[i] ^ check_tag[i];
 808746e:	404a      	eors	r2, r1
 8087470:	4310      	orrs	r0, r2
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 8087472:	e7f6      	b.n	8087462 <mbedtls_gcm_auth_decrypt+0x2e>
        diff |= tag[i] ^ check_tag[i];

    if( diff != 0 )
 8087474:	b140      	cbz	r0, 8087488 <mbedtls_gcm_auth_decrypt+0x54>
 8087476:	4426      	add	r6, r4
}
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8087478:	2300      	movs	r3, #0
 808747a:	42a6      	cmp	r6, r4
 808747c:	d002      	beq.n	8087484 <mbedtls_gcm_auth_decrypt+0x50>
 808747e:	7023      	strb	r3, [r4, #0]
 8087480:	3401      	adds	r4, #1
 8087482:	e7fa      	b.n	808747a <mbedtls_gcm_auth_decrypt+0x46>
        diff |= tag[i] ^ check_tag[i];

    if( diff != 0 )
    {
        mbedtls_zeroize( output, length );
        return( MBEDTLS_ERR_GCM_AUTH_FAILED );
 8087484:	f06f 0011 	mvn.w	r0, #17
    }

    return( 0 );
}
 8087488:	b00d      	add	sp, #52	; 0x34
 808748a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808748c <mbedtls_gcm_free>:

void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
{
 808748c:	b510      	push	{r4, lr}
 808748e:	4604      	mov	r4, r0
    mbedtls_cipher_free( &ctx->cipher_ctx );
 8087490:	f7fb fc6c 	bl	8082d6c <mbedtls_cipher_free>
 8087494:	f504 72c4 	add.w	r2, r4, #392	; 0x188
}
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8087498:	2300      	movs	r3, #0
 808749a:	4294      	cmp	r4, r2
 808749c:	d002      	beq.n	80874a4 <mbedtls_gcm_free+0x18>
 808749e:	7023      	strb	r3, [r4, #0]
 80874a0:	3401      	adds	r4, #1
 80874a2:	e7fa      	b.n	808749a <mbedtls_gcm_free+0xe>
 80874a4:	bd10      	pop	{r4, pc}
	...

080874a8 <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 80874a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 80874ac:	2700      	movs	r7, #0
 80874ae:	463c      	mov	r4, r7
 80874b0:	463d      	mov	r5, r7
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 80874b2:	f8dd e01c 	ldr.w	lr, [sp, #28]
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] == '=' && ++j > 2 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 80874b6:	f8df 8118 	ldr.w	r8, [pc, #280]	; 80875d0 <mbedtls_base64_decode+0x128>
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 80874ba:	4575      	cmp	r5, lr
 80874bc:	d22d      	bcs.n	808751a <mbedtls_base64_decode+0x72>
 80874be:	f04f 0c00 	mov.w	ip, #0
    {
        /* Skip spaces before checking for EOL */
        x = 0;
        while( i < slen && src[i] == ' ' )
 80874c2:	5d5e      	ldrb	r6, [r3, r5]
 80874c4:	2e20      	cmp	r6, #32
 80874c6:	d104      	bne.n	80874d2 <mbedtls_base64_decode+0x2a>
        {
            ++i;
 80874c8:	3501      	adds	r5, #1
    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
    {
        /* Skip spaces before checking for EOL */
        x = 0;
        while( i < slen && src[i] == ' ' )
 80874ca:	45ae      	cmp	lr, r5
        {
            ++i;
            ++x;
 80874cc:	f10c 0c01 	add.w	ip, ip, #1
    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
    {
        /* Skip spaces before checking for EOL */
        x = 0;
        while( i < slen && src[i] == ' ' )
 80874d0:	d8f7      	bhi.n	80874c2 <mbedtls_base64_decode+0x1a>
            ++i;
            ++x;
        }

        /* Spaces at end of buffer are OK */
        if( i == slen )
 80874d2:	45ae      	cmp	lr, r5
 80874d4:	d021      	beq.n	808751a <mbedtls_base64_decode+0x72>
            break;

        if( ( slen - i ) >= 2 &&
 80874d6:	ebc5 060e 	rsb	r6, r5, lr
 80874da:	2e01      	cmp	r6, #1
 80874dc:	d906      	bls.n	80874ec <mbedtls_base64_decode+0x44>
 80874de:	5d5e      	ldrb	r6, [r3, r5]
 80874e0:	2e0d      	cmp	r6, #13
 80874e2:	d103      	bne.n	80874ec <mbedtls_base64_decode+0x44>
            src[i] == '\r' && src[i + 1] == '\n' )
 80874e4:	195e      	adds	r6, r3, r5
 80874e6:	7876      	ldrb	r6, [r6, #1]
 80874e8:	2e0a      	cmp	r6, #10
 80874ea:	d014      	beq.n	8087516 <mbedtls_base64_decode+0x6e>
            continue;

        if( src[i] == '\n' )
 80874ec:	5d5e      	ldrb	r6, [r3, r5]
 80874ee:	2e0a      	cmp	r6, #10
 80874f0:	d011      	beq.n	8087516 <mbedtls_base64_decode+0x6e>
            continue;

        /* Space inside a line is an error */
        if( x != 0 )
 80874f2:	f1bc 0f00 	cmp.w	ip, #0
 80874f6:	d166      	bne.n	80875c6 <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] == '=' && ++j > 2 )
 80874f8:	2e3d      	cmp	r6, #61	; 0x3d
 80874fa:	d102      	bne.n	8087502 <mbedtls_base64_decode+0x5a>
 80874fc:	3701      	adds	r7, #1
 80874fe:	2f02      	cmp	r7, #2
 8087500:	d861      	bhi.n	80875c6 <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 8087502:	f016 0f80 	tst.w	r6, #128	; 0x80
 8087506:	d15e      	bne.n	80875c6 <mbedtls_base64_decode+0x11e>
 8087508:	f818 6006 	ldrb.w	r6, [r8, r6]
 808750c:	2e7f      	cmp	r6, #127	; 0x7f
 808750e:	d05a      	beq.n	80875c6 <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( base64_dec_map[src[i]] < 64 && j != 0 )
 8087510:	2e3f      	cmp	r6, #63	; 0x3f
 8087512:	d956      	bls.n	80875c2 <mbedtls_base64_decode+0x11a>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        n++;
 8087514:	3401      	adds	r4, #1
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 8087516:	3501      	adds	r5, #1
 8087518:	e7cf      	b.n	80874ba <mbedtls_base64_decode+0x12>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        n++;
    }

    if( n == 0 )
 808751a:	b91c      	cbnz	r4, 8087524 <mbedtls_base64_decode+0x7c>
    {
        *olen = 0;
 808751c:	6014      	str	r4, [r2, #0]
        return( 0 );
 808751e:	4620      	mov	r0, r4
 8087520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    /* The following expression is to calculate the following formula without
     * risk of integer overflow in n:
     *     n = ( ( n * 6 ) + 7 ) >> 3;
     */
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
    n -= j;
 8087524:	f004 0e07 	and.w	lr, r4, #7
 8087528:	2606      	movs	r6, #6
 808752a:	08e4      	lsrs	r4, r4, #3
 808752c:	fb06 fe0e 	mul.w	lr, r6, lr
 8087530:	4366      	muls	r6, r4
 8087532:	f10e 0e07 	add.w	lr, lr, #7
 8087536:	1bf6      	subs	r6, r6, r7
 8087538:	eb06 04de 	add.w	r4, r6, lr, lsr #3

    if( dst == NULL || dlen < n )
 808753c:	b160      	cbz	r0, 8087558 <mbedtls_base64_decode+0xb0>
 808753e:	428c      	cmp	r4, r1
 8087540:	d80a      	bhi.n	8087558 <mbedtls_base64_decode+0xb0>
 8087542:	2600      	movs	r6, #0
 8087544:	eb03 0e05 	add.w	lr, r3, r5
 8087548:	4601      	mov	r1, r0
 808754a:	2503      	movs	r5, #3
 808754c:	4634      	mov	r4, r6
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 808754e:	f8df c080 	ldr.w	ip, [pc, #128]	; 80875d0 <mbedtls_base64_decode+0x128>
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 8087552:	f8df 8080 	ldr.w	r8, [pc, #128]	; 80875d4 <mbedtls_base64_decode+0x12c>
 8087556:	e00f      	b.n	8087578 <mbedtls_base64_decode+0xd0>
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
    n -= j;

    if( dst == NULL || dlen < n )
    {
        *olen = n;
 8087558:	6014      	str	r4, [r2, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
 808755a:	f06f 0029 	mvn.w	r0, #41	; 0x29
 808755e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 8087562:	f813 9b01 	ldrb.w	r9, [r3], #1
 8087566:	f1a9 070a 	sub.w	r7, r9, #10
 808756a:	b2ff      	uxtb	r7, r7
 808756c:	2f16      	cmp	r7, #22
 808756e:	d806      	bhi.n	808757e <mbedtls_base64_decode+0xd6>
 8087570:	fa28 f707 	lsr.w	r7, r8, r7
 8087574:	07ff      	lsls	r7, r7, #31
 8087576:	d502      	bpl.n	808757e <mbedtls_base64_decode+0xd6>
    {
        *olen = n;
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 8087578:	4573      	cmp	r3, lr
 808757a:	d1f2      	bne.n	8087562 <mbedtls_base64_decode+0xba>
 808757c:	e01c      	b.n	80875b8 <mbedtls_base64_decode+0x110>
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 808757e:	f81c 7009 	ldrb.w	r7, [ip, r9]
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
 8087582:	3401      	adds	r4, #1
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 8087584:	2f40      	cmp	r7, #64	; 0x40
 8087586:	bf08      	it	eq
 8087588:	3d01      	subeq	r5, #1
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 808758a:	f007 073f 	and.w	r7, r7, #63	; 0x3f

        if( ++n == 4 )
 808758e:	2c04      	cmp	r4, #4
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 8087590:	ea47 1686 	orr.w	r6, r7, r6, lsl #6

        if( ++n == 4 )
 8087594:	d1f0      	bne.n	8087578 <mbedtls_base64_decode+0xd0>
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 8087596:	b16d      	cbz	r5, 80875b4 <mbedtls_base64_decode+0x10c>
 8087598:	0c34      	lsrs	r4, r6, #16
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 808759a:	2d01      	cmp	r5, #1
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 808759c:	700c      	strb	r4, [r1, #0]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 808759e:	d101      	bne.n	80875a4 <mbedtls_base64_decode+0xfc>
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 80875a0:	3101      	adds	r1, #1
 80875a2:	e007      	b.n	80875b4 <mbedtls_base64_decode+0x10c>
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
            if( j > 2 ) *p++ = (unsigned char)( x       );
 80875a4:	2d02      	cmp	r5, #2

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 80875a6:	ea4f 2416 	mov.w	r4, r6, lsr #8
 80875aa:	704c      	strb	r4, [r1, #1]
            if( j > 2 ) *p++ = (unsigned char)( x       );
 80875ac:	bf16      	itet	ne
 80875ae:	708e      	strbne	r6, [r1, #2]

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 80875b0:	3102      	addeq	r1, #2
            if( j > 2 ) *p++ = (unsigned char)( x       );
 80875b2:	3103      	addne	r1, #3
        j -= ( base64_dec_map[*src] == 64 );
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
        {
            n = 0;
 80875b4:	2400      	movs	r4, #0
 80875b6:	e7df      	b.n	8087578 <mbedtls_base64_decode+0xd0>
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
            if( j > 2 ) *p++ = (unsigned char)( x       );
        }
    }

    *olen = p - dst;
 80875b8:	1a08      	subs	r0, r1, r0
 80875ba:	6010      	str	r0, [r2, #0]

    return( 0 );
 80875bc:	2000      	movs	r0, #0
 80875be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( base64_dec_map[src[i]] < 64 && j != 0 )
 80875c2:	2f00      	cmp	r7, #0
 80875c4:	d0a6      	beq.n	8087514 <mbedtls_base64_decode+0x6c>
        if( src[i] == '\n' )
            continue;

        /* Space inside a line is an error */
        if( x != 0 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 80875c6:	f06f 002b 	mvn.w	r0, #43	; 0x2b
 80875ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80875ce:	bf00      	nop
 80875d0:	08097bb8 	.word	0x08097bb8
 80875d4:	00400009 	.word	0x00400009

080875d8 <mbedtls_md_info_from_type>:
#endif
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
 80875d8:	3804      	subs	r0, #4
 80875da:	b2c0      	uxtb	r0, r0
 80875dc:	2804      	cmp	r0, #4
 80875de:	bf9a      	itte	ls
 80875e0:	4b02      	ldrls	r3, [pc, #8]	; (80875ec <mbedtls_md_info_from_type+0x14>)
 80875e2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80875e6:	2000      	movhi	r0, #0
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
    }
}
 80875e8:	4770      	bx	lr
 80875ea:	bf00      	nop
 80875ec:	08097c38 	.word	0x08097c38

080875f0 <mbedtls_md_init>:

void mbedtls_md_init( mbedtls_md_context_t *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_md_context_t ) );
 80875f0:	2300      	movs	r3, #0
 80875f2:	6003      	str	r3, [r0, #0]
 80875f4:	6043      	str	r3, [r0, #4]
 80875f6:	6083      	str	r3, [r0, #8]
 80875f8:	4770      	bx	lr

080875fa <mbedtls_md_free>:
}

void mbedtls_md_free( mbedtls_md_context_t *ctx )
{
 80875fa:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->md_info == NULL )
 80875fc:	4604      	mov	r4, r0
 80875fe:	b1e0      	cbz	r0, 808763a <mbedtls_md_free+0x40>
 8087600:	6803      	ldr	r3, [r0, #0]
 8087602:	b1d3      	cbz	r3, 808763a <mbedtls_md_free+0x40>
        return;

    if( ctx->md_ctx != NULL )
 8087604:	6840      	ldr	r0, [r0, #4]
 8087606:	b108      	cbz	r0, 808760c <mbedtls_md_free+0x12>
        ctx->md_info->ctx_free_func( ctx->md_ctx );
 8087608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808760a:	4798      	blx	r3

    if( ctx->hmac_ctx != NULL )
 808760c:	68a3      	ldr	r3, [r4, #8]
 808760e:	b163      	cbz	r3, 808762a <mbedtls_md_free+0x30>
    {
        mbedtls_zeroize( ctx->hmac_ctx, 2 * ctx->md_info->block_size );
 8087610:	6822      	ldr	r2, [r4, #0]
#include <stdio.h>
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8087612:	2100      	movs	r1, #0
 8087614:	68d2      	ldr	r2, [r2, #12]
 8087616:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 808761a:	429a      	cmp	r2, r3
 808761c:	d002      	beq.n	8087624 <mbedtls_md_free+0x2a>
 808761e:	7019      	strb	r1, [r3, #0]
 8087620:	3301      	adds	r3, #1
 8087622:	e7fa      	b.n	808761a <mbedtls_md_free+0x20>
        ctx->md_info->ctx_free_func( ctx->md_ctx );

    if( ctx->hmac_ctx != NULL )
    {
        mbedtls_zeroize( ctx->hmac_ctx, 2 * ctx->md_info->block_size );
        mbedtls_free( ctx->hmac_ctx );
 8087624:	68a0      	ldr	r0, [r4, #8]
 8087626:	f009 fd97 	bl	8091158 <free>
 808762a:	f104 020c 	add.w	r2, r4, #12
#include <stdio.h>
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808762e:	2300      	movs	r3, #0
 8087630:	4294      	cmp	r4, r2
 8087632:	d002      	beq.n	808763a <mbedtls_md_free+0x40>
 8087634:	7023      	strb	r3, [r4, #0]
 8087636:	3401      	adds	r4, #1
 8087638:	e7fa      	b.n	8087630 <mbedtls_md_free+0x36>
 808763a:	bd10      	pop	{r4, pc}

0808763c <mbedtls_md_setup>:
    return mbedtls_md_setup( ctx, md_info, 1 );
}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
 808763c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808763e:	4605      	mov	r5, r0
 8087640:	4617      	mov	r7, r2
    if( md_info == NULL || ctx == NULL )
 8087642:	460c      	mov	r4, r1
 8087644:	b199      	cbz	r1, 808766e <mbedtls_md_setup+0x32>
 8087646:	b190      	cbz	r0, 808766e <mbedtls_md_setup+0x32>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
 8087648:	6a0b      	ldr	r3, [r1, #32]
 808764a:	4798      	blx	r3
 808764c:	4606      	mov	r6, r0
 808764e:	6068      	str	r0, [r5, #4]
 8087650:	b178      	cbz	r0, 8087672 <mbedtls_md_setup+0x36>
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );

    if( hmac != 0 )
 8087652:	b14f      	cbz	r7, 8087668 <mbedtls_md_setup+0x2c>
    {
        ctx->hmac_ctx = mbedtls_calloc( 2, md_info->block_size );
 8087654:	68e1      	ldr	r1, [r4, #12]
 8087656:	2002      	movs	r0, #2
 8087658:	f00c fb5c 	bl	8093d14 <calloc>
 808765c:	60a8      	str	r0, [r5, #8]
        if( ctx->hmac_ctx == NULL )
 808765e:	b918      	cbnz	r0, 8087668 <mbedtls_md_setup+0x2c>
        {
            md_info->ctx_free_func( ctx->md_ctx );
 8087660:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8087662:	4630      	mov	r0, r6
 8087664:	4798      	blx	r3
 8087666:	e004      	b.n	8087672 <mbedtls_md_setup+0x36>
            return( MBEDTLS_ERR_MD_ALLOC_FAILED );
        }
    }

    ctx->md_info = md_info;
 8087668:	602c      	str	r4, [r5, #0]

    return( 0 );
 808766a:	2000      	movs	r0, #0
 808766c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
    if( md_info == NULL || ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 808766e:	4802      	ldr	r0, [pc, #8]	; (8087678 <mbedtls_md_setup+0x3c>)
 8087670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );
 8087672:	4802      	ldr	r0, [pc, #8]	; (808767c <mbedtls_md_setup+0x40>)
    }

    ctx->md_info = md_info;

    return( 0 );
}
 8087674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8087676:	bf00      	nop
 8087678:	ffffaf00 	.word	0xffffaf00
 808767c:	ffffae80 	.word	0xffffae80

08087680 <mbedtls_md_starts>:

int mbedtls_md_starts( mbedtls_md_context_t *ctx )
{
    if( ctx == NULL || ctx->md_info == NULL )
 8087680:	b120      	cbz	r0, 808768c <mbedtls_md_starts+0xc>
 8087682:	6803      	ldr	r3, [r0, #0]
 8087684:	b113      	cbz	r3, 808768c <mbedtls_md_starts+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->starts_func( ctx->md_ctx ) );
 8087686:	691b      	ldr	r3, [r3, #16]
 8087688:	6840      	ldr	r0, [r0, #4]
 808768a:	4718      	bx	r3
}
 808768c:	4800      	ldr	r0, [pc, #0]	; (8087690 <mbedtls_md_starts+0x10>)
 808768e:	4770      	bx	lr
 8087690:	ffffaf00 	.word	0xffffaf00

08087694 <mbedtls_md_update>:

int mbedtls_md_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL )
 8087694:	b120      	cbz	r0, 80876a0 <mbedtls_md_update+0xc>
 8087696:	6803      	ldr	r3, [r0, #0]
 8087698:	b113      	cbz	r3, 80876a0 <mbedtls_md_update+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 808769a:	695b      	ldr	r3, [r3, #20]
 808769c:	6840      	ldr	r0, [r0, #4]
 808769e:	4718      	bx	r3
}
 80876a0:	4800      	ldr	r0, [pc, #0]	; (80876a4 <mbedtls_md_update+0x10>)
 80876a2:	4770      	bx	lr
 80876a4:	ffffaf00 	.word	0xffffaf00

080876a8 <mbedtls_md_finish>:

int mbedtls_md_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
    if( ctx == NULL || ctx->md_info == NULL )
 80876a8:	b120      	cbz	r0, 80876b4 <mbedtls_md_finish+0xc>
 80876aa:	6803      	ldr	r3, [r0, #0]
 80876ac:	b113      	cbz	r3, 80876b4 <mbedtls_md_finish+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
 80876ae:	699b      	ldr	r3, [r3, #24]
 80876b0:	6840      	ldr	r0, [r0, #4]
 80876b2:	4718      	bx	r3
}
 80876b4:	4800      	ldr	r0, [pc, #0]	; (80876b8 <mbedtls_md_finish+0x10>)
 80876b6:	4770      	bx	lr
 80876b8:	ffffaf00 	.word	0xffffaf00

080876bc <mbedtls_md>:

int mbedtls_md( const mbedtls_md_info_t *md_info, const unsigned char *input, size_t ilen,
            unsigned char *output )
{
 80876bc:	b430      	push	{r4, r5}
 80876be:	460d      	mov	r5, r1
 80876c0:	4611      	mov	r1, r2
    if( md_info == NULL )
 80876c2:	b128      	cbz	r0, 80876d0 <mbedtls_md+0x14>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( md_info->digest_func( input, ilen, output ) );
 80876c4:	69c4      	ldr	r4, [r0, #28]
 80876c6:	461a      	mov	r2, r3
 80876c8:	4628      	mov	r0, r5
 80876ca:	4623      	mov	r3, r4
}
 80876cc:	bc30      	pop	{r4, r5}
            unsigned char *output )
{
    if( md_info == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( md_info->digest_func( input, ilen, output ) );
 80876ce:	4718      	bx	r3
}
 80876d0:	4801      	ldr	r0, [pc, #4]	; (80876d8 <mbedtls_md+0x1c>)
 80876d2:	bc30      	pop	{r4, r5}
 80876d4:	4770      	bx	lr
 80876d6:	bf00      	nop
 80876d8:	ffffaf00 	.word	0xffffaf00

080876dc <mbedtls_md_hmac_starts>:
    return( ret );
}
#endif /* MBEDTLS_FS_IO */

int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )
{
 80876dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80876e0:	460d      	mov	r5, r1
 80876e2:	b090      	sub	sp, #64	; 0x40
 80876e4:	4617      	mov	r7, r2
    int ret;
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 80876e6:	4604      	mov	r4, r0
 80876e8:	2800      	cmp	r0, #0
 80876ea:	d050      	beq.n	808778e <mbedtls_md_hmac_starts+0xb2>
 80876ec:	6803      	ldr	r3, [r0, #0]
 80876ee:	2b00      	cmp	r3, #0
 80876f0:	d04d      	beq.n	808778e <mbedtls_md_hmac_starts+0xb2>
 80876f2:	6882      	ldr	r2, [r0, #8]
 80876f4:	2a00      	cmp	r2, #0
 80876f6:	d04a      	beq.n	808778e <mbedtls_md_hmac_starts+0xb2>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( keylen > (size_t) ctx->md_info->block_size )
 80876f8:	68da      	ldr	r2, [r3, #12]
 80876fa:	42ba      	cmp	r2, r7
 80876fc:	d215      	bcs.n	808772a <mbedtls_md_hmac_starts+0x4e>
    {
        if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 80876fe:	691b      	ldr	r3, [r3, #16]
 8087700:	6840      	ldr	r0, [r0, #4]
 8087702:	4798      	blx	r3
 8087704:	2800      	cmp	r0, #0
 8087706:	d139      	bne.n	808777c <mbedtls_md_hmac_starts+0xa0>
            goto cleanup;
        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
 8087708:	6823      	ldr	r3, [r4, #0]
 808770a:	463a      	mov	r2, r7
 808770c:	695b      	ldr	r3, [r3, #20]
 808770e:	4629      	mov	r1, r5
 8087710:	6860      	ldr	r0, [r4, #4]
 8087712:	4798      	blx	r3
 8087714:	2800      	cmp	r0, #0
 8087716:	d131      	bne.n	808777c <mbedtls_md_hmac_starts+0xa0>
            goto cleanup;
        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
 8087718:	6823      	ldr	r3, [r4, #0]
 808771a:	4669      	mov	r1, sp
 808771c:	699b      	ldr	r3, [r3, #24]
 808771e:	6860      	ldr	r0, [r4, #4]
 8087720:	4798      	blx	r3
 8087722:	bb58      	cbnz	r0, 808777c <mbedtls_md_hmac_starts+0xa0>
            goto cleanup;

        keylen = ctx->md_info->size;
        key = sum;
 8087724:	466d      	mov	r5, sp
        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
            goto cleanup;
        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
            goto cleanup;

        keylen = ctx->md_info->size;
 8087726:	6823      	ldr	r3, [r4, #0]
 8087728:	689f      	ldr	r7, [r3, #8]
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 808772a:	6823      	ldr	r3, [r4, #0]

        keylen = ctx->md_info->size;
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
 808772c:	68a6      	ldr	r6, [r4, #8]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 808772e:	68da      	ldr	r2, [r3, #12]

    memset( ipad, 0x36, ctx->md_info->block_size );
 8087730:	2136      	movs	r1, #54	; 0x36
 8087732:	4630      	mov	r0, r6
        keylen = ctx->md_info->size;
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8087734:	eb06 0802 	add.w	r8, r6, r2

    memset( ipad, 0x36, ctx->md_info->block_size );
 8087738:	f00c fc39 	bl	8093fae <memset>
    memset( opad, 0x5C, ctx->md_info->block_size );
 808773c:	6823      	ldr	r3, [r4, #0]
 808773e:	215c      	movs	r1, #92	; 0x5c
 8087740:	68da      	ldr	r2, [r3, #12]
 8087742:	4640      	mov	r0, r8
 8087744:	f00c fc33 	bl	8093fae <memset>

    for( i = 0; i < keylen; i++ )
 8087748:	2300      	movs	r3, #0
 808774a:	429f      	cmp	r7, r3
 808774c:	d00b      	beq.n	8087766 <mbedtls_md_hmac_starts+0x8a>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 808774e:	5cf1      	ldrb	r1, [r6, r3]
 8087750:	5cea      	ldrb	r2, [r5, r3]
 8087752:	404a      	eors	r2, r1
 8087754:	54f2      	strb	r2, [r6, r3]
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 8087756:	f818 1003 	ldrb.w	r1, [r8, r3]
 808775a:	5cea      	ldrb	r2, [r5, r3]
 808775c:	404a      	eors	r2, r1
 808775e:	f808 2003 	strb.w	r2, [r8, r3]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
 8087762:	3301      	adds	r3, #1
 8087764:	e7f1      	b.n	808774a <mbedtls_md_hmac_starts+0x6e>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
    }

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 8087766:	6823      	ldr	r3, [r4, #0]
 8087768:	6860      	ldr	r0, [r4, #4]
 808776a:	691b      	ldr	r3, [r3, #16]
 808776c:	4798      	blx	r3
 808776e:	b928      	cbnz	r0, 808777c <mbedtls_md_hmac_starts+0xa0>
        goto cleanup;
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, ipad,
 8087770:	6823      	ldr	r3, [r4, #0]
 8087772:	4631      	mov	r1, r6
 8087774:	695d      	ldr	r5, [r3, #20]
 8087776:	68da      	ldr	r2, [r3, #12]
 8087778:	6860      	ldr	r0, [r4, #4]
 808777a:	47a8      	blx	r5
 808777c:	2300      	movs	r3, #0
#include <stdio.h>
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808777e:	4619      	mov	r1, r3
 8087780:	eb0d 0203 	add.w	r2, sp, r3
 8087784:	3301      	adds	r3, #1
 8087786:	2b41      	cmp	r3, #65	; 0x41
 8087788:	d002      	beq.n	8087790 <mbedtls_md_hmac_starts+0xb4>
 808778a:	7011      	strb	r1, [r2, #0]
 808778c:	e7f8      	b.n	8087780 <mbedtls_md_hmac_starts+0xa4>
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 808778e:	4802      	ldr	r0, [pc, #8]	; (8087798 <mbedtls_md_hmac_starts+0xbc>)

cleanup:
    mbedtls_zeroize( sum, sizeof( sum ) );

    return( ret );
}
 8087790:	b010      	add	sp, #64	; 0x40
 8087792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8087796:	bf00      	nop
 8087798:	ffffaf00 	.word	0xffffaf00

0808779c <mbedtls_md_hmac_update>:

int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
 808779c:	b410      	push	{r4}
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 808779e:	b138      	cbz	r0, 80877b0 <mbedtls_md_hmac_update+0x14>
 80877a0:	6803      	ldr	r3, [r0, #0]
 80877a2:	b12b      	cbz	r3, 80877b0 <mbedtls_md_hmac_update+0x14>
 80877a4:	6884      	ldr	r4, [r0, #8]
 80877a6:	b11c      	cbz	r4, 80877b0 <mbedtls_md_hmac_update+0x14>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 80877a8:	695b      	ldr	r3, [r3, #20]
 80877aa:	6840      	ldr	r0, [r0, #4]
}
 80877ac:	bc10      	pop	{r4}
int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 80877ae:	4718      	bx	r3
}
 80877b0:	4801      	ldr	r0, [pc, #4]	; (80877b8 <mbedtls_md_hmac_update+0x1c>)
 80877b2:	bc10      	pop	{r4}
 80877b4:	4770      	bx	lr
 80877b6:	bf00      	nop
 80877b8:	ffffaf00 	.word	0xffffaf00

080877bc <mbedtls_md_hmac_finish>:

int mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
 80877bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80877c0:	460d      	mov	r5, r1
 80877c2:	b090      	sub	sp, #64	; 0x40
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 80877c4:	4604      	mov	r4, r0
 80877c6:	b318      	cbz	r0, 8087810 <mbedtls_md_hmac_finish+0x54>
 80877c8:	6803      	ldr	r3, [r0, #0]
 80877ca:	b30b      	cbz	r3, 8087810 <mbedtls_md_hmac_finish+0x54>
 80877cc:	6886      	ldr	r6, [r0, #8]
 80877ce:	b1fe      	cbz	r6, 8087810 <mbedtls_md_hmac_finish+0x54>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 80877d0:	68df      	ldr	r7, [r3, #12]

    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
 80877d2:	4669      	mov	r1, sp
 80877d4:	699b      	ldr	r3, [r3, #24]
 80877d6:	6840      	ldr	r0, [r0, #4]
 80877d8:	4798      	blx	r3
 80877da:	b9d0      	cbnz	r0, 8087812 <mbedtls_md_hmac_finish+0x56>
        return( ret );
    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 80877dc:	6823      	ldr	r3, [r4, #0]
 80877de:	6860      	ldr	r0, [r4, #4]
 80877e0:	691b      	ldr	r3, [r3, #16]
 80877e2:	4798      	blx	r3
 80877e4:	b9a8      	cbnz	r0, 8087812 <mbedtls_md_hmac_finish+0x56>
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, opad,
 80877e6:	6823      	ldr	r3, [r4, #0]
 80877e8:	19f1      	adds	r1, r6, r7
 80877ea:	f8d3 8014 	ldr.w	r8, [r3, #20]
 80877ee:	68da      	ldr	r2, [r3, #12]
 80877f0:	6860      	ldr	r0, [r4, #4]
 80877f2:	47c0      	blx	r8
 80877f4:	b968      	cbnz	r0, 8087812 <mbedtls_md_hmac_finish+0x56>
                                           ctx->md_info->block_size ) ) != 0 )
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
 80877f6:	6823      	ldr	r3, [r4, #0]
 80877f8:	4669      	mov	r1, sp
 80877fa:	695e      	ldr	r6, [r3, #20]
 80877fc:	689a      	ldr	r2, [r3, #8]
 80877fe:	6860      	ldr	r0, [r4, #4]
 8087800:	47b0      	blx	r6
 8087802:	b930      	cbnz	r0, 8087812 <mbedtls_md_hmac_finish+0x56>
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
 8087804:	6823      	ldr	r3, [r4, #0]
 8087806:	4629      	mov	r1, r5
 8087808:	699b      	ldr	r3, [r3, #24]
 808780a:	6860      	ldr	r0, [r4, #4]
 808780c:	4798      	blx	r3
 808780e:	e000      	b.n	8087812 <mbedtls_md_hmac_finish+0x56>
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8087810:	4801      	ldr	r0, [pc, #4]	; (8087818 <mbedtls_md_hmac_finish+0x5c>)
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
}
 8087812:	b010      	add	sp, #64	; 0x40
 8087814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8087818:	ffffaf00 	.word	0xffffaf00

0808781c <mbedtls_md_hmac_reset>:

int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )
{
 808781c:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 808781e:	4604      	mov	r4, r0
 8087820:	b180      	cbz	r0, 8087844 <mbedtls_md_hmac_reset+0x28>
 8087822:	6803      	ldr	r3, [r0, #0]
 8087824:	b173      	cbz	r3, 8087844 <mbedtls_md_hmac_reset+0x28>
 8087826:	6885      	ldr	r5, [r0, #8]
 8087828:	b165      	cbz	r5, 8087844 <mbedtls_md_hmac_reset+0x28>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 808782a:	691b      	ldr	r3, [r3, #16]
 808782c:	6840      	ldr	r0, [r0, #4]
 808782e:	4798      	blx	r3
 8087830:	b948      	cbnz	r0, 8087846 <mbedtls_md_hmac_reset+0x2a>
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
 8087832:	6823      	ldr	r3, [r4, #0]
                                       ctx->md_info->block_size ) );
 8087834:	4629      	mov	r1, r5
 8087836:	695e      	ldr	r6, [r3, #20]
 8087838:	68da      	ldr	r2, [r3, #12]
 808783a:	6860      	ldr	r0, [r4, #4]
 808783c:	4633      	mov	r3, r6
}
 808783e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
                                       ctx->md_info->block_size ) );
 8087842:	4718      	bx	r3
{
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8087844:	4800      	ldr	r0, [pc, #0]	; (8087848 <mbedtls_md_hmac_reset+0x2c>)

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
                                       ctx->md_info->block_size ) );
}
 8087846:	bd70      	pop	{r4, r5, r6, pc}
 8087848:	ffffaf00 	.word	0xffffaf00

0808784c <mbedtls_md_process>:
    return( ret );
}

int mbedtls_md_process( mbedtls_md_context_t *ctx, const unsigned char *data )
{
    if( ctx == NULL || ctx->md_info == NULL )
 808784c:	b120      	cbz	r0, 8087858 <mbedtls_md_process+0xc>
 808784e:	6803      	ldr	r3, [r0, #0]
 8087850:	b113      	cbz	r3, 8087858 <mbedtls_md_process+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->process_func( ctx->md_ctx, data ) );
 8087852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8087854:	6840      	ldr	r0, [r0, #4]
 8087856:	4718      	bx	r3
}
 8087858:	4800      	ldr	r0, [pc, #0]	; (808785c <mbedtls_md_process+0x10>)
 808785a:	4770      	bx	lr
 808785c:	ffffaf00 	.word	0xffffaf00

08087860 <mbedtls_md_get_size>:

unsigned char mbedtls_md_get_size( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
 8087860:	b100      	cbz	r0, 8087864 <mbedtls_md_get_size+0x4>
        return( 0 );

    return md_info->size;
 8087862:	7a00      	ldrb	r0, [r0, #8]
}
 8087864:	4770      	bx	lr

08087866 <_ZL15mbedtls_zeroizePvj>:
#include <dirent.h>
#endif /* !_WIN32 || EFIX64 || EFI32 */
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 8087866:	4401      	add	r1, r0
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8087868:	2300      	movs	r3, #0
 808786a:	4288      	cmp	r0, r1
 808786c:	d002      	beq.n	8087874 <_ZL15mbedtls_zeroizePvj+0xe>
 808786e:	7003      	strb	r3, [r0, #0]
 8087870:	3001      	adds	r0, #1
 8087872:	e7fa      	b.n	808786a <_ZL15mbedtls_zeroizePvj+0x4>
 8087874:	4770      	bx	lr

08087876 <_ZL15x509_memcasecmpPKvS0_j>:

/*
 * Like memcmp, but case-insensitive and always returns -1 if different
 */
static int x509_memcasecmp( const void *s1, const void *s2, size_t len )
{
 8087876:	b530      	push	{r4, r5, lr}
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = (unsigned char *)s1, *n2 = (unsigned char *)s2;

    for( i = 0; i < len; i++ )
 8087878:	2400      	movs	r4, #0
 808787a:	4294      	cmp	r4, r2
 808787c:	d00c      	beq.n	8087898 <_ZL15x509_memcasecmpPKvS0_j+0x22>
    {
        diff = n1[i] ^ n2[i];
 808787e:	5d03      	ldrb	r3, [r0, r4]
 8087880:	5d0d      	ldrb	r5, [r1, r4]

        if( diff == 0 )
 8087882:	405d      	eors	r5, r3
 8087884:	d006      	beq.n	8087894 <_ZL15x509_memcasecmpPKvS0_j+0x1e>
            continue;

        if( diff == 32 &&
 8087886:	2d20      	cmp	r5, #32
 8087888:	d108      	bne.n	808789c <_ZL15x509_memcasecmpPKvS0_j+0x26>
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
 808788a:	f023 0320 	bic.w	r3, r3, #32
 808788e:	3b41      	subs	r3, #65	; 0x41
 8087890:	2b19      	cmp	r3, #25
 8087892:	d803      	bhi.n	808789c <_ZL15x509_memcasecmpPKvS0_j+0x26>
{
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = (unsigned char *)s1, *n2 = (unsigned char *)s2;

    for( i = 0; i < len; i++ )
 8087894:	3401      	adds	r4, #1
 8087896:	e7f0      	b.n	808787a <_ZL15x509_memcasecmpPKvS0_j+0x4>
        }

        return( -1 );
    }

    return( 0 );
 8087898:	2000      	movs	r0, #0
 808789a:	bd30      	pop	{r4, r5, pc}
              ( n1[i] >= 'A' && n1[i] <= 'Z' ) ) )
        {
            continue;
        }

        return( -1 );
 808789c:	f04f 30ff 	mov.w	r0, #4294967295
    }

    return( 0 );
}
 80878a0:	bd30      	pop	{r4, r5, pc}

080878a2 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>:
 * or space folding.)
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
 80878a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80878a4:	4605      	mov	r5, r0
 80878a6:	460c      	mov	r4, r1
    /* Avoid recursion, it might not be optimised by the compiler */
    while( a != NULL || b != NULL )
 80878a8:	b925      	cbnz	r5, 80878b4 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x12>
 80878aa:	1c20      	adds	r0, r4, #0
 80878ac:	bf18      	it	ne
 80878ae:	2001      	movne	r0, #1
 80878b0:	4240      	negs	r0, r0
 80878b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    {
        if( a == NULL || b == NULL )
 80878b4:	2c00      	cmp	r4, #0
 80878b6:	d031      	beq.n	808791c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
 80878b8:	682a      	ldr	r2, [r5, #0]
 80878ba:	6823      	ldr	r3, [r4, #0]
 80878bc:	429a      	cmp	r2, r3
 80878be:	d12d      	bne.n	808791c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            a->oid.len != b->oid.len ||
 80878c0:	686a      	ldr	r2, [r5, #4]
    {
        if( a == NULL || b == NULL )
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
 80878c2:	6863      	ldr	r3, [r4, #4]
 80878c4:	429a      	cmp	r2, r3
 80878c6:	d129      	bne.n	808791c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            a->oid.len != b->oid.len ||
            memcmp( a->oid.p, b->oid.p, b->oid.len ) != 0 )
 80878c8:	68a1      	ldr	r1, [r4, #8]
 80878ca:	68a8      	ldr	r0, [r5, #8]
 80878cc:	f00c fb3a 	bl	8093f44 <memcmp>
        if( a == NULL || b == NULL )
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
            a->oid.len != b->oid.len ||
 80878d0:	bb20      	cbnz	r0, 808791c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
    if( a->tag == b->tag &&
 80878d2:	68ef      	ldr	r7, [r5, #12]
 80878d4:	68e6      	ldr	r6, [r4, #12]
 80878d6:	42b7      	cmp	r7, r6
 80878d8:	d108      	bne.n	80878ec <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x4a>
        a->len == b->len &&
 80878da:	692a      	ldr	r2, [r5, #16]
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
    if( a->tag == b->tag &&
 80878dc:	6923      	ldr	r3, [r4, #16]
 80878de:	429a      	cmp	r2, r3
 80878e0:	d104      	bne.n	80878ec <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x4a>
        a->len == b->len &&
        memcmp( a->p, b->p, b->len ) == 0 )
 80878e2:	6961      	ldr	r1, [r4, #20]
 80878e4:	6968      	ldr	r0, [r5, #20]
 80878e6:	f00c fb2d 	bl	8093f44 <memcmp>
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
    if( a->tag == b->tag &&
        a->len == b->len &&
 80878ea:	b180      	cbz	r0, 808790e <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x6c>
        return( 0 );
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
        a->len == b->len &&
 80878ec:	2f0c      	cmp	r7, #12
 80878ee:	d001      	beq.n	80878f4 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x52>
        memcmp( a->p, b->p, b->len ) == 0 )
    {
        return( 0 );
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 80878f0:	2f13      	cmp	r7, #19
 80878f2:	d113      	bne.n	808791c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
 80878f4:	2e0c      	cmp	r6, #12
 80878f6:	d001      	beq.n	80878fc <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x5a>
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 80878f8:	2e13      	cmp	r6, #19
 80878fa:	d10f      	bne.n	808791c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
        a->len == b->len &&
 80878fc:	692a      	ldr	r2, [r5, #16]
    {
        return( 0 );
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 80878fe:	6923      	ldr	r3, [r4, #16]
 8087900:	429a      	cmp	r2, r3
 8087902:	d10b      	bne.n	808791c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
        a->len == b->len &&
        x509_memcasecmp( a->p, b->p, b->len ) == 0 )
 8087904:	6961      	ldr	r1, [r4, #20]
 8087906:	6968      	ldr	r0, [r5, #20]
 8087908:	f7ff ffb5 	bl	8087876 <_ZL15x509_memcasecmpPKvS0_j>
        {
            return( -1 );
        }

        /* value */
        if( x509_string_cmp( &a->val, &b->val ) != 0 )
 808790c:	b930      	cbnz	r0, 808791c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            return( -1 );

        /* structure of the list of sets */
        if( a->next_merged != b->next_merged )
 808790e:	7f2a      	ldrb	r2, [r5, #28]
 8087910:	7f23      	ldrb	r3, [r4, #28]
 8087912:	429a      	cmp	r2, r3
 8087914:	d102      	bne.n	808791c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            return( -1 );

        a = a->next;
 8087916:	69ad      	ldr	r5, [r5, #24]
        b = b->next;
 8087918:	69a4      	ldr	r4, [r4, #24]
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
    /* Avoid recursion, it might not be optimised by the compiler */
    while( a != NULL || b != NULL )
 808791a:	e7c5      	b.n	80878a8 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x6>
    {
        if( a == NULL || b == NULL )
            return( -1 );
 808791c:	f04f 30ff 	mov.w	r0, #4294967295
        b = b->next;
    }

    /* a == NULL == b */
    return( 0 );
}
 8087920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08087922 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf>:

/*
 * Return 0 if name matches wildcard, -1 otherwise
 */
static int x509_check_wildcard( const char *cn, mbedtls_x509_buf *name )
{
 8087922:	b570      	push	{r4, r5, r6, lr}
 8087924:	460e      	mov	r6, r1
 8087926:	4604      	mov	r4, r0
    size_t i;
    size_t cn_idx = 0, cn_len = strlen( cn );
 8087928:	f00c fb77 	bl	809401a <strlen>

    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
 808792c:	6875      	ldr	r5, [r6, #4]
 808792e:	2d02      	cmp	r5, #2
 8087930:	d91e      	bls.n	8087970 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x4e>
 8087932:	68b6      	ldr	r6, [r6, #8]
 8087934:	7833      	ldrb	r3, [r6, #0]
 8087936:	2b2a      	cmp	r3, #42	; 0x2a
 8087938:	d11a      	bne.n	8087970 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x4e>
 808793a:	7873      	ldrb	r3, [r6, #1]
 808793c:	2b2e      	cmp	r3, #46	; 0x2e
 808793e:	d117      	bne.n	8087970 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x4e>
 8087940:	4623      	mov	r3, r4
 8087942:	2200      	movs	r2, #0
        return( 0 );

    for( i = 0; i < cn_len; ++i )
 8087944:	4282      	cmp	r2, r0
 8087946:	d015      	beq.n	8087974 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x52>
    {
        if( cn[i] == '.' )
 8087948:	4619      	mov	r1, r3
 808794a:	780c      	ldrb	r4, [r1, #0]
 808794c:	3301      	adds	r3, #1
 808794e:	2c2e      	cmp	r4, #46	; 0x2e
 8087950:	d001      	beq.n	8087956 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x34>
    size_t cn_idx = 0, cn_len = strlen( cn );

    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
        return( 0 );

    for( i = 0; i < cn_len; ++i )
 8087952:	3201      	adds	r2, #1
 8087954:	e7f6      	b.n	8087944 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x22>
            cn_idx = i;
            break;
        }
    }

    if( cn_idx == 0 )
 8087956:	b16a      	cbz	r2, 8087974 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x52>
        return( -1 );

    if( cn_len - cn_idx == name->len - 1 &&
 8087958:	1a82      	subs	r2, r0, r2
 808795a:	3d01      	subs	r5, #1
 808795c:	42aa      	cmp	r2, r5
 808795e:	d109      	bne.n	8087974 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x52>
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
 8087960:	1c70      	adds	r0, r6, #1
 8087962:	f7ff ff88 	bl	8087876 <_ZL15x509_memcasecmpPKvS0_j>
    }

    if( cn_idx == 0 )
        return( -1 );

    if( cn_len - cn_idx == name->len - 1 &&
 8087966:	3000      	adds	r0, #0
 8087968:	bf18      	it	ne
 808796a:	2001      	movne	r0, #1
 808796c:	4240      	negs	r0, r0
 808796e:	bd70      	pop	{r4, r5, r6, pc}
{
    size_t i;
    size_t cn_idx = 0, cn_len = strlen( cn );

    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
        return( 0 );
 8087970:	2000      	movs	r0, #0
 8087972:	bd70      	pop	{r4, r5, r6, pc}
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
    {
        return( 0 );
    }

    return( -1 );
 8087974:	f04f 30ff 	mov.w	r0, #4294967295
}
 8087978:	bd70      	pop	{r4, r5, r6, pc}

0808797a <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>:
 * X.509 v2/v3 unique identifier (not parsed)
 */
static int x509_get_uid( unsigned char **p,
                         const unsigned char *end,
                         mbedtls_x509_buf *uid, int n )
{
 808797a:	b570      	push	{r4, r5, r6, lr}
 808797c:	4615      	mov	r5, r2
    int ret;

    if( *p == end )
 808797e:	6802      	ldr	r2, [r0, #0]
 * X.509 v2/v3 unique identifier (not parsed)
 */
static int x509_get_uid( unsigned char **p,
                         const unsigned char *end,
                         mbedtls_x509_buf *uid, int n )
{
 8087980:	4604      	mov	r4, r0
    int ret;

    if( *p == end )
 8087982:	428a      	cmp	r2, r1
 8087984:	d00b      	beq.n	808799e <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0x24>
        return( 0 );

    uid->tag = **p;
 8087986:	7816      	ldrb	r6, [r2, #0]
 8087988:	462a      	mov	r2, r5

    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 808798a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    int ret;

    if( *p == end )
        return( 0 );

    uid->tag = **p;
 808798e:	f842 6b04 	str.w	r6, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 8087992:	f7fb fc9f 	bl	80832d4 <mbedtls_asn1_get_tag>
 8087996:	b120      	cbz	r0, 80879a2 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0x28>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | n ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8087998:	f110 0f62 	cmn.w	r0, #98	; 0x62
 808799c:	d107      	bne.n	80879ae <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0x34>
            return( 0 );
 808799e:	2000      	movs	r0, #0
 80879a0:	bd70      	pop	{r4, r5, r6, pc}

        return( ret );
    }

    uid->p = *p;
 80879a2:	6823      	ldr	r3, [r4, #0]
 80879a4:	60ab      	str	r3, [r5, #8]
    *p += uid->len;
 80879a6:	6822      	ldr	r2, [r4, #0]
 80879a8:	686b      	ldr	r3, [r5, #4]
 80879aa:	4413      	add	r3, r2
 80879ac:	6023      	str	r3, [r4, #0]

    return( 0 );
}
 80879ae:	bd70      	pop	{r4, r5, r6, pc}

080879b0 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>:
static int x509_profile_check_key( const mbedtls_x509_crt_profile *profile,
                                   mbedtls_pk_type_t pk_alg,
                                   const mbedtls_pk_context *pk )
{
#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
 80879b0:	2901      	cmp	r1, #1

/*
 * Check key against profile
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_key( const mbedtls_x509_crt_profile *profile,
 80879b2:	b510      	push	{r4, lr}
 80879b4:	4604      	mov	r4, r0
                                   mbedtls_pk_type_t pk_alg,
                                   const mbedtls_pk_context *pk )
{
#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
 80879b6:	d001      	beq.n	80879bc <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3+0xc>
 80879b8:	2906      	cmp	r1, #6
 80879ba:	d109      	bne.n	80879d0 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3+0x20>
    {
        if( mbedtls_pk_get_bitlen( pk ) >= profile->rsa_min_bitlen )
 80879bc:	4610      	mov	r0, r2
 80879be:	f004 fcbb 	bl	808c338 <mbedtls_pk_get_bitlen>
 80879c2:	6823      	ldr	r3, [r4, #0]
 80879c4:	4298      	cmp	r0, r3
 80879c6:	f04f 30ff 	mov.w	r0, #4294967295
 80879ca:	bf28      	it	cs
 80879cc:	2000      	movcs	r0, #0
 80879ce:	bd10      	pop	{r4, pc}

        return( -1 );
    }
#endif

    return( -1 );
 80879d0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80879d4:	bd10      	pop	{r4, pc}
	...

080879d8 <mbedtls_x509_crt_info>:
 */
#define BEFORE_COLON    18
#define BC              "18"
int mbedtls_x509_crt_info( char *buf, size_t size, const char *prefix,
                   const mbedtls_x509_crt *crt )
{
 80879d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80879dc:	4682      	mov	sl, r0
 80879de:	b08d      	sub	sp, #52	; 0x34
 80879e0:	460f      	mov	r7, r1
 80879e2:	4691      	mov	r9, r2
    char key_size_str[BEFORE_COLON];

    p = buf;
    n = size;

    if( NULL == crt )
 80879e4:	4698      	mov	r8, r3
 80879e6:	b94b      	cbnz	r3, 80879fc <mbedtls_x509_crt_info+0x24>
    {
        ret = mbedtls_snprintf( p, n, "\nCertificate is uninitialised!\n" );
 80879e8:	4aa5      	ldr	r2, [pc, #660]	; (8087c80 <mbedtls_x509_crt_info+0x2a8>)
 80879ea:	f009 fbd5 	bl	8091198 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80879ee:	2800      	cmp	r0, #0
 80879f0:	f2c0 82d6 	blt.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 80879f4:	4287      	cmp	r7, r0
 80879f6:	f200 82d4 	bhi.w	8087fa2 <mbedtls_x509_crt_info+0x5ca>
 80879fa:	e2d1      	b.n	8087fa0 <mbedtls_x509_crt_info+0x5c8>

        return( (int) ( size - n ) );
    }

    ret = mbedtls_snprintf( p, n, "%scert. version     : %d\n",
                               prefix, crt->version );
 80879fc:	699b      	ldr	r3, [r3, #24]
 80879fe:	9300      	str	r3, [sp, #0]
 8087a00:	4613      	mov	r3, r2
 8087a02:	4aa0      	ldr	r2, [pc, #640]	; (8087c84 <mbedtls_x509_crt_info+0x2ac>)
 8087a04:	f009 fbc8 	bl	8091198 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087a08:	2800      	cmp	r0, #0
 8087a0a:	f2c0 82c9 	blt.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087a0e:	4287      	cmp	r7, r0
 8087a10:	f240 82c6 	bls.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087a14:	1a3e      	subs	r6, r7, r0
 8087a16:	4482      	add	sl, r0
    ret = mbedtls_snprintf( p, n, "%sserial number     : ",
                               prefix );
 8087a18:	464b      	mov	r3, r9
 8087a1a:	4a9b      	ldr	r2, [pc, #620]	; (8087c88 <mbedtls_x509_crt_info+0x2b0>)
 8087a1c:	4631      	mov	r1, r6
 8087a1e:	4650      	mov	r0, sl
 8087a20:	f009 fbba 	bl	8091198 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087a24:	2800      	cmp	r0, #0
 8087a26:	f2c0 82bb 	blt.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087a2a:	4286      	cmp	r6, r0
 8087a2c:	f240 82b8 	bls.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087a30:	1a36      	subs	r6, r6, r0
 8087a32:	4482      	add	sl, r0

    ret = mbedtls_x509_serial_gets( p, n, &crt->serial );
 8087a34:	f108 021c 	add.w	r2, r8, #28
 8087a38:	4631      	mov	r1, r6
 8087a3a:	4650      	mov	r0, sl
 8087a3c:	f7fe fdca 	bl	80865d4 <mbedtls_x509_serial_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087a40:	2800      	cmp	r0, #0
 8087a42:	f2c0 82ad 	blt.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087a46:	4286      	cmp	r6, r0
 8087a48:	f240 82aa 	bls.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087a4c:	1a36      	subs	r6, r6, r0
 8087a4e:	4482      	add	sl, r0

    ret = mbedtls_snprintf( p, n, "\n%sissuer name       : ", prefix );
 8087a50:	464b      	mov	r3, r9
 8087a52:	4a8e      	ldr	r2, [pc, #568]	; (8087c8c <mbedtls_x509_crt_info+0x2b4>)
 8087a54:	4631      	mov	r1, r6
 8087a56:	4650      	mov	r0, sl
 8087a58:	f009 fb9e 	bl	8091198 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087a5c:	2800      	cmp	r0, #0
 8087a5e:	f2c0 829f 	blt.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087a62:	4286      	cmp	r6, r0
 8087a64:	f240 829c 	bls.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087a68:	1a36      	subs	r6, r6, r0
 8087a6a:	4482      	add	sl, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->issuer  );
 8087a6c:	f108 024c 	add.w	r2, r8, #76	; 0x4c
 8087a70:	4631      	mov	r1, r6
 8087a72:	4650      	mov	r0, sl
 8087a74:	f7fe fd2c 	bl	80864d0 <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087a78:	2800      	cmp	r0, #0
 8087a7a:	f2c0 8291 	blt.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087a7e:	4286      	cmp	r6, r0
 8087a80:	f240 828e 	bls.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087a84:	1a36      	subs	r6, r6, r0
 8087a86:	4482      	add	sl, r0

    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
 8087a88:	464b      	mov	r3, r9
 8087a8a:	4a81      	ldr	r2, [pc, #516]	; (8087c90 <mbedtls_x509_crt_info+0x2b8>)
 8087a8c:	4631      	mov	r1, r6
 8087a8e:	4650      	mov	r0, sl
 8087a90:	f009 fb82 	bl	8091198 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087a94:	2800      	cmp	r0, #0
 8087a96:	f2c0 8283 	blt.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087a9a:	4286      	cmp	r6, r0
 8087a9c:	f240 8280 	bls.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087aa0:	1a36      	subs	r6, r6, r0
 8087aa2:	4482      	add	sl, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
 8087aa4:	f108 026c 	add.w	r2, r8, #108	; 0x6c
 8087aa8:	4631      	mov	r1, r6
 8087aaa:	4650      	mov	r0, sl
 8087aac:	f7fe fd10 	bl	80864d0 <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087ab0:	2800      	cmp	r0, #0
 8087ab2:	f2c0 8275 	blt.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087ab6:	4286      	cmp	r6, r0
 8087ab8:	f240 8272 	bls.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>

    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
 8087abc:	f8d8 30a0 	ldr.w	r3, [r8, #160]	; 0xa0
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087ac0:	1a36      	subs	r6, r6, r0

    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
 8087ac2:	9305      	str	r3, [sp, #20]
 8087ac4:	f8d8 309c 	ldr.w	r3, [r8, #156]	; 0x9c
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087ac8:	4482      	add	sl, r0

    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
 8087aca:	9304      	str	r3, [sp, #16]
 8087acc:	f8d8 3098 	ldr.w	r3, [r8, #152]	; 0x98
 8087ad0:	4a70      	ldr	r2, [pc, #448]	; (8087c94 <mbedtls_x509_crt_info+0x2bc>)
 8087ad2:	9303      	str	r3, [sp, #12]
 8087ad4:	f8d8 3094 	ldr.w	r3, [r8, #148]	; 0x94
 8087ad8:	4631      	mov	r1, r6
 8087ada:	9302      	str	r3, [sp, #8]
 8087adc:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 8087ae0:	4650      	mov	r0, sl
 8087ae2:	9301      	str	r3, [sp, #4]
 8087ae4:	f8d8 308c 	ldr.w	r3, [r8, #140]	; 0x8c
 8087ae8:	9300      	str	r3, [sp, #0]
 8087aea:	464b      	mov	r3, r9
 8087aec:	f009 fb54 	bl	8091198 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087af0:	2800      	cmp	r0, #0
 8087af2:	f2c0 8255 	blt.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087af6:	4286      	cmp	r6, r0
 8087af8:	f240 8252 	bls.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>

    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_to.year, crt->valid_to.mon,
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
 8087afc:	f8d8 30b8 	ldr.w	r3, [r8, #184]	; 0xb8
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087b00:	1a36      	subs	r6, r6, r0

    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_to.year, crt->valid_to.mon,
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
 8087b02:	9305      	str	r3, [sp, #20]
 8087b04:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087b08:	4482      	add	sl, r0

    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_to.year, crt->valid_to.mon,
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
 8087b0a:	9304      	str	r3, [sp, #16]
 8087b0c:	f8d8 30b0 	ldr.w	r3, [r8, #176]	; 0xb0
 8087b10:	4a61      	ldr	r2, [pc, #388]	; (8087c98 <mbedtls_x509_crt_info+0x2c0>)
 8087b12:	9303      	str	r3, [sp, #12]
 8087b14:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
 8087b18:	4631      	mov	r1, r6
 8087b1a:	9302      	str	r3, [sp, #8]
 8087b1c:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
 8087b20:	4650      	mov	r0, sl
 8087b22:	9301      	str	r3, [sp, #4]
 8087b24:	f8d8 30a4 	ldr.w	r3, [r8, #164]	; 0xa4
 8087b28:	9300      	str	r3, [sp, #0]
 8087b2a:	464b      	mov	r3, r9
 8087b2c:	f009 fb34 	bl	8091198 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087b30:	2800      	cmp	r0, #0
 8087b32:	f2c0 8235 	blt.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087b36:	4286      	cmp	r6, r0
 8087b38:	f240 8232 	bls.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087b3c:	1a36      	subs	r6, r6, r0
 8087b3e:	4482      	add	sl, r0

    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
 8087b40:	464b      	mov	r3, r9
 8087b42:	4a56      	ldr	r2, [pc, #344]	; (8087c9c <mbedtls_x509_crt_info+0x2c4>)
 8087b44:	4631      	mov	r1, r6
 8087b46:	4650      	mov	r0, sl
 8087b48:	f009 fb26 	bl	8091198 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087b4c:	2800      	cmp	r0, #0
 8087b4e:	f2c0 8227 	blt.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087b52:	4286      	cmp	r6, r0
 8087b54:	f240 8224 	bls.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
                             crt->sig_md, crt->sig_opts );
 8087b58:	f8d8 212c 	ldr.w	r2, [r8, #300]	; 0x12c
 8087b5c:	f898 3129 	ldrb.w	r3, [r8, #297]	; 0x129
 8087b60:	9201      	str	r2, [sp, #4]
 8087b62:	f898 2128 	ldrb.w	r2, [r8, #296]	; 0x128
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087b66:	1a36      	subs	r6, r6, r0
 8087b68:	4482      	add	sl, r0

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
                             crt->sig_md, crt->sig_opts );
 8087b6a:	9200      	str	r2, [sp, #0]
 8087b6c:	4631      	mov	r1, r6
 8087b6e:	f108 0228 	add.w	r2, r8, #40	; 0x28
 8087b72:	4650      	mov	r0, sl
 8087b74:	f7fe fd78 	bl	8086668 <mbedtls_x509_sig_alg_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087b78:	1e05      	subs	r5, r0, #0
 8087b7a:	f2c0 8211 	blt.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087b7e:	42ae      	cmp	r6, r5
 8087b80:	f240 820e 	bls.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>

    /* Key size */
    if( ( ret = mbedtls_x509_key_size_helper( key_size_str, BEFORE_COLON,
 8087b84:	f108 0bbc 	add.w	fp, r8, #188	; 0xbc
 8087b88:	4658      	mov	r0, fp
 8087b8a:	f004 fc39 	bl	808c400 <mbedtls_pk_get_name>
 8087b8e:	ac07      	add	r4, sp, #28
 8087b90:	4602      	mov	r2, r0
 8087b92:	2112      	movs	r1, #18
 8087b94:	4620      	mov	r0, r4
 8087b96:	f7fe fd8f 	bl	80866b8 <mbedtls_x509_key_size_helper>
 8087b9a:	2800      	cmp	r0, #0
 8087b9c:	f040 8201 	bne.w	8087fa2 <mbedtls_x509_crt_info+0x5ca>
    {
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
 8087ba0:	4658      	mov	r0, fp
 8087ba2:	f004 fbc9 	bl	808c338 <mbedtls_pk_get_bitlen>
    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
                             crt->sig_md, crt->sig_opts );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087ba6:	1b76      	subs	r6, r6, r5
 8087ba8:	4455      	add	r5, sl
    {
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
 8087baa:	9001      	str	r0, [sp, #4]
 8087bac:	9400      	str	r4, [sp, #0]
 8087bae:	464b      	mov	r3, r9
 8087bb0:	4a3b      	ldr	r2, [pc, #236]	; (8087ca0 <mbedtls_x509_crt_info+0x2c8>)
 8087bb2:	4631      	mov	r1, r6
 8087bb4:	4628      	mov	r0, r5
 8087bb6:	f009 faef 	bl	8091198 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087bba:	2800      	cmp	r0, #0
 8087bbc:	f2c0 81f0 	blt.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087bc0:	4286      	cmp	r6, r0
 8087bc2:	f240 81ed 	bls.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>

    /*
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 8087bc6:	f8d8 30f8 	ldr.w	r3, [r8, #248]	; 0xf8
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087bca:	1a34      	subs	r4, r6, r0

    /*
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 8087bcc:	05db      	lsls	r3, r3, #23
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087bce:	4405      	add	r5, r0

    /*
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 8087bd0:	d527      	bpl.n	8087c22 <mbedtls_x509_crt_info+0x24a>
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
 8087bd2:	f8d8 10fc 	ldr.w	r1, [r8, #252]	; 0xfc
 8087bd6:	4a33      	ldr	r2, [pc, #204]	; (8087ca4 <mbedtls_x509_crt_info+0x2cc>)
 8087bd8:	4b33      	ldr	r3, [pc, #204]	; (8087ca8 <mbedtls_x509_crt_info+0x2d0>)
                        crt->ca_istrue ? "true" : "false" );
 8087bda:	4628      	mov	r0, r5
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
 8087bdc:	2900      	cmp	r1, #0
 8087bde:	bf18      	it	ne
 8087be0:	4613      	movne	r3, r2
                        crt->ca_istrue ? "true" : "false" );
 8087be2:	4a32      	ldr	r2, [pc, #200]	; (8087cac <mbedtls_x509_crt_info+0x2d4>)
 8087be4:	9300      	str	r3, [sp, #0]
 8087be6:	4621      	mov	r1, r4
 8087be8:	464b      	mov	r3, r9
 8087bea:	f009 fad5 	bl	8091198 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8087bee:	2800      	cmp	r0, #0
 8087bf0:	f2c0 81d6 	blt.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087bf4:	4284      	cmp	r4, r0
 8087bf6:	f240 81d3 	bls.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>

        if( crt->max_pathlen > 0 )
 8087bfa:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
                        crt->ca_istrue ? "true" : "false" );
        MBEDTLS_X509_SAFE_SNPRINTF;
 8087bfe:	1a24      	subs	r4, r4, r0

        if( crt->max_pathlen > 0 )
 8087c00:	2b00      	cmp	r3, #0

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
                        crt->ca_istrue ? "true" : "false" );
        MBEDTLS_X509_SAFE_SNPRINTF;
 8087c02:	4405      	add	r5, r0

        if( crt->max_pathlen > 0 )
 8087c04:	dd0d      	ble.n	8087c22 <mbedtls_x509_crt_info+0x24a>
        {
            ret = mbedtls_snprintf( p, n, ", max_pathlen=%d", crt->max_pathlen - 1 );
 8087c06:	3b01      	subs	r3, #1
 8087c08:	4a29      	ldr	r2, [pc, #164]	; (8087cb0 <mbedtls_x509_crt_info+0x2d8>)
 8087c0a:	4621      	mov	r1, r4
 8087c0c:	4628      	mov	r0, r5
 8087c0e:	f009 fac3 	bl	8091198 <snprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
 8087c12:	2800      	cmp	r0, #0
 8087c14:	f2c0 81c4 	blt.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087c18:	4284      	cmp	r4, r0
 8087c1a:	f240 81c1 	bls.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087c1e:	1a24      	subs	r4, r4, r0
 8087c20:	4405      	add	r5, r0
        }
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 8087c22:	f8d8 30f8 	ldr.w	r3, [r8, #248]	; 0xf8
 8087c26:	069e      	lsls	r6, r3, #26
 8087c28:	d54e      	bpl.n	8087cc8 <mbedtls_x509_crt_info+0x2f0>
    {
        ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
 8087c2a:	464b      	mov	r3, r9
 8087c2c:	4a21      	ldr	r2, [pc, #132]	; (8087cb4 <mbedtls_x509_crt_info+0x2dc>)
 8087c2e:	4621      	mov	r1, r4
 8087c30:	4628      	mov	r0, r5
 8087c32:	f009 fab1 	bl	8091198 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8087c36:	2800      	cmp	r0, #0
 8087c38:	f2c0 81b2 	blt.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087c3c:	42a0      	cmp	r0, r4
 8087c3e:	f080 81af 	bcs.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
{
    size_t i;
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = subject_alt_name;
    const char *sep = "";
 8087c42:	4e1d      	ldr	r6, [pc, #116]	; (8087cb8 <mbedtls_x509_crt_info+0x2e0>)
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
    {
        ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
 8087c44:	1a24      	subs	r4, r4, r0
 8087c46:	4405      	add	r5, r0

        if( ( ret = x509_info_subject_alt_name( &p, &n,
 8087c48:	f108 02e8 	add.w	r2, r8, #232	; 0xe8
    size_t i;
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = subject_alt_name;
    const char *sep = "";
    size_t sep_len = 0;
 8087c4c:	2000      	movs	r0, #0

    while( cur != NULL )
    {
        if( cur->buf.len + sep_len >= n )
 8087c4e:	6851      	ldr	r1, [r2, #4]
 8087c50:	2300      	movs	r3, #0
 8087c52:	4401      	add	r1, r0
 8087c54:	42a1      	cmp	r1, r4
 8087c56:	d301      	bcc.n	8087c5c <mbedtls_x509_crt_info+0x284>
        {
            *p = '\0';
 8087c58:	702b      	strb	r3, [r5, #0]
 8087c5a:	e1a1      	b.n	8087fa0 <mbedtls_x509_crt_info+0x5c8>
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
        }

        n -= cur->buf.len + sep_len;
 8087c5c:	1a64      	subs	r4, r4, r1
        for( i = 0; i < sep_len; i++ )
 8087c5e:	4283      	cmp	r3, r0
 8087c60:	d003      	beq.n	8087c6a <mbedtls_x509_crt_info+0x292>
            *p++ = sep[i];
 8087c62:	5cf1      	ldrb	r1, [r6, r3]
 8087c64:	54e9      	strb	r1, [r5, r3]
            *p = '\0';
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
        }

        n -= cur->buf.len + sep_len;
        for( i = 0; i < sep_len; i++ )
 8087c66:	3301      	adds	r3, #1
 8087c68:	e7f9      	b.n	8087c5e <mbedtls_x509_crt_info+0x286>
 8087c6a:	441d      	add	r5, r3
 8087c6c:	4628      	mov	r0, r5
            *p++ = sep[i];
        for( i = 0; i < cur->buf.len; i++ )
 8087c6e:	6851      	ldr	r1, [r2, #4]
 8087c70:	1a2b      	subs	r3, r5, r0
 8087c72:	4299      	cmp	r1, r3
 8087c74:	d922      	bls.n	8087cbc <mbedtls_x509_crt_info+0x2e4>
            *p++ = cur->buf.p[i];
 8087c76:	6891      	ldr	r1, [r2, #8]
 8087c78:	5ccb      	ldrb	r3, [r1, r3]
 8087c7a:	f805 3b01 	strb.w	r3, [r5], #1
 8087c7e:	e7f6      	b.n	8087c6e <mbedtls_x509_crt_info+0x296>
 8087c80:	08097c67 	.word	0x08097c67
 8087c84:	08097c87 	.word	0x08097c87
 8087c88:	08097ca1 	.word	0x08097ca1
 8087c8c:	08097cb8 	.word	0x08097cb8
 8087c90:	08097cd0 	.word	0x08097cd0
 8087c94:	08097ce8 	.word	0x08097ce8
 8087c98:	08097d1d 	.word	0x08097d1d
 8087c9c:	08097d52 	.word	0x08097d52
 8087ca0:	08097d6a 	.word	0x08097d6a
 8087ca4:	08097c5c 	.word	0x08097c5c
 8087ca8:	08097c61 	.word	0x08097c61
 8087cac:	08097d7c 	.word	0x08097d7c
 8087cb0:	08097d99 	.word	0x08097d99
 8087cb4:	08097daa 	.word	0x08097daa
 8087cb8:	08096b58 	.word	0x08096b58

        sep = ", ";
        sep_len = 2;

        cur = cur->next;
 8087cbc:	68d2      	ldr	r2, [r2, #12]
            *p++ = sep[i];
        for( i = 0; i < cur->buf.len; i++ )
            *p++ = cur->buf.p[i];

        sep = ", ";
        sep_len = 2;
 8087cbe:	2002      	movs	r0, #2
        for( i = 0; i < sep_len; i++ )
            *p++ = sep[i];
        for( i = 0; i < cur->buf.len; i++ )
            *p++ = cur->buf.p[i];

        sep = ", ";
 8087cc0:	4eb9      	ldr	r6, [pc, #740]	; (8087fa8 <mbedtls_x509_crt_info+0x5d0>)
    char *p = *buf;
    const mbedtls_x509_sequence *cur = subject_alt_name;
    const char *sep = "";
    size_t sep_len = 0;

    while( cur != NULL )
 8087cc2:	2a00      	cmp	r2, #0
 8087cc4:	d1c3      	bne.n	8087c4e <mbedtls_x509_crt_info+0x276>
        sep_len = 2;

        cur = cur->next;
    }

    *p = '\0';
 8087cc6:	702a      	strb	r2, [r5, #0]
        if( ( ret = x509_info_subject_alt_name( &p, &n,
                                            &crt->subject_alt_names ) ) != 0 )
            return( ret );
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
 8087cc8:	f8d8 30f8 	ldr.w	r3, [r8, #248]	; 0xf8
 8087ccc:	03d8      	lsls	r0, r3, #15
 8087cce:	f140 8090 	bpl.w	8087df2 <mbedtls_x509_crt_info+0x41a>
    {
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
 8087cd2:	464b      	mov	r3, r9
 8087cd4:	4ab5      	ldr	r2, [pc, #724]	; (8087fac <mbedtls_x509_crt_info+0x5d4>)
 8087cd6:	4621      	mov	r1, r4
 8087cd8:	4628      	mov	r0, r5
 8087cda:	f009 fa5d 	bl	8091198 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8087cde:	2800      	cmp	r0, #0
 8087ce0:	f2c0 815e 	blt.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087ce4:	42a0      	cmp	r0, r4
 8087ce6:	f080 815b 	bcs.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>

        if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
 8087cea:	f898 6118 	ldrb.w	r6, [r8, #280]	; 0x118
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
    {
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
 8087cee:	1a24      	subs	r4, r4, r0
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 8087cf0:	0631      	lsls	r1, r6, #24
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
    {
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
 8087cf2:	4405      	add	r5, r0
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 8087cf4:	4bae      	ldr	r3, [pc, #696]	; (8087fb0 <mbedtls_x509_crt_info+0x5d8>)
 8087cf6:	d50d      	bpl.n	8087d14 <mbedtls_x509_crt_info+0x33c>
 8087cf8:	4aae      	ldr	r2, [pc, #696]	; (8087fb4 <mbedtls_x509_crt_info+0x5dc>)
 8087cfa:	4621      	mov	r1, r4
 8087cfc:	4628      	mov	r0, r5
 8087cfe:	f009 fa4b 	bl	8091198 <snprintf>
 8087d02:	2800      	cmp	r0, #0
 8087d04:	f2c0 814c 	blt.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087d08:	4284      	cmp	r4, r0
 8087d0a:	f240 8149 	bls.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087d0e:	4ba6      	ldr	r3, [pc, #664]	; (8087fa8 <mbedtls_x509_crt_info+0x5d0>)
 8087d10:	1a24      	subs	r4, r4, r0
 8087d12:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_SERVER,         "SSL Server" );
 8087d14:	0672      	lsls	r2, r6, #25
 8087d16:	d50d      	bpl.n	8087d34 <mbedtls_x509_crt_info+0x35c>
 8087d18:	4aa7      	ldr	r2, [pc, #668]	; (8087fb8 <mbedtls_x509_crt_info+0x5e0>)
 8087d1a:	4621      	mov	r1, r4
 8087d1c:	4628      	mov	r0, r5
 8087d1e:	f009 fa3b 	bl	8091198 <snprintf>
 8087d22:	2800      	cmp	r0, #0
 8087d24:	f2c0 813c 	blt.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087d28:	4284      	cmp	r4, r0
 8087d2a:	f240 8139 	bls.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087d2e:	4b9e      	ldr	r3, [pc, #632]	; (8087fa8 <mbedtls_x509_crt_info+0x5d0>)
 8087d30:	1a24      	subs	r4, r4, r0
 8087d32:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL,              "Email" );
 8087d34:	06b0      	lsls	r0, r6, #26
 8087d36:	d50d      	bpl.n	8087d54 <mbedtls_x509_crt_info+0x37c>
 8087d38:	4aa0      	ldr	r2, [pc, #640]	; (8087fbc <mbedtls_x509_crt_info+0x5e4>)
 8087d3a:	4621      	mov	r1, r4
 8087d3c:	4628      	mov	r0, r5
 8087d3e:	f009 fa2b 	bl	8091198 <snprintf>
 8087d42:	2800      	cmp	r0, #0
 8087d44:	f2c0 812c 	blt.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087d48:	4284      	cmp	r4, r0
 8087d4a:	f240 8129 	bls.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087d4e:	4b96      	ldr	r3, [pc, #600]	; (8087fa8 <mbedtls_x509_crt_info+0x5d0>)
 8087d50:	1a24      	subs	r4, r4, r0
 8087d52:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING,     "Object Signing" );
 8087d54:	06f1      	lsls	r1, r6, #27
 8087d56:	d50d      	bpl.n	8087d74 <mbedtls_x509_crt_info+0x39c>
 8087d58:	4a99      	ldr	r2, [pc, #612]	; (8087fc0 <mbedtls_x509_crt_info+0x5e8>)
 8087d5a:	4621      	mov	r1, r4
 8087d5c:	4628      	mov	r0, r5
 8087d5e:	f009 fa1b 	bl	8091198 <snprintf>
 8087d62:	2800      	cmp	r0, #0
 8087d64:	f2c0 811c 	blt.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087d68:	4284      	cmp	r4, r0
 8087d6a:	f240 8119 	bls.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087d6e:	4b8e      	ldr	r3, [pc, #568]	; (8087fa8 <mbedtls_x509_crt_info+0x5d0>)
 8087d70:	1a24      	subs	r4, r4, r0
 8087d72:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_RESERVED,           "Reserved" );
 8087d74:	0732      	lsls	r2, r6, #28
 8087d76:	d50d      	bpl.n	8087d94 <mbedtls_x509_crt_info+0x3bc>
 8087d78:	4a92      	ldr	r2, [pc, #584]	; (8087fc4 <mbedtls_x509_crt_info+0x5ec>)
 8087d7a:	4621      	mov	r1, r4
 8087d7c:	4628      	mov	r0, r5
 8087d7e:	f009 fa0b 	bl	8091198 <snprintf>
 8087d82:	2800      	cmp	r0, #0
 8087d84:	f2c0 810c 	blt.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087d88:	4284      	cmp	r4, r0
 8087d8a:	f240 8109 	bls.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087d8e:	4b86      	ldr	r3, [pc, #536]	; (8087fa8 <mbedtls_x509_crt_info+0x5d0>)
 8087d90:	1a24      	subs	r4, r4, r0
 8087d92:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CA,             "SSL CA" );
 8087d94:	0770      	lsls	r0, r6, #29
 8087d96:	d50d      	bpl.n	8087db4 <mbedtls_x509_crt_info+0x3dc>
 8087d98:	4a8b      	ldr	r2, [pc, #556]	; (8087fc8 <mbedtls_x509_crt_info+0x5f0>)
 8087d9a:	4621      	mov	r1, r4
 8087d9c:	4628      	mov	r0, r5
 8087d9e:	f009 f9fb 	bl	8091198 <snprintf>
 8087da2:	2800      	cmp	r0, #0
 8087da4:	f2c0 80fc 	blt.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087da8:	4284      	cmp	r4, r0
 8087daa:	f240 80f9 	bls.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087dae:	4b7e      	ldr	r3, [pc, #504]	; (8087fa8 <mbedtls_x509_crt_info+0x5d0>)
 8087db0:	1a24      	subs	r4, r4, r0
 8087db2:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL_CA,           "Email CA" );
 8087db4:	07b1      	lsls	r1, r6, #30
 8087db6:	d50d      	bpl.n	8087dd4 <mbedtls_x509_crt_info+0x3fc>
 8087db8:	4a84      	ldr	r2, [pc, #528]	; (8087fcc <mbedtls_x509_crt_info+0x5f4>)
 8087dba:	4621      	mov	r1, r4
 8087dbc:	4628      	mov	r0, r5
 8087dbe:	f009 f9eb 	bl	8091198 <snprintf>
 8087dc2:	2800      	cmp	r0, #0
 8087dc4:	f2c0 80ec 	blt.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087dc8:	4284      	cmp	r4, r0
 8087dca:	f240 80e9 	bls.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087dce:	4b76      	ldr	r3, [pc, #472]	; (8087fa8 <mbedtls_x509_crt_info+0x5d0>)
 8087dd0:	1a24      	subs	r4, r4, r0
 8087dd2:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING_CA,  "Object Signing CA" );
 8087dd4:	07f2      	lsls	r2, r6, #31
 8087dd6:	d50c      	bpl.n	8087df2 <mbedtls_x509_crt_info+0x41a>
 8087dd8:	4a7d      	ldr	r2, [pc, #500]	; (8087fd0 <mbedtls_x509_crt_info+0x5f8>)
 8087dda:	4621      	mov	r1, r4
 8087ddc:	4628      	mov	r0, r5
 8087dde:	f009 f9db 	bl	8091198 <snprintf>
 8087de2:	2800      	cmp	r0, #0
 8087de4:	f2c0 80dc 	blt.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087de8:	4284      	cmp	r4, r0
 8087dea:	f240 80d9 	bls.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087dee:	1a24      	subs	r4, r4, r0
 8087df0:	4405      	add	r5, r0

        if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
            return( ret );
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
 8087df2:	f8d8 30f8 	ldr.w	r3, [r8, #248]	; 0xf8
 8087df6:	075e      	lsls	r6, r3, #29
 8087df8:	f140 8096 	bpl.w	8087f28 <mbedtls_x509_crt_info+0x550>
    {
        ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
 8087dfc:	464b      	mov	r3, r9
 8087dfe:	4a75      	ldr	r2, [pc, #468]	; (8087fd4 <mbedtls_x509_crt_info+0x5fc>)
 8087e00:	4621      	mov	r1, r4
 8087e02:	4628      	mov	r0, r5
 8087e04:	f009 f9c8 	bl	8091198 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8087e08:	2800      	cmp	r0, #0
 8087e0a:	f2c0 80c9 	blt.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087e0e:	42a0      	cmp	r0, r4
 8087e10:	f080 80c6 	bcs.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>

        if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
 8087e14:	f8d8 6104 	ldr.w	r6, [r8, #260]	; 0x104
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
    {
        ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
 8087e18:	1a24      	subs	r4, r4, r0
 8087e1a:	4405      	add	r5, r0
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
 8087e1c:	0630      	lsls	r0, r6, #24
 8087e1e:	4b64      	ldr	r3, [pc, #400]	; (8087fb0 <mbedtls_x509_crt_info+0x5d8>)
 8087e20:	d50d      	bpl.n	8087e3e <mbedtls_x509_crt_info+0x466>
 8087e22:	4a6d      	ldr	r2, [pc, #436]	; (8087fd8 <mbedtls_x509_crt_info+0x600>)
 8087e24:	4621      	mov	r1, r4
 8087e26:	4628      	mov	r0, r5
 8087e28:	f009 f9b6 	bl	8091198 <snprintf>
 8087e2c:	2800      	cmp	r0, #0
 8087e2e:	f2c0 80b7 	blt.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087e32:	4284      	cmp	r4, r0
 8087e34:	f240 80b4 	bls.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087e38:	4b5b      	ldr	r3, [pc, #364]	; (8087fa8 <mbedtls_x509_crt_info+0x5d0>)
 8087e3a:	1a24      	subs	r4, r4, r0
 8087e3c:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_NON_REPUDIATION,      "Non Repudiation" );
 8087e3e:	0671      	lsls	r1, r6, #25
 8087e40:	d50d      	bpl.n	8087e5e <mbedtls_x509_crt_info+0x486>
 8087e42:	4a66      	ldr	r2, [pc, #408]	; (8087fdc <mbedtls_x509_crt_info+0x604>)
 8087e44:	4621      	mov	r1, r4
 8087e46:	4628      	mov	r0, r5
 8087e48:	f009 f9a6 	bl	8091198 <snprintf>
 8087e4c:	2800      	cmp	r0, #0
 8087e4e:	f2c0 80a7 	blt.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087e52:	4284      	cmp	r4, r0
 8087e54:	f240 80a4 	bls.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087e58:	4b53      	ldr	r3, [pc, #332]	; (8087fa8 <mbedtls_x509_crt_info+0x5d0>)
 8087e5a:	1a24      	subs	r4, r4, r0
 8087e5c:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_ENCIPHERMENT,     "Key Encipherment" );
 8087e5e:	06b2      	lsls	r2, r6, #26
 8087e60:	d50d      	bpl.n	8087e7e <mbedtls_x509_crt_info+0x4a6>
 8087e62:	4a5f      	ldr	r2, [pc, #380]	; (8087fe0 <mbedtls_x509_crt_info+0x608>)
 8087e64:	4621      	mov	r1, r4
 8087e66:	4628      	mov	r0, r5
 8087e68:	f009 f996 	bl	8091198 <snprintf>
 8087e6c:	2800      	cmp	r0, #0
 8087e6e:	f2c0 8097 	blt.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087e72:	4284      	cmp	r4, r0
 8087e74:	f240 8094 	bls.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087e78:	4b4b      	ldr	r3, [pc, #300]	; (8087fa8 <mbedtls_x509_crt_info+0x5d0>)
 8087e7a:	1a24      	subs	r4, r4, r0
 8087e7c:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DATA_ENCIPHERMENT,    "Data Encipherment" );
 8087e7e:	06f0      	lsls	r0, r6, #27
 8087e80:	d50d      	bpl.n	8087e9e <mbedtls_x509_crt_info+0x4c6>
 8087e82:	4a58      	ldr	r2, [pc, #352]	; (8087fe4 <mbedtls_x509_crt_info+0x60c>)
 8087e84:	4621      	mov	r1, r4
 8087e86:	4628      	mov	r0, r5
 8087e88:	f009 f986 	bl	8091198 <snprintf>
 8087e8c:	2800      	cmp	r0, #0
 8087e8e:	f2c0 8087 	blt.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087e92:	4284      	cmp	r4, r0
 8087e94:	f240 8084 	bls.w	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087e98:	4b43      	ldr	r3, [pc, #268]	; (8087fa8 <mbedtls_x509_crt_info+0x5d0>)
 8087e9a:	1a24      	subs	r4, r4, r0
 8087e9c:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_AGREEMENT,        "Key Agreement" );
 8087e9e:	0731      	lsls	r1, r6, #28
 8087ea0:	d50b      	bpl.n	8087eba <mbedtls_x509_crt_info+0x4e2>
 8087ea2:	4a51      	ldr	r2, [pc, #324]	; (8087fe8 <mbedtls_x509_crt_info+0x610>)
 8087ea4:	4621      	mov	r1, r4
 8087ea6:	4628      	mov	r0, r5
 8087ea8:	f009 f976 	bl	8091198 <snprintf>
 8087eac:	2800      	cmp	r0, #0
 8087eae:	db77      	blt.n	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087eb0:	4284      	cmp	r4, r0
 8087eb2:	d975      	bls.n	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087eb4:	4b3c      	ldr	r3, [pc, #240]	; (8087fa8 <mbedtls_x509_crt_info+0x5d0>)
 8087eb6:	1a24      	subs	r4, r4, r0
 8087eb8:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_CERT_SIGN,        "Key Cert Sign" );
 8087eba:	0772      	lsls	r2, r6, #29
 8087ebc:	d50b      	bpl.n	8087ed6 <mbedtls_x509_crt_info+0x4fe>
 8087ebe:	4a4b      	ldr	r2, [pc, #300]	; (8087fec <mbedtls_x509_crt_info+0x614>)
 8087ec0:	4621      	mov	r1, r4
 8087ec2:	4628      	mov	r0, r5
 8087ec4:	f009 f968 	bl	8091198 <snprintf>
 8087ec8:	2800      	cmp	r0, #0
 8087eca:	db69      	blt.n	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087ecc:	4284      	cmp	r4, r0
 8087ece:	d967      	bls.n	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087ed0:	4b35      	ldr	r3, [pc, #212]	; (8087fa8 <mbedtls_x509_crt_info+0x5d0>)
 8087ed2:	1a24      	subs	r4, r4, r0
 8087ed4:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_CRL_SIGN,             "CRL Sign" );
 8087ed6:	07b0      	lsls	r0, r6, #30
 8087ed8:	d50b      	bpl.n	8087ef2 <mbedtls_x509_crt_info+0x51a>
 8087eda:	4a45      	ldr	r2, [pc, #276]	; (8087ff0 <mbedtls_x509_crt_info+0x618>)
 8087edc:	4621      	mov	r1, r4
 8087ede:	4628      	mov	r0, r5
 8087ee0:	f009 f95a 	bl	8091198 <snprintf>
 8087ee4:	2800      	cmp	r0, #0
 8087ee6:	db5b      	blt.n	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087ee8:	4284      	cmp	r4, r0
 8087eea:	d959      	bls.n	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087eec:	4b2e      	ldr	r3, [pc, #184]	; (8087fa8 <mbedtls_x509_crt_info+0x5d0>)
 8087eee:	1a24      	subs	r4, r4, r0
 8087ef0:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_ENCIPHER_ONLY,        "Encipher Only" );
 8087ef2:	07f1      	lsls	r1, r6, #31
 8087ef4:	d50b      	bpl.n	8087f0e <mbedtls_x509_crt_info+0x536>
 8087ef6:	4a3f      	ldr	r2, [pc, #252]	; (8087ff4 <mbedtls_x509_crt_info+0x61c>)
 8087ef8:	4621      	mov	r1, r4
 8087efa:	4628      	mov	r0, r5
 8087efc:	f009 f94c 	bl	8091198 <snprintf>
 8087f00:	2800      	cmp	r0, #0
 8087f02:	db4d      	blt.n	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087f04:	4284      	cmp	r4, r0
 8087f06:	d94b      	bls.n	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087f08:	4b27      	ldr	r3, [pc, #156]	; (8087fa8 <mbedtls_x509_crt_info+0x5d0>)
 8087f0a:	1a24      	subs	r4, r4, r0
 8087f0c:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DECIPHER_ONLY,        "Decipher Only" );
 8087f0e:	0432      	lsls	r2, r6, #16
 8087f10:	d50a      	bpl.n	8087f28 <mbedtls_x509_crt_info+0x550>
 8087f12:	4a39      	ldr	r2, [pc, #228]	; (8087ff8 <mbedtls_x509_crt_info+0x620>)
 8087f14:	4621      	mov	r1, r4
 8087f16:	4628      	mov	r0, r5
 8087f18:	f009 f93e 	bl	8091198 <snprintf>
 8087f1c:	2800      	cmp	r0, #0
 8087f1e:	db3f      	blt.n	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087f20:	4284      	cmp	r4, r0
 8087f22:	d93d      	bls.n	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087f24:	1a24      	subs	r4, r4, r0
 8087f26:	4405      	add	r5, r0

        if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
            return( ret );
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE )
 8087f28:	f8d8 30f8 	ldr.w	r3, [r8, #248]	; 0xf8
 8087f2c:	051b      	lsls	r3, r3, #20
 8087f2e:	d52b      	bpl.n	8087f88 <mbedtls_x509_crt_info+0x5b0>
    {
        ret = mbedtls_snprintf( p, n, "\n%sext key usage     : ", prefix );
 8087f30:	464b      	mov	r3, r9
 8087f32:	4a32      	ldr	r2, [pc, #200]	; (8087ffc <mbedtls_x509_crt_info+0x624>)
 8087f34:	4621      	mov	r1, r4
 8087f36:	4628      	mov	r0, r5
 8087f38:	f009 f92e 	bl	8091198 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8087f3c:	2800      	cmp	r0, #0
 8087f3e:	db2f      	blt.n	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087f40:	42a0      	cmp	r0, r4
 8087f42:	d22d      	bcs.n	8087fa0 <mbedtls_x509_crt_info+0x5c8>

        if( ( ret = x509_info_ext_key_usage( &p, &n,
 8087f44:	f508 7684 	add.w	r6, r8, #264	; 0x108
    const char *sep = "";

    while( cur != NULL )
    {
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
            desc = "???";
 8087f48:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 808800c <mbedtls_x509_crt_info+0x634>
    int ret;
    const char *desc;
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = extended_key_usage;
    const char *sep = "";
 8087f4c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8087fb0 <mbedtls_x509_crt_info+0x5d8>
static int x509_info_ext_key_usage( char **buf, size_t *size,
                                    const mbedtls_x509_sequence *extended_key_usage )
{
    int ret;
    const char *desc;
    size_t n = *size;
 8087f50:	1a24      	subs	r4, r4, r0
    char *p = *buf;
 8087f52:	4405      	add	r5, r0
    const mbedtls_x509_sequence *cur = extended_key_usage;
    const char *sep = "";

    while( cur != NULL )
    {
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
 8087f54:	a906      	add	r1, sp, #24
 8087f56:	4630      	mov	r0, r6
 8087f58:	f7fc fe04 	bl	8084b64 <mbedtls_oid_get_extended_key_usage>
 8087f5c:	b108      	cbz	r0, 8087f62 <mbedtls_x509_crt_info+0x58a>
            desc = "???";
 8087f5e:	f8cd 9018 	str.w	r9, [sp, #24]

        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
 8087f62:	9b06      	ldr	r3, [sp, #24]
 8087f64:	4a26      	ldr	r2, [pc, #152]	; (8088000 <mbedtls_x509_crt_info+0x628>)
 8087f66:	9300      	str	r3, [sp, #0]
 8087f68:	4621      	mov	r1, r4
 8087f6a:	4643      	mov	r3, r8
 8087f6c:	4628      	mov	r0, r5
 8087f6e:	f009 f913 	bl	8091198 <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8087f72:	2800      	cmp	r0, #0
 8087f74:	db14      	blt.n	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087f76:	42a0      	cmp	r0, r4
 8087f78:	d212      	bcs.n	8087fa0 <mbedtls_x509_crt_info+0x5c8>

        sep = ", ";

        cur = cur->next;
 8087f7a:	68f6      	ldr	r6, [r6, #12]
    {
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
            desc = "???";

        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
        MBEDTLS_X509_SAFE_SNPRINTF;
 8087f7c:	1a24      	subs	r4, r4, r0
 8087f7e:	4405      	add	r5, r0

        sep = ", ";
 8087f80:	f8df 8024 	ldr.w	r8, [pc, #36]	; 8087fa8 <mbedtls_x509_crt_info+0x5d0>
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = extended_key_usage;
    const char *sep = "";

    while( cur != NULL )
 8087f84:	2e00      	cmp	r6, #0
 8087f86:	d1e5      	bne.n	8087f54 <mbedtls_x509_crt_info+0x57c>
        if( ( ret = x509_info_ext_key_usage( &p, &n,
                                             &crt->ext_key_usage ) ) != 0 )
            return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n" );
 8087f88:	4a1e      	ldr	r2, [pc, #120]	; (8088004 <mbedtls_x509_crt_info+0x62c>)
 8087f8a:	4621      	mov	r1, r4
 8087f8c:	4628      	mov	r0, r5
 8087f8e:	f009 f903 	bl	8091198 <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8087f92:	2800      	cmp	r0, #0
 8087f94:	db04      	blt.n	8087fa0 <mbedtls_x509_crt_info+0x5c8>
 8087f96:	4284      	cmp	r4, r0
 8087f98:	d902      	bls.n	8087fa0 <mbedtls_x509_crt_info+0x5c8>

    return( (int) ( size - n ) );
 8087f9a:	1a20      	subs	r0, r4, r0
 8087f9c:	1a38      	subs	r0, r7, r0
 8087f9e:	e000      	b.n	8087fa2 <mbedtls_x509_crt_info+0x5ca>
    while( cur != NULL )
    {
        if( cur->buf.len + sep_len >= n )
        {
            *p = '\0';
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
 8087fa0:	4819      	ldr	r0, [pc, #100]	; (8088008 <mbedtls_x509_crt_info+0x630>)

    ret = mbedtls_snprintf( p, n, "\n" );
    MBEDTLS_X509_SAFE_SNPRINTF;

    return( (int) ( size - n ) );
}
 8087fa2:	b00d      	add	sp, #52	; 0x34
 8087fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8087fa8:	08097a04 	.word	0x08097a04
 8087fac:	08097dc2 	.word	0x08097dc2
 8087fb0:	08096b58 	.word	0x08096b58
 8087fb4:	08097dda 	.word	0x08097dda
 8087fb8:	08097de7 	.word	0x08097de7
 8087fbc:	08097df4 	.word	0x08097df4
 8087fc0:	08097dfc 	.word	0x08097dfc
 8087fc4:	08097e0d 	.word	0x08097e0d
 8087fc8:	08097e18 	.word	0x08097e18
 8087fcc:	08097e21 	.word	0x08097e21
 8087fd0:	08097e2c 	.word	0x08097e2c
 8087fd4:	08097e40 	.word	0x08097e40
 8087fd8:	08097e58 	.word	0x08097e58
 8087fdc:	08097e6c 	.word	0x08097e6c
 8087fe0:	08097e7e 	.word	0x08097e7e
 8087fe4:	08097e91 	.word	0x08097e91
 8087fe8:	08097ea5 	.word	0x08097ea5
 8087fec:	08097eb5 	.word	0x08097eb5
 8087ff0:	08097ec5 	.word	0x08097ec5
 8087ff4:	08097ed0 	.word	0x08097ed0
 8087ff8:	08097ee0 	.word	0x08097ee0
 8087ffc:	08097ef0 	.word	0x08097ef0
 8088000:	08097f08 	.word	0x08097f08
 8088004:	08096cb8 	.word	0x08096cb8
 8088008:	ffffd680 	.word	0xffffd680
 808800c:	08097a1b 	.word	0x08097a1b

08088010 <mbedtls_x509_crt_check_key_usage>:
{
    unsigned int usage_must, usage_may;
    unsigned int may_mask = MBEDTLS_X509_KU_ENCIPHER_ONLY
                          | MBEDTLS_X509_KU_DECIPHER_ONLY;

    if( ( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE ) == 0 )
 8088010:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
 8088014:	f013 0304 	ands.w	r3, r3, #4
 8088018:	d01a      	beq.n	8088050 <mbedtls_x509_crt_check_key_usage+0x40>
        return( 0 );

    usage_must = usage & ~may_mask;

    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
 808801a:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
 808801e:	f421 4000 	bic.w	r0, r1, #32768	; 0x8000
 8088022:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
 8088026:	f023 0301 	bic.w	r3, r3, #1
 808802a:	f020 0001 	bic.w	r0, r0, #1
 808802e:	400b      	ands	r3, r1
 8088030:	4298      	cmp	r0, r3
 8088032:	d10c      	bne.n	808804e <mbedtls_x509_crt_check_key_usage+0x3e>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    usage_may = usage & may_mask;

    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
 8088034:	f248 0301 	movw	r3, #32769	; 0x8001
 8088038:	f248 0001 	movw	r0, #32769	; 0x8001
 808803c:	430a      	orrs	r2, r1
 808803e:	4013      	ands	r3, r2
        return( 0 );

    usage_must = usage & ~may_mask;

    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8088040:	4a04      	ldr	r2, [pc, #16]	; (8088054 <mbedtls_x509_crt_check_key_usage+0x44>)

    usage_may = usage & may_mask;

    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
 8088042:	4008      	ands	r0, r1
        return( 0 );

    usage_must = usage & ~may_mask;

    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8088044:	4298      	cmp	r0, r3
 8088046:	bf14      	ite	ne
 8088048:	4613      	movne	r3, r2
 808804a:	2300      	moveq	r3, #0
 808804c:	e000      	b.n	8088050 <mbedtls_x509_crt_check_key_usage+0x40>
 808804e:	4b01      	ldr	r3, [pc, #4]	; (8088054 <mbedtls_x509_crt_check_key_usage+0x44>)

    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    return( 0 );
}
 8088050:	4618      	mov	r0, r3
 8088052:	4770      	bx	lr
 8088054:	ffffd800 	.word	0xffffd800

08088058 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>:
 * bottom means child is the end entity cert
 */
static int x509_crt_check_parent( const mbedtls_x509_crt *child,
                                  const mbedtls_x509_crt *parent,
                                  int top, int bottom )
{
 8088058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808805c:	4606      	mov	r6, r0
 808805e:	460d      	mov	r5, r1
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 8088060:	304c      	adds	r0, #76	; 0x4c
 8088062:	316c      	adds	r1, #108	; 0x6c
 * bottom means child is the end entity cert
 */
static int x509_crt_check_parent( const mbedtls_x509_crt *child,
                                  const mbedtls_x509_crt *parent,
                                  int top, int bottom )
{
 8088064:	4617      	mov	r7, r2
 8088066:	4698      	mov	r8, r3
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 8088068:	f7ff fc1b 	bl	80878a2 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
 808806c:	4604      	mov	r4, r0
 808806e:	b9d8      	cbnz	r0, 80880a8 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x50>

    /* Parent must have the basicConstraints CA bit set as a general rule */
    need_ca_bit = 1;

    /* Exception: v1/v2 certificates that are locally trusted. */
    if( top && parent->version < 3 )
 8088070:	b177      	cbz	r7, 8088090 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x38>
 8088072:	69af      	ldr	r7, [r5, #24]
        need_ca_bit = 0;

    /* Exception: self-signed end-entity certs that are locally trusted. */
    if( top && bottom &&
 8088074:	f1b8 0f00 	cmp.w	r8, #0
 8088078:	d008      	beq.n	808808c <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x34>
        child->raw.len == parent->raw.len &&
 808807a:	6872      	ldr	r2, [r6, #4]
    /* Exception: v1/v2 certificates that are locally trusted. */
    if( top && parent->version < 3 )
        need_ca_bit = 0;

    /* Exception: self-signed end-entity certs that are locally trusted. */
    if( top && bottom &&
 808807c:	686b      	ldr	r3, [r5, #4]
 808807e:	429a      	cmp	r2, r3
 8088080:	d104      	bne.n	808808c <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x34>
        child->raw.len == parent->raw.len &&
        memcmp( child->raw.p, parent->raw.p, child->raw.len ) == 0 )
 8088082:	68a9      	ldr	r1, [r5, #8]
 8088084:	68b0      	ldr	r0, [r6, #8]
 8088086:	f00b ff5d 	bl	8093f44 <memcmp>
    if( top && parent->version < 3 )
        need_ca_bit = 0;

    /* Exception: self-signed end-entity certs that are locally trusted. */
    if( top && bottom &&
        child->raw.len == parent->raw.len &&
 808808a:	b178      	cbz	r0, 80880ac <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x54>
        memcmp( child->raw.p, parent->raw.p, child->raw.len ) == 0 )
    {
        need_ca_bit = 0;
    }

    if( need_ca_bit && ! parent->ca_istrue )
 808808c:	2f02      	cmp	r7, #2
 808808e:	dd0d      	ble.n	80880ac <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x54>
 8088090:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
 8088094:	b143      	cbz	r3, 80880a8 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x50>
        return( -1 );

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( need_ca_bit &&
        mbedtls_x509_crt_check_key_usage( parent, MBEDTLS_X509_KU_KEY_CERT_SIGN ) != 0 )
 8088096:	2104      	movs	r1, #4
 8088098:	4628      	mov	r0, r5
 808809a:	f7ff ffb9 	bl	8088010 <mbedtls_x509_crt_check_key_usage>

    if( need_ca_bit && ! parent->ca_istrue )
        return( -1 );

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( need_ca_bit &&
 808809e:	3000      	adds	r0, #0
 80880a0:	bf18      	it	ne
 80880a2:	2001      	movne	r0, #1
 80880a4:	4244      	negs	r4, r0
 80880a6:	e001      	b.n	80880ac <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x54>
{
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
        return( -1 );
 80880a8:	f04f 34ff 	mov.w	r4, #4294967295
        return( -1 );
    }
#endif

    return( 0 );
}
 80880ac:	4620      	mov	r0, r4
 80880ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080880b2 <mbedtls_x509_crt_is_revoked>:
#if defined(MBEDTLS_X509_CRL_PARSE_C)
/*
 * Return 1 if the certificate is revoked, or 0 otherwise.
 */
int mbedtls_x509_crt_is_revoked( const mbedtls_x509_crt *crt, const mbedtls_x509_crl *crl )
{
 80880b2:	b538      	push	{r3, r4, r5, lr}
 80880b4:	4605      	mov	r5, r0
    const mbedtls_x509_crl_entry *cur = &crl->entry;
 80880b6:	f101 0484 	add.w	r4, r1, #132	; 0x84

    while( cur != NULL && cur->serial.len != 0 )
 80880ba:	b1a4      	cbz	r4, 80880e6 <mbedtls_x509_crt_is_revoked+0x34>
 80880bc:	6922      	ldr	r2, [r4, #16]
 80880be:	b1a2      	cbz	r2, 80880ea <mbedtls_x509_crt_is_revoked+0x38>
    {
        if( crt->serial.len == cur->serial.len &&
 80880c0:	6a2b      	ldr	r3, [r5, #32]
 80880c2:	429a      	cmp	r2, r3
 80880c4:	d001      	beq.n	80880ca <mbedtls_x509_crt_is_revoked+0x18>
        {
            if( mbedtls_x509_time_is_past( &cur->revocation_date ) )
                return( 1 );
        }

        cur = cur->next;
 80880c6:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 */
int mbedtls_x509_crt_is_revoked( const mbedtls_x509_crt *crt, const mbedtls_x509_crl *crl )
{
    const mbedtls_x509_crl_entry *cur = &crl->entry;

    while( cur != NULL && cur->serial.len != 0 )
 80880c8:	e7f7      	b.n	80880ba <mbedtls_x509_crt_is_revoked+0x8>
    {
        if( crt->serial.len == cur->serial.len &&
            memcmp( crt->serial.p, cur->serial.p, crt->serial.len ) == 0 )
 80880ca:	6961      	ldr	r1, [r4, #20]
 80880cc:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80880ce:	f00b ff39 	bl	8093f44 <memcmp>
{
    const mbedtls_x509_crl_entry *cur = &crl->entry;

    while( cur != NULL && cur->serial.len != 0 )
    {
        if( crt->serial.len == cur->serial.len &&
 80880d2:	2800      	cmp	r0, #0
 80880d4:	d1f7      	bne.n	80880c6 <mbedtls_x509_crt_is_revoked+0x14>
            memcmp( crt->serial.p, cur->serial.p, crt->serial.len ) == 0 )
        {
            if( mbedtls_x509_time_is_past( &cur->revocation_date ) )
 80880d6:	f104 0018 	add.w	r0, r4, #24
 80880da:	f7fe fb01 	bl	80866e0 <mbedtls_x509_time_is_past>
 80880de:	2800      	cmp	r0, #0
 80880e0:	d0f1      	beq.n	80880c6 <mbedtls_x509_crt_is_revoked+0x14>
                return( 1 );
 80880e2:	2001      	movs	r0, #1
 80880e4:	bd38      	pop	{r3, r4, r5, pc}
        }

        cur = cur->next;
    }

    return( 0 );
 80880e6:	4620      	mov	r0, r4
 80880e8:	bd38      	pop	{r3, r4, r5, pc}
 80880ea:	4610      	mov	r0, r2
}
 80880ec:	bd38      	pop	{r3, r4, r5, pc}

080880ee <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile>:
 * Skip validation if no CRL for the given CA is present.
 */
static int x509_crt_verifycrl( mbedtls_x509_crt *crt, mbedtls_x509_crt *ca,
                               mbedtls_x509_crl *crl_list,
                               const mbedtls_x509_crt_profile *profile )
{
 80880ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80880f2:	b099      	sub	sp, #100	; 0x64
 80880f4:	9005      	str	r0, [sp, #20]
 80880f6:	4614      	mov	r4, r2
 80880f8:	461f      	mov	r7, r3
    int flags = 0;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;

    if( ca == NULL )
 80880fa:	460e      	mov	r6, r1
 80880fc:	2900      	cmp	r1, #0
 80880fe:	d077      	beq.n	80881f0 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x102>
 8088100:	2500      	movs	r5, #0
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 8088102:	f04f 0a01 	mov.w	sl, #1
    const mbedtls_md_info_t *md_info;

    if( ca == NULL )
        return( flags );

    while( crl_list != NULL )
 8088106:	2c00      	cmp	r4, #0
 8088108:	d07a      	beq.n	8088200 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x112>
    {
        if( crl_list->version == 0 ||
 808810a:	69a3      	ldr	r3, [r4, #24]
 808810c:	2b00      	cmp	r3, #0
 808810e:	d06c      	beq.n	80881ea <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xfc>
            crl_list->issuer_raw.len != ca->subject_raw.len ||
 8088110:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    if( ca == NULL )
        return( flags );

    while( crl_list != NULL )
    {
        if( crl_list->version == 0 ||
 8088112:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8088114:	429a      	cmp	r2, r3
 8088116:	d168      	bne.n	80881ea <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xfc>
            crl_list->issuer_raw.len != ca->subject_raw.len ||
            memcmp( crl_list->issuer_raw.p, ca->subject_raw.p,
 8088118:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 808811a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 808811c:	f00b ff12 	bl	8093f44 <memcmp>
        return( flags );

    while( crl_list != NULL )
    {
        if( crl_list->version == 0 ||
            crl_list->issuer_raw.len != ca->subject_raw.len ||
 8088120:	2800      	cmp	r0, #0
 8088122:	d162      	bne.n	80881ea <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xfc>

        /*
         * Check if the CA is configured to sign CRLs
         */
#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
        if( mbedtls_x509_crt_check_key_usage( ca, MBEDTLS_X509_KU_CRL_SIGN ) != 0 )
 8088124:	2102      	movs	r1, #2
 8088126:	4630      	mov	r0, r6
 8088128:	f7ff ff72 	bl	8088010 <mbedtls_x509_crt_check_key_usage>
 808812c:	2800      	cmp	r0, #0
 808812e:	d143      	bne.n	80881b8 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xca>
#endif

        /*
         * Check if CRL is correctly signed by the trusted CA
         */
        if( x509_profile_check_md_alg( profile, crl_list->sig_md ) != 0 )
 8088130:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 8088134:	683a      	ldr	r2, [r7, #0]
 8088136:	1e43      	subs	r3, r0, #1
 8088138:	fa0a f303 	lsl.w	r3, sl, r3
 808813c:	4213      	tst	r3, r2
 808813e:	d059      	beq.n	80881f4 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x106>
 8088140:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
 8088144:	2201      	movs	r2, #1
 8088146:	3b01      	subs	r3, #1
 8088148:	fa02 f303 	lsl.w	r3, r2, r3
 808814c:	687a      	ldr	r2, [r7, #4]
 808814e:	4213      	tst	r3, r2
 8088150:	d053      	beq.n	80881fa <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x10c>
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;

        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;

        md_info = mbedtls_md_info_from_type( crl_list->sig_md );
 8088152:	f7ff fa41 	bl	80875d8 <mbedtls_md_info_from_type>
        if( mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash ) != 0 )
 8088156:	f10d 0920 	add.w	r9, sp, #32
 808815a:	464b      	mov	r3, r9
 808815c:	6922      	ldr	r2, [r4, #16]
 808815e:	6961      	ldr	r1, [r4, #20]
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;

        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;

        md_info = mbedtls_md_info_from_type( crl_list->sig_md );
 8088160:	4683      	mov	fp, r0
        if( mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash ) != 0 )
 8088162:	f7ff faab 	bl	80876bc <mbedtls_md>
 8088166:	bb38      	cbnz	r0, 80881b8 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xca>
            /* Note: this can't happen except after an internal error */
            flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
            break;
        }

        if( x509_profile_check_key( profile, crl_list->sig_pk, &ca->pk ) != 0 )
 8088168:	f106 08bc 	add.w	r8, r6, #188	; 0xbc
 808816c:	4642      	mov	r2, r8
 808816e:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
 8088172:	f107 000c 	add.w	r0, r7, #12
 8088176:	f7ff fc1b 	bl	80879b0 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>
 808817a:	b108      	cbz	r0, 8088180 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x92>
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 808817c:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 8088180:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
 8088184:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
 8088188:	9304      	str	r3, [sp, #16]
 808818a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
 808818e:	4658      	mov	r0, fp
        }

        if( x509_profile_check_key( profile, crl_list->sig_pk, &ca->pk ) != 0 )
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 8088190:	9107      	str	r1, [sp, #28]
 8088192:	9306      	str	r3, [sp, #24]
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
 8088194:	f7ff fb64 	bl	8087860 <mbedtls_md_get_size>
        }

        if( x509_profile_check_key( profile, crl_list->sig_pk, &ca->pk ) != 0 )
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 8088198:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 808819c:	9b06      	ldr	r3, [sp, #24]
 808819e:	9203      	str	r2, [sp, #12]
 80881a0:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
 80881a4:	9907      	ldr	r1, [sp, #28]
 80881a6:	9202      	str	r2, [sp, #8]
 80881a8:	9001      	str	r0, [sp, #4]
 80881aa:	f8cd 9000 	str.w	r9, [sp]
 80881ae:	4642      	mov	r2, r8
 80881b0:	9804      	ldr	r0, [sp, #16]
 80881b2:	f004 f8c9 	bl	808c348 <mbedtls_pk_verify_ext>
 80881b6:	b110      	cbz	r0, 80881be <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xd0>
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
                           crl_list->sig.p, crl_list->sig.len ) != 0 )
        {
            flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
 80881b8:	f045 0510 	orr.w	r5, r5, #16
            break;
 80881bc:	e020      	b.n	8088200 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x112>
        }

        /*
         * Check for validity of CRL (Do not drop out)
         */
        if( mbedtls_x509_time_is_past( &crl_list->next_update ) )
 80881be:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 80881c2:	f7fe fa8d 	bl	80866e0 <mbedtls_x509_time_is_past>
 80881c6:	b108      	cbz	r0, 80881cc <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xde>
            flags |= MBEDTLS_X509_BADCRL_EXPIRED;
 80881c8:	f045 0520 	orr.w	r5, r5, #32

        if( mbedtls_x509_time_is_future( &crl_list->this_update ) )
 80881cc:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80881d0:	f7fe fa88 	bl	80866e4 <mbedtls_x509_time_is_future>
 80881d4:	b108      	cbz	r0, 80881da <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xec>
            flags |= MBEDTLS_X509_BADCRL_FUTURE;
 80881d6:	f445 6580 	orr.w	r5, r5, #1024	; 0x400

        /*
         * Check if certificate is revoked
         */
        if( mbedtls_x509_crt_is_revoked( crt, crl_list ) )
 80881da:	4621      	mov	r1, r4
 80881dc:	9805      	ldr	r0, [sp, #20]
 80881de:	f7ff ff68 	bl	80880b2 <mbedtls_x509_crt_is_revoked>
 80881e2:	b110      	cbz	r0, 80881ea <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xfc>
        {
            flags |= MBEDTLS_X509_BADCERT_REVOKED;
 80881e4:	f045 0502 	orr.w	r5, r5, #2
            break;
 80881e8:	e00a      	b.n	8088200 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x112>
        }

        crl_list = crl_list->next;
 80881ea:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 80881ee:	e78a      	b.n	8088106 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x18>
    int flags = 0;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;

    if( ca == NULL )
        return( flags );
 80881f0:	460d      	mov	r5, r1
 80881f2:	e005      	b.n	8088200 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x112>

        /*
         * Check if CRL is correctly signed by the trusted CA
         */
        if( x509_profile_check_md_alg( profile, crl_list->sig_md ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;
 80881f4:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
 80881f8:	e7a2      	b.n	8088140 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x52>

        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;
 80881fa:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000
 80881fe:	e7a8      	b.n	8088152 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x64>

        crl_list = crl_list->next;
    }

    return( flags );
}
 8088200:	4628      	mov	r0, r5
 8088202:	b019      	add	sp, #100	; 0x64
 8088204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08088208 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>:
                mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 8088208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808820c:	4604      	mov	r4, r0
 808820e:	b09d      	sub	sp, #116	; 0x74
 8088210:	4699      	mov	r9, r3
    int check_path_cnt;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_x509_crt *future_past_ca = NULL;

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 8088212:	30a4      	adds	r0, #164	; 0xa4
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
    int ret;
    uint32_t ca_flags = 0;
 8088214:	2300      	movs	r3, #0
                mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 8088216:	460d      	mov	r5, r1
 8088218:	9206      	str	r2, [sp, #24]
 808821a:	f8dd 8098 	ldr.w	r8, [sp, #152]	; 0x98
 808821e:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8088220:	f8dd a0a4 	ldr.w	sl, [sp, #164]	; 0xa4
    int ret;
    uint32_t ca_flags = 0;
 8088224:	930b      	str	r3, [sp, #44]	; 0x2c
    int check_path_cnt;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_x509_crt *future_past_ca = NULL;

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 8088226:	f7fe fa5b 	bl	80866e0 <mbedtls_x509_time_is_past>
 808822a:	b118      	cbz	r0, 8088234 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x2c>
        *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 808822c:	6833      	ldr	r3, [r6, #0]
 808822e:	f043 0301 	orr.w	r3, r3, #1
 8088232:	6033      	str	r3, [r6, #0]

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
 8088234:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 8088238:	f7fe fa54 	bl	80866e4 <mbedtls_x509_time_is_future>
 808823c:	b118      	cbz	r0, 8088246 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x3e>
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;
 808823e:	6833      	ldr	r3, [r6, #0]
 8088240:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8088244:	6033      	str	r3, [r6, #0]
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 8088246:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
 808824a:	1e5a      	subs	r2, r3, #1
 808824c:	2301      	movs	r3, #1
 808824e:	4093      	lsls	r3, r2
 8088250:	f8d9 2000 	ldr.w	r2, [r9]
 8088254:	4213      	tst	r3, r2
 8088256:	f000 80c0 	beq.w	80883da <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1d2>
 808825a:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
 808825e:	1e5a      	subs	r2, r3, #1
 8088260:	2301      	movs	r3, #1
 8088262:	4093      	lsls	r3, r2
 8088264:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8088268:	4213      	tst	r3, r2
 808826a:	f000 80bb 	beq.w	80883e4 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1dc>
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    /*
     * Child is the top of the chain. Check against the trust_ca list.
     */
    *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 808826e:	6833      	ldr	r3, [r6, #0]

    md_info = mbedtls_md_info_from_type( child->sig_md );
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 8088270:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    /*
     * Child is the top of the chain. Check against the trust_ca list.
     */
    *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 8088274:	f043 0308 	orr.w	r3, r3, #8
 8088278:	6033      	str	r3, [r6, #0]

    md_info = mbedtls_md_info_from_type( child->sig_md );
 808827a:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
 808827e:	f7ff f9ab 	bl	80875d8 <mbedtls_md_info_from_type>
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 8088282:	465b      	mov	r3, fp
 8088284:	6922      	ldr	r2, [r4, #16]
 8088286:	6961      	ldr	r1, [r4, #20]
    /*
     * Child is the top of the chain. Check against the trust_ca list.
     */
    *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;

    md_info = mbedtls_md_info_from_type( child->sig_md );
 8088288:	9005      	str	r0, [sp, #20]
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 808828a:	f7ff fa17 	bl	80876bc <mbedtls_md>
 808828e:	2800      	cmp	r0, #0
 8088290:	d16d      	bne.n	808836e <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x166>
 8088292:	4607      	mov	r7, r0
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 8088294:	f8cd b01c 	str.w	fp, [sp, #28]
        /* Note: this can't happen except after an internal error */
        /* Cannot check signature, no need to try any CA */
        trust_ca = NULL;
    }

    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
 8088298:	b915      	cbnz	r5, 80882a0 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x98>
        }

        break;
    }

    if( trust_ca != NULL || ( trust_ca = future_past_ca ) != NULL )
 808829a:	2f00      	cmp	r7, #0
 808829c:	d14c      	bne.n	8088338 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x130>
 808829e:	e066      	b.n	808836e <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x166>
        trust_ca = NULL;
    }

    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
    {
        if( x509_crt_check_parent( child, trust_ca, 1, path_cnt == 0 ) != 0 )
 80882a0:	fab8 f388 	clz	r3, r8
 80882a4:	2201      	movs	r2, #1
 80882a6:	095b      	lsrs	r3, r3, #5
 80882a8:	4629      	mov	r1, r5
 80882aa:	4620      	mov	r0, r4
 80882ac:	f7ff fed4 	bl	8088058 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 80882b0:	2800      	cmp	r0, #0
 80882b2:	d13e      	bne.n	8088332 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x12a>

        /*
         * Reduce check_path_cnt to check against if top of the chain is
         * the same as the trusted CA
         */
        if( child->subject_raw.len == trust_ca->subject_raw.len &&
 80882b4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80882b6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
    {
        if( x509_crt_check_parent( child, trust_ca, 1, path_cnt == 0 ) != 0 )
            continue;

        check_path_cnt = path_cnt + 1;
 80882b8:	f108 0b01 	add.w	fp, r8, #1

        /*
         * Reduce check_path_cnt to check against if top of the chain is
         * the same as the trusted CA
         */
        if( child->subject_raw.len == trust_ca->subject_raw.len &&
 80882bc:	429a      	cmp	r2, r3
 80882be:	d106      	bne.n	80882ce <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xc6>
            memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
 80882c0:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 80882c2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80882c4:	f00b fe3e 	bl	8093f44 <memcmp>
                    child->subject_raw.len ) == 0 )
        {
            check_path_cnt--;
 80882c8:	2800      	cmp	r0, #0
 80882ca:	bf08      	it	eq
 80882cc:	46c3      	moveq	fp, r8
        }

        /* Self signed certificates do not count towards the limit */
        if( trust_ca->max_pathlen > 0 &&
 80882ce:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 80882d2:	2b00      	cmp	r3, #0
 80882d4:	dd04      	ble.n	80882e0 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xd8>
 80882d6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80882d8:	ebc2 0b0b 	rsb	fp, r2, fp
 80882dc:	455b      	cmp	r3, fp
 80882de:	db28      	blt.n	8088332 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x12a>
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 80882e0:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 80882e4:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 80882e8:	9805      	ldr	r0, [sp, #20]
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 80882ea:	f894 b129 	ldrb.w	fp, [r4, #297]	; 0x129
 80882ee:	9109      	str	r1, [sp, #36]	; 0x24
 80882f0:	9308      	str	r3, [sp, #32]
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 80882f2:	f7ff fab5 	bl	8087860 <mbedtls_md_get_size>
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 80882f6:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 80882fa:	9b07      	ldr	r3, [sp, #28]
 80882fc:	9203      	str	r2, [sp, #12]
 80882fe:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8088302:	9001      	str	r0, [sp, #4]
 8088304:	9202      	str	r2, [sp, #8]
 8088306:	9300      	str	r3, [sp, #0]
 8088308:	f105 02bc 	add.w	r2, r5, #188	; 0xbc
 808830c:	9b08      	ldr	r3, [sp, #32]
 808830e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8088310:	4658      	mov	r0, fp
 8088312:	f004 f819 	bl	808c348 <mbedtls_pk_verify_ext>
 8088316:	b960      	cbnz	r0, 8088332 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x12a>
                           child->sig.p, child->sig.len ) != 0 )
        {
            continue;
        }

        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) ||
 8088318:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
 808831c:	f7fe f9e0 	bl	80866e0 <mbedtls_x509_time_is_past>
 8088320:	b920      	cbnz	r0, 808832c <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x124>
            mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
 8088322:	f105 008c 	add.w	r0, r5, #140	; 0x8c
 8088326:	f7fe f9dd 	bl	80866e4 <mbedtls_x509_time_is_future>
                           child->sig.p, child->sig.len ) != 0 )
        {
            continue;
        }

        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) ||
 808832a:	b130      	cbz	r0, 808833a <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x132>
            mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
        {
            if ( future_past_ca == NULL )
 808832c:	2f00      	cmp	r7, #0
 808832e:	bf08      	it	eq
 8088330:	462f      	moveq	r7, r5
        /* Note: this can't happen except after an internal error */
        /* Cannot check signature, no need to try any CA */
        trust_ca = NULL;
    }

    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
 8088332:	f8d5 5130 	ldr.w	r5, [r5, #304]	; 0x130
 8088336:	e7af      	b.n	8088298 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x90>
 8088338:	463d      	mov	r5, r7
    if( trust_ca != NULL || ( trust_ca = future_past_ca ) != NULL )
    {
        /*
         * Top of chain is signed by a trusted CA
         */
        *flags &= ~MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 808833a:	6833      	ldr	r3, [r6, #0]

        if( x509_profile_check_key( profile, child->sig_pk, &trust_ca->pk ) != 0 )
 808833c:	f105 02bc 	add.w	r2, r5, #188	; 0xbc
    if( trust_ca != NULL || ( trust_ca = future_past_ca ) != NULL )
    {
        /*
         * Top of chain is signed by a trusted CA
         */
        *flags &= ~MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 8088340:	f023 0308 	bic.w	r3, r3, #8
 8088344:	6033      	str	r3, [r6, #0]

        if( x509_profile_check_key( profile, child->sig_pk, &trust_ca->pk ) != 0 )
 8088346:	f894 1129 	ldrb.w	r1, [r4, #297]	; 0x129
 808834a:	f109 000c 	add.w	r0, r9, #12
 808834e:	f7ff fb2f 	bl	80879b0 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>
 8088352:	b118      	cbz	r0, 808835c <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x154>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 8088354:	6833      	ldr	r3, [r6, #0]
 8088356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 808835a:	6033      	str	r3, [r6, #0]
     * If top of chain is not the same as the trusted CA send a verify request
     * to the callback for any issues with validity and CRL presence for the
     * trusted CA certificate.
     */
    if( trust_ca != NULL &&
        ( child->subject_raw.len != trust_ca->subject_raw.len ||
 808835c:	6c62      	ldr	r2, [r4, #68]	; 0x44
    /*
     * If top of chain is not the same as the trusted CA send a verify request
     * to the callback for any issues with validity and CRL presence for the
     * trusted CA certificate.
     */
    if( trust_ca != NULL &&
 808835e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8088360:	429a      	cmp	r2, r3
 8088362:	d10d      	bne.n	8088380 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x178>
        ( child->subject_raw.len != trust_ca->subject_raw.len ||
          memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
 8088364:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8088366:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8088368:	f00b fdec 	bl	8093f44 <memcmp>
     * If top of chain is not the same as the trusted CA send a verify request
     * to the callback for any issues with validity and CRL presence for the
     * trusted CA certificate.
     */
    if( trust_ca != NULL &&
        ( child->subject_raw.len != trust_ca->subject_raw.len ||
 808836c:	b940      	cbnz	r0, 8088380 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x178>
            }
        }
    }

    /* Call callback on top cert */
    if( NULL != f_vrfy )
 808836e:	f1ba 0f00 	cmp.w	sl, #0
 8088372:	d12a      	bne.n	80883ca <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1c2>
    {
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );
    }

    *flags |= ca_flags;
 8088374:	6832      	ldr	r2, [r6, #0]
 8088376:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    return( 0 );
 8088378:	2000      	movs	r0, #0
    {
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );
    }

    *flags |= ca_flags;
 808837a:	4313      	orrs	r3, r2
 808837c:	6033      	str	r3, [r6, #0]

    return( 0 );
 808837e:	e036      	b.n	80883ee <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1e6>
          memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
                  child->subject_raw.len ) != 0 ) )
    {
#if defined(MBEDTLS_X509_CRL_PARSE_C)
        /* Check trusted CA's CRL for the chain's top crt */
        *flags |= x509_crt_verifycrl( child, trust_ca, ca_crl, profile );
 8088380:	464b      	mov	r3, r9
 8088382:	9a06      	ldr	r2, [sp, #24]
 8088384:	4629      	mov	r1, r5
 8088386:	4620      	mov	r0, r4
 8088388:	f7ff feb1 	bl	80880ee <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile>
 808838c:	6833      	ldr	r3, [r6, #0]
 808838e:	4318      	orrs	r0, r3
 8088390:	6030      	str	r0, [r6, #0]
#else
        ((void) ca_crl);
#endif

        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) )
 8088392:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
 8088396:	f7fe f9a3 	bl	80866e0 <mbedtls_x509_time_is_past>
 808839a:	b118      	cbz	r0, 80883a4 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x19c>
            ca_flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 808839c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 808839e:	f043 0301 	orr.w	r3, r3, #1
 80883a2:	930b      	str	r3, [sp, #44]	; 0x2c

        if( mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
 80883a4:	f105 008c 	add.w	r0, r5, #140	; 0x8c
 80883a8:	f7fe f99c 	bl	80866e4 <mbedtls_x509_time_is_future>
 80883ac:	b118      	cbz	r0, 80883b6 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1ae>
            ca_flags |= MBEDTLS_X509_BADCERT_FUTURE;
 80883ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80883b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80883b4:	930b      	str	r3, [sp, #44]	; 0x2c

        if( NULL != f_vrfy )
 80883b6:	f1ba 0f00 	cmp.w	sl, #0
 80883ba:	d0db      	beq.n	8088374 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x16c>
        {
            if( ( ret = f_vrfy( p_vrfy, trust_ca, path_cnt + 1,
 80883bc:	ab0b      	add	r3, sp, #44	; 0x2c
 80883be:	f108 0201 	add.w	r2, r8, #1
 80883c2:	4629      	mov	r1, r5
 80883c4:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80883c6:	47d0      	blx	sl
 80883c8:	b988      	cbnz	r0, 80883ee <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1e6>
    }

    /* Call callback on top cert */
    if( NULL != f_vrfy )
    {
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
 80883ca:	4633      	mov	r3, r6
 80883cc:	4642      	mov	r2, r8
 80883ce:	4621      	mov	r1, r4
 80883d0:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80883d2:	47d0      	blx	sl
 80883d4:	2800      	cmp	r0, #0
 80883d6:	d0cd      	beq.n	8088374 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x16c>
 80883d8:	e009      	b.n	80883ee <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1e6>

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;

    if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
 80883da:	6833      	ldr	r3, [r6, #0]
 80883dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80883e0:	6033      	str	r3, [r6, #0]
 80883e2:	e73a      	b.n	808825a <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x52>

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 80883e4:	6833      	ldr	r3, [r6, #0]
 80883e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80883ea:	6033      	str	r3, [r6, #0]
 80883ec:	e73f      	b.n	808826e <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x66>
    }

    *flags |= ca_flags;

    return( 0 );
}
 80883ee:	b01d      	add	sp, #116	; 0x74
 80883f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080883f4 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>:
                mbedtls_x509_crt *trust_ca, mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 80883f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80883f8:	b09d      	sub	sp, #116	; 0x74
 80883fa:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80883fc:	469a      	mov	sl, r3
    int ret;
    uint32_t parent_flags = 0;
 80883fe:	2300      	movs	r3, #0
                mbedtls_x509_crt *trust_ca, mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 8088400:	4605      	mov	r5, r0
 8088402:	460f      	mov	r7, r1
 8088404:	9206      	str	r2, [sp, #24]
 8088406:	f8dd 8098 	ldr.w	r8, [sp, #152]	; 0x98
 808840a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
    int ret;
    uint32_t parent_flags = 0;
 808840c:	930b      	str	r3, [sp, #44]	; 0x2c
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    mbedtls_x509_crt *grandparent;
    const mbedtls_md_info_t *md_info;

    /* Counting intermediate self signed certificates */
    if( ( path_cnt != 0 ) && x509_name_cmp( &child->issuer, &child->subject ) == 0 )
 808840e:	b146      	cbz	r6, 8088422 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x2e>
 8088410:	f100 016c 	add.w	r1, r0, #108	; 0x6c
 8088414:	304c      	adds	r0, #76	; 0x4c
 8088416:	f7ff fa44 	bl	80878a2 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
 808841a:	2800      	cmp	r0, #0
 808841c:	d07a      	beq.n	8088514 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x120>
        self_cnt++;

    /* path_cnt is 0 for the first intermediate CA */
    if( 1 + path_cnt > MBEDTLS_X509_MAX_INTERMEDIATE_CA )
 808841e:	2e07      	cmp	r6, #7
 8088420:	dc76      	bgt.n	8088510 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x11c>
    {
        /* return immediately as the goal is to avoid unbounded recursion */
        return( MBEDTLS_ERR_X509_FATAL_ERROR );
    }

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 8088422:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
 8088426:	f7fe f95b 	bl	80866e0 <mbedtls_x509_time_is_past>
 808842a:	b118      	cbz	r0, 8088434 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x40>
        *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 808842c:	6823      	ldr	r3, [r4, #0]
 808842e:	f043 0301 	orr.w	r3, r3, #1
 8088432:	6023      	str	r3, [r4, #0]

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
 8088434:	f105 008c 	add.w	r0, r5, #140	; 0x8c
 8088438:	f7fe f954 	bl	80866e4 <mbedtls_x509_time_is_future>
 808843c:	b118      	cbz	r0, 8088446 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x52>
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;
 808843e:	6823      	ldr	r3, [r4, #0]
 8088440:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8088444:	6023      	str	r3, [r4, #0]
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 8088446:	f895 3128 	ldrb.w	r3, [r5, #296]	; 0x128
 808844a:	1e5a      	subs	r2, r3, #1
 808844c:	2301      	movs	r3, #1
 808844e:	4093      	lsls	r3, r2
 8088450:	f8d8 2000 	ldr.w	r2, [r8]
 8088454:	4213      	tst	r3, r2
 8088456:	d061      	beq.n	808851c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x128>
 8088458:	f895 3129 	ldrb.w	r3, [r5, #297]	; 0x129
 808845c:	1e5a      	subs	r2, r3, #1
 808845e:	2301      	movs	r3, #1
 8088460:	4093      	lsls	r3, r2
 8088462:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8088466:	4213      	tst	r3, r2
 8088468:	d05d      	beq.n	8088526 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x132>
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    md_info = mbedtls_md_info_from_type( child->sig_md );
 808846a:	f895 0128 	ldrb.w	r0, [r5, #296]	; 0x128
 808846e:	f7ff f8b3 	bl	80875d8 <mbedtls_md_info_from_type>
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 8088472:	ab0c      	add	r3, sp, #48	; 0x30
 8088474:	692a      	ldr	r2, [r5, #16]
 8088476:	6969      	ldr	r1, [r5, #20]
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    md_info = mbedtls_md_info_from_type( child->sig_md );
 8088478:	4683      	mov	fp, r0
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 808847a:	f7ff f91f 	bl	80876bc <mbedtls_md>
 808847e:	bb48      	cbnz	r0, 80884d4 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xe0>
        /* Note: this can't happen except after an internal error */
        *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
    }
    else
    {
        if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
 8088480:	f107 09bc 	add.w	r9, r7, #188	; 0xbc
 8088484:	464a      	mov	r2, r9
 8088486:	f895 1129 	ldrb.w	r1, [r5, #297]	; 0x129
 808848a:	f108 000c 	add.w	r0, r8, #12
 808848e:	f7ff fa8f 	bl	80879b0 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>
 8088492:	b118      	cbz	r0, 808849c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xa8>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 8088494:	6823      	ldr	r3, [r4, #0]
 8088496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 808849a:	6023      	str	r3, [r4, #0]

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 808849c:	f895 3129 	ldrb.w	r3, [r5, #297]	; 0x129
 80884a0:	f8d5 112c 	ldr.w	r1, [r5, #300]	; 0x12c
 80884a4:	9307      	str	r3, [sp, #28]
 80884a6:	f895 3128 	ldrb.w	r3, [r5, #296]	; 0x128
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 80884aa:	4658      	mov	r0, fp
    else
    {
        if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 80884ac:	9109      	str	r1, [sp, #36]	; 0x24
 80884ae:	9308      	str	r3, [sp, #32]
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 80884b0:	f7ff f9d6 	bl	8087860 <mbedtls_md_get_size>
    else
    {
        if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 80884b4:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
 80884b8:	9b08      	ldr	r3, [sp, #32]
 80884ba:	9203      	str	r2, [sp, #12]
 80884bc:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
 80884c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80884c2:	9202      	str	r2, [sp, #8]
 80884c4:	aa0c      	add	r2, sp, #48	; 0x30
 80884c6:	9001      	str	r0, [sp, #4]
 80884c8:	9200      	str	r2, [sp, #0]
 80884ca:	9807      	ldr	r0, [sp, #28]
 80884cc:	464a      	mov	r2, r9
 80884ce:	f003 ff3b 	bl	808c348 <mbedtls_pk_verify_ext>
 80884d2:	b118      	cbz	r0, 80884dc <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xe8>
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
                           child->sig.p, child->sig.len ) != 0 )
        {
            *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 80884d4:	6823      	ldr	r3, [r4, #0]
 80884d6:	f043 0308 	orr.w	r3, r3, #8
 80884da:	6023      	str	r3, [r4, #0]
        }
    }

#if defined(MBEDTLS_X509_CRL_PARSE_C)
    /* Check trusted CA's CRL for the given crt */
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
 80884dc:	4643      	mov	r3, r8
 80884de:	4652      	mov	r2, sl
 80884e0:	4639      	mov	r1, r7
 80884e2:	4628      	mov	r0, r5
 80884e4:	f7ff fe03 	bl	80880ee <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile>
 80884e8:	6823      	ldr	r3, [r4, #0]
#endif

    /* Look for a grandparent in trusted CAs */
    for( grandparent = trust_ca;
 80884ea:	f8dd 9018 	ldr.w	r9, [sp, #24]
        }
    }

#if defined(MBEDTLS_X509_CRL_PARSE_C)
    /* Check trusted CA's CRL for the given crt */
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
 80884ee:	4318      	orrs	r0, r3
 80884f0:	6020      	str	r0, [r4, #0]
#endif

    /* Look for a grandparent in trusted CAs */
    for( grandparent = trust_ca;
         grandparent != NULL;
 80884f2:	f1b9 0f00 	cmp.w	r9, #0
 80884f6:	d029      	beq.n	808854c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x158>
         grandparent = grandparent->next )
    {
        if( x509_crt_check_parent( parent, grandparent,
 80884f8:	fab6 f386 	clz	r3, r6
 80884fc:	2200      	movs	r2, #0
 80884fe:	095b      	lsrs	r3, r3, #5
 8088500:	4649      	mov	r1, r9
 8088502:	4638      	mov	r0, r7
 8088504:	f7ff fda8 	bl	8088058 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 8088508:	b190      	cbz	r0, 8088530 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x13c>
    /* Check trusted CA's CRL for the given crt */
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
#endif

    /* Look for a grandparent in trusted CAs */
    for( grandparent = trust_ca;
 808850a:	f8d9 9130 	ldr.w	r9, [r9, #304]	; 0x130
 808850e:	e7f0      	b.n	80884f2 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xfe>

    /* path_cnt is 0 for the first intermediate CA */
    if( 1 + path_cnt > MBEDTLS_X509_MAX_INTERMEDIATE_CA )
    {
        /* return immediately as the goal is to avoid unbounded recursion */
        return( MBEDTLS_ERR_X509_FATAL_ERROR );
 8088510:	4838      	ldr	r0, [pc, #224]	; (80885f4 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x200>)
 8088512:	e06b      	b.n	80885ec <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1f8>
    mbedtls_x509_crt *grandparent;
    const mbedtls_md_info_t *md_info;

    /* Counting intermediate self signed certificates */
    if( ( path_cnt != 0 ) && x509_name_cmp( &child->issuer, &child->subject ) == 0 )
        self_cnt++;
 8088514:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8088516:	3301      	adds	r3, #1
 8088518:	9328      	str	r3, [sp, #160]	; 0xa0
 808851a:	e780      	b.n	808841e <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x2a>

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;

    if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
 808851c:	6823      	ldr	r3, [r4, #0]
 808851e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8088522:	6023      	str	r3, [r4, #0]
 8088524:	e798      	b.n	8088458 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x64>

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 8088526:	6823      	ldr	r3, [r4, #0]
 8088528:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 808852c:	6023      	str	r3, [r4, #0]
 808852e:	e79c      	b.n	808846a <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x76>
    }

    if( grandparent != NULL )
    {
        ret = x509_crt_verify_top( parent, grandparent, ca_crl, profile,
                                path_cnt + 1, self_cnt, &parent_flags, f_vrfy, p_vrfy );
 8088530:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8088532:	4652      	mov	r2, sl
 8088534:	9304      	str	r3, [sp, #16]
 8088536:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8088538:	4649      	mov	r1, r9
 808853a:	9303      	str	r3, [sp, #12]
 808853c:	ab0b      	add	r3, sp, #44	; 0x2c
 808853e:	9302      	str	r3, [sp, #8]
 8088540:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8088542:	9301      	str	r3, [sp, #4]
 8088544:	1c73      	adds	r3, r6, #1
 8088546:	9300      	str	r3, [sp, #0]
 8088548:	4643      	mov	r3, r8
 808854a:	e03b      	b.n	80885c4 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1d0>
             grandparent = grandparent->next )
        {
            /* +2 because the current step is not yet accounted for
             * and because max_pathlen is one higher than it should be.
             * Also self signed certificates do not count to the limit. */
            if( grandparent->max_pathlen > 0 &&
 808854c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 808854e:	f106 0b02 	add.w	fp, r6, #2
            return( ret );
    }
    else
    {
        /* Look for a grandparent upwards the chain */
        for( grandparent = parent->next;
 8088552:	f8d7 9130 	ldr.w	r9, [r7, #304]	; 0x130
             grandparent = grandparent->next )
        {
            /* +2 because the current step is not yet accounted for
             * and because max_pathlen is one higher than it should be.
             * Also self signed certificates do not count to the limit. */
            if( grandparent->max_pathlen > 0 &&
 8088556:	ebc3 0b0b 	rsb	fp, r3, fp
    }
    else
    {
        /* Look for a grandparent upwards the chain */
        for( grandparent = parent->next;
             grandparent != NULL;
 808855a:	f1b9 0f00 	cmp.w	r9, #0
 808855e:	d024      	beq.n	80885aa <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1b6>
             grandparent = grandparent->next )
        {
            /* +2 because the current step is not yet accounted for
             * and because max_pathlen is one higher than it should be.
             * Also self signed certificates do not count to the limit. */
            if( grandparent->max_pathlen > 0 &&
 8088560:	f8d9 3100 	ldr.w	r3, [r9, #256]	; 0x100
 8088564:	2b00      	cmp	r3, #0
 8088566:	dd01      	ble.n	808856c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x178>
 8088568:	455b      	cmp	r3, fp
 808856a:	db08      	blt.n	808857e <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x18a>
                grandparent->max_pathlen < 2 + path_cnt - self_cnt )
            {
                continue;
            }

            if( x509_crt_check_parent( parent, grandparent,
 808856c:	fab6 f386 	clz	r3, r6
 8088570:	2200      	movs	r2, #0
 8088572:	095b      	lsrs	r3, r3, #5
 8088574:	4649      	mov	r1, r9
 8088576:	4638      	mov	r0, r7
 8088578:	f7ff fd6e 	bl	8088058 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 808857c:	b110      	cbz	r0, 8088584 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x190>
            return( ret );
    }
    else
    {
        /* Look for a grandparent upwards the chain */
        for( grandparent = parent->next;
 808857e:	f8d9 9130 	ldr.w	r9, [r9, #304]	; 0x130
 8088582:	e7ea      	b.n	808855a <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x166>
        /* Is our parent part of the chain or at the top? */
        if( grandparent != NULL )
        {
            ret = x509_crt_verify_child( parent, grandparent, trust_ca, ca_crl,
                                         profile, path_cnt + 1, self_cnt, &parent_flags,
                                         f_vrfy, p_vrfy );
 8088584:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8088586:	f8cd 8000 	str.w	r8, [sp]
 808858a:	9305      	str	r3, [sp, #20]
 808858c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 808858e:	9a06      	ldr	r2, [sp, #24]
 8088590:	9304      	str	r3, [sp, #16]
 8088592:	ab0b      	add	r3, sp, #44	; 0x2c
 8088594:	9303      	str	r3, [sp, #12]
 8088596:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8088598:	4649      	mov	r1, r9
 808859a:	9302      	str	r3, [sp, #8]
 808859c:	1c73      	adds	r3, r6, #1
 808859e:	9301      	str	r3, [sp, #4]
 80885a0:	4638      	mov	r0, r7
 80885a2:	4653      	mov	r3, sl
 80885a4:	f7ff ff26 	bl	80883f4 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>
 80885a8:	e00f      	b.n	80885ca <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1d6>
        }
        else
        {
            ret = x509_crt_verify_top( parent, trust_ca, ca_crl, profile,
                                       path_cnt + 1, self_cnt, &parent_flags,
                                       f_vrfy, p_vrfy );
 80885aa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80885ac:	4652      	mov	r2, sl
 80885ae:	9304      	str	r3, [sp, #16]
 80885b0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80885b2:	9906      	ldr	r1, [sp, #24]
 80885b4:	9303      	str	r3, [sp, #12]
 80885b6:	ab0b      	add	r3, sp, #44	; 0x2c
 80885b8:	9302      	str	r3, [sp, #8]
 80885ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80885bc:	9301      	str	r3, [sp, #4]
 80885be:	1c73      	adds	r3, r6, #1
 80885c0:	9300      	str	r3, [sp, #0]
 80885c2:	4643      	mov	r3, r8
 80885c4:	4638      	mov	r0, r7
 80885c6:	f7ff fe1f 	bl	8088208 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>
            if( ret != 0 )
 80885ca:	b978      	cbnz	r0, 80885ec <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1f8>
                return( ret );
        }
    }

    /* child is verified to be a child of the parent, call verify callback */
    if( NULL != f_vrfy )
 80885cc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80885ce:	b92b      	cbnz	r3, 80885dc <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1e8>
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );

    *flags |= parent_flags;
 80885d0:	6822      	ldr	r2, [r4, #0]
 80885d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    return( 0 );
 80885d4:	2000      	movs	r0, #0
    /* child is verified to be a child of the parent, call verify callback */
    if( NULL != f_vrfy )
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );

    *flags |= parent_flags;
 80885d6:	4313      	orrs	r3, r2
 80885d8:	6023      	str	r3, [r4, #0]

    return( 0 );
 80885da:	e007      	b.n	80885ec <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1f8>
        }
    }

    /* child is verified to be a child of the parent, call verify callback */
    if( NULL != f_vrfy )
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
 80885dc:	4629      	mov	r1, r5
 80885de:	4623      	mov	r3, r4
 80885e0:	4632      	mov	r2, r6
 80885e2:	982b      	ldr	r0, [sp, #172]	; 0xac
 80885e4:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80885e6:	47a8      	blx	r5
 80885e8:	2800      	cmp	r0, #0
 80885ea:	d0f1      	beq.n	80885d0 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1dc>
            return( ret );

    *flags |= parent_flags;

    return( 0 );
}
 80885ec:	b01d      	add	sp, #116	; 0x74
 80885ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80885f2:	bf00      	nop
 80885f4:	ffffd000 	.word	0xffffd000

080885f8 <mbedtls_x509_crt_verify_with_profile>:
                     mbedtls_x509_crl *ca_crl,
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
 80885f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80885fc:	b089      	sub	sp, #36	; 0x24
 80885fe:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8088600:	4693      	mov	fp, r2
    mbedtls_x509_crt *parent;
    mbedtls_x509_name *name;
    mbedtls_x509_sequence *cur = NULL;
    mbedtls_pk_type_t pk_type;

    *flags = 0;
 8088602:	2200      	movs	r2, #0
                     mbedtls_x509_crl *ca_crl,
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
 8088604:	4605      	mov	r5, r0
 8088606:	468a      	mov	sl, r1
 8088608:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
    mbedtls_x509_crt *parent;
    mbedtls_x509_name *name;
    mbedtls_x509_sequence *cur = NULL;
    mbedtls_pk_type_t pk_type;

    *flags = 0;
 808860c:	6022      	str	r2, [r4, #0]

    if( profile == NULL )
 808860e:	461f      	mov	r7, r3
 8088610:	2b00      	cmp	r3, #0
 8088612:	d06e      	beq.n	80886f2 <mbedtls_x509_crt_verify_with_profile+0xfa>
    {
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
        goto exit;
    }

    if( cn != NULL )
 8088614:	f1b8 0f00 	cmp.w	r8, #0
 8088618:	d048      	beq.n	80886ac <mbedtls_x509_crt_verify_with_profile+0xb4>
    {
        name = &crt->subject;
        cn_len = strlen( cn );
 808861a:	4640      	mov	r0, r8
 808861c:	f00b fcfd 	bl	809401a <strlen>

        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 8088620:	f8d5 30f8 	ldr.w	r3, [r5, #248]	; 0xf8
    }

    if( cn != NULL )
    {
        name = &crt->subject;
        cn_len = strlen( cn );
 8088624:	4681      	mov	r9, r0

        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 8088626:	069b      	lsls	r3, r3, #26
 8088628:	d50d      	bpl.n	8088646 <mbedtls_x509_crt_verify_with_profile+0x4e>
        {
            cur = &crt->subject_alt_names;
 808862a:	f105 06e8 	add.w	r6, r5, #232	; 0xe8

            while( cur != NULL )
            {
                if( cur->buf.len == cn_len &&
 808862e:	6873      	ldr	r3, [r6, #4]
 8088630:	4599      	cmp	r9, r3
 8088632:	d12c      	bne.n	808868e <mbedtls_x509_crt_verify_with_profile+0x96>
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
 8088634:	464a      	mov	r2, r9
 8088636:	68b1      	ldr	r1, [r6, #8]
 8088638:	4640      	mov	r0, r8
 808863a:	9307      	str	r3, [sp, #28]
 808863c:	f7ff f91b 	bl	8087876 <_ZL15x509_memcasecmpPKvS0_j>
        {
            cur = &crt->subject_alt_names;

            while( cur != NULL )
            {
                if( cur->buf.len == cn_len &&
 8088640:	9b07      	ldr	r3, [sp, #28]
 8088642:	bb20      	cbnz	r0, 808868e <mbedtls_x509_crt_verify_with_profile+0x96>
 8088644:	e032      	b.n	80886ac <mbedtls_x509_crt_verify_with_profile+0xb4>
        goto exit;
    }

    if( cn != NULL )
    {
        name = &crt->subject;
 8088646:	f105 066c 	add.w	r6, r5, #108	; 0x6c
        }
        else
        {
            while( name != NULL )
            {
                if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 )
 808864a:	6872      	ldr	r2, [r6, #4]
 808864c:	2a03      	cmp	r2, #3
 808864e:	d118      	bne.n	8088682 <mbedtls_x509_crt_verify_with_profile+0x8a>
 8088650:	68b1      	ldr	r1, [r6, #8]
 8088652:	4855      	ldr	r0, [pc, #340]	; (80887a8 <mbedtls_x509_crt_verify_with_profile+0x1b0>)
 8088654:	f00b fc76 	bl	8093f44 <memcmp>
 8088658:	b998      	cbnz	r0, 8088682 <mbedtls_x509_crt_verify_with_profile+0x8a>
                {
                    if( name->val.len == cn_len &&
 808865a:	6933      	ldr	r3, [r6, #16]
 808865c:	4599      	cmp	r9, r3
 808865e:	d107      	bne.n	8088670 <mbedtls_x509_crt_verify_with_profile+0x78>
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
 8088660:	464a      	mov	r2, r9
 8088662:	4641      	mov	r1, r8
 8088664:	6970      	ldr	r0, [r6, #20]
 8088666:	9307      	str	r3, [sp, #28]
 8088668:	f7ff f905 	bl	8087876 <_ZL15x509_memcasecmpPKvS0_j>
        {
            while( name != NULL )
            {
                if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 )
                {
                    if( name->val.len == cn_len &&
 808866c:	9b07      	ldr	r3, [sp, #28]
 808866e:	b1e8      	cbz	r0, 80886ac <mbedtls_x509_crt_verify_with_profile+0xb4>
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
                        break;

                    if( name->val.len > 2 &&
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
 8088670:	2b02      	cmp	r3, #2
 8088672:	d906      	bls.n	8088682 <mbedtls_x509_crt_verify_with_profile+0x8a>
 8088674:	2202      	movs	r2, #2
 8088676:	494d      	ldr	r1, [pc, #308]	; (80887ac <mbedtls_x509_crt_verify_with_profile+0x1b4>)
 8088678:	6970      	ldr	r0, [r6, #20]
 808867a:	f00b fc63 	bl	8093f44 <memcmp>
                {
                    if( name->val.len == cn_len &&
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
                        break;

                    if( name->val.len > 2 &&
 808867e:	2800      	cmp	r0, #0
 8088680:	d053      	beq.n	808872a <mbedtls_x509_crt_verify_with_profile+0x132>
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
                        x509_check_wildcard( cn, &name->val ) == 0 )
                        break;
                }

                name = name->next;
 8088682:	69b6      	ldr	r6, [r6, #24]
            if( cur == NULL )
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
        }
        else
        {
            while( name != NULL )
 8088684:	2e00      	cmp	r6, #0
 8088686:	d1e0      	bne.n	808864a <mbedtls_x509_crt_verify_with_profile+0x52>

                cur = cur->next;
            }

            if( cur == NULL )
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
 8088688:	2304      	movs	r3, #4
 808868a:	6023      	str	r3, [r4, #0]
 808868c:	e00e      	b.n	80886ac <mbedtls_x509_crt_verify_with_profile+0xb4>
                if( cur->buf.len == cn_len &&
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
                    break;

                if( cur->buf.len > 2 &&
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
 808868e:	2b02      	cmp	r3, #2
 8088690:	d947      	bls.n	8088722 <mbedtls_x509_crt_verify_with_profile+0x12a>
 8088692:	2202      	movs	r2, #2
 8088694:	4945      	ldr	r1, [pc, #276]	; (80887ac <mbedtls_x509_crt_verify_with_profile+0x1b4>)
 8088696:	68b0      	ldr	r0, [r6, #8]
 8088698:	f00b fc54 	bl	8093f44 <memcmp>
            {
                if( cur->buf.len == cn_len &&
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
                    break;

                if( cur->buf.len > 2 &&
 808869c:	2800      	cmp	r0, #0
 808869e:	d140      	bne.n	8088722 <mbedtls_x509_crt_verify_with_profile+0x12a>
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
                    x509_check_wildcard( cn, &cur->buf ) == 0 )
 80886a0:	4631      	mov	r1, r6
 80886a2:	4640      	mov	r0, r8
 80886a4:	f7ff f93d 	bl	8087922 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf>
                if( cur->buf.len == cn_len &&
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
                    break;

                if( cur->buf.len > 2 &&
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
 80886a8:	2800      	cmp	r0, #0
 80886aa:	d13a      	bne.n	8088722 <mbedtls_x509_crt_verify_with_profile+0x12a>
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
        }
    }

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );
 80886ac:	f105 06bc 	add.w	r6, r5, #188	; 0xbc
 80886b0:	4630      	mov	r0, r6
 80886b2:	f003 feaf 	bl	808c414 <mbedtls_pk_get_type>
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 80886b6:	2301      	movs	r3, #1
 80886b8:	1e42      	subs	r2, r0, #1
 80886ba:	4093      	lsls	r3, r2
 80886bc:	687a      	ldr	r2, [r7, #4]
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
        }
    }

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );
 80886be:	4601      	mov	r1, r0
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 80886c0:	4213      	tst	r3, r2
 80886c2:	d03a      	beq.n	808873a <mbedtls_x509_crt_verify_with_profile+0x142>
    pk_type = mbedtls_pk_get_type( &crt->pk );

    if( x509_profile_check_pk_alg( profile, pk_type ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    if( x509_profile_check_key( profile, pk_type, &crt->pk ) != 0 )
 80886c4:	4632      	mov	r2, r6
 80886c6:	f107 000c 	add.w	r0, r7, #12
 80886ca:	f7ff f971 	bl	80879b0 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>
 80886ce:	b118      	cbz	r0, 80886d8 <mbedtls_x509_crt_verify_with_profile+0xe0>
        *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 80886d0:	6823      	ldr	r3, [r4, #0]
 80886d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80886d6:	6023      	str	r3, [r4, #0]
                     mbedtls_x509_crl *ca_crl,
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
 80886d8:	4656      	mov	r6, sl

    if( x509_profile_check_key( profile, pk_type, &crt->pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

    /* Look for a parent in trusted CAs */
    for( parent = trust_ca; parent != NULL; parent = parent->next )
 80886da:	2e00      	cmp	r6, #0
 80886dc:	d03d      	beq.n	808875a <mbedtls_x509_crt_verify_with_profile+0x162>
    {
        if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
 80886de:	2301      	movs	r3, #1
 80886e0:	2200      	movs	r2, #0
 80886e2:	4631      	mov	r1, r6
 80886e4:	4628      	mov	r0, r5
 80886e6:	f7ff fcb7 	bl	8088058 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 80886ea:	b358      	cbz	r0, 8088744 <mbedtls_x509_crt_verify_with_profile+0x14c>

    if( x509_profile_check_key( profile, pk_type, &crt->pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

    /* Look for a parent in trusted CAs */
    for( parent = trust_ca; parent != NULL; parent = parent->next )
 80886ec:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
 80886f0:	e7f3      	b.n	80886da <mbedtls_x509_crt_verify_with_profile+0xe2>

    *flags = 0;

    if( profile == NULL )
    {
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
 80886f2:	482f      	ldr	r0, [pc, #188]	; (80887b0 <mbedtls_x509_crt_verify_with_profile+0x1b8>)
 80886f4:	e011      	b.n	808871a <mbedtls_x509_crt_verify_with_profile+0x122>

        /* Are we part of the chain or at the top? */
        if( parent != NULL )
        {
            ret = x509_crt_verify_child( crt, parent, trust_ca, ca_crl, profile,
                                         pathlen, selfsigned, flags, f_vrfy, p_vrfy );
 80886f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80886f8:	9002      	str	r0, [sp, #8]
 80886fa:	9305      	str	r3, [sp, #20]
 80886fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80886fe:	9001      	str	r0, [sp, #4]
 8088700:	9304      	str	r3, [sp, #16]
 8088702:	9403      	str	r4, [sp, #12]
 8088704:	9700      	str	r7, [sp, #0]
 8088706:	465b      	mov	r3, fp
 8088708:	4652      	mov	r2, sl
 808870a:	4631      	mov	r1, r6
 808870c:	4628      	mov	r0, r5
 808870e:	f7ff fe71 	bl	80883f4 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>

exit:
    /* prevent misuse of the vrfy callback - VERIFY_FAILED would be ignored by
     * the SSL module for authmode optional, but non-zero return from the
     * callback means a fatal error so it shouldn't be ignored */
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
 8088712:	f510 5f1c 	cmn.w	r0, #9984	; 0x2700
 8088716:	d12e      	bne.n	8088776 <mbedtls_x509_crt_verify_with_profile+0x17e>
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;
 8088718:	4826      	ldr	r0, [pc, #152]	; (80887b4 <mbedtls_x509_crt_verify_with_profile+0x1bc>)

    if( ret != 0 )
    {
        *flags = (uint32_t) -1;
 808871a:	f04f 33ff 	mov.w	r3, #4294967295
 808871e:	6023      	str	r3, [r4, #0]
        return( ret );
 8088720:	e03f      	b.n	80887a2 <mbedtls_x509_crt_verify_with_profile+0x1aa>
                    x509_check_wildcard( cn, &cur->buf ) == 0 )
                {
                    break;
                }

                cur = cur->next;
 8088722:	68f6      	ldr	r6, [r6, #12]

        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
        {
            cur = &crt->subject_alt_names;

            while( cur != NULL )
 8088724:	2e00      	cmp	r6, #0
 8088726:	d182      	bne.n	808862e <mbedtls_x509_crt_verify_with_profile+0x36>
 8088728:	e7ae      	b.n	8088688 <mbedtls_x509_crt_verify_with_profile+0x90>
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
                        break;

                    if( name->val.len > 2 &&
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
                        x509_check_wildcard( cn, &name->val ) == 0 )
 808872a:	f106 010c 	add.w	r1, r6, #12
 808872e:	4640      	mov	r0, r8
 8088730:	f7ff f8f7 	bl	8087922 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf>
                    if( name->val.len == cn_len &&
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
                        break;

                    if( name->val.len > 2 &&
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
 8088734:	2800      	cmp	r0, #0
 8088736:	d1a4      	bne.n	8088682 <mbedtls_x509_crt_verify_with_profile+0x8a>
 8088738:	e7b8      	b.n	80886ac <mbedtls_x509_crt_verify_with_profile+0xb4>

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );

    if( x509_profile_check_pk_alg( profile, pk_type ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 808873a:	6823      	ldr	r3, [r4, #0]
 808873c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8088740:	6023      	str	r3, [r4, #0]
 8088742:	e7bf      	b.n	80886c4 <mbedtls_x509_crt_verify_with_profile+0xcc>
    }

    if( parent != NULL )
    {
        ret = x509_crt_verify_top( crt, parent, ca_crl, profile,
                                   pathlen, selfsigned, flags, f_vrfy, p_vrfy );
 8088744:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8088746:	9402      	str	r4, [sp, #8]
 8088748:	9304      	str	r3, [sp, #16]
 808874a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808874c:	9001      	str	r0, [sp, #4]
 808874e:	9303      	str	r3, [sp, #12]
 8088750:	9000      	str	r0, [sp, #0]
 8088752:	463b      	mov	r3, r7
 8088754:	465a      	mov	r2, fp
 8088756:	4631      	mov	r1, r6
 8088758:	e01f      	b.n	808879a <mbedtls_x509_crt_verify_with_profile+0x1a2>
            goto exit;
    }
    else
    {
        /* Look for a parent upwards the chain */
        for( parent = crt->next; parent != NULL; parent = parent->next )
 808875a:	f8d5 6130 	ldr.w	r6, [r5, #304]	; 0x130
 808875e:	b196      	cbz	r6, 8088786 <mbedtls_x509_crt_verify_with_profile+0x18e>
            if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
 8088760:	2301      	movs	r3, #1
 8088762:	2200      	movs	r2, #0
 8088764:	4631      	mov	r1, r6
 8088766:	4628      	mov	r0, r5
 8088768:	f7ff fc76 	bl	8088058 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 808876c:	2800      	cmp	r0, #0
 808876e:	d0c2      	beq.n	80886f6 <mbedtls_x509_crt_verify_with_profile+0xfe>
            goto exit;
    }
    else
    {
        /* Look for a parent upwards the chain */
        for( parent = crt->next; parent != NULL; parent = parent->next )
 8088770:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
 8088774:	e7f3      	b.n	808875e <mbedtls_x509_crt_verify_with_profile+0x166>
     * the SSL module for authmode optional, but non-zero return from the
     * callback means a fatal error so it shouldn't be ignored */
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;

    if( ret != 0 )
 8088776:	2800      	cmp	r0, #0
 8088778:	d1cf      	bne.n	808871a <mbedtls_x509_crt_verify_with_profile+0x122>
    {
        *flags = (uint32_t) -1;
        return( ret );
    }

    if( *flags != 0 )
 808877a:	6823      	ldr	r3, [r4, #0]
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );

    return( 0 );
 808877c:	480e      	ldr	r0, [pc, #56]	; (80887b8 <mbedtls_x509_crt_verify_with_profile+0x1c0>)
 808877e:	2b00      	cmp	r3, #0
 8088780:	bf08      	it	eq
 8088782:	2000      	moveq	r0, #0
 8088784:	e00d      	b.n	80887a2 <mbedtls_x509_crt_verify_with_profile+0x1aa>
                goto exit;
        }
        else
        {
            ret = x509_crt_verify_top( crt, trust_ca, ca_crl, profile,
                                       pathlen, selfsigned, flags, f_vrfy, p_vrfy );
 8088786:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8088788:	465a      	mov	r2, fp
 808878a:	9304      	str	r3, [sp, #16]
 808878c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808878e:	4651      	mov	r1, sl
 8088790:	9303      	str	r3, [sp, #12]
 8088792:	463b      	mov	r3, r7
 8088794:	9402      	str	r4, [sp, #8]
 8088796:	9601      	str	r6, [sp, #4]
 8088798:	9600      	str	r6, [sp, #0]
 808879a:	4628      	mov	r0, r5
 808879c:	f7ff fd34 	bl	8088208 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>
 80887a0:	e7b7      	b.n	8088712 <mbedtls_x509_crt_verify_with_profile+0x11a>

    if( *flags != 0 )
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );

    return( 0 );
}
 80887a2:	b009      	add	sp, #36	; 0x24
 80887a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80887a8:	08096eac 	.word	0x08096eac
 80887ac:	08097f3e 	.word	0x08097f3e
 80887b0:	ffffd800 	.word	0xffffd800
 80887b4:	ffffd000 	.word	0xffffd000
 80887b8:	ffffd900 	.word	0xffffd900

080887bc <mbedtls_x509_crt_init>:
/*
 * Initialize a certificate chain
 */
void mbedtls_x509_crt_init( mbedtls_x509_crt *crt )
{
    memset( crt, 0, sizeof(mbedtls_x509_crt) );
 80887bc:	f44f 729a 	mov.w	r2, #308	; 0x134
 80887c0:	2100      	movs	r1, #0
 80887c2:	f00b bbf4 	b.w	8093fae <memset>

080887c6 <mbedtls_x509_crt_free>:

/*
 * Unallocate all certificate data
 */
void mbedtls_x509_crt_free( mbedtls_x509_crt *crt )
{
 80887c6:	b570      	push	{r4, r5, r6, lr}
    mbedtls_x509_name *name_cur;
    mbedtls_x509_name *name_prv;
    mbedtls_x509_sequence *seq_cur;
    mbedtls_x509_sequence *seq_prv;

    if( crt == NULL )
 80887c8:	4605      	mov	r5, r0
 80887ca:	2800      	cmp	r0, #0
 80887cc:	d053      	beq.n	8088876 <mbedtls_x509_crt_free+0xb0>
 80887ce:	4604      	mov	r4, r0
        return;

    do
    {
        mbedtls_pk_free( &cert_cur->pk );
 80887d0:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 80887d4:	f003 fd01 	bl	808c1da <mbedtls_pk_free>

#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
#endif

        name_cur = cert_cur->issuer.next;
 80887d8:	6e62      	ldr	r2, [r4, #100]	; 0x64
        while( name_cur != NULL )
 80887da:	b14a      	cbz	r2, 80887f0 <mbedtls_x509_crt_free+0x2a>
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 80887dc:	4610      	mov	r0, r2
 80887de:	2120      	movs	r1, #32

        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
 80887e0:	6996      	ldr	r6, [r2, #24]
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 80887e2:	f7ff f840 	bl	8087866 <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( name_prv );
 80887e6:	4610      	mov	r0, r2
 80887e8:	f008 fcb6 	bl	8091158 <free>

        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
 80887ec:	4632      	mov	r2, r6
#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
#endif

        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
 80887ee:	e7f4      	b.n	80887da <mbedtls_x509_crt_free+0x14>
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        name_cur = cert_cur->subject.next;
 80887f0:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
        while( name_cur != NULL )
 80887f4:	b14a      	cbz	r2, 808880a <mbedtls_x509_crt_free+0x44>
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 80887f6:	4610      	mov	r0, r2
 80887f8:	2120      	movs	r1, #32

        name_cur = cert_cur->subject.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
 80887fa:	6996      	ldr	r6, [r2, #24]
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 80887fc:	f7ff f833 	bl	8087866 <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( name_prv );
 8088800:	4610      	mov	r0, r2
 8088802:	f008 fca9 	bl	8091158 <free>

        name_cur = cert_cur->subject.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
 8088806:	4632      	mov	r2, r6
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        name_cur = cert_cur->subject.next;
        while( name_cur != NULL )
 8088808:	e7f4      	b.n	80887f4 <mbedtls_x509_crt_free+0x2e>
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        seq_cur = cert_cur->ext_key_usage.next;
 808880a:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
        while( seq_cur != NULL )
 808880e:	b14a      	cbz	r2, 8088824 <mbedtls_x509_crt_free+0x5e>
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 8088810:	4610      	mov	r0, r2
 8088812:	2110      	movs	r1, #16

        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
 8088814:	68d6      	ldr	r6, [r2, #12]
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 8088816:	f7ff f826 	bl	8087866 <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( seq_prv );
 808881a:	4610      	mov	r0, r2
 808881c:	f008 fc9c 	bl	8091158 <free>

        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
 8088820:	4632      	mov	r2, r6
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
 8088822:	e7f4      	b.n	808880e <mbedtls_x509_crt_free+0x48>
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        seq_cur = cert_cur->subject_alt_names.next;
 8088824:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
        while( seq_cur != NULL )
 8088828:	b14a      	cbz	r2, 808883e <mbedtls_x509_crt_free+0x78>
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 808882a:	4610      	mov	r0, r2
 808882c:	2110      	movs	r1, #16

        seq_cur = cert_cur->subject_alt_names.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
 808882e:	68d6      	ldr	r6, [r2, #12]
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 8088830:	f7ff f819 	bl	8087866 <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( seq_prv );
 8088834:	4610      	mov	r0, r2
 8088836:	f008 fc8f 	bl	8091158 <free>

        seq_cur = cert_cur->subject_alt_names.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
 808883a:	4632      	mov	r2, r6
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        seq_cur = cert_cur->subject_alt_names.next;
        while( seq_cur != NULL )
 808883c:	e7f4      	b.n	8088828 <mbedtls_x509_crt_free+0x62>
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        if( cert_cur->raw.p != NULL )
 808883e:	68a0      	ldr	r0, [r4, #8]
 8088840:	b128      	cbz	r0, 808884e <mbedtls_x509_crt_free+0x88>
        {
            mbedtls_zeroize( cert_cur->raw.p, cert_cur->raw.len );
 8088842:	6861      	ldr	r1, [r4, #4]
 8088844:	f7ff f80f 	bl	8087866 <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( cert_cur->raw.p );
 8088848:	68a0      	ldr	r0, [r4, #8]
 808884a:	f008 fc85 	bl	8091158 <free>
        }

        cert_cur = cert_cur->next;
 808884e:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    }
    while( cert_cur != NULL );
 8088852:	2c00      	cmp	r4, #0
 8088854:	d1bc      	bne.n	80887d0 <mbedtls_x509_crt_free+0xa>
 8088856:	462a      	mov	r2, r5
    do
    {
        cert_prv = cert_cur;
        cert_cur = cert_cur->next;

        mbedtls_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 8088858:	f44f 719a 	mov.w	r1, #308	; 0x134
 808885c:	4610      	mov	r0, r2

    cert_cur = crt;
    do
    {
        cert_prv = cert_cur;
        cert_cur = cert_cur->next;
 808885e:	f8d2 4130 	ldr.w	r4, [r2, #304]	; 0x130

        mbedtls_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 8088862:	f7ff f800 	bl	8087866 <_ZL15mbedtls_zeroizePvj>
        if( cert_prv != crt )
 8088866:	42aa      	cmp	r2, r5
 8088868:	d002      	beq.n	8088870 <mbedtls_x509_crt_free+0xaa>
            mbedtls_free( cert_prv );
 808886a:	4610      	mov	r0, r2
 808886c:	f008 fc74 	bl	8091158 <free>
    }
    while( cert_cur != NULL );
 8088870:	4622      	mov	r2, r4
 8088872:	2c00      	cmp	r4, #0
 8088874:	d1f0      	bne.n	8088858 <mbedtls_x509_crt_free+0x92>
 8088876:	bd70      	pop	{r4, r5, r6, pc}

08088878 <mbedtls_x509_crt_parse_der>:
 * Parse one X.509 certificate in DER format from a buffer and add them to a
 * chained list
 */
int mbedtls_x509_crt_parse_der( mbedtls_x509_crt *chain, const unsigned char *buf,
                        size_t buflen )
{
 8088878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808887c:	4688      	mov	r8, r1
 808887e:	b09b      	sub	sp, #108	; 0x6c
 8088880:	4615      	mov	r5, r2
    mbedtls_x509_crt *crt = chain, *prev = NULL;

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
 8088882:	4682      	mov	sl, r0
 8088884:	2800      	cmp	r0, #0
 8088886:	f000 812c 	beq.w	8088ae2 <mbedtls_x509_crt_parse_der+0x26a>
 808888a:	2900      	cmp	r1, #0
 808888c:	f000 8129 	beq.w	8088ae2 <mbedtls_x509_crt_parse_der+0x26a>
 8088890:	4604      	mov	r4, r0
 8088892:	f04f 0900 	mov.w	r9, #0
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    while( crt->version != 0 && crt->next != NULL )
 8088896:	69a3      	ldr	r3, [r4, #24]
 8088898:	b1a3      	cbz	r3, 80888c4 <mbedtls_x509_crt_parse_der+0x4c>
 808889a:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 808889e:	46a1      	mov	r9, r4
 80888a0:	b10b      	cbz	r3, 80888a6 <mbedtls_x509_crt_parse_der+0x2e>
 80888a2:	461c      	mov	r4, r3
 80888a4:	e7f7      	b.n	8088896 <mbedtls_x509_crt_parse_der+0x1e>
    /*
     * Add new certificate on the end of the chain if needed.
     */
    if( crt->version != 0 && crt->next == NULL )
    {
        crt->next = (mbedtls_x509_crt *)mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );
 80888a6:	f44f 719a 	mov.w	r1, #308	; 0x134
 80888aa:	2001      	movs	r0, #1
 80888ac:	f00b fa32 	bl	8093d14 <calloc>
 80888b0:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130

        if( crt->next == NULL )
 80888b4:	2800      	cmp	r0, #0
 80888b6:	f000 8116 	beq.w	8088ae6 <mbedtls_x509_crt_parse_der+0x26e>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );

        prev = crt;
        mbedtls_x509_crt_init( crt->next );
 80888ba:	f7ff ff7f 	bl	80887bc <mbedtls_x509_crt_init>
 80888be:	46a1      	mov	r9, r4
        crt = crt->next;
 80888c0:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    int ret;
    size_t len;
    unsigned char *p, *end, *crt_end;
    mbedtls_x509_buf sig_params1, sig_params2, sig_oid2;

    memset( &sig_params1, 0, sizeof( mbedtls_x509_buf ) );
 80888c4:	2300      	movs	r3, #0
 80888c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80888c8:	930c      	str	r3, [sp, #48]	; 0x30
 80888ca:	930d      	str	r3, [sp, #52]	; 0x34
    memset( &sig_params2, 0, sizeof( mbedtls_x509_buf ) );
 80888cc:	930e      	str	r3, [sp, #56]	; 0x38
 80888ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80888d0:	9310      	str	r3, [sp, #64]	; 0x40
    memset( &sig_oid2, 0, sizeof( mbedtls_x509_buf ) );
 80888d2:	9311      	str	r3, [sp, #68]	; 0x44
 80888d4:	9312      	str	r3, [sp, #72]	; 0x48
 80888d6:	9313      	str	r3, [sp, #76]	; 0x4c

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
 80888d8:	2c00      	cmp	r4, #0
 80888da:	f000 80e9 	beq.w	8088ab0 <mbedtls_x509_crt_parse_der+0x238>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    // Use the original buffer until we figure out actual length
    p = (unsigned char*) buf;
    len = buflen;
 80888de:	ae1a      	add	r6, sp, #104	; 0x68
 80888e0:	f846 5d54 	str.w	r5, [r6, #-84]!
    end = p + len;
 80888e4:	eb08 0b05 	add.w	fp, r8, r5
     * Certificate  ::=  SEQUENCE  {
     *      tbsCertificate       TBSCertificate,
     *      signatureAlgorithm   AlgorithmIdentifier,
     *      signatureValue       BIT STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80888e8:	2330      	movs	r3, #48	; 0x30
 80888ea:	4632      	mov	r2, r6
 80888ec:	4659      	mov	r1, fp
 80888ee:	a806      	add	r0, sp, #24
     */
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    // Use the original buffer until we figure out actual length
    p = (unsigned char*) buf;
 80888f0:	f8cd 8018 	str.w	r8, [sp, #24]
     * Certificate  ::=  SEQUENCE  {
     *      tbsCertificate       TBSCertificate,
     *      signatureAlgorithm   AlgorithmIdentifier,
     *      signatureValue       BIT STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80888f4:	f7fa fcee 	bl	80832d4 <mbedtls_asn1_get_tag>
 80888f8:	b120      	cbz	r0, 8088904 <mbedtls_x509_crt_parse_der+0x8c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 80888fa:	4620      	mov	r0, r4
 80888fc:	f7ff ff63 	bl	80887c6 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT );
 8088900:	4da3      	ldr	r5, [pc, #652]	; (8088b90 <mbedtls_x509_crt_parse_der+0x318>)
 8088902:	e0e1      	b.n	8088ac8 <mbedtls_x509_crt_parse_der+0x250>
    }

    if( len > (size_t) ( end - p ) )
 8088904:	9d06      	ldr	r5, [sp, #24]
 8088906:	9f05      	ldr	r7, [sp, #20]
 8088908:	ebc5 0b0b 	rsb	fp, r5, fp
 808890c:	45bb      	cmp	fp, r7
 808890e:	f0c0 80ca 	bcc.w	8088aa6 <mbedtls_x509_crt_parse_der+0x22e>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    }
    crt_end = p + len;

    // Create and populate a new buffer for the raw field
    crt->raw.len = crt_end - buf;
 8088912:	443d      	add	r5, r7
 8088914:	ebc8 0505 	rsb	r5, r8, r5
 8088918:	6065      	str	r5, [r4, #4]
    crt->raw.p = p = (unsigned char*)mbedtls_calloc( 1, crt->raw.len );
 808891a:	4629      	mov	r1, r5
 808891c:	2001      	movs	r0, #1
 808891e:	f00b f9f9 	bl	8093d14 <calloc>
 8088922:	4683      	mov	fp, r0
 8088924:	9006      	str	r0, [sp, #24]
 8088926:	60a0      	str	r0, [r4, #8]
    if( p == NULL )
 8088928:	2800      	cmp	r0, #0
 808892a:	f000 80c3 	beq.w	8088ab4 <mbedtls_x509_crt_parse_der+0x23c>
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );
 808892e:	462a      	mov	r2, r5

    // Direct pointers to the new buffer
    p += crt->raw.len - len;
 8088930:	1bed      	subs	r5, r5, r7
 8088932:	445d      	add	r5, fp
    crt->raw.len = crt_end - buf;
    crt->raw.p = p = (unsigned char*)mbedtls_calloc( 1, crt->raw.len );
    if( p == NULL )
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );
 8088934:	4641      	mov	r1, r8

    // Direct pointers to the new buffer
    p += crt->raw.len - len;
    end = crt_end = p + len;
 8088936:	442f      	add	r7, r5
    crt->raw.len = crt_end - buf;
    crt->raw.p = p = (unsigned char*)mbedtls_calloc( 1, crt->raw.len );
    if( p == NULL )
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );
 8088938:	f00b fb13 	bl	8093f62 <memcpy>
    end = crt_end = p + len;

    /*
     * TBSCertificate  ::=  SEQUENCE  {
     */
    crt->tbs.p = p;
 808893c:	6165      	str	r5, [r4, #20]

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 808893e:	2330      	movs	r3, #48	; 0x30
 8088940:	4632      	mov	r2, r6
 8088942:	4639      	mov	r1, r7
 8088944:	a806      	add	r0, sp, #24
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );

    // Direct pointers to the new buffer
    p += crt->raw.len - len;
 8088946:	9506      	str	r5, [sp, #24]
    /*
     * TBSCertificate  ::=  SEQUENCE  {
     */
    crt->tbs.p = p;

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8088948:	f7fa fcc4 	bl	80832d4 <mbedtls_asn1_get_tag>
 808894c:	4680      	mov	r8, r0
 808894e:	b128      	cbz	r0, 808895c <mbedtls_x509_crt_parse_der+0xe4>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 8088950:	4620      	mov	r0, r4
 8088952:	f7ff ff38 	bl	80887c6 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 8088956:	f5a8 5506 	sub.w	r5, r8, #8576	; 0x2180
 808895a:	e0b2      	b.n	8088ac2 <mbedtls_x509_crt_parse_der+0x24a>
    }

    end = p + len;
 808895c:	9b05      	ldr	r3, [sp, #20]
 808895e:	9e06      	ldr	r6, [sp, #24]
                             int *ver )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8088960:	aa17      	add	r2, sp, #92	; 0x5c
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    end = p + len;
 8088962:	441e      	add	r6, r3
    crt->tbs.len = end - crt->tbs.p;
 8088964:	6963      	ldr	r3, [r4, #20]
                             int *ver )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8088966:	4631      	mov	r1, r6
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    end = p + len;
    crt->tbs.len = end - crt->tbs.p;
 8088968:	1af3      	subs	r3, r6, r3
 808896a:	6123      	str	r3, [r4, #16]
                             int *ver )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 808896c:	a806      	add	r0, sp, #24
 808896e:	23a0      	movs	r3, #160	; 0xa0
 8088970:	f7fa fcb0 	bl	80832d4 <mbedtls_asn1_get_tag>
 8088974:	4605      	mov	r5, r0
 8088976:	b128      	cbz	r0, 8088984 <mbedtls_x509_crt_parse_der+0x10c>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8088978:	f110 0f62 	cmn.w	r0, #98	; 0x62
 808897c:	d114      	bne.n	80889a8 <mbedtls_x509_crt_parse_der+0x130>
        {
            *ver = 0;
 808897e:	f8c4 8018 	str.w	r8, [r4, #24]
 8088982:	e014      	b.n	80889ae <mbedtls_x509_crt_parse_der+0x136>
        }

        return( ret );
    }

    end = *p + len;
 8088984:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8088986:	9d06      	ldr	r5, [sp, #24]

    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
 8088988:	f104 0218 	add.w	r2, r4, #24
        }

        return( ret );
    }

    end = *p + len;
 808898c:	441d      	add	r5, r3

    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
 808898e:	4629      	mov	r1, r5
 8088990:	a806      	add	r0, sp, #24
 8088992:	f7fa fccc 	bl	808332e <mbedtls_asn1_get_int>
 8088996:	b110      	cbz	r0, 808899e <mbedtls_x509_crt_parse_der+0x126>
        return( MBEDTLS_ERR_X509_INVALID_VERSION + ret );
 8088998:	f5a0 5508 	sub.w	r5, r0, #8704	; 0x2200
 808899c:	e004      	b.n	80889a8 <mbedtls_x509_crt_parse_der+0x130>

    if( *p != end )
 808899e:	9b06      	ldr	r3, [sp, #24]
 80889a0:	429d      	cmp	r5, r3
 80889a2:	d004      	beq.n	80889ae <mbedtls_x509_crt_parse_der+0x136>
        return( MBEDTLS_ERR_X509_INVALID_VERSION +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80889a4:	4d7b      	ldr	r5, [pc, #492]	; (8088b94 <mbedtls_x509_crt_parse_der+0x31c>)
 80889a6:	e0d6      	b.n	8088b56 <mbedtls_x509_crt_parse_der+0x2de>
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
 80889a8:	2d00      	cmp	r5, #0
 80889aa:	f040 80d4 	bne.w	8088b56 <mbedtls_x509_crt_parse_der+0x2de>
     *
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
 80889ae:	f104 021c 	add.w	r2, r4, #28
 80889b2:	4631      	mov	r1, r6
 80889b4:	a806      	add	r0, sp, #24
 80889b6:	f7fd fbc5 	bl	8086144 <mbedtls_x509_get_serial>
 80889ba:	4605      	mov	r5, r0
 80889bc:	2800      	cmp	r0, #0
 80889be:	f040 80ca 	bne.w	8088b56 <mbedtls_x509_crt_parse_der+0x2de>
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
        ( ret = mbedtls_x509_get_alg(      &p, end, &crt->sig_oid,
 80889c2:	f104 0828 	add.w	r8, r4, #40	; 0x28
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
 80889c6:	ab0b      	add	r3, sp, #44	; 0x2c
 80889c8:	4642      	mov	r2, r8
 80889ca:	4631      	mov	r1, r6
 80889cc:	a806      	add	r0, sp, #24
 80889ce:	f7fd fbe1 	bl	8086194 <mbedtls_x509_get_alg>
 80889d2:	4605      	mov	r5, r0
 80889d4:	2800      	cmp	r0, #0
 80889d6:	f040 80be 	bne.w	8088b56 <mbedtls_x509_crt_parse_der+0x2de>
 80889da:	e086      	b.n	8088aea <mbedtls_x509_crt_parse_der+0x272>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
    }

    crt->version++;
 80889dc:	3301      	adds	r3, #1
 80889de:	61a3      	str	r3, [r4, #24]

    if( ( ret = mbedtls_x509_get_sig_alg( &crt->sig_oid, &sig_params1,
 80889e0:	f504 7396 	add.w	r3, r4, #300	; 0x12c
 80889e4:	9300      	str	r3, [sp, #0]
 80889e6:	f504 7294 	add.w	r2, r4, #296	; 0x128
 80889ea:	f204 1329 	addw	r3, r4, #297	; 0x129
 80889ee:	a90b      	add	r1, sp, #44	; 0x2c
 80889f0:	4640      	mov	r0, r8
 80889f2:	f7fd fd23 	bl	808643c <mbedtls_x509_get_sig_alg>
 80889f6:	4605      	mov	r5, r0
 80889f8:	2800      	cmp	r0, #0
 80889fa:	f040 80ac 	bne.w	8088b56 <mbedtls_x509_crt_parse_der+0x2de>
    }

    /*
     * issuer               Name
     */
    crt->issuer_raw.p = p;
 80889fe:	9b06      	ldr	r3, [sp, #24]

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8088a00:	aa05      	add	r2, sp, #20
    }

    /*
     * issuer               Name
     */
    crt->issuer_raw.p = p;
 8088a02:	63e3      	str	r3, [r4, #60]	; 0x3c

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8088a04:	4631      	mov	r1, r6
 8088a06:	2330      	movs	r3, #48	; 0x30
 8088a08:	a806      	add	r0, sp, #24
 8088a0a:	f7fa fc63 	bl	80832d4 <mbedtls_asn1_get_tag>
 8088a0e:	4605      	mov	r5, r0
 8088a10:	2800      	cmp	r0, #0
 8088a12:	d151      	bne.n	8088ab8 <mbedtls_x509_crt_parse_der+0x240>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( ( ret = mbedtls_x509_get_name( &p, p + len, &crt->issuer ) ) != 0 )
 8088a14:	9b05      	ldr	r3, [sp, #20]
 8088a16:	9906      	ldr	r1, [sp, #24]
 8088a18:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8088a1c:	4419      	add	r1, r3
 8088a1e:	a806      	add	r0, sp, #24
 8088a20:	f7fd fbc0 	bl	80861a4 <mbedtls_x509_get_name>
 8088a24:	4605      	mov	r5, r0
 8088a26:	2800      	cmp	r0, #0
 8088a28:	f040 8095 	bne.w	8088b56 <mbedtls_x509_crt_parse_der+0x2de>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->issuer_raw.len = p - crt->issuer_raw.p;
 8088a2c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8088a2e:	9b06      	ldr	r3, [sp, #24]
                           mbedtls_x509_time *to )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8088a30:	4631      	mov	r1, r6
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->issuer_raw.len = p - crt->issuer_raw.p;
 8088a32:	1a9b      	subs	r3, r3, r2
 8088a34:	63a3      	str	r3, [r4, #56]	; 0x38
                           mbedtls_x509_time *to )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8088a36:	aa17      	add	r2, sp, #92	; 0x5c
 8088a38:	2330      	movs	r3, #48	; 0x30
 8088a3a:	a806      	add	r0, sp, #24
 8088a3c:	f7fa fc4a 	bl	80832d4 <mbedtls_asn1_get_tag>
 8088a40:	2800      	cmp	r0, #0
 8088a42:	d05b      	beq.n	8088afc <mbedtls_x509_crt_parse_der+0x284>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
 8088a44:	f5a0 5510 	sub.w	r5, r0, #9216	; 0x2400
     * Validity ::= SEQUENCE {
     *      notBefore      Time,
     *      notAfter       Time }
     *
     */
    if( ( ret = x509_get_dates( &p, end, &crt->valid_from,
 8088a48:	2d00      	cmp	r5, #0
 8088a4a:	f040 8084 	bne.w	8088b56 <mbedtls_x509_crt_parse_der+0x2de>
    }

    /*
     * subject              Name
     */
    crt->subject_raw.p = p;
 8088a4e:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 8088a52:	f85b 3d50 	ldr.w	r3, [fp, #-80]!

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8088a56:	aa05      	add	r2, sp, #20
    }

    /*
     * subject              Name
     */
    crt->subject_raw.p = p;
 8088a58:	64a3      	str	r3, [r4, #72]	; 0x48

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8088a5a:	4631      	mov	r1, r6
 8088a5c:	2330      	movs	r3, #48	; 0x30
 8088a5e:	4658      	mov	r0, fp
 8088a60:	f7fa fc38 	bl	80832d4 <mbedtls_asn1_get_tag>
 8088a64:	4605      	mov	r5, r0
 8088a66:	bb38      	cbnz	r0, 8088ab8 <mbedtls_x509_crt_parse_der+0x240>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
 8088a68:	9b05      	ldr	r3, [sp, #20]
 8088a6a:	2b00      	cmp	r3, #0
 8088a6c:	d15f      	bne.n	8088b2e <mbedtls_x509_crt_parse_der+0x2b6>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->subject_raw.len = p - crt->subject_raw.p;
 8088a6e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8088a70:	9b06      	ldr	r3, [sp, #24]

    /*
     * SubjectPublicKeyInfo
     */
    if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
 8088a72:	4631      	mov	r1, r6
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->subject_raw.len = p - crt->subject_raw.p;
 8088a74:	1a9b      	subs	r3, r3, r2
 8088a76:	6463      	str	r3, [r4, #68]	; 0x44

    /*
     * SubjectPublicKeyInfo
     */
    if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
 8088a78:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 8088a7c:	4658      	mov	r0, fp
 8088a7e:	f7fe f833 	bl	8086ae8 <mbedtls_pk_parse_subpubkey>
 8088a82:	4605      	mov	r5, r0
 8088a84:	2800      	cmp	r0, #0
 8088a86:	d166      	bne.n	8088b56 <mbedtls_x509_crt_parse_der+0x2de>
     *  subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,
     *                       -- If present, version shall be v2 or v3
     *  extensions      [3]  EXPLICIT Extensions OPTIONAL
     *                       -- If present, version shall be v3
     */
    if( crt->version == 2 || crt->version == 3 )
 8088a88:	69a3      	ldr	r3, [r4, #24]
 8088a8a:	3b02      	subs	r3, #2
 8088a8c:	2b01      	cmp	r3, #1
 8088a8e:	d958      	bls.n	8088b42 <mbedtls_x509_crt_parse_der+0x2ca>
            mbedtls_x509_crt_free( crt );
            return( ret );
        }
    }

    if( crt->version == 2 || crt->version == 3 )
 8088a90:	69a3      	ldr	r3, [r4, #24]
 8088a92:	3b02      	subs	r3, #2
 8088a94:	2b01      	cmp	r3, #1
 8088a96:	d962      	bls.n	8088b5e <mbedtls_x509_crt_parse_der+0x2e6>
            return( ret );
        }
    }

#if !defined(MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3)
    if( crt->version == 3 )
 8088a98:	69a3      	ldr	r3, [r4, #24]
 8088a9a:	2b03      	cmp	r3, #3
 8088a9c:	d06a      	beq.n	8088b74 <mbedtls_x509_crt_parse_der+0x2fc>
            mbedtls_x509_crt_free( crt );
            return( ret );
        }
    }

    if( p != end )
 8088a9e:	9b06      	ldr	r3, [sp, #24]
 8088aa0:	429e      	cmp	r6, r3
 8088aa2:	f000 811e 	beq.w	8088ce2 <mbedtls_x509_crt_parse_der+0x46a>
        return( ret );
    }

    if( p != end )
    {
        mbedtls_x509_crt_free( crt );
 8088aa6:	4620      	mov	r0, r4
 8088aa8:	f7ff fe8d 	bl	80887c6 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8088aac:	4d3a      	ldr	r5, [pc, #232]	; (8088b98 <mbedtls_x509_crt_parse_der+0x320>)
 8088aae:	e00b      	b.n	8088ac8 <mbedtls_x509_crt_parse_der+0x250>

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8088ab0:	4d3a      	ldr	r5, [pc, #232]	; (8088b9c <mbedtls_x509_crt_parse_der+0x324>)
 8088ab2:	e009      	b.n	8088ac8 <mbedtls_x509_crt_parse_der+0x250>

    // Create and populate a new buffer for the raw field
    crt->raw.len = crt_end - buf;
    crt->raw.p = p = (unsigned char*)mbedtls_calloc( 1, crt->raw.len );
    if( p == NULL )
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 8088ab4:	4d3a      	ldr	r5, [pc, #232]	; (8088ba0 <mbedtls_x509_crt_parse_der+0x328>)
 8088ab6:	e007      	b.n	8088ac8 <mbedtls_x509_crt_parse_der+0x250>
    crt->subject_raw.p = p;

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 8088ab8:	4620      	mov	r0, r4
 8088aba:	f7ff fe84 	bl	80887c6 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 8088abe:	f5a5 5506 	sub.w	r5, r5, #8576	; 0x2180
        prev = crt;
        mbedtls_x509_crt_init( crt->next );
        crt = crt->next;
    }

    if( ( ret = x509_crt_parse_der_core( crt, buf, buflen ) ) != 0 )
 8088ac2:	2d00      	cmp	r5, #0
 8088ac4:	f000 8204 	beq.w	8088ed0 <mbedtls_x509_crt_parse_der+0x658>
    {
        if( prev )
 8088ac8:	f1b9 0f00 	cmp.w	r9, #0
 8088acc:	d002      	beq.n	8088ad4 <mbedtls_x509_crt_parse_der+0x25c>
            prev->next = NULL;
 8088ace:	2300      	movs	r3, #0
 8088ad0:	f8c9 3130 	str.w	r3, [r9, #304]	; 0x130

        if( crt != chain )
 8088ad4:	4554      	cmp	r4, sl
 8088ad6:	f000 81fb 	beq.w	8088ed0 <mbedtls_x509_crt_parse_der+0x658>
            mbedtls_free( crt );
 8088ada:	4620      	mov	r0, r4
 8088adc:	f008 fb3c 	bl	8091158 <free>
 8088ae0:	e1f6      	b.n	8088ed0 <mbedtls_x509_crt_parse_der+0x658>

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8088ae2:	4d2e      	ldr	r5, [pc, #184]	; (8088b9c <mbedtls_x509_crt_parse_der+0x324>)
 8088ae4:	e1f4      	b.n	8088ed0 <mbedtls_x509_crt_parse_der+0x658>
    if( crt->version != 0 && crt->next == NULL )
    {
        crt->next = (mbedtls_x509_crt *)mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );

        if( crt->next == NULL )
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 8088ae6:	4d2e      	ldr	r5, [pc, #184]	; (8088ba0 <mbedtls_x509_crt_parse_der+0x328>)
 8088ae8:	e1f2      	b.n	8088ed0 <mbedtls_x509_crt_parse_der+0x658>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->version < 0 || crt->version > 2 )
 8088aea:	69a3      	ldr	r3, [r4, #24]
 8088aec:	2b02      	cmp	r3, #2
 8088aee:	f67f af75 	bls.w	80889dc <mbedtls_x509_crt_parse_der+0x164>
    {
        mbedtls_x509_crt_free( crt );
 8088af2:	4620      	mov	r0, r4
 8088af4:	f7ff fe67 	bl	80887c6 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
 8088af8:	4d2a      	ldr	r5, [pc, #168]	; (8088ba4 <mbedtls_x509_crt_parse_der+0x32c>)
 8088afa:	e7e5      	b.n	8088ac8 <mbedtls_x509_crt_parse_der+0x250>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );

    end = *p + len;
 8088afc:	9a06      	ldr	r2, [sp, #24]
 8088afe:	9b17      	ldr	r3, [sp, #92]	; 0x5c

    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
 8088b00:	a806      	add	r0, sp, #24

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );

    end = *p + len;
 8088b02:	eb02 0b03 	add.w	fp, r2, r3

    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
 8088b06:	4659      	mov	r1, fp
 8088b08:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 8088b0c:	f7fd fbc2 	bl	8086294 <mbedtls_x509_get_time>
 8088b10:	b958      	cbnz	r0, 8088b2a <mbedtls_x509_crt_parse_der+0x2b2>
        return( ret );

    if( ( ret = mbedtls_x509_get_time( p, end, to ) ) != 0 )
 8088b12:	f104 02a4 	add.w	r2, r4, #164	; 0xa4
 8088b16:	4659      	mov	r1, fp
 8088b18:	a806      	add	r0, sp, #24
 8088b1a:	f7fd fbbb 	bl	8086294 <mbedtls_x509_get_time>
 8088b1e:	b920      	cbnz	r0, 8088b2a <mbedtls_x509_crt_parse_der+0x2b2>
        return( ret );

    if( *p != end )
 8088b20:	9b06      	ldr	r3, [sp, #24]
 8088b22:	459b      	cmp	fp, r3
 8088b24:	d093      	beq.n	8088a4e <mbedtls_x509_crt_parse_der+0x1d6>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8088b26:	4d20      	ldr	r5, [pc, #128]	; (8088ba8 <mbedtls_x509_crt_parse_der+0x330>)
 8088b28:	e015      	b.n	8088b56 <mbedtls_x509_crt_parse_der+0x2de>
    end = *p + len;

    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
        return( ret );

    if( ( ret = mbedtls_x509_get_time( p, end, to ) ) != 0 )
 8088b2a:	4605      	mov	r5, r0
 8088b2c:	e78c      	b.n	8088a48 <mbedtls_x509_crt_parse_der+0x1d0>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
 8088b2e:	9906      	ldr	r1, [sp, #24]
 8088b30:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 8088b34:	4419      	add	r1, r3
 8088b36:	4658      	mov	r0, fp
 8088b38:	f7fd fb34 	bl	80861a4 <mbedtls_x509_get_name>
 8088b3c:	4605      	mov	r5, r0
 8088b3e:	b950      	cbnz	r0, 8088b56 <mbedtls_x509_crt_parse_der+0x2de>
 8088b40:	e795      	b.n	8088a6e <mbedtls_x509_crt_parse_der+0x1f6>
     *  extensions      [3]  EXPLICIT Extensions OPTIONAL
     *                       -- If present, version shall be v3
     */
    if( crt->version == 2 || crt->version == 3 )
    {
        ret = x509_get_uid( &p, end, &crt->issuer_id,  1 );
 8088b42:	2301      	movs	r3, #1
 8088b44:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
 8088b48:	4631      	mov	r1, r6
 8088b4a:	4658      	mov	r0, fp
 8088b4c:	f7fe ff15 	bl	808797a <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>
        if( ret != 0 )
 8088b50:	4605      	mov	r5, r0
 8088b52:	2800      	cmp	r0, #0
 8088b54:	d09c      	beq.n	8088a90 <mbedtls_x509_crt_parse_der+0x218>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 8088b56:	4620      	mov	r0, r4
 8088b58:	f7ff fe35 	bl	80887c6 <mbedtls_x509_crt_free>
 8088b5c:	e7b1      	b.n	8088ac2 <mbedtls_x509_crt_parse_der+0x24a>
        }
    }

    if( crt->version == 2 || crt->version == 3 )
    {
        ret = x509_get_uid( &p, end, &crt->subject_id,  2 );
 8088b5e:	2302      	movs	r3, #2
 8088b60:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
 8088b64:	4631      	mov	r1, r6
 8088b66:	4658      	mov	r0, fp
 8088b68:	f7fe ff07 	bl	808797a <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>
        if( ret != 0 )
 8088b6c:	4605      	mov	r5, r0
 8088b6e:	2800      	cmp	r0, #0
 8088b70:	d092      	beq.n	8088a98 <mbedtls_x509_crt_parse_der+0x220>
 8088b72:	e7f0      	b.n	8088b56 <mbedtls_x509_crt_parse_der+0x2de>
{
    int ret;
    size_t len;
    unsigned char *end_ext_data, *end_ext_octet;

    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
 8088b74:	f104 02dc 	add.w	r2, r4, #220	; 0xdc
 8088b78:	4631      	mov	r1, r6
 8088b7a:	4658      	mov	r0, fp
 8088b7c:	f7fd fc7e 	bl	808647c <mbedtls_x509_get_ext>
 8088b80:	b908      	cbnz	r0, 8088b86 <mbedtls_x509_crt_parse_der+0x30e>
         * Extension  ::=  SEQUENCE  {
         *      extnID      OBJECT IDENTIFIER,
         *      critical    BOOLEAN DEFAULT FALSE,
         *      extnValue   OCTET STRING  }
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 8088b82:	4680      	mov	r8, r0
 8088b84:	e05a      	b.n	8088c3c <mbedtls_x509_crt_parse_der+0x3c4>
    size_t len;
    unsigned char *end_ext_data, *end_ext_octet;

    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8088b86:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8088b8a:	f040 80a5 	bne.w	8088cd8 <mbedtls_x509_crt_parse_der+0x460>
 8088b8e:	e786      	b.n	8088a9e <mbedtls_x509_crt_parse_der+0x226>
 8088b90:	ffffde80 	.word	0xffffde80
 8088b94:	ffffdd9a 	.word	0xffffdd9a
 8088b98:	ffffde1a 	.word	0xffffde1a
 8088b9c:	ffffd800 	.word	0xffffd800
 8088ba0:	ffffd780 	.word	0xffffd780
 8088ba4:	ffffda80 	.word	0xffffda80
 8088ba8:	ffffdb9a 	.word	0xffffdb9a
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
        int is_critical = 0; /* DEFAULT FALSE */
        int ext_type = 0;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8088bac:	2330      	movs	r3, #48	; 0x30
 8088bae:	aa07      	add	r2, sp, #28
 8088bb0:	4631      	mov	r1, r6
 8088bb2:	a806      	add	r0, sp, #24
         * Extension  ::=  SEQUENCE  {
         *      extnID      OBJECT IDENTIFIER,
         *      critical    BOOLEAN DEFAULT FALSE,
         *      extnValue   OCTET STRING  }
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 8088bb4:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8088bb8:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
 8088bbc:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
        int is_critical = 0; /* DEFAULT FALSE */
 8088bc0:	f8cd 8020 	str.w	r8, [sp, #32]
        int ext_type = 0;
 8088bc4:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8088bc8:	f7fa fb84 	bl	80832d4 <mbedtls_asn1_get_tag>
 8088bcc:	2800      	cmp	r0, #0
 8088bce:	f040 80bd 	bne.w	8088d4c <mbedtls_x509_crt_parse_der+0x4d4>
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_data = *p + len;
 8088bd2:	9b06      	ldr	r3, [sp, #24]
 8088bd4:	9d07      	ldr	r5, [sp, #28]

        /* Get extension ID */
        extn_oid.tag = **p;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 8088bd6:	aa15      	add	r2, sp, #84	; 0x54

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_data = *p + len;
 8088bd8:	441d      	add	r5, r3

        /* Get extension ID */
        extn_oid.tag = **p;
 8088bda:	781b      	ldrb	r3, [r3, #0]

        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 8088bdc:	4631      	mov	r1, r6
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_data = *p + len;

        /* Get extension ID */
        extn_oid.tag = **p;
 8088bde:	9314      	str	r3, [sp, #80]	; 0x50

        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 8088be0:	a806      	add	r0, sp, #24
 8088be2:	2306      	movs	r3, #6
 8088be4:	f7fa fb76 	bl	80832d4 <mbedtls_asn1_get_tag>
 8088be8:	2800      	cmp	r0, #0
 8088bea:	f040 80af 	bne.w	8088d4c <mbedtls_x509_crt_parse_der+0x4d4>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        extn_oid.p = *p;
 8088bee:	9a06      	ldr	r2, [sp, #24]
        *p += extn_oid.len;
 8088bf0:	9b15      	ldr	r3, [sp, #84]	; 0x54
        extn_oid.tag = **p;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        extn_oid.p = *p;
 8088bf2:	9216      	str	r2, [sp, #88]	; 0x58
        *p += extn_oid.len;
 8088bf4:	4413      	add	r3, r2
 8088bf6:	9306      	str	r3, [sp, #24]

        if( ( end - *p ) < 1 )
 8088bf8:	1af3      	subs	r3, r6, r3
 8088bfa:	2b00      	cmp	r3, #0
 8088bfc:	dd51      	ble.n	8088ca2 <mbedtls_x509_crt_parse_der+0x42a>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
 8088bfe:	aa08      	add	r2, sp, #32
 8088c00:	4629      	mov	r1, r5
 8088c02:	a806      	add	r0, sp, #24
 8088c04:	f7fa fb7a 	bl	80832fc <mbedtls_asn1_get_bool>
 8088c08:	b9e0      	cbnz	r0, 8088c44 <mbedtls_x509_crt_parse_der+0x3cc>
            ( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        /* Data should be octet string type */
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &len,
 8088c0a:	2304      	movs	r3, #4
 8088c0c:	aa07      	add	r2, sp, #28
 8088c0e:	4629      	mov	r1, r5
 8088c10:	a806      	add	r0, sp, #24
 8088c12:	f7fa fb5f 	bl	80832d4 <mbedtls_asn1_get_tag>
 8088c16:	2800      	cmp	r0, #0
 8088c18:	f040 8098 	bne.w	8088d4c <mbedtls_x509_crt_parse_der+0x4d4>
                MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_octet = *p + len;

        if( end_ext_octet != end_ext_data )
 8088c1c:	9b07      	ldr	r3, [sp, #28]
 8088c1e:	9a06      	ldr	r2, [sp, #24]
 8088c20:	4413      	add	r3, r2
 8088c22:	429d      	cmp	r5, r3
 8088c24:	f040 814a 	bne.w	8088ebc <mbedtls_x509_crt_parse_der+0x644>
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

        /*
         * Detect supported extensions
         */
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );
 8088c28:	a909      	add	r1, sp, #36	; 0x24
 8088c2a:	a814      	add	r0, sp, #80	; 0x50
 8088c2c:	f7fb ff80 	bl	8084b30 <mbedtls_oid_get_x509_ext_type>

        if( ret != 0 )
 8088c30:	b160      	cbz	r0, 8088c4c <mbedtls_x509_crt_parse_der+0x3d4>
        {
            /* No parser found, skip extension */
            *p = end_ext_octet;

#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
 8088c32:	9b08      	ldr	r3, [sp, #32]
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );

        if( ret != 0 )
        {
            /* No parser found, skip extension */
            *p = end_ext_octet;
 8088c34:	9506      	str	r5, [sp, #24]

#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
 8088c36:	2b00      	cmp	r3, #0
 8088c38:	f040 8142 	bne.w	8088ec0 <mbedtls_x509_crt_parse_der+0x648>
            return( 0 );

        return( ret );
    }

    while( *p < end )
 8088c3c:	9b06      	ldr	r3, [sp, #24]
 8088c3e:	429e      	cmp	r6, r3
 8088c40:	d8b4      	bhi.n	8088bac <mbedtls_x509_crt_parse_der+0x334>
 8088c42:	e030      	b.n	8088ca6 <mbedtls_x509_crt_parse_der+0x42e>
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
 8088c44:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8088c48:	d0df      	beq.n	8088c0a <mbedtls_x509_crt_parse_der+0x392>
 8088c4a:	e07f      	b.n	8088d4c <mbedtls_x509_crt_parse_der+0x4d4>
#endif
            continue;
        }

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
 8088c4c:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
 8088c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8088c52:	ea12 0003 	ands.w	r0, r2, r3
 8088c56:	f040 8135 	bne.w	8088ec4 <mbedtls_x509_crt_parse_der+0x64c>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

        crt->ext_types |= ext_type;
 8088c5a:	431a      	orrs	r2, r3

        switch( ext_type )
 8088c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

        crt->ext_types |= ext_type;
 8088c60:	f8c4 20f8 	str.w	r2, [r4, #248]	; 0xf8

        switch( ext_type )
 8088c64:	d023      	beq.n	8088cae <mbedtls_x509_crt_parse_der+0x436>
 8088c66:	dc74      	bgt.n	8088d52 <mbedtls_x509_crt_parse_der+0x4da>
 8088c68:	2b04      	cmp	r3, #4
 8088c6a:	f000 80a9 	beq.w	8088dc0 <mbedtls_x509_crt_parse_der+0x548>
 8088c6e:	2b20      	cmp	r3, #32
 8088c70:	f040 812a 	bne.w	8088ec8 <mbedtls_x509_crt_parse_der+0x650>
    mbedtls_asn1_buf *buf;
    unsigned char tag;
    mbedtls_asn1_sequence *cur = subject_alt_name;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8088c74:	2330      	movs	r3, #48	; 0x30
 8088c76:	aa0a      	add	r2, sp, #40	; 0x28
 8088c78:	4629      	mov	r1, r5
 8088c7a:	a806      	add	r0, sp, #24
                return( ret );
            break;

        case MBEDTLS_X509_EXT_SUBJECT_ALT_NAME:
            /* Parse subject alt name */
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 8088c7c:	f104 0be8 	add.w	fp, r4, #232	; 0xe8
    mbedtls_asn1_buf *buf;
    unsigned char tag;
    mbedtls_asn1_sequence *cur = subject_alt_name;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8088c80:	f7fa fb28 	bl	80832d4 <mbedtls_asn1_get_tag>
 8088c84:	bb20      	cbnz	r0, 8088cd0 <mbedtls_x509_crt_parse_der+0x458>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( *p + len != end )
 8088c86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8088c88:	9a06      	ldr	r2, [sp, #24]
 8088c8a:	4413      	add	r3, r2
 8088c8c:	429d      	cmp	r5, r3
 8088c8e:	f040 8115 	bne.w	8088ebc <mbedtls_x509_crt_parse_der+0x644>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    while( *p < end )
 8088c92:	9a06      	ldr	r2, [sp, #24]
 8088c94:	4295      	cmp	r5, r2
 8088c96:	f240 80f3 	bls.w	8088e80 <mbedtls_x509_crt_parse_der+0x608>
    {
        if( ( end - *p ) < 1 )
 8088c9a:	1aab      	subs	r3, r5, r2
 8088c9c:	2b00      	cmp	r3, #0
 8088c9e:	f300 80be 	bgt.w	8088e1e <mbedtls_x509_crt_parse_der+0x5a6>
        extn_oid.p = *p;
        *p += extn_oid.len;

        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 8088ca2:	488d      	ldr	r0, [pc, #564]	; (8088ed8 <mbedtls_x509_crt_parse_der+0x660>)
 8088ca4:	e018      	b.n	8088cd8 <mbedtls_x509_crt_parse_der+0x460>
        default:
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE );
        }
    }

    if( *p != end )
 8088ca6:	f43f aefa 	beq.w	8088a9e <mbedtls_x509_crt_parse_der+0x226>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8088caa:	4d8c      	ldr	r5, [pc, #560]	; (8088edc <mbedtls_x509_crt_parse_der+0x664>)
 8088cac:	e753      	b.n	8088b56 <mbedtls_x509_crt_parse_der+0x2de>

        switch( ext_type )
        {
        case MBEDTLS_X509_EXT_BASIC_CONSTRAINTS:
            /* Parse basic constraints */
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
 8088cae:	f504 7380 	add.w	r3, r4, #256	; 0x100
 8088cb2:	9303      	str	r3, [sp, #12]
    /*
     * BasicConstraints ::= SEQUENCE {
     *      cA                      BOOLEAN DEFAULT FALSE,
     *      pathLenConstraint       INTEGER (0..MAX) OPTIONAL }
     */
    *ca_istrue = 0; /* DEFAULT FALSE */
 8088cb4:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
    *max_pathlen = 0; /* endless */
 8088cb8:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8088cbc:	2330      	movs	r3, #48	; 0x30
 8088cbe:	aa17      	add	r2, sp, #92	; 0x5c
 8088cc0:	4629      	mov	r1, r5
 8088cc2:	a806      	add	r0, sp, #24

        switch( ext_type )
        {
        case MBEDTLS_X509_EXT_BASIC_CONSTRAINTS:
            /* Parse basic constraints */
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
 8088cc4:	f104 0bfc 	add.w	fp, r4, #252	; 0xfc
     *      pathLenConstraint       INTEGER (0..MAX) OPTIONAL }
     */
    *ca_istrue = 0; /* DEFAULT FALSE */
    *max_pathlen = 0; /* endless */

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8088cc8:	f7fa fb04 	bl	80832d4 <mbedtls_asn1_get_tag>
 8088ccc:	2800      	cmp	r0, #0
 8088cce:	d048      	beq.n	8088d62 <mbedtls_x509_crt_parse_der+0x4ea>
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
        (*p)++;
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 8088cd0:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
                return( ret );
            break;

        case MBEDTLS_X509_EXT_SUBJECT_ALT_NAME:
            /* Parse subject alt name */
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 8088cd4:	2800      	cmp	r0, #0
 8088cd6:	d0b1      	beq.n	8088c3c <mbedtls_x509_crt_parse_der+0x3c4>
    size_t len;
    unsigned char *end_ext_data, *end_ext_octet;

    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8088cd8:	4605      	mov	r5, r0
#if !defined(MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3)
    if( crt->version == 3 )
#endif
    {
        ret = x509_get_crt_ext( &p, end, crt );
        if( ret != 0 )
 8088cda:	2800      	cmp	r0, #0
 8088cdc:	f43f aedf 	beq.w	8088a9e <mbedtls_x509_crt_parse_der+0x226>
 8088ce0:	e739      	b.n	8088b56 <mbedtls_x509_crt_parse_der+0x2de>
     *  -- end of TBSCertificate
     *
     *  signatureAlgorithm   AlgorithmIdentifier,
     *  signatureValue       BIT STRING
     */
    if( ( ret = mbedtls_x509_get_alg( &p, end, &sig_oid2, &sig_params2 ) ) != 0 )
 8088ce2:	ab0e      	add	r3, sp, #56	; 0x38
 8088ce4:	aa11      	add	r2, sp, #68	; 0x44
 8088ce6:	4639      	mov	r1, r7
 8088ce8:	a806      	add	r0, sp, #24
 8088cea:	f7fd fa53 	bl	8086194 <mbedtls_x509_get_alg>
 8088cee:	4605      	mov	r5, r0
 8088cf0:	2800      	cmp	r0, #0
 8088cf2:	f47f af30 	bne.w	8088b56 <mbedtls_x509_crt_parse_der+0x2de>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->sig_oid.len != sig_oid2.len ||
 8088cf6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8088cf8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8088cfa:	429a      	cmp	r2, r3
 8088cfc:	d10f      	bne.n	8088d1e <mbedtls_x509_crt_parse_der+0x4a6>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 8088cfe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8088d00:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8088d02:	f00b f91f 	bl	8093f44 <memcmp>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->sig_oid.len != sig_oid2.len ||
 8088d06:	4605      	mov	r5, r0
 8088d08:	b948      	cbnz	r0, 8088d1e <mbedtls_x509_crt_parse_der+0x4a6>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
        sig_params1.len != sig_params2.len ||
 8088d0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->sig_oid.len != sig_oid2.len ||
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 8088d0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8088d0e:	429a      	cmp	r2, r3
 8088d10:	d105      	bne.n	8088d1e <mbedtls_x509_crt_parse_der+0x4a6>
        sig_params1.len != sig_params2.len ||
 8088d12:	b14a      	cbz	r2, 8088d28 <mbedtls_x509_crt_parse_der+0x4b0>
        ( sig_params1.len != 0 &&
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
 8088d14:	9910      	ldr	r1, [sp, #64]	; 0x40
 8088d16:	980d      	ldr	r0, [sp, #52]	; 0x34
 8088d18:	f00b f914 	bl	8093f44 <memcmp>
    }

    if( crt->sig_oid.len != sig_oid2.len ||
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
        sig_params1.len != sig_params2.len ||
        ( sig_params1.len != 0 &&
 8088d1c:	b120      	cbz	r0, 8088d28 <mbedtls_x509_crt_parse_der+0x4b0>
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
    {
        mbedtls_x509_crt_free( crt );
 8088d1e:	4620      	mov	r0, r4
 8088d20:	f7ff fd51 	bl	80887c6 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_SIG_MISMATCH );
 8088d24:	4d6e      	ldr	r5, [pc, #440]	; (8088ee0 <mbedtls_x509_crt_parse_der+0x668>)
 8088d26:	e6cf      	b.n	8088ac8 <mbedtls_x509_crt_parse_der+0x250>
    }

    if( ( ret = mbedtls_x509_get_sig( &p, end, &crt->sig ) ) != 0 )
 8088d28:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 8088d2c:	4639      	mov	r1, r7
 8088d2e:	a806      	add	r0, sp, #24
 8088d30:	f7fd fb66 	bl	8086400 <mbedtls_x509_get_sig>
 8088d34:	4606      	mov	r6, r0
 8088d36:	b120      	cbz	r0, 8088d42 <mbedtls_x509_crt_parse_der+0x4ca>
    {
        mbedtls_x509_crt_free( crt );
 8088d38:	4620      	mov	r0, r4
 8088d3a:	f7ff fd44 	bl	80887c6 <mbedtls_x509_crt_free>
 8088d3e:	4635      	mov	r5, r6
 8088d40:	e6bf      	b.n	8088ac2 <mbedtls_x509_crt_parse_der+0x24a>
        return( ret );
    }

    if( p != end )
 8088d42:	9b06      	ldr	r3, [sp, #24]
 8088d44:	429f      	cmp	r7, r3
 8088d46:	f000 80c3 	beq.w	8088ed0 <mbedtls_x509_crt_parse_der+0x658>
 8088d4a:	e6ac      	b.n	8088aa6 <mbedtls_x509_crt_parse_der+0x22e>
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
            ( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 8088d4c:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
 8088d50:	e7c2      	b.n	8088cd8 <mbedtls_x509_crt_parse_der+0x460>
        if( ( crt->ext_types & ext_type ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

        crt->ext_types |= ext_type;

        switch( ext_type )
 8088d52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8088d56:	d053      	beq.n	8088e00 <mbedtls_x509_crt_parse_der+0x588>
 8088d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8088d5c:	f000 8097 	beq.w	8088e8e <mbedtls_x509_crt_parse_der+0x616>
 8088d60:	e0b2      	b.n	8088ec8 <mbedtls_x509_crt_parse_der+0x650>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( *p == end )
 8088d62:	9b06      	ldr	r3, [sp, #24]
 8088d64:	429d      	cmp	r5, r3
 8088d66:	f43f af69 	beq.w	8088c3c <mbedtls_x509_crt_parse_der+0x3c4>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_bool( p, end, ca_istrue ) ) != 0 )
 8088d6a:	465a      	mov	r2, fp
 8088d6c:	4629      	mov	r1, r5
 8088d6e:	a806      	add	r0, sp, #24
 8088d70:	f7fa fac4 	bl	80832fc <mbedtls_asn1_get_bool>
 8088d74:	b178      	cbz	r0, 8088d96 <mbedtls_x509_crt_parse_der+0x51e>
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8088d76:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8088d7a:	d1a9      	bne.n	8088cd0 <mbedtls_x509_crt_parse_der+0x458>
            ret = mbedtls_asn1_get_int( p, end, ca_istrue );
 8088d7c:	465a      	mov	r2, fp
 8088d7e:	4629      	mov	r1, r5
 8088d80:	a806      	add	r0, sp, #24
 8088d82:	f7fa fad4 	bl	808332e <mbedtls_asn1_get_int>

        if( ret != 0 )
 8088d86:	2800      	cmp	r0, #0
 8088d88:	d1a2      	bne.n	8088cd0 <mbedtls_x509_crt_parse_der+0x458>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        if( *ca_istrue != 0 )
 8088d8a:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8088d8e:	b113      	cbz	r3, 8088d96 <mbedtls_x509_crt_parse_der+0x51e>
            *ca_istrue = 1;
 8088d90:	2301      	movs	r3, #1
 8088d92:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    }

    if( *p == end )
 8088d96:	9b06      	ldr	r3, [sp, #24]
 8088d98:	429d      	cmp	r5, r3
 8088d9a:	f43f af4f 	beq.w	8088c3c <mbedtls_x509_crt_parse_der+0x3c4>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_int( p, end, max_pathlen ) ) != 0 )
 8088d9e:	9a03      	ldr	r2, [sp, #12]
 8088da0:	4629      	mov	r1, r5
 8088da2:	a806      	add	r0, sp, #24
 8088da4:	f7fa fac3 	bl	808332e <mbedtls_asn1_get_int>
 8088da8:	2800      	cmp	r0, #0
 8088daa:	d191      	bne.n	8088cd0 <mbedtls_x509_crt_parse_der+0x458>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( *p != end )
 8088dac:	9b06      	ldr	r3, [sp, #24]
 8088dae:	429d      	cmp	r5, r3
 8088db0:	f040 8084 	bne.w	8088ebc <mbedtls_x509_crt_parse_der+0x644>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    (*max_pathlen)++;
 8088db4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8088db8:	3301      	adds	r3, #1
 8088dba:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8088dbe:	e73d      	b.n	8088c3c <mbedtls_x509_crt_parse_der+0x3c4>
                               const unsigned char *end,
                               unsigned int *key_usage)
{
    int ret;
    size_t i;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 8088dc0:	9017      	str	r0, [sp, #92]	; 0x5c
 8088dc2:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
 8088dc6:	9019      	str	r0, [sp, #100]	; 0x64

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 8088dc8:	aa17      	add	r2, sp, #92	; 0x5c
 8088dca:	4629      	mov	r1, r5
 8088dcc:	a806      	add	r0, sp, #24
 8088dce:	f7fa fae5 	bl	808339c <mbedtls_asn1_get_bitstring>
 8088dd2:	2800      	cmp	r0, #0
 8088dd4:	d165      	bne.n	8088ea2 <mbedtls_x509_crt_parse_der+0x62a>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( bs.len < 1 )
 8088dd6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8088dd8:	2a00      	cmp	r2, #0
 8088dda:	d077      	beq.n	8088ecc <mbedtls_x509_crt_parse_der+0x654>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
 8088ddc:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 8088de0:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8088de2:	5c2b      	ldrb	r3, [r5, r0]
 8088de4:	00c1      	lsls	r1, r0, #3
 8088de6:	408b      	lsls	r3, r1
 8088de8:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 8088dec:	3001      	adds	r0, #1
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 8088dee:	430b      	orrs	r3, r1
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 8088df0:	4282      	cmp	r2, r0
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 8088df2:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 8088df6:	f43f af21 	beq.w	8088c3c <mbedtls_x509_crt_parse_der+0x3c4>
 8088dfa:	2804      	cmp	r0, #4
 8088dfc:	d1f1      	bne.n	8088de2 <mbedtls_x509_crt_parse_der+0x56a>
 8088dfe:	e71d      	b.n	8088c3c <mbedtls_x509_crt_parse_der+0x3c4>
                               const unsigned char *end,
                               mbedtls_x509_sequence *ext_key_usage)
{
    int ret;

    if( ( ret = mbedtls_asn1_get_sequence_of( p, end, ext_key_usage, MBEDTLS_ASN1_OID ) ) != 0 )
 8088e00:	2306      	movs	r3, #6
 8088e02:	f504 7284 	add.w	r2, r4, #264	; 0x108
 8088e06:	4629      	mov	r1, r5
 8088e08:	a806      	add	r0, sp, #24
 8088e0a:	f7fa fb00 	bl	808340e <mbedtls_asn1_get_sequence_of>
 8088e0e:	2800      	cmp	r0, #0
 8088e10:	d147      	bne.n	8088ea2 <mbedtls_x509_crt_parse_der+0x62a>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    /* Sequence length must be >= 1 */
    if( ext_key_usage->buf.p == NULL )
 8088e12:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8088e16:	2b00      	cmp	r3, #0
 8088e18:	f47f af10 	bne.w	8088c3c <mbedtls_x509_crt_parse_der+0x3c4>
 8088e1c:	e056      	b.n	8088ecc <mbedtls_x509_crt_parse_der+0x654>
    {
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
 8088e1e:	f812 3b01 	ldrb.w	r3, [r2], #1
        (*p)++;
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 8088e22:	4629      	mov	r1, r5
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
        (*p)++;
 8088e24:	9206      	str	r2, [sp, #24]
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 8088e26:	a806      	add	r0, sp, #24
 8088e28:	aa17      	add	r2, sp, #92	; 0x5c
    {
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
 8088e2a:	9303      	str	r3, [sp, #12]
        (*p)++;
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 8088e2c:	f7fa fa00 	bl	8083230 <mbedtls_asn1_get_len>
 8088e30:	9b03      	ldr	r3, [sp, #12]
 8088e32:	2800      	cmp	r0, #0
 8088e34:	f47f af4c 	bne.w	8088cd0 <mbedtls_x509_crt_parse_der+0x458>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        if( ( tag & MBEDTLS_ASN1_TAG_CLASS_MASK ) !=
 8088e38:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8088e3c:	2a80      	cmp	r2, #128	; 0x80
 8088e3e:	d13f      	bne.n	8088ec0 <mbedtls_x509_crt_parse_der+0x648>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
        }

        /* Skip everything but DNS name */
        if( tag != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | 2 ) )
 8088e40:	2b82      	cmp	r3, #130	; 0x82
 8088e42:	d002      	beq.n	8088e4a <mbedtls_x509_crt_parse_der+0x5d2>
        {
            *p += tag_len;
 8088e44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8088e46:	9a06      	ldr	r2, [sp, #24]
 8088e48:	e017      	b.n	8088e7a <mbedtls_x509_crt_parse_der+0x602>
            continue;
        }

        /* Allocate and assign next pointer */
        if( cur->buf.p != NULL )
 8088e4a:	f8db 3008 	ldr.w	r3, [fp, #8]
 8088e4e:	b15b      	cbz	r3, 8088e68 <mbedtls_x509_crt_parse_der+0x5f0>
        {
            if( cur->next != NULL )
 8088e50:	f8db 300c 	ldr.w	r3, [fp, #12]
 8088e54:	2b00      	cmp	r3, #0
 8088e56:	d135      	bne.n	8088ec4 <mbedtls_x509_crt_parse_der+0x64c>
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

            cur->next = (mbedtls_asn1_sequence *)mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );
 8088e58:	2110      	movs	r1, #16
 8088e5a:	2001      	movs	r0, #1
 8088e5c:	f00a ff5a 	bl	8093d14 <calloc>
 8088e60:	f8cb 000c 	str.w	r0, [fp, #12]

            if( cur->next == NULL )
 8088e64:	b188      	cbz	r0, 8088e8a <mbedtls_x509_crt_parse_der+0x612>
 8088e66:	4683      	mov	fp, r0

            cur = cur->next;
        }

        buf = &(cur->buf);
        buf->tag = tag;
 8088e68:	2382      	movs	r3, #130	; 0x82
 8088e6a:	f8cb 3000 	str.w	r3, [fp]
        buf->p = *p;
 8088e6e:	9a06      	ldr	r2, [sp, #24]
 8088e70:	f8cb 2008 	str.w	r2, [fp, #8]
        buf->len = tag_len;
 8088e74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8088e76:	f8cb 3004 	str.w	r3, [fp, #4]
        *p += buf->len;
 8088e7a:	4413      	add	r3, r2
 8088e7c:	9306      	str	r3, [sp, #24]
 8088e7e:	e708      	b.n	8088c92 <mbedtls_x509_crt_parse_der+0x41a>
    }

    /* Set final sequence entry's next pointer to NULL */
    cur->next = NULL;
 8088e80:	f8cb 800c 	str.w	r8, [fp, #12]

    if( *p != end )
 8088e84:	f43f aeda 	beq.w	8088c3c <mbedtls_x509_crt_parse_der+0x3c4>
 8088e88:	e018      	b.n	8088ebc <mbedtls_x509_crt_parse_der+0x644>

            cur->next = (mbedtls_asn1_sequence *)mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );

            if( cur->next == NULL )
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                        MBEDTLS_ERR_ASN1_ALLOC_FAILED );
 8088e8a:	4816      	ldr	r0, [pc, #88]	; (8088ee4 <mbedtls_x509_crt_parse_der+0x66c>)
 8088e8c:	e724      	b.n	8088cd8 <mbedtls_x509_crt_parse_der+0x460>
static int x509_get_ns_cert_type( unsigned char **p,
                                       const unsigned char *end,
                                       unsigned char *ns_cert_type)
{
    int ret;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 8088e8e:	9017      	str	r0, [sp, #92]	; 0x5c
 8088e90:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
 8088e94:	9019      	str	r0, [sp, #100]	; 0x64

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 8088e96:	aa17      	add	r2, sp, #92	; 0x5c
 8088e98:	4629      	mov	r1, r5
 8088e9a:	a806      	add	r0, sp, #24
 8088e9c:	f7fa fa7e 	bl	808339c <mbedtls_asn1_get_bitstring>
 8088ea0:	b120      	cbz	r0, 8088eac <mbedtls_x509_crt_parse_der+0x634>
                return( ret );
            break;

        case MBEDTLS_X509_EXT_NS_CERT_TYPE:
            /* Parse netscape certificate type */
            if( ( ret = x509_get_ns_cert_type( p, end_ext_octet,
 8088ea2:	f5b0 5014 	subs.w	r0, r0, #9472	; 0x2500
 8088ea6:	f43f aec9 	beq.w	8088c3c <mbedtls_x509_crt_parse_der+0x3c4>
 8088eaa:	e715      	b.n	8088cd8 <mbedtls_x509_crt_parse_der+0x460>
    mbedtls_x509_bitstring bs = { 0, 0, NULL };

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( bs.len != 1 )
 8088eac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8088eae:	2b01      	cmp	r3, #1
 8088eb0:	d10c      	bne.n	8088ecc <mbedtls_x509_crt_parse_der+0x654>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *ns_cert_type = *bs.p;
 8088eb2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8088eb4:	781b      	ldrb	r3, [r3, #0]
 8088eb6:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
 8088eba:	e6bf      	b.n	8088c3c <mbedtls_x509_crt_parse_der+0x3c4>

        end_ext_octet = *p + len;

        if( end_ext_octet != end_ext_data )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 8088ebc:	4807      	ldr	r0, [pc, #28]	; (8088edc <mbedtls_x509_crt_parse_der+0x664>)
 8088ebe:	e70b      	b.n	8088cd8 <mbedtls_x509_crt_parse_der+0x460>
#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
            {
                /* Data is marked as critical: fail */
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                        MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 8088ec0:	4809      	ldr	r0, [pc, #36]	; (8088ee8 <mbedtls_x509_crt_parse_der+0x670>)
 8088ec2:	e709      	b.n	8088cd8 <mbedtls_x509_crt_parse_der+0x460>
            continue;
        }

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );
 8088ec4:	4809      	ldr	r0, [pc, #36]	; (8088eec <mbedtls_x509_crt_parse_der+0x674>)
 8088ec6:	e707      	b.n	8088cd8 <mbedtls_x509_crt_parse_der+0x460>
                    &crt->ns_cert_type ) ) != 0 )
                return( ret );
            break;

        default:
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE );
 8088ec8:	4809      	ldr	r0, [pc, #36]	; (8088ef0 <mbedtls_x509_crt_parse_der+0x678>)
 8088eca:	e705      	b.n	8088cd8 <mbedtls_x509_crt_parse_der+0x460>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    /* Sequence length must be >= 1 */
    if( ext_key_usage->buf.p == NULL )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 8088ecc:	4809      	ldr	r0, [pc, #36]	; (8088ef4 <mbedtls_x509_crt_parse_der+0x67c>)
 8088ece:	e703      	b.n	8088cd8 <mbedtls_x509_crt_parse_der+0x460>

        return( ret );
    }

    return( 0 );
}
 8088ed0:	4628      	mov	r0, r5
 8088ed2:	b01b      	add	sp, #108	; 0x6c
 8088ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8088ed8:	ffffdaa0 	.word	0xffffdaa0
 8088edc:	ffffda9a 	.word	0xffffda9a
 8088ee0:	ffffd980 	.word	0xffffd980
 8088ee4:	ffffda96 	.word	0xffffda96
 8088ee8:	ffffda9e 	.word	0xffffda9e
 8088eec:	ffffdb00 	.word	0xffffdb00
 8088ef0:	ffffdf80 	.word	0xffffdf80
 8088ef4:	ffffda9c 	.word	0xffffda9c

08088ef8 <mbedtls_x509_crt_parse>:
/*
 * Parse one or more PEM certificates from a buffer and add them to the chained
 * list
 */
int mbedtls_x509_crt_parse( mbedtls_x509_crt *chain, const unsigned char *buf, size_t buflen )
{
 8088ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8088efc:	460d      	mov	r5, r1
 8088efe:	b088      	sub	sp, #32
 8088f00:	4617      	mov	r7, r2
#endif

    /*
     * Check for valid input
     */
    if( chain == NULL || buf == NULL )
 8088f02:	4681      	mov	r9, r0
 8088f04:	2800      	cmp	r0, #0
 8088f06:	d054      	beq.n	8088fb2 <mbedtls_x509_crt_parse+0xba>
 8088f08:	2900      	cmp	r1, #0
 8088f0a:	d052      	beq.n	8088fb2 <mbedtls_x509_crt_parse+0xba>
    /*
     * Determine buffer content. Buffer contains either one DER certificate or
     * one or more PEM certificates.
     */
#if defined(MBEDTLS_PEM_PARSE_C)
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
 8088f0c:	2a00      	cmp	r2, #0
 8088f0e:	d054      	beq.n	8088fba <mbedtls_x509_crt_parse+0xc2>
 8088f10:	188b      	adds	r3, r1, r2
 8088f12:	f813 4c01 	ldrb.w	r4, [r3, #-1]
 8088f16:	2c00      	cmp	r4, #0
 8088f18:	d14f      	bne.n	8088fba <mbedtls_x509_crt_parse+0xc2>
        strstr( (const char *) buf, "-----BEGIN CERTIFICATE-----" ) != NULL )
 8088f1a:	492c      	ldr	r1, [pc, #176]	; (8088fcc <mbedtls_x509_crt_parse+0xd4>)
 8088f1c:	4628      	mov	r0, r5
 8088f1e:	f00b f8ac 	bl	809407a <strstr>
    /*
     * Determine buffer content. Buffer contains either one DER certificate or
     * one or more PEM certificates.
     */
#if defined(MBEDTLS_PEM_PARSE_C)
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
 8088f22:	2800      	cmp	r0, #0
 8088f24:	d049      	beq.n	8088fba <mbedtls_x509_crt_parse+0xc2>
 8088f26:	46a0      	mov	r8, r4
 8088f28:	46a2      	mov	sl, r4
    {
        int ret;
        mbedtls_pem_context pem;

        /* 1 rather than 0 since the terminating NULL byte is counted in */
        while( buflen > 1 )
 8088f2a:	2f01      	cmp	r7, #1
 8088f2c:	d938      	bls.n	8088fa0 <mbedtls_x509_crt_parse+0xa8>
        {
            size_t use_len;
            mbedtls_pem_init( &pem );
 8088f2e:	a805      	add	r0, sp, #20
 8088f30:	f005 fb52 	bl	808e5d8 <mbedtls_pem_init>

            /* If we get there, we know the string is null-terminated */
            ret = mbedtls_pem_read_buffer( &pem,
                           "-----BEGIN CERTIFICATE-----",
                           "-----END CERTIFICATE-----",
                           buf, NULL, 0, &use_len );
 8088f34:	ab04      	add	r3, sp, #16
 8088f36:	9302      	str	r3, [sp, #8]
 8088f38:	2300      	movs	r3, #0
 8088f3a:	9301      	str	r3, [sp, #4]
 8088f3c:	9300      	str	r3, [sp, #0]
 8088f3e:	4a24      	ldr	r2, [pc, #144]	; (8088fd0 <mbedtls_x509_crt_parse+0xd8>)
 8088f40:	462b      	mov	r3, r5
 8088f42:	4922      	ldr	r1, [pc, #136]	; (8088fcc <mbedtls_x509_crt_parse+0xd4>)
 8088f44:	a805      	add	r0, sp, #20
 8088f46:	f005 fb4d 	bl	808e5e4 <mbedtls_pem_read_buffer>

            if( ret == 0 )
 8088f4a:	4606      	mov	r6, r0
 8088f4c:	b968      	cbnz	r0, 8088f6a <mbedtls_x509_crt_parse+0x72>
            {
                /*
                 * Was PEM encoded
                 */
                buflen -= use_len;
 8088f4e:	9b04      	ldr	r3, [sp, #16]
                continue;
            }
            else
                break;

            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
 8088f50:	9a06      	ldr	r2, [sp, #24]
 8088f52:	9905      	ldr	r1, [sp, #20]
 8088f54:	4648      	mov	r0, r9
            if( ret == 0 )
            {
                /*
                 * Was PEM encoded
                 */
                buflen -= use_len;
 8088f56:	1aff      	subs	r7, r7, r3
                buf += use_len;
 8088f58:	441d      	add	r5, r3
                continue;
            }
            else
                break;

            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
 8088f5a:	f7ff fc8d 	bl	8088878 <mbedtls_x509_crt_parse_der>
 8088f5e:	4606      	mov	r6, r0

            mbedtls_pem_free( &pem );
 8088f60:	a805      	add	r0, sp, #20
 8088f62:	f005 fbcd 	bl	808e700 <mbedtls_pem_free>

            if( ret != 0 )
 8088f66:	b96e      	cbnz	r6, 8088f84 <mbedtls_x509_crt_parse+0x8c>
 8088f68:	e015      	b.n	8088f96 <mbedtls_x509_crt_parse+0x9e>
                 * Was PEM encoded
                 */
                buflen -= use_len;
                buf += use_len;
            }
            else if( ret == MBEDTLS_ERR_PEM_BAD_INPUT_DATA )
 8088f6a:	f510 5fa4 	cmn.w	r0, #5248	; 0x1480
 8088f6e:	d015      	beq.n	8088f9c <mbedtls_x509_crt_parse+0xa4>
            {
                return( ret );
            }
            else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 8088f70:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 8088f74:	d014      	beq.n	8088fa0 <mbedtls_x509_crt_parse+0xa8>
            {
                mbedtls_pem_free( &pem );
 8088f76:	a805      	add	r0, sp, #20
 8088f78:	f005 fbc2 	bl	808e700 <mbedtls_pem_free>

                /*
                 * PEM header and footer were found
                 */
                buflen -= use_len;
 8088f7c:	9b04      	ldr	r3, [sp, #16]
 8088f7e:	1aff      	subs	r7, r7, r3
                buf += use_len;
 8088f80:	441d      	add	r5, r3
 8088f82:	e002      	b.n	8088f8a <mbedtls_x509_crt_parse+0x92>
            if( ret != 0 )
            {
                /*
                 * Quit parsing on a memory error
                 */
                if( ret == MBEDTLS_ERR_X509_ALLOC_FAILED )
 8088f84:	f516 5f22 	cmn.w	r6, #10368	; 0x2880
 8088f88:	d008      	beq.n	8088f9c <mbedtls_x509_crt_parse+0xa4>
                    return( ret );

                if( first_error == 0 )
 8088f8a:	f1b8 0f00 	cmp.w	r8, #0
 8088f8e:	bf08      	it	eq
 8088f90:	46b0      	moveq	r8, r6
                    first_error = ret;

                total_failed++;
 8088f92:	3401      	adds	r4, #1
                continue;
 8088f94:	e7c9      	b.n	8088f2a <mbedtls_x509_crt_parse+0x32>
            }

            success = 1;
 8088f96:	f04f 0a01 	mov.w	sl, #1
 8088f9a:	e7c6      	b.n	8088f2a <mbedtls_x509_crt_parse+0x32>
 8088f9c:	4630      	mov	r0, r6
 8088f9e:	e011      	b.n	8088fc4 <mbedtls_x509_crt_parse+0xcc>
        }
    }

    if( success )
 8088fa0:	f1ba 0f00 	cmp.w	sl, #0
 8088fa4:	d107      	bne.n	8088fb6 <mbedtls_x509_crt_parse+0xbe>
        return( total_failed );
    else if( first_error )
 8088fa6:	480b      	ldr	r0, [pc, #44]	; (8088fd4 <mbedtls_x509_crt_parse+0xdc>)
 8088fa8:	f1b8 0f00 	cmp.w	r8, #0
 8088fac:	bf18      	it	ne
 8088fae:	4640      	movne	r0, r8
 8088fb0:	e008      	b.n	8088fc4 <mbedtls_x509_crt_parse+0xcc>

    /*
     * Check for valid input
     */
    if( chain == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8088fb2:	4809      	ldr	r0, [pc, #36]	; (8088fd8 <mbedtls_x509_crt_parse+0xe0>)
 8088fb4:	e006      	b.n	8088fc4 <mbedtls_x509_crt_parse+0xcc>
 8088fb6:	4620      	mov	r0, r4
 8088fb8:	e004      	b.n	8088fc4 <mbedtls_x509_crt_parse+0xcc>
    {
        buf_format = MBEDTLS_X509_FORMAT_PEM;
    }

    if( buf_format == MBEDTLS_X509_FORMAT_DER )
        return mbedtls_x509_crt_parse_der( chain, buf, buflen );
 8088fba:	463a      	mov	r2, r7
 8088fbc:	4629      	mov	r1, r5
 8088fbe:	4648      	mov	r0, r9
 8088fc0:	f7ff fc5a 	bl	8088878 <mbedtls_x509_crt_parse_der>
    else if( first_error )
        return( first_error );
    else
        return( MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT );
#endif /* MBEDTLS_PEM_PARSE_C */
}
 8088fc4:	b008      	add	sp, #32
 8088fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8088fca:	bf00      	nop
 8088fcc:	08097f41 	.word	0x08097f41
 8088fd0:	08097f5d 	.word	0x08097f5d
 8088fd4:	ffffd880 	.word	0xffffd880
 8088fd8:	ffffd800 	.word	0xffffd800

08088fdc <_ZL15mbedtls_zeroizePvj>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
#include "mbedtls/oid.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 8088fdc:	4401      	add	r1, r0
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 8088fde:	2300      	movs	r3, #0
 8088fe0:	4288      	cmp	r0, r1
 8088fe2:	d002      	beq.n	8088fea <_ZL15mbedtls_zeroizePvj+0xe>
 8088fe4:	7003      	strb	r3, [r0, #0]
 8088fe6:	3001      	adds	r0, #1
 8088fe8:	e7fa      	b.n	8088fe0 <_ZL15mbedtls_zeroizePvj+0x4>
 8088fea:	4770      	bx	lr

08088fec <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>:
 * Start a timer.
 * Passing millisecs = 0 cancels a running timer.
 */
static void ssl_set_timer( mbedtls_ssl_context *ssl, uint32_t millisecs )
{
    if( ssl->f_set_timer == NULL )
 8088fec:	6c83      	ldr	r3, [r0, #72]	; 0x48
/*
 * Start a timer.
 * Passing millisecs = 0 cancels a running timer.
 */
static void ssl_set_timer( mbedtls_ssl_context *ssl, uint32_t millisecs )
{
 8088fee:	460a      	mov	r2, r1
    if( ssl->f_set_timer == NULL )
 8088ff0:	b113      	cbz	r3, 8088ff8 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm+0xc>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "set_timer to %d ms", (int) millisecs ) );
    ssl->f_set_timer( ssl->p_timer, millisecs / 4, millisecs );
 8088ff2:	0889      	lsrs	r1, r1, #2
 8088ff4:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8088ff6:	4718      	bx	r3
 8088ff8:	4770      	bx	lr
	...

08088ffc <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi>:

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_calc_finished_tls_sha256(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 8088ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
    int len = 12;
    const char *sender;
    mbedtls_sha256_context sha256;
    unsigned char padbuf[32];

    mbedtls_ssl_session *session = ssl->session_negotiate;
 8088ffe:	6ac5      	ldr	r5, [r0, #44]	; 0x2c

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_calc_finished_tls_sha256(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 8089000:	b0a9      	sub	sp, #164	; 0xa4
 8089002:	4604      	mov	r4, r0
 8089004:	460f      	mov	r7, r1
 8089006:	4616      	mov	r6, r2
    const char *sender;
    mbedtls_sha256_context sha256;
    unsigned char padbuf[32];

    mbedtls_ssl_session *session = ssl->session_negotiate;
    if( !session )
 8089008:	b905      	cbnz	r5, 808900c <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x10>
        session = ssl->session;
 808900a:	6a85      	ldr	r5, [r0, #40]	; 0x28

    mbedtls_sha256_init( &sha256 );
 808900c:	a80d      	add	r0, sp, #52	; 0x34
 808900e:	f7f8 ff83 	bl	8081f18 <mbedtls_sha256_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha256" ) );

    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 8089012:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8089014:	a80d      	add	r0, sp, #52	; 0x34
 8089016:	3118      	adds	r1, #24
 8089018:	f7f8 ff8c 	bl	8081f34 <mbedtls_sha256_clone>
                   sha256.state, sizeof( sha256.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
 808901c:	4b10      	ldr	r3, [pc, #64]	; (8089060 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x64>)
 808901e:	4911      	ldr	r1, [pc, #68]	; (8089064 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x68>)

    mbedtls_sha256_finish_ret( &sha256, padbuf );
 8089020:	a80d      	add	r0, sp, #52	; 0x34
                   sha256.state, sizeof( sha256.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
 8089022:	2e00      	cmp	r6, #0
 8089024:	bf0c      	ite	eq
 8089026:	461e      	moveq	r6, r3
 8089028:	460e      	movne	r6, r1

    mbedtls_sha256_finish_ret( &sha256, padbuf );
 808902a:	a905      	add	r1, sp, #20
 808902c:	f7f9 fb7c 	bl	8082728 <mbedtls_sha256_finish_ret>

    ssl->handshake->tls_prf( session->master, 48, sender,
 8089030:	6b23      	ldr	r3, [r4, #48]	; 0x30
                             padbuf, 32, buf, len );
 8089032:	220c      	movs	r2, #12
 8089034:	2420      	movs	r4, #32
 8089036:	9202      	str	r2, [sp, #8]
 8089038:	9701      	str	r7, [sp, #4]
 808903a:	9400      	str	r4, [sp, #0]
 808903c:	4632      	mov	r2, r6
 808903e:	f8d3 716c 	ldr.w	r7, [r3, #364]	; 0x16c
 8089042:	2130      	movs	r1, #48	; 0x30
 8089044:	ab05      	add	r3, sp, #20
 8089046:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 808904a:	47b8      	blx	r7

    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );

    mbedtls_sha256_free( &sha256 );
 808904c:	a80d      	add	r0, sp, #52	; 0x34
 808904e:	f7f8 ff67 	bl	8081f20 <mbedtls_sha256_free>

    mbedtls_zeroize(  padbuf, sizeof(  padbuf ) );
 8089052:	4621      	mov	r1, r4
 8089054:	a805      	add	r0, sp, #20
 8089056:	f7ff ffc1 	bl	8088fdc <_ZL15mbedtls_zeroizePvj>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
}
 808905a:	b029      	add	sp, #164	; 0xa4
 808905c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808905e:	bf00      	nop
 8089060:	08098371 	.word	0x08098371
 8089064:	08098381 	.word	0x08098381

08089068 <_ZL26ssl_calc_verify_tls_sha256P19mbedtls_ssl_contextPh>:
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 */

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
void ssl_calc_verify_tls_sha256( mbedtls_ssl_context *ssl, unsigned char hash[32] )
{
 8089068:	b530      	push	{r4, r5, lr}
 808906a:	4605      	mov	r5, r0
 808906c:	460c      	mov	r4, r1
 808906e:	b09d      	sub	sp, #116	; 0x74
    mbedtls_sha256_context sha256;

    mbedtls_sha256_init( &sha256 );
 8089070:	a801      	add	r0, sp, #4
 8089072:	f7f8 ff51 	bl	8081f18 <mbedtls_sha256_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha256" ) );

    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 8089076:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8089078:	a801      	add	r0, sp, #4
 808907a:	3118      	adds	r1, #24
 808907c:	f7f8 ff5a 	bl	8081f34 <mbedtls_sha256_clone>
    mbedtls_sha256_finish_ret( &sha256, hash );
 8089080:	4621      	mov	r1, r4
 8089082:	a801      	add	r0, sp, #4
 8089084:	f7f9 fb50 	bl	8082728 <mbedtls_sha256_finish_ret>

    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 32 );
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );

    mbedtls_sha256_free( &sha256 );
 8089088:	a801      	add	r0, sp, #4
 808908a:	f7f8 ff49 	bl	8081f20 <mbedtls_sha256_free>

    return;
}
 808908e:	b01d      	add	sp, #116	; 0x74
 8089090:	bd30      	pop	{r4, r5, pc}
	...

08089094 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>:
static int tls_prf_generic( mbedtls_md_type_t md_type,
                            const unsigned char *secret, size_t slen,
                            const char *label,
                            const unsigned char *random, size_t rlen,
                            unsigned char *dstbuf, size_t dlen )
{
 8089094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8089098:	4604      	mov	r4, r0
 808909a:	b0b7      	sub	sp, #220	; 0xdc
    unsigned char h_i[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    int ret;

    mbedtls_md_init( &md_ctx );
 808909c:	a803      	add	r0, sp, #12
static int tls_prf_generic( mbedtls_md_type_t md_type,
                            const unsigned char *secret, size_t slen,
                            const char *label,
                            const unsigned char *random, size_t rlen,
                            unsigned char *dstbuf, size_t dlen )
{
 808909e:	468a      	mov	sl, r1
 80890a0:	4693      	mov	fp, r2
 80890a2:	4699      	mov	r9, r3
 80890a4:	9e43      	ldr	r6, [sp, #268]	; 0x10c
    unsigned char h_i[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    int ret;

    mbedtls_md_init( &md_ctx );
 80890a6:	f7fe faa3 	bl	80875f0 <mbedtls_md_init>

    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
 80890aa:	4620      	mov	r0, r4
 80890ac:	f7fe fa94 	bl	80875d8 <mbedtls_md_info_from_type>
 80890b0:	4607      	mov	r7, r0
 80890b2:	2800      	cmp	r0, #0
 80890b4:	d073      	beq.n	808919e <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x10a>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );

    md_len = mbedtls_md_get_size( md_info );
 80890b6:	f7fe fbd3 	bl	8087860 <mbedtls_md_get_size>
 80890ba:	4604      	mov	r4, r0

    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
 80890bc:	4648      	mov	r0, r9
 80890be:	f00a ffac 	bl	809401a <strlen>
 80890c2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80890c4:	1823      	adds	r3, r4, r0
 80890c6:	189a      	adds	r2, r3, r2
 80890c8:	2a80      	cmp	r2, #128	; 0x80
 80890ca:	4605      	mov	r5, r0
 80890cc:	9301      	str	r3, [sp, #4]
 80890ce:	d868      	bhi.n	80891a2 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x10e>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
 80890d0:	ab16      	add	r3, sp, #88	; 0x58
 80890d2:	eb03 0804 	add.w	r8, r3, r4
 80890d6:	4602      	mov	r2, r0
 80890d8:	4649      	mov	r1, r9
 80890da:	4640      	mov	r0, r8
 80890dc:	f00a ff41 	bl	8093f62 <memcpy>
    memcpy( tmp + md_len + nb, random, rlen );
 80890e0:	9b01      	ldr	r3, [sp, #4]
 80890e2:	a816      	add	r0, sp, #88	; 0x58
 80890e4:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80890e6:	9940      	ldr	r1, [sp, #256]	; 0x100
 80890e8:	4418      	add	r0, r3
 80890ea:	f00a ff3a 	bl	8093f62 <memcpy>
    nb += rlen;

    /*
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
 80890ee:	4639      	mov	r1, r7
 80890f0:	2201      	movs	r2, #1
 80890f2:	a803      	add	r0, sp, #12
 80890f4:	f7fe faa2 	bl	808763c <mbedtls_md_setup>
 80890f8:	4607      	mov	r7, r0
 80890fa:	2800      	cmp	r0, #0
 80890fc:	d152      	bne.n	80891a4 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x110>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
    memcpy( tmp + md_len + nb, random, rlen );
    nb += rlen;
 80890fe:	9b41      	ldr	r3, [sp, #260]	; 0x104
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
        return( ret );

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
 8089100:	465a      	mov	r2, fp
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
    memcpy( tmp + md_len + nb, random, rlen );
    nb += rlen;
 8089102:	441d      	add	r5, r3
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
        return( ret );

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
 8089104:	4651      	mov	r1, sl
 8089106:	a803      	add	r0, sp, #12
 8089108:	f7fe fae8 	bl	80876dc <mbedtls_md_hmac_starts>
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
 808910c:	462a      	mov	r2, r5
 808910e:	4641      	mov	r1, r8
 8089110:	a803      	add	r0, sp, #12
 8089112:	f7fe fb43 	bl	808779c <mbedtls_md_hmac_update>
    mbedtls_md_hmac_finish( &md_ctx, tmp );
 8089116:	a916      	add	r1, sp, #88	; 0x58
 8089118:	a803      	add	r0, sp, #12
 808911a:	f7fe fb4f 	bl	80877bc <mbedtls_md_hmac_finish>

    for( i = 0; i < dlen; i += md_len )
 808911e:	46b9      	mov	r9, r7
 8089120:	f10d 0818 	add.w	r8, sp, #24
    {
        mbedtls_md_hmac_reset ( &md_ctx );
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
 8089124:	4425      	add	r5, r4

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
    mbedtls_md_hmac_finish( &md_ctx, tmp );

    for( i = 0; i < dlen; i += md_len )
 8089126:	45b1      	cmp	r9, r6

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
    }

    mbedtls_md_free( &md_ctx );
 8089128:	a803      	add	r0, sp, #12

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
    mbedtls_md_hmac_finish( &md_ctx, tmp );

    for( i = 0; i < dlen; i += md_len )
 808912a:	d22c      	bcs.n	8089186 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xf2>
    {
        mbedtls_md_hmac_reset ( &md_ctx );
 808912c:	f7fe fb76 	bl	808781c <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
 8089130:	462a      	mov	r2, r5
 8089132:	a916      	add	r1, sp, #88	; 0x58
 8089134:	a803      	add	r0, sp, #12
 8089136:	f7fe fb31 	bl	808779c <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, h_i );
 808913a:	4641      	mov	r1, r8
 808913c:	a803      	add	r0, sp, #12
 808913e:	f7fe fb3d 	bl	80877bc <mbedtls_md_hmac_finish>

        mbedtls_md_hmac_reset ( &md_ctx );
 8089142:	a803      	add	r0, sp, #12
 8089144:	f7fe fb6a 	bl	808781c <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
 8089148:	4622      	mov	r2, r4
 808914a:	a916      	add	r1, sp, #88	; 0x58
 808914c:	a803      	add	r0, sp, #12
 808914e:	f7fe fb25 	bl	808779c <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, tmp );
 8089152:	a916      	add	r1, sp, #88	; 0x58
 8089154:	a803      	add	r0, sp, #12
 8089156:	f7fe fb31 	bl	80877bc <mbedtls_md_hmac_finish>

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
 808915a:	eb09 0104 	add.w	r1, r9, r4
 808915e:	428e      	cmp	r6, r1
 8089160:	bf36      	itet	cc
 8089162:	fbb6 f2f4 	udivcc	r2, r6, r4
 8089166:	4622      	movcs	r2, r4
 8089168:	fb04 6212 	mlscc	r2, r4, r2, r6

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
 808916c:	9842      	ldr	r0, [sp, #264]	; 0x108
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;

        for( j = 0; j < k; j++ )
 808916e:	2300      	movs	r3, #0
            dstbuf[i + j]  = h_i[j];
 8089170:	4481      	add	r9, r0
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;

        for( j = 0; j < k; j++ )
 8089172:	4293      	cmp	r3, r2
 8089174:	d101      	bne.n	808917a <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xe6>

        mbedtls_md_hmac_reset ( &md_ctx );
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
 8089176:	4689      	mov	r9, r1
 8089178:	e7d5      	b.n	8089126 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x92>

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
 808917a:	f818 0003 	ldrb.w	r0, [r8, r3]
 808917e:	f809 0003 	strb.w	r0, [r9, r3]
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;

        for( j = 0; j < k; j++ )
 8089182:	3301      	adds	r3, #1
 8089184:	e7f5      	b.n	8089172 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xde>
            dstbuf[i + j]  = h_i[j];
    }

    mbedtls_md_free( &md_ctx );
 8089186:	f7fe fa38 	bl	80875fa <mbedtls_md_free>

    mbedtls_zeroize( tmp, sizeof( tmp ) );
 808918a:	2180      	movs	r1, #128	; 0x80
 808918c:	a816      	add	r0, sp, #88	; 0x58
 808918e:	f7ff ff25 	bl	8088fdc <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( h_i, sizeof( h_i ) );
 8089192:	4640      	mov	r0, r8
 8089194:	2140      	movs	r1, #64	; 0x40
 8089196:	f7ff ff21 	bl	8088fdc <_ZL15mbedtls_zeroizePvj>

    return( 0 );
 808919a:	2000      	movs	r0, #0
 808919c:	e002      	b.n	80891a4 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x110>
    int ret;

    mbedtls_md_init( &md_ctx );

    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 808919e:	4803      	ldr	r0, [pc, #12]	; (80891ac <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x118>)
 80891a0:	e000      	b.n	80891a4 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x110>

    md_len = mbedtls_md_get_size( md_info );

    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80891a2:	4803      	ldr	r0, [pc, #12]	; (80891b0 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x11c>)

    mbedtls_zeroize( tmp, sizeof( tmp ) );
    mbedtls_zeroize( h_i, sizeof( h_i ) );

    return( 0 );
}
 80891a4:	b037      	add	sp, #220	; 0xdc
 80891a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80891aa:	bf00      	nop
 80891ac:	ffff9400 	.word	0xffff9400
 80891b0:	ffff8f00 	.word	0xffff8f00

080891b4 <_ZL14tls_prf_sha256PKhjPKcS0_jPhj>:
#if defined(MBEDTLS_SHA256_C)
static int tls_prf_sha256( const unsigned char *secret, size_t slen,
                           const char *label,
                           const unsigned char *random, size_t rlen,
                           unsigned char *dstbuf, size_t dlen )
{
 80891b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA256, secret, slen,
                             label, random, rlen, dstbuf, dlen ) );
 80891b6:	9c08      	ldr	r4, [sp, #32]
 80891b8:	9403      	str	r4, [sp, #12]
 80891ba:	9c07      	ldr	r4, [sp, #28]
 80891bc:	9402      	str	r4, [sp, #8]
 80891be:	9c06      	ldr	r4, [sp, #24]
 80891c0:	e88d 0018 	stmia.w	sp, {r3, r4}
 80891c4:	4613      	mov	r3, r2
 80891c6:	460a      	mov	r2, r1
 80891c8:	4601      	mov	r1, r0
 80891ca:	2006      	movs	r0, #6
 80891cc:	f7ff ff62 	bl	8089094 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>
}
 80891d0:	b004      	add	sp, #16
 80891d2:	bd10      	pop	{r4, pc}

080891d4 <_ZL14tls_prf_sha384PKhjPKcS0_jPhj>:
#if defined(MBEDTLS_SHA512_C)
static int tls_prf_sha384( const unsigned char *secret, size_t slen,
                           const char *label,
                           const unsigned char *random, size_t rlen,
                           unsigned char *dstbuf, size_t dlen )
{
 80891d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA384, secret, slen,
                             label, random, rlen, dstbuf, dlen ) );
 80891d6:	9c08      	ldr	r4, [sp, #32]
 80891d8:	9403      	str	r4, [sp, #12]
 80891da:	9c07      	ldr	r4, [sp, #28]
 80891dc:	9402      	str	r4, [sp, #8]
 80891de:	9c06      	ldr	r4, [sp, #24]
 80891e0:	e88d 0018 	stmia.w	sp, {r3, r4}
 80891e4:	4613      	mov	r3, r2
 80891e6:	460a      	mov	r2, r1
 80891e8:	4601      	mov	r1, r0
 80891ea:	2007      	movs	r0, #7
 80891ec:	f7ff ff52 	bl	8089094 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>
}
 80891f0:	b004      	add	sp, #16
 80891f2:	bd10      	pop	{r4, pc}

080891f4 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi>:
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
static void ssl_calc_finished_tls_sha384(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 80891f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    int len = 12;
    const char *sender;
    mbedtls_sha512_context sha512;
    unsigned char padbuf[48];

    mbedtls_ssl_session *session = ssl->session_negotiate;
 80891f6:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
static void ssl_calc_finished_tls_sha384(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 80891f8:	b0c7      	sub	sp, #284	; 0x11c
 80891fa:	4604      	mov	r4, r0
 80891fc:	460f      	mov	r7, r1
 80891fe:	4616      	mov	r6, r2
    const char *sender;
    mbedtls_sha512_context sha512;
    unsigned char padbuf[48];

    mbedtls_ssl_session *session = ssl->session_negotiate;
    if( !session )
 8089200:	b905      	cbnz	r5, 8089204 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x10>
        session = ssl->session;
 8089202:	6a85      	ldr	r5, [r0, #40]	; 0x28

    mbedtls_sha512_init( &sha512 );
 8089204:	a810      	add	r0, sp, #64	; 0x40
 8089206:	f004 f95b 	bl	808d4c0 <mbedtls_sha512_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha384" ) );

    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
 808920a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 808920c:	a810      	add	r0, sp, #64	; 0x40
 808920e:	3188      	adds	r1, #136	; 0x88
 8089210:	f004 f964 	bl	808d4dc <mbedtls_sha512_clone>
                   sha512.state, sizeof( sha512.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
 8089214:	4b10      	ldr	r3, [pc, #64]	; (8089258 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x64>)
 8089216:	4911      	ldr	r1, [pc, #68]	; (808925c <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x68>)

    mbedtls_sha512_finish_ret( &sha512, padbuf );
 8089218:	a810      	add	r0, sp, #64	; 0x40
                   sha512.state, sizeof( sha512.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
 808921a:	2e00      	cmp	r6, #0
 808921c:	bf0c      	ite	eq
 808921e:	461e      	moveq	r6, r3
 8089220:	460e      	movne	r6, r1

    mbedtls_sha512_finish_ret( &sha512, padbuf );
 8089222:	a904      	add	r1, sp, #16
 8089224:	f005 f884 	bl	808e330 <mbedtls_sha512_finish_ret>

    ssl->handshake->tls_prf( session->master, 48, sender,
 8089228:	6b23      	ldr	r3, [r4, #48]	; 0x30
                             padbuf, 48, buf, len );
 808922a:	220c      	movs	r2, #12
 808922c:	2430      	movs	r4, #48	; 0x30
 808922e:	9202      	str	r2, [sp, #8]
 8089230:	9701      	str	r7, [sp, #4]
 8089232:	9400      	str	r4, [sp, #0]
 8089234:	4632      	mov	r2, r6
 8089236:	4621      	mov	r1, r4
 8089238:	f8d3 716c 	ldr.w	r7, [r3, #364]	; 0x16c
 808923c:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 8089240:	ab04      	add	r3, sp, #16
 8089242:	47b8      	blx	r7

    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );

    mbedtls_sha512_free( &sha512 );
 8089244:	a810      	add	r0, sp, #64	; 0x40
 8089246:	f004 f93f 	bl	808d4c8 <mbedtls_sha512_free>

    mbedtls_zeroize(  padbuf, sizeof( padbuf ) );
 808924a:	4621      	mov	r1, r4
 808924c:	a804      	add	r0, sp, #16
 808924e:	f7ff fec5 	bl	8088fdc <_ZL15mbedtls_zeroizePvj>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
}
 8089252:	b047      	add	sp, #284	; 0x11c
 8089254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8089256:	bf00      	nop
 8089258:	08098371 	.word	0x08098371
 808925c:	08098381 	.word	0x08098381

08089260 <_ZL26ssl_calc_verify_tls_sha384P19mbedtls_ssl_contextPh>:
}
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
void ssl_calc_verify_tls_sha384( mbedtls_ssl_context *ssl, unsigned char hash[48] )
{
 8089260:	b530      	push	{r4, r5, lr}
 8089262:	4605      	mov	r5, r0
 8089264:	460c      	mov	r4, r1
 8089266:	b0b7      	sub	sp, #220	; 0xdc
    mbedtls_sha512_context sha512;

    mbedtls_sha512_init( &sha512 );
 8089268:	4668      	mov	r0, sp
 808926a:	f004 f929 	bl	808d4c0 <mbedtls_sha512_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha384" ) );

    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
 808926e:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8089270:	4668      	mov	r0, sp
 8089272:	3188      	adds	r1, #136	; 0x88
 8089274:	f004 f932 	bl	808d4dc <mbedtls_sha512_clone>
    mbedtls_sha512_finish_ret( &sha512, hash );
 8089278:	4621      	mov	r1, r4
 808927a:	4668      	mov	r0, sp
 808927c:	f005 f858 	bl	808e330 <mbedtls_sha512_finish_ret>

    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 48 );
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );

    mbedtls_sha512_free( &sha512 );
 8089280:	4668      	mov	r0, sp
 8089282:	f004 f921 	bl	808d4c8 <mbedtls_sha512_free>

    return;
}
 8089286:	b037      	add	sp, #220	; 0xdc
 8089288:	bd30      	pop	{r4, r5, pc}
	...

0808928c <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context>:

/* Append a new keycert entry to a (possibly empty) list */
static int ssl_append_key_cert( mbedtls_ssl_key_cert **head,
                                mbedtls_x509_crt *cert,
                                mbedtls_pk_context *key )
{
 808928c:	b570      	push	{r4, r5, r6, lr}
 808928e:	4604      	mov	r4, r0
 8089290:	460e      	mov	r6, r1
    mbedtls_ssl_key_cert *new_cert;

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
 8089292:	2001      	movs	r0, #1
 8089294:	210c      	movs	r1, #12

/* Append a new keycert entry to a (possibly empty) list */
static int ssl_append_key_cert( mbedtls_ssl_key_cert **head,
                                mbedtls_x509_crt *cert,
                                mbedtls_pk_context *key )
{
 8089296:	4615      	mov	r5, r2
    mbedtls_ssl_key_cert *new_cert;

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
 8089298:	f00a fd3c 	bl	8093d14 <calloc>
    if( new_cert == NULL )
 808929c:	b178      	cbz	r0, 80892be <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x32>
    new_cert->cert = cert;
    new_cert->key  = key;
    new_cert->next = NULL;

    /* Update head is the list was null, else add to the end */
    if( *head == NULL )
 808929e:	6822      	ldr	r2, [r4, #0]
    if( new_cert == NULL )
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

    new_cert->cert = cert;
    new_cert->key  = key;
    new_cert->next = NULL;
 80892a0:	2300      	movs	r3, #0

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
    if( new_cert == NULL )
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

    new_cert->cert = cert;
 80892a2:	6006      	str	r6, [r0, #0]
    new_cert->key  = key;
 80892a4:	6045      	str	r5, [r0, #4]
    new_cert->next = NULL;
 80892a6:	6083      	str	r3, [r0, #8]

    /* Update head is the list was null, else add to the end */
    if( *head == NULL )
 80892a8:	b912      	cbnz	r2, 80892b0 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x24>
    {
        *head = new_cert;
 80892aa:	6020      	str	r0, [r4, #0]
        while( cur->next != NULL )
            cur = cur->next;
        cur->next = new_cert;
    }

    return( 0 );
 80892ac:	4610      	mov	r0, r2
 80892ae:	bd70      	pop	{r4, r5, r6, pc}
        *head = new_cert;
    }
    else
    {
        mbedtls_ssl_key_cert *cur = *head;
        while( cur->next != NULL )
 80892b0:	6893      	ldr	r3, [r2, #8]
 80892b2:	b10b      	cbz	r3, 80892b8 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x2c>
 80892b4:	461a      	mov	r2, r3
 80892b6:	e7fb      	b.n	80892b0 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x24>
            cur = cur->next;
        cur->next = new_cert;
 80892b8:	6090      	str	r0, [r2, #8]
    }

    return( 0 );
 80892ba:	4618      	mov	r0, r3
 80892bc:	bd70      	pop	{r4, r5, r6, pc}
{
    mbedtls_ssl_key_cert *new_cert;

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
    if( new_cert == NULL )
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 80892be:	4801      	ldr	r0, [pc, #4]	; (80892c4 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x38>)
            cur = cur->next;
        cur->next = new_cert;
    }

    return( 0 );
}
 80892c0:	bd70      	pop	{r4, r5, r6, pc}
 80892c2:	bf00      	nop
 80892c4:	ffff8100 	.word	0xffff8100

080892c8 <_ZL26ssl_update_checksum_sha256P19mbedtls_ssl_contextPKhj>:
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_update_checksum_sha256( mbedtls_ssl_context *ssl,
                                        const unsigned char *buf, size_t len )
{
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
 80892c8:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80892ca:	3018      	adds	r0, #24
 80892cc:	f7f9 b9f2 	b.w	80826b4 <mbedtls_sha256_update_ret>

080892d0 <_ZL26ssl_update_checksum_sha384P19mbedtls_ssl_contextPKhj>:

#if defined(MBEDTLS_SHA512_C)
static void ssl_update_checksum_sha384( mbedtls_ssl_context *ssl,
                                        const unsigned char *buf, size_t len )
{
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
 80892d0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80892d2:	3088      	adds	r0, #136	; 0x88
 80892d4:	f004 bfe4 	b.w	808e2a0 <mbedtls_sha512_update_ret>

080892d8 <_ZL25ssl_update_checksum_startP19mbedtls_ssl_contextPKhj>:
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
}

static void ssl_update_checksum_start( mbedtls_ssl_context *ssl,
                                       const unsigned char *buf, size_t len )
{
 80892d8:	b570      	push	{r4, r5, r6, lr}
 80892da:	4604      	mov	r4, r0
 80892dc:	460d      	mov	r5, r1
 80892de:	4616      	mov	r6, r2
     mbedtls_md5_update_ret( &ssl->handshake->fin_md5 , buf, len );
    mbedtls_sha1_update_ret( &ssl->handshake->fin_sha1, buf, len );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
 80892e0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80892e2:	3018      	adds	r0, #24
 80892e4:	f7f9 f9e6 	bl	80826b4 <mbedtls_sha256_update_ret>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
 80892e8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80892ea:	4632      	mov	r2, r6
 80892ec:	4629      	mov	r1, r5
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
}
 80892ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
 80892f2:	3088      	adds	r0, #136	; 0x88
 80892f4:	f004 bfd4 	b.w	808e2a0 <mbedtls_sha512_update_ret>

080892f8 <mbedtls_ssl_derive_keys>:
static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
{
 80892f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t mac_key_len;
    size_t iv_copy_len;
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
 80892fc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
 80892fe:	6c04      	ldr	r4, [r0, #64]	; 0x40
static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
{
 8089300:	b0d7      	sub	sp, #348	; 0x15c
    size_t mac_key_len;
    size_t iv_copy_len;
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
 8089302:	9305      	str	r3, [sp, #20]
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );

    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
 8089304:	6823      	ldr	r3, [r4, #0]
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;
 8089306:	6b05      	ldr	r5, [r0, #48]	; 0x30
static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
{
 8089308:	4680      	mov	r8, r0
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );

    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
 808930a:	7a18      	ldrb	r0, [r3, #8]
 808930c:	f7f9 fd08 	bl	8082d20 <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
 8089310:	4606      	mov	r6, r0
 8089312:	b908      	cbnz	r0, 8089318 <mbedtls_ssl_derive_keys+0x20>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "cipher info for %d not found",
                            transform->ciphersuite_info->cipher ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8089314:	48a5      	ldr	r0, [pc, #660]	; (80895ac <mbedtls_ssl_derive_keys+0x2b4>)
 8089316:	e145      	b.n	80895a4 <mbedtls_ssl_derive_keys+0x2ac>
    }

    md_info = mbedtls_md_info_from_type( transform->ciphersuite_info->mac );
 8089318:	6823      	ldr	r3, [r4, #0]
 808931a:	7a58      	ldrb	r0, [r3, #9]
 808931c:	f7fe f95c 	bl	80875d8 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8089320:	4682      	mov	sl, r0
 8089322:	2800      	cmp	r0, #0
 8089324:	d0f6      	beq.n	8089314 <mbedtls_ssl_derive_keys+0x1c>
    }
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
 8089326:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808932a:	2b03      	cmp	r3, #3
 808932c:	d001      	beq.n	8089332 <mbedtls_ssl_derive_keys+0x3a>
    else
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 808932e:	48a0      	ldr	r0, [pc, #640]	; (80895b0 <mbedtls_ssl_derive_keys+0x2b8>)
 8089330:	e138      	b.n	80895a4 <mbedtls_ssl_derive_keys+0x2ac>
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
        transform->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
 8089332:	6823      	ldr	r3, [r4, #0]
    }
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
 8089334:	7a5b      	ldrb	r3, [r3, #9]
 8089336:	2b07      	cmp	r3, #7
 8089338:	d107      	bne.n	808934a <mbedtls_ssl_derive_keys+0x52>
        transform->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
    {
        handshake->tls_prf = tls_prf_sha384;
 808933a:	4b9e      	ldr	r3, [pc, #632]	; (80895b4 <mbedtls_ssl_derive_keys+0x2bc>)
 808933c:	f8c5 316c 	str.w	r3, [r5, #364]	; 0x16c
        handshake->calc_verify = ssl_calc_verify_tls_sha384;
 8089340:	4b9d      	ldr	r3, [pc, #628]	; (80895b8 <mbedtls_ssl_derive_keys+0x2c0>)
 8089342:	f8c5 3164 	str.w	r3, [r5, #356]	; 0x164
        handshake->calc_finished = ssl_calc_finished_tls_sha384;
 8089346:	4b9d      	ldr	r3, [pc, #628]	; (80895bc <mbedtls_ssl_derive_keys+0x2c4>)
 8089348:	e006      	b.n	8089358 <mbedtls_ssl_derive_keys+0x60>
    else
#endif
#if defined(MBEDTLS_SHA256_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
    {
        handshake->tls_prf = tls_prf_sha256;
 808934a:	4b9d      	ldr	r3, [pc, #628]	; (80895c0 <mbedtls_ssl_derive_keys+0x2c8>)
 808934c:	f8c5 316c 	str.w	r3, [r5, #364]	; 0x16c
        handshake->calc_verify = ssl_calc_verify_tls_sha256;
 8089350:	4b9c      	ldr	r3, [pc, #624]	; (80895c4 <mbedtls_ssl_derive_keys+0x2cc>)
 8089352:	f8c5 3164 	str.w	r3, [r5, #356]	; 0x164
        handshake->calc_finished = ssl_calc_finished_tls_sha256;
 8089356:	4b9c      	ldr	r3, [pc, #624]	; (80895c8 <mbedtls_ssl_derive_keys+0x2d0>)
 8089358:	f8c5 3168 	str.w	r3, [r5, #360]	; 0x168
     *     MD5( premaster + SHA1( 'CCC' + premaster + randbytes ) )
     *
     * TLSv1+:
     *   master = PRF( premaster, "master secret", randbytes )[0..47]
     */
    if( handshake->resume == 0 )
 808935c:	f8d5 31e4 	ldr.w	r3, [r5, #484]	; 0x1e4
 8089360:	f505 7bda 	add.w	fp, r5, #436	; 0x1b4
 8089364:	f505 79ba 	add.w	r9, r5, #372	; 0x174
 8089368:	b9ab      	cbnz	r3, 8089396 <mbedtls_ssl_derive_keys+0x9e>
        else
#endif
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
                                  "master secret",
                                  handshake->randbytes, 64,
                                  session->master, 48 );
 808936a:	2330      	movs	r3, #48	; 0x30
 808936c:	9302      	str	r3, [sp, #8]
            }

        }
        else
#endif
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 808936e:	9b05      	ldr	r3, [sp, #20]
                                  "master secret",
                                  handshake->randbytes, 64,
                                  session->master, 48 );
 8089370:	4a96      	ldr	r2, [pc, #600]	; (80895cc <mbedtls_ssl_derive_keys+0x2d4>)
            }

        }
        else
#endif
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 8089372:	332c      	adds	r3, #44	; 0x2c
                                  "master secret",
                                  handshake->randbytes, 64,
                                  session->master, 48 );
 8089374:	9301      	str	r3, [sp, #4]
 8089376:	2340      	movs	r3, #64	; 0x40
 8089378:	9300      	str	r3, [sp, #0]
 808937a:	f8d5 1170 	ldr.w	r1, [r5, #368]	; 0x170
 808937e:	464b      	mov	r3, r9
 8089380:	4658      	mov	r0, fp
 8089382:	f8d5 716c 	ldr.w	r7, [r5, #364]	; 0x16c
 8089386:	47b8      	blx	r7
        if( ret != 0 )
 8089388:	2800      	cmp	r0, #0
 808938a:	f040 810b 	bne.w	80895a4 <mbedtls_ssl_derive_keys+0x2ac>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
            return( ret );
        }

        mbedtls_zeroize( handshake->premaster, sizeof(handshake->premaster) );
 808938e:	2130      	movs	r1, #48	; 0x30
 8089390:	4658      	mov	r0, fp
 8089392:	f7ff fe23 	bl	8088fdc <_ZL15mbedtls_zeroizePvj>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "no premaster (session resumed)" ) );

    /*
     * Swap the client and server random values.
     */
    memcpy( tmp, handshake->randbytes, 64 );
 8089396:	464b      	mov	r3, r9
 8089398:	af06      	add	r7, sp, #24
 808939a:	463a      	mov	r2, r7
 808939c:	6818      	ldr	r0, [r3, #0]
 808939e:	6859      	ldr	r1, [r3, #4]
 80893a0:	3308      	adds	r3, #8
 80893a2:	c203      	stmia	r2!, {r0, r1}
 80893a4:	455b      	cmp	r3, fp
 80893a6:	4617      	mov	r7, r2
 80893a8:	d1f7      	bne.n	808939a <mbedtls_ssl_derive_keys+0xa2>
    memcpy( handshake->randbytes, tmp + 32, 32 );
 80893aa:	464f      	mov	r7, r9
 80893ac:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
 80893b0:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
 80893b4:	4673      	mov	r3, lr
 80893b6:	cb03      	ldmia	r3!, {r0, r1}
 80893b8:	455b      	cmp	r3, fp
 80893ba:	6038      	str	r0, [r7, #0]
 80893bc:	6079      	str	r1, [r7, #4]
 80893be:	469e      	mov	lr, r3
 80893c0:	f107 0708 	add.w	r7, r7, #8
 80893c4:	d1f6      	bne.n	80893b4 <mbedtls_ssl_derive_keys+0xbc>
    memcpy( handshake->randbytes + 32, tmp, 32 );
 80893c6:	f10d 0e18 	add.w	lr, sp, #24
 80893ca:	f505 77ca 	add.w	r7, r5, #404	; 0x194
 80893ce:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 80893d2:	4673      	mov	r3, lr
 80893d4:	cb03      	ldmia	r3!, {r0, r1}
 80893d6:	4563      	cmp	r3, ip
 80893d8:	6038      	str	r0, [r7, #0]
 80893da:	6079      	str	r1, [r7, #4]
 80893dc:	469e      	mov	lr, r3
 80893de:	f107 0708 	add.w	r7, r7, #8
 80893e2:	d1f6      	bne.n	80893d2 <mbedtls_ssl_derive_keys+0xda>
    mbedtls_zeroize( tmp, sizeof( tmp ) );
 80893e4:	2140      	movs	r1, #64	; 0x40
 80893e6:	a806      	add	r0, sp, #24
 80893e8:	f7ff fdf8 	bl	8088fdc <_ZL15mbedtls_zeroizePvj>
     *      ...
     *
     *  TLSv1:
     *    key block = PRF( master, "key expansion", randbytes )
     */
    ret = handshake->tls_prf( session->master, 48, "key expansion",
 80893ec:	9f05      	ldr	r7, [sp, #20]
                              handshake->randbytes, 64, keyblk, 256 );
 80893ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80893f2:	f8cd b004 	str.w	fp, [sp, #4]
 80893f6:	f04f 0b40 	mov.w	fp, #64	; 0x40
 80893fa:	9302      	str	r3, [sp, #8]
     *      ...
     *
     *  TLSv1:
     *    key block = PRF( master, "key expansion", randbytes )
     */
    ret = handshake->tls_prf( session->master, 48, "key expansion",
 80893fc:	372c      	adds	r7, #44	; 0x2c
                              handshake->randbytes, 64, keyblk, 256 );
 80893fe:	f8cd b000 	str.w	fp, [sp]
 8089402:	f8d5 516c 	ldr.w	r5, [r5, #364]	; 0x16c
 8089406:	464b      	mov	r3, r9
 8089408:	4a71      	ldr	r2, [pc, #452]	; (80895d0 <mbedtls_ssl_derive_keys+0x2d8>)
 808940a:	2130      	movs	r1, #48	; 0x30
 808940c:	4638      	mov	r0, r7
 808940e:	47a8      	blx	r5
    if( ret != 0 )
 8089410:	2800      	cmp	r0, #0
 8089412:	f040 80c7 	bne.w	80895a4 <mbedtls_ssl_derive_keys+0x2ac>
                   mbedtls_ssl_get_ciphersuite_name( session->ciphersuite ) ) );
    MBEDTLS_SSL_DEBUG_BUF( 3, "master secret", session->master, 48 );
    MBEDTLS_SSL_DEBUG_BUF( 4, "random bytes", handshake->randbytes, 64 );
    MBEDTLS_SSL_DEBUG_BUF( 4, "key block", keyblk, 256 );

    mbedtls_zeroize( handshake->randbytes, sizeof( handshake->randbytes ) );
 8089416:	4659      	mov	r1, fp
 8089418:	4648      	mov	r0, r9
 808941a:	f7ff fddf 	bl	8088fdc <_ZL15mbedtls_zeroizePvj>

    /*
     * Determine the appropriate key, IV and MAC length.
     */

    transform->keylen = cipher_info->key_bitlen / 8;
 808941e:	6873      	ldr	r3, [r6, #4]
 8089420:	08db      	lsrs	r3, r3, #3
 8089422:	6063      	str	r3, [r4, #4]

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
 8089424:	7873      	ldrb	r3, [r6, #1]
 8089426:	2b06      	cmp	r3, #6
 8089428:	d001      	beq.n	808942e <mbedtls_ssl_derive_keys+0x136>
 808942a:	2b08      	cmp	r3, #8
 808942c:	d10f      	bne.n	808944e <mbedtls_ssl_derive_keys+0x156>
        cipher_info->mode == MBEDTLS_MODE_CCM )
    {
        transform->maclen = 0;
        mac_key_len = 0;

        transform->ivlen = 12;
 808942e:	220c      	movs	r2, #12
 8089430:	60e2      	str	r2, [r4, #12]
        transform->fixed_ivlen = 4;
 8089432:	2204      	movs	r2, #4
    transform->keylen = cipher_info->key_bitlen / 8;

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
        cipher_info->mode == MBEDTLS_MODE_CCM )
    {
        transform->maclen = 0;
 8089434:	2300      	movs	r3, #0
        mac_key_len = 0;

        transform->ivlen = 12;
        transform->fixed_ivlen = 4;
 8089436:	6122      	str	r2, [r4, #16]

        /* Minimum length is expicit IV + tag */
        transform->minlen = transform->ivlen - transform->fixed_ivlen
                            + ( transform->ciphersuite_info->flags &
 8089438:	6822      	ldr	r2, [r4, #0]
    transform->keylen = cipher_info->key_bitlen / 8;

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
        cipher_info->mode == MBEDTLS_MODE_CCM )
    {
        transform->maclen = 0;
 808943a:	6163      	str	r3, [r4, #20]
        transform->ivlen = 12;
        transform->fixed_ivlen = 4;

        /* Minimum length is expicit IV + tag */
        transform->minlen = transform->ivlen - transform->fixed_ivlen
                            + ( transform->ciphersuite_info->flags &
 808943c:	7f12      	ldrb	r2, [r2, #28]

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
        cipher_info->mode == MBEDTLS_MODE_CCM )
    {
        transform->maclen = 0;
        mac_key_len = 0;
 808943e:	469a      	mov	sl, r3
        transform->ivlen = 12;
        transform->fixed_ivlen = 4;

        /* Minimum length is expicit IV + tag */
        transform->minlen = transform->ivlen - transform->fixed_ivlen
                            + ( transform->ciphersuite_info->flags &
 8089440:	f012 0f02 	tst.w	r2, #2
                                MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16 );
 8089444:	bf14      	ite	ne
 8089446:	2210      	movne	r2, #16
 8089448:	2218      	moveq	r2, #24
 808944a:	60a2      	str	r2, [r4, #8]
 808944c:	e01d      	b.n	808948a <mbedtls_ssl_derive_keys+0x192>
    }
    else
    {
        /* Initialize HMAC contexts */
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
 808944e:	2201      	movs	r2, #1
 8089450:	4651      	mov	r1, sl
 8089452:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8089456:	f7fe f8f1 	bl	808763c <mbedtls_md_setup>
 808945a:	2800      	cmp	r0, #0
 808945c:	f040 80a2 	bne.w	80895a4 <mbedtls_ssl_derive_keys+0x2ac>
 8089460:	2201      	movs	r2, #1
 8089462:	4651      	mov	r1, sl
 8089464:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8089468:	f7fe f8e8 	bl	808763c <mbedtls_md_setup>
 808946c:	2800      	cmp	r0, #0
 808946e:	f040 8099 	bne.w	80895a4 <mbedtls_ssl_derive_keys+0x2ac>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
            return( ret );
        }

        /* Get MAC length */
        mac_key_len = mbedtls_md_get_size( md_info );
 8089472:	4650      	mov	r0, sl
 8089474:	f7fe f9f4 	bl	8087860 <mbedtls_md_get_size>
        transform->maclen = mac_key_len;
 8089478:	6160      	str	r0, [r4, #20]
#endif
        }
#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */

        /* IV length */
        transform->ivlen = cipher_info->iv_size;
 808947a:	68f1      	ldr	r1, [r6, #12]
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
            return( ret );
        }

        /* Get MAC length */
        mac_key_len = mbedtls_md_get_size( md_info );
 808947c:	4682      	mov	sl, r0
#endif
        }
#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */

        /* IV length */
        transform->ivlen = cipher_info->iv_size;
 808947e:	60e1      	str	r1, [r4, #12]

        /* Minimum length */
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
 8089480:	7873      	ldrb	r3, [r6, #1]
 8089482:	2b07      	cmp	r3, #7
 8089484:	d17f      	bne.n	8089586 <mbedtls_ssl_derive_keys+0x28e>
            transform->minlen = transform->maclen;
 8089486:	f8c4 a008 	str.w	sl, [r4, #8]

    /*
     * Finally setup the cipher contexts, IVs and MAC secrets.
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 808948a:	f8d8 3000 	ldr.w	r3, [r8]
 808948e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8089492:	07db      	lsls	r3, r3, #31
 8089494:	f53f af4b 	bmi.w	808932e <mbedtls_ssl_derive_keys+0x36>
    {
        key1 = keyblk + mac_key_len * 2;
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
 8089498:	6863      	ldr	r3, [r4, #4]
     * Finally setup the cipher contexts, IVs and MAC secrets.
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
    {
        key1 = keyblk + mac_key_len * 2;
 808949a:	ea4f 094a 	mov.w	r9, sl, lsl #1
        mac_dec = keyblk + mac_key_len;

        /*
         * This is not used in TLS v1.1.
         */
        iv_copy_len = ( transform->fixed_ivlen ) ?
 808949e:	f8d4 b010 	ldr.w	fp, [r4, #16]
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
    {
        key1 = keyblk + mac_key_len * 2;
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
 80894a2:	eb09 0503 	add.w	r5, r9, r3
 80894a6:	aa16      	add	r2, sp, #88	; 0x58
 80894a8:	4415      	add	r5, r2

        /*
         * This is not used in TLS v1.1.
         */
        iv_copy_len = ( transform->fixed_ivlen ) ?
                            transform->fixed_ivlen : transform->ivlen;
 80894aa:	f1bb 0f00 	cmp.w	fp, #0
 80894ae:	d101      	bne.n	80894b4 <mbedtls_ssl_derive_keys+0x1bc>
 80894b0:	f8d4 b00c 	ldr.w	fp, [r4, #12]
        memcpy( transform->iv_enc, key2 + transform->keylen,  iv_copy_len );
 80894b4:	18e9      	adds	r1, r5, r3
 80894b6:	465a      	mov	r2, fp
 80894b8:	f104 0018 	add.w	r0, r4, #24
 80894bc:	9305      	str	r3, [sp, #20]
 80894be:	f00a fd50 	bl	8093f62 <memcpy>
        memcpy( transform->iv_dec, key2 + transform->keylen + iv_copy_len,
                iv_copy_len );
 80894c2:	9b05      	ldr	r3, [sp, #20]
 80894c4:	465a      	mov	r2, fp
 80894c6:	eb0b 0103 	add.w	r1, fp, r3
 80894ca:	4429      	add	r1, r5
 80894cc:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80894d0:	f00a fd47 	bl	8093f62 <memcpy>
    }
    else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 80894d4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80894d8:	2b00      	cmp	r3, #0
 80894da:	f77f af28 	ble.w	808932e <mbedtls_ssl_derive_keys+0x36>
    {
        /* For HMAC-based ciphersuites, initialize the HMAC transforms.
           For AEAD-based ciphersuites, there is nothing to do here. */
        if( mac_key_len != 0 )
 80894de:	f1ba 0f00 	cmp.w	sl, #0
 80894e2:	d00d      	beq.n	8089500 <mbedtls_ssl_derive_keys+0x208>
        {
            mbedtls_md_hmac_starts( &transform->md_ctx_enc, mac_enc, mac_key_len );
 80894e4:	4652      	mov	r2, sl
 80894e6:	a916      	add	r1, sp, #88	; 0x58
 80894e8:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80894ec:	f7fe f8f6 	bl	80876dc <mbedtls_md_hmac_starts>
            mbedtls_md_hmac_starts( &transform->md_ctx_dec, mac_dec, mac_key_len );
 80894f0:	ab16      	add	r3, sp, #88	; 0x58
 80894f2:	4652      	mov	r2, sl
 80894f4:	eb03 010a 	add.w	r1, r3, sl
 80894f8:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80894fc:	f7fe f8ee 	bl	80876dc <mbedtls_md_hmac_starts>
        }
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */

#if defined(MBEDTLS_SSL_EXPORT_KEYS)
    if( ssl->conf->f_export_keys != NULL )
 8089500:	f8d8 0000 	ldr.w	r0, [r8]
 8089504:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8089508:	f1b8 0f00 	cmp.w	r8, #0
 808950c:	d008      	beq.n	8089520 <mbedtls_ssl_derive_keys+0x228>
    {
        ssl->conf->f_export_keys( ssl->conf->p_export_keys,
                                  session->master, keyblk,
                                  mac_key_len, transform->keylen,
                                  iv_copy_len );
 808950e:	f8cd b004 	str.w	fp, [sp, #4]
 8089512:	6863      	ldr	r3, [r4, #4]
 8089514:	aa16      	add	r2, sp, #88	; 0x58
 8089516:	9300      	str	r3, [sp, #0]
 8089518:	4639      	mov	r1, r7
 808951a:	4653      	mov	r3, sl
 808951c:	6c00      	ldr	r0, [r0, #64]	; 0x40
 808951e:	47c0      	blx	r8
    }
#endif

    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_enc,
 8089520:	f104 0750 	add.w	r7, r4, #80	; 0x50
 8089524:	4631      	mov	r1, r6
 8089526:	4638      	mov	r0, r7
 8089528:	f7f9 fdf0 	bl	808310c <mbedtls_cipher_setup>
 808952c:	2800      	cmp	r0, #0
 808952e:	d139      	bne.n	80895a4 <mbedtls_ssl_derive_keys+0x2ac>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
        return( ret );
    }

    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_dec,
 8089530:	3490      	adds	r4, #144	; 0x90
 8089532:	4631      	mov	r1, r6
 8089534:	4620      	mov	r0, r4
 8089536:	f7f9 fde9 	bl	808310c <mbedtls_cipher_setup>
 808953a:	bb98      	cbnz	r0, 80895a4 <mbedtls_ssl_derive_keys+0x2ac>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
        return( ret );
    }

    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_enc, key1,
 808953c:	a916      	add	r1, sp, #88	; 0x58
 808953e:	2301      	movs	r3, #1
 8089540:	6872      	ldr	r2, [r6, #4]
 8089542:	4449      	add	r1, r9
 8089544:	4638      	mov	r0, r7
 8089546:	f7f9 fc23 	bl	8082d90 <mbedtls_cipher_setkey>
 808954a:	bb58      	cbnz	r0, 80895a4 <mbedtls_ssl_derive_keys+0x2ac>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
        return( ret );
    }

    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_dec, key2,
 808954c:	4603      	mov	r3, r0
 808954e:	6872      	ldr	r2, [r6, #4]
 8089550:	4629      	mov	r1, r5
 8089552:	4620      	mov	r0, r4
 8089554:	f7f9 fc1c 	bl	8082d90 <mbedtls_cipher_setkey>
 8089558:	bb20      	cbnz	r0, 80895a4 <mbedtls_ssl_derive_keys+0x2ac>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
        return( ret );
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( cipher_info->mode == MBEDTLS_MODE_CBC )
 808955a:	7873      	ldrb	r3, [r6, #1]
 808955c:	2b02      	cmp	r3, #2
 808955e:	d006      	beq.n	808956e <mbedtls_ssl_derive_keys+0x276>
            return( ret );
        }
    }
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    mbedtls_zeroize( keyblk, sizeof( keyblk ) );
 8089560:	a816      	add	r0, sp, #88	; 0x58
 8089562:	f44f 7180 	mov.w	r1, #256	; 0x100
 8089566:	f7ff fd39 	bl	8088fdc <_ZL15mbedtls_zeroizePvj>
    }
#endif /* MBEDTLS_ZLIB_SUPPORT */

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= derive keys" ) );

    return( 0 );
 808956a:	2000      	movs	r0, #0
 808956c:	e01a      	b.n	80895a4 <mbedtls_ssl_derive_keys+0x2ac>
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( cipher_info->mode == MBEDTLS_MODE_CBC )
    {
        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_enc,
 808956e:	2104      	movs	r1, #4
 8089570:	4638      	mov	r0, r7
 8089572:	f7f9 fd8d 	bl	8083090 <mbedtls_cipher_set_padding_mode>
 8089576:	b9a8      	cbnz	r0, 80895a4 <mbedtls_ssl_derive_keys+0x2ac>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_set_padding_mode", ret );
            return( ret );
        }

        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_dec,
 8089578:	2104      	movs	r1, #4
 808957a:	4620      	mov	r0, r4
 808957c:	f7f9 fd88 	bl	8083090 <mbedtls_cipher_set_padding_mode>
 8089580:	2800      	cmp	r0, #0
 8089582:	d0ed      	beq.n	8089560 <mbedtls_ssl_derive_keys+0x268>
 8089584:	e00e      	b.n	80895a4 <mbedtls_ssl_derive_keys+0x2ac>
            }
            else
#endif
            {
                transform->minlen = transform->maclen
                                  + cipher_info->block_size
 8089586:	6973      	ldr	r3, [r6, #20]
                                  - transform->maclen % cipher_info->block_size;
 8089588:	fbba f2f3 	udiv	r2, sl, r3
 808958c:	fb03 3302 	mla	r3, r3, r2, r3
 8089590:	60a3      	str	r3, [r4, #8]
                ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_1 )
                ; /* No need to adjust minlen */
            else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
 8089592:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8089596:	3a02      	subs	r2, #2
 8089598:	2a01      	cmp	r2, #1
 808959a:	f63f aec8 	bhi.w	808932e <mbedtls_ssl_derive_keys+0x36>
                ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
            {
                transform->minlen += transform->ivlen;
 808959e:	440b      	add	r3, r1
 80895a0:	60a3      	str	r3, [r4, #8]
 80895a2:	e772      	b.n	808948a <mbedtls_ssl_derive_keys+0x192>
#endif /* MBEDTLS_ZLIB_SUPPORT */

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= derive keys" ) );

    return( 0 );
}
 80895a4:	b057      	add	sp, #348	; 0x15c
 80895a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80895aa:	bf00      	nop
 80895ac:	ffff8f00 	.word	0xffff8f00
 80895b0:	ffff9400 	.word	0xffff9400
 80895b4:	080891d5 	.word	0x080891d5
 80895b8:	08089261 	.word	0x08089261
 80895bc:	080891f5 	.word	0x080891f5
 80895c0:	080891b5 	.word	0x080891b5
 80895c4:	08089069 	.word	0x08089069
 80895c8:	08088ffd 	.word	0x08088ffd
 80895cc:	08098391 	.word	0x08098391
 80895d0:	0809839f 	.word	0x0809839f

080895d4 <mbedtls_ssl_fetch_input>:
 *
 * For DTLS, it is up to the caller to set ssl->next_record_offset when
 * they're done reading a record.
 */
int mbedtls_ssl_fetch_input( mbedtls_ssl_context *ssl, size_t nb_want )
{
 80895d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret;
    size_t len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
 80895d6:	6943      	ldr	r3, [r0, #20]
 *
 * For DTLS, it is up to the caller to set ssl->next_record_offset when
 * they're done reading a record.
 */
int mbedtls_ssl_fetch_input( mbedtls_ssl_context *ssl, size_t nb_want )
{
 80895d8:	4604      	mov	r4, r0
 80895da:	460e      	mov	r6, r1
    int ret;
    size_t len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
 80895dc:	b90b      	cbnz	r3, 80895e2 <mbedtls_ssl_fetch_input+0xe>
 80895de:	6983      	ldr	r3, [r0, #24]
 80895e0:	b19b      	cbz	r3, 808960a <mbedtls_ssl_fetch_input+0x36>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    }

    if( nb_want > MBEDTLS_SSL_BUFFER_LEN - (size_t)( ssl->in_hdr - ssl->in_buf ) )
 80895e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80895e4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80895e6:	1a9b      	subs	r3, r3, r2
 80895e8:	f5c3 5305 	rsb	r3, r3, #8512	; 0x2140
 80895ec:	330d      	adds	r3, #13
 80895ee:	42b3      	cmp	r3, r6
 80895f0:	d30b      	bcc.n	808960a <mbedtls_ssl_fetch_input+0x36>
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                       ssl->in_left, nb_want ) );

        while( ssl->in_left < nb_want )
 80895f2:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80895f4:	42ae      	cmp	r6, r5
 80895f6:	d90a      	bls.n	808960e <mbedtls_ssl_fetch_input+0x3a>
/*
 * Return -1 is timer is expired, 0 if it isn't.
 */
static int ssl_check_timer( mbedtls_ssl_context *ssl )
{
    if( ssl->f_get_timer == NULL )
 80895f8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                       ssl->in_left, nb_want ) );

        while( ssl->in_left < nb_want )
        {
            len = nb_want - ssl->in_left;
 80895fa:	1b75      	subs	r5, r6, r5
/*
 * Return -1 is timer is expired, 0 if it isn't.
 */
static int ssl_check_timer( mbedtls_ssl_context *ssl )
{
    if( ssl->f_get_timer == NULL )
 80895fc:	b14b      	cbz	r3, 8089612 <mbedtls_ssl_fetch_input+0x3e>
        return( 0 );

    if( ssl->f_get_timer( ssl->p_timer ) == 2 )
 80895fe:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8089600:	4798      	blx	r3
 8089602:	2802      	cmp	r0, #2
 8089604:	d105      	bne.n	8089612 <mbedtls_ssl_fetch_input+0x3e>
        while( ssl->in_left < nb_want )
        {
            len = nb_want - ssl->in_left;

            if( ssl_check_timer( ssl ) != 0 )
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
 8089606:	4812      	ldr	r0, [pc, #72]	; (8089650 <mbedtls_ssl_fetch_input+0x7c>)
 8089608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 808960a:	4812      	ldr	r0, [pc, #72]	; (8089654 <mbedtls_ssl_fetch_input+0x80>)
 808960c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );

    return( 0 );
 808960e:	2000      	movs	r0, #0
 8089610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

            if( ssl_check_timer( ssl ) != 0 )
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
            else
            {
                if( ssl->f_recv_timeout != NULL )
 8089612:	69a7      	ldr	r7, [r4, #24]
 8089614:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8089616:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8089618:	b137      	cbz	r7, 8089628 <mbedtls_ssl_fetch_input+0x54>
                {
                    ret = ssl->f_recv_timeout( ssl->p_bio,
                                               ssl->in_hdr + ssl->in_left, len,
                                               ssl->conf->read_timeout );
 808961a:	6823      	ldr	r3, [r4, #0]
 808961c:	4401      	add	r1, r0
 808961e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8089620:	462a      	mov	r2, r5
 8089622:	69e0      	ldr	r0, [r4, #28]
 8089624:	47b8      	blx	r7
 8089626:	e004      	b.n	8089632 <mbedtls_ssl_fetch_input+0x5e>
                }
                else
                {
                    ret = ssl->f_recv( ssl->p_bio,
                                       ssl->in_hdr + ssl->in_left, len );
 8089628:	4401      	add	r1, r0
 808962a:	6963      	ldr	r3, [r4, #20]
 808962c:	462a      	mov	r2, r5
 808962e:	69e0      	ldr	r0, [r4, #28]
 8089630:	4798      	blx	r3

            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                                        ssl->in_left, nb_want ) );
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );

            if( ret == 0 )
 8089632:	2800      	cmp	r0, #0
 8089634:	d006      	beq.n	8089644 <mbedtls_ssl_fetch_input+0x70>
                return( MBEDTLS_ERR_SSL_CONN_EOF );

            if( ret < 0 )
 8089636:	db09      	blt.n	808964c <mbedtls_ssl_fetch_input+0x78>
                return( ret );

            if ( (size_t)ret > len || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
 8089638:	4285      	cmp	r5, r0
 808963a:	d305      	bcc.n	8089648 <mbedtls_ssl_fetch_input+0x74>
                    ( "f_recv returned %d bytes but only %lu were requested",
                    ret, (unsigned long)len ) );
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
            }

            ssl->in_left += ret;
 808963c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 808963e:	4418      	add	r0, r3
 8089640:	6760      	str	r0, [r4, #116]	; 0x74
 8089642:	e7d6      	b.n	80895f2 <mbedtls_ssl_fetch_input+0x1e>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                                        ssl->in_left, nb_want ) );
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );

            if( ret == 0 )
                return( MBEDTLS_ERR_SSL_CONN_EOF );
 8089644:	4804      	ldr	r0, [pc, #16]	; (8089658 <mbedtls_ssl_fetch_input+0x84>)
 8089646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if ( (size_t)ret > len || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
            {
                MBEDTLS_SSL_DEBUG_MSG( 1,
                    ( "f_recv returned %d bytes but only %lu were requested",
                    ret, (unsigned long)len ) );
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8089648:	4804      	ldr	r0, [pc, #16]	; (808965c <mbedtls_ssl_fetch_input+0x88>)
 808964a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );

    return( 0 );
}
 808964c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808964e:	bf00      	nop
 8089650:	ffff9800 	.word	0xffff9800
 8089654:	ffff8f00 	.word	0xffff8f00
 8089658:	ffff8d80 	.word	0xffff8d80
 808965c:	ffff9400 	.word	0xffff9400

08089660 <mbedtls_ssl_flush_output>:

/*
 * Flush any data not yet written
 */
int mbedtls_ssl_flush_output( mbedtls_ssl_context *ssl )
{
 8089660:	b510      	push	{r4, lr}
    int ret;
    unsigned char *buf, i;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );

    if( ssl->f_send == NULL )
 8089662:	6903      	ldr	r3, [r0, #16]

/*
 * Flush any data not yet written
 */
int mbedtls_ssl_flush_output( mbedtls_ssl_context *ssl )
{
 8089664:	4604      	mov	r4, r0
    int ret;
    unsigned char *buf, i;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );

    if( ssl->f_send == NULL )
 8089666:	b34b      	cbz	r3, 80896bc <mbedtls_ssl_flush_output+0x5c>
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    }

    /* Avoid incrementing counter if data is flushed */
    if( ssl->out_left == 0 )
 8089668:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 808966c:	b9a3      	cbnz	r3, 8089698 <mbedtls_ssl_flush_output+0x38>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
        return( 0 );
 808966e:	2000      	movs	r0, #0
 8089670:	bd10      	pop	{r4, pc}
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "message length: %d, out_left: %d",
                       mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen, ssl->out_left ) );

        buf = ssl->out_hdr + mbedtls_ssl_hdr_len( ssl ) +
              ssl->out_msglen - ssl->out_left;
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
 8089672:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8089676:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 808967a:	3105      	adds	r1, #5
 808967c:	1a89      	subs	r1, r1, r2
 808967e:	4401      	add	r1, r0
 8089680:	6923      	ldr	r3, [r4, #16]
 8089682:	69e0      	ldr	r0, [r4, #28]
 8089684:	4798      	blx	r3

        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );

        if( ret <= 0 )
 8089686:	2800      	cmp	r0, #0
 8089688:	dd1b      	ble.n	80896c2 <mbedtls_ssl_flush_output+0x62>
            return( ret );

        if( (size_t)ret > ssl->out_left || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
 808968a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 808968e:	4283      	cmp	r3, r0
 8089690:	d316      	bcc.n	80896c0 <mbedtls_ssl_flush_output+0x60>
                ( "f_send returned %d bytes but only %lu bytes were sent",
                ret, (unsigned long)ssl->out_left ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_left -= ret;
 8089692:	1a18      	subs	r0, r3, r0
 8089694:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
        return( 0 );
    }

    while( ssl->out_left > 0 )
 8089698:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 808969c:	2a00      	cmp	r2, #0
 808969e:	d1e8      	bne.n	8089672 <mbedtls_ssl_flush_output+0x12>
 80896a0:	2207      	movs	r2, #7

        ssl->out_left -= ret;
    }

    for( i = 8; i > ssl_ep_len( ssl ); i-- )
        if( ++ssl->out_ctr[i - 1] != 0 )
 80896a2:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80896a6:	5c8b      	ldrb	r3, [r1, r2]
 80896a8:	3301      	adds	r3, #1
 80896aa:	b2db      	uxtb	r3, r3
 80896ac:	548b      	strb	r3, [r1, r2]
 80896ae:	2b00      	cmp	r3, #0
 80896b0:	d1dd      	bne.n	808966e <mbedtls_ssl_flush_output+0xe>
        }

        ssl->out_left -= ret;
    }

    for( i = 8; i > ssl_ep_len( ssl ); i-- )
 80896b2:	f112 32ff 	adds.w	r2, r2, #4294967295
 80896b6:	d2f4      	bcs.n	80896a2 <mbedtls_ssl_flush_output+0x42>

    /* The loop goes to its end iff the counter is wrapping */
    if( i == ssl_ep_len( ssl ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "outgoing message counter would wrap" ) );
        return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 80896b8:	4802      	ldr	r0, [pc, #8]	; (80896c4 <mbedtls_ssl_flush_output+0x64>)
 80896ba:	bd10      	pop	{r4, pc}

    if( ssl->f_send == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80896bc:	4802      	ldr	r0, [pc, #8]	; (80896c8 <mbedtls_ssl_flush_output+0x68>)
 80896be:	bd10      	pop	{r4, pc}
        if( (size_t)ret > ssl->out_left || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1,
                ( "f_send returned %d bytes but only %lu bytes were sent",
                ret, (unsigned long)ssl->out_left ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80896c0:	4802      	ldr	r0, [pc, #8]	; (80896cc <mbedtls_ssl_flush_output+0x6c>)
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );

    return( 0 );
}
 80896c2:	bd10      	pop	{r4, pc}
 80896c4:	ffff9480 	.word	0xffff9480
 80896c8:	ffff8f00 	.word	0xffff8f00
 80896cc:	ffff9400 	.word	0xffff9400

080896d0 <mbedtls_ssl_write_record>:
/*
 * Write current record.
 * Uses ssl->out_msgtype, ssl->out_msglen and bytes at ssl->out_msg.
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl )
{
 80896d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        ; /* Skip special handshake treatment when resending */
    }
    else
#endif
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 80896d2:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
/*
 * Write current record.
 * Uses ssl->out_msgtype, ssl->out_msglen and bytes at ssl->out_msg.
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl )
{
 80896d6:	b097      	sub	sp, #92	; 0x5c
    {
        ; /* Skip special handshake treatment when resending */
    }
    else
#endif
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 80896d8:	2b16      	cmp	r3, #22
/*
 * Write current record.
 * Uses ssl->out_msgtype, ssl->out_msglen and bytes at ssl->out_msg.
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl )
{
 80896da:	4604      	mov	r4, r0
    int ret, done = 0, out_msg_type;
    size_t len = ssl->out_msglen;
 80896dc:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
    {
        ; /* Skip special handshake treatment when resending */
    }
    else
#endif
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 80896e0:	d11a      	bne.n	8089718 <mbedtls_ssl_write_record+0x48>
    {
        out_msg_type = ssl->out_msg[0];
 80896e2:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
 80896e6:	780a      	ldrb	r2, [r1, #0]

        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST &&
 80896e8:	b11a      	cbz	r2, 80896f2 <mbedtls_ssl_write_record+0x22>
 80896ea:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80896ec:	2b00      	cmp	r3, #0
 80896ee:	f000 8139 	beq.w	8089964 <mbedtls_ssl_write_record+0x294>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msg[1] = (unsigned char)( ( len - 4 ) >> 16 );
 80896f2:	1f2b      	subs	r3, r5, #4
 80896f4:	0c18      	lsrs	r0, r3, #16
 80896f6:	7048      	strb	r0, [r1, #1]
        ssl->out_msg[2] = (unsigned char)( ( len - 4 ) >>  8 );
 80896f8:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80896fc:	0a18      	lsrs	r0, r3, #8
 80896fe:	7088      	strb	r0, [r1, #2]
        ssl->out_msg[3] = (unsigned char)( ( len - 4 )       );
 8089700:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8089704:	70cb      	strb	r3, [r1, #3]
            memset( ssl->out_msg + 6, 0x00, 3 );
            memcpy( ssl->out_msg + 9, ssl->out_msg + 1, 3 );
        }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST )
 8089706:	b13a      	cbz	r2, 8089718 <mbedtls_ssl_write_record+0x48>
            ssl->handshake->update_checksum( ssl, ssl->out_msg, len );
 8089708:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808970a:	462a      	mov	r2, r5
 808970c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8089710:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8089714:	4620      	mov	r0, r4
 8089716:	4798      	blx	r3
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done )
    {
        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
 8089718:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 808971c:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8089720:	701a      	strb	r2, [r3, #0]
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 8089722:	68e2      	ldr	r2, [r4, #12]
                           ssl->conf->transport, ssl->out_hdr + 1 );
 8089724:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 8089728:	68a1      	ldr	r1, [r4, #8]
        ver[1] = (unsigned char) minor;
 808972a:	709a      	strb	r2, [r3, #2]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 808972c:	7059      	strb	r1, [r3, #1]
    {
        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, ssl->out_hdr + 1 );

        ssl->out_len[0] = (unsigned char)( len >> 8 );
 808972e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8089732:	0a2a      	lsrs	r2, r5, #8
 8089734:	701a      	strb	r2, [r3, #0]
        ssl->out_len[1] = (unsigned char)( len      );
 8089736:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 808973a:	705d      	strb	r5, [r3, #1]

        if( ssl->transform_out != NULL )
 808973c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 808973e:	2800      	cmp	r0, #0
 8089740:	f000 8107 	beq.w	8089952 <mbedtls_ssl_write_record+0x282>
    mbedtls_cipher_mode_t mode;
    int auth_done = 0;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );

    if( ssl->session_out == NULL || ssl->transform_out == NULL )
 8089744:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8089746:	2b00      	cmp	r3, #0
 8089748:	f000 810c 	beq.w	8089964 <mbedtls_ssl_write_record+0x294>
 * \return       The mode of operation, or #MBEDTLS_MODE_NONE if
 *               \p ctx has not been initialized.
 */
static inline mbedtls_cipher_mode_t mbedtls_cipher_get_cipher_mode( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
 808974c:	6d05      	ldr	r5, [r0, #80]	; 0x50
 808974e:	b105      	cbz	r5, 8089752 <mbedtls_ssl_write_record+0x82>
        return MBEDTLS_MODE_NONE;

    return ctx->cipher_info->mode;
 8089750:	786d      	ldrb	r5, [r5, #1]
    mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_out->cipher_ctx_enc );

    MBEDTLS_SSL_DEBUG_BUF( 4, "before encrypt: output payload",
                      ssl->out_msg, ssl->out_msglen );

    if( ssl->out_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
 8089752:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8089756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 808975a:	f200 8105 	bhi.w	8089968 <mbedtls_ssl_write_record+0x298>

    /*
     * Add MAC before if needed
     */
#if defined(SSL_SOME_MODES_USE_MAC)
    if( mode == MBEDTLS_MODE_STREAM ||
 808975e:	2d07      	cmp	r5, #7
 8089760:	d001      	beq.n	8089766 <mbedtls_ssl_write_record+0x96>
 8089762:	2d02      	cmp	r5, #2
 8089764:	d13b      	bne.n	80897de <mbedtls_ssl_write_record+0x10e>
        }
        else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
        defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 8089766:	68e3      	ldr	r3, [r4, #12]
 8089768:	2b00      	cmp	r3, #0
 808976a:	f340 80fb 	ble.w	8089964 <mbedtls_ssl_write_record+0x294>
        {
            unsigned char mac[MBEDTLS_SSL_MAC_ADD];

            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_ctr, 8 );
 808976e:	2208      	movs	r2, #8
 8089770:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8089774:	3038      	adds	r0, #56	; 0x38
 8089776:	f7fe f811 	bl	808779c <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_hdr, 3 );
 808977a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 808977c:	2203      	movs	r2, #3
 808977e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8089782:	3038      	adds	r0, #56	; 0x38
 8089784:	f7fe f80a 	bl	808779c <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_len, 2 );
 8089788:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 808978a:	2202      	movs	r2, #2
 808978c:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8089790:	3038      	adds	r0, #56	; 0x38
 8089792:	f7fe f803 	bl	808779c <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc,
 8089796:	6ba0      	ldr	r0, [r4, #56]	; 0x38
                             ssl->out_msg, ssl->out_msglen );
 8089798:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 808979c:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80897a0:	3038      	adds	r0, #56	; 0x38
 80897a2:	f7fd fffb 	bl	808779c <mbedtls_md_hmac_update>
            mbedtls_md_hmac_finish( &ssl->transform_out->md_ctx_enc, mac );
 80897a6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80897a8:	a90a      	add	r1, sp, #40	; 0x28
 80897aa:	3038      	adds	r0, #56	; 0x38
 80897ac:	f7fe f806 	bl	80877bc <mbedtls_md_hmac_finish>
            mbedtls_md_hmac_reset( &ssl->transform_out->md_ctx_enc );
 80897b0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        MBEDTLS_SSL_DEBUG_BUF( 4, "computed mac",
                       ssl->out_msg + ssl->out_msglen,
                       ssl->transform_out->maclen );

        ssl->out_msglen += ssl->transform_out->maclen;
        auth_done++;
 80897b2:	2601      	movs	r6, #1
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_hdr, 3 );
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_len, 2 );
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc,
                             ssl->out_msg, ssl->out_msglen );
            mbedtls_md_hmac_finish( &ssl->transform_out->md_ctx_enc, mac );
            mbedtls_md_hmac_reset( &ssl->transform_out->md_ctx_enc );
 80897b4:	3038      	adds	r0, #56	; 0x38
 80897b6:	f7fe f831 	bl	808781c <mbedtls_md_hmac_reset>

            memcpy( ssl->out_msg + ssl->out_msglen, mac, ssl->transform_out->maclen );
 80897ba:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80897be:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 80897c2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80897c4:	4418      	add	r0, r3
 80897c6:	6952      	ldr	r2, [r2, #20]
 80897c8:	a90a      	add	r1, sp, #40	; 0x28
 80897ca:	f00a fbca 	bl	8093f62 <memcpy>

        MBEDTLS_SSL_DEBUG_BUF( 4, "computed mac",
                       ssl->out_msg + ssl->out_msglen,
                       ssl->transform_out->maclen );

        ssl->out_msglen += ssl->transform_out->maclen;
 80897ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80897d0:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 80897d4:	695b      	ldr	r3, [r3, #20]
 80897d6:	4413      	add	r3, r2
 80897d8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 80897dc:	e000      	b.n	80897e0 <mbedtls_ssl_write_record+0x110>
 * Encryption/decryption functions
 */
static int ssl_encrypt_buf( mbedtls_ssl_context *ssl )
{
    mbedtls_cipher_mode_t mode;
    int auth_done = 0;
 80897de:	2600      	movs	r6, #0
        }
    }
    else
#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */
#if defined(MBEDTLS_GCM_C) || defined(MBEDTLS_CCM_C)
    if( mode == MBEDTLS_MODE_GCM ||
 80897e0:	2d06      	cmp	r5, #6
 80897e2:	d001      	beq.n	80897e8 <mbedtls_ssl_write_record+0x118>
 80897e4:	2d08      	cmp	r5, #8
 80897e6:	d15c      	bne.n	80898a2 <mbedtls_ssl_write_record+0x1d2>
    {
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 80897e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;

        memcpy( add_data, ssl->out_ctr, 8 );
 80897ea:	f8d4 7088 	ldr.w	r7, [r4, #136]	; 0x88
    {
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 80897ee:	681a      	ldr	r2, [r3, #0]
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;

        memcpy( add_data, ssl->out_ctr, 8 );
 80897f0:	6879      	ldr	r1, [r7, #4]
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 80897f2:	7f12      	ldrb	r2, [r2, #28]

        memcpy( add_data, ssl->out_ctr, 8 );
 80897f4:	6838      	ldr	r0, [r7, #0]
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 80897f6:	f012 0f02 	tst.w	r2, #2

        memcpy( add_data, ssl->out_ctr, 8 );
 80897fa:	aa0a      	add	r2, sp, #40	; 0x28
 80897fc:	c203      	stmia	r2!, {r0, r1}
        add_data[8]  = ssl->out_msgtype;
 80897fe:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 8089802:	68a1      	ldr	r1, [r4, #8]
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;

        memcpy( add_data, ssl->out_ctr, 8 );
        add_data[8]  = ssl->out_msgtype;
 8089804:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 8089808:	68e2      	ldr	r2, [r4, #12]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 808980a:	f88d 1031 	strb.w	r1, [sp, #49]	; 0x31
        ver[1] = (unsigned char) minor;
 808980e:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32

        memcpy( add_data, ssl->out_ctr, 8 );
        add_data[8]  = ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
 8089812:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 8089816:	bf08      	it	eq
 8089818:	2510      	moveq	r5, #16

        memcpy( add_data, ssl->out_ctr, 8 );
        add_data[8]  = ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
 808981a:	ea4f 2112 	mov.w	r1, r2, lsr #8
 808981e:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
        add_data[12] = ssl->out_msglen & 0xFF;
 8089822:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
                       add_data, 13 );

        /*
         * Generate IV
         */
        if( ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen != 8 )
 8089826:	6919      	ldr	r1, [r3, #16]
 8089828:	68da      	ldr	r2, [r3, #12]
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 808982a:	bf18      	it	ne
 808982c:	2508      	movne	r5, #8
                       add_data, 13 );

        /*
         * Generate IV
         */
        if( ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen != 8 )
 808982e:	1a52      	subs	r2, r2, r1
 8089830:	2a08      	cmp	r2, #8
 8089832:	f040 8097 	bne.w	8089964 <mbedtls_ssl_write_record+0x294>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        memcpy( ssl->transform_out->iv_enc + ssl->transform_out->fixed_ivlen,
                             ssl->out_ctr, 8 );
 8089836:	683a      	ldr	r2, [r7, #0]
            /* Reminder if we ever add an AEAD mode with a different size */
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        memcpy( ssl->transform_out->iv_enc + ssl->transform_out->fixed_ivlen,
 8089838:	3318      	adds	r3, #24
                             ssl->out_ctr, 8 );
 808983a:	505a      	str	r2, [r3, r1]
 808983c:	687a      	ldr	r2, [r7, #4]
 808983e:	1858      	adds	r0, r3, r1
 8089840:	6042      	str	r2, [r0, #4]
        memcpy( ssl->out_iv, ssl->out_ctr, 8 );
 8089842:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8089846:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 808984a:	680b      	ldr	r3, [r1, #0]
 808984c:	6013      	str	r3, [r2, #0]
 808984e:	684b      	ldr	r3, [r1, #4]
 8089850:	6053      	str	r3, [r2, #4]
        /*
         * Fix pointer positions and message length with added IV
         */
        enc_msg = ssl->out_msg;
        enc_msglen = ssl->out_msglen;
        ssl->out_msglen += ssl->transform_out->ivlen -
 8089852:	6ba0      	ldr	r0, [r4, #56]	; 0x38

        /*
         * Fix pointer positions and message length with added IV
         */
        enc_msg = ssl->out_msg;
        enc_msglen = ssl->out_msglen;
 8089854:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
        ssl->out_msglen += ssl->transform_out->ivlen -
                           ssl->transform_out->fixed_ivlen;
 8089858:	68c3      	ldr	r3, [r0, #12]
 808985a:	6901      	ldr	r1, [r0, #16]
                ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen );

        /*
         * Fix pointer positions and message length with added IV
         */
        enc_msg = ssl->out_msg;
 808985c:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
        enc_msglen = ssl->out_msglen;
        ssl->out_msglen += ssl->transform_out->ivlen -
                           ssl->transform_out->fixed_ivlen;
 8089860:	443b      	add	r3, r7
 8089862:	1a5b      	subs	r3, r3, r1
 8089864:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
                       ssl->out_msglen, 0 ) );

        /*
         * Encrypt and authenticate
         */
        if( ( ret = mbedtls_cipher_auth_encrypt( &ssl->transform_out->cipher_ctx_enc,
 8089868:	19d3      	adds	r3, r2, r7
 808986a:	9305      	str	r3, [sp, #20]
 808986c:	ab09      	add	r3, sp, #36	; 0x24
 808986e:	9304      	str	r3, [sp, #16]
 8089870:	230d      	movs	r3, #13
 8089872:	9300      	str	r3, [sp, #0]
 8089874:	9506      	str	r5, [sp, #24]
 8089876:	9203      	str	r2, [sp, #12]
 8089878:	9702      	str	r7, [sp, #8]
 808987a:	9201      	str	r2, [sp, #4]
 808987c:	68c2      	ldr	r2, [r0, #12]
 808987e:	f100 0118 	add.w	r1, r0, #24
 8089882:	ab0a      	add	r3, sp, #40	; 0x28
 8089884:	3050      	adds	r0, #80	; 0x50
 8089886:	f7f9 fc81 	bl	808318c <mbedtls_cipher_auth_encrypt>
 808988a:	2800      	cmp	r0, #0
 808988c:	d173      	bne.n	8089976 <mbedtls_ssl_write_record+0x2a6>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_encrypt", ret );
            return( ret );
        }

        if( olen != enc_msglen )
 808988e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8089890:	429f      	cmp	r7, r3
 8089892:	d167      	bne.n	8089964 <mbedtls_ssl_write_record+0x294>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msglen += taglen;
 8089894:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
        auth_done++;
 8089898:	3601      	adds	r6, #1
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msglen += taglen;
 808989a:	441d      	add	r5, r3
 808989c:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
 80898a0:	e04c      	b.n	808993c <mbedtls_ssl_write_record+0x26c>
    }
    else
#endif /* MBEDTLS_GCM_C || MBEDTLS_CCM_C */
#if defined(MBEDTLS_CIPHER_MODE_CBC) &&                                    \
    ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) )
    if( mode == MBEDTLS_MODE_CBC )
 80898a2:	2d02      	cmp	r5, #2
 80898a4:	d15e      	bne.n	8089964 <mbedtls_ssl_write_record+0x294>
        int ret;
        unsigned char *enc_msg;
        size_t enc_msglen, padlen, olen = 0, i;

        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
                 ssl->transform_out->ivlen;
 80898a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) )
    if( mode == MBEDTLS_MODE_CBC )
    {
        int ret;
        unsigned char *enc_msg;
        size_t enc_msglen, padlen, olen = 0, i;
 80898a8:	2200      	movs	r2, #0
 80898aa:	920a      	str	r2, [sp, #40]	; 0x28

        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
 80898ac:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
                 ssl->transform_out->ivlen;
 80898b0:	68d9      	ldr	r1, [r3, #12]
 80898b2:	1c45      	adds	r5, r0, #1
 80898b4:	fbb5 f3f1 	udiv	r3, r5, r1
 80898b8:	fb01 5513 	mls	r5, r1, r3, r5
 80898bc:	1b4b      	subs	r3, r1, r5
        if( padlen == ssl->transform_out->ivlen )
 80898be:	4299      	cmp	r1, r3
 80898c0:	d054      	beq.n	808996c <mbedtls_ssl_write_record+0x29c>
            padlen = 0;

        for( i = 0; i <= padlen; i++ )
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 80898c2:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80898c6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 80898ca:	4411      	add	r1, r2
        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
                 ssl->transform_out->ivlen;
        if( padlen == ssl->transform_out->ivlen )
            padlen = 0;

        for( i = 0; i <= padlen; i++ )
 80898cc:	3201      	adds	r2, #1
 80898ce:	4293      	cmp	r3, r2
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 80898d0:	540b      	strb	r3, [r1, r0]
        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
                 ssl->transform_out->ivlen;
        if( padlen == ssl->transform_out->ivlen )
            padlen = 0;

        for( i = 0; i <= padlen; i++ )
 80898d2:	d2f6      	bcs.n	80898c2 <mbedtls_ssl_write_record+0x1f2>
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;

        ssl->out_msglen += padlen + 1;
 80898d4:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 80898d8:	3501      	adds	r5, #1
 80898da:	441d      	add	r5, r3
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * Prepend per-record IV for block cipher in TLS v1.1 and up as per
         * Method 1 (6.2.3.2. in RFC4346 and RFC5246)
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 80898dc:	68e3      	ldr	r3, [r4, #12]
            padlen = 0;

        for( i = 0; i <= padlen; i++ )
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;

        ssl->out_msglen += padlen + 1;
 80898de:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * Prepend per-record IV for block cipher in TLS v1.1 and up as per
         * Method 1 (6.2.3.2. in RFC4346 and RFC5246)
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 80898e2:	2b01      	cmp	r3, #1
 80898e4:	dc02      	bgt.n	80898ec <mbedtls_ssl_write_record+0x21c>
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;

        ssl->out_msglen += padlen + 1;

        enc_msglen = ssl->out_msglen;
        enc_msg = ssl->out_msg;
 80898e6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80898ea:	e018      	b.n	808991e <mbedtls_ssl_write_record+0x24e>
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
        {
            /*
             * Generate IV
             */
            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->transform_out->iv_enc,
 80898ec:	6823      	ldr	r3, [r4, #0]
 80898ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
                                  ssl->transform_out->ivlen );
 80898f0:	699d      	ldr	r5, [r3, #24]
 80898f2:	68ca      	ldr	r2, [r1, #12]
 80898f4:	69d8      	ldr	r0, [r3, #28]
 80898f6:	3118      	adds	r1, #24
 80898f8:	47a8      	blx	r5
            if( ret != 0 )
 80898fa:	2800      	cmp	r0, #0
 80898fc:	d13b      	bne.n	8089976 <mbedtls_ssl_write_record+0x2a6>
                return( ret );

            memcpy( ssl->out_iv, ssl->transform_out->iv_enc,
 80898fe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
                    ssl->transform_out->ivlen );
 8089900:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8089904:	68ca      	ldr	r2, [r1, #12]
 8089906:	3118      	adds	r1, #24
 8089908:	f00a fb2b 	bl	8093f62 <memcpy>
            /*
             * Fix pointer positions and message length with added IV
             */
            enc_msg = ssl->out_msg;
            enc_msglen = ssl->out_msglen;
            ssl->out_msglen += ssl->transform_out->ivlen;
 808990c:	6ba2      	ldr	r2, [r4, #56]	; 0x38

            /*
             * Fix pointer positions and message length with added IV
             */
            enc_msg = ssl->out_msg;
            enc_msglen = ssl->out_msglen;
 808990e:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
            ssl->out_msglen += ssl->transform_out->ivlen;
 8089912:	68d2      	ldr	r2, [r2, #12]
                    ssl->transform_out->ivlen );

            /*
             * Fix pointer positions and message length with added IV
             */
            enc_msg = ssl->out_msg;
 8089914:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
            enc_msglen = ssl->out_msglen;
            ssl->out_msglen += ssl->transform_out->ivlen;
 8089918:	442a      	add	r2, r5
 808991a:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
                            "including %d bytes of IV and %d bytes of padding",
                            ssl->out_msglen, ssl->transform_out->ivlen,
                            padlen + 1 ) );

        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_out->cipher_ctx_enc,
 808991e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8089920:	aa0a      	add	r2, sp, #40	; 0x28
 8089922:	9202      	str	r2, [sp, #8]
 8089924:	9301      	str	r3, [sp, #4]
 8089926:	9500      	str	r5, [sp, #0]
 8089928:	68c2      	ldr	r2, [r0, #12]
 808992a:	f100 0118 	add.w	r1, r0, #24
 808992e:	3050      	adds	r0, #80	; 0x50
 8089930:	f7f9 fc0a 	bl	8083148 <mbedtls_cipher_crypt>
 8089934:	b9f8      	cbnz	r0, 8089976 <mbedtls_ssl_write_record+0x2a6>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
            return( ret );
        }

        if( enc_msglen != olen )
 8089936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8089938:	429d      	cmp	r5, r3
 808993a:	d113      	bne.n	8089964 <mbedtls_ssl_write_record+0x294>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    /* Make extra sure authentication was performed, exactly once */
    if( auth_done != 1 )
 808993c:	2e01      	cmp	r6, #1
 808993e:	d111      	bne.n	8089964 <mbedtls_ssl_write_record+0x294>
            {
                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
                return( ret );
            }

            len = ssl->out_msglen;
 8089940:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
            ssl->out_len[0] = (unsigned char)( len >> 8 );
 8089944:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8089948:	0a19      	lsrs	r1, r3, #8
 808994a:	7011      	strb	r1, [r2, #0]
            ssl->out_len[1] = (unsigned char)( len      );
 808994c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8089950:	7053      	strb	r3, [r2, #1]
        }

        ssl->out_left = mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen;
 8089952:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0

        MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
                       ssl->out_hdr, mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen );
    }

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 8089956:	4620      	mov	r0, r4
            len = ssl->out_msglen;
            ssl->out_len[0] = (unsigned char)( len >> 8 );
            ssl->out_len[1] = (unsigned char)( len      );
        }

        ssl->out_left = mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen;
 8089958:	3305      	adds	r3, #5
 808995a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4

        MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
                       ssl->out_hdr, mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen );
    }

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 808995e:	f7ff fe7f 	bl	8089660 <mbedtls_ssl_flush_output>
 8089962:	e008      	b.n	8089976 <mbedtls_ssl_write_record+0x2a6>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );

    if( ssl->session_out == NULL || ssl->transform_out == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8089964:	4805      	ldr	r0, [pc, #20]	; (808997c <mbedtls_ssl_write_record+0x2ac>)
 8089966:	e006      	b.n	8089976 <mbedtls_ssl_write_record+0x2a6>
    if( ssl->out_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Record content %u too large, maximum %d",
                                    (unsigned) ssl->out_msglen,
                                    MBEDTLS_SSL_MAX_CONTENT_LEN ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 8089968:	4805      	ldr	r0, [pc, #20]	; (8089980 <mbedtls_ssl_write_record+0x2b0>)
 808996a:	e004      	b.n	8089976 <mbedtls_ssl_write_record+0x2a6>
                 ssl->transform_out->ivlen;
        if( padlen == ssl->transform_out->ivlen )
            padlen = 0;

        for( i = 0; i <= padlen; i++ )
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 808996c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8089970:	541a      	strb	r2, [r3, r0]
        size_t enc_msglen, padlen, olen = 0, i;

        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
                 ssl->transform_out->ivlen;
        if( padlen == ssl->transform_out->ivlen )
            padlen = 0;
 8089972:	4613      	mov	r3, r2
 8089974:	e7ae      	b.n	80898d4 <mbedtls_ssl_write_record+0x204>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write record" ) );

    return( 0 );
}
 8089976:	b017      	add	sp, #92	; 0x5c
 8089978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808997a:	bf00      	nop
 808997c:	ffff9400 	.word	0xffff9400
 8089980:	ffff8f00 	.word	0xffff8f00

08089984 <mbedtls_ssl_prepare_handshake_record>:
    return( 0 );
}
#endif /* MBEDTLS_SSL_PROTO_DTLS */

int mbedtls_ssl_prepare_handshake_record( mbedtls_ssl_context *ssl )
{
 8089984:	b510      	push	{r4, lr}
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
 8089986:	6f04      	ldr	r4, [r0, #112]	; 0x70
 8089988:	2c03      	cmp	r4, #3
 808998a:	d90f      	bls.n	80899ac <mbedtls_ssl_prepare_handshake_record+0x28>
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
                    ( ssl->in_msg[1] << 16 ) |
 808998c:	6e41      	ldr	r1, [r0, #100]	; 0x64
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
 808998e:	788a      	ldrb	r2, [r1, #2]
 8089990:	784b      	ldrb	r3, [r1, #1]
 8089992:	0212      	lsls	r2, r2, #8
 8089994:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8089998:	78ca      	ldrb	r2, [r1, #3]
 808999a:	4313      	orrs	r3, r2
 808999c:	3304      	adds	r3, #4
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 808999e:	4a04      	ldr	r2, [pc, #16]	; (80899b0 <mbedtls_ssl_prepare_handshake_record+0x2c>)
    }

    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
                    ( ssl->in_msg[1] << 16 ) |
                    ( ssl->in_msg[2] << 8  ) |
                      ssl->in_msg[3] );
 80899a0:	6783      	str	r3, [r0, #120]	; 0x78
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 80899a2:	429c      	cmp	r4, r3
 80899a4:	bf34      	ite	cc
 80899a6:	4610      	movcc	r0, r2
 80899a8:	2000      	movcs	r0, #0
 80899aa:	bd10      	pop	{r4, pc}
{
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 80899ac:	4801      	ldr	r0, [pc, #4]	; (80899b4 <mbedtls_ssl_prepare_handshake_record+0x30>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
    }

    return( 0 );
}
 80899ae:	bd10      	pop	{r4, pc}
 80899b0:	ffff8f80 	.word	0xffff8f80
 80899b4:	ffff8e00 	.word	0xffff8e00

080899b8 <mbedtls_ssl_update_handshake_status>:

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 80899b8:	6842      	ldr	r2, [r0, #4]

    return( 0 );
}

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{
 80899ba:	b410      	push	{r4}

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 80899bc:	2a10      	cmp	r2, #16
 80899be:	d008      	beq.n	80899d2 <mbedtls_ssl_update_handshake_status+0x1a>
        ssl->handshake != NULL )
 80899c0:	6b02      	ldr	r2, [r0, #48]	; 0x30
}

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 80899c2:	b132      	cbz	r2, 80899d2 <mbedtls_ssl_update_handshake_status+0x1a>
        ssl->handshake != NULL )
    {
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
 80899c4:	f8d2 4160 	ldr.w	r4, [r2, #352]	; 0x160
 80899c8:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80899ca:	4623      	mov	r3, r4
 80899cc:	6f82      	ldr	r2, [r0, #120]	; 0x78
        ssl->handshake != NULL )
    {
        ssl->handshake->in_msg_seq++;
    }
#endif
}
 80899ce:	bc10      	pop	{r4}
{

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
        ssl->handshake != NULL )
    {
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
 80899d0:	4718      	bx	r3
        ssl->handshake != NULL )
    {
        ssl->handshake->in_msg_seq++;
    }
#endif
}
 80899d2:	bc10      	pop	{r4}
 80899d4:	4770      	bx	lr
	...

080899d8 <mbedtls_ssl_handle_message_type>:

    return( 0 );
}

int mbedtls_ssl_handle_message_type( mbedtls_ssl_context *ssl )
{
 80899d8:	b510      	push	{r4, lr}
    int ret;

    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 80899da:	6ec3      	ldr	r3, [r0, #108]	; 0x6c

    return( 0 );
}

int mbedtls_ssl_handle_message_type( mbedtls_ssl_context *ssl )
{
 80899dc:	4604      	mov	r4, r0
    int ret;

    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 80899de:	2b16      	cmp	r3, #22
 80899e0:	d004      	beq.n	80899ec <mbedtls_ssl_handle_message_type+0x14>
        {
            return( ret );
        }
    }

    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
 80899e2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80899e4:	2b15      	cmp	r3, #21
 80899e6:	d006      	beq.n	80899f6 <mbedtls_ssl_handle_message_type+0x1e>

        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
    }

    return( 0 );
 80899e8:	2000      	movs	r0, #0
 80899ea:	bd10      	pop	{r4, pc}
    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
    {
        if( ( ret = mbedtls_ssl_prepare_handshake_record( ssl ) ) != 0 )
 80899ec:	f7ff ffca 	bl	8089984 <mbedtls_ssl_prepare_handshake_record>
 80899f0:	2800      	cmp	r0, #0
 80899f2:	d0f6      	beq.n	80899e2 <mbedtls_ssl_handle_message_type+0xa>
 80899f4:	bd10      	pop	{r4, pc}
        }
    }

    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
    {
        if( ssl->in_msglen != 2 )
 80899f6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80899f8:	2b02      	cmp	r3, #2
 80899fa:	d10c      	bne.n	8089a16 <mbedtls_ssl_handle_message_type+0x3e>
                       ssl->in_msg[0], ssl->in_msg[1] ) );

        /*
         * Ignore non-fatal alerts, except close_notify and no_renegotiation
         */
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
 80899fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80899fe:	781a      	ldrb	r2, [r3, #0]
 8089a00:	2a02      	cmp	r2, #2
 8089a02:	d00a      	beq.n	8089a1a <mbedtls_ssl_handle_message_type+0x42>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
        }

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 8089a04:	2a01      	cmp	r2, #1
 8089a06:	d10a      	bne.n	8089a1e <mbedtls_ssl_handle_message_type+0x46>
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
 8089a08:	785b      	ldrb	r3, [r3, #1]
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
        }

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 8089a0a:	b153      	cbz	r3, 8089a22 <mbedtls_ssl_handle_message_type+0x4a>

        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
    }

    return( 0 );
 8089a0c:	2b64      	cmp	r3, #100	; 0x64
 8089a0e:	4806      	ldr	r0, [pc, #24]	; (8089a28 <mbedtls_ssl_handle_message_type+0x50>)
 8089a10:	bf08      	it	eq
 8089a12:	2000      	moveq	r0, #0
 8089a14:	bd10      	pop	{r4, pc}
            /* Note: Standard allows for more than one 2 byte alert
               to be packed in a single message, but Mbed TLS doesn't
               currently support this. */
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid alert message, len: %d",
                           ssl->in_msglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 8089a16:	4805      	ldr	r0, [pc, #20]	; (8089a2c <mbedtls_ssl_handle_message_type+0x54>)
 8089a18:	bd10      	pop	{r4, pc}
         */
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
 8089a1a:	4805      	ldr	r0, [pc, #20]	; (8089a30 <mbedtls_ssl_handle_message_type+0x58>)
 8089a1c:	bd10      	pop	{r4, pc}
            return( 0 );
        }
#endif /* MBEDTLS_SSL_PROTO_SSL3 && MBEDTLS_SSL_SRV_C */

        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
 8089a1e:	4802      	ldr	r0, [pc, #8]	; (8089a28 <mbedtls_ssl_handle_message_type+0x50>)
 8089a20:	bd10      	pop	{r4, pc}

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a close notify message" ) );
            return( MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY );
 8089a22:	4804      	ldr	r0, [pc, #16]	; (8089a34 <mbedtls_ssl_handle_message_type+0x5c>)
        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
    }

    return( 0 );
}
 8089a24:	bd10      	pop	{r4, pc}
 8089a26:	bf00      	nop
 8089a28:	ffff9980 	.word	0xffff9980
 8089a2c:	ffff8e00 	.word	0xffff8e00
 8089a30:	ffff8880 	.word	0xffff8880
 8089a34:	ffff8780 	.word	0xffff8780

08089a38 <mbedtls_ssl_send_alert_message>:
}

int mbedtls_ssl_send_alert_message( mbedtls_ssl_context *ssl,
                            unsigned char level,
                            unsigned char message )
{
 8089a38:	b410      	push	{r4}
    int ret;

    if( ssl == NULL || ssl->conf == NULL )
 8089a3a:	b180      	cbz	r0, 8089a5e <mbedtls_ssl_send_alert_message+0x26>
 8089a3c:	6804      	ldr	r4, [r0, #0]
 8089a3e:	b174      	cbz	r4, 8089a5e <mbedtls_ssl_send_alert_message+0x26>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> send alert message" ) );
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "send alert level=%u message=%u", level, message ));

    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
 8089a40:	2415      	movs	r4, #21
 8089a42:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
    ssl->out_msglen = 2;
 8089a46:	2402      	movs	r4, #2
 8089a48:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
    ssl->out_msg[0] = level;
 8089a4c:	f8d0 4098 	ldr.w	r4, [r0, #152]	; 0x98
 8089a50:	7021      	strb	r1, [r4, #0]
    ssl->out_msg[1] = message;
 8089a52:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
 8089a56:	705a      	strb	r2, [r3, #1]
        return( ret );
    }
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );

    return( 0 );
}
 8089a58:	bc10      	pop	{r4}
    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
    ssl->out_msglen = 2;
    ssl->out_msg[0] = level;
    ssl->out_msg[1] = message;

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 8089a5a:	f7ff be39 	b.w	80896d0 <mbedtls_ssl_write_record>
        return( ret );
    }
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );

    return( 0 );
}
 8089a5e:	4801      	ldr	r0, [pc, #4]	; (8089a64 <mbedtls_ssl_send_alert_message+0x2c>)
 8089a60:	bc10      	pop	{r4}
 8089a62:	4770      	bx	lr
 8089a64:	ffff8f00 	.word	0xffff8f00

08089a68 <mbedtls_ssl_read_record_layer>:

    return( 0 );
}

int mbedtls_ssl_read_record_layer( mbedtls_ssl_context *ssl )
{
 8089a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     *     and consumes through mbedtls_ssl_read only.
     *
     */

    /* Case (1): Handshake messages */
    if( ssl->in_hslen != 0 )
 8089a6c:	6f81      	ldr	r1, [r0, #120]	; 0x78

    return( 0 );
}

int mbedtls_ssl_read_record_layer( mbedtls_ssl_context *ssl )
{
 8089a6e:	b096      	sub	sp, #88	; 0x58
 8089a70:	4604      	mov	r4, r0
 8089a72:	6e83      	ldr	r3, [r0, #104]	; 0x68
     *     and consumes through mbedtls_ssl_read only.
     *
     */

    /* Case (1): Handshake messages */
    if( ssl->in_hslen != 0 )
 8089a74:	b181      	cbz	r1, 8089a98 <mbedtls_ssl_read_record_layer+0x30>
    {
        /* Hard assertion to be sure that no application data
         * is in flight, as corrupting ssl->in_msglen during
         * ssl->in_offt != NULL is fatal. */
        if( ssl->in_offt != NULL )
 8089a76:	2b00      	cmp	r3, #0
 8089a78:	f040 821c 	bne.w	8089eb4 <mbedtls_ssl_read_record_layer+0x44c>
         *     should not be treated as a silently corrected assertion.
         *     Additionally, ssl->in_hslen might be arbitrarily out of
         *     bounds after handling a DTLS message with an unexpected
         *     sequence number, see mbedtls_ssl_prepare_handshake_record.
         */
        if( ssl->in_hslen < ssl->in_msglen )
 8089a7c:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8089a7e:	4291      	cmp	r1, r2
 8089a80:	d206      	bcs.n	8089a90 <mbedtls_ssl_read_record_layer+0x28>
        {
            ssl->in_msglen -= ssl->in_hslen;
 8089a82:	1a52      	subs	r2, r2, r1
 8089a84:	6702      	str	r2, [r0, #112]	; 0x70
            memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,
 8089a86:	6e40      	ldr	r0, [r0, #100]	; 0x64
                     ssl->in_msglen );
 8089a88:	4401      	add	r1, r0
 8089a8a:	f00a fa75 	bl	8093f78 <memmove>
 8089a8e:	e000      	b.n	8089a92 <mbedtls_ssl_read_record_layer+0x2a>
            MBEDTLS_SSL_DEBUG_BUF( 4, "remaining content in record",
                                   ssl->in_msg, ssl->in_msglen );
        }
        else
        {
            ssl->in_msglen = 0;
 8089a90:	6703      	str	r3, [r0, #112]	; 0x70
        }

        ssl->in_hslen   = 0;
 8089a92:	2300      	movs	r3, #0
 8089a94:	67a3      	str	r3, [r4, #120]	; 0x78
 8089a96:	e003      	b.n	8089aa0 <mbedtls_ssl_read_record_layer+0x38>
    }
    /* Case (4): Application data */
    else if( ssl->in_offt != NULL )
 8089a98:	2b00      	cmp	r3, #0
 8089a9a:	f040 820f 	bne.w	8089ebc <mbedtls_ssl_read_record_layer+0x454>
        return( 0 );
    }
    /* Everything else (CCS & Alerts) */
    else
    {
        ssl->in_msglen = 0;
 8089a9e:	6703      	str	r3, [r0, #112]	; 0x70
     *
     * Fetch and decode new record if current one is fully consumed.
     *
     */

    if( ssl->in_msglen > 0 )
 8089aa0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8089aa2:	2b00      	cmp	r3, #0
 8089aa4:	f040 820a 	bne.w	8089ebc <mbedtls_ssl_read_record_layer+0x454>
read_record_header:
#endif

    /* Current record either fully processed or to be discarded. */

    if( ( ret = mbedtls_ssl_fetch_input( ssl, mbedtls_ssl_hdr_len( ssl ) ) ) != 0 )
 8089aa8:	2105      	movs	r1, #5
 8089aaa:	4620      	mov	r0, r4
 8089aac:	f7ff fd92 	bl	80895d4 <mbedtls_ssl_fetch_input>
 8089ab0:	2800      	cmp	r0, #0
 8089ab2:	f040 8204 	bne.w	8089ebe <mbedtls_ssl_read_record_layer+0x456>
{
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
 8089ab6:	6da2      	ldr	r2, [r4, #88]	; 0x58
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 8089ab8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
{
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
 8089aba:	7813      	ldrb	r3, [r2, #0]
 8089abc:	66e3      	str	r3, [r4, #108]	; 0x6c
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 8089abe:	7805      	ldrb	r5, [r0, #0]
 8089ac0:	7841      	ldrb	r1, [r0, #1]
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 8089ac2:	3b14      	subs	r3, #20
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 8089ac4:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8089ac8:	6721      	str	r1, [r4, #112]	; 0x70
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 8089aca:	2b03      	cmp	r3, #3
    else
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
 8089acc:	7855      	ldrb	r5, [r2, #1]

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
    mbedtls_ssl_read_version( &major_ver, &minor_ver, ssl->conf->transport, ssl->in_hdr + 1 );
 8089ace:	6820      	ldr	r0, [r4, #0]
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
        *minor = ver[1];
 8089ad0:	7892      	ldrb	r2, [r2, #2]
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 8089ad2:	d905      	bls.n	8089ae0 <mbedtls_ssl_read_record_layer+0x78>
        /* Silently ignore invalid DTLS records as recommended by RFC 6347
         * Section 4.1.2.7 */
        if( ssl->conf->transport != MBEDTLS_SSL_TRANSPORT_DATAGRAM )
#endif /* MBEDTLS_SSL_PROTO_DTLS */
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                    MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 8089ad4:	220a      	movs	r2, #10
 8089ad6:	2102      	movs	r1, #2
 8089ad8:	4620      	mov	r0, r4
 8089ada:	f7ff ffad 	bl	8089a38 <mbedtls_ssl_send_alert_message>
 8089ade:	e1eb      	b.n	8089eb8 <mbedtls_ssl_read_record_layer+0x450>

        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    /* Check version */
    if( major_ver != ssl->major_ver )
 8089ae0:	68a3      	ldr	r3, [r4, #8]
 8089ae2:	429d      	cmp	r5, r3
 8089ae4:	f040 81e8 	bne.w	8089eb8 <mbedtls_ssl_read_record_layer+0x450>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "major version mismatch" ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    if( minor_ver > ssl->conf->max_minor_ver )
 8089ae8:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8089aec:	429a      	cmp	r2, r3
 8089aee:	f300 81e3 	bgt.w	8089eb8 <mbedtls_ssl_read_record_layer+0x450>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "minor version mismatch" ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    /* Check length against the size of our buffer */
    if( ssl->in_msglen > MBEDTLS_SSL_BUFFER_LEN
 8089af2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8089af4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8089af6:	1a9b      	subs	r3, r3, r2
 8089af8:	f5c3 5305 	rsb	r3, r3, #8512	; 0x2140
 8089afc:	330d      	adds	r3, #13
 8089afe:	4299      	cmp	r1, r3
 8089b00:	f200 81da 	bhi.w	8089eb8 <mbedtls_ssl_read_record_layer+0x450>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    /* Check length against bounds of the current transform and version */
    if( ssl->transform_in == NULL )
 8089b04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8089b06:	b923      	cbnz	r3, 8089b12 <mbedtls_ssl_read_record_layer+0xaa>
    {
        if( ssl->in_msglen < 1 ||
 8089b08:	1e4b      	subs	r3, r1, #1
 8089b0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8089b0e:	d30c      	bcc.n	8089b2a <mbedtls_ssl_read_record_layer+0xc2>
 8089b10:	e1d2      	b.n	8089eb8 <mbedtls_ssl_read_record_layer+0x450>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }
    }
    else
    {
        if( ssl->in_msglen < ssl->transform_in->minlen )
 8089b12:	689b      	ldr	r3, [r3, #8]
 8089b14:	4299      	cmp	r1, r3
 8089b16:	f0c0 81cf 	bcc.w	8089eb8 <mbedtls_ssl_read_record_layer+0x450>
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * TLS encrypted messages can have up to 256 bytes of padding
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
 8089b1a:	68e2      	ldr	r2, [r4, #12]
 8089b1c:	2a00      	cmp	r2, #0
 8089b1e:	dd04      	ble.n	8089b2a <mbedtls_ssl_read_record_layer+0xc2>
 8089b20:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8089b24:	4299      	cmp	r1, r3
 8089b26:	f200 81c7 	bhi.w	8089eb8 <mbedtls_ssl_read_record_layer+0x450>
    }

    /*
     * Read and optionally decrypt the message contents
     */
    if( ( ret = mbedtls_ssl_fetch_input( ssl,
 8089b2a:	3105      	adds	r1, #5
 8089b2c:	4620      	mov	r0, r4
 8089b2e:	f7ff fd51 	bl	80895d4 <mbedtls_ssl_fetch_input>
 8089b32:	2800      	cmp	r0, #0
 8089b34:	f040 81c3 	bne.w	8089ebe <mbedtls_ssl_read_record_layer+0x456>

        if( ret == 0 )
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
 8089b38:	6b66      	ldr	r6, [r4, #52]	; 0x34
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        ssl->next_record_offset = ssl->in_msglen + mbedtls_ssl_hdr_len( ssl );
    else
#endif
        ssl->in_left = 0;
 8089b3a:	6760      	str	r0, [r4, #116]	; 0x74

        if( ret == 0 )
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
 8089b3c:	2e00      	cmp	r6, #0
 8089b3e:	f000 81bd 	beq.w	8089ebc <mbedtls_ssl_read_record_layer+0x454>
    size_t padlen = 0, correct = 1;
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );

    if( ssl->session_in == NULL || ssl->transform_in == NULL )
 8089b42:	6a23      	ldr	r3, [r4, #32]
 8089b44:	2b00      	cmp	r3, #0
 8089b46:	f000 81b5 	beq.w	8089eb4 <mbedtls_ssl_read_record_layer+0x44c>
 * \return       The mode of operation, or #MBEDTLS_MODE_NONE if
 *               \p ctx has not been initialized.
 */
static inline mbedtls_cipher_mode_t mbedtls_cipher_get_cipher_mode( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
 8089b4a:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8089b4e:	b103      	cbz	r3, 8089b52 <mbedtls_ssl_read_record_layer+0xea>
        return MBEDTLS_MODE_NONE;

    return ctx->cipher_info->mode;
 8089b50:	785b      	ldrb	r3, [r3, #1]
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_in->cipher_ctx_dec );

    if( ssl->in_msglen < ssl->transform_in->minlen )
 8089b52:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8089b54:	68b2      	ldr	r2, [r6, #8]
 8089b56:	4295      	cmp	r5, r2
 8089b58:	f0c0 819d 	bcc.w	8089e96 <mbedtls_ssl_read_record_layer+0x42e>
        }
    }
    else
#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */
#if defined(MBEDTLS_GCM_C) || defined(MBEDTLS_CCM_C)
    if( mode == MBEDTLS_MODE_GCM ||
 8089b5c:	2b06      	cmp	r3, #6
 8089b5e:	d001      	beq.n	8089b64 <mbedtls_ssl_read_record_layer+0xfc>
 8089b60:	2b08      	cmp	r3, #8
 8089b62:	d175      	bne.n	8089c50 <mbedtls_ssl_read_record_layer+0x1e8>
        int ret;
        size_t dec_msglen, olen;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
 8089b64:	6833      	ldr	r3, [r6, #0]
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
        size_t explicit_iv_len = ssl->transform_in->ivlen -
                                 ssl->transform_in->fixed_ivlen;
 8089b66:	68f2      	ldr	r2, [r6, #12]
        size_t dec_msglen, olen;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 8089b68:	7f1b      	ldrb	r3, [r3, #28]
 8089b6a:	f013 0f02 	tst.w	r3, #2
        size_t explicit_iv_len = ssl->transform_in->ivlen -
                                 ssl->transform_in->fixed_ivlen;
 8089b6e:	6933      	ldr	r3, [r6, #16]
        size_t dec_msglen, olen;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 8089b70:	bf14      	ite	ne
 8089b72:	2708      	movne	r7, #8
 8089b74:	2710      	moveq	r7, #16
        size_t explicit_iv_len = ssl->transform_in->ivlen -
                                 ssl->transform_in->fixed_ivlen;
 8089b76:	1ad3      	subs	r3, r2, r3

        if( ssl->in_msglen < explicit_iv_len + taglen )
 8089b78:	19da      	adds	r2, r3, r7
 8089b7a:	4295      	cmp	r5, r2
 8089b7c:	f0c0 818b 	bcc.w	8089e96 <mbedtls_ssl_read_record_layer+0x42e>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < explicit_iv_len (%d) "
                                "+ taglen (%d)", ssl->in_msglen,
                                explicit_iv_len, taglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;
 8089b80:	1aed      	subs	r5, r5, r3
 8089b82:	1bed      	subs	r5, r5, r7

        dec_msg = ssl->in_msg;
        dec_msg_result = ssl->in_msg;
        ssl->in_msglen = dec_msglen;

        memcpy( add_data, ssl->in_ctr, 8 );
 8089b84:	6d62      	ldr	r2, [r4, #84]	; 0x54
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;

        dec_msg = ssl->in_msg;
        dec_msg_result = ssl->in_msg;
        ssl->in_msglen = dec_msglen;
 8089b86:	6725      	str	r5, [r4, #112]	; 0x70

        memcpy( add_data, ssl->in_ctr, 8 );
 8089b88:	6810      	ldr	r0, [r2, #0]
 8089b8a:	6851      	ldr	r1, [r2, #4]
 8089b8c:	ab0a      	add	r3, sp, #40	; 0x28
 8089b8e:	c303      	stmia	r3!, {r0, r1}
        add_data[8]  = ssl->in_msgtype;
 8089b90:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 8089b92:	68a2      	ldr	r2, [r4, #8]
        dec_msg = ssl->in_msg;
        dec_msg_result = ssl->in_msg;
        ssl->in_msglen = dec_msglen;

        memcpy( add_data, ssl->in_ctr, 8 );
        add_data[8]  = ssl->in_msgtype;
 8089b94:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 8089b98:	68e3      	ldr	r3, [r4, #12]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 8089b9a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
        ver[1] = (unsigned char) minor;
 8089b9e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32

        memcpy( add_data, ssl->in_ctr, 8 );
        add_data[8]  = ssl->in_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->in_msglen >> 8 ) & 0xFF;
 8089ba2:	0a2b      	lsrs	r3, r5, #8
 8089ba4:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
        add_data[12] = ssl->in_msglen & 0xFF;
 8089ba8:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34

        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
                       add_data, 13 );

        memcpy( ssl->transform_in->iv_dec + ssl->transform_in->fixed_ivlen,
 8089bac:	6933      	ldr	r3, [r6, #16]
                ssl->in_iv,
                ssl->transform_in->ivlen - ssl->transform_in->fixed_ivlen );
 8089bae:	68f2      	ldr	r2, [r6, #12]
                                explicit_iv_len, taglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;

        dec_msg = ssl->in_msg;
 8089bb0:	f8d4 8064 	ldr.w	r8, [r4, #100]	; 0x64
        add_data[12] = ssl->in_msglen & 0xFF;

        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
                       add_data, 13 );

        memcpy( ssl->transform_in->iv_dec + ssl->transform_in->fixed_ivlen,
 8089bb4:	f106 0028 	add.w	r0, r6, #40	; 0x28
                ssl->in_iv,
                ssl->transform_in->ivlen - ssl->transform_in->fixed_ivlen );
 8089bb8:	1ad2      	subs	r2, r2, r3
 8089bba:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8089bbc:	4418      	add	r0, r3
 8089bbe:	f00a f9d0 	bl	8093f62 <memcpy>
        MBEDTLS_SSL_DEBUG_BUF( 4, "TAG used", dec_msg + dec_msglen, taglen );

        /*
         * Decrypt and authenticate
         */
        if( ( ret = mbedtls_cipher_auth_decrypt( &ssl->transform_in->cipher_ctx_dec,
 8089bc2:	eb08 0305 	add.w	r3, r8, r5
 8089bc6:	9305      	str	r3, [sp, #20]
 8089bc8:	ab09      	add	r3, sp, #36	; 0x24
 8089bca:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8089bcc:	9304      	str	r3, [sp, #16]
 8089bce:	230d      	movs	r3, #13
 8089bd0:	9300      	str	r3, [sp, #0]
 8089bd2:	9706      	str	r7, [sp, #24]
 8089bd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8089bd8:	9502      	str	r5, [sp, #8]
 8089bda:	f8cd 8004 	str.w	r8, [sp, #4]
 8089bde:	68c2      	ldr	r2, [r0, #12]
 8089be0:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8089be4:	ab0a      	add	r3, sp, #40	; 0x28
 8089be6:	3090      	adds	r0, #144	; 0x90
 8089be8:	f7f9 fafa 	bl	80831e0 <mbedtls_cipher_auth_decrypt>
 8089bec:	b128      	cbz	r0, 8089bfa <mbedtls_ssl_read_record_layer+0x192>
                                         dec_msg_result, &olen,
                                         dec_msg + dec_msglen, taglen ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_decrypt", ret );

            if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
 8089bee:	f510 4fc6 	cmn.w	r0, #25344	; 0x6300
 8089bf2:	f000 8150 	beq.w	8089e96 <mbedtls_ssl_read_record_layer+0x42e>
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
    {
        if( ( ret = ssl_decrypt_buf( ssl ) ) != 0 )
 8089bf6:	b328      	cbz	r0, 8089c44 <mbedtls_ssl_read_record_layer+0x1dc>
 8089bf8:	e161      	b.n	8089ebe <mbedtls_ssl_read_record_layer+0x456>

            return( ret );
        }
        auth_done++;

        if( olen != dec_msglen )
 8089bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8089bfc:	429d      	cmp	r5, r3
 8089bfe:	f040 8159 	bne.w	8089eb4 <mbedtls_ssl_read_record_layer+0x44c>
 8089c02:	e007      	b.n	8089c14 <mbedtls_ssl_read_record_layer+0x1ac>
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
    }

    return( diff );
 8089c04:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
        MBEDTLS_SSL_DEBUG_BUF( 4, "expected mac", mac_expect, ssl->transform_in->maclen );
        MBEDTLS_SSL_DEBUG_BUF( 4, "message  mac", ssl->in_msg + ssl->in_msglen,
                               ssl->transform_in->maclen );
#endif

        if( mbedtls_ssl_safer_memcmp( ssl->in_msg + ssl->in_msglen, mac_expect,
 8089c08:	2b00      	cmp	r3, #0
 8089c0a:	f040 8144 	bne.w	8089e96 <mbedtls_ssl_read_record_layer+0x42e>
        auth_done++;

        /*
         * Finally check the correct flag
         */
        if( correct == 0 )
 8089c0e:	2d00      	cmp	r5, #0
 8089c10:	f000 8141 	beq.w	8089e96 <mbedtls_ssl_read_record_layer+0x42e>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    if( ssl->in_msglen == 0 )
 8089c14:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8089c16:	2b00      	cmp	r3, #0
 8089c18:	f040 8144 	bne.w	8089ea4 <mbedtls_ssl_read_record_layer+0x43c>
    {
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3
 8089c1c:	68e3      	ldr	r3, [r4, #12]
 8089c1e:	2b03      	cmp	r3, #3
 8089c20:	f000 813b 	beq.w	8089e9a <mbedtls_ssl_read_record_layer+0x432>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid zero-length message type: %d", ssl->in_msgtype ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

        ssl->nb_zero++;
 8089c24:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8089c26:	3301      	adds	r3, #1

        /*
         * Three or more empty messages may be a DoS attack
         * (excessive CPU consumption).
         */
        if( ssl->nb_zero > 3 )
 8089c28:	2b03      	cmp	r3, #3
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid zero-length message type: %d", ssl->in_msgtype ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

        ssl->nb_zero++;
 8089c2a:	67e3      	str	r3, [r4, #124]	; 0x7c

        /*
         * Three or more empty messages may be a DoS attack
         * (excessive CPU consumption).
         */
        if( ssl->nb_zero > 3 )
 8089c2c:	f300 8133 	bgt.w	8089e96 <mbedtls_ssl_read_record_layer+0x42e>

        /*
         * Finally check the correct flag
         */
        if( correct == 0 )
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 8089c30:	2208      	movs	r2, #8
    }
    else
#endif
    {
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
            if( ++ssl->in_ctr[i - 1] != 0 )
 8089c32:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8089c34:	3a01      	subs	r2, #1
 8089c36:	5c8b      	ldrb	r3, [r1, r2]
 8089c38:	3301      	adds	r3, #1
 8089c3a:	b2db      	uxtb	r3, r3
 8089c3c:	548b      	strb	r3, [r1, r2]
 8089c3e:	2b00      	cmp	r3, #0
 8089c40:	f000 8133 	beq.w	8089eaa <mbedtls_ssl_read_record_layer+0x442>
        }

        MBEDTLS_SSL_DEBUG_BUF( 4, "input payload after decrypt",
                       ssl->in_msg, ssl->in_msglen );

        if( ssl->in_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
 8089c44:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8089c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8089c4a:	f240 8137 	bls.w	8089ebc <mbedtls_ssl_read_record_layer+0x454>
 8089c4e:	e133      	b.n	8089eb8 <mbedtls_ssl_read_record_layer+0x450>
    }
    else
#endif /* MBEDTLS_GCM_C || MBEDTLS_CCM_C */
#if defined(MBEDTLS_CIPHER_MODE_CBC) &&                                    \
    ( defined(MBEDTLS_AES_C) || defined(MBEDTLS_CAMELLIA_C) )
    if( mode == MBEDTLS_MODE_CBC )
 8089c50:	2b02      	cmp	r3, #2
 8089c52:	f040 812f 	bne.w	8089eb4 <mbedtls_ssl_read_record_layer+0x44c>
        int ret;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        size_t dec_msglen;
        size_t minlen = 0;
        size_t olen = 0;
 8089c56:	2300      	movs	r3, #0
 8089c58:	930a      	str	r3, [sp, #40]	; 0x28

        /*
         * Check immediate ciphertext sanity
         */
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 8089c5a:	68e0      	ldr	r0, [r4, #12]
 8089c5c:	68f2      	ldr	r2, [r6, #12]
            minlen += ssl->transform_in->ivlen;
 8089c5e:	2802      	cmp	r0, #2
 8089c60:	bfa8      	it	ge
 8089c62:	4613      	movge	r3, r2
#endif

        if( ssl->in_msglen < minlen + ssl->transform_in->ivlen ||
 8089c64:	18d1      	adds	r1, r2, r3
 8089c66:	428d      	cmp	r5, r1
 8089c68:	f0c0 8115 	bcc.w	8089e96 <mbedtls_ssl_read_record_layer+0x42e>
 8089c6c:	6971      	ldr	r1, [r6, #20]
 8089c6e:	3101      	adds	r1, #1
 8089c70:	440b      	add	r3, r1
 8089c72:	429d      	cmp	r5, r3
 8089c74:	f0c0 810f 	bcc.w	8089e96 <mbedtls_ssl_read_record_layer+0x42e>
#endif /* MBEDTLS_SSL_ENCRYPT_THEN_MAC */

        /*
         * Check length sanity
         */
        if( ssl->in_msglen % ssl->transform_in->ivlen != 0 )
 8089c78:	fbb5 f6f2 	udiv	r6, r5, r2
 8089c7c:	fb02 5616 	mls	r6, r2, r6, r5
 8089c80:	2e00      	cmp	r6, #0
 8089c82:	f040 8108 	bne.w	8089e96 <mbedtls_ssl_read_record_layer+0x42e>

#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * Initialize for prepended IV for block cipher in TLS v1.1 and up
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 8089c86:	2801      	cmp	r0, #1
                                ssl->transform_in->maclen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }

        dec_msglen = ssl->in_msglen;
        dec_msg = ssl->in_msg;
 8089c88:	6e63      	ldr	r3, [r4, #100]	; 0x64

#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * Initialize for prepended IV for block cipher in TLS v1.1 and up
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 8089c8a:	dd0d      	ble.n	8089ca8 <mbedtls_ssl_read_record_layer+0x240>
        {
            dec_msglen -= ssl->transform_in->ivlen;
 8089c8c:	1aad      	subs	r5, r5, r2
            ssl->in_msglen -= ssl->transform_in->ivlen;

            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 8089c8e:	4632      	mov	r2, r6
         * Initialize for prepended IV for block cipher in TLS v1.1 and up
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
        {
            dec_msglen -= ssl->transform_in->ivlen;
            ssl->in_msglen -= ssl->transform_in->ivlen;
 8089c90:	6725      	str	r5, [r4, #112]	; 0x70

            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 8089c92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8089c94:	68c8      	ldr	r0, [r1, #12]
 8089c96:	4290      	cmp	r0, r2
 8089c98:	d906      	bls.n	8089ca8 <mbedtls_ssl_read_record_layer+0x240>
                ssl->transform_in->iv_dec[i] = ssl->in_iv[i];
 8089c9a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8089c9c:	4411      	add	r1, r2
 8089c9e:	5c80      	ldrb	r0, [r0, r2]
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
        {
            dec_msglen -= ssl->transform_in->ivlen;
            ssl->in_msglen -= ssl->transform_in->ivlen;

            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 8089ca0:	3201      	adds	r2, #1
                ssl->transform_in->iv_dec[i] = ssl->in_iv[i];
 8089ca2:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28
 8089ca6:	e7f4      	b.n	8089c92 <mbedtls_ssl_read_record_layer+0x22a>
        }
#endif /* MBEDTLS_SSL_PROTO_TLS1_1 || MBEDTLS_SSL_PROTO_TLS1_2 */

        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_in->cipher_ctx_dec,
 8089ca8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8089caa:	af0a      	add	r7, sp, #40	; 0x28
 8089cac:	9702      	str	r7, [sp, #8]
 8089cae:	9301      	str	r3, [sp, #4]
 8089cb0:	9500      	str	r5, [sp, #0]
 8089cb2:	68c2      	ldr	r2, [r0, #12]
 8089cb4:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8089cb8:	3090      	adds	r0, #144	; 0x90
 8089cba:	f7f9 fa45 	bl	8083148 <mbedtls_cipher_crypt>
 8089cbe:	2800      	cmp	r0, #0
 8089cc0:	f040 80fd 	bne.w	8089ebe <mbedtls_ssl_read_record_layer+0x456>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
            return( ret );
        }

        if( dec_msglen != olen )
 8089cc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8089cc6:	429d      	cmp	r5, r3
 8089cc8:	f040 80f4 	bne.w	8089eb4 <mbedtls_ssl_read_record_layer+0x44c>
                    ssl->transform_in->cipher_ctx_dec.iv,
                    ssl->transform_in->ivlen );
        }
#endif

        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 8089ccc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8089cce:	6e65      	ldr	r5, [r4, #100]	; 0x64

        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 8089cd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
                    ssl->transform_in->cipher_ctx_dec.iv,
                    ssl->transform_in->ivlen );
        }
#endif

        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 8089cd2:	18ea      	adds	r2, r5, r3
 8089cd4:	f812 ac01 	ldrb.w	sl, [r2, #-1]

        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 8089cd8:	f8d1 c014 	ldr.w	ip, [r1, #20]
                    ssl->transform_in->cipher_ctx_dec.iv,
                    ssl->transform_in->ivlen );
        }
#endif

        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 8089cdc:	f10a 0e01 	add.w	lr, sl, #1

        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 8089ce0:	eb0e 020c 	add.w	r2, lr, ip
 8089ce4:	4293      	cmp	r3, r2
        }
        else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 8089ce6:	68e2      	ldr	r2, [r4, #12]
        {
#if defined(MBEDTLS_SSL_DEBUG_ALL)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < maclen (%d) + padlen (%d)",
                        ssl->in_msglen, ssl->transform_in->maclen, padlen ) );
#endif
            padlen = 0;
 8089ce8:	bf34      	ite	cc
 8089cea:	4686      	movcc	lr, r0
{
    size_t i;
    mbedtls_cipher_mode_t mode;
    int auth_done = 0;
#if defined(SSL_SOME_MODES_USE_MAC)
    size_t padlen = 0, correct = 1;
 8089cec:	2001      	movcs	r0, #1
        }
        else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 8089cee:	2a00      	cmp	r2, #0
 8089cf0:	f340 80e0 	ble.w	8089eb4 <mbedtls_ssl_read_record_layer+0x44c>
             *                     ssl->transform_in->maclen
             *
             * In both cases we reset padding_idx to a safe value (0) to
             * prevent out-of-buffer reads.
             */
            correct &= ( padlen <= ssl->in_msglen );
 8089cf4:	4573      	cmp	r3, lr
 8089cf6:	bf34      	ite	cc
 8089cf8:	2000      	movcc	r0, #0
 8089cfa:	f000 0001 	andcs.w	r0, r0, #1
            /*
             * TLSv1+: always check the padding up to the first failure
             * and fake check up to 256 bytes of padding
             */
            size_t pad_count = 0, real_count = 1;
            size_t padding_idx = ssl->in_msglen - padlen;
 8089cfe:	ebce 0203 	rsb	r2, lr, r3
             * In both cases we reset padding_idx to a safe value (0) to
             * prevent out-of-buffer reads.
             */
            correct &= ( padlen <= ssl->in_msglen );
            correct &= ( padding_idx <= MBEDTLS_SSL_MAX_CONTENT_LEN +
                                       ssl->transform_in->maclen );
 8089d02:	f50c 5c00 	add.w	ip, ip, #8192	; 0x2000
 8089d06:	4562      	cmp	r2, ip
 8089d08:	bf8c      	ite	hi
 8089d0a:	2000      	movhi	r0, #0
 8089d0c:	f000 0001 	andls.w	r0, r0, #1
        {
            /*
             * TLSv1+: always check the padding up to the first failure
             * and fake check up to 256 bytes of padding
             */
            size_t pad_count = 0, real_count = 1;
 8089d10:	f04f 0800 	mov.w	r8, #0
            correct &= ( padding_idx <= MBEDTLS_SSL_MAX_CONTENT_LEN +
                                       ssl->transform_in->maclen );

            padding_idx *= correct;

            for( i = 0; i < 256; i++ )
 8089d14:	46c4      	mov	ip, r8
            {
                real_count &= ( i < padlen );
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 8089d16:	fb00 5202 	mla	r2, r0, r2, r5
        {
            /*
             * TLSv1+: always check the padding up to the first failure
             * and fake check up to 256 bytes of padding
             */
            size_t pad_count = 0, real_count = 1;
 8089d1a:	f04f 0901 	mov.w	r9, #1

            for( i = 0; i < 256; i++ )
            {
                real_count &= ( i < padlen );
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 8089d1e:	f10e 3aff 	add.w	sl, lr, #4294967295

            padding_idx *= correct;

            for( i = 0; i < 256; i++ )
            {
                real_count &= ( i < padlen );
 8089d22:	45e6      	cmp	lr, ip
 8089d24:	bf94      	ite	ls
 8089d26:	f04f 0900 	movls.w	r9, #0
 8089d2a:	f009 0901 	andhi.w	r9, r9, #1
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 8089d2e:	f812 500c 	ldrb.w	r5, [r2, ip]
            correct &= ( padding_idx <= MBEDTLS_SSL_MAX_CONTENT_LEN +
                                       ssl->transform_in->maclen );

            padding_idx *= correct;

            for( i = 0; i < 256; i++ )
 8089d32:	f10c 0c01 	add.w	ip, ip, #1
            {
                real_count &= ( i < padlen );
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 8089d36:	4555      	cmp	r5, sl
 8089d38:	bf14      	ite	ne
 8089d3a:	2500      	movne	r5, #0
 8089d3c:	2501      	moveq	r5, #1
            correct &= ( padding_idx <= MBEDTLS_SSL_MAX_CONTENT_LEN +
                                       ssl->transform_in->maclen );

            padding_idx *= correct;

            for( i = 0; i < 256; i++ )
 8089d3e:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
            {
                real_count &= ( i < padlen );
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 8089d42:	fb09 8805 	mla	r8, r9, r5, r8
            correct &= ( padding_idx <= MBEDTLS_SSL_MAX_CONTENT_LEN +
                                       ssl->transform_in->maclen );

            padding_idx *= correct;

            for( i = 0; i < 256; i++ )
 8089d46:	d1ec      	bne.n	8089d22 <mbedtls_ssl_read_record_layer+0x2ba>
                real_count &= ( i < padlen );
                pad_count += real_count *
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
            }

            correct &= ( pad_count == padlen ); /* Only 1 on correct padding */
 8089d48:	45c6      	cmp	lr, r8
 8089d4a:	bf14      	ite	ne
 8089d4c:	2500      	movne	r5, #0
 8089d4e:	f000 0501 	andeq.w	r5, r0, #1

#if defined(MBEDTLS_SSL_DEBUG_ALL)
            if( padlen > 0 && correct == 0 )
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad padding byte detected" ) );
#endif
            padlen &= correct * 0x1FF;
 8089d52:	ea4f 2a45 	mov.w	sl, r5, lsl #9
 8089d56:	ebc5 0a0a 	rsb	sl, r5, sl
 8089d5a:	ea0a 0a0e 	and.w	sl, sl, lr
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->in_msglen -= padlen;
 8089d5e:	ebca 0303 	rsb	r3, sl, r3
 8089d62:	6723      	str	r3, [r4, #112]	; 0x70
#if defined(SSL_SOME_MODES_USE_MAC)
    if( auth_done == 0 )
    {
        unsigned char mac_expect[MBEDTLS_SSL_MAC_ADD];

        ssl->in_msglen -= ssl->transform_in->maclen;
 8089d64:	694a      	ldr	r2, [r1, #20]
 8089d66:	1a9b      	subs	r3, r3, r2

        ssl->in_len[0] = (unsigned char)( ssl->in_msglen >> 8 );
 8089d68:	6de2      	ldr	r2, [r4, #92]	; 0x5c
#if defined(SSL_SOME_MODES_USE_MAC)
    if( auth_done == 0 )
    {
        unsigned char mac_expect[MBEDTLS_SSL_MAC_ADD];

        ssl->in_msglen -= ssl->transform_in->maclen;
 8089d6a:	6723      	str	r3, [r4, #112]	; 0x70

        ssl->in_len[0] = (unsigned char)( ssl->in_msglen >> 8 );
 8089d6c:	0a1b      	lsrs	r3, r3, #8
 8089d6e:	7013      	strb	r3, [r2, #0]
        ssl->in_len[1] = (unsigned char)( ssl->in_msglen      );
 8089d70:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8089d72:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8089d74:	705a      	strb	r2, [r3, #1]
        }
        else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
        defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 8089d76:	68e3      	ldr	r3, [r4, #12]
 8089d78:	2b00      	cmp	r3, #0
 8089d7a:	f340 809b 	ble.w	8089eb4 <mbedtls_ssl_read_record_layer+0x44c>
             * length, as we previously did in_msglen -= maclen too.
             */
            const size_t max_len = ssl->in_msglen + padlen;
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;

            switch( ssl->transform_in->ciphersuite_info->mac )
 8089d7e:	6b60      	ldr	r0, [r4, #52]	; 0x34
             * in_msglen -= padlen.
             *
             * Note that max_len + maclen is never more than the buffer
             * length, as we previously did in_msglen -= maclen too.
             */
            const size_t max_len = ssl->in_msglen + padlen;
 8089d80:	6f23      	ldr	r3, [r4, #112]	; 0x70
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;

            switch( ssl->transform_in->ciphersuite_info->mac )
 8089d82:	6802      	ldr	r2, [r0, #0]
             * in_msglen -= padlen.
             *
             * Note that max_len + maclen is never more than the buffer
             * length, as we previously did in_msglen -= maclen too.
             */
            const size_t max_len = ssl->in_msglen + padlen;
 8089d84:	eb0a 0903 	add.w	r9, sl, r3
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;

            switch( ssl->transform_in->ciphersuite_info->mac )
 8089d88:	7a52      	ldrb	r2, [r2, #9]
             *
             * Note that max_len + maclen is never more than the buffer
             * length, as we previously did in_msglen -= maclen too.
             */
            const size_t max_len = ssl->in_msglen + padlen;
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;
 8089d8a:	f5b9 7f80 	cmp.w	r9, #256	; 0x100

            switch( ssl->transform_in->ciphersuite_info->mac )
 8089d8e:	f1a2 0203 	sub.w	r2, r2, #3
             *
             * Note that max_len + maclen is never more than the buffer
             * length, as we previously did in_msglen -= maclen too.
             */
            const size_t max_len = ssl->in_msglen + padlen;
            const size_t min_len = ( max_len > 256 ) ? max_len - 256 : 0;
 8089d92:	bf88      	it	hi
 8089d94:	f5a9 7680 	subhi.w	r6, r9, #256	; 0x100

            switch( ssl->transform_in->ciphersuite_info->mac )
 8089d98:	2a04      	cmp	r2, #4
 8089d9a:	f200 808b 	bhi.w	8089eb4 <mbedtls_ssl_read_record_layer+0x44c>
 8089d9e:	e8df f002 	tbb	[pc, r2]
 8089da2:	0303      	.short	0x0303
 8089da4:	0389      	.short	0x0389
 8089da6:	0b          	.byte	0x0b
 8089da7:	00          	.byte	0x00
                case MBEDTLS_MD_MD5:
                case MBEDTLS_MD_SHA1:
                case MBEDTLS_MD_SHA256:
                    /* 8 bytes of message size, 64-byte compression blocks */
                    extra_run = ( 13 + ssl->in_msglen + padlen + 8 ) / 64 -
                                ( 13 + ssl->in_msglen          + 8 ) / 64;
 8089da8:	f103 0215 	add.w	r2, r3, #21
 8089dac:	f109 0115 	add.w	r1, r9, #21
 8089db0:	0992      	lsrs	r2, r2, #6
 8089db2:	ebc2 1391 	rsb	r3, r2, r1, lsr #6
 8089db6:	e006      	b.n	8089dc6 <mbedtls_ssl_read_record_layer+0x35e>
#endif
#if defined(MBEDTLS_SHA512_C)
                case MBEDTLS_MD_SHA384:
                    /* 16 bytes of message size, 128-byte compression blocks */
                    extra_run = ( 13 + ssl->in_msglen + padlen + 16 ) / 128 -
                                ( 13 + ssl->in_msglen          + 16 ) / 128;
 8089db8:	f103 021d 	add.w	r2, r3, #29
 8089dbc:	f109 011d 	add.w	r1, r9, #29
 8089dc0:	09d2      	lsrs	r2, r2, #7
 8089dc2:	ebc2 13d1 	rsb	r3, r2, r1, lsr #7
                default:
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
            }

            extra_run &= correct * 0xFF;
 8089dc6:	ea4f 2805 	mov.w	r8, r5, lsl #8

            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 8089dca:	2208      	movs	r2, #8
 8089dcc:	6d61      	ldr	r1, [r4, #84]	; 0x54
                default:
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
            }

            extra_run &= correct * 0xFF;
 8089dce:	ebc5 0808 	rsb	r8, r5, r8

            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 8089dd2:	3044      	adds	r0, #68	; 0x44
                default:
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
            }

            extra_run &= correct * 0xFF;
 8089dd4:	ea08 0803 	and.w	r8, r8, r3

            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 8089dd8:	f7fd fce0 	bl	808779c <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_hdr, 3 );
 8089ddc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8089dde:	2203      	movs	r2, #3
 8089de0:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8089de2:	3044      	adds	r0, #68	; 0x44
 8089de4:	f7fd fcda 	bl	808779c <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_len, 2 );
 8089de8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8089dea:	2202      	movs	r2, #2
 8089dec:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8089dee:	3044      	adds	r0, #68	; 0x44
 8089df0:	f7fd fcd4 	bl	808779c <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_msg,
 8089df4:	6b60      	ldr	r0, [r4, #52]	; 0x34
                             ssl->in_msglen );
 8089df6:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8089df8:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8089dfa:	3044      	adds	r0, #68	; 0x44
 8089dfc:	f7fd fcce 	bl	808779c <mbedtls_md_hmac_update>
            /* Make sure we access everything even when padlen > 0. This
             * makes the synchronisation requirements for just-in-time
             * Prime+Probe attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + ssl->in_msglen, padlen );
 8089e00:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8089e02:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8089e04:	4413      	add	r3, r2
 8089e06:	449a      	add	sl, r3
      defined(MBEDTLS_SSL_PROTO_TLS1_2) )
/* This function makes sure every byte in the memory region is accessed
 * (in ascending addresses order) */
static void ssl_read_memory( unsigned char *p, size_t len )
{
    unsigned char acc = 0;
 8089e08:	2200      	movs	r2, #0
    volatile unsigned char force;

    for( ; len != 0; p++, len-- )
 8089e0a:	4553      	cmp	r3, sl
 8089e0c:	d003      	beq.n	8089e16 <mbedtls_ssl_read_record_layer+0x3ae>
        acc ^= *p;
 8089e0e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8089e12:	404a      	eors	r2, r1
 8089e14:	e7f9      	b.n	8089e0a <mbedtls_ssl_read_record_layer+0x3a2>
                             ssl->in_msglen );
            /* Make sure we access everything even when padlen > 0. This
             * makes the synchronisation requirements for just-in-time
             * Prime+Probe attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + ssl->in_msglen, padlen );
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );
 8089e16:	6b60      	ldr	r0, [r4, #52]	; 0x34
    volatile unsigned char force;

    for( ; len != 0; p++, len-- )
        acc ^= *p;

    force = acc;
 8089e18:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                             ssl->in_msglen );
            /* Make sure we access everything even when padlen > 0. This
             * makes the synchronisation requirements for just-in-time
             * Prime+Probe attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + ssl->in_msglen, padlen );
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );
 8089e1c:	4639      	mov	r1, r7
 8089e1e:	3044      	adds	r0, #68	; 0x44

    for( ; len != 0; p++, len-- )
        acc ^= *p;

    force = acc;
    (void) force;
 8089e20:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
                             ssl->in_msglen );
            /* Make sure we access everything even when padlen > 0. This
             * makes the synchronisation requirements for just-in-time
             * Prime+Probe attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + ssl->in_msglen, padlen );
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );
 8089e24:	f7fd fcca 	bl	80877bc <mbedtls_md_hmac_finish>

            /* Call mbedtls_md_process at least once due to cache attacks
             * that observe whether md_process() was called of not */
            for( j = 0; j < extra_run + 1; j++ )
 8089e28:	f04f 0a00 	mov.w	sl, #0
 8089e2c:	f108 0801 	add.w	r8, r8, #1
 8089e30:	45d0      	cmp	r8, sl
 8089e32:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8089e34:	d906      	bls.n	8089e44 <mbedtls_ssl_read_record_layer+0x3dc>
                mbedtls_md_process( &ssl->transform_in->md_ctx_dec, ssl->in_msg );
 8089e36:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8089e38:	3044      	adds	r0, #68	; 0x44
 8089e3a:	f7fd fd07 	bl	808784c <mbedtls_md_process>
            ssl_read_memory( ssl->in_msg + ssl->in_msglen, padlen );
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec, mac_expect );

            /* Call mbedtls_md_process at least once due to cache attacks
             * that observe whether md_process() was called of not */
            for( j = 0; j < extra_run + 1; j++ )
 8089e3e:	f10a 0a01 	add.w	sl, sl, #1
 8089e42:	e7f5      	b.n	8089e30 <mbedtls_ssl_read_record_layer+0x3c8>
                mbedtls_md_process( &ssl->transform_in->md_ctx_dec, ssl->in_msg );

            mbedtls_md_hmac_reset( &ssl->transform_in->md_ctx_dec );
 8089e44:	3044      	adds	r0, #68	; 0x44
 8089e46:	f7fd fce9 	bl	808781c <mbedtls_md_hmac_reset>
            /* Make sure we access all the memory that could contain the MAC,
             * before we check it in the next code block. This makes the
             * synchronisation requirements for just-in-time Prime+Probe
             * attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + min_len,
                                 max_len - min_len + ssl->transform_in->maclen );
 8089e4a:	6b63      	ldr	r3, [r4, #52]	; 0x34

            /* Make sure we access all the memory that could contain the MAC,
             * before we check it in the next code block. This makes the
             * synchronisation requirements for just-in-time Prime+Probe
             * attacks much tighter and hopefully impractical. */
            ssl_read_memory( ssl->in_msg + min_len,
 8089e4c:	6e61      	ldr	r1, [r4, #100]	; 0x64
                                 max_len - min_len + ssl->transform_in->maclen );
 8089e4e:	6958      	ldr	r0, [r3, #20]
 8089e50:	440e      	add	r6, r1
 8089e52:	4481      	add	r9, r0
 8089e54:	4489      	add	r9, r1
      defined(MBEDTLS_SSL_PROTO_TLS1_2) )
/* This function makes sure every byte in the memory region is accessed
 * (in ascending addresses order) */
static void ssl_read_memory( unsigned char *p, size_t len )
{
    unsigned char acc = 0;
 8089e56:	2300      	movs	r3, #0
    volatile unsigned char force;

    for( ; len != 0; p++, len-- )
 8089e58:	454e      	cmp	r6, r9
 8089e5a:	d003      	beq.n	8089e64 <mbedtls_ssl_read_record_layer+0x3fc>
        acc ^= *p;
 8089e5c:	f816 2b01 	ldrb.w	r2, [r6], #1
 8089e60:	4053      	eors	r3, r2
 8089e62:	e7f9      	b.n	8089e58 <mbedtls_ssl_read_record_layer+0x3f0>

    force = acc;
 8089e64:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    (void) force;
 8089e68:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
        MBEDTLS_SSL_DEBUG_BUF( 4, "expected mac", mac_expect, ssl->transform_in->maclen );
        MBEDTLS_SSL_DEBUG_BUF( 4, "message  mac", ssl->in_msg + ssl->in_msglen,
                               ssl->transform_in->maclen );
#endif

        if( mbedtls_ssl_safer_memcmp( ssl->in_msg + ssl->in_msglen, mac_expect,
 8089e6c:	f8d4 c070 	ldr.w	ip, [r4, #112]	; 0x70
static inline int mbedtls_ssl_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;
 8089e70:	2300      	movs	r3, #0
 8089e72:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23

    for( i = 0; i < n; i++ )
 8089e76:	4298      	cmp	r0, r3
 8089e78:	f43f aec4 	beq.w	8089c04 <mbedtls_ssl_read_record_layer+0x19c>
 8089e7c:	eb0c 0203 	add.w	r2, ip, r3
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
 8089e80:	5c8a      	ldrb	r2, [r1, r2]
 8089e82:	5cfe      	ldrb	r6, [r7, r3]
        diff |= x ^ y;
 8089e84:	f89d e023 	ldrb.w	lr, [sp, #35]	; 0x23
 8089e88:	4072      	eors	r2, r6
 8089e8a:	ea4e 0202 	orr.w	r2, lr, r2
 8089e8e:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 8089e92:	3301      	adds	r3, #1
 8089e94:	e7ef      	b.n	8089e76 <mbedtls_ssl_read_record_layer+0x40e>

        /*
         * Finally check the correct flag
         */
        if( correct == 0 )
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 8089e96:	480b      	ldr	r0, [pc, #44]	; (8089ec4 <mbedtls_ssl_read_record_layer+0x45c>)
 8089e98:	e011      	b.n	8089ebe <mbedtls_ssl_read_record_layer+0x456>

    if( ssl->in_msglen == 0 )
    {
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3
            && ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
 8089e9a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8089e9c:	2b17      	cmp	r3, #23
 8089e9e:	f43f aec1 	beq.w	8089c24 <mbedtls_ssl_read_record_layer+0x1bc>
 8089ea2:	e009      	b.n	8089eb8 <mbedtls_ssl_read_record_layer+0x450>
                                "messages, possible DoS attack" ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
    }
    else
        ssl->nb_zero = 0;
 8089ea4:	2300      	movs	r3, #0
 8089ea6:	67e3      	str	r3, [r4, #124]	; 0x7c
 8089ea8:	e6c2      	b.n	8089c30 <mbedtls_ssl_read_record_layer+0x1c8>
        ; /* in_ctr read from peer, not maintained internally */
    }
    else
#endif
    {
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
 8089eaa:	2a00      	cmp	r2, #0
 8089eac:	f47f aec1 	bne.w	8089c32 <mbedtls_ssl_read_record_layer+0x1ca>

        /* The loop goes to its end iff the counter is wrapping */
        if( i == ssl_ep_len( ssl ) )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "incoming message counter would wrap" ) );
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 8089eb0:	4805      	ldr	r0, [pc, #20]	; (8089ec8 <mbedtls_ssl_read_record_layer+0x460>)
 8089eb2:	e004      	b.n	8089ebe <mbedtls_ssl_read_record_layer+0x456>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );

    if( ssl->session_in == NULL || ssl->transform_in == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 8089eb4:	4805      	ldr	r0, [pc, #20]	; (8089ecc <mbedtls_ssl_read_record_layer+0x464>)
 8089eb6:	e002      	b.n	8089ebe <mbedtls_ssl_read_record_layer+0x456>
                       ssl->in_msg, ssl->in_msglen );

        if( ssl->in_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 8089eb8:	4805      	ldr	r0, [pc, #20]	; (8089ed0 <mbedtls_ssl_read_record_layer+0x468>)
 8089eba:	e000      	b.n	8089ebe <mbedtls_ssl_read_record_layer+0x456>
            ssl_handshake_wrapup_free_hs_transform( ssl );
        }
    }
#endif

    return( 0 );
 8089ebc:	2000      	movs	r0, #0
}
 8089ebe:	b016      	add	sp, #88	; 0x58
 8089ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8089ec4:	ffff8e80 	.word	0xffff8e80
 8089ec8:	ffff9480 	.word	0xffff9480
 8089ecc:	ffff9400 	.word	0xffff9400
 8089ed0:	ffff8e00 	.word	0xffff8e00

08089ed4 <mbedtls_ssl_read_record>:
 * Silently ignore non-fatal alert (and for DTLS, invalid records as well,
 * RFC 6347 4.1.2.7) and continue reading until a valid record is found.
 *
 */
int mbedtls_ssl_read_record( mbedtls_ssl_context *ssl )
{
 8089ed4:	b538      	push	{r3, r4, r5, lr}
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );

    if( ssl->keep_current_message == 0 )
 8089ed6:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
 * Silently ignore non-fatal alert (and for DTLS, invalid records as well,
 * RFC 6347 4.1.2.7) and continue reading until a valid record is found.
 *
 */
int mbedtls_ssl_read_record( mbedtls_ssl_context *ssl )
{
 8089eda:	4605      	mov	r5, r0
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );

    if( ssl->keep_current_message == 0 )
 8089edc:	b98c      	cbnz	r4, 8089f02 <mbedtls_ssl_read_record+0x2e>
    {
        do {

            if( ( ret = mbedtls_ssl_read_record_layer( ssl ) ) != 0 )
 8089ede:	4628      	mov	r0, r5
 8089ee0:	f7ff fdc2 	bl	8089a68 <mbedtls_ssl_read_record_layer>
 8089ee4:	b988      	cbnz	r0, 8089f0a <mbedtls_ssl_read_record+0x36>
            {
                MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
                return( ret );
            }

            ret = mbedtls_ssl_handle_message_type( ssl );
 8089ee6:	4628      	mov	r0, r5
 8089ee8:	f7ff fd76 	bl	80899d8 <mbedtls_ssl_handle_message_type>

        } while( MBEDTLS_ERR_SSL_NON_FATAL == ret );
 8089eec:	f510 4fcd 	cmn.w	r0, #26240	; 0x6680
 8089ef0:	d0f5      	beq.n	8089ede <mbedtls_ssl_read_record+0xa>

        if( 0 != ret )
 8089ef2:	b950      	cbnz	r0, 8089f0a <mbedtls_ssl_read_record+0x36>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
            return( ret );
        }

        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 8089ef4:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8089ef6:	2b16      	cmp	r3, #22
 8089ef8:	d108      	bne.n	8089f0c <mbedtls_ssl_read_record+0x38>
        {
            mbedtls_ssl_update_handshake_status( ssl );
 8089efa:	4628      	mov	r0, r5
 8089efc:	f7ff fd5c 	bl	80899b8 <mbedtls_ssl_update_handshake_status>
 8089f00:	e004      	b.n	8089f0c <mbedtls_ssl_read_record+0x38>
        }
    }
    else
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= reuse previously read message" ) );
        ssl->keep_current_message = 0;
 8089f02:	2400      	movs	r4, #0
 8089f04:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
 8089f08:	e000      	b.n	8089f0c <mbedtls_ssl_read_record+0x38>
 8089f0a:	4604      	mov	r4, r0
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read record" ) );

    return( 0 );
}
 8089f0c:	4620      	mov	r0, r4
 8089f0e:	bd38      	pop	{r3, r4, r5, pc}

08089f10 <mbedtls_ssl_write_certificate>:

#else
/* Some certificate support -> implement write and parse */

int mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl )
{
 8089f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_x509_crt *crt;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 8089f12:	6c03      	ldr	r3, [r0, #64]	; 0x40

#else
/* Some certificate support -> implement write and parse */

int mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl )
{
 8089f14:	4604      	mov	r4, r0
    const mbedtls_x509_crt *crt;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 8089f16:	681b      	ldr	r3, [r3, #0]
 8089f18:	7a9a      	ldrb	r2, [r3, #10]
 8089f1a:	2a0b      	cmp	r2, #11
 8089f1c:	d809      	bhi.n	8089f32 <mbedtls_ssl_write_certificate+0x22>
 8089f1e:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8089f22:	40d3      	lsrs	r3, r2
 8089f24:	07da      	lsls	r2, r3, #31
 8089f26:	d504      	bpl.n	8089f32 <mbedtls_ssl_write_certificate+0x22>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
        ssl->state++;
 8089f28:	6863      	ldr	r3, [r4, #4]
        return( 0 );
 8089f2a:	2000      	movs	r0, #0
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
        ssl->state++;
 8089f2c:	3301      	adds	r3, #1
 8089f2e:	6063      	str	r3, [r4, #4]
        return( 0 );
 8089f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 8089f32:	6822      	ldr	r2, [r4, #0]
 8089f34:	f892 3060 	ldrb.w	r3, [r2, #96]	; 0x60
 8089f38:	07db      	lsls	r3, r3, #31
 8089f3a:	d403      	bmi.n	8089f44 <mbedtls_ssl_write_certificate+0x34>
    {
        if( ssl->client_auth == 0 )
 8089f3c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8089f40:	2b00      	cmp	r3, #0
 8089f42:	d0f1      	beq.n	8089f28 <mbedtls_ssl_write_certificate+0x18>

static inline mbedtls_x509_crt *mbedtls_ssl_own_cert( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 8089f44:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8089f46:	b10b      	cbz	r3, 8089f4c <mbedtls_ssl_write_certificate+0x3c>
 8089f48:	685b      	ldr	r3, [r3, #4]
 8089f4a:	b90b      	cbnz	r3, 8089f50 <mbedtls_ssl_write_certificate+0x40>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
 8089f4c:	6c93      	ldr	r3, [r2, #72]	; 0x48

    return( key_cert == NULL ? NULL : key_cert->cert );
 8089f4e:	b30b      	cbz	r3, 8089f94 <mbedtls_ssl_write_certificate+0x84>
 8089f50:	681e      	ldr	r6, [r3, #0]
 8089f52:	2307      	movs	r3, #7
     *    n+3 . ...   upper level cert, etc.
     */
    i = 7;
    crt = mbedtls_ssl_own_cert( ssl );

    while( crt != NULL )
 8089f54:	b1fe      	cbz	r6, 8089f96 <mbedtls_ssl_write_certificate+0x86>
    {
        n = crt->raw.len;
 8089f56:	6875      	ldr	r5, [r6, #4]
        if( n > MBEDTLS_SSL_MAX_CONTENT_LEN - 3 - i )
 8089f58:	f5c3 52ff 	rsb	r2, r3, #8160	; 0x1fe0
 8089f5c:	321d      	adds	r2, #29
 8089f5e:	4295      	cmp	r5, r2
 8089f60:	d836      	bhi.n	8089fd0 <mbedtls_ssl_write_certificate+0xc0>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
                           i + 3 + n, MBEDTLS_SSL_MAX_CONTENT_LEN ) );
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
        }

        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
 8089f62:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8089f66:	0c29      	lsrs	r1, r5, #16
 8089f68:	54d1      	strb	r1, [r2, r3]
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
 8089f6a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8089f6e:	0a29      	lsrs	r1, r5, #8
 8089f70:	441a      	add	r2, r3
 8089f72:	7051      	strb	r1, [r2, #1]
        ssl->out_msg[i + 2] = (unsigned char)( n       );
 8089f74:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
 8089f78:	1cdf      	adds	r7, r3, #3
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
        }

        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
        ssl->out_msg[i + 2] = (unsigned char)( n       );
 8089f7a:	441a      	add	r2, r3
 8089f7c:	7095      	strb	r5, [r2, #2]

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
 8089f7e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8089f82:	68b1      	ldr	r1, [r6, #8]
 8089f84:	462a      	mov	r2, r5
 8089f86:	4438      	add	r0, r7
 8089f88:	f009 ffeb 	bl	8093f62 <memcpy>
        i += n; crt = crt->next;
 8089f8c:	19eb      	adds	r3, r5, r7
 8089f8e:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
     *    n+3 . ...   upper level cert, etc.
     */
    i = 7;
    crt = mbedtls_ssl_own_cert( ssl );

    while( crt != NULL )
 8089f92:	e7df      	b.n	8089f54 <mbedtls_ssl_write_certificate+0x44>
 8089f94:	2307      	movs	r3, #7

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
        i += n; crt = crt->next;
    }

    ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );
 8089f96:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8089f9a:	1fda      	subs	r2, r3, #7
 8089f9c:	0c10      	lsrs	r0, r2, #16
 8089f9e:	7108      	strb	r0, [r1, #4]
    ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );
 8089fa0:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8089fa4:	0a10      	lsrs	r0, r2, #8
 8089fa6:	7148      	strb	r0, [r1, #5]
    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
 8089fa8:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
write_msg:
#endif

    ssl->state++;

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 8089fac:	4620      	mov	r0, r4
        i += n; crt = crt->next;
    }

    ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );
    ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );
    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
 8089fae:	718a      	strb	r2, [r1, #6]

    ssl->out_msglen  = i;
 8089fb0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 8089fb4:	2316      	movs	r3, #22
 8089fb6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE;
 8089fba:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8089fbe:	220b      	movs	r2, #11
 8089fc0:	701a      	strb	r2, [r3, #0]

#if defined(MBEDTLS_SSL_PROTO_SSL3) && defined(MBEDTLS_SSL_CLI_C)
write_msg:
#endif

    ssl->state++;
 8089fc2:	6863      	ldr	r3, [r4, #4]
 8089fc4:	3301      	adds	r3, #1
 8089fc6:	6063      	str	r3, [r4, #4]
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );

    return( ret );
}
 8089fc8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
write_msg:
#endif

    ssl->state++;

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 8089fcc:	f7ff bb80 	b.w	80896d0 <mbedtls_ssl_write_record>
        n = crt->raw.len;
        if( n > MBEDTLS_SSL_MAX_CONTENT_LEN - 3 - i )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
                           i + 3 + n, MBEDTLS_SSL_MAX_CONTENT_LEN ) );
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
 8089fd0:	4800      	ldr	r0, [pc, #0]	; (8089fd4 <mbedtls_ssl_write_certificate+0xc4>)
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );

    return( ret );
}
 8089fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8089fd4:	ffff8b00 	.word	0xffff8b00

08089fd8 <mbedtls_ssl_write_change_cipher_spec>:
{
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );

    ssl->out_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;
 8089fd8:	2214      	movs	r2, #20
    ssl->out_msglen  = 1;
    ssl->out_msg[0]  = 1;
 8089fda:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
{
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );

    ssl->out_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;
 8089fde:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
    ssl->out_msglen  = 1;
 8089fe2:	2201      	movs	r2, #1
 8089fe4:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
    ssl->out_msg[0]  = 1;
 8089fe8:	700a      	strb	r2, [r1, #0]

    ssl->state++;
 8089fea:	6842      	ldr	r2, [r0, #4]
 8089fec:	3201      	adds	r2, #1
 8089fee:	6042      	str	r2, [r0, #4]

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 8089ff0:	f7ff bb6e 	b.w	80896d0 <mbedtls_ssl_write_record>

08089ff4 <mbedtls_ssl_parse_change_cipher_spec>:

    return( 0 );
}

int mbedtls_ssl_parse_change_cipher_spec( mbedtls_ssl_context *ssl )
{
 8089ff4:	b510      	push	{r4, lr}
 8089ff6:	4604      	mov	r4, r0
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse change cipher spec" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 8089ff8:	f7ff ff6c 	bl	8089ed4 <mbedtls_ssl_read_record>
 8089ffc:	2800      	cmp	r0, #0
 8089ffe:	d12f      	bne.n	808a060 <mbedtls_ssl_parse_change_cipher_spec+0x6c>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
 808a000:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808a002:	2b14      	cmp	r3, #20
 808a004:	d006      	beq.n	808a014 <mbedtls_ssl_parse_change_cipher_spec+0x20>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 808a006:	220a      	movs	r2, #10
 808a008:	2102      	movs	r1, #2
 808a00a:	4620      	mov	r0, r4
 808a00c:	f7ff fd14 	bl	8089a38 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 808a010:	4814      	ldr	r0, [pc, #80]	; (808a064 <mbedtls_ssl_parse_change_cipher_spec+0x70>)
 808a012:	bd10      	pop	{r4, pc}
    }

    if( ssl->in_msglen != 1 || ssl->in_msg[0] != 1 )
 808a014:	6f23      	ldr	r3, [r4, #112]	; 0x70
 808a016:	2b01      	cmp	r3, #1
 808a018:	d103      	bne.n	808a022 <mbedtls_ssl_parse_change_cipher_spec+0x2e>
 808a01a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 808a01c:	781b      	ldrb	r3, [r3, #0]
 808a01e:	2b01      	cmp	r3, #1
 808a020:	d006      	beq.n	808a030 <mbedtls_ssl_parse_change_cipher_spec+0x3c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 808a022:	2232      	movs	r2, #50	; 0x32
 808a024:	2102      	movs	r1, #2
 808a026:	4620      	mov	r0, r4
 808a028:	f7ff fd06 	bl	8089a38 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC );
 808a02c:	480e      	ldr	r0, [pc, #56]	; (808a068 <mbedtls_ssl_parse_change_cipher_spec+0x74>)
 808a02e:	bd10      	pop	{r4, pc}
    /*
     * Switch to our negotiated transform and session parameters for inbound
     * data.
     */
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for inbound data" ) );
    ssl->transform_in = ssl->transform_negotiate;
 808a030:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808a032:	6363      	str	r3, [r4, #52]	; 0x34
    ssl->session_in = ssl->session_negotiate;
 808a034:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 808a036:	6223      	str	r3, [r4, #32]
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
        }
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->in_ctr, 0, 8 );
 808a038:	6d63      	ldr	r3, [r4, #84]	; 0x54
 808a03a:	6018      	str	r0, [r3, #0]
 808a03c:	6058      	str	r0, [r3, #4]

    /*
     * Set the in_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 808a03e:	68e3      	ldr	r3, [r4, #12]
 808a040:	6e21      	ldr	r1, [r4, #96]	; 0x60
 808a042:	2b01      	cmp	r3, #1
    {
        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
 808a044:	bfc9      	itett	gt
 808a046:	6c23      	ldrgt	r3, [r4, #64]	; 0x40
                      ssl->transform_negotiate->fixed_ivlen;
    }
    else
        ssl->in_msg = ssl->in_iv;
 808a048:	6661      	strle	r1, [r4, #100]	; 0x64
     * Set the in_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
                      ssl->transform_negotiate->fixed_ivlen;
 808a04a:	68da      	ldrgt	r2, [r3, #12]
 808a04c:	691b      	ldrgt	r3, [r3, #16]

    ssl->state++;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );

    return( 0 );
 808a04e:	f04f 0000 	mov.w	r0, #0
     * Set the in_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
                      ssl->transform_negotiate->fixed_ivlen;
 808a052:	bfc2      	ittt	gt
 808a054:	1ad3      	subgt	r3, r2, r3
 808a056:	185b      	addgt	r3, r3, r1
 808a058:	6663      	strgt	r3, [r4, #100]	; 0x64
            return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );
        }
    }
#endif

    ssl->state++;
 808a05a:	6863      	ldr	r3, [r4, #4]
 808a05c:	3301      	adds	r3, #1
 808a05e:	6063      	str	r3, [r4, #4]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );

    return( 0 );
}
 808a060:	bd10      	pop	{r4, pc}
 808a062:	bf00      	nop
 808a064:	ffff8900 	.word	0xffff8900
 808a068:	ffff8200 	.word	0xffff8200

0808a06c <mbedtls_ssl_optimize_checksum>:
        ssl->handshake->update_checksum = ssl_update_checksum_md5sha1;
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
 808a06c:	7a4b      	ldrb	r3, [r1, #9]
 808a06e:	2b07      	cmp	r3, #7
        ssl->handshake->update_checksum = ssl_update_checksum_sha384;
 808a070:	bf08      	it	eq
 808a072:	4a03      	ldreq	r2, [pc, #12]	; (808a080 <mbedtls_ssl_optimize_checksum+0x14>)
 808a074:	6b03      	ldr	r3, [r0, #48]	; 0x30
    else
#endif
#if defined(MBEDTLS_SHA256_C)
    if( ciphersuite_info->mac != MBEDTLS_MD_SHA384 )
        ssl->handshake->update_checksum = ssl_update_checksum_sha256;
 808a076:	bf18      	it	ne
 808a078:	4a02      	ldrne	r2, [pc, #8]	; (808a084 <mbedtls_ssl_optimize_checksum+0x18>)
 808a07a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
 808a07e:	4770      	bx	lr
 808a080:	080892d1 	.word	0x080892d1
 808a084:	080892c9 	.word	0x080892c9

0808a088 <mbedtls_ssl_write_finished>:

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup" ) );
}

int mbedtls_ssl_write_finished( mbedtls_ssl_context *ssl )
{
 808a088:	b510      	push	{r4, lr}
 808a08a:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write finished" ) );

    /*
     * Set the out_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 808a08c:	68c3      	ldr	r3, [r0, #12]
 808a08e:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94
 808a092:	2b01      	cmp	r3, #1
    {
        ssl->out_msg = ssl->out_iv + ssl->transform_negotiate->ivlen -
 808a094:	bfc9      	itett	gt
 808a096:	6c03      	ldrgt	r3, [r0, #64]	; 0x40
                       ssl->transform_negotiate->fixed_ivlen;
    }
    else
        ssl->out_msg = ssl->out_iv;
 808a098:	f8c0 1098 	strle.w	r1, [r0, #152]	; 0x98
     * Set the out_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->out_msg = ssl->out_iv + ssl->transform_negotiate->ivlen -
                       ssl->transform_negotiate->fixed_ivlen;
 808a09c:	68da      	ldrgt	r2, [r3, #12]
 808a09e:	691b      	ldrgt	r3, [r3, #16]
 808a0a0:	bfc2      	ittt	gt
 808a0a2:	1ad3      	subgt	r3, r2, r3
 808a0a4:	185b      	addgt	r3, r3, r1
 808a0a6:	f8c0 3098 	strgt.w	r3, [r0, #152]	; 0x98
    }
    else
        ssl->out_msg = ssl->out_iv;

    ssl->handshake->calc_finished( ssl, ssl->out_msg + 4, ssl->conf->endpoint );
 808a0aa:	6803      	ldr	r3, [r0, #0]
 808a0ac:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
 808a0b0:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 808a0b4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 808a0b6:	f002 0201 	and.w	r2, r2, #1
 808a0ba:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 808a0be:	3104      	adds	r1, #4
 808a0c0:	4798      	blx	r3
     * RFC 5246 7.4.9 (Page 63) says 12 is the default length and ciphersuites
     * may define some other value. Currently (early 2016), no defined
     * ciphersuite does this (and this is unlikely to change as activity has
     * moved to TLS 1.3 now) so we can keep the hardcoded 12 here.
     */
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
 808a0c2:	68e3      	ldr	r3, [r4, #12]
    memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );
#endif

    ssl->out_msglen  = 4 + hash_len;
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
 808a0c4:	2214      	movs	r2, #20
     * RFC 5246 7.4.9 (Page 63) says 12 is the default length and ciphersuites
     * may define some other value. Currently (early 2016), no defined
     * ciphersuite does this (and this is unlikely to change as activity has
     * moved to TLS 1.3 now) so we can keep the hardcoded 12 here.
     */
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
 808a0c6:	2b00      	cmp	r3, #0
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    ssl->verify_data_len = hash_len;
    memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );
#endif

    ssl->out_msglen  = 4 + hash_len;
 808a0c8:	bf14      	ite	ne
 808a0ca:	2310      	movne	r3, #16
 808a0cc:	2328      	moveq	r3, #40	; 0x28
 808a0ce:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 808a0d2:	2316      	movs	r3, #22
 808a0d4:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
 808a0d8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 808a0dc:	701a      	strb	r2, [r3, #0]

    /*
     * In case of session resuming, invert the client and server
     * ChangeCipherSpec messages order.
     */
    if( ssl->handshake->resume != 0 )
 808a0de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808a0e0:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 808a0e4:	b133      	cbz	r3, 808a0f4 <mbedtls_ssl_write_finished+0x6c>
    {
#if defined(MBEDTLS_SSL_CLI_C)
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 808a0e6:	6823      	ldr	r3, [r4, #0]
 808a0e8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 808a0ec:	07db      	lsls	r3, r3, #31
 808a0ee:	d404      	bmi.n	808a0fa <mbedtls_ssl_write_finished+0x72>
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 808a0f0:	230f      	movs	r3, #15
 808a0f2:	e001      	b.n	808a0f8 <mbedtls_ssl_write_finished+0x70>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
#endif
    }
    else
        ssl->state++;
 808a0f4:	6863      	ldr	r3, [r4, #4]
 808a0f6:	3301      	adds	r3, #1
 808a0f8:	6063      	str	r3, [r4, #4]
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
        }
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->out_ctr, 0, 8 );
 808a0fa:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 808a0fe:	2200      	movs	r2, #0
 808a100:	601a      	str	r2, [r3, #0]
 808a102:	605a      	str	r2, [r3, #4]

    ssl->transform_out = ssl->transform_negotiate;
 808a104:	6c23      	ldr	r3, [r4, #64]	; 0x40
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        mbedtls_ssl_send_flight_completed( ssl );
#endif

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 808a106:	4620      	mov	r0, r4
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->out_ctr, 0, 8 );

    ssl->transform_out = ssl->transform_negotiate;
 808a108:	63a3      	str	r3, [r4, #56]	; 0x38
    ssl->session_out = ssl->session_negotiate;
 808a10a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 808a10c:	6263      	str	r3, [r4, #36]	; 0x24
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write finished" ) );

    return( 0 );
}
 808a10e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        mbedtls_ssl_send_flight_completed( ssl );
#endif

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 808a112:	f7ff badd 	b.w	80896d0 <mbedtls_ssl_write_record>
	...

0808a118 <mbedtls_ssl_parse_finished>:
#else
#define SSL_MAX_HASH_LEN 12
#endif

int mbedtls_ssl_parse_finished( mbedtls_ssl_context *ssl )
{
 808a118:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    unsigned int hash_len;
    unsigned char buf[SSL_MAX_HASH_LEN];

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );

    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
 808a11a:	6803      	ldr	r3, [r0, #0]
#else
#define SSL_MAX_HASH_LEN 12
#endif

int mbedtls_ssl_parse_finished( mbedtls_ssl_context *ssl )
{
 808a11c:	4604      	mov	r4, r0
    unsigned int hash_len;
    unsigned char buf[SSL_MAX_HASH_LEN];

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );

    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
 808a11e:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 808a122:	6b03      	ldr	r3, [r0, #48]	; 0x30
 808a124:	43d2      	mvns	r2, r2
 808a126:	ad01      	add	r5, sp, #4
 808a128:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 808a12c:	f002 0201 	and.w	r2, r2, #1
 808a130:	4629      	mov	r1, r5
 808a132:	4798      	blx	r3

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808a134:	4620      	mov	r0, r4
 808a136:	f7ff fecd 	bl	8089ed4 <mbedtls_ssl_read_record>
 808a13a:	2800      	cmp	r0, #0
 808a13c:	d13b      	bne.n	808a1b6 <mbedtls_ssl_parse_finished+0x9e>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 808a13e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808a140:	2b16      	cmp	r3, #22
 808a142:	d006      	beq.n	808a152 <mbedtls_ssl_parse_finished+0x3a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 808a144:	220a      	movs	r2, #10
 808a146:	2102      	movs	r1, #2
 808a148:	4620      	mov	r0, r4
 808a14a:	f7ff fc75 	bl	8089a38 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 808a14e:	481b      	ldr	r0, [pc, #108]	; (808a1bc <mbedtls_ssl_parse_finished+0xa4>)
 808a150:	e031      	b.n	808a1b6 <mbedtls_ssl_parse_finished+0x9e>
        hash_len = 36;
    else
#endif
        hash_len = 12;

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_FINISHED ||
 808a152:	6e61      	ldr	r1, [r4, #100]	; 0x64
 808a154:	780b      	ldrb	r3, [r1, #0]
 808a156:	2b14      	cmp	r3, #20
 808a158:	d115      	bne.n	808a186 <mbedtls_ssl_parse_finished+0x6e>
 808a15a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 808a15c:	2b10      	cmp	r3, #16
 808a15e:	d112      	bne.n	808a186 <mbedtls_ssl_parse_finished+0x6e>
static inline int mbedtls_ssl_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;
 808a160:	f88d 0003 	strb.w	r0, [sp, #3]
 808a164:	1d03      	adds	r3, r0, #4
    for( i = 0; i < n; i++ )
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
 808a166:	5ccb      	ldrb	r3, [r1, r3]
 808a168:	5c2a      	ldrb	r2, [r5, r0]
        diff |= x ^ y;
 808a16a:	f89d 6003 	ldrb.w	r6, [sp, #3]
 808a16e:	4053      	eors	r3, r2
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 808a170:	3001      	adds	r0, #1
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
 808a172:	4333      	orrs	r3, r6
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 808a174:	280c      	cmp	r0, #12
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
 808a176:	f88d 3003 	strb.w	r3, [sp, #3]
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 808a17a:	d1f3      	bne.n	808a164 <mbedtls_ssl_parse_finished+0x4c>
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
    }

    return( diff );
 808a17c:	f89d 3003 	ldrb.w	r3, [sp, #3]
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
    }

    if( mbedtls_ssl_safer_memcmp( ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl ),
 808a180:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 808a184:	b133      	cbz	r3, 808a194 <mbedtls_ssl_parse_finished+0x7c>
                      buf, hash_len ) != 0 )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 808a186:	2232      	movs	r2, #50	; 0x32
 808a188:	2102      	movs	r1, #2
 808a18a:	4620      	mov	r0, r4
 808a18c:	f7ff fc54 	bl	8089a38 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
 808a190:	480b      	ldr	r0, [pc, #44]	; (808a1c0 <mbedtls_ssl_parse_finished+0xa8>)
 808a192:	e010      	b.n	808a1b6 <mbedtls_ssl_parse_finished+0x9e>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    ssl->verify_data_len = hash_len;
    memcpy( ssl->peer_verify_data, buf, hash_len );
#endif

    if( ssl->handshake->resume != 0 )
 808a194:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808a196:	f8d3 01e4 	ldr.w	r0, [r3, #484]	; 0x1e4
 808a19a:	b138      	cbz	r0, 808a1ac <mbedtls_ssl_parse_finished+0x94>
    {
#if defined(MBEDTLS_SSL_CLI_C)
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 808a19c:	6823      	ldr	r3, [r4, #0]
 808a19e:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
 808a1a2:	f010 0001 	ands.w	r0, r0, #1
 808a1a6:	d105      	bne.n	808a1b4 <mbedtls_ssl_parse_finished+0x9c>
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
 808a1a8:	230a      	movs	r3, #10
 808a1aa:	e001      	b.n	808a1b0 <mbedtls_ssl_parse_finished+0x98>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
#endif
    }
    else
        ssl->state++;
 808a1ac:	6863      	ldr	r3, [r4, #4]
 808a1ae:	3301      	adds	r3, #1
 808a1b0:	6063      	str	r3, [r4, #4]
 808a1b2:	e000      	b.n	808a1b6 <mbedtls_ssl_parse_finished+0x9e>
        mbedtls_ssl_recv_flight_completed( ssl );
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse finished" ) );

    return( 0 );
 808a1b4:	4610      	mov	r0, r2
}
 808a1b6:	b004      	add	sp, #16
 808a1b8:	bd70      	pop	{r4, r5, r6, pc}
 808a1ba:	bf00      	nop
 808a1bc:	ffff8900 	.word	0xffff8900
 808a1c0:	ffff8180 	.word	0xffff8180

0808a1c4 <mbedtls_ssl_session_init>:
    mbedtls_md_init( &transform->md_ctx_dec );
}

void mbedtls_ssl_session_init( mbedtls_ssl_session *session )
{
    memset( session, 0, sizeof(mbedtls_ssl_session) );
 808a1c4:	2274      	movs	r2, #116	; 0x74
 808a1c6:	2100      	movs	r1, #0
 808a1c8:	f009 bef1 	b.w	8093fae <memset>

0808a1cc <mbedtls_ssl_init>:
/*
 * Initialize an SSL context
 */
void mbedtls_ssl_init( mbedtls_ssl_context *ssl )
{
    memset( ssl, 0, sizeof( mbedtls_ssl_context ) );
 808a1cc:	22b4      	movs	r2, #180	; 0xb4
 808a1ce:	2100      	movs	r1, #0
 808a1d0:	f009 beed 	b.w	8093fae <memset>

0808a1d4 <mbedtls_ssl_conf_authmode>:
}
#endif

void mbedtls_ssl_conf_authmode( mbedtls_ssl_config *conf, int authmode )
{
    conf->authmode   = authmode;
 808a1d4:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 808a1d8:	f361 0383 	bfi	r3, r1, #2, #2
 808a1dc:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 808a1e0:	4770      	bx	lr

0808a1e2 <mbedtls_ssl_conf_verify>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
void mbedtls_ssl_conf_verify( mbedtls_ssl_config *conf,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
    conf->f_vrfy      = f_vrfy;
 808a1e2:	6341      	str	r1, [r0, #52]	; 0x34
    conf->p_vrfy      = p_vrfy;
 808a1e4:	6382      	str	r2, [r0, #56]	; 0x38
 808a1e6:	4770      	bx	lr

0808a1e8 <mbedtls_ssl_conf_rng>:

void mbedtls_ssl_conf_rng( mbedtls_ssl_config *conf,
                  int (*f_rng)(void *, unsigned char *, size_t),
                  void *p_rng )
{
    conf->f_rng      = f_rng;
 808a1e8:	6181      	str	r1, [r0, #24]
    conf->p_rng      = p_rng;
 808a1ea:	61c2      	str	r2, [r0, #28]
 808a1ec:	4770      	bx	lr

0808a1ee <mbedtls_ssl_conf_dbg>:

void mbedtls_ssl_conf_dbg( mbedtls_ssl_config *conf,
                  void (*f_dbg)(void *, int, const char *, int, const char *),
                  void  *p_dbg )
{
    conf->f_dbg      = f_dbg;
 808a1ee:	6101      	str	r1, [r0, #16]
    conf->p_dbg      = p_dbg;
 808a1f0:	6142      	str	r2, [r0, #20]
 808a1f2:	4770      	bx	lr

0808a1f4 <mbedtls_ssl_set_bio>:
        mbedtls_ssl_recv_t *f_recv,
        mbedtls_ssl_recv_timeout_t *f_recv_timeout )
{
    ssl->p_bio          = p_bio;
    ssl->f_send         = f_send;
    ssl->f_recv         = f_recv;
 808a1f4:	6143      	str	r3, [r0, #20]
    ssl->f_recv_timeout = f_recv_timeout;
 808a1f6:	9b00      	ldr	r3, [sp, #0]
        void *p_bio,
        mbedtls_ssl_send_t *f_send,
        mbedtls_ssl_recv_t *f_recv,
        mbedtls_ssl_recv_timeout_t *f_recv_timeout )
{
    ssl->p_bio          = p_bio;
 808a1f8:	61c1      	str	r1, [r0, #28]
    ssl->f_send         = f_send;
 808a1fa:	6102      	str	r2, [r0, #16]
    ssl->f_recv         = f_recv;
    ssl->f_recv_timeout = f_recv_timeout;
 808a1fc:	6183      	str	r3, [r0, #24]
 808a1fe:	4770      	bx	lr

0808a200 <mbedtls_ssl_set_timer_cb>:

void mbedtls_ssl_set_timer_cb( mbedtls_ssl_context *ssl,
                               void *p_timer,
                               mbedtls_ssl_set_timer_t *f_set_timer,
                               mbedtls_ssl_get_timer_t *f_get_timer )
{
 808a200:	b410      	push	{r4}
    ssl->p_timer        = p_timer;
 808a202:	6441      	str	r1, [r0, #68]	; 0x44
    ssl->f_set_timer    = f_set_timer;
 808a204:	6482      	str	r2, [r0, #72]	; 0x48
    ssl->f_get_timer    = f_get_timer;
 808a206:	64c3      	str	r3, [r0, #76]	; 0x4c

    /* Make sure we start with no timer running */
    ssl_set_timer( ssl, 0 );
 808a208:	2100      	movs	r1, #0
}
 808a20a:	bc10      	pop	{r4}
    ssl->p_timer        = p_timer;
    ssl->f_set_timer    = f_set_timer;
    ssl->f_get_timer    = f_get_timer;

    /* Make sure we start with no timer running */
    ssl_set_timer( ssl, 0 );
 808a20c:	f7fe beee 	b.w	8088fec <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>

0808a210 <mbedtls_ssl_conf_own_cert>:

int mbedtls_ssl_conf_own_cert( mbedtls_ssl_config *conf,
                              mbedtls_x509_crt *own_cert,
                              mbedtls_pk_context *pk_key )
{
    return( ssl_append_key_cert( &conf->key_cert, own_cert, pk_key ) );
 808a210:	3048      	adds	r0, #72	; 0x48
 808a212:	f7ff b83b 	b.w	808928c <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context>

0808a216 <mbedtls_ssl_conf_ca_chain>:

void mbedtls_ssl_conf_ca_chain( mbedtls_ssl_config *conf,
                               mbedtls_x509_crt *ca_chain,
                               mbedtls_x509_crl *ca_crl )
{
    conf->ca_chain   = ca_chain;
 808a216:	64c1      	str	r1, [r0, #76]	; 0x4c
    conf->ca_crl     = ca_crl;
 808a218:	6502      	str	r2, [r0, #80]	; 0x50
 808a21a:	4770      	bx	lr

0808a21c <mbedtls_ssl_conf_min_version>:
    conf->max_minor_ver = minor;
}

void mbedtls_ssl_conf_min_version( mbedtls_ssl_config *conf, int major, int minor )
{
    conf->min_major_ver = major;
 808a21c:	f880 105e 	strb.w	r1, [r0, #94]	; 0x5e
    conf->min_minor_ver = minor;
 808a220:	f880 205f 	strb.w	r2, [r0, #95]	; 0x5f
 808a224:	4770      	bx	lr
	...

0808a228 <mbedtls_ssl_get_max_frag_len>:
    size_t max_len;

    /*
     * Assume mfl_code is correct since it was checked when set
     */
    max_len = mfl_code_to_length[ssl->conf->mfl_code];
 808a228:	6803      	ldr	r3, [r0, #0]
 808a22a:	4a09      	ldr	r2, [pc, #36]	; (808a250 <mbedtls_ssl_get_max_frag_len+0x28>)
 808a22c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60

    /*
     * Check if a smaller max length was negotiated
     */
    if( ssl->session_out != NULL &&
 808a230:	6a41      	ldr	r1, [r0, #36]	; 0x24
    size_t max_len;

    /*
     * Assume mfl_code is correct since it was checked when set
     */
    max_len = mfl_code_to_length[ssl->conf->mfl_code];
 808a232:	f3c3 1382 	ubfx	r3, r3, #6, #3
 808a236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

    /*
     * Check if a smaller max length was negotiated
     */
    if( ssl->session_out != NULL &&
 808a23a:	b131      	cbz	r1, 808a24a <mbedtls_ssl_get_max_frag_len+0x22>
        mfl_code_to_length[ssl->session_out->mfl_code] < max_len )
 808a23c:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 808a240:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 808a244:	4293      	cmp	r3, r2
 808a246:	bf28      	it	cs
 808a248:	4613      	movcs	r3, r2
    {
        max_len = mfl_code_to_length[ssl->session_out->mfl_code];
    }

    return max_len;
}
 808a24a:	4618      	mov	r0, r3
 808a24c:	4770      	bx	lr
 808a24e:	bf00      	nop
 808a250:	080983d0 	.word	0x080983d0

0808a254 <mbedtls_ssl_handshake_step>:
 */
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;

    if( ssl == NULL || ssl->conf == NULL )
 808a254:	b138      	cbz	r0, 808a266 <mbedtls_ssl_handshake_step+0x12>
 808a256:	6803      	ldr	r3, [r0, #0]
 808a258:	b12b      	cbz	r3, 808a266 <mbedtls_ssl_handshake_step+0x12>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 808a25a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 808a25e:	07db      	lsls	r3, r3, #31
 808a260:	d403      	bmi.n	808a26a <mbedtls_ssl_handshake_step+0x16>
        ret = mbedtls_ssl_handshake_client_step( ssl );
 808a262:	f004 bd55 	b.w	808ed10 <mbedtls_ssl_handshake_client_step>
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 808a266:	4802      	ldr	r0, [pc, #8]	; (808a270 <mbedtls_ssl_handshake_step+0x1c>)
 808a268:	4770      	bx	lr
/*
 * Perform a single step of the SSL handshake
 */
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
 808a26a:	4802      	ldr	r0, [pc, #8]	; (808a274 <mbedtls_ssl_handshake_step+0x20>)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
        ret = mbedtls_ssl_handshake_server_step( ssl );
#endif

    return( ret );
}
 808a26c:	4770      	bx	lr
 808a26e:	bf00      	nop
 808a270:	ffff8f00 	.word	0xffff8f00
 808a274:	ffff8f80 	.word	0xffff8f80

0808a278 <mbedtls_ssl_handshake>:

/*
 * Perform the SSL handshake
 */
int mbedtls_ssl_handshake( mbedtls_ssl_context *ssl )
{
 808a278:	b510      	push	{r4, lr}
    int ret = 0;

    if( ssl == NULL || ssl->conf == NULL )
 808a27a:	4604      	mov	r4, r0
 808a27c:	b150      	cbz	r0, 808a294 <mbedtls_ssl_handshake+0x1c>
 808a27e:	6803      	ldr	r3, [r0, #0]
 808a280:	b143      	cbz	r3, 808a294 <mbedtls_ssl_handshake+0x1c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> handshake" ) );

    while( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 808a282:	6863      	ldr	r3, [r4, #4]
 808a284:	2b10      	cmp	r3, #16
 808a286:	d007      	beq.n	808a298 <mbedtls_ssl_handshake+0x20>
    {
        ret = mbedtls_ssl_handshake_step( ssl );
 808a288:	4620      	mov	r0, r4
 808a28a:	f7ff ffe3 	bl	808a254 <mbedtls_ssl_handshake_step>

        if( ret != 0 )
 808a28e:	2800      	cmp	r0, #0
 808a290:	d0f7      	beq.n	808a282 <mbedtls_ssl_handshake+0xa>
 808a292:	bd10      	pop	{r4, pc}
int mbedtls_ssl_handshake( mbedtls_ssl_context *ssl )
{
    int ret = 0;

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 808a294:	4801      	ldr	r0, [pc, #4]	; (808a29c <mbedtls_ssl_handshake+0x24>)
 808a296:	bd10      	pop	{r4, pc}
 808a298:	2000      	movs	r0, #0
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= handshake" ) );

    return( ret );
}
 808a29a:	bd10      	pop	{r4, pc}
 808a29c:	ffff8f00 	.word	0xffff8f00

0808a2a0 <mbedtls_ssl_write>:

/*
 * Write application data (public-facing wrapper)
 */
int mbedtls_ssl_write( mbedtls_ssl_context *ssl, const unsigned char *buf, size_t len )
{
 808a2a0:	b570      	push	{r4, r5, r6, lr}
 808a2a2:	460e      	mov	r6, r1
 808a2a4:	4615      	mov	r5, r2
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );

    if( ssl == NULL || ssl->conf == NULL )
 808a2a6:	4604      	mov	r4, r0
 808a2a8:	b350      	cbz	r0, 808a300 <mbedtls_ssl_write+0x60>
 808a2aa:	6803      	ldr	r3, [r0, #0]
 808a2ac:	b343      	cbz	r3, 808a300 <mbedtls_ssl_write+0x60>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
        return( ret );
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 808a2ae:	6843      	ldr	r3, [r0, #4]
 808a2b0:	2b10      	cmp	r3, #16
 808a2b2:	d109      	bne.n	808a2c8 <mbedtls_ssl_write+0x28>
static int ssl_write_real( mbedtls_ssl_context *ssl,
                           const unsigned char *buf, size_t len )
{
    int ret;
#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    size_t max_len = mbedtls_ssl_get_max_frag_len( ssl );
 808a2b4:	4620      	mov	r0, r4
 808a2b6:	f7ff ffb7 	bl	808a228 <mbedtls_ssl_get_max_frag_len>
        else
#endif
            len = max_len;
    }

    if( ssl->out_left != 0 )
 808a2ba:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 808a2be:	4285      	cmp	r5, r0
 808a2c0:	bf28      	it	cs
 808a2c2:	4605      	movcs	r5, r0
 808a2c4:	b92b      	cbnz	r3, 808a2d2 <mbedtls_ssl_write+0x32>
 808a2c6:	e00a      	b.n	808a2de <mbedtls_ssl_write+0x3e>
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
    {
        if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
 808a2c8:	f7ff ffd6 	bl	808a278 <mbedtls_ssl_handshake>
 808a2cc:	2800      	cmp	r0, #0
 808a2ce:	d0f1      	beq.n	808a2b4 <mbedtls_ssl_write+0x14>
 808a2d0:	bd70      	pop	{r4, r5, r6, pc}
         * The user has previously tried to send the data and
         * MBEDTLS_ERR_SSL_WANT_WRITE or the message was only partially
         * written. In this case, we expect the high-level write function
         * (e.g. mbedtls_ssl_write()) to be called with the same parameters
         */
        if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 808a2d2:	4620      	mov	r0, r4
 808a2d4:	f7ff f9c4 	bl	8089660 <mbedtls_ssl_flush_output>
 808a2d8:	b998      	cbnz	r0, 808a302 <mbedtls_ssl_write+0x62>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
            return( ret );
        }
    }

    return( (int) len );
 808a2da:	4628      	mov	r0, r5
 808a2dc:	bd70      	pop	{r4, r5, r6, pc}
         * The user is trying to send a message the first time, so we need to
         * copy the data into the internal buffers and setup the data structure
         * to keep track of partial writes
         */
        ssl->out_msglen  = len;
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
 808a2de:	2317      	movs	r3, #23
        /*
         * The user is trying to send a message the first time, so we need to
         * copy the data into the internal buffers and setup the data structure
         * to keep track of partial writes
         */
        ssl->out_msglen  = len;
 808a2e0:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
 808a2e4:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        memcpy( ssl->out_msg, buf, len );
 808a2e8:	462a      	mov	r2, r5
 808a2ea:	4631      	mov	r1, r6
 808a2ec:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 808a2f0:	f009 fe37 	bl	8093f62 <memcpy>

        if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 808a2f4:	4620      	mov	r0, r4
 808a2f6:	f7ff f9eb 	bl	80896d0 <mbedtls_ssl_write_record>
 808a2fa:	2800      	cmp	r0, #0
 808a2fc:	d0ed      	beq.n	808a2da <mbedtls_ssl_write+0x3a>
 808a2fe:	bd70      	pop	{r4, r5, r6, pc}
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 808a300:	4800      	ldr	r0, [pc, #0]	; (808a304 <mbedtls_ssl_write+0x64>)
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write" ) );

    return( ret );
}
 808a302:	bd70      	pop	{r4, r5, r6, pc}
 808a304:	ffff8f00 	.word	0xffff8f00

0808a308 <mbedtls_ssl_transform_free>:

    return( 0 );
}

void mbedtls_ssl_transform_free( mbedtls_ssl_transform *transform )
{
 808a308:	b510      	push	{r4, lr}
    if( transform == NULL )
 808a30a:	4604      	mov	r4, r0
 808a30c:	b1a0      	cbz	r0, 808a338 <mbedtls_ssl_transform_free+0x30>
#if defined(MBEDTLS_ZLIB_SUPPORT)
    deflateEnd( &transform->ctx_deflate );
    inflateEnd( &transform->ctx_inflate );
#endif

    mbedtls_cipher_free( &transform->cipher_ctx_enc );
 808a30e:	3050      	adds	r0, #80	; 0x50
 808a310:	f7f8 fd2c 	bl	8082d6c <mbedtls_cipher_free>
    mbedtls_cipher_free( &transform->cipher_ctx_dec );
 808a314:	f104 0090 	add.w	r0, r4, #144	; 0x90
 808a318:	f7f8 fd28 	bl	8082d6c <mbedtls_cipher_free>

    mbedtls_md_free( &transform->md_ctx_enc );
 808a31c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 808a320:	f7fd f96b 	bl	80875fa <mbedtls_md_free>
    mbedtls_md_free( &transform->md_ctx_dec );
 808a324:	f104 0044 	add.w	r0, r4, #68	; 0x44
 808a328:	f7fd f967 	bl	80875fa <mbedtls_md_free>

    mbedtls_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
 808a32c:	4620      	mov	r0, r4
}
 808a32e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_cipher_free( &transform->cipher_ctx_dec );

    mbedtls_md_free( &transform->md_ctx_enc );
    mbedtls_md_free( &transform->md_ctx_dec );

    mbedtls_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
 808a332:	21d0      	movs	r1, #208	; 0xd0
 808a334:	f7fe be52 	b.w	8088fdc <_ZL15mbedtls_zeroizePvj>
 808a338:	bd10      	pop	{r4, pc}

0808a33a <mbedtls_ssl_handshake_free>:
    }
}
#endif /* MBEDTLS_X509_CRT_PARSE_C */

void mbedtls_ssl_handshake_free( mbedtls_ssl_handshake_params *handshake )
{
 808a33a:	b538      	push	{r3, r4, r5, lr}
    if( handshake == NULL )
 808a33c:	4604      	mov	r4, r0
 808a33e:	b1a0      	cbz	r0, 808a36a <mbedtls_ssl_handshake_free+0x30>
    mbedtls_md5_free(    &handshake->fin_md5  );
    mbedtls_sha1_free(   &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_free(   &handshake->fin_sha256    );
 808a340:	3018      	adds	r0, #24
 808a342:	f7f7 fded 	bl	8081f20 <mbedtls_sha256_free>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_free(   &handshake->fin_sha512    );
 808a346:	f104 0088 	add.w	r0, r4, #136	; 0x88
 808a34a:	f003 f8bd 	bl	808d4c8 <mbedtls_sha512_free>
    defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    /*
     * Free only the linked list wrapper, not the keys themselves
     * since the belong to the SNI callback
     */
    if( handshake->sni_key_cert != NULL )
 808a34e:	68e0      	ldr	r0, [r4, #12]
 808a350:	b930      	cbnz	r0, 808a360 <mbedtls_ssl_handshake_free+0x26>
    mbedtls_free( handshake->verify_cookie );
    mbedtls_free( handshake->hs_msg );
    ssl_flight_free( handshake->flight );
#endif

    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
 808a352:	4620      	mov	r0, r4
}
 808a354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mbedtls_free( handshake->verify_cookie );
    mbedtls_free( handshake->hs_msg );
    ssl_flight_free( handshake->flight );
#endif

    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
 808a358:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 808a35c:	f7fe be3e 	b.w	8088fdc <_ZL15mbedtls_zeroizePvj>
    {
        mbedtls_ssl_key_cert *cur = handshake->sni_key_cert, *next;

        while( cur != NULL )
        {
            next = cur->next;
 808a360:	6885      	ldr	r5, [r0, #8]
            mbedtls_free( cur );
 808a362:	f006 fef9 	bl	8091158 <free>
     */
    if( handshake->sni_key_cert != NULL )
    {
        mbedtls_ssl_key_cert *cur = handshake->sni_key_cert, *next;

        while( cur != NULL )
 808a366:	4628      	mov	r0, r5
 808a368:	e7f2      	b.n	808a350 <mbedtls_ssl_handshake_free+0x16>
 808a36a:	bd38      	pop	{r3, r4, r5, pc}

0808a36c <mbedtls_ssl_session_free>:

    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
}

void mbedtls_ssl_session_free( mbedtls_ssl_session *session )
{
 808a36c:	b510      	push	{r4, lr}
    if( session == NULL )
 808a36e:	4604      	mov	r4, r0
 808a370:	b178      	cbz	r0, 808a392 <mbedtls_ssl_session_free+0x26>
        return;

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    if( session->peer_cert != NULL )
 808a372:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 808a374:	b120      	cbz	r0, 808a380 <mbedtls_ssl_session_free+0x14>
    {
        mbedtls_x509_crt_free( session->peer_cert );
 808a376:	f7fe fa26 	bl	80887c6 <mbedtls_x509_crt_free>
        mbedtls_free( session->peer_cert );
 808a37a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 808a37c:	f006 feec 	bl	8091158 <free>
    }
#endif

#if defined(MBEDTLS_SSL_SESSION_TICKETS) && defined(MBEDTLS_SSL_CLI_C)
    mbedtls_free( session->ticket );
 808a380:	6e60      	ldr	r0, [r4, #100]	; 0x64
 808a382:	f006 fee9 	bl	8091158 <free>
#endif

    mbedtls_zeroize( session, sizeof( mbedtls_ssl_session ) );
 808a386:	4620      	mov	r0, r4
}
 808a388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if defined(MBEDTLS_SSL_SESSION_TICKETS) && defined(MBEDTLS_SSL_CLI_C)
    mbedtls_free( session->ticket );
#endif

    mbedtls_zeroize( session, sizeof( mbedtls_ssl_session ) );
 808a38c:	2174      	movs	r1, #116	; 0x74
 808a38e:	f7fe be25 	b.w	8088fdc <_ZL15mbedtls_zeroizePvj>
 808a392:	bd10      	pop	{r4, pc}

0808a394 <mbedtls_ssl_handshake_wrapup>:

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
}

void mbedtls_ssl_handshake_wrapup( mbedtls_ssl_context *ssl )
{
 808a394:	b538      	push	{r3, r4, r5, lr}
 808a396:	4604      	mov	r4, r0
    int resume = ssl->handshake->resume;
 808a398:	6b03      	ldr	r3, [r0, #48]	; 0x30
#endif

    /*
     * Free the previous session and switch in the current one
     */
    if( ssl->session )
 808a39a:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
}

void mbedtls_ssl_handshake_wrapup( mbedtls_ssl_context *ssl )
{
    int resume = ssl->handshake->resume;
 808a39c:	f8d3 51e4 	ldr.w	r5, [r3, #484]	; 0x1e4
#endif

    /*
     * Free the previous session and switch in the current one
     */
    if( ssl->session )
 808a3a0:	b120      	cbz	r0, 808a3ac <mbedtls_ssl_handshake_wrapup+0x18>
        /* RFC 7366 3.1: keep the EtM state */
        ssl->session_negotiate->encrypt_then_mac =
                  ssl->session->encrypt_then_mac;
#endif

        mbedtls_ssl_session_free( ssl->session );
 808a3a2:	f7ff ffe3 	bl	808a36c <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
 808a3a6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 808a3a8:	f006 fed6 	bl	8091158 <free>
    }
    ssl->session = ssl->session_negotiate;
 808a3ac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    ssl->session_negotiate = NULL;
 808a3ae:	2300      	movs	r3, #0

    /*
     * Add cache entry
     */
    if( ssl->conf->f_set_cache != NULL &&
 808a3b0:	6822      	ldr	r2, [r4, #0]
#endif

        mbedtls_ssl_session_free( ssl->session );
        mbedtls_free( ssl->session );
    }
    ssl->session = ssl->session_negotiate;
 808a3b2:	62a1      	str	r1, [r4, #40]	; 0x28
    ssl->session_negotiate = NULL;
 808a3b4:	62e3      	str	r3, [r4, #44]	; 0x2c

    /*
     * Add cache entry
     */
    if( ssl->conf->f_set_cache != NULL &&
 808a3b6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 808a3b8:	b123      	cbz	r3, 808a3c4 <mbedtls_ssl_handshake_wrapup+0x30>
 808a3ba:	6888      	ldr	r0, [r1, #8]
 808a3bc:	b110      	cbz	r0, 808a3c4 <mbedtls_ssl_handshake_wrapup+0x30>
        ssl->session->id_len != 0 &&
 808a3be:	b90d      	cbnz	r5, 808a3c4 <mbedtls_ssl_handshake_wrapup+0x30>
        resume == 0 )
    {
        if( ssl->conf->f_set_cache( ssl->conf->p_cache, ssl->session ) != 0 )
 808a3c0:	6a90      	ldr	r0, [r2, #40]	; 0x28
 808a3c2:	4798      	blx	r3
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup: final free" ) );

    /*
     * Free our handshake params
     */
    mbedtls_ssl_handshake_free( ssl->handshake );
 808a3c4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 808a3c6:	f7ff ffb8 	bl	808a33a <mbedtls_ssl_handshake_free>
    mbedtls_free( ssl->handshake );
 808a3ca:	6b20      	ldr	r0, [r4, #48]	; 0x30
 808a3cc:	f006 fec4 	bl	8091158 <free>
    ssl->handshake = NULL;

    /*
     * Free the previous transform and swith in the current one
     */
    if( ssl->transform )
 808a3d0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    /*
     * Free our handshake params
     */
    mbedtls_ssl_handshake_free( ssl->handshake );
    mbedtls_free( ssl->handshake );
    ssl->handshake = NULL;
 808a3d2:	2300      	movs	r3, #0
 808a3d4:	6323      	str	r3, [r4, #48]	; 0x30

    /*
     * Free the previous transform and swith in the current one
     */
    if( ssl->transform )
 808a3d6:	b120      	cbz	r0, 808a3e2 <mbedtls_ssl_handshake_wrapup+0x4e>
    {
        mbedtls_ssl_transform_free( ssl->transform );
 808a3d8:	f7ff ff96 	bl	808a308 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 808a3dc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 808a3de:	f006 febb 	bl	8091158 <free>
    }
    ssl->transform = ssl->transform_negotiate;
 808a3e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808a3e4:	63e3      	str	r3, [r4, #60]	; 0x3c
    ssl->transform_negotiate = NULL;
 808a3e6:	2300      	movs	r3, #0
 808a3e8:	6423      	str	r3, [r4, #64]	; 0x40
    }
    else
#endif
        ssl_handshake_wrapup_free_hs_transform( ssl );

    ssl->state++;
 808a3ea:	6863      	ldr	r3, [r4, #4]
 808a3ec:	3301      	adds	r3, #1
 808a3ee:	6063      	str	r3, [r4, #4]
 808a3f0:	bd38      	pop	{r3, r4, r5, pc}
	...

0808a3f4 <_ZL18ssl_handshake_initP19mbedtls_ssl_context>:
{
    memset( session, 0, sizeof(mbedtls_ssl_session) );
}

static int ssl_handshake_init( mbedtls_ssl_context *ssl )
{
 808a3f4:	b538      	push	{r3, r4, r5, lr}
 808a3f6:	4604      	mov	r4, r0
    /* Clear old handshake information if present */
    if( ssl->transform_negotiate )
 808a3f8:	6c00      	ldr	r0, [r0, #64]	; 0x40
 808a3fa:	b108      	cbz	r0, 808a400 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xc>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
 808a3fc:	f7ff ff84 	bl	808a308 <mbedtls_ssl_transform_free>
    if( ssl->session_negotiate )
 808a400:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 808a402:	b108      	cbz	r0, 808a408 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x14>
        mbedtls_ssl_session_free( ssl->session_negotiate );
 808a404:	f7ff ffb2 	bl	808a36c <mbedtls_ssl_session_free>
    if( ssl->handshake )
 808a408:	6b20      	ldr	r0, [r4, #48]	; 0x30
 808a40a:	b108      	cbz	r0, 808a410 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x1c>
        mbedtls_ssl_handshake_free( ssl->handshake );
 808a40c:	f7ff ff95 	bl	808a33a <mbedtls_ssl_handshake_free>

    /*
     * Either the pointers are now NULL or cleared properly and can be freed.
     * Now allocate missing structures.
     */
    if( ssl->transform_negotiate == NULL )
 808a410:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808a412:	b923      	cbnz	r3, 808a41e <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x2a>
    {
        ssl->transform_negotiate = (mbedtls_ssl_transform *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_transform) );
 808a414:	21d0      	movs	r1, #208	; 0xd0
 808a416:	2001      	movs	r0, #1
 808a418:	f009 fc7c 	bl	8093d14 <calloc>
 808a41c:	6420      	str	r0, [r4, #64]	; 0x40
    }

    if( ssl->session_negotiate == NULL )
 808a41e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 808a420:	b923      	cbnz	r3, 808a42c <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x38>
    {
        ssl->session_negotiate = (mbedtls_ssl_session *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_session) );
 808a422:	2174      	movs	r1, #116	; 0x74
 808a424:	2001      	movs	r0, #1
 808a426:	f009 fc75 	bl	8093d14 <calloc>
 808a42a:	62e0      	str	r0, [r4, #44]	; 0x2c
    }

    if( ssl->handshake == NULL )
 808a42c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808a42e:	b92b      	cbnz	r3, 808a43c <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x48>
    {
        ssl->handshake = (mbedtls_ssl_handshake_params *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
 808a430:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 808a434:	2001      	movs	r0, #1
 808a436:	f009 fc6d 	bl	8093d14 <calloc>
 808a43a:	6320      	str	r0, [r4, #48]	; 0x30
    }

    /* All pointers should exist and can be directly freed without issue */
    if( ssl->handshake == NULL ||
 808a43c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 808a43e:	b118      	cbz	r0, 808a448 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x54>
 808a440:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808a442:	b10b      	cbz	r3, 808a448 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x54>
        ssl->transform_negotiate == NULL ||
        ssl->session_negotiate == NULL )
 808a444:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        ssl->handshake = (mbedtls_ssl_handshake_params *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
    }

    /* All pointers should exist and can be directly freed without issue */
    if( ssl->handshake == NULL ||
        ssl->transform_negotiate == NULL ||
 808a446:	b96b      	cbnz	r3, 808a464 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x70>
        ssl->session_negotiate == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc() of ssl sub-contexts failed" ) );

        mbedtls_free( ssl->handshake );
 808a448:	f006 fe86 	bl	8091158 <free>
        mbedtls_free( ssl->transform_negotiate );
 808a44c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 808a44e:	f006 fe83 	bl	8091158 <free>
        mbedtls_free( ssl->session_negotiate );
 808a452:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 808a454:	f006 fe80 	bl	8091158 <free>

        ssl->handshake = NULL;
 808a458:	2300      	movs	r3, #0
 808a45a:	6323      	str	r3, [r4, #48]	; 0x30
        ssl->transform_negotiate = NULL;
 808a45c:	6423      	str	r3, [r4, #64]	; 0x40
        ssl->session_negotiate = NULL;
 808a45e:	62e3      	str	r3, [r4, #44]	; 0x2c

        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 808a460:	481e      	ldr	r0, [pc, #120]	; (808a4dc <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xe8>)
 808a462:	bd38      	pop	{r3, r4, r5, pc}
    }

    /* Initialize structures */
    mbedtls_ssl_session_init( ssl->session_negotiate );
 808a464:	4618      	mov	r0, r3
 808a466:	f7ff fead 	bl	808a1c4 <mbedtls_ssl_session_init>
    ssl_transform_init( ssl->transform_negotiate );
 808a46a:	6c25      	ldr	r5, [r4, #64]	; 0x40
#endif
}

static void ssl_transform_init( mbedtls_ssl_transform *transform )
{
    memset( transform, 0, sizeof(mbedtls_ssl_transform) );
 808a46c:	22d0      	movs	r2, #208	; 0xd0
 808a46e:	2100      	movs	r1, #0
 808a470:	4628      	mov	r0, r5
 808a472:	f009 fd9c 	bl	8093fae <memset>

    mbedtls_cipher_init( &transform->cipher_ctx_enc );
 808a476:	f105 0050 	add.w	r0, r5, #80	; 0x50
 808a47a:	f7f8 fc73 	bl	8082d64 <mbedtls_cipher_init>
    mbedtls_cipher_init( &transform->cipher_ctx_dec );
 808a47e:	f105 0090 	add.w	r0, r5, #144	; 0x90
 808a482:	f7f8 fc6f 	bl	8082d64 <mbedtls_cipher_init>

    mbedtls_md_init( &transform->md_ctx_enc );
 808a486:	f105 0038 	add.w	r0, r5, #56	; 0x38
 808a48a:	f7fd f8b1 	bl	80875f0 <mbedtls_md_init>
    mbedtls_md_init( &transform->md_ctx_dec );
 808a48e:	f105 0044 	add.w	r0, r5, #68	; 0x44
 808a492:	f7fd f8ad 	bl	80875f0 <mbedtls_md_init>
    }

    /* Initialize structures */
    mbedtls_ssl_session_init( ssl->session_negotiate );
    ssl_transform_init( ssl->transform_negotiate );
    ssl_handshake_params_init( ssl->handshake );
 808a496:	6b24      	ldr	r4, [r4, #48]	; 0x30
    return( 0 );
}

static void ssl_handshake_params_init( mbedtls_ssl_handshake_params *handshake )
{
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
 808a498:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
     mbedtls_md5_starts_ret( &handshake->fin_md5  );
    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_init(   &handshake->fin_sha256    );
 808a49c:	f104 0518 	add.w	r5, r4, #24
    return( 0 );
}

static void ssl_handshake_params_init( mbedtls_ssl_handshake_params *handshake )
{
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
 808a4a0:	2100      	movs	r1, #0
 808a4a2:	4620      	mov	r0, r4
 808a4a4:	f009 fd83 	bl	8093fae <memset>
     mbedtls_md5_starts_ret( &handshake->fin_md5  );
    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_init(   &handshake->fin_sha256    );
 808a4a8:	4628      	mov	r0, r5
 808a4aa:	f7f7 fd35 	bl	8081f18 <mbedtls_sha256_init>
    mbedtls_sha256_starts_ret( &handshake->fin_sha256, 0 );
 808a4ae:	2100      	movs	r1, #0
 808a4b0:	4628      	mov	r0, r5
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_init(   &handshake->fin_sha512    );
 808a4b2:	f104 0588 	add.w	r5, r4, #136	; 0x88
    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_init(   &handshake->fin_sha256    );
    mbedtls_sha256_starts_ret( &handshake->fin_sha256, 0 );
 808a4b6:	f7f7 fd43 	bl	8081f40 <mbedtls_sha256_starts_ret>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_init(   &handshake->fin_sha512    );
 808a4ba:	4628      	mov	r0, r5
 808a4bc:	f003 f800 	bl	808d4c0 <mbedtls_sha512_init>
    mbedtls_sha512_starts_ret( &handshake->fin_sha512, 1 );
 808a4c0:	2101      	movs	r1, #1
 808a4c2:	4628      	mov	r0, r5
 808a4c4:	f003 f810 	bl	808d4e8 <mbedtls_sha512_starts_ret>
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

    handshake->update_checksum = ssl_update_checksum_start;
 808a4c8:	4b05      	ldr	r3, [pc, #20]	; (808a4e0 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xec>)

/* Allow exactly one hash algorithm for each signature. */
void mbedtls_ssl_sig_hash_set_const_hash( mbedtls_ssl_sig_hash_set_t *set,
                                          mbedtls_md_type_t md_alg )
{
    set->rsa   = md_alg;
 808a4ca:	2000      	movs	r0, #0
    mbedtls_sha512_init(   &handshake->fin_sha512    );
    mbedtls_sha512_starts_ret( &handshake->fin_sha512, 1 );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

    handshake->update_checksum = ssl_update_checksum_start;
 808a4cc:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
    handshake->ecjpake_cache_len = 0;
#endif
#endif

#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    handshake->sni_authmode = MBEDTLS_SSL_VERIFY_UNSET;
 808a4d0:	2303      	movs	r3, #3

/* Allow exactly one hash algorithm for each signature. */
void mbedtls_ssl_sig_hash_set_const_hash( mbedtls_ssl_sig_hash_set_t *set,
                                          mbedtls_md_type_t md_alg )
{
    set->rsa   = md_alg;
 808a4d2:	7020      	strb	r0, [r4, #0]
    set->ecdsa = md_alg;
 808a4d4:	7060      	strb	r0, [r4, #1]
    handshake->ecjpake_cache_len = 0;
#endif
#endif

#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    handshake->sni_authmode = MBEDTLS_SSL_VERIFY_UNSET;
 808a4d6:	60a3      	str	r3, [r4, #8]
        ssl_set_timer( ssl, 0 );
    }
#endif

    return( 0 );
}
 808a4d8:	bd38      	pop	{r3, r4, r5, pc}
 808a4da:	bf00      	nop
 808a4dc:	ffff8100 	.word	0xffff8100
 808a4e0:	080892d9 	.word	0x080892d9

0808a4e4 <mbedtls_ssl_setup>:
/*
 * Setup an SSL context
 */
int mbedtls_ssl_setup( mbedtls_ssl_context *ssl,
                       const mbedtls_ssl_config *conf )
{
 808a4e4:	b538      	push	{r3, r4, r5, lr}
    int ret;
    const size_t len = MBEDTLS_SSL_BUFFER_LEN;

    ssl->conf = conf;
 808a4e6:	6001      	str	r1, [r0, #0]
/*
 * Setup an SSL context
 */
int mbedtls_ssl_setup( mbedtls_ssl_context *ssl,
                       const mbedtls_ssl_config *conf )
{
 808a4e8:	4604      	mov	r4, r0
    ssl->conf = conf;

    /*
     * Prepare base structures
     */
    if( ( ssl-> in_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL ||
 808a4ea:	f242 114d 	movw	r1, #8525	; 0x214d
 808a4ee:	2001      	movs	r0, #1
 808a4f0:	f009 fc10 	bl	8093d14 <calloc>
 808a4f4:	4605      	mov	r5, r0
 808a4f6:	6520      	str	r0, [r4, #80]	; 0x50
 808a4f8:	b328      	cbz	r0, 808a546 <mbedtls_ssl_setup+0x62>
        ( ssl->out_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
 808a4fa:	f242 114d 	movw	r1, #8525	; 0x214d
 808a4fe:	2001      	movs	r0, #1
 808a500:	f009 fc08 	bl	8093d14 <calloc>
    ssl->conf = conf;

    /*
     * Prepare base structures
     */
    if( ( ssl-> in_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL ||
 808a504:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 808a508:	b1e8      	cbz	r0, 808a546 <mbedtls_ssl_setup+0x62>
    }
    else
#endif
    {
        ssl->out_ctr = ssl->out_buf;
        ssl->out_hdr = ssl->out_buf +  8;
 808a50a:	f100 0308 	add.w	r3, r0, #8
 808a50e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        ssl->out_len = ssl->out_buf + 11;
 808a512:	f100 030b 	add.w	r3, r0, #11
 808a516:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        ssl->out_iv  = ssl->out_buf + 13;
        ssl->out_msg = ssl->out_buf + 13;

        ssl->in_ctr = ssl->in_buf;
        ssl->in_hdr = ssl->in_buf +  8;
 808a51a:	f105 0308 	add.w	r3, r5, #8
        ssl->in_msg = ssl->in_buf + 13;
    }
    else
#endif
    {
        ssl->out_ctr = ssl->out_buf;
 808a51e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        ssl->out_hdr = ssl->out_buf +  8;
        ssl->out_len = ssl->out_buf + 11;
        ssl->out_iv  = ssl->out_buf + 13;
        ssl->out_msg = ssl->out_buf + 13;

        ssl->in_ctr = ssl->in_buf;
 808a522:	6565      	str	r5, [r4, #84]	; 0x54
#endif
    {
        ssl->out_ctr = ssl->out_buf;
        ssl->out_hdr = ssl->out_buf +  8;
        ssl->out_len = ssl->out_buf + 11;
        ssl->out_iv  = ssl->out_buf + 13;
 808a524:	300d      	adds	r0, #13
        ssl->out_msg = ssl->out_buf + 13;

        ssl->in_ctr = ssl->in_buf;
        ssl->in_hdr = ssl->in_buf +  8;
 808a526:	65a3      	str	r3, [r4, #88]	; 0x58
        ssl->in_len = ssl->in_buf + 11;
 808a528:	f105 030b 	add.w	r3, r5, #11
        ssl->in_iv  = ssl->in_buf + 13;
 808a52c:	350d      	adds	r5, #13
#endif
    {
        ssl->out_ctr = ssl->out_buf;
        ssl->out_hdr = ssl->out_buf +  8;
        ssl->out_len = ssl->out_buf + 11;
        ssl->out_iv  = ssl->out_buf + 13;
 808a52e:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
        ssl->out_msg = ssl->out_buf + 13;
 808a532:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98

        ssl->in_ctr = ssl->in_buf;
        ssl->in_hdr = ssl->in_buf +  8;
        ssl->in_len = ssl->in_buf + 11;
 808a536:	65e3      	str	r3, [r4, #92]	; 0x5c
        ssl->in_iv  = ssl->in_buf + 13;
 808a538:	6625      	str	r5, [r4, #96]	; 0x60
        ssl->in_msg = ssl->in_buf + 13;
 808a53a:	6665      	str	r5, [r4, #100]	; 0x64
    }

    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 808a53c:	4620      	mov	r0, r4
        return( ret );

    return( 0 );
}
 808a53e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ssl->in_len = ssl->in_buf + 11;
        ssl->in_iv  = ssl->in_buf + 13;
        ssl->in_msg = ssl->in_buf + 13;
    }

    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 808a542:	f7ff bf57 	b.w	808a3f4 <_ZL18ssl_handshake_initP19mbedtls_ssl_context>
     */
    if( ( ssl-> in_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL ||
        ( ssl->out_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed", len ) );
        mbedtls_free( ssl->in_buf );
 808a546:	4628      	mov	r0, r5
 808a548:	f006 fe06 	bl	8091158 <free>
        ssl->in_buf = NULL;
 808a54c:	2300      	movs	r3, #0
 808a54e:	6523      	str	r3, [r4, #80]	; 0x50

    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
        return( ret );

    return( 0 );
}
 808a550:	4800      	ldr	r0, [pc, #0]	; (808a554 <mbedtls_ssl_setup+0x70>)
 808a552:	bd38      	pop	{r3, r4, r5, pc}
 808a554:	ffff8100 	.word	0xffff8100

0808a558 <mbedtls_ssl_free>:

/*
 * Free an SSL context
 */
void mbedtls_ssl_free( mbedtls_ssl_context *ssl )
{
 808a558:	b538      	push	{r3, r4, r5, lr}
    if( ssl == NULL )
 808a55a:	4604      	mov	r4, r0
 808a55c:	2800      	cmp	r0, #0
 808a55e:	d048      	beq.n	808a5f2 <mbedtls_ssl_free+0x9a>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> free" ) );

    if( ssl->out_buf != NULL )
 808a560:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 808a564:	b138      	cbz	r0, 808a576 <mbedtls_ssl_free+0x1e>
    {
        mbedtls_zeroize( ssl->out_buf, MBEDTLS_SSL_BUFFER_LEN );
 808a566:	f242 114d 	movw	r1, #8525	; 0x214d
 808a56a:	f7fe fd37 	bl	8088fdc <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( ssl->out_buf );
 808a56e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 808a572:	f006 fdf1 	bl	8091158 <free>
    }

    if( ssl->in_buf != NULL )
 808a576:	6d20      	ldr	r0, [r4, #80]	; 0x50
 808a578:	b130      	cbz	r0, 808a588 <mbedtls_ssl_free+0x30>
    {
        mbedtls_zeroize( ssl->in_buf, MBEDTLS_SSL_BUFFER_LEN );
 808a57a:	f242 114d 	movw	r1, #8525	; 0x214d
 808a57e:	f7fe fd2d 	bl	8088fdc <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( ssl->in_buf );
 808a582:	6d20      	ldr	r0, [r4, #80]	; 0x50
 808a584:	f006 fde8 	bl	8091158 <free>
        mbedtls_zeroize( ssl->compress_buf, MBEDTLS_SSL_BUFFER_LEN );
        mbedtls_free( ssl->compress_buf );
    }
#endif

    if( ssl->transform )
 808a588:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 808a58a:	b120      	cbz	r0, 808a596 <mbedtls_ssl_free+0x3e>
    {
        mbedtls_ssl_transform_free( ssl->transform );
 808a58c:	f7ff febc 	bl	808a308 <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 808a590:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 808a592:	f006 fde1 	bl	8091158 <free>
    }

    if( ssl->handshake )
 808a596:	6b20      	ldr	r0, [r4, #48]	; 0x30
 808a598:	b180      	cbz	r0, 808a5bc <mbedtls_ssl_free+0x64>
    {
        mbedtls_ssl_handshake_free( ssl->handshake );
 808a59a:	f7ff fece 	bl	808a33a <mbedtls_ssl_handshake_free>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
 808a59e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 808a5a0:	f7ff feb2 	bl	808a308 <mbedtls_ssl_transform_free>
        mbedtls_ssl_session_free( ssl->session_negotiate );
 808a5a4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 808a5a6:	f7ff fee1 	bl	808a36c <mbedtls_ssl_session_free>

        mbedtls_free( ssl->handshake );
 808a5aa:	6b20      	ldr	r0, [r4, #48]	; 0x30
 808a5ac:	f006 fdd4 	bl	8091158 <free>
        mbedtls_free( ssl->transform_negotiate );
 808a5b0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 808a5b2:	f006 fdd1 	bl	8091158 <free>
        mbedtls_free( ssl->session_negotiate );
 808a5b6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 808a5b8:	f006 fdce 	bl	8091158 <free>
    }

    if( ssl->session )
 808a5bc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 808a5be:	b120      	cbz	r0, 808a5ca <mbedtls_ssl_free+0x72>
    {
        mbedtls_ssl_session_free( ssl->session );
 808a5c0:	f7ff fed4 	bl	808a36c <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
 808a5c4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 808a5c6:	f006 fdc7 	bl	8091158 <free>
    }

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    if( ssl->hostname != NULL )
 808a5ca:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 808a5ce:	b155      	cbz	r5, 808a5e6 <mbedtls_ssl_free+0x8e>
    {
        mbedtls_zeroize( ssl->hostname, strlen( ssl->hostname ) );
 808a5d0:	4628      	mov	r0, r5
 808a5d2:	f009 fd22 	bl	809401a <strlen>
 808a5d6:	4601      	mov	r1, r0
 808a5d8:	4628      	mov	r0, r5
 808a5da:	f7fe fcff 	bl	8088fdc <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( ssl->hostname );
 808a5de:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 808a5e2:	f006 fdb9 	bl	8091158 <free>
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= free" ) );

    /* Actually clear after last debug message */
    mbedtls_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
 808a5e6:	4620      	mov	r0, r4
}
 808a5e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= free" ) );

    /* Actually clear after last debug message */
    mbedtls_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
 808a5ec:	21b4      	movs	r1, #180	; 0xb4
 808a5ee:	f7fe bcf5 	b.w	8088fdc <_ZL15mbedtls_zeroizePvj>
 808a5f2:	bd38      	pop	{r3, r4, r5, pc}

0808a5f4 <mbedtls_ssl_config_init>:
/*
 * Initialze mbedtls_ssl_config
 */
void mbedtls_ssl_config_init( mbedtls_ssl_config *conf )
{
    memset( conf, 0, sizeof( mbedtls_ssl_config ) );
 808a5f4:	2264      	movs	r2, #100	; 0x64
 808a5f6:	2100      	movs	r1, #0
 808a5f8:	f009 bcd9 	b.w	8093fae <memset>

0808a5fc <mbedtls_ssl_config_defaults>:
/*
 * Load default in mbedtls_ssl_config
 */
int mbedtls_ssl_config_defaults( mbedtls_ssl_config *conf,
                                 int endpoint, int transport, int preset )
{
 808a5fc:	b510      	push	{r4, lr}
 808a5fe:	4604      	mov	r4, r0
/*
 * SSL set accessors
 */
void mbedtls_ssl_conf_endpoint( mbedtls_ssl_config *conf, int endpoint )
{
    conf->endpoint   = endpoint;
 808a600:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
 808a604:	f361 0000 	bfi	r0, r1, #0, #1
}

void mbedtls_ssl_conf_transport( mbedtls_ssl_config *conf, int transport )
{
    conf->transport = transport;
 808a608:	f362 0041 	bfi	r0, r2, #1, #1
 808a60c:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60

    /*
     * Things that are common to all presets
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( endpoint == MBEDTLS_SSL_IS_CLIENT )
 808a610:	b951      	cbnz	r1, 808a628 <mbedtls_ssl_config_defaults+0x2c>
    {
        conf->authmode = MBEDTLS_SSL_VERIFY_REQUIRED;
 808a612:	2102      	movs	r1, #2
 808a614:	b2c2      	uxtb	r2, r0
 808a616:	f361 0283 	bfi	r2, r1, #2, #2
 808a61a:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
        conf->session_tickets = MBEDTLS_SSL_SESSION_TICKETS_ENABLED;
 808a61e:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 808a622:	430a      	orrs	r2, r1
 808a624:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
#endif

    /*
     * Preset-specific defaults
     */
    switch( preset )
 808a628:	2b02      	cmp	r3, #2
 808a62a:	f04f 0303 	mov.w	r3, #3
    {
        /*
         * NSA Suite B
         */
        case MBEDTLS_SSL_PRESET_SUITEB:
            conf->min_major_ver = MBEDTLS_SSL_MAJOR_VERSION_3;
 808a62e:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
            conf->min_minor_ver = MBEDTLS_SSL_MINOR_VERSION_3; /* TLS 1.2 */
 808a632:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
 808a636:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
            conf->max_minor_ver = MBEDTLS_SSL_MAX_MINOR_VERSION;
 808a63a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
#endif

    /*
     * Preset-specific defaults
     */
    switch( preset )
 808a63e:	d108      	bne.n	808a652 <mbedtls_ssl_config_defaults+0x56>

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   ssl_preset_suiteb_ciphersuites;
 808a640:	4b0a      	ldr	r3, [pc, #40]	; (808a66c <mbedtls_ssl_config_defaults+0x70>)
 808a642:	60e3      	str	r3, [r4, #12]
 808a644:	60a3      	str	r3, [r4, #8]
 808a646:	6063      	str	r3, [r4, #4]
 808a648:	6023      	str	r3, [r4, #0]

#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_suiteb;
 808a64a:	4b09      	ldr	r3, [pc, #36]	; (808a670 <mbedtls_ssl_config_defaults+0x74>)
 808a64c:	6463      	str	r3, [r4, #68]	; 0x44
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_suiteb_hashes;
 808a64e:	4b09      	ldr	r3, [pc, #36]	; (808a674 <mbedtls_ssl_config_defaults+0x78>)
 808a650:	e008      	b.n	808a664 <mbedtls_ssl_config_defaults+0x68>

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   mbedtls_ssl_list_ciphersuites();
 808a652:	f7fb fd37 	bl	80860c4 <mbedtls_ssl_list_ciphersuites>

#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
 808a656:	4b08      	ldr	r3, [pc, #32]	; (808a678 <mbedtls_ssl_config_defaults+0x7c>)

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   mbedtls_ssl_list_ciphersuites();
 808a658:	60e0      	str	r0, [r4, #12]

#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
 808a65a:	6463      	str	r3, [r4, #68]	; 0x44
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_default_hashes;
 808a65c:	4b07      	ldr	r3, [pc, #28]	; (808a67c <mbedtls_ssl_config_defaults+0x80>)

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   mbedtls_ssl_list_ciphersuites();
 808a65e:	60a0      	str	r0, [r4, #8]
 808a660:	6060      	str	r0, [r4, #4]
 808a662:	6020      	str	r0, [r4, #0]
#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_default_hashes;
 808a664:	6563      	str	r3, [r4, #84]	; 0x54
            conf->dhm_min_bitlen = 1024;
#endif
    }

    return( 0 );
}
 808a666:	2000      	movs	r0, #0
 808a668:	bd10      	pop	{r4, pc}
 808a66a:	bf00      	nop
 808a66c:	20000410 	.word	0x20000410
 808a670:	0809835c 	.word	0x0809835c
 808a674:	20000434 	.word	0x20000434
 808a678:	08097c4c 	.word	0x08097c4c
 808a67c:	2000041c 	.word	0x2000041c

0808a680 <mbedtls_ssl_config_free>:

/*
 * Free mbedtls_ssl_config
 */
void mbedtls_ssl_config_free( mbedtls_ssl_config *conf )
{
 808a680:	b538      	push	{r3, r4, r5, lr}
 808a682:	4604      	mov	r4, r0
        conf->psk_identity_len = 0;
    }
#endif

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
 808a684:	6c80      	ldr	r0, [r0, #72]	; 0x48
#if defined(MBEDTLS_X509_CRT_PARSE_C)
static void ssl_key_cert_free( mbedtls_ssl_key_cert *key_cert )
{
    mbedtls_ssl_key_cert *cur = key_cert, *next;

    while( cur != NULL )
 808a686:	b120      	cbz	r0, 808a692 <mbedtls_ssl_config_free+0x12>
    {
        next = cur->next;
 808a688:	6885      	ldr	r5, [r0, #8]
        mbedtls_free( cur );
 808a68a:	f006 fd65 	bl	8091158 <free>
        cur = next;
 808a68e:	4628      	mov	r0, r5
 808a690:	e7f9      	b.n	808a686 <mbedtls_ssl_config_free+0x6>

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
#endif

    mbedtls_zeroize( conf, sizeof( mbedtls_ssl_config ) );
 808a692:	4620      	mov	r0, r4
}
 808a694:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
#endif

    mbedtls_zeroize( conf, sizeof( mbedtls_ssl_config ) );
 808a698:	2164      	movs	r1, #100	; 0x64
 808a69a:	f7fe bc9f 	b.w	8088fdc <_ZL15mbedtls_zeroizePvj>

0808a69e <mbedtls_ssl_sig_from_pk>:
    ( defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C) )
/*
 * Convert between MBEDTLS_PK_XXX and SSL_SIG_XXX
 */
unsigned char mbedtls_ssl_sig_from_pk( mbedtls_pk_context *pk )
{
 808a69e:	b508      	push	{r3, lr}
#if defined(MBEDTLS_RSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
 808a6a0:	2101      	movs	r1, #1
 808a6a2:	f001 fdc9 	bl	808c238 <mbedtls_pk_can_do>
#if defined(MBEDTLS_ECDSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECDSA ) )
        return( MBEDTLS_SSL_SIG_ECDSA );
#endif
    return( MBEDTLS_SSL_SIG_ANON );
}
 808a6a6:	3000      	adds	r0, #0
 808a6a8:	bf18      	it	ne
 808a6aa:	2001      	movne	r0, #1
 808a6ac:	bd08      	pop	{r3, pc}
	...

0808a6b0 <mbedtls_ssl_hash_from_md_alg>:

/*
 * Convert from MBEDTLS_MD_XXX to MBEDTLS_SSL_HASH_XXX
 */
unsigned char mbedtls_ssl_hash_from_md_alg( int md )
{
 808a6b0:	3804      	subs	r0, #4
 808a6b2:	2804      	cmp	r0, #4
 808a6b4:	bf9a      	itte	ls
 808a6b6:	4b02      	ldrls	r3, [pc, #8]	; (808a6c0 <mbedtls_ssl_hash_from_md_alg+0x10>)
 808a6b8:	5c18      	ldrbls	r0, [r3, r0]
    switch( md )
 808a6ba:	2000      	movhi	r0, #0
            return( MBEDTLS_SSL_HASH_SHA512 );
#endif
        default:
            return( MBEDTLS_SSL_HASH_NONE );
    }
}
 808a6bc:	4770      	bx	lr
 808a6be:	bf00      	nop
 808a6c0:	0809836c 	.word	0x0809836c

0808a6c4 <mbedtls_ssl_check_cert_usage>:
    ((void) cert_endpoint);
    ((void) flags);
#endif

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
 808a6c4:	2a01      	cmp	r2, #1
#if defined(MBEDTLS_X509_CRT_PARSE_C)
int mbedtls_ssl_check_cert_usage( const mbedtls_x509_crt *cert,
                          const mbedtls_ssl_ciphersuite_t *ciphersuite,
                          int cert_endpoint,
                          uint32_t *flags )
{
 808a6c6:	b510      	push	{r4, lr}
 808a6c8:	461c      	mov	r4, r3
    ((void) cert_endpoint);
    ((void) flags);
#endif

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
 808a6ca:	d10f      	bne.n	808a6ec <mbedtls_ssl_check_cert_usage+0x28>
    {
        /* Server part of the key exchange */
        switch( ciphersuite->key_exchange )
 808a6cc:	7a8b      	ldrb	r3, [r1, #10]
 808a6ce:	2b0a      	cmp	r3, #10
 808a6d0:	d80e      	bhi.n	808a6f0 <mbedtls_ssl_check_cert_usage+0x2c>
 808a6d2:	409a      	lsls	r2, r3
 808a6d4:	f012 0f82 	tst.w	r2, #130	; 0x82
 808a6d8:	d10c      	bne.n	808a6f4 <mbedtls_ssl_check_cert_usage+0x30>
 808a6da:	f412 6fc0 	tst.w	r2, #1536	; 0x600
 808a6de:	d10b      	bne.n	808a6f8 <mbedtls_ssl_check_cert_usage+0x34>
 808a6e0:	f012 0f1c 	tst.w	r2, #28
                          int cert_endpoint,
                          uint32_t *flags )
{
    int ret = 0;
#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    int usage = 0;
 808a6e4:	bf14      	ite	ne
 808a6e6:	2180      	movne	r1, #128	; 0x80
 808a6e8:	2100      	moveq	r1, #0
 808a6ea:	e006      	b.n	808a6fa <mbedtls_ssl_check_cert_usage+0x36>
        }
    }
    else
    {
        /* Client auth: we only implement rsa_sign and mbedtls_ecdsa_sign for now */
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
 808a6ec:	2180      	movs	r1, #128	; 0x80
 808a6ee:	e004      	b.n	808a6fa <mbedtls_ssl_check_cert_usage+0x36>
                          int cert_endpoint,
                          uint32_t *flags )
{
    int ret = 0;
#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    int usage = 0;
 808a6f0:	2100      	movs	r1, #0
 808a6f2:	e002      	b.n	808a6fa <mbedtls_ssl_check_cert_usage+0x36>
        /* Server part of the key exchange */
        switch( ciphersuite->key_exchange )
        {
            case MBEDTLS_KEY_EXCHANGE_RSA:
            case MBEDTLS_KEY_EXCHANGE_RSA_PSK:
                usage = MBEDTLS_X509_KU_KEY_ENCIPHERMENT;
 808a6f4:	2120      	movs	r1, #32
 808a6f6:	e000      	b.n	808a6fa <mbedtls_ssl_check_cert_usage+0x36>
                usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
                break;

            case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
            case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
                usage = MBEDTLS_X509_KU_KEY_AGREEMENT;
 808a6f8:	2108      	movs	r1, #8
    {
        /* Client auth: we only implement rsa_sign and mbedtls_ecdsa_sign for now */
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
    }

    if( mbedtls_x509_crt_check_key_usage( cert, usage ) != 0 )
 808a6fa:	f7fd fc89 	bl	8088010 <mbedtls_x509_crt_check_key_usage>
 808a6fe:	b128      	cbz	r0, 808a70c <mbedtls_ssl_check_cert_usage+0x48>
    {
        *flags |= MBEDTLS_X509_BADCERT_KEY_USAGE;
 808a700:	6822      	ldr	r2, [r4, #0]
        ret = -1;
 808a702:	f04f 30ff 	mov.w	r0, #4294967295
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
    }

    if( mbedtls_x509_crt_check_key_usage( cert, usage ) != 0 )
    {
        *flags |= MBEDTLS_X509_BADCERT_KEY_USAGE;
 808a706:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 808a70a:	6022      	str	r2, [r4, #0]
        ret = -1;
    }
#endif /* MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE */

    return( ret );
}
 808a70c:	bd10      	pop	{r4, pc}
	...

0808a710 <mbedtls_ssl_parse_certificate>:

    return( ret );
}

int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
 808a710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 808a714:	6c03      	ldr	r3, [r0, #64]	; 0x40

    return( ret );
}

int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
 808a716:	b085      	sub	sp, #20
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 808a718:	f8d3 8000 	ldr.w	r8, [r3]

    return( ret );
}

int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
 808a71c:	4605      	mov	r5, r0
    int authmode = ssl->conf->authmode;
    uint8_t alert;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 808a71e:	f898 200a 	ldrb.w	r2, [r8, #10]
 808a722:	2a0b      	cmp	r2, #11
 808a724:	d80b      	bhi.n	808a73e <mbedtls_ssl_parse_certificate+0x2e>
 808a726:	f44f 6316 	mov.w	r3, #2400	; 0x960
 808a72a:	40d3      	lsrs	r3, r2
 808a72c:	f003 0301 	and.w	r3, r3, #1
 808a730:	f083 0001 	eor.w	r0, r3, #1
 808a734:	b11b      	cbz	r3, 808a73e <mbedtls_ssl_parse_certificate+0x2e>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate" ) );
        ssl->state++;
 808a736:	686b      	ldr	r3, [r5, #4]
 808a738:	3301      	adds	r3, #1
 808a73a:	606b      	str	r3, [r5, #4]
        return( 0 );
 808a73c:	e0e0      	b.n	808a900 <mbedtls_ssl_parse_certificate+0x1f0>
int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
    int authmode = ssl->conf->authmode;
 808a73e:	682b      	ldr	r3, [r5, #0]
        ssl->state++;
        return( 0 );
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808a740:	4628      	mov	r0, r5
int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
    int authmode = ssl->conf->authmode;
 808a742:	f893 7060 	ldrb.w	r7, [r3, #96]	; 0x60
        ssl->state++;
        return( 0 );
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808a746:	f7ff fbc5 	bl	8089ed4 <mbedtls_ssl_read_record>
int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
    int authmode = ssl->conf->authmode;
 808a74a:	f3c7 0781 	ubfx	r7, r7, #2, #2
        ssl->state++;
        return( 0 );
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808a74e:	4604      	mov	r4, r0
 808a750:	bb80      	cbnz	r0, 808a7b4 <mbedtls_ssl_parse_certificate+0xa4>
           let it decide whether to alert. */
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    ssl->state++;
 808a752:	686b      	ldr	r3, [r5, #4]
 808a754:	3301      	adds	r3, #1
 808a756:	606b      	str	r3, [r5, #4]
    }
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \
          MBEDTLS_SSL_PROTO_TLS1_2 */
#endif /* MBEDTLS_SSL_SRV_C */

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 808a758:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 808a75a:	2b16      	cmp	r3, #22
 808a75c:	d006      	beq.n	808a76c <mbedtls_ssl_parse_certificate+0x5c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 808a75e:	220a      	movs	r2, #10
 808a760:	2102      	movs	r1, #2
 808a762:	4628      	mov	r0, r5
 808a764:	f7ff f968 	bl	8089a38 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 808a768:	4867      	ldr	r0, [pc, #412]	; (808a908 <mbedtls_ssl_parse_certificate+0x1f8>)
 808a76a:	e0c9      	b.n	808a900 <mbedtls_ssl_parse_certificate+0x1f0>
    }

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 808a76c:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 808a76e:	7813      	ldrb	r3, [r2, #0]
 808a770:	2b0b      	cmp	r3, #11
 808a772:	d10b      	bne.n	808a78c <mbedtls_ssl_parse_certificate+0x7c>
        ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 3 + 3 )
 808a774:	6fa9      	ldr	r1, [r5, #120]	; 0x78
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 808a776:	2909      	cmp	r1, #9
 808a778:	d908      	bls.n	808a78c <mbedtls_ssl_parse_certificate+0x7c>
    /*
     * Same message structure as in mbedtls_ssl_write_certificate()
     */
    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];

    if( ssl->in_msg[i] != 0 ||
 808a77a:	7913      	ldrb	r3, [r2, #4]
 808a77c:	b933      	cbnz	r3, 808a78c <mbedtls_ssl_parse_certificate+0x7c>
 808a77e:	7950      	ldrb	r0, [r2, #5]
 808a780:	7993      	ldrb	r3, [r2, #6]
 808a782:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 808a786:	3307      	adds	r3, #7
 808a788:	4299      	cmp	r1, r3
 808a78a:	d015      	beq.n	808a7b8 <mbedtls_ssl_parse_certificate+0xa8>
    while( i < ssl->in_hslen )
    {
        if ( i + 3 > ssl->in_hslen ) {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                           MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 808a78c:	2232      	movs	r2, #50	; 0x32
 808a78e:	2102      	movs	r1, #2
 808a790:	4628      	mov	r0, r5
 808a792:	f7ff f951 	bl	8089a38 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
 808a796:	485d      	ldr	r0, [pc, #372]	; (808a90c <mbedtls_ssl_parse_certificate+0x1fc>)
 808a798:	e0b2      	b.n	808a900 <mbedtls_ssl_parse_certificate+0x1f0>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
 808a79a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
                                  ssl->in_msg + i, n );
        switch( ret )
 808a79c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 808a918 <mbedtls_ssl_parse_certificate+0x208>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
 808a7a0:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 808a7a2:	f7fe f80b 	bl	80887bc <mbedtls_x509_crt_init>

    i += 3;
 808a7a6:	2607      	movs	r6, #7

    while( i < ssl->in_hslen )
 808a7a8:	f8d5 e078 	ldr.w	lr, [r5, #120]	; 0x78
 808a7ac:	4576      	cmp	r6, lr
 808a7ae:	d31c      	bcc.n	808a7ea <mbedtls_ssl_parse_certificate+0xda>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }
    }
#endif /* MBEDTLS_SSL_RENEGOTIATION && MBEDTLS_SSL_CLI_C */

    if( authmode != MBEDTLS_SSL_VERIFY_NONE )
 808a7b0:	2f00      	cmp	r7, #0
 808a7b2:	d13f      	bne.n	808a834 <mbedtls_ssl_parse_certificate+0x124>
         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
         * with details encoded in the verification flags. All other kinds
         * of error codes, including those from the user provided f_vrfy
         * functions, are treated as fatal and lead to a failure of
         * ssl_parse_certificate even if verification was optional. */
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 808a7b4:	4620      	mov	r0, r4
 808a7b6:	e0a3      	b.n	808a900 <mbedtls_ssl_parse_certificate+0x1f0>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
    }

    /* In case we tried to reuse a session but it failed */
    if( ssl->session_negotiate->peer_cert != NULL )
 808a7b8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 808a7ba:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 808a7bc:	b128      	cbz	r0, 808a7ca <mbedtls_ssl_parse_certificate+0xba>
    {
        mbedtls_x509_crt_free( ssl->session_negotiate->peer_cert );
 808a7be:	f7fe f802 	bl	80887c6 <mbedtls_x509_crt_free>
        mbedtls_free( ssl->session_negotiate->peer_cert );
 808a7c2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 808a7c4:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 808a7c6:	f006 fcc7 	bl	8091158 <free>
    }

    if( ( ssl->session_negotiate->peer_cert = (mbedtls_x509_crt *)mbedtls_calloc( 1,
 808a7ca:	f44f 719a 	mov.w	r1, #308	; 0x134
 808a7ce:	2001      	movs	r0, #1
 808a7d0:	6aee      	ldr	r6, [r5, #44]	; 0x2c
 808a7d2:	f009 fa9f 	bl	8093d14 <calloc>
 808a7d6:	65f0      	str	r0, [r6, #92]	; 0x5c
 808a7d8:	2800      	cmp	r0, #0
 808a7da:	d1de      	bne.n	808a79a <mbedtls_ssl_parse_certificate+0x8a>
                    sizeof( mbedtls_x509_crt ) ) ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed",
                       sizeof( mbedtls_x509_crt ) ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
 808a7dc:	2250      	movs	r2, #80	; 0x50
 808a7de:	2102      	movs	r1, #2
 808a7e0:	4628      	mov	r0, r5
 808a7e2:	f7ff f929 	bl	8089a38 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 808a7e6:	484a      	ldr	r0, [pc, #296]	; (808a910 <mbedtls_ssl_parse_certificate+0x200>)
 808a7e8:	e08a      	b.n	808a900 <mbedtls_ssl_parse_certificate+0x1f0>

    i += 3;

    while( i < ssl->in_hslen )
    {
        if ( i + 3 > ssl->in_hslen ) {
 808a7ea:	1cf1      	adds	r1, r6, #3
 808a7ec:	458e      	cmp	lr, r1
 808a7ee:	d3cd      	bcc.n	808a78c <mbedtls_ssl_parse_certificate+0x7c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                           MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }
        if( ssl->in_msg[i] != 0 )
 808a7f0:	6e68      	ldr	r0, [r5, #100]	; 0x64
 808a7f2:	5d83      	ldrb	r3, [r0, r6]
 808a7f4:	2b00      	cmp	r3, #0
 808a7f6:	d1c9      	bne.n	808a78c <mbedtls_ssl_parse_certificate+0x7c>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
 808a7f8:	4406      	add	r6, r0
            | (unsigned int) ssl->in_msg[i + 2];
 808a7fa:	7872      	ldrb	r2, [r6, #1]
 808a7fc:	78b3      	ldrb	r3, [r6, #2]
 808a7fe:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
        i += 3;

        if( n < 128 || i + n > ssl->in_hslen )
 808a802:	2a7f      	cmp	r2, #127	; 0x7f
 808a804:	d9c2      	bls.n	808a78c <mbedtls_ssl_parse_certificate+0x7c>
 808a806:	188e      	adds	r6, r1, r2
 808a808:	45b6      	cmp	lr, r6
 808a80a:	d3bf      	bcc.n	808a78c <mbedtls_ssl_parse_certificate+0x7c>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
 808a80c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
                                  ssl->in_msg + i, n );
 808a80e:	4401      	add	r1, r0
 808a810:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 808a812:	f7fe f831 	bl	8088878 <mbedtls_x509_crt_parse_der>
        switch( ret )
 808a816:	4548      	cmp	r0, r9
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
                                  ssl->in_msg + i, n );
 808a818:	4604      	mov	r4, r0
        switch( ret )
 808a81a:	d0c5      	beq.n	808a7a8 <mbedtls_ssl_parse_certificate+0x98>
 808a81c:	dc04      	bgt.n	808a828 <mbedtls_ssl_parse_certificate+0x118>
 808a81e:	f510 5f22 	cmn.w	r0, #10368	; 0x2880
 808a822:	d158      	bne.n	808a8d6 <mbedtls_ssl_parse_certificate+0x1c6>
            /* Ignore certificate with an unknown algorithm: maybe a
               prior certificate was already trusted. */
            break;

        case MBEDTLS_ERR_X509_ALLOC_FAILED:
            alert = MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR;
 808a824:	2250      	movs	r2, #80	; 0x50
 808a826:	e05d      	b.n	808a8e4 <mbedtls_ssl_parse_certificate+0x1d4>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
                                  ssl->in_msg + i, n );
        switch( ret )
 808a828:	f510 5f16 	cmn.w	r0, #9600	; 0x2580
 808a82c:	d055      	beq.n	808a8da <mbedtls_ssl_parse_certificate+0x1ca>
 808a82e:	2800      	cmp	r0, #0
 808a830:	d0ba      	beq.n	808a7a8 <mbedtls_ssl_parse_certificate+0x98>
 808a832:	e050      	b.n	808a8d6 <mbedtls_ssl_parse_certificate+0x1c6>
    {
        mbedtls_x509_crt *ca_chain;
        mbedtls_x509_crl *ca_crl;

#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
        if( ssl->handshake->sni_ca_chain != NULL )
 808a834:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 808a836:	682b      	ldr	r3, [r5, #0]
 808a838:	6916      	ldr	r6, [r2, #16]
 808a83a:	b10e      	cbz	r6, 808a840 <mbedtls_ssl_parse_certificate+0x130>
        {
            ca_chain = ssl->handshake->sni_ca_chain;
            ca_crl   = ssl->handshake->sni_ca_crl;
 808a83c:	6952      	ldr	r2, [r2, #20]
 808a83e:	e001      	b.n	808a844 <mbedtls_ssl_parse_certificate+0x134>
        }
        else
#endif
        {
            ca_chain = ssl->conf->ca_chain;
 808a840:	6cde      	ldr	r6, [r3, #76]	; 0x4c
            ca_crl   = ssl->conf->ca_crl;
 808a842:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                ssl->session_negotiate->peer_cert,
                                ca_chain, ca_crl,
                                ssl->conf->cert_profile,
                                ssl->hostname,
                               &ssl->session_negotiate->verify_result,
                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
 808a844:	6b99      	ldr	r1, [r3, #56]	; 0x38

        /*
         * Main check: verify certificate
         */
        ret = mbedtls_x509_crt_verify_with_profile(
                                ssl->session_negotiate->peer_cert,
 808a846:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
                                ca_chain, ca_crl,
                                ssl->conf->cert_profile,
                                ssl->hostname,
                               &ssl->session_negotiate->verify_result,
                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
 808a848:	9103      	str	r1, [sp, #12]
 808a84a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 808a84c:	9102      	str	r1, [sp, #8]
        }

        /*
         * Main check: verify certificate
         */
        ret = mbedtls_x509_crt_verify_with_profile(
 808a84e:	f100 0160 	add.w	r1, r0, #96	; 0x60
                                ssl->session_negotiate->peer_cert,
                                ca_chain, ca_crl,
                                ssl->conf->cert_profile,
                                ssl->hostname,
                               &ssl->session_negotiate->verify_result,
                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
 808a852:	9101      	str	r1, [sp, #4]
 808a854:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 808a858:	9100      	str	r1, [sp, #0]
 808a85a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808a85c:	4631      	mov	r1, r6
 808a85e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 808a860:	f7fd feca 	bl	80885f8 <mbedtls_x509_crt_verify_with_profile>
                    ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
            }
        }
#endif /* MBEDTLS_ECP_C */

        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
 808a864:	682b      	ldr	r3, [r5, #0]
                                ssl->session_negotiate->peer_cert,
                                ca_chain, ca_crl,
                                ssl->conf->cert_profile,
                                ssl->hostname,
                               &ssl->session_negotiate->verify_result,
                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
 808a866:	4604      	mov	r4, r0
                    ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
            }
        }
#endif /* MBEDTLS_ECP_C */

        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
 808a868:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 808a86c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 808a86e:	f002 0201 	and.w	r2, r2, #1
 808a872:	f100 0360 	add.w	r3, r0, #96	; 0x60
 808a876:	f082 0201 	eor.w	r2, r2, #1
 808a87a:	4641      	mov	r1, r8
 808a87c:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 808a87e:	f7ff ff21 	bl	808a6c4 <mbedtls_ssl_check_cert_usage>
 808a882:	b100      	cbz	r0, 808a886 <mbedtls_ssl_parse_certificate+0x176>
                                 ciphersuite_info,
                                 ! ssl->conf->endpoint,
                                 &ssl->session_negotiate->verify_result ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (usage extensions)" ) );
            if( ret == 0 )
 808a884:	b174      	cbz	r4, 808a8a4 <mbedtls_ssl_parse_certificate+0x194>
         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
         * with details encoded in the verification flags. All other kinds
         * of error codes, including those from the user provided f_vrfy
         * functions, are treated as fatal and lead to a failure of
         * ssl_parse_certificate even if verification was optional. */
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 808a886:	2f01      	cmp	r7, #1
 808a888:	d105      	bne.n	808a896 <mbedtls_ssl_parse_certificate+0x186>
 808a88a:	f514 5f1c 	cmn.w	r4, #9984	; 0x2700
 808a88e:	d02e      	beq.n	808a8ee <mbedtls_ssl_parse_certificate+0x1de>
            ( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED ||
 808a890:	f514 4ff4 	cmn.w	r4, #31232	; 0x7a00
 808a894:	d02b      	beq.n	808a8ee <mbedtls_ssl_parse_certificate+0x1de>
              ret == MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE ) )
        {
            ret = 0;
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
 808a896:	b90e      	cbnz	r6, 808a89c <mbedtls_ssl_parse_certificate+0x18c>
 808a898:	2f02      	cmp	r7, #2
 808a89a:	d001      	beq.n	808a8a0 <mbedtls_ssl_parse_certificate+0x190>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
        }

        if( ret != 0 )
 808a89c:	b934      	cbnz	r4, 808a8ac <mbedtls_ssl_parse_certificate+0x19c>
 808a89e:	e789      	b.n	808a7b4 <mbedtls_ssl_parse_certificate+0xa4>
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
 808a8a0:	4c1c      	ldr	r4, [pc, #112]	; (808a914 <mbedtls_ssl_parse_certificate+0x204>)
 808a8a2:	e003      	b.n	808a8ac <mbedtls_ssl_parse_certificate+0x19c>
         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
         * with details encoded in the verification flags. All other kinds
         * of error codes, including those from the user provided f_vrfy
         * functions, are treated as fatal and lead to a failure of
         * ssl_parse_certificate even if verification was optional. */
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 808a8a4:	2f01      	cmp	r7, #1
 808a8a6:	d085      	beq.n	808a7b4 <mbedtls_ssl_parse_certificate+0xa4>
              ret == MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE ) )
        {
            ret = 0;
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
 808a8a8:	b31e      	cbz	r6, 808a8f2 <mbedtls_ssl_parse_certificate+0x1e2>
                                 ! ssl->conf->endpoint,
                                 &ssl->session_negotiate->verify_result ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (usage extensions)" ) );
            if( ret == 0 )
                ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
 808a8aa:	4c18      	ldr	r4, [pc, #96]	; (808a90c <mbedtls_ssl_parse_certificate+0x1fc>)
        if( ret != 0 )
        {
            /* The certificate may have been rejected for several reasons.
               Pick one and send the corresponding alert. Which alert to send
               may be a subject of debate in some cases. */
            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
 808a8ac:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 808a8ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 808a8b0:	05df      	lsls	r7, r3, #23
 808a8b2:	d40e      	bmi.n	808a8d2 <mbedtls_ssl_parse_certificate+0x1c2>
                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
 808a8b4:	075e      	lsls	r6, r3, #29
 808a8b6:	d40e      	bmi.n	808a8d6 <mbedtls_ssl_parse_certificate+0x1c6>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NS_CERT_TYPE )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_PK )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
 808a8b8:	f413 3fdc 	tst.w	r3, #112640	; 0x1b800
 808a8bc:	d10d      	bne.n	808a8da <mbedtls_ssl_parse_certificate+0x1ca>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
 808a8be:	07d8      	lsls	r0, r3, #31
 808a8c0:	d40d      	bmi.n	808a8de <mbedtls_ssl_parse_certificate+0x1ce>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
 808a8c2:	0799      	lsls	r1, r3, #30
 808a8c4:	d40d      	bmi.n	808a8e2 <mbedtls_ssl_parse_certificate+0x1d2>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NOT_TRUSTED )
                alert = MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA;
            else
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
 808a8c6:	f013 0f08 	tst.w	r3, #8
 808a8ca:	bf14      	ite	ne
 808a8cc:	2230      	movne	r2, #48	; 0x30
 808a8ce:	222e      	moveq	r2, #46	; 0x2e
 808a8d0:	e008      	b.n	808a8e4 <mbedtls_ssl_parse_certificate+0x1d4>
        {
            /* The certificate may have been rejected for several reasons.
               Pick one and send the corresponding alert. Which alert to send
               may be a subject of debate in some cases. */
            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
 808a8d2:	2231      	movs	r2, #49	; 0x31
 808a8d4:	e006      	b.n	808a8e4 <mbedtls_ssl_parse_certificate+0x1d4>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
                alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
 808a8d6:	222a      	movs	r2, #42	; 0x2a
 808a8d8:	e004      	b.n	808a8e4 <mbedtls_ssl_parse_certificate+0x1d4>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NS_CERT_TYPE )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_PK )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 808a8da:	222b      	movs	r2, #43	; 0x2b
 808a8dc:	e002      	b.n	808a8e4 <mbedtls_ssl_parse_certificate+0x1d4>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
 808a8de:	222d      	movs	r2, #45	; 0x2d
 808a8e0:	e000      	b.n	808a8e4 <mbedtls_ssl_parse_certificate+0x1d4>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
 808a8e2:	222c      	movs	r2, #44	; 0x2c
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NOT_TRUSTED )
                alert = MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA;
            else
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            alert );
 808a8e4:	2102      	movs	r1, #2
 808a8e6:	4628      	mov	r0, r5
 808a8e8:	f7ff f8a6 	bl	8089a38 <mbedtls_ssl_send_alert_message>
 808a8ec:	e762      	b.n	808a7b4 <mbedtls_ssl_parse_certificate+0xa4>
 808a8ee:	2000      	movs	r0, #0
 808a8f0:	e006      	b.n	808a900 <mbedtls_ssl_parse_certificate+0x1f0>
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
 808a8f2:	4b08      	ldr	r3, [pc, #32]	; (808a914 <mbedtls_ssl_parse_certificate+0x204>)
 808a8f4:	4805      	ldr	r0, [pc, #20]	; (808a90c <mbedtls_ssl_parse_certificate+0x1fc>)
 808a8f6:	2f02      	cmp	r7, #2
 808a8f8:	bf14      	ite	ne
 808a8fa:	4604      	movne	r4, r0
 808a8fc:	461c      	moveq	r4, r3
 808a8fe:	e7d5      	b.n	808a8ac <mbedtls_ssl_parse_certificate+0x19c>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate" ) );

    return( ret );
}
 808a900:	b005      	add	sp, #20
 808a902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808a906:	bf00      	nop
 808a908:	ffff8900 	.word	0xffff8900
 808a90c:	ffff8600 	.word	0xffff8600
 808a910:	ffff8100 	.word	0xffff8100
 808a914:	ffff8980 	.word	0xffff8980
 808a918:	ffffd9d2 	.word	0xffffd9d2

0808a91c <mbedtls_ssl_write_version>:
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 808a91c:	7018      	strb	r0, [r3, #0]
        ver[1] = (unsigned char) minor;
 808a91e:	7059      	strb	r1, [r3, #1]
 808a920:	4770      	bx	lr

0808a922 <mbedtls_ssl_read_version>:
    else
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
 808a922:	781a      	ldrb	r2, [r3, #0]
 808a924:	6002      	str	r2, [r0, #0]
        *minor = ver[1];
 808a926:	785b      	ldrb	r3, [r3, #1]
 808a928:	600b      	str	r3, [r1, #0]
 808a92a:	4770      	bx	lr

0808a92c <_ZL11mpi_sub_hlpjPmS_>:
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 808a92c:	2300      	movs	r3, #0

/*
 * Helper for mbedtls_mpi subtraction
 */
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
 808a92e:	b5f0      	push	{r4, r5, r6, r7, lr}
 808a930:	4616      	mov	r6, r2
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 808a932:	461c      	mov	r4, r3
 808a934:	4284      	cmp	r4, r0
 808a936:	d016      	beq.n	808a966 <_ZL11mpi_sub_hlpjPmS_+0x3a>
    {
        z = ( *d <  c );     *d -=  c;
 808a938:	f8d6 e000 	ldr.w	lr, [r6]
 808a93c:	ebc3 050e 	rsb	r5, r3, lr
 808a940:	6035      	str	r5, [r6, #0]
        c = ( *d < *s ) + z; *d -= *s;
 808a942:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 808a946:	3401      	adds	r4, #1
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
 808a948:	42bd      	cmp	r5, r7
 808a94a:	bf2c      	ite	cs
 808a94c:	f04f 0c00 	movcs.w	ip, #0
 808a950:	f04f 0c01 	movcc.w	ip, #1
 808a954:	1bed      	subs	r5, r5, r7
 808a956:	4573      	cmp	r3, lr
 808a958:	bf94      	ite	ls
 808a95a:	4663      	movls	r3, ip
 808a95c:	f10c 0301 	addhi.w	r3, ip, #1
 808a960:	f846 5b04 	str.w	r5, [r6], #4
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 808a964:	e7e6      	b.n	808a934 <_ZL11mpi_sub_hlpjPmS_+0x8>
 808a966:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
 808a96a:	b143      	cbz	r3, 808a97e <_ZL11mpi_sub_hlpjPmS_+0x52>
    {
        z = ( *d < c ); *d -= c;
 808a96c:	6811      	ldr	r1, [r2, #0]
 808a96e:	1ac8      	subs	r0, r1, r3
        c = z; i++; d++;
 808a970:	428b      	cmp	r3, r1
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
    {
        z = ( *d < c ); *d -= c;
 808a972:	f842 0b04 	str.w	r0, [r2], #4
        c = z; i++; d++;
 808a976:	bf94      	ite	ls
 808a978:	2300      	movls	r3, #0
 808a97a:	2301      	movhi	r3, #1
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
 808a97c:	e7f5      	b.n	808a96a <_ZL11mpi_sub_hlpjPmS_+0x3e>
 808a97e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808a980 <_ZL11mpi_mul_hlpjPmS_m>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
 808a980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808a984:	460d      	mov	r5, r1
 808a986:	4614      	mov	r4, r2
 808a988:	4686      	mov	lr, r0
    mbedtls_mpi_uint c = 0, t = 0;
 808a98a:	f04f 0c00 	mov.w	ip, #0
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 808a98e:	f1be 0f0f 	cmp.w	lr, #15
 808a992:	f105 0540 	add.w	r5, r5, #64	; 0x40
 808a996:	f104 0440 	add.w	r4, r4, #64	; 0x40
 808a99a:	f240 811e 	bls.w	808abda <_ZL11mpi_mul_hlpjPmS_m+0x25a>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 808a99e:	f855 6c40 	ldr.w	r6, [r5, #-64]
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 808a9a2:	f1ae 0e10 	sub.w	lr, lr, #16
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 808a9a6:	fba6 9a03 	umull	r9, sl, r6, r3
 808a9aa:	f854 6c40 	ldr.w	r6, [r4, #-64]
 808a9ae:	eb1c 0c09 	adds.w	ip, ip, r9
 808a9b2:	bf2c      	ite	cs
 808a9b4:	f04f 0801 	movcs.w	r8, #1
 808a9b8:	f04f 0800 	movcc.w	r8, #0
 808a9bc:	eb1c 0606 	adds.w	r6, ip, r6
 808a9c0:	f844 6c40 	str.w	r6, [r4, #-64]
 808a9c4:	f855 6c3c 	ldr.w	r6, [r5, #-60]
 808a9c8:	eb48 080a 	adc.w	r8, r8, sl
 808a9cc:	fba3 9a06 	umull	r9, sl, r3, r6
 808a9d0:	f854 6c3c 	ldr.w	r6, [r4, #-60]
 808a9d4:	eb18 0809 	adds.w	r8, r8, r9
 808a9d8:	bf2c      	ite	cs
 808a9da:	f04f 0c01 	movcs.w	ip, #1
 808a9de:	f04f 0c00 	movcc.w	ip, #0
 808a9e2:	eb18 0606 	adds.w	r6, r8, r6
 808a9e6:	f844 6c3c 	str.w	r6, [r4, #-60]
        MULADDC_CORE   MULADDC_CORE
 808a9ea:	f855 7c38 	ldr.w	r7, [r5, #-56]
 808a9ee:	f854 6c38 	ldr.w	r6, [r4, #-56]
 808a9f2:	fba3 8907 	umull	r8, r9, r3, r7
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 808a9f6:	eb4c 0c0a 	adc.w	ip, ip, sl
        MULADDC_CORE   MULADDC_CORE
 808a9fa:	eb1c 0c08 	adds.w	ip, ip, r8
 808a9fe:	bf2c      	ite	cs
 808aa00:	2701      	movcs	r7, #1
 808aa02:	2700      	movcc	r7, #0
 808aa04:	eb1c 0606 	adds.w	r6, ip, r6
 808aa08:	f844 6c38 	str.w	r6, [r4, #-56]
 808aa0c:	f855 6c34 	ldr.w	r6, [r5, #-52]
 808aa10:	eb47 0709 	adc.w	r7, r7, r9
 808aa14:	fba3 8906 	umull	r8, r9, r3, r6
 808aa18:	f854 6c34 	ldr.w	r6, [r4, #-52]
 808aa1c:	eb17 0708 	adds.w	r7, r7, r8
 808aa20:	bf2c      	ite	cs
 808aa22:	f04f 0c01 	movcs.w	ip, #1
 808aa26:	f04f 0c00 	movcc.w	ip, #0
 808aa2a:	19be      	adds	r6, r7, r6
 808aa2c:	f844 6c34 	str.w	r6, [r4, #-52]
        MULADDC_CORE   MULADDC_CORE
 808aa30:	f855 7c30 	ldr.w	r7, [r5, #-48]
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 808aa34:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 808aa38:	fba3 8907 	umull	r8, r9, r3, r7
 808aa3c:	f854 6c30 	ldr.w	r6, [r4, #-48]
 808aa40:	eb1c 0c08 	adds.w	ip, ip, r8
 808aa44:	bf2c      	ite	cs
 808aa46:	2701      	movcs	r7, #1
 808aa48:	2700      	movcc	r7, #0
 808aa4a:	eb1c 0606 	adds.w	r6, ip, r6
 808aa4e:	f844 6c30 	str.w	r6, [r4, #-48]
 808aa52:	f855 6c2c 	ldr.w	r6, [r5, #-44]
 808aa56:	eb47 0709 	adc.w	r7, r7, r9
 808aa5a:	fba3 8906 	umull	r8, r9, r3, r6
 808aa5e:	f854 6c2c 	ldr.w	r6, [r4, #-44]
 808aa62:	eb17 0708 	adds.w	r7, r7, r8
 808aa66:	bf2c      	ite	cs
 808aa68:	f04f 0c01 	movcs.w	ip, #1
 808aa6c:	f04f 0c00 	movcc.w	ip, #0
 808aa70:	19be      	adds	r6, r7, r6
 808aa72:	f844 6c2c 	str.w	r6, [r4, #-44]
        MULADDC_CORE   MULADDC_CORE
 808aa76:	f855 7c28 	ldr.w	r7, [r5, #-40]
    for( ; i >= 16; i -= 16 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 808aa7a:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 808aa7e:	fba3 8907 	umull	r8, r9, r3, r7
 808aa82:	f854 6c28 	ldr.w	r6, [r4, #-40]
 808aa86:	eb1c 0c08 	adds.w	ip, ip, r8
 808aa8a:	bf2c      	ite	cs
 808aa8c:	2701      	movcs	r7, #1
 808aa8e:	2700      	movcc	r7, #0
 808aa90:	eb1c 0606 	adds.w	r6, ip, r6
 808aa94:	f844 6c28 	str.w	r6, [r4, #-40]
 808aa98:	f855 6c24 	ldr.w	r6, [r5, #-36]
 808aa9c:	eb47 0709 	adc.w	r7, r7, r9
 808aaa0:	fba3 8906 	umull	r8, r9, r3, r6
 808aaa4:	f854 6c24 	ldr.w	r6, [r4, #-36]
 808aaa8:	eb17 0708 	adds.w	r7, r7, r8
 808aaac:	bf2c      	ite	cs
 808aaae:	f04f 0c01 	movcs.w	ip, #1
 808aab2:	f04f 0c00 	movcc.w	ip, #0
 808aab6:	19be      	adds	r6, r7, r6
 808aab8:	f844 6c24 	str.w	r6, [r4, #-36]

        MULADDC_CORE   MULADDC_CORE
 808aabc:	f855 7c20 	ldr.w	r7, [r5, #-32]
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 808aac0:	eb4c 0c09 	adc.w	ip, ip, r9

        MULADDC_CORE   MULADDC_CORE
 808aac4:	fba3 8907 	umull	r8, r9, r3, r7
 808aac8:	f854 6c20 	ldr.w	r6, [r4, #-32]
 808aacc:	eb1c 0c08 	adds.w	ip, ip, r8
 808aad0:	bf2c      	ite	cs
 808aad2:	2701      	movcs	r7, #1
 808aad4:	2700      	movcc	r7, #0
 808aad6:	eb1c 0606 	adds.w	r6, ip, r6
 808aada:	f844 6c20 	str.w	r6, [r4, #-32]
 808aade:	f855 6c1c 	ldr.w	r6, [r5, #-28]
 808aae2:	eb47 0709 	adc.w	r7, r7, r9
 808aae6:	fba3 8906 	umull	r8, r9, r3, r6
 808aaea:	f854 6c1c 	ldr.w	r6, [r4, #-28]
 808aaee:	eb17 0708 	adds.w	r7, r7, r8
 808aaf2:	bf2c      	ite	cs
 808aaf4:	f04f 0c01 	movcs.w	ip, #1
 808aaf8:	f04f 0c00 	movcc.w	ip, #0
 808aafc:	19be      	adds	r6, r7, r6
 808aafe:	f844 6c1c 	str.w	r6, [r4, #-28]
        MULADDC_CORE   MULADDC_CORE
 808ab02:	f855 7c18 	ldr.w	r7, [r5, #-24]
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
 808ab06:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 808ab0a:	fba3 8907 	umull	r8, r9, r3, r7
 808ab0e:	f854 6c18 	ldr.w	r6, [r4, #-24]
 808ab12:	eb1c 0c08 	adds.w	ip, ip, r8
 808ab16:	bf2c      	ite	cs
 808ab18:	2701      	movcs	r7, #1
 808ab1a:	2700      	movcc	r7, #0
 808ab1c:	eb1c 0606 	adds.w	r6, ip, r6
 808ab20:	f844 6c18 	str.w	r6, [r4, #-24]
 808ab24:	f855 6c14 	ldr.w	r6, [r5, #-20]
 808ab28:	eb47 0709 	adc.w	r7, r7, r9
 808ab2c:	fba3 8906 	umull	r8, r9, r3, r6
 808ab30:	f854 6c14 	ldr.w	r6, [r4, #-20]
 808ab34:	eb17 0708 	adds.w	r7, r7, r8
 808ab38:	bf2c      	ite	cs
 808ab3a:	f04f 0c01 	movcs.w	ip, #1
 808ab3e:	f04f 0c00 	movcc.w	ip, #0
 808ab42:	19be      	adds	r6, r7, r6
 808ab44:	f844 6c14 	str.w	r6, [r4, #-20]
        MULADDC_CORE   MULADDC_CORE
 808ab48:	f855 7c10 	ldr.w	r7, [r5, #-16]
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 808ab4c:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 808ab50:	fba3 8907 	umull	r8, r9, r3, r7
 808ab54:	f854 6c10 	ldr.w	r6, [r4, #-16]
 808ab58:	eb1c 0c08 	adds.w	ip, ip, r8
 808ab5c:	bf2c      	ite	cs
 808ab5e:	2701      	movcs	r7, #1
 808ab60:	2700      	movcc	r7, #0
 808ab62:	eb1c 0606 	adds.w	r6, ip, r6
 808ab66:	f844 6c10 	str.w	r6, [r4, #-16]
 808ab6a:	f855 6c0c 	ldr.w	r6, [r5, #-12]
 808ab6e:	eb47 0709 	adc.w	r7, r7, r9
 808ab72:	fba3 8906 	umull	r8, r9, r3, r6
 808ab76:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 808ab7a:	eb17 0708 	adds.w	r7, r7, r8
 808ab7e:	bf2c      	ite	cs
 808ab80:	f04f 0c01 	movcs.w	ip, #1
 808ab84:	f04f 0c00 	movcc.w	ip, #0
 808ab88:	19be      	adds	r6, r7, r6
 808ab8a:	f844 6c0c 	str.w	r6, [r4, #-12]
        MULADDC_CORE   MULADDC_CORE
 808ab8e:	f855 7c08 	ldr.w	r7, [r5, #-8]
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 808ab92:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 808ab96:	fba3 8907 	umull	r8, r9, r3, r7
 808ab9a:	f854 6c08 	ldr.w	r6, [r4, #-8]
 808ab9e:	eb1c 0c08 	adds.w	ip, ip, r8
 808aba2:	bf2c      	ite	cs
 808aba4:	2701      	movcs	r7, #1
 808aba6:	2700      	movcc	r7, #0
 808aba8:	eb1c 0606 	adds.w	r6, ip, r6
 808abac:	f844 6c08 	str.w	r6, [r4, #-8]
 808abb0:	f855 6c04 	ldr.w	r6, [r5, #-4]
 808abb4:	eb47 0709 	adc.w	r7, r7, r9
 808abb8:	fba3 8906 	umull	r8, r9, r3, r6
 808abbc:	f854 6c04 	ldr.w	r6, [r4, #-4]
 808abc0:	eb17 0708 	adds.w	r7, r7, r8
 808abc4:	bf2c      	ite	cs
 808abc6:	f04f 0c01 	movcs.w	ip, #1
 808abca:	f04f 0c00 	movcc.w	ip, #0
 808abce:	19be      	adds	r6, r7, r6
 808abd0:	eb4c 0c09 	adc.w	ip, ip, r9
 808abd4:	f844 6c04 	str.w	r6, [r4, #-4]
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 808abd8:	e6d9      	b.n	808a98e <_ZL11mpi_mul_hlpjPmS_m+0xe>
 808abda:	ea4f 1e10 	mov.w	lr, r0, lsr #4
 808abde:	eba0 100e 	sub.w	r0, r0, lr, lsl #4
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
 808abe2:	2807      	cmp	r0, #7
 808abe4:	ea4f 1e8e 	mov.w	lr, lr, lsl #6
 808abe8:	eb01 050e 	add.w	r5, r1, lr
 808abec:	eb02 040e 	add.w	r4, r2, lr
 808abf0:	d966      	bls.n	808acc0 <_ZL11mpi_mul_hlpjPmS_m+0x340>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 808abf2:	f851 600e 	ldr.w	r6, [r1, lr]
 808abf6:	fba6 7803 	umull	r7, r8, r6, r3
 808abfa:	f852 600e 	ldr.w	r6, [r2, lr]
 808abfe:	eb1c 0c07 	adds.w	ip, ip, r7
 808ac02:	bf2c      	ite	cs
 808ac04:	2101      	movcs	r1, #1
 808ac06:	2100      	movcc	r1, #0
 808ac08:	eb1c 0606 	adds.w	r6, ip, r6
 808ac0c:	f842 600e 	str.w	r6, [r2, lr]
 808ac10:	686e      	ldr	r6, [r5, #4]
 808ac12:	eb41 0108 	adc.w	r1, r1, r8
 808ac16:	fba3 7806 	umull	r7, r8, r3, r6
 808ac1a:	6866      	ldr	r6, [r4, #4]
 808ac1c:	19ca      	adds	r2, r1, r7
 808ac1e:	bf2c      	ite	cs
 808ac20:	2101      	movcs	r1, #1
 808ac22:	2100      	movcc	r1, #0
 808ac24:	1992      	adds	r2, r2, r6
 808ac26:	6062      	str	r2, [r4, #4]
        MULADDC_CORE   MULADDC_CORE
 808ac28:	68ae      	ldr	r6, [r5, #8]
    }

    for( ; i >= 8; i -= 8 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 808ac2a:	eb41 0108 	adc.w	r1, r1, r8
        MULADDC_CORE   MULADDC_CORE
 808ac2e:	fba3 7806 	umull	r7, r8, r3, r6
 808ac32:	68a6      	ldr	r6, [r4, #8]
 808ac34:	19c9      	adds	r1, r1, r7
 808ac36:	bf2c      	ite	cs
 808ac38:	2201      	movcs	r2, #1
 808ac3a:	2200      	movcc	r2, #0
 808ac3c:	1989      	adds	r1, r1, r6
 808ac3e:	60a1      	str	r1, [r4, #8]
 808ac40:	68ee      	ldr	r6, [r5, #12]
 808ac42:	eb42 0208 	adc.w	r2, r2, r8
 808ac46:	fba3 7806 	umull	r7, r8, r3, r6
 808ac4a:	68e6      	ldr	r6, [r4, #12]
 808ac4c:	19d2      	adds	r2, r2, r7
 808ac4e:	bf2c      	ite	cs
 808ac50:	2101      	movcs	r1, #1
 808ac52:	2100      	movcc	r1, #0
 808ac54:	1992      	adds	r2, r2, r6
 808ac56:	60e2      	str	r2, [r4, #12]

        MULADDC_CORE   MULADDC_CORE
 808ac58:	692e      	ldr	r6, [r5, #16]

    for( ; i >= 8; i -= 8 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 808ac5a:	eb41 0108 	adc.w	r1, r1, r8

        MULADDC_CORE   MULADDC_CORE
 808ac5e:	fba3 7806 	umull	r7, r8, r3, r6
 808ac62:	6926      	ldr	r6, [r4, #16]
 808ac64:	19c9      	adds	r1, r1, r7
 808ac66:	bf2c      	ite	cs
 808ac68:	2201      	movcs	r2, #1
 808ac6a:	2200      	movcc	r2, #0
 808ac6c:	1989      	adds	r1, r1, r6
 808ac6e:	6121      	str	r1, [r4, #16]
 808ac70:	696e      	ldr	r6, [r5, #20]
 808ac72:	eb42 0208 	adc.w	r2, r2, r8
 808ac76:	fba3 7806 	umull	r7, r8, r3, r6
 808ac7a:	6966      	ldr	r6, [r4, #20]
 808ac7c:	19d2      	adds	r2, r2, r7
 808ac7e:	bf2c      	ite	cs
 808ac80:	2101      	movcs	r1, #1
 808ac82:	2100      	movcc	r1, #0
 808ac84:	1992      	adds	r2, r2, r6
 808ac86:	6162      	str	r2, [r4, #20]
        MULADDC_CORE   MULADDC_CORE
 808ac88:	69ae      	ldr	r6, [r5, #24]
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
 808ac8a:	eb41 0108 	adc.w	r1, r1, r8
        MULADDC_CORE   MULADDC_CORE
 808ac8e:	fba3 7806 	umull	r7, r8, r3, r6
 808ac92:	69a6      	ldr	r6, [r4, #24]
 808ac94:	19c9      	adds	r1, r1, r7
 808ac96:	bf2c      	ite	cs
 808ac98:	2201      	movcs	r2, #1
 808ac9a:	2200      	movcc	r2, #0
 808ac9c:	1989      	adds	r1, r1, r6
 808ac9e:	61a1      	str	r1, [r4, #24]
 808aca0:	69ee      	ldr	r6, [r5, #28]
 808aca2:	69e1      	ldr	r1, [r4, #28]
 808aca4:	fba3 6706 	umull	r6, r7, r3, r6
 808aca8:	eb42 0208 	adc.w	r2, r2, r8
 808acac:	1992      	adds	r2, r2, r6
 808acae:	bf2c      	ite	cs
 808acb0:	f04f 0c01 	movcs.w	ip, #1
 808acb4:	f04f 0c00 	movcc.w	ip, #0
 808acb8:	1852      	adds	r2, r2, r1
 808acba:	eb4c 0c07 	adc.w	ip, ip, r7
 808acbe:	61e2      	str	r2, [r4, #28]
 808acc0:	08c2      	lsrs	r2, r0, #3
 808acc2:	0151      	lsls	r1, r2, #5
 808acc4:	440c      	add	r4, r1
 808acc6:	440d      	add	r5, r1
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
    mbedtls_mpi_uint c = 0, t = 0;
 808acc8:	4621      	mov	r1, r4
 808acca:	eba0 00c2 	sub.w	r0, r0, r2, lsl #3
 808acce:	0080      	lsls	r0, r0, #2
 808acd0:	eb05 0e00 	add.w	lr, r5, r0
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 808acd4:	4575      	cmp	r5, lr
 808acd6:	d011      	beq.n	808acfc <_ZL11mpi_mul_hlpjPmS_m+0x37c>
    {
        MULADDC_INIT
        MULADDC_CORE
 808acd8:	f855 6b04 	ldr.w	r6, [r5], #4
 808acdc:	fba6 7803 	umull	r7, r8, r6, r3
 808ace0:	680e      	ldr	r6, [r1, #0]
 808ace2:	eb1c 0207 	adds.w	r2, ip, r7
 808ace6:	bf2c      	ite	cs
 808ace8:	f04f 0c01 	movcs.w	ip, #1
 808acec:	f04f 0c00 	movcc.w	ip, #0
 808acf0:	1992      	adds	r2, r2, r6
 808acf2:	eb4c 0c08 	adc.w	ip, ip, r8
 808acf6:	f841 2b04 	str.w	r2, [r1], #4
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 808acfa:	e7eb      	b.n	808acd4 <_ZL11mpi_mul_hlpjPmS_m+0x354>
 808acfc:	4404      	add	r4, r0
#endif /* MULADDC_HUIT */

    t++;

    do {
        *d += c; c = ( *d < c ); d++;
 808acfe:	6823      	ldr	r3, [r4, #0]
 808ad00:	4463      	add	r3, ip
 808ad02:	459c      	cmp	ip, r3
 808ad04:	f844 3b04 	str.w	r3, [r4], #4
 808ad08:	bf8c      	ite	hi
 808ad0a:	f04f 0c01 	movhi.w	ip, #1
 808ad0e:	f04f 0c00 	movls.w	ip, #0
    }
    while( c != 0 );
 808ad12:	d8f4      	bhi.n	808acfe <_ZL11mpi_mul_hlpjPmS_m+0x37e>
}
 808ad14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808ad18 <mbedtls_mpi_init>:
/*
 * Initialize one MPI
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
 808ad18:	b120      	cbz	r0, 808ad24 <mbedtls_mpi_init+0xc>
        return;

    X->s = 1;
 808ad1a:	2301      	movs	r3, #1
 808ad1c:	6003      	str	r3, [r0, #0]
    X->n = 0;
 808ad1e:	2300      	movs	r3, #0
 808ad20:	6043      	str	r3, [r0, #4]
    X->p = NULL;
 808ad22:	6083      	str	r3, [r0, #8]
 808ad24:	4770      	bx	lr

0808ad26 <mbedtls_mpi_free>:

/*
 * Unallocate one MPI
 */
void mbedtls_mpi_free( mbedtls_mpi *X )
{
 808ad26:	b510      	push	{r4, lr}
    if( X == NULL )
 808ad28:	4604      	mov	r4, r0
 808ad2a:	b188      	cbz	r0, 808ad50 <mbedtls_mpi_free+0x2a>
        return;

    if( X->p != NULL )
 808ad2c:	6883      	ldr	r3, [r0, #8]
 808ad2e:	b153      	cbz	r3, 808ad46 <mbedtls_mpi_free+0x20>
    {
        mbedtls_mpi_zeroize( X->p, X->n );
 808ad30:	6842      	ldr	r2, [r0, #4]
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n ) {
    volatile mbedtls_mpi_uint *p = (mbedtls_mpi_uint *)v; while( n-- ) *p++ = 0;
 808ad32:	2100      	movs	r1, #0
 808ad34:	f112 32ff 	adds.w	r2, r2, #4294967295
 808ad38:	d302      	bcc.n	808ad40 <mbedtls_mpi_free+0x1a>
 808ad3a:	6019      	str	r1, [r3, #0]
 808ad3c:	3304      	adds	r3, #4
 808ad3e:	e7f9      	b.n	808ad34 <mbedtls_mpi_free+0xe>
        return;

    if( X->p != NULL )
    {
        mbedtls_mpi_zeroize( X->p, X->n );
        mbedtls_free( X->p );
 808ad40:	68a0      	ldr	r0, [r4, #8]
 808ad42:	f006 fa09 	bl	8091158 <free>
    }

    X->s = 1;
 808ad46:	2301      	movs	r3, #1
 808ad48:	6023      	str	r3, [r4, #0]
    X->n = 0;
 808ad4a:	2300      	movs	r3, #0
 808ad4c:	6063      	str	r3, [r4, #4]
    X->p = NULL;
 808ad4e:	60a3      	str	r3, [r4, #8]
 808ad50:	bd10      	pop	{r4, pc}

0808ad52 <mbedtls_mpi_grow>:
 */
int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )
{
    mbedtls_mpi_uint *p;

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 808ad52:	f242 7310 	movw	r3, #10000	; 0x2710
 808ad56:	4299      	cmp	r1, r3

/*
 * Enlarge to the specified number of limbs
 */
int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )
{
 808ad58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808ad5c:	4604      	mov	r4, r0
 808ad5e:	460f      	mov	r7, r1
    mbedtls_mpi_uint *p;

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 808ad60:	d903      	bls.n	808ad6a <mbedtls_mpi_grow+0x18>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 808ad62:	f06f 000f 	mvn.w	r0, #15
 808ad66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    if( X->n < nblimbs )
 808ad6a:	6846      	ldr	r6, [r0, #4]
 808ad6c:	42b1      	cmp	r1, r6
 808ad6e:	d919      	bls.n	808ada4 <mbedtls_mpi_grow+0x52>
    {
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 808ad70:	2104      	movs	r1, #4
 808ad72:	4638      	mov	r0, r7
 808ad74:	f008 ffce 	bl	8093d14 <calloc>
 808ad78:	4680      	mov	r8, r0
 808ad7a:	2800      	cmp	r0, #0
 808ad7c:	d0f1      	beq.n	808ad62 <mbedtls_mpi_grow+0x10>
            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );

        if( X->p != NULL )
 808ad7e:	68a5      	ldr	r5, [r4, #8]
 808ad80:	b16d      	cbz	r5, 808ad9e <mbedtls_mpi_grow+0x4c>
        {
            memcpy( p, X->p, X->n * ciL );
 808ad82:	00b2      	lsls	r2, r6, #2
 808ad84:	4629      	mov	r1, r5
 808ad86:	f009 f8ec 	bl	8093f62 <memcpy>
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n ) {
    volatile mbedtls_mpi_uint *p = (mbedtls_mpi_uint *)v; while( n-- ) *p++ = 0;
 808ad8a:	2300      	movs	r3, #0
 808ad8c:	f116 36ff 	adds.w	r6, r6, #4294967295
 808ad90:	d302      	bcc.n	808ad98 <mbedtls_mpi_grow+0x46>
 808ad92:	602b      	str	r3, [r5, #0]
 808ad94:	3504      	adds	r5, #4
 808ad96:	e7f9      	b.n	808ad8c <mbedtls_mpi_grow+0x3a>

        if( X->p != NULL )
        {
            memcpy( p, X->p, X->n * ciL );
            mbedtls_mpi_zeroize( X->p, X->n );
            mbedtls_free( X->p );
 808ad98:	68a0      	ldr	r0, [r4, #8]
 808ad9a:	f006 f9dd 	bl	8091158 <free>
        }

        X->n = nblimbs;
 808ad9e:	6067      	str	r7, [r4, #4]
        X->p = p;
 808ada0:	f8c4 8008 	str.w	r8, [r4, #8]
    }

    return( 0 );
 808ada4:	2000      	movs	r0, #0
}
 808ada6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808adaa <mbedtls_mpi_copy>:
int mbedtls_mpi_copy( mbedtls_mpi *X, const mbedtls_mpi *Y )
{
    int ret;
    size_t i;

    if( X == Y )
 808adaa:	4288      	cmp	r0, r1

/*
 * Copy the contents of Y into X
 */
int mbedtls_mpi_copy( mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 808adac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808adae:	4606      	mov	r6, r0
 808adb0:	460f      	mov	r7, r1
    int ret;
    size_t i;

    if( X == Y )
 808adb2:	d020      	beq.n	808adf6 <mbedtls_mpi_copy+0x4c>
        return( 0 );

    if( Y->p == NULL )
 808adb4:	688c      	ldr	r4, [r1, #8]
 808adb6:	b914      	cbnz	r4, 808adbe <mbedtls_mpi_copy+0x14>
    {
        mbedtls_mpi_free( X );
 808adb8:	f7ff ffb5 	bl	808ad26 <mbedtls_mpi_free>
 808adbc:	e01d      	b.n	808adfa <mbedtls_mpi_copy+0x50>
        return( 0 );
    }

    for( i = Y->n - 1; i > 0; i-- )
 808adbe:	6849      	ldr	r1, [r1, #4]
 808adc0:	3901      	subs	r1, #1
 808adc2:	b119      	cbz	r1, 808adcc <mbedtls_mpi_copy+0x22>
        if( Y->p[i] != 0 )
 808adc4:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
 808adc8:	2b00      	cmp	r3, #0
 808adca:	d0f9      	beq.n	808adc0 <mbedtls_mpi_copy+0x16>
            break;
    i++;

    X->s = Y->s;
 808adcc:	683b      	ldr	r3, [r7, #0]
    }

    for( i = Y->n - 1; i > 0; i-- )
        if( Y->p[i] != 0 )
            break;
    i++;
 808adce:	1c4d      	adds	r5, r1, #1

    X->s = Y->s;
 808add0:	6033      	str	r3, [r6, #0]

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
 808add2:	4629      	mov	r1, r5
 808add4:	4630      	mov	r0, r6
 808add6:	f7ff ffbc 	bl	808ad52 <mbedtls_mpi_grow>
 808adda:	4604      	mov	r4, r0
 808addc:	b968      	cbnz	r0, 808adfa <mbedtls_mpi_copy+0x50>

    memset( X->p, 0, X->n * ciL );
 808adde:	6872      	ldr	r2, [r6, #4]
 808ade0:	4601      	mov	r1, r0
 808ade2:	0092      	lsls	r2, r2, #2
 808ade4:	68b0      	ldr	r0, [r6, #8]
 808ade6:	f009 f8e2 	bl	8093fae <memset>
    memcpy( X->p, Y->p, i * ciL );
 808adea:	00aa      	lsls	r2, r5, #2
 808adec:	68b9      	ldr	r1, [r7, #8]
 808adee:	68b0      	ldr	r0, [r6, #8]
 808adf0:	f009 f8b7 	bl	8093f62 <memcpy>
 808adf4:	e001      	b.n	808adfa <mbedtls_mpi_copy+0x50>
{
    int ret;
    size_t i;

    if( X == Y )
        return( 0 );
 808adf6:	2000      	movs	r0, #0
 808adf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808adfa:	4620      	mov	r0, r4
    memcpy( X->p, Y->p, i * ciL );

cleanup:

    return( ret );
}
 808adfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808adfe <mbedtls_mpi_lset>:

/*
 * Set value from integer
 */
int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 808adfe:	b570      	push	{r4, r5, r6, lr}
 808ae00:	460e      	mov	r6, r1
    int ret;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 808ae02:	2101      	movs	r1, #1

/*
 * Set value from integer
 */
int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 808ae04:	4604      	mov	r4, r0
    int ret;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 808ae06:	f7ff ffa4 	bl	808ad52 <mbedtls_mpi_grow>
 808ae0a:	4605      	mov	r5, r0
 808ae0c:	b988      	cbnz	r0, 808ae32 <mbedtls_mpi_lset+0x34>
    memset( X->p, 0, X->n * ciL );
 808ae0e:	6862      	ldr	r2, [r4, #4]
 808ae10:	4601      	mov	r1, r0
 808ae12:	0092      	lsls	r2, r2, #2
 808ae14:	68a0      	ldr	r0, [r4, #8]
 808ae16:	f009 f8ca 	bl	8093fae <memset>

    X->p[0] = ( z < 0 ) ? -z : z;
 808ae1a:	68a3      	ldr	r3, [r4, #8]
 808ae1c:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    X->s    = ( z < 0 ) ? -1 : 1;
 808ae20:	2e00      	cmp	r6, #0
    int ret;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    memset( X->p, 0, X->n * ciL );

    X->p[0] = ( z < 0 ) ? -z : z;
 808ae22:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
 808ae26:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 808ae28:	bfb4      	ite	lt
 808ae2a:	f04f 33ff 	movlt.w	r3, #4294967295
 808ae2e:	2301      	movge	r3, #1
 808ae30:	6023      	str	r3, [r4, #0]

cleanup:

    return( ret );
}
 808ae32:	4628      	mov	r0, r5
 808ae34:	bd70      	pop	{r4, r5, r6, pc}

0808ae36 <mbedtls_mpi_get_bit>:
/*
 * Get a specific bit
 */
int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )
{
    if( X->n * biL <= pos )
 808ae36:	6843      	ldr	r3, [r0, #4]
 808ae38:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
        return( 0 );

    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
 808ae3c:	bf3f      	itttt	cc
 808ae3e:	6883      	ldrcc	r3, [r0, #8]
 808ae40:	094a      	lsrcc	r2, r1, #5
 808ae42:	f853 3022 	ldrcc.w	r3, [r3, r2, lsl #2]
 808ae46:	f001 001f 	andcc.w	r0, r1, #31
 808ae4a:	bf3a      	itte	cc
 808ae4c:	fa23 f000 	lsrcc.w	r0, r3, r0
 808ae50:	f000 0001 	andcc.w	r0, r0, #1
 * Get a specific bit
 */
int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )
{
    if( X->n * biL <= pos )
        return( 0 );
 808ae54:	2000      	movcs	r0, #0

    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
}
 808ae56:	4770      	bx	lr

0808ae58 <mbedtls_mpi_lsb>:
/*
 * Return the number of less significant zero-bits
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
    size_t i, j, count = 0;
 808ae58:	2300      	movs	r3, #0

    for( i = 0; i < X->n; i++ )
 808ae5a:	461a      	mov	r2, r3

/*
 * Return the number of less significant zero-bits
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
 808ae5c:	b570      	push	{r4, r5, r6, lr}
    size_t i, j, count = 0;

    for( i = 0; i < X->n; i++ )
 808ae5e:	6844      	ldr	r4, [r0, #4]
 808ae60:	42a2      	cmp	r2, r4
 808ae62:	d00e      	beq.n	808ae82 <mbedtls_mpi_lsb+0x2a>
        for( j = 0; j < biL; j++, count++ )
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 808ae64:	6881      	ldr	r1, [r0, #8]
 808ae66:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
 808ae6a:	2100      	movs	r1, #0
 808ae6c:	fa25 f601 	lsr.w	r6, r5, r1
 808ae70:	07f6      	lsls	r6, r6, #31
 808ae72:	d408      	bmi.n	808ae86 <mbedtls_mpi_lsb+0x2e>
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
    size_t i, j, count = 0;

    for( i = 0; i < X->n; i++ )
        for( j = 0; j < biL; j++, count++ )
 808ae74:	3101      	adds	r1, #1
 808ae76:	2920      	cmp	r1, #32
 808ae78:	f103 0301 	add.w	r3, r3, #1
 808ae7c:	d1f6      	bne.n	808ae6c <mbedtls_mpi_lsb+0x14>
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
    size_t i, j, count = 0;

    for( i = 0; i < X->n; i++ )
 808ae7e:	3201      	adds	r2, #1
 808ae80:	e7ee      	b.n	808ae60 <mbedtls_mpi_lsb+0x8>
        for( j = 0; j < biL; j++, count++ )
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
                return( count );

    return( 0 );
 808ae82:	2000      	movs	r0, #0
 808ae84:	bd70      	pop	{r4, r5, r6, pc}
 808ae86:	4618      	mov	r0, r3
}
 808ae88:	bd70      	pop	{r4, r5, r6, pc}

0808ae8a <mbedtls_mpi_bitlen>:

/*
 * Return the number of bits
 */
size_t mbedtls_mpi_bitlen( const mbedtls_mpi *X )
{
 808ae8a:	b510      	push	{r4, lr}
    size_t i, j;

    if( X->n == 0 )
 808ae8c:	6843      	ldr	r3, [r0, #4]
 808ae8e:	b1d3      	cbz	r3, 808aec6 <mbedtls_mpi_bitlen+0x3c>
 808ae90:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 808ae94:	3a01      	subs	r2, #1
        return( 0 );

    for( i = X->n - 1; i > 0; i-- )
 808ae96:	1e59      	subs	r1, r3, #1
 808ae98:	0092      	lsls	r2, r2, #2
 808ae9a:	6883      	ldr	r3, [r0, #8]
 808ae9c:	b121      	cbz	r1, 808aea8 <mbedtls_mpi_bitlen+0x1e>
        if( X->p[i] != 0 )
 808ae9e:	589c      	ldr	r4, [r3, r2]
 808aea0:	3a04      	subs	r2, #4
 808aea2:	b90c      	cbnz	r4, 808aea8 <mbedtls_mpi_bitlen+0x1e>
    size_t i, j;

    if( X->n == 0 )
        return( 0 );

    for( i = X->n - 1; i > 0; i-- )
 808aea4:	3901      	subs	r1, #1
 808aea6:	e7f8      	b.n	808ae9a <mbedtls_mpi_bitlen+0x10>
        if( X->p[i] != 0 )
            break;

    j = biL - mbedtls_clz( X->p[i] );
 808aea8:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 * Count leading zero bits in a given integer
 */
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
 808aeac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000

    for( j = 0; j < biL; j++ )
 808aeb0:	2300      	movs	r3, #0
    {
        if( x & mask ) break;
 808aeb2:	4210      	tst	r0, r2
 808aeb4:	d104      	bne.n	808aec0 <mbedtls_mpi_bitlen+0x36>
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);

    for( j = 0; j < biL; j++ )
 808aeb6:	3301      	adds	r3, #1
 808aeb8:	2b20      	cmp	r3, #32
    {
        if( x & mask ) break;

        mask >>= 1;
 808aeba:	ea4f 0252 	mov.w	r2, r2, lsr #1
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);

    for( j = 0; j < biL; j++ )
 808aebe:	d1f8      	bne.n	808aeb2 <mbedtls_mpi_bitlen+0x28>
        if( X->p[i] != 0 )
            break;

    j = biL - mbedtls_clz( X->p[i] );

    return( ( i * biL ) + j );
 808aec0:	ebc3 1341 	rsb	r3, r3, r1, lsl #5
 808aec4:	3320      	adds	r3, #32
}
 808aec6:	4618      	mov	r0, r3
 808aec8:	bd10      	pop	{r4, pc}

0808aeca <mbedtls_mpi_size>:

/*
 * Return the total size in bytes
 */
size_t mbedtls_mpi_size( const mbedtls_mpi *X )
{
 808aeca:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
 808aecc:	f7ff ffdd 	bl	808ae8a <mbedtls_mpi_bitlen>
 808aed0:	3007      	adds	r0, #7
}
 808aed2:	08c0      	lsrs	r0, r0, #3
 808aed4:	bd08      	pop	{r3, pc}

0808aed6 <mbedtls_mpi_read_binary>:

/*
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
 808aed6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808aed8:	460d      	mov	r5, r1
    int ret;
    size_t i, j;
    size_t const limbs = CHARS_TO_LIMBS( buflen );
 808aeda:	f012 0103 	ands.w	r1, r2, #3
 808aede:	bf18      	it	ne
 808aee0:	2101      	movne	r1, #1

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 808aee2:	6843      	ldr	r3, [r0, #4]
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
    int ret;
    size_t i, j;
    size_t const limbs = CHARS_TO_LIMBS( buflen );
 808aee4:	eb01 0492 	add.w	r4, r1, r2, lsr #2

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 808aee8:	429c      	cmp	r4, r3

/*
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
 808aeea:	4606      	mov	r6, r0
 808aeec:	4617      	mov	r7, r2
    int ret;
    size_t i, j;
    size_t const limbs = CHARS_TO_LIMBS( buflen );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 808aeee:	d105      	bne.n	808aefc <mbedtls_mpi_read_binary+0x26>
        mbedtls_mpi_free( X );
        mbedtls_mpi_init( X );
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 808aef0:	2100      	movs	r1, #0
 808aef2:	4630      	mov	r0, r6
 808aef4:	f7ff ff83 	bl	808adfe <mbedtls_mpi_lset>
 808aef8:	b160      	cbz	r0, 808af14 <mbedtls_mpi_read_binary+0x3e>
 808aefa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    size_t const limbs = CHARS_TO_LIMBS( buflen );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
    {
        mbedtls_mpi_free( X );
 808aefc:	f7ff ff13 	bl	808ad26 <mbedtls_mpi_free>
        mbedtls_mpi_init( X );
 808af00:	4630      	mov	r0, r6
 808af02:	f7ff ff09 	bl	808ad18 <mbedtls_mpi_init>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 808af06:	4621      	mov	r1, r4
 808af08:	4630      	mov	r0, r6
 808af0a:	f7ff ff22 	bl	808ad52 <mbedtls_mpi_grow>
 808af0e:	2800      	cmp	r0, #0
 808af10:	d0ee      	beq.n	808aef0 <mbedtls_mpi_read_binary+0x1a>
 808af12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 808af14:	4603      	mov	r3, r0
 808af16:	19e9      	adds	r1, r5, r7

    for( i = buflen, j = 0; i > 0; i--, j++ )
 808af18:	42bb      	cmp	r3, r7
 808af1a:	d010      	beq.n	808af3e <mbedtls_mpi_read_binary+0x68>
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);
 808af1c:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
 808af20:	68b2      	ldr	r2, [r6, #8]
 808af22:	00dc      	lsls	r4, r3, #3
 808af24:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 808af28:	f004 0418 	and.w	r4, r4, #24
 808af2c:	fa05 f404 	lsl.w	r4, r5, r4
 808af30:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    for( i = buflen, j = 0; i > 0; i--, j++ )
 808af34:	3301      	adds	r3, #1
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);
 808af36:	432c      	orrs	r4, r5
 808af38:	f842 402e 	str.w	r4, [r2, lr, lsl #2]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    for( i = buflen, j = 0; i > 0; i--, j++ )
 808af3c:	e7ec      	b.n	808af18 <mbedtls_mpi_read_binary+0x42>
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);

cleanup:

    return( ret );
}
 808af3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808af40 <mbedtls_mpi_write_binary>:

/*
 * Export X into unsigned binary data, big endian
 */
int mbedtls_mpi_write_binary( const mbedtls_mpi *X, unsigned char *buf, size_t buflen )
{
 808af40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808af42:	4614      	mov	r4, r2
 808af44:	4605      	mov	r5, r0
 808af46:	460f      	mov	r7, r1
    size_t i, j, n;

    n = mbedtls_mpi_size( X );
 808af48:	f7ff ffbf 	bl	808aeca <mbedtls_mpi_size>

    if( buflen < n )
 808af4c:	42a0      	cmp	r0, r4
 */
int mbedtls_mpi_write_binary( const mbedtls_mpi *X, unsigned char *buf, size_t buflen )
{
    size_t i, j, n;

    n = mbedtls_mpi_size( X );
 808af4e:	4606      	mov	r6, r0

    if( buflen < n )
 808af50:	d814      	bhi.n	808af7c <mbedtls_mpi_write_binary+0x3c>
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );

    memset( buf, 0, buflen );
 808af52:	4622      	mov	r2, r4
 808af54:	2100      	movs	r1, #0
 808af56:	4638      	mov	r0, r7
 808af58:	f009 f829 	bl	8093fae <memset>
 808af5c:	443c      	add	r4, r7

    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 808af5e:	2300      	movs	r3, #0
 808af60:	42b3      	cmp	r3, r6
 808af62:	d00e      	beq.n	808af82 <mbedtls_mpi_write_binary+0x42>
        buf[i] = (unsigned char)( X->p[j / ciL] >> ((j % ciL) << 3) );
 808af64:	68a8      	ldr	r0, [r5, #8]
 808af66:	00da      	lsls	r2, r3, #3
 808af68:	089f      	lsrs	r7, r3, #2
 808af6a:	f002 0118 	and.w	r1, r2, #24
 808af6e:	f850 2027 	ldr.w	r2, [r0, r7, lsl #2]
    if( buflen < n )
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );

    memset( buf, 0, buflen );

    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 808af72:	3301      	adds	r3, #1
        buf[i] = (unsigned char)( X->p[j / ciL] >> ((j % ciL) << 3) );
 808af74:	40ca      	lsrs	r2, r1
 808af76:	f804 2d01 	strb.w	r2, [r4, #-1]!
    if( buflen < n )
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );

    memset( buf, 0, buflen );

    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 808af7a:	e7f1      	b.n	808af60 <mbedtls_mpi_write_binary+0x20>
    size_t i, j, n;

    n = mbedtls_mpi_size( X );

    if( buflen < n )
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
 808af7c:	f06f 0007 	mvn.w	r0, #7
 808af80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    memset( buf, 0, buflen );

    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
        buf[i] = (unsigned char)( X->p[j / ciL] >> ((j % ciL) << 3) );

    return( 0 );
 808af82:	2000      	movs	r0, #0
}
 808af84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808af86 <mbedtls_mpi_shift_l>:

/*
 * Left-shift: X <<= count
 */
int mbedtls_mpi_shift_l( mbedtls_mpi *X, size_t count )
{
 808af86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808af88:	4604      	mov	r4, r0
 808af8a:	460d      	mov	r5, r1
    int ret;
    size_t i, v0, t1;
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count / (biL    );
 808af8c:	094e      	lsrs	r6, r1, #5
    t1 = count & (biL - 1);
 808af8e:	f001 071f 	and.w	r7, r1, #31

    i = mbedtls_mpi_bitlen( X ) + count;
 808af92:	f7ff ff7a 	bl	808ae8a <mbedtls_mpi_bitlen>

    if( X->n * biL < i )
 808af96:	6863      	ldr	r3, [r4, #4]
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count / (biL    );
    t1 = count & (biL - 1);

    i = mbedtls_mpi_bitlen( X ) + count;
 808af98:	4428      	add	r0, r5

    if( X->n * biL < i )
 808af9a:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
 808af9e:	d809      	bhi.n	808afb4 <mbedtls_mpi_shift_l+0x2e>
    ret = 0;

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 808afa0:	b346      	cbz	r6, 808aff4 <mbedtls_mpi_shift_l+0x6e>
    {
        for( i = X->n; i > v0; i-- )
 808afa2:	6863      	ldr	r3, [r4, #4]
 808afa4:	f06f 0103 	mvn.w	r1, #3
 808afa8:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 808afac:	3a01      	subs	r2, #1
 808afae:	0092      	lsls	r2, r2, #2
 808afb0:	4371      	muls	r1, r6
 808afb2:	e00b      	b.n	808afcc <mbedtls_mpi_shift_l+0x46>
    t1 = count & (biL - 1);

    i = mbedtls_mpi_bitlen( X ) + count;

    if( X->n * biL < i )
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 808afb4:	f010 011f 	ands.w	r1, r0, #31
 808afb8:	bf18      	it	ne
 808afba:	2101      	movne	r1, #1
 808afbc:	eb01 1150 	add.w	r1, r1, r0, lsr #5
 808afc0:	4620      	mov	r0, r4
 808afc2:	f7ff fec6 	bl	808ad52 <mbedtls_mpi_grow>
 808afc6:	2800      	cmp	r0, #0
 808afc8:	d0ea      	beq.n	808afa0 <mbedtls_mpi_shift_l+0x1a>
 808afca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
 808afcc:	42b3      	cmp	r3, r6
 808afce:	d906      	bls.n	808afde <mbedtls_mpi_shift_l+0x58>
            X->p[i - 1] = X->p[i - v0 - 1];
 808afd0:	68a0      	ldr	r0, [r4, #8]
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
 808afd2:	3b01      	subs	r3, #1
            X->p[i - 1] = X->p[i - v0 - 1];
 808afd4:	1885      	adds	r5, r0, r2
 808afd6:	586d      	ldr	r5, [r5, r1]
 808afd8:	5085      	str	r5, [r0, r2]
 808afda:	3a04      	subs	r2, #4
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
 808afdc:	e7f6      	b.n	808afcc <mbedtls_mpi_shift_l+0x46>
 808afde:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 808afe2:	3b01      	subs	r3, #1
 808afe4:	009b      	lsls	r3, r3, #2
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
            X->p[i - 1] = 0;
 808afe6:	2100      	movs	r1, #0
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
 808afe8:	1d1a      	adds	r2, r3, #4
 808afea:	d003      	beq.n	808aff4 <mbedtls_mpi_shift_l+0x6e>
            X->p[i - 1] = 0;
 808afec:	68a2      	ldr	r2, [r4, #8]
 808afee:	50d1      	str	r1, [r2, r3]
 808aff0:	3b04      	subs	r3, #4
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
 808aff2:	e7f9      	b.n	808afe8 <mbedtls_mpi_shift_l+0x62>
    }

    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
 808aff4:	b90f      	cbnz	r7, 808affa <mbedtls_mpi_shift_l+0x74>
    i = mbedtls_mpi_bitlen( X ) + count;

    if( X->n * biL < i )
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );

    ret = 0;
 808aff6:	2000      	movs	r0, #0
 808aff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808affa:	00b3      	lsls	r3, r6, #2
    }

    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
 808affc:	2200      	movs	r2, #0
    {
        for( i = v0; i < X->n; i++ )
        {
            r1 = X->p[i] >> (biL - t1);
 808affe:	f1c7 0e20 	rsb	lr, r7, #32
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
 808b002:	6861      	ldr	r1, [r4, #4]
 808b004:	428e      	cmp	r6, r1
 808b006:	d2f6      	bcs.n	808aff6 <mbedtls_mpi_shift_l+0x70>
        {
            r1 = X->p[i] >> (biL - t1);
 808b008:	68a0      	ldr	r0, [r4, #8]
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
 808b00a:	3601      	adds	r6, #1
        {
            r1 = X->p[i] >> (biL - t1);
 808b00c:	58c1      	ldr	r1, [r0, r3]
            X->p[i] <<= t1;
 808b00e:	fa01 f507 	lsl.w	r5, r1, r7
 808b012:	50c5      	str	r5, [r0, r3]
            X->p[i] |= r0;
 808b014:	68a0      	ldr	r0, [r4, #8]
 808b016:	58c5      	ldr	r5, [r0, r3]
 808b018:	432a      	orrs	r2, r5
 808b01a:	50c2      	str	r2, [r0, r3]
 808b01c:	3304      	adds	r3, #4
            r0 = r1;
 808b01e:	fa21 f20e 	lsr.w	r2, r1, lr
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
 808b022:	e7ee      	b.n	808b002 <mbedtls_mpi_shift_l+0x7c>

0808b024 <mbedtls_mpi_shift_r>:

/*
 * Right-shift: X >>= count
 */
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
 808b024:	b5f0      	push	{r4, r5, r6, r7, lr}
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count /  biL;
    v1 = count & (biL - 1);

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 808b026:	6843      	ldr	r3, [r0, #4]
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count /  biL;
 808b028:	094a      	lsrs	r2, r1, #5
    v1 = count & (biL - 1);

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 808b02a:	429a      	cmp	r2, r3
{
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count /  biL;
    v1 = count & (biL - 1);
 808b02c:	f001 011f 	and.w	r1, r1, #31

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 808b030:	d801      	bhi.n	808b036 <mbedtls_mpi_shift_r+0x12>
 808b032:	d105      	bne.n	808b040 <mbedtls_mpi_shift_r+0x1c>
 808b034:	b159      	cbz	r1, 808b04e <mbedtls_mpi_shift_r+0x2a>
            r0 = r1;
        }
    }

    return( 0 );
}
 808b036:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

    v0 = count /  biL;
    v1 = count & (biL - 1);

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
        return mbedtls_mpi_lset( X, 0 );
 808b03a:	2100      	movs	r1, #0
 808b03c:	f7ff bedf 	b.w	808adfe <mbedtls_mpi_lset>

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 808b040:	b1d2      	cbz	r2, 808b078 <mbedtls_mpi_shift_r+0x54>
 808b042:	2300      	movs	r3, #0
    {
        for( i = 0; i < X->n - v0; i++ )
 808b044:	6844      	ldr	r4, [r0, #4]
 808b046:	1aa4      	subs	r4, r4, r2
 808b048:	42a3      	cmp	r3, r4
 808b04a:	d305      	bcc.n	808b058 <mbedtls_mpi_shift_r+0x34>
 808b04c:	e001      	b.n	808b052 <mbedtls_mpi_shift_r+0x2e>
        return mbedtls_mpi_lset( X, 0 );

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 808b04e:	b35a      	cbz	r2, 808b0a8 <mbedtls_mpi_shift_r+0x84>
 808b050:	460b      	mov	r3, r1
 808b052:	009a      	lsls	r2, r3, #2
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
            X->p[i] = 0;
 808b054:	2500      	movs	r5, #0
 808b056:	e007      	b.n	808b068 <mbedtls_mpi_shift_r+0x44>
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];
 808b058:	6884      	ldr	r4, [r0, #8]
 808b05a:	189d      	adds	r5, r3, r2
 808b05c:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 808b060:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
 808b064:	3301      	adds	r3, #1
 808b066:	e7ed      	b.n	808b044 <mbedtls_mpi_shift_r+0x20>
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
 808b068:	6844      	ldr	r4, [r0, #4]
 808b06a:	42a3      	cmp	r3, r4
 808b06c:	d204      	bcs.n	808b078 <mbedtls_mpi_shift_r+0x54>
            X->p[i] = 0;
 808b06e:	6884      	ldr	r4, [r0, #8]
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
 808b070:	3301      	adds	r3, #1
            X->p[i] = 0;
 808b072:	50a5      	str	r5, [r4, r2]
 808b074:	3204      	adds	r2, #4
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
 808b076:	e7f7      	b.n	808b068 <mbedtls_mpi_shift_r+0x44>
    }

    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
 808b078:	b1b1      	cbz	r1, 808b0a8 <mbedtls_mpi_shift_r+0x84>
    {
        for( i = X->n; i > 0; i-- )
 808b07a:	6844      	ldr	r4, [r0, #4]
 * Right-shift: X >>= count
 */
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;
 808b07c:	2200      	movs	r2, #0
 808b07e:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 808b082:	3b01      	subs	r3, #1
 808b084:	009b      	lsls	r3, r3, #2
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
        {
            r1 = X->p[i - 1] << (biL - v1);
 808b086:	f1c1 0e20 	rsb	lr, r1, #32
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
 808b08a:	b16c      	cbz	r4, 808b0a8 <mbedtls_mpi_shift_r+0x84>
        {
            r1 = X->p[i - 1] << (biL - v1);
 808b08c:	6886      	ldr	r6, [r0, #8]
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
 808b08e:	3c01      	subs	r4, #1
        {
            r1 = X->p[i - 1] << (biL - v1);
 808b090:	58f5      	ldr	r5, [r6, r3]
            X->p[i - 1] >>= v1;
 808b092:	fa25 f701 	lsr.w	r7, r5, r1
 808b096:	50f7      	str	r7, [r6, r3]
            X->p[i - 1] |= r0;
 808b098:	6886      	ldr	r6, [r0, #8]
 808b09a:	58f7      	ldr	r7, [r6, r3]
 808b09c:	433a      	orrs	r2, r7
 808b09e:	50f2      	str	r2, [r6, r3]
 808b0a0:	3b04      	subs	r3, #4
            r0 = r1;
 808b0a2:	fa05 f20e 	lsl.w	r2, r5, lr
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
 808b0a6:	e7f0      	b.n	808b08a <mbedtls_mpi_shift_r+0x66>
            r0 = r1;
        }
    }

    return( 0 );
}
 808b0a8:	2000      	movs	r0, #0
 808b0aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808b0ac <mbedtls_mpi_cmp_abs>:

/*
 * Compare unsigned values
 */
int mbedtls_mpi_cmp_abs( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 808b0ac:	b570      	push	{r4, r5, r6, lr}
    size_t i, j;

    for( i = X->n; i > 0; i-- )
 808b0ae:	6843      	ldr	r3, [r0, #4]
 808b0b0:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 808b0b4:	3a01      	subs	r2, #1
 808b0b6:	0092      	lsls	r2, r2, #2
 808b0b8:	b12b      	cbz	r3, 808b0c6 <mbedtls_mpi_cmp_abs+0x1a>
        if( X->p[i - 1] != 0 )
 808b0ba:	6884      	ldr	r4, [r0, #8]
 808b0bc:	58a4      	ldr	r4, [r4, r2]
 808b0be:	3a04      	subs	r2, #4
 808b0c0:	b90c      	cbnz	r4, 808b0c6 <mbedtls_mpi_cmp_abs+0x1a>
 */
int mbedtls_mpi_cmp_abs( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
    size_t i, j;

    for( i = X->n; i > 0; i-- )
 808b0c2:	3b01      	subs	r3, #1
 808b0c4:	e7f8      	b.n	808b0b8 <mbedtls_mpi_cmp_abs+0xc>
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 808b0c6:	684c      	ldr	r4, [r1, #4]
 808b0c8:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 808b0cc:	3a01      	subs	r2, #1
 808b0ce:	0092      	lsls	r2, r2, #2
 808b0d0:	b1c4      	cbz	r4, 808b104 <mbedtls_mpi_cmp_abs+0x58>
        if( Y->p[j - 1] != 0 )
 808b0d2:	688d      	ldr	r5, [r1, #8]
 808b0d4:	58ae      	ldr	r6, [r5, r2]
 808b0d6:	3a04      	subs	r2, #4
 808b0d8:	b90e      	cbnz	r6, 808b0de <mbedtls_mpi_cmp_abs+0x32>

    for( i = X->n; i > 0; i-- )
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 808b0da:	3c01      	subs	r4, #1
 808b0dc:	e7f8      	b.n	808b0d0 <mbedtls_mpi_cmp_abs+0x24>
            break;

    if( i == 0 && j == 0 )
        return( 0 );

    if( i > j ) return(  1 );
 808b0de:	429c      	cmp	r4, r3
 808b0e0:	d30b      	bcc.n	808b0fa <mbedtls_mpi_cmp_abs+0x4e>
    if( j > i ) return( -1 );
 808b0e2:	d913      	bls.n	808b10c <mbedtls_mpi_cmp_abs+0x60>
 808b0e4:	e00b      	b.n	808b0fe <mbedtls_mpi_cmp_abs+0x52>
 808b0e6:	f1a2 0204 	sub.w	r2, r2, #4

    for( ; i > 0; i-- )
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
 808b0ea:	d308      	bcc.n	808b0fe <mbedtls_mpi_cmp_abs+0x52>
        return( 0 );

    if( i > j ) return(  1 );
    if( j > i ) return( -1 );

    for( ; i > 0; i-- )
 808b0ec:	3b01      	subs	r3, #1
 808b0ee:	b193      	cbz	r3, 808b116 <mbedtls_mpi_cmp_abs+0x6a>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
 808b0f0:	6881      	ldr	r1, [r0, #8]
 808b0f2:	588c      	ldr	r4, [r1, r2]
 808b0f4:	58a9      	ldr	r1, [r5, r2]
 808b0f6:	428c      	cmp	r4, r1
 808b0f8:	d9f5      	bls.n	808b0e6 <mbedtls_mpi_cmp_abs+0x3a>
            break;

    if( i == 0 && j == 0 )
        return( 0 );

    if( i > j ) return(  1 );
 808b0fa:	2001      	movs	r0, #1
 808b0fc:	bd70      	pop	{r4, r5, r6, pc}
    if( j > i ) return( -1 );
 808b0fe:	f04f 30ff 	mov.w	r0, #4294967295
 808b102:	bd70      	pop	{r4, r5, r6, pc}
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
    }

    return( 0 );
 808b104:	1c18      	adds	r0, r3, #0
 808b106:	bf18      	it	ne
 808b108:	2001      	movne	r0, #1
 808b10a:	bd70      	pop	{r4, r5, r6, pc}
 808b10c:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 808b110:	3a01      	subs	r2, #1
 808b112:	0092      	lsls	r2, r2, #2
 808b114:	e7eb      	b.n	808b0ee <mbedtls_mpi_cmp_abs+0x42>
 808b116:	4618      	mov	r0, r3
 808b118:	bd70      	pop	{r4, r5, r6, pc}

0808b11a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>:
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 808b11a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808b11e:	4616      	mov	r6, r2
 808b120:	b085      	sub	sp, #20
 808b122:	9303      	str	r3, [sp, #12]
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 808b124:	9b0e      	ldr	r3, [sp, #56]	; 0x38
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 808b126:	4681      	mov	r9, r0
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 808b128:	685a      	ldr	r2, [r3, #4]
 808b12a:	6873      	ldr	r3, [r6, #4]
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 808b12c:	468b      	mov	fp, r1
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 808b12e:	3301      	adds	r3, #1
 808b130:	429a      	cmp	r2, r3
 808b132:	d351      	bcc.n	808b1d8 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xbe>
 808b134:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 808b136:	6898      	ldr	r0, [r3, #8]
 808b138:	2800      	cmp	r0, #0
 808b13a:	d04d      	beq.n	808b1d8 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xbe>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );
 808b13c:	0092      	lsls	r2, r2, #2
 808b13e:	2100      	movs	r1, #0
 808b140:	f008 ff35 	bl	8093fae <memset>

    d = T->p;
 808b144:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    n = N->n;
 808b146:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );

    d = T->p;
 808b14a:	689b      	ldr	r3, [r3, #8]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
 808b14c:	f10a 0701 	add.w	r7, sl, #1
    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );

    d = T->p;
 808b150:	9300      	str	r3, [sp, #0]
    n = N->n;
    m = ( B->n < n ) ? B->n : n;
 808b152:	f8db 3004 	ldr.w	r3, [fp, #4]
    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );

    d = T->p;
 808b156:	9d00      	ldr	r5, [sp, #0]
 808b158:	4553      	cmp	r3, sl
 808b15a:	bf28      	it	cs
 808b15c:	4653      	movcs	r3, sl
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
 808b15e:	00bf      	lsls	r7, r7, #2
 808b160:	9302      	str	r3, [sp, #8]

    d = T->p;
    n = N->n;
    m = ( B->n < n ) ? B->n : n;

    for( i = 0; i < n; i++ )
 808b162:	2400      	movs	r4, #0
 808b164:	4554      	cmp	r4, sl
 808b166:	f8d9 0008 	ldr.w	r0, [r9, #8]
 808b16a:	d01b      	beq.n	808b1a4 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0x8a>
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 808b16c:	f8db 1008 	ldr.w	r1, [fp, #8]
    for( i = 0; i < n; i++ )
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
 808b170:	f850 8024 	ldr.w	r8, [r0, r4, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 808b174:	682a      	ldr	r2, [r5, #0]
 808b176:	680b      	ldr	r3, [r1, #0]

        mpi_mul_hlp( m, B->p, d, u0 );
 808b178:	9802      	ldr	r0, [sp, #8]
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 808b17a:	fb03 2308 	mla	r3, r3, r8, r2
 808b17e:	9a03      	ldr	r2, [sp, #12]

    d = T->p;
    n = N->n;
    m = ( B->n < n ) ? B->n : n;

    for( i = 0; i < n; i++ )
 808b180:	3401      	adds	r4, #1
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 808b182:	4353      	muls	r3, r2

        mpi_mul_hlp( m, B->p, d, u0 );
 808b184:	462a      	mov	r2, r5
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 808b186:	9301      	str	r3, [sp, #4]

        mpi_mul_hlp( m, B->p, d, u0 );
 808b188:	4643      	mov	r3, r8
 808b18a:	f7ff fbf9 	bl	808a980 <_ZL11mpi_mul_hlpjPmS_m>
        mpi_mul_hlp( n, N->p, d, u1 );
 808b18e:	9b01      	ldr	r3, [sp, #4]
 808b190:	462a      	mov	r2, r5
 808b192:	68b1      	ldr	r1, [r6, #8]
 808b194:	4650      	mov	r0, sl
 808b196:	f7ff fbf3 	bl	808a980 <_ZL11mpi_mul_hlpjPmS_m>

        *d++ = u0; d[n + 1] = 0;
 808b19a:	f845 8b04 	str.w	r8, [r5], #4
 808b19e:	2300      	movs	r3, #0
 808b1a0:	51eb      	str	r3, [r5, r7]

    d = T->p;
    n = N->n;
    m = ( B->n < n ) ? B->n : n;

    for( i = 0; i < n; i++ )
 808b1a2:	e7df      	b.n	808b164 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0x4a>
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );
 808b1a4:	9b00      	ldr	r3, [sp, #0]
 808b1a6:	1f39      	subs	r1, r7, #4
 808b1a8:	440b      	add	r3, r1
 808b1aa:	463a      	mov	r2, r7
 808b1ac:	4619      	mov	r1, r3
 808b1ae:	f008 fed8 	bl	8093f62 <memcpy>

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
 808b1b2:	4631      	mov	r1, r6
 808b1b4:	4648      	mov	r0, r9
 808b1b6:	f7ff ff79 	bl	808b0ac <mbedtls_mpi_cmp_abs>
 808b1ba:	2800      	cmp	r0, #0
        mpi_sub_hlp( n, N->p, A->p );
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
 808b1bc:	bfb8      	it	lt
 808b1be:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 808b1c0:	4620      	mov	r0, r4
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
        mpi_sub_hlp( n, N->p, A->p );
 808b1c2:	bfa7      	ittee	ge
 808b1c4:	f8d9 2008 	ldrge.w	r2, [r9, #8]
 808b1c8:	68b1      	ldrge	r1, [r6, #8]
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
 808b1ca:	689a      	ldrlt	r2, [r3, #8]
 808b1cc:	f8d9 1008 	ldrlt.w	r1, [r9, #8]
 808b1d0:	f7ff fbac 	bl	808a92c <_ZL11mpi_sub_hlpjPmS_>

    return( 0 );
 808b1d4:	2000      	movs	r0, #0
 808b1d6:	e001      	b.n	808b1dc <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xc2>
{
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 808b1d8:	f06f 0003 	mvn.w	r0, #3
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );

    return( 0 );
}
 808b1dc:	b005      	add	sp, #20
 808b1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808b1e2 <mbedtls_mpi_cmp_mpi>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 808b1e2:	b570      	push	{r4, r5, r6, lr}
    size_t i, j;

    for( i = X->n; i > 0; i-- )
 808b1e4:	6843      	ldr	r3, [r0, #4]
 808b1e6:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 808b1ea:	3a01      	subs	r2, #1
 808b1ec:	0092      	lsls	r2, r2, #2
 808b1ee:	b12b      	cbz	r3, 808b1fc <mbedtls_mpi_cmp_mpi+0x1a>
        if( X->p[i - 1] != 0 )
 808b1f0:	6884      	ldr	r4, [r0, #8]
 808b1f2:	58a4      	ldr	r4, [r4, r2]
 808b1f4:	3a04      	subs	r2, #4
 808b1f6:	b90c      	cbnz	r4, 808b1fc <mbedtls_mpi_cmp_mpi+0x1a>
 */
int mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
    size_t i, j;

    for( i = X->n; i > 0; i-- )
 808b1f8:	3b01      	subs	r3, #1
 808b1fa:	e7f8      	b.n	808b1ee <mbedtls_mpi_cmp_mpi+0xc>
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 808b1fc:	684c      	ldr	r4, [r1, #4]
 808b1fe:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 808b202:	3a01      	subs	r2, #1
 808b204:	0092      	lsls	r2, r2, #2
 808b206:	b364      	cbz	r4, 808b262 <mbedtls_mpi_cmp_mpi+0x80>
        if( Y->p[j - 1] != 0 )
 808b208:	688d      	ldr	r5, [r1, #8]
 808b20a:	58ae      	ldr	r6, [r5, r2]
 808b20c:	3a04      	subs	r2, #4
 808b20e:	b90e      	cbnz	r6, 808b214 <mbedtls_mpi_cmp_mpi+0x32>

    for( i = X->n; i > 0; i-- )
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 808b210:	3c01      	subs	r4, #1
 808b212:	e7f8      	b.n	808b206 <mbedtls_mpi_cmp_mpi+0x24>
            break;

    if( i == 0 && j == 0 )
        return( 0 );

    if( i > j ) return(  X->s );
 808b214:	429c      	cmp	r4, r3
 808b216:	d201      	bcs.n	808b21c <mbedtls_mpi_cmp_mpi+0x3a>
 808b218:	6802      	ldr	r2, [r0, #0]
 808b21a:	e025      	b.n	808b268 <mbedtls_mpi_cmp_mpi+0x86>
 808b21c:	6809      	ldr	r1, [r1, #0]
    if( j > i ) return( -Y->s );
 808b21e:	d901      	bls.n	808b224 <mbedtls_mpi_cmp_mpi+0x42>
 808b220:	424a      	negs	r2, r1
 808b222:	e021      	b.n	808b268 <mbedtls_mpi_cmp_mpi+0x86>

    if( X->s > 0 && Y->s < 0 ) return(  1 );
 808b224:	6802      	ldr	r2, [r0, #0]
 808b226:	2a00      	cmp	r2, #0
 808b228:	dd01      	ble.n	808b22e <mbedtls_mpi_cmp_mpi+0x4c>
 808b22a:	2900      	cmp	r1, #0
 808b22c:	db14      	blt.n	808b258 <mbedtls_mpi_cmp_mpi+0x76>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 808b22e:	2900      	cmp	r1, #0
 808b230:	dd01      	ble.n	808b236 <mbedtls_mpi_cmp_mpi+0x54>
 808b232:	2a00      	cmp	r2, #0
 808b234:	db12      	blt.n	808b25c <mbedtls_mpi_cmp_mpi+0x7a>
 808b236:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
 808b23a:	3901      	subs	r1, #1
 808b23c:	0089      	lsls	r1, r1, #2

    for( ; i > 0; i-- )
 808b23e:	b193      	cbz	r3, 808b266 <mbedtls_mpi_cmp_mpi+0x84>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 808b240:	6884      	ldr	r4, [r0, #8]
 808b242:	5866      	ldr	r6, [r4, r1]
 808b244:	586c      	ldr	r4, [r5, r1]
 808b246:	42a6      	cmp	r6, r4
 808b248:	d80e      	bhi.n	808b268 <mbedtls_mpi_cmp_mpi+0x86>
 808b24a:	f1a1 0104 	sub.w	r1, r1, #4
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 808b24e:	d201      	bcs.n	808b254 <mbedtls_mpi_cmp_mpi+0x72>
 808b250:	4252      	negs	r2, r2
 808b252:	e009      	b.n	808b268 <mbedtls_mpi_cmp_mpi+0x86>
    if( j > i ) return( -Y->s );

    if( X->s > 0 && Y->s < 0 ) return(  1 );
    if( Y->s > 0 && X->s < 0 ) return( -1 );

    for( ; i > 0; i-- )
 808b254:	3b01      	subs	r3, #1
 808b256:	e7f2      	b.n	808b23e <mbedtls_mpi_cmp_mpi+0x5c>
        return( 0 );

    if( i > j ) return(  X->s );
    if( j > i ) return( -Y->s );

    if( X->s > 0 && Y->s < 0 ) return(  1 );
 808b258:	2201      	movs	r2, #1
 808b25a:	e005      	b.n	808b268 <mbedtls_mpi_cmp_mpi+0x86>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 808b25c:	f04f 32ff 	mov.w	r2, #4294967295
 808b260:	e002      	b.n	808b268 <mbedtls_mpi_cmp_mpi+0x86>

    for( j = Y->n; j > 0; j-- )
        if( Y->p[j - 1] != 0 )
            break;

    if( i == 0 && j == 0 )
 808b262:	2b00      	cmp	r3, #0
 808b264:	d1d8      	bne.n	808b218 <mbedtls_mpi_cmp_mpi+0x36>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    }

    return( 0 );
 808b266:	461a      	mov	r2, r3
}
 808b268:	4610      	mov	r0, r2
 808b26a:	bd70      	pop	{r4, r5, r6, pc}

0808b26c <mbedtls_mpi_cmp_int>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_int( const mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 808b26c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];

    *p  = ( z < 0 ) ? -z : z;
 808b26e:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
 808b272:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
 808b276:	2900      	cmp	r1, #0
int mbedtls_mpi_cmp_int( const mbedtls_mpi *X, mbedtls_mpi_sint z )
{
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];

    *p  = ( z < 0 ) ? -z : z;
 808b278:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
 808b27a:	bfb4      	ite	lt
 808b27c:	f04f 33ff 	movlt.w	r3, #4294967295
 808b280:	2301      	movge	r3, #1
 808b282:	9301      	str	r3, [sp, #4]
    Y.n = 1;
    Y.p = p;

    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 808b284:	a901      	add	r1, sp, #4
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];

    *p  = ( z < 0 ) ? -z : z;
    Y.s = ( z < 0 ) ? -1 : 1;
    Y.n = 1;
 808b286:	2301      	movs	r3, #1
 808b288:	9302      	str	r3, [sp, #8]
    Y.p = p;
 808b28a:	f8cd d00c 	str.w	sp, [sp, #12]

    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 808b28e:	f7ff ffa8 	bl	808b1e2 <mbedtls_mpi_cmp_mpi>
}
 808b292:	b005      	add	sp, #20
 808b294:	f85d fb04 	ldr.w	pc, [sp], #4

0808b298 <mbedtls_mpi_add_abs>:
{
    int ret;
    size_t i, j;
    mbedtls_mpi_uint *o, *p, c, tmp;

    if( X == B )
 808b298:	4290      	cmp	r0, r2

/*
 * Unsigned addition: X = |A| + |B|  (HAC 14.7)
 */
int mbedtls_mpi_add_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b29a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808b29e:	4606      	mov	r6, r0
 808b2a0:	4615      	mov	r5, r2
    int ret;
    size_t i, j;
    mbedtls_mpi_uint *o, *p, c, tmp;

    if( X == B )
 808b2a2:	d006      	beq.n	808b2b2 <mbedtls_mpi_add_abs+0x1a>
    {
        const mbedtls_mpi *T = A; A = X; B = T;
    }

    if( X != A )
 808b2a4:	4288      	cmp	r0, r1
 808b2a6:	d005      	beq.n	808b2b4 <mbedtls_mpi_add_abs+0x1c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 808b2a8:	f7ff fd7f 	bl	808adaa <mbedtls_mpi_copy>
 808b2ac:	4607      	mov	r7, r0
 808b2ae:	b108      	cbz	r0, 808b2b4 <mbedtls_mpi_add_abs+0x1c>
 808b2b0:	e049      	b.n	808b346 <mbedtls_mpi_add_abs+0xae>
 808b2b2:	460d      	mov	r5, r1

    /*
     * X should always be positive as a result of unsigned additions.
     */
    X->s = 1;
 808b2b4:	2301      	movs	r3, #1
 808b2b6:	6033      	str	r3, [r6, #0]

    for( j = B->n; j > 0; j-- )
 808b2b8:	686c      	ldr	r4, [r5, #4]
 808b2ba:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 808b2be:	3b01      	subs	r3, #1
 808b2c0:	009b      	lsls	r3, r3, #2
 808b2c2:	b12c      	cbz	r4, 808b2d0 <mbedtls_mpi_add_abs+0x38>
        if( B->p[j - 1] != 0 )
 808b2c4:	68aa      	ldr	r2, [r5, #8]
 808b2c6:	58d2      	ldr	r2, [r2, r3]
 808b2c8:	3b04      	subs	r3, #4
 808b2ca:	b90a      	cbnz	r2, 808b2d0 <mbedtls_mpi_add_abs+0x38>
    /*
     * X should always be positive as a result of unsigned additions.
     */
    X->s = 1;

    for( j = B->n; j > 0; j-- )
 808b2cc:	3c01      	subs	r4, #1
 808b2ce:	e7f8      	b.n	808b2c2 <mbedtls_mpi_add_abs+0x2a>
        if( B->p[j - 1] != 0 )
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 808b2d0:	4621      	mov	r1, r4
 808b2d2:	4630      	mov	r0, r6
 808b2d4:	f7ff fd3d 	bl	808ad52 <mbedtls_mpi_grow>
 808b2d8:	4607      	mov	r7, r0
 808b2da:	2800      	cmp	r0, #0
 808b2dc:	d133      	bne.n	808b346 <mbedtls_mpi_add_abs+0xae>

    o = B->p; p = X->p; c = 0;
 808b2de:	68b3      	ldr	r3, [r6, #8]
 808b2e0:	f8d5 c008 	ldr.w	ip, [r5, #8]
 808b2e4:	4618      	mov	r0, r3
 808b2e6:	463d      	mov	r5, r7

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
 808b2e8:	4639      	mov	r1, r7
 808b2ea:	42a1      	cmp	r1, r4
 808b2ec:	d00f      	beq.n	808b30e <mbedtls_mpi_add_abs+0x76>
    {
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
 808b2ee:	6802      	ldr	r2, [r0, #0]
    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
    {
        tmp= *o;
 808b2f0:	f85c e021 	ldr.w	lr, [ip, r1, lsl #2]
        *p +=  c; c  = ( *p <  c );
 808b2f4:	18ad      	adds	r5, r5, r2
        *p += tmp; c += ( *p < tmp );
 808b2f6:	4475      	add	r5, lr
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
    {
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
 808b2f8:	bf2c      	ite	cs
 808b2fa:	2201      	movcs	r2, #1
 808b2fc:	2200      	movcc	r2, #0
        *p += tmp; c += ( *p < tmp );
 808b2fe:	f840 5b04 	str.w	r5, [r0], #4
    o = B->p; p = X->p; c = 0;

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
 808b302:	3101      	adds	r1, #1
    {
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
 808b304:	45ae      	cmp	lr, r5
 808b306:	bf94      	ite	ls
 808b308:	4615      	movls	r5, r2
 808b30a:	1c55      	addhi	r5, r2, #1
    o = B->p; p = X->p; c = 0;

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
 808b30c:	e7ed      	b.n	808b2ea <mbedtls_mpi_add_abs+0x52>
 808b30e:	ea4f 0884 	mov.w	r8, r4, lsl #2
 808b312:	4443      	add	r3, r8
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
    }

    while( c != 0 )
 808b314:	b1bd      	cbz	r5, 808b346 <mbedtls_mpi_add_abs+0xae>
    {
        if( i >= X->n )
 808b316:	6872      	ldr	r2, [r6, #4]
 808b318:	4294      	cmp	r4, r2
 808b31a:	f104 0401 	add.w	r4, r4, #1
 808b31e:	d306      	bcc.n	808b32e <mbedtls_mpi_add_abs+0x96>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 808b320:	4621      	mov	r1, r4
 808b322:	4630      	mov	r0, r6
 808b324:	f7ff fd15 	bl	808ad52 <mbedtls_mpi_grow>
 808b328:	b960      	cbnz	r0, 808b344 <mbedtls_mpi_add_abs+0xac>
            p = X->p + i;
 808b32a:	68b3      	ldr	r3, [r6, #8]
 808b32c:	4443      	add	r3, r8
        }

        *p += c; c = ( *p < c ); i++; p++;
 808b32e:	681a      	ldr	r2, [r3, #0]
 808b330:	f108 0804 	add.w	r8, r8, #4
 808b334:	442a      	add	r2, r5
 808b336:	4295      	cmp	r5, r2
 808b338:	f843 2b04 	str.w	r2, [r3], #4
 808b33c:	bf94      	ite	ls
 808b33e:	2500      	movls	r5, #0
 808b340:	2501      	movhi	r5, #1
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
    }

    while( c != 0 )
 808b342:	e7e7      	b.n	808b314 <mbedtls_mpi_add_abs+0x7c>
    {
        if( i >= X->n )
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 808b344:	4607      	mov	r7, r0
    }

cleanup:

    return( ret );
}
 808b346:	4638      	mov	r0, r7
 808b348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808b34c <mbedtls_mpi_sub_abs>:

/*
 * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)
 */
int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b34c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808b34e:	460f      	mov	r7, r1
 808b350:	b085      	sub	sp, #20
 808b352:	4606      	mov	r6, r0
    mbedtls_mpi TB;
    int ret;
    size_t n;

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 808b354:	4611      	mov	r1, r2
 808b356:	4638      	mov	r0, r7

/*
 * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)
 */
int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b358:	4615      	mov	r5, r2
    mbedtls_mpi TB;
    int ret;
    size_t n;

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 808b35a:	f7ff fea7 	bl	808b0ac <mbedtls_mpi_cmp_abs>
 808b35e:	2800      	cmp	r0, #0
 808b360:	db30      	blt.n	808b3c4 <mbedtls_mpi_sub_abs+0x78>
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808b362:	2301      	movs	r3, #1
 808b364:	9301      	str	r3, [sp, #4]
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    mbedtls_mpi_init( &TB );

    if( X == B )
 808b366:	42b5      	cmp	r5, r6
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808b368:	f04f 0300 	mov.w	r3, #0
 808b36c:	9302      	str	r3, [sp, #8]
    X->p = NULL;
 808b36e:	9303      	str	r3, [sp, #12]
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    mbedtls_mpi_init( &TB );

    if( X == B )
 808b370:	d106      	bne.n	808b380 <mbedtls_mpi_sub_abs+0x34>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 808b372:	4629      	mov	r1, r5
 808b374:	a801      	add	r0, sp, #4
 808b376:	f7ff fd18 	bl	808adaa <mbedtls_mpi_copy>
 808b37a:	4604      	mov	r4, r0
 808b37c:	b9e8      	cbnz	r0, 808b3ba <mbedtls_mpi_sub_abs+0x6e>
        B = &TB;
 808b37e:	ad01      	add	r5, sp, #4
    }

    if( X != A )
 808b380:	42b7      	cmp	r7, r6
 808b382:	d107      	bne.n	808b394 <mbedtls_mpi_sub_abs+0x48>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );

    /*
     * X should always be positive as a result of unsigned subtractions.
     */
    X->s = 1;
 808b384:	2301      	movs	r3, #1
 808b386:	6033      	str	r3, [r6, #0]

    ret = 0;

    for( n = B->n; n > 0; n-- )
 808b388:	6868      	ldr	r0, [r5, #4]
 808b38a:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 808b38e:	3b01      	subs	r3, #1
 808b390:	009b      	lsls	r3, r3, #2
 808b392:	e00b      	b.n	808b3ac <mbedtls_mpi_sub_abs+0x60>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
        B = &TB;
    }

    if( X != A )
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 808b394:	4639      	mov	r1, r7
 808b396:	4630      	mov	r0, r6
 808b398:	f7ff fd07 	bl	808adaa <mbedtls_mpi_copy>
 808b39c:	4604      	mov	r4, r0
 808b39e:	b960      	cbnz	r0, 808b3ba <mbedtls_mpi_sub_abs+0x6e>
 808b3a0:	e7f0      	b.n	808b384 <mbedtls_mpi_sub_abs+0x38>
    X->s = 1;

    ret = 0;

    for( n = B->n; n > 0; n-- )
        if( B->p[n - 1] != 0 )
 808b3a2:	68aa      	ldr	r2, [r5, #8]
 808b3a4:	58d2      	ldr	r2, [r2, r3]
 808b3a6:	3b04      	subs	r3, #4
 808b3a8:	b912      	cbnz	r2, 808b3b0 <mbedtls_mpi_sub_abs+0x64>
     */
    X->s = 1;

    ret = 0;

    for( n = B->n; n > 0; n-- )
 808b3aa:	3801      	subs	r0, #1
 808b3ac:	2800      	cmp	r0, #0
 808b3ae:	d1f8      	bne.n	808b3a2 <mbedtls_mpi_sub_abs+0x56>
        if( B->p[n - 1] != 0 )
            break;

    mpi_sub_hlp( n, B->p, X->p );
 808b3b0:	68b2      	ldr	r2, [r6, #8]
 808b3b2:	68a9      	ldr	r1, [r5, #8]
 808b3b4:	f7ff faba 	bl	808a92c <_ZL11mpi_sub_hlpjPmS_>
    /*
     * X should always be positive as a result of unsigned subtractions.
     */
    X->s = 1;

    ret = 0;
 808b3b8:	2400      	movs	r4, #0

    mpi_sub_hlp( n, B->p, X->p );

cleanup:

    mbedtls_mpi_free( &TB );
 808b3ba:	a801      	add	r0, sp, #4
 808b3bc:	f7ff fcb3 	bl	808ad26 <mbedtls_mpi_free>

    return( ret );
 808b3c0:	4620      	mov	r0, r4
 808b3c2:	e001      	b.n	808b3c8 <mbedtls_mpi_sub_abs+0x7c>
    mbedtls_mpi TB;
    int ret;
    size_t n;

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 808b3c4:	f06f 0009 	mvn.w	r0, #9
cleanup:

    mbedtls_mpi_free( &TB );

    return( ret );
}
 808b3c8:	b005      	add	sp, #20
 808b3ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808b3cc <mbedtls_mpi_add_mpi>:

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s = A->s;
 808b3ce:	680c      	ldr	r4, [r1, #0]

    if( A->s * B->s < 0 )
 808b3d0:	6813      	ldr	r3, [r2, #0]

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b3d2:	4605      	mov	r5, r0
    int ret, s = A->s;

    if( A->s * B->s < 0 )
 808b3d4:	4363      	muls	r3, r4

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b3d6:	460f      	mov	r7, r1
 808b3d8:	4616      	mov	r6, r2
    int ret, s = A->s;

    if( A->s * B->s < 0 )
 808b3da:	d513      	bpl.n	808b404 <mbedtls_mpi_add_mpi+0x38>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 808b3dc:	4611      	mov	r1, r2
 808b3de:	4638      	mov	r0, r7
 808b3e0:	f7ff fe64 	bl	808b0ac <mbedtls_mpi_cmp_abs>
 808b3e4:	2800      	cmp	r0, #0
 808b3e6:	db05      	blt.n	808b3f4 <mbedtls_mpi_add_mpi+0x28>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 808b3e8:	4632      	mov	r2, r6
 808b3ea:	4639      	mov	r1, r7
 808b3ec:	4628      	mov	r0, r5
 808b3ee:	f7ff ffad 	bl	808b34c <mbedtls_mpi_sub_abs>
 808b3f2:	e009      	b.n	808b408 <mbedtls_mpi_add_mpi+0x3c>
            X->s =  s;
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 808b3f4:	463a      	mov	r2, r7
 808b3f6:	4631      	mov	r1, r6
 808b3f8:	4628      	mov	r0, r5
 808b3fa:	f7ff ffa7 	bl	808b34c <mbedtls_mpi_sub_abs>
 808b3fe:	b928      	cbnz	r0, 808b40c <mbedtls_mpi_add_mpi+0x40>
            X->s = -s;
 808b400:	4264      	negs	r4, r4
 808b402:	e002      	b.n	808b40a <mbedtls_mpi_add_mpi+0x3e>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 808b404:	f7ff ff48 	bl	808b298 <mbedtls_mpi_add_abs>
 808b408:	b900      	cbnz	r0, 808b40c <mbedtls_mpi_add_mpi+0x40>
        X->s = s;
 808b40a:	602c      	str	r4, [r5, #0]
    }

cleanup:

    return( ret );
}
 808b40c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808b40e <mbedtls_mpi_sub_mpi>:

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b40e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s = A->s;
 808b410:	680c      	ldr	r4, [r1, #0]

    if( A->s * B->s > 0 )
 808b412:	6813      	ldr	r3, [r2, #0]

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b414:	4605      	mov	r5, r0
    int ret, s = A->s;

    if( A->s * B->s > 0 )
 808b416:	4363      	muls	r3, r4
 808b418:	2b00      	cmp	r3, #0

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b41a:	460f      	mov	r7, r1
 808b41c:	4616      	mov	r6, r2
    int ret, s = A->s;

    if( A->s * B->s > 0 )
 808b41e:	dd13      	ble.n	808b448 <mbedtls_mpi_sub_mpi+0x3a>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 808b420:	4611      	mov	r1, r2
 808b422:	4638      	mov	r0, r7
 808b424:	f7ff fe42 	bl	808b0ac <mbedtls_mpi_cmp_abs>
 808b428:	2800      	cmp	r0, #0
 808b42a:	db05      	blt.n	808b438 <mbedtls_mpi_sub_mpi+0x2a>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 808b42c:	4632      	mov	r2, r6
 808b42e:	4639      	mov	r1, r7
 808b430:	4628      	mov	r0, r5
 808b432:	f7ff ff8b 	bl	808b34c <mbedtls_mpi_sub_abs>
 808b436:	e009      	b.n	808b44c <mbedtls_mpi_sub_mpi+0x3e>
            X->s =  s;
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 808b438:	463a      	mov	r2, r7
 808b43a:	4631      	mov	r1, r6
 808b43c:	4628      	mov	r0, r5
 808b43e:	f7ff ff85 	bl	808b34c <mbedtls_mpi_sub_abs>
 808b442:	b928      	cbnz	r0, 808b450 <mbedtls_mpi_sub_mpi+0x42>
            X->s = -s;
 808b444:	4264      	negs	r4, r4
 808b446:	e002      	b.n	808b44e <mbedtls_mpi_sub_mpi+0x40>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 808b448:	f7ff ff26 	bl	808b298 <mbedtls_mpi_add_abs>
 808b44c:	b900      	cbnz	r0, 808b450 <mbedtls_mpi_sub_mpi+0x42>
        X->s = s;
 808b44e:	602c      	str	r4, [r5, #0]
    }

cleanup:

    return( ret );
}
 808b450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808b452 <mbedtls_mpi_add_int>:

/*
 * Signed addition: X = A + b
 */
int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 808b452:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
 808b454:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 808b458:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
 808b45c:	2a00      	cmp	r2, #0
int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
 808b45e:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
 808b460:	bfb4      	ite	lt
 808b462:	f04f 33ff 	movlt.w	r3, #4294967295
 808b466:	2301      	movge	r3, #1
 808b468:	9301      	str	r3, [sp, #4]
    _B.n = 1;
    _B.p = p;

    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 808b46a:	aa01      	add	r2, sp, #4
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
    _B.s = ( b < 0 ) ? -1 : 1;
    _B.n = 1;
 808b46c:	2301      	movs	r3, #1
 808b46e:	9302      	str	r3, [sp, #8]
    _B.p = p;
 808b470:	f8cd d00c 	str.w	sp, [sp, #12]

    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 808b474:	f7ff ffaa 	bl	808b3cc <mbedtls_mpi_add_mpi>
}
 808b478:	b005      	add	sp, #20
 808b47a:	f85d fb04 	ldr.w	pc, [sp], #4

0808b47e <mbedtls_mpi_sub_int>:

/*
 * Signed subtraction: X = A - b
 */
int mbedtls_mpi_sub_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 808b47e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
 808b480:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 808b484:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
 808b488:	2a00      	cmp	r2, #0
int mbedtls_mpi_sub_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
 808b48a:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
 808b48c:	bfb4      	ite	lt
 808b48e:	f04f 33ff 	movlt.w	r3, #4294967295
 808b492:	2301      	movge	r3, #1
 808b494:	9301      	str	r3, [sp, #4]
    _B.n = 1;
    _B.p = p;

    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 808b496:	aa01      	add	r2, sp, #4
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
    _B.s = ( b < 0 ) ? -1 : 1;
    _B.n = 1;
 808b498:	2301      	movs	r3, #1
 808b49a:	9302      	str	r3, [sp, #8]
    _B.p = p;
 808b49c:	f8cd d00c 	str.w	sp, [sp, #12]

    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 808b4a0:	f7ff ffb5 	bl	808b40e <mbedtls_mpi_sub_mpi>
}
 808b4a4:	b005      	add	sp, #20
 808b4a6:	f85d fb04 	ldr.w	pc, [sp], #4

0808b4aa <mbedtls_mpi_mul_mpi>:

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b4aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808b4ae:	2300      	movs	r3, #0

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b4b0:	b086      	sub	sp, #24
 808b4b2:	4615      	mov	r5, r2
    size_t i, j;
    mbedtls_mpi TA, TB;

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 808b4b4:	4288      	cmp	r0, r1
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808b4b6:	f04f 0201 	mov.w	r2, #1

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b4ba:	4681      	mov	r9, r0
 808b4bc:	460e      	mov	r6, r1
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808b4be:	e88d 000c 	stmia.w	sp, {r2, r3}
    X->p = NULL;
 808b4c2:	9302      	str	r3, [sp, #8]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808b4c4:	9203      	str	r2, [sp, #12]
    X->n = 0;
 808b4c6:	9304      	str	r3, [sp, #16]
    X->p = NULL;
 808b4c8:	9305      	str	r3, [sp, #20]
    size_t i, j;
    mbedtls_mpi TA, TB;

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 808b4ca:	d106      	bne.n	808b4da <mbedtls_mpi_mul_mpi+0x30>
 808b4cc:	4668      	mov	r0, sp
 808b4ce:	f7ff fc6c 	bl	808adaa <mbedtls_mpi_copy>
 808b4d2:	4604      	mov	r4, r0
 808b4d4:	2800      	cmp	r0, #0
 808b4d6:	d14d      	bne.n	808b574 <mbedtls_mpi_mul_mpi+0xca>
 808b4d8:	466e      	mov	r6, sp
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 808b4da:	45a9      	cmp	r9, r5
 808b4dc:	d107      	bne.n	808b4ee <mbedtls_mpi_mul_mpi+0x44>
 808b4de:	4649      	mov	r1, r9
 808b4e0:	a803      	add	r0, sp, #12
 808b4e2:	f7ff fc62 	bl	808adaa <mbedtls_mpi_copy>
 808b4e6:	4604      	mov	r4, r0
 808b4e8:	2800      	cmp	r0, #0
 808b4ea:	d143      	bne.n	808b574 <mbedtls_mpi_mul_mpi+0xca>
 808b4ec:	ad03      	add	r5, sp, #12

    for( i = A->n; i > 0; i-- )
 808b4ee:	f8d6 a004 	ldr.w	sl, [r6, #4]
 808b4f2:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
 808b4f6:	3b01      	subs	r3, #1
 808b4f8:	009b      	lsls	r3, r3, #2
 808b4fa:	f1ba 0f00 	cmp.w	sl, #0
 808b4fe:	d006      	beq.n	808b50e <mbedtls_mpi_mul_mpi+0x64>
        if( A->p[i - 1] != 0 )
 808b500:	68b2      	ldr	r2, [r6, #8]
 808b502:	58d2      	ldr	r2, [r2, r3]
 808b504:	3b04      	subs	r3, #4
 808b506:	b912      	cbnz	r2, 808b50e <mbedtls_mpi_mul_mpi+0x64>
    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }

    for( i = A->n; i > 0; i-- )
 808b508:	f10a 3aff 	add.w	sl, sl, #4294967295
 808b50c:	e7f5      	b.n	808b4fa <mbedtls_mpi_mul_mpi+0x50>
        if( A->p[i - 1] != 0 )
            break;

    for( j = B->n; j > 0; j-- )
 808b50e:	686f      	ldr	r7, [r5, #4]
 808b510:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
 808b514:	3b01      	subs	r3, #1
 808b516:	009b      	lsls	r3, r3, #2
 808b518:	b12f      	cbz	r7, 808b526 <mbedtls_mpi_mul_mpi+0x7c>
        if( B->p[j - 1] != 0 )
 808b51a:	68aa      	ldr	r2, [r5, #8]
 808b51c:	58d2      	ldr	r2, [r2, r3]
 808b51e:	3b04      	subs	r3, #4
 808b520:	b90a      	cbnz	r2, 808b526 <mbedtls_mpi_mul_mpi+0x7c>

    for( i = A->n; i > 0; i-- )
        if( A->p[i - 1] != 0 )
            break;

    for( j = B->n; j > 0; j-- )
 808b522:	3f01      	subs	r7, #1
 808b524:	e7f8      	b.n	808b518 <mbedtls_mpi_mul_mpi+0x6e>
        if( B->p[j - 1] != 0 )
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
 808b526:	eb0a 0107 	add.w	r1, sl, r7
 808b52a:	4648      	mov	r0, r9
 808b52c:	f7ff fc11 	bl	808ad52 <mbedtls_mpi_grow>
 808b530:	4604      	mov	r4, r0
 808b532:	b9f8      	cbnz	r0, 808b574 <mbedtls_mpi_mul_mpi+0xca>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 808b534:	4601      	mov	r1, r0
 808b536:	4648      	mov	r0, r9
 808b538:	f7ff fc61 	bl	808adfe <mbedtls_mpi_lset>
 808b53c:	4604      	mov	r4, r0
 808b53e:	b9c8      	cbnz	r0, 808b574 <mbedtls_mpi_mul_mpi+0xca>
 808b540:	f107 4880 	add.w	r8, r7, #1073741824	; 0x40000000
 808b544:	f108 38ff 	add.w	r8, r8, #4294967295
 808b548:	ea4f 0888 	mov.w	r8, r8, lsl #2

    for( i++; j > 0; j-- )
 808b54c:	b16f      	cbz	r7, 808b56a <mbedtls_mpi_mul_mpi+0xc0>
        mpi_mul_hlp( i - 1, A->p, X->p + j - 1, B->p[j - 1] );
 808b54e:	68ab      	ldr	r3, [r5, #8]
 808b550:	f8d9 2008 	ldr.w	r2, [r9, #8]
 808b554:	f853 3008 	ldr.w	r3, [r3, r8]
 808b558:	4442      	add	r2, r8
 808b55a:	68b1      	ldr	r1, [r6, #8]
 808b55c:	4650      	mov	r0, sl
 808b55e:	f7ff fa0f 	bl	808a980 <_ZL11mpi_mul_hlpjPmS_m>
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    for( i++; j > 0; j-- )
 808b562:	3f01      	subs	r7, #1
 808b564:	f1a8 0804 	sub.w	r8, r8, #4
 808b568:	e7f0      	b.n	808b54c <mbedtls_mpi_mul_mpi+0xa2>
        mpi_mul_hlp( i - 1, A->p, X->p + j - 1, B->p[j - 1] );

    X->s = A->s * B->s;
 808b56a:	6832      	ldr	r2, [r6, #0]
 808b56c:	682b      	ldr	r3, [r5, #0]
 808b56e:	4353      	muls	r3, r2
 808b570:	f8c9 3000 	str.w	r3, [r9]

cleanup:

    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
 808b574:	a803      	add	r0, sp, #12
 808b576:	f7ff fbd6 	bl	808ad26 <mbedtls_mpi_free>
 808b57a:	4668      	mov	r0, sp
 808b57c:	f7ff fbd3 	bl	808ad26 <mbedtls_mpi_free>

    return( ret );
}
 808b580:	4620      	mov	r0, r4
 808b582:	b006      	add	sp, #24
 808b584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808b588 <mbedtls_mpi_mul_int>:

/*
 * Baseline multiplication: X = A * b
 */
int mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b )
{
 808b588:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    _B.s = 1;
 808b58a:	2301      	movs	r3, #1
    _B.n = 1;
    _B.p = p;
    p[0] = b;
 808b58c:	9200      	str	r2, [sp, #0]

    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 808b58e:	aa01      	add	r2, sp, #4
int mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b )
{
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    _B.s = 1;
 808b590:	9301      	str	r3, [sp, #4]
    _B.n = 1;
 808b592:	9302      	str	r3, [sp, #8]
    _B.p = p;
 808b594:	f8cd d00c 	str.w	sp, [sp, #12]
    p[0] = b;

    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 808b598:	f7ff ff87 	bl	808b4aa <mbedtls_mpi_mul_mpi>
}
 808b59c:	b005      	add	sp, #20
 808b59e:	f85d fb04 	ldr.w	pc, [sp], #4

0808b5a2 <mbedtls_mpi_div_mpi>:

/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b5a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808b5a6:	b09b      	sub	sp, #108	; 0x6c
 808b5a8:	9001      	str	r0, [sp, #4]
 808b5aa:	460f      	mov	r7, r1
    int ret;
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 808b5ac:	4618      	mov	r0, r3
 808b5ae:	2100      	movs	r1, #0

/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b5b0:	4690      	mov	r8, r2
 808b5b2:	9304      	str	r3, [sp, #16]
    int ret;
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 808b5b4:	f7ff fe5a 	bl	808b26c <mbedtls_mpi_cmp_int>
 808b5b8:	2800      	cmp	r0, #0
 808b5ba:	f000 81ad 	beq.w	808b918 <mbedtls_mpi_div_mpi+0x376>
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808b5be:	2400      	movs	r4, #0
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808b5c0:	2501      	movs	r5, #1
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 808b5c2:	9904      	ldr	r1, [sp, #16]
 808b5c4:	4640      	mov	r0, r8
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808b5c6:	950b      	str	r5, [sp, #44]	; 0x2c
    X->n = 0;
 808b5c8:	940c      	str	r4, [sp, #48]	; 0x30
    X->p = NULL;
 808b5ca:	940d      	str	r4, [sp, #52]	; 0x34
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808b5cc:	950e      	str	r5, [sp, #56]	; 0x38
    X->n = 0;
 808b5ce:	940f      	str	r4, [sp, #60]	; 0x3c
    X->p = NULL;
 808b5d0:	9410      	str	r4, [sp, #64]	; 0x40
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808b5d2:	9511      	str	r5, [sp, #68]	; 0x44
    X->n = 0;
 808b5d4:	9412      	str	r4, [sp, #72]	; 0x48
    X->p = NULL;
 808b5d6:	9413      	str	r4, [sp, #76]	; 0x4c
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808b5d8:	9514      	str	r5, [sp, #80]	; 0x50
    X->n = 0;
 808b5da:	9415      	str	r4, [sp, #84]	; 0x54
    X->p = NULL;
 808b5dc:	9416      	str	r4, [sp, #88]	; 0x58
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808b5de:	9517      	str	r5, [sp, #92]	; 0x5c
    X->n = 0;
 808b5e0:	9418      	str	r4, [sp, #96]	; 0x60
    X->p = NULL;
 808b5e2:	9419      	str	r4, [sp, #100]	; 0x64
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 808b5e4:	f7ff fd62 	bl	808b0ac <mbedtls_mpi_cmp_abs>
 808b5e8:	42a0      	cmp	r0, r4
 808b5ea:	da16      	bge.n	808b61a <mbedtls_mpi_div_mpi+0x78>
    {
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 808b5ec:	9b01      	ldr	r3, [sp, #4]
 808b5ee:	b90b      	cbnz	r3, 808b5f4 <mbedtls_mpi_div_mpi+0x52>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 808b5f0:	b94f      	cbnz	r7, 808b606 <mbedtls_mpi_div_mpi+0x64>
 808b5f2:	e010      	b.n	808b616 <mbedtls_mpi_div_mpi+0x74>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    {
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 808b5f4:	4621      	mov	r1, r4
 808b5f6:	9801      	ldr	r0, [sp, #4]
 808b5f8:	f7ff fc01 	bl	808adfe <mbedtls_mpi_lset>
 808b5fc:	4604      	mov	r4, r0
 808b5fe:	2800      	cmp	r0, #0
 808b600:	f040 8179 	bne.w	808b8f6 <mbedtls_mpi_div_mpi+0x354>
 808b604:	e7f4      	b.n	808b5f0 <mbedtls_mpi_div_mpi+0x4e>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 808b606:	4641      	mov	r1, r8
 808b608:	4638      	mov	r0, r7
 808b60a:	f7ff fbce 	bl	808adaa <mbedtls_mpi_copy>
 808b60e:	4604      	mov	r4, r0
 808b610:	2800      	cmp	r0, #0
 808b612:	f040 8170 	bne.w	808b8f6 <mbedtls_mpi_div_mpi+0x354>
        return( 0 );
 808b616:	2000      	movs	r0, #0
 808b618:	e180      	b.n	808b91c <mbedtls_mpi_div_mpi+0x37a>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
 808b61a:	4641      	mov	r1, r8
 808b61c:	a80b      	add	r0, sp, #44	; 0x2c
 808b61e:	f7ff fbc4 	bl	808adaa <mbedtls_mpi_copy>
 808b622:	4604      	mov	r4, r0
 808b624:	2800      	cmp	r0, #0
 808b626:	f040 8166 	bne.w	808b8f6 <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
 808b62a:	ae0e      	add	r6, sp, #56	; 0x38
 808b62c:	9904      	ldr	r1, [sp, #16]
 808b62e:	4630      	mov	r0, r6
 808b630:	f7ff fbbb 	bl	808adaa <mbedtls_mpi_copy>
 808b634:	4604      	mov	r4, r0
 808b636:	2800      	cmp	r0, #0
 808b638:	f040 815d 	bne.w	808b8f6 <mbedtls_mpi_div_mpi+0x354>
    X.s = Y.s = 1;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 808b63c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 808b640:	a811      	add	r0, sp, #68	; 0x44
 808b642:	3102      	adds	r1, #2
        return( 0 );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    X.s = Y.s = 1;
 808b644:	950e      	str	r5, [sp, #56]	; 0x38
 808b646:	950b      	str	r5, [sp, #44]	; 0x2c

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 808b648:	f7ff fb83 	bl	808ad52 <mbedtls_mpi_grow>
 808b64c:	4604      	mov	r4, r0
 808b64e:	2800      	cmp	r0, #0
 808b650:	f040 8151 	bne.w	808b8f6 <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
 808b654:	4601      	mov	r1, r0
 808b656:	a811      	add	r0, sp, #68	; 0x44
 808b658:	f7ff fbd1 	bl	808adfe <mbedtls_mpi_lset>
 808b65c:	4604      	mov	r4, r0
 808b65e:	2800      	cmp	r0, #0
 808b660:	f040 8149 	bne.w	808b8f6 <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
 808b664:	2102      	movs	r1, #2
 808b666:	a814      	add	r0, sp, #80	; 0x50
 808b668:	f7ff fb73 	bl	808ad52 <mbedtls_mpi_grow>
 808b66c:	4604      	mov	r4, r0
 808b66e:	2800      	cmp	r0, #0
 808b670:	f040 8141 	bne.w	808b8f6 <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
 808b674:	2103      	movs	r1, #3
 808b676:	a817      	add	r0, sp, #92	; 0x5c
 808b678:	f7ff fb6b 	bl	808ad52 <mbedtls_mpi_grow>
 808b67c:	4604      	mov	r4, r0
 808b67e:	2800      	cmp	r0, #0
 808b680:	f040 8139 	bne.w	808b8f6 <mbedtls_mpi_div_mpi+0x354>

    k = mbedtls_mpi_bitlen( &Y ) % biL;
 808b684:	4630      	mov	r0, r6
 808b686:	f7ff fc00 	bl	808ae8a <mbedtls_mpi_bitlen>
 808b68a:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
 808b68e:	281f      	cmp	r0, #31
 808b690:	d013      	beq.n	808b6ba <mbedtls_mpi_div_mpi+0x118>
    {
        k = biL - 1 - k;
 808b692:	f1c0 031f 	rsb	r3, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 808b696:	4619      	mov	r1, r3
 808b698:	a80b      	add	r0, sp, #44	; 0x2c
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );

    k = mbedtls_mpi_bitlen( &Y ) % biL;
    if( k < biL - 1 )
    {
        k = biL - 1 - k;
 808b69a:	9303      	str	r3, [sp, #12]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 808b69c:	f7ff fc73 	bl	808af86 <mbedtls_mpi_shift_l>
 808b6a0:	4604      	mov	r4, r0
 808b6a2:	2800      	cmp	r0, #0
 808b6a4:	f040 8127 	bne.w	808b8f6 <mbedtls_mpi_div_mpi+0x354>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
 808b6a8:	9903      	ldr	r1, [sp, #12]
 808b6aa:	4630      	mov	r0, r6
 808b6ac:	f7ff fc6b 	bl	808af86 <mbedtls_mpi_shift_l>
 808b6b0:	4604      	mov	r4, r0
 808b6b2:	2800      	cmp	r0, #0
 808b6b4:	f040 811f 	bne.w	808b8f6 <mbedtls_mpi_div_mpi+0x354>
 808b6b8:	e000      	b.n	808b6bc <mbedtls_mpi_div_mpi+0x11a>
    }
    else k = 0;
 808b6ba:	9403      	str	r4, [sp, #12]

    n = X.n - 1;
 808b6bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    t = Y.n - 1;
 808b6be:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    }
    else k = 0;

    n = X.n - 1;
 808b6c2:	f105 39ff 	add.w	r9, r5, #4294967295
    t = Y.n - 1;
 808b6c6:	f10a 33ff 	add.w	r3, sl, #4294967295
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 808b6ca:	ebc3 0b09 	rsb	fp, r3, r9
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    }
    else k = 0;

    n = X.n - 1;
    t = Y.n - 1;
 808b6ce:	9300      	str	r3, [sp, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 808b6d0:	ea4f 134b 	mov.w	r3, fp, lsl #5
 808b6d4:	4619      	mov	r1, r3
 808b6d6:	4630      	mov	r0, r6
 808b6d8:	9302      	str	r3, [sp, #8]
 808b6da:	f7ff fc54 	bl	808af86 <mbedtls_mpi_shift_l>
 808b6de:	4604      	mov	r4, r0
 808b6e0:	2800      	cmp	r0, #0
 808b6e2:	f040 8108 	bne.w	808b8f6 <mbedtls_mpi_div_mpi+0x354>

    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
    {
        Z.p[n - t]++;
 808b6e6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2

    n = X.n - 1;
    t = Y.n - 1;
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );

    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 808b6ea:	4631      	mov	r1, r6
 808b6ec:	a80b      	add	r0, sp, #44	; 0x2c
 808b6ee:	f7ff fd78 	bl	808b1e2 <mbedtls_mpi_cmp_mpi>
 808b6f2:	2800      	cmp	r0, #0
 808b6f4:	db0e      	blt.n	808b714 <mbedtls_mpi_div_mpi+0x172>
    {
        Z.p[n - t]++;
 808b6f6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 808b6f8:	f851 200b 	ldr.w	r2, [r1, fp]
 808b6fc:	3201      	adds	r2, #1
 808b6fe:	f841 200b 	str.w	r2, [r1, fp]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
 808b702:	a90b      	add	r1, sp, #44	; 0x2c
 808b704:	4632      	mov	r2, r6
 808b706:	4608      	mov	r0, r1
 808b708:	f7ff fe81 	bl	808b40e <mbedtls_mpi_sub_mpi>
 808b70c:	4604      	mov	r4, r0
 808b70e:	2800      	cmp	r0, #0
 808b710:	d0eb      	beq.n	808b6ea <mbedtls_mpi_div_mpi+0x148>
 808b712:	e0f0      	b.n	808b8f6 <mbedtls_mpi_div_mpi+0x354>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
 808b714:	9902      	ldr	r1, [sp, #8]
 808b716:	4630      	mov	r0, r6
 808b718:	f7ff fc84 	bl	808b024 <mbedtls_mpi_shift_r>
 808b71c:	4604      	mov	r4, r0
 808b71e:	2800      	cmp	r0, #0
 808b720:	f040 80e9 	bne.w	808b8f6 <mbedtls_mpi_div_mpi+0x354>

    for( i = n; i > t ; i-- )
    {
        if( X.p[i] >= Y.p[t] )
 808b724:	9b00      	ldr	r3, [sp, #0]
 808b726:	f105 4680 	add.w	r6, r5, #1073741824	; 0x40000000
 808b72a:	009b      	lsls	r3, r3, #2
 808b72c:	9305      	str	r3, [sp, #20]
        do
        {
            Z.p[i - t - 1]--;

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 808b72e:	3b04      	subs	r3, #4
 808b730:	9308      	str	r3, [sp, #32]
 808b732:	f105 6300 	add.w	r3, r5, #134217728	; 0x8000000
 808b736:	3b01      	subs	r3, #1
 808b738:	3e01      	subs	r6, #1
 808b73a:	ebca 0606 	rsb	r6, sl, r6
 808b73e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 808b742:	ebca 0a03 	rsb	sl, sl, r3
 808b746:	ea4f 134a 	mov.w	r3, sl, lsl #5
 808b74a:	3d02      	subs	r5, #2
 808b74c:	00b6      	lsls	r6, r6, #2
 808b74e:	9302      	str	r3, [sp, #8]
 808b750:	00ad      	lsls	r5, r5, #2
        Z.p[n - t]++;
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );

    for( i = n; i > t ; i-- )
 808b752:	9b00      	ldr	r3, [sp, #0]
 808b754:	4599      	cmp	r9, r3
 808b756:	f240 80a8 	bls.w	808b8aa <mbedtls_mpi_div_mpi+0x308>
    {
        if( X.p[i] >= Y.p[t] )
 808b75a:	9805      	ldr	r0, [sp, #20]
 808b75c:	990d      	ldr	r1, [sp, #52]	; 0x34
 808b75e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 808b760:	1d2b      	adds	r3, r5, #4
 808b762:	5812      	ldr	r2, [r2, r0]
 808b764:	9309      	str	r3, [sp, #36]	; 0x24
 808b766:	58cb      	ldr	r3, [r1, r3]
 808b768:	9813      	ldr	r0, [sp, #76]	; 0x4c
 808b76a:	4293      	cmp	r3, r2
 808b76c:	d303      	bcc.n	808b776 <mbedtls_mpi_div_mpi+0x1d4>
            Z.p[i - t - 1] = ~0;
 808b76e:	f04f 33ff 	mov.w	r3, #4294967295
 808b772:	5183      	str	r3, [r0, r6]
 808b774:	e01b      	b.n	808b7ae <mbedtls_mpi_div_mpi+0x20c>
        else
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 808b776:	eb00 0a06 	add.w	sl, r0, r6
 808b77a:	5948      	ldr	r0, [r1, r5]
#endif

    /*
     * Check for overflow
     */
    if( 0 == d || u1 >= d )
 808b77c:	b19a      	cbz	r2, 808b7a6 <mbedtls_mpi_div_mpi+0x204>

        return ( ~0 );
    }

#if defined(MBEDTLS_HAVE_UDBL)
    dividend  = (mbedtls_t_udbl) u1 << biL;
 808b77e:	9307      	str	r3, [sp, #28]
 808b780:	2300      	movs	r3, #0
 808b782:	9306      	str	r3, [sp, #24]
    dividend |= (mbedtls_t_udbl) u0;
    quotient = dividend / d;
 808b784:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 808b788:	ea4b 0b00 	orr.w	fp, fp, r0
 808b78c:	4658      	mov	r0, fp
 808b78e:	4661      	mov	r1, ip
 808b790:	f008 f8e8 	bl	8093964 <__aeabi_uldivmod>
        quotient = ( (mbedtls_t_udbl) 1 << biL ) - 1;

    if( r != NULL )
        *r = (mbedtls_mpi_uint)( dividend - (quotient * d ) );

    return (mbedtls_mpi_uint) quotient;
 808b794:	2300      	movs	r3, #0
 808b796:	f04f 32ff 	mov.w	r2, #4294967295
 808b79a:	428b      	cmp	r3, r1
 808b79c:	bf08      	it	eq
 808b79e:	4282      	cmpeq	r2, r0
 808b7a0:	d203      	bcs.n	808b7aa <mbedtls_mpi_div_mpi+0x208>
 808b7a2:	4610      	mov	r0, r2
 808b7a4:	e001      	b.n	808b7aa <mbedtls_mpi_div_mpi+0x208>
     */
    if( 0 == d || u1 >= d )
    {
        if (r != NULL) *r = ~0;

        return ( ~0 );
 808b7a6:	f04f 30ff 	mov.w	r0, #4294967295
        if( X.p[i] >= Y.p[t] )
            Z.p[i - t - 1] = ~0;
        else
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
                                                            Y.p[t], NULL);
 808b7aa:	f8ca 0000 	str.w	r0, [sl]
        }

        Z.p[i - t - 1]++;
 808b7ae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 808b7b0:	f1a5 0a04 	sub.w	sl, r5, #4
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
                                                            Y.p[t], NULL);
        }

        Z.p[i - t - 1]++;
 808b7b4:	5993      	ldr	r3, [r2, r6]
 808b7b6:	3301      	adds	r3, #1
 808b7b8:	5193      	str	r3, [r2, r6]
        do
        {
            Z.p[i - t - 1]--;
 808b7ba:	9a13      	ldr	r2, [sp, #76]	; 0x4c

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 808b7bc:	2100      	movs	r1, #0
        }

        Z.p[i - t - 1]++;
        do
        {
            Z.p[i - t - 1]--;
 808b7be:	5993      	ldr	r3, [r2, r6]

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 808b7c0:	a814      	add	r0, sp, #80	; 0x50
        }

        Z.p[i - t - 1]++;
        do
        {
            Z.p[i - t - 1]--;
 808b7c2:	3b01      	subs	r3, #1
 808b7c4:	5193      	str	r3, [r2, r6]

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 808b7c6:	f7ff fb1a 	bl	808adfe <mbedtls_mpi_lset>
 808b7ca:	2800      	cmp	r0, #0
 808b7cc:	f040 8090 	bne.w	808b8f0 <mbedtls_mpi_div_mpi+0x34e>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 808b7d0:	9b00      	ldr	r3, [sp, #0]
 808b7d2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 808b7d4:	b11b      	cbz	r3, 808b7de <mbedtls_mpi_div_mpi+0x23c>
 808b7d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 808b7d8:	9908      	ldr	r1, [sp, #32]
 808b7da:	585b      	ldr	r3, [r3, r1]
 808b7dc:	e000      	b.n	808b7e0 <mbedtls_mpi_div_mpi+0x23e>
 808b7de:	9b00      	ldr	r3, [sp, #0]
 808b7e0:	6013      	str	r3, [r2, #0]
            T1.p[1] = Y.p[t];
 808b7e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 808b7e4:	9a05      	ldr	r2, [sp, #20]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 808b7e6:	a914      	add	r1, sp, #80	; 0x50
        {
            Z.p[i - t - 1]--;

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
 808b7e8:	589a      	ldr	r2, [r3, r2]
 808b7ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 808b7ec:	4608      	mov	r0, r1
        {
            Z.p[i - t - 1]--;

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
 808b7ee:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 808b7f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808b7f2:	599a      	ldr	r2, [r3, r6]
 808b7f4:	f7ff fec8 	bl	808b588 <mbedtls_mpi_mul_int>
 808b7f8:	4601      	mov	r1, r0
 808b7fa:	2800      	cmp	r0, #0
 808b7fc:	d17a      	bne.n	808b8f4 <mbedtls_mpi_div_mpi+0x352>

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
 808b7fe:	a817      	add	r0, sp, #92	; 0x5c
 808b800:	f7ff fafd 	bl	808adfe <mbedtls_mpi_lset>
 808b804:	2800      	cmp	r0, #0
 808b806:	d173      	bne.n	808b8f0 <mbedtls_mpi_div_mpi+0x34e>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 808b808:	f1b9 0f01 	cmp.w	r9, #1
 808b80c:	bf18      	it	ne
 808b80e:	9a0d      	ldrne	r2, [sp, #52]	; 0x34
 808b810:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808b812:	bf18      	it	ne
 808b814:	f852 000a 	ldrne.w	r0, [r2, sl]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
            T2.p[2] = X.p[i];
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 808b818:	a917      	add	r1, sp, #92	; 0x5c
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 808b81a:	6018      	str	r0, [r3, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 808b81c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            T2.p[2] = X.p[i];
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 808b81e:	a814      	add	r0, sp, #80	; 0x50
            T1.p[1] = Y.p[t];
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 808b820:	595a      	ldr	r2, [r3, r5]
 808b822:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808b824:	605a      	str	r2, [r3, #4]
            T2.p[2] = X.p[i];
 808b826:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808b828:	9a09      	ldr	r2, [sp, #36]	; 0x24
 808b82a:	589a      	ldr	r2, [r3, r2]
 808b82c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808b82e:	609a      	str	r2, [r3, #8]
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 808b830:	f7ff fcd7 	bl	808b1e2 <mbedtls_mpi_cmp_mpi>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
                                                            Y.p[t], NULL);
        }

        Z.p[i - t - 1]++;
        do
 808b834:	2800      	cmp	r0, #0
 808b836:	dcc0      	bgt.n	808b7ba <mbedtls_mpi_div_mpi+0x218>
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
            T2.p[2] = X.p[i];
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 808b838:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808b83a:	a90e      	add	r1, sp, #56	; 0x38
 808b83c:	599a      	ldr	r2, [r3, r6]
 808b83e:	a814      	add	r0, sp, #80	; 0x50
 808b840:	f7ff fea2 	bl	808b588 <mbedtls_mpi_mul_int>
 808b844:	2800      	cmp	r0, #0
 808b846:	d153      	bne.n	808b8f0 <mbedtls_mpi_div_mpi+0x34e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 808b848:	9902      	ldr	r1, [sp, #8]
 808b84a:	a814      	add	r0, sp, #80	; 0x50
 808b84c:	f7ff fb9b 	bl	808af86 <mbedtls_mpi_shift_l>
 808b850:	2800      	cmp	r0, #0
 808b852:	d14d      	bne.n	808b8f0 <mbedtls_mpi_div_mpi+0x34e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 808b854:	a90b      	add	r1, sp, #44	; 0x2c
 808b856:	4608      	mov	r0, r1
 808b858:	aa14      	add	r2, sp, #80	; 0x50
 808b85a:	f7ff fdd8 	bl	808b40e <mbedtls_mpi_sub_mpi>
 808b85e:	4601      	mov	r1, r0
 808b860:	2800      	cmp	r0, #0
 808b862:	d147      	bne.n	808b8f4 <mbedtls_mpi_div_mpi+0x352>

        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
 808b864:	a80b      	add	r0, sp, #44	; 0x2c
 808b866:	f7ff fd01 	bl	808b26c <mbedtls_mpi_cmp_int>
 808b86a:	2800      	cmp	r0, #0
 808b86c:	da15      	bge.n	808b89a <mbedtls_mpi_div_mpi+0x2f8>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 808b86e:	a90e      	add	r1, sp, #56	; 0x38
 808b870:	a814      	add	r0, sp, #80	; 0x50
 808b872:	f7ff fa9a 	bl	808adaa <mbedtls_mpi_copy>
 808b876:	2800      	cmp	r0, #0
 808b878:	d13a      	bne.n	808b8f0 <mbedtls_mpi_div_mpi+0x34e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 808b87a:	9902      	ldr	r1, [sp, #8]
 808b87c:	a814      	add	r0, sp, #80	; 0x50
 808b87e:	f7ff fb82 	bl	808af86 <mbedtls_mpi_shift_l>
 808b882:	2800      	cmp	r0, #0
 808b884:	d134      	bne.n	808b8f0 <mbedtls_mpi_div_mpi+0x34e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 808b886:	a90b      	add	r1, sp, #44	; 0x2c
 808b888:	aa14      	add	r2, sp, #80	; 0x50
 808b88a:	4608      	mov	r0, r1
 808b88c:	f7ff fd9e 	bl	808b3cc <mbedtls_mpi_add_mpi>
 808b890:	bb70      	cbnz	r0, 808b8f0 <mbedtls_mpi_div_mpi+0x34e>
            Z.p[i - t - 1]--;
 808b892:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 808b894:	5993      	ldr	r3, [r2, r6]
 808b896:	3b01      	subs	r3, #1
 808b898:	5193      	str	r3, [r2, r6]
 808b89a:	9b02      	ldr	r3, [sp, #8]
        Z.p[n - t]++;
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );

    for( i = n; i > t ; i-- )
 808b89c:	f109 39ff 	add.w	r9, r9, #4294967295
 808b8a0:	3b20      	subs	r3, #32
 808b8a2:	3e04      	subs	r6, #4
 808b8a4:	9302      	str	r3, [sp, #8]
 808b8a6:	3d04      	subs	r5, #4
 808b8a8:	e753      	b.n	808b752 <mbedtls_mpi_div_mpi+0x1b0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
            Z.p[i - t - 1]--;
        }
    }

    if( Q != NULL )
 808b8aa:	9b01      	ldr	r3, [sp, #4]
 808b8ac:	b15b      	cbz	r3, 808b8c6 <mbedtls_mpi_div_mpi+0x324>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 808b8ae:	a911      	add	r1, sp, #68	; 0x44
 808b8b0:	4618      	mov	r0, r3
 808b8b2:	f7ff fa7a 	bl	808adaa <mbedtls_mpi_copy>
 808b8b6:	b9d8      	cbnz	r0, 808b8f0 <mbedtls_mpi_div_mpi+0x34e>
        Q->s = A->s * B->s;
 808b8b8:	9b04      	ldr	r3, [sp, #16]
 808b8ba:	f8d8 2000 	ldr.w	r2, [r8]
 808b8be:	681b      	ldr	r3, [r3, #0]
 808b8c0:	4353      	muls	r3, r2
 808b8c2:	9a01      	ldr	r2, [sp, #4]
 808b8c4:	6013      	str	r3, [r2, #0]
    }

    if( R != NULL )
 808b8c6:	b1b7      	cbz	r7, 808b8f6 <mbedtls_mpi_div_mpi+0x354>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
 808b8c8:	9903      	ldr	r1, [sp, #12]
 808b8ca:	a80b      	add	r0, sp, #44	; 0x2c
 808b8cc:	f7ff fbaa 	bl	808b024 <mbedtls_mpi_shift_r>
 808b8d0:	b970      	cbnz	r0, 808b8f0 <mbedtls_mpi_div_mpi+0x34e>
        X.s = A->s;
 808b8d2:	f8d8 3000 	ldr.w	r3, [r8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 808b8d6:	a90b      	add	r1, sp, #44	; 0x2c
 808b8d8:	4638      	mov	r0, r7
    }

    if( R != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
        X.s = A->s;
 808b8da:	930b      	str	r3, [sp, #44]	; 0x2c
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 808b8dc:	f7ff fa65 	bl	808adaa <mbedtls_mpi_copy>
 808b8e0:	4601      	mov	r1, r0
 808b8e2:	b938      	cbnz	r0, 808b8f4 <mbedtls_mpi_div_mpi+0x352>

        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
 808b8e4:	4638      	mov	r0, r7
 808b8e6:	f7ff fcc1 	bl	808b26c <mbedtls_mpi_cmp_int>
 808b8ea:	b920      	cbnz	r0, 808b8f6 <mbedtls_mpi_div_mpi+0x354>
            R->s = 1;
 808b8ec:	2301      	movs	r3, #1
 808b8ee:	603b      	str	r3, [r7, #0]
 808b8f0:	4604      	mov	r4, r0
 808b8f2:	e000      	b.n	808b8f6 <mbedtls_mpi_div_mpi+0x354>
 808b8f4:	460c      	mov	r4, r1
    }

cleanup:

    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 808b8f6:	a80b      	add	r0, sp, #44	; 0x2c
 808b8f8:	f7ff fa15 	bl	808ad26 <mbedtls_mpi_free>
 808b8fc:	a80e      	add	r0, sp, #56	; 0x38
 808b8fe:	f7ff fa12 	bl	808ad26 <mbedtls_mpi_free>
 808b902:	a811      	add	r0, sp, #68	; 0x44
 808b904:	f7ff fa0f 	bl	808ad26 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
 808b908:	a814      	add	r0, sp, #80	; 0x50
 808b90a:	f7ff fa0c 	bl	808ad26 <mbedtls_mpi_free>
 808b90e:	a817      	add	r0, sp, #92	; 0x5c
 808b910:	f7ff fa09 	bl	808ad26 <mbedtls_mpi_free>

    return( ret );
 808b914:	4620      	mov	r0, r4
 808b916:	e001      	b.n	808b91c <mbedtls_mpi_div_mpi+0x37a>
    int ret;
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
 808b918:	f06f 000b 	mvn.w	r0, #11

    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );

    return( ret );
}
 808b91c:	b01b      	add	sp, #108	; 0x6c
 808b91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808b922 <mbedtls_mpi_mod_mpi>:

/*
 * Modulo: R = A mod B
 */
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b922:	b570      	push	{r4, r5, r6, lr}
 808b924:	4604      	mov	r4, r0
 808b926:	460e      	mov	r6, r1
    int ret;

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 808b928:	4610      	mov	r0, r2
 808b92a:	2100      	movs	r1, #0

/*
 * Modulo: R = A mod B
 */
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808b92c:	4615      	mov	r5, r2
    int ret;

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 808b92e:	f7ff fc9d 	bl	808b26c <mbedtls_mpi_cmp_int>
 808b932:	2800      	cmp	r0, #0
 808b934:	db22      	blt.n	808b97c <mbedtls_mpi_mod_mpi+0x5a>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
 808b936:	462b      	mov	r3, r5
 808b938:	4632      	mov	r2, r6
 808b93a:	4621      	mov	r1, r4
 808b93c:	2000      	movs	r0, #0
 808b93e:	f7ff fe30 	bl	808b5a2 <mbedtls_mpi_div_mpi>
 808b942:	b9f8      	cbnz	r0, 808b984 <mbedtls_mpi_mod_mpi+0x62>

    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 808b944:	2100      	movs	r1, #0
 808b946:	4620      	mov	r0, r4
 808b948:	f7ff fc90 	bl	808b26c <mbedtls_mpi_cmp_int>
 808b94c:	2800      	cmp	r0, #0
 808b94e:	da07      	bge.n	808b960 <mbedtls_mpi_mod_mpi+0x3e>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
 808b950:	462a      	mov	r2, r5
 808b952:	4621      	mov	r1, r4
 808b954:	4620      	mov	r0, r4
 808b956:	f7ff fd39 	bl	808b3cc <mbedtls_mpi_add_mpi>
 808b95a:	2800      	cmp	r0, #0
 808b95c:	d0f2      	beq.n	808b944 <mbedtls_mpi_mod_mpi+0x22>
 808b95e:	bd70      	pop	{r4, r5, r6, pc}

    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 808b960:	4629      	mov	r1, r5
 808b962:	4620      	mov	r0, r4
 808b964:	f7ff fc3d 	bl	808b1e2 <mbedtls_mpi_cmp_mpi>
 808b968:	2800      	cmp	r0, #0
 808b96a:	db0a      	blt.n	808b982 <mbedtls_mpi_mod_mpi+0x60>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
 808b96c:	462a      	mov	r2, r5
 808b96e:	4621      	mov	r1, r4
 808b970:	4620      	mov	r0, r4
 808b972:	f7ff fd4c 	bl	808b40e <mbedtls_mpi_sub_mpi>
 808b976:	2800      	cmp	r0, #0
 808b978:	d0f2      	beq.n	808b960 <mbedtls_mpi_mod_mpi+0x3e>
 808b97a:	bd70      	pop	{r4, r5, r6, pc}
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
    int ret;

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 808b97c:	f06f 0009 	mvn.w	r0, #9
 808b980:	bd70      	pop	{r4, r5, r6, pc}
 808b982:	2000      	movs	r0, #0
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );

cleanup:

    return( ret );
}
 808b984:	bd70      	pop	{r4, r5, r6, pc}

0808b986 <mbedtls_mpi_exp_mod>:

/*
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *E, const mbedtls_mpi *N, mbedtls_mpi *_RR )
{
 808b986:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808b98a:	4606      	mov	r6, r0
 808b98c:	f2ad 6d54 	subw	sp, sp, #1620	; 0x654
 808b990:	460f      	mov	r7, r1
    size_t bufsize, nbits;
    mbedtls_mpi_uint ei, mm, state;
    mbedtls_mpi RR, T, W[ 2 << MBEDTLS_MPI_WINDOW_SIZE ], Apos;
    int neg;

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
 808b992:	4618      	mov	r0, r3
 808b994:	2100      	movs	r1, #0

/*
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *E, const mbedtls_mpi *N, mbedtls_mpi *_RR )
{
 808b996:	9202      	str	r2, [sp, #8]
 808b998:	461d      	mov	r5, r3
    size_t bufsize, nbits;
    mbedtls_mpi_uint ei, mm, state;
    mbedtls_mpi RR, T, W[ 2 << MBEDTLS_MPI_WINDOW_SIZE ], Apos;
    int neg;

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
 808b99a:	f7ff fc67 	bl	808b26c <mbedtls_mpi_cmp_int>
 808b99e:	2800      	cmp	r0, #0
 808b9a0:	dd05      	ble.n	808b9ae <mbedtls_mpi_exp_mod+0x28>
 808b9a2:	68ab      	ldr	r3, [r5, #8]
 808b9a4:	f8d3 8000 	ldr.w	r8, [r3]
 808b9a8:	f018 0f01 	tst.w	r8, #1
 808b9ac:	d102      	bne.n	808b9b4 <mbedtls_mpi_exp_mod+0x2e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 808b9ae:	f06f 0003 	mvn.w	r0, #3
 808b9b2:	e203      	b.n	808bdbc <mbedtls_mpi_exp_mod+0x436>

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
 808b9b4:	2100      	movs	r1, #0
 808b9b6:	9802      	ldr	r0, [sp, #8]
 808b9b8:	f7ff fc58 	bl	808b26c <mbedtls_mpi_cmp_int>
 808b9bc:	2800      	cmp	r0, #0
 808b9be:	dbf6      	blt.n	808b9ae <mbedtls_mpi_exp_mod+0x28>
{
    mbedtls_mpi_uint x, m0 = N->p[0];
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;
 808b9c0:	f108 0402 	add.w	r4, r8, #2
 808b9c4:	0064      	lsls	r4, r4, #1
 808b9c6:	f004 0408 	and.w	r4, r4, #8
 808b9ca:	4444      	add	r4, r8
 808b9cc:	2103      	movs	r1, #3

    for( i = biL; i >= 8; i /= 2 )
        x *= ( 2 - ( m0 * x ) );
 808b9ce:	fb04 f308 	mul.w	r3, r4, r8
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
 808b9d2:	3901      	subs	r1, #1
        x *= ( 2 - ( m0 * x ) );
 808b9d4:	f1c3 0302 	rsb	r3, r3, #2
 808b9d8:	fb03 f404 	mul.w	r4, r3, r4
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
 808b9dc:	d1f7      	bne.n	808b9ce <mbedtls_mpi_exp_mod+0x48>
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808b9de:	2301      	movs	r3, #1
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
 808b9e0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 808b9e4:	a814      	add	r0, sp, #80	; 0x50
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808b9e6:	9308      	str	r3, [sp, #32]
    X->n = 0;
 808b9e8:	9109      	str	r1, [sp, #36]	; 0x24
    X->p = NULL;
 808b9ea:	910a      	str	r1, [sp, #40]	; 0x28
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808b9ec:	930b      	str	r3, [sp, #44]	; 0x2c
    X->n = 0;
 808b9ee:	910c      	str	r1, [sp, #48]	; 0x30
    X->p = NULL;
 808b9f0:	910d      	str	r1, [sp, #52]	; 0x34
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808b9f2:	930e      	str	r3, [sp, #56]	; 0x38
    X->n = 0;
 808b9f4:	910f      	str	r1, [sp, #60]	; 0x3c
    X->p = NULL;
 808b9f6:	9110      	str	r1, [sp, #64]	; 0x40
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
 808b9f8:	f008 fad9 	bl	8093fae <memset>

    i = mbedtls_mpi_bitlen( E );
 808b9fc:	9802      	ldr	r0, [sp, #8]
 808b9fe:	f7ff fa44 	bl	808ae8a <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
            ( i >  79 ) ? 4 : ( i >  23 ) ? 3 : 1;
 808ba02:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
 808ba06:	d20a      	bcs.n	808ba1e <mbedtls_mpi_exp_mod+0x98>
 808ba08:	28ef      	cmp	r0, #239	; 0xef
 808ba0a:	d80b      	bhi.n	808ba24 <mbedtls_mpi_exp_mod+0x9e>
 808ba0c:	284f      	cmp	r0, #79	; 0x4f
 808ba0e:	d80c      	bhi.n	808ba2a <mbedtls_mpi_exp_mod+0xa4>
 808ba10:	2818      	cmp	r0, #24
 808ba12:	bf34      	ite	cc
 808ba14:	f04f 0b01 	movcc.w	fp, #1
 808ba18:	f04f 0b03 	movcs.w	fp, #3
 808ba1c:	e007      	b.n	808ba2e <mbedtls_mpi_exp_mod+0xa8>
 808ba1e:	f04f 0b06 	mov.w	fp, #6
 808ba22:	e004      	b.n	808ba2e <mbedtls_mpi_exp_mod+0xa8>
 808ba24:	f04f 0b05 	mov.w	fp, #5
 808ba28:	e001      	b.n	808ba2e <mbedtls_mpi_exp_mod+0xa8>
 808ba2a:	f04f 0b04 	mov.w	fp, #4

    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;

    j = N->n + 1;
 808ba2e:	686b      	ldr	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 808ba30:	4630      	mov	r0, r6
            ( i >  79 ) ? 4 : ( i >  23 ) ? 3 : 1;

    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;

    j = N->n + 1;
 808ba32:	f103 0801 	add.w	r8, r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 808ba36:	4641      	mov	r1, r8
 808ba38:	f7ff f98b 	bl	808ad52 <mbedtls_mpi_grow>
 808ba3c:	4603      	mov	r3, r0
 808ba3e:	2800      	cmp	r0, #0
 808ba40:	f040 8194 	bne.w	808bd6c <mbedtls_mpi_exp_mod+0x3e6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
 808ba44:	4641      	mov	r1, r8
 808ba46:	a817      	add	r0, sp, #92	; 0x5c
 808ba48:	f7ff f983 	bl	808ad52 <mbedtls_mpi_grow>
 808ba4c:	4603      	mov	r3, r0
 808ba4e:	2800      	cmp	r0, #0
 808ba50:	f040 818c 	bne.w	808bd6c <mbedtls_mpi_exp_mod+0x3e6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
 808ba54:	ea4f 0148 	mov.w	r1, r8, lsl #1
 808ba58:	a80b      	add	r0, sp, #44	; 0x2c
 808ba5a:	f7ff f97a 	bl	808ad52 <mbedtls_mpi_grow>
 808ba5e:	4603      	mov	r3, r0
 808ba60:	2800      	cmp	r0, #0
 808ba62:	f040 8183 	bne.w	808bd6c <mbedtls_mpi_exp_mod+0x3e6>

    /*
     * Compensate for negative A (and correct at the end)
     */
    neg = ( A->s == -1 );
 808ba66:	683b      	ldr	r3, [r7, #0]
 808ba68:	9304      	str	r3, [sp, #16]
    if( neg )
 808ba6a:	3301      	adds	r3, #1
 808ba6c:	d10a      	bne.n	808ba84 <mbedtls_mpi_exp_mod+0xfe>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
 808ba6e:	4639      	mov	r1, r7
 808ba70:	a80e      	add	r0, sp, #56	; 0x38
 808ba72:	f7ff f99a 	bl	808adaa <mbedtls_mpi_copy>
 808ba76:	4603      	mov	r3, r0
 808ba78:	2800      	cmp	r0, #0
 808ba7a:	f040 8177 	bne.w	808bd6c <mbedtls_mpi_exp_mod+0x3e6>
        Apos.s = 1;
 808ba7e:	2301      	movs	r3, #1
 808ba80:	930e      	str	r3, [sp, #56]	; 0x38
        A = &Apos;
 808ba82:	af0e      	add	r7, sp, #56	; 0x38
    }

    /*
     * If 1st call, pre-compute R^2 mod N
     */
    if( _RR == NULL || _RR->p == NULL )
 808ba84:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 808ba88:	b10b      	cbz	r3, 808ba8e <mbedtls_mpi_exp_mod+0x108>
 808ba8a:	689b      	ldr	r3, [r3, #8]
 808ba8c:	bb2b      	cbnz	r3, 808bada <mbedtls_mpi_exp_mod+0x154>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
 808ba8e:	2101      	movs	r1, #1
 808ba90:	a808      	add	r0, sp, #32
 808ba92:	f7ff f9b4 	bl	808adfe <mbedtls_mpi_lset>
 808ba96:	4603      	mov	r3, r0
 808ba98:	2800      	cmp	r0, #0
 808ba9a:	f040 8167 	bne.w	808bd6c <mbedtls_mpi_exp_mod+0x3e6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
 808ba9e:	6869      	ldr	r1, [r5, #4]
 808baa0:	a808      	add	r0, sp, #32
 808baa2:	0189      	lsls	r1, r1, #6
 808baa4:	f7ff fa6f 	bl	808af86 <mbedtls_mpi_shift_l>
 808baa8:	4603      	mov	r3, r0
 808baaa:	2800      	cmp	r0, #0
 808baac:	f040 815e 	bne.w	808bd6c <mbedtls_mpi_exp_mod+0x3e6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
 808bab0:	a908      	add	r1, sp, #32
 808bab2:	462a      	mov	r2, r5
 808bab4:	4608      	mov	r0, r1
 808bab6:	f7ff ff34 	bl	808b922 <mbedtls_mpi_mod_mpi>
 808baba:	4603      	mov	r3, r0
 808babc:	2800      	cmp	r0, #0
 808babe:	f040 8155 	bne.w	808bd6c <mbedtls_mpi_exp_mod+0x3e6>

        if( _RR != NULL )
 808bac2:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 808bac6:	b183      	cbz	r3, 808baea <mbedtls_mpi_exp_mod+0x164>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
 808bac8:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 808bacc:	ab08      	add	r3, sp, #32
 808bace:	cb03      	ldmia	r3!, {r0, r1}
 808bad0:	6010      	str	r0, [r2, #0]
 808bad2:	6818      	ldr	r0, [r3, #0]
 808bad4:	6051      	str	r1, [r2, #4]
 808bad6:	6090      	str	r0, [r2, #8]
 808bad8:	e007      	b.n	808baea <mbedtls_mpi_exp_mod+0x164>
    }
    else
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
 808bada:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 808bade:	ab08      	add	r3, sp, #32
 808bae0:	6810      	ldr	r0, [r2, #0]
 808bae2:	6851      	ldr	r1, [r2, #4]
 808bae4:	c303      	stmia	r3!, {r0, r1}
 808bae6:	6890      	ldr	r0, [r2, #8]
 808bae8:	6018      	str	r0, [r3, #0]

    /*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
 808baea:	4629      	mov	r1, r5
 808baec:	4638      	mov	r0, r7
 808baee:	f7ff fb78 	bl	808b1e2 <mbedtls_mpi_cmp_mpi>
 808baf2:	2800      	cmp	r0, #0
 808baf4:	db18      	blt.n	808bb28 <mbedtls_mpi_exp_mod+0x1a2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
 808baf6:	462a      	mov	r2, r5
 808baf8:	4639      	mov	r1, r7
 808bafa:	a817      	add	r0, sp, #92	; 0x5c
 808bafc:	f7ff ff11 	bl	808b922 <mbedtls_mpi_mod_mpi>
 808bb00:	4603      	mov	r3, r0
 808bb02:	2800      	cmp	r0, #0
 808bb04:	f040 8132 	bne.w	808bd6c <mbedtls_mpi_exp_mod+0x3e6>
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
        x *= ( 2 - ( m0 * x ) );

    *mm = ~x + 1;
 808bb08:	4264      	negs	r4, r4
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );

    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
 808bb0a:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
 808bb0e:	4623      	mov	r3, r4
 808bb10:	f8cd 9000 	str.w	r9, [sp]
 808bb14:	462a      	mov	r2, r5
 808bb16:	a908      	add	r1, sp, #32
 808bb18:	a817      	add	r0, sp, #92	; 0x5c
 808bb1a:	f7ff fafe 	bl	808b11a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808bb1e:	4603      	mov	r3, r0
 808bb20:	2800      	cmp	r0, #0
 808bb22:	f040 8123 	bne.w	808bd6c <mbedtls_mpi_exp_mod+0x3e6>
 808bb26:	e004      	b.n	808bb32 <mbedtls_mpi_exp_mod+0x1ac>
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
 808bb28:	4639      	mov	r1, r7
 808bb2a:	a817      	add	r0, sp, #92	; 0x5c
 808bb2c:	f7ff f93d 	bl	808adaa <mbedtls_mpi_copy>
 808bb30:	e7e6      	b.n	808bb00 <mbedtls_mpi_exp_mod+0x17a>
    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
 808bb32:	a908      	add	r1, sp, #32
 808bb34:	4630      	mov	r0, r6
 808bb36:	f7ff f938 	bl	808adaa <mbedtls_mpi_copy>
 808bb3a:	4603      	mov	r3, r0
 808bb3c:	2800      	cmp	r0, #0
 808bb3e:	f040 8115 	bne.w	808bd6c <mbedtls_mpi_exp_mod+0x3e6>
{
    mbedtls_mpi_uint z = 1;
    mbedtls_mpi U;

    U.n = U.s = (int) z;
    U.p = &z;
 808bb42:	ab07      	add	r3, sp, #28
/*
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    mbedtls_mpi_uint z = 1;
 808bb44:	2701      	movs	r7, #1
    mbedtls_mpi U;

    U.n = U.s = (int) z;
    U.p = &z;
 808bb46:	9313      	str	r3, [sp, #76]	; 0x4c

    return( mpi_montmul( A, &U, N, mm, T ) );
 808bb48:	f8cd 9000 	str.w	r9, [sp]
 808bb4c:	4623      	mov	r3, r4
 808bb4e:	462a      	mov	r2, r5
 808bb50:	a911      	add	r1, sp, #68	; 0x44
 808bb52:	4630      	mov	r0, r6
/*
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    mbedtls_mpi_uint z = 1;
 808bb54:	9707      	str	r7, [sp, #28]
    mbedtls_mpi U;

    U.n = U.s = (int) z;
 808bb56:	9711      	str	r7, [sp, #68]	; 0x44
 808bb58:	9712      	str	r7, [sp, #72]	; 0x48
    U.p = &z;

    return( mpi_montmul( A, &U, N, mm, T ) );
 808bb5a:	f7ff fade 	bl	808b11a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 808bb5e:	4603      	mov	r3, r0
 808bb60:	2800      	cmp	r0, #0
 808bb62:	f040 8103 	bne.w	808bd6c <mbedtls_mpi_exp_mod+0x3e6>

    if( wsize > 1 )
 808bb66:	45bb      	cmp	fp, r7
 808bb68:	d05b      	beq.n	808bc22 <mbedtls_mpi_exp_mod+0x29c>
    {
        /*
         * W[1 << (wsize - 1)] = W[1] ^ (wsize - 1)
         */
        j =  one << ( wsize - 1 );
 808bb6a:	f10b 33ff 	add.w	r3, fp, #4294967295
 808bb6e:	9303      	str	r3, [sp, #12]
 808bb70:	409f      	lsls	r7, r3

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
 808bb72:	f04f 080c 	mov.w	r8, #12
 808bb76:	ab14      	add	r3, sp, #80	; 0x50
 808bb78:	fb08 3807 	mla	r8, r8, r7, r3
 808bb7c:	6869      	ldr	r1, [r5, #4]
 808bb7e:	4640      	mov	r0, r8
 808bb80:	3101      	adds	r1, #1
 808bb82:	f7ff f8e6 	bl	808ad52 <mbedtls_mpi_grow>
 808bb86:	4603      	mov	r3, r0
 808bb88:	2800      	cmp	r0, #0
 808bb8a:	f040 80ef 	bne.w	808bd6c <mbedtls_mpi_exp_mod+0x3e6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
 808bb8e:	a917      	add	r1, sp, #92	; 0x5c
 808bb90:	4640      	mov	r0, r8
 808bb92:	f7ff f90a 	bl	808adaa <mbedtls_mpi_copy>
 808bb96:	4603      	mov	r3, r0
 808bb98:	2800      	cmp	r0, #0
 808bb9a:	f040 80e7 	bne.w	808bd6c <mbedtls_mpi_exp_mod+0x3e6>
 808bb9e:	4682      	mov	sl, r0

        for( i = 0; i < wsize - 1; i++ )
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
 808bba0:	4623      	mov	r3, r4
 808bba2:	f8cd 9000 	str.w	r9, [sp]
 808bba6:	462a      	mov	r2, r5
 808bba8:	4641      	mov	r1, r8
 808bbaa:	4640      	mov	r0, r8
 808bbac:	f7ff fab5 	bl	808b11a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808bbb0:	4603      	mov	r3, r0
 808bbb2:	2800      	cmp	r0, #0
 808bbb4:	f040 80da 	bne.w	808bd6c <mbedtls_mpi_exp_mod+0x3e6>
        j =  one << ( wsize - 1 );

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );

        for( i = 0; i < wsize - 1; i++ )
 808bbb8:	9b03      	ldr	r3, [sp, #12]
 808bbba:	f10a 0a01 	add.w	sl, sl, #1
 808bbbe:	4553      	cmp	r3, sl
 808bbc0:	d8ee      	bhi.n	808bba0 <mbedtls_mpi_exp_mod+0x21a>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
 808bbc2:	3701      	adds	r7, #1
 808bbc4:	f04f 080c 	mov.w	r8, #12
 808bbc8:	ab14      	add	r3, sp, #80	; 0x50
 808bbca:	fb08 3807 	mla	r8, r8, r7, r3
 808bbce:	f04f 0901 	mov.w	r9, #1
 808bbd2:	fa09 f90b 	lsl.w	r9, r9, fp
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 808bbd6:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
 808bbda:	454f      	cmp	r7, r9
 808bbdc:	d221      	bcs.n	808bc22 <mbedtls_mpi_exp_mod+0x29c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
 808bbde:	6869      	ldr	r1, [r5, #4]
 808bbe0:	4640      	mov	r0, r8
 808bbe2:	3101      	adds	r1, #1
 808bbe4:	f7ff f8b5 	bl	808ad52 <mbedtls_mpi_grow>
 808bbe8:	4603      	mov	r3, r0
 808bbea:	2800      	cmp	r0, #0
 808bbec:	f040 80be 	bne.w	808bd6c <mbedtls_mpi_exp_mod+0x3e6>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
 808bbf0:	f1a8 010c 	sub.w	r1, r8, #12
 808bbf4:	4640      	mov	r0, r8
 808bbf6:	f7ff f8d8 	bl	808adaa <mbedtls_mpi_copy>
 808bbfa:	4603      	mov	r3, r0
 808bbfc:	2800      	cmp	r0, #0
 808bbfe:	f040 80b5 	bne.w	808bd6c <mbedtls_mpi_exp_mod+0x3e6>

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 808bc02:	4623      	mov	r3, r4
 808bc04:	4640      	mov	r0, r8
 808bc06:	f8cd a000 	str.w	sl, [sp]
 808bc0a:	462a      	mov	r2, r5
 808bc0c:	a917      	add	r1, sp, #92	; 0x5c
 808bc0e:	f7ff fa84 	bl	808b11a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808bc12:	f108 080c 	add.w	r8, r8, #12
 808bc16:	4603      	mov	r3, r0
 808bc18:	2800      	cmp	r0, #0
 808bc1a:	f040 80a7 	bne.w	808bd6c <mbedtls_mpi_exp_mod+0x3e6>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
 808bc1e:	3701      	adds	r7, #1
 808bc20:	e7db      	b.n	808bbda <mbedtls_mpi_exp_mod+0x254>

    nblimbs = E->n;
    bufsize = 0;
    nbits   = 0;
    wbits   = 0;
    state   = 0;
 808bc22:	2700      	movs	r7, #0
        }
    }

    nblimbs = E->n;
    bufsize = 0;
    nbits   = 0;
 808bc24:	46b9      	mov	r9, r7
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
        }
    }

    nblimbs = E->n;
    bufsize = 0;
 808bc26:	46ba      	mov	sl, r7
    nbits   = 0;
    wbits   = 0;
 808bc28:	46b8      	mov	r8, r7

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
        }
    }

    nblimbs = E->n;
 808bc2a:	9b02      	ldr	r3, [sp, #8]
 808bc2c:	685b      	ldr	r3, [r3, #4]
 808bc2e:	9303      	str	r3, [sp, #12]
    wbits   = 0;
    state   = 0;

    while( 1 )
    {
        if( bufsize == 0 )
 808bc30:	f1ba 0f00 	cmp.w	sl, #0
 808bc34:	d10e      	bne.n	808bc54 <mbedtls_mpi_exp_mod+0x2ce>
        {
            if( nblimbs == 0 )
 808bc36:	9b03      	ldr	r3, [sp, #12]
 808bc38:	b93b      	cbnz	r3, 808bc4a <mbedtls_mpi_exp_mod+0x2c4>
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
 808bc3a:	2301      	movs	r3, #1
 808bc3c:	fa03 f30b 	lsl.w	r3, r3, fp
 808bc40:	9305      	str	r3, [sp, #20]
 808bc42:	9f03      	ldr	r7, [sp, #12]
 808bc44:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
 808bc48:	e05e      	b.n	808bd08 <mbedtls_mpi_exp_mod+0x382>
        if( bufsize == 0 )
        {
            if( nblimbs == 0 )
                break;

            nblimbs--;
 808bc4a:	9b03      	ldr	r3, [sp, #12]

            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
 808bc4c:	f04f 0a20 	mov.w	sl, #32
        if( bufsize == 0 )
        {
            if( nblimbs == 0 )
                break;

            nblimbs--;
 808bc50:	3b01      	subs	r3, #1
 808bc52:	9303      	str	r3, [sp, #12]
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
        }

        bufsize--;

        ei = (E->p[nblimbs] >> bufsize) & 1;
 808bc54:	9b02      	ldr	r3, [sp, #8]
 808bc56:	9a03      	ldr	r2, [sp, #12]
 808bc58:	689b      	ldr	r3, [r3, #8]
            nblimbs--;

            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
        }

        bufsize--;
 808bc5a:	f10a 3aff 	add.w	sl, sl, #4294967295

        ei = (E->p[nblimbs] >> bufsize) & 1;
 808bc5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 808bc62:	fa23 f30a 	lsr.w	r3, r3, sl

        /*
         * skip leading 0s
         */
        if( ei == 0 && state == 0 )
 808bc66:	f013 0301 	ands.w	r3, r3, #1
 808bc6a:	d10f      	bne.n	808bc8c <mbedtls_mpi_exp_mod+0x306>
 808bc6c:	2f00      	cmp	r7, #0
 808bc6e:	d0df      	beq.n	808bc30 <mbedtls_mpi_exp_mod+0x2aa>
            continue;

        if( ei == 0 && state == 1 )
 808bc70:	2f01      	cmp	r7, #1
 808bc72:	d10b      	bne.n	808bc8c <mbedtls_mpi_exp_mod+0x306>
        {
            /*
             * out of window, square X
             */
            MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 808bc74:	ab0b      	add	r3, sp, #44	; 0x2c
 808bc76:	9300      	str	r3, [sp, #0]
 808bc78:	462a      	mov	r2, r5
 808bc7a:	4623      	mov	r3, r4
 808bc7c:	4631      	mov	r1, r6
 808bc7e:	4630      	mov	r0, r6
 808bc80:	f7ff fa4b 	bl	808b11a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808bc84:	4603      	mov	r3, r0
 808bc86:	2800      	cmp	r0, #0
 808bc88:	d0d2      	beq.n	808bc30 <mbedtls_mpi_exp_mod+0x2aa>
 808bc8a:	e06f      	b.n	808bd6c <mbedtls_mpi_exp_mod+0x3e6>
        /*
         * add ei to current window
         */
        state = 2;

        nbits++;
 808bc8c:	f109 0901 	add.w	r9, r9, #1
        wbits |= ( ei << ( wsize - nbits ) );
 808bc90:	ebc9 020b 	rsb	r2, r9, fp
 808bc94:	4093      	lsls	r3, r2

        if( nbits == wsize )
 808bc96:	45cb      	cmp	fp, r9
         * add ei to current window
         */
        state = 2;

        nbits++;
        wbits |= ( ei << ( wsize - nbits ) );
 808bc98:	ea48 0803 	orr.w	r8, r8, r3

        if( nbits == wsize )
 808bc9c:	d001      	beq.n	808bca2 <mbedtls_mpi_exp_mod+0x31c>
        }

        /*
         * add ei to current window
         */
        state = 2;
 808bc9e:	2702      	movs	r7, #2
 808bca0:	e7c6      	b.n	808bc30 <mbedtls_mpi_exp_mod+0x2aa>
 808bca2:	2700      	movs	r7, #0
        {
            /*
             * X = X^wsize R^-1 mod N
             */
            for( i = 0; i < wsize; i++ )
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 808bca4:	ab0b      	add	r3, sp, #44	; 0x2c
 808bca6:	9300      	str	r3, [sp, #0]
 808bca8:	462a      	mov	r2, r5
 808bcaa:	4623      	mov	r3, r4
 808bcac:	4631      	mov	r1, r6
 808bcae:	4630      	mov	r0, r6
 808bcb0:	f7ff fa33 	bl	808b11a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808bcb4:	4603      	mov	r3, r0
 808bcb6:	2800      	cmp	r0, #0
 808bcb8:	d158      	bne.n	808bd6c <mbedtls_mpi_exp_mod+0x3e6>
        if( nbits == wsize )
        {
            /*
             * X = X^wsize R^-1 mod N
             */
            for( i = 0; i < wsize; i++ )
 808bcba:	3701      	adds	r7, #1
 808bcbc:	45bb      	cmp	fp, r7
 808bcbe:	d1f1      	bne.n	808bca4 <mbedtls_mpi_exp_mod+0x31e>
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

            /*
             * X = X * W[wbits] R^-1 mod N
             */
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );
 808bcc0:	ab0b      	add	r3, sp, #44	; 0x2c
 808bcc2:	a814      	add	r0, sp, #80	; 0x50
 808bcc4:	210c      	movs	r1, #12
 808bcc6:	9300      	str	r3, [sp, #0]
 808bcc8:	fb01 0108 	mla	r1, r1, r8, r0
 808bccc:	4623      	mov	r3, r4
 808bcce:	462a      	mov	r2, r5
 808bcd0:	4630      	mov	r0, r6
 808bcd2:	f7ff fa22 	bl	808b11a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808bcd6:	4603      	mov	r3, r0
 808bcd8:	2800      	cmp	r0, #0
 808bcda:	d147      	bne.n	808bd6c <mbedtls_mpi_exp_mod+0x3e6>

            state--;
 808bcdc:	2701      	movs	r7, #1
            nbits = 0;
 808bcde:	4680      	mov	r8, r0
            wbits = 0;
 808bce0:	4681      	mov	r9, r0
 808bce2:	e7a5      	b.n	808bc30 <mbedtls_mpi_exp_mod+0x2aa>
    /*
     * process the remaining bits
     */
    for( i = 0; i < nbits; i++ )
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 808bce4:	4623      	mov	r3, r4
 808bce6:	f8cd a000 	str.w	sl, [sp]
 808bcea:	462a      	mov	r2, r5
 808bcec:	4631      	mov	r1, r6
 808bcee:	4630      	mov	r0, r6
 808bcf0:	f7ff fa13 	bl	808b11a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808bcf4:	4603      	mov	r3, r0
 808bcf6:	2800      	cmp	r0, #0
 808bcf8:	d138      	bne.n	808bd6c <mbedtls_mpi_exp_mod+0x3e6>

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
 808bcfa:	9b05      	ldr	r3, [sp, #20]
     */
    for( i = 0; i < nbits; i++ )
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;
 808bcfc:	ea4f 0848 	mov.w	r8, r8, lsl #1

        if( ( wbits & ( one << wsize ) ) != 0 )
 808bd00:	ea18 0f03 	tst.w	r8, r3
 808bd04:	d103      	bne.n	808bd0e <mbedtls_mpi_exp_mod+0x388>
    }

    /*
     * process the remaining bits
     */
    for( i = 0; i < nbits; i++ )
 808bd06:	3701      	adds	r7, #1
 808bd08:	454f      	cmp	r7, r9
 808bd0a:	d1eb      	bne.n	808bce4 <mbedtls_mpi_exp_mod+0x35e>
 808bd0c:	e00b      	b.n	808bd26 <mbedtls_mpi_exp_mod+0x3a0>
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );
 808bd0e:	4623      	mov	r3, r4
 808bd10:	f8cd a000 	str.w	sl, [sp]
 808bd14:	462a      	mov	r2, r5
 808bd16:	a917      	add	r1, sp, #92	; 0x5c
 808bd18:	4630      	mov	r0, r6
 808bd1a:	f7ff f9fe 	bl	808b11a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 808bd1e:	4603      	mov	r3, r0
 808bd20:	2800      	cmp	r0, #0
 808bd22:	d0f0      	beq.n	808bd06 <mbedtls_mpi_exp_mod+0x380>
 808bd24:	e022      	b.n	808bd6c <mbedtls_mpi_exp_mod+0x3e6>
/*
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    mbedtls_mpi_uint z = 1;
 808bd26:	2301      	movs	r3, #1
 808bd28:	9307      	str	r3, [sp, #28]
    mbedtls_mpi U;

    U.n = U.s = (int) z;
 808bd2a:	9311      	str	r3, [sp, #68]	; 0x44
 808bd2c:	9312      	str	r3, [sp, #72]	; 0x48
    U.p = &z;
 808bd2e:	ab07      	add	r3, sp, #28
 808bd30:	9313      	str	r3, [sp, #76]	; 0x4c

    return( mpi_montmul( A, &U, N, mm, T ) );
 808bd32:	f8cd a000 	str.w	sl, [sp]
 808bd36:	4623      	mov	r3, r4
 808bd38:	462a      	mov	r2, r5
 808bd3a:	a911      	add	r1, sp, #68	; 0x44
 808bd3c:	4630      	mov	r0, r6
 808bd3e:	f7ff f9ec 	bl	808b11a <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
    }

    /*
     * X = A^E * R * R^-1 mod N = A^E mod N
     */
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 808bd42:	4603      	mov	r3, r0
 808bd44:	b990      	cbnz	r0, 808bd6c <mbedtls_mpi_exp_mod+0x3e6>

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
 808bd46:	9a04      	ldr	r2, [sp, #16]
 808bd48:	3201      	adds	r2, #1
 808bd4a:	d10f      	bne.n	808bd6c <mbedtls_mpi_exp_mod+0x3e6>
 808bd4c:	9a02      	ldr	r2, [sp, #8]
 808bd4e:	6852      	ldr	r2, [r2, #4]
 808bd50:	b162      	cbz	r2, 808bd6c <mbedtls_mpi_exp_mod+0x3e6>
 808bd52:	9a02      	ldr	r2, [sp, #8]
 808bd54:	6892      	ldr	r2, [r2, #8]
 808bd56:	6812      	ldr	r2, [r2, #0]
 808bd58:	07d2      	lsls	r2, r2, #31
 808bd5a:	d507      	bpl.n	808bd6c <mbedtls_mpi_exp_mod+0x3e6>
    {
        X->s = -1;
 808bd5c:	9b04      	ldr	r3, [sp, #16]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
 808bd5e:	4632      	mov	r2, r6
     */
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
    {
        X->s = -1;
 808bd60:	6033      	str	r3, [r6, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
 808bd62:	4629      	mov	r1, r5
 808bd64:	4630      	mov	r0, r6
 808bd66:	f7ff fb31 	bl	808b3cc <mbedtls_mpi_add_mpi>
 808bd6a:	4603      	mov	r3, r0
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 808bd6c:	2201      	movs	r2, #1
 808bd6e:	f10b 34ff 	add.w	r4, fp, #4294967295
 808bd72:	fa02 f404 	lsl.w	r4, r2, r4
 808bd76:	fa02 f50b 	lsl.w	r5, r2, fp
        mbedtls_mpi_free( &W[i] );
 808bd7a:	260c      	movs	r6, #12
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 808bd7c:	42ac      	cmp	r4, r5
 808bd7e:	9302      	str	r3, [sp, #8]
 808bd80:	d207      	bcs.n	808bd92 <mbedtls_mpi_exp_mod+0x40c>
        mbedtls_mpi_free( &W[i] );
 808bd82:	ab14      	add	r3, sp, #80	; 0x50
 808bd84:	fb06 3004 	mla	r0, r6, r4, r3
 808bd88:	f7fe ffcd 	bl	808ad26 <mbedtls_mpi_free>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 808bd8c:	3401      	adds	r4, #1
 808bd8e:	9b02      	ldr	r3, [sp, #8]
 808bd90:	e7f4      	b.n	808bd7c <mbedtls_mpi_exp_mod+0x3f6>
        mbedtls_mpi_free( &W[i] );

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
 808bd92:	a817      	add	r0, sp, #92	; 0x5c
 808bd94:	f7fe ffc7 	bl	808ad26 <mbedtls_mpi_free>
 808bd98:	a80b      	add	r0, sp, #44	; 0x2c
 808bd9a:	f7fe ffc4 	bl	808ad26 <mbedtls_mpi_free>
 808bd9e:	a80e      	add	r0, sp, #56	; 0x38
 808bda0:	f7fe ffc1 	bl	808ad26 <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
 808bda4:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 808bda8:	9b02      	ldr	r3, [sp, #8]
 808bdaa:	b10a      	cbz	r2, 808bdb0 <mbedtls_mpi_exp_mod+0x42a>
 808bdac:	6892      	ldr	r2, [r2, #8]
 808bdae:	b922      	cbnz	r2, 808bdba <mbedtls_mpi_exp_mod+0x434>
        mbedtls_mpi_free( &RR );
 808bdb0:	a808      	add	r0, sp, #32
 808bdb2:	9302      	str	r3, [sp, #8]
 808bdb4:	f7fe ffb7 	bl	808ad26 <mbedtls_mpi_free>

    return( ret );
 808bdb8:	9b02      	ldr	r3, [sp, #8]
 808bdba:	4618      	mov	r0, r3
}
 808bdbc:	f20d 6d54 	addw	sp, sp, #1620	; 0x654
 808bdc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808bdc4 <mbedtls_mpi_gcd>:

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808bdc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 808bdc6:	b08b      	sub	sp, #44	; 0x2c
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808bdc8:	2300      	movs	r3, #0
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808bdca:	2601      	movs	r6, #1

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808bdcc:	4607      	mov	r7, r0
    size_t lz, lzt;
    mbedtls_mpi TG, TA, TB;

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 808bdce:	a804      	add	r0, sp, #16

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 808bdd0:	4615      	mov	r5, r2
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808bdd2:	9601      	str	r6, [sp, #4]
    X->n = 0;
 808bdd4:	9302      	str	r3, [sp, #8]
    X->p = NULL;
 808bdd6:	9303      	str	r3, [sp, #12]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808bdd8:	9604      	str	r6, [sp, #16]
    X->n = 0;
 808bdda:	9305      	str	r3, [sp, #20]
    X->p = NULL;
 808bddc:	9306      	str	r3, [sp, #24]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808bdde:	9607      	str	r6, [sp, #28]
    X->n = 0;
 808bde0:	9308      	str	r3, [sp, #32]
    X->p = NULL;
 808bde2:	9309      	str	r3, [sp, #36]	; 0x24
    size_t lz, lzt;
    mbedtls_mpi TG, TA, TB;

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 808bde4:	f7fe ffe1 	bl	808adaa <mbedtls_mpi_copy>
 808bde8:	4604      	mov	r4, r0
 808bdea:	2800      	cmp	r0, #0
 808bdec:	d163      	bne.n	808beb6 <mbedtls_mpi_gcd+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 808bdee:	4629      	mov	r1, r5
 808bdf0:	a807      	add	r0, sp, #28
 808bdf2:	f7fe ffda 	bl	808adaa <mbedtls_mpi_copy>
 808bdf6:	4604      	mov	r4, r0
 808bdf8:	2800      	cmp	r0, #0
 808bdfa:	d15c      	bne.n	808beb6 <mbedtls_mpi_gcd+0xf2>

    lz = mbedtls_mpi_lsb( &TA );
 808bdfc:	a804      	add	r0, sp, #16
 808bdfe:	f7ff f82b 	bl	808ae58 <mbedtls_mpi_lsb>
 808be02:	4605      	mov	r5, r0
    lzt = mbedtls_mpi_lsb( &TB );
 808be04:	a807      	add	r0, sp, #28
 808be06:	f7ff f827 	bl	808ae58 <mbedtls_mpi_lsb>
 808be0a:	4285      	cmp	r5, r0
 808be0c:	bf28      	it	cs
 808be0e:	4605      	movcs	r5, r0

    if( lzt < lz )
        lz = lzt;

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
 808be10:	a804      	add	r0, sp, #16
 808be12:	4629      	mov	r1, r5
 808be14:	f7ff f906 	bl	808b024 <mbedtls_mpi_shift_r>
 808be18:	4604      	mov	r4, r0
 808be1a:	2800      	cmp	r0, #0
 808be1c:	d14b      	bne.n	808beb6 <mbedtls_mpi_gcd+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
 808be1e:	4629      	mov	r1, r5
 808be20:	a807      	add	r0, sp, #28
 808be22:	f7ff f8ff 	bl	808b024 <mbedtls_mpi_shift_r>
 808be26:	4604      	mov	r4, r0
 808be28:	2800      	cmp	r0, #0
 808be2a:	d144      	bne.n	808beb6 <mbedtls_mpi_gcd+0xf2>

    TA.s = TB.s = 1;
 808be2c:	9607      	str	r6, [sp, #28]
 808be2e:	9604      	str	r6, [sp, #16]

    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 808be30:	2100      	movs	r1, #0
 808be32:	a804      	add	r0, sp, #16
 808be34:	f7ff fa1a 	bl	808b26c <mbedtls_mpi_cmp_int>
 808be38:	2800      	cmp	r0, #0
 808be3a:	d031      	beq.n	808bea0 <mbedtls_mpi_gcd+0xdc>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
 808be3c:	a804      	add	r0, sp, #16
 808be3e:	f7ff f80b 	bl	808ae58 <mbedtls_mpi_lsb>
 808be42:	4601      	mov	r1, r0
 808be44:	a804      	add	r0, sp, #16
 808be46:	f7ff f8ed 	bl	808b024 <mbedtls_mpi_shift_r>
 808be4a:	4604      	mov	r4, r0
 808be4c:	2800      	cmp	r0, #0
 808be4e:	d132      	bne.n	808beb6 <mbedtls_mpi_gcd+0xf2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
 808be50:	a807      	add	r0, sp, #28
 808be52:	f7ff f801 	bl	808ae58 <mbedtls_mpi_lsb>
 808be56:	4601      	mov	r1, r0
 808be58:	a807      	add	r0, sp, #28
 808be5a:	f7ff f8e3 	bl	808b024 <mbedtls_mpi_shift_r>
 808be5e:	4604      	mov	r4, r0
 808be60:	bb48      	cbnz	r0, 808beb6 <mbedtls_mpi_gcd+0xf2>

        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
 808be62:	a907      	add	r1, sp, #28
 808be64:	a804      	add	r0, sp, #16
 808be66:	f7ff f9bc 	bl	808b1e2 <mbedtls_mpi_cmp_mpi>
 808be6a:	2800      	cmp	r0, #0
 808be6c:	db09      	blt.n	808be82 <mbedtls_mpi_gcd+0xbe>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
 808be6e:	a904      	add	r1, sp, #16
 808be70:	aa07      	add	r2, sp, #28
 808be72:	4608      	mov	r0, r1
 808be74:	f7ff fa6a 	bl	808b34c <mbedtls_mpi_sub_abs>
 808be78:	4604      	mov	r4, r0
 808be7a:	b9e0      	cbnz	r0, 808beb6 <mbedtls_mpi_gcd+0xf2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );
 808be7c:	2101      	movs	r1, #1
 808be7e:	a804      	add	r0, sp, #16
 808be80:	e008      	b.n	808be94 <mbedtls_mpi_gcd+0xd0>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
 808be82:	a907      	add	r1, sp, #28
 808be84:	aa04      	add	r2, sp, #16
 808be86:	4608      	mov	r0, r1
 808be88:	f7ff fa60 	bl	808b34c <mbedtls_mpi_sub_abs>
 808be8c:	4604      	mov	r4, r0
 808be8e:	b990      	cbnz	r0, 808beb6 <mbedtls_mpi_gcd+0xf2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 808be90:	2101      	movs	r1, #1
 808be92:	a807      	add	r0, sp, #28
 808be94:	f7ff f8c6 	bl	808b024 <mbedtls_mpi_shift_r>
 808be98:	4604      	mov	r4, r0
 808be9a:	2800      	cmp	r0, #0
 808be9c:	d0c8      	beq.n	808be30 <mbedtls_mpi_gcd+0x6c>
 808be9e:	e00a      	b.n	808beb6 <mbedtls_mpi_gcd+0xf2>
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
 808bea0:	4629      	mov	r1, r5
 808bea2:	a807      	add	r0, sp, #28
 808bea4:	f7ff f86f 	bl	808af86 <mbedtls_mpi_shift_l>
 808bea8:	4604      	mov	r4, r0
 808beaa:	b920      	cbnz	r0, 808beb6 <mbedtls_mpi_gcd+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
 808beac:	a907      	add	r1, sp, #28
 808beae:	4638      	mov	r0, r7
 808beb0:	f7fe ff7b 	bl	808adaa <mbedtls_mpi_copy>
 808beb4:	4604      	mov	r4, r0

cleanup:

    mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );
 808beb6:	a801      	add	r0, sp, #4
 808beb8:	f7fe ff35 	bl	808ad26 <mbedtls_mpi_free>
 808bebc:	a804      	add	r0, sp, #16
 808bebe:	f7fe ff32 	bl	808ad26 <mbedtls_mpi_free>
 808bec2:	a807      	add	r0, sp, #28
 808bec4:	f7fe ff2f 	bl	808ad26 <mbedtls_mpi_free>

    return( ret );
}
 808bec8:	4620      	mov	r0, r4
 808beca:	b00b      	add	sp, #44	; 0x2c
 808becc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808bece <mbedtls_mpi_fill_random>:
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 808bece:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( size > MBEDTLS_MPI_MAX_SIZE )
 808bed0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 808bed4:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 808bed8:	4605      	mov	r5, r0
 808beda:	460c      	mov	r4, r1
 808bedc:	4616      	mov	r6, r2
    int ret;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( size > MBEDTLS_MPI_MAX_SIZE )
 808bede:	d814      	bhi.n	808bf0a <mbedtls_mpi_fill_random+0x3c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    MBEDTLS_MPI_CHK( f_rng( p_rng, buf, size ) );
 808bee0:	460a      	mov	r2, r1
 808bee2:	4618      	mov	r0, r3
 808bee4:	4669      	mov	r1, sp
 808bee6:	47b0      	blx	r6
 808bee8:	b920      	cbnz	r0, 808bef4 <mbedtls_mpi_fill_random+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( X, buf, size ) );
 808beea:	4622      	mov	r2, r4
 808beec:	4669      	mov	r1, sp
 808beee:	4628      	mov	r0, r5
 808bef0:	f7fe fff1 	bl	808aed6 <mbedtls_mpi_read_binary>
 808bef4:	2300      	movs	r3, #0
    volatile mbedtls_mpi_uint *p = (mbedtls_mpi_uint *)v; while( n-- ) *p++ = 0;
}

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808bef6:	f240 4401 	movw	r4, #1025	; 0x401
 808befa:	4619      	mov	r1, r3
 808befc:	eb0d 0203 	add.w	r2, sp, r3
 808bf00:	3301      	adds	r3, #1
 808bf02:	42a3      	cmp	r3, r4
 808bf04:	d003      	beq.n	808bf0e <mbedtls_mpi_fill_random+0x40>
 808bf06:	7011      	strb	r1, [r2, #0]
 808bf08:	e7f8      	b.n	808befc <mbedtls_mpi_fill_random+0x2e>
{
    int ret;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( size > MBEDTLS_MPI_MAX_SIZE )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 808bf0a:	f06f 0003 	mvn.w	r0, #3
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( X, buf, size ) );

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
    return( ret );
}
 808bf0e:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
 808bf12:	bd70      	pop	{r4, r5, r6, pc}

0808bf14 <mbedtls_mpi_inv_mod>:

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
 808bf14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808bf18:	4680      	mov	r8, r0
 808bf1a:	b09c      	sub	sp, #112	; 0x70
 808bf1c:	460f      	mov	r7, r1
    int ret;
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 808bf1e:	4610      	mov	r0, r2
 808bf20:	2101      	movs	r1, #1

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
 808bf22:	4616      	mov	r6, r2
    int ret;
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 808bf24:	f7ff f9a2 	bl	808b26c <mbedtls_mpi_cmp_int>
 808bf28:	2800      	cmp	r0, #0
 808bf2a:	f340 814c 	ble.w	808c1c6 <mbedtls_mpi_inv_mod+0x2b2>
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 808bf2e:	2300      	movs	r3, #0
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808bf30:	2501      	movs	r5, #1

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 808bf32:	4632      	mov	r2, r6
 808bf34:	4639      	mov	r1, r7
 808bf36:	a801      	add	r0, sp, #4
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808bf38:	9504      	str	r5, [sp, #16]
    X->n = 0;
 808bf3a:	9305      	str	r3, [sp, #20]
    X->p = NULL;
 808bf3c:	9306      	str	r3, [sp, #24]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808bf3e:	9507      	str	r5, [sp, #28]
    X->n = 0;
 808bf40:	9308      	str	r3, [sp, #32]
    X->p = NULL;
 808bf42:	9309      	str	r3, [sp, #36]	; 0x24
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808bf44:	950a      	str	r5, [sp, #40]	; 0x28
    X->n = 0;
 808bf46:	930b      	str	r3, [sp, #44]	; 0x2c
    X->p = NULL;
 808bf48:	930c      	str	r3, [sp, #48]	; 0x30
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808bf4a:	950d      	str	r5, [sp, #52]	; 0x34
    X->n = 0;
 808bf4c:	930e      	str	r3, [sp, #56]	; 0x38
    X->p = NULL;
 808bf4e:	930f      	str	r3, [sp, #60]	; 0x3c
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808bf50:	9501      	str	r5, [sp, #4]
    X->n = 0;
 808bf52:	9302      	str	r3, [sp, #8]
    X->p = NULL;
 808bf54:	9303      	str	r3, [sp, #12]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808bf56:	9510      	str	r5, [sp, #64]	; 0x40
    X->n = 0;
 808bf58:	9311      	str	r3, [sp, #68]	; 0x44
    X->p = NULL;
 808bf5a:	9312      	str	r3, [sp, #72]	; 0x48
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808bf5c:	9513      	str	r5, [sp, #76]	; 0x4c
    X->n = 0;
 808bf5e:	9314      	str	r3, [sp, #80]	; 0x50
    X->p = NULL;
 808bf60:	9315      	str	r3, [sp, #84]	; 0x54
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808bf62:	9516      	str	r5, [sp, #88]	; 0x58
    X->n = 0;
 808bf64:	9317      	str	r3, [sp, #92]	; 0x5c
    X->p = NULL;
 808bf66:	9318      	str	r3, [sp, #96]	; 0x60
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 808bf68:	9519      	str	r5, [sp, #100]	; 0x64
    X->n = 0;
 808bf6a:	931a      	str	r3, [sp, #104]	; 0x68
    X->p = NULL;
 808bf6c:	931b      	str	r3, [sp, #108]	; 0x6c

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 808bf6e:	f7ff ff29 	bl	808bdc4 <mbedtls_mpi_gcd>
 808bf72:	4604      	mov	r4, r0
 808bf74:	2800      	cmp	r0, #0
 808bf76:	f040 8109 	bne.w	808c18c <mbedtls_mpi_inv_mod+0x278>

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
 808bf7a:	4629      	mov	r1, r5
 808bf7c:	a801      	add	r0, sp, #4
 808bf7e:	f7ff f975 	bl	808b26c <mbedtls_mpi_cmp_int>
 808bf82:	2800      	cmp	r0, #0
 808bf84:	f040 8100 	bne.w	808c188 <mbedtls_mpi_inv_mod+0x274>
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
 808bf88:	4632      	mov	r2, r6
 808bf8a:	4639      	mov	r1, r7
 808bf8c:	a804      	add	r0, sp, #16
 808bf8e:	f7ff fcc8 	bl	808b922 <mbedtls_mpi_mod_mpi>
 808bf92:	4604      	mov	r4, r0
 808bf94:	2800      	cmp	r0, #0
 808bf96:	f040 80f9 	bne.w	808c18c <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
 808bf9a:	a904      	add	r1, sp, #16
 808bf9c:	a807      	add	r0, sp, #28
 808bf9e:	f7fe ff04 	bl	808adaa <mbedtls_mpi_copy>
 808bfa2:	4604      	mov	r4, r0
 808bfa4:	2800      	cmp	r0, #0
 808bfa6:	f040 80f1 	bne.w	808c18c <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
 808bfaa:	4631      	mov	r1, r6
 808bfac:	a810      	add	r0, sp, #64	; 0x40
 808bfae:	f7fe fefc 	bl	808adaa <mbedtls_mpi_copy>
 808bfb2:	4604      	mov	r4, r0
 808bfb4:	2800      	cmp	r0, #0
 808bfb6:	f040 80e9 	bne.w	808c18c <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
 808bfba:	4631      	mov	r1, r6
 808bfbc:	a813      	add	r0, sp, #76	; 0x4c
 808bfbe:	f7fe fef4 	bl	808adaa <mbedtls_mpi_copy>
 808bfc2:	4604      	mov	r4, r0
 808bfc4:	2800      	cmp	r0, #0
 808bfc6:	f040 80e1 	bne.w	808c18c <mbedtls_mpi_inv_mod+0x278>

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
 808bfca:	4629      	mov	r1, r5
 808bfcc:	a80a      	add	r0, sp, #40	; 0x28
 808bfce:	f7fe ff16 	bl	808adfe <mbedtls_mpi_lset>
 808bfd2:	4604      	mov	r4, r0
 808bfd4:	2800      	cmp	r0, #0
 808bfd6:	f040 80d9 	bne.w	808c18c <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
 808bfda:	4601      	mov	r1, r0
 808bfdc:	a80d      	add	r0, sp, #52	; 0x34
 808bfde:	f7fe ff0e 	bl	808adfe <mbedtls_mpi_lset>
 808bfe2:	4604      	mov	r4, r0
 808bfe4:	2800      	cmp	r0, #0
 808bfe6:	f040 80d1 	bne.w	808c18c <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
 808bfea:	4601      	mov	r1, r0
 808bfec:	a816      	add	r0, sp, #88	; 0x58
 808bfee:	f7fe ff06 	bl	808adfe <mbedtls_mpi_lset>
 808bff2:	4604      	mov	r4, r0
 808bff4:	2800      	cmp	r0, #0
 808bff6:	f040 80c9 	bne.w	808c18c <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
 808bffa:	4629      	mov	r1, r5
 808bffc:	a819      	add	r0, sp, #100	; 0x64
 808bffe:	f7fe fefe 	bl	808adfe <mbedtls_mpi_lset>
 808c002:	4604      	mov	r4, r0
 808c004:	2800      	cmp	r0, #0
 808c006:	f040 80c1 	bne.w	808c18c <mbedtls_mpi_inv_mod+0x278>

    do
    {
        while( ( TU.p[0] & 1 ) == 0 )
 808c00a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808c00c:	681b      	ldr	r3, [r3, #0]
 808c00e:	07dd      	lsls	r5, r3, #31
 808c010:	d44c      	bmi.n	808c0ac <mbedtls_mpi_inv_mod+0x198>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
 808c012:	2101      	movs	r1, #1
 808c014:	a807      	add	r0, sp, #28
 808c016:	f7ff f805 	bl	808b024 <mbedtls_mpi_shift_r>
 808c01a:	4604      	mov	r4, r0
 808c01c:	2800      	cmp	r0, #0
 808c01e:	f040 80b5 	bne.w	808c18c <mbedtls_mpi_inv_mod+0x278>

            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
 808c022:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808c024:	681b      	ldr	r3, [r3, #0]
 808c026:	07dc      	lsls	r4, r3, #31
 808c028:	d410      	bmi.n	808c04c <mbedtls_mpi_inv_mod+0x138>
 808c02a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 808c02c:	681b      	ldr	r3, [r3, #0]
 808c02e:	07d8      	lsls	r0, r3, #31
 808c030:	d40c      	bmi.n	808c04c <mbedtls_mpi_inv_mod+0x138>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
 808c032:	2101      	movs	r1, #1
 808c034:	a80a      	add	r0, sp, #40	; 0x28
 808c036:	f7fe fff5 	bl	808b024 <mbedtls_mpi_shift_r>
 808c03a:	4604      	mov	r4, r0
 808c03c:	2800      	cmp	r0, #0
 808c03e:	f040 80a5 	bne.w	808c18c <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 808c042:	2101      	movs	r1, #1
 808c044:	a80d      	add	r0, sp, #52	; 0x34
 808c046:	f7fe ffed 	bl	808b024 <mbedtls_mpi_shift_r>
 808c04a:	e7da      	b.n	808c002 <mbedtls_mpi_inv_mod+0xee>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );

            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
 808c04c:	a90a      	add	r1, sp, #40	; 0x28
 808c04e:	aa10      	add	r2, sp, #64	; 0x40
 808c050:	4608      	mov	r0, r1
 808c052:	f7ff f9bb 	bl	808b3cc <mbedtls_mpi_add_mpi>
 808c056:	4604      	mov	r4, r0
 808c058:	2800      	cmp	r0, #0
 808c05a:	f040 8097 	bne.w	808c18c <mbedtls_mpi_inv_mod+0x278>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
 808c05e:	a90d      	add	r1, sp, #52	; 0x34
 808c060:	aa04      	add	r2, sp, #16
 808c062:	4608      	mov	r0, r1
 808c064:	f7ff f9d3 	bl	808b40e <mbedtls_mpi_sub_mpi>
 808c068:	4604      	mov	r4, r0
 808c06a:	2800      	cmp	r0, #0
 808c06c:	d0e1      	beq.n	808c032 <mbedtls_mpi_inv_mod+0x11e>
 808c06e:	e08d      	b.n	808c18c <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
        }

        while( ( TV.p[0] & 1 ) == 0 )
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
 808c070:	2101      	movs	r1, #1
 808c072:	a813      	add	r0, sp, #76	; 0x4c
 808c074:	f7fe ffd6 	bl	808b024 <mbedtls_mpi_shift_r>
 808c078:	4604      	mov	r4, r0
 808c07a:	2800      	cmp	r0, #0
 808c07c:	f040 8086 	bne.w	808c18c <mbedtls_mpi_inv_mod+0x278>

            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
 808c080:	9b18      	ldr	r3, [sp, #96]	; 0x60
 808c082:	681b      	ldr	r3, [r3, #0]
 808c084:	07da      	lsls	r2, r3, #31
 808c086:	d416      	bmi.n	808c0b6 <mbedtls_mpi_inv_mod+0x1a2>
 808c088:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808c08a:	681b      	ldr	r3, [r3, #0]
 808c08c:	07db      	lsls	r3, r3, #31
 808c08e:	d412      	bmi.n	808c0b6 <mbedtls_mpi_inv_mod+0x1a2>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
 808c090:	2101      	movs	r1, #1
 808c092:	a816      	add	r0, sp, #88	; 0x58
 808c094:	f7fe ffc6 	bl	808b024 <mbedtls_mpi_shift_r>
 808c098:	4604      	mov	r4, r0
 808c09a:	2800      	cmp	r0, #0
 808c09c:	d176      	bne.n	808c18c <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
 808c09e:	2101      	movs	r1, #1
 808c0a0:	a819      	add	r0, sp, #100	; 0x64
 808c0a2:	f7fe ffbf 	bl	808b024 <mbedtls_mpi_shift_r>
 808c0a6:	4604      	mov	r4, r0
 808c0a8:	2800      	cmp	r0, #0
 808c0aa:	d16f      	bne.n	808c18c <mbedtls_mpi_inv_mod+0x278>

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
        }

        while( ( TV.p[0] & 1 ) == 0 )
 808c0ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808c0ae:	681b      	ldr	r3, [r3, #0]
 808c0b0:	07d9      	lsls	r1, r3, #31
 808c0b2:	d411      	bmi.n	808c0d8 <mbedtls_mpi_inv_mod+0x1c4>
 808c0b4:	e7dc      	b.n	808c070 <mbedtls_mpi_inv_mod+0x15c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );

            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
 808c0b6:	a916      	add	r1, sp, #88	; 0x58
 808c0b8:	aa10      	add	r2, sp, #64	; 0x40
 808c0ba:	4608      	mov	r0, r1
 808c0bc:	f7ff f986 	bl	808b3cc <mbedtls_mpi_add_mpi>
 808c0c0:	4604      	mov	r4, r0
 808c0c2:	2800      	cmp	r0, #0
 808c0c4:	d162      	bne.n	808c18c <mbedtls_mpi_inv_mod+0x278>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
 808c0c6:	a919      	add	r1, sp, #100	; 0x64
 808c0c8:	aa04      	add	r2, sp, #16
 808c0ca:	4608      	mov	r0, r1
 808c0cc:	f7ff f99f 	bl	808b40e <mbedtls_mpi_sub_mpi>
 808c0d0:	4604      	mov	r4, r0
 808c0d2:	2800      	cmp	r0, #0
 808c0d4:	d0dc      	beq.n	808c090 <mbedtls_mpi_inv_mod+0x17c>
 808c0d6:	e059      	b.n	808c18c <mbedtls_mpi_inv_mod+0x278>

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
        }

        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
 808c0d8:	a913      	add	r1, sp, #76	; 0x4c
 808c0da:	a807      	add	r0, sp, #28
 808c0dc:	f7ff f881 	bl	808b1e2 <mbedtls_mpi_cmp_mpi>
 808c0e0:	2800      	cmp	r0, #0
 808c0e2:	db1f      	blt.n	808c124 <mbedtls_mpi_inv_mod+0x210>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
 808c0e4:	a907      	add	r1, sp, #28
 808c0e6:	aa13      	add	r2, sp, #76	; 0x4c
 808c0e8:	4608      	mov	r0, r1
 808c0ea:	f7ff f990 	bl	808b40e <mbedtls_mpi_sub_mpi>
 808c0ee:	4604      	mov	r4, r0
 808c0f0:	2800      	cmp	r0, #0
 808c0f2:	d14b      	bne.n	808c18c <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
 808c0f4:	a90a      	add	r1, sp, #40	; 0x28
 808c0f6:	aa16      	add	r2, sp, #88	; 0x58
 808c0f8:	4608      	mov	r0, r1
 808c0fa:	f7ff f988 	bl	808b40e <mbedtls_mpi_sub_mpi>
 808c0fe:	4604      	mov	r4, r0
 808c100:	2800      	cmp	r0, #0
 808c102:	d143      	bne.n	808c18c <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
 808c104:	aa19      	add	r2, sp, #100	; 0x64
 808c106:	a90d      	add	r1, sp, #52	; 0x34
 808c108:	4608      	mov	r0, r1
 808c10a:	f7ff f980 	bl	808b40e <mbedtls_mpi_sub_mpi>
 808c10e:	4604      	mov	r4, r0
 808c110:	2800      	cmp	r0, #0
 808c112:	d13b      	bne.n	808c18c <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
 808c114:	2100      	movs	r1, #0
 808c116:	a807      	add	r0, sp, #28
 808c118:	f7ff f8a8 	bl	808b26c <mbedtls_mpi_cmp_int>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );

    do
 808c11c:	2800      	cmp	r0, #0
 808c11e:	f47f af74 	bne.w	808c00a <mbedtls_mpi_inv_mod+0xf6>
 808c122:	e017      	b.n	808c154 <mbedtls_mpi_inv_mod+0x240>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
 808c124:	a913      	add	r1, sp, #76	; 0x4c
 808c126:	aa07      	add	r2, sp, #28
 808c128:	4608      	mov	r0, r1
 808c12a:	f7ff f970 	bl	808b40e <mbedtls_mpi_sub_mpi>
 808c12e:	4604      	mov	r4, r0
 808c130:	bb60      	cbnz	r0, 808c18c <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
 808c132:	a916      	add	r1, sp, #88	; 0x58
 808c134:	aa0a      	add	r2, sp, #40	; 0x28
 808c136:	4608      	mov	r0, r1
 808c138:	f7ff f969 	bl	808b40e <mbedtls_mpi_sub_mpi>
 808c13c:	4604      	mov	r4, r0
 808c13e:	bb28      	cbnz	r0, 808c18c <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
 808c140:	aa0d      	add	r2, sp, #52	; 0x34
 808c142:	a919      	add	r1, sp, #100	; 0x64
 808c144:	e7e0      	b.n	808c108 <mbedtls_mpi_inv_mod+0x1f4>
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
 808c146:	a916      	add	r1, sp, #88	; 0x58
 808c148:	4632      	mov	r2, r6
 808c14a:	4608      	mov	r0, r1
 808c14c:	f7ff f93e 	bl	808b3cc <mbedtls_mpi_add_mpi>
 808c150:	4604      	mov	r4, r0
 808c152:	b9d8      	cbnz	r0, 808c18c <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 808c154:	2100      	movs	r1, #0
 808c156:	a816      	add	r0, sp, #88	; 0x58
 808c158:	f7ff f888 	bl	808b26c <mbedtls_mpi_cmp_int>
 808c15c:	2800      	cmp	r0, #0
 808c15e:	dbf2      	blt.n	808c146 <mbedtls_mpi_inv_mod+0x232>
 808c160:	e006      	b.n	808c170 <mbedtls_mpi_inv_mod+0x25c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );

    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
 808c162:	a916      	add	r1, sp, #88	; 0x58
 808c164:	4632      	mov	r2, r6
 808c166:	4608      	mov	r0, r1
 808c168:	f7ff f951 	bl	808b40e <mbedtls_mpi_sub_mpi>
 808c16c:	4604      	mov	r4, r0
 808c16e:	b968      	cbnz	r0, 808c18c <mbedtls_mpi_inv_mod+0x278>
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );

    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 808c170:	4631      	mov	r1, r6
 808c172:	a816      	add	r0, sp, #88	; 0x58
 808c174:	f7ff f835 	bl	808b1e2 <mbedtls_mpi_cmp_mpi>
 808c178:	2800      	cmp	r0, #0
 808c17a:	daf2      	bge.n	808c162 <mbedtls_mpi_inv_mod+0x24e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
 808c17c:	a916      	add	r1, sp, #88	; 0x58
 808c17e:	4640      	mov	r0, r8
 808c180:	f7fe fe13 	bl	808adaa <mbedtls_mpi_copy>
 808c184:	4604      	mov	r4, r0
 808c186:	e001      	b.n	808c18c <mbedtls_mpi_inv_mod+0x278>

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 808c188:	f06f 040d 	mvn.w	r4, #13

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );

cleanup:

    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
 808c18c:	a804      	add	r0, sp, #16
 808c18e:	f7fe fdca 	bl	808ad26 <mbedtls_mpi_free>
 808c192:	a807      	add	r0, sp, #28
 808c194:	f7fe fdc7 	bl	808ad26 <mbedtls_mpi_free>
 808c198:	a80a      	add	r0, sp, #40	; 0x28
 808c19a:	f7fe fdc4 	bl	808ad26 <mbedtls_mpi_free>
 808c19e:	a80d      	add	r0, sp, #52	; 0x34
 808c1a0:	f7fe fdc1 	bl	808ad26 <mbedtls_mpi_free>
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
 808c1a4:	a801      	add	r0, sp, #4
 808c1a6:	f7fe fdbe 	bl	808ad26 <mbedtls_mpi_free>
 808c1aa:	a810      	add	r0, sp, #64	; 0x40
 808c1ac:	f7fe fdbb 	bl	808ad26 <mbedtls_mpi_free>
 808c1b0:	a813      	add	r0, sp, #76	; 0x4c
 808c1b2:	f7fe fdb8 	bl	808ad26 <mbedtls_mpi_free>
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );
 808c1b6:	a816      	add	r0, sp, #88	; 0x58
 808c1b8:	f7fe fdb5 	bl	808ad26 <mbedtls_mpi_free>
 808c1bc:	a819      	add	r0, sp, #100	; 0x64
 808c1be:	f7fe fdb2 	bl	808ad26 <mbedtls_mpi_free>

    return( ret );
 808c1c2:	4620      	mov	r0, r4
 808c1c4:	e001      	b.n	808c1ca <mbedtls_mpi_inv_mod+0x2b6>
{
    int ret;
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 808c1c6:	f06f 0003 	mvn.w	r0, #3
    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );

    return( ret );
}
 808c1ca:	b01c      	add	sp, #112	; 0x70
 808c1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808c1d0 <mbedtls_pk_init>:
/*
 * Initialise a mbedtls_pk_context
 */
void mbedtls_pk_init( mbedtls_pk_context *ctx )
{
    if( ctx == NULL )
 808c1d0:	b110      	cbz	r0, 808c1d8 <mbedtls_pk_init+0x8>
        return;

    ctx->pk_info = NULL;
 808c1d2:	2300      	movs	r3, #0
 808c1d4:	6003      	str	r3, [r0, #0]
    ctx->pk_ctx = NULL;
 808c1d6:	6043      	str	r3, [r0, #4]
 808c1d8:	4770      	bx	lr

0808c1da <mbedtls_pk_free>:

/*
 * Free (the components of) a mbedtls_pk_context
 */
void mbedtls_pk_free( mbedtls_pk_context *ctx )
{
 808c1da:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->pk_info == NULL )
 808c1dc:	4604      	mov	r4, r0
 808c1de:	b160      	cbz	r0, 808c1fa <mbedtls_pk_free+0x20>
 808c1e0:	6803      	ldr	r3, [r0, #0]
 808c1e2:	b153      	cbz	r3, 808c1fa <mbedtls_pk_free+0x20>
        return;

    ctx->pk_info->ctx_free_func( ctx->pk_ctx );
 808c1e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808c1e6:	6840      	ldr	r0, [r0, #4]
 808c1e8:	4798      	blx	r3
 808c1ea:	f104 0208 	add.w	r2, r4, #8
#include <limits.h>
#include <stdint.h>

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808c1ee:	2300      	movs	r3, #0
 808c1f0:	4294      	cmp	r4, r2
 808c1f2:	d002      	beq.n	808c1fa <mbedtls_pk_free+0x20>
 808c1f4:	7023      	strb	r3, [r4, #0]
 808c1f6:	3401      	adds	r4, #1
 808c1f8:	e7fa      	b.n	808c1f0 <mbedtls_pk_free+0x16>
 808c1fa:	bd10      	pop	{r4, pc}

0808c1fc <mbedtls_pk_info_from_type>:
/*
 * Get pk_info structure from type
 */
const mbedtls_pk_info_t * mbedtls_pk_info_from_type( mbedtls_pk_type_t pk_type )
{
    switch( pk_type ) {
 808c1fc:	2801      	cmp	r0, #1
#endif
        /* MBEDTLS_PK_RSA_ALT omitted on purpose */
        default:
            return( NULL );
    }
}
 808c1fe:	4802      	ldr	r0, [pc, #8]	; (808c208 <mbedtls_pk_info_from_type+0xc>)
 808c200:	bf18      	it	ne
 808c202:	2000      	movne	r0, #0
 808c204:	4770      	bx	lr
 808c206:	bf00      	nop
 808c208:	080975a0 	.word	0x080975a0

0808c20c <mbedtls_pk_setup>:

/*
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
 808c20c:	b570      	push	{r4, r5, r6, lr}
 808c20e:	460e      	mov	r6, r1
    if( ctx == NULL || info == NULL || ctx->pk_info != NULL )
 808c210:	4605      	mov	r5, r0
 808c212:	b148      	cbz	r0, 808c228 <mbedtls_pk_setup+0x1c>
 808c214:	b141      	cbz	r1, 808c228 <mbedtls_pk_setup+0x1c>
 808c216:	6804      	ldr	r4, [r0, #0]
 808c218:	b934      	cbnz	r4, 808c228 <mbedtls_pk_setup+0x1c>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
 808c21a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 808c21c:	4798      	blx	r3
 808c21e:	6068      	str	r0, [r5, #4]
 808c220:	b120      	cbz	r0, 808c22c <mbedtls_pk_setup+0x20>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );

    ctx->pk_info = info;
 808c222:	602e      	str	r6, [r5, #0]

    return( 0 );
 808c224:	4620      	mov	r0, r4
 808c226:	bd70      	pop	{r4, r5, r6, pc}
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
    if( ctx == NULL || info == NULL || ctx->pk_info != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 808c228:	4801      	ldr	r0, [pc, #4]	; (808c230 <mbedtls_pk_setup+0x24>)
 808c22a:	bd70      	pop	{r4, r5, r6, pc}

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );
 808c22c:	4801      	ldr	r0, [pc, #4]	; (808c234 <mbedtls_pk_setup+0x28>)

    ctx->pk_info = info;

    return( 0 );
}
 808c22e:	bd70      	pop	{r4, r5, r6, pc}
 808c230:	ffffc180 	.word	0xffffc180
 808c234:	ffffc080 	.word	0xffffc080

0808c238 <mbedtls_pk_can_do>:
 * Tell if a PK can do the operations of the given type
 */
int mbedtls_pk_can_do( const mbedtls_pk_context *ctx, mbedtls_pk_type_t type )
{
    /* null or NONE context can't do anything */
    if( ctx == NULL || ctx->pk_info == NULL )
 808c238:	b120      	cbz	r0, 808c244 <mbedtls_pk_can_do+0xc>
 808c23a:	6803      	ldr	r3, [r0, #0]
 808c23c:	b113      	cbz	r3, 808c244 <mbedtls_pk_can_do+0xc>
        return( 0 );

    return( ctx->pk_info->can_do( type ) );
 808c23e:	68db      	ldr	r3, [r3, #12]
 808c240:	4608      	mov	r0, r1
 808c242:	4718      	bx	r3
}
 808c244:	2000      	movs	r0, #0
 808c246:	4770      	bx	lr

0808c248 <mbedtls_pk_verify>:
 * Verify a signature
 */
int mbedtls_pk_verify( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len )
{
 808c248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808c24c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 808c250:	460e      	mov	r6, r1
 808c252:	4617      	mov	r7, r2
 808c254:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( ctx == NULL || ctx->pk_info == NULL ||
 808c258:	4604      	mov	r4, r0
 808c25a:	b910      	cbnz	r0, 808c262 <mbedtls_pk_verify+0x1a>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 808c25c:	480f      	ldr	r0, [pc, #60]	; (808c29c <mbedtls_pk_verify+0x54>)
 808c25e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 */
int mbedtls_pk_verify( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len )
{
    if( ctx == NULL || ctx->pk_info == NULL ||
 808c262:	6802      	ldr	r2, [r0, #0]
 808c264:	2a00      	cmp	r2, #0
 808c266:	d0f9      	beq.n	808c25c <mbedtls_pk_verify+0x14>
 */
static inline int pk_hashlen_helper( mbedtls_md_type_t md_alg, size_t *hash_len )
{
    const mbedtls_md_info_t *md_info;

    if( *hash_len != 0 )
 808c268:	b93b      	cbnz	r3, 808c27a <mbedtls_pk_verify+0x32>
        return( 0 );

    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 808c26a:	4608      	mov	r0, r1
 808c26c:	f7fb f9b4 	bl	80875d8 <mbedtls_md_info_from_type>
 808c270:	2800      	cmp	r0, #0
 808c272:	d0f3      	beq.n	808c25c <mbedtls_pk_verify+0x14>
        return( -1 );

    *hash_len = mbedtls_md_get_size( md_info );
 808c274:	f7fb faf4 	bl	8087860 <mbedtls_md_get_size>
 808c278:	4603      	mov	r3, r0
{
    if( ctx == NULL || ctx->pk_info == NULL ||
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->verify_func == NULL )
 808c27a:	6822      	ldr	r2, [r4, #0]
 808c27c:	6915      	ldr	r5, [r2, #16]
 808c27e:	b155      	cbz	r5, 808c296 <mbedtls_pk_verify+0x4e>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                       sig, sig_len ) );
 808c280:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 808c284:	f8cd 8020 	str.w	r8, [sp, #32]
 808c288:	463a      	mov	r2, r7
 808c28a:	4631      	mov	r1, r6
 808c28c:	6860      	ldr	r0, [r4, #4]
 808c28e:	46ac      	mov	ip, r5
}
 808c290:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    if( ctx->pk_info->verify_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                       sig, sig_len ) );
 808c294:	4760      	bx	ip
    if( ctx == NULL || ctx->pk_info == NULL ||
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->verify_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 808c296:	4802      	ldr	r0, [pc, #8]	; (808c2a0 <mbedtls_pk_verify+0x58>)
 808c298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808c29c:	ffffc180 	.word	0xffffc180
 808c2a0:	ffffc100 	.word	0xffffc100

0808c2a4 <mbedtls_pk_sign>:
 */
int mbedtls_pk_sign( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 808c2a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808c2a8:	af08      	add	r7, sp, #32
 808c2aa:	460d      	mov	r5, r1
 808c2ac:	e897 0780 	ldmia.w	r7, {r7, r8, r9, sl}
 808c2b0:	4616      	mov	r6, r2
    if( ctx == NULL || ctx->pk_info == NULL ||
 808c2b2:	4604      	mov	r4, r0
 808c2b4:	b910      	cbnz	r0, 808c2bc <mbedtls_pk_sign+0x18>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 808c2b6:	4813      	ldr	r0, [pc, #76]	; (808c304 <mbedtls_pk_sign+0x60>)
 808c2b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
int mbedtls_pk_sign( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    if( ctx == NULL || ctx->pk_info == NULL ||
 808c2bc:	6802      	ldr	r2, [r0, #0]
 808c2be:	2a00      	cmp	r2, #0
 808c2c0:	d0f9      	beq.n	808c2b6 <mbedtls_pk_sign+0x12>
 */
static inline int pk_hashlen_helper( mbedtls_md_type_t md_alg, size_t *hash_len )
{
    const mbedtls_md_info_t *md_info;

    if( *hash_len != 0 )
 808c2c2:	b93b      	cbnz	r3, 808c2d4 <mbedtls_pk_sign+0x30>
        return( 0 );

    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 808c2c4:	4608      	mov	r0, r1
 808c2c6:	f7fb f987 	bl	80875d8 <mbedtls_md_info_from_type>
 808c2ca:	2800      	cmp	r0, #0
 808c2cc:	d0f3      	beq.n	808c2b6 <mbedtls_pk_sign+0x12>
        return( -1 );

    *hash_len = mbedtls_md_get_size( md_info );
 808c2ce:	f7fb fac7 	bl	8087860 <mbedtls_md_get_size>
 808c2d2:	4603      	mov	r3, r0
{
    if( ctx == NULL || ctx->pk_info == NULL ||
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->sign_func == NULL )
 808c2d4:	6822      	ldr	r2, [r4, #0]
 808c2d6:	f8d2 e014 	ldr.w	lr, [r2, #20]
 808c2da:	f1be 0f00 	cmp.w	lr, #0
 808c2de:	d00d      	beq.n	808c2fc <mbedtls_pk_sign+0x58>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                     sig, sig_len, f_rng, p_rng ) );
 808c2e0:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 808c2e4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 808c2e8:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 808c2ec:	9708      	str	r7, [sp, #32]
 808c2ee:	4632      	mov	r2, r6
 808c2f0:	4629      	mov	r1, r5
 808c2f2:	6860      	ldr	r0, [r4, #4]
 808c2f4:	46f4      	mov	ip, lr
}
 808c2f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    if( ctx->pk_info->sign_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                     sig, sig_len, f_rng, p_rng ) );
 808c2fa:	4760      	bx	ip
    if( ctx == NULL || ctx->pk_info == NULL ||
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->sign_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 808c2fc:	4802      	ldr	r0, [pc, #8]	; (808c308 <mbedtls_pk_sign+0x64>)
 808c2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808c302:	bf00      	nop
 808c304:	ffffc180 	.word	0xffffc180
 808c308:	ffffc100 	.word	0xffffc100

0808c30c <mbedtls_pk_encrypt>:
 */
int mbedtls_pk_encrypt( mbedtls_pk_context *ctx,
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 808c30c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808c30e:	f8dd e020 	ldr.w	lr, [sp, #32]
    if( ctx == NULL || ctx->pk_info == NULL )
 808c312:	b140      	cbz	r0, 808c326 <mbedtls_pk_encrypt+0x1a>
 808c314:	6804      	ldr	r4, [r0, #0]
 808c316:	b134      	cbz	r4, 808c326 <mbedtls_pk_encrypt+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->encrypt_func == NULL )
 808c318:	69e4      	ldr	r4, [r4, #28]
 808c31a:	b134      	cbz	r4, 808c32a <mbedtls_pk_encrypt+0x1e>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                output, olen, osize, f_rng, p_rng ) );
 808c31c:	46a4      	mov	ip, r4
}
 808c31e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

    if( ctx->pk_info->encrypt_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                output, olen, osize, f_rng, p_rng ) );
 808c322:	6840      	ldr	r0, [r0, #4]
 808c324:	4760      	bx	ip
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    if( ctx == NULL || ctx->pk_info == NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 808c326:	4802      	ldr	r0, [pc, #8]	; (808c330 <mbedtls_pk_encrypt+0x24>)
 808c328:	bdf0      	pop	{r4, r5, r6, r7, pc}

    if( ctx->pk_info->encrypt_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 808c32a:	4802      	ldr	r0, [pc, #8]	; (808c334 <mbedtls_pk_encrypt+0x28>)

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                output, olen, osize, f_rng, p_rng ) );
}
 808c32c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808c32e:	bf00      	nop
 808c330:	ffffc180 	.word	0xffffc180
 808c334:	ffffc100 	.word	0xffffc100

0808c338 <mbedtls_pk_get_bitlen>:
/*
 * Get key size in bits
 */
size_t mbedtls_pk_get_bitlen( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 808c338:	b120      	cbz	r0, 808c344 <mbedtls_pk_get_bitlen+0xc>
 808c33a:	6803      	ldr	r3, [r0, #0]
 808c33c:	b113      	cbz	r3, 808c344 <mbedtls_pk_get_bitlen+0xc>
        return( 0 );

    return( ctx->pk_info->get_bitlen( ctx->pk_ctx ) );
 808c33e:	689b      	ldr	r3, [r3, #8]
 808c340:	6840      	ldr	r0, [r0, #4]
 808c342:	4718      	bx	r3
}
 808c344:	2000      	movs	r0, #0
 808c346:	4770      	bx	lr

0808c348 <mbedtls_pk_verify_ext>:
 */
int mbedtls_pk_verify_ext( mbedtls_pk_type_t type, const void *options,
                   mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
 808c348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808c34c:	b087      	sub	sp, #28
 808c34e:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 808c352:	4683      	mov	fp, r0
 808c354:	e898 0700 	ldmia.w	r8, {r8, r9, sl}
 808c358:	460d      	mov	r5, r1
 808c35a:	461f      	mov	r7, r3
 808c35c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    if( ctx == NULL || ctx->pk_info == NULL )
 808c35e:	4614      	mov	r4, r2
 808c360:	b90a      	cbnz	r2, 808c366 <mbedtls_pk_verify_ext+0x1e>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 808c362:	4823      	ldr	r0, [pc, #140]	; (808c3f0 <mbedtls_pk_verify_ext+0xa8>)
 808c364:	e040      	b.n	808c3e8 <mbedtls_pk_verify_ext+0xa0>
int mbedtls_pk_verify_ext( mbedtls_pk_type_t type, const void *options,
                   mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 808c366:	6813      	ldr	r3, [r2, #0]
 808c368:	2b00      	cmp	r3, #0
 808c36a:	d0fa      	beq.n	808c362 <mbedtls_pk_verify_ext+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ! mbedtls_pk_can_do( ctx, type ) )
 808c36c:	4601      	mov	r1, r0
 808c36e:	4610      	mov	r0, r2
 808c370:	f7ff ff62 	bl	808c238 <mbedtls_pk_can_do>
 808c374:	2800      	cmp	r0, #0
 808c376:	d034      	beq.n	808c3e2 <mbedtls_pk_verify_ext+0x9a>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    if( type == MBEDTLS_PK_RSASSA_PSS )
 808c378:	f1bb 0f06 	cmp.w	fp, #6
 808c37c:	d123      	bne.n	808c3c6 <mbedtls_pk_verify_ext+0x7e>
#if SIZE_MAX > UINT_MAX
        if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

        if( options == NULL )
 808c37e:	2d00      	cmp	r5, #0
 808c380:	d0ef      	beq.n	808c362 <mbedtls_pk_verify_ext+0x1a>
 *
 * \return          Key length in bytes, or 0 on error
 */
static inline size_t mbedtls_pk_get_len( const mbedtls_pk_context *ctx )
{
    return( ( mbedtls_pk_get_bitlen( ctx ) + 7 ) / 8 );
 808c382:	4620      	mov	r0, r4
 808c384:	f7ff ffd8 	bl	808c338 <mbedtls_pk_get_bitlen>
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

        pss_opts = (const mbedtls_pk_rsassa_pss_options *) options;

        if( sig_len < mbedtls_pk_get_len( ctx ) )
 808c388:	3007      	adds	r0, #7
 808c38a:	ebb6 0fd0 	cmp.w	r6, r0, lsr #3
 808c38e:	d32a      	bcc.n	808c3e6 <mbedtls_pk_verify_ext+0x9e>
        ret = mbedtls_rsa_rsassa_pss_verify_ext( mbedtls_pk_rsa( *ctx ),
                NULL, NULL, MBEDTLS_RSA_PUBLIC,
                md_alg, (unsigned int) hash_len, hash,
                pss_opts->mgf1_hash_id,
                pss_opts->expected_salt_len,
                sig );
 808c390:	686b      	ldr	r3, [r5, #4]
 808c392:	e88d 0280 	stmia.w	sp, {r7, r9}
 808c396:	9304      	str	r3, [sp, #16]
 808c398:	782b      	ldrb	r3, [r5, #0]
 808c39a:	f8cd a014 	str.w	sl, [sp, #20]
 808c39e:	9303      	str	r3, [sp, #12]
 808c3a0:	f8cd 8008 	str.w	r8, [sp, #8]
 808c3a4:	2300      	movs	r3, #0
 808c3a6:	461a      	mov	r2, r3
 808c3a8:	4619      	mov	r1, r3
 808c3aa:	6860      	ldr	r0, [r4, #4]
 808c3ac:	f7f8 f9e0 	bl	8084770 <mbedtls_rsa_rsassa_pss_verify_ext>
        if( ret != 0 )
 808c3b0:	b9d0      	cbnz	r0, 808c3e8 <mbedtls_pk_verify_ext+0xa0>
 808c3b2:	4620      	mov	r0, r4
 808c3b4:	f7ff ffc0 	bl	808c338 <mbedtls_pk_get_bitlen>
            return( ret );

        if( sig_len > mbedtls_pk_get_len( ctx ) )
 808c3b8:	3007      	adds	r0, #7
            return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

        return( 0 );
 808c3ba:	ebb6 0fd0 	cmp.w	r6, r0, lsr #3
 808c3be:	480d      	ldr	r0, [pc, #52]	; (808c3f4 <mbedtls_pk_verify_ext+0xac>)
 808c3c0:	bf98      	it	ls
 808c3c2:	2000      	movls	r0, #0
 808c3c4:	e010      	b.n	808c3e8 <mbedtls_pk_verify_ext+0xa0>
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_RSA_C && MBEDTLS_PKCS1_V21 */
    }

    /* General case: no options */
    if( options != NULL )
 808c3c6:	2d00      	cmp	r5, #0
 808c3c8:	d1cb      	bne.n	808c362 <mbedtls_pk_verify_ext+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
 808c3ca:	464b      	mov	r3, r9
 808c3cc:	4642      	mov	r2, r8
 808c3ce:	4639      	mov	r1, r7
 808c3d0:	4620      	mov	r0, r4
 808c3d2:	9611      	str	r6, [sp, #68]	; 0x44
 808c3d4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
}
 808c3d8:	b007      	add	sp, #28
 808c3da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* General case: no options */
    if( options != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
 808c3de:	f7ff bf33 	b.w	808c248 <mbedtls_pk_verify>
{
    if( ctx == NULL || ctx->pk_info == NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ! mbedtls_pk_can_do( ctx, type ) )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 808c3e2:	4805      	ldr	r0, [pc, #20]	; (808c3f8 <mbedtls_pk_verify_ext+0xb0>)
 808c3e4:	e000      	b.n	808c3e8 <mbedtls_pk_verify_ext+0xa0>
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

        pss_opts = (const mbedtls_pk_rsassa_pss_options *) options;

        if( sig_len < mbedtls_pk_get_len( ctx ) )
            return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 808c3e6:	4805      	ldr	r0, [pc, #20]	; (808c3fc <mbedtls_pk_verify_ext+0xb4>)
    /* General case: no options */
    if( options != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
}
 808c3e8:	b007      	add	sp, #28
 808c3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808c3ee:	bf00      	nop
 808c3f0:	ffffc180 	.word	0xffffc180
 808c3f4:	ffffc700 	.word	0xffffc700
 808c3f8:	ffffc100 	.word	0xffffc100
 808c3fc:	ffffbc80 	.word	0xffffbc80

0808c400 <mbedtls_pk_get_name>:
/*
 * Access the PK type name
 */
const char *mbedtls_pk_get_name( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 808c400:	b118      	cbz	r0, 808c40a <mbedtls_pk_get_name+0xa>
 808c402:	6803      	ldr	r3, [r0, #0]
 808c404:	b10b      	cbz	r3, 808c40a <mbedtls_pk_get_name+0xa>
        return( "invalid PK" );

    return( ctx->pk_info->name );
 808c406:	6858      	ldr	r0, [r3, #4]
 808c408:	4770      	bx	lr
 * Access the PK type name
 */
const char *mbedtls_pk_get_name( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
        return( "invalid PK" );
 808c40a:	4801      	ldr	r0, [pc, #4]	; (808c410 <mbedtls_pk_get_name+0x10>)

    return( ctx->pk_info->name );
}
 808c40c:	4770      	bx	lr
 808c40e:	bf00      	nop
 808c410:	080983e4 	.word	0x080983e4

0808c414 <mbedtls_pk_get_type>:
/*
 * Access the PK type
 */
mbedtls_pk_type_t mbedtls_pk_get_type( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 808c414:	b110      	cbz	r0, 808c41c <mbedtls_pk_get_type+0x8>
 808c416:	6800      	ldr	r0, [r0, #0]
 808c418:	b100      	cbz	r0, 808c41c <mbedtls_pk_get_type+0x8>
        return( MBEDTLS_PK_NONE );

    return( ctx->pk_info->type );
 808c41a:	7800      	ldrb	r0, [r0, #0]
}
 808c41c:	4770      	bx	lr
	...

0808c420 <_ZL14aes_gen_tablesv>:
#define MUL(x,y) ( ( x && y ) ? pow[(log[x]+log[y]) % 255] : 0 )

static int aes_init_done = 0;

static void aes_gen_tables( void )
{
 808c420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808c424:	f6ad 0d14 	subw	sp, sp, #2068	; 0x814
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 808c428:	2301      	movs	r3, #1
 808c42a:	2200      	movs	r2, #0
    {
        pow[i] = x;
        log[x] = i;
 808c42c:	f50d 6082 	add.w	r0, sp, #1040	; 0x410
    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
    {
        pow[i] = x;
 808c430:	a904      	add	r1, sp, #16
 808c432:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
 808c436:	f013 0180 	ands.w	r1, r3, #128	; 0x80
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
    {
        pow[i] = x;
        log[x] = i;
 808c43a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        x = ( x ^ XTIME( x ) ) & 0xFF;
 808c43e:	bf18      	it	ne
 808c440:	211b      	movne	r1, #27
 808c442:	ea83 0343 	eor.w	r3, r3, r3, lsl #1
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 808c446:	3201      	adds	r2, #1
    {
        pow[i] = x;
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
 808c448:	404b      	eors	r3, r1
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 808c44a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    {
        pow[i] = x;
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
 808c44e:	b2db      	uxtb	r3, r3
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 808c450:	d1ee      	bne.n	808c430 <_ZL14aes_gen_tablesv+0x10>
    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
    {
        RCON[i] = (uint32_t) x;
 808c452:	4c66      	ldr	r4, [pc, #408]	; (808c5ec <_ZL14aes_gen_tablesv+0x1cc>)
 808c454:	2301      	movs	r3, #1
 808c456:	2200      	movs	r2, #0
        x = XTIME( x ) & 0xFF;
 808c458:	f013 0180 	ands.w	r1, r3, #128	; 0x80
    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
    {
        RCON[i] = (uint32_t) x;
 808c45c:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        x = XTIME( x ) & 0xFF;
 808c460:	bf18      	it	ne
 808c462:	211b      	movne	r1, #27
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 808c464:	3201      	adds	r2, #1
    {
        RCON[i] = (uint32_t) x;
        x = XTIME( x ) & 0xFF;
 808c466:	ea81 0343 	eor.w	r3, r1, r3, lsl #1
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 808c46a:	2a0a      	cmp	r2, #10
    {
        RCON[i] = (uint32_t) x;
        x = XTIME( x ) & 0xFF;
 808c46c:	b2db      	uxtb	r3, r3
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 808c46e:	d1f3      	bne.n	808c458 <_ZL14aes_gen_tablesv+0x38>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 808c470:	4e5f      	ldr	r6, [pc, #380]	; (808c5f0 <_ZL14aes_gen_tablesv+0x1d0>)
 808c472:	2363      	movs	r3, #99	; 0x63
    RSb[0x63] = 0x00;
 808c474:	4d5f      	ldr	r5, [pc, #380]	; (808c5f4 <_ZL14aes_gen_tablesv+0x1d4>)
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 808c476:	7033      	strb	r3, [r6, #0]
    RSb[0x63] = 0x00;
 808c478:	2300      	movs	r3, #0
 808c47a:	f885 3063 	strb.w	r3, [r5, #99]	; 0x63

    for( i = 1; i < 256; i++ )
 808c47e:	2401      	movs	r4, #1
    {
        x = pow[255 - log[i]];
 808c480:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 808c484:	aa04      	add	r2, sp, #16
 808c486:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 808c48a:	f852 e023 	ldr.w	lr, [r2, r3, lsl #2]

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 808c48e:	ea4f 11ee 	mov.w	r1, lr, asr #7
 808c492:	ea41 014e 	orr.w	r1, r1, lr, lsl #1
 808c496:	b2c9      	uxtb	r1, r1
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 808c498:	11ca      	asrs	r2, r1, #7
 808c49a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 808c49e:	b2d2      	uxtb	r2, r2
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 808c4a0:	11d3      	asrs	r3, r2, #7
 808c4a2:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 808c4a6:	b2db      	uxtb	r3, r3
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y ^ 0x63;
 808c4a8:	f08e 0e63 	eor.w	lr, lr, #99	; 0x63
        x = pow[255 - log[i]];

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 808c4ac:	11df      	asrs	r7, r3, #7
        x ^= y ^ 0x63;
 808c4ae:	ea8e 0101 	eor.w	r1, lr, r1
        x = pow[255 - log[i]];

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 808c4b2:	ea47 0743 	orr.w	r7, r7, r3, lsl #1
        x ^= y ^ 0x63;
 808c4b6:	404a      	eors	r2, r1
 808c4b8:	4053      	eors	r3, r2
 808c4ba:	b2fa      	uxtb	r2, r7
 808c4bc:	4053      	eors	r3, r2

        FSb[i] = (unsigned char) x;
 808c4be:	5533      	strb	r3, [r6, r4]
        RSb[x] = (unsigned char) i;
 808c4c0:	54ec      	strb	r4, [r5, r3]
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
    RSb[0x63] = 0x00;

    for( i = 1; i < 256; i++ )
 808c4c2:	3401      	adds	r4, #1
 808c4c4:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 808c4c8:	d1da      	bne.n	808c480 <_ZL14aes_gen_tablesv+0x60>
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 808c4ca:	6b83      	ldr	r3, [r0, #56]	; 0x38
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 808c4cc:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 808c4ce:	9301      	str	r3, [sp, #4]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 808c4d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
 808c4d2:	f8df e11c 	ldr.w	lr, [pc, #284]	; 808c5f0 <_ZL14aes_gen_tablesv+0x1d0>
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 808c4d6:	9302      	str	r3, [sp, #8]
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 808c4d8:	6b43      	ldr	r3, [r0, #52]	; 0x34
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
                 ( (uint32_t) z << 24 );
 808c4da:	f8df c12c 	ldr.w	ip, [pc, #300]	; 808c608 <_ZL14aes_gen_tablesv+0x1e8>

        FT1[i] = ROTL8( FT0[i] );
 808c4de:	f8df 812c 	ldr.w	r8, [pc, #300]	; 808c60c <_ZL14aes_gen_tablesv+0x1ec>
        FT2[i] = ROTL8( FT1[i] );
 808c4e2:	f8df 912c 	ldr.w	r9, [pc, #300]	; 808c610 <_ZL14aes_gen_tablesv+0x1f0>
        FT3[i] = ROTL8( FT2[i] );
 808c4e6:	f8df a12c 	ldr.w	sl, [pc, #300]	; 808c614 <_ZL14aes_gen_tablesv+0x1f4>

        x = RSb[i];
 808c4ea:	f8df b108 	ldr.w	fp, [pc, #264]	; 808c5f4 <_ZL14aes_gen_tablesv+0x1d4>

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 808c4ee:	9303      	str	r3, [sp, #12]
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 808c4f0:	2200      	movs	r2, #0
    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
 808c4f2:	f812 000e 	ldrb.w	r0, [r2, lr]
 808c4f6:	0094      	lsls	r4, r2, #2
        y = XTIME( x ) & 0xFF;
 808c4f8:	f010 0f80 	tst.w	r0, #128	; 0x80
 808c4fc:	bf14      	ite	ne
 808c4fe:	211b      	movne	r1, #27
 808c500:	2100      	moveq	r1, #0
 808c502:	ea81 0140 	eor.w	r1, r1, r0, lsl #1
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
 808c506:	0403      	lsls	r3, r0, #16
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
        y = XTIME( x ) & 0xFF;
 808c508:	b2c9      	uxtb	r1, r1
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
 808c50a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 808c50e:	404b      	eors	r3, r1
 808c510:	4041      	eors	r1, r0
 808c512:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
                 ( (uint32_t) z << 24 );
 808c516:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]

        FT1[i] = ROTL8( FT0[i] );
 808c51a:	ea4f 6333 	mov.w	r3, r3, ror #24
 808c51e:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
        FT2[i] = ROTL8( FT1[i] );
 808c522:	ea4f 6333 	mov.w	r3, r3, ror #24
 808c526:	f849 3022 	str.w	r3, [r9, r2, lsl #2]
        FT3[i] = ROTL8( FT2[i] );
 808c52a:	ea4f 6333 	mov.w	r3, r3, ror #24
 808c52e:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]

        x = RSb[i];
 808c532:	f81b 3002 	ldrb.w	r3, [fp, r2]

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 808c536:	b1d3      	cbz	r3, 808c56e <_ZL14aes_gen_tablesv+0x14e>
 808c538:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 808c53c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 808c540:	9801      	ldr	r0, [sp, #4]
 808c542:	1845      	adds	r5, r0, r1
 808c544:	20ff      	movs	r0, #255	; 0xff
 808c546:	fb95 f6f0 	sdiv	r6, r5, r0
 808c54a:	ebc6 2606 	rsb	r6, r6, r6, lsl #8
 808c54e:	1bae      	subs	r6, r5, r6
 808c550:	ad04      	add	r5, sp, #16
 808c552:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 808c556:	9e02      	ldr	r6, [sp, #8]
 808c558:	4431      	add	r1, r6
 808c55a:	fb91 f0f0 	sdiv	r0, r1, r0
 808c55e:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 808c562:	1a09      	subs	r1, r1, r0
 808c564:	a804      	add	r0, sp, #16
 808c566:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 808c56a:	0209      	lsls	r1, r1, #8
 808c56c:	e001      	b.n	808c572 <_ZL14aes_gen_tablesv+0x152>
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 808c56e:	461d      	mov	r5, r3
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 808c570:	4619      	mov	r1, r3
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 808c572:	404d      	eors	r5, r1
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 808c574:	b183      	cbz	r3, 808c598 <_ZL14aes_gen_tablesv+0x178>
 808c576:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 808c57a:	9803      	ldr	r0, [sp, #12]
 808c57c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 808c580:	4401      	add	r1, r0
 808c582:	20ff      	movs	r0, #255	; 0xff
 808c584:	fb91 f0f0 	sdiv	r0, r1, r0
 808c588:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 808c58c:	1a08      	subs	r0, r1, r0
 808c58e:	a904      	add	r1, sp, #16
 808c590:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 808c594:	0409      	lsls	r1, r1, #16
 808c596:	e000      	b.n	808c59a <_ZL14aes_gen_tablesv+0x17a>
 808c598:	4619      	mov	r1, r3
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 808c59a:	404d      	eors	r5, r1
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 808c59c:	b173      	cbz	r3, 808c5bc <_ZL14aes_gen_tablesv+0x19c>
 808c59e:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 808c5a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 808c5a6:	21ff      	movs	r1, #255	; 0xff
 808c5a8:	443b      	add	r3, r7
 808c5aa:	fb93 f1f1 	sdiv	r1, r3, r1
 808c5ae:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 808c5b2:	1a59      	subs	r1, r3, r1
 808c5b4:	ab04      	add	r3, sp, #16
 808c5b6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 808c5ba:	061b      	lsls	r3, r3, #24

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 808c5bc:	405d      	eors	r5, r3
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 808c5be:	4b0e      	ldr	r3, [pc, #56]	; (808c5f8 <_ZL14aes_gen_tablesv+0x1d8>)
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 808c5c0:	3201      	adds	r2, #1
        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 808c5c2:	50e5      	str	r5, [r4, r3]

        RT1[i] = ROTL8( RT0[i] );
 808c5c4:	4b0d      	ldr	r3, [pc, #52]	; (808c5fc <_ZL14aes_gen_tablesv+0x1dc>)
 808c5c6:	ea4f 6535 	mov.w	r5, r5, ror #24
 808c5ca:	50e5      	str	r5, [r4, r3]
        RT2[i] = ROTL8( RT1[i] );
 808c5cc:	4b0c      	ldr	r3, [pc, #48]	; (808c600 <_ZL14aes_gen_tablesv+0x1e0>)
 808c5ce:	ea4f 6535 	mov.w	r5, r5, ror #24
 808c5d2:	50e5      	str	r5, [r4, r3]
        RT3[i] = ROTL8( RT2[i] );
 808c5d4:	4b0b      	ldr	r3, [pc, #44]	; (808c604 <_ZL14aes_gen_tablesv+0x1e4>)
 808c5d6:	ea4f 6535 	mov.w	r5, r5, ror #24
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 808c5da:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );

        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
 808c5de:	50e5      	str	r5, [r4, r3]
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 808c5e0:	d187      	bne.n	808c4f2 <_ZL14aes_gen_tablesv+0xd2>

        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
    }
}
 808c5e2:	f60d 0d14 	addw	sp, sp, #2068	; 0x814
 808c5e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808c5ea:	bf00      	nop
 808c5ec:	2000281c 	.word	0x2000281c
 808c5f0:	2000171c 	.word	0x2000171c
 808c5f4:	2000161c 	.word	0x2000161c
 808c5f8:	20001c1c 	.word	0x20001c1c
 808c5fc:	2000201c 	.word	0x2000201c
 808c600:	2000241c 	.word	0x2000241c
 808c604:	2000181c 	.word	0x2000181c
 808c608:	2000061c 	.word	0x2000061c
 808c60c:	20000a1c 	.word	0x20000a1c
 808c610:	20000e1c 	.word	0x20000e1c
 808c614:	2000121c 	.word	0x2000121c

0808c618 <mbedtls_aes_init>:

#endif /* MBEDTLS_AES_ROM_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 808c618:	f44f 728c 	mov.w	r2, #280	; 0x118
 808c61c:	2100      	movs	r1, #0
 808c61e:	f007 bcc6 	b.w	8093fae <memset>

0808c622 <mbedtls_aes_free>:
}

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
 808c622:	b138      	cbz	r0, 808c634 <mbedtls_aes_free+0x12>
 808c624:	f500 728c 	add.w	r2, r0, #280	; 0x118

#if !defined(MBEDTLS_AES_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 808c628:	2300      	movs	r3, #0
 808c62a:	4290      	cmp	r0, r2
 808c62c:	d002      	beq.n	808c634 <mbedtls_aes_free+0x12>
 808c62e:	7003      	strb	r3, [r0, #0]
 808c630:	3001      	adds	r0, #1
 808c632:	e7fa      	b.n	808c62a <mbedtls_aes_free+0x8>
 808c634:	4770      	bx	lr
	...

0808c638 <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 808c638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    unsigned int i;
    uint32_t *RK;

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 808c63a:	4e7a      	ldr	r6, [pc, #488]	; (808c824 <mbedtls_aes_setkey_enc+0x1ec>)
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 808c63c:	4604      	mov	r4, r0
    unsigned int i;
    uint32_t *RK;

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 808c63e:	6833      	ldr	r3, [r6, #0]
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 808c640:	460f      	mov	r7, r1
 808c642:	4615      	mov	r5, r2
    unsigned int i;
    uint32_t *RK;

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 808c644:	b91b      	cbnz	r3, 808c64e <mbedtls_aes_setkey_enc+0x16>
    {
        aes_gen_tables();
 808c646:	f7ff feeb 	bl	808c420 <_ZL14aes_gen_tablesv>
        aes_init_done = 1;
 808c64a:	2301      	movs	r3, #1
 808c64c:	6033      	str	r3, [r6, #0]

    }
#endif

    switch( keybits )
 808c64e:	2dc0      	cmp	r5, #192	; 0xc0
 808c650:	d007      	beq.n	808c662 <mbedtls_aes_setkey_enc+0x2a>
 808c652:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 808c656:	d006      	beq.n	808c666 <mbedtls_aes_setkey_enc+0x2e>
 808c658:	2d80      	cmp	r5, #128	; 0x80
 808c65a:	f040 80dd 	bne.w	808c818 <mbedtls_aes_setkey_enc+0x1e0>
    {
        case 128: ctx->nr = 10; break;
 808c65e:	230a      	movs	r3, #10
 808c660:	e002      	b.n	808c668 <mbedtls_aes_setkey_enc+0x30>
        case 192: ctx->nr = 12; break;
 808c662:	230c      	movs	r3, #12
 808c664:	e000      	b.n	808c668 <mbedtls_aes_setkey_enc+0x30>
        case 256: ctx->nr = 14; break;
 808c666:	230e      	movs	r3, #14
 808c668:	6023      	str	r3, [r4, #0]

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 808c66a:	f104 0308 	add.w	r3, r4, #8
 808c66e:	6063      	str	r3, [r4, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 808c670:	096d      	lsrs	r5, r5, #5
 808c672:	2000      	movs	r0, #0
 808c674:	42a8      	cmp	r0, r5
 808c676:	d010      	beq.n	808c69a <mbedtls_aes_setkey_enc+0x62>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
 808c678:	eb07 0180 	add.w	r1, r7, r0, lsl #2
 808c67c:	788a      	ldrb	r2, [r1, #2]
 808c67e:	784e      	ldrb	r6, [r1, #1]
 808c680:	0412      	lsls	r2, r2, #16
 808c682:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 808c686:	f817 6020 	ldrb.w	r6, [r7, r0, lsl #2]
 808c68a:	78c9      	ldrb	r1, [r1, #3]
 808c68c:	4332      	orrs	r2, r6
 808c68e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 808c692:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 808c696:	3001      	adds	r0, #1
 808c698:	e7ec      	b.n	808c674 <mbedtls_aes_setkey_enc+0x3c>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 808c69a:	6822      	ldr	r2, [r4, #0]
 808c69c:	2a0c      	cmp	r2, #12
 808c69e:	d031      	beq.n	808c704 <mbedtls_aes_setkey_enc+0xcc>
 808c6a0:	2a0e      	cmp	r2, #14
 808c6a2:	d068      	beq.n	808c776 <mbedtls_aes_setkey_enc+0x13e>
 808c6a4:	2a0a      	cmp	r2, #10
 808c6a6:	f040 80ba 	bne.w	808c81e <mbedtls_aes_setkey_enc+0x1e6>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 808c6aa:	4f5f      	ldr	r7, [pc, #380]	; (808c828 <mbedtls_aes_setkey_enc+0x1f0>)
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 808c6ac:	4e5f      	ldr	r6, [pc, #380]	; (808c82c <mbedtls_aes_setkey_enc+0x1f4>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 808c6ae:	2500      	movs	r5, #0
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 808c6b0:	68dc      	ldr	r4, [r3, #12]
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808c6b2:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 808c6b6:	681a      	ldr	r2, [r3, #0]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 808c6b8:	3501      	adds	r5, #1
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808c6ba:	4051      	eors	r1, r2
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 808c6bc:	f3c4 2207 	ubfx	r2, r4, #8, #8
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808c6c0:	5cb0      	ldrb	r0, [r6, r2]
 808c6c2:	0e22      	lsrs	r2, r4, #24
 808c6c4:	5cb2      	ldrb	r2, [r6, r2]
 808c6c6:	4041      	eors	r1, r0
 808c6c8:	ea81 4102 	eor.w	r1, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 808c6cc:	b2e2      	uxtb	r2, r4
            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808c6ce:	5cb2      	ldrb	r2, [r6, r2]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 808c6d0:	2d0a      	cmp	r5, #10
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808c6d2:	ea81 6102 	eor.w	r1, r1, r2, lsl #24

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 808c6d6:	f3c4 4207 	ubfx	r2, r4, #16, #8
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808c6da:	5cb2      	ldrb	r2, [r6, r2]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 808c6dc:	f103 0310 	add.w	r3, r3, #16
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 808c6e0:	ea81 2202 	eor.w	r2, r1, r2, lsl #8
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
 808c6e4:	f853 1c0c 	ldr.w	r1, [r3, #-12]
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 808c6e8:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
 808c6ea:	ea82 0201 	eor.w	r2, r2, r1
                RK[6]  = RK[2] ^ RK[5];
 808c6ee:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
 808c6f2:	605a      	str	r2, [r3, #4]
                RK[6]  = RK[2] ^ RK[5];
 808c6f4:	ea82 0201 	eor.w	r2, r2, r1
 808c6f8:	609a      	str	r2, [r3, #8]
                RK[7]  = RK[3] ^ RK[6];
 808c6fa:	ea82 0204 	eor.w	r2, r2, r4
 808c6fe:	60da      	str	r2, [r3, #12]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 808c700:	d1d6      	bne.n	808c6b0 <mbedtls_aes_setkey_enc+0x78>
 808c702:	e08c      	b.n	808c81e <mbedtls_aes_setkey_enc+0x1e6>

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
 808c704:	4e48      	ldr	r6, [pc, #288]	; (808c828 <mbedtls_aes_setkey_enc+0x1f0>)
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 808c706:	4d49      	ldr	r5, [pc, #292]	; (808c82c <mbedtls_aes_setkey_enc+0x1f4>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 808c708:	2400      	movs	r4, #0
            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808c70a:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 808c70e:	6958      	ldr	r0, [r3, #20]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808c710:	681a      	ldr	r2, [r3, #0]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 808c712:	3401      	adds	r4, #1
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808c714:	404a      	eors	r2, r1
        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 808c716:	f3c0 2107 	ubfx	r1, r0, #8, #8
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808c71a:	5c69      	ldrb	r1, [r5, r1]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 808c71c:	2c08      	cmp	r4, #8
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808c71e:	ea82 0201 	eor.w	r2, r2, r1
 808c722:	ea4f 6110 	mov.w	r1, r0, lsr #24
 808c726:	5c69      	ldrb	r1, [r5, r1]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 808c728:	f103 0318 	add.w	r3, r3, #24
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808c72c:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 808c730:	b2c1      	uxtb	r1, r0
            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808c732:	5c69      	ldrb	r1, [r5, r1]
 808c734:	ea82 6201 	eor.w	r2, r2, r1, lsl #24

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 808c738:	f3c0 4107 	ubfx	r1, r0, #16, #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 808c73c:	5c69      	ldrb	r1, [r5, r1]
 808c73e:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
 808c742:	f853 1c14 	ldr.w	r1, [r3, #-20]
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 808c746:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
 808c748:	ea82 0201 	eor.w	r2, r2, r1
                RK[8]  = RK[2] ^ RK[7];
 808c74c:	f853 1c10 	ldr.w	r1, [r3, #-16]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
 808c750:	605a      	str	r2, [r3, #4]
                RK[8]  = RK[2] ^ RK[7];
 808c752:	ea82 0201 	eor.w	r2, r2, r1
                RK[9]  = RK[3] ^ RK[8];
 808c756:	f853 1c0c 	ldr.w	r1, [r3, #-12]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
 808c75a:	609a      	str	r2, [r3, #8]
                RK[9]  = RK[3] ^ RK[8];
 808c75c:	ea82 0201 	eor.w	r2, r2, r1
                RK[10] = RK[4] ^ RK[9];
 808c760:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
                RK[9]  = RK[3] ^ RK[8];
 808c764:	60da      	str	r2, [r3, #12]
                RK[10] = RK[4] ^ RK[9];
 808c766:	ea82 0201 	eor.w	r2, r2, r1
 808c76a:	611a      	str	r2, [r3, #16]
                RK[11] = RK[5] ^ RK[10];
 808c76c:	ea82 0200 	eor.w	r2, r2, r0
 808c770:	615a      	str	r2, [r3, #20]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 808c772:	d1ca      	bne.n	808c70a <mbedtls_aes_setkey_enc+0xd2>
 808c774:	e053      	b.n	808c81e <mbedtls_aes_setkey_enc+0x1e6>

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
 808c776:	4e2c      	ldr	r6, [pc, #176]	; (808c828 <mbedtls_aes_setkey_enc+0x1f0>)
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 808c778:	482c      	ldr	r0, [pc, #176]	; (808c82c <mbedtls_aes_setkey_enc+0x1f4>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 808c77a:	2500      	movs	r5, #0
            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808c77c:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 808c780:	69dc      	ldr	r4, [r3, #28]
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808c782:	681a      	ldr	r2, [r3, #0]
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
 808c784:	685f      	ldr	r7, [r3, #4]
            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808c786:	4051      	eors	r1, r2
        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 808c788:	f3c4 2207 	ubfx	r2, r4, #8, #8
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808c78c:	5c82      	ldrb	r2, [r0, r2]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 808c78e:	3501      	adds	r5, #1
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808c790:	4051      	eors	r1, r2
 808c792:	0e22      	lsrs	r2, r4, #24
 808c794:	5c82      	ldrb	r2, [r0, r2]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 808c796:	2d07      	cmp	r5, #7
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808c798:	ea81 4102 	eor.w	r1, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 808c79c:	b2e2      	uxtb	r2, r4
            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808c79e:	5c82      	ldrb	r2, [r0, r2]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 808c7a0:	f103 0320 	add.w	r3, r3, #32
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808c7a4:	ea81 6102 	eor.w	r1, r1, r2, lsl #24

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 808c7a8:	f3c4 4207 	ubfx	r2, r4, #16, #8
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 808c7ac:	5c82      	ldrb	r2, [r0, r2]
 808c7ae:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
 808c7b2:	f853 2c18 	ldr.w	r2, [r3, #-24]
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 808c7b6:	6019      	str	r1, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
 808c7b8:	ea81 0107 	eor.w	r1, r1, r7
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];
 808c7bc:	f853 7c14 	ldr.w	r7, [r3, #-20]
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
 808c7c0:	6059      	str	r1, [r3, #4]
                RK[10] = RK[2] ^ RK[9];
 808c7c2:	ea81 0102 	eor.w	r1, r1, r2
                RK[11] = RK[3] ^ RK[10];
 808c7c6:	ea87 0701 	eor.w	r7, r7, r1
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
 808c7ca:	6099      	str	r1, [r3, #8]
                RK[11] = RK[3] ^ RK[10];
 808c7cc:	60df      	str	r7, [r3, #12]

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 808c7ce:	b2fa      	uxtb	r2, r7
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 808c7d0:	5c82      	ldrb	r2, [r0, r2]
 808c7d2:	f853 1c10 	ldr.w	r1, [r3, #-16]
 808c7d6:	ea81 0102 	eor.w	r1, r1, r2
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 808c7da:	ea4f 6217 	mov.w	r2, r7, lsr #24
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 808c7de:	5c82      	ldrb	r2, [r0, r2]
 808c7e0:	ea81 6102 	eor.w	r1, r1, r2, lsl #24
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 808c7e4:	f3c7 2207 	ubfx	r2, r7, #8, #8
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 808c7e8:	5c82      	ldrb	r2, [r0, r2]
 808c7ea:	f3c7 4707 	ubfx	r7, r7, #16, #8
 808c7ee:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
 808c7f2:	5dc2      	ldrb	r2, [r0, r7]
 808c7f4:	ea81 4202 	eor.w	r2, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
 808c7f8:	f853 1c0c 	ldr.w	r1, [r3, #-12]

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 808c7fc:	611a      	str	r2, [r3, #16]

                RK[13] = RK[5] ^ RK[12];
 808c7fe:	ea82 0201 	eor.w	r2, r2, r1
                RK[14] = RK[6] ^ RK[13];
 808c802:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
 808c806:	615a      	str	r2, [r3, #20]
                RK[14] = RK[6] ^ RK[13];
 808c808:	ea82 0201 	eor.w	r2, r2, r1
 808c80c:	619a      	str	r2, [r3, #24]
                RK[15] = RK[7] ^ RK[14];
 808c80e:	ea82 0204 	eor.w	r2, r2, r4
 808c812:	61da      	str	r2, [r3, #28]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 808c814:	d1b2      	bne.n	808c77c <mbedtls_aes_setkey_enc+0x144>
 808c816:	e002      	b.n	808c81e <mbedtls_aes_setkey_enc+0x1e6>
    switch( keybits )
    {
        case 128: ctx->nr = 10; break;
        case 192: ctx->nr = 12; break;
        case 256: ctx->nr = 14; break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 808c818:	f06f 001f 	mvn.w	r0, #31
 808c81c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                RK[15] = RK[7] ^ RK[14];
            }
            break;
    }

    return( 0 );
 808c81e:	2000      	movs	r0, #0
}
 808c820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808c822:	bf00      	nop
 808c824:	20000618 	.word	0x20000618
 808c828:	2000281c 	.word	0x2000281c
 808c82c:	2000171c 	.word	0x2000171c

0808c830 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 808c830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808c834:	4604      	mov	r4, r0
 808c836:	460d      	mov	r5, r1
 808c838:	4616      	mov	r6, r2
 808c83a:	b0c9      	sub	sp, #292	; 0x124
    int i, j, ret;
    mbedtls_aes_context cty;
    uint32_t *RK;
    uint32_t *SK;

    mbedtls_aes_init( &cty );
 808c83c:	a802      	add	r0, sp, #8
 808c83e:	f7ff feeb 	bl	808c618 <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 808c842:	f104 0308 	add.w	r3, r4, #8
 808c846:	6063      	str	r3, [r4, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 808c848:	4632      	mov	r2, r6
 808c84a:	4629      	mov	r1, r5
 808c84c:	a802      	add	r0, sp, #8
 808c84e:	f7ff fef3 	bl	808c638 <mbedtls_aes_setkey_enc>
 808c852:	4680      	mov	r8, r0
 808c854:	2800      	cmp	r0, #0
 808c856:	d14b      	bne.n	808c8f0 <mbedtls_aes_setkey_dec+0xc0>
        goto exit;

    ctx->nr = cty.nr;
 808c858:	9902      	ldr	r1, [sp, #8]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 808c85a:	9803      	ldr	r0, [sp, #12]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
        goto exit;

    ctx->nr = cty.nr;
 808c85c:	6021      	str	r1, [r4, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 808c85e:	010a      	lsls	r2, r1, #4
 808c860:	1883      	adds	r3, r0, r2

    *RK++ = *SK++;
 808c862:	5882      	ldr	r2, [r0, r2]
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 808c864:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 808c908 <mbedtls_aes_setkey_dec+0xd8>
    }
#endif

    SK = cty.rk + cty.nr * 4;

    *RK++ = *SK++;
 808c868:	60a2      	str	r2, [r4, #8]
    *RK++ = *SK++;
 808c86a:	685a      	ldr	r2, [r3, #4]
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 808c86c:	f8df 909c 	ldr.w	r9, [pc, #156]	; 808c90c <mbedtls_aes_setkey_dec+0xdc>
#endif

    SK = cty.rk + cty.nr * 4;

    *RK++ = *SK++;
    *RK++ = *SK++;
 808c870:	60e2      	str	r2, [r4, #12]
    *RK++ = *SK++;
 808c872:	689a      	ldr	r2, [r3, #8]
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 808c874:	f8df a098 	ldr.w	sl, [pc, #152]	; 808c910 <mbedtls_aes_setkey_dec+0xe0>

    SK = cty.rk + cty.nr * 4;

    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
 808c878:	6122      	str	r2, [r4, #16]
    *RK++ = *SK++;
 808c87a:	68d8      	ldr	r0, [r3, #12]
 808c87c:	f104 0218 	add.w	r2, r4, #24
 808c880:	6160      	str	r0, [r4, #20]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 808c882:	4c1f      	ldr	r4, [pc, #124]	; (808c900 <mbedtls_aes_setkey_dec+0xd0>)
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 808c884:	3901      	subs	r1, #1
 808c886:	3b10      	subs	r3, #16
 808c888:	2900      	cmp	r1, #0
 808c88a:	dd29      	ble.n	808c8e0 <mbedtls_aes_setkey_dec+0xb0>
 808c88c:	1f1d      	subs	r5, r3, #4
 808c88e:	f1a2 0e04 	sub.w	lr, r2, #4
 808c892:	f103 0b0c 	add.w	fp, r3, #12
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 808c896:	f855 0f04 	ldr.w	r0, [r5, #4]!
 808c89a:	b2c6      	uxtb	r6, r0
 808c89c:	5da7      	ldrb	r7, [r4, r6]
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 808c89e:	0e06      	lsrs	r6, r0, #24
 808c8a0:	5da6      	ldrb	r6, [r4, r6]
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
 808c8a2:	45ab      	cmp	fp, r5
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 808c8a4:	9601      	str	r6, [sp, #4]
 808c8a6:	4e17      	ldr	r6, [pc, #92]	; (808c904 <mbedtls_aes_setkey_dec+0xd4>)
 808c8a8:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 808c8ac:	9e01      	ldr	r6, [sp, #4]
 808c8ae:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 808c8b2:	ea87 0706 	eor.w	r7, r7, r6
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 808c8b6:	f3c0 2607 	ubfx	r6, r0, #8, #8
 808c8ba:	5da6      	ldrb	r6, [r4, r6]
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 808c8bc:	f3c0 4007 	ubfx	r0, r0, #16, #8
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 808c8c0:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 808c8c4:	5c20      	ldrb	r0, [r4, r0]
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 808c8c6:	ea86 0607 	eor.w	r6, r6, r7
 808c8ca:	f85a 7020 	ldr.w	r7, [sl, r0, lsl #2]
 808c8ce:	ea86 0607 	eor.w	r6, r6, r7
 808c8d2:	f84e 6f04 	str.w	r6, [lr, #4]!
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
 808c8d6:	d1de      	bne.n	808c896 <mbedtls_aes_setkey_dec+0x66>
 808c8d8:	3210      	adds	r2, #16
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 808c8da:	3901      	subs	r1, #1
 808c8dc:	3b10      	subs	r3, #16
 808c8de:	e7d3      	b.n	808c888 <mbedtls_aes_setkey_dec+0x58>
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
        }
    }

    *RK++ = *SK++;
 808c8e0:	6819      	ldr	r1, [r3, #0]
 808c8e2:	6011      	str	r1, [r2, #0]
    *RK++ = *SK++;
 808c8e4:	6859      	ldr	r1, [r3, #4]
 808c8e6:	6051      	str	r1, [r2, #4]
    *RK++ = *SK++;
 808c8e8:	6899      	ldr	r1, [r3, #8]
 808c8ea:	6091      	str	r1, [r2, #8]
    *RK++ = *SK++;
 808c8ec:	68db      	ldr	r3, [r3, #12]
 808c8ee:	60d3      	str	r3, [r2, #12]

exit:
    mbedtls_aes_free( &cty );
 808c8f0:	a802      	add	r0, sp, #8
 808c8f2:	f7ff fe96 	bl	808c622 <mbedtls_aes_free>

    return( ret );
}
 808c8f6:	4640      	mov	r0, r8
 808c8f8:	b049      	add	sp, #292	; 0x124
 808c8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808c8fe:	bf00      	nop
 808c900:	2000171c 	.word	0x2000171c
 808c904:	20001c1c 	.word	0x20001c1c
 808c908:	2000181c 	.word	0x2000181c
 808c90c:	2000201c 	.word	0x2000201c
 808c910:	2000241c 	.word	0x2000241c

0808c914 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 808c914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 808c918:	6843      	ldr	r3, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 808c91a:	680d      	ldr	r5, [r1, #0]
 808c91c:	681c      	ldr	r4, [r3, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808c91e:	6800      	ldr	r0, [r0, #0]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 808c920:	ea85 0b04 	eor.w	fp, r5, r4
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 808c924:	684d      	ldr	r5, [r1, #4]
 808c926:	685c      	ldr	r4, [r3, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 808c928:	688e      	ldr	r6, [r1, #8]
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 808c92a:	406c      	eors	r4, r5
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 808c92c:	689d      	ldr	r5, [r3, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808c92e:	1040      	asrs	r0, r0, #1
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 808c930:	b085      	sub	sp, #20
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808c932:	3801      	subs	r0, #1

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 808c934:	4075      	eors	r5, r6
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 808c936:	68ce      	ldr	r6, [r1, #12]
 808c938:	68d9      	ldr	r1, [r3, #12]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808c93a:	9001      	str	r0, [sp, #4]
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 808c93c:	f853 0f10 	ldr.w	r0, [r3, #16]!
 808c940:	4071      	eors	r1, r6
 808c942:	f8df e364 	ldr.w	lr, [pc, #868]	; 808cca8 <mbedtls_internal_aes_encrypt+0x394>
 808c946:	4ed4      	ldr	r6, [pc, #848]	; (808cc98 <mbedtls_internal_aes_encrypt+0x384>)

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808c948:	f8df a354 	ldr.w	sl, [pc, #852]	; 808cca0 <mbedtls_internal_aes_encrypt+0x38c>
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 808c94c:	9002      	str	r0, [sp, #8]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808c94e:	9801      	ldr	r0, [sp, #4]
 808c950:	461f      	mov	r7, r3
 808c952:	2800      	cmp	r0, #0
 808c954:	ea4f 6011 	mov.w	r0, r1, lsr #24
 808c958:	f103 0320 	add.w	r3, r3, #32
 808c95c:	f8df 8348 	ldr.w	r8, [pc, #840]	; 808cca8 <mbedtls_internal_aes_encrypt+0x394>
 808c960:	fa5f f98b 	uxtb.w	r9, fp
 808c964:	f8df c330 	ldr.w	ip, [pc, #816]	; 808cc98 <mbedtls_internal_aes_encrypt+0x384>
 808c968:	9003      	str	r0, [sp, #12]
 808c96a:	f340 80be 	ble.w	808caea <mbedtls_internal_aes_encrypt+0x1d6>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808c96e:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 808c972:	f85e 8029 	ldr.w	r8, [lr, r9, lsl #2]
 808c976:	48c9      	ldr	r0, [pc, #804]	; (808cc9c <mbedtls_internal_aes_encrypt+0x388>)
 808c978:	ea88 0807 	eor.w	r8, r8, r7
 808c97c:	f853 7c20 	ldr.w	r7, [r3, #-32]
 808c980:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 808c984:	ea88 0807 	eor.w	r8, r8, r7
 808c988:	f3c4 2707 	ubfx	r7, r4, #8, #8
 808c98c:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
 808c990:	ea88 0707 	eor.w	r7, r8, r7
 808c994:	f85a 802c 	ldr.w	r8, [sl, ip, lsl #2]
 808c998:	fa5f fc84 	uxtb.w	ip, r4
 808c99c:	ea87 0808 	eor.w	r8, r7, r8
 808c9a0:	ea4f 671b 	mov.w	r7, fp, lsr #24
 808c9a4:	f85e 902c 	ldr.w	r9, [lr, ip, lsl #2]
 808c9a8:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 808c9ac:	f3c5 2c07 	ubfx	ip, r5, #8, #8
 808c9b0:	ea89 0907 	eor.w	r9, r9, r7
 808c9b4:	f853 7c1c 	ldr.w	r7, [r3, #-28]
 808c9b8:	ea89 0707 	eor.w	r7, r9, r7
 808c9bc:	f850 902c 	ldr.w	r9, [r0, ip, lsl #2]
 808c9c0:	f3c1 4c07 	ubfx	ip, r1, #16, #8
 808c9c4:	ea87 0709 	eor.w	r7, r7, r9
 808c9c8:	f85a 902c 	ldr.w	r9, [sl, ip, lsl #2]
 808c9cc:	fa5f fc85 	uxtb.w	ip, r5
 808c9d0:	ea87 0909 	eor.w	r9, r7, r9
 808c9d4:	0e27      	lsrs	r7, r4, #24
 808c9d6:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 808c9da:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
 808c9de:	0e2d      	lsrs	r5, r5, #24
 808c9e0:	ea8c 0c07 	eor.w	ip, ip, r7
 808c9e4:	f853 7c18 	ldr.w	r7, [r3, #-24]
 808c9e8:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 808c9ec:	ea8c 0707 	eor.w	r7, ip, r7
 808c9f0:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 808c9f4:	f850 c02c 	ldr.w	ip, [r0, ip, lsl #2]
 808c9f8:	b2c9      	uxtb	r1, r1
 808c9fa:	ea87 070c 	eor.w	r7, r7, ip
 808c9fe:	f3cb 4c07 	ubfx	ip, fp, #16, #8
 808ca02:	f85a c02c 	ldr.w	ip, [sl, ip, lsl #2]
 808ca06:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 808ca0a:	ea87 070c 	eor.w	r7, r7, ip
 808ca0e:	ea81 0c05 	eor.w	ip, r1, r5
 808ca12:	f853 1c14 	ldr.w	r1, [r3, #-20]
 808ca16:	f3cb 2507 	ubfx	r5, fp, #8, #8
 808ca1a:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
 808ca1e:	f3c4 4407 	ubfx	r4, r4, #16, #8
 808ca22:	f85a 4024 	ldr.w	r4, [sl, r4, lsl #2]
 808ca26:	ea8c 0101 	eor.w	r1, ip, r1
 808ca2a:	4069      	eors	r1, r5
 808ca2c:	ea81 0c04 	eor.w	ip, r1, r4
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808ca30:	ea4f 611c 	mov.w	r1, ip, lsr #24
 808ca34:	fa5f f488 	uxtb.w	r4, r8
 808ca38:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 808ca3c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 808ca40:	b2fd      	uxtb	r5, r7
 808ca42:	4061      	eors	r1, r4
 808ca44:	f853 4c10 	ldr.w	r4, [r3, #-16]
 808ca48:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
 808ca4c:	404c      	eors	r4, r1
 808ca4e:	f3c9 2107 	ubfx	r1, r9, #8, #8
 808ca52:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 808ca56:	404c      	eors	r4, r1
 808ca58:	f3c7 4107 	ubfx	r1, r7, #16, #8
 808ca5c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 808ca60:	ea84 0b01 	eor.w	fp, r4, r1
 808ca64:	fa5f f489 	uxtb.w	r4, r9
 808ca68:	ea4f 6118 	mov.w	r1, r8, lsr #24
 808ca6c:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 808ca70:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 808ca74:	4061      	eors	r1, r4
 808ca76:	f853 4c0c 	ldr.w	r4, [r3, #-12]
 808ca7a:	404c      	eors	r4, r1
 808ca7c:	f3c7 2107 	ubfx	r1, r7, #8, #8
 808ca80:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 808ca84:	0e3f      	lsrs	r7, r7, #24
 808ca86:	404c      	eors	r4, r1
 808ca88:	f3cc 4107 	ubfx	r1, ip, #16, #8
 808ca8c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 808ca90:	404c      	eors	r4, r1
 808ca92:	ea4f 6119 	mov.w	r1, r9, lsr #24
 808ca96:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 808ca9a:	f3c9 4907 	ubfx	r9, r9, #16, #8
 808ca9e:	404d      	eors	r5, r1
 808caa0:	f853 1c08 	ldr.w	r1, [r3, #-8]
 808caa4:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 808caa8:	4069      	eors	r1, r5
 808caaa:	f3cc 2507 	ubfx	r5, ip, #8, #8
 808caae:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
 808cab2:	fa5f fc8c 	uxtb.w	ip, ip
 808cab6:	4069      	eors	r1, r5
 808cab8:	f3c8 4507 	ubfx	r5, r8, #16, #8
 808cabc:	f85a 5025 	ldr.w	r5, [sl, r5, lsl #2]
 808cac0:	f3c8 2807 	ubfx	r8, r8, #8, #8
 808cac4:	404d      	eors	r5, r1
 808cac6:	f85e 102c 	ldr.w	r1, [lr, ip, lsl #2]
 808caca:	404f      	eors	r7, r1
 808cacc:	f853 1c04 	ldr.w	r1, [r3, #-4]
 808cad0:	4079      	eors	r1, r7
 808cad2:	f850 7028 	ldr.w	r7, [r0, r8, lsl #2]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808cad6:	9801      	ldr	r0, [sp, #4]
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808cad8:	4079      	eors	r1, r7
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808cada:	3801      	subs	r0, #1
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808cadc:	f85a 7029 	ldr.w	r7, [sl, r9, lsl #2]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808cae0:	9001      	str	r0, [sp, #4]
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808cae2:	6818      	ldr	r0, [r3, #0]
 808cae4:	4079      	eors	r1, r7
 808cae6:	9002      	str	r0, [sp, #8]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808cae8:	e731      	b.n	808c94e <mbedtls_internal_aes_encrypt+0x3a>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808caea:	0e0b      	lsrs	r3, r1, #24
 808caec:	f858 0029 	ldr.w	r0, [r8, r9, lsl #2]
 808caf0:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 808caf4:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 808cc9c <mbedtls_internal_aes_encrypt+0x388>
 808caf8:	4043      	eors	r3, r0
 808cafa:	9802      	ldr	r0, [sp, #8]
 808cafc:	4e68      	ldr	r6, [pc, #416]	; (808cca0 <mbedtls_internal_aes_encrypt+0x38c>)
 808cafe:	ea83 0900 	eor.w	r9, r3, r0
 808cb02:	f3c4 2307 	ubfx	r3, r4, #8, #8
 808cb06:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 808cb0a:	b2e0      	uxtb	r0, r4
 808cb0c:	ea89 0903 	eor.w	r9, r9, r3
 808cb10:	f3c5 4307 	ubfx	r3, r5, #16, #8
 808cb14:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 808cb18:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 808cb1c:	ea89 0903 	eor.w	r9, r9, r3
 808cb20:	ea4f 631b 	mov.w	r3, fp, lsr #24
 808cb24:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 808cb28:	fa5f fa85 	uxtb.w	sl, r5
 808cb2c:	4058      	eors	r0, r3
 808cb2e:	687b      	ldr	r3, [r7, #4]
 808cb30:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 808cb34:	4043      	eors	r3, r0
 808cb36:	f3c5 2007 	ubfx	r0, r5, #8, #8
 808cb3a:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 808cb3e:	0e2d      	lsrs	r5, r5, #24
 808cb40:	4043      	eors	r3, r0
 808cb42:	f3c1 4007 	ubfx	r0, r1, #16, #8
 808cb46:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 808cb4a:	4043      	eors	r3, r0
 808cb4c:	0e20      	lsrs	r0, r4, #24
 808cb4e:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 808cb52:	f3c4 4407 	ubfx	r4, r4, #16, #8
 808cb56:	ea8a 0a00 	eor.w	sl, sl, r0
 808cb5a:	68b8      	ldr	r0, [r7, #8]
 808cb5c:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 808cb60:	ea8a 0000 	eor.w	r0, sl, r0
 808cb64:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 808cb68:	b2c9      	uxtb	r1, r1
 808cb6a:	f858 8021 	ldr.w	r8, [r8, r1, lsl #2]
 808cb6e:	f85c 1025 	ldr.w	r1, [ip, r5, lsl #2]
 808cb72:	f85e a02a 	ldr.w	sl, [lr, sl, lsl #2]
 808cb76:	ea88 0501 	eor.w	r5, r8, r1
 808cb7a:	68f9      	ldr	r1, [r7, #12]
 808cb7c:	ea80 000a 	eor.w	r0, r0, sl
 808cb80:	4069      	eors	r1, r5
 808cb82:	f3cb 2507 	ubfx	r5, fp, #8, #8
 808cb86:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
 808cb8a:	f3cb 4a07 	ubfx	sl, fp, #16, #8
 808cb8e:	4069      	eors	r1, r5
 808cb90:	4061      	eors	r1, r4

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 808cb92:	4c44      	ldr	r4, [pc, #272]	; (808cca4 <mbedtls_internal_aes_encrypt+0x390>)
 808cb94:	fa5f f589 	uxtb.w	r5, r9
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808cb98:	f814 e005 	ldrb.w	lr, [r4, r5]
 808cb9c:	693d      	ldr	r5, [r7, #16]
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808cb9e:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808cba2:	0e0e      	lsrs	r6, r1, #24
 808cba4:	ea8e 0505 	eor.w	r5, lr, r5
 808cba8:	f814 e006 	ldrb.w	lr, [r4, r6]

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 808cbac:	f3c3 2607 	ubfx	r6, r3, #8, #8
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808cbb0:	ea80 000a 	eor.w	r0, r0, sl

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808cbb4:	ea85 650e 	eor.w	r5, r5, lr, lsl #24
 808cbb8:	f814 e006 	ldrb.w	lr, [r4, r6]
    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 808cbbc:	f3c0 4607 	ubfx	r6, r0, #16, #8
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808cbc0:	ea85 250e 	eor.w	r5, r5, lr, lsl #8
 808cbc4:	f814 e006 	ldrb.w	lr, [r4, r6]
 808cbc8:	ea85 4e0e 	eor.w	lr, r5, lr, lsl #16

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 808cbcc:	b2dd      	uxtb	r5, r3
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808cbce:	5d66      	ldrb	r6, [r4, r5]
 808cbd0:	697d      	ldr	r5, [r7, #20]
 808cbd2:	4075      	eors	r5, r6
 808cbd4:	ea4f 6619 	mov.w	r6, r9, lsr #24
 808cbd8:	5da6      	ldrb	r6, [r4, r6]
 808cbda:	ea85 6506 	eor.w	r5, r5, r6, lsl #24
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 808cbde:	f3c0 2607 	ubfx	r6, r0, #8, #8
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808cbe2:	5da6      	ldrb	r6, [r4, r6]
 808cbe4:	ea85 2506 	eor.w	r5, r5, r6, lsl #8
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 808cbe8:	f3c1 4607 	ubfx	r6, r1, #16, #8
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808cbec:	5da6      	ldrb	r6, [r4, r6]
 808cbee:	ea85 4606 	eor.w	r6, r5, r6, lsl #16

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 808cbf2:	b2c5      	uxtb	r5, r0
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808cbf4:	f814 c005 	ldrb.w	ip, [r4, r5]
 808cbf8:	69bd      	ldr	r5, [r7, #24]

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808cbfa:	0e00      	lsrs	r0, r0, #24

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808cbfc:	ea8c 0505 	eor.w	r5, ip, r5
 808cc00:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 808cc04:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808cc08:	5c20      	ldrb	r0, [r4, r0]

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808cc0a:	ea85 650c 	eor.w	r5, r5, ip, lsl #24
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 808cc0e:	f3c1 2c07 	ubfx	ip, r1, #8, #8
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808cc12:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 808cc16:	b2c9      	uxtb	r1, r1

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808cc18:	ea85 250c 	eor.w	r5, r5, ip, lsl #8
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 808cc1c:	f3c9 4c07 	ubfx	ip, r9, #16, #8
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808cc20:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 808cc24:	f3c9 2907 	ubfx	r9, r9, #8, #8

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808cc28:	ea85 450c 	eor.w	r5, r5, ip, lsl #16

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808cc2c:	f814 c001 	ldrb.w	ip, [r4, r1]
 808cc30:	69f9      	ldr	r1, [r7, #28]
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 808cc32:	f3c3 4307 	ubfx	r3, r3, #16, #8
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808cc36:	ea8c 0101 	eor.w	r1, ip, r1
 808cc3a:	ea81 6100 	eor.w	r1, r1, r0, lsl #24
 808cc3e:	f814 0009 	ldrb.w	r0, [r4, r9]
 808cc42:	5ce3      	ldrb	r3, [r4, r3]
 808cc44:	ea81 2100 	eor.w	r1, r1, r0, lsl #8
 808cc48:	ea81 4303 	eor.w	r3, r1, r3, lsl #16

    PUT_UINT32_LE( X0, output,  0 );
 808cc4c:	ea4f 211e 	mov.w	r1, lr, lsr #8
 808cc50:	7051      	strb	r1, [r2, #1]
 808cc52:	ea4f 411e 	mov.w	r1, lr, lsr #16
 808cc56:	7091      	strb	r1, [r2, #2]
    PUT_UINT32_LE( X1, output,  4 );
 808cc58:	0a31      	lsrs	r1, r6, #8
 808cc5a:	7151      	strb	r1, [r2, #5]
 808cc5c:	0c31      	lsrs	r1, r6, #16
 808cc5e:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
 808cc60:	0a29      	lsrs	r1, r5, #8
 808cc62:	7251      	strb	r1, [r2, #9]
 808cc64:	0c29      	lsrs	r1, r5, #16
 808cc66:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
 808cc68:	0a19      	lsrs	r1, r3, #8
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 808cc6a:	f882 e000 	strb.w	lr, [r2]
    PUT_UINT32_LE( X1, output,  4 );
 808cc6e:	7116      	strb	r6, [r2, #4]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 808cc70:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    PUT_UINT32_LE( X1, output,  4 );
 808cc74:	0e36      	lsrs	r6, r6, #24
    PUT_UINT32_LE( X2, output,  8 );
 808cc76:	7215      	strb	r5, [r2, #8]
    PUT_UINT32_LE( X3, output, 12 );
 808cc78:	7313      	strb	r3, [r2, #12]
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
 808cc7a:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X3, output, 12 );
 808cc7c:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
 808cc7e:	2000      	movs	r0, #0
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
 808cc80:	0c19      	lsrs	r1, r3, #16
 808cc82:	0e1b      	lsrs	r3, r3, #24
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 808cc84:	f882 e003 	strb.w	lr, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
 808cc88:	71d6      	strb	r6, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
 808cc8a:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
 808cc8c:	7391      	strb	r1, [r2, #14]
 808cc8e:	73d3      	strb	r3, [r2, #15]

    return( 0 );
}
 808cc90:	b005      	add	sp, #20
 808cc92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808cc96:	bf00      	nop
 808cc98:	2000121c 	.word	0x2000121c
 808cc9c:	20000a1c 	.word	0x20000a1c
 808cca0:	20000e1c 	.word	0x20000e1c
 808cca4:	2000171c 	.word	0x2000171c
 808cca8:	2000061c 	.word	0x2000061c

0808ccac <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 808ccac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 808ccb0:	6843      	ldr	r3, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 808ccb2:	680d      	ldr	r5, [r1, #0]
 808ccb4:	681c      	ldr	r4, [r3, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808ccb6:	6800      	ldr	r0, [r0, #0]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 808ccb8:	ea85 0a04 	eor.w	sl, r5, r4
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 808ccbc:	684d      	ldr	r5, [r1, #4]
 808ccbe:	685c      	ldr	r4, [r3, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808ccc0:	1040      	asrs	r0, r0, #1
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 808ccc2:	ea85 0b04 	eor.w	fp, r5, r4
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 808ccc6:	688d      	ldr	r5, [r1, #8]
 808ccc8:	689c      	ldr	r4, [r3, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808ccca:	3801      	subs	r0, #1

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 808cccc:	406c      	eors	r4, r5
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 808ccce:	68cd      	ldr	r5, [r1, #12]
 808ccd0:	68d9      	ldr	r1, [r3, #12]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808ccd2:	9000      	str	r0, [sp, #0]
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 808ccd4:	f853 0f10 	ldr.w	r0, [r3, #16]!
 808ccd8:	4069      	eors	r1, r5
 808ccda:	f8df e364 	ldr.w	lr, [pc, #868]	; 808d040 <mbedtls_internal_aes_decrypt+0x394>
 808ccde:	4ed4      	ldr	r6, [pc, #848]	; (808d030 <mbedtls_internal_aes_decrypt+0x384>)

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808cce0:	4dd4      	ldr	r5, [pc, #848]	; (808d034 <mbedtls_internal_aes_decrypt+0x388>)
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 808cce2:	9001      	str	r0, [sp, #4]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808cce4:	9800      	ldr	r0, [sp, #0]
 808cce6:	461f      	mov	r7, r3
 808cce8:	2800      	cmp	r0, #0
 808ccea:	f103 0320 	add.w	r3, r3, #32
 808ccee:	f8df 8350 	ldr.w	r8, [pc, #848]	; 808d040 <mbedtls_internal_aes_decrypt+0x394>
 808ccf2:	fa5f f08a 	uxtb.w	r0, sl
 808ccf6:	f8df c338 	ldr.w	ip, [pc, #824]	; 808d030 <mbedtls_internal_aes_decrypt+0x384>
 808ccfa:	ea4f 691b 	mov.w	r9, fp, lsr #24
 808ccfe:	f340 80c1 	ble.w	808ce84 <mbedtls_internal_aes_decrypt+0x1d8>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808cd02:	f856 7029 	ldr.w	r7, [r6, r9, lsl #2]
 808cd06:	f85e 8020 	ldr.w	r8, [lr, r0, lsl #2]
 808cd0a:	48cb      	ldr	r0, [pc, #812]	; (808d038 <mbedtls_internal_aes_decrypt+0x38c>)
 808cd0c:	ea88 0807 	eor.w	r8, r8, r7
 808cd10:	f853 7c20 	ldr.w	r7, [r3, #-32]
 808cd14:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 808cd18:	ea88 0807 	eor.w	r8, r8, r7
 808cd1c:	f3c1 2707 	ubfx	r7, r1, #8, #8
 808cd20:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 808cd24:	ea88 0707 	eor.w	r7, r8, r7
 808cd28:	f850 802c 	ldr.w	r8, [r0, ip, lsl #2]
 808cd2c:	fa5f fc8b 	uxtb.w	ip, fp
 808cd30:	ea87 0808 	eor.w	r8, r7, r8
 808cd34:	0e27      	lsrs	r7, r4, #24
 808cd36:	f85e 902c 	ldr.w	r9, [lr, ip, lsl #2]
 808cd3a:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 808cd3e:	f3ca 2c07 	ubfx	ip, sl, #8, #8
 808cd42:	ea89 0907 	eor.w	r9, r9, r7
 808cd46:	f853 7c1c 	ldr.w	r7, [r3, #-28]
 808cd4a:	ea89 0707 	eor.w	r7, r9, r7
 808cd4e:	f855 902c 	ldr.w	r9, [r5, ip, lsl #2]
 808cd52:	f3c1 4c07 	ubfx	ip, r1, #16, #8
 808cd56:	ea87 0709 	eor.w	r7, r7, r9
 808cd5a:	f850 902c 	ldr.w	r9, [r0, ip, lsl #2]
 808cd5e:	fa5f fc84 	uxtb.w	ip, r4
 808cd62:	ea87 0909 	eor.w	r9, r7, r9
 808cd66:	0e0f      	lsrs	r7, r1, #24
 808cd68:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 808cd6c:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
 808cd70:	b2c9      	uxtb	r1, r1
 808cd72:	ea8c 0c07 	eor.w	ip, ip, r7
 808cd76:	f853 7c18 	ldr.w	r7, [r3, #-24]
 808cd7a:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 808cd7e:	ea8c 0707 	eor.w	r7, ip, r7
 808cd82:	f3cb 2c07 	ubfx	ip, fp, #8, #8
 808cd86:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 808cd8a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 808cd8e:	ea87 070c 	eor.w	r7, r7, ip
 808cd92:	f3ca 4c07 	ubfx	ip, sl, #16, #8
 808cd96:	f850 c02c 	ldr.w	ip, [r0, ip, lsl #2]
 808cd9a:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 808cd9e:	ea87 070c 	eor.w	r7, r7, ip
 808cda2:	f856 c02a 	ldr.w	ip, [r6, sl, lsl #2]
 808cda6:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 808cdaa:	ea81 0c0c 	eor.w	ip, r1, ip
 808cdae:	f853 1c14 	ldr.w	r1, [r3, #-20]
 808cdb2:	ea8c 0101 	eor.w	r1, ip, r1
 808cdb6:	4061      	eors	r1, r4
 808cdb8:	f3cb 4407 	ubfx	r4, fp, #16, #8
 808cdbc:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 808cdc0:	ea81 0c04 	eor.w	ip, r1, r4
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808cdc4:	fa5f f488 	uxtb.w	r4, r8
 808cdc8:	ea4f 6119 	mov.w	r1, r9, lsr #24
 808cdcc:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 808cdd0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 808cdd4:	4061      	eors	r1, r4
 808cdd6:	f853 4c10 	ldr.w	r4, [r3, #-16]
 808cdda:	404c      	eors	r4, r1
 808cddc:	f3cc 2107 	ubfx	r1, ip, #8, #8
 808cde0:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 808cde4:	404c      	eors	r4, r1
 808cde6:	f3c7 4107 	ubfx	r1, r7, #16, #8
 808cdea:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 808cdee:	ea84 0a01 	eor.w	sl, r4, r1
 808cdf2:	fa5f f489 	uxtb.w	r4, r9
 808cdf6:	0e39      	lsrs	r1, r7, #24
 808cdf8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 808cdfc:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 808ce00:	404c      	eors	r4, r1
 808ce02:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 808ce06:	4061      	eors	r1, r4
 808ce08:	f3c8 2407 	ubfx	r4, r8, #8, #8
 808ce0c:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 808ce10:	4061      	eors	r1, r4
 808ce12:	f3cc 4407 	ubfx	r4, ip, #16, #8
 808ce16:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 808ce1a:	ea81 0b04 	eor.w	fp, r1, r4
 808ce1e:	b2fc      	uxtb	r4, r7
 808ce20:	ea4f 611c 	mov.w	r1, ip, lsr #24
 808ce24:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 808ce28:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 808ce2c:	fa5f fc8c 	uxtb.w	ip, ip
 808ce30:	404c      	eors	r4, r1
 808ce32:	f853 1c08 	ldr.w	r1, [r3, #-8]
 808ce36:	f3c7 2707 	ubfx	r7, r7, #8, #8
 808ce3a:	4061      	eors	r1, r4
 808ce3c:	f3c9 2407 	ubfx	r4, r9, #8, #8
 808ce40:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 808ce44:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 808ce48:	4061      	eors	r1, r4
 808ce4a:	f3c8 4407 	ubfx	r4, r8, #16, #8
 808ce4e:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 808ce52:	ea4f 6818 	mov.w	r8, r8, lsr #24
 808ce56:	404c      	eors	r4, r1
 808ce58:	f85e 102c 	ldr.w	r1, [lr, ip, lsl #2]
 808ce5c:	f856 c028 	ldr.w	ip, [r6, r8, lsl #2]
 808ce60:	f3c9 4907 	ubfx	r9, r9, #16, #8
 808ce64:	ea81 0c0c 	eor.w	ip, r1, ip
 808ce68:	f853 1c04 	ldr.w	r1, [r3, #-4]
 808ce6c:	ea8c 0101 	eor.w	r1, ip, r1
 808ce70:	4079      	eors	r1, r7
 808ce72:	f850 7029 	ldr.w	r7, [r0, r9, lsl #2]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808ce76:	9800      	ldr	r0, [sp, #0]
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808ce78:	4079      	eors	r1, r7
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808ce7a:	3801      	subs	r0, #1
 808ce7c:	9000      	str	r0, [sp, #0]
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 808ce7e:	6818      	ldr	r0, [r3, #0]
 808ce80:	9001      	str	r0, [sp, #4]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 808ce82:	e72f      	b.n	808cce4 <mbedtls_internal_aes_decrypt+0x38>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808ce84:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 808ce88:	f85c 3029 	ldr.w	r3, [ip, r9, lsl #2]
 808ce8c:	4e69      	ldr	r6, [pc, #420]	; (808d034 <mbedtls_internal_aes_decrypt+0x388>)
 808ce8e:	4043      	eors	r3, r0
 808ce90:	9801      	ldr	r0, [sp, #4]
 808ce92:	4d69      	ldr	r5, [pc, #420]	; (808d038 <mbedtls_internal_aes_decrypt+0x38c>)
 808ce94:	ea83 0900 	eor.w	r9, r3, r0
 808ce98:	f3c1 2307 	ubfx	r3, r1, #8, #8
 808ce9c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 808cea0:	fa5f f08b 	uxtb.w	r0, fp
 808cea4:	ea89 0903 	eor.w	r9, r9, r3
 808cea8:	f3c4 4307 	ubfx	r3, r4, #16, #8
 808ceac:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 808ceb0:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 808ceb4:	ea89 0903 	eor.w	r9, r9, r3
 808ceb8:	0e23      	lsrs	r3, r4, #24
 808ceba:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 808cebe:	fa5f fe84 	uxtb.w	lr, r4
 808cec2:	4058      	eors	r0, r3
 808cec4:	687b      	ldr	r3, [r7, #4]
 808cec6:	f858 e02e 	ldr.w	lr, [r8, lr, lsl #2]
 808ceca:	4043      	eors	r3, r0
 808cecc:	f3ca 2007 	ubfx	r0, sl, #8, #8
 808ced0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 808ced4:	f3c4 2407 	ubfx	r4, r4, #8, #8
 808ced8:	4043      	eors	r3, r0
 808ceda:	f3c1 4007 	ubfx	r0, r1, #16, #8
 808cede:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 808cee2:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 808cee6:	4043      	eors	r3, r0
 808cee8:	0e08      	lsrs	r0, r1, #24
 808ceea:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 808ceee:	b2c9      	uxtb	r1, r1
 808cef0:	ea8e 0e00 	eor.w	lr, lr, r0
 808cef4:	68b8      	ldr	r0, [r7, #8]
 808cef6:	f858 8021 	ldr.w	r8, [r8, r1, lsl #2]
 808cefa:	ea8e 0000 	eor.w	r0, lr, r0
 808cefe:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 808cf02:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808cf06:	0e1e      	lsrs	r6, r3, #24
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808cf08:	ea80 000e 	eor.w	r0, r0, lr
 808cf0c:	f3ca 4e07 	ubfx	lr, sl, #16, #8
 808cf10:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 808cf14:	ea80 000e 	eor.w	r0, r0, lr
 808cf18:	ea4f 6e1a 	mov.w	lr, sl, lsr #24
 808cf1c:	f85c 102e 	ldr.w	r1, [ip, lr, lsl #2]
 808cf20:	ea88 0e01 	eor.w	lr, r8, r1
 808cf24:	68f9      	ldr	r1, [r7, #12]
 808cf26:	ea8e 0101 	eor.w	r1, lr, r1
 808cf2a:	4061      	eors	r1, r4
 808cf2c:	f3cb 4407 	ubfx	r4, fp, #16, #8
 808cf30:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 808cf34:	fa5f f589 	uxtb.w	r5, r9
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 808cf38:	4061      	eors	r1, r4

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 808cf3a:	4c40      	ldr	r4, [pc, #256]	; (808d03c <mbedtls_internal_aes_decrypt+0x390>)
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808cf3c:	f814 e005 	ldrb.w	lr, [r4, r5]
 808cf40:	693d      	ldr	r5, [r7, #16]
 808cf42:	ea8e 0505 	eor.w	r5, lr, r5
 808cf46:	f814 e006 	ldrb.w	lr, [r4, r6]

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 808cf4a:	f3c1 2607 	ubfx	r6, r1, #8, #8
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808cf4e:	ea85 650e 	eor.w	r5, r5, lr, lsl #24
 808cf52:	f814 e006 	ldrb.w	lr, [r4, r6]
    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 808cf56:	f3c0 4607 	ubfx	r6, r0, #16, #8
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 808cf5a:	ea85 250e 	eor.w	r5, r5, lr, lsl #8
 808cf5e:	f814 e006 	ldrb.w	lr, [r4, r6]
 808cf62:	ea85 4e0e 	eor.w	lr, r5, lr, lsl #16

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 808cf66:	b2dd      	uxtb	r5, r3
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808cf68:	5d66      	ldrb	r6, [r4, r5]
 808cf6a:	697d      	ldr	r5, [r7, #20]
 808cf6c:	4075      	eors	r5, r6
 808cf6e:	0e06      	lsrs	r6, r0, #24
 808cf70:	5da6      	ldrb	r6, [r4, r6]
 808cf72:	ea85 6506 	eor.w	r5, r5, r6, lsl #24
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 808cf76:	f3c9 2607 	ubfx	r6, r9, #8, #8
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808cf7a:	5da6      	ldrb	r6, [r4, r6]
 808cf7c:	ea85 2506 	eor.w	r5, r5, r6, lsl #8
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 808cf80:	f3c1 4607 	ubfx	r6, r1, #16, #8
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 808cf84:	5da6      	ldrb	r6, [r4, r6]
 808cf86:	ea85 4606 	eor.w	r6, r5, r6, lsl #16

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 808cf8a:	b2c5      	uxtb	r5, r0
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808cf8c:	f814 c005 	ldrb.w	ip, [r4, r5]
 808cf90:	69bd      	ldr	r5, [r7, #24]

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 808cf92:	f3c0 2007 	ubfx	r0, r0, #8, #8

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808cf96:	ea8c 0505 	eor.w	r5, ip, r5
 808cf9a:	ea4f 6c11 	mov.w	ip, r1, lsr #24
 808cf9e:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 808cfa2:	b2c9      	uxtb	r1, r1

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808cfa4:	ea85 650c 	eor.w	r5, r5, ip, lsl #24
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 808cfa8:	f3c3 2c07 	ubfx	ip, r3, #8, #8
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808cfac:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808cfb0:	5c20      	ldrb	r0, [r4, r0]

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808cfb2:	ea85 250c 	eor.w	r5, r5, ip, lsl #8
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 808cfb6:	f3c9 4c07 	ubfx	ip, r9, #16, #8
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808cfba:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808cfbe:	ea4f 6919 	mov.w	r9, r9, lsr #24

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 808cfc2:	ea85 450c 	eor.w	r5, r5, ip, lsl #16

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808cfc6:	f814 c001 	ldrb.w	ip, [r4, r1]
 808cfca:	69f9      	ldr	r1, [r7, #28]
 808cfcc:	f814 7009 	ldrb.w	r7, [r4, r9]
 808cfd0:	ea8c 0101 	eor.w	r1, ip, r1
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 808cfd4:	f3c3 4307 	ubfx	r3, r3, #16, #8
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 808cfd8:	5ce3      	ldrb	r3, [r4, r3]
 808cfda:	ea81 6107 	eor.w	r1, r1, r7, lsl #24
 808cfde:	ea81 2100 	eor.w	r1, r1, r0, lsl #8
 808cfe2:	ea81 4303 	eor.w	r3, r1, r3, lsl #16

    PUT_UINT32_LE( X0, output,  0 );
 808cfe6:	ea4f 211e 	mov.w	r1, lr, lsr #8
 808cfea:	7051      	strb	r1, [r2, #1]
 808cfec:	ea4f 411e 	mov.w	r1, lr, lsr #16
 808cff0:	7091      	strb	r1, [r2, #2]
    PUT_UINT32_LE( X1, output,  4 );
 808cff2:	0a31      	lsrs	r1, r6, #8
 808cff4:	7151      	strb	r1, [r2, #5]
 808cff6:	0c31      	lsrs	r1, r6, #16
 808cff8:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
 808cffa:	0a29      	lsrs	r1, r5, #8
 808cffc:	7251      	strb	r1, [r2, #9]
 808cffe:	0c29      	lsrs	r1, r5, #16
 808d000:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
 808d002:	0a19      	lsrs	r1, r3, #8
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 808d004:	f882 e000 	strb.w	lr, [r2]
    PUT_UINT32_LE( X1, output,  4 );
 808d008:	7116      	strb	r6, [r2, #4]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 808d00a:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    PUT_UINT32_LE( X1, output,  4 );
 808d00e:	0e36      	lsrs	r6, r6, #24
    PUT_UINT32_LE( X2, output,  8 );
 808d010:	7215      	strb	r5, [r2, #8]
    PUT_UINT32_LE( X3, output, 12 );
 808d012:	7313      	strb	r3, [r2, #12]
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
 808d014:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X3, output, 12 );
 808d016:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
 808d018:	2000      	movs	r0, #0
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
 808d01a:	0c19      	lsrs	r1, r3, #16
 808d01c:	0e1b      	lsrs	r3, r3, #24
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 808d01e:	f882 e003 	strb.w	lr, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
 808d022:	71d6      	strb	r6, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
 808d024:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
 808d026:	7391      	strb	r1, [r2, #14]
 808d028:	73d3      	strb	r3, [r2, #15]

    return( 0 );
}
 808d02a:	b003      	add	sp, #12
 808d02c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d030:	2000181c 	.word	0x2000181c
 808d034:	2000201c 	.word	0x2000201c
 808d038:	2000241c 	.word	0x2000241c
 808d03c:	2000161c 	.word	0x2000161c
 808d040:	20001c1c 	.word	0x20001c1c

0808d044 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
 808d044:	b410      	push	{r4}
 808d046:	4614      	mov	r4, r2
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 808d048:	2901      	cmp	r1, #1
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
 808d04a:	461a      	mov	r2, r3
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 808d04c:	4621      	mov	r1, r4
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 808d04e:	d102      	bne.n	808d056 <mbedtls_aes_crypt_ecb+0x12>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
}
 808d050:	bc10      	pop	{r4}
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 808d052:	f7ff bc5f 	b.w	808c914 <mbedtls_internal_aes_encrypt>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
}
 808d056:	bc10      	pop	{r4}
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 808d058:	f7ff be28 	b.w	808ccac <mbedtls_internal_aes_decrypt>

0808d05c <mbedtls_aes_crypt_cbc>:
                    int mode,
                    size_t length,
                    unsigned char iv[16],
                    const unsigned char *input,
                    unsigned char *output )
{
 808d05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808d060:	4698      	mov	r8, r3
 808d062:	b085      	sub	sp, #20
    int i;
    unsigned char temp[16];

    if( length % 16 )
 808d064:	0713      	lsls	r3, r2, #28
                    int mode,
                    size_t length,
                    unsigned char iv[16],
                    const unsigned char *input,
                    unsigned char *output )
{
 808d066:	4681      	mov	r9, r0
 808d068:	460f      	mov	r7, r1
 808d06a:	4616      	mov	r6, r2
 808d06c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 808d06e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    int i;
    unsigned char temp[16];

    if( length % 16 )
 808d070:	d15a      	bne.n	808d128 <mbedtls_aes_crypt_cbc+0xcc>
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
 808d072:	bba9      	cbnz	r1, 808d0e0 <mbedtls_aes_crypt_cbc+0x84>
 808d074:	462a      	mov	r2, r5
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );

            for( i = 0; i < 16; i++ )
                output[i] = (unsigned char)( output[i] ^ iv[i] );

            memcpy( iv, temp, 16 );
 808d076:	f10d 0b10 	add.w	fp, sp, #16
 808d07a:	1ab3      	subs	r3, r6, r2
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
    {
        while( length > 0 )
 808d07c:	42dd      	cmn	r5, r3
 808d07e:	d101      	bne.n	808d084 <mbedtls_aes_crypt_cbc+0x28>
            output += 16;
            length -= 16;
        }
    }

    return( 0 );
 808d080:	2000      	movs	r0, #0
 808d082:	e053      	b.n	808d12c <mbedtls_aes_crypt_cbc+0xd0>

    if( mode == MBEDTLS_AES_DECRYPT )
    {
        while( length > 0 )
        {
            memcpy( temp, input, 16 );
 808d084:	4613      	mov	r3, r2
 808d086:	46ee      	mov	lr, sp
 808d088:	466f      	mov	r7, sp
 808d08a:	f102 0a10 	add.w	sl, r2, #16
 808d08e:	46f4      	mov	ip, lr
 808d090:	6818      	ldr	r0, [r3, #0]
 808d092:	6859      	ldr	r1, [r3, #4]
 808d094:	3308      	adds	r3, #8
 808d096:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 808d09a:	4553      	cmp	r3, sl
 808d09c:	46e6      	mov	lr, ip
 808d09e:	d1f6      	bne.n	808d08e <mbedtls_aes_crypt_cbc+0x32>
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );
 808d0a0:	4623      	mov	r3, r4
 808d0a2:	2100      	movs	r1, #0
 808d0a4:	4648      	mov	r0, r9
 808d0a6:	f7ff ffcd 	bl	808d044 <mbedtls_aes_crypt_ecb>
 808d0aa:	1e63      	subs	r3, r4, #1
 808d0ac:	f108 31ff 	add.w	r1, r8, #4294967295
 808d0b0:	f104 000f 	add.w	r0, r4, #15

            for( i = 0; i < 16; i++ )
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 808d0b4:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 808d0b8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
        while( length > 0 )
        {
            memcpy( temp, input, 16 );
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );

            for( i = 0; i < 16; i++ )
 808d0bc:	4283      	cmp	r3, r0
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 808d0be:	ea8e 0202 	eor.w	r2, lr, r2
 808d0c2:	701a      	strb	r2, [r3, #0]
        while( length > 0 )
        {
            memcpy( temp, input, 16 );
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );

            for( i = 0; i < 16; i++ )
 808d0c4:	d1f6      	bne.n	808d0b4 <mbedtls_aes_crypt_cbc+0x58>
                output[i] = (unsigned char)( output[i] ^ iv[i] );

            memcpy( iv, temp, 16 );
 808d0c6:	4642      	mov	r2, r8
 808d0c8:	463b      	mov	r3, r7
 808d0ca:	cb03      	ldmia	r3!, {r0, r1}
 808d0cc:	455b      	cmp	r3, fp
 808d0ce:	6010      	str	r0, [r2, #0]
 808d0d0:	6051      	str	r1, [r2, #4]
 808d0d2:	461f      	mov	r7, r3
 808d0d4:	f102 0208 	add.w	r2, r2, #8
 808d0d8:	d1f6      	bne.n	808d0c8 <mbedtls_aes_crypt_cbc+0x6c>

            input  += 16;
 808d0da:	4652      	mov	r2, sl
            output += 16;
 808d0dc:	3410      	adds	r4, #16
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
    {
        while( length > 0 )
 808d0de:	e7cc      	b.n	808d07a <mbedtls_aes_crypt_cbc+0x1e>
 808d0e0:	1e6b      	subs	r3, r5, #1
            length -= 16;
        }
    }
    else
    {
        while( length > 0 )
 808d0e2:	2e00      	cmp	r6, #0
 808d0e4:	d0cc      	beq.n	808d080 <mbedtls_aes_crypt_cbc+0x24>
 808d0e6:	f108 30ff 	add.w	r0, r8, #4294967295
 808d0ea:	1e61      	subs	r1, r4, #1
 808d0ec:	f103 0510 	add.w	r5, r3, #16
        {
            for( i = 0; i < 16; i++ )
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 808d0f0:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 808d0f4:	f810 2f01 	ldrb.w	r2, [r0, #1]!
    }
    else
    {
        while( length > 0 )
        {
            for( i = 0; i < 16; i++ )
 808d0f8:	42ab      	cmp	r3, r5
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 808d0fa:	ea8e 0202 	eor.w	r2, lr, r2
 808d0fe:	f801 2f01 	strb.w	r2, [r1, #1]!
    }
    else
    {
        while( length > 0 )
        {
            for( i = 0; i < 16; i++ )
 808d102:	d1f5      	bne.n	808d0f0 <mbedtls_aes_crypt_cbc+0x94>
                output[i] = (unsigned char)( input[i] ^ iv[i] );

            mbedtls_aes_crypt_ecb( ctx, mode, output, output );
 808d104:	4623      	mov	r3, r4
 808d106:	4622      	mov	r2, r4
 808d108:	4639      	mov	r1, r7
 808d10a:	4648      	mov	r0, r9
 808d10c:	f7ff ff9a 	bl	808d044 <mbedtls_aes_crypt_ecb>
            memcpy( iv, output, 16 );
 808d110:	4643      	mov	r3, r8
 808d112:	f104 0210 	add.w	r2, r4, #16
 808d116:	f854 1b04 	ldr.w	r1, [r4], #4
 808d11a:	4294      	cmp	r4, r2
 808d11c:	f843 1b04 	str.w	r1, [r3], #4
 808d120:	d1f9      	bne.n	808d116 <mbedtls_aes_crypt_cbc+0xba>

            input  += 16;
            output += 16;
            length -= 16;
 808d122:	3e10      	subs	r6, #16
            length -= 16;
        }
    }
    else
    {
        while( length > 0 )
 808d124:	462b      	mov	r3, r5
 808d126:	e7dc      	b.n	808d0e2 <mbedtls_aes_crypt_cbc+0x86>
{
    int i;
    unsigned char temp[16];

    if( length % 16 )
        return( MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH );
 808d128:	f06f 0021 	mvn.w	r0, #33	; 0x21
            length -= 16;
        }
    }

    return( 0 );
}
 808d12c:	b005      	add	sp, #20
 808d12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808d132 <_ZL15mbedtls_zeroizePvj>:
#if defined(MBEDTLS_DES_C)
#include "mbedtls/des.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 808d132:	4401      	add	r1, r0
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808d134:	2300      	movs	r3, #0
 808d136:	4288      	cmp	r0, r1
 808d138:	d002      	beq.n	808d140 <_ZL15mbedtls_zeroizePvj+0xe>
 808d13a:	7003      	strb	r3, [r0, #0]
 808d13c:	3001      	adds	r0, #1
 808d13e:	e7fa      	b.n	808d136 <_ZL15mbedtls_zeroizePvj+0x4>
 808d140:	4770      	bx	lr

0808d142 <_ZL18pkcs12_fill_bufferPhjPKhj>:
    return( ret );
}

static void pkcs12_fill_buffer( unsigned char *data, size_t data_len,
                                const unsigned char *filler, size_t fill_len )
{
 808d142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808d146:	4606      	mov	r6, r0
 808d148:	460c      	mov	r4, r1
 808d14a:	4617      	mov	r7, r2
 808d14c:	4698      	mov	r8, r3
    unsigned char *p = data;
    size_t use_len;

    while( data_len > 0 )
 808d14e:	b15c      	cbz	r4, 808d168 <_ZL18pkcs12_fill_bufferPhjPKhj+0x26>
 808d150:	4544      	cmp	r4, r8
 808d152:	4625      	mov	r5, r4
 808d154:	bf28      	it	cs
 808d156:	4645      	movcs	r5, r8
    {
        use_len = ( data_len > fill_len ) ? fill_len : data_len;
        memcpy( p, filler, use_len );
 808d158:	4630      	mov	r0, r6
 808d15a:	462a      	mov	r2, r5
 808d15c:	4639      	mov	r1, r7
 808d15e:	f006 ff00 	bl	8093f62 <memcpy>
        p += use_len;
 808d162:	442e      	add	r6, r5
        data_len -= use_len;
 808d164:	1b64      	subs	r4, r4, r5
                                const unsigned char *filler, size_t fill_len )
{
    unsigned char *p = data;
    size_t use_len;

    while( data_len > 0 )
 808d166:	e7f2      	b.n	808d14e <_ZL18pkcs12_fill_bufferPhjPKhj+0xc>
 808d168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808d16c <mbedtls_pkcs12_pbe_sha1_rc4_128>:
    mbedtls_zeroize( key, sizeof( key ) );
    mbedtls_arc4_free( &ctx );

    return( ret );
#endif /* MBEDTLS_ARC4_C */
}
 808d16c:	4800      	ldr	r0, [pc, #0]	; (808d170 <mbedtls_pkcs12_pbe_sha1_rc4_128+0x4>)
 808d16e:	4770      	bx	lr
 808d170:	ffffe100 	.word	0xffffe100

0808d174 <mbedtls_pkcs12_derivation>:

int mbedtls_pkcs12_derivation( unsigned char *data, size_t datalen,
                       const unsigned char *pwd, size_t pwdlen,
                       const unsigned char *salt, size_t saltlen,
                       mbedtls_md_type_t md_type, int id, int iterations )
{
 808d174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
 808d178:	2980      	cmp	r1, #128	; 0x80

int mbedtls_pkcs12_derivation( unsigned char *data, size_t datalen,
                       const unsigned char *pwd, size_t pwdlen,
                       const unsigned char *salt, size_t saltlen,
                       mbedtls_md_type_t md_type, int id, int iterations )
{
 808d17a:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 808d17e:	9001      	str	r0, [sp, #4]
 808d180:	460f      	mov	r7, r1
 808d182:	4693      	mov	fp, r2
 808d184:	4699      	mov	r9, r3
 808d186:	9da1      	ldr	r5, [sp, #644]	; 0x284

    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
 808d188:	f200 80c3 	bhi.w	808d312 <mbedtls_pkcs12_derivation+0x19e>
 808d18c:	2b40      	cmp	r3, #64	; 0x40
 808d18e:	f200 80c0 	bhi.w	808d312 <mbedtls_pkcs12_derivation+0x19e>
 808d192:	2d40      	cmp	r5, #64	; 0x40
 808d194:	f200 80bd 	bhi.w	808d312 <mbedtls_pkcs12_derivation+0x19e>
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( md_type );
 808d198:	f89d 0288 	ldrb.w	r0, [sp, #648]	; 0x288
 808d19c:	f7fa fa1c 	bl	80875d8 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 808d1a0:	9000      	str	r0, [sp, #0]
 808d1a2:	2800      	cmp	r0, #0
 808d1a4:	f000 80b7 	beq.w	808d316 <mbedtls_pkcs12_derivation+0x1a2>
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    mbedtls_md_init( &md_ctx );
 808d1a8:	a803      	add	r0, sp, #12
 808d1aa:	f7fa fa21 	bl	80875f0 <mbedtls_md_init>

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 808d1ae:	2200      	movs	r2, #0
 808d1b0:	9900      	ldr	r1, [sp, #0]
 808d1b2:	a803      	add	r0, sp, #12
 808d1b4:	f7fa fa42 	bl	808763c <mbedtls_md_setup>
 808d1b8:	2800      	cmp	r0, #0
 808d1ba:	f040 80ad 	bne.w	808d318 <mbedtls_pkcs12_derivation+0x1a4>
        return( ret );
    hlen = mbedtls_md_get_size( md_info );
 808d1be:	9800      	ldr	r0, [sp, #0]
 808d1c0:	f7fa fb4e 	bl	8087860 <mbedtls_md_get_size>

    if( hlen <= 32 )
        v = 64;
 808d1c4:	2820      	cmp	r0, #32
 808d1c6:	bf8c      	ite	hi
 808d1c8:	2480      	movhi	r4, #128	; 0x80
 808d1ca:	2440      	movls	r4, #64	; 0x40
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );
 808d1cc:	4622      	mov	r2, r4
 808d1ce:	f89d 128c 	ldrb.w	r1, [sp, #652]	; 0x28c

    mbedtls_md_init( &md_ctx );

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
        return( ret );
    hlen = mbedtls_md_get_size( md_info );
 808d1d2:	4682      	mov	sl, r0
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
 808d1d4:	f10d 08d8 	add.w	r8, sp, #216	; 0xd8
    if( hlen <= 32 )
        v = 64;
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );
 808d1d8:	a816      	add	r0, sp, #88	; 0x58
 808d1da:	f006 fee8 	bl	8093fae <memset>

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
 808d1de:	462b      	mov	r3, r5
 808d1e0:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 808d1e2:	4621      	mov	r1, r4
 808d1e4:	4640      	mov	r0, r8
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );
 808d1e6:	ad56      	add	r5, sp, #344	; 0x158
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
 808d1e8:	f7ff ffab 	bl	808d142 <_ZL18pkcs12_fill_bufferPhjPKhj>
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );
 808d1ec:	464b      	mov	r3, r9
 808d1ee:	465a      	mov	r2, fp
 808d1f0:	4621      	mov	r1, r4
 808d1f2:	4628      	mov	r0, r5
 808d1f4:	f7ff ffa5 	bl	808d142 <_ZL18pkcs12_fill_bufferPhjPKhj>

        if( datalen == 0 )
            break;

        // Concatenating copies of hash_output into hash_block (B)
        pkcs12_fill_buffer( hash_block, v, hash_output, hlen );
 808d1f8:	f50d 79ec 	add.w	r9, sp, #472	; 0x1d8

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );

    p = data;
    while( datalen > 0 )
 808d1fc:	2f00      	cmp	r7, #0
 808d1fe:	d072      	beq.n	808d2e6 <mbedtls_pkcs12_derivation+0x172>
    {
        // Calculate hash( diversifier || salt_block || pwd_block )
        if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
 808d200:	a803      	add	r0, sp, #12
 808d202:	f7fa fa3d 	bl	8087680 <mbedtls_md_starts>
 808d206:	4606      	mov	r6, r0
 808d208:	2800      	cmp	r0, #0
 808d20a:	d16d      	bne.n	808d2e8 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, diversifier, v ) ) != 0 )
 808d20c:	4622      	mov	r2, r4
 808d20e:	a916      	add	r1, sp, #88	; 0x58
 808d210:	a803      	add	r0, sp, #12
 808d212:	f7fa fa3f 	bl	8087694 <mbedtls_md_update>
 808d216:	4606      	mov	r6, r0
 808d218:	2800      	cmp	r0, #0
 808d21a:	d165      	bne.n	808d2e8 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, salt_block, v ) ) != 0 )
 808d21c:	4622      	mov	r2, r4
 808d21e:	4641      	mov	r1, r8
 808d220:	a803      	add	r0, sp, #12
 808d222:	f7fa fa37 	bl	8087694 <mbedtls_md_update>
 808d226:	4606      	mov	r6, r0
 808d228:	2800      	cmp	r0, #0
 808d22a:	d15d      	bne.n	808d2e8 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, pwd_block, v ) ) != 0 )
 808d22c:	4622      	mov	r2, r4
 808d22e:	4629      	mov	r1, r5
 808d230:	a803      	add	r0, sp, #12
 808d232:	f7fa fa2f 	bl	8087694 <mbedtls_md_update>
 808d236:	4606      	mov	r6, r0
 808d238:	2800      	cmp	r0, #0
 808d23a:	d155      	bne.n	808d2e8 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_finish( &md_ctx, hash_output ) ) != 0 )
 808d23c:	a906      	add	r1, sp, #24
 808d23e:	a803      	add	r0, sp, #12
 808d240:	f7fa fa32 	bl	80876a8 <mbedtls_md_finish>
 808d244:	4606      	mov	r6, r0
 808d246:	2800      	cmp	r0, #0
 808d248:	d14e      	bne.n	808d2e8 <mbedtls_pkcs12_derivation+0x174>
 808d24a:	f04f 0b01 	mov.w	fp, #1
            goto exit;

        // Perform remaining ( iterations - 1 ) recursive hash calculations
        for( i = 1; i < (size_t) iterations; i++ )
 808d24e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 808d250:	459b      	cmp	fp, r3
 808d252:	d20b      	bcs.n	808d26c <mbedtls_pkcs12_derivation+0xf8>
        {
            if( ( ret = mbedtls_md( md_info, hash_output, hlen, hash_output ) ) != 0 )
 808d254:	ab06      	add	r3, sp, #24
 808d256:	4652      	mov	r2, sl
 808d258:	4619      	mov	r1, r3
 808d25a:	9800      	ldr	r0, [sp, #0]
 808d25c:	f7fa fa2e 	bl	80876bc <mbedtls_md>
 808d260:	4606      	mov	r6, r0
 808d262:	2800      	cmp	r0, #0
 808d264:	d140      	bne.n	808d2e8 <mbedtls_pkcs12_derivation+0x174>

        if( ( ret = mbedtls_md_finish( &md_ctx, hash_output ) ) != 0 )
            goto exit;

        // Perform remaining ( iterations - 1 ) recursive hash calculations
        for( i = 1; i < (size_t) iterations; i++ )
 808d266:	f10b 0b01 	add.w	fp, fp, #1
 808d26a:	e7f0      	b.n	808d24e <mbedtls_pkcs12_derivation+0xda>
 808d26c:	4557      	cmp	r7, sl
 808d26e:	46bb      	mov	fp, r7
 808d270:	bf28      	it	cs
 808d272:	46d3      	movcs	fp, sl
            if( ( ret = mbedtls_md( md_info, hash_output, hlen, hash_output ) ) != 0 )
                goto exit;
        }

        use_len = ( datalen > hlen ) ? hlen : datalen;
        memcpy( p, hash_output, use_len );
 808d274:	a906      	add	r1, sp, #24
 808d276:	465a      	mov	r2, fp
 808d278:	9801      	ldr	r0, [sp, #4]
 808d27a:	f006 fe72 	bl	8093f62 <memcpy>
        datalen -= use_len;
        p += use_len;
 808d27e:	9b01      	ldr	r3, [sp, #4]

        if( datalen == 0 )
 808d280:	ebb7 070b 	subs.w	r7, r7, fp
        }

        use_len = ( datalen > hlen ) ? hlen : datalen;
        memcpy( p, hash_output, use_len );
        datalen -= use_len;
        p += use_len;
 808d284:	445b      	add	r3, fp
 808d286:	9301      	str	r3, [sp, #4]

        if( datalen == 0 )
 808d288:	d02d      	beq.n	808d2e6 <mbedtls_pkcs12_derivation+0x172>
            break;

        // Concatenating copies of hash_output into hash_block (B)
        pkcs12_fill_buffer( hash_block, v, hash_output, hlen );
 808d28a:	4653      	mov	r3, sl
 808d28c:	aa06      	add	r2, sp, #24
 808d28e:	4621      	mov	r1, r4
 808d290:	4648      	mov	r0, r9
 808d292:	f7ff ff56 	bl	808d142 <_ZL18pkcs12_fill_bufferPhjPKhj>
 808d296:	eb09 0304 	add.w	r3, r9, r4

        // B += 1
        for( i = v; i > 0; i-- )
            if( ++hash_block[i - 1] != 0 )
 808d29a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 808d29e:	3201      	adds	r2, #1
 808d2a0:	b2d2      	uxtb	r2, r2
 808d2a2:	701a      	strb	r2, [r3, #0]
 808d2a4:	b91a      	cbnz	r2, 808d2ae <mbedtls_pkcs12_derivation+0x13a>

        // Concatenating copies of hash_output into hash_block (B)
        pkcs12_fill_buffer( hash_block, v, hash_output, hlen );

        // B += 1
        for( i = v; i > 0; i-- )
 808d2a6:	454b      	cmp	r3, r9
 808d2a8:	d1f7      	bne.n	808d29a <mbedtls_pkcs12_derivation+0x126>
 808d2aa:	4623      	mov	r3, r4
 808d2ac:	e001      	b.n	808d2b2 <mbedtls_pkcs12_derivation+0x13e>
 808d2ae:	4623      	mov	r3, r4
 808d2b0:	2200      	movs	r2, #0

        // salt_block += B
        c = 0;
        for( i = v; i > 0; i-- )
        {
            j = salt_block[i - 1] + hash_block[i - 1] + c;
 808d2b2:	3b01      	subs	r3, #1
 808d2b4:	f818 0003 	ldrb.w	r0, [r8, r3]
 808d2b8:	f813 1009 	ldrb.w	r1, [r3, r9]
 808d2bc:	4401      	add	r1, r0
 808d2be:	4411      	add	r1, r2
            c = (unsigned char) (j >> 8);
 808d2c0:	f3c1 2207 	ubfx	r2, r1, #8, #8
            salt_block[i - 1] = j & 0xFF;
 808d2c4:	f808 1003 	strb.w	r1, [r8, r3]
            if( ++hash_block[i - 1] != 0 )
                break;

        // salt_block += B
        c = 0;
        for( i = v; i > 0; i-- )
 808d2c8:	2b00      	cmp	r3, #0
 808d2ca:	d1f2      	bne.n	808d2b2 <mbedtls_pkcs12_derivation+0x13e>
 808d2cc:	4622      	mov	r2, r4

        // pwd_block  += B
        c = 0;
        for( i = v; i > 0; i-- )
        {
            j = pwd_block[i - 1] + hash_block[i - 1] + c;
 808d2ce:	3a01      	subs	r2, #1
 808d2d0:	5d50      	ldrb	r0, [r2, r5]
 808d2d2:	f812 1009 	ldrb.w	r1, [r2, r9]
 808d2d6:	4401      	add	r1, r0
 808d2d8:	4419      	add	r1, r3
            c = (unsigned char) (j >> 8);
 808d2da:	f3c1 2307 	ubfx	r3, r1, #8, #8
            pwd_block[i - 1] = j & 0xFF;
 808d2de:	5551      	strb	r1, [r2, r5]
            salt_block[i - 1] = j & 0xFF;
        }

        // pwd_block  += B
        c = 0;
        for( i = v; i > 0; i-- )
 808d2e0:	2a00      	cmp	r2, #0
 808d2e2:	d1f4      	bne.n	808d2ce <mbedtls_pkcs12_derivation+0x15a>
 808d2e4:	e78a      	b.n	808d1fc <mbedtls_pkcs12_derivation+0x88>
            c = (unsigned char) (j >> 8);
            pwd_block[i - 1] = j & 0xFF;
        }
    }

    ret = 0;
 808d2e6:	2600      	movs	r6, #0

exit:
    mbedtls_zeroize( salt_block, sizeof( salt_block ) );
 808d2e8:	2180      	movs	r1, #128	; 0x80
 808d2ea:	4640      	mov	r0, r8
 808d2ec:	f7ff ff21 	bl	808d132 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( pwd_block, sizeof( pwd_block ) );
 808d2f0:	2180      	movs	r1, #128	; 0x80
 808d2f2:	4628      	mov	r0, r5
 808d2f4:	f7ff ff1d 	bl	808d132 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( hash_block, sizeof( hash_block ) );
 808d2f8:	2180      	movs	r1, #128	; 0x80
 808d2fa:	a876      	add	r0, sp, #472	; 0x1d8
 808d2fc:	f7ff ff19 	bl	808d132 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( hash_output, sizeof( hash_output ) );
 808d300:	2140      	movs	r1, #64	; 0x40
 808d302:	a806      	add	r0, sp, #24
 808d304:	f7ff ff15 	bl	808d132 <_ZL15mbedtls_zeroizePvj>

    mbedtls_md_free( &md_ctx );
 808d308:	a803      	add	r0, sp, #12
 808d30a:	f7fa f976 	bl	80875fa <mbedtls_md_free>

    return( ret );
 808d30e:	4630      	mov	r0, r6
 808d310:	e002      	b.n	808d318 <mbedtls_pkcs12_derivation+0x1a4>
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );
 808d312:	4803      	ldr	r0, [pc, #12]	; (808d320 <mbedtls_pkcs12_derivation+0x1ac>)
 808d314:	e000      	b.n	808d318 <mbedtls_pkcs12_derivation+0x1a4>

    md_info = mbedtls_md_info_from_type( md_type );
    if( md_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );
 808d316:	4803      	ldr	r0, [pc, #12]	; (808d324 <mbedtls_pkcs12_derivation+0x1b0>)
    mbedtls_zeroize( hash_output, sizeof( hash_output ) );

    mbedtls_md_free( &md_ctx );

    return( ret );
}
 808d318:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 808d31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d320:	ffffe080 	.word	0xffffe080
 808d324:	ffffe100 	.word	0xffffe100

0808d328 <mbedtls_pkcs12_pbe>:
int mbedtls_pkcs12_pbe( mbedtls_asn1_buf *pbe_params, int mode,
                mbedtls_cipher_type_t cipher_type, mbedtls_md_type_t md_type,
                const unsigned char *pwd,  size_t pwdlen,
                const unsigned char *data, size_t len,
                unsigned char *output )
{
 808d328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808d32c:	4604      	mov	r4, r0
 808d32e:	b0d9      	sub	sp, #356	; 0x164
    int ret, keylen = 0;
    unsigned char key[32];
    unsigned char iv[16];
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_cipher_context_t cipher_ctx;
    size_t olen = 0;
 808d330:	2600      	movs	r6, #0

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
 808d332:	4610      	mov	r0, r2
int mbedtls_pkcs12_pbe( mbedtls_asn1_buf *pbe_params, int mode,
                mbedtls_cipher_type_t cipher_type, mbedtls_md_type_t md_type,
                const unsigned char *pwd,  size_t pwdlen,
                const unsigned char *data, size_t len,
                unsigned char *output )
{
 808d334:	468b      	mov	fp, r1
 808d336:	4699      	mov	r9, r3
    int ret, keylen = 0;
    unsigned char key[32];
    unsigned char iv[16];
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_cipher_context_t cipher_ctx;
    size_t olen = 0;
 808d338:	9606      	str	r6, [sp, #24]

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
 808d33a:	f7f5 fcf1 	bl	8082d20 <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
 808d33e:	4605      	mov	r5, r0
 808d340:	2800      	cmp	r0, #0
 808d342:	f000 80ac 	beq.w	808d49e <mbedtls_pkcs12_pbe+0x176>
    int ret, iterations = 0;
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
 808d346:	9b63      	ldr	r3, [sp, #396]	; 0x18c

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    keylen = cipher_info->key_bitlen / 8;
 808d348:	6847      	ldr	r7, [r0, #4]
    int ret, iterations = 0;
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
 808d34a:	2b80      	cmp	r3, #128	; 0x80

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    keylen = cipher_info->key_bitlen / 8;
 808d34c:	ea4f 07d7 	mov.w	r7, r7, lsr #3

    if( ( ret = pkcs12_pbe_derive_key_iv( pbe_params, md_type, pwd, pwdlen,
                                          key, keylen,
                                          iv, cipher_info->iv_size ) ) != 0 )
 808d350:	f8d0 800c 	ldr.w	r8, [r0, #12]
static int pkcs12_pbe_derive_key_iv( mbedtls_asn1_buf *pbe_params, mbedtls_md_type_t md_type,
                                     const unsigned char *pwd,  size_t pwdlen,
                                     unsigned char *key, size_t keylen,
                                     unsigned char *iv,  size_t ivlen )
{
    int ret, iterations = 0;
 808d354:	9607      	str	r6, [sp, #28]
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
 808d356:	d85e      	bhi.n	808d416 <mbedtls_pkcs12_pbe+0xee>
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
    memset( &unipwd, 0, sizeof(unipwd) );
 808d358:	4631      	mov	r1, r6
 808d35a:	f44f 7281 	mov.w	r2, #258	; 0x102
 808d35e:	a817      	add	r0, sp, #92	; 0x5c
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
 808d360:	9608      	str	r6, [sp, #32]
 808d362:	9609      	str	r6, [sp, #36]	; 0x24
 808d364:	960a      	str	r6, [sp, #40]	; 0x28
    memset( &unipwd, 0, sizeof(unipwd) );
 808d366:	f006 fe22 	bl	8093fae <memset>
static int pkcs12_parse_pbe_params( mbedtls_asn1_buf *params,
                                    mbedtls_asn1_buf *salt, int *iterations )
{
    int ret;
    unsigned char **p = &params->p;
    const unsigned char *end = params->p + params->len;
 808d36a:	6863      	ldr	r3, [r4, #4]
 808d36c:	68a6      	ldr	r6, [r4, #8]

static int pkcs12_parse_pbe_params( mbedtls_asn1_buf *params,
                                    mbedtls_asn1_buf *salt, int *iterations )
{
    int ret;
    unsigned char **p = &params->p;
 808d36e:	f104 0a08 	add.w	sl, r4, #8
    const unsigned char *end = params->p + params->len;
 808d372:	441e      	add	r6, r3
     *    salt          OCTET STRING,
     *    iterations    INTEGER
     *  }
     *
     */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 808d374:	6823      	ldr	r3, [r4, #0]
 808d376:	2b30      	cmp	r3, #48	; 0x30
 808d378:	f040 8093 	bne.w	808d4a2 <mbedtls_pkcs12_pbe+0x17a>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    if( ( ret = mbedtls_asn1_get_tag( p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 808d37c:	2304      	movs	r3, #4
 808d37e:	aa09      	add	r2, sp, #36	; 0x24
 808d380:	4631      	mov	r1, r6
 808d382:	4650      	mov	r0, sl
 808d384:	f7f5 ffa6 	bl	80832d4 <mbedtls_asn1_get_tag>
 808d388:	b950      	cbnz	r0, 808d3a0 <mbedtls_pkcs12_pbe+0x78>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    salt->p = *p;
 808d38a:	68a2      	ldr	r2, [r4, #8]
    *p += salt->len;
 808d38c:	9b09      	ldr	r3, [sp, #36]	; 0x24
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    if( ( ret = mbedtls_asn1_get_tag( p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    salt->p = *p;
 808d38e:	920a      	str	r2, [sp, #40]	; 0x28
    *p += salt->len;
 808d390:	4413      	add	r3, r2
 808d392:	60a3      	str	r3, [r4, #8]

    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
 808d394:	aa07      	add	r2, sp, #28
 808d396:	4631      	mov	r1, r6
 808d398:	4650      	mov	r0, sl
 808d39a:	f7f5 ffc8 	bl	808332e <mbedtls_asn1_get_int>
 808d39e:	b118      	cbz	r0, 808d3a8 <mbedtls_pkcs12_pbe+0x80>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );
 808d3a0:	f5a0 50f4 	sub.w	r0, r0, #7808	; 0x1e80
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
    memset( &unipwd, 0, sizeof(unipwd) );

    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
 808d3a4:	b118      	cbz	r0, 808d3ae <mbedtls_pkcs12_pbe+0x86>
 808d3a6:	e07f      	b.n	808d4a8 <mbedtls_pkcs12_pbe+0x180>
    *p += salt->len;

    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    if( *p != end )
 808d3a8:	68a3      	ldr	r3, [r4, #8]
 808d3aa:	429e      	cmp	r6, r3
 808d3ac:	d17b      	bne.n	808d4a6 <mbedtls_pkcs12_pbe+0x17e>
int mbedtls_pkcs12_pbe( mbedtls_asn1_buf *pbe_params, int mode,
                mbedtls_cipher_type_t cipher_type, mbedtls_md_type_t md_type,
                const unsigned char *pwd,  size_t pwdlen,
                const unsigned char *data, size_t len,
                unsigned char *output )
{
 808d3ae:	2300      	movs	r3, #0

    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
                                         &iterations ) ) != 0 )
        return( ret );

    for( i = 0; i < pwdlen; i++ )
 808d3b0:	9a63      	ldr	r2, [sp, #396]	; 0x18c
 808d3b2:	429a      	cmp	r2, r3
 808d3b4:	d007      	beq.n	808d3c6 <mbedtls_pkcs12_pbe+0x9e>
        unipwd[i * 2 + 1] = pwd[i];
 808d3b6:	9962      	ldr	r1, [sp, #392]	; 0x188
 808d3b8:	aa17      	add	r2, sp, #92	; 0x5c
 808d3ba:	5cc9      	ldrb	r1, [r1, r3]
 808d3bc:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 808d3c0:	7051      	strb	r1, [r2, #1]

    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
                                         &iterations ) ) != 0 )
        return( ret );

    for( i = 0; i < pwdlen; i++ )
 808d3c2:	3301      	adds	r3, #1
 808d3c4:	e7f4      	b.n	808d3b0 <mbedtls_pkcs12_pbe+0x88>
        unipwd[i * 2 + 1] = pwd[i];

    if( ( ret = mbedtls_pkcs12_derivation( key, keylen, unipwd, pwdlen * 2 + 2,
 808d3c6:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 808d3c8:	f8cd 9008 	str.w	r9, [sp, #8]
 808d3cc:	1c5c      	adds	r4, r3, #1
 808d3ce:	9b07      	ldr	r3, [sp, #28]
 808d3d0:	0064      	lsls	r4, r4, #1
 808d3d2:	9304      	str	r3, [sp, #16]
 808d3d4:	2301      	movs	r3, #1
 808d3d6:	9303      	str	r3, [sp, #12]
 808d3d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808d3da:	aa17      	add	r2, sp, #92	; 0x5c
 808d3dc:	9301      	str	r3, [sp, #4]
 808d3de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808d3e0:	4639      	mov	r1, r7
 808d3e2:	9300      	str	r3, [sp, #0]
 808d3e4:	a80f      	add	r0, sp, #60	; 0x3c
 808d3e6:	4623      	mov	r3, r4
 808d3e8:	f7ff fec4 	bl	808d174 <mbedtls_pkcs12_derivation>
 808d3ec:	b9a8      	cbnz	r0, 808d41a <mbedtls_pkcs12_pbe+0xf2>
                                   MBEDTLS_PKCS12_DERIVE_KEY, iterations ) ) != 0 )
    {
        return( ret );
    }

    if( iv == NULL || ivlen == 0 )
 808d3ee:	f1b8 0f00 	cmp.w	r8, #0
 808d3f2:	d014      	beq.n	808d41e <mbedtls_pkcs12_pbe+0xf6>
        return( 0 );

    if( ( ret = mbedtls_pkcs12_derivation( iv, ivlen, unipwd, pwdlen * 2 + 2,
 808d3f4:	9b07      	ldr	r3, [sp, #28]
 808d3f6:	f8cd 9008 	str.w	r9, [sp, #8]
 808d3fa:	9304      	str	r3, [sp, #16]
 808d3fc:	2302      	movs	r3, #2
 808d3fe:	9303      	str	r3, [sp, #12]
 808d400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808d402:	aa17      	add	r2, sp, #92	; 0x5c
 808d404:	9301      	str	r3, [sp, #4]
 808d406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808d408:	4641      	mov	r1, r8
 808d40a:	9300      	str	r3, [sp, #0]
 808d40c:	a80b      	add	r0, sp, #44	; 0x2c
 808d40e:	4623      	mov	r3, r4
 808d410:	f7ff feb0 	bl	808d174 <mbedtls_pkcs12_derivation>
 808d414:	e001      	b.n	808d41a <mbedtls_pkcs12_pbe+0xf2>
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );
 808d416:	4826      	ldr	r0, [pc, #152]	; (808d4b0 <mbedtls_pkcs12_pbe+0x188>)
 808d418:	e046      	b.n	808d4a8 <mbedtls_pkcs12_pbe+0x180>
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    keylen = cipher_info->key_bitlen / 8;

    if( ( ret = pkcs12_pbe_derive_key_iv( pbe_params, md_type, pwd, pwdlen,
 808d41a:	2800      	cmp	r0, #0
 808d41c:	d144      	bne.n	808d4a8 <mbedtls_pkcs12_pbe+0x180>
                                          iv, cipher_info->iv_size ) ) != 0 )
    {
        return( ret );
    }

    mbedtls_cipher_init( &cipher_ctx );
 808d41e:	a817      	add	r0, sp, #92	; 0x5c
 808d420:	f7f5 fca0 	bl	8082d64 <mbedtls_cipher_init>

    if( ( ret = mbedtls_cipher_setup( &cipher_ctx, cipher_info ) ) != 0 )
 808d424:	4629      	mov	r1, r5
 808d426:	a817      	add	r0, sp, #92	; 0x5c
 808d428:	f7f5 fe70 	bl	808310c <mbedtls_cipher_setup>
 808d42c:	4604      	mov	r4, r0
 808d42e:	bb48      	cbnz	r0, 808d484 <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_setkey( &cipher_ctx, key, 8 * keylen, (mbedtls_operation_t) mode ) ) != 0 )
 808d430:	fa4f f38b 	sxtb.w	r3, fp
 808d434:	00fa      	lsls	r2, r7, #3
 808d436:	a90f      	add	r1, sp, #60	; 0x3c
 808d438:	a817      	add	r0, sp, #92	; 0x5c
 808d43a:	f7f5 fca9 	bl	8082d90 <mbedtls_cipher_setkey>
 808d43e:	4604      	mov	r4, r0
 808d440:	bb00      	cbnz	r0, 808d484 <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_set_iv( &cipher_ctx, iv, cipher_info->iv_size ) ) != 0 )
 808d442:	68ea      	ldr	r2, [r5, #12]
 808d444:	a90b      	add	r1, sp, #44	; 0x2c
 808d446:	a817      	add	r0, sp, #92	; 0x5c
 808d448:	f7f5 fcc4 	bl	8082dd4 <mbedtls_cipher_set_iv>
 808d44c:	4604      	mov	r4, r0
 808d44e:	b9c8      	cbnz	r0, 808d484 <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_reset( &cipher_ctx ) ) != 0 )
 808d450:	a817      	add	r0, sp, #92	; 0x5c
 808d452:	f7f5 fcdf 	bl	8082e14 <mbedtls_cipher_reset>
 808d456:	4604      	mov	r4, r0
 808d458:	b9a0      	cbnz	r0, 808d484 <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_update( &cipher_ctx, data, len,
 808d45a:	ad06      	add	r5, sp, #24
 808d45c:	9500      	str	r5, [sp, #0]
 808d45e:	a964      	add	r1, sp, #400	; 0x190
 808d460:	c90e      	ldmia	r1, {r1, r2, r3}
 808d462:	a817      	add	r0, sp, #92	; 0x5c
 808d464:	f7f5 fce2 	bl	8082e2c <mbedtls_cipher_update>
 808d468:	4604      	mov	r4, r0
 808d46a:	b958      	cbnz	r0, 808d484 <mbedtls_pkcs12_pbe+0x15c>
                                output, &olen ) ) != 0 )
    {
        goto exit;
    }

    if( ( ret = mbedtls_cipher_finish( &cipher_ctx, output + olen, &olen ) ) != 0 )
 808d46c:	6829      	ldr	r1, [r5, #0]
 808d46e:	9b66      	ldr	r3, [sp, #408]	; 0x198
 808d470:	462a      	mov	r2, r5
 808d472:	4419      	add	r1, r3
 808d474:	a817      	add	r0, sp, #92	; 0x5c
 808d476:	f7f5 fda3 	bl	8082fc0 <mbedtls_cipher_finish>
        ret = MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH;
 808d47a:	f5a4 54f0 	sub.w	r4, r4, #7680	; 0x1e00
 808d47e:	2800      	cmp	r0, #0
 808d480:	bf08      	it	eq
 808d482:	2400      	moveq	r4, #0

exit:
    mbedtls_zeroize( key, sizeof( key ) );
 808d484:	2120      	movs	r1, #32
 808d486:	a80f      	add	r0, sp, #60	; 0x3c
 808d488:	f7ff fe53 	bl	808d132 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( iv,  sizeof( iv  ) );
 808d48c:	2110      	movs	r1, #16
 808d48e:	a80b      	add	r0, sp, #44	; 0x2c
 808d490:	f7ff fe4f 	bl	808d132 <_ZL15mbedtls_zeroizePvj>
    mbedtls_cipher_free( &cipher_ctx );
 808d494:	a817      	add	r0, sp, #92	; 0x5c
 808d496:	f7f5 fc69 	bl	8082d6c <mbedtls_cipher_free>

    return( ret );
 808d49a:	4620      	mov	r0, r4
 808d49c:	e004      	b.n	808d4a8 <mbedtls_pkcs12_pbe+0x180>
    mbedtls_cipher_context_t cipher_ctx;
    size_t olen = 0;

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );
 808d49e:	4805      	ldr	r0, [pc, #20]	; (808d4b4 <mbedtls_pkcs12_pbe+0x18c>)
 808d4a0:	e002      	b.n	808d4a8 <mbedtls_pkcs12_pbe+0x180>
     *  }
     *
     */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 808d4a2:	4805      	ldr	r0, [pc, #20]	; (808d4b8 <mbedtls_pkcs12_pbe+0x190>)
 808d4a4:	e000      	b.n	808d4a8 <mbedtls_pkcs12_pbe+0x180>
    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    if( *p != end )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 808d4a6:	4805      	ldr	r0, [pc, #20]	; (808d4bc <mbedtls_pkcs12_pbe+0x194>)
    mbedtls_zeroize( key, sizeof( key ) );
    mbedtls_zeroize( iv,  sizeof( iv  ) );
    mbedtls_cipher_free( &cipher_ctx );

    return( ret );
}
 808d4a8:	b059      	add	sp, #356	; 0x164
 808d4aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d4ae:	bf00      	nop
 808d4b0:	ffffe080 	.word	0xffffe080
 808d4b4:	ffffe100 	.word	0xffffe100
 808d4b8:	ffffe11e 	.word	0xffffe11e
 808d4bc:	ffffe11a 	.word	0xffffe11a

0808d4c0 <mbedtls_sha512_init>:
}
#endif /* PUT_UINT64_BE */

void mbedtls_sha512_init( mbedtls_sha512_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha512_context ) );
 808d4c0:	22d8      	movs	r2, #216	; 0xd8
 808d4c2:	2100      	movs	r1, #0
 808d4c4:	f006 bd73 	b.w	8093fae <memset>

0808d4c8 <mbedtls_sha512_free>:
}

void mbedtls_sha512_free( mbedtls_sha512_context *ctx )
{
    if( ctx == NULL )
 808d4c8:	b138      	cbz	r0, 808d4da <mbedtls_sha512_free+0x12>
 808d4ca:	f100 02d8 	add.w	r2, r0, #216	; 0xd8

#if !defined(MBEDTLS_SHA512_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808d4ce:	2300      	movs	r3, #0
 808d4d0:	4290      	cmp	r0, r2
 808d4d2:	d002      	beq.n	808d4da <mbedtls_sha512_free+0x12>
 808d4d4:	7003      	strb	r3, [r0, #0]
 808d4d6:	3001      	adds	r0, #1
 808d4d8:	e7fa      	b.n	808d4d0 <mbedtls_sha512_free+0x8>
 808d4da:	4770      	bx	lr

0808d4dc <mbedtls_sha512_clone>:
    mbedtls_zeroize( ctx, sizeof( mbedtls_sha512_context ) );
}

void mbedtls_sha512_clone( mbedtls_sha512_context *dst,
                           const mbedtls_sha512_context *src )
{
 808d4dc:	b508      	push	{r3, lr}
    *dst = *src;
 808d4de:	22d8      	movs	r2, #216	; 0xd8
 808d4e0:	f006 fd3f 	bl	8093f62 <memcpy>
 808d4e4:	bd08      	pop	{r3, pc}
	...

0808d4e8 <mbedtls_sha512_starts_ret>:
/*
 * SHA-512 context setup
 */
int mbedtls_sha512_starts_ret( mbedtls_sha512_context *ctx, int is384 )
{
    ctx->total[0] = 0;
 808d4e8:	2200      	movs	r2, #0
 808d4ea:	2300      	movs	r3, #0
 808d4ec:	e9c0 2300 	strd	r2, r3, [r0]
    ctx->total[1] = 0;
 808d4f0:	e9c0 2302 	strd	r2, r3, [r0, #8]

    if( is384 == 0 )
 808d4f4:	bb31      	cbnz	r1, 808d544 <mbedtls_sha512_starts_ret+0x5c>
    {
        /* SHA-512 */
        ctx->state[0] = UL64(0x6A09E667F3BCC908);
 808d4f6:	a32a      	add	r3, pc, #168	; (adr r3, 808d5a0 <mbedtls_sha512_starts_ret+0xb8>)
 808d4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d4fc:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0xBB67AE8584CAA73B);
 808d500:	a329      	add	r3, pc, #164	; (adr r3, 808d5a8 <mbedtls_sha512_starts_ret+0xc0>)
 808d502:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d506:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x3C6EF372FE94F82B);
 808d50a:	a329      	add	r3, pc, #164	; (adr r3, 808d5b0 <mbedtls_sha512_starts_ret+0xc8>)
 808d50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d510:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0xA54FF53A5F1D36F1);
 808d514:	a328      	add	r3, pc, #160	; (adr r3, 808d5b8 <mbedtls_sha512_starts_ret+0xd0>)
 808d516:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d51a:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x510E527FADE682D1);
 808d51e:	a328      	add	r3, pc, #160	; (adr r3, 808d5c0 <mbedtls_sha512_starts_ret+0xd8>)
 808d520:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d524:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x9B05688C2B3E6C1F);
 808d528:	a327      	add	r3, pc, #156	; (adr r3, 808d5c8 <mbedtls_sha512_starts_ret+0xe0>)
 808d52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d52e:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0x1F83D9ABFB41BD6B);
 808d532:	a327      	add	r3, pc, #156	; (adr r3, 808d5d0 <mbedtls_sha512_starts_ret+0xe8>)
 808d534:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d538:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x5BE0CD19137E2179);
 808d53c:	a326      	add	r3, pc, #152	; (adr r3, 808d5d8 <mbedtls_sha512_starts_ret+0xf0>)
 808d53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d542:	e025      	b.n	808d590 <mbedtls_sha512_starts_ret+0xa8>
    }
    else
    {
        /* SHA-384 */
        ctx->state[0] = UL64(0xCBBB9D5DC1059ED8);
 808d544:	a326      	add	r3, pc, #152	; (adr r3, 808d5e0 <mbedtls_sha512_starts_ret+0xf8>)
 808d546:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d54a:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0x629A292A367CD507);
 808d54e:	a326      	add	r3, pc, #152	; (adr r3, 808d5e8 <mbedtls_sha512_starts_ret+0x100>)
 808d550:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d554:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x9159015A3070DD17);
 808d558:	a325      	add	r3, pc, #148	; (adr r3, 808d5f0 <mbedtls_sha512_starts_ret+0x108>)
 808d55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d55e:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0x152FECD8F70E5939);
 808d562:	a325      	add	r3, pc, #148	; (adr r3, 808d5f8 <mbedtls_sha512_starts_ret+0x110>)
 808d564:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d568:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x67332667FFC00B31);
 808d56c:	a324      	add	r3, pc, #144	; (adr r3, 808d600 <mbedtls_sha512_starts_ret+0x118>)
 808d56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d572:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x8EB44A8768581511);
 808d576:	a324      	add	r3, pc, #144	; (adr r3, 808d608 <mbedtls_sha512_starts_ret+0x120>)
 808d578:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d57c:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
 808d580:	a323      	add	r3, pc, #140	; (adr r3, 808d610 <mbedtls_sha512_starts_ret+0x128>)
 808d582:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d586:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
 808d58a:	a323      	add	r3, pc, #140	; (adr r3, 808d618 <mbedtls_sha512_starts_ret+0x130>)
 808d58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d590:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
    }

    ctx->is384 = is384;
 808d594:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0

    return( 0 );
}
 808d598:	2000      	movs	r0, #0
 808d59a:	4770      	bx	lr
 808d59c:	f3af 8000 	nop.w
 808d5a0:	f3bcc908 	.word	0xf3bcc908
 808d5a4:	6a09e667 	.word	0x6a09e667
 808d5a8:	84caa73b 	.word	0x84caa73b
 808d5ac:	bb67ae85 	.word	0xbb67ae85
 808d5b0:	fe94f82b 	.word	0xfe94f82b
 808d5b4:	3c6ef372 	.word	0x3c6ef372
 808d5b8:	5f1d36f1 	.word	0x5f1d36f1
 808d5bc:	a54ff53a 	.word	0xa54ff53a
 808d5c0:	ade682d1 	.word	0xade682d1
 808d5c4:	510e527f 	.word	0x510e527f
 808d5c8:	2b3e6c1f 	.word	0x2b3e6c1f
 808d5cc:	9b05688c 	.word	0x9b05688c
 808d5d0:	fb41bd6b 	.word	0xfb41bd6b
 808d5d4:	1f83d9ab 	.word	0x1f83d9ab
 808d5d8:	137e2179 	.word	0x137e2179
 808d5dc:	5be0cd19 	.word	0x5be0cd19
 808d5e0:	c1059ed8 	.word	0xc1059ed8
 808d5e4:	cbbb9d5d 	.word	0xcbbb9d5d
 808d5e8:	367cd507 	.word	0x367cd507
 808d5ec:	629a292a 	.word	0x629a292a
 808d5f0:	3070dd17 	.word	0x3070dd17
 808d5f4:	9159015a 	.word	0x9159015a
 808d5f8:	f70e5939 	.word	0xf70e5939
 808d5fc:	152fecd8 	.word	0x152fecd8
 808d600:	ffc00b31 	.word	0xffc00b31
 808d604:	67332667 	.word	0x67332667
 808d608:	68581511 	.word	0x68581511
 808d60c:	8eb44a87 	.word	0x8eb44a87
 808d610:	64f98fa7 	.word	0x64f98fa7
 808d614:	db0c2e0d 	.word	0xdb0c2e0d
 808d618:	befa4fa4 	.word	0xbefa4fa4
 808d61c:	47b5481d 	.word	0x47b5481d

0808d620 <mbedtls_internal_sha512_process>:
    UL64(0x5FCB6FAB3AD6FAEC),  UL64(0x6C44198C4A475817)
};

int mbedtls_internal_sha512_process( mbedtls_sha512_context *ctx,
                                     const unsigned char data[128] )
{
 808d620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808d624:	f2ad 4d7c 	subw	sp, sp, #1148	; 0x47c
 808d628:	4686      	mov	lr, r0
 808d62a:	f50d 7cf8 	add.w	ip, sp, #496	; 0x1f0
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
 808d62e:	2000      	movs	r0, #0
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 808d630:	eb01 04c0 	add.w	r4, r1, r0, lsl #3
 808d634:	f811 2030 	ldrb.w	r2, [r1, r0, lsl #3]
 808d638:	7866      	ldrb	r6, [r4, #1]
 808d63a:	f04f 0a00 	mov.w	sl, #0
 808d63e:	ea4f 6b02 	mov.w	fp, r2, lsl #24
 808d642:	0436      	lsls	r6, r6, #16
 808d644:	2300      	movs	r3, #0
 808d646:	ea43 030b 	orr.w	r3, r3, fp
 808d64a:	9609      	str	r6, [sp, #36]	; 0x24
 808d64c:	f8cd a020 	str.w	sl, [sp, #32]
 808d650:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
 808d654:	431e      	orrs	r6, r3
 808d656:	4633      	mov	r3, r6
 808d658:	79e2      	ldrb	r2, [r4, #7]
 808d65a:	78a6      	ldrb	r6, [r4, #2]
 808d65c:	ea42 020a 	orr.w	r2, r2, sl
 808d660:	4315      	orrs	r5, r2
 808d662:	462a      	mov	r2, r5
 808d664:	0236      	lsls	r6, r6, #8
 808d666:	960b      	str	r6, [sp, #44]	; 0x2c
 808d668:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 808d66c:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 808d670:	431e      	orrs	r6, r3
 808d672:	4633      	mov	r3, r6
 808d674:	4315      	orrs	r5, r2
 808d676:	78e6      	ldrb	r6, [r4, #3]
 808d678:	462a      	mov	r2, r5
 808d67a:	960d      	str	r6, [sp, #52]	; 0x34
 808d67c:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 808d680:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 808d684:	431e      	orrs	r6, r3
 808d686:	4633      	mov	r3, r6
 808d688:	7926      	ldrb	r6, [r4, #4]
 808d68a:	4315      	orrs	r5, r2
 808d68c:	462a      	mov	r2, r5
 808d68e:	0635      	lsls	r5, r6, #24
 808d690:	f8cd a014 	str.w	sl, [sp, #20]
 808d694:	9504      	str	r5, [sp, #16]
 808d696:	e9dd 5604 	ldrd	r5, r6, [sp, #16]
 808d69a:	431e      	orrs	r6, r3
 808d69c:	4633      	mov	r3, r6
 808d69e:	7966      	ldrb	r6, [r4, #5]
 808d6a0:	4315      	orrs	r5, r2
 808d6a2:	462a      	mov	r2, r5
 808d6a4:	0435      	lsls	r5, r6, #16
 808d6a6:	f8cd a01c 	str.w	sl, [sp, #28]
 808d6aa:	9506      	str	r5, [sp, #24]
 808d6ac:	e9dd 5606 	ldrd	r5, r6, [sp, #24]
 808d6b0:	431e      	orrs	r6, r3
 808d6b2:	4633      	mov	r3, r6
 808d6b4:	79a6      	ldrb	r6, [r4, #6]
 808d6b6:	4315      	orrs	r5, r2
 808d6b8:	ea4f 2806 	mov.w	r8, r6, lsl #8
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
 808d6bc:	3001      	adds	r0, #1
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 808d6be:	ea45 0208 	orr.w	r2, r5, r8
 808d6c2:	ea43 030a 	orr.w	r3, r3, sl
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
 808d6c6:	2810      	cmp	r0, #16
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 808d6c8:	e9ec 2302 	strd	r2, r3, [ip, #8]!
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
 808d6cc:	d1b0      	bne.n	808d630 <mbedtls_internal_sha512_process+0x10>
 808d6ce:	a97e      	add	r1, sp, #504	; 0x1f8
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
 808d6d0:	6f0a      	ldr	r2, [r1, #112]	; 0x70
 808d6d2:	6f4b      	ldr	r3, [r1, #116]	; 0x74
               S0(W[i - 15]) + W[i - 16];
 808d6d4:	0cd4      	lsrs	r4, r2, #19
 808d6d6:	ea44 3443 	orr.w	r4, r4, r3, lsl #13
 808d6da:	940e      	str	r4, [sp, #56]	; 0x38
 808d6dc:	0cdc      	lsrs	r4, r3, #19
 808d6de:	ea44 3442 	orr.w	r4, r4, r2, lsl #13
 808d6e2:	940f      	str	r4, [sp, #60]	; 0x3c
 808d6e4:	00dc      	lsls	r4, r3, #3
 808d6e6:	ea44 7452 	orr.w	r4, r4, r2, lsr #29
 808d6ea:	9411      	str	r4, [sp, #68]	; 0x44
 808d6ec:	00d4      	lsls	r4, r2, #3
 808d6ee:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
 808d6f2:	0992      	lsrs	r2, r2, #6
 808d6f4:	ea42 6283 	orr.w	r2, r2, r3, lsl #26
 808d6f8:	9410      	str	r4, [sp, #64]	; 0x40
 808d6fa:	099b      	lsrs	r3, r3, #6
 808d6fc:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 808d700:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 808d704:	9200      	str	r2, [sp, #0]
 808d706:	4066      	eors	r6, r4
 808d708:	9301      	str	r3, [sp, #4]
 808d70a:	406f      	eors	r7, r5
 808d70c:	e9dd 3400 	ldrd	r3, r4, [sp]
 808d710:	4073      	eors	r3, r6
 808d712:	461e      	mov	r6, r3
 808d714:	e9d1 2300 	ldrd	r2, r3, [r1]
 808d718:	407c      	eors	r4, r7
 808d71a:	4627      	mov	r7, r4
 808d71c:	e9d1 4512 	ldrd	r4, r5, [r1, #72]	; 0x48
 808d720:	f8d1 8008 	ldr.w	r8, [r1, #8]
 808d724:	1912      	adds	r2, r2, r4
 808d726:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 808d72a:	416b      	adcs	r3, r5
 808d72c:	18b4      	adds	r4, r6, r2
 808d72e:	eb47 0503 	adc.w	r5, r7, r3
 808d732:	ea4f 0358 	mov.w	r3, r8, lsr #1
 808d736:	ea43 73cc 	orr.w	r3, r3, ip, lsl #31
 808d73a:	9312      	str	r3, [sp, #72]	; 0x48
 808d73c:	ea4f 035c 	mov.w	r3, ip, lsr #1
 808d740:	ea43 73c8 	orr.w	r3, r3, r8, lsl #31
 808d744:	9313      	str	r3, [sp, #76]	; 0x4c
 808d746:	ea4f 2318 	mov.w	r3, r8, lsr #8
 808d74a:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 808d74e:	9314      	str	r3, [sp, #80]	; 0x50
 808d750:	ea4f 231c 	mov.w	r3, ip, lsr #8
 808d754:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 808d758:	9315      	str	r3, [sp, #84]	; 0x54
 808d75a:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 808d75e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 808d762:	4072      	eors	r2, r6
 808d764:	ea4f 16d8 	mov.w	r6, r8, lsr #7
 808d768:	ea46 664c 	orr.w	r6, r6, ip, lsl #25
 808d76c:	9602      	str	r6, [sp, #8]
 808d76e:	ea4f 16dc 	mov.w	r6, ip, lsr #7
 808d772:	9603      	str	r6, [sp, #12]
 808d774:	407b      	eors	r3, r7
 808d776:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 808d77a:	4056      	eors	r6, r2
 808d77c:	1932      	adds	r2, r6, r4
 808d77e:	ea87 0703 	eor.w	r7, r7, r3
    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
 808d782:	f100 0001 	add.w	r0, r0, #1
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
 808d786:	eb47 0305 	adc.w	r3, r7, r5
    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
 808d78a:	2850      	cmp	r0, #80	; 0x50
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
 808d78c:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 808d790:	f101 0108 	add.w	r1, r1, #8
    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
 808d794:	d19c      	bne.n	808d6d0 <mbedtls_internal_sha512_process+0xb0>
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
 808d796:	e9de 3404 	ldrd	r3, r4, [lr, #16]
 808d79a:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    B = ctx->state[1];
 808d79e:	e9de 3406 	ldrd	r3, r4, [lr, #24]
 808d7a2:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
    C = ctx->state[2];
 808d7a6:	e9de 3408 	ldrd	r3, r4, [lr, #32]
 808d7aa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    D = ctx->state[3];
 808d7ae:	e9de 340a 	ldrd	r3, r4, [lr, #40]	; 0x28
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
 808d7b2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
    D = ctx->state[3];
 808d7b6:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
    E = ctx->state[4];
 808d7ba:	e9de 340c 	ldrd	r3, r4, [lr, #48]	; 0x30
    }

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
 808d7be:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
    E = ctx->state[4];
 808d7c2:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
    F = ctx->state[5];
 808d7c6:	e9de 340e 	ldrd	r3, r4, [lr, #56]	; 0x38
 808d7ca:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
    G = ctx->state[6];
 808d7ce:	e9de 3410 	ldrd	r3, r4, [lr, #64]	; 0x40
 808d7d2:	e9cd 3418 	strd	r3, r4, [sp, #96]	; 0x60
    H = ctx->state[7];
 808d7d6:	e9de 3412 	ldrd	r3, r4, [lr, #72]	; 0x48
 808d7da:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
 808d7de:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 808d7e2:	4b0d      	ldr	r3, [pc, #52]	; (808d818 <mbedtls_internal_sha512_process+0x1f8>)
 808d7e4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
 808d7e8:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 808d7ec:	e9cd 0108 	strd	r0, r1, [sp, #32]
    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
 808d7f0:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 808d7f4:	e9cd 0106 	strd	r0, r1, [sp, #24]

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
 808d7f8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 808d7fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
    B = ctx->state[1];
 808d800:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 808d804:	e9cd 0102 	strd	r0, r1, [sp, #8]
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
 808d808:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 808d80c:	e9cd 0100 	strd	r0, r1, [sp]
 808d810:	aa80      	add	r2, sp, #512	; 0x200
 808d812:	f503 7c20 	add.w	ip, r3, #640	; 0x280
 808d816:	e001      	b.n	808d81c <mbedtls_internal_sha512_process+0x1fc>
 808d818:	080983f8 	.word	0x080983f8
    H = ctx->state[7];
    i = 0;

    do
    {
        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
 808d81c:	9904      	ldr	r1, [sp, #16]
 808d81e:	9805      	ldr	r0, [sp, #20]
 808d820:	0b89      	lsrs	r1, r1, #14
 808d822:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 808d826:	911e      	str	r1, [sp, #120]	; 0x78
 808d828:	0b81      	lsrs	r1, r0, #14
 808d82a:	9804      	ldr	r0, [sp, #16]
 808d82c:	e953 4502 	ldrd	r4, r5, [r3, #-8]
 808d830:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 808d834:	911f      	str	r1, [sp, #124]	; 0x7c
 808d836:	0c81      	lsrs	r1, r0, #18
 808d838:	9805      	ldr	r0, [sp, #20]
 808d83a:	e9dd 671e 	ldrd	r6, r7, [sp, #120]	; 0x78
 808d83e:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 808d842:	9120      	str	r1, [sp, #128]	; 0x80
 808d844:	0c81      	lsrs	r1, r0, #18
 808d846:	9804      	ldr	r0, [sp, #16]
 808d848:	3340      	adds	r3, #64	; 0x40
 808d84a:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 808d84e:	9121      	str	r1, [sp, #132]	; 0x84
 808d850:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 808d854:	404f      	eors	r7, r1
 808d856:	9905      	ldr	r1, [sp, #20]
 808d858:	4046      	eors	r6, r0
 808d85a:	9804      	ldr	r0, [sp, #16]
 808d85c:	05c9      	lsls	r1, r1, #23
 808d85e:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 808d862:	9123      	str	r1, [sp, #140]	; 0x8c
 808d864:	05c1      	lsls	r1, r0, #23
 808d866:	9805      	ldr	r0, [sp, #20]
 808d868:	3240      	adds	r2, #64	; 0x40
 808d86a:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 808d86e:	9122      	str	r1, [sp, #136]	; 0x88
 808d870:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 808d874:	4070      	eors	r0, r6
 808d876:	4079      	eors	r1, r7
 808d878:	4606      	mov	r6, r0
 808d87a:	460f      	mov	r7, r1
 808d87c:	e952 0112 	ldrd	r0, r1, [r2, #-72]	; 0x48
 808d880:	1900      	adds	r0, r0, r4
 808d882:	4169      	adcs	r1, r5
 808d884:	1836      	adds	r6, r6, r0
 808d886:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 808d88a:	414f      	adcs	r7, r1
 808d88c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 808d890:	4060      	eors	r0, r4
 808d892:	4069      	eors	r1, r5
 808d894:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 808d898:	4004      	ands	r4, r0
 808d89a:	4620      	mov	r0, r4
 808d89c:	400d      	ands	r5, r1
 808d89e:	4629      	mov	r1, r5
 808d8a0:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 808d8a4:	4044      	eors	r4, r0
 808d8a6:	1936      	adds	r6, r6, r4
 808d8a8:	ea85 0501 	eor.w	r5, r5, r1
 808d8ac:	416f      	adcs	r7, r5
 808d8ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808d8b2:	1980      	adds	r0, r0, r6
 808d8b4:	4179      	adcs	r1, r7
 808d8b6:	4606      	mov	r6, r0
 808d8b8:	460f      	mov	r7, r1
 808d8ba:	eb18 0800 	adds.w	r8, r8, r0
 808d8be:	eb49 0901 	adc.w	r9, r9, r1
 808d8c2:	9900      	ldr	r1, [sp, #0]
 808d8c4:	9801      	ldr	r0, [sp, #4]
 808d8c6:	0f09      	lsrs	r1, r1, #28
 808d8c8:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808d8cc:	9124      	str	r1, [sp, #144]	; 0x90
 808d8ce:	0f01      	lsrs	r1, r0, #28
 808d8d0:	9800      	ldr	r0, [sp, #0]
 808d8d2:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808d8d6:	9125      	str	r1, [sp, #148]	; 0x94
 808d8d8:	9901      	ldr	r1, [sp, #4]
 808d8da:	0789      	lsls	r1, r1, #30
 808d8dc:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808d8e0:	9127      	str	r1, [sp, #156]	; 0x9c
 808d8e2:	0781      	lsls	r1, r0, #30
 808d8e4:	9801      	ldr	r0, [sp, #4]
 808d8e6:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808d8ea:	9126      	str	r1, [sp, #152]	; 0x98
 808d8ec:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 808d8f0:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
 808d8f4:	404d      	eors	r5, r1
 808d8f6:	9901      	ldr	r1, [sp, #4]
 808d8f8:	4044      	eors	r4, r0
 808d8fa:	9800      	ldr	r0, [sp, #0]
 808d8fc:	0649      	lsls	r1, r1, #25
 808d8fe:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808d902:	9129      	str	r1, [sp, #164]	; 0xa4
 808d904:	0641      	lsls	r1, r0, #25
 808d906:	9801      	ldr	r0, [sp, #4]
 808d908:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808d90c:	9128      	str	r1, [sp, #160]	; 0xa0
 808d90e:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 808d912:	4060      	eors	r0, r4
 808d914:	4069      	eors	r1, r5
 808d916:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 808d91a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 808d91e:	e9dd 0100 	ldrd	r0, r1, [sp]
 808d922:	4320      	orrs	r0, r4
 808d924:	4329      	orrs	r1, r5
 808d926:	ea00 040a 	and.w	r4, r0, sl
 808d92a:	ea01 050b 	and.w	r5, r1, fp
 808d92e:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
 808d932:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808d936:	e9dd 4500 	ldrd	r4, r5, [sp]
 808d93a:	4004      	ands	r4, r0
 808d93c:	400d      	ands	r5, r1
 808d93e:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 808d942:	4320      	orrs	r0, r4
 808d944:	4329      	orrs	r1, r5
 808d946:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 808d94a:	1824      	adds	r4, r4, r0
 808d94c:	414d      	adcs	r5, r1
 808d94e:	19a4      	adds	r4, r4, r6
 808d950:	417d      	adcs	r5, r7
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
 808d952:	e952 0110 	ldrd	r0, r1, [r2, #-64]	; 0x40
    H = ctx->state[7];
    i = 0;

    do
    {
        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
 808d956:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
 808d95a:	e953 4510 	ldrd	r4, r5, [r3, #-64]	; 0x40
 808d95e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 808d962:	1900      	adds	r0, r0, r4
 808d964:	4169      	adcs	r1, r5
 808d966:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 808d96a:	1824      	adds	r4, r4, r0
 808d96c:	414d      	adcs	r5, r1
 808d96e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 808d972:	4070      	eors	r0, r6
 808d974:	ea00 0008 	and.w	r0, r0, r8
 808d978:	4046      	eors	r6, r0
 808d97a:	19a0      	adds	r0, r4, r6
 808d97c:	ea4f 3498 	mov.w	r4, r8, lsr #14
 808d980:	ea44 4489 	orr.w	r4, r4, r9, lsl #18
 808d984:	942a      	str	r4, [sp, #168]	; 0xa8
 808d986:	ea4f 3499 	mov.w	r4, r9, lsr #14
 808d98a:	ea44 4488 	orr.w	r4, r4, r8, lsl #18
 808d98e:	942b      	str	r4, [sp, #172]	; 0xac
 808d990:	ea4f 4498 	mov.w	r4, r8, lsr #18
 808d994:	ea44 3489 	orr.w	r4, r4, r9, lsl #14
 808d998:	942c      	str	r4, [sp, #176]	; 0xb0
 808d99a:	ea81 0107 	eor.w	r1, r1, r7
 808d99e:	ea4f 4499 	mov.w	r4, r9, lsr #18
 808d9a2:	ea01 0109 	and.w	r1, r1, r9
 808d9a6:	ea44 3488 	orr.w	r4, r4, r8, lsl #14
 808d9aa:	942d      	str	r4, [sp, #180]	; 0xb4
 808d9ac:	ea87 0701 	eor.w	r7, r7, r1
 808d9b0:	eb45 0107 	adc.w	r1, r5, r7
 808d9b4:	e9dd 672c 	ldrd	r6, r7, [sp, #176]	; 0xb0
 808d9b8:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
 808d9bc:	4074      	eors	r4, r6
 808d9be:	ea4f 56c9 	mov.w	r6, r9, lsl #23
 808d9c2:	ea46 2658 	orr.w	r6, r6, r8, lsr #9
 808d9c6:	962f      	str	r6, [sp, #188]	; 0xbc
 808d9c8:	ea4f 56c8 	mov.w	r6, r8, lsl #23
 808d9cc:	ea46 2659 	orr.w	r6, r6, r9, lsr #9
 808d9d0:	962e      	str	r6, [sp, #184]	; 0xb8
 808d9d2:	407d      	eors	r5, r7
 808d9d4:	e9dd 672e 	ldrd	r6, r7, [sp, #184]	; 0xb8
 808d9d8:	4066      	eors	r6, r4
 808d9da:	1986      	adds	r6, r0, r6
 808d9dc:	ea87 0705 	eor.w	r7, r7, r5
 808d9e0:	eb41 0707 	adc.w	r7, r1, r7
 808d9e4:	eb1a 0006 	adds.w	r0, sl, r6
 808d9e8:	eb4b 0107 	adc.w	r1, fp, r7
 808d9ec:	e9cd 0108 	strd	r0, r1, [sp, #32]
 808d9f0:	990a      	ldr	r1, [sp, #40]	; 0x28
 808d9f2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 808d9f4:	0f09      	lsrs	r1, r1, #28
 808d9f6:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808d9fa:	9130      	str	r1, [sp, #192]	; 0xc0
 808d9fc:	0f01      	lsrs	r1, r0, #28
 808d9fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 808da00:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 808da04:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808da08:	9131      	str	r1, [sp, #196]	; 0xc4
 808da0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 808da0c:	e9dd 4530 	ldrd	r4, r5, [sp, #192]	; 0xc0
 808da10:	0789      	lsls	r1, r1, #30
 808da12:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808da16:	9133      	str	r1, [sp, #204]	; 0xcc
 808da18:	0781      	lsls	r1, r0, #30
 808da1a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 808da1c:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808da20:	9132      	str	r1, [sp, #200]	; 0xc8
 808da22:	e9dd 0132 	ldrd	r0, r1, [sp, #200]	; 0xc8
 808da26:	404d      	eors	r5, r1
 808da28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 808da2a:	4044      	eors	r4, r0
 808da2c:	980a      	ldr	r0, [sp, #40]	; 0x28
 808da2e:	0649      	lsls	r1, r1, #25
 808da30:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808da34:	9135      	str	r1, [sp, #212]	; 0xd4
 808da36:	0641      	lsls	r1, r0, #25
 808da38:	980b      	ldr	r0, [sp, #44]	; 0x2c
 808da3a:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808da3e:	9134      	str	r1, [sp, #208]	; 0xd0
 808da40:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
 808da44:	4060      	eors	r0, r4
 808da46:	4604      	mov	r4, r0
 808da48:	4069      	eors	r1, r5
 808da4a:	460d      	mov	r5, r1
 808da4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 808da50:	ea40 000a 	orr.w	r0, r0, sl
 808da54:	ea41 010b 	orr.w	r1, r1, fp
 808da58:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 808da5c:	ea0a 0a00 	and.w	sl, sl, r0
 808da60:	ea0b 0b01 	and.w	fp, fp, r1
 808da64:	e9cd ab1c 	strd	sl, fp, [sp, #112]	; 0x70
 808da68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808da6c:	e9dd ab00 	ldrd	sl, fp, [sp]
 808da70:	ea0a 0a00 	and.w	sl, sl, r0
 808da74:	ea0b 0b01 	and.w	fp, fp, r1
 808da78:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 808da7c:	ea40 000a 	orr.w	r0, r0, sl
 808da80:	1900      	adds	r0, r0, r4
 808da82:	ea41 010b 	orr.w	r1, r1, fp
 808da86:	4169      	adcs	r1, r5
 808da88:	eb10 0a06 	adds.w	sl, r0, r6
 808da8c:	eb41 0b07 	adc.w	fp, r1, r7
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
 808da90:	e953 450e 	ldrd	r4, r5, [r3, #-56]	; 0x38
 808da94:	e952 010e 	ldrd	r0, r1, [r2, #-56]	; 0x38
 808da98:	1900      	adds	r0, r0, r4
 808da9a:	4169      	adcs	r1, r5
 808da9c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 808daa0:	1824      	adds	r4, r4, r0
 808daa2:	414d      	adcs	r5, r1
 808daa4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 808daa8:	ea80 0008 	eor.w	r0, r0, r8
 808daac:	ea81 0109 	eor.w	r1, r1, r9
 808dab0:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 808dab4:	4006      	ands	r6, r0
 808dab6:	4630      	mov	r0, r6
 808dab8:	400f      	ands	r7, r1
 808daba:	4639      	mov	r1, r7
 808dabc:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 808dac0:	4046      	eors	r6, r0
 808dac2:	19a0      	adds	r0, r4, r6
 808dac4:	ea87 0701 	eor.w	r7, r7, r1
 808dac8:	9c08      	ldr	r4, [sp, #32]
 808daca:	eb45 0107 	adc.w	r1, r5, r7
 808dace:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808dad0:	0ba4      	lsrs	r4, r4, #14
 808dad2:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808dad6:	9436      	str	r4, [sp, #216]	; 0xd8
 808dad8:	0bac      	lsrs	r4, r5, #14
 808dada:	9d08      	ldr	r5, [sp, #32]
 808dadc:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808dae0:	9437      	str	r4, [sp, #220]	; 0xdc
 808dae2:	0cac      	lsrs	r4, r5, #18
 808dae4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808dae6:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808daea:	9438      	str	r4, [sp, #224]	; 0xe0
 808daec:	0cac      	lsrs	r4, r5, #18
 808daee:	9d08      	ldr	r5, [sp, #32]
 808daf0:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808daf4:	9439      	str	r4, [sp, #228]	; 0xe4
 808daf6:	e9dd 6738 	ldrd	r6, r7, [sp, #224]	; 0xe0
 808dafa:	e9dd 4536 	ldrd	r4, r5, [sp, #216]	; 0xd8
 808dafe:	4074      	eors	r4, r6
 808db00:	9e09      	ldr	r6, [sp, #36]	; 0x24
 808db02:	407d      	eors	r5, r7
 808db04:	9f08      	ldr	r7, [sp, #32]
 808db06:	05f6      	lsls	r6, r6, #23
 808db08:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808db0c:	963b      	str	r6, [sp, #236]	; 0xec
 808db0e:	05fe      	lsls	r6, r7, #23
 808db10:	9f09      	ldr	r7, [sp, #36]	; 0x24
 808db12:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808db16:	963a      	str	r6, [sp, #232]	; 0xe8
 808db18:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 808db1c:	4066      	eors	r6, r4
 808db1e:	1986      	adds	r6, r0, r6
 808db20:	ea87 0705 	eor.w	r7, r7, r5
 808db24:	eb41 0707 	adc.w	r7, r1, r7
 808db28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808db2c:	1980      	adds	r0, r0, r6
 808db2e:	4179      	adcs	r1, r7
 808db30:	e9cd 0106 	strd	r0, r1, [sp, #24]
 808db34:	ea4f 711a 	mov.w	r1, sl, lsr #28
 808db38:	ea41 110b 	orr.w	r1, r1, fp, lsl #4
 808db3c:	913c      	str	r1, [sp, #240]	; 0xf0
 808db3e:	ea4f 711b 	mov.w	r1, fp, lsr #28
 808db42:	ea41 110a 	orr.w	r1, r1, sl, lsl #4
 808db46:	913d      	str	r1, [sp, #244]	; 0xf4
 808db48:	ea4f 718b 	mov.w	r1, fp, lsl #30
 808db4c:	ea41 019a 	orr.w	r1, r1, sl, lsr #2
 808db50:	913f      	str	r1, [sp, #252]	; 0xfc
 808db52:	ea4f 718a 	mov.w	r1, sl, lsl #30
 808db56:	ea41 019b 	orr.w	r1, r1, fp, lsr #2
 808db5a:	913e      	str	r1, [sp, #248]	; 0xf8
 808db5c:	e9dd 013e 	ldrd	r0, r1, [sp, #248]	; 0xf8
 808db60:	e9dd 453c 	ldrd	r4, r5, [sp, #240]	; 0xf0
 808db64:	404d      	eors	r5, r1
 808db66:	ea4f 614b 	mov.w	r1, fp, lsl #25
 808db6a:	ea41 11da 	orr.w	r1, r1, sl, lsr #7
 808db6e:	9141      	str	r1, [sp, #260]	; 0x104
 808db70:	ea4f 614a 	mov.w	r1, sl, lsl #25
 808db74:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
 808db78:	4044      	eors	r4, r0
 808db7a:	9140      	str	r1, [sp, #256]	; 0x100
 808db7c:	a940      	add	r1, sp, #256	; 0x100
 808db7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 808db82:	4060      	eors	r0, r4
 808db84:	4069      	eors	r1, r5
 808db86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 808db8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808db8e:	e9dd 4500 	ldrd	r4, r5, [sp]
 808db92:	ea40 000a 	orr.w	r0, r0, sl
 808db96:	ea41 010b 	orr.w	r1, r1, fp
 808db9a:	4004      	ands	r4, r0
 808db9c:	4620      	mov	r0, r4
 808db9e:	400d      	ands	r5, r1
 808dba0:	4629      	mov	r1, r5
 808dba2:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 808dba6:	ea04 040a 	and.w	r4, r4, sl
 808dbaa:	ea05 050b 	and.w	r5, r5, fp
 808dbae:	4304      	orrs	r4, r0
 808dbb0:	4620      	mov	r0, r4
 808dbb2:	430d      	orrs	r5, r1
 808dbb4:	4629      	mov	r1, r5
 808dbb6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 808dbba:	1824      	adds	r4, r4, r0
 808dbbc:	414d      	adcs	r5, r1
 808dbbe:	19a4      	adds	r4, r4, r6
 808dbc0:	417d      	adcs	r5, r7
 808dbc2:	e9cd 4502 	strd	r4, r5, [sp, #8]
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
 808dbc6:	e953 450c 	ldrd	r4, r5, [r3, #-48]	; 0x30
 808dbca:	e952 010c 	ldrd	r0, r1, [r2, #-48]	; 0x30
 808dbce:	1900      	adds	r0, r0, r4
 808dbd0:	4169      	adcs	r1, r5
 808dbd2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 808dbd6:	1824      	adds	r4, r4, r0
 808dbd8:	414d      	adcs	r5, r1
 808dbda:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808dbde:	ea80 0008 	eor.w	r0, r0, r8
 808dbe2:	ea81 0109 	eor.w	r1, r1, r9
 808dbe6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 808dbea:	4006      	ands	r6, r0
 808dbec:	ea86 0608 	eor.w	r6, r6, r8
 808dbf0:	400f      	ands	r7, r1
 808dbf2:	19a0      	adds	r0, r4, r6
 808dbf4:	ea87 0709 	eor.w	r7, r7, r9
 808dbf8:	9c06      	ldr	r4, [sp, #24]
 808dbfa:	eb45 0107 	adc.w	r1, r5, r7
 808dbfe:	9d07      	ldr	r5, [sp, #28]
 808dc00:	0ba4      	lsrs	r4, r4, #14
 808dc02:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808dc06:	9442      	str	r4, [sp, #264]	; 0x108
 808dc08:	0bac      	lsrs	r4, r5, #14
 808dc0a:	9d06      	ldr	r5, [sp, #24]
 808dc0c:	ae44      	add	r6, sp, #272	; 0x110
 808dc0e:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808dc12:	9443      	str	r4, [sp, #268]	; 0x10c
 808dc14:	0cac      	lsrs	r4, r5, #18
 808dc16:	9d07      	ldr	r5, [sp, #28]
 808dc18:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808dc1c:	9444      	str	r4, [sp, #272]	; 0x110
 808dc1e:	0cac      	lsrs	r4, r5, #18
 808dc20:	9d06      	ldr	r5, [sp, #24]
 808dc22:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808dc26:	9445      	str	r4, [sp, #276]	; 0x114
 808dc28:	ac42      	add	r4, sp, #264	; 0x108
 808dc2a:	cec0      	ldmia	r6, {r6, r7}
 808dc2c:	cc30      	ldmia	r4, {r4, r5}
 808dc2e:	4074      	eors	r4, r6
 808dc30:	9e07      	ldr	r6, [sp, #28]
 808dc32:	407d      	eors	r5, r7
 808dc34:	9f06      	ldr	r7, [sp, #24]
 808dc36:	05f6      	lsls	r6, r6, #23
 808dc38:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808dc3c:	9647      	str	r6, [sp, #284]	; 0x11c
 808dc3e:	05fe      	lsls	r6, r7, #23
 808dc40:	9f07      	ldr	r7, [sp, #28]
 808dc42:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808dc46:	9646      	str	r6, [sp, #280]	; 0x118
 808dc48:	ae46      	add	r6, sp, #280	; 0x118
 808dc4a:	cec0      	ldmia	r6, {r6, r7}
 808dc4c:	4066      	eors	r6, r4
 808dc4e:	1986      	adds	r6, r0, r6
 808dc50:	ea87 0705 	eor.w	r7, r7, r5
 808dc54:	eb41 0707 	adc.w	r7, r1, r7
 808dc58:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 808dc5c:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 808dc60:	e9dd 6700 	ldrd	r6, r7, [sp]
 808dc64:	1836      	adds	r6, r6, r0
 808dc66:	414f      	adcs	r7, r1
 808dc68:	9902      	ldr	r1, [sp, #8]
 808dc6a:	9803      	ldr	r0, [sp, #12]
 808dc6c:	0f09      	lsrs	r1, r1, #28
 808dc6e:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808dc72:	9148      	str	r1, [sp, #288]	; 0x120
 808dc74:	0f01      	lsrs	r1, r0, #28
 808dc76:	9802      	ldr	r0, [sp, #8]
 808dc78:	e9cd 6704 	strd	r6, r7, [sp, #16]
 808dc7c:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808dc80:	9149      	str	r1, [sp, #292]	; 0x124
 808dc82:	9903      	ldr	r1, [sp, #12]
 808dc84:	0789      	lsls	r1, r1, #30
 808dc86:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808dc8a:	914b      	str	r1, [sp, #300]	; 0x12c
 808dc8c:	0781      	lsls	r1, r0, #30
 808dc8e:	9803      	ldr	r0, [sp, #12]
 808dc90:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 808dc94:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808dc98:	914a      	str	r1, [sp, #296]	; 0x128
 808dc9a:	a948      	add	r1, sp, #288	; 0x120
 808dc9c:	e9d1 4500 	ldrd	r4, r5, [r1]
 808dca0:	a94a      	add	r1, sp, #296	; 0x128
 808dca2:	e9d1 0100 	ldrd	r0, r1, [r1]
 808dca6:	404d      	eors	r5, r1
 808dca8:	9903      	ldr	r1, [sp, #12]
 808dcaa:	4044      	eors	r4, r0
 808dcac:	9802      	ldr	r0, [sp, #8]
 808dcae:	0649      	lsls	r1, r1, #25
 808dcb0:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808dcb4:	914d      	str	r1, [sp, #308]	; 0x134
 808dcb6:	0641      	lsls	r1, r0, #25
 808dcb8:	9803      	ldr	r0, [sp, #12]
 808dcba:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808dcbe:	914c      	str	r1, [sp, #304]	; 0x130
 808dcc0:	a94c      	add	r1, sp, #304	; 0x130
 808dcc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 808dcc6:	4060      	eors	r0, r4
 808dcc8:	4069      	eors	r1, r5
 808dcca:	4604      	mov	r4, r0
 808dccc:	460d      	mov	r5, r1
 808dcce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808dcd2:	ea40 000a 	orr.w	r0, r0, sl
 808dcd6:	ea41 010b 	orr.w	r1, r1, fp
 808dcda:	4006      	ands	r6, r0
 808dcdc:	4630      	mov	r0, r6
 808dcde:	400f      	ands	r7, r1
 808dce0:	4639      	mov	r1, r7
 808dce2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 808dce6:	ea06 060a 	and.w	r6, r6, sl
 808dcea:	ea07 070b 	and.w	r7, r7, fp
 808dcee:	4306      	orrs	r6, r0
 808dcf0:	1930      	adds	r0, r6, r4
 808dcf2:	ea47 0701 	orr.w	r7, r7, r1
 808dcf6:	eb47 0105 	adc.w	r1, r7, r5
 808dcfa:	e9dd 451c 	ldrd	r4, r5, [sp, #112]	; 0x70
 808dcfe:	1824      	adds	r4, r4, r0
 808dd00:	414d      	adcs	r5, r1
 808dd02:	e9cd 4500 	strd	r4, r5, [sp]
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
 808dd06:	e952 010a 	ldrd	r0, r1, [r2, #-40]	; 0x28
 808dd0a:	e953 450a 	ldrd	r4, r5, [r3, #-40]	; 0x28
 808dd0e:	1900      	adds	r0, r0, r4
 808dd10:	4169      	adcs	r1, r5
 808dd12:	eb10 0008 	adds.w	r0, r0, r8
 808dd16:	eb41 0109 	adc.w	r1, r1, r9
 808dd1a:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 808dd1e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 808dd22:	ea88 0804 	eor.w	r8, r8, r4
 808dd26:	ea89 0905 	eor.w	r9, r9, r5
 808dd2a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 808dd2e:	ea04 0408 	and.w	r4, r4, r8
 808dd32:	46a0      	mov	r8, r4
 808dd34:	ea05 0509 	and.w	r5, r5, r9
 808dd38:	46a9      	mov	r9, r5
 808dd3a:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 808dd3e:	ea84 0408 	eor.w	r4, r4, r8
 808dd42:	eb10 0804 	adds.w	r8, r0, r4
 808dd46:	ea85 0509 	eor.w	r5, r5, r9
 808dd4a:	eb41 0905 	adc.w	r9, r1, r5
 808dd4e:	9904      	ldr	r1, [sp, #16]
 808dd50:	9805      	ldr	r0, [sp, #20]
 808dd52:	0b89      	lsrs	r1, r1, #14
 808dd54:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 808dd58:	914e      	str	r1, [sp, #312]	; 0x138
 808dd5a:	0b81      	lsrs	r1, r0, #14
 808dd5c:	9804      	ldr	r0, [sp, #16]
 808dd5e:	ac50      	add	r4, sp, #320	; 0x140
 808dd60:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 808dd64:	914f      	str	r1, [sp, #316]	; 0x13c
 808dd66:	0c81      	lsrs	r1, r0, #18
 808dd68:	9805      	ldr	r0, [sp, #20]
 808dd6a:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 808dd6e:	9150      	str	r1, [sp, #320]	; 0x140
 808dd70:	0c81      	lsrs	r1, r0, #18
 808dd72:	9804      	ldr	r0, [sp, #16]
 808dd74:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 808dd78:	9151      	str	r1, [sp, #324]	; 0x144
 808dd7a:	a94e      	add	r1, sp, #312	; 0x138
 808dd7c:	cc30      	ldmia	r4, {r4, r5}
 808dd7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 808dd82:	4060      	eors	r0, r4
 808dd84:	9c05      	ldr	r4, [sp, #20]
 808dd86:	4069      	eors	r1, r5
 808dd88:	9d04      	ldr	r5, [sp, #16]
 808dd8a:	05e4      	lsls	r4, r4, #23
 808dd8c:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 808dd90:	9453      	str	r4, [sp, #332]	; 0x14c
 808dd92:	05ec      	lsls	r4, r5, #23
 808dd94:	9d05      	ldr	r5, [sp, #20]
 808dd96:	e9dd 6700 	ldrd	r6, r7, [sp]
 808dd9a:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 808dd9e:	9452      	str	r4, [sp, #328]	; 0x148
 808dda0:	ac52      	add	r4, sp, #328	; 0x148
 808dda2:	cc30      	ldmia	r4, {r4, r5}
 808dda4:	4044      	eors	r4, r0
 808dda6:	eb18 0804 	adds.w	r8, r8, r4
 808ddaa:	ea85 0501 	eor.w	r5, r5, r1
 808ddae:	eb49 0905 	adc.w	r9, r9, r5
 808ddb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808ddb6:	eb10 0008 	adds.w	r0, r0, r8
 808ddba:	eb41 0109 	adc.w	r1, r1, r9
 808ddbe:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 808ddc2:	9900      	ldr	r1, [sp, #0]
 808ddc4:	9801      	ldr	r0, [sp, #4]
 808ddc6:	0f09      	lsrs	r1, r1, #28
 808ddc8:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808ddcc:	9154      	str	r1, [sp, #336]	; 0x150
 808ddce:	0f01      	lsrs	r1, r0, #28
 808ddd0:	9800      	ldr	r0, [sp, #0]
 808ddd2:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808ddd6:	9155      	str	r1, [sp, #340]	; 0x154
 808ddd8:	9901      	ldr	r1, [sp, #4]
 808ddda:	0789      	lsls	r1, r1, #30
 808dddc:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808dde0:	9157      	str	r1, [sp, #348]	; 0x15c
 808dde2:	0781      	lsls	r1, r0, #30
 808dde4:	9801      	ldr	r0, [sp, #4]
 808dde6:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808ddea:	9156      	str	r1, [sp, #344]	; 0x158
 808ddec:	a954      	add	r1, sp, #336	; 0x150
 808ddee:	e9d1 4500 	ldrd	r4, r5, [r1]
 808ddf2:	a956      	add	r1, sp, #344	; 0x158
 808ddf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 808ddf8:	404d      	eors	r5, r1
 808ddfa:	9901      	ldr	r1, [sp, #4]
 808ddfc:	4044      	eors	r4, r0
 808ddfe:	9800      	ldr	r0, [sp, #0]
 808de00:	0649      	lsls	r1, r1, #25
 808de02:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808de06:	9159      	str	r1, [sp, #356]	; 0x164
 808de08:	0641      	lsls	r1, r0, #25
 808de0a:	9801      	ldr	r0, [sp, #4]
 808de0c:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808de10:	9158      	str	r1, [sp, #352]	; 0x160
 808de12:	a958      	add	r1, sp, #352	; 0x160
 808de14:	e9d1 0100 	ldrd	r0, r1, [r1]
 808de18:	4060      	eors	r0, r4
 808de1a:	4604      	mov	r4, r0
 808de1c:	4069      	eors	r1, r5
 808de1e:	460d      	mov	r5, r1
 808de20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808de24:	4330      	orrs	r0, r6
 808de26:	4339      	orrs	r1, r7
 808de28:	ea00 060a 	and.w	r6, r0, sl
 808de2c:	ea01 070b 	and.w	r7, r1, fp
 808de30:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 808de34:	e9dd 0100 	ldrd	r0, r1, [sp]
 808de38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 808de3c:	4006      	ands	r6, r0
 808de3e:	400f      	ands	r7, r1
 808de40:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 808de44:	4330      	orrs	r0, r6
 808de46:	1900      	adds	r0, r0, r4
 808de48:	ea41 0107 	orr.w	r1, r1, r7
 808de4c:	4169      	adcs	r1, r5
 808de4e:	eb18 0800 	adds.w	r8, r8, r0
 808de52:	eb49 0901 	adc.w	r9, r9, r1
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
 808de56:	e953 4508 	ldrd	r4, r5, [r3, #-32]
 808de5a:	e952 0108 	ldrd	r0, r1, [r2, #-32]
 808de5e:	1900      	adds	r0, r0, r4
 808de60:	4169      	adcs	r1, r5
 808de62:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 808de66:	1824      	adds	r4, r4, r0
 808de68:	414d      	adcs	r5, r1
 808de6a:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 808de6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 808de72:	4046      	eors	r6, r0
 808de74:	4630      	mov	r0, r6
 808de76:	404f      	eors	r7, r1
 808de78:	4639      	mov	r1, r7
 808de7a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 808de7e:	4006      	ands	r6, r0
 808de80:	4630      	mov	r0, r6
 808de82:	400f      	ands	r7, r1
 808de84:	4639      	mov	r1, r7
 808de86:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 808de8a:	4046      	eors	r6, r0
 808de8c:	1930      	adds	r0, r6, r4
 808de8e:	ea87 0701 	eor.w	r7, r7, r1
 808de92:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 808de94:	eb47 0105 	adc.w	r1, r7, r5
 808de98:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 808de9a:	0ba4      	lsrs	r4, r4, #14
 808de9c:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808dea0:	945a      	str	r4, [sp, #360]	; 0x168
 808dea2:	0bac      	lsrs	r4, r5, #14
 808dea4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808dea6:	ae5c      	add	r6, sp, #368	; 0x170
 808dea8:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808deac:	945b      	str	r4, [sp, #364]	; 0x16c
 808deae:	0cac      	lsrs	r4, r5, #18
 808deb0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 808deb2:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808deb6:	945c      	str	r4, [sp, #368]	; 0x170
 808deb8:	0cac      	lsrs	r4, r5, #18
 808deba:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808debc:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808dec0:	945d      	str	r4, [sp, #372]	; 0x174
 808dec2:	ac5a      	add	r4, sp, #360	; 0x168
 808dec4:	cec0      	ldmia	r6, {r6, r7}
 808dec6:	cc30      	ldmia	r4, {r4, r5}
 808dec8:	4074      	eors	r4, r6
 808deca:	4626      	mov	r6, r4
 808decc:	407d      	eors	r5, r7
 808dece:	462f      	mov	r7, r5
 808ded0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 808ded2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808ded4:	05e4      	lsls	r4, r4, #23
 808ded6:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 808deda:	945f      	str	r4, [sp, #380]	; 0x17c
 808dedc:	05ec      	lsls	r4, r5, #23
 808dede:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 808dee0:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 808dee4:	945e      	str	r4, [sp, #376]	; 0x178
 808dee6:	ac5e      	add	r4, sp, #376	; 0x178
 808dee8:	cc30      	ldmia	r4, {r4, r5}
 808deea:	4074      	eors	r4, r6
 808deec:	1906      	adds	r6, r0, r4
 808deee:	ea85 0507 	eor.w	r5, r5, r7
 808def2:	eb41 0705 	adc.w	r7, r1, r5
 808def6:	eb16 000a 	adds.w	r0, r6, sl
 808defa:	eb47 010b 	adc.w	r1, r7, fp
 808defe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 808df02:	ea4f 7118 	mov.w	r1, r8, lsr #28
 808df06:	ea41 1109 	orr.w	r1, r1, r9, lsl #4
 808df0a:	9160      	str	r1, [sp, #384]	; 0x180
 808df0c:	ea4f 7119 	mov.w	r1, r9, lsr #28
 808df10:	ea41 1108 	orr.w	r1, r1, r8, lsl #4
 808df14:	9161      	str	r1, [sp, #388]	; 0x184
 808df16:	ea4f 7189 	mov.w	r1, r9, lsl #30
 808df1a:	ea41 0198 	orr.w	r1, r1, r8, lsr #2
 808df1e:	9163      	str	r1, [sp, #396]	; 0x18c
 808df20:	ea4f 7188 	mov.w	r1, r8, lsl #30
 808df24:	ea41 0199 	orr.w	r1, r1, r9, lsr #2
 808df28:	9162      	str	r1, [sp, #392]	; 0x188
 808df2a:	a960      	add	r1, sp, #384	; 0x180
 808df2c:	e9d1 4500 	ldrd	r4, r5, [r1]
 808df30:	a962      	add	r1, sp, #392	; 0x188
 808df32:	e9d1 0100 	ldrd	r0, r1, [r1]
 808df36:	404d      	eors	r5, r1
 808df38:	ea4f 6149 	mov.w	r1, r9, lsl #25
 808df3c:	ea41 11d8 	orr.w	r1, r1, r8, lsr #7
 808df40:	9165      	str	r1, [sp, #404]	; 0x194
 808df42:	ea4f 6148 	mov.w	r1, r8, lsl #25
 808df46:	ea41 11d9 	orr.w	r1, r1, r9, lsr #7
 808df4a:	4044      	eors	r4, r0
 808df4c:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 808df50:	9164      	str	r1, [sp, #400]	; 0x190
 808df52:	a964      	add	r1, sp, #400	; 0x190
 808df54:	e9d1 0100 	ldrd	r0, r1, [r1]
 808df58:	4060      	eors	r0, r4
 808df5a:	4604      	mov	r4, r0
 808df5c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 808df60:	e9dd ab00 	ldrd	sl, fp, [sp]
 808df64:	4069      	eors	r1, r5
 808df66:	460d      	mov	r5, r1
 808df68:	e9dd 0100 	ldrd	r0, r1, [sp]
 808df6c:	ea40 0008 	orr.w	r0, r0, r8
 808df70:	ea41 0109 	orr.w	r1, r1, r9
 808df74:	4006      	ands	r6, r0
 808df76:	ea0a 0a08 	and.w	sl, sl, r8
 808df7a:	ea46 000a 	orr.w	r0, r6, sl
 808df7e:	400f      	ands	r7, r1
 808df80:	ea0b 0b09 	and.w	fp, fp, r9
 808df84:	1900      	adds	r0, r0, r4
 808df86:	ea47 010b 	orr.w	r1, r7, fp
 808df8a:	4169      	adcs	r1, r5
 808df8c:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	; 0x70
 808df90:	eb1a 0a00 	adds.w	sl, sl, r0
 808df94:	eb4b 0b01 	adc.w	fp, fp, r1
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
 808df98:	e953 4506 	ldrd	r4, r5, [r3, #-24]
 808df9c:	e952 0106 	ldrd	r0, r1, [r2, #-24]
 808dfa0:	1900      	adds	r0, r0, r4
 808dfa2:	4169      	adcs	r1, r5
 808dfa4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 808dfa8:	1824      	adds	r4, r4, r0
 808dfaa:	414d      	adcs	r5, r1
 808dfac:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 808dfb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808dfb4:	4046      	eors	r6, r0
 808dfb6:	4630      	mov	r0, r6
 808dfb8:	404f      	eors	r7, r1
 808dfba:	4639      	mov	r1, r7
 808dfbc:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 808dfc0:	4006      	ands	r6, r0
 808dfc2:	4630      	mov	r0, r6
 808dfc4:	400f      	ands	r7, r1
 808dfc6:	4639      	mov	r1, r7
 808dfc8:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 808dfcc:	4046      	eors	r6, r0
 808dfce:	1930      	adds	r0, r6, r4
 808dfd0:	ea87 0701 	eor.w	r7, r7, r1
 808dfd4:	9c08      	ldr	r4, [sp, #32]
 808dfd6:	eb47 0105 	adc.w	r1, r7, r5
 808dfda:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808dfdc:	0ba4      	lsrs	r4, r4, #14
 808dfde:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808dfe2:	9466      	str	r4, [sp, #408]	; 0x198
 808dfe4:	0bac      	lsrs	r4, r5, #14
 808dfe6:	9d08      	ldr	r5, [sp, #32]
 808dfe8:	ae68      	add	r6, sp, #416	; 0x1a0
 808dfea:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808dfee:	9467      	str	r4, [sp, #412]	; 0x19c
 808dff0:	0cac      	lsrs	r4, r5, #18
 808dff2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808dff4:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808dff8:	9468      	str	r4, [sp, #416]	; 0x1a0
 808dffa:	0cac      	lsrs	r4, r5, #18
 808dffc:	9d08      	ldr	r5, [sp, #32]
 808dffe:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808e002:	9469      	str	r4, [sp, #420]	; 0x1a4
 808e004:	ac66      	add	r4, sp, #408	; 0x198
 808e006:	cec0      	ldmia	r6, {r6, r7}
 808e008:	cc30      	ldmia	r4, {r4, r5}
 808e00a:	4074      	eors	r4, r6
 808e00c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 808e00e:	407d      	eors	r5, r7
 808e010:	9f08      	ldr	r7, [sp, #32]
 808e012:	05f6      	lsls	r6, r6, #23
 808e014:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808e018:	966b      	str	r6, [sp, #428]	; 0x1ac
 808e01a:	05fe      	lsls	r6, r7, #23
 808e01c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 808e01e:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808e022:	966a      	str	r6, [sp, #424]	; 0x1a8
 808e024:	ae6a      	add	r6, sp, #424	; 0x1a8
 808e026:	cec0      	ldmia	r6, {r6, r7}
 808e028:	4066      	eors	r6, r4
 808e02a:	1986      	adds	r6, r0, r6
 808e02c:	ea87 0705 	eor.w	r7, r7, r5
 808e030:	eb41 0707 	adc.w	r7, r1, r7
 808e034:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808e038:	1980      	adds	r0, r0, r6
 808e03a:	4179      	adcs	r1, r7
 808e03c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 808e040:	ea4f 711a 	mov.w	r1, sl, lsr #28
 808e044:	ea41 110b 	orr.w	r1, r1, fp, lsl #4
 808e048:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 808e04c:	916c      	str	r1, [sp, #432]	; 0x1b0
 808e04e:	ea4f 711b 	mov.w	r1, fp, lsr #28
 808e052:	ea41 110a 	orr.w	r1, r1, sl, lsl #4
 808e056:	916d      	str	r1, [sp, #436]	; 0x1b4
 808e058:	ea4f 718b 	mov.w	r1, fp, lsl #30
 808e05c:	ea41 019a 	orr.w	r1, r1, sl, lsr #2
 808e060:	916f      	str	r1, [sp, #444]	; 0x1bc
 808e062:	ea4f 718a 	mov.w	r1, sl, lsl #30
 808e066:	ea41 019b 	orr.w	r1, r1, fp, lsr #2
 808e06a:	916e      	str	r1, [sp, #440]	; 0x1b8
 808e06c:	a96c      	add	r1, sp, #432	; 0x1b0
 808e06e:	e9d1 4500 	ldrd	r4, r5, [r1]
 808e072:	a96e      	add	r1, sp, #440	; 0x1b8
 808e074:	e9d1 0100 	ldrd	r0, r1, [r1]
 808e078:	404d      	eors	r5, r1
 808e07a:	ea4f 614b 	mov.w	r1, fp, lsl #25
 808e07e:	ea41 11da 	orr.w	r1, r1, sl, lsr #7
 808e082:	9171      	str	r1, [sp, #452]	; 0x1c4
 808e084:	ea4f 614a 	mov.w	r1, sl, lsl #25
 808e088:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
 808e08c:	4044      	eors	r4, r0
 808e08e:	9170      	str	r1, [sp, #448]	; 0x1c0
 808e090:	a970      	add	r1, sp, #448	; 0x1c0
 808e092:	e9d1 0100 	ldrd	r0, r1, [r1]
 808e096:	4060      	eors	r0, r4
 808e098:	4604      	mov	r4, r0
 808e09a:	e9dd 6700 	ldrd	r6, r7, [sp]
 808e09e:	4069      	eors	r1, r5
 808e0a0:	ea48 000a 	orr.w	r0, r8, sl
 808e0a4:	460d      	mov	r5, r1
 808e0a6:	4006      	ands	r6, r0
 808e0a8:	ea49 010b 	orr.w	r1, r9, fp
 808e0ac:	4630      	mov	r0, r6
 808e0ae:	400f      	ands	r7, r1
 808e0b0:	4639      	mov	r1, r7
 808e0b2:	ea08 060a 	and.w	r6, r8, sl
 808e0b6:	4306      	orrs	r6, r0
 808e0b8:	ea09 070b 	and.w	r7, r9, fp
 808e0bc:	1930      	adds	r0, r6, r4
 808e0be:	ea47 0701 	orr.w	r7, r7, r1
 808e0c2:	eb47 0105 	adc.w	r1, r7, r5
 808e0c6:	e9dd 451c 	ldrd	r4, r5, [sp, #112]	; 0x70
 808e0ca:	1824      	adds	r4, r4, r0
 808e0cc:	414d      	adcs	r5, r1
 808e0ce:	e9cd 4502 	strd	r4, r5, [sp, #8]
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 808e0d2:	e952 0104 	ldrd	r0, r1, [r2, #-16]
 808e0d6:	e953 4504 	ldrd	r4, r5, [r3, #-16]
 808e0da:	1900      	adds	r0, r0, r4
 808e0dc:	4169      	adcs	r1, r5
 808e0de:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 808e0e2:	1824      	adds	r4, r4, r0
 808e0e4:	414d      	adcs	r5, r1
 808e0e6:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 808e0ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 808e0ee:	4070      	eors	r0, r6
 808e0f0:	4079      	eors	r1, r7
 808e0f2:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 808e0f6:	4006      	ands	r6, r0
 808e0f8:	4630      	mov	r0, r6
 808e0fa:	400f      	ands	r7, r1
 808e0fc:	4639      	mov	r1, r7
 808e0fe:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 808e102:	4046      	eors	r6, r0
 808e104:	19a0      	adds	r0, r4, r6
 808e106:	ea87 0701 	eor.w	r7, r7, r1
 808e10a:	9c06      	ldr	r4, [sp, #24]
 808e10c:	eb45 0107 	adc.w	r1, r5, r7
 808e110:	9d07      	ldr	r5, [sp, #28]
 808e112:	0ba4      	lsrs	r4, r4, #14
 808e114:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808e118:	9472      	str	r4, [sp, #456]	; 0x1c8
 808e11a:	0bac      	lsrs	r4, r5, #14
 808e11c:	9d06      	ldr	r5, [sp, #24]
 808e11e:	ae74      	add	r6, sp, #464	; 0x1d0
 808e120:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 808e124:	9473      	str	r4, [sp, #460]	; 0x1cc
 808e126:	0cac      	lsrs	r4, r5, #18
 808e128:	9d07      	ldr	r5, [sp, #28]
 808e12a:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808e12e:	9474      	str	r4, [sp, #464]	; 0x1d0
 808e130:	0cac      	lsrs	r4, r5, #18
 808e132:	9d06      	ldr	r5, [sp, #24]
 808e134:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 808e138:	9475      	str	r4, [sp, #468]	; 0x1d4
 808e13a:	ac72      	add	r4, sp, #456	; 0x1c8
 808e13c:	cec0      	ldmia	r6, {r6, r7}
 808e13e:	cc30      	ldmia	r4, {r4, r5}
 808e140:	4074      	eors	r4, r6
 808e142:	9e07      	ldr	r6, [sp, #28]
 808e144:	407d      	eors	r5, r7
 808e146:	9f06      	ldr	r7, [sp, #24]
 808e148:	05f6      	lsls	r6, r6, #23
 808e14a:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808e14e:	9677      	str	r6, [sp, #476]	; 0x1dc
 808e150:	05fe      	lsls	r6, r7, #23
 808e152:	9f07      	ldr	r7, [sp, #28]
 808e154:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 808e158:	9676      	str	r6, [sp, #472]	; 0x1d8
 808e15a:	ae76      	add	r6, sp, #472	; 0x1d8
 808e15c:	cec0      	ldmia	r6, {r6, r7}
 808e15e:	4066      	eors	r6, r4
 808e160:	1986      	adds	r6, r0, r6
 808e162:	ea87 0705 	eor.w	r7, r7, r5
 808e166:	eb41 0707 	adc.w	r7, r1, r7
 808e16a:	e9dd 0100 	ldrd	r0, r1, [sp]
 808e16e:	1980      	adds	r0, r0, r6
 808e170:	4179      	adcs	r1, r7
 808e172:	e9cd 0104 	strd	r0, r1, [sp, #16]
 808e176:	9902      	ldr	r1, [sp, #8]
 808e178:	9803      	ldr	r0, [sp, #12]
 808e17a:	0f09      	lsrs	r1, r1, #28
 808e17c:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808e180:	9178      	str	r1, [sp, #480]	; 0x1e0
 808e182:	0f01      	lsrs	r1, r0, #28
 808e184:	9802      	ldr	r0, [sp, #8]
 808e186:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 808e18a:	9179      	str	r1, [sp, #484]	; 0x1e4
 808e18c:	9903      	ldr	r1, [sp, #12]
 808e18e:	0789      	lsls	r1, r1, #30
 808e190:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808e194:	917b      	str	r1, [sp, #492]	; 0x1ec
 808e196:	0781      	lsls	r1, r0, #30
 808e198:	9803      	ldr	r0, [sp, #12]
 808e19a:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 808e19e:	917a      	str	r1, [sp, #488]	; 0x1e8
 808e1a0:	a978      	add	r1, sp, #480	; 0x1e0
 808e1a2:	e9d1 4500 	ldrd	r4, r5, [r1]
 808e1a6:	a97a      	add	r1, sp, #488	; 0x1e8
 808e1a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 808e1ac:	404d      	eors	r5, r1
 808e1ae:	9903      	ldr	r1, [sp, #12]
 808e1b0:	4044      	eors	r4, r0
 808e1b2:	9802      	ldr	r0, [sp, #8]
 808e1b4:	0649      	lsls	r1, r1, #25
 808e1b6:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808e1ba:	917d      	str	r1, [sp, #500]	; 0x1f4
 808e1bc:	0641      	lsls	r1, r0, #25
 808e1be:	9803      	ldr	r0, [sp, #12]
 808e1c0:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 808e1c4:	917c      	str	r1, [sp, #496]	; 0x1f0
 808e1c6:	a97c      	add	r1, sp, #496	; 0x1f0
 808e1c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 808e1cc:	4060      	eors	r0, r4
 808e1ce:	4069      	eors	r1, r5
 808e1d0:	e9cd 0100 	strd	r0, r1, [sp]
 808e1d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808e1d8:	ea40 000a 	orr.w	r0, r0, sl
 808e1dc:	ea41 010b 	orr.w	r1, r1, fp
 808e1e0:	ea00 0408 	and.w	r4, r0, r8
 808e1e4:	ea01 0509 	and.w	r5, r1, r9
 808e1e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 808e1ec:	ea00 000a 	and.w	r0, r0, sl
 808e1f0:	ea01 010b 	and.w	r1, r1, fp
 808e1f4:	4304      	orrs	r4, r0
 808e1f6:	430d      	orrs	r5, r1
 808e1f8:	4620      	mov	r0, r4
 808e1fa:	4629      	mov	r1, r5
 808e1fc:	e9dd 4500 	ldrd	r4, r5, [sp]
 808e200:	1824      	adds	r4, r4, r0
 808e202:	414d      	adcs	r5, r1
 808e204:	19a4      	adds	r4, r4, r6
 808e206:	417d      	adcs	r5, r7
    }
    while( i < 80 );
 808e208:	459c      	cmp	ip, r3
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 808e20a:	e9cd 4500 	strd	r4, r5, [sp]
    }
    while( i < 80 );
 808e20e:	f47f ab05 	bne.w	808d81c <mbedtls_internal_sha512_process+0x1fc>

    ctx->state[0] += A;
 808e212:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 808e216:	4623      	mov	r3, r4
 808e218:	18c0      	adds	r0, r0, r3
 808e21a:	4169      	adcs	r1, r5
    ctx->state[1] += B;
 808e21c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808e220:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 808e224:	18a4      	adds	r4, r4, r2
 808e226:	415d      	adcs	r5, r3
 808e228:	e9ce 4506 	strd	r4, r5, [lr, #24]
    ctx->state[2] += C;
 808e22c:	e9dd 3410 	ldrd	r3, r4, [sp, #64]	; 0x40
 808e230:	eb13 030a 	adds.w	r3, r3, sl
 808e234:	eb44 040b 	adc.w	r4, r4, fp
 808e238:	469a      	mov	sl, r3
    ctx->state[3] += D;
    ctx->state[4] += E;
 808e23a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    }
    while( i < 80 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
 808e23e:	46a3      	mov	fp, r4
    ctx->state[3] += D;
    ctx->state[4] += E;
 808e240:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
    }
    while( i < 80 );

    ctx->state[0] += A;
 808e244:	e9ce 0104 	strd	r0, r1, [lr, #16]
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
 808e248:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 808e24c:	eb10 0008 	adds.w	r0, r0, r8
 808e250:	eb41 0109 	adc.w	r1, r1, r9
    ctx->state[4] += E;
 808e254:	18a4      	adds	r4, r4, r2
 808e256:	415d      	adcs	r5, r3
 808e258:	e9ce 450c 	strd	r4, r5, [lr, #48]	; 0x30
    ctx->state[5] += F;
 808e25c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 808e260:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
 808e264:	18a4      	adds	r4, r4, r2
 808e266:	415d      	adcs	r5, r3
 808e268:	e9ce 450e 	strd	r4, r5, [lr, #56]	; 0x38
    ctx->state[6] += G;
 808e26c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 808e270:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
 808e274:	18a4      	adds	r4, r4, r2
 808e276:	415d      	adcs	r5, r3
    while( i < 80 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
 808e278:	e9ce 010a 	strd	r0, r1, [lr, #40]	; 0x28
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
    ctx->state[7] += H;
 808e27c:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
 808e280:	e9ce 4510 	strd	r4, r5, [lr, #64]	; 0x40
    ctx->state[7] += H;
 808e284:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 808e288:	18c0      	adds	r0, r0, r3
 808e28a:	4161      	adcs	r1, r4
 808e28c:	e9ce 0112 	strd	r0, r1, [lr, #72]	; 0x48

    return( 0 );
}
 808e290:	2000      	movs	r0, #0
    }
    while( i < 80 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
 808e292:	e9ce ab08 	strd	sl, fp, [lr, #32]
    ctx->state[5] += F;
    ctx->state[6] += G;
    ctx->state[7] += H;

    return( 0 );
}
 808e296:	f20d 4d7c 	addw	sp, sp, #1148	; 0x47c
 808e29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808e29e:	bf00      	nop

0808e2a0 <mbedtls_sha512_update_ret>:
 * SHA-512 process buffer
 */
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 808e2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808e2a4:	4604      	mov	r4, r0
 808e2a6:	460e      	mov	r6, r1
    int ret;
    size_t fill;
    unsigned int left;

    if( ilen == 0 )
 808e2a8:	4615      	mov	r5, r2
 808e2aa:	2a00      	cmp	r2, #0
 808e2ac:	d03d      	beq.n	808e32a <mbedtls_sha512_update_ret+0x8a>
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
 808e2ae:	e9d0 2300 	ldrd	r2, r3, [r0]
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
 808e2b2:	f04f 0900 	mov.w	r9, #0
    unsigned int left;

    if( ilen == 0 )
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
 808e2b6:	f002 007f 	and.w	r0, r2, #127	; 0x7f
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
 808e2ba:	1952      	adds	r2, r2, r5
 808e2bc:	eb43 0309 	adc.w	r3, r3, r9

    if( ctx->total[0] < (uint64_t) ilen )
 808e2c0:	454b      	cmp	r3, r9
 808e2c2:	bf08      	it	eq
 808e2c4:	42aa      	cmpeq	r2, r5
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
 808e2c6:	e9c4 2300 	strd	r2, r3, [r4]

    if( ctx->total[0] < (uint64_t) ilen )
 808e2ca:	d206      	bcs.n	808e2da <mbedtls_sha512_update_ret+0x3a>
        ctx->total[1]++;
 808e2cc:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 808e2d0:	3201      	adds	r2, #1
 808e2d2:	f143 0300 	adc.w	r3, r3, #0
 808e2d6:	e9c4 2302 	strd	r2, r3, [r4, #8]

    if( left && ilen >= fill )
 808e2da:	b188      	cbz	r0, 808e300 <mbedtls_sha512_update_ret+0x60>

    if( ilen == 0 )
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
    fill = 128 - left;
 808e2dc:	f1c0 0780 	rsb	r7, r0, #128	; 0x80
    ctx->total[0] += (uint64_t) ilen;

    if( ctx->total[0] < (uint64_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
 808e2e0:	42bd      	cmp	r5, r7
 808e2e2:	d31c      	bcc.n	808e31e <mbedtls_sha512_update_ret+0x7e>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 808e2e4:	f104 0850 	add.w	r8, r4, #80	; 0x50
 808e2e8:	4631      	mov	r1, r6
 808e2ea:	463a      	mov	r2, r7
 808e2ec:	4440      	add	r0, r8
 808e2ee:	f005 fe38 	bl	8093f62 <memcpy>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 808e2f2:	4641      	mov	r1, r8
 808e2f4:	4620      	mov	r0, r4
 808e2f6:	f7ff f993 	bl	808d620 <mbedtls_internal_sha512_process>
 808e2fa:	b9b8      	cbnz	r0, 808e32c <mbedtls_sha512_update_ret+0x8c>
            return( ret );

        input += fill;
 808e2fc:	443e      	add	r6, r7
        ilen  -= fill;
 808e2fe:	1bed      	subs	r5, r5, r7
 * SHA-512 process buffer
 */
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 808e300:	462f      	mov	r7, r5
 808e302:	1be9      	subs	r1, r5, r7
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 128 )
 808e304:	2f7f      	cmp	r7, #127	; 0x7f
 808e306:	4431      	add	r1, r6
 808e308:	d905      	bls.n	808e316 <mbedtls_sha512_update_ret+0x76>
    {
        if( ( ret = mbedtls_internal_sha512_process( ctx, input ) ) != 0 )
 808e30a:	4620      	mov	r0, r4
 808e30c:	f7ff f988 	bl	808d620 <mbedtls_internal_sha512_process>
 808e310:	b960      	cbnz	r0, 808e32c <mbedtls_sha512_update_ret+0x8c>
            return( ret );

        input += 128;
        ilen  -= 128;
 808e312:	3f80      	subs	r7, #128	; 0x80
 808e314:	e7f5      	b.n	808e302 <mbedtls_sha512_update_ret+0x62>
    }

    if( ilen > 0 )
 808e316:	b147      	cbz	r7, 808e32a <mbedtls_sha512_update_ret+0x8a>
 808e318:	463d      	mov	r5, r7
 808e31a:	460e      	mov	r6, r1
 808e31c:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 808e31e:	3450      	adds	r4, #80	; 0x50
 808e320:	462a      	mov	r2, r5
 808e322:	4631      	mov	r1, r6
 808e324:	4420      	add	r0, r4
 808e326:	f005 fe1c 	bl	8093f62 <memcpy>

    return( 0 );
 808e32a:	2000      	movs	r0, #0
}
 808e32c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0808e330 <mbedtls_sha512_finish_ret>:
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
 808e330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808e332:	4604      	mov	r4, r0
    uint64_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;
 808e334:	6803      	ldr	r3, [r0, #0]

    ctx->buffer[used++] = 0x80;
 808e336:	2280      	movs	r2, #128	; 0x80
    uint64_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;
 808e338:	f003 037f 	and.w	r3, r3, #127	; 0x7f

    ctx->buffer[used++] = 0x80;
 808e33c:	1c58      	adds	r0, r3, #1

    if( used <= 112 )
 808e33e:	2870      	cmp	r0, #112	; 0x70
    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;

    ctx->buffer[used++] = 0x80;
 808e340:	4423      	add	r3, r4
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
 808e342:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;

    ctx->buffer[used++] = 0x80;
 808e344:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 808e348:	f104 0650 	add.w	r6, r4, #80	; 0x50

    if( used <= 112 )
 808e34c:	d804      	bhi.n	808e358 <mbedtls_sha512_finish_ret+0x28>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 112 - used );
 808e34e:	f1c0 0270 	rsb	r2, r0, #112	; 0x70
 808e352:	2100      	movs	r1, #0
 808e354:	4430      	add	r0, r6
 808e356:	e00f      	b.n	808e378 <mbedtls_sha512_finish_ret+0x48>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 128 - used );
 808e358:	f1c0 0280 	rsb	r2, r0, #128	; 0x80
 808e35c:	2100      	movs	r1, #0
 808e35e:	4430      	add	r0, r6
 808e360:	f005 fe25 	bl	8093fae <memset>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 808e364:	4631      	mov	r1, r6
 808e366:	4620      	mov	r0, r4
 808e368:	f7ff f95a 	bl	808d620 <mbedtls_internal_sha512_process>
 808e36c:	2800      	cmp	r0, #0
 808e36e:	f040 8111 	bne.w	808e594 <mbedtls_sha512_finish_ret+0x264>
            return( ret );

        memset( ctx->buffer, 0, 112 );
 808e372:	4601      	mov	r1, r0
 808e374:	4630      	mov	r0, r6
 808e376:	2270      	movs	r2, #112	; 0x70
 808e378:	f005 fe19 	bl	8093fae <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
 808e37c:	e894 4080 	ldmia.w	r4, {r7, lr}
         | ( ctx->total[1] <<  3 );
 808e380:	68e3      	ldr	r3, [r4, #12]
 808e382:	68a2      	ldr	r2, [r4, #8]
 808e384:	00d9      	lsls	r1, r3, #3
 808e386:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 808e38a:	2300      	movs	r3, #0
 808e38c:	4319      	orrs	r1, r3
 808e38e:	00d0      	lsls	r0, r2, #3
 808e390:	ea4f 725e 	mov.w	r2, lr, lsr #29
 808e394:	4310      	orrs	r0, r2
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 808e396:	0e0a      	lsrs	r2, r1, #24
 808e398:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
 808e39c:	0c0a      	lsrs	r2, r1, #16
 808e39e:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
 808e3a2:	0a0a      	lsrs	r2, r1, #8
 808e3a4:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
 808e3a8:	0e02      	lsrs	r2, r0, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 808e3aa:	ea4f 03ce 	mov.w	r3, lr, lsl #3

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 808e3ae:	f884 20c4 	strb.w	r2, [r4, #196]	; 0xc4
 808e3b2:	0c02      	lsrs	r2, r0, #16
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 808e3b4:	ea43 7357 	orr.w	r3, r3, r7, lsr #29

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 808e3b8:	f884 20c5 	strb.w	r2, [r4, #197]	; 0xc5
 808e3bc:	0a02      	lsrs	r2, r0, #8
 808e3be:	f884 20c6 	strb.w	r2, [r4, #198]	; 0xc6
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 808e3c2:	0e1a      	lsrs	r2, r3, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 808e3c4:	00ff      	lsls	r7, r7, #3

    PUT_UINT64_BE( high, ctx->buffer, 112 );
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 808e3c6:	f884 20c8 	strb.w	r2, [r4, #200]	; 0xc8
 808e3ca:	0c1a      	lsrs	r2, r3, #16
 808e3cc:	f884 20c9 	strb.w	r2, [r4, #201]	; 0xc9
 808e3d0:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb
 808e3d4:	0a1a      	lsrs	r2, r3, #8
 808e3d6:	0e3b      	lsrs	r3, r7, #24
 808e3d8:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
 808e3dc:	0c3b      	lsrs	r3, r7, #16
 808e3de:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
 808e3e2:	0a3b      	lsrs	r3, r7, #8
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 808e3e4:	f884 10c3 	strb.w	r1, [r4, #195]	; 0xc3
 808e3e8:	f884 00c7 	strb.w	r0, [r4, #199]	; 0xc7
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 808e3ec:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
 808e3f0:	f884 20ca 	strb.w	r2, [r4, #202]	; 0xca
 808e3f4:	f884 70cf 	strb.w	r7, [r4, #207]	; 0xcf

    if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 808e3f8:	4631      	mov	r1, r6
 808e3fa:	4620      	mov	r0, r4
 808e3fc:	f7ff f910 	bl	808d620 <mbedtls_internal_sha512_process>
 808e400:	4603      	mov	r3, r0
 808e402:	2800      	cmp	r0, #0
 808e404:	f040 80c5 	bne.w	808e592 <mbedtls_sha512_finish_ret+0x262>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT64_BE( ctx->state[0], output,  0 );
 808e408:	7de2      	ldrb	r2, [r4, #23]
 808e40a:	702a      	strb	r2, [r5, #0]
 808e40c:	8ae2      	ldrh	r2, [r4, #22]
 808e40e:	706a      	strb	r2, [r5, #1]
 808e410:	6962      	ldr	r2, [r4, #20]
 808e412:	0a12      	lsrs	r2, r2, #8
 808e414:	70aa      	strb	r2, [r5, #2]
 808e416:	6962      	ldr	r2, [r4, #20]
 808e418:	70ea      	strb	r2, [r5, #3]
 808e41a:	7ce2      	ldrb	r2, [r4, #19]
 808e41c:	712a      	strb	r2, [r5, #4]
 808e41e:	8a62      	ldrh	r2, [r4, #18]
 808e420:	716a      	strb	r2, [r5, #5]
 808e422:	6922      	ldr	r2, [r4, #16]
 808e424:	0a12      	lsrs	r2, r2, #8
 808e426:	71aa      	strb	r2, [r5, #6]
 808e428:	6922      	ldr	r2, [r4, #16]
 808e42a:	71ea      	strb	r2, [r5, #7]
    PUT_UINT64_BE( ctx->state[1], output,  8 );
 808e42c:	7fe2      	ldrb	r2, [r4, #31]
 808e42e:	722a      	strb	r2, [r5, #8]
 808e430:	8be2      	ldrh	r2, [r4, #30]
 808e432:	726a      	strb	r2, [r5, #9]
 808e434:	69e2      	ldr	r2, [r4, #28]
 808e436:	0a12      	lsrs	r2, r2, #8
 808e438:	72aa      	strb	r2, [r5, #10]
 808e43a:	69e2      	ldr	r2, [r4, #28]
 808e43c:	72ea      	strb	r2, [r5, #11]
 808e43e:	7ee2      	ldrb	r2, [r4, #27]
 808e440:	732a      	strb	r2, [r5, #12]
 808e442:	8b62      	ldrh	r2, [r4, #26]
 808e444:	736a      	strb	r2, [r5, #13]
 808e446:	69a2      	ldr	r2, [r4, #24]
 808e448:	0a12      	lsrs	r2, r2, #8
 808e44a:	73aa      	strb	r2, [r5, #14]
 808e44c:	69a2      	ldr	r2, [r4, #24]
 808e44e:	73ea      	strb	r2, [r5, #15]
    PUT_UINT64_BE( ctx->state[2], output, 16 );
 808e450:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 808e454:	742a      	strb	r2, [r5, #16]
 808e456:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 808e458:	746a      	strb	r2, [r5, #17]
 808e45a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 808e45c:	0a12      	lsrs	r2, r2, #8
 808e45e:	74aa      	strb	r2, [r5, #18]
 808e460:	6a62      	ldr	r2, [r4, #36]	; 0x24
 808e462:	74ea      	strb	r2, [r5, #19]
 808e464:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 808e468:	752a      	strb	r2, [r5, #20]
 808e46a:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 808e46c:	756a      	strb	r2, [r5, #21]
 808e46e:	6a22      	ldr	r2, [r4, #32]
 808e470:	0a12      	lsrs	r2, r2, #8
 808e472:	75aa      	strb	r2, [r5, #22]
 808e474:	6a22      	ldr	r2, [r4, #32]
 808e476:	75ea      	strb	r2, [r5, #23]
    PUT_UINT64_BE( ctx->state[3], output, 24 );
 808e478:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 808e47c:	762a      	strb	r2, [r5, #24]
 808e47e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 808e480:	766a      	strb	r2, [r5, #25]
 808e482:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808e484:	0a12      	lsrs	r2, r2, #8
 808e486:	76aa      	strb	r2, [r5, #26]
 808e488:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808e48a:	76ea      	strb	r2, [r5, #27]
 808e48c:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
 808e490:	772a      	strb	r2, [r5, #28]
 808e492:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 808e494:	776a      	strb	r2, [r5, #29]
 808e496:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 808e498:	0a12      	lsrs	r2, r2, #8
 808e49a:	77aa      	strb	r2, [r5, #30]
 808e49c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 808e49e:	77ea      	strb	r2, [r5, #31]
    PUT_UINT64_BE( ctx->state[4], output, 32 );
 808e4a0:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
 808e4a4:	f885 2020 	strb.w	r2, [r5, #32]
 808e4a8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 808e4aa:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
 808e4ae:	6b62      	ldr	r2, [r4, #52]	; 0x34
 808e4b0:	0a12      	lsrs	r2, r2, #8
 808e4b2:	f885 2022 	strb.w	r2, [r5, #34]	; 0x22
 808e4b6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 808e4b8:	f885 2023 	strb.w	r2, [r5, #35]	; 0x23
 808e4bc:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
 808e4c0:	f885 2024 	strb.w	r2, [r5, #36]	; 0x24
 808e4c4:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 808e4c6:	f885 2025 	strb.w	r2, [r5, #37]	; 0x25
 808e4ca:	6b22      	ldr	r2, [r4, #48]	; 0x30
 808e4cc:	0a12      	lsrs	r2, r2, #8
 808e4ce:	f885 2026 	strb.w	r2, [r5, #38]	; 0x26
 808e4d2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 808e4d4:	f885 2027 	strb.w	r2, [r5, #39]	; 0x27
    PUT_UINT64_BE( ctx->state[5], output, 40 );
 808e4d8:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 808e4dc:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
 808e4e0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 808e4e2:	f885 2029 	strb.w	r2, [r5, #41]	; 0x29
 808e4e6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 808e4e8:	0a12      	lsrs	r2, r2, #8
 808e4ea:	f885 202a 	strb.w	r2, [r5, #42]	; 0x2a
 808e4ee:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 808e4f0:	f885 202b 	strb.w	r2, [r5, #43]	; 0x2b
 808e4f4:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
 808e4f8:	f885 202c 	strb.w	r2, [r5, #44]	; 0x2c
 808e4fc:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 808e4fe:	f885 202d 	strb.w	r2, [r5, #45]	; 0x2d
 808e502:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 808e504:	0a12      	lsrs	r2, r2, #8
 808e506:	f885 202e 	strb.w	r2, [r5, #46]	; 0x2e
 808e50a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 808e50c:	f885 202f 	strb.w	r2, [r5, #47]	; 0x2f

    if( ctx->is384 == 0 )
 808e510:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
 808e514:	2800      	cmp	r0, #0
 808e516:	d13c      	bne.n	808e592 <mbedtls_sha512_finish_ret+0x262>
    {
        PUT_UINT64_BE( ctx->state[6], output, 48 );
 808e518:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 808e51c:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 808e520:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 808e524:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
 808e528:	6c63      	ldr	r3, [r4, #68]	; 0x44
 808e52a:	0a1b      	lsrs	r3, r3, #8
 808e52c:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
 808e530:	6c63      	ldr	r3, [r4, #68]	; 0x44
 808e532:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
 808e536:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 808e53a:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 808e53e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 808e542:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
 808e546:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808e548:	0a1b      	lsrs	r3, r3, #8
 808e54a:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 808e54e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808e550:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
        PUT_UINT64_BE( ctx->state[7], output, 56 );
 808e554:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
 808e558:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 808e55c:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 808e560:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
 808e564:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 808e566:	0a1b      	lsrs	r3, r3, #8
 808e568:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
 808e56c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 808e56e:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
 808e572:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 808e576:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
 808e57a:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 808e57e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
 808e582:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 808e584:	0a1b      	lsrs	r3, r3, #8
 808e586:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
 808e58a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 808e58c:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
 808e590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    return( 0 );
 808e592:	4618      	mov	r0, r3
}
 808e594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808e596 <mbedtls_sha512_ret>:
 */
int mbedtls_sha512_ret( const unsigned char *input,
                    size_t ilen,
                    unsigned char output[64],
                    int is384 )
{
 808e596:	b5f0      	push	{r4, r5, r6, r7, lr}
 808e598:	461f      	mov	r7, r3
 808e59a:	b0b7      	sub	sp, #220	; 0xdc
 808e59c:	4605      	mov	r5, r0
    int ret;
    mbedtls_sha512_context ctx;

    mbedtls_sha512_init( &ctx );
 808e59e:	4668      	mov	r0, sp
 */
int mbedtls_sha512_ret( const unsigned char *input,
                    size_t ilen,
                    unsigned char output[64],
                    int is384 )
{
 808e5a0:	460e      	mov	r6, r1
 808e5a2:	4614      	mov	r4, r2
    int ret;
    mbedtls_sha512_context ctx;

    mbedtls_sha512_init( &ctx );
 808e5a4:	f7fe ff8c 	bl	808d4c0 <mbedtls_sha512_init>

    if( ( ret = mbedtls_sha512_starts_ret( &ctx, is384 ) ) != 0 )
 808e5a8:	4639      	mov	r1, r7
 808e5aa:	4668      	mov	r0, sp
 808e5ac:	f7fe ff9c 	bl	808d4e8 <mbedtls_sha512_starts_ret>
 808e5b0:	4601      	mov	r1, r0
 808e5b2:	b958      	cbnz	r0, 808e5cc <mbedtls_sha512_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha512_update_ret( &ctx, input, ilen ) ) != 0 )
 808e5b4:	4629      	mov	r1, r5
 808e5b6:	4632      	mov	r2, r6
 808e5b8:	4668      	mov	r0, sp
 808e5ba:	f7ff fe71 	bl	808e2a0 <mbedtls_sha512_update_ret>
 808e5be:	4601      	mov	r1, r0
 808e5c0:	b920      	cbnz	r0, 808e5cc <mbedtls_sha512_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha512_finish_ret( &ctx, output ) ) != 0 )
 808e5c2:	4621      	mov	r1, r4
 808e5c4:	4668      	mov	r0, sp
 808e5c6:	f7ff feb3 	bl	808e330 <mbedtls_sha512_finish_ret>
 808e5ca:	4601      	mov	r1, r0
        goto exit;

exit:
    mbedtls_sha512_free( &ctx );
 808e5cc:	4668      	mov	r0, sp
 808e5ce:	f7fe ff7b 	bl	808d4c8 <mbedtls_sha512_free>

    return( ret );
}
 808e5d2:	4608      	mov	r0, r1
 808e5d4:	b037      	add	sp, #220	; 0xdc
 808e5d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808e5d8 <mbedtls_pem_init>:
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
}

void mbedtls_pem_init( mbedtls_pem_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_pem_context ) );
 808e5d8:	2300      	movs	r3, #0
 808e5da:	6003      	str	r3, [r0, #0]
 808e5dc:	6043      	str	r3, [r0, #4]
 808e5de:	6083      	str	r3, [r0, #8]
 808e5e0:	4770      	bx	lr
	...

0808e5e4 <mbedtls_pem_read_buffer>:
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

int mbedtls_pem_read_buffer( mbedtls_pem_context *ctx, const char *header, const char *footer,
                     const unsigned char *data, const unsigned char *pwd,
                     size_t pwdlen, size_t *use_len )
{
 808e5e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808e5e8:	4689      	mov	r9, r1
 808e5ea:	b085      	sub	sp, #20
 808e5ec:	4690      	mov	r8, r2
 808e5ee:	461f      	mov	r7, r3
    ((void) pwd);
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
 808e5f0:	4606      	mov	r6, r0
 808e5f2:	2800      	cmp	r0, #0
 808e5f4:	d067      	beq.n	808e6c6 <mbedtls_pem_read_buffer+0xe2>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );

    s1 = (unsigned char *) strstr( (const char *) data, header );
 808e5f6:	4618      	mov	r0, r3
 808e5f8:	f005 fd3f 	bl	809407a <strstr>

    if( s1 == NULL )
 808e5fc:	4604      	mov	r4, r0
 808e5fe:	2800      	cmp	r0, #0
 808e600:	d063      	beq.n	808e6ca <mbedtls_pem_read_buffer+0xe6>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s2 = (unsigned char *) strstr( (const char *) data, footer );
 808e602:	4641      	mov	r1, r8
 808e604:	4638      	mov	r0, r7
 808e606:	f005 fd38 	bl	809407a <strstr>

    if( s2 == NULL || s2 <= s1 )
 808e60a:	4605      	mov	r5, r0
 808e60c:	2800      	cmp	r0, #0
 808e60e:	d05c      	beq.n	808e6ca <mbedtls_pem_read_buffer+0xe6>
 808e610:	4284      	cmp	r4, r0
 808e612:	d25a      	bcs.n	808e6ca <mbedtls_pem_read_buffer+0xe6>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
 808e614:	4648      	mov	r0, r9
 808e616:	f005 fd00 	bl	809401a <strlen>
    if( *s1 == ' '  ) s1++;
 808e61a:	5c22      	ldrb	r2, [r4, r0]
    s2 = (unsigned char *) strstr( (const char *) data, footer );

    if( s2 == NULL || s2 <= s1 )
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
 808e61c:	1823      	adds	r3, r4, r0
    if( *s1 == ' '  ) s1++;
 808e61e:	2a20      	cmp	r2, #32
 808e620:	bf08      	it	eq
 808e622:	3301      	addeq	r3, #1
    if( *s1 == '\r' ) s1++;
 808e624:	781a      	ldrb	r2, [r3, #0]
 808e626:	2a0d      	cmp	r2, #13
 808e628:	bf08      	it	eq
 808e62a:	3301      	addeq	r3, #1
    if( *s1 == '\n' ) s1++;
 808e62c:	781a      	ldrb	r2, [r3, #0]
 808e62e:	2a0a      	cmp	r2, #10
 808e630:	d14b      	bne.n	808e6ca <mbedtls_pem_read_buffer+0xe6>
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
 808e632:	4640      	mov	r0, r8
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
    if( *s1 == ' '  ) s1++;
    if( *s1 == '\r' ) s1++;
    if( *s1 == '\n' ) s1++;
 808e634:	1c5c      	adds	r4, r3, #1
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
 808e636:	f005 fcf0 	bl	809401a <strlen>
    if( *end == ' '  ) end++;
 808e63a:	5c2a      	ldrb	r2, [r5, r0]
    if( *s1 == '\r' ) s1++;
    if( *s1 == '\n' ) s1++;
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
 808e63c:	182b      	adds	r3, r5, r0
    if( *end == ' '  ) end++;
 808e63e:	2a20      	cmp	r2, #32
 808e640:	bf08      	it	eq
 808e642:	3301      	addeq	r3, #1
    if( *end == '\r' ) end++;
 808e644:	781a      	ldrb	r2, [r3, #0]
 808e646:	2a0d      	cmp	r2, #13
 808e648:	bf08      	it	eq
 808e64a:	3301      	addeq	r3, #1
    if( *end == '\n' ) end++;
 808e64c:	781a      	ldrb	r2, [r3, #0]
 808e64e:	2a0a      	cmp	r2, #10
 808e650:	bf08      	it	eq
 808e652:	3301      	addeq	r3, #1
    *use_len = end - data;
 808e654:	1bdb      	subs	r3, r3, r7
 808e656:	9a0e      	ldr	r2, [sp, #56]	; 0x38

    enc = 0;

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
 808e658:	1b2f      	subs	r7, r5, r4
 808e65a:	2f15      	cmp	r7, #21
    end = s2;
    end += strlen( footer );
    if( *end == ' '  ) end++;
    if( *end == '\r' ) end++;
    if( *end == '\n' ) end++;
    *use_len = end - data;
 808e65c:	6013      	str	r3, [r2, #0]

    enc = 0;

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
 808e65e:	dd05      	ble.n	808e66c <mbedtls_pem_read_buffer+0x88>
 808e660:	2216      	movs	r2, #22
 808e662:	4920      	ldr	r1, [pc, #128]	; (808e6e4 <mbedtls_pem_read_buffer+0x100>)
 808e664:	4620      	mov	r0, r4
 808e666:	f005 fc6d 	bl	8093f44 <memcmp>
 808e66a:	b380      	cbz	r0, 808e6ce <mbedtls_pem_read_buffer+0xea>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    if( s1 >= s2 )
 808e66c:	42a5      	cmp	r5, r4
 808e66e:	d930      	bls.n	808e6d2 <mbedtls_pem_read_buffer+0xee>
        return( MBEDTLS_ERR_PEM_INVALID_DATA );

    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );
 808e670:	2100      	movs	r1, #0
 808e672:	9700      	str	r7, [sp, #0]
 808e674:	4623      	mov	r3, r4
 808e676:	aa03      	add	r2, sp, #12
 808e678:	4608      	mov	r0, r1
 808e67a:	f7f8 ff15 	bl	80874a8 <mbedtls_base64_decode>

    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
 808e67e:	302c      	adds	r0, #44	; 0x2c
 808e680:	d029      	beq.n	808e6d6 <mbedtls_pem_read_buffer+0xf2>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );

    if( ( buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
 808e682:	f8dd 800c 	ldr.w	r8, [sp, #12]
 808e686:	2001      	movs	r0, #1
 808e688:	4641      	mov	r1, r8
 808e68a:	f005 fb43 	bl	8093d14 <calloc>
 808e68e:	4605      	mov	r5, r0
 808e690:	b318      	cbz	r0, 808e6da <mbedtls_pem_read_buffer+0xf6>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );

    if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
 808e692:	4623      	mov	r3, r4
 808e694:	9700      	str	r7, [sp, #0]
 808e696:	aa03      	add	r2, sp, #12
 808e698:	4641      	mov	r1, r8
 808e69a:	f7f8 ff05 	bl	80874a8 <mbedtls_base64_decode>
 808e69e:	9b03      	ldr	r3, [sp, #12]
 808e6a0:	4604      	mov	r4, r0
 808e6a2:	b168      	cbz	r0, 808e6c0 <mbedtls_pem_read_buffer+0xdc>
    {
        mbedtls_zeroize( buf, len );
 808e6a4:	462a      	mov	r2, r5
 808e6a6:	442b      	add	r3, r5
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808e6a8:	2100      	movs	r1, #0
 808e6aa:	429a      	cmp	r2, r3
 808e6ac:	d002      	beq.n	808e6b4 <mbedtls_pem_read_buffer+0xd0>
 808e6ae:	7011      	strb	r1, [r2, #0]
 808e6b0:	3201      	adds	r2, #1
 808e6b2:	e7fa      	b.n	808e6aa <mbedtls_pem_read_buffer+0xc6>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );

    if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
    {
        mbedtls_zeroize( buf, len );
        mbedtls_free( buf );
 808e6b4:	4628      	mov	r0, r5
 808e6b6:	f002 fd4f 	bl	8091158 <free>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 808e6ba:	f5a4 5088 	sub.w	r0, r4, #4352	; 0x1100
 808e6be:	e00d      	b.n	808e6dc <mbedtls_pem_read_buffer+0xf8>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    ctx->buf = buf;
 808e6c0:	6035      	str	r5, [r6, #0]
    ctx->buflen = len;
 808e6c2:	6073      	str	r3, [r6, #4]

    return( 0 );
 808e6c4:	e00a      	b.n	808e6dc <mbedtls_pem_read_buffer+0xf8>
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );
 808e6c6:	4808      	ldr	r0, [pc, #32]	; (808e6e8 <mbedtls_pem_read_buffer+0x104>)
 808e6c8:	e008      	b.n	808e6dc <mbedtls_pem_read_buffer+0xf8>

    s1 = (unsigned char *) strstr( (const char *) data, header );

    if( s1 == NULL )
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
 808e6ca:	4808      	ldr	r0, [pc, #32]	; (808e6ec <mbedtls_pem_read_buffer+0x108>)
 808e6cc:	e006      	b.n	808e6dc <mbedtls_pem_read_buffer+0xf8>

        if( *s1 == '\r' ) s1++;
        if( *s1 == '\n' ) s1++;
        else return( MBEDTLS_ERR_PEM_INVALID_DATA );
#else
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
 808e6ce:	4808      	ldr	r0, [pc, #32]	; (808e6f0 <mbedtls_pem_read_buffer+0x10c>)
 808e6d0:	e004      	b.n	808e6dc <mbedtls_pem_read_buffer+0xf8>
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    if( s1 >= s2 )
        return( MBEDTLS_ERR_PEM_INVALID_DATA );
 808e6d2:	4808      	ldr	r0, [pc, #32]	; (808e6f4 <mbedtls_pem_read_buffer+0x110>)
 808e6d4:	e002      	b.n	808e6dc <mbedtls_pem_read_buffer+0xf8>

    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );

    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 808e6d6:	4808      	ldr	r0, [pc, #32]	; (808e6f8 <mbedtls_pem_read_buffer+0x114>)
 808e6d8:	e000      	b.n	808e6dc <mbedtls_pem_read_buffer+0xf8>

    if( ( buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );
 808e6da:	4808      	ldr	r0, [pc, #32]	; (808e6fc <mbedtls_pem_read_buffer+0x118>)

    ctx->buf = buf;
    ctx->buflen = len;

    return( 0 );
}
 808e6dc:	b005      	add	sp, #20
 808e6de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808e6e2:	bf00      	nop
 808e6e4:	08098670 	.word	0x08098670
 808e6e8:	ffffeb80 	.word	0xffffeb80
 808e6ec:	ffffef80 	.word	0xffffef80
 808e6f0:	ffffec00 	.word	0xffffec00
 808e6f4:	ffffef00 	.word	0xffffef00
 808e6f8:	ffffeed4 	.word	0xffffeed4
 808e6fc:	ffffee80 	.word	0xffffee80

0808e700 <mbedtls_pem_free>:

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
 808e700:	b510      	push	{r4, lr}
    if( ctx->buf != NULL )
 808e702:	6803      	ldr	r3, [r0, #0]

    return( 0 );
}

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
 808e704:	4604      	mov	r4, r0
    if( ctx->buf != NULL )
 808e706:	b13b      	cbz	r3, 808e718 <mbedtls_pem_free+0x18>
 808e708:	6842      	ldr	r2, [r0, #4]
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808e70a:	2100      	movs	r1, #0
 808e70c:	441a      	add	r2, r3
 808e70e:	429a      	cmp	r2, r3
 808e710:	d002      	beq.n	808e718 <mbedtls_pem_free+0x18>
 808e712:	7019      	strb	r1, [r3, #0]
 808e714:	3301      	adds	r3, #1
 808e716:	e7fa      	b.n	808e70e <mbedtls_pem_free+0xe>

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
    if( ctx->buf != NULL )
        mbedtls_zeroize( ctx->buf, ctx->buflen );
    mbedtls_free( ctx->buf );
 808e718:	6820      	ldr	r0, [r4, #0]
 808e71a:	f002 fd1d 	bl	8091158 <free>
    mbedtls_free( ctx->info );
 808e71e:	68a0      	ldr	r0, [r4, #8]
 808e720:	f002 fd1a 	bl	8091158 <free>
 808e724:	f104 020c 	add.w	r2, r4, #12
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808e728:	2300      	movs	r3, #0
 808e72a:	4294      	cmp	r4, r2
 808e72c:	d002      	beq.n	808e734 <mbedtls_pem_free+0x34>
 808e72e:	7023      	strb	r3, [r4, #0]
 808e730:	3401      	adds	r4, #1
 808e732:	e7fa      	b.n	808e72a <mbedtls_pem_free+0x2a>
 808e734:	bd10      	pop	{r4, pc}
	...

0808e738 <mbedtls_rsa_deduce_primes>:
 *
 */
int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
                     mbedtls_mpi const *E, mbedtls_mpi const *D,
                     mbedtls_mpi *P, mbedtls_mpi *Q )
{
 808e738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808e73c:	4606      	mov	r6, r0
 808e73e:	4688      	mov	r8, r1
 808e740:	b096      	sub	sp, #88	; 0x58
 808e742:	461f      	mov	r7, r3
          61,   67,   71,   73,   79,   83,   89,   97,
         101,  103,  107,  109,  113,  127,  131,  137,
         139,  149,  151,  157,  163,  167,  173,  179,
         181,  191,  193,  197,  199,  211,  223,  227,
         229,  233,  239,  241,  251
    };
 808e744:	4b79      	ldr	r3, [pc, #484]	; (808e92c <mbedtls_rsa_deduce_primes+0x1f4>)
 *
 */
int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
                     mbedtls_mpi const *E, mbedtls_mpi const *D,
                     mbedtls_mpi *P, mbedtls_mpi *Q )
{
 808e746:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 808e74a:	4615      	mov	r5, r2
          61,   67,   71,   73,   79,   83,   89,   97,
         101,  103,  107,  109,  113,  127,  131,  137,
         139,  149,  151,  157,  163,  167,  173,  179,
         181,  191,  193,  197,  199,  211,  223,  227,
         229,  233,  239,  241,  251
    };
 808e74c:	f103 0e30 	add.w	lr, r3, #48	; 0x30
 808e750:	aa08      	add	r2, sp, #32
 808e752:	4614      	mov	r4, r2
 808e754:	6818      	ldr	r0, [r3, #0]
 808e756:	6859      	ldr	r1, [r3, #4]
 808e758:	3308      	adds	r3, #8
 808e75a:	c403      	stmia	r4!, {r0, r1}
 808e75c:	4573      	cmp	r3, lr
 808e75e:	4622      	mov	r2, r4
 808e760:	d1f7      	bne.n	808e752 <mbedtls_rsa_deduce_primes+0x1a>
 808e762:	6818      	ldr	r0, [r3, #0]
 808e764:	889b      	ldrh	r3, [r3, #4]
 808e766:	6020      	str	r0, [r4, #0]
 808e768:	80a3      	strh	r3, [r4, #4]

    const size_t num_primes = sizeof( primes ) / sizeof( *primes );

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
 808e76a:	2f00      	cmp	r7, #0
 808e76c:	f000 80b8 	beq.w	808e8e0 <mbedtls_rsa_deduce_primes+0x1a8>
 808e770:	f1b9 0f00 	cmp.w	r9, #0
 808e774:	f000 80b4 	beq.w	808e8e0 <mbedtls_rsa_deduce_primes+0x1a8>
 808e778:	68bb      	ldr	r3, [r7, #8]
 808e77a:	2b00      	cmp	r3, #0
 808e77c:	f040 80b0 	bne.w	808e8e0 <mbedtls_rsa_deduce_primes+0x1a8>
 808e780:	f8d9 1008 	ldr.w	r1, [r9, #8]
 808e784:	2900      	cmp	r1, #0
 808e786:	f040 80ab 	bne.w	808e8e0 <mbedtls_rsa_deduce_primes+0x1a8>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 808e78a:	4630      	mov	r0, r6
 808e78c:	f7fc fd6e 	bl	808b26c <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 808e790:	2800      	cmp	r0, #0
 808e792:	f340 80a5 	ble.w	808e8e0 <mbedtls_rsa_deduce_primes+0x1a8>

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 808e796:	2101      	movs	r1, #1
 808e798:	4628      	mov	r0, r5
 808e79a:	f7fc fd67 	bl	808b26c <mbedtls_mpi_cmp_int>
    const size_t num_primes = sizeof( primes ) / sizeof( *primes );

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 808e79e:	2800      	cmp	r0, #0
 808e7a0:	f340 809e 	ble.w	808e8e0 <mbedtls_rsa_deduce_primes+0x1a8>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 808e7a4:	4631      	mov	r1, r6
 808e7a6:	4628      	mov	r0, r5
 808e7a8:	f7fc fd1b 	bl	808b1e2 <mbedtls_mpi_cmp_mpi>

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 808e7ac:	2800      	cmp	r0, #0
 808e7ae:	f280 8097 	bge.w	808e8e0 <mbedtls_rsa_deduce_primes+0x1a8>
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 808e7b2:	2101      	movs	r1, #1
 808e7b4:	4640      	mov	r0, r8
 808e7b6:	f7fc fd59 	bl	808b26c <mbedtls_mpi_cmp_int>
    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 808e7ba:	2800      	cmp	r0, #0
 808e7bc:	f340 8090 	ble.w	808e8e0 <mbedtls_rsa_deduce_primes+0x1a8>
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 808e7c0:	4631      	mov	r1, r6
 808e7c2:	4640      	mov	r0, r8
 808e7c4:	f7fc fd0d 	bl	808b1e2 <mbedtls_mpi_cmp_mpi>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 808e7c8:	2800      	cmp	r0, #0
 808e7ca:	f280 8089 	bge.w	808e8e0 <mbedtls_rsa_deduce_primes+0x1a8>

    /*
     * Initializations and temporary changes
     */

    mbedtls_mpi_init( &K );
 808e7ce:	a805      	add	r0, sp, #20
 808e7d0:	f7fc faa2 	bl	808ad18 <mbedtls_mpi_init>
    mbedtls_mpi_init( &T );
 808e7d4:	a802      	add	r0, sp, #8
 808e7d6:	f7fc fa9f 	bl	808ad18 <mbedtls_mpi_init>

    /* T := DE - 1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, D,  E ) );
 808e7da:	4642      	mov	r2, r8
 808e7dc:	4629      	mov	r1, r5
 808e7de:	a802      	add	r0, sp, #8
 808e7e0:	f7fc fe63 	bl	808b4aa <mbedtls_mpi_mul_mpi>
 808e7e4:	4604      	mov	r4, r0
 808e7e6:	2800      	cmp	r0, #0
 808e7e8:	d172      	bne.n	808e8d0 <mbedtls_rsa_deduce_primes+0x198>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &T, &T, 1 ) );
 808e7ea:	a902      	add	r1, sp, #8
 808e7ec:	2201      	movs	r2, #1
 808e7ee:	4608      	mov	r0, r1
 808e7f0:	f7fc fe45 	bl	808b47e <mbedtls_mpi_sub_int>
 808e7f4:	4604      	mov	r4, r0
 808e7f6:	2800      	cmp	r0, #0
 808e7f8:	d16a      	bne.n	808e8d0 <mbedtls_rsa_deduce_primes+0x198>

    if( ( order = (uint16_t) mbedtls_mpi_lsb( &T ) ) == 0 )
 808e7fa:	a802      	add	r0, sp, #8
 808e7fc:	f7fc fb2c 	bl	808ae58 <mbedtls_mpi_lsb>
 808e800:	fa1f fa80 	uxth.w	sl, r0
 808e804:	f1ba 0f00 	cmp.w	sl, #0
 808e808:	d102      	bne.n	808e810 <mbedtls_rsa_deduce_primes+0xd8>
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 808e80a:	f06f 0403 	mvn.w	r4, #3
 808e80e:	e05f      	b.n	808e8d0 <mbedtls_rsa_deduce_primes+0x198>
        goto cleanup;
    }

    /* After this operation, T holds the largest odd divisor of DE - 1. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &T, order ) );
 808e810:	4651      	mov	r1, sl
 808e812:	a802      	add	r0, sp, #8
 808e814:	f7fc fc06 	bl	808b024 <mbedtls_mpi_shift_r>
 808e818:	4604      	mov	r4, r0
 808e81a:	2800      	cmp	r0, #0
 808e81c:	d158      	bne.n	808e8d0 <mbedtls_rsa_deduce_primes+0x198>
     * Actual work
     */

    /* Skip trying 2 if N == 1 mod 8 */
    attempt = 0;
    if( N->p[0] % 8 == 1 )
 808e81e:	68b3      	ldr	r3, [r6, #8]
        attempt = 1;
 808e820:	681d      	ldr	r5, [r3, #0]
 808e822:	f005 0507 	and.w	r5, r5, #7
 808e826:	1e6b      	subs	r3, r5, #1
 808e828:	425d      	negs	r5, r3
 808e82a:	415d      	adcs	r5, r3

    for( ; attempt < num_primes; ++attempt )
    {
        mbedtls_mpi_lset( &K, primes[attempt] );
 808e82c:	ab16      	add	r3, sp, #88	; 0x58
 808e82e:	442b      	add	r3, r5
 808e830:	f813 1c38 	ldrb.w	r1, [r3, #-56]
 808e834:	a805      	add	r0, sp, #20
 808e836:	f7fc fae2 	bl	808adfe <mbedtls_mpi_lset>

        /* Check if gcd(K,N) = 1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 808e83a:	4632      	mov	r2, r6
 808e83c:	a905      	add	r1, sp, #20
 808e83e:	4638      	mov	r0, r7
 808e840:	f7fd fac0 	bl	808bdc4 <mbedtls_mpi_gcd>
 808e844:	4604      	mov	r4, r0
 808e846:	2800      	cmp	r0, #0
 808e848:	d142      	bne.n	808e8d0 <mbedtls_rsa_deduce_primes+0x198>
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
 808e84a:	2101      	movs	r1, #1
 808e84c:	4638      	mov	r0, r7
 808e84e:	f7fc fd0d 	bl	808b26c <mbedtls_mpi_cmp_int>
 808e852:	b120      	cbz	r0, 808e85e <mbedtls_rsa_deduce_primes+0x126>
    /* Skip trying 2 if N == 1 mod 8 */
    attempt = 0;
    if( N->p[0] % 8 == 1 )
        attempt = 1;

    for( ; attempt < num_primes; ++attempt )
 808e854:	3501      	adds	r5, #1
 808e856:	b2ad      	uxth	r5, r5
 808e858:	2d36      	cmp	r5, #54	; 0x36
 808e85a:	d1e7      	bne.n	808e82c <mbedtls_rsa_deduce_primes+0xf4>
 808e85c:	e7d5      	b.n	808e80a <mbedtls_rsa_deduce_primes+0xd2>
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
            continue;

        /* Go through K^T + 1, K^(2T) + 1, K^(4T) + 1, ...
         * and check whether they have nontrivial GCD with N. */
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
 808e85e:	a905      	add	r1, sp, #20
 808e860:	f8cd 9000 	str.w	r9, [sp]
 808e864:	4633      	mov	r3, r6
 808e866:	aa02      	add	r2, sp, #8
 808e868:	4608      	mov	r0, r1
 808e86a:	f7fd f88c 	bl	808b986 <mbedtls_mpi_exp_mod>
 808e86e:	4604      	mov	r4, r0
 808e870:	bb70      	cbnz	r0, 808e8d0 <mbedtls_rsa_deduce_primes+0x198>
 808e872:	f04f 0801 	mov.w	r8, #1

        for( iter = 1; iter <= order; ++iter )
        {
            /* If we reach 1 prematurely, there's no point
             * in continuing to square K */
            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
 808e876:	2101      	movs	r1, #1
 808e878:	a805      	add	r0, sp, #20
 808e87a:	f7fc fcf7 	bl	808b26c <mbedtls_mpi_cmp_int>
 808e87e:	b930      	cbnz	r0, 808e88e <mbedtls_rsa_deduce_primes+0x156>
         * we reached 1, or K holds primes[attempt]^(DE - 1) mod N, which must
         * be 1 if D,E,N were consistent.
         * Check if that's the case and abort if not, to avoid very long,
         * yet eventually failing, computations if N,D,E were not sane.
         */
        if( mbedtls_mpi_cmp_int( &K, 1 ) != 0 )
 808e880:	2101      	movs	r1, #1
 808e882:	a805      	add	r0, sp, #20
 808e884:	f7fc fcf2 	bl	808b26c <mbedtls_mpi_cmp_int>
 808e888:	2800      	cmp	r0, #0
 808e88a:	d0e3      	beq.n	808e854 <mbedtls_rsa_deduce_primes+0x11c>
 808e88c:	e7bd      	b.n	808e80a <mbedtls_rsa_deduce_primes+0xd2>
            /* If we reach 1 prematurely, there's no point
             * in continuing to square K */
            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
                break;

            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
 808e88e:	a905      	add	r1, sp, #20
 808e890:	2201      	movs	r2, #1
 808e892:	4608      	mov	r0, r1
 808e894:	f7fc fddd 	bl	808b452 <mbedtls_mpi_add_int>
 808e898:	4604      	mov	r4, r0
 808e89a:	b9c8      	cbnz	r0, 808e8d0 <mbedtls_rsa_deduce_primes+0x198>
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 808e89c:	4632      	mov	r2, r6
 808e89e:	a905      	add	r1, sp, #20
 808e8a0:	4638      	mov	r0, r7
 808e8a2:	f7fd fa8f 	bl	808bdc4 <mbedtls_mpi_gcd>
 808e8a6:	4604      	mov	r4, r0
 808e8a8:	b990      	cbnz	r0, 808e8d0 <mbedtls_rsa_deduce_primes+0x198>

            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 808e8aa:	2101      	movs	r1, #1
 808e8ac:	4638      	mov	r0, r7
 808e8ae:	f7fc fcdd 	bl	808b26c <mbedtls_mpi_cmp_int>
 808e8b2:	2801      	cmp	r0, #1
 808e8b4:	d117      	bne.n	808e8e6 <mbedtls_rsa_deduce_primes+0x1ae>
                mbedtls_mpi_cmp_mpi( P, N ) == -1 )
 808e8b6:	4631      	mov	r1, r6
 808e8b8:	4638      	mov	r0, r7
 808e8ba:	f7fc fc92 	bl	808b1e2 <mbedtls_mpi_cmp_mpi>
                break;

            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );

            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 808e8be:	3001      	adds	r0, #1
 808e8c0:	d111      	bne.n	808e8e6 <mbedtls_rsa_deduce_primes+0x1ae>
                /*
                 * Have found a nontrivial divisor P of N.
                 * Set Q := N / P.
                 */

                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
 808e8c2:	4621      	mov	r1, r4
 808e8c4:	463b      	mov	r3, r7
 808e8c6:	4632      	mov	r2, r6
 808e8c8:	4648      	mov	r0, r9
 808e8ca:	f7fc fe6a 	bl	808b5a2 <mbedtls_mpi_div_mpi>
 808e8ce:	4604      	mov	r4, r0

    ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;

cleanup:

    mbedtls_mpi_free( &K );
 808e8d0:	a805      	add	r0, sp, #20
 808e8d2:	f7fc fa28 	bl	808ad26 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T );
 808e8d6:	a802      	add	r0, sp, #8
 808e8d8:	f7fc fa25 	bl	808ad26 <mbedtls_mpi_free>
    return( ret );
 808e8dc:	4620      	mov	r0, r4
 808e8de:	e021      	b.n	808e924 <mbedtls_rsa_deduce_primes+0x1ec>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
    {
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 808e8e0:	f06f 0003 	mvn.w	r0, #3
 808e8e4:	e01e      	b.n	808e924 <mbedtls_rsa_deduce_primes+0x1ec>

                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
                goto cleanup;
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 808e8e6:	a905      	add	r1, sp, #20
 808e8e8:	2201      	movs	r2, #1
 808e8ea:	4608      	mov	r0, r1
 808e8ec:	f7fc fdc7 	bl	808b47e <mbedtls_mpi_sub_int>
 808e8f0:	4604      	mov	r4, r0
 808e8f2:	2800      	cmp	r0, #0
 808e8f4:	d1ec      	bne.n	808e8d0 <mbedtls_rsa_deduce_primes+0x198>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &K ) );
 808e8f6:	aa05      	add	r2, sp, #20
 808e8f8:	4611      	mov	r1, r2
 808e8fa:	4610      	mov	r0, r2
 808e8fc:	f7fc fdd5 	bl	808b4aa <mbedtls_mpi_mul_mpi>
 808e900:	4604      	mov	r4, r0
 808e902:	2800      	cmp	r0, #0
 808e904:	d1e4      	bne.n	808e8d0 <mbedtls_rsa_deduce_primes+0x198>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, N ) );
 808e906:	a905      	add	r1, sp, #20
 808e908:	4632      	mov	r2, r6
 808e90a:	4608      	mov	r0, r1
 808e90c:	f7fd f809 	bl	808b922 <mbedtls_mpi_mod_mpi>
 808e910:	4604      	mov	r4, r0
 808e912:	2800      	cmp	r0, #0
 808e914:	d1dc      	bne.n	808e8d0 <mbedtls_rsa_deduce_primes+0x198>
         * and check whether they have nontrivial GCD with N. */
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
                             Q /* temporarily use Q for storing Montgomery
                                * multiplication helper values */ ) );

        for( iter = 1; iter <= order; ++iter )
 808e916:	f108 0801 	add.w	r8, r8, #1
 808e91a:	fa1f f888 	uxth.w	r8, r8
 808e91e:	45c2      	cmp	sl, r8
 808e920:	d2a9      	bcs.n	808e876 <mbedtls_rsa_deduce_primes+0x13e>
 808e922:	e7ad      	b.n	808e880 <mbedtls_rsa_deduce_primes+0x148>
cleanup:

    mbedtls_mpi_free( &K );
    mbedtls_mpi_free( &T );
    return( ret );
}
 808e924:	b016      	add	sp, #88	; 0x58
 808e926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808e92a:	bf00      	nop
 808e92c:	08098687 	.word	0x08098687

0808e930 <mbedtls_rsa_deduce_private_exponent>:
 */
int mbedtls_rsa_deduce_private_exponent( mbedtls_mpi const *P,
                                         mbedtls_mpi const *Q,
                                         mbedtls_mpi const *E,
                                         mbedtls_mpi *D )
{
 808e930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808e934:	4604      	mov	r4, r0
 808e936:	b086      	sub	sp, #24
 808e938:	460e      	mov	r6, r1
 808e93a:	4617      	mov	r7, r2
    int ret = 0;
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
 808e93c:	461d      	mov	r5, r3
 808e93e:	b18b      	cbz	r3, 808e964 <mbedtls_rsa_deduce_private_exponent+0x34>
 808e940:	2100      	movs	r1, #0
 808e942:	4618      	mov	r0, r3
 808e944:	f7fc fc92 	bl	808b26c <mbedtls_mpi_cmp_int>
 808e948:	4680      	mov	r8, r0
 808e94a:	b958      	cbnz	r0, 808e964 <mbedtls_rsa_deduce_private_exponent+0x34>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 808e94c:	2101      	movs	r1, #1
 808e94e:	4620      	mov	r0, r4
 808e950:	f7fc fc8c 	bl	808b26c <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 808e954:	2800      	cmp	r0, #0
 808e956:	dd05      	ble.n	808e964 <mbedtls_rsa_deduce_private_exponent+0x34>
 808e958:	2101      	movs	r1, #1
 808e95a:	4630      	mov	r0, r6
 808e95c:	f7fc fc86 	bl	808b26c <mbedtls_mpi_cmp_int>
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 808e960:	2800      	cmp	r0, #0
 808e962:	dc02      	bgt.n	808e96a <mbedtls_rsa_deduce_private_exponent+0x3a>
{
    int ret = 0;
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 808e964:	f06f 0003 	mvn.w	r0, #3
 808e968:	e03c      	b.n	808e9e4 <mbedtls_rsa_deduce_private_exponent+0xb4>

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
        mbedtls_mpi_cmp_int( E, 0 ) == 0 )
 808e96a:	4641      	mov	r1, r8
 808e96c:	4638      	mov	r0, r7
 808e96e:	f7fc fc7d 	bl	808b26c <mbedtls_mpi_cmp_int>

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 808e972:	2800      	cmp	r0, #0
 808e974:	d0f6      	beq.n	808e964 <mbedtls_rsa_deduce_private_exponent+0x34>
        mbedtls_mpi_cmp_int( E, 0 ) == 0 )
    {
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    }

    mbedtls_mpi_init( &K );
 808e976:	4668      	mov	r0, sp
 808e978:	f7fc f9ce 	bl	808ad18 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 808e97c:	a803      	add	r0, sp, #12
 808e97e:	f7fc f9cb 	bl	808ad18 <mbedtls_mpi_init>

    /* Temporarily put K := P-1 and L := Q-1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 808e982:	4621      	mov	r1, r4
 808e984:	2201      	movs	r2, #1
 808e986:	4668      	mov	r0, sp
 808e988:	f7fc fd79 	bl	808b47e <mbedtls_mpi_sub_int>
 808e98c:	4604      	mov	r4, r0
 808e98e:	bb10      	cbnz	r0, 808e9d6 <mbedtls_rsa_deduce_private_exponent+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 808e990:	2201      	movs	r2, #1
 808e992:	4631      	mov	r1, r6
 808e994:	a803      	add	r0, sp, #12
 808e996:	f7fc fd72 	bl	808b47e <mbedtls_mpi_sub_int>
 808e99a:	4604      	mov	r4, r0
 808e99c:	b9d8      	cbnz	r0, 808e9d6 <mbedtls_rsa_deduce_private_exponent+0xa6>

    /* Temporarily put D := gcd(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( D, &K, &L ) );
 808e99e:	aa03      	add	r2, sp, #12
 808e9a0:	4669      	mov	r1, sp
 808e9a2:	4628      	mov	r0, r5
 808e9a4:	f7fd fa0e 	bl	808bdc4 <mbedtls_mpi_gcd>
 808e9a8:	4604      	mov	r4, r0
 808e9aa:	b9a0      	cbnz	r0, 808e9d6 <mbedtls_rsa_deduce_private_exponent+0xa6>

    /* K := LCM(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &L ) );
 808e9ac:	aa03      	add	r2, sp, #12
 808e9ae:	4669      	mov	r1, sp
 808e9b0:	4668      	mov	r0, sp
 808e9b2:	f7fc fd7a 	bl	808b4aa <mbedtls_mpi_mul_mpi>
 808e9b6:	4604      	mov	r4, r0
 808e9b8:	b968      	cbnz	r0, 808e9d6 <mbedtls_rsa_deduce_private_exponent+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &K, NULL, &K, D ) );
 808e9ba:	4601      	mov	r1, r0
 808e9bc:	462b      	mov	r3, r5
 808e9be:	466a      	mov	r2, sp
 808e9c0:	4668      	mov	r0, sp
 808e9c2:	f7fc fdee 	bl	808b5a2 <mbedtls_mpi_div_mpi>
 808e9c6:	4604      	mov	r4, r0
 808e9c8:	b928      	cbnz	r0, 808e9d6 <mbedtls_rsa_deduce_private_exponent+0xa6>

    /* Compute modular inverse of E in LCM(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( D, E, &K ) );
 808e9ca:	466a      	mov	r2, sp
 808e9cc:	4639      	mov	r1, r7
 808e9ce:	4628      	mov	r0, r5
 808e9d0:	f7fd faa0 	bl	808bf14 <mbedtls_mpi_inv_mod>
 808e9d4:	4604      	mov	r4, r0

cleanup:

    mbedtls_mpi_free( &K );
 808e9d6:	4668      	mov	r0, sp
 808e9d8:	f7fc f9a5 	bl	808ad26 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 808e9dc:	a803      	add	r0, sp, #12
 808e9de:	f7fc f9a2 	bl	808ad26 <mbedtls_mpi_free>

    return( ret );
 808e9e2:	4620      	mov	r0, r4
}
 808e9e4:	b006      	add	sp, #24
 808e9e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0808e9ec <mbedtls_rsa_validate_crt>:
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 808e9ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808e9f0:	4699      	mov	r9, r3
 808e9f2:	b087      	sub	sp, #28
 808e9f4:	4604      	mov	r4, r0
    int ret = 0;

    mbedtls_mpi K, L;
    mbedtls_mpi_init( &K );
 808e9f6:	4668      	mov	r0, sp
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 808e9f8:	460d      	mov	r5, r1
 808e9fa:	4690      	mov	r8, r2
 808e9fc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 808e9fe:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    int ret = 0;

    mbedtls_mpi K, L;
    mbedtls_mpi_init( &K );
 808ea00:	f7fc f98a 	bl	808ad18 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 808ea04:	a803      	add	r0, sp, #12
 808ea06:	f7fc f987 	bl	808ad18 <mbedtls_mpi_init>

    /* Check that DP - D == 0 mod P - 1 */
    if( DP != NULL )
 808ea0a:	f1b9 0f00 	cmp.w	r9, #0
 808ea0e:	d101      	bne.n	808ea14 <mbedtls_rsa_validate_crt+0x28>
            goto cleanup;
        }
    }

    /* Check that DQ - D == 0 mod Q - 1 */
    if( DQ != NULL )
 808ea10:	b9f7      	cbnz	r7, 808ea50 <mbedtls_rsa_validate_crt+0x64>
 808ea12:	e035      	b.n	808ea80 <mbedtls_rsa_validate_crt+0x94>
    mbedtls_mpi_init( &L );

    /* Check that DP - D == 0 mod P - 1 */
    if( DP != NULL )
    {
        if( P == NULL )
 808ea14:	2c00      	cmp	r4, #0
 808ea16:	d058      	beq.n	808eaca <mbedtls_rsa_validate_crt+0xde>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 808ea18:	2201      	movs	r2, #1
 808ea1a:	4621      	mov	r1, r4
 808ea1c:	4668      	mov	r0, sp
 808ea1e:	f7fc fd2e 	bl	808b47e <mbedtls_mpi_sub_int>
 808ea22:	2800      	cmp	r0, #0
 808ea24:	d148      	bne.n	808eab8 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DP, D ) );
 808ea26:	4642      	mov	r2, r8
 808ea28:	4649      	mov	r1, r9
 808ea2a:	a803      	add	r0, sp, #12
 808ea2c:	f7fc fcef 	bl	808b40e <mbedtls_mpi_sub_mpi>
 808ea30:	2800      	cmp	r0, #0
 808ea32:	d141      	bne.n	808eab8 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 808ea34:	a903      	add	r1, sp, #12
 808ea36:	466a      	mov	r2, sp
 808ea38:	4608      	mov	r0, r1
 808ea3a:	f7fc ff72 	bl	808b922 <mbedtls_mpi_mod_mpi>
 808ea3e:	2800      	cmp	r0, #0
 808ea40:	d13a      	bne.n	808eab8 <mbedtls_rsa_validate_crt+0xcc>

        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 808ea42:	4601      	mov	r1, r0
 808ea44:	a803      	add	r0, sp, #12
 808ea46:	f7fc fc11 	bl	808b26c <mbedtls_mpi_cmp_int>
 808ea4a:	2800      	cmp	r0, #0
 808ea4c:	d13f      	bne.n	808eace <mbedtls_rsa_validate_crt+0xe2>
 808ea4e:	e7df      	b.n	808ea10 <mbedtls_rsa_validate_crt+0x24>
    }

    /* Check that DQ - D == 0 mod Q - 1 */
    if( DQ != NULL )
    {
        if( Q == NULL )
 808ea50:	b3dd      	cbz	r5, 808eaca <mbedtls_rsa_validate_crt+0xde>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1 ) );
 808ea52:	2201      	movs	r2, #1
 808ea54:	4629      	mov	r1, r5
 808ea56:	4668      	mov	r0, sp
 808ea58:	f7fc fd11 	bl	808b47e <mbedtls_mpi_sub_int>
 808ea5c:	bb60      	cbnz	r0, 808eab8 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DQ, D ) );
 808ea5e:	4642      	mov	r2, r8
 808ea60:	4639      	mov	r1, r7
 808ea62:	a803      	add	r0, sp, #12
 808ea64:	f7fc fcd3 	bl	808b40e <mbedtls_mpi_sub_mpi>
 808ea68:	bb30      	cbnz	r0, 808eab8 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 808ea6a:	a903      	add	r1, sp, #12
 808ea6c:	466a      	mov	r2, sp
 808ea6e:	4608      	mov	r0, r1
 808ea70:	f7fc ff57 	bl	808b922 <mbedtls_mpi_mod_mpi>
 808ea74:	bb00      	cbnz	r0, 808eab8 <mbedtls_rsa_validate_crt+0xcc>

        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 808ea76:	4601      	mov	r1, r0
 808ea78:	a803      	add	r0, sp, #12
 808ea7a:	f7fc fbf7 	bl	808b26c <mbedtls_mpi_cmp_int>
 808ea7e:	bb30      	cbnz	r0, 808eace <mbedtls_rsa_validate_crt+0xe2>
            goto cleanup;
        }
    }

    /* Check that QP * Q - 1 == 0 mod P */
    if( QP != NULL )
 808ea80:	b1c6      	cbz	r6, 808eab4 <mbedtls_rsa_validate_crt+0xc8>
    {
        if( P == NULL || Q == NULL )
 808ea82:	b314      	cbz	r4, 808eaca <mbedtls_rsa_validate_crt+0xde>
 808ea84:	b30d      	cbz	r5, 808eaca <mbedtls_rsa_validate_crt+0xde>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, QP, Q ) );
 808ea86:	462a      	mov	r2, r5
 808ea88:	4631      	mov	r1, r6
 808ea8a:	4668      	mov	r0, sp
 808ea8c:	f7fc fd0d 	bl	808b4aa <mbedtls_mpi_mul_mpi>
 808ea90:	b990      	cbnz	r0, 808eab8 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 808ea92:	2201      	movs	r2, #1
 808ea94:	4669      	mov	r1, sp
 808ea96:	4668      	mov	r0, sp
 808ea98:	f7fc fcf1 	bl	808b47e <mbedtls_mpi_sub_int>
 808ea9c:	b960      	cbnz	r0, 808eab8 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, P ) );
 808ea9e:	4622      	mov	r2, r4
 808eaa0:	4669      	mov	r1, sp
 808eaa2:	4668      	mov	r0, sp
 808eaa4:	f7fc ff3d 	bl	808b922 <mbedtls_mpi_mod_mpi>
 808eaa8:	b930      	cbnz	r0, 808eab8 <mbedtls_rsa_validate_crt+0xcc>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 808eaaa:	4601      	mov	r1, r0
 808eaac:	4668      	mov	r0, sp
 808eaae:	f7fc fbdd 	bl	808b26c <mbedtls_mpi_cmp_int>
 808eab2:	b960      	cbnz	r0, 808eace <mbedtls_rsa_validate_crt+0xe2>
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 808eab4:	2400      	movs	r4, #0
 808eab6:	e00b      	b.n	808ead0 <mbedtls_rsa_validate_crt+0xe4>
    }

cleanup:

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 &&
 808eab8:	f510 4f84 	cmn.w	r0, #16896	; 0x4200
 808eabc:	d007      	beq.n	808eace <mbedtls_rsa_validate_crt+0xe2>
        ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED &&
 808eabe:	f510 4f81 	cmn.w	r0, #16512	; 0x4080
 808eac2:	d002      	beq.n	808eaca <mbedtls_rsa_validate_crt+0xde>
        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 808eac4:	f5a0 4484 	sub.w	r4, r0, #16896	; 0x4200
 808eac8:	e002      	b.n	808ead0 <mbedtls_rsa_validate_crt+0xe4>
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 808eaca:	4c06      	ldr	r4, [pc, #24]	; (808eae4 <mbedtls_rsa_validate_crt+0xf8>)
 808eacc:	e000      	b.n	808ead0 <mbedtls_rsa_validate_crt+0xe4>
 808eace:	4c06      	ldr	r4, [pc, #24]	; (808eae8 <mbedtls_rsa_validate_crt+0xfc>)
        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
    }

    mbedtls_mpi_free( &K );
 808ead0:	4668      	mov	r0, sp
 808ead2:	f7fc f928 	bl	808ad26 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 808ead6:	a803      	add	r0, sp, #12
 808ead8:	f7fc f925 	bl	808ad26 <mbedtls_mpi_free>

    return( ret );
}
 808eadc:	4620      	mov	r0, r4
 808eade:	b007      	add	sp, #28
 808eae0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808eae4:	ffffbf80 	.word	0xffffbf80
 808eae8:	ffffbe00 	.word	0xffffbe00

0808eaec <mbedtls_rsa_validate_params>:
int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,
                                 const mbedtls_mpi *E,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
 808eaec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808eaf0:	4688      	mov	r8, r1
 808eaf2:	b087      	sub	sp, #28
 808eaf4:	4605      	mov	r5, r0
    int ret = 0;
    mbedtls_mpi K, L;

    mbedtls_mpi_init( &K );
 808eaf6:	4668      	mov	r0, sp
int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,
                                 const mbedtls_mpi *E,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
 808eaf8:	4691      	mov	r9, r2
 808eafa:	461e      	mov	r6, r3
 808eafc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    int ret = 0;
    mbedtls_mpi K, L;

    mbedtls_mpi_init( &K );
 808eafe:	f7fc f90b 	bl	808ad18 <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 808eb02:	a803      	add	r0, sp, #12
 808eb04:	f7fc f908 	bl	808ad18 <mbedtls_mpi_init>

    /*
     * Step 2: Check that 1 < N = P * Q
     */

    if( P != NULL && Q != NULL && N != NULL )
 808eb08:	f1b8 0f00 	cmp.w	r8, #0
 808eb0c:	d018      	beq.n	808eb40 <mbedtls_rsa_validate_params+0x54>
 808eb0e:	f1b9 0f00 	cmp.w	r9, #0
 808eb12:	d015      	beq.n	808eb40 <mbedtls_rsa_validate_params+0x54>
 808eb14:	b90d      	cbnz	r5, 808eb1a <mbedtls_rsa_validate_params+0x2e>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 808eb16:	b9de      	cbnz	r6, 808eb50 <mbedtls_rsa_validate_params+0x64>
 808eb18:	e018      	b.n	808eb4c <mbedtls_rsa_validate_params+0x60>
     * Step 2: Check that 1 < N = P * Q
     */

    if( P != NULL && Q != NULL && N != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
 808eb1a:	464a      	mov	r2, r9
 808eb1c:	4641      	mov	r1, r8
 808eb1e:	4668      	mov	r0, sp
 808eb20:	f7fc fcc3 	bl	808b4aa <mbedtls_mpi_mul_mpi>
 808eb24:	4604      	mov	r4, r0
 808eb26:	bb68      	cbnz	r0, 808eb84 <mbedtls_rsa_validate_params+0x98>
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 808eb28:	2101      	movs	r1, #1
 808eb2a:	4628      	mov	r0, r5
 808eb2c:	f7fc fb9e 	bl	808b26c <mbedtls_mpi_cmp_int>
 808eb30:	2800      	cmp	r0, #0
 808eb32:	dd26      	ble.n	808eb82 <mbedtls_rsa_validate_params+0x96>
            mbedtls_mpi_cmp_mpi( &K, N ) != 0 )
 808eb34:	4629      	mov	r1, r5
 808eb36:	4668      	mov	r0, sp
 808eb38:	f7fc fb53 	bl	808b1e2 <mbedtls_mpi_cmp_mpi>
     */

    if( P != NULL && Q != NULL && N != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 808eb3c:	bb08      	cbnz	r0, 808eb82 <mbedtls_rsa_validate_params+0x96>
 808eb3e:	e016      	b.n	808eb6e <mbedtls_rsa_validate_params+0x82>

    /*
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
 808eb40:	b125      	cbz	r5, 808eb4c <mbedtls_rsa_validate_params+0x60>
 808eb42:	b9b6      	cbnz	r6, 808eb72 <mbedtls_rsa_validate_params+0x86>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 808eb44:	f1b8 0f00 	cmp.w	r8, #0
 808eb48:	f040 808a 	bne.w	808ec60 <mbedtls_rsa_validate_params+0x174>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 808eb4c:	2400      	movs	r4, #0
 808eb4e:	e019      	b.n	808eb84 <mbedtls_rsa_validate_params+0x98>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 808eb50:	2f00      	cmp	r7, #0
 808eb52:	d0fb      	beq.n	808eb4c <mbedtls_rsa_validate_params+0x60>
    {
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 808eb54:	2101      	movs	r1, #1
 808eb56:	4640      	mov	r0, r8
 808eb58:	f7fc fb88 	bl	808b26c <mbedtls_mpi_cmp_int>
 808eb5c:	2800      	cmp	r0, #0
 808eb5e:	dd10      	ble.n	808eb82 <mbedtls_rsa_validate_params+0x96>
            mbedtls_mpi_cmp_int( Q, 1 ) <= 0 )
 808eb60:	2101      	movs	r1, #1
 808eb62:	4648      	mov	r0, r9
 808eb64:	f7fc fb82 	bl	808b26c <mbedtls_mpi_cmp_int>
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
    {
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 808eb68:	2800      	cmp	r0, #0
 808eb6a:	dc19      	bgt.n	808eba0 <mbedtls_rsa_validate_params+0xb4>
 808eb6c:	e009      	b.n	808eb82 <mbedtls_rsa_validate_params+0x96>

    /*
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
 808eb6e:	2e00      	cmp	r6, #0
 808eb70:	d0ec      	beq.n	808eb4c <mbedtls_rsa_validate_params+0x60>
 808eb72:	2f00      	cmp	r7, #0
 808eb74:	d0e6      	beq.n	808eb44 <mbedtls_rsa_validate_params+0x58>
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 808eb76:	2101      	movs	r1, #1
 808eb78:	4630      	mov	r0, r6
 808eb7a:	f7fc fb77 	bl	808b26c <mbedtls_mpi_cmp_int>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 808eb7e:	2800      	cmp	r0, #0
 808eb80:	dc5b      	bgt.n	808ec3a <mbedtls_rsa_validate_params+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 808eb82:	4c3c      	ldr	r4, [pc, #240]	; (808ec74 <mbedtls_rsa_validate_params+0x188>)
        }
    }

cleanup:

    mbedtls_mpi_free( &K );
 808eb84:	4668      	mov	r0, sp
 808eb86:	f7fc f8ce 	bl	808ad26 <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 808eb8a:	a803      	add	r0, sp, #12
 808eb8c:	f7fc f8cb 	bl	808ad26 <mbedtls_mpi_free>

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 && ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED )
 808eb90:	2c00      	cmp	r4, #0
 808eb92:	d06a      	beq.n	808ec6a <mbedtls_rsa_validate_params+0x17e>
 808eb94:	f514 4f84 	cmn.w	r4, #16896	; 0x4200
 808eb98:	d067      	beq.n	808ec6a <mbedtls_rsa_validate_params+0x17e>
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 808eb9a:	f5a4 4484 	sub.w	r4, r4, #16896	; 0x4200
    }

    return( ret );
 808eb9e:	e064      	b.n	808ec6a <mbedtls_rsa_validate_params+0x17e>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
            goto cleanup;
        }

        /* Compute DE-1 mod P-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 808eba0:	463a      	mov	r2, r7
 808eba2:	4631      	mov	r1, r6
 808eba4:	4668      	mov	r0, sp
 808eba6:	f7fc fc80 	bl	808b4aa <mbedtls_mpi_mul_mpi>
 808ebaa:	4604      	mov	r4, r0
 808ebac:	2800      	cmp	r0, #0
 808ebae:	d1e9      	bne.n	808eb84 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 808ebb0:	2201      	movs	r2, #1
 808ebb2:	4669      	mov	r1, sp
 808ebb4:	4668      	mov	r0, sp
 808ebb6:	f7fc fc62 	bl	808b47e <mbedtls_mpi_sub_int>
 808ebba:	4604      	mov	r4, r0
 808ebbc:	2800      	cmp	r0, #0
 808ebbe:	d1e1      	bne.n	808eb84 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, P, 1 ) );
 808ebc0:	2201      	movs	r2, #1
 808ebc2:	4641      	mov	r1, r8
 808ebc4:	a803      	add	r0, sp, #12
 808ebc6:	f7fc fc5a 	bl	808b47e <mbedtls_mpi_sub_int>
 808ebca:	4604      	mov	r4, r0
 808ebcc:	2800      	cmp	r0, #0
 808ebce:	d1d9      	bne.n	808eb84 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 808ebd0:	aa03      	add	r2, sp, #12
 808ebd2:	4669      	mov	r1, sp
 808ebd4:	4668      	mov	r0, sp
 808ebd6:	f7fc fea4 	bl	808b922 <mbedtls_mpi_mod_mpi>
 808ebda:	4604      	mov	r4, r0
 808ebdc:	2800      	cmp	r0, #0
 808ebde:	d1d1      	bne.n	808eb84 <mbedtls_rsa_validate_params+0x98>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 808ebe0:	4601      	mov	r1, r0
 808ebe2:	4668      	mov	r0, sp
 808ebe4:	f7fc fb42 	bl	808b26c <mbedtls_mpi_cmp_int>
 808ebe8:	2800      	cmp	r0, #0
 808ebea:	d1ca      	bne.n	808eb82 <mbedtls_rsa_validate_params+0x96>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
            goto cleanup;
        }

        /* Compute DE-1 mod Q-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 808ebec:	463a      	mov	r2, r7
 808ebee:	4631      	mov	r1, r6
 808ebf0:	4668      	mov	r0, sp
 808ebf2:	f7fc fc5a 	bl	808b4aa <mbedtls_mpi_mul_mpi>
 808ebf6:	4604      	mov	r4, r0
 808ebf8:	2800      	cmp	r0, #0
 808ebfa:	d1c3      	bne.n	808eb84 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 808ebfc:	2201      	movs	r2, #1
 808ebfe:	4669      	mov	r1, sp
 808ec00:	4668      	mov	r0, sp
 808ec02:	f7fc fc3c 	bl	808b47e <mbedtls_mpi_sub_int>
 808ec06:	4604      	mov	r4, r0
 808ec08:	2800      	cmp	r0, #0
 808ec0a:	d1bb      	bne.n	808eb84 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 808ec0c:	2201      	movs	r2, #1
 808ec0e:	4649      	mov	r1, r9
 808ec10:	a803      	add	r0, sp, #12
 808ec12:	f7fc fc34 	bl	808b47e <mbedtls_mpi_sub_int>
 808ec16:	4604      	mov	r4, r0
 808ec18:	2800      	cmp	r0, #0
 808ec1a:	d1b3      	bne.n	808eb84 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 808ec1c:	aa03      	add	r2, sp, #12
 808ec1e:	4669      	mov	r1, sp
 808ec20:	4668      	mov	r0, sp
 808ec22:	f7fc fe7e 	bl	808b922 <mbedtls_mpi_mod_mpi>
 808ec26:	4604      	mov	r4, r0
 808ec28:	2800      	cmp	r0, #0
 808ec2a:	d1ab      	bne.n	808eb84 <mbedtls_rsa_validate_params+0x98>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 808ec2c:	4601      	mov	r1, r0
 808ec2e:	4668      	mov	r0, sp
 808ec30:	f7fc fb1c 	bl	808b26c <mbedtls_mpi_cmp_int>
 808ec34:	2800      	cmp	r0, #0
 808ec36:	d089      	beq.n	808eb4c <mbedtls_rsa_validate_params+0x60>
 808ec38:	e7a3      	b.n	808eb82 <mbedtls_rsa_validate_params+0x96>
     */

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 808ec3a:	2101      	movs	r1, #1
 808ec3c:	4638      	mov	r0, r7
 808ec3e:	f7fc fb15 	bl	808b26c <mbedtls_mpi_cmp_int>
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 808ec42:	2800      	cmp	r0, #0
 808ec44:	dd9d      	ble.n	808eb82 <mbedtls_rsa_validate_params+0x96>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 808ec46:	4629      	mov	r1, r5
 808ec48:	4630      	mov	r0, r6
 808ec4a:	f7fc faca 	bl	808b1e2 <mbedtls_mpi_cmp_mpi>
     */

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 808ec4e:	2800      	cmp	r0, #0
 808ec50:	da97      	bge.n	808eb82 <mbedtls_rsa_validate_params+0x96>
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
             mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 808ec52:	4629      	mov	r1, r5
 808ec54:	4638      	mov	r0, r7
 808ec56:	f7fc fac4 	bl	808b1e2 <mbedtls_mpi_cmp_mpi>

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 808ec5a:	2800      	cmp	r0, #0
 808ec5c:	da91      	bge.n	808eb82 <mbedtls_rsa_validate_params+0x96>
 808ec5e:	e771      	b.n	808eb44 <mbedtls_rsa_validate_params+0x58>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 808ec60:	f1b9 0f00 	cmp.w	r9, #0
 808ec64:	f47f af57 	bne.w	808eb16 <mbedtls_rsa_validate_params+0x2a>
 808ec68:	e770      	b.n	808eb4c <mbedtls_rsa_validate_params+0x60>
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
    }

    return( ret );
}
 808ec6a:	4620      	mov	r0, r4
 808ec6c:	b007      	add	sp, #28
 808ec6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808ec72:	bf00      	nop
 808ec74:	ffffbe00 	.word	0xffffbe00

0808ec78 <mbedtls_rsa_deduce_crt>:

int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
                            const mbedtls_mpi *D, mbedtls_mpi *DP,
                            mbedtls_mpi *DQ, mbedtls_mpi *QP )
{
 808ec78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 808ec7c:	469a      	mov	sl, r3
 808ec7e:	4607      	mov	r7, r0
    int ret = 0;
    mbedtls_mpi K;
    mbedtls_mpi_init( &K );
 808ec80:	a801      	add	r0, sp, #4
}

int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
                            const mbedtls_mpi *D, mbedtls_mpi *DP,
                            mbedtls_mpi *DQ, mbedtls_mpi *QP )
{
 808ec82:	460e      	mov	r6, r1
 808ec84:	4691      	mov	r9, r2
 808ec86:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 808ec8a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    int ret = 0;
    mbedtls_mpi K;
    mbedtls_mpi_init( &K );
 808ec8c:	f7fc f844 	bl	808ad18 <mbedtls_mpi_init>

    /* DP = D mod P-1 */
    if( DP != NULL )
 808ec90:	f1ba 0f00 	cmp.w	sl, #0
 808ec94:	d103      	bne.n	808ec9e <mbedtls_rsa_deduce_crt+0x26>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
    }

    /* DQ = D mod Q-1 */
    if( DQ != NULL )
 808ec96:	f1b8 0f00 	cmp.w	r8, #0
 808ec9a:	d110      	bne.n	808ecbe <mbedtls_rsa_deduce_crt+0x46>
 808ec9c:	e01d      	b.n	808ecda <mbedtls_rsa_deduce_crt+0x62>
    mbedtls_mpi_init( &K );

    /* DP = D mod P-1 */
    if( DP != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
 808ec9e:	2201      	movs	r2, #1
 808eca0:	4639      	mov	r1, r7
 808eca2:	a801      	add	r0, sp, #4
 808eca4:	f7fc fbeb 	bl	808b47e <mbedtls_mpi_sub_int>
 808eca8:	4604      	mov	r4, r0
 808ecaa:	b9f8      	cbnz	r0, 808ecec <mbedtls_rsa_deduce_crt+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
 808ecac:	aa01      	add	r2, sp, #4
 808ecae:	4649      	mov	r1, r9
 808ecb0:	4650      	mov	r0, sl
 808ecb2:	f7fc fe36 	bl	808b922 <mbedtls_mpi_mod_mpi>
 808ecb6:	4604      	mov	r4, r0
 808ecb8:	2800      	cmp	r0, #0
 808ecba:	d0ec      	beq.n	808ec96 <mbedtls_rsa_deduce_crt+0x1e>
 808ecbc:	e016      	b.n	808ecec <mbedtls_rsa_deduce_crt+0x74>
    }

    /* DQ = D mod Q-1 */
    if( DQ != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );
 808ecbe:	2201      	movs	r2, #1
 808ecc0:	4631      	mov	r1, r6
 808ecc2:	a801      	add	r0, sp, #4
 808ecc4:	f7fc fbdb 	bl	808b47e <mbedtls_mpi_sub_int>
 808ecc8:	4604      	mov	r4, r0
 808ecca:	b978      	cbnz	r0, 808ecec <mbedtls_rsa_deduce_crt+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );
 808eccc:	aa01      	add	r2, sp, #4
 808ecce:	4649      	mov	r1, r9
 808ecd0:	4640      	mov	r0, r8
 808ecd2:	f7fc fe26 	bl	808b922 <mbedtls_mpi_mod_mpi>
 808ecd6:	4604      	mov	r4, r0
 808ecd8:	b940      	cbnz	r0, 808ecec <mbedtls_rsa_deduce_crt+0x74>
    }

    /* QP = Q^{-1} mod P */
    if( QP != NULL )
 808ecda:	b90d      	cbnz	r5, 808ece0 <mbedtls_rsa_deduce_crt+0x68>
 808ecdc:	462c      	mov	r4, r5
 808ecde:	e005      	b.n	808ecec <mbedtls_rsa_deduce_crt+0x74>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( QP, Q, P ) );
 808ece0:	463a      	mov	r2, r7
 808ece2:	4631      	mov	r1, r6
 808ece4:	4628      	mov	r0, r5
 808ece6:	f7fd f915 	bl	808bf14 <mbedtls_mpi_inv_mod>
 808ecea:	4604      	mov	r4, r0
    }

cleanup:
    mbedtls_mpi_free( &K );
 808ecec:	a801      	add	r0, sp, #4
 808ecee:	f7fc f81a 	bl	808ad26 <mbedtls_mpi_free>

    return( ret );
}
 808ecf2:	4620      	mov	r0, r4
 808ecf4:	b004      	add	sp, #16
 808ecf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808ecfa <mbedtls_ssl_own_key>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
static inline mbedtls_pk_context *mbedtls_ssl_own_key( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 808ecfa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 808ecfc:	b10b      	cbz	r3, 808ed02 <mbedtls_ssl_own_key+0x8>
 808ecfe:	685b      	ldr	r3, [r3, #4]
 808ed00:	b913      	cbnz	r3, 808ed08 <mbedtls_ssl_own_key+0xe>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
 808ed02:	6803      	ldr	r3, [r0, #0]
 808ed04:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return( key_cert == NULL ? NULL : key_cert->key );
 808ed06:	b10b      	cbz	r3, 808ed0c <mbedtls_ssl_own_key+0x12>
 808ed08:	6858      	ldr	r0, [r3, #4]
 808ed0a:	4770      	bx	lr
 808ed0c:	4618      	mov	r0, r3
}
 808ed0e:	4770      	bx	lr

0808ed10 <mbedtls_ssl_handshake_client_step>:

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
 808ed10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 808ed14:	6843      	ldr	r3, [r0, #4]

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
 808ed16:	b095      	sub	sp, #84	; 0x54
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 808ed18:	2b10      	cmp	r3, #16

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
 808ed1a:	4604      	mov	r4, r0
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 808ed1c:	f000 80c1 	beq.w	808eea2 <mbedtls_ssl_handshake_client_step+0x192>
 808ed20:	6b03      	ldr	r3, [r0, #48]	; 0x30
 808ed22:	2b00      	cmp	r3, #0
 808ed24:	f000 80bd 	beq.w	808eea2 <mbedtls_ssl_handshake_client_step+0x192>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "client state: %d", ssl->state ) );

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 808ed28:	f7fa fc9a 	bl	8089660 <mbedtls_ssl_flush_output>
 808ed2c:	2800      	cmp	r0, #0
 808ed2e:	f040 8514 	bne.w	808f75a <mbedtls_ssl_handshake_client_step+0xa4a>
#endif

    /* Change state now, so that it is right in mbedtls_ssl_read_record(), used
     * by DTLS for dropping out-of-sequence ChangeCipherSpec records */
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&
 808ed32:	6863      	ldr	r3, [r4, #4]
 808ed34:	2b0c      	cmp	r3, #12
 808ed36:	d105      	bne.n	808ed44 <mbedtls_ssl_handshake_client_step+0x34>
        ssl->handshake->new_session_ticket != 0 )
 808ed38:	6b23      	ldr	r3, [r4, #48]	; 0x30
#endif

    /* Change state now, so that it is right in mbedtls_ssl_read_record(), used
     * by DTLS for dropping out-of-sequence ChangeCipherSpec records */
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&
 808ed3a:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 808ed3e:	b10b      	cbz	r3, 808ed44 <mbedtls_ssl_handshake_client_step+0x34>
        ssl->handshake->new_session_ticket != 0 )
    {
        ssl->state = MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET;
 808ed40:	2311      	movs	r3, #17
 808ed42:	6063      	str	r3, [r4, #4]
    }
#endif

    switch( ssl->state )
 808ed44:	6860      	ldr	r0, [r4, #4]
 808ed46:	2811      	cmp	r0, #17
 808ed48:	f200 80ab 	bhi.w	808eea2 <mbedtls_ssl_handshake_client_step+0x192>
 808ed4c:	e8df f010 	tbh	[pc, r0, lsl #1]
 808ed50:	00140012 	.word	0x00140012
 808ed54:	00dc004b 	.word	0x00dc004b
 808ed58:	010500e1 	.word	0x010500e1
 808ed5c:	012b0117 	.word	0x012b0117
 808ed60:	0190012f 	.word	0x0190012f
 808ed64:	020201fe 	.word	0x020201fe
 808ed68:	02290225 	.word	0x02290225
 808ed6c:	022f022d 	.word	0x022f022d
 808ed70:	020c00a9 	.word	0x020c00a9
    {
        case MBEDTLS_SSL_HELLO_REQUEST:
            ssl->state = MBEDTLS_SSL_CLIENT_HELLO;
 808ed74:	2301      	movs	r3, #1
 808ed76:	e0ed      	b.n	808ef54 <mbedtls_ssl_handshake_client_step+0x244>
    const int *ciphersuites;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );

    if( ssl->conf->f_rng == NULL )
 808ed78:	6821      	ldr	r1, [r4, #0]
 808ed7a:	698b      	ldr	r3, [r1, #24]
 808ed7c:	2b00      	cmp	r3, #0
 808ed7e:	f000 821a 	beq.w	808f1b6 <mbedtls_ssl_handshake_client_step+0x4a6>

#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        ssl->major_ver = ssl->conf->min_major_ver;
 808ed82:	f891 305e 	ldrb.w	r3, [r1, #94]	; 0x5e
 808ed86:	60a3      	str	r3, [r4, #8]
        ssl->minor_ver = ssl->conf->min_minor_ver;
 808ed88:	f891 305f 	ldrb.w	r3, [r1, #95]	; 0x5f
 808ed8c:	60e3      	str	r3, [r4, #12]
    }

    if( ssl->conf->max_major_ver == 0 )
 808ed8e:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 808ed92:	2800      	cmp	r0, #0
 808ed94:	f000 8085 	beq.w	808eea2 <mbedtls_ssl_handshake_client_step+0x192>
     */
    buf = ssl->out_msg;
    p = buf + 4;

    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 808ed98:	f891 2060 	ldrb.w	r2, [r1, #96]	; 0x60
     *     1  .   3   handshake length
     *     4  .   5   highest version supported
     *     6  .   9   current UNIX time
     *    10  .  37   random bytes
     */
    buf = ssl->out_msg;
 808ed9c:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
    p = buf + 4;

    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 808eda0:	f3c2 0240 	ubfx	r2, r2, #1, #1
 808eda4:	1d33      	adds	r3, r6, #4
 808eda6:	f891 105d 	ldrb.w	r1, [r1, #93]	; 0x5d
 808edaa:	f7fb fdb7 	bl	808a91c <mbedtls_ssl_write_version>
    *p++ = (unsigned char)( t >>  8 );
    *p++ = (unsigned char)( t       );

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, current time: %lu", t ) );
#else
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
 808edae:	6823      	ldr	r3, [r4, #0]
 * Generate random bytes for ClientHello
 */
static int ssl_generate_random( mbedtls_ssl_context *ssl )
{
    int ret;
    unsigned char *p = ssl->handshake->randbytes;
 808edb0:	6b25      	ldr	r5, [r4, #48]	; 0x30
    *p++ = (unsigned char)( t >>  8 );
    *p++ = (unsigned char)( t       );

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, current time: %lu", t ) );
#else
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
 808edb2:	699f      	ldr	r7, [r3, #24]
 808edb4:	2204      	movs	r2, #4
 808edb6:	f505 71ba 	add.w	r1, r5, #372	; 0x174
 808edba:	69d8      	ldr	r0, [r3, #28]
 808edbc:	47b8      	blx	r7
 808edbe:	2800      	cmp	r0, #0
 808edc0:	f040 84cb 	bne.w	808f75a <mbedtls_ssl_handshake_client_step+0xa4a>
        return( ret );

    p += 4;
#endif /* MBEDTLS_HAVE_TIME */

    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 28 ) ) != 0 )
 808edc4:	6823      	ldr	r3, [r4, #0]
 808edc6:	221c      	movs	r2, #28
 808edc8:	699f      	ldr	r7, [r3, #24]
 808edca:	f505 71bc 	add.w	r1, r5, #376	; 0x178
 808edce:	69d8      	ldr	r0, [r3, #28]
 808edd0:	47b8      	blx	r7
 808edd2:	2800      	cmp	r0, #0
 808edd4:	f040 84c1 	bne.w	808f75a <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_generate_random", ret );
        return( ret );
    }

    memcpy( p, ssl->handshake->randbytes, 32 );
 808edd8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808edda:	1db1      	adds	r1, r6, #6
 808eddc:	f503 72ba 	add.w	r2, r3, #372	; 0x174
 808ede0:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 808ede4:	e1eb      	b.n	808f1be <mbedtls_ssl_handshake_client_step+0x4ae>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello" ) );

    buf = ssl->in_msg;

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808ede6:	4620      	mov	r0, r4
    int handshake_failure = 0;
    const mbedtls_ssl_ciphersuite_t *suite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello" ) );

    buf = ssl->in_msg;
 808ede8:	6e65      	ldr	r5, [r4, #100]	; 0x64

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808edea:	f7fb f873 	bl	8089ed4 <mbedtls_ssl_read_record>
 808edee:	2800      	cmp	r0, #0
 808edf0:	f040 84b3 	bne.w	808f75a <mbedtls_ssl_handshake_client_step+0xa4a>
        /* No alert on a read error. */
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 808edf4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808edf6:	2b16      	cmp	r3, #22
 808edf8:	d006      	beq.n	808ee08 <mbedtls_ssl_handshake_client_step+0xf8>
        }
#endif /* MBEDTLS_SSL_RENEGOTIATION */

        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 808edfa:	220a      	movs	r2, #10
 808edfc:	2102      	movs	r1, #2
 808edfe:	4620      	mov	r0, r4
 808ee00:	f7fa fe1a 	bl	8089a38 <mbedtls_ssl_send_alert_message>
 808ee04:	f000 bc5b 	b.w	808f6be <mbedtls_ssl_handshake_client_step+0x9ae>
            ssl->handshake->verify_cookie_len = 0;
        }
    }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    if( ssl->in_hslen < 38 + mbedtls_ssl_hs_hdr_len( ssl ) ||
 808ee08:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 808ee0a:	2b29      	cmp	r3, #41	; 0x29
 808ee0c:	d938      	bls.n	808ee80 <mbedtls_ssl_handshake_client_step+0x170>
 808ee0e:	782b      	ldrb	r3, [r5, #0]
 808ee10:	2b02      	cmp	r3, #2
 808ee12:	d135      	bne.n	808ee80 <mbedtls_ssl_handshake_client_step+0x170>
     */
    buf += mbedtls_ssl_hs_hdr_len( ssl );

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
                      ssl->conf->transport, buf + 0 );
 808ee14:	4621      	mov	r1, r4
 808ee16:	f851 3b0c 	ldr.w	r3, [r1], #12
     * 37+n . 37+n  compression_method
     *
     * 38+n . 39+n  extensions length (optional)
     * 40+n .  ..   extensions
     */
    buf += mbedtls_ssl_hs_hdr_len( ssl );
 808ee1a:	f105 0804 	add.w	r8, r5, #4

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
                      ssl->conf->transport, buf + 0 );
 808ee1e:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 808ee22:	f104 0008 	add.w	r0, r4, #8
 808ee26:	4643      	mov	r3, r8
 808ee28:	f3c2 0240 	ubfx	r2, r2, #1, #1
 808ee2c:	f7fb fd79 	bl	808a922 <mbedtls_ssl_read_version>

    if( ssl->major_ver < ssl->conf->min_major_ver ||
 808ee30:	6823      	ldr	r3, [r4, #0]
 808ee32:	68a2      	ldr	r2, [r4, #8]
 808ee34:	f893 105e 	ldrb.w	r1, [r3, #94]	; 0x5e
 808ee38:	428a      	cmp	r2, r1
 808ee3a:	f2c0 830f 	blt.w	808f45c <mbedtls_ssl_handshake_client_step+0x74c>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 808ee3e:	68e1      	ldr	r1, [r4, #12]

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
                      ssl->conf->transport, buf + 0 );

    if( ssl->major_ver < ssl->conf->min_major_ver ||
 808ee40:	f893 005f 	ldrb.w	r0, [r3, #95]	; 0x5f
 808ee44:	4281      	cmp	r1, r0
 808ee46:	f2c0 8309 	blt.w	808f45c <mbedtls_ssl_handshake_client_step+0x74c>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 808ee4a:	f893 005c 	ldrb.w	r0, [r3, #92]	; 0x5c
 808ee4e:	4282      	cmp	r2, r0
 808ee50:	f300 8304 	bgt.w	808f45c <mbedtls_ssl_handshake_client_step+0x74c>
        ssl->major_ver > ssl->conf->max_major_ver ||
 808ee54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 808ee58:	4299      	cmp	r1, r3
 808ee5a:	f300 82ff 	bgt.w	808f45c <mbedtls_ssl_handshake_client_step+0x74c>
                           ( (uint32_t) buf[2] << 24 ) |
                           ( (uint32_t) buf[3] << 16 ) |
                           ( (uint32_t) buf[4] <<  8 ) |
                           ( (uint32_t) buf[5]       ) ) );

    memcpy( ssl->handshake->randbytes + 32, buf + 2, 32 );
 808ee5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808ee60:	1daa      	adds	r2, r5, #6
 808ee62:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 808ee66:	f105 0126 	add.w	r1, r5, #38	; 0x26
 808ee6a:	f852 0b04 	ldr.w	r0, [r2], #4
 808ee6e:	428a      	cmp	r2, r1
 808ee70:	f843 0b04 	str.w	r0, [r3], #4
 808ee74:	d1f9      	bne.n	808ee6a <mbedtls_ssl_handshake_client_step+0x15a>

    n = buf[34];
 808ee76:	f895 6026 	ldrb.w	r6, [r5, #38]	; 0x26

    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, random bytes", buf + 2, 32 );

    if( n > 32 )
 808ee7a:	2e20      	cmp	r6, #32
 808ee7c:	f240 82f5 	bls.w	808f46a <mbedtls_ssl_handshake_client_step+0x75a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 808ee80:	2232      	movs	r2, #50	; 0x32
 808ee82:	e03a      	b.n	808eefa <mbedtls_ssl_handshake_client_step+0x1ea>
    }

    /*
     * Initialize update checksum functions
     */
    ssl->transform_negotiate->ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( i );
 808ee84:	4648      	mov	r0, r9
 808ee86:	f8d4 a040 	ldr.w	sl, [r4, #64]	; 0x40
 808ee8a:	f7f7 f90d 	bl	80860a8 <mbedtls_ssl_ciphersuite_from_id>
 808ee8e:	f8ca 0000 	str.w	r0, [sl]

    if( ssl->transform_negotiate->ciphersuite_info == NULL )
 808ee92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808ee94:	6819      	ldr	r1, [r3, #0]
 808ee96:	b939      	cbnz	r1, 808eea8 <mbedtls_ssl_handshake_client_step+0x198>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ciphersuite info for %04x not found", i ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
 808ee98:	2250      	movs	r2, #80	; 0x50
 808ee9a:	2102      	movs	r1, #2
 808ee9c:	4620      	mov	r0, r4
 808ee9e:	f7fa fdcb 	bl	8089a38 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 808eea2:	48ae      	ldr	r0, [pc, #696]	; (808f15c <mbedtls_ssl_handshake_client_step+0x44c>)
 808eea4:	f000 bc59 	b.w	808f75a <mbedtls_ssl_handshake_client_step+0xa4a>
    }

    mbedtls_ssl_optimize_checksum( ssl, ssl->transform_negotiate->ciphersuite_info );
 808eea8:	4620      	mov	r0, r4
 808eeaa:	f7fb f8df 	bl	808a06c <mbedtls_ssl_optimize_checksum>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
 808eeae:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 808eeb2:	3527      	adds	r5, #39	; 0x27
 808eeb4:	f8da 31e4 	ldr.w	r3, [sl, #484]	; 0x1e4
 808eeb8:	2b00      	cmp	r3, #0
 808eeba:	f040 8311 	bne.w	808f4e0 <mbedtls_ssl_handshake_client_step+0x7d0>
        ssl->session_negotiate->ciphersuite != i ||
        ssl->session_negotiate->compression != comp ||
        ssl->session_negotiate->id_len != n ||
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
    {
        ssl->state++;
 808eebe:	6863      	ldr	r3, [r4, #4]
        ssl->session_negotiate->start = mbedtls_time( NULL );
#endif
        ssl->session_negotiate->ciphersuite = i;
        ssl->session_negotiate->compression = comp;
        ssl->session_negotiate->id_len = n;
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 808eec0:	4629      	mov	r1, r5
        ssl->session_negotiate->ciphersuite != i ||
        ssl->session_negotiate->compression != comp ||
        ssl->session_negotiate->id_len != n ||
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
    {
        ssl->state++;
 808eec2:	3301      	adds	r3, #1
 808eec4:	6063      	str	r3, [r4, #4]
        ssl->handshake->resume = 0;
 808eec6:	2300      	movs	r3, #0
 808eec8:	f8ca 31e4 	str.w	r3, [sl, #484]	; 0x1e4
#if defined(MBEDTLS_HAVE_TIME)
        ssl->session_negotiate->start = mbedtls_time( NULL );
#endif
        ssl->session_negotiate->ciphersuite = i;
 808eecc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808eece:	f8c2 9000 	str.w	r9, [r2]
        ssl->session_negotiate->compression = comp;
 808eed2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808eed4:	6053      	str	r3, [r2, #4]
        ssl->session_negotiate->id_len = n;
 808eed6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 808eed8:	4632      	mov	r2, r6
#if defined(MBEDTLS_HAVE_TIME)
        ssl->session_negotiate->start = mbedtls_time( NULL );
#endif
        ssl->session_negotiate->ciphersuite = i;
        ssl->session_negotiate->compression = comp;
        ssl->session_negotiate->id_len = n;
 808eeda:	609e      	str	r6, [r3, #8]
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 808eedc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 808eede:	300c      	adds	r0, #12
 808eee0:	f005 f83f 	bl	8093f62 <memcpy>
     * Perform cipher suite validation in same way as in ssl_write_client_hello.
     */
    i = 0;
    while( 1 )
    {
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i] == 0 )
 808eee4:	6823      	ldr	r3, [r4, #0]
 808eee6:	68e2      	ldr	r2, [r4, #12]
 808eee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 808eeec:	3b04      	subs	r3, #4
 808eeee:	f853 0f04 	ldr.w	r0, [r3, #4]!
 808eef2:	2800      	cmp	r0, #0
 808eef4:	f040 831b 	bne.w	808f52e <mbedtls_ssl_handshake_client_step+0x81e>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
 808eef8:	222f      	movs	r2, #47	; 0x2f
 808eefa:	2102      	movs	r1, #2
 808eefc:	4620      	mov	r0, r4
 808eefe:	f7fa fd9b 	bl	8089a38 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 808ef02:	4897      	ldr	r0, [pc, #604]	; (808f160 <mbedtls_ssl_handshake_client_step+0x450>)
 808ef04:	f000 bc29 	b.w	808f75a <mbedtls_ssl_handshake_client_step+0xa4a>
       case MBEDTLS_SSL_SERVER_HELLO:
           ret = ssl_parse_server_hello( ssl );
           break;

       case MBEDTLS_SSL_SERVER_CERTIFICATE:
           ret = mbedtls_ssl_parse_certificate( ssl );
 808ef08:	4620      	mov	r0, r4
 808ef0a:	f7fb fc01 	bl	808a710 <mbedtls_ssl_parse_certificate>
           break;
 808ef0e:	f000 bc24 	b.w	808f75a <mbedtls_ssl_handshake_client_step+0xa4a>

static int ssl_parse_server_key_exchange( mbedtls_ssl_context *ssl )
{
    int ret;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 808ef12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808ef14:	681d      	ldr	r5, [r3, #0]
    unsigned char *p = NULL, *end = NULL;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server key exchange" ) );

#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 808ef16:	7aab      	ldrb	r3, [r5, #10]
 808ef18:	2b01      	cmp	r3, #1
 808ef1a:	d101      	bne.n	808ef20 <mbedtls_ssl_handshake_client_step+0x210>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse server key exchange" ) );
        ssl->state++;
 808ef1c:	2305      	movs	r3, #5
 808ef1e:	e386      	b.n	808f62e <mbedtls_ssl_handshake_client_step+0x91e>
    ((void) p);
    ((void) end);
#endif /* MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808ef20:	4620      	mov	r0, r4
 808ef22:	f7fa ffd7 	bl	8089ed4 <mbedtls_ssl_read_record>
 808ef26:	2800      	cmp	r0, #0
 808ef28:	f040 8417 	bne.w	808f75a <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 808ef2c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808ef2e:	2b16      	cmp	r3, #22
 808ef30:	f47f af63 	bne.w	808edfa <mbedtls_ssl_handshake_client_step+0xea>

    /*
     * ServerKeyExchange may be skipped with PSK and RSA-PSK when the server
     * doesn't use a psk_identity_hint
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE )
 808ef34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 808ef36:	781b      	ldrb	r3, [r3, #0]
 808ef38:	2b0c      	cmp	r3, #12
 808ef3a:	f000 813e 	beq.w	808f1ba <mbedtls_ssl_handshake_client_step+0x4aa>
    {
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 808ef3e:	7aab      	ldrb	r3, [r5, #10]
 808ef40:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 808ef44:	2b05      	cmp	r3, #5
 808ef46:	f47f af58 	bne.w	808edfa <mbedtls_ssl_handshake_client_step+0xea>
            ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK )
        {
            /* Current message is probably either
             * CertificateRequest or ServerHelloDone */
            ssl->keep_current_message = 1;
 808ef4a:	2301      	movs	r3, #1
 808ef4c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        }
    }
#endif /* MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED */

exit:
    ssl->state++;
 808ef50:	6863      	ldr	r3, [r4, #4]
 808ef52:	3301      	adds	r3, #1
 808ef54:	6063      	str	r3, [r4, #4]
 808ef56:	f000 bc00 	b.w	808f75a <mbedtls_ssl_handshake_client_step+0xa4a>
    int ret;
    unsigned char *buf;
    size_t n = 0;
    size_t cert_type_len = 0, dn_len = 0;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 808ef5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808ef5c:	681b      	ldr	r3, [r3, #0]
 808ef5e:	7a9b      	ldrb	r3, [r3, #10]
 808ef60:	3b01      	subs	r3, #1
 808ef62:	b2db      	uxtb	r3, r3
 808ef64:	2b09      	cmp	r3, #9
 808ef66:	f200 8361 	bhi.w	808f62c <mbedtls_ssl_handshake_client_step+0x91c>
 808ef6a:	f240 320f 	movw	r2, #783	; 0x30f
 808ef6e:	2501      	movs	r5, #1
 808ef70:	fa05 f303 	lsl.w	r3, r5, r3
 808ef74:	401a      	ands	r2, r3
 808ef76:	2a00      	cmp	r2, #0
 808ef78:	f000 8358 	beq.w	808f62c <mbedtls_ssl_handshake_client_step+0x91c>
 808ef7c:	e35a      	b.n	808f634 <mbedtls_ssl_handshake_client_step+0x924>
{
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello done" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808ef7e:	4620      	mov	r0, r4
 808ef80:	f7fa ffa8 	bl	8089ed4 <mbedtls_ssl_read_record>
 808ef84:	2800      	cmp	r0, #0
 808ef86:	f040 83e8 	bne.w	808f75a <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 808ef8a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808ef8c:	2b16      	cmp	r3, #22
 808ef8e:	f040 8396 	bne.w	808f6be <mbedtls_ssl_handshake_client_step+0x9ae>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 808ef92:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 808ef94:	2b04      	cmp	r3, #4
 808ef96:	f040 838b 	bne.w	808f6b0 <mbedtls_ssl_handshake_client_step+0x9a0>
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
 808ef9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 808ef9c:	781b      	ldrb	r3, [r3, #0]
 808ef9e:	2b0e      	cmp	r3, #14
 808efa0:	f040 8386 	bne.w	808f6b0 <mbedtls_ssl_handshake_client_step+0x9a0>
 808efa4:	e7d4      	b.n	808ef50 <mbedtls_ssl_handshake_client_step+0x240>
        *      ( CertificateVerify  )
        *        ChangeCipherSpec
        *        Finished
        */
       case MBEDTLS_SSL_CLIENT_CERTIFICATE:
           ret = mbedtls_ssl_write_certificate( ssl );
 808efa6:	4620      	mov	r0, r4
 808efa8:	f7fa ffb2 	bl	8089f10 <mbedtls_ssl_write_certificate>
           break;
 808efac:	e3d5      	b.n	808f75a <mbedtls_ssl_handshake_client_step+0xa4a>
static int ssl_write_client_key_exchange( mbedtls_ssl_context *ssl )
{
    int ret;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 808efae:	6c23      	ldr	r3, [r4, #64]	; 0x40
        }
    }
    else
#endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */
#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 808efb0:	681b      	ldr	r3, [r3, #0]
 808efb2:	7a9f      	ldrb	r7, [r3, #10]
 808efb4:	2f01      	cmp	r7, #1
 808efb6:	f040 8100 	bne.w	808f1ba <mbedtls_ssl_handshake_client_step+0x4aa>
     *  struct {
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 808efba:	6820      	ldr	r0, [r4, #0]
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
    unsigned char *p = ssl->handshake->premaster + pms_offset;
 808efbc:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 808efc0:	68e3      	ldr	r3, [r4, #12]
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 808efc2:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
    unsigned char *p = ssl->handshake->premaster + pms_offset;
 808efc6:	f508 76da 	add.w	r6, r8, #436	; 0x1b4
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 808efca:	2b00      	cmp	r3, #0
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 808efcc:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 808efd0:	4633      	mov	r3, r6
 808efd2:	f3c2 0240 	ubfx	r2, r2, #1, #1
 808efd6:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 808efda:	bf14      	ite	ne
 808efdc:	2502      	movne	r5, #2
 808efde:	2500      	moveq	r5, #0
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 808efe0:	f7fb fc9c 	bl	808a91c <mbedtls_ssl_write_version>

    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p + 2, 46 ) ) != 0 )
 808efe4:	6823      	ldr	r3, [r4, #0]
 808efe6:	222e      	movs	r2, #46	; 0x2e
 808efe8:	f8d3 9018 	ldr.w	r9, [r3, #24]
 808efec:	f508 71db 	add.w	r1, r8, #438	; 0x1b6
 808eff0:	69d8      	ldr	r0, [r3, #28]
 808eff2:	47c8      	blx	r9
 808eff4:	2800      	cmp	r0, #0
 808eff6:	f040 83b0 	bne.w	808f75a <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "f_rng", ret );
        return( ret );
    }

    ssl->handshake->pmslen = 48;
 808effa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808effc:	2230      	movs	r2, #48	; 0x30
 808effe:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

    if( ssl->session_negotiate->peer_cert == NULL )
 808f002:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 808f004:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 808f006:	2800      	cmp	r0, #0
 808f008:	f000 8359 	beq.w	808f6be <mbedtls_ssl_handshake_client_step+0x9ae>
    }

    /*
     * Now write it out, encrypted
     */
    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
 808f00c:	4639      	mov	r1, r7
 808f00e:	30bc      	adds	r0, #188	; 0xbc
 808f010:	f7fd f912 	bl	808c238 <mbedtls_pk_can_do>
 808f014:	2800      	cmp	r0, #0
 808f016:	f000 8354 	beq.w	808f6c2 <mbedtls_ssl_handshake_client_step+0x9b2>

    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
                            p, ssl->handshake->pmslen,
                            ssl->out_msg + offset + len_bytes, olen,
                            MBEDTLS_SSL_MAX_CONTENT_LEN - offset - len_bytes,
                            ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 808f01a:	6822      	ldr	r2, [r4, #0]
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
    }

    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 808f01c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 808f01e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 808f020:	9104      	str	r1, [sp, #16]
 808f022:	69d1      	ldr	r1, [r2, #28]
 808f024:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 808f026:	9103      	str	r1, [sp, #12]
 808f028:	6992      	ldr	r2, [r2, #24]
 808f02a:	f8d4 7098 	ldr.w	r7, [r4, #152]	; 0x98
 808f02e:	9202      	str	r2, [sp, #8]
 808f030:	f5c5 52ff 	rsb	r2, r5, #8160	; 0x1fe0
 808f034:	321c      	adds	r2, #28
 808f036:	9201      	str	r2, [sp, #4]
 808f038:	aa08      	add	r2, sp, #32
 808f03a:	9200      	str	r2, [sp, #0]
 808f03c:	9a04      	ldr	r2, [sp, #16]
 808f03e:	1d2b      	adds	r3, r5, #4
 808f040:	443b      	add	r3, r7
 808f042:	f8d2 2170 	ldr.w	r2, [r2, #368]	; 0x170
 808f046:	4631      	mov	r1, r6
 808f048:	30bc      	adds	r0, #188	; 0xbc
 808f04a:	f7fd f95f 	bl	808c30c <mbedtls_pk_encrypt>
 808f04e:	2800      	cmp	r0, #0
 808f050:	f040 8383 	bne.w	808f75a <mbedtls_ssl_handshake_client_step+0xa4a>
        return( ret );
    }

#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( len_bytes == 2 )
 808f054:	2d00      	cmp	r5, #0
 808f056:	f000 8336 	beq.w	808f6c6 <mbedtls_ssl_handshake_client_step+0x9b6>
    {
        ssl->out_msg[offset+0] = (unsigned char)( *olen >> 8 );
 808f05a:	9b08      	ldr	r3, [sp, #32]
 808f05c:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 808f060:	0a19      	lsrs	r1, r3, #8
 808f062:	7111      	strb	r1, [r2, #4]
        ssl->out_msg[offset+1] = (unsigned char)( *olen      );
 808f064:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 808f068:	7153      	strb	r3, [r2, #5]
        *olen += 2;
 808f06a:	3302      	adds	r3, #2
 808f06c:	9308      	str	r3, [sp, #32]
 808f06e:	e32a      	b.n	808f6c6 <mbedtls_ssl_handshake_client_step+0x9b6>
#else
static int ssl_write_certificate_verify( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 808f070:	6c23      	ldr	r3, [r4, #64]	; 0x40
    mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;
    unsigned int hashlen;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate verify" ) );

    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 808f072:	4620      	mov	r0, r4
#else
static int ssl_write_certificate_verify( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 808f074:	681d      	ldr	r5, [r3, #0]
    size_t n = 0, offset = 0;
 808f076:	2300      	movs	r3, #0
 808f078:	9307      	str	r3, [sp, #28]
    mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;
    unsigned int hashlen;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate verify" ) );

    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 808f07a:	f7fa f93d 	bl	80892f8 <mbedtls_ssl_derive_keys>
 808f07e:	2800      	cmp	r0, #0
 808f080:	f040 836b 	bne.w	808f75a <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
        return( ret );
    }

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 808f084:	7aab      	ldrb	r3, [r5, #10]
 808f086:	1f5a      	subs	r2, r3, #5
 808f088:	2a03      	cmp	r2, #3
 808f08a:	d901      	bls.n	808f090 <mbedtls_ssl_handshake_client_step+0x380>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
 808f08c:	2b0b      	cmp	r3, #11
 808f08e:	d102      	bne.n	808f096 <mbedtls_ssl_handshake_client_step+0x386>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
        ssl->state++;
 808f090:	6863      	ldr	r3, [r4, #4]
 808f092:	3301      	adds	r3, #1
 808f094:	e2cb      	b.n	808f62e <mbedtls_ssl_handshake_client_step+0x91e>
        return( 0 );
    }

    if( ssl->client_auth == 0 || mbedtls_ssl_own_cert( ssl ) == NULL )
 808f096:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 808f09a:	2b00      	cmp	r3, #0
 808f09c:	d0f8      	beq.n	808f090 <mbedtls_ssl_handshake_client_step+0x380>

static inline mbedtls_x509_crt *mbedtls_ssl_own_cert( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 808f09e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 808f0a0:	b10d      	cbz	r5, 808f0a6 <mbedtls_ssl_handshake_client_step+0x396>
 808f0a2:	686b      	ldr	r3, [r5, #4]
 808f0a4:	b91b      	cbnz	r3, 808f0ae <mbedtls_ssl_handshake_client_step+0x39e>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
 808f0a6:	6823      	ldr	r3, [r4, #0]
 808f0a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return( key_cert == NULL ? NULL : key_cert->cert );
 808f0aa:	2b00      	cmp	r3, #0
 808f0ac:	d0f0      	beq.n	808f090 <mbedtls_ssl_handshake_client_step+0x380>
 808f0ae:	681b      	ldr	r3, [r3, #0]
 808f0b0:	2b00      	cmp	r3, #0
 808f0b2:	d0ed      	beq.n	808f090 <mbedtls_ssl_handshake_client_step+0x380>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
        ssl->state++;
        return( 0 );
    }

    if( mbedtls_ssl_own_key( ssl ) == NULL )
 808f0b4:	4620      	mov	r0, r4
 808f0b6:	f7ff fe20 	bl	808ecfa <mbedtls_ssl_own_key>
 808f0ba:	2800      	cmp	r0, #0
 808f0bc:	d044      	beq.n	808f148 <mbedtls_ssl_handshake_client_step+0x438>
    }

    /*
     * Make an RSA signature of the handshake digests
     */
    ssl->handshake->calc_verify( ssl, hash );
 808f0be:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
 808f0c2:	a908      	add	r1, sp, #32
 808f0c4:	4620      	mov	r0, r4
 808f0c6:	4798      	blx	r3
    }
    else
#endif /* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 || \
          MBEDTLS_SSL_PROTO_TLS1_1 */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 808f0c8:	68e3      	ldr	r3, [r4, #12]
 808f0ca:	2b03      	cmp	r3, #3
 808f0cc:	d175      	bne.n	808f1ba <mbedtls_ssl_handshake_client_step+0x4aa>
         * shortcut.
         *
         * Reason: Otherwise we should have running hashes for SHA512 and SHA224
         *         in order to satisfy 'weird' needs from the server side.
         */
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
 808f0ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
        }
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
 808f0d0:	4620      	mov	r0, r4
         * shortcut.
         *
         * Reason: Otherwise we should have running hashes for SHA512 and SHA224
         *         in order to satisfy 'weird' needs from the server side.
         */
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
 808f0d2:	681b      	ldr	r3, [r3, #0]
 808f0d4:	7a5d      	ldrb	r5, [r3, #9]
 808f0d6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 808f0da:	2d07      	cmp	r5, #7
            MBEDTLS_MD_SHA384 )
        {
            md_alg = MBEDTLS_MD_SHA384;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
 808f0dc:	bf0b      	itete	eq
 808f0de:	2205      	moveq	r2, #5
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
 808f0e0:	2204      	movne	r2, #4
         */
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
            MBEDTLS_MD_SHA384 )
        {
            md_alg = MBEDTLS_MD_SHA384;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
 808f0e2:	711a      	strbeq	r2, [r3, #4]
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
 808f0e4:	711a      	strbne	r2, [r3, #4]
            md_alg = MBEDTLS_MD_SHA384;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
 808f0e6:	bf18      	it	ne
 808f0e8:	2506      	movne	r5, #6
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
        }
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
 808f0ea:	f7ff fe06 	bl	808ecfa <mbedtls_ssl_own_key>
 808f0ee:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
 808f0f2:	f7fb fad4 	bl	808a69e <mbedtls_ssl_sig_from_pk>
 808f0f6:	7170      	strb	r0, [r6, #5]
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 808f0f8:	4620      	mov	r0, r4
 808f0fa:	f7ff fdfe 	bl	808ecfa <mbedtls_ssl_own_key>
                         ssl->out_msg + 6 + offset, &n,
                         ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 808f0fe:	6823      	ldr	r3, [r4, #0]
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 808f100:	4629      	mov	r1, r5
 808f102:	69da      	ldr	r2, [r3, #28]
 808f104:	9203      	str	r2, [sp, #12]
 808f106:	699b      	ldr	r3, [r3, #24]
 808f108:	aa08      	add	r2, sp, #32
 808f10a:	9302      	str	r3, [sp, #8]
 808f10c:	ab07      	add	r3, sp, #28
 808f10e:	9301      	str	r3, [sp, #4]
 808f110:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 808f114:	3308      	adds	r3, #8
 808f116:	9300      	str	r3, [sp, #0]
 808f118:	2300      	movs	r3, #0
 808f11a:	f7fd f8c3 	bl	808c2a4 <mbedtls_pk_sign>
 808f11e:	2800      	cmp	r0, #0
 808f120:	f040 831b 	bne.w	808f75a <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_pk_sign", ret );
        return( ret );
    }

    ssl->out_msg[4 + offset] = (unsigned char)( n >> 8 );
 808f124:	9b07      	ldr	r3, [sp, #28]
 808f126:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 808f12a:	0a19      	lsrs	r1, r3, #8
 808f12c:	7191      	strb	r1, [r2, #6]
    ssl->out_msg[5 + offset] = (unsigned char)( n      );
 808f12e:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 808f132:	71d3      	strb	r3, [r2, #7]

    ssl->out_msglen  = 6 + n + offset;
 808f134:	3308      	adds	r3, #8
 808f136:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 808f13a:	2316      	movs	r3, #22
 808f13c:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE_VERIFY;
 808f140:	220f      	movs	r2, #15
 808f142:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 808f146:	e2c8      	b.n	808f6da <mbedtls_ssl_handshake_client_step+0x9ca>
    }

    if( mbedtls_ssl_own_key( ssl ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no private key for certificate" ) );
        return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
 808f148:	4806      	ldr	r0, [pc, #24]	; (808f164 <mbedtls_ssl_handshake_client_step+0x454>)
 808f14a:	e306      	b.n	808f75a <mbedtls_ssl_handshake_client_step+0xa4a>
       case MBEDTLS_SSL_CERTIFICATE_VERIFY:
           ret = ssl_write_certificate_verify( ssl );
           break;

       case MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC:
           ret = mbedtls_ssl_write_change_cipher_spec( ssl );
 808f14c:	4620      	mov	r0, r4
 808f14e:	f7fa ff43 	bl	8089fd8 <mbedtls_ssl_write_change_cipher_spec>
           break;
 808f152:	e302      	b.n	808f75a <mbedtls_ssl_handshake_client_step+0xa4a>

       case MBEDTLS_SSL_CLIENT_FINISHED:
           ret = mbedtls_ssl_write_finished( ssl );
 808f154:	4620      	mov	r0, r4
 808f156:	f7fa ff97 	bl	808a088 <mbedtls_ssl_write_finished>
           break;
 808f15a:	e2fe      	b.n	808f75a <mbedtls_ssl_handshake_client_step+0xa4a>
 808f15c:	ffff8f00 	.word	0xffff8f00
 808f160:	ffff8680 	.word	0xffff8680
 808f164:	ffff8a00 	.word	0xffff8a00
    unsigned char *ticket;
    const unsigned char *msg;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse new session ticket" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808f168:	4620      	mov	r0, r4
 808f16a:	f7fa feb3 	bl	8089ed4 <mbedtls_ssl_read_record>
 808f16e:	2800      	cmp	r0, #0
 808f170:	f040 82f3 	bne.w	808f75a <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 808f174:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808f176:	2b16      	cmp	r3, #22
 808f178:	f47f ae3f 	bne.w	808edfa <mbedtls_ssl_handshake_client_step+0xea>
     *
     * 0  .  3   ticket_lifetime_hint
     * 4  .  5   ticket_len (n)
     * 6  .  5+n ticket content
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||
 808f17c:	6e67      	ldr	r7, [r4, #100]	; 0x64
 808f17e:	783b      	ldrb	r3, [r7, #0]
 808f180:	2b04      	cmp	r3, #4
 808f182:	d103      	bne.n	808f18c <mbedtls_ssl_handshake_client_step+0x47c>
        ssl->in_hslen < 6 + mbedtls_ssl_hs_hdr_len( ssl ) )
 808f184:	6fa3      	ldr	r3, [r4, #120]	; 0x78
     *
     * 0  .  3   ticket_lifetime_hint
     * 4  .  5   ticket_len (n)
     * 6  .  5+n ticket content
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||
 808f186:	2b09      	cmp	r3, #9
 808f188:	f200 82af 	bhi.w	808f6ea <mbedtls_ssl_handshake_client_step+0x9da>

    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad new session ticket message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 808f18c:	2232      	movs	r2, #50	; 0x32
 808f18e:	2102      	movs	r1, #2
 808f190:	4620      	mov	r0, r4
 808f192:	f7fa fc51 	bl	8089a38 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
 808f196:	48c1      	ldr	r0, [pc, #772]	; (808f49c <mbedtls_ssl_handshake_client_step+0x78c>)
 808f198:	e2df      	b.n	808f75a <mbedtls_ssl_handshake_client_step+0xa4a>
           ret = ssl_parse_new_session_ticket( ssl );
           break;
#endif

       case MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC:
           ret = mbedtls_ssl_parse_change_cipher_spec( ssl );
 808f19a:	4620      	mov	r0, r4
 808f19c:	f7fa ff2a 	bl	8089ff4 <mbedtls_ssl_parse_change_cipher_spec>
           break;
 808f1a0:	e2db      	b.n	808f75a <mbedtls_ssl_handshake_client_step+0xa4a>

       case MBEDTLS_SSL_SERVER_FINISHED:
           ret = mbedtls_ssl_parse_finished( ssl );
 808f1a2:	4620      	mov	r0, r4
 808f1a4:	f7fa ffb8 	bl	808a118 <mbedtls_ssl_parse_finished>
           break;
 808f1a8:	e2d7      	b.n	808f75a <mbedtls_ssl_handshake_client_step+0xa4a>

       case MBEDTLS_SSL_FLUSH_BUFFERS:
           MBEDTLS_SSL_DEBUG_MSG( 2, ( "handshake: done" ) );
           ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 808f1aa:	230f      	movs	r3, #15
 808f1ac:	e23f      	b.n	808f62e <mbedtls_ssl_handshake_client_step+0x91e>
           break;

       case MBEDTLS_SSL_HANDSHAKE_WRAPUP:
           mbedtls_ssl_handshake_wrapup( ssl );
 808f1ae:	4620      	mov	r0, r4
 808f1b0:	f7fb f8f0 	bl	808a394 <mbedtls_ssl_handshake_wrapup>
 808f1b4:	e23c      	b.n	808f630 <mbedtls_ssl_handshake_client_step+0x920>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );

    if( ssl->conf->f_rng == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "no RNG provided") );
        return( MBEDTLS_ERR_SSL_NO_RNG );
 808f1b6:	48ba      	ldr	r0, [pc, #744]	; (808f4a0 <mbedtls_ssl_handshake_client_step+0x790>)
 808f1b8:	e2cf      	b.n	808f75a <mbedtls_ssl_handshake_client_step+0xa4a>
    }
    else
#endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 808f1ba:	48ba      	ldr	r0, [pc, #744]	; (808f4a4 <mbedtls_ssl_handshake_client_step+0x794>)
 808f1bc:	e2cd      	b.n	808f75a <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_generate_random", ret );
        return( ret );
    }

    memcpy( p, ssl->handshake->randbytes, 32 );
 808f1be:	f852 0b04 	ldr.w	r0, [r2], #4
 808f1c2:	429a      	cmp	r2, r3
 808f1c4:	f841 0b04 	str.w	r0, [r1], #4
 808f1c8:	d1f9      	bne.n	808f1be <mbedtls_ssl_handshake_client_step+0x4ae>
     *   ..   . ..    compression methods length (1 byte)
     *   ..   . ..    compression methods
     *   ..   . ..    extensions length (2 bytes)
     *   ..   . ..    extensions
     */
    n = ssl->session_negotiate->id_len;
 808f1ca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 808f1cc:	688b      	ldr	r3, [r1, #8]

    if( n < 16 || n > 32 ||
 808f1ce:	f1a3 0210 	sub.w	r2, r3, #16
 808f1d2:	2a10      	cmp	r2, #16
 808f1d4:	d806      	bhi.n	808f1e4 <mbedtls_ssl_handshake_client_step+0x4d4>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->handshake->resume == 0 )
 808f1d6:	6b22      	ldr	r2, [r4, #48]	; 0x30
     *   ..   . ..    extensions length (2 bytes)
     *   ..   . ..    extensions
     */
    n = ssl->session_negotiate->id_len;

    if( n < 16 || n > 32 ||
 808f1d8:	f8d2 21e4 	ldr.w	r2, [r2, #484]	; 0x1e4
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->handshake->resume == 0 )
    {
        n = 0;
 808f1dc:	2a00      	cmp	r2, #0
 808f1de:	bf08      	it	eq
 808f1e0:	2300      	moveq	r3, #0
 808f1e2:	e000      	b.n	808f1e6 <mbedtls_ssl_handshake_client_step+0x4d6>
 808f1e4:	2300      	movs	r3, #0
     */
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        if( ssl->session_negotiate->ticket != NULL &&
 808f1e6:	6e4a      	ldr	r2, [r1, #100]	; 0x64
 808f1e8:	b16a      	cbz	r2, 808f206 <mbedtls_ssl_handshake_client_step+0x4f6>
 808f1ea:	6e8a      	ldr	r2, [r1, #104]	; 0x68
 808f1ec:	b15a      	cbz	r2, 808f206 <mbedtls_ssl_handshake_client_step+0x4f6>
                ssl->session_negotiate->ticket_len != 0 )
        {
            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->session_negotiate->id, 32 );
 808f1ee:	6823      	ldr	r3, [r4, #0]
 808f1f0:	2220      	movs	r2, #32
 808f1f2:	699d      	ldr	r5, [r3, #24]
 808f1f4:	310c      	adds	r1, #12
 808f1f6:	69d8      	ldr	r0, [r3, #28]
 808f1f8:	47a8      	blx	r5

            if( ret != 0 )
 808f1fa:	2800      	cmp	r0, #0
 808f1fc:	f040 82ad 	bne.w	808f75a <mbedtls_ssl_handshake_client_step+0xa4a>
                return( ret );

            ssl->session_negotiate->id_len = n = 32;
 808f200:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808f202:	2320      	movs	r3, #32
 808f204:	6093      	str	r3, [r2, #8]
        }
    }
#endif /* MBEDTLS_SSL_SESSION_TICKETS */

    *p++ = (unsigned char) n;
 808f206:	f106 0527 	add.w	r5, r6, #39	; 0x27
 808f20a:	f886 3026 	strb.w	r3, [r6, #38]	; 0x26

    for( i = 0; i < n; i++ )
 808f20e:	2200      	movs	r2, #0
 808f210:	4293      	cmp	r3, r2
 808f212:	d005      	beq.n	808f220 <mbedtls_ssl_handshake_client_step+0x510>
        *p++ = ssl->session_negotiate->id[i];
 808f214:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 808f216:	4411      	add	r1, r2
 808f218:	7b09      	ldrb	r1, [r1, #12]
 808f21a:	54a9      	strb	r1, [r5, r2]
    }
#endif /* MBEDTLS_SSL_SESSION_TICKETS */

    *p++ = (unsigned char) n;

    for( i = 0; i < n; i++ )
 808f21c:	3201      	adds	r2, #1
 808f21e:	e7f7      	b.n	808f210 <mbedtls_ssl_handshake_client_step+0x500>
 808f220:	441d      	add	r5, r3
#endif

    /*
     * Ciphersuite list
     */
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];
 808f222:	68e2      	ldr	r2, [r4, #12]
 808f224:	6823      	ldr	r3, [r4, #0]

    /* Skip writing ciphersuite length for now */
    n = 0;
    q = p;
    p += 2;
 808f226:	f105 0902 	add.w	r9, r5, #2
 808f22a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     * Ciphersuite list
     */
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];

    /* Skip writing ciphersuite length for now */
    n = 0;
 808f22e:	2700      	movs	r7, #0
 808f230:	f1a3 0804 	sub.w	r8, r3, #4
    q = p;
    p += 2;

    for( i = 0; ciphersuites[i] != 0; i++ )
 808f234:	f858 bf04 	ldr.w	fp, [r8, #4]!
 808f238:	f1bb 0f00 	cmp.w	fp, #0
 808f23c:	d01c      	beq.n	808f278 <mbedtls_ssl_handshake_client_step+0x568>
    {
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );
 808f23e:	4658      	mov	r0, fp
 808f240:	f7f6 ff32 	bl	80860a8 <mbedtls_ssl_ciphersuite_from_id>

        if( ssl_validate_ciphersuite( ciphersuite_info, ssl,
                                      ssl->conf->min_minor_ver,
 808f244:	6822      	ldr	r2, [r4, #0]

    for( i = 0; ciphersuites[i] != 0; i++ )
    {
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );

        if( ssl_validate_ciphersuite( ciphersuite_info, ssl,
 808f246:	f892 105d 	ldrb.w	r1, [r2, #93]	; 0x5d
static int ssl_validate_ciphersuite( const mbedtls_ssl_ciphersuite_t * suite_info,
                                     const mbedtls_ssl_context * ssl,
                                     int min_minor_ver, int max_minor_ver )
{
    (void) ssl;
    if( suite_info == NULL )
 808f24a:	2800      	cmp	r0, #0
 808f24c:	d0f2      	beq.n	808f234 <mbedtls_ssl_handshake_client_step+0x524>
        return( 1 );

    if( suite_info->min_minor_ver > max_minor_ver ||
 808f24e:	6903      	ldr	r3, [r0, #16]
 808f250:	4299      	cmp	r1, r3
 808f252:	dbef      	blt.n	808f234 <mbedtls_ssl_handshake_client_step+0x524>
 808f254:	f892 205f 	ldrb.w	r2, [r2, #95]	; 0x5f
 808f258:	6983      	ldr	r3, [r0, #24]
 808f25a:	429a      	cmp	r2, r3
 808f25c:	dcea      	bgt.n	808f234 <mbedtls_ssl_handshake_client_step+0x524>

        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
                                    ciphersuites[i] ) );

        n++;
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
 808f25e:	f8d8 3000 	ldr.w	r3, [r8]
            continue;

        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
                                    ciphersuites[i] ) );

        n++;
 808f262:	3701      	adds	r7, #1
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
 808f264:	121a      	asrs	r2, r3, #8
 808f266:	464b      	mov	r3, r9
 808f268:	f803 2b02 	strb.w	r2, [r3], #2
        *p++ = (unsigned char)( ciphersuites[i]      );
 808f26c:	f8d8 2000 	ldr.w	r2, [r8]
 808f270:	f889 2001 	strb.w	r2, [r9, #1]
 808f274:	4699      	mov	r9, r3
 808f276:	e7dd      	b.n	808f234 <mbedtls_ssl_handshake_client_step+0x524>
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
 808f278:	23ff      	movs	r3, #255	; 0xff
        n++;
 808f27a:	3701      	adds	r7, #1
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
 808f27c:	f889 3001 	strb.w	r3, [r9, #1]
        *p++ = (unsigned char)( MBEDTLS_SSL_FALLBACK_SCSV_VALUE      );
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
 808f280:	09fb      	lsrs	r3, r7, #7
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
 808f282:	f889 b000 	strb.w	fp, [r9]
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
    *q++ = (unsigned char)( n << 1 );
 808f286:	007f      	lsls	r7, r7, #1
        *p++ = (unsigned char)( MBEDTLS_SSL_FALLBACK_SCSV_VALUE      );
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
 808f288:	702b      	strb	r3, [r5, #0]
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
 808f28a:	2301      	movs	r3, #1
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
    *q++ = (unsigned char)( n << 1 );
 808f28c:	706f      	strb	r7, [r5, #1]
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
 808f28e:	f889 3002 	strb.w	r3, [r9, #2]
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
 808f292:	f889 b003 	strb.w	fp, [r9, #3]
static void ssl_write_hostname_ext( mbedtls_ssl_context *ssl,
                                    unsigned char *buf,
                                    size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 808f296:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
    size_t hostname_len;

    *olen = 0;

    if( ssl->hostname == NULL )
 808f29a:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
 808f29e:	f109 0704 	add.w	r7, r9, #4
    }

    // First write extensions, then the total length
    //
#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    ssl_write_hostname_ext( ssl, p + 2 + ext_len, &olen );
 808f2a2:	f109 0806 	add.w	r8, r9, #6
static void ssl_write_hostname_ext( mbedtls_ssl_context *ssl,
                                    unsigned char *buf,
                                    size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 808f2a6:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
    size_t hostname_len;

    *olen = 0;

    if( ssl->hostname == NULL )
 808f2aa:	b358      	cbz	r0, 808f304 <mbedtls_ssl_handshake_client_step+0x5f4>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding server name extension: %s",
                   ssl->hostname ) );

    hostname_len = strlen( ssl->hostname );
 808f2ac:	f004 feb5 	bl	809401a <strlen>

    if( end < p || (size_t)( end - p ) < hostname_len + 9 )
 808f2b0:	45a8      	cmp	r8, r5
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding server name extension: %s",
                   ssl->hostname ) );

    hostname_len = strlen( ssl->hostname );
 808f2b2:	4602      	mov	r2, r0

    if( end < p || (size_t)( end - p ) < hostname_len + 9 )
 808f2b4:	d828      	bhi.n	808f308 <mbedtls_ssl_handshake_client_step+0x5f8>
 808f2b6:	f100 0a09 	add.w	sl, r0, #9
 808f2ba:	ebc8 0505 	rsb	r5, r8, r5
 808f2be:	4555      	cmp	r5, sl
 808f2c0:	d322      	bcc.n	808f308 <mbedtls_ssl_handshake_client_step+0x5f8>
     *
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME      ) & 0xFF );

    *p++ = (unsigned char)( ( (hostname_len + 5) >> 8 ) & 0xFF );
 808f2c2:	1d43      	adds	r3, r0, #5
 808f2c4:	0a1b      	lsrs	r3, r3, #8
 808f2c6:	f889 3008 	strb.w	r3, [r9, #8]
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );
 808f2ca:	b2c3      	uxtb	r3, r0
 808f2cc:	1d59      	adds	r1, r3, #5
 808f2ce:	f889 1009 	strb.w	r1, [r9, #9]

    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
 808f2d2:	1cc1      	adds	r1, r0, #3
 808f2d4:	0a09      	lsrs	r1, r1, #8
 808f2d6:	f889 100a 	strb.w	r1, [r9, #10]
    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );
 808f2da:	1cd9      	adds	r1, r3, #3
 808f2dc:	f889 100b 	strb.w	r1, [r9, #11]

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME ) & 0xFF );
    *p++ = (unsigned char)( ( hostname_len >> 8 ) & 0xFF );
 808f2e0:	0a01      	lsrs	r1, r0, #8
     * struct {
     *     ServerName server_name_list<1..2^16-1>
     * } ServerNameList;
     *
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME >> 8 ) & 0xFF );
 808f2e2:	f889 b006 	strb.w	fp, [r9, #6]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME      ) & 0xFF );
 808f2e6:	f889 b007 	strb.w	fp, [r9, #7]
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );

    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME ) & 0xFF );
 808f2ea:	f889 b00c 	strb.w	fp, [r9, #12]
    *p++ = (unsigned char)( ( hostname_len >> 8 ) & 0xFF );
 808f2ee:	f889 100d 	strb.w	r1, [r9, #13]
    *p++ = (unsigned char)( ( hostname_len      ) & 0xFF );
 808f2f2:	f889 300e 	strb.w	r3, [r9, #14]

    memcpy( p, ssl->hostname, hostname_len );
 808f2f6:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 808f2fa:	f109 000f 	add.w	r0, r9, #15
 808f2fe:	f004 fe30 	bl	8093f62 <memcpy>
 808f302:	e002      	b.n	808f30a <mbedtls_ssl_handshake_client_step+0x5fa>
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t hostname_len;

    *olen = 0;
 808f304:	4682      	mov	sl, r0
 808f306:	e000      	b.n	808f30a <mbedtls_ssl_handshake_client_step+0x5fa>
 808f308:	46da      	mov	sl, fp
    unsigned char *sig_alg_list = buf + 6;
#endif

    *olen = 0;

    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
 808f30a:	6823      	ldr	r3, [r4, #0]
 808f30c:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 808f310:	2a03      	cmp	r2, #3
 808f312:	d13c      	bne.n	808f38e <mbedtls_ssl_handshake_client_step+0x67e>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 808f314:	6d59      	ldr	r1, [r3, #84]	; 0x54
                                                unsigned char *buf,
                                                size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t sig_alg_len = 0;
 808f316:	2000      	movs	r0, #0
    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 808f318:	f851 3010 	ldr.w	r3, [r1, r0, lsl #1]
 808f31c:	b10b      	cbz	r3, 808f322 <mbedtls_ssl_handshake_client_step+0x612>
    {
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_len += 2;
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_len += 2;
 808f31e:	3002      	adds	r0, #2
 808f320:	e7fa      	b.n	808f318 <mbedtls_ssl_handshake_client_step+0x608>
static void ssl_write_signature_algorithms_ext( mbedtls_ssl_context *ssl,
                                                unsigned char *buf,
                                                size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 808f322:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
 808f326:	f10a 0b02 	add.w	fp, sl, #2
 808f32a:	44bb      	add	fp, r7
static void ssl_write_signature_algorithms_ext( mbedtls_ssl_context *ssl,
                                                unsigned char *buf,
                                                size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 808f32c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
#if defined(MBEDTLS_RSA_C)
        sig_alg_len += 2;
#endif
    }

    if( end < p || (size_t)( end - p ) < sig_alg_len + 6 )
 808f330:	4593      	cmp	fp, r2
 808f332:	d82d      	bhi.n	808f390 <mbedtls_ssl_handshake_client_step+0x680>
 808f334:	ebcb 0202 	rsb	r2, fp, r2
 808f338:	3006      	adds	r0, #6
 808f33a:	4282      	cmp	r2, r0
 808f33c:	d328      	bcc.n	808f390 <mbedtls_ssl_handshake_client_step+0x680>
 808f33e:	461d      	mov	r5, r3
    /*
     * Prepare signature_algorithms extension (TLS 1.2)
     */
    sig_alg_len = 0;

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 808f340:	f851 0015 	ldr.w	r0, [r1, r5, lsl #1]
 808f344:	9105      	str	r1, [sp, #20]
 808f346:	1caa      	adds	r2, r5, #2
 808f348:	b170      	cbz	r0, 808f368 <mbedtls_ssl_handshake_client_step+0x658>
 808f34a:	9204      	str	r2, [sp, #16]
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 808f34c:	f7fb f9b0 	bl	808a6b0 <mbedtls_ssl_hash_from_md_alg>
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 808f350:	9a04      	ldr	r2, [sp, #16]
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 808f352:	eb0b 0305 	add.w	r3, fp, r5
 808f356:	7198      	strb	r0, [r3, #6]
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 808f358:	4615      	mov	r5, r2
 808f35a:	eb0b 0302 	add.w	r3, fp, r2
 808f35e:	f04f 0201 	mov.w	r2, #1
 808f362:	9905      	ldr	r1, [sp, #20]
 808f364:	715a      	strb	r2, [r3, #5]
 808f366:	e7eb      	b.n	808f340 <mbedtls_ssl_handshake_client_step+0x630>
     *
     * SignatureAndHashAlgorithm
     *   supported_signature_algorithms<2..2^16-2>;
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );
 808f368:	230d      	movs	r3, #13
 808f36a:	f88b 3001 	strb.w	r3, [fp, #1]

    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
 808f36e:	0a13      	lsrs	r3, r2, #8
 808f370:	f88b 3002 	strb.w	r3, [fp, #2]
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );
 808f374:	b2eb      	uxtb	r3, r5
 808f376:	1c9a      	adds	r2, r3, #2
 808f378:	f88b 2003 	strb.w	r2, [fp, #3]

    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
 808f37c:	0a2a      	lsrs	r2, r5, #8
    *p++ = (unsigned char)( ( sig_alg_len      ) & 0xFF );
 808f37e:	f88b 3005 	strb.w	r3, [fp, #5]
     * } SignatureAndHashAlgorithm;
     *
     * SignatureAndHashAlgorithm
     *   supported_signature_algorithms<2..2^16-2>;
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
 808f382:	f88b 0000 	strb.w	r0, [fp]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );

    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );

    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
 808f386:	f88b 2004 	strb.w	r2, [fp, #4]
    *p++ = (unsigned char)( ( sig_alg_len      ) & 0xFF );

    *olen = 6 + sig_alg_len;
 808f38a:	1dab      	adds	r3, r5, #6
 808f38c:	e000      	b.n	808f390 <mbedtls_ssl_handshake_client_step+0x680>
    const int *md;
#if defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C)
    unsigned char *sig_alg_list = buf + 6;
#endif

    *olen = 0;
 808f38e:	2300      	movs	r3, #0
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;

    *olen = 0;

    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ) {
 808f390:	6822      	ldr	r2, [r4, #0]
#endif

#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
 808f392:	4453      	add	r3, sl
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;

    *olen = 0;

    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ) {
 808f394:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 808f398:	f412 72e0 	ands.w	r2, r2, #448	; 0x1c0
 808f39c:	d018      	beq.n	808f3d0 <mbedtls_ssl_handshake_client_step+0x6c0>
static void ssl_write_max_fragment_length_ext( mbedtls_ssl_context *ssl,
                                               unsigned char *buf,
                                               size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 808f39e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    ssl_write_ecjpake_kkpp_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );
 808f3a2:	1c99      	adds	r1, r3, #2
 808f3a4:	4439      	add	r1, r7
static void ssl_write_max_fragment_length_ext( mbedtls_ssl_context *ssl,
                                               unsigned char *buf,
                                               size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 808f3a6:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding max_fragment_length extension" ) );

    if( end < p || (size_t)( end - p ) < 5 )
 808f3aa:	4281      	cmp	r1, r0
 808f3ac:	f04f 0200 	mov.w	r2, #0
 808f3b0:	d80e      	bhi.n	808f3d0 <mbedtls_ssl_handshake_client_step+0x6c0>
 808f3b2:	1a40      	subs	r0, r0, r1
 808f3b4:	2804      	cmp	r0, #4
 808f3b6:	d90b      	bls.n	808f3d0 <mbedtls_ssl_handshake_client_step+0x6c0>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );
 808f3b8:	2001      	movs	r0, #1
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );
 808f3ba:	700a      	strb	r2, [r1, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );
 808f3bc:	7048      	strb	r0, [r1, #1]

    *p++ = 0x00;
 808f3be:	708a      	strb	r2, [r1, #2]
    *p++ = 1;
 808f3c0:	70c8      	strb	r0, [r1, #3]

    *p++ = ssl->conf->mfl_code;
 808f3c2:	6822      	ldr	r2, [r4, #0]
 808f3c4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 808f3c8:	f3c2 1282 	ubfx	r2, r2, #6, #3
 808f3cc:	710a      	strb	r2, [r1, #4]

    *olen = 5;
 808f3ce:	2205      	movs	r2, #5
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
 808f3d0:	189d      	adds	r5, r3, r2
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;

    *olen = 0;

    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED )
 808f3d2:	6823      	ldr	r3, [r4, #0]
 808f3d4:	f893 1061 	ldrb.w	r1, [r3, #97]	; 0x61
 808f3d8:	f001 0102 	and.w	r1, r1, #2
 808f3dc:	f001 0aff 	and.w	sl, r1, #255	; 0xff
 808f3e0:	b329      	cbz	r1, 808f42e <mbedtls_ssl_handshake_client_step+0x71e>
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 808f3e2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    ssl_write_alpn_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    ssl_write_session_ticket_ext( ssl, p + 2 + ext_len, &olen );
 808f3e6:	1ca8      	adds	r0, r5, #2
 808f3e8:	4438      	add	r0, r7
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 808f3ea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );

    if( end < p || (size_t)( end - p ) < 4 + tlen )
 808f3ee:	4298      	cmp	r0, r3
 808f3f0:	d816      	bhi.n	808f420 <mbedtls_ssl_handshake_client_step+0x710>
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;
 808f3f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );

    if( end < p || (size_t)( end - p ) < 4 + tlen )
 808f3f4:	1a1b      	subs	r3, r3, r0
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;
 808f3f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );

    if( end < p || (size_t)( end - p ) < 4 + tlen )
 808f3f8:	f102 0a04 	add.w	sl, r2, #4
 808f3fc:	4553      	cmp	r3, sl
 808f3fe:	f04f 0300 	mov.w	r3, #0
 808f402:	d310      	bcc.n	808f426 <mbedtls_ssl_handshake_client_step+0x716>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET >> 8 ) & 0xFF );
 808f404:	7003      	strb	r3, [r0, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET      ) & 0xFF );
 808f406:	2323      	movs	r3, #35	; 0x23
 808f408:	7043      	strb	r3, [r0, #1]

    *p++ = (unsigned char)( ( tlen >> 8 ) & 0xFF );
 808f40a:	0a13      	lsrs	r3, r2, #8
 808f40c:	7083      	strb	r3, [r0, #2]
    *p++ = (unsigned char)( ( tlen      ) & 0xFF );
 808f40e:	70c2      	strb	r2, [r0, #3]

    *olen = 4;

    if( ssl->session_negotiate->ticket == NULL || tlen == 0 )
 808f410:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 808f412:	6e59      	ldr	r1, [r3, #100]	; 0x64
 808f414:	b149      	cbz	r1, 808f42a <mbedtls_ssl_handshake_client_step+0x71a>
 808f416:	b142      	cbz	r2, 808f42a <mbedtls_ssl_handshake_client_step+0x71a>
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "sending session ticket of length %d", tlen ) );

    memcpy( p, ssl->session_negotiate->ticket, tlen );
 808f418:	3004      	adds	r0, #4
 808f41a:	f004 fda2 	bl	8093f62 <memcpy>
 808f41e:	e006      	b.n	808f42e <mbedtls_ssl_handshake_client_step+0x71e>
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;

    *olen = 0;
 808f420:	f04f 0a00 	mov.w	sl, #0
 808f424:	e003      	b.n	808f42e <mbedtls_ssl_handshake_client_step+0x71e>
 808f426:	469a      	mov	sl, r3
 808f428:	e001      	b.n	808f42e <mbedtls_ssl_handshake_client_step+0x71e>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET      ) & 0xFF );

    *p++ = (unsigned char)( ( tlen >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( tlen      ) & 0xFF );

    *olen = 4;
 808f42a:	f04f 0a04 	mov.w	sl, #4
    ((void) olen);

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, total extension length: %d",
                   ext_len ) );

    if( ext_len > 0 )
 808f42e:	eb15 030a 	adds.w	r3, r5, sl
    {
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
 808f432:	bf1f      	itttt	ne
 808f434:	0a1a      	lsrne	r2, r3, #8
 808f436:	f889 2004 	strbne.w	r2, [r9, #4]
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
 808f43a:	f889 3005 	strbne.w	r3, [r9, #5]
        p += ext_len;
 808f43e:	eb08 0703 	addne.w	r7, r8, r3
    }

    ssl->out_msglen  = p - buf;
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 808f442:	2316      	movs	r3, #22
 808f444:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 808f448:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 808f44c:	2201      	movs	r2, #1
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
        p += ext_len;
    }

    ssl->out_msglen  = p - buf;
 808f44e:	1bbe      	subs	r6, r7, r6
 808f450:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 808f454:	701a      	strb	r2, [r3, #0]

    ssl->state++;
 808f456:	6863      	ldr	r3, [r4, #4]
 808f458:	4413      	add	r3, r2
 808f45a:	e141      	b.n	808f6e0 <mbedtls_ssl_handshake_client_step+0x9d0>
                            ssl->conf->min_major_ver, ssl->conf->min_minor_ver,
                            ssl->major_ver, ssl->minor_ver,
                            ssl->conf->max_major_ver, ssl->conf->max_minor_ver ) );

        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                     MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION );
 808f45c:	2246      	movs	r2, #70	; 0x46
 808f45e:	2102      	movs	r1, #2
 808f460:	4620      	mov	r0, r4
 808f462:	f7fa fae9 	bl	8089a38 <mbedtls_ssl_send_alert_message>

        return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );
 808f466:	4810      	ldr	r0, [pc, #64]	; (808f4a8 <mbedtls_ssl_handshake_client_step+0x798>)
 808f468:	e177      	b.n	808f75a <mbedtls_ssl_handshake_client_step+0xa4a>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    if( ssl->in_hslen > mbedtls_ssl_hs_hdr_len( ssl ) + 39 + n )
 808f46a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 808f46c:	f106 022b 	add.w	r2, r6, #43	; 0x2b
 808f470:	4293      	cmp	r3, r2
 808f472:	d91b      	bls.n	808f4ac <mbedtls_ssl_handshake_client_step+0x79c>
    {
        ext_len = ( ( buf[38 + n] <<  8 )
 808f474:	eb08 0206 	add.w	r2, r8, r6
                  | ( buf[39 + n]       ) );
 808f478:	f892 7026 	ldrb.w	r7, [r2, #38]	; 0x26
 808f47c:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 808f480:	ea42 2707 	orr.w	r7, r2, r7, lsl #8

        if( ( ext_len > 0 && ext_len < 4 ) ||
 808f484:	1e7a      	subs	r2, r7, #1
 808f486:	2a02      	cmp	r2, #2
 808f488:	f67f acfa 	bls.w	808ee80 <mbedtls_ssl_handshake_client_step+0x170>
 808f48c:	f106 022c 	add.w	r2, r6, #44	; 0x2c
 808f490:	443a      	add	r2, r7
 808f492:	4293      	cmp	r3, r2
 808f494:	f47f acf4 	bne.w	808ee80 <mbedtls_ssl_handshake_client_step+0x170>
 808f498:	e00e      	b.n	808f4b8 <mbedtls_ssl_handshake_client_step+0x7a8>
 808f49a:	bf00      	nop
 808f49c:	ffff9200 	.word	0xffff9200
 808f4a0:	ffff8c00 	.word	0xffff8c00
 808f4a4:	ffff9400 	.word	0xffff9400
 808f4a8:	ffff9180 	.word	0xffff9180
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }
    }
    else if( ssl->in_hslen == mbedtls_ssl_hs_hdr_len( ssl ) + 38 + n )
 808f4ac:	f106 022a 	add.w	r2, r6, #42	; 0x2a
 808f4b0:	4293      	cmp	r3, r2
 808f4b2:	f47f ace5 	bne.w	808ee80 <mbedtls_ssl_handshake_client_step+0x170>
    {
        ext_len = 0;
 808f4b6:	2700      	movs	r7, #0
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    /* ciphersuite (used later) */
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
 808f4b8:	eb08 0306 	add.w	r3, r8, r6
 808f4bc:	f893 9023 	ldrb.w	r9, [r3, #35]	; 0x23
 808f4c0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
        accept_comp = 1;

    if( comp != MBEDTLS_SSL_COMPRESS_NULL &&
        ( comp != MBEDTLS_SSL_COMPRESS_DEFLATE || accept_comp == 0 ) )
#else /* MBEDTLS_ZLIB_SUPPORT */
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
 808f4c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    /* ciphersuite (used later) */
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
 808f4c8:	ea42 2909 	orr.w	r9, r2, r9, lsl #8
        accept_comp = 1;

    if( comp != MBEDTLS_SSL_COMPRESS_NULL &&
        ( comp != MBEDTLS_SSL_COMPRESS_DEFLATE || accept_comp == 0 ) )
#else /* MBEDTLS_ZLIB_SUPPORT */
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
 808f4cc:	2b00      	cmp	r3, #0
 808f4ce:	f43f acd9 	beq.w	808ee84 <mbedtls_ssl_handshake_client_step+0x174>
#endif/* MBEDTLS_ZLIB_SUPPORT */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server hello, bad compression: %d", comp ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
 808f4d2:	222f      	movs	r2, #47	; 0x2f
 808f4d4:	2102      	movs	r1, #2
 808f4d6:	4620      	mov	r0, r4
 808f4d8:	f7fa faae 	bl	8089a38 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
 808f4dc:	48a0      	ldr	r0, [pc, #640]	; (808f760 <mbedtls_ssl_handshake_client_step+0xa50>)
 808f4de:	e13c      	b.n	808f75a <mbedtls_ssl_handshake_client_step+0xa4a>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
 808f4e0:	2e00      	cmp	r6, #0
 808f4e2:	f43f acec 	beq.w	808eebe <mbedtls_ssl_handshake_client_step+0x1ae>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
 808f4e6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
 808f4e8:	6803      	ldr	r3, [r0, #0]
 808f4ea:	4599      	cmp	r9, r3
 808f4ec:	f47f ace7 	bne.w	808eebe <mbedtls_ssl_handshake_client_step+0x1ae>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
 808f4f0:	6843      	ldr	r3, [r0, #4]
 808f4f2:	2b00      	cmp	r3, #0
 808f4f4:	f47f ace3 	bne.w	808eebe <mbedtls_ssl_handshake_client_step+0x1ae>
        ssl->session_negotiate->compression != comp ||
 808f4f8:	6883      	ldr	r3, [r0, #8]
 808f4fa:	429e      	cmp	r6, r3
 808f4fc:	f47f acdf 	bne.w	808eebe <mbedtls_ssl_handshake_client_step+0x1ae>
        ssl->session_negotiate->id_len != n ||
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
 808f500:	4632      	mov	r2, r6
 808f502:	4629      	mov	r1, r5
 808f504:	300c      	adds	r0, #12
 808f506:	f004 fd1d 	bl	8093f44 <memcmp>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
        ssl->session_negotiate->compression != comp ||
        ssl->session_negotiate->id_len != n ||
 808f50a:	2800      	cmp	r0, #0
 808f50c:	f47f acd7 	bne.w	808eebe <mbedtls_ssl_handshake_client_step+0x1ae>
        ssl->session_negotiate->id_len = n;
        memcpy( ssl->session_negotiate->id, buf + 35, n );
    }
    else
    {
        ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
 808f510:	230c      	movs	r3, #12
 808f512:	6063      	str	r3, [r4, #4]

        if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 808f514:	4620      	mov	r0, r4
 808f516:	f7f9 feef 	bl	80892f8 <mbedtls_ssl_derive_keys>
 808f51a:	4605      	mov	r5, r0
 808f51c:	2800      	cmp	r0, #0
 808f51e:	f43f ace1 	beq.w	808eee4 <mbedtls_ssl_handshake_client_step+0x1d4>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
 808f522:	2250      	movs	r2, #80	; 0x50
 808f524:	2102      	movs	r1, #2
 808f526:	4620      	mov	r0, r4
 808f528:	f7fa fa86 	bl	8089a38 <mbedtls_ssl_send_alert_message>
 808f52c:	e07c      	b.n	808f628 <mbedtls_ssl_handshake_client_step+0x918>
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
            ssl->session_negotiate->ciphersuite )
 808f52e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808f530:	6812      	ldr	r2, [r2, #0]
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
 808f532:	4290      	cmp	r0, r2
 808f534:	f47f acdb 	bne.w	808eeee <mbedtls_ssl_handshake_client_step+0x1de>
        {
            break;
        }
    }

    suite_info = mbedtls_ssl_ciphersuite_from_id( ssl->session_negotiate->ciphersuite );
 808f538:	f7f6 fdb6 	bl	80860a8 <mbedtls_ssl_ciphersuite_from_id>
    if( ssl_validate_ciphersuite( suite_info, ssl, ssl->minor_ver, ssl->minor_ver ) != 0 )
 808f53c:	68e3      	ldr	r3, [r4, #12]
static int ssl_validate_ciphersuite( const mbedtls_ssl_ciphersuite_t * suite_info,
                                     const mbedtls_ssl_context * ssl,
                                     int min_minor_ver, int max_minor_ver )
{
    (void) ssl;
    if( suite_info == NULL )
 808f53e:	2800      	cmp	r0, #0
 808f540:	f43f acda 	beq.w	808eef8 <mbedtls_ssl_handshake_client_step+0x1e8>
        return( 1 );

    if( suite_info->min_minor_ver > max_minor_ver ||
 808f544:	6902      	ldr	r2, [r0, #16]
 808f546:	429a      	cmp	r2, r3
 808f548:	f73f acd6 	bgt.w	808eef8 <mbedtls_ssl_handshake_client_step+0x1e8>
 808f54c:	6982      	ldr	r2, [r0, #24]
 808f54e:	4293      	cmp	r3, r2
 808f550:	f73f acd2 	bgt.w	808eef8 <mbedtls_ssl_handshake_client_step+0x1e8>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        switch( ext_id )
 808f554:	f64f 7001 	movw	r0, #65281	; 0xff01
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }
    ssl->session_negotiate->compression = comp;
 808f558:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 808f55a:	2200      	movs	r2, #0

    ext = buf + 40 + n;
 808f55c:	3628      	adds	r6, #40	; 0x28
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }
    ssl->session_negotiate->compression = comp;
 808f55e:	605a      	str	r2, [r3, #4]

    ext = buf + 40 + n;
 808f560:	4446      	add	r6, r8
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    ((void) buf);

    ssl->handshake->new_session_ticket = 1;
 808f562:	2501      	movs	r5, #1

    ext = buf + 40 + n;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );

    while( ext_len )
 808f564:	2f00      	cmp	r7, #0
 808f566:	d03d      	beq.n	808f5e4 <mbedtls_ssl_handshake_client_step+0x8d4>
    {
        unsigned int ext_id   = ( ( ext[0] <<  8 )
                                | ( ext[1]       ) );
 808f568:	7873      	ldrb	r3, [r6, #1]
 808f56a:	7832      	ldrb	r2, [r6, #0]
        unsigned int ext_size = ( ( ext[2] <<  8 )
                                | ( ext[3]       ) );
 808f56c:	78b1      	ldrb	r1, [r6, #2]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );

    while( ext_len )
    {
        unsigned int ext_id   = ( ( ext[0] <<  8 )
                                | ( ext[1]       ) );
 808f56e:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
        unsigned int ext_size = ( ( ext[2] <<  8 )
                                | ( ext[3]       ) );
 808f572:	78f3      	ldrb	r3, [r6, #3]
 808f574:	ea43 2301 	orr.w	r3, r3, r1, lsl #8

        if( ext_size + 4 > ext_len )
 808f578:	1d19      	adds	r1, r3, #4
 808f57a:	428f      	cmp	r7, r1
 808f57c:	f4ff ac80 	bcc.w	808ee80 <mbedtls_ssl_handshake_client_step+0x170>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        switch( ext_id )
 808f580:	2a23      	cmp	r2, #35	; 0x23
 808f582:	d01e      	beq.n	808f5c2 <mbedtls_ssl_handshake_client_step+0x8b2>
 808f584:	4282      	cmp	r2, r0
 808f586:	d002      	beq.n	808f58e <mbedtls_ssl_handshake_client_step+0x87e>
 808f588:	2a01      	cmp	r2, #1
 808f58a:	d124      	bne.n	808f5d6 <mbedtls_ssl_handshake_client_step+0x8c6>
 808f58c:	e008      	b.n	808f5a0 <mbedtls_ssl_handshake_client_step+0x890>
        }
    }
    else
#endif /* MBEDTLS_SSL_RENEGOTIATION */
    {
        if( len != 1 || buf[0] != 0x00 )
 808f58e:	2b01      	cmp	r3, #1
 808f590:	d101      	bne.n	808f596 <mbedtls_ssl_handshake_client_step+0x886>
 808f592:	7932      	ldrb	r2, [r6, #4]
 808f594:	b10a      	cbz	r2, 808f59a <mbedtls_ssl_handshake_client_step+0x88a>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-zero length renegotiation info" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
 808f596:	2228      	movs	r2, #40	; 0x28
 808f598:	e4af      	b.n	808eefa <mbedtls_ssl_handshake_client_step+0x1ea>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;
 808f59a:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
 808f59e:	e01a      	b.n	808f5d6 <mbedtls_ssl_handshake_client_step+0x8c6>
{
    /*
     * server should use the extension only if we did,
     * and if so the server's value should match ours (and len is always 1)
     */
    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ||
 808f5a0:	6822      	ldr	r2, [r4, #0]
 808f5a2:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 808f5a6:	f402 7ee0 	and.w	lr, r2, #448	; 0x1c0
 808f5aa:	f1be 0f00 	cmp.w	lr, #0
 808f5ae:	d0f2      	beq.n	808f596 <mbedtls_ssl_handshake_client_step+0x886>
 808f5b0:	2b01      	cmp	r3, #1
 808f5b2:	d1f0      	bne.n	808f596 <mbedtls_ssl_handshake_client_step+0x886>
        len != 1 ||
 808f5b4:	f896 e004 	ldrb.w	lr, [r6, #4]
 808f5b8:	f3c2 1282 	ubfx	r2, r2, #6, #3
 808f5bc:	4596      	cmp	lr, r2
 808f5be:	d00a      	beq.n	808f5d6 <mbedtls_ssl_handshake_client_step+0x8c6>
 808f5c0:	e7e9      	b.n	808f596 <mbedtls_ssl_handshake_client_step+0x886>
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
static int ssl_parse_session_ticket_ext( mbedtls_ssl_context *ssl,
                                         const unsigned char *buf,
                                         size_t len )
{
    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED ||
 808f5c2:	6822      	ldr	r2, [r4, #0]
 808f5c4:	f892 2061 	ldrb.w	r2, [r2, #97]	; 0x61
 808f5c8:	0792      	lsls	r2, r2, #30
 808f5ca:	d5e4      	bpl.n	808f596 <mbedtls_ssl_handshake_client_step+0x886>
 808f5cc:	2b00      	cmp	r3, #0
 808f5ce:	d1e2      	bne.n	808f596 <mbedtls_ssl_handshake_client_step+0x886>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    ((void) buf);

    ssl->handshake->new_session_ticket = 1;
 808f5d0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 808f5d2:	f8c2 51f4 	str.w	r5, [r2, #500]	; 0x1f4
        default:
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
                           ext_id ) );
        }

        ext_len -= 4 + ext_size;
 808f5d6:	1afb      	subs	r3, r7, r3
 808f5d8:	1f1f      	subs	r7, r3, #4
        ext += 4 + ext_size;

        if( ext_len > 0 && ext_len < 4 )
 808f5da:	3b05      	subs	r3, #5
 808f5dc:	2b02      	cmp	r3, #2
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
                           ext_id ) );
        }

        ext_len -= 4 + ext_size;
        ext += 4 + ext_size;
 808f5de:	440e      	add	r6, r1

        if( ext_len > 0 && ext_len < 4 )
 808f5e0:	d8c0      	bhi.n	808f564 <mbedtls_ssl_handshake_client_step+0x854>
 808f5e2:	e48e      	b.n	808ef02 <mbedtls_ssl_handshake_client_step+0x1f2>
    }

    /*
     * Renegotiation security checks
     */
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 808f5e4:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 808f5e8:	bb13      	cbnz	r3, 808f630 <mbedtls_ssl_handshake_client_step+0x920>
        ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE )
 808f5ea:	6823      	ldr	r3, [r4, #0]
    }

    /*
     * Renegotiation security checks
     */
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 808f5ec:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 808f5f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 808f5f4:	2b20      	cmp	r3, #32
 808f5f6:	d11b      	bne.n	808f630 <mbedtls_ssl_handshake_client_step+0x920>
 808f5f8:	e7cd      	b.n	808f596 <mbedtls_ssl_handshake_client_step+0x886>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    memcpy( ticket, msg + 6, ticket_len );
 808f5fa:	465a      	mov	r2, fp
 808f5fc:	f107 010a 	add.w	r1, r7, #10
 808f600:	9004      	str	r0, [sp, #16]
 808f602:	f004 fcae 	bl	8093f62 <memcpy>

    ssl->session_negotiate->ticket = ticket;
 808f606:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808f608:	9b04      	ldr	r3, [sp, #16]
    ssl->session_negotiate->ticket_len = ticket_len;
    ssl->session_negotiate->ticket_lifetime = lifetime;
 808f60a:	0436      	lsls	r6, r6, #16
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    memcpy( ticket, msg + 6, ticket_len );

    ssl->session_negotiate->ticket = ticket;
 808f60c:	6653      	str	r3, [r2, #100]	; 0x64
    ssl->session_negotiate->ticket_len = ticket_len;
 808f60e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ssl->session_negotiate->ticket_lifetime = lifetime;
 808f610:	ea46 660a 	orr.w	r6, r6, sl, lsl #24
    }

    memcpy( ticket, msg + 6, ticket_len );

    ssl->session_negotiate->ticket = ticket;
    ssl->session_negotiate->ticket_len = ticket_len;
 808f614:	f8c3 b068 	str.w	fp, [r3, #104]	; 0x68
    ssl->session_negotiate->ticket_lifetime = lifetime;
 808f618:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 808f61a:	ea46 0808 	orr.w	r8, r6, r8
 808f61e:	ea48 2609 	orr.w	r6, r8, r9, lsl #8
 808f622:	66de      	str	r6, [r3, #108]	; 0x6c
     * RFC 5077 section 3.4:
     * "If the client receives a session ticket from the server, then it
     * discards any Session ID that was sent in the ServerHello."
     */
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ticket in use, discarding session id" ) );
    ssl->session_negotiate->id_len = 0;
 808f624:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 808f626:	609d      	str	r5, [r3, #8]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse new session ticket" ) );

    return( 0 );
 808f628:	4628      	mov	r0, r5
 808f62a:	e096      	b.n	808f75a <mbedtls_ssl_handshake_client_step+0xa4a>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate request" ) );

    if( ! mbedtls_ssl_ciphersuite_cert_req_allowed( ciphersuite_info ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate request" ) );
        ssl->state++;
 808f62c:	2306      	movs	r3, #6
 808f62e:	6063      	str	r3, [r4, #4]
        return( 0 );
 808f630:	2000      	movs	r0, #0
 808f632:	e092      	b.n	808f75a <mbedtls_ssl_handshake_client_step+0xa4a>
    }

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 808f634:	4620      	mov	r0, r4
 808f636:	f7fa fc4d 	bl	8089ed4 <mbedtls_ssl_read_record>
 808f63a:	2800      	cmp	r0, #0
 808f63c:	f040 808d 	bne.w	808f75a <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 808f640:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 808f642:	2b16      	cmp	r3, #22
 808f644:	f47f abd9 	bne.w	808edfa <mbedtls_ssl_handshake_client_step+0xea>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    ssl->state++;
 808f648:	6863      	ldr	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
 808f64a:	6e62      	ldr	r2, [r4, #100]	; 0x64
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    ssl->state++;
 808f64c:	3301      	adds	r3, #1
 808f64e:	6063      	str	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
 808f650:	7813      	ldrb	r3, [r2, #0]
 808f652:	2b0d      	cmp	r3, #13
 808f654:	bf0c      	ite	eq
 808f656:	2301      	moveq	r3, #1
 808f658:	2300      	movne	r3, #0
 808f65a:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "got %s certificate request",
                        ssl->client_auth ? "a" : "no" ) );

    if( ssl->client_auth == 0 )
 808f65e:	d002      	beq.n	808f666 <mbedtls_ssl_handshake_client_step+0x956>
    {
        /* Current message is probably the ServerHelloDone */
        ssl->keep_current_message = 1;
 808f660:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 808f664:	e079      	b.n	808f75a <mbedtls_ssl_handshake_client_step+0xa4a>
     *  superficially sane.
     */
    buf = ssl->in_msg;

    /* certificate_types */
    if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) )
 808f666:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 808f668:	2904      	cmp	r1, #4
 808f66a:	d806      	bhi.n	808f67a <mbedtls_ssl_handshake_client_step+0x96a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 808f66c:	2232      	movs	r2, #50	; 0x32
 808f66e:	2102      	movs	r1, #2
 808f670:	4620      	mov	r0, r4
 808f672:	f7fa f9e1 	bl	8089a38 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
 808f676:	483b      	ldr	r0, [pc, #236]	; (808f764 <mbedtls_ssl_handshake_client_step+0xa54>)
 808f678:	e06f      	b.n	808f75a <mbedtls_ssl_handshake_client_step+0xa4a>
    }
    cert_type_len = buf[mbedtls_ssl_hs_hdr_len( ssl )];
 808f67a:	7913      	ldrb	r3, [r2, #4]
     * Both reach at most the index:
     *    ...hdr_len + 2 + n,
     * therefore the buffer length at this point must be greater than that
     * regardless of the actual code path.
     */
    if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
 808f67c:	1ddd      	adds	r5, r3, #7
 808f67e:	42a9      	cmp	r1, r5
 808f680:	d9f4      	bls.n	808f66c <mbedtls_ssl_handshake_client_step+0x95c>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
    }

    /* supported_signature_algorithms */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 808f682:	68e0      	ldr	r0, [r4, #12]
 808f684:	2803      	cmp	r0, #3
 808f686:	d109      	bne.n	808f69c <mbedtls_ssl_handshake_client_step+0x98c>
    {
        size_t sig_alg_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 808f688:	18d6      	adds	r6, r2, r3
                             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
 808f68a:	7977      	ldrb	r7, [r6, #5]
 808f68c:	79b0      	ldrb	r0, [r6, #6]
 808f68e:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
         *     buf[...hdr_len + 3 + n + sig_alg_len - 1 + 1],
         * which reduces to:
         *     buf[...hdr_len + 3 + n + sig_alg_len],
         * which is one less than we need the buf to be.
         */
        if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n + sig_alg_len )
 808f692:	4405      	add	r5, r0
 808f694:	42a9      	cmp	r1, r5
 808f696:	d9e9      	bls.n	808f66c <mbedtls_ssl_handshake_client_step+0x95c>
 808f698:	3302      	adds	r3, #2
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Supported Signature Algorithm found: %d"
                                        ",%d", sig_alg[i], sig_alg[i + 1]  ) );
        }
#endif

        n += 2 + sig_alg_len;
 808f69a:	4403      	add	r3, r0
    }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

    /* certificate_authorities */
    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 808f69c:	441a      	add	r2, r3
             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );

    n += dn_len;
    if( ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
 808f69e:	7950      	ldrb	r0, [r2, #5]
 808f6a0:	7992      	ldrb	r2, [r2, #6]
 808f6a2:	3307      	adds	r3, #7
 808f6a4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 808f6a8:	4413      	add	r3, r2
 808f6aa:	4299      	cmp	r1, r3
 808f6ac:	d0c0      	beq.n	808f630 <mbedtls_ssl_handshake_client_step+0x920>
 808f6ae:	e7dd      	b.n	808f66c <mbedtls_ssl_handshake_client_step+0x95c>
    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 808f6b0:	2232      	movs	r2, #50	; 0x32
 808f6b2:	2102      	movs	r1, #2
 808f6b4:	4620      	mov	r0, r4
 808f6b6:	f7fa f9bf 	bl	8089a38 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE );
 808f6ba:	482b      	ldr	r0, [pc, #172]	; (808f768 <mbedtls_ssl_handshake_client_step+0xa58>)
 808f6bc:	e04d      	b.n	808f75a <mbedtls_ssl_handshake_client_step+0xa4a>
    ssl->handshake->pmslen = 48;

    if( ssl->session_negotiate->peer_cert == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 808f6be:	482b      	ldr	r0, [pc, #172]	; (808f76c <mbedtls_ssl_handshake_client_step+0xa5c>)
 808f6c0:	e04b      	b.n	808f75a <mbedtls_ssl_handshake_client_step+0xa4a>
     */
    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
                MBEDTLS_PK_RSA ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
 808f6c2:	482b      	ldr	r0, [pc, #172]	; (808f770 <mbedtls_ssl_handshake_client_step+0xa60>)
 808f6c4:	e049      	b.n	808f75a <mbedtls_ssl_handshake_client_step+0xa4a>
        ((void) ciphersuite_info);
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    ssl->out_msglen  = i + n;
 808f6c6:	9b08      	ldr	r3, [sp, #32]
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
 808f6c8:	2210      	movs	r2, #16
        ((void) ciphersuite_info);
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    ssl->out_msglen  = i + n;
 808f6ca:	3304      	adds	r3, #4
 808f6cc:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 808f6d0:	2316      	movs	r3, #22
 808f6d2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
 808f6d6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 808f6da:	701a      	strb	r2, [r3, #0]

    ssl->state++;
 808f6dc:	6863      	ldr	r3, [r4, #4]
 808f6de:	3301      	adds	r3, #1
 808f6e0:	6063      	str	r3, [r4, #4]

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 808f6e2:	4620      	mov	r0, r4
 808f6e4:	f7f9 fff4 	bl	80896d0 <mbedtls_ssl_write_record>
 808f6e8:	e037      	b.n	808f75a <mbedtls_ssl_handshake_client_step+0xa4a>
    msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );

    lifetime = ( msg[0] << 24 ) | ( msg[1] << 16 ) |
               ( msg[2] <<  8 ) | ( msg[3]       );

    ticket_len = ( msg[4] << 8 ) | ( msg[5] );
 808f6ea:	7a7a      	ldrb	r2, [r7, #9]
 808f6ec:	f897 b008 	ldrb.w	fp, [r7, #8]
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
    }

    msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );

    lifetime = ( msg[0] << 24 ) | ( msg[1] << 16 ) |
 808f6f0:	f897 a004 	ldrb.w	sl, [r7, #4]
               ( msg[2] <<  8 ) | ( msg[3]       );

    ticket_len = ( msg[4] << 8 ) | ( msg[5] );
 808f6f4:	ea42 2b0b 	orr.w	fp, r2, fp, lsl #8

    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
 808f6f8:	f10b 020a 	add.w	r2, fp, #10
 808f6fc:	4293      	cmp	r3, r2
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
    }

    msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );

    lifetime = ( msg[0] << 24 ) | ( msg[1] << 16 ) |
 808f6fe:	797e      	ldrb	r6, [r7, #5]
               ( msg[2] <<  8 ) | ( msg[3]       );
 808f700:	f897 9006 	ldrb.w	r9, [r7, #6]
 808f704:	f897 8007 	ldrb.w	r8, [r7, #7]

    ticket_len = ( msg[4] << 8 ) | ( msg[5] );

    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
 808f708:	f47f ad40 	bne.w	808f18c <mbedtls_ssl_handshake_client_step+0x47c>
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ticket length: %d", ticket_len ) );

    /* We're not waiting for a NewSessionTicket message any more */
    ssl->handshake->new_session_ticket = 0;
 808f70c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 808f70e:	f8c3 01f4 	str.w	r0, [r3, #500]	; 0x1f4
    ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
 808f712:	230c      	movs	r3, #12
 808f714:	6063      	str	r3, [r4, #4]

    /*
     * Zero-length ticket means the server changed his mind and doesn't want
     * to send a ticket after all, so just forget it
     */
    if( ticket_len == 0 )
 808f716:	f1bb 0f00 	cmp.w	fp, #0
 808f71a:	d089      	beq.n	808f630 <mbedtls_ssl_handshake_client_step+0x920>
        return( 0 );

    mbedtls_zeroize( ssl->session_negotiate->ticket,
 808f71c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 808f71e:	6e53      	ldr	r3, [r2, #100]	; 0x64
 808f720:	6e92      	ldr	r2, [r2, #104]	; 0x68
 808f722:	441a      	add	r2, r3
#endif

#if defined(MBEDTLS_SSL_SESSION_TICKETS)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 808f724:	429a      	cmp	r2, r3
 808f726:	d002      	beq.n	808f72e <mbedtls_ssl_handshake_client_step+0xa1e>
 808f728:	7018      	strb	r0, [r3, #0]
 808f72a:	3301      	adds	r3, #1
 808f72c:	e7fa      	b.n	808f724 <mbedtls_ssl_handshake_client_step+0xa14>
    if( ticket_len == 0 )
        return( 0 );

    mbedtls_zeroize( ssl->session_negotiate->ticket,
                      ssl->session_negotiate->ticket_len );
    mbedtls_free( ssl->session_negotiate->ticket );
 808f72e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ssl->session_negotiate->ticket = NULL;
 808f730:	2500      	movs	r5, #0
    if( ticket_len == 0 )
        return( 0 );

    mbedtls_zeroize( ssl->session_negotiate->ticket,
                      ssl->session_negotiate->ticket_len );
    mbedtls_free( ssl->session_negotiate->ticket );
 808f732:	6e58      	ldr	r0, [r3, #100]	; 0x64
 808f734:	f001 fd10 	bl	8091158 <free>
    ssl->session_negotiate->ticket = NULL;
 808f738:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ssl->session_negotiate->ticket_len = 0;

    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
 808f73a:	4659      	mov	r1, fp
        return( 0 );

    mbedtls_zeroize( ssl->session_negotiate->ticket,
                      ssl->session_negotiate->ticket_len );
    mbedtls_free( ssl->session_negotiate->ticket );
    ssl->session_negotiate->ticket = NULL;
 808f73c:	665d      	str	r5, [r3, #100]	; 0x64
    ssl->session_negotiate->ticket_len = 0;
 808f73e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
 808f740:	2001      	movs	r0, #1

    mbedtls_zeroize( ssl->session_negotiate->ticket,
                      ssl->session_negotiate->ticket_len );
    mbedtls_free( ssl->session_negotiate->ticket );
    ssl->session_negotiate->ticket = NULL;
    ssl->session_negotiate->ticket_len = 0;
 808f742:	669d      	str	r5, [r3, #104]	; 0x68

    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
 808f744:	f004 fae6 	bl	8093d14 <calloc>
 808f748:	2800      	cmp	r0, #0
 808f74a:	f47f af56 	bne.w	808f5fa <mbedtls_ssl_handshake_client_step+0x8ea>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ticket alloc failed" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
 808f74e:	2250      	movs	r2, #80	; 0x50
 808f750:	2102      	movs	r1, #2
 808f752:	4620      	mov	r0, r4
 808f754:	f7fa f970 	bl	8089a38 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 808f758:	4806      	ldr	r0, [pc, #24]	; (808f774 <mbedtls_ssl_handshake_client_step+0xa64>)
           MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid state %d", ssl->state ) );
           return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   }

    return( ret );
}
 808f75a:	b015      	add	sp, #84	; 0x54
 808f75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808f760:	ffff8f80 	.word	0xffff8f80
 808f764:	ffff8580 	.word	0xffff8580
 808f768:	ffff8480 	.word	0xffff8480
 808f76c:	ffff8900 	.word	0xffff8900
 808f770:	ffff9300 	.word	0xffff9300
 808f774:	ffff8100 	.word	0xffff8100

0808f778 <_ZN5CryptC1Ev>:
#include "Crypt.h"
#include "application.h"
Crypt::Crypt(){
 808f778:	b570      	push	{r4, r5, r6, lr}
 808f77a:	4604      	mov	r4, r0
 808f77c:	4b35      	ldr	r3, [pc, #212]	; (808f854 <_ZN5CryptC1Ev+0xdc>)
 808f77e:	2220      	movs	r2, #32
 808f780:	6003      	str	r3, [r0, #0]
 808f782:	2100      	movs	r1, #0
 808f784:	f500 700d 	add.w	r0, r0, #564	; 0x234
 808f788:	f004 fc11 	bl	8093fae <memset>
 808f78c:	2266      	movs	r2, #102	; 0x66
 808f78e:	f884 2236 	strb.w	r2, [r4, #566]	; 0x236
 808f792:	224a      	movs	r2, #74	; 0x4a
 808f794:	f884 2237 	strb.w	r2, [r4, #567]	; 0x237
 808f798:	2201      	movs	r2, #1
 808f79a:	f884 2238 	strb.w	r2, [r4, #568]	; 0x238
 808f79e:	2263      	movs	r2, #99	; 0x63
 808f7a0:	f884 2239 	strb.w	r2, [r4, #569]	; 0x239
 808f7a4:	2279      	movs	r2, #121	; 0x79
 808f7a6:	f884 223a 	strb.w	r2, [r4, #570]	; 0x23a
 808f7aa:	2262      	movs	r2, #98	; 0x62
 808f7ac:	f884 223b 	strb.w	r2, [r4, #571]	; 0x23b
 808f7b0:	2224      	movs	r2, #36	; 0x24
 808f7b2:	f884 223d 	strb.w	r2, [r4, #573]	; 0x23d
 808f7b6:	2253      	movs	r2, #83	; 0x53
 808f7b8:	f884 223e 	strb.w	r2, [r4, #574]	; 0x23e
 808f7bc:	2235      	movs	r2, #53	; 0x35
 808f7be:	230c      	movs	r3, #12
 808f7c0:	205b      	movs	r0, #91	; 0x5b
 808f7c2:	f884 223f 	strb.w	r2, [r4, #575]	; 0x23f
 808f7c6:	2202      	movs	r2, #2
 808f7c8:	f884 3235 	strb.w	r3, [r4, #565]	; 0x235
 808f7cc:	f884 323c 	strb.w	r3, [r4, #572]	; 0x23c
 808f7d0:	f884 2240 	strb.w	r2, [r4, #576]	; 0x240
 808f7d4:	f884 0245 	strb.w	r0, [r4, #581]	; 0x245
 808f7d8:	2205      	movs	r2, #5
 808f7da:	2037      	movs	r0, #55	; 0x37
 808f7dc:	f884 324e 	strb.w	r3, [r4, #590]	; 0x24e
 808f7e0:	232d      	movs	r3, #45	; 0x2d
 808f7e2:	2143      	movs	r1, #67	; 0x43
 808f7e4:	f884 2241 	strb.w	r2, [r4, #577]	; 0x241
 808f7e8:	f884 024a 	strb.w	r0, [r4, #586]	; 0x24a
 808f7ec:	2222      	movs	r2, #34	; 0x22
 808f7ee:	2064      	movs	r0, #100	; 0x64
 808f7f0:	f884 324f 	strb.w	r3, [r4, #591]	; 0x24f
 808f7f4:	231d      	movs	r3, #29
 808f7f6:	f884 1234 	strb.w	r1, [r4, #564]	; 0x234
 808f7fa:	f884 2242 	strb.w	r2, [r4, #578]	; 0x242
 808f7fe:	f884 1246 	strb.w	r1, [r4, #582]	; 0x246
 808f802:	2265      	movs	r2, #101	; 0x65
 808f804:	212b      	movs	r1, #43	; 0x2b
 808f806:	f884 024b 	strb.w	r0, [r4, #587]	; 0x24b
 808f80a:	f884 3250 	strb.w	r3, [r4, #592]	; 0x250
 808f80e:	2041      	movs	r0, #65	; 0x41
 808f810:	4b11      	ldr	r3, [pc, #68]	; (808f858 <_ZN5CryptC1Ev+0xe0>)
 808f812:	f884 2243 	strb.w	r2, [r4, #579]	; 0x243
 808f816:	f884 1247 	strb.w	r1, [r4, #583]	; 0x247
 808f81a:	2252      	movs	r2, #82	; 0x52
 808f81c:	216e      	movs	r1, #110	; 0x6e
 808f81e:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
 808f822:	200d      	movs	r0, #13
 808f824:	f884 2244 	strb.w	r2, [r4, #580]	; 0x244
 808f828:	f884 1248 	strb.w	r1, [r4, #584]	; 0x248
 808f82c:	f884 024d 	strb.w	r0, [r4, #589]	; 0x24d
 808f830:	f884 1251 	strb.w	r1, [r4, #593]	; 0x251
 808f834:	f884 2252 	strb.w	r2, [r4, #594]	; 0x252
 808f838:	f504 7519 	add.w	r5, r4, #612	; 0x264
 808f83c:	f103 0610 	add.w	r6, r3, #16
 808f840:	462a      	mov	r2, r5
 808f842:	6818      	ldr	r0, [r3, #0]
 808f844:	6859      	ldr	r1, [r3, #4]
 808f846:	3308      	adds	r3, #8
 808f848:	c203      	stmia	r2!, {r0, r1}
 808f84a:	42b3      	cmp	r3, r6
 808f84c:	4615      	mov	r5, r2
 808f84e:	d1f7      	bne.n	808f840 <_ZN5CryptC1Ev+0xc8>

}
 808f850:	4620      	mov	r0, r4
 808f852:	bd70      	pop	{r4, r5, r6, pc}
 808f854:	080986cd 	.word	0x080986cd
 808f858:	080986bd 	.word	0x080986bd

0808f85c <_ZN5Crypt11generateKeyEv>:


//generate key
int Crypt::generateKey(){
 808f85c:	b570      	push	{r4, r5, r6, lr}
 808f85e:	4604      	mov	r4, r0
    int ret=0;

    mbedtls_aes_init(&aes_in);
 808f860:	1d06      	adds	r6, r0, #4
 808f862:	4630      	mov	r0, r6
    mbedtls_aes_init(&aes_out);
 808f864:	f504 758e 	add.w	r5, r4, #284	; 0x11c

//generate key
int Crypt::generateKey(){
    int ret=0;

    mbedtls_aes_init(&aes_in);
 808f868:	f7fc fed6 	bl	808c618 <mbedtls_aes_init>
    mbedtls_aes_init(&aes_out);
 808f86c:	4628      	mov	r0, r5
 808f86e:	f7fc fed3 	bl	808c618 <mbedtls_aes_init>
    memcpy(iv,ogiv,16);
 808f872:	f504 7319 	add.w	r3, r4, #612	; 0x264
 808f876:	f504 7215 	add.w	r2, r4, #596	; 0x254
 808f87a:	f504 711d 	add.w	r1, r4, #628	; 0x274
 808f87e:	f853 0b04 	ldr.w	r0, [r3], #4
 808f882:	428b      	cmp	r3, r1
 808f884:	f842 0b04 	str.w	r0, [r2], #4
 808f888:	d1f9      	bne.n	808f87e <_ZN5Crypt11generateKeyEv+0x22>
    
    mbedtls_aes_setkey_enc( &aes_in, key, 256 );
 808f88a:	f504 740d 	add.w	r4, r4, #564	; 0x234
 808f88e:	4621      	mov	r1, r4
 808f890:	f44f 7280 	mov.w	r2, #256	; 0x100
 808f894:	4630      	mov	r0, r6
 808f896:	f7fc fecf 	bl	808c638 <mbedtls_aes_setkey_enc>
    mbedtls_aes_setkey_dec( &aes_out, key, 256 );
 808f89a:	f44f 7280 	mov.w	r2, #256	; 0x100
 808f89e:	4621      	mov	r1, r4
 808f8a0:	4628      	mov	r0, r5
 808f8a2:	f7fc ffc5 	bl	808c830 <mbedtls_aes_setkey_dec>

    return ret;
}
 808f8a6:	2000      	movs	r0, #0
 808f8a8:	bd70      	pop	{r4, r5, r6, pc}

0808f8aa <_ZN5Crypt11encryptDataEPhS0_>:

//encrypt stuff
int Crypt::encryptData(unsigned char* input,unsigned char* output){
 808f8aa:	b507      	push	{r0, r1, r2, lr}
    int ret=0;
    
    ret = mbedtls_aes_crypt_cbc( &aes_in, MBEDTLS_AES_ENCRYPT, 128, iv, input, output );
 808f8ac:	f500 7315 	add.w	r3, r0, #596	; 0x254
 808f8b0:	e88d 0006 	stmia.w	sp, {r1, r2}
 808f8b4:	3004      	adds	r0, #4
 808f8b6:	2280      	movs	r2, #128	; 0x80
 808f8b8:	2101      	movs	r1, #1
 808f8ba:	f7fd fbcf 	bl	808d05c <mbedtls_aes_crypt_cbc>

    return ret;
}
 808f8be:	b003      	add	sp, #12
 808f8c0:	f85d fb04 	ldr.w	pc, [sp], #4

0808f8c4 <_ZN5Crypt11decryptDataEPhS0_>:

//decrypt stuff
int Crypt::decryptData(unsigned char* input,unsigned char* output){
 808f8c4:	b507      	push	{r0, r1, r2, lr}
    int ret=0;

    ret = mbedtls_aes_crypt_cbc( &aes_out, MBEDTLS_AES_DECRYPT, 128, ogiv, input, output );  
 808f8c6:	f500 7319 	add.w	r3, r0, #612	; 0x264
 808f8ca:	e88d 0006 	stmia.w	sp, {r1, r2}
 808f8ce:	f500 708e 	add.w	r0, r0, #284	; 0x11c
 808f8d2:	2280      	movs	r2, #128	; 0x80
 808f8d4:	2100      	movs	r1, #0
 808f8d6:	f7fd fbc1 	bl	808d05c <mbedtls_aes_crypt_cbc>

    return ret;

 808f8da:	b003      	add	sp, #12
 808f8dc:	f85d fb04 	ldr.w	pc, [sp], #4

0808f8e0 <_GLOBAL__sub_I__ZN5CryptC2Ev>:
 808f8e0:	f001 b992 	b.w	8090c08 <HAL_Pin_Map>

0808f8e4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 808f8e4:	4770      	bx	lr

0808f8e6 <_ZN11USARTSerialD0Ev>:
 808f8e6:	b510      	push	{r4, lr}
 808f8e8:	4604      	mov	r4, r0
 808f8ea:	f7f0 fbda 	bl	80800a2 <_ZdlPv>
 808f8ee:	4620      	mov	r0, r4
 808f8f0:	bd10      	pop	{r4, pc}
	...

0808f8f4 <_Z22__fetch_global_Serial5v>:
// instantiate Serial5
static Ring_Buffer serial5_rx_buffer;
static Ring_Buffer serial5_tx_buffer;

USARTSerial& __fetch_global_Serial5()
{
 808f8f4:	b510      	push	{r4, lr}
	static USARTSerial serial5(HAL_USART_SERIAL5, &serial5_rx_buffer, &serial5_tx_buffer);
 808f8f6:	4c0c      	ldr	r4, [pc, #48]	; (808f928 <_Z22__fetch_global_Serial5v+0x34>)
 808f8f8:	6823      	ldr	r3, [r4, #0]
 808f8fa:	07db      	lsls	r3, r3, #31
 808f8fc:	d411      	bmi.n	808f922 <_Z22__fetch_global_Serial5v+0x2e>
 808f8fe:	4620      	mov	r0, r4
 808f900:	f7f0 fbd3 	bl	80800aa <__cxa_guard_acquire>
 808f904:	b168      	cbz	r0, 808f922 <_Z22__fetch_global_Serial5v+0x2e>
 808f906:	4a09      	ldr	r2, [pc, #36]	; (808f92c <_Z22__fetch_global_Serial5v+0x38>)
 808f908:	2104      	movs	r1, #4
 808f90a:	4b09      	ldr	r3, [pc, #36]	; (808f930 <_Z22__fetch_global_Serial5v+0x3c>)
 808f90c:	4809      	ldr	r0, [pc, #36]	; (808f934 <_Z22__fetch_global_Serial5v+0x40>)
 808f90e:	f002 fc57 	bl	80921c0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 808f912:	4620      	mov	r0, r4
 808f914:	f7f0 fbce 	bl	80800b4 <__cxa_guard_release>
 808f918:	4a07      	ldr	r2, [pc, #28]	; (808f938 <_Z22__fetch_global_Serial5v+0x44>)
 808f91a:	4908      	ldr	r1, [pc, #32]	; (808f93c <_Z22__fetch_global_Serial5v+0x48>)
 808f91c:	4805      	ldr	r0, [pc, #20]	; (808f934 <_Z22__fetch_global_Serial5v+0x40>)
 808f91e:	f002 fdab 	bl	8092478 <__aeabi_atexit>
	return serial5;
}
 808f922:	4804      	ldr	r0, [pc, #16]	; (808f934 <_Z22__fetch_global_Serial5v+0x40>)
 808f924:	bd10      	pop	{r4, pc}
 808f926:	bf00      	nop
 808f928:	20002844 	.word	0x20002844
 808f92c:	20002848 	.word	0x20002848
 808f930:	200028e0 	.word	0x200028e0
 808f934:	200028cc 	.word	0x200028cc
 808f938:	20000538 	.word	0x20000538
 808f93c:	0808f8e5 	.word	0x0808f8e5

0808f940 <_Z15serialEventRun5v>:


void serialEventRun5()
{
 808f940:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial5, serialEvent5);
 808f942:	f7ff ffd7 	bl	808f8f4 <_Z22__fetch_global_Serial5v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 808f946:	4b07      	ldr	r3, [pc, #28]	; (808f964 <_Z15serialEventRun5v+0x24>)
 808f948:	4604      	mov	r4, r0
 808f94a:	b153      	cbz	r3, 808f962 <_Z15serialEventRun5v+0x22>
 808f94c:	f002 fc57 	bl	80921fe <_ZN11USARTSerial9isEnabledEv>
 808f950:	b138      	cbz	r0, 808f962 <_Z15serialEventRun5v+0x22>
 808f952:	6823      	ldr	r3, [r4, #0]
 808f954:	4620      	mov	r0, r4
 808f956:	691b      	ldr	r3, [r3, #16]
 808f958:	4798      	blx	r3
 808f95a:	2800      	cmp	r0, #0
 808f95c:	dd01      	ble.n	808f962 <_Z15serialEventRun5v+0x22>
        handler();
 808f95e:	f3af 8000 	nop.w
 808f962:	bd10      	pop	{r4, pc}
 808f964:	00000000 	.word	0x00000000

0808f968 <_ZN3CANC1Ev>:
#include "Serial5/Serial5.h"

CAN::CAN() 
{
    //initialization parameters
}
 808f968:	4770      	bx	lr
	...

0808f96c <_ZN3CAN5SetHSEv>:
void CAN::monitorCAN() 
{
    Serial5.write("stma\r");
}
void CAN::SetHS()
{
 808f96c:	b508      	push	{r3, lr}
    Serial5.write("ATSP6\r");
 808f96e:	f7ff ffc1 	bl	808f8f4 <_Z22__fetch_global_Serial5v>
 808f972:	4902      	ldr	r1, [pc, #8]	; (808f97c <_ZN3CAN5SetHSEv+0x10>)
 808f974:	f7f1 fff4 	bl	8081960 <_ZN5Print5writeEPKc>
 808f978:	bd08      	pop	{r3, pc}
 808f97a:	bf00      	nop
 808f97c:	080986dd 	.word	0x080986dd

0808f980 <_ZN3CAN6GetRPMEv>:
}

void CAN::GetRPM()
{
 808f980:	b508      	push	{r3, lr}
    Serial5.write("ATSH7DF\r");
 808f982:	f7ff ffb7 	bl	808f8f4 <_Z22__fetch_global_Serial5v>
 808f986:	4904      	ldr	r1, [pc, #16]	; (808f998 <_ZN3CAN6GetRPMEv+0x18>)
 808f988:	f7f1 ffea 	bl	8081960 <_ZN5Print5writeEPKc>
    Serial5.write("010C\r");
 808f98c:	f7ff ffb2 	bl	808f8f4 <_Z22__fetch_global_Serial5v>
 808f990:	4902      	ldr	r1, [pc, #8]	; (808f99c <_ZN3CAN6GetRPMEv+0x1c>)
 808f992:	f7f1 ffe5 	bl	8081960 <_ZN5Print5writeEPKc>
 808f996:	bd08      	pop	{r3, pc}
 808f998:	080986e4 	.word	0x080986e4
 808f99c:	080986ed 	.word	0x080986ed

0808f9a0 <_ZN3CAN5beginEv>:
int CAN::newData()
{
    return(Serial5.available());
}
void CAN::begin()
{
 808f9a0:	b510      	push	{r4, lr}
 808f9a2:	4604      	mov	r4, r0
    Serial5.begin(9600); 
 808f9a4:	f7ff ffa6 	bl	808f8f4 <_Z22__fetch_global_Serial5v>
 808f9a8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 808f9ac:	f002 fc22 	bl	80921f4 <_ZN11USARTSerial5beginEm>
    while(!Serial5);      
 808f9b0:	f7ff ffa0 	bl	808f8f4 <_Z22__fetch_global_Serial5v>
 808f9b4:	f002 fc21 	bl	80921fa <_ZN11USARTSerialcvbEv>
 808f9b8:	2800      	cmp	r0, #0
 808f9ba:	d0f9      	beq.n	808f9b0 <_ZN3CAN5beginEv+0x10>
    Serial5.write("atz\r");
 808f9bc:	f7ff ff9a 	bl	808f8f4 <_Z22__fetch_global_Serial5v>
 808f9c0:	4905      	ldr	r1, [pc, #20]	; (808f9d8 <_ZN3CAN5beginEv+0x38>)
 808f9c2:	f7f1 ffcd 	bl	8081960 <_ZN5Print5writeEPKc>
    delay(1200);
 808f9c6:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 808f9ca:	f002 f9d9 	bl	8091d80 <delay>
    SetHS();
 808f9ce:	4620      	mov	r0, r4
}
 808f9d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    Serial5.begin(9600); 
    while(!Serial5);      
    Serial5.write("atz\r");
    delay(1200);
    SetHS();
 808f9d4:	f7ff bfca 	b.w	808f96c <_ZN3CAN5SetHSEv>
 808f9d8:	080986f9 	.word	0x080986f9

0808f9dc <_ZN3CAN7receiveEPii>:
}
//insert buffer and size of buffer
//returns buffer with recived can data and the size of the buffer
int CAN::receive(int* buffer, int number_bytes_to_write)
{
 808f9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808f9de:	4616      	mov	r6, r2
 808f9e0:	460f      	mov	r7, r1
    int temp;
    int i = 0;
    int size = Serial5.available();
 808f9e2:	f7ff ff87 	bl	808f8f4 <_Z22__fetch_global_Serial5v>
 808f9e6:	6803      	ldr	r3, [r0, #0]
 808f9e8:	691b      	ldr	r3, [r3, #16]
 808f9ea:	4798      	blx	r3

    if (size >= number_bytes_to_write)
 808f9ec:	42b0      	cmp	r0, r6
//returns buffer with recived can data and the size of the buffer
int CAN::receive(int* buffer, int number_bytes_to_write)
{
    int temp;
    int i = 0;
    int size = Serial5.available();
 808f9ee:	4604      	mov	r4, r0

    if (size >= number_bytes_to_write)
 808f9f0:	db0b      	blt.n	808fa0a <_ZN3CAN7receiveEPii+0x2e>
 808f9f2:	2500      	movs	r5, #0
    {
        for(int i = 0; i < number_bytes_to_write; i++)
 808f9f4:	42b5      	cmp	r5, r6
 808f9f6:	da0b      	bge.n	808fa10 <_ZN3CAN7receiveEPii+0x34>
        {
            temp = Serial5.read();
 808f9f8:	f7ff ff7c 	bl	808f8f4 <_Z22__fetch_global_Serial5v>
 808f9fc:	6803      	ldr	r3, [r0, #0]
 808f9fe:	695b      	ldr	r3, [r3, #20]
 808fa00:	4798      	blx	r3
            *(buffer+i) = temp;
 808fa02:	f847 0025 	str.w	r0, [r7, r5, lsl #2]
    int i = 0;
    int size = Serial5.available();

    if (size >= number_bytes_to_write)
    {
        for(int i = 0; i < number_bytes_to_write; i++)
 808fa06:	3502      	adds	r5, #2
 808fa08:	e7f4      	b.n	808f9f4 <_ZN3CAN7receiveEPii+0x18>
            temp = Serial5.read();
            *(buffer+i) = temp;
            i++;
        }
    } else {
        return -1;
 808fa0a:	f04f 30ff 	mov.w	r0, #4294967295
 808fa0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808fa10:	4620      	mov	r0, r4
    }
    return size;
}
 808fa12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808fa14 <_GLOBAL__sub_I__Z22__fetch_global_Serial5v>:
 808fa14:	f001 b8f8 	b.w	8090c08 <HAL_Pin_Map>

0808fa18 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 808fa18:	6803      	ldr	r3, [r0, #0]
 808fa1a:	4718      	bx	r3

0808fa1c <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 808fa1c:	2a01      	cmp	r2, #1
 808fa1e:	d002      	beq.n	808fa26 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
 808fa20:	2a02      	cmp	r2, #2
 808fa22:	d002      	beq.n	808fa2a <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
 808fa24:	e004      	b.n	808fa30 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808fa26:	6001      	str	r1, [r0, #0]
	      break;
 808fa28:	e002      	b.n	808fa30 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 808fa2a:	680b      	ldr	r3, [r1, #0]
 808fa2c:	b100      	cbz	r0, 808fa30 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
 808fa2e:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 808fa30:	2000      	movs	r0, #0
 808fa32:	4770      	bx	lr

0808fa34 <_Z8callbackPcPhj>:
#endif

// recieve message handler for server_thread
//used for handling all subscription messages
//will be using for updating recv buffer
void callback(char* topic, byte* payload, unsigned int length) {
 808fa34:	b5b0      	push	{r4, r5, r7, lr}
 808fa36:	4615      	mov	r5, r2
    char p[length + 1];
 808fa38:	f102 0308 	add.w	r3, r2, #8
 808fa3c:	f023 0307 	bic.w	r3, r3, #7
#endif

// recieve message handler for server_thread
//used for handling all subscription messages
//will be using for updating recv buffer
void callback(char* topic, byte* payload, unsigned int length) {
 808fa40:	b084      	sub	sp, #16
 808fa42:	af00      	add	r7, sp, #0
    char p[length + 1];
 808fa44:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(p, payload, length);
 808fa48:	4668      	mov	r0, sp
 808fa4a:	f004 fa8a 	bl	8093f62 <memcpy>
    p[length] = NULL;
 808fa4e:	2400      	movs	r4, #0
    String message(p);
 808fa50:	4669      	mov	r1, sp
 808fa52:	4638      	mov	r0, r7
//used for handling all subscription messages
//will be using for updating recv buffer
void callback(char* topic, byte* payload, unsigned int length) {
    char p[length + 1];
    memcpy(p, payload, length);
    p[length] = NULL;
 808fa54:	f80d 4005 	strb.w	r4, [sp, r5]
    String message(p);
 808fa58:	f001 ff19 	bl	809188e <_ZN6StringC1EPK19__FlashStringHelper>

    if (message.equals("RED"))
 808fa5c:	4914      	ldr	r1, [pc, #80]	; (808fab0 <_Z8callbackPcPhj+0x7c>)
 808fa5e:	4638      	mov	r0, r7
 808fa60:	f001 ff9b 	bl	809199a <_ZNK6String6equalsEPKc>
 808fa64:	4605      	mov	r5, r0
 808fa66:	b118      	cbz	r0, 808fa70 <_Z8callbackPcPhj+0x3c>
        RGB.color(255, 0, 0);
 808fa68:	4622      	mov	r2, r4
 808fa6a:	4621      	mov	r1, r4
 808fa6c:	20ff      	movs	r0, #255	; 0xff
 808fa6e:	e013      	b.n	808fa98 <_Z8callbackPcPhj+0x64>
    else if (message.equals("GREEN"))
 808fa70:	4910      	ldr	r1, [pc, #64]	; (808fab4 <_Z8callbackPcPhj+0x80>)
 808fa72:	4638      	mov	r0, r7
 808fa74:	f001 ff91 	bl	809199a <_ZNK6String6equalsEPKc>
 808fa78:	4604      	mov	r4, r0
 808fa7a:	b110      	cbz	r0, 808fa82 <_Z8callbackPcPhj+0x4e>
        RGB.color(0, 255, 0);
 808fa7c:	462a      	mov	r2, r5
 808fa7e:	21ff      	movs	r1, #255	; 0xff
 808fa80:	e009      	b.n	808fa96 <_Z8callbackPcPhj+0x62>
    else if (message.equals("BLUE"))
 808fa82:	490d      	ldr	r1, [pc, #52]	; (808fab8 <_Z8callbackPcPhj+0x84>)
 808fa84:	4638      	mov	r0, r7
 808fa86:	f001 ff88 	bl	809199a <_ZNK6String6equalsEPKc>
        RGB.color(0, 0, 255);
 808fa8a:	22ff      	movs	r2, #255	; 0xff

    if (message.equals("RED"))
        RGB.color(255, 0, 0);
    else if (message.equals("GREEN"))
        RGB.color(0, 255, 0);
    else if (message.equals("BLUE"))
 808fa8c:	b110      	cbz	r0, 808fa94 <_Z8callbackPcPhj+0x60>
        RGB.color(0, 0, 255);
 808fa8e:	4621      	mov	r1, r4
 808fa90:	4620      	mov	r0, r4
 808fa92:	e001      	b.n	808fa98 <_Z8callbackPcPhj+0x64>
    else
        RGB.color(255, 255, 255);
 808fa94:	4611      	mov	r1, r2
 808fa96:	4610      	mov	r0, r2
 808fa98:	f002 f98b 	bl	8091db2 <_ZN8RGBClass5colorEiii>
    delay(1000);
 808fa9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808faa0:	f002 f96e 	bl	8091d80 <delay>
//will be using for updating recv buffer
void callback(char* topic, byte* payload, unsigned int length) {
    char p[length + 1];
    memcpy(p, payload, length);
    p[length] = NULL;
    String message(p);
 808faa4:	4638      	mov	r0, r7
 808faa6:	f001 feab 	bl	8091800 <_ZN6StringD1Ev>
    else if (message.equals("BLUE"))
        RGB.color(0, 0, 255);
    else
        RGB.color(255, 255, 255);
    delay(1000);
}
 808faaa:	3710      	adds	r7, #16
 808faac:	46bd      	mov	sp, r7
 808faae:	bdb0      	pop	{r4, r5, r7, pc}
 808fab0:	080986fe 	.word	0x080986fe
 808fab4:	08098702 	.word	0x08098702
 808fab8:	08098708 	.word	0x08098708

0808fabc <_Z19CAN_thread_functionv>:
        os_thread_delay_until(&lastThreadTime, 10);     //delay thread
	} 

}

void CAN_thread_function(void){
 808fabc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    os_mutex_lock(startup_can_mutex);
 808fac0:	4b16      	ldr	r3, [pc, #88]	; (808fb1c <_Z19CAN_thread_functionv+0x60>)
    int can_temp_buffer[30][8];
    int size = 0;
    int current_frames;
    int c_frames_in_buffer=0;

    stn->begin();
 808fac2:	4e17      	ldr	r6, [pc, #92]	; (808fb20 <_Z19CAN_thread_functionv+0x64>)
        os_thread_delay_until(&lastThreadTime, 10);     //delay thread
	} 

}

void CAN_thread_function(void){
 808fac4:	f5ad 7d70 	sub.w	sp, sp, #960	; 0x3c0
    os_mutex_lock(startup_can_mutex);
 808fac8:	6818      	ldr	r0, [r3, #0]
 808faca:	f001 f95d 	bl	8090d88 <os_mutex_lock>
    int can_temp_buffer[30][8];
    int size = 0;
    int current_frames;
    int c_frames_in_buffer=0;

    stn->begin();
 808face:	6830      	ldr	r0, [r6, #0]
 808fad0:	f7ff ff66 	bl	808f9a0 <_ZN3CAN5beginEv>

        //lock out for writing
        stn->GetRPM();
        stn->receive(can_temp_buffer[0],8);

        new_can_flag = true;
 808fad4:	f8df 8058 	ldr.w	r8, [pc, #88]	; 808fb30 <_Z19CAN_thread_functionv+0x74>

        if(os_mutex_trylock(can_recv_mutex))
 808fad8:	4c12      	ldr	r4, [pc, #72]	; (808fb24 <_Z19CAN_thread_functionv+0x68>)
            c_frames_in_buffer = 0;     //start as first frame read in buffer    
        } 
        c_frames_in_buffer++;           //increase number of records in buffer by one      

        //lock out for writing
        stn->GetRPM();
 808fada:	6830      	ldr	r0, [r6, #0]
 808fadc:	f7ff ff50 	bl	808f980 <_ZN3CAN6GetRPMEv>
        stn->receive(can_temp_buffer[0],8);
 808fae0:	2208      	movs	r2, #8
 808fae2:	4669      	mov	r1, sp
 808fae4:	6830      	ldr	r0, [r6, #0]
 808fae6:	f7ff ff79 	bl	808f9dc <_ZN3CAN7receiveEPii>

        new_can_flag = true;
 808faea:	2701      	movs	r7, #1

        if(os_mutex_trylock(can_recv_mutex))
 808faec:	6820      	ldr	r0, [r4, #0]

        //lock out for writing
        stn->GetRPM();
        stn->receive(can_temp_buffer[0],8);

        new_can_flag = true;
 808faee:	f888 7000 	strb.w	r7, [r8]

        if(os_mutex_trylock(can_recv_mutex))
 808faf2:	f001 f951 	bl	8090d98 <os_mutex_trylock>
 808faf6:	2800      	cmp	r0, #0
 808faf8:	d0ef      	beq.n	808fada <_Z19CAN_thread_functionv+0x1e>
        {
            //copy temp_dof_buffer to dof_recv_buffer
            can_frames_in_buffer = 1;  //copy temp_dof_buffer to dof_recv_buffer
            for(int j = 0; j<1; j++)
            {
                memcpy(&can_recv_buffer[j], &can_temp_buffer[j], sizeof(can_temp_buffer[0]));
 808fafa:	466d      	mov	r5, sp
        new_can_flag = true;

        if(os_mutex_trylock(can_recv_mutex))
        {
            //copy temp_dof_buffer to dof_recv_buffer
            can_frames_in_buffer = 1;  //copy temp_dof_buffer to dof_recv_buffer
 808fafc:	4b0a      	ldr	r3, [pc, #40]	; (808fb28 <_Z19CAN_thread_functionv+0x6c>)
            for(int j = 0; j<1; j++)
            {
                memcpy(&can_recv_buffer[j], &can_temp_buffer[j], sizeof(can_temp_buffer[0]));
 808fafe:	4c0b      	ldr	r4, [pc, #44]	; (808fb2c <_Z19CAN_thread_functionv+0x70>)
        new_can_flag = true;

        if(os_mutex_trylock(can_recv_mutex))
        {
            //copy temp_dof_buffer to dof_recv_buffer
            can_frames_in_buffer = 1;  //copy temp_dof_buffer to dof_recv_buffer
 808fb00:	601f      	str	r7, [r3, #0]
            for(int j = 0; j<1; j++)
            {
                memcpy(&can_recv_buffer[j], &can_temp_buffer[j], sizeof(can_temp_buffer[0]));
 808fb02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 808fb04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 808fb06:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 808fb0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            }
            new_can_flag = true;                        //new information is in the recv_buffer
 808fb0e:	4b08      	ldr	r3, [pc, #32]	; (808fb30 <_Z19CAN_thread_functionv+0x74>)
 808fb10:	701f      	strb	r7, [r3, #0]
            os_mutex_unlock(can_recv_mutex);
 808fb12:	4b04      	ldr	r3, [pc, #16]	; (808fb24 <_Z19CAN_thread_functionv+0x68>)
 808fb14:	6818      	ldr	r0, [r3, #0]
 808fb16:	f001 f947 	bl	8090da8 <os_mutex_unlock>
 808fb1a:	e7dd      	b.n	808fad8 <_Z19CAN_thread_functionv+0x1c>
 808fb1c:	20002e70 	.word	0x20002e70
 808fb20:	20002e74 	.word	0x20002e74
 808fb24:	20002e6c 	.word	0x20002e6c
 808fb28:	20002990 	.word	0x20002990
 808fb2c:	20002aa8 	.word	0x20002aa8
 808fb30:	2000298c 	.word	0x2000298c

0808fb34 <_Z24internal_thread_functionv>:
        }
    }
}

//does not require cell connection
void internal_thread_function(void){
 808fb34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int g_frames_in_buffer = 0; //set frames to 0, ie no records yet
    //never return
    while(1){

        //set number of records in temp buffer
        if(!new_dof_flag)
 808fb38:	f8df 8124 	ldr.w	r8, [pc, #292]	; 808fc60 <_Z24internal_thread_functionv+0x12c>

    //setup gps and dof
    dof->begin();                   //DOF begin communication
    float temp_dof_buffer[30][9];   //temp buffer to store dof data
    float temp_gps_buffer[30][2];   //temp buffer to store gps data
    dof_frames_in_buffer = 0;       //set frames to 0, ie no records yet
 808fb3c:	2400      	movs	r4, #0
    gps_frames_in_buffer = 0;       //set frames to 0, ie no records yet
    int d_frames_in_buffer = 0;     //set frames to 0, ie no records yet
 808fb3e:	46a2      	mov	sl, r4
 808fb40:	4647      	mov	r7, r8

//does not require cell connection
void internal_thread_function(void){

    //wait for startup function
    os_mutex_lock(startup_internal_mutex);
 808fb42:	4b40      	ldr	r3, [pc, #256]	; (808fc44 <_Z24internal_thread_functionv+0x110>)

    //setup gps and dof
    dof->begin();                   //DOF begin communication
 808fb44:	4d40      	ldr	r5, [pc, #256]	; (808fc48 <_Z24internal_thread_functionv+0x114>)
        }
    }
}

//does not require cell connection
void internal_thread_function(void){
 808fb46:	f2ad 5d4c 	subw	sp, sp, #1356	; 0x54c

    //wait for startup function
    os_mutex_lock(startup_internal_mutex);
 808fb4a:	6818      	ldr	r0, [r3, #0]
 808fb4c:	f001 f91c 	bl	8090d88 <os_mutex_lock>

    //setup gps and dof
    dof->begin();                   //DOF begin communication
 808fb50:	6828      	ldr	r0, [r5, #0]
 808fb52:	f000 fb5f 	bl	8090214 <_ZN3DOF5beginEv>
    float temp_dof_buffer[30][9];   //temp buffer to store dof data
    float temp_gps_buffer[30][2];   //temp buffer to store gps data
    dof_frames_in_buffer = 0;       //set frames to 0, ie no records yet
 808fb56:	4a3d      	ldr	r2, [pc, #244]	; (808fc4c <_Z24internal_thread_functionv+0x118>)
    gps_frames_in_buffer = 0;       //set frames to 0, ie no records yet
 808fb58:	4b3d      	ldr	r3, [pc, #244]	; (808fc50 <_Z24internal_thread_functionv+0x11c>)
 808fb5a:	9501      	str	r5, [sp, #4]

        //dof read all 9 degrees
        dof->getAll();

        //stroe dof values in temp buffer at current record
        temp_dof_buffer[d_frames_in_buffer-1][0] = 13.4;
 808fb5c:	4d3d      	ldr	r5, [pc, #244]	; (808fc54 <_Z24internal_thread_functionv+0x120>)

    //setup gps and dof
    dof->begin();                   //DOF begin communication
    float temp_dof_buffer[30][9];   //temp buffer to store dof data
    float temp_gps_buffer[30][2];   //temp buffer to store gps data
    dof_frames_in_buffer = 0;       //set frames to 0, ie no records yet
 808fb5e:	6014      	str	r4, [r2, #0]
    gps_frames_in_buffer = 0;       //set frames to 0, ie no records yet
 808fb60:	601c      	str	r4, [r3, #0]
 808fb62:	9202      	str	r2, [sp, #8]
 808fb64:	9303      	str	r3, [sp, #12]
    int g_frames_in_buffer = 0; //set frames to 0, ie no records yet
    //never return
    while(1){

        //set number of records in temp buffer
        if(!new_dof_flag)
 808fb66:	f898 3000 	ldrb.w	r3, [r8]

        //dof read all 9 degrees
        dof->getAll();

        //stroe dof values in temp buffer at current record
        temp_dof_buffer[d_frames_in_buffer-1][0] = 13.4;
 808fb6a:	f04f 0b24 	mov.w	fp, #36	; 0x24
    while(1){

        //set number of records in temp buffer
        if(!new_dof_flag)
        {
            d_frames_in_buffer = 0;     //start as first frame read in buffer    
 808fb6e:	2b00      	cmp	r3, #0
        } 
        d_frames_in_buffer++;           //increase number of records in buffer by one      

        if(!new_gps_flag)
 808fb70:	4b39      	ldr	r3, [pc, #228]	; (808fc58 <_Z24internal_thread_functionv+0x124>)
    while(1){

        //set number of records in temp buffer
        if(!new_dof_flag)
        {
            d_frames_in_buffer = 0;     //start as first frame read in buffer    
 808fb72:	bf08      	it	eq
 808fb74:	f04f 0a00 	moveq.w	sl, #0
        } 
        d_frames_in_buffer++;           //increase number of records in buffer by one      

        if(!new_gps_flag)
 808fb78:	781b      	ldrb	r3, [r3, #0]
        //set number of records in temp buffer
        if(!new_dof_flag)
        {
            d_frames_in_buffer = 0;     //start as first frame read in buffer    
        } 
        d_frames_in_buffer++;           //increase number of records in buffer by one      
 808fb7a:	f10a 0601 	add.w	r6, sl, #1

        if(!new_gps_flag)
        {
            g_frames_in_buffer = 0;     //start as first frame read in buffer    
 808fb7e:	2b00      	cmp	r3, #0

        //dof read all 9 degrees
        dof->getAll();

        //stroe dof values in temp buffer at current record
        temp_dof_buffer[d_frames_in_buffer-1][0] = 13.4;
 808fb80:	fb0b fa0a 	mul.w	sl, fp, sl
            g_frames_in_buffer = 0;     //start as first frame read in buffer    
        } 
        g_frames_in_buffer++;           //increase number of records in buffer by one    

        //dof read all 9 degrees
        dof->getAll();
 808fb84:	9b01      	ldr	r3, [sp, #4]
 808fb86:	a804      	add	r0, sp, #16
 808fb88:	6819      	ldr	r1, [r3, #0]
        } 
        d_frames_in_buffer++;           //increase number of records in buffer by one      

        if(!new_gps_flag)
        {
            g_frames_in_buffer = 0;     //start as first frame read in buffer    
 808fb8a:	bf08      	it	eq
 808fb8c:	2400      	moveq	r4, #0

        //dof read all 9 degrees
        dof->getAll();

        //stroe dof values in temp buffer at current record
        temp_dof_buffer[d_frames_in_buffer-1][0] = 13.4;
 808fb8e:	f50d 7988 	add.w	r9, sp, #272	; 0x110
            g_frames_in_buffer = 0;     //start as first frame read in buffer    
        } 
        g_frames_in_buffer++;           //increase number of records in buffer by one    

        //dof read all 9 degrees
        dof->getAll();
 808fb92:	f000 fb4b 	bl	809022c <_ZN3DOF6getAllEv>
 808fb96:	a804      	add	r0, sp, #16
 808fb98:	f001 fe32 	bl	8091800 <_ZN6StringD1Ev>

        //stroe dof values in temp buffer at current record
        temp_dof_buffer[d_frames_in_buffer-1][0] = 13.4;
 808fb9c:	eb09 030a 	add.w	r3, r9, sl
 808fba0:	f849 500a 	str.w	r5, [r9, sl]
        //repeat for gps


        //transfer data to main buffer when locks are avaliable
#if DOF_STATUS
        if(os_mutex_trylock(dof_recv_mutex))
 808fba4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 808fc64 <_Z24internal_thread_functionv+0x130>

        if(!new_gps_flag)
        {
            g_frames_in_buffer = 0;     //start as first frame read in buffer    
        } 
        g_frames_in_buffer++;           //increase number of records in buffer by one    
 808fba8:	3401      	adds	r4, #1
        //repeat for gps


        //transfer data to main buffer when locks are avaliable
#if DOF_STATUS
        if(os_mutex_trylock(dof_recv_mutex))
 808fbaa:	f8da 0000 	ldr.w	r0, [sl]
        //dof read all 9 degrees
        dof->getAll();

        //stroe dof values in temp buffer at current record
        temp_dof_buffer[d_frames_in_buffer-1][0] = 13.4;
        temp_dof_buffer[d_frames_in_buffer-1][1] = 13.4;
 808fbae:	605d      	str	r5, [r3, #4]
        temp_dof_buffer[d_frames_in_buffer-1][2] = 13.4;
 808fbb0:	609d      	str	r5, [r3, #8]
        temp_dof_buffer[d_frames_in_buffer-1][3] = 13.4;
 808fbb2:	60dd      	str	r5, [r3, #12]
        temp_dof_buffer[d_frames_in_buffer-1][4] = 13.4;
 808fbb4:	611d      	str	r5, [r3, #16]
        temp_dof_buffer[d_frames_in_buffer-1][5] = 13.4;
 808fbb6:	615d      	str	r5, [r3, #20]
        temp_dof_buffer[d_frames_in_buffer-1][6] = 13.4;
 808fbb8:	619d      	str	r5, [r3, #24]
        temp_dof_buffer[d_frames_in_buffer-1][7] = 13.4;
 808fbba:	61dd      	str	r5, [r3, #28]
        temp_dof_buffer[d_frames_in_buffer-1][8] = 13.4;
 808fbbc:	621d      	str	r5, [r3, #32]
        //repeat for gps


        //transfer data to main buffer when locks are avaliable
#if DOF_STATUS
        if(os_mutex_trylock(dof_recv_mutex))
 808fbbe:	f001 f8eb 	bl	8090d98 <os_mutex_trylock>
 808fbc2:	b1d8      	cbz	r0, 808fbfc <_Z24internal_thread_functionv+0xc8>
 808fbc4:	4659      	mov	r1, fp
        {
            //copy temp_dof_buffer to dof_recv_buffer
            dof_frames_in_buffer = d_frames_in_buffer;  //copy temp_dof_buffer to dof_recv_buffer
 808fbc6:	9b02      	ldr	r3, [sp, #8]
            for(int j = 0; j<dof_frames_in_buffer; j++)
            {
                memcpy(&dof_recv_buffer[j], &temp_dof_buffer[j], sizeof(temp_dof_buffer[0]));
 808fbc8:	f8df e09c 	ldr.w	lr, [pc, #156]	; 808fc68 <_Z24internal_thread_functionv+0x134>
        //transfer data to main buffer when locks are avaliable
#if DOF_STATUS
        if(os_mutex_trylock(dof_recv_mutex))
        {
            //copy temp_dof_buffer to dof_recv_buffer
            dof_frames_in_buffer = d_frames_in_buffer;  //copy temp_dof_buffer to dof_recv_buffer
 808fbcc:	601e      	str	r6, [r3, #0]
            for(int j = 0; j<dof_frames_in_buffer; j++)
 808fbce:	2200      	movs	r2, #0
 808fbd0:	fb01 f302 	mul.w	r3, r1, r2
            {
                memcpy(&dof_recv_buffer[j], &temp_dof_buffer[j], sizeof(temp_dof_buffer[0]));
 808fbd4:	eb09 0003 	add.w	r0, r9, r3
 808fbd8:	f100 0c24 	add.w	ip, r0, #36	; 0x24
 808fbdc:	4473      	add	r3, lr
 808fbde:	f850 bb04 	ldr.w	fp, [r0], #4
 808fbe2:	4560      	cmp	r0, ip
 808fbe4:	f843 bb04 	str.w	fp, [r3], #4
 808fbe8:	d1f9      	bne.n	808fbde <_Z24internal_thread_functionv+0xaa>
#if DOF_STATUS
        if(os_mutex_trylock(dof_recv_mutex))
        {
            //copy temp_dof_buffer to dof_recv_buffer
            dof_frames_in_buffer = d_frames_in_buffer;  //copy temp_dof_buffer to dof_recv_buffer
            for(int j = 0; j<dof_frames_in_buffer; j++)
 808fbea:	3201      	adds	r2, #1
 808fbec:	4296      	cmp	r6, r2
 808fbee:	dcef      	bgt.n	808fbd0 <_Z24internal_thread_functionv+0x9c>
            {
                memcpy(&dof_recv_buffer[j], &temp_dof_buffer[j], sizeof(temp_dof_buffer[0]));
            }
            new_dof_flag = true;                        //new information is in the recv_buffer
 808fbf0:	2301      	movs	r3, #1
            os_mutex_unlock(dof_recv_mutex);
 808fbf2:	f8da 0000 	ldr.w	r0, [sl]
            dof_frames_in_buffer = d_frames_in_buffer;  //copy temp_dof_buffer to dof_recv_buffer
            for(int j = 0; j<dof_frames_in_buffer; j++)
            {
                memcpy(&dof_recv_buffer[j], &temp_dof_buffer[j], sizeof(temp_dof_buffer[0]));
            }
            new_dof_flag = true;                        //new information is in the recv_buffer
 808fbf6:	703b      	strb	r3, [r7, #0]
            os_mutex_unlock(dof_recv_mutex);
 808fbf8:	f001 f8d6 	bl	8090da8 <os_mutex_unlock>
        }
#endif
#if GPS_STATUS

        if(os_mutex_trylock(gps_recv_mutex))
 808fbfc:	f8df 906c 	ldr.w	r9, [pc, #108]	; 808fc6c <_Z24internal_thread_functionv+0x138>
 808fc00:	f8d9 0000 	ldr.w	r0, [r9]
 808fc04:	f001 f8c8 	bl	8090d98 <os_mutex_trylock>
 808fc08:	b908      	cbnz	r0, 808fc0e <_Z24internal_thread_functionv+0xda>
        //set number of records in temp buffer
        if(!new_dof_flag)
        {
            d_frames_in_buffer = 0;     //start as first frame read in buffer    
        } 
        d_frames_in_buffer++;           //increase number of records in buffer by one      
 808fc0a:	46b2      	mov	sl, r6
 808fc0c:	e7ab      	b.n	808fb66 <_Z24internal_thread_functionv+0x32>
#endif
#if GPS_STATUS

        if(os_mutex_trylock(gps_recv_mutex))
        {
            gps_frames_in_buffer = g_frames_in_buffer;  //copy temp_gps_buffer to gps_recv_buffer
 808fc0e:	9b03      	ldr	r3, [sp, #12]
            for(int j = 0; j<gps_frames_in_buffer; j++)
            {
                memcpy(&gps_recv_buffer[j], &temp_gps_buffer[j], sizeof(temp_gps_buffer[0]));
 808fc10:	4912      	ldr	r1, [pc, #72]	; (808fc5c <_Z24internal_thread_functionv+0x128>)
#endif
#if GPS_STATUS

        if(os_mutex_trylock(gps_recv_mutex))
        {
            gps_frames_in_buffer = g_frames_in_buffer;  //copy temp_gps_buffer to gps_recv_buffer
 808fc12:	601c      	str	r4, [r3, #0]
            for(int j = 0; j<gps_frames_in_buffer; j++)
 808fc14:	2300      	movs	r3, #0
 808fc16:	00da      	lsls	r2, r3, #3
            {
                memcpy(&gps_recv_buffer[j], &temp_gps_buffer[j], sizeof(temp_gps_buffer[0]));
 808fc18:	f10d 0e20 	add.w	lr, sp, #32
 808fc1c:	1888      	adds	r0, r1, r2
 808fc1e:	4472      	add	r2, lr
 808fc20:	f8d2 e000 	ldr.w	lr, [r2]
 808fc24:	f841 e033 	str.w	lr, [r1, r3, lsl #3]
 808fc28:	f8d2 e004 	ldr.w	lr, [r2, #4]
#if GPS_STATUS

        if(os_mutex_trylock(gps_recv_mutex))
        {
            gps_frames_in_buffer = g_frames_in_buffer;  //copy temp_gps_buffer to gps_recv_buffer
            for(int j = 0; j<gps_frames_in_buffer; j++)
 808fc2c:	3301      	adds	r3, #1
 808fc2e:	429c      	cmp	r4, r3
            {
                memcpy(&gps_recv_buffer[j], &temp_gps_buffer[j], sizeof(temp_gps_buffer[0]));
 808fc30:	f8c0 e004 	str.w	lr, [r0, #4]
#if GPS_STATUS

        if(os_mutex_trylock(gps_recv_mutex))
        {
            gps_frames_in_buffer = g_frames_in_buffer;  //copy temp_gps_buffer to gps_recv_buffer
            for(int j = 0; j<gps_frames_in_buffer; j++)
 808fc34:	dcef      	bgt.n	808fc16 <_Z24internal_thread_functionv+0xe2>
            {
                memcpy(&gps_recv_buffer[j], &temp_gps_buffer[j], sizeof(temp_gps_buffer[0]));
            }
            new_dof_flag = true;                        //new information is in the recv_buffer
 808fc36:	2301      	movs	r3, #1
            os_mutex_unlock(gps_recv_mutex);
 808fc38:	f8d9 0000 	ldr.w	r0, [r9]
            gps_frames_in_buffer = g_frames_in_buffer;  //copy temp_gps_buffer to gps_recv_buffer
            for(int j = 0; j<gps_frames_in_buffer; j++)
            {
                memcpy(&gps_recv_buffer[j], &temp_gps_buffer[j], sizeof(temp_gps_buffer[0]));
            }
            new_dof_flag = true;                        //new information is in the recv_buffer
 808fc3c:	703b      	strb	r3, [r7, #0]
            os_mutex_unlock(gps_recv_mutex);
 808fc3e:	f001 f8b3 	bl	8090da8 <os_mutex_unlock>
 808fc42:	e7e2      	b.n	808fc0a <_Z24internal_thread_functionv+0xd6>
 808fc44:	20002e78 	.word	0x20002e78
 808fc48:	20002964 	.word	0x20002964
 808fc4c:	200032c0 	.word	0x200032c0
 808fc50:	20002994 	.word	0x20002994
 808fc54:	41566666 	.word	0x41566666
 808fc58:	20002a8c 	.word	0x20002a8c
 808fc5c:	20002998 	.word	0x20002998
 808fc60:	20002e68 	.word	0x20002e68
 808fc64:	20002980 	.word	0x20002980
 808fc68:	20002e88 	.word	0x20002e88
 808fc6c:	20002e84 	.word	0x20002e84

0808fc70 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
 808fc70:	b510      	push	{r4, lr}
        Thread* th = (Thread*)param;
        if (th->func_) {
 808fc72:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
 808fc74:	4604      	mov	r4, r0
        Thread* th = (Thread*)param;
        if (th->func_) {
 808fc76:	b10b      	cbz	r3, 808fc7c <_ZN6Thread3runEPv+0xc>
            (*(th->func_))(th->func_param_);
 808fc78:	68c0      	ldr	r0, [r0, #12]
 808fc7a:	e006      	b.n	808fc8a <_ZN6Thread3runEPv+0x1a>
        } else if (th->wrapper) {
 808fc7c:	6840      	ldr	r0, [r0, #4]
 808fc7e:	b128      	cbz	r0, 808fc8c <_ZN6Thread3runEPv+0x1c>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808fc80:	6883      	ldr	r3, [r0, #8]
 808fc82:	b90b      	cbnz	r3, 808fc88 <_ZN6Thread3runEPv+0x18>
	__throw_bad_function_call();
 808fc84:	f002 fbfd 	bl	8092482 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808fc88:	68c3      	ldr	r3, [r0, #12]
 808fc8a:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited_ = true;
 808fc8c:	2301      	movs	r3, #1
 808fc8e:	7423      	strb	r3, [r4, #16]
        os_thread_exit(nullptr);
 808fc90:	2000      	movs	r0, #0
    }
 808fc92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func_))(th->func_param_);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited_ = true;
        os_thread_exit(nullptr);
 808fc96:	f001 b89f 	b.w	8090dd8 <os_thread_exit>

0808fc9a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 808fc9a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 808fc9c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 808fc9e:	4604      	mov	r4, r0
    {
      if (_M_manager)
 808fca0:	b113      	cbz	r3, 808fca8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 808fca2:	2203      	movs	r2, #3
 808fca4:	4601      	mov	r1, r0
 808fca6:	4798      	blx	r3
    }
 808fca8:	4620      	mov	r0, r4
 808fcaa:	bd10      	pop	{r4, pc}

0808fcac <_ZN6ThreadD1Ev>:
            wrapper = new wiring_thread_fn_t(function);
            os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
        }
    }

    ~Thread()
 808fcac:	b538      	push	{r3, r4, r5, lr}
 808fcae:	4604      	mov	r4, r0
 808fcb0:	6800      	ldr	r0, [r0, #0]
        dispose();
    }

    void dispose()
    {
        if (!is_valid())
 808fcb2:	b1a8      	cbz	r0, 808fce0 <_ZN6ThreadD1Ev+0x34>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
 808fcb4:	f001 f848 	bl	8090d48 <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
 808fcb8:	b990      	cbnz	r0, 808fce0 <_ZN6ThreadD1Ev+0x34>
            return;

        if (!exited_) {
 808fcba:	7c23      	ldrb	r3, [r4, #16]
 808fcbc:	b91b      	cbnz	r3, 808fcc6 <_ZN6ThreadD1Ev+0x1a>
 808fcbe:	6820      	ldr	r0, [r4, #0]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
 808fcc0:	b108      	cbz	r0, 808fcc6 <_ZN6ThreadD1Ev+0x1a>
 808fcc2:	f001 f849 	bl	8090d58 <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
 808fcc6:	6865      	ldr	r5, [r4, #4]
 808fcc8:	b13d      	cbz	r5, 808fcda <_ZN6ThreadD1Ev+0x2e>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808fcca:	4628      	mov	r0, r5
 808fccc:	f7ff ffe5 	bl	808fc9a <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
 808fcd0:	4628      	mov	r0, r5
 808fcd2:	f7f0 f9e6 	bl	80800a2 <_ZdlPv>
            wrapper = NULL;
 808fcd6:	2300      	movs	r3, #0
 808fcd8:	6063      	str	r3, [r4, #4]
        }

        os_thread_cleanup(handle);
 808fcda:	6820      	ldr	r0, [r4, #0]
 808fcdc:	f001 f844 	bl	8090d68 <os_thread_cleanup>
    }

    ~Thread()
    {
        dispose();
    }
 808fce0:	4620      	mov	r0, r4
 808fce2:	bd38      	pop	{r3, r4, r5, pc}

0808fce4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
          func_param_(function_param)
    {
        os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
    }

    Thread(const char *name, wiring_thread_fn_t function,
 808fce4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : handle(OS_THREAD_INVALID_HANDLE), wrapper(NULL)
 808fce8:	2500      	movs	r5, #0
 808fcea:	6005      	str	r5, [r0, #0]
 808fcec:	6045      	str	r5, [r0, #4]
 808fcee:	6085      	str	r5, [r0, #8]
 808fcf0:	60c5      	str	r5, [r0, #12]
 808fcf2:	7405      	strb	r5, [r0, #16]
          func_param_(function_param)
    {
        os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
    }

    Thread(const char *name, wiring_thread_fn_t function,
 808fcf4:	4699      	mov	r9, r3
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : handle(OS_THREAD_INVALID_HANDLE), wrapper(NULL)
    {
        if(function) {
 808fcf6:	6893      	ldr	r3, [r2, #8]
          func_param_(function_param)
    {
        os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
    }

    Thread(const char *name, wiring_thread_fn_t function,
 808fcf8:	4604      	mov	r4, r0
 808fcfa:	4688      	mov	r8, r1
 808fcfc:	4616      	mov	r6, r2
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : handle(OS_THREAD_INVALID_HANDLE), wrapper(NULL)
    {
        if(function) {
 808fcfe:	b1c3      	cbz	r3, 808fd32 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x4e>
            wrapper = new wiring_thread_fn_t(function);
 808fd00:	2010      	movs	r0, #16
 808fd02:	f7f0 f9ca 	bl	808009a <_Znwj>
 808fd06:	4607      	mov	r7, r0
 808fd08:	b148      	cbz	r0, 808fd1e <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x3a>
 808fd0a:	68b3      	ldr	r3, [r6, #8]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808fd0c:	6085      	str	r5, [r0, #8]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 808fd0e:	b133      	cbz	r3, 808fd1e <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x3a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808fd10:	2202      	movs	r2, #2
 808fd12:	4631      	mov	r1, r6
 808fd14:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808fd16:	68f3      	ldr	r3, [r6, #12]
 808fd18:	60fb      	str	r3, [r7, #12]
	  _M_manager = __x._M_manager;
 808fd1a:	68b3      	ldr	r3, [r6, #8]
 808fd1c:	60bb      	str	r3, [r7, #8]
            os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
 808fd1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    Thread(const char *name, wiring_thread_fn_t function,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : handle(OS_THREAD_INVALID_HANDLE), wrapper(NULL)
    {
        if(function) {
            wrapper = new wiring_thread_fn_t(function);
 808fd20:	6067      	str	r7, [r4, #4]
            os_thread_create(&handle, name, priority, &Thread::run, this, stack_size);
 808fd22:	9301      	str	r3, [sp, #4]
 808fd24:	9400      	str	r4, [sp, #0]
 808fd26:	4b05      	ldr	r3, [pc, #20]	; (808fd3c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x58>)
 808fd28:	464a      	mov	r2, r9
 808fd2a:	4641      	mov	r1, r8
 808fd2c:	4620      	mov	r0, r4
 808fd2e:	f001 f803 	bl	8090d38 <os_thread_create>
        }
    }
 808fd32:	4620      	mov	r0, r4
 808fd34:	b003      	add	sp, #12
 808fd36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808fd3a:	bf00      	nop
 808fd3c:	0808fc71 	.word	0x0808fc71

0808fd40 <_Z16startup_functionv>:
    delay(1000);
}

//use for thread setup
//use for connection setup
void startup_function() {
 808fd40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

     // Create mutexs
    os_mutex_create(&mqtt_mutex);
 808fd44:	4e37      	ldr	r6, [pc, #220]	; (808fe24 <_Z16startup_functionv+0xe4>)
	os_mutex_create(&mqtt_recv_mutex);
    os_mutex_create(&mqtt_send_mutex);
 808fd46:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 808fe38 <_Z16startup_functionv+0xf8>
//use for thread setup
//use for connection setup
void startup_function() {

     // Create mutexs
    os_mutex_create(&mqtt_mutex);
 808fd4a:	4630      	mov	r0, r6
 808fd4c:	f001 f814 	bl	8090d78 <os_mutex_create>
	os_mutex_create(&mqtt_recv_mutex);
 808fd50:	4b35      	ldr	r3, [pc, #212]	; (808fe28 <_Z16startup_functionv+0xe8>)
    os_mutex_create(&mqtt_send_mutex);
    os_mutex_create(&can_recv_mutex);
 808fd52:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 808fe3c <_Z16startup_functionv+0xfc>
//use for connection setup
void startup_function() {

     // Create mutexs
    os_mutex_create(&mqtt_mutex);
	os_mutex_create(&mqtt_recv_mutex);
 808fd56:	4618      	mov	r0, r3
 808fd58:	9301      	str	r3, [sp, #4]
    os_mutex_create(&mqtt_send_mutex);
    os_mutex_create(&can_recv_mutex);
    os_mutex_create(&can_send_mutex);
 808fd5a:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 808fe40 <_Z16startup_functionv+0x100>
//use for connection setup
void startup_function() {

     // Create mutexs
    os_mutex_create(&mqtt_mutex);
	os_mutex_create(&mqtt_recv_mutex);
 808fd5e:	f001 f80b 	bl	8090d78 <os_mutex_create>
    os_mutex_create(&mqtt_send_mutex);
 808fd62:	4658      	mov	r0, fp
 808fd64:	f001 f808 	bl	8090d78 <os_mutex_create>
    os_mutex_create(&can_recv_mutex);
    os_mutex_create(&can_send_mutex);
    os_mutex_create(&gps_recv_mutex);
 808fd68:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 808fe44 <_Z16startup_functionv+0x104>

     // Create mutexs
    os_mutex_create(&mqtt_mutex);
	os_mutex_create(&mqtt_recv_mutex);
    os_mutex_create(&mqtt_send_mutex);
    os_mutex_create(&can_recv_mutex);
 808fd6c:	4650      	mov	r0, sl
 808fd6e:	f001 f803 	bl	8090d78 <os_mutex_create>
    os_mutex_create(&can_send_mutex);
    os_mutex_create(&gps_recv_mutex);
    os_mutex_create(&dof_recv_mutex);
 808fd72:	4f2e      	ldr	r7, [pc, #184]	; (808fe2c <_Z16startup_functionv+0xec>)
     // Create mutexs
    os_mutex_create(&mqtt_mutex);
	os_mutex_create(&mqtt_recv_mutex);
    os_mutex_create(&mqtt_send_mutex);
    os_mutex_create(&can_recv_mutex);
    os_mutex_create(&can_send_mutex);
 808fd74:	4648      	mov	r0, r9
 808fd76:	f000 ffff 	bl	8090d78 <os_mutex_create>
    os_mutex_create(&gps_recv_mutex);
    os_mutex_create(&dof_recv_mutex);

    os_mutex_create(&startup_internal_mutex);
 808fd7a:	4d2d      	ldr	r5, [pc, #180]	; (808fe30 <_Z16startup_functionv+0xf0>)
    os_mutex_create(&mqtt_mutex);
	os_mutex_create(&mqtt_recv_mutex);
    os_mutex_create(&mqtt_send_mutex);
    os_mutex_create(&can_recv_mutex);
    os_mutex_create(&can_send_mutex);
    os_mutex_create(&gps_recv_mutex);
 808fd7c:	4640      	mov	r0, r8
 808fd7e:	f000 fffb 	bl	8090d78 <os_mutex_create>
    os_mutex_create(&dof_recv_mutex);

    os_mutex_create(&startup_internal_mutex);
    os_mutex_create(&startup_can_mutex);
 808fd82:	4c2c      	ldr	r4, [pc, #176]	; (808fe34 <_Z16startup_functionv+0xf4>)
	os_mutex_create(&mqtt_recv_mutex);
    os_mutex_create(&mqtt_send_mutex);
    os_mutex_create(&can_recv_mutex);
    os_mutex_create(&can_send_mutex);
    os_mutex_create(&gps_recv_mutex);
    os_mutex_create(&dof_recv_mutex);
 808fd84:	4638      	mov	r0, r7
 808fd86:	f000 fff7 	bl	8090d78 <os_mutex_create>

    os_mutex_create(&startup_internal_mutex);
 808fd8a:	4628      	mov	r0, r5
 808fd8c:	f000 fff4 	bl	8090d78 <os_mutex_create>
    os_mutex_create(&startup_can_mutex);
 808fd90:	4620      	mov	r0, r4
 808fd92:	f000 fff1 	bl	8090d78 <os_mutex_create>

    //lock mutex
    os_mutex_lock(mqtt_mutex);
 808fd96:	6830      	ldr	r0, [r6, #0]
 808fd98:	f000 fff6 	bl	8090d88 <os_mutex_lock>
	os_mutex_lock(mqtt_recv_mutex);
 808fd9c:	9b01      	ldr	r3, [sp, #4]
 808fd9e:	6818      	ldr	r0, [r3, #0]
 808fda0:	f000 fff2 	bl	8090d88 <os_mutex_lock>
    os_mutex_lock(mqtt_send_mutex);
 808fda4:	f8db 0000 	ldr.w	r0, [fp]
 808fda8:	f000 ffee 	bl	8090d88 <os_mutex_lock>
    os_mutex_lock(can_recv_mutex);
 808fdac:	f8da 0000 	ldr.w	r0, [sl]
 808fdb0:	f000 ffea 	bl	8090d88 <os_mutex_lock>
    os_mutex_lock(can_send_mutex);
 808fdb4:	f8d9 0000 	ldr.w	r0, [r9]
 808fdb8:	f000 ffe6 	bl	8090d88 <os_mutex_lock>
    os_mutex_lock(gps_recv_mutex);
 808fdbc:	f8d8 0000 	ldr.w	r0, [r8]
 808fdc0:	f000 ffe2 	bl	8090d88 <os_mutex_lock>
    os_mutex_lock(dof_recv_mutex);
 808fdc4:	6838      	ldr	r0, [r7, #0]
 808fdc6:	f000 ffdf 	bl	8090d88 <os_mutex_lock>

    os_mutex_lock(startup_internal_mutex);
 808fdca:	6828      	ldr	r0, [r5, #0]
 808fdcc:	f000 ffdc 	bl	8090d88 <os_mutex_lock>
    os_mutex_lock(startup_can_mutex);
 808fdd0:	6820      	ldr	r0, [r4, #0]
 808fdd2:	f000 ffd9 	bl	8090d88 <os_mutex_lock>
    cellular_credentials_set("wireless.twilio.com", "", "", NULL);  //setup to work twilio sim
    Cellular.on();                                                  //turn on celluar modem
    Cellular.connect();                                             //connect using twillio
    while(!Cellular.ready());                                       //wait until connected
#endif
    RGB.control(true);
 808fdd6:	2001      	movs	r0, #1
 808fdd8:	f001 ffdb 	bl	8091d92 <_ZN8RGBClass7controlEb>

    //unlock mutex
	os_mutex_unlock(mqtt_recv_mutex);
 808fddc:	9b01      	ldr	r3, [sp, #4]
 808fdde:	6818      	ldr	r0, [r3, #0]
 808fde0:	f000 ffe2 	bl	8090da8 <os_mutex_unlock>
    os_mutex_unlock(mqtt_send_mutex);
 808fde4:	f8db 0000 	ldr.w	r0, [fp]
 808fde8:	f000 ffde 	bl	8090da8 <os_mutex_unlock>
    os_mutex_unlock(can_recv_mutex);
 808fdec:	f8da 0000 	ldr.w	r0, [sl]
 808fdf0:	f000 ffda 	bl	8090da8 <os_mutex_unlock>
    os_mutex_unlock(can_send_mutex);
 808fdf4:	f8d9 0000 	ldr.w	r0, [r9]
 808fdf8:	f000 ffd6 	bl	8090da8 <os_mutex_unlock>
    os_mutex_unlock(gps_recv_mutex);
 808fdfc:	f8d8 0000 	ldr.w	r0, [r8]
 808fe00:	f000 ffd2 	bl	8090da8 <os_mutex_unlock>
    os_mutex_unlock(dof_recv_mutex);
 808fe04:	6838      	ldr	r0, [r7, #0]
 808fe06:	f000 ffcf 	bl	8090da8 <os_mutex_unlock>
    os_mutex_unlock(mqtt_mutex);
 808fe0a:	6830      	ldr	r0, [r6, #0]
 808fe0c:	f000 ffcc 	bl	8090da8 <os_mutex_unlock>

    os_mutex_unlock(startup_internal_mutex);
 808fe10:	6828      	ldr	r0, [r5, #0]
 808fe12:	f000 ffc9 	bl	8090da8 <os_mutex_unlock>
    os_mutex_unlock(startup_can_mutex);
 808fe16:	6820      	ldr	r0, [r4, #0]
    //startup complete               
}
 808fe18:	b003      	add	sp, #12
 808fe1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    os_mutex_unlock(gps_recv_mutex);
    os_mutex_unlock(dof_recv_mutex);
    os_mutex_unlock(mqtt_mutex);

    os_mutex_unlock(startup_internal_mutex);
    os_mutex_unlock(startup_can_mutex);
 808fe1e:	f000 bfc3 	b.w	8090da8 <os_mutex_unlock>
 808fe22:	bf00      	nop
 808fe24:	2000297c 	.word	0x2000297c
 808fe28:	20002984 	.word	0x20002984
 808fe2c:	20002980 	.word	0x20002980
 808fe30:	20002e78 	.word	0x20002e78
 808fe34:	20002e70 	.word	0x20002e70
 808fe38:	20002988 	.word	0x20002988
 808fe3c:	20002e6c 	.word	0x20002e6c
 808fe40:	20002e7c 	.word	0x20002e7c
 808fe44:	20002e84 	.word	0x20002e84

0808fe48 <_GLOBAL__sub_I_lastThreadTime>:
* Example private method
*/
void CarT::doit()
{
    Serial.println("called doit");
}
 808fe48:	b570      	push	{r4, r5, r6, lr}
 808fe4a:	b086      	sub	sp, #24
 808fe4c:	f000 fedc 	bl	8090c08 <HAL_Pin_Map>
os_mutex_t dof_recv_mutex;

os_mutex_t startup_internal_mutex;
os_mutex_t startup_can_mutex;

CAN* stn = new CAN();
 808fe50:	2001      	movs	r0, #1
 808fe52:	f7f0 f922 	bl	808009a <_Znwj>
 808fe56:	4604      	mov	r4, r0
 808fe58:	b108      	cbz	r0, 808fe5e <_GLOBAL__sub_I_lastThreadTime+0x16>
 808fe5a:	f7ff fd85 	bl	808f968 <_ZN3CANC1Ev>
 808fe5e:	4b2c      	ldr	r3, [pc, #176]	; (808ff10 <_GLOBAL__sub_I_lastThreadTime+0xc8>)
DOF* dof = new DOF();
 808fe60:	20b8      	movs	r0, #184	; 0xb8
os_mutex_t dof_recv_mutex;

os_mutex_t startup_internal_mutex;
os_mutex_t startup_can_mutex;

CAN* stn = new CAN();
 808fe62:	601c      	str	r4, [r3, #0]
DOF* dof = new DOF();
 808fe64:	f7f0 f919 	bl	808009a <_Znwj>
 808fe68:	4604      	mov	r4, r0
 808fe6a:	b108      	cbz	r0, 808fe70 <_GLOBAL__sub_I_lastThreadTime+0x28>
 808fe6c:	f000 f9cb 	bl	8090206 <_ZN3DOFC1Ev>
 808fe70:	4b28      	ldr	r3, [pc, #160]	; (808ff14 <_GLOBAL__sub_I_lastThreadTime+0xcc>)
SD* sd_storage = new SD();
 808fe72:	f44f 6096 	mov.w	r0, #1200	; 0x4b0

os_mutex_t startup_internal_mutex;
os_mutex_t startup_can_mutex;

CAN* stn = new CAN();
DOF* dof = new DOF();
 808fe76:	601c      	str	r4, [r3, #0]
SD* sd_storage = new SD();
 808fe78:	f7f0 f90f 	bl	808009a <_Znwj>
 808fe7c:	4604      	mov	r4, r0
 808fe7e:	b108      	cbz	r0, 808fe84 <_GLOBAL__sub_I_lastThreadTime+0x3c>
 808fe80:	f000 f8b8 	bl	808fff4 <_ZN2SDC1Ev>
 808fe84:	4b24      	ldr	r3, [pc, #144]	; (808ff18 <_GLOBAL__sub_I_lastThreadTime+0xd0>)
Crypt* secretStuff = new Crypt();
 808fe86:	f44f 701d 	mov.w	r0, #628	; 0x274
os_mutex_t startup_internal_mutex;
os_mutex_t startup_can_mutex;

CAN* stn = new CAN();
DOF* dof = new DOF();
SD* sd_storage = new SD();
 808fe8a:	601c      	str	r4, [r3, #0]
Crypt* secretStuff = new Crypt();
 808fe8c:	f7f0 f905 	bl	808009a <_Znwj>
 808fe90:	4604      	mov	r4, r0
 808fe92:	b108      	cbz	r0, 808fe98 <_GLOBAL__sub_I_lastThreadTime+0x50>
 808fe94:	f7ff fc70 	bl	808f778 <_ZN5CryptC1Ev>
 808fe98:	4b20      	ldr	r3, [pc, #128]	; (808ff1c <_GLOBAL__sub_I_lastThreadTime+0xd4>)
AWS* awsiot = new AWS("a3mb0mz6legbs8.iot.us-east-2.amazonaws.com", 8883, callback);
 808fe9a:	f640 2098 	movw	r0, #2712	; 0xa98
os_mutex_t startup_can_mutex;

CAN* stn = new CAN();
DOF* dof = new DOF();
SD* sd_storage = new SD();
Crypt* secretStuff = new Crypt();
 808fe9e:	601c      	str	r4, [r3, #0]
AWS* awsiot = new AWS("a3mb0mz6legbs8.iot.us-east-2.amazonaws.com", 8883, callback);
 808fea0:	f7f0 f8fb 	bl	808009a <_Znwj>
 808fea4:	4604      	mov	r4, r0
 808fea6:	b128      	cbz	r0, 808feb4 <_GLOBAL__sub_I_lastThreadTime+0x6c>
 808fea8:	4b1d      	ldr	r3, [pc, #116]	; (808ff20 <_GLOBAL__sub_I_lastThreadTime+0xd8>)
 808feaa:	f242 22b3 	movw	r2, #8883	; 0x22b3
 808feae:	491d      	ldr	r1, [pc, #116]	; (808ff24 <_GLOBAL__sub_I_lastThreadTime+0xdc>)
 808feb0:	f000 f99a 	bl	80901e8 <_ZN3AWSC1EPctPFvS0_PhjE>
 808feb4:	4b1c      	ldr	r3, [pc, #112]	; (808ff28 <_GLOBAL__sub_I_lastThreadTime+0xe0>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808feb6:	4e1d      	ldr	r6, [pc, #116]	; (808ff2c <_GLOBAL__sub_I_lastThreadTime+0xe4>)
 808feb8:	601c      	str	r4, [r3, #0]
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 808feba:	4b1d      	ldr	r3, [pc, #116]	; (808ff30 <_GLOBAL__sub_I_lastThreadTime+0xe8>)

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
 808febc:	4d1d      	ldr	r5, [pc, #116]	; (808ff34 <_GLOBAL__sub_I_lastThreadTime+0xec>)
//setup threads
#if MQTT_STATUS
Thread server_thread("server_thread", server_thread_function, OS_THREAD_PRIORITY_DEFAULT,6*1024);
#endif
#if CAN_STATUS
Thread CAN_thread("CAN_thread", CAN_thread_function, OS_THREAD_PRIORITY_DEFAULT,3*1024);
 808febe:	f44f 6440 	mov.w	r4, #3072	; 0xc00
 808fec2:	aa02      	add	r2, sp, #8
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 808fec4:	9302      	str	r3, [sp, #8]
 808fec6:	491c      	ldr	r1, [pc, #112]	; (808ff38 <_GLOBAL__sub_I_lastThreadTime+0xf0>)
 808fec8:	2302      	movs	r3, #2
 808feca:	9400      	str	r4, [sp, #0]
 808fecc:	481b      	ldr	r0, [pc, #108]	; (808ff3c <_GLOBAL__sub_I_lastThreadTime+0xf4>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808fece:	9605      	str	r6, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 808fed0:	9504      	str	r5, [sp, #16]
 808fed2:	f7ff ff07 	bl	808fce4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808fed6:	a802      	add	r0, sp, #8
 808fed8:	f7ff fedf 	bl	808fc9a <_ZNSt14_Function_baseD1Ev>
 808fedc:	4a18      	ldr	r2, [pc, #96]	; (808ff40 <_GLOBAL__sub_I_lastThreadTime+0xf8>)
 808fede:	4919      	ldr	r1, [pc, #100]	; (808ff44 <_GLOBAL__sub_I_lastThreadTime+0xfc>)
 808fee0:	4816      	ldr	r0, [pc, #88]	; (808ff3c <_GLOBAL__sub_I_lastThreadTime+0xf4>)
 808fee2:	f002 fac9 	bl	8092478 <__aeabi_atexit>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 808fee6:	4b18      	ldr	r3, [pc, #96]	; (808ff48 <_GLOBAL__sub_I_lastThreadTime+0x100>)
#endif
#if DOF_STATUS || GPS_STATUS
Thread internal_thread("Internal_thread", internal_thread_function, OS_THREAD_PRIORITY_DEFAULT,3*1024);
 808fee8:	aa02      	add	r2, sp, #8
 808feea:	9302      	str	r3, [sp, #8]
 808feec:	4917      	ldr	r1, [pc, #92]	; (808ff4c <_GLOBAL__sub_I_lastThreadTime+0x104>)
 808feee:	2302      	movs	r3, #2
 808fef0:	9400      	str	r4, [sp, #0]
 808fef2:	4817      	ldr	r0, [pc, #92]	; (808ff50 <_GLOBAL__sub_I_lastThreadTime+0x108>)
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808fef4:	9605      	str	r6, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 808fef6:	9504      	str	r5, [sp, #16]
 808fef8:	f7ff fef4 	bl	808fce4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808fefc:	a802      	add	r0, sp, #8
 808fefe:	f7ff fecc 	bl	808fc9a <_ZNSt14_Function_baseD1Ev>
 808ff02:	4a0f      	ldr	r2, [pc, #60]	; (808ff40 <_GLOBAL__sub_I_lastThreadTime+0xf8>)
 808ff04:	490f      	ldr	r1, [pc, #60]	; (808ff44 <_GLOBAL__sub_I_lastThreadTime+0xfc>)
 808ff06:	4812      	ldr	r0, [pc, #72]	; (808ff50 <_GLOBAL__sub_I_lastThreadTime+0x108>)
 808ff08:	f002 fab6 	bl	8092478 <__aeabi_atexit>
* Example private method
*/
void CarT::doit()
{
    Serial.println("called doit");
}
 808ff0c:	b006      	add	sp, #24
 808ff0e:	bd70      	pop	{r4, r5, r6, pc}
 808ff10:	20002e74 	.word	0x20002e74
 808ff14:	20002964 	.word	0x20002964
 808ff18:	20002a90 	.word	0x20002a90
 808ff1c:	20002a88 	.word	0x20002a88
 808ff20:	0808fa35 	.word	0x0808fa35
 808ff24:	0809876e 	.word	0x0809876e
 808ff28:	20002e80 	.word	0x20002e80
 808ff2c:	0808fa19 	.word	0x0808fa19
 808ff30:	0808fabd 	.word	0x0808fabd
 808ff34:	0808fa1d 	.word	0x0808fa1d
 808ff38:	08098799 	.word	0x08098799
 808ff3c:	20002968 	.word	0x20002968
 808ff40:	20000538 	.word	0x20000538
 808ff44:	0808fcad 	.word	0x0808fcad
 808ff48:	0808fb35 	.word	0x0808fb35
 808ff4c:	080987a4 	.word	0x080987a4
 808ff50:	20002a94 	.word	0x20002a94

0808ff54 <_GLOBAL__sub_I__ZN4TgpsC2Ev>:
 808ff54:	f000 be58 	b.w	8090c08 <HAL_Pin_Map>

0808ff58 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
 808ff58:	7c03      	ldrb	r3, [r0, #16]
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
 808ff5a:	4602      	mov	r2, r0
 808ff5c:	f003 0308 	and.w	r3, r3, #8
 808ff60:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 808ff64:	b12b      	cbz	r3, 808ff72 <_ZN4File9availableEv+0x1a>
 808ff66:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 808ff68:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
 808ff6a:	1a18      	subs	r0, r3, r0
 808ff6c:	bf48      	it	mi
 808ff6e:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
 808ff72:	4770      	bx	lr

0808ff74 <_ZN4FileD1Ev>:
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
#if ARDUINO_FILE_USES_STREAM
class File : public FatFile, public Stream {
 808ff74:	4770      	bx	lr

0808ff76 <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
 808ff76:	3010      	adds	r0, #16
 808ff78:	f7f1 bbee 	b.w	8081758 <_ZN7FatFile4syncEv>

0808ff7c <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
 808ff7c:	3010      	adds	r0, #16
 808ff7e:	f7f1 bb8e 	b.w	808169e <_ZN7FatFile4peekEv>

0808ff82 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 808ff82:	3010      	adds	r0, #16
 808ff84:	f7f1 bc1e 	b.w	80817c4 <_ZN7FatFile5writeEPKvj>

0808ff88 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
 808ff88:	b507      	push	{r0, r1, r2, lr}
 808ff8a:	ab02      	add	r3, sp, #8
 808ff8c:	f803 1d01 	strb.w	r1, [r3, #-1]!
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 808ff90:	2201      	movs	r2, #1
 808ff92:	4619      	mov	r1, r3
 808ff94:	3010      	adds	r0, #16
 808ff96:	f7f1 fc15 	bl	80817c4 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
 808ff9a:	b003      	add	sp, #12
 808ff9c:	f85d fb04 	ldr.w	pc, [sp], #4

0808ffa0 <_ZN4FileD0Ev>:
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
#if ARDUINO_FILE_USES_STREAM
class File : public FatFile, public Stream {
 808ffa0:	b510      	push	{r4, lr}
 808ffa2:	4604      	mov	r4, r0
 808ffa4:	f7f0 f87d 	bl	80800a2 <_ZdlPv>
 808ffa8:	4620      	mov	r0, r4
 808ffaa:	bd10      	pop	{r4, pc}

0808ffac <_ZN9SdFatBase11writeBlocksEmPKhj>:
  }
  bool readBlocks(uint32_t block, uint8_t* dst, size_t n) {
    return m_sdCard.readBlocks(block, dst, n);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t n) {
    return m_sdCard.writeBlocks(block, src, n);
 808ffac:	f200 4064 	addw	r0, r0, #1124	; 0x464
 808ffb0:	f7f1 b9e2 	b.w	8081378 <_ZN9SdSpiCard11writeBlocksEmPKhj>

0808ffb4 <_ZN9SdFatBase10readBlocksEmPhj>:
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_sdCard.writeBlock(block, src);
  }
  bool readBlocks(uint32_t block, uint8_t* dst, size_t n) {
    return m_sdCard.readBlocks(block, dst, n);
 808ffb4:	f200 4064 	addw	r0, r0, #1124	; 0x464
 808ffb8:	f7f1 b916 	b.w	80811e8 <_ZN9SdSpiCard10readBlocksEmPhj>

0808ffbc <_ZN9SdFatBase10writeBlockEmPKh>:

  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_sdCard.readBlock(block, dst);
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_sdCard.writeBlock(block, src);
 808ffbc:	f200 4064 	addw	r0, r0, #1124	; 0x464
 808ffc0:	f7f1 b955 	b.w	808126e <_ZN9SdSpiCard10writeBlockEmPKh>

0808ffc4 <_ZN9SdFatBase9readBlockEmPh>:
#endif  // defined(ARDUINO) || defined(DOXYGEN)

 private:

  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_sdCard.readBlock(block, dst);
 808ffc4:	f200 4064 	addw	r0, r0, #1124	; 0x464
 808ffc8:	f7f1 b8c6 	b.w	8081158 <_ZN9SdSpiCard9readBlockEmPh>

0808ffcc <_ZN7FatFile4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
 808ffcc:	b507      	push	{r0, r1, r2, lr}
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 808ffce:	2201      	movs	r2, #1
 808ffd0:	f10d 0107 	add.w	r1, sp, #7
 808ffd4:	f7f1 faaf 	bl	8081536 <_ZN7FatFile4readEPvj>
 808ffd8:	2801      	cmp	r0, #1
 808ffda:	bf0c      	ite	eq
 808ffdc:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 808ffe0:	f04f 30ff 	movne.w	r0, #4294967295
  }
 808ffe4:	b003      	add	sp, #12
 808ffe6:	f85d fb04 	ldr.w	pc, [sp], #4

0808ffea <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
 808ffea:	b508      	push	{r3, lr}
    return FatFile::read();
 808ffec:	3010      	adds	r0, #16
 808ffee:	f7ff ffed 	bl	808ffcc <_ZN7FatFile4readEv>
  }
 808fff2:	bd08      	pop	{r3, pc}

0808fff4 <_ZN2SDC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 808fff4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 808fff8:	6081      	str	r1, [r0, #8]
class File : public FatFile, public Stream {
#else  // ARDUINO_FILE_USES_STREAM
class File : public FatFile, public Print {
#endif  // ARDUINO_FILE_USES_STREAM
 public:
  File() {}
 808fffa:	490d      	ldr	r1, [pc, #52]	; (8090030 <_ZN2SDC1Ev+0x3c>)
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 808fffc:	2200      	movs	r2, #0
 808fffe:	6001      	str	r1, [r0, #0]
#else  // SD_SPI_CONFIGURATION < 3
  typedef SdSpiBase m_spi_t;
#endif  // SD_SPI_CONFIGURATION < 3
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_selected(false),
                m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
 8090000:	2119      	movs	r1, #25
 8090002:	f880 149e 	strb.w	r1, [r0, #1182]	; 0x49e
 * \brief Main file system class for %SdFat library.
 */
class SdFat : public SdFatBase {
 public:
#if IMPLEMENT_SPI_INTERFACE_SELECTION
  SdFat() {
 8090006:	490b      	ldr	r1, [pc, #44]	; (8090034 <_ZN2SDC1Ev+0x40>)
 8090008:	7402      	strb	r2, [r0, #16]
 809000a:	6341      	str	r1, [r0, #52]	; 0x34
/**
 * \class SdSpi
 * \brief SPI class for access to SD and SDHC flash memory cards.
 */
#if SD_SPI_CONFIGURATION >= 3
class SdSpi : public SdSpiBase {
 809000c:	490a      	ldr	r1, [pc, #40]	; (8090038 <_ZN2SDC1Ev+0x44>)
 809000e:	7442      	strb	r2, [r0, #17]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8090010:	6042      	str	r2, [r0, #4]
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
 8090012:	f880 203b 	strb.w	r2, [r0, #59]	; 0x3b
 8090016:	f880 2474 	strb.w	r2, [r0, #1140]	; 0x474
 809001a:	f880 2475 	strb.w	r2, [r0, #1141]	; 0x475
 809001e:	f880 249c 	strb.w	r2, [r0, #1180]	; 0x49c
 8090022:	f880 24a1 	strb.w	r2, [r0, #1185]	; 0x4a1
 8090026:	f8c0 14a4 	str.w	r1, [r0, #1188]	; 0x4a4
   */
  void send(const uint8_t* buf, size_t n);
  /** \return true - uses SPI transactions */
#if IMPLEMENT_SPI_INTERFACE_SELECTION
  void setSpiIf(uint8_t spiIf) {
    m_spiIf = spiIf;
 809002a:	f880 24a8 	strb.w	r2, [r0, #1192]	; 0x4a8
#include "SD.h"

SD::SD()
{
    //initialize variables
}
 809002e:	4770      	bx	lr
 8090030:	080987bc 	.word	0x080987bc
 8090034:	080987e4 	.word	0x080987e4
 8090038:	080964d8 	.word	0x080964d8

0809003c <_GLOBAL__sub_I__ZN2SDC2Ev>:
 809003c:	f000 bde4 	b.w	8090c08 <HAL_Pin_Map>

08090040 <_ZN3AWS8setupConEPctPFvS0_PhjE>:
bool AWS::connect(const char * ID){
    clientID = ID;   
    return(awsMqtt.connect(clientID));  
}

bool AWS::setupCon(char* domain, uint16_t port, void (*callbackRef)(char*,uint8_t*,unsigned int)) {
 8090040:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    bool ret=0;
    static MQTT temp(domain,port,callbackRef);
 8090044:	4d5a      	ldr	r5, [pc, #360]	; (80901b0 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x170>)
bool AWS::connect(const char * ID){
    clientID = ID;   
    return(awsMqtt.connect(clientID));  
}

bool AWS::setupCon(char* domain, uint16_t port, void (*callbackRef)(char*,uint8_t*,unsigned int)) {
 8090046:	4698      	mov	r8, r3
    bool ret=0;
    static MQTT temp(domain,port,callbackRef);
 8090048:	682b      	ldr	r3, [r5, #0]
bool AWS::connect(const char * ID){
    clientID = ID;   
    return(awsMqtt.connect(clientID));  
}

bool AWS::setupCon(char* domain, uint16_t port, void (*callbackRef)(char*,uint8_t*,unsigned int)) {
 809004a:	4604      	mov	r4, r0
    bool ret=0;
    static MQTT temp(domain,port,callbackRef);
 809004c:	07db      	lsls	r3, r3, #31
bool AWS::connect(const char * ID){
    clientID = ID;   
    return(awsMqtt.connect(clientID));  
}

bool AWS::setupCon(char* domain, uint16_t port, void (*callbackRef)(char*,uint8_t*,unsigned int)) {
 809004e:	460e      	mov	r6, r1
 8090050:	4617      	mov	r7, r2
    bool ret=0;
    static MQTT temp(domain,port,callbackRef);
 8090052:	d411      	bmi.n	8090078 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x38>
 8090054:	4628      	mov	r0, r5
 8090056:	f7f0 f828 	bl	80800aa <__cxa_guard_acquire>
 809005a:	b168      	cbz	r0, 8090078 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x38>
 809005c:	463a      	mov	r2, r7
 809005e:	4631      	mov	r1, r6
 8090060:	4643      	mov	r3, r8
 8090062:	4854      	ldr	r0, [pc, #336]	; (80901b4 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x174>)
 8090064:	f7f1 fe34 	bl	8081cd0 <_ZN4MQTTC1EPctPFvS0_PhjE>
 8090068:	4628      	mov	r0, r5
 809006a:	f7f0 f823 	bl	80800b4 <__cxa_guard_release>
 809006e:	4a52      	ldr	r2, [pc, #328]	; (80901b8 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x178>)
 8090070:	4952      	ldr	r1, [pc, #328]	; (80901bc <_ZN3AWS8setupConEPctPFvS0_PhjE+0x17c>)
 8090072:	4850      	ldr	r0, [pc, #320]	; (80901b4 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x174>)
 8090074:	f002 fa00 	bl	8092478 <__aeabi_atexit>
 8090078:	4d4e      	ldr	r5, [pc, #312]	; (80901b4 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x174>)
 809007a:	686b      	ldr	r3, [r5, #4]
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
 809007c:	6063      	str	r3, [r4, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
 809007e:	68ab      	ldr	r3, [r5, #8]
 8090080:	60a3      	str	r3, [r4, #8]
 8090082:	68eb      	ldr	r3, [r5, #12]
 8090084:	60e3      	str	r3, [r4, #12]
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 8090086:	692b      	ldr	r3, [r5, #16]
 8090088:	6123      	str	r3, [r4, #16]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
 809008a:	696b      	ldr	r3, [r5, #20]
 809008c:	6163      	str	r3, [r4, #20]
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 809008e:	69af      	ldr	r7, [r5, #24]
	if (__tmp != _M_pi)
 8090090:	69a3      	ldr	r3, [r4, #24]
 8090092:	429f      	cmp	r7, r3
 8090094:	d016      	beq.n	80900c4 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x84>
	  {
	    if (__tmp != 0)
 8090096:	b117      	cbz	r7, 809009e <_ZN3AWS8setupConEPctPFvS0_PhjE+0x5e>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8090098:	687b      	ldr	r3, [r7, #4]
 809009a:	3301      	adds	r3, #1
 809009c:	607b      	str	r3, [r7, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
 809009e:	69a6      	ldr	r6, [r4, #24]
 80900a0:	b17e      	cbz	r6, 80900c2 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x82>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80900a2:	6873      	ldr	r3, [r6, #4]
 80900a4:	3b01      	subs	r3, #1
 80900a6:	6073      	str	r3, [r6, #4]
 80900a8:	b95b      	cbnz	r3, 80900c2 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x82>
        {
          _M_dispose();
 80900aa:	6833      	ldr	r3, [r6, #0]
 80900ac:	4630      	mov	r0, r6
 80900ae:	689b      	ldr	r3, [r3, #8]
 80900b0:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80900b2:	68b3      	ldr	r3, [r6, #8]
 80900b4:	3b01      	subs	r3, #1
 80900b6:	60b3      	str	r3, [r6, #8]
 80900b8:	b91b      	cbnz	r3, 80900c2 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x82>
            _M_destroy();
 80900ba:	6833      	ldr	r3, [r6, #0]
 80900bc:	4630      	mov	r0, r6
 80900be:	68db      	ldr	r3, [r3, #12]
 80900c0:	4798      	blx	r3
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
 80900c2:	61a7      	str	r7, [r4, #24]
#define MQTTPINGREQ     12 << 4 // PING Request
#define MQTTPINGRESP    13 << 4 // PING Response
#define MQTTDISCONNECT  14 << 4 // Client is Disconnecting
#define MQTTReserved    15 << 4 // Reserved

class MQTT {
 80900c4:	69eb      	ldr	r3, [r5, #28]
 80900c6:	493e      	ldr	r1, [pc, #248]	; (80901c0 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x180>)
 80900c8:	61e3      	str	r3, [r4, #28]
 80900ca:	8c2b      	ldrh	r3, [r5, #32]
 80900cc:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80900d0:	8423      	strh	r3, [r4, #32]
 80900d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80900d4:	4e3b      	ldr	r6, [pc, #236]	; (80901c4 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x184>)
 80900d6:	6263      	str	r3, [r4, #36]	; 0x24
 80900d8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80900da:	f504 67cb 	add.w	r7, r4, #1624	; 0x658
 80900de:	62a3      	str	r3, [r4, #40]	; 0x28
 80900e0:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80900e4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80900e8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80900ea:	6323      	str	r3, [r4, #48]	; 0x30
 80900ec:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80900ee:	6363      	str	r3, [r4, #52]	; 0x34
 80900f0:	f001 fbe0 	bl	80918b4 <_ZN6StringaSERKS_>
 80900f4:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80900f6:	f44f 721e 	mov.w	r2, #632	; 0x278
 80900fa:	64a3      	str	r3, [r4, #72]	; 0x48
 80900fc:	f8b5 304c 	ldrh.w	r3, [r5, #76]	; 0x4c
 8090100:	4931      	ldr	r1, [pc, #196]	; (80901c8 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x188>)
 8090102:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 8090106:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8090108:	f104 0058 	add.w	r0, r4, #88	; 0x58
 809010c:	6523      	str	r3, [r4, #80]	; 0x50
 809010e:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
 8090112:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8090116:	f003 ff24 	bl	8093f62 <memcpy>
 809011a:	22b4      	movs	r2, #180	; 0xb4
 809011c:	492b      	ldr	r1, [pc, #172]	; (80901cc <_ZN3AWS8setupConEPctPFvS0_PhjE+0x18c>)
 809011e:	f504 7034 	add.w	r0, r4, #720	; 0x2d0
 8090122:	f003 ff1e 	bl	8093f62 <memcpy>
 8090126:	2264      	movs	r2, #100	; 0x64
 8090128:	4929      	ldr	r1, [pc, #164]	; (80901d0 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x190>)
 809012a:	f504 7061 	add.w	r0, r4, #900	; 0x384
 809012e:	f003 ff18 	bl	8093f62 <memcpy>
 8090132:	f44f 729a 	mov.w	r2, #308	; 0x134
 8090136:	4927      	ldr	r1, [pc, #156]	; (80901d4 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x194>)
 8090138:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
 809013c:	f003 ff11 	bl	8093f62 <memcpy>
 8090140:	f44f 729a 	mov.w	r2, #308	; 0x134
 8090144:	4924      	ldr	r1, [pc, #144]	; (80901d8 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x198>)
 8090146:	f204 501c 	addw	r0, r4, #1308	; 0x51c
 809014a:	f003 ff0a 	bl	8093f62 <memcpy>
 809014e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8090152:	f504 63ca 	add.w	r3, r4, #1616	; 0x650
 8090156:	e883 0003 	stmia.w	r3, {r0, r1}
 809015a:	3608      	adds	r6, #8
 809015c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 809015e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8090160:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8090162:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8090164:	e896 0003 	ldmia.w	r6, {r0, r1}
 8090168:	e887 0003 	stmia.w	r7, {r0, r1}
 809016c:	f895 3680 	ldrb.w	r3, [r5, #1664]	; 0x680
    awsMqtt = temp;
    ret = awsMqtt.enableTls(amazonIoTRootCaPem, sizeof(amazonIoTRootCaPem),
 8090170:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8090174:	f884 3680 	strb.w	r3, [r4, #1664]	; 0x680
 8090178:	f895 3681 	ldrb.w	r3, [r5, #1665]	; 0x681
 809017c:	4917      	ldr	r1, [pc, #92]	; (80901dc <_ZN3AWS8setupConEPctPFvS0_PhjE+0x19c>)
 809017e:	f884 3681 	strb.w	r3, [r4, #1665]	; 0x681
 8090182:	f895 3682 	ldrb.w	r3, [r5, #1666]	; 0x682
 8090186:	4620      	mov	r0, r4
 8090188:	f884 3682 	strb.w	r3, [r4, #1666]	; 0x682
 809018c:	f240 63a6 	movw	r3, #1702	; 0x6a6
 8090190:	9302      	str	r3, [sp, #8]
 8090192:	4b13      	ldr	r3, [pc, #76]	; (80901e0 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x1a0>)
 8090194:	9301      	str	r3, [sp, #4]
 8090196:	f44f 639b 	mov.w	r3, #1240	; 0x4d8
 809019a:	9300      	str	r3, [sp, #0]
 809019c:	4b11      	ldr	r3, [pc, #68]	; (80901e4 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x1a4>)
 809019e:	f7f1 fe1b 	bl	8081dd8 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j>
                     clientKeyCrtPem, sizeof(clientKeyCrtPem),
                     clientKeyPem, sizeof(clientKeyPem));            
    return(ret);  
}
 80901a2:	3000      	adds	r0, #0
 80901a4:	bf18      	it	ne
 80901a6:	2001      	movne	r0, #1
 80901a8:	b004      	add	sp, #16
 80901aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80901ae:	bf00      	nop
 80901b0:	200032c4 	.word	0x200032c4
 80901b4:	200032c8 	.word	0x200032c8
 80901b8:	20000538 	.word	0x20000538
 80901bc:	08081db1 	.word	0x08081db1
 80901c0:	20003300 	.word	0x20003300
 80901c4:	20003918 	.word	0x20003918
 80901c8:	20003320 	.word	0x20003320
 80901cc:	20003598 	.word	0x20003598
 80901d0:	2000364c 	.word	0x2000364c
 80901d4:	200036b0 	.word	0x200036b0
 80901d8:	200037e4 	.word	0x200037e4
 80901dc:	08098ccc 	.word	0x08098ccc
 80901e0:	080993ac 	.word	0x080993ac
 80901e4:	080987f4 	.word	0x080987f4

080901e8 <_ZN3AWSC1EPctPFvS0_PhjE>:

AWS::AWS() {
    //add initializations for default case
}

AWS::AWS(char* domain, uint16_t port, void (*callbackRef)(char*,uint8_t*,unsigned int)){
 80901e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80901ea:	4604      	mov	r4, r0
 80901ec:	460d      	mov	r5, r1
 80901ee:	4616      	mov	r6, r2
 80901f0:	461f      	mov	r7, r3
 80901f2:	f7f1 fd35 	bl	8081c60 <_ZN4MQTTC1Ev>
    setupCon(domain,port,callbackRef);
 80901f6:	463b      	mov	r3, r7
 80901f8:	4632      	mov	r2, r6
 80901fa:	4629      	mov	r1, r5
 80901fc:	4620      	mov	r0, r4
 80901fe:	f7ff ff1f 	bl	8090040 <_ZN3AWS8setupConEPctPFvS0_PhjE>
}
 8090202:	4620      	mov	r0, r4
 8090204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08090206 <_ZN3DOFC1Ev>:
// http://www.ngdc.noaa.gov/geomag-web/#declination
#define DECLINATION -7.140 // Declination (degrees) in Columbus, OH.
//In future 


DOF::DOF()
 8090206:	b510      	push	{r4, lr}
 8090208:	4604      	mov	r4, r0
 809020a:	3034      	adds	r0, #52	; 0x34
 809020c:	f7f0 fb5e 	bl	80808cc <_ZN7LSM9DS1C1Ev>
{
  //initialize variables
} 
 8090210:	4620      	mov	r0, r4
 8090212:	bd10      	pop	{r4, pc}

08090214 <_ZN3DOF5beginEv>:


void DOF::begin() 
{
  imu.settings.device.commInterface = IMU_MODE_I2C;
 8090214:	2301      	movs	r3, #1
 8090216:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  imu.settings.device.mAddress = LSM9DS1_M;
 809021a:	231e      	movs	r3, #30
 809021c:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
  imu.settings.device.agAddress = LSM9DS1_AG;
 8090220:	236b      	movs	r3, #107	; 0x6b
 8090222:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  imu.begin();
 8090226:	3034      	adds	r0, #52	; 0x34
 8090228:	f7f0 bd99 	b.w	8080d5e <_ZN7LSM9DS15beginEv>

0809022c <_ZN3DOF6getAllEv>:
  pitch *= 180.0 / M_PI;
  roll  *= 180.0 / M_PI;
}

String DOF::getAll()
{ 
 809022c:	b5f0      	push	{r4, r5, r6, r7, lr}
	imu.readAccel();
 809022e:	f101 0534 	add.w	r5, r1, #52	; 0x34
  pitch *= 180.0 / M_PI;
  roll  *= 180.0 / M_PI;
}

String DOF::getAll()
{ 
 8090232:	b0b1      	sub	sp, #196	; 0xc4
 8090234:	4606      	mov	r6, r0
	imu.readAccel();
 8090236:	4628      	mov	r0, r5
  pitch *= 180.0 / M_PI;
  roll  *= 180.0 / M_PI;
}

String DOF::getAll()
{ 
 8090238:	460c      	mov	r4, r1
	imu.readAccel();
 809023a:	f7f0 fe28 	bl	8080e8e <_ZN7LSM9DS19readAccelEv>
	imu.readMag(); 
 809023e:	4628      	mov	r0, r5
 8090240:	f7f0 feaf 	bl	8080fa2 <_ZN7LSM9DS17readMagEv>
	imu.readTemp();
 8090244:	4628      	mov	r0, r5
 8090246:	f7f0 fe53 	bl	8080ef0 <_ZN7LSM9DS18readTempEv>
	imu.readGyro();
 809024a:	4628      	mov	r0, r5
 809024c:	f7f0 fe61 	bl	8080f12 <_ZN7LSM9DS18readGyroEv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 8090250:	4973      	ldr	r1, [pc, #460]	; (8090420 <_ZN3DOF6getAllEv+0x1f4>)
 8090252:	a804      	add	r0, sp, #16
 8090254:	f001 fb1b 	bl	809188e <_ZN6StringC1EPK19__FlashStringHelper>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
 8090258:	f001 fd81 	bl	8091d5e <_ZN9TimeClass3nowEv>

	
	String returnstring= "{\t\"dofData\":{"
               "\"time\":" +  String(Time.timeStr()) + ", " +
 809025c:	4d71      	ldr	r5, [pc, #452]	; (8090424 <_ZN3DOF6getAllEv+0x1f8>)
 809025e:	4601      	mov	r1, r0
 8090260:	4668      	mov	r0, sp
 8090262:	f001 fd39 	bl	8091cd8 <_ZN9TimeClass7timeStrEl>
 8090266:	4669      	mov	r1, sp
 8090268:	a804      	add	r0, sp, #16
 809026a:	f001 fb78 	bl	809195e <_ZplRK15StringSumHelperRK6String>
 809026e:	4629      	mov	r1, r5
 8090270:	f001 fb81 	bl	8091976 <_ZplRK15StringSumHelperPKc>
               "\"ax\":" +  String(imu.ax) + ", " +
 8090274:	496c      	ldr	r1, [pc, #432]	; (8090428 <_ZN3DOF6getAllEv+0x1fc>)
 8090276:	f001 fb7e 	bl	8091976 <_ZplRK15StringSumHelperPKc>
 809027a:	4607      	mov	r7, r0
 809027c:	220a      	movs	r2, #10
 809027e:	f9b4 1062 	ldrsh.w	r1, [r4, #98]	; 0x62
 8090282:	a808      	add	r0, sp, #32
 8090284:	f001 fb41 	bl	809190a <_ZN6StringC1Eih>
 8090288:	a908      	add	r1, sp, #32
 809028a:	4638      	mov	r0, r7
 809028c:	f001 fb67 	bl	809195e <_ZplRK15StringSumHelperRK6String>
 8090290:	4629      	mov	r1, r5
 8090292:	f001 fb70 	bl	8091976 <_ZplRK15StringSumHelperPKc>
               "\"ay\":" +  String(imu.ay) + ", " +
 8090296:	4965      	ldr	r1, [pc, #404]	; (809042c <_ZN3DOF6getAllEv+0x200>)
 8090298:	f001 fb6d 	bl	8091976 <_ZplRK15StringSumHelperPKc>
 809029c:	4607      	mov	r7, r0
 809029e:	220a      	movs	r2, #10
 80902a0:	f9b4 1064 	ldrsh.w	r1, [r4, #100]	; 0x64
 80902a4:	a80c      	add	r0, sp, #48	; 0x30
 80902a6:	f001 fb30 	bl	809190a <_ZN6StringC1Eih>
 80902aa:	a90c      	add	r1, sp, #48	; 0x30
 80902ac:	4638      	mov	r0, r7
 80902ae:	f001 fb56 	bl	809195e <_ZplRK15StringSumHelperRK6String>
 80902b2:	4629      	mov	r1, r5
 80902b4:	f001 fb5f 	bl	8091976 <_ZplRK15StringSumHelperPKc>
               "\"az\":" + String(imu.az) + ", " +
 80902b8:	495d      	ldr	r1, [pc, #372]	; (8090430 <_ZN3DOF6getAllEv+0x204>)
 80902ba:	f001 fb5c 	bl	8091976 <_ZplRK15StringSumHelperPKc>
 80902be:	4607      	mov	r7, r0
 80902c0:	220a      	movs	r2, #10
 80902c2:	f9b4 1066 	ldrsh.w	r1, [r4, #102]	; 0x66
 80902c6:	a810      	add	r0, sp, #64	; 0x40
 80902c8:	f001 fb1f 	bl	809190a <_ZN6StringC1Eih>
 80902cc:	a910      	add	r1, sp, #64	; 0x40
 80902ce:	4638      	mov	r0, r7
 80902d0:	f001 fb45 	bl	809195e <_ZplRK15StringSumHelperRK6String>
 80902d4:	4629      	mov	r1, r5
 80902d6:	f001 fb4e 	bl	8091976 <_ZplRK15StringSumHelperPKc>
               "\"mx\":" + String(imu.mx) + ", " +
 80902da:	4956      	ldr	r1, [pc, #344]	; (8090434 <_ZN3DOF6getAllEv+0x208>)
 80902dc:	f001 fb4b 	bl	8091976 <_ZplRK15StringSumHelperPKc>
 80902e0:	4607      	mov	r7, r0
 80902e2:	220a      	movs	r2, #10
 80902e4:	f9b4 1068 	ldrsh.w	r1, [r4, #104]	; 0x68
 80902e8:	a814      	add	r0, sp, #80	; 0x50
 80902ea:	f001 fb0e 	bl	809190a <_ZN6StringC1Eih>
 80902ee:	a914      	add	r1, sp, #80	; 0x50
 80902f0:	4638      	mov	r0, r7
 80902f2:	f001 fb34 	bl	809195e <_ZplRK15StringSumHelperRK6String>
 80902f6:	4629      	mov	r1, r5
 80902f8:	f001 fb3d 	bl	8091976 <_ZplRK15StringSumHelperPKc>
               "\"my\":" + String(imu.my) + ", " +
 80902fc:	494e      	ldr	r1, [pc, #312]	; (8090438 <_ZN3DOF6getAllEv+0x20c>)
 80902fe:	f001 fb3a 	bl	8091976 <_ZplRK15StringSumHelperPKc>
 8090302:	4607      	mov	r7, r0
 8090304:	220a      	movs	r2, #10
 8090306:	f9b4 106a 	ldrsh.w	r1, [r4, #106]	; 0x6a
 809030a:	a818      	add	r0, sp, #96	; 0x60
 809030c:	f001 fafd 	bl	809190a <_ZN6StringC1Eih>
 8090310:	a918      	add	r1, sp, #96	; 0x60
 8090312:	4638      	mov	r0, r7
 8090314:	f001 fb23 	bl	809195e <_ZplRK15StringSumHelperRK6String>
 8090318:	4629      	mov	r1, r5
 809031a:	f001 fb2c 	bl	8091976 <_ZplRK15StringSumHelperPKc>
               "\"mz\":" + String(imu.mz) + ", " +
 809031e:	4947      	ldr	r1, [pc, #284]	; (809043c <_ZN3DOF6getAllEv+0x210>)
 8090320:	f001 fb29 	bl	8091976 <_ZplRK15StringSumHelperPKc>
 8090324:	4607      	mov	r7, r0
 8090326:	220a      	movs	r2, #10
 8090328:	f9b4 106c 	ldrsh.w	r1, [r4, #108]	; 0x6c
 809032c:	a81c      	add	r0, sp, #112	; 0x70
 809032e:	f001 faec 	bl	809190a <_ZN6StringC1Eih>
 8090332:	a91c      	add	r1, sp, #112	; 0x70
 8090334:	4638      	mov	r0, r7
 8090336:	f001 fb12 	bl	809195e <_ZplRK15StringSumHelperRK6String>
 809033a:	4629      	mov	r1, r5
 809033c:	f001 fb1b 	bl	8091976 <_ZplRK15StringSumHelperPKc>
               "\"gx\":" +  String(imu.gx) + ", " +
 8090340:	493f      	ldr	r1, [pc, #252]	; (8090440 <_ZN3DOF6getAllEv+0x214>)
 8090342:	f001 fb18 	bl	8091976 <_ZplRK15StringSumHelperPKc>
 8090346:	4607      	mov	r7, r0
 8090348:	220a      	movs	r2, #10
 809034a:	f9b4 105c 	ldrsh.w	r1, [r4, #92]	; 0x5c
 809034e:	a820      	add	r0, sp, #128	; 0x80
 8090350:	f001 fadb 	bl	809190a <_ZN6StringC1Eih>
 8090354:	a920      	add	r1, sp, #128	; 0x80
 8090356:	4638      	mov	r0, r7
 8090358:	f001 fb01 	bl	809195e <_ZplRK15StringSumHelperRK6String>
 809035c:	4629      	mov	r1, r5
 809035e:	f001 fb0a 	bl	8091976 <_ZplRK15StringSumHelperPKc>
               "\"gy\":" +  String(imu.gy) + ", " +
 8090362:	4938      	ldr	r1, [pc, #224]	; (8090444 <_ZN3DOF6getAllEv+0x218>)
 8090364:	f001 fb07 	bl	8091976 <_ZplRK15StringSumHelperPKc>
 8090368:	4607      	mov	r7, r0
 809036a:	220a      	movs	r2, #10
 809036c:	f9b4 105e 	ldrsh.w	r1, [r4, #94]	; 0x5e
 8090370:	a824      	add	r0, sp, #144	; 0x90
 8090372:	f001 faca 	bl	809190a <_ZN6StringC1Eih>
 8090376:	a924      	add	r1, sp, #144	; 0x90
 8090378:	4638      	mov	r0, r7
 809037a:	f001 faf0 	bl	809195e <_ZplRK15StringSumHelperRK6String>
 809037e:	4629      	mov	r1, r5
 8090380:	f001 faf9 	bl	8091976 <_ZplRK15StringSumHelperPKc>
               "\"gz\":" + String(imu.gz) + ", " +
 8090384:	4930      	ldr	r1, [pc, #192]	; (8090448 <_ZN3DOF6getAllEv+0x21c>)
 8090386:	f001 faf6 	bl	8091976 <_ZplRK15StringSumHelperPKc>
 809038a:	4607      	mov	r7, r0
 809038c:	220a      	movs	r2, #10
 809038e:	f9b4 1060 	ldrsh.w	r1, [r4, #96]	; 0x60
 8090392:	a828      	add	r0, sp, #160	; 0xa0
 8090394:	f001 fab9 	bl	809190a <_ZN6StringC1Eih>
 8090398:	a928      	add	r1, sp, #160	; 0xa0
 809039a:	4638      	mov	r0, r7
 809039c:	f001 fadf 	bl	809195e <_ZplRK15StringSumHelperRK6String>
 80903a0:	4629      	mov	r1, r5
 80903a2:	f001 fae8 	bl	8091976 <_ZplRK15StringSumHelperPKc>
               "\"temp\":" + String(imu.temperature) + "}"
 80903a6:	4929      	ldr	r1, [pc, #164]	; (809044c <_ZN3DOF6getAllEv+0x220>)
 80903a8:	f001 fae5 	bl	8091976 <_ZplRK15StringSumHelperPKc>
 80903ac:	4605      	mov	r5, r0
 80903ae:	220a      	movs	r2, #10
 80903b0:	f9b4 106e 	ldrsh.w	r1, [r4, #110]	; 0x6e
 80903b4:	a82c      	add	r0, sp, #176	; 0xb0
 80903b6:	f001 faa8 	bl	809190a <_ZN6StringC1Eih>
 80903ba:	a92c      	add	r1, sp, #176	; 0xb0
 80903bc:	4628      	mov	r0, r5
 80903be:	f001 face 	bl	809195e <_ZplRK15StringSumHelperRK6String>
               "\n}";
 80903c2:	4923      	ldr	r1, [pc, #140]	; (8090450 <_ZN3DOF6getAllEv+0x224>)
 80903c4:	f001 fad7 	bl	8091976 <_ZplRK15StringSumHelperPKc>
 80903c8:	4601      	mov	r1, r0
 80903ca:	4630      	mov	r0, r6
 80903cc:	f001 fa81 	bl	80918d2 <_ZN6StringC1ERKS_>
 80903d0:	a82c      	add	r0, sp, #176	; 0xb0
 80903d2:	f001 fa15 	bl	8091800 <_ZN6StringD1Ev>
 80903d6:	a828      	add	r0, sp, #160	; 0xa0
 80903d8:	f001 fa12 	bl	8091800 <_ZN6StringD1Ev>
 80903dc:	a824      	add	r0, sp, #144	; 0x90
 80903de:	f001 fa0f 	bl	8091800 <_ZN6StringD1Ev>
 80903e2:	a820      	add	r0, sp, #128	; 0x80
 80903e4:	f001 fa0c 	bl	8091800 <_ZN6StringD1Ev>
 80903e8:	a81c      	add	r0, sp, #112	; 0x70
 80903ea:	f001 fa09 	bl	8091800 <_ZN6StringD1Ev>
 80903ee:	a818      	add	r0, sp, #96	; 0x60
 80903f0:	f001 fa06 	bl	8091800 <_ZN6StringD1Ev>
 80903f4:	a814      	add	r0, sp, #80	; 0x50
 80903f6:	f001 fa03 	bl	8091800 <_ZN6StringD1Ev>
 80903fa:	a810      	add	r0, sp, #64	; 0x40
 80903fc:	f001 fa00 	bl	8091800 <_ZN6StringD1Ev>
 8090400:	a80c      	add	r0, sp, #48	; 0x30
 8090402:	f001 f9fd 	bl	8091800 <_ZN6StringD1Ev>
 8090406:	a808      	add	r0, sp, #32
 8090408:	f001 f9fa 	bl	8091800 <_ZN6StringD1Ev>
 809040c:	4668      	mov	r0, sp
 809040e:	f001 f9f7 	bl	8091800 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8090412:	a804      	add	r0, sp, #16
 8090414:	f001 f9f4 	bl	8091800 <_ZN6StringD1Ev>
			
			
	return returnstring;
}
 8090418:	4630      	mov	r0, r6
 809041a:	b031      	add	sp, #196	; 0xc4
 809041c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 809041e:	bf00      	nop
 8090420:	08099a52 	.word	0x08099a52
 8090424:	08097a04 	.word	0x08097a04
 8090428:	08099a67 	.word	0x08099a67
 809042c:	08099a6d 	.word	0x08099a6d
 8090430:	08099a73 	.word	0x08099a73
 8090434:	08099a79 	.word	0x08099a79
 8090438:	08099a7f 	.word	0x08099a7f
 809043c:	08099a85 	.word	0x08099a85
 8090440:	08099a8b 	.word	0x08099a8b
 8090444:	08099a91 	.word	0x08099a91
 8090448:	08099a97 	.word	0x08099a97
 809044c:	08099a9d 	.word	0x08099a9d
 8090450:	08099aa5 	.word	0x08099aa5

08090454 <_GLOBAL__sub_I__ZN3DOFC2Ev>:
 8090454:	f000 bbd8 	b.w	8090c08 <HAL_Pin_Map>

08090458 <_ZN12Adafruit_GPS4readEv>:
  }

  return false;
}

char Adafruit_GPS::read(void) {
 8090458:	b570      	push	{r4, r5, r6, lr}
  char c = 0;

  if (paused) return c;
 809045a:	f890 504a 	ldrb.w	r5, [r0, #74]	; 0x4a
  }

  return false;
}

char Adafruit_GPS::read(void) {
 809045e:	4604      	mov	r4, r0
  char c = 0;

  if (paused) return c;
 8090460:	b10d      	cbz	r5, 8090466 <_ZN12Adafruit_GPS4readEv+0xe>
 8090462:	2000      	movs	r0, #0
 8090464:	bd70      	pop	{r4, r5, r6, pc}
    if(!gpsSwSerial->available()) return c;
    c = gpsSwSerial->read();
  } else
#endif
  {
    if(!gpsHwSerial->available()) return c;
 8090466:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8090468:	6803      	ldr	r3, [r0, #0]
 809046a:	691b      	ldr	r3, [r3, #16]
 809046c:	4798      	blx	r3
 809046e:	2800      	cmp	r0, #0
 8090470:	d0f7      	beq.n	8090462 <_ZN12Adafruit_GPS4readEv+0xa>
    c = gpsHwSerial->read();
 8090472:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8090474:	6803      	ldr	r3, [r0, #0]
 8090476:	695b      	ldr	r3, [r3, #20]
 8090478:	4798      	blx	r3
 809047a:	b2c0      	uxtb	r0, r0

 // if (c == '$') {         //please don't eat the dollar sign - rdl 9/15/14
 //    currentline[lineidx] = 0;
 //    lineidx = 0;
 // }
  if (c == '\n') {
 809047c:	280a      	cmp	r0, #10
 809047e:	4b14      	ldr	r3, [pc, #80]	; (80904d0 <_ZN12Adafruit_GPS4readEv+0x78>)
 8090480:	4a14      	ldr	r2, [pc, #80]	; (80904d4 <_ZN12Adafruit_GPS4readEv+0x7c>)
 8090482:	d116      	bne.n	80904b2 <_ZN12Adafruit_GPS4readEv+0x5a>
    currentline[lineidx] = 0;
 8090484:	7819      	ldrb	r1, [r3, #0]
 8090486:	6814      	ldr	r4, [r2, #0]
 8090488:	b2c9      	uxtb	r1, r1
 809048a:	5465      	strb	r5, [r4, r1]

    if (currentline == line1) {
 809048c:	6816      	ldr	r6, [r2, #0]
 809048e:	4d12      	ldr	r5, [pc, #72]	; (80904d8 <_ZN12Adafruit_GPS4readEv+0x80>)
 8090490:	4c12      	ldr	r4, [pc, #72]	; (80904dc <_ZN12Adafruit_GPS4readEv+0x84>)
 8090492:	4913      	ldr	r1, [pc, #76]	; (80904e0 <_ZN12Adafruit_GPS4readEv+0x88>)
 8090494:	42ae      	cmp	r6, r5
      currentline = line2;
      lastline = line1;
    } else {
      currentline = line1;
      lastline = line2;
 8090496:	bf14      	ite	ne
 8090498:	600c      	strne	r4, [r1, #0]
  if (c == '\n') {
    currentline[lineidx] = 0;

    if (currentline == line1) {
      currentline = line2;
      lastline = line1;
 809049a:	600e      	streq	r6, [r1, #0]
    }

    //Serial.println("----");
    //Serial.println((char *)lastline);
    //Serial.println("----");
    lineidx = 0;
 809049c:	f04f 0100 	mov.w	r1, #0
 80904a0:	7019      	strb	r1, [r3, #0]
    recvdflag = true;
 80904a2:	4910      	ldr	r1, [pc, #64]	; (80904e4 <_ZN12Adafruit_GPS4readEv+0x8c>)
 // }
  if (c == '\n') {
    currentline[lineidx] = 0;

    if (currentline == line1) {
      currentline = line2;
 80904a4:	bf08      	it	eq
 80904a6:	6014      	streq	r4, [r2, #0]

    //Serial.println("----");
    //Serial.println((char *)lastline);
    //Serial.println("----");
    lineidx = 0;
    recvdflag = true;
 80904a8:	f04f 0401 	mov.w	r4, #1

    if (currentline == line1) {
      currentline = line2;
      lastline = line1;
    } else {
      currentline = line1;
 80904ac:	bf18      	it	ne
 80904ae:	6015      	strne	r5, [r2, #0]

    //Serial.println("----");
    //Serial.println((char *)lastline);
    //Serial.println("----");
    lineidx = 0;
    recvdflag = true;
 80904b0:	700c      	strb	r4, [r1, #0]
  }

  currentline[lineidx++] = c;
 80904b2:	6814      	ldr	r4, [r2, #0]
 80904b4:	781a      	ldrb	r2, [r3, #0]
 80904b6:	b2d2      	uxtb	r2, r2
 80904b8:	1c51      	adds	r1, r2, #1
 80904ba:	b2c9      	uxtb	r1, r1
 80904bc:	7019      	strb	r1, [r3, #0]
 80904be:	54a0      	strb	r0, [r4, r2]
  if (lineidx >= MAXLINELENGTH)
 80904c0:	781b      	ldrb	r3, [r3, #0]
 80904c2:	2b77      	cmp	r3, #119	; 0x77
    lineidx = MAXLINELENGTH-1;
 80904c4:	bf82      	ittt	hi
 80904c6:	4b02      	ldrhi	r3, [pc, #8]	; (80904d0 <_ZN12Adafruit_GPS4readEv+0x78>)
 80904c8:	2277      	movhi	r2, #119	; 0x77
 80904ca:	701a      	strbhi	r2, [r3, #0]

  return c;
}
 80904cc:	bd70      	pop	{r4, r5, r6, pc}
 80904ce:	bf00      	nop
 80904d0:	20003954 	.word	0x20003954
 80904d4:	20003950 	.word	0x20003950
 80904d8:	20003955 	.word	0x20003955
 80904dc:	200039cd 	.word	0x200039cd
 80904e0:	20003a48 	.word	0x20003a48
 80904e4:	20003a45 	.word	0x20003a45

080904e8 <_ZN12Adafruit_GPS11common_initEv>:
void Adafruit_GPS::common_init(void) {
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
  recvdflag   = false;
 80904e8:	4a15      	ldr	r2, [pc, #84]	; (8090540 <_ZN12Adafruit_GPS11common_initEv+0x58>)
// Initialization code used by all constructor types
void Adafruit_GPS::common_init(void) {
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
 80904ea:	2300      	movs	r3, #0
  recvdflag   = false;
 80904ec:	7013      	strb	r3, [r2, #0]
  paused      = false;
  lineidx     = 0;
 80904ee:	4a15      	ldr	r2, [pc, #84]	; (8090544 <_ZN12Adafruit_GPS11common_initEv+0x5c>)
  currentline = line1;
 80904f0:	4915      	ldr	r1, [pc, #84]	; (8090548 <_ZN12Adafruit_GPS11common_initEv+0x60>)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
  recvdflag   = false;
  paused      = false;
  lineidx     = 0;
 80904f2:	7013      	strb	r3, [r2, #0]
  currentline = line1;
 80904f4:	4a15      	ldr	r2, [pc, #84]	; (809054c <_ZN12Adafruit_GPS11common_initEv+0x64>)
// Initialization code used by all constructor types
void Adafruit_GPS::common_init(void) {
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
 80904f6:	64c3      	str	r3, [r0, #76]	; 0x4c
  recvdflag   = false;
  paused      = false;
  lineidx     = 0;
  currentline = line1;
 80904f8:	6011      	str	r1, [r2, #0]
  lastline    = line2;
 80904fa:	4915      	ldr	r1, [pc, #84]	; (8090550 <_ZN12Adafruit_GPS11common_initEv+0x68>)
 80904fc:	4a15      	ldr	r2, [pc, #84]	; (8090554 <_ZN12Adafruit_GPS11common_initEv+0x6c>)
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
  recvdflag   = false;
  paused      = false;
 80904fe:	f880 304a 	strb.w	r3, [r0, #74]	; 0x4a
  lineidx     = 0;
  currentline = line1;
  lastline    = line2;
 8090502:	6011      	str	r1, [r2, #0]

  hour = minute = seconds = year = month = day =
    fixquality = satellites = 0; // uint8_t
 8090504:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8090508:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 809050c:	7143      	strb	r3, [r0, #5]
 809050e:	7103      	strb	r3, [r0, #4]
 8090510:	70c3      	strb	r3, [r0, #3]
 8090512:	7083      	strb	r3, [r0, #2]
 8090514:	7043      	strb	r3, [r0, #1]
 8090516:	7003      	strb	r3, [r0, #0]
  lat = lon = mag = 0; // char
 8090518:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 809051c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 8090520:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  fix = false; // boolean
 8090524:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
  milliseconds = 0; // uint16_t
 8090528:	80c3      	strh	r3, [r0, #6]
  latitude = longitude = geoidheight = altitude =
    speed = angle = magvariation = HDOP = 0.0; // float
 809052a:	2300      	movs	r3, #0
 809052c:	6343      	str	r3, [r0, #52]	; 0x34
 809052e:	6303      	str	r3, [r0, #48]	; 0x30
 8090530:	62c3      	str	r3, [r0, #44]	; 0x2c
 8090532:	6283      	str	r3, [r0, #40]	; 0x28
 8090534:	6243      	str	r3, [r0, #36]	; 0x24
 8090536:	6203      	str	r3, [r0, #32]
 8090538:	60c3      	str	r3, [r0, #12]
 809053a:	6083      	str	r3, [r0, #8]
 809053c:	4770      	bx	lr
 809053e:	bf00      	nop
 8090540:	20003a45 	.word	0x20003a45
 8090544:	20003954 	.word	0x20003954
 8090548:	20003955 	.word	0x20003955
 809054c:	20003950 	.word	0x20003950
 8090550:	200039cd 	.word	0x200039cd
 8090554:	20003a48 	.word	0x20003a48

08090558 <_ZN12Adafruit_GPSC1EP11USARTSerial>:
  gpsSwSerial = ser; // ...override gpsSwSerial with value passed.
}
#endif

// Constructor when using HardwareSerial
Adafruit_GPS::Adafruit_GPS(HardwareSerial *ser) {
 8090558:	b538      	push	{r3, r4, r5, lr}
 809055a:	460d      	mov	r5, r1
  common_init();  // Set everything to common state, then...
 809055c:	f7ff ffc4 	bl	80904e8 <_ZN12Adafruit_GPS11common_initEv>
  gpsHwSerial = ser; // ...override gpsHwSerial with value passed.
 8090560:	64c5      	str	r5, [r0, #76]	; 0x4c
}
 8090562:	bd38      	pop	{r3, r4, r5, pc}

08090564 <_ZN12Adafruit_GPS5beginEm>:
  latitude = longitude = geoidheight = altitude =
    speed = angle = magvariation = HDOP = 0.0; // float
}

void Adafruit_GPS::begin(uint32_t baud)
{
 8090564:	b508      	push	{r3, lr}
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  if(gpsSwSerial)
    gpsSwSerial->begin(baud);
  else
#endif
    gpsHwSerial->begin(baud);
 8090566:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8090568:	f001 fe44 	bl	80921f4 <_ZN11USARTSerial5beginEm>

  delay(10);
}
 809056c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    gpsSwSerial->begin(baud);
  else
#endif
    gpsHwSerial->begin(baud);

  delay(10);
 8090570:	200a      	movs	r0, #10
 8090572:	f001 bc05 	b.w	8091d80 <delay>

08090576 <_ZN12Adafruit_GPS11sendCommandEPKc>:
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  if(gpsSwSerial)
    gpsSwSerial->println(str);
  else
#endif
    gpsHwSerial->println(str);
 8090576:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8090578:	f001 ba4a 	b.w	8091a10 <_ZN5Print7printlnEPKc>

0809057c <_ZN12Adafruit_GPS15newNMEAreceivedEv>:
}

boolean Adafruit_GPS::newNMEAreceived(void) {
  return recvdflag;
 809057c:	4b01      	ldr	r3, [pc, #4]	; (8090584 <_ZN12Adafruit_GPS15newNMEAreceivedEv+0x8>)
 809057e:	7818      	ldrb	r0, [r3, #0]
}
 8090580:	4770      	bx	lr
 8090582:	bf00      	nop
 8090584:	20003a45 	.word	0x20003a45

08090588 <_ZN12Adafruit_GPS8lastNMEAEv>:
void Adafruit_GPS::pause(boolean p) {
  paused = p;
}

char *Adafruit_GPS::lastNMEA(void) {
  recvdflag = false;
 8090588:	4b02      	ldr	r3, [pc, #8]	; (8090594 <_ZN12Adafruit_GPS8lastNMEAEv+0xc>)
 809058a:	2200      	movs	r2, #0
 809058c:	701a      	strb	r2, [r3, #0]
  return (char *)lastline;
}
 809058e:	4b02      	ldr	r3, [pc, #8]	; (8090598 <_ZN12Adafruit_GPS8lastNMEAEv+0x10>)
 8090590:	6818      	ldr	r0, [r3, #0]
 8090592:	4770      	bx	lr
 8090594:	20003a45 	.word	0x20003a45
 8090598:	20003a48 	.word	0x20003a48

0809059c <_ZN12Adafruit_GPS8parseHexEc>:

// read a Hex value and return the decimal equivalent
uint8_t Adafruit_GPS::parseHex(char c) {
    if (c < '0')
 809059c:	292f      	cmp	r1, #47	; 0x2f
 809059e:	d90a      	bls.n	80905b6 <_ZN12Adafruit_GPS8parseHexEc+0x1a>
      return 0;
    if (c <= '9')
 80905a0:	2939      	cmp	r1, #57	; 0x39
 80905a2:	d801      	bhi.n	80905a8 <_ZN12Adafruit_GPS8parseHexEc+0xc>
      return c - '0';
 80905a4:	3930      	subs	r1, #48	; 0x30
 80905a6:	e004      	b.n	80905b2 <_ZN12Adafruit_GPS8parseHexEc+0x16>
    if (c < 'A')
 80905a8:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 80905ac:	2b05      	cmp	r3, #5
 80905ae:	d802      	bhi.n	80905b6 <_ZN12Adafruit_GPS8parseHexEc+0x1a>
       return 0;
    if (c <= 'F')
       return (c - 'A')+10;
 80905b0:	3937      	subs	r1, #55	; 0x37
 80905b2:	b2c8      	uxtb	r0, r1
 80905b4:	4770      	bx	lr
}

// read a Hex value and return the decimal equivalent
uint8_t Adafruit_GPS::parseHex(char c) {
    if (c < '0')
      return 0;
 80905b6:	2000      	movs	r0, #0
       return 0;
    if (c <= 'F')
       return (c - 'A')+10;
    // if (c > 'F')
    return 0;
}
 80905b8:	4770      	bx	lr
	...

080905bc <_ZN12Adafruit_GPS5parseEPc>:
volatile char *lastline;
volatile boolean recvdflag;
volatile boolean inStandbyMode;


boolean Adafruit_GPS::parse(char *nmea) {
 80905bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80905c0:	4604      	mov	r4, r0
  // do checksum check

  // first look if we even have one
  if (nmea[strlen(nmea)-4] == '*') {
 80905c2:	4608      	mov	r0, r1
volatile char *lastline;
volatile boolean recvdflag;
volatile boolean inStandbyMode;


boolean Adafruit_GPS::parse(char *nmea) {
 80905c4:	460d      	mov	r5, r1
  // do checksum check

  // first look if we even have one
  if (nmea[strlen(nmea)-4] == '*') {
 80905c6:	f003 fd28 	bl	809401a <strlen>
 80905ca:	1f07      	subs	r7, r0, #4
 80905cc:	5deb      	ldrb	r3, [r5, r7]
 80905ce:	2b2a      	cmp	r3, #42	; 0x2a
 80905d0:	d119      	bne.n	8090606 <_ZN12Adafruit_GPS5parseEPc+0x4a>
    uint16_t sum = parseHex(nmea[strlen(nmea)-3]) * 16;
 80905d2:	182e      	adds	r6, r5, r0
 80905d4:	f816 1c03 	ldrb.w	r1, [r6, #-3]
 80905d8:	4620      	mov	r0, r4
 80905da:	f7ff ffdf 	bl	809059c <_ZN12Adafruit_GPS8parseHexEc>
 80905de:	0100      	lsls	r0, r0, #4
 80905e0:	b282      	uxth	r2, r0
    sum += parseHex(nmea[strlen(nmea)-2]);
 80905e2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80905e6:	4620      	mov	r0, r4
 80905e8:	f7ff ffd8 	bl	809059c <_ZN12Adafruit_GPS8parseHexEc>
 80905ec:	4410      	add	r0, r2
 80905ee:	b280      	uxth	r0, r0

    // check checksum
    for (uint8_t i=2; i < (strlen(nmea)-4); i++) {
 80905f0:	2302      	movs	r3, #2
 80905f2:	429f      	cmp	r7, r3
 80905f4:	d904      	bls.n	8090600 <_ZN12Adafruit_GPS5parseEPc+0x44>
      sum ^= nmea[i];
 80905f6:	5cea      	ldrb	r2, [r5, r3]
  if (nmea[strlen(nmea)-4] == '*') {
    uint16_t sum = parseHex(nmea[strlen(nmea)-3]) * 16;
    sum += parseHex(nmea[strlen(nmea)-2]);

    // check checksum
    for (uint8_t i=2; i < (strlen(nmea)-4); i++) {
 80905f8:	3301      	adds	r3, #1
      sum ^= nmea[i];
 80905fa:	4050      	eors	r0, r2
  if (nmea[strlen(nmea)-4] == '*') {
    uint16_t sum = parseHex(nmea[strlen(nmea)-3]) * 16;
    sum += parseHex(nmea[strlen(nmea)-2]);

    // check checksum
    for (uint8_t i=2; i < (strlen(nmea)-4); i++) {
 80905fc:	b2db      	uxtb	r3, r3
 80905fe:	e7f8      	b.n	80905f2 <_ZN12Adafruit_GPS5parseEPc+0x36>
      sum ^= nmea[i];
    }
    if (sum != 0) {
 8090600:	b108      	cbz	r0, 8090606 <_ZN12Adafruit_GPS5parseEPc+0x4a>
      // bad checksum :(
      return false;
 8090602:	2000      	movs	r0, #0
 8090604:	e2e8      	b.n	8090bd8 <_ZN12Adafruit_GPS5parseEPc+0x61c>
  }
  int32_t degree;
  long minutes;
  char degreebuff[10];
  // look for a few common sentences
  if ((strstr(nmea, "$GPGGA")) || (strstr(nmea, "$GNGGA"))) {
 8090606:	49b6      	ldr	r1, [pc, #728]	; (80908e0 <_ZN12Adafruit_GPS5parseEPc+0x324>)
 8090608:	4628      	mov	r0, r5
 809060a:	f003 fd36 	bl	809407a <strstr>
 809060e:	b930      	cbnz	r0, 809061e <_ZN12Adafruit_GPS5parseEPc+0x62>
 8090610:	49b4      	ldr	r1, [pc, #720]	; (80908e4 <_ZN12Adafruit_GPS5parseEPc+0x328>)
 8090612:	4628      	mov	r0, r5
 8090614:	f003 fd31 	bl	809407a <strstr>
 8090618:	2800      	cmp	r0, #0
 809061a:	f000 8173 	beq.w	8090904 <_ZN12Adafruit_GPS5parseEPc+0x348>
    // found GGA
    char *p = nmea;
    // get time
    p = strchr(p, ',')+1;
 809061e:	212c      	movs	r1, #44	; 0x2c
 8090620:	4628      	mov	r0, r5
 8090622:	f003 fcda 	bl	8093fda <strchr>
 8090626:	1c45      	adds	r5, r0, #1
    float timef = atof(p);
 8090628:	4628      	mov	r0, r5
 809062a:	f003 fb67 	bl	8093cfc <atof>
 809062e:	f002 fea5 	bl	809337c <__aeabi_d2f>
 8090632:	4606      	mov	r6, r0
    uint32_t time = timef;
 8090634:	f003 f976 	bl	8093924 <__aeabi_f2uiz>
    hour = time / 10000;
 8090638:	f242 7210 	movw	r2, #10000	; 0x2710
 809063c:	fbb0 f3f2 	udiv	r3, r0, r2
 8090640:	7023      	strb	r3, [r4, #0]
    minute = (time % 10000) / 100;
 8090642:	fb02 0313 	mls	r3, r2, r3, r0
 8090646:	2764      	movs	r7, #100	; 0x64
 8090648:	fbb3 f3f7 	udiv	r3, r3, r7
 809064c:	7063      	strb	r3, [r4, #1]
    seconds = (time % 100);
 809064e:	fbb0 f3f7 	udiv	r3, r0, r7
 8090652:	fb07 0013 	mls	r0, r7, r3, r0
 8090656:	70a0      	strb	r0, [r4, #2]

    milliseconds = fmod(timef, 1.0) * 1000;
 8090658:	4630      	mov	r0, r6
 809065a:	f002 fb43 	bl	8092ce4 <__aeabi_f2d>
 809065e:	2200      	movs	r2, #0
 8090660:	4ba1      	ldr	r3, [pc, #644]	; (80908e8 <_ZN12Adafruit_GPS5parseEPc+0x32c>)
 8090662:	f002 f859 	bl	8092718 <fmod>
 8090666:	4ba1      	ldr	r3, [pc, #644]	; (80908ec <_ZN12Adafruit_GPS5parseEPc+0x330>)
 8090668:	2200      	movs	r2, #0
 809066a:	f002 fb8f 	bl	8092d8c <__aeabi_dmul>
 809066e:	f002 fe65 	bl	809333c <__aeabi_d2uiz>

    // parse out latitude
    p = strchr(p, ',')+1;
 8090672:	212c      	movs	r1, #44	; 0x2c
    uint32_t time = timef;
    hour = time / 10000;
    minute = (time % 10000) / 100;
    seconds = (time % 100);

    milliseconds = fmod(timef, 1.0) * 1000;
 8090674:	80e0      	strh	r0, [r4, #6]

    // parse out latitude
    p = strchr(p, ',')+1;
 8090676:	4628      	mov	r0, r5
 8090678:	f003 fcaf 	bl	8093fda <strchr>
    if (',' != *p)
 809067c:	7843      	ldrb	r3, [r0, #1]
    seconds = (time % 100);

    milliseconds = fmod(timef, 1.0) * 1000;

    // parse out latitude
    p = strchr(p, ',')+1;
 809067e:	4605      	mov	r5, r0
    if (',' != *p)
 8090680:	2b2c      	cmp	r3, #44	; 0x2c
    seconds = (time % 100);

    milliseconds = fmod(timef, 1.0) * 1000;

    // parse out latitude
    p = strchr(p, ',')+1;
 8090682:	f100 0601 	add.w	r6, r0, #1
    if (',' != *p)
 8090686:	d053      	beq.n	8090730 <_ZN12Adafruit_GPS5parseEPc+0x174>
    {
      strncpy(degreebuff, p, 2);
 8090688:	4631      	mov	r1, r6
 809068a:	2202      	movs	r2, #2
 809068c:	a801      	add	r0, sp, #4
 809068e:	f003 fce1 	bl	8094054 <strncpy>
      p += 2;
      degreebuff[2] = '\0';
 8090692:	f04f 0a00 	mov.w	sl, #0
 8090696:	f10d 0910 	add.w	r9, sp, #16
      degree = atol(degreebuff) * 10000000;
 809069a:	a801      	add	r0, sp, #4
    p = strchr(p, ',')+1;
    if (',' != *p)
    {
      strncpy(degreebuff, p, 2);
      p += 2;
      degreebuff[2] = '\0';
 809069c:	f809 ad0a 	strb.w	sl, [r9, #-10]!
      degree = atol(degreebuff) * 10000000;
 80906a0:	f003 fb33 	bl	8093d0a <atol>
 80906a4:	4b92      	ldr	r3, [pc, #584]	; (80908f0 <_ZN12Adafruit_GPS5parseEPc+0x334>)
      strncpy(degreebuff, p, 2); // minutes
 80906a6:	1ce9      	adds	r1, r5, #3
    if (',' != *p)
    {
      strncpy(degreebuff, p, 2);
      p += 2;
      degreebuff[2] = '\0';
      degree = atol(degreebuff) * 10000000;
 80906a8:	fb03 f800 	mul.w	r8, r3, r0
      strncpy(degreebuff, p, 2); // minutes
 80906ac:	2202      	movs	r2, #2
      p += 3; // skip decimal point
 80906ae:	1dae      	adds	r6, r5, #6
    {
      strncpy(degreebuff, p, 2);
      p += 2;
      degreebuff[2] = '\0';
      degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
 80906b0:	a801      	add	r0, sp, #4
 80906b2:	f003 fccf 	bl	8094054 <strncpy>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
 80906b6:	2204      	movs	r2, #4
 80906b8:	4631      	mov	r1, r6
 80906ba:	4648      	mov	r0, r9
 80906bc:	f003 fcca 	bl	8094054 <strncpy>
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
 80906c0:	a801      	add	r0, sp, #4
      degreebuff[2] = '\0';
      degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
 80906c2:	f88d a00a 	strb.w	sl, [sp, #10]
      minutes = 50 * atol(degreebuff) / 3;
 80906c6:	f003 fb20 	bl	8093d0a <atol>
 80906ca:	2532      	movs	r5, #50	; 0x32
 80906cc:	4345      	muls	r5, r0
 80906ce:	2003      	movs	r0, #3
 80906d0:	fb95 f5f0 	sdiv	r5, r5, r0
      latitude_fixed = degree + minutes;
      latitude = degree / 100000 + minutes * 0.000006F;
 80906d4:	4887      	ldr	r0, [pc, #540]	; (80908f4 <_ZN12Adafruit_GPS5parseEPc+0x338>)
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      latitude_fixed = degree + minutes;
 80906d6:	eb08 0305 	add.w	r3, r8, r5
 80906da:	6123      	str	r3, [r4, #16]
      latitude = degree / 100000 + minutes * 0.000006F;
 80906dc:	fb98 f0f0 	sdiv	r0, r8, r0
 80906e0:	f002 ff56 	bl	8093590 <__aeabi_i2f>
 80906e4:	4680      	mov	r8, r0
 80906e6:	4628      	mov	r0, r5
 80906e8:	f002 ff52 	bl	8093590 <__aeabi_i2f>
 80906ec:	4982      	ldr	r1, [pc, #520]	; (80908f8 <_ZN12Adafruit_GPS5parseEPc+0x33c>)
 80906ee:	f002 ffa3 	bl	8093638 <__aeabi_fmul>
 80906f2:	4601      	mov	r1, r0
 80906f4:	4640      	mov	r0, r8
 80906f6:	f002 fe97 	bl	8093428 <__addsf3>
      latitudeDegrees = (latitude-100*int(latitude/100))/60.0;
 80906fa:	4980      	ldr	r1, [pc, #512]	; (80908fc <_ZN12Adafruit_GPS5parseEPc+0x340>)
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      latitude_fixed = degree + minutes;
      latitude = degree / 100000 + minutes * 0.000006F;
 80906fc:	60a0      	str	r0, [r4, #8]
 80906fe:	4680      	mov	r8, r0
      latitudeDegrees = (latitude-100*int(latitude/100))/60.0;
 8090700:	f003 f84e 	bl	80937a0 <__aeabi_fdiv>
 8090704:	f003 f8e8 	bl	80938d8 <__aeabi_f2iz>
 8090708:	4605      	mov	r5, r0
      latitudeDegrees += int(latitude/100);
 809070a:	4378      	muls	r0, r7
 809070c:	f002 ff40 	bl	8093590 <__aeabi_i2f>
 8090710:	4601      	mov	r1, r0
 8090712:	4640      	mov	r0, r8
 8090714:	f002 fe86 	bl	8093424 <__aeabi_fsub>
 8090718:	4979      	ldr	r1, [pc, #484]	; (8090900 <_ZN12Adafruit_GPS5parseEPc+0x344>)
 809071a:	f003 f841 	bl	80937a0 <__aeabi_fdiv>
 809071e:	4607      	mov	r7, r0
 8090720:	4628      	mov	r0, r5
 8090722:	f002 ff35 	bl	8093590 <__aeabi_i2f>
 8090726:	4601      	mov	r1, r0
 8090728:	4638      	mov	r0, r7
 809072a:	f002 fe7d 	bl	8093428 <__addsf3>
 809072e:	61a0      	str	r0, [r4, #24]
    }

    p = strchr(p, ',')+1;
 8090730:	212c      	movs	r1, #44	; 0x2c
 8090732:	4630      	mov	r0, r6
 8090734:	f003 fc51 	bl	8093fda <strchr>
 8090738:	4603      	mov	r3, r0
    if (',' != *p)
 809073a:	785a      	ldrb	r2, [r3, #1]
      latitude = degree / 100000 + minutes * 0.000006F;
      latitudeDegrees = (latitude-100*int(latitude/100))/60.0;
      latitudeDegrees += int(latitude/100);
    }

    p = strchr(p, ',')+1;
 809073c:	3001      	adds	r0, #1
    if (',' != *p)
 809073e:	2a2c      	cmp	r2, #44	; 0x2c
 8090740:	d010      	beq.n	8090764 <_ZN12Adafruit_GPS5parseEPc+0x1a8>
    {
      if (p[0] == 'S') latitudeDegrees *= -1.0;
 8090742:	2a53      	cmp	r2, #83	; 0x53
 8090744:	bf02      	ittt	eq
 8090746:	69a2      	ldreq	r2, [r4, #24]
 8090748:	f102 4200 	addeq.w	r2, r2, #2147483648	; 0x80000000
 809074c:	61a2      	streq	r2, [r4, #24]
      if (p[0] == 'N') lat = 'N';
 809074e:	785b      	ldrb	r3, [r3, #1]
 8090750:	2b4e      	cmp	r3, #78	; 0x4e
 8090752:	d005      	beq.n	8090760 <_ZN12Adafruit_GPS5parseEPc+0x1a4>
      else if (p[0] == 'S') lat = 'S';
 8090754:	2b53      	cmp	r3, #83	; 0x53
 8090756:	d003      	beq.n	8090760 <_ZN12Adafruit_GPS5parseEPc+0x1a4>
      else if (p[0] == ',') lat = 0;
 8090758:	2b2c      	cmp	r3, #44	; 0x2c
 809075a:	f47f af52 	bne.w	8090602 <_ZN12Adafruit_GPS5parseEPc+0x46>
 809075e:	2300      	movs	r3, #0
 8090760:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      else return false;
    }

    // parse out longitude
    p = strchr(p, ',')+1;
 8090764:	212c      	movs	r1, #44	; 0x2c
 8090766:	f003 fc38 	bl	8093fda <strchr>
    if (',' != *p)
 809076a:	7843      	ldrb	r3, [r0, #1]
      else if (p[0] == ',') lat = 0;
      else return false;
    }

    // parse out longitude
    p = strchr(p, ',')+1;
 809076c:	4605      	mov	r5, r0
    if (',' != *p)
 809076e:	2b2c      	cmp	r3, #44	; 0x2c
      else if (p[0] == ',') lat = 0;
      else return false;
    }

    // parse out longitude
    p = strchr(p, ',')+1;
 8090770:	f100 0601 	add.w	r6, r0, #1
    if (',' != *p)
 8090774:	d051      	beq.n	809081a <_ZN12Adafruit_GPS5parseEPc+0x25e>
    {
      strncpy(degreebuff, p, 3);
 8090776:	4631      	mov	r1, r6
 8090778:	2203      	movs	r2, #3
 809077a:	a801      	add	r0, sp, #4
 809077c:	f003 fc6a 	bl	8094054 <strncpy>
      p += 3;
      degreebuff[3] = '\0';
 8090780:	f04f 0800 	mov.w	r8, #0
      degree = atol(degreebuff) * 10000000;
 8090784:	a801      	add	r0, sp, #4
    p = strchr(p, ',')+1;
    if (',' != *p)
    {
      strncpy(degreebuff, p, 3);
      p += 3;
      degreebuff[3] = '\0';
 8090786:	f88d 8007 	strb.w	r8, [sp, #7]
      degree = atol(degreebuff) * 10000000;
 809078a:	f003 fabe 	bl	8093d0a <atol>
 809078e:	4f58      	ldr	r7, [pc, #352]	; (80908f0 <_ZN12Adafruit_GPS5parseEPc+0x334>)
      strncpy(degreebuff, p, 2); // minutes
 8090790:	1d29      	adds	r1, r5, #4
    if (',' != *p)
    {
      strncpy(degreebuff, p, 3);
      p += 3;
      degreebuff[3] = '\0';
      degree = atol(degreebuff) * 10000000;
 8090792:	4347      	muls	r7, r0
      strncpy(degreebuff, p, 2); // minutes
 8090794:	2202      	movs	r2, #2
      p += 3; // skip decimal point
 8090796:	1dee      	adds	r6, r5, #7
    {
      strncpy(degreebuff, p, 3);
      p += 3;
      degreebuff[3] = '\0';
      degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
 8090798:	a801      	add	r0, sp, #4
 809079a:	f003 fc5b 	bl	8094054 <strncpy>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
 809079e:	2204      	movs	r2, #4
 80907a0:	4631      	mov	r1, r6
 80907a2:	f10d 0006 	add.w	r0, sp, #6
 80907a6:	f003 fc55 	bl	8094054 <strncpy>
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
 80907aa:	a801      	add	r0, sp, #4
      degreebuff[3] = '\0';
      degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
 80907ac:	f88d 800a 	strb.w	r8, [sp, #10]
      minutes = 50 * atol(degreebuff) / 3;
 80907b0:	f003 faab 	bl	8093d0a <atol>
 80907b4:	2532      	movs	r5, #50	; 0x32
 80907b6:	4345      	muls	r5, r0
 80907b8:	2003      	movs	r0, #3
 80907ba:	fb95 f5f0 	sdiv	r5, r5, r0
      longitude_fixed = degree + minutes;
      longitude = degree / 100000 + minutes * 0.000006F;
 80907be:	484d      	ldr	r0, [pc, #308]	; (80908f4 <_ZN12Adafruit_GPS5parseEPc+0x338>)
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      longitude_fixed = degree + minutes;
 80907c0:	197b      	adds	r3, r7, r5
 80907c2:	6163      	str	r3, [r4, #20]
      longitude = degree / 100000 + minutes * 0.000006F;
 80907c4:	fb97 f0f0 	sdiv	r0, r7, r0
 80907c8:	f002 fee2 	bl	8093590 <__aeabi_i2f>
 80907cc:	4607      	mov	r7, r0
 80907ce:	4628      	mov	r0, r5
 80907d0:	f002 fede 	bl	8093590 <__aeabi_i2f>
 80907d4:	4948      	ldr	r1, [pc, #288]	; (80908f8 <_ZN12Adafruit_GPS5parseEPc+0x33c>)
 80907d6:	f002 ff2f 	bl	8093638 <__aeabi_fmul>
 80907da:	4601      	mov	r1, r0
 80907dc:	4638      	mov	r0, r7
 80907de:	f002 fe23 	bl	8093428 <__addsf3>
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
 80907e2:	4946      	ldr	r1, [pc, #280]	; (80908fc <_ZN12Adafruit_GPS5parseEPc+0x340>)
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      longitude_fixed = degree + minutes;
      longitude = degree / 100000 + minutes * 0.000006F;
 80907e4:	60e0      	str	r0, [r4, #12]
 80907e6:	4607      	mov	r7, r0
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
 80907e8:	f002 ffda 	bl	80937a0 <__aeabi_fdiv>
 80907ec:	f003 f874 	bl	80938d8 <__aeabi_f2iz>
 80907f0:	4605      	mov	r5, r0
      longitudeDegrees += int(longitude/100);
 80907f2:	2064      	movs	r0, #100	; 0x64
 80907f4:	4368      	muls	r0, r5
 80907f6:	f002 fecb 	bl	8093590 <__aeabi_i2f>
 80907fa:	4601      	mov	r1, r0
 80907fc:	4638      	mov	r0, r7
 80907fe:	f002 fe11 	bl	8093424 <__aeabi_fsub>
 8090802:	493f      	ldr	r1, [pc, #252]	; (8090900 <_ZN12Adafruit_GPS5parseEPc+0x344>)
 8090804:	f002 ffcc 	bl	80937a0 <__aeabi_fdiv>
 8090808:	4607      	mov	r7, r0
 809080a:	4628      	mov	r0, r5
 809080c:	f002 fec0 	bl	8093590 <__aeabi_i2f>
 8090810:	4601      	mov	r1, r0
 8090812:	4638      	mov	r0, r7
 8090814:	f002 fe08 	bl	8093428 <__addsf3>
 8090818:	61e0      	str	r0, [r4, #28]
    }

    p = strchr(p, ',')+1;
 809081a:	212c      	movs	r1, #44	; 0x2c
 809081c:	4630      	mov	r0, r6
 809081e:	f003 fbdc 	bl	8093fda <strchr>
 8090822:	4603      	mov	r3, r0
    if (',' != *p)
 8090824:	785a      	ldrb	r2, [r3, #1]
      longitude = degree / 100000 + minutes * 0.000006F;
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
      longitudeDegrees += int(longitude/100);
    }

    p = strchr(p, ',')+1;
 8090826:	3001      	adds	r0, #1
    if (',' != *p)
 8090828:	2a2c      	cmp	r2, #44	; 0x2c
 809082a:	d010      	beq.n	809084e <_ZN12Adafruit_GPS5parseEPc+0x292>
    {
      if (p[0] == 'W') longitudeDegrees *= -1.0;
 809082c:	2a57      	cmp	r2, #87	; 0x57
 809082e:	bf02      	ittt	eq
 8090830:	69e2      	ldreq	r2, [r4, #28]
 8090832:	f102 4200 	addeq.w	r2, r2, #2147483648	; 0x80000000
 8090836:	61e2      	streq	r2, [r4, #28]
      if (p[0] == 'W') lon = 'W';
 8090838:	785b      	ldrb	r3, [r3, #1]
 809083a:	2b57      	cmp	r3, #87	; 0x57
 809083c:	d005      	beq.n	809084a <_ZN12Adafruit_GPS5parseEPc+0x28e>
      else if (p[0] == 'E') lon = 'E';
 809083e:	2b45      	cmp	r3, #69	; 0x45
 8090840:	d003      	beq.n	809084a <_ZN12Adafruit_GPS5parseEPc+0x28e>
      else if (p[0] == ',') lon = 0;
 8090842:	2b2c      	cmp	r3, #44	; 0x2c
 8090844:	f47f aedd 	bne.w	8090602 <_ZN12Adafruit_GPS5parseEPc+0x46>
 8090848:	2300      	movs	r3, #0
 809084a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      else return false;
    }

    p = strchr(p, ',')+1;
 809084e:	212c      	movs	r1, #44	; 0x2c
 8090850:	f003 fbc3 	bl	8093fda <strchr>
    if (',' != *p)
 8090854:	7843      	ldrb	r3, [r0, #1]
      else if (p[0] == 'E') lon = 'E';
      else if (p[0] == ',') lon = 0;
      else return false;
    }

    p = strchr(p, ',')+1;
 8090856:	1c45      	adds	r5, r0, #1
    if (',' != *p)
 8090858:	2b2c      	cmp	r3, #44	; 0x2c
 809085a:	d004      	beq.n	8090866 <_ZN12Adafruit_GPS5parseEPc+0x2aa>
    {
      fixquality = atoi(p);
 809085c:	4628      	mov	r0, r5
 809085e:	f003 fa50 	bl	8093d02 <atoi>
 8090862:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    }

    p = strchr(p, ',')+1;
 8090866:	4628      	mov	r0, r5
 8090868:	212c      	movs	r1, #44	; 0x2c
 809086a:	f003 fbb6 	bl	8093fda <strchr>
    if (',' != *p)
 809086e:	7843      	ldrb	r3, [r0, #1]
    if (',' != *p)
    {
      fixquality = atoi(p);
    }

    p = strchr(p, ',')+1;
 8090870:	1c45      	adds	r5, r0, #1
    if (',' != *p)
 8090872:	2b2c      	cmp	r3, #44	; 0x2c
 8090874:	d004      	beq.n	8090880 <_ZN12Adafruit_GPS5parseEPc+0x2c4>
    {
      satellites = atoi(p);
 8090876:	4628      	mov	r0, r5
 8090878:	f003 fa43 	bl	8093d02 <atoi>
 809087c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    }

    p = strchr(p, ',')+1;
 8090880:	4628      	mov	r0, r5
 8090882:	212c      	movs	r1, #44	; 0x2c
 8090884:	f003 fba9 	bl	8093fda <strchr>
    if (',' != *p)
 8090888:	7843      	ldrb	r3, [r0, #1]
    if (',' != *p)
    {
      satellites = atoi(p);
    }

    p = strchr(p, ',')+1;
 809088a:	1c45      	adds	r5, r0, #1
    if (',' != *p)
 809088c:	2b2c      	cmp	r3, #44	; 0x2c
 809088e:	d005      	beq.n	809089c <_ZN12Adafruit_GPS5parseEPc+0x2e0>
    {
      HDOP = atof(p);
 8090890:	4628      	mov	r0, r5
 8090892:	f003 fa33 	bl	8093cfc <atof>
 8090896:	f002 fd71 	bl	809337c <__aeabi_d2f>
 809089a:	6360      	str	r0, [r4, #52]	; 0x34
    }

    p = strchr(p, ',')+1;
 809089c:	4628      	mov	r0, r5
 809089e:	212c      	movs	r1, #44	; 0x2c
 80908a0:	f003 fb9b 	bl	8093fda <strchr>
    if (',' != *p)
 80908a4:	7843      	ldrb	r3, [r0, #1]
    if (',' != *p)
    {
      HDOP = atof(p);
    }

    p = strchr(p, ',')+1;
 80908a6:	1c45      	adds	r5, r0, #1
    if (',' != *p)
 80908a8:	2b2c      	cmp	r3, #44	; 0x2c
 80908aa:	d005      	beq.n	80908b8 <_ZN12Adafruit_GPS5parseEPc+0x2fc>
    {
      altitude = atof(p);
 80908ac:	4628      	mov	r0, r5
 80908ae:	f003 fa25 	bl	8093cfc <atof>
 80908b2:	f002 fd63 	bl	809337c <__aeabi_d2f>
 80908b6:	6260      	str	r0, [r4, #36]	; 0x24
    }

    p = strchr(p, ',')+1;
 80908b8:	212c      	movs	r1, #44	; 0x2c
 80908ba:	4628      	mov	r0, r5
 80908bc:	f003 fb8d 	bl	8093fda <strchr>
    p = strchr(p, ',')+1;
 80908c0:	212c      	movs	r1, #44	; 0x2c
 80908c2:	3001      	adds	r0, #1
 80908c4:	f003 fb89 	bl	8093fda <strchr>
    if (',' != *p)
 80908c8:	7843      	ldrb	r3, [r0, #1]
 80908ca:	2b2c      	cmp	r3, #44	; 0x2c
 80908cc:	f000 8183 	beq.w	8090bd6 <_ZN12Adafruit_GPS5parseEPc+0x61a>
    {
      geoidheight = atof(p);
 80908d0:	3001      	adds	r0, #1
 80908d2:	f003 fa13 	bl	8093cfc <atof>
 80908d6:	f002 fd51 	bl	809337c <__aeabi_d2f>
 80908da:	6220      	str	r0, [r4, #32]
 80908dc:	e17b      	b.n	8090bd6 <_ZN12Adafruit_GPS5parseEPc+0x61a>
 80908de:	bf00      	nop
 80908e0:	08099aa9 	.word	0x08099aa9
 80908e4:	08099ab0 	.word	0x08099ab0
 80908e8:	3ff00000 	.word	0x3ff00000
 80908ec:	408f4000 	.word	0x408f4000
 80908f0:	00989680 	.word	0x00989680
 80908f4:	000186a0 	.word	0x000186a0
 80908f8:	36c9539c 	.word	0x36c9539c
 80908fc:	42c80000 	.word	0x42c80000
 8090900:	42700000 	.word	0x42700000
    }
    return true;
  }
  if ((strstr(nmea, "$GPRMC")) || (strstr(nmea, "$GNRMC"))) {
 8090904:	49b6      	ldr	r1, [pc, #728]	; (8090be0 <_ZN12Adafruit_GPS5parseEPc+0x624>)
 8090906:	4628      	mov	r0, r5
 8090908:	f003 fbb7 	bl	809407a <strstr>
 809090c:	b930      	cbnz	r0, 809091c <_ZN12Adafruit_GPS5parseEPc+0x360>
 809090e:	49b5      	ldr	r1, [pc, #724]	; (8090be4 <_ZN12Adafruit_GPS5parseEPc+0x628>)
 8090910:	4628      	mov	r0, r5
 8090912:	f003 fbb2 	bl	809407a <strstr>
 8090916:	2800      	cmp	r0, #0
 8090918:	f43f ae73 	beq.w	8090602 <_ZN12Adafruit_GPS5parseEPc+0x46>
   // found RMC
    char *p = nmea;

    // get time
    p = strchr(p, ',')+1;
 809091c:	212c      	movs	r1, #44	; 0x2c
 809091e:	4628      	mov	r0, r5
 8090920:	f003 fb5b 	bl	8093fda <strchr>
 8090924:	1c45      	adds	r5, r0, #1
    float timef = atof(p);
 8090926:	4628      	mov	r0, r5
 8090928:	f003 f9e8 	bl	8093cfc <atof>
 809092c:	f002 fd26 	bl	809337c <__aeabi_d2f>
 8090930:	4606      	mov	r6, r0
    uint32_t time = timef;
 8090932:	f002 fff7 	bl	8093924 <__aeabi_f2uiz>
    hour = time / 10000;
 8090936:	f242 7210 	movw	r2, #10000	; 0x2710
 809093a:	fbb0 f3f2 	udiv	r3, r0, r2
 809093e:	7023      	strb	r3, [r4, #0]
    minute = (time % 10000) / 100;
 8090940:	fb02 0313 	mls	r3, r2, r3, r0
 8090944:	2264      	movs	r2, #100	; 0x64
 8090946:	fbb3 f3f2 	udiv	r3, r3, r2
 809094a:	7063      	strb	r3, [r4, #1]
    seconds = (time % 100);
 809094c:	fbb0 f3f2 	udiv	r3, r0, r2
 8090950:	fb02 0013 	mls	r0, r2, r3, r0
 8090954:	70a0      	strb	r0, [r4, #2]

    milliseconds = fmod(timef, 1.0) * 1000;
 8090956:	4630      	mov	r0, r6
 8090958:	f002 f9c4 	bl	8092ce4 <__aeabi_f2d>
 809095c:	2200      	movs	r2, #0
 809095e:	4ba2      	ldr	r3, [pc, #648]	; (8090be8 <_ZN12Adafruit_GPS5parseEPc+0x62c>)
 8090960:	f001 feda 	bl	8092718 <fmod>
 8090964:	4ba1      	ldr	r3, [pc, #644]	; (8090bec <_ZN12Adafruit_GPS5parseEPc+0x630>)
 8090966:	2200      	movs	r2, #0
 8090968:	f002 fa10 	bl	8092d8c <__aeabi_dmul>
 809096c:	f002 fce6 	bl	809333c <__aeabi_d2uiz>

    p = strchr(p, ',')+1;
 8090970:	212c      	movs	r1, #44	; 0x2c
    uint32_t time = timef;
    hour = time / 10000;
    minute = (time % 10000) / 100;
    seconds = (time % 100);

    milliseconds = fmod(timef, 1.0) * 1000;
 8090972:	80e0      	strh	r0, [r4, #6]

    p = strchr(p, ',')+1;
 8090974:	4628      	mov	r0, r5
 8090976:	f003 fb30 	bl	8093fda <strchr>
    // Serial.println(p);
    if (p[0] == 'A')
 809097a:	7843      	ldrb	r3, [r0, #1]
 809097c:	2b41      	cmp	r3, #65	; 0x41
 809097e:	d101      	bne.n	8090984 <_ZN12Adafruit_GPS5parseEPc+0x3c8>
      fix = true;
 8090980:	2301      	movs	r3, #1
 8090982:	e003      	b.n	809098c <_ZN12Adafruit_GPS5parseEPc+0x3d0>
    else if (p[0] == 'V')
 8090984:	2b56      	cmp	r3, #86	; 0x56
 8090986:	f47f ae3c 	bne.w	8090602 <_ZN12Adafruit_GPS5parseEPc+0x46>
      fix = false;
 809098a:	2300      	movs	r3, #0
 809098c:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
    else
      return false;

    // parse out latitude
    p = strchr(p, ',')+1;
 8090990:	212c      	movs	r1, #44	; 0x2c
 8090992:	3001      	adds	r0, #1
 8090994:	f003 fb21 	bl	8093fda <strchr>
    if (',' != *p)
 8090998:	7843      	ldrb	r3, [r0, #1]
      fix = false;
    else
      return false;

    // parse out latitude
    p = strchr(p, ',')+1;
 809099a:	4605      	mov	r5, r0
    if (',' != *p)
 809099c:	2b2c      	cmp	r3, #44	; 0x2c
      fix = false;
    else
      return false;

    // parse out latitude
    p = strchr(p, ',')+1;
 809099e:	f100 0601 	add.w	r6, r0, #1
    if (',' != *p)
 80909a2:	d052      	beq.n	8090a4a <_ZN12Adafruit_GPS5parseEPc+0x48e>
    {
      strncpy(degreebuff, p, 2);
 80909a4:	4631      	mov	r1, r6
 80909a6:	2202      	movs	r2, #2
 80909a8:	a801      	add	r0, sp, #4
 80909aa:	f003 fb53 	bl	8094054 <strncpy>
      p += 2;
      degreebuff[2] = '\0';
 80909ae:	f04f 0900 	mov.w	r9, #0
 80909b2:	f10d 0810 	add.w	r8, sp, #16
      long degree = atol(degreebuff) * 10000000;
 80909b6:	a801      	add	r0, sp, #4
    p = strchr(p, ',')+1;
    if (',' != *p)
    {
      strncpy(degreebuff, p, 2);
      p += 2;
      degreebuff[2] = '\0';
 80909b8:	f808 9d0a 	strb.w	r9, [r8, #-10]!
      long degree = atol(degreebuff) * 10000000;
 80909bc:	f003 f9a5 	bl	8093d0a <atol>
 80909c0:	4f8b      	ldr	r7, [pc, #556]	; (8090bf0 <_ZN12Adafruit_GPS5parseEPc+0x634>)
      strncpy(degreebuff, p, 2); // minutes
 80909c2:	1ce9      	adds	r1, r5, #3
    if (',' != *p)
    {
      strncpy(degreebuff, p, 2);
      p += 2;
      degreebuff[2] = '\0';
      long degree = atol(degreebuff) * 10000000;
 80909c4:	4347      	muls	r7, r0
      strncpy(degreebuff, p, 2); // minutes
 80909c6:	2202      	movs	r2, #2
      p += 3; // skip decimal point
 80909c8:	1dae      	adds	r6, r5, #6
    {
      strncpy(degreebuff, p, 2);
      p += 2;
      degreebuff[2] = '\0';
      long degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
 80909ca:	a801      	add	r0, sp, #4
 80909cc:	f003 fb42 	bl	8094054 <strncpy>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
 80909d0:	2204      	movs	r2, #4
 80909d2:	4631      	mov	r1, r6
 80909d4:	4640      	mov	r0, r8
 80909d6:	f003 fb3d 	bl	8094054 <strncpy>
      degreebuff[6] = '\0';
      long minutes = 50 * atol(degreebuff) / 3;
 80909da:	a801      	add	r0, sp, #4
      degreebuff[2] = '\0';
      long degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
 80909dc:	f88d 900a 	strb.w	r9, [sp, #10]
      long minutes = 50 * atol(degreebuff) / 3;
 80909e0:	f003 f993 	bl	8093d0a <atol>
 80909e4:	2532      	movs	r5, #50	; 0x32
 80909e6:	4345      	muls	r5, r0
 80909e8:	2003      	movs	r0, #3
 80909ea:	fb95 f5f0 	sdiv	r5, r5, r0
      latitude_fixed = degree + minutes;
      latitude = degree / 100000 + minutes * 0.000006F;
 80909ee:	4881      	ldr	r0, [pc, #516]	; (8090bf4 <_ZN12Adafruit_GPS5parseEPc+0x638>)
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      long minutes = 50 * atol(degreebuff) / 3;
      latitude_fixed = degree + minutes;
 80909f0:	197b      	adds	r3, r7, r5
 80909f2:	6123      	str	r3, [r4, #16]
      latitude = degree / 100000 + minutes * 0.000006F;
 80909f4:	fb97 f0f0 	sdiv	r0, r7, r0
 80909f8:	f002 fdca 	bl	8093590 <__aeabi_i2f>
 80909fc:	4607      	mov	r7, r0
 80909fe:	4628      	mov	r0, r5
 8090a00:	f002 fdc6 	bl	8093590 <__aeabi_i2f>
 8090a04:	497c      	ldr	r1, [pc, #496]	; (8090bf8 <_ZN12Adafruit_GPS5parseEPc+0x63c>)
 8090a06:	f002 fe17 	bl	8093638 <__aeabi_fmul>
 8090a0a:	4601      	mov	r1, r0
 8090a0c:	4638      	mov	r0, r7
 8090a0e:	f002 fd0b 	bl	8093428 <__addsf3>
      latitudeDegrees = (latitude-100*int(latitude/100))/60.0;
 8090a12:	497a      	ldr	r1, [pc, #488]	; (8090bfc <_ZN12Adafruit_GPS5parseEPc+0x640>)
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      long minutes = 50 * atol(degreebuff) / 3;
      latitude_fixed = degree + minutes;
      latitude = degree / 100000 + minutes * 0.000006F;
 8090a14:	60a0      	str	r0, [r4, #8]
 8090a16:	4607      	mov	r7, r0
      latitudeDegrees = (latitude-100*int(latitude/100))/60.0;
 8090a18:	f002 fec2 	bl	80937a0 <__aeabi_fdiv>
 8090a1c:	f002 ff5c 	bl	80938d8 <__aeabi_f2iz>
 8090a20:	4605      	mov	r5, r0
      latitudeDegrees += int(latitude/100);
 8090a22:	2064      	movs	r0, #100	; 0x64
 8090a24:	4368      	muls	r0, r5
 8090a26:	f002 fdb3 	bl	8093590 <__aeabi_i2f>
 8090a2a:	4601      	mov	r1, r0
 8090a2c:	4638      	mov	r0, r7
 8090a2e:	f002 fcf9 	bl	8093424 <__aeabi_fsub>
 8090a32:	4973      	ldr	r1, [pc, #460]	; (8090c00 <_ZN12Adafruit_GPS5parseEPc+0x644>)
 8090a34:	f002 feb4 	bl	80937a0 <__aeabi_fdiv>
 8090a38:	4607      	mov	r7, r0
 8090a3a:	4628      	mov	r0, r5
 8090a3c:	f002 fda8 	bl	8093590 <__aeabi_i2f>
 8090a40:	4601      	mov	r1, r0
 8090a42:	4638      	mov	r0, r7
 8090a44:	f002 fcf0 	bl	8093428 <__addsf3>
 8090a48:	61a0      	str	r0, [r4, #24]
    }

    p = strchr(p, ',')+1;
 8090a4a:	212c      	movs	r1, #44	; 0x2c
 8090a4c:	4630      	mov	r0, r6
 8090a4e:	f003 fac4 	bl	8093fda <strchr>
 8090a52:	4603      	mov	r3, r0
    if (',' != *p)
 8090a54:	785a      	ldrb	r2, [r3, #1]
      latitude = degree / 100000 + minutes * 0.000006F;
      latitudeDegrees = (latitude-100*int(latitude/100))/60.0;
      latitudeDegrees += int(latitude/100);
    }

    p = strchr(p, ',')+1;
 8090a56:	3001      	adds	r0, #1
    if (',' != *p)
 8090a58:	2a2c      	cmp	r2, #44	; 0x2c
 8090a5a:	d010      	beq.n	8090a7e <_ZN12Adafruit_GPS5parseEPc+0x4c2>
    {
      if (p[0] == 'S') latitudeDegrees *= -1.0;
 8090a5c:	2a53      	cmp	r2, #83	; 0x53
 8090a5e:	bf02      	ittt	eq
 8090a60:	69a2      	ldreq	r2, [r4, #24]
 8090a62:	f102 4200 	addeq.w	r2, r2, #2147483648	; 0x80000000
 8090a66:	61a2      	streq	r2, [r4, #24]
      if (p[0] == 'N') lat = 'N';
 8090a68:	785b      	ldrb	r3, [r3, #1]
 8090a6a:	2b4e      	cmp	r3, #78	; 0x4e
 8090a6c:	d005      	beq.n	8090a7a <_ZN12Adafruit_GPS5parseEPc+0x4be>
      else if (p[0] == 'S') lat = 'S';
 8090a6e:	2b53      	cmp	r3, #83	; 0x53
 8090a70:	d003      	beq.n	8090a7a <_ZN12Adafruit_GPS5parseEPc+0x4be>
      else if (p[0] == ',') lat = 0;
 8090a72:	2b2c      	cmp	r3, #44	; 0x2c
 8090a74:	f47f adc5 	bne.w	8090602 <_ZN12Adafruit_GPS5parseEPc+0x46>
 8090a78:	2300      	movs	r3, #0
 8090a7a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      else return false;
    }

    // parse out longitude
    p = strchr(p, ',')+1;
 8090a7e:	212c      	movs	r1, #44	; 0x2c
 8090a80:	f003 faab 	bl	8093fda <strchr>
    if (',' != *p)
 8090a84:	7843      	ldrb	r3, [r0, #1]
      else if (p[0] == ',') lat = 0;
      else return false;
    }

    // parse out longitude
    p = strchr(p, ',')+1;
 8090a86:	4605      	mov	r5, r0
    if (',' != *p)
 8090a88:	2b2c      	cmp	r3, #44	; 0x2c
      else if (p[0] == ',') lat = 0;
      else return false;
    }

    // parse out longitude
    p = strchr(p, ',')+1;
 8090a8a:	f100 0601 	add.w	r6, r0, #1
    if (',' != *p)
 8090a8e:	d051      	beq.n	8090b34 <_ZN12Adafruit_GPS5parseEPc+0x578>
    {
      strncpy(degreebuff, p, 3);
 8090a90:	4631      	mov	r1, r6
 8090a92:	2203      	movs	r2, #3
 8090a94:	a801      	add	r0, sp, #4
 8090a96:	f003 fadd 	bl	8094054 <strncpy>
      p += 3;
      degreebuff[3] = '\0';
 8090a9a:	f04f 0800 	mov.w	r8, #0
      degree = atol(degreebuff) * 10000000;
 8090a9e:	a801      	add	r0, sp, #4
    p = strchr(p, ',')+1;
    if (',' != *p)
    {
      strncpy(degreebuff, p, 3);
      p += 3;
      degreebuff[3] = '\0';
 8090aa0:	f88d 8007 	strb.w	r8, [sp, #7]
      degree = atol(degreebuff) * 10000000;
 8090aa4:	f003 f931 	bl	8093d0a <atol>
 8090aa8:	4f51      	ldr	r7, [pc, #324]	; (8090bf0 <_ZN12Adafruit_GPS5parseEPc+0x634>)
      strncpy(degreebuff, p, 2); // minutes
 8090aaa:	1d29      	adds	r1, r5, #4
    if (',' != *p)
    {
      strncpy(degreebuff, p, 3);
      p += 3;
      degreebuff[3] = '\0';
      degree = atol(degreebuff) * 10000000;
 8090aac:	4347      	muls	r7, r0
      strncpy(degreebuff, p, 2); // minutes
 8090aae:	2202      	movs	r2, #2
      p += 3; // skip decimal point
 8090ab0:	1dee      	adds	r6, r5, #7
    {
      strncpy(degreebuff, p, 3);
      p += 3;
      degreebuff[3] = '\0';
      degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
 8090ab2:	a801      	add	r0, sp, #4
 8090ab4:	f003 face 	bl	8094054 <strncpy>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
 8090ab8:	2204      	movs	r2, #4
 8090aba:	4631      	mov	r1, r6
 8090abc:	f10d 0006 	add.w	r0, sp, #6
 8090ac0:	f003 fac8 	bl	8094054 <strncpy>
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
 8090ac4:	a801      	add	r0, sp, #4
      degreebuff[3] = '\0';
      degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
 8090ac6:	f88d 800a 	strb.w	r8, [sp, #10]
      minutes = 50 * atol(degreebuff) / 3;
 8090aca:	f003 f91e 	bl	8093d0a <atol>
 8090ace:	2532      	movs	r5, #50	; 0x32
 8090ad0:	4345      	muls	r5, r0
 8090ad2:	2003      	movs	r0, #3
 8090ad4:	fb95 f5f0 	sdiv	r5, r5, r0
      longitude_fixed = degree + minutes;
      longitude = degree / 100000 + minutes * 0.000006F;
 8090ad8:	4846      	ldr	r0, [pc, #280]	; (8090bf4 <_ZN12Adafruit_GPS5parseEPc+0x638>)
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      longitude_fixed = degree + minutes;
 8090ada:	197b      	adds	r3, r7, r5
 8090adc:	6163      	str	r3, [r4, #20]
      longitude = degree / 100000 + minutes * 0.000006F;
 8090ade:	fb97 f0f0 	sdiv	r0, r7, r0
 8090ae2:	f002 fd55 	bl	8093590 <__aeabi_i2f>
 8090ae6:	4607      	mov	r7, r0
 8090ae8:	4628      	mov	r0, r5
 8090aea:	f002 fd51 	bl	8093590 <__aeabi_i2f>
 8090aee:	4942      	ldr	r1, [pc, #264]	; (8090bf8 <_ZN12Adafruit_GPS5parseEPc+0x63c>)
 8090af0:	f002 fda2 	bl	8093638 <__aeabi_fmul>
 8090af4:	4601      	mov	r1, r0
 8090af6:	4638      	mov	r0, r7
 8090af8:	f002 fc96 	bl	8093428 <__addsf3>
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
 8090afc:	493f      	ldr	r1, [pc, #252]	; (8090bfc <_ZN12Adafruit_GPS5parseEPc+0x640>)
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      longitude_fixed = degree + minutes;
      longitude = degree / 100000 + minutes * 0.000006F;
 8090afe:	60e0      	str	r0, [r4, #12]
 8090b00:	4607      	mov	r7, r0
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
 8090b02:	f002 fe4d 	bl	80937a0 <__aeabi_fdiv>
 8090b06:	f002 fee7 	bl	80938d8 <__aeabi_f2iz>
 8090b0a:	4605      	mov	r5, r0
      longitudeDegrees += int(longitude/100);
 8090b0c:	2064      	movs	r0, #100	; 0x64
 8090b0e:	4368      	muls	r0, r5
 8090b10:	f002 fd3e 	bl	8093590 <__aeabi_i2f>
 8090b14:	4601      	mov	r1, r0
 8090b16:	4638      	mov	r0, r7
 8090b18:	f002 fc84 	bl	8093424 <__aeabi_fsub>
 8090b1c:	4938      	ldr	r1, [pc, #224]	; (8090c00 <_ZN12Adafruit_GPS5parseEPc+0x644>)
 8090b1e:	f002 fe3f 	bl	80937a0 <__aeabi_fdiv>
 8090b22:	4607      	mov	r7, r0
 8090b24:	4628      	mov	r0, r5
 8090b26:	f002 fd33 	bl	8093590 <__aeabi_i2f>
 8090b2a:	4601      	mov	r1, r0
 8090b2c:	4638      	mov	r0, r7
 8090b2e:	f002 fc7b 	bl	8093428 <__addsf3>
 8090b32:	61e0      	str	r0, [r4, #28]
    }

    p = strchr(p, ',')+1;
 8090b34:	212c      	movs	r1, #44	; 0x2c
 8090b36:	4630      	mov	r0, r6
 8090b38:	f003 fa4f 	bl	8093fda <strchr>
 8090b3c:	4603      	mov	r3, r0
    if (',' != *p)
 8090b3e:	785a      	ldrb	r2, [r3, #1]
      longitude = degree / 100000 + minutes * 0.000006F;
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
      longitudeDegrees += int(longitude/100);
    }

    p = strchr(p, ',')+1;
 8090b40:	3001      	adds	r0, #1
    if (',' != *p)
 8090b42:	2a2c      	cmp	r2, #44	; 0x2c
 8090b44:	d010      	beq.n	8090b68 <_ZN12Adafruit_GPS5parseEPc+0x5ac>
    {
      if (p[0] == 'W') longitudeDegrees *= -1.0;
 8090b46:	2a57      	cmp	r2, #87	; 0x57
 8090b48:	bf02      	ittt	eq
 8090b4a:	69e2      	ldreq	r2, [r4, #28]
 8090b4c:	f102 4200 	addeq.w	r2, r2, #2147483648	; 0x80000000
 8090b50:	61e2      	streq	r2, [r4, #28]
      if (p[0] == 'W') lon = 'W';
 8090b52:	785b      	ldrb	r3, [r3, #1]
 8090b54:	2b57      	cmp	r3, #87	; 0x57
 8090b56:	d005      	beq.n	8090b64 <_ZN12Adafruit_GPS5parseEPc+0x5a8>
      else if (p[0] == 'E') lon = 'E';
 8090b58:	2b45      	cmp	r3, #69	; 0x45
 8090b5a:	d003      	beq.n	8090b64 <_ZN12Adafruit_GPS5parseEPc+0x5a8>
      else if (p[0] == ',') lon = 0;
 8090b5c:	2b2c      	cmp	r3, #44	; 0x2c
 8090b5e:	f47f ad50 	bne.w	8090602 <_ZN12Adafruit_GPS5parseEPc+0x46>
 8090b62:	2300      	movs	r3, #0
 8090b64:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      else return false;
    }
    // speed
    p = strchr(p, ',')+1;
 8090b68:	212c      	movs	r1, #44	; 0x2c
 8090b6a:	f003 fa36 	bl	8093fda <strchr>
    if (',' != *p)
 8090b6e:	7843      	ldrb	r3, [r0, #1]
      else if (p[0] == 'E') lon = 'E';
      else if (p[0] == ',') lon = 0;
      else return false;
    }
    // speed
    p = strchr(p, ',')+1;
 8090b70:	1c45      	adds	r5, r0, #1
    if (',' != *p)
 8090b72:	2b2c      	cmp	r3, #44	; 0x2c
 8090b74:	d005      	beq.n	8090b82 <_ZN12Adafruit_GPS5parseEPc+0x5c6>
    {
      speed = atof(p);
 8090b76:	4628      	mov	r0, r5
 8090b78:	f003 f8c0 	bl	8093cfc <atof>
 8090b7c:	f002 fbfe 	bl	809337c <__aeabi_d2f>
 8090b80:	62a0      	str	r0, [r4, #40]	; 0x28
    }

    // angle
    p = strchr(p, ',')+1;
 8090b82:	4628      	mov	r0, r5
 8090b84:	212c      	movs	r1, #44	; 0x2c
 8090b86:	f003 fa28 	bl	8093fda <strchr>
    if (',' != *p)
 8090b8a:	7843      	ldrb	r3, [r0, #1]
    {
      speed = atof(p);
    }

    // angle
    p = strchr(p, ',')+1;
 8090b8c:	1c45      	adds	r5, r0, #1
    if (',' != *p)
 8090b8e:	2b2c      	cmp	r3, #44	; 0x2c
 8090b90:	d005      	beq.n	8090b9e <_ZN12Adafruit_GPS5parseEPc+0x5e2>
    {
      angle = atof(p);
 8090b92:	4628      	mov	r0, r5
 8090b94:	f003 f8b2 	bl	8093cfc <atof>
 8090b98:	f002 fbf0 	bl	809337c <__aeabi_d2f>
 8090b9c:	62e0      	str	r0, [r4, #44]	; 0x2c
    }

    p = strchr(p, ',')+1;
 8090b9e:	212c      	movs	r1, #44	; 0x2c
 8090ba0:	4628      	mov	r0, r5
 8090ba2:	f003 fa1a 	bl	8093fda <strchr>
    if (',' != *p)
 8090ba6:	7843      	ldrb	r3, [r0, #1]
 8090ba8:	2b2c      	cmp	r3, #44	; 0x2c
 8090baa:	d014      	beq.n	8090bd6 <_ZN12Adafruit_GPS5parseEPc+0x61a>
    {
      uint32_t fulldate = atof(p);
 8090bac:	3001      	adds	r0, #1
 8090bae:	f003 f8a5 	bl	8093cfc <atof>
 8090bb2:	f002 fbc3 	bl	809333c <__aeabi_d2uiz>
      day = fulldate / 10000;
 8090bb6:	f242 7210 	movw	r2, #10000	; 0x2710
 8090bba:	fbb0 f3f2 	udiv	r3, r0, r2
 8090bbe:	7163      	strb	r3, [r4, #5]
      month = (fulldate % 10000) / 100;
 8090bc0:	fb02 0313 	mls	r3, r2, r3, r0
 8090bc4:	2264      	movs	r2, #100	; 0x64
 8090bc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8090bca:	7123      	strb	r3, [r4, #4]
      year = (fulldate % 100);
 8090bcc:	fbb0 f3f2 	udiv	r3, r0, r2
 8090bd0:	fb02 0013 	mls	r0, r2, r3, r0
 8090bd4:	70e0      	strb	r0, [r4, #3]
    }
    // we dont parse the remaining, yet!
    return true;
 8090bd6:	2001      	movs	r0, #1
  }

  return false;
}
 8090bd8:	b004      	add	sp, #16
 8090bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8090bde:	bf00      	nop
 8090be0:	08099ab7 	.word	0x08099ab7
 8090be4:	08099abe 	.word	0x08099abe
 8090be8:	3ff00000 	.word	0x3ff00000
 8090bec:	408f4000 	.word	0x408f4000
 8090bf0:	00989680 	.word	0x00989680
 8090bf4:	000186a0 	.word	0x000186a0
 8090bf8:	36c9539c 	.word	0x36c9539c
 8090bfc:	42c80000 	.word	0x42c80000
 8090c00:	42700000 	.word	0x42700000

08090c04 <_GLOBAL__sub_I_line1>:
 8090c04:	f000 b800 	b.w	8090c08 <HAL_Pin_Map>

08090c08 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 8090c08:	b508      	push	{r3, lr}
 8090c0a:	4b02      	ldr	r3, [pc, #8]	; (8090c14 <HAL_Pin_Map+0xc>)
 8090c0c:	681b      	ldr	r3, [r3, #0]
 8090c0e:	681b      	ldr	r3, [r3, #0]
 8090c10:	9301      	str	r3, [sp, #4]
 8090c12:	bd08      	pop	{r3, pc}
 8090c14:	080401b0 	.word	0x080401b0

08090c18 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8090c18:	b508      	push	{r3, lr}
 8090c1a:	4b02      	ldr	r3, [pc, #8]	; (8090c24 <HAL_Pin_Mode+0xc>)
 8090c1c:	681b      	ldr	r3, [r3, #0]
 8090c1e:	689b      	ldr	r3, [r3, #8]
 8090c20:	9301      	str	r3, [sp, #4]
 8090c22:	bd08      	pop	{r3, pc}
 8090c24:	080401b0 	.word	0x080401b0

08090c28 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8090c28:	b508      	push	{r3, lr}
 8090c2a:	4b02      	ldr	r3, [pc, #8]	; (8090c34 <HAL_Get_Pin_Mode+0xc>)
 8090c2c:	681b      	ldr	r3, [r3, #0]
 8090c2e:	68db      	ldr	r3, [r3, #12]
 8090c30:	9301      	str	r3, [sp, #4]
 8090c32:	bd08      	pop	{r3, pc}
 8090c34:	080401b0 	.word	0x080401b0

08090c38 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8090c38:	b508      	push	{r3, lr}
 8090c3a:	4b02      	ldr	r3, [pc, #8]	; (8090c44 <HAL_GPIO_Write+0xc>)
 8090c3c:	681b      	ldr	r3, [r3, #0]
 8090c3e:	691b      	ldr	r3, [r3, #16]
 8090c40:	9301      	str	r3, [sp, #4]
 8090c42:	bd08      	pop	{r3, pc}
 8090c44:	080401b0 	.word	0x080401b0

08090c48 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 8090c48:	b508      	push	{r3, lr}
 8090c4a:	4b02      	ldr	r3, [pc, #8]	; (8090c54 <HAL_SPI_Begin+0xc>)
 8090c4c:	681b      	ldr	r3, [r3, #0]
 8090c4e:	681b      	ldr	r3, [r3, #0]
 8090c50:	9301      	str	r3, [sp, #4]
 8090c52:	bd08      	pop	{r3, pc}
 8090c54:	080401b4 	.word	0x080401b4

08090c58 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 8090c58:	b508      	push	{r3, lr}
 8090c5a:	4b02      	ldr	r3, [pc, #8]	; (8090c64 <HAL_SPI_Set_Bit_Order+0xc>)
 8090c5c:	681b      	ldr	r3, [r3, #0]
 8090c5e:	689b      	ldr	r3, [r3, #8]
 8090c60:	9301      	str	r3, [sp, #4]
 8090c62:	bd08      	pop	{r3, pc}
 8090c64:	080401b4 	.word	0x080401b4

08090c68 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 8090c68:	b508      	push	{r3, lr}
 8090c6a:	4b02      	ldr	r3, [pc, #8]	; (8090c74 <HAL_SPI_Set_Data_Mode+0xc>)
 8090c6c:	681b      	ldr	r3, [r3, #0]
 8090c6e:	68db      	ldr	r3, [r3, #12]
 8090c70:	9301      	str	r3, [sp, #4]
 8090c72:	bd08      	pop	{r3, pc}
 8090c74:	080401b4 	.word	0x080401b4

08090c78 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 8090c78:	b508      	push	{r3, lr}
 8090c7a:	4b02      	ldr	r3, [pc, #8]	; (8090c84 <HAL_SPI_Set_Clock_Divider+0xc>)
 8090c7c:	681b      	ldr	r3, [r3, #0]
 8090c7e:	691b      	ldr	r3, [r3, #16]
 8090c80:	9301      	str	r3, [sp, #4]
 8090c82:	bd08      	pop	{r3, pc}
 8090c84:	080401b4 	.word	0x080401b4

08090c88 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 8090c88:	b508      	push	{r3, lr}
 8090c8a:	4b02      	ldr	r3, [pc, #8]	; (8090c94 <HAL_SPI_Send_Receive_Data+0xc>)
 8090c8c:	681b      	ldr	r3, [r3, #0]
 8090c8e:	695b      	ldr	r3, [r3, #20]
 8090c90:	9301      	str	r3, [sp, #4]
 8090c92:	bd08      	pop	{r3, pc}
 8090c94:	080401b4 	.word	0x080401b4

08090c98 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 8090c98:	b508      	push	{r3, lr}
 8090c9a:	4b02      	ldr	r3, [pc, #8]	; (8090ca4 <HAL_SPI_Init+0xc>)
 8090c9c:	681b      	ldr	r3, [r3, #0]
 8090c9e:	69db      	ldr	r3, [r3, #28]
 8090ca0:	9301      	str	r3, [sp, #4]
 8090ca2:	bd08      	pop	{r3, pc}
 8090ca4:	080401b4 	.word	0x080401b4

08090ca8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 8090ca8:	b508      	push	{r3, lr}
 8090caa:	4b02      	ldr	r3, [pc, #8]	; (8090cb4 <HAL_SPI_Is_Enabled+0xc>)
 8090cac:	681b      	ldr	r3, [r3, #0]
 8090cae:	6a1b      	ldr	r3, [r3, #32]
 8090cb0:	9301      	str	r3, [sp, #4]
 8090cb2:	bd08      	pop	{r3, pc}
 8090cb4:	080401b4 	.word	0x080401b4

08090cb8 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 8090cb8:	b508      	push	{r3, lr}
 8090cba:	4b02      	ldr	r3, [pc, #8]	; (8090cc4 <HAL_SPI_Info+0xc>)
 8090cbc:	681b      	ldr	r3, [r3, #0]
 8090cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8090cc0:	9301      	str	r3, [sp, #4]
 8090cc2:	bd08      	pop	{r3, pc}
 8090cc4:	080401b4 	.word	0x080401b4

08090cc8 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
 8090cc8:	b508      	push	{r3, lr}
 8090cca:	4b02      	ldr	r3, [pc, #8]	; (8090cd4 <HAL_SPI_DMA_Transfer+0xc>)
 8090ccc:	681b      	ldr	r3, [r3, #0]
 8090cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8090cd0:	9301      	str	r3, [sp, #4]
 8090cd2:	bd08      	pop	{r3, pc}
 8090cd4:	080401b4 	.word	0x080401b4

08090cd8 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
 8090cd8:	b508      	push	{r3, lr}
 8090cda:	4b02      	ldr	r3, [pc, #8]	; (8090ce4 <HAL_SPI_DMA_Transfer_Status+0xc>)
 8090cdc:	681b      	ldr	r3, [r3, #0]
 8090cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8090ce0:	9301      	str	r3, [sp, #4]
 8090ce2:	bd08      	pop	{r3, pc}
 8090ce4:	080401b4 	.word	0x080401b4

08090ce8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8090ce8:	b508      	push	{r3, lr}
 8090cea:	4b02      	ldr	r3, [pc, #8]	; (8090cf4 <HAL_RNG_GetRandomNumber+0xc>)
 8090cec:	681b      	ldr	r3, [r3, #0]
 8090cee:	685b      	ldr	r3, [r3, #4]
 8090cf0:	9301      	str	r3, [sp, #4]
 8090cf2:	bd08      	pop	{r3, pc}
 8090cf4:	0804019c 	.word	0x0804019c

08090cf8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 8090cf8:	b508      	push	{r3, lr}
 8090cfa:	4b02      	ldr	r3, [pc, #8]	; (8090d04 <HAL_Delay_Microseconds+0xc>)
 8090cfc:	681b      	ldr	r3, [r3, #0]
 8090cfe:	68db      	ldr	r3, [r3, #12]
 8090d00:	9301      	str	r3, [sp, #4]
 8090d02:	bd08      	pop	{r3, pc}
 8090d04:	0804019c 	.word	0x0804019c

08090d08 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8090d08:	b508      	push	{r3, lr}
 8090d0a:	4b02      	ldr	r3, [pc, #8]	; (8090d14 <HAL_Timer_Get_Milli_Seconds+0xc>)
 8090d0c:	681b      	ldr	r3, [r3, #0]
 8090d0e:	695b      	ldr	r3, [r3, #20]
 8090d10:	9301      	str	r3, [sp, #4]
 8090d12:	bd08      	pop	{r3, pc}
 8090d14:	0804019c 	.word	0x0804019c

08090d18 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 8090d18:	b508      	push	{r3, lr}
 8090d1a:	4b02      	ldr	r3, [pc, #8]	; (8090d24 <HAL_RTC_Get_UnixTime+0xc>)
 8090d1c:	681b      	ldr	r3, [r3, #0]
 8090d1e:	69db      	ldr	r3, [r3, #28]
 8090d20:	9301      	str	r3, [sp, #4]
 8090d22:	bd08      	pop	{r3, pc}
 8090d24:	0804019c 	.word	0x0804019c

08090d28 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 8090d28:	b508      	push	{r3, lr}
 8090d2a:	4b02      	ldr	r3, [pc, #8]	; (8090d34 <HAL_RTC_Time_Is_Valid+0xc>)
 8090d2c:	681b      	ldr	r3, [r3, #0]
 8090d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8090d30:	9301      	str	r3, [sp, #4]
 8090d32:	bd08      	pop	{r3, pc}
 8090d34:	0804019c 	.word	0x0804019c

08090d38 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
 8090d38:	b508      	push	{r3, lr}
 8090d3a:	4b02      	ldr	r3, [pc, #8]	; (8090d44 <os_thread_create+0xc>)
 8090d3c:	681b      	ldr	r3, [r3, #0]
 8090d3e:	685b      	ldr	r3, [r3, #4]
 8090d40:	9301      	str	r3, [sp, #4]
 8090d42:	bd08      	pop	{r3, pc}
 8090d44:	080401d0 	.word	0x080401d0

08090d48 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
 8090d48:	b508      	push	{r3, lr}
 8090d4a:	4b02      	ldr	r3, [pc, #8]	; (8090d54 <os_thread_is_current+0xc>)
 8090d4c:	681b      	ldr	r3, [r3, #0]
 8090d4e:	689b      	ldr	r3, [r3, #8]
 8090d50:	9301      	str	r3, [sp, #4]
 8090d52:	bd08      	pop	{r3, pc}
 8090d54:	080401d0 	.word	0x080401d0

08090d58 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
 8090d58:	b508      	push	{r3, lr}
 8090d5a:	4b02      	ldr	r3, [pc, #8]	; (8090d64 <os_thread_join+0xc>)
 8090d5c:	681b      	ldr	r3, [r3, #0]
 8090d5e:	691b      	ldr	r3, [r3, #16]
 8090d60:	9301      	str	r3, [sp, #4]
 8090d62:	bd08      	pop	{r3, pc}
 8090d64:	080401d0 	.word	0x080401d0

08090d68 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
 8090d68:	b508      	push	{r3, lr}
 8090d6a:	4b02      	ldr	r3, [pc, #8]	; (8090d74 <os_thread_cleanup+0xc>)
 8090d6c:	681b      	ldr	r3, [r3, #0]
 8090d6e:	695b      	ldr	r3, [r3, #20]
 8090d70:	9301      	str	r3, [sp, #4]
 8090d72:	bd08      	pop	{r3, pc}
 8090d74:	080401d0 	.word	0x080401d0

08090d78 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 8090d78:	b508      	push	{r3, lr}
 8090d7a:	4b02      	ldr	r3, [pc, #8]	; (8090d84 <os_mutex_create+0xc>)
 8090d7c:	681b      	ldr	r3, [r3, #0]
 8090d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8090d80:	9301      	str	r3, [sp, #4]
 8090d82:	bd08      	pop	{r3, pc}
 8090d84:	080401d0 	.word	0x080401d0

08090d88 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
 8090d88:	b508      	push	{r3, lr}
 8090d8a:	4b02      	ldr	r3, [pc, #8]	; (8090d94 <os_mutex_lock+0xc>)
 8090d8c:	681b      	ldr	r3, [r3, #0]
 8090d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8090d90:	9301      	str	r3, [sp, #4]
 8090d92:	bd08      	pop	{r3, pc}
 8090d94:	080401d0 	.word	0x080401d0

08090d98 <os_mutex_trylock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
 8090d98:	b508      	push	{r3, lr}
 8090d9a:	4b02      	ldr	r3, [pc, #8]	; (8090da4 <os_mutex_trylock+0xc>)
 8090d9c:	681b      	ldr	r3, [r3, #0]
 8090d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8090da0:	9301      	str	r3, [sp, #4]
 8090da2:	bd08      	pop	{r3, pc}
 8090da4:	080401d0 	.word	0x080401d0

08090da8 <os_mutex_unlock>:
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
 8090da8:	b508      	push	{r3, lr}
 8090daa:	4b02      	ldr	r3, [pc, #8]	; (8090db4 <os_mutex_unlock+0xc>)
 8090dac:	681b      	ldr	r3, [r3, #0]
 8090dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8090db0:	9301      	str	r3, [sp, #4]
 8090db2:	bd08      	pop	{r3, pc}
 8090db4:	080401d0 	.word	0x080401d0

08090db8 <os_mutex_recursive_lock>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 8090db8:	b508      	push	{r3, lr}
 8090dba:	4b02      	ldr	r3, [pc, #8]	; (8090dc4 <os_mutex_recursive_lock+0xc>)
 8090dbc:	681b      	ldr	r3, [r3, #0]
 8090dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8090dc0:	9301      	str	r3, [sp, #4]
 8090dc2:	bd08      	pop	{r3, pc}
 8090dc4:	080401d0 	.word	0x080401d0

08090dc8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 8090dc8:	b508      	push	{r3, lr}
 8090dca:	4b02      	ldr	r3, [pc, #8]	; (8090dd4 <os_mutex_recursive_unlock+0xc>)
 8090dcc:	681b      	ldr	r3, [r3, #0]
 8090dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8090dd0:	9301      	str	r3, [sp, #4]
 8090dd2:	bd08      	pop	{r3, pc}
 8090dd4:	080401d0 	.word	0x080401d0

08090dd8 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
 8090dd8:	b508      	push	{r3, lr}
 8090dda:	4b02      	ldr	r3, [pc, #8]	; (8090de4 <os_thread_exit+0xc>)
 8090ddc:	681b      	ldr	r3, [r3, #0]
 8090dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8090de0:	9301      	str	r3, [sp, #4]
 8090de2:	bd08      	pop	{r3, pc}
 8090de4:	080401d0 	.word	0x080401d0

08090de8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 8090de8:	b508      	push	{r3, lr}
 8090dea:	4b02      	ldr	r3, [pc, #8]	; (8090df4 <HAL_USART_Init+0xc>)
 8090dec:	681b      	ldr	r3, [r3, #0]
 8090dee:	699b      	ldr	r3, [r3, #24]
 8090df0:	9301      	str	r3, [sp, #4]
 8090df2:	bd08      	pop	{r3, pc}
 8090df4:	080401c4 	.word	0x080401c4

08090df8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 8090df8:	b508      	push	{r3, lr}
 8090dfa:	4b02      	ldr	r3, [pc, #8]	; (8090e04 <HAL_USART_Write_Data+0xc>)
 8090dfc:	681b      	ldr	r3, [r3, #0]
 8090dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8090e00:	9301      	str	r3, [sp, #4]
 8090e02:	bd08      	pop	{r3, pc}
 8090e04:	080401c4 	.word	0x080401c4

08090e08 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 8090e08:	b508      	push	{r3, lr}
 8090e0a:	4b02      	ldr	r3, [pc, #8]	; (8090e14 <HAL_USART_Available_Data+0xc>)
 8090e0c:	681b      	ldr	r3, [r3, #0]
 8090e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8090e10:	9301      	str	r3, [sp, #4]
 8090e12:	bd08      	pop	{r3, pc}
 8090e14:	080401c4 	.word	0x080401c4

08090e18 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 8090e18:	b508      	push	{r3, lr}
 8090e1a:	4b02      	ldr	r3, [pc, #8]	; (8090e24 <HAL_USART_Read_Data+0xc>)
 8090e1c:	681b      	ldr	r3, [r3, #0]
 8090e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8090e20:	9301      	str	r3, [sp, #4]
 8090e22:	bd08      	pop	{r3, pc}
 8090e24:	080401c4 	.word	0x080401c4

08090e28 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 8090e28:	b508      	push	{r3, lr}
 8090e2a:	4b02      	ldr	r3, [pc, #8]	; (8090e34 <HAL_USART_Peek_Data+0xc>)
 8090e2c:	681b      	ldr	r3, [r3, #0]
 8090e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8090e30:	9301      	str	r3, [sp, #4]
 8090e32:	bd08      	pop	{r3, pc}
 8090e34:	080401c4 	.word	0x080401c4

08090e38 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 8090e38:	b508      	push	{r3, lr}
 8090e3a:	4b02      	ldr	r3, [pc, #8]	; (8090e44 <HAL_USART_Flush_Data+0xc>)
 8090e3c:	681b      	ldr	r3, [r3, #0]
 8090e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8090e40:	9301      	str	r3, [sp, #4]
 8090e42:	bd08      	pop	{r3, pc}
 8090e44:	080401c4 	.word	0x080401c4

08090e48 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 8090e48:	b508      	push	{r3, lr}
 8090e4a:	4b02      	ldr	r3, [pc, #8]	; (8090e54 <HAL_USART_Is_Enabled+0xc>)
 8090e4c:	681b      	ldr	r3, [r3, #0]
 8090e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8090e50:	9301      	str	r3, [sp, #4]
 8090e52:	bd08      	pop	{r3, pc}
 8090e54:	080401c4 	.word	0x080401c4

08090e58 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 8090e58:	b508      	push	{r3, lr}
 8090e5a:	4b02      	ldr	r3, [pc, #8]	; (8090e64 <HAL_USART_Available_Data_For_Write+0xc>)
 8090e5c:	681b      	ldr	r3, [r3, #0]
 8090e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8090e60:	9301      	str	r3, [sp, #4]
 8090e62:	bd08      	pop	{r3, pc}
 8090e64:	080401c4 	.word	0x080401c4

08090e68 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 8090e68:	b508      	push	{r3, lr}
 8090e6a:	4b02      	ldr	r3, [pc, #8]	; (8090e74 <HAL_USART_BeginConfig+0xc>)
 8090e6c:	681b      	ldr	r3, [r3, #0]
 8090e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8090e70:	9301      	str	r3, [sp, #4]
 8090e72:	bd08      	pop	{r3, pc}
 8090e74:	080401c4 	.word	0x080401c4

08090e78 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 8090e78:	b508      	push	{r3, lr}
 8090e7a:	4b02      	ldr	r3, [pc, #8]	; (8090e84 <HAL_I2C_Begin+0xc>)
 8090e7c:	681b      	ldr	r3, [r3, #0]
 8090e7e:	68db      	ldr	r3, [r3, #12]
 8090e80:	9301      	str	r3, [sp, #4]
 8090e82:	bd08      	pop	{r3, pc}
 8090e84:	080401ac 	.word	0x080401ac

08090e88 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 8090e88:	b508      	push	{r3, lr}
 8090e8a:	4b02      	ldr	r3, [pc, #8]	; (8090e94 <HAL_I2C_Request_Data+0xc>)
 8090e8c:	681b      	ldr	r3, [r3, #0]
 8090e8e:	695b      	ldr	r3, [r3, #20]
 8090e90:	9301      	str	r3, [sp, #4]
 8090e92:	bd08      	pop	{r3, pc}
 8090e94:	080401ac 	.word	0x080401ac

08090e98 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 8090e98:	b508      	push	{r3, lr}
 8090e9a:	4b02      	ldr	r3, [pc, #8]	; (8090ea4 <HAL_I2C_Begin_Transmission+0xc>)
 8090e9c:	681b      	ldr	r3, [r3, #0]
 8090e9e:	699b      	ldr	r3, [r3, #24]
 8090ea0:	9301      	str	r3, [sp, #4]
 8090ea2:	bd08      	pop	{r3, pc}
 8090ea4:	080401ac 	.word	0x080401ac

08090ea8 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 8090ea8:	b508      	push	{r3, lr}
 8090eaa:	4b02      	ldr	r3, [pc, #8]	; (8090eb4 <HAL_I2C_End_Transmission+0xc>)
 8090eac:	681b      	ldr	r3, [r3, #0]
 8090eae:	69db      	ldr	r3, [r3, #28]
 8090eb0:	9301      	str	r3, [sp, #4]
 8090eb2:	bd08      	pop	{r3, pc}
 8090eb4:	080401ac 	.word	0x080401ac

08090eb8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 8090eb8:	b508      	push	{r3, lr}
 8090eba:	4b02      	ldr	r3, [pc, #8]	; (8090ec4 <HAL_I2C_Write_Data+0xc>)
 8090ebc:	681b      	ldr	r3, [r3, #0]
 8090ebe:	6a1b      	ldr	r3, [r3, #32]
 8090ec0:	9301      	str	r3, [sp, #4]
 8090ec2:	bd08      	pop	{r3, pc}
 8090ec4:	080401ac 	.word	0x080401ac

08090ec8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 8090ec8:	b508      	push	{r3, lr}
 8090eca:	4b02      	ldr	r3, [pc, #8]	; (8090ed4 <HAL_I2C_Available_Data+0xc>)
 8090ecc:	681b      	ldr	r3, [r3, #0]
 8090ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8090ed0:	9301      	str	r3, [sp, #4]
 8090ed2:	bd08      	pop	{r3, pc}
 8090ed4:	080401ac 	.word	0x080401ac

08090ed8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 8090ed8:	b508      	push	{r3, lr}
 8090eda:	4b02      	ldr	r3, [pc, #8]	; (8090ee4 <HAL_I2C_Read_Data+0xc>)
 8090edc:	681b      	ldr	r3, [r3, #0]
 8090ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8090ee0:	9301      	str	r3, [sp, #4]
 8090ee2:	bd08      	pop	{r3, pc}
 8090ee4:	080401ac 	.word	0x080401ac

08090ee8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 8090ee8:	b508      	push	{r3, lr}
 8090eea:	4b02      	ldr	r3, [pc, #8]	; (8090ef4 <HAL_I2C_Peek_Data+0xc>)
 8090eec:	681b      	ldr	r3, [r3, #0]
 8090eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8090ef0:	9301      	str	r3, [sp, #4]
 8090ef2:	bd08      	pop	{r3, pc}
 8090ef4:	080401ac 	.word	0x080401ac

08090ef8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 8090ef8:	b508      	push	{r3, lr}
 8090efa:	4b02      	ldr	r3, [pc, #8]	; (8090f04 <HAL_I2C_Flush_Data+0xc>)
 8090efc:	681b      	ldr	r3, [r3, #0]
 8090efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8090f00:	9301      	str	r3, [sp, #4]
 8090f02:	bd08      	pop	{r3, pc}
 8090f04:	080401ac 	.word	0x080401ac

08090f08 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 8090f08:	b508      	push	{r3, lr}
 8090f0a:	4b02      	ldr	r3, [pc, #8]	; (8090f14 <HAL_I2C_Is_Enabled+0xc>)
 8090f0c:	681b      	ldr	r3, [r3, #0]
 8090f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8090f10:	9301      	str	r3, [sp, #4]
 8090f12:	bd08      	pop	{r3, pc}
 8090f14:	080401ac 	.word	0x080401ac

08090f18 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 8090f18:	b508      	push	{r3, lr}
 8090f1a:	4b02      	ldr	r3, [pc, #8]	; (8090f24 <HAL_I2C_Init+0xc>)
 8090f1c:	681b      	ldr	r3, [r3, #0]
 8090f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8090f20:	9301      	str	r3, [sp, #4]
 8090f22:	bd08      	pop	{r3, pc}
 8090f24:	080401ac 	.word	0x080401ac

08090f28 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 8090f28:	b508      	push	{r3, lr}
 8090f2a:	4b02      	ldr	r3, [pc, #8]	; (8090f34 <socket_active_status+0xc>)
 8090f2c:	681b      	ldr	r3, [r3, #0]
 8090f2e:	681b      	ldr	r3, [r3, #0]
 8090f30:	9301      	str	r3, [sp, #4]
 8090f32:	bd08      	pop	{r3, pc}
 8090f34:	08060024 	.word	0x08060024

08090f38 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 8090f38:	b508      	push	{r3, lr}
 8090f3a:	4b02      	ldr	r3, [pc, #8]	; (8090f44 <socket_handle_valid+0xc>)
 8090f3c:	681b      	ldr	r3, [r3, #0]
 8090f3e:	685b      	ldr	r3, [r3, #4]
 8090f40:	9301      	str	r3, [sp, #4]
 8090f42:	bd08      	pop	{r3, pc}
 8090f44:	08060024 	.word	0x08060024

08090f48 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 8090f48:	b508      	push	{r3, lr}
 8090f4a:	4b02      	ldr	r3, [pc, #8]	; (8090f54 <socket_create+0xc>)
 8090f4c:	681b      	ldr	r3, [r3, #0]
 8090f4e:	689b      	ldr	r3, [r3, #8]
 8090f50:	9301      	str	r3, [sp, #4]
 8090f52:	bd08      	pop	{r3, pc}
 8090f54:	08060024 	.word	0x08060024

08090f58 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 8090f58:	b508      	push	{r3, lr}
 8090f5a:	4b02      	ldr	r3, [pc, #8]	; (8090f64 <socket_connect+0xc>)
 8090f5c:	681b      	ldr	r3, [r3, #0]
 8090f5e:	68db      	ldr	r3, [r3, #12]
 8090f60:	9301      	str	r3, [sp, #4]
 8090f62:	bd08      	pop	{r3, pc}
 8090f64:	08060024 	.word	0x08060024

08090f68 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 8090f68:	b508      	push	{r3, lr}
 8090f6a:	4b02      	ldr	r3, [pc, #8]	; (8090f74 <socket_receive+0xc>)
 8090f6c:	681b      	ldr	r3, [r3, #0]
 8090f6e:	691b      	ldr	r3, [r3, #16]
 8090f70:	9301      	str	r3, [sp, #4]
 8090f72:	bd08      	pop	{r3, pc}
 8090f74:	08060024 	.word	0x08060024

08090f78 <socket_send>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
 8090f78:	b508      	push	{r3, lr}
 8090f7a:	4b02      	ldr	r3, [pc, #8]	; (8090f84 <socket_send+0xc>)
 8090f7c:	681b      	ldr	r3, [r3, #0]
 8090f7e:	699b      	ldr	r3, [r3, #24]
 8090f80:	9301      	str	r3, [sp, #4]
 8090f82:	bd08      	pop	{r3, pc}
 8090f84:	08060024 	.word	0x08060024

08090f88 <socket_close>:
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 8090f88:	b508      	push	{r3, lr}
 8090f8a:	4b02      	ldr	r3, [pc, #8]	; (8090f94 <socket_close+0xc>)
 8090f8c:	681b      	ldr	r3, [r3, #0]
 8090f8e:	6a1b      	ldr	r3, [r3, #32]
 8090f90:	9301      	str	r3, [sp, #4]
 8090f92:	bd08      	pop	{r3, pc}
 8090f94:	08060024 	.word	0x08060024

08090f98 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 8090f98:	b508      	push	{r3, lr}
 8090f9a:	4b02      	ldr	r3, [pc, #8]	; (8090fa4 <socket_handle_invalid+0xc>)
 8090f9c:	681b      	ldr	r3, [r3, #0]
 8090f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8090fa0:	9301      	str	r3, [sp, #4]
 8090fa2:	bd08      	pop	{r3, pc}
 8090fa4:	08060024 	.word	0x08060024

08090fa8 <HAL_NET_SetNetWatchDog>:
DYNALIB_FN(9, hal_cellular, cellular_device_info, cellular_result_t(CellularDevice*, void*))
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 8090fa8:	b508      	push	{r3, lr}
 8090faa:	4b02      	ldr	r3, [pc, #8]	; (8090fb4 <HAL_NET_SetNetWatchDog+0xc>)
 8090fac:	681b      	ldr	r3, [r3, #0]
 8090fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8090fb0:	9301      	str	r3, [sp, #4]
 8090fb2:	bd08      	pop	{r3, pc}
 8090fb4:	08060020 	.word	0x08060020

08090fb8 <inet_gethostbyname>:
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8090fb8:	b508      	push	{r3, lr}
 8090fba:	4b02      	ldr	r3, [pc, #8]	; (8090fc4 <inet_gethostbyname+0xc>)
 8090fbc:	681b      	ldr	r3, [r3, #0]
 8090fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8090fc0:	9301      	str	r3, [sp, #4]
 8090fc2:	bd08      	pop	{r3, pc}
 8090fc4:	08060020 	.word	0x08060020

08090fc8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8090fc8:	b508      	push	{r3, lr}
 8090fca:	4b02      	ldr	r3, [pc, #8]	; (8090fd4 <HAL_USB_USART_Init+0xc>)
 8090fcc:	681b      	ldr	r3, [r3, #0]
 8090fce:	681b      	ldr	r3, [r3, #0]
 8090fd0:	9301      	str	r3, [sp, #4]
 8090fd2:	bd08      	pop	{r3, pc}
 8090fd4:	0806001c 	.word	0x0806001c

08090fd8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 8090fd8:	b508      	push	{r3, lr}
 8090fda:	4b02      	ldr	r3, [pc, #8]	; (8090fe4 <HAL_USB_USART_Begin+0xc>)
 8090fdc:	681b      	ldr	r3, [r3, #0]
 8090fde:	685b      	ldr	r3, [r3, #4]
 8090fe0:	9301      	str	r3, [sp, #4]
 8090fe2:	bd08      	pop	{r3, pc}
 8090fe4:	0806001c 	.word	0x0806001c

08090fe8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8090fe8:	b508      	push	{r3, lr}
 8090fea:	4b02      	ldr	r3, [pc, #8]	; (8090ff4 <HAL_USB_USART_Available_Data+0xc>)
 8090fec:	681b      	ldr	r3, [r3, #0]
 8090fee:	691b      	ldr	r3, [r3, #16]
 8090ff0:	9301      	str	r3, [sp, #4]
 8090ff2:	bd08      	pop	{r3, pc}
 8090ff4:	0806001c 	.word	0x0806001c

08090ff8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8090ff8:	b508      	push	{r3, lr}
 8090ffa:	4b02      	ldr	r3, [pc, #8]	; (8091004 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8090ffc:	681b      	ldr	r3, [r3, #0]
 8090ffe:	695b      	ldr	r3, [r3, #20]
 8091000:	9301      	str	r3, [sp, #4]
 8091002:	bd08      	pop	{r3, pc}
 8091004:	0806001c 	.word	0x0806001c

08091008 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8091008:	b508      	push	{r3, lr}
 809100a:	4b02      	ldr	r3, [pc, #8]	; (8091014 <HAL_USB_USART_Receive_Data+0xc>)
 809100c:	681b      	ldr	r3, [r3, #0]
 809100e:	699b      	ldr	r3, [r3, #24]
 8091010:	9301      	str	r3, [sp, #4]
 8091012:	bd08      	pop	{r3, pc}
 8091014:	0806001c 	.word	0x0806001c

08091018 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8091018:	b508      	push	{r3, lr}
 809101a:	4b02      	ldr	r3, [pc, #8]	; (8091024 <HAL_USB_USART_Send_Data+0xc>)
 809101c:	681b      	ldr	r3, [r3, #0]
 809101e:	69db      	ldr	r3, [r3, #28]
 8091020:	9301      	str	r3, [sp, #4]
 8091022:	bd08      	pop	{r3, pc}
 8091024:	0806001c 	.word	0x0806001c

08091028 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8091028:	b508      	push	{r3, lr}
 809102a:	4b02      	ldr	r3, [pc, #8]	; (8091034 <HAL_USB_USART_Flush_Data+0xc>)
 809102c:	681b      	ldr	r3, [r3, #0]
 809102e:	6a1b      	ldr	r3, [r3, #32]
 8091030:	9301      	str	r3, [sp, #4]
 8091032:	bd08      	pop	{r3, pc}
 8091034:	0806001c 	.word	0x0806001c

08091038 <LED_SetSignalingColor>:
#include "dynalib.h"

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
 8091038:	b508      	push	{r3, lr}
 809103a:	4b02      	ldr	r3, [pc, #8]	; (8091044 <LED_SetSignalingColor+0xc>)
 809103c:	681b      	ldr	r3, [r3, #0]
 809103e:	685b      	ldr	r3, [r3, #4]
 8091040:	9301      	str	r3, [sp, #4]
 8091042:	bd08      	pop	{r3, pc}
 8091044:	080201a0 	.word	0x080201a0

08091048 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
 8091048:	b508      	push	{r3, lr}
 809104a:	4b02      	ldr	r3, [pc, #8]	; (8091054 <LED_Signaling_Start+0xc>)
 809104c:	681b      	ldr	r3, [r3, #0]
 809104e:	689b      	ldr	r3, [r3, #8]
 8091050:	9301      	str	r3, [sp, #4]
 8091052:	bd08      	pop	{r3, pc}
 8091054:	080201a0 	.word	0x080201a0

08091058 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
 8091058:	b508      	push	{r3, lr}
 809105a:	4b02      	ldr	r3, [pc, #8]	; (8091064 <LED_Signaling_Stop+0xc>)
 809105c:	681b      	ldr	r3, [r3, #0]
 809105e:	68db      	ldr	r3, [r3, #12]
 8091060:	9301      	str	r3, [sp, #4]
 8091062:	bd08      	pop	{r3, pc}
 8091064:	080201a0 	.word	0x080201a0

08091068 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
 8091068:	b508      	push	{r3, lr}
 809106a:	4b02      	ldr	r3, [pc, #8]	; (8091074 <LED_RGB_IsOverRidden+0xc>)
 809106c:	681b      	ldr	r3, [r3, #0]
 809106e:	699b      	ldr	r3, [r3, #24]
 8091070:	9301      	str	r3, [sp, #4]
 8091072:	bd08      	pop	{r3, pc}
 8091074:	080201a0 	.word	0x080201a0

08091078 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
 8091078:	b508      	push	{r3, lr}
 809107a:	4b02      	ldr	r3, [pc, #8]	; (8091084 <LED_On+0xc>)
 809107c:	681b      	ldr	r3, [r3, #0]
 809107e:	69db      	ldr	r3, [r3, #28]
 8091080:	9301      	str	r3, [sp, #4]
 8091082:	bd08      	pop	{r3, pc}
 8091084:	080201a0 	.word	0x080201a0

08091088 <system_mode>:
#include "system_led_signal.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 8091088:	b508      	push	{r3, lr}
 809108a:	4b02      	ldr	r3, [pc, #8]	; (8091094 <system_mode+0xc>)
 809108c:	681b      	ldr	r3, [r3, #0]
 809108e:	681b      	ldr	r3, [r3, #0]
 8091090:	9301      	str	r3, [sp, #4]
 8091092:	bd08      	pop	{r3, pc}
 8091094:	080401a4 	.word	0x080401a4

08091098 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8091098:	b508      	push	{r3, lr}
 809109a:	4b02      	ldr	r3, [pc, #8]	; (80910a4 <set_system_mode+0xc>)
 809109c:	681b      	ldr	r3, [r3, #0]
 809109e:	685b      	ldr	r3, [r3, #4]
 80910a0:	9301      	str	r3, [sp, #4]
 80910a2:	bd08      	pop	{r3, pc}
 80910a4:	080401a4 	.word	0x080401a4

080910a8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80910a8:	b508      	push	{r3, lr}
 80910aa:	4b02      	ldr	r3, [pc, #8]	; (80910b4 <system_delay_ms+0xc>)
 80910ac:	681b      	ldr	r3, [r3, #0]
 80910ae:	695b      	ldr	r3, [r3, #20]
 80910b0:	9301      	str	r3, [sp, #4]
 80910b2:	bd08      	pop	{r3, pc}
 80910b4:	080401a4 	.word	0x080401a4

080910b8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, void(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, void(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80910b8:	b508      	push	{r3, lr}
 80910ba:	4b02      	ldr	r3, [pc, #8]	; (80910c4 <system_thread_set_state+0xc>)
 80910bc:	681b      	ldr	r3, [r3, #0]
 80910be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80910c0:	9301      	str	r3, [sp, #4]
 80910c2:	bd08      	pop	{r3, pc}
 80910c4:	080401a4 	.word	0x080401a4

080910c8 <system_internal>:
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
DYNALIB_FN(13, system, system_internal, void*(int item, void*))
 80910c8:	b508      	push	{r3, lr}
 80910ca:	4b02      	ldr	r3, [pc, #8]	; (80910d4 <system_internal+0xc>)
 80910cc:	681b      	ldr	r3, [r3, #0]
 80910ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80910d0:	9301      	str	r3, [sp, #4]
 80910d2:	bd08      	pop	{r3, pc}
 80910d4:	080401a4 	.word	0x080401a4

080910d8 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80910d8:	b508      	push	{r3, lr}
 80910da:	4b02      	ldr	r3, [pc, #8]	; (80910e4 <system_thread_get_state+0xc>)
 80910dc:	681b      	ldr	r3, [r3, #0]
 80910de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80910e0:	9301      	str	r3, [sp, #4]
 80910e2:	bd08      	pop	{r3, pc}
 80910e4:	080401a4 	.word	0x080401a4

080910e8 <system_set_usb_request_app_handler>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
DYNALIB_FN(24, system, main_thread_current, uint8_t(void*))

#ifdef USB_VENDOR_REQUEST_ENABLE
DYNALIB_FN(25, system, system_set_usb_request_app_handler, void(usb_request_app_handler_type, void*))
 80910e8:	b508      	push	{r3, lr}
 80910ea:	4b02      	ldr	r3, [pc, #8]	; (80910f4 <system_set_usb_request_app_handler+0xc>)
 80910ec:	681b      	ldr	r3, [r3, #0]
 80910ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80910f0:	9301      	str	r3, [sp, #4]
 80910f2:	bd08      	pop	{r3, pc}
 80910f4:	080401a4 	.word	0x080401a4

080910f8 <system_set_usb_request_result>:
DYNALIB_FN(26, system, system_set_usb_request_result, void(USBRequest*, int, void*))
 80910f8:	b508      	push	{r3, lr}
 80910fa:	4b02      	ldr	r3, [pc, #8]	; (8091104 <system_set_usb_request_result+0xc>)
 80910fc:	681b      	ldr	r3, [r3, #0]
 80910fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8091100:	9301      	str	r3, [sp, #4]
 8091102:	bd08      	pop	{r3, pc}
 8091104:	080401a4 	.word	0x080401a4

08091108 <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8091108:	b508      	push	{r3, lr}
 809110a:	4b02      	ldr	r3, [pc, #8]	; (8091114 <network_ready+0xc>)
 809110c:	681b      	ldr	r3, [r3, #0]
 809110e:	691b      	ldr	r3, [r3, #16]
 8091110:	9301      	str	r3, [sp, #4]
 8091112:	bd08      	pop	{r3, pc}
 8091114:	080401c8 	.word	0x080401c8

08091118 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8091118:	b508      	push	{r3, lr}
 809111a:	4b02      	ldr	r3, [pc, #8]	; (8091124 <spark_process+0xc>)
 809111c:	681b      	ldr	r3, [r3, #0]
 809111e:	689b      	ldr	r3, [r3, #8]
 8091120:	9301      	str	r3, [sp, #4]
 8091122:	bd08      	pop	{r3, pc}
 8091124:	080401cc 	.word	0x080401cc

08091128 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8091128:	b508      	push	{r3, lr}
 809112a:	4b02      	ldr	r3, [pc, #8]	; (8091134 <spark_cloud_flag_connected+0xc>)
 809112c:	681b      	ldr	r3, [r3, #0]
 809112e:	695b      	ldr	r3, [r3, #20]
 8091130:	9301      	str	r3, [sp, #4]
 8091132:	bd08      	pop	{r3, pc}
 8091134:	080401cc 	.word	0x080401cc

08091138 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8091138:	b508      	push	{r3, lr}
 809113a:	4b02      	ldr	r3, [pc, #8]	; (8091144 <spark_sync_time_pending+0xc>)
 809113c:	681b      	ldr	r3, [r3, #0]
 809113e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8091140:	9301      	str	r3, [sp, #4]
 8091142:	bd08      	pop	{r3, pc}
 8091144:	080401cc 	.word	0x080401cc

08091148 <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8091148:	b508      	push	{r3, lr}
 809114a:	4b02      	ldr	r3, [pc, #8]	; (8091154 <malloc+0xc>)
 809114c:	681b      	ldr	r3, [r3, #0]
 809114e:	681b      	ldr	r3, [r3, #0]
 8091150:	9301      	str	r3, [sp, #4]
 8091152:	bd08      	pop	{r3, pc}
 8091154:	080401a0 	.word	0x080401a0

08091158 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8091158:	b508      	push	{r3, lr}
 809115a:	4b02      	ldr	r3, [pc, #8]	; (8091164 <free+0xc>)
 809115c:	681b      	ldr	r3, [r3, #0]
 809115e:	685b      	ldr	r3, [r3, #4]
 8091160:	9301      	str	r3, [sp, #4]
 8091162:	bd08      	pop	{r3, pc}
 8091164:	080401a0 	.word	0x080401a0

08091168 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8091168:	b508      	push	{r3, lr}
 809116a:	4b02      	ldr	r3, [pc, #8]	; (8091174 <realloc+0xc>)
 809116c:	681b      	ldr	r3, [r3, #0]
 809116e:	689b      	ldr	r3, [r3, #8]
 8091170:	9301      	str	r3, [sp, #4]
 8091172:	bd08      	pop	{r3, pc}
 8091174:	080401a0 	.word	0x080401a0

08091178 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 8091178:	b508      	push	{r3, lr}
 809117a:	4b02      	ldr	r3, [pc, #8]	; (8091184 <siprintf+0xc>)
 809117c:	681b      	ldr	r3, [r3, #0]
 809117e:	691b      	ldr	r3, [r3, #16]
 8091180:	9301      	str	r3, [sp, #4]
 8091182:	bd08      	pop	{r3, pc}
 8091184:	080401a0 	.word	0x080401a0

08091188 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 8091188:	b508      	push	{r3, lr}
 809118a:	4b02      	ldr	r3, [pc, #8]	; (8091194 <siscanf+0xc>)
 809118c:	681b      	ldr	r3, [r3, #0]
 809118e:	699b      	ldr	r3, [r3, #24]
 8091190:	9301      	str	r3, [sp, #4]
 8091192:	bd08      	pop	{r3, pc}
 8091194:	080401a0 	.word	0x080401a0

08091198 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 8091198:	b508      	push	{r3, lr}
 809119a:	4b02      	ldr	r3, [pc, #8]	; (80911a4 <snprintf+0xc>)
 809119c:	681b      	ldr	r3, [r3, #0]
 809119e:	69db      	ldr	r3, [r3, #28]
 80911a0:	9301      	str	r3, [sp, #4]
 80911a2:	bd08      	pop	{r3, pc}
 80911a4:	080401a0 	.word	0x080401a0

080911a8 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80911a8:	b508      	push	{r3, lr}
 80911aa:	4b02      	ldr	r3, [pc, #8]	; (80911b4 <vsnprintf+0xc>)
 80911ac:	681b      	ldr	r3, [r3, #0]
 80911ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80911b0:	9301      	str	r3, [sp, #4]
 80911b2:	bd08      	pop	{r3, pc}
 80911b4:	080401a0 	.word	0x080401a0

080911b8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80911b8:	b508      	push	{r3, lr}
 80911ba:	4b02      	ldr	r3, [pc, #8]	; (80911c4 <abort+0xc>)
 80911bc:	681b      	ldr	r3, [r3, #0]
 80911be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80911c0:	9301      	str	r3, [sp, #4]
 80911c2:	bd08      	pop	{r3, pc}
 80911c4:	080401a0 	.word	0x080401a0

080911c8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80911c8:	b508      	push	{r3, lr}
 80911ca:	4b02      	ldr	r3, [pc, #8]	; (80911d4 <_malloc_r+0xc>)
 80911cc:	681b      	ldr	r3, [r3, #0]
 80911ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80911d0:	9301      	str	r3, [sp, #4]
 80911d2:	bd08      	pop	{r3, pc}
 80911d4:	080401a0 	.word	0x080401a0

080911d8 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80911d8:	4770      	bx	lr

080911da <_ZN8SPIClassD0Ev>:
 80911da:	b510      	push	{r4, lr}
 80911dc:	4604      	mov	r4, r0
 80911de:	f7ee ff60 	bl	80800a2 <_ZdlPv>
 80911e2:	4620      	mov	r0, r4
 80911e4:	bd10      	pop	{r4, pc}
	...

080911e8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80911e8:	b570      	push	{r4, r5, r6, lr}
 80911ea:	4604      	mov	r4, r0
 80911ec:	460e      	mov	r6, r1
 80911ee:	4b07      	ldr	r3, [pc, #28]	; (809120c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80911f0:	2500      	movs	r5, #0
 80911f2:	6003      	str	r3, [r0, #0]
 80911f4:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80911f8:	f7ff fdbe 	bl	8090d78 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80911fc:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80911fe:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 8091200:	f7ff fd4a 	bl	8090c98 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 8091204:	60a5      	str	r5, [r4, #8]
}
 8091206:	4620      	mov	r0, r4
 8091208:	bd70      	pop	{r4, r5, r6, pc}
 809120a:	bf00      	nop
 809120c:	08099b30 	.word	0x08099b30

08091210 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 8091210:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8091214:	7900      	ldrb	r0, [r0, #4]
 8091216:	f7ff bd17 	b.w	8090c48 <HAL_SPI_Begin>

0809121a <_ZN8SPIClass5beginEt>:
}

void SPIClass::begin(uint16_t ss_pin)
{
  if (ss_pin >= TOTAL_PINS)
 809121a:	292e      	cmp	r1, #46	; 0x2e
 809121c:	d802      	bhi.n	8091224 <_ZN8SPIClass5beginEt+0xa>
  {
    return;
  }

  HAL_SPI_Begin(_spi, ss_pin);
 809121e:	7900      	ldrb	r0, [r0, #4]
 8091220:	f7ff bd12 	b.w	8090c48 <HAL_SPI_Begin>
 8091224:	4770      	bx	lr

08091226 <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 8091226:	7900      	ldrb	r0, [r0, #4]
 8091228:	f7ff bd16 	b.w	8090c58 <HAL_SPI_Set_Bit_Order>

0809122c <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 809122c:	7900      	ldrb	r0, [r0, #4]
 809122e:	f7ff bd1b 	b.w	8090c68 <HAL_SPI_Set_Data_Mode>
	...

08091234 <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 8091234:	4a05      	ldr	r2, [pc, #20]	; (809124c <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
 8091236:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 8091238:	5c99      	ldrb	r1, [r3, r2]
 809123a:	4281      	cmp	r1, r0
 809123c:	d002      	beq.n	8091244 <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
 809123e:	3301      	adds	r3, #1
 8091240:	2b08      	cmp	r3, #8
 8091242:	d1f9      	bne.n	8091238 <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
 8091244:	1c58      	adds	r0, r3, #1
}
 8091246:	b2c0      	uxtb	r0, r0
 8091248:	4770      	bx	lr
 809124a:	bf00      	nop
 809124c:	08099b38 	.word	0x08099b38

08091250 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 8091250:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 8091252:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 8091254:	6018      	str	r0, [r3, #0]
 8091256:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 8091258:	6818      	ldr	r0, [r3, #0]
 809125a:	b2e5      	uxtb	r5, r4
 809125c:	4288      	cmp	r0, r1
 809125e:	d906      	bls.n	809126e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 8091260:	3401      	adds	r4, #1
 8091262:	2c08      	cmp	r4, #8
 8091264:	d002      	beq.n	809126c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 8091266:	0840      	lsrs	r0, r0, #1
 8091268:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 809126a:	e7f5      	b.n	8091258 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 809126c:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 809126e:	4b02      	ldr	r3, [pc, #8]	; (8091278 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 8091270:	5d5b      	ldrb	r3, [r3, r5]
 8091272:	7013      	strb	r3, [r2, #0]
 8091274:	bd30      	pop	{r4, r5, pc}
 8091276:	bf00      	nop
 8091278:	08099b38 	.word	0x08099b38

0809127c <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 809127c:	b570      	push	{r4, r5, r6, lr}
 809127e:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 8091280:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 8091284:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 8091286:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 8091288:	2214      	movs	r2, #20
 809128a:	2100      	movs	r1, #0
 809128c:	a803      	add	r0, sp, #12
 809128e:	f002 fe8e 	bl	8093fae <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 8091292:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 8091294:	a903      	add	r1, sp, #12
 8091296:	4630      	mov	r0, r6
 8091298:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 809129a:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 809129e:	f7ff fd0b 	bl	8090cb8 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 80912a2:	ab02      	add	r3, sp, #8
 80912a4:	f10d 0207 	add.w	r2, sp, #7
 80912a8:	4629      	mov	r1, r5
 80912aa:	9804      	ldr	r0, [sp, #16]
 80912ac:	f7ff ffd0 	bl	8091250 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 80912b0:	7920      	ldrb	r0, [r4, #4]
 80912b2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80912b6:	f7ff fcdf 	bl	8090c78 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 80912ba:	9802      	ldr	r0, [sp, #8]
 80912bc:	b008      	add	sp, #32
 80912be:	bd70      	pop	{r4, r5, r6, pc}

080912c0 <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80912c0:	b538      	push	{r3, r4, r5, lr}
 80912c2:	4604      	mov	r4, r0
    if (dividerReference)
 80912c4:	68a5      	ldr	r5, [r4, #8]
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80912c6:	4608      	mov	r0, r1
    if (dividerReference)
 80912c8:	b14d      	cbz	r5, 80912de <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
 80912ca:	f7ff ffb3 	bl	8091234 <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80912ce:	2201      	movs	r2, #1
 80912d0:	fa25 f100 	lsr.w	r1, r5, r0
 80912d4:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
 80912d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80912da:	f7ff bfcf 	b.w	809127c <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80912de:	7920      	ldrb	r0, [r4, #4]
    }
}
 80912e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80912e4:	f7ff bcc8 	b.w	8090c78 <HAL_SPI_Set_Clock_Divider>

080912e8 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80912e8:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 80912ea:	7900      	ldrb	r0, [r0, #4]
 80912ec:	f7ff fccc 	bl	8090c88 <HAL_SPI_Send_Receive_Data>
}
 80912f0:	b2c0      	uxtb	r0, r0
 80912f2:	bd08      	pop	{r3, pc}

080912f4 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 80912f4:	b530      	push	{r4, r5, lr}
 80912f6:	b087      	sub	sp, #28
 80912f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80912fa:	4604      	mov	r4, r0
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
 80912fc:	7900      	ldrb	r0, [r0, #4]
 80912fe:	9500      	str	r5, [sp, #0]
 8091300:	f7ff fce2 	bl	8090cc8 <HAL_SPI_DMA_Transfer>
  if (user_callback == NULL) {
 8091304:	b93d      	cbnz	r5, 8091316 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    HAL_SPI_TransferStatus st;
    do {
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
 8091306:	a902      	add	r1, sp, #8
 8091308:	7920      	ldrb	r0, [r4, #4]
 809130a:	f7ff fce5 	bl	8090cd8 <HAL_SPI_DMA_Transfer_Status>
void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
  if (user_callback == NULL) {
    HAL_SPI_TransferStatus st;
    do {
 809130e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8091312:	07db      	lsls	r3, r3, #31
 8091314:	d4f7      	bmi.n	8091306 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
    } while(st.transfer_ongoing);
  }
}
 8091316:	b007      	add	sp, #28
 8091318:	bd30      	pop	{r4, r5, pc}

0809131a <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 809131a:	7900      	ldrb	r0, [r0, #4]
 809131c:	f7ff bcc4 	b.w	8090ca8 <HAL_SPI_Is_Enabled>

08091320 <_GLOBAL__sub_I_System>:

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8091320:	2000      	movs	r0, #0
 8091322:	f7ff beb9 	b.w	8091098 <set_system_mode>

08091326 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
void str_reverse(char* buffer){
 8091326:	b510      	push	{r4, lr}
 8091328:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 809132a:	f002 fe76 	bl	809401a <strlen>
 809132e:	3801      	subs	r0, #1
 8091330:	1823      	adds	r3, r4, r0
 8091332:	4620      	mov	r0, r4
	while(i<j){
 8091334:	4298      	cmp	r0, r3
 8091336:	d206      	bcs.n	8091346 <_Z11str_reversePc+0x20>
		c = *i;
 8091338:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 809133a:	7819      	ldrb	r1, [r3, #0]
 809133c:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 8091340:	f803 2901 	strb.w	r2, [r3], #-1
void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 8091344:	e7f6      	b.n	8091334 <_Z11str_reversePc+0xe>
 8091346:	bd10      	pop	{r4, pc}

08091348 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 8091348:	b570      	push	{r4, r5, r6, lr}
 809134a:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 809134c:	1e91      	subs	r1, r2, #2
 809134e:	2922      	cmp	r1, #34	; 0x22
 8091350:	d820      	bhi.n	8091394 <ultoa+0x4c>
 8091352:	4625      	mov	r5, r4
 8091354:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 8091356:	b910      	cbnz	r0, 809135e <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8091358:	4423      	add	r3, r4
            *ptr++ = '0';
 809135a:	2230      	movs	r2, #48	; 0x30
 809135c:	e00e      	b.n	809137c <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 809135e:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 8091362:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 8091366:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 8091368:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 809136a:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 809136e:	bf94      	ite	ls
 8091370:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 8091372:	3157      	addhi	r1, #87	; 0x57
 8091374:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 8091378:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 809137a:	e7eb      	b.n	8091354 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 809137c:	4299      	cmp	r1, r3
 809137e:	d202      	bcs.n	8091386 <ultoa+0x3e>
            *ptr++ = '0';
 8091380:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8091384:	e7fa      	b.n	809137c <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 8091386:	2300      	movs	r3, #0
	str_reverse(buffer);
 8091388:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 809138a:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 809138c:	f7ff ffcb 	bl	8091326 <_Z11str_reversePc>
	return buffer;
 8091390:	4620      	mov	r0, r4
 8091392:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 8091394:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 8091396:	bd70      	pop	{r4, r5, r6, pc}

08091398 <itoa>:

char* itoa(int a, char* buffer, int radix){
 8091398:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 809139a:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

char* itoa(int a, char* buffer, int radix){
 809139c:	460c      	mov	r4, r1
 809139e:	4615      	mov	r5, r2
	if(a<0){
 80913a0:	da0b      	bge.n	80913ba <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80913a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80913a6:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80913aa:	bf14      	ite	ne
 80913ac:	4258      	negne	r0, r3
 80913ae:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 80913b0:	2301      	movs	r3, #1
	return buffer;
}

char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80913b2:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
 80913b4:	462a      	mov	r2, r5
 80913b6:	4419      	add	r1, r3
 80913b8:	e000      	b.n	80913bc <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
 80913ba:	2301      	movs	r3, #1
 80913bc:	f7ff ffc4 	bl	8091348 <ultoa>
	}
	return buffer;
}
 80913c0:	4620      	mov	r0, r4
 80913c2:	bd38      	pop	{r3, r4, r5, pc}

080913c4 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80913c4:	b513      	push	{r0, r1, r4, lr}
 80913c6:	ab02      	add	r3, sp, #8
        return write(&b, 1);
 80913c8:	6802      	ldr	r2, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80913ca:	f803 1d01 	strb.w	r1, [r3, #-1]!
        return write(&b, 1);
 80913ce:	68d4      	ldr	r4, [r2, #12]
 80913d0:	4619      	mov	r1, r3
 80913d2:	2201      	movs	r2, #1
 80913d4:	47a0      	blx	r4
}
 80913d6:	b002      	add	sp, #8
 80913d8:	bd10      	pop	{r4, pc}

080913da <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 80913da:	4770      	bx	lr

080913dc <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80913dc:	694a      	ldr	r2, [r1, #20]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80913de:	4903      	ldr	r1, [pc, #12]	; (80913ec <_ZN9TCPClient8remoteIPEv+0x10>)
 80913e0:	6001      	str	r1, [r0, #0]
 80913e2:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80913e6:	6042      	str	r2, [r0, #4]
    return d_->remoteIP;
}
 80913e8:	4770      	bx	lr
 80913ea:	bf00      	nop
 80913ec:	08099cac 	.word	0x08099cac

080913f0 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80913f0:	4770      	bx	lr

080913f2 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 80913f2:	2000      	movs	r0, #0
 80913f4:	4770      	bx	lr

080913f6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80913f6:	b510      	push	{r4, lr}
 80913f8:	4604      	mov	r4, r0
 80913fa:	f7ee fe52 	bl	80800a2 <_ZdlPv>
 80913fe:	4620      	mov	r0, r4
 8091400:	bd10      	pop	{r4, pc}

08091402 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 8091402:	f7ee be4e 	b.w	80800a2 <_ZdlPv>
	...

08091408 <_ZN9TCPClient7connectEPKctm>:
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 8091408:	b5f0      	push	{r4, r5, r6, r7, lr}
 809140a:	461d      	mov	r5, r3
    stop();
 809140c:	6803      	ldr	r3, [r0, #0]
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 809140e:	b087      	sub	sp, #28
    stop();
 8091410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 8091412:	4604      	mov	r4, r0
 8091414:	460e      	mov	r6, r1
 8091416:	4617      	mov	r7, r2
    stop();
 8091418:	4798      	blx	r3
      int rv = 0;
      if(Network.ready())
 809141a:	4b11      	ldr	r3, [pc, #68]	; (8091460 <_ZN9TCPClient7connectEPKctm+0x58>)
 809141c:	6818      	ldr	r0, [r3, #0]
 809141e:	6803      	ldr	r3, [r0, #0]
 8091420:	681b      	ldr	r3, [r3, #0]
 8091422:	4798      	blx	r3
 8091424:	b1c8      	cbz	r0, 809145a <_ZN9TCPClient7connectEPKctm+0x52>
      {
        IPAddress ip_addr;
 8091426:	a802      	add	r0, sp, #8
 8091428:	f000 fda8 	bl	8091f7c <_ZN9IPAddressC1Ev>

        if((rv = inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL)) == 0)
 809142c:	4630      	mov	r0, r6
 809142e:	f002 fdf4 	bl	809401a <strlen>
 8091432:	2300      	movs	r3, #0
 8091434:	9300      	str	r3, [sp, #0]
 8091436:	b281      	uxth	r1, r0
 8091438:	462b      	mov	r3, r5
 809143a:	aa03      	add	r2, sp, #12
 809143c:	4630      	mov	r0, r6
 809143e:	f7ff fdbb 	bl	8090fb8 <inet_gethostbyname>
 8091442:	b950      	cbnz	r0, 809145a <_ZN9TCPClient7connectEPKctm+0x52>
        {
                return connect(ip_addr, port, nif);
 8091444:	6823      	ldr	r3, [r4, #0]
 8091446:	463a      	mov	r2, r7
 8091448:	6a1e      	ldr	r6, [r3, #32]
 809144a:	4b06      	ldr	r3, [pc, #24]	; (8091464 <_ZN9TCPClient7connectEPKctm+0x5c>)
 809144c:	a904      	add	r1, sp, #16
 809144e:	9304      	str	r3, [sp, #16]
 8091450:	9b03      	ldr	r3, [sp, #12]
 8091452:	4620      	mov	r0, r4
 8091454:	9305      	str	r3, [sp, #20]
 8091456:	462b      	mov	r3, r5
 8091458:	47b0      	blx	r6
        }
        else
            DEBUG("unable to get IP for hostname");
      }
      return rv;
}
 809145a:	b007      	add	sp, #28
 809145c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 809145e:	bf00      	nop
 8091460:	08099cf4 	.word	0x08099cf4
 8091464:	08099cac 	.word	0x08099cac

08091468 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.32>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 8091468:	b510      	push	{r4, lr}
 809146a:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 809146c:	6803      	ldr	r3, [r0, #0]
 809146e:	689b      	ldr	r3, [r3, #8]
 8091470:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8091472:	68a3      	ldr	r3, [r4, #8]
 8091474:	3b01      	subs	r3, #1
 8091476:	60a3      	str	r3, [r4, #8]
 8091478:	b92b      	cbnz	r3, 8091486 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.32+0x1e>
            _M_destroy();
 809147a:	6823      	ldr	r3, [r4, #0]
 809147c:	4620      	mov	r0, r4
        }
    }
 809147e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 8091482:	68db      	ldr	r3, [r3, #12]
 8091484:	4718      	bx	r3
 8091486:	bd10      	pop	{r4, pc}

08091488 <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 8091488:	b510      	push	{r4, lr}
 809148a:	6943      	ldr	r3, [r0, #20]
 809148c:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 809148e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8091492:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8091496:	429a      	cmp	r2, r3
 8091498:	d005      	beq.n	80914a6 <_ZN9TCPClient4peekEv+0x1e>
 809149a:	6962      	ldr	r2, [r4, #20]
 809149c:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80914a0:	4413      	add	r3, r2
 80914a2:	7918      	ldrb	r0, [r3, #4]
 80914a4:	bd10      	pop	{r4, pc}
 80914a6:	6803      	ldr	r3, [r0, #0]
 80914a8:	691b      	ldr	r3, [r3, #16]
 80914aa:	4798      	blx	r3
 80914ac:	2800      	cmp	r0, #0
 80914ae:	d1f4      	bne.n	809149a <_ZN9TCPClient4peekEv+0x12>
 80914b0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80914b4:	bd10      	pop	{r4, pc}

080914b6 <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80914b6:	b510      	push	{r4, lr}
 80914b8:	6943      	ldr	r3, [r0, #20]
 80914ba:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80914bc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80914c0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80914c4:	429a      	cmp	r2, r3
 80914c6:	d008      	beq.n	80914da <_ZN9TCPClient4readEv+0x24>
 80914c8:	6962      	ldr	r2, [r4, #20]
 80914ca:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80914ce:	1c59      	adds	r1, r3, #1
 80914d0:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80914d4:	4413      	add	r3, r2
 80914d6:	7918      	ldrb	r0, [r3, #4]
 80914d8:	bd10      	pop	{r4, pc}
 80914da:	6803      	ldr	r3, [r0, #0]
 80914dc:	691b      	ldr	r3, [r3, #16]
 80914de:	4798      	blx	r3
 80914e0:	2800      	cmp	r0, #0
 80914e2:	d1f1      	bne.n	80914c8 <_ZN9TCPClient4readEv+0x12>
 80914e4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80914e8:	bd10      	pop	{r4, pc}

080914ea <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 80914ea:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80914ec:	6904      	ldr	r4, [r0, #16]
                offset(0),
                total(0) {
        }

        ~Data() {
            if (socket_handle_valid(sock)) {
 80914ee:	6820      	ldr	r0, [r4, #0]
 80914f0:	f7ff fd22 	bl	8090f38 <socket_handle_valid>
 80914f4:	b110      	cbz	r0, 80914fc <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x12>
                socket_close(sock);
 80914f6:	6820      	ldr	r0, [r4, #0]
 80914f8:	f7ff fd46 	bl	8090f88 <socket_close>
 80914fc:	4620      	mov	r0, r4
 80914fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8091502:	f7ee bdce 	b.w	80800a2 <_ZdlPv>

08091506 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 8091506:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8091508:	6943      	ldr	r3, [r0, #20]
 809150a:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 809150c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8091510:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 8091514:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 8091516:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 8091518:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 809151a:	d106      	bne.n	809152a <_ZN9TCPClient4readEPhj+0x24>
 809151c:	6803      	ldr	r3, [r0, #0]
 809151e:	691b      	ldr	r3, [r3, #16]
 8091520:	4798      	blx	r3
 8091522:	b910      	cbnz	r0, 809152a <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 8091524:	f04f 34ff 	mov.w	r4, #4294967295
 8091528:	e014      	b.n	8091554 <_ZN9TCPClient4readEPhj+0x4e>
 809152a:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 809152c:	4630      	mov	r0, r6
        return status() ? socket_send(d_->sock, buffer, size) : -1;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 809152e:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 8091532:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 8091536:	4419      	add	r1, r3
        return status() ? socket_send(d_->sock, buffer, size) : -1;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 8091538:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 809153a:	42bc      	cmp	r4, r7
 809153c:	bf28      	it	cs
 809153e:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 8091540:	3104      	adds	r1, #4
 8091542:	4622      	mov	r2, r4
 8091544:	f002 fd0d 	bl	8093f62 <memcpy>
 8091548:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 809154a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 809154e:	4423      	add	r3, r4
 8091550:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 8091554:	4620      	mov	r0, r4
 8091556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08091558 <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 8091558:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 809155a:	2300      	movs	r3, #0
 809155c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 8091560:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 8091562:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 8091566:	4770      	bx	lr

08091568 <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 8091568:	b538      	push	{r3, r4, r5, lr}
 809156a:	6942      	ldr	r2, [r0, #20]
 809156c:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 809156e:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 8091572:	b11b      	cbz	r3, 809157c <_ZN9TCPClient9availableEv+0x14>
 8091574:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 8091578:	429a      	cmp	r2, r3
 809157a:	d00b      	beq.n	8091594 <_ZN9TCPClient9availableEv+0x2c>
    }


    static NetworkClass& from(network_interface_t nif) {
        // hard-code for now until multiple-networks are implemented.
        return Network;
 809157c:	4b18      	ldr	r3, [pc, #96]	; (80915e0 <_ZN9TCPClient9availableEv+0x78>)
 809157e:	6818      	ldr	r0, [r3, #0]
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 8091580:	6803      	ldr	r3, [r0, #0]
 8091582:	681b      	ldr	r3, [r3, #0]
 8091584:	4798      	blx	r3
 8091586:	b318      	cbz	r0, 80915d0 <_ZN9TCPClient9availableEv+0x68>
 8091588:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 809158a:	6818      	ldr	r0, [r3, #0]
 809158c:	f7ff fcd4 	bl	8090f38 <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 8091590:	b918      	cbnz	r0, 809159a <_ZN9TCPClient9availableEv+0x32>
 8091592:	e01d      	b.n	80915d0 <_ZN9TCPClient9availableEv+0x68>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 8091594:	f7ff ffe0 	bl	8091558 <_ZN9TCPClient12flush_bufferEv>
 8091598:	e7f0      	b.n	809157c <_ZN9TCPClient9availableEv+0x14>
 809159a:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 809159c:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80915a0:	297f      	cmp	r1, #127	; 0x7f
 80915a2:	d815      	bhi.n	80915d0 <_ZN9TCPClient9availableEv+0x68>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80915a4:	1d05      	adds	r5, r0, #4
 80915a6:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80915aa:	2300      	movs	r3, #0
 80915ac:	4429      	add	r1, r5
 80915ae:	6800      	ldr	r0, [r0, #0]
 80915b0:	f7ff fcda 	bl	8090f68 <socket_receive>
            if (ret > 0)
 80915b4:	2800      	cmp	r0, #0
 80915b6:	dd0b      	ble.n	80915d0 <_ZN9TCPClient9availableEv+0x68>
 80915b8:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 80915ba:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80915be:	b90a      	cbnz	r2, 80915c4 <_ZN9TCPClient9availableEv+0x5c>
 80915c0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80915c4:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 80915c6:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80915ca:	4418      	add	r0, r3
 80915cc:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 80915d0:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 80915d2:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80915d6:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 80915da:	1a18      	subs	r0, r3, r0
}
 80915dc:	bd38      	pop	{r3, r4, r5, pc}
 80915de:	bf00      	nop
 80915e0:	08099cf4 	.word	0x08099cf4

080915e4 <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 80915e4:	b538      	push	{r3, r4, r5, lr}
  DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80915e6:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 80915e8:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80915ea:	6818      	ldr	r0, [r3, #0]
 80915ec:	f7ff fca4 	bl	8090f38 <socket_handle_valid>

void TCPClient::stop()
{
  DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80915f0:	b118      	cbz	r0, 80915fa <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80915f2:	6963      	ldr	r3, [r4, #20]
 80915f4:	6818      	ldr	r0, [r3, #0]
 80915f6:	f7ff fcc7 	bl	8090f88 <socket_close>
 80915fa:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80915fc:	f7ff fccc 	bl	8090f98 <socket_handle_invalid>
 8091600:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8091602:	6963      	ldr	r3, [r4, #20]
 8091604:	2200      	movs	r2, #0
 8091606:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  d_->remoteIP.clear();
  flush_buffer();
 809160a:	4620      	mov	r0, r4
}
 809160c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 8091610:	f7ff bfa2 	b.w	8091558 <_ZN9TCPClient12flush_bufferEv>

08091614 <_ZN9TCPClientC1Em>:

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 8091614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8091616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 809161a:	6083      	str	r3, [r0, #8]
        d_(std::make_shared<Data>(sock))
 809161c:	4b17      	ldr	r3, [pc, #92]	; (809167c <_ZN9TCPClientC1Em+0x68>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 809161e:	2600      	movs	r6, #0
 8091620:	6046      	str	r6, [r0, #4]
 8091622:	6003      	str	r3, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 8091624:	6146      	str	r6, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 8091626:	6186      	str	r6, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 8091628:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 809162a:	2090      	movs	r0, #144	; 0x90
 809162c:	460f      	mov	r7, r1
 809162e:	f7ee fd34 	bl	808009a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8091632:	4605      	mov	r5, r0
 8091634:	b138      	cbz	r0, 8091646 <_ZN9TCPClientC1Em+0x32>
        IPAddress remoteIP;

        explicit Data(sock_handle_t sock) :
                sock(sock),
                offset(0),
                total(0) {
 8091636:	6007      	str	r7, [r0, #0]
 8091638:	f8a0 6084 	strh.w	r6, [r0, #132]	; 0x84
 809163c:	f8a0 6086 	strh.w	r6, [r0, #134]	; 0x86
 8091640:	3088      	adds	r0, #136	; 0x88
 8091642:	f000 fc9b 	bl	8091f7c <_ZN9IPAddressC1Ev>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8091646:	2014      	movs	r0, #20
 8091648:	f7ee fd27 	bl	808009a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 809164c:	4603      	mov	r3, r0
 809164e:	b128      	cbz	r0, 809165c <_ZN9TCPClientC1Em+0x48>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 8091650:	2201      	movs	r2, #1
 8091652:	6042      	str	r2, [r0, #4]
 8091654:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 8091656:	4a0a      	ldr	r2, [pc, #40]	; (8091680 <_ZN9TCPClientC1Em+0x6c>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 8091658:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 809165a:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 809165c:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 809165e:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 8091660:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 8091662:	b128      	cbz	r0, 8091670 <_ZN9TCPClientC1Em+0x5c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8091664:	6843      	ldr	r3, [r0, #4]
 8091666:	3b01      	subs	r3, #1
 8091668:	6043      	str	r3, [r0, #4]
 809166a:	b90b      	cbnz	r3, 8091670 <_ZN9TCPClientC1Em+0x5c>
 809166c:	f7ff fefc 	bl	8091468 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.32>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 8091670:	4620      	mov	r0, r4
 8091672:	f7ff ff71 	bl	8091558 <_ZN9TCPClient12flush_bufferEv>
}
 8091676:	4620      	mov	r0, r4
 8091678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 809167a:	bf00      	nop
 809167c:	08099b64 	.word	0x08099b64
 8091680:	08099b48 	.word	0x08099b48

08091684 <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 8091684:	b510      	push	{r4, lr}
 8091686:	4604      	mov	r4, r0
 8091688:	f7ff fc86 	bl	8090f98 <socket_handle_invalid>
 809168c:	4601      	mov	r1, r0
 809168e:	4620      	mov	r0, r4
 8091690:	f7ff ffc0 	bl	8091614 <_ZN9TCPClientC1Em>
{
}
 8091694:	4620      	mov	r0, r4
 8091696:	bd10      	pop	{r4, pc}

08091698 <_ZN9TCPClient7connectE9IPAddresstm>:
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 8091698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 809169c:	4698      	mov	r8, r3
    stop();
 809169e:	6803      	ldr	r3, [r0, #0]
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80916a0:	b086      	sub	sp, #24
    stop();
 80916a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80916a4:	4604      	mov	r4, r0
 80916a6:	460d      	mov	r5, r1
 80916a8:	4616      	mov	r6, r2
    stop();
 80916aa:	4798      	blx	r3
 80916ac:	4b25      	ldr	r3, [pc, #148]	; (8091744 <_ZN9TCPClient7connectE9IPAddresstm+0xac>)
 80916ae:	6818      	ldr	r0, [r3, #0]
        int connected = 0;
        if(Network.from(nif).ready())
 80916b0:	6803      	ldr	r3, [r0, #0]
 80916b2:	681b      	ldr	r3, [r3, #0]
 80916b4:	4798      	blx	r3
 80916b6:	2800      	cmp	r0, #0
 80916b8:	d040      	beq.n	809173c <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80916ba:	4633      	mov	r3, r6
 80916bc:	f8cd 8000 	str.w	r8, [sp]
 80916c0:	2206      	movs	r2, #6
 80916c2:	2101      	movs	r1, #1
 80916c4:	2002      	movs	r0, #2
 80916c6:	6967      	ldr	r7, [r4, #20]
 80916c8:	f7ff fc3e 	bl	8090f48 <socket_create>
 80916cc:	6038      	str	r0, [r7, #0]
          DEBUG("socket=%d",d_->sock);

          if (socket_handle_valid(d_->sock))
 80916ce:	6963      	ldr	r3, [r4, #20]
 80916d0:	6818      	ldr	r0, [r3, #0]
 80916d2:	f7ff fc31 	bl	8090f38 <socket_handle_valid>
 80916d6:	b388      	cbz	r0, 809173c <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
          {
            flush_buffer();
 80916d8:	4620      	mov	r0, r4
 80916da:	f7ff ff3d 	bl	8091558 <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 80916de:	2302      	movs	r3, #2
 80916e0:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80916e4:	0a33      	lsrs	r3, r6, #8
 80916e6:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80916ea:	79eb      	ldrb	r3, [r5, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80916ec:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80916f0:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80916f4:	79ab      	ldrb	r3, [r5, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 80916f6:	f88d 600b 	strb.w	r6, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 80916fa:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80916fe:	796b      	ldrb	r3, [r5, #5]
 8091700:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 8091704:	792b      	ldrb	r3, [r5, #4]
 8091706:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 809170a:	f7ff fc4d 	bl	8090fa8 <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 809170e:	6963      	ldr	r3, [r4, #20]
 8091710:	2210      	movs	r2, #16
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 8091712:	4607      	mov	r7, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 8091714:	a902      	add	r1, sp, #8
 8091716:	6818      	ldr	r0, [r3, #0]
 8091718:	f7ff fc1e 	bl	8090f58 <socket_connect>
 809171c:	4606      	mov	r6, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 809171e:	4638      	mov	r0, r7
 8091720:	f7ff fc42 	bl	8090fa8 <HAL_NET_SetNetWatchDog>
 8091724:	6963      	ldr	r3, [r4, #20]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 8091726:	686a      	ldr	r2, [r5, #4]
 8091728:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            d_->remoteIP = ip;
            if(!connected)
 809172c:	b12e      	cbz	r6, 809173a <_ZN9TCPClient7connectE9IPAddresstm+0xa2>
            {
                stop();
 809172e:	6823      	ldr	r3, [r4, #0]
 8091730:	4620      	mov	r0, r4
 8091732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8091734:	4798      	blx	r3
 8091736:	2000      	movs	r0, #0
 8091738:	e000      	b.n	809173c <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 809173a:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 809173c:	b006      	add	sp, #24
 809173e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8091742:	bf00      	nop
 8091744:	08099cf4 	.word	0x08099cf4

08091748 <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 8091748:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 809174a:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 809174c:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 809174e:	6818      	ldr	r0, [r3, #0]
 8091750:	f7ff fbf2 	bl	8090f38 <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 8091754:	b908      	cbnz	r0, 809175a <_ZN9TCPClient6statusEv+0x12>
 8091756:	2000      	movs	r0, #0
 8091758:	bd10      	pop	{r4, pc}
 809175a:	4b07      	ldr	r3, [pc, #28]	; (8091778 <_ZN9TCPClient6statusEv+0x30>)
 809175c:	6818      	ldr	r0, [r3, #0]
 809175e:	6803      	ldr	r3, [r0, #0]
 8091760:	681b      	ldr	r3, [r3, #0]
 8091762:	4798      	blx	r3
 8091764:	2800      	cmp	r0, #0
 8091766:	d0f6      	beq.n	8091756 <_ZN9TCPClient6statusEv+0xe>
 8091768:	6963      	ldr	r3, [r4, #20]
 809176a:	6818      	ldr	r0, [r3, #0]
 809176c:	f7ff fbdc 	bl	8090f28 <socket_active_status>
 8091770:	fab0 f080 	clz	r0, r0
 8091774:	0940      	lsrs	r0, r0, #5
}
 8091776:	bd10      	pop	{r4, pc}
 8091778:	08099cf4 	.word	0x08099cf4

0809177c <_ZN9TCPClient5writeEPKhj>:
{
        return write(&b, 1);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 809177c:	b570      	push	{r4, r5, r6, lr}
 809177e:	4606      	mov	r6, r0
 8091780:	460c      	mov	r4, r1
 8091782:	4615      	mov	r5, r2
        return status() ? socket_send(d_->sock, buffer, size) : -1;
 8091784:	f7ff ffe0 	bl	8091748 <_ZN9TCPClient6statusEv>
 8091788:	b138      	cbz	r0, 809179a <_ZN9TCPClient5writeEPKhj+0x1e>
 809178a:	6973      	ldr	r3, [r6, #20]
 809178c:	462a      	mov	r2, r5
 809178e:	4621      	mov	r1, r4
}
 8091790:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return write(&b, 1);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
        return status() ? socket_send(d_->sock, buffer, size) : -1;
 8091794:	6818      	ldr	r0, [r3, #0]
 8091796:	f7ff bbef 	b.w	8090f78 <socket_send>
}
 809179a:	f04f 30ff 	mov.w	r0, #4294967295
 809179e:	bd70      	pop	{r4, r5, r6, pc}

080917a0 <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 80917a0:	b538      	push	{r3, r4, r5, lr}
 80917a2:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80917a4:	f7ff ffd0 	bl	8091748 <_ZN9TCPClient6statusEv>
 80917a8:	bb00      	cbnz	r0, 80917ec <_ZN9TCPClient9connectedEv+0x4c>
 80917aa:	6963      	ldr	r3, [r4, #20]
 80917ac:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80917b0:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80917b4:	4291      	cmp	r1, r2
 80917b6:	d119      	bne.n	80917ec <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80917b8:	6818      	ldr	r0, [r3, #0]
 80917ba:	f7ff fbbd 	bl	8090f38 <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80917be:	b128      	cbz	r0, 80917cc <_ZN9TCPClient9connectedEv+0x2c>
 80917c0:	6963      	ldr	r3, [r4, #20]
 80917c2:	6818      	ldr	r0, [r3, #0]
 80917c4:	f7ff fbb0 	bl	8090f28 <socket_active_status>
 80917c8:	2801      	cmp	r0, #1
 80917ca:	d001      	beq.n	80917d0 <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80917cc:	2500      	movs	r5, #0
 80917ce:	e00e      	b.n	80917ee <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 80917d0:	6823      	ldr	r3, [r4, #0]
 80917d2:	4620      	mov	r0, r4
 80917d4:	691b      	ldr	r3, [r3, #16]
 80917d6:	4798      	blx	r3
 80917d8:	2800      	cmp	r0, #0
 80917da:	bf14      	ite	ne
 80917dc:	2501      	movne	r5, #1
 80917de:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 80917e0:	d105      	bne.n	80917ee <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("caling Stop No more Data and in CLOSE_WAIT");
          stop();       // Close our side
 80917e2:	6823      	ldr	r3, [r4, #0]
 80917e4:	4620      	mov	r0, r4
 80917e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80917e8:	4798      	blx	r3
 80917ea:	e000      	b.n	80917ee <_ZN9TCPClient9connectedEv+0x4e>
 80917ec:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 80917ee:	4628      	mov	r0, r5
 80917f0:	bd38      	pop	{r3, r4, r5, pc}

080917f2 <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 80917f2:	b508      	push	{r3, lr}
   return (status()!=0);
 80917f4:	f7ff ffa8 	bl	8091748 <_ZN9TCPClient6statusEv>
}
 80917f8:	3000      	adds	r0, #0
 80917fa:	bf18      	it	ne
 80917fc:	2001      	movne	r0, #1
 80917fe:	bd08      	pop	{r3, pc}

08091800 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8091800:	b510      	push	{r4, lr}
 8091802:	4604      	mov	r4, r0
{
	free(buffer);
 8091804:	6800      	ldr	r0, [r0, #0]
 8091806:	f7ff fca7 	bl	8091158 <free>
}
 809180a:	4620      	mov	r0, r4
 809180c:	bd10      	pop	{r4, pc}

0809180e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 809180e:	b510      	push	{r4, lr}
 8091810:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8091812:	6800      	ldr	r0, [r0, #0]
 8091814:	b108      	cbz	r0, 809181a <_ZN6String10invalidateEv+0xc>
 8091816:	f7ff fc9f 	bl	8091158 <free>
	buffer = NULL;
 809181a:	2300      	movs	r3, #0
 809181c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 809181e:	60a3      	str	r3, [r4, #8]
 8091820:	6063      	str	r3, [r4, #4]
 8091822:	bd10      	pop	{r4, pc}

08091824 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8091824:	b538      	push	{r3, r4, r5, lr}
 8091826:	4604      	mov	r4, r0
 8091828:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 809182a:	6800      	ldr	r0, [r0, #0]
 809182c:	3101      	adds	r1, #1
 809182e:	f7ff fc9b 	bl	8091168 <realloc>
	if (newbuffer) {
 8091832:	b110      	cbz	r0, 809183a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8091834:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 8091838:	2001      	movs	r0, #1
	}
	return 0;
}
 809183a:	bd38      	pop	{r3, r4, r5, pc}

0809183c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 809183c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 809183e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8091840:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8091842:	b113      	cbz	r3, 809184a <_ZN6String7reserveEj+0xe>
 8091844:	6843      	ldr	r3, [r0, #4]
 8091846:	428b      	cmp	r3, r1
 8091848:	d207      	bcs.n	809185a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 809184a:	4620      	mov	r0, r4
 809184c:	f7ff ffea 	bl	8091824 <_ZN6String12changeBufferEj>
 8091850:	b120      	cbz	r0, 809185c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 8091852:	68a3      	ldr	r3, [r4, #8]
 8091854:	b90b      	cbnz	r3, 809185a <_ZN6String7reserveEj+0x1e>
 8091856:	6822      	ldr	r2, [r4, #0]
 8091858:	7013      	strb	r3, [r2, #0]
 809185a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 809185c:	bd10      	pop	{r4, pc}

0809185e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 809185e:	b570      	push	{r4, r5, r6, lr}
 8091860:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8091862:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8091864:	4604      	mov	r4, r0
 8091866:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8091868:	f7ff ffe8 	bl	809183c <_ZN6String7reserveEj>
 809186c:	b918      	cbnz	r0, 8091876 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 809186e:	4620      	mov	r0, r4
 8091870:	f7ff ffcd 	bl	809180e <_ZN6String10invalidateEv>
		return *this;
 8091874:	e009      	b.n	809188a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 8091876:	462a      	mov	r2, r5
 8091878:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 809187a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 809187c:	6820      	ldr	r0, [r4, #0]
 809187e:	f002 fb70 	bl	8093f62 <memcpy>
	buffer[len] = 0;
 8091882:	6822      	ldr	r2, [r4, #0]
 8091884:	68a3      	ldr	r3, [r4, #8]
 8091886:	2100      	movs	r1, #0
 8091888:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 809188a:	4620      	mov	r0, r4
 809188c:	bd70      	pop	{r4, r5, r6, pc}

0809188e <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 809188e:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8091890:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8091892:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8091894:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8091896:	6043      	str	r3, [r0, #4]
	len = 0;
 8091898:	6083      	str	r3, [r0, #8]
	flags = 0;
 809189a:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 809189c:	460d      	mov	r5, r1
 809189e:	b139      	cbz	r1, 80918b0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80918a0:	4608      	mov	r0, r1
 80918a2:	f002 fbba 	bl	809401a <strlen>
 80918a6:	4629      	mov	r1, r5
 80918a8:	4602      	mov	r2, r0
 80918aa:	4620      	mov	r0, r4
 80918ac:	f7ff ffd7 	bl	809185e <_ZN6String4copyEPKcj>
}
 80918b0:	4620      	mov	r0, r4
 80918b2:	bd38      	pop	{r3, r4, r5, pc}

080918b4 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80918b4:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80918b6:	b510      	push	{r4, lr}
 80918b8:	460b      	mov	r3, r1
 80918ba:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80918bc:	d007      	beq.n	80918ce <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80918be:	6809      	ldr	r1, [r1, #0]
 80918c0:	b119      	cbz	r1, 80918ca <_ZN6StringaSERKS_+0x16>
 80918c2:	689a      	ldr	r2, [r3, #8]
 80918c4:	f7ff ffcb 	bl	809185e <_ZN6String4copyEPKcj>
 80918c8:	e001      	b.n	80918ce <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80918ca:	f7ff ffa0 	bl	809180e <_ZN6String10invalidateEv>

	return *this;
}
 80918ce:	4620      	mov	r0, r4
 80918d0:	bd10      	pop	{r4, pc}

080918d2 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80918d2:	b510      	push	{r4, lr}
 80918d4:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80918d6:	2300      	movs	r3, #0
 80918d8:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80918da:	6043      	str	r3, [r0, #4]
	len = 0;
 80918dc:	6083      	str	r3, [r0, #8]
	flags = 0;
 80918de:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80918e0:	f7ff ffe8 	bl	80918b4 <_ZN6StringaSERKS_>
}
 80918e4:	4620      	mov	r0, r4
 80918e6:	bd10      	pop	{r4, pc}

080918e8 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80918e8:	b538      	push	{r3, r4, r5, lr}
 80918ea:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80918ec:	460c      	mov	r4, r1
 80918ee:	b141      	cbz	r1, 8091902 <_ZN6StringaSEPKc+0x1a>
 80918f0:	4608      	mov	r0, r1
 80918f2:	f002 fb92 	bl	809401a <strlen>
 80918f6:	4621      	mov	r1, r4
 80918f8:	4602      	mov	r2, r0
 80918fa:	4628      	mov	r0, r5
 80918fc:	f7ff ffaf 	bl	809185e <_ZN6String4copyEPKcj>
 8091900:	e001      	b.n	8091906 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 8091902:	f7ff ff84 	bl	809180e <_ZN6String10invalidateEv>

	return *this;
}
 8091906:	4628      	mov	r0, r5
 8091908:	bd38      	pop	{r3, r4, r5, pc}

0809190a <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 809190a:	b510      	push	{r4, lr}
 809190c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 809190e:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 8091910:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8091912:	6023      	str	r3, [r4, #0]
	capacity = 0;
 8091914:	6063      	str	r3, [r4, #4]
	len = 0;
 8091916:	60a3      	str	r3, [r4, #8]
	flags = 0;
 8091918:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 809191a:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
 809191c:	a901      	add	r1, sp, #4
 809191e:	f7ff fd3b 	bl	8091398 <itoa>
	*this = buf;
 8091922:	a901      	add	r1, sp, #4
 8091924:	4620      	mov	r0, r4
 8091926:	f7ff ffdf 	bl	80918e8 <_ZN6StringaSEPKc>
}
 809192a:	4620      	mov	r0, r4
 809192c:	b00a      	add	sp, #40	; 0x28
 809192e:	bd10      	pop	{r4, pc}

08091930 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 8091930:	b570      	push	{r4, r5, r6, lr}
 8091932:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 8091934:	460e      	mov	r6, r1
 8091936:	b909      	cbnz	r1, 809193c <_ZN6String6concatEPKcj+0xc>
 8091938:	2000      	movs	r0, #0
 809193a:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 809193c:	b16a      	cbz	r2, 809195a <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 809193e:	6883      	ldr	r3, [r0, #8]
 8091940:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 8091942:	4629      	mov	r1, r5
 8091944:	f7ff ff7a 	bl	809183c <_ZN6String7reserveEj>
 8091948:	2800      	cmp	r0, #0
 809194a:	d0f5      	beq.n	8091938 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 809194c:	6820      	ldr	r0, [r4, #0]
 809194e:	68a3      	ldr	r3, [r4, #8]
 8091950:	4631      	mov	r1, r6
 8091952:	4418      	add	r0, r3
 8091954:	f002 fb59 	bl	809400a <strcpy>
	len = newlen;
 8091958:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 809195a:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 809195c:	bd70      	pop	{r4, r5, r6, pc}

0809195e <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 809195e:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8091960:	688a      	ldr	r2, [r1, #8]
 8091962:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 8091964:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8091966:	f7ff ffe3 	bl	8091930 <_ZN6String6concatEPKcj>
 809196a:	b910      	cbnz	r0, 8091972 <_ZplRK15StringSumHelperRK6String+0x14>
 809196c:	4620      	mov	r0, r4
 809196e:	f7ff ff4e 	bl	809180e <_ZN6String10invalidateEv>
	return a;
}
 8091972:	4620      	mov	r0, r4
 8091974:	bd10      	pop	{r4, pc}

08091976 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 8091976:	b538      	push	{r3, r4, r5, lr}
 8091978:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 809197a:	460d      	mov	r5, r1
 809197c:	b141      	cbz	r1, 8091990 <_ZplRK15StringSumHelperPKc+0x1a>
 809197e:	4608      	mov	r0, r1
 8091980:	f002 fb4b 	bl	809401a <strlen>
 8091984:	4629      	mov	r1, r5
 8091986:	4602      	mov	r2, r0
 8091988:	4620      	mov	r0, r4
 809198a:	f7ff ffd1 	bl	8091930 <_ZN6String6concatEPKcj>
 809198e:	b910      	cbnz	r0, 8091996 <_ZplRK15StringSumHelperPKc+0x20>
 8091990:	4620      	mov	r0, r4
 8091992:	f7ff ff3c 	bl	809180e <_ZN6String10invalidateEv>
	return a;
}
 8091996:	4620      	mov	r0, r4
 8091998:	bd38      	pop	{r3, r4, r5, pc}

0809199a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 809199a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 809199c:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 809199e:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80919a0:	b912      	cbnz	r2, 80919a8 <_ZNK6String6equalsEPKc+0xe>
 80919a2:	b919      	cbnz	r1, 80919ac <_ZNK6String6equalsEPKc+0x12>
 80919a4:	2001      	movs	r0, #1
 80919a6:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80919a8:	b911      	cbnz	r1, 80919b0 <_ZNK6String6equalsEPKc+0x16>
 80919aa:	6803      	ldr	r3, [r0, #0]
 80919ac:	7818      	ldrb	r0, [r3, #0]
 80919ae:	e002      	b.n	80919b6 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80919b0:	6800      	ldr	r0, [r0, #0]
 80919b2:	f002 fb20 	bl	8093ff6 <strcmp>
 80919b6:	fab0 f080 	clz	r0, r0
 80919ba:	0940      	lsrs	r0, r0, #5
}
 80919bc:	bd08      	pop	{r3, pc}

080919be <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80919be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80919c0:	4606      	mov	r6, r0
 80919c2:	460d      	mov	r5, r1
 80919c4:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80919c6:	2400      	movs	r4, #0
  while (size--) {
 80919c8:	42bd      	cmp	r5, r7
 80919ca:	d00c      	beq.n	80919e6 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80919cc:	6833      	ldr	r3, [r6, #0]
 80919ce:	f815 1b01 	ldrb.w	r1, [r5], #1
 80919d2:	689b      	ldr	r3, [r3, #8]
 80919d4:	4630      	mov	r0, r6
 80919d6:	4798      	blx	r3
     if (chunk>=0)
 80919d8:	2800      	cmp	r0, #0
 80919da:	db01      	blt.n	80919e0 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80919dc:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80919de:	e7f3      	b.n	80919c8 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80919e0:	2c00      	cmp	r4, #0
 80919e2:	bf08      	it	eq
 80919e4:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80919e6:	4620      	mov	r0, r4
 80919e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080919ea <_ZN5Print5printEPKc>:
 80919ea:	b508      	push	{r3, lr}
 80919ec:	f7ef ffb8 	bl	8081960 <_ZN5Print5writeEPKc>
 80919f0:	bd08      	pop	{r3, pc}

080919f2 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80919f2:	6803      	ldr	r3, [r0, #0]
 80919f4:	689b      	ldr	r3, [r3, #8]
 80919f6:	4718      	bx	r3

080919f8 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80919f8:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80919fa:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80919fc:	4605      	mov	r5, r0
  size_t n = print('\r');
 80919fe:	f7ff fff8 	bl	80919f2 <_ZN5Print5printEc>
  n += print('\n');
 8091a02:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 8091a04:	4604      	mov	r4, r0
  n += print('\n');
 8091a06:	4628      	mov	r0, r5
 8091a08:	f7ff fff3 	bl	80919f2 <_ZN5Print5printEc>
  return n;
}
 8091a0c:	4420      	add	r0, r4
 8091a0e:	bd38      	pop	{r3, r4, r5, pc}

08091a10 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8091a10:	b538      	push	{r3, r4, r5, lr}
 8091a12:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8091a14:	f7ef ffa4 	bl	8081960 <_ZN5Print5writeEPKc>
 8091a18:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 8091a1a:	4628      	mov	r0, r5
 8091a1c:	f7ff ffec 	bl	80919f8 <_ZN5Print7printlnEv>
  return n;
}
 8091a20:	4420      	add	r0, r4
 8091a22:	bd38      	pop	{r3, r4, r5, pc}

08091a24 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8091a24:	2a01      	cmp	r2, #1
 8091a26:	bf98      	it	ls
 8091a28:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8091a2a:	b530      	push	{r4, r5, lr}
 8091a2c:	460b      	mov	r3, r1
 8091a2e:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8091a30:	2100      	movs	r1, #0
 8091a32:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8091a36:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 8091a3a:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 8091a3e:	fb05 3312 	mls	r3, r5, r2, r3
 8091a42:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8091a44:	2b09      	cmp	r3, #9
 8091a46:	bf94      	ite	ls
 8091a48:	3330      	addls	r3, #48	; 0x30
 8091a4a:	3337      	addhi	r3, #55	; 0x37
 8091a4c:	b2db      	uxtb	r3, r3
 8091a4e:	4621      	mov	r1, r4
 8091a50:	f804 3901 	strb.w	r3, [r4], #-1
 8091a54:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 8091a56:	2d00      	cmp	r5, #0
 8091a58:	d1ef      	bne.n	8091a3a <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 8091a5a:	f7ef ff81 	bl	8081960 <_ZN5Print5writeEPKc>
}
 8091a5e:	b00b      	add	sp, #44	; 0x2c
 8091a60:	bd30      	pop	{r4, r5, pc}

08091a62 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 8091a62:	b410      	push	{r4}
  if (base == 0) return write(n);
 8091a64:	b922      	cbnz	r2, 8091a70 <_ZN5Print5printEmi+0xe>
 8091a66:	6803      	ldr	r3, [r0, #0]
 8091a68:	b2c9      	uxtb	r1, r1
 8091a6a:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 8091a6c:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 8091a6e:	4718      	bx	r3
  else return printNumber(n, base);
 8091a70:	b2d2      	uxtb	r2, r2
}
 8091a72:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8091a74:	f7ff bfd6 	b.w	8091a24 <_ZN5Print11printNumberEmh>

08091a78 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 8091a78:	f7ff bff3 	b.w	8091a62 <_ZN5Print5printEmi>

08091a7c <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 8091a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8091a80:	4607      	mov	r7, r0
 8091a82:	460e      	mov	r6, r1
  if (base == 0) {
 8091a84:	4615      	mov	r5, r2
 8091a86:	b92a      	cbnz	r2, 8091a94 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 8091a88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 8091a8c:	6803      	ldr	r3, [r0, #0]
 8091a8e:	b2c9      	uxtb	r1, r1
 8091a90:	689b      	ldr	r3, [r3, #8]
 8091a92:	4718      	bx	r3
  } else if (base == 10) {
 8091a94:	2a0a      	cmp	r2, #10
 8091a96:	d102      	bne.n	8091a9e <_ZN5Print5printEli+0x22>
    if (n < 0) {
 8091a98:	2900      	cmp	r1, #0
 8091a9a:	da01      	bge.n	8091aa0 <_ZN5Print5printEli+0x24>
 8091a9c:	e004      	b.n	8091aa8 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 8091a9e:	b2d2      	uxtb	r2, r2
  }
}
 8091aa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 8091aa4:	f7ff bfbe 	b.w	8091a24 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 8091aa8:	212d      	movs	r1, #45	; 0x2d
 8091aaa:	f7ff ffa2 	bl	80919f2 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 8091aae:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 8091ab0:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 8091ab2:	4271      	negs	r1, r6
 8091ab4:	4638      	mov	r0, r7
 8091ab6:	f7ff ffb5 	bl	8091a24 <_ZN5Print11printNumberEmh>
 8091aba:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 8091abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08091ac0 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 8091ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 8091ac4:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 8091ac6:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 8091ac8:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 8091aca:	4617      	mov	r7, r2
 8091acc:	461e      	mov	r6, r3
 8091ace:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 8091ad2:	f001 fbf5 	bl	80932c0 <__aeabi_dcmpun>
 8091ad6:	b108      	cbz	r0, 8091adc <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8091ad8:	4947      	ldr	r1, [pc, #284]	; (8091bf8 <_ZN5Print10printFloatEdh+0x138>)
 8091ada:	e012      	b.n	8091b02 <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 8091adc:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8091ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8091ae4:	4b45      	ldr	r3, [pc, #276]	; (8091bfc <_ZN5Print10printFloatEdh+0x13c>)
 8091ae6:	4638      	mov	r0, r7
 8091ae8:	4621      	mov	r1, r4
 8091aea:	f001 fbe9 	bl	80932c0 <__aeabi_dcmpun>
 8091aee:	b968      	cbnz	r0, 8091b0c <_ZN5Print10printFloatEdh+0x4c>
 8091af0:	f04f 32ff 	mov.w	r2, #4294967295
 8091af4:	4b41      	ldr	r3, [pc, #260]	; (8091bfc <_ZN5Print10printFloatEdh+0x13c>)
 8091af6:	4638      	mov	r0, r7
 8091af8:	4621      	mov	r1, r4
 8091afa:	f001 fbc3 	bl	8093284 <__aeabi_dcmple>
 8091afe:	b928      	cbnz	r0, 8091b0c <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8091b00:	493f      	ldr	r1, [pc, #252]	; (8091c00 <_ZN5Print10printFloatEdh+0x140>)
 8091b02:	4640      	mov	r0, r8
 8091b04:	f7ef ff2c 	bl	8081960 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 8091b08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 8091b0c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8091b10:	4b3c      	ldr	r3, [pc, #240]	; (8091c04 <_ZN5Print10printFloatEdh+0x144>)
 8091b12:	4638      	mov	r0, r7
 8091b14:	4631      	mov	r1, r6
 8091b16:	f001 fbc9 	bl	80932ac <__aeabi_dcmpgt>
 8091b1a:	b108      	cbz	r0, 8091b20 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8091b1c:	493a      	ldr	r1, [pc, #232]	; (8091c08 <_ZN5Print10printFloatEdh+0x148>)
 8091b1e:	e7f0      	b.n	8091b02 <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 8091b20:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8091b24:	4b39      	ldr	r3, [pc, #228]	; (8091c0c <_ZN5Print10printFloatEdh+0x14c>)
 8091b26:	4638      	mov	r0, r7
 8091b28:	4631      	mov	r1, r6
 8091b2a:	f001 fba1 	bl	8093270 <__aeabi_dcmplt>
 8091b2e:	2800      	cmp	r0, #0
 8091b30:	d1f4      	bne.n	8091b1c <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 8091b32:	2200      	movs	r2, #0
 8091b34:	2300      	movs	r3, #0
 8091b36:	4638      	mov	r0, r7
 8091b38:	4631      	mov	r1, r6
 8091b3a:	f001 fb99 	bl	8093270 <__aeabi_dcmplt>
 8091b3e:	b138      	cbz	r0, 8091b50 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 8091b40:	212d      	movs	r1, #45	; 0x2d
 8091b42:	4640      	mov	r0, r8
 8091b44:	f7ff ff55 	bl	80919f2 <_ZN5Print5printEc>
     number = -number;
 8091b48:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 8091b4c:	4604      	mov	r4, r0
 8091b4e:	e000      	b.n	8091b52 <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 8091b50:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 8091b52:	492f      	ldr	r1, [pc, #188]	; (8091c10 <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 8091b54:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 8091b58:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 8091b5a:	fa5f f389 	uxtb.w	r3, r9
 8091b5e:	429d      	cmp	r5, r3
 8091b60:	d906      	bls.n	8091b70 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 8091b62:	2200      	movs	r2, #0
 8091b64:	4b2b      	ldr	r3, [pc, #172]	; (8091c14 <_ZN5Print10printFloatEdh+0x154>)
 8091b66:	f001 fa3b 	bl	8092fe0 <__aeabi_ddiv>
 8091b6a:	f109 0901 	add.w	r9, r9, #1
 8091b6e:	e7f4      	b.n	8091b5a <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 8091b70:	463a      	mov	r2, r7
 8091b72:	4633      	mov	r3, r6
 8091b74:	f000 ff58 	bl	8092a28 <__adddf3>
 8091b78:	460f      	mov	r7, r1
 8091b7a:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 8091b7c:	f001 fbde 	bl	809333c <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8091b80:	220a      	movs	r2, #10
 8091b82:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 8091b84:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8091b86:	4640      	mov	r0, r8
 8091b88:	f7ff ff4c 	bl	8091a24 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 8091b8c:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 8091b8e:	b37d      	cbz	r5, 8091bf0 <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 8091b90:	4648      	mov	r0, r9
 8091b92:	f001 f885 	bl	8092ca0 <__aeabi_ui2d>
 8091b96:	4602      	mov	r2, r0
 8091b98:	460b      	mov	r3, r1
 8091b9a:	4630      	mov	r0, r6
 8091b9c:	4639      	mov	r1, r7
 8091b9e:	f000 ff41 	bl	8092a24 <__aeabi_dsub>
 8091ba2:	4606      	mov	r6, r0
 8091ba4:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8091ba6:	4640      	mov	r0, r8
 8091ba8:	491b      	ldr	r1, [pc, #108]	; (8091c18 <_ZN5Print10printFloatEdh+0x158>)
 8091baa:	f7ef fed9 	bl	8081960 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 8091bae:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 8091bb0:	4b18      	ldr	r3, [pc, #96]	; (8091c14 <_ZN5Print10printFloatEdh+0x154>)
 8091bb2:	2200      	movs	r2, #0
 8091bb4:	4630      	mov	r0, r6
 8091bb6:	4639      	mov	r1, r7
 8091bb8:	f001 f8e8 	bl	8092d8c <__aeabi_dmul>
 8091bbc:	460f      	mov	r7, r1
 8091bbe:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 8091bc0:	f001 fb94 	bl	80932ec <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 8091bc4:	220a      	movs	r2, #10
 8091bc6:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 8091bc8:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 8091bca:	4640      	mov	r0, r8
 8091bcc:	f7ff ff56 	bl	8091a7c <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 8091bd0:	4404      	add	r4, r0
    remainder -= toPrint;
 8091bd2:	4648      	mov	r0, r9
 8091bd4:	f001 f874 	bl	8092cc0 <__aeabi_i2d>
 8091bd8:	4602      	mov	r2, r0
 8091bda:	460b      	mov	r3, r1
 8091bdc:	4630      	mov	r0, r6
 8091bde:	4639      	mov	r1, r7
 8091be0:	f000 ff20 	bl	8092a24 <__aeabi_dsub>
 8091be4:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 8091be6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 8091bea:	4606      	mov	r6, r0
 8091bec:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 8091bee:	d1df      	bne.n	8091bb0 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 8091bf0:	4620      	mov	r0, r4
 8091bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8091bf6:	bf00      	nop
 8091bf8:	08099ba0 	.word	0x08099ba0
 8091bfc:	7fefffff 	.word	0x7fefffff
 8091c00:	08099ba8 	.word	0x08099ba8
 8091c04:	41efffff 	.word	0x41efffff
 8091c08:	08099ba4 	.word	0x08099ba4
 8091c0c:	c1efffff 	.word	0xc1efffff
 8091c10:	3fe00000 	.word	0x3fe00000
 8091c14:	40240000 	.word	0x40240000
 8091c18:	080970b2 	.word	0x080970b2

08091c1c <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 8091c1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 8091c1e:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 8091c22:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 8091c24:	9100      	str	r1, [sp, #0]
 8091c26:	f7ff ff4b 	bl	8091ac0 <_ZN5Print10printFloatEdh>
 8091c2a:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 8091c2c:	4628      	mov	r0, r5
 8091c2e:	f7ff fee3 	bl	80919f8 <_ZN5Print7printlnEv>
  return n;
}
 8091c32:	4420      	add	r0, r4
 8091c34:	b003      	add	sp, #12
 8091c36:	bd30      	pop	{r4, r5, pc}

08091c38 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 8091c38:	b40c      	push	{r2, r3}
 8091c3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8091c3e:	b087      	sub	sp, #28
 8091c40:	af00      	add	r7, sp, #0
 8091c42:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8091c46:	f854 9b04 	ldr.w	r9, [r4], #4
 8091c4a:	4605      	mov	r5, r0
 8091c4c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 8091c4e:	4623      	mov	r3, r4
 8091c50:	464a      	mov	r2, r9
 8091c52:	2114      	movs	r1, #20
 8091c54:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 8091c56:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 8091c58:	f7ff faa6 	bl	80911a8 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 8091c5c:	2813      	cmp	r0, #19
 8091c5e:	d805      	bhi.n	8091c6c <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8091c60:	1d39      	adds	r1, r7, #4
 8091c62:	4628      	mov	r0, r5
 8091c64:	f7ef fe7c 	bl	8081960 <_ZN5Print5writeEPKc>
 8091c68:	4604      	mov	r4, r0
 8091c6a:	e013      	b.n	8091c94 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 8091c6c:	f100 0308 	add.w	r3, r0, #8
 8091c70:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 8091c74:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 8091c76:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 8091c7a:	1c41      	adds	r1, r0, #1
 8091c7c:	4623      	mov	r3, r4
 8091c7e:	464a      	mov	r2, r9
 8091c80:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 8091c82:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 8091c84:	f7ff fa90 	bl	80911a8 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8091c88:	4669      	mov	r1, sp
 8091c8a:	4628      	mov	r0, r5
 8091c8c:	f7ef fe68 	bl	8081960 <_ZN5Print5writeEPKc>
 8091c90:	4604      	mov	r4, r0
 8091c92:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 8091c94:	b11e      	cbz	r6, 8091c9e <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 8091c96:	4628      	mov	r0, r5
 8091c98:	f7ff feae 	bl	80919f8 <_ZN5Print7printlnEv>
 8091c9c:	4404      	add	r4, r0
    return n;
}
 8091c9e:	4620      	mov	r0, r4
 8091ca0:	371c      	adds	r7, #28
 8091ca2:	46bd      	mov	sp, r7
 8091ca4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8091ca8:	b002      	add	sp, #8
 8091caa:	4770      	bx	lr

08091cac <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8091cac:	4a01      	ldr	r2, [pc, #4]	; (8091cb4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8091cae:	4b02      	ldr	r3, [pc, #8]	; (8091cb8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8091cb0:	601a      	str	r2, [r3, #0]
 8091cb2:	4770      	bx	lr
 8091cb4:	08099c52 	.word	0x08099c52
 8091cb8:	20003a4c 	.word	0x20003a4c

08091cbc <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 8091cbc:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 8091cbe:	2000      	movs	r0, #0
 8091cc0:	f7ff fa3a 	bl	8091138 <spark_sync_time_pending>
 8091cc4:	b128      	cbz	r0, 8091cd2 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8091cc6:	f7ff fa2f 	bl	8091128 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 8091cca:	f080 0001 	eor.w	r0, r0, #1
 8091cce:	b2c0      	uxtb	r0, r0
 8091cd0:	bd08      	pop	{r3, pc}
 8091cd2:	2001      	movs	r0, #1
    }
 8091cd4:	bd08      	pop	{r3, pc}
	...

08091cd8 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8091cd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 8091cda:	4b0e      	ldr	r3, [pc, #56]	; (8091d14 <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8091cdc:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 8091cde:	681b      	ldr	r3, [r3, #0]
 8091ce0:	a802      	add	r0, sp, #8
 8091ce2:	4419      	add	r1, r3
 8091ce4:	4b0c      	ldr	r3, [pc, #48]	; (8091d18 <_ZN9TimeClass7timeStrEl+0x40>)
 8091ce6:	681b      	ldr	r3, [r3, #0]
 8091ce8:	4419      	add	r1, r3
 8091cea:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 8091cee:	f002 f82d 	bl	8093d4c <localtime>
        char* ascstr = asctime(calendar_time);
 8091cf2:	f001 ffc7 	bl	8093c84 <asctime>
 8091cf6:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 8091cf8:	f002 f98f 	bl	809401a <strlen>
        ascstr[len-1] = 0; // remove final newline
 8091cfc:	2300      	movs	r3, #0
 8091cfe:	4428      	add	r0, r5
 8091d00:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 8091d04:	4629      	mov	r1, r5
 8091d06:	4620      	mov	r0, r4
 8091d08:	f7ff fdc1 	bl	809188e <_ZN6StringC1EPK19__FlashStringHelper>
}
 8091d0c:	4620      	mov	r0, r4
 8091d0e:	b003      	add	sp, #12
 8091d10:	bd30      	pop	{r4, r5, pc}
 8091d12:	bf00      	nop
 8091d14:	20003a58 	.word	0x20003a58
 8091d18:	20003a54 	.word	0x20003a54

08091d1c <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 8091d1c:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 8091d1e:	2000      	movs	r0, #0
 8091d20:	f7ff f802 	bl	8090d28 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 8091d24:	4604      	mov	r4, r0
 8091d26:	b968      	cbnz	r0, 8091d44 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8091d28:	f7ff f9ae 	bl	8091088 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 8091d2c:	2801      	cmp	r0, #1
 8091d2e:	d10b      	bne.n	8091d48 <_ZN9TimeClass7isValidEv+0x2c>
 8091d30:	4620      	mov	r0, r4
 8091d32:	f7ff f9d1 	bl	80910d8 <system_thread_get_state>
 8091d36:	b938      	cbnz	r0, 8091d48 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 8091d38:	f7ff ffc0 	bl	8091cbc <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8091d3c:	b930      	cbnz	r0, 8091d4c <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 8091d3e:	f7ff f9eb 	bl	8091118 <spark_process>
 8091d42:	e7f9      	b.n	8091d38 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 8091d44:	2001      	movs	r0, #1
 8091d46:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 8091d48:	2000      	movs	r0, #0
 8091d4a:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 8091d4c:	f7ff ffb6 	bl	8091cbc <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 8091d50:	2000      	movs	r0, #0
 8091d52:	f7fe ffe9 	bl	8090d28 <HAL_RTC_Time_Is_Valid>
 8091d56:	3000      	adds	r0, #0
 8091d58:	bf18      	it	ne
 8091d5a:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 8091d5c:	bd10      	pop	{r4, pc}

08091d5e <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 8091d5e:	b508      	push	{r3, lr}
    (void)isValid();
 8091d60:	f7ff ffdc 	bl	8091d1c <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 8091d64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 8091d68:	f7fe bfd6 	b.w	8090d18 <HAL_RTC_Get_UnixTime>

08091d6c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8091d6c:	4b02      	ldr	r3, [pc, #8]	; (8091d78 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8091d6e:	681a      	ldr	r2, [r3, #0]
 8091d70:	4b02      	ldr	r3, [pc, #8]	; (8091d7c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8091d72:	601a      	str	r2, [r3, #0]
 8091d74:	4770      	bx	lr
 8091d76:	bf00      	nop
 8091d78:	20000440 	.word	0x20000440
 8091d7c:	20003a50 	.word	0x20003a50

08091d80 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8091d80:	2100      	movs	r1, #0
 8091d82:	f7ff b991 	b.w	80910a8 <system_delay_ms>

08091d86 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8091d86:	b510      	push	{r4, lr}
 8091d88:	4604      	mov	r4, r0
 8091d8a:	f7fd ff86 	bl	808fc9a <_ZNSt14_Function_baseD1Ev>
 8091d8e:	4620      	mov	r0, r4
 8091d90:	bd10      	pop	{r4, pc}

08091d92 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
 8091d92:	b510      	push	{r4, lr}
 8091d94:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
 8091d96:	f7ff f967 	bl	8091068 <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
 8091d9a:	4284      	cmp	r4, r0
 8091d9c:	d008      	beq.n	8091db0 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
 8091d9e:	b11c      	cbz	r4, 8091da8 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
 8091da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
 8091da4:	f7ff b950 	b.w	8091048 <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
 8091da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
 8091dac:	f7ff b954 	b.w	8091058 <LED_Signaling_Stop>
 8091db0:	bd10      	pop	{r4, pc}

08091db2 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
 8091db2:	b570      	push	{r4, r5, r6, lr}
 8091db4:	4605      	mov	r5, r0
 8091db6:	460e      	mov	r6, r1
 8091db8:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
 8091dba:	f7ff f955 	bl	8091068 <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
 8091dbe:	b150      	cbz	r0, 8091dd6 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
 8091dc0:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
 8091dc4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8091dc8:	f7ff f936 	bl	8091038 <LED_SetSignalingColor>
    LED_On(LED_RGB);
}
 8091dcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
 8091dd0:	20e7      	movs	r0, #231	; 0xe7
 8091dd2:	f7ff b951 	b.w	8091078 <LED_On>
 8091dd6:	bd70      	pop	{r4, r5, r6, pc}

08091dd8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8091dd8:	4803      	ldr	r0, [pc, #12]	; (8091de8 <_GLOBAL__sub_I_RGB+0x10>)
 8091dda:	2300      	movs	r3, #0
 8091ddc:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8091dde:	4a03      	ldr	r2, [pc, #12]	; (8091dec <_GLOBAL__sub_I_RGB+0x14>)
 8091de0:	4903      	ldr	r1, [pc, #12]	; (8091df0 <_GLOBAL__sub_I_RGB+0x18>)
 8091de2:	f000 bb49 	b.w	8092478 <__aeabi_atexit>
 8091de6:	bf00      	nop
 8091de8:	20003a5c 	.word	0x20003a5c
 8091dec:	20000538 	.word	0x20000538
 8091df0:	08091d87 	.word	0x08091d87

08091df4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8091df4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8091df6:	4b18      	ldr	r3, [pc, #96]	; (8091e58 <serialEventRun+0x64>)
 8091df8:	b133      	cbz	r3, 8091e08 <serialEventRun+0x14>
 8091dfa:	f000 f937 	bl	809206c <_Z16_fetch_usbserialv>
 8091dfe:	6803      	ldr	r3, [r0, #0]
 8091e00:	691b      	ldr	r3, [r3, #16]
 8091e02:	4798      	blx	r3
 8091e04:	2800      	cmp	r0, #0
 8091e06:	dc1e      	bgt.n	8091e46 <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 8091e08:	4b14      	ldr	r3, [pc, #80]	; (8091e5c <serialEventRun+0x68>)
 8091e0a:	b133      	cbz	r3, 8091e1a <serialEventRun+0x26>
 8091e0c:	f000 f9fa 	bl	8092204 <_Z22__fetch_global_Serial1v>
 8091e10:	6803      	ldr	r3, [r0, #0]
 8091e12:	691b      	ldr	r3, [r3, #16]
 8091e14:	4798      	blx	r3
 8091e16:	2800      	cmp	r0, #0
 8091e18:	dc18      	bgt.n	8091e4c <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 8091e1a:	4b11      	ldr	r3, [pc, #68]	; (8091e60 <serialEventRun+0x6c>)
 8091e1c:	b10b      	cbz	r3, 8091e22 <serialEventRun+0x2e>
 8091e1e:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 8091e22:	4b10      	ldr	r3, [pc, #64]	; (8091e64 <serialEventRun+0x70>)
 8091e24:	b10b      	cbz	r3, 8091e2a <serialEventRun+0x36>
 8091e26:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 8091e2a:	4b0f      	ldr	r3, [pc, #60]	; (8091e68 <serialEventRun+0x74>)
 8091e2c:	b10b      	cbz	r3, 8091e32 <serialEventRun+0x3e>
 8091e2e:	f7fd fd87 	bl	808f940 <_Z15serialEventRun5v>
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8091e32:	4b0e      	ldr	r3, [pc, #56]	; (8091e6c <serialEventRun+0x78>)
 8091e34:	b17b      	cbz	r3, 8091e56 <serialEventRun+0x62>
 8091e36:	f000 f955 	bl	80920e4 <_Z17_fetch_usbserial1v>
 8091e3a:	6803      	ldr	r3, [r0, #0]
 8091e3c:	691b      	ldr	r3, [r3, #16]
 8091e3e:	4798      	blx	r3
 8091e40:	2800      	cmp	r0, #0
 8091e42:	dc06      	bgt.n	8091e52 <serialEventRun+0x5e>
 8091e44:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8091e46:	f3af 8000 	nop.w
 8091e4a:	e7dd      	b.n	8091e08 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 8091e4c:	f3af 8000 	nop.w
 8091e50:	e7e3      	b.n	8091e1a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 8091e52:	f3af 8000 	nop.w
 8091e56:	bd08      	pop	{r3, pc}
	...
 8091e68:	0808f941 	.word	0x0808f941
 8091e6c:	00000000 	.word	0x00000000

08091e70 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 8091e70:	b508      	push	{r3, lr}
	serialEventRun();
 8091e72:	f7ff ffbf 	bl	8091df4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8091e76:	f7fe ff47 	bl	8090d08 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8091e7a:	4b01      	ldr	r3, [pc, #4]	; (8091e80 <_post_loop+0x10>)
 8091e7c:	6018      	str	r0, [r3, #0]
 8091e7e:	bd08      	pop	{r3, pc}
 8091e80:	20003f54 	.word	0x20003f54

08091e84 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8091e84:	4802      	ldr	r0, [pc, #8]	; (8091e90 <_Z33system_initialize_user_backup_ramv+0xc>)
 8091e86:	4a03      	ldr	r2, [pc, #12]	; (8091e94 <_Z33system_initialize_user_backup_ramv+0x10>)
 8091e88:	4903      	ldr	r1, [pc, #12]	; (8091e98 <_Z33system_initialize_user_backup_ramv+0x14>)
 8091e8a:	1a12      	subs	r2, r2, r0
 8091e8c:	f002 b869 	b.w	8093f62 <memcpy>
 8091e90:	40024000 	.word	0x40024000
 8091e94:	40024004 	.word	0x40024004
 8091e98:	0809a1c8 	.word	0x0809a1c8

08091e9c <_Z26usb_request_custom_handlerPcjjPj>:
#ifdef USB_VENDOR_REQUEST_ENABLE

// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}
 8091e9c:	2000      	movs	r0, #0
 8091e9e:	4770      	bx	lr

08091ea0 <_Z23usb_request_app_handlerP10USBRequestPv>:

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 8091ea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch (req->type) {
 8091ea2:	6843      	ldr	r3, [r0, #4]
// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 8091ea4:	4604      	mov	r4, r0
    switch (req->type) {
 8091ea6:	2b0a      	cmp	r3, #10
 8091ea8:	d00e      	beq.n	8091ec8 <_Z23usb_request_app_handlerP10USBRequestPv+0x28>
 8091eaa:	2b50      	cmp	r3, #80	; 0x50
 8091eac:	d11c      	bne.n	8091ee8 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
 8091eae:	4b10      	ldr	r3, [pc, #64]	; (8091ef0 <_Z23usb_request_app_handlerP10USBRequestPv+0x50>)
 8091eb0:	681d      	ldr	r5, [r3, #0]
 8091eb2:	b1cd      	cbz	r5, 8091ee8 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
 8091eb4:	7d03      	ldrb	r3, [r0, #20]
 8091eb6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8091eba:	9300      	str	r3, [sp, #0]
 8091ebc:	68c2      	ldr	r2, [r0, #12]
 8091ebe:	f100 0310 	add.w	r3, r0, #16
 8091ec2:	6880      	ldr	r0, [r0, #8]
 8091ec4:	47a8      	blx	r5
 8091ec6:	e007      	b.n	8091ed8 <_Z23usb_request_app_handlerP10USBRequestPv+0x38>
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
        return true;
    }
#endif
    case USB_REQUEST_CUSTOM: {
        if (!usb_request_custom_handler(req->data, USB_REQUEST_BUFFER_SIZE, req->request_size, &req->reply_size)) {
 8091ec8:	f100 0310 	add.w	r3, r0, #16
 8091ecc:	68c2      	ldr	r2, [r0, #12]
 8091ece:	f44f 7100 	mov.w	r1, #512	; 0x200
 8091ed2:	6880      	ldr	r0, [r0, #8]
 8091ed4:	f7ff ffe2 	bl	8091e9c <_Z26usb_request_custom_handlerPcjjPj>
 8091ed8:	b130      	cbz	r0, 8091ee8 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
            return false;
        }
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
 8091eda:	2200      	movs	r2, #0
 8091edc:	4620      	mov	r0, r4
 8091ede:	4611      	mov	r1, r2
 8091ee0:	f7ff f90a 	bl	80910f8 <system_set_usb_request_result>
        return true;
 8091ee4:	2001      	movs	r0, #1
 8091ee6:	e000      	b.n	8091eea <_Z23usb_request_app_handlerP10USBRequestPv+0x4a>
    switch (req->type) {
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
                req->request_size, &req->reply_size, (DataFormat)req->format)) {
            return false;
 8091ee8:	2000      	movs	r0, #0
        return true;
    }
    default:
        return false; // Unsupported request type
    }
}
 8091eea:	b003      	add	sp, #12
 8091eec:	bd30      	pop	{r4, r5, pc}
 8091eee:	bf00      	nop
 8091ef0:	20003a6c 	.word	0x20003a6c

08091ef4 <module_user_init_hook>:

#endif // USB_VENDOR_REQUEST_ENABLE

void module_user_init_hook()
{
 8091ef4:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8091ef6:	4c0c      	ldr	r4, [pc, #48]	; (8091f28 <module_user_init_hook+0x34>)
 8091ef8:	4d0c      	ldr	r5, [pc, #48]	; (8091f2c <module_user_init_hook+0x38>)
 8091efa:	6823      	ldr	r3, [r4, #0]
 8091efc:	42ab      	cmp	r3, r5
 8091efe:	4b0c      	ldr	r3, [pc, #48]	; (8091f30 <module_user_init_hook+0x3c>)
 8091f00:	bf0c      	ite	eq
 8091f02:	2201      	moveq	r2, #1
 8091f04:	2200      	movne	r2, #0
 8091f06:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8091f08:	d002      	beq.n	8091f10 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 8091f0a:	f7ff ffbb 	bl	8091e84 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8091f0e:	6025      	str	r5, [r4, #0]
    /* for dynamically linked user part, set the random seed if the user
     * app defines random_seed_from_cloud.
     */
// todo - add a RNG define for that capability
#if defined(STM32F2XX)
    if (random_seed_from_cloud) {
 8091f10:	4b08      	ldr	r3, [pc, #32]	; (8091f34 <module_user_init_hook+0x40>)
 8091f12:	b11b      	cbz	r3, 8091f1c <module_user_init_hook+0x28>
    		uint32_t seed = HAL_RNG_GetRandomNumber();
 8091f14:	f7fe fee8 	bl	8090ce8 <HAL_RNG_GetRandomNumber>
    		random_seed_from_cloud(seed);
 8091f18:	f3af 8000 	nop.w
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
#endif
}
 8091f1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    		random_seed_from_cloud(seed);
    }
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
 8091f20:	2100      	movs	r1, #0
 8091f22:	4805      	ldr	r0, [pc, #20]	; (8091f38 <module_user_init_hook+0x44>)
 8091f24:	f7ff b8e0 	b.w	80910e8 <system_set_usb_request_app_handler>
 8091f28:	40024000 	.word	0x40024000
 8091f2c:	9a271c1e 	.word	0x9a271c1e
 8091f30:	20003a70 	.word	0x20003a70
 8091f34:	00000000 	.word	0x00000000
 8091f38:	08091ea1 	.word	0x08091ea1

08091f3c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8091f3c:	4770      	bx	lr

08091f3e <_ZN9IPAddressD0Ev>:
 8091f3e:	b510      	push	{r4, lr}
 8091f40:	4604      	mov	r4, r0
 8091f42:	f7ee f8ae 	bl	80800a2 <_ZdlPv>
 8091f46:	4620      	mov	r0, r4
 8091f48:	bd10      	pop	{r4, pc}

08091f4a <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8091f4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8091f4c:	460f      	mov	r7, r1
 8091f4e:	f100 0608 	add.w	r6, r0, #8
 8091f52:	1d05      	adds	r5, r0, #4
 8091f54:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8091f56:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8091f5a:	220a      	movs	r2, #10
 8091f5c:	4638      	mov	r0, r7
 8091f5e:	f7ff fd8b 	bl	8091a78 <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8091f62:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8091f64:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8091f66:	d007      	beq.n	8091f78 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 8091f68:	2c00      	cmp	r4, #0
 8091f6a:	d0f4      	beq.n	8091f56 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8091f6c:	212e      	movs	r1, #46	; 0x2e
 8091f6e:	4638      	mov	r0, r7
 8091f70:	f7ff fd3f 	bl	80919f2 <_ZN5Print5printEc>
 8091f74:	4404      	add	r4, r0
 8091f76:	e7ee      	b.n	8091f56 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 8091f78:	4620      	mov	r0, r4
 8091f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08091f7c <_ZN9IPAddressC1Ev>:
#include "spark_wiring_ipaddress.h"
#include "spark_wiring_print.h"
#include "spark_wiring_platform.h"
#include "string.h"

IPAddress::IPAddress()
 8091f7c:	4a02      	ldr	r2, [pc, #8]	; (8091f88 <_ZN9IPAddressC1Ev+0xc>)
 8091f7e:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8091f80:	2200      	movs	r2, #0
 8091f82:	6042      	str	r2, [r0, #4]
{
    clear();
}
 8091f84:	4770      	bx	lr
 8091f86:	bf00      	nop
 8091f88:	08099cac 	.word	0x08099cac

08091f8c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 8091f8c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8091f8e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8091f92:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8091f96:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8091f9a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8091f9e:	6041      	str	r1, [r0, #4]
 8091fa0:	bd10      	pop	{r4, pc}
	...

08091fa4 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8091fa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8091fa6:	4d04      	ldr	r5, [pc, #16]	; (8091fb8 <_ZN9IPAddressC1Ehhhh+0x14>)
 8091fa8:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8091faa:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8091fae:	9500      	str	r5, [sp, #0]
 8091fb0:	f7ff ffec 	bl	8091f8c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8091fb4:	b003      	add	sp, #12
 8091fb6:	bd30      	pop	{r4, r5, pc}
 8091fb8:	08099cac 	.word	0x08099cac

08091fbc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8091fbc:	7441      	strb	r1, [r0, #17]
 8091fbe:	4770      	bx	lr

08091fc0 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 8091fc0:	4770      	bx	lr

08091fc2 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 8091fc2:	2100      	movs	r1, #0
 8091fc4:	7c00      	ldrb	r0, [r0, #16]
 8091fc6:	f7ff b81f 	b.w	8091008 <HAL_USB_USART_Receive_Data>

08091fca <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 8091fca:	2101      	movs	r1, #1
 8091fcc:	7c00      	ldrb	r0, [r0, #16]
 8091fce:	f7ff b81b 	b.w	8091008 <HAL_USB_USART_Receive_Data>

08091fd2 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 8091fd2:	7c00      	ldrb	r0, [r0, #16]
 8091fd4:	f7ff b810 	b.w	8090ff8 <HAL_USB_USART_Available_Data_For_Write>

08091fd8 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 8091fd8:	7c00      	ldrb	r0, [r0, #16]
 8091fda:	f7ff b805 	b.w	8090fe8 <HAL_USB_USART_Available_Data>

08091fde <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 8091fde:	b538      	push	{r3, r4, r5, lr}
 8091fe0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8091fe2:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 8091fe4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8091fe6:	f7ff f807 	bl	8090ff8 <HAL_USB_USART_Available_Data_For_Write>
 8091fea:	2800      	cmp	r0, #0
 8091fec:	dc01      	bgt.n	8091ff2 <_ZN9USBSerial5writeEh+0x14>
 8091fee:	7c60      	ldrb	r0, [r4, #17]
 8091ff0:	b120      	cbz	r0, 8091ffc <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 8091ff2:	4629      	mov	r1, r5
 8091ff4:	7c20      	ldrb	r0, [r4, #16]
 8091ff6:	f7ff f80f 	bl	8091018 <HAL_USB_USART_Send_Data>
    return 1;
 8091ffa:	2001      	movs	r0, #1
  }
  return 0;
}
 8091ffc:	bd38      	pop	{r3, r4, r5, pc}

08091ffe <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 8091ffe:	7c00      	ldrb	r0, [r0, #16]
 8092000:	f7ff b812 	b.w	8091028 <HAL_USB_USART_Flush_Data>

08092004 <_ZN9USBSerialD0Ev>:
 8092004:	b510      	push	{r4, lr}
 8092006:	4604      	mov	r4, r0
 8092008:	f7ee f84b 	bl	80800a2 <_ZdlPv>
 809200c:	4620      	mov	r0, r4
 809200e:	bd10      	pop	{r4, pc}

08092010 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8092010:	b510      	push	{r4, lr}
 8092012:	4604      	mov	r4, r0
 8092014:	2300      	movs	r3, #0
 8092016:	6063      	str	r3, [r4, #4]
 8092018:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 809201c:	60a3      	str	r3, [r4, #8]
 809201e:	4b05      	ldr	r3, [pc, #20]	; (8092034 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 8092020:	4608      	mov	r0, r1
 8092022:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8092024:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 8092026:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 8092028:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 809202a:	4611      	mov	r1, r2
 809202c:	f7fe ffcc 	bl	8090fc8 <HAL_USB_USART_Init>
}
 8092030:	4620      	mov	r0, r4
 8092032:	bd10      	pop	{r4, pc}
 8092034:	08099cc0 	.word	0x08099cc0

08092038 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 8092038:	2200      	movs	r2, #0
 809203a:	7c00      	ldrb	r0, [r0, #16]
 809203c:	f7fe bfcc 	b.w	8090fd8 <HAL_USB_USART_Begin>

08092040 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8092040:	b510      	push	{r4, lr}
 8092042:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8092044:	2214      	movs	r2, #20
 8092046:	2100      	movs	r1, #0
 8092048:	f001 ffb1 	bl	8093fae <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 809204c:	4b05      	ldr	r3, [pc, #20]	; (8092064 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 809204e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8092050:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8092052:	4b05      	ldr	r3, [pc, #20]	; (8092068 <_Z19acquireSerialBufferv+0x28>)
 8092054:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8092056:	f240 1301 	movw	r3, #257	; 0x101
 809205a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 809205c:	2381      	movs	r3, #129	; 0x81
 809205e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8092060:	bd10      	pop	{r4, pc}
 8092062:	bf00      	nop
 8092064:	20003af9 	.word	0x20003af9
 8092068:	20003a78 	.word	0x20003a78

0809206c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 809206c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 809206e:	4d0e      	ldr	r5, [pc, #56]	; (80920a8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 8092070:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8092072:	a801      	add	r0, sp, #4
 8092074:	f7ff ffe4 	bl	8092040 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8092078:	6829      	ldr	r1, [r5, #0]
 809207a:	f011 0401 	ands.w	r4, r1, #1
 809207e:	d110      	bne.n	80920a2 <_Z16_fetch_usbserialv+0x36>
 8092080:	4628      	mov	r0, r5
 8092082:	f7ee f812 	bl	80800aa <__cxa_guard_acquire>
 8092086:	b160      	cbz	r0, 80920a2 <_Z16_fetch_usbserialv+0x36>
 8092088:	aa01      	add	r2, sp, #4
 809208a:	4621      	mov	r1, r4
 809208c:	4807      	ldr	r0, [pc, #28]	; (80920ac <_Z16_fetch_usbserialv+0x40>)
 809208e:	f7ff ffbf 	bl	8092010 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8092092:	4628      	mov	r0, r5
 8092094:	f7ee f80e 	bl	80800b4 <__cxa_guard_release>
 8092098:	4a05      	ldr	r2, [pc, #20]	; (80920b0 <_Z16_fetch_usbserialv+0x44>)
 809209a:	4906      	ldr	r1, [pc, #24]	; (80920b4 <_Z16_fetch_usbserialv+0x48>)
 809209c:	4803      	ldr	r0, [pc, #12]	; (80920ac <_Z16_fetch_usbserialv+0x40>)
 809209e:	f000 f9eb 	bl	8092478 <__aeabi_atexit>
	return _usbserial;
}
 80920a2:	4802      	ldr	r0, [pc, #8]	; (80920ac <_Z16_fetch_usbserialv+0x40>)
 80920a4:	b007      	add	sp, #28
 80920a6:	bd30      	pop	{r4, r5, pc}
 80920a8:	20003a74 	.word	0x20003a74
 80920ac:	20003bfc 	.word	0x20003bfc
 80920b0:	20000538 	.word	0x20000538
 80920b4:	08091fc1 	.word	0x08091fc1

080920b8 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80920b8:	b510      	push	{r4, lr}
 80920ba:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80920bc:	2214      	movs	r2, #20
 80920be:	2100      	movs	r1, #0
 80920c0:	f001 ff75 	bl	8093fae <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80920c4:	4b05      	ldr	r3, [pc, #20]	; (80920dc <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80920c6:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80920c8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80920ca:	4b05      	ldr	r3, [pc, #20]	; (80920e0 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80920cc:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80920ce:	f240 1301 	movw	r3, #257	; 0x101
 80920d2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80920d4:	2381      	movs	r3, #129	; 0x81
 80920d6:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80920d8:	bd10      	pop	{r4, pc}
 80920da:	bf00      	nop
 80920dc:	20003cac 	.word	0x20003cac
 80920e0:	20003c14 	.word	0x20003c14

080920e4 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80920e4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80920e6:	4c0e      	ldr	r4, [pc, #56]	; (8092120 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80920e8:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80920ea:	a801      	add	r0, sp, #4
 80920ec:	f7ff ffe4 	bl	80920b8 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80920f0:	6823      	ldr	r3, [r4, #0]
 80920f2:	07db      	lsls	r3, r3, #31
 80920f4:	d410      	bmi.n	8092118 <_Z17_fetch_usbserial1v+0x34>
 80920f6:	4620      	mov	r0, r4
 80920f8:	f7ed ffd7 	bl	80800aa <__cxa_guard_acquire>
 80920fc:	b160      	cbz	r0, 8092118 <_Z17_fetch_usbserial1v+0x34>
 80920fe:	aa01      	add	r2, sp, #4
 8092100:	2101      	movs	r1, #1
 8092102:	4808      	ldr	r0, [pc, #32]	; (8092124 <_Z17_fetch_usbserial1v+0x40>)
 8092104:	f7ff ff84 	bl	8092010 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8092108:	4620      	mov	r0, r4
 809210a:	f7ed ffd3 	bl	80800b4 <__cxa_guard_release>
 809210e:	4a06      	ldr	r2, [pc, #24]	; (8092128 <_Z17_fetch_usbserial1v+0x44>)
 8092110:	4906      	ldr	r1, [pc, #24]	; (809212c <_Z17_fetch_usbserial1v+0x48>)
 8092112:	4804      	ldr	r0, [pc, #16]	; (8092124 <_Z17_fetch_usbserial1v+0x40>)
 8092114:	f000 f9b0 	bl	8092478 <__aeabi_atexit>
  return _usbserial1;
}
 8092118:	4802      	ldr	r0, [pc, #8]	; (8092124 <_Z17_fetch_usbserial1v+0x40>)
 809211a:	b006      	add	sp, #24
 809211c:	bd10      	pop	{r4, pc}
 809211e:	bf00      	nop
 8092120:	20003c10 	.word	0x20003c10
 8092124:	20003c98 	.word	0x20003c98
 8092128:	20000538 	.word	0x20000538
 809212c:	08091fc1 	.word	0x08091fc1

08092130 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8092130:	2200      	movs	r2, #0
 8092132:	4611      	mov	r1, r2
 8092134:	4610      	mov	r0, r2
 8092136:	f7fe bfe7 	b.w	8091108 <network_ready>
	...

0809213c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    NetworkClass& Network = Cellular;
}
 809213c:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 809213e:	4d0b      	ldr	r5, [pc, #44]	; (809216c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x30>)
 8092140:	2428      	movs	r4, #40	; 0x28
 8092142:	4622      	mov	r2, r4
 8092144:	2100      	movs	r1, #0
 8092146:	4628      	mov	r0, r5
 8092148:	f001 ff31 	bl	8093fae <memset>
        cid = -1;
 809214c:	f04f 33ff 	mov.w	r3, #4294967295
 8092150:	606b      	str	r3, [r5, #4]
        size = sizeof(*this);
 8092152:	802c      	strh	r4, [r5, #0]
#include "inet_hal.h"
#include "spark_wiring_cellular_printable.h"

namespace spark {

class CellularClass : public NetworkClass
 8092154:	4d06      	ldr	r5, [pc, #24]	; (8092170 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
 8092156:	4b07      	ldr	r3, [pc, #28]	; (8092174 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
 8092158:	4628      	mov	r0, r5
    char iccid[21];
    char imei[16];

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
 809215a:	4622      	mov	r2, r4
 809215c:	f840 3b04 	str.w	r3, [r0], #4
 8092160:	2100      	movs	r1, #0
 8092162:	f001 ff24 	bl	8093fae <memset>
        size = sizeof(*this);
 8092166:	80ac      	strh	r4, [r5, #4]
 8092168:	bd38      	pop	{r3, r4, r5, pc}
 809216a:	bf00      	nop
 809216c:	20003ddc 	.word	0x20003ddc
 8092170:	20003db0 	.word	0x20003db0
 8092174:	08099cf0 	.word	0x08099cf0

08092178 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8092178:	7441      	strb	r1, [r0, #17]
 809217a:	4770      	bx	lr

0809217c <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 809217c:	7c00      	ldrb	r0, [r0, #16]
 809217e:	f7fe be6b 	b.w	8090e58 <HAL_USART_Available_Data_For_Write>

08092182 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 8092182:	7c00      	ldrb	r0, [r0, #16]
 8092184:	f7fe be40 	b.w	8090e08 <HAL_USART_Available_Data>

08092188 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 8092188:	7c00      	ldrb	r0, [r0, #16]
 809218a:	f7fe be4d 	b.w	8090e28 <HAL_USART_Peek_Data>

0809218e <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 809218e:	7c00      	ldrb	r0, [r0, #16]
 8092190:	f7fe be42 	b.w	8090e18 <HAL_USART_Read_Data>

08092194 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 8092194:	7c00      	ldrb	r0, [r0, #16]
 8092196:	f7fe be4f 	b.w	8090e38 <HAL_USART_Flush_Data>

0809219a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 809219a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 809219c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 809219e:	4604      	mov	r4, r0
 80921a0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80921a2:	b925      	cbnz	r5, 80921ae <_ZN11USARTSerial5writeEh+0x14>
 80921a4:	7c00      	ldrb	r0, [r0, #16]
 80921a6:	f7fe fe57 	bl	8090e58 <HAL_USART_Available_Data_For_Write>
 80921aa:	2800      	cmp	r0, #0
 80921ac:	dd05      	ble.n	80921ba <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80921ae:	4631      	mov	r1, r6
 80921b0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80921b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80921b6:	f7fe be1f 	b.w	8090df8 <HAL_USART_Write_Data>
  }
  return 0;
}
 80921ba:	4628      	mov	r0, r5
 80921bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080921c0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80921c0:	b510      	push	{r4, lr}
 80921c2:	4604      	mov	r4, r0
 80921c4:	4608      	mov	r0, r1
 80921c6:	4611      	mov	r1, r2
 80921c8:	2200      	movs	r2, #0
 80921ca:	6062      	str	r2, [r4, #4]
 80921cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80921d0:	60a2      	str	r2, [r4, #8]
 80921d2:	4a05      	ldr	r2, [pc, #20]	; (80921e8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80921d4:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80921d6:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80921d8:	2201      	movs	r2, #1
 80921da:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80921dc:	461a      	mov	r2, r3
 80921de:	f7fe fe03 	bl	8090de8 <HAL_USART_Init>
}
 80921e2:	4620      	mov	r0, r4
 80921e4:	bd10      	pop	{r4, pc}
 80921e6:	bf00      	nop
 80921e8:	08099d00 	.word	0x08099d00

080921ec <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 80921ec:	2300      	movs	r3, #0
 80921ee:	7c00      	ldrb	r0, [r0, #16]
 80921f0:	f7fe be3a 	b.w	8090e68 <HAL_USART_BeginConfig>

080921f4 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 80921f4:	2200      	movs	r2, #0
 80921f6:	f7ff bff9 	b.w	80921ec <_ZN11USARTSerial5beginEmm>

080921fa <_ZN11USARTSerialcvbEv>:
  return HAL_USART_Write_NineBitData(_serial, c);
}

USARTSerial::operator bool() {
  return true;
}
 80921fa:	2001      	movs	r0, #1
 80921fc:	4770      	bx	lr

080921fe <_ZN11USARTSerial9isEnabledEv>:

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80921fe:	7c00      	ldrb	r0, [r0, #16]
 8092200:	f7fe be22 	b.w	8090e48 <HAL_USART_Is_Enabled>

08092204 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8092204:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8092206:	4d0c      	ldr	r5, [pc, #48]	; (8092238 <_Z22__fetch_global_Serial1v+0x34>)
 8092208:	6829      	ldr	r1, [r5, #0]
 809220a:	f011 0401 	ands.w	r4, r1, #1
 809220e:	d111      	bne.n	8092234 <_Z22__fetch_global_Serial1v+0x30>
 8092210:	4628      	mov	r0, r5
 8092212:	f7ed ff4a 	bl	80800aa <__cxa_guard_acquire>
 8092216:	b168      	cbz	r0, 8092234 <_Z22__fetch_global_Serial1v+0x30>
 8092218:	4a08      	ldr	r2, [pc, #32]	; (809223c <_Z22__fetch_global_Serial1v+0x38>)
 809221a:	4621      	mov	r1, r4
 809221c:	4b08      	ldr	r3, [pc, #32]	; (8092240 <_Z22__fetch_global_Serial1v+0x3c>)
 809221e:	4809      	ldr	r0, [pc, #36]	; (8092244 <_Z22__fetch_global_Serial1v+0x40>)
 8092220:	f7ff ffce 	bl	80921c0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8092224:	4628      	mov	r0, r5
 8092226:	f7ed ff45 	bl	80800b4 <__cxa_guard_release>
 809222a:	4a07      	ldr	r2, [pc, #28]	; (8092248 <_Z22__fetch_global_Serial1v+0x44>)
 809222c:	4907      	ldr	r1, [pc, #28]	; (809224c <_Z22__fetch_global_Serial1v+0x48>)
 809222e:	4805      	ldr	r0, [pc, #20]	; (8092244 <_Z22__fetch_global_Serial1v+0x40>)
 8092230:	f000 f922 	bl	8092478 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8092234:	4803      	ldr	r0, [pc, #12]	; (8092244 <_Z22__fetch_global_Serial1v+0x40>)
 8092236:	bd38      	pop	{r3, r4, r5, pc}
 8092238:	20003e9c 	.word	0x20003e9c
 809223c:	20003ea0 	.word	0x20003ea0
 8092240:	20003e18 	.word	0x20003e18
 8092244:	20003e04 	.word	0x20003e04
 8092248:	20000538 	.word	0x20000538
 809224c:	0808f8e5 	.word	0x0808f8e5

08092250 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 8092250:	4770      	bx	lr

08092252 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8092252:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8092254:	4606      	mov	r6, r0
 8092256:	4615      	mov	r5, r2
 8092258:	460c      	mov	r4, r1
 809225a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 809225c:	42bc      	cmp	r4, r7
 809225e:	d006      	beq.n	809226e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8092260:	6833      	ldr	r3, [r6, #0]
 8092262:	f814 1b01 	ldrb.w	r1, [r4], #1
 8092266:	689b      	ldr	r3, [r3, #8]
 8092268:	4630      	mov	r0, r6
 809226a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 809226c:	e7f6      	b.n	809225c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 809226e:	4628      	mov	r0, r5
 8092270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08092272 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 8092272:	2200      	movs	r2, #0
 8092274:	7c00      	ldrb	r0, [r0, #16]
 8092276:	f7fe be1f 	b.w	8090eb8 <HAL_I2C_Write_Data>

0809227a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 809227a:	2100      	movs	r1, #0
 809227c:	7c00      	ldrb	r0, [r0, #16]
 809227e:	f7fe be23 	b.w	8090ec8 <HAL_I2C_Available_Data>

08092282 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 8092282:	2100      	movs	r1, #0
 8092284:	7c00      	ldrb	r0, [r0, #16]
 8092286:	f7fe be27 	b.w	8090ed8 <HAL_I2C_Read_Data>

0809228a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 809228a:	2100      	movs	r1, #0
 809228c:	7c00      	ldrb	r0, [r0, #16]
 809228e:	f7fe be2b 	b.w	8090ee8 <HAL_I2C_Peek_Data>

08092292 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 8092292:	2100      	movs	r1, #0
 8092294:	7c00      	ldrb	r0, [r0, #16]
 8092296:	f7fe be2f 	b.w	8090ef8 <HAL_I2C_Flush_Data>

0809229a <_ZN7TwoWireD0Ev>:
 809229a:	b510      	push	{r4, lr}
 809229c:	4604      	mov	r4, r0
 809229e:	f7ed ff00 	bl	80800a2 <_ZdlPv>
 80922a2:	4620      	mov	r0, r4
 80922a4:	bd10      	pop	{r4, pc}
	...

080922a8 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80922a8:	b510      	push	{r4, lr}
 80922aa:	4604      	mov	r4, r0
 80922ac:	4608      	mov	r0, r1
 80922ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80922b2:	60a3      	str	r3, [r4, #8]
 80922b4:	4b04      	ldr	r3, [pc, #16]	; (80922c8 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80922b6:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80922b8:	7420      	strb	r0, [r4, #16]
 80922ba:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80922bc:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80922be:	f7fe fe2b 	bl	8090f18 <HAL_I2C_Init>

}
 80922c2:	4620      	mov	r0, r4
 80922c4:	bd10      	pop	{r4, pc}
 80922c6:	bf00      	nop
 80922c8:	08099d30 	.word	0x08099d30

080922cc <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80922cc:	2300      	movs	r3, #0
 80922ce:	461a      	mov	r2, r3
 80922d0:	4619      	mov	r1, r3
 80922d2:	7c00      	ldrb	r0, [r0, #16]
 80922d4:	f7fe bdd0 	b.w	8090e78 <HAL_I2C_Begin>

080922d8 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80922d8:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80922da:	2400      	movs	r4, #0
 80922dc:	7c00      	ldrb	r0, [r0, #16]
 80922de:	9400      	str	r4, [sp, #0]
 80922e0:	f7fe fdd2 	bl	8090e88 <HAL_I2C_Request_Data>
  return result;
}
 80922e4:	b2c0      	uxtb	r0, r0
 80922e6:	b002      	add	sp, #8
 80922e8:	bd10      	pop	{r4, pc}

080922ea <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80922ea:	2301      	movs	r3, #1
 80922ec:	f7ff bff4 	b.w	80922d8 <_ZN7TwoWire11requestFromEhhh>

080922f0 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80922f0:	2200      	movs	r2, #0
 80922f2:	7c00      	ldrb	r0, [r0, #16]
 80922f4:	f7fe bdd0 	b.w	8090e98 <HAL_I2C_Begin_Transmission>

080922f8 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80922f8:	2200      	movs	r2, #0
 80922fa:	7c00      	ldrb	r0, [r0, #16]
 80922fc:	f7fe bdd4 	b.w	8090ea8 <HAL_I2C_End_Transmission>

08092300 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 8092300:	2101      	movs	r1, #1
 8092302:	f7ff bff9 	b.w	80922f8 <_ZN7TwoWire15endTransmissionEh>

08092306 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 8092306:	2100      	movs	r1, #0
 8092308:	7c00      	ldrb	r0, [r0, #16]
 809230a:	f7fe bdfd 	b.w	8090f08 <HAL_I2C_Is_Enabled>
	...

08092310 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 8092310:	b510      	push	{r4, lr}
 8092312:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 8092314:	480f      	ldr	r0, [pc, #60]	; (8092354 <pinAvailable+0x44>)
 8092316:	f7ff f800 	bl	809131a <_ZN8SPIClass9isEnabledEv>
 809231a:	b128      	cbz	r0, 8092328 <pinAvailable+0x18>
 809231c:	f1a4 030d 	sub.w	r3, r4, #13
 8092320:	2b02      	cmp	r3, #2
 8092322:	d801      	bhi.n	8092328 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 8092324:	2000      	movs	r0, #0
 8092326:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 8092328:	f000 f886 	bl	8092438 <_Z19__fetch_global_Wirev>
 809232c:	f7ff ffeb 	bl	8092306 <_ZN7TwoWire9isEnabledEv>
 8092330:	b108      	cbz	r0, 8092336 <pinAvailable+0x26>
 8092332:	2c01      	cmp	r4, #1
 8092334:	d9f6      	bls.n	8092324 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 8092336:	f7ff ff65 	bl	8092204 <_Z22__fetch_global_Serial1v>
 809233a:	f7ff ff60 	bl	80921fe <_ZN11USARTSerial9isEnabledEv>
 809233e:	b118      	cbz	r0, 8092348 <pinAvailable+0x38>
 8092340:	f1a4 0312 	sub.w	r3, r4, #18
 8092344:	2b01      	cmp	r3, #1
 8092346:	d9ed      	bls.n	8092324 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 8092348:	2c2e      	cmp	r4, #46	; 0x2e
 809234a:	bf8c      	ite	hi
 809234c:	2000      	movhi	r0, #0
 809234e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 8092350:	bd10      	pop	{r4, pc}
 8092352:	bf00      	nop
 8092354:	20003f24 	.word	0x20003f24

08092358 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8092358:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 809235a:	b538      	push	{r3, r4, r5, lr}
 809235c:	4604      	mov	r4, r0
 809235e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8092360:	d80a      	bhi.n	8092378 <pinMode+0x20>
 8092362:	29ff      	cmp	r1, #255	; 0xff
 8092364:	d008      	beq.n	8092378 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8092366:	f7ff ffd3 	bl	8092310 <pinAvailable>
 809236a:	b128      	cbz	r0, 8092378 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 809236c:	4629      	mov	r1, r5
 809236e:	4620      	mov	r0, r4
}
 8092370:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8092374:	f7fe bc50 	b.w	8090c18 <HAL_Pin_Mode>
 8092378:	bd38      	pop	{r3, r4, r5, pc}

0809237a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 809237a:	b538      	push	{r3, r4, r5, lr}
 809237c:	4604      	mov	r4, r0
 809237e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8092380:	f7fe fc52 	bl	8090c28 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8092384:	28ff      	cmp	r0, #255	; 0xff
 8092386:	d010      	beq.n	80923aa <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 8092388:	2806      	cmp	r0, #6
 809238a:	d804      	bhi.n	8092396 <digitalWrite+0x1c>
 809238c:	234d      	movs	r3, #77	; 0x4d
 809238e:	fa23 f000 	lsr.w	r0, r3, r0
 8092392:	07c3      	lsls	r3, r0, #31
 8092394:	d409      	bmi.n	80923aa <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 8092396:	4620      	mov	r0, r4
 8092398:	f7ff ffba 	bl	8092310 <pinAvailable>
 809239c:	b128      	cbz	r0, 80923aa <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 809239e:	4629      	mov	r1, r5
 80923a0:	4620      	mov	r0, r4
}
 80923a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80923a6:	f7fe bc47 	b.w	8090c38 <HAL_GPIO_Write>
 80923aa:	bd38      	pop	{r3, r4, r5, pc}

080923ac <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80923ac:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80923ae:	4e11      	ldr	r6, [pc, #68]	; (80923f4 <_GLOBAL__sub_I_SPI+0x48>)
 80923b0:	4d11      	ldr	r5, [pc, #68]	; (80923f8 <_GLOBAL__sub_I_SPI+0x4c>)
 80923b2:	4c12      	ldr	r4, [pc, #72]	; (80923fc <_GLOBAL__sub_I_SPI+0x50>)
 80923b4:	2100      	movs	r1, #0
 80923b6:	4630      	mov	r0, r6
 80923b8:	f7fe ff16 	bl	80911e8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80923bc:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80923be:	4e10      	ldr	r6, [pc, #64]	; (8092400 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80923c0:	462a      	mov	r2, r5
 80923c2:	4621      	mov	r1, r4
 80923c4:	f000 f858 	bl	8092478 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80923c8:	2101      	movs	r1, #1
 80923ca:	4630      	mov	r0, r6
 80923cc:	f7fe ff0c 	bl	80911e8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80923d0:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80923d2:	4e0c      	ldr	r6, [pc, #48]	; (8092404 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80923d4:	462a      	mov	r2, r5
 80923d6:	4621      	mov	r1, r4
 80923d8:	f000 f84e 	bl	8092478 <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80923dc:	2102      	movs	r1, #2
 80923de:	4630      	mov	r0, r6
 80923e0:	f7fe ff02 	bl	80911e8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80923e4:	462a      	mov	r2, r5
 80923e6:	4621      	mov	r1, r4
 80923e8:	4630      	mov	r0, r6
 80923ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80923ee:	f000 b843 	b.w	8092478 <__aeabi_atexit>
 80923f2:	bf00      	nop
 80923f4:	20003f24 	.word	0x20003f24
 80923f8:	20000538 	.word	0x20000538
 80923fc:	080911d9 	.word	0x080911d9
 8092400:	20003f34 	.word	0x20003f34
 8092404:	20003f44 	.word	0x20003f44

08092408 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 8092408:	b513      	push	{r0, r1, r4, lr}
 809240a:	4c08      	ldr	r4, [pc, #32]	; (809242c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 809240c:	2300      	movs	r3, #0
 809240e:	461a      	mov	r2, r3
 8092410:	4619      	mov	r1, r3
 8092412:	9300      	str	r3, [sp, #0]
 8092414:	4620      	mov	r0, r4
 8092416:	f7ff fdc5 	bl	8091fa4 <_ZN9IPAddressC1Ehhhh>
 809241a:	4620      	mov	r0, r4
 809241c:	4a04      	ldr	r2, [pc, #16]	; (8092430 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 809241e:	4905      	ldr	r1, [pc, #20]	; (8092434 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8092420:	b002      	add	sp, #8
 8092422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8092426:	f000 b827 	b.w	8092478 <__aeabi_atexit>
 809242a:	bf00      	nop
 809242c:	20003f58 	.word	0x20003f58
 8092430:	20000538 	.word	0x20000538
 8092434:	08091f3d 	.word	0x08091f3d

08092438 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 8092438:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 809243a:	4d0b      	ldr	r5, [pc, #44]	; (8092468 <_Z19__fetch_global_Wirev+0x30>)
 809243c:	6829      	ldr	r1, [r5, #0]
 809243e:	f011 0401 	ands.w	r4, r1, #1
 8092442:	d10f      	bne.n	8092464 <_Z19__fetch_global_Wirev+0x2c>
 8092444:	4628      	mov	r0, r5
 8092446:	f7ed fe30 	bl	80800aa <__cxa_guard_acquire>
 809244a:	b158      	cbz	r0, 8092464 <_Z19__fetch_global_Wirev+0x2c>
 809244c:	4621      	mov	r1, r4
 809244e:	4807      	ldr	r0, [pc, #28]	; (809246c <_Z19__fetch_global_Wirev+0x34>)
 8092450:	f7ff ff2a 	bl	80922a8 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 8092454:	4628      	mov	r0, r5
 8092456:	f7ed fe2d 	bl	80800b4 <__cxa_guard_release>
 809245a:	4a05      	ldr	r2, [pc, #20]	; (8092470 <_Z19__fetch_global_Wirev+0x38>)
 809245c:	4905      	ldr	r1, [pc, #20]	; (8092474 <_Z19__fetch_global_Wirev+0x3c>)
 809245e:	4803      	ldr	r0, [pc, #12]	; (809246c <_Z19__fetch_global_Wirev+0x34>)
 8092460:	f000 f80a 	bl	8092478 <__aeabi_atexit>
	return wire;
}
 8092464:	4801      	ldr	r0, [pc, #4]	; (809246c <_Z19__fetch_global_Wirev+0x34>)
 8092466:	bd38      	pop	{r3, r4, r5, pc}
 8092468:	20003f60 	.word	0x20003f60
 809246c:	20003f64 	.word	0x20003f64
 8092470:	20000538 	.word	0x20000538
 8092474:	08092251 	.word	0x08092251

08092478 <__aeabi_atexit>:
 8092478:	460b      	mov	r3, r1
 809247a:	4601      	mov	r1, r0
 809247c:	4618      	mov	r0, r3
 809247e:	f001 bc51 	b.w	8093d24 <__cxa_atexit>

08092482 <_ZSt25__throw_bad_function_callv>:
 8092482:	b508      	push	{r3, lr}
 8092484:	f7fe fe98 	bl	80911b8 <abort>

08092488 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8092488:	4b18      	ldr	r3, [pc, #96]	; (80924ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 809248a:	681a      	ldr	r2, [r3, #0]
 809248c:	07d1      	lsls	r1, r2, #31
 809248e:	bf5c      	itt	pl
 8092490:	2201      	movpl	r2, #1
 8092492:	601a      	strpl	r2, [r3, #0]
 8092494:	4b16      	ldr	r3, [pc, #88]	; (80924f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8092496:	681a      	ldr	r2, [r3, #0]
 8092498:	07d2      	lsls	r2, r2, #31
 809249a:	bf5c      	itt	pl
 809249c:	2201      	movpl	r2, #1
 809249e:	601a      	strpl	r2, [r3, #0]
 80924a0:	4b14      	ldr	r3, [pc, #80]	; (80924f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80924a2:	681a      	ldr	r2, [r3, #0]
 80924a4:	07d0      	lsls	r0, r2, #31
 80924a6:	bf5c      	itt	pl
 80924a8:	2201      	movpl	r2, #1
 80924aa:	601a      	strpl	r2, [r3, #0]
 80924ac:	4b12      	ldr	r3, [pc, #72]	; (80924f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80924ae:	681a      	ldr	r2, [r3, #0]
 80924b0:	07d1      	lsls	r1, r2, #31
 80924b2:	bf5c      	itt	pl
 80924b4:	2201      	movpl	r2, #1
 80924b6:	601a      	strpl	r2, [r3, #0]
 80924b8:	4b10      	ldr	r3, [pc, #64]	; (80924fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80924ba:	681a      	ldr	r2, [r3, #0]
 80924bc:	07d2      	lsls	r2, r2, #31
 80924be:	bf5c      	itt	pl
 80924c0:	2201      	movpl	r2, #1
 80924c2:	601a      	strpl	r2, [r3, #0]
 80924c4:	4b0e      	ldr	r3, [pc, #56]	; (8092500 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80924c6:	681a      	ldr	r2, [r3, #0]
 80924c8:	07d0      	lsls	r0, r2, #31
 80924ca:	bf5c      	itt	pl
 80924cc:	2201      	movpl	r2, #1
 80924ce:	601a      	strpl	r2, [r3, #0]
 80924d0:	4b0c      	ldr	r3, [pc, #48]	; (8092504 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80924d2:	681a      	ldr	r2, [r3, #0]
 80924d4:	07d1      	lsls	r1, r2, #31
 80924d6:	bf5c      	itt	pl
 80924d8:	2201      	movpl	r2, #1
 80924da:	601a      	strpl	r2, [r3, #0]
 80924dc:	4b0a      	ldr	r3, [pc, #40]	; (8092508 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80924de:	681a      	ldr	r2, [r3, #0]
 80924e0:	07d2      	lsls	r2, r2, #31
 80924e2:	bf5c      	itt	pl
 80924e4:	2201      	movpl	r2, #1
 80924e6:	601a      	strpl	r2, [r3, #0]
 80924e8:	4770      	bx	lr
 80924ea:	bf00      	nop
 80924ec:	20003f94 	.word	0x20003f94
 80924f0:	20003f90 	.word	0x20003f90
 80924f4:	20003f8c 	.word	0x20003f8c
 80924f8:	20003f88 	.word	0x20003f88
 80924fc:	20003f84 	.word	0x20003f84
 8092500:	20003f80 	.word	0x20003f80
 8092504:	20003f7c 	.word	0x20003f7c
 8092508:	20003f78 	.word	0x20003f78

0809250c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 809250c:	4b24      	ldr	r3, [pc, #144]	; (80925a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 809250e:	681a      	ldr	r2, [r3, #0]
 8092510:	07d0      	lsls	r0, r2, #31
 8092512:	bf5c      	itt	pl
 8092514:	2201      	movpl	r2, #1
 8092516:	601a      	strpl	r2, [r3, #0]
 8092518:	4b22      	ldr	r3, [pc, #136]	; (80925a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 809251a:	681a      	ldr	r2, [r3, #0]
 809251c:	07d1      	lsls	r1, r2, #31
 809251e:	bf5c      	itt	pl
 8092520:	2201      	movpl	r2, #1
 8092522:	601a      	strpl	r2, [r3, #0]
 8092524:	4b20      	ldr	r3, [pc, #128]	; (80925a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8092526:	681a      	ldr	r2, [r3, #0]
 8092528:	07d2      	lsls	r2, r2, #31
 809252a:	bf5c      	itt	pl
 809252c:	2201      	movpl	r2, #1
 809252e:	601a      	strpl	r2, [r3, #0]
 8092530:	4b1e      	ldr	r3, [pc, #120]	; (80925ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8092532:	681a      	ldr	r2, [r3, #0]
 8092534:	07d0      	lsls	r0, r2, #31
 8092536:	bf5c      	itt	pl
 8092538:	2201      	movpl	r2, #1
 809253a:	601a      	strpl	r2, [r3, #0]
 809253c:	4b1c      	ldr	r3, [pc, #112]	; (80925b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 809253e:	681a      	ldr	r2, [r3, #0]
 8092540:	07d1      	lsls	r1, r2, #31
 8092542:	bf5c      	itt	pl
 8092544:	2201      	movpl	r2, #1
 8092546:	601a      	strpl	r2, [r3, #0]
 8092548:	4b1a      	ldr	r3, [pc, #104]	; (80925b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 809254a:	681a      	ldr	r2, [r3, #0]
 809254c:	07d2      	lsls	r2, r2, #31
 809254e:	bf5c      	itt	pl
 8092550:	2201      	movpl	r2, #1
 8092552:	601a      	strpl	r2, [r3, #0]
 8092554:	4b18      	ldr	r3, [pc, #96]	; (80925b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8092556:	681a      	ldr	r2, [r3, #0]
 8092558:	07d0      	lsls	r0, r2, #31
 809255a:	bf5c      	itt	pl
 809255c:	2201      	movpl	r2, #1
 809255e:	601a      	strpl	r2, [r3, #0]
 8092560:	4b16      	ldr	r3, [pc, #88]	; (80925bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8092562:	681a      	ldr	r2, [r3, #0]
 8092564:	07d1      	lsls	r1, r2, #31
 8092566:	bf5c      	itt	pl
 8092568:	2201      	movpl	r2, #1
 809256a:	601a      	strpl	r2, [r3, #0]
 809256c:	4b14      	ldr	r3, [pc, #80]	; (80925c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 809256e:	681a      	ldr	r2, [r3, #0]
 8092570:	07d2      	lsls	r2, r2, #31
 8092572:	bf5c      	itt	pl
 8092574:	2201      	movpl	r2, #1
 8092576:	601a      	strpl	r2, [r3, #0]
 8092578:	4b12      	ldr	r3, [pc, #72]	; (80925c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 809257a:	681a      	ldr	r2, [r3, #0]
 809257c:	07d0      	lsls	r0, r2, #31
 809257e:	bf5c      	itt	pl
 8092580:	2201      	movpl	r2, #1
 8092582:	601a      	strpl	r2, [r3, #0]
 8092584:	4b10      	ldr	r3, [pc, #64]	; (80925c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8092586:	681a      	ldr	r2, [r3, #0]
 8092588:	07d1      	lsls	r1, r2, #31
 809258a:	bf5c      	itt	pl
 809258c:	2201      	movpl	r2, #1
 809258e:	601a      	strpl	r2, [r3, #0]
 8092590:	4b0e      	ldr	r3, [pc, #56]	; (80925cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8092592:	681a      	ldr	r2, [r3, #0]
 8092594:	07d2      	lsls	r2, r2, #31
 8092596:	bf5c      	itt	pl
 8092598:	2201      	movpl	r2, #1
 809259a:	601a      	strpl	r2, [r3, #0]
 809259c:	4770      	bx	lr
 809259e:	bf00      	nop
 80925a0:	20003fc4 	.word	0x20003fc4
 80925a4:	20003fc0 	.word	0x20003fc0
 80925a8:	20003fbc 	.word	0x20003fbc
 80925ac:	20003fb8 	.word	0x20003fb8
 80925b0:	20003fb4 	.word	0x20003fb4
 80925b4:	20003fb0 	.word	0x20003fb0
 80925b8:	20003fac 	.word	0x20003fac
 80925bc:	20003fa8 	.word	0x20003fa8
 80925c0:	20003fa4 	.word	0x20003fa4
 80925c4:	20003fa0 	.word	0x20003fa0
 80925c8:	20003f9c 	.word	0x20003f9c
 80925cc:	20003f98 	.word	0x20003f98

080925d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80925d0:	4b24      	ldr	r3, [pc, #144]	; (8092664 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80925d2:	681a      	ldr	r2, [r3, #0]
 80925d4:	07d0      	lsls	r0, r2, #31
 80925d6:	bf5c      	itt	pl
 80925d8:	2201      	movpl	r2, #1
 80925da:	601a      	strpl	r2, [r3, #0]
 80925dc:	4b22      	ldr	r3, [pc, #136]	; (8092668 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80925de:	681a      	ldr	r2, [r3, #0]
 80925e0:	07d1      	lsls	r1, r2, #31
 80925e2:	bf5c      	itt	pl
 80925e4:	2201      	movpl	r2, #1
 80925e6:	601a      	strpl	r2, [r3, #0]
 80925e8:	4b20      	ldr	r3, [pc, #128]	; (809266c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80925ea:	681a      	ldr	r2, [r3, #0]
 80925ec:	07d2      	lsls	r2, r2, #31
 80925ee:	bf5c      	itt	pl
 80925f0:	2201      	movpl	r2, #1
 80925f2:	601a      	strpl	r2, [r3, #0]
 80925f4:	4b1e      	ldr	r3, [pc, #120]	; (8092670 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80925f6:	681a      	ldr	r2, [r3, #0]
 80925f8:	07d0      	lsls	r0, r2, #31
 80925fa:	bf5c      	itt	pl
 80925fc:	2201      	movpl	r2, #1
 80925fe:	601a      	strpl	r2, [r3, #0]
 8092600:	4b1c      	ldr	r3, [pc, #112]	; (8092674 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8092602:	681a      	ldr	r2, [r3, #0]
 8092604:	07d1      	lsls	r1, r2, #31
 8092606:	bf5c      	itt	pl
 8092608:	2201      	movpl	r2, #1
 809260a:	601a      	strpl	r2, [r3, #0]
 809260c:	4b1a      	ldr	r3, [pc, #104]	; (8092678 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 809260e:	681a      	ldr	r2, [r3, #0]
 8092610:	07d2      	lsls	r2, r2, #31
 8092612:	bf5c      	itt	pl
 8092614:	2201      	movpl	r2, #1
 8092616:	601a      	strpl	r2, [r3, #0]
 8092618:	4b18      	ldr	r3, [pc, #96]	; (809267c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 809261a:	681a      	ldr	r2, [r3, #0]
 809261c:	07d0      	lsls	r0, r2, #31
 809261e:	bf5c      	itt	pl
 8092620:	2201      	movpl	r2, #1
 8092622:	601a      	strpl	r2, [r3, #0]
 8092624:	4b16      	ldr	r3, [pc, #88]	; (8092680 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8092626:	681a      	ldr	r2, [r3, #0]
 8092628:	07d1      	lsls	r1, r2, #31
 809262a:	bf5c      	itt	pl
 809262c:	2201      	movpl	r2, #1
 809262e:	601a      	strpl	r2, [r3, #0]
 8092630:	4b14      	ldr	r3, [pc, #80]	; (8092684 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8092632:	681a      	ldr	r2, [r3, #0]
 8092634:	07d2      	lsls	r2, r2, #31
 8092636:	bf5c      	itt	pl
 8092638:	2201      	movpl	r2, #1
 809263a:	601a      	strpl	r2, [r3, #0]
 809263c:	4b12      	ldr	r3, [pc, #72]	; (8092688 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 809263e:	681a      	ldr	r2, [r3, #0]
 8092640:	07d0      	lsls	r0, r2, #31
 8092642:	bf5c      	itt	pl
 8092644:	2201      	movpl	r2, #1
 8092646:	601a      	strpl	r2, [r3, #0]
 8092648:	4b10      	ldr	r3, [pc, #64]	; (809268c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 809264a:	681a      	ldr	r2, [r3, #0]
 809264c:	07d1      	lsls	r1, r2, #31
 809264e:	bf5c      	itt	pl
 8092650:	2201      	movpl	r2, #1
 8092652:	601a      	strpl	r2, [r3, #0]
 8092654:	4b0e      	ldr	r3, [pc, #56]	; (8092690 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8092656:	681a      	ldr	r2, [r3, #0]
 8092658:	07d2      	lsls	r2, r2, #31
 809265a:	bf5c      	itt	pl
 809265c:	2201      	movpl	r2, #1
 809265e:	601a      	strpl	r2, [r3, #0]
 8092660:	4770      	bx	lr
 8092662:	bf00      	nop
 8092664:	20003ff4 	.word	0x20003ff4
 8092668:	20003ff0 	.word	0x20003ff0
 809266c:	20003fec 	.word	0x20003fec
 8092670:	20003fe8 	.word	0x20003fe8
 8092674:	20003fe4 	.word	0x20003fe4
 8092678:	20003fe0 	.word	0x20003fe0
 809267c:	20003fdc 	.word	0x20003fdc
 8092680:	20003fd8 	.word	0x20003fd8
 8092684:	20003fd4 	.word	0x20003fd4
 8092688:	20003fd0 	.word	0x20003fd0
 809268c:	20003fcc 	.word	0x20003fcc
 8092690:	20003fc8 	.word	0x20003fc8

08092694 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8092694:	4b18      	ldr	r3, [pc, #96]	; (80926f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8092696:	681a      	ldr	r2, [r3, #0]
 8092698:	07d1      	lsls	r1, r2, #31
 809269a:	bf5c      	itt	pl
 809269c:	2201      	movpl	r2, #1
 809269e:	601a      	strpl	r2, [r3, #0]
 80926a0:	4b16      	ldr	r3, [pc, #88]	; (80926fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80926a2:	681a      	ldr	r2, [r3, #0]
 80926a4:	07d2      	lsls	r2, r2, #31
 80926a6:	bf5c      	itt	pl
 80926a8:	2201      	movpl	r2, #1
 80926aa:	601a      	strpl	r2, [r3, #0]
 80926ac:	4b14      	ldr	r3, [pc, #80]	; (8092700 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80926ae:	681a      	ldr	r2, [r3, #0]
 80926b0:	07d0      	lsls	r0, r2, #31
 80926b2:	bf5c      	itt	pl
 80926b4:	2201      	movpl	r2, #1
 80926b6:	601a      	strpl	r2, [r3, #0]
 80926b8:	4b12      	ldr	r3, [pc, #72]	; (8092704 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80926ba:	681a      	ldr	r2, [r3, #0]
 80926bc:	07d1      	lsls	r1, r2, #31
 80926be:	bf5c      	itt	pl
 80926c0:	2201      	movpl	r2, #1
 80926c2:	601a      	strpl	r2, [r3, #0]
 80926c4:	4b10      	ldr	r3, [pc, #64]	; (8092708 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80926c6:	681a      	ldr	r2, [r3, #0]
 80926c8:	07d2      	lsls	r2, r2, #31
 80926ca:	bf5c      	itt	pl
 80926cc:	2201      	movpl	r2, #1
 80926ce:	601a      	strpl	r2, [r3, #0]
 80926d0:	4b0e      	ldr	r3, [pc, #56]	; (809270c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80926d2:	681a      	ldr	r2, [r3, #0]
 80926d4:	07d0      	lsls	r0, r2, #31
 80926d6:	bf5c      	itt	pl
 80926d8:	2201      	movpl	r2, #1
 80926da:	601a      	strpl	r2, [r3, #0]
 80926dc:	4b0c      	ldr	r3, [pc, #48]	; (8092710 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80926de:	681a      	ldr	r2, [r3, #0]
 80926e0:	07d1      	lsls	r1, r2, #31
 80926e2:	bf5c      	itt	pl
 80926e4:	2201      	movpl	r2, #1
 80926e6:	601a      	strpl	r2, [r3, #0]
 80926e8:	4b0a      	ldr	r3, [pc, #40]	; (8092714 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80926ea:	681a      	ldr	r2, [r3, #0]
 80926ec:	07d2      	lsls	r2, r2, #31
 80926ee:	bf5c      	itt	pl
 80926f0:	2201      	movpl	r2, #1
 80926f2:	601a      	strpl	r2, [r3, #0]
 80926f4:	4770      	bx	lr
 80926f6:	bf00      	nop
 80926f8:	20004014 	.word	0x20004014
 80926fc:	20004010 	.word	0x20004010
 8092700:	2000400c 	.word	0x2000400c
 8092704:	20004008 	.word	0x20004008
 8092708:	20004004 	.word	0x20004004
 809270c:	20004000 	.word	0x20004000
 8092710:	20003ffc 	.word	0x20003ffc
 8092714:	20003ff8 	.word	0x20003ff8

08092718 <fmod>:
 8092718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 809271c:	b08b      	sub	sp, #44	; 0x2c
 809271e:	461d      	mov	r5, r3
 8092720:	4680      	mov	r8, r0
 8092722:	4689      	mov	r9, r1
 8092724:	4614      	mov	r4, r2
 8092726:	f000 f859 	bl	80927dc <__ieee754_fmod>
 809272a:	4b2a      	ldr	r3, [pc, #168]	; (80927d4 <fmod+0xbc>)
 809272c:	4606      	mov	r6, r0
 809272e:	f993 a000 	ldrsb.w	sl, [r3]
 8092732:	460f      	mov	r7, r1
 8092734:	f1ba 3fff 	cmp.w	sl, #4294967295
 8092738:	d02f      	beq.n	809279a <fmod+0x82>
 809273a:	4622      	mov	r2, r4
 809273c:	462b      	mov	r3, r5
 809273e:	4620      	mov	r0, r4
 8092740:	4629      	mov	r1, r5
 8092742:	f000 fdbd 	bl	80932c0 <__aeabi_dcmpun>
 8092746:	bb40      	cbnz	r0, 809279a <fmod+0x82>
 8092748:	4642      	mov	r2, r8
 809274a:	464b      	mov	r3, r9
 809274c:	4640      	mov	r0, r8
 809274e:	4649      	mov	r1, r9
 8092750:	f000 fdb6 	bl	80932c0 <__aeabi_dcmpun>
 8092754:	4683      	mov	fp, r0
 8092756:	bb00      	cbnz	r0, 809279a <fmod+0x82>
 8092758:	2200      	movs	r2, #0
 809275a:	2300      	movs	r3, #0
 809275c:	4620      	mov	r0, r4
 809275e:	4629      	mov	r1, r5
 8092760:	f000 fd7c 	bl	809325c <__aeabi_dcmpeq>
 8092764:	b1c8      	cbz	r0, 809279a <fmod+0x82>
 8092766:	4a1c      	ldr	r2, [pc, #112]	; (80927d8 <fmod+0xc0>)
 8092768:	2301      	movs	r3, #1
 809276a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 809276e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8092772:	f8cd b020 	str.w	fp, [sp, #32]
 8092776:	9201      	str	r2, [sp, #4]
 8092778:	9300      	str	r3, [sp, #0]
 809277a:	f1ba 0f00 	cmp.w	sl, #0
 809277e:	d111      	bne.n	80927a4 <fmod+0x8c>
 8092780:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8092784:	4668      	mov	r0, sp
 8092786:	f000 f947 	bl	8092a18 <matherr>
 809278a:	b1b0      	cbz	r0, 80927ba <fmod+0xa2>
 809278c:	9b08      	ldr	r3, [sp, #32]
 809278e:	b9db      	cbnz	r3, 80927c8 <fmod+0xb0>
 8092790:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8092794:	b00b      	add	sp, #44	; 0x2c
 8092796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 809279a:	4630      	mov	r0, r6
 809279c:	4639      	mov	r1, r7
 809279e:	b00b      	add	sp, #44	; 0x2c
 80927a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80927a4:	2200      	movs	r2, #0
 80927a6:	2300      	movs	r3, #0
 80927a8:	4610      	mov	r0, r2
 80927aa:	4619      	mov	r1, r3
 80927ac:	f000 fc18 	bl	8092fe0 <__aeabi_ddiv>
 80927b0:	f1ba 0f02 	cmp.w	sl, #2
 80927b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80927b8:	d1e4      	bne.n	8092784 <fmod+0x6c>
 80927ba:	f001 fac1 	bl	8093d40 <__errno>
 80927be:	2321      	movs	r3, #33	; 0x21
 80927c0:	6003      	str	r3, [r0, #0]
 80927c2:	9b08      	ldr	r3, [sp, #32]
 80927c4:	2b00      	cmp	r3, #0
 80927c6:	d0e3      	beq.n	8092790 <fmod+0x78>
 80927c8:	f001 faba 	bl	8093d40 <__errno>
 80927cc:	9b08      	ldr	r3, [sp, #32]
 80927ce:	6003      	str	r3, [r0, #0]
 80927d0:	e7de      	b.n	8092790 <fmod+0x78>
 80927d2:	bf00      	nop
 80927d4:	20000444 	.word	0x20000444
 80927d8:	08099d50 	.word	0x08099d50

080927dc <__ieee754_fmod>:
 80927dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80927e0:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80927e4:	ea52 0609 	orrs.w	r6, r2, r9
 80927e8:	d020      	beq.n	809282c <__ieee754_fmod+0x50>
 80927ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80927ee:	4f83      	ldr	r7, [pc, #524]	; (80929fc <__ieee754_fmod+0x220>)
 80927f0:	ea81 0806 	eor.w	r8, r1, r6
 80927f4:	45b8      	cmp	r8, r7
 80927f6:	dc19      	bgt.n	809282c <__ieee754_fmod+0x50>
 80927f8:	4257      	negs	r7, r2
 80927fa:	4317      	orrs	r7, r2
 80927fc:	f8df b214 	ldr.w	fp, [pc, #532]	; 8092a14 <__ieee754_fmod+0x238>
 8092800:	ea49 77d7 	orr.w	r7, r9, r7, lsr #31
 8092804:	455f      	cmp	r7, fp
 8092806:	4694      	mov	ip, r2
 8092808:	d810      	bhi.n	809282c <__ieee754_fmod+0x50>
 809280a:	45c8      	cmp	r8, r9
 809280c:	461d      	mov	r5, r3
 809280e:	4682      	mov	sl, r0
 8092810:	4604      	mov	r4, r0
 8092812:	4696      	mov	lr, r2
 8092814:	dc12      	bgt.n	809283c <__ieee754_fmod+0x60>
 8092816:	db0f      	blt.n	8092838 <__ieee754_fmod+0x5c>
 8092818:	4290      	cmp	r0, r2
 809281a:	d30d      	bcc.n	8092838 <__ieee754_fmod+0x5c>
 809281c:	d10e      	bne.n	809283c <__ieee754_fmod+0x60>
 809281e:	4b78      	ldr	r3, [pc, #480]	; (8092a00 <__ieee754_fmod+0x224>)
 8092820:	0ff6      	lsrs	r6, r6, #31
 8092822:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8092826:	e893 0003 	ldmia.w	r3, {r0, r1}
 809282a:	e005      	b.n	8092838 <__ieee754_fmod+0x5c>
 809282c:	f000 faae 	bl	8092d8c <__aeabi_dmul>
 8092830:	4602      	mov	r2, r0
 8092832:	460b      	mov	r3, r1
 8092834:	f000 fbd4 	bl	8092fe0 <__aeabi_ddiv>
 8092838:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 809283c:	f5b8 1f80 	cmp.w	r8, #1048576	; 0x100000
 8092840:	da0e      	bge.n	8092860 <__ieee754_fmod+0x84>
 8092842:	f1b8 0f00 	cmp.w	r8, #0
 8092846:	f040 809c 	bne.w	8092982 <__ieee754_fmod+0x1a6>
 809284a:	f1ba 0f00 	cmp.w	sl, #0
 809284e:	4653      	mov	r3, sl
 8092850:	496c      	ldr	r1, [pc, #432]	; (8092a04 <__ieee754_fmod+0x228>)
 8092852:	dd09      	ble.n	8092868 <__ieee754_fmod+0x8c>
 8092854:	005b      	lsls	r3, r3, #1
 8092856:	2b00      	cmp	r3, #0
 8092858:	f101 31ff 	add.w	r1, r1, #4294967295
 809285c:	dcfa      	bgt.n	8092854 <__ieee754_fmod+0x78>
 809285e:	e003      	b.n	8092868 <__ieee754_fmod+0x8c>
 8092860:	ea4f 5128 	mov.w	r1, r8, asr #20
 8092864:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8092868:	f5b9 1f80 	cmp.w	r9, #1048576	; 0x100000
 809286c:	da0e      	bge.n	809288c <__ieee754_fmod+0xb0>
 809286e:	f1b9 0f00 	cmp.w	r9, #0
 8092872:	f040 809f 	bne.w	80929b4 <__ieee754_fmod+0x1d8>
 8092876:	f1bc 0f00 	cmp.w	ip, #0
 809287a:	4663      	mov	r3, ip
 809287c:	4f61      	ldr	r7, [pc, #388]	; (8092a04 <__ieee754_fmod+0x228>)
 809287e:	dd09      	ble.n	8092894 <__ieee754_fmod+0xb8>
 8092880:	005b      	lsls	r3, r3, #1
 8092882:	2b00      	cmp	r3, #0
 8092884:	f107 37ff 	add.w	r7, r7, #4294967295
 8092888:	dcfa      	bgt.n	8092880 <__ieee754_fmod+0xa4>
 809288a:	e003      	b.n	8092894 <__ieee754_fmod+0xb8>
 809288c:	ea4f 5729 	mov.w	r7, r9, asr #20
 8092890:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
 8092894:	4b5c      	ldr	r3, [pc, #368]	; (8092a08 <__ieee754_fmod+0x22c>)
 8092896:	4299      	cmp	r1, r3
 8092898:	db56      	blt.n	8092948 <__ieee754_fmod+0x16c>
 809289a:	f3c8 0313 	ubfx	r3, r8, #0, #20
 809289e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80928a2:	4a59      	ldr	r2, [pc, #356]	; (8092a08 <__ieee754_fmod+0x22c>)
 80928a4:	4297      	cmp	r7, r2
 80928a6:	db5e      	blt.n	8092966 <__ieee754_fmod+0x18a>
 80928a8:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80928ac:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 80928b0:	1bc9      	subs	r1, r1, r7
 80928b2:	e007      	b.n	80928c4 <__ieee754_fmod+0xe8>
 80928b4:	ea52 0300 	orrs.w	r3, r2, r0
 80928b8:	d013      	beq.n	80928e2 <__ieee754_fmod+0x106>
 80928ba:	0fc3      	lsrs	r3, r0, #31
 80928bc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80928c0:	0044      	lsls	r4, r0, #1
 80928c2:	3901      	subs	r1, #1
 80928c4:	ebce 0004 	rsb	r0, lr, r4
 80928c8:	1b5a      	subs	r2, r3, r5
 80928ca:	b189      	cbz	r1, 80928f0 <__ieee754_fmod+0x114>
 80928cc:	4574      	cmp	r4, lr
 80928ce:	bf38      	it	cc
 80928d0:	f102 32ff 	addcc.w	r2, r2, #4294967295
 80928d4:	2a00      	cmp	r2, #0
 80928d6:	daed      	bge.n	80928b4 <__ieee754_fmod+0xd8>
 80928d8:	0fe2      	lsrs	r2, r4, #31
 80928da:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80928de:	0064      	lsls	r4, r4, #1
 80928e0:	e7ef      	b.n	80928c2 <__ieee754_fmod+0xe6>
 80928e2:	4b47      	ldr	r3, [pc, #284]	; (8092a00 <__ieee754_fmod+0x224>)
 80928e4:	0ff6      	lsrs	r6, r6, #31
 80928e6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80928ea:	e896 0003 	ldmia.w	r6, {r0, r1}
 80928ee:	e7a3      	b.n	8092838 <__ieee754_fmod+0x5c>
 80928f0:	4615      	mov	r5, r2
 80928f2:	4574      	cmp	r4, lr
 80928f4:	bf38      	it	cc
 80928f6:	f102 35ff 	addcc.w	r5, r2, #4294967295
 80928fa:	2d00      	cmp	r5, #0
 80928fc:	bfb4      	ite	lt
 80928fe:	461d      	movlt	r5, r3
 8092900:	ebce 0404 	rsbge	r4, lr, r4
 8092904:	ea55 0304 	orrs.w	r3, r5, r4
 8092908:	d0eb      	beq.n	80928e2 <__ieee754_fmod+0x106>
 809290a:	4a40      	ldr	r2, [pc, #256]	; (8092a0c <__ieee754_fmod+0x230>)
 809290c:	4295      	cmp	r5, r2
 809290e:	dc08      	bgt.n	8092922 <__ieee754_fmod+0x146>
 8092910:	0fe3      	lsrs	r3, r4, #31
 8092912:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8092916:	4295      	cmp	r5, r2
 8092918:	f107 37ff 	add.w	r7, r7, #4294967295
 809291c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8092920:	ddf6      	ble.n	8092910 <__ieee754_fmod+0x134>
 8092922:	4b39      	ldr	r3, [pc, #228]	; (8092a08 <__ieee754_fmod+0x22c>)
 8092924:	429f      	cmp	r7, r3
 8092926:	da4e      	bge.n	80929c6 <__ieee754_fmod+0x1ea>
 8092928:	4a37      	ldr	r2, [pc, #220]	; (8092a08 <__ieee754_fmod+0x22c>)
 809292a:	1bd2      	subs	r2, r2, r7
 809292c:	2a14      	cmp	r2, #20
 809292e:	dc54      	bgt.n	80929da <__ieee754_fmod+0x1fe>
 8092930:	f1c2 0320 	rsb	r3, r2, #32
 8092934:	40d4      	lsrs	r4, r2
 8092936:	fa05 f303 	lsl.w	r3, r5, r3
 809293a:	4323      	orrs	r3, r4
 809293c:	fa45 f202 	asr.w	r2, r5, r2
 8092940:	ea42 0106 	orr.w	r1, r2, r6
 8092944:	4618      	mov	r0, r3
 8092946:	e777      	b.n	8092838 <__ieee754_fmod+0x5c>
 8092948:	4c2f      	ldr	r4, [pc, #188]	; (8092a08 <__ieee754_fmod+0x22c>)
 809294a:	1a64      	subs	r4, r4, r1
 809294c:	2c1f      	cmp	r4, #31
 809294e:	dc2b      	bgt.n	80929a8 <__ieee754_fmod+0x1cc>
 8092950:	f1c4 0320 	rsb	r3, r4, #32
 8092954:	fa08 f804 	lsl.w	r8, r8, r4
 8092958:	fa2a f303 	lsr.w	r3, sl, r3
 809295c:	ea43 0308 	orr.w	r3, r3, r8
 8092960:	fa0a f404 	lsl.w	r4, sl, r4
 8092964:	e79d      	b.n	80928a2 <__ieee754_fmod+0xc6>
 8092966:	4828      	ldr	r0, [pc, #160]	; (8092a08 <__ieee754_fmod+0x22c>)
 8092968:	1bc0      	subs	r0, r0, r7
 809296a:	281f      	cmp	r0, #31
 809296c:	dc15      	bgt.n	809299a <__ieee754_fmod+0x1be>
 809296e:	f1c0 0220 	rsb	r2, r0, #32
 8092972:	fa09 f500 	lsl.w	r5, r9, r0
 8092976:	fa2c f202 	lsr.w	r2, ip, r2
 809297a:	4315      	orrs	r5, r2
 809297c:	fa0c fe00 	lsl.w	lr, ip, r0
 8092980:	e796      	b.n	80928b0 <__ieee754_fmod+0xd4>
 8092982:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8092986:	2b00      	cmp	r3, #0
 8092988:	491f      	ldr	r1, [pc, #124]	; (8092a08 <__ieee754_fmod+0x22c>)
 809298a:	f77f af6d 	ble.w	8092868 <__ieee754_fmod+0x8c>
 809298e:	005b      	lsls	r3, r3, #1
 8092990:	2b00      	cmp	r3, #0
 8092992:	f101 31ff 	add.w	r1, r1, #4294967295
 8092996:	dcfa      	bgt.n	809298e <__ieee754_fmod+0x1b2>
 8092998:	e766      	b.n	8092868 <__ieee754_fmod+0x8c>
 809299a:	4d1d      	ldr	r5, [pc, #116]	; (8092a10 <__ieee754_fmod+0x234>)
 809299c:	f04f 0e00 	mov.w	lr, #0
 80929a0:	1bed      	subs	r5, r5, r7
 80929a2:	fa0c f505 	lsl.w	r5, ip, r5
 80929a6:	e783      	b.n	80928b0 <__ieee754_fmod+0xd4>
 80929a8:	4b19      	ldr	r3, [pc, #100]	; (8092a10 <__ieee754_fmod+0x234>)
 80929aa:	2400      	movs	r4, #0
 80929ac:	1a5b      	subs	r3, r3, r1
 80929ae:	fa0a f303 	lsl.w	r3, sl, r3
 80929b2:	e776      	b.n	80928a2 <__ieee754_fmod+0xc6>
 80929b4:	4f14      	ldr	r7, [pc, #80]	; (8092a08 <__ieee754_fmod+0x22c>)
 80929b6:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 80929ba:	005b      	lsls	r3, r3, #1
 80929bc:	2b00      	cmp	r3, #0
 80929be:	f107 37ff 	add.w	r7, r7, #4294967295
 80929c2:	dcfa      	bgt.n	80929ba <__ieee754_fmod+0x1de>
 80929c4:	e766      	b.n	8092894 <__ieee754_fmod+0xb8>
 80929c6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80929ca:	432e      	orrs	r6, r5
 80929cc:	f207 37ff 	addw	r7, r7, #1023	; 0x3ff
 80929d0:	ea46 5307 	orr.w	r3, r6, r7, lsl #20
 80929d4:	4620      	mov	r0, r4
 80929d6:	4619      	mov	r1, r3
 80929d8:	e72e      	b.n	8092838 <__ieee754_fmod+0x5c>
 80929da:	2a1f      	cmp	r2, #31
 80929dc:	dc07      	bgt.n	80929ee <__ieee754_fmod+0x212>
 80929de:	f1c2 0320 	rsb	r3, r2, #32
 80929e2:	40d4      	lsrs	r4, r2
 80929e4:	409d      	lsls	r5, r3
 80929e6:	ea45 0304 	orr.w	r3, r5, r4
 80929ea:	4632      	mov	r2, r6
 80929ec:	e7a8      	b.n	8092940 <__ieee754_fmod+0x164>
 80929ee:	4b08      	ldr	r3, [pc, #32]	; (8092a10 <__ieee754_fmod+0x234>)
 80929f0:	4632      	mov	r2, r6
 80929f2:	1bdb      	subs	r3, r3, r7
 80929f4:	fa45 f303 	asr.w	r3, r5, r3
 80929f8:	e7a2      	b.n	8092940 <__ieee754_fmod+0x164>
 80929fa:	bf00      	nop
 80929fc:	7fefffff 	.word	0x7fefffff
 8092a00:	08099d58 	.word	0x08099d58
 8092a04:	fffffbed 	.word	0xfffffbed
 8092a08:	fffffc02 	.word	0xfffffc02
 8092a0c:	000fffff 	.word	0x000fffff
 8092a10:	fffffbe2 	.word	0xfffffbe2
 8092a14:	7ff00000 	.word	0x7ff00000

08092a18 <matherr>:
 8092a18:	2000      	movs	r0, #0
 8092a1a:	4770      	bx	lr

08092a1c <__aeabi_drsub>:
 8092a1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8092a20:	e002      	b.n	8092a28 <__adddf3>
 8092a22:	bf00      	nop

08092a24 <__aeabi_dsub>:
 8092a24:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08092a28 <__adddf3>:
 8092a28:	b530      	push	{r4, r5, lr}
 8092a2a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8092a2e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8092a32:	ea94 0f05 	teq	r4, r5
 8092a36:	bf08      	it	eq
 8092a38:	ea90 0f02 	teqeq	r0, r2
 8092a3c:	bf1f      	itttt	ne
 8092a3e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8092a42:	ea55 0c02 	orrsne.w	ip, r5, r2
 8092a46:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8092a4a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8092a4e:	f000 80e2 	beq.w	8092c16 <__adddf3+0x1ee>
 8092a52:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8092a56:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8092a5a:	bfb8      	it	lt
 8092a5c:	426d      	neglt	r5, r5
 8092a5e:	dd0c      	ble.n	8092a7a <__adddf3+0x52>
 8092a60:	442c      	add	r4, r5
 8092a62:	ea80 0202 	eor.w	r2, r0, r2
 8092a66:	ea81 0303 	eor.w	r3, r1, r3
 8092a6a:	ea82 0000 	eor.w	r0, r2, r0
 8092a6e:	ea83 0101 	eor.w	r1, r3, r1
 8092a72:	ea80 0202 	eor.w	r2, r0, r2
 8092a76:	ea81 0303 	eor.w	r3, r1, r3
 8092a7a:	2d36      	cmp	r5, #54	; 0x36
 8092a7c:	bf88      	it	hi
 8092a7e:	bd30      	pophi	{r4, r5, pc}
 8092a80:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8092a84:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8092a88:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8092a8c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8092a90:	d002      	beq.n	8092a98 <__adddf3+0x70>
 8092a92:	4240      	negs	r0, r0
 8092a94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8092a98:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8092a9c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8092aa0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8092aa4:	d002      	beq.n	8092aac <__adddf3+0x84>
 8092aa6:	4252      	negs	r2, r2
 8092aa8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8092aac:	ea94 0f05 	teq	r4, r5
 8092ab0:	f000 80a7 	beq.w	8092c02 <__adddf3+0x1da>
 8092ab4:	f1a4 0401 	sub.w	r4, r4, #1
 8092ab8:	f1d5 0e20 	rsbs	lr, r5, #32
 8092abc:	db0d      	blt.n	8092ada <__adddf3+0xb2>
 8092abe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8092ac2:	fa22 f205 	lsr.w	r2, r2, r5
 8092ac6:	1880      	adds	r0, r0, r2
 8092ac8:	f141 0100 	adc.w	r1, r1, #0
 8092acc:	fa03 f20e 	lsl.w	r2, r3, lr
 8092ad0:	1880      	adds	r0, r0, r2
 8092ad2:	fa43 f305 	asr.w	r3, r3, r5
 8092ad6:	4159      	adcs	r1, r3
 8092ad8:	e00e      	b.n	8092af8 <__adddf3+0xd0>
 8092ada:	f1a5 0520 	sub.w	r5, r5, #32
 8092ade:	f10e 0e20 	add.w	lr, lr, #32
 8092ae2:	2a01      	cmp	r2, #1
 8092ae4:	fa03 fc0e 	lsl.w	ip, r3, lr
 8092ae8:	bf28      	it	cs
 8092aea:	f04c 0c02 	orrcs.w	ip, ip, #2
 8092aee:	fa43 f305 	asr.w	r3, r3, r5
 8092af2:	18c0      	adds	r0, r0, r3
 8092af4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8092af8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8092afc:	d507      	bpl.n	8092b0e <__adddf3+0xe6>
 8092afe:	f04f 0e00 	mov.w	lr, #0
 8092b02:	f1dc 0c00 	rsbs	ip, ip, #0
 8092b06:	eb7e 0000 	sbcs.w	r0, lr, r0
 8092b0a:	eb6e 0101 	sbc.w	r1, lr, r1
 8092b0e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8092b12:	d31b      	bcc.n	8092b4c <__adddf3+0x124>
 8092b14:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8092b18:	d30c      	bcc.n	8092b34 <__adddf3+0x10c>
 8092b1a:	0849      	lsrs	r1, r1, #1
 8092b1c:	ea5f 0030 	movs.w	r0, r0, rrx
 8092b20:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8092b24:	f104 0401 	add.w	r4, r4, #1
 8092b28:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8092b2c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8092b30:	f080 809a 	bcs.w	8092c68 <__adddf3+0x240>
 8092b34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8092b38:	bf08      	it	eq
 8092b3a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8092b3e:	f150 0000 	adcs.w	r0, r0, #0
 8092b42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8092b46:	ea41 0105 	orr.w	r1, r1, r5
 8092b4a:	bd30      	pop	{r4, r5, pc}
 8092b4c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8092b50:	4140      	adcs	r0, r0
 8092b52:	eb41 0101 	adc.w	r1, r1, r1
 8092b56:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8092b5a:	f1a4 0401 	sub.w	r4, r4, #1
 8092b5e:	d1e9      	bne.n	8092b34 <__adddf3+0x10c>
 8092b60:	f091 0f00 	teq	r1, #0
 8092b64:	bf04      	itt	eq
 8092b66:	4601      	moveq	r1, r0
 8092b68:	2000      	moveq	r0, #0
 8092b6a:	fab1 f381 	clz	r3, r1
 8092b6e:	bf08      	it	eq
 8092b70:	3320      	addeq	r3, #32
 8092b72:	f1a3 030b 	sub.w	r3, r3, #11
 8092b76:	f1b3 0220 	subs.w	r2, r3, #32
 8092b7a:	da0c      	bge.n	8092b96 <__adddf3+0x16e>
 8092b7c:	320c      	adds	r2, #12
 8092b7e:	dd08      	ble.n	8092b92 <__adddf3+0x16a>
 8092b80:	f102 0c14 	add.w	ip, r2, #20
 8092b84:	f1c2 020c 	rsb	r2, r2, #12
 8092b88:	fa01 f00c 	lsl.w	r0, r1, ip
 8092b8c:	fa21 f102 	lsr.w	r1, r1, r2
 8092b90:	e00c      	b.n	8092bac <__adddf3+0x184>
 8092b92:	f102 0214 	add.w	r2, r2, #20
 8092b96:	bfd8      	it	le
 8092b98:	f1c2 0c20 	rsble	ip, r2, #32
 8092b9c:	fa01 f102 	lsl.w	r1, r1, r2
 8092ba0:	fa20 fc0c 	lsr.w	ip, r0, ip
 8092ba4:	bfdc      	itt	le
 8092ba6:	ea41 010c 	orrle.w	r1, r1, ip
 8092baa:	4090      	lslle	r0, r2
 8092bac:	1ae4      	subs	r4, r4, r3
 8092bae:	bfa2      	ittt	ge
 8092bb0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8092bb4:	4329      	orrge	r1, r5
 8092bb6:	bd30      	popge	{r4, r5, pc}
 8092bb8:	ea6f 0404 	mvn.w	r4, r4
 8092bbc:	3c1f      	subs	r4, #31
 8092bbe:	da1c      	bge.n	8092bfa <__adddf3+0x1d2>
 8092bc0:	340c      	adds	r4, #12
 8092bc2:	dc0e      	bgt.n	8092be2 <__adddf3+0x1ba>
 8092bc4:	f104 0414 	add.w	r4, r4, #20
 8092bc8:	f1c4 0220 	rsb	r2, r4, #32
 8092bcc:	fa20 f004 	lsr.w	r0, r0, r4
 8092bd0:	fa01 f302 	lsl.w	r3, r1, r2
 8092bd4:	ea40 0003 	orr.w	r0, r0, r3
 8092bd8:	fa21 f304 	lsr.w	r3, r1, r4
 8092bdc:	ea45 0103 	orr.w	r1, r5, r3
 8092be0:	bd30      	pop	{r4, r5, pc}
 8092be2:	f1c4 040c 	rsb	r4, r4, #12
 8092be6:	f1c4 0220 	rsb	r2, r4, #32
 8092bea:	fa20 f002 	lsr.w	r0, r0, r2
 8092bee:	fa01 f304 	lsl.w	r3, r1, r4
 8092bf2:	ea40 0003 	orr.w	r0, r0, r3
 8092bf6:	4629      	mov	r1, r5
 8092bf8:	bd30      	pop	{r4, r5, pc}
 8092bfa:	fa21 f004 	lsr.w	r0, r1, r4
 8092bfe:	4629      	mov	r1, r5
 8092c00:	bd30      	pop	{r4, r5, pc}
 8092c02:	f094 0f00 	teq	r4, #0
 8092c06:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8092c0a:	bf06      	itte	eq
 8092c0c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8092c10:	3401      	addeq	r4, #1
 8092c12:	3d01      	subne	r5, #1
 8092c14:	e74e      	b.n	8092ab4 <__adddf3+0x8c>
 8092c16:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8092c1a:	bf18      	it	ne
 8092c1c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8092c20:	d029      	beq.n	8092c76 <__adddf3+0x24e>
 8092c22:	ea94 0f05 	teq	r4, r5
 8092c26:	bf08      	it	eq
 8092c28:	ea90 0f02 	teqeq	r0, r2
 8092c2c:	d005      	beq.n	8092c3a <__adddf3+0x212>
 8092c2e:	ea54 0c00 	orrs.w	ip, r4, r0
 8092c32:	bf04      	itt	eq
 8092c34:	4619      	moveq	r1, r3
 8092c36:	4610      	moveq	r0, r2
 8092c38:	bd30      	pop	{r4, r5, pc}
 8092c3a:	ea91 0f03 	teq	r1, r3
 8092c3e:	bf1e      	ittt	ne
 8092c40:	2100      	movne	r1, #0
 8092c42:	2000      	movne	r0, #0
 8092c44:	bd30      	popne	{r4, r5, pc}
 8092c46:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8092c4a:	d105      	bne.n	8092c58 <__adddf3+0x230>
 8092c4c:	0040      	lsls	r0, r0, #1
 8092c4e:	4149      	adcs	r1, r1
 8092c50:	bf28      	it	cs
 8092c52:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8092c56:	bd30      	pop	{r4, r5, pc}
 8092c58:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8092c5c:	bf3c      	itt	cc
 8092c5e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8092c62:	bd30      	popcc	{r4, r5, pc}
 8092c64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8092c68:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8092c6c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8092c70:	f04f 0000 	mov.w	r0, #0
 8092c74:	bd30      	pop	{r4, r5, pc}
 8092c76:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8092c7a:	bf1a      	itte	ne
 8092c7c:	4619      	movne	r1, r3
 8092c7e:	4610      	movne	r0, r2
 8092c80:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8092c84:	bf1c      	itt	ne
 8092c86:	460b      	movne	r3, r1
 8092c88:	4602      	movne	r2, r0
 8092c8a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8092c8e:	bf06      	itte	eq
 8092c90:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8092c94:	ea91 0f03 	teqeq	r1, r3
 8092c98:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8092c9c:	bd30      	pop	{r4, r5, pc}
 8092c9e:	bf00      	nop

08092ca0 <__aeabi_ui2d>:
 8092ca0:	f090 0f00 	teq	r0, #0
 8092ca4:	bf04      	itt	eq
 8092ca6:	2100      	moveq	r1, #0
 8092ca8:	4770      	bxeq	lr
 8092caa:	b530      	push	{r4, r5, lr}
 8092cac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8092cb0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8092cb4:	f04f 0500 	mov.w	r5, #0
 8092cb8:	f04f 0100 	mov.w	r1, #0
 8092cbc:	e750      	b.n	8092b60 <__adddf3+0x138>
 8092cbe:	bf00      	nop

08092cc0 <__aeabi_i2d>:
 8092cc0:	f090 0f00 	teq	r0, #0
 8092cc4:	bf04      	itt	eq
 8092cc6:	2100      	moveq	r1, #0
 8092cc8:	4770      	bxeq	lr
 8092cca:	b530      	push	{r4, r5, lr}
 8092ccc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8092cd0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8092cd4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8092cd8:	bf48      	it	mi
 8092cda:	4240      	negmi	r0, r0
 8092cdc:	f04f 0100 	mov.w	r1, #0
 8092ce0:	e73e      	b.n	8092b60 <__adddf3+0x138>
 8092ce2:	bf00      	nop

08092ce4 <__aeabi_f2d>:
 8092ce4:	0042      	lsls	r2, r0, #1
 8092ce6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8092cea:	ea4f 0131 	mov.w	r1, r1, rrx
 8092cee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8092cf2:	bf1f      	itttt	ne
 8092cf4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8092cf8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8092cfc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8092d00:	4770      	bxne	lr
 8092d02:	f092 0f00 	teq	r2, #0
 8092d06:	bf14      	ite	ne
 8092d08:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8092d0c:	4770      	bxeq	lr
 8092d0e:	b530      	push	{r4, r5, lr}
 8092d10:	f44f 7460 	mov.w	r4, #896	; 0x380
 8092d14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8092d18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8092d1c:	e720      	b.n	8092b60 <__adddf3+0x138>
 8092d1e:	bf00      	nop

08092d20 <__aeabi_ul2d>:
 8092d20:	ea50 0201 	orrs.w	r2, r0, r1
 8092d24:	bf08      	it	eq
 8092d26:	4770      	bxeq	lr
 8092d28:	b530      	push	{r4, r5, lr}
 8092d2a:	f04f 0500 	mov.w	r5, #0
 8092d2e:	e00a      	b.n	8092d46 <__aeabi_l2d+0x16>

08092d30 <__aeabi_l2d>:
 8092d30:	ea50 0201 	orrs.w	r2, r0, r1
 8092d34:	bf08      	it	eq
 8092d36:	4770      	bxeq	lr
 8092d38:	b530      	push	{r4, r5, lr}
 8092d3a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8092d3e:	d502      	bpl.n	8092d46 <__aeabi_l2d+0x16>
 8092d40:	4240      	negs	r0, r0
 8092d42:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8092d46:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8092d4a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8092d4e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8092d52:	f43f aedc 	beq.w	8092b0e <__adddf3+0xe6>
 8092d56:	f04f 0203 	mov.w	r2, #3
 8092d5a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8092d5e:	bf18      	it	ne
 8092d60:	3203      	addne	r2, #3
 8092d62:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8092d66:	bf18      	it	ne
 8092d68:	3203      	addne	r2, #3
 8092d6a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8092d6e:	f1c2 0320 	rsb	r3, r2, #32
 8092d72:	fa00 fc03 	lsl.w	ip, r0, r3
 8092d76:	fa20 f002 	lsr.w	r0, r0, r2
 8092d7a:	fa01 fe03 	lsl.w	lr, r1, r3
 8092d7e:	ea40 000e 	orr.w	r0, r0, lr
 8092d82:	fa21 f102 	lsr.w	r1, r1, r2
 8092d86:	4414      	add	r4, r2
 8092d88:	e6c1      	b.n	8092b0e <__adddf3+0xe6>
 8092d8a:	bf00      	nop

08092d8c <__aeabi_dmul>:
 8092d8c:	b570      	push	{r4, r5, r6, lr}
 8092d8e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8092d92:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8092d96:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8092d9a:	bf1d      	ittte	ne
 8092d9c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8092da0:	ea94 0f0c 	teqne	r4, ip
 8092da4:	ea95 0f0c 	teqne	r5, ip
 8092da8:	f000 f8de 	bleq	8092f68 <__aeabi_dmul+0x1dc>
 8092dac:	442c      	add	r4, r5
 8092dae:	ea81 0603 	eor.w	r6, r1, r3
 8092db2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8092db6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8092dba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8092dbe:	bf18      	it	ne
 8092dc0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8092dc4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8092dc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8092dcc:	d038      	beq.n	8092e40 <__aeabi_dmul+0xb4>
 8092dce:	fba0 ce02 	umull	ip, lr, r0, r2
 8092dd2:	f04f 0500 	mov.w	r5, #0
 8092dd6:	fbe1 e502 	umlal	lr, r5, r1, r2
 8092dda:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8092dde:	fbe0 e503 	umlal	lr, r5, r0, r3
 8092de2:	f04f 0600 	mov.w	r6, #0
 8092de6:	fbe1 5603 	umlal	r5, r6, r1, r3
 8092dea:	f09c 0f00 	teq	ip, #0
 8092dee:	bf18      	it	ne
 8092df0:	f04e 0e01 	orrne.w	lr, lr, #1
 8092df4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8092df8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8092dfc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8092e00:	d204      	bcs.n	8092e0c <__aeabi_dmul+0x80>
 8092e02:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8092e06:	416d      	adcs	r5, r5
 8092e08:	eb46 0606 	adc.w	r6, r6, r6
 8092e0c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8092e10:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8092e14:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8092e18:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8092e1c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8092e20:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8092e24:	bf88      	it	hi
 8092e26:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8092e2a:	d81e      	bhi.n	8092e6a <__aeabi_dmul+0xde>
 8092e2c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8092e30:	bf08      	it	eq
 8092e32:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8092e36:	f150 0000 	adcs.w	r0, r0, #0
 8092e3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8092e3e:	bd70      	pop	{r4, r5, r6, pc}
 8092e40:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8092e44:	ea46 0101 	orr.w	r1, r6, r1
 8092e48:	ea40 0002 	orr.w	r0, r0, r2
 8092e4c:	ea81 0103 	eor.w	r1, r1, r3
 8092e50:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8092e54:	bfc2      	ittt	gt
 8092e56:	ebd4 050c 	rsbsgt	r5, r4, ip
 8092e5a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8092e5e:	bd70      	popgt	{r4, r5, r6, pc}
 8092e60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8092e64:	f04f 0e00 	mov.w	lr, #0
 8092e68:	3c01      	subs	r4, #1
 8092e6a:	f300 80ab 	bgt.w	8092fc4 <__aeabi_dmul+0x238>
 8092e6e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8092e72:	bfde      	ittt	le
 8092e74:	2000      	movle	r0, #0
 8092e76:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8092e7a:	bd70      	pople	{r4, r5, r6, pc}
 8092e7c:	f1c4 0400 	rsb	r4, r4, #0
 8092e80:	3c20      	subs	r4, #32
 8092e82:	da35      	bge.n	8092ef0 <__aeabi_dmul+0x164>
 8092e84:	340c      	adds	r4, #12
 8092e86:	dc1b      	bgt.n	8092ec0 <__aeabi_dmul+0x134>
 8092e88:	f104 0414 	add.w	r4, r4, #20
 8092e8c:	f1c4 0520 	rsb	r5, r4, #32
 8092e90:	fa00 f305 	lsl.w	r3, r0, r5
 8092e94:	fa20 f004 	lsr.w	r0, r0, r4
 8092e98:	fa01 f205 	lsl.w	r2, r1, r5
 8092e9c:	ea40 0002 	orr.w	r0, r0, r2
 8092ea0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8092ea4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8092ea8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8092eac:	fa21 f604 	lsr.w	r6, r1, r4
 8092eb0:	eb42 0106 	adc.w	r1, r2, r6
 8092eb4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8092eb8:	bf08      	it	eq
 8092eba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8092ebe:	bd70      	pop	{r4, r5, r6, pc}
 8092ec0:	f1c4 040c 	rsb	r4, r4, #12
 8092ec4:	f1c4 0520 	rsb	r5, r4, #32
 8092ec8:	fa00 f304 	lsl.w	r3, r0, r4
 8092ecc:	fa20 f005 	lsr.w	r0, r0, r5
 8092ed0:	fa01 f204 	lsl.w	r2, r1, r4
 8092ed4:	ea40 0002 	orr.w	r0, r0, r2
 8092ed8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8092edc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8092ee0:	f141 0100 	adc.w	r1, r1, #0
 8092ee4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8092ee8:	bf08      	it	eq
 8092eea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8092eee:	bd70      	pop	{r4, r5, r6, pc}
 8092ef0:	f1c4 0520 	rsb	r5, r4, #32
 8092ef4:	fa00 f205 	lsl.w	r2, r0, r5
 8092ef8:	ea4e 0e02 	orr.w	lr, lr, r2
 8092efc:	fa20 f304 	lsr.w	r3, r0, r4
 8092f00:	fa01 f205 	lsl.w	r2, r1, r5
 8092f04:	ea43 0302 	orr.w	r3, r3, r2
 8092f08:	fa21 f004 	lsr.w	r0, r1, r4
 8092f0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8092f10:	fa21 f204 	lsr.w	r2, r1, r4
 8092f14:	ea20 0002 	bic.w	r0, r0, r2
 8092f18:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8092f1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8092f20:	bf08      	it	eq
 8092f22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8092f26:	bd70      	pop	{r4, r5, r6, pc}
 8092f28:	f094 0f00 	teq	r4, #0
 8092f2c:	d10f      	bne.n	8092f4e <__aeabi_dmul+0x1c2>
 8092f2e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8092f32:	0040      	lsls	r0, r0, #1
 8092f34:	eb41 0101 	adc.w	r1, r1, r1
 8092f38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8092f3c:	bf08      	it	eq
 8092f3e:	3c01      	subeq	r4, #1
 8092f40:	d0f7      	beq.n	8092f32 <__aeabi_dmul+0x1a6>
 8092f42:	ea41 0106 	orr.w	r1, r1, r6
 8092f46:	f095 0f00 	teq	r5, #0
 8092f4a:	bf18      	it	ne
 8092f4c:	4770      	bxne	lr
 8092f4e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8092f52:	0052      	lsls	r2, r2, #1
 8092f54:	eb43 0303 	adc.w	r3, r3, r3
 8092f58:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8092f5c:	bf08      	it	eq
 8092f5e:	3d01      	subeq	r5, #1
 8092f60:	d0f7      	beq.n	8092f52 <__aeabi_dmul+0x1c6>
 8092f62:	ea43 0306 	orr.w	r3, r3, r6
 8092f66:	4770      	bx	lr
 8092f68:	ea94 0f0c 	teq	r4, ip
 8092f6c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8092f70:	bf18      	it	ne
 8092f72:	ea95 0f0c 	teqne	r5, ip
 8092f76:	d00c      	beq.n	8092f92 <__aeabi_dmul+0x206>
 8092f78:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8092f7c:	bf18      	it	ne
 8092f7e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8092f82:	d1d1      	bne.n	8092f28 <__aeabi_dmul+0x19c>
 8092f84:	ea81 0103 	eor.w	r1, r1, r3
 8092f88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8092f8c:	f04f 0000 	mov.w	r0, #0
 8092f90:	bd70      	pop	{r4, r5, r6, pc}
 8092f92:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8092f96:	bf06      	itte	eq
 8092f98:	4610      	moveq	r0, r2
 8092f9a:	4619      	moveq	r1, r3
 8092f9c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8092fa0:	d019      	beq.n	8092fd6 <__aeabi_dmul+0x24a>
 8092fa2:	ea94 0f0c 	teq	r4, ip
 8092fa6:	d102      	bne.n	8092fae <__aeabi_dmul+0x222>
 8092fa8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8092fac:	d113      	bne.n	8092fd6 <__aeabi_dmul+0x24a>
 8092fae:	ea95 0f0c 	teq	r5, ip
 8092fb2:	d105      	bne.n	8092fc0 <__aeabi_dmul+0x234>
 8092fb4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8092fb8:	bf1c      	itt	ne
 8092fba:	4610      	movne	r0, r2
 8092fbc:	4619      	movne	r1, r3
 8092fbe:	d10a      	bne.n	8092fd6 <__aeabi_dmul+0x24a>
 8092fc0:	ea81 0103 	eor.w	r1, r1, r3
 8092fc4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8092fc8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8092fcc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8092fd0:	f04f 0000 	mov.w	r0, #0
 8092fd4:	bd70      	pop	{r4, r5, r6, pc}
 8092fd6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8092fda:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8092fde:	bd70      	pop	{r4, r5, r6, pc}

08092fe0 <__aeabi_ddiv>:
 8092fe0:	b570      	push	{r4, r5, r6, lr}
 8092fe2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8092fe6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8092fea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8092fee:	bf1d      	ittte	ne
 8092ff0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8092ff4:	ea94 0f0c 	teqne	r4, ip
 8092ff8:	ea95 0f0c 	teqne	r5, ip
 8092ffc:	f000 f8a7 	bleq	809314e <__aeabi_ddiv+0x16e>
 8093000:	eba4 0405 	sub.w	r4, r4, r5
 8093004:	ea81 0e03 	eor.w	lr, r1, r3
 8093008:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 809300c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8093010:	f000 8088 	beq.w	8093124 <__aeabi_ddiv+0x144>
 8093014:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8093018:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 809301c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8093020:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8093024:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8093028:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 809302c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8093030:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8093034:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8093038:	429d      	cmp	r5, r3
 809303a:	bf08      	it	eq
 809303c:	4296      	cmpeq	r6, r2
 809303e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8093042:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8093046:	d202      	bcs.n	809304e <__aeabi_ddiv+0x6e>
 8093048:	085b      	lsrs	r3, r3, #1
 809304a:	ea4f 0232 	mov.w	r2, r2, rrx
 809304e:	1ab6      	subs	r6, r6, r2
 8093050:	eb65 0503 	sbc.w	r5, r5, r3
 8093054:	085b      	lsrs	r3, r3, #1
 8093056:	ea4f 0232 	mov.w	r2, r2, rrx
 809305a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 809305e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8093062:	ebb6 0e02 	subs.w	lr, r6, r2
 8093066:	eb75 0e03 	sbcs.w	lr, r5, r3
 809306a:	bf22      	ittt	cs
 809306c:	1ab6      	subcs	r6, r6, r2
 809306e:	4675      	movcs	r5, lr
 8093070:	ea40 000c 	orrcs.w	r0, r0, ip
 8093074:	085b      	lsrs	r3, r3, #1
 8093076:	ea4f 0232 	mov.w	r2, r2, rrx
 809307a:	ebb6 0e02 	subs.w	lr, r6, r2
 809307e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8093082:	bf22      	ittt	cs
 8093084:	1ab6      	subcs	r6, r6, r2
 8093086:	4675      	movcs	r5, lr
 8093088:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 809308c:	085b      	lsrs	r3, r3, #1
 809308e:	ea4f 0232 	mov.w	r2, r2, rrx
 8093092:	ebb6 0e02 	subs.w	lr, r6, r2
 8093096:	eb75 0e03 	sbcs.w	lr, r5, r3
 809309a:	bf22      	ittt	cs
 809309c:	1ab6      	subcs	r6, r6, r2
 809309e:	4675      	movcs	r5, lr
 80930a0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80930a4:	085b      	lsrs	r3, r3, #1
 80930a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80930aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80930ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80930b2:	bf22      	ittt	cs
 80930b4:	1ab6      	subcs	r6, r6, r2
 80930b6:	4675      	movcs	r5, lr
 80930b8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80930bc:	ea55 0e06 	orrs.w	lr, r5, r6
 80930c0:	d018      	beq.n	80930f4 <__aeabi_ddiv+0x114>
 80930c2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80930c6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80930ca:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80930ce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80930d2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80930d6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80930da:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80930de:	d1c0      	bne.n	8093062 <__aeabi_ddiv+0x82>
 80930e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80930e4:	d10b      	bne.n	80930fe <__aeabi_ddiv+0x11e>
 80930e6:	ea41 0100 	orr.w	r1, r1, r0
 80930ea:	f04f 0000 	mov.w	r0, #0
 80930ee:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80930f2:	e7b6      	b.n	8093062 <__aeabi_ddiv+0x82>
 80930f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80930f8:	bf04      	itt	eq
 80930fa:	4301      	orreq	r1, r0
 80930fc:	2000      	moveq	r0, #0
 80930fe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8093102:	bf88      	it	hi
 8093104:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8093108:	f63f aeaf 	bhi.w	8092e6a <__aeabi_dmul+0xde>
 809310c:	ebb5 0c03 	subs.w	ip, r5, r3
 8093110:	bf04      	itt	eq
 8093112:	ebb6 0c02 	subseq.w	ip, r6, r2
 8093116:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 809311a:	f150 0000 	adcs.w	r0, r0, #0
 809311e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8093122:	bd70      	pop	{r4, r5, r6, pc}
 8093124:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8093128:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 809312c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8093130:	bfc2      	ittt	gt
 8093132:	ebd4 050c 	rsbsgt	r5, r4, ip
 8093136:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 809313a:	bd70      	popgt	{r4, r5, r6, pc}
 809313c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8093140:	f04f 0e00 	mov.w	lr, #0
 8093144:	3c01      	subs	r4, #1
 8093146:	e690      	b.n	8092e6a <__aeabi_dmul+0xde>
 8093148:	ea45 0e06 	orr.w	lr, r5, r6
 809314c:	e68d      	b.n	8092e6a <__aeabi_dmul+0xde>
 809314e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8093152:	ea94 0f0c 	teq	r4, ip
 8093156:	bf08      	it	eq
 8093158:	ea95 0f0c 	teqeq	r5, ip
 809315c:	f43f af3b 	beq.w	8092fd6 <__aeabi_dmul+0x24a>
 8093160:	ea94 0f0c 	teq	r4, ip
 8093164:	d10a      	bne.n	809317c <__aeabi_ddiv+0x19c>
 8093166:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 809316a:	f47f af34 	bne.w	8092fd6 <__aeabi_dmul+0x24a>
 809316e:	ea95 0f0c 	teq	r5, ip
 8093172:	f47f af25 	bne.w	8092fc0 <__aeabi_dmul+0x234>
 8093176:	4610      	mov	r0, r2
 8093178:	4619      	mov	r1, r3
 809317a:	e72c      	b.n	8092fd6 <__aeabi_dmul+0x24a>
 809317c:	ea95 0f0c 	teq	r5, ip
 8093180:	d106      	bne.n	8093190 <__aeabi_ddiv+0x1b0>
 8093182:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8093186:	f43f aefd 	beq.w	8092f84 <__aeabi_dmul+0x1f8>
 809318a:	4610      	mov	r0, r2
 809318c:	4619      	mov	r1, r3
 809318e:	e722      	b.n	8092fd6 <__aeabi_dmul+0x24a>
 8093190:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8093194:	bf18      	it	ne
 8093196:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 809319a:	f47f aec5 	bne.w	8092f28 <__aeabi_dmul+0x19c>
 809319e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80931a2:	f47f af0d 	bne.w	8092fc0 <__aeabi_dmul+0x234>
 80931a6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80931aa:	f47f aeeb 	bne.w	8092f84 <__aeabi_dmul+0x1f8>
 80931ae:	e712      	b.n	8092fd6 <__aeabi_dmul+0x24a>

080931b0 <__gedf2>:
 80931b0:	f04f 3cff 	mov.w	ip, #4294967295
 80931b4:	e006      	b.n	80931c4 <__cmpdf2+0x4>
 80931b6:	bf00      	nop

080931b8 <__ledf2>:
 80931b8:	f04f 0c01 	mov.w	ip, #1
 80931bc:	e002      	b.n	80931c4 <__cmpdf2+0x4>
 80931be:	bf00      	nop

080931c0 <__cmpdf2>:
 80931c0:	f04f 0c01 	mov.w	ip, #1
 80931c4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80931c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80931cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80931d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80931d4:	bf18      	it	ne
 80931d6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80931da:	d01b      	beq.n	8093214 <__cmpdf2+0x54>
 80931dc:	b001      	add	sp, #4
 80931de:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80931e2:	bf0c      	ite	eq
 80931e4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80931e8:	ea91 0f03 	teqne	r1, r3
 80931ec:	bf02      	ittt	eq
 80931ee:	ea90 0f02 	teqeq	r0, r2
 80931f2:	2000      	moveq	r0, #0
 80931f4:	4770      	bxeq	lr
 80931f6:	f110 0f00 	cmn.w	r0, #0
 80931fa:	ea91 0f03 	teq	r1, r3
 80931fe:	bf58      	it	pl
 8093200:	4299      	cmppl	r1, r3
 8093202:	bf08      	it	eq
 8093204:	4290      	cmpeq	r0, r2
 8093206:	bf2c      	ite	cs
 8093208:	17d8      	asrcs	r0, r3, #31
 809320a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 809320e:	f040 0001 	orr.w	r0, r0, #1
 8093212:	4770      	bx	lr
 8093214:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8093218:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 809321c:	d102      	bne.n	8093224 <__cmpdf2+0x64>
 809321e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8093222:	d107      	bne.n	8093234 <__cmpdf2+0x74>
 8093224:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8093228:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 809322c:	d1d6      	bne.n	80931dc <__cmpdf2+0x1c>
 809322e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8093232:	d0d3      	beq.n	80931dc <__cmpdf2+0x1c>
 8093234:	f85d 0b04 	ldr.w	r0, [sp], #4
 8093238:	4770      	bx	lr
 809323a:	bf00      	nop

0809323c <__aeabi_cdrcmple>:
 809323c:	4684      	mov	ip, r0
 809323e:	4610      	mov	r0, r2
 8093240:	4662      	mov	r2, ip
 8093242:	468c      	mov	ip, r1
 8093244:	4619      	mov	r1, r3
 8093246:	4663      	mov	r3, ip
 8093248:	e000      	b.n	809324c <__aeabi_cdcmpeq>
 809324a:	bf00      	nop

0809324c <__aeabi_cdcmpeq>:
 809324c:	b501      	push	{r0, lr}
 809324e:	f7ff ffb7 	bl	80931c0 <__cmpdf2>
 8093252:	2800      	cmp	r0, #0
 8093254:	bf48      	it	mi
 8093256:	f110 0f00 	cmnmi.w	r0, #0
 809325a:	bd01      	pop	{r0, pc}

0809325c <__aeabi_dcmpeq>:
 809325c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8093260:	f7ff fff4 	bl	809324c <__aeabi_cdcmpeq>
 8093264:	bf0c      	ite	eq
 8093266:	2001      	moveq	r0, #1
 8093268:	2000      	movne	r0, #0
 809326a:	f85d fb08 	ldr.w	pc, [sp], #8
 809326e:	bf00      	nop

08093270 <__aeabi_dcmplt>:
 8093270:	f84d ed08 	str.w	lr, [sp, #-8]!
 8093274:	f7ff ffea 	bl	809324c <__aeabi_cdcmpeq>
 8093278:	bf34      	ite	cc
 809327a:	2001      	movcc	r0, #1
 809327c:	2000      	movcs	r0, #0
 809327e:	f85d fb08 	ldr.w	pc, [sp], #8
 8093282:	bf00      	nop

08093284 <__aeabi_dcmple>:
 8093284:	f84d ed08 	str.w	lr, [sp, #-8]!
 8093288:	f7ff ffe0 	bl	809324c <__aeabi_cdcmpeq>
 809328c:	bf94      	ite	ls
 809328e:	2001      	movls	r0, #1
 8093290:	2000      	movhi	r0, #0
 8093292:	f85d fb08 	ldr.w	pc, [sp], #8
 8093296:	bf00      	nop

08093298 <__aeabi_dcmpge>:
 8093298:	f84d ed08 	str.w	lr, [sp, #-8]!
 809329c:	f7ff ffce 	bl	809323c <__aeabi_cdrcmple>
 80932a0:	bf94      	ite	ls
 80932a2:	2001      	movls	r0, #1
 80932a4:	2000      	movhi	r0, #0
 80932a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80932aa:	bf00      	nop

080932ac <__aeabi_dcmpgt>:
 80932ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80932b0:	f7ff ffc4 	bl	809323c <__aeabi_cdrcmple>
 80932b4:	bf34      	ite	cc
 80932b6:	2001      	movcc	r0, #1
 80932b8:	2000      	movcs	r0, #0
 80932ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80932be:	bf00      	nop

080932c0 <__aeabi_dcmpun>:
 80932c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80932c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80932c8:	d102      	bne.n	80932d0 <__aeabi_dcmpun+0x10>
 80932ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80932ce:	d10a      	bne.n	80932e6 <__aeabi_dcmpun+0x26>
 80932d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80932d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80932d8:	d102      	bne.n	80932e0 <__aeabi_dcmpun+0x20>
 80932da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80932de:	d102      	bne.n	80932e6 <__aeabi_dcmpun+0x26>
 80932e0:	f04f 0000 	mov.w	r0, #0
 80932e4:	4770      	bx	lr
 80932e6:	f04f 0001 	mov.w	r0, #1
 80932ea:	4770      	bx	lr

080932ec <__aeabi_d2iz>:
 80932ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80932f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80932f4:	d215      	bcs.n	8093322 <__aeabi_d2iz+0x36>
 80932f6:	d511      	bpl.n	809331c <__aeabi_d2iz+0x30>
 80932f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80932fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8093300:	d912      	bls.n	8093328 <__aeabi_d2iz+0x3c>
 8093302:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8093306:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 809330a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 809330e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8093312:	fa23 f002 	lsr.w	r0, r3, r2
 8093316:	bf18      	it	ne
 8093318:	4240      	negne	r0, r0
 809331a:	4770      	bx	lr
 809331c:	f04f 0000 	mov.w	r0, #0
 8093320:	4770      	bx	lr
 8093322:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8093326:	d105      	bne.n	8093334 <__aeabi_d2iz+0x48>
 8093328:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 809332c:	bf08      	it	eq
 809332e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8093332:	4770      	bx	lr
 8093334:	f04f 0000 	mov.w	r0, #0
 8093338:	4770      	bx	lr
 809333a:	bf00      	nop

0809333c <__aeabi_d2uiz>:
 809333c:	004a      	lsls	r2, r1, #1
 809333e:	d211      	bcs.n	8093364 <__aeabi_d2uiz+0x28>
 8093340:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8093344:	d211      	bcs.n	809336a <__aeabi_d2uiz+0x2e>
 8093346:	d50d      	bpl.n	8093364 <__aeabi_d2uiz+0x28>
 8093348:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 809334c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8093350:	d40e      	bmi.n	8093370 <__aeabi_d2uiz+0x34>
 8093352:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8093356:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 809335a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 809335e:	fa23 f002 	lsr.w	r0, r3, r2
 8093362:	4770      	bx	lr
 8093364:	f04f 0000 	mov.w	r0, #0
 8093368:	4770      	bx	lr
 809336a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 809336e:	d102      	bne.n	8093376 <__aeabi_d2uiz+0x3a>
 8093370:	f04f 30ff 	mov.w	r0, #4294967295
 8093374:	4770      	bx	lr
 8093376:	f04f 0000 	mov.w	r0, #0
 809337a:	4770      	bx	lr

0809337c <__aeabi_d2f>:
 809337c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8093380:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8093384:	bf24      	itt	cs
 8093386:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 809338a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 809338e:	d90d      	bls.n	80933ac <__aeabi_d2f+0x30>
 8093390:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8093394:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8093398:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 809339c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80933a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80933a4:	bf08      	it	eq
 80933a6:	f020 0001 	biceq.w	r0, r0, #1
 80933aa:	4770      	bx	lr
 80933ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80933b0:	d121      	bne.n	80933f6 <__aeabi_d2f+0x7a>
 80933b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80933b6:	bfbc      	itt	lt
 80933b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80933bc:	4770      	bxlt	lr
 80933be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80933c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80933c6:	f1c2 0218 	rsb	r2, r2, #24
 80933ca:	f1c2 0c20 	rsb	ip, r2, #32
 80933ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80933d2:	fa20 f002 	lsr.w	r0, r0, r2
 80933d6:	bf18      	it	ne
 80933d8:	f040 0001 	orrne.w	r0, r0, #1
 80933dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80933e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80933e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80933e8:	ea40 000c 	orr.w	r0, r0, ip
 80933ec:	fa23 f302 	lsr.w	r3, r3, r2
 80933f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80933f4:	e7cc      	b.n	8093390 <__aeabi_d2f+0x14>
 80933f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80933fa:	d107      	bne.n	809340c <__aeabi_d2f+0x90>
 80933fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8093400:	bf1e      	ittt	ne
 8093402:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8093406:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 809340a:	4770      	bxne	lr
 809340c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8093410:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8093414:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8093418:	4770      	bx	lr
 809341a:	bf00      	nop

0809341c <__aeabi_frsub>:
 809341c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8093420:	e002      	b.n	8093428 <__addsf3>
 8093422:	bf00      	nop

08093424 <__aeabi_fsub>:
 8093424:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08093428 <__addsf3>:
 8093428:	0042      	lsls	r2, r0, #1
 809342a:	bf1f      	itttt	ne
 809342c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8093430:	ea92 0f03 	teqne	r2, r3
 8093434:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8093438:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 809343c:	d06a      	beq.n	8093514 <__addsf3+0xec>
 809343e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8093442:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8093446:	bfc1      	itttt	gt
 8093448:	18d2      	addgt	r2, r2, r3
 809344a:	4041      	eorgt	r1, r0
 809344c:	4048      	eorgt	r0, r1
 809344e:	4041      	eorgt	r1, r0
 8093450:	bfb8      	it	lt
 8093452:	425b      	neglt	r3, r3
 8093454:	2b19      	cmp	r3, #25
 8093456:	bf88      	it	hi
 8093458:	4770      	bxhi	lr
 809345a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 809345e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8093462:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8093466:	bf18      	it	ne
 8093468:	4240      	negne	r0, r0
 809346a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 809346e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8093472:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8093476:	bf18      	it	ne
 8093478:	4249      	negne	r1, r1
 809347a:	ea92 0f03 	teq	r2, r3
 809347e:	d03f      	beq.n	8093500 <__addsf3+0xd8>
 8093480:	f1a2 0201 	sub.w	r2, r2, #1
 8093484:	fa41 fc03 	asr.w	ip, r1, r3
 8093488:	eb10 000c 	adds.w	r0, r0, ip
 809348c:	f1c3 0320 	rsb	r3, r3, #32
 8093490:	fa01 f103 	lsl.w	r1, r1, r3
 8093494:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8093498:	d502      	bpl.n	80934a0 <__addsf3+0x78>
 809349a:	4249      	negs	r1, r1
 809349c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80934a0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80934a4:	d313      	bcc.n	80934ce <__addsf3+0xa6>
 80934a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80934aa:	d306      	bcc.n	80934ba <__addsf3+0x92>
 80934ac:	0840      	lsrs	r0, r0, #1
 80934ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80934b2:	f102 0201 	add.w	r2, r2, #1
 80934b6:	2afe      	cmp	r2, #254	; 0xfe
 80934b8:	d251      	bcs.n	809355e <__addsf3+0x136>
 80934ba:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80934be:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80934c2:	bf08      	it	eq
 80934c4:	f020 0001 	biceq.w	r0, r0, #1
 80934c8:	ea40 0003 	orr.w	r0, r0, r3
 80934cc:	4770      	bx	lr
 80934ce:	0049      	lsls	r1, r1, #1
 80934d0:	eb40 0000 	adc.w	r0, r0, r0
 80934d4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80934d8:	f1a2 0201 	sub.w	r2, r2, #1
 80934dc:	d1ed      	bne.n	80934ba <__addsf3+0x92>
 80934de:	fab0 fc80 	clz	ip, r0
 80934e2:	f1ac 0c08 	sub.w	ip, ip, #8
 80934e6:	ebb2 020c 	subs.w	r2, r2, ip
 80934ea:	fa00 f00c 	lsl.w	r0, r0, ip
 80934ee:	bfaa      	itet	ge
 80934f0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80934f4:	4252      	neglt	r2, r2
 80934f6:	4318      	orrge	r0, r3
 80934f8:	bfbc      	itt	lt
 80934fa:	40d0      	lsrlt	r0, r2
 80934fc:	4318      	orrlt	r0, r3
 80934fe:	4770      	bx	lr
 8093500:	f092 0f00 	teq	r2, #0
 8093504:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8093508:	bf06      	itte	eq
 809350a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 809350e:	3201      	addeq	r2, #1
 8093510:	3b01      	subne	r3, #1
 8093512:	e7b5      	b.n	8093480 <__addsf3+0x58>
 8093514:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8093518:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 809351c:	bf18      	it	ne
 809351e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8093522:	d021      	beq.n	8093568 <__addsf3+0x140>
 8093524:	ea92 0f03 	teq	r2, r3
 8093528:	d004      	beq.n	8093534 <__addsf3+0x10c>
 809352a:	f092 0f00 	teq	r2, #0
 809352e:	bf08      	it	eq
 8093530:	4608      	moveq	r0, r1
 8093532:	4770      	bx	lr
 8093534:	ea90 0f01 	teq	r0, r1
 8093538:	bf1c      	itt	ne
 809353a:	2000      	movne	r0, #0
 809353c:	4770      	bxne	lr
 809353e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8093542:	d104      	bne.n	809354e <__addsf3+0x126>
 8093544:	0040      	lsls	r0, r0, #1
 8093546:	bf28      	it	cs
 8093548:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 809354c:	4770      	bx	lr
 809354e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8093552:	bf3c      	itt	cc
 8093554:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8093558:	4770      	bxcc	lr
 809355a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 809355e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8093562:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8093566:	4770      	bx	lr
 8093568:	ea7f 6222 	mvns.w	r2, r2, asr #24
 809356c:	bf16      	itet	ne
 809356e:	4608      	movne	r0, r1
 8093570:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8093574:	4601      	movne	r1, r0
 8093576:	0242      	lsls	r2, r0, #9
 8093578:	bf06      	itte	eq
 809357a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 809357e:	ea90 0f01 	teqeq	r0, r1
 8093582:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8093586:	4770      	bx	lr

08093588 <__aeabi_ui2f>:
 8093588:	f04f 0300 	mov.w	r3, #0
 809358c:	e004      	b.n	8093598 <__aeabi_i2f+0x8>
 809358e:	bf00      	nop

08093590 <__aeabi_i2f>:
 8093590:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8093594:	bf48      	it	mi
 8093596:	4240      	negmi	r0, r0
 8093598:	ea5f 0c00 	movs.w	ip, r0
 809359c:	bf08      	it	eq
 809359e:	4770      	bxeq	lr
 80935a0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80935a4:	4601      	mov	r1, r0
 80935a6:	f04f 0000 	mov.w	r0, #0
 80935aa:	e01c      	b.n	80935e6 <__aeabi_l2f+0x2a>

080935ac <__aeabi_ul2f>:
 80935ac:	ea50 0201 	orrs.w	r2, r0, r1
 80935b0:	bf08      	it	eq
 80935b2:	4770      	bxeq	lr
 80935b4:	f04f 0300 	mov.w	r3, #0
 80935b8:	e00a      	b.n	80935d0 <__aeabi_l2f+0x14>
 80935ba:	bf00      	nop

080935bc <__aeabi_l2f>:
 80935bc:	ea50 0201 	orrs.w	r2, r0, r1
 80935c0:	bf08      	it	eq
 80935c2:	4770      	bxeq	lr
 80935c4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80935c8:	d502      	bpl.n	80935d0 <__aeabi_l2f+0x14>
 80935ca:	4240      	negs	r0, r0
 80935cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80935d0:	ea5f 0c01 	movs.w	ip, r1
 80935d4:	bf02      	ittt	eq
 80935d6:	4684      	moveq	ip, r0
 80935d8:	4601      	moveq	r1, r0
 80935da:	2000      	moveq	r0, #0
 80935dc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80935e0:	bf08      	it	eq
 80935e2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80935e6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80935ea:	fabc f28c 	clz	r2, ip
 80935ee:	3a08      	subs	r2, #8
 80935f0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80935f4:	db10      	blt.n	8093618 <__aeabi_l2f+0x5c>
 80935f6:	fa01 fc02 	lsl.w	ip, r1, r2
 80935fa:	4463      	add	r3, ip
 80935fc:	fa00 fc02 	lsl.w	ip, r0, r2
 8093600:	f1c2 0220 	rsb	r2, r2, #32
 8093604:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8093608:	fa20 f202 	lsr.w	r2, r0, r2
 809360c:	eb43 0002 	adc.w	r0, r3, r2
 8093610:	bf08      	it	eq
 8093612:	f020 0001 	biceq.w	r0, r0, #1
 8093616:	4770      	bx	lr
 8093618:	f102 0220 	add.w	r2, r2, #32
 809361c:	fa01 fc02 	lsl.w	ip, r1, r2
 8093620:	f1c2 0220 	rsb	r2, r2, #32
 8093624:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8093628:	fa21 f202 	lsr.w	r2, r1, r2
 809362c:	eb43 0002 	adc.w	r0, r3, r2
 8093630:	bf08      	it	eq
 8093632:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8093636:	4770      	bx	lr

08093638 <__aeabi_fmul>:
 8093638:	f04f 0cff 	mov.w	ip, #255	; 0xff
 809363c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8093640:	bf1e      	ittt	ne
 8093642:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8093646:	ea92 0f0c 	teqne	r2, ip
 809364a:	ea93 0f0c 	teqne	r3, ip
 809364e:	d06f      	beq.n	8093730 <__aeabi_fmul+0xf8>
 8093650:	441a      	add	r2, r3
 8093652:	ea80 0c01 	eor.w	ip, r0, r1
 8093656:	0240      	lsls	r0, r0, #9
 8093658:	bf18      	it	ne
 809365a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 809365e:	d01e      	beq.n	809369e <__aeabi_fmul+0x66>
 8093660:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8093664:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8093668:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 809366c:	fba0 3101 	umull	r3, r1, r0, r1
 8093670:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8093674:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8093678:	bf3e      	ittt	cc
 809367a:	0049      	lslcc	r1, r1, #1
 809367c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8093680:	005b      	lslcc	r3, r3, #1
 8093682:	ea40 0001 	orr.w	r0, r0, r1
 8093686:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 809368a:	2afd      	cmp	r2, #253	; 0xfd
 809368c:	d81d      	bhi.n	80936ca <__aeabi_fmul+0x92>
 809368e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8093692:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8093696:	bf08      	it	eq
 8093698:	f020 0001 	biceq.w	r0, r0, #1
 809369c:	4770      	bx	lr
 809369e:	f090 0f00 	teq	r0, #0
 80936a2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80936a6:	bf08      	it	eq
 80936a8:	0249      	lsleq	r1, r1, #9
 80936aa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80936ae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80936b2:	3a7f      	subs	r2, #127	; 0x7f
 80936b4:	bfc2      	ittt	gt
 80936b6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80936ba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80936be:	4770      	bxgt	lr
 80936c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80936c4:	f04f 0300 	mov.w	r3, #0
 80936c8:	3a01      	subs	r2, #1
 80936ca:	dc5d      	bgt.n	8093788 <__aeabi_fmul+0x150>
 80936cc:	f112 0f19 	cmn.w	r2, #25
 80936d0:	bfdc      	itt	le
 80936d2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80936d6:	4770      	bxle	lr
 80936d8:	f1c2 0200 	rsb	r2, r2, #0
 80936dc:	0041      	lsls	r1, r0, #1
 80936de:	fa21 f102 	lsr.w	r1, r1, r2
 80936e2:	f1c2 0220 	rsb	r2, r2, #32
 80936e6:	fa00 fc02 	lsl.w	ip, r0, r2
 80936ea:	ea5f 0031 	movs.w	r0, r1, rrx
 80936ee:	f140 0000 	adc.w	r0, r0, #0
 80936f2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80936f6:	bf08      	it	eq
 80936f8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80936fc:	4770      	bx	lr
 80936fe:	f092 0f00 	teq	r2, #0
 8093702:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8093706:	bf02      	ittt	eq
 8093708:	0040      	lsleq	r0, r0, #1
 809370a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 809370e:	3a01      	subeq	r2, #1
 8093710:	d0f9      	beq.n	8093706 <__aeabi_fmul+0xce>
 8093712:	ea40 000c 	orr.w	r0, r0, ip
 8093716:	f093 0f00 	teq	r3, #0
 809371a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 809371e:	bf02      	ittt	eq
 8093720:	0049      	lsleq	r1, r1, #1
 8093722:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8093726:	3b01      	subeq	r3, #1
 8093728:	d0f9      	beq.n	809371e <__aeabi_fmul+0xe6>
 809372a:	ea41 010c 	orr.w	r1, r1, ip
 809372e:	e78f      	b.n	8093650 <__aeabi_fmul+0x18>
 8093730:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8093734:	ea92 0f0c 	teq	r2, ip
 8093738:	bf18      	it	ne
 809373a:	ea93 0f0c 	teqne	r3, ip
 809373e:	d00a      	beq.n	8093756 <__aeabi_fmul+0x11e>
 8093740:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8093744:	bf18      	it	ne
 8093746:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 809374a:	d1d8      	bne.n	80936fe <__aeabi_fmul+0xc6>
 809374c:	ea80 0001 	eor.w	r0, r0, r1
 8093750:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8093754:	4770      	bx	lr
 8093756:	f090 0f00 	teq	r0, #0
 809375a:	bf17      	itett	ne
 809375c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8093760:	4608      	moveq	r0, r1
 8093762:	f091 0f00 	teqne	r1, #0
 8093766:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 809376a:	d014      	beq.n	8093796 <__aeabi_fmul+0x15e>
 809376c:	ea92 0f0c 	teq	r2, ip
 8093770:	d101      	bne.n	8093776 <__aeabi_fmul+0x13e>
 8093772:	0242      	lsls	r2, r0, #9
 8093774:	d10f      	bne.n	8093796 <__aeabi_fmul+0x15e>
 8093776:	ea93 0f0c 	teq	r3, ip
 809377a:	d103      	bne.n	8093784 <__aeabi_fmul+0x14c>
 809377c:	024b      	lsls	r3, r1, #9
 809377e:	bf18      	it	ne
 8093780:	4608      	movne	r0, r1
 8093782:	d108      	bne.n	8093796 <__aeabi_fmul+0x15e>
 8093784:	ea80 0001 	eor.w	r0, r0, r1
 8093788:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 809378c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8093790:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8093794:	4770      	bx	lr
 8093796:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 809379a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 809379e:	4770      	bx	lr

080937a0 <__aeabi_fdiv>:
 80937a0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80937a4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80937a8:	bf1e      	ittt	ne
 80937aa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80937ae:	ea92 0f0c 	teqne	r2, ip
 80937b2:	ea93 0f0c 	teqne	r3, ip
 80937b6:	d069      	beq.n	809388c <__aeabi_fdiv+0xec>
 80937b8:	eba2 0203 	sub.w	r2, r2, r3
 80937bc:	ea80 0c01 	eor.w	ip, r0, r1
 80937c0:	0249      	lsls	r1, r1, #9
 80937c2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80937c6:	d037      	beq.n	8093838 <__aeabi_fdiv+0x98>
 80937c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80937cc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80937d0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80937d4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80937d8:	428b      	cmp	r3, r1
 80937da:	bf38      	it	cc
 80937dc:	005b      	lslcc	r3, r3, #1
 80937de:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80937e2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80937e6:	428b      	cmp	r3, r1
 80937e8:	bf24      	itt	cs
 80937ea:	1a5b      	subcs	r3, r3, r1
 80937ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80937f0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80937f4:	bf24      	itt	cs
 80937f6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80937fa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80937fe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8093802:	bf24      	itt	cs
 8093804:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8093808:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 809380c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8093810:	bf24      	itt	cs
 8093812:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8093816:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 809381a:	011b      	lsls	r3, r3, #4
 809381c:	bf18      	it	ne
 809381e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8093822:	d1e0      	bne.n	80937e6 <__aeabi_fdiv+0x46>
 8093824:	2afd      	cmp	r2, #253	; 0xfd
 8093826:	f63f af50 	bhi.w	80936ca <__aeabi_fmul+0x92>
 809382a:	428b      	cmp	r3, r1
 809382c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8093830:	bf08      	it	eq
 8093832:	f020 0001 	biceq.w	r0, r0, #1
 8093836:	4770      	bx	lr
 8093838:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 809383c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8093840:	327f      	adds	r2, #127	; 0x7f
 8093842:	bfc2      	ittt	gt
 8093844:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8093848:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 809384c:	4770      	bxgt	lr
 809384e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8093852:	f04f 0300 	mov.w	r3, #0
 8093856:	3a01      	subs	r2, #1
 8093858:	e737      	b.n	80936ca <__aeabi_fmul+0x92>
 809385a:	f092 0f00 	teq	r2, #0
 809385e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8093862:	bf02      	ittt	eq
 8093864:	0040      	lsleq	r0, r0, #1
 8093866:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 809386a:	3a01      	subeq	r2, #1
 809386c:	d0f9      	beq.n	8093862 <__aeabi_fdiv+0xc2>
 809386e:	ea40 000c 	orr.w	r0, r0, ip
 8093872:	f093 0f00 	teq	r3, #0
 8093876:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 809387a:	bf02      	ittt	eq
 809387c:	0049      	lsleq	r1, r1, #1
 809387e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8093882:	3b01      	subeq	r3, #1
 8093884:	d0f9      	beq.n	809387a <__aeabi_fdiv+0xda>
 8093886:	ea41 010c 	orr.w	r1, r1, ip
 809388a:	e795      	b.n	80937b8 <__aeabi_fdiv+0x18>
 809388c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8093890:	ea92 0f0c 	teq	r2, ip
 8093894:	d108      	bne.n	80938a8 <__aeabi_fdiv+0x108>
 8093896:	0242      	lsls	r2, r0, #9
 8093898:	f47f af7d 	bne.w	8093796 <__aeabi_fmul+0x15e>
 809389c:	ea93 0f0c 	teq	r3, ip
 80938a0:	f47f af70 	bne.w	8093784 <__aeabi_fmul+0x14c>
 80938a4:	4608      	mov	r0, r1
 80938a6:	e776      	b.n	8093796 <__aeabi_fmul+0x15e>
 80938a8:	ea93 0f0c 	teq	r3, ip
 80938ac:	d104      	bne.n	80938b8 <__aeabi_fdiv+0x118>
 80938ae:	024b      	lsls	r3, r1, #9
 80938b0:	f43f af4c 	beq.w	809374c <__aeabi_fmul+0x114>
 80938b4:	4608      	mov	r0, r1
 80938b6:	e76e      	b.n	8093796 <__aeabi_fmul+0x15e>
 80938b8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80938bc:	bf18      	it	ne
 80938be:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80938c2:	d1ca      	bne.n	809385a <__aeabi_fdiv+0xba>
 80938c4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80938c8:	f47f af5c 	bne.w	8093784 <__aeabi_fmul+0x14c>
 80938cc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80938d0:	f47f af3c 	bne.w	809374c <__aeabi_fmul+0x114>
 80938d4:	e75f      	b.n	8093796 <__aeabi_fmul+0x15e>
 80938d6:	bf00      	nop

080938d8 <__aeabi_f2iz>:
 80938d8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80938dc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80938e0:	d30f      	bcc.n	8093902 <__aeabi_f2iz+0x2a>
 80938e2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80938e6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80938ea:	d90d      	bls.n	8093908 <__aeabi_f2iz+0x30>
 80938ec:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80938f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80938f4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80938f8:	fa23 f002 	lsr.w	r0, r3, r2
 80938fc:	bf18      	it	ne
 80938fe:	4240      	negne	r0, r0
 8093900:	4770      	bx	lr
 8093902:	f04f 0000 	mov.w	r0, #0
 8093906:	4770      	bx	lr
 8093908:	f112 0f61 	cmn.w	r2, #97	; 0x61
 809390c:	d101      	bne.n	8093912 <__aeabi_f2iz+0x3a>
 809390e:	0242      	lsls	r2, r0, #9
 8093910:	d105      	bne.n	809391e <__aeabi_f2iz+0x46>
 8093912:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8093916:	bf08      	it	eq
 8093918:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 809391c:	4770      	bx	lr
 809391e:	f04f 0000 	mov.w	r0, #0
 8093922:	4770      	bx	lr

08093924 <__aeabi_f2uiz>:
 8093924:	0042      	lsls	r2, r0, #1
 8093926:	d20e      	bcs.n	8093946 <__aeabi_f2uiz+0x22>
 8093928:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 809392c:	d30b      	bcc.n	8093946 <__aeabi_f2uiz+0x22>
 809392e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8093932:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8093936:	d409      	bmi.n	809394c <__aeabi_f2uiz+0x28>
 8093938:	ea4f 2300 	mov.w	r3, r0, lsl #8
 809393c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8093940:	fa23 f002 	lsr.w	r0, r3, r2
 8093944:	4770      	bx	lr
 8093946:	f04f 0000 	mov.w	r0, #0
 809394a:	4770      	bx	lr
 809394c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8093950:	d101      	bne.n	8093956 <__aeabi_f2uiz+0x32>
 8093952:	0242      	lsls	r2, r0, #9
 8093954:	d102      	bne.n	809395c <__aeabi_f2uiz+0x38>
 8093956:	f04f 30ff 	mov.w	r0, #4294967295
 809395a:	4770      	bx	lr
 809395c:	f04f 0000 	mov.w	r0, #0
 8093960:	4770      	bx	lr
 8093962:	bf00      	nop

08093964 <__aeabi_uldivmod>:
 8093964:	b953      	cbnz	r3, 809397c <__aeabi_uldivmod+0x18>
 8093966:	b94a      	cbnz	r2, 809397c <__aeabi_uldivmod+0x18>
 8093968:	2900      	cmp	r1, #0
 809396a:	bf08      	it	eq
 809396c:	2800      	cmpeq	r0, #0
 809396e:	bf1c      	itt	ne
 8093970:	f04f 31ff 	movne.w	r1, #4294967295
 8093974:	f04f 30ff 	movne.w	r0, #4294967295
 8093978:	f000 b982 	b.w	8093c80 <__aeabi_idiv0>
 809397c:	f1ad 0c08 	sub.w	ip, sp, #8
 8093980:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8093984:	f000 f806 	bl	8093994 <__udivmoddi4>
 8093988:	f8dd e004 	ldr.w	lr, [sp, #4]
 809398c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8093990:	b004      	add	sp, #16
 8093992:	4770      	bx	lr

08093994 <__udivmoddi4>:
 8093994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8093998:	468c      	mov	ip, r1
 809399a:	460c      	mov	r4, r1
 809399c:	4605      	mov	r5, r0
 809399e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80939a0:	2b00      	cmp	r3, #0
 80939a2:	d14f      	bne.n	8093a44 <__udivmoddi4+0xb0>
 80939a4:	428a      	cmp	r2, r1
 80939a6:	4617      	mov	r7, r2
 80939a8:	d96b      	bls.n	8093a82 <__udivmoddi4+0xee>
 80939aa:	fab2 fe82 	clz	lr, r2
 80939ae:	f1be 0f00 	cmp.w	lr, #0
 80939b2:	d00b      	beq.n	80939cc <__udivmoddi4+0x38>
 80939b4:	f1ce 0520 	rsb	r5, lr, #32
 80939b8:	fa20 f505 	lsr.w	r5, r0, r5
 80939bc:	fa01 f30e 	lsl.w	r3, r1, lr
 80939c0:	ea45 0c03 	orr.w	ip, r5, r3
 80939c4:	fa02 f70e 	lsl.w	r7, r2, lr
 80939c8:	fa00 f50e 	lsl.w	r5, r0, lr
 80939cc:	0c39      	lsrs	r1, r7, #16
 80939ce:	fbbc f0f1 	udiv	r0, ip, r1
 80939d2:	b2ba      	uxth	r2, r7
 80939d4:	fb01 c310 	mls	r3, r1, r0, ip
 80939d8:	fb00 f802 	mul.w	r8, r0, r2
 80939dc:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80939e0:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 80939e4:	45a0      	cmp	r8, r4
 80939e6:	d909      	bls.n	80939fc <__udivmoddi4+0x68>
 80939e8:	19e4      	adds	r4, r4, r7
 80939ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80939ee:	f080 8128 	bcs.w	8093c42 <__udivmoddi4+0x2ae>
 80939f2:	45a0      	cmp	r8, r4
 80939f4:	f240 8125 	bls.w	8093c42 <__udivmoddi4+0x2ae>
 80939f8:	3802      	subs	r0, #2
 80939fa:	443c      	add	r4, r7
 80939fc:	ebc8 0404 	rsb	r4, r8, r4
 8093a00:	fbb4 f3f1 	udiv	r3, r4, r1
 8093a04:	fb01 4c13 	mls	ip, r1, r3, r4
 8093a08:	fb03 f202 	mul.w	r2, r3, r2
 8093a0c:	b2ac      	uxth	r4, r5
 8093a0e:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 8093a12:	428a      	cmp	r2, r1
 8093a14:	d909      	bls.n	8093a2a <__udivmoddi4+0x96>
 8093a16:	19c9      	adds	r1, r1, r7
 8093a18:	f103 34ff 	add.w	r4, r3, #4294967295
 8093a1c:	f080 810f 	bcs.w	8093c3e <__udivmoddi4+0x2aa>
 8093a20:	428a      	cmp	r2, r1
 8093a22:	f240 810c 	bls.w	8093c3e <__udivmoddi4+0x2aa>
 8093a26:	3b02      	subs	r3, #2
 8093a28:	4439      	add	r1, r7
 8093a2a:	1a8a      	subs	r2, r1, r2
 8093a2c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8093a30:	2100      	movs	r1, #0
 8093a32:	2e00      	cmp	r6, #0
 8093a34:	d063      	beq.n	8093afe <__udivmoddi4+0x16a>
 8093a36:	fa22 f20e 	lsr.w	r2, r2, lr
 8093a3a:	2300      	movs	r3, #0
 8093a3c:	e886 000c 	stmia.w	r6, {r2, r3}
 8093a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8093a44:	428b      	cmp	r3, r1
 8093a46:	d907      	bls.n	8093a58 <__udivmoddi4+0xc4>
 8093a48:	2e00      	cmp	r6, #0
 8093a4a:	d056      	beq.n	8093afa <__udivmoddi4+0x166>
 8093a4c:	2100      	movs	r1, #0
 8093a4e:	e886 0011 	stmia.w	r6, {r0, r4}
 8093a52:	4608      	mov	r0, r1
 8093a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8093a58:	fab3 f183 	clz	r1, r3
 8093a5c:	2900      	cmp	r1, #0
 8093a5e:	f040 8093 	bne.w	8093b88 <__udivmoddi4+0x1f4>
 8093a62:	42a3      	cmp	r3, r4
 8093a64:	d302      	bcc.n	8093a6c <__udivmoddi4+0xd8>
 8093a66:	4282      	cmp	r2, r0
 8093a68:	f200 80fe 	bhi.w	8093c68 <__udivmoddi4+0x2d4>
 8093a6c:	1a85      	subs	r5, r0, r2
 8093a6e:	eb64 0303 	sbc.w	r3, r4, r3
 8093a72:	469c      	mov	ip, r3
 8093a74:	2001      	movs	r0, #1
 8093a76:	2e00      	cmp	r6, #0
 8093a78:	d041      	beq.n	8093afe <__udivmoddi4+0x16a>
 8093a7a:	e886 1020 	stmia.w	r6, {r5, ip}
 8093a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8093a82:	b912      	cbnz	r2, 8093a8a <__udivmoddi4+0xf6>
 8093a84:	2701      	movs	r7, #1
 8093a86:	fbb7 f7f2 	udiv	r7, r7, r2
 8093a8a:	fab7 fe87 	clz	lr, r7
 8093a8e:	f1be 0f00 	cmp.w	lr, #0
 8093a92:	d136      	bne.n	8093b02 <__udivmoddi4+0x16e>
 8093a94:	1be4      	subs	r4, r4, r7
 8093a96:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8093a9a:	fa1f f987 	uxth.w	r9, r7
 8093a9e:	2101      	movs	r1, #1
 8093aa0:	fbb4 f3f8 	udiv	r3, r4, r8
 8093aa4:	fb08 4413 	mls	r4, r8, r3, r4
 8093aa8:	fb09 f203 	mul.w	r2, r9, r3
 8093aac:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8093ab0:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 8093ab4:	42a2      	cmp	r2, r4
 8093ab6:	d907      	bls.n	8093ac8 <__udivmoddi4+0x134>
 8093ab8:	19e4      	adds	r4, r4, r7
 8093aba:	f103 30ff 	add.w	r0, r3, #4294967295
 8093abe:	d202      	bcs.n	8093ac6 <__udivmoddi4+0x132>
 8093ac0:	42a2      	cmp	r2, r4
 8093ac2:	f200 80d3 	bhi.w	8093c6c <__udivmoddi4+0x2d8>
 8093ac6:	4603      	mov	r3, r0
 8093ac8:	1aa4      	subs	r4, r4, r2
 8093aca:	fbb4 f0f8 	udiv	r0, r4, r8
 8093ace:	fb08 4810 	mls	r8, r8, r0, r4
 8093ad2:	fb09 f900 	mul.w	r9, r9, r0
 8093ad6:	b2ac      	uxth	r4, r5
 8093ad8:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 8093adc:	4591      	cmp	r9, r2
 8093ade:	d907      	bls.n	8093af0 <__udivmoddi4+0x15c>
 8093ae0:	19d2      	adds	r2, r2, r7
 8093ae2:	f100 34ff 	add.w	r4, r0, #4294967295
 8093ae6:	d202      	bcs.n	8093aee <__udivmoddi4+0x15a>
 8093ae8:	4591      	cmp	r9, r2
 8093aea:	f200 80ba 	bhi.w	8093c62 <__udivmoddi4+0x2ce>
 8093aee:	4620      	mov	r0, r4
 8093af0:	ebc9 0202 	rsb	r2, r9, r2
 8093af4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8093af8:	e79b      	b.n	8093a32 <__udivmoddi4+0x9e>
 8093afa:	4631      	mov	r1, r6
 8093afc:	4630      	mov	r0, r6
 8093afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8093b02:	fa07 f70e 	lsl.w	r7, r7, lr
 8093b06:	f1ce 0c20 	rsb	ip, lr, #32
 8093b0a:	fa24 f30c 	lsr.w	r3, r4, ip
 8093b0e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8093b12:	fbb3 faf8 	udiv	sl, r3, r8
 8093b16:	fa1f f987 	uxth.w	r9, r7
 8093b1a:	fb08 351a 	mls	r5, r8, sl, r3
 8093b1e:	fa20 fc0c 	lsr.w	ip, r0, ip
 8093b22:	fa04 f40e 	lsl.w	r4, r4, lr
 8093b26:	fb0a fb09 	mul.w	fp, sl, r9
 8093b2a:	ea4c 0c04 	orr.w	ip, ip, r4
 8093b2e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8093b32:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 8093b36:	459b      	cmp	fp, r3
 8093b38:	fa00 f50e 	lsl.w	r5, r0, lr
 8093b3c:	d90a      	bls.n	8093b54 <__udivmoddi4+0x1c0>
 8093b3e:	19db      	adds	r3, r3, r7
 8093b40:	f10a 32ff 	add.w	r2, sl, #4294967295
 8093b44:	f080 808b 	bcs.w	8093c5e <__udivmoddi4+0x2ca>
 8093b48:	459b      	cmp	fp, r3
 8093b4a:	f240 8088 	bls.w	8093c5e <__udivmoddi4+0x2ca>
 8093b4e:	f1aa 0a02 	sub.w	sl, sl, #2
 8093b52:	443b      	add	r3, r7
 8093b54:	ebcb 0303 	rsb	r3, fp, r3
 8093b58:	fbb3 f0f8 	udiv	r0, r3, r8
 8093b5c:	fb08 3310 	mls	r3, r8, r0, r3
 8093b60:	fb00 f409 	mul.w	r4, r0, r9
 8093b64:	fa1f fc8c 	uxth.w	ip, ip
 8093b68:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 8093b6c:	429c      	cmp	r4, r3
 8093b6e:	d907      	bls.n	8093b80 <__udivmoddi4+0x1ec>
 8093b70:	19db      	adds	r3, r3, r7
 8093b72:	f100 32ff 	add.w	r2, r0, #4294967295
 8093b76:	d26e      	bcs.n	8093c56 <__udivmoddi4+0x2c2>
 8093b78:	429c      	cmp	r4, r3
 8093b7a:	d96c      	bls.n	8093c56 <__udivmoddi4+0x2c2>
 8093b7c:	3802      	subs	r0, #2
 8093b7e:	443b      	add	r3, r7
 8093b80:	1b1c      	subs	r4, r3, r4
 8093b82:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 8093b86:	e78b      	b.n	8093aa0 <__udivmoddi4+0x10c>
 8093b88:	f1c1 0e20 	rsb	lr, r1, #32
 8093b8c:	408b      	lsls	r3, r1
 8093b8e:	fa22 fc0e 	lsr.w	ip, r2, lr
 8093b92:	ea4c 0c03 	orr.w	ip, ip, r3
 8093b96:	fa24 f70e 	lsr.w	r7, r4, lr
 8093b9a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8093b9e:	fbb7 faf9 	udiv	sl, r7, r9
 8093ba2:	fa1f f38c 	uxth.w	r3, ip
 8093ba6:	fb09 771a 	mls	r7, r9, sl, r7
 8093baa:	fa20 f80e 	lsr.w	r8, r0, lr
 8093bae:	408c      	lsls	r4, r1
 8093bb0:	fb0a f503 	mul.w	r5, sl, r3
 8093bb4:	ea48 0404 	orr.w	r4, r8, r4
 8093bb8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8093bbc:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 8093bc0:	42bd      	cmp	r5, r7
 8093bc2:	fa02 f201 	lsl.w	r2, r2, r1
 8093bc6:	fa00 fb01 	lsl.w	fp, r0, r1
 8093bca:	d909      	bls.n	8093be0 <__udivmoddi4+0x24c>
 8093bcc:	eb17 070c 	adds.w	r7, r7, ip
 8093bd0:	f10a 30ff 	add.w	r0, sl, #4294967295
 8093bd4:	d241      	bcs.n	8093c5a <__udivmoddi4+0x2c6>
 8093bd6:	42bd      	cmp	r5, r7
 8093bd8:	d93f      	bls.n	8093c5a <__udivmoddi4+0x2c6>
 8093bda:	f1aa 0a02 	sub.w	sl, sl, #2
 8093bde:	4467      	add	r7, ip
 8093be0:	1b7f      	subs	r7, r7, r5
 8093be2:	fbb7 f5f9 	udiv	r5, r7, r9
 8093be6:	fb09 7715 	mls	r7, r9, r5, r7
 8093bea:	fb05 f303 	mul.w	r3, r5, r3
 8093bee:	b2a4      	uxth	r4, r4
 8093bf0:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8093bf4:	42bb      	cmp	r3, r7
 8093bf6:	d908      	bls.n	8093c0a <__udivmoddi4+0x276>
 8093bf8:	eb17 070c 	adds.w	r7, r7, ip
 8093bfc:	f105 30ff 	add.w	r0, r5, #4294967295
 8093c00:	d227      	bcs.n	8093c52 <__udivmoddi4+0x2be>
 8093c02:	42bb      	cmp	r3, r7
 8093c04:	d925      	bls.n	8093c52 <__udivmoddi4+0x2be>
 8093c06:	3d02      	subs	r5, #2
 8093c08:	4467      	add	r7, ip
 8093c0a:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 8093c0e:	fba0 8902 	umull	r8, r9, r0, r2
 8093c12:	1aff      	subs	r7, r7, r3
 8093c14:	454f      	cmp	r7, r9
 8093c16:	4645      	mov	r5, r8
 8093c18:	464c      	mov	r4, r9
 8093c1a:	d314      	bcc.n	8093c46 <__udivmoddi4+0x2b2>
 8093c1c:	d029      	beq.n	8093c72 <__udivmoddi4+0x2de>
 8093c1e:	b366      	cbz	r6, 8093c7a <__udivmoddi4+0x2e6>
 8093c20:	ebbb 0305 	subs.w	r3, fp, r5
 8093c24:	eb67 0704 	sbc.w	r7, r7, r4
 8093c28:	fa07 fe0e 	lsl.w	lr, r7, lr
 8093c2c:	40cb      	lsrs	r3, r1
 8093c2e:	40cf      	lsrs	r7, r1
 8093c30:	ea4e 0303 	orr.w	r3, lr, r3
 8093c34:	e886 0088 	stmia.w	r6, {r3, r7}
 8093c38:	2100      	movs	r1, #0
 8093c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8093c3e:	4623      	mov	r3, r4
 8093c40:	e6f3      	b.n	8093a2a <__udivmoddi4+0x96>
 8093c42:	4618      	mov	r0, r3
 8093c44:	e6da      	b.n	80939fc <__udivmoddi4+0x68>
 8093c46:	ebb8 0502 	subs.w	r5, r8, r2
 8093c4a:	eb69 040c 	sbc.w	r4, r9, ip
 8093c4e:	3801      	subs	r0, #1
 8093c50:	e7e5      	b.n	8093c1e <__udivmoddi4+0x28a>
 8093c52:	4605      	mov	r5, r0
 8093c54:	e7d9      	b.n	8093c0a <__udivmoddi4+0x276>
 8093c56:	4610      	mov	r0, r2
 8093c58:	e792      	b.n	8093b80 <__udivmoddi4+0x1ec>
 8093c5a:	4682      	mov	sl, r0
 8093c5c:	e7c0      	b.n	8093be0 <__udivmoddi4+0x24c>
 8093c5e:	4692      	mov	sl, r2
 8093c60:	e778      	b.n	8093b54 <__udivmoddi4+0x1c0>
 8093c62:	3802      	subs	r0, #2
 8093c64:	443a      	add	r2, r7
 8093c66:	e743      	b.n	8093af0 <__udivmoddi4+0x15c>
 8093c68:	4608      	mov	r0, r1
 8093c6a:	e704      	b.n	8093a76 <__udivmoddi4+0xe2>
 8093c6c:	3b02      	subs	r3, #2
 8093c6e:	443c      	add	r4, r7
 8093c70:	e72a      	b.n	8093ac8 <__udivmoddi4+0x134>
 8093c72:	45c3      	cmp	fp, r8
 8093c74:	d3e7      	bcc.n	8093c46 <__udivmoddi4+0x2b2>
 8093c76:	463c      	mov	r4, r7
 8093c78:	e7d1      	b.n	8093c1e <__udivmoddi4+0x28a>
 8093c7a:	4631      	mov	r1, r6
 8093c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08093c80 <__aeabi_idiv0>:
 8093c80:	4770      	bx	lr
 8093c82:	bf00      	nop

08093c84 <asctime>:
 8093c84:	4b09      	ldr	r3, [pc, #36]	; (8093cac <asctime+0x28>)
 8093c86:	b570      	push	{r4, r5, r6, lr}
 8093c88:	681c      	ldr	r4, [r3, #0]
 8093c8a:	4606      	mov	r6, r0
 8093c8c:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8093c8e:	b93d      	cbnz	r5, 8093ca0 <asctime+0x1c>
 8093c90:	201a      	movs	r0, #26
 8093c92:	f7fd fa59 	bl	8091148 <malloc>
 8093c96:	221a      	movs	r2, #26
 8093c98:	6420      	str	r0, [r4, #64]	; 0x40
 8093c9a:	4629      	mov	r1, r5
 8093c9c:	f000 f987 	bl	8093fae <memset>
 8093ca0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8093ca2:	4630      	mov	r0, r6
 8093ca4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8093ca8:	f000 b802 	b.w	8093cb0 <asctime_r>
 8093cac:	200004ac 	.word	0x200004ac

08093cb0 <asctime_r>:
 8093cb0:	b510      	push	{r4, lr}
 8093cb2:	460c      	mov	r4, r1
 8093cb4:	6941      	ldr	r1, [r0, #20]
 8093cb6:	b086      	sub	sp, #24
 8093cb8:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8093cbc:	6903      	ldr	r3, [r0, #16]
 8093cbe:	6982      	ldr	r2, [r0, #24]
 8093cc0:	9104      	str	r1, [sp, #16]
 8093cc2:	6801      	ldr	r1, [r0, #0]
 8093cc4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8093cc8:	9103      	str	r1, [sp, #12]
 8093cca:	6841      	ldr	r1, [r0, #4]
 8093ccc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8093cd0:	9102      	str	r1, [sp, #8]
 8093cd2:	6881      	ldr	r1, [r0, #8]
 8093cd4:	9101      	str	r1, [sp, #4]
 8093cd6:	68c1      	ldr	r1, [r0, #12]
 8093cd8:	4620      	mov	r0, r4
 8093cda:	9100      	str	r1, [sp, #0]
 8093cdc:	4904      	ldr	r1, [pc, #16]	; (8093cf0 <asctime_r+0x40>)
 8093cde:	440b      	add	r3, r1
 8093ce0:	4904      	ldr	r1, [pc, #16]	; (8093cf4 <asctime_r+0x44>)
 8093ce2:	440a      	add	r2, r1
 8093ce4:	4904      	ldr	r1, [pc, #16]	; (8093cf8 <asctime_r+0x48>)
 8093ce6:	f7fd fa47 	bl	8091178 <siprintf>
 8093cea:	4620      	mov	r0, r4
 8093cec:	b006      	add	sp, #24
 8093cee:	bd10      	pop	{r4, pc}
 8093cf0:	08099d7d 	.word	0x08099d7d
 8093cf4:	08099d68 	.word	0x08099d68
 8093cf8:	08099da1 	.word	0x08099da1

08093cfc <atof>:
 8093cfc:	2100      	movs	r1, #0
 8093cfe:	f000 bff7 	b.w	8094cf0 <strtod>

08093d02 <atoi>:
 8093d02:	220a      	movs	r2, #10
 8093d04:	2100      	movs	r1, #0
 8093d06:	f001 b881 	b.w	8094e0c <strtol>

08093d0a <atol>:
 8093d0a:	220a      	movs	r2, #10
 8093d0c:	2100      	movs	r1, #0
 8093d0e:	f001 b87d 	b.w	8094e0c <strtol>
	...

08093d14 <calloc>:
 8093d14:	4b02      	ldr	r3, [pc, #8]	; (8093d20 <calloc+0xc>)
 8093d16:	460a      	mov	r2, r1
 8093d18:	4601      	mov	r1, r0
 8093d1a:	6818      	ldr	r0, [r3, #0]
 8093d1c:	f000 b94f 	b.w	8093fbe <_calloc_r>
 8093d20:	200004ac 	.word	0x200004ac

08093d24 <__cxa_atexit>:
 8093d24:	b510      	push	{r4, lr}
 8093d26:	4c05      	ldr	r4, [pc, #20]	; (8093d3c <__cxa_atexit+0x18>)
 8093d28:	4613      	mov	r3, r2
 8093d2a:	b12c      	cbz	r4, 8093d38 <__cxa_atexit+0x14>
 8093d2c:	460a      	mov	r2, r1
 8093d2e:	4601      	mov	r1, r0
 8093d30:	2002      	movs	r0, #2
 8093d32:	f3af 8000 	nop.w
 8093d36:	bd10      	pop	{r4, pc}
 8093d38:	4620      	mov	r0, r4
 8093d3a:	bd10      	pop	{r4, pc}
 8093d3c:	00000000 	.word	0x00000000

08093d40 <__errno>:
 8093d40:	4b01      	ldr	r3, [pc, #4]	; (8093d48 <__errno+0x8>)
 8093d42:	6818      	ldr	r0, [r3, #0]
 8093d44:	4770      	bx	lr
 8093d46:	bf00      	nop
 8093d48:	200004ac 	.word	0x200004ac

08093d4c <localtime>:
 8093d4c:	b538      	push	{r3, r4, r5, lr}
 8093d4e:	4b07      	ldr	r3, [pc, #28]	; (8093d6c <localtime+0x20>)
 8093d50:	4605      	mov	r5, r0
 8093d52:	681c      	ldr	r4, [r3, #0]
 8093d54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8093d56:	b91b      	cbnz	r3, 8093d60 <localtime+0x14>
 8093d58:	2024      	movs	r0, #36	; 0x24
 8093d5a:	f7fd f9f5 	bl	8091148 <malloc>
 8093d5e:	63e0      	str	r0, [r4, #60]	; 0x3c
 8093d60:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8093d62:	4628      	mov	r0, r5
 8093d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8093d68:	f000 b802 	b.w	8093d70 <localtime_r>
 8093d6c:	200004ac 	.word	0x200004ac

08093d70 <localtime_r>:
 8093d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8093d74:	460c      	mov	r4, r1
 8093d76:	4680      	mov	r8, r0
 8093d78:	f001 fe86 	bl	8095a88 <__gettzinfo>
 8093d7c:	4621      	mov	r1, r4
 8093d7e:	4607      	mov	r7, r0
 8093d80:	4640      	mov	r0, r8
 8093d82:	f001 fe85 	bl	8095a90 <gmtime_r>
 8093d86:	6946      	ldr	r6, [r0, #20]
 8093d88:	4604      	mov	r4, r0
 8093d8a:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8093d8e:	07b3      	lsls	r3, r6, #30
 8093d90:	d105      	bne.n	8093d9e <localtime_r+0x2e>
 8093d92:	2264      	movs	r2, #100	; 0x64
 8093d94:	fb96 f3f2 	sdiv	r3, r6, r2
 8093d98:	fb02 6313 	mls	r3, r2, r3, r6
 8093d9c:	b94b      	cbnz	r3, 8093db2 <localtime_r+0x42>
 8093d9e:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8093da2:	fb96 f3f5 	sdiv	r3, r6, r5
 8093da6:	fb05 6513 	mls	r5, r5, r3, r6
 8093daa:	fab5 f385 	clz	r3, r5
 8093dae:	095b      	lsrs	r3, r3, #5
 8093db0:	e000      	b.n	8093db4 <localtime_r+0x44>
 8093db2:	2301      	movs	r3, #1
 8093db4:	4a5f      	ldr	r2, [pc, #380]	; (8093f34 <localtime_r+0x1c4>)
 8093db6:	2530      	movs	r5, #48	; 0x30
 8093db8:	fb05 2503 	mla	r5, r5, r3, r2
 8093dbc:	f001 f968 	bl	8095090 <__tz_lock>
 8093dc0:	f001 f968 	bl	8095094 <_tzset_unlocked>
 8093dc4:	4b5c      	ldr	r3, [pc, #368]	; (8093f38 <localtime_r+0x1c8>)
 8093dc6:	681b      	ldr	r3, [r3, #0]
 8093dc8:	b1f3      	cbz	r3, 8093e08 <localtime_r+0x98>
 8093dca:	687b      	ldr	r3, [r7, #4]
 8093dcc:	429e      	cmp	r6, r3
 8093dce:	d105      	bne.n	8093ddc <localtime_r+0x6c>
 8093dd0:	6839      	ldr	r1, [r7, #0]
 8093dd2:	f8d8 3000 	ldr.w	r3, [r8]
 8093dd6:	69fa      	ldr	r2, [r7, #28]
 8093dd8:	b941      	cbnz	r1, 8093dec <localtime_r+0x7c>
 8093dda:	e00a      	b.n	8093df2 <localtime_r+0x82>
 8093ddc:	4630      	mov	r0, r6
 8093dde:	f001 f8af 	bl	8094f40 <__tzcalc_limits>
 8093de2:	2800      	cmp	r0, #0
 8093de4:	d1f4      	bne.n	8093dd0 <localtime_r+0x60>
 8093de6:	f04f 33ff 	mov.w	r3, #4294967295
 8093dea:	e00d      	b.n	8093e08 <localtime_r+0x98>
 8093dec:	4293      	cmp	r3, r2
 8093dee:	db08      	blt.n	8093e02 <localtime_r+0x92>
 8093df0:	e001      	b.n	8093df6 <localtime_r+0x86>
 8093df2:	4293      	cmp	r3, r2
 8093df4:	da07      	bge.n	8093e06 <localtime_r+0x96>
 8093df6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8093df8:	4293      	cmp	r3, r2
 8093dfa:	bfac      	ite	ge
 8093dfc:	2300      	movge	r3, #0
 8093dfe:	2301      	movlt	r3, #1
 8093e00:	e002      	b.n	8093e08 <localtime_r+0x98>
 8093e02:	2300      	movs	r3, #0
 8093e04:	e000      	b.n	8093e08 <localtime_r+0x98>
 8093e06:	2301      	movs	r3, #1
 8093e08:	6223      	str	r3, [r4, #32]
 8093e0a:	6a23      	ldr	r3, [r4, #32]
 8093e0c:	203c      	movs	r0, #60	; 0x3c
 8093e0e:	2b01      	cmp	r3, #1
 8093e10:	bf0c      	ite	eq
 8093e12:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 8093e14:	6a39      	ldrne	r1, [r7, #32]
 8093e16:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8093e1a:	fb91 f6f3 	sdiv	r6, r1, r3
 8093e1e:	fb03 1316 	mls	r3, r3, r6, r1
 8093e22:	fb93 f2f0 	sdiv	r2, r3, r0
 8093e26:	fb00 3012 	mls	r0, r0, r2, r3
 8093e2a:	6861      	ldr	r1, [r4, #4]
 8093e2c:	6823      	ldr	r3, [r4, #0]
 8093e2e:	1a89      	subs	r1, r1, r2
 8093e30:	68a2      	ldr	r2, [r4, #8]
 8093e32:	1a1b      	subs	r3, r3, r0
 8093e34:	1b92      	subs	r2, r2, r6
 8093e36:	2b3b      	cmp	r3, #59	; 0x3b
 8093e38:	6023      	str	r3, [r4, #0]
 8093e3a:	6061      	str	r1, [r4, #4]
 8093e3c:	60a2      	str	r2, [r4, #8]
 8093e3e:	dd03      	ble.n	8093e48 <localtime_r+0xd8>
 8093e40:	3101      	adds	r1, #1
 8093e42:	6061      	str	r1, [r4, #4]
 8093e44:	3b3c      	subs	r3, #60	; 0x3c
 8093e46:	e004      	b.n	8093e52 <localtime_r+0xe2>
 8093e48:	2b00      	cmp	r3, #0
 8093e4a:	da03      	bge.n	8093e54 <localtime_r+0xe4>
 8093e4c:	3901      	subs	r1, #1
 8093e4e:	6061      	str	r1, [r4, #4]
 8093e50:	333c      	adds	r3, #60	; 0x3c
 8093e52:	6023      	str	r3, [r4, #0]
 8093e54:	6863      	ldr	r3, [r4, #4]
 8093e56:	2b3b      	cmp	r3, #59	; 0x3b
 8093e58:	dd03      	ble.n	8093e62 <localtime_r+0xf2>
 8093e5a:	3201      	adds	r2, #1
 8093e5c:	60a2      	str	r2, [r4, #8]
 8093e5e:	3b3c      	subs	r3, #60	; 0x3c
 8093e60:	e004      	b.n	8093e6c <localtime_r+0xfc>
 8093e62:	2b00      	cmp	r3, #0
 8093e64:	da03      	bge.n	8093e6e <localtime_r+0xfe>
 8093e66:	3a01      	subs	r2, #1
 8093e68:	60a2      	str	r2, [r4, #8]
 8093e6a:	333c      	adds	r3, #60	; 0x3c
 8093e6c:	6063      	str	r3, [r4, #4]
 8093e6e:	68a3      	ldr	r3, [r4, #8]
 8093e70:	2b17      	cmp	r3, #23
 8093e72:	dd22      	ble.n	8093eba <localtime_r+0x14a>
 8093e74:	69e2      	ldr	r2, [r4, #28]
 8093e76:	3b18      	subs	r3, #24
 8093e78:	3201      	adds	r2, #1
 8093e7a:	61e2      	str	r2, [r4, #28]
 8093e7c:	69a2      	ldr	r2, [r4, #24]
 8093e7e:	60a3      	str	r3, [r4, #8]
 8093e80:	3201      	adds	r2, #1
 8093e82:	2a06      	cmp	r2, #6
 8093e84:	bfc8      	it	gt
 8093e86:	2200      	movgt	r2, #0
 8093e88:	61a2      	str	r2, [r4, #24]
 8093e8a:	68e2      	ldr	r2, [r4, #12]
 8093e8c:	6923      	ldr	r3, [r4, #16]
 8093e8e:	3201      	adds	r2, #1
 8093e90:	60e2      	str	r2, [r4, #12]
 8093e92:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8093e96:	428a      	cmp	r2, r1
 8093e98:	dd46      	ble.n	8093f28 <localtime_r+0x1b8>
 8093e9a:	3301      	adds	r3, #1
 8093e9c:	2b0c      	cmp	r3, #12
 8093e9e:	bf08      	it	eq
 8093ea0:	6963      	ldreq	r3, [r4, #20]
 8093ea2:	eba2 0201 	sub.w	r2, r2, r1
 8093ea6:	60e2      	str	r2, [r4, #12]
 8093ea8:	bf05      	ittet	eq
 8093eaa:	3301      	addeq	r3, #1
 8093eac:	2200      	moveq	r2, #0
 8093eae:	6123      	strne	r3, [r4, #16]
 8093eb0:	6122      	streq	r2, [r4, #16]
 8093eb2:	bf04      	itt	eq
 8093eb4:	6163      	streq	r3, [r4, #20]
 8093eb6:	61e2      	streq	r2, [r4, #28]
 8093eb8:	e036      	b.n	8093f28 <localtime_r+0x1b8>
 8093eba:	2b00      	cmp	r3, #0
 8093ebc:	da34      	bge.n	8093f28 <localtime_r+0x1b8>
 8093ebe:	69e2      	ldr	r2, [r4, #28]
 8093ec0:	3318      	adds	r3, #24
 8093ec2:	3a01      	subs	r2, #1
 8093ec4:	61e2      	str	r2, [r4, #28]
 8093ec6:	69a2      	ldr	r2, [r4, #24]
 8093ec8:	60a3      	str	r3, [r4, #8]
 8093eca:	3a01      	subs	r2, #1
 8093ecc:	bf48      	it	mi
 8093ece:	2206      	movmi	r2, #6
 8093ed0:	61a2      	str	r2, [r4, #24]
 8093ed2:	68e2      	ldr	r2, [r4, #12]
 8093ed4:	3a01      	subs	r2, #1
 8093ed6:	60e2      	str	r2, [r4, #12]
 8093ed8:	bb32      	cbnz	r2, 8093f28 <localtime_r+0x1b8>
 8093eda:	6923      	ldr	r3, [r4, #16]
 8093edc:	3b01      	subs	r3, #1
 8093ede:	d401      	bmi.n	8093ee4 <localtime_r+0x174>
 8093ee0:	6123      	str	r3, [r4, #16]
 8093ee2:	e01d      	b.n	8093f20 <localtime_r+0x1b0>
 8093ee4:	230b      	movs	r3, #11
 8093ee6:	6123      	str	r3, [r4, #16]
 8093ee8:	6963      	ldr	r3, [r4, #20]
 8093eea:	1e5a      	subs	r2, r3, #1
 8093eec:	f012 0f03 	tst.w	r2, #3
 8093ef0:	6162      	str	r2, [r4, #20]
 8093ef2:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8093ef6:	d105      	bne.n	8093f04 <localtime_r+0x194>
 8093ef8:	2164      	movs	r1, #100	; 0x64
 8093efa:	fb93 f2f1 	sdiv	r2, r3, r1
 8093efe:	fb01 3212 	mls	r2, r1, r2, r3
 8093f02:	b94a      	cbnz	r2, 8093f18 <localtime_r+0x1a8>
 8093f04:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8093f08:	fb93 f2f1 	sdiv	r2, r3, r1
 8093f0c:	fb01 3312 	mls	r3, r1, r2, r3
 8093f10:	fab3 f383 	clz	r3, r3
 8093f14:	095b      	lsrs	r3, r3, #5
 8093f16:	e000      	b.n	8093f1a <localtime_r+0x1aa>
 8093f18:	2301      	movs	r3, #1
 8093f1a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8093f1e:	61e3      	str	r3, [r4, #28]
 8093f20:	6923      	ldr	r3, [r4, #16]
 8093f22:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8093f26:	60e3      	str	r3, [r4, #12]
 8093f28:	f001 f8b3 	bl	8095092 <__tz_unlock>
 8093f2c:	4620      	mov	r0, r4
 8093f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8093f32:	bf00      	nop
 8093f34:	08099f2c 	.word	0x08099f2c
 8093f38:	20004034 	.word	0x20004034

08093f3c <_localeconv_r>:
 8093f3c:	4800      	ldr	r0, [pc, #0]	; (8093f40 <_localeconv_r+0x4>)
 8093f3e:	4770      	bx	lr
 8093f40:	200004b0 	.word	0x200004b0

08093f44 <memcmp>:
 8093f44:	b510      	push	{r4, lr}
 8093f46:	3901      	subs	r1, #1
 8093f48:	4402      	add	r2, r0
 8093f4a:	4290      	cmp	r0, r2
 8093f4c:	d007      	beq.n	8093f5e <memcmp+0x1a>
 8093f4e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8093f52:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8093f56:	42a3      	cmp	r3, r4
 8093f58:	d0f7      	beq.n	8093f4a <memcmp+0x6>
 8093f5a:	1b18      	subs	r0, r3, r4
 8093f5c:	bd10      	pop	{r4, pc}
 8093f5e:	2000      	movs	r0, #0
 8093f60:	bd10      	pop	{r4, pc}

08093f62 <memcpy>:
 8093f62:	b510      	push	{r4, lr}
 8093f64:	1e43      	subs	r3, r0, #1
 8093f66:	440a      	add	r2, r1
 8093f68:	4291      	cmp	r1, r2
 8093f6a:	d004      	beq.n	8093f76 <memcpy+0x14>
 8093f6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8093f70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8093f74:	e7f8      	b.n	8093f68 <memcpy+0x6>
 8093f76:	bd10      	pop	{r4, pc}

08093f78 <memmove>:
 8093f78:	4288      	cmp	r0, r1
 8093f7a:	b510      	push	{r4, lr}
 8093f7c:	eb01 0302 	add.w	r3, r1, r2
 8093f80:	d801      	bhi.n	8093f86 <memmove+0xe>
 8093f82:	1e42      	subs	r2, r0, #1
 8093f84:	e00b      	b.n	8093f9e <memmove+0x26>
 8093f86:	4298      	cmp	r0, r3
 8093f88:	d2fb      	bcs.n	8093f82 <memmove+0xa>
 8093f8a:	1881      	adds	r1, r0, r2
 8093f8c:	1ad2      	subs	r2, r2, r3
 8093f8e:	42d3      	cmn	r3, r2
 8093f90:	d004      	beq.n	8093f9c <memmove+0x24>
 8093f92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8093f96:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8093f9a:	e7f8      	b.n	8093f8e <memmove+0x16>
 8093f9c:	bd10      	pop	{r4, pc}
 8093f9e:	4299      	cmp	r1, r3
 8093fa0:	d004      	beq.n	8093fac <memmove+0x34>
 8093fa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8093fa6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8093faa:	e7f8      	b.n	8093f9e <memmove+0x26>
 8093fac:	bd10      	pop	{r4, pc}

08093fae <memset>:
 8093fae:	4603      	mov	r3, r0
 8093fb0:	4402      	add	r2, r0
 8093fb2:	4293      	cmp	r3, r2
 8093fb4:	d002      	beq.n	8093fbc <memset+0xe>
 8093fb6:	f803 1b01 	strb.w	r1, [r3], #1
 8093fba:	e7fa      	b.n	8093fb2 <memset+0x4>
 8093fbc:	4770      	bx	lr

08093fbe <_calloc_r>:
 8093fbe:	b538      	push	{r3, r4, r5, lr}
 8093fc0:	fb02 f401 	mul.w	r4, r2, r1
 8093fc4:	4621      	mov	r1, r4
 8093fc6:	f7fd f8ff 	bl	80911c8 <_malloc_r>
 8093fca:	4605      	mov	r5, r0
 8093fcc:	b118      	cbz	r0, 8093fd6 <_calloc_r+0x18>
 8093fce:	4622      	mov	r2, r4
 8093fd0:	2100      	movs	r1, #0
 8093fd2:	f7ff ffec 	bl	8093fae <memset>
 8093fd6:	4628      	mov	r0, r5
 8093fd8:	bd38      	pop	{r3, r4, r5, pc}

08093fda <strchr>:
 8093fda:	b2c9      	uxtb	r1, r1
 8093fdc:	4603      	mov	r3, r0
 8093fde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8093fe2:	b11a      	cbz	r2, 8093fec <strchr+0x12>
 8093fe4:	4291      	cmp	r1, r2
 8093fe6:	d1f9      	bne.n	8093fdc <strchr+0x2>
 8093fe8:	4618      	mov	r0, r3
 8093fea:	4770      	bx	lr
 8093fec:	2900      	cmp	r1, #0
 8093fee:	bf0c      	ite	eq
 8093ff0:	4618      	moveq	r0, r3
 8093ff2:	2000      	movne	r0, #0
 8093ff4:	4770      	bx	lr

08093ff6 <strcmp>:
 8093ff6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8093ffa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8093ffe:	2a01      	cmp	r2, #1
 8094000:	bf28      	it	cs
 8094002:	429a      	cmpcs	r2, r3
 8094004:	d0f7      	beq.n	8093ff6 <strcmp>
 8094006:	1ad0      	subs	r0, r2, r3
 8094008:	4770      	bx	lr

0809400a <strcpy>:
 809400a:	4603      	mov	r3, r0
 809400c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8094010:	f803 2b01 	strb.w	r2, [r3], #1
 8094014:	2a00      	cmp	r2, #0
 8094016:	d1f9      	bne.n	809400c <strcpy+0x2>
 8094018:	4770      	bx	lr

0809401a <strlen>:
 809401a:	4603      	mov	r3, r0
 809401c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8094020:	2a00      	cmp	r2, #0
 8094022:	d1fb      	bne.n	809401c <strlen+0x2>
 8094024:	1a18      	subs	r0, r3, r0
 8094026:	3801      	subs	r0, #1
 8094028:	4770      	bx	lr

0809402a <strncmp>:
 809402a:	b530      	push	{r4, r5, lr}
 809402c:	b182      	cbz	r2, 8094050 <strncmp+0x26>
 809402e:	1e45      	subs	r5, r0, #1
 8094030:	3901      	subs	r1, #1
 8094032:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8094036:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 809403a:	42a3      	cmp	r3, r4
 809403c:	d106      	bne.n	809404c <strncmp+0x22>
 809403e:	43ec      	mvns	r4, r5
 8094040:	4414      	add	r4, r2
 8094042:	42e0      	cmn	r0, r4
 8094044:	d001      	beq.n	809404a <strncmp+0x20>
 8094046:	2b00      	cmp	r3, #0
 8094048:	d1f3      	bne.n	8094032 <strncmp+0x8>
 809404a:	461c      	mov	r4, r3
 809404c:	1b18      	subs	r0, r3, r4
 809404e:	bd30      	pop	{r4, r5, pc}
 8094050:	4610      	mov	r0, r2
 8094052:	bd30      	pop	{r4, r5, pc}

08094054 <strncpy>:
 8094054:	4603      	mov	r3, r0
 8094056:	b510      	push	{r4, lr}
 8094058:	b142      	cbz	r2, 809406c <strncpy+0x18>
 809405a:	f811 4b01 	ldrb.w	r4, [r1], #1
 809405e:	3a01      	subs	r2, #1
 8094060:	f803 4b01 	strb.w	r4, [r3], #1
 8094064:	2c00      	cmp	r4, #0
 8094066:	d1f7      	bne.n	8094058 <strncpy+0x4>
 8094068:	441a      	add	r2, r3
 809406a:	e000      	b.n	809406e <strncpy+0x1a>
 809406c:	bd10      	pop	{r4, pc}
 809406e:	4293      	cmp	r3, r2
 8094070:	d002      	beq.n	8094078 <strncpy+0x24>
 8094072:	f803 4b01 	strb.w	r4, [r3], #1
 8094076:	e7fa      	b.n	809406e <strncpy+0x1a>
 8094078:	bd10      	pop	{r4, pc}

0809407a <strstr>:
 809407a:	b5f0      	push	{r4, r5, r6, r7, lr}
 809407c:	7803      	ldrb	r3, [r0, #0]
 809407e:	b963      	cbnz	r3, 809409a <strstr+0x20>
 8094080:	780b      	ldrb	r3, [r1, #0]
 8094082:	2b00      	cmp	r3, #0
 8094084:	bf18      	it	ne
 8094086:	2000      	movne	r0, #0
 8094088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 809408a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 809408e:	b162      	cbz	r2, 80940aa <strstr+0x30>
 8094090:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 8094094:	4630      	mov	r0, r6
 8094096:	4297      	cmp	r7, r2
 8094098:	d0f7      	beq.n	809408a <strstr+0x10>
 809409a:	4603      	mov	r3, r0
 809409c:	1c46      	adds	r6, r0, #1
 809409e:	7800      	ldrb	r0, [r0, #0]
 80940a0:	b110      	cbz	r0, 80940a8 <strstr+0x2e>
 80940a2:	1e4d      	subs	r5, r1, #1
 80940a4:	1e5c      	subs	r4, r3, #1
 80940a6:	e7f0      	b.n	809408a <strstr+0x10>
 80940a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80940aa:	4618      	mov	r0, r3
 80940ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080940ae <sulp>:
 80940ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80940b2:	460f      	mov	r7, r1
 80940b4:	4690      	mov	r8, r2
 80940b6:	f002 f847 	bl	8096148 <__ulp>
 80940ba:	4604      	mov	r4, r0
 80940bc:	460d      	mov	r5, r1
 80940be:	f1b8 0f00 	cmp.w	r8, #0
 80940c2:	d011      	beq.n	80940e8 <sulp+0x3a>
 80940c4:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80940c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80940cc:	2b00      	cmp	r3, #0
 80940ce:	dd0b      	ble.n	80940e8 <sulp+0x3a>
 80940d0:	051b      	lsls	r3, r3, #20
 80940d2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80940d6:	2400      	movs	r4, #0
 80940d8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80940dc:	4622      	mov	r2, r4
 80940de:	462b      	mov	r3, r5
 80940e0:	f7fe fe54 	bl	8092d8c <__aeabi_dmul>
 80940e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80940e8:	4620      	mov	r0, r4
 80940ea:	4629      	mov	r1, r5
 80940ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080940f0 <_strtod_r>:
 80940f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80940f4:	4682      	mov	sl, r0
 80940f6:	460c      	mov	r4, r1
 80940f8:	b09d      	sub	sp, #116	; 0x74
 80940fa:	2300      	movs	r3, #0
 80940fc:	9213      	str	r2, [sp, #76]	; 0x4c
 80940fe:	9318      	str	r3, [sp, #96]	; 0x60
 8094100:	f04f 0800 	mov.w	r8, #0
 8094104:	f04f 0900 	mov.w	r9, #0
 8094108:	9117      	str	r1, [sp, #92]	; 0x5c
 809410a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 809410c:	781a      	ldrb	r2, [r3, #0]
 809410e:	2a0d      	cmp	r2, #13
 8094110:	d805      	bhi.n	809411e <_strtod_r+0x2e>
 8094112:	2a09      	cmp	r2, #9
 8094114:	d213      	bcs.n	809413e <_strtod_r+0x4e>
 8094116:	2a00      	cmp	r2, #0
 8094118:	f000 81ad 	beq.w	8094476 <_strtod_r+0x386>
 809411c:	e012      	b.n	8094144 <_strtod_r+0x54>
 809411e:	2a2b      	cmp	r2, #43	; 0x2b
 8094120:	d004      	beq.n	809412c <_strtod_r+0x3c>
 8094122:	2a2d      	cmp	r2, #45	; 0x2d
 8094124:	d004      	beq.n	8094130 <_strtod_r+0x40>
 8094126:	2a20      	cmp	r2, #32
 8094128:	d10c      	bne.n	8094144 <_strtod_r+0x54>
 809412a:	e008      	b.n	809413e <_strtod_r+0x4e>
 809412c:	2200      	movs	r2, #0
 809412e:	e000      	b.n	8094132 <_strtod_r+0x42>
 8094130:	2201      	movs	r2, #1
 8094132:	920c      	str	r2, [sp, #48]	; 0x30
 8094134:	1c5a      	adds	r2, r3, #1
 8094136:	9217      	str	r2, [sp, #92]	; 0x5c
 8094138:	785b      	ldrb	r3, [r3, #1]
 809413a:	b92b      	cbnz	r3, 8094148 <_strtod_r+0x58>
 809413c:	e19b      	b.n	8094476 <_strtod_r+0x386>
 809413e:	3301      	adds	r3, #1
 8094140:	9317      	str	r3, [sp, #92]	; 0x5c
 8094142:	e7e2      	b.n	809410a <_strtod_r+0x1a>
 8094144:	2300      	movs	r3, #0
 8094146:	930c      	str	r3, [sp, #48]	; 0x30
 8094148:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 809414a:	782b      	ldrb	r3, [r5, #0]
 809414c:	2b30      	cmp	r3, #48	; 0x30
 809414e:	d15c      	bne.n	809420a <_strtod_r+0x11a>
 8094150:	786b      	ldrb	r3, [r5, #1]
 8094152:	2b58      	cmp	r3, #88	; 0x58
 8094154:	d001      	beq.n	809415a <_strtod_r+0x6a>
 8094156:	2b78      	cmp	r3, #120	; 0x78
 8094158:	d14c      	bne.n	80941f4 <_strtod_r+0x104>
 809415a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 809415c:	4aa8      	ldr	r2, [pc, #672]	; (8094400 <_strtod_r+0x310>)
 809415e:	9301      	str	r3, [sp, #4]
 8094160:	ab18      	add	r3, sp, #96	; 0x60
 8094162:	9300      	str	r3, [sp, #0]
 8094164:	a917      	add	r1, sp, #92	; 0x5c
 8094166:	ab19      	add	r3, sp, #100	; 0x64
 8094168:	4650      	mov	r0, sl
 809416a:	f001 f964 	bl	8095436 <__gethex>
 809416e:	f010 0607 	ands.w	r6, r0, #7
 8094172:	4604      	mov	r4, r0
 8094174:	f000 8585 	beq.w	8094c82 <_strtod_r+0xb92>
 8094178:	2e06      	cmp	r6, #6
 809417a:	d105      	bne.n	8094188 <_strtod_r+0x98>
 809417c:	3501      	adds	r5, #1
 809417e:	2300      	movs	r3, #0
 8094180:	9517      	str	r5, [sp, #92]	; 0x5c
 8094182:	930c      	str	r3, [sp, #48]	; 0x30
 8094184:	f000 bd7d 	b.w	8094c82 <_strtod_r+0xb92>
 8094188:	9a18      	ldr	r2, [sp, #96]	; 0x60
 809418a:	b13a      	cbz	r2, 809419c <_strtod_r+0xac>
 809418c:	2135      	movs	r1, #53	; 0x35
 809418e:	a81a      	add	r0, sp, #104	; 0x68
 8094190:	f002 f8c1 	bl	8096316 <__copybits>
 8094194:	9918      	ldr	r1, [sp, #96]	; 0x60
 8094196:	4650      	mov	r0, sl
 8094198:	f001 fd45 	bl	8095c26 <_Bfree>
 809419c:	2e06      	cmp	r6, #6
 809419e:	d822      	bhi.n	80941e6 <_strtod_r+0xf6>
 80941a0:	e8df f006 	tbb	[pc, r6]
 80941a4:	18080d04 	.word	0x18080d04
 80941a8:	0d1d      	.short	0x0d1d
 80941aa:	04          	.byte	0x04
 80941ab:	00          	.byte	0x00
 80941ac:	f04f 0900 	mov.w	r9, #0
 80941b0:	46c8      	mov	r8, r9
 80941b2:	e018      	b.n	80941e6 <_strtod_r+0xf6>
 80941b4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80941b8:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 80941bc:	e013      	b.n	80941e6 <_strtod_r+0xf6>
 80941be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80941c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80941c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80941c6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80941ca:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80941ce:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80941d2:	e008      	b.n	80941e6 <_strtod_r+0xf6>
 80941d4:	f8df 922c 	ldr.w	r9, [pc, #556]	; 8094404 <_strtod_r+0x314>
 80941d8:	f04f 0800 	mov.w	r8, #0
 80941dc:	e003      	b.n	80941e6 <_strtod_r+0xf6>
 80941de:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80941e2:	f04f 38ff 	mov.w	r8, #4294967295
 80941e6:	0721      	lsls	r1, r4, #28
 80941e8:	f140 854b 	bpl.w	8094c82 <_strtod_r+0xb92>
 80941ec:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80941f0:	f000 bd47 	b.w	8094c82 <_strtod_r+0xb92>
 80941f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80941f6:	1c5a      	adds	r2, r3, #1
 80941f8:	9217      	str	r2, [sp, #92]	; 0x5c
 80941fa:	785b      	ldrb	r3, [r3, #1]
 80941fc:	2b30      	cmp	r3, #48	; 0x30
 80941fe:	d0f9      	beq.n	80941f4 <_strtod_r+0x104>
 8094200:	2b00      	cmp	r3, #0
 8094202:	f000 853e 	beq.w	8094c82 <_strtod_r+0xb92>
 8094206:	2301      	movs	r3, #1
 8094208:	e000      	b.n	809420c <_strtod_r+0x11c>
 809420a:	2300      	movs	r3, #0
 809420c:	9305      	str	r3, [sp, #20]
 809420e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8094210:	220a      	movs	r2, #10
 8094212:	9306      	str	r3, [sp, #24]
 8094214:	2300      	movs	r3, #0
 8094216:	469b      	mov	fp, r3
 8094218:	9302      	str	r3, [sp, #8]
 809421a:	9304      	str	r3, [sp, #16]
 809421c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 809421e:	782e      	ldrb	r6, [r5, #0]
 8094220:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8094224:	b2d9      	uxtb	r1, r3
 8094226:	2909      	cmp	r1, #9
 8094228:	d811      	bhi.n	809424e <_strtod_r+0x15e>
 809422a:	f1bb 0f08 	cmp.w	fp, #8
 809422e:	bfd5      	itete	le
 8094230:	9904      	ldrle	r1, [sp, #16]
 8094232:	9902      	ldrgt	r1, [sp, #8]
 8094234:	fb02 3301 	mlale	r3, r2, r1, r3
 8094238:	fb02 3301 	mlagt	r3, r2, r1, r3
 809423c:	f105 0501 	add.w	r5, r5, #1
 8094240:	bfd4      	ite	le
 8094242:	9304      	strle	r3, [sp, #16]
 8094244:	9302      	strgt	r3, [sp, #8]
 8094246:	f10b 0b01 	add.w	fp, fp, #1
 809424a:	9517      	str	r5, [sp, #92]	; 0x5c
 809424c:	e7e6      	b.n	809421c <_strtod_r+0x12c>
 809424e:	4650      	mov	r0, sl
 8094250:	f7ff fe74 	bl	8093f3c <_localeconv_r>
 8094254:	6807      	ldr	r7, [r0, #0]
 8094256:	4650      	mov	r0, sl
 8094258:	f7ff fe70 	bl	8093f3c <_localeconv_r>
 809425c:	6800      	ldr	r0, [r0, #0]
 809425e:	f7ff fedc 	bl	809401a <strlen>
 8094262:	4639      	mov	r1, r7
 8094264:	4602      	mov	r2, r0
 8094266:	4628      	mov	r0, r5
 8094268:	f7ff fedf 	bl	809402a <strncmp>
 809426c:	4607      	mov	r7, r0
 809426e:	b128      	cbz	r0, 809427c <_strtod_r+0x18c>
 8094270:	2000      	movs	r0, #0
 8094272:	4633      	mov	r3, r6
 8094274:	465d      	mov	r5, fp
 8094276:	4602      	mov	r2, r0
 8094278:	4601      	mov	r1, r0
 809427a:	e05a      	b.n	8094332 <_strtod_r+0x242>
 809427c:	4650      	mov	r0, sl
 809427e:	f7ff fe5d 	bl	8093f3c <_localeconv_r>
 8094282:	6800      	ldr	r0, [r0, #0]
 8094284:	f7ff fec9 	bl	809401a <strlen>
 8094288:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 809428a:	181a      	adds	r2, r3, r0
 809428c:	9217      	str	r2, [sp, #92]	; 0x5c
 809428e:	5c1b      	ldrb	r3, [r3, r0]
 8094290:	f1bb 0f00 	cmp.w	fp, #0
 8094294:	d145      	bne.n	8094322 <_strtod_r+0x232>
 8094296:	4658      	mov	r0, fp
 8094298:	2b30      	cmp	r3, #48	; 0x30
 809429a:	d105      	bne.n	80942a8 <_strtod_r+0x1b8>
 809429c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 809429e:	3001      	adds	r0, #1
 80942a0:	1c5a      	adds	r2, r3, #1
 80942a2:	9217      	str	r2, [sp, #92]	; 0x5c
 80942a4:	785b      	ldrb	r3, [r3, #1]
 80942a6:	e7f7      	b.n	8094298 <_strtod_r+0x1a8>
 80942a8:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80942ac:	2a08      	cmp	r2, #8
 80942ae:	d846      	bhi.n	809433e <_strtod_r+0x24e>
 80942b0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80942b2:	9206      	str	r2, [sp, #24]
 80942b4:	4602      	mov	r2, r0
 80942b6:	2000      	movs	r0, #0
 80942b8:	4605      	mov	r5, r0
 80942ba:	3b30      	subs	r3, #48	; 0x30
 80942bc:	f100 0101 	add.w	r1, r0, #1
 80942c0:	d029      	beq.n	8094316 <_strtod_r+0x226>
 80942c2:	440a      	add	r2, r1
 80942c4:	4629      	mov	r1, r5
 80942c6:	eb05 0c00 	add.w	ip, r5, r0
 80942ca:	260a      	movs	r6, #10
 80942cc:	4561      	cmp	r1, ip
 80942ce:	d00f      	beq.n	80942f0 <_strtod_r+0x200>
 80942d0:	3101      	adds	r1, #1
 80942d2:	f101 3eff 	add.w	lr, r1, #4294967295
 80942d6:	f1be 0f08 	cmp.w	lr, #8
 80942da:	dc03      	bgt.n	80942e4 <_strtod_r+0x1f4>
 80942dc:	9f04      	ldr	r7, [sp, #16]
 80942de:	4377      	muls	r7, r6
 80942e0:	9704      	str	r7, [sp, #16]
 80942e2:	e7f3      	b.n	80942cc <_strtod_r+0x1dc>
 80942e4:	2910      	cmp	r1, #16
 80942e6:	bfde      	ittt	le
 80942e8:	9f02      	ldrle	r7, [sp, #8]
 80942ea:	4377      	mulle	r7, r6
 80942ec:	9702      	strle	r7, [sp, #8]
 80942ee:	e7ed      	b.n	80942cc <_strtod_r+0x1dc>
 80942f0:	4428      	add	r0, r5
 80942f2:	2808      	cmp	r0, #8
 80942f4:	f100 0501 	add.w	r5, r0, #1
 80942f8:	dc05      	bgt.n	8094306 <_strtod_r+0x216>
 80942fa:	9804      	ldr	r0, [sp, #16]
 80942fc:	210a      	movs	r1, #10
 80942fe:	fb01 3300 	mla	r3, r1, r0, r3
 8094302:	9304      	str	r3, [sp, #16]
 8094304:	e006      	b.n	8094314 <_strtod_r+0x224>
 8094306:	2d10      	cmp	r5, #16
 8094308:	bfdf      	itttt	le
 809430a:	9802      	ldrle	r0, [sp, #8]
 809430c:	210a      	movle	r1, #10
 809430e:	fb01 3300 	mlale	r3, r1, r0, r3
 8094312:	9302      	strle	r3, [sp, #8]
 8094314:	2100      	movs	r1, #0
 8094316:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8094318:	1c58      	adds	r0, r3, #1
 809431a:	9017      	str	r0, [sp, #92]	; 0x5c
 809431c:	785b      	ldrb	r3, [r3, #1]
 809431e:	4608      	mov	r0, r1
 8094320:	e002      	b.n	8094328 <_strtod_r+0x238>
 8094322:	465d      	mov	r5, fp
 8094324:	4638      	mov	r0, r7
 8094326:	463a      	mov	r2, r7
 8094328:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 809432c:	2909      	cmp	r1, #9
 809432e:	d9c4      	bls.n	80942ba <_strtod_r+0x1ca>
 8094330:	2101      	movs	r1, #1
 8094332:	2b65      	cmp	r3, #101	; 0x65
 8094334:	d001      	beq.n	809433a <_strtod_r+0x24a>
 8094336:	2b45      	cmp	r3, #69	; 0x45
 8094338:	d14f      	bne.n	80943da <_strtod_r+0x2ea>
 809433a:	b96d      	cbnz	r5, 8094358 <_strtod_r+0x268>
 809433c:	e004      	b.n	8094348 <_strtod_r+0x258>
 809433e:	2b65      	cmp	r3, #101	; 0x65
 8094340:	f040 84ad 	bne.w	8094c9e <_strtod_r+0xbae>
 8094344:	2200      	movs	r2, #0
 8094346:	2101      	movs	r1, #1
 8094348:	b928      	cbnz	r0, 8094356 <_strtod_r+0x266>
 809434a:	9b05      	ldr	r3, [sp, #20]
 809434c:	2b00      	cmp	r3, #0
 809434e:	f000 8092 	beq.w	8094476 <_strtod_r+0x386>
 8094352:	4605      	mov	r5, r0
 8094354:	e000      	b.n	8094358 <_strtod_r+0x268>
 8094356:	2500      	movs	r5, #0
 8094358:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 809435a:	1c63      	adds	r3, r4, #1
 809435c:	9317      	str	r3, [sp, #92]	; 0x5c
 809435e:	7863      	ldrb	r3, [r4, #1]
 8094360:	2b2b      	cmp	r3, #43	; 0x2b
 8094362:	d006      	beq.n	8094372 <_strtod_r+0x282>
 8094364:	2b2d      	cmp	r3, #45	; 0x2d
 8094366:	d002      	beq.n	809436e <_strtod_r+0x27e>
 8094368:	2600      	movs	r6, #0
 809436a:	9603      	str	r6, [sp, #12]
 809436c:	e006      	b.n	809437c <_strtod_r+0x28c>
 809436e:	2301      	movs	r3, #1
 8094370:	e000      	b.n	8094374 <_strtod_r+0x284>
 8094372:	2300      	movs	r3, #0
 8094374:	9303      	str	r3, [sp, #12]
 8094376:	1ca3      	adds	r3, r4, #2
 8094378:	9317      	str	r3, [sp, #92]	; 0x5c
 809437a:	78a3      	ldrb	r3, [r4, #2]
 809437c:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8094380:	2e09      	cmp	r6, #9
 8094382:	d829      	bhi.n	80943d8 <_strtod_r+0x2e8>
 8094384:	2b30      	cmp	r3, #48	; 0x30
 8094386:	d104      	bne.n	8094392 <_strtod_r+0x2a2>
 8094388:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 809438a:	1c5e      	adds	r6, r3, #1
 809438c:	9617      	str	r6, [sp, #92]	; 0x5c
 809438e:	785b      	ldrb	r3, [r3, #1]
 8094390:	e7f8      	b.n	8094384 <_strtod_r+0x294>
 8094392:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 8094396:	2e08      	cmp	r6, #8
 8094398:	d81f      	bhi.n	80943da <_strtod_r+0x2ea>
 809439a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 809439e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80943a0:	461f      	mov	r7, r3
 80943a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80943a4:	1c5e      	adds	r6, r3, #1
 80943a6:	9617      	str	r6, [sp, #92]	; 0x5c
 80943a8:	785b      	ldrb	r3, [r3, #1]
 80943aa:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80943ae:	f1bc 0f09 	cmp.w	ip, #9
 80943b2:	d805      	bhi.n	80943c0 <_strtod_r+0x2d0>
 80943b4:	260a      	movs	r6, #10
 80943b6:	fb06 3e0e 	mla	lr, r6, lr, r3
 80943ba:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80943be:	e7f0      	b.n	80943a2 <_strtod_r+0x2b2>
 80943c0:	1bf6      	subs	r6, r6, r7
 80943c2:	2e08      	cmp	r6, #8
 80943c4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80943c8:	dc02      	bgt.n	80943d0 <_strtod_r+0x2e0>
 80943ca:	4576      	cmp	r6, lr
 80943cc:	bfa8      	it	ge
 80943ce:	4676      	movge	r6, lr
 80943d0:	9f03      	ldr	r7, [sp, #12]
 80943d2:	b11f      	cbz	r7, 80943dc <_strtod_r+0x2ec>
 80943d4:	4276      	negs	r6, r6
 80943d6:	e001      	b.n	80943dc <_strtod_r+0x2ec>
 80943d8:	9417      	str	r4, [sp, #92]	; 0x5c
 80943da:	2600      	movs	r6, #0
 80943dc:	2d00      	cmp	r5, #0
 80943de:	d152      	bne.n	8094486 <_strtod_r+0x396>
 80943e0:	2800      	cmp	r0, #0
 80943e2:	f040 844e 	bne.w	8094c82 <_strtod_r+0xb92>
 80943e6:	9a05      	ldr	r2, [sp, #20]
 80943e8:	2a00      	cmp	r2, #0
 80943ea:	f040 844a 	bne.w	8094c82 <_strtod_r+0xb92>
 80943ee:	2900      	cmp	r1, #0
 80943f0:	d141      	bne.n	8094476 <_strtod_r+0x386>
 80943f2:	2b4e      	cmp	r3, #78	; 0x4e
 80943f4:	d020      	beq.n	8094438 <_strtod_r+0x348>
 80943f6:	dc07      	bgt.n	8094408 <_strtod_r+0x318>
 80943f8:	2b49      	cmp	r3, #73	; 0x49
 80943fa:	d00a      	beq.n	8094412 <_strtod_r+0x322>
 80943fc:	e03b      	b.n	8094476 <_strtod_r+0x386>
 80943fe:	bf00      	nop
 8094400:	08099f8c 	.word	0x08099f8c
 8094404:	7ff00000 	.word	0x7ff00000
 8094408:	2b69      	cmp	r3, #105	; 0x69
 809440a:	d002      	beq.n	8094412 <_strtod_r+0x322>
 809440c:	2b6e      	cmp	r3, #110	; 0x6e
 809440e:	d013      	beq.n	8094438 <_strtod_r+0x348>
 8094410:	e031      	b.n	8094476 <_strtod_r+0x386>
 8094412:	49aa      	ldr	r1, [pc, #680]	; (80946bc <_strtod_r+0x5cc>)
 8094414:	a817      	add	r0, sp, #92	; 0x5c
 8094416:	f001 fa3f 	bl	8095898 <__match>
 809441a:	b360      	cbz	r0, 8094476 <_strtod_r+0x386>
 809441c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 809441e:	49a8      	ldr	r1, [pc, #672]	; (80946c0 <_strtod_r+0x5d0>)
 8094420:	3b01      	subs	r3, #1
 8094422:	a817      	add	r0, sp, #92	; 0x5c
 8094424:	9317      	str	r3, [sp, #92]	; 0x5c
 8094426:	f001 fa37 	bl	8095898 <__match>
 809442a:	b910      	cbnz	r0, 8094432 <_strtod_r+0x342>
 809442c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 809442e:	3301      	adds	r3, #1
 8094430:	9317      	str	r3, [sp, #92]	; 0x5c
 8094432:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 80946dc <_strtod_r+0x5ec>
 8094436:	e01a      	b.n	809446e <_strtod_r+0x37e>
 8094438:	49a2      	ldr	r1, [pc, #648]	; (80946c4 <_strtod_r+0x5d4>)
 809443a:	a817      	add	r0, sp, #92	; 0x5c
 809443c:	f001 fa2c 	bl	8095898 <__match>
 8094440:	b1c8      	cbz	r0, 8094476 <_strtod_r+0x386>
 8094442:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8094444:	781b      	ldrb	r3, [r3, #0]
 8094446:	2b28      	cmp	r3, #40	; 0x28
 8094448:	d10f      	bne.n	809446a <_strtod_r+0x37a>
 809444a:	aa1a      	add	r2, sp, #104	; 0x68
 809444c:	499e      	ldr	r1, [pc, #632]	; (80946c8 <_strtod_r+0x5d8>)
 809444e:	a817      	add	r0, sp, #92	; 0x5c
 8094450:	f001 fa35 	bl	80958be <__hexnan>
 8094454:	2805      	cmp	r0, #5
 8094456:	d108      	bne.n	809446a <_strtod_r+0x37a>
 8094458:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 809445a:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 809445e:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8094462:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8094466:	f000 bc0c 	b.w	8094c82 <_strtod_r+0xb92>
 809446a:	f8df 9274 	ldr.w	r9, [pc, #628]	; 80946e0 <_strtod_r+0x5f0>
 809446e:	f04f 0800 	mov.w	r8, #0
 8094472:	f000 bc06 	b.w	8094c82 <_strtod_r+0xb92>
 8094476:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8094478:	9417      	str	r4, [sp, #92]	; 0x5c
 809447a:	2b00      	cmp	r3, #0
 809447c:	f000 840c 	beq.w	8094c98 <_strtod_r+0xba8>
 8094480:	2300      	movs	r3, #0
 8094482:	930c      	str	r3, [sp, #48]	; 0x30
 8094484:	e3ff      	b.n	8094c86 <_strtod_r+0xb96>
 8094486:	462c      	mov	r4, r5
 8094488:	f1bb 0f00 	cmp.w	fp, #0
 809448c:	bf08      	it	eq
 809448e:	46ab      	moveq	fp, r5
 8094490:	9804      	ldr	r0, [sp, #16]
 8094492:	2d10      	cmp	r5, #16
 8094494:	bfa8      	it	ge
 8094496:	2410      	movge	r4, #16
 8094498:	1ab7      	subs	r7, r6, r2
 809449a:	f7fe fc01 	bl	8092ca0 <__aeabi_ui2d>
 809449e:	2c09      	cmp	r4, #9
 80944a0:	4680      	mov	r8, r0
 80944a2:	4689      	mov	r9, r1
 80944a4:	dd13      	ble.n	80944ce <_strtod_r+0x3de>
 80944a6:	4b89      	ldr	r3, [pc, #548]	; (80946cc <_strtod_r+0x5dc>)
 80944a8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80944ac:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80944b0:	f7fe fc6c 	bl	8092d8c <__aeabi_dmul>
 80944b4:	4680      	mov	r8, r0
 80944b6:	9802      	ldr	r0, [sp, #8]
 80944b8:	4689      	mov	r9, r1
 80944ba:	f7fe fbf1 	bl	8092ca0 <__aeabi_ui2d>
 80944be:	4602      	mov	r2, r0
 80944c0:	460b      	mov	r3, r1
 80944c2:	4640      	mov	r0, r8
 80944c4:	4649      	mov	r1, r9
 80944c6:	f7fe faaf 	bl	8092a28 <__adddf3>
 80944ca:	4680      	mov	r8, r0
 80944cc:	4689      	mov	r9, r1
 80944ce:	2d0f      	cmp	r5, #15
 80944d0:	dc33      	bgt.n	809453a <_strtod_r+0x44a>
 80944d2:	2f00      	cmp	r7, #0
 80944d4:	f000 83d5 	beq.w	8094c82 <_strtod_r+0xb92>
 80944d8:	dd22      	ble.n	8094520 <_strtod_r+0x430>
 80944da:	2f16      	cmp	r7, #22
 80944dc:	dc07      	bgt.n	80944ee <_strtod_r+0x3fe>
 80944de:	4d7b      	ldr	r5, [pc, #492]	; (80946cc <_strtod_r+0x5dc>)
 80944e0:	4642      	mov	r2, r8
 80944e2:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
 80944e6:	464b      	mov	r3, r9
 80944e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80944ec:	e013      	b.n	8094516 <_strtod_r+0x426>
 80944ee:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80944f2:	429f      	cmp	r7, r3
 80944f4:	dc21      	bgt.n	809453a <_strtod_r+0x44a>
 80944f6:	4c75      	ldr	r4, [pc, #468]	; (80946cc <_strtod_r+0x5dc>)
 80944f8:	f1c5 050f 	rsb	r5, r5, #15
 80944fc:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8094500:	1b7d      	subs	r5, r7, r5
 8094502:	4642      	mov	r2, r8
 8094504:	e9d1 0100 	ldrd	r0, r1, [r1]
 8094508:	464b      	mov	r3, r9
 809450a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 809450e:	f7fe fc3d 	bl	8092d8c <__aeabi_dmul>
 8094512:	e9d4 2300 	ldrd	r2, r3, [r4]
 8094516:	f7fe fc39 	bl	8092d8c <__aeabi_dmul>
 809451a:	4680      	mov	r8, r0
 809451c:	4689      	mov	r9, r1
 809451e:	e3b0      	b.n	8094c82 <_strtod_r+0xb92>
 8094520:	f117 0f16 	cmn.w	r7, #22
 8094524:	db09      	blt.n	809453a <_strtod_r+0x44a>
 8094526:	4d69      	ldr	r5, [pc, #420]	; (80946cc <_strtod_r+0x5dc>)
 8094528:	4640      	mov	r0, r8
 809452a:	eba5 03c7 	sub.w	r3, r5, r7, lsl #3
 809452e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8094532:	4649      	mov	r1, r9
 8094534:	f7fe fd54 	bl	8092fe0 <__aeabi_ddiv>
 8094538:	e7ef      	b.n	809451a <_strtod_r+0x42a>
 809453a:	1b2c      	subs	r4, r5, r4
 809453c:	443c      	add	r4, r7
 809453e:	2c00      	cmp	r4, #0
 8094540:	dd5d      	ble.n	80945fe <_strtod_r+0x50e>
 8094542:	f014 010f 	ands.w	r1, r4, #15
 8094546:	d00a      	beq.n	809455e <_strtod_r+0x46e>
 8094548:	4b60      	ldr	r3, [pc, #384]	; (80946cc <_strtod_r+0x5dc>)
 809454a:	4642      	mov	r2, r8
 809454c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8094550:	e9d1 0100 	ldrd	r0, r1, [r1]
 8094554:	464b      	mov	r3, r9
 8094556:	f7fe fc19 	bl	8092d8c <__aeabi_dmul>
 809455a:	4680      	mov	r8, r0
 809455c:	4689      	mov	r9, r1
 809455e:	f034 040f 	bics.w	r4, r4, #15
 8094562:	f000 80c1 	beq.w	80946e8 <_strtod_r+0x5f8>
 8094566:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 809456a:	dd0f      	ble.n	809458c <_strtod_r+0x49c>
 809456c:	f04f 0b00 	mov.w	fp, #0
 8094570:	f8cd b008 	str.w	fp, [sp, #8]
 8094574:	f8cd b014 	str.w	fp, [sp, #20]
 8094578:	f8cd b010 	str.w	fp, [sp, #16]
 809457c:	2322      	movs	r3, #34	; 0x22
 809457e:	f8ca 3000 	str.w	r3, [sl]
 8094582:	f8df 9158 	ldr.w	r9, [pc, #344]	; 80946dc <_strtod_r+0x5ec>
 8094586:	f04f 0800 	mov.w	r8, #0
 809458a:	e189      	b.n	80948a0 <_strtod_r+0x7b0>
 809458c:	4640      	mov	r0, r8
 809458e:	4649      	mov	r1, r9
 8094590:	2300      	movs	r3, #0
 8094592:	4e4f      	ldr	r6, [pc, #316]	; (80946d0 <_strtod_r+0x5e0>)
 8094594:	1124      	asrs	r4, r4, #4
 8094596:	9302      	str	r3, [sp, #8]
 8094598:	2c01      	cmp	r4, #1
 809459a:	dd0c      	ble.n	80945b6 <_strtod_r+0x4c6>
 809459c:	07e2      	lsls	r2, r4, #31
 809459e:	d504      	bpl.n	80945aa <_strtod_r+0x4ba>
 80945a0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80945a4:	f7fe fbf2 	bl	8092d8c <__aeabi_dmul>
 80945a8:	2301      	movs	r3, #1
 80945aa:	9a02      	ldr	r2, [sp, #8]
 80945ac:	1064      	asrs	r4, r4, #1
 80945ae:	3201      	adds	r2, #1
 80945b0:	9202      	str	r2, [sp, #8]
 80945b2:	3608      	adds	r6, #8
 80945b4:	e7f0      	b.n	8094598 <_strtod_r+0x4a8>
 80945b6:	b10b      	cbz	r3, 80945bc <_strtod_r+0x4cc>
 80945b8:	4680      	mov	r8, r0
 80945ba:	4689      	mov	r9, r1
 80945bc:	4b44      	ldr	r3, [pc, #272]	; (80946d0 <_strtod_r+0x5e0>)
 80945be:	9a02      	ldr	r2, [sp, #8]
 80945c0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80945c4:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 80945c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80945cc:	4642      	mov	r2, r8
 80945ce:	464b      	mov	r3, r9
 80945d0:	f7fe fbdc 	bl	8092d8c <__aeabi_dmul>
 80945d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80945d8:	4689      	mov	r9, r1
 80945da:	460a      	mov	r2, r1
 80945dc:	0d1b      	lsrs	r3, r3, #20
 80945de:	493d      	ldr	r1, [pc, #244]	; (80946d4 <_strtod_r+0x5e4>)
 80945e0:	051b      	lsls	r3, r3, #20
 80945e2:	428b      	cmp	r3, r1
 80945e4:	4680      	mov	r8, r0
 80945e6:	d8c1      	bhi.n	809456c <_strtod_r+0x47c>
 80945e8:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80945ec:	428b      	cmp	r3, r1
 80945ee:	bf86      	itte	hi
 80945f0:	f8df 90f0 	ldrhi.w	r9, [pc, #240]	; 80946e4 <_strtod_r+0x5f4>
 80945f4:	f04f 38ff 	movhi.w	r8, #4294967295
 80945f8:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80945fc:	e074      	b.n	80946e8 <_strtod_r+0x5f8>
 80945fe:	d073      	beq.n	80946e8 <_strtod_r+0x5f8>
 8094600:	4264      	negs	r4, r4
 8094602:	f014 020f 	ands.w	r2, r4, #15
 8094606:	d00a      	beq.n	809461e <_strtod_r+0x52e>
 8094608:	4b30      	ldr	r3, [pc, #192]	; (80946cc <_strtod_r+0x5dc>)
 809460a:	4640      	mov	r0, r8
 809460c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8094610:	4649      	mov	r1, r9
 8094612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8094616:	f7fe fce3 	bl	8092fe0 <__aeabi_ddiv>
 809461a:	4680      	mov	r8, r0
 809461c:	4689      	mov	r9, r1
 809461e:	1124      	asrs	r4, r4, #4
 8094620:	d062      	beq.n	80946e8 <_strtod_r+0x5f8>
 8094622:	2c1f      	cmp	r4, #31
 8094624:	dd08      	ble.n	8094638 <_strtod_r+0x548>
 8094626:	f04f 0b00 	mov.w	fp, #0
 809462a:	f8cd b008 	str.w	fp, [sp, #8]
 809462e:	f8cd b014 	str.w	fp, [sp, #20]
 8094632:	f8cd b010 	str.w	fp, [sp, #16]
 8094636:	e12c      	b.n	8094892 <_strtod_r+0x7a2>
 8094638:	4640      	mov	r0, r8
 809463a:	4649      	mov	r1, r9
 809463c:	f014 0f10 	tst.w	r4, #16
 8094640:	bf0c      	ite	eq
 8094642:	2300      	moveq	r3, #0
 8094644:	236a      	movne	r3, #106	; 0x6a
 8094646:	4e24      	ldr	r6, [pc, #144]	; (80946d8 <_strtod_r+0x5e8>)
 8094648:	9303      	str	r3, [sp, #12]
 809464a:	2300      	movs	r3, #0
 809464c:	2c00      	cmp	r4, #0
 809464e:	dd09      	ble.n	8094664 <_strtod_r+0x574>
 8094650:	07e2      	lsls	r2, r4, #31
 8094652:	d504      	bpl.n	809465e <_strtod_r+0x56e>
 8094654:	e9d6 2300 	ldrd	r2, r3, [r6]
 8094658:	f7fe fb98 	bl	8092d8c <__aeabi_dmul>
 809465c:	2301      	movs	r3, #1
 809465e:	1064      	asrs	r4, r4, #1
 8094660:	3608      	adds	r6, #8
 8094662:	e7f3      	b.n	809464c <_strtod_r+0x55c>
 8094664:	b10b      	cbz	r3, 809466a <_strtod_r+0x57a>
 8094666:	4680      	mov	r8, r0
 8094668:	4689      	mov	r9, r1
 809466a:	9b03      	ldr	r3, [sp, #12]
 809466c:	b1eb      	cbz	r3, 80946aa <_strtod_r+0x5ba>
 809466e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8094672:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8094676:	2b00      	cmp	r3, #0
 8094678:	4649      	mov	r1, r9
 809467a:	dd16      	ble.n	80946aa <_strtod_r+0x5ba>
 809467c:	2b1f      	cmp	r3, #31
 809467e:	dd0e      	ble.n	809469e <_strtod_r+0x5ae>
 8094680:	2b34      	cmp	r3, #52	; 0x34
 8094682:	bfde      	ittt	le
 8094684:	3b20      	suble	r3, #32
 8094686:	f04f 32ff 	movle.w	r2, #4294967295
 809468a:	fa02 f303 	lslle.w	r3, r2, r3
 809468e:	f04f 0800 	mov.w	r8, #0
 8094692:	bfcc      	ite	gt
 8094694:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8094698:	ea03 0901 	andle.w	r9, r3, r1
 809469c:	e005      	b.n	80946aa <_strtod_r+0x5ba>
 809469e:	f04f 32ff 	mov.w	r2, #4294967295
 80946a2:	fa02 f303 	lsl.w	r3, r2, r3
 80946a6:	ea03 0808 	and.w	r8, r3, r8
 80946aa:	2200      	movs	r2, #0
 80946ac:	2300      	movs	r3, #0
 80946ae:	4640      	mov	r0, r8
 80946b0:	4649      	mov	r1, r9
 80946b2:	f7fe fdd3 	bl	809325c <__aeabi_dcmpeq>
 80946b6:	2800      	cmp	r0, #0
 80946b8:	d1b5      	bne.n	8094626 <_strtod_r+0x536>
 80946ba:	e017      	b.n	80946ec <_strtod_r+0x5fc>
 80946bc:	08099ba9 	.word	0x08099ba9
 80946c0:	08099fa0 	.word	0x08099fa0
 80946c4:	08099ba1 	.word	0x08099ba1
 80946c8:	08099fa8 	.word	0x08099fa8
 80946cc:	0809a028 	.word	0x0809a028
 80946d0:	0809a0f0 	.word	0x0809a0f0
 80946d4:	7ca00000 	.word	0x7ca00000
 80946d8:	08099fc0 	.word	0x08099fc0
 80946dc:	7ff00000 	.word	0x7ff00000
 80946e0:	fff80000 	.word	0xfff80000
 80946e4:	7fefffff 	.word	0x7fefffff
 80946e8:	2300      	movs	r3, #0
 80946ea:	9303      	str	r3, [sp, #12]
 80946ec:	9b04      	ldr	r3, [sp, #16]
 80946ee:	465a      	mov	r2, fp
 80946f0:	9300      	str	r3, [sp, #0]
 80946f2:	9906      	ldr	r1, [sp, #24]
 80946f4:	462b      	mov	r3, r5
 80946f6:	4650      	mov	r0, sl
 80946f8:	f001 fae7 	bl	8095cca <__s2b>
 80946fc:	9005      	str	r0, [sp, #20]
 80946fe:	2800      	cmp	r0, #0
 8094700:	f43f af34 	beq.w	809456c <_strtod_r+0x47c>
 8094704:	2f00      	cmp	r7, #0
 8094706:	f1c7 0300 	rsb	r3, r7, #0
 809470a:	bfa8      	it	ge
 809470c:	2300      	movge	r3, #0
 809470e:	930d      	str	r3, [sp, #52]	; 0x34
 8094710:	f04f 0b00 	mov.w	fp, #0
 8094714:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 8094718:	9312      	str	r3, [sp, #72]	; 0x48
 809471a:	f8cd b008 	str.w	fp, [sp, #8]
 809471e:	9b05      	ldr	r3, [sp, #20]
 8094720:	4650      	mov	r0, sl
 8094722:	6859      	ldr	r1, [r3, #4]
 8094724:	f001 fa4a 	bl	8095bbc <_Balloc>
 8094728:	9004      	str	r0, [sp, #16]
 809472a:	2800      	cmp	r0, #0
 809472c:	f43f af26 	beq.w	809457c <_strtod_r+0x48c>
 8094730:	9b05      	ldr	r3, [sp, #20]
 8094732:	300c      	adds	r0, #12
 8094734:	691a      	ldr	r2, [r3, #16]
 8094736:	f103 010c 	add.w	r1, r3, #12
 809473a:	3202      	adds	r2, #2
 809473c:	0092      	lsls	r2, r2, #2
 809473e:	f7ff fc10 	bl	8093f62 <memcpy>
 8094742:	ab1a      	add	r3, sp, #104	; 0x68
 8094744:	9301      	str	r3, [sp, #4]
 8094746:	ab19      	add	r3, sp, #100	; 0x64
 8094748:	9300      	str	r3, [sp, #0]
 809474a:	4642      	mov	r2, r8
 809474c:	464b      	mov	r3, r9
 809474e:	4650      	mov	r0, sl
 8094750:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8094754:	f001 fd69 	bl	809622a <__d2b>
 8094758:	9018      	str	r0, [sp, #96]	; 0x60
 809475a:	2800      	cmp	r0, #0
 809475c:	f43f af0e 	beq.w	809457c <_strtod_r+0x48c>
 8094760:	2101      	movs	r1, #1
 8094762:	4650      	mov	r0, sl
 8094764:	f001 fb3c 	bl	8095de0 <__i2b>
 8094768:	9002      	str	r0, [sp, #8]
 809476a:	2800      	cmp	r0, #0
 809476c:	f43f af06 	beq.w	809457c <_strtod_r+0x48c>
 8094770:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8094772:	9903      	ldr	r1, [sp, #12]
 8094774:	2b00      	cmp	r3, #0
 8094776:	bfac      	ite	ge
 8094778:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 809477a:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 809477c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 809477e:	bfac      	ite	ge
 8094780:	18d6      	addge	r6, r2, r3
 8094782:	1ad2      	sublt	r2, r2, r3
 8094784:	eba3 0301 	sub.w	r3, r3, r1
 8094788:	4423      	add	r3, r4
 809478a:	49b1      	ldr	r1, [pc, #708]	; (8094a50 <_strtod_r+0x960>)
 809478c:	f103 33ff 	add.w	r3, r3, #4294967295
 8094790:	bfac      	ite	ge
 8094792:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 8094794:	9e0d      	ldrlt	r6, [sp, #52]	; 0x34
 8094796:	428b      	cmp	r3, r1
 8094798:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
 809479c:	f280 8085 	bge.w	80948aa <_strtod_r+0x7ba>
 80947a0:	1ac9      	subs	r1, r1, r3
 80947a2:	291f      	cmp	r1, #31
 80947a4:	bfc8      	it	gt
 80947a6:	4dab      	ldrgt	r5, [pc, #684]	; (8094a54 <_strtod_r+0x964>)
 80947a8:	f04f 0701 	mov.w	r7, #1
 80947ac:	bfd4      	ite	le
 80947ae:	fa07 f301 	lslle.w	r3, r7, r1
 80947b2:	1aed      	subgt	r5, r5, r3
 80947b4:	eba4 0401 	sub.w	r4, r4, r1
 80947b8:	bfd9      	ittee	le
 80947ba:	9307      	strle	r3, [sp, #28]
 80947bc:	2500      	movle	r5, #0
 80947be:	fa07 f505 	lslgt.w	r5, r7, r5
 80947c2:	9707      	strgt	r7, [sp, #28]
 80947c4:	1937      	adds	r7, r6, r4
 80947c6:	9b03      	ldr	r3, [sp, #12]
 80947c8:	42be      	cmp	r6, r7
 80947ca:	4414      	add	r4, r2
 80947cc:	441c      	add	r4, r3
 80947ce:	4633      	mov	r3, r6
 80947d0:	bfa8      	it	ge
 80947d2:	463b      	movge	r3, r7
 80947d4:	42a3      	cmp	r3, r4
 80947d6:	bfa8      	it	ge
 80947d8:	4623      	movge	r3, r4
 80947da:	2b00      	cmp	r3, #0
 80947dc:	bfc2      	ittt	gt
 80947de:	1aff      	subgt	r7, r7, r3
 80947e0:	1ae4      	subgt	r4, r4, r3
 80947e2:	1af6      	subgt	r6, r6, r3
 80947e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80947e6:	2b00      	cmp	r3, #0
 80947e8:	d163      	bne.n	80948b2 <_strtod_r+0x7c2>
 80947ea:	2f00      	cmp	r7, #0
 80947ec:	dc7a      	bgt.n	80948e4 <_strtod_r+0x7f4>
 80947ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80947f0:	2b00      	cmp	r3, #0
 80947f2:	f040 8081 	bne.w	80948f8 <_strtod_r+0x808>
 80947f6:	2c00      	cmp	r4, #0
 80947f8:	f300 8088 	bgt.w	809490c <_strtod_r+0x81c>
 80947fc:	2e00      	cmp	r6, #0
 80947fe:	f300 808f 	bgt.w	8094920 <_strtod_r+0x830>
 8094802:	9a04      	ldr	r2, [sp, #16]
 8094804:	9918      	ldr	r1, [sp, #96]	; 0x60
 8094806:	4650      	mov	r0, sl
 8094808:	f001 fc3f 	bl	809608a <__mdiff>
 809480c:	4683      	mov	fp, r0
 809480e:	2800      	cmp	r0, #0
 8094810:	f43f aeb4 	beq.w	809457c <_strtod_r+0x48c>
 8094814:	68c3      	ldr	r3, [r0, #12]
 8094816:	2400      	movs	r4, #0
 8094818:	60c4      	str	r4, [r0, #12]
 809481a:	9902      	ldr	r1, [sp, #8]
 809481c:	9306      	str	r3, [sp, #24]
 809481e:	f001 fc18 	bl	8096052 <__mcmp>
 8094822:	42a0      	cmp	r0, r4
 8094824:	f280 808b 	bge.w	809493e <_strtod_r+0x84e>
 8094828:	9b06      	ldr	r3, [sp, #24]
 809482a:	2b00      	cmp	r3, #0
 809482c:	f040 8202 	bne.w	8094c34 <_strtod_r+0xb44>
 8094830:	f1b8 0f00 	cmp.w	r8, #0
 8094834:	f040 81fe 	bne.w	8094c34 <_strtod_r+0xb44>
 8094838:	f3c9 0313 	ubfx	r3, r9, #0, #20
 809483c:	2b00      	cmp	r3, #0
 809483e:	f040 81f9 	bne.w	8094c34 <_strtod_r+0xb44>
 8094842:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8094846:	0d1b      	lsrs	r3, r3, #20
 8094848:	051b      	lsls	r3, r3, #20
 809484a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 809484e:	f240 81f1 	bls.w	8094c34 <_strtod_r+0xb44>
 8094852:	f8db 3014 	ldr.w	r3, [fp, #20]
 8094856:	2b00      	cmp	r3, #0
 8094858:	d06c      	beq.n	8094934 <_strtod_r+0x844>
 809485a:	4659      	mov	r1, fp
 809485c:	2201      	movs	r2, #1
 809485e:	4650      	mov	r0, sl
 8094860:	f001 fba6 	bl	8095fb0 <__lshift>
 8094864:	9902      	ldr	r1, [sp, #8]
 8094866:	4683      	mov	fp, r0
 8094868:	f001 fbf3 	bl	8096052 <__mcmp>
 809486c:	2800      	cmp	r0, #0
 809486e:	f340 81e1 	ble.w	8094c34 <_strtod_r+0xb44>
 8094872:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8094876:	9a03      	ldr	r2, [sp, #12]
 8094878:	0d1b      	lsrs	r3, r3, #20
 809487a:	051b      	lsls	r3, r3, #20
 809487c:	2a00      	cmp	r2, #0
 809487e:	f000 808d 	beq.w	809499c <_strtod_r+0x8ac>
 8094882:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8094886:	f300 8089 	bgt.w	809499c <_strtod_r+0x8ac>
 809488a:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 809488e:	f300 81d3 	bgt.w	8094c38 <_strtod_r+0xb48>
 8094892:	2322      	movs	r3, #34	; 0x22
 8094894:	f04f 0800 	mov.w	r8, #0
 8094898:	f04f 0900 	mov.w	r9, #0
 809489c:	f8ca 3000 	str.w	r3, [sl]
 80948a0:	9b05      	ldr	r3, [sp, #20]
 80948a2:	2b00      	cmp	r3, #0
 80948a4:	f040 81d9 	bne.w	8094c5a <_strtod_r+0xb6a>
 80948a8:	e1eb      	b.n	8094c82 <_strtod_r+0xb92>
 80948aa:	2301      	movs	r3, #1
 80948ac:	2500      	movs	r5, #0
 80948ae:	9307      	str	r3, [sp, #28]
 80948b0:	e788      	b.n	80947c4 <_strtod_r+0x6d4>
 80948b2:	461a      	mov	r2, r3
 80948b4:	9902      	ldr	r1, [sp, #8]
 80948b6:	4650      	mov	r0, sl
 80948b8:	f001 fb2c 	bl	8095f14 <__pow5mult>
 80948bc:	9002      	str	r0, [sp, #8]
 80948be:	2800      	cmp	r0, #0
 80948c0:	f43f ae5c 	beq.w	809457c <_strtod_r+0x48c>
 80948c4:	4601      	mov	r1, r0
 80948c6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80948c8:	4650      	mov	r0, sl
 80948ca:	f001 fa92 	bl	8095df2 <__multiply>
 80948ce:	9006      	str	r0, [sp, #24]
 80948d0:	2800      	cmp	r0, #0
 80948d2:	f43f ae53 	beq.w	809457c <_strtod_r+0x48c>
 80948d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80948d8:	4650      	mov	r0, sl
 80948da:	f001 f9a4 	bl	8095c26 <_Bfree>
 80948de:	9b06      	ldr	r3, [sp, #24]
 80948e0:	9318      	str	r3, [sp, #96]	; 0x60
 80948e2:	e782      	b.n	80947ea <_strtod_r+0x6fa>
 80948e4:	463a      	mov	r2, r7
 80948e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80948e8:	4650      	mov	r0, sl
 80948ea:	f001 fb61 	bl	8095fb0 <__lshift>
 80948ee:	9018      	str	r0, [sp, #96]	; 0x60
 80948f0:	2800      	cmp	r0, #0
 80948f2:	f47f af7c 	bne.w	80947ee <_strtod_r+0x6fe>
 80948f6:	e641      	b.n	809457c <_strtod_r+0x48c>
 80948f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80948fa:	9904      	ldr	r1, [sp, #16]
 80948fc:	4650      	mov	r0, sl
 80948fe:	f001 fb09 	bl	8095f14 <__pow5mult>
 8094902:	9004      	str	r0, [sp, #16]
 8094904:	2800      	cmp	r0, #0
 8094906:	f47f af76 	bne.w	80947f6 <_strtod_r+0x706>
 809490a:	e637      	b.n	809457c <_strtod_r+0x48c>
 809490c:	4622      	mov	r2, r4
 809490e:	9904      	ldr	r1, [sp, #16]
 8094910:	4650      	mov	r0, sl
 8094912:	f001 fb4d 	bl	8095fb0 <__lshift>
 8094916:	9004      	str	r0, [sp, #16]
 8094918:	2800      	cmp	r0, #0
 809491a:	f47f af6f 	bne.w	80947fc <_strtod_r+0x70c>
 809491e:	e62d      	b.n	809457c <_strtod_r+0x48c>
 8094920:	4632      	mov	r2, r6
 8094922:	9902      	ldr	r1, [sp, #8]
 8094924:	4650      	mov	r0, sl
 8094926:	f001 fb43 	bl	8095fb0 <__lshift>
 809492a:	9002      	str	r0, [sp, #8]
 809492c:	2800      	cmp	r0, #0
 809492e:	f47f af68 	bne.w	8094802 <_strtod_r+0x712>
 8094932:	e623      	b.n	809457c <_strtod_r+0x48c>
 8094934:	f8db 3010 	ldr.w	r3, [fp, #16]
 8094938:	2b01      	cmp	r3, #1
 809493a:	dc8e      	bgt.n	809485a <_strtod_r+0x76a>
 809493c:	e17a      	b.n	8094c34 <_strtod_r+0xb44>
 809493e:	d161      	bne.n	8094a04 <_strtod_r+0x914>
 8094940:	9a06      	ldr	r2, [sp, #24]
 8094942:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8094946:	b322      	cbz	r2, 8094992 <_strtod_r+0x8a2>
 8094948:	4943      	ldr	r1, [pc, #268]	; (8094a58 <_strtod_r+0x968>)
 809494a:	464a      	mov	r2, r9
 809494c:	428b      	cmp	r3, r1
 809494e:	d12e      	bne.n	80949ae <_strtod_r+0x8be>
 8094950:	9b03      	ldr	r3, [sp, #12]
 8094952:	4641      	mov	r1, r8
 8094954:	b163      	cbz	r3, 8094970 <_strtod_r+0x880>
 8094956:	4b41      	ldr	r3, [pc, #260]	; (8094a5c <_strtod_r+0x96c>)
 8094958:	4013      	ands	r3, r2
 809495a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 809495e:	d807      	bhi.n	8094970 <_strtod_r+0x880>
 8094960:	0d1b      	lsrs	r3, r3, #20
 8094962:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8094966:	f04f 30ff 	mov.w	r0, #4294967295
 809496a:	fa00 f303 	lsl.w	r3, r0, r3
 809496e:	e001      	b.n	8094974 <_strtod_r+0x884>
 8094970:	f04f 33ff 	mov.w	r3, #4294967295
 8094974:	428b      	cmp	r3, r1
 8094976:	d11a      	bne.n	80949ae <_strtod_r+0x8be>
 8094978:	4939      	ldr	r1, [pc, #228]	; (8094a60 <_strtod_r+0x970>)
 809497a:	428a      	cmp	r2, r1
 809497c:	d102      	bne.n	8094984 <_strtod_r+0x894>
 809497e:	3301      	adds	r3, #1
 8094980:	f43f adfc 	beq.w	809457c <_strtod_r+0x48c>
 8094984:	4b35      	ldr	r3, [pc, #212]	; (8094a5c <_strtod_r+0x96c>)
 8094986:	f04f 0800 	mov.w	r8, #0
 809498a:	4013      	ands	r3, r2
 809498c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8094990:	e150      	b.n	8094c34 <_strtod_r+0xb44>
 8094992:	b963      	cbnz	r3, 80949ae <_strtod_r+0x8be>
 8094994:	f1b8 0f00 	cmp.w	r8, #0
 8094998:	d109      	bne.n	80949ae <_strtod_r+0x8be>
 809499a:	e76a      	b.n	8094872 <_strtod_r+0x782>
 809499c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80949a0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80949a4:	f04f 38ff 	mov.w	r8, #4294967295
 80949a8:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80949ac:	e142      	b.n	8094c34 <_strtod_r+0xb44>
 80949ae:	b115      	cbz	r5, 80949b6 <_strtod_r+0x8c6>
 80949b0:	ea15 0f09 	tst.w	r5, r9
 80949b4:	e002      	b.n	80949bc <_strtod_r+0x8cc>
 80949b6:	9b07      	ldr	r3, [sp, #28]
 80949b8:	ea13 0f08 	tst.w	r3, r8
 80949bc:	f000 813a 	beq.w	8094c34 <_strtod_r+0xb44>
 80949c0:	9b06      	ldr	r3, [sp, #24]
 80949c2:	9a03      	ldr	r2, [sp, #12]
 80949c4:	4640      	mov	r0, r8
 80949c6:	4649      	mov	r1, r9
 80949c8:	b153      	cbz	r3, 80949e0 <_strtod_r+0x8f0>
 80949ca:	f7ff fb70 	bl	80940ae <sulp>
 80949ce:	4602      	mov	r2, r0
 80949d0:	460b      	mov	r3, r1
 80949d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80949d6:	f7fe f827 	bl	8092a28 <__adddf3>
 80949da:	4680      	mov	r8, r0
 80949dc:	4689      	mov	r9, r1
 80949de:	e129      	b.n	8094c34 <_strtod_r+0xb44>
 80949e0:	f7ff fb65 	bl	80940ae <sulp>
 80949e4:	4602      	mov	r2, r0
 80949e6:	460b      	mov	r3, r1
 80949e8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80949ec:	f7fe f81a 	bl	8092a24 <__aeabi_dsub>
 80949f0:	2200      	movs	r2, #0
 80949f2:	2300      	movs	r3, #0
 80949f4:	4680      	mov	r8, r0
 80949f6:	4689      	mov	r9, r1
 80949f8:	f7fe fc30 	bl	809325c <__aeabi_dcmpeq>
 80949fc:	2800      	cmp	r0, #0
 80949fe:	f47f af48 	bne.w	8094892 <_strtod_r+0x7a2>
 8094a02:	e117      	b.n	8094c34 <_strtod_r+0xb44>
 8094a04:	9902      	ldr	r1, [sp, #8]
 8094a06:	4658      	mov	r0, fp
 8094a08:	f001 fc5d 	bl	80962c6 <__ratio>
 8094a0c:	2200      	movs	r2, #0
 8094a0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8094a12:	4606      	mov	r6, r0
 8094a14:	460f      	mov	r7, r1
 8094a16:	f7fe fc35 	bl	8093284 <__aeabi_dcmple>
 8094a1a:	2800      	cmp	r0, #0
 8094a1c:	d03f      	beq.n	8094a9e <_strtod_r+0x9ae>
 8094a1e:	9b06      	ldr	r3, [sp, #24]
 8094a20:	b113      	cbz	r3, 8094a28 <_strtod_r+0x938>
 8094a22:	2600      	movs	r6, #0
 8094a24:	4f0f      	ldr	r7, [pc, #60]	; (8094a64 <_strtod_r+0x974>)
 8094a26:	e010      	b.n	8094a4a <_strtod_r+0x95a>
 8094a28:	f1b8 0f00 	cmp.w	r8, #0
 8094a2c:	d103      	bne.n	8094a36 <_strtod_r+0x946>
 8094a2e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8094a32:	b93b      	cbnz	r3, 8094a44 <_strtod_r+0x954>
 8094a34:	e01a      	b.n	8094a6c <_strtod_r+0x97c>
 8094a36:	f1b8 0f01 	cmp.w	r8, #1
 8094a3a:	d103      	bne.n	8094a44 <_strtod_r+0x954>
 8094a3c:	f1b9 0f00 	cmp.w	r9, #0
 8094a40:	f43f af27 	beq.w	8094892 <_strtod_r+0x7a2>
 8094a44:	4f08      	ldr	r7, [pc, #32]	; (8094a68 <_strtod_r+0x978>)
 8094a46:	2600      	movs	r6, #0
 8094a48:	2400      	movs	r4, #0
 8094a4a:	4d06      	ldr	r5, [pc, #24]	; (8094a64 <_strtod_r+0x974>)
 8094a4c:	e03c      	b.n	8094ac8 <_strtod_r+0x9d8>
 8094a4e:	bf00      	nop
 8094a50:	fffffc02 	.word	0xfffffc02
 8094a54:	fffffbe2 	.word	0xfffffbe2
 8094a58:	000fffff 	.word	0x000fffff
 8094a5c:	7ff00000 	.word	0x7ff00000
 8094a60:	7fefffff 	.word	0x7fefffff
 8094a64:	3ff00000 	.word	0x3ff00000
 8094a68:	bff00000 	.word	0xbff00000
 8094a6c:	2200      	movs	r2, #0
 8094a6e:	4b9a      	ldr	r3, [pc, #616]	; (8094cd8 <_strtod_r+0xbe8>)
 8094a70:	4630      	mov	r0, r6
 8094a72:	4639      	mov	r1, r7
 8094a74:	f7fe fbfc 	bl	8093270 <__aeabi_dcmplt>
 8094a78:	b940      	cbnz	r0, 8094a8c <_strtod_r+0x99c>
 8094a7a:	2200      	movs	r2, #0
 8094a7c:	4b97      	ldr	r3, [pc, #604]	; (8094cdc <_strtod_r+0xbec>)
 8094a7e:	4630      	mov	r0, r6
 8094a80:	4639      	mov	r1, r7
 8094a82:	f7fe f983 	bl	8092d8c <__aeabi_dmul>
 8094a86:	4604      	mov	r4, r0
 8094a88:	460d      	mov	r5, r1
 8094a8a:	e001      	b.n	8094a90 <_strtod_r+0x9a0>
 8094a8c:	9c06      	ldr	r4, [sp, #24]
 8094a8e:	4d93      	ldr	r5, [pc, #588]	; (8094cdc <_strtod_r+0xbec>)
 8094a90:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8094a94:	9414      	str	r4, [sp, #80]	; 0x50
 8094a96:	9315      	str	r3, [sp, #84]	; 0x54
 8094a98:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 8094a9c:	e014      	b.n	8094ac8 <_strtod_r+0x9d8>
 8094a9e:	4b8f      	ldr	r3, [pc, #572]	; (8094cdc <_strtod_r+0xbec>)
 8094aa0:	2200      	movs	r2, #0
 8094aa2:	4630      	mov	r0, r6
 8094aa4:	4639      	mov	r1, r7
 8094aa6:	f7fe f971 	bl	8092d8c <__aeabi_dmul>
 8094aaa:	9b06      	ldr	r3, [sp, #24]
 8094aac:	4604      	mov	r4, r0
 8094aae:	460d      	mov	r5, r1
 8094ab0:	b923      	cbnz	r3, 8094abc <_strtod_r+0x9cc>
 8094ab2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8094ab6:	900e      	str	r0, [sp, #56]	; 0x38
 8094ab8:	930f      	str	r3, [sp, #60]	; 0x3c
 8094aba:	e003      	b.n	8094ac4 <_strtod_r+0x9d4>
 8094abc:	4602      	mov	r2, r0
 8094abe:	460b      	mov	r3, r1
 8094ac0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8094ac4:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8094ac8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8094acc:	0d1b      	lsrs	r3, r3, #20
 8094ace:	051b      	lsls	r3, r3, #20
 8094ad0:	9307      	str	r3, [sp, #28]
 8094ad2:	9a07      	ldr	r2, [sp, #28]
 8094ad4:	4b82      	ldr	r3, [pc, #520]	; (8094ce0 <_strtod_r+0xbf0>)
 8094ad6:	429a      	cmp	r2, r3
 8094ad8:	d12b      	bne.n	8094b32 <_strtod_r+0xa42>
 8094ada:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8094ade:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8094ae2:	4640      	mov	r0, r8
 8094ae4:	4649      	mov	r1, r9
 8094ae6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8094aea:	f001 fb2d 	bl	8096148 <__ulp>
 8094aee:	4602      	mov	r2, r0
 8094af0:	460b      	mov	r3, r1
 8094af2:	4630      	mov	r0, r6
 8094af4:	4639      	mov	r1, r7
 8094af6:	f7fe f949 	bl	8092d8c <__aeabi_dmul>
 8094afa:	4642      	mov	r2, r8
 8094afc:	464b      	mov	r3, r9
 8094afe:	f7fd ff93 	bl	8092a28 <__adddf3>
 8094b02:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8094b06:	0d1b      	lsrs	r3, r3, #20
 8094b08:	4a76      	ldr	r2, [pc, #472]	; (8094ce4 <_strtod_r+0xbf4>)
 8094b0a:	051b      	lsls	r3, r3, #20
 8094b0c:	4293      	cmp	r3, r2
 8094b0e:	4680      	mov	r8, r0
 8094b10:	d90c      	bls.n	8094b2c <_strtod_r+0xa3c>
 8094b12:	4b75      	ldr	r3, [pc, #468]	; (8094ce8 <_strtod_r+0xbf8>)
 8094b14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8094b16:	429a      	cmp	r2, r3
 8094b18:	d103      	bne.n	8094b22 <_strtod_r+0xa32>
 8094b1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8094b1c:	3301      	adds	r3, #1
 8094b1e:	f43f ad2d 	beq.w	809457c <_strtod_r+0x48c>
 8094b22:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8094ce8 <_strtod_r+0xbf8>
 8094b26:	f04f 38ff 	mov.w	r8, #4294967295
 8094b2a:	e072      	b.n	8094c12 <_strtod_r+0xb22>
 8094b2c:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8094b30:	e039      	b.n	8094ba6 <_strtod_r+0xab6>
 8094b32:	9b03      	ldr	r3, [sp, #12]
 8094b34:	b33b      	cbz	r3, 8094b86 <_strtod_r+0xa96>
 8094b36:	9b07      	ldr	r3, [sp, #28]
 8094b38:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8094b3c:	d823      	bhi.n	8094b86 <_strtod_r+0xa96>
 8094b3e:	a35e      	add	r3, pc, #376	; (adr r3, 8094cb8 <_strtod_r+0xbc8>)
 8094b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8094b44:	4620      	mov	r0, r4
 8094b46:	4629      	mov	r1, r5
 8094b48:	f7fe fb9c 	bl	8093284 <__aeabi_dcmple>
 8094b4c:	b1b8      	cbz	r0, 8094b7e <_strtod_r+0xa8e>
 8094b4e:	4629      	mov	r1, r5
 8094b50:	4620      	mov	r0, r4
 8094b52:	f7fe fbf3 	bl	809333c <__aeabi_d2uiz>
 8094b56:	2800      	cmp	r0, #0
 8094b58:	bf08      	it	eq
 8094b5a:	2001      	moveq	r0, #1
 8094b5c:	f7fe f8a0 	bl	8092ca0 <__aeabi_ui2d>
 8094b60:	9b06      	ldr	r3, [sp, #24]
 8094b62:	4604      	mov	r4, r0
 8094b64:	460d      	mov	r5, r1
 8094b66:	b923      	cbnz	r3, 8094b72 <_strtod_r+0xa82>
 8094b68:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8094b6c:	9010      	str	r0, [sp, #64]	; 0x40
 8094b6e:	9311      	str	r3, [sp, #68]	; 0x44
 8094b70:	e003      	b.n	8094b7a <_strtod_r+0xa8a>
 8094b72:	4602      	mov	r2, r0
 8094b74:	460b      	mov	r3, r1
 8094b76:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8094b7a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8094b7e:	9a07      	ldr	r2, [sp, #28]
 8094b80:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8094b84:	1a9f      	subs	r7, r3, r2
 8094b86:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8094b8a:	f001 fadd 	bl	8096148 <__ulp>
 8094b8e:	4602      	mov	r2, r0
 8094b90:	460b      	mov	r3, r1
 8094b92:	4630      	mov	r0, r6
 8094b94:	4639      	mov	r1, r7
 8094b96:	f7fe f8f9 	bl	8092d8c <__aeabi_dmul>
 8094b9a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8094b9e:	f7fd ff43 	bl	8092a28 <__adddf3>
 8094ba2:	4680      	mov	r8, r0
 8094ba4:	4689      	mov	r9, r1
 8094ba6:	9b03      	ldr	r3, [sp, #12]
 8094ba8:	bb9b      	cbnz	r3, 8094c12 <_strtod_r+0xb22>
 8094baa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8094bae:	0d1b      	lsrs	r3, r3, #20
 8094bb0:	9a07      	ldr	r2, [sp, #28]
 8094bb2:	051b      	lsls	r3, r3, #20
 8094bb4:	429a      	cmp	r2, r3
 8094bb6:	464e      	mov	r6, r9
 8094bb8:	d12b      	bne.n	8094c12 <_strtod_r+0xb22>
 8094bba:	4629      	mov	r1, r5
 8094bbc:	4620      	mov	r0, r4
 8094bbe:	f7fe fb95 	bl	80932ec <__aeabi_d2iz>
 8094bc2:	f7fe f87d 	bl	8092cc0 <__aeabi_i2d>
 8094bc6:	460b      	mov	r3, r1
 8094bc8:	4602      	mov	r2, r0
 8094bca:	4629      	mov	r1, r5
 8094bcc:	4620      	mov	r0, r4
 8094bce:	f7fd ff29 	bl	8092a24 <__aeabi_dsub>
 8094bd2:	9b06      	ldr	r3, [sp, #24]
 8094bd4:	4604      	mov	r4, r0
 8094bd6:	460d      	mov	r5, r1
 8094bd8:	b92b      	cbnz	r3, 8094be6 <_strtod_r+0xaf6>
 8094bda:	f1b8 0f00 	cmp.w	r8, #0
 8094bde:	d102      	bne.n	8094be6 <_strtod_r+0xaf6>
 8094be0:	f3c9 0613 	ubfx	r6, r9, #0, #20
 8094be4:	b17e      	cbz	r6, 8094c06 <_strtod_r+0xb16>
 8094be6:	a336      	add	r3, pc, #216	; (adr r3, 8094cc0 <_strtod_r+0xbd0>)
 8094be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8094bec:	4620      	mov	r0, r4
 8094bee:	4629      	mov	r1, r5
 8094bf0:	f7fe fb3e 	bl	8093270 <__aeabi_dcmplt>
 8094bf4:	bb88      	cbnz	r0, 8094c5a <_strtod_r+0xb6a>
 8094bf6:	a334      	add	r3, pc, #208	; (adr r3, 8094cc8 <_strtod_r+0xbd8>)
 8094bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8094bfc:	4620      	mov	r0, r4
 8094bfe:	4629      	mov	r1, r5
 8094c00:	f7fe fb54 	bl	80932ac <__aeabi_dcmpgt>
 8094c04:	e004      	b.n	8094c10 <_strtod_r+0xb20>
 8094c06:	a332      	add	r3, pc, #200	; (adr r3, 8094cd0 <_strtod_r+0xbe0>)
 8094c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8094c0c:	f7fe fb30 	bl	8093270 <__aeabi_dcmplt>
 8094c10:	bb18      	cbnz	r0, 8094c5a <_strtod_r+0xb6a>
 8094c12:	9918      	ldr	r1, [sp, #96]	; 0x60
 8094c14:	4650      	mov	r0, sl
 8094c16:	f001 f806 	bl	8095c26 <_Bfree>
 8094c1a:	9904      	ldr	r1, [sp, #16]
 8094c1c:	4650      	mov	r0, sl
 8094c1e:	f001 f802 	bl	8095c26 <_Bfree>
 8094c22:	9902      	ldr	r1, [sp, #8]
 8094c24:	4650      	mov	r0, sl
 8094c26:	f000 fffe 	bl	8095c26 <_Bfree>
 8094c2a:	4659      	mov	r1, fp
 8094c2c:	4650      	mov	r0, sl
 8094c2e:	f000 fffa 	bl	8095c26 <_Bfree>
 8094c32:	e574      	b.n	809471e <_strtod_r+0x62e>
 8094c34:	9b03      	ldr	r3, [sp, #12]
 8094c36:	b183      	cbz	r3, 8094c5a <_strtod_r+0xb6a>
 8094c38:	4b2c      	ldr	r3, [pc, #176]	; (8094cec <_strtod_r+0xbfc>)
 8094c3a:	4640      	mov	r0, r8
 8094c3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8094c3e:	2300      	movs	r3, #0
 8094c40:	930a      	str	r3, [sp, #40]	; 0x28
 8094c42:	4649      	mov	r1, r9
 8094c44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8094c48:	f7fe f8a0 	bl	8092d8c <__aeabi_dmul>
 8094c4c:	4680      	mov	r8, r0
 8094c4e:	4689      	mov	r9, r1
 8094c50:	b919      	cbnz	r1, 8094c5a <_strtod_r+0xb6a>
 8094c52:	b910      	cbnz	r0, 8094c5a <_strtod_r+0xb6a>
 8094c54:	2322      	movs	r3, #34	; 0x22
 8094c56:	f8ca 3000 	str.w	r3, [sl]
 8094c5a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8094c5c:	4650      	mov	r0, sl
 8094c5e:	f000 ffe2 	bl	8095c26 <_Bfree>
 8094c62:	9904      	ldr	r1, [sp, #16]
 8094c64:	4650      	mov	r0, sl
 8094c66:	f000 ffde 	bl	8095c26 <_Bfree>
 8094c6a:	9902      	ldr	r1, [sp, #8]
 8094c6c:	4650      	mov	r0, sl
 8094c6e:	f000 ffda 	bl	8095c26 <_Bfree>
 8094c72:	9905      	ldr	r1, [sp, #20]
 8094c74:	4650      	mov	r0, sl
 8094c76:	f000 ffd6 	bl	8095c26 <_Bfree>
 8094c7a:	4659      	mov	r1, fp
 8094c7c:	4650      	mov	r0, sl
 8094c7e:	f000 ffd2 	bl	8095c26 <_Bfree>
 8094c82:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8094c84:	b113      	cbz	r3, 8094c8c <_strtod_r+0xb9c>
 8094c86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8094c88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8094c8a:	6013      	str	r3, [r2, #0]
 8094c8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8094c8e:	b11b      	cbz	r3, 8094c98 <_strtod_r+0xba8>
 8094c90:	4642      	mov	r2, r8
 8094c92:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8094c96:	e007      	b.n	8094ca8 <_strtod_r+0xbb8>
 8094c98:	4642      	mov	r2, r8
 8094c9a:	464b      	mov	r3, r9
 8094c9c:	e004      	b.n	8094ca8 <_strtod_r+0xbb8>
 8094c9e:	2500      	movs	r5, #0
 8094ca0:	462a      	mov	r2, r5
 8094ca2:	2101      	movs	r1, #1
 8094ca4:	f7ff bb47 	b.w	8094336 <_strtod_r+0x246>
 8094ca8:	4610      	mov	r0, r2
 8094caa:	4619      	mov	r1, r3
 8094cac:	b01d      	add	sp, #116	; 0x74
 8094cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8094cb2:	bf00      	nop
 8094cb4:	f3af 8000 	nop.w
 8094cb8:	ffc00000 	.word	0xffc00000
 8094cbc:	41dfffff 	.word	0x41dfffff
 8094cc0:	94a03595 	.word	0x94a03595
 8094cc4:	3fdfffff 	.word	0x3fdfffff
 8094cc8:	35afe535 	.word	0x35afe535
 8094ccc:	3fe00000 	.word	0x3fe00000
 8094cd0:	94a03595 	.word	0x94a03595
 8094cd4:	3fcfffff 	.word	0x3fcfffff
 8094cd8:	3ff00000 	.word	0x3ff00000
 8094cdc:	3fe00000 	.word	0x3fe00000
 8094ce0:	7fe00000 	.word	0x7fe00000
 8094ce4:	7c9fffff 	.word	0x7c9fffff
 8094ce8:	7fefffff 	.word	0x7fefffff
 8094cec:	39500000 	.word	0x39500000

08094cf0 <strtod>:
 8094cf0:	4b02      	ldr	r3, [pc, #8]	; (8094cfc <strtod+0xc>)
 8094cf2:	460a      	mov	r2, r1
 8094cf4:	4601      	mov	r1, r0
 8094cf6:	6818      	ldr	r0, [r3, #0]
 8094cf8:	f7ff b9fa 	b.w	80940f0 <_strtod_r>
 8094cfc:	200004ac 	.word	0x200004ac

08094d00 <_strtol_r>:
 8094d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8094d04:	460f      	mov	r7, r1
 8094d06:	4680      	mov	r8, r0
 8094d08:	483f      	ldr	r0, [pc, #252]	; (8094e08 <_strtol_r+0x108>)
 8094d0a:	f8d0 9000 	ldr.w	r9, [r0]
 8094d0e:	463d      	mov	r5, r7
 8094d10:	f815 4b01 	ldrb.w	r4, [r5], #1
 8094d14:	eb09 0004 	add.w	r0, r9, r4
 8094d18:	7840      	ldrb	r0, [r0, #1]
 8094d1a:	f000 0008 	and.w	r0, r0, #8
 8094d1e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 8094d22:	b108      	cbz	r0, 8094d28 <_strtol_r+0x28>
 8094d24:	462f      	mov	r7, r5
 8094d26:	e7f2      	b.n	8094d0e <_strtol_r+0xe>
 8094d28:	2c2d      	cmp	r4, #45	; 0x2d
 8094d2a:	d103      	bne.n	8094d34 <_strtol_r+0x34>
 8094d2c:	1cbd      	adds	r5, r7, #2
 8094d2e:	787c      	ldrb	r4, [r7, #1]
 8094d30:	2601      	movs	r6, #1
 8094d32:	e003      	b.n	8094d3c <_strtol_r+0x3c>
 8094d34:	2c2b      	cmp	r4, #43	; 0x2b
 8094d36:	bf04      	itt	eq
 8094d38:	787c      	ldrbeq	r4, [r7, #1]
 8094d3a:	1cbd      	addeq	r5, r7, #2
 8094d3c:	b113      	cbz	r3, 8094d44 <_strtol_r+0x44>
 8094d3e:	2b10      	cmp	r3, #16
 8094d40:	d10a      	bne.n	8094d58 <_strtol_r+0x58>
 8094d42:	e05b      	b.n	8094dfc <_strtol_r+0xfc>
 8094d44:	2c30      	cmp	r4, #48	; 0x30
 8094d46:	d157      	bne.n	8094df8 <_strtol_r+0xf8>
 8094d48:	7828      	ldrb	r0, [r5, #0]
 8094d4a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8094d4e:	2858      	cmp	r0, #88	; 0x58
 8094d50:	d14d      	bne.n	8094dee <_strtol_r+0xee>
 8094d52:	786c      	ldrb	r4, [r5, #1]
 8094d54:	2310      	movs	r3, #16
 8094d56:	3502      	adds	r5, #2
 8094d58:	2e00      	cmp	r6, #0
 8094d5a:	bf14      	ite	ne
 8094d5c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 8094d60:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 8094d64:	fbbc faf3 	udiv	sl, ip, r3
 8094d68:	2700      	movs	r7, #0
 8094d6a:	4638      	mov	r0, r7
 8094d6c:	fb03 cc1a 	mls	ip, r3, sl, ip
 8094d70:	eb09 0e04 	add.w	lr, r9, r4
 8094d74:	f89e e001 	ldrb.w	lr, [lr, #1]
 8094d78:	f01e 0f04 	tst.w	lr, #4
 8094d7c:	d001      	beq.n	8094d82 <_strtol_r+0x82>
 8094d7e:	3c30      	subs	r4, #48	; 0x30
 8094d80:	e00b      	b.n	8094d9a <_strtol_r+0x9a>
 8094d82:	f01e 0e03 	ands.w	lr, lr, #3
 8094d86:	d01b      	beq.n	8094dc0 <_strtol_r+0xc0>
 8094d88:	f1be 0f01 	cmp.w	lr, #1
 8094d8c:	bf0c      	ite	eq
 8094d8e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8094d92:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8094d96:	ebce 0404 	rsb	r4, lr, r4
 8094d9a:	42a3      	cmp	r3, r4
 8094d9c:	dd10      	ble.n	8094dc0 <_strtol_r+0xc0>
 8094d9e:	f1b7 3fff 	cmp.w	r7, #4294967295
 8094da2:	d00a      	beq.n	8094dba <_strtol_r+0xba>
 8094da4:	4550      	cmp	r0, sl
 8094da6:	d806      	bhi.n	8094db6 <_strtol_r+0xb6>
 8094da8:	d101      	bne.n	8094dae <_strtol_r+0xae>
 8094daa:	4564      	cmp	r4, ip
 8094dac:	dc03      	bgt.n	8094db6 <_strtol_r+0xb6>
 8094dae:	fb03 4000 	mla	r0, r3, r0, r4
 8094db2:	2701      	movs	r7, #1
 8094db4:	e001      	b.n	8094dba <_strtol_r+0xba>
 8094db6:	f04f 37ff 	mov.w	r7, #4294967295
 8094dba:	f815 4b01 	ldrb.w	r4, [r5], #1
 8094dbe:	e7d7      	b.n	8094d70 <_strtol_r+0x70>
 8094dc0:	1c7b      	adds	r3, r7, #1
 8094dc2:	d10c      	bne.n	8094dde <_strtol_r+0xde>
 8094dc4:	2e00      	cmp	r6, #0
 8094dc6:	f04f 0322 	mov.w	r3, #34	; 0x22
 8094dca:	bf14      	ite	ne
 8094dcc:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8094dd0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8094dd4:	f8c8 3000 	str.w	r3, [r8]
 8094dd8:	b92a      	cbnz	r2, 8094de6 <_strtol_r+0xe6>
 8094dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8094dde:	b106      	cbz	r6, 8094de2 <_strtol_r+0xe2>
 8094de0:	4240      	negs	r0, r0
 8094de2:	b172      	cbz	r2, 8094e02 <_strtol_r+0x102>
 8094de4:	b107      	cbz	r7, 8094de8 <_strtol_r+0xe8>
 8094de6:	1e69      	subs	r1, r5, #1
 8094de8:	6011      	str	r1, [r2, #0]
 8094dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8094dee:	2430      	movs	r4, #48	; 0x30
 8094df0:	2b00      	cmp	r3, #0
 8094df2:	d1b1      	bne.n	8094d58 <_strtol_r+0x58>
 8094df4:	2308      	movs	r3, #8
 8094df6:	e7af      	b.n	8094d58 <_strtol_r+0x58>
 8094df8:	230a      	movs	r3, #10
 8094dfa:	e7ad      	b.n	8094d58 <_strtol_r+0x58>
 8094dfc:	2c30      	cmp	r4, #48	; 0x30
 8094dfe:	d0a3      	beq.n	8094d48 <_strtol_r+0x48>
 8094e00:	e7aa      	b.n	8094d58 <_strtol_r+0x58>
 8094e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8094e06:	bf00      	nop
 8094e08:	20000448 	.word	0x20000448

08094e0c <strtol>:
 8094e0c:	4613      	mov	r3, r2
 8094e0e:	460a      	mov	r2, r1
 8094e10:	4601      	mov	r1, r0
 8094e12:	4802      	ldr	r0, [pc, #8]	; (8094e1c <strtol+0x10>)
 8094e14:	6800      	ldr	r0, [r0, #0]
 8094e16:	f7ff bf73 	b.w	8094d00 <_strtol_r>
 8094e1a:	bf00      	nop
 8094e1c:	200004ac 	.word	0x200004ac

08094e20 <_strtoul_r>:
 8094e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8094e24:	460e      	mov	r6, r1
 8094e26:	4680      	mov	r8, r0
 8094e28:	483b      	ldr	r0, [pc, #236]	; (8094f18 <_strtoul_r+0xf8>)
 8094e2a:	f8d0 9000 	ldr.w	r9, [r0]
 8094e2e:	4635      	mov	r5, r6
 8094e30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8094e34:	eb09 0004 	add.w	r0, r9, r4
 8094e38:	7840      	ldrb	r0, [r0, #1]
 8094e3a:	f000 0008 	and.w	r0, r0, #8
 8094e3e:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 8094e42:	b108      	cbz	r0, 8094e48 <_strtoul_r+0x28>
 8094e44:	462e      	mov	r6, r5
 8094e46:	e7f2      	b.n	8094e2e <_strtoul_r+0xe>
 8094e48:	2c2d      	cmp	r4, #45	; 0x2d
 8094e4a:	d103      	bne.n	8094e54 <_strtoul_r+0x34>
 8094e4c:	1cb5      	adds	r5, r6, #2
 8094e4e:	7874      	ldrb	r4, [r6, #1]
 8094e50:	2701      	movs	r7, #1
 8094e52:	e003      	b.n	8094e5c <_strtoul_r+0x3c>
 8094e54:	2c2b      	cmp	r4, #43	; 0x2b
 8094e56:	bf04      	itt	eq
 8094e58:	7874      	ldrbeq	r4, [r6, #1]
 8094e5a:	1cb5      	addeq	r5, r6, #2
 8094e5c:	b113      	cbz	r3, 8094e64 <_strtoul_r+0x44>
 8094e5e:	2b10      	cmp	r3, #16
 8094e60:	d10a      	bne.n	8094e78 <_strtoul_r+0x58>
 8094e62:	e053      	b.n	8094f0c <_strtoul_r+0xec>
 8094e64:	2c30      	cmp	r4, #48	; 0x30
 8094e66:	d14f      	bne.n	8094f08 <_strtoul_r+0xe8>
 8094e68:	7828      	ldrb	r0, [r5, #0]
 8094e6a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8094e6e:	2858      	cmp	r0, #88	; 0x58
 8094e70:	d145      	bne.n	8094efe <_strtoul_r+0xde>
 8094e72:	786c      	ldrb	r4, [r5, #1]
 8094e74:	2310      	movs	r3, #16
 8094e76:	3502      	adds	r5, #2
 8094e78:	f04f 3cff 	mov.w	ip, #4294967295
 8094e7c:	fbbc fcf3 	udiv	ip, ip, r3
 8094e80:	fb03 fa0c 	mul.w	sl, r3, ip
 8094e84:	2600      	movs	r6, #0
 8094e86:	ea6f 0a0a 	mvn.w	sl, sl
 8094e8a:	4630      	mov	r0, r6
 8094e8c:	eb09 0e04 	add.w	lr, r9, r4
 8094e90:	f89e e001 	ldrb.w	lr, [lr, #1]
 8094e94:	f01e 0f04 	tst.w	lr, #4
 8094e98:	d001      	beq.n	8094e9e <_strtoul_r+0x7e>
 8094e9a:	3c30      	subs	r4, #48	; 0x30
 8094e9c:	e00b      	b.n	8094eb6 <_strtoul_r+0x96>
 8094e9e:	f01e 0e03 	ands.w	lr, lr, #3
 8094ea2:	d01a      	beq.n	8094eda <_strtoul_r+0xba>
 8094ea4:	f1be 0f01 	cmp.w	lr, #1
 8094ea8:	bf0c      	ite	eq
 8094eaa:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8094eae:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8094eb2:	ebce 0404 	rsb	r4, lr, r4
 8094eb6:	42a3      	cmp	r3, r4
 8094eb8:	dd0f      	ble.n	8094eda <_strtoul_r+0xba>
 8094eba:	2e00      	cmp	r6, #0
 8094ebc:	db08      	blt.n	8094ed0 <_strtoul_r+0xb0>
 8094ebe:	4560      	cmp	r0, ip
 8094ec0:	d806      	bhi.n	8094ed0 <_strtoul_r+0xb0>
 8094ec2:	d101      	bne.n	8094ec8 <_strtoul_r+0xa8>
 8094ec4:	4554      	cmp	r4, sl
 8094ec6:	dc03      	bgt.n	8094ed0 <_strtoul_r+0xb0>
 8094ec8:	fb03 4000 	mla	r0, r3, r0, r4
 8094ecc:	2601      	movs	r6, #1
 8094ece:	e001      	b.n	8094ed4 <_strtoul_r+0xb4>
 8094ed0:	f04f 36ff 	mov.w	r6, #4294967295
 8094ed4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8094ed8:	e7d8      	b.n	8094e8c <_strtoul_r+0x6c>
 8094eda:	2e00      	cmp	r6, #0
 8094edc:	da07      	bge.n	8094eee <_strtoul_r+0xce>
 8094ede:	2322      	movs	r3, #34	; 0x22
 8094ee0:	f8c8 3000 	str.w	r3, [r8]
 8094ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8094ee8:	b92a      	cbnz	r2, 8094ef6 <_strtoul_r+0xd6>
 8094eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8094eee:	b107      	cbz	r7, 8094ef2 <_strtoul_r+0xd2>
 8094ef0:	4240      	negs	r0, r0
 8094ef2:	b172      	cbz	r2, 8094f12 <_strtoul_r+0xf2>
 8094ef4:	b106      	cbz	r6, 8094ef8 <_strtoul_r+0xd8>
 8094ef6:	1e69      	subs	r1, r5, #1
 8094ef8:	6011      	str	r1, [r2, #0]
 8094efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8094efe:	2430      	movs	r4, #48	; 0x30
 8094f00:	2b00      	cmp	r3, #0
 8094f02:	d1b9      	bne.n	8094e78 <_strtoul_r+0x58>
 8094f04:	2308      	movs	r3, #8
 8094f06:	e7b7      	b.n	8094e78 <_strtoul_r+0x58>
 8094f08:	230a      	movs	r3, #10
 8094f0a:	e7b5      	b.n	8094e78 <_strtoul_r+0x58>
 8094f0c:	2c30      	cmp	r4, #48	; 0x30
 8094f0e:	d0ab      	beq.n	8094e68 <_strtoul_r+0x48>
 8094f10:	e7b2      	b.n	8094e78 <_strtoul_r+0x58>
 8094f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8094f16:	bf00      	nop
 8094f18:	20000448 	.word	0x20000448

08094f1c <strtoul>:
 8094f1c:	4613      	mov	r3, r2
 8094f1e:	460a      	mov	r2, r1
 8094f20:	4601      	mov	r1, r0
 8094f22:	4802      	ldr	r0, [pc, #8]	; (8094f2c <strtoul+0x10>)
 8094f24:	6800      	ldr	r0, [r0, #0]
 8094f26:	f7ff bf7b 	b.w	8094e20 <_strtoul_r>
 8094f2a:	bf00      	nop
 8094f2c:	200004ac 	.word	0x200004ac

08094f30 <gettimeofday>:
 8094f30:	4b02      	ldr	r3, [pc, #8]	; (8094f3c <gettimeofday+0xc>)
 8094f32:	460a      	mov	r2, r1
 8094f34:	4601      	mov	r1, r0
 8094f36:	6818      	ldr	r0, [r3, #0]
 8094f38:	f000 bd94 	b.w	8095a64 <_gettimeofday_r>
 8094f3c:	200004ac 	.word	0x200004ac

08094f40 <__tzcalc_limits>:
 8094f40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8094f44:	4604      	mov	r4, r0
 8094f46:	f000 fd9f 	bl	8095a88 <__gettzinfo>
 8094f4a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8094f4e:	429c      	cmp	r4, r3
 8094f50:	f340 8096 	ble.w	8095080 <__tzcalc_limits+0x140>
 8094f54:	f240 156d 	movw	r5, #365	; 0x16d
 8094f58:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8094f5c:	18e3      	adds	r3, r4, r3
 8094f5e:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 8094f62:	109b      	asrs	r3, r3, #2
 8094f64:	fb05 3502 	mla	r5, r5, r2, r3
 8094f68:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 8094f6c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8094f70:	fb92 f3f3 	sdiv	r3, r2, r3
 8094f74:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8094f78:	442b      	add	r3, r5
 8094f7a:	18a5      	adds	r5, r4, r2
 8094f7c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8094f80:	fb94 f7f2 	sdiv	r7, r4, r2
 8094f84:	fb95 f5f2 	sdiv	r5, r5, r2
 8094f88:	fb02 4717 	mls	r7, r2, r7, r4
 8094f8c:	441d      	add	r5, r3
 8094f8e:	2364      	movs	r3, #100	; 0x64
 8094f90:	fb94 f6f3 	sdiv	r6, r4, r3
 8094f94:	fab7 fe87 	clz	lr, r7
 8094f98:	4601      	mov	r1, r0
 8094f9a:	fb03 4616 	mls	r6, r3, r6, r4
 8094f9e:	f100 0338 	add.w	r3, r0, #56	; 0x38
 8094fa2:	9301      	str	r3, [sp, #4]
 8094fa4:	f004 0303 	and.w	r3, r4, #3
 8094fa8:	6044      	str	r4, [r0, #4]
 8094faa:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8094fae:	9300      	str	r3, [sp, #0]
 8094fb0:	f04f 0c07 	mov.w	ip, #7
 8094fb4:	7a0b      	ldrb	r3, [r1, #8]
 8094fb6:	2b4a      	cmp	r3, #74	; 0x4a
 8094fb8:	d10e      	bne.n	8094fd8 <__tzcalc_limits+0x98>
 8094fba:	694b      	ldr	r3, [r1, #20]
 8094fbc:	9a00      	ldr	r2, [sp, #0]
 8094fbe:	18ec      	adds	r4, r5, r3
 8094fc0:	b902      	cbnz	r2, 8094fc4 <__tzcalc_limits+0x84>
 8094fc2:	b906      	cbnz	r6, 8094fc6 <__tzcalc_limits+0x86>
 8094fc4:	b927      	cbnz	r7, 8094fd0 <__tzcalc_limits+0x90>
 8094fc6:	2b3b      	cmp	r3, #59	; 0x3b
 8094fc8:	bfd4      	ite	le
 8094fca:	2300      	movle	r3, #0
 8094fcc:	2301      	movgt	r3, #1
 8094fce:	e000      	b.n	8094fd2 <__tzcalc_limits+0x92>
 8094fd0:	2300      	movs	r3, #0
 8094fd2:	4423      	add	r3, r4
 8094fd4:	3b01      	subs	r3, #1
 8094fd6:	e03f      	b.n	8095058 <__tzcalc_limits+0x118>
 8094fd8:	2b44      	cmp	r3, #68	; 0x44
 8094fda:	d102      	bne.n	8094fe2 <__tzcalc_limits+0xa2>
 8094fdc:	694b      	ldr	r3, [r1, #20]
 8094fde:	442b      	add	r3, r5
 8094fe0:	e03a      	b.n	8095058 <__tzcalc_limits+0x118>
 8094fe2:	9b00      	ldr	r3, [sp, #0]
 8094fe4:	b92b      	cbnz	r3, 8094ff2 <__tzcalc_limits+0xb2>
 8094fe6:	2e00      	cmp	r6, #0
 8094fe8:	bf0c      	ite	eq
 8094fea:	46f0      	moveq	r8, lr
 8094fec:	f04f 0801 	movne.w	r8, #1
 8094ff0:	e000      	b.n	8094ff4 <__tzcalc_limits+0xb4>
 8094ff2:	46f0      	mov	r8, lr
 8094ff4:	46a9      	mov	r9, r5
 8094ff6:	4b24      	ldr	r3, [pc, #144]	; (8095088 <__tzcalc_limits+0x148>)
 8094ff8:	2230      	movs	r2, #48	; 0x30
 8094ffa:	fb02 3808 	mla	r8, r2, r8, r3
 8094ffe:	68cc      	ldr	r4, [r1, #12]
 8095000:	f1a8 0a04 	sub.w	sl, r8, #4
 8095004:	2301      	movs	r3, #1
 8095006:	42a3      	cmp	r3, r4
 8095008:	da04      	bge.n	8095014 <__tzcalc_limits+0xd4>
 809500a:	f85a bf04 	ldr.w	fp, [sl, #4]!
 809500e:	3301      	adds	r3, #1
 8095010:	44d9      	add	r9, fp
 8095012:	e7f8      	b.n	8095006 <__tzcalc_limits+0xc6>
 8095014:	f109 0304 	add.w	r3, r9, #4
 8095018:	fb93 fbfc 	sdiv	fp, r3, ip
 809501c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 8095020:	ebca 0a03 	rsb	sl, sl, r3
 8095024:	694b      	ldr	r3, [r1, #20]
 8095026:	2c01      	cmp	r4, #1
 8095028:	bfb8      	it	lt
 809502a:	2401      	movlt	r4, #1
 809502c:	ebb3 0a0a 	subs.w	sl, r3, sl
 8095030:	690b      	ldr	r3, [r1, #16]
 8095032:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8095036:	f103 33ff 	add.w	r3, r3, #4294967295
 809503a:	f104 34ff 	add.w	r4, r4, #4294967295
 809503e:	bf48      	it	mi
 8095040:	f10a 0a07 	addmi.w	sl, sl, #7
 8095044:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8095048:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 809504c:	4453      	add	r3, sl
 809504e:	42a3      	cmp	r3, r4
 8095050:	db01      	blt.n	8095056 <__tzcalc_limits+0x116>
 8095052:	3b07      	subs	r3, #7
 8095054:	e7fb      	b.n	809504e <__tzcalc_limits+0x10e>
 8095056:	444b      	add	r3, r9
 8095058:	698c      	ldr	r4, [r1, #24]
 809505a:	4a0c      	ldr	r2, [pc, #48]	; (809508c <__tzcalc_limits+0x14c>)
 809505c:	fb02 4303 	mla	r3, r2, r3, r4
 8095060:	6a0c      	ldr	r4, [r1, #32]
 8095062:	4423      	add	r3, r4
 8095064:	f841 3f1c 	str.w	r3, [r1, #28]!
 8095068:	9b01      	ldr	r3, [sp, #4]
 809506a:	4299      	cmp	r1, r3
 809506c:	d1a2      	bne.n	8094fb4 <__tzcalc_limits+0x74>
 809506e:	69c3      	ldr	r3, [r0, #28]
 8095070:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8095072:	4293      	cmp	r3, r2
 8095074:	bfac      	ite	ge
 8095076:	2300      	movge	r3, #0
 8095078:	2301      	movlt	r3, #1
 809507a:	6003      	str	r3, [r0, #0]
 809507c:	2001      	movs	r0, #1
 809507e:	e000      	b.n	8095082 <__tzcalc_limits+0x142>
 8095080:	2000      	movs	r0, #0
 8095082:	b003      	add	sp, #12
 8095084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8095088:	08099f2c 	.word	0x08099f2c
 809508c:	00015180 	.word	0x00015180

08095090 <__tz_lock>:
 8095090:	4770      	bx	lr

08095092 <__tz_unlock>:
 8095092:	4770      	bx	lr

08095094 <_tzset_unlocked>:
 8095094:	4b01      	ldr	r3, [pc, #4]	; (809509c <_tzset_unlocked+0x8>)
 8095096:	6818      	ldr	r0, [r3, #0]
 8095098:	f000 b802 	b.w	80950a0 <_tzset_unlocked_r>
 809509c:	200004ac 	.word	0x200004ac

080950a0 <_tzset_unlocked_r>:
 80950a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80950a4:	b08d      	sub	sp, #52	; 0x34
 80950a6:	4607      	mov	r7, r0
 80950a8:	f000 fcee 	bl	8095a88 <__gettzinfo>
 80950ac:	49b0      	ldr	r1, [pc, #704]	; (8095370 <_tzset_unlocked_r+0x2d0>)
 80950ae:	4604      	mov	r4, r0
 80950b0:	4638      	mov	r0, r7
 80950b2:	f000 fccf 	bl	8095a54 <_getenv_r>
 80950b6:	4eaf      	ldr	r6, [pc, #700]	; (8095374 <_tzset_unlocked_r+0x2d4>)
 80950b8:	4605      	mov	r5, r0
 80950ba:	b960      	cbnz	r0, 80950d6 <_tzset_unlocked_r+0x36>
 80950bc:	4bae      	ldr	r3, [pc, #696]	; (8095378 <_tzset_unlocked_r+0x2d8>)
 80950be:	4aaf      	ldr	r2, [pc, #700]	; (809537c <_tzset_unlocked_r+0x2dc>)
 80950c0:	6018      	str	r0, [r3, #0]
 80950c2:	4baf      	ldr	r3, [pc, #700]	; (8095380 <_tzset_unlocked_r+0x2e0>)
 80950c4:	6018      	str	r0, [r3, #0]
 80950c6:	4baf      	ldr	r3, [pc, #700]	; (8095384 <_tzset_unlocked_r+0x2e4>)
 80950c8:	6830      	ldr	r0, [r6, #0]
 80950ca:	601a      	str	r2, [r3, #0]
 80950cc:	605a      	str	r2, [r3, #4]
 80950ce:	f7fc f843 	bl	8091158 <free>
 80950d2:	6035      	str	r5, [r6, #0]
 80950d4:	e148      	b.n	8095368 <_tzset_unlocked_r+0x2c8>
 80950d6:	6831      	ldr	r1, [r6, #0]
 80950d8:	b979      	cbnz	r1, 80950fa <_tzset_unlocked_r+0x5a>
 80950da:	6830      	ldr	r0, [r6, #0]
 80950dc:	f7fc f83c 	bl	8091158 <free>
 80950e0:	4628      	mov	r0, r5
 80950e2:	f7fe ff9a 	bl	809401a <strlen>
 80950e6:	1c41      	adds	r1, r0, #1
 80950e8:	4638      	mov	r0, r7
 80950ea:	f7fc f86d 	bl	80911c8 <_malloc_r>
 80950ee:	6030      	str	r0, [r6, #0]
 80950f0:	b148      	cbz	r0, 8095106 <_tzset_unlocked_r+0x66>
 80950f2:	4629      	mov	r1, r5
 80950f4:	f7fe ff89 	bl	809400a <strcpy>
 80950f8:	e005      	b.n	8095106 <_tzset_unlocked_r+0x66>
 80950fa:	f7fe ff7c 	bl	8093ff6 <strcmp>
 80950fe:	2800      	cmp	r0, #0
 8095100:	f000 8132 	beq.w	8095368 <_tzset_unlocked_r+0x2c8>
 8095104:	e7e9      	b.n	80950da <_tzset_unlocked_r+0x3a>
 8095106:	782b      	ldrb	r3, [r5, #0]
 8095108:	ae0a      	add	r6, sp, #40	; 0x28
 809510a:	2b3a      	cmp	r3, #58	; 0x3a
 809510c:	bf08      	it	eq
 809510e:	3501      	addeq	r5, #1
 8095110:	4633      	mov	r3, r6
 8095112:	4a9d      	ldr	r2, [pc, #628]	; (8095388 <_tzset_unlocked_r+0x2e8>)
 8095114:	499d      	ldr	r1, [pc, #628]	; (809538c <_tzset_unlocked_r+0x2ec>)
 8095116:	4628      	mov	r0, r5
 8095118:	f7fc f836 	bl	8091188 <siscanf>
 809511c:	2800      	cmp	r0, #0
 809511e:	f340 8123 	ble.w	8095368 <_tzset_unlocked_r+0x2c8>
 8095122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8095124:	18ef      	adds	r7, r5, r3
 8095126:	5ceb      	ldrb	r3, [r5, r3]
 8095128:	2b2d      	cmp	r3, #45	; 0x2d
 809512a:	d103      	bne.n	8095134 <_tzset_unlocked_r+0x94>
 809512c:	3701      	adds	r7, #1
 809512e:	f04f 35ff 	mov.w	r5, #4294967295
 8095132:	e003      	b.n	809513c <_tzset_unlocked_r+0x9c>
 8095134:	2b2b      	cmp	r3, #43	; 0x2b
 8095136:	bf08      	it	eq
 8095138:	3701      	addeq	r7, #1
 809513a:	2501      	movs	r5, #1
 809513c:	f10d 0a20 	add.w	sl, sp, #32
 8095140:	f10d 0b1e 	add.w	fp, sp, #30
 8095144:	f04f 0800 	mov.w	r8, #0
 8095148:	9603      	str	r6, [sp, #12]
 809514a:	f8cd a008 	str.w	sl, [sp, #8]
 809514e:	9601      	str	r6, [sp, #4]
 8095150:	f8cd b000 	str.w	fp, [sp]
 8095154:	4633      	mov	r3, r6
 8095156:	aa07      	add	r2, sp, #28
 8095158:	498d      	ldr	r1, [pc, #564]	; (8095390 <_tzset_unlocked_r+0x2f0>)
 809515a:	4638      	mov	r0, r7
 809515c:	f8ad 801e 	strh.w	r8, [sp, #30]
 8095160:	f8ad 8020 	strh.w	r8, [sp, #32]
 8095164:	f7fc f810 	bl	8091188 <siscanf>
 8095168:	4540      	cmp	r0, r8
 809516a:	f340 80fd 	ble.w	8095368 <_tzset_unlocked_r+0x2c8>
 809516e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8095172:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8095176:	213c      	movs	r1, #60	; 0x3c
 8095178:	fb01 3302 	mla	r3, r1, r2, r3
 809517c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8095180:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8095184:	fb01 3302 	mla	r3, r1, r2, r3
 8095188:	435d      	muls	r5, r3
 809518a:	4b7f      	ldr	r3, [pc, #508]	; (8095388 <_tzset_unlocked_r+0x2e8>)
 809518c:	6225      	str	r5, [r4, #32]
 809518e:	4d7d      	ldr	r5, [pc, #500]	; (8095384 <_tzset_unlocked_r+0x2e4>)
 8095190:	f8df 9208 	ldr.w	r9, [pc, #520]	; 809539c <_tzset_unlocked_r+0x2fc>
 8095194:	602b      	str	r3, [r5, #0]
 8095196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8095198:	464a      	mov	r2, r9
 809519a:	441f      	add	r7, r3
 809519c:	497b      	ldr	r1, [pc, #492]	; (809538c <_tzset_unlocked_r+0x2ec>)
 809519e:	4633      	mov	r3, r6
 80951a0:	4638      	mov	r0, r7
 80951a2:	f7fb fff1 	bl	8091188 <siscanf>
 80951a6:	4540      	cmp	r0, r8
 80951a8:	dc08      	bgt.n	80951bc <_tzset_unlocked_r+0x11c>
 80951aa:	682b      	ldr	r3, [r5, #0]
 80951ac:	6a22      	ldr	r2, [r4, #32]
 80951ae:	606b      	str	r3, [r5, #4]
 80951b0:	4b71      	ldr	r3, [pc, #452]	; (8095378 <_tzset_unlocked_r+0x2d8>)
 80951b2:	601a      	str	r2, [r3, #0]
 80951b4:	4b72      	ldr	r3, [pc, #456]	; (8095380 <_tzset_unlocked_r+0x2e0>)
 80951b6:	f8c3 8000 	str.w	r8, [r3]
 80951ba:	e0d5      	b.n	8095368 <_tzset_unlocked_r+0x2c8>
 80951bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80951be:	f8c5 9004 	str.w	r9, [r5, #4]
 80951c2:	18fd      	adds	r5, r7, r3
 80951c4:	5cfb      	ldrb	r3, [r7, r3]
 80951c6:	2b2d      	cmp	r3, #45	; 0x2d
 80951c8:	d103      	bne.n	80951d2 <_tzset_unlocked_r+0x132>
 80951ca:	3501      	adds	r5, #1
 80951cc:	f04f 37ff 	mov.w	r7, #4294967295
 80951d0:	e003      	b.n	80951da <_tzset_unlocked_r+0x13a>
 80951d2:	2b2b      	cmp	r3, #43	; 0x2b
 80951d4:	bf08      	it	eq
 80951d6:	3501      	addeq	r5, #1
 80951d8:	2701      	movs	r7, #1
 80951da:	2300      	movs	r3, #0
 80951dc:	f8ad 301c 	strh.w	r3, [sp, #28]
 80951e0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80951e4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80951e8:	930a      	str	r3, [sp, #40]	; 0x28
 80951ea:	9603      	str	r6, [sp, #12]
 80951ec:	f8cd a008 	str.w	sl, [sp, #8]
 80951f0:	9601      	str	r6, [sp, #4]
 80951f2:	f8cd b000 	str.w	fp, [sp]
 80951f6:	4633      	mov	r3, r6
 80951f8:	aa07      	add	r2, sp, #28
 80951fa:	4965      	ldr	r1, [pc, #404]	; (8095390 <_tzset_unlocked_r+0x2f0>)
 80951fc:	4628      	mov	r0, r5
 80951fe:	f7fb ffc3 	bl	8091188 <siscanf>
 8095202:	2800      	cmp	r0, #0
 8095204:	dc04      	bgt.n	8095210 <_tzset_unlocked_r+0x170>
 8095206:	6a23      	ldr	r3, [r4, #32]
 8095208:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 809520c:	63e3      	str	r3, [r4, #60]	; 0x3c
 809520e:	e00e      	b.n	809522e <_tzset_unlocked_r+0x18e>
 8095210:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8095214:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8095218:	213c      	movs	r1, #60	; 0x3c
 809521a:	fb01 3302 	mla	r3, r1, r2, r3
 809521e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8095222:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8095226:	fb01 3302 	mla	r3, r1, r2, r3
 809522a:	435f      	muls	r7, r3
 809522c:	63e7      	str	r7, [r4, #60]	; 0x3c
 809522e:	4627      	mov	r7, r4
 8095230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8095232:	f04f 0900 	mov.w	r9, #0
 8095236:	441d      	add	r5, r3
 8095238:	782b      	ldrb	r3, [r5, #0]
 809523a:	2b2c      	cmp	r3, #44	; 0x2c
 809523c:	bf08      	it	eq
 809523e:	3501      	addeq	r5, #1
 8095240:	f895 8000 	ldrb.w	r8, [r5]
 8095244:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8095248:	d126      	bne.n	8095298 <_tzset_unlocked_r+0x1f8>
 809524a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 809524e:	9302      	str	r3, [sp, #8]
 8095250:	ab09      	add	r3, sp, #36	; 0x24
 8095252:	9300      	str	r3, [sp, #0]
 8095254:	9603      	str	r6, [sp, #12]
 8095256:	9601      	str	r6, [sp, #4]
 8095258:	4633      	mov	r3, r6
 809525a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 809525e:	494d      	ldr	r1, [pc, #308]	; (8095394 <_tzset_unlocked_r+0x2f4>)
 8095260:	4628      	mov	r0, r5
 8095262:	f7fb ff91 	bl	8091188 <siscanf>
 8095266:	2803      	cmp	r0, #3
 8095268:	d17e      	bne.n	8095368 <_tzset_unlocked_r+0x2c8>
 809526a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 809526e:	1e4b      	subs	r3, r1, #1
 8095270:	2b0b      	cmp	r3, #11
 8095272:	d879      	bhi.n	8095368 <_tzset_unlocked_r+0x2c8>
 8095274:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8095278:	1e53      	subs	r3, r2, #1
 809527a:	2b04      	cmp	r3, #4
 809527c:	d874      	bhi.n	8095368 <_tzset_unlocked_r+0x2c8>
 809527e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8095282:	2b06      	cmp	r3, #6
 8095284:	d870      	bhi.n	8095368 <_tzset_unlocked_r+0x2c8>
 8095286:	f887 8008 	strb.w	r8, [r7, #8]
 809528a:	60f9      	str	r1, [r7, #12]
 809528c:	613a      	str	r2, [r7, #16]
 809528e:	617b      	str	r3, [r7, #20]
 8095290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8095292:	eb05 0803 	add.w	r8, r5, r3
 8095296:	e02a      	b.n	80952ee <_tzset_unlocked_r+0x24e>
 8095298:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 809529c:	bf06      	itte	eq
 809529e:	4643      	moveq	r3, r8
 80952a0:	3501      	addeq	r5, #1
 80952a2:	2344      	movne	r3, #68	; 0x44
 80952a4:	220a      	movs	r2, #10
 80952a6:	a90b      	add	r1, sp, #44	; 0x2c
 80952a8:	4628      	mov	r0, r5
 80952aa:	9305      	str	r3, [sp, #20]
 80952ac:	f7ff fe36 	bl	8094f1c <strtoul>
 80952b0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80952b4:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80952b8:	4545      	cmp	r5, r8
 80952ba:	9b05      	ldr	r3, [sp, #20]
 80952bc:	d114      	bne.n	80952e8 <_tzset_unlocked_r+0x248>
 80952be:	234d      	movs	r3, #77	; 0x4d
 80952c0:	f1b9 0f00 	cmp.w	r9, #0
 80952c4:	d107      	bne.n	80952d6 <_tzset_unlocked_r+0x236>
 80952c6:	7223      	strb	r3, [r4, #8]
 80952c8:	2303      	movs	r3, #3
 80952ca:	60e3      	str	r3, [r4, #12]
 80952cc:	2302      	movs	r3, #2
 80952ce:	6123      	str	r3, [r4, #16]
 80952d0:	f8c4 9014 	str.w	r9, [r4, #20]
 80952d4:	e00b      	b.n	80952ee <_tzset_unlocked_r+0x24e>
 80952d6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80952da:	230b      	movs	r3, #11
 80952dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80952de:	2301      	movs	r3, #1
 80952e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80952e2:	2300      	movs	r3, #0
 80952e4:	6323      	str	r3, [r4, #48]	; 0x30
 80952e6:	e002      	b.n	80952ee <_tzset_unlocked_r+0x24e>
 80952e8:	b280      	uxth	r0, r0
 80952ea:	723b      	strb	r3, [r7, #8]
 80952ec:	6178      	str	r0, [r7, #20]
 80952ee:	2302      	movs	r3, #2
 80952f0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80952f4:	2300      	movs	r3, #0
 80952f6:	f8ad 301e 	strh.w	r3, [sp, #30]
 80952fa:	f8ad 3020 	strh.w	r3, [sp, #32]
 80952fe:	930a      	str	r3, [sp, #40]	; 0x28
 8095300:	f898 3000 	ldrb.w	r3, [r8]
 8095304:	2b2f      	cmp	r3, #47	; 0x2f
 8095306:	d10b      	bne.n	8095320 <_tzset_unlocked_r+0x280>
 8095308:	9603      	str	r6, [sp, #12]
 809530a:	f8cd a008 	str.w	sl, [sp, #8]
 809530e:	9601      	str	r6, [sp, #4]
 8095310:	f8cd b000 	str.w	fp, [sp]
 8095314:	4633      	mov	r3, r6
 8095316:	aa07      	add	r2, sp, #28
 8095318:	491f      	ldr	r1, [pc, #124]	; (8095398 <_tzset_unlocked_r+0x2f8>)
 809531a:	4640      	mov	r0, r8
 809531c:	f7fb ff34 	bl	8091188 <siscanf>
 8095320:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8095324:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8095328:	213c      	movs	r1, #60	; 0x3c
 809532a:	fb01 3302 	mla	r3, r1, r2, r3
 809532e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8095332:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8095336:	fb01 3302 	mla	r3, r1, r2, r3
 809533a:	61bb      	str	r3, [r7, #24]
 809533c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 809533e:	f109 0901 	add.w	r9, r9, #1
 8095342:	f1b9 0f02 	cmp.w	r9, #2
 8095346:	4445      	add	r5, r8
 8095348:	f107 071c 	add.w	r7, r7, #28
 809534c:	f47f af74 	bne.w	8095238 <_tzset_unlocked_r+0x198>
 8095350:	6860      	ldr	r0, [r4, #4]
 8095352:	f7ff fdf5 	bl	8094f40 <__tzcalc_limits>
 8095356:	6a22      	ldr	r2, [r4, #32]
 8095358:	4b07      	ldr	r3, [pc, #28]	; (8095378 <_tzset_unlocked_r+0x2d8>)
 809535a:	601a      	str	r2, [r3, #0]
 809535c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 809535e:	1a9b      	subs	r3, r3, r2
 8095360:	4a07      	ldr	r2, [pc, #28]	; (8095380 <_tzset_unlocked_r+0x2e0>)
 8095362:	bf18      	it	ne
 8095364:	2301      	movne	r3, #1
 8095366:	6013      	str	r3, [r2, #0]
 8095368:	b00d      	add	sp, #52	; 0x34
 809536a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 809536e:	bf00      	nop
 8095370:	08099fe8 	.word	0x08099fe8
 8095374:	20004030 	.word	0x20004030
 8095378:	20004038 	.word	0x20004038
 809537c:	08099feb 	.word	0x08099feb
 8095380:	20004034 	.word	0x20004034
 8095384:	200004e8 	.word	0x200004e8
 8095388:	20004023 	.word	0x20004023
 809538c:	08099fef 	.word	0x08099fef
 8095390:	0809a012 	.word	0x0809a012
 8095394:	08099ffe 	.word	0x08099ffe
 8095398:	0809a011 	.word	0x0809a011
 809539c:	20004018 	.word	0x20004018

080953a0 <rshift>:
 80953a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80953a2:	6906      	ldr	r6, [r0, #16]
 80953a4:	114b      	asrs	r3, r1, #5
 80953a6:	42b3      	cmp	r3, r6
 80953a8:	f100 0514 	add.w	r5, r0, #20
 80953ac:	da27      	bge.n	80953fe <rshift+0x5e>
 80953ae:	f011 011f 	ands.w	r1, r1, #31
 80953b2:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 80953b6:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80953ba:	d101      	bne.n	80953c0 <rshift+0x20>
 80953bc:	4629      	mov	r1, r5
 80953be:	e016      	b.n	80953ee <rshift+0x4e>
 80953c0:	1d14      	adds	r4, r2, #4
 80953c2:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 80953c6:	462b      	mov	r3, r5
 80953c8:	f1c1 0e20 	rsb	lr, r1, #32
 80953cc:	40ca      	lsrs	r2, r1
 80953ce:	42b4      	cmp	r4, r6
 80953d0:	d209      	bcs.n	80953e6 <rshift+0x46>
 80953d2:	6827      	ldr	r7, [r4, #0]
 80953d4:	fa07 f70e 	lsl.w	r7, r7, lr
 80953d8:	433a      	orrs	r2, r7
 80953da:	f843 2b04 	str.w	r2, [r3], #4
 80953de:	f854 2b04 	ldr.w	r2, [r4], #4
 80953e2:	40ca      	lsrs	r2, r1
 80953e4:	e7f3      	b.n	80953ce <rshift+0x2e>
 80953e6:	601a      	str	r2, [r3, #0]
 80953e8:	b152      	cbz	r2, 8095400 <rshift+0x60>
 80953ea:	3304      	adds	r3, #4
 80953ec:	e008      	b.n	8095400 <rshift+0x60>
 80953ee:	42b2      	cmp	r2, r6
 80953f0:	460b      	mov	r3, r1
 80953f2:	d205      	bcs.n	8095400 <rshift+0x60>
 80953f4:	f852 3b04 	ldr.w	r3, [r2], #4
 80953f8:	f841 3b04 	str.w	r3, [r1], #4
 80953fc:	e7f7      	b.n	80953ee <rshift+0x4e>
 80953fe:	462b      	mov	r3, r5
 8095400:	1b5b      	subs	r3, r3, r5
 8095402:	109b      	asrs	r3, r3, #2
 8095404:	6103      	str	r3, [r0, #16]
 8095406:	b903      	cbnz	r3, 809540a <rshift+0x6a>
 8095408:	6143      	str	r3, [r0, #20]
 809540a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0809540c <__hexdig_fun>:
 809540c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8095410:	2b09      	cmp	r3, #9
 8095412:	d801      	bhi.n	8095418 <__hexdig_fun+0xc>
 8095414:	3820      	subs	r0, #32
 8095416:	e00a      	b.n	809542e <__hexdig_fun+0x22>
 8095418:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 809541c:	2b05      	cmp	r3, #5
 809541e:	d801      	bhi.n	8095424 <__hexdig_fun+0x18>
 8095420:	3847      	subs	r0, #71	; 0x47
 8095422:	e004      	b.n	809542e <__hexdig_fun+0x22>
 8095424:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8095428:	2b05      	cmp	r3, #5
 809542a:	d802      	bhi.n	8095432 <__hexdig_fun+0x26>
 809542c:	3827      	subs	r0, #39	; 0x27
 809542e:	b2c0      	uxtb	r0, r0
 8095430:	4770      	bx	lr
 8095432:	2000      	movs	r0, #0
 8095434:	4770      	bx	lr

08095436 <__gethex>:
 8095436:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 809543a:	b08b      	sub	sp, #44	; 0x2c
 809543c:	468a      	mov	sl, r1
 809543e:	4690      	mov	r8, r2
 8095440:	9306      	str	r3, [sp, #24]
 8095442:	9002      	str	r0, [sp, #8]
 8095444:	f7fe fd7a 	bl	8093f3c <_localeconv_r>
 8095448:	6803      	ldr	r3, [r0, #0]
 809544a:	f04f 0b00 	mov.w	fp, #0
 809544e:	4618      	mov	r0, r3
 8095450:	9303      	str	r3, [sp, #12]
 8095452:	f7fe fde2 	bl	809401a <strlen>
 8095456:	9b03      	ldr	r3, [sp, #12]
 8095458:	9001      	str	r0, [sp, #4]
 809545a:	4403      	add	r3, r0
 809545c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8095460:	9307      	str	r3, [sp, #28]
 8095462:	f8da 3000 	ldr.w	r3, [sl]
 8095466:	3302      	adds	r3, #2
 8095468:	461f      	mov	r7, r3
 809546a:	f813 0b01 	ldrb.w	r0, [r3], #1
 809546e:	2830      	cmp	r0, #48	; 0x30
 8095470:	d102      	bne.n	8095478 <__gethex+0x42>
 8095472:	f10b 0b01 	add.w	fp, fp, #1
 8095476:	e7f7      	b.n	8095468 <__gethex+0x32>
 8095478:	f7ff ffc8 	bl	809540c <__hexdig_fun>
 809547c:	4604      	mov	r4, r0
 809547e:	b9e0      	cbnz	r0, 80954ba <__gethex+0x84>
 8095480:	9a01      	ldr	r2, [sp, #4]
 8095482:	9903      	ldr	r1, [sp, #12]
 8095484:	4638      	mov	r0, r7
 8095486:	f7fe fdd0 	bl	809402a <strncmp>
 809548a:	2800      	cmp	r0, #0
 809548c:	d134      	bne.n	80954f8 <__gethex+0xc2>
 809548e:	9b01      	ldr	r3, [sp, #4]
 8095490:	5cf8      	ldrb	r0, [r7, r3]
 8095492:	18fe      	adds	r6, r7, r3
 8095494:	f7ff ffba 	bl	809540c <__hexdig_fun>
 8095498:	b380      	cbz	r0, 80954fc <__gethex+0xc6>
 809549a:	4633      	mov	r3, r6
 809549c:	7818      	ldrb	r0, [r3, #0]
 809549e:	461f      	mov	r7, r3
 80954a0:	2830      	cmp	r0, #48	; 0x30
 80954a2:	f103 0301 	add.w	r3, r3, #1
 80954a6:	d0f9      	beq.n	809549c <__gethex+0x66>
 80954a8:	f7ff ffb0 	bl	809540c <__hexdig_fun>
 80954ac:	fab0 f580 	clz	r5, r0
 80954b0:	4634      	mov	r4, r6
 80954b2:	096d      	lsrs	r5, r5, #5
 80954b4:	f04f 0b01 	mov.w	fp, #1
 80954b8:	e001      	b.n	80954be <__gethex+0x88>
 80954ba:	2500      	movs	r5, #0
 80954bc:	462c      	mov	r4, r5
 80954be:	463a      	mov	r2, r7
 80954c0:	4616      	mov	r6, r2
 80954c2:	7830      	ldrb	r0, [r6, #0]
 80954c4:	3201      	adds	r2, #1
 80954c6:	f7ff ffa1 	bl	809540c <__hexdig_fun>
 80954ca:	2800      	cmp	r0, #0
 80954cc:	d1f8      	bne.n	80954c0 <__gethex+0x8a>
 80954ce:	9a01      	ldr	r2, [sp, #4]
 80954d0:	9903      	ldr	r1, [sp, #12]
 80954d2:	4630      	mov	r0, r6
 80954d4:	f7fe fda9 	bl	809402a <strncmp>
 80954d8:	b950      	cbnz	r0, 80954f0 <__gethex+0xba>
 80954da:	b954      	cbnz	r4, 80954f2 <__gethex+0xbc>
 80954dc:	9b01      	ldr	r3, [sp, #4]
 80954de:	18f4      	adds	r4, r6, r3
 80954e0:	4622      	mov	r2, r4
 80954e2:	4616      	mov	r6, r2
 80954e4:	7830      	ldrb	r0, [r6, #0]
 80954e6:	3201      	adds	r2, #1
 80954e8:	f7ff ff90 	bl	809540c <__hexdig_fun>
 80954ec:	2800      	cmp	r0, #0
 80954ee:	d1f8      	bne.n	80954e2 <__gethex+0xac>
 80954f0:	b134      	cbz	r4, 8095500 <__gethex+0xca>
 80954f2:	1ba4      	subs	r4, r4, r6
 80954f4:	00a4      	lsls	r4, r4, #2
 80954f6:	e003      	b.n	8095500 <__gethex+0xca>
 80954f8:	463e      	mov	r6, r7
 80954fa:	e000      	b.n	80954fe <__gethex+0xc8>
 80954fc:	4604      	mov	r4, r0
 80954fe:	2501      	movs	r5, #1
 8095500:	7833      	ldrb	r3, [r6, #0]
 8095502:	2b50      	cmp	r3, #80	; 0x50
 8095504:	d001      	beq.n	809550a <__gethex+0xd4>
 8095506:	2b70      	cmp	r3, #112	; 0x70
 8095508:	d12a      	bne.n	8095560 <__gethex+0x12a>
 809550a:	7873      	ldrb	r3, [r6, #1]
 809550c:	2b2b      	cmp	r3, #43	; 0x2b
 809550e:	d008      	beq.n	8095522 <__gethex+0xec>
 8095510:	2b2d      	cmp	r3, #45	; 0x2d
 8095512:	d003      	beq.n	809551c <__gethex+0xe6>
 8095514:	1c71      	adds	r1, r6, #1
 8095516:	f04f 0900 	mov.w	r9, #0
 809551a:	e005      	b.n	8095528 <__gethex+0xf2>
 809551c:	f04f 0901 	mov.w	r9, #1
 8095520:	e001      	b.n	8095526 <__gethex+0xf0>
 8095522:	f04f 0900 	mov.w	r9, #0
 8095526:	1cb1      	adds	r1, r6, #2
 8095528:	7808      	ldrb	r0, [r1, #0]
 809552a:	f7ff ff6f 	bl	809540c <__hexdig_fun>
 809552e:	1e43      	subs	r3, r0, #1
 8095530:	b2db      	uxtb	r3, r3
 8095532:	2b18      	cmp	r3, #24
 8095534:	d814      	bhi.n	8095560 <__gethex+0x12a>
 8095536:	f1a0 0210 	sub.w	r2, r0, #16
 809553a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 809553e:	f7ff ff65 	bl	809540c <__hexdig_fun>
 8095542:	1e43      	subs	r3, r0, #1
 8095544:	b2db      	uxtb	r3, r3
 8095546:	2b18      	cmp	r3, #24
 8095548:	d804      	bhi.n	8095554 <__gethex+0x11e>
 809554a:	230a      	movs	r3, #10
 809554c:	fb03 0202 	mla	r2, r3, r2, r0
 8095550:	3a10      	subs	r2, #16
 8095552:	e7f2      	b.n	809553a <__gethex+0x104>
 8095554:	f1b9 0f00 	cmp.w	r9, #0
 8095558:	d000      	beq.n	809555c <__gethex+0x126>
 809555a:	4252      	negs	r2, r2
 809555c:	4414      	add	r4, r2
 809555e:	e000      	b.n	8095562 <__gethex+0x12c>
 8095560:	4631      	mov	r1, r6
 8095562:	f8ca 1000 	str.w	r1, [sl]
 8095566:	b12d      	cbz	r5, 8095574 <__gethex+0x13e>
 8095568:	f1bb 0f00 	cmp.w	fp, #0
 809556c:	bf14      	ite	ne
 809556e:	2000      	movne	r0, #0
 8095570:	2006      	moveq	r0, #6
 8095572:	e17c      	b.n	809586e <__gethex+0x438>
 8095574:	4629      	mov	r1, r5
 8095576:	1bf3      	subs	r3, r6, r7
 8095578:	3b01      	subs	r3, #1
 809557a:	2b07      	cmp	r3, #7
 809557c:	dd02      	ble.n	8095584 <__gethex+0x14e>
 809557e:	3101      	adds	r1, #1
 8095580:	105b      	asrs	r3, r3, #1
 8095582:	e7fa      	b.n	809557a <__gethex+0x144>
 8095584:	9802      	ldr	r0, [sp, #8]
 8095586:	f000 fb19 	bl	8095bbc <_Balloc>
 809558a:	f04f 0900 	mov.w	r9, #0
 809558e:	4605      	mov	r5, r0
 8095590:	46cb      	mov	fp, r9
 8095592:	9b01      	ldr	r3, [sp, #4]
 8095594:	f100 0a14 	add.w	sl, r0, #20
 8095598:	f1c3 0301 	rsb	r3, r3, #1
 809559c:	f8cd a010 	str.w	sl, [sp, #16]
 80955a0:	9308      	str	r3, [sp, #32]
 80955a2:	42b7      	cmp	r7, r6
 80955a4:	d22f      	bcs.n	8095606 <__gethex+0x1d0>
 80955a6:	1e73      	subs	r3, r6, #1
 80955a8:	9305      	str	r3, [sp, #20]
 80955aa:	9a07      	ldr	r2, [sp, #28]
 80955ac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80955b0:	4293      	cmp	r3, r2
 80955b2:	d00b      	beq.n	80955cc <__gethex+0x196>
 80955b4:	f1bb 0f20 	cmp.w	fp, #32
 80955b8:	d116      	bne.n	80955e8 <__gethex+0x1b2>
 80955ba:	9b04      	ldr	r3, [sp, #16]
 80955bc:	f8c3 9000 	str.w	r9, [r3]
 80955c0:	3304      	adds	r3, #4
 80955c2:	f04f 0900 	mov.w	r9, #0
 80955c6:	9304      	str	r3, [sp, #16]
 80955c8:	46cb      	mov	fp, r9
 80955ca:	e00d      	b.n	80955e8 <__gethex+0x1b2>
 80955cc:	9b05      	ldr	r3, [sp, #20]
 80955ce:	9a08      	ldr	r2, [sp, #32]
 80955d0:	4413      	add	r3, r2
 80955d2:	429f      	cmp	r7, r3
 80955d4:	d8ee      	bhi.n	80955b4 <__gethex+0x17e>
 80955d6:	4618      	mov	r0, r3
 80955d8:	9a01      	ldr	r2, [sp, #4]
 80955da:	9903      	ldr	r1, [sp, #12]
 80955dc:	9309      	str	r3, [sp, #36]	; 0x24
 80955de:	f7fe fd24 	bl	809402a <strncmp>
 80955e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80955e4:	b168      	cbz	r0, 8095602 <__gethex+0x1cc>
 80955e6:	e7e5      	b.n	80955b4 <__gethex+0x17e>
 80955e8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80955ec:	f7ff ff0e 	bl	809540c <__hexdig_fun>
 80955f0:	f000 000f 	and.w	r0, r0, #15
 80955f4:	fa00 f00b 	lsl.w	r0, r0, fp
 80955f8:	9b05      	ldr	r3, [sp, #20]
 80955fa:	ea49 0900 	orr.w	r9, r9, r0
 80955fe:	f10b 0b04 	add.w	fp, fp, #4
 8095602:	461e      	mov	r6, r3
 8095604:	e7cd      	b.n	80955a2 <__gethex+0x16c>
 8095606:	9804      	ldr	r0, [sp, #16]
 8095608:	f840 9b04 	str.w	r9, [r0], #4
 809560c:	ebca 0000 	rsb	r0, sl, r0
 8095610:	1080      	asrs	r0, r0, #2
 8095612:	6128      	str	r0, [r5, #16]
 8095614:	0147      	lsls	r7, r0, #5
 8095616:	4648      	mov	r0, r9
 8095618:	f000 fb95 	bl	8095d46 <__hi0bits>
 809561c:	f8d8 6000 	ldr.w	r6, [r8]
 8095620:	1a38      	subs	r0, r7, r0
 8095622:	42b0      	cmp	r0, r6
 8095624:	dd26      	ble.n	8095674 <__gethex+0x23e>
 8095626:	1b87      	subs	r7, r0, r6
 8095628:	4639      	mov	r1, r7
 809562a:	4628      	mov	r0, r5
 809562c:	f000 fe8d 	bl	809634a <__any_on>
 8095630:	b1c8      	cbz	r0, 8095666 <__gethex+0x230>
 8095632:	1e7b      	subs	r3, r7, #1
 8095634:	1159      	asrs	r1, r3, #5
 8095636:	f003 021f 	and.w	r2, r3, #31
 809563a:	f04f 0901 	mov.w	r9, #1
 809563e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8095642:	fa09 f202 	lsl.w	r2, r9, r2
 8095646:	420a      	tst	r2, r1
 8095648:	d00e      	beq.n	8095668 <__gethex+0x232>
 809564a:	454b      	cmp	r3, r9
 809564c:	dc02      	bgt.n	8095654 <__gethex+0x21e>
 809564e:	f04f 0902 	mov.w	r9, #2
 8095652:	e009      	b.n	8095668 <__gethex+0x232>
 8095654:	1eb9      	subs	r1, r7, #2
 8095656:	4628      	mov	r0, r5
 8095658:	f000 fe77 	bl	809634a <__any_on>
 809565c:	2800      	cmp	r0, #0
 809565e:	d0f6      	beq.n	809564e <__gethex+0x218>
 8095660:	f04f 0903 	mov.w	r9, #3
 8095664:	e000      	b.n	8095668 <__gethex+0x232>
 8095666:	4681      	mov	r9, r0
 8095668:	4639      	mov	r1, r7
 809566a:	4628      	mov	r0, r5
 809566c:	f7ff fe98 	bl	80953a0 <rshift>
 8095670:	443c      	add	r4, r7
 8095672:	e00c      	b.n	809568e <__gethex+0x258>
 8095674:	da09      	bge.n	809568a <__gethex+0x254>
 8095676:	1a37      	subs	r7, r6, r0
 8095678:	4629      	mov	r1, r5
 809567a:	463a      	mov	r2, r7
 809567c:	9802      	ldr	r0, [sp, #8]
 809567e:	f000 fc97 	bl	8095fb0 <__lshift>
 8095682:	4605      	mov	r5, r0
 8095684:	1be4      	subs	r4, r4, r7
 8095686:	f100 0a14 	add.w	sl, r0, #20
 809568a:	f04f 0900 	mov.w	r9, #0
 809568e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8095692:	429c      	cmp	r4, r3
 8095694:	dd08      	ble.n	80956a8 <__gethex+0x272>
 8095696:	9802      	ldr	r0, [sp, #8]
 8095698:	4629      	mov	r1, r5
 809569a:	f000 fac4 	bl	8095c26 <_Bfree>
 809569e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80956a0:	2300      	movs	r3, #0
 80956a2:	6013      	str	r3, [r2, #0]
 80956a4:	20a3      	movs	r0, #163	; 0xa3
 80956a6:	e0e2      	b.n	809586e <__gethex+0x438>
 80956a8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80956ac:	4284      	cmp	r4, r0
 80956ae:	da53      	bge.n	8095758 <__gethex+0x322>
 80956b0:	1b04      	subs	r4, r0, r4
 80956b2:	42a6      	cmp	r6, r4
 80956b4:	dc2e      	bgt.n	8095714 <__gethex+0x2de>
 80956b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80956ba:	2b02      	cmp	r3, #2
 80956bc:	d01a      	beq.n	80956f4 <__gethex+0x2be>
 80956be:	2b03      	cmp	r3, #3
 80956c0:	d01c      	beq.n	80956fc <__gethex+0x2c6>
 80956c2:	2b01      	cmp	r3, #1
 80956c4:	d11d      	bne.n	8095702 <__gethex+0x2cc>
 80956c6:	42a6      	cmp	r6, r4
 80956c8:	d11b      	bne.n	8095702 <__gethex+0x2cc>
 80956ca:	2e01      	cmp	r6, #1
 80956cc:	dc0b      	bgt.n	80956e6 <__gethex+0x2b0>
 80956ce:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80956d2:	9a06      	ldr	r2, [sp, #24]
 80956d4:	2062      	movs	r0, #98	; 0x62
 80956d6:	6013      	str	r3, [r2, #0]
 80956d8:	2301      	movs	r3, #1
 80956da:	612b      	str	r3, [r5, #16]
 80956dc:	f8ca 3000 	str.w	r3, [sl]
 80956e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80956e2:	601d      	str	r5, [r3, #0]
 80956e4:	e0c3      	b.n	809586e <__gethex+0x438>
 80956e6:	1e71      	subs	r1, r6, #1
 80956e8:	4628      	mov	r0, r5
 80956ea:	f000 fe2e 	bl	809634a <__any_on>
 80956ee:	2800      	cmp	r0, #0
 80956f0:	d1ed      	bne.n	80956ce <__gethex+0x298>
 80956f2:	e006      	b.n	8095702 <__gethex+0x2cc>
 80956f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80956f6:	2b00      	cmp	r3, #0
 80956f8:	d0e9      	beq.n	80956ce <__gethex+0x298>
 80956fa:	e002      	b.n	8095702 <__gethex+0x2cc>
 80956fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80956fe:	2b00      	cmp	r3, #0
 8095700:	d1e5      	bne.n	80956ce <__gethex+0x298>
 8095702:	9802      	ldr	r0, [sp, #8]
 8095704:	4629      	mov	r1, r5
 8095706:	f000 fa8e 	bl	8095c26 <_Bfree>
 809570a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 809570c:	2300      	movs	r3, #0
 809570e:	6013      	str	r3, [r2, #0]
 8095710:	2050      	movs	r0, #80	; 0x50
 8095712:	e0ac      	b.n	809586e <__gethex+0x438>
 8095714:	1e67      	subs	r7, r4, #1
 8095716:	f1b9 0f00 	cmp.w	r9, #0
 809571a:	d106      	bne.n	809572a <__gethex+0x2f4>
 809571c:	b13f      	cbz	r7, 809572e <__gethex+0x2f8>
 809571e:	4639      	mov	r1, r7
 8095720:	4628      	mov	r0, r5
 8095722:	f000 fe12 	bl	809634a <__any_on>
 8095726:	4681      	mov	r9, r0
 8095728:	e001      	b.n	809572e <__gethex+0x2f8>
 809572a:	f04f 0901 	mov.w	r9, #1
 809572e:	117a      	asrs	r2, r7, #5
 8095730:	2301      	movs	r3, #1
 8095732:	f007 071f 	and.w	r7, r7, #31
 8095736:	fa03 f707 	lsl.w	r7, r3, r7
 809573a:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 809573e:	4621      	mov	r1, r4
 8095740:	421f      	tst	r7, r3
 8095742:	4628      	mov	r0, r5
 8095744:	bf18      	it	ne
 8095746:	f049 0902 	orrne.w	r9, r9, #2
 809574a:	1b36      	subs	r6, r6, r4
 809574c:	f7ff fe28 	bl	80953a0 <rshift>
 8095750:	2702      	movs	r7, #2
 8095752:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8095756:	e000      	b.n	809575a <__gethex+0x324>
 8095758:	2701      	movs	r7, #1
 809575a:	f1b9 0f00 	cmp.w	r9, #0
 809575e:	f000 8081 	beq.w	8095864 <__gethex+0x42e>
 8095762:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8095766:	2b02      	cmp	r3, #2
 8095768:	d00e      	beq.n	8095788 <__gethex+0x352>
 809576a:	2b03      	cmp	r3, #3
 809576c:	d010      	beq.n	8095790 <__gethex+0x35a>
 809576e:	2b01      	cmp	r3, #1
 8095770:	d176      	bne.n	8095860 <__gethex+0x42a>
 8095772:	f019 0f02 	tst.w	r9, #2
 8095776:	d073      	beq.n	8095860 <__gethex+0x42a>
 8095778:	f8da 0000 	ldr.w	r0, [sl]
 809577c:	ea49 0900 	orr.w	r9, r9, r0
 8095780:	f019 0f01 	tst.w	r9, #1
 8095784:	d107      	bne.n	8095796 <__gethex+0x360>
 8095786:	e06b      	b.n	8095860 <__gethex+0x42a>
 8095788:	9b15      	ldr	r3, [sp, #84]	; 0x54
 809578a:	f1c3 0301 	rsb	r3, r3, #1
 809578e:	9315      	str	r3, [sp, #84]	; 0x54
 8095790:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8095792:	2b00      	cmp	r3, #0
 8095794:	d064      	beq.n	8095860 <__gethex+0x42a>
 8095796:	f8d5 a010 	ldr.w	sl, [r5, #16]
 809579a:	f105 0314 	add.w	r3, r5, #20
 809579e:	ea4f 098a 	mov.w	r9, sl, lsl #2
 80957a2:	eb03 0109 	add.w	r1, r3, r9
 80957a6:	2000      	movs	r0, #0
 80957a8:	681a      	ldr	r2, [r3, #0]
 80957aa:	f1b2 3fff 	cmp.w	r2, #4294967295
 80957ae:	d002      	beq.n	80957b6 <__gethex+0x380>
 80957b0:	3201      	adds	r2, #1
 80957b2:	601a      	str	r2, [r3, #0]
 80957b4:	e020      	b.n	80957f8 <__gethex+0x3c2>
 80957b6:	f843 0b04 	str.w	r0, [r3], #4
 80957ba:	4299      	cmp	r1, r3
 80957bc:	d8f4      	bhi.n	80957a8 <__gethex+0x372>
 80957be:	68ab      	ldr	r3, [r5, #8]
 80957c0:	459a      	cmp	sl, r3
 80957c2:	db12      	blt.n	80957ea <__gethex+0x3b4>
 80957c4:	6869      	ldr	r1, [r5, #4]
 80957c6:	9802      	ldr	r0, [sp, #8]
 80957c8:	3101      	adds	r1, #1
 80957ca:	f000 f9f7 	bl	8095bbc <_Balloc>
 80957ce:	4683      	mov	fp, r0
 80957d0:	692a      	ldr	r2, [r5, #16]
 80957d2:	f105 010c 	add.w	r1, r5, #12
 80957d6:	3202      	adds	r2, #2
 80957d8:	0092      	lsls	r2, r2, #2
 80957da:	300c      	adds	r0, #12
 80957dc:	f7fe fbc1 	bl	8093f62 <memcpy>
 80957e0:	4629      	mov	r1, r5
 80957e2:	9802      	ldr	r0, [sp, #8]
 80957e4:	f000 fa1f 	bl	8095c26 <_Bfree>
 80957e8:	465d      	mov	r5, fp
 80957ea:	692b      	ldr	r3, [r5, #16]
 80957ec:	1c5a      	adds	r2, r3, #1
 80957ee:	612a      	str	r2, [r5, #16]
 80957f0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80957f4:	2201      	movs	r2, #1
 80957f6:	615a      	str	r2, [r3, #20]
 80957f8:	2f02      	cmp	r7, #2
 80957fa:	f105 0214 	add.w	r2, r5, #20
 80957fe:	d111      	bne.n	8095824 <__gethex+0x3ee>
 8095800:	f8d8 3000 	ldr.w	r3, [r8]
 8095804:	3b01      	subs	r3, #1
 8095806:	429e      	cmp	r6, r3
 8095808:	d127      	bne.n	809585a <__gethex+0x424>
 809580a:	1171      	asrs	r1, r6, #5
 809580c:	2301      	movs	r3, #1
 809580e:	f006 061f 	and.w	r6, r6, #31
 8095812:	fa03 f606 	lsl.w	r6, r3, r6
 8095816:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 809581a:	421e      	tst	r6, r3
 809581c:	bf0c      	ite	eq
 809581e:	2702      	moveq	r7, #2
 8095820:	2701      	movne	r7, #1
 8095822:	e01a      	b.n	809585a <__gethex+0x424>
 8095824:	692b      	ldr	r3, [r5, #16]
 8095826:	459a      	cmp	sl, r3
 8095828:	da0a      	bge.n	8095840 <__gethex+0x40a>
 809582a:	2101      	movs	r1, #1
 809582c:	4628      	mov	r0, r5
 809582e:	f7ff fdb7 	bl	80953a0 <rshift>
 8095832:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8095836:	3401      	adds	r4, #1
 8095838:	429c      	cmp	r4, r3
 809583a:	f73f af2c 	bgt.w	8095696 <__gethex+0x260>
 809583e:	e00b      	b.n	8095858 <__gethex+0x422>
 8095840:	f016 061f 	ands.w	r6, r6, #31
 8095844:	d008      	beq.n	8095858 <__gethex+0x422>
 8095846:	4491      	add	r9, r2
 8095848:	f859 0c04 	ldr.w	r0, [r9, #-4]
 809584c:	f000 fa7b 	bl	8095d46 <__hi0bits>
 8095850:	f1c6 0620 	rsb	r6, r6, #32
 8095854:	42b0      	cmp	r0, r6
 8095856:	dbe8      	blt.n	809582a <__gethex+0x3f4>
 8095858:	2701      	movs	r7, #1
 809585a:	f047 0720 	orr.w	r7, r7, #32
 809585e:	e001      	b.n	8095864 <__gethex+0x42e>
 8095860:	f047 0710 	orr.w	r7, r7, #16
 8095864:	4638      	mov	r0, r7
 8095866:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8095868:	601d      	str	r5, [r3, #0]
 809586a:	9b06      	ldr	r3, [sp, #24]
 809586c:	601c      	str	r4, [r3, #0]
 809586e:	b00b      	add	sp, #44	; 0x2c
 8095870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08095874 <L_shift>:
 8095874:	f1c2 0208 	rsb	r2, r2, #8
 8095878:	0092      	lsls	r2, r2, #2
 809587a:	b570      	push	{r4, r5, r6, lr}
 809587c:	f1c2 0620 	rsb	r6, r2, #32
 8095880:	6843      	ldr	r3, [r0, #4]
 8095882:	6805      	ldr	r5, [r0, #0]
 8095884:	fa03 f406 	lsl.w	r4, r3, r6
 8095888:	432c      	orrs	r4, r5
 809588a:	40d3      	lsrs	r3, r2
 809588c:	6004      	str	r4, [r0, #0]
 809588e:	f840 3f04 	str.w	r3, [r0, #4]!
 8095892:	4288      	cmp	r0, r1
 8095894:	d3f4      	bcc.n	8095880 <L_shift+0xc>
 8095896:	bd70      	pop	{r4, r5, r6, pc}

08095898 <__match>:
 8095898:	b530      	push	{r4, r5, lr}
 809589a:	6803      	ldr	r3, [r0, #0]
 809589c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80958a0:	3301      	adds	r3, #1
 80958a2:	b14c      	cbz	r4, 80958b8 <__match+0x20>
 80958a4:	781a      	ldrb	r2, [r3, #0]
 80958a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80958aa:	2d19      	cmp	r5, #25
 80958ac:	bf98      	it	ls
 80958ae:	3220      	addls	r2, #32
 80958b0:	42a2      	cmp	r2, r4
 80958b2:	d0f3      	beq.n	809589c <__match+0x4>
 80958b4:	2000      	movs	r0, #0
 80958b6:	bd30      	pop	{r4, r5, pc}
 80958b8:	6003      	str	r3, [r0, #0]
 80958ba:	2001      	movs	r0, #1
 80958bc:	bd30      	pop	{r4, r5, pc}

080958be <__hexnan>:
 80958be:	680b      	ldr	r3, [r1, #0]
 80958c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80958c4:	115e      	asrs	r6, r3, #5
 80958c6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80958ca:	f013 031f 	ands.w	r3, r3, #31
 80958ce:	bf18      	it	ne
 80958d0:	3604      	addne	r6, #4
 80958d2:	1f35      	subs	r5, r6, #4
 80958d4:	4617      	mov	r7, r2
 80958d6:	2200      	movs	r2, #0
 80958d8:	4682      	mov	sl, r0
 80958da:	46a8      	mov	r8, r5
 80958dc:	462c      	mov	r4, r5
 80958de:	4691      	mov	r9, r2
 80958e0:	b085      	sub	sp, #20
 80958e2:	f8d0 b000 	ldr.w	fp, [r0]
 80958e6:	9301      	str	r3, [sp, #4]
 80958e8:	f846 2c04 	str.w	r2, [r6, #-4]
 80958ec:	9200      	str	r2, [sp, #0]
 80958ee:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 80958f2:	2900      	cmp	r1, #0
 80958f4:	d03c      	beq.n	8095970 <__hexnan+0xb2>
 80958f6:	4608      	mov	r0, r1
 80958f8:	9203      	str	r2, [sp, #12]
 80958fa:	9102      	str	r1, [sp, #8]
 80958fc:	f7ff fd86 	bl	809540c <__hexdig_fun>
 8095900:	9a03      	ldr	r2, [sp, #12]
 8095902:	bb00      	cbnz	r0, 8095946 <__hexnan+0x88>
 8095904:	9902      	ldr	r1, [sp, #8]
 8095906:	2920      	cmp	r1, #32
 8095908:	d816      	bhi.n	8095938 <__hexnan+0x7a>
 809590a:	9b00      	ldr	r3, [sp, #0]
 809590c:	4599      	cmp	r9, r3
 809590e:	ddee      	ble.n	80958ee <__hexnan+0x30>
 8095910:	4544      	cmp	r4, r8
 8095912:	d205      	bcs.n	8095920 <__hexnan+0x62>
 8095914:	2a07      	cmp	r2, #7
 8095916:	dc03      	bgt.n	8095920 <__hexnan+0x62>
 8095918:	4641      	mov	r1, r8
 809591a:	4620      	mov	r0, r4
 809591c:	f7ff ffaa 	bl	8095874 <L_shift>
 8095920:	42bc      	cmp	r4, r7
 8095922:	d923      	bls.n	809596c <__hexnan+0xae>
 8095924:	2300      	movs	r3, #0
 8095926:	f1a4 0804 	sub.w	r8, r4, #4
 809592a:	f844 3c04 	str.w	r3, [r4, #-4]
 809592e:	f8cd 9000 	str.w	r9, [sp]
 8095932:	4644      	mov	r4, r8
 8095934:	461a      	mov	r2, r3
 8095936:	e7da      	b.n	80958ee <__hexnan+0x30>
 8095938:	2929      	cmp	r1, #41	; 0x29
 809593a:	d148      	bne.n	80959ce <__hexnan+0x110>
 809593c:	f10b 0301 	add.w	r3, fp, #1
 8095940:	f8ca 3000 	str.w	r3, [sl]
 8095944:	e014      	b.n	8095970 <__hexnan+0xb2>
 8095946:	3201      	adds	r2, #1
 8095948:	2a08      	cmp	r2, #8
 809594a:	f109 0901 	add.w	r9, r9, #1
 809594e:	dd06      	ble.n	809595e <__hexnan+0xa0>
 8095950:	42bc      	cmp	r4, r7
 8095952:	d9cc      	bls.n	80958ee <__hexnan+0x30>
 8095954:	2300      	movs	r3, #0
 8095956:	f844 3c04 	str.w	r3, [r4, #-4]
 809595a:	2201      	movs	r2, #1
 809595c:	3c04      	subs	r4, #4
 809595e:	6821      	ldr	r1, [r4, #0]
 8095960:	f000 000f 	and.w	r0, r0, #15
 8095964:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 8095968:	6020      	str	r0, [r4, #0]
 809596a:	e7c0      	b.n	80958ee <__hexnan+0x30>
 809596c:	2208      	movs	r2, #8
 809596e:	e7be      	b.n	80958ee <__hexnan+0x30>
 8095970:	f1b9 0f00 	cmp.w	r9, #0
 8095974:	d02b      	beq.n	80959ce <__hexnan+0x110>
 8095976:	4544      	cmp	r4, r8
 8095978:	d205      	bcs.n	8095986 <__hexnan+0xc8>
 809597a:	2a07      	cmp	r2, #7
 809597c:	dc03      	bgt.n	8095986 <__hexnan+0xc8>
 809597e:	4641      	mov	r1, r8
 8095980:	4620      	mov	r0, r4
 8095982:	f7ff ff77 	bl	8095874 <L_shift>
 8095986:	42bc      	cmp	r4, r7
 8095988:	d90c      	bls.n	80959a4 <__hexnan+0xe6>
 809598a:	463b      	mov	r3, r7
 809598c:	f854 2b04 	ldr.w	r2, [r4], #4
 8095990:	42a5      	cmp	r5, r4
 8095992:	f843 2b04 	str.w	r2, [r3], #4
 8095996:	d2f9      	bcs.n	809598c <__hexnan+0xce>
 8095998:	2200      	movs	r2, #0
 809599a:	f843 2b04 	str.w	r2, [r3], #4
 809599e:	429d      	cmp	r5, r3
 80959a0:	d2fb      	bcs.n	809599a <__hexnan+0xdc>
 80959a2:	e00b      	b.n	80959bc <__hexnan+0xfe>
 80959a4:	9b01      	ldr	r3, [sp, #4]
 80959a6:	b14b      	cbz	r3, 80959bc <__hexnan+0xfe>
 80959a8:	f1c3 0220 	rsb	r2, r3, #32
 80959ac:	f04f 33ff 	mov.w	r3, #4294967295
 80959b0:	40d3      	lsrs	r3, r2
 80959b2:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80959b6:	4013      	ands	r3, r2
 80959b8:	f846 3c04 	str.w	r3, [r6, #-4]
 80959bc:	682b      	ldr	r3, [r5, #0]
 80959be:	b943      	cbnz	r3, 80959d2 <__hexnan+0x114>
 80959c0:	42bd      	cmp	r5, r7
 80959c2:	d102      	bne.n	80959ca <__hexnan+0x10c>
 80959c4:	2301      	movs	r3, #1
 80959c6:	602b      	str	r3, [r5, #0]
 80959c8:	e003      	b.n	80959d2 <__hexnan+0x114>
 80959ca:	3d04      	subs	r5, #4
 80959cc:	e7f6      	b.n	80959bc <__hexnan+0xfe>
 80959ce:	2004      	movs	r0, #4
 80959d0:	e000      	b.n	80959d4 <__hexnan+0x116>
 80959d2:	2005      	movs	r0, #5
 80959d4:	b005      	add	sp, #20
 80959d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080959dc <_findenv_r>:
 80959dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80959e0:	4607      	mov	r7, r0
 80959e2:	468b      	mov	fp, r1
 80959e4:	4690      	mov	r8, r2
 80959e6:	f000 fcd2 	bl	809638e <__env_lock>
 80959ea:	4b19      	ldr	r3, [pc, #100]	; (8095a50 <_findenv_r+0x74>)
 80959ec:	681d      	ldr	r5, [r3, #0]
 80959ee:	469a      	mov	sl, r3
 80959f0:	b13d      	cbz	r5, 8095a02 <_findenv_r+0x26>
 80959f2:	465c      	mov	r4, fp
 80959f4:	4623      	mov	r3, r4
 80959f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80959fa:	b142      	cbz	r2, 8095a0e <_findenv_r+0x32>
 80959fc:	2a3d      	cmp	r2, #61	; 0x3d
 80959fe:	461c      	mov	r4, r3
 8095a00:	d1f8      	bne.n	80959f4 <_findenv_r+0x18>
 8095a02:	4638      	mov	r0, r7
 8095a04:	f000 fcc4 	bl	8096390 <__env_unlock>
 8095a08:	2000      	movs	r0, #0
 8095a0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8095a0e:	ebcb 0404 	rsb	r4, fp, r4
 8095a12:	46a9      	mov	r9, r5
 8095a14:	f859 0b04 	ldr.w	r0, [r9], #4
 8095a18:	2800      	cmp	r0, #0
 8095a1a:	d0f2      	beq.n	8095a02 <_findenv_r+0x26>
 8095a1c:	4622      	mov	r2, r4
 8095a1e:	4659      	mov	r1, fp
 8095a20:	f7fe fb03 	bl	809402a <strncmp>
 8095a24:	b988      	cbnz	r0, 8095a4a <_findenv_r+0x6e>
 8095a26:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8095a2a:	191e      	adds	r6, r3, r4
 8095a2c:	5d1b      	ldrb	r3, [r3, r4]
 8095a2e:	2b3d      	cmp	r3, #61	; 0x3d
 8095a30:	d10b      	bne.n	8095a4a <_findenv_r+0x6e>
 8095a32:	f8da 3000 	ldr.w	r3, [sl]
 8095a36:	4638      	mov	r0, r7
 8095a38:	1aed      	subs	r5, r5, r3
 8095a3a:	10ad      	asrs	r5, r5, #2
 8095a3c:	f8c8 5000 	str.w	r5, [r8]
 8095a40:	f000 fca6 	bl	8096390 <__env_unlock>
 8095a44:	1c70      	adds	r0, r6, #1
 8095a46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8095a4a:	464d      	mov	r5, r9
 8095a4c:	e7e1      	b.n	8095a12 <_findenv_r+0x36>
 8095a4e:	bf00      	nop
 8095a50:	20000530 	.word	0x20000530

08095a54 <_getenv_r>:
 8095a54:	b507      	push	{r0, r1, r2, lr}
 8095a56:	aa01      	add	r2, sp, #4
 8095a58:	f7ff ffc0 	bl	80959dc <_findenv_r>
 8095a5c:	b003      	add	sp, #12
 8095a5e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08095a64 <_gettimeofday_r>:
 8095a64:	b538      	push	{r3, r4, r5, lr}
 8095a66:	4c07      	ldr	r4, [pc, #28]	; (8095a84 <_gettimeofday_r+0x20>)
 8095a68:	2300      	movs	r3, #0
 8095a6a:	4605      	mov	r5, r0
 8095a6c:	4608      	mov	r0, r1
 8095a6e:	4611      	mov	r1, r2
 8095a70:	6023      	str	r3, [r4, #0]
 8095a72:	f7f0 f9ec 	bl	8085e4e <_gettimeofday>
 8095a76:	1c43      	adds	r3, r0, #1
 8095a78:	d102      	bne.n	8095a80 <_gettimeofday_r+0x1c>
 8095a7a:	6823      	ldr	r3, [r4, #0]
 8095a7c:	b103      	cbz	r3, 8095a80 <_gettimeofday_r+0x1c>
 8095a7e:	602b      	str	r3, [r5, #0]
 8095a80:	bd38      	pop	{r3, r4, r5, pc}
 8095a82:	bf00      	nop
 8095a84:	20004040 	.word	0x20004040

08095a88 <__gettzinfo>:
 8095a88:	4800      	ldr	r0, [pc, #0]	; (8095a8c <__gettzinfo+0x4>)
 8095a8a:	4770      	bx	lr
 8095a8c:	200004f0 	.word	0x200004f0

08095a90 <gmtime_r>:
 8095a90:	6802      	ldr	r2, [r0, #0]
 8095a92:	4b46      	ldr	r3, [pc, #280]	; (8095bac <gmtime_r+0x11c>)
 8095a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8095a96:	fb92 f4f3 	sdiv	r4, r2, r3
 8095a9a:	fb03 2214 	mls	r2, r3, r4, r2
 8095a9e:	2a00      	cmp	r2, #0
 8095aa0:	bfbc      	itt	lt
 8095aa2:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8095aa6:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8095aaa:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8095aae:	fb92 f3f0 	sdiv	r3, r2, r0
 8095ab2:	fb00 2213 	mls	r2, r0, r3, r2
 8095ab6:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8095aba:	608b      	str	r3, [r1, #8]
 8095abc:	fb92 f3f0 	sdiv	r3, r2, r0
 8095ac0:	fb00 2213 	mls	r2, r0, r3, r2
 8095ac4:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 8095ac8:	bfac      	ite	ge
 8095aca:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 8095ace:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 8095ad2:	604b      	str	r3, [r1, #4]
 8095ad4:	600a      	str	r2, [r1, #0]
 8095ad6:	2307      	movs	r3, #7
 8095ad8:	1ce2      	adds	r2, r4, #3
 8095ada:	fb92 f3f3 	sdiv	r3, r2, r3
 8095ade:	4d34      	ldr	r5, [pc, #208]	; (8095bb0 <gmtime_r+0x120>)
 8095ae0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8095ae4:	fb94 f5f5 	sdiv	r5, r4, r5
 8095ae8:	1ad3      	subs	r3, r2, r3
 8095aea:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8095aee:	f240 57b4 	movw	r7, #1460	; 0x5b4
 8095af2:	618b      	str	r3, [r1, #24]
 8095af4:	4b2f      	ldr	r3, [pc, #188]	; (8095bb4 <gmtime_r+0x124>)
 8095af6:	4830      	ldr	r0, [pc, #192]	; (8095bb8 <gmtime_r+0x128>)
 8095af8:	fb03 4405 	mla	r4, r3, r5, r4
 8095afc:	fbb4 f2f2 	udiv	r2, r4, r2
 8095b00:	fbb4 f3f7 	udiv	r3, r4, r7
 8095b04:	fbb4 f0f0 	udiv	r0, r4, r0
 8095b08:	4422      	add	r2, r4
 8095b0a:	1ad2      	subs	r2, r2, r3
 8095b0c:	f648 6694 	movw	r6, #36500	; 0x8e94
 8095b10:	1a13      	subs	r3, r2, r0
 8095b12:	f240 126d 	movw	r2, #365	; 0x16d
 8095b16:	fbb3 f6f6 	udiv	r6, r3, r6
 8095b1a:	fbb3 f0f2 	udiv	r0, r3, r2
 8095b1e:	fbb3 f3f7 	udiv	r3, r3, r7
 8095b22:	4434      	add	r4, r6
 8095b24:	1ae3      	subs	r3, r4, r3
 8095b26:	fb02 3310 	mls	r3, r2, r0, r3
 8095b2a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8095b2e:	2499      	movs	r4, #153	; 0x99
 8095b30:	3202      	adds	r2, #2
 8095b32:	fbb2 f2f4 	udiv	r2, r2, r4
 8095b36:	4354      	muls	r4, r2
 8095b38:	1ca6      	adds	r6, r4, #2
 8095b3a:	2405      	movs	r4, #5
 8095b3c:	fbb6 f4f4 	udiv	r4, r6, r4
 8095b40:	2a0a      	cmp	r2, #10
 8095b42:	bf34      	ite	cc
 8095b44:	2602      	movcc	r6, #2
 8095b46:	f06f 0609 	mvncs.w	r6, #9
 8095b4a:	4416      	add	r6, r2
 8095b4c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8095b50:	fb02 0505 	mla	r5, r2, r5, r0
 8095b54:	1c5f      	adds	r7, r3, #1
 8095b56:	2e01      	cmp	r6, #1
 8095b58:	bf98      	it	ls
 8095b5a:	3501      	addls	r5, #1
 8095b5c:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8095b60:	eba7 0704 	sub.w	r7, r7, r4
 8095b64:	d302      	bcc.n	8095b6c <gmtime_r+0xdc>
 8095b66:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 8095b6a:	e014      	b.n	8095b96 <gmtime_r+0x106>
 8095b6c:	0782      	lsls	r2, r0, #30
 8095b6e:	d105      	bne.n	8095b7c <gmtime_r+0xec>
 8095b70:	2464      	movs	r4, #100	; 0x64
 8095b72:	fbb0 f2f4 	udiv	r2, r0, r4
 8095b76:	fb04 0212 	mls	r2, r4, r2, r0
 8095b7a:	b94a      	cbnz	r2, 8095b90 <gmtime_r+0x100>
 8095b7c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8095b80:	fbb0 f4f2 	udiv	r4, r0, r2
 8095b84:	fb02 0014 	mls	r0, r2, r4, r0
 8095b88:	fab0 f280 	clz	r2, r0
 8095b8c:	0952      	lsrs	r2, r2, #5
 8095b8e:	e000      	b.n	8095b92 <gmtime_r+0x102>
 8095b90:	2201      	movs	r2, #1
 8095b92:	333b      	adds	r3, #59	; 0x3b
 8095b94:	441a      	add	r2, r3
 8095b96:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8095b9a:	2300      	movs	r3, #0
 8095b9c:	61ca      	str	r2, [r1, #28]
 8095b9e:	614d      	str	r5, [r1, #20]
 8095ba0:	610e      	str	r6, [r1, #16]
 8095ba2:	60cf      	str	r7, [r1, #12]
 8095ba4:	620b      	str	r3, [r1, #32]
 8095ba6:	4608      	mov	r0, r1
 8095ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8095baa:	bf00      	nop
 8095bac:	00015180 	.word	0x00015180
 8095bb0:	00023ab1 	.word	0x00023ab1
 8095bb4:	fffdc54f 	.word	0xfffdc54f
 8095bb8:	00023ab0 	.word	0x00023ab0

08095bbc <_Balloc>:
 8095bbc:	b570      	push	{r4, r5, r6, lr}
 8095bbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8095bc0:	4604      	mov	r4, r0
 8095bc2:	460e      	mov	r6, r1
 8095bc4:	b93d      	cbnz	r5, 8095bd6 <_Balloc+0x1a>
 8095bc6:	2010      	movs	r0, #16
 8095bc8:	f7fb fabe 	bl	8091148 <malloc>
 8095bcc:	6260      	str	r0, [r4, #36]	; 0x24
 8095bce:	6045      	str	r5, [r0, #4]
 8095bd0:	6085      	str	r5, [r0, #8]
 8095bd2:	6005      	str	r5, [r0, #0]
 8095bd4:	60c5      	str	r5, [r0, #12]
 8095bd6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8095bd8:	68eb      	ldr	r3, [r5, #12]
 8095bda:	b143      	cbz	r3, 8095bee <_Balloc+0x32>
 8095bdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8095bde:	68db      	ldr	r3, [r3, #12]
 8095be0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8095be4:	b178      	cbz	r0, 8095c06 <_Balloc+0x4a>
 8095be6:	6802      	ldr	r2, [r0, #0]
 8095be8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8095bec:	e017      	b.n	8095c1e <_Balloc+0x62>
 8095bee:	2221      	movs	r2, #33	; 0x21
 8095bf0:	2104      	movs	r1, #4
 8095bf2:	4620      	mov	r0, r4
 8095bf4:	f7fe f9e3 	bl	8093fbe <_calloc_r>
 8095bf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8095bfa:	60e8      	str	r0, [r5, #12]
 8095bfc:	68db      	ldr	r3, [r3, #12]
 8095bfe:	2b00      	cmp	r3, #0
 8095c00:	d1ec      	bne.n	8095bdc <_Balloc+0x20>
 8095c02:	2000      	movs	r0, #0
 8095c04:	bd70      	pop	{r4, r5, r6, pc}
 8095c06:	2101      	movs	r1, #1
 8095c08:	fa01 f506 	lsl.w	r5, r1, r6
 8095c0c:	1d6a      	adds	r2, r5, #5
 8095c0e:	0092      	lsls	r2, r2, #2
 8095c10:	4620      	mov	r0, r4
 8095c12:	f7fe f9d4 	bl	8093fbe <_calloc_r>
 8095c16:	2800      	cmp	r0, #0
 8095c18:	d0f3      	beq.n	8095c02 <_Balloc+0x46>
 8095c1a:	6046      	str	r6, [r0, #4]
 8095c1c:	6085      	str	r5, [r0, #8]
 8095c1e:	2300      	movs	r3, #0
 8095c20:	6103      	str	r3, [r0, #16]
 8095c22:	60c3      	str	r3, [r0, #12]
 8095c24:	bd70      	pop	{r4, r5, r6, pc}

08095c26 <_Bfree>:
 8095c26:	b570      	push	{r4, r5, r6, lr}
 8095c28:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8095c2a:	4606      	mov	r6, r0
 8095c2c:	460d      	mov	r5, r1
 8095c2e:	b93c      	cbnz	r4, 8095c40 <_Bfree+0x1a>
 8095c30:	2010      	movs	r0, #16
 8095c32:	f7fb fa89 	bl	8091148 <malloc>
 8095c36:	6270      	str	r0, [r6, #36]	; 0x24
 8095c38:	6044      	str	r4, [r0, #4]
 8095c3a:	6084      	str	r4, [r0, #8]
 8095c3c:	6004      	str	r4, [r0, #0]
 8095c3e:	60c4      	str	r4, [r0, #12]
 8095c40:	b13d      	cbz	r5, 8095c52 <_Bfree+0x2c>
 8095c42:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8095c44:	686a      	ldr	r2, [r5, #4]
 8095c46:	68db      	ldr	r3, [r3, #12]
 8095c48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8095c4c:	6029      	str	r1, [r5, #0]
 8095c4e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8095c52:	bd70      	pop	{r4, r5, r6, pc}

08095c54 <__multadd>:
 8095c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8095c58:	4606      	mov	r6, r0
 8095c5a:	460c      	mov	r4, r1
 8095c5c:	690d      	ldr	r5, [r1, #16]
 8095c5e:	461f      	mov	r7, r3
 8095c60:	f101 0e14 	add.w	lr, r1, #20
 8095c64:	2300      	movs	r3, #0
 8095c66:	f8de 0000 	ldr.w	r0, [lr]
 8095c6a:	3301      	adds	r3, #1
 8095c6c:	b281      	uxth	r1, r0
 8095c6e:	fb02 7101 	mla	r1, r2, r1, r7
 8095c72:	0c00      	lsrs	r0, r0, #16
 8095c74:	0c0f      	lsrs	r7, r1, #16
 8095c76:	fb02 7000 	mla	r0, r2, r0, r7
 8095c7a:	b289      	uxth	r1, r1
 8095c7c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8095c80:	429d      	cmp	r5, r3
 8095c82:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8095c86:	f84e 1b04 	str.w	r1, [lr], #4
 8095c8a:	dcec      	bgt.n	8095c66 <__multadd+0x12>
 8095c8c:	b1d7      	cbz	r7, 8095cc4 <__multadd+0x70>
 8095c8e:	68a3      	ldr	r3, [r4, #8]
 8095c90:	429d      	cmp	r5, r3
 8095c92:	db12      	blt.n	8095cba <__multadd+0x66>
 8095c94:	6861      	ldr	r1, [r4, #4]
 8095c96:	4630      	mov	r0, r6
 8095c98:	3101      	adds	r1, #1
 8095c9a:	f7ff ff8f 	bl	8095bbc <_Balloc>
 8095c9e:	4680      	mov	r8, r0
 8095ca0:	6922      	ldr	r2, [r4, #16]
 8095ca2:	f104 010c 	add.w	r1, r4, #12
 8095ca6:	3202      	adds	r2, #2
 8095ca8:	0092      	lsls	r2, r2, #2
 8095caa:	300c      	adds	r0, #12
 8095cac:	f7fe f959 	bl	8093f62 <memcpy>
 8095cb0:	4621      	mov	r1, r4
 8095cb2:	4630      	mov	r0, r6
 8095cb4:	f7ff ffb7 	bl	8095c26 <_Bfree>
 8095cb8:	4644      	mov	r4, r8
 8095cba:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8095cbe:	3501      	adds	r5, #1
 8095cc0:	615f      	str	r7, [r3, #20]
 8095cc2:	6125      	str	r5, [r4, #16]
 8095cc4:	4620      	mov	r0, r4
 8095cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08095cca <__s2b>:
 8095cca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8095cce:	4606      	mov	r6, r0
 8095cd0:	4615      	mov	r5, r2
 8095cd2:	461f      	mov	r7, r3
 8095cd4:	2209      	movs	r2, #9
 8095cd6:	3308      	adds	r3, #8
 8095cd8:	460c      	mov	r4, r1
 8095cda:	fb93 f3f2 	sdiv	r3, r3, r2
 8095cde:	2100      	movs	r1, #0
 8095ce0:	2201      	movs	r2, #1
 8095ce2:	429a      	cmp	r2, r3
 8095ce4:	da02      	bge.n	8095cec <__s2b+0x22>
 8095ce6:	0052      	lsls	r2, r2, #1
 8095ce8:	3101      	adds	r1, #1
 8095cea:	e7fa      	b.n	8095ce2 <__s2b+0x18>
 8095cec:	4630      	mov	r0, r6
 8095cee:	f7ff ff65 	bl	8095bbc <_Balloc>
 8095cf2:	9b08      	ldr	r3, [sp, #32]
 8095cf4:	2d09      	cmp	r5, #9
 8095cf6:	6143      	str	r3, [r0, #20]
 8095cf8:	f04f 0301 	mov.w	r3, #1
 8095cfc:	6103      	str	r3, [r0, #16]
 8095cfe:	dd11      	ble.n	8095d24 <__s2b+0x5a>
 8095d00:	f104 0809 	add.w	r8, r4, #9
 8095d04:	46c1      	mov	r9, r8
 8095d06:	442c      	add	r4, r5
 8095d08:	f819 3b01 	ldrb.w	r3, [r9], #1
 8095d0c:	4601      	mov	r1, r0
 8095d0e:	3b30      	subs	r3, #48	; 0x30
 8095d10:	220a      	movs	r2, #10
 8095d12:	4630      	mov	r0, r6
 8095d14:	f7ff ff9e 	bl	8095c54 <__multadd>
 8095d18:	45a1      	cmp	r9, r4
 8095d1a:	d1f5      	bne.n	8095d08 <__s2b+0x3e>
 8095d1c:	eb08 0405 	add.w	r4, r8, r5
 8095d20:	3c08      	subs	r4, #8
 8095d22:	e001      	b.n	8095d28 <__s2b+0x5e>
 8095d24:	340a      	adds	r4, #10
 8095d26:	2509      	movs	r5, #9
 8095d28:	1b2d      	subs	r5, r5, r4
 8095d2a:	1963      	adds	r3, r4, r5
 8095d2c:	429f      	cmp	r7, r3
 8095d2e:	dd08      	ble.n	8095d42 <__s2b+0x78>
 8095d30:	f814 3b01 	ldrb.w	r3, [r4], #1
 8095d34:	4601      	mov	r1, r0
 8095d36:	3b30      	subs	r3, #48	; 0x30
 8095d38:	220a      	movs	r2, #10
 8095d3a:	4630      	mov	r0, r6
 8095d3c:	f7ff ff8a 	bl	8095c54 <__multadd>
 8095d40:	e7f3      	b.n	8095d2a <__s2b+0x60>
 8095d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08095d46 <__hi0bits>:
 8095d46:	0c03      	lsrs	r3, r0, #16
 8095d48:	041b      	lsls	r3, r3, #16
 8095d4a:	b913      	cbnz	r3, 8095d52 <__hi0bits+0xc>
 8095d4c:	0400      	lsls	r0, r0, #16
 8095d4e:	2310      	movs	r3, #16
 8095d50:	e000      	b.n	8095d54 <__hi0bits+0xe>
 8095d52:	2300      	movs	r3, #0
 8095d54:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8095d58:	bf04      	itt	eq
 8095d5a:	0200      	lsleq	r0, r0, #8
 8095d5c:	3308      	addeq	r3, #8
 8095d5e:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8095d62:	bf04      	itt	eq
 8095d64:	0100      	lsleq	r0, r0, #4
 8095d66:	3304      	addeq	r3, #4
 8095d68:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8095d6c:	bf04      	itt	eq
 8095d6e:	0080      	lsleq	r0, r0, #2
 8095d70:	3302      	addeq	r3, #2
 8095d72:	2800      	cmp	r0, #0
 8095d74:	db03      	blt.n	8095d7e <__hi0bits+0x38>
 8095d76:	0042      	lsls	r2, r0, #1
 8095d78:	d503      	bpl.n	8095d82 <__hi0bits+0x3c>
 8095d7a:	1c58      	adds	r0, r3, #1
 8095d7c:	4770      	bx	lr
 8095d7e:	4618      	mov	r0, r3
 8095d80:	4770      	bx	lr
 8095d82:	2020      	movs	r0, #32
 8095d84:	4770      	bx	lr

08095d86 <__lo0bits>:
 8095d86:	6803      	ldr	r3, [r0, #0]
 8095d88:	f013 0207 	ands.w	r2, r3, #7
 8095d8c:	d00b      	beq.n	8095da6 <__lo0bits+0x20>
 8095d8e:	07d9      	lsls	r1, r3, #31
 8095d90:	d422      	bmi.n	8095dd8 <__lo0bits+0x52>
 8095d92:	079a      	lsls	r2, r3, #30
 8095d94:	bf4b      	itete	mi
 8095d96:	085b      	lsrmi	r3, r3, #1
 8095d98:	089b      	lsrpl	r3, r3, #2
 8095d9a:	6003      	strmi	r3, [r0, #0]
 8095d9c:	6003      	strpl	r3, [r0, #0]
 8095d9e:	bf4c      	ite	mi
 8095da0:	2001      	movmi	r0, #1
 8095da2:	2002      	movpl	r0, #2
 8095da4:	4770      	bx	lr
 8095da6:	b299      	uxth	r1, r3
 8095da8:	b909      	cbnz	r1, 8095dae <__lo0bits+0x28>
 8095daa:	0c1b      	lsrs	r3, r3, #16
 8095dac:	2210      	movs	r2, #16
 8095dae:	f013 0fff 	tst.w	r3, #255	; 0xff
 8095db2:	bf04      	itt	eq
 8095db4:	0a1b      	lsreq	r3, r3, #8
 8095db6:	3208      	addeq	r2, #8
 8095db8:	0719      	lsls	r1, r3, #28
 8095dba:	bf04      	itt	eq
 8095dbc:	091b      	lsreq	r3, r3, #4
 8095dbe:	3204      	addeq	r2, #4
 8095dc0:	0799      	lsls	r1, r3, #30
 8095dc2:	bf04      	itt	eq
 8095dc4:	089b      	lsreq	r3, r3, #2
 8095dc6:	3202      	addeq	r2, #2
 8095dc8:	07d9      	lsls	r1, r3, #31
 8095dca:	d402      	bmi.n	8095dd2 <__lo0bits+0x4c>
 8095dcc:	085b      	lsrs	r3, r3, #1
 8095dce:	d005      	beq.n	8095ddc <__lo0bits+0x56>
 8095dd0:	3201      	adds	r2, #1
 8095dd2:	6003      	str	r3, [r0, #0]
 8095dd4:	4610      	mov	r0, r2
 8095dd6:	4770      	bx	lr
 8095dd8:	2000      	movs	r0, #0
 8095dda:	4770      	bx	lr
 8095ddc:	2020      	movs	r0, #32
 8095dde:	4770      	bx	lr

08095de0 <__i2b>:
 8095de0:	b510      	push	{r4, lr}
 8095de2:	460c      	mov	r4, r1
 8095de4:	2101      	movs	r1, #1
 8095de6:	f7ff fee9 	bl	8095bbc <_Balloc>
 8095dea:	2201      	movs	r2, #1
 8095dec:	6144      	str	r4, [r0, #20]
 8095dee:	6102      	str	r2, [r0, #16]
 8095df0:	bd10      	pop	{r4, pc}

08095df2 <__multiply>:
 8095df2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8095df6:	4614      	mov	r4, r2
 8095df8:	690a      	ldr	r2, [r1, #16]
 8095dfa:	6923      	ldr	r3, [r4, #16]
 8095dfc:	4688      	mov	r8, r1
 8095dfe:	429a      	cmp	r2, r3
 8095e00:	bfbe      	ittt	lt
 8095e02:	460b      	movlt	r3, r1
 8095e04:	46a0      	movlt	r8, r4
 8095e06:	461c      	movlt	r4, r3
 8095e08:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8095e0c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8095e10:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8095e14:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8095e18:	eb07 0609 	add.w	r6, r7, r9
 8095e1c:	429e      	cmp	r6, r3
 8095e1e:	bfc8      	it	gt
 8095e20:	3101      	addgt	r1, #1
 8095e22:	f7ff fecb 	bl	8095bbc <_Balloc>
 8095e26:	f100 0514 	add.w	r5, r0, #20
 8095e2a:	462b      	mov	r3, r5
 8095e2c:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 8095e30:	2200      	movs	r2, #0
 8095e32:	4563      	cmp	r3, ip
 8095e34:	d202      	bcs.n	8095e3c <__multiply+0x4a>
 8095e36:	f843 2b04 	str.w	r2, [r3], #4
 8095e3a:	e7fa      	b.n	8095e32 <__multiply+0x40>
 8095e3c:	f104 0214 	add.w	r2, r4, #20
 8095e40:	f108 0114 	add.w	r1, r8, #20
 8095e44:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8095e48:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8095e4c:	9300      	str	r3, [sp, #0]
 8095e4e:	9b00      	ldr	r3, [sp, #0]
 8095e50:	9201      	str	r2, [sp, #4]
 8095e52:	4293      	cmp	r3, r2
 8095e54:	d957      	bls.n	8095f06 <__multiply+0x114>
 8095e56:	f8b2 b000 	ldrh.w	fp, [r2]
 8095e5a:	f1bb 0f00 	cmp.w	fp, #0
 8095e5e:	d023      	beq.n	8095ea8 <__multiply+0xb6>
 8095e60:	4689      	mov	r9, r1
 8095e62:	46ae      	mov	lr, r5
 8095e64:	f04f 0800 	mov.w	r8, #0
 8095e68:	f859 4b04 	ldr.w	r4, [r9], #4
 8095e6c:	f8be a000 	ldrh.w	sl, [lr]
 8095e70:	b2a3      	uxth	r3, r4
 8095e72:	fb0b a303 	mla	r3, fp, r3, sl
 8095e76:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8095e7a:	f8de 4000 	ldr.w	r4, [lr]
 8095e7e:	4443      	add	r3, r8
 8095e80:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8095e84:	fb0b 840a 	mla	r4, fp, sl, r8
 8095e88:	46f2      	mov	sl, lr
 8095e8a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8095e8e:	b29b      	uxth	r3, r3
 8095e90:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8095e94:	454f      	cmp	r7, r9
 8095e96:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8095e9a:	f84a 3b04 	str.w	r3, [sl], #4
 8095e9e:	d901      	bls.n	8095ea4 <__multiply+0xb2>
 8095ea0:	46d6      	mov	lr, sl
 8095ea2:	e7e1      	b.n	8095e68 <__multiply+0x76>
 8095ea4:	f8ce 8004 	str.w	r8, [lr, #4]
 8095ea8:	9b01      	ldr	r3, [sp, #4]
 8095eaa:	3204      	adds	r2, #4
 8095eac:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8095eb0:	f1ba 0f00 	cmp.w	sl, #0
 8095eb4:	d021      	beq.n	8095efa <__multiply+0x108>
 8095eb6:	462c      	mov	r4, r5
 8095eb8:	4689      	mov	r9, r1
 8095eba:	682b      	ldr	r3, [r5, #0]
 8095ebc:	f04f 0800 	mov.w	r8, #0
 8095ec0:	f8b9 e000 	ldrh.w	lr, [r9]
 8095ec4:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 8095ec8:	b29b      	uxth	r3, r3
 8095eca:	fb0a be0e 	mla	lr, sl, lr, fp
 8095ece:	46a3      	mov	fp, r4
 8095ed0:	44f0      	add	r8, lr
 8095ed2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8095ed6:	f84b 3b04 	str.w	r3, [fp], #4
 8095eda:	f859 3b04 	ldr.w	r3, [r9], #4
 8095ede:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 8095ee2:	0c1b      	lsrs	r3, r3, #16
 8095ee4:	fb0a e303 	mla	r3, sl, r3, lr
 8095ee8:	454f      	cmp	r7, r9
 8095eea:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 8095eee:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8095ef2:	d901      	bls.n	8095ef8 <__multiply+0x106>
 8095ef4:	465c      	mov	r4, fp
 8095ef6:	e7e3      	b.n	8095ec0 <__multiply+0xce>
 8095ef8:	6063      	str	r3, [r4, #4]
 8095efa:	3504      	adds	r5, #4
 8095efc:	e7a7      	b.n	8095e4e <__multiply+0x5c>
 8095efe:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8095f02:	b913      	cbnz	r3, 8095f0a <__multiply+0x118>
 8095f04:	3e01      	subs	r6, #1
 8095f06:	2e00      	cmp	r6, #0
 8095f08:	dcf9      	bgt.n	8095efe <__multiply+0x10c>
 8095f0a:	6106      	str	r6, [r0, #16]
 8095f0c:	b003      	add	sp, #12
 8095f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08095f14 <__pow5mult>:
 8095f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8095f18:	4615      	mov	r5, r2
 8095f1a:	f012 0203 	ands.w	r2, r2, #3
 8095f1e:	4606      	mov	r6, r0
 8095f20:	460f      	mov	r7, r1
 8095f22:	d007      	beq.n	8095f34 <__pow5mult+0x20>
 8095f24:	4c21      	ldr	r4, [pc, #132]	; (8095fac <__pow5mult+0x98>)
 8095f26:	3a01      	subs	r2, #1
 8095f28:	2300      	movs	r3, #0
 8095f2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8095f2e:	f7ff fe91 	bl	8095c54 <__multadd>
 8095f32:	4607      	mov	r7, r0
 8095f34:	10ad      	asrs	r5, r5, #2
 8095f36:	d036      	beq.n	8095fa6 <__pow5mult+0x92>
 8095f38:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8095f3a:	b93c      	cbnz	r4, 8095f4c <__pow5mult+0x38>
 8095f3c:	2010      	movs	r0, #16
 8095f3e:	f7fb f903 	bl	8091148 <malloc>
 8095f42:	6270      	str	r0, [r6, #36]	; 0x24
 8095f44:	6044      	str	r4, [r0, #4]
 8095f46:	6084      	str	r4, [r0, #8]
 8095f48:	6004      	str	r4, [r0, #0]
 8095f4a:	60c4      	str	r4, [r0, #12]
 8095f4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8095f50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8095f54:	b94c      	cbnz	r4, 8095f6a <__pow5mult+0x56>
 8095f56:	f240 2171 	movw	r1, #625	; 0x271
 8095f5a:	4630      	mov	r0, r6
 8095f5c:	f7ff ff40 	bl	8095de0 <__i2b>
 8095f60:	4604      	mov	r4, r0
 8095f62:	2300      	movs	r3, #0
 8095f64:	f8c8 0008 	str.w	r0, [r8, #8]
 8095f68:	6003      	str	r3, [r0, #0]
 8095f6a:	f04f 0800 	mov.w	r8, #0
 8095f6e:	07eb      	lsls	r3, r5, #31
 8095f70:	d50a      	bpl.n	8095f88 <__pow5mult+0x74>
 8095f72:	4639      	mov	r1, r7
 8095f74:	4622      	mov	r2, r4
 8095f76:	4630      	mov	r0, r6
 8095f78:	f7ff ff3b 	bl	8095df2 <__multiply>
 8095f7c:	4681      	mov	r9, r0
 8095f7e:	4639      	mov	r1, r7
 8095f80:	4630      	mov	r0, r6
 8095f82:	f7ff fe50 	bl	8095c26 <_Bfree>
 8095f86:	464f      	mov	r7, r9
 8095f88:	106d      	asrs	r5, r5, #1
 8095f8a:	d00c      	beq.n	8095fa6 <__pow5mult+0x92>
 8095f8c:	6820      	ldr	r0, [r4, #0]
 8095f8e:	b108      	cbz	r0, 8095f94 <__pow5mult+0x80>
 8095f90:	4604      	mov	r4, r0
 8095f92:	e7ec      	b.n	8095f6e <__pow5mult+0x5a>
 8095f94:	4622      	mov	r2, r4
 8095f96:	4621      	mov	r1, r4
 8095f98:	4630      	mov	r0, r6
 8095f9a:	f7ff ff2a 	bl	8095df2 <__multiply>
 8095f9e:	6020      	str	r0, [r4, #0]
 8095fa0:	f8c0 8000 	str.w	r8, [r0]
 8095fa4:	e7f4      	b.n	8095f90 <__pow5mult+0x7c>
 8095fa6:	4638      	mov	r0, r7
 8095fa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8095fac:	0809a118 	.word	0x0809a118

08095fb0 <__lshift>:
 8095fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8095fb4:	460c      	mov	r4, r1
 8095fb6:	4607      	mov	r7, r0
 8095fb8:	4691      	mov	r9, r2
 8095fba:	6926      	ldr	r6, [r4, #16]
 8095fbc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8095fc0:	4456      	add	r6, sl
 8095fc2:	6849      	ldr	r1, [r1, #4]
 8095fc4:	68a3      	ldr	r3, [r4, #8]
 8095fc6:	1c75      	adds	r5, r6, #1
 8095fc8:	42ab      	cmp	r3, r5
 8095fca:	da02      	bge.n	8095fd2 <__lshift+0x22>
 8095fcc:	3101      	adds	r1, #1
 8095fce:	005b      	lsls	r3, r3, #1
 8095fd0:	e7fa      	b.n	8095fc8 <__lshift+0x18>
 8095fd2:	4638      	mov	r0, r7
 8095fd4:	f7ff fdf2 	bl	8095bbc <_Balloc>
 8095fd8:	2300      	movs	r3, #0
 8095fda:	4680      	mov	r8, r0
 8095fdc:	461a      	mov	r2, r3
 8095fde:	f100 0114 	add.w	r1, r0, #20
 8095fe2:	4553      	cmp	r3, sl
 8095fe4:	da03      	bge.n	8095fee <__lshift+0x3e>
 8095fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8095fea:	3301      	adds	r3, #1
 8095fec:	e7f9      	b.n	8095fe2 <__lshift+0x32>
 8095fee:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8095ff2:	6920      	ldr	r0, [r4, #16]
 8095ff4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8095ff8:	f019 091f 	ands.w	r9, r9, #31
 8095ffc:	f104 0114 	add.w	r1, r4, #20
 8096000:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8096004:	d014      	beq.n	8096030 <__lshift+0x80>
 8096006:	f1c9 0c20 	rsb	ip, r9, #32
 809600a:	2200      	movs	r2, #0
 809600c:	6808      	ldr	r0, [r1, #0]
 809600e:	469a      	mov	sl, r3
 8096010:	fa00 f009 	lsl.w	r0, r0, r9
 8096014:	4302      	orrs	r2, r0
 8096016:	f843 2b04 	str.w	r2, [r3], #4
 809601a:	f851 2b04 	ldr.w	r2, [r1], #4
 809601e:	458e      	cmp	lr, r1
 8096020:	fa22 f20c 	lsr.w	r2, r2, ip
 8096024:	d8f2      	bhi.n	809600c <__lshift+0x5c>
 8096026:	f8ca 2004 	str.w	r2, [sl, #4]
 809602a:	b142      	cbz	r2, 809603e <__lshift+0x8e>
 809602c:	1cb5      	adds	r5, r6, #2
 809602e:	e006      	b.n	809603e <__lshift+0x8e>
 8096030:	3b04      	subs	r3, #4
 8096032:	f851 2b04 	ldr.w	r2, [r1], #4
 8096036:	458e      	cmp	lr, r1
 8096038:	f843 2f04 	str.w	r2, [r3, #4]!
 809603c:	d8f9      	bhi.n	8096032 <__lshift+0x82>
 809603e:	3d01      	subs	r5, #1
 8096040:	4638      	mov	r0, r7
 8096042:	f8c8 5010 	str.w	r5, [r8, #16]
 8096046:	4621      	mov	r1, r4
 8096048:	f7ff fded 	bl	8095c26 <_Bfree>
 809604c:	4640      	mov	r0, r8
 809604e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08096052 <__mcmp>:
 8096052:	6903      	ldr	r3, [r0, #16]
 8096054:	690a      	ldr	r2, [r1, #16]
 8096056:	b510      	push	{r4, lr}
 8096058:	1a9b      	subs	r3, r3, r2
 809605a:	d111      	bne.n	8096080 <__mcmp+0x2e>
 809605c:	0092      	lsls	r2, r2, #2
 809605e:	3014      	adds	r0, #20
 8096060:	3114      	adds	r1, #20
 8096062:	1883      	adds	r3, r0, r2
 8096064:	440a      	add	r2, r1
 8096066:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 809606a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 809606e:	428c      	cmp	r4, r1
 8096070:	d002      	beq.n	8096078 <__mcmp+0x26>
 8096072:	d307      	bcc.n	8096084 <__mcmp+0x32>
 8096074:	2001      	movs	r0, #1
 8096076:	bd10      	pop	{r4, pc}
 8096078:	4298      	cmp	r0, r3
 809607a:	d3f4      	bcc.n	8096066 <__mcmp+0x14>
 809607c:	2000      	movs	r0, #0
 809607e:	bd10      	pop	{r4, pc}
 8096080:	4618      	mov	r0, r3
 8096082:	bd10      	pop	{r4, pc}
 8096084:	f04f 30ff 	mov.w	r0, #4294967295
 8096088:	bd10      	pop	{r4, pc}

0809608a <__mdiff>:
 809608a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 809608e:	460c      	mov	r4, r1
 8096090:	4607      	mov	r7, r0
 8096092:	4611      	mov	r1, r2
 8096094:	4620      	mov	r0, r4
 8096096:	4615      	mov	r5, r2
 8096098:	f7ff ffdb 	bl	8096052 <__mcmp>
 809609c:	1e06      	subs	r6, r0, #0
 809609e:	d108      	bne.n	80960b2 <__mdiff+0x28>
 80960a0:	4631      	mov	r1, r6
 80960a2:	4638      	mov	r0, r7
 80960a4:	f7ff fd8a 	bl	8095bbc <_Balloc>
 80960a8:	2301      	movs	r3, #1
 80960aa:	6103      	str	r3, [r0, #16]
 80960ac:	6146      	str	r6, [r0, #20]
 80960ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80960b2:	bfbc      	itt	lt
 80960b4:	4623      	movlt	r3, r4
 80960b6:	462c      	movlt	r4, r5
 80960b8:	4638      	mov	r0, r7
 80960ba:	6861      	ldr	r1, [r4, #4]
 80960bc:	bfba      	itte	lt
 80960be:	461d      	movlt	r5, r3
 80960c0:	2601      	movlt	r6, #1
 80960c2:	2600      	movge	r6, #0
 80960c4:	f7ff fd7a 	bl	8095bbc <_Balloc>
 80960c8:	692b      	ldr	r3, [r5, #16]
 80960ca:	60c6      	str	r6, [r0, #12]
 80960cc:	6926      	ldr	r6, [r4, #16]
 80960ce:	f105 0914 	add.w	r9, r5, #20
 80960d2:	f104 0114 	add.w	r1, r4, #20
 80960d6:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 80960da:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80960de:	f100 0514 	add.w	r5, r0, #20
 80960e2:	f04f 0c00 	mov.w	ip, #0
 80960e6:	f851 2b04 	ldr.w	r2, [r1], #4
 80960ea:	f859 4b04 	ldr.w	r4, [r9], #4
 80960ee:	b293      	uxth	r3, r2
 80960f0:	449c      	add	ip, r3
 80960f2:	b2a3      	uxth	r3, r4
 80960f4:	0c24      	lsrs	r4, r4, #16
 80960f6:	ebc3 030c 	rsb	r3, r3, ip
 80960fa:	ebc4 4212 	rsb	r2, r4, r2, lsr #16
 80960fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8096102:	b29b      	uxth	r3, r3
 8096104:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8096108:	45c8      	cmp	r8, r9
 809610a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 809610e:	468e      	mov	lr, r1
 8096110:	f845 2b04 	str.w	r2, [r5], #4
 8096114:	d8e7      	bhi.n	80960e6 <__mdiff+0x5c>
 8096116:	45be      	cmp	lr, r7
 8096118:	d20e      	bcs.n	8096138 <__mdiff+0xae>
 809611a:	f85e 1b04 	ldr.w	r1, [lr], #4
 809611e:	b28a      	uxth	r2, r1
 8096120:	4462      	add	r2, ip
 8096122:	1413      	asrs	r3, r2, #16
 8096124:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 8096128:	b292      	uxth	r2, r2
 809612a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 809612e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8096132:	f845 2b04 	str.w	r2, [r5], #4
 8096136:	e7ee      	b.n	8096116 <__mdiff+0x8c>
 8096138:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 809613c:	b90b      	cbnz	r3, 8096142 <__mdiff+0xb8>
 809613e:	3e01      	subs	r6, #1
 8096140:	e7fa      	b.n	8096138 <__mdiff+0xae>
 8096142:	6106      	str	r6, [r0, #16]
 8096144:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08096148 <__ulp>:
 8096148:	4b10      	ldr	r3, [pc, #64]	; (809618c <__ulp+0x44>)
 809614a:	400b      	ands	r3, r1
 809614c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8096150:	2b00      	cmp	r3, #0
 8096152:	dd02      	ble.n	809615a <__ulp+0x12>
 8096154:	2000      	movs	r0, #0
 8096156:	4619      	mov	r1, r3
 8096158:	4770      	bx	lr
 809615a:	425b      	negs	r3, r3
 809615c:	151b      	asrs	r3, r3, #20
 809615e:	2b13      	cmp	r3, #19
 8096160:	f04f 0000 	mov.w	r0, #0
 8096164:	f04f 0100 	mov.w	r1, #0
 8096168:	dc04      	bgt.n	8096174 <__ulp+0x2c>
 809616a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 809616e:	fa42 f103 	asr.w	r1, r2, r3
 8096172:	4770      	bx	lr
 8096174:	3b14      	subs	r3, #20
 8096176:	2b1e      	cmp	r3, #30
 8096178:	f04f 0201 	mov.w	r2, #1
 809617c:	bfce      	itee	gt
 809617e:	4613      	movgt	r3, r2
 8096180:	f1c3 031f 	rsble	r3, r3, #31
 8096184:	fa02 f303 	lslle.w	r3, r2, r3
 8096188:	4618      	mov	r0, r3
 809618a:	4770      	bx	lr
 809618c:	7ff00000 	.word	0x7ff00000

08096190 <__b2d>:
 8096190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8096192:	6905      	ldr	r5, [r0, #16]
 8096194:	f100 0614 	add.w	r6, r0, #20
 8096198:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 809619c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80961a0:	1f2f      	subs	r7, r5, #4
 80961a2:	4620      	mov	r0, r4
 80961a4:	f7ff fdcf 	bl	8095d46 <__hi0bits>
 80961a8:	f1c0 0320 	rsb	r3, r0, #32
 80961ac:	280a      	cmp	r0, #10
 80961ae:	600b      	str	r3, [r1, #0]
 80961b0:	dc14      	bgt.n	80961dc <__b2d+0x4c>
 80961b2:	f1c0 0e0b 	rsb	lr, r0, #11
 80961b6:	fa24 f10e 	lsr.w	r1, r4, lr
 80961ba:	42be      	cmp	r6, r7
 80961bc:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 80961c0:	bf34      	ite	cc
 80961c2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80961c6:	2100      	movcs	r1, #0
 80961c8:	3015      	adds	r0, #21
 80961ca:	fa04 f000 	lsl.w	r0, r4, r0
 80961ce:	fa21 f10e 	lsr.w	r1, r1, lr
 80961d2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80961d6:	ea40 0201 	orr.w	r2, r0, r1
 80961da:	e023      	b.n	8096224 <__b2d+0x94>
 80961dc:	42be      	cmp	r6, r7
 80961de:	bf3a      	itte	cc
 80961e0:	f1a5 0708 	subcc.w	r7, r5, #8
 80961e4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80961e8:	2100      	movcs	r1, #0
 80961ea:	380b      	subs	r0, #11
 80961ec:	d015      	beq.n	809621a <__b2d+0x8a>
 80961ee:	4084      	lsls	r4, r0
 80961f0:	f1c0 0520 	rsb	r5, r0, #32
 80961f4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80961f8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80961fc:	42b7      	cmp	r7, r6
 80961fe:	fa21 fe05 	lsr.w	lr, r1, r5
 8096202:	ea44 030e 	orr.w	r3, r4, lr
 8096206:	bf8c      	ite	hi
 8096208:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 809620c:	2400      	movls	r4, #0
 809620e:	fa01 f000 	lsl.w	r0, r1, r0
 8096212:	40ec      	lsrs	r4, r5
 8096214:	ea40 0204 	orr.w	r2, r0, r4
 8096218:	e004      	b.n	8096224 <__b2d+0x94>
 809621a:	460a      	mov	r2, r1
 809621c:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8096220:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8096224:	4610      	mov	r0, r2
 8096226:	4619      	mov	r1, r3
 8096228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0809622a <__d2b>:
 809622a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 809622e:	461c      	mov	r4, r3
 8096230:	2101      	movs	r1, #1
 8096232:	4690      	mov	r8, r2
 8096234:	9e08      	ldr	r6, [sp, #32]
 8096236:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8096238:	f7ff fcc0 	bl	8095bbc <_Balloc>
 809623c:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8096240:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8096244:	4607      	mov	r7, r0
 8096246:	b10c      	cbz	r4, 809624c <__d2b+0x22>
 8096248:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 809624c:	9201      	str	r2, [sp, #4]
 809624e:	f1b8 0f00 	cmp.w	r8, #0
 8096252:	d019      	beq.n	8096288 <__d2b+0x5e>
 8096254:	a802      	add	r0, sp, #8
 8096256:	f840 8d08 	str.w	r8, [r0, #-8]!
 809625a:	f7ff fd94 	bl	8095d86 <__lo0bits>
 809625e:	9b00      	ldr	r3, [sp, #0]
 8096260:	b148      	cbz	r0, 8096276 <__d2b+0x4c>
 8096262:	9a01      	ldr	r2, [sp, #4]
 8096264:	f1c0 0120 	rsb	r1, r0, #32
 8096268:	fa02 f101 	lsl.w	r1, r2, r1
 809626c:	430b      	orrs	r3, r1
 809626e:	40c2      	lsrs	r2, r0
 8096270:	617b      	str	r3, [r7, #20]
 8096272:	9201      	str	r2, [sp, #4]
 8096274:	e000      	b.n	8096278 <__d2b+0x4e>
 8096276:	617b      	str	r3, [r7, #20]
 8096278:	9b01      	ldr	r3, [sp, #4]
 809627a:	2b00      	cmp	r3, #0
 809627c:	bf14      	ite	ne
 809627e:	2102      	movne	r1, #2
 8096280:	2101      	moveq	r1, #1
 8096282:	61bb      	str	r3, [r7, #24]
 8096284:	6139      	str	r1, [r7, #16]
 8096286:	e007      	b.n	8096298 <__d2b+0x6e>
 8096288:	a801      	add	r0, sp, #4
 809628a:	f7ff fd7c 	bl	8095d86 <__lo0bits>
 809628e:	9b01      	ldr	r3, [sp, #4]
 8096290:	2101      	movs	r1, #1
 8096292:	617b      	str	r3, [r7, #20]
 8096294:	6139      	str	r1, [r7, #16]
 8096296:	3020      	adds	r0, #32
 8096298:	b134      	cbz	r4, 80962a8 <__d2b+0x7e>
 809629a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 809629e:	4404      	add	r4, r0
 80962a0:	6034      	str	r4, [r6, #0]
 80962a2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80962a6:	e009      	b.n	80962bc <__d2b+0x92>
 80962a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80962ac:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80962b0:	6030      	str	r0, [r6, #0]
 80962b2:	6918      	ldr	r0, [r3, #16]
 80962b4:	f7ff fd47 	bl	8095d46 <__hi0bits>
 80962b8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80962bc:	6028      	str	r0, [r5, #0]
 80962be:	4638      	mov	r0, r7
 80962c0:	b002      	add	sp, #8
 80962c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080962c6 <__ratio>:
 80962c6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80962ca:	4688      	mov	r8, r1
 80962cc:	4669      	mov	r1, sp
 80962ce:	4681      	mov	r9, r0
 80962d0:	f7ff ff5e 	bl	8096190 <__b2d>
 80962d4:	460d      	mov	r5, r1
 80962d6:	4604      	mov	r4, r0
 80962d8:	a901      	add	r1, sp, #4
 80962da:	4640      	mov	r0, r8
 80962dc:	f7ff ff58 	bl	8096190 <__b2d>
 80962e0:	460f      	mov	r7, r1
 80962e2:	4606      	mov	r6, r0
 80962e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80962e8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80962ec:	4620      	mov	r0, r4
 80962ee:	1a9a      	subs	r2, r3, r2
 80962f0:	e89d 000a 	ldmia.w	sp, {r1, r3}
 80962f4:	1ac9      	subs	r1, r1, r3
 80962f6:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 80962fa:	2b00      	cmp	r3, #0
 80962fc:	bfcc      	ite	gt
 80962fe:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 8096302:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 8096306:	4632      	mov	r2, r6
 8096308:	463b      	mov	r3, r7
 809630a:	4629      	mov	r1, r5
 809630c:	f7fc fe68 	bl	8092fe0 <__aeabi_ddiv>
 8096310:	b003      	add	sp, #12
 8096312:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08096316 <__copybits>:
 8096316:	3901      	subs	r1, #1
 8096318:	b510      	push	{r4, lr}
 809631a:	1149      	asrs	r1, r1, #5
 809631c:	6914      	ldr	r4, [r2, #16]
 809631e:	3101      	adds	r1, #1
 8096320:	f102 0314 	add.w	r3, r2, #20
 8096324:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8096328:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 809632c:	42a3      	cmp	r3, r4
 809632e:	4602      	mov	r2, r0
 8096330:	d204      	bcs.n	809633c <__copybits+0x26>
 8096332:	f853 2b04 	ldr.w	r2, [r3], #4
 8096336:	f840 2b04 	str.w	r2, [r0], #4
 809633a:	e7f7      	b.n	809632c <__copybits+0x16>
 809633c:	2300      	movs	r3, #0
 809633e:	428a      	cmp	r2, r1
 8096340:	d202      	bcs.n	8096348 <__copybits+0x32>
 8096342:	f842 3b04 	str.w	r3, [r2], #4
 8096346:	e7fa      	b.n	809633e <__copybits+0x28>
 8096348:	bd10      	pop	{r4, pc}

0809634a <__any_on>:
 809634a:	f100 0214 	add.w	r2, r0, #20
 809634e:	6900      	ldr	r0, [r0, #16]
 8096350:	114b      	asrs	r3, r1, #5
 8096352:	4298      	cmp	r0, r3
 8096354:	b510      	push	{r4, lr}
 8096356:	db0c      	blt.n	8096372 <__any_on+0x28>
 8096358:	dd0c      	ble.n	8096374 <__any_on+0x2a>
 809635a:	f011 011f 	ands.w	r1, r1, #31
 809635e:	d009      	beq.n	8096374 <__any_on+0x2a>
 8096360:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8096364:	fa24 f001 	lsr.w	r0, r4, r1
 8096368:	fa00 f101 	lsl.w	r1, r0, r1
 809636c:	428c      	cmp	r4, r1
 809636e:	d10c      	bne.n	809638a <__any_on+0x40>
 8096370:	e000      	b.n	8096374 <__any_on+0x2a>
 8096372:	4603      	mov	r3, r0
 8096374:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8096378:	4293      	cmp	r3, r2
 809637a:	d904      	bls.n	8096386 <__any_on+0x3c>
 809637c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8096380:	2900      	cmp	r1, #0
 8096382:	d0f9      	beq.n	8096378 <__any_on+0x2e>
 8096384:	e001      	b.n	809638a <__any_on+0x40>
 8096386:	2000      	movs	r0, #0
 8096388:	bd10      	pop	{r4, pc}
 809638a:	2001      	movs	r0, #1
 809638c:	bd10      	pop	{r4, pc}

0809638e <__env_lock>:
 809638e:	4770      	bx	lr

08096390 <__env_unlock>:
 8096390:	4770      	bx	lr

08096392 <link_code_end>:
	...

08096394 <dynalib_user>:
 8096394:	001d 0808 005d 0808 0089 0808 008d 0808     ....]...........
 80963a4:	0000 0000                                   ....

080963a8 <_ZTVN11ArduinoJson9Internals21DynamicJsonBufferBaseINS0_16DefaultAllocatorEEE>:
	...
 80963b0:	00f5 0808 5024 544d 334b 3431 302c 312c     ....$PMTK314,0,1
 80963c0:	302c 312c 302c 302c 302c 302c 302c 302c     ,0,1,0,0,0,0,0,0
 80963d0:	302c 302c 302c 302c 302c 302c 302c 302c     ,0,0,0,0,0,0,0,0
 80963e0:	302c 322a 0038 5024 544d 324b 3032 312c     ,0*28.$PMTK220,1
 80963f0:	3030 2a30 4631 4300 4e41 645f 7461 0061     000*1F.CAN_data.
 8096400:	5047 5f53 6164 6174 4400 464f 645f 7461     GPS_data.DOF_dat
 8096410:	0061 6568 6c6c 006f 6e45 7263 7079 6574     a.hello.Encrypte
 8096420:	2064 6144 6174 203a 4400 6365 7972 7470     d Data: .Decrypt
 8096430:	6465 4420 7461 3a61 0020 6325 4700 6f6c     ed Data: .%c.Glo
 8096440:	6162 206c 6f50 6973 6974 6e6f 6e69 2067     bal Positioning 
 8096450:	7953 7473 6d65 3d00 3d3d 3d3d 3d3d 3d3d     System.=========
 8096460:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     ================
 8096470:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     ================
 8096480:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 003d 614c     =============.La
 8096490:	6974 7574 6564 203a 4c00 6e6f 6967 7574     titude: .Longitu
 80964a0:	6564 203a 4300 4e41 665f 6172 656d 203a     de: .CAN_frame: 
 80964b0:	6d00 7365 6173 6567 6469 2000                    .messageid.

080964bb <CSWTCH.59>:
 80964bb:	0020 0000 0040 0000 2460                          ...@...`

080964c4 <_ZL6spiPtr>:
 80964c4:	3f24 2000 3f34 2000 3f44 2000               $?. 4?. D?. 

080964d0 <_ZTV5SdSpi>:
	...
 80964d8:	13c5 0808 13d5 0808 13c1 0808 1451 0808     ............Q...
 80964e8:	1475 0808 1465 0808 14b9 0808 2020 2021     u...e.......  ! 
 80964f8:	2500 2e64 6425 252e 2e64 6425 0000 0000     .%d.%d.%d.%d....

08096508 <_ZL1K>:
 8096508:	2f98 428a 4491 7137 fbcf b5c0 dba5 e9b5     ./.B.D7q........
 8096518:	c25b 3956 11f1 59f1 82a4 923f 5ed5 ab1c     [.V9...Y..?..^..
 8096528:	aa98 d807 5b01 1283 85be 2431 7dc3 550c     .....[....1$.}.U
 8096538:	5d74 72be b1fe 80de 06a7 9bdc f174 c19b     t].r........t...
 8096548:	69c1 e49b 4786 efbe 9dc6 0fc1 a1cc 240c     .i...G.........$
 8096558:	2c6f 2de9 84aa 4a74 a9dc 5cb0 88da 76f9     o,.-..tJ...\...v
 8096568:	5152 983e c66d a831 27c8 b003 7fc7 bf59     RQ>.m.1..'....Y.
 8096578:	0bf3 c6e0 9147 d5a7 6351 06ca 2967 1429     ....G...Qc..g)).
 8096588:	0a85 27b7 2138 2e1b 6dfc 4d2c 0d13 5338     ...'8!...m,M..8S
 8096598:	7354 650a 0abb 766a c92e 81c2 2c85 9272     Ts.e..jv.....,r.
 80965a8:	e8a1 a2bf 664b a81a 8b70 c24b 51a3 c76c     ....Kf..p.K..Ql.
 80965b8:	e819 d192 0624 d699 3585 f40e a070 106a     ....$....5..p.j.
 80965c8:	c116 19a4 6c08 1e37 774c 2748 bcb5 34b0     .....l7.LwH'...4
 80965d8:	0cb3 391c aa4a 4ed8 ca4f 5b9c 6ff3 682e     ...9J..NO..[.o.h
 80965e8:	82ee 748f 636f 78a5 7814 84c8 0208 8cc7     ...toc.x.x......
 80965f8:	fffa 90be 6ceb a450 a3f7 bef9 78f2 c671     .....lP......xq.
 8096608:	862a 8648 0df7 0501 000c 0000               *.H.........

08096614 <mbedtls_sha1_info>:
 8096614:	0004 0000 6bd9 0809 0014 0000 0040 0000     .....k......@...
 8096624:	3581 0808 357d 0808 3579 0808 5de9 0808     .5..}5..y5...]..
 8096634:	3563 0808 3551 0808 354d 0808 3549 0808     c5..Q5..M5..I5..

08096644 <mbedtls_sha224_info>:
 8096644:	0005 0000 6a4a 0809 001c 0000 0040 0000     ....Jj......@...
 8096654:	35c9 0808 35c5 0808 35c1 0808 35b5 0808     .5...5...5...5..
 8096664:	359f 0808 358d 0808 3589 0808 3585 0808     .5...5...5...5..

08096674 <mbedtls_sha384_info>:
 8096674:	0007 0000 75f1 0809 0030 0000 0080 0000     .....u..0.......
 8096684:	3619 0808 3615 0808 3611 0808 3605 0808     .6...6...6...6..
 8096694:	35ef 0808 35dd 0808 35d9 0808 35d5 0808     .5...5...5...5..

080966a4 <mbedtls_sha512_info>:
 80966a4:	0008 0000 6aad 0809 0040 0000 0080 0000     .....j..@.......
 80966b4:	361f 0808 3615 0808 3611 0808 360b 0808     .6...6...6...6..
 80966c4:	35ef 0808 35dd 0808 35d9 0808 35d5 0808     .5...5...5...5..

080966d4 <mbedtls_sha256_info>:
 80966d4:	0006 0000 7651 0809 0020 0000 0040 0000     ....Qv.. ...@...
 80966e4:	35cf 0808 35c5 0808 35c1 0808 35bb 0808     .5...5...5...5..
 80966f4:	359f 0808 358d 0808 3589 0808 3585 0808     .5...5...5...5..

08096704 <_ZL18oid_x520_attr_type>:
 8096704:	6eac 0809 0003 0000 6eb0 0809 6ec1 0809     .n.......n...n..
 8096714:	800d 0809 6ecd 0809 0003 0000 6ed1 0809     .....n.......n..
 8096724:	6ee3 0809 9ae3 0809 6eeb 0809 0003 0000     .n.......n......
 8096734:	6eef 0809 6efe 0809 6f07 0809 6f09 0809     .n...n...o...o..
 8096744:	0003 0000 6f0d 0809 6f19 0809 6f1f 0809     .....o...o...o..
 8096754:	6f22 0809 0003 0000 6f26 0809 6f3d 0809     "o......&o..=o..
 8096764:	6f4a 0809 6f4c 0809 0003 0000 6f50 0809     Jo..Lo......Po..
 8096774:	6f6d 0809 6f76 0809 6f79 0809 0009 0000     mo..vo..yo......
 8096784:	6f83 0809 6f90 0809 6f83 0809 6f9f 0809     .o...o...o...o..
 8096794:	0003 0000 6fa3 0809 6fb6 0809 6fa9 0809     .....o...o...o..
 80967a4:	6fc4 0809 0003 0000 6fc8 0809 6fdc 0809     .o.......o...o..
 80967b4:	6fce 0809 6feb 0809 0003 0000 6fef 0809     .o...o.......o..
 80967c4:	7000 0809 6ff5 0809 700c 0809 0003 0000     .p...o...p......
 80967d4:	7010 0809 701e 0809 7026 0809 7029 0809     .p...p..&p..)p..
 80967e4:	0003 0000 702d 0809 703d 0809 7048 0809     ....-p..=p..Hp..
 80967f4:	704b 0809 0003 0000 704f 0809 705e 0809     Kp......Op..^p..
 8096804:	7055 0809 7067 0809 0003 0000 706b 0809     Up..gp......kp..
 8096814:	7085 0809 7071 0809 709a 0809 0003 0000     .p..qp...p......
 8096824:	709e 0809 70aa 0809 70a4 0809 70b0 0809     .p...p...p...p..
 8096834:	0003 0000 70b4 0809 70c6 0809 70ba 0809     .....p...p...p..
 8096844:	70e3 0809 0003 0000 70e7 0809 70f7 0809     .p.......p...p..
 8096854:	70ed 0809 7101 0809 000a 0000 710c 0809     .p...q.......q..
 8096864:	711f 0809 7130 0809 7133 0809 0003 0000     .q..0q..3q......
 8096874:	7137 0809 714e 0809 713d 0809 0000 0000     7q..Nq..=q......
	...

08096894 <_ZL17oid_ext_key_usage>:
 8096894:	6cc5 0809 0008 0000 6cce 0809 6cdf 0809     .l.......l...l..
 80968a4:	6cfd 0809 0008 0000 6d06 0809 6d17 0809     .l.......m...m..
 80968b4:	6d35 0809 0008 0000 6d3e 0809 6d50 0809     5m......>m..Pm..
 80968c4:	6d5d 0809 0008 0000 6d66 0809 6d7c 0809     ]m......fm..|m..
 80968d4:	6d8e 0809 0008 0000 6d97 0809 6daa 0809     .m.......m...m..
 80968e4:	6db8 0809 0008 0000 6dc1 0809 6dd3 0809     .m.......m...m..
	...

08096904 <_ZL10oid_pk_alg>:
 8096904:	6b4f 0809 0009 0000 6b59 0809 6b67 0809     Ok......Yk..gk..
 8096914:	0001 0000 6b6b 0809 0007 0000 6b73 0809     ....kk......sk..
 8096924:	6b82 0809 0002 0000 6b91 0809 0005 0000     .k.......k......
 8096934:	6b97 0809 6b9f 0809 0003 0000 0000 0000     .k...k..........
	...

08096954 <_ZL14oid_cipher_alg>:
 8096954:	6b1f 0809 0005 0000 6b25 0809 69fb 0809     .k......%k...i..
 8096964:	0021 0000 6b2c 0809 0008 0000 6b35 0809     !...,k......5k..
 8096974:	6b42 0809 0025 0000 0000 0000 0000 0000     Bk..%...........
	...
 8096990:	862a 8648 0df7 0c01 0301 7000 6562 6957     *.H........pbeWi
 80969a0:	6874 4853 4141 646e 2d33 654b 5479 6972     thSHAAnd3-KeyTri
 80969b0:	6c70 4465 5345 432d 4342 5000 4542 7720     pleDES-CBC.PBE w
 80969c0:	7469 2068 4853 3141 6120 646e 3320 4b2d     ith SHA1 and 3-K
 80969d0:	7965 3320 4544 0053 862a 8648 0df7 0c01     ey 3DES.*.H.....
 80969e0:	0401 7000 6562 6957 6874 4853 4141 646e     ...pbeWithSHAAnd
 80969f0:	2d32 654b 5479 6972 6c70 4465 5345 432d     2-KeyTripleDES-C
 8096a00:	4342 5000 4542 7720 7469 2068 4853 3141     BC.PBE with SHA1
 8096a10:	6120 646e 3220 4b2d 7965 3320 4544 0053      and 2-Key 3DES.
 8096a20:	862a 8648 0df7 0702 6800 616d 5363 4148     *.H......hmacSHA
 8096a30:	0031 4d48 4341 532d 4148 312d 2a00 4886     1.HMAC-SHA-1.*.H
 8096a40:	f786 020d 0008 6d68 6361 4853 3241 3432     ......hmacSHA224
 8096a50:	4800 414d 2d43 4853 2d41 3232 0034 862a     .HMAC-SHA-224.*.
 8096a60:	8648 0df7 0902 6800 616d 5363 4148 3532     H......hmacSHA25
 8096a70:	0036 4d48 4341 532d 4148 322d 3635 2a00     6.HMAC-SHA-256.*
 8096a80:	4886 f786 020d 000a 6d68 6361 4853 3341     .H......hmacSHA3
 8096a90:	3438 4800 414d 2d43 4853 2d41 3833 0034     84.HMAC-SHA-384.
 8096aa0:	862a 8648 0df7 0b02 6800 616d 5363 4148     *.H......hmacSHA
 8096ab0:	3135 0032 4d48 4341 532d 4148 352d 3231     512.HMAC-SHA-512
 8096ac0:	2b00 030e 1a02 6900 2d64 6873 3161 6000     .+.....id-sha1.`
 8096ad0:	4886 6501 0403 0402 6900 2d64 6873 3261     .H.e.....id-sha2
 8096ae0:	3432 6000 4886 6501 0403 0102 6900 2d64     24.`.H.e.....id-
 8096af0:	6873 3261 3635 6000 4886 6501 0403 0202     sha256.`.H.e....
 8096b00:	6900 2d64 6873 3361 3438 6000 4886 6501     .id-sha384.`.H.e
 8096b10:	0403 0302 6900 2d64 6873 3561 3231 2b00     .....id-sha512.+
 8096b20:	030e 0702 6400 7365 4243 0043 862a 8648     .....desCBC.*.H.
 8096b30:	0df7 0703 6400 7365 652d 6564 2d33 6263     .....des-ede3-cb
 8096b40:	0063 4544 2d53 4445 3345 432d 4342 2a00     c.DES-EDE3-CBC.*
 8096b50:	4886 f786 010d 0101 7200 6173 6e45 7263     .H.......rsaEncr
 8096b60:	7079 6974 6e6f 5200 4153 2a00 4886 3dce     yption.RSA.*.H.=
 8096b70:	0102 6900 2d64 6365 7550 6c62 6369 654b     ...id-ecPublicKe
 8096b80:	0079 6547 656e 6972 2063 4345 6b20 7965     y.Generic EC key
 8096b90:	2b00 0481 0c01 6900 2d64 6365 4844 4500     .+.....id-ecDH.E
 8096ba0:	2043 656b 2079 6f66 2072 4345 4844 2a00     C key for ECDH.*
 8096bb0:	4886 f786 010d 0501 7300 6168 312d 6957     .H.......sha-1Wi
 8096bc0:	6874 5352 4541 636e 7972 7470 6f69 006e     thRSAEncryption.
 8096bd0:	5352 2041 6977 6874 5320 4148 0031 862a     RSA with SHA1.*.
 8096be0:	8648 0df7 0101 000e 6873 3261 3432 6957     H.......sha224Wi
 8096bf0:	6874 5352 4541 636e 7972 7470 6f69 006e     thRSAEncryption.
 8096c00:	5352 2041 6977 6874 5320 4148 322d 3432     RSA with SHA-224
 8096c10:	2a00 4886 f786 010d 0b01 7300 6168 3532     .*.H.......sha25
 8096c20:	5736 7469 5268 4153 6e45 7263 7079 6974     6WithRSAEncrypti
 8096c30:	6e6f 5200 4153 7720 7469 2068 4853 2d41     on.RSA with SHA-
 8096c40:	3532 0036 862a 8648 0df7 0101 000c 6873     256.*.H.......sh
 8096c50:	3361 3438 6957 6874 5352 4541 636e 7972     a384WithRSAEncry
 8096c60:	7470 6f69 006e 5352 2041 6977 6874 5320     ption.RSA with S
 8096c70:	4148 332d 3438 2a00 4886 f786 010d 0d01     HA-384.*.H......
 8096c80:	7300 6168 3135 5732 7469 5268 4153 6e45     .sha512WithRSAEn
 8096c90:	7263 7079 6974 6e6f 5200 4153 7720 7469     cryption.RSA wit
 8096ca0:	2068 4853 2d41 3135 0032 0e2b 0203 001d     h SHA-512.+.....
 8096cb0:	862a 8648 0df7 0101 000a 5352 5341 4153     *.H.......RSASSA
 8096cc0:	502d 5353 2b00 0106 0505 0307 0001 6469     -PSS.+........id
 8096cd0:	6b2d 2d70 6573 7672 7265 7541 6874 5400     -kp-serverAuth.T
 8096ce0:	534c 5720 6265 5320 7265 6576 2072 7541     LS Web Server Au
 8096cf0:	6874 6e65 6974 6163 6974 6e6f 2b00 0106     thentication.+..
 8096d00:	0505 0307 0002 6469 6b2d 2d70 6c63 6569     ......id-kp-clie
 8096d10:	746e 7541 6874 5400 534c 5720 6265 4320     ntAuth.TLS Web C
 8096d20:	696c 6e65 2074 7541 6874 6e65 6974 6163     lient Authentica
 8096d30:	6974 6e6f 2b00 0106 0505 0307 0003 6469     tion.+........id
 8096d40:	6b2d 2d70 6f63 6564 6953 6e67 6e69 0067     -kp-codeSigning.
 8096d50:	6f43 6564 5320 6769 696e 676e 2b00 0106     Code Signing.+..
 8096d60:	0505 0307 0004 6469 6b2d 2d70 6d65 6961     ......id-kp-emai
 8096d70:	506c 6f72 6574 7463 6f69 006e 2d45 616d     lProtection.E-ma
 8096d80:	6c69 5020 6f72 6574 7463 6f69 006e 062b     il Protection.+.
 8096d90:	0501 0705 0803 6900 2d64 706b 742d 6d69     .......id-kp-tim
 8096da0:	5365 6174 706d 6e69 0067 6954 656d 5320     eStamping.Time S
 8096db0:	6174 706d 6e69 0067 062b 0501 0705 0903     tamping.+.......
 8096dc0:	6900 2d64 706b 4f2d 5343 5350 6769 696e     .id-kp-OCSPSigni
 8096dd0:	676e 4f00 5343 2050 6953 6e67 6e69 0067     ng.OCSP Signing.
 8096de0:	1d55 0013 6469 632d 2d65 6162 6973 4363     U...id-ce-basicC
 8096df0:	6e6f 7473 6172 6e69 7374 4200 7361 6369     onstraints.Basic
 8096e00:	4320 6e6f 7473 6172 6e69 7374 5500 0f1d      Constraints.U..
 8096e10:	6900 2d64 6563 6b2d 7965 7355 6761 0065     .id-ce-keyUsage.
 8096e20:	1d55 0025 6469 632d 2d65 7865 4b74 7965     U.%.id-ce-extKey
 8096e30:	7355 6761 0065 7845 6574 646e 6465 4b20     Usage.Extended K
 8096e40:	7965 5520 6173 6567 5500 111d 6900 2d64     ey Usage.U...id-
 8096e50:	6563 732d 6275 656a 7463 6c41 4e74 6d61     ce-subjectAltNam
 8096e60:	0065 7553 6a62 6365 2074 6c41 2074 614e     e.Subject Alt Na
 8096e70:	656d 6000 4886 8601 42f8 0101 6900 2d64     me.`.H...B...id-
 8096e80:	656e 7374 6163 6570 632d 7265 7474 7079     netscape-certtyp
 8096e90:	0065 654e 7374 6163 6570 4320 7265 6974     e.Netscape Certi
 8096ea0:	6966 6163 6574 5420 7079 0065 0455 0003     ficate Type.U...
 8096eb0:	6469 612d 2d74 6f63 6d6d 6e6f 614e 656d     id-at-commonName
 8096ec0:	4300 6d6f 6f6d 206e 614e 656d 5500 0604     .Common Name.U..
 8096ed0:	6900 2d64 7461 632d 756f 746e 7972 614e     .id-at-countryNa
 8096ee0:	656d 4300 756f 746e 7972 5500 0704 6900     me.Country.U...i
 8096ef0:	2d64 7461 6c2d 636f 6c61 7469 0079 6f4c     d-at-locality.Lo
 8096f00:	6163 696c 7974 4c00 5500 0804 6900 2d64     cality.L.U...id-
 8096f10:	7461 732d 6174 6574 5300 6174 6574 5300     at-state.State.S
 8096f20:	0054 0455 000a 6469 612d 2d74 726f 6167     T.U...id-at-orga
 8096f30:	696e 617a 6974 6e6f 614e 656d 4f00 6772     nizationName.Org
 8096f40:	6e61 7a69 7461 6f69 006e 004f 0455 000b     anization.O.U...
 8096f50:	6469 612d 2d74 726f 6167 696e 617a 6974     id-at-organizati
 8096f60:	6e6f 6c61 6e55 7469 614e 656d 4f00 6772     onalUnitName.Org
 8096f70:	5520 696e 0074 554f 2a00 4886 f786 010d      Unit.OU.*.H....
 8096f80:	0109 6500 616d 6c69 6441 7264 7365 0073     ...emailAddress.
 8096f90:	2d45 616d 6c69 6120 6464 6572 7373 5500     E-mail address.U
 8096fa0:	0504 6900 2d64 7461 732d 7265 6169 4e6c     ...id-at-serialN
 8096fb0:	6d75 6562 0072 6553 6972 6c61 6e20 6d75     umber.Serial num
 8096fc0:	6562 0072 0455 0010 6469 612d 2d74 6f70     ber.U...id-at-po
 8096fd0:	7473 6c61 6441 7264 7365 0073 6f50 7473     stalAddress.Post
 8096fe0:	6c61 6120 6464 6572 7373 5500 1104 6900     al address.U...i
 8096ff0:	2d64 7461 702d 736f 6174 436c 646f 0065     d-at-postalCode.
 8097000:	6f50 7473 6c61 6320 646f 0065 0455 0004     Postal code.U...
 8097010:	6469 612d 2d74 7573 4e72 6d61 0065 7553     id-at-surName.Su
 8097020:	6e72 6d61 0065 4e53 5500 2a04 6900 2d64     rname.SN.U.*.id-
 8097030:	7461 672d 7669 6e65 614e 656d 4700 7669     at-givenName.Giv
 8097040:	6e65 6e20 6d61 0065 4e47 5500 2b04 6900     en name.GN.U.+.i
 8097050:	2d64 7461 692d 696e 6974 6c61 0073 6e49     d-at-initials.In
 8097060:	7469 6169 736c 5500 2c04 6900 2d64 7461     itials.U.,.id-at
 8097070:	672d 6e65 7265 7461 6f69 516e 6175 696c     -generationQuali
 8097080:	6966 7265 4700 6e65 7265 7461 6f69 206e     fier.Generation 
 8097090:	7571 6c61 6669 6569 0072 0455 000c 6469     qualifier.U...id
 80970a0:	612d 2d74 6974 6c74 0065 6954 6c74 0065     -at-title.Title.
 80970b0:	0455 002e 6469 612d 2d74 6e64 7551 6c61     U...id-at-dnQual
 80970c0:	6669 6569 0072 6944 7473 6e69 7567 7369     ifier.Distinguis
 80970d0:	6568 2064 614e 656d 7120 6175 696c 6966     hed Name qualifi
 80970e0:	7265 5500 4104 6900 2d64 7461 702d 6573     er.U.A.id-at-pse
 80970f0:	6475 6e6f 6d79 5000 6573 6475 6e6f 6d79     udonym.Pseudonym
 8097100:	0900 2692 9389 2cf2 0164 0019 6469 642d     ...&...,d...id-d
 8097110:	6d6f 6961 436e 6d6f 6f70 656e 746e 4400     omainComponent.D
 8097120:	6d6f 6961 206e 6f63 706d 6e6f 6e65 0074     omain component.
 8097130:	4344 5500 2d04 6900 2d64 7461 752d 696e     DC.U.-.id-at-uni
 8097140:	7571 4965 6564 746e 6669 6569 0072 6e55     queIdentifier.Un
 8097150:	7169 6575 4920 6564 746e 6669 6569 0072     ique Identifier.

08097160 <_ZL18oid_pkcs12_pbe_alg>:
 8097160:	6990 0809 000a 0000 699b 0809 69bb 0809     .i.......i...i..
 8097170:	2504 0000 69d8 0809 000a 0000 69e3 0809     .%...i.......i..
 8097180:	6a03 0809 2304 0000 0000 0000 0000 0000     .j...#..........
	...

0809719c <_ZL10oid_md_alg>:
 809719c:	6ac1 0809 0005 0000 6ac7 0809 6a37 0809     .j.......j..7j..
 80971ac:	0004 0000 6acf 0809 0009 0000 6ad9 0809     .....j.......j..
 80971bc:	6c09 0809 0005 0000 6ae3 0809 0009 0000     .l.......j......
 80971cc:	6aed 0809 6c3c 0809 0006 0000 6af7 0809     .j..<l.......j..
 80971dc:	0009 0000 6b01 0809 6c6f 0809 0007 0000     .....k..ol......
 80971ec:	6b0b 0809 0009 0000 6b15 0809 6ca2 0809     .k.......k...l..
 80971fc:	0008 0000 0000 0000 0000 0000 0000 0000     ................
	...

08097214 <_ZL11oid_sig_alg>:
 8097214:	6baf 0809 0009 0000 6bb9 0809 6bd0 0809     .k.......k...k..
 8097224:	0104 0000 6bde 0809 0009 0000 6be8 0809     .....k.......k..
 8097234:	6c00 0809 0105 0000 6c11 0809 0009 0000     .l.......l......
 8097244:	6c1b 0809 6c33 0809 0106 0000 6c44 0809     .l..3l......Dl..
 8097254:	0009 0000 6c4e 0809 6c66 0809 0107 0000     ....Nl..fl......
 8097264:	6c77 0809 0009 0000 6c81 0809 6c99 0809     wl.......l...l..
 8097274:	0108 0000 6caa 0809 0005 0000 6bb9 0809     .....l.......k..
 8097284:	6bd0 0809 0104 0000 6cb0 0809 0009 0000     .k.......l......
 8097294:	6cba 0809 6cba 0809 0600 0000 0000 0000     .l...l..........
	...

080972b4 <_ZL11oid_md_hmac>:
 80972b4:	6a20 0809 0008 0000 6a29 0809 6a32 0809      j......)j..2j..
 80972c4:	0004 0000 6a3d 0809 0008 0000 6a46 0809     ....=j......Fj..
 80972d4:	6a51 0809 0005 0000 6a5e 0809 0008 0000     Qj......^j......
 80972e4:	6a67 0809 6a72 0809 0006 0000 6a7f 0809     gj..rj.......j..
 80972f4:	0008 0000 6a88 0809 6a93 0809 0007 0000     .....j...j......
 8097304:	6aa0 0809 0008 0000 6aa9 0809 6ab4 0809     .j.......j...j..
 8097314:	0008 0000 0000 0000 0000 0000 0000 0000     ................
	...

0809732c <_ZL12oid_x509_ext>:
 809732c:	6de0 0809 0003 0000 6de4 0809 6dfb 0809     .m.......m...m..
 809733c:	0100 0000 6e0d 0809 0003 0000 6e11 0809     .....n.......n..
 809734c:	6e3f 0809 0004 0000 6e20 0809 0003 0000     ?n...... n......
 809735c:	6e24 0809 6e36 0809 0800 0000 6e49 0809     $n..6n......In..
 809736c:	0003 0000 6e4d 0809 6e62 0809 0020 0000     ....Mn..bn.. ...
 809737c:	6e73 0809 0009 0000 6e7d 0809 6e92 0809     sn......}n...n..
 809738c:	0000 0001 0000 0000 0000 0000 0000 0000     ................
	...

080973a4 <_ZL16aes_192_cbc_info>:
 80973a4:	0206 0000 00c0 0000 74cc 0809 0010 0000     .........t......
 80973b4:	0000 0000 0010 0000 755c 0809               ........\u..

080973c0 <_ZL16aes_256_ecb_info>:
 80973c0:	0104 0000 0100 0000 74e4 0809 0010 0000     .........t......
 80973d0:	0000 0000 0010 0000 755c 0809               ........\u..

080973dc <_ZL16aes_128_ecb_info>:
 80973dc:	0102 0000 0080 0000 74fc 0809 0010 0000     .........t......
 80973ec:	0000 0000 0010 0000 755c 0809               ........\u..

080973f8 <_ZL12gcm_aes_info>:
 80973f8:	0002 0000 0000 0000 0000 0000 5ed3 0808     .............^..
 8097408:	5ed3 0808 5ebb 0808 5ea9 0808               .^...^...^..

08097414 <mbedtls_cipher_definitions>:
 8097414:	0002 0000 73dc 0809 0003 0000 7524 0809     .....s......$u..
 8097424:	0004 0000 73c0 0809 0005 0000 7480 0809     .....s.......t..
 8097434:	0006 0000 73a4 0809 0007 0000 7508 0809     .....s.......u..
 8097444:	000e 0000 7540 0809 000f 0000 7464 0809     ....@u......dt..
 8097454:	0010 0000 7578 0809 0000 0000 0000 0000     ....xu..........

08097464 <_ZL16aes_192_gcm_info>:
 8097464:	060f 0000 00c0 0000 74a8 0809 000c 0000     .........t......
 8097474:	0001 0000 0010 0000 73f8 0809               .........s..

08097480 <_ZL16aes_128_cbc_info>:
 8097480:	0205 0000 0080 0000 74d8 0809 0010 0000     .........t......
 8097490:	0000 0000 0010 0000 755c 0809 4541 2d53     ........\u..AES-
 80974a0:	3532 2d36 4347 004d 4541 2d53 3931 2d32     256-GCM.AES-192-
 80974b0:	4347 004d 4541 2d53 3231 2d38 4347 004d     GCM.AES-128-GCM.
 80974c0:	4541 2d53 3532 2d36 4243 0043 4541 2d53     AES-256-CBC.AES-
 80974d0:	3931 2d32 4243 0043 4541 2d53 3231 2d38     192-CBC.AES-128-
 80974e0:	4243 0043 4541 2d53 3532 2d36 4345 0042     CBC.AES-256-ECB.
 80974f0:	4541 2d53 3931 2d32 4345 0042 4541 2d53     AES-192-ECB.AES-
 8097500:	3231 2d38 4345 0042                         128-ECB.

08097508 <_ZL16aes_256_cbc_info>:
 8097508:	0207 0000 0100 0000 74c0 0809 0010 0000     .........t......
 8097518:	0000 0000 0010 0000 755c 0809               ........\u..

08097524 <_ZL16aes_192_ecb_info>:
 8097524:	0103 0000 00c0 0000 74f0 0809 0010 0000     .........t......
 8097534:	0000 0000 0010 0000 755c 0809               ........\u..

08097540 <_ZL16aes_128_gcm_info>:
 8097540:	060e 0000 0080 0000 74b4 0809 000c 0000     .........t......
 8097550:	0001 0000 0010 0000 73f8 0809               .........s..

0809755c <_ZL8aes_info>:
 809755c:	0002 0000 5f17 0808 5f0f 0808 5f0b 0808     ....._..._..._..
 809756c:	5f07 0808 5eef 0808 5edd 0808               ._...^...^..

08097578 <_ZL16aes_256_gcm_info>:
 8097578:	0610 0000 0100 0000 749c 0809 000c 0000     .........t......
 8097588:	0001 0000 0010 0000 73f8 0809 7372 2e61     .........s..rsa.
 8097598:	004e 7372 2e61 0045                         N.rsa.E.

080975a0 <mbedtls_rsa_info>:
 80975a0:	0001 0000 6b67 0809 5f7d 0808 5f1b 0808     ....gk..}_..._..
 80975b0:	6061 0808 6021 0808 5fd5 0808 5f89 0808     a`..!`..._..._..
 80975c0:	5f79 0808 5f5f 0808 5f4d 0808 5f29 0808     y_..__..M_..)_..
 80975d0:	6e75 6e6b 776f 006e 4c54 2d53 5352 2d41     unknown.TLS-RSA-
 80975e0:	4957 4854 412d 5345 322d 3635 472d 4d43     WITH-AES-256-GCM
 80975f0:	532d 4148 3833 0034 4c54 2d53 5352 2d41     -SHA384.TLS-RSA-
 8097600:	4957 4854 412d 5345 312d 3832 472d 4d43     WITH-AES-128-GCM
 8097610:	532d 4148 3532 0036 4c54 2d53 5352 2d41     -SHA256.TLS-RSA-
 8097620:	4957 4854 412d 5345 312d 3832 432d 4342     WITH-AES-128-CBC
 8097630:	532d 4148 3532 0036 4c54 2d53 5352 2d41     -SHA256.TLS-RSA-
 8097640:	4957 4854 412d 5345 322d 3635 432d 4342     WITH-AES-256-CBC
 8097650:	532d 4148 3532 0036 4c54 2d53 5352 2d41     -SHA256.TLS-RSA-
 8097660:	4957 4854 412d 5345 312d 3832 432d 4342     WITH-AES-128-CBC
 8097670:	532d 4148 5400 534c 522d 4153 572d 5449     -SHA.TLS-RSA-WIT
 8097680:	2d48 4541 2d53 3532 2d36 4243 2d43 4853     H-AES-256-CBC-SH
 8097690:	0041 0000                                   A...

08097694 <_ZL23ciphersuite_definitions>:
 8097694:	009d 0000 75d8 0809 0710 0001 0003 0000     .....u..........
 80976a4:	0003 0000 0003 0000 0003 0000 0000 0000     ................
 80976b4:	009c 0000 75f8 0809 060e 0001 0003 0000     .....u..........
 80976c4:	0003 0000 0003 0000 0003 0000 0000 0000     ................
 80976d4:	003c 0000 7618 0809 0605 0001 0003 0000     <....v..........
 80976e4:	0003 0000 0003 0000 0003 0000 0000 0000     ................
 80976f4:	003d 0000 7638 0809 0607 0001 0003 0000     =...8v..........
 8097704:	0003 0000 0003 0000 0003 0000 0000 0000     ................
 8097714:	002f 0000 7658 0809 0405 0001 0003 0000     /...Xv..........
 8097724:	0000 0000 0003 0000 0003 0000 0000 0000     ................
 8097734:	0035 0000 7675 0809 0407 0001 0003 0000     5...uv..........
 8097744:	0000 0000 0003 0000 0003 0000 0000 0000     ................
 8097754:	0000 0000 6b58 0809 0000 0000 0000 0000     ....Xk..........
	...

08097774 <_ZL22ciphersuite_preference>:
 8097774:	c02c 0000 c030 0000 009f 0000 c0ad 0000     ,...0...........
 8097784:	c09f 0000 c024 0000 c028 0000 006b 0000     ....$...(...k...
 8097794:	c00a 0000 c014 0000 0039 0000 c0af 0000     ........9.......
 80977a4:	c0a3 0000 c087 0000 c08b 0000 c07d 0000     ............}...
 80977b4:	c073 0000 c077 0000 00c4 0000 0088 0000     s...w...........
 80977c4:	c02b 0000 c02f 0000 009e 0000 c0ac 0000     +.../...........
 80977d4:	c09e 0000 c023 0000 c027 0000 0067 0000     ....#...'...g...
 80977e4:	c009 0000 c013 0000 0033 0000 c0ae 0000     ........3.......
 80977f4:	c0a2 0000 c086 0000 c08a 0000 c07c 0000     ............|...
 8097804:	c072 0000 c076 0000 00be 0000 0045 0000     r...v.......E...
 8097814:	c008 0000 c012 0000 0016 0000 00ab 0000     ................
 8097824:	c0a7 0000 c038 0000 00b3 0000 c036 0000     ....8.......6...
 8097834:	0091 0000 c091 0000 c09b 0000 c097 0000     ................
 8097844:	c0ab 0000 00aa 0000 c0a6 0000 c037 0000     ............7...
 8097854:	00b2 0000 c035 0000 0090 0000 c090 0000     ....5...........
 8097864:	c096 0000 c09a 0000 c0aa 0000 c034 0000     ............4...
 8097874:	008f 0000 c0ff 0000 009d 0000 c09d 0000     ................
 8097884:	003d 0000 0035 0000 c032 0000 c02a 0000     =...5...2...*...
 8097894:	c00f 0000 c02e 0000 c026 0000 c005 0000     ........&.......
 80978a4:	c0a1 0000 c07b 0000 00c0 0000 0084 0000     ....{...........
 80978b4:	c08d 0000 c079 0000 c089 0000 c075 0000     ....y.......u...
 80978c4:	009c 0000 c09c 0000 003c 0000 002f 0000     ........<.../...
 80978d4:	c031 0000 c029 0000 c00e 0000 c02d 0000     1...).......-...
 80978e4:	c025 0000 c004 0000 c0a0 0000 c07a 0000     %...........z...
 80978f4:	00ba 0000 0041 0000 c08c 0000 c078 0000     ....A.......x...
 8097904:	c088 0000 c074 0000 000a 0000 c00d 0000     ....t...........
 8097914:	c003 0000 00ad 0000 00b7 0000 0095 0000     ................
 8097924:	c093 0000 c099 0000 00ac 0000 00b6 0000     ................
 8097934:	0094 0000 c092 0000 c098 0000 0093 0000     ................
 8097944:	00a9 0000 c0a5 0000 00af 0000 008d 0000     ................
 8097954:	c08f 0000 c095 0000 c0a9 0000 00a8 0000     ................
 8097964:	c0a4 0000 00ae 0000 008c 0000 c08e 0000     ................
 8097974:	c094 0000 c0a8 0000 008b 0000 c007 0000     ................
 8097984:	c011 0000 c033 0000 008e 0000 0005 0000     ....3...........
 8097994:	0004 0000 c00c 0000 c002 0000 0092 0000     ................
 80979a4:	008a 0000 0015 0000 0009 0000 c006 0000     ................
 80979b4:	c010 0000 c03b 0000 c03a 0000 c039 0000     ....;...:...9...
 80979c4:	00b5 0000 00b4 0000 002d 0000 003b 0000     ........-...;...
 80979d4:	0002 0000 0001 0000 c00b 0000 c001 0000     ................
 80979e4:	00b9 0000 00b8 0000 002e 0000 00b1 0000     ................
 80979f4:	00b0 0000 002c 0000 0000 0000 2b20 0020     ....,....... + .
 8097a04:	202c 2500 3d73 3f00 3d3f 2500 3230 2558     , .%s=.??=.%02X%
 8097a14:	0073 2e2e 2e2e 3f00 3f3f 2500 2073 656b     s......???.%s ke
 8097a24:	2079 6973 657a 2a00 4886 f786 010d 010c     y size.*.H......
 8097a34:	0001 862a 8648 0df7 0501 000d 2d2d 2d2d     ..*.H.......----
 8097a44:	452d 444e 5220 4153 5020 4952 4156 4554     -END RSA PRIVATE
 8097a54:	4b20 5945 2d2d 2d2d 002d 2d2d 2d2d 422d      KEY-----.-----B
 8097a64:	4745 4e49 5220 4153 5020 4952 4156 4554     EGIN RSA PRIVATE
 8097a74:	4b20 5945 2d2d 2d2d 002d 2d2d 2d2d 452d      KEY-----.-----E
 8097a84:	444e 5020 4952 4156 4554 4b20 5945 2d2d     ND PRIVATE KEY--
 8097a94:	2d2d 002d 2d2d 2d2d 422d 4745 4e49 5020     ---.-----BEGIN P
 8097aa4:	4952 4156 4554 4b20 5945 2d2d 2d2d 002d     RIVATE KEY-----.
 8097ab4:	2d2d 2d2d 452d 444e 4520 434e 5952 5450     -----END ENCRYPT
 8097ac4:	4445 5020 4952 4156 4554 4b20 5945 2d2d     ED PRIVATE KEY--
 8097ad4:	2d2d 002d 2d2d 2d2d 422d 4745 4e49 4520     ---.-----BEGIN E
 8097ae4:	434e 5952 5450 4445 5020 4952 4156 4554     NCRYPTED PRIVATE
 8097af4:	4b20 5945 2d2d 2d2d 002d 2d2d 2d2d 452d      KEY-----.-----E
 8097b04:	444e 5020 4255 494c 2043 454b 2d59 2d2d     ND PUBLIC KEY---
 8097b14:	2d2d 2d00 2d2d 2d2d 4542 4947 204e 5550     --.-----BEGIN PU
 8097b24:	4c42 4349 4b20 5945 2d2d 2d2d 002d 0000     BLIC KEY-----...
 8097b34:	0000 0000                                   ....

08097b38 <_ZL5last4>:
	...
 8097b40:	1c20 0000 0000 0000 3840 0000 0000 0000      .......@8......
 8097b50:	2460 0000 0000 0000 7080 0000 0000 0000     `$.......p......
 8097b60:	6ca0 0000 0000 0000 48c0 0000 0000 0000     .l.......H......
 8097b70:	54e0 0000 0000 0000 e100 0000 0000 0000     .T..............
 8097b80:	fd20 0000 0000 0000 d940 0000 0000 0000      .......@.......
 8097b90:	c560 0000 0000 0000 9180 0000 0000 0000     `...............
 8097ba0:	8da0 0000 0000 0000 a9c0 0000 0000 0000     ................
 8097bb0:	b5e0 0000 0000 0000                         ........

08097bb8 <_ZL14base64_dec_map>:
 8097bb8:	7f7f 7f7f 7f7f 7f7f 7f7f 7f7f 7f7f 7f7f     ................
 8097bc8:	7f7f 7f7f 7f7f 7f7f 7f7f 7f7f 7f7f 7f7f     ................
 8097bd8:	7f7f 7f7f 7f7f 7f7f 7f7f 3e7f 7f7f 3f7f     ...........>...?
 8097be8:	3534 3736 3938 3b3a 3d3c 7f7f 407f 7f7f     456789:;<=...@..
 8097bf8:	007f 0201 0403 0605 0807 0a09 0c0b 0e0d     ................
 8097c08:	100f 1211 1413 1615 1817 7f19 7f7f 7f7f     ................
 8097c18:	1a7f 1c1b 1e1d 201f 2221 2423 2625 2827     ....... !"#$%&'(
 8097c28:	2a29 2c2b 2e2d 302f 3231 7f33 7f7f 7f7f     )*+,-./0123.....

08097c38 <CSWTCH.21>:
 8097c38:	6614 0809 6644 0809 66d4 0809 6674 0809     .f..Df...f..tf..
 8097c48:	66a4 0809                                   .f..

08097c4c <mbedtls_x509_crt_profile_default>:
 8097c4c:	00f0 0000 ffff 0fff ffff 0fff 0800 0000     ................
 8097c5c:	7274 6575 6600 6c61 6573 0a00 6543 7472     true.false..Cert
 8097c6c:	6669 6369 7461 2065 7369 7520 696e 696e     ificate is unini
 8097c7c:	6974 6c61 7369 6465 0a21 2500 6373 7265     tialised!..%scer
 8097c8c:	2e74 7620 7265 6973 6e6f 2020 2020 3a20     t. version     :
 8097c9c:	2520 0a64 2500 7373 7265 6169 206c 756e      %d..%sserial nu
 8097cac:	626d 7265 2020 2020 3a20 0020 250a 6973     mber     : ..%si
 8097cbc:	7373 6575 2072 616e 656d 2020 2020 2020     ssuer name      
 8097ccc:	3a20 0020 250a 7373 6275 656a 7463 6e20      : ..%ssubject n
 8097cdc:	6d61 2065 2020 2020 3a20 0020 250a 6973     ame      : ..%si
 8097cec:	7373 6575 2064 6f20 206e 2020 2020 2020     ssued  on       
 8097cfc:	3a20 2520 3430 2d64 3025 6432 252d 3230      : %04d-%02d-%02
 8097d0c:	2064 3025 6432 253a 3230 3a64 3025 6432     d %02d:%02d:%02d
 8097d1c:	0a00 7325 7865 6970 6572 2073 6e6f 2020     ..%sexpires on  
 8097d2c:	2020 2020 2020 203a 3025 6434 252d 3230           : %04d-%02
 8097d3c:	2d64 3025 6432 2520 3230 3a64 3025 6432     d-%02d %02d:%02d
 8097d4c:	253a 3230 0064 250a 7373 6769 656e 2064     :%02d..%ssigned 
 8097d5c:	7375 6e69 2067 2020 2020 3a20 0020 250a     using      : ..%
 8097d6c:	2573 312d 7338 203a 6425 6220 7469 0073     s%-18s: %d bits.
 8097d7c:	250a 6273 7361 6369 6320 6e6f 7473 6172     .%sbasic constra
 8097d8c:	6e69 7374 3a20 4320 3d41 7325 2c00 6d20     ints : CA=%s., m
 8097d9c:	7861 705f 7461 6c68 6e65 253d 0064 250a     ax_pathlen=%d..%
 8097dac:	7373 6275 656a 7463 6120 746c 6e20 6d61     ssubject alt nam
 8097dbc:	2065 3a20 0020 250a 6373 7265 2e74 7420     e  : ..%scert. t
 8097dcc:	7079 2065 2020 2020 2020 3a20 0020 7325     ype        : .%s
 8097ddc:	5353 204c 6c43 6569 746e 2500 5373 4c53     SSL Client.%sSSL
 8097dec:	5320 7265 6576 0072 7325 6d45 6961 006c      Server.%sEmail.
 8097dfc:	7325 624f 656a 7463 5320 6769 696e 676e     %sObject Signing
 8097e0c:	2500 5273 7365 7265 6576 0064 7325 5353     .%sReserved.%sSS
 8097e1c:	204c 4143 2500 4573 616d 6c69 4320 0041     L CA.%sEmail CA.
 8097e2c:	7325 624f 656a 7463 5320 6769 696e 676e     %sObject Signing
 8097e3c:	4320 0041 250a 6b73 7965 7520 6173 6567      CA..%skey usage
 8097e4c:	2020 2020 2020 2020 3a20 0020 7325 6944              : .%sDi
 8097e5c:	6967 6174 206c 6953 6e67 7461 7275 0065     gital Signature.
 8097e6c:	7325 6f4e 206e 6552 7570 6964 7461 6f69     %sNon Repudiatio
 8097e7c:	006e 7325 654b 2079 6e45 6963 6870 7265     n.%sKey Encipher
 8097e8c:	656d 746e 2500 4473 7461 2061 6e45 6963     ment.%sData Enci
 8097e9c:	6870 7265 656d 746e 2500 4b73 7965 4120     pherment.%sKey A
 8097eac:	7267 6565 656d 746e 2500 4b73 7965 4320     greement.%sKey C
 8097ebc:	7265 2074 6953 6e67 2500 4373 4c52 5320     ert Sign.%sCRL S
 8097ecc:	6769 006e 7325 6e45 6963 6870 7265 4f20     ign.%sEncipher O
 8097edc:	6c6e 0079 7325 6544 6963 6870 7265 4f20     nly.%sDecipher O
 8097eec:	6c6e 0079 250a 6573 7478 6b20 7965 7520     nly..%sext key u
 8097efc:	6173 6567 2020 2020 3a20 0020 7325 7325     sage     : .%s%s
 8097f0c:	2500 2573 0a73 2500 5573 6b6e 6f6e 6e77     .%s%s..%sUnknown
 8097f1c:	7220 6165 6f73 206e 7428 6968 2073 6873      reason (this sh
 8097f2c:	756f 646c 6e20 746f 6820 7061 6570 296e     ould not happen)
 8097f3c:	000a 2e2a 2d00 2d2d 2d2d 4542 4947 204e     ..*..-----BEGIN 
 8097f4c:	4543 5452 4649 4349 5441 2d45 2d2d 2d2d     CERTIFICATE-----
 8097f5c:	2d00 2d2d 2d2d 4e45 2044 4543 5452 4649     .-----END CERTIF
 8097f6c:	4349 5441 2d45 2d2d 2d2d 5400 6568 6320     ICATE-----.The c
 8097f7c:	7265 6974 6966 6163 6574 7620 6c61 6469     ertificate valid
 8097f8c:	7469 2079 6168 2073 7865 6970 6572 0064     ity has expired.
 8097f9c:	6854 2065 6563 7472 6669 6369 7461 2065     The certificate 
 8097fac:	6168 2073 6562 6e65 7220 7665 6b6f 6465     has been revoked
 8097fbc:	2820 7369 6f20 206e 2061 5243 294c 5400      (is on a CRL).T
 8097fcc:	6568 6320 7265 6974 6966 6163 6574 4320     he certificate C
 8097fdc:	6d6f 6f6d 206e 614e 656d 2820 4e43 2029     ommon Name (CN) 
 8097fec:	6f64 7365 6e20 746f 6d20 7461 6863 7720     does not match w
 8097ffc:	7469 2068 6874 2065 7865 6570 7463 6465     ith the expected
 809800c:	4320 004e 6854 2065 6563 7472 6669 6369      CN.The certific
 809801c:	7461 2065 7369 6e20 746f 6320 726f 6572     ate is not corre
 809802c:	7463 796c 7320 6769 656e 2064 7962 7420     ctly signed by t
 809803c:	6568 7420 7572 7473 6465 4320 0041 6854     he trusted CA.Th
 809804c:	2065 5243 204c 7369 6e20 746f 6320 726f     e CRL is not cor
 809805c:	6572 7463 796c 7320 6769 656e 2064 7962     rectly signed by
 809806c:	7420 6568 7420 7572 7473 6465 4320 0041      the trusted CA.
 809807c:	6854 2065 5243 204c 7369 6520 7078 7269     The CRL is expir
 809808c:	6465 4300 7265 6974 6966 6163 6574 7720     ed.Certificate w
 809809c:	7361 6d20 7369 6973 676e 4300 7265 6974     as missing.Certi
 80980ac:	6966 6163 6574 7620 7265 6669 6369 7461     ficate verificat
 80980bc:	6f69 206e 6177 2073 6b73 7069 6570 0064     ion was skipped.
 80980cc:	744f 6568 2072 6572 7361 6e6f 2820 6163     Other reason (ca
 80980dc:	206e 6562 7520 6573 2064 7962 7620 7265     n be used by ver
 80980ec:	6669 2079 6163 6c6c 6162 6b63 0029 6854     ify callback).Th
 80980fc:	2065 6563 7472 6669 6369 7461 2065 6176     e certificate va
 809810c:	696c 6964 7974 7320 6174 7472 2073 6e69     lidity starts in
 809811c:	7420 6568 6620 7475 7275 0065 6854 2065      the future.The 
 809812c:	5243 204c 7369 6620 6f72 206d 6874 2065     CRL is from the 
 809813c:	7566 7574 6572 5500 6173 6567 6420 656f     future.Usage doe
 809814c:	2073 6f6e 2074 616d 6374 2068 6874 2065     s not match the 
 809815c:	656b 5579 6173 6567 6520 7478 6e65 6973     keyUsage extensi
 809816c:	6e6f 5500 6173 6567 6420 656f 2073 6f6e     on.Usage does no
 809817c:	2074 616d 6374 2068 6874 2065 7865 6574     t match the exte
 809818c:	646e 6465 654b 5579 6173 6567 6520 7478     ndedKeyUsage ext
 809819c:	6e65 6973 6e6f 5500 6173 6567 6420 656f     ension.Usage doe
 80981ac:	2073 6f6e 2074 616d 6374 2068 6874 2065     s not match the 
 80981bc:	736e 6543 7472 7954 6570 6520 7478 6e65     nsCertType exten
 80981cc:	6973 6e6f 5400 6568 6320 7265 6974 6966     sion.The certifi
 80981dc:	6163 6574 6920 2073 6973 6e67 6465 7720     cate is signed w
 80981ec:	7469 2068 6e61 7520 616e 6363 7065 6174     ith an unaccepta
 80981fc:	6c62 2065 6168 6873 002e 6854 2065 6563     ble hash..The ce
 809820c:	7472 6669 6369 7461 2065 7369 7320 6769     rtificate is sig
 809821c:	656e 2064 6977 6874 6120 206e 6e75 6361     ned with an unac
 809822c:	6563 7470 6261 656c 5020 204b 6c61 2067     ceptable PK alg 
 809823c:	6528 2067 5352 2041 7376 4520 4443 4153     (eg RSA vs ECDSA
 809824c:	2e29 5400 6568 6320 7265 6974 6966 6163     )..The certifica
 809825c:	6574 6920 2073 6973 6e67 6465 7720 7469     te is signed wit
 809826c:	2068 6e61 7520 616e 6363 7065 6174 6c62     h an unacceptabl
 809827c:	2065 656b 2079 6528 2067 6162 2064 7563     e key (eg bad cu
 809828c:	7672 2c65 5220 4153 7420 6f6f 7320 6f68     rve, RSA too sho
 809829c:	7472 2e29 5400 6568 4320 4c52 6920 2073     rt)..The CRL is 
 80982ac:	6973 6e67 6465 7720 7469 2068 6e61 7520     signed with an u
 80982bc:	616e 6363 7065 6174 6c62 2065 6168 6873     nacceptable hash
 80982cc:	002e 6854 2065 5243 204c 7369 7320 6769     ..The CRL is sig
 80982dc:	656e 2064 6977 6874 6120 206e 6e75 6361     ned with an unac
 80982ec:	6563 7470 6261 656c 5020 204b 6c61 2067     ceptable PK alg 
 80982fc:	6528 2067 5352 2041 7376 4520 4443 4153     (eg RSA vs ECDSA
 809830c:	2e29 5400 6568 4320 4c52 6920 2073 6973     )..The CRL is si
 809831c:	6e67 6465 7720 7469 2068 6e61 7520 616e     gned with an una
 809832c:	6363 7065 6174 6c62 2065 656b 2079 6528     cceptable key (e
 809833c:	2067 6162 2064 7563 7672 2c65 5220 4153     g bad curve, RSA
 809834c:	7420 6f6f 7320 6f68 7472 2e29 0000 0000      too short).....

0809835c <mbedtls_x509_crt_profile_suiteb>:
 809835c:	0060 0000 000a 0000 0000 0000 0000 0000     `...............

0809836c <CSWTCH.205>:
 809836c:	0302 0504 6306 696c 6e65 2074 6966 696e     .....client fini
 809837c:	6873 6465 7300 7265 6576 2072 6966 696e     shed.server fini
 809838c:	6873 6465 6d00 7361 6574 2072 6573 7263     shed.master secr
 809839c:	7465 6b00 7965 6520 7078 6e61 6973 6e6f     et.key expansion
 80983ac:	5300 4c53 3376 302e 5400 534c 3176 302e     .SSLv3.0.TLSv1.0
 80983bc:	5400 534c 3176 312e 5400 534c 3176 322e     .TLSv1.1.TLSv1.2
 80983cc:	0000 0000                                   ....

080983d0 <_ZL18mfl_code_to_length>:
 80983d0:	2000 0000 0200 0000 0400 0000 0800 0000     . ..............
 80983e0:	1000 0000 6e69 6176 696c 2064 4b50 0000     ....invalid PK..

080983f0 <_ZL1K>:
 80983f0:	ae22 d728 2f98 428a 65cd 23ef 4491 7137     ".(../.B.e.#.D7q
 8098400:	3b2f ec4d fbcf b5c0 dbbc 8189 dba5 e9b5     /;M.............
 8098410:	b538 f348 c25b 3956 d019 b605 11f1 59f1     8.H.[.V9.......Y
 8098420:	4f9b af19 82a4 923f 8118 da6d 5ed5 ab1c     .O....?...m..^..
 8098430:	0242 a303 aa98 d807 6fbe 4570 5b01 1283     B........opE.[..
 8098440:	b28c 4ee4 85be 2431 b4e2 d5ff 7dc3 550c     ...N..1$.....}.U
 8098450:	896f f27b 5d74 72be 96b1 3b16 b1fe 80de     o.{.t].r...;....
 8098460:	1235 25c7 06a7 9bdc 2694 cf69 f174 c19b     5..%.....&i.t...
 8098470:	4ad2 9ef1 69c1 e49b 25e3 384f 4786 efbe     .J...i...%O8.G..
 8098480:	d5b5 8b8c 9dc6 0fc1 9c65 77ac a1cc 240c     ........e..w...$
 8098490:	0275 592b 2c6f 2de9 e483 6ea6 84aa 4a74     u.+Yo,.-...n..tJ
 80984a0:	fbd4 bd41 a9dc 5cb0 53b5 8311 88da 76f9     ..A....\.S.....v
 80984b0:	dfab ee66 5152 983e 3210 2db4 c66d a831     ..f.RQ>..2.-m.1.
 80984c0:	213f 98fb 27c8 b003 0ee4 beef 7fc7 bf59     ?!...'........Y.
 80984d0:	8fc2 3da8 0bf3 c6e0 a725 930a 9147 d5a7     ...=....%...G...
 80984e0:	826f e003 6351 06ca 6e70 0a0e 2967 1429     o...Qc..pn..g)).
 80984f0:	2ffc 46d2 0a85 27b7 c926 5c26 2138 2e1b     ./.F...'&.&\8!..
 8098500:	2aed 5ac4 6dfc 4d2c b3df 9d95 0d13 5338     .*.Z.m,M......8S
 8098510:	63de 8baf 7354 650a b2a8 3c77 0abb 766a     .c..Ts.e..w<..jv
 8098520:	aee6 47ed c92e 81c2 353b 1482 2c85 9272     ...G....;5...,r.
 8098530:	0364 4cf1 e8a1 a2bf 3001 bc42 664b a81a     d..L.....0B.Kf..
 8098540:	9791 d0f8 8b70 c24b be30 0654 51a3 c76c     ....p.K.0.T..Ql.
 8098550:	5218 d6ef e819 d192 a910 5565 0624 d699     .R........eU$...
 8098560:	202a 5771 3585 f40e d1b8 32bb a070 106a     * qW.5.....2p.j.
 8098570:	d0c8 b8d2 c116 19a4 ab53 5141 6c08 1e37     ........S.AQ.l7.
 8098580:	eb99 df8e 774c 2748 48a8 e19b bcb5 34b0     ....LwH'.H.....4
 8098590:	5a63 c5c9 0cb3 391c 8acb e341 aa4a 4ed8     cZ.....9..A.J..N
 80985a0:	e373 7763 ca4f 5b9c b8a3 d6b2 6ff3 682e     s.cwO..[.....o.h
 80985b0:	b2fc 5def 82ee 748f 2f60 4317 636f 78a5     ...]...t`/.Coc.x
 80985c0:	ab72 a1f0 7814 84c8 39ec 1a64 0208 8cc7     r....x...9d.....
 80985d0:	1e28 2363 fffa 90be bde9 de82 6ceb a450     (.c#.........lP.
 80985e0:	7915 b2c6 a3f7 bef9 532b e372 78f2 c671     .y......+Sr..xq.
 80985f0:	619c ea26 3ece ca27 c207 21c0 b8c7 d186     .a&..>'....!....
 8098600:	eb1e cde0 7dd6 eada d178 ee6e 4f7f f57d     .....}..x.n..O}.
 8098610:	6fba 7217 67aa 06f0 98a6 a2c8 7dc5 0a63     .o.r.g.......}c.
 8098620:	0dae bef9 9804 113f 471b 131c 0b35 1b71     ......?..G..5.q.
 8098630:	7d84 2304 77f5 28db 2493 40c7 ab7b 32ca     .}.#.w.(.$.@{..2
 8098640:	bebc 15c9 be0a 3c9e 0d4c 9c10 67c4 431d     .......<L....g.C
 8098650:	42b6 cb3e d4be 4cc5 7e2a fc65 299c 597f     .B>....L*~e..).Y
 8098660:	faec 3ad6 6fab 5fcb 5817 4a47 198c 6c44     ...:.o._.XGJ..Dl
 8098670:	7250 636f 542d 7079 3a65 3420 452c 434e     Proc-Type: 4,ENC
 8098680:	5952 5450 4445 0200 0503 0b07 110d 1713     RYPTED..........
 8098690:	1f1d 2925 2f2b 3b35 433d 4947 534f 6159     ..%)+/5;=CGIOSYa
 80986a0:	6765 6d6b 7f71 8983 958b 9d97 a7a3 b3ad     egkmq...........
 80986b0:	bfb5 c5c1 d3c7 e3df e9e5 f1ef 0efb 061f     ................
 80986c0:	127e 240c 6446 2a09 6f33 0354 4319 6279     ~..$Fd.*3oT..Cyb
 80986d0:	7265 7541 6f74 7300 6d74 0d61 4100 5354     erAuto.stma..ATS
 80986e0:	3650 000d 5441 4853 4437 0d46 3000 3031     P6..ATSH7DF..010
 80986f0:	0d43 3000 3031 0d44 6100 7a74 000d 4552     C..010D..atz..RE
 8098700:	0044 5247 4545 004e 4c42 4555 7300 6170     D.GREEN.BLUE.spa
 8098710:	6b72 6c63 6569 746e 6800 6c65 6f6c 7720     rkclient.hello w
 8098720:	726f 646c 6f00 7475 6f54 6970 2f63 656d     orld.outTopic/me
 8098730:	7373 6761 0065 6e69 6f54 6970 2f63 656d     ssage.inTopic/me
 8098740:	7373 6761 0065 6163 6c6c 6465 6220 6765     ssage.called beg
 8098750:	6e69 6300 6c61 656c 2064 6f64 7469 6300     in.called doit.c
 8098760:	6c61 656c 2064 7270 636f 7365 0073 3361     alled process.a3
 8098770:	626d 6d30 367a 656c 6267 3873 692e 746f     mb0mz6legbs8.iot
 8098780:	752e 2d73 6165 7473 322d 612e 616d 6f7a     .us-east-2.amazo
 8098790:	616e 7377 632e 6d6f 4300 4e41 745f 7268     naws.com.CAN_thr
 80987a0:	6165 0064 6e49 6574 6e72 6c61 745f 7268     ead.Internal_thr
 80987b0:	6165 0064                                   ead.

080987b4 <_ZTV4File>:
	...
 80987bc:	ff75 0808 ffa1 0808 ff89 0808 ff83 0808     u...............
 80987cc:	ff59 0808 ffeb 0808 ff7d 0808 ff77 0808     Y.......}...w...

080987dc <_ZTV5SdFat>:
	...
 80987e4:	ffc5 0808 ffbd 0808 ffb5 0808 ffad 0808     ................

080987f4 <_ZL15clientKeyCrtPem>:
 80987f4:	2d2d 2d2d 422d 4745 4e49 4320 5245 4954     -----BEGIN CERTI
 8098804:	4946 4143 4554 2d2d 2d2d 202d 0a0d 494d     FICATE----- ..MI
 8098814:	4449 5457 4343 6b41 6747 7741 4249 6741     IDWTCCAkGgAwIBAg
 8098824:	5549 3251 412f 4168 497a 522f 5451 6947     IUQ2/AhAzI/RQTGi
 8098834:	7278 466e 352f 7569 336f 7541 7749 5144     xrnF/5iuo3AuIwDQ
 8098844:	4a59 6f4b 495a 7668 4e63 5141 4c45 0a0d     YJKoZIhvcNAQEL..
 8098854:	5142 7741 5454 4c46 454d 476b 3141 4555     BQAwTTFLMEkGA1UE
 8098864:	7743 4378 5751 6831 6d65 7539 4649 6c64     CwxCQW1hem9uIFdl
 8098874:	6959 5442 585a 324a 5761 6c4e 7963 5042     YiBTZXJ2aWNlcyBP
 8098884:	5550 7446 5859 7670 6962 6a35 3262 6730     PUFtYXpvbi5jb20g
 8098894:	0a0d 5753 6a35 694c 4d42 5650 6c4e 5859     ..SW5jLiBMPVNlYX
 80988a4:	3052 4762 6755 3155 3951 3256 7a46 4761     R0bGUgU1Q9V2FzaG
 80988b4:	756c 335a 7652 6962 4442 5650 5456 424d     luZ3RvbiBDPVVTMB
 80988c4:	5834 5444 3445 444d 796b 444f 3245 544e     4XDTE4MDkyODE2NT
 80988d4:	7a51 0a0d 6c4e 586f 5444 3551 544d 7a49     Qz..NloXDTQ5MTIz
 80988e4:	544d 7a49 544e 316b 564f 776f 6a48 6345     MTIzNTk1OVowHjEc
 80988f4:	424d 476f 3141 4555 7741 5477 5651 5464     MBoGA1UEAwwTQVdT
 8098904:	4549 766c 4356 4442 585a 304a 5761 705a     IElvVCBDZXJ0aWZp
 8098914:	3259 3046 0a0d 545a 4343 5341 7749 5144     Y2F0..ZTCCASIwDQ
 8098924:	4a59 6f4b 495a 7668 4e63 5141 4245 5142     YJKoZIhvcNAQEBBQ
 8098934:	4441 6767 5045 4441 4343 5141 436f 6767     ADggEPADCCAQoCgg
 8098944:	4245 4d41 7278 6542 5554 5073 4c6d 395a     EBAMxrBeTUsPmLZ9
 8098954:	5036 4559 6b6a 0a0d 6762 4177 4364 7466     6PYEjk..bgwAdCft
 8098964:	7170 634c 6d41 2b41 752f 545a 4548 6441     pqLcAmA+/uZTHEAd
 8098974:	4b2b 646b 7532 6438 5256 7238 4766 4239     +Kkd2u8dVR8rfG9B
 8098984:	5977 6438 5734 4371 5271 4845 484f 3641     wY8d4WqCqREHOHA6
 8098994:	7531 774d 4c6d 5279 0a0d 542b 4f76 5850     1uMwmLyR..+TvOPX
 80989a4:	4c4a 6154 6d36 6574 3146 567a 724a 536f     JLTa6mteF1zVJroS
 80989b4:	6876 3252 2f4c 5a6d 524f 3037 4e77 3142     vhR2L/mZOR70wNB1
 80989c4:	3475 6b43 6b52 3835 7432 556e 5830 4f2f     u4CkRk582tnU0X/O
 80989d4:	516d 7151 4e2f 754f 6d77 0a0d 3663 616b     mQQq/NOuwm..c6ka
 80989e4:	5948 7173 7178 644f 6b32 5233 4955 7a41     HYsqxqOd2k3RUIAz
 80989f4:	546f 4862 3544 372f 2b59 2f50 2b30 7475     oTbHD5/7Y+P/0+ut
 8098a04:	4d57 5866 4f67 3751 4b30 476e 4839 4367     WMfXgOQ70KnG9HgC
 8098a14:	3266 2f34 5052 5a79 6867 5279 0a0d 7332     f24/RPyZghyR..2s
 8098a24:	6a68 5438 5a6d 6d7a 5746 566e 4944 5764     hj8TmZzmFWnVDIdW
 8098a34:	6356 3666 724b 3779 664e 344a 5974 6145     Vcf6Kry7NfJ4tYEa
 8098a44:	4261 2b78 3849 5347 6570 4930 4e52 7859     aBx+I8GSpe0IRNYx
 8098a54:	4674 457a 3078 776d 3756 5454 7277 0a0d     tFzEx0mwV7TTwr..
 8098a64:	686f 4151 5837 7077 6a64 4e7a 3365 3542     ohQA7XwpdjzNe3B5
 8098a74:	4b66 6e6f 726a 7a46 457a 6c6a 4453 574d     fKonjrFzzEjlSDMW
 8098a84:	466d 7333 3848 4b4e 4273 5375 6f67 3576     mF3sH8NKsBuSgov5
 8098a94:	5066 7262 456e 6b39 6547 434f 6349 3834     fPbrnE9kGeOCIc48
 8098aa4:	0a0d 7878 4330 7741 4145 6141 674e 464d     ..xx0CAwEAAaNgMF
 8098ab4:	7734 7748 4459 5256 6a30 4242 7767 6f46     4wHwYDVR0jBBgwFo
 8098ac4:	5541 6967 4f47 5676 4254 3846 5550 704e     AUgiGOvVTBF8PUNp
 8098ad4:	6462 4f38 4653 4d72 3059 3756 776b 5148     bd8OSFrMY0V7kwHQ
 8098ae4:	4459 0a0d 5256 4f30 4242 4559 4446 3648     YD..VR0OBBYEFDH6
 8098af4:	5837 3546 7957 6952 6d6f 6741 7243 5656     7XF5WyRiomAgCrVV
 8098b04:	5335 2b76 5a46 502f 414d 4777 3141 6455     5Sv+FZ/PMAwGA1Ud
 8098b14:	7745 4245 772f 4351 414d 7741 6744 4459     EwEB/wQCMAAwDgYD
 8098b24:	5256 5030 0a0d 5141 2f48 4142 4451 6741     VR0P..AQH/BAQDAg
 8098b34:	4165 414d 4730 5343 4771 4953 3362 5144     eAMA0GCSqGSIb3DQ
 8098b44:	4245 7743 4155 3441 4249 5141 6441 4d79     EBCwUAA4IBAQAdyM
 8098b54:	5244 4979 7269 5630 644f 3761 4931 7759     DRyIir0VOda71IYw
 8098b64:	5432 7167 5362 0a0d 7a38 6b44 384c 5552     2TgqbS..8zDkL8RU
 8098b74:	4d72 616e 5549 3078 6973 3636 4b56 7170     rMnaIUx0si66VKpq
 8098b84:	5166 4b65 554b 4476 4170 6d72 6a38 654c     fQeKKUvDpArm8jLe
 8098b94:	6a4e 3643 494f 7753 5553 5473 7449 455a     NjC6OISwSUsTItZE
 8098ba4:	6f47 4a74 6b36 3942 0a0d 3059 4341 7059     GotJ6kB9..Y0ACYp
 8098bb4:	7370 3667 5834 3638 525a 4555 6271 4239     psg64X86ZRUEqb9B
 8098bc4:	692f 4161 6b67 7a48 496b 3678 6238 6830     /iaAgkHzkIx68b0h
 8098bd4:	5736 6e44 4146 4739 6757 755a 766f 4150     6WDnFA9GWgZuovPA
 8098be4:	4653 5454 4a6f 4438 3539 0a0d 6531 6941     SFTToJ8D95..1eAi
 8098bf4:	5a55 6275 4933 7050 6e36 666b 7350 386c     UZub3IPp6nkfPsl8
 8098c04:	2b6c 634b 6b56 396a 4c79 2b78 6433 4a4d     l+KcVkj9yLx+3dMJ
 8098c14:	7170 422b 3633 7251 4a76 4156 3979 4842     pq+B36QrvJVAy9BH
 8098c24:	4e61 4e73 4d46 3834 6c45 4863 0a0d 2b4f     aNsNFM48ElcH..O+
 8098c34:	394a 5949 796b 672f 7944 4a45 5241 784b     J9IYky/gDyEJARKx
 8098c44:	4234 6344 7574 6f41 6b6b 3350 4c52 472f     4BDctuAokkP3RL/G
 8098c54:	2f6a 4e38 584b 4c4c 2b67 7536 4d30 6443     j/8NKXLLg+6u0MCd
 8098c64:	3147 346b 6958 6548 656a 3243 7634 0a0d     G1k4XiHejeC24v..
 8098c74:	476b 5a51 4b4f 5537 7461 675a 4735 2b50     kGQZOK7UatZg5GP+
 8098c84:	6d6f 6464 4534 6551 3436 376a 5570 7746     omdd4EQe64j7pUFw
 8098c94:	6e6d 4b77 5a55 5750 7877 4b61 3264 3962     mnwKUZPWwxaKd2b9
 8098ca4:	474d 6633 744c 4b4e 7341 5442 0a0d 2d2d     MG3fLtNKAsBT..--
 8098cb4:	2d2d 452d 444e 4320 5245 4954 4946 4143     ---END CERTIFICA
 8098cc4:	4554 2d2d 2d2d 002d                         TE-----.

08098ccc <_ZL18amazonIoTRootCaPem>:
 8098ccc:	2d2d 2d2d 422d 4745 4e49 4320 5245 4954     -----BEGIN CERTI
 8098cdc:	4946 4143 4554 2d2d 2d2d 202d 0a0d 494d     FICATE----- ..MI
 8098cec:	4549 7a30 4343 3741 6775 7741 4249 6741     IE0zCCA7ugAwIBAg
 8098cfc:	5149 4e47 5272 696e 395a 4c36 4b74 5649     IQGNrRniZ96LtKIV
 8098d0c:	4e6a 477a 3773 6a53 4e41 6742 716b 6b68     jNzGs7SjANBgkqhk
 8098d1c:	4769 7739 4230 5141 4655 4441 4243 0a0d     iG9w0BAQUFADCB..
 8098d2c:	6a79 4c45 414d 476b 3141 4555 6842 434d     yjELMAkGA1UEBhMC
 8098d3c:	5656 784d 7a46 5641 6742 564e 4142 546f     VVMxFzAVBgNVBAoT
 8098d4c:	6c44 6c5a 6d63 546c 5761 7564 434c 4a42     DlZlcmlTaWduLCBJ
 8098d5c:	6d62 754d 524d 7738 5148 4459 5156 4c51     bmMuMR8wHQYDVQQL
 8098d6c:	0a0d 7845 575a 585a 704a 3255 6e6c 6962     ..ExZWZXJpU2lnbi
 8098d7c:	5542 6e63 7a56 4364 4f42 585a 3352 3362     BUcnVzdCBOZXR3b3
 8098d8c:	724a 544d 776f 414f 4459 5156 4c51 7a45     JrMTowOAYDVQQLEz
 8098d9c:	6f45 7959 676b 6a4d 7741 694e 5742 585a     EoYykgMjAwNiBWZX
 8098dac:	704a 0a0d 3255 6e6c 6962 6777 5753 6a35     Jp..U2lnbiwgSW5j
 8098dbc:	694c 7441 4549 765a 6963 6842 5864 6f52     LiAtIEZvciBhdXRo
 8098dcc:	3362 704a 6d65 6b56 4849 7a56 535a 7642     b3JpemVkIHVzZSBv
 8098ddc:	6d62 3578 554d 7755 7751 4459 5156 4451     bmx5MUUwQwYDVQQD
 8098dec:	7a45 5778 0a0d 585a 704a 3255 6e6c 6962     EzxW..ZXJpU2lnbi
 8098dfc:	4442 4762 7a46 7963 7a41 4649 3142 6d59     BDbGFzcyAzIFB1Ym
 8098e0c:	7078 7959 5142 6d63 746c 5859 354a 4549     xpYyBQcmltYXJ5IE
 8098e1c:	6c4e 6e63 7052 6d5a 6a6c 5859 7052 3262     NlcnRpZmljYXRpb2
 8098e2c:	6734 5851 3056 0a0d 4761 7939 5861 3552     4gQXV0..aG9yaXR5
 8098e3c:	4349 6730 7a52 7755 6848 4e63 444d 7859     IC0gRzUwHhcNMDYx
 8098e4c:	544d 3441 444d 7741 444d 7741 6857 4e63     MTA4MDAwMDAwWhcN
 8098e5c:	7a4d 7759 7a4e 3245 6a4d 314d 544f 3555     MzYwNzE2MjM1OTU5
 8098e6c:	6a57 4243 6a79 4c45 0a0d 414d 476b 3141     WjCByjEL..MAkGA1
 8098e7c:	4555 6842 434d 5656 784d 7a46 5641 6742     UEBhMCVVMxFzAVBg
 8098e8c:	564e 4142 546f 6c44 6c5a 6d63 546c 5761     NVBAoTDlZlcmlTaW
 8098e9c:	7564 434c 4a42 6d62 754d 524d 7738 5148     duLCBJbmMuMR8wHQ
 8098eac:	4459 5156 4c51 7845 575a 0a0d 585a 704a     YDVQQLExZW..ZXJp
 8098ebc:	3255 6e6c 6962 5542 6e63 7a56 4364 4f42     U2lnbiBUcnVzdCBO
 8098ecc:	585a 3352 3362 724a 544d 776f 414f 4459     ZXR3b3JrMTowOAYD
 8098edc:	5156 4c51 7a45 6f45 7959 676b 6a4d 7741     VQQLEzEoYykgMjAw
 8098eec:	694e 5742 585a 704a 3255 6e6c 0a0d 6962     NiBWZXJpU2ln..bi
 8098efc:	6777 5753 6a35 694c 7441 4549 765a 6963     wgSW5jLiAtIEZvci
 8098f0c:	6842 5864 6f52 3362 704a 6d65 6b56 4849     BhdXRob3JpemVkIH
 8098f1c:	7a56 535a 7642 6d62 3578 554d 7755 7751     VzZSBvbmx5MUUwQw
 8098f2c:	4459 5156 4451 7a45 5778 585a 704a 0a0d     YDVQQDEzxWZXJp..
 8098f3c:	3255 6e6c 6962 4442 4762 7a46 7963 7a41     U2lnbiBDbGFzcyAz
 8098f4c:	4649 3142 6d59 7078 7959 5142 6d63 746c     IFB1YmxpYyBQcmlt
 8098f5c:	5859 354a 4549 6c4e 6e63 7052 6d5a 6a6c     YXJ5IENlcnRpZmlj
 8098f6c:	5859 7052 3262 6734 5851 3056 4761 7939     YXRpb24gQXV0aG9y
 8098f7c:	0a0d 5861 3552 4349 6730 7a52 7755 6767     ..aXR5IC0gRzUwgg
 8098f8c:	6945 414d 4730 5343 4771 4953 3362 5144     EiMA0GCSqGSIb3DQ
 8098f9c:	4245 5141 4155 3441 4249 7744 7741 6767     EBAQUAA4IBDwAwgg
 8098fac:	4b45 6f41 4249 5141 7643 414a 4967 584b     EKAoIBAQCvJAgIKX
 8098fbc:	316f 0a0d 6d6e 4d41 7571 4c64 304f 6337     o1..nmAMqudLO07c
 8098fcc:	4c66 3877 5252 3779 2b4b 2b44 514b 354c     fLw8RRy7K+D+KQL5
 8098fdc:	7756 6a69 495a 5655 2f4a 7858 6372 7867     VwijZIUVJ/Xxrcgx
 8098fec:	5669 6930 4336 7171 6b70 7a4b 2f6a 3569     iV0i6CqqpkKzj/i5
 8098ffc:	6256 7865 0a0d 3074 7a75 6f2f 2b39 3142     Vbex..t0uz/o9+B1
 809900c:	7366 3037 6250 6d5a 5649 6359 6739 6144     fs70PbZmIVYc9gDa
 809901c:	5954 7633 676a 3277 4949 5650 5451 3036     TY3vjgw2IIPVQT60
 809902c:	4b6e 5657 4653 754a 7255 786a 6675 2f36     nKWVSFJuUrjxuf6/
 809903c:	6857 636b 7a49 0a0d 6453 4468 3259 5370     WhkcIz..SdhDY2pS
 809904c:	3953 504b 4836 5242 6454 4a47 5861 4876     S9KP6HBRTdGJaXvH
 809905c:	5063 7a61 4233 304a 3332 6474 3153 5462     cPaz3BJ023tdS1bT
 809906c:	726c 5638 3664 7747 4b39 6c49 7138 6338     lr8Vd6Gw9KIl8q8c
 809907c:	6d6b 5963 6635 4751 0a0d 4f42 512b 6575     kmcY5fQG..BO+Que
 809908c:	4151 4e35 3630 5274 2f6e 7241 3072 4f50     QA5N06tRn/Arr0PO
 809909c:	6737 2b69 3373 2b69 307a 3631 797a 7639     7gi+s3i+z016zy9v
 80990ac:	3941 3972 3131 546b 5a4d 5248 4178 3379     A9r911kTMZHRxAy3
 80990bc:	6b51 5347 5447 5232 2b54 0a0d 4372 5370     QkGSGT2RT+..rCpS
 80990cc:	3478 562f 4542 6b6e 576a 484e 4469 7078     x4/VBEnkjWNHiDxp
 80990dc:	3867 2b76 3752 7230 6b66 462f 616c 4f34     g8v+R70rfk/Fla4O
 80990ec:	646e 5254 3851 6e42 2b63 554d 4843 6c37     ndTRQ8Bnc+MUCH7l
 80990fc:	3550 7a39 4475 4b4d 317a 2f30 0a0d 494e     P59zuDMKz10/..NI
 809910c:	5765 7569 5435 4336 5655 6741 424d 4141     eWiu5T6CUVAgMBAA
 809911c:	6a47 6267 7749 6167 7738 7744 4459 5256     GjgbIwga8wDwYDVR
 809912c:	5430 5141 2f48 4142 7755 7741 4245 7a2f     0TAQH/BAUwAwEB/z
 809913c:	4f41 6742 564e 5148 4238 6641 4538 0a0d     AOBgNVHQ8BAf8E..
 809914c:	4142 434d 5141 7759 5162 4959 774b 4259     BAMCAQYwbQYIKwYB
 809915c:	5142 4855 5141 4577 5459 6642 566f 6732     BQUHAQwEYTBfoV2g
 809916c:	7a57 5a42 464d 7763 5256 4a59 5761 6831     WzBZMFcwVRYJaW1h
 809917c:	325a 7655 325a 6d6c 434d 7745 7a48 4841     Z2UvZ2lmMCEwHzAH
 809918c:	0a0d 6742 7255 6744 434d 6747 5551 2b6a     ..BgUrDgMCGgQUj+
 809919c:	5458 6f47 7361 596a 7235 3877 412b 7461     XTGoasjY5rw8+Aat
 80991ac:	4952 4347 3778 5347 7734 524a 6a59 4861     RIGCx7GS4wJRYjaH
 80991bc:	3052 4463 766f 324c 7678 325a 7538 6d64     R0cDovL2xvZ28udm
 80991cc:	7956 0a0d 5861 704e 325a 7534 3259 7439     Vy..aXNpZ24uY29t
 80991dc:	334c 7a5a 4762 6e39 7962 6e35 5761 7759     L3ZzbG9nby5naWYw
 80991ec:	5148 4459 5256 4f30 4242 4559 4846 542f     HQYDVR0OBBYEFH/T
 80991fc:	615a 4366 6533 3779 4438 4a41 3038 354d     ZafC3ey78DAJ80M5
 809920c:	672b 764b 0a0d 7a4d 7a45 414d 4730 5343     +gKv..MzEzMA0GCS
 809921c:	4771 4953 3362 5144 4245 5142 4155 3441     qGSIb3DQEBBQUAA4
 809922c:	4249 5141 5443 454a 776f 3258 504c 4232     IBAQCTJEowX2LP2B
 809923c:	5971 7a4c 7133 4a33 746b 5876 3266 5870     qYLz3q3JktvXf2pX
 809924c:	696b 4f4f 457a 0a0d 3670 3442 7145 6931     kiOOzE..p6B4Eq1i
 809925c:	6b44 7756 4d5a 6e58 326c 7459 416d 2b6c     DkVwZMXnl2YtmAl+
 809926c:	3658 572f 437a 6c68 6738 7147 4243 4870     X6/WzChl8gGqCBpH
 809927c:	7633 356e 4a66 614a 4743 676b 6444 2b6b     3vn5fJJaCGkgDdk+
 809928c:	5762 3834 5744 5937 0a0d 6735 5261 4251     bW48DW7Y..5gaRQB
 809929c:	3569 4d2b 7448 3933 4274 7571 5743 4d49     i5+MHt39tBquCWIM
 80992ac:	4e6e 425a 3455 6367 556d 7137 454b 514b     nNZBU4gcmU7qKEKQ
 80992bc:	5473 3462 6237 4e44 6c30 7441 6b75 7869     sTb47bDN0lAtukix
 80992cc:	456c 6b30 3646 5742 4b6c 0a0d 4557 6739     lE0kF6BWlK..WE9g
 80992dc:	6e79 4336 6761 4373 6971 5855 624f 6258     yn6CagsCqiUXObXb
 80992ec:	2b66 4565 535a 5671 7269 4732 6c33 4236     f+eEZSqVir2G3l6B
 80992fc:	6f46 744d 4d45 657a 612f 4369 6d4b 6f30     FoMtEMze/aiCKm0o
 809930c:	7748 4c30 4f78 6e58 6947 5a59 0a0d 6634     Hw0LxOXnGiYZ..4f
 809931c:	5251 7862 3143 666c 6e7a 6751 7955 3832     QRbxC1lfznQgUy28
 809932c:	6436 5655 6f34 7074 4636 3130 7676 5870     6dUV4otp6F01vvpX
 809933c:	4631 4851 4f4b 7774 7235 6744 3762 7a4d     1FQHKOtw5rDgb7Mz
 809934c:	4956 6263 6469 344a 4576 565a 4e38 0a0d     VIcbidJ4vEZV8N..
 809935c:	6e68 6361 4852 3272 566c 327a 5458 4949     hnacRHr2lVz2XTII
 809936c:	364d 5552 6874 2f67 4661 797a 6b51 4671     M6RUthg/aFzyQkqF
 809937c:	464f 4453 3958 6f48 504c 734b 6445 6f61     OFSDX9HoLPKsEdao
 809938c:	5737 714e 0a0d 2d2d 2d2d 452d 444e 4320     7WNq..-----END C
 809939c:	5245 4954 4946 4143 4554 2d2d 2d2d 002d     ERTIFICATE-----.

080993ac <_ZL12clientKeyPem>:
 80993ac:	2d2d 2d2d 422d 4745 4e49 5220 4153 5020     -----BEGIN RSA P
 80993bc:	4952 4156 4554 4b20 5945 2d2d 2d2d 202d     RIVATE KEY----- 
 80993cc:	0a0d 494d 4549 776f 4249 4141 434b 5141     ..MIIEowIBAAKCAQ
 80993dc:	4145 477a 4673 4e35 7753 592b 6e74 6f33     EAzGsF5NSw+Ytn3o
 80993ec:	6739 4f53 7552 4144 3042 2b4a 6d32 746f     9gSORuDAB0J+2mot
 80993fc:	4377 4459 2b37 6c35 634d 4251 3433 5271     wCYD7+5lMcQB34qR
 809940c:	6133 0a0d 7837 5631 7948 3874 3062 4248     3a..7x1VHyt8b0HB
 809941c:	786a 6833 6f61 704b 5145 3463 4463 5772     jx3haoKpEQc4cDrW
 809942c:	7a34 5943 4a76 3548 384f 3934 6b63 4e74     4zCYvJH5O849cktN
 809943c:	7172 3161 5834 4e58 6d55 6875 2b4b 4846     rqa14XXNUmuhK+FH
 809944c:	7659 5a2b 0a0d 356b 7648 4154 4830 3757     Yv+Z..k5HvTA0HW7
 809945c:	4b67 4752 6e54 617a 6432 5254 3866 5a36     gKRGTnza2dTRf86Z
 809946c:	4342 3872 3630 4337 7a5a 5271 646f 7969     BCr8067CZzqRodiy
 809947c:	4772 356f 6133 6454 5146 4467 684f 734e     rGo53aTdFQgDOhNs
 809948c:	5063 2f6e 6a74 0a0d 2f34 542f 3636 5931     cPn/tj..4//T661Y
 809949c:	3978 4165 4435 5176 6371 3062 4165 2f4a     x9eA5DvQqcb0eAJ/
 80994ac:	6a62 4539 4a2f 436d 4a48 6148 4779 7850     bj9E/JmCHJHayGPx
 80994bc:	5a4f 4f6e 5659 6461 4d55 3168 565a 2f78     OZnOYVadUMh1ZVx/
 80994cc:	716f 4c76 3173 6e38 0a0d 3169 5267 6f70     oqvLs18n..i1gRpo
 80994dc:	4848 6a34 5a77 6c4b 5137 4568 6a31 3047     HH4jwZKl7QhE1jG0
 80994ec:	4d58 4854 6253 5842 4e74 4350 6975 4146     XMTHSbBXtNPCuiFA
 80994fc:	7444 4366 326c 4d50 3731 4863 386c 6971     DtfCl2PM17cHl8qi
 809950c:	4f65 5873 4d50 4f53 4956 0a0d 784d 5961     eOsXPMSOVI..MxaY
 809951c:	6558 6677 3077 7771 3547 434b 2f69 386c     Xewfw0qwG5KCi/l8
 809952c:	7539 6375 3254 5a51 3434 6849 6a7a 487a     9uucT2QZ44IhzjzH
 809953c:	5148 4449 5141 4241 6f41 4249 4841 5569     HQIDAQABAoIBAHiU
 809954c:	4c51 4576 6b67 5167 5535 786f 0a0d 4c42     QLvEgkgQ5Uox..BL
 809955c:	3669 666c 6164 535a 516f 7855 4a55 6839     i6lfdaZSoQUxUJ9h
 809956c:	5454 4131 4551 6b7a 3773 7134 5076 6f51     TT1AQEzks74qvPQo
 809957c:	3939 2f6d 774a 6b38 6d75 4158 5269 5a74     99m/Jw8kumXAiRtZ
 809958c:	672f 7452 5734 6b68 6449 7855 6368 0a0d     /gRt4WhkIdUxhc..
 809959c:	4257 5477 7864 434c 7843 616a 6f4e 7035     WBwTdxLCCxjaNo5p
 80995ac:	434a 4578 7345 6c4d 6358 474c 6864 3964     JCxEEsMlXcLGdhd9
 80995bc:	6863 4d66 3349 5732 6479 6570 7961 4141     chfMI32WydpeayAA
 80995cc:	5937 7a4d 2f66 7a41 4330 746e 4977 3268     7YMzf/Az0CntwIh2
 80995dc:	0a0d 4f35 6254 616f 456f 3544 4231 4474     ..5OTboaoED51BtD
 80995ec:	6235 4b4a 3252 6162 5266 4b7a 457a 4448     5bJKR2bafRzKzEHD
 80995fc:	4462 6b4d 3962 447a 4779 6437 3976 7a68     bDMkb9zDyG7dv9hz
 809960c:	5643 3370 637a 5332 615a 2f4f 3077 542f     CVp3zc2SZaO/w0/T
 809961c:	364b 0a0d 4d66 7843 5144 6f4f 7739 4c58     K6..fMCxDQOo9wXL
 809962c:	7238 612f 716d 304f 4a6c 7043 7550 7644     8r/amqO0lJCpPuDv
 809963c:	4973 494b 4161 6c39 6170 6131 6d77 4a48     sIKIaA9lpa1awmHJ
 809964c:	526b 596a 3463 6c6f 7a31 4156 5144 394b     kRjYc4ol1zVADQK9
 809965c:	7a54 3170 0a0d 3834 4d35 4e47 3048 4652     Tzp1..485MGNH0RF
 809966c:	7a6e 5735 3769 2b41 7533 562f 2b78 4136     nz5Wi7A+3u/Vx+6A
 809967c:	5171 4343 4a34 444a 4c49 5041 766b 3649     qQCC4JJDILAPkvI6
 809968c:	5069 4367 6170 6769 6a73 3454 6d43 4353     iPgCpaigsjT4CmSC
 809969c:	316b 5168 6a6d 0a0d 3561 5671 5837 436b     k1hQmj..a5qV7XkC
 80996ac:	5967 4145 462b 4c78 4973 4670 6152 746e     gYEA+FxLsIpFRant
 80996bc:	4d6e 482f 5933 5866 6663 5a51 4171 3236     nM/H3YfXcfQZqA62
 80996cc:	756c 4b59 334a 6357 5438 5654 6e76 6439     luYKJ3Wc8TTVvn9d
 80996dc:	2f56 4d74 4f67 6c5a 0a0d 6175 6545 4355     V/tMgOZl..uaEeUC
 80996ec:	4774 3937 472b 3743 7672 6d71 3744 4c4a     tG79+GC7rvqmD7JL
 80996fc:	426c 504e 2f73 2f2f 3539 685a 3159 6871     lBNPs///95ZhY1qh
 809970c:	4b5a 2b76 487a 416f 7859 3072 4a41 6256     ZKv+zHoAYxr0AJVb
 809971c:	3337 3478 3736 5033 726e 0a0d 7354 5436     73x4673Pnr..Ts6T
 809972c:	4b4b 6139 4633 5350 7552 324c 5948 6439     KK9a3FPSRuL2HY9d
 809973c:	3575 3565 554a 4a6a 4259 4c47 4f37 626d     u5e5JUjJYBGL7Omb
 809974c:	2b43 756e 7879 4a75 4471 3132 5132 4243     C+nuyxuJqD212QCB
 809975c:	4134 434d 5967 4145 7230 3053 0a0d 6853     4AMCgYEA0rS0..Sh
 809976c:	5477 325a 5156 4b79 6d61 6d38 4e33 4468     wTZ2VQyKam8m3NhD
 809977c:	5141 4731 3156 5373 4f65 526d 3379 5454     AQ1GV1sSeOmRy3TT
 809978c:	3645 316e 3769 4731 416f 3165 436a 3839     E6n1i71GoAe1jC98
 809979c:	6a31 6e33 7435 7549 6145 374e 557a 0a0d     1j3n5tIuEaN7zU..
 80997ac:	6c63 6469 364f 6347 7159 706d 4b37 5531     clidO6GcYqmp7K1U
 80997bc:	5157 7279 5833 4b4b 6139 5235 7169 6c78     WQyr3XKK9a5Riqxl
 80997cc:	2f6f 5147 547a 725a 4b76 342b 366c 5165     o/GQzTZrvK+4l6eQ
 80997dc:	4763 6b6b 4151 334b 7979 6c6d 6565 316f     cGkkQAK3yymleeo1
 80997ec:	0a0d 5578 7a6b 6979 6e6f 7053 5555 414d     ..xUkzyionSpUUMA
 80997fc:	7971 7454 7738 4d39 4735 6636 4d6b 6737     qyTt8w9M5G6fkM7g
 809980c:	4553 6c76 5949 6c34 4338 5967 4145 3239     SEvlIY4l8CgYEA92
 809981c:	436e 5367 4e6b 7a6e 4d75 5347 6f59 666e     nCgSkNnzuMGSYonf
 809982c:	416a 0a0d 4b57 7158 536c 722b 3646 7349     jA..WKXqlS+rF6Is
 809983c:	5778 3268 7849 5767 6f51 514c 3138 462f     xWh2IxgWQoLQ81/F
 809984c:	3773 5264 5636 6e32 4150 5167 387a 6c39     s7dR6V2nPAgQz89l
 809985c:	7630 7a4f 3534 6642 4251 494e 5538 4758     0vOz45BfQBNI8UXG
 809986c:	5057 676b 0a0d 2b37 3644 754c 736d 344a     WPkg..7+D6LumsJ4
 809987c:	7976 6578 466a 4377 5462 6435 7261 654d     vyxejFwCbT5darMe
 809988c:	774a 634a 572f 5261 4469 7749 6c6d 3051     JwJc/WaRiDIwmlQ0
 809989c:	4235 5263 5371 5a51 6270 7872 5443 6167     5BcRqSQZpbrxCTga
 80998ac:	4441 4339 6d38 0a0d 4b72 2f6c 704b 7477     AD9C8m..rKl/Kpwt
 80998bc:	6170 5770 514e 634c 4530 674f 6748 4338     papWNQLc0EOgHg8C
 80998cc:	5967 4e41 332b 666e 5256 672b 2b67 704f     gYAN+3nfVR+gg+Op
 80998dc:	5166 6c32 7346 4635 466b 3937 5569 5849     fQ2lFs5FkF79iUIX
 80998ec:	4849 6858 5443 4d76 0a0d 7076 5343 4856     IHXhCTvM..vpCSVH
 80998fc:	6151 3363 574a 5276 7277 3544 7145 5a43     Qac3JWvRwrD5EqCZ
 809990c:	362b 6361 772b 546c 504a 4436 2b74 6f34     +6ac+wlTJP6Dt+4o
 809991c:	626d 6f4c 6445 4a4f 5a39 5854 324c 6750     mbLoEdOJ9ZTXL2Pg
 809992c:	6b79 776f 3832 784d 4861 0a0d 356d 7463     ykow28MxaH..m5ct
 809993c:	7756 7467 4550 3266 476f 414d 7159 4b6e     VwgtPEf2oGMAYqnK
 809994c:	614b 4351 6c73 4e2f 4679 4c49 6f4a 7546     KaQCsl/NyFILJoFu
 809995c:	2f54 4e2f 6a66 5a6b 7775 3876 6547 496d     T//NfjkZuwv8GemI
 809996c:	5578 4675 5561 4861 5059 6974 0a0d 6447     xUuFaUaHYPti..Gd
 809997c:	5761 7735 424b 4467 364c 4661 4633 4352     aW5wKBgDL6aF3FRC
 809998c:	774f 4f59 4e73 5a6e 6d58 354a 7149 7661     OwYOsNnZXmJ5Iqav
 809999c:	7a30 4c64 6362 4e67 4e51 4e76 794d 4935     0zdLbcgNQNvNMy5I
 80999ac:	5258 754b 4a37 6946 3373 532b 6931 0a0d     XRKu7JFis3+S1i..
 80999bc:	657a 4664 666e 6d63 4741 2b70 4271 4553     zedFnfcmAGp+qBSE
 80999cc:	6457 6a76 4743 6838 784a 304b 3863 6d57     WdvjCG8hJxK0c8Wm
 80999dc:	702f 3048 6434 6766 426e 3656 5361 4639     /pH04dfgnBV6aS9F
 80999ec:	6155 4f4b 436c 6647 3336 6c6b 6651 7579     UaKOlCGf63klQfyu
 80999fc:	0a0d 2b4a 5236 3245 4b53 5065 634a 6872     ..J+6RE2SKePJcrh
 8099a0c:	4f46 3671 666f 4768 4336 3570 7449 5677     FOq6ofhG6Cp5ItwV
 8099a1c:	6e48 4244 334f 3352 7537 734a 7852 7342     HnDBO3R37uJsRxBs
 8099a2c:	796b 6267 4a43 0a0d 2d2d 2d2d 452d 444e     kygbCJ..-----END
 8099a3c:	5220 4153 5020 4952 4156 4554 4b20 5945      RSA PRIVATE KEY
 8099a4c:	2d2d 2d2d 002d 097b 6422 666f 6144 6174     -----.{."dofData
 8099a5c:	3a22 227b 6974 656d 3a22 2200 7861 3a22     ":{"time":."ax":
 8099a6c:	2200 7961 3a22 2200 7a61 3a22 2200 786d     ."ay":."az":."mx
 8099a7c:	3a22 2200 796d 3a22 2200 7a6d 3a22 2200     ":."my":."mz":."
 8099a8c:	7867 3a22 2200 7967 3a22 2200 7a67 3a22     gx":."gy":."gz":
 8099a9c:	2200 6574 706d 3a22 7d00 7d0a 2400 5047     ."temp":.}.}.$GP
 8099aac:	4747 0041 4724 474e 4147 2400 5047 4d52     GGA.$GNGGA.$GPRM
 8099abc:	0043 4724 524e 434d 2400 4d50 4b54 3831     C.$GNRMC.$PMTK18
 8099acc:	2c35 2a30 3232 2400 4d50 4b54 3030 2c31     5,0*22.$PMTK001,
 8099adc:	3831 2c35 2a33 4333 2400 4d50 4b54 3831     185,3*3C.$PMTK18
 8099aec:	2c35 2a31 3332 2400 4d50 4b54 3831 2a33     5,1*23.$PMTK183*
 8099afc:	3833 2400 4d50 4b54 4f4c 0047 5024 544d     38.$PMTKLOG.$PMT
 8099b0c:	314b 3136 302c 322a 0038 5024 544d 304b     K161,0*28.$PMTK0
 8099b1c:	3031 302c 3230 322a 0044 0000               10,002*2D...

08099b28 <_ZTV8SPIClass>:
	...
 8099b30:	11d9 0809 11db 0809                         ........

08099b38 <_ZL14clock_divisors>:
 8099b38:	0800 1810 2820 3830                         .... (08

08099b40 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 8099b48:	13f1 0809 13f7 0809 14eb 0809 1403 0809     ................
 8099b58:	13f3 0809                                   ....

08099b5c <_ZTV9TCPClient>:
	...
 8099b64:	1c19 0808 1c4d 0808 13c5 0809 177d 0809     ....M.......}...
 8099b74:	1569 0809 14b7 0809 1489 0809 13db 0809     i...............
 8099b84:	1699 0809 1409 0809 1507 0809 15e5 0809     ................
 8099b94:	17a1 0809 17f3 0809 13dd 0809 616e 006e     ............nan.
 8099ba4:	766f 0066 6e69 0066 6e6c 6600 006e 6564     ovf.inf.ln.fn.de
 8099bb4:	6174 6c69 0d00 000a 3025 3031 2075 5d00     tail....%010u .]
 8099bc4:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
 8099bd4:	0020 6925 6400 7465 6961 736c 3d20 0020      .%i.details = .
 8099be4:	6162 6475 5300 7265 6169 006c 5355 5342     baud.Serial.USBS
 8099bf4:	7265 6169 316c 7000 7261 6d61 6300 646d     erial1.param.cmd
 8099c04:	6800 646e 7300 7274 006d 6966 746c 6c00     .hnd.strm.filt.l
 8099c14:	6c76 6100 6464 6148 646e 656c 0072 6572     vl.addHandler.re
 8099c24:	6f6d 6576 6148 646e 656c 0072 6e65 6d75     moveHandler.enum
 8099c34:	6148 646e 656c 7372 4a00 4f53 534e 7274     Handlers.JSONStr
 8099c44:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
 8099c54:	0070 6f6e 656e 7400 6172 6563 6900 666e     p.none.trace.inf
 8099c64:	006f 6177 6e72 6500 7272 726f 7000 6e61     o.warn.error.pan
 8099c74:	6369 6100 6c6c 2500 302b 6433 253a 3230     ic.all.%+03d:%02
 8099c84:	0075 5925 252d 2d6d 6425 2554 3a48 4d25     u.%Y-%m-%dT%H:%M
 8099c94:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

08099ca4 <_ZTV9IPAddress>:
	...
 8099cac:	1f4b 0809 1f3d 0809 1f3f 0809               K...=...?...

08099cb8 <_ZTV9USBSerial>:
	...
 8099cc0:	1fc1 0809 2005 0809 1fdf 0809 19bf 0809     ..... ..........
 8099cd0:	1fd9 0809 1fc3 0809 1fcb 0809 1fff 0809     ................
 8099ce0:	1fd3 0809 1fbd 0809                         ........

08099ce8 <_ZTVN5spark13CellularClassE>:
	...
 8099cf0:	2131 0809                                   1!..

08099cf4 <_ZN5spark7NetworkE>:
 8099cf4:	3db0 2000                                   .=. 

08099cf8 <_ZTV11USARTSerial>:
	...
 8099d00:	f8e5 0808 f8e7 0808 219b 0809 19bf 0809     .........!......
 8099d10:	2183 0809 218f 0809 2189 0809 2195 0809     .!...!...!...!..
 8099d20:	2179 0809 217d 0809                         y!..}!..

08099d28 <_ZTV7TwoWire>:
	...
 8099d30:	2251 0809 229b 0809 2273 0809 2253 0809     Q"..."..s"..S"..
 8099d40:	227b 0809 2283 0809 228b 0809 2293 0809     {"..."..."..."..
 8099d50:	6d66 646f 0000 0000                         fmod....

08099d58 <Zero>:
	...
 8099d64:	0000 8000                                   ....

08099d68 <day_name.4723>:
 8099d68:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 8099d78:	6972 6153 4a74                                   riSat

08099d7d <mon_name.4724>:
 8099d7d:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 8099d8d:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 8099d9d:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 8099dad:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 8099dbd:	6425 000a                                   %d..

08099dc1 <_ctype_>:
 8099dc1:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 8099dd1:	2020 2020 2020 2020 2020 2020 2020 2020                     
 8099de1:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 8099df1:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8099e01:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 8099e11:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8099e21:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 8099e31:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8099e41:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

08099ec4 <__sf_fake_stdin>:
	...

08099ee4 <__sf_fake_stdout>:
	...

08099f04 <__sf_fake_stderr>:
	...
 8099f24:	4f50 4953 0058 0000                         POSIX...

08099f2c <__month_lengths>:
 8099f2c:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 8099f3c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8099f4c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8099f5c:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 8099f6c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8099f7c:	001e 0000 001f 0000 001e 0000 001f 0000     ................

08099f8c <fpi.5342>:
 8099f8c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 8099f9c:	0000 0000 6e69 7469 0079 0000               ....inity...

08099fa8 <fpinan.5378>:
 8099fa8:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

08099fc0 <tinytens>:
 8099fc0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 8099fd0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 8099fe0:	6f43 64ac 0628 1168 5a54 4700 544d 2500     Co.d(.h.TZ.GMT.%
 8099ff0:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
 809a000:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
 809a010:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
 809a020:	2575 006e 0000 0000                         u%n.....

0809a028 <__mprec_tens>:
 809a028:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 809a038:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 809a048:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 809a058:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 809a068:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 809a078:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 809a088:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 809a098:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 809a0a8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 809a0b8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 809a0c8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 809a0d8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 809a0e8:	9db4 79d9 7843 44ea                         ...yCx.D

0809a0f0 <__mprec_bigtens>:
 809a0f0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 809a100:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 809a110:	bf3c 7f73 4fdd 7515                         <.s..O.u

0809a118 <p05.5385>:
 809a118:	0005 0000 0019 0000 007d 0000               ........}...

0809a124 <link_const_variable_data_end>:
 809a124:	080807c5 	.word	0x080807c5
 809a128:	08080825 	.word	0x08080825
 809a12c:	08080829 	.word	0x08080829
 809a130:	0808082d 	.word	0x0808082d
 809a134:	08080831 	.word	0x08080831
 809a138:	08080fe1 	.word	0x08080fe1
 809a13c:	08080fe5 	.word	0x08080fe5
 809a140:	08081003 	.word	0x08081003
 809a144:	08081007 	.word	0x08081007
 809a148:	0808100b 	.word	0x0808100b
 809a14c:	0808100f 	.word	0x0808100f
 809a150:	080813b1 	.word	0x080813b1
 809a154:	08081501 	.word	0x08081501
 809a158:	0808195d 	.word	0x0808195d
 809a15c:	08081981 	.word	0x08081981
 809a160:	08081985 	.word	0x08081985
 809a164:	08081b53 	.word	0x08081b53
 809a168:	08081b57 	.word	0x08081b57
 809a16c:	08081f15 	.word	0x08081f15
 809a170:	0808f8e1 	.word	0x0808f8e1
 809a174:	0808fa15 	.word	0x0808fa15
 809a178:	0808fe49 	.word	0x0808fe49
 809a17c:	0808ff55 	.word	0x0808ff55
 809a180:	0809003d 	.word	0x0809003d
 809a184:	08090455 	.word	0x08090455
 809a188:	08090c05 	.word	0x08090c05
 809a18c:	08091321 	.word	0x08091321
 809a190:	08091cad 	.word	0x08091cad
 809a194:	08091d6d 	.word	0x08091d6d
 809a198:	08091dd9 	.word	0x08091dd9
 809a19c:	0809213d 	.word	0x0809213d
 809a1a0:	080923ad 	.word	0x080923ad
 809a1a4:	08092409 	.word	0x08092409
 809a1a8:	08092489 	.word	0x08092489
 809a1ac:	0809250d 	.word	0x0809250d
 809a1b0:	080925d1 	.word	0x080925d1
 809a1b4:	08092695 	.word	0x08092695

0809a1b8 <link_constructors_end>:
	...
