
d:/CAR/TelematicsLocal/Particle/src/telematics/target/telematics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000127e8  080a0018  080a0018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  080b2800  080b2800  00022800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .backup       00000004  40024000  080b2808  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000098  20000300  080b280c  00030300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00003238  20000398  20000398  00040398  2**3
                  ALLOC
  6 .module_info_suffix 00000028  080b28a4  080b28a4  000328a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080b28cc  080b28cc  000328cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000af250  00000000  00000000  000328d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000122f4  00000000  00000000  000e1b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00037d87  00000000  00000000  000f3e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002c38  00000000  00000000  0012bb9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000041d0  00000000  00000000  0012e7d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00029b2e  00000000  00000000  001329a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002c7eb  00000000  00000000  0015c4d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a393c  00000000  00000000  00188cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000e300  00000000  00000000  0022c5f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	e4 f1 0a 08                                         ....

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f00f f860 	bl	80af0f2 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f00f f880 	bl	80af13e <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080b280c 	.word	0x080b280c
 80a004c:	20000398 	.word	0x20000398
 80a0050:	20000398 	.word	0x20000398
 80a0054:	200035d0 	.word	0x200035d0
 80a0058:	200035d0 	.word	0x200035d0

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f00e fb57 	bl	80ae710 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080b27bc 	.word	0x080b27bc
 80a0084:	080b27f4 	.word	0x080b27f4

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b818 	b.w	80a00bc <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f839 	bl	80a0104 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f00e baf9 	b.w	80ae68c <_post_loop>

080a009a <_Znwj>:
 80a009a:	f00d bf2f 	b.w	80adefc <malloc>

080a009e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a009e:	f00d bf2d 	b.w	80adefc <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f00d bf33 	b.w	80adf0c <free>

080a00a6 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
 80a00a6:	f00d bf31 	b.w	80adf0c <free>

080a00aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00aa:	7800      	ldrb	r0, [r0, #0]
 80a00ac:	fab0 f080 	clz	r0, r0
 80a00b0:	0940      	lsrs	r0, r0, #5
 80a00b2:	4770      	bx	lr

080a00b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b4:	2301      	movs	r3, #1
 80a00b6:	7003      	strb	r3, [r0, #0]
 80a00b8:	4770      	bx	lr

080a00ba <_Z8callbackPcPhj>:
 * MQTT client("www.sample.com", 1883, callback);
 **/
AWS awsThing("a3mb0mz6legbs8.iot.us-east-2.amazonaws.com", 8883, &callback);

// recieve message
void callback(char* topic, byte* payload, unsigned int length) {
 80a00ba:	4770      	bx	lr

080a00bc <setup>:
}

#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)
unsigned long lastSync = millis();
int counter = 0;
void setup() {
 80a00bc:	b508      	push	{r3, lr}

    RGB.control(true);
 80a00be:	2001      	movs	r0, #1
 80a00c0:	f00e fa94 	bl	80ae5ec <_ZN8RGBClass7controlEb>
    //connect to aws
    awsThing.connect("CarT");
 80a00c4:	490a      	ldr	r1, [pc, #40]	; (80a00f0 <setup+0x34>)
 80a00c6:	480b      	ldr	r0, [pc, #44]	; (80a00f4 <setup+0x38>)
 80a00c8:	f00d fd9e 	bl	80adc08 <_ZN3AWS7connectEPKc>
    // publish/subscribe
    if (awsThing.isConnected()) {
 80a00cc:	4809      	ldr	r0, [pc, #36]	; (80a00f4 <setup+0x38>)
 80a00ce:	f00d fd95 	bl	80adbfc <_ZN3AWS11isConnectedEv>
 80a00d2:	b158      	cbz	r0, 80a00ec <setup+0x30>
        Serial.println("client connected");
 80a00d4:	f00e fbf2 	bl	80ae8bc <_Z16_fetch_usbserialv>
 80a00d8:	4907      	ldr	r1, [pc, #28]	; (80a00f8 <setup+0x3c>)
 80a00da:	f00e fa2d 	bl	80ae538 <_ZN5Print7printlnEPKc>
        awsThing.publish("outTopic/message", "hello world");
    }
}
 80a00de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    //connect to aws
    awsThing.connect("CarT");
    // publish/subscribe
    if (awsThing.isConnected()) {
        Serial.println("client connected");
        awsThing.publish("outTopic/message", "hello world");
 80a00e2:	4a06      	ldr	r2, [pc, #24]	; (80a00fc <setup+0x40>)
 80a00e4:	4906      	ldr	r1, [pc, #24]	; (80a0100 <setup+0x44>)
 80a00e6:	4803      	ldr	r0, [pc, #12]	; (80a00f4 <setup+0x38>)
 80a00e8:	f00d bd8b 	b.w	80adc02 <_ZN3AWS7publishEPKcS1_>
 80a00ec:	bd08      	pop	{r3, pc}
 80a00ee:	bf00      	nop
 80a00f0:	080af1f8 	.word	0x080af1f8
 80a00f4:	2000039c 	.word	0x2000039c
 80a00f8:	080af1fd 	.word	0x080af1fd
 80a00fc:	080af20e 	.word	0x080af20e
 80a0100:	080af21a 	.word	0x080af21a

080a0104 <loop>:
    }
}

void loop() {
    delay(200);
 80a0104:	20c8      	movs	r0, #200	; 0xc8
 80a0106:	f00e ba5f 	b.w	80ae5c8 <delay>
	...

080a010c <_GLOBAL__sub_I_awsThing>:
 80a010c:	b508      	push	{r3, lr}
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a010e:	f00d fdcd 	bl	80adcac <HAL_Pin_Map>
 * byte server[] = { XXX,XXX,XXX,XXX };
 * MQTT client(server, 1883, callback);
 * want to use domain name,
 * MQTT client("www.sample.com", 1883, callback);
 **/
AWS awsThing("a3mb0mz6legbs8.iot.us-east-2.amazonaws.com", 8883, &callback);
 80a0112:	4b06      	ldr	r3, [pc, #24]	; (80a012c <_GLOBAL__sub_I_awsThing+0x20>)
 80a0114:	f242 22b3 	movw	r2, #8883	; 0x22b3
 80a0118:	4905      	ldr	r1, [pc, #20]	; (80a0130 <_GLOBAL__sub_I_awsThing+0x24>)
 80a011a:	4806      	ldr	r0, [pc, #24]	; (80a0134 <_GLOBAL__sub_I_awsThing+0x28>)
 80a011c:	f00d fdbe 	bl	80adc9c <_ZN3AWSC1EPctPFvS0_PhjE>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0120:	f00d fddc 	bl	80adcdc <HAL_Timer_Get_Milli_Seconds>
void callback(char* topic, byte* payload, unsigned int length) {
    //to be defined will execute in another thread eventually
}

#define ONE_DAY_MILLIS (24 * 60 * 60 * 1000)
unsigned long lastSync = millis();
 80a0124:	4b04      	ldr	r3, [pc, #16]	; (80a0138 <_GLOBAL__sub_I_awsThing+0x2c>)
 80a0126:	6018      	str	r0, [r3, #0]
 80a0128:	bd08      	pop	{r3, pc}
 80a012a:	bf00      	nop
 80a012c:	080a00bb 	.word	0x080a00bb
 80a0130:	080af22b 	.word	0x080af22b
 80a0134:	2000039c 	.word	0x2000039c
 80a0138:	200007a4 	.word	0x200007a4

080a013c <_ZN4MQTT9debug_TlsEPviPKciS2_>:
  return 0;
}

void MQTT::debug_Tls( void *ctx, int level,
                      const char *file, int line,
                      const char *str ) {
 80a013c:	4770      	bx	lr
	...

080a0140 <_ZN4MQTT8send_TlsEPvPKhj>:

bool MQTT::available() {
    return tcpClient.available();
}

int MQTT::send_Tls(void *ctx, const unsigned char *buf, size_t len) {
 80a0140:	b570      	push	{r4, r5, r6, lr}
 80a0142:	4605      	mov	r5, r0
 80a0144:	460c      	mov	r4, r1
 80a0146:	4616      	mov	r6, r2
  MQTT *sock = (MQTT *)ctx;

  if (!sock->tcpClient.connected()) {
 80a0148:	f00e f926 	bl	80ae398 <_ZN9TCPClient9connectedEv>
 80a014c:	b158      	cbz	r0, 80a0166 <_ZN4MQTT8send_TlsEPvPKhj+0x26>
    return -1;
  }

  int ret = sock->tcpClient.write(buf, len);
 80a014e:	4621      	mov	r1, r4
 80a0150:	4632      	mov	r2, r6
 80a0152:	4628      	mov	r0, r5
 80a0154:	f00e f90e 	bl	80ae374 <_ZN9TCPClient5writeEPKhj>
  if (ret == 0) {
 80a0158:	4604      	mov	r4, r0
 80a015a:	b138      	cbz	r0, 80a016c <_ZN4MQTT8send_TlsEPvPKhj+0x2c>
      return MBEDTLS_ERR_SSL_WANT_WRITE;
  }
  sock->tcpClient.flush();
 80a015c:	4628      	mov	r0, r5
 80a015e:	f00d ff27 	bl	80adfb0 <_ZN9TCPClient5flushEv>
  return ret;
 80a0162:	4620      	mov	r0, r4
 80a0164:	bd70      	pop	{r4, r5, r6, pc}

int MQTT::send_Tls(void *ctx, const unsigned char *buf, size_t len) {
  MQTT *sock = (MQTT *)ctx;

  if (!sock->tcpClient.connected()) {
    return -1;
 80a0166:	f04f 30ff 	mov.w	r0, #4294967295
 80a016a:	bd70      	pop	{r4, r5, r6, pc}
  }

  int ret = sock->tcpClient.write(buf, len);
  if (ret == 0) {
      return MBEDTLS_ERR_SSL_WANT_WRITE;
 80a016c:	4800      	ldr	r0, [pc, #0]	; (80a0170 <_ZN4MQTT8send_TlsEPvPKhj+0x30>)
  }
  sock->tcpClient.flush();
  return ret;
}
 80a016e:	bd70      	pop	{r4, r5, r6, pc}
 80a0170:	ffff9780 	.word	0xffff9780

080a0174 <_ZN4MQTT8recv_TlsEPvPhj>:

int MQTT::recv_Tls(void *ctx, unsigned char *buf, size_t len) {
 80a0174:	b570      	push	{r4, r5, r6, lr}
 80a0176:	4604      	mov	r4, r0
 80a0178:	460d      	mov	r5, r1
 80a017a:	4616      	mov	r6, r2
  MQTT *sock = (MQTT *)ctx;
  if (!sock->tcpClient.connected()) {
 80a017c:	f00e f90c 	bl	80ae398 <_ZN9TCPClient9connectedEv>
 80a0180:	b158      	cbz	r0, 80a019a <_ZN4MQTT8recv_TlsEPvPhj+0x26>
    return -1;
  }

  if (sock->tcpClient.available() == 0) {
 80a0182:	4620      	mov	r0, r4
 80a0184:	f00d ffe6 	bl	80ae154 <_ZN9TCPClient9availableEv>
 80a0188:	b128      	cbz	r0, 80a0196 <_ZN4MQTT8recv_TlsEPvPhj+0x22>
    return MBEDTLS_ERR_SSL_WANT_READ;
  }

  int ret = sock->tcpClient.read(buf, len);
 80a018a:	4632      	mov	r2, r6
 80a018c:	4629      	mov	r1, r5
 80a018e:	4620      	mov	r0, r4
 80a0190:	f00d ffaf 	bl	80ae0f2 <_ZN9TCPClient4readEPhj>
  if (ret == 0) {
 80a0194:	b918      	cbnz	r0, 80a019e <_ZN4MQTT8recv_TlsEPvPhj+0x2a>
    return MBEDTLS_ERR_SSL_WANT_READ;
 80a0196:	4802      	ldr	r0, [pc, #8]	; (80a01a0 <_ZN4MQTT8recv_TlsEPvPhj+0x2c>)
 80a0198:	bd70      	pop	{r4, r5, r6, pc}
}

int MQTT::recv_Tls(void *ctx, unsigned char *buf, size_t len) {
  MQTT *sock = (MQTT *)ctx;
  if (!sock->tcpClient.connected()) {
    return -1;
 80a019a:	f04f 30ff 	mov.w	r0, #4294967295
  int ret = sock->tcpClient.read(buf, len);
  if (ret == 0) {
    return MBEDTLS_ERR_SSL_WANT_READ;
  }
  return ret;
}
 80a019e:	bd70      	pop	{r4, r5, r6, pc}
 80a01a0:	ffff9700 	.word	0xffff9700

080a01a4 <_ZN4MQTT7rng_TlsEPvPhj>:

int MQTT::rng_Tls(void* handle, uint8_t* data, const size_t len_) {
 80a01a4:	b570      	push	{r4, r5, r6, lr}
 80a01a6:	460e      	mov	r6, r1
 80a01a8:	4615      	mov	r5, r2
 80a01aa:	460c      	mov	r4, r1
  size_t len = len_;
  while (len>=4) {
 80a01ac:	1b2b      	subs	r3, r5, r4
 80a01ae:	4433      	add	r3, r6
 80a01b0:	2b03      	cmp	r3, #3
 80a01b2:	d904      	bls.n	80a01be <_ZN4MQTT7rng_TlsEPvPhj+0x1a>
      *((uint32_t*)data) = HAL_RNG_GetRandomNumber();
 80a01b4:	f00d fd8a 	bl	80adccc <HAL_RNG_GetRandomNumber>
 80a01b8:	f844 0b04 	str.w	r0, [r4], #4
  return ret;
}

int MQTT::rng_Tls(void* handle, uint8_t* data, const size_t len_) {
  size_t len = len_;
  while (len>=4) {
 80a01bc:	e7f6      	b.n	80a01ac <_ZN4MQTT7rng_TlsEPvPhj+0x8>
 80a01be:	08ac      	lsrs	r4, r5, #2
 80a01c0:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80a01c4:	4435      	add	r5, r6
      *((uint32_t*)data) = HAL_RNG_GetRandomNumber();
      data += 4;
      len -= 4;
  }

  while (len-->0) {
 80a01c6:	42ac      	cmp	r4, r5
 80a01c8:	d004      	beq.n	80a01d4 <_ZN4MQTT7rng_TlsEPvPhj+0x30>
      *data++ = HAL_RNG_GetRandomNumber();
 80a01ca:	f00d fd7f 	bl	80adccc <HAL_RNG_GetRandomNumber>
 80a01ce:	f804 0b01 	strb.w	r0, [r4], #1
      *((uint32_t*)data) = HAL_RNG_GetRandomNumber();
      data += 4;
      len -= 4;
  }

  while (len-->0) {
 80a01d2:	e7f8      	b.n	80a01c6 <_ZN4MQTT7rng_TlsEPvPhj+0x22>
      *data++ = HAL_RNG_GetRandomNumber();
  }
  return 0;
}
 80a01d4:	2000      	movs	r0, #0
 80a01d6:	bd70      	pop	{r4, r5, r6, pc}

080a01d8 <_ZN4MQTT14veryfyCert_TlsEPvP16mbedtls_x509_crtiPm>:
    return false;
  }
  return true;
}

int MQTT::veryfyCert_Tls(void *data, mbedtls_x509_crt *crt, int depth, uint32_t *flags) {
 80a01d8:	b500      	push	{lr}
 80a01da:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
  char buf[1024];
  ((void) data);

  debug_tls("Verify requested for (Depth %d):\n", depth);
  mbedtls_x509_crt_info(buf, sizeof(buf) - 1, "", crt);
 80a01de:	460b      	mov	r3, r1
 80a01e0:	4a05      	ldr	r2, [pc, #20]	; (80a01f8 <_ZN4MQTT14veryfyCert_TlsEPvP16mbedtls_x509_crtiPm+0x20>)
 80a01e2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80a01e6:	4668      	mov	r0, sp
 80a01e8:	f005 ff8a 	bl	80a6100 <mbedtls_x509_crt_info>
  } else {
    debug_tls(buf, sizeof(buf), "  ! ", *flags);
    debug_tls("%s\n", buf);
  }
  return 0;
}
 80a01ec:	2000      	movs	r0, #0
 80a01ee:	f20d 4d04 	addw	sp, sp, #1028	; 0x404
 80a01f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80a01f6:	bf00      	nop
 80a01f8:	080af8c8 	.word	0x080af8c8

080a01fc <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
	TCPClient();
	TCPClient(sock_handle_t sock);
        virtual ~TCPClient() {};
 80a01fc:	b538      	push	{r3, r4, r5, lr}
 80a01fe:	4b0b      	ldr	r3, [pc, #44]	; (80a022c <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0200:	6984      	ldr	r4, [r0, #24]
 80a0202:	4605      	mov	r5, r0
 80a0204:	6003      	str	r3, [r0, #0]
 80a0206:	b17c      	cbz	r4, 80a0228 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0208:	6863      	ldr	r3, [r4, #4]
 80a020a:	3b01      	subs	r3, #1
 80a020c:	6063      	str	r3, [r4, #4]
 80a020e:	b95b      	cbnz	r3, 80a0228 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
 80a0210:	6823      	ldr	r3, [r4, #0]
 80a0212:	4620      	mov	r0, r4
 80a0214:	689b      	ldr	r3, [r3, #8]
 80a0216:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0218:	68a3      	ldr	r3, [r4, #8]
 80a021a:	3b01      	subs	r3, #1
 80a021c:	60a3      	str	r3, [r4, #8]
 80a021e:	b91b      	cbnz	r3, 80a0228 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a0220:	6823      	ldr	r3, [r4, #0]
 80a0222:	4620      	mov	r0, r4
 80a0224:	68db      	ldr	r3, [r3, #12]
 80a0226:	4798      	blx	r3
 80a0228:	4628      	mov	r0, r5
 80a022a:	bd38      	pop	{r3, r4, r5, pc}
 80a022c:	080b259c 	.word	0x080b259c

080a0230 <_ZN9TCPClientD0Ev>:
 80a0230:	b510      	push	{r4, lr}
 80a0232:	4604      	mov	r4, r0
 80a0234:	f7ff ffe2 	bl	80a01fc <_ZN9TCPClientD1Ev>
 80a0238:	4620      	mov	r0, r4
 80a023a:	f7ff ff32 	bl	80a00a2 <_ZdlPv>
 80a023e:	4620      	mov	r0, r4
 80a0240:	bd10      	pop	{r4, pc}

080a0242 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:
        disconnect();
        free(buffer);
    }
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a0242:	b538      	push	{r3, r4, r5, lr}
 80a0244:	4604      	mov	r4, r0
 80a0246:	461d      	mov	r5, r3
    this->callback = callback;
 80a0248:	9b05      	ldr	r3, [sp, #20]
 80a024a:	6303      	str	r3, [r0, #48]	; 0x30
    this->tls = false;
 80a024c:	2000      	movs	r0, #0
 80a024e:	f884 0681 	strb.w	r0, [r4, #1665]	; 0x681
    this->tlsConnected = false;
 80a0252:	f884 0680 	strb.w	r0, [r4, #1664]	; 0x680
    this->qoscallback = NULL;
 80a0256:	6360      	str	r0, [r4, #52]	; 0x34
    if (ip != NULL)
 80a0258:	b102      	cbz	r2, 80a025c <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1a>
        this->ip = ip;
 80a025a:	64a2      	str	r2, [r4, #72]	; 0x48
    if (domain != NULL)
 80a025c:	b119      	cbz	r1, 80a0266 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x24>
        this->domain = domain;
 80a025e:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a0262:	f00e f923 	bl	80ae4ac <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
 80a0266:	9b04      	ldr	r3, [sp, #16]

    this->maxpacketsize = maxpacketsize;
    if (buffer != NULL)
 80a0268:	69e0      	ldr	r0, [r4, #28]
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
    this->keepalive = keepalive;
 80a026a:	6523      	str	r3, [r4, #80]	; 0x50

    this->maxpacketsize = maxpacketsize;
 80a026c:	9b06      	ldr	r3, [sp, #24]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
 80a026e:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    this->maxpacketsize = maxpacketsize;
 80a0272:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
 80a0276:	b108      	cbz	r0, 80a027c <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x3a>
      delete[] buffer;
 80a0278:	f7ff ff15 	bl	80a00a6 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
 80a027c:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 80a0280:	f7ff ff0d 	bl	80a009e <_Znaj>
 80a0284:	61e0      	str	r0, [r4, #28]
 80a0286:	bd38      	pop	{r3, r4, r5, pc}

080a0288 <_ZN4MQTTC1EPctPFvS0_PhjE>:

MQTT::MQTT() {
    this->ip = NULL;
}

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
 80a0288:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a028c:	4604      	mov	r4, r0
 80a028e:	4617      	mov	r7, r2
 80a0290:	4698      	mov	r8, r3
 80a0292:	460e      	mov	r6, r1
 80a0294:	2500      	movs	r5, #0
 80a0296:	f00d ffed 	bl	80ae274 <_ZN9TCPClientC1Ev>
 80a029a:	61e5      	str	r5, [r4, #28]
 80a029c:	490c      	ldr	r1, [pc, #48]	; (80a02d0 <_ZN4MQTTC1EPctPFvS0_PhjE+0x48>)
 80a029e:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a02a2:	f00e f8f0 	bl	80ae486 <_ZN6StringC1EPK19__FlashStringHelper>
 80a02a6:	2301      	movs	r3, #1
 80a02a8:	f884 3682 	strb.w	r3, [r4, #1666]	; 0x682
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
 80a02ac:	23ff      	movs	r3, #255	; 0xff
 80a02ae:	9302      	str	r3, [sp, #8]
 80a02b0:	230f      	movs	r3, #15
 80a02b2:	9300      	str	r3, [sp, #0]
 80a02b4:	4620      	mov	r0, r4

MQTT::MQTT() {
    this->ip = NULL;
}

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
 80a02b6:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
 80a02b8:	f8cd 8004 	str.w	r8, [sp, #4]
 80a02bc:	463b      	mov	r3, r7
 80a02be:	462a      	mov	r2, r5
 80a02c0:	4631      	mov	r1, r6
 80a02c2:	f7ff ffbe 	bl	80a0242 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
 80a02c6:	4620      	mov	r0, r4
 80a02c8:	b004      	add	sp, #16
 80a02ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a02ce:	bf00      	nop
 80a02d0:	080af8c8 	.word	0x080af8c8

080a02d4 <_ZN4MQTT11writeStringEPKcPht>:
    }
    tcpClient.stop();
    lastInActivity = lastOutActivity = millis();
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
 80a02d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
 80a02d6:	460d      	mov	r5, r1
 80a02d8:	3302      	adds	r3, #2
 80a02da:	b29b      	uxth	r3, r3
 80a02dc:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
 80a02de:	f815 6b01 	ldrb.w	r6, [r5], #1
 80a02e2:	b2a4      	uxth	r4, r4
 80a02e4:	b13e      	cbz	r6, 80a02f6 <_ZN4MQTT11writeStringEPKcPht+0x22>
 80a02e6:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
 80a02ea:	429f      	cmp	r7, r3
 80a02ec:	d903      	bls.n	80a02f6 <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
 80a02ee:	1c5c      	adds	r4, r3, #1
 80a02f0:	54d6      	strb	r6, [r2, r3]
 80a02f2:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
 80a02f4:	e7f2      	b.n	80a02dc <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
 80a02f6:	1b19      	subs	r1, r3, r4
 80a02f8:	440a      	add	r2, r1
 80a02fa:	1221      	asrs	r1, r4, #8
 80a02fc:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
 80a0300:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
 80a0304:	4618      	mov	r0, r3
 80a0306:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0308 <_ZN4MQTT8netWriteEPhi>:


uint16_t MQTT::netWrite(unsigned char *buff, int length) {
 80a0308:	b510      	push	{r4, lr}
    debug_tls("netWrite!!\n");
    if (tls == false) {
 80a030a:	f890 4681 	ldrb.w	r4, [r0, #1665]	; 0x681
 80a030e:	b914      	cbnz	r4, 80a0316 <_ZN4MQTT8netWriteEPhi+0xe>
        return tcpClient.write(buff, length);
 80a0310:	f00e f830 	bl	80ae374 <_ZN9TCPClient5writeEPKhj>
 80a0314:	e003      	b.n	80a031e <_ZN4MQTT8netWriteEPhi+0x16>
    } else {
        return mbedtls_ssl_write(&ssl, buff, length);
 80a0316:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
 80a031a:	f008 fa6b 	bl	80a87f4 <mbedtls_ssl_write>
 80a031e:	b280      	uxth	r0, r0
    }
}
 80a0320:	bd10      	pop	{r4, pc}

080a0322 <_ZN4MQTT5writeEhPht>:
    }
    return false;
}


bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a0322:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a0324:	4607      	mov	r7, r0
 80a0326:	468e      	mov	lr, r1
 80a0328:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
 80a032a:	461d      	mov	r5, r3
}


bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
 80a032c:	2400      	movs	r4, #0
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
 80a032e:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a0332:	a902      	add	r1, sp, #8
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
 80a0334:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a0336:	4421      	add	r1, r4
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
 80a0338:	bf18      	it	ne
 80a033a:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
 80a033e:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a0340:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
 80a0344:	b2e4      	uxtb	r4, r4
    } while(len > 0);
 80a0346:	2d00      	cmp	r5, #0
 80a0348:	d1f1      	bne.n	80a032e <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
 80a034a:	f1c4 0304 	rsb	r3, r4, #4
 80a034e:	18d1      	adds	r1, r2, r3
 80a0350:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
 80a0354:	42a5      	cmp	r5, r4
 80a0356:	da06      	bge.n	80a0366 <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
 80a0358:	a801      	add	r0, sp, #4
 80a035a:	1b2b      	subs	r3, r5, r4
 80a035c:	5c28      	ldrb	r0, [r5, r0]
 80a035e:	4413      	add	r3, r2
 80a0360:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
 80a0362:	3501      	adds	r5, #1
 80a0364:	e7f6      	b.n	80a0354 <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = netWrite(buf+(4-llen), length+1+llen);
 80a0366:	1c72      	adds	r2, r6, #1
 80a0368:	4422      	add	r2, r4
 80a036a:	4638      	mov	r0, r7
 80a036c:	f7ff ffcc 	bl	80a0308 <_ZN4MQTT8netWriteEPhi>
 80a0370:	4605      	mov	r5, r0
 80a0372:	f00d fcb3 	bl	80adcdc <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
 80a0376:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = netWrite(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
 80a0378:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
 80a037a:	19a0      	adds	r0, r4, r6
}
 80a037c:	1b43      	subs	r3, r0, r5
 80a037e:	4258      	negs	r0, r3
 80a0380:	4158      	adcs	r0, r3
 80a0382:	b003      	add	sp, #12
 80a0384:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0386 <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
 80a0386:	b538      	push	{r3, r4, r5, lr}
 80a0388:	4604      	mov	r4, r0
    debug_tls("mqtt disconnected\n");

    buffer[0] = MQTTDISCONNECT;
 80a038a:	69c3      	ldr	r3, [r0, #28]
 80a038c:	22e0      	movs	r2, #224	; 0xe0
 80a038e:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
 80a0390:	69c3      	ldr	r3, [r0, #28]
 80a0392:	2500      	movs	r5, #0
 80a0394:	705d      	strb	r5, [r3, #1]
    netWrite(buffer,2);
 80a0396:	2202      	movs	r2, #2
 80a0398:	69c1      	ldr	r1, [r0, #28]
 80a039a:	f7ff ffb5 	bl	80a0308 <_ZN4MQTT8netWriteEPhi>

    if (tls) {
 80a039e:	f894 3681 	ldrb.w	r3, [r4, #1665]	; 0x681
 80a03a2:	b1bb      	cbz	r3, 80a03d4 <_ZN4MQTT10disconnectEv+0x4e>
        debug_tls("tls close\n");
        tlsConnected = false;
        tls = false;
        mbedtls_x509_crt_free(&cacert);
 80a03a4:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
    buffer[1] = 0;
    netWrite(buffer,2);

    if (tls) {
        debug_tls("tls close\n");
        tlsConnected = false;
 80a03a8:	f884 5680 	strb.w	r5, [r4, #1664]	; 0x680
        tls = false;
 80a03ac:	f884 5681 	strb.w	r5, [r4, #1665]	; 0x681
        mbedtls_x509_crt_free(&cacert);
 80a03b0:	f006 fddd 	bl	80a6f6e <mbedtls_x509_crt_free>
        mbedtls_x509_crt_free(&clicert);
 80a03b4:	f204 501c 	addw	r0, r4, #1308	; 0x51c
 80a03b8:	f006 fdd9 	bl	80a6f6e <mbedtls_x509_crt_free>
        mbedtls_pk_free(&pkey);
 80a03bc:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
 80a03c0:	f00a f9b5 	bl	80aa72e <mbedtls_pk_free>
        mbedtls_ssl_config_free (&conf);
 80a03c4:	f504 7061 	add.w	r0, r4, #900	; 0x384
 80a03c8:	f008 fc04 	bl	80a8bd4 <mbedtls_ssl_config_free>
        mbedtls_ssl_free (&ssl);
 80a03cc:	f504 7034 	add.w	r0, r4, #720	; 0x2d0
 80a03d0:	f008 fb6c 	bl	80a8aac <mbedtls_ssl_free>
    }
    tcpClient.stop();
 80a03d4:	4620      	mov	r0, r4
 80a03d6:	f00d fefb 	bl	80ae1d0 <_ZN9TCPClient4stopEv>
 80a03da:	f00d fc7f 	bl	80adcdc <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
 80a03de:	6260      	str	r0, [r4, #36]	; 0x24
 80a03e0:	62a0      	str	r0, [r4, #40]	; 0x28
 80a03e2:	bd38      	pop	{r3, r4, r5, pc}

080a03e4 <_ZN4MQTT8readByteEv>:
        disconnect();
    }
    return false;
}

uint8_t MQTT::readByte() {
 80a03e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (tls == false) {
 80a03e6:	f890 3681 	ldrb.w	r3, [r0, #1665]	; 0x681
        disconnect();
    }
    return false;
}

uint8_t MQTT::readByte() {
 80a03ea:	4604      	mov	r4, r0
    if (tls == false) {
 80a03ec:	b94b      	cbnz	r3, 80a0402 <_ZN4MQTT8readByteEv+0x1e>
        while(!tcpClient.available()) {}
 80a03ee:	4620      	mov	r0, r4
 80a03f0:	f00d feb0 	bl	80ae154 <_ZN9TCPClient9availableEv>
 80a03f4:	2800      	cmp	r0, #0
 80a03f6:	d0fa      	beq.n	80a03ee <_ZN4MQTT8readByteEv+0xa>
        return tcpClient.read();
 80a03f8:	4620      	mov	r0, r4
 80a03fa:	f00d fe52 	bl	80ae0a2 <_ZN9TCPClient4readEv>
 80a03fe:	b2c0      	uxtb	r0, r0
 80a0400:	e017      	b.n	80a0432 <_ZN4MQTT8readByteEv+0x4e>
    } else {
        uint8_t val = 0;
        uint8_t buff;

        if (tlsConnected) {
 80a0402:	f890 3680 	ldrb.w	r3, [r0, #1664]	; 0x680
 80a0406:	b19b      	cbz	r3, 80a0430 <_ZN4MQTT8readByteEv+0x4c>
            while (1) {
                int ret = mbedtls_ssl_read(&ssl, &buff, 1);
 80a0408:	f500 7534 	add.w	r5, r0, #720	; 0x2d0
 80a040c:	2201      	movs	r2, #1
 80a040e:	f10d 0107 	add.w	r1, sp, #7
 80a0412:	4628      	mov	r0, r5
 80a0414:	f008 f968 	bl	80a86e8 <mbedtls_ssl_read>
                if (ret < 0) {
 80a0418:	2800      	cmp	r0, #0
 80a041a:	da06      	bge.n	80a042a <_ZN4MQTT8readByteEv+0x46>
                      switch (ret) {
 80a041c:	f510 4fd2 	cmn.w	r0, #26880	; 0x6900
 80a0420:	d0f4      	beq.n	80a040c <_ZN4MQTT8readByteEv+0x28>
                        case MBEDTLS_ERR_SSL_WANT_READ:
                          break;
                      case MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE:
                      case MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY:
                      default:
                          disconnect();
 80a0422:	4620      	mov	r0, r4
 80a0424:	f7ff ffaf 	bl	80a0386 <_ZN4MQTT10disconnectEv>
 80a0428:	e002      	b.n	80a0430 <_ZN4MQTT8readByteEv+0x4c>
                          return -1;
                    }
                } else {
                    return buff;
 80a042a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a042e:	e000      	b.n	80a0432 <_ZN4MQTT8readByteEv+0x4e>
                }
            }
        } else {
            return -1;
 80a0430:	20ff      	movs	r0, #255	; 0xff
        }
    }
}
 80a0432:	b003      	add	sp, #12
 80a0434:	bd30      	pop	{r4, r5, pc}

080a0436 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a0436:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a043a:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a043c:	69c4      	ldr	r4, [r0, #28]
            return -1;
        }
    }
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a043e:	468a      	mov	sl, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a0440:	f7ff ffd0 	bl	80a03e4 <_ZN4MQTT8readByteEv>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
 80a0444:	f04f 0801 	mov.w	r8, #1
    }
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a0448:	4646      	mov	r6, r8
 80a044a:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
 80a044c:	69eb      	ldr	r3, [r5, #28]
    uint32_t multiplier = 1;
    uint16_t length = 0;
 80a044e:	2700      	movs	r7, #0
 80a0450:	f893 9000 	ldrb.w	r9, [r3]
 80a0454:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
 80a0458:	4628      	mov	r0, r5
 80a045a:	f7ff ffc3 	bl	80a03e4 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
 80a045e:	69eb      	ldr	r3, [r5, #28]
 80a0460:	1c74      	adds	r4, r6, #1
 80a0462:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
 80a0464:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 80a0468:	fb03 7708 	mla	r7, r3, r8, r7
        multiplier *= 128;
    } while ((digit & 128) != 0);
 80a046c:	0603      	lsls	r3, r0, #24
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 80a046e:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
 80a0470:	b2bf      	uxth	r7, r7
        multiplier *= 128;
 80a0472:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    } while ((digit & 128) != 0);
 80a0476:	d501      	bpl.n	80a047c <_ZN4MQTT10readPacketEPh+0x46>
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 80a0478:	4626      	mov	r6, r4
 80a047a:	e7ed      	b.n	80a0458 <_ZN4MQTT10readPacketEPh+0x22>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 80a047c:	1e63      	subs	r3, r4, #1

    if (isPublish) {
 80a047e:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 80a0482:	f88a 3000 	strb.w	r3, [sl]

    if (isPublish) {
 80a0486:	d113      	bne.n	80a04b0 <_ZN4MQTT10readPacketEPh+0x7a>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
 80a0488:	4628      	mov	r0, r5
 80a048a:	f8d5 801c 	ldr.w	r8, [r5, #28]
 80a048e:	f7ff ffa9 	bl	80a03e4 <_ZN4MQTT8readByteEv>
 80a0492:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
 80a0496:	4628      	mov	r0, r5
 80a0498:	f8d5 801c 	ldr.w	r8, [r5, #28]
 80a049c:	f7ff ffa2 	bl	80a03e4 <_ZN4MQTT8readByteEv>
 80a04a0:	1cf4      	adds	r4, r6, #3
 80a04a2:	3602      	adds	r6, #2
 80a04a4:	b2b6      	uxth	r6, r6
 80a04a6:	b2a4      	uxth	r4, r4
 80a04a8:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
 80a04ac:	2302      	movs	r3, #2
 80a04ae:	e000      	b.n	80a04b2 <_ZN4MQTT10readPacketEPh+0x7c>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
 80a04b0:	2300      	movs	r3, #0
 80a04b2:	1b1b      	subs	r3, r3, r4
 80a04b4:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a04b6:	19a3      	adds	r3, r4, r6
 80a04b8:	b29b      	uxth	r3, r3
 80a04ba:	429f      	cmp	r7, r3
 80a04bc:	d90b      	bls.n	80a04d6 <_ZN4MQTT10readPacketEPh+0xa0>
        digit = readByte();
 80a04be:	4628      	mov	r0, r5
 80a04c0:	f7ff ff90 	bl	80a03e4 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
 80a04c4:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
 80a04c8:	42a3      	cmp	r3, r4
            buffer[len] = digit;
 80a04ca:	bf84      	itt	hi
 80a04cc:	69eb      	ldrhi	r3, [r5, #28]
 80a04ce:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
 80a04d0:	3401      	adds	r4, #1
 80a04d2:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a04d4:	e7ef      	b.n	80a04b6 <_ZN4MQTT10readPacketEPh+0x80>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
 80a04d6:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
 80a04da:	42a0      	cmp	r0, r4
 80a04dc:	bf2c      	ite	cs
 80a04de:	4620      	movcs	r0, r4
 80a04e0:	2000      	movcc	r0, #0
 80a04e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a04e6 <_ZN4MQTT11isConnectedEv>:
        return mbedtls_ssl_write(&ssl, buff, length);
    }
}


bool MQTT::isConnected() {
 80a04e6:	b510      	push	{r4, lr}
 80a04e8:	4604      	mov	r4, r0
    bool rc = (int)tcpClient.connected();
 80a04ea:	f00d ff55 	bl	80ae398 <_ZN9TCPClient9connectedEv>
    if (tls)
 80a04ee:	f894 3681 	ldrb.w	r3, [r4, #1665]	; 0x681
 80a04f2:	b91b      	cbnz	r3, 80a04fc <_ZN4MQTT11isConnectedEv+0x16>
    }
}


bool MQTT::isConnected() {
    bool rc = (int)tcpClient.connected();
 80a04f4:	3000      	adds	r0, #0
 80a04f6:	bf18      	it	ne
 80a04f8:	2001      	movne	r0, #1
 80a04fa:	bd10      	pop	{r4, pc}
    if (tls)
        return tlsConnected;
 80a04fc:	f894 0680 	ldrb.w	r0, [r4, #1664]	; 0x680
    return rc;
}
 80a0500:	bd10      	pop	{r4, pc}

080a0502 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a0502:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0506:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80a0508:	4604      	mov	r4, r0
 80a050a:	468b      	mov	fp, r1
 80a050c:	4691      	mov	r9, r2
 80a050e:	469a      	mov	sl, r3
 80a0510:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80a0514:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80a0518:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    if (isConnected()) {
 80a051c:	f7ff ffe3 	bl	80a04e6 <_ZN4MQTT11isConnectedEv>
 80a0520:	2800      	cmp	r0, #0
 80a0522:	d048      	beq.n	80a05b6 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, sizeof(buffer));
 80a0524:	69e3      	ldr	r3, [r4, #28]
 80a0526:	2200      	movs	r2, #0
 80a0528:	601a      	str	r2, [r3, #0]

        length = writeString(topic, buffer, length);
 80a052a:	69e2      	ldr	r2, [r4, #28]
 80a052c:	2305      	movs	r3, #5
 80a052e:	4659      	mov	r1, fp
 80a0530:	4620      	mov	r0, r4
 80a0532:	f7ff fecf 	bl	80a02d4 <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
 80a0536:	1e6b      	subs	r3, r5, #1
 80a0538:	2b01      	cmp	r3, #1
 80a053a:	d812      	bhi.n	80a0562 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x60>
            nextMsgId += 1;
 80a053c:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a053e:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, sizeof(buffer));

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
 80a0540:	3301      	adds	r3, #1
 80a0542:	b29b      	uxth	r3, r3
 80a0544:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a0546:	121b      	asrs	r3, r3, #8
 80a0548:	5413      	strb	r3, [r2, r0]
 80a054a:	1c41      	adds	r1, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
 80a054c:	69e3      	ldr	r3, [r4, #28]
 80a054e:	8c22      	ldrh	r2, [r4, #32]

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
            buffer[length++] = (nextMsgId >> 8);
 80a0550:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
 80a0552:	3002      	adds	r0, #2
 80a0554:	b280      	uxth	r0, r0
 80a0556:	545a      	strb	r2, [r3, r1]
            if (messageid != NULL)
 80a0558:	b11e      	cbz	r6, 80a0562 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x60>
                *messageid = nextMsgId++;
 80a055a:	8c23      	ldrh	r3, [r4, #32]
 80a055c:	1c5a      	adds	r2, r3, #1
 80a055e:	8422      	strh	r2, [r4, #32]
 80a0560:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a0562:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a0564:	b291      	uxth	r1, r2
 80a0566:	1883      	adds	r3, r0, r2
 80a0568:	458a      	cmp	sl, r1
 80a056a:	b29b      	uxth	r3, r3
 80a056c:	d909      	bls.n	80a0582 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x80>
 80a056e:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
 80a0572:	3201      	adds	r2, #1
 80a0574:	429e      	cmp	r6, r3
 80a0576:	d904      	bls.n	80a0582 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x80>
            buffer[length++] = payload[i];
 80a0578:	f819 6001 	ldrb.w	r6, [r9, r1]
 80a057c:	69e1      	ldr	r1, [r4, #28]
 80a057e:	54ce      	strb	r6, [r1, r3]
 80a0580:	e7f0      	b.n	80a0564 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x62>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
 80a0582:	f1b8 0f00 	cmp.w	r8, #0
 80a0586:	bf0c      	ite	eq
 80a0588:	2130      	moveq	r1, #48	; 0x30
 80a058a:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
 80a058c:	b10f      	cbz	r7, 80a0592 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x90>
            header |= DUP_FLAG_ON_MASK;
 80a058e:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
 80a0592:	2d02      	cmp	r5, #2
 80a0594:	d102      	bne.n	80a059c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x9a>
            header |= MQTTQOS2_HEADER_MASK;
 80a0596:	f041 0104 	orr.w	r1, r1, #4
 80a059a:	e003      	b.n	80a05a4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa2>
        else if (qos == QOS1)
 80a059c:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
 80a059e:	bf08      	it	eq
 80a05a0:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 80a05a4:	4620      	mov	r0, r4
 80a05a6:	3b05      	subs	r3, #5
 80a05a8:	69e2      	ldr	r2, [r4, #28]
 80a05aa:	b29b      	uxth	r3, r3
    }
    return false;
}
 80a05ac:	b001      	add	sp, #4
 80a05ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 80a05b2:	f7ff beb6 	b.w	80a0322 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
 80a05b6:	b001      	add	sp, #4
 80a05b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a05bc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain) {
    return publish(topic, payload, plength, retain, QOS0, NULL);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
 80a05bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
 80a05be:	9c08      	ldr	r4, [sp, #32]
 80a05c0:	9403      	str	r4, [sp, #12]
 80a05c2:	2400      	movs	r4, #0
 80a05c4:	9402      	str	r4, [sp, #8]
 80a05c6:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80a05ca:	9401      	str	r4, [sp, #4]
 80a05cc:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80a05d0:	9400      	str	r4, [sp, #0]
 80a05d2:	f7ff ff96 	bl	80a0502 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
 80a05d6:	b004      	add	sp, #16
 80a05d8:	bd10      	pop	{r4, pc}

080a05da <_ZN4MQTT7publishEPKcS1_>:
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
 80a05da:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a05dc:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a05de:	4610      	mov	r0, r2
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
 80a05e0:	460e      	mov	r6, r1
 80a05e2:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a05e4:	f00e fdc1 	bl	80af16a <strlen>
 80a05e8:	2300      	movs	r3, #0
 80a05ea:	9302      	str	r3, [sp, #8]
 80a05ec:	9301      	str	r3, [sp, #4]
 80a05ee:	9300      	str	r3, [sp, #0]
 80a05f0:	4622      	mov	r2, r4
 80a05f2:	4603      	mov	r3, r0
 80a05f4:	4631      	mov	r1, r6
 80a05f6:	4628      	mov	r0, r5
 80a05f8:	f7ff ffe0 	bl	80a05bc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
 80a05fc:	b004      	add	sp, #16
 80a05fe:	bd70      	pop	{r4, r5, r6, pc}

080a0600 <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 80a0600:	b510      	push	{r4, lr}
 80a0602:	4604      	mov	r4, r0
    if (isConnected()) {
 80a0604:	f7ff ff6f 	bl	80a04e6 <_ZN4MQTT11isConnectedEv>
 80a0608:	b128      	cbz	r0, 80a0616 <_ZN4MQTTD1Ev+0x16>
        disconnect();
 80a060a:	4620      	mov	r0, r4
 80a060c:	f7ff febb 	bl	80a0386 <_ZN4MQTT10disconnectEv>
        free(buffer);
 80a0610:	69e0      	ldr	r0, [r4, #28]
 80a0612:	f00d fc7b 	bl	80adf0c <free>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 80a0616:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a061a:	f00d feed 	bl	80ae3f8 <_ZN6StringD1Ev>
 80a061e:	4620      	mov	r0, r4
 80a0620:	f7ff fdec 	bl	80a01fc <_ZN9TCPClientD1Ev>
    if (isConnected()) {
        disconnect();
        free(buffer);
    }
}
 80a0624:	4620      	mov	r0, r4
 80a0626:	bd10      	pop	{r4, pc}

080a0628 <_ZN4MQTT9availableEv>:
    if (tls)
        return tlsConnected;
    return rc;
}

bool MQTT::available() {
 80a0628:	b508      	push	{r3, lr}
    return tcpClient.available();
 80a062a:	f00d fd93 	bl	80ae154 <_ZN9TCPClient9availableEv>
}
 80a062e:	3000      	adds	r0, #0
 80a0630:	bf18      	it	ne
 80a0632:	2001      	movne	r0, #1
 80a0634:	bd08      	pop	{r3, pc}
	...

080a0638 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j>:
    return this->enableTls(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int MQTT::enableTls(const char *rootCaPem, const size_t rootCaPemSize,
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
 80a0638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a063c:	4605      	mov	r5, r0
 80a063e:	4693      	mov	fp, r2
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
 80a0640:	f500 7461 	add.w	r4, r0, #900	; 0x384
    return this->enableTls(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int MQTT::enableTls(const char *rootCaPem, const size_t rootCaPemSize,
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
 80a0644:	4699      	mov	r9, r3
    int ret;
    tls = true;
 80a0646:	2301      	movs	r3, #1
    return this->enableTls(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int MQTT::enableTls(const char *rootCaPem, const size_t rootCaPemSize,
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
 80a0648:	b085      	sub	sp, #20
    int ret;
    tls = true;
 80a064a:	f880 3681 	strb.w	r3, [r0, #1665]	; 0x681

    mbedtls_ssl_config_init(&conf);
    mbedtls_ssl_init(&ssl);
 80a064e:	f505 7634 	add.w	r6, r5, #720	; 0x2d0
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
 80a0652:	4620      	mov	r0, r4
    return this->enableTls(rootCaPem, rootCaPemSize, NULL, 0, NULL, 0);
}

int MQTT::enableTls(const char *rootCaPem, const size_t rootCaPemSize,
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
 80a0654:	9103      	str	r1, [sp, #12]
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
    mbedtls_ssl_init(&ssl);
    mbedtls_x509_crt_init(&cacert);
 80a0656:	f505 7a7a 	add.w	sl, r5, #1000	; 0x3e8
                    const char *clientCertPem, const size_t clientCertPemSize,
                    const char *clientKeyPem, const size_t clientKeyPemSize) {
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
 80a065a:	f008 fa75 	bl	80a8b48 <mbedtls_ssl_config_init>
    mbedtls_ssl_init(&ssl);
 80a065e:	4630      	mov	r0, r6
 80a0660:	f007 ff9a 	bl	80a8598 <mbedtls_ssl_init>
    mbedtls_x509_crt_init(&cacert);
    mbedtls_x509_crt_init(&clicert);
 80a0664:	f205 571c 	addw	r7, r5, #1308	; 0x51c
    int ret;
    tls = true;

    mbedtls_ssl_config_init(&conf);
    mbedtls_ssl_init(&ssl);
    mbedtls_x509_crt_init(&cacert);
 80a0668:	4650      	mov	r0, sl
 80a066a:	f006 fc7b 	bl	80a6f64 <mbedtls_x509_crt_init>
    mbedtls_x509_crt_init(&clicert);
    mbedtls_pk_init(&pkey);
 80a066e:	f505 68ca 	add.w	r8, r5, #1616	; 0x650
    tls = true;

    mbedtls_ssl_config_init(&conf);
    mbedtls_ssl_init(&ssl);
    mbedtls_x509_crt_init(&cacert);
    mbedtls_x509_crt_init(&clicert);
 80a0672:	4638      	mov	r0, r7
 80a0674:	f006 fc76 	bl	80a6f64 <mbedtls_x509_crt_init>
    mbedtls_pk_init(&pkey);
 80a0678:	4640      	mov	r0, r8
 80a067a:	f00a f853 	bl	80aa724 <mbedtls_pk_init>

    mbedtls_ssl_conf_dbg(&conf, &MQTT::debug_Tls, nullptr);
 80a067e:	2200      	movs	r2, #0
 80a0680:	4935      	ldr	r1, [pc, #212]	; (80a0758 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x120>)
 80a0682:	4620      	mov	r0, r4
 80a0684:	f007 ff99 	bl	80a85ba <mbedtls_ssl_conf_dbg>
    #if defined(MBEDTLS_DEBUG_C)
      mbedtls_debug_set_threshold(DEBUG_TLS_CORE_LEVEL);
    #endif

    if ((ret = mbedtls_x509_crt_parse(&cacert, (const unsigned char *)rootCaPem, rootCaPemSize)) < 0) {
 80a0688:	465a      	mov	r2, fp
 80a068a:	9903      	ldr	r1, [sp, #12]
 80a068c:	4650      	mov	r0, sl
 80a068e:	f007 f807 	bl	80a76a0 <mbedtls_x509_crt_parse>
 80a0692:	2800      	cmp	r0, #0
 80a0694:	db5d      	blt.n	80a0752 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x11a>
      debug_tls(" enableTls mbedtls_x509_crt_parse error : %d\n", ret);
      return ret;
    }

    if (clientCertPem != NULL && clientCertPemSize > 0) {
 80a0696:	f1b9 0f00 	cmp.w	r9, #0
 80a069a:	d102      	bne.n	80a06a2 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x6a>
        debug_tls(" tlsClientKey mbedtls_x509_crt_parse error : %d\n", ret);
        return ret;
      }
    }

    if (clientKeyPem != NULL && clientKeyPemSize > 0) {
 80a069c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80a069e:	b95b      	cbnz	r3, 80a06b8 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x80>
 80a06a0:	e00c      	b.n	80a06bc <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x84>
    if ((ret = mbedtls_x509_crt_parse(&cacert, (const unsigned char *)rootCaPem, rootCaPemSize)) < 0) {
      debug_tls(" enableTls mbedtls_x509_crt_parse error : %d\n", ret);
      return ret;
    }

    if (clientCertPem != NULL && clientCertPemSize > 0) {
 80a06a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a06a4:	2b00      	cmp	r3, #0
 80a06a6:	d0f9      	beq.n	80a069c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x64>
      if ((ret = mbedtls_x509_crt_parse(&clicert, (const unsigned char *)clientCertPem, clientCertPemSize)) < 0) {
 80a06a8:	461a      	mov	r2, r3
 80a06aa:	4649      	mov	r1, r9
 80a06ac:	4638      	mov	r0, r7
 80a06ae:	f006 fff7 	bl	80a76a0 <mbedtls_x509_crt_parse>
 80a06b2:	2800      	cmp	r0, #0
 80a06b4:	daf2      	bge.n	80a069c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x64>
 80a06b6:	e04c      	b.n	80a0752 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x11a>
        debug_tls(" tlsClientKey mbedtls_x509_crt_parse error : %d\n", ret);
        return ret;
      }
    }

    if (clientKeyPem != NULL && clientKeyPemSize > 0) {
 80a06b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80a06ba:	b94b      	cbnz	r3, 80a06d0 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x98>
        debug_tls(" tlsClientKey mbedtls_pk_parse_key error : %d\n", ret);
        return ret;
      }
    }

    if ((ret = mbedtls_ssl_config_defaults(&conf, MBEDTLS_SSL_IS_CLIENT,
 80a06bc:	2300      	movs	r3, #0
 80a06be:	461a      	mov	r2, r3
 80a06c0:	4619      	mov	r1, r3
 80a06c2:	4620      	mov	r0, r4
 80a06c4:	f008 fa44 	bl	80a8b50 <mbedtls_ssl_config_defaults>
 80a06c8:	4683      	mov	fp, r0
 80a06ca:	2800      	cmp	r0, #0
 80a06cc:	d141      	bne.n	80a0752 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x11a>
 80a06ce:	e009      	b.n	80a06e4 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0xac>
        return ret;
      }
    }

    if (clientKeyPem != NULL && clientKeyPemSize > 0) {
      if ((ret = mbedtls_pk_parse_key(&pkey, (const unsigned char *)clientKeyPem, clientKeyPemSize, NULL, 0)) != 0) {
 80a06d0:	2300      	movs	r3, #0
 80a06d2:	9300      	str	r3, [sp, #0]
 80a06d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80a06d6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80a06d8:	4640      	mov	r0, r8
 80a06da:	f004 fe4d 	bl	80a5378 <mbedtls_pk_parse_key>
 80a06de:	2800      	cmp	r0, #0
 80a06e0:	d0ec      	beq.n	80a06bc <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x84>
 80a06e2:	e036      	b.n	80a0752 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x11a>

    if ((ret = mbedtls_ssl_config_defaults(&conf, MBEDTLS_SSL_IS_CLIENT,
                   MBEDTLS_SSL_TRANSPORT_STREAM, MBEDTLS_SSL_PRESET_DEFAULT)) != 0) {
      return ret;
    }
    mbedtls_ssl_conf_min_version(&conf, MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3);
 80a06e4:	2203      	movs	r2, #3
 80a06e6:	4611      	mov	r1, r2
 80a06e8:	4620      	mov	r0, r4
 80a06ea:	f007 ffb3 	bl	80a8654 <mbedtls_ssl_conf_min_version>
    mbedtls_ssl_conf_verify(&conf, &MQTT::veryfyCert_Tls, NULL);
 80a06ee:	465a      	mov	r2, fp
 80a06f0:	491a      	ldr	r1, [pc, #104]	; (80a075c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x124>)
 80a06f2:	4620      	mov	r0, r4
 80a06f4:	f007 ff5b 	bl	80a85ae <mbedtls_ssl_conf_verify>

    // if server certificates is not valid, connection will success. check certificates on verify() function.
    mbedtls_ssl_conf_authmode(&conf, MBEDTLS_SSL_VERIFY_OPTIONAL);
 80a06f8:	2101      	movs	r1, #1
 80a06fa:	4620      	mov	r0, r4
 80a06fc:	f007 ff50 	bl	80a85a0 <mbedtls_ssl_conf_authmode>
    mbedtls_ssl_conf_rng(&conf, &MQTT::rng_Tls, nullptr);
 80a0700:	465a      	mov	r2, fp
 80a0702:	4917      	ldr	r1, [pc, #92]	; (80a0760 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x128>)
 80a0704:	4620      	mov	r0, r4
 80a0706:	f007 ff55 	bl	80a85b4 <mbedtls_ssl_conf_rng>
    mbedtls_ssl_conf_ca_chain(&conf, &cacert, nullptr);
 80a070a:	465a      	mov	r2, fp
 80a070c:	4651      	mov	r1, sl
 80a070e:	4620      	mov	r0, r4
 80a0710:	f007 ff67 	bl	80a85e2 <mbedtls_ssl_conf_ca_chain>

    if (clientCertPem != NULL && clientKeyPem != NULL) {
 80a0714:	f1b9 0f00 	cmp.w	r9, #0
 80a0718:	d006      	beq.n	80a0728 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0xf0>
 80a071a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80a071c:	b123      	cbz	r3, 80a0728 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0xf0>
      mbedtls_ssl_conf_own_cert(&conf, &clicert, &pkey);
 80a071e:	4642      	mov	r2, r8
 80a0720:	4639      	mov	r1, r7
 80a0722:	4620      	mov	r0, r4
 80a0724:	f007 ff5a 	bl	80a85dc <mbedtls_ssl_conf_own_cert>
    }

    if((ret = mbedtls_ssl_setup(&ssl, &conf)) != 0) {
 80a0728:	4621      	mov	r1, r4
 80a072a:	4630      	mov	r0, r6
 80a072c:	f008 f984 	bl	80a8a38 <mbedtls_ssl_setup>
 80a0730:	4604      	mov	r4, r0
 80a0732:	b968      	cbnz	r0, 80a0750 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x118>
      return ret;
    }

    mbedtls_ssl_set_timer_cb(&ssl, &timer, mbedtls_timing_set_delay, mbedtls_timing_get_delay);
 80a0734:	4b0b      	ldr	r3, [pc, #44]	; (80a0764 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x12c>)
 80a0736:	4a0c      	ldr	r2, [pc, #48]	; (80a0768 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x130>)
 80a0738:	f505 61cb 	add.w	r1, r5, #1624	; 0x658
 80a073c:	4630      	mov	r0, r6
 80a073e:	f007 ff45 	bl	80a85cc <mbedtls_ssl_set_timer_cb>
    mbedtls_ssl_set_bio(&ssl, this, &MQTT::send_Tls,  &MQTT::recv_Tls, nullptr);
 80a0742:	9400      	str	r4, [sp, #0]
 80a0744:	4b09      	ldr	r3, [pc, #36]	; (80a076c <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x134>)
 80a0746:	4a0a      	ldr	r2, [pc, #40]	; (80a0770 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j+0x138>)
 80a0748:	4629      	mov	r1, r5
 80a074a:	4630      	mov	r0, r6
 80a074c:	f007 ff38 	bl	80a85c0 <mbedtls_ssl_set_bio>
 80a0750:	4620      	mov	r0, r4
    return 0;
}
 80a0752:	b005      	add	sp, #20
 80a0754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0758:	080a013d 	.word	0x080a013d
 80a075c:	080a01d9 	.word	0x080a01d9
 80a0760:	080a01a5 	.word	0x080a01a5
 80a0764:	080a45c9 	.word	0x080a45c9
 80a0768:	080a45bb 	.word	0x080a45bb
 80a076c:	080a0175 	.word	0x080a0175
 80a0770:	080a0141 	.word	0x080a0141

080a0774 <_ZN4MQTT6verifyEv>:
      return 0;
  }
  return ret;
}

bool MQTT::verify() {
 80a0774:	b500      	push	{lr}
  int ret;
  if ((ret = mbedtls_ssl_get_verify_result(&ssl)) != 0 ) {
 80a0776:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
      return 0;
  }
  return ret;
}

bool MQTT::verify() {
 80a077a:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
  int ret;
  if ((ret = mbedtls_ssl_get_verify_result(&ssl)) != 0 ) {
 80a077e:	f007 ff6e 	bl	80a865e <mbedtls_ssl_get_verify_result>
 80a0782:	4603      	mov	r3, r0
 80a0784:	b138      	cbz	r0, 80a0796 <_ZN4MQTT6verifyEv+0x22>
    char vrfy_buf[512];
    mbedtls_x509_crt_verify_info( vrfy_buf, sizeof( vrfy_buf ), "  ! ", ret );
 80a0786:	4a06      	ldr	r2, [pc, #24]	; (80a07a0 <_ZN4MQTT6verifyEv+0x2c>)
 80a0788:	f44f 7100 	mov.w	r1, #512	; 0x200
 80a078c:	4668      	mov	r0, sp
 80a078e:	f005 ffd3 	bl	80a6738 <mbedtls_x509_crt_verify_info>
    debug_tls("%s\n", vrfy_buf);
    return false;
 80a0792:	2000      	movs	r0, #0
 80a0794:	e000      	b.n	80a0798 <_ZN4MQTT6verifyEv+0x24>
  }
  return true;
 80a0796:	2001      	movs	r0, #1
}
 80a0798:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
 80a079c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a07a0:	080af266 	.word	0x080af266

080a07a4 <_ZN4MQTT12handShakeTlsEv>:
    mbedtls_ssl_set_bio(&ssl, this, &MQTT::send_Tls,  &MQTT::recv_Tls, nullptr);
    return 0;
}


int MQTT::handShakeTls() {
 80a07a4:	b570      	push	{r4, r5, r6, lr}
 80a07a6:	4604      	mov	r4, r0
  int ret;
  debug_tls("hand shake start\n");
  do {
      while (ssl.state != MBEDTLS_SSL_HANDSHAKE_OVER) {
          ret = mbedtls_ssl_handshake_client_step(&ssl);
 80a07a8:	f500 7634 	add.w	r6, r0, #720	; 0x2d0

int MQTT::handShakeTls() {
  int ret;
  debug_tls("hand shake start\n");
  do {
      while (ssl.state != MBEDTLS_SSL_HANDSHAKE_OVER) {
 80a07ac:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 80a07b0:	2b10      	cmp	r3, #16
 80a07b2:	d005      	beq.n	80a07c0 <_ZN4MQTT12handShakeTlsEv+0x1c>
          ret = mbedtls_ssl_handshake_client_step(&ssl);
 80a07b4:	4630      	mov	r0, r6
 80a07b6:	f00c fceb 	bl	80ad190 <mbedtls_ssl_handshake_client_step>
          if (ret != 0)
 80a07ba:	4605      	mov	r5, r0
 80a07bc:	2800      	cmp	r0, #0
 80a07be:	d0f5      	beq.n	80a07ac <_ZN4MQTT12handShakeTlsEv+0x8>
              break;
      }
  } while (ret == MBEDTLS_ERR_SSL_WANT_READ || ret == MBEDTLS_ERR_SSL_WANT_WRITE);
 80a07c0:	f515 4fd2 	cmn.w	r5, #26880	; 0x6900
 80a07c4:	d0f2      	beq.n	80a07ac <_ZN4MQTT12handShakeTlsEv+0x8>
 80a07c6:	f515 4fd1 	cmn.w	r5, #26752	; 0x6880
 80a07ca:	d0ef      	beq.n	80a07ac <_ZN4MQTT12handShakeTlsEv+0x8>

  // clean ca cert/crt/pkey for memory limitation
  mbedtls_x509_crt_free(&cacert);
 80a07cc:	f504 707a 	add.w	r0, r4, #1000	; 0x3e8
 80a07d0:	f006 fbcd 	bl	80a6f6e <mbedtls_x509_crt_free>
  mbedtls_x509_crt_free(&clicert);
 80a07d4:	f204 501c 	addw	r0, r4, #1308	; 0x51c
 80a07d8:	f006 fbc9 	bl	80a6f6e <mbedtls_x509_crt_free>
  mbedtls_pk_free(&pkey);
 80a07dc:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
 80a07e0:	f009 ffa5 	bl	80aa72e <mbedtls_pk_free>

  debug_tls("%s, ret = %d\n", "handshake done", ret);
  if (ssl.state == MBEDTLS_SSL_HANDSHAKE_OVER) {
 80a07e4:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 80a07e8:	2b10      	cmp	r3, #16
 80a07ea:	d109      	bne.n	80a0800 <_ZN4MQTT12handShakeTlsEv+0x5c>
      if (enableVerify && !verify())
 80a07ec:	f894 3682 	ldrb.w	r3, [r4, #1666]	; 0x682
 80a07f0:	b143      	cbz	r3, 80a0804 <_ZN4MQTT12handShakeTlsEv+0x60>
 80a07f2:	4620      	mov	r0, r4
 80a07f4:	f7ff ffbe 	bl	80a0774 <_ZN4MQTT6verifyEv>
 80a07f8:	b920      	cbnz	r0, 80a0804 <_ZN4MQTT12handShakeTlsEv+0x60>
        return -1;
 80a07fa:	f04f 30ff 	mov.w	r0, #4294967295
 80a07fe:	bd70      	pop	{r4, r5, r6, pc}
 80a0800:	4628      	mov	r0, r5
 80a0802:	bd70      	pop	{r4, r5, r6, pc}
      tlsConnected = true;
 80a0804:	2301      	movs	r3, #1
 80a0806:	f884 3680 	strb.w	r3, [r4, #1664]	; 0x680
      debug_tls("tls connected\n");
      return 0;
 80a080a:	2000      	movs	r0, #0
  }
  return ret;
}
 80a080c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0810 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:

bool MQTT::connect(const char *id, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage) {
    return connect(id,NULL,NULL,willTopic,willQos,willRetain,willMessage,true,MQTT_V311);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
 80a0810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a0814:	b08d      	sub	sp, #52	; 0x34
 80a0816:	4604      	mov	r4, r0
 80a0818:	4689      	mov	r9, r1
 80a081a:	4617      	mov	r7, r2
 80a081c:	461e      	mov	r6, r3
 80a081e:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
    if (!isConnected()) {
 80a0822:	f7ff fe60 	bl	80a04e6 <_ZN4MQTT11isConnectedEv>
 80a0826:	4605      	mov	r5, r0
 80a0828:	2800      	cmp	r0, #0
 80a082a:	f040 80e7 	bne.w	80a09fc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ec>
        int result = 0;
        if (ip == NULL) {
 80a082e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a0830:	2900      	cmp	r1, #0
 80a0832:	d138      	bne.n	80a08a6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
            result = tcpClient.connect(this->domain.c_str(), this->port);
 80a0834:	4603      	mov	r3, r0
 80a0836:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a083a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a083c:	4620      	mov	r0, r4
 80a083e:	f00d fbc3 	bl	80adfc8 <_ZN9TCPClient7connectEPKctm>
            if (tls) {
 80a0842:	f894 3681 	ldrb.w	r3, [r4, #1665]	; 0x681
 80a0846:	2b00      	cmp	r3, #0
 80a0848:	d050      	beq.n	80a08ec <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
                mbedtls_ssl_set_hostname(&ssl, domain);
 80a084a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a084c:	f504 7034 	add.w	r0, r4, #720	; 0x2d0
 80a0850:	f007 feca 	bl	80a85e8 <mbedtls_ssl_set_hostname>
                result = (0 == this->handShakeTls() ? 1 : 0);
 80a0854:	4620      	mov	r0, r4
 80a0856:	f7ff ffa5 	bl	80a07a4 <_ZN4MQTT12handShakeTlsEv>
 80a085a:	2800      	cmp	r0, #0
 80a085c:	f040 80ca 	bne.w	80a09f4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1e4>
                result = (0 == this->handShakeTls() ? 1 : 0);
            }
        }

        if (result) {
            nextMsgId = 1;
 80a0860:	2301      	movs	r3, #1
 80a0862:	8423      	strh	r3, [r4, #32]

            // Leave room in the buffer for header and variable length field
            uint16_t length = 5;
            const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a0864:	4b68      	ldr	r3, [pc, #416]	; (80a0a08 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1f8>)
 80a0866:	aa06      	add	r2, sp, #24
 80a0868:	6859      	ldr	r1, [r3, #4]
 80a086a:	6818      	ldr	r0, [r3, #0]
 80a086c:	c203      	stmia	r2!, {r0, r1}
 80a086e:	7a19      	ldrb	r1, [r3, #8]
            const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a0870:	f853 0f09 	ldr.w	r0, [r3, #9]!
        if (result) {
            nextMsgId = 1;

            // Leave room in the buffer for header and variable length field
            uint16_t length = 5;
            const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a0874:	7011      	strb	r1, [r2, #0]
            const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a0876:	889a      	ldrh	r2, [r3, #4]
 80a0878:	799b      	ldrb	r3, [r3, #6]
 80a087a:	f8ad 2014 	strh.w	r2, [sp, #20]
 80a087e:	f88d 3016 	strb.w	r3, [sp, #22]

            if (version == MQTT_V311) {
 80a0882:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
            nextMsgId = 1;

            // Leave room in the buffer for header and variable length field
            uint16_t length = 5;
            const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
            const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a0886:	9004      	str	r0, [sp, #16]

            if (version == MQTT_V311) {
 80a0888:	2b04      	cmp	r3, #4
 80a088a:	69e2      	ldr	r2, [r4, #28]
 80a088c:	d131      	bne.n	80a08f2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe2>
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a088e:	9804      	ldr	r0, [sp, #16]
 80a0890:	1d53      	adds	r3, r2, #5
 80a0892:	f8c2 0005 	str.w	r0, [r2, #5]
 80a0896:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80a089a:	f89d 2016 	ldrb.w	r2, [sp, #22]
 80a089e:	8099      	strh	r1, [r3, #4]
 80a08a0:	719a      	strb	r2, [r3, #6]
                length+=sizeof(MQTT_HEADER_V311);
 80a08a2:	230c      	movs	r3, #12
 80a08a4:	e02e      	b.n	80a0904 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xf4>
                mbedtls_ssl_set_hostname(&ssl, domain);
                result = (0 == this->handShakeTls() ? 1 : 0);
            }

        } else {
            result = tcpClient.connect(this->ip, this->port);
 80a08a6:	a806      	add	r0, sp, #24
 80a08a8:	f00d ffaa 	bl	80ae800 <_ZN9IPAddressC1EPKh>
 80a08ac:	462b      	mov	r3, r5
 80a08ae:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a08b2:	a906      	add	r1, sp, #24
 80a08b4:	4620      	mov	r0, r4
 80a08b6:	f00d fce7 	bl	80ae288 <_ZN9TCPClient7connectE9IPAddresstm>
            if (tls) {
 80a08ba:	f894 3681 	ldrb.w	r3, [r4, #1665]	; 0x681
 80a08be:	b1ab      	cbz	r3, 80a08ec <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
                char buffername[16];
                sprintf(buffername, "%d.%d.%d.%d", ip[0], ip[1], ip[2], ip[3]);
 80a08c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a08c2:	78c8      	ldrb	r0, [r1, #3]
 80a08c4:	784b      	ldrb	r3, [r1, #1]
 80a08c6:	780a      	ldrb	r2, [r1, #0]
 80a08c8:	9001      	str	r0, [sp, #4]
 80a08ca:	7889      	ldrb	r1, [r1, #2]
 80a08cc:	a806      	add	r0, sp, #24
 80a08ce:	9100      	str	r1, [sp, #0]
 80a08d0:	494e      	ldr	r1, [pc, #312]	; (80a0a0c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1fc>)
 80a08d2:	f00d fb2b 	bl	80adf2c <sprintf>
                mbedtls_ssl_set_hostname(&ssl, buffername);
 80a08d6:	a906      	add	r1, sp, #24
 80a08d8:	f504 7034 	add.w	r0, r4, #720	; 0x2d0
 80a08dc:	f007 fe84 	bl	80a85e8 <mbedtls_ssl_set_hostname>
                result = (0 == this->handShakeTls() ? 1 : 0);
 80a08e0:	4620      	mov	r0, r4
 80a08e2:	f7ff ff5f 	bl	80a07a4 <_ZN4MQTT12handShakeTlsEv>
 80a08e6:	fab0 f080 	clz	r0, r0
 80a08ea:	0940      	lsrs	r0, r0, #5
            }
        }

        if (result) {
 80a08ec:	2800      	cmp	r0, #0
 80a08ee:	d1b7      	bne.n	80a0860 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x50>
 80a08f0:	e080      	b.n	80a09f4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1e4>

            if (version == MQTT_V311) {
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
                length+=sizeof(MQTT_HEADER_V311);
            } else {
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a08f2:	ab06      	add	r3, sp, #24
 80a08f4:	cb03      	ldmia	r3!, {r0, r1}
 80a08f6:	f8c2 0005 	str.w	r0, [r2, #5]
 80a08fa:	f8c2 1009 	str.w	r1, [r2, #9]
 80a08fe:	781b      	ldrb	r3, [r3, #0]
 80a0900:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
 80a0902:	230e      	movs	r3, #14
            }

            uint8_t v = 0;
            if (willTopic) {
 80a0904:	f1b8 0f00 	cmp.w	r8, #0
 80a0908:	d00a      	beq.n	80a0920 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x110>
                v = 0x06|(willQos<<3)|(willRetain<<5);
 80a090a:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 80a090e:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 80a0912:	0152      	lsls	r2, r2, #5
 80a0914:	f042 0206 	orr.w	r2, r2, #6
 80a0918:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80a091c:	b2d2      	uxtb	r2, r2
 80a091e:	e000      	b.n	80a0922 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x112>
            } else {
                v = 0x02;
 80a0920:	2202      	movs	r2, #2
            }

            if (!cleanSession) {
 80a0922:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
 80a0926:	b909      	cbnz	r1, 80a092c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x11c>
              v = v&0xfd;
 80a0928:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
            }

            if(user != NULL) {
 80a092c:	b12f      	cbz	r7, 80a093a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x12a>
                v = v|0x80;

                if(pass != NULL) {
 80a092e:	b916      	cbnz	r6, 80a0936 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x126>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
 80a0930:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80a0934:	e001      	b.n	80a093a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x12a>

                if(pass != NULL) {
                    v = v|(0x80>>1);
 80a0936:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
                }
            }

            buffer[length++] = v;
 80a093a:	69e1      	ldr	r1, [r4, #28]

            buffer[length++] = ((this->keepalive) >> 8);
 80a093c:	1c58      	adds	r0, r3, #1
                if(pass != NULL) {
                    v = v|(0x80>>1);
                }
            }

            buffer[length++] = v;
 80a093e:	54ca      	strb	r2, [r1, r3]

            buffer[length++] = ((this->keepalive) >> 8);
 80a0940:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a0942:	69e1      	ldr	r1, [r4, #28]
 80a0944:	1212      	asrs	r2, r2, #8
 80a0946:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
 80a0948:	69e1      	ldr	r1, [r4, #28]
 80a094a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80a094c:	1c9a      	adds	r2, r3, #2
 80a094e:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
 80a0950:	3303      	adds	r3, #3
 80a0952:	69e2      	ldr	r2, [r4, #28]
 80a0954:	4649      	mov	r1, r9
 80a0956:	4620      	mov	r0, r4
 80a0958:	f7ff fcbc 	bl	80a02d4 <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
 80a095c:	f1b8 0f00 	cmp.w	r8, #0
 80a0960:	d00b      	beq.n	80a097a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x16a>
                length = writeString(willTopic, buffer, length);
 80a0962:	4603      	mov	r3, r0
 80a0964:	69e2      	ldr	r2, [r4, #28]
 80a0966:	4641      	mov	r1, r8
 80a0968:	4620      	mov	r0, r4
 80a096a:	f7ff fcb3 	bl	80a02d4 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
 80a096e:	69e2      	ldr	r2, [r4, #28]
 80a0970:	4603      	mov	r3, r0
 80a0972:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80a0974:	4620      	mov	r0, r4
 80a0976:	f7ff fcad 	bl	80a02d4 <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
 80a097a:	b167      	cbz	r7, 80a0996 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x186>
                length = writeString(user,buffer,length);
 80a097c:	4603      	mov	r3, r0
 80a097e:	69e2      	ldr	r2, [r4, #28]
 80a0980:	4639      	mov	r1, r7
 80a0982:	4620      	mov	r0, r4
 80a0984:	f7ff fca6 	bl	80a02d4 <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
 80a0988:	b12e      	cbz	r6, 80a0996 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x186>
                    length = writeString(pass,buffer,length);
 80a098a:	4603      	mov	r3, r0
 80a098c:	69e2      	ldr	r2, [r4, #28]
 80a098e:	4631      	mov	r1, r6
 80a0990:	4620      	mov	r0, r4
 80a0992:	f7ff fc9f 	bl	80a02d4 <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
 80a0996:	1f43      	subs	r3, r0, #5
 80a0998:	b29b      	uxth	r3, r3
 80a099a:	69e2      	ldr	r2, [r4, #28]
 80a099c:	2110      	movs	r1, #16
 80a099e:	4620      	mov	r0, r4
 80a09a0:	f7ff fcbf 	bl	80a0322 <_ZN4MQTT5writeEhPht>
 80a09a4:	f00d f99a 	bl	80adcdc <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a09a8:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
 80a09ac:	6260      	str	r0, [r4, #36]	; 0x24
 80a09ae:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!available()) {
 80a09b0:	4620      	mov	r0, r4
 80a09b2:	f7ff fe39 	bl	80a0628 <_ZN4MQTT9availableEv>
 80a09b6:	4606      	mov	r6, r0
 80a09b8:	b958      	cbnz	r0, 80a09d2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c2>
 80a09ba:	f00d f98f 	bl	80adcdc <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a09be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a09c0:	1ac0      	subs	r0, r0, r3
 80a09c2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a09c4:	437b      	muls	r3, r7
 80a09c6:	4298      	cmp	r0, r3
 80a09c8:	d9f2      	bls.n	80a09b0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a0>
                    debug_tls("MQTT connection timeout.\n");
                    disconnect();
 80a09ca:	4620      	mov	r0, r4
 80a09cc:	f7ff fcdb 	bl	80a0386 <_ZN4MQTT10disconnectEv>
 80a09d0:	e00e      	b.n	80a09f0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1e0>
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
 80a09d2:	f10d 010f 	add.w	r1, sp, #15
 80a09d6:	4620      	mov	r0, r4
 80a09d8:	f7ff fd2d 	bl	80a0436 <_ZN4MQTT10readPacketEPh>

            if (len == 4 && buffer[3] == 0) {
 80a09dc:	2804      	cmp	r0, #4
 80a09de:	d109      	bne.n	80a09f4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1e4>
 80a09e0:	69e3      	ldr	r3, [r4, #28]
 80a09e2:	78df      	ldrb	r7, [r3, #3]
 80a09e4:	b937      	cbnz	r7, 80a09f4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1e4>
 80a09e6:	f00d f979 	bl	80adcdc <HAL_Timer_Get_Milli_Seconds>
                lastInActivity = millis();
                pingOutstanding = false;
 80a09ea:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4 && buffer[3] == 0) {
                lastInActivity = millis();
 80a09ee:	62a0      	str	r0, [r4, #40]	; 0x28
            while (!available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
                    debug_tls("MQTT connection timeout.\n");
                    disconnect();
                    return false;
 80a09f0:	4635      	mov	r5, r6
 80a09f2:	e004      	b.n	80a09fe <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ee>
                pingOutstanding = false;
                debug_tls("MQTT connected.\n");
                return true;
            }
        }
        disconnect();
 80a09f4:	4620      	mov	r0, r4
 80a09f6:	f7ff fcc6 	bl	80a0386 <_ZN4MQTT10disconnectEv>
 80a09fa:	e000      	b.n	80a09fe <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ee>
    }
    return false;
 80a09fc:	2500      	movs	r5, #0
}
 80a09fe:	4628      	mov	r0, r5
 80a0a00:	b00d      	add	sp, #52	; 0x34
 80a0a02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a0a06:	bf00      	nop
 80a0a08:	080af256 	.word	0x080af256
 80a0a0c:	080af26b 	.word	0x080af26b

080a0a10 <_ZN4MQTT7connectEPKc>:

void MQTT::addQosCallback(void (*qoscallback)(unsigned int)) {
    this->qoscallback = qoscallback;
}

bool MQTT::connect(const char *id) {
 80a0a10:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id,NULL,NULL,0,QOS0,0,0,true,MQTT_V311);
 80a0a12:	2304      	movs	r3, #4
 80a0a14:	9305      	str	r3, [sp, #20]
 80a0a16:	2301      	movs	r3, #1
 80a0a18:	9304      	str	r3, [sp, #16]
 80a0a1a:	2300      	movs	r3, #0
 80a0a1c:	9303      	str	r3, [sp, #12]
 80a0a1e:	9302      	str	r3, [sp, #8]
 80a0a20:	9301      	str	r3, [sp, #4]
 80a0a22:	9300      	str	r3, [sp, #0]
 80a0a24:	461a      	mov	r2, r3
 80a0a26:	f7ff fef3 	bl	80a0810 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
 80a0a2a:	b007      	add	sp, #28
 80a0a2c:	f85d fb04 	ldr.w	pc, [sp], #4

080a0a30 <_GLOBAL__sub_I__ZN4MQTTC2Ev>:
 80a0a30:	f00d b93c 	b.w	80adcac <HAL_Pin_Map>

080a0a34 <mbedtls_sha256_init>:
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 80a0a34:	226c      	movs	r2, #108	; 0x6c
 80a0a36:	2100      	movs	r1, #0
 80a0a38:	f00e bb81 	b.w	80af13e <memset>

080a0a3c <mbedtls_sha256_free>:
}

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
    if( ctx == NULL )
 80a0a3c:	b138      	cbz	r0, 80a0a4e <mbedtls_sha256_free+0x12>
 80a0a3e:	f100 026c 	add.w	r2, r0, #108	; 0x6c

#if !defined(MBEDTLS_SHA256_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80a0a42:	2300      	movs	r3, #0
 80a0a44:	4290      	cmp	r0, r2
 80a0a46:	d002      	beq.n	80a0a4e <mbedtls_sha256_free+0x12>
 80a0a48:	7003      	strb	r3, [r0, #0]
 80a0a4a:	3001      	adds	r0, #1
 80a0a4c:	e7fa      	b.n	80a0a44 <mbedtls_sha256_free+0x8>
 80a0a4e:	4770      	bx	lr

080a0a50 <mbedtls_sha256_clone>:
    mbedtls_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
}

void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
                           const mbedtls_sha256_context *src )
{
 80a0a50:	b508      	push	{r3, lr}
    *dst = *src;
 80a0a52:	226c      	movs	r2, #108	; 0x6c
 80a0a54:	f00e fb4d 	bl	80af0f2 <memcpy>
 80a0a58:	bd08      	pop	{r3, pc}
	...

080a0a5c <mbedtls_sha256_starts_ret>:
/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    ctx->total[0] = 0;
 80a0a5c:	2300      	movs	r3, #0
 80a0a5e:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
 80a0a60:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
 80a0a62:	b9a1      	cbnz	r1, 80a0a8e <mbedtls_sha256_starts_ret+0x32>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
 80a0a64:	4b18      	ldr	r3, [pc, #96]	; (80a0ac8 <mbedtls_sha256_starts_ret+0x6c>)
 80a0a66:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
 80a0a68:	4b18      	ldr	r3, [pc, #96]	; (80a0acc <mbedtls_sha256_starts_ret+0x70>)
 80a0a6a:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
 80a0a6c:	4b18      	ldr	r3, [pc, #96]	; (80a0ad0 <mbedtls_sha256_starts_ret+0x74>)
 80a0a6e:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
 80a0a70:	4b18      	ldr	r3, [pc, #96]	; (80a0ad4 <mbedtls_sha256_starts_ret+0x78>)
 80a0a72:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0x510E527F;
 80a0a74:	4b18      	ldr	r3, [pc, #96]	; (80a0ad8 <mbedtls_sha256_starts_ret+0x7c>)
 80a0a76:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x9B05688C;
 80a0a78:	4b18      	ldr	r3, [pc, #96]	; (80a0adc <mbedtls_sha256_starts_ret+0x80>)
 80a0a7a:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
 80a0a7c:	4b18      	ldr	r3, [pc, #96]	; (80a0ae0 <mbedtls_sha256_starts_ret+0x84>)
 80a0a7e:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
 80a0a80:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 80a0a84:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 80a0a88:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 80a0a8c:	e018      	b.n	80a0ac0 <mbedtls_sha256_starts_ret+0x64>
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
 80a0a8e:	4b15      	ldr	r3, [pc, #84]	; (80a0ae4 <mbedtls_sha256_starts_ret+0x88>)
 80a0a90:	6083      	str	r3, [r0, #8]
        ctx->state[1] = 0x367CD507;
 80a0a92:	4b15      	ldr	r3, [pc, #84]	; (80a0ae8 <mbedtls_sha256_starts_ret+0x8c>)
 80a0a94:	60c3      	str	r3, [r0, #12]
        ctx->state[2] = 0x3070DD17;
 80a0a96:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
 80a0a9a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80a0a9e:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 80a0aa2:	6103      	str	r3, [r0, #16]
        ctx->state[3] = 0xF70E5939;
 80a0aa4:	4b11      	ldr	r3, [pc, #68]	; (80a0aec <mbedtls_sha256_starts_ret+0x90>)
 80a0aa6:	6143      	str	r3, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
 80a0aa8:	4b11      	ldr	r3, [pc, #68]	; (80a0af0 <mbedtls_sha256_starts_ret+0x94>)
 80a0aaa:	6183      	str	r3, [r0, #24]
        ctx->state[5] = 0x68581511;
 80a0aac:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
 80a0ab0:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
 80a0ab4:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 80a0ab8:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
 80a0aba:	4b0e      	ldr	r3, [pc, #56]	; (80a0af4 <mbedtls_sha256_starts_ret+0x98>)
 80a0abc:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
 80a0abe:	4b0e      	ldr	r3, [pc, #56]	; (80a0af8 <mbedtls_sha256_starts_ret+0x9c>)
 80a0ac0:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
 80a0ac2:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
 80a0ac4:	2000      	movs	r0, #0
 80a0ac6:	4770      	bx	lr
 80a0ac8:	6a09e667 	.word	0x6a09e667
 80a0acc:	bb67ae85 	.word	0xbb67ae85
 80a0ad0:	3c6ef372 	.word	0x3c6ef372
 80a0ad4:	a54ff53a 	.word	0xa54ff53a
 80a0ad8:	510e527f 	.word	0x510e527f
 80a0adc:	9b05688c 	.word	0x9b05688c
 80a0ae0:	1f83d9ab 	.word	0x1f83d9ab
 80a0ae4:	c1059ed8 	.word	0xc1059ed8
 80a0ae8:	367cd507 	.word	0x367cd507
 80a0aec:	f70e5939 	.word	0xf70e5939
 80a0af0:	ffc00b31 	.word	0xffc00b31
 80a0af4:	64f98fa7 	.word	0x64f98fa7
 80a0af8:	befa4fa4 	.word	0xbefa4fa4

080a0afc <mbedtls_internal_sha256_process>:
    d += temp1; h = temp1 + temp2;              \
}

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
 80a0afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0b00:	1d03      	adds	r3, r0, #4
 80a0b02:	b0cf      	sub	sp, #316	; 0x13c
 80a0b04:	9305      	str	r3, [sp, #20]
 80a0b06:	461a      	mov	r2, r3
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
 80a0b08:	2300      	movs	r3, #0
        A[i] = ctx->state[i];
 80a0b0a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80a0b0e:	ac06      	add	r4, sp, #24
 80a0b10:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
{
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
 80a0b14:	3301      	adds	r3, #1
 80a0b16:	2b08      	cmp	r3, #8
 80a0b18:	d1f7      	bne.n	80a0b0a <mbedtls_internal_sha256_process+0xe>
 80a0b1a:	4608      	mov	r0, r1
 80a0b1c:	2200      	movs	r2, #0
        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );
 80a0b1e:	ac0e      	add	r4, sp, #56	; 0x38
 80a0b20:	f811 5022 	ldrb.w	r5, [r1, r2, lsl #2]
 80a0b24:	78c3      	ldrb	r3, [r0, #3]
 80a0b26:	3004      	adds	r0, #4
 80a0b28:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80a0b2c:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 80a0b30:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80a0b34:	f810 5c02 	ldrb.w	r5, [r0, #-2]
 80a0b38:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80a0b3c:	f844 3022 	str.w	r3, [r4, r2, lsl #2]

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
 80a0b40:	3201      	adds	r2, #1
 80a0b42:	2a10      	cmp	r2, #16
 80a0b44:	d1ec      	bne.n	80a0b20 <mbedtls_internal_sha256_process+0x24>
 80a0b46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a0b48:	4c9f      	ldr	r4, [pc, #636]	; (80a0dc8 <mbedtls_internal_sha256_process+0x2cc>)
 80a0b4a:	9300      	str	r3, [sp, #0]
 80a0b4c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80a0b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a0b50:	9f08      	ldr	r7, [sp, #32]
 80a0b52:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 80a0b56:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80a0b5a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80a0b5e:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80a0b62:	ad0f      	add	r5, sp, #60	; 0x3c
 80a0b64:	f104 0a40 	add.w	sl, r4, #64	; 0x40
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 80a0b68:	f854 0c04 	ldr.w	r0, [r4, #-4]
 80a0b6c:	ea4f 22f8 	mov.w	r2, r8, ror #11
 80a0b70:	f855 1c04 	ldr.w	r1, [r5, #-4]
 80a0b74:	ea86 0c0b 	eor.w	ip, r6, fp
 80a0b78:	ea82 12b8 	eor.w	r2, r2, r8, ror #6
 80a0b7c:	4401      	add	r1, r0
 80a0b7e:	ea82 6278 	eor.w	r2, r2, r8, ror #25
 80a0b82:	ea0c 0c08 	and.w	ip, ip, r8
 80a0b86:	ea8c 0c06 	eor.w	ip, ip, r6
 80a0b8a:	440a      	add	r2, r1
 80a0b8c:	9900      	ldr	r1, [sp, #0]
 80a0b8e:	4462      	add	r2, ip
 80a0b90:	ea4f 3079 	mov.w	r0, r9, ror #13
 80a0b94:	ea4e 0c09 	orr.w	ip, lr, r9
 80a0b98:	440a      	add	r2, r1
 80a0b9a:	ea0c 0c07 	and.w	ip, ip, r7
 80a0b9e:	ea0e 0109 	and.w	r1, lr, r9
 80a0ba2:	ea80 00b9 	eor.w	r0, r0, r9, ror #2
 80a0ba6:	ea4c 0101 	orr.w	r1, ip, r1
 80a0baa:	ea80 50b9 	eor.w	r0, r0, r9, ror #22
 80a0bae:	4408      	add	r0, r1
 80a0bb0:	4413      	add	r3, r2
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 80a0bb2:	6829      	ldr	r1, [r5, #0]
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 80a0bb4:	4402      	add	r2, r0
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 80a0bb6:	6820      	ldr	r0, [r4, #0]
 80a0bb8:	ea8b 0c08 	eor.w	ip, fp, r8
 80a0bbc:	4401      	add	r1, r0
 80a0bbe:	ea0c 0c03 	and.w	ip, ip, r3
 80a0bc2:	ea4f 20f3 	mov.w	r0, r3, ror #11
 80a0bc6:	ea8c 0c0b 	eor.w	ip, ip, fp
 80a0bca:	440e      	add	r6, r1
 80a0bcc:	ea80 10b3 	eor.w	r0, r0, r3, ror #6
 80a0bd0:	eb06 010c 	add.w	r1, r6, ip
 80a0bd4:	ea80 6073 	eor.w	r0, r0, r3, ror #25
 80a0bd8:	180e      	adds	r6, r1, r0
 80a0bda:	eb06 0c07 	add.w	ip, r6, r7
 80a0bde:	ea42 0009 	orr.w	r0, r2, r9
 80a0be2:	ea4f 3772 	mov.w	r7, r2, ror #13
 80a0be6:	ea02 0109 	and.w	r1, r2, r9
 80a0bea:	ea87 07b2 	eor.w	r7, r7, r2, ror #2
 80a0bee:	ea00 000e 	and.w	r0, r0, lr
 80a0bf2:	ea87 57b2 	eor.w	r7, r7, r2, ror #22
 80a0bf6:	4308      	orrs	r0, r1
 80a0bf8:	4438      	add	r0, r7
 80a0bfa:	4430      	add	r0, r6
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 80a0bfc:	6869      	ldr	r1, [r5, #4]
 80a0bfe:	6866      	ldr	r6, [r4, #4]
 80a0c00:	ea83 0708 	eor.w	r7, r3, r8
 80a0c04:	440e      	add	r6, r1
 80a0c06:	ea07 070c 	and.w	r7, r7, ip
 80a0c0a:	ea4f 21fc 	mov.w	r1, ip, ror #11
 80a0c0e:	ea87 0708 	eor.w	r7, r7, r8
 80a0c12:	44b3      	add	fp, r6
 80a0c14:	ea81 11bc 	eor.w	r1, r1, ip, ror #6
 80a0c18:	eb0b 0607 	add.w	r6, fp, r7
 80a0c1c:	ea81 617c 	eor.w	r1, r1, ip, ror #25
 80a0c20:	eb06 0b01 	add.w	fp, r6, r1
 80a0c24:	ea4f 3770 	mov.w	r7, r0, ror #13
 80a0c28:	ea42 0100 	orr.w	r1, r2, r0
 80a0c2c:	ea02 0600 	and.w	r6, r2, r0
 80a0c30:	ea87 07b0 	eor.w	r7, r7, r0, ror #2
 80a0c34:	ea01 0109 	and.w	r1, r1, r9
 80a0c38:	ea87 57b0 	eor.w	r7, r7, r0, ror #22
 80a0c3c:	4331      	orrs	r1, r6
 80a0c3e:	4439      	add	r1, r7
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 80a0c40:	68ae      	ldr	r6, [r5, #8]
 80a0c42:	68a7      	ldr	r7, [r4, #8]

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 80a0c44:	4459      	add	r1, fp
 80a0c46:	44de      	add	lr, fp
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 80a0c48:	443e      	add	r6, r7
 80a0c4a:	ea83 0b0c 	eor.w	fp, r3, ip
 80a0c4e:	44b0      	add	r8, r6
 80a0c50:	ea0b 0b0e 	and.w	fp, fp, lr
 80a0c54:	ea4f 26fe 	mov.w	r6, lr, ror #11
 80a0c58:	ea8b 0b03 	eor.w	fp, fp, r3
 80a0c5c:	ea86 16be 	eor.w	r6, r6, lr, ror #6
 80a0c60:	44d8      	add	r8, fp
 80a0c62:	ea86 667e 	eor.w	r6, r6, lr, ror #25
 80a0c66:	4446      	add	r6, r8
 80a0c68:	ea4f 3b71 	mov.w	fp, r1, ror #13
 80a0c6c:	ea40 0801 	orr.w	r8, r0, r1
 80a0c70:	ea00 0701 	and.w	r7, r0, r1
 80a0c74:	ea8b 0bb1 	eor.w	fp, fp, r1, ror #2
 80a0c78:	ea08 0802 	and.w	r8, r8, r2
 80a0c7c:	ea8b 5bb1 	eor.w	fp, fp, r1, ror #22
 80a0c80:	ea48 0807 	orr.w	r8, r8, r7
 80a0c84:	44d8      	add	r8, fp
 80a0c86:	44b0      	add	r8, r6
 80a0c88:	44b1      	add	r9, r6
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 80a0c8a:	68e7      	ldr	r7, [r4, #12]
 80a0c8c:	68ee      	ldr	r6, [r5, #12]
 80a0c8e:	ea8c 0b0e 	eor.w	fp, ip, lr
 80a0c92:	4437      	add	r7, r6
 80a0c94:	ea0b 0b09 	and.w	fp, fp, r9
 80a0c98:	ea8b 0b0c 	eor.w	fp, fp, ip
 80a0c9c:	443b      	add	r3, r7
 80a0c9e:	eb03 070b 	add.w	r7, r3, fp
 80a0ca2:	ea4f 23f9 	mov.w	r3, r9, ror #11
 80a0ca6:	ea83 13b9 	eor.w	r3, r3, r9, ror #6
 80a0caa:	ea83 6379 	eor.w	r3, r3, r9, ror #25
 80a0cae:	18fe      	adds	r6, r7, r3
 80a0cb0:	1993      	adds	r3, r2, r6
 80a0cb2:	9300      	str	r3, [sp, #0]
 80a0cb4:	ea4f 3778 	mov.w	r7, r8, ror #13
 80a0cb8:	ea41 0308 	orr.w	r3, r1, r8
 80a0cbc:	ea01 0208 	and.w	r2, r1, r8
 80a0cc0:	ea87 07b8 	eor.w	r7, r7, r8, ror #2
 80a0cc4:	4003      	ands	r3, r0
 80a0cc6:	ea87 57b8 	eor.w	r7, r7, r8, ror #22
 80a0cca:	4313      	orrs	r3, r2
 80a0ccc:	443b      	add	r3, r7
 80a0cce:	4433      	add	r3, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 80a0cd0:	692a      	ldr	r2, [r5, #16]
 80a0cd2:	6926      	ldr	r6, [r4, #16]
 80a0cd4:	ea4f 3b73 	mov.w	fp, r3, ror #13
 80a0cd8:	4432      	add	r2, r6
 80a0cda:	4494      	add	ip, r2
 80a0cdc:	9a00      	ldr	r2, [sp, #0]
 80a0cde:	ea8e 0609 	eor.w	r6, lr, r9
 80a0ce2:	4016      	ands	r6, r2
 80a0ce4:	ea4f 27f2 	mov.w	r7, r2, ror #11
 80a0ce8:	ea86 060e 	eor.w	r6, r6, lr
 80a0cec:	ea87 17b2 	eor.w	r7, r7, r2, ror #6
 80a0cf0:	44b4      	add	ip, r6
 80a0cf2:	ea87 6772 	eor.w	r7, r7, r2, ror #25
 80a0cf6:	eb0c 0207 	add.w	r2, ip, r7
 80a0cfa:	ea48 0703 	orr.w	r7, r8, r3
 80a0cfe:	1886      	adds	r6, r0, r2
 80a0d00:	400f      	ands	r7, r1
 80a0d02:	ea08 0003 	and.w	r0, r8, r3
 80a0d06:	ea8b 0bb3 	eor.w	fp, fp, r3, ror #2
 80a0d0a:	ea8b 5bb3 	eor.w	fp, fp, r3, ror #22
 80a0d0e:	4307      	orrs	r7, r0
 80a0d10:	445f      	add	r7, fp
 80a0d12:	4417      	add	r7, r2
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 80a0d14:	6960      	ldr	r0, [r4, #20]
 80a0d16:	696a      	ldr	r2, [r5, #20]
 80a0d18:	3420      	adds	r4, #32
 80a0d1a:	4410      	add	r0, r2
 80a0d1c:	9a00      	ldr	r2, [sp, #0]
 80a0d1e:	4486      	add	lr, r0
 80a0d20:	ea89 0c02 	eor.w	ip, r9, r2
 80a0d24:	ea0c 0c06 	and.w	ip, ip, r6
 80a0d28:	ea8c 0c09 	eor.w	ip, ip, r9
 80a0d2c:	eb0e 000c 	add.w	r0, lr, ip
 80a0d30:	ea4f 2ef6 	mov.w	lr, r6, ror #11
 80a0d34:	ea8e 1eb6 	eor.w	lr, lr, r6, ror #6
 80a0d38:	ea8e 6e76 	eor.w	lr, lr, r6, ror #25
 80a0d3c:	eb00 020e 	add.w	r2, r0, lr
 80a0d40:	ea4f 3077 	mov.w	r0, r7, ror #13
 80a0d44:	ea43 0e07 	orr.w	lr, r3, r7
 80a0d48:	eb01 0b02 	add.w	fp, r1, r2
 80a0d4c:	ea0e 0e08 	and.w	lr, lr, r8
 80a0d50:	ea03 0107 	and.w	r1, r3, r7
 80a0d54:	ea80 00b7 	eor.w	r0, r0, r7, ror #2
 80a0d58:	ea80 50b7 	eor.w	r0, r0, r7, ror #22
 80a0d5c:	ea4e 0e01 	orr.w	lr, lr, r1
 80a0d60:	4486      	add	lr, r0
 80a0d62:	4496      	add	lr, r2
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 80a0d64:	f854 1c08 	ldr.w	r1, [r4, #-8]
 80a0d68:	69aa      	ldr	r2, [r5, #24]
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
 80a0d6a:	45a2      	cmp	sl, r4
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 80a0d6c:	4411      	add	r1, r2
 80a0d6e:	9a00      	ldr	r2, [sp, #0]
 80a0d70:	4489      	add	r9, r1
 80a0d72:	ea82 0006 	eor.w	r0, r2, r6
 80a0d76:	ea00 000b 	and.w	r0, r0, fp
 80a0d7a:	ea80 0002 	eor.w	r0, r0, r2
 80a0d7e:	eb09 0100 	add.w	r1, r9, r0
 80a0d82:	ea4f 29fb 	mov.w	r9, fp, ror #11
 80a0d86:	ea89 19bb 	eor.w	r9, r9, fp, ror #6
 80a0d8a:	ea89 697b 	eor.w	r9, r9, fp, ror #25
 80a0d8e:	eb01 0209 	add.w	r2, r1, r9
 80a0d92:	ea4f 307e 	mov.w	r0, lr, ror #13
 80a0d96:	ea47 090e 	orr.w	r9, r7, lr
 80a0d9a:	ea80 00be 	eor.w	r0, r0, lr, ror #2
 80a0d9e:	ea09 0903 	and.w	r9, r9, r3
 80a0da2:	ea07 010e 	and.w	r1, r7, lr
 80a0da6:	ea80 50be 	eor.w	r0, r0, lr, ror #22
 80a0daa:	ea49 0901 	orr.w	r9, r9, r1
 80a0dae:	4481      	add	r9, r0
 80a0db0:	4490      	add	r8, r2
 80a0db2:	4491      	add	r9, r2
 80a0db4:	f105 0520 	add.w	r5, r5, #32
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );

    for( i = 0; i < 16; i += 8 )
 80a0db8:	f47f aed6 	bne.w	80a0b68 <mbedtls_internal_sha256_process+0x6c>
 80a0dbc:	2200      	movs	r2, #0
 80a0dbe:	f8df a00c 	ldr.w	sl, [pc, #12]	; 80a0dcc <mbedtls_internal_sha256_process+0x2d0>
 80a0dc2:	ac0e      	add	r4, sp, #56	; 0x38
 80a0dc4:	9204      	str	r2, [sp, #16]
 80a0dc6:	e003      	b.n	80a0dd0 <mbedtls_internal_sha256_process+0x2d4>
 80a0dc8:	080af27c 	.word	0x080af27c
 80a0dcc:	080af278 	.word	0x080af278
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 80a0dd0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80a0dd2:	6860      	ldr	r0, [r4, #4]
 80a0dd4:	ea4f 45f2 	mov.w	r5, r2, ror #19
 80a0dd8:	ea85 4572 	eor.w	r5, r5, r2, ror #17
 80a0ddc:	ea85 2592 	eor.w	r5, r5, r2, lsr #10
 80a0de0:	9a04      	ldr	r2, [sp, #16]
 80a0de2:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 80a0de6:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 80a0dea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80a0dec:	ea4f 4cb0 	mov.w	ip, r0, ror #18
 80a0df0:	440a      	add	r2, r1
 80a0df2:	ea8c 1cf0 	eor.w	ip, ip, r0, ror #7
 80a0df6:	ea4f 21f8 	mov.w	r1, r8, ror #11
 80a0dfa:	ea8c 0cd0 	eor.w	ip, ip, r0, lsr #3
 80a0dfe:	ea81 11b8 	eor.w	r1, r1, r8, ror #6
 80a0e02:	4415      	add	r5, r2
 80a0e04:	eb05 020c 	add.w	r2, r5, ip
 80a0e08:	ea81 6578 	eor.w	r5, r1, r8, ror #25
 80a0e0c:	ea86 010b 	eor.w	r1, r6, fp
 80a0e10:	ea01 0108 	and.w	r1, r1, r8
 80a0e14:	9203      	str	r2, [sp, #12]
 80a0e16:	ea81 0206 	eor.w	r2, r1, r6
 80a0e1a:	18a9      	adds	r1, r5, r2
 80a0e1c:	f8da 2040 	ldr.w	r2, [sl, #64]	; 0x40
 80a0e20:	ea4e 0509 	orr.w	r5, lr, r9
 80a0e24:	440a      	add	r2, r1
 80a0e26:	9903      	ldr	r1, [sp, #12]
 80a0e28:	403d      	ands	r5, r7
 80a0e2a:	6421      	str	r1, [r4, #64]	; 0x40
 80a0e2c:	440a      	add	r2, r1
 80a0e2e:	9900      	ldr	r1, [sp, #0]
 80a0e30:	f10a 0a20 	add.w	sl, sl, #32
 80a0e34:	440a      	add	r2, r1
 80a0e36:	18d3      	adds	r3, r2, r3
 80a0e38:	ea4f 3179 	mov.w	r1, r9, ror #13
 80a0e3c:	9300      	str	r3, [sp, #0]
 80a0e3e:	ea81 01b9 	eor.w	r1, r1, r9, ror #2
 80a0e42:	ea0e 0309 	and.w	r3, lr, r9
 80a0e46:	ea81 51b9 	eor.w	r1, r1, r9, ror #22
 80a0e4a:	432b      	orrs	r3, r5
 80a0e4c:	440b      	add	r3, r1
 80a0e4e:	441a      	add	r2, r3
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 80a0e50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a0e52:	68a5      	ldr	r5, [r4, #8]
 80a0e54:	ea4f 41f3 	mov.w	r1, r3, ror #19
 80a0e58:	ea81 4173 	eor.w	r1, r1, r3, ror #17
 80a0e5c:	ea81 2193 	eor.w	r1, r1, r3, lsr #10
 80a0e60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a0e62:	3420      	adds	r4, #32
 80a0e64:	4403      	add	r3, r0
 80a0e66:	4419      	add	r1, r3
 80a0e68:	ea4f 43b5 	mov.w	r3, r5, ror #18
 80a0e6c:	ea83 13f5 	eor.w	r3, r3, r5, ror #7
 80a0e70:	ea83 0cd5 	eor.w	ip, r3, r5, lsr #3
 80a0e74:	eb01 030c 	add.w	r3, r1, ip
 80a0e78:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
 80a0e7c:	9900      	ldr	r1, [sp, #0]
 80a0e7e:	ea8b 0c08 	eor.w	ip, fp, r8
 80a0e82:	4430      	add	r0, r6
 80a0e84:	ea0c 0c01 	and.w	ip, ip, r1
 80a0e88:	ea8c 0c0b 	eor.w	ip, ip, fp
 80a0e8c:	18c1      	adds	r1, r0, r3
 80a0e8e:	448c      	add	ip, r1
 80a0e90:	9900      	ldr	r1, [sp, #0]
 80a0e92:	6263      	str	r3, [r4, #36]	; 0x24
 80a0e94:	ea4f 20f1 	mov.w	r0, r1, ror #11
 80a0e98:	ea80 10b1 	eor.w	r0, r0, r1, ror #6
 80a0e9c:	ea80 6071 	eor.w	r0, r0, r1, ror #25
 80a0ea0:	eb00 010c 	add.w	r1, r0, ip
 80a0ea4:	19c8      	adds	r0, r1, r7
 80a0ea6:	9001      	str	r0, [sp, #4]
 80a0ea8:	ea4f 3c72 	mov.w	ip, r2, ror #13
 80a0eac:	ea42 0009 	orr.w	r0, r2, r9
 80a0eb0:	ea02 0709 	and.w	r7, r2, r9
 80a0eb4:	ea8c 0cb2 	eor.w	ip, ip, r2, ror #2
 80a0eb8:	ea00 000e 	and.w	r0, r0, lr
 80a0ebc:	ea8c 5cb2 	eor.w	ip, ip, r2, ror #22
 80a0ec0:	4338      	orrs	r0, r7
 80a0ec2:	4460      	add	r0, ip
 80a0ec4:	4408      	add	r0, r1
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 80a0ec6:	9903      	ldr	r1, [sp, #12]
 80a0ec8:	f854 7c14 	ldr.w	r7, [r4, #-20]
 80a0ecc:	ea4f 46f1 	mov.w	r6, r1, ror #19
 80a0ed0:	ea86 4671 	eor.w	r6, r6, r1, ror #17
 80a0ed4:	ea86 2691 	eor.w	r6, r6, r1, lsr #10
 80a0ed8:	68e1      	ldr	r1, [r4, #12]
 80a0eda:	ea4f 4cb7 	mov.w	ip, r7, ror #18
 80a0ede:	4429      	add	r1, r5
 80a0ee0:	440e      	add	r6, r1
 80a0ee2:	ea8c 1cf7 	eor.w	ip, ip, r7, ror #7
 80a0ee6:	9900      	ldr	r1, [sp, #0]
 80a0ee8:	ea8c 0cd7 	eor.w	ip, ip, r7, lsr #3
 80a0eec:	4466      	add	r6, ip
 80a0eee:	ea81 0c08 	eor.w	ip, r1, r8
 80a0ef2:	9901      	ldr	r1, [sp, #4]
 80a0ef4:	62a6      	str	r6, [r4, #40]	; 0x28
 80a0ef6:	ea0c 0c01 	and.w	ip, ip, r1
 80a0efa:	f8da 1028 	ldr.w	r1, [sl, #40]	; 0x28
 80a0efe:	ea8c 0c08 	eor.w	ip, ip, r8
 80a0f02:	4459      	add	r1, fp
 80a0f04:	198d      	adds	r5, r1, r6
 80a0f06:	9901      	ldr	r1, [sp, #4]
 80a0f08:	44ac      	add	ip, r5
 80a0f0a:	9d01      	ldr	r5, [sp, #4]
 80a0f0c:	ea4f 21f1 	mov.w	r1, r1, ror #11
 80a0f10:	ea81 11b5 	eor.w	r1, r1, r5, ror #6
 80a0f14:	ea81 6175 	eor.w	r1, r1, r5, ror #25
 80a0f18:	eb01 050c 	add.w	r5, r1, ip
 80a0f1c:	ea42 0100 	orr.w	r1, r2, r0
 80a0f20:	ea4f 3c70 	mov.w	ip, r0, ror #13
 80a0f24:	eb05 0b0e 	add.w	fp, r5, lr
 80a0f28:	ea8c 0cb0 	eor.w	ip, ip, r0, ror #2
 80a0f2c:	ea02 0e00 	and.w	lr, r2, r0
 80a0f30:	ea01 0109 	and.w	r1, r1, r9
 80a0f34:	ea8c 5cb0 	eor.w	ip, ip, r0, ror #22
 80a0f38:	ea41 010e 	orr.w	r1, r1, lr
 80a0f3c:	4461      	add	r1, ip
 80a0f3e:	4429      	add	r1, r5
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 80a0f40:	ea4f 45f3 	mov.w	r5, r3, ror #19
 80a0f44:	ea85 4573 	eor.w	r5, r5, r3, ror #17
 80a0f48:	ea85 2393 	eor.w	r3, r5, r3, lsr #10
 80a0f4c:	6925      	ldr	r5, [r4, #16]
 80a0f4e:	f854 cc10 	ldr.w	ip, [r4, #-16]
 80a0f52:	442f      	add	r7, r5
 80a0f54:	443b      	add	r3, r7
 80a0f56:	ea4f 47bc 	mov.w	r7, ip, ror #18
 80a0f5a:	ea87 17fc 	eor.w	r7, r7, ip, ror #7
 80a0f5e:	ea87 0edc 	eor.w	lr, r7, ip, lsr #3
 80a0f62:	eb03 070e 	add.w	r7, r3, lr
 80a0f66:	e89d 0028 	ldmia.w	sp, {r3, r5}
 80a0f6a:	405d      	eors	r5, r3
 80a0f6c:	ea05 050b 	and.w	r5, r5, fp
 80a0f70:	405d      	eors	r5, r3
 80a0f72:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
 80a0f76:	ea4f 3e71 	mov.w	lr, r1, ror #13
 80a0f7a:	4498      	add	r8, r3
 80a0f7c:	44b8      	add	r8, r7
 80a0f7e:	4445      	add	r5, r8
 80a0f80:	ea4f 28fb 	mov.w	r8, fp, ror #11
 80a0f84:	ea88 18bb 	eor.w	r8, r8, fp, ror #6
 80a0f88:	ea88 687b 	eor.w	r8, r8, fp, ror #25
 80a0f8c:	eb08 0305 	add.w	r3, r8, r5
 80a0f90:	eb03 0509 	add.w	r5, r3, r9
 80a0f94:	ea40 0801 	orr.w	r8, r0, r1
 80a0f98:	9502      	str	r5, [sp, #8]
 80a0f9a:	ea8e 0eb1 	eor.w	lr, lr, r1, ror #2
 80a0f9e:	ea00 0501 	and.w	r5, r0, r1
 80a0fa2:	ea08 0802 	and.w	r8, r8, r2
 80a0fa6:	ea8e 5eb1 	eor.w	lr, lr, r1, ror #22
 80a0faa:	ea48 0805 	orr.w	r8, r8, r5
 80a0fae:	44f0      	add	r8, lr
 80a0fb0:	4498      	add	r8, r3
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 80a0fb2:	ea4f 4ef6 	mov.w	lr, r6, ror #19
 80a0fb6:	6963      	ldr	r3, [r4, #20]
 80a0fb8:	ea8e 4e76 	eor.w	lr, lr, r6, ror #17
 80a0fbc:	f854 5c0c 	ldr.w	r5, [r4, #-12]
 80a0fc0:	ea8e 2696 	eor.w	r6, lr, r6, lsr #10
 80a0fc4:	eb0c 0e03 	add.w	lr, ip, r3
 80a0fc8:	9b01      	ldr	r3, [sp, #4]
 80a0fca:	4476      	add	r6, lr
 80a0fcc:	ea83 0c0b 	eor.w	ip, r3, fp
 80a0fd0:	ea4f 4eb5 	mov.w	lr, r5, ror #18
 80a0fd4:	9b02      	ldr	r3, [sp, #8]
 80a0fd6:	ea8e 1ef5 	eor.w	lr, lr, r5, ror #7
 80a0fda:	ea8e 09d5 	eor.w	r9, lr, r5, lsr #3
 80a0fde:	ea0c 0c03 	and.w	ip, ip, r3
 80a0fe2:	9b01      	ldr	r3, [sp, #4]
 80a0fe4:	eb06 0e09 	add.w	lr, r6, r9
 80a0fe8:	f8da 6030 	ldr.w	r6, [sl, #48]	; 0x30
 80a0fec:	ea8c 0c03 	eor.w	ip, ip, r3
 80a0ff0:	9b00      	ldr	r3, [sp, #0]
 80a0ff2:	4476      	add	r6, lr
 80a0ff4:	441e      	add	r6, r3
 80a0ff6:	9b02      	ldr	r3, [sp, #8]
 80a0ff8:	44b4      	add	ip, r6
 80a0ffa:	9e02      	ldr	r6, [sp, #8]
 80a0ffc:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80a1000:	ea83 13b6 	eor.w	r3, r3, r6, ror #6
 80a1004:	ea83 6376 	eor.w	r3, r3, r6, ror #25
 80a1008:	eb03 060c 	add.w	r6, r3, ip
 80a100c:	1993      	adds	r3, r2, r6
 80a100e:	9300      	str	r3, [sp, #0]
 80a1010:	ea41 0308 	orr.w	r3, r1, r8
 80a1014:	ea01 0208 	and.w	r2, r1, r8
 80a1018:	4003      	ands	r3, r0
 80a101a:	4313      	orrs	r3, r2
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80a101c:	ea4f 42f7 	mov.w	r2, r7, ror #19
 80a1020:	ea82 4277 	eor.w	r2, r2, r7, ror #17
    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 80a1024:	62e7      	str	r7, [r4, #44]	; 0x2c
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 80a1026:	ea4f 3c78 	mov.w	ip, r8, ror #13
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80a102a:	ea82 2797 	eor.w	r7, r2, r7, lsr #10
 80a102e:	69a2      	ldr	r2, [r4, #24]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 80a1030:	ea8c 0cb8 	eor.w	ip, ip, r8, ror #2
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80a1034:	f854 9c08 	ldr.w	r9, [r4, #-8]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 80a1038:	ea8c 5cb8 	eor.w	ip, ip, r8, ror #22
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80a103c:	4415      	add	r5, r2
 80a103e:	9a02      	ldr	r2, [sp, #8]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 80a1040:	4463      	add	r3, ip
 80a1042:	4433      	add	r3, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80a1044:	442f      	add	r7, r5
 80a1046:	ea8b 0602 	eor.w	r6, fp, r2
 80a104a:	ea4f 45b9 	mov.w	r5, r9, ror #18
 80a104e:	9a00      	ldr	r2, [sp, #0]
 80a1050:	ea85 15f9 	eor.w	r5, r5, r9, ror #7
 80a1054:	ea85 05d9 	eor.w	r5, r5, r9, lsr #3
 80a1058:	4016      	ands	r6, r2
 80a105a:	f8da 2034 	ldr.w	r2, [sl, #52]	; 0x34
 80a105e:	443d      	add	r5, r7
 80a1060:	9f01      	ldr	r7, [sp, #4]
 80a1062:	442a      	add	r2, r5
 80a1064:	443a      	add	r2, r7
 80a1066:	ea86 060b 	eor.w	r6, r6, fp
 80a106a:	4416      	add	r6, r2
 80a106c:	9a00      	ldr	r2, [sp, #0]
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 80a106e:	f8c4 e030 	str.w	lr, [r4, #48]	; 0x30
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80a1072:	ea4f 27f2 	mov.w	r7, r2, ror #11
 80a1076:	ea87 17b2 	eor.w	r7, r7, r2, ror #6
 80a107a:	ea87 6772 	eor.w	r7, r7, r2, ror #25
 80a107e:	19ba      	adds	r2, r7, r6
 80a1080:	1886      	adds	r6, r0, r2
 80a1082:	ea4f 3073 	mov.w	r0, r3, ror #13
 80a1086:	ea80 00b3 	eor.w	r0, r0, r3, ror #2
 80a108a:	ea48 0703 	orr.w	r7, r8, r3
 80a108e:	ea80 5cb3 	eor.w	ip, r0, r3, ror #22
 80a1092:	400f      	ands	r7, r1
 80a1094:	ea08 0003 	and.w	r0, r8, r3
 80a1098:	4307      	orrs	r7, r0
 80a109a:	4467      	add	r7, ip
 80a109c:	4417      	add	r7, r2
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 80a109e:	ea4f 42fe 	mov.w	r2, lr, ror #19
 80a10a2:	ea82 427e 	eor.w	r2, r2, lr, ror #17
 80a10a6:	ea82 2e9e 	eor.w	lr, r2, lr, lsr #10
 80a10aa:	69e2      	ldr	r2, [r4, #28]
 80a10ac:	f854 0c04 	ldr.w	r0, [r4, #-4]
 80a10b0:	4491      	add	r9, r2
 80a10b2:	eb0e 0209 	add.w	r2, lr, r9
 80a10b6:	ea4f 49b0 	mov.w	r9, r0, ror #18
 80a10ba:	ea89 19f0 	eor.w	r9, r9, r0, ror #7
 80a10be:	ea89 09d0 	eor.w	r9, r9, r0, lsr #3
 80a10c2:	4491      	add	r9, r2
 80a10c4:	9a02      	ldr	r2, [sp, #8]
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 80a10c6:	6365      	str	r5, [r4, #52]	; 0x34
 80a10c8:	4696      	mov	lr, r2
 80a10ca:	9a00      	ldr	r2, [sp, #0]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 80a10cc:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
 80a10d0:	ea8e 0c02 	eor.w	ip, lr, r2
 80a10d4:	f8da 2038 	ldr.w	r2, [sl, #56]	; 0x38
 80a10d8:	ea0c 0c06 	and.w	ip, ip, r6
 80a10dc:	ea8c 0c0e 	eor.w	ip, ip, lr
 80a10e0:	444a      	add	r2, r9
 80a10e2:	ea4f 2ef6 	mov.w	lr, r6, ror #11
 80a10e6:	445a      	add	r2, fp
 80a10e8:	ea8e 1eb6 	eor.w	lr, lr, r6, ror #6
 80a10ec:	4462      	add	r2, ip
 80a10ee:	ea8e 6e76 	eor.w	lr, lr, r6, ror #25
 80a10f2:	4472      	add	r2, lr
 80a10f4:	ea4f 3c77 	mov.w	ip, r7, ror #13
 80a10f8:	ea43 0e07 	orr.w	lr, r3, r7
 80a10fc:	eb01 0b02 	add.w	fp, r1, r2
 80a1100:	ea0e 0e08 	and.w	lr, lr, r8
 80a1104:	ea03 0107 	and.w	r1, r3, r7
 80a1108:	ea8c 0cb7 	eor.w	ip, ip, r7, ror #2
 80a110c:	ea8c 5cb7 	eor.w	ip, ip, r7, ror #22
 80a1110:	ea4e 0e01 	orr.w	lr, lr, r1
 80a1114:	44e6      	add	lr, ip
 80a1116:	4496      	add	lr, r2
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 80a1118:	ea4f 42f5 	mov.w	r2, r5, ror #19
 80a111c:	6821      	ldr	r1, [r4, #0]
 80a111e:	ea82 4275 	eor.w	r2, r2, r5, ror #17
 80a1122:	ea82 2595 	eor.w	r5, r2, r5, lsr #10
 80a1126:	9a03      	ldr	r2, [sp, #12]
 80a1128:	ea4f 4cb1 	mov.w	ip, r1, ror #18
 80a112c:	4410      	add	r0, r2
 80a112e:	ea8c 1cf1 	eor.w	ip, ip, r1, ror #7
 80a1132:	f8da 203c 	ldr.w	r2, [sl, #60]	; 0x3c
 80a1136:	4405      	add	r5, r0
 80a1138:	ea8c 01d1 	eor.w	r1, ip, r1, lsr #3
 80a113c:	440d      	add	r5, r1
 80a113e:	9902      	ldr	r1, [sp, #8]
 80a1140:	442a      	add	r2, r5
 80a1142:	eb02 0901 	add.w	r9, r2, r1
 80a1146:	9a00      	ldr	r2, [sp, #0]
 80a1148:	ea4f 307e 	mov.w	r0, lr, ror #13
 80a114c:	ea82 0106 	eor.w	r1, r2, r6
 80a1150:	ea01 010b 	and.w	r1, r1, fp
 80a1154:	4051      	eors	r1, r2
 80a1156:	ea4f 22fb 	mov.w	r2, fp, ror #11
 80a115a:	ea82 12bb 	eor.w	r2, r2, fp, ror #6
 80a115e:	4489      	add	r9, r1
 80a1160:	ea82 627b 	eor.w	r2, r2, fp, ror #25
 80a1164:	444a      	add	r2, r9
 80a1166:	ea47 090e 	orr.w	r9, r7, lr
 80a116a:	ea80 00be 	eor.w	r0, r0, lr, ror #2
 80a116e:	ea09 0903 	and.w	r9, r9, r3
 80a1172:	ea07 010e 	and.w	r1, r7, lr
 80a1176:	ea80 50be 	eor.w	r0, r0, lr, ror #22
 80a117a:	ea49 0901 	orr.w	r9, r9, r1
 80a117e:	4481      	add	r9, r0
 80a1180:	4490      	add	r8, r2
 80a1182:	4491      	add	r9, r2
 80a1184:	9a04      	ldr	r2, [sp, #16]
 80a1186:	63e5      	str	r5, [r4, #60]	; 0x3c
 80a1188:	3208      	adds	r2, #8
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    }

    for( i = 16; i < 64; i += 8 )
 80a118a:	2a30      	cmp	r2, #48	; 0x30
 80a118c:	9204      	str	r2, [sp, #16]
 80a118e:	f47f ae1f 	bne.w	80a0dd0 <mbedtls_internal_sha256_process+0x2d4>
 80a1192:	9a00      	ldr	r2, [sp, #0]
 80a1194:	9309      	str	r3, [sp, #36]	; 0x24
 80a1196:	920d      	str	r2, [sp, #52]	; 0x34
 80a1198:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80a119c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80a11a0:	960c      	str	r6, [sp, #48]	; 0x30
 80a11a2:	f8cd 9018 	str.w	r9, [sp, #24]
 80a11a6:	f8cd e01c 	str.w	lr, [sp, #28]
 80a11aa:	9708      	str	r7, [sp, #32]
 80a11ac:	2300      	movs	r3, #0
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += A[i];
 80a11ae:	9a05      	ldr	r2, [sp, #20]
 80a11b0:	f852 1f04 	ldr.w	r1, [r2, #4]!
 80a11b4:	9205      	str	r2, [sp, #20]
 80a11b6:	aa06      	add	r2, sp, #24
 80a11b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 80a11bc:	3301      	adds	r3, #1
        ctx->state[i] += A[i];
 80a11be:	440a      	add	r2, r1
 80a11c0:	9905      	ldr	r1, [sp, #20]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 80a11c2:	2b08      	cmp	r3, #8
        ctx->state[i] += A[i];
 80a11c4:	600a      	str	r2, [r1, #0]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 80a11c6:	d1f2      	bne.n	80a11ae <mbedtls_internal_sha256_process+0x6b2>
        ctx->state[i] += A[i];

    return( 0 );
}
 80a11c8:	2000      	movs	r0, #0
 80a11ca:	b04f      	add	sp, #316	; 0x13c
 80a11cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a11d0 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 80a11d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a11d4:	4604      	mov	r4, r0
 80a11d6:	460e      	mov	r6, r1
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
 80a11d8:	4615      	mov	r5, r2
 80a11da:	b382      	cbz	r2, 80a123e <mbedtls_sha256_update_ret+0x6e>
        return( 0 );

    left = ctx->total[0] & 0x3F;
 80a11dc:	6803      	ldr	r3, [r0, #0]
 80a11de:	f003 003f 	and.w	r0, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 80a11e2:	4413      	add	r3, r2
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
 80a11e4:	429a      	cmp	r2, r3
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 80a11e6:	6023      	str	r3, [r4, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
 80a11e8:	bf82      	ittt	hi
 80a11ea:	6863      	ldrhi	r3, [r4, #4]
 80a11ec:	3301      	addhi	r3, #1
 80a11ee:	6063      	strhi	r3, [r4, #4]

    if( left && ilen >= fill )
 80a11f0:	b180      	cbz	r0, 80a1214 <mbedtls_sha256_update_ret+0x44>

    if( ilen == 0 )
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
 80a11f2:	f1c0 0740 	rsb	r7, r0, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
 80a11f6:	42ba      	cmp	r2, r7
 80a11f8:	d31b      	bcc.n	80a1232 <mbedtls_sha256_update_ret+0x62>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 80a11fa:	f104 0828 	add.w	r8, r4, #40	; 0x28
 80a11fe:	463a      	mov	r2, r7
 80a1200:	4440      	add	r0, r8
 80a1202:	f00d ff76 	bl	80af0f2 <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 80a1206:	4641      	mov	r1, r8
 80a1208:	4620      	mov	r0, r4
 80a120a:	f7ff fc77 	bl	80a0afc <mbedtls_internal_sha256_process>
 80a120e:	b9b8      	cbnz	r0, 80a1240 <mbedtls_sha256_update_ret+0x70>
            return( ret );

        input += fill;
 80a1210:	443e      	add	r6, r7
        ilen  -= fill;
 80a1212:	1bed      	subs	r5, r5, r7
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 80a1214:	462f      	mov	r7, r5
 80a1216:	1be9      	subs	r1, r5, r7
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
 80a1218:	2f3f      	cmp	r7, #63	; 0x3f
 80a121a:	4431      	add	r1, r6
 80a121c:	d905      	bls.n	80a122a <mbedtls_sha256_update_ret+0x5a>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 80a121e:	4620      	mov	r0, r4
 80a1220:	f7ff fc6c 	bl	80a0afc <mbedtls_internal_sha256_process>
 80a1224:	b960      	cbnz	r0, 80a1240 <mbedtls_sha256_update_ret+0x70>
            return( ret );

        input += 64;
        ilen  -= 64;
 80a1226:	3f40      	subs	r7, #64	; 0x40
 80a1228:	e7f5      	b.n	80a1216 <mbedtls_sha256_update_ret+0x46>
    }

    if( ilen > 0 )
 80a122a:	b147      	cbz	r7, 80a123e <mbedtls_sha256_update_ret+0x6e>
 80a122c:	463d      	mov	r5, r7
 80a122e:	460e      	mov	r6, r1
 80a1230:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 80a1232:	3428      	adds	r4, #40	; 0x28
 80a1234:	462a      	mov	r2, r5
 80a1236:	4631      	mov	r1, r6
 80a1238:	4420      	add	r0, r4
 80a123a:	f00d ff5a 	bl	80af0f2 <memcpy>

    return( 0 );
 80a123e:	2000      	movs	r0, #0
}
 80a1240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1244 <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 80a1244:	b570      	push	{r4, r5, r6, lr}
 80a1246:	4604      	mov	r4, r0
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 80a1248:	6803      	ldr	r3, [r0, #0]

    ctx->buffer[used++] = 0x80;
 80a124a:	2280      	movs	r2, #128	; 0x80
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 80a124c:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
 80a1250:	1c58      	adds	r0, r3, #1

    if( used <= 56 )
 80a1252:	2838      	cmp	r0, #56	; 0x38
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 80a1254:	4423      	add	r3, r4
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 80a1256:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 80a1258:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80a125c:	f104 0628 	add.w	r6, r4, #40	; 0x28

    if( used <= 56 )
 80a1260:	d804      	bhi.n	80a126c <mbedtls_sha256_finish_ret+0x28>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 80a1262:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 80a1266:	2100      	movs	r1, #0
 80a1268:	4430      	add	r0, r6
 80a126a:	e00e      	b.n	80a128a <mbedtls_sha256_finish_ret+0x46>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 80a126c:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 80a1270:	2100      	movs	r1, #0
 80a1272:	4430      	add	r0, r6
 80a1274:	f00d ff63 	bl	80af13e <memset>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 80a1278:	4631      	mov	r1, r6
 80a127a:	4620      	mov	r0, r4
 80a127c:	f7ff fc3e 	bl	80a0afc <mbedtls_internal_sha256_process>
 80a1280:	2800      	cmp	r0, #0
 80a1282:	d175      	bne.n	80a1370 <mbedtls_sha256_finish_ret+0x12c>
            return( ret );

        memset( ctx->buffer, 0, 56 );
 80a1284:	4601      	mov	r1, r0
 80a1286:	4630      	mov	r0, r6
 80a1288:	2238      	movs	r2, #56	; 0x38
 80a128a:	f00d ff58 	bl	80af13e <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 80a128e:	6823      	ldr	r3, [r4, #0]
         | ( ctx->total[1] <<  3 );
 80a1290:	6861      	ldr	r1, [r4, #4]
 80a1292:	0f5a      	lsrs	r2, r3, #29
 80a1294:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 80a1298:	0e11      	lsrs	r1, r2, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 80a129a:	00db      	lsls	r3, r3, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 80a129c:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
 80a12a0:	0c11      	lsrs	r1, r2, #16
 80a12a2:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
 80a12a6:	f884 2063 	strb.w	r2, [r4, #99]	; 0x63
 80a12aa:	0a11      	lsrs	r1, r2, #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 80a12ac:	0e1a      	lsrs	r2, r3, #24
 80a12ae:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 80a12b2:	0c1a      	lsrs	r2, r3, #16
 80a12b4:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80a12b8:	0a1a      	lsrs	r2, r3, #8
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 80a12ba:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 80a12be:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80a12c2:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 80a12c6:	4631      	mov	r1, r6
 80a12c8:	4620      	mov	r0, r4
 80a12ca:	f7ff fc17 	bl	80a0afc <mbedtls_internal_sha256_process>
 80a12ce:	4603      	mov	r3, r0
 80a12d0:	2800      	cmp	r0, #0
 80a12d2:	d14c      	bne.n	80a136e <mbedtls_sha256_finish_ret+0x12a>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 80a12d4:	7ae2      	ldrb	r2, [r4, #11]
 80a12d6:	702a      	strb	r2, [r5, #0]
 80a12d8:	8962      	ldrh	r2, [r4, #10]
 80a12da:	706a      	strb	r2, [r5, #1]
 80a12dc:	68a2      	ldr	r2, [r4, #8]
 80a12de:	0a12      	lsrs	r2, r2, #8
 80a12e0:	70aa      	strb	r2, [r5, #2]
 80a12e2:	68a2      	ldr	r2, [r4, #8]
 80a12e4:	70ea      	strb	r2, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 80a12e6:	7be2      	ldrb	r2, [r4, #15]
 80a12e8:	712a      	strb	r2, [r5, #4]
 80a12ea:	89e2      	ldrh	r2, [r4, #14]
 80a12ec:	716a      	strb	r2, [r5, #5]
 80a12ee:	68e2      	ldr	r2, [r4, #12]
 80a12f0:	0a12      	lsrs	r2, r2, #8
 80a12f2:	71aa      	strb	r2, [r5, #6]
 80a12f4:	68e2      	ldr	r2, [r4, #12]
 80a12f6:	71ea      	strb	r2, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 80a12f8:	7ce2      	ldrb	r2, [r4, #19]
 80a12fa:	722a      	strb	r2, [r5, #8]
 80a12fc:	8a62      	ldrh	r2, [r4, #18]
 80a12fe:	726a      	strb	r2, [r5, #9]
 80a1300:	6922      	ldr	r2, [r4, #16]
 80a1302:	0a12      	lsrs	r2, r2, #8
 80a1304:	72aa      	strb	r2, [r5, #10]
 80a1306:	6922      	ldr	r2, [r4, #16]
 80a1308:	72ea      	strb	r2, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 80a130a:	7de2      	ldrb	r2, [r4, #23]
 80a130c:	732a      	strb	r2, [r5, #12]
 80a130e:	8ae2      	ldrh	r2, [r4, #22]
 80a1310:	736a      	strb	r2, [r5, #13]
 80a1312:	6962      	ldr	r2, [r4, #20]
 80a1314:	0a12      	lsrs	r2, r2, #8
 80a1316:	73aa      	strb	r2, [r5, #14]
 80a1318:	6962      	ldr	r2, [r4, #20]
 80a131a:	73ea      	strb	r2, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 80a131c:	7ee2      	ldrb	r2, [r4, #27]
 80a131e:	742a      	strb	r2, [r5, #16]
 80a1320:	8b62      	ldrh	r2, [r4, #26]
 80a1322:	746a      	strb	r2, [r5, #17]
 80a1324:	69a2      	ldr	r2, [r4, #24]
 80a1326:	0a12      	lsrs	r2, r2, #8
 80a1328:	74aa      	strb	r2, [r5, #18]
 80a132a:	69a2      	ldr	r2, [r4, #24]
 80a132c:	74ea      	strb	r2, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 80a132e:	7fe2      	ldrb	r2, [r4, #31]
 80a1330:	752a      	strb	r2, [r5, #20]
 80a1332:	8be2      	ldrh	r2, [r4, #30]
 80a1334:	756a      	strb	r2, [r5, #21]
 80a1336:	69e2      	ldr	r2, [r4, #28]
 80a1338:	0a12      	lsrs	r2, r2, #8
 80a133a:	75aa      	strb	r2, [r5, #22]
 80a133c:	69e2      	ldr	r2, [r4, #28]
 80a133e:	75ea      	strb	r2, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 80a1340:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 80a1344:	762a      	strb	r2, [r5, #24]
 80a1346:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 80a1348:	766a      	strb	r2, [r5, #25]
 80a134a:	6a22      	ldr	r2, [r4, #32]
 80a134c:	0a12      	lsrs	r2, r2, #8
 80a134e:	76aa      	strb	r2, [r5, #26]
 80a1350:	6a22      	ldr	r2, [r4, #32]
 80a1352:	76ea      	strb	r2, [r5, #27]

    if( ctx->is224 == 0 )
 80a1354:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80a1356:	b950      	cbnz	r0, 80a136e <mbedtls_sha256_finish_ret+0x12a>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 80a1358:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 80a135c:	772b      	strb	r3, [r5, #28]
 80a135e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80a1360:	776b      	strb	r3, [r5, #29]
 80a1362:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a1364:	0a1b      	lsrs	r3, r3, #8
 80a1366:	77ab      	strb	r3, [r5, #30]
 80a1368:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a136a:	77eb      	strb	r3, [r5, #31]
 80a136c:	bd70      	pop	{r4, r5, r6, pc}

    return( 0 );
 80a136e:	4618      	mov	r0, r3
}
 80a1370:	bd70      	pop	{r4, r5, r6, pc}

080a1372 <mbedtls_sha256_ret>:
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 80a1372:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1374:	461f      	mov	r7, r3
 80a1376:	b09d      	sub	sp, #116	; 0x74
 80a1378:	4605      	mov	r5, r0
    int ret;
    mbedtls_sha256_context ctx;

    mbedtls_sha256_init( &ctx );
 80a137a:	a801      	add	r0, sp, #4
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 80a137c:	460e      	mov	r6, r1
 80a137e:	4614      	mov	r4, r2
    int ret;
    mbedtls_sha256_context ctx;

    mbedtls_sha256_init( &ctx );
 80a1380:	f7ff fb58 	bl	80a0a34 <mbedtls_sha256_init>

    if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )
 80a1384:	4639      	mov	r1, r7
 80a1386:	a801      	add	r0, sp, #4
 80a1388:	f7ff fb68 	bl	80a0a5c <mbedtls_sha256_starts_ret>
 80a138c:	4601      	mov	r1, r0
 80a138e:	b958      	cbnz	r0, 80a13a8 <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
 80a1390:	4629      	mov	r1, r5
 80a1392:	4632      	mov	r2, r6
 80a1394:	a801      	add	r0, sp, #4
 80a1396:	f7ff ff1b 	bl	80a11d0 <mbedtls_sha256_update_ret>
 80a139a:	4601      	mov	r1, r0
 80a139c:	b920      	cbnz	r0, 80a13a8 <mbedtls_sha256_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
 80a139e:	4621      	mov	r1, r4
 80a13a0:	a801      	add	r0, sp, #4
 80a13a2:	f7ff ff4f 	bl	80a1244 <mbedtls_sha256_finish_ret>
 80a13a6:	4601      	mov	r1, r0
        goto exit;

exit:
    mbedtls_sha256_free( &ctx );
 80a13a8:	a801      	add	r0, sp, #4
 80a13aa:	f7ff fb47 	bl	80a0a3c <mbedtls_sha256_free>

    return( ret );
}
 80a13ae:	4608      	mov	r0, r1
 80a13b0:	b01d      	add	sp, #116	; 0x74
 80a13b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a13b4 <mbedtls_pkcs5_pbkdf2_hmac>:

int mbedtls_pkcs5_pbkdf2_hmac( mbedtls_md_context_t *ctx, const unsigned char *password,
                       size_t plen, const unsigned char *salt, size_t slen,
                       unsigned int iteration_count,
                       uint32_t key_length, unsigned char *output )
{
 80a13b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a13b8:	4604      	mov	r4, r0
 80a13ba:	b0a5      	sub	sp, #148	; 0x94
    int ret, j;
    unsigned int i;
    unsigned char md1[MBEDTLS_MD_MAX_SIZE];
    unsigned char work[MBEDTLS_MD_MAX_SIZE];
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
 80a13bc:	6800      	ldr	r0, [r0, #0]

int mbedtls_pkcs5_pbkdf2_hmac( mbedtls_md_context_t *ctx, const unsigned char *password,
                       size_t plen, const unsigned char *salt, size_t slen,
                       unsigned int iteration_count,
                       uint32_t key_length, unsigned char *output )
{
 80a13be:	9301      	str	r3, [sp, #4]
 80a13c0:	460f      	mov	r7, r1
 80a13c2:	4693      	mov	fp, r2
 80a13c4:	9e30      	ldr	r6, [sp, #192]	; 0xc0
    int ret, j;
    unsigned int i;
    unsigned char md1[MBEDTLS_MD_MAX_SIZE];
    unsigned char work[MBEDTLS_MD_MAX_SIZE];
    unsigned char md_size = mbedtls_md_get_size( ctx->md_info );
 80a13c6:	f004 fddf 	bl	80a5f88 <mbedtls_md_get_size>
 80a13ca:	4681      	mov	r9, r0
    size_t use_len;
    unsigned char *out_p = output;
    unsigned char counter[4];

    memset( counter, 0, 4 );
 80a13cc:	2300      	movs	r3, #0
 80a13ce:	9303      	str	r3, [sp, #12]
    counter[3] = 1;
 80a13d0:	2301      	movs	r3, #1
 80a13d2:	f88d 300f 	strb.w	r3, [sp, #15]
            return( ret );

        if( ( ret = mbedtls_md_hmac_update( ctx, counter, 4 ) ) != 0 )
            return( ret );

        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
 80a13d6:	f10d 0850 	add.w	r8, sp, #80	; 0x50
#if UINT_MAX > 0xFFFFFFFF
    if( iteration_count > 0xFFFFFFFF )
        return( MBEDTLS_ERR_PKCS5_BAD_INPUT_DATA );
#endif

    while( key_length )
 80a13da:	2e00      	cmp	r6, #0
 80a13dc:	d05c      	beq.n	80a1498 <mbedtls_pkcs5_pbkdf2_hmac+0xe4>
    {
        // U1 ends up in work
        //
        if( ( ret = mbedtls_md_hmac_starts( ctx, password, plen ) ) != 0 )
 80a13de:	465a      	mov	r2, fp
 80a13e0:	4639      	mov	r1, r7
 80a13e2:	4620      	mov	r0, r4
 80a13e4:	f004 fd18 	bl	80a5e18 <mbedtls_md_hmac_starts>
 80a13e8:	2800      	cmp	r0, #0
 80a13ea:	d156      	bne.n	80a149a <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        if( ( ret = mbedtls_md_hmac_update( ctx, salt, slen ) ) != 0 )
 80a13ec:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80a13ee:	9901      	ldr	r1, [sp, #4]
 80a13f0:	4620      	mov	r0, r4
 80a13f2:	f004 fd71 	bl	80a5ed8 <mbedtls_md_hmac_update>
 80a13f6:	2800      	cmp	r0, #0
 80a13f8:	d14f      	bne.n	80a149a <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        if( ( ret = mbedtls_md_hmac_update( ctx, counter, 4 ) ) != 0 )
 80a13fa:	2204      	movs	r2, #4
 80a13fc:	a903      	add	r1, sp, #12
 80a13fe:	4620      	mov	r0, r4
 80a1400:	f004 fd6a 	bl	80a5ed8 <mbedtls_md_hmac_update>
 80a1404:	2800      	cmp	r0, #0
 80a1406:	d148      	bne.n	80a149a <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
 80a1408:	4641      	mov	r1, r8
 80a140a:	4620      	mov	r0, r4
 80a140c:	f004 fd74 	bl	80a5ef8 <mbedtls_md_hmac_finish>
 80a1410:	2800      	cmp	r0, #0
 80a1412:	d142      	bne.n	80a149a <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
            return( ret );

        memcpy( md1, work, md_size );
 80a1414:	ad04      	add	r5, sp, #16
 80a1416:	464a      	mov	r2, r9
 80a1418:	4641      	mov	r1, r8
 80a141a:	4628      	mov	r0, r5
 80a141c:	f00d fe69 	bl	80af0f2 <memcpy>

        for( i = 1; i < iteration_count; i++ )
 80a1420:	f04f 0a01 	mov.w	sl, #1
 80a1424:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80a1426:	459a      	cmp	sl, r3
 80a1428:	d21d      	bcs.n	80a1466 <mbedtls_pkcs5_pbkdf2_hmac+0xb2>
        {
            // U2 ends up in md1
            //
            if( ( ret = mbedtls_md_hmac_starts( ctx, password, plen ) ) != 0 )
 80a142a:	465a      	mov	r2, fp
 80a142c:	4639      	mov	r1, r7
 80a142e:	4620      	mov	r0, r4
 80a1430:	f004 fcf2 	bl	80a5e18 <mbedtls_md_hmac_starts>
 80a1434:	bb88      	cbnz	r0, 80a149a <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
                return( ret );

            if( ( ret = mbedtls_md_hmac_update( ctx, md1, md_size ) ) != 0 )
 80a1436:	464a      	mov	r2, r9
 80a1438:	4629      	mov	r1, r5
 80a143a:	4620      	mov	r0, r4
 80a143c:	f004 fd4c 	bl	80a5ed8 <mbedtls_md_hmac_update>
 80a1440:	bb58      	cbnz	r0, 80a149a <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
                return( ret );

            if( ( ret = mbedtls_md_hmac_finish( ctx, md1 ) ) != 0 )
 80a1442:	4629      	mov	r1, r5
 80a1444:	4620      	mov	r0, r4
 80a1446:	f004 fd57 	bl	80a5ef8 <mbedtls_md_hmac_finish>
 80a144a:	bb30      	cbnz	r0, 80a149a <mbedtls_pkcs5_pbkdf2_hmac+0xe6>
                return( ret );

            // U1 xor U2
            //
            for( j = 0; j < md_size; j++ )
 80a144c:	4548      	cmp	r0, r9
 80a144e:	da07      	bge.n	80a1460 <mbedtls_pkcs5_pbkdf2_hmac+0xac>
                work[j] ^= md1[j];
 80a1450:	f810 2008 	ldrb.w	r2, [r0, r8]
 80a1454:	5d43      	ldrb	r3, [r0, r5]
 80a1456:	4053      	eors	r3, r2
 80a1458:	f800 3008 	strb.w	r3, [r0, r8]
            if( ( ret = mbedtls_md_hmac_finish( ctx, md1 ) ) != 0 )
                return( ret );

            // U1 xor U2
            //
            for( j = 0; j < md_size; j++ )
 80a145c:	3001      	adds	r0, #1
 80a145e:	e7f5      	b.n	80a144c <mbedtls_pkcs5_pbkdf2_hmac+0x98>
        if( ( ret = mbedtls_md_hmac_finish( ctx, work ) ) != 0 )
            return( ret );

        memcpy( md1, work, md_size );

        for( i = 1; i < iteration_count; i++ )
 80a1460:	f10a 0a01 	add.w	sl, sl, #1
 80a1464:	e7de      	b.n	80a1424 <mbedtls_pkcs5_pbkdf2_hmac+0x70>
            //
            for( j = 0; j < md_size; j++ )
                work[j] ^= md1[j];
        }

        use_len = ( key_length < md_size ) ? key_length : md_size;
 80a1466:	454e      	cmp	r6, r9
 80a1468:	4635      	mov	r5, r6
 80a146a:	bf28      	it	cs
 80a146c:	464d      	movcs	r5, r9
        memcpy( out_p, work, use_len );
 80a146e:	4641      	mov	r1, r8
 80a1470:	462a      	mov	r2, r5
 80a1472:	9831      	ldr	r0, [sp, #196]	; 0xc4
 80a1474:	f00d fe3d 	bl	80af0f2 <memcpy>

        key_length -= (uint32_t) use_len;
        out_p += use_len;
 80a1478:	9b31      	ldr	r3, [sp, #196]	; 0xc4
        }

        use_len = ( key_length < md_size ) ? key_length : md_size;
        memcpy( out_p, work, use_len );

        key_length -= (uint32_t) use_len;
 80a147a:	1b76      	subs	r6, r6, r5
        out_p += use_len;
 80a147c:	442b      	add	r3, r5
 80a147e:	9331      	str	r3, [sp, #196]	; 0xc4
 80a1480:	aa04      	add	r2, sp, #16

        for( i = 4; i > 0; i-- )
            if( ++counter[i - 1] != 0 )
 80a1482:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 80a1486:	3301      	adds	r3, #1
 80a1488:	b2db      	uxtb	r3, r3
 80a148a:	7013      	strb	r3, [r2, #0]
 80a148c:	2b00      	cmp	r3, #0
 80a148e:	d1a4      	bne.n	80a13da <mbedtls_pkcs5_pbkdf2_hmac+0x26>
        memcpy( out_p, work, use_len );

        key_length -= (uint32_t) use_len;
        out_p += use_len;

        for( i = 4; i > 0; i-- )
 80a1490:	ab03      	add	r3, sp, #12
 80a1492:	4293      	cmp	r3, r2
 80a1494:	d1f5      	bne.n	80a1482 <mbedtls_pkcs5_pbkdf2_hmac+0xce>
 80a1496:	e7a0      	b.n	80a13da <mbedtls_pkcs5_pbkdf2_hmac+0x26>
            if( ++counter[i - 1] != 0 )
                break;
    }

    return( 0 );
 80a1498:	4630      	mov	r0, r6
}
 80a149a:	b025      	add	sp, #148	; 0x94
 80a149c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a14a0 <mbedtls_pkcs5_pbes2>:

int mbedtls_pkcs5_pbes2( const mbedtls_asn1_buf *pbe_params, int mode,
                 const unsigned char *pwd,  size_t pwdlen,
                 const unsigned char *data, size_t datalen,
                 unsigned char *output )
{
 80a14a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a14a4:	461f      	mov	r7, r3
 80a14a6:	b0bb      	sub	sp, #236	; 0xec
    int ret, iterations = 0, keylen = 0;
 80a14a8:	2300      	movs	r3, #0
 80a14aa:	9306      	str	r3, [sp, #24]
 80a14ac:	9307      	str	r3, [sp, #28]
    unsigned char *p, *end;
    mbedtls_asn1_buf kdf_alg_oid, enc_scheme_oid, kdf_alg_params, enc_scheme_params;
    mbedtls_asn1_buf salt;
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
    unsigned char key[32], iv[32];
    size_t olen = 0;
 80a14ae:	9309      	str	r3, [sp, #36]	; 0x24
    mbedtls_md_context_t md_ctx;
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_cipher_context_t cipher_ctx;

    p = pbe_params->p;
    end = p + pbe_params->len;
 80a14b0:	6844      	ldr	r4, [r0, #4]
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_md_context_t md_ctx;
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_cipher_context_t cipher_ctx;

    p = pbe_params->p;
 80a14b2:	6883      	ldr	r3, [r0, #8]
{
    int ret, iterations = 0, keylen = 0;
    unsigned char *p, *end;
    mbedtls_asn1_buf kdf_alg_oid, enc_scheme_oid, kdf_alg_params, enc_scheme_params;
    mbedtls_asn1_buf salt;
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
 80a14b4:	f04f 0904 	mov.w	r9, #4
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_md_context_t md_ctx;
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_cipher_context_t cipher_ctx;

    p = pbe_params->p;
 80a14b8:	9308      	str	r3, [sp, #32]
    end = p + pbe_params->len;
 80a14ba:	441c      	add	r4, r3
     *  PBES2-params ::= SEQUENCE {
     *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 80a14bc:	6803      	ldr	r3, [r0, #0]

int mbedtls_pkcs5_pbes2( const mbedtls_asn1_buf *pbe_params, int mode,
                 const unsigned char *pwd,  size_t pwdlen,
                 const unsigned char *data, size_t datalen,
                 unsigned char *output )
{
 80a14be:	460d      	mov	r5, r1
     *  PBES2-params ::= SEQUENCE {
     *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 80a14c0:	2b30      	cmp	r3, #48	; 0x30

int mbedtls_pkcs5_pbes2( const mbedtls_asn1_buf *pbe_params, int mode,
                 const unsigned char *pwd,  size_t pwdlen,
                 const unsigned char *data, size_t datalen,
                 unsigned char *output )
{
 80a14c2:	4616      	mov	r6, r2
    int ret, iterations = 0, keylen = 0;
    unsigned char *p, *end;
    mbedtls_asn1_buf kdf_alg_oid, enc_scheme_oid, kdf_alg_params, enc_scheme_params;
    mbedtls_asn1_buf salt;
    mbedtls_md_type_t md_type = MBEDTLS_MD_SHA1;
 80a14c4:	f88d 9016 	strb.w	r9, [sp, #22]
     *  PBES2-params ::= SEQUENCE {
     *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 80a14c8:	f040 80c9 	bne.w	80a165e <mbedtls_pkcs5_pbes2+0x1be>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &kdf_alg_oid, &kdf_alg_params ) ) != 0 )
 80a14cc:	ab10      	add	r3, sp, #64	; 0x40
 80a14ce:	aa0a      	add	r2, sp, #40	; 0x28
 80a14d0:	4621      	mov	r1, r4
 80a14d2:	a808      	add	r0, sp, #32
 80a14d4:	f000 fb7b 	bl	80a1bce <mbedtls_asn1_get_alg>
 80a14d8:	2800      	cmp	r0, #0
 80a14da:	d158      	bne.n	80a158e <mbedtls_pkcs5_pbes2+0xee>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    // Only PBKDF2 supported at the moment
    //
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBKDF2, &kdf_alg_oid ) != 0 )
 80a14dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a14de:	2a09      	cmp	r2, #9
 80a14e0:	d14c      	bne.n	80a157c <mbedtls_pkcs5_pbes2+0xdc>
 80a14e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80a14e4:	4861      	ldr	r0, [pc, #388]	; (80a166c <mbedtls_pkcs5_pbes2+0x1cc>)
 80a14e6:	f00d fdf5 	bl	80af0d4 <memcmp>
 80a14ea:	2800      	cmp	r0, #0
 80a14ec:	d146      	bne.n	80a157c <mbedtls_pkcs5_pbes2+0xdc>
                                      mbedtls_asn1_buf *salt, int *iterations,
                                      int *keylen, mbedtls_md_type_t *md_type )
{
    int ret;
    mbedtls_asn1_buf prf_alg_oid;
    unsigned char *p = params->p;
 80a14ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
    const unsigned char *end = params->p + params->len;
 80a14f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
                                      mbedtls_asn1_buf *salt, int *iterations,
                                      int *keylen, mbedtls_md_type_t *md_type )
{
    int ret;
    mbedtls_asn1_buf prf_alg_oid;
    unsigned char *p = params->p;
 80a14f2:	9324      	str	r3, [sp, #144]	; 0x90
    const unsigned char *end = params->p + params->len;
 80a14f4:	eb03 0802 	add.w	r8, r3, r2

    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 80a14f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80a14fa:	2b30      	cmp	r3, #48	; 0x30
 80a14fc:	f040 80af 	bne.w	80a165e <mbedtls_pkcs5_pbes2+0x1be>
     *    keyLength         INTEGER OPTIONAL
     *    prf               AlgorithmIdentifier DEFAULT algid-hmacWithSHA1
     *  }
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 80a1500:	464b      	mov	r3, r9
 80a1502:	aa17      	add	r2, sp, #92	; 0x5c
 80a1504:	4641      	mov	r1, r8
 80a1506:	a824      	add	r0, sp, #144	; 0x90
 80a1508:	f000 fa88 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a150c:	b9f8      	cbnz	r0, 80a154e <mbedtls_pkcs5_pbes2+0xae>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    salt->p = p;
 80a150e:	9a24      	ldr	r2, [sp, #144]	; 0x90
    p += salt->len;
 80a1510:	9b17      	ldr	r3, [sp, #92]	; 0x5c
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    salt->p = p;
 80a1512:	9218      	str	r2, [sp, #96]	; 0x60
    p += salt->len;
 80a1514:	4413      	add	r3, r2

    if( ( ret = mbedtls_asn1_get_int( &p, end, iterations ) ) != 0 )
 80a1516:	4641      	mov	r1, r8
 80a1518:	aa06      	add	r2, sp, #24
 80a151a:	a824      	add	r0, sp, #144	; 0x90
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    salt->p = p;
    p += salt->len;
 80a151c:	9324      	str	r3, [sp, #144]	; 0x90

    if( ( ret = mbedtls_asn1_get_int( &p, end, iterations ) ) != 0 )
 80a151e:	f000 faaa 	bl	80a1a76 <mbedtls_asn1_get_int>
 80a1522:	b9a0      	cbnz	r0, 80a154e <mbedtls_pkcs5_pbes2+0xae>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    if( p == end )
 80a1524:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80a1526:	4598      	cmp	r8, r3
 80a1528:	d022      	beq.n	80a1570 <mbedtls_pkcs5_pbes2+0xd0>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_int( &p, end, keylen ) ) != 0 )
 80a152a:	aa07      	add	r2, sp, #28
 80a152c:	4641      	mov	r1, r8
 80a152e:	a824      	add	r0, sp, #144	; 0x90
 80a1530:	f000 faa1 	bl	80a1a76 <mbedtls_asn1_get_int>
 80a1534:	b110      	cbz	r0, 80a153c <mbedtls_pkcs5_pbes2+0x9c>
    {
        if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80a1536:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80a153a:	d108      	bne.n	80a154e <mbedtls_pkcs5_pbes2+0xae>
            return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
    }

    if( p == end )
 80a153c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80a153e:	4598      	cmp	r8, r3
 80a1540:	d016      	beq.n	80a1570 <mbedtls_pkcs5_pbes2+0xd0>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
 80a1542:	aa2c      	add	r2, sp, #176	; 0xb0
 80a1544:	4641      	mov	r1, r8
 80a1546:	a824      	add	r0, sp, #144	; 0x90
 80a1548:	f000 fb89 	bl	80a1c5e <mbedtls_asn1_get_alg_null>
 80a154c:	b128      	cbz	r0, 80a155a <mbedtls_pkcs5_pbes2+0xba>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
 80a154e:	f5a0 503c 	sub.w	r0, r0, #12032	; 0x2f00
    // Only PBKDF2 supported at the moment
    //
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBKDF2, &kdf_alg_oid ) != 0 )
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    if( ( ret = pkcs5_parse_pbkdf2_params( &kdf_alg_params,
 80a1552:	2800      	cmp	r0, #0
 80a1554:	f040 8086 	bne.w	80a1664 <mbedtls_pkcs5_pbes2+0x1c4>
 80a1558:	e00a      	b.n	80a1570 <mbedtls_pkcs5_pbes2+0xd0>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    if( mbedtls_oid_get_md_hmac( &prf_alg_oid, md_type ) != 0 )
 80a155a:	f10d 0116 	add.w	r1, sp, #22
 80a155e:	a82c      	add	r0, sp, #176	; 0xb0
 80a1560:	f001 ff22 	bl	80a33a8 <mbedtls_oid_get_md_hmac>
 80a1564:	b950      	cbnz	r0, 80a157c <mbedtls_pkcs5_pbes2+0xdc>
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    if( p != end )
 80a1566:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80a1568:	4598      	cmp	r8, r3
 80a156a:	d001      	beq.n	80a1570 <mbedtls_pkcs5_pbes2+0xd0>
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80a156c:	4840      	ldr	r0, [pc, #256]	; (80a1670 <mbedtls_pkcs5_pbes2+0x1d0>)
 80a156e:	e079      	b.n	80a1664 <mbedtls_pkcs5_pbes2+0x1c4>
                                           &md_type ) ) != 0 )
    {
        return( ret );
    }

    md_info = mbedtls_md_info_from_type( md_type );
 80a1570:	f89d 0016 	ldrb.w	r0, [sp, #22]
 80a1574:	f004 fbce 	bl	80a5d14 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 80a1578:	4681      	mov	r9, r0
 80a157a:	b908      	cbnz	r0, 80a1580 <mbedtls_pkcs5_pbes2+0xe0>

    if( ( ret = mbedtls_asn1_get_alg_null( &p, end, &prf_alg_oid ) ) != 0 )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );

    if( mbedtls_oid_get_md_hmac( &prf_alg_oid, md_type ) != 0 )
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );
 80a157c:	483d      	ldr	r0, [pc, #244]	; (80a1674 <mbedtls_pkcs5_pbes2+0x1d4>)
 80a157e:	e071      	b.n	80a1664 <mbedtls_pkcs5_pbes2+0x1c4>

    md_info = mbedtls_md_info_from_type( md_type );
    if( md_info == NULL )
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &enc_scheme_oid,
 80a1580:	ab13      	add	r3, sp, #76	; 0x4c
 80a1582:	aa0d      	add	r2, sp, #52	; 0x34
 80a1584:	4621      	mov	r1, r4
 80a1586:	a808      	add	r0, sp, #32
 80a1588:	f000 fb21 	bl	80a1bce <mbedtls_asn1_get_alg>
 80a158c:	b110      	cbz	r0, 80a1594 <mbedtls_pkcs5_pbes2+0xf4>
                              &enc_scheme_params ) ) != 0 )
    {
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT + ret );
 80a158e:	f5a0 503c 	sub.w	r0, r0, #12032	; 0x2f00
 80a1592:	e067      	b.n	80a1664 <mbedtls_pkcs5_pbes2+0x1c4>
    }

    if( mbedtls_oid_get_cipher_alg( &enc_scheme_oid, &cipher_alg ) != 0 )
 80a1594:	f10d 0117 	add.w	r1, sp, #23
 80a1598:	a80d      	add	r0, sp, #52	; 0x34
 80a159a:	f001 fed7 	bl	80a334c <mbedtls_oid_get_cipher_alg>
 80a159e:	2800      	cmp	r0, #0
 80a15a0:	d1ec      	bne.n	80a157c <mbedtls_pkcs5_pbes2+0xdc>
        return( MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE );

    cipher_info = mbedtls_cipher_info_from_type( cipher_alg );
 80a15a2:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80a15a6:	f000 f86b 	bl	80a1680 <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
 80a15aa:	4680      	mov	r8, r0
 80a15ac:	2800      	cmp	r0, #0
 80a15ae:	d0e5      	beq.n	80a157c <mbedtls_pkcs5_pbes2+0xdc>

    /*
     * The value of keylen from pkcs5_parse_pbkdf2_params() is ignored
     * since it is optional and we don't know if it was set or not
     */
    keylen = cipher_info->key_bitlen / 8;
 80a15b0:	6843      	ldr	r3, [r0, #4]
 80a15b2:	08db      	lsrs	r3, r3, #3
 80a15b4:	9307      	str	r3, [sp, #28]

    if( enc_scheme_params.tag != MBEDTLS_ASN1_OCTET_STRING ||
 80a15b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a15b8:	2b04      	cmp	r3, #4
 80a15ba:	d152      	bne.n	80a1662 <mbedtls_pkcs5_pbes2+0x1c2>
 80a15bc:	68c3      	ldr	r3, [r0, #12]
 80a15be:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a15c0:	429a      	cmp	r2, r3
 80a15c2:	d14e      	bne.n	80a1662 <mbedtls_pkcs5_pbes2+0x1c2>
        enc_scheme_params.len != cipher_info->iv_size )
    {
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT );
    }

    mbedtls_md_init( &md_ctx );
 80a15c4:	a819      	add	r0, sp, #100	; 0x64
 80a15c6:	f004 fbb1 	bl	80a5d2c <mbedtls_md_init>
    mbedtls_cipher_init( &cipher_ctx );
 80a15ca:	a82c      	add	r0, sp, #176	; 0xb0
 80a15cc:	f000 f87a 	bl	80a16c4 <mbedtls_cipher_init>

    memcpy( iv, enc_scheme_params.p, enc_scheme_params.len );
 80a15d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a15d2:	9915      	ldr	r1, [sp, #84]	; 0x54
 80a15d4:	a824      	add	r0, sp, #144	; 0x90
 80a15d6:	f00d fd8c 	bl	80af0f2 <memcpy>

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
 80a15da:	2201      	movs	r2, #1
 80a15dc:	4649      	mov	r1, r9
 80a15de:	a819      	add	r0, sp, #100	; 0x64
 80a15e0:	f004 fbca 	bl	80a5d78 <mbedtls_md_setup>
 80a15e4:	4604      	mov	r4, r0
 80a15e6:	2800      	cmp	r0, #0
 80a15e8:	d131      	bne.n	80a164e <mbedtls_pkcs5_pbes2+0x1ae>
        goto exit;

    if( ( ret = mbedtls_pkcs5_pbkdf2_hmac( &md_ctx, pwd, pwdlen, salt.p, salt.len,
 80a15ea:	9b07      	ldr	r3, [sp, #28]
 80a15ec:	f10d 0970 	add.w	r9, sp, #112	; 0x70
 80a15f0:	9302      	str	r3, [sp, #8]
 80a15f2:	9b06      	ldr	r3, [sp, #24]
 80a15f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80a15f8:	9301      	str	r3, [sp, #4]
 80a15fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a15fc:	463a      	mov	r2, r7
 80a15fe:	9300      	str	r3, [sp, #0]
 80a1600:	4631      	mov	r1, r6
 80a1602:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80a1604:	a819      	add	r0, sp, #100	; 0x64
 80a1606:	f7ff fed5 	bl	80a13b4 <mbedtls_pkcs5_pbkdf2_hmac>
 80a160a:	4604      	mov	r4, r0
 80a160c:	b9f8      	cbnz	r0, 80a164e <mbedtls_pkcs5_pbes2+0x1ae>
                                   iterations, keylen, key ) ) != 0 )
    {
        goto exit;
    }

    if( ( ret = mbedtls_cipher_setup( &cipher_ctx, cipher_info ) ) != 0 )
 80a160e:	4641      	mov	r1, r8
 80a1610:	a82c      	add	r0, sp, #176	; 0xb0
 80a1612:	f000 f86d 	bl	80a16f0 <mbedtls_cipher_setup>
 80a1616:	4604      	mov	r4, r0
 80a1618:	b9c8      	cbnz	r0, 80a164e <mbedtls_pkcs5_pbes2+0x1ae>
        goto exit;

    if( ( ret = mbedtls_cipher_setkey( &cipher_ctx, key, 8 * keylen, (mbedtls_operation_t) mode ) ) != 0 )
 80a161a:	9a07      	ldr	r2, [sp, #28]
 80a161c:	b26b      	sxtb	r3, r5
 80a161e:	00d2      	lsls	r2, r2, #3
 80a1620:	4649      	mov	r1, r9
 80a1622:	a82c      	add	r0, sp, #176	; 0xb0
 80a1624:	f000 f87e 	bl	80a1724 <mbedtls_cipher_setkey>
 80a1628:	4604      	mov	r4, r0
 80a162a:	b980      	cbnz	r0, 80a164e <mbedtls_pkcs5_pbes2+0x1ae>
        goto exit;

    if( ( ret = mbedtls_cipher_crypt( &cipher_ctx, iv, enc_scheme_params.len,
 80a162c:	ab09      	add	r3, sp, #36	; 0x24
 80a162e:	9302      	str	r3, [sp, #8]
 80a1630:	9b44      	ldr	r3, [sp, #272]	; 0x110
 80a1632:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a1634:	9301      	str	r3, [sp, #4]
 80a1636:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80a1638:	a924      	add	r1, sp, #144	; 0x90
 80a163a:	9300      	str	r3, [sp, #0]
 80a163c:	a82c      	add	r0, sp, #176	; 0xb0
 80a163e:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80a1640:	f000 f926 	bl	80a1890 <mbedtls_cipher_crypt>
                              data, datalen, output, &olen ) ) != 0 )
        ret = MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH;
 80a1644:	f5a4 5438 	sub.w	r4, r4, #11776	; 0x2e00
 80a1648:	2800      	cmp	r0, #0
 80a164a:	bf08      	it	eq
 80a164c:	2400      	moveq	r4, #0

exit:
    mbedtls_md_free( &md_ctx );
 80a164e:	a819      	add	r0, sp, #100	; 0x64
 80a1650:	f004 fb71 	bl	80a5d36 <mbedtls_md_free>
    mbedtls_cipher_free( &cipher_ctx );
 80a1654:	a82c      	add	r0, sp, #176	; 0xb0
 80a1656:	f000 f839 	bl	80a16cc <mbedtls_cipher_free>

    return( ret );
 80a165a:	4620      	mov	r0, r4
 80a165c:	e002      	b.n	80a1664 <mbedtls_pkcs5_pbes2+0x1c4>
     *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
     *  }
     */
    if( pbe_params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 80a165e:	4806      	ldr	r0, [pc, #24]	; (80a1678 <mbedtls_pkcs5_pbes2+0x1d8>)
 80a1660:	e000      	b.n	80a1664 <mbedtls_pkcs5_pbes2+0x1c4>
    keylen = cipher_info->key_bitlen / 8;

    if( enc_scheme_params.tag != MBEDTLS_ASN1_OCTET_STRING ||
        enc_scheme_params.len != cipher_info->iv_size )
    {
        return( MBEDTLS_ERR_PKCS5_INVALID_FORMAT );
 80a1662:	4806      	ldr	r0, [pc, #24]	; (80a167c <mbedtls_pkcs5_pbes2+0x1dc>)
exit:
    mbedtls_md_free( &md_ctx );
    mbedtls_cipher_free( &cipher_ctx );

    return( ret );
}
 80a1664:	b03b      	add	sp, #236	; 0xec
 80a1666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a166a:	bf00      	nop
 80a166c:	080af378 	.word	0x080af378
 80a1670:	ffffd09a 	.word	0xffffd09a
 80a1674:	ffffd180 	.word	0xffffd180
 80a1678:	ffffd09e 	.word	0xffffd09e
 80a167c:	ffffd100 	.word	0xffffd100

080a1680 <mbedtls_cipher_info_from_type>:

    return( mbedtls_cipher_supported );
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_type( const mbedtls_cipher_type_t cipher_type )
{
 80a1680:	4b05      	ldr	r3, [pc, #20]	; (80a1698 <mbedtls_cipher_info_from_type+0x18>)
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 80a1682:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80a1686:	b122      	cbz	r2, 80a1692 <mbedtls_cipher_info_from_type+0x12>
 80a1688:	3308      	adds	r3, #8
        if( def->type == cipher_type )
 80a168a:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 80a168e:	4281      	cmp	r1, r0
 80a1690:	d1f7      	bne.n	80a1682 <mbedtls_cipher_info_from_type+0x2>
            return( def->info );

    return( NULL );
}
 80a1692:	4610      	mov	r0, r2
 80a1694:	4770      	bx	lr
 80a1696:	bf00      	nop
 80a1698:	080b016c 	.word	0x080b016c

080a169c <mbedtls_cipher_info_from_values>:
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_values( const mbedtls_cipher_id_t cipher_id,
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
 80a169c:	b530      	push	{r4, r5, lr}
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 80a169e:	4c08      	ldr	r4, [pc, #32]	; (80a16c0 <mbedtls_cipher_info_from_values+0x24>)
 80a16a0:	6863      	ldr	r3, [r4, #4]
 80a16a2:	b15b      	cbz	r3, 80a16bc <mbedtls_cipher_info_from_values+0x20>
        if( def->info->base->cipher == cipher_id &&
 80a16a4:	699d      	ldr	r5, [r3, #24]
 80a16a6:	782d      	ldrb	r5, [r5, #0]
 80a16a8:	4285      	cmp	r5, r0
 80a16aa:	d105      	bne.n	80a16b8 <mbedtls_cipher_info_from_values+0x1c>
 80a16ac:	685d      	ldr	r5, [r3, #4]
 80a16ae:	428d      	cmp	r5, r1
 80a16b0:	d102      	bne.n	80a16b8 <mbedtls_cipher_info_from_values+0x1c>
            def->info->key_bitlen == (unsigned) key_bitlen &&
 80a16b2:	785d      	ldrb	r5, [r3, #1]
 80a16b4:	4295      	cmp	r5, r2
 80a16b6:	d001      	beq.n	80a16bc <mbedtls_cipher_info_from_values+0x20>
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 80a16b8:	3408      	adds	r4, #8
 80a16ba:	e7f1      	b.n	80a16a0 <mbedtls_cipher_info_from_values+0x4>
            def->info->key_bitlen == (unsigned) key_bitlen &&
            def->info->mode == mode )
            return( def->info );

    return( NULL );
}
 80a16bc:	4618      	mov	r0, r3
 80a16be:	bd30      	pop	{r4, r5, pc}
 80a16c0:	080b0164 	.word	0x080b0164

080a16c4 <mbedtls_cipher_init>:

void mbedtls_cipher_init( mbedtls_cipher_context_t *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 80a16c4:	2238      	movs	r2, #56	; 0x38
 80a16c6:	2100      	movs	r1, #0
 80a16c8:	f00d bd39 	b.w	80af13e <memset>

080a16cc <mbedtls_cipher_free>:
}

void mbedtls_cipher_free( mbedtls_cipher_context_t *ctx )
{
 80a16cc:	b510      	push	{r4, lr}
    if( ctx == NULL )
 80a16ce:	4604      	mov	r4, r0
 80a16d0:	b168      	cbz	r0, 80a16ee <mbedtls_cipher_free+0x22>
       mbedtls_zeroize( ctx->cmac_ctx, sizeof( mbedtls_cmac_context_t ) );
       mbedtls_free( ctx->cmac_ctx );
    }
#endif

    if( ctx->cipher_ctx )
 80a16d2:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80a16d4:	b118      	cbz	r0, 80a16de <mbedtls_cipher_free+0x12>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
 80a16d6:	6823      	ldr	r3, [r4, #0]
 80a16d8:	699b      	ldr	r3, [r3, #24]
 80a16da:	695b      	ldr	r3, [r3, #20]
 80a16dc:	4798      	blx	r3
 80a16de:	f104 0238 	add.w	r2, r4, #56	; 0x38
#define mbedtls_free   free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 80a16e2:	2300      	movs	r3, #0
 80a16e4:	4294      	cmp	r4, r2
 80a16e6:	d002      	beq.n	80a16ee <mbedtls_cipher_free+0x22>
 80a16e8:	7023      	strb	r3, [r4, #0]
 80a16ea:	3401      	adds	r4, #1
 80a16ec:	e7fa      	b.n	80a16e4 <mbedtls_cipher_free+0x18>
 80a16ee:	bd10      	pop	{r4, pc}

080a16f0 <mbedtls_cipher_setup>:

    mbedtls_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
}

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
 80a16f0:	b538      	push	{r3, r4, r5, lr}
 80a16f2:	4604      	mov	r4, r0
    if( NULL == cipher_info || NULL == ctx )
 80a16f4:	460d      	mov	r5, r1
 80a16f6:	b161      	cbz	r1, 80a1712 <mbedtls_cipher_setup+0x22>
 80a16f8:	b158      	cbz	r0, 80a1712 <mbedtls_cipher_setup+0x22>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 80a16fa:	2238      	movs	r2, #56	; 0x38
 80a16fc:	2100      	movs	r1, #0
 80a16fe:	f00d fd1e 	bl	80af13e <memset>

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
 80a1702:	69ab      	ldr	r3, [r5, #24]
 80a1704:	691b      	ldr	r3, [r3, #16]
 80a1706:	4798      	blx	r3
 80a1708:	6360      	str	r0, [r4, #52]	; 0x34
 80a170a:	b120      	cbz	r0, 80a1716 <mbedtls_cipher_setup+0x26>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );

    ctx->cipher_info = cipher_info;
 80a170c:	6025      	str	r5, [r4, #0]
#else
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
 80a170e:	2000      	movs	r0, #0
 80a1710:	bd38      	pop	{r3, r4, r5, pc}
}

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
    if( NULL == cipher_info || NULL == ctx )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80a1712:	4802      	ldr	r0, [pc, #8]	; (80a171c <mbedtls_cipher_setup+0x2c>)
 80a1714:	bd38      	pop	{r3, r4, r5, pc}

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
 80a1716:	4802      	ldr	r0, [pc, #8]	; (80a1720 <mbedtls_cipher_setup+0x30>)
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
}
 80a1718:	bd38      	pop	{r3, r4, r5, pc}
 80a171a:	bf00      	nop
 80a171c:	ffff9f00 	.word	0xffff9f00
 80a1720:	ffff9e80 	.word	0xffff9e80

080a1724 <mbedtls_cipher_setkey>:

int mbedtls_cipher_setkey( mbedtls_cipher_context_t *ctx, const unsigned char *key,
        int key_bitlen, const mbedtls_operation_t operation )
{
 80a1724:	b430      	push	{r4, r5}
    if( NULL == ctx || NULL == ctx->cipher_info )
 80a1726:	b1c8      	cbz	r0, 80a175c <mbedtls_cipher_setkey+0x38>
 80a1728:	6804      	ldr	r4, [r0, #0]
 80a172a:	b1bc      	cbz	r4, 80a175c <mbedtls_cipher_setkey+0x38>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 80a172c:	6925      	ldr	r5, [r4, #16]
 80a172e:	07ad      	lsls	r5, r5, #30
 80a1730:	d402      	bmi.n	80a1738 <mbedtls_cipher_setkey+0x14>
 80a1732:	6865      	ldr	r5, [r4, #4]
 80a1734:	4295      	cmp	r5, r2
 80a1736:	d111      	bne.n	80a175c <mbedtls_cipher_setkey+0x38>
    ctx->operation = operation;

    /*
     * For CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 80a1738:	2b01      	cmp	r3, #1
        (int) ctx->cipher_info->key_bitlen != key_bitlen )
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    ctx->key_bitlen = key_bitlen;
 80a173a:	6042      	str	r2, [r0, #4]
    ctx->operation = operation;
 80a173c:	7203      	strb	r3, [r0, #8]

    /*
     * For CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 80a173e:	d004      	beq.n	80a174a <mbedtls_cipher_setkey+0x26>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 80a1740:	7865      	ldrb	r5, [r4, #1]
    ctx->operation = operation;

    /*
     * For CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 80a1742:	2d03      	cmp	r5, #3
 80a1744:	d001      	beq.n	80a174a <mbedtls_cipher_setkey+0x26>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 80a1746:	2d05      	cmp	r5, #5
 80a1748:	d102      	bne.n	80a1750 <mbedtls_cipher_setkey+0x2c>
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode )
    {
        return ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 80a174a:	69a3      	ldr	r3, [r4, #24]
                ctx->key_bitlen );
 80a174c:	689b      	ldr	r3, [r3, #8]
 80a174e:	e002      	b.n	80a1756 <mbedtls_cipher_setkey+0x32>
    }

    if( MBEDTLS_DECRYPT == operation )
 80a1750:	b923      	cbnz	r3, 80a175c <mbedtls_cipher_setkey+0x38>
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 80a1752:	69a3      	ldr	r3, [r4, #24]
                ctx->key_bitlen );
 80a1754:	68db      	ldr	r3, [r3, #12]
 80a1756:	6b40      	ldr	r0, [r0, #52]	; 0x34

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
}
 80a1758:	bc30      	pop	{r4, r5}
                ctx->key_bitlen );
    }

    if( MBEDTLS_DECRYPT == operation )
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
                ctx->key_bitlen );
 80a175a:	4718      	bx	r3

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
}
 80a175c:	4801      	ldr	r0, [pc, #4]	; (80a1764 <mbedtls_cipher_setkey+0x40>)
 80a175e:	bc30      	pop	{r4, r5}
 80a1760:	4770      	bx	lr
 80a1762:	bf00      	nop
 80a1764:	ffff9f00 	.word	0xffff9f00

080a1768 <mbedtls_cipher_set_iv>:

int mbedtls_cipher_set_iv( mbedtls_cipher_context_t *ctx,
                   const unsigned char *iv, size_t iv_len )
{
 80a1768:	b538      	push	{r3, r4, r5, lr}
    size_t actual_iv_size;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == iv )
 80a176a:	4604      	mov	r4, r0
 80a176c:	b1b0      	cbz	r0, 80a179c <mbedtls_cipher_set_iv+0x34>
 80a176e:	6803      	ldr	r3, [r0, #0]
 80a1770:	b1a3      	cbz	r3, 80a179c <mbedtls_cipher_set_iv+0x34>
 80a1772:	b199      	cbz	r1, 80a179c <mbedtls_cipher_set_iv+0x34>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    /* avoid buffer overflow in ctx->iv */
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
 80a1774:	2a10      	cmp	r2, #16
 80a1776:	d80f      	bhi.n	80a1798 <mbedtls_cipher_set_iv+0x30>
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_IV_LEN ) != 0 )
 80a1778:	6918      	ldr	r0, [r3, #16]
 80a177a:	07c0      	lsls	r0, r0, #31
 80a177c:	d403      	bmi.n	80a1786 <mbedtls_cipher_set_iv+0x1e>
        actual_iv_size = iv_len;
    else
    {
        actual_iv_size = ctx->cipher_info->iv_size;
 80a177e:	68dd      	ldr	r5, [r3, #12]

        /* avoid reading past the end of input buffer */
        if( actual_iv_size > iv_len )
 80a1780:	42aa      	cmp	r2, r5
 80a1782:	d201      	bcs.n	80a1788 <mbedtls_cipher_set_iv+0x20>
 80a1784:	e00a      	b.n	80a179c <mbedtls_cipher_set_iv+0x34>
 80a1786:	4615      	mov	r5, r2
            return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    memcpy( ctx->iv, iv, actual_iv_size );
 80a1788:	462a      	mov	r2, r5
 80a178a:	f104 0020 	add.w	r0, r4, #32
 80a178e:	f00d fcb0 	bl	80af0f2 <memcpy>
    ctx->iv_size = actual_iv_size;
 80a1792:	6325      	str	r5, [r4, #48]	; 0x30

    return( 0 );
 80a1794:	2000      	movs	r0, #0
 80a1796:	bd38      	pop	{r3, r4, r5, pc}
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == iv )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    /* avoid buffer overflow in ctx->iv */
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 80a1798:	4801      	ldr	r0, [pc, #4]	; (80a17a0 <mbedtls_cipher_set_iv+0x38>)
 80a179a:	bd38      	pop	{r3, r4, r5, pc}
                   const unsigned char *iv, size_t iv_len )
{
    size_t actual_iv_size;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == iv )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80a179c:	4801      	ldr	r0, [pc, #4]	; (80a17a4 <mbedtls_cipher_set_iv+0x3c>)

    memcpy( ctx->iv, iv, actual_iv_size );
    ctx->iv_size = actual_iv_size;

    return( 0 );
}
 80a179e:	bd38      	pop	{r3, r4, r5, pc}
 80a17a0:	ffff9f80 	.word	0xffff9f80
 80a17a4:	ffff9f00 	.word	0xffff9f00

080a17a8 <mbedtls_cipher_reset>:

int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
 80a17a8:	b128      	cbz	r0, 80a17b6 <mbedtls_cipher_reset+0xe>
 80a17aa:	6803      	ldr	r3, [r0, #0]
 80a17ac:	b11b      	cbz	r3, 80a17b6 <mbedtls_cipher_reset+0xe>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    ctx->unprocessed_len = 0;
 80a17ae:	2300      	movs	r3, #0
 80a17b0:	61c3      	str	r3, [r0, #28]

    return( 0 );
 80a17b2:	4618      	mov	r0, r3
 80a17b4:	4770      	bx	lr
}

int mbedtls_cipher_reset( mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80a17b6:	4801      	ldr	r0, [pc, #4]	; (80a17bc <mbedtls_cipher_reset+0x14>)

    ctx->unprocessed_len = 0;

    return( 0 );
}
 80a17b8:	4770      	bx	lr
 80a17ba:	bf00      	nop
 80a17bc:	ffff9f00 	.word	0xffff9f00

080a17c0 <mbedtls_cipher_update>:
}
#endif /* MBEDTLS_GCM_C */

int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen )
{
 80a17c0:	b470      	push	{r4, r5, r6}
 80a17c2:	9d03      	ldr	r5, [sp, #12]
 80a17c4:	4614      	mov	r4, r2
    int ret;
    size_t block_size = 0;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 80a17c6:	b908      	cbnz	r0, 80a17cc <mbedtls_cipher_update+0xc>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80a17c8:	481d      	ldr	r0, [pc, #116]	; (80a1840 <mbedtls_cipher_update+0x80>)
 80a17ca:	e036      	b.n	80a183a <mbedtls_cipher_update+0x7a>
                   size_t ilen, unsigned char *output, size_t *olen )
{
    int ret;
    size_t block_size = 0;

    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 80a17cc:	6802      	ldr	r2, [r0, #0]
 80a17ce:	2a00      	cmp	r2, #0
 80a17d0:	d0fa      	beq.n	80a17c8 <mbedtls_cipher_update+0x8>
 80a17d2:	2d00      	cmp	r5, #0
 80a17d4:	d0f8      	beq.n	80a17c8 <mbedtls_cipher_update+0x8>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    *olen = 0;
 80a17d6:	2200      	movs	r2, #0
 80a17d8:	602a      	str	r2, [r5, #0]
 * \return       The size of the blocks of the cipher, or zero if \p ctx
 *               has not been initialized.
 */
static inline unsigned int mbedtls_cipher_get_block_size( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
 80a17da:	6806      	ldr	r6, [r0, #0]
 80a17dc:	b10e      	cbz	r6, 80a17e2 <mbedtls_cipher_update+0x22>
        return 0;

    return ctx->cipher_info->block_size;
 80a17de:	6972      	ldr	r2, [r6, #20]
 80a17e0:	e000      	b.n	80a17e4 <mbedtls_cipher_update+0x24>
 *               has not been initialized.
 */
static inline unsigned int mbedtls_cipher_get_block_size( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
        return 0;
 80a17e2:	4632      	mov	r2, r6
    block_size = mbedtls_cipher_get_block_size( ctx );

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 80a17e4:	7876      	ldrb	r6, [r6, #1]
 80a17e6:	2e01      	cmp	r6, #1
 80a17e8:	d10c      	bne.n	80a1804 <mbedtls_cipher_update+0x44>
    {
        if( ilen != block_size )
 80a17ea:	4294      	cmp	r4, r2
 80a17ec:	d120      	bne.n	80a1830 <mbedtls_cipher_update+0x70>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;
 80a17ee:	602c      	str	r4, [r5, #0]

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 80a17f0:	6802      	ldr	r2, [r0, #0]
 80a17f2:	6992      	ldr	r2, [r2, #24]
 80a17f4:	6854      	ldr	r4, [r2, #4]
 80a17f6:	460a      	mov	r2, r1
 80a17f8:	46a4      	mov	ip, r4
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 80a17fa:	bc70      	pop	{r4, r5, r6}
        if( ilen != block_size )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );

        *olen = ilen;

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 80a17fc:	f990 1008 	ldrsb.w	r1, [r0, #8]
 80a1800:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80a1802:	4760      	bx	ip

        return( 0 );
    }

#if defined(MBEDTLS_GCM_C)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
 80a1804:	2e06      	cmp	r6, #6
 80a1806:	d106      	bne.n	80a1816 <mbedtls_cipher_update+0x56>
    {
        *olen = ilen;
 80a1808:	602c      	str	r4, [r5, #0]
        return mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
                           output );
 80a180a:	460a      	mov	r2, r1
 80a180c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80a180e:	4621      	mov	r1, r4
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 80a1810:	bc70      	pop	{r4, r5, r6}
#if defined(MBEDTLS_GCM_C)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
    {
        *olen = ilen;
        return mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
                           output );
 80a1812:	f004 b89d 	b.w	80a5950 <mbedtls_gcm_update>
    }
#endif

    if ( 0 == block_size )
 80a1816:	b16a      	cbz	r2, 80a1834 <mbedtls_cipher_update+0x74>
    {
        return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;
    }

    if( input == output &&
 80a1818:	4299      	cmp	r1, r3
 80a181a:	d10d      	bne.n	80a1838 <mbedtls_cipher_update+0x78>
 80a181c:	69c3      	ldr	r3, [r0, #28]
 80a181e:	2b00      	cmp	r3, #0
 80a1820:	d1d2      	bne.n	80a17c8 <mbedtls_cipher_update+0x8>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 80a1822:	fbb4 f1f2 	udiv	r1, r4, r2
 80a1826:	fb02 4411 	mls	r4, r2, r1, r4
 80a182a:	2c00      	cmp	r4, #0
 80a182c:	d1cc      	bne.n	80a17c8 <mbedtls_cipher_update+0x8>
 80a182e:	e003      	b.n	80a1838 <mbedtls_cipher_update+0x78>
    block_size = mbedtls_cipher_get_block_size( ctx );

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
    {
        if( ilen != block_size )
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 80a1830:	4804      	ldr	r0, [pc, #16]	; (80a1844 <mbedtls_cipher_update+0x84>)
 80a1832:	e002      	b.n	80a183a <mbedtls_cipher_update+0x7a>
    }
#endif

    if ( 0 == block_size )
    {
        return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;
 80a1834:	4804      	ldr	r0, [pc, #16]	; (80a1848 <mbedtls_cipher_update+0x88>)
 80a1836:	e000      	b.n	80a183a <mbedtls_cipher_update+0x7a>

        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 80a1838:	4804      	ldr	r0, [pc, #16]	; (80a184c <mbedtls_cipher_update+0x8c>)
}
 80a183a:	bc70      	pop	{r4, r5, r6}
 80a183c:	4770      	bx	lr
 80a183e:	bf00      	nop
 80a1840:	ffff9f00 	.word	0xffff9f00
 80a1844:	ffff9d80 	.word	0xffff9d80
 80a1848:	ffff9c80 	.word	0xffff9c80
 80a184c:	ffff9f80 	.word	0xffff9f80

080a1850 <mbedtls_cipher_finish>:
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

int mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,
                   unsigned char *output, size_t *olen )
{
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 80a1850:	4603      	mov	r3, r0
 80a1852:	b1a0      	cbz	r0, 80a187e <mbedtls_cipher_finish+0x2e>
 80a1854:	6801      	ldr	r1, [r0, #0]
 80a1856:	b191      	cbz	r1, 80a187e <mbedtls_cipher_finish+0x2e>
 80a1858:	b18a      	cbz	r2, 80a187e <mbedtls_cipher_finish+0x2e>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *olen = 0;
 80a185a:	2000      	movs	r0, #0
 80a185c:	6010      	str	r0, [r2, #0]

    if( MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 80a185e:	681a      	ldr	r2, [r3, #0]
 80a1860:	7852      	ldrb	r2, [r2, #1]
 80a1862:	2a03      	cmp	r2, #3
 80a1864:	d00e      	beq.n	80a1884 <mbedtls_cipher_finish+0x34>
 80a1866:	1f51      	subs	r1, r2, #5
 80a1868:	2902      	cmp	r1, #2
 80a186a:	d90b      	bls.n	80a1884 <mbedtls_cipher_finish+0x34>
        MBEDTLS_MODE_STREAM == ctx->cipher_info->mode )
    {
        return( 0 );
    }

    if( MBEDTLS_MODE_ECB == ctx->cipher_info->mode )
 80a186c:	2a01      	cmp	r2, #1
 80a186e:	d108      	bne.n	80a1882 <mbedtls_cipher_finish+0x32>
    {
        if( ctx->unprocessed_len != 0 )
 80a1870:	69db      	ldr	r3, [r3, #28]
 80a1872:	4283      	cmp	r3, r0
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 80a1874:	f5a0 40c5 	sub.w	r0, r0, #25216	; 0x6280
 80a1878:	bf08      	it	eq
 80a187a:	2000      	moveq	r0, #0
 80a187c:	4770      	bx	lr

int mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,
                   unsigned char *output, size_t *olen )
{
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80a187e:	4802      	ldr	r0, [pc, #8]	; (80a1888 <mbedtls_cipher_finish+0x38>)
 80a1880:	4770      	bx	lr
    }
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 80a1882:	4802      	ldr	r0, [pc, #8]	; (80a188c <mbedtls_cipher_finish+0x3c>)
}
 80a1884:	4770      	bx	lr
 80a1886:	bf00      	nop
 80a1888:	ffff9f00 	.word	0xffff9f00
 80a188c:	ffff9f80 	.word	0xffff9f80

080a1890 <mbedtls_cipher_crypt>:
 */
int mbedtls_cipher_crypt( mbedtls_cipher_context_t *ctx,
                  const unsigned char *iv, size_t iv_len,
                  const unsigned char *input, size_t ilen,
                  unsigned char *output, size_t *olen )
{
 80a1890:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1892:	b085      	sub	sp, #20
 80a1894:	4605      	mov	r5, r0
 80a1896:	461f      	mov	r7, r3
 80a1898:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80a189a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    int ret;
    size_t finish_olen;

    if( ( ret = mbedtls_cipher_set_iv( ctx, iv, iv_len ) ) != 0 )
 80a189c:	f7ff ff64 	bl	80a1768 <mbedtls_cipher_set_iv>
 80a18a0:	b9b0      	cbnz	r0, 80a18d0 <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_reset( ctx ) ) != 0 )
 80a18a2:	4628      	mov	r0, r5
 80a18a4:	f7ff ff80 	bl	80a17a8 <mbedtls_cipher_reset>
 80a18a8:	b990      	cbnz	r0, 80a18d0 <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_update( ctx, input, ilen, output, olen ) ) != 0 )
 80a18aa:	9400      	str	r4, [sp, #0]
 80a18ac:	4633      	mov	r3, r6
 80a18ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a18b0:	4639      	mov	r1, r7
 80a18b2:	4628      	mov	r0, r5
 80a18b4:	f7ff ff84 	bl	80a17c0 <mbedtls_cipher_update>
 80a18b8:	b950      	cbnz	r0, 80a18d0 <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_finish( ctx, output + *olen, &finish_olen ) ) != 0 )
 80a18ba:	6821      	ldr	r1, [r4, #0]
 80a18bc:	aa03      	add	r2, sp, #12
 80a18be:	4431      	add	r1, r6
 80a18c0:	4628      	mov	r0, r5
 80a18c2:	f7ff ffc5 	bl	80a1850 <mbedtls_cipher_finish>
 80a18c6:	b918      	cbnz	r0, 80a18d0 <mbedtls_cipher_crypt+0x40>
        return( ret );

    *olen += finish_olen;
 80a18c8:	6822      	ldr	r2, [r4, #0]
 80a18ca:	9b03      	ldr	r3, [sp, #12]
 80a18cc:	4413      	add	r3, r2
 80a18ce:	6023      	str	r3, [r4, #0]

    return( 0 );
}
 80a18d0:	b005      	add	sp, #20
 80a18d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a18d4 <mbedtls_cipher_auth_encrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 80a18d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80a18d8:	6807      	ldr	r7, [r0, #0]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 80a18da:	4614      	mov	r4, r2
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80a18dc:	787f      	ldrb	r7, [r7, #1]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 80a18de:	9d07      	ldr	r5, [sp, #28]
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80a18e0:	2f06      	cmp	r7, #6
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 80a18e2:	9e08      	ldr	r6, [sp, #32]
 80a18e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a18e6:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 80a18ea:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80a18ee:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80a18f2:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80a18f6:	d112      	bne.n	80a191e <mbedtls_cipher_auth_encrypt+0x4a>
    {
        *olen = ilen;
 80a18f8:	f8c9 2000 	str.w	r2, [r9]
        return( mbedtls_gcm_crypt_and_tag( (mbedtls_gcm_context *)ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
                                   iv, iv_len, ad, ad_len, input, output,
                                   tag_len, tag ) );
 80a18fc:	9308      	str	r3, [sp, #32]
 80a18fe:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 80a1902:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 80a1906:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 80a190a:	960a      	str	r6, [sp, #40]	; 0x28
 80a190c:	9509      	str	r5, [sp, #36]	; 0x24
 80a190e:	9407      	str	r4, [sp, #28]
 80a1910:	460b      	mov	r3, r1
                                     tag, tag_len ) );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 80a1912:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
    {
        *olen = ilen;
        return( mbedtls_gcm_crypt_and_tag( (mbedtls_gcm_context *)ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
                                   iv, iv_len, ad, ad_len, input, output,
                                   tag_len, tag ) );
 80a1916:	2101      	movs	r1, #1
 80a1918:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80a191a:	f004 b904 	b.w	80a5b26 <mbedtls_gcm_crypt_and_tag>
                                     tag, tag_len ) );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 80a191e:	4801      	ldr	r0, [pc, #4]	; (80a1924 <mbedtls_cipher_auth_encrypt+0x50>)
 80a1920:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a1924:	ffff9f80 	.word	0xffff9f80

080a1928 <mbedtls_cipher_auth_decrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 80a1928:	b530      	push	{r4, r5, lr}
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80a192a:	6805      	ldr	r5, [r0, #0]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 80a192c:	b087      	sub	sp, #28
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80a192e:	786d      	ldrb	r5, [r5, #1]
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 80a1930:	460c      	mov	r4, r1
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80a1932:	2d06      	cmp	r5, #6
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 80a1934:	990c      	ldr	r1, [sp, #48]	; 0x30
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80a1936:	d117      	bne.n	80a1968 <mbedtls_cipher_auth_decrypt+0x40>
    {
        int ret;

        *olen = ilen;
 80a1938:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80a193a:	6029      	str	r1, [r5, #0]
        ret = mbedtls_gcm_auth_decrypt( (mbedtls_gcm_context *)ctx->cipher_ctx, ilen,
                                iv, iv_len, ad, ad_len,
                                tag, tag_len, input, output );
 80a193c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80a193e:	9505      	str	r5, [sp, #20]
 80a1940:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80a1942:	9504      	str	r5, [sp, #16]
 80a1944:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80a1946:	9503      	str	r5, [sp, #12]
 80a1948:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80a194a:	9502      	str	r5, [sp, #8]
 80a194c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a194e:	e88d 0028 	stmia.w	sp, {r3, r5}
 80a1952:	4613      	mov	r3, r2
 80a1954:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80a1956:	4622      	mov	r2, r4
 80a1958:	f004 f90a 	bl	80a5b70 <mbedtls_gcm_auth_decrypt>

        if( ret == MBEDTLS_ERR_GCM_AUTH_FAILED )
            ret = MBEDTLS_ERR_CIPHER_AUTH_FAILED;
 80a195c:	4b04      	ldr	r3, [pc, #16]	; (80a1970 <mbedtls_cipher_auth_decrypt+0x48>)
 80a195e:	f110 0f12 	cmn.w	r0, #18
 80a1962:	bf08      	it	eq
 80a1964:	4618      	moveq	r0, r3
 80a1966:	e000      	b.n	80a196a <mbedtls_cipher_auth_decrypt+0x42>

        return( ret );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 80a1968:	4802      	ldr	r0, [pc, #8]	; (80a1974 <mbedtls_cipher_auth_decrypt+0x4c>)
}
 80a196a:	b007      	add	sp, #28
 80a196c:	bd30      	pop	{r4, r5, pc}
 80a196e:	bf00      	nop
 80a1970:	ffff9d00 	.word	0xffff9d00
 80a1974:	ffff9f80 	.word	0xffff9f80

080a1978 <mbedtls_asn1_get_len>:
 * ASN.1 DER decoding routines
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
 80a1978:	b530      	push	{r4, r5, lr}
    if( ( end - *p ) < 1 )
 80a197a:	6803      	ldr	r3, [r0, #0]
 80a197c:	1acd      	subs	r5, r1, r3
 80a197e:	2d00      	cmp	r5, #0
 80a1980:	dc02      	bgt.n	80a1988 <mbedtls_asn1_get_len+0x10>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80a1982:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 80a1986:	bd30      	pop	{r4, r5, pc}

    if( ( **p & 0x80 ) == 0 )
 80a1988:	781c      	ldrb	r4, [r3, #0]
 80a198a:	f014 0f80 	tst.w	r4, #128	; 0x80
 80a198e:	d104      	bne.n	80a199a <mbedtls_asn1_get_len+0x22>
        *len = *(*p)++;
 80a1990:	1c5c      	adds	r4, r3, #1
 80a1992:	6004      	str	r4, [r0, #0]
 80a1994:	781b      	ldrb	r3, [r3, #0]
 80a1996:	6013      	str	r3, [r2, #0]
 80a1998:	e036      	b.n	80a1a08 <mbedtls_asn1_get_len+0x90>
    else
    {
        switch( **p & 0x7F )
 80a199a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 80a199e:	3c01      	subs	r4, #1
 80a19a0:	2c03      	cmp	r4, #3
 80a19a2:	d838      	bhi.n	80a1a16 <mbedtls_asn1_get_len+0x9e>
 80a19a4:	e8df f004 	tbb	[pc, r4]
 80a19a8:	20130902 	.word	0x20130902
        {
        case 1:
            if( ( end - *p ) < 2 )
 80a19ac:	2d01      	cmp	r5, #1
 80a19ae:	d0e8      	beq.n	80a1982 <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = (*p)[1];
 80a19b0:	785b      	ldrb	r3, [r3, #1]
 80a19b2:	6013      	str	r3, [r2, #0]
            (*p) += 2;
 80a19b4:	6803      	ldr	r3, [r0, #0]
 80a19b6:	3302      	adds	r3, #2
 80a19b8:	e025      	b.n	80a1a06 <mbedtls_asn1_get_len+0x8e>
            break;

        case 2:
            if( ( end - *p ) < 3 )
 80a19ba:	2d02      	cmp	r5, #2
 80a19bc:	dde1      	ble.n	80a1982 <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 80a19be:	785c      	ldrb	r4, [r3, #1]
 80a19c0:	789b      	ldrb	r3, [r3, #2]
 80a19c2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80a19c6:	6013      	str	r3, [r2, #0]
            (*p) += 3;
 80a19c8:	6803      	ldr	r3, [r0, #0]
 80a19ca:	3303      	adds	r3, #3
 80a19cc:	e01b      	b.n	80a1a06 <mbedtls_asn1_get_len+0x8e>
            break;

        case 3:
            if( ( end - *p ) < 4 )
 80a19ce:	2d03      	cmp	r5, #3
 80a19d0:	ddd7      	ble.n	80a1982 <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = ( (size_t)(*p)[1] << 16 ) |
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 80a19d2:	789c      	ldrb	r4, [r3, #2]
 80a19d4:	785d      	ldrb	r5, [r3, #1]
 80a19d6:	0224      	lsls	r4, r4, #8
 80a19d8:	78db      	ldrb	r3, [r3, #3]
 80a19da:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80a19de:	431c      	orrs	r4, r3
 80a19e0:	6014      	str	r4, [r2, #0]
            (*p) += 4;
 80a19e2:	6803      	ldr	r3, [r0, #0]
 80a19e4:	3304      	adds	r3, #4
 80a19e6:	e00e      	b.n	80a1a06 <mbedtls_asn1_get_len+0x8e>
            break;

        case 4:
            if( ( end - *p ) < 5 )
 80a19e8:	2d04      	cmp	r5, #4
 80a19ea:	ddca      	ble.n	80a1982 <mbedtls_asn1_get_len+0xa>
                return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
 80a19ec:	789c      	ldrb	r4, [r3, #2]
 80a19ee:	785d      	ldrb	r5, [r3, #1]
 80a19f0:	0424      	lsls	r4, r4, #16
 80a19f2:	ea44 6505 	orr.w	r5, r4, r5, lsl #24
 80a19f6:	791c      	ldrb	r4, [r3, #4]
 80a19f8:	78db      	ldrb	r3, [r3, #3]
 80a19fa:	432c      	orrs	r4, r5
 80a19fc:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1a00:	6013      	str	r3, [r2, #0]
            (*p) += 5;
 80a1a02:	6803      	ldr	r3, [r0, #0]
 80a1a04:	3305      	adds	r3, #5
 80a1a06:	6003      	str	r3, [r0, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
 80a1a08:	6803      	ldr	r3, [r0, #0]
 80a1a0a:	1ac9      	subs	r1, r1, r3
 80a1a0c:	6813      	ldr	r3, [r2, #0]
 80a1a0e:	428b      	cmp	r3, r1
 80a1a10:	d8b7      	bhi.n	80a1982 <mbedtls_asn1_get_len+0xa>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
 80a1a12:	2000      	movs	r0, #0
 80a1a14:	bd30      	pop	{r4, r5, pc}
                   ( (size_t)(*p)[3] << 8  ) |           (*p)[4];
            (*p) += 5;
            break;

        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 80a1a16:	f06f 0063 	mvn.w	r0, #99	; 0x63

    if( *len > (size_t) ( end - *p ) )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
}
 80a1a1a:	bd30      	pop	{r4, r5, pc}

080a1a1c <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
 80a1a1c:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
 80a1a1e:	6804      	ldr	r4, [r0, #0]
 80a1a20:	1b0e      	subs	r6, r1, r4
 80a1a22:	2e00      	cmp	r6, #0
 80a1a24:	dd07      	ble.n	80a1a36 <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
 80a1a26:	7826      	ldrb	r6, [r4, #0]
 80a1a28:	429e      	cmp	r6, r3
 80a1a2a:	d107      	bne.n	80a1a3c <mbedtls_asn1_get_tag+0x20>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 80a1a2c:	3401      	adds	r4, #1
 80a1a2e:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
 80a1a30:	bc70      	pop	{r4, r5, r6}
    if( **p != tag )
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;

    return( mbedtls_asn1_get_len( p, end, len ) );
 80a1a32:	f7ff bfa1 	b.w	80a1978 <mbedtls_asn1_get_len>
int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80a1a36:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 80a1a3a:	e001      	b.n	80a1a40 <mbedtls_asn1_get_tag+0x24>

    if( **p != tag )
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 80a1a3c:	f06f 0061 	mvn.w	r0, #97	; 0x61

    (*p)++;

    return( mbedtls_asn1_get_len( p, end, len ) );
}
 80a1a40:	bc70      	pop	{r4, r5, r6}
 80a1a42:	4770      	bx	lr

080a1a44 <mbedtls_asn1_get_bool>:

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 80a1a44:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 80a1a46:	2301      	movs	r3, #1
}

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 80a1a48:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 80a1a4a:	aa01      	add	r2, sp, #4
}

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 80a1a4c:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 80a1a4e:	f7ff ffe5 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a1a52:	b970      	cbnz	r0, 80a1a72 <mbedtls_asn1_get_bool+0x2e>
        return( ret );

    if( len != 1 )
 80a1a54:	9b01      	ldr	r3, [sp, #4]
 80a1a56:	2b01      	cmp	r3, #1
 80a1a58:	d109      	bne.n	80a1a6e <mbedtls_asn1_get_bool+0x2a>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = ( **p != 0 ) ? 1 : 0;
 80a1a5a:	6823      	ldr	r3, [r4, #0]
 80a1a5c:	781b      	ldrb	r3, [r3, #0]
 80a1a5e:	3300      	adds	r3, #0
 80a1a60:	bf18      	it	ne
 80a1a62:	2301      	movne	r3, #1
 80a1a64:	602b      	str	r3, [r5, #0]
    (*p)++;
 80a1a66:	6823      	ldr	r3, [r4, #0]
 80a1a68:	3301      	adds	r3, #1
 80a1a6a:	6023      	str	r3, [r4, #0]

    return( 0 );
 80a1a6c:	e001      	b.n	80a1a72 <mbedtls_asn1_get_bool+0x2e>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
        return( ret );

    if( len != 1 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 80a1a6e:	f06f 0063 	mvn.w	r0, #99	; 0x63

    *val = ( **p != 0 ) ? 1 : 0;
    (*p)++;

    return( 0 );
}
 80a1a72:	b003      	add	sp, #12
 80a1a74:	bd30      	pop	{r4, r5, pc}

080a1a76 <mbedtls_asn1_get_int>:

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 80a1a76:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80a1a78:	2302      	movs	r3, #2
}

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 80a1a7a:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80a1a7c:	aa01      	add	r2, sp, #4
}

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 80a1a7e:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80a1a80:	f7ff ffcc 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a1a84:	b9c8      	cbnz	r0, 80a1aba <mbedtls_asn1_get_int+0x44>
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
 80a1a86:	9b01      	ldr	r3, [sp, #4]
 80a1a88:	3b01      	subs	r3, #1
 80a1a8a:	2b03      	cmp	r3, #3
 80a1a8c:	d813      	bhi.n	80a1ab6 <mbedtls_asn1_get_int+0x40>
 80a1a8e:	6823      	ldr	r3, [r4, #0]
 80a1a90:	f993 3000 	ldrsb.w	r3, [r3]
 80a1a94:	2b00      	cmp	r3, #0
 80a1a96:	db0e      	blt.n	80a1ab6 <mbedtls_asn1_get_int+0x40>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;
 80a1a98:	6028      	str	r0, [r5, #0]

    while( len-- > 0 )
 80a1a9a:	9801      	ldr	r0, [sp, #4]
 80a1a9c:	1e43      	subs	r3, r0, #1
 80a1a9e:	9301      	str	r3, [sp, #4]
 80a1aa0:	b158      	cbz	r0, 80a1aba <mbedtls_asn1_get_int+0x44>
    {
        *val = ( *val << 8 ) | **p;
 80a1aa2:	6823      	ldr	r3, [r4, #0]
 80a1aa4:	682a      	ldr	r2, [r5, #0]
 80a1aa6:	781b      	ldrb	r3, [r3, #0]
 80a1aa8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a1aac:	602b      	str	r3, [r5, #0]
        (*p)++;
 80a1aae:	6823      	ldr	r3, [r4, #0]
 80a1ab0:	3301      	adds	r3, #1
 80a1ab2:	6023      	str	r3, [r4, #0]
    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;

    while( len-- > 0 )
 80a1ab4:	e7f1      	b.n	80a1a9a <mbedtls_asn1_get_int+0x24>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 80a1ab6:	f06f 0063 	mvn.w	r0, #99	; 0x63
        *val = ( *val << 8 ) | **p;
        (*p)++;
    }

    return( 0 );
}
 80a1aba:	b003      	add	sp, #12
 80a1abc:	bd30      	pop	{r4, r5, pc}

080a1abe <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
 80a1abe:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80a1ac0:	2302      	movs	r3, #2

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
 80a1ac2:	4615      	mov	r5, r2
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80a1ac4:	aa01      	add	r2, sp, #4

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
 80a1ac6:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80a1ac8:	f7ff ffa8 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a1acc:	b940      	cbnz	r0, 80a1ae0 <mbedtls_asn1_get_mpi+0x22>
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
 80a1ace:	9a01      	ldr	r2, [sp, #4]
 80a1ad0:	6821      	ldr	r1, [r4, #0]
 80a1ad2:	4628      	mov	r0, r5
 80a1ad4:	f007 fca9 	bl	80a942a <mbedtls_mpi_read_binary>

    *p += len;
 80a1ad8:	6822      	ldr	r2, [r4, #0]
 80a1ada:	9b01      	ldr	r3, [sp, #4]
 80a1adc:	4413      	add	r3, r2
 80a1ade:	6023      	str	r3, [r4, #0]

    return( ret );
}
 80a1ae0:	b003      	add	sp, #12
 80a1ae2:	bd30      	pop	{r4, r5, pc}

080a1ae4 <mbedtls_asn1_get_bitstring>:
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
 80a1ae4:	b570      	push	{r4, r5, r6, lr}
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 80a1ae6:	2303      	movs	r3, #3
}
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
 80a1ae8:	4604      	mov	r4, r0
 80a1aea:	460e      	mov	r6, r1
 80a1aec:	4615      	mov	r5, r2
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 80a1aee:	f7ff ff95 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a1af2:	b9d8      	cbnz	r0, 80a1b2c <mbedtls_asn1_get_bitstring+0x48>
        return( ret );

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
 80a1af4:	6813      	ldr	r3, [r2, #0]
 80a1af6:	b1a3      	cbz	r3, 80a1b22 <mbedtls_asn1_get_bitstring+0x3e>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    bs->len -= 1;
 80a1af8:	3b01      	subs	r3, #1
 80a1afa:	6013      	str	r3, [r2, #0]

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
 80a1afc:	6823      	ldr	r3, [r4, #0]
 80a1afe:	781b      	ldrb	r3, [r3, #0]
    if( bs->unused_bits > 7 )
 80a1b00:	2b07      	cmp	r3, #7
    if( bs->len < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    bs->len -= 1;

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
 80a1b02:	7113      	strb	r3, [r2, #4]
    if( bs->unused_bits > 7 )
 80a1b04:	d810      	bhi.n	80a1b28 <mbedtls_asn1_get_bitstring+0x44>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    (*p)++;
 80a1b06:	6823      	ldr	r3, [r4, #0]
 80a1b08:	3301      	adds	r3, #1
 80a1b0a:	6023      	str	r3, [r4, #0]

    /* Get actual bitstring */
    bs->p = *p;
 80a1b0c:	6093      	str	r3, [r2, #8]
    *p += bs->len;
 80a1b0e:	6822      	ldr	r2, [r4, #0]
 80a1b10:	682b      	ldr	r3, [r5, #0]
 80a1b12:	4413      	add	r3, r2

    if( *p != end )
 80a1b14:	429e      	cmp	r6, r3
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    (*p)++;

    /* Get actual bitstring */
    bs->p = *p;
    *p += bs->len;
 80a1b16:	6023      	str	r3, [r4, #0]

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 80a1b18:	bf14      	ite	ne
 80a1b1a:	f06f 0065 	mvnne.w	r0, #101	; 0x65
 80a1b1e:	2000      	moveq	r0, #0
 80a1b20:	bd70      	pop	{r4, r5, r6, pc}
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
        return( ret );

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80a1b22:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 80a1b26:	bd70      	pop	{r4, r5, r6, pc}
    bs->len -= 1;

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
    if( bs->unused_bits > 7 )
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 80a1b28:	f06f 0063 	mvn.w	r0, #99	; 0x63

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 80a1b2c:	bd70      	pop	{r4, r5, r6, pc}

080a1b2e <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
 80a1b2e:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 80a1b30:	2303      	movs	r3, #3
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
 80a1b32:	4604      	mov	r4, r0
 80a1b34:	4615      	mov	r5, r2
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 80a1b36:	f7ff ff71 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a1b3a:	b958      	cbnz	r0, 80a1b54 <mbedtls_asn1_get_bitstring_null+0x26>
        return( ret );

    if( (*len)-- < 2 || *(*p)++ != 0 )
 80a1b3c:	6813      	ldr	r3, [r2, #0]
 80a1b3e:	1e5a      	subs	r2, r3, #1
 80a1b40:	2b01      	cmp	r3, #1
 80a1b42:	602a      	str	r2, [r5, #0]
 80a1b44:	d904      	bls.n	80a1b50 <mbedtls_asn1_get_bitstring_null+0x22>
 80a1b46:	6823      	ldr	r3, [r4, #0]
 80a1b48:	1c5a      	adds	r2, r3, #1
 80a1b4a:	6022      	str	r2, [r4, #0]
 80a1b4c:	7818      	ldrb	r0, [r3, #0]
 80a1b4e:	b108      	cbz	r0, 80a1b54 <mbedtls_asn1_get_bitstring_null+0x26>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 80a1b50:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
 80a1b54:	bd38      	pop	{r3, r4, r5, pc}

080a1b56 <mbedtls_asn1_get_sequence_of>:
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
 80a1b56:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a1b5a:	4615      	mov	r5, r2
 80a1b5c:	461f      	mov	r7, r3
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a1b5e:	aa01      	add	r2, sp, #4
 80a1b60:	2330      	movs	r3, #48	; 0x30
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
 80a1b62:	4604      	mov	r4, r0
 80a1b64:	460e      	mov	r6, r1
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a1b66:	f7ff ff59 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a1b6a:	bb68      	cbnz	r0, 80a1bc8 <mbedtls_asn1_get_sequence_of+0x72>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( *p + len != end )
 80a1b6c:	6822      	ldr	r2, [r4, #0]
 80a1b6e:	9b01      	ldr	r3, [sp, #4]
 80a1b70:	4413      	add	r3, r2
 80a1b72:	429e      	cmp	r6, r3
 80a1b74:	d01d      	beq.n	80a1bb2 <mbedtls_asn1_get_sequence_of+0x5c>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80a1b76:	f06f 0065 	mvn.w	r0, #101	; 0x65
 80a1b7a:	e025      	b.n	80a1bc8 <mbedtls_asn1_get_sequence_of+0x72>

    while( *p < end )
 80a1b7c:	6823      	ldr	r3, [r4, #0]
 80a1b7e:	429e      	cmp	r6, r3
 80a1b80:	d91a      	bls.n	80a1bb8 <mbedtls_asn1_get_sequence_of+0x62>
    {
        buf = &(cur->buf);
        buf->tag = **p;
 80a1b82:	781b      	ldrb	r3, [r3, #0]

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 80a1b84:	4642      	mov	r2, r8
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    while( *p < end )
    {
        buf = &(cur->buf);
        buf->tag = **p;
 80a1b86:	602b      	str	r3, [r5, #0]

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 80a1b88:	4631      	mov	r1, r6
 80a1b8a:	463b      	mov	r3, r7
 80a1b8c:	4620      	mov	r0, r4
 80a1b8e:	f7ff ff45 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a1b92:	b9c8      	cbnz	r0, 80a1bc8 <mbedtls_asn1_get_sequence_of+0x72>
            return( ret );

        buf->p = *p;
 80a1b94:	6823      	ldr	r3, [r4, #0]
 80a1b96:	60ab      	str	r3, [r5, #8]
        *p += buf->len;
 80a1b98:	6822      	ldr	r2, [r4, #0]
 80a1b9a:	686b      	ldr	r3, [r5, #4]
 80a1b9c:	4413      	add	r3, r2

        /* Allocate and assign next pointer */
        if( *p < end )
 80a1b9e:	429e      	cmp	r6, r3

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
            return( ret );

        buf->p = *p;
        *p += buf->len;
 80a1ba0:	6023      	str	r3, [r4, #0]

        /* Allocate and assign next pointer */
        if( *p < end )
 80a1ba2:	d9eb      	bls.n	80a1b7c <mbedtls_asn1_get_sequence_of+0x26>
        {
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
 80a1ba4:	2110      	movs	r1, #16
 80a1ba6:	2001      	movs	r0, #1
 80a1ba8:	f00d fa7e 	bl	80af0a8 <calloc>
                                            sizeof( mbedtls_asn1_sequence ) );
 80a1bac:	60e8      	str	r0, [r5, #12]

            if( cur->next == NULL )
 80a1bae:	b148      	cbz	r0, 80a1bc4 <mbedtls_asn1_get_sequence_of+0x6e>
 80a1bb0:	4605      	mov	r5, r0
    while( *p < end )
    {
        buf = &(cur->buf);
        buf->tag = **p;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 80a1bb2:	f105 0804 	add.w	r8, r5, #4
 80a1bb6:	e7e1      	b.n	80a1b7c <mbedtls_asn1_get_sequence_of+0x26>
            cur = cur->next;
        }
    }

    /* Set final sequence entry's next pointer to NULL */
    cur->next = NULL;
 80a1bb8:	2000      	movs	r0, #0
 80a1bba:	60e8      	str	r0, [r5, #12]

    if( *p != end )
 80a1bbc:	6823      	ldr	r3, [r4, #0]
 80a1bbe:	429e      	cmp	r6, r3
 80a1bc0:	d002      	beq.n	80a1bc8 <mbedtls_asn1_get_sequence_of+0x72>
 80a1bc2:	e7d8      	b.n	80a1b76 <mbedtls_asn1_get_sequence_of+0x20>
        {
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
                                            sizeof( mbedtls_asn1_sequence ) );

            if( cur->next == NULL )
                return( MBEDTLS_ERR_ASN1_ALLOC_FAILED );
 80a1bc4:	f06f 0069 	mvn.w	r0, #105	; 0x69

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 80a1bc8:	b002      	add	sp, #8
 80a1bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1bce <mbedtls_asn1_get_alg>:

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
 80a1bce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a1bd0:	4617      	mov	r7, r2
 80a1bd2:	461d      	mov	r5, r3
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a1bd4:	aa01      	add	r2, sp, #4
 80a1bd6:	2330      	movs	r3, #48	; 0x30
}

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
 80a1bd8:	4604      	mov	r4, r0
 80a1bda:	460e      	mov	r6, r1
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a1bdc:	f7ff ff1e 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a1be0:	2800      	cmp	r0, #0
 80a1be2:	d13a      	bne.n	80a1c5a <mbedtls_asn1_get_alg+0x8c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
 80a1be4:	6823      	ldr	r3, [r4, #0]
 80a1be6:	1af6      	subs	r6, r6, r3
 80a1be8:	2e00      	cmp	r6, #0
 80a1bea:	dd31      	ble.n	80a1c50 <mbedtls_asn1_get_alg+0x82>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
 80a1bec:	463a      	mov	r2, r7
 80a1bee:	781b      	ldrb	r3, [r3, #0]
    end = *p + len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
 80a1bf0:	4620      	mov	r0, r4
        return( ret );

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
 80a1bf2:	f842 3b04 	str.w	r3, [r2], #4
    end = *p + len;
 80a1bf6:	6826      	ldr	r6, [r4, #0]
 80a1bf8:	9b01      	ldr	r3, [sp, #4]
 80a1bfa:	441e      	add	r6, r3

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
 80a1bfc:	4631      	mov	r1, r6
 80a1bfe:	2306      	movs	r3, #6
 80a1c00:	f7ff ff0c 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a1c04:	bb48      	cbnz	r0, 80a1c5a <mbedtls_asn1_get_alg+0x8c>
        return( ret );

    alg->p = *p;
 80a1c06:	6823      	ldr	r3, [r4, #0]
 80a1c08:	60bb      	str	r3, [r7, #8]
    *p += alg->len;
 80a1c0a:	6822      	ldr	r2, [r4, #0]
 80a1c0c:	687b      	ldr	r3, [r7, #4]
 80a1c0e:	18d1      	adds	r1, r2, r3

    if( *p == end )
 80a1c10:	428e      	cmp	r6, r1

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( ret );

    alg->p = *p;
    *p += alg->len;
 80a1c12:	6021      	str	r1, [r4, #0]

    if( *p == end )
 80a1c14:	d106      	bne.n	80a1c24 <mbedtls_asn1_get_alg+0x56>
 80a1c16:	f105 030c 	add.w	r3, r5, #12
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 80a1c1a:	429d      	cmp	r5, r3
 80a1c1c:	d016      	beq.n	80a1c4c <mbedtls_asn1_get_alg+0x7e>
 80a1c1e:	7028      	strb	r0, [r5, #0]
 80a1c20:	3501      	adds	r5, #1
 80a1c22:	e7fa      	b.n	80a1c1a <mbedtls_asn1_get_alg+0x4c>
    {
        mbedtls_zeroize( params, sizeof(mbedtls_asn1_buf) );
        return( 0 );
    }

    params->tag = **p;
 80a1c24:	5cd3      	ldrb	r3, [r2, r3]
 80a1c26:	462a      	mov	r2, r5
 80a1c28:	f842 3b04 	str.w	r3, [r2], #4
    (*p)++;
 80a1c2c:	6823      	ldr	r3, [r4, #0]

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 80a1c2e:	4631      	mov	r1, r6
        mbedtls_zeroize( params, sizeof(mbedtls_asn1_buf) );
        return( 0 );
    }

    params->tag = **p;
    (*p)++;
 80a1c30:	3301      	adds	r3, #1
 80a1c32:	6023      	str	r3, [r4, #0]

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 80a1c34:	4620      	mov	r0, r4
 80a1c36:	f7ff fe9f 	bl	80a1978 <mbedtls_asn1_get_len>
 80a1c3a:	b970      	cbnz	r0, 80a1c5a <mbedtls_asn1_get_alg+0x8c>
        return( ret );

    params->p = *p;
 80a1c3c:	6823      	ldr	r3, [r4, #0]
 80a1c3e:	60ab      	str	r3, [r5, #8]
    *p += params->len;
 80a1c40:	6822      	ldr	r2, [r4, #0]
 80a1c42:	686b      	ldr	r3, [r5, #4]
 80a1c44:	4413      	add	r3, r2

    if( *p != end )
 80a1c46:	429e      	cmp	r6, r3

    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
        return( ret );

    params->p = *p;
    *p += params->len;
 80a1c48:	6023      	str	r3, [r4, #0]

    if( *p != end )
 80a1c4a:	d104      	bne.n	80a1c56 <mbedtls_asn1_get_alg+0x88>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 80a1c4c:	2000      	movs	r0, #0
 80a1c4e:	e004      	b.n	80a1c5a <mbedtls_asn1_get_alg+0x8c>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80a1c50:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 80a1c54:	e001      	b.n	80a1c5a <mbedtls_asn1_get_alg+0x8c>

    params->p = *p;
    *p += params->len;

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80a1c56:	f06f 0065 	mvn.w	r0, #101	; 0x65

    return( 0 );
}
 80a1c5a:	b003      	add	sp, #12
 80a1c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1c5e <mbedtls_asn1_get_alg_null>:

int mbedtls_asn1_get_alg_null( unsigned char **p,
                       const unsigned char *end,
                       mbedtls_asn1_buf *alg )
{
 80a1c5e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int ret;
    mbedtls_asn1_buf params;

    memset( &params, 0, sizeof(mbedtls_asn1_buf) );
 80a1c60:	2300      	movs	r3, #0
 80a1c62:	9301      	str	r3, [sp, #4]
 80a1c64:	9302      	str	r3, [sp, #8]
 80a1c66:	9303      	str	r3, [sp, #12]

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, &params ) ) != 0 )
 80a1c68:	ab01      	add	r3, sp, #4
 80a1c6a:	f7ff ffb0 	bl	80a1bce <mbedtls_asn1_get_alg>
 80a1c6e:	b960      	cbnz	r0, 80a1c8a <mbedtls_asn1_get_alg_null+0x2c>
        return( ret );

    if( ( params.tag != MBEDTLS_ASN1_NULL && params.tag != 0 ) || params.len != 0 )
 80a1c70:	9b01      	ldr	r3, [sp, #4]
 80a1c72:	2b05      	cmp	r3, #5
 80a1c74:	d000      	beq.n	80a1c78 <mbedtls_asn1_get_alg_null+0x1a>
 80a1c76:	b933      	cbnz	r3, 80a1c86 <mbedtls_asn1_get_alg_null+0x28>
 80a1c78:	9b02      	ldr	r3, [sp, #8]
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );

    return( 0 );
 80a1c7a:	2b00      	cmp	r3, #0
 80a1c7c:	bf14      	ite	ne
 80a1c7e:	f06f 0067 	mvnne.w	r0, #103	; 0x67
 80a1c82:	2000      	moveq	r0, #0
 80a1c84:	e001      	b.n	80a1c8a <mbedtls_asn1_get_alg_null+0x2c>

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, &params ) ) != 0 )
        return( ret );

    if( ( params.tag != MBEDTLS_ASN1_NULL && params.tag != 0 ) || params.len != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 80a1c86:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
 80a1c8a:	b005      	add	sp, #20
 80a1c8c:	f85d fb04 	ldr.w	pc, [sp], #4

080a1c90 <_ZL17sha1_process_wrapPvPKh>:
}

static int sha1_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha1_process( (mbedtls_sha1_context *) ctx,
                                           data ) );
 80a1c90:	f001 bbee 	b.w	80a3470 <mbedtls_internal_sha1_process>

080a1c94 <_ZL15sha1_clone_wrapPvPKv>:
}

static void sha1_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha1_clone( (mbedtls_sha1_context *) dst,
                  (const mbedtls_sha1_context *) src );
 80a1c94:	f001 bbcc 	b.w	80a3430 <mbedtls_sha1_clone>

080a1c98 <_ZL13sha1_ctx_freePv>:
}

static void sha1_ctx_free( void *ctx )
{
 80a1c98:	b510      	push	{r4, lr}
 80a1c9a:	4604      	mov	r4, r0
    mbedtls_sha1_free( (mbedtls_sha1_context *) ctx );
 80a1c9c:	f001 fbbe 	bl	80a341c <mbedtls_sha1_free>
    mbedtls_free( ctx );
 80a1ca0:	4620      	mov	r0, r4
}
 80a1ca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha1_ctx_free( void *ctx )
{
    mbedtls_sha1_free( (mbedtls_sha1_context *) ctx );
    mbedtls_free( ctx );
 80a1ca6:	f00c b931 	b.w	80adf0c <free>

080a1caa <_ZL14sha1_ctx_allocv>:
{
    return( mbedtls_sha1_finish_ret( (mbedtls_sha1_context *) ctx, output ) );
}

static void *sha1_ctx_alloc( void )
{
 80a1caa:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha1_context ) );
 80a1cac:	215c      	movs	r1, #92	; 0x5c
 80a1cae:	2001      	movs	r0, #1
 80a1cb0:	f00d f9fa 	bl	80af0a8 <calloc>

    if( ctx != NULL )
 80a1cb4:	4604      	mov	r4, r0
 80a1cb6:	b108      	cbz	r0, 80a1cbc <_ZL14sha1_ctx_allocv+0x12>
        mbedtls_sha1_init( (mbedtls_sha1_context *) ctx );
 80a1cb8:	f001 fbac 	bl	80a3414 <mbedtls_sha1_init>

    return( ctx );
}
 80a1cbc:	4620      	mov	r0, r4
 80a1cbe:	bd10      	pop	{r4, pc}

080a1cc0 <_ZL16sha1_finish_wrapPvPh>:
                                     input, ilen ) );
}

static int sha1_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha1_finish_ret( (mbedtls_sha1_context *) ctx, output ) );
 80a1cc0:	f002 bbc2 	b.w	80a4448 <mbedtls_sha1_finish_ret>

080a1cc4 <_ZL16sha1_update_wrapPvPKhj>:

static int sha1_update_wrap( void *ctx, const unsigned char *input,
                              size_t ilen )
{
    return( mbedtls_sha1_update_ret( (mbedtls_sha1_context *) ctx,
                                     input, ilen ) );
 80a1cc4:	f002 bb86 	b.w	80a43d4 <mbedtls_sha1_update_ret>

080a1cc8 <_ZL16sha1_starts_wrapPv>:

#if defined(MBEDTLS_SHA1_C)

static int sha1_starts_wrap( void *ctx )
{
    return( mbedtls_sha1_starts_ret( (mbedtls_sha1_context *) ctx ) );
 80a1cc8:	f001 bbb8 	b.w	80a343c <mbedtls_sha1_starts_ret>

080a1ccc <_ZL19sha224_process_wrapPvPKh>:
}

static int sha224_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha256_process( (mbedtls_sha256_context *) ctx,
                                             data ) );
 80a1ccc:	f7fe bf16 	b.w	80a0afc <mbedtls_internal_sha256_process>

080a1cd0 <_ZL17sha224_clone_wrapPvPKv>:
}

static void sha224_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
                    (const mbedtls_sha256_context *) src );
 80a1cd0:	f7fe bebe 	b.w	80a0a50 <mbedtls_sha256_clone>

080a1cd4 <_ZL15sha224_ctx_freePv>:

    return( ctx );
}

static void sha224_ctx_free( void *ctx )
{
 80a1cd4:	b510      	push	{r4, lr}
 80a1cd6:	4604      	mov	r4, r0
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
 80a1cd8:	f7fe feb0 	bl	80a0a3c <mbedtls_sha256_free>
    mbedtls_free( ctx );
 80a1cdc:	4620      	mov	r0, r4
}
 80a1cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha224_ctx_free( void *ctx )
{
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
    mbedtls_free( ctx );
 80a1ce2:	f00c b913 	b.w	80adf0c <free>

080a1ce6 <_ZL16sha224_ctx_allocv>:
{
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
}

static void *sha224_ctx_alloc( void )
{
 80a1ce6:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
 80a1ce8:	216c      	movs	r1, #108	; 0x6c
 80a1cea:	2001      	movs	r0, #1
 80a1cec:	f00d f9dc 	bl	80af0a8 <calloc>

    if( ctx != NULL )
 80a1cf0:	4604      	mov	r4, r0
 80a1cf2:	b108      	cbz	r0, 80a1cf8 <_ZL16sha224_ctx_allocv+0x12>
        mbedtls_sha256_init( (mbedtls_sha256_context *) ctx );
 80a1cf4:	f7fe fe9e 	bl	80a0a34 <mbedtls_sha256_init>

    return( ctx );
}
 80a1cf8:	4620      	mov	r0, r4
 80a1cfa:	bd10      	pop	{r4, pc}

080a1cfc <_ZL11sha224_wrapPKhjPh>:
}

static int sha224_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 1 ) );
 80a1cfc:	2301      	movs	r3, #1
 80a1cfe:	f7ff bb38 	b.w	80a1372 <mbedtls_sha256_ret>

080a1d02 <_ZL11sha256_wrapPKhjPh>:
}

static int sha256_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha256_ret( input, ilen, output, 0 ) );
 80a1d02:	2300      	movs	r3, #0
 80a1d04:	f7ff bb35 	b.w	80a1372 <mbedtls_sha256_ret>

080a1d08 <_ZL18sha224_finish_wrapPvPh>:
}

static int sha224_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha256_finish_ret( (mbedtls_sha256_context *) ctx,
                                       output ) );
 80a1d08:	f7ff ba9c 	b.w	80a1244 <mbedtls_sha256_finish_ret>

080a1d0c <_ZL18sha224_update_wrapPvPKhj>:

static int sha224_update_wrap( void *ctx, const unsigned char *input,
                                size_t ilen )
{
    return( mbedtls_sha256_update_ret( (mbedtls_sha256_context *) ctx,
                                       input, ilen ) );
 80a1d0c:	f7ff ba60 	b.w	80a11d0 <mbedtls_sha256_update_ret>

080a1d10 <_ZL18sha224_starts_wrapPv>:
 */
#if defined(MBEDTLS_SHA256_C)

static int sha224_starts_wrap( void *ctx )
{
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 1 ) );
 80a1d10:	2101      	movs	r1, #1
 80a1d12:	f7fe bea3 	b.w	80a0a5c <mbedtls_sha256_starts_ret>

080a1d16 <_ZL18sha256_starts_wrapPv>:
    sha224_process_wrap,
};

static int sha256_starts_wrap( void *ctx )
{
    return( mbedtls_sha256_starts_ret( (mbedtls_sha256_context *) ctx, 0 ) );
 80a1d16:	2100      	movs	r1, #0
 80a1d18:	f7fe bea0 	b.w	80a0a5c <mbedtls_sha256_starts_ret>

080a1d1c <_ZL19sha384_process_wrapPvPKh>:
}

static int sha384_process_wrap( void *ctx, const unsigned char *data )
{
    return( mbedtls_internal_sha512_process( (mbedtls_sha512_context *) ctx,
                                             data ) );
 80a1d1c:	f009 bec0 	b.w	80abaa0 <mbedtls_internal_sha512_process>

080a1d20 <_ZL17sha384_clone_wrapPvPKv>:
}

static void sha384_clone_wrap( void *dst, const void *src )
{
    mbedtls_sha512_clone( (mbedtls_sha512_context *) dst,
                    (const mbedtls_sha512_context *) src );
 80a1d20:	f009 be1c 	b.w	80ab95c <mbedtls_sha512_clone>

080a1d24 <_ZL15sha384_ctx_freePv>:

    return( ctx );
}

static void sha384_ctx_free( void *ctx )
{
 80a1d24:	b510      	push	{r4, lr}
 80a1d26:	4604      	mov	r4, r0
    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );
 80a1d28:	f009 fe0e 	bl	80ab948 <mbedtls_sha512_free>
    mbedtls_free( ctx );
 80a1d2c:	4620      	mov	r0, r4
}
 80a1d2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void sha384_ctx_free( void *ctx )
{
    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );
    mbedtls_free( ctx );
 80a1d32:	f00c b8eb 	b.w	80adf0c <free>

080a1d36 <_ZL16sha384_ctx_allocv>:
{
    return( mbedtls_sha512_ret( input, ilen, output, 1 ) );
}

static void *sha384_ctx_alloc( void )
{
 80a1d36:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha512_context ) );
 80a1d38:	21d8      	movs	r1, #216	; 0xd8
 80a1d3a:	2001      	movs	r0, #1
 80a1d3c:	f00d f9b4 	bl	80af0a8 <calloc>

    if( ctx != NULL )
 80a1d40:	4604      	mov	r4, r0
 80a1d42:	b108      	cbz	r0, 80a1d48 <_ZL16sha384_ctx_allocv+0x12>
        mbedtls_sha512_init( (mbedtls_sha512_context *) ctx );
 80a1d44:	f009 fdfc 	bl	80ab940 <mbedtls_sha512_init>

    return( ctx );
}
 80a1d48:	4620      	mov	r0, r4
 80a1d4a:	bd10      	pop	{r4, pc}

080a1d4c <_ZL11sha384_wrapPKhjPh>:
}

static int sha384_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha512_ret( input, ilen, output, 1 ) );
 80a1d4c:	2301      	movs	r3, #1
 80a1d4e:	f00a be62 	b.w	80aca16 <mbedtls_sha512_ret>

080a1d52 <_ZL11sha512_wrapPKhjPh>:
}

static int sha512_wrap( const unsigned char *input, size_t ilen,
                        unsigned char *output )
{
    return( mbedtls_sha512_ret( input, ilen, output, 0 ) );
 80a1d52:	2300      	movs	r3, #0
 80a1d54:	f00a be5f 	b.w	80aca16 <mbedtls_sha512_ret>

080a1d58 <_ZL18sha384_finish_wrapPvPh>:
}

static int sha384_finish_wrap( void *ctx, unsigned char *output )
{
    return( mbedtls_sha512_finish_ret( (mbedtls_sha512_context *) ctx,
                                       output ) );
 80a1d58:	f00a bd2a 	b.w	80ac7b0 <mbedtls_sha512_finish_ret>

080a1d5c <_ZL18sha384_update_wrapPvPKhj>:

static int sha384_update_wrap( void *ctx, const unsigned char *input,
                               size_t ilen )
{
    return( mbedtls_sha512_update_ret( (mbedtls_sha512_context *) ctx,
                                       input, ilen ) );
 80a1d5c:	f00a bce0 	b.w	80ac720 <mbedtls_sha512_update_ret>

080a1d60 <_ZL18sha384_starts_wrapPv>:

#if defined(MBEDTLS_SHA512_C)

static int sha384_starts_wrap( void *ctx )
{
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 1 ) );
 80a1d60:	2101      	movs	r1, #1
 80a1d62:	f009 be01 	b.w	80ab968 <mbedtls_sha512_starts_ret>

080a1d66 <_ZL18sha512_starts_wrapPv>:
    sha384_process_wrap,
};

static int sha512_starts_wrap( void *ctx )
{
    return( mbedtls_sha512_starts_ret( (mbedtls_sha512_context *) ctx, 0 ) );
 80a1d66:	2100      	movs	r1, #0
 80a1d68:	f009 bdfe 	b.w	80ab968 <mbedtls_sha512_starts_ret>

080a1d6c <_ZL15mbedtls_zeroizePvj>:
#endif

#if !defined(MBEDTLS_RSA_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 80a1d6c:	4401      	add	r1, r0
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 80a1d6e:	2300      	movs	r3, #0
 80a1d70:	4288      	cmp	r0, r1
 80a1d72:	d002      	beq.n	80a1d7a <_ZL15mbedtls_zeroizePvj+0xe>
 80a1d74:	7003      	strb	r3, [r0, #0]
 80a1d76:	3001      	adds	r0, #1
 80a1d78:	e7fa      	b.n	80a1d70 <_ZL15mbedtls_zeroizePvj+0x4>
 80a1d7a:	4770      	bx	lr

080a1d7c <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>:
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
 80a1d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1d80:	b095      	sub	sp, #84	; 0x54
 80a1d82:	9d1e      	ldr	r5, [sp, #120]	; 0x78
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 80a1d84:	ae04      	add	r6, sp, #16
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
 80a1d86:	4607      	mov	r7, r0
 80a1d88:	460c      	mov	r4, r1
 80a1d8a:	4691      	mov	r9, r2
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 80a1d8c:	2100      	movs	r1, #0
 80a1d8e:	2240      	movs	r2, #64	; 0x40
 80a1d90:	4630      	mov	r0, r6
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static int mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
 80a1d92:	9301      	str	r3, [sp, #4]
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
    memset( counter, 0, 4 );
 80a1d94:	f10d 0850 	add.w	r8, sp, #80	; 0x50
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 80a1d98:	f00d f9d1 	bl	80af13e <memset>
    memset( counter, 0, 4 );
 80a1d9c:	2300      	movs	r3, #0

    hlen = mbedtls_md_get_size( md_ctx->md_info );
 80a1d9e:	6828      	ldr	r0, [r5, #0]
    unsigned int hlen;
    size_t i, use_len;
    int ret = 0;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
    memset( counter, 0, 4 );
 80a1da0:	f848 3d44 	str.w	r3, [r8, #-68]!

    hlen = mbedtls_md_get_size( md_ctx->md_info );
 80a1da4:	f004 f8f0 	bl	80a5f88 <mbedtls_md_get_size>
 80a1da8:	4682      	mov	sl, r0

    /* Generate and apply dbMask */
    p = dst;

    while( dlen > 0 )
 80a1daa:	b37c      	cbz	r4, 80a1e0c <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x90>
 80a1dac:	4554      	cmp	r4, sl
    {
        use_len = hlen;
        if( dlen < hlen )
            use_len = dlen;

        if( ( ret = mbedtls_md_starts( md_ctx ) ) != 0 )
 80a1dae:	4628      	mov	r0, r5
 80a1db0:	46a3      	mov	fp, r4
 80a1db2:	bf28      	it	cs
 80a1db4:	46d3      	movcs	fp, sl
 80a1db6:	f004 f801 	bl	80a5dbc <mbedtls_md_starts>
 80a1dba:	4602      	mov	r2, r0
 80a1dbc:	bb38      	cbnz	r0, 80a1e0e <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
            goto exit;
        if( ( ret = mbedtls_md_update( md_ctx, src, slen ) ) != 0 )
 80a1dbe:	9a01      	ldr	r2, [sp, #4]
 80a1dc0:	4649      	mov	r1, r9
 80a1dc2:	4628      	mov	r0, r5
 80a1dc4:	f004 f804 	bl	80a5dd0 <mbedtls_md_update>
 80a1dc8:	4602      	mov	r2, r0
 80a1dca:	bb00      	cbnz	r0, 80a1e0e <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
            goto exit;
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
 80a1dcc:	2204      	movs	r2, #4
 80a1dce:	4641      	mov	r1, r8
 80a1dd0:	4628      	mov	r0, r5
 80a1dd2:	f003 fffd 	bl	80a5dd0 <mbedtls_md_update>
 80a1dd6:	4602      	mov	r2, r0
 80a1dd8:	b9c8      	cbnz	r0, 80a1e0e <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
            goto exit;
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
 80a1dda:	4631      	mov	r1, r6
 80a1ddc:	4628      	mov	r0, r5
 80a1dde:	f004 f801 	bl	80a5de4 <mbedtls_md_finish>
 80a1de2:	4602      	mov	r2, r0
 80a1de4:	b998      	cbnz	r0, 80a1e0e <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x92>
 80a1de6:	463b      	mov	r3, r7
            goto exit;

        for( i = 0; i < use_len; ++i )
 80a1de8:	455a      	cmp	r2, fp
 80a1dea:	d007      	beq.n	80a1dfc <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x80>
            *p++ ^= mask[i];
 80a1dec:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a1df0:	5cb1      	ldrb	r1, [r6, r2]
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
            goto exit;
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
            goto exit;

        for( i = 0; i < use_len; ++i )
 80a1df2:	3201      	adds	r2, #1
            *p++ ^= mask[i];
 80a1df4:	4041      	eors	r1, r0
 80a1df6:	f803 1c01 	strb.w	r1, [r3, #-1]
        if( ( ret = mbedtls_md_update( md_ctx, counter, 4 ) ) != 0 )
            goto exit;
        if( ( ret = mbedtls_md_finish( md_ctx, mask ) ) != 0 )
            goto exit;

        for( i = 0; i < use_len; ++i )
 80a1dfa:	e7f5      	b.n	80a1de8 <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x6c>
            *p++ ^= mask[i];

        counter[3]++;
 80a1dfc:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80a1e00:	4417      	add	r7, r2
 80a1e02:	3301      	adds	r3, #1
 80a1e04:	f88d 300f 	strb.w	r3, [sp, #15]

        dlen -= use_len;
 80a1e08:	1aa4      	subs	r4, r4, r2
    hlen = mbedtls_md_get_size( md_ctx->md_info );

    /* Generate and apply dbMask */
    p = dst;

    while( dlen > 0 )
 80a1e0a:	e7ce      	b.n	80a1daa <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t+0x2e>
 80a1e0c:	4622      	mov	r2, r4

        dlen -= use_len;
    }

exit:
    mbedtls_zeroize( mask, sizeof( mask ) );
 80a1e0e:	4630      	mov	r0, r6
 80a1e10:	2140      	movs	r1, #64	; 0x40
 80a1e12:	f7ff ffab 	bl	80a1d6c <_ZL15mbedtls_zeroizePvj>

    return( ret );
}
 80a1e16:	4610      	mov	r0, r2
 80a1e18:	b015      	add	sp, #84	; 0x54
 80a1e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080a1e20 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>:
static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
                                        unsigned int hashlen,
                                        const unsigned char *hash,
                                        size_t dst_len,
                                        unsigned char *dst )
{
 80a1e20:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a1e24:	461d      	mov	r5, r3
    size_t oid_size  = 0;
 80a1e26:	2300      	movs	r3, #0
static int rsa_rsassa_pkcs1_v15_encode( mbedtls_md_type_t md_alg,
                                        unsigned int hashlen,
                                        const unsigned char *hash,
                                        size_t dst_len,
                                        unsigned char *dst )
{
 80a1e28:	460e      	mov	r6, r1
 80a1e2a:	4691      	mov	r9, r2
 80a1e2c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    size_t oid_size  = 0;
 80a1e30:	9300      	str	r3, [sp, #0]
    size_t nb_pad    = dst_len;
    unsigned char *p = dst;
    const char *oid  = NULL;
 80a1e32:	9301      	str	r3, [sp, #4]

    /* Are we signing hashed or raw data? */
    if( md_alg != MBEDTLS_MD_NONE )
 80a1e34:	4604      	mov	r4, r0
 80a1e36:	b328      	cbz	r0, 80a1e84 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x64>
    {
        const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
 80a1e38:	f003 ff6c 	bl	80a5d14 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 80a1e3c:	4606      	mov	r6, r0
 80a1e3e:	2800      	cmp	r0, #0
 80a1e40:	d063      	beq.n	80a1f0a <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
 80a1e42:	4620      	mov	r0, r4
 80a1e44:	466a      	mov	r2, sp
 80a1e46:	a901      	add	r1, sp, #4
 80a1e48:	f001 fa9a 	bl	80a3380 <mbedtls_oid_get_oid_by_md>
 80a1e4c:	4604      	mov	r4, r0
 80a1e4e:	2800      	cmp	r0, #0
 80a1e50:	d15b      	bne.n	80a1f0a <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
 80a1e52:	4630      	mov	r0, r6
 80a1e54:	f004 f898 	bl	80a5f88 <mbedtls_md_get_size>

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
 80a1e58:	9f00      	ldr	r7, [sp, #0]
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
 80a1e5a:	4606      	mov	r6, r0

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
 80a1e5c:	4407      	add	r7, r0
 80a1e5e:	f107 0308 	add.w	r3, r7, #8
 80a1e62:	2b7f      	cmp	r3, #127	; 0x7f
 80a1e64:	d851      	bhi.n	80a1f0a <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
 80a1e66:	f110 020a 	adds.w	r2, r0, #10
 80a1e6a:	d24e      	bcs.n	80a1f0a <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            10 + hashlen            <  hashlen      ||
            10 + hashlen + oid_size <  10 + hashlen )
 80a1e6c:	f107 030a 	add.w	r3, r7, #10
        hashlen = mbedtls_md_get_size( md_info );

        /* Double-check that 8 + hashlen + oid_size can be used as a
         * 1-byte ASN.1 length encoding and that there's no overflow. */
        if( 8 + hashlen + oid_size  >= 0x80         ||
            10 + hashlen            <  hashlen      ||
 80a1e70:	429a      	cmp	r2, r3
 80a1e72:	d84a      	bhi.n	80a1f0a <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
         *   (Insist on 1-byte length encodings to protect against variants of
         *    Bleichenbacher's forgery attack against lax PKCS#1v1.5 verification)
         * - Need hashlen bytes for hash
         * - Need oid_size bytes for hash alg OID.
         */
        if( nb_pad < 10 + hashlen + oid_size )
 80a1e74:	429d      	cmp	r5, r3
 80a1e76:	d348      	bcc.n	80a1f0a <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
        nb_pad -= 10 + hashlen + oid_size;
 80a1e78:	f1a5 030a 	sub.w	r3, r5, #10
 80a1e7c:	1bdf      	subs	r7, r3, r7
        nb_pad -= hashlen;
    }

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
 80a1e7e:	2f0a      	cmp	r7, #10
 80a1e80:	d806      	bhi.n	80a1e90 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x70>
 80a1e82:	e042      	b.n	80a1f0a <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
        nb_pad -= 10 + hashlen + oid_size;
    }
    else
    {
        if( nb_pad < hashlen )
 80a1e84:	428d      	cmp	r5, r1
 80a1e86:	d340      	bcc.n	80a1f0a <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        nb_pad -= hashlen;
 80a1e88:	1a6d      	subs	r5, r5, r1
    }

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
 80a1e8a:	2d0a      	cmp	r5, #10
 80a1e8c:	d93d      	bls.n	80a1f0a <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xea>
 80a1e8e:	e03e      	b.n	80a1f0e <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0xee>

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 80a1e90:	46c2      	mov	sl, r8

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    nb_pad -= 3;
 80a1e92:	3f03      	subs	r7, #3

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 80a1e94:	f80a 4b02 	strb.w	r4, [sl], #2
    *p++ = MBEDTLS_RSA_SIGN;
 80a1e98:	2301      	movs	r3, #1
    memset( p, 0xFF, nb_pad );
 80a1e9a:	463a      	mov	r2, r7
    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
    *p++ = MBEDTLS_RSA_SIGN;
 80a1e9c:	f888 3001 	strb.w	r3, [r8, #1]
    memset( p, 0xFF, nb_pad );
 80a1ea0:	21ff      	movs	r1, #255	; 0xff
 80a1ea2:	4650      	mov	r0, sl
 80a1ea4:	f00d f94b 	bl	80af13e <memset>
    p += nb_pad;
 80a1ea8:	eb0a 0307 	add.w	r3, sl, r7
     * Schematic:
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 80a1eac:	2130      	movs	r1, #48	; 0x30
    /* Write signature header and padding */
    *p++ = 0;
    *p++ = MBEDTLS_RSA_SIGN;
    memset( p, 0xFF, nb_pad );
    p += nb_pad;
    *p++ = 0;
 80a1eae:	f80a 4007 	strb.w	r4, [sl, r7]
     * Schematic:
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 80a1eb2:	7059      	strb	r1, [r3, #1]
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
 80a1eb4:	9f00      	ldr	r7, [sp, #0]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 80a1eb6:	70d9      	strb	r1, [r3, #3]
     * TAG-SEQ + LEN [ TAG-SEQ + LEN [ TAG-OID  + LEN [ OID  ]
     *                                 TAG-NULL + LEN [ NULL ] ]
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
 80a1eb8:	f107 0208 	add.w	r2, r7, #8
 80a1ebc:	4432      	add	r2, r6
 80a1ebe:	709a      	strb	r2, [r3, #2]
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x04 + oid_size );
 80a1ec0:	b2fa      	uxtb	r2, r7
 80a1ec2:	1d11      	adds	r1, r2, #4
    *p++ = MBEDTLS_ASN1_OID;
    *p++ = (unsigned char) oid_size;
 80a1ec4:	f103 0a07 	add.w	sl, r3, #7
     *                 TAG-OCTET + LEN [ HASH ] ]
     */
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x08 + oid_size + hashlen );
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x04 + oid_size );
 80a1ec8:	7119      	strb	r1, [r3, #4]
    *p++ = MBEDTLS_ASN1_OID;
 80a1eca:	2106      	movs	r1, #6
 80a1ecc:	7159      	strb	r1, [r3, #5]
    *p++ = (unsigned char) oid_size;
 80a1ece:	719a      	strb	r2, [r3, #6]
    memcpy( p, oid, oid_size );
 80a1ed0:	9901      	ldr	r1, [sp, #4]
 80a1ed2:	463a      	mov	r2, r7
 80a1ed4:	4650      	mov	r0, sl
 80a1ed6:	f00d f90c 	bl	80af0f2 <memcpy>
    p += oid_size;
    *p++ = MBEDTLS_ASN1_NULL;
 80a1eda:	2205      	movs	r2, #5
    *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
    *p++ = (unsigned char)( 0x04 + oid_size );
    *p++ = MBEDTLS_ASN1_OID;
    *p++ = (unsigned char) oid_size;
    memcpy( p, oid, oid_size );
    p += oid_size;
 80a1edc:	eb0a 0307 	add.w	r3, sl, r7
    *p++ = MBEDTLS_ASN1_NULL;
 80a1ee0:	f80a 2007 	strb.w	r2, [sl, r7]
    *p++ = 0x00;
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
 80a1ee4:	2204      	movs	r2, #4
    *p++ = (unsigned char) hashlen;
 80a1ee6:	189f      	adds	r7, r3, r2
    *p++ = (unsigned char) oid_size;
    memcpy( p, oid, oid_size );
    p += oid_size;
    *p++ = MBEDTLS_ASN1_NULL;
    *p++ = 0x00;
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
 80a1ee8:	709a      	strb	r2, [r3, #2]
    *p++ = (unsigned char) hashlen;
 80a1eea:	70de      	strb	r6, [r3, #3]
    *p++ = MBEDTLS_ASN1_OID;
    *p++ = (unsigned char) oid_size;
    memcpy( p, oid, oid_size );
    p += oid_size;
    *p++ = MBEDTLS_ASN1_NULL;
    *p++ = 0x00;
 80a1eec:	705c      	strb	r4, [r3, #1]
    *p++ = MBEDTLS_ASN1_OCTET_STRING;
    *p++ = (unsigned char) hashlen;
    memcpy( p, hash, hashlen );
 80a1eee:	4632      	mov	r2, r6
 80a1ef0:	4649      	mov	r1, r9
 80a1ef2:	4638      	mov	r0, r7
 80a1ef4:	f00d f8fd 	bl	80af0f2 <memcpy>
    p += hashlen;

    /* Just a sanity-check, should be automatic
     * after the initial bounds check. */
    if( p != dst + dst_len )
 80a1ef8:	443e      	add	r6, r7
 80a1efa:	eb08 0305 	add.w	r3, r8, r5
 80a1efe:	429e      	cmp	r6, r3
 80a1f00:	d019      	beq.n	80a1f36 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x116>
    {
        mbedtls_zeroize( dst, dst_len );
 80a1f02:	4629      	mov	r1, r5
 80a1f04:	4640      	mov	r0, r8
 80a1f06:	f7ff ff31 	bl	80a1d6c <_ZL15mbedtls_zeroizePvj>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80a1f0a:	4c0d      	ldr	r4, [pc, #52]	; (80a1f40 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x120>)
 80a1f0c:	e013      	b.n	80a1f36 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh+0x116>

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 80a1f0e:	4643      	mov	r3, r8

    /* Need space for signature header and padding delimiter (3 bytes),
     * and 8 bytes for the minimal padding */
    if( nb_pad < 3 + 8 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    nb_pad -= 3;
 80a1f10:	1eef      	subs	r7, r5, #3

    /* Now nb_pad is the amount of memory to be filled
     * with padding, and at least 8 bytes long. */

    /* Write signature header and padding */
    *p++ = 0;
 80a1f12:	f803 0b02 	strb.w	r0, [r3], #2
    *p++ = MBEDTLS_RSA_SIGN;
 80a1f16:	2201      	movs	r2, #1
 80a1f18:	f888 2001 	strb.w	r2, [r8, #1]
    memset( p, 0xFF, nb_pad );
 80a1f1c:	21ff      	movs	r1, #255	; 0xff
 80a1f1e:	463a      	mov	r2, r7
 80a1f20:	4618      	mov	r0, r3
 80a1f22:	f00d f90c 	bl	80af13e <memset>
 80a1f26:	4603      	mov	r3, r0
    p += nb_pad;
    *p++ = 0;
 80a1f28:	55c4      	strb	r4, [r0, r7]

    /* Are we signing raw data? */
    if( md_alg == MBEDTLS_MD_NONE )
    {
        memcpy( p, hash, hashlen );
 80a1f2a:	1ea8      	subs	r0, r5, #2
 80a1f2c:	4632      	mov	r2, r6
 80a1f2e:	4649      	mov	r1, r9
 80a1f30:	4418      	add	r0, r3
 80a1f32:	f00d f8de 	bl	80af0f2 <memcpy>
        mbedtls_zeroize( dst, dst_len );
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }

    return( 0 );
}
 80a1f36:	4620      	mov	r0, r4
 80a1f38:	b002      	add	sp, #8
 80a1f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1f3e:	bf00      	nop
 80a1f40:	ffffbf80 	.word	0xffffbf80

080a1f44 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>:
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 80a1f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 80a1f46:	f100 0508 	add.w	r5, r0, #8
 80a1f4a:	6847      	ldr	r7, [r0, #4]
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 80a1f4c:	4604      	mov	r4, r0
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 80a1f4e:	4628      	mov	r0, r5
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
 80a1f50:	460e      	mov	r6, r1
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
 80a1f52:	f007 fa64 	bl	80a941e <mbedtls_mpi_size>
 80a1f56:	4287      	cmp	r7, r0
 80a1f58:	d117      	bne.n	80a1f8a <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
 80a1f5a:	6863      	ldr	r3, [r4, #4]
 80a1f5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80a1f60:	d813      	bhi.n	80a1f8a <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 80a1f62:	2100      	movs	r1, #0
 80a1f64:	4628      	mov	r0, r5
 80a1f66:	f007 fc2b 	bl	80a97c0 <mbedtls_mpi_cmp_int>
 80a1f6a:	2800      	cmp	r0, #0
 80a1f6c:	dd0d      	ble.n	80a1f8a <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
 80a1f6e:	2100      	movs	r1, #0
 80a1f70:	4628      	mov	r0, r5
 80a1f72:	f007 fa0a 	bl	80a938a <mbedtls_mpi_get_bit>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
 80a1f76:	b140      	cbz	r0, 80a1f8a <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
 80a1f78:	b1ee      	cbz	r6, 80a1fb6 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x72>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 80a1f7a:	f104 052c 	add.w	r5, r4, #44	; 0x2c
 80a1f7e:	2100      	movs	r1, #0
 80a1f80:	4628      	mov	r0, r5
 80a1f82:	f007 fc1d 	bl	80a97c0 <mbedtls_mpi_cmp_int>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
 80a1f86:	2800      	cmp	r0, #0
 80a1f88:	dc01      	bgt.n	80a1f8e <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x4a>
    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80a1f8a:	481a      	ldr	r0, [pc, #104]	; (80a1ff4 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0xb0>)
 80a1f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 80a1f8e:	2100      	movs	r1, #0
 80a1f90:	4628      	mov	r0, r5
 80a1f92:	f007 f9fa 	bl	80a938a <mbedtls_mpi_get_bit>
#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
 80a1f96:	2800      	cmp	r0, #0
 80a1f98:	d0f7      	beq.n	80a1f8a <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 80a1f9a:	f104 0538 	add.w	r5, r4, #56	; 0x38
 80a1f9e:	2100      	movs	r1, #0
 80a1fa0:	4628      	mov	r0, r5
 80a1fa2:	f007 fc0d 	bl	80a97c0 <mbedtls_mpi_cmp_int>
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
 80a1fa6:	2800      	cmp	r0, #0
 80a1fa8:	ddef      	ble.n	80a1f8a <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
 80a1faa:	2100      	movs	r1, #0
 80a1fac:	4628      	mov	r0, r5
 80a1fae:	f007 f9ec 	bl	80a938a <mbedtls_mpi_get_bit>
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
 80a1fb2:	2800      	cmp	r0, #0
 80a1fb4:	d0e9      	beq.n	80a1f8a <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
 80a1fb6:	2100      	movs	r1, #0
 80a1fb8:	f104 0014 	add.w	r0, r4, #20
 80a1fbc:	f007 fc00 	bl	80a97c0 <mbedtls_mpi_cmp_int>
 80a1fc0:	2800      	cmp	r0, #0
 80a1fc2:	dde2      	ble.n	80a1f8a <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
    /* For private key operations, use D or DP & DQ
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
 80a1fc4:	b1a6      	cbz	r6, 80a1ff0 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0xac>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 80a1fc6:	2100      	movs	r1, #0
 80a1fc8:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80a1fcc:	f007 fbf8 	bl	80a97c0 <mbedtls_mpi_cmp_int>
    /* For private key operations, use D or DP & DQ
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
 80a1fd0:	2800      	cmp	r0, #0
 80a1fd2:	ddda      	ble.n	80a1f8a <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
 80a1fd4:	2100      	movs	r1, #0
 80a1fd6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80a1fda:	f007 fbf1 	bl	80a97c0 <mbedtls_mpi_cmp_int>
     * as (unblinded) exponents. */
    if( is_priv && mbedtls_mpi_cmp_int( &ctx->D, 0 ) <= 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
#else
    if( is_priv &&
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
 80a1fde:	2800      	cmp	r0, #0
 80a1fe0:	ddd3      	ble.n	80a1f8a <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
 80a1fe2:	2100      	movs	r1, #0
 80a1fe4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80a1fe8:	f007 fbea 	bl	80a97c0 <mbedtls_mpi_cmp_int>
#endif

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
 80a1fec:	2800      	cmp	r0, #0
 80a1fee:	ddcc      	ble.n	80a1f8a <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0+0x46>
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }
#endif

    return( 0 );
 80a1ff0:	2000      	movs	r0, #0
 80a1ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1ff4:	ffffbf80 	.word	0xffffbf80

080a1ff8 <mbedtls_rsa_import_raw>:
                            unsigned char const *N, size_t N_len,
                            unsigned char const *P, size_t P_len,
                            unsigned char const *Q, size_t Q_len,
                            unsigned char const *D, size_t D_len,
                            unsigned char const *E, size_t E_len )
{
 80a1ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a1ffc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80a1ffe:	4604      	mov	r4, r0
 80a2000:	4698      	mov	r8, r3
 80a2002:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80a2004:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    int ret = 0;

    if( N != NULL )
 80a2006:	b149      	cbz	r1, 80a201c <mbedtls_rsa_import_raw+0x24>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
 80a2008:	f100 0908 	add.w	r9, r0, #8
 80a200c:	4648      	mov	r0, r9
 80a200e:	f007 fa0c 	bl	80a942a <mbedtls_mpi_read_binary>
 80a2012:	bb50      	cbnz	r0, 80a206a <mbedtls_rsa_import_raw+0x72>
        ctx->len = mbedtls_mpi_size( &ctx->N );
 80a2014:	4648      	mov	r0, r9
 80a2016:	f007 fa02 	bl	80a941e <mbedtls_mpi_size>
 80a201a:	6060      	str	r0, [r4, #4]
    }

    if( P != NULL )
 80a201c:	f1b8 0f00 	cmp.w	r8, #0
 80a2020:	d101      	bne.n	80a2026 <mbedtls_rsa_import_raw+0x2e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );

    if( Q != NULL )
 80a2022:	b947      	cbnz	r7, 80a2036 <mbedtls_rsa_import_raw+0x3e>
 80a2024:	e00e      	b.n	80a2044 <mbedtls_rsa_import_raw+0x4c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->N, N, N_len ) );
        ctx->len = mbedtls_mpi_size( &ctx->N );
    }

    if( P != NULL )
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->P, P, P_len ) );
 80a2026:	9a08      	ldr	r2, [sp, #32]
 80a2028:	4641      	mov	r1, r8
 80a202a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80a202e:	f007 f9fc 	bl	80a942a <mbedtls_mpi_read_binary>
 80a2032:	b9d0      	cbnz	r0, 80a206a <mbedtls_rsa_import_raw+0x72>
 80a2034:	e7f5      	b.n	80a2022 <mbedtls_rsa_import_raw+0x2a>

    if( Q != NULL )
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->Q, Q, Q_len ) );
 80a2036:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a2038:	4639      	mov	r1, r7
 80a203a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a203e:	f007 f9f4 	bl	80a942a <mbedtls_mpi_read_binary>
 80a2042:	b990      	cbnz	r0, 80a206a <mbedtls_rsa_import_raw+0x72>

    if( D != NULL )
 80a2044:	b136      	cbz	r6, 80a2054 <mbedtls_rsa_import_raw+0x5c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->D, D, D_len ) );
 80a2046:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a2048:	4631      	mov	r1, r6
 80a204a:	f104 0020 	add.w	r0, r4, #32
 80a204e:	f007 f9ec 	bl	80a942a <mbedtls_mpi_read_binary>
 80a2052:	b950      	cbnz	r0, 80a206a <mbedtls_rsa_import_raw+0x72>

    if( E != NULL )
 80a2054:	b135      	cbz	r5, 80a2064 <mbedtls_rsa_import_raw+0x6c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );
 80a2056:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80a2058:	4629      	mov	r1, r5
 80a205a:	f104 0014 	add.w	r0, r4, #20
 80a205e:	f007 f9e4 	bl	80a942a <mbedtls_mpi_read_binary>

cleanup:

    if( ret != 0 )
 80a2062:	b910      	cbnz	r0, 80a206a <mbedtls_rsa_import_raw+0x72>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );

    return( 0 );
 80a2064:	2000      	movs	r0, #0
 80a2066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &ctx->E, E, E_len ) );

cleanup:

    if( ret != 0 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 80a206a:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080

    return( 0 );
}
 80a206e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080a2074 <mbedtls_rsa_complete>:

    return( 0 );
}

int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
 80a2074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 80a2078:	f100 0b08 	add.w	fp, r0, #8

    return( 0 );
}

int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
 80a207c:	b087      	sub	sp, #28
 80a207e:	4607      	mov	r7, r0
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 80a2080:	2100      	movs	r1, #0
 80a2082:	4658      	mov	r0, fp
 80a2084:	f007 fb9c 	bl	80a97c0 <mbedtls_mpi_cmp_int>
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 80a2088:	f107 092c 	add.w	r9, r7, #44	; 0x2c
 80a208c:	2100      	movs	r1, #0

int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
 80a208e:	4680      	mov	r8, r0
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 80a2090:	4648      	mov	r0, r9
 80a2092:	f007 fb95 	bl	80a97c0 <mbedtls_mpi_cmp_int>
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 80a2096:	f107 0a38 	add.w	sl, r7, #56	; 0x38
int mbedtls_rsa_complete( mbedtls_rsa_context *ctx )
{
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
 80a209a:	9005      	str	r0, [sp, #20]
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 80a209c:	2100      	movs	r1, #0
 80a209e:	4650      	mov	r0, sl
 80a20a0:	f007 fb8e 	bl	80a97c0 <mbedtls_mpi_cmp_int>
    const int have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 80a20a4:	f107 0320 	add.w	r3, r7, #32
 80a20a8:	2100      	movs	r1, #0
{
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
 80a20aa:	4605      	mov	r5, r0
    const int have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 80a20ac:	4618      	mov	r0, r3
 80a20ae:	9302      	str	r3, [sp, #8]
 80a20b0:	f007 fb86 	bl	80a97c0 <mbedtls_mpi_cmp_int>
    const int have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
 80a20b4:	f107 0314 	add.w	r3, r7, #20
    int ret = 0;

    const int have_N = ( mbedtls_mpi_cmp_int( &ctx->N, 0 ) != 0 );
    const int have_P = ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) != 0 );
    const int have_Q = ( mbedtls_mpi_cmp_int( &ctx->Q, 0 ) != 0 );
    const int have_D = ( mbedtls_mpi_cmp_int( &ctx->D, 0 ) != 0 );
 80a20b8:	9004      	str	r0, [sp, #16]
    const int have_E = ( mbedtls_mpi_cmp_int( &ctx->E, 0 ) != 0 );
 80a20ba:	2100      	movs	r1, #0
 80a20bc:	4618      	mov	r0, r3
 80a20be:	9303      	str	r3, [sp, #12]
 80a20c0:	f007 fb7e 	bl	80a97c0 <mbedtls_mpi_cmp_int>
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 80a20c4:	9b05      	ldr	r3, [sp, #20]
 80a20c6:	9a04      	ldr	r2, [sp, #16]
 80a20c8:	b14b      	cbz	r3, 80a20de <mbedtls_rsa_complete+0x6a>
 80a20ca:	b125      	cbz	r5, 80a20d6 <mbedtls_rsa_complete+0x62>
 80a20cc:	b12a      	cbz	r2, 80a20da <mbedtls_rsa_complete+0x66>
 80a20ce:	1c06      	adds	r6, r0, #0
 80a20d0:	bf18      	it	ne
 80a20d2:	2601      	movne	r6, #1
 80a20d4:	e013      	b.n	80a20fe <mbedtls_rsa_complete+0x8a>
 80a20d6:	462e      	mov	r6, r5
 80a20d8:	e011      	b.n	80a20fe <mbedtls_rsa_complete+0x8a>
 80a20da:	4616      	mov	r6, r2
 80a20dc:	e00f      	b.n	80a20fe <mbedtls_rsa_complete+0x8a>
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 80a20de:	f1b8 0f00 	cmp.w	r8, #0
 80a20e2:	d103      	bne.n	80a20ec <mbedtls_rsa_complete+0x78>
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 80a20e4:	4644      	mov	r4, r8
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 80a20e6:	4646      	mov	r6, r8
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
 80a20e8:	2200      	movs	r2, #0
 80a20ea:	e024      	b.n	80a2136 <mbedtls_rsa_complete+0xc2>
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 80a20ec:	b9cd      	cbnz	r5, 80a2122 <mbedtls_rsa_complete+0xae>
 80a20ee:	b11a      	cbz	r2, 80a20f8 <mbedtls_rsa_complete+0x84>
 80a20f0:	b9f0      	cbnz	r0, 80a2130 <mbedtls_rsa_complete+0xbc>
 80a20f2:	4606      	mov	r6, r0
 80a20f4:	4604      	mov	r4, r0
 80a20f6:	e00e      	b.n	80a2116 <mbedtls_rsa_complete+0xa2>
 80a20f8:	462e      	mov	r6, r5
 80a20fa:	462c      	mov	r4, r5
 80a20fc:	e00d      	b.n	80a211a <mbedtls_rsa_complete+0xa6>
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 80a20fe:	b1ad      	cbz	r5, 80a212c <mbedtls_rsa_complete+0xb8>
 80a2100:	b992      	cbnz	r2, 80a2128 <mbedtls_rsa_complete+0xb4>
 80a2102:	1c04      	adds	r4, r0, #0
 80a2104:	bf18      	it	ne
 80a2106:	2401      	movne	r4, #1
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;
 80a2108:	f1b8 0f00 	cmp.w	r8, #0
 80a210c:	d0ec      	beq.n	80a20e8 <mbedtls_rsa_complete+0x74>
 80a210e:	2b00      	cmp	r3, #0
 80a2110:	d1ea      	bne.n	80a20e8 <mbedtls_rsa_complete+0x74>
 80a2112:	2d00      	cmp	r5, #0
 80a2114:	d1e8      	bne.n	80a20e8 <mbedtls_rsa_complete+0x74>
 80a2116:	2a00      	cmp	r2, #0
 80a2118:	d1e6      	bne.n	80a20e8 <mbedtls_rsa_complete+0x74>
 80a211a:	2800      	cmp	r0, #0
 80a211c:	d0e4      	beq.n	80a20e8 <mbedtls_rsa_complete+0x74>
 80a211e:	2201      	movs	r2, #1
 80a2120:	e009      	b.n	80a2136 <mbedtls_rsa_complete+0xc2>
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 80a2122:	461c      	mov	r4, r3
     * (1) P, Q missing.
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
 80a2124:	461e      	mov	r6, r3
 80a2126:	e7df      	b.n	80a20e8 <mbedtls_rsa_complete+0x74>
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 80a2128:	2400      	movs	r4, #0
 80a212a:	e7ed      	b.n	80a2108 <mbedtls_rsa_complete+0x94>
 80a212c:	462c      	mov	r4, r5
 80a212e:	e7db      	b.n	80a20e8 <mbedtls_rsa_complete+0x74>
     * (2) D and potentially N missing.
     *
     */

    const int n_missing  =              have_P &&  have_Q &&  have_D && have_E;
    const int pq_missing =   have_N && !have_P && !have_Q &&  have_D && have_E;
 80a2130:	2601      	movs	r6, #1
    const int d_missing  =              have_P &&  have_Q && !have_D && have_E;
 80a2132:	462c      	mov	r4, r5
 80a2134:	e002      	b.n	80a213c <mbedtls_rsa_complete+0xc8>
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;

    /* These three alternatives are mutually exclusive */
    const int is_priv = n_missing || pq_missing || d_missing;
 80a2136:	2e00      	cmp	r6, #0
 80a2138:	d03d      	beq.n	80a21b6 <mbedtls_rsa_complete+0x142>
 80a213a:	2600      	movs	r6, #0
 80a213c:	9404      	str	r4, [sp, #16]
 80a213e:	2401      	movs	r4, #1

    /*
     * Step 1: Deduce N if P, Q are provided.
     */

    if( !have_N && have_P && have_Q )
 80a2140:	f1b8 0f00 	cmp.w	r8, #0
 80a2144:	d10b      	bne.n	80a215e <mbedtls_rsa_complete+0xea>
 80a2146:	b153      	cbz	r3, 80a215e <mbedtls_rsa_complete+0xea>
 80a2148:	b14d      	cbz	r5, 80a215e <mbedtls_rsa_complete+0xea>
    {
        if( ( ret = mbedtls_mpi_mul_mpi( &ctx->N, &ctx->P,
 80a214a:	4652      	mov	r2, sl
 80a214c:	4649      	mov	r1, r9
 80a214e:	4658      	mov	r0, fp
 80a2150:	f007 fc55 	bl	80a99fe <mbedtls_mpi_mul_mpi>
 80a2154:	bb28      	cbnz	r0, 80a21a2 <mbedtls_rsa_complete+0x12e>
                                         &ctx->Q ) ) != 0 )
        {
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
        }

        ctx->len = mbedtls_mpi_size( &ctx->N );
 80a2156:	4658      	mov	r0, fp
 80a2158:	f007 f961 	bl	80a941e <mbedtls_mpi_size>
 80a215c:	6078      	str	r0, [r7, #4]

    /*
     * Step 2: Deduce and verify all remaining core parameters.
     */

    if( pq_missing )
 80a215e:	b146      	cbz	r6, 80a2172 <mbedtls_rsa_complete+0xfe>
    {
        ret = mbedtls_rsa_deduce_primes( &ctx->N, &ctx->E, &ctx->D,
                                         &ctx->P, &ctx->Q );
 80a2160:	f8cd a000 	str.w	sl, [sp]
 80a2164:	464b      	mov	r3, r9
 80a2166:	9a02      	ldr	r2, [sp, #8]
 80a2168:	9903      	ldr	r1, [sp, #12]
 80a216a:	4658      	mov	r0, fp
 80a216c:	f00a fd24 	bl	80acbb8 <mbedtls_rsa_deduce_primes>
 80a2170:	e007      	b.n	80a2182 <mbedtls_rsa_complete+0x10e>
        if( ret != 0 )
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );

    }
    else if( d_missing )
 80a2172:	9b04      	ldr	r3, [sp, #16]
 80a2174:	b133      	cbz	r3, 80a2184 <mbedtls_rsa_complete+0x110>
    {
        if( ( ret = mbedtls_rsa_deduce_private_exponent( &ctx->P,
 80a2176:	9b02      	ldr	r3, [sp, #8]
 80a2178:	9a03      	ldr	r2, [sp, #12]
 80a217a:	4651      	mov	r1, sl
 80a217c:	4648      	mov	r0, r9
 80a217e:	f00a fe17 	bl	80acdb0 <mbedtls_rsa_deduce_private_exponent>
 80a2182:	b970      	cbnz	r0, 80a21a2 <mbedtls_rsa_complete+0x12e>
     * Step 3: Deduce all additional parameters specific
     *         to our current RSA implementation.
     */

#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv )
 80a2184:	b184      	cbz	r4, 80a21a8 <mbedtls_rsa_complete+0x134>
    {
        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
 80a2186:	f107 035c 	add.w	r3, r7, #92	; 0x5c
                                      &ctx->DP, &ctx->DQ, &ctx->QP );
 80a218a:	9301      	str	r3, [sp, #4]
     */

#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv )
    {
        ret = mbedtls_rsa_deduce_crt( &ctx->P,  &ctx->Q,  &ctx->D,
 80a218c:	f107 0350 	add.w	r3, r7, #80	; 0x50
                                      &ctx->DP, &ctx->DQ, &ctx->QP );
 80a2190:	9300      	str	r3, [sp, #0]
 80a2192:	9a02      	ldr	r2, [sp, #8]
 80a2194:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80a2198:	4651      	mov	r1, sl
 80a219a:	4648      	mov	r0, r9
 80a219c:	f00a ffac 	bl	80ad0f8 <mbedtls_rsa_deduce_crt>
        if( ret != 0 )
 80a21a0:	b110      	cbz	r0, 80a21a8 <mbedtls_rsa_complete+0x134>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
 80a21a2:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
 80a21a6:	e00c      	b.n	80a21c2 <mbedtls_rsa_complete+0x14e>

    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
 80a21a8:	4621      	mov	r1, r4
 80a21aa:	4638      	mov	r0, r7
}
 80a21ac:	b007      	add	sp, #28
 80a21ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
 80a21b2:	f7ff bec7 	b.w	80a1f44 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
    const int is_pub     =   have_N && !have_P && !have_Q && !have_D && have_E;

    /* These three alternatives are mutually exclusive */
    const int is_priv = n_missing || pq_missing || d_missing;

    if( !is_priv && !is_pub )
 80a21b6:	b90c      	cbnz	r4, 80a21bc <mbedtls_rsa_complete+0x148>
 80a21b8:	b112      	cbz	r2, 80a21c0 <mbedtls_rsa_complete+0x14c>
 80a21ba:	4626      	mov	r6, r4
 80a21bc:	9404      	str	r4, [sp, #16]
 80a21be:	e7bf      	b.n	80a2140 <mbedtls_rsa_complete+0xcc>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80a21c0:	4801      	ldr	r0, [pc, #4]	; (80a21c8 <mbedtls_rsa_complete+0x154>)
    /*
     * Step 3: Basic sanity checks
     */

    return( rsa_check_context( ctx, is_priv, 1 ) );
}
 80a21c2:	b007      	add	sp, #28
 80a21c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a21c8:	ffffbf80 	.word	0xffffbf80

080a21cc <mbedtls_rsa_init>:
 * Initialize an RSA context
 */
void mbedtls_rsa_init( mbedtls_rsa_context *ctx,
               int padding,
               int hash_id )
{
 80a21cc:	b570      	push	{r4, r5, r6, lr}
 80a21ce:	4604      	mov	r4, r0
 80a21d0:	460e      	mov	r6, r1
 80a21d2:	4615      	mov	r5, r2
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
 80a21d4:	2100      	movs	r1, #0
 80a21d6:	22ac      	movs	r2, #172	; 0xac
 80a21d8:	f00c ffb1 	bl	80af13e <memset>
/*
 * Set padding for an existing RSA context
 */
void mbedtls_rsa_set_padding( mbedtls_rsa_context *ctx, int padding, int hash_id )
{
    ctx->padding = padding;
 80a21dc:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
    ctx->hash_id = hash_id;
 80a21e0:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 80a21e4:	bd70      	pop	{r4, r5, r6, pc}

080a21e6 <mbedtls_rsa_get_len>:
 */

size_t mbedtls_rsa_get_len( const mbedtls_rsa_context *ctx )
{
    return( ctx->len );
}
 80a21e6:	6840      	ldr	r0, [r0, #4]
 80a21e8:	4770      	bx	lr
	...

080a21ec <mbedtls_rsa_check_pubkey>:

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
 80a21ec:	b570      	push	{r4, r5, r6, lr}
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
 80a21ee:	2100      	movs	r1, #0

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
 80a21f0:	4604      	mov	r4, r0
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
 80a21f2:	f7ff fea7 	bl	80a1f44 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
 80a21f6:	4605      	mov	r5, r0
 80a21f8:	b9b8      	cbnz	r0, 80a222a <mbedtls_rsa_check_pubkey+0x3e>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );

    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
 80a21fa:	f104 0608 	add.w	r6, r4, #8
 80a21fe:	4630      	mov	r0, r6
 80a2200:	f007 f8ed 	bl	80a93de <mbedtls_mpi_bitlen>
 80a2204:	287f      	cmp	r0, #127	; 0x7f
 80a2206:	d910      	bls.n	80a222a <mbedtls_rsa_check_pubkey+0x3e>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 80a2208:	3414      	adds	r4, #20
 80a220a:	4629      	mov	r1, r5
 80a220c:	4620      	mov	r0, r4
 80a220e:	f007 f8bc 	bl	80a938a <mbedtls_mpi_get_bit>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 80a2212:	b150      	cbz	r0, 80a222a <mbedtls_rsa_check_pubkey+0x3e>
 80a2214:	4620      	mov	r0, r4
 80a2216:	f007 f8e2 	bl	80a93de <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
 80a221a:	2801      	cmp	r0, #1
 80a221c:	d905      	bls.n	80a222a <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
 80a221e:	4631      	mov	r1, r6
 80a2220:	4620      	mov	r0, r4
 80a2222:	f007 fa88 	bl	80a9736 <mbedtls_mpi_cmp_mpi>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
 80a2226:	2800      	cmp	r0, #0
 80a2228:	db00      	blt.n	80a222c <mbedtls_rsa_check_pubkey+0x40>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 80a222a:	4d01      	ldr	r5, [pc, #4]	; (80a2230 <mbedtls_rsa_check_pubkey+0x44>)
    }

    return( 0 );
}
 80a222c:	4628      	mov	r0, r5
 80a222e:	bd70      	pop	{r4, r5, r6, pc}
 80a2230:	ffffbe00 	.word	0xffffbe00

080a2234 <mbedtls_rsa_check_privkey>:

/*
 * Check for the consistency of all fields in an RSA private key context
 */
int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
{
 80a2234:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2236:	b085      	sub	sp, #20
 80a2238:	4604      	mov	r4, r0
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
 80a223a:	f7ff ffd7 	bl	80a21ec <mbedtls_rsa_check_pubkey>
 80a223e:	bb28      	cbnz	r0, 80a228c <mbedtls_rsa_check_privkey+0x58>
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
 80a2240:	2101      	movs	r1, #1
 80a2242:	4620      	mov	r0, r4
 80a2244:	f7ff fe7e 	bl	80a1f44 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
/*
 * Check for the consistency of all fields in an RSA private key context
 */
int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
{
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
 80a2248:	bb00      	cbnz	r0, 80a228c <mbedtls_rsa_check_privkey+0x58>
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_rsa_validate_params( &ctx->N, &ctx->P, &ctx->Q,
 80a224a:	f104 0314 	add.w	r3, r4, #20
 80a224e:	f104 052c 	add.w	r5, r4, #44	; 0x2c
 80a2252:	f104 0638 	add.w	r6, r4, #56	; 0x38
 80a2256:	f104 0720 	add.w	r7, r4, #32
 80a225a:	9002      	str	r0, [sp, #8]
 80a225c:	9001      	str	r0, [sp, #4]
 80a225e:	9300      	str	r3, [sp, #0]
 80a2260:	4632      	mov	r2, r6
 80a2262:	463b      	mov	r3, r7
 80a2264:	4629      	mov	r1, r5
 80a2266:	f104 0008 	add.w	r0, r4, #8
 80a226a:	f00a fe7f 	bl	80acf6c <mbedtls_rsa_validate_params>
 80a226e:	b968      	cbnz	r0, 80a228c <mbedtls_rsa_check_privkey+0x58>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

#if !defined(MBEDTLS_RSA_NO_CRT)
    else if( mbedtls_rsa_validate_crt( &ctx->P, &ctx->Q, &ctx->D,
 80a2270:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 80a2274:	9301      	str	r3, [sp, #4]
 80a2276:	f104 0350 	add.w	r3, r4, #80	; 0x50
 80a227a:	9300      	str	r3, [sp, #0]
 80a227c:	463a      	mov	r2, r7
 80a227e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80a2282:	4631      	mov	r1, r6
 80a2284:	4628      	mov	r0, r5
 80a2286:	f00a fdf1 	bl	80ace6c <mbedtls_rsa_validate_crt>
 80a228a:	b100      	cbz	r0, 80a228e <mbedtls_rsa_check_privkey+0x5a>
int mbedtls_rsa_check_privkey( const mbedtls_rsa_context *ctx )
{
    if( mbedtls_rsa_check_pubkey( ctx ) != 0 ||
        rsa_check_context( ctx, 1 /* private */, 1 /* blinding */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 80a228c:	4801      	ldr	r0, [pc, #4]	; (80a2294 <mbedtls_rsa_check_privkey+0x60>)
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }
#endif

    return( 0 );
}
 80a228e:	b005      	add	sp, #20
 80a2290:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2292:	bf00      	nop
 80a2294:	ffffbe00 	.word	0xffffbe00

080a2298 <mbedtls_rsa_check_pub_priv>:
/*
 * Check if contexts holding a public and private key match
 */
int mbedtls_rsa_check_pub_priv( const mbedtls_rsa_context *pub,
                                const mbedtls_rsa_context *prv )
{
 80a2298:	b538      	push	{r3, r4, r5, lr}
 80a229a:	4605      	mov	r5, r0
 80a229c:	460c      	mov	r4, r1
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
 80a229e:	f7ff ffa5 	bl	80a21ec <mbedtls_rsa_check_pubkey>
 80a22a2:	b950      	cbnz	r0, 80a22ba <mbedtls_rsa_check_pub_priv+0x22>
        mbedtls_rsa_check_privkey( prv ) != 0 )
 80a22a4:	4620      	mov	r0, r4
 80a22a6:	f7ff ffc5 	bl	80a2234 <mbedtls_rsa_check_privkey>
 * Check if contexts holding a public and private key match
 */
int mbedtls_rsa_check_pub_priv( const mbedtls_rsa_context *pub,
                                const mbedtls_rsa_context *prv )
{
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
 80a22aa:	b930      	cbnz	r0, 80a22ba <mbedtls_rsa_check_pub_priv+0x22>
        mbedtls_rsa_check_privkey( prv ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 80a22ac:	f104 0108 	add.w	r1, r4, #8
 80a22b0:	f105 0008 	add.w	r0, r5, #8
 80a22b4:	f007 fa3f 	bl	80a9736 <mbedtls_mpi_cmp_mpi>
 80a22b8:	b108      	cbz	r0, 80a22be <mbedtls_rsa_check_pub_priv+0x26>
                                const mbedtls_rsa_context *prv )
{
    if( mbedtls_rsa_check_pubkey( pub )  != 0 ||
        mbedtls_rsa_check_privkey( prv ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 80a22ba:	4805      	ldr	r0, [pc, #20]	; (80a22d0 <mbedtls_rsa_check_pub_priv+0x38>)
 80a22bc:	bd38      	pop	{r3, r4, r5, pc}
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
        mbedtls_mpi_cmp_mpi( &pub->E, &prv->E ) != 0 )
 80a22be:	f104 0114 	add.w	r1, r4, #20
 80a22c2:	f105 0014 	add.w	r0, r5, #20
 80a22c6:	f007 fa36 	bl	80a9736 <mbedtls_mpi_cmp_mpi>
        mbedtls_rsa_check_privkey( prv ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 80a22ca:	2800      	cmp	r0, #0
 80a22cc:	d1f5      	bne.n	80a22ba <mbedtls_rsa_check_pub_priv+0x22>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    return( 0 );
}
 80a22ce:	bd38      	pop	{r3, r4, r5, pc}
 80a22d0:	ffffbe00 	.word	0xffffbe00

080a22d4 <mbedtls_rsa_public>:
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
 80a22d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a22d8:	460c      	mov	r4, r1
 80a22da:	b086      	sub	sp, #24
    int ret;
    size_t olen;
    mbedtls_mpi T;

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
 80a22dc:	2100      	movs	r1, #0
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
 80a22de:	4605      	mov	r5, r0
 80a22e0:	4617      	mov	r7, r2
    int ret;
    size_t olen;
    mbedtls_mpi T;

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
 80a22e2:	f7ff fe2f 	bl	80a1f44 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
 80a22e6:	4606      	mov	r6, r0
 80a22e8:	bb78      	cbnz	r0, 80a234a <mbedtls_rsa_public+0x76>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T );
 80a22ea:	a803      	add	r0, sp, #12
 80a22ec:	f006 ffbe 	bl	80a926c <mbedtls_mpi_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 80a22f0:	4621      	mov	r1, r4
 80a22f2:	686a      	ldr	r2, [r5, #4]
 80a22f4:	a803      	add	r0, sp, #12
 80a22f6:	f007 f898 	bl	80a942a <mbedtls_mpi_read_binary>
 80a22fa:	4604      	mov	r4, r0
 80a22fc:	b9f0      	cbnz	r0, 80a233c <mbedtls_rsa_public+0x68>

    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 80a22fe:	f105 0408 	add.w	r4, r5, #8
 80a2302:	4621      	mov	r1, r4
 80a2304:	a803      	add	r0, sp, #12
 80a2306:	f007 fa16 	bl	80a9736 <mbedtls_mpi_cmp_mpi>
 80a230a:	2800      	cmp	r0, #0
 80a230c:	da14      	bge.n	80a2338 <mbedtls_rsa_public+0x64>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    olen = ctx->len;
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 80a230e:	f105 0368 	add.w	r3, r5, #104	; 0x68
 80a2312:	a903      	add	r1, sp, #12
 80a2314:	9300      	str	r3, [sp, #0]
 80a2316:	f105 0214 	add.w	r2, r5, #20
 80a231a:	4623      	mov	r3, r4
 80a231c:	4608      	mov	r0, r1
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    olen = ctx->len;
 80a231e:	f8d5 8004 	ldr.w	r8, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 80a2322:	f007 fdda 	bl	80a9eda <mbedtls_mpi_exp_mod>
 80a2326:	4604      	mov	r4, r0
 80a2328:	b940      	cbnz	r0, 80a233c <mbedtls_rsa_public+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 80a232a:	4642      	mov	r2, r8
 80a232c:	4639      	mov	r1, r7
 80a232e:	a803      	add	r0, sp, #12
 80a2330:	f007 f8b0 	bl	80a9494 <mbedtls_mpi_write_binary>
 80a2334:	4604      	mov	r4, r0
 80a2336:	e001      	b.n	80a233c <mbedtls_rsa_public+0x68>

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );

    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 80a2338:	f06f 0403 	mvn.w	r4, #3
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &T );
 80a233c:	a803      	add	r0, sp, #12
 80a233e:	f006 ff9c 	bl	80a927a <mbedtls_mpi_free>

    if( ret != 0 )
 80a2342:	b11c      	cbz	r4, 80a234c <mbedtls_rsa_public+0x78>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
 80a2344:	f5a4 4685 	sub.w	r6, r4, #17024	; 0x4280
 80a2348:	e000      	b.n	80a234c <mbedtls_rsa_public+0x78>
    int ret;
    size_t olen;
    mbedtls_mpi T;

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80a234a:	4e02      	ldr	r6, [pc, #8]	; (80a2354 <mbedtls_rsa_public+0x80>)

    if( ret != 0 )
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );

    return( 0 );
}
 80a234c:	4630      	mov	r0, r6
 80a234e:	b006      	add	sp, #24
 80a2350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2354:	ffffbf80 	.word	0xffffbf80

080a2358 <mbedtls_rsa_private>:
int mbedtls_rsa_private( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t),
                 void *p_rng,
                 const unsigned char *input,
                 unsigned char *output )
{
 80a2358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a235c:	460e      	mov	r6, r1
 80a235e:	b0a5      	sub	sp, #148	; 0x94

    /* Temporaries holding the initial input and the double
     * checked result; should be the same in the end. */
    mbedtls_mpi I, C;

    if( rsa_check_context( ctx, 1             /* private key checks */,
 80a2360:	2101      	movs	r1, #1
int mbedtls_rsa_private( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t),
                 void *p_rng,
                 const unsigned char *input,
                 unsigned char *output )
{
 80a2362:	4604      	mov	r4, r0
 80a2364:	4692      	mov	sl, r2
 80a2366:	461d      	mov	r5, r3

    /* Temporaries holding the initial input and the double
     * checked result; should be the same in the end. */
    mbedtls_mpi I, C;

    if( rsa_check_context( ctx, 1             /* private key checks */,
 80a2368:	f7ff fdec 	bl	80a1f44 <_ZL17rsa_check_contextPK19mbedtls_rsa_contextii.isra.0>
 80a236c:	9003      	str	r0, [sp, #12]
 80a236e:	2800      	cmp	r0, #0
 80a2370:	f040 819b 	bne.w	80a26aa <mbedtls_rsa_private+0x352>
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    /* MPI Initialization */
    mbedtls_mpi_init( &T );
 80a2374:	a806      	add	r0, sp, #24
 80a2376:	f006 ff79 	bl	80a926c <mbedtls_mpi_init>

    mbedtls_mpi_init( &P1 );
 80a237a:	a809      	add	r0, sp, #36	; 0x24
 80a237c:	f006 ff76 	bl	80a926c <mbedtls_mpi_init>
    mbedtls_mpi_init( &Q1 );
 80a2380:	a80c      	add	r0, sp, #48	; 0x30
 80a2382:	f006 ff73 	bl	80a926c <mbedtls_mpi_init>
    mbedtls_mpi_init( &R );
 80a2386:	a80f      	add	r0, sp, #60	; 0x3c
 80a2388:	f006 ff70 	bl	80a926c <mbedtls_mpi_init>

    if( f_rng != NULL )
 80a238c:	b12e      	cbz	r6, 80a239a <mbedtls_rsa_private+0x42>
    {
#if defined(MBEDTLS_RSA_NO_CRT)
        mbedtls_mpi_init( &D_blind );
#else
        mbedtls_mpi_init( &DP_blind );
 80a238e:	a818      	add	r0, sp, #96	; 0x60
 80a2390:	f006 ff6c 	bl	80a926c <mbedtls_mpi_init>
        mbedtls_mpi_init( &DQ_blind );
 80a2394:	a81b      	add	r0, sp, #108	; 0x6c
 80a2396:	f006 ff69 	bl	80a926c <mbedtls_mpi_init>
#endif
    }

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_init( &TP ); mbedtls_mpi_init( &TQ );
 80a239a:	a812      	add	r0, sp, #72	; 0x48
 80a239c:	f006 ff66 	bl	80a926c <mbedtls_mpi_init>
 80a23a0:	a815      	add	r0, sp, #84	; 0x54
 80a23a2:	f006 ff63 	bl	80a926c <mbedtls_mpi_init>
#endif

    mbedtls_mpi_init( &I );
 80a23a6:	a81e      	add	r0, sp, #120	; 0x78
 80a23a8:	f006 ff60 	bl	80a926c <mbedtls_mpi_init>
    mbedtls_mpi_init( &C );
 80a23ac:	a821      	add	r0, sp, #132	; 0x84
 80a23ae:	f006 ff5d 	bl	80a926c <mbedtls_mpi_init>

    /* End of MPI initialization */

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 80a23b2:	6862      	ldr	r2, [r4, #4]
 80a23b4:	4629      	mov	r1, r5
 80a23b6:	a806      	add	r0, sp, #24
 80a23b8:	f007 f837 	bl	80a942a <mbedtls_mpi_read_binary>
 80a23bc:	4607      	mov	r7, r0
 80a23be:	2800      	cmp	r0, #0
 80a23c0:	f040 8150 	bne.w	80a2664 <mbedtls_rsa_private+0x30c>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 80a23c4:	f104 0508 	add.w	r5, r4, #8
 80a23c8:	4629      	mov	r1, r5
 80a23ca:	a806      	add	r0, sp, #24
 80a23cc:	f007 f9b3 	bl	80a9736 <mbedtls_mpi_cmp_mpi>
 80a23d0:	2800      	cmp	r0, #0
 80a23d2:	f280 8143 	bge.w	80a265c <mbedtls_rsa_private+0x304>
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );
 80a23d6:	a906      	add	r1, sp, #24
 80a23d8:	a81e      	add	r0, sp, #120	; 0x78
 80a23da:	f006 ff90 	bl	80a92fe <mbedtls_mpi_copy>
 80a23de:	4607      	mov	r7, r0
 80a23e0:	2800      	cmp	r0, #0
 80a23e2:	f040 813f 	bne.w	80a2664 <mbedtls_rsa_private+0x30c>
    mbedtls_mpi DP_blind, DQ_blind;

    /* Pointers to actual exponents to be used - either the unblinded
     * or the blinded ones, depending on the presence of a PRNG. */
    mbedtls_mpi *DP = &ctx->DP;
    mbedtls_mpi *DQ = &ctx->DQ;
 80a23e6:	f104 0350 	add.w	r3, r4, #80	; 0x50
     * the mod p resp. mod q computation (if used). */
    mbedtls_mpi DP_blind, DQ_blind;

    /* Pointers to actual exponents to be used - either the unblinded
     * or the blinded ones, depending on the presence of a PRNG. */
    mbedtls_mpi *DP = &ctx->DP;
 80a23ea:	f104 0944 	add.w	r9, r4, #68	; 0x44
    mbedtls_mpi *DQ = &ctx->DQ;
 80a23ee:	9304      	str	r3, [sp, #16]
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &I, &T ) );

    if( f_rng != NULL )
 80a23f0:	2e00      	cmp	r6, #0
 80a23f2:	f000 80c5 	beq.w	80a2580 <mbedtls_rsa_private+0x228>
static int rsa_prepare_blinding( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    int ret, count = 0;

    if( ctx->Vf.p != NULL )
 80a23f6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80a23fa:	b323      	cbz	r3, 80a2446 <mbedtls_rsa_private+0xee>
    {
        /* We already have blinding values, just update them by squaring */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vi, &ctx->Vi ) );
 80a23fc:	f104 088c 	add.w	r8, r4, #140	; 0x8c
 80a2400:	4642      	mov	r2, r8
 80a2402:	4641      	mov	r1, r8
 80a2404:	4640      	mov	r0, r8
 80a2406:	f007 fafa 	bl	80a99fe <mbedtls_mpi_mul_mpi>
 80a240a:	4607      	mov	r7, r0
 80a240c:	2800      	cmp	r0, #0
 80a240e:	f040 8129 	bne.w	80a2664 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vi, &ctx->Vi, &ctx->N ) );
 80a2412:	462a      	mov	r2, r5
 80a2414:	4641      	mov	r1, r8
 80a2416:	4640      	mov	r0, r8
 80a2418:	f007 fd2d 	bl	80a9e76 <mbedtls_mpi_mod_mpi>
 80a241c:	4607      	mov	r7, r0
 80a241e:	2800      	cmp	r0, #0
 80a2420:	f040 8120 	bne.w	80a2664 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vf, &ctx->Vf, &ctx->Vf ) );
 80a2424:	f104 0898 	add.w	r8, r4, #152	; 0x98
 80a2428:	4642      	mov	r2, r8
 80a242a:	4641      	mov	r1, r8
 80a242c:	4640      	mov	r0, r8
 80a242e:	f007 fae6 	bl	80a99fe <mbedtls_mpi_mul_mpi>
 80a2432:	4607      	mov	r7, r0
 80a2434:	2800      	cmp	r0, #0
 80a2436:	f040 8115 	bne.w	80a2664 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vf, &ctx->Vf, &ctx->N ) );
 80a243a:	462a      	mov	r2, r5
 80a243c:	4641      	mov	r1, r8
 80a243e:	4640      	mov	r0, r8
 80a2440:	f007 fd19 	bl	80a9e76 <mbedtls_mpi_mod_mpi>
 80a2444:	e037      	b.n	80a24b6 <mbedtls_rsa_private+0x15e>
static int rsa_prepare_blinding( mbedtls_rsa_context *ctx,
                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    int ret, count = 0;

    if( ctx->Vf.p != NULL )
 80a2446:	230c      	movs	r3, #12
 80a2448:	9305      	str	r3, [sp, #20]
    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
            return( MBEDTLS_ERR_RSA_RNG_FAILED );

        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 80a244a:	f104 0b98 	add.w	fp, r4, #152	; 0x98
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 80a244e:	f104 088c 	add.w	r8, r4, #140	; 0x8c
        goto cleanup;
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
 80a2452:	9b05      	ldr	r3, [sp, #20]
 80a2454:	3b01      	subs	r3, #1
 80a2456:	9305      	str	r3, [sp, #20]
 80a2458:	f000 812a 	beq.w	80a26b0 <mbedtls_rsa_private+0x358>
            return( MBEDTLS_ERR_RSA_RNG_FAILED );

        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 80a245c:	6861      	ldr	r1, [r4, #4]
 80a245e:	4653      	mov	r3, sl
 80a2460:	4632      	mov	r2, r6
 80a2462:	3901      	subs	r1, #1
 80a2464:	4658      	mov	r0, fp
 80a2466:	f007 ffdc 	bl	80aa422 <mbedtls_mpi_fill_random>
 80a246a:	4607      	mov	r7, r0
 80a246c:	2800      	cmp	r0, #0
 80a246e:	f040 80f9 	bne.w	80a2664 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 80a2472:	462a      	mov	r2, r5
 80a2474:	4659      	mov	r1, fp
 80a2476:	4640      	mov	r0, r8
 80a2478:	f007 ff4e 	bl	80aa318 <mbedtls_mpi_gcd>
 80a247c:	4607      	mov	r7, r0
 80a247e:	2800      	cmp	r0, #0
 80a2480:	f040 80f0 	bne.w	80a2664 <mbedtls_rsa_private+0x30c>
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );
 80a2484:	2101      	movs	r1, #1
 80a2486:	4640      	mov	r0, r8
 80a2488:	f007 f99a 	bl	80a97c0 <mbedtls_mpi_cmp_int>

        goto cleanup;
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
 80a248c:	2800      	cmp	r0, #0
 80a248e:	d1e0      	bne.n	80a2452 <mbedtls_rsa_private+0xfa>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );

    /* Blinding value: Vi =  Vf^(-e) mod N */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 80a2490:	462a      	mov	r2, r5
 80a2492:	4659      	mov	r1, fp
 80a2494:	4640      	mov	r0, r8
 80a2496:	f007 ffe7 	bl	80aa468 <mbedtls_mpi_inv_mod>
 80a249a:	4607      	mov	r7, r0
 80a249c:	2800      	cmp	r0, #0
 80a249e:	f040 80e1 	bne.w	80a2664 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vi, &ctx->Vi, &ctx->E, &ctx->N, &ctx->RN ) );
 80a24a2:	f104 0368 	add.w	r3, r4, #104	; 0x68
 80a24a6:	9300      	str	r3, [sp, #0]
 80a24a8:	f104 0214 	add.w	r2, r4, #20
 80a24ac:	462b      	mov	r3, r5
 80a24ae:	4641      	mov	r1, r8
 80a24b0:	4640      	mov	r0, r8
 80a24b2:	f007 fd12 	bl	80a9eda <mbedtls_mpi_exp_mod>
 80a24b6:	4607      	mov	r7, r0
    {
        /*
         * Blinding
         * T = T * Vi mod N
         */
        MBEDTLS_MPI_CHK( rsa_prepare_blinding( ctx, f_rng, p_rng ) );
 80a24b8:	2800      	cmp	r0, #0
 80a24ba:	f040 80d3 	bne.w	80a2664 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vi ) );
 80a24be:	a906      	add	r1, sp, #24
 80a24c0:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 80a24c4:	4608      	mov	r0, r1
 80a24c6:	f007 fa9a 	bl	80a99fe <mbedtls_mpi_mul_mpi>
 80a24ca:	4607      	mov	r7, r0
 80a24cc:	2800      	cmp	r0, #0
 80a24ce:	f040 80c9 	bne.w	80a2664 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 80a24d2:	a906      	add	r1, sp, #24
 80a24d4:	462a      	mov	r2, r5
 80a24d6:	4608      	mov	r0, r1
 80a24d8:	f007 fccd 	bl	80a9e76 <mbedtls_mpi_mod_mpi>
 80a24dc:	4607      	mov	r7, r0
 80a24de:	2800      	cmp	r0, #0
 80a24e0:	f040 80c0 	bne.w	80a2664 <mbedtls_rsa_private+0x30c>

        /*
         * Exponent blinding
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
 80a24e4:	2201      	movs	r2, #1
 80a24e6:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 80a24ea:	a809      	add	r0, sp, #36	; 0x24
 80a24ec:	f007 fa71 	bl	80a99d2 <mbedtls_mpi_sub_int>
 80a24f0:	4607      	mov	r7, r0
 80a24f2:	2800      	cmp	r0, #0
 80a24f4:	f040 80b6 	bne.w	80a2664 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
 80a24f8:	2201      	movs	r2, #1
 80a24fa:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80a24fe:	a80c      	add	r0, sp, #48	; 0x30
 80a2500:	f007 fa67 	bl	80a99d2 <mbedtls_mpi_sub_int>
 80a2504:	4607      	mov	r7, r0
 80a2506:	2800      	cmp	r0, #0
 80a2508:	f040 80ac 	bne.w	80a2664 <mbedtls_rsa_private+0x30c>
        D = &D_blind;
#else
        /*
         * DP_blind = ( P - 1 ) * R + DP
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 80a250c:	4653      	mov	r3, sl
 80a250e:	4632      	mov	r2, r6
 80a2510:	211c      	movs	r1, #28
 80a2512:	a80f      	add	r0, sp, #60	; 0x3c
 80a2514:	f007 ff85 	bl	80aa422 <mbedtls_mpi_fill_random>
 80a2518:	4607      	mov	r7, r0
 80a251a:	2800      	cmp	r0, #0
 80a251c:	f040 80a2 	bne.w	80a2664 <mbedtls_rsa_private+0x30c>
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
 80a2520:	aa0f      	add	r2, sp, #60	; 0x3c
 80a2522:	a909      	add	r1, sp, #36	; 0x24
 80a2524:	a818      	add	r0, sp, #96	; 0x60
 80a2526:	f007 fa6a 	bl	80a99fe <mbedtls_mpi_mul_mpi>
 80a252a:	4607      	mov	r7, r0
 80a252c:	2800      	cmp	r0, #0
 80a252e:	f040 8099 	bne.w	80a2664 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
 80a2532:	a918      	add	r1, sp, #96	; 0x60
 80a2534:	464a      	mov	r2, r9
 80a2536:	4608      	mov	r0, r1
 80a2538:	f007 f9f2 	bl	80a9920 <mbedtls_mpi_add_mpi>
 80a253c:	4607      	mov	r7, r0
 80a253e:	2800      	cmp	r0, #0
 80a2540:	f040 8090 	bne.w	80a2664 <mbedtls_rsa_private+0x30c>
        DP = &DP_blind;

        /*
         * DQ_blind = ( Q - 1 ) * R + DQ
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 80a2544:	4653      	mov	r3, sl
 80a2546:	4632      	mov	r2, r6
 80a2548:	211c      	movs	r1, #28
 80a254a:	a80f      	add	r0, sp, #60	; 0x3c
 80a254c:	f007 ff69 	bl	80aa422 <mbedtls_mpi_fill_random>
 80a2550:	4607      	mov	r7, r0
 80a2552:	2800      	cmp	r0, #0
 80a2554:	f040 8086 	bne.w	80a2664 <mbedtls_rsa_private+0x30c>
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DQ_blind, &Q1, &R ) );
 80a2558:	aa0f      	add	r2, sp, #60	; 0x3c
 80a255a:	a90c      	add	r1, sp, #48	; 0x30
 80a255c:	a81b      	add	r0, sp, #108	; 0x6c
 80a255e:	f007 fa4e 	bl	80a99fe <mbedtls_mpi_mul_mpi>
 80a2562:	4607      	mov	r7, r0
 80a2564:	2800      	cmp	r0, #0
 80a2566:	d17d      	bne.n	80a2664 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DQ_blind, &DQ_blind,
 80a2568:	a91b      	add	r1, sp, #108	; 0x6c
 80a256a:	9a04      	ldr	r2, [sp, #16]
 80a256c:	4608      	mov	r0, r1
 80a256e:	f007 f9d7 	bl	80a9920 <mbedtls_mpi_add_mpi>
 80a2572:	4607      	mov	r7, r0
 80a2574:	2800      	cmp	r0, #0
 80a2576:	d175      	bne.n	80a2664 <mbedtls_rsa_private+0x30c>
                    &ctx->DQ ) );

        DQ = &DQ_blind;
 80a2578:	ab1b      	add	r3, sp, #108	; 0x6c
 80a257a:	9304      	str	r3, [sp, #16]
                         f_rng, p_rng ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
                    &ctx->DP ) );

        DP = &DP_blind;
 80a257c:	f10d 0960 	add.w	r9, sp, #96	; 0x60
     *
     * TP = input ^ dP mod P
     * TQ = input ^ dQ mod Q
     */

    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TP, &T, DP, &ctx->P, &ctx->RP ) );
 80a2580:	f104 0374 	add.w	r3, r4, #116	; 0x74
 80a2584:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 80a2588:	9300      	str	r3, [sp, #0]
 80a258a:	464a      	mov	r2, r9
 80a258c:	4643      	mov	r3, r8
 80a258e:	a906      	add	r1, sp, #24
 80a2590:	a812      	add	r0, sp, #72	; 0x48
 80a2592:	f007 fca2 	bl	80a9eda <mbedtls_mpi_exp_mod>
 80a2596:	4607      	mov	r7, r0
 80a2598:	2800      	cmp	r0, #0
 80a259a:	d163      	bne.n	80a2664 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &TQ, &T, DQ, &ctx->Q, &ctx->RQ ) );
 80a259c:	f104 0380 	add.w	r3, r4, #128	; 0x80
 80a25a0:	f104 0938 	add.w	r9, r4, #56	; 0x38
 80a25a4:	9300      	str	r3, [sp, #0]
 80a25a6:	9a04      	ldr	r2, [sp, #16]
 80a25a8:	464b      	mov	r3, r9
 80a25aa:	a906      	add	r1, sp, #24
 80a25ac:	a815      	add	r0, sp, #84	; 0x54
 80a25ae:	f007 fc94 	bl	80a9eda <mbedtls_mpi_exp_mod>
 80a25b2:	4607      	mov	r7, r0
 80a25b4:	2800      	cmp	r0, #0
 80a25b6:	d155      	bne.n	80a2664 <mbedtls_rsa_private+0x30c>

    /*
     * T = (TP - TQ) * (Q^-1 mod P) mod P
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T, &TP, &TQ ) );
 80a25b8:	aa15      	add	r2, sp, #84	; 0x54
 80a25ba:	a912      	add	r1, sp, #72	; 0x48
 80a25bc:	a806      	add	r0, sp, #24
 80a25be:	f007 f9d0 	bl	80a9962 <mbedtls_mpi_sub_mpi>
 80a25c2:	4607      	mov	r7, r0
 80a25c4:	2800      	cmp	r0, #0
 80a25c6:	d14d      	bne.n	80a2664 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->QP ) );
 80a25c8:	f104 025c 	add.w	r2, r4, #92	; 0x5c
 80a25cc:	a906      	add	r1, sp, #24
 80a25ce:	a812      	add	r0, sp, #72	; 0x48
 80a25d0:	f007 fa15 	bl	80a99fe <mbedtls_mpi_mul_mpi>
 80a25d4:	4607      	mov	r7, r0
 80a25d6:	2800      	cmp	r0, #0
 80a25d8:	d144      	bne.n	80a2664 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &TP, &ctx->P ) );
 80a25da:	4642      	mov	r2, r8
 80a25dc:	a912      	add	r1, sp, #72	; 0x48
 80a25de:	a806      	add	r0, sp, #24
 80a25e0:	f007 fc49 	bl	80a9e76 <mbedtls_mpi_mod_mpi>
 80a25e4:	4607      	mov	r7, r0
 80a25e6:	2800      	cmp	r0, #0
 80a25e8:	d13c      	bne.n	80a2664 <mbedtls_rsa_private+0x30c>

    /*
     * T = TQ + T * Q
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &TP, &T, &ctx->Q ) );
 80a25ea:	464a      	mov	r2, r9
 80a25ec:	a906      	add	r1, sp, #24
 80a25ee:	a812      	add	r0, sp, #72	; 0x48
 80a25f0:	f007 fa05 	bl	80a99fe <mbedtls_mpi_mul_mpi>
 80a25f4:	4607      	mov	r7, r0
 80a25f6:	2800      	cmp	r0, #0
 80a25f8:	d134      	bne.n	80a2664 <mbedtls_rsa_private+0x30c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T, &TQ, &TP ) );
 80a25fa:	aa12      	add	r2, sp, #72	; 0x48
 80a25fc:	a915      	add	r1, sp, #84	; 0x54
 80a25fe:	a806      	add	r0, sp, #24
 80a2600:	f007 f98e 	bl	80a9920 <mbedtls_mpi_add_mpi>
 80a2604:	4607      	mov	r7, r0
 80a2606:	bb68      	cbnz	r0, 80a2664 <mbedtls_rsa_private+0x30c>
#endif /* MBEDTLS_RSA_NO_CRT */

    if( f_rng != NULL )
 80a2608:	b966      	cbnz	r6, 80a2624 <mbedtls_rsa_private+0x2cc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
    }

    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
 80a260a:	f104 0368 	add.w	r3, r4, #104	; 0x68
 80a260e:	9300      	str	r3, [sp, #0]
 80a2610:	f104 0214 	add.w	r2, r4, #20
 80a2614:	462b      	mov	r3, r5
 80a2616:	a906      	add	r1, sp, #24
 80a2618:	a821      	add	r0, sp, #132	; 0x84
 80a261a:	f007 fc5e 	bl	80a9eda <mbedtls_mpi_exp_mod>
 80a261e:	4607      	mov	r7, r0
 80a2620:	bb00      	cbnz	r0, 80a2664 <mbedtls_rsa_private+0x30c>
 80a2622:	e00f      	b.n	80a2644 <mbedtls_rsa_private+0x2ec>
    {
        /*
         * Unblind
         * T = T * Vf mod N
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
 80a2624:	a906      	add	r1, sp, #24
 80a2626:	f104 0298 	add.w	r2, r4, #152	; 0x98
 80a262a:	4608      	mov	r0, r1
 80a262c:	f007 f9e7 	bl	80a99fe <mbedtls_mpi_mul_mpi>
 80a2630:	4607      	mov	r7, r0
 80a2632:	b9b8      	cbnz	r0, 80a2664 <mbedtls_rsa_private+0x30c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 80a2634:	a906      	add	r1, sp, #24
 80a2636:	462a      	mov	r2, r5
 80a2638:	4608      	mov	r0, r1
 80a263a:	f007 fc1c 	bl	80a9e76 <mbedtls_mpi_mod_mpi>
 80a263e:	4607      	mov	r7, r0
 80a2640:	b980      	cbnz	r0, 80a2664 <mbedtls_rsa_private+0x30c>
 80a2642:	e7e2      	b.n	80a260a <mbedtls_rsa_private+0x2b2>
    }

    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
                                          &ctx->N, &ctx->RN ) );
    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
 80a2644:	a91e      	add	r1, sp, #120	; 0x78
 80a2646:	a821      	add	r0, sp, #132	; 0x84
 80a2648:	f007 f875 	bl	80a9736 <mbedtls_mpi_cmp_mpi>
 80a264c:	b948      	cbnz	r0, 80a2662 <mbedtls_rsa_private+0x30a>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
        goto cleanup;
    }

    olen = ctx->len;
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 80a264e:	6862      	ldr	r2, [r4, #4]
 80a2650:	992e      	ldr	r1, [sp, #184]	; 0xb8
 80a2652:	a806      	add	r0, sp, #24
 80a2654:	f006 ff1e 	bl	80a9494 <mbedtls_mpi_write_binary>
 80a2658:	4607      	mov	r7, r0
 80a265a:	e003      	b.n	80a2664 <mbedtls_rsa_private+0x30c>
    /* End of MPI initialization */

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 80a265c:	f06f 0703 	mvn.w	r7, #3
 80a2660:	e000      	b.n	80a2664 <mbedtls_rsa_private+0x30c>
    /* Verify the result to prevent glitching attacks. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &C, &T, &ctx->E,
                                          &ctx->N, &ctx->RN ) );
    if( mbedtls_mpi_cmp_mpi( &C, &I ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 80a2662:	4f16      	ldr	r7, [pc, #88]	; (80a26bc <mbedtls_rsa_private+0x364>)
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &P1 );
 80a2664:	a809      	add	r0, sp, #36	; 0x24
 80a2666:	f006 fe08 	bl	80a927a <mbedtls_mpi_free>
    mbedtls_mpi_free( &Q1 );
 80a266a:	a80c      	add	r0, sp, #48	; 0x30
 80a266c:	f006 fe05 	bl	80a927a <mbedtls_mpi_free>
    mbedtls_mpi_free( &R );
 80a2670:	a80f      	add	r0, sp, #60	; 0x3c
 80a2672:	f006 fe02 	bl	80a927a <mbedtls_mpi_free>

    if( f_rng != NULL )
 80a2676:	b12e      	cbz	r6, 80a2684 <mbedtls_rsa_private+0x32c>
    {
#if defined(MBEDTLS_RSA_NO_CRT)
        mbedtls_mpi_free( &D_blind );
#else
        mbedtls_mpi_free( &DP_blind );
 80a2678:	a818      	add	r0, sp, #96	; 0x60
 80a267a:	f006 fdfe 	bl	80a927a <mbedtls_mpi_free>
        mbedtls_mpi_free( &DQ_blind );
 80a267e:	a81b      	add	r0, sp, #108	; 0x6c
 80a2680:	f006 fdfb 	bl	80a927a <mbedtls_mpi_free>
#endif
    }

    mbedtls_mpi_free( &T );
 80a2684:	a806      	add	r0, sp, #24
 80a2686:	f006 fdf8 	bl	80a927a <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &TP ); mbedtls_mpi_free( &TQ );
 80a268a:	a812      	add	r0, sp, #72	; 0x48
 80a268c:	f006 fdf5 	bl	80a927a <mbedtls_mpi_free>
 80a2690:	a815      	add	r0, sp, #84	; 0x54
 80a2692:	f006 fdf2 	bl	80a927a <mbedtls_mpi_free>
#endif

    mbedtls_mpi_free( &C );
 80a2696:	a821      	add	r0, sp, #132	; 0x84
 80a2698:	f006 fdef 	bl	80a927a <mbedtls_mpi_free>
    mbedtls_mpi_free( &I );
 80a269c:	a81e      	add	r0, sp, #120	; 0x78
 80a269e:	f006 fdec 	bl	80a927a <mbedtls_mpi_free>

    if( ret != 0 )
 80a26a2:	b13f      	cbz	r7, 80a26b4 <mbedtls_rsa_private+0x35c>
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );
 80a26a4:	f5a7 4386 	sub.w	r3, r7, #17152	; 0x4300
 80a26a8:	e000      	b.n	80a26ac <mbedtls_rsa_private+0x354>
    mbedtls_mpi I, C;

    if( rsa_check_context( ctx, 1             /* private key checks */,
                                f_rng != NULL /* blinding y/n       */ ) != 0 )
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80a26aa:	4b05      	ldr	r3, [pc, #20]	; (80a26c0 <mbedtls_rsa_private+0x368>)
 80a26ac:	9303      	str	r3, [sp, #12]
 80a26ae:	e001      	b.n	80a26b4 <mbedtls_rsa_private+0x35c>
    }

    /* Unblinding value: Vf = random number, invertible mod N */
    do {
        if( count++ > 10 )
            return( MBEDTLS_ERR_RSA_RNG_FAILED );
 80a26b0:	4f04      	ldr	r7, [pc, #16]	; (80a26c4 <mbedtls_rsa_private+0x36c>)
 80a26b2:	e7d7      	b.n	80a2664 <mbedtls_rsa_private+0x30c>

    if( ret != 0 )
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );

    return( 0 );
}
 80a26b4:	9803      	ldr	r0, [sp, #12]
 80a26b6:	b025      	add	sp, #148	; 0x94
 80a26b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a26bc:	ffffbc80 	.word	0xffffbc80
 80a26c0:	ffffbf80 	.word	0xffffbf80
 80a26c4:	ffffbb80 	.word	0xffffbb80

080a26c8 <mbedtls_rsa_rsaes_oaep_encrypt>:
                            int mode,
                            const unsigned char *label, size_t label_len,
                            size_t ilen,
                            const unsigned char *input,
                            unsigned char *output )
{
 80a26c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    unsigned char *p = output;
    unsigned int hlen;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80a26cc:	2b01      	cmp	r3, #1
                            int mode,
                            const unsigned char *label, size_t label_len,
                            size_t ilen,
                            const unsigned char *input,
                            unsigned char *output )
{
 80a26ce:	b08b      	sub	sp, #44	; 0x2c
 80a26d0:	4680      	mov	r8, r0
 80a26d2:	468b      	mov	fp, r1
 80a26d4:	9203      	str	r2, [sp, #12]
 80a26d6:	9304      	str	r3, [sp, #16]
 80a26d8:	9f16      	ldr	r7, [sp, #88]	; 0x58
 80a26da:	9e18      	ldr	r6, [sp, #96]	; 0x60
    unsigned char *p = output;
    unsigned int hlen;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80a26dc:	d105      	bne.n	80a26ea <mbedtls_rsa_rsaes_oaep_encrypt+0x22>
 80a26de:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80a26e2:	2b01      	cmp	r3, #1
 80a26e4:	d001      	beq.n	80a26ea <mbedtls_rsa_rsaes_oaep_encrypt+0x22>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80a26e6:	4840      	ldr	r0, [pc, #256]	; (80a27e8 <mbedtls_rsa_rsaes_oaep_encrypt+0x120>)
 80a26e8:	e07a      	b.n	80a27e0 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>

    if( f_rng == NULL )
 80a26ea:	f1bb 0f00 	cmp.w	fp, #0
 80a26ee:	d0fa      	beq.n	80a26e6 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 80a26f0:	f898 00a8 	ldrb.w	r0, [r8, #168]	; 0xa8
 80a26f4:	f003 fb0e 	bl	80a5d14 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 80a26f8:	9002      	str	r0, [sp, #8]
 80a26fa:	2800      	cmp	r0, #0
 80a26fc:	d0f3      	beq.n	80a26e6 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
 80a26fe:	f8d8 4004 	ldr.w	r4, [r8, #4]
    hlen = mbedtls_md_get_size( md_info );
 80a2702:	f003 fc41 	bl	80a5f88 <mbedtls_md_get_size>

    /* first comparison checks for overflow */
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
 80a2706:	0043      	lsls	r3, r0, #1
 80a2708:	9305      	str	r3, [sp, #20]
 80a270a:	0042      	lsls	r2, r0, #1
 80a270c:	1cbb      	adds	r3, r7, #2
 80a270e:	4413      	add	r3, r2
 80a2710:	429f      	cmp	r7, r3
    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
    hlen = mbedtls_md_get_size( md_info );
 80a2712:	4605      	mov	r5, r0

    /* first comparison checks for overflow */
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
 80a2714:	d8e7      	bhi.n	80a26e6 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
 80a2716:	429c      	cmp	r4, r3
 80a2718:	d3e5      	bcc.n	80a26e6 <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    memset( output, 0, olen );
 80a271a:	4622      	mov	r2, r4
 80a271c:	2100      	movs	r1, #0
 80a271e:	4630      	mov	r0, r6
 80a2720:	f00c fd0d 	bl	80af13e <memset>

    *p++ = 0;
 80a2724:	f106 0901 	add.w	r9, r6, #1
 80a2728:	2300      	movs	r3, #0
 80a272a:	7033      	strb	r3, [r6, #0]

    /* Generate a random octet string seed */
    if( ( ret = f_rng( p_rng, p, hlen ) ) != 0 )
 80a272c:	462a      	mov	r2, r5
 80a272e:	4649      	mov	r1, r9
 80a2730:	9803      	ldr	r0, [sp, #12]
 80a2732:	47d8      	blx	fp
 80a2734:	b110      	cbz	r0, 80a273c <mbedtls_rsa_rsaes_oaep_encrypt+0x74>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 80a2736:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
 80a273a:	e051      	b.n	80a27e0 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>

    p += hlen;
 80a273c:	eb09 0a05 	add.w	sl, r9, r5

    /* Construct DB */
    if( ( ret = mbedtls_md( md_info, label, label_len, p ) ) != 0 )
 80a2740:	4653      	mov	r3, sl
 80a2742:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80a2744:	9914      	ldr	r1, [sp, #80]	; 0x50
 80a2746:	9802      	ldr	r0, [sp, #8]
 80a2748:	f003 fb56 	bl	80a5df8 <mbedtls_md>
 80a274c:	2800      	cmp	r0, #0
 80a274e:	d147      	bne.n	80a27e0 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>
 80a2750:	9005      	str	r0, [sp, #20]
 80a2752:	1ea0      	subs	r0, r4, #2
 80a2754:	1bc0      	subs	r0, r0, r7
 80a2756:	006b      	lsls	r3, r5, #1
 80a2758:	4428      	add	r0, r5
 80a275a:	1ac0      	subs	r0, r0, r3
        return( ret );
    p += hlen;
    p += olen - 2 * hlen - 2 - ilen;
    *p++ = 1;
 80a275c:	2201      	movs	r2, #1
 80a275e:	f80a 2000 	strb.w	r2, [sl, r0]
    memcpy( p, input, ilen );
 80a2762:	4410      	add	r0, r2
 80a2764:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80a2766:	463a      	mov	r2, r7
 80a2768:	4450      	add	r0, sl

    mbedtls_md_init( &md_ctx );
 80a276a:	af07      	add	r7, sp, #28
    if( ( ret = mbedtls_md( md_info, label, label_len, p ) ) != 0 )
        return( ret );
    p += hlen;
    p += olen - 2 * hlen - 2 - ilen;
    *p++ = 1;
    memcpy( p, input, ilen );
 80a276c:	f00c fcc1 	bl	80af0f2 <memcpy>

    mbedtls_md_init( &md_ctx );
 80a2770:	4638      	mov	r0, r7
 80a2772:	f003 fadb 	bl	80a5d2c <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 80a2776:	9b05      	ldr	r3, [sp, #20]
 80a2778:	9902      	ldr	r1, [sp, #8]
 80a277a:	461a      	mov	r2, r3
 80a277c:	4638      	mov	r0, r7
 80a277e:	f003 fafb 	bl	80a5d78 <mbedtls_md_setup>
 80a2782:	4602      	mov	r2, r0
 80a2784:	b9a8      	cbnz	r0, 80a27b2 <mbedtls_rsa_rsaes_oaep_encrypt+0xea>
        goto exit;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( output + hlen + 1, olen - hlen - 1, output + 1, hlen,
 80a2786:	f105 0a01 	add.w	sl, r5, #1
 80a278a:	3c01      	subs	r4, #1
 80a278c:	44b2      	add	sl, r6
 80a278e:	1b64      	subs	r4, r4, r5
 80a2790:	464a      	mov	r2, r9
 80a2792:	9700      	str	r7, [sp, #0]
 80a2794:	462b      	mov	r3, r5
 80a2796:	4621      	mov	r1, r4
 80a2798:	4650      	mov	r0, sl
 80a279a:	f7ff faef 	bl	80a1d7c <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 80a279e:	4602      	mov	r2, r0
 80a27a0:	b938      	cbnz	r0, 80a27b2 <mbedtls_rsa_rsaes_oaep_encrypt+0xea>
                          &md_ctx ) ) != 0 )
        goto exit;

    /* maskedSeed: Apply seedMask to seed */
    if( ( ret = mgf_mask( output + 1, hlen, output + hlen + 1, olen - hlen - 1,
 80a27a2:	4652      	mov	r2, sl
 80a27a4:	9700      	str	r7, [sp, #0]
 80a27a6:	4623      	mov	r3, r4
 80a27a8:	4629      	mov	r1, r5
 80a27aa:	4648      	mov	r0, r9
 80a27ac:	f7ff fae6 	bl	80a1d7c <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 80a27b0:	4602      	mov	r2, r0
                          &md_ctx ) ) != 0 )
        goto exit;

exit:
    mbedtls_md_free( &md_ctx );
 80a27b2:	a807      	add	r0, sp, #28
 80a27b4:	9202      	str	r2, [sp, #8]
 80a27b6:	f003 fabe 	bl	80a5d36 <mbedtls_md_free>

    if( ret != 0 )
 80a27ba:	9a02      	ldr	r2, [sp, #8]
 80a27bc:	b97a      	cbnz	r2, 80a27de <mbedtls_rsa_rsaes_oaep_encrypt+0x116>
        return( ret );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 80a27be:	9b04      	ldr	r3, [sp, #16]
 80a27c0:	b92b      	cbnz	r3, 80a27ce <mbedtls_rsa_rsaes_oaep_encrypt+0x106>
 80a27c2:	4632      	mov	r2, r6
 80a27c4:	4631      	mov	r1, r6
 80a27c6:	4640      	mov	r0, r8
 80a27c8:	f7ff fd84 	bl	80a22d4 <mbedtls_rsa_public>
 80a27cc:	e008      	b.n	80a27e0 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>
 80a27ce:	9600      	str	r6, [sp, #0]
 80a27d0:	4633      	mov	r3, r6
 80a27d2:	9a03      	ldr	r2, [sp, #12]
 80a27d4:	4659      	mov	r1, fp
 80a27d6:	4640      	mov	r0, r8
 80a27d8:	f7ff fdbe 	bl	80a2358 <mbedtls_rsa_private>
 80a27dc:	e000      	b.n	80a27e0 <mbedtls_rsa_rsaes_oaep_encrypt+0x118>
 80a27de:	4610      	mov	r0, r2
}
 80a27e0:	b00b      	add	sp, #44	; 0x2c
 80a27e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a27e6:	bf00      	nop
 80a27e8:	ffffbf80 	.word	0xffffbf80

080a27ec <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>:
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng,
                                 int mode, size_t ilen,
                                 const unsigned char *input,
                                 unsigned char *output )
{
 80a27ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a27f0:	469a      	mov	sl, r3
    size_t nb_pad, olen;
    int ret;
    unsigned char *p = output;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80a27f2:	f1ba 0f01 	cmp.w	sl, #1
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng,
                                 int mode, size_t ilen,
                                 const unsigned char *input,
                                 unsigned char *output )
{
 80a27f6:	4607      	mov	r7, r0
 80a27f8:	4689      	mov	r9, r1
 80a27fa:	4693      	mov	fp, r2
 80a27fc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80a2800:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a2802:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    size_t nb_pad, olen;
    int ret;
    unsigned char *p = output;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80a2804:	d103      	bne.n	80a280e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x22>
 80a2806:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 80a280a:	2a00      	cmp	r2, #0
 80a280c:	d155      	bne.n	80a28ba <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    // We don't check p_rng because it won't be dereferenced here
    if( f_rng == NULL || input == NULL || output == NULL )
 80a280e:	f1b9 0f00 	cmp.w	r9, #0
 80a2812:	d052      	beq.n	80a28ba <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
 80a2814:	2b00      	cmp	r3, #0
 80a2816:	d050      	beq.n	80a28ba <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
 80a2818:	2e00      	cmp	r6, #0
 80a281a:	d04e      	beq.n	80a28ba <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
 80a281c:	f118 020b 	adds.w	r2, r8, #11

    // We don't check p_rng because it won't be dereferenced here
    if( f_rng == NULL || input == NULL || output == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
 80a2820:	687c      	ldr	r4, [r7, #4]

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
 80a2822:	d24a      	bcs.n	80a28ba <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
 80a2824:	4294      	cmp	r4, r2
 80a2826:	d348      	bcc.n	80a28ba <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xce>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    nb_pad = olen - 3 - ilen;

    *p++ = 0;
 80a2828:	4635      	mov	r5, r6

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    nb_pad = olen - 3 - ilen;
 80a282a:	3c03      	subs	r4, #3

    *p++ = 0;
 80a282c:	2200      	movs	r2, #0

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    nb_pad = olen - 3 - ilen;
 80a282e:	ebc8 0404 	rsb	r4, r8, r4

    *p++ = 0;
 80a2832:	f805 2b02 	strb.w	r2, [r5], #2
    if( mode == MBEDTLS_RSA_PUBLIC )
 80a2836:	f1ba 0f00 	cmp.w	sl, #0
 80a283a:	d118      	bne.n	80a286e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x82>
    {
        *p++ = MBEDTLS_RSA_CRYPT;
 80a283c:	2202      	movs	r2, #2
 80a283e:	7072      	strb	r2, [r6, #1]
 80a2840:	442c      	add	r4, r5

        while( nb_pad-- > 0 )
 80a2842:	42a5      	cmp	r5, r4
 80a2844:	d01c      	beq.n	80a2880 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x94>
 80a2846:	2264      	movs	r2, #100	; 0x64
 80a2848:	9200      	str	r2, [sp, #0]
        {
            int rng_dl = 100;

            do {
                ret = f_rng( p_rng, p, 1 );
 80a284a:	2201      	movs	r2, #1
 80a284c:	4629      	mov	r1, r5
 80a284e:	4658      	mov	r0, fp
 80a2850:	9301      	str	r3, [sp, #4]
 80a2852:	47c8      	blx	r9
            } while( *p == 0 && --rng_dl && ret == 0 );
 80a2854:	782a      	ldrb	r2, [r5, #0]
 80a2856:	9b01      	ldr	r3, [sp, #4]
 80a2858:	bb8a      	cbnz	r2, 80a28be <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xd2>
 80a285a:	9a00      	ldr	r2, [sp, #0]
 80a285c:	3a01      	subs	r2, #1
 80a285e:	9200      	str	r2, [sp, #0]
 80a2860:	d102      	bne.n	80a2868 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x7c>

            /* Check if RNG failed to generate data */
            if( rng_dl == 0 || ret != 0 )
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 80a2862:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
 80a2866:	e02e      	b.n	80a28c6 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xda>
        {
            int rng_dl = 100;

            do {
                ret = f_rng( p_rng, p, 1 );
            } while( *p == 0 && --rng_dl && ret == 0 );
 80a2868:	2800      	cmp	r0, #0
 80a286a:	d0ee      	beq.n	80a284a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x5e>
 80a286c:	e7f9      	b.n	80a2862 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x76>
            p++;
        }
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;
 80a286e:	2201      	movs	r2, #1
 80a2870:	7072      	strb	r2, [r6, #1]
 80a2872:	442c      	add	r4, r5

        while( nb_pad-- > 0 )
            *p++ = 0xFF;
 80a2874:	22ff      	movs	r2, #255	; 0xff
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;

        while( nb_pad-- > 0 )
 80a2876:	42ac      	cmp	r4, r5
 80a2878:	d002      	beq.n	80a2880 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x94>
            *p++ = 0xFF;
 80a287a:	f805 2b01 	strb.w	r2, [r5], #1
    }
    else
    {
        *p++ = MBEDTLS_RSA_SIGN;

        while( nb_pad-- > 0 )
 80a287e:	e7fa      	b.n	80a2876 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x8a>
            *p++ = 0xFF;
    }

    *p++ = 0;
 80a2880:	4620      	mov	r0, r4
 80a2882:	2200      	movs	r2, #0
 80a2884:	f800 2b01 	strb.w	r2, [r0], #1
    memcpy( p, input, ilen );
 80a2888:	4619      	mov	r1, r3
 80a288a:	4642      	mov	r2, r8
 80a288c:	f00c fc31 	bl	80af0f2 <memcpy>

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 80a2890:	f1ba 0f00 	cmp.w	sl, #0
 80a2894:	d107      	bne.n	80a28a6 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xba>
 80a2896:	4632      	mov	r2, r6
 80a2898:	4631      	mov	r1, r6
 80a289a:	4638      	mov	r0, r7
}
 80a289c:	b003      	add	sp, #12
 80a289e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    *p++ = 0;
    memcpy( p, input, ilen );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 80a28a2:	f7ff bd17 	b.w	80a22d4 <mbedtls_rsa_public>
 80a28a6:	4633      	mov	r3, r6
 80a28a8:	465a      	mov	r2, fp
 80a28aa:	4649      	mov	r1, r9
 80a28ac:	4638      	mov	r0, r7
 80a28ae:	960c      	str	r6, [sp, #48]	; 0x30
}
 80a28b0:	b003      	add	sp, #12
 80a28b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    *p++ = 0;
    memcpy( p, input, ilen );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 80a28b6:	f7ff bd4f 	b.w	80a2358 <mbedtls_rsa_private>
    size_t nb_pad, olen;
    int ret;
    unsigned char *p = output;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80a28ba:	4804      	ldr	r0, [pc, #16]	; (80a28cc <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xe0>)
 80a28bc:	e003      	b.n	80a28c6 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xda>
            do {
                ret = f_rng( p_rng, p, 1 );
            } while( *p == 0 && --rng_dl && ret == 0 );

            /* Check if RNG failed to generate data */
            if( rng_dl == 0 || ret != 0 )
 80a28be:	2800      	cmp	r0, #0
 80a28c0:	d1cf      	bne.n	80a2862 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x76>
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );

            p++;
 80a28c2:	3501      	adds	r5, #1
    *p++ = 0;
    if( mode == MBEDTLS_RSA_PUBLIC )
    {
        *p++ = MBEDTLS_RSA_CRYPT;

        while( nb_pad-- > 0 )
 80a28c4:	e7bd      	b.n	80a2842 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x56>
    memcpy( p, input, ilen );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
}
 80a28c6:	b003      	add	sp, #12
 80a28c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a28cc:	ffffbf80 	.word	0xffffbf80

080a28d0 <mbedtls_rsa_pkcs1_encrypt>:
                       int (*f_rng)(void *, unsigned char *, size_t),
                       void *p_rng,
                       int mode, size_t ilen,
                       const unsigned char *input,
                       unsigned char *output )
{
 80a28d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a28d2:	b087      	sub	sp, #28
    switch( ctx->padding )
 80a28d4:	f8d0 70a4 	ldr.w	r7, [r0, #164]	; 0xa4
                       int (*f_rng)(void *, unsigned char *, size_t),
                       void *p_rng,
                       int mode, size_t ilen,
                       const unsigned char *input,
                       unsigned char *output )
{
 80a28d8:	ac0c      	add	r4, sp, #48	; 0x30
 80a28da:	cc70      	ldmia	r4, {r4, r5, r6}
    switch( ctx->padding )
 80a28dc:	b157      	cbz	r7, 80a28f4 <mbedtls_rsa_pkcs1_encrypt+0x24>
 80a28de:	2f01      	cmp	r7, #1
 80a28e0:	d110      	bne.n	80a2904 <mbedtls_rsa_pkcs1_encrypt+0x34>
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           ilen, input, output );
 80a28e2:	9402      	str	r4, [sp, #8]
 80a28e4:	2400      	movs	r4, #0
 80a28e6:	9604      	str	r6, [sp, #16]
 80a28e8:	9503      	str	r5, [sp, #12]
 80a28ea:	9401      	str	r4, [sp, #4]
 80a28ec:	9400      	str	r4, [sp, #0]
 80a28ee:	f7ff feeb 	bl	80a26c8 <mbedtls_rsa_rsaes_oaep_encrypt>
 80a28f2:	e008      	b.n	80a2906 <mbedtls_rsa_pkcs1_encrypt+0x36>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
                                                input, output );
 80a28f4:	960e      	str	r6, [sp, #56]	; 0x38
 80a28f6:	950d      	str	r5, [sp, #52]	; 0x34
 80a28f8:	940c      	str	r4, [sp, #48]	; 0x30
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 80a28fa:	b007      	add	sp, #28
 80a28fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
                                                input, output );
 80a2900:	f7ff bf74 	b.w	80a27ec <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           ilen, input, output );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 80a2904:	4801      	ldr	r0, [pc, #4]	; (80a290c <mbedtls_rsa_pkcs1_encrypt+0x3c>)
    }
}
 80a2906:	b007      	add	sp, #28
 80a2908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a290a:	bf00      	nop
 80a290c:	ffffbf00 	.word	0xffffbf00

080a2910 <mbedtls_rsa_rsaes_oaep_decrypt>:
                            const unsigned char *label, size_t label_len,
                            size_t *olen,
                            const unsigned char *input,
                            unsigned char *output,
                            size_t output_max_len )
{
 80a2910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    mbedtls_md_context_t md_ctx;

    /*
     * Parameters sanity checks
     */
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80a2914:	2b01      	cmp	r3, #1
                            const unsigned char *label, size_t label_len,
                            size_t *olen,
                            const unsigned char *input,
                            unsigned char *output,
                            size_t output_max_len )
{
 80a2916:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
 80a291a:	4606      	mov	r6, r0
 80a291c:	468a      	mov	sl, r1
 80a291e:	9203      	str	r2, [sp, #12]
 80a2920:	469b      	mov	fp, r3
    mbedtls_md_context_t md_ctx;

    /*
     * Parameters sanity checks
     */
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80a2922:	d105      	bne.n	80a2930 <mbedtls_rsa_rsaes_oaep_decrypt+0x20>
 80a2924:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80a2928:	2b01      	cmp	r3, #1
 80a292a:	d001      	beq.n	80a2930 <mbedtls_rsa_rsaes_oaep_decrypt+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80a292c:	485c      	ldr	r0, [pc, #368]	; (80a2aa0 <mbedtls_rsa_rsaes_oaep_decrypt+0x190>)
 80a292e:	e0b2      	b.n	80a2a96 <mbedtls_rsa_rsaes_oaep_decrypt+0x186>

    ilen = ctx->len;
 80a2930:	6877      	ldr	r7, [r6, #4]

    if( ilen < 16 || ilen > sizeof( buf ) )
 80a2932:	f1a7 0310 	sub.w	r3, r7, #16
 80a2936:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 80a293a:	d8f7      	bhi.n	80a292c <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 80a293c:	f896 00a8 	ldrb.w	r0, [r6, #168]	; 0xa8
 80a2940:	f003 f9e8 	bl	80a5d14 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 80a2944:	9002      	str	r0, [sp, #8]
 80a2946:	2800      	cmp	r0, #0
 80a2948:	d0f0      	beq.n	80a292c <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 80a294a:	f003 fb1d 	bl	80a5f88 <mbedtls_md_get_size>

    // checking for integer underflow
    if( 2 * hlen + 2 > ilen )
 80a294e:	f100 0801 	add.w	r8, r0, #1
 80a2952:	ea4f 0548 	mov.w	r5, r8, lsl #1
 80a2956:	42af      	cmp	r7, r5

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 80a2958:	4604      	mov	r4, r0

    // checking for integer underflow
    if( 2 * hlen + 2 > ilen )
 80a295a:	d3e7      	bcc.n	80a292c <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
 80a295c:	f10d 0960 	add.w	r9, sp, #96	; 0x60
    /*
     * RSA operation
     */
    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 80a2960:	f1bb 0f00 	cmp.w	fp, #0
 80a2964:	d106      	bne.n	80a2974 <mbedtls_rsa_rsaes_oaep_decrypt+0x64>
 80a2966:	464a      	mov	r2, r9
 80a2968:	f8dd 1494 	ldr.w	r1, [sp, #1172]	; 0x494
 80a296c:	4630      	mov	r0, r6
 80a296e:	f7ff fcb1 	bl	80a22d4 <mbedtls_rsa_public>
 80a2972:	e008      	b.n	80a2986 <mbedtls_rsa_rsaes_oaep_decrypt+0x76>
 80a2974:	f8cd 9000 	str.w	r9, [sp]
 80a2978:	f8dd 3494 	ldr.w	r3, [sp, #1172]	; 0x494
 80a297c:	9a03      	ldr	r2, [sp, #12]
 80a297e:	4651      	mov	r1, sl
 80a2980:	4630      	mov	r0, r6
 80a2982:	f7ff fce9 	bl	80a2358 <mbedtls_rsa_private>
 80a2986:	4682      	mov	sl, r0

    if( ret != 0 )
 80a2988:	2800      	cmp	r0, #0
 80a298a:	d13c      	bne.n	80a2a06 <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
        goto cleanup;

    /*
     * Unmask data and generate lHash
     */
    mbedtls_md_init( &md_ctx );
 80a298c:	ae05      	add	r6, sp, #20
 80a298e:	4630      	mov	r0, r6
 80a2990:	f003 f9cc 	bl	80a5d2c <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 80a2994:	4652      	mov	r2, sl
 80a2996:	9902      	ldr	r1, [sp, #8]
 80a2998:	4630      	mov	r0, r6
 80a299a:	f003 f9ed 	bl	80a5d78 <mbedtls_md_setup>
 80a299e:	4682      	mov	sl, r0
 80a29a0:	b108      	cbz	r0, 80a29a6 <mbedtls_rsa_rsaes_oaep_decrypt+0x96>
    {
        mbedtls_md_free( &md_ctx );
 80a29a2:	4630      	mov	r0, r6
 80a29a4:	e03b      	b.n	80a2a1e <mbedtls_rsa_rsaes_oaep_decrypt+0x10e>
        goto cleanup;
    }

    /* seed: Apply seedMask to maskedSeed */
    if( ( ret = mgf_mask( buf + 1, hlen, buf + hlen + 1, ilen - hlen - 1,
 80a29a6:	f107 3bff 	add.w	fp, r7, #4294967295
 80a29aa:	44c8      	add	r8, r9
 80a29ac:	ebc4 0b0b 	rsb	fp, r4, fp
                          &md_ctx ) ) != 0 ||
 80a29b0:	9600      	str	r6, [sp, #0]
 80a29b2:	465b      	mov	r3, fp
 80a29b4:	4642      	mov	r2, r8
 80a29b6:	4621      	mov	r1, r4
 80a29b8:	f10d 0061 	add.w	r0, sp, #97	; 0x61
 80a29bc:	f7ff f9de 	bl	80a1d7c <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 80a29c0:	4682      	mov	sl, r0
 80a29c2:	bb58      	cbnz	r0, 80a2a1c <mbedtls_rsa_rsaes_oaep_decrypt+0x10c>
 80a29c4:	9600      	str	r6, [sp, #0]
 80a29c6:	4623      	mov	r3, r4
 80a29c8:	f10d 0261 	add.w	r2, sp, #97	; 0x61
 80a29cc:	4659      	mov	r1, fp
 80a29ce:	4640      	mov	r0, r8
 80a29d0:	f7ff f9d4 	bl	80a1d7c <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 80a29d4:	4682      	mov	sl, r0
 80a29d6:	bb08      	cbnz	r0, 80a2a1c <mbedtls_rsa_rsaes_oaep_decrypt+0x10c>
 80a29d8:	e024      	b.n	80a2a24 <mbedtls_rsa_rsaes_oaep_decrypt+0x114>
     * The only information "leaked" is whether the padding was correct or not
     * (eg, no data is copied if it was not correct). This meets the
     * recommendations in PKCS#1 v2.2: an opponent cannot distinguish between
     * the different error conditions.
     */
    if( bad != 0 )
 80a29da:	5c88      	ldrb	r0, [r1, r2]
 80a29dc:	f080 0001 	eor.w	r0, r0, #1
 80a29e0:	ea50 030e 	orrs.w	r3, r0, lr
 80a29e4:	d151      	bne.n	80a2a8a <mbedtls_rsa_rsaes_oaep_decrypt+0x17a>
        pad_done |= p[i];
        pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
    }

    p += pad_len;
    bad |= *p++ ^ 0x01;
 80a29e6:	3201      	adds	r2, #1
 80a29e8:	4411      	add	r1, r2
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
 80a29ea:	aa18      	add	r2, sp, #96	; 0x60
 80a29ec:	1a8a      	subs	r2, r1, r2
 80a29ee:	f8dd 049c 	ldr.w	r0, [sp, #1180]	; 0x49c
 80a29f2:	1aba      	subs	r2, r7, r2
 80a29f4:	4282      	cmp	r2, r0
 80a29f6:	d84b      	bhi.n	80a2a90 <mbedtls_rsa_rsaes_oaep_decrypt+0x180>
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
        goto cleanup;
    }

    *olen = ilen - (p - buf);
 80a29f8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
 80a29fc:	6002      	str	r2, [r0, #0]
    memcpy( output, p, *olen );
 80a29fe:	f8dd 0498 	ldr.w	r0, [sp, #1176]	; 0x498
 80a2a02:	f00c fb76 	bl	80af0f2 <memcpy>
    ret = 0;

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
 80a2a06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80a2a0a:	a818      	add	r0, sp, #96	; 0x60
 80a2a0c:	f7ff f9ae 	bl	80a1d6c <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( lhash, sizeof( lhash ) );
 80a2a10:	a808      	add	r0, sp, #32
 80a2a12:	2140      	movs	r1, #64	; 0x40
 80a2a14:	f7ff f9aa 	bl	80a1d6c <_ZL15mbedtls_zeroizePvj>

    return( ret );
 80a2a18:	4650      	mov	r0, sl
 80a2a1a:	e03c      	b.n	80a2a96 <mbedtls_rsa_rsaes_oaep_decrypt+0x186>
                          &md_ctx ) ) != 0 ||
    /* DB: Apply dbMask to maskedDB */
        ( ret = mgf_mask( buf + hlen + 1, ilen - hlen - 1, buf + 1, hlen,
                          &md_ctx ) ) != 0 )
    {
        mbedtls_md_free( &md_ctx );
 80a2a1c:	a805      	add	r0, sp, #20
 80a2a1e:	f003 f98a 	bl	80a5d36 <mbedtls_md_free>
        goto cleanup;
 80a2a22:	e7f0      	b.n	80a2a06 <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
    }

    mbedtls_md_free( &md_ctx );
 80a2a24:	4630      	mov	r0, r6

    /* Generate lHash */
    if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )
 80a2a26:	ae08      	add	r6, sp, #32
    {
        mbedtls_md_free( &md_ctx );
        goto cleanup;
    }

    mbedtls_md_free( &md_ctx );
 80a2a28:	f003 f985 	bl	80a5d36 <mbedtls_md_free>

    /* Generate lHash */
    if( ( ret = mbedtls_md( md_info, label, label_len, lhash ) ) != 0 )
 80a2a2c:	4633      	mov	r3, r6
 80a2a2e:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
 80a2a32:	f8dd 1488 	ldr.w	r1, [sp, #1160]	; 0x488
 80a2a36:	9802      	ldr	r0, [sp, #8]
 80a2a38:	f003 f9de 	bl	80a5df8 <mbedtls_md>
 80a2a3c:	4682      	mov	sl, r0
 80a2a3e:	2800      	cmp	r0, #0
 80a2a40:	d1e1      	bne.n	80a2a06 <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
 80a2a42:	4650      	mov	r0, sl
    p = buf;
    bad = 0;

    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */
 80a2a44:	f10d 0361 	add.w	r3, sp, #97	; 0x61
     * Check contents, in "constant-time"
     */
    p = buf;
    bad = 0;

    bad |= *p++; /* First byte must be 0 */
 80a2a48:	f899 e000 	ldrb.w	lr, [r9]

    p += hlen; /* Skip seed */
 80a2a4c:	1919      	adds	r1, r3, r4

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
 80a2a4e:	42a0      	cmp	r0, r4
 80a2a50:	d208      	bcs.n	80a2a64 <mbedtls_rsa_rsaes_oaep_decrypt+0x154>
        bad |= lhash[i] ^ *p++;
 80a2a52:	5c32      	ldrb	r2, [r6, r0]
 80a2a54:	f811 c000 	ldrb.w	ip, [r1, r0]
    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
 80a2a58:	3001      	adds	r0, #1
        bad |= lhash[i] ^ *p++;
 80a2a5a:	ea82 0c0c 	eor.w	ip, r2, ip
 80a2a5e:	ea4c 0e0e 	orr.w	lr, ip, lr
    bad |= *p++; /* First byte must be 0 */

    p += hlen; /* Skip seed */

    /* Check lHash */
    for( i = 0; i < hlen; i++ )
 80a2a62:	e7f4      	b.n	80a2a4e <mbedtls_rsa_rsaes_oaep_decrypt+0x13e>
 80a2a64:	4421      	add	r1, r4

    /* Get zero-padding len, but always read till end of buffer
     * (minus one, for the 01 byte) */
    pad_len = 0;
    pad_done = 0;
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
 80a2a66:	2400      	movs	r4, #0
 80a2a68:	460e      	mov	r6, r1
 80a2a6a:	4622      	mov	r2, r4
 80a2a6c:	1b7d      	subs	r5, r7, r5
 80a2a6e:	440d      	add	r5, r1
 80a2a70:	42b5      	cmp	r5, r6
 80a2a72:	d0b2      	beq.n	80a29da <mbedtls_rsa_rsaes_oaep_decrypt+0xca>
    {
        pad_done |= p[i];
 80a2a74:	f816 0b01 	ldrb.w	r0, [r6], #1
 80a2a78:	4304      	orrs	r4, r0
        pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 80a2a7a:	4260      	negs	r0, r4
 80a2a7c:	4320      	orrs	r0, r4
 80a2a7e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 80a2a82:	f080 0001 	eor.w	r0, r0, #1
 80a2a86:	4402      	add	r2, r0

    /* Get zero-padding len, but always read till end of buffer
     * (minus one, for the 01 byte) */
    pad_len = 0;
    pad_done = 0;
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
 80a2a88:	e7f2      	b.n	80a2a70 <mbedtls_rsa_rsaes_oaep_decrypt+0x160>
     * recommendations in PKCS#1 v2.2: an opponent cannot distinguish between
     * the different error conditions.
     */
    if( bad != 0 )
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 80a2a8a:	f8df a018 	ldr.w	sl, [pc, #24]	; 80a2aa4 <mbedtls_rsa_rsaes_oaep_decrypt+0x194>
 80a2a8e:	e7ba      	b.n	80a2a06 <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
 80a2a90:	f8df a014 	ldr.w	sl, [pc, #20]	; 80a2aa8 <mbedtls_rsa_rsaes_oaep_decrypt+0x198>
 80a2a94:	e7b7      	b.n	80a2a06 <mbedtls_rsa_rsaes_oaep_decrypt+0xf6>
cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
    mbedtls_zeroize( lhash, sizeof( lhash ) );

    return( ret );
}
 80a2a96:	f20d 4d64 	addw	sp, sp, #1124	; 0x464
 80a2a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2a9e:	bf00      	nop
 80a2aa0:	ffffbf80 	.word	0xffffbf80
 80a2aa4:	ffffbf00 	.word	0xffffbf00
 80a2aa8:	ffffbc00 	.word	0xffffbc00

080a2aac <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>:
                                 void *p_rng,
                                 int mode, size_t *olen,
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
 80a2aac:	b5f0      	push	{r4, r5, r6, r7, lr}
    int ret;
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80a2aae:	2b01      	cmp	r3, #1
                                 void *p_rng,
                                 int mode, size_t *olen,
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
 80a2ab0:	f2ad 4d0c 	subw	sp, sp, #1036	; 0x40c
 80a2ab4:	461d      	mov	r5, r3
    int ret;
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80a2ab6:	d103      	bne.n	80a2ac0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x14>
 80a2ab8:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80a2abc:	2b00      	cmp	r3, #0
 80a2abe:	d17f      	bne.n	80a2bc0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x114>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ilen = ctx->len;
 80a2ac0:	6847      	ldr	r7, [r0, #4]

    if( ilen < 16 || ilen > sizeof( buf ) )
 80a2ac2:	f1a7 0310 	sub.w	r3, r7, #16
 80a2ac6:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 80a2aca:	d879      	bhi.n	80a2bc0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x114>
 80a2acc:	ae02      	add	r6, sp, #8
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 80a2ace:	b945      	cbnz	r5, 80a2ae2 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x36>
 80a2ad0:	4632      	mov	r2, r6
 80a2ad2:	f8dd 1424 	ldr.w	r1, [sp, #1060]	; 0x424
 80a2ad6:	f7ff fbfd 	bl	80a22d4 <mbedtls_rsa_public>

    if( ret != 0 )
 80a2ada:	4604      	mov	r4, r0
 80a2adc:	2800      	cmp	r0, #0
 80a2ade:	d168      	bne.n	80a2bb2 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>
 80a2ae0:	e02f      	b.n	80a2b42 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x96>
    if( ilen < 16 || ilen > sizeof( buf ) )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 80a2ae2:	9600      	str	r6, [sp, #0]
 80a2ae4:	f8dd 3424 	ldr.w	r3, [sp, #1060]	; 0x424
 80a2ae8:	f7ff fc36 	bl	80a2358 <mbedtls_rsa_private>

    if( ret != 0 )
 80a2aec:	4604      	mov	r4, r0
 80a2aee:	2800      	cmp	r0, #0
 80a2af0:	d15f      	bne.n	80a2bb2 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>
     * Check and get padding len in "constant-time"
     */
    bad |= *p++; /* First byte must be 0 */

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
 80a2af2:	2d01      	cmp	r5, #1
    bad = 0;

    /*
     * Check and get padding len in "constant-time"
     */
    bad |= *p++; /* First byte must be 0 */
 80a2af4:	7832      	ldrb	r2, [r6, #0]

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
 80a2af6:	d125      	bne.n	80a2b44 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x98>
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80a2af8:	4601      	mov	r1, r0
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
    int ret;
    size_t ilen, pad_count = 0, i;
 80a2afa:	4686      	mov	lr, r0
    bad |= *p++; /* First byte must be 0 */

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;
 80a2afc:	7873      	ldrb	r3, [r6, #1]

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80a2afe:	1efd      	subs	r5, r7, #3
    bad |= *p++; /* First byte must be 0 */

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;
 80a2b00:	f083 0302 	eor.w	r3, r3, #2
 80a2b04:	4313      	orrs	r3, r2

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80a2b06:	42a9      	cmp	r1, r5
 80a2b08:	d212      	bcs.n	80a2b30 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x84>
        {
            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
 80a2b0a:	1872      	adds	r2, r6, r1
 80a2b0c:	7890      	ldrb	r0, [r2, #2]
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80a2b0e:	3101      	adds	r1, #1
        {
            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
 80a2b10:	4242      	negs	r2, r0
 80a2b12:	4310      	orrs	r0, r2
 80a2b14:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 80a2b18:	f080 0001 	eor.w	r0, r0, #1
 80a2b1c:	4304      	orrs	r4, r0
 80a2b1e:	b2e4      	uxtb	r4, r4
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 80a2b20:	4262      	negs	r2, r4
 80a2b22:	4322      	orrs	r2, r4
 80a2b24:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 80a2b28:	f082 0201 	eor.w	r2, r2, #1
 80a2b2c:	4496      	add	lr, r2
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80a2b2e:	e7ea      	b.n	80a2b06 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x5a>
            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
        }

        p += pad_count;
        bad |= *p++; /* Must be zero */
 80a2b30:	f10d 020a 	add.w	r2, sp, #10
 80a2b34:	f10e 0101 	add.w	r1, lr, #1
 80a2b38:	4411      	add	r1, r2
 80a2b3a:	f812 200e 	ldrb.w	r2, [r2, lr]
 80a2b3e:	4313      	orrs	r3, r2
 80a2b40:	e01e      	b.n	80a2b80 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xd4>
    bad = 0;

    /*
     * Check and get padding len in "constant-time"
     */
    bad |= *p++; /* First byte must be 0 */
 80a2b42:	7832      	ldrb	r2, [r6, #0]
        p += pad_count;
        bad |= *p++; /* Must be zero */
    }
    else
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;
 80a2b44:	7873      	ldrb	r3, [r6, #1]

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80a2b46:	1efc      	subs	r4, r7, #3
        p += pad_count;
        bad |= *p++; /* Must be zero */
    }
    else
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;
 80a2b48:	f083 0301 	eor.w	r3, r3, #1
 80a2b4c:	4313      	orrs	r3, r2
                                 unsigned char *output,
                                 size_t output_max_len)
{
    int ret;
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
 80a2b4e:	2200      	movs	r2, #0
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80a2b50:	4611      	mov	r1, r2
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
    int ret;
    size_t ilen, pad_count = 0, i;
 80a2b52:	4696      	mov	lr, r2
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80a2b54:	42a1      	cmp	r1, r4
 80a2b56:	d20b      	bcs.n	80a2b70 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xc4>
        {
            pad_done |= ( p[i] != 0xFF );
 80a2b58:	1870      	adds	r0, r6, r1
 80a2b5a:	7880      	ldrb	r0, [r0, #2]
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80a2b5c:	3101      	adds	r1, #1
        {
            pad_done |= ( p[i] != 0xFF );
 80a2b5e:	28ff      	cmp	r0, #255	; 0xff
 80a2b60:	bf18      	it	ne
 80a2b62:	f042 0201 	orrne.w	r2, r2, #1
            pad_count += ( pad_done == 0 );
 80a2b66:	f082 0001 	eor.w	r0, r2, #1
 80a2b6a:	b2c0      	uxtb	r0, r0
 80a2b6c:	4486      	add	lr, r0
    {
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 80a2b6e:	e7f1      	b.n	80a2b54 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xa8>
            pad_done |= ( p[i] != 0xFF );
            pad_count += ( pad_done == 0 );
        }

        p += pad_count;
        bad |= *p++; /* Must be zero */
 80a2b70:	f10d 020a 	add.w	r2, sp, #10
 80a2b74:	f812 500e 	ldrb.w	r5, [r2, lr]
 80a2b78:	f10e 0101 	add.w	r1, lr, #1
 80a2b7c:	4411      	add	r1, r2
 80a2b7e:	432b      	orrs	r3, r5
    }

    bad |= ( pad_count < 8 );

    if( bad )
 80a2b80:	f1be 0f07 	cmp.w	lr, #7
 80a2b84:	bf8c      	ite	hi
 80a2b86:	461c      	movhi	r4, r3
 80a2b88:	f043 0401 	orrls.w	r4, r3, #1
 80a2b8c:	b264      	sxtb	r4, r4
 80a2b8e:	b96c      	cbnz	r4, 80a2bac <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x100>
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
 80a2b90:	1b8a      	subs	r2, r1, r6
 80a2b92:	f8dd 342c 	ldr.w	r3, [sp, #1068]	; 0x42c
 80a2b96:	1aba      	subs	r2, r7, r2
 80a2b98:	429a      	cmp	r2, r3
 80a2b9a:	d809      	bhi.n	80a2bb0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x104>
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
        goto cleanup;
    }

    *olen = ilen - (p - buf);
 80a2b9c:	f8dd 3420 	ldr.w	r3, [sp, #1056]	; 0x420
    memcpy( output, p, *olen );
 80a2ba0:	f8dd 0428 	ldr.w	r0, [sp, #1064]	; 0x428
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
        goto cleanup;
    }

    *olen = ilen - (p - buf);
 80a2ba4:	601a      	str	r2, [r3, #0]
    memcpy( output, p, *olen );
 80a2ba6:	f00c faa4 	bl	80af0f2 <memcpy>
 80a2baa:	e002      	b.n	80a2bb2 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>

    bad |= ( pad_count < 8 );

    if( bad )
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 80a2bac:	4c06      	ldr	r4, [pc, #24]	; (80a2bc8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x11c>)
 80a2bae:	e000      	b.n	80a2bb2 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
 80a2bb0:	4c06      	ldr	r4, [pc, #24]	; (80a2bcc <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x120>)
    *olen = ilen - (p - buf);
    memcpy( output, p, *olen );
    ret = 0;

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
 80a2bb2:	4630      	mov	r0, r6
 80a2bb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80a2bb8:	f7ff f8d8 	bl	80a1d6c <_ZL15mbedtls_zeroizePvj>

    return( ret );
 80a2bbc:	4620      	mov	r0, r4
 80a2bbe:	e000      	b.n	80a2bc2 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x116>
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80a2bc0:	4803      	ldr	r0, [pc, #12]	; (80a2bd0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x124>)

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );

    return( ret );
}
 80a2bc2:	f20d 4d0c 	addw	sp, sp, #1036	; 0x40c
 80a2bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2bc8:	ffffbf00 	.word	0xffffbf00
 80a2bcc:	ffffbc00 	.word	0xffffbc00
 80a2bd0:	ffffbf80 	.word	0xffffbf80

080a2bd4 <mbedtls_rsa_pkcs1_decrypt>:
                       void *p_rng,
                       int mode, size_t *olen,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t output_max_len)
{
 80a2bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2bd6:	b087      	sub	sp, #28
    switch( ctx->padding )
 80a2bd8:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	; 0xa4
                       void *p_rng,
                       int mode, size_t *olen,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t output_max_len)
{
 80a2bdc:	ac0c      	add	r4, sp, #48	; 0x30
 80a2bde:	ccf0      	ldmia	r4, {r4, r5, r6, r7}
    switch( ctx->padding )
 80a2be0:	f1be 0f00 	cmp.w	lr, #0
 80a2be4:	d00c      	beq.n	80a2c00 <mbedtls_rsa_pkcs1_decrypt+0x2c>
 80a2be6:	f1be 0f01 	cmp.w	lr, #1
 80a2bea:	d112      	bne.n	80a2c12 <mbedtls_rsa_pkcs1_decrypt+0x3e>

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsaes_oaep_decrypt( ctx, f_rng, p_rng, mode, NULL, 0,
                                           olen, input, output,
                                           output_max_len );
 80a2bec:	9402      	str	r4, [sp, #8]
 80a2bee:	2400      	movs	r4, #0
 80a2bf0:	9705      	str	r7, [sp, #20]
 80a2bf2:	9604      	str	r6, [sp, #16]
 80a2bf4:	9503      	str	r5, [sp, #12]
 80a2bf6:	9401      	str	r4, [sp, #4]
 80a2bf8:	9400      	str	r4, [sp, #0]
 80a2bfa:	f7ff fe89 	bl	80a2910 <mbedtls_rsa_rsaes_oaep_decrypt>
 80a2bfe:	e009      	b.n	80a2c14 <mbedtls_rsa_pkcs1_decrypt+0x40>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
                                                input, output, output_max_len );
 80a2c00:	970f      	str	r7, [sp, #60]	; 0x3c
 80a2c02:	960e      	str	r6, [sp, #56]	; 0x38
 80a2c04:	950d      	str	r5, [sp, #52]	; 0x34
 80a2c06:	940c      	str	r4, [sp, #48]	; 0x30
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 80a2c08:	b007      	add	sp, #28
 80a2c0a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
                                                input, output, output_max_len );
 80a2c0e:	f7ff bf4d 	b.w	80a2aac <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>
                                           olen, input, output,
                                           output_max_len );
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 80a2c12:	4801      	ldr	r0, [pc, #4]	; (80a2c18 <mbedtls_rsa_pkcs1_decrypt+0x44>)
    }
}
 80a2c14:	b007      	add	sp, #28
 80a2c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2c18:	ffffbf00 	.word	0xffffbf00

080a2c1c <mbedtls_rsa_rsassa_pss_sign>:
                         int mode,
                         mbedtls_md_type_t md_alg,
                         unsigned int hashlen,
                         const unsigned char *hash,
                         unsigned char *sig )
{
 80a2c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret;
    size_t msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80a2c20:	2b01      	cmp	r3, #1
                         int mode,
                         mbedtls_md_type_t md_alg,
                         unsigned int hashlen,
                         const unsigned char *hash,
                         unsigned char *sig )
{
 80a2c22:	b09d      	sub	sp, #116	; 0x74
 80a2c24:	4680      	mov	r8, r0
 80a2c26:	468a      	mov	sl, r1
 80a2c28:	9204      	str	r2, [sp, #16]
 80a2c2a:	9305      	str	r3, [sp, #20]
 80a2c2c:	f89d 0098 	ldrb.w	r0, [sp, #152]	; 0x98
 80a2c30:	9c29      	ldr	r4, [sp, #164]	; 0xa4
    int ret;
    size_t msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80a2c32:	d105      	bne.n	80a2c40 <mbedtls_rsa_rsassa_pss_sign+0x24>
 80a2c34:	f8d8 30a4 	ldr.w	r3, [r8, #164]	; 0xa4
 80a2c38:	2b01      	cmp	r3, #1
 80a2c3a:	d001      	beq.n	80a2c40 <mbedtls_rsa_rsassa_pss_sign+0x24>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80a2c3c:	4858      	ldr	r0, [pc, #352]	; (80a2da0 <mbedtls_rsa_rsassa_pss_sign+0x184>)
 80a2c3e:	e0ab      	b.n	80a2d98 <mbedtls_rsa_rsassa_pss_sign+0x17c>

    if( f_rng == NULL )
 80a2c40:	f1ba 0f00 	cmp.w	sl, #0
 80a2c44:	d0fa      	beq.n	80a2c3c <mbedtls_rsa_rsassa_pss_sign+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;
 80a2c46:	f8d8 6004 	ldr.w	r6, [r8, #4]

    if( md_alg != MBEDTLS_MD_NONE )
 80a2c4a:	b130      	cbz	r0, 80a2c5a <mbedtls_rsa_rsassa_pss_sign+0x3e>
    {
        /* Gather length of hash to sign */
        md_info = mbedtls_md_info_from_type( md_alg );
 80a2c4c:	f003 f862 	bl	80a5d14 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 80a2c50:	2800      	cmp	r0, #0
 80a2c52:	d0f3      	beq.n	80a2c3c <mbedtls_rsa_rsassa_pss_sign+0x20>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
 80a2c54:	f003 f998 	bl	80a5f88 <mbedtls_md_get_size>
 80a2c58:	9027      	str	r0, [sp, #156]	; 0x9c
    }

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 80a2c5a:	f898 00a8 	ldrb.w	r0, [r8, #168]	; 0xa8
 80a2c5e:	f003 f859 	bl	80a5d14 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 80a2c62:	4683      	mov	fp, r0
 80a2c64:	2800      	cmp	r0, #0
 80a2c66:	d0e9      	beq.n	80a2c3c <mbedtls_rsa_rsassa_pss_sign+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 80a2c68:	f003 f98e 	bl	80a5f88 <mbedtls_md_get_size>
    slen = hlen;

    if( olen < hlen + slen + 2 )
 80a2c6c:	0045      	lsls	r5, r0, #1
 80a2c6e:	1cab      	adds	r3, r5, #2
 80a2c70:	429e      	cmp	r6, r3

    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 80a2c72:	4607      	mov	r7, r0
    slen = hlen;

    if( olen < hlen + slen + 2 )
 80a2c74:	d3e2      	bcc.n	80a2c3c <mbedtls_rsa_rsassa_pss_sign+0x20>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    memset( sig, 0, olen );
 80a2c76:	4632      	mov	r2, r6
 80a2c78:	2100      	movs	r1, #0
 80a2c7a:	4620      	mov	r0, r4
 80a2c7c:	f00c fa5f 	bl	80af13e <memset>

    /* Generate salt of length slen */
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
 80a2c80:	463a      	mov	r2, r7
 80a2c82:	a90c      	add	r1, sp, #48	; 0x30
 80a2c84:	9804      	ldr	r0, [sp, #16]
 80a2c86:	47d0      	blx	sl
 80a2c88:	b110      	cbz	r0, 80a2c90 <mbedtls_rsa_rsassa_pss_sign+0x74>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 80a2c8a:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
 80a2c8e:	e083      	b.n	80a2d98 <mbedtls_rsa_rsassa_pss_sign+0x17c>

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80a2c90:	f108 0308 	add.w	r3, r8, #8
 80a2c94:	9007      	str	r0, [sp, #28]
 80a2c96:	4618      	mov	r0, r3
 80a2c98:	9303      	str	r3, [sp, #12]
 80a2c9a:	f006 fba0 	bl	80a93de <mbedtls_mpi_bitlen>
    p += olen - hlen * 2 - 2;
 80a2c9e:	1b75      	subs	r5, r6, r5
    *p++ = 0x01;
 80a2ca0:	f105 39ff 	add.w	r9, r5, #4294967295
 80a2ca4:	2201      	movs	r2, #1
 80a2ca6:	4425      	add	r5, r4
 80a2ca8:	44a1      	add	r9, r4
 80a2caa:	f805 2c02 	strb.w	r2, [r5, #-2]
    memcpy( p, salt, slen );
 80a2cae:	a90c      	add	r1, sp, #48	; 0x30
 80a2cb0:	463a      	mov	r2, r7
    /* Generate salt of length slen */
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80a2cb2:	9006      	str	r0, [sp, #24]
    p += olen - hlen * 2 - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
    p += slen;

    mbedtls_md_init( &md_ctx );
 80a2cb4:	ad09      	add	r5, sp, #36	; 0x24

    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    p += olen - hlen * 2 - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
 80a2cb6:	4648      	mov	r0, r9
 80a2cb8:	f00c fa1b 	bl	80af0f2 <memcpy>
    p += slen;

    mbedtls_md_init( &md_ctx );
 80a2cbc:	4628      	mov	r0, r5
 80a2cbe:	f003 f835 	bl	80a5d2c <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 80a2cc2:	9b07      	ldr	r3, [sp, #28]
 80a2cc4:	4659      	mov	r1, fp
 80a2cc6:	461a      	mov	r2, r3
 80a2cc8:	4628      	mov	r0, r5
 80a2cca:	f003 f855 	bl	80a5d78 <mbedtls_md_setup>
 80a2cce:	4602      	mov	r2, r0
 80a2cd0:	2800      	cmp	r0, #0
 80a2cd2:	d14a      	bne.n	80a2d6a <mbedtls_rsa_rsassa_pss_sign+0x14e>
        goto exit;

    /* Generate H = Hash( M' ) */
    if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
 80a2cd4:	4628      	mov	r0, r5
 80a2cd6:	f003 f871 	bl	80a5dbc <mbedtls_md_starts>
 80a2cda:	4602      	mov	r2, r0
 80a2cdc:	2800      	cmp	r0, #0
 80a2cde:	d144      	bne.n	80a2d6a <mbedtls_rsa_rsassa_pss_sign+0x14e>
    /* Note: EMSA-PSS encoding is over the length of N - 1 bits */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    p += olen - hlen * 2 - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
    p += slen;
 80a2ce0:	eb09 0b07 	add.w	fp, r9, r7
        goto exit;

    /* Generate H = Hash( M' ) */
    if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
        goto exit;
    if( ( ret = mbedtls_md_update( &md_ctx, p, 8 ) ) != 0 )
 80a2ce4:	2208      	movs	r2, #8
 80a2ce6:	4659      	mov	r1, fp
 80a2ce8:	4628      	mov	r0, r5
 80a2cea:	f003 f871 	bl	80a5dd0 <mbedtls_md_update>
 80a2cee:	4602      	mov	r2, r0
 80a2cf0:	2800      	cmp	r0, #0
 80a2cf2:	d13a      	bne.n	80a2d6a <mbedtls_rsa_rsassa_pss_sign+0x14e>
        goto exit;
    if( ( ret = mbedtls_md_update( &md_ctx, hash, hashlen ) ) != 0 )
 80a2cf4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80a2cf6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80a2cf8:	4628      	mov	r0, r5
 80a2cfa:	f003 f869 	bl	80a5dd0 <mbedtls_md_update>
 80a2cfe:	4602      	mov	r2, r0
 80a2d00:	bb98      	cbnz	r0, 80a2d6a <mbedtls_rsa_rsassa_pss_sign+0x14e>
        goto exit;
    if( ( ret = mbedtls_md_update( &md_ctx, salt, slen ) ) != 0 )
 80a2d02:	463a      	mov	r2, r7
 80a2d04:	a90c      	add	r1, sp, #48	; 0x30
 80a2d06:	4628      	mov	r0, r5
 80a2d08:	f003 f862 	bl	80a5dd0 <mbedtls_md_update>
 80a2d0c:	4602      	mov	r2, r0
 80a2d0e:	bb60      	cbnz	r0, 80a2d6a <mbedtls_rsa_rsassa_pss_sign+0x14e>
        goto exit;
    if( ( ret = mbedtls_md_finish( &md_ctx, p ) ) != 0 )
 80a2d10:	4659      	mov	r1, fp
 80a2d12:	4628      	mov	r0, r5
 80a2d14:	f003 f866 	bl	80a5de4 <mbedtls_md_finish>
 80a2d18:	4602      	mov	r2, r0
 80a2d1a:	bb30      	cbnz	r0, 80a2d6a <mbedtls_rsa_rsassa_pss_sign+0x14e>
                         unsigned char *sig )
{
    size_t olen;
    unsigned char *p = sig;
    unsigned char salt[MBEDTLS_MD_MAX_SIZE];
    unsigned int slen, hlen, offset = 0;
 80a2d1c:	9b06      	ldr	r3, [sp, #24]
    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
        offset = 1;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
 80a2d1e:	1e71      	subs	r1, r6, #1
                         unsigned char *sig )
{
    size_t olen;
    unsigned char *p = sig;
    unsigned char salt[MBEDTLS_MD_MAX_SIZE];
    unsigned int slen, hlen, offset = 0;
 80a2d20:	3b01      	subs	r3, #1
 80a2d22:	f013 0f07 	tst.w	r3, #7
 80a2d26:	bf0c      	ite	eq
 80a2d28:	2001      	moveq	r0, #1
 80a2d2a:	2000      	movne	r0, #0
    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
        offset = 1;

    /* maskedDB: Apply dbMask to DB */
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
 80a2d2c:	1bc9      	subs	r1, r1, r7
 80a2d2e:	465a      	mov	r2, fp
 80a2d30:	1a09      	subs	r1, r1, r0
 80a2d32:	9500      	str	r5, [sp, #0]
 80a2d34:	463b      	mov	r3, r7
 80a2d36:	4420      	add	r0, r4
 80a2d38:	f7ff f820 	bl	80a1d7c <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
 80a2d3c:	4602      	mov	r2, r0
 80a2d3e:	b9a0      	cbnz	r0, 80a2d6a <mbedtls_rsa_rsassa_pss_sign+0x14e>
 80a2d40:	9006      	str	r0, [sp, #24]
                          &md_ctx ) ) != 0 )
        goto exit;

    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80a2d42:	9803      	ldr	r0, [sp, #12]
 80a2d44:	f006 fb4b 	bl	80a93de <mbedtls_mpi_bitlen>
    sig[0] &= 0xFF >> ( olen * 8 - msb );
 80a2d48:	ebc0 00c6 	rsb	r0, r0, r6, lsl #3
 80a2d4c:	7823      	ldrb	r3, [r4, #0]
 80a2d4e:	3001      	adds	r0, #1
 80a2d50:	26ff      	movs	r6, #255	; 0xff
 80a2d52:	fa46 f000 	asr.w	r0, r6, r0
 80a2d56:	4018      	ands	r0, r3

    p += hlen;
    *p++ = 0xBC;
 80a2d58:	23bc      	movs	r3, #188	; 0xbc
    if( ( ret = mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen,
                          &md_ctx ) ) != 0 )
        goto exit;

    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    sig[0] &= 0xFF >> ( olen * 8 - msb );
 80a2d5a:	7020      	strb	r0, [r4, #0]

    p += hlen;
    *p++ = 0xBC;

    mbedtls_zeroize( salt, sizeof( salt ) );
 80a2d5c:	2140      	movs	r1, #64	; 0x40

    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
    sig[0] &= 0xFF >> ( olen * 8 - msb );

    p += hlen;
    *p++ = 0xBC;
 80a2d5e:	f809 3017 	strb.w	r3, [r9, r7, lsl #1]

    mbedtls_zeroize( salt, sizeof( salt ) );
 80a2d62:	a80c      	add	r0, sp, #48	; 0x30
 80a2d64:	f7ff f802 	bl	80a1d6c <_ZL15mbedtls_zeroizePvj>
 80a2d68:	9a06      	ldr	r2, [sp, #24]

exit:
    mbedtls_md_free( &md_ctx );
 80a2d6a:	4628      	mov	r0, r5
 80a2d6c:	9203      	str	r2, [sp, #12]
 80a2d6e:	f002 ffe2 	bl	80a5d36 <mbedtls_md_free>

    if( ret != 0 )
 80a2d72:	9a03      	ldr	r2, [sp, #12]
 80a2d74:	b97a      	cbnz	r2, 80a2d96 <mbedtls_rsa_rsassa_pss_sign+0x17a>
        return( ret );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, sig, sig )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig ) );
 80a2d76:	9b05      	ldr	r3, [sp, #20]
 80a2d78:	b92b      	cbnz	r3, 80a2d86 <mbedtls_rsa_rsassa_pss_sign+0x16a>
 80a2d7a:	4622      	mov	r2, r4
 80a2d7c:	4621      	mov	r1, r4
 80a2d7e:	4640      	mov	r0, r8
 80a2d80:	f7ff faa8 	bl	80a22d4 <mbedtls_rsa_public>
 80a2d84:	e008      	b.n	80a2d98 <mbedtls_rsa_rsassa_pss_sign+0x17c>
 80a2d86:	9400      	str	r4, [sp, #0]
 80a2d88:	4623      	mov	r3, r4
 80a2d8a:	9a04      	ldr	r2, [sp, #16]
 80a2d8c:	4651      	mov	r1, sl
 80a2d8e:	4640      	mov	r0, r8
 80a2d90:	f7ff fae2 	bl	80a2358 <mbedtls_rsa_private>
 80a2d94:	e000      	b.n	80a2d98 <mbedtls_rsa_rsassa_pss_sign+0x17c>
 80a2d96:	4610      	mov	r0, r2
}
 80a2d98:	b01d      	add	sp, #116	; 0x74
 80a2d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2d9e:	bf00      	nop
 80a2da0:	ffffbf80 	.word	0xffffbf80

080a2da4 <mbedtls_rsa_rsassa_pkcs1_v15_sign>:
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
 80a2da4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    int ret;
    unsigned char *sig_try = NULL, *verif = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80a2da8:	2b01      	cmp	r3, #1
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
 80a2daa:	4689      	mov	r9, r1
 80a2dac:	a90b      	add	r1, sp, #44	; 0x2c
 80a2dae:	4605      	mov	r5, r0
 80a2db0:	4692      	mov	sl, r2
 80a2db2:	c986      	ldmia	r1, {r1, r2, r7}
 80a2db4:	461c      	mov	r4, r3
 80a2db6:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
    int ret;
    unsigned char *sig_try = NULL, *verif = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80a2dba:	d103      	bne.n	80a2dc4 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x20>
 80a2dbc:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 80a2dc0:	2b00      	cmp	r3, #0
 80a2dc2:	d14b      	bne.n	80a2e5c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xb8>

    /*
     * Prepare PKCS1-v1.5 encoding (padding and hash identifier)
     */

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash,
 80a2dc4:	9700      	str	r7, [sp, #0]
 80a2dc6:	686b      	ldr	r3, [r5, #4]
 80a2dc8:	f7ff f82a 	bl	80a1e20 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>
 80a2dcc:	2800      	cmp	r0, #0
 80a2dce:	d149      	bne.n	80a2e64 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>

    /*
     * Call respective RSA primitive
     */

    if( mode == MBEDTLS_RSA_PUBLIC )
 80a2dd0:	b93c      	cbnz	r4, 80a2de2 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x3e>
    {
        /* Skip verification on a public key operation */
        return( mbedtls_rsa_public( ctx, sig, sig ) );
 80a2dd2:	463a      	mov	r2, r7
 80a2dd4:	4639      	mov	r1, r7
 80a2dd6:	4628      	mov	r0, r5
cleanup:
    mbedtls_free( sig_try );
    mbedtls_free( verif );

    return( ret );
}
 80a2dd8:	b002      	add	sp, #8
 80a2dda:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     */

    if( mode == MBEDTLS_RSA_PUBLIC )
    {
        /* Skip verification on a public key operation */
        return( mbedtls_rsa_public( ctx, sig, sig ) );
 80a2dde:	f7ff ba79 	b.w	80a22d4 <mbedtls_rsa_public>
     *
     * In order to prevent Lenstra's attack, make the signature in a
     * temporary buffer and check it before returning it.
     */

    sig_try = (unsigned char *)mbedtls_calloc( 1, ctx->len );
 80a2de2:	686c      	ldr	r4, [r5, #4]
 80a2de4:	2001      	movs	r0, #1
 80a2de6:	4621      	mov	r1, r4
 80a2de8:	f00c f95e 	bl	80af0a8 <calloc>
    if( sig_try == NULL )
 80a2dec:	4606      	mov	r6, r0
 80a2dee:	b3b8      	cbz	r0, 80a2e60 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xbc>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );

    verif = (unsigned char *)mbedtls_calloc( 1, ctx->len );
 80a2df0:	4621      	mov	r1, r4
 80a2df2:	2001      	movs	r0, #1
 80a2df4:	f00c f958 	bl	80af0a8 <calloc>
    if( verif == NULL )
 80a2df8:	4680      	mov	r8, r0
 80a2dfa:	b918      	cbnz	r0, 80a2e04 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x60>
    {
        mbedtls_free( sig_try );
 80a2dfc:	4630      	mov	r0, r6
 80a2dfe:	f00b f885 	bl	80adf0c <free>
 80a2e02:	e02d      	b.n	80a2e60 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xbc>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    }

    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
 80a2e04:	9600      	str	r6, [sp, #0]
 80a2e06:	463b      	mov	r3, r7
 80a2e08:	4652      	mov	r2, sl
 80a2e0a:	4649      	mov	r1, r9
 80a2e0c:	4628      	mov	r0, r5
 80a2e0e:	f7ff faa3 	bl	80a2358 <mbedtls_rsa_private>
 80a2e12:	4604      	mov	r4, r0
 80a2e14:	b9d0      	cbnz	r0, 80a2e4c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );
 80a2e16:	4642      	mov	r2, r8
 80a2e18:	4631      	mov	r1, r6
 80a2e1a:	4628      	mov	r0, r5
 80a2e1c:	f7ff fa5a 	bl	80a22d4 <mbedtls_rsa_public>
 80a2e20:	4604      	mov	r4, r0
 80a2e22:	b998      	cbnz	r0, 80a2e4c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa8>
static inline int mbedtls_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;
 80a2e24:	4603      	mov	r3, r0

    for( i = 0; i < n; i++ )
 80a2e26:	4602      	mov	r2, r0
    }

    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
 80a2e28:	686d      	ldr	r5, [r5, #4]
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 80a2e2a:	42aa      	cmp	r2, r5
 80a2e2c:	d007      	beq.n	80a2e3e <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x9a>
        diff |= A[i] ^ B[i];
 80a2e2e:	f818 0002 	ldrb.w	r0, [r8, r2]
 80a2e32:	5cb9      	ldrb	r1, [r7, r2]
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 80a2e34:	3201      	adds	r2, #1
        diff |= A[i] ^ B[i];
 80a2e36:	4041      	eors	r1, r0
 80a2e38:	430b      	orrs	r3, r1
 80a2e3a:	b2db      	uxtb	r3, r3
 80a2e3c:	e7f5      	b.n	80a2e2a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x86>
    }

    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
 80a2e3e:	b923      	cbnz	r3, 80a2e4a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa6>
    {
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
        goto cleanup;
    }

    memcpy( sig, sig_try, ctx->len );
 80a2e40:	4631      	mov	r1, r6
 80a2e42:	4638      	mov	r0, r7
 80a2e44:	f00c f955 	bl	80af0f2 <memcpy>
 80a2e48:	e000      	b.n	80a2e4c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa8>
    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );

    if( mbedtls_safer_memcmp( verif, sig, ctx->len ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
 80a2e4a:	4c08      	ldr	r4, [pc, #32]	; (80a2e6c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc8>)
    }

    memcpy( sig, sig_try, ctx->len );

cleanup:
    mbedtls_free( sig_try );
 80a2e4c:	4630      	mov	r0, r6
 80a2e4e:	f00b f85d 	bl	80adf0c <free>
    mbedtls_free( verif );
 80a2e52:	4640      	mov	r0, r8
 80a2e54:	f00b f85a 	bl	80adf0c <free>

    return( ret );
 80a2e58:	4620      	mov	r0, r4
 80a2e5a:	e003      	b.n	80a2e64 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>
{
    int ret;
    unsigned char *sig_try = NULL, *verif = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80a2e5c:	4804      	ldr	r0, [pc, #16]	; (80a2e70 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xcc>)
 80a2e5e:	e001      	b.n	80a2e64 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xc0>
     * temporary buffer and check it before returning it.
     */

    sig_try = (unsigned char *)mbedtls_calloc( 1, ctx->len );
    if( sig_try == NULL )
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 80a2e60:	f06f 000f 	mvn.w	r0, #15
cleanup:
    mbedtls_free( sig_try );
    mbedtls_free( verif );

    return( ret );
}
 80a2e64:	b002      	add	sp, #8
 80a2e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a2e6a:	bf00      	nop
 80a2e6c:	ffffbd00 	.word	0xffffbd00
 80a2e70:	ffffbf80 	.word	0xffffbf80

080a2e74 <mbedtls_rsa_pkcs1_sign>:
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
 80a2e74:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
 80a2e76:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	; 0xa4
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
 80a2e7a:	ad06      	add	r5, sp, #24
 80a2e7c:	f89d 4014 	ldrb.w	r4, [sp, #20]
 80a2e80:	cde0      	ldmia	r5, {r5, r6, r7}
    switch( ctx->padding )
 80a2e82:	f1be 0f00 	cmp.w	lr, #0
 80a2e86:	d00a      	beq.n	80a2e9e <mbedtls_rsa_pkcs1_sign+0x2a>
 80a2e88:	f1be 0f01 	cmp.w	lr, #1
 80a2e8c:	d10f      	bne.n	80a2eae <mbedtls_rsa_pkcs1_sign+0x3a>
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
                                        hashlen, hash, sig );
 80a2e8e:	9708      	str	r7, [sp, #32]
 80a2e90:	9607      	str	r6, [sp, #28]
 80a2e92:	9506      	str	r5, [sp, #24]
 80a2e94:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 80a2e96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
                                        hashlen, hash, sig );
 80a2e9a:	f7ff bebf 	b.w	80a2c1c <mbedtls_rsa_rsassa_pss_sign>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
                                              hashlen, hash, sig );
 80a2e9e:	9708      	str	r7, [sp, #32]
 80a2ea0:	9607      	str	r6, [sp, #28]
 80a2ea2:	9506      	str	r5, [sp, #24]
 80a2ea4:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 80a2ea6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
                                              hashlen, hash, sig );
 80a2eaa:	f7ff bf7b 	b.w	80a2da4 <mbedtls_rsa_rsassa_pkcs1_v15_sign>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 80a2eae:	4801      	ldr	r0, [pc, #4]	; (80a2eb4 <mbedtls_rsa_pkcs1_sign+0x40>)
 80a2eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2eb2:	bf00      	nop
 80a2eb4:	ffffbf00 	.word	0xffffbf00

080a2eb8 <mbedtls_rsa_rsassa_pss_verify_ext>:
                               unsigned int hashlen,
                               const unsigned char *hash,
                               mbedtls_md_type_t mgf1_hash_id,
                               int expected_salt_len,
                               const unsigned char *sig )
{
 80a2eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t observed_salt_len, msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80a2ebc:	2b01      	cmp	r3, #1
                               unsigned int hashlen,
                               const unsigned char *hash,
                               mbedtls_md_type_t mgf1_hash_id,
                               int expected_salt_len,
                               const unsigned char *sig )
{
 80a2ebe:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
 80a2ec2:	4605      	mov	r5, r0
 80a2ec4:	f89d 8488 	ldrb.w	r8, [sp, #1160]	; 0x488
    size_t observed_salt_len, msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80a2ec8:	d105      	bne.n	80a2ed6 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
 80a2eca:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
 80a2ece:	2801      	cmp	r0, #1
 80a2ed0:	d001      	beq.n	80a2ed6 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80a2ed2:	4861      	ldr	r0, [pc, #388]	; (80a3058 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a0>)
 80a2ed4:	e0bb      	b.n	80a304e <mbedtls_rsa_rsassa_pss_verify_ext+0x196>

    siglen = ctx->len;
 80a2ed6:	686f      	ldr	r7, [r5, #4]

    if( siglen < 16 || siglen > sizeof( buf ) )
 80a2ed8:	f1a7 0010 	sub.w	r0, r7, #16
 80a2edc:	f5b0 7f7c 	cmp.w	r0, #1008	; 0x3f0
 80a2ee0:	d8f7      	bhi.n	80a2ed2 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
 80a2ee2:	ae18      	add	r6, sp, #96	; 0x60
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
 80a2ee4:	b933      	cbnz	r3, 80a2ef4 <mbedtls_rsa_rsassa_pss_verify_ext+0x3c>
 80a2ee6:	4632      	mov	r2, r6
 80a2ee8:	f8dd 149c 	ldr.w	r1, [sp, #1180]	; 0x49c
 80a2eec:	4628      	mov	r0, r5
 80a2eee:	f7ff f9f1 	bl	80a22d4 <mbedtls_rsa_public>
 80a2ef2:	e005      	b.n	80a2f00 <mbedtls_rsa_rsassa_pss_verify_ext+0x48>
 80a2ef4:	9600      	str	r6, [sp, #0]
 80a2ef6:	f8dd 349c 	ldr.w	r3, [sp, #1180]	; 0x49c
 80a2efa:	4628      	mov	r0, r5
 80a2efc:	f7ff fa2c 	bl	80a2358 <mbedtls_rsa_private>

    if( ret != 0 )
 80a2f00:	2800      	cmp	r0, #0
 80a2f02:	f040 80a4 	bne.w	80a304e <mbedtls_rsa_rsassa_pss_verify_ext+0x196>
        return( ret );

    p = buf;

    if( buf[siglen - 1] != 0xBC )
 80a2f06:	1e7c      	subs	r4, r7, #1
 80a2f08:	5d33      	ldrb	r3, [r6, r4]
 80a2f0a:	2bbc      	cmp	r3, #188	; 0xbc
 80a2f0c:	f040 809e 	bne.w	80a304c <mbedtls_rsa_rsassa_pss_verify_ext+0x194>
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );

    if( md_alg != MBEDTLS_MD_NONE )
 80a2f10:	f1b8 0f00 	cmp.w	r8, #0
 80a2f14:	d008      	beq.n	80a2f28 <mbedtls_rsa_rsassa_pss_verify_ext+0x70>
    {
        /* Gather length of hash to sign */
        md_info = mbedtls_md_info_from_type( md_alg );
 80a2f16:	4640      	mov	r0, r8
 80a2f18:	f002 fefc 	bl	80a5d14 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 80a2f1c:	2800      	cmp	r0, #0
 80a2f1e:	d0d8      	beq.n	80a2ed2 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
            return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

        hashlen = mbedtls_md_get_size( md_info );
 80a2f20:	f003 f832 	bl	80a5f88 <mbedtls_md_get_size>
 80a2f24:	f8cd 048c 	str.w	r0, [sp, #1164]	; 0x48c
    }

    md_info = mbedtls_md_info_from_type( mgf1_hash_id );
 80a2f28:	f89d 0494 	ldrb.w	r0, [sp, #1172]	; 0x494
 80a2f2c:	f002 fef2 	bl	80a5d14 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 80a2f30:	4681      	mov	r9, r0
 80a2f32:	2800      	cmp	r0, #0
 80a2f34:	d0cd      	beq.n	80a2ed2 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 80a2f36:	f003 f827 	bl	80a5f88 <mbedtls_md_get_size>

    memset( zeros, 0, 8 );
 80a2f3a:	2300      	movs	r3, #0

    md_info = mbedtls_md_info_from_type( mgf1_hash_id );
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );
 80a2f3c:	4682      	mov	sl, r0
    memset( zeros, 0, 8 );

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80a2f3e:	f105 0008 	add.w	r0, r5, #8
    if( md_info == NULL )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    hlen = mbedtls_md_get_size( md_info );

    memset( zeros, 0, 8 );
 80a2f42:	9303      	str	r3, [sp, #12]
 80a2f44:	9304      	str	r3, [sp, #16]

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80a2f46:	f006 fa4a 	bl	80a93de <mbedtls_mpi_bitlen>

    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
 80a2f4a:	00fb      	lsls	r3, r7, #3
    memset( zeros, 0, 8 );

    /*
     * Note: EMSA-PSS verification is over the length of N - 1 bits
     */
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80a2f4c:	f100 38ff 	add.w	r8, r0, #4294967295

    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
 80a2f50:	7832      	ldrb	r2, [r6, #0]
 80a2f52:	f1c3 0308 	rsb	r3, r3, #8
 80a2f56:	4443      	add	r3, r8
 80a2f58:	fa52 f303 	asrs.w	r3, r2, r3
 80a2f5c:	d1b9      	bne.n	80a2ed2 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
 80a2f5e:	f018 0f07 	tst.w	r8, #7
    {
        p++;
        siglen -= 1;
 80a2f62:	bf08      	it	eq
 80a2f64:	4627      	moveq	r7, r4
    }

    if( siglen < hlen + 2 )
 80a2f66:	f10a 0302 	add.w	r3, sl, #2
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    /* Compensate for boundary condition when applying mask */
    if( msb % 8 == 0 )
    {
        p++;
 80a2f6a:	bf0c      	ite	eq
 80a2f6c:	f10d 0561 	addeq.w	r5, sp, #97	; 0x61
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );

    if( ret != 0 )
        return( ret );

    p = buf;
 80a2f70:	4635      	movne	r5, r6
    {
        p++;
        siglen -= 1;
    }

    if( siglen < hlen + 2 )
 80a2f72:	429f      	cmp	r7, r3
 80a2f74:	d3ad      	bcc.n	80a2ed2 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    hash_start = p + siglen - hlen - 1;

    mbedtls_md_init( &md_ctx );
 80a2f76:	ac05      	add	r4, sp, #20
 80a2f78:	4620      	mov	r0, r4
 80a2f7a:	f002 fed7 	bl	80a5d2c <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 80a2f7e:	2200      	movs	r2, #0
 80a2f80:	4649      	mov	r1, r9
 80a2f82:	4620      	mov	r0, r4
 80a2f84:	f002 fef8 	bl	80a5d78 <mbedtls_md_setup>
 80a2f88:	4683      	mov	fp, r0
 80a2f8a:	2800      	cmp	r0, #0
 80a2f8c:	d159      	bne.n	80a3042 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        siglen -= 1;
    }

    if( siglen < hlen + 2 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    hash_start = p + siglen - hlen - 1;
 80a2f8e:	ea6f 010a 	mvn.w	r1, sl
 80a2f92:	4439      	add	r1, r7
 80a2f94:	eb05 0901 	add.w	r9, r5, r1

    mbedtls_md_init( &md_ctx );
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
        goto exit;

    ret = mgf_mask( p, siglen - hlen - 1, hash_start, hlen, &md_ctx );
 80a2f98:	9400      	str	r4, [sp, #0]
 80a2f9a:	4653      	mov	r3, sl
 80a2f9c:	464a      	mov	r2, r9
 80a2f9e:	4628      	mov	r0, r5
 80a2fa0:	f7fe feec 	bl	80a1d7c <_ZL8mgf_maskPhjS_jP20mbedtls_md_context_t>
    if( ret != 0 )
 80a2fa4:	4683      	mov	fp, r0
 80a2fa6:	2800      	cmp	r0, #0
 80a2fa8:	d14b      	bne.n	80a3042 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;

    buf[0] &= 0xFF >> ( siglen * 8 - msb );
 80a2faa:	ebc8 07c7 	rsb	r7, r8, r7, lsl #3
 80a2fae:	7833      	ldrb	r3, [r6, #0]
 80a2fb0:	f04f 08ff 	mov.w	r8, #255	; 0xff
 80a2fb4:	fa48 f707 	asr.w	r7, r8, r7
 80a2fb8:	401f      	ands	r7, r3
 80a2fba:	7037      	strb	r7, [r6, #0]

    while( p < hash_start - 1 && *p == 0 )
 80a2fbc:	f109 32ff 	add.w	r2, r9, #4294967295
 80a2fc0:	4295      	cmp	r5, r2
 80a2fc2:	4629      	mov	r1, r5
 80a2fc4:	d203      	bcs.n	80a2fce <mbedtls_rsa_rsassa_pss_verify_ext+0x116>
 80a2fc6:	780b      	ldrb	r3, [r1, #0]
 80a2fc8:	3501      	adds	r5, #1
 80a2fca:	2b00      	cmp	r3, #0
 80a2fcc:	d0f8      	beq.n	80a2fc0 <mbedtls_rsa_rsassa_pss_verify_ext+0x108>
        p++;

    if( *p++ != 0x01 )
 80a2fce:	780b      	ldrb	r3, [r1, #0]
 80a2fd0:	2b01      	cmp	r3, #1
 80a2fd2:	d134      	bne.n	80a303e <mbedtls_rsa_rsassa_pss_verify_ext+0x186>
        goto exit;
    }

    observed_salt_len = hash_start - p;

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 80a2fd4:	f8dd 3498 	ldr.w	r3, [sp, #1176]	; 0x498
    buf[0] &= 0xFF >> ( siglen * 8 - msb );

    while( p < hash_start - 1 && *p == 0 )
        p++;

    if( *p++ != 0x01 )
 80a2fd8:	1c4d      	adds	r5, r1, #1
        goto exit;
    }

    observed_salt_len = hash_start - p;

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 80a2fda:	1c5a      	adds	r2, r3, #1
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
        goto exit;
    }

    observed_salt_len = hash_start - p;
 80a2fdc:	ebc5 0609 	rsb	r6, r5, r9

    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 80a2fe0:	d001      	beq.n	80a2fe6 <mbedtls_rsa_rsassa_pss_verify_ext+0x12e>
 80a2fe2:	429e      	cmp	r6, r3
 80a2fe4:	d12b      	bne.n	80a303e <mbedtls_rsa_rsassa_pss_verify_ext+0x186>
    }

    /*
     * Generate H = Hash( M' )
     */
    ret = mbedtls_md_starts( &md_ctx );
 80a2fe6:	4620      	mov	r0, r4
 80a2fe8:	f002 fee8 	bl	80a5dbc <mbedtls_md_starts>
    if ( ret != 0 )
 80a2fec:	4683      	mov	fp, r0
 80a2fee:	bb40      	cbnz	r0, 80a3042 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_update( &md_ctx, zeros, 8 );
 80a2ff0:	2208      	movs	r2, #8
 80a2ff2:	a903      	add	r1, sp, #12
 80a2ff4:	4620      	mov	r0, r4
 80a2ff6:	f002 feeb 	bl	80a5dd0 <mbedtls_md_update>
    if ( ret != 0 )
 80a2ffa:	4683      	mov	fp, r0
 80a2ffc:	bb08      	cbnz	r0, 80a3042 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_update( &md_ctx, hash, hashlen );
 80a2ffe:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
 80a3002:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
 80a3006:	4620      	mov	r0, r4
 80a3008:	f002 fee2 	bl	80a5dd0 <mbedtls_md_update>
    if ( ret != 0 )
 80a300c:	4683      	mov	fp, r0
 80a300e:	b9c0      	cbnz	r0, 80a3042 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_update( &md_ctx, p, observed_salt_len );
 80a3010:	4632      	mov	r2, r6
 80a3012:	4629      	mov	r1, r5
 80a3014:	4620      	mov	r0, r4
 80a3016:	f002 fedb 	bl	80a5dd0 <mbedtls_md_update>
    if ( ret != 0 )
 80a301a:	4683      	mov	fp, r0
 80a301c:	b988      	cbnz	r0, 80a3042 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;
    ret = mbedtls_md_finish( &md_ctx, result );
 80a301e:	a908      	add	r1, sp, #32
 80a3020:	4620      	mov	r0, r4
 80a3022:	f002 fedf 	bl	80a5de4 <mbedtls_md_finish>
    if ( ret != 0 )
 80a3026:	4683      	mov	fp, r0
 80a3028:	b958      	cbnz	r0, 80a3042 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
        goto exit;

    if( memcmp( hash_start, result, hlen ) != 0 )
 80a302a:	4652      	mov	r2, sl
 80a302c:	a908      	add	r1, sp, #32
 80a302e:	4648      	mov	r0, r9
 80a3030:	f00c f850 	bl	80af0d4 <memcmp>
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 80a3034:	4a09      	ldr	r2, [pc, #36]	; (80a305c <mbedtls_rsa_rsassa_pss_verify_ext+0x1a4>)
 80a3036:	2800      	cmp	r0, #0
 80a3038:	bf18      	it	ne
 80a303a:	4693      	movne	fp, r2
 80a303c:	e001      	b.n	80a3042 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
    while( p < hash_start - 1 && *p == 0 )
        p++;

    if( *p++ != 0x01 )
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 80a303e:	f8df b020 	ldr.w	fp, [pc, #32]	; 80a3060 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a8>
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
        goto exit;
    }

exit:
    mbedtls_md_free( &md_ctx );
 80a3042:	4620      	mov	r0, r4
 80a3044:	f002 fe77 	bl	80a5d36 <mbedtls_md_free>

    return( ret );
 80a3048:	4658      	mov	r0, fp
 80a304a:	e000      	b.n	80a304e <mbedtls_rsa_rsassa_pss_verify_ext+0x196>
        return( ret );

    p = buf;

    if( buf[siglen - 1] != 0xBC )
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 80a304c:	4804      	ldr	r0, [pc, #16]	; (80a3060 <mbedtls_rsa_rsassa_pss_verify_ext+0x1a8>)

exit:
    mbedtls_md_free( &md_ctx );

    return( ret );
}
 80a304e:	f20d 4d64 	addw	sp, sp, #1124	; 0x464
 80a3052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3056:	bf00      	nop
 80a3058:	ffffbf80 	.word	0xffffbf80
 80a305c:	ffffbc80 	.word	0xffffbc80
 80a3060:	ffffbf00 	.word	0xffffbf00

080a3064 <mbedtls_rsa_rsassa_pss_verify>:
                           int mode,
                           mbedtls_md_type_t md_alg,
                           unsigned int hashlen,
                           const unsigned char *hash,
                           const unsigned char *sig )
{
 80a3064:	b570      	push	{r4, r5, r6, lr}
    mbedtls_md_type_t mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )
 80a3066:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
                           int mode,
                           mbedtls_md_type_t md_alg,
                           unsigned int hashlen,
                           const unsigned char *hash,
                           const unsigned char *sig )
{
 80a306a:	b086      	sub	sp, #24
 80a306c:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
    mbedtls_md_type_t mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )
                             ? (mbedtls_md_type_t) ctx->hash_id
                             : md_alg;
 80a3070:	b10c      	cbz	r4, 80a3076 <mbedtls_rsa_rsassa_pss_verify+0x12>
 80a3072:	b2e4      	uxtb	r4, r4
 80a3074:	e000      	b.n	80a3078 <mbedtls_rsa_rsassa_pss_verify+0x14>
 80a3076:	462c      	mov	r4, r5

    return( mbedtls_rsa_rsassa_pss_verify_ext( ctx, f_rng, p_rng, mode,
                                       md_alg, hashlen, hash,
                                       mgf1_hash_id, MBEDTLS_RSA_SALT_LEN_ANY,
                                       sig ) );
 80a3078:	9403      	str	r4, [sp, #12]
 80a307a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80a307c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80a307e:	9402      	str	r4, [sp, #8]
 80a3080:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80a3082:	9605      	str	r6, [sp, #20]
 80a3084:	f04f 36ff 	mov.w	r6, #4294967295
 80a3088:	9604      	str	r6, [sp, #16]
 80a308a:	9401      	str	r4, [sp, #4]
 80a308c:	9500      	str	r5, [sp, #0]
 80a308e:	f7ff ff13 	bl	80a2eb8 <mbedtls_rsa_rsassa_pss_verify_ext>

}
 80a3092:	b006      	add	sp, #24
 80a3094:	bd70      	pop	{r4, r5, r6, pc}
	...

080a3098 <mbedtls_rsa_rsassa_pkcs1_v15_verify>:
                                 int mode,
                                 mbedtls_md_type_t md_alg,
                                 unsigned int hashlen,
                                 const unsigned char *hash,
                                 const unsigned char *sig )
{
 80a3098:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;
    const size_t sig_len = ctx->len;
    unsigned char *encoded = NULL, *encoded_expected = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80a309c:	2b01      	cmp	r3, #1
                                 int mode,
                                 mbedtls_md_type_t md_alg,
                                 unsigned int hashlen,
                                 const unsigned char *hash,
                                 const unsigned char *sig )
{
 80a309e:	4680      	mov	r8, r0
 80a30a0:	468a      	mov	sl, r1
 80a30a2:	4693      	mov	fp, r2
 80a30a4:	4699      	mov	r9, r3
    int ret = 0;
    const size_t sig_len = ctx->len;
 80a30a6:	6845      	ldr	r5, [r0, #4]
    unsigned char *encoded = NULL, *encoded_expected = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80a30a8:	d102      	bne.n	80a30b0 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x18>
 80a30aa:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80a30ae:	b9eb      	cbnz	r3, 80a30ec <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x54>

    /*
     * Prepare expected PKCS1 v1.5 encoding of hash.
     */

    if( ( encoded          = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL ||
 80a30b0:	4629      	mov	r1, r5
 80a30b2:	2001      	movs	r0, #1
 80a30b4:	f00b fff8 	bl	80af0a8 <calloc>
 80a30b8:	4606      	mov	r6, r0
 80a30ba:	b1c8      	cbz	r0, 80a30f0 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x58>
 80a30bc:	4629      	mov	r1, r5
 80a30be:	2001      	movs	r0, #1
 80a30c0:	f00b fff2 	bl	80af0a8 <calloc>
 80a30c4:	4607      	mov	r7, r0
 80a30c6:	b9c0      	cbnz	r0, 80a30fa <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x62>
        ( encoded_expected = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL )
    {
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
 80a30c8:	f06f 040f 	mvn.w	r4, #15

cleanup:

    if( encoded != NULL )
    {
        mbedtls_zeroize( encoded, sig_len );
 80a30cc:	4630      	mov	r0, r6
 80a30ce:	4629      	mov	r1, r5
 80a30d0:	f7fe fe4c 	bl	80a1d6c <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( encoded );
 80a30d4:	4630      	mov	r0, r6
 80a30d6:	f00a ff19 	bl	80adf0c <free>
    }

    if( encoded_expected != NULL )
 80a30da:	b167      	cbz	r7, 80a30f6 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x5e>
    {
        mbedtls_zeroize( encoded_expected, sig_len );
 80a30dc:	4638      	mov	r0, r7
 80a30de:	4629      	mov	r1, r5
 80a30e0:	f7fe fe44 	bl	80a1d6c <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( encoded_expected );
 80a30e4:	4638      	mov	r0, r7
 80a30e6:	f00a ff11 	bl	80adf0c <free>
 80a30ea:	e004      	b.n	80a30f6 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x5e>
    int ret = 0;
    const size_t sig_len = ctx->len;
    unsigned char *encoded = NULL, *encoded_expected = NULL;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80a30ec:	481b      	ldr	r0, [pc, #108]	; (80a315c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc4>)
 80a30ee:	e031      	b.n	80a3154 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
     */

    if( ( encoded          = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL ||
        ( encoded_expected = (unsigned char *)mbedtls_calloc( 1, sig_len ) ) == NULL )
    {
        ret = MBEDTLS_ERR_MPI_ALLOC_FAILED;
 80a30f0:	f06f 000f 	mvn.w	r0, #15
 80a30f4:	e02e      	b.n	80a3154 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
 80a30f6:	4620      	mov	r0, r4
 80a30f8:	e02c      	b.n	80a3154 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xbc>
        goto cleanup;
    }

    if( ( ret = rsa_rsassa_pkcs1_v15_encode( md_alg, hashlen, hash, sig_len,
 80a30fa:	9000      	str	r0, [sp, #0]
 80a30fc:	462b      	mov	r3, r5
 80a30fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80a3100:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a3102:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 80a3106:	f7fe fe8b 	bl	80a1e20 <_ZL27rsa_rsassa_pkcs1_v15_encode17mbedtls_md_type_tjPKhjPh>
 80a310a:	4604      	mov	r4, r0
 80a310c:	2800      	cmp	r0, #0
 80a310e:	d1dd      	bne.n	80a30cc <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
     * Apply RSA primitive to get what should be PKCS1 encoded hash.
     */

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
          ? mbedtls_rsa_public(  ctx, sig, encoded )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, encoded );
 80a3110:	f1b9 0f00 	cmp.w	r9, #0
 80a3114:	d105      	bne.n	80a3122 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x8a>
 80a3116:	4632      	mov	r2, r6
 80a3118:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80a311a:	4640      	mov	r0, r8
 80a311c:	f7ff f8da 	bl	80a22d4 <mbedtls_rsa_public>
 80a3120:	e006      	b.n	80a3130 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x98>
 80a3122:	9600      	str	r6, [sp, #0]
 80a3124:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80a3126:	465a      	mov	r2, fp
 80a3128:	4651      	mov	r1, sl
 80a312a:	4640      	mov	r0, r8
 80a312c:	f7ff f914 	bl	80a2358 <mbedtls_rsa_private>
 80a3130:	4604      	mov	r4, r0
    if( ret != 0 )
 80a3132:	2800      	cmp	r0, #0
 80a3134:	d1ca      	bne.n	80a30cc <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
 80a3136:	4603      	mov	r3, r0
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 80a3138:	429d      	cmp	r5, r3
 80a313a:	d006      	beq.n	80a314a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xb2>
        diff |= A[i] ^ B[i];
 80a313c:	5cf0      	ldrb	r0, [r6, r3]
 80a313e:	5cfa      	ldrb	r2, [r7, r3]
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 80a3140:	3301      	adds	r3, #1
        diff |= A[i] ^ B[i];
 80a3142:	4050      	eors	r0, r2
 80a3144:	4304      	orrs	r4, r0
 80a3146:	b2e4      	uxtb	r4, r4
 80a3148:	e7f6      	b.n	80a3138 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xa0>
     */

    if( ( ret = mbedtls_safer_memcmp( encoded, encoded_expected,
                                      sig_len ) ) != 0 )
    {
        ret = MBEDTLS_ERR_RSA_VERIFY_FAILED;
 80a314a:	2c00      	cmp	r4, #0
 80a314c:	4c04      	ldr	r4, [pc, #16]	; (80a3160 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xc8>)
 80a314e:	bf08      	it	eq
 80a3150:	2400      	moveq	r4, #0
 80a3152:	e7bb      	b.n	80a30cc <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x34>
        mbedtls_zeroize( encoded_expected, sig_len );
        mbedtls_free( encoded_expected );
    }

    return( ret );
}
 80a3154:	b003      	add	sp, #12
 80a3156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a315a:	bf00      	nop
 80a315c:	ffffbf80 	.word	0xffffbf80
 80a3160:	ffffbc80 	.word	0xffffbc80

080a3164 <mbedtls_rsa_pkcs1_verify>:
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
 80a3164:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
 80a3166:	f8d0 e0a4 	ldr.w	lr, [r0, #164]	; 0xa4
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
 80a316a:	ad06      	add	r5, sp, #24
 80a316c:	f89d 4014 	ldrb.w	r4, [sp, #20]
 80a3170:	cde0      	ldmia	r5, {r5, r6, r7}
    switch( ctx->padding )
 80a3172:	f1be 0f00 	cmp.w	lr, #0
 80a3176:	d00a      	beq.n	80a318e <mbedtls_rsa_pkcs1_verify+0x2a>
 80a3178:	f1be 0f01 	cmp.w	lr, #1
 80a317c:	d10f      	bne.n	80a319e <mbedtls_rsa_pkcs1_verify+0x3a>
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
                                          hashlen, hash, sig );
 80a317e:	9708      	str	r7, [sp, #32]
 80a3180:	9607      	str	r6, [sp, #28]
 80a3182:	9506      	str	r5, [sp, #24]
 80a3184:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 80a3186:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#endif

#if defined(MBEDTLS_PKCS1_V21)
        case MBEDTLS_RSA_PKCS_V21:
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
                                          hashlen, hash, sig );
 80a318a:	f7ff bf6b 	b.w	80a3064 <mbedtls_rsa_rsassa_pss_verify>
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
                                                hashlen, hash, sig );
 80a318e:	9708      	str	r7, [sp, #32]
 80a3190:	9607      	str	r6, [sp, #28]
 80a3192:	9506      	str	r5, [sp, #24]
 80a3194:	9405      	str	r4, [sp, #20]
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 80a3196:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switch( ctx->padding )
    {
#if defined(MBEDTLS_PKCS1_V15)
        case MBEDTLS_RSA_PKCS_V15:
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
                                                hashlen, hash, sig );
 80a319a:	f7ff bf7d 	b.w	80a3098 <mbedtls_rsa_rsassa_pkcs1_v15_verify>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 80a319e:	4801      	ldr	r0, [pc, #4]	; (80a31a4 <mbedtls_rsa_pkcs1_verify+0x40>)
 80a31a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a31a2:	bf00      	nop
 80a31a4:	ffffbf00 	.word	0xffffbf00

080a31a8 <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
 80a31a8:	b510      	push	{r4, lr}
 80a31aa:	4604      	mov	r4, r0
    mbedtls_mpi_free( &ctx->Vi ); mbedtls_mpi_free( &ctx->Vf );
 80a31ac:	308c      	adds	r0, #140	; 0x8c
 80a31ae:	f006 f864 	bl	80a927a <mbedtls_mpi_free>
 80a31b2:	f104 0098 	add.w	r0, r4, #152	; 0x98
 80a31b6:	f006 f860 	bl	80a927a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN ); mbedtls_mpi_free( &ctx->D  );
 80a31ba:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80a31be:	f006 f85c 	bl	80a927a <mbedtls_mpi_free>
 80a31c2:	f104 0020 	add.w	r0, r4, #32
 80a31c6:	f006 f858 	bl	80a927a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  ); mbedtls_mpi_free( &ctx->P  );
 80a31ca:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a31ce:	f006 f854 	bl	80a927a <mbedtls_mpi_free>
 80a31d2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80a31d6:	f006 f850 	bl	80a927a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  ); mbedtls_mpi_free( &ctx->N  );
 80a31da:	f104 0014 	add.w	r0, r4, #20
 80a31de:	f006 f84c 	bl	80a927a <mbedtls_mpi_free>
 80a31e2:	f104 0008 	add.w	r0, r4, #8
 80a31e6:	f006 f848 	bl	80a927a <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ ); mbedtls_mpi_free( &ctx->RP );
 80a31ea:	f104 0080 	add.w	r0, r4, #128	; 0x80
 80a31ee:	f006 f844 	bl	80a927a <mbedtls_mpi_free>
 80a31f2:	f104 0074 	add.w	r0, r4, #116	; 0x74
 80a31f6:	f006 f840 	bl	80a927a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP ); mbedtls_mpi_free( &ctx->DQ );
 80a31fa:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80a31fe:	f006 f83c 	bl	80a927a <mbedtls_mpi_free>
 80a3202:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80a3206:	f006 f838 	bl	80a927a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
 80a320a:	f104 0044 	add.w	r0, r4, #68	; 0x44
#endif /* MBEDTLS_RSA_NO_CRT */

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
}
 80a320e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->E  ); mbedtls_mpi_free( &ctx->N  );

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ ); mbedtls_mpi_free( &ctx->RP );
    mbedtls_mpi_free( &ctx->QP ); mbedtls_mpi_free( &ctx->DQ );
    mbedtls_mpi_free( &ctx->DP );
 80a3212:	f006 b832 	b.w	80a927a <mbedtls_mpi_free>
	...

080a3218 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf>:
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
 80a3218:	b538      	push	{r3, r4, r5, lr}
 80a321a:	4605      	mov	r5, r0
 80a321c:	b160      	cbz	r0, 80a3238 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x20>
 80a321e:	4c08      	ldr	r4, [pc, #32]	; (80a3240 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x28>)
 80a3220:	6820      	ldr	r0, [r4, #0]
 80a3222:	b158      	cbz	r0, 80a323c <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x24>
 80a3224:	6862      	ldr	r2, [r4, #4]
 80a3226:	686b      	ldr	r3, [r5, #4]
 80a3228:	429a      	cmp	r2, r3
 80a322a:	d103      	bne.n	80a3234 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x1c>
 80a322c:	68a9      	ldr	r1, [r5, #8]
 80a322e:	f00b ff51 	bl	80af0d4 <memcmp>
 80a3232:	b110      	cbz	r0, 80a323a <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x22>
 80a3234:	3414      	adds	r4, #20
 80a3236:	e7f3      	b.n	80a3220 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf+0x8>
 80a3238:	bd38      	pop	{r3, r4, r5, pc}
 80a323a:	4620      	mov	r0, r4
 80a323c:	bd38      	pop	{r3, r4, r5, pc}
 80a323e:	bf00      	nop
 80a3240:	080aff84 	.word	0x080aff84

080a3244 <mbedtls_oid_get_attr_short_name>:
        NULL,
    }
};

FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 80a3244:	b570      	push	{r4, r5, r6, lr}
 80a3246:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        NULL,
    }
};

FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
 80a3248:	4605      	mov	r5, r0
 80a324a:	b160      	cbz	r0, 80a3266 <mbedtls_oid_get_attr_short_name+0x22>
 80a324c:	4c09      	ldr	r4, [pc, #36]	; (80a3274 <mbedtls_oid_get_attr_short_name+0x30>)
 80a324e:	6820      	ldr	r0, [r4, #0]
 80a3250:	b148      	cbz	r0, 80a3266 <mbedtls_oid_get_attr_short_name+0x22>
 80a3252:	6862      	ldr	r2, [r4, #4]
 80a3254:	686b      	ldr	r3, [r5, #4]
 80a3256:	429a      	cmp	r2, r3
 80a3258:	d103      	bne.n	80a3262 <mbedtls_oid_get_attr_short_name+0x1e>
 80a325a:	68a9      	ldr	r1, [r5, #8]
 80a325c:	f00b ff3a 	bl	80af0d4 <memcmp>
 80a3260:	b120      	cbz	r0, 80a326c <mbedtls_oid_get_attr_short_name+0x28>
 80a3262:	3414      	adds	r4, #20
 80a3264:	e7f3      	b.n	80a324e <mbedtls_oid_get_attr_short_name+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 80a3266:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80a326a:	bd70      	pop	{r4, r5, r6, pc}
 80a326c:	6923      	ldr	r3, [r4, #16]
 80a326e:	6033      	str	r3, [r6, #0]
 80a3270:	bd70      	pop	{r4, r5, r6, pc}
 80a3272:	bf00      	nop
 80a3274:	080af474 	.word	0x080af474

080a3278 <mbedtls_oid_get_x509_ext_type>:
        0,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 80a3278:	b570      	push	{r4, r5, r6, lr}
 80a327a:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        0,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
 80a327c:	4605      	mov	r5, r0
 80a327e:	b160      	cbz	r0, 80a329a <mbedtls_oid_get_x509_ext_type+0x22>
 80a3280:	4c09      	ldr	r4, [pc, #36]	; (80a32a8 <mbedtls_oid_get_x509_ext_type+0x30>)
 80a3282:	6820      	ldr	r0, [r4, #0]
 80a3284:	b148      	cbz	r0, 80a329a <mbedtls_oid_get_x509_ext_type+0x22>
 80a3286:	6862      	ldr	r2, [r4, #4]
 80a3288:	686b      	ldr	r3, [r5, #4]
 80a328a:	429a      	cmp	r2, r3
 80a328c:	d103      	bne.n	80a3296 <mbedtls_oid_get_x509_ext_type+0x1e>
 80a328e:	68a9      	ldr	r1, [r5, #8]
 80a3290:	f00b ff20 	bl	80af0d4 <memcmp>
 80a3294:	b120      	cbz	r0, 80a32a0 <mbedtls_oid_get_x509_ext_type+0x28>
 80a3296:	3414      	adds	r4, #20
 80a3298:	e7f3      	b.n	80a3282 <mbedtls_oid_get_x509_ext_type+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 80a329a:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80a329e:	bd70      	pop	{r4, r5, r6, pc}
 80a32a0:	6923      	ldr	r3, [r4, #16]
 80a32a2:	6033      	str	r3, [r6, #0]
 80a32a4:	bd70      	pop	{r4, r5, r6, pc}
 80a32a6:	bf00      	nop
 80a32a8:	080b009c 	.word	0x080b009c

080a32ac <mbedtls_oid_get_extended_key_usage>:
    { ADD_LEN( MBEDTLS_OID_OCSP_SIGNING ),     "id-kp-OCSPSigning",     "OCSP Signing" },
    { NULL, 0, NULL, NULL },
};

FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 80a32ac:	b570      	push	{r4, r5, r6, lr}
 80a32ae:	460e      	mov	r6, r1
    { ADD_LEN( MBEDTLS_OID_TIME_STAMPING ),    "id-kp-timeStamping",    "Time Stamping" },
    { ADD_LEN( MBEDTLS_OID_OCSP_SIGNING ),     "id-kp-OCSPSigning",     "OCSP Signing" },
    { NULL, 0, NULL, NULL },
};

FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
 80a32b0:	4605      	mov	r5, r0
 80a32b2:	b160      	cbz	r0, 80a32ce <mbedtls_oid_get_extended_key_usage+0x22>
 80a32b4:	4c09      	ldr	r4, [pc, #36]	; (80a32dc <mbedtls_oid_get_extended_key_usage+0x30>)
 80a32b6:	6820      	ldr	r0, [r4, #0]
 80a32b8:	b148      	cbz	r0, 80a32ce <mbedtls_oid_get_extended_key_usage+0x22>
 80a32ba:	6862      	ldr	r2, [r4, #4]
 80a32bc:	686b      	ldr	r3, [r5, #4]
 80a32be:	429a      	cmp	r2, r3
 80a32c0:	d103      	bne.n	80a32ca <mbedtls_oid_get_extended_key_usage+0x1e>
 80a32c2:	68a9      	ldr	r1, [r5, #8]
 80a32c4:	f00b ff06 	bl	80af0d4 <memcmp>
 80a32c8:	b120      	cbz	r0, 80a32d4 <mbedtls_oid_get_extended_key_usage+0x28>
 80a32ca:	3410      	adds	r4, #16
 80a32cc:	e7f3      	b.n	80a32b6 <mbedtls_oid_get_extended_key_usage+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 80a32ce:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80a32d2:	bd70      	pop	{r4, r5, r6, pc}
 80a32d4:	68e3      	ldr	r3, [r4, #12]
 80a32d6:	6033      	str	r3, [r6, #0]
 80a32d8:	bd70      	pop	{r4, r5, r6, pc}
 80a32da:	bf00      	nop
 80a32dc:	080af604 	.word	0x080af604

080a32e0 <mbedtls_oid_get_sig_alg_desc>:
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
FN_OID_GET_DESCRIPTOR_ATTR1(mbedtls_oid_get_sig_alg_desc, oid_sig_alg_t, sig_alg, const char *, description)
 80a32e0:	b510      	push	{r4, lr}
 80a32e2:	460c      	mov	r4, r1
 80a32e4:	f7ff ff98 	bl	80a3218 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf>
 80a32e8:	b118      	cbz	r0, 80a32f2 <mbedtls_oid_get_sig_alg_desc+0x12>
 80a32ea:	68c3      	ldr	r3, [r0, #12]
 80a32ec:	2000      	movs	r0, #0
 80a32ee:	6023      	str	r3, [r4, #0]
 80a32f0:	bd10      	pop	{r4, pc}
 80a32f2:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80a32f6:	bd10      	pop	{r4, pc}

080a32f8 <mbedtls_oid_get_sig_alg>:
FN_OID_GET_ATTR2(mbedtls_oid_get_sig_alg, oid_sig_alg_t, sig_alg, mbedtls_md_type_t, md_alg, mbedtls_pk_type_t, pk_alg)
 80a32f8:	b538      	push	{r3, r4, r5, lr}
 80a32fa:	460d      	mov	r5, r1
 80a32fc:	4614      	mov	r4, r2
 80a32fe:	f7ff ff8b 	bl	80a3218 <_ZL21oid_sig_alg_from_asn1PK16mbedtls_asn1_buf>
 80a3302:	b128      	cbz	r0, 80a3310 <mbedtls_oid_get_sig_alg+0x18>
 80a3304:	7c03      	ldrb	r3, [r0, #16]
 80a3306:	702b      	strb	r3, [r5, #0]
 80a3308:	7c43      	ldrb	r3, [r0, #17]
 80a330a:	2000      	movs	r0, #0
 80a330c:	7023      	strb	r3, [r4, #0]
 80a330e:	bd38      	pop	{r3, r4, r5, pc}
 80a3310:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80a3314:	bd38      	pop	{r3, r4, r5, pc}
	...

080a3318 <mbedtls_oid_get_pk_alg>:
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 80a3318:	b570      	push	{r4, r5, r6, lr}
 80a331a:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
 80a331c:	4605      	mov	r5, r0
 80a331e:	b160      	cbz	r0, 80a333a <mbedtls_oid_get_pk_alg+0x22>
 80a3320:	4c09      	ldr	r4, [pc, #36]	; (80a3348 <mbedtls_oid_get_pk_alg+0x30>)
 80a3322:	6820      	ldr	r0, [r4, #0]
 80a3324:	b148      	cbz	r0, 80a333a <mbedtls_oid_get_pk_alg+0x22>
 80a3326:	6862      	ldr	r2, [r4, #4]
 80a3328:	686b      	ldr	r3, [r5, #4]
 80a332a:	429a      	cmp	r2, r3
 80a332c:	d103      	bne.n	80a3336 <mbedtls_oid_get_pk_alg+0x1e>
 80a332e:	68a9      	ldr	r1, [r5, #8]
 80a3330:	f00b fed0 	bl	80af0d4 <memcmp>
 80a3334:	b120      	cbz	r0, 80a3340 <mbedtls_oid_get_pk_alg+0x28>
 80a3336:	3414      	adds	r4, #20
 80a3338:	e7f3      	b.n	80a3322 <mbedtls_oid_get_pk_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 80a333a:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80a333e:	bd70      	pop	{r4, r5, r6, pc}
 80a3340:	7c23      	ldrb	r3, [r4, #16]
 80a3342:	7033      	strb	r3, [r6, #0]
 80a3344:	bd70      	pop	{r4, r5, r6, pc}
 80a3346:	bf00      	nop
 80a3348:	080af674 	.word	0x080af674

080a334c <mbedtls_oid_get_cipher_alg>:
        MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_cipher_alg_t, cipher_alg, oid_cipher_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_cipher_alg, oid_cipher_alg_t, cipher_alg, mbedtls_cipher_type_t, cipher_alg)
 80a334c:	b570      	push	{r4, r5, r6, lr}
 80a334e:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_cipher_alg_t, cipher_alg, oid_cipher_alg)
 80a3350:	4605      	mov	r5, r0
 80a3352:	b160      	cbz	r0, 80a336e <mbedtls_oid_get_cipher_alg+0x22>
 80a3354:	4c09      	ldr	r4, [pc, #36]	; (80a337c <mbedtls_oid_get_cipher_alg+0x30>)
 80a3356:	6820      	ldr	r0, [r4, #0]
 80a3358:	b148      	cbz	r0, 80a336e <mbedtls_oid_get_cipher_alg+0x22>
 80a335a:	6862      	ldr	r2, [r4, #4]
 80a335c:	686b      	ldr	r3, [r5, #4]
 80a335e:	429a      	cmp	r2, r3
 80a3360:	d103      	bne.n	80a336a <mbedtls_oid_get_cipher_alg+0x1e>
 80a3362:	68a9      	ldr	r1, [r5, #8]
 80a3364:	f00b feb6 	bl	80af0d4 <memcmp>
 80a3368:	b120      	cbz	r0, 80a3374 <mbedtls_oid_get_cipher_alg+0x28>
 80a336a:	3414      	adds	r4, #20
 80a336c:	e7f3      	b.n	80a3356 <mbedtls_oid_get_cipher_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_cipher_alg, oid_cipher_alg_t, cipher_alg, mbedtls_cipher_type_t, cipher_alg)
 80a336e:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80a3372:	bd70      	pop	{r4, r5, r6, pc}
 80a3374:	7c23      	ldrb	r3, [r4, #16]
 80a3376:	7033      	strb	r3, [r6, #0]
 80a3378:	bd70      	pop	{r4, r5, r6, pc}
 80a337a:	bf00      	nop
 80a337c:	080af6c4 	.word	0x080af6c4

080a3380 <mbedtls_oid_get_oid_by_md>:
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
FN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_md, oid_md_alg_t, oid_md_alg, mbedtls_md_type_t, md_alg)
 80a3380:	b530      	push	{r4, r5, lr}
 80a3382:	4b08      	ldr	r3, [pc, #32]	; (80a33a4 <mbedtls_oid_get_oid_by_md+0x24>)
 80a3384:	681c      	ldr	r4, [r3, #0]
 80a3386:	b14c      	cbz	r4, 80a339c <mbedtls_oid_get_oid_by_md+0x1c>
 80a3388:	7c1d      	ldrb	r5, [r3, #16]
 80a338a:	4285      	cmp	r5, r0
 80a338c:	d104      	bne.n	80a3398 <mbedtls_oid_get_oid_by_md+0x18>
 80a338e:	600c      	str	r4, [r1, #0]
 80a3390:	685b      	ldr	r3, [r3, #4]
 80a3392:	2000      	movs	r0, #0
 80a3394:	6013      	str	r3, [r2, #0]
 80a3396:	bd30      	pop	{r4, r5, pc}
 80a3398:	3314      	adds	r3, #20
 80a339a:	e7f3      	b.n	80a3384 <mbedtls_oid_get_oid_by_md+0x4>
 80a339c:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80a33a0:	bd30      	pop	{r4, r5, pc}
 80a33a2:	bf00      	nop
 80a33a4:	080aff0c 	.word	0x080aff0c

080a33a8 <mbedtls_oid_get_md_hmac>:
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_hmac_t, md_hmac, oid_md_hmac)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_hmac, oid_md_hmac_t, md_hmac, mbedtls_md_type_t, md_hmac)
 80a33a8:	b570      	push	{r4, r5, r6, lr}
 80a33aa:	460e      	mov	r6, r1
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_hmac_t, md_hmac, oid_md_hmac)
 80a33ac:	4605      	mov	r5, r0
 80a33ae:	b160      	cbz	r0, 80a33ca <mbedtls_oid_get_md_hmac+0x22>
 80a33b0:	4c09      	ldr	r4, [pc, #36]	; (80a33d8 <mbedtls_oid_get_md_hmac+0x30>)
 80a33b2:	6820      	ldr	r0, [r4, #0]
 80a33b4:	b148      	cbz	r0, 80a33ca <mbedtls_oid_get_md_hmac+0x22>
 80a33b6:	6862      	ldr	r2, [r4, #4]
 80a33b8:	686b      	ldr	r3, [r5, #4]
 80a33ba:	429a      	cmp	r2, r3
 80a33bc:	d103      	bne.n	80a33c6 <mbedtls_oid_get_md_hmac+0x1e>
 80a33be:	68a9      	ldr	r1, [r5, #8]
 80a33c0:	f00b fe88 	bl	80af0d4 <memcmp>
 80a33c4:	b120      	cbz	r0, 80a33d0 <mbedtls_oid_get_md_hmac+0x28>
 80a33c6:	3414      	adds	r4, #20
 80a33c8:	e7f3      	b.n	80a33b2 <mbedtls_oid_get_md_hmac+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_md_hmac, oid_md_hmac_t, md_hmac, mbedtls_md_type_t, md_hmac)
 80a33ca:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80a33ce:	bd70      	pop	{r4, r5, r6, pc}
 80a33d0:	7c23      	ldrb	r3, [r4, #16]
 80a33d2:	7033      	strb	r3, [r6, #0]
 80a33d4:	bd70      	pop	{r4, r5, r6, pc}
 80a33d6:	bf00      	nop
 80a33d8:	080b0024 	.word	0x080b0024

080a33dc <mbedtls_oid_get_pkcs12_pbe_alg>:
        MBEDTLS_MD_NONE, MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, oid_pkcs12_pbe_alg)
FN_OID_GET_ATTR2(mbedtls_oid_get_pkcs12_pbe_alg, oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, mbedtls_md_type_t, md_alg, mbedtls_cipher_type_t, cipher_alg)
 80a33dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a33de:	460f      	mov	r7, r1
 80a33e0:	4616      	mov	r6, r2
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_CIPHER_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, oid_pkcs12_pbe_alg)
 80a33e2:	4605      	mov	r5, r0
 80a33e4:	b160      	cbz	r0, 80a3400 <mbedtls_oid_get_pkcs12_pbe_alg+0x24>
 80a33e6:	4c0a      	ldr	r4, [pc, #40]	; (80a3410 <mbedtls_oid_get_pkcs12_pbe_alg+0x34>)
 80a33e8:	6820      	ldr	r0, [r4, #0]
 80a33ea:	b148      	cbz	r0, 80a3400 <mbedtls_oid_get_pkcs12_pbe_alg+0x24>
 80a33ec:	6862      	ldr	r2, [r4, #4]
 80a33ee:	686b      	ldr	r3, [r5, #4]
 80a33f0:	429a      	cmp	r2, r3
 80a33f2:	d103      	bne.n	80a33fc <mbedtls_oid_get_pkcs12_pbe_alg+0x20>
 80a33f4:	68a9      	ldr	r1, [r5, #8]
 80a33f6:	f00b fe6d 	bl	80af0d4 <memcmp>
 80a33fa:	b120      	cbz	r0, 80a3406 <mbedtls_oid_get_pkcs12_pbe_alg+0x2a>
 80a33fc:	3414      	adds	r4, #20
 80a33fe:	e7f3      	b.n	80a33e8 <mbedtls_oid_get_pkcs12_pbe_alg+0xc>
FN_OID_GET_ATTR2(mbedtls_oid_get_pkcs12_pbe_alg, oid_pkcs12_pbe_alg_t, pkcs12_pbe_alg, mbedtls_md_type_t, md_alg, mbedtls_cipher_type_t, cipher_alg)
 80a3400:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80a3404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a3406:	7c23      	ldrb	r3, [r4, #16]
 80a3408:	703b      	strb	r3, [r7, #0]
 80a340a:	7c63      	ldrb	r3, [r4, #17]
 80a340c:	7033      	strb	r3, [r6, #0]
 80a340e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a3410:	080afed0 	.word	0x080afed0

080a3414 <mbedtls_sha1_init>:
}
#endif

void mbedtls_sha1_init( mbedtls_sha1_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha1_context ) );
 80a3414:	225c      	movs	r2, #92	; 0x5c
 80a3416:	2100      	movs	r1, #0
 80a3418:	f00b be91 	b.w	80af13e <memset>

080a341c <mbedtls_sha1_free>:
}

void mbedtls_sha1_free( mbedtls_sha1_context *ctx )
{
    if( ctx == NULL )
 80a341c:	b138      	cbz	r0, 80a342e <mbedtls_sha1_free+0x12>
 80a341e:	f100 025c 	add.w	r2, r0, #92	; 0x5c

#if !defined(MBEDTLS_SHA1_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 80a3422:	2300      	movs	r3, #0
 80a3424:	4290      	cmp	r0, r2
 80a3426:	d002      	beq.n	80a342e <mbedtls_sha1_free+0x12>
 80a3428:	7003      	strb	r3, [r0, #0]
 80a342a:	3001      	adds	r0, #1
 80a342c:	e7fa      	b.n	80a3424 <mbedtls_sha1_free+0x8>
 80a342e:	4770      	bx	lr

080a3430 <mbedtls_sha1_clone>:
    mbedtls_zeroize( ctx, sizeof( mbedtls_sha1_context ) );
}

void mbedtls_sha1_clone( mbedtls_sha1_context *dst,
                         const mbedtls_sha1_context *src )
{
 80a3430:	b508      	push	{r3, lr}
    *dst = *src;
 80a3432:	225c      	movs	r2, #92	; 0x5c
 80a3434:	f00b fe5d 	bl	80af0f2 <memcpy>
 80a3438:	bd08      	pop	{r3, pc}
	...

080a343c <mbedtls_sha1_starts_ret>:

/*
 * SHA-1 context setup
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
 80a343c:	4603      	mov	r3, r0
    ctx->total[0] = 0;
    ctx->total[1] = 0;

    ctx->state[0] = 0x67452301;
 80a343e:	4a0a      	ldr	r2, [pc, #40]	; (80a3468 <mbedtls_sha1_starts_ret+0x2c>)
/*
 * SHA-1 context setup
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
    ctx->total[0] = 0;
 80a3440:	2000      	movs	r0, #0
    ctx->total[1] = 0;

    ctx->state[0] = 0x67452301;
 80a3442:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xEFCDAB89;
 80a3444:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80a3448:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x98BADCFE;
 80a344a:	f102 4229 	add.w	r2, r2, #2835349504	; 0xa9000000
 80a344e:	f5a2 1296 	sub.w	r2, r2, #1228800	; 0x12c000
 80a3452:	f6a2 628b 	subw	r2, r2, #3723	; 0xe8b
 80a3456:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0x10325476;
 80a3458:	f1a2 3288 	sub.w	r2, r2, #2290649224	; 0x88888888
 80a345c:	615a      	str	r2, [r3, #20]
    ctx->state[4] = 0xC3D2E1F0;
 80a345e:	4a03      	ldr	r2, [pc, #12]	; (80a346c <mbedtls_sha1_starts_ret+0x30>)
/*
 * SHA-1 context setup
 */
int mbedtls_sha1_starts_ret( mbedtls_sha1_context *ctx )
{
    ctx->total[0] = 0;
 80a3460:	6018      	str	r0, [r3, #0]
    ctx->total[1] = 0;
 80a3462:	6058      	str	r0, [r3, #4]

    ctx->state[0] = 0x67452301;
    ctx->state[1] = 0xEFCDAB89;
    ctx->state[2] = 0x98BADCFE;
    ctx->state[3] = 0x10325476;
    ctx->state[4] = 0xC3D2E1F0;
 80a3464:	619a      	str	r2, [r3, #24]

    return( 0 );
}
 80a3466:	4770      	bx	lr
 80a3468:	67452301 	.word	0x67452301
 80a346c:	c3d2e1f0 	.word	0xc3d2e1f0

080a3470 <mbedtls_internal_sha1_process>:
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
 80a3470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
 80a3474:	784b      	ldrb	r3, [r1, #1]
 80a3476:	780a      	ldrb	r2, [r1, #0]
 80a3478:	041b      	lsls	r3, r3, #16
 80a347a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80a347e:	78ca      	ldrb	r2, [r1, #3]
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
 80a3480:	b097      	sub	sp, #92	; 0x5c
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
 80a3482:	4313      	orrs	r3, r2
 80a3484:	788a      	ldrb	r2, [r1, #2]
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
 80a3486:	f891 c008 	ldrb.w	ip, [r1, #8]
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
 80a348a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a348e:	9306      	str	r3, [sp, #24]
    GET_UINT32_BE( W[ 1], data,  4 );
 80a3490:	794b      	ldrb	r3, [r1, #5]
 80a3492:	790a      	ldrb	r2, [r1, #4]
 80a3494:	041b      	lsls	r3, r3, #16
 80a3496:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80a349a:	79ca      	ldrb	r2, [r1, #7]
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
 80a349c:	f891 800c 	ldrb.w	r8, [r1, #12]
                                   const unsigned char data[64] )
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
 80a34a0:	4313      	orrs	r3, r2
 80a34a2:	798a      	ldrb	r2, [r1, #6]
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
 80a34a4:	f891 e014 	ldrb.w	lr, [r1, #20]
                                   const unsigned char data[64] )
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
 80a34a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a34ac:	9307      	str	r3, [sp, #28]
    GET_UINT32_BE( W[ 2], data,  8 );
 80a34ae:	7a4b      	ldrb	r3, [r1, #9]
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
 80a34b0:	7c0a      	ldrb	r2, [r1, #16]
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
 80a34b2:	041b      	lsls	r3, r3, #16
 80a34b4:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 80a34b8:	f891 c00b 	ldrb.w	ip, [r1, #11]
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
 80a34bc:	7e0f      	ldrb	r7, [r1, #24]
{
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
 80a34be:	ea43 030c 	orr.w	r3, r3, ip
 80a34c2:	f891 c00a 	ldrb.w	ip, [r1, #10]
#endif

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] )
{
 80a34c6:	9001      	str	r0, [sp, #4]
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
 80a34c8:	ea43 2c0c 	orr.w	ip, r3, ip, lsl #8
    GET_UINT32_BE( W[ 3], data, 12 );
 80a34cc:	7b4b      	ldrb	r3, [r1, #13]
 80a34ce:	041b      	lsls	r3, r3, #16
 80a34d0:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 80a34d4:	f891 800f 	ldrb.w	r8, [r1, #15]
 80a34d8:	ea43 0308 	orr.w	r3, r3, r8
 80a34dc:	f891 800e 	ldrb.w	r8, [r1, #14]
 80a34e0:	ea43 2808 	orr.w	r8, r3, r8, lsl #8
    GET_UINT32_BE( W[ 4], data, 16 );
 80a34e4:	7c4b      	ldrb	r3, [r1, #17]
 80a34e6:	041b      	lsls	r3, r3, #16
 80a34e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80a34ec:	7cca      	ldrb	r2, [r1, #19]
 80a34ee:	4313      	orrs	r3, r2
 80a34f0:	7c8a      	ldrb	r2, [r1, #18]
 80a34f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a34f6:	930e      	str	r3, [sp, #56]	; 0x38
    GET_UINT32_BE( W[ 5], data, 20 );
 80a34f8:	7d4b      	ldrb	r3, [r1, #21]
 80a34fa:	041b      	lsls	r3, r3, #16
 80a34fc:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
 80a3500:	f891 e017 	ldrb.w	lr, [r1, #23]
 80a3504:	ea43 030e 	orr.w	r3, r3, lr
 80a3508:	f891 e016 	ldrb.w	lr, [r1, #22]
 80a350c:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80a3510:	930f      	str	r3, [sp, #60]	; 0x3c
    GET_UINT32_BE( W[ 6], data, 24 );
 80a3512:	7e4b      	ldrb	r3, [r1, #25]
 80a3514:	041b      	lsls	r3, r3, #16
 80a3516:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 80a351a:	7ecf      	ldrb	r7, [r1, #27]
    GET_UINT32_BE( W[ 7], data, 28 );
 80a351c:	7f0e      	ldrb	r6, [r1, #28]
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
 80a351e:	433b      	orrs	r3, r7
 80a3520:	7e8f      	ldrb	r7, [r1, #26]
    GET_UINT32_BE( W[ 7], data, 28 );
    GET_UINT32_BE( W[ 8], data, 32 );
 80a3522:	f891 4020 	ldrb.w	r4, [r1, #32]
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
 80a3526:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80a352a:	9310      	str	r3, [sp, #64]	; 0x40
    GET_UINT32_BE( W[ 7], data, 28 );
 80a352c:	7f4b      	ldrb	r3, [r1, #29]
    GET_UINT32_BE( W[ 8], data, 32 );
    GET_UINT32_BE( W[ 9], data, 36 );
 80a352e:	f891 2024 	ldrb.w	r2, [r1, #36]	; 0x24
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
    GET_UINT32_BE( W[ 7], data, 28 );
 80a3532:	041b      	lsls	r3, r3, #16
 80a3534:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 80a3538:	7fce      	ldrb	r6, [r1, #31]
    GET_UINT32_BE( W[ 8], data, 32 );
    GET_UINT32_BE( W[ 9], data, 36 );
    GET_UINT32_BE( W[10], data, 40 );
    GET_UINT32_BE( W[11], data, 44 );
 80a353a:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    GET_UINT32_BE( W[ 2], data,  8 );
    GET_UINT32_BE( W[ 3], data, 12 );
    GET_UINT32_BE( W[ 4], data, 16 );
    GET_UINT32_BE( W[ 5], data, 20 );
    GET_UINT32_BE( W[ 6], data, 24 );
    GET_UINT32_BE( W[ 7], data, 28 );
 80a353e:	4333      	orrs	r3, r6
 80a3540:	7f8e      	ldrb	r6, [r1, #30]
 80a3542:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 80a3546:	9311      	str	r3, [sp, #68]	; 0x44
    GET_UINT32_BE( W[ 8], data, 32 );
 80a3548:	f891 3021 	ldrb.w	r3, [r1, #33]	; 0x21
 80a354c:	041b      	lsls	r3, r3, #16
 80a354e:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 80a3552:	f891 4023 	ldrb.w	r4, [r1, #35]	; 0x23
 80a3556:	4323      	orrs	r3, r4
 80a3558:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
 80a355c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80a3560:	9309      	str	r3, [sp, #36]	; 0x24
    GET_UINT32_BE( W[ 9], data, 36 );
 80a3562:	f891 3025 	ldrb.w	r3, [r1, #37]	; 0x25
 80a3566:	041b      	lsls	r3, r3, #16
 80a3568:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80a356c:	f891 2027 	ldrb.w	r2, [r1, #39]	; 0x27
 80a3570:	4313      	orrs	r3, r2
 80a3572:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
 80a3576:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a357a:	930a      	str	r3, [sp, #40]	; 0x28
    GET_UINT32_BE( W[10], data, 40 );
 80a357c:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 80a3580:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 80a3584:	041b      	lsls	r3, r3, #16
 80a3586:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80a358a:	f891 202b 	ldrb.w	r2, [r1, #43]	; 0x2b
 80a358e:	4313      	orrs	r3, r2
 80a3590:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
 80a3594:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a3598:	930b      	str	r3, [sp, #44]	; 0x2c
    GET_UINT32_BE( W[11], data, 44 );
 80a359a:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 80a359e:	041b      	lsls	r3, r3, #16
 80a35a0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80a35a4:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
 80a35a8:	4303      	orrs	r3, r0
 80a35aa:	f891 002e 	ldrb.w	r0, [r1, #46]	; 0x2e
 80a35ae:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80a35b2:	930c      	str	r3, [sp, #48]	; 0x30
    GET_UINT32_BE( W[12], data, 48 );
 80a35b4:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 80a35b8:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
 80a35bc:	041b      	lsls	r3, r3, #16
 80a35be:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80a35c2:	f891 0033 	ldrb.w	r0, [r1, #51]	; 0x33
 80a35c6:	4303      	orrs	r3, r0
 80a35c8:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
 80a35cc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80a35d0:	930d      	str	r3, [sp, #52]	; 0x34
    GET_UINT32_BE( W[13], data, 52 );
 80a35d2:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 80a35d6:	f891 9034 	ldrb.w	r9, [r1, #52]	; 0x34
 80a35da:	041b      	lsls	r3, r3, #16
 80a35dc:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
 80a35e0:	f891 9037 	ldrb.w	r9, [r1, #55]	; 0x37
    GET_UINT32_BE( W[14], data, 56 );
 80a35e4:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
    GET_UINT32_BE( W[ 8], data, 32 );
    GET_UINT32_BE( W[ 9], data, 36 );
    GET_UINT32_BE( W[10], data, 40 );
    GET_UINT32_BE( W[11], data, 44 );
    GET_UINT32_BE( W[12], data, 48 );
    GET_UINT32_BE( W[13], data, 52 );
 80a35e8:	ea43 0309 	orr.w	r3, r3, r9
 80a35ec:	f891 9036 	ldrb.w	r9, [r1, #54]	; 0x36
 80a35f0:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
 80a35f4:	9302      	str	r3, [sp, #8]
    GET_UINT32_BE( W[14], data, 56 );
 80a35f6:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
 80a35fa:	041b      	lsls	r3, r3, #16
 80a35fc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80a3600:	f891 203b 	ldrb.w	r2, [r1, #59]	; 0x3b
 80a3604:	4313      	orrs	r3, r2
 80a3606:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 80a360a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a360e:	9303      	str	r3, [sp, #12]
    GET_UINT32_BE( W[15], data, 60 );
 80a3610:	f891 303d 	ldrb.w	r3, [r1, #61]	; 0x3d
 80a3614:	f891 203c 	ldrb.w	r2, [r1, #60]	; 0x3c
 80a3618:	041b      	lsls	r3, r3, #16
 80a361a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80a361e:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
 80a3622:	4313      	orrs	r3, r2
 80a3624:	f891 203e 	ldrb.w	r2, [r1, #62]	; 0x3e
 80a3628:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80a362c:	9304      	str	r3, [sp, #16]
#define P(a,b,c,d,e,x)                                  \
{                                                       \
    e += S(a,5) + F(b,c,d) + K + x; b = S(b,30);        \
}

    A = ctx->state[0];
 80a362e:	9b01      	ldr	r3, [sp, #4]
 80a3630:	689b      	ldr	r3, [r3, #8]
 80a3632:	9312      	str	r3, [sp, #72]	; 0x48
    B = ctx->state[1];
 80a3634:	9b01      	ldr	r3, [sp, #4]
 80a3636:	68db      	ldr	r3, [r3, #12]
 80a3638:	9314      	str	r3, [sp, #80]	; 0x50
    C = ctx->state[2];
 80a363a:	9b01      	ldr	r3, [sp, #4]
 80a363c:	691b      	ldr	r3, [r3, #16]
 80a363e:	9305      	str	r3, [sp, #20]
    D = ctx->state[3];
 80a3640:	9b01      	ldr	r3, [sp, #4]
 80a3642:	695b      	ldr	r3, [r3, #20]
 80a3644:	9313      	str	r3, [sp, #76]	; 0x4c
    E = ctx->state[4];
 80a3646:	9b01      	ldr	r3, [sp, #4]
 80a3648:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80a364a:	699b      	ldr	r3, [r3, #24]
 80a364c:	9315      	str	r3, [sp, #84]	; 0x54
 80a364e:	9b05      	ldr	r3, [sp, #20]
 80a3650:	ea83 0e02 	eor.w	lr, r3, r2
 80a3654:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a3656:	9912      	ldr	r1, [sp, #72]	; 0x48
 80a3658:	ea0e 0e03 	and.w	lr, lr, r3
 80a365c:	ea8e 0e02 	eor.w	lr, lr, r2
 80a3660:	4bdd      	ldr	r3, [pc, #884]	; (80a39d8 <mbedtls_internal_sha1_process+0x568>)
 80a3662:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80a3664:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80a3666:	441a      	add	r2, r3
 80a3668:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 80a366c:	4496      	add	lr, r2

#define F(x,y,z) (z ^ (x & (y ^ z)))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
 80a366e:	9a06      	ldr	r2, [sp, #24]
 80a3670:	eb04 0b03 	add.w	fp, r4, r3
 80a3674:	4496      	add	lr, r2
 80a3676:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a3678:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80a367a:	ea4f 00b2 	mov.w	r0, r2, ror #2
 80a367e:	9a05      	ldr	r2, [sp, #20]
 80a3680:	18c5      	adds	r5, r0, r3
 80a3682:	ea82 0700 	eor.w	r7, r2, r0
 80a3686:	9a05      	ldr	r2, [sp, #20]
 80a3688:	400f      	ands	r7, r1
 80a368a:	4057      	eors	r7, r2
 80a368c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    P( E, A, B, C, D, W[1]  );
 80a368e:	ea4f 01b1 	mov.w	r1, r1, ror #2
 80a3692:	441a      	add	r2, r3
 80a3694:	4417      	add	r7, r2
 80a3696:	9a07      	ldr	r2, [sp, #28]
 80a3698:	ea80 0901 	eor.w	r9, r0, r1
 80a369c:	4417      	add	r7, r2
 80a369e:	9a05      	ldr	r2, [sp, #20]
 80a36a0:	ea09 090e 	and.w	r9, r9, lr
 80a36a4:	441a      	add	r2, r3
 80a36a6:	eb07 67fe 	add.w	r7, r7, lr, ror #27
 80a36aa:	4462      	add	r2, ip
    P( D, E, A, B, C, W[2]  );
 80a36ac:	ea4f 0ebe 	mov.w	lr, lr, ror #2
 80a36b0:	ea89 0900 	eor.w	r9, r9, r0
 80a36b4:	4491      	add	r9, r2
 80a36b6:	ea81 020e 	eor.w	r2, r1, lr
 80a36ba:	403a      	ands	r2, r7
 80a36bc:	eb09 69f7 	add.w	r9, r9, r7, ror #27
 80a36c0:	404a      	eors	r2, r1
    P( C, D, E, A, B, W[3]  );
 80a36c2:	ea4f 07b7 	mov.w	r7, r7, ror #2
 80a36c6:	4445      	add	r5, r8
 80a36c8:	18c8      	adds	r0, r1, r3
 80a36ca:	4415      	add	r5, r2
 80a36cc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80a36ce:	ea8e 0207 	eor.w	r2, lr, r7
 80a36d2:	ea02 0209 	and.w	r2, r2, r9
 80a36d6:	eb05 65f9 	add.w	r5, r5, r9, ror #27
 80a36da:	ea82 020e 	eor.w	r2, r2, lr
    P( B, C, D, E, A, W[4]  );
 80a36de:	ea4f 09b9 	mov.w	r9, r9, ror #2
 80a36e2:	4408      	add	r0, r1
 80a36e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80a36e6:	4410      	add	r0, r2
 80a36e8:	ea87 0209 	eor.w	r2, r7, r9
 80a36ec:	18ce      	adds	r6, r1, r3
 80a36ee:	402a      	ands	r2, r5
 80a36f0:	407a      	eors	r2, r7
 80a36f2:	4476      	add	r6, lr
 80a36f4:	eb00 60f5 	add.w	r0, r0, r5, ror #27
 80a36f8:	4416      	add	r6, r2
    P( A, B, C, D, E, W[5]  );
 80a36fa:	ea4f 05b5 	mov.w	r5, r5, ror #2
 80a36fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80a3700:	ea89 0105 	eor.w	r1, r9, r5
 80a3704:	4001      	ands	r1, r0
 80a3706:	441a      	add	r2, r3
 80a3708:	eb06 66f0 	add.w	r6, r6, r0, ror #27
 80a370c:	ea81 0109 	eor.w	r1, r1, r9
    P( E, A, B, C, D, W[6]  );
 80a3710:	ea4f 00b0 	mov.w	r0, r0, ror #2
 80a3714:	443a      	add	r2, r7
 80a3716:	440a      	add	r2, r1
 80a3718:	ea85 0100 	eor.w	r1, r5, r0
 80a371c:	4031      	ands	r1, r6
 80a371e:	eb02 62f6 	add.w	r2, r2, r6, ror #27
 80a3722:	4069      	eors	r1, r5
    P( D, E, A, B, C, W[7]  );
 80a3724:	ea4f 06b6 	mov.w	r6, r6, ror #2
 80a3728:	44cb      	add	fp, r9
 80a372a:	448b      	add	fp, r1
 80a372c:	ea80 0106 	eor.w	r1, r0, r6
 80a3730:	4011      	ands	r1, r2
 80a3732:	441c      	add	r4, r3
 80a3734:	4041      	eors	r1, r0
 80a3736:	442c      	add	r4, r5
 80a3738:	eb0b 6bf2 	add.w	fp, fp, r2, ror #27
 80a373c:	440c      	add	r4, r1
    P( C, D, E, A, B, W[8]  );
 80a373e:	ea4f 02b2 	mov.w	r2, r2, ror #2
 80a3742:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a3744:	ea86 0502 	eor.w	r5, r6, r2
 80a3748:	ea05 050b 	and.w	r5, r5, fp
 80a374c:	4419      	add	r1, r3
 80a374e:	4075      	eors	r5, r6
 80a3750:	4401      	add	r1, r0
 80a3752:	eb04 64fb 	add.w	r4, r4, fp, ror #27
 80a3756:	4429      	add	r1, r5
    P( B, C, D, E, A, W[9]  );
 80a3758:	ea4f 0bbb 	mov.w	fp, fp, ror #2
 80a375c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80a375e:	ea82 000b 	eor.w	r0, r2, fp
 80a3762:	eb05 0a03 	add.w	sl, r5, r3
 80a3766:	4020      	ands	r0, r4
 80a3768:	eb01 61f4 	add.w	r1, r1, r4, ror #27
 80a376c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    P( A, B, C, D, E, W[10] );
 80a376e:	ea4f 04b4 	mov.w	r4, r4, ror #2
 80a3772:	4050      	eors	r0, r2
 80a3774:	44b2      	add	sl, r6
 80a3776:	4482      	add	sl, r0
 80a3778:	ea8b 0004 	eor.w	r0, fp, r4
 80a377c:	eb05 0903 	add.w	r9, r5, r3
 80a3780:	4008      	ands	r0, r1
 80a3782:	ea80 000b 	eor.w	r0, r0, fp
 80a3786:	4491      	add	r9, r2
 80a3788:	eb0a 6af1 	add.w	sl, sl, r1, ror #27
 80a378c:	4481      	add	r9, r0
    P( E, A, B, C, D, W[11] );
 80a378e:	ea4f 01b1 	mov.w	r1, r1, ror #2
 80a3792:	980d      	ldr	r0, [sp, #52]	; 0x34
 80a3794:	ea84 0201 	eor.w	r2, r4, r1
 80a3798:	eb00 0e03 	add.w	lr, r0, r3
 80a379c:	ea02 020a 	and.w	r2, r2, sl
 80a37a0:	eb09 69fa 	add.w	r9, r9, sl, ror #27
 80a37a4:	9802      	ldr	r0, [sp, #8]
    P( D, E, A, B, C, W[12] );
 80a37a6:	ea4f 0aba 	mov.w	sl, sl, ror #2
 80a37aa:	4062      	eors	r2, r4
 80a37ac:	44de      	add	lr, fp
 80a37ae:	4496      	add	lr, r2
 80a37b0:	ea81 020a 	eor.w	r2, r1, sl
 80a37b4:	18c5      	adds	r5, r0, r3
 80a37b6:	ea02 0209 	and.w	r2, r2, r9
 80a37ba:	eb0e 6ef9 	add.w	lr, lr, r9, ror #27
 80a37be:	404a      	eors	r2, r1
    P( C, D, E, A, B, W[13] );
 80a37c0:	ea4f 09b9 	mov.w	r9, r9, ror #2
 80a37c4:	9803      	ldr	r0, [sp, #12]
 80a37c6:	4425      	add	r5, r4
 80a37c8:	4415      	add	r5, r2
 80a37ca:	ea8a 0209 	eor.w	r2, sl, r9
 80a37ce:	ea02 020e 	and.w	r2, r2, lr
 80a37d2:	4418      	add	r0, r3
 80a37d4:	eb05 65fe 	add.w	r5, r5, lr, ror #27
 80a37d8:	ea82 020a 	eor.w	r2, r2, sl
    P( B, C, D, E, A, W[14] );
 80a37dc:	ea4f 0ebe 	mov.w	lr, lr, ror #2
 80a37e0:	4408      	add	r0, r1
 80a37e2:	9904      	ldr	r1, [sp, #16]
 80a37e4:	4410      	add	r0, r2
 80a37e6:	ea89 020e 	eor.w	r2, r9, lr
 80a37ea:	18cf      	adds	r7, r1, r3
 80a37ec:	402a      	ands	r2, r5
 80a37ee:	ea82 0209 	eor.w	r2, r2, r9
 80a37f2:	4457      	add	r7, sl
 80a37f4:	4417      	add	r7, r2
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 80a37f6:	9a06      	ldr	r2, [sp, #24]
 80a37f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a37fa:	ea82 020c 	eor.w	r2, r2, ip
 80a37fe:	404a      	eors	r2, r1
 80a3800:	9902      	ldr	r1, [sp, #8]
    P( B, C, D, E, A, W[9]  );
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
 80a3802:	eb00 60f5 	add.w	r0, r0, r5, ror #27
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 80a3806:	404a      	eors	r2, r1
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
 80a3808:	ea4f 05b5 	mov.w	r5, r5, ror #2
 80a380c:	ea8e 0105 	eor.w	r1, lr, r5
    P( E, A, B, C, D, R(16) );
 80a3810:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80a3814:	9206      	str	r2, [sp, #24]
 80a3816:	4001      	ands	r1, r0
 80a3818:	441a      	add	r2, r3
 80a381a:	ea81 010e 	eor.w	r1, r1, lr
 80a381e:	444a      	add	r2, r9
 80a3820:	440a      	add	r2, r1
    P( D, E, A, B, C, R(17) );
 80a3822:	9907      	ldr	r1, [sp, #28]
 80a3824:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80a3826:	ea81 0108 	eor.w	r1, r1, r8
 80a382a:	4061      	eors	r1, r4
 80a382c:	9c03      	ldr	r4, [sp, #12]
    P( A, B, C, D, E, W[10] );
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
 80a382e:	eb07 67f0 	add.w	r7, r7, r0, ror #27
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
 80a3832:	4061      	eors	r1, r4
 80a3834:	ea4f 71f1 	mov.w	r1, r1, ror #31
 80a3838:	9107      	str	r1, [sp, #28]
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 80a383a:	ea4f 00b0 	mov.w	r0, r0, ror #2
 80a383e:	9c07      	ldr	r4, [sp, #28]
 80a3840:	ea85 0100 	eor.w	r1, r5, r0
 80a3844:	18e6      	adds	r6, r4, r3
 80a3846:	4039      	ands	r1, r7
 80a3848:	4069      	eors	r1, r5
 80a384a:	4476      	add	r6, lr
 80a384c:	440e      	add	r6, r1
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
 80a384e:	990e      	ldr	r1, [sp, #56]	; 0x38
    P( E, A, B, C, D, W[11] );
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 80a3850:	eb02 62f7 	add.w	r2, r2, r7, ror #27
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
 80a3854:	ea8c 0c01 	eor.w	ip, ip, r1
 80a3858:	990b      	ldr	r1, [sp, #44]	; 0x2c
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
 80a385a:	ea4f 07b7 	mov.w	r7, r7, ror #2
    P( C, D, E, A, B, R(18) );
 80a385e:	ea8c 0c01 	eor.w	ip, ip, r1
 80a3862:	9904      	ldr	r1, [sp, #16]
    P( D, E, A, B, C, W[12] );
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
 80a3864:	eb06 66f2 	add.w	r6, r6, r2, ror #27
    P( C, D, E, A, B, R(18) );
 80a3868:	ea8c 0c01 	eor.w	ip, ip, r1
 80a386c:	ea4f 71fc 	mov.w	r1, ip, ror #31
 80a3870:	9108      	str	r1, [sp, #32]
 80a3872:	9c08      	ldr	r4, [sp, #32]
 80a3874:	ea80 0107 	eor.w	r1, r0, r7
 80a3878:	4011      	ands	r1, r2
 80a387a:	441c      	add	r4, r3
 80a387c:	4041      	eors	r1, r0
 80a387e:	442c      	add	r4, r5
 80a3880:	440c      	add	r4, r1
    P( B, C, D, E, A, R(19) );
 80a3882:	990f      	ldr	r1, [sp, #60]	; 0x3c
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
 80a3884:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( B, C, D, E, A, R(19) );
 80a3888:	ea88 0801 	eor.w	r8, r8, r1
 80a388c:	990c      	ldr	r1, [sp, #48]	; 0x30
 80a388e:	ea87 0502 	eor.w	r5, r7, r2
 80a3892:	ea88 0801 	eor.w	r8, r8, r1
 80a3896:	9906      	ldr	r1, [sp, #24]
 80a3898:	4035      	ands	r5, r6
 80a389a:	ea88 0801 	eor.w	r8, r8, r1
 80a389e:	ea4f 78f8 	mov.w	r8, r8, ror #31
 80a38a2:	4443      	add	r3, r8
 80a38a4:	407d      	eors	r5, r7
 80a38a6:	4403      	add	r3, r0
 80a38a8:	18e9      	adds	r1, r5, r3
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 80a38aa:	9810      	ldr	r0, [sp, #64]	; 0x40
 80a38ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a38ae:	4d4b      	ldr	r5, [pc, #300]	; (80a39dc <mbedtls_internal_sha1_process+0x56c>)
 80a38b0:	ea83 0c00 	eor.w	ip, r3, r0
 80a38b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    P( C, D, E, A, B, W[13] );
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
 80a38b6:	eb04 64f6 	add.w	r4, r4, r6, ror #27
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 80a38ba:	ea8c 0c03 	eor.w	ip, ip, r3
 80a38be:	9b07      	ldr	r3, [sp, #28]
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
    P( B, C, D, E, A, R(19) );
 80a38c0:	ea4f 06b6 	mov.w	r6, r6, ror #2
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 80a38c4:	ea8c 0c03 	eor.w	ip, ip, r3
 80a38c8:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 80a38cc:	ea82 0306 	eor.w	r3, r2, r6
 80a38d0:	eb0c 0b05 	add.w	fp, ip, r5
 80a38d4:	4063      	eors	r3, r4
 80a38d6:	44bb      	add	fp, r7
    P( E, A, B, C, D, R(21) );
 80a38d8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80a38da:	449b      	add	fp, r3
 80a38dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( B, C, D, E, A, W[14] );
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
    P( D, E, A, B, C, R(17) );
    P( C, D, E, A, B, R(18) );
    P( B, C, D, E, A, R(19) );
 80a38de:	eb01 61f4 	add.w	r1, r1, r4, ror #27

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
 80a38e2:	ea83 0e00 	eor.w	lr, r3, r0
 80a38e6:	9b02      	ldr	r3, [sp, #8]
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 80a38e8:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( E, A, B, C, D, R(21) );
 80a38ec:	ea8e 0e03 	eor.w	lr, lr, r3
 80a38f0:	9b08      	ldr	r3, [sp, #32]
 80a38f2:	ea86 0004 	eor.w	r0, r6, r4
 80a38f6:	ea8e 0e03 	eor.w	lr, lr, r3
 80a38fa:	ea4f 7efe 	mov.w	lr, lr, ror #31
 80a38fe:	eb0e 0305 	add.w	r3, lr, r5
 80a3902:	4048      	eors	r0, r1
 80a3904:	4413      	add	r3, r2
 80a3906:	4403      	add	r3, r0
    P( D, E, A, B, C, R(22) );
 80a3908:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80a390a:	9809      	ldr	r0, [sp, #36]	; 0x24
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 80a390c:	eb0b 6bf1 	add.w	fp, fp, r1, ror #27
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
 80a3910:	ea82 0700 	eor.w	r7, r2, r0
 80a3914:	9a03      	ldr	r2, [sp, #12]

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
 80a3916:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( D, E, A, B, C, R(22) );
 80a391a:	4057      	eors	r7, r2
 80a391c:	ea87 0708 	eor.w	r7, r7, r8
 80a3920:	ea4f 77f7 	mov.w	r7, r7, ror #31
 80a3924:	ea84 0201 	eor.w	r2, r4, r1
 80a3928:	eb07 0a05 	add.w	sl, r7, r5
 80a392c:	ea82 020b 	eor.w	r2, r2, fp
 80a3930:	44b2      	add	sl, r6
    P( C, D, E, A, B, R(23) );
 80a3932:	980a      	ldr	r0, [sp, #40]	; 0x28
 80a3934:	4492      	add	sl, r2
 80a3936:	9a11      	ldr	r2, [sp, #68]	; 0x44

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
 80a3938:	eb03 63fb 	add.w	r3, r3, fp, ror #27
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
 80a393c:	ea82 0600 	eor.w	r6, r2, r0
 80a3940:	9a04      	ldr	r2, [sp, #16]
#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
 80a3942:	ea4f 0bbb 	mov.w	fp, fp, ror #2
    P( C, D, E, A, B, R(23) );
 80a3946:	4056      	eors	r6, r2
 80a3948:	ea86 060c 	eor.w	r6, r6, ip
 80a394c:	ea4f 76f6 	mov.w	r6, r6, ror #31
 80a3950:	ea81 020b 	eor.w	r2, r1, fp
 80a3954:	eb06 0905 	add.w	r9, r6, r5
 80a3958:	405a      	eors	r2, r3
 80a395a:	44a1      	add	r9, r4
    P( B, C, D, E, A, R(24) );
 80a395c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80a395e:	4491      	add	r9, r2
 80a3960:	9a09      	ldr	r2, [sp, #36]	; 0x24
#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
 80a3962:	eb0a 6af3 	add.w	sl, sl, r3, ror #27
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
 80a3966:	ea82 0400 	eor.w	r4, r2, r0
 80a396a:	9a06      	ldr	r2, [sp, #24]
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
 80a396c:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( B, C, D, E, A, R(24) );
 80a3970:	4054      	eors	r4, r2
 80a3972:	ea84 040e 	eor.w	r4, r4, lr
 80a3976:	ea4f 72f4 	mov.w	r2, r4, ror #31
 80a397a:	9209      	str	r2, [sp, #36]	; 0x24
 80a397c:	9809      	ldr	r0, [sp, #36]	; 0x24
 80a397e:	ea8b 0203 	eor.w	r2, fp, r3
 80a3982:	4428      	add	r0, r5
 80a3984:	ea82 020a 	eor.w	r2, r2, sl
 80a3988:	4408      	add	r0, r1
 80a398a:	4410      	add	r0, r2
    P( A, B, C, D, E, R(25) );
 80a398c:	990c      	ldr	r1, [sp, #48]	; 0x30
 80a398e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
 80a3990:	eb09 69fa 	add.w	r9, r9, sl, ror #27
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
 80a3994:	404a      	eors	r2, r1
 80a3996:	9907      	ldr	r1, [sp, #28]

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
 80a3998:	ea4f 0aba 	mov.w	sl, sl, ror #2
    P( A, B, C, D, E, R(25) );
 80a399c:	404a      	eors	r2, r1
 80a399e:	407a      	eors	r2, r7
 80a39a0:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80a39a4:	920a      	str	r2, [sp, #40]	; 0x28
 80a39a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a39a8:	ea83 020a 	eor.w	r2, r3, sl
 80a39ac:	4429      	add	r1, r5
 80a39ae:	ea82 0209 	eor.w	r2, r2, r9
 80a39b2:	4459      	add	r1, fp
 80a39b4:	4411      	add	r1, r2
    P( E, A, B, C, D, R(26) );
 80a39b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c

    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
 80a39b8:	eb00 60f9 	add.w	r0, r0, r9, ror #27
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
 80a39bc:	4614      	mov	r4, r2
 80a39be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
 80a39c0:	ea4f 09b9 	mov.w	r9, r9, ror #2
    P( E, A, B, C, D, R(26) );
 80a39c4:	4062      	eors	r2, r4
 80a39c6:	9c08      	ldr	r4, [sp, #32]
 80a39c8:	ea8a 0b09 	eor.w	fp, sl, r9
 80a39cc:	4062      	eors	r2, r4
 80a39ce:	4072      	eors	r2, r6
 80a39d0:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80a39d4:	e004      	b.n	80a39e0 <mbedtls_internal_sha1_process+0x570>
 80a39d6:	bf00      	nop
 80a39d8:	5a827999 	.word	0x5a827999
 80a39dc:	6ed9eba1 	.word	0x6ed9eba1
 80a39e0:	920b      	str	r2, [sp, #44]	; 0x2c
 80a39e2:	442a      	add	r2, r5
    P( D, E, A, B, C, R(27) );
 80a39e4:	9c02      	ldr	r4, [sp, #8]
    P( A, B, C, D, E, R(20) );
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
 80a39e6:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 80a39ea:	ea8b 0b00 	eor.w	fp, fp, r0
 80a39ee:	441a      	add	r2, r3
    P( E, A, B, C, D, R(26) );
 80a39f0:	ea4f 03b0 	mov.w	r3, r0, ror #2
    P( D, E, A, B, C, R(27) );
 80a39f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80a39f6:	445a      	add	r2, fp
 80a39f8:	4060      	eors	r0, r4
 80a39fa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80a39fc:	ea80 0008 	eor.w	r0, r0, r8
 80a3a00:	4060      	eors	r0, r4
 80a3a02:	ea4f 70f0 	mov.w	r0, r0, ror #31
 80a3a06:	900c      	str	r0, [sp, #48]	; 0x30
 80a3a08:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80a3a0a:	ea89 0003 	eor.w	r0, r9, r3
 80a3a0e:	eb04 0b05 	add.w	fp, r4, r5
 80a3a12:	4048      	eors	r0, r1
 80a3a14:	44da      	add	sl, fp
    P( C, D, E, A, B, R(28) );
 80a3a16:	9c03      	ldr	r4, [sp, #12]
 80a3a18:	4482      	add	sl, r0
 80a3a1a:	980d      	ldr	r0, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(21) );
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
 80a3a1c:	eb02 62f1 	add.w	r2, r2, r1, ror #27
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
 80a3a20:	4060      	eors	r0, r4
 80a3a22:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80a3a24:	ea80 000c 	eor.w	r0, r0, ip
 80a3a28:	4060      	eors	r0, r4
 80a3a2a:	ea4f 70f0 	mov.w	r0, r0, ror #31
    P( B, C, D, E, A, R(29) );
 80a3a2e:	9c02      	ldr	r4, [sp, #8]
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
 80a3a30:	900d      	str	r0, [sp, #52]	; 0x34
 80a3a32:	4428      	add	r0, r5
 80a3a34:	4448      	add	r0, r9
    P( B, C, D, E, A, R(29) );
 80a3a36:	46a1      	mov	r9, r4
 80a3a38:	9c04      	ldr	r4, [sp, #16]
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
 80a3a3a:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
 80a3a3e:	ea89 0904 	eor.w	r9, r9, r4
 80a3a42:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80a3a44:	ea89 090e 	eor.w	r9, r9, lr
 80a3a48:	ea89 0904 	eor.w	r9, r9, r4
 80a3a4c:	ea4f 74f9 	mov.w	r4, r9, ror #31
 80a3a50:	eb04 0905 	add.w	r9, r4, r5
 80a3a54:	9402      	str	r4, [sp, #8]
 80a3a56:	ea83 0b01 	eor.w	fp, r3, r1
    P( A, B, C, D, E, R(30) );
 80a3a5a:	9c06      	ldr	r4, [sp, #24]
 80a3a5c:	4499      	add	r9, r3
 80a3a5e:	9b03      	ldr	r3, [sp, #12]
    P( D, E, A, B, C, R(22) );
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
 80a3a60:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
 80a3a64:	4063      	eors	r3, r4
 80a3a66:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80a3a68:	407b      	eors	r3, r7
 80a3a6a:	4063      	eors	r3, r4
 80a3a6c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80a3a70:	9303      	str	r3, [sp, #12]
 80a3a72:	ea8b 0b02 	eor.w	fp, fp, r2
    P( C, D, E, A, B, R(23) );
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
 80a3a76:	ea4f 02b2 	mov.w	r2, r2, ror #2
 80a3a7a:	9c03      	ldr	r4, [sp, #12]
 80a3a7c:	4458      	add	r0, fp
 80a3a7e:	ea81 0b02 	eor.w	fp, r1, r2
 80a3a82:	eb00 60fa 	add.w	r0, r0, sl, ror #27
 80a3a86:	ea8b 0b0a 	eor.w	fp, fp, sl
    P( B, C, D, E, A, R(29) );
 80a3a8a:	ea4f 0aba 	mov.w	sl, sl, ror #2
 80a3a8e:	ea82 030a 	eor.w	r3, r2, sl
 80a3a92:	44d9      	add	r9, fp
 80a3a94:	eb04 0b05 	add.w	fp, r4, r5
 80a3a98:	4043      	eors	r3, r0
 80a3a9a:	4459      	add	r1, fp
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
 80a3a9c:	9c07      	ldr	r4, [sp, #28]
 80a3a9e:	4419      	add	r1, r3
 80a3aa0:	9b04      	ldr	r3, [sp, #16]
    P( B, C, D, E, A, R(24) );
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
 80a3aa2:	eb09 69f0 	add.w	r9, r9, r0, ror #27
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
 80a3aa6:	4063      	eors	r3, r4
 80a3aa8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80a3aaa:	4073      	eors	r3, r6
 80a3aac:	4063      	eors	r3, r4
 80a3aae:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80a3ab2:	9304      	str	r3, [sp, #16]
 80a3ab4:	442b      	add	r3, r5
    P( D, E, A, B, C, R(32) );
 80a3ab6:	9c08      	ldr	r4, [sp, #32]
 80a3ab8:	4413      	add	r3, r2
 80a3aba:	9a06      	ldr	r2, [sp, #24]
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
 80a3abc:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
 80a3ac0:	4062      	eors	r2, r4
 80a3ac2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80a3ac4:	ea8a 0b00 	eor.w	fp, sl, r0
 80a3ac8:	4062      	eors	r2, r4
 80a3aca:	9c02      	ldr	r4, [sp, #8]
    P( A, B, C, D, E, R(25) );
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
 80a3acc:	eb01 61f9 	add.w	r1, r1, r9, ror #27
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
 80a3ad0:	4062      	eors	r2, r4
 80a3ad2:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80a3ad6:	9206      	str	r2, [sp, #24]
 80a3ad8:	9c06      	ldr	r4, [sp, #24]
 80a3ada:	ea8b 0b09 	eor.w	fp, fp, r9
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
 80a3ade:	ea4f 09b9 	mov.w	r9, r9, ror #2
 80a3ae2:	ea80 0209 	eor.w	r2, r0, r9
 80a3ae6:	445b      	add	r3, fp
 80a3ae8:	eb04 0b05 	add.w	fp, r4, r5
 80a3aec:	404a      	eors	r2, r1
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 80a3aee:	9c07      	ldr	r4, [sp, #28]
 80a3af0:	44da      	add	sl, fp
    P( E, A, B, C, D, R(26) );
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
 80a3af2:	eb03 63f1 	add.w	r3, r3, r1, ror #27
 80a3af6:	4492      	add	sl, r2
    P( D, E, A, B, C, R(32) );
 80a3af8:	eb0a 62f3 	add.w	r2, sl, r3, ror #27
    P( C, D, E, A, B, R(33) );
 80a3afc:	ea84 0a08 	eor.w	sl, r4, r8
 80a3b00:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    P( D, E, A, B, C, R(27) );
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
 80a3b02:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(33) );
 80a3b06:	ea8a 0a04 	eor.w	sl, sl, r4
 80a3b0a:	9c03      	ldr	r4, [sp, #12]
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
 80a3b0c:	ea88 080e 	eor.w	r8, r8, lr
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 80a3b10:	ea8a 0a04 	eor.w	sl, sl, r4
 80a3b14:	ea4f 74fa 	mov.w	r4, sl, ror #31
 80a3b18:	eb04 0b05 	add.w	fp, r4, r5
 80a3b1c:	ea89 0a01 	eor.w	sl, r9, r1
 80a3b20:	4458      	add	r0, fp
 80a3b22:	ea8a 0a03 	eor.w	sl, sl, r3
 80a3b26:	4482      	add	sl, r0
    P( B, C, D, E, A, R(34) );
 80a3b28:	9808      	ldr	r0, [sp, #32]
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 80a3b2a:	9407      	str	r4, [sp, #28]
    P( B, C, D, E, A, R(34) );
 80a3b2c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80a3b2e:	ea80 000c 	eor.w	r0, r0, ip
 80a3b32:	4060      	eors	r0, r4
 80a3b34:	9c04      	ldr	r4, [sp, #16]
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 80a3b36:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( B, C, D, E, A, R(34) );
 80a3b3a:	4060      	eors	r0, r4
 80a3b3c:	ea4f 70f0 	mov.w	r0, r0, ror #31
 80a3b40:	9008      	str	r0, [sp, #32]
 80a3b42:	9c08      	ldr	r4, [sp, #32]
 80a3b44:	ea81 0003 	eor.w	r0, r1, r3
 80a3b48:	eb04 0b05 	add.w	fp, r4, r5
    P( A, B, C, D, E, R(35) );
 80a3b4c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80a3b4e:	4050      	eors	r0, r2
 80a3b50:	ea88 0804 	eor.w	r8, r8, r4
 80a3b54:	9c06      	ldr	r4, [sp, #24]
 80a3b56:	44d9      	add	r9, fp
 80a3b58:	ea88 0804 	eor.w	r8, r8, r4
 80a3b5c:	ea4f 7bf8 	mov.w	fp, r8, ror #31
    P( C, D, E, A, B, R(28) );
    P( B, C, D, E, A, R(29) );
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
 80a3b60:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
 80a3b64:	4481      	add	r9, r0
    P( B, C, D, E, A, R(34) );
 80a3b66:	ea4f 02b2 	mov.w	r2, r2, ror #2
 80a3b6a:	eb09 60fa 	add.w	r0, r9, sl, ror #27
 80a3b6e:	ea83 0802 	eor.w	r8, r3, r2
 80a3b72:	eb0b 0905 	add.w	r9, fp, r5
 80a3b76:	ea88 080a 	eor.w	r8, r8, sl
 80a3b7a:	4449      	add	r1, r9
 80a3b7c:	4441      	add	r1, r8
    P( A, B, C, D, E, R(35) );
 80a3b7e:	eb01 68f0 	add.w	r8, r1, r0, ror #27
    P( E, A, B, C, D, R(36) );
 80a3b82:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a3b84:	ea8c 0c07 	eor.w	ip, ip, r7
 80a3b88:	ea8c 0c01 	eor.w	ip, ip, r1
 80a3b8c:	9907      	ldr	r1, [sp, #28]
    P( A, B, C, D, E, R(30) );
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
 80a3b8e:	ea4f 0aba 	mov.w	sl, sl, ror #2
    P( E, A, B, C, D, R(36) );
 80a3b92:	ea8c 0c01 	eor.w	ip, ip, r1
 80a3b96:	ea4f 71fc 	mov.w	r1, ip, ror #31
 80a3b9a:	910e      	str	r1, [sp, #56]	; 0x38
 80a3b9c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80a3b9e:	ea82 010a 	eor.w	r1, r2, sl
 80a3ba2:	eb04 0c05 	add.w	ip, r4, r5
 80a3ba6:	4041      	eors	r1, r0
 80a3ba8:	4463      	add	r3, ip
 80a3baa:	440b      	add	r3, r1
 80a3bac:	eb03 61f8 	add.w	r1, r3, r8, ror #27
    P( D, E, A, B, C, R(37) );
 80a3bb0:	9b02      	ldr	r3, [sp, #8]
 80a3bb2:	ea8e 0e06 	eor.w	lr, lr, r6
 80a3bb6:	ea8e 0e03 	eor.w	lr, lr, r3
 80a3bba:	9b08      	ldr	r3, [sp, #32]
    P( E, A, B, C, D, R(31) );
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
 80a3bbc:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(37) );
 80a3bc0:	ea8e 0e03 	eor.w	lr, lr, r3
 80a3bc4:	ea4f 73fe 	mov.w	r3, lr, ror #31
 80a3bc8:	930f      	str	r3, [sp, #60]	; 0x3c
 80a3bca:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80a3bcc:	ea8a 0300 	eor.w	r3, sl, r0
 80a3bd0:	eb04 0e05 	add.w	lr, r4, r5
 80a3bd4:	ea83 0308 	eor.w	r3, r3, r8
 80a3bd8:	4472      	add	r2, lr
 80a3bda:	441a      	add	r2, r3
 80a3bdc:	eb02 63f1 	add.w	r3, r2, r1, ror #27
    P( C, D, E, A, B, R(38) );
 80a3be0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
 80a3be2:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( C, D, E, A, B, R(38) );
 80a3be6:	4057      	eors	r7, r2
 80a3be8:	9a03      	ldr	r2, [sp, #12]
 80a3bea:	4057      	eors	r7, r2
 80a3bec:	ea87 070b 	eor.w	r7, r7, fp
 80a3bf0:	ea4f 72f7 	mov.w	r2, r7, ror #31
 80a3bf4:	9210      	str	r2, [sp, #64]	; 0x40
 80a3bf6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80a3bf8:	ea80 0208 	eor.w	r2, r0, r8
 80a3bfc:	1967      	adds	r7, r4, r5
    P( B, C, D, E, A, R(39) );
 80a3bfe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80a3c00:	404a      	eors	r2, r1
 80a3c02:	4066      	eors	r6, r4
 80a3c04:	9c04      	ldr	r4, [sp, #16]
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
 80a3c06:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( B, C, D, E, A, R(39) );
 80a3c0a:	4066      	eors	r6, r4
 80a3c0c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80a3c0e:	44ba      	add	sl, r7
 80a3c10:	4066      	eors	r6, r4
 80a3c12:	ea4f 74f6 	mov.w	r4, r6, ror #31
 80a3c16:	4425      	add	r5, r4
 80a3c18:	9411      	str	r4, [sp, #68]	; 0x44
 80a3c1a:	4428      	add	r0, r5
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 80a3c1c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80a3c1e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80a3c20:	ea88 0601 	eor.w	r6, r8, r1
 80a3c24:	4065      	eors	r5, r4
 80a3c26:	462c      	mov	r4, r5
 80a3c28:	9d06      	ldr	r5, [sp, #24]
 80a3c2a:	405e      	eors	r6, r3
 80a3c2c:	406c      	eors	r4, r5
 80a3c2e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80a3c30:	4492      	add	sl, r2
 80a3c32:	4430      	add	r0, r6
 80a3c34:	406c      	eors	r4, r5
 80a3c36:	4ed6      	ldr	r6, [pc, #856]	; (80a3f90 <mbedtls_internal_sha1_process+0xb20>)
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
 80a3c38:	eb0a 62f3 	add.w	r2, sl, r3, ror #27
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 80a3c3c:	ea4f 74f4 	mov.w	r4, r4, ror #31
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
    P( B, C, D, E, A, R(39) );
 80a3c40:	ea4f 03b3 	mov.w	r3, r3, ror #2
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 80a3c44:	9409      	str	r4, [sp, #36]	; 0x24
 80a3c46:	ea42 0503 	orr.w	r5, r2, r3
 80a3c4a:	4434      	add	r4, r6
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
    P( E, A, B, C, D, R(36) );
    P( D, E, A, B, C, R(37) );
    P( C, D, E, A, B, R(38) );
    P( B, C, D, E, A, R(39) );
 80a3c4c:	eb00 60f2 	add.w	r0, r0, r2, ror #27
#undef F

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
 80a3c50:	400d      	ands	r5, r1
 80a3c52:	44a0      	add	r8, r4
 80a3c54:	ea02 0403 	and.w	r4, r2, r3
 80a3c58:	432c      	orrs	r4, r5
 80a3c5a:	eb08 68f0 	add.w	r8, r8, r0, ror #27
 80a3c5e:	ea4f 0ab2 	mov.w	sl, r2, ror #2
 80a3c62:	44a0      	add	r8, r4
    P( E, A, B, C, D, R(41) );
 80a3c64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a3c66:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80a3c68:	ea4f 0cb0 	mov.w	ip, r0, ror #2
 80a3c6c:	4062      	eors	r2, r4
 80a3c6e:	9c07      	ldr	r4, [sp, #28]
 80a3c70:	4062      	eors	r2, r4
 80a3c72:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80a3c74:	4062      	eors	r2, r4
 80a3c76:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80a3c7a:	920a      	str	r2, [sp, #40]	; 0x28
 80a3c7c:	ea40 020a 	orr.w	r2, r0, sl
 80a3c80:	ea02 0403 	and.w	r4, r2, r3
 80a3c84:	ea00 020a 	and.w	r2, r0, sl
 80a3c88:	4322      	orrs	r2, r4
 80a3c8a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    P( D, E, A, B, C, R(42) );
 80a3c8c:	980d      	ldr	r0, [sp, #52]	; 0x34
 80a3c8e:	4434      	add	r4, r6
 80a3c90:	4421      	add	r1, r4
 80a3c92:	4411      	add	r1, r2
 80a3c94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c

#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
 80a3c96:	eb01 61f8 	add.w	r1, r1, r8, ror #27
    P( D, E, A, B, C, R(42) );
 80a3c9a:	4042      	eors	r2, r0
 80a3c9c:	9808      	ldr	r0, [sp, #32]
 80a3c9e:	4042      	eors	r2, r0
 80a3ca0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80a3ca2:	4042      	eors	r2, r0
 80a3ca4:	ea4f 72f2 	mov.w	r2, r2, ror #31
 80a3ca8:	920b      	str	r2, [sp, #44]	; 0x2c
 80a3caa:	ea48 000c 	orr.w	r0, r8, ip
 80a3cae:	4432      	add	r2, r6
 80a3cb0:	ea00 000a 	and.w	r0, r0, sl
 80a3cb4:	4413      	add	r3, r2
 80a3cb6:	ea08 020c 	and.w	r2, r8, ip
 80a3cba:	4302      	orrs	r2, r0
 80a3cbc:	eb03 63f1 	add.w	r3, r3, r1, ror #27
 80a3cc0:	4413      	add	r3, r2
    P( C, D, E, A, B, R(43) );
 80a3cc2:	9802      	ldr	r0, [sp, #8]
 80a3cc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
 80a3cc6:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( C, D, E, A, B, R(43) );
 80a3cca:	4050      	eors	r0, r2
 80a3ccc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a3cce:	ea80 000b 	eor.w	r0, r0, fp
 80a3cd2:	4050      	eors	r0, r2
 80a3cd4:	ea4f 72f0 	mov.w	r2, r0, ror #31
 80a3cd8:	ea41 0008 	orr.w	r0, r1, r8
 80a3cdc:	920c      	str	r2, [sp, #48]	; 0x30
 80a3cde:	ea00 000c 	and.w	r0, r0, ip
 80a3ce2:	ea01 0208 	and.w	r2, r1, r8
 80a3ce6:	4310      	orrs	r0, r2
 80a3ce8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a3cea:	ea4f 01b1 	mov.w	r1, r1, ror #2
 80a3cee:	4432      	add	r2, r6
 80a3cf0:	4452      	add	r2, sl
 80a3cf2:	4402      	add	r2, r0
 80a3cf4:	eb02 6af3 	add.w	sl, r2, r3, ror #27
    P( B, C, D, E, A, R(44) );
 80a3cf8:	9803      	ldr	r0, [sp, #12]
 80a3cfa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80a3cfc:	ea43 0401 	orr.w	r4, r3, r1
 80a3d00:	4050      	eors	r0, r2
 80a3d02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80a3d04:	ea04 0408 	and.w	r4, r4, r8
 80a3d08:	4050      	eors	r0, r2
 80a3d0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a3d0c:	ea4f 07b3 	mov.w	r7, r3, ror #2
 80a3d10:	4050      	eors	r0, r2
 80a3d12:	ea4f 72f0 	mov.w	r2, r0, ror #31
 80a3d16:	1990      	adds	r0, r2, r6
 80a3d18:	920d      	str	r2, [sp, #52]	; 0x34
 80a3d1a:	4460      	add	r0, ip
 80a3d1c:	ea03 0201 	and.w	r2, r3, r1
 80a3d20:	4322      	orrs	r2, r4
 80a3d22:	eb00 60fa 	add.w	r0, r0, sl, ror #27
 80a3d26:	4410      	add	r0, r2
    P( A, B, C, D, E, R(45) );
 80a3d28:	9b02      	ldr	r3, [sp, #8]
 80a3d2a:	9a04      	ldr	r2, [sp, #16]
 80a3d2c:	ea4f 09ba 	mov.w	r9, sl, ror #2
 80a3d30:	4053      	eors	r3, r2
 80a3d32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a3d34:	4053      	eors	r3, r2
 80a3d36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a3d38:	4053      	eors	r3, r2
 80a3d3a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80a3d3e:	9302      	str	r3, [sp, #8]
 80a3d40:	9a02      	ldr	r2, [sp, #8]
 80a3d42:	ea4a 0307 	orr.w	r3, sl, r7
 80a3d46:	ea03 0e01 	and.w	lr, r3, r1
 80a3d4a:	ea0a 0307 	and.w	r3, sl, r7
 80a3d4e:	ea4e 0303 	orr.w	r3, lr, r3
 80a3d52:	eb02 0e06 	add.w	lr, r2, r6
 80a3d56:	44f0      	add	r8, lr
 80a3d58:	4498      	add	r8, r3
    P( E, A, B, C, D, R(46) );
 80a3d5a:	9a06      	ldr	r2, [sp, #24]
 80a3d5c:	9b03      	ldr	r3, [sp, #12]
    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
 80a3d5e:	eb08 6ef0 	add.w	lr, r8, r0, ror #27
    P( E, A, B, C, D, R(46) );
 80a3d62:	ea83 0802 	eor.w	r8, r3, r2
 80a3d66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80a3d68:	ea88 0803 	eor.w	r8, r8, r3
 80a3d6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a3d6e:	ea88 0803 	eor.w	r8, r8, r3
 80a3d72:	ea4f 73f8 	mov.w	r3, r8, ror #31
 80a3d76:	199c      	adds	r4, r3, r6
 80a3d78:	4421      	add	r1, r4
 80a3d7a:	ea40 0409 	orr.w	r4, r0, r9
 80a3d7e:	9303      	str	r3, [sp, #12]
 80a3d80:	403c      	ands	r4, r7
 80a3d82:	ea00 0309 	and.w	r3, r0, r9
 80a3d86:	431c      	orrs	r4, r3
    P( D, E, A, B, C, R(47) );
 80a3d88:	9b04      	ldr	r3, [sp, #16]
 80a3d8a:	9a07      	ldr	r2, [sp, #28]
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
 80a3d8c:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(47) );
 80a3d90:	ea83 0c02 	eor.w	ip, r3, r2
 80a3d94:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80a3d96:	eb01 61fe 	add.w	r1, r1, lr, ror #27
 80a3d9a:	ea8c 0c03 	eor.w	ip, ip, r3
 80a3d9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
 80a3da0:	440c      	add	r4, r1
    P( D, E, A, B, C, R(47) );
 80a3da2:	ea8c 0c03 	eor.w	ip, ip, r3
 80a3da6:	ea4f 73fc 	mov.w	r3, ip, ror #31
 80a3daa:	ea4e 0100 	orr.w	r1, lr, r0
 80a3dae:	9304      	str	r3, [sp, #16]
 80a3db0:	ea01 0109 	and.w	r1, r1, r9
 80a3db4:	ea0e 0300 	and.w	r3, lr, r0
 80a3db8:	4319      	orrs	r1, r3
 80a3dba:	9b04      	ldr	r3, [sp, #16]
    P( C, D, E, A, B, R(48) );
 80a3dbc:	9a08      	ldr	r2, [sp, #32]
 80a3dbe:	4433      	add	r3, r6
 80a3dc0:	443b      	add	r3, r7
 80a3dc2:	18cf      	adds	r7, r1, r3
 80a3dc4:	9b06      	ldr	r3, [sp, #24]
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
 80a3dc6:	ea4f 01be 	mov.w	r1, lr, ror #2
    P( C, D, E, A, B, R(48) );
 80a3dca:	ea83 0802 	eor.w	r8, r3, r2
 80a3dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(42) );
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
 80a3dd0:	eb07 67f4 	add.w	r7, r7, r4, ror #27
    P( C, D, E, A, B, R(48) );
 80a3dd4:	ea88 0803 	eor.w	r8, r8, r3
 80a3dd8:	9b02      	ldr	r3, [sp, #8]
    P( B, C, D, E, A, R(49) );
 80a3dda:	ea4f 0ab7 	mov.w	sl, r7, ror #2
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
 80a3dde:	ea88 0803 	eor.w	r8, r8, r3
 80a3de2:	ea4f 73f8 	mov.w	r3, r8, ror #31
 80a3de6:	199a      	adds	r2, r3, r6
 80a3de8:	4491      	add	r9, r2
 80a3dea:	ea44 0201 	orr.w	r2, r4, r1
 80a3dee:	9306      	str	r3, [sp, #24]
 80a3df0:	4002      	ands	r2, r0
 80a3df2:	ea04 0301 	and.w	r3, r4, r1
 80a3df6:	431a      	orrs	r2, r3
    P( B, C, D, E, A, R(49) );
 80a3df8:	9b07      	ldr	r3, [sp, #28]
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
 80a3dfa:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( B, C, D, E, A, R(49) );
 80a3dfe:	ea83 0c0b 	eor.w	ip, r3, fp
 80a3e02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3e04:	eb09 69f7 	add.w	r9, r9, r7, ror #27
 80a3e08:	ea8c 0c03 	eor.w	ip, ip, r3
 80a3e0c:	9b03      	ldr	r3, [sp, #12]
    P( C, D, E, A, B, R(43) );
    P( B, C, D, E, A, R(44) );
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
 80a3e0e:	444a      	add	r2, r9
    P( B, C, D, E, A, R(49) );
 80a3e10:	ea8c 0c03 	eor.w	ip, ip, r3
 80a3e14:	ea4f 73fc 	mov.w	r3, ip, ror #31
 80a3e18:	9307      	str	r3, [sp, #28]
 80a3e1a:	9d07      	ldr	r5, [sp, #28]
 80a3e1c:	ea47 0304 	orr.w	r3, r7, r4
 80a3e20:	ea03 0c01 	and.w	ip, r3, r1
 80a3e24:	ea07 0304 	and.w	r3, r7, r4
 80a3e28:	ea4c 0303 	orr.w	r3, ip, r3
 80a3e2c:	eb05 0c06 	add.w	ip, r5, r6
 80a3e30:	4460      	add	r0, ip
 80a3e32:	4418      	add	r0, r3
 80a3e34:	eb00 6cf2 	add.w	ip, r0, r2, ror #27
    P( A, B, C, D, E, R(50) );
 80a3e38:	9b08      	ldr	r3, [sp, #32]
 80a3e3a:	980e      	ldr	r0, [sp, #56]	; 0x38
 80a3e3c:	ea83 0500 	eor.w	r5, r3, r0
 80a3e40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a3e42:	ea42 000a 	orr.w	r0, r2, sl
 80a3e46:	405d      	eors	r5, r3
 80a3e48:	9b04      	ldr	r3, [sp, #16]
 80a3e4a:	4020      	ands	r0, r4
 80a3e4c:	405d      	eors	r5, r3
 80a3e4e:	ea4f 77f5 	mov.w	r7, r5, ror #31
 80a3e52:	19bb      	adds	r3, r7, r6
 80a3e54:	4419      	add	r1, r3
 80a3e56:	eb01 63fc 	add.w	r3, r1, ip, ror #27
 80a3e5a:	ea02 010a 	and.w	r1, r2, sl
 80a3e5e:	4301      	orrs	r1, r0
 80a3e60:	4419      	add	r1, r3
    P( E, A, B, C, D, R(51) );
 80a3e62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( A, B, C, D, E, R(45) );
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
 80a3e64:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(51) );
 80a3e68:	ea8b 0903 	eor.w	r9, fp, r3
 80a3e6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a3e6e:	ea4f 00bc 	mov.w	r0, ip, ror #2
 80a3e72:	ea89 0903 	eor.w	r9, r9, r3
 80a3e76:	9b06      	ldr	r3, [sp, #24]
 80a3e78:	ea89 0903 	eor.w	r9, r9, r3
 80a3e7c:	ea4c 0302 	orr.w	r3, ip, r2
 80a3e80:	ea4f 7ef9 	mov.w	lr, r9, ror #31
 80a3e84:	ea03 050a 	and.w	r5, r3, sl
 80a3e88:	ea0c 0302 	and.w	r3, ip, r2
 80a3e8c:	432b      	orrs	r3, r5
 80a3e8e:	eb0e 0506 	add.w	r5, lr, r6
 80a3e92:	4425      	add	r5, r4
 80a3e94:	441d      	add	r5, r3
    P( D, E, A, B, C, R(52) );
 80a3e96:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80a3e98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    P( E, A, B, C, D, R(46) );
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
 80a3e9a:	eb05 65f1 	add.w	r5, r5, r1, ror #27
    P( D, E, A, B, C, R(52) );
 80a3e9e:	4063      	eors	r3, r4
 80a3ea0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80a3ea2:	4063      	eors	r3, r4
 80a3ea4:	9c07      	ldr	r4, [sp, #28]
 80a3ea6:	4063      	eors	r3, r4
 80a3ea8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80a3eac:	9308      	str	r3, [sp, #32]
 80a3eae:	4433      	add	r3, r6
 80a3eb0:	449a      	add	sl, r3
 80a3eb2:	eb0a 63f5 	add.w	r3, sl, r5, ror #27
 80a3eb6:	ea41 0a00 	orr.w	sl, r1, r0
 80a3eba:	ea01 0400 	and.w	r4, r1, r0
 80a3ebe:	ea0a 0a02 	and.w	sl, sl, r2
 80a3ec2:	ea4a 0a04 	orr.w	sl, sl, r4
 80a3ec6:	449a      	add	sl, r3
    P( C, D, E, A, B, R(53) );
 80a3ec8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80a3eca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( D, E, A, B, C, R(47) );
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
 80a3ecc:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(53) );
 80a3ed0:	4063      	eors	r3, r4
 80a3ed2:	9c02      	ldr	r4, [sp, #8]
 80a3ed4:	4063      	eors	r3, r4
 80a3ed6:	407b      	eors	r3, r7
 80a3ed8:	ea45 0401 	orr.w	r4, r5, r1
 80a3edc:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80a3ee0:	930e      	str	r3, [sp, #56]	; 0x38
 80a3ee2:	4004      	ands	r4, r0
 80a3ee4:	ea05 0301 	and.w	r3, r5, r1
 80a3ee8:	431c      	orrs	r4, r3
 80a3eea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a3eec:	ea4f 05b5 	mov.w	r5, r5, ror #2
 80a3ef0:	4433      	add	r3, r6
 80a3ef2:	4413      	add	r3, r2
 80a3ef4:	4423      	add	r3, r4
    P( B, C, D, E, A, R(54) );
 80a3ef6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80a3ef8:	9c09      	ldr	r4, [sp, #36]	; 0x24
    P( C, D, E, A, B, R(48) );
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
 80a3efa:	eb03 63fa 	add.w	r3, r3, sl, ror #27
    P( B, C, D, E, A, R(54) );
 80a3efe:	ea82 0804 	eor.w	r8, r2, r4
 80a3f02:	9a03      	ldr	r2, [sp, #12]
 80a3f04:	ea88 0802 	eor.w	r8, r8, r2
 80a3f08:	ea88 080e 	eor.w	r8, r8, lr
 80a3f0c:	ea4f 72f8 	mov.w	r2, r8, ror #31
 80a3f10:	eb02 0806 	add.w	r8, r2, r6
 80a3f14:	4480      	add	r8, r0
 80a3f16:	eb08 60f3 	add.w	r0, r8, r3, ror #27
 80a3f1a:	ea4a 0805 	orr.w	r8, sl, r5
 80a3f1e:	920f      	str	r2, [sp, #60]	; 0x3c
 80a3f20:	ea08 0801 	and.w	r8, r8, r1
 80a3f24:	ea0a 0205 	and.w	r2, sl, r5
 80a3f28:	ea48 0802 	orr.w	r8, r8, r2
 80a3f2c:	4480      	add	r8, r0
    P( A, B, C, D, E, R(55) );
 80a3f2e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80a3f30:	980a      	ldr	r0, [sp, #40]	; 0x28
    P( B, C, D, E, A, R(49) );
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
 80a3f32:	ea4f 0aba 	mov.w	sl, sl, ror #2
    P( A, B, C, D, E, R(55) );
 80a3f36:	ea82 0c00 	eor.w	ip, r2, r0
 80a3f3a:	9a04      	ldr	r2, [sp, #16]
 80a3f3c:	ea8c 0c02 	eor.w	ip, ip, r2
 80a3f40:	9a08      	ldr	r2, [sp, #32]
 80a3f42:	ea8c 0c02 	eor.w	ip, ip, r2
 80a3f46:	ea4f 72fc 	mov.w	r2, ip, ror #31
 80a3f4a:	9210      	str	r2, [sp, #64]	; 0x40
 80a3f4c:	9810      	ldr	r0, [sp, #64]	; 0x40
 80a3f4e:	ea43 020a 	orr.w	r2, r3, sl
 80a3f52:	ea02 0c05 	and.w	ip, r2, r5
 80a3f56:	ea03 020a 	and.w	r2, r3, sl
 80a3f5a:	ea4c 0202 	orr.w	r2, ip, r2
 80a3f5e:	eb00 0c06 	add.w	ip, r0, r6
 80a3f62:	448c      	add	ip, r1
    P( E, A, B, C, D, R(56) );
 80a3f64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80a3f66:	4494      	add	ip, r2
 80a3f68:	9a06      	ldr	r2, [sp, #24]
 80a3f6a:	404c      	eors	r4, r1
 80a3f6c:	4054      	eors	r4, r2
 80a3f6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
 80a3f70:	eb0c 6cf8 	add.w	ip, ip, r8, ror #27
    P( E, A, B, C, D, R(56) );
 80a3f74:	4054      	eors	r4, r2
 80a3f76:	ea4f 72f4 	mov.w	r2, r4, ror #31
 80a3f7a:	9209      	str	r2, [sp, #36]	; 0x24
 80a3f7c:	4432      	add	r2, r6
    P( A, B, C, D, E, R(50) );
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
 80a3f7e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80a3f82:	4415      	add	r5, r2
 80a3f84:	eb05 62fc 	add.w	r2, r5, ip, ror #27
    P( E, A, B, C, D, R(56) );
 80a3f88:	ea48 0503 	orr.w	r5, r8, r3
 80a3f8c:	e002      	b.n	80a3f94 <mbedtls_internal_sha1_process+0xb24>
 80a3f8e:	bf00      	nop
 80a3f90:	8f1bbcdc 	.word	0x8f1bbcdc
 80a3f94:	ea08 0103 	and.w	r1, r8, r3
 80a3f98:	ea05 050a 	and.w	r5, r5, sl
 80a3f9c:	430d      	orrs	r5, r1
 80a3f9e:	4415      	add	r5, r2
    P( D, E, A, B, C, R(57) );
 80a3fa0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80a3fa2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    P( E, A, B, C, D, R(51) );
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
 80a3fa4:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( D, E, A, B, C, R(57) );
 80a3fa8:	ea82 0b01 	eor.w	fp, r2, r1
 80a3fac:	9a07      	ldr	r2, [sp, #28]
    P( C, D, E, A, B, R(58) );
 80a3fae:	990d      	ldr	r1, [sp, #52]	; 0x34
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
 80a3fb0:	ea8b 0b02 	eor.w	fp, fp, r2
 80a3fb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a3fb6:	ea8b 0b02 	eor.w	fp, fp, r2
 80a3fba:	ea4c 0208 	orr.w	r2, ip, r8
 80a3fbe:	ea4f 7bfb 	mov.w	fp, fp, ror #31
 80a3fc2:	ea02 0903 	and.w	r9, r2, r3
 80a3fc6:	ea0c 0208 	and.w	r2, ip, r8
 80a3fca:	ea49 0202 	orr.w	r2, r9, r2
 80a3fce:	eb0b 0906 	add.w	r9, fp, r6
 80a3fd2:	44d1      	add	r9, sl
 80a3fd4:	4491      	add	r9, r2
    P( C, D, E, A, B, R(58) );
 80a3fd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
 80a3fd8:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( C, D, E, A, B, R(58) );
 80a3fdc:	ea82 0a01 	eor.w	sl, r2, r1
 80a3fe0:	ea8a 0a07 	eor.w	sl, sl, r7
 80a3fe4:	ea8a 0a00 	eor.w	sl, sl, r0
 80a3fe8:	ea4f 72fa 	mov.w	r2, sl, ror #31
 80a3fec:	920a      	str	r2, [sp, #40]	; 0x28
 80a3fee:	4432      	add	r2, r6
    P( D, E, A, B, C, R(52) );
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
 80a3ff0:	eb09 69f5 	add.w	r9, r9, r5, ror #27
    P( C, D, E, A, B, R(58) );
 80a3ff4:	ea45 010c 	orr.w	r1, r5, ip
 80a3ff8:	441a      	add	r2, r3
 80a3ffa:	eb02 63f9 	add.w	r3, r2, r9, ror #27
 80a3ffe:	ea01 0108 	and.w	r1, r1, r8
 80a4002:	ea05 020c 	and.w	r2, r5, ip
 80a4006:	430a      	orrs	r2, r1
 80a4008:	441a      	add	r2, r3
    P( B, C, D, E, A, R(59) );
 80a400a:	9902      	ldr	r1, [sp, #8]
 80a400c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    P( C, D, E, A, B, R(53) );
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
 80a400e:	ea4f 05b5 	mov.w	r5, r5, ror #2
    P( B, C, D, E, A, R(59) );
 80a4012:	ea83 0001 	eor.w	r0, r3, r1
 80a4016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a4018:	ea80 000e 	eor.w	r0, r0, lr
 80a401c:	4058      	eors	r0, r3
 80a401e:	ea4f 73f0 	mov.w	r3, r0, ror #31
 80a4022:	930b      	str	r3, [sp, #44]	; 0x2c
 80a4024:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80a4026:	ea49 0005 	orr.w	r0, r9, r5
 80a402a:	ea00 000c 	and.w	r0, r0, ip
 80a402e:	ea09 0305 	and.w	r3, r9, r5
 80a4032:	440e      	add	r6, r1
 80a4034:	4446      	add	r6, r8
 80a4036:	4303      	orrs	r3, r0
 80a4038:	1998      	adds	r0, r3, r6
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 80a403a:	9903      	ldr	r1, [sp, #12]
 80a403c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a403e:	4ed8      	ldr	r6, [pc, #864]	; (80a43a0 <mbedtls_internal_sha1_process+0xf30>)
 80a4040:	4059      	eors	r1, r3
 80a4042:	9b08      	ldr	r3, [sp, #32]
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
    P( B, C, D, E, A, R(59) );
 80a4044:	ea4f 09b9 	mov.w	r9, r9, ror #2
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 80a4048:	4059      	eors	r1, r3
 80a404a:	ea81 010b 	eor.w	r1, r1, fp
 80a404e:	ea4f 73f1 	mov.w	r3, r1, ror #31
 80a4052:	930c      	str	r3, [sp, #48]	; 0x30
 80a4054:	990c      	ldr	r1, [sp, #48]	; 0x30
 80a4056:	ea85 0309 	eor.w	r3, r5, r9
 80a405a:	4431      	add	r1, r6
 80a405c:	4053      	eors	r3, r2
 80a405e:	4461      	add	r1, ip
 80a4060:	4419      	add	r1, r3
    P( E, A, B, C, D, R(61) );
 80a4062:	9b02      	ldr	r3, [sp, #8]
 80a4064:	9c04      	ldr	r4, [sp, #16]
    P( B, C, D, E, A, R(54) );
    P( A, B, C, D, E, R(55) );
    P( E, A, B, C, D, R(56) );
    P( D, E, A, B, C, R(57) );
    P( C, D, E, A, B, R(58) );
    P( B, C, D, E, A, R(59) );
 80a4066:	eb00 60f2 	add.w	r0, r0, r2, ror #27

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
 80a406a:	4063      	eors	r3, r4
 80a406c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 80a406e:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(61) );
 80a4072:	4063      	eors	r3, r4
 80a4074:	9c0a      	ldr	r4, [sp, #40]	; 0x28
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 80a4076:	eb01 61f0 	add.w	r1, r1, r0, ror #27
    P( E, A, B, C, D, R(61) );
 80a407a:	4063      	eors	r3, r4
 80a407c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80a4080:	9302      	str	r3, [sp, #8]
 80a4082:	ea89 0402 	eor.w	r4, r9, r2
 80a4086:	4433      	add	r3, r6
 80a4088:	4044      	eors	r4, r0
 80a408a:	442b      	add	r3, r5
 80a408c:	4423      	add	r3, r4
    P( D, E, A, B, C, R(62) );
 80a408e:	9d06      	ldr	r5, [sp, #24]
 80a4090:	9c03      	ldr	r4, [sp, #12]

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
 80a4092:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(62) );
 80a4096:	ea84 0805 	eor.w	r8, r4, r5
 80a409a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80a409c:	ea82 0500 	eor.w	r5, r2, r0
 80a40a0:	ea88 0804 	eor.w	r8, r8, r4
 80a40a4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80a40a6:	404d      	eors	r5, r1
 80a40a8:	ea88 0804 	eor.w	r8, r8, r4
 80a40ac:	ea4f 74f8 	mov.w	r4, r8, ror #31
 80a40b0:	9403      	str	r4, [sp, #12]
 80a40b2:	4434      	add	r4, r6
 80a40b4:	444c      	add	r4, r9
 80a40b6:	442c      	add	r4, r5
    P( C, D, E, A, B, R(63) );
 80a40b8:	9d04      	ldr	r5, [sp, #16]

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
 80a40ba:	eb03 63f1 	add.w	r3, r3, r1, ror #27
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
 80a40be:	46ac      	mov	ip, r5
 80a40c0:	9d07      	ldr	r5, [sp, #28]
#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
 80a40c2:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(63) );
 80a40c6:	ea8c 0c05 	eor.w	ip, ip, r5
 80a40ca:	9d10      	ldr	r5, [sp, #64]	; 0x40
#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
 80a40cc:	eb04 64f3 	add.w	r4, r4, r3, ror #27
    P( C, D, E, A, B, R(63) );
 80a40d0:	ea8c 0c05 	eor.w	ip, ip, r5
 80a40d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80a40d6:	ea8c 0c05 	eor.w	ip, ip, r5
 80a40da:	ea4f 75fc 	mov.w	r5, ip, ror #31
 80a40de:	9504      	str	r5, [sp, #16]
 80a40e0:	ea80 0501 	eor.w	r5, r0, r1
 80a40e4:	ea85 0c03 	eor.w	ip, r5, r3
 80a40e8:	9d04      	ldr	r5, [sp, #16]
 80a40ea:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80a40ee:	eb05 0a06 	add.w	sl, r5, r6
 80a40f2:	4492      	add	sl, r2
    P( B, C, D, E, A, R(64) );
 80a40f4:	9a06      	ldr	r2, [sp, #24]
 80a40f6:	44e2      	add	sl, ip
 80a40f8:	ea82 0807 	eor.w	r8, r2, r7
 80a40fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
 80a40fe:	eb0a 6af4 	add.w	sl, sl, r4, ror #27
    P( B, C, D, E, A, R(64) );
 80a4102:	ea88 0802 	eor.w	r8, r8, r2
 80a4106:	9a02      	ldr	r2, [sp, #8]
 80a4108:	ea88 0802 	eor.w	r8, r8, r2
 80a410c:	ea4f 72f8 	mov.w	r2, r8, ror #31
 80a4110:	9206      	str	r2, [sp, #24]
 80a4112:	9d06      	ldr	r5, [sp, #24]
 80a4114:	ea81 0203 	eor.w	r2, r1, r3
 80a4118:	eb05 0806 	add.w	r8, r5, r6
 80a411c:	4062      	eors	r2, r4
 80a411e:	4480      	add	r8, r0
 80a4120:	4490      	add	r8, r2
    P( A, B, C, D, E, R(65) );
 80a4122:	9a07      	ldr	r2, [sp, #28]

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
 80a4124:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( A, B, C, D, E, R(65) );
 80a4128:	ea82 0c0e 	eor.w	ip, r2, lr
 80a412c:	9a03      	ldr	r2, [sp, #12]
 80a412e:	ea8c 0c0b 	eor.w	ip, ip, fp
 80a4132:	ea8c 0c02 	eor.w	ip, ip, r2
 80a4136:	ea4f 72fc 	mov.w	r2, ip, ror #31
 80a413a:	9207      	str	r2, [sp, #28]
 80a413c:	9807      	ldr	r0, [sp, #28]
 80a413e:	ea83 0204 	eor.w	r2, r3, r4
 80a4142:	eb00 0c06 	add.w	ip, r0, r6
 80a4146:	ea82 020a 	eor.w	r2, r2, sl
 80a414a:	448c      	add	ip, r1
 80a414c:	4494      	add	ip, r2
    P( E, A, B, C, D, R(66) );
 80a414e:	9a08      	ldr	r2, [sp, #32]

    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
 80a4150:	eb08 68fa 	add.w	r8, r8, sl, ror #27
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
 80a4154:	ea87 0502 	eor.w	r5, r7, r2
 80a4158:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
 80a415a:	ea4f 0aba 	mov.w	sl, sl, ror #2
    P( E, A, B, C, D, R(66) );
 80a415e:	4055      	eors	r5, r2
 80a4160:	9a04      	ldr	r2, [sp, #16]
    P( A, B, C, D, E, R(60) );
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
 80a4162:	eb0c 6cf8 	add.w	ip, ip, r8, ror #27
    P( E, A, B, C, D, R(66) );
 80a4166:	4055      	eors	r5, r2
 80a4168:	ea4f 75f5 	mov.w	r5, r5, ror #31
 80a416c:	19af      	adds	r7, r5, r6
 80a416e:	441f      	add	r7, r3
    P( D, E, A, B, C, R(67) );
 80a4170:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a4172:	ea84 020a 	eor.w	r2, r4, sl
 80a4176:	ea8e 0903 	eor.w	r9, lr, r3
 80a417a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a417c:	ea82 0208 	eor.w	r2, r2, r8
 80a4180:	ea89 0903 	eor.w	r9, r9, r3
 80a4184:	9b06      	ldr	r3, [sp, #24]
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
 80a4186:	ea4f 08b8 	mov.w	r8, r8, ror #2
    P( D, E, A, B, C, R(67) );
 80a418a:	ea89 0903 	eor.w	r9, r9, r3
 80a418e:	ea4f 79f9 	mov.w	r9, r9, ror #31
 80a4192:	ea8a 0308 	eor.w	r3, sl, r8
 80a4196:	eb09 0e06 	add.w	lr, r9, r6
 80a419a:	ea83 030c 	eor.w	r3, r3, ip
 80a419e:	44a6      	add	lr, r4
 80a41a0:	4417      	add	r7, r2
 80a41a2:	449e      	add	lr, r3
    P( C, D, E, A, B, R(68) );
 80a41a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a41a6:	9b08      	ldr	r3, [sp, #32]
    P( E, A, B, C, D, R(61) );
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
 80a41a8:	eb07 67fc 	add.w	r7, r7, ip, ror #27
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
 80a41ac:	4053      	eors	r3, r2
 80a41ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
 80a41b0:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( C, D, E, A, B, R(68) );
 80a41b4:	4053      	eors	r3, r2
 80a41b6:	4043      	eors	r3, r0
 80a41b8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80a41bc:	9308      	str	r3, [sp, #32]
 80a41be:	9a08      	ldr	r2, [sp, #32]
 80a41c0:	ea88 030c 	eor.w	r3, r8, ip
 80a41c4:	4432      	add	r2, r6
 80a41c6:	407b      	eors	r3, r7
 80a41c8:	4452      	add	r2, sl
    P( B, C, D, E, A, R(69) );
 80a41ca:	9910      	ldr	r1, [sp, #64]	; 0x40
 80a41cc:	441a      	add	r2, r3
 80a41ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    P( D, E, A, B, C, R(62) );
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
 80a41d0:	eb0e 6ef7 	add.w	lr, lr, r7, ror #27
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
 80a41d4:	404b      	eors	r3, r1
 80a41d6:	9902      	ldr	r1, [sp, #8]
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
 80a41d8:	ea4f 07b7 	mov.w	r7, r7, ror #2
    P( B, C, D, E, A, R(69) );
 80a41dc:	404b      	eors	r3, r1
 80a41de:	406b      	eors	r3, r5
 80a41e0:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80a41e4:	930d      	str	r3, [sp, #52]	; 0x34
 80a41e6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a41e8:	ea8c 0307 	eor.w	r3, ip, r7
 80a41ec:	1988      	adds	r0, r1, r6
 80a41ee:	ea83 030e 	eor.w	r3, r3, lr
 80a41f2:	4440      	add	r0, r8
    P( A, B, C, D, E, R(70) );
 80a41f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a41f6:	4418      	add	r0, r3
 80a41f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    P( C, D, E, A, B, R(63) );
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
 80a41fa:	eb02 62fe 	add.w	r2, r2, lr, ror #27
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
 80a41fe:	ea83 0801 	eor.w	r8, r3, r1
 80a4202:	9b03      	ldr	r3, [sp, #12]
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
 80a4204:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( A, B, C, D, E, R(70) );
 80a4208:	ea88 0803 	eor.w	r8, r8, r3
 80a420c:	ea88 0809 	eor.w	r8, r8, r9
 80a4210:	ea4f 78f8 	mov.w	r8, r8, ror #31
 80a4214:	ea87 030e 	eor.w	r3, r7, lr
 80a4218:	eb08 0106 	add.w	r1, r8, r6
 80a421c:	4053      	eors	r3, r2
 80a421e:	4461      	add	r1, ip
 80a4220:	4419      	add	r1, r3
    P( E, A, B, C, D, R(71) );
 80a4222:	9b10      	ldr	r3, [sp, #64]	; 0x40
    P( B, C, D, E, A, R(64) );
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
 80a4224:	eb00 60f2 	add.w	r0, r0, r2, ror #27
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
 80a4228:	ea83 0c0b 	eor.w	ip, r3, fp
 80a422c:	9b04      	ldr	r3, [sp, #16]
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
 80a422e:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(71) );
 80a4232:	ea8c 0c03 	eor.w	ip, ip, r3
 80a4236:	9b08      	ldr	r3, [sp, #32]
 80a4238:	ea8e 0402 	eor.w	r4, lr, r2
 80a423c:	ea8c 0c03 	eor.w	ip, ip, r3
 80a4240:	ea4f 7cfc 	mov.w	ip, ip, ror #31
 80a4244:	eb0c 0306 	add.w	r3, ip, r6
 80a4248:	4044      	eors	r4, r0
 80a424a:	443b      	add	r3, r7
 80a424c:	4423      	add	r3, r4
    P( D, E, A, B, C, R(72) );
 80a424e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80a4250:	9c09      	ldr	r4, [sp, #36]	; 0x24
    P( A, B, C, D, E, R(65) );
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
 80a4252:	eb01 61f0 	add.w	r1, r1, r0, ror #27
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
 80a4256:	4067      	eors	r7, r4
 80a4258:	9c06      	ldr	r4, [sp, #24]
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
 80a425a:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(72) );
 80a425e:	4067      	eors	r7, r4
 80a4260:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80a4262:	ea82 0a00 	eor.w	sl, r2, r0
 80a4266:	4067      	eors	r7, r4
 80a4268:	ea4f 74f7 	mov.w	r4, r7, ror #31
    P( C, D, E, A, B, R(73) );
 80a426c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
 80a426e:	9409      	str	r4, [sp, #36]	; 0x24
 80a4270:	4434      	add	r4, r6
 80a4272:	4474      	add	r4, lr
    P( C, D, E, A, B, R(73) );
 80a4274:	ea8b 0e07 	eor.w	lr, fp, r7
 80a4278:	9f07      	ldr	r7, [sp, #28]
    P( E, A, B, C, D, R(66) );
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
 80a427a:	eb03 63f1 	add.w	r3, r3, r1, ror #27
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
 80a427e:	ea8e 0e07 	eor.w	lr, lr, r7
 80a4282:	ea8e 0e08 	eor.w	lr, lr, r8
 80a4286:	ea8a 0a01 	eor.w	sl, sl, r1
 80a428a:	ea4f 7efe 	mov.w	lr, lr, ror #31
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
 80a428e:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 80a4292:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80a4294:	eb0e 0b06 	add.w	fp, lr, r6
 80a4298:	4454      	add	r4, sl
 80a429a:	ea80 0a01 	eor.w	sl, r0, r1
 80a429e:	ea8a 0a03 	eor.w	sl, sl, r3
 80a42a2:	445a      	add	r2, fp
 80a42a4:	4452      	add	r2, sl
 80a42a6:	46ba      	mov	sl, r7
 80a42a8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    P( D, E, A, B, C, R(67) );
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
 80a42aa:	eb04 64f3 	add.w	r4, r4, r3, ror #27
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 80a42ae:	ea8a 0a07 	eor.w	sl, sl, r7
 80a42b2:	ea8a 0505 	eor.w	r5, sl, r5
 80a42b6:	ea85 050c 	eor.w	r5, r5, ip
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
 80a42ba:	ea4f 03b3 	mov.w	r3, r3, ror #2
    P( B, C, D, E, A, R(74) );
 80a42be:	ea4f 75f5 	mov.w	r5, r5, ror #31
 80a42c2:	eb05 0b06 	add.w	fp, r5, r6
 80a42c6:	ea81 0a03 	eor.w	sl, r1, r3
 80a42ca:	4458      	add	r0, fp
 80a42cc:	ea8a 0a04 	eor.w	sl, sl, r4
    P( A, B, C, D, E, R(75) );
 80a42d0:	9f02      	ldr	r7, [sp, #8]
 80a42d2:	4482      	add	sl, r0
 80a42d4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    P( C, D, E, A, B, R(68) );
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
 80a42d6:	eb02 62f4 	add.w	r2, r2, r4, ror #27
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
 80a42da:	4078      	eors	r0, r7
 80a42dc:	ea80 0909 	eor.w	r9, r0, r9
 80a42e0:	9809      	ldr	r0, [sp, #36]	; 0x24
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 80a42e2:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( A, B, C, D, E, R(75) );
 80a42e6:	ea89 0700 	eor.w	r7, r9, r0
 80a42ea:	ea4f 77f7 	mov.w	r7, r7, ror #31
 80a42ee:	eb07 0906 	add.w	r9, r7, r6
 80a42f2:	ea83 0004 	eor.w	r0, r3, r4
 80a42f6:	4449      	add	r1, r9
 80a42f8:	4050      	eors	r0, r2
 80a42fa:	4408      	add	r0, r1
    P( E, A, B, C, D, R(76) );
 80a42fc:	990c      	ldr	r1, [sp, #48]	; 0x30
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 80a42fe:	950a      	str	r5, [sp, #40]	; 0x28
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
 80a4300:	460d      	mov	r5, r1
 80a4302:	9903      	ldr	r1, [sp, #12]
    P( B, C, D, E, A, R(69) );
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
 80a4304:	eb0a 6af2 	add.w	sl, sl, r2, ror #27
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
 80a4308:	4069      	eors	r1, r5
 80a430a:	9d08      	ldr	r5, [sp, #32]
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
 80a430c:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( E, A, B, C, D, R(76) );
 80a4310:	4069      	eors	r1, r5
 80a4312:	ea81 0e0e 	eor.w	lr, r1, lr
 80a4316:	ea4f 7efe 	mov.w	lr, lr, ror #31
 80a431a:	eb0e 0906 	add.w	r9, lr, r6
 80a431e:	ea84 0102 	eor.w	r1, r4, r2
 80a4322:	444b      	add	r3, r9
 80a4324:	ea81 010a 	eor.w	r1, r1, sl
 80a4328:	9d04      	ldr	r5, [sp, #16]
 80a432a:	4419      	add	r1, r3
 80a432c:	9b02      	ldr	r3, [sp, #8]
    P( A, B, C, D, E, R(70) );
    P( E, A, B, C, D, R(71) );
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
 80a432e:	eb00 60fa 	add.w	r0, r0, sl, ror #27
 80a4332:	406b      	eors	r3, r5
 80a4334:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    P( E, A, B, C, D, R(76) );
 80a4336:	ea4f 0aba 	mov.w	sl, sl, ror #2
 80a433a:	406b      	eors	r3, r5
 80a433c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a433e:	ea82 090a 	eor.w	r9, r2, sl
 80a4342:	406b      	eors	r3, r5
 80a4344:	eb06 73f3 	add.w	r3, r6, r3, ror #31
 80a4348:	9d06      	ldr	r5, [sp, #24]
 80a434a:	441c      	add	r4, r3
 80a434c:	9b03      	ldr	r3, [sp, #12]
 80a434e:	eb01 61f0 	add.w	r1, r1, r0, ror #27
 80a4352:	406b      	eors	r3, r5
 80a4354:	ea83 0808 	eor.w	r8, r3, r8
 80a4358:	ea89 0900 	eor.w	r9, r9, r0
 80a435c:	ea88 0807 	eor.w	r8, r8, r7
    P( D, E, A, B, C, R(77) );
 80a4360:	ea4f 00b0 	mov.w	r0, r0, ror #2
 80a4364:	eb06 78f8 	add.w	r8, r6, r8, ror #31
 80a4368:	ea8a 0500 	eor.w	r5, sl, r0
 80a436c:	404d      	eors	r5, r1
 80a436e:	4442      	add	r2, r8
 80a4370:	442a      	add	r2, r5
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
 80a4372:	9b04      	ldr	r3, [sp, #16]
 80a4374:	9d07      	ldr	r5, [sp, #28]
 80a4376:	444c      	add	r4, r9
 80a4378:	406b      	eors	r3, r5
 80a437a:	ea83 0c0c 	eor.w	ip, r3, ip
 80a437e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    P( D, E, A, B, C, R(72) );
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
 80a4380:	eb04 64f1 	add.w	r4, r4, r1, ror #27
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
 80a4384:	441e      	add	r6, r3
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
    P( C, D, E, A, B, R(78) );
 80a4386:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
 80a438a:	ea8c 0e0e 	eor.w	lr, ip, lr
 80a438e:	ea80 0501 	eor.w	r5, r0, r1
 80a4392:	eb06 7efe 	add.w	lr, r6, lr, ror #31
 80a4396:	4065      	eors	r5, r4
 80a4398:	44f2      	add	sl, lr
    P( C, D, E, A, B, R(73) );
    P( B, C, D, E, A, R(74) );
    P( A, B, C, D, E, R(75) );
    P( E, A, B, C, D, R(76) );
    P( D, E, A, B, C, R(77) );
    P( C, D, E, A, B, R(78) );
 80a439a:	eb02 62f4 	add.w	r2, r2, r4, ror #27
 80a439e:	e001      	b.n	80a43a4 <mbedtls_internal_sha1_process+0xf34>
 80a43a0:	ca62c1d6 	.word	0xca62c1d6
    P( B, C, D, E, A, R(79) );

#undef K
#undef F

    ctx->state[0] += A;
 80a43a4:	eb0a 0305 	add.w	r3, sl, r5
 80a43a8:	9d01      	ldr	r5, [sp, #4]
 80a43aa:	eb03 63f2 	add.w	r3, r3, r2, ror #27
 80a43ae:	60ab      	str	r3, [r5, #8]
    ctx->state[1] += B;
 80a43b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a43b2:	441a      	add	r2, r3
    ctx->state[2] += C;
 80a43b4:	9b05      	ldr	r3, [sp, #20]

#undef K
#undef F

    ctx->state[0] += A;
    ctx->state[1] += B;
 80a43b6:	60ea      	str	r2, [r5, #12]
    ctx->state[2] += C;
 80a43b8:	eb03 04b4 	add.w	r4, r3, r4, ror #2
    ctx->state[3] += D;
 80a43bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
#undef K
#undef F

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
 80a43be:	612c      	str	r4, [r5, #16]
    ctx->state[3] += D;
 80a43c0:	4419      	add	r1, r3
    ctx->state[4] += E;
 80a43c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
#undef F

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
 80a43c4:	6169      	str	r1, [r5, #20]
    ctx->state[4] += E;
 80a43c6:	4418      	add	r0, r3
 80a43c8:	61a8      	str	r0, [r5, #24]

    return( 0 );
}
 80a43ca:	2000      	movs	r0, #0
 80a43cc:	b017      	add	sp, #92	; 0x5c
 80a43ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a43d2:	bf00      	nop

080a43d4 <mbedtls_sha1_update_ret>:
 * SHA-1 process buffer
 */
int mbedtls_sha1_update_ret( mbedtls_sha1_context *ctx,
                             const unsigned char *input,
                             size_t ilen )
{
 80a43d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a43d8:	4604      	mov	r4, r0
 80a43da:	460e      	mov	r6, r1
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
 80a43dc:	4615      	mov	r5, r2
 80a43de:	b382      	cbz	r2, 80a4442 <mbedtls_sha1_update_ret+0x6e>
        return( 0 );

    left = ctx->total[0] & 0x3F;
 80a43e0:	6803      	ldr	r3, [r0, #0]
 80a43e2:	f003 003f 	and.w	r0, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 80a43e6:	4413      	add	r3, r2
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
 80a43e8:	429a      	cmp	r2, r3
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 80a43ea:	6023      	str	r3, [r4, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
 80a43ec:	bf82      	ittt	hi
 80a43ee:	6863      	ldrhi	r3, [r4, #4]
 80a43f0:	3301      	addhi	r3, #1
 80a43f2:	6063      	strhi	r3, [r4, #4]

    if( left && ilen >= fill )
 80a43f4:	b180      	cbz	r0, 80a4418 <mbedtls_sha1_update_ret+0x44>

    if( ilen == 0 )
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fill = 64 - left;
 80a43f6:	f1c0 0740 	rsb	r7, r0, #64	; 0x40
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
 80a43fa:	42ba      	cmp	r2, r7
 80a43fc:	d31b      	bcc.n	80a4436 <mbedtls_sha1_update_ret+0x62>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 80a43fe:	f104 081c 	add.w	r8, r4, #28
 80a4402:	463a      	mov	r2, r7
 80a4404:	4440      	add	r0, r8
 80a4406:	f00a fe74 	bl	80af0f2 <memcpy>

        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
 80a440a:	4641      	mov	r1, r8
 80a440c:	4620      	mov	r0, r4
 80a440e:	f7ff f82f 	bl	80a3470 <mbedtls_internal_sha1_process>
 80a4412:	b9b8      	cbnz	r0, 80a4444 <mbedtls_sha1_update_ret+0x70>
            return( ret );

        input += fill;
 80a4414:	443e      	add	r6, r7
        ilen  -= fill;
 80a4416:	1bed      	subs	r5, r5, r7
 * SHA-1 process buffer
 */
int mbedtls_sha1_update_ret( mbedtls_sha1_context *ctx,
                             const unsigned char *input,
                             size_t ilen )
{
 80a4418:	462f      	mov	r7, r5
 80a441a:	1be9      	subs	r1, r5, r7
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
 80a441c:	2f3f      	cmp	r7, #63	; 0x3f
 80a441e:	4431      	add	r1, r6
 80a4420:	d905      	bls.n	80a442e <mbedtls_sha1_update_ret+0x5a>
    {
        if( ( ret = mbedtls_internal_sha1_process( ctx, input ) ) != 0 )
 80a4422:	4620      	mov	r0, r4
 80a4424:	f7ff f824 	bl	80a3470 <mbedtls_internal_sha1_process>
 80a4428:	b960      	cbnz	r0, 80a4444 <mbedtls_sha1_update_ret+0x70>
            return( ret );

        input += 64;
        ilen  -= 64;
 80a442a:	3f40      	subs	r7, #64	; 0x40
 80a442c:	e7f5      	b.n	80a441a <mbedtls_sha1_update_ret+0x46>
    }

    if( ilen > 0 )
 80a442e:	b147      	cbz	r7, 80a4442 <mbedtls_sha1_update_ret+0x6e>
 80a4430:	463d      	mov	r5, r7
 80a4432:	460e      	mov	r6, r1
 80a4434:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 80a4436:	341c      	adds	r4, #28
 80a4438:	462a      	mov	r2, r5
 80a443a:	4631      	mov	r1, r6
 80a443c:	4420      	add	r0, r4
 80a443e:	f00a fe58 	bl	80af0f2 <memcpy>

    return( 0 );
 80a4442:	2000      	movs	r0, #0
}
 80a4444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a4448 <mbedtls_sha1_finish_ret>:
/*
 * SHA-1 final digest
 */
int mbedtls_sha1_finish_ret( mbedtls_sha1_context *ctx,
                             unsigned char output[20] )
{
 80a4448:	b570      	push	{r4, r5, r6, lr}
 80a444a:	4604      	mov	r4, r0
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 80a444c:	6803      	ldr	r3, [r0, #0]

    ctx->buffer[used++] = 0x80;
 80a444e:	2280      	movs	r2, #128	; 0x80
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 80a4450:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
 80a4454:	1c58      	adds	r0, r3, #1

    if( used <= 56 )
 80a4456:	2838      	cmp	r0, #56	; 0x38
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 80a4458:	4423      	add	r3, r4
/*
 * SHA-1 final digest
 */
int mbedtls_sha1_finish_ret( mbedtls_sha1_context *ctx,
                             unsigned char output[20] )
{
 80a445a:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
 80a445c:	771a      	strb	r2, [r3, #28]
 80a445e:	f104 061c 	add.w	r6, r4, #28

    if( used <= 56 )
 80a4462:	d804      	bhi.n	80a446e <mbedtls_sha1_finish_ret+0x26>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 80a4464:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 80a4468:	2100      	movs	r1, #0
 80a446a:	4430      	add	r0, r6
 80a446c:	e00e      	b.n	80a448c <mbedtls_sha1_finish_ret+0x44>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 80a446e:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 80a4472:	2100      	movs	r1, #0
 80a4474:	4430      	add	r0, r6
 80a4476:	f00a fe62 	bl	80af13e <memset>

        if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
 80a447a:	4631      	mov	r1, r6
 80a447c:	4620      	mov	r0, r4
 80a447e:	f7fe fff7 	bl	80a3470 <mbedtls_internal_sha1_process>
 80a4482:	2800      	cmp	r0, #0
 80a4484:	d153      	bne.n	80a452e <mbedtls_sha1_finish_ret+0xe6>
            return( ret );

        memset( ctx->buffer, 0, 56 );
 80a4486:	4601      	mov	r1, r0
 80a4488:	4630      	mov	r0, r6
 80a448a:	2238      	movs	r2, #56	; 0x38
 80a448c:	f00a fe57 	bl	80af13e <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 80a4490:	6823      	ldr	r3, [r4, #0]
         | ( ctx->total[1] <<  3 );
 80a4492:	6861      	ldr	r1, [r4, #4]
 80a4494:	0f5a      	lsrs	r2, r3, #29
 80a4496:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 80a449a:	0e11      	lsrs	r1, r2, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 80a449c:	00db      	lsls	r3, r3, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 80a449e:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
 80a44a2:	0c11      	lsrs	r1, r2, #16
 80a44a4:	f884 1055 	strb.w	r1, [r4, #85]	; 0x55
 80a44a8:	f884 2057 	strb.w	r2, [r4, #87]	; 0x57
 80a44ac:	0a11      	lsrs	r1, r2, #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 80a44ae:	0e1a      	lsrs	r2, r3, #24
 80a44b0:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 80a44b4:	0c1a      	lsrs	r2, r3, #16
 80a44b6:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 80a44ba:	0a1a      	lsrs	r2, r3, #8
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 80a44bc:	f884 1056 	strb.w	r1, [r4, #86]	; 0x56
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 80a44c0:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a
 80a44c4:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b

    if( ( ret = mbedtls_internal_sha1_process( ctx, ctx->buffer ) ) != 0 )
 80a44c8:	4631      	mov	r1, r6
 80a44ca:	4620      	mov	r0, r4
 80a44cc:	f7fe ffd0 	bl	80a3470 <mbedtls_internal_sha1_process>
 80a44d0:	2800      	cmp	r0, #0
 80a44d2:	d12c      	bne.n	80a452e <mbedtls_sha1_finish_ret+0xe6>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 80a44d4:	7ae3      	ldrb	r3, [r4, #11]
 80a44d6:	702b      	strb	r3, [r5, #0]
 80a44d8:	8963      	ldrh	r3, [r4, #10]
 80a44da:	706b      	strb	r3, [r5, #1]
 80a44dc:	68a3      	ldr	r3, [r4, #8]
 80a44de:	0a1b      	lsrs	r3, r3, #8
 80a44e0:	70ab      	strb	r3, [r5, #2]
 80a44e2:	68a3      	ldr	r3, [r4, #8]
 80a44e4:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 80a44e6:	7be3      	ldrb	r3, [r4, #15]
 80a44e8:	712b      	strb	r3, [r5, #4]
 80a44ea:	89e3      	ldrh	r3, [r4, #14]
 80a44ec:	716b      	strb	r3, [r5, #5]
 80a44ee:	68e3      	ldr	r3, [r4, #12]
 80a44f0:	0a1b      	lsrs	r3, r3, #8
 80a44f2:	71ab      	strb	r3, [r5, #6]
 80a44f4:	68e3      	ldr	r3, [r4, #12]
 80a44f6:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 80a44f8:	7ce3      	ldrb	r3, [r4, #19]
 80a44fa:	722b      	strb	r3, [r5, #8]
 80a44fc:	8a63      	ldrh	r3, [r4, #18]
 80a44fe:	726b      	strb	r3, [r5, #9]
 80a4500:	6923      	ldr	r3, [r4, #16]
 80a4502:	0a1b      	lsrs	r3, r3, #8
 80a4504:	72ab      	strb	r3, [r5, #10]
 80a4506:	6923      	ldr	r3, [r4, #16]
 80a4508:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 80a450a:	7de3      	ldrb	r3, [r4, #23]
 80a450c:	732b      	strb	r3, [r5, #12]
 80a450e:	8ae3      	ldrh	r3, [r4, #22]
 80a4510:	736b      	strb	r3, [r5, #13]
 80a4512:	6963      	ldr	r3, [r4, #20]
 80a4514:	0a1b      	lsrs	r3, r3, #8
 80a4516:	73ab      	strb	r3, [r5, #14]
 80a4518:	6963      	ldr	r3, [r4, #20]
 80a451a:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 80a451c:	7ee3      	ldrb	r3, [r4, #27]
 80a451e:	742b      	strb	r3, [r5, #16]
 80a4520:	8b63      	ldrh	r3, [r4, #26]
 80a4522:	746b      	strb	r3, [r5, #17]
 80a4524:	69a3      	ldr	r3, [r4, #24]
 80a4526:	0a1b      	lsrs	r3, r3, #8
 80a4528:	74ab      	strb	r3, [r5, #18]
 80a452a:	69a3      	ldr	r3, [r4, #24]
 80a452c:	74eb      	strb	r3, [r5, #19]

    return( 0 );
}
 80a452e:	bd70      	pop	{r4, r5, r6, pc}

080a4530 <mbedtls_sha1_ret>:
 * output = SHA-1( input buffer )
 */
int mbedtls_sha1_ret( const unsigned char *input,
                      size_t ilen,
                      unsigned char output[20] )
{
 80a4530:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a4532:	b099      	sub	sp, #100	; 0x64
 80a4534:	4606      	mov	r6, r0
    int ret;
    mbedtls_sha1_context ctx;

    mbedtls_sha1_init( &ctx );
 80a4536:	a801      	add	r0, sp, #4
 * output = SHA-1( input buffer )
 */
int mbedtls_sha1_ret( const unsigned char *input,
                      size_t ilen,
                      unsigned char output[20] )
{
 80a4538:	460f      	mov	r7, r1
 80a453a:	4615      	mov	r5, r2
    int ret;
    mbedtls_sha1_context ctx;

    mbedtls_sha1_init( &ctx );
 80a453c:	f7fe ff6a 	bl	80a3414 <mbedtls_sha1_init>

    if( ( ret = mbedtls_sha1_starts_ret( &ctx ) ) != 0 )
 80a4540:	a801      	add	r0, sp, #4
 80a4542:	f7fe ff7b 	bl	80a343c <mbedtls_sha1_starts_ret>
 80a4546:	4604      	mov	r4, r0
 80a4548:	b958      	cbnz	r0, 80a4562 <mbedtls_sha1_ret+0x32>
        goto exit;

    if( ( ret = mbedtls_sha1_update_ret( &ctx, input, ilen ) ) != 0 )
 80a454a:	463a      	mov	r2, r7
 80a454c:	4631      	mov	r1, r6
 80a454e:	a801      	add	r0, sp, #4
 80a4550:	f7ff ff40 	bl	80a43d4 <mbedtls_sha1_update_ret>
 80a4554:	4604      	mov	r4, r0
 80a4556:	b920      	cbnz	r0, 80a4562 <mbedtls_sha1_ret+0x32>
        goto exit;

    if( ( ret = mbedtls_sha1_finish_ret( &ctx, output ) ) != 0 )
 80a4558:	4629      	mov	r1, r5
 80a455a:	a801      	add	r0, sp, #4
 80a455c:	f7ff ff74 	bl	80a4448 <mbedtls_sha1_finish_ret>
 80a4560:	4604      	mov	r4, r0
        goto exit;

exit:
    mbedtls_sha1_free( &ctx );
 80a4562:	a801      	add	r0, sp, #4
 80a4564:	f7fe ff5a 	bl	80a341c <mbedtls_sha1_free>

    return( ret );
}
 80a4568:	4620      	mov	r0, r4
 80a456a:	b019      	add	sp, #100	; 0x64
 80a456c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a456e <mbedtls_timing_get_timer.part.0>:
    CloseHandle( CreateThread( NULL, 0, TimerProc, NULL, 0, &ThreadId ) );
}

#else /* _WIN32 && !EFIX64 && !EFI32 */

unsigned long mbedtls_timing_get_timer( struct mbedtls_timing_hr_time *val, int reset )
 80a456e:	b513      	push	{r0, r1, r4, lr}
 80a4570:	4604      	mov	r4, r0
    }
    else
    {
        unsigned long delta;
        struct timeval now;
        gettimeofday( &now, NULL );
 80a4572:	2100      	movs	r1, #0
 80a4574:	4668      	mov	r0, sp
 80a4576:	f00a fe1b 	bl	80af1b0 <gettimeofday>
        delta = ( now.tv_sec  - t->start.tv_sec  ) * 1000ul
              + ( now.tv_usec - t->start.tv_usec ) / 1000;
 80a457a:	9b00      	ldr	r3, [sp, #0]
 80a457c:	6822      	ldr	r2, [r4, #0]
 80a457e:	6861      	ldr	r1, [r4, #4]
 80a4580:	1a9a      	subs	r2, r3, r2
 80a4582:	9b01      	ldr	r3, [sp, #4]
 80a4584:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a4588:	1a5b      	subs	r3, r3, r1
 80a458a:	fb93 f3f0 	sdiv	r3, r3, r0
        return( delta );
    }
}
 80a458e:	fb00 3002 	mla	r0, r0, r2, r3
 80a4592:	b002      	add	sp, #8
 80a4594:	bd10      	pop	{r4, pc}

080a4596 <_gettimeofday>:
#define HAVE_HARDCLOCK

#include "rtc_hal.h"
#include "timer_hal.h"
extern "C" int _gettimeofday( struct timeval *tv, void *tzvp )
{
 80a4596:	b538      	push	{r3, r4, r5, lr}
 80a4598:	4604      	mov	r4, r0
    uint32_t t = HAL_Timer_Milliseconds();  // get uptime
 80a459a:	f009 fb9f 	bl	80adcdc <HAL_Timer_Get_Milli_Seconds>
 80a459e:	4605      	mov	r5, r0
    tv->tv_sec = HAL_RTC_Get_UnixTime();    // get rtc time before Particle.syncTime()
 80a45a0:	f009 fba4 	bl	80adcec <HAL_RTC_Get_UnixTime>
    tv->tv_usec = ( t % 1000 )*1000;        // get remaining microseconds
 80a45a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
#include "rtc_hal.h"
#include "timer_hal.h"
extern "C" int _gettimeofday( struct timeval *tv, void *tzvp )
{
    uint32_t t = HAL_Timer_Milliseconds();  // get uptime
    tv->tv_sec = HAL_RTC_Get_UnixTime();    // get rtc time before Particle.syncTime()
 80a45a8:	6020      	str	r0, [r4, #0]
    tv->tv_usec = ( t % 1000 )*1000;        // get remaining microseconds
 80a45aa:	fbb5 f0f3 	udiv	r0, r5, r3
 80a45ae:	fb03 5010 	mls	r0, r3, r0, r5
 80a45b2:	4343      	muls	r3, r0
 80a45b4:	6063      	str	r3, [r4, #4]
    return 0;
} // end _gettimeofday()
 80a45b6:	2000      	movs	r0, #0
 80a45b8:	bd38      	pop	{r3, r4, r5, pc}

080a45ba <mbedtls_timing_set_delay>:
 */
void mbedtls_timing_set_delay( void *data, uint32_t int_ms, uint32_t fin_ms )
{
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;

    ctx->int_ms = int_ms;
 80a45ba:	6201      	str	r1, [r0, #32]
    ctx->fin_ms = fin_ms;
 80a45bc:	6242      	str	r2, [r0, #36]	; 0x24

    if( fin_ms != 0 )
 80a45be:	b112      	cbz	r2, 80a45c6 <mbedtls_timing_set_delay+0xc>
{
    struct _hr_time *t = (struct _hr_time *) val;

    if( reset )
    {
        gettimeofday( &t->start, NULL );
 80a45c0:	2100      	movs	r1, #0
 80a45c2:	f00a bdf5 	b.w	80af1b0 <gettimeofday>
 80a45c6:	4770      	bx	lr

080a45c8 <mbedtls_timing_get_delay>:

/*
 * Get number of delays expired
 */
int mbedtls_timing_get_delay( void *data )
{
 80a45c8:	b510      	push	{r4, lr}
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;
    unsigned long elapsed_ms;

    if( ctx->fin_ms == 0 )
 80a45ca:	6a43      	ldr	r3, [r0, #36]	; 0x24

/*
 * Get number of delays expired
 */
int mbedtls_timing_get_delay( void *data )
{
 80a45cc:	4604      	mov	r4, r0
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;
    unsigned long elapsed_ms;

    if( ctx->fin_ms == 0 )
 80a45ce:	b153      	cbz	r3, 80a45e6 <mbedtls_timing_get_delay+0x1e>
 80a45d0:	f7ff ffcd 	bl	80a456e <mbedtls_timing_get_timer.part.0>
        return( -1 );

    elapsed_ms = mbedtls_timing_get_timer( &ctx->timer, 0 );

    if( elapsed_ms >= ctx->fin_ms )
 80a45d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a45d6:	4283      	cmp	r3, r0
 80a45d8:	d908      	bls.n	80a45ec <mbedtls_timing_get_delay+0x24>
{
    mbedtls_timing_delay_context *ctx = (mbedtls_timing_delay_context *) data;
    unsigned long elapsed_ms;

    if( ctx->fin_ms == 0 )
        return( -1 );
 80a45da:	6a23      	ldr	r3, [r4, #32]
 80a45dc:	4283      	cmp	r3, r0
 80a45de:	bf8c      	ite	hi
 80a45e0:	2000      	movhi	r0, #0
 80a45e2:	2001      	movls	r0, #1
 80a45e4:	bd10      	pop	{r4, pc}
 80a45e6:	f04f 30ff 	mov.w	r0, #4294967295
 80a45ea:	bd10      	pop	{r4, pc}

    elapsed_ms = mbedtls_timing_get_timer( &ctx->timer, 0 );

    if( elapsed_ms >= ctx->fin_ms )
        return( 2 );
 80a45ec:	2002      	movs	r0, #2

    if( elapsed_ms >= ctx->int_ms )
        return( 1 );

    return( 0 );
}
 80a45ee:	bd10      	pop	{r4, pc}

080a45f0 <_ZL12gcm_ctx_freePv>:

    return( ctx );
}

static void gcm_ctx_free( void *ctx )
{
 80a45f0:	b510      	push	{r4, lr}
 80a45f2:	4604      	mov	r4, r0
    mbedtls_gcm_free( (mbedtls_gcm_context *)ctx );
 80a45f4:	f001 fae8 	bl	80a5bc8 <mbedtls_gcm_free>
    mbedtls_free( ctx );
 80a45f8:	4620      	mov	r0, r4
}
 80a45fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void gcm_ctx_free( void *ctx )
{
    mbedtls_gcm_free( (mbedtls_gcm_context *)ctx );
    mbedtls_free( ctx );
 80a45fe:	f009 bc85 	b.w	80adf0c <free>

080a4602 <_ZL13gcm_ctx_allocv>:
#endif

#if defined(MBEDTLS_GCM_C)
/* shared by all GCM ciphers */
static void *gcm_ctx_alloc( void )
{
 80a4602:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );
 80a4604:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80a4608:	2001      	movs	r0, #1
 80a460a:	f00a fd4d 	bl	80af0a8 <calloc>

    if( ctx != NULL )
 80a460e:	4604      	mov	r4, r0
 80a4610:	b108      	cbz	r0, 80a4616 <_ZL13gcm_ctx_allocv+0x14>
        mbedtls_gcm_init( (mbedtls_gcm_context *) ctx );
 80a4612:	f001 f849 	bl	80a56a8 <mbedtls_gcm_init>

    return( ctx );
}
 80a4616:	4620      	mov	r0, r4
 80a4618:	bd10      	pop	{r4, pc}

080a461a <_ZL19gcm_aes_setkey_wrapPvPKhj>:
#if defined(MBEDTLS_GCM_C)
static int gcm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
                     key, key_bitlen );
 80a461a:	4613      	mov	r3, r2
 80a461c:	460a      	mov	r2, r1
 80a461e:	2102      	movs	r1, #2
 80a4620:	f001 b847 	b.w	80a56b2 <mbedtls_gcm_setkey>

080a4624 <_ZL12aes_ctx_freePv>:

    return( aes );
}

static void aes_ctx_free( void *ctx )
{
 80a4624:	b510      	push	{r4, lr}
 80a4626:	4604      	mov	r4, r0
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
 80a4628:	f006 faa5 	bl	80aab76 <mbedtls_aes_free>
    mbedtls_free( ctx );
 80a462c:	4620      	mov	r0, r4
}
 80a462e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void aes_ctx_free( void *ctx )
{
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
    mbedtls_free( ctx );
 80a4632:	f009 bc6b 	b.w	80adf0c <free>

080a4636 <_ZL13aes_ctx_allocv>:
{
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
}

static void * aes_ctx_alloc( void )
{
 80a4636:	b510      	push	{r4, lr}
    mbedtls_aes_context *aes = (mbedtls_aes_context *)mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
 80a4638:	f44f 718c 	mov.w	r1, #280	; 0x118
 80a463c:	2001      	movs	r0, #1
 80a463e:	f00a fd33 	bl	80af0a8 <calloc>

    if( aes == NULL )
 80a4642:	4604      	mov	r4, r0
 80a4644:	b108      	cbz	r0, 80a464a <_ZL13aes_ctx_allocv+0x14>
        return( NULL );

    mbedtls_aes_init( aes );
 80a4646:	f006 fa91 	bl	80aab6c <mbedtls_aes_init>

    return( aes );
}
 80a464a:	4620      	mov	r0, r4
 80a464c:	bd10      	pop	{r4, pc}

080a464e <_ZL19aes_setkey_dec_wrapPvPKhj>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

static int aes_setkey_dec_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
 80a464e:	f006 bb99 	b.w	80aad84 <mbedtls_aes_setkey_dec>

080a4652 <_ZL19aes_setkey_enc_wrapPvPKhj>:
}

static int aes_setkey_enc_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
 80a4652:	f006 ba9b 	b.w	80aab8c <mbedtls_aes_setkey_enc>

080a4656 <_ZL18aes_crypt_ecb_wrapPv19mbedtls_operation_tPKhPh>:
#if defined(MBEDTLS_AES_C)

static int aes_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        const unsigned char *input, unsigned char *output )
{
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
 80a4656:	f006 bf9f 	b.w	80ab598 <mbedtls_aes_crypt_ecb>

080a465a <_ZL10rsa_can_do17mbedtls_pk_type_t>:
#endif

#if defined(MBEDTLS_RSA_C)
static int rsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_RSA ||
 80a465a:	2801      	cmp	r0, #1
 80a465c:	d002      	beq.n	80a4664 <_ZL10rsa_can_do17mbedtls_pk_type_t+0xa>
 80a465e:	1f83      	subs	r3, r0, #6
 80a4660:	4258      	negs	r0, r3
 80a4662:	4158      	adcs	r0, r3
            type == MBEDTLS_PK_RSASSA_PSS );
}
 80a4664:	4770      	bx	lr
	...

080a4668 <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item>:
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
 80a4668:	2301      	movs	r3, #1
    items->name = "rsa.N";
 80a466a:	4a06      	ldr	r2, [pc, #24]	; (80a4684 <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item+0x1c>)
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
 80a466c:	700b      	strb	r3, [r1, #0]
    items->name = "rsa.N";
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
 80a466e:	730b      	strb	r3, [r1, #12]
    items->name = "rsa.E";
 80a4670:	4b05      	ldr	r3, [pc, #20]	; (80a4688 <_ZL9rsa_debugPKvP21mbedtls_pk_debug_item+0x20>)
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.N";
 80a4672:	604a      	str	r2, [r1, #4]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 80a4674:	f100 0208 	add.w	r2, r0, #8

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.E";
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 80a4678:	3014      	adds	r0, #20

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.N";
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 80a467a:	608a      	str	r2, [r1, #8]

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
    items->name = "rsa.E";
 80a467c:	610b      	str	r3, [r1, #16]
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 80a467e:	6148      	str	r0, [r1, #20]
 80a4680:	4770      	bx	lr
 80a4682:	bf00      	nop
 80a4684:	080b026c 	.word	0x080b026c
 80a4688:	080b0272 	.word	0x080b0272

080a468c <_ZL13rsa_free_wrapPv>:

    return( ctx );
}

static void rsa_free_wrap( void *ctx )
{
 80a468c:	b510      	push	{r4, lr}
 80a468e:	4604      	mov	r4, r0
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
 80a4690:	f7fe fd8a 	bl	80a31a8 <mbedtls_rsa_free>
    mbedtls_free( ctx );
 80a4694:	4620      	mov	r0, r4
}
 80a4696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

static void rsa_free_wrap( void *ctx )
{
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
    mbedtls_free( ctx );
 80a469a:	f009 bc37 	b.w	80adf0c <free>

080a469e <_ZL14rsa_alloc_wrapv>:
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
                                (const mbedtls_rsa_context *) prv ) );
}

static void *rsa_alloc_wrap( void )
{
 80a469e:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_rsa_context ) );
 80a46a0:	21ac      	movs	r1, #172	; 0xac
 80a46a2:	2001      	movs	r0, #1
 80a46a4:	f00a fd00 	bl	80af0a8 <calloc>

    if( ctx != NULL )
 80a46a8:	4604      	mov	r4, r0
 80a46aa:	b118      	cbz	r0, 80a46b4 <_ZL14rsa_alloc_wrapv+0x16>
        mbedtls_rsa_init( (mbedtls_rsa_context *) ctx, 0, 0 );
 80a46ac:	2200      	movs	r2, #0
 80a46ae:	4611      	mov	r1, r2
 80a46b0:	f7fd fd8c 	bl	80a21cc <mbedtls_rsa_init>

    return( ctx );
}
 80a46b4:	4620      	mov	r0, r4
 80a46b6:	bd10      	pop	{r4, pc}

080a46b8 <_ZL19rsa_check_pair_wrapPKvS0_>:
}

static int rsa_check_pair_wrap( const void *pub, const void *prv )
{
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
                                (const mbedtls_rsa_context *) prv ) );
 80a46b8:	f7fd bdee 	b.w	80a2298 <mbedtls_rsa_check_pub_priv>

080a46bc <_ZL14rsa_get_bitlenPKv>:
    return( type == MBEDTLS_PK_RSA ||
            type == MBEDTLS_PK_RSASSA_PSS );
}

static size_t rsa_get_bitlen( const void *ctx )
{
 80a46bc:	b508      	push	{r3, lr}
    const mbedtls_rsa_context * rsa = (const mbedtls_rsa_context *) ctx;
    return( 8 * mbedtls_rsa_get_len( rsa ) );
 80a46be:	f7fd fd92 	bl	80a21e6 <mbedtls_rsa_get_len>
}
 80a46c2:	00c0      	lsls	r0, r0, #3
 80a46c4:	bd08      	pop	{r3, pc}
	...

080a46c8 <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_>:

static int rsa_encrypt_wrap( void *ctx,
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 80a46c8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a46cc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80a46d0:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80a46d4:	4604      	mov	r4, r0
 80a46d6:	4688      	mov	r8, r1
 80a46d8:	4617      	mov	r7, r2
 80a46da:	4699      	mov	r9, r3
 80a46dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80a46de:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    *olen = mbedtls_rsa_get_len( rsa );
 80a46e0:	f7fd fd81 	bl	80a21e6 <mbedtls_rsa_get_len>

    if( *olen > osize )
 80a46e4:	4550      	cmp	r0, sl
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    *olen = mbedtls_rsa_get_len( rsa );
 80a46e6:	f8cb 0000 	str.w	r0, [fp]

    if( *olen > osize )
 80a46ea:	d80d      	bhi.n	80a4708 <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x40>
        return( MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE );

    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
                                       ilen, input, output ) );
 80a46ec:	4632      	mov	r2, r6
 80a46ee:	4629      	mov	r1, r5
 80a46f0:	4620      	mov	r0, r4
 80a46f2:	2300      	movs	r3, #0
 80a46f4:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80a46f8:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80a46fc:	970a      	str	r7, [sp, #40]	; 0x28
}
 80a46fe:	b001      	add	sp, #4
 80a4700:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    if( *olen > osize )
        return( MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE );

    return( mbedtls_rsa_pkcs1_encrypt( rsa, f_rng, p_rng, MBEDTLS_RSA_PUBLIC,
                                       ilen, input, output ) );
 80a4704:	f7fe b8e4 	b.w	80a28d0 <mbedtls_rsa_pkcs1_encrypt>
}
 80a4708:	4801      	ldr	r0, [pc, #4]	; (80a4710 <_ZL16rsa_encrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x48>)
 80a470a:	b001      	add	sp, #4
 80a470c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4710:	ffffbc00 	.word	0xffffbc00

080a4714 <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_>:

static int rsa_decrypt_wrap( void *ctx,
                    const unsigned char *input, size_t ilen,
                    unsigned char *output, size_t *olen, size_t osize,
                    int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 80a4714:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4718:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80a471a:	4693      	mov	fp, r2
 80a471c:	4604      	mov	r4, r0
 80a471e:	4688      	mov	r8, r1
 80a4720:	4699      	mov	r9, r3
 80a4722:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80a4726:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80a4728:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;

    if( ilen != mbedtls_rsa_get_len( rsa ) )
 80a472a:	f7fd fd5c 	bl	80a21e6 <mbedtls_rsa_get_len>
 80a472e:	4558      	cmp	r0, fp
 80a4730:	d10f      	bne.n	80a4752 <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x3e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
                MBEDTLS_RSA_PRIVATE, olen, input, output, osize ) );
 80a4732:	4632      	mov	r2, r6
 80a4734:	4629      	mov	r1, r5
 80a4736:	4620      	mov	r0, r4
 80a4738:	2301      	movs	r3, #1
 80a473a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80a473e:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80a4742:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80a4746:	970a      	str	r7, [sp, #40]	; 0x28
}
 80a4748:	b001      	add	sp, #4
 80a474a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    if( ilen != mbedtls_rsa_get_len( rsa ) )
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    return( mbedtls_rsa_pkcs1_decrypt( rsa, f_rng, p_rng,
                MBEDTLS_RSA_PRIVATE, olen, input, output, osize ) );
 80a474e:	f7fe ba41 	b.w	80a2bd4 <mbedtls_rsa_pkcs1_decrypt>
}
 80a4752:	4802      	ldr	r0, [pc, #8]	; (80a475c <_ZL16rsa_decrypt_wrapPvPKhjPhPjjPFiS_S2_jES_+0x48>)
 80a4754:	b001      	add	sp, #4
 80a4756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a475a:	bf00      	nop
 80a475c:	ffffbf80 	.word	0xffffbf80

080a4760 <_ZL13rsa_sign_wrapPv17mbedtls_md_type_tPKhjPhPjPFiS_S3_jES_>:

static int rsa_sign_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   unsigned char *sig, size_t *sig_len,
                   int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 80a4760:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4764:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80a4768:	460f      	mov	r7, r1
 80a476a:	4691      	mov	r9, r2
 80a476c:	4698      	mov	r8, r3
 80a476e:	4604      	mov	r4, r0
 80a4770:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 80a4774:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80a4776:	9e0d      	ldr	r6, [sp, #52]	; 0x34
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );
 80a4778:	f7fd fd35 	bl	80a21e6 <mbedtls_rsa_get_len>

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
                md_alg, (unsigned int) hash_len, hash, sig ) );
 80a477c:	4632      	mov	r2, r6
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );
 80a477e:	f8cb 0000 	str.w	r0, [fp]

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
                md_alg, (unsigned int) hash_len, hash, sig ) );
 80a4782:	4629      	mov	r1, r5
 80a4784:	4620      	mov	r0, r4
 80a4786:	2301      	movs	r3, #1
 80a4788:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80a478c:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80a4790:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80a4794:	970a      	str	r7, [sp, #40]	; 0x28
}
 80a4796:	b001      	add	sp, #4
 80a4798:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif /* SIZE_MAX > UINT_MAX */

    *sig_len = mbedtls_rsa_get_len( rsa );

    return( mbedtls_rsa_pkcs1_sign( rsa, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
                md_alg, (unsigned int) hash_len, hash, sig ) );
 80a479c:	f7fe bb6a 	b.w	80a2e74 <mbedtls_rsa_pkcs1_sign>

080a47a0 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j>:
}

static int rsa_verify_wrap( void *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
 80a47a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a47a4:	b085      	sub	sp, #20
 80a47a6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80a47a8:	4606      	mov	r6, r0
 80a47aa:	460f      	mov	r7, r1
 80a47ac:	4691      	mov	r9, r2
 80a47ae:	4698      	mov	r8, r3
    int ret;
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
 80a47b0:	f7fd fd19 	bl	80a21e6 <mbedtls_rsa_get_len>
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
 80a47b4:	42a0      	cmp	r0, r4
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
    int ret;
    mbedtls_rsa_context * rsa = (mbedtls_rsa_context *) ctx;
    size_t rsa_len = mbedtls_rsa_get_len( rsa );
 80a47b6:	4605      	mov	r5, r0
#if SIZE_MAX > UINT_MAX
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
 80a47b8:	d810      	bhi.n	80a47dc <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3c>
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );

    if( ( ret = mbedtls_rsa_pkcs1_verify( rsa, NULL, NULL,
 80a47ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a47bc:	e88d 0380 	stmia.w	sp, {r7, r8, r9}
 80a47c0:	9303      	str	r3, [sp, #12]
 80a47c2:	2300      	movs	r3, #0
 80a47c4:	461a      	mov	r2, r3
 80a47c6:	4619      	mov	r1, r3
 80a47c8:	4630      	mov	r0, r6
 80a47ca:	f7fe fccb 	bl	80a3164 <mbedtls_rsa_pkcs1_verify>
 80a47ce:	b930      	cbnz	r0, 80a47de <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3e>
     * valid signature?" and not just "Does the buffer contain a valid
     * signature?". */
    if( sig_len > rsa_len )
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

    return( 0 );
 80a47d0:	f5a0 5064 	sub.w	r0, r0, #14592	; 0x3900
 80a47d4:	42a5      	cmp	r5, r4
 80a47d6:	bf28      	it	cs
 80a47d8:	2000      	movcs	r0, #0
 80a47da:	e000      	b.n	80a47de <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x3e>
    if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

    if( sig_len < rsa_len )
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 80a47dc:	4801      	ldr	r0, [pc, #4]	; (80a47e4 <_ZL15rsa_verify_wrapPv17mbedtls_md_type_tPKhjS2_j+0x44>)
     * signature?". */
    if( sig_len > rsa_len )
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

    return( 0 );
}
 80a47de:	b005      	add	sp, #20
 80a47e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a47e4:	ffffbc80 	.word	0xffffbc80

080a47e8 <mbedtls_ssl_ciphersuite_from_id>:
    return( NULL );
}

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;
 80a47e8:	4b05      	ldr	r3, [pc, #20]	; (80a4800 <mbedtls_ssl_ciphersuite_from_id+0x18>)

    while( cur->id != 0 )
 80a47ea:	681a      	ldr	r2, [r3, #0]
 80a47ec:	b11a      	cbz	r2, 80a47f6 <mbedtls_ssl_ciphersuite_from_id+0xe>
    {
        if( cur->id == ciphersuite )
 80a47ee:	4282      	cmp	r2, r0
 80a47f0:	d003      	beq.n	80a47fa <mbedtls_ssl_ciphersuite_from_id+0x12>
            return( cur );

        cur++;
 80a47f2:	3320      	adds	r3, #32

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;

    while( cur->id != 0 )
 80a47f4:	e7f9      	b.n	80a47ea <mbedtls_ssl_ciphersuite_from_id+0x2>
            return( cur );

        cur++;
    }

    return( NULL );
 80a47f6:	4610      	mov	r0, r2
 80a47f8:	4770      	bx	lr
 80a47fa:	4618      	mov	r0, r3
}
 80a47fc:	4770      	bx	lr
 80a47fe:	bf00      	nop
 80a4800:	080b02f0 	.word	0x080b02f0

080a4804 <mbedtls_ssl_list_ciphersuites>:
                            sizeof( ciphersuite_definitions[0]  )
static int supported_ciphersuites[MAX_CIPHERSUITES];
static int supported_init = 0;

const int *mbedtls_ssl_list_ciphersuites( void )
{
 80a4804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /*
     * On initial call filter out all ciphersuites not supported by current
     * build based on presence in the ciphersuite_definitions.
     */
    if( supported_init == 0 )
 80a4806:	4b0d      	ldr	r3, [pc, #52]	; (80a483c <mbedtls_ssl_list_ciphersuites+0x38>)
 80a4808:	681a      	ldr	r2, [r3, #0]
 80a480a:	461c      	mov	r4, r3
 80a480c:	b9a2      	cbnz	r2, 80a4838 <mbedtls_ssl_list_ciphersuites+0x34>
 80a480e:	490c      	ldr	r1, [pc, #48]	; (80a4840 <mbedtls_ssl_list_ciphersuites+0x3c>)
 80a4810:	4e0c      	ldr	r6, [pc, #48]	; (80a4844 <mbedtls_ssl_list_ciphersuites+0x40>)
    {
        const int *p;
        int *q;

        for( p = ciphersuite_preference, q = supported_ciphersuites;
             *p != 0 && q < supported_ciphersuites + MAX_CIPHERSUITES - 1;
 80a4812:	f101 0708 	add.w	r7, r1, #8
 80a4816:	f856 5f04 	ldr.w	r5, [r6, #4]!
 80a481a:	b14d      	cbz	r5, 80a4830 <mbedtls_ssl_list_ciphersuites+0x2c>
 80a481c:	42b9      	cmp	r1, r7
 80a481e:	d207      	bcs.n	80a4830 <mbedtls_ssl_list_ciphersuites+0x2c>
#if defined(MBEDTLS_REMOVE_ARC4_CIPHERSUITES)
            const mbedtls_ssl_ciphersuite_t *cs_info;
            if( ( cs_info = mbedtls_ssl_ciphersuite_from_id( *p ) ) != NULL &&
                cs_info->cipher != MBEDTLS_CIPHER_ARC4_128 )
#else
            if( mbedtls_ssl_ciphersuite_from_id( *p ) != NULL )
 80a4820:	4628      	mov	r0, r5
 80a4822:	f7ff ffe1 	bl	80a47e8 <mbedtls_ssl_ciphersuite_from_id>
 80a4826:	2800      	cmp	r0, #0
 80a4828:	d0f5      	beq.n	80a4816 <mbedtls_ssl_list_ciphersuites+0x12>
#endif
                *(q++) = *p;
 80a482a:	600d      	str	r5, [r1, #0]
 80a482c:	3104      	adds	r1, #4
    if( supported_init == 0 )
    {
        const int *p;
        int *q;

        for( p = ciphersuite_preference, q = supported_ciphersuites;
 80a482e:	e7f2      	b.n	80a4816 <mbedtls_ssl_list_ciphersuites+0x12>
#else
            if( mbedtls_ssl_ciphersuite_from_id( *p ) != NULL )
#endif
                *(q++) = *p;
        }
        *q = 0;
 80a4830:	2300      	movs	r3, #0
 80a4832:	600b      	str	r3, [r1, #0]

        supported_init = 1;
 80a4834:	2301      	movs	r3, #1
 80a4836:	6023      	str	r3, [r4, #0]
    }

    return( supported_ciphersuites );
}
 80a4838:	4801      	ldr	r0, [pc, #4]	; (80a4840 <mbedtls_ssl_list_ciphersuites+0x3c>)
 80a483a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a483c:	200007a8 	.word	0x200007a8
 80a4840:	200007ac 	.word	0x200007ac
 80a4844:	080b034c 	.word	0x080b034c

080a4848 <_ZL14x509_parse_intPPhjPi>:
    }
}

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;
 80a4848:	2300      	movs	r3, #0
        cur = cur->next;
    }
}

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
 80a484a:	b530      	push	{r4, r5, lr}
    *res = 0;
 80a484c:	6013      	str	r3, [r2, #0]
    for( ; n > 0; --n )
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
 80a484e:	250a      	movs	r5, #10

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;

    for( ; n > 0; --n )
 80a4850:	b189      	cbz	r1, 80a4876 <_ZL14x509_parse_intPPhjPi+0x2e>
    {
        if( ( **p < '0') || ( **p > '9' ) )
 80a4852:	6803      	ldr	r3, [r0, #0]
 80a4854:	781b      	ldrb	r3, [r3, #0]
 80a4856:	3b30      	subs	r3, #48	; 0x30
 80a4858:	2b09      	cmp	r3, #9
 80a485a:	d80e      	bhi.n	80a487a <_ZL14x509_parse_intPPhjPi+0x32>
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
 80a485c:	6813      	ldr	r3, [r2, #0]

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;

    for( ; n > 0; --n )
 80a485e:	3901      	subs	r1, #1
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
 80a4860:	436b      	muls	r3, r5
 80a4862:	6013      	str	r3, [r2, #0]
        *res += ( *(*p)++ - '0' );
 80a4864:	6803      	ldr	r3, [r0, #0]
 80a4866:	1c5c      	adds	r4, r3, #1
 80a4868:	6004      	str	r4, [r0, #0]
 80a486a:	781b      	ldrb	r3, [r3, #0]
 80a486c:	6814      	ldr	r4, [r2, #0]
 80a486e:	3b30      	subs	r3, #48	; 0x30
 80a4870:	4423      	add	r3, r4
 80a4872:	6013      	str	r3, [r2, #0]

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;

    for( ; n > 0; --n )
 80a4874:	e7ec      	b.n	80a4850 <_ZL14x509_parse_intPPhjPi+0x8>

        *res *= 10;
        *res += ( *(*p)++ - '0' );
    }

    return( 0 );
 80a4876:	4608      	mov	r0, r1
 80a4878:	bd30      	pop	{r4, r5, pc}
    *res = 0;

    for( ; n > 0; --n )
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );
 80a487a:	4801      	ldr	r0, [pc, #4]	; (80a4880 <_ZL14x509_parse_intPPhjPi+0x38>)
        *res *= 10;
        *res += ( *(*p)++ - '0' );
    }

    return( 0 );
}
 80a487c:	bd30      	pop	{r4, r5, pc}
 80a487e:	bf00      	nop
 80a4880:	ffffdc00 	.word	0xffffdc00

080a4884 <mbedtls_x509_get_serial>:
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
 80a4884:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( end - *p ) < 1 )
 80a4886:	6803      	ldr	r3, [r0, #0]
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
 80a4888:	4615      	mov	r5, r2
    int ret;

    if( ( end - *p ) < 1 )
 80a488a:	1aca      	subs	r2, r1, r3
 80a488c:	2a00      	cmp	r2, #0
/*
 *  CertificateSerialNumber  ::=  INTEGER
 */
int mbedtls_x509_get_serial( unsigned char **p, const unsigned char *end,
                     mbedtls_x509_buf *serial )
{
 80a488e:	4604      	mov	r4, r0
    int ret;

    if( ( end - *p ) < 1 )
 80a4890:	dd17      	ble.n	80a48c2 <mbedtls_x509_get_serial+0x3e>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
 80a4892:	781a      	ldrb	r2, [r3, #0]
 80a4894:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80a4898:	2a02      	cmp	r2, #2
 80a489a:	d114      	bne.n	80a48c6 <mbedtls_x509_get_serial+0x42>
        **p !=   MBEDTLS_ASN1_INTEGER )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    serial->tag = *(*p)++;
 80a489c:	1c5a      	adds	r2, r3, #1
 80a489e:	6002      	str	r2, [r0, #0]
 80a48a0:	462a      	mov	r2, r5
 80a48a2:	781b      	ldrb	r3, [r3, #0]
 80a48a4:	f842 3b04 	str.w	r3, [r2], #4

    if( ( ret = mbedtls_asn1_get_len( p, end, &serial->len ) ) != 0 )
 80a48a8:	f7fd f866 	bl	80a1978 <mbedtls_asn1_get_len>
 80a48ac:	b110      	cbz	r0, 80a48b4 <mbedtls_x509_get_serial+0x30>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL + ret );
 80a48ae:	f5a0 500a 	sub.w	r0, r0, #8832	; 0x2280
 80a48b2:	bd38      	pop	{r3, r4, r5, pc}

    serial->p = *p;
 80a48b4:	6823      	ldr	r3, [r4, #0]
 80a48b6:	60ab      	str	r3, [r5, #8]
    *p += serial->len;
 80a48b8:	6822      	ldr	r2, [r4, #0]
 80a48ba:	686b      	ldr	r3, [r5, #4]
 80a48bc:	4413      	add	r3, r2
 80a48be:	6023      	str	r3, [r4, #0]

    return( 0 );
 80a48c0:	bd38      	pop	{r3, r4, r5, pc}
{
    int ret;

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80a48c2:	4802      	ldr	r0, [pc, #8]	; (80a48cc <mbedtls_x509_get_serial+0x48>)
 80a48c4:	bd38      	pop	{r3, r4, r5, pc}

    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
        **p !=   MBEDTLS_ASN1_INTEGER )
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 80a48c6:	4802      	ldr	r0, [pc, #8]	; (80a48d0 <mbedtls_x509_get_serial+0x4c>)

    serial->p = *p;
    *p += serial->len;

    return( 0 );
}
 80a48c8:	bd38      	pop	{r3, r4, r5, pc}
 80a48ca:	bf00      	nop
 80a48cc:	ffffdd20 	.word	0xffffdd20
 80a48d0:	ffffdd1e 	.word	0xffffdd1e

080a48d4 <mbedtls_x509_get_alg>:
/*
 * Parse an algorithm identifier with (optional) paramaters
 */
int mbedtls_x509_get_alg( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *alg, mbedtls_x509_buf *params )
{
 80a48d4:	b508      	push	{r3, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, params ) ) != 0 )
 80a48d6:	f7fd f97a 	bl	80a1bce <mbedtls_asn1_get_alg>
 80a48da:	b108      	cbz	r0, 80a48e0 <mbedtls_x509_get_alg+0xc>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
 80a48dc:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300

    return( 0 );
}
 80a48e0:	bd08      	pop	{r3, pc}
	...

080a48e4 <mbedtls_x509_get_name>:
 * same set so that they are "merged" together in the functions that consume
 * this list, eg mbedtls_x509_dn_gets().
 */
int mbedtls_x509_get_name( unsigned char **p, const unsigned char *end,
                   mbedtls_x509_name *cur )
{
 80a48e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a48e8:	4604      	mov	r4, r0
 80a48ea:	460f      	mov	r7, r1
 80a48ec:	4691      	mov	r9, r2
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 80a48ee:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 80a49d0 <mbedtls_x509_get_name+0xec>
    while( 1 )
    {
        /*
         * parse SET
         */
        if( ( ret = mbedtls_asn1_get_tag( p, end, &set_len,
 80a48f2:	2331      	movs	r3, #49	; 0x31
 80a48f4:	466a      	mov	r2, sp
 80a48f6:	4639      	mov	r1, r7
 80a48f8:	4620      	mov	r0, r4
 80a48fa:	f7fd f88f 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a48fe:	b110      	cbz	r0, 80a4906 <mbedtls_x509_get_name+0x22>
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SET ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 80a4900:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380
 80a4904:	e05a      	b.n	80a49bc <mbedtls_x509_get_name+0xd8>

        end_set  = *p + set_len;
 80a4906:	464d      	mov	r5, r9
 80a4908:	6826      	ldr	r6, [r4, #0]
 80a490a:	9b00      	ldr	r3, [sp, #0]
 80a490c:	441e      	add	r6, r3
    int ret;
    size_t len;
    mbedtls_x509_buf *oid;
    mbedtls_x509_buf *val;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a490e:	2330      	movs	r3, #48	; 0x30
 80a4910:	aa01      	add	r2, sp, #4
 80a4912:	4631      	mov	r1, r6
 80a4914:	4620      	mov	r0, r4
 80a4916:	f7fd f881 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a491a:	bb50      	cbnz	r0, 80a4972 <mbedtls_x509_get_name+0x8e>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    if( ( end - *p ) < 1 )
 80a491c:	6823      	ldr	r3, [r4, #0]
 80a491e:	1af2      	subs	r2, r6, r3
 80a4920:	2a00      	cmp	r2, #0
 80a4922:	dc01      	bgt.n	80a4928 <mbedtls_x509_get_name+0x44>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80a4924:	4827      	ldr	r0, [pc, #156]	; (80a49c4 <mbedtls_x509_get_name+0xe0>)
 80a4926:	e049      	b.n	80a49bc <mbedtls_x509_get_name+0xd8>

    oid = &cur->oid;
    oid->tag = **p;
 80a4928:	462a      	mov	r2, r5
 80a492a:	781b      	ldrb	r3, [r3, #0]

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
 80a492c:	4631      	mov	r1, r6
    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    oid = &cur->oid;
    oid->tag = **p;
 80a492e:	f842 3b04 	str.w	r3, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
 80a4932:	4620      	mov	r0, r4
 80a4934:	2306      	movs	r3, #6
 80a4936:	f7fd f871 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a493a:	b9d0      	cbnz	r0, 80a4972 <mbedtls_x509_get_name+0x8e>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    oid->p = *p;
 80a493c:	6823      	ldr	r3, [r4, #0]
    *p += oid->len;
 80a493e:	6869      	ldr	r1, [r5, #4]
    oid->tag = **p;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    oid->p = *p;
 80a4940:	60ab      	str	r3, [r5, #8]
    *p += oid->len;
 80a4942:	6820      	ldr	r0, [r4, #0]
 80a4944:	1843      	adds	r3, r0, r1

    if( ( end - *p ) < 1 )
 80a4946:	1af2      	subs	r2, r6, r3
 80a4948:	2a00      	cmp	r2, #0

    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    oid->p = *p;
    *p += oid->len;
 80a494a:	6023      	str	r3, [r4, #0]

    if( ( end - *p ) < 1 )
 80a494c:	ddea      	ble.n	80a4924 <mbedtls_x509_get_name+0x40>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
 80a494e:	5c42      	ldrb	r2, [r0, r1]
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 80a4950:	2a1e      	cmp	r2, #30
 80a4952:	d81a      	bhi.n	80a498a <mbedtls_x509_get_name+0xa6>
 80a4954:	fa28 f202 	lsr.w	r2, r8, r2
 80a4958:	07d2      	lsls	r2, r2, #31
 80a495a:	d516      	bpl.n	80a498a <mbedtls_x509_get_name+0xa6>
        **p != MBEDTLS_ASN1_BIT_STRING )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    val = &cur->val;
    val->tag = *(*p)++;
 80a495c:	3301      	adds	r3, #1
 80a495e:	6023      	str	r3, [r4, #0]
 80a4960:	5c43      	ldrb	r3, [r0, r1]

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
 80a4962:	f105 0210 	add.w	r2, r5, #16
        **p != MBEDTLS_ASN1_BIT_STRING )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    val = &cur->val;
    val->tag = *(*p)++;
 80a4966:	60eb      	str	r3, [r5, #12]

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
 80a4968:	4631      	mov	r1, r6
 80a496a:	4620      	mov	r0, r4
 80a496c:	f7fd f804 	bl	80a1978 <mbedtls_asn1_get_len>
 80a4970:	b118      	cbz	r0, 80a497a <mbedtls_x509_get_name+0x96>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 80a4972:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380

        end_set  = *p + set_len;

        while( 1 )
        {
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
 80a4976:	b150      	cbz	r0, 80a498e <mbedtls_x509_get_name+0xaa>
 80a4978:	e020      	b.n	80a49bc <mbedtls_x509_get_name+0xd8>
    val->tag = *(*p)++;

    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );

    val->p = *p;
 80a497a:	6823      	ldr	r3, [r4, #0]
 80a497c:	616b      	str	r3, [r5, #20]
    *p += val->len;
 80a497e:	6822      	ldr	r2, [r4, #0]
 80a4980:	692b      	ldr	r3, [r5, #16]
 80a4982:	4413      	add	r3, r2
 80a4984:	6023      	str	r3, [r4, #0]

    cur->next = NULL;
 80a4986:	61a8      	str	r0, [r5, #24]
 80a4988:	e001      	b.n	80a498e <mbedtls_x509_get_name+0xaa>
    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
        **p != MBEDTLS_ASN1_T61_STRING && **p != MBEDTLS_ASN1_PRINTABLE_STRING &&
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
        **p != MBEDTLS_ASN1_BIT_STRING )
        return( MBEDTLS_ERR_X509_INVALID_NAME +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 80a498a:	480f      	ldr	r0, [pc, #60]	; (80a49c8 <mbedtls_x509_get_name+0xe4>)
 80a498c:	e016      	b.n	80a49bc <mbedtls_x509_get_name+0xd8>
        while( 1 )
        {
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
                return( ret );

            if( *p == end_set )
 80a498e:	6823      	ldr	r3, [r4, #0]
 80a4990:	429e      	cmp	r6, r3
 80a4992:	d008      	beq.n	80a49a6 <mbedtls_x509_get_name+0xc2>
                break;

            /* Mark this item as being no the only one in a set */
            cur->next_merged = 1;
 80a4994:	2001      	movs	r0, #1
 80a4996:	7728      	strb	r0, [r5, #28]

            cur->next = (mbedtls_x509_name *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 80a4998:	2120      	movs	r1, #32
 80a499a:	f00a fb85 	bl	80af0a8 <calloc>
 80a499e:	61a8      	str	r0, [r5, #24]

            if( cur->next == NULL )
 80a49a0:	b158      	cbz	r0, 80a49ba <mbedtls_x509_get_name+0xd6>
 80a49a2:	4605      	mov	r5, r0
 80a49a4:	e7b3      	b.n	80a490e <mbedtls_x509_get_name+0x2a>
        }

        /*
         * continue until end of SEQUENCE is reached
         */
        if( *p == end )
 80a49a6:	42b7      	cmp	r7, r6
 80a49a8:	d008      	beq.n	80a49bc <mbedtls_x509_get_name+0xd8>
            return( 0 );

        cur->next = (mbedtls_x509_name *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 80a49aa:	2120      	movs	r1, #32
 80a49ac:	2001      	movs	r0, #1
 80a49ae:	f00a fb7b 	bl	80af0a8 <calloc>
 80a49b2:	4681      	mov	r9, r0
 80a49b4:	61a8      	str	r0, [r5, #24]

        if( cur->next == NULL )
 80a49b6:	2800      	cmp	r0, #0
 80a49b8:	d19b      	bne.n	80a48f2 <mbedtls_x509_get_name+0xe>
            cur->next_merged = 1;

            cur->next = (mbedtls_x509_name *)mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );

            if( cur->next == NULL )
                return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 80a49ba:	4804      	ldr	r0, [pc, #16]	; (80a49cc <mbedtls_x509_get_name+0xe8>)
        if( cur->next == NULL )
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );

        cur = cur->next;
    }
}
 80a49bc:	b003      	add	sp, #12
 80a49be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a49c2:	bf00      	nop
 80a49c4:	ffffdc20 	.word	0xffffdc20
 80a49c8:	ffffdc1e 	.word	0xffffdc1e
 80a49cc:	ffffd780 	.word	0xffffd780
 80a49d0:	50581008 	.word	0x50581008

080a49d4 <mbedtls_x509_get_time>:
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
 80a49d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
 80a49d6:	6803      	ldr	r3, [r0, #0]
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
 80a49d8:	4614      	mov	r4, r2
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
 80a49da:	1aca      	subs	r2, r1, r3
 80a49dc:	2a00      	cmp	r2, #0
 *       utcTime        UTCTime,
 *       generalTime    GeneralizedTime }
 */
int mbedtls_x509_get_time( unsigned char **p, const unsigned char *end,
                           mbedtls_x509_time *tm )
{
 80a49de:	4605      	mov	r5, r0
    int ret;
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
 80a49e0:	f340 80a1 	ble.w	80a4b26 <mbedtls_x509_get_time+0x152>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag = **p;
 80a49e4:	781a      	ldrb	r2, [r3, #0]

    if( tag == MBEDTLS_ASN1_UTC_TIME )
 80a49e6:	2a17      	cmp	r2, #23
 80a49e8:	d004      	beq.n	80a49f4 <mbedtls_x509_get_time+0x20>
        year_len = 2;
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
 80a49ea:	2a18      	cmp	r2, #24
 80a49ec:	f040 809d 	bne.w	80a4b2a <mbedtls_x509_get_time+0x156>
        year_len = 4;
 80a49f0:	2704      	movs	r7, #4
 80a49f2:	e000      	b.n	80a49f6 <mbedtls_x509_get_time+0x22>
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag = **p;

    if( tag == MBEDTLS_ASN1_UTC_TIME )
        year_len = 2;
 80a49f4:	2702      	movs	r7, #2
        year_len = 4;
    else
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 80a49f6:	3301      	adds	r3, #1
 80a49f8:	602b      	str	r3, [r5, #0]
    ret = mbedtls_asn1_get_len( p, end, &len );
 80a49fa:	aa01      	add	r2, sp, #4
 80a49fc:	4628      	mov	r0, r5
 80a49fe:	f7fc ffbb 	bl	80a1978 <mbedtls_asn1_get_len>

    if( ret != 0 )
 80a4a02:	b110      	cbz	r0, 80a4a0a <mbedtls_x509_get_time+0x36>
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
 80a4a04:	f5a0 5010 	sub.w	r0, r0, #9216	; 0x2400
 80a4a08:	e092      	b.n	80a4b30 <mbedtls_x509_get_time+0x15c>

    return x509_parse_time( p, len, year_len, tm );
 80a4a0a:	9e01      	ldr	r6, [sp, #4]
    int ret;

    /*
     * Minimum length is 10 or 12 depending on yearlen
     */
    if ( len < yearlen + 8 )
 80a4a0c:	f107 0308 	add.w	r3, r7, #8
 80a4a10:	429e      	cmp	r6, r3
 80a4a12:	f0c0 808c 	bcc.w	80a4b2e <mbedtls_x509_get_time+0x15a>
    len -= yearlen + 8;

    /*
     * Parse year, month, day, hour, minute
     */
    CHECK( x509_parse_int( p, yearlen, &tm->year ) );
 80a4a16:	4622      	mov	r2, r4
 80a4a18:	4639      	mov	r1, r7
 80a4a1a:	4628      	mov	r0, r5
 80a4a1c:	f7ff ff14 	bl	80a4848 <_ZL14x509_parse_intPPhjPi>
 80a4a20:	2800      	cmp	r0, #0
 80a4a22:	f040 8085 	bne.w	80a4b30 <mbedtls_x509_get_time+0x15c>
    if ( 2 == yearlen )
 80a4a26:	2f02      	cmp	r7, #2
 80a4a28:	d108      	bne.n	80a4a3c <mbedtls_x509_get_time+0x68>
    {
        if ( tm->year < 50 )
 80a4a2a:	6823      	ldr	r3, [r4, #0]
 80a4a2c:	2b31      	cmp	r3, #49	; 0x31
            tm->year += 100;
 80a4a2e:	bfdc      	itt	le
 80a4a30:	3364      	addle	r3, #100	; 0x64
 80a4a32:	6023      	strle	r3, [r4, #0]

        tm->year += 1900;
 80a4a34:	6823      	ldr	r3, [r4, #0]
 80a4a36:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80a4a3a:	6023      	str	r3, [r4, #0]
    }

    CHECK( x509_parse_int( p, 2, &tm->mon ) );
 80a4a3c:	1d22      	adds	r2, r4, #4
 80a4a3e:	2102      	movs	r1, #2
 80a4a40:	4628      	mov	r0, r5
 80a4a42:	f7ff ff01 	bl	80a4848 <_ZL14x509_parse_intPPhjPi>
 80a4a46:	2800      	cmp	r0, #0
 80a4a48:	d172      	bne.n	80a4b30 <mbedtls_x509_get_time+0x15c>
    CHECK( x509_parse_int( p, 2, &tm->day ) );
 80a4a4a:	f104 0208 	add.w	r2, r4, #8
 80a4a4e:	2102      	movs	r1, #2
 80a4a50:	4628      	mov	r0, r5
 80a4a52:	f7ff fef9 	bl	80a4848 <_ZL14x509_parse_intPPhjPi>
 80a4a56:	2800      	cmp	r0, #0
 80a4a58:	d16a      	bne.n	80a4b30 <mbedtls_x509_get_time+0x15c>
    CHECK( x509_parse_int( p, 2, &tm->hour ) );
 80a4a5a:	f104 020c 	add.w	r2, r4, #12
 80a4a5e:	2102      	movs	r1, #2
 80a4a60:	4628      	mov	r0, r5
 80a4a62:	f7ff fef1 	bl	80a4848 <_ZL14x509_parse_intPPhjPi>
 80a4a66:	2800      	cmp	r0, #0
 80a4a68:	d162      	bne.n	80a4b30 <mbedtls_x509_get_time+0x15c>
    CHECK( x509_parse_int( p, 2, &tm->min ) );
 80a4a6a:	f104 0210 	add.w	r2, r4, #16
 80a4a6e:	2102      	movs	r1, #2
 80a4a70:	4628      	mov	r0, r5
 80a4a72:	f7ff fee9 	bl	80a4848 <_ZL14x509_parse_intPPhjPi>
 80a4a76:	2800      	cmp	r0, #0
 80a4a78:	d15a      	bne.n	80a4b30 <mbedtls_x509_get_time+0x15c>
    /*
     * Minimum length is 10 or 12 depending on yearlen
     */
    if ( len < yearlen + 8 )
        return ( MBEDTLS_ERR_X509_INVALID_DATE );
    len -= yearlen + 8;
 80a4a7a:	1bf6      	subs	r6, r6, r7
    CHECK( x509_parse_int( p, 2, &tm->min ) );

    /*
     * Parse seconds if present
     */
    if ( len >= 2 )
 80a4a7c:	f1a6 0308 	sub.w	r3, r6, #8
 80a4a80:	2b01      	cmp	r3, #1
 80a4a82:	d954      	bls.n	80a4b2e <mbedtls_x509_get_time+0x15a>
    {
        CHECK( x509_parse_int( p, 2, &tm->sec ) );
 80a4a84:	f104 0214 	add.w	r2, r4, #20
 80a4a88:	2102      	movs	r1, #2
 80a4a8a:	4628      	mov	r0, r5
 80a4a8c:	f7ff fedc 	bl	80a4848 <_ZL14x509_parse_intPPhjPi>
 80a4a90:	2800      	cmp	r0, #0
 80a4a92:	d14d      	bne.n	80a4b30 <mbedtls_x509_get_time+0x15c>
        len -= 2;
 80a4a94:	f1a6 030a 	sub.w	r3, r6, #10
        return ( MBEDTLS_ERR_X509_INVALID_DATE );

    /*
     * Parse trailing 'Z' if present
     */
    if ( 1 == len && 'Z' == **p )
 80a4a98:	2b01      	cmp	r3, #1
 80a4a9a:	d107      	bne.n	80a4aac <mbedtls_x509_get_time+0xd8>
 80a4a9c:	682b      	ldr	r3, [r5, #0]
 80a4a9e:	781a      	ldrb	r2, [r3, #0]
 80a4aa0:	2a5a      	cmp	r2, #90	; 0x5a
 80a4aa2:	d144      	bne.n	80a4b2e <mbedtls_x509_get_time+0x15a>
    {
        (*p)++;
 80a4aa4:	3301      	adds	r3, #1
 80a4aa6:	602b      	str	r3, [r5, #0]
        len--;
 80a4aa8:	f1a6 030b 	sub.w	r3, r6, #11
    }

    /*
     * We should have parsed all characters at this point
     */
    if ( 0 != len )
 80a4aac:	2b00      	cmp	r3, #0
 80a4aae:	d13e      	bne.n	80a4b2e <mbedtls_x509_get_time+0x15a>
static int x509_date_is_valid(const mbedtls_x509_time *t )
{
    int ret = MBEDTLS_ERR_X509_INVALID_DATE;
    int month_len;

    CHECK_RANGE( 0, 9999, t->year );
 80a4ab0:	f242 720f 	movw	r2, #9999	; 0x270f
 80a4ab4:	6823      	ldr	r3, [r4, #0]
 80a4ab6:	4293      	cmp	r3, r2
 80a4ab8:	d839      	bhi.n	80a4b2e <mbedtls_x509_get_time+0x15a>
    CHECK_RANGE( 0, 23,   t->hour );
 80a4aba:	68e2      	ldr	r2, [r4, #12]
 80a4abc:	2a17      	cmp	r2, #23
 80a4abe:	d836      	bhi.n	80a4b2e <mbedtls_x509_get_time+0x15a>
    CHECK_RANGE( 0, 59,   t->min  );
 80a4ac0:	6922      	ldr	r2, [r4, #16]
 80a4ac2:	2a3b      	cmp	r2, #59	; 0x3b
 80a4ac4:	d833      	bhi.n	80a4b2e <mbedtls_x509_get_time+0x15a>
    CHECK_RANGE( 0, 59,   t->sec  );
 80a4ac6:	6962      	ldr	r2, [r4, #20]
 80a4ac8:	2a3b      	cmp	r2, #59	; 0x3b
 80a4aca:	d830      	bhi.n	80a4b2e <mbedtls_x509_get_time+0x15a>
 80a4acc:	6861      	ldr	r1, [r4, #4]
 80a4ace:	290c      	cmp	r1, #12
 80a4ad0:	d82d      	bhi.n	80a4b2e <mbedtls_x509_get_time+0x15a>
 80a4ad2:	2201      	movs	r2, #1
 80a4ad4:	408a      	lsls	r2, r1
 80a4ad6:	f241 51aa 	movw	r1, #5546	; 0x15aa
 80a4ada:	4011      	ands	r1, r2
 80a4adc:	b9b9      	cbnz	r1, 80a4b0e <mbedtls_x509_get_time+0x13a>
 80a4ade:	f412 6f25 	tst.w	r2, #2640	; 0xa50
 80a4ae2:	d116      	bne.n	80a4b12 <mbedtls_x509_get_time+0x13e>
 80a4ae4:	0751      	lsls	r1, r2, #29
 80a4ae6:	d522      	bpl.n	80a4b2e <mbedtls_x509_get_time+0x15a>
            break;
        case 4: case 6: case 9: case 11:
            month_len = 30;
            break;
        case 2:
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
 80a4ae8:	079a      	lsls	r2, r3, #30
 80a4aea:	d105      	bne.n	80a4af8 <mbedtls_x509_get_time+0x124>
 80a4aec:	2164      	movs	r1, #100	; 0x64
 80a4aee:	fb93 f2f1 	sdiv	r2, r3, r1
 80a4af2:	fb01 3212 	mls	r2, r1, r2, r3
 80a4af6:	b972      	cbnz	r2, 80a4b16 <mbedtls_x509_get_time+0x142>
 80a4af8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a4afc:	fb93 f2f1 	sdiv	r2, r3, r1
 80a4b00:	fb01 3312 	mls	r3, r1, r2, r3
                !( t->year % 400 ) )
                month_len = 29;
            else
                month_len = 28;
 80a4b04:	2b00      	cmp	r3, #0
 80a4b06:	bf0c      	ite	eq
 80a4b08:	231d      	moveq	r3, #29
 80a4b0a:	231c      	movne	r3, #28
 80a4b0c:	e004      	b.n	80a4b18 <mbedtls_x509_get_time+0x144>
    CHECK_RANGE( 0, 59,   t->sec  );

    switch( t->mon )
    {
        case 1: case 3: case 5: case 7: case 8: case 10: case 12:
            month_len = 31;
 80a4b0e:	231f      	movs	r3, #31
 80a4b10:	e002      	b.n	80a4b18 <mbedtls_x509_get_time+0x144>
            break;
        case 4: case 6: case 9: case 11:
            month_len = 30;
 80a4b12:	231e      	movs	r3, #30
 80a4b14:	e000      	b.n	80a4b18 <mbedtls_x509_get_time+0x144>
            break;
        case 2:
            if( ( !( t->year % 4 ) && t->year % 100 ) ||
                !( t->year % 400 ) )
                month_len = 29;
 80a4b16:	231d      	movs	r3, #29
                month_len = 28;
            break;
        default:
            return( ret );
    }
    CHECK_RANGE( 1, month_len, t->day );
 80a4b18:	68a2      	ldr	r2, [r4, #8]
 80a4b1a:	2a00      	cmp	r2, #0
 80a4b1c:	dd07      	ble.n	80a4b2e <mbedtls_x509_get_time+0x15a>
 80a4b1e:	429a      	cmp	r2, r3
 80a4b20:	dc05      	bgt.n	80a4b2e <mbedtls_x509_get_time+0x15a>
    if ( 0 != len )
        return ( MBEDTLS_ERR_X509_INVALID_DATE );

    CHECK( x509_date_is_valid( tm ) );

    return ( 0 );
 80a4b22:	2000      	movs	r0, #0
 80a4b24:	e004      	b.n	80a4b30 <mbedtls_x509_get_time+0x15c>
    size_t len, year_len;
    unsigned char tag;

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80a4b26:	4803      	ldr	r0, [pc, #12]	; (80a4b34 <mbedtls_x509_get_time+0x160>)
 80a4b28:	e002      	b.n	80a4b30 <mbedtls_x509_get_time+0x15c>
        year_len = 2;
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
        year_len = 4;
    else
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 80a4b2a:	4803      	ldr	r0, [pc, #12]	; (80a4b38 <mbedtls_x509_get_time+0x164>)
 80a4b2c:	e000      	b.n	80a4b30 <mbedtls_x509_get_time+0x15c>

        tm->year += 1900;
    }

    CHECK( x509_parse_int( p, 2, &tm->mon ) );
    CHECK( x509_parse_int( p, 2, &tm->day ) );
 80a4b2e:	4803      	ldr	r0, [pc, #12]	; (80a4b3c <mbedtls_x509_get_time+0x168>)

    if( ret != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );

    return x509_parse_time( p, len, year_len, tm );
}
 80a4b30:	b003      	add	sp, #12
 80a4b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a4b34:	ffffdba0 	.word	0xffffdba0
 80a4b38:	ffffdb9e 	.word	0xffffdb9e
 80a4b3c:	ffffdc00 	.word	0xffffdc00

080a4b40 <mbedtls_x509_get_sig>:

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
 80a4b40:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
 80a4b42:	6803      	ldr	r3, [r0, #0]

    return x509_parse_time( p, len, year_len, tm );
}

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
 80a4b44:	4615      	mov	r5, r2
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
 80a4b46:	1aca      	subs	r2, r1, r3
 80a4b48:	2a00      	cmp	r2, #0

    return x509_parse_time( p, len, year_len, tm );
}

int mbedtls_x509_get_sig( unsigned char **p, const unsigned char *end, mbedtls_x509_buf *sig )
{
 80a4b4a:	4604      	mov	r4, r0
    int ret;
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
 80a4b4c:	dd10      	ble.n	80a4b70 <mbedtls_x509_get_sig+0x30>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag_type = **p;

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 80a4b4e:	aa01      	add	r2, sp, #4

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    tag_type = **p;
 80a4b50:	781e      	ldrb	r6, [r3, #0]

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 80a4b52:	f7fc ffec 	bl	80a1b2e <mbedtls_asn1_get_bitstring_null>
 80a4b56:	b110      	cbz	r0, 80a4b5e <mbedtls_x509_get_sig+0x1e>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );
 80a4b58:	f5a0 5012 	sub.w	r0, r0, #9344	; 0x2480
 80a4b5c:	e009      	b.n	80a4b72 <mbedtls_x509_get_sig+0x32>

    sig->tag = tag_type;
    sig->len = len;
 80a4b5e:	9b01      	ldr	r3, [sp, #4]
    tag_type = **p;

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );

    sig->tag = tag_type;
 80a4b60:	602e      	str	r6, [r5, #0]
    sig->len = len;
 80a4b62:	606b      	str	r3, [r5, #4]
    sig->p = *p;
 80a4b64:	6822      	ldr	r2, [r4, #0]
 80a4b66:	60aa      	str	r2, [r5, #8]

    *p += len;
 80a4b68:	6822      	ldr	r2, [r4, #0]
 80a4b6a:	4413      	add	r3, r2
 80a4b6c:	6023      	str	r3, [r4, #0]

    return( 0 );
 80a4b6e:	e000      	b.n	80a4b72 <mbedtls_x509_get_sig+0x32>
    size_t len;
    int tag_type;

    if( ( end - *p ) < 1 )
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80a4b70:	4801      	ldr	r0, [pc, #4]	; (80a4b78 <mbedtls_x509_get_sig+0x38>)
    sig->p = *p;

    *p += len;

    return( 0 );
}
 80a4b72:	b002      	add	sp, #8
 80a4b74:	bd70      	pop	{r4, r5, r6, pc}
 80a4b76:	bf00      	nop
 80a4b78:	ffffdb20 	.word	0xffffdb20

080a4b7c <mbedtls_x509_get_sig_alg>:
 * Get signature algorithm from alg OID and optional parameters
 */
int mbedtls_x509_get_sig_alg( const mbedtls_x509_buf *sig_oid, const mbedtls_x509_buf *sig_params,
                      mbedtls_md_type_t *md_alg, mbedtls_pk_type_t *pk_alg,
                      void **sig_opts )
{
 80a4b7c:	b510      	push	{r4, lr}
 80a4b7e:	460c      	mov	r4, r1
 80a4b80:	4611      	mov	r1, r2
    int ret;

    if( *sig_opts != NULL )
 80a4b82:	9a02      	ldr	r2, [sp, #8]
 80a4b84:	6812      	ldr	r2, [r2, #0]
 80a4b86:	b982      	cbnz	r2, 80a4baa <mbedtls_x509_get_sig_alg+0x2e>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    if( ( ret = mbedtls_oid_get_sig_alg( sig_oid, md_alg, pk_alg ) ) != 0 )
 80a4b88:	461a      	mov	r2, r3
 80a4b8a:	f7fe fbb5 	bl	80a32f8 <mbedtls_oid_get_sig_alg>
 80a4b8e:	b110      	cbz	r0, 80a4b96 <mbedtls_x509_get_sig_alg+0x1a>
        return( MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG + ret );
 80a4b90:	f5a0 5018 	sub.w	r0, r0, #9728	; 0x2600
 80a4b94:	bd10      	pop	{r4, pc}
    }
    else
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */
    {
        /* Make sure parameters are absent or NULL */
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
 80a4b96:	6823      	ldr	r3, [r4, #0]
 80a4b98:	2b05      	cmp	r3, #5
 80a4b9a:	d000      	beq.n	80a4b9e <mbedtls_x509_get_sig_alg+0x22>
 80a4b9c:	b93b      	cbnz	r3, 80a4bae <mbedtls_x509_get_sig_alg+0x32>
 80a4b9e:	6863      	ldr	r3, [r4, #4]
              sig_params->len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG );
    }

    return( 0 );
 80a4ba0:	4804      	ldr	r0, [pc, #16]	; (80a4bb4 <mbedtls_x509_get_sig_alg+0x38>)
 80a4ba2:	2b00      	cmp	r3, #0
 80a4ba4:	bf08      	it	eq
 80a4ba6:	2000      	moveq	r0, #0
 80a4ba8:	bd10      	pop	{r4, pc}
                      void **sig_opts )
{
    int ret;

    if( *sig_opts != NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 80a4baa:	4803      	ldr	r0, [pc, #12]	; (80a4bb8 <mbedtls_x509_get_sig_alg+0x3c>)
 80a4bac:	bd10      	pop	{r4, pc}
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */
    {
        /* Make sure parameters are absent or NULL */
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
              sig_params->len != 0 )
        return( MBEDTLS_ERR_X509_INVALID_ALG );
 80a4bae:	4801      	ldr	r0, [pc, #4]	; (80a4bb4 <mbedtls_x509_get_sig_alg+0x38>)
    }

    return( 0 );
}
 80a4bb0:	bd10      	pop	{r4, pc}
 80a4bb2:	bf00      	nop
 80a4bb4:	ffffdd00 	.word	0xffffdd00
 80a4bb8:	ffffd800 	.word	0xffffd800

080a4bbc <mbedtls_x509_get_ext>:
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *ext, int tag )
{
 80a4bbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a4bbe:	4616      	mov	r6, r2
    int ret;
    size_t len;

    if( *p == end )
 80a4bc0:	6802      	ldr	r2, [r0, #0]
 * X.509 Extensions (No parsing of extensions, pointer should
 * be either manually updated or extensions should be parsed!)
 */
int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *ext, int tag )
{
 80a4bc2:	4604      	mov	r4, r0
    int ret;
    size_t len;

    if( *p == end )
 80a4bc4:	428a      	cmp	r2, r1
 80a4bc6:	d01c      	beq.n	80a4c02 <mbedtls_x509_get_ext+0x46>
        return( 0 );

    ext->tag = **p;
 80a4bc8:	7815      	ldrb	r5, [r2, #0]
 80a4bca:	4632      	mov	r2, r6

    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 80a4bcc:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    size_t len;

    if( *p == end )
        return( 0 );

    ext->tag = **p;
 80a4bd0:	f842 5b04 	str.w	r5, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 80a4bd4:	f7fc ff22 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a4bd8:	b9b0      	cbnz	r0, 80a4c08 <mbedtls_x509_get_ext+0x4c>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag ) ) != 0 )
        return( ret );

    ext->p = *p;
 80a4bda:	6823      	ldr	r3, [r4, #0]
     * Extension  ::=  SEQUENCE  {
     *      extnID      OBJECT IDENTIFIER,
     *      critical    BOOLEAN DEFAULT FALSE,
     *      extnValue   OCTET STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a4bdc:	aa01      	add	r2, sp, #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag ) ) != 0 )
        return( ret );

    ext->p = *p;
 80a4bde:	60b3      	str	r3, [r6, #8]
    end = *p + ext->len;
 80a4be0:	6825      	ldr	r5, [r4, #0]
 80a4be2:	6873      	ldr	r3, [r6, #4]
     * Extension  ::=  SEQUENCE  {
     *      extnID      OBJECT IDENTIFIER,
     *      critical    BOOLEAN DEFAULT FALSE,
     *      extnValue   OCTET STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a4be4:	4620      	mov	r0, r4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | tag ) ) != 0 )
        return( ret );

    ext->p = *p;
    end = *p + ext->len;
 80a4be6:	441d      	add	r5, r3
     * Extension  ::=  SEQUENCE  {
     *      extnID      OBJECT IDENTIFIER,
     *      critical    BOOLEAN DEFAULT FALSE,
     *      extnValue   OCTET STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a4be8:	4629      	mov	r1, r5
 80a4bea:	2330      	movs	r3, #48	; 0x30
 80a4bec:	f7fc ff16 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a4bf0:	b110      	cbz	r0, 80a4bf8 <mbedtls_x509_get_ext+0x3c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 80a4bf2:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
 80a4bf6:	e007      	b.n	80a4c08 <mbedtls_x509_get_ext+0x4c>

    if( end != *p + len )
 80a4bf8:	6822      	ldr	r2, [r4, #0]
 80a4bfa:	9b01      	ldr	r3, [sp, #4]
 80a4bfc:	4413      	add	r3, r2
 80a4bfe:	429d      	cmp	r5, r3
 80a4c00:	d101      	bne.n	80a4c06 <mbedtls_x509_get_ext+0x4a>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
 80a4c02:	2000      	movs	r0, #0
 80a4c04:	e000      	b.n	80a4c08 <mbedtls_x509_get_ext+0x4c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( end != *p + len )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80a4c06:	4801      	ldr	r0, [pc, #4]	; (80a4c0c <mbedtls_x509_get_ext+0x50>)

    return( 0 );
}
 80a4c08:	b002      	add	sp, #8
 80a4c0a:	bd70      	pop	{r4, r5, r6, pc}
 80a4c0c:	ffffda9a 	.word	0xffffda9a

080a4c10 <mbedtls_x509_dn_gets>:
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
 80a4c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a4c14:	460f      	mov	r7, r1
 80a4c16:	4691      	mov	r9, r2

    memset( s, 0, sizeof( s ) );

    name = dn;
    p = buf;
    n = size;
 80a4c18:	463d      	mov	r5, r7
    const char *short_name = NULL;
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );

    name = dn;
 80a4c1a:	464e      	mov	r6, r9
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
 80a4c1c:	b0c2      	sub	sp, #264	; 0x108
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
 80a4c1e:	f04f 0a00 	mov.w	sl, #0
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
 80a4c22:	f10d 0808 	add.w	r8, sp, #8
 80a4c26:	f44f 7280 	mov.w	r2, #256	; 0x100
 80a4c2a:	4651      	mov	r1, sl
/*
 * Store the name in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
 80a4c2c:	4604      	mov	r4, r0
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
 80a4c2e:	4640      	mov	r0, r8
{
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
    const mbedtls_x509_name *name;
    const char *short_name = NULL;
 80a4c30:	f8cd a004 	str.w	sl, [sp, #4]
    char s[MBEDTLS_X509_MAX_DN_NAME_SIZE], *p;

    memset( s, 0, sizeof( s ) );
 80a4c34:	f00a fa83 	bl	80af13e <memset>
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
    int ret;
    size_t i, n;
    unsigned char c, merge = 0;
 80a4c38:	4652      	mov	r2, sl
            if( i >= sizeof( s ) - 1 )
                break;

            c = name->val.p[i];
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
                 s[i] = '?';
 80a4c3a:	f04f 0a3f 	mov.w	sl, #63	; 0x3f

    name = dn;
    p = buf;
    n = size;

    while( name != NULL )
 80a4c3e:	2e00      	cmp	r6, #0
 80a4c40:	d057      	beq.n	80a4cf2 <mbedtls_x509_dn_gets+0xe2>
    {
        if( !name->oid.p )
 80a4c42:	68b3      	ldr	r3, [r6, #8]
 80a4c44:	2b00      	cmp	r3, #0
 80a4c46:	d052      	beq.n	80a4cee <mbedtls_x509_dn_gets+0xde>
        {
            name = name->next;
            continue;
        }

        if( name != dn )
 80a4c48:	454e      	cmp	r6, r9
 80a4c4a:	d011      	beq.n	80a4c70 <mbedtls_x509_dn_gets+0x60>
        {
            ret = mbedtls_snprintf( p, n, merge ? " + " : ", " );
 80a4c4c:	4b2b      	ldr	r3, [pc, #172]	; (80a4cfc <mbedtls_x509_dn_gets+0xec>)
 80a4c4e:	492c      	ldr	r1, [pc, #176]	; (80a4d00 <mbedtls_x509_dn_gets+0xf0>)
 80a4c50:	4620      	mov	r0, r4
 80a4c52:	2a00      	cmp	r2, #0
 80a4c54:	bf14      	ite	ne
 80a4c56:	460a      	movne	r2, r1
 80a4c58:	461a      	moveq	r2, r3
 80a4c5a:	4629      	mov	r1, r5
 80a4c5c:	f009 f96e 	bl	80adf3c <snprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
 80a4c60:	2800      	cmp	r0, #0
 80a4c62:	da01      	bge.n	80a4c68 <mbedtls_x509_dn_gets+0x58>
 80a4c64:	4827      	ldr	r0, [pc, #156]	; (80a4d04 <mbedtls_x509_dn_gets+0xf4>)
 80a4c66:	e045      	b.n	80a4cf4 <mbedtls_x509_dn_gets+0xe4>
 80a4c68:	4285      	cmp	r5, r0
 80a4c6a:	d9fb      	bls.n	80a4c64 <mbedtls_x509_dn_gets+0x54>
 80a4c6c:	1a2d      	subs	r5, r5, r0
 80a4c6e:	4404      	add	r4, r0
        }

        ret = mbedtls_oid_get_attr_short_name( &name->oid, &short_name );
 80a4c70:	a901      	add	r1, sp, #4
 80a4c72:	4630      	mov	r0, r6
 80a4c74:	f7fe fae6 	bl	80a3244 <mbedtls_oid_get_attr_short_name>

        if( ret == 0 )
 80a4c78:	b930      	cbnz	r0, 80a4c88 <mbedtls_x509_dn_gets+0x78>
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
 80a4c7a:	9b01      	ldr	r3, [sp, #4]
 80a4c7c:	4a22      	ldr	r2, [pc, #136]	; (80a4d08 <mbedtls_x509_dn_gets+0xf8>)
 80a4c7e:	4629      	mov	r1, r5
 80a4c80:	4620      	mov	r0, r4
 80a4c82:	f009 f95b 	bl	80adf3c <snprintf>
 80a4c86:	e004      	b.n	80a4c92 <mbedtls_x509_dn_gets+0x82>
        else
            ret = mbedtls_snprintf( p, n, "\?\?=" );
 80a4c88:	4a20      	ldr	r2, [pc, #128]	; (80a4d0c <mbedtls_x509_dn_gets+0xfc>)
 80a4c8a:	4629      	mov	r1, r5
 80a4c8c:	4620      	mov	r0, r4
 80a4c8e:	f009 f955 	bl	80adf3c <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a4c92:	2800      	cmp	r0, #0
 80a4c94:	dbe6      	blt.n	80a4c64 <mbedtls_x509_dn_gets+0x54>
 80a4c96:	4285      	cmp	r5, r0
 80a4c98:	d9e4      	bls.n	80a4c64 <mbedtls_x509_dn_gets+0x54>
 80a4c9a:	1a2d      	subs	r5, r5, r0
 80a4c9c:	4404      	add	r4, r0

        for( i = 0; i < name->val.len; i++ )
 80a4c9e:	2300      	movs	r3, #0
 80a4ca0:	6932      	ldr	r2, [r6, #16]
 80a4ca2:	4293      	cmp	r3, r2
 80a4ca4:	d213      	bcs.n	80a4cce <mbedtls_x509_dn_gets+0xbe>
        {
            if( i >= sizeof( s ) - 1 )
 80a4ca6:	2bff      	cmp	r3, #255	; 0xff
 80a4ca8:	d011      	beq.n	80a4cce <mbedtls_x509_dn_gets+0xbe>
                break;

            c = name->val.p[i];
 80a4caa:	6972      	ldr	r2, [r6, #20]
 80a4cac:	5cd2      	ldrb	r2, [r2, r3]
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
 80a4cae:	2a1f      	cmp	r2, #31
 80a4cb0:	d906      	bls.n	80a4cc0 <mbedtls_x509_dn_gets+0xb0>
 80a4cb2:	2a7f      	cmp	r2, #127	; 0x7f
 80a4cb4:	d004      	beq.n	80a4cc0 <mbedtls_x509_dn_gets+0xb0>
 80a4cb6:	f102 017f 	add.w	r1, r2, #127	; 0x7f
 80a4cba:	b2c9      	uxtb	r1, r1
 80a4cbc:	291e      	cmp	r1, #30
 80a4cbe:	d802      	bhi.n	80a4cc6 <mbedtls_x509_dn_gets+0xb6>
                 s[i] = '?';
 80a4cc0:	f808 a003 	strb.w	sl, [r8, r3]
 80a4cc4:	e001      	b.n	80a4cca <mbedtls_x509_dn_gets+0xba>
            else s[i] = c;
 80a4cc6:	f808 2003 	strb.w	r2, [r8, r3]
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
        else
            ret = mbedtls_snprintf( p, n, "\?\?=" );
        MBEDTLS_X509_SAFE_SNPRINTF;

        for( i = 0; i < name->val.len; i++ )
 80a4cca:	3301      	adds	r3, #1
 80a4ccc:	e7e8      	b.n	80a4ca0 <mbedtls_x509_dn_gets+0x90>
            c = name->val.p[i];
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
                 s[i] = '?';
            else s[i] = c;
        }
        s[i] = '\0';
 80a4cce:	2200      	movs	r2, #0
 80a4cd0:	f808 2003 	strb.w	r2, [r8, r3]
        ret = mbedtls_snprintf( p, n, "%s", s );
 80a4cd4:	4629      	mov	r1, r5
 80a4cd6:	4643      	mov	r3, r8
 80a4cd8:	4a0d      	ldr	r2, [pc, #52]	; (80a4d10 <mbedtls_x509_dn_gets+0x100>)
 80a4cda:	4620      	mov	r0, r4
 80a4cdc:	f009 f92e 	bl	80adf3c <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a4ce0:	2800      	cmp	r0, #0
 80a4ce2:	dbbf      	blt.n	80a4c64 <mbedtls_x509_dn_gets+0x54>
 80a4ce4:	4285      	cmp	r5, r0
 80a4ce6:	d9bd      	bls.n	80a4c64 <mbedtls_x509_dn_gets+0x54>

        merge = name->next_merged;
 80a4ce8:	7f32      	ldrb	r2, [r6, #28]
                 s[i] = '?';
            else s[i] = c;
        }
        s[i] = '\0';
        ret = mbedtls_snprintf( p, n, "%s", s );
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a4cea:	1a2d      	subs	r5, r5, r0
 80a4cec:	4404      	add	r4, r0

        merge = name->next_merged;
        name = name->next;
 80a4cee:	69b6      	ldr	r6, [r6, #24]
 80a4cf0:	e7a5      	b.n	80a4c3e <mbedtls_x509_dn_gets+0x2e>
    }

    return( (int) ( size - n ) );
 80a4cf2:	1b78      	subs	r0, r7, r5
}
 80a4cf4:	b042      	add	sp, #264	; 0x108
 80a4cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a4cfa:	bf00      	nop
 80a4cfc:	080b05e0 	.word	0x080b05e0
 80a4d00:	080b05dc 	.word	0x080b05dc
 80a4d04:	ffffd680 	.word	0xffffd680
 80a4d08:	080b05e3 	.word	0x080b05e3
 80a4d0c:	080b05e7 	.word	0x080b05e7
 80a4d10:	080b0a16 	.word	0x080b0a16

080a4d14 <mbedtls_x509_serial_gets>:
/*
 * Store the serial in printable form into buf; no more
 * than size characters will be written
 */
int mbedtls_x509_serial_gets( char *buf, size_t size, const mbedtls_x509_buf *serial )
{
 80a4d14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4d18:	4680      	mov	r8, r0
 80a4d1a:	460f      	mov	r7, r1
 80a4d1c:	4691      	mov	r9, r2
    int ret;
    size_t i, n, nr;
    char *p;

    p = buf;
    n = size;
 80a4d1e:	460c      	mov	r4, r1

    nr = ( serial->len <= 32 )
 80a4d20:	6856      	ldr	r6, [r2, #4]
    for( i = 0; i < nr; i++ )
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
 80a4d22:	f8df a07c 	ldr.w	sl, [pc, #124]	; 80a4da0 <mbedtls_x509_serial_gets+0x8c>

    p = buf;
    n = size;

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;
 80a4d26:	2e21      	cmp	r6, #33	; 0x21
    for( i = 0; i < nr; i++ )
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
 80a4d28:	f8df b078 	ldr.w	fp, [pc, #120]	; 80a4da4 <mbedtls_x509_serial_gets+0x90>

    p = buf;
    n = size;

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;
 80a4d2c:	bf28      	it	cs
 80a4d2e:	261c      	movcs	r6, #28

    for( i = 0; i < nr; i++ )
 80a4d30:	2500      	movs	r5, #0
 80a4d32:	42b5      	cmp	r5, r6
 80a4d34:	d01c      	beq.n	80a4d70 <mbedtls_x509_serial_gets+0x5c>
 80a4d36:	f8d9 3008 	ldr.w	r3, [r9, #8]
    {
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
 80a4d3a:	b91d      	cbnz	r5, 80a4d44 <mbedtls_x509_serial_gets+0x30>
 80a4d3c:	2e01      	cmp	r6, #1
 80a4d3e:	d001      	beq.n	80a4d44 <mbedtls_x509_serial_gets+0x30>
 80a4d40:	781a      	ldrb	r2, [r3, #0]
 80a4d42:	b19a      	cbz	r2, 80a4d6c <mbedtls_x509_serial_gets+0x58>
            continue;

        ret = mbedtls_snprintf( p, n, "%02X%s",
 80a4d44:	1e72      	subs	r2, r6, #1
 80a4d46:	4295      	cmp	r5, r2
 80a4d48:	bf34      	ite	cc
 80a4d4a:	4652      	movcc	r2, sl
 80a4d4c:	465a      	movcs	r2, fp
 80a4d4e:	5d5b      	ldrb	r3, [r3, r5]
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
 80a4d50:	4621      	mov	r1, r4
 80a4d52:	9200      	str	r2, [sp, #0]
 80a4d54:	4640      	mov	r0, r8
 80a4d56:	4a0f      	ldr	r2, [pc, #60]	; (80a4d94 <mbedtls_x509_serial_gets+0x80>)
 80a4d58:	f009 f8f0 	bl	80adf3c <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a4d5c:	2800      	cmp	r0, #0
 80a4d5e:	da01      	bge.n	80a4d64 <mbedtls_x509_serial_gets+0x50>
 80a4d60:	480d      	ldr	r0, [pc, #52]	; (80a4d98 <mbedtls_x509_serial_gets+0x84>)
 80a4d62:	e014      	b.n	80a4d8e <mbedtls_x509_serial_gets+0x7a>
 80a4d64:	4284      	cmp	r4, r0
 80a4d66:	d9fb      	bls.n	80a4d60 <mbedtls_x509_serial_gets+0x4c>
 80a4d68:	1a24      	subs	r4, r4, r0
 80a4d6a:	4480      	add	r8, r0
    n = size;

    nr = ( serial->len <= 32 )
        ? serial->len  : 28;

    for( i = 0; i < nr; i++ )
 80a4d6c:	3501      	adds	r5, #1
 80a4d6e:	e7e0      	b.n	80a4d32 <mbedtls_x509_serial_gets+0x1e>
        ret = mbedtls_snprintf( p, n, "%02X%s",
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
        MBEDTLS_X509_SAFE_SNPRINTF;
    }

    if( nr != serial->len )
 80a4d70:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80a4d74:	429d      	cmp	r5, r3
 80a4d76:	d009      	beq.n	80a4d8c <mbedtls_x509_serial_gets+0x78>
    {
        ret = mbedtls_snprintf( p, n, "...." );
 80a4d78:	4a08      	ldr	r2, [pc, #32]	; (80a4d9c <mbedtls_x509_serial_gets+0x88>)
 80a4d7a:	4621      	mov	r1, r4
 80a4d7c:	4640      	mov	r0, r8
 80a4d7e:	f009 f8dd 	bl	80adf3c <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a4d82:	2800      	cmp	r0, #0
 80a4d84:	dbec      	blt.n	80a4d60 <mbedtls_x509_serial_gets+0x4c>
 80a4d86:	4284      	cmp	r4, r0
 80a4d88:	d9ea      	bls.n	80a4d60 <mbedtls_x509_serial_gets+0x4c>
 80a4d8a:	1a24      	subs	r4, r4, r0
    }

    return( (int) ( size - n ) );
 80a4d8c:	1b38      	subs	r0, r7, r4
}
 80a4d8e:	b003      	add	sp, #12
 80a4d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4d94:	080b05ed 	.word	0x080b05ed
 80a4d98:	ffffd680 	.word	0xffffd680
 80a4d9c:	080b05f4 	.word	0x080b05f4
 80a4da0:	080b05eb 	.word	0x080b05eb
 80a4da4:	080af8c8 	.word	0x080af8c8

080a4da8 <mbedtls_x509_sig_alg_gets>:
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
 80a4da8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;
 80a4daa:	2300      	movs	r3, #0
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
 80a4dac:	460c      	mov	r4, r1
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;
 80a4dae:	a902      	add	r1, sp, #8
 * Helper for writing signature algorithms
 */
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts )
{
 80a4db0:	4605      	mov	r5, r0
    int ret;
    char *p = buf;
    size_t n = size;
    const char *desc = NULL;
 80a4db2:	f841 3d04 	str.w	r3, [r1, #-4]!

    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
 80a4db6:	4610      	mov	r0, r2
 80a4db8:	f7fe fa92 	bl	80a32e0 <mbedtls_oid_get_sig_alg_desc>
    if( ret != 0 )
 80a4dbc:	b128      	cbz	r0, 80a4dca <mbedtls_x509_sig_alg_gets+0x22>
        ret = mbedtls_snprintf( p, n, "???"  );
 80a4dbe:	4a0b      	ldr	r2, [pc, #44]	; (80a4dec <mbedtls_x509_sig_alg_gets+0x44>)
 80a4dc0:	4621      	mov	r1, r4
 80a4dc2:	4628      	mov	r0, r5
 80a4dc4:	f009 f8ba 	bl	80adf3c <snprintf>
 80a4dc8:	e005      	b.n	80a4dd6 <mbedtls_x509_sig_alg_gets+0x2e>
    else
        ret = mbedtls_snprintf( p, n, "%s", desc );
 80a4dca:	9b01      	ldr	r3, [sp, #4]
 80a4dcc:	4a08      	ldr	r2, [pc, #32]	; (80a4df0 <mbedtls_x509_sig_alg_gets+0x48>)
 80a4dce:	4621      	mov	r1, r4
 80a4dd0:	4628      	mov	r0, r5
 80a4dd2:	f009 f8b3 	bl	80adf3c <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a4dd6:	2800      	cmp	r0, #0
 80a4dd8:	db04      	blt.n	80a4de4 <mbedtls_x509_sig_alg_gets+0x3c>
 80a4dda:	4b06      	ldr	r3, [pc, #24]	; (80a4df4 <mbedtls_x509_sig_alg_gets+0x4c>)
 80a4ddc:	4284      	cmp	r4, r0
 80a4dde:	bf98      	it	ls
 80a4de0:	4618      	movls	r0, r3
 80a4de2:	e000      	b.n	80a4de6 <mbedtls_x509_sig_alg_gets+0x3e>
 80a4de4:	4803      	ldr	r0, [pc, #12]	; (80a4df4 <mbedtls_x509_sig_alg_gets+0x4c>)
    ((void) md_alg);
    ((void) sig_opts);
#endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */

    return( (int)( size - n ) );
}
 80a4de6:	b003      	add	sp, #12
 80a4de8:	bd30      	pop	{r4, r5, pc}
 80a4dea:	bf00      	nop
 80a4dec:	080b05f9 	.word	0x080b05f9
 80a4df0:	080b0a16 	.word	0x080b0a16
 80a4df4:	ffffd680 	.word	0xffffd680

080a4df8 <mbedtls_x509_key_size_helper>:

/*
 * Helper for writing "RSA key size", "EC key size", etc
 */
int mbedtls_x509_key_size_helper( char *buf, size_t buf_size, const char *name )
{
 80a4df8:	b510      	push	{r4, lr}
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
 80a4dfa:	4613      	mov	r3, r2
 80a4dfc:	4a06      	ldr	r2, [pc, #24]	; (80a4e18 <mbedtls_x509_key_size_helper+0x20>)

/*
 * Helper for writing "RSA key size", "EC key size", etc
 */
int mbedtls_x509_key_size_helper( char *buf, size_t buf_size, const char *name )
{
 80a4dfe:	460c      	mov	r4, r1
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
 80a4e00:	f009 f89c 	bl	80adf3c <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a4e04:	2800      	cmp	r0, #0
 80a4e06:	db05      	blt.n	80a4e14 <mbedtls_x509_key_size_helper+0x1c>

    return( 0 );
 80a4e08:	4b04      	ldr	r3, [pc, #16]	; (80a4e1c <mbedtls_x509_key_size_helper+0x24>)
 80a4e0a:	4284      	cmp	r4, r0
 80a4e0c:	bf94      	ite	ls
 80a4e0e:	4618      	movls	r0, r3
 80a4e10:	2000      	movhi	r0, #0
 80a4e12:	bd10      	pop	{r4, pc}
    char *p = buf;
    size_t n = buf_size;
    int ret;

    ret = mbedtls_snprintf( p, n, "%s key size", name );
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a4e14:	4801      	ldr	r0, [pc, #4]	; (80a4e1c <mbedtls_x509_key_size_helper+0x24>)

    return( 0 );
}
 80a4e16:	bd10      	pop	{r4, pc}
 80a4e18:	080b05fd 	.word	0x080b05fd
 80a4e1c:	ffffd680 	.word	0xffffd680

080a4e20 <mbedtls_x509_time_is_past>:
 80a4e20:	2000      	movs	r0, #0
 80a4e22:	4770      	bx	lr

080a4e24 <mbedtls_x509_time_is_future>:

int mbedtls_x509_time_is_future( const mbedtls_x509_time *from )
{
    ((void) from);
    return( 0 );
}
 80a4e24:	2000      	movs	r0, #0
 80a4e26:	4770      	bx	lr

080a4e28 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>:
 * Parse a PKCS#1 encoded private RSA key
 */
static int pk_parse_key_pkcs1_der( mbedtls_rsa_context *rsa,
                                   const unsigned char *key,
                                   size_t keylen )
{
 80a4e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a4e2a:	460c      	mov	r4, r1
 80a4e2c:	4615      	mov	r5, r2
 80a4e2e:	b08f      	sub	sp, #60	; 0x3c
 80a4e30:	4607      	mov	r7, r0
    int ret, version;
    size_t len;
    unsigned char *p, *end;

    mbedtls_mpi T;
    mbedtls_mpi_init( &T );
 80a4e32:	a80b      	add	r0, sp, #44	; 0x2c
 80a4e34:	f004 fa1a 	bl	80a926c <mbedtls_mpi_init>
     *      exponent2         INTEGER,  -- d mod (q-1)
     *      coefficient       INTEGER,  -- (inverse of q) mod p
     *      otherPrimeInfos   OtherPrimeInfos OPTIONAL
     *  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a4e38:	2330      	movs	r3, #48	; 0x30
 80a4e3a:	aa09      	add	r2, sp, #36	; 0x24
 80a4e3c:	1961      	adds	r1, r4, r5
 80a4e3e:	a80a      	add	r0, sp, #40	; 0x28
    unsigned char *p, *end;

    mbedtls_mpi T;
    mbedtls_mpi_init( &T );

    p = (unsigned char *) key;
 80a4e40:	940a      	str	r4, [sp, #40]	; 0x28
     *      exponent2         INTEGER,  -- d mod (q-1)
     *      coefficient       INTEGER,  -- (inverse of q) mod p
     *      otherPrimeInfos   OtherPrimeInfos OPTIONAL
     *  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a4e42:	f7fc fdeb 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a4e46:	b940      	cbnz	r0, 80a4e5a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x32>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 80a4e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a4e4a:	9e0a      	ldr	r6, [sp, #40]	; 0x28

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 80a4e4c:	aa08      	add	r2, sp, #32
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 80a4e4e:	441e      	add	r6, r3

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 80a4e50:	4631      	mov	r1, r6
 80a4e52:	a80a      	add	r0, sp, #40	; 0x28
 80a4e54:	f7fc fe0f 	bl	80a1a76 <mbedtls_asn1_get_int>
 80a4e58:	b110      	cbz	r0, 80a4e60 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x38>
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 80a4e5a:	f5a0 5574 	sub.w	r5, r0, #15616	; 0x3d00
 80a4e5e:	e0d4      	b.n	80a500a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
    }

    if( version != 0 )
 80a4e60:	9d08      	ldr	r5, [sp, #32]
 80a4e62:	b9dd      	cbnz	r5, 80a4e9c <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x74>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
    }

    /* Import N */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 80a4e64:	2302      	movs	r3, #2
 80a4e66:	aa09      	add	r2, sp, #36	; 0x24
 80a4e68:	4631      	mov	r1, r6
 80a4e6a:	a80a      	add	r0, sp, #40	; 0x28
 80a4e6c:	f7fc fdd6 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a4e70:	4604      	mov	r4, r0
 80a4e72:	2800      	cmp	r0, #0
 80a4e74:	f040 80c5 	bne.w	80a5002 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 80a4e78:	9006      	str	r0, [sp, #24]
 80a4e7a:	9005      	str	r0, [sp, #20]
 80a4e7c:	9004      	str	r0, [sp, #16]
 80a4e7e:	9003      	str	r0, [sp, #12]
 80a4e80:	9002      	str	r0, [sp, #8]
 80a4e82:	9001      	str	r0, [sp, #4]
 80a4e84:	9000      	str	r0, [sp, #0]
 80a4e86:	4603      	mov	r3, r0
 80a4e88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a4e8a:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a4e8c:	4638      	mov	r0, r7
 80a4e8e:	f7fd f8b3 	bl	80a1ff8 <mbedtls_rsa_import_raw>
 80a4e92:	4604      	mov	r4, r0
 80a4e94:	2800      	cmp	r0, #0
 80a4e96:	f040 80b4 	bne.w	80a5002 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 80a4e9a:	e001      	b.n	80a4ea0 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x78>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    if( version != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
 80a4e9c:	4d5c      	ldr	r5, [pc, #368]	; (80a5010 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e8>)
 80a4e9e:	e0b4      	b.n	80a500a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, p, len, NULL, 0, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 80a4ea0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a4ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 80a4ea4:	4631      	mov	r1, r6
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, p, len, NULL, 0, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 80a4ea6:	4413      	add	r3, r2
 80a4ea8:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 80a4eaa:	aa09      	add	r2, sp, #36	; 0x24
 80a4eac:	2302      	movs	r3, #2
 80a4eae:	a80a      	add	r0, sp, #40	; 0x28
 80a4eb0:	f7fc fdb4 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a4eb4:	4604      	mov	r4, r0
 80a4eb6:	2800      	cmp	r0, #0
 80a4eb8:	f040 80a3 	bne.w	80a5002 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 80a4ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a4ebe:	9404      	str	r4, [sp, #16]
 80a4ec0:	9306      	str	r3, [sp, #24]
 80a4ec2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a4ec4:	9403      	str	r4, [sp, #12]
 80a4ec6:	9305      	str	r3, [sp, #20]
 80a4ec8:	9402      	str	r4, [sp, #8]
 80a4eca:	9401      	str	r4, [sp, #4]
 80a4ecc:	9400      	str	r4, [sp, #0]
 80a4ece:	4623      	mov	r3, r4
 80a4ed0:	4622      	mov	r2, r4
 80a4ed2:	4621      	mov	r1, r4
 80a4ed4:	4638      	mov	r0, r7
 80a4ed6:	f7fd f88f 	bl	80a1ff8 <mbedtls_rsa_import_raw>
 80a4eda:	4604      	mov	r4, r0
 80a4edc:	2800      	cmp	r0, #0
 80a4ede:	f040 8090 	bne.w	80a5002 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        NULL, 0, p, len ) ) != 0 )
        goto cleanup;
    p += len;
 80a4ee2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a4ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Import D */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 80a4ee6:	4631      	mov	r1, r6
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        NULL, 0, p, len ) ) != 0 )
        goto cleanup;
    p += len;
 80a4ee8:	4413      	add	r3, r2
 80a4eea:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import D */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 80a4eec:	aa09      	add	r2, sp, #36	; 0x24
 80a4eee:	2302      	movs	r3, #2
 80a4ef0:	a80a      	add	r0, sp, #40	; 0x28
 80a4ef2:	f7fc fd93 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a4ef6:	4604      	mov	r4, r0
 80a4ef8:	2800      	cmp	r0, #0
 80a4efa:	f040 8082 	bne.w	80a5002 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 80a4efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a4f00:	9406      	str	r4, [sp, #24]
 80a4f02:	9304      	str	r3, [sp, #16]
 80a4f04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a4f06:	9405      	str	r4, [sp, #20]
 80a4f08:	9303      	str	r3, [sp, #12]
 80a4f0a:	9402      	str	r4, [sp, #8]
 80a4f0c:	9401      	str	r4, [sp, #4]
 80a4f0e:	9400      	str	r4, [sp, #0]
 80a4f10:	4623      	mov	r3, r4
 80a4f12:	4622      	mov	r2, r4
 80a4f14:	4621      	mov	r1, r4
 80a4f16:	4638      	mov	r0, r7
 80a4f18:	f7fd f86e 	bl	80a1ff8 <mbedtls_rsa_import_raw>
 80a4f1c:	4604      	mov	r4, r0
 80a4f1e:	2800      	cmp	r0, #0
 80a4f20:	d16f      	bne.n	80a5002 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        p, len, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 80a4f22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a4f24:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Import P */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 80a4f26:	4631      	mov	r1, r6
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        p, len, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 80a4f28:	4413      	add	r3, r2
 80a4f2a:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import P */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 80a4f2c:	aa09      	add	r2, sp, #36	; 0x24
 80a4f2e:	2302      	movs	r3, #2
 80a4f30:	a80a      	add	r0, sp, #40	; 0x28
 80a4f32:	f7fc fd73 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a4f36:	4604      	mov	r4, r0
 80a4f38:	2800      	cmp	r0, #0
 80a4f3a:	d162      	bne.n	80a5002 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 80a4f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a4f3e:	2200      	movs	r2, #0
 80a4f40:	9300      	str	r3, [sp, #0]
 80a4f42:	9206      	str	r2, [sp, #24]
 80a4f44:	9205      	str	r2, [sp, #20]
 80a4f46:	9204      	str	r2, [sp, #16]
 80a4f48:	9203      	str	r2, [sp, #12]
 80a4f4a:	9202      	str	r2, [sp, #8]
 80a4f4c:	9201      	str	r2, [sp, #4]
 80a4f4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a4f50:	4611      	mov	r1, r2
 80a4f52:	4638      	mov	r0, r7
 80a4f54:	f7fd f850 	bl	80a1ff8 <mbedtls_rsa_import_raw>
 80a4f58:	4604      	mov	r4, r0
 80a4f5a:	2800      	cmp	r0, #0
 80a4f5c:	d151      	bne.n	80a5002 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, p, len, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 80a4f5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a4f60:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Import Q */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 80a4f62:	4631      	mov	r1, r6
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, p, len, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 80a4f64:	4413      	add	r3, r2
 80a4f66:	930a      	str	r3, [sp, #40]	; 0x28

    /* Import Q */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
 80a4f68:	aa09      	add	r2, sp, #36	; 0x24
 80a4f6a:	2302      	movs	r3, #2
 80a4f6c:	a80a      	add	r0, sp, #40	; 0x28
 80a4f6e:	f7fc fd55 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a4f72:	4604      	mov	r4, r0
 80a4f74:	2800      	cmp	r0, #0
 80a4f76:	d144      	bne.n	80a5002 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
 80a4f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a4f7a:	9406      	str	r4, [sp, #24]
 80a4f7c:	9302      	str	r3, [sp, #8]
 80a4f7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a4f80:	9405      	str	r4, [sp, #20]
 80a4f82:	9404      	str	r4, [sp, #16]
 80a4f84:	9403      	str	r4, [sp, #12]
 80a4f86:	9301      	str	r3, [sp, #4]
 80a4f88:	9400      	str	r4, [sp, #0]
 80a4f8a:	4623      	mov	r3, r4
 80a4f8c:	4622      	mov	r2, r4
 80a4f8e:	4621      	mov	r1, r4
 80a4f90:	4638      	mov	r0, r7
 80a4f92:	f7fd f831 	bl	80a1ff8 <mbedtls_rsa_import_raw>
 80a4f96:	4604      	mov	r4, r0
 80a4f98:	2800      	cmp	r0, #0
 80a4f9a:	d132      	bne.n	80a5002 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, p, len,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 80a4f9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a4f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24

    /* Complete the RSA private key */
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
 80a4fa0:	4638      	mov	r0, r7
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
                                      MBEDTLS_ASN1_INTEGER ) ) != 0 ||
        ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, p, len,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        goto cleanup;
    p += len;
 80a4fa2:	4413      	add	r3, r2
 80a4fa4:	930a      	str	r3, [sp, #40]	; 0x28

    /* Complete the RSA private key */
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
 80a4fa6:	f7fd f865 	bl	80a2074 <mbedtls_rsa_complete>
 80a4faa:	4604      	mov	r4, r0
 80a4fac:	b9c8      	cbnz	r0, 80a4fe2 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1ba>
        goto cleanup;

    /* Check optional parameters */
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
 80a4fae:	aa0b      	add	r2, sp, #44	; 0x2c
 80a4fb0:	4631      	mov	r1, r6
 80a4fb2:	a80a      	add	r0, sp, #40	; 0x28
 80a4fb4:	f7fc fd83 	bl	80a1abe <mbedtls_asn1_get_mpi>
 80a4fb8:	4604      	mov	r4, r0
 80a4fba:	bb10      	cbnz	r0, 80a5002 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
    /* Complete the RSA private key */
    if( ( ret = mbedtls_rsa_complete( rsa ) ) != 0 )
        goto cleanup;

    /* Check optional parameters */
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
 80a4fbc:	aa0b      	add	r2, sp, #44	; 0x2c
 80a4fbe:	4631      	mov	r1, r6
 80a4fc0:	a80a      	add	r0, sp, #40	; 0x28
 80a4fc2:	f7fc fd7c 	bl	80a1abe <mbedtls_asn1_get_mpi>
 80a4fc6:	4604      	mov	r4, r0
 80a4fc8:	b9d8      	cbnz	r0, 80a5002 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &T ) ) != 0 ||
 80a4fca:	aa0b      	add	r2, sp, #44	; 0x2c
 80a4fcc:	4631      	mov	r1, r6
 80a4fce:	a80a      	add	r0, sp, #40	; 0x28
 80a4fd0:	f7fc fd75 	bl	80a1abe <mbedtls_asn1_get_mpi>
 80a4fd4:	4604      	mov	r4, r0
 80a4fd6:	b9a0      	cbnz	r0, 80a5002 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1da>
        goto cleanup;

    if( p != end )
    {
        ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH ;
 80a4fd8:	4b0e      	ldr	r3, [pc, #56]	; (80a5014 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1ec>)
 80a4fda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a4fdc:	4296      	cmp	r6, r2
 80a4fde:	bf18      	it	ne
 80a4fe0:	461c      	movne	r4, r3
    }

cleanup:

    mbedtls_mpi_free( &T );
 80a4fe2:	a80b      	add	r0, sp, #44	; 0x2c
 80a4fe4:	f004 f949 	bl	80a927a <mbedtls_mpi_free>

    if( ret != 0 )
 80a4fe8:	b17c      	cbz	r4, 80a500a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
    {
        /* Wrap error code if it's coming from a lower level */
        if( ( ret & 0xff80 ) == 0 )
 80a4fea:	f64f 7380 	movw	r3, #65408	; 0xff80
 80a4fee:	4023      	ands	r3, r4
 80a4ff0:	b913      	cbnz	r3, 80a4ff8 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1d0>
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret;
 80a4ff2:	f5a4 5574 	sub.w	r5, r4, #15616	; 0x3d00
 80a4ff6:	e000      	b.n	80a4ffa <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1d2>
        else
            ret = MBEDTLS_ERR_PK_KEY_INVALID_FORMAT;
 80a4ff8:	4d07      	ldr	r5, [pc, #28]	; (80a5018 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1f0>)

        mbedtls_rsa_free( rsa );
 80a4ffa:	4638      	mov	r0, r7
 80a4ffc:	f7fe f8d4 	bl	80a31a8 <mbedtls_rsa_free>
 80a5000:	e003      	b.n	80a500a <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1e2>
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH ;
    }

cleanup:

    mbedtls_mpi_free( &T );
 80a5002:	a80b      	add	r0, sp, #44	; 0x2c
 80a5004:	f004 f939 	bl	80a927a <mbedtls_mpi_free>
 80a5008:	e7ef      	b.n	80a4fea <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj+0x1c2>

        mbedtls_rsa_free( rsa );
    }

    return( ret );
}
 80a500a:	4628      	mov	r0, r5
 80a500c:	b00f      	add	sp, #60	; 0x3c
 80a500e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a5010:	ffffc280 	.word	0xffffc280
 80a5014:	ffffc29a 	.word	0xffffc29a
 80a5018:	ffffc300 	.word	0xffffc300

080a501c <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>:
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */
static int pk_get_pk_alg( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_pk_type_t *pk_alg, mbedtls_asn1_buf *params )
{
 80a501c:	b530      	push	{r4, r5, lr}
 80a501e:	4615      	mov	r5, r2
 80a5020:	b085      	sub	sp, #20
    int ret;
    mbedtls_asn1_buf alg_oid;

    memset( params, 0, sizeof(mbedtls_asn1_buf) );
 80a5022:	2200      	movs	r2, #0
 80a5024:	601a      	str	r2, [r3, #0]
 80a5026:	605a      	str	r2, [r3, #4]
 80a5028:	609a      	str	r2, [r3, #8]

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 80a502a:	aa01      	add	r2, sp, #4
 *       parameters              ANY DEFINED BY algorithm OPTIONAL  }
 */
static int pk_get_pk_alg( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_pk_type_t *pk_alg, mbedtls_asn1_buf *params )
{
 80a502c:	461c      	mov	r4, r3
    int ret;
    mbedtls_asn1_buf alg_oid;

    memset( params, 0, sizeof(mbedtls_asn1_buf) );

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 80a502e:	f7fc fdce 	bl	80a1bce <mbedtls_asn1_get_alg>
 80a5032:	b110      	cbz	r0, 80a503a <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x1e>
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );
 80a5034:	f5a0 506a 	sub.w	r0, r0, #14976	; 0x3a80
 80a5038:	e014      	b.n	80a5064 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>

    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
 80a503a:	4629      	mov	r1, r5
 80a503c:	a801      	add	r0, sp, #4
 80a503e:	f7fe f96b 	bl	80a3318 <mbedtls_oid_get_pk_alg>
 80a5042:	b960      	cbnz	r0, 80a505e <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x42>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    /*
     * No parameters with RSA (only for EC)
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
 80a5044:	782b      	ldrb	r3, [r5, #0]
 80a5046:	2b01      	cmp	r3, #1
 80a5048:	d10c      	bne.n	80a5064 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 80a504a:	6823      	ldr	r3, [r4, #0]
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    /*
     * No parameters with RSA (only for EC)
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
 80a504c:	2b05      	cmp	r3, #5
 80a504e:	d000      	beq.n	80a5052 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x36>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 80a5050:	b93b      	cbnz	r3, 80a5062 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x46>
 80a5052:	6863      	ldr	r3, [r4, #4]
                params->len != 0 ) )
    {
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 80a5054:	4804      	ldr	r0, [pc, #16]	; (80a5068 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x4c>)
 80a5056:	2b00      	cmp	r3, #0
 80a5058:	bf08      	it	eq
 80a505a:	2000      	moveq	r0, #0
 80a505c:	e002      	b.n	80a5064 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>

    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );

    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 80a505e:	4803      	ldr	r0, [pc, #12]	; (80a506c <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x50>)
 80a5060:	e000      	b.n	80a5064 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x48>
     */
    if( *pk_alg == MBEDTLS_PK_RSA &&
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
                params->len != 0 ) )
    {
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 80a5062:	4801      	ldr	r0, [pc, #4]	; (80a5068 <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf+0x4c>)
    }

    return( 0 );
}
 80a5064:	b005      	add	sp, #20
 80a5066:	bd30      	pop	{r4, r5, pc}
 80a5068:	ffffc580 	.word	0xffffc580
 80a506c:	ffffc380 	.word	0xffffc380

080a5070 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>:
 */
static int pk_parse_key_pkcs8_unencrypted_der(
                                    mbedtls_pk_context *pk,
                                    const unsigned char* key,
                                    size_t keylen )
{
 80a5070:	b530      	push	{r4, r5, lr}
    int ret, version;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
    unsigned char *end = p + keylen;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 80a5072:	2300      	movs	r3, #0
 */
static int pk_parse_key_pkcs8_unencrypted_der(
                                    mbedtls_pk_context *pk,
                                    const unsigned char* key,
                                    size_t keylen )
{
 80a5074:	b089      	sub	sp, #36	; 0x24
 80a5076:	4605      	mov	r5, r0
    int ret, version;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
 80a5078:	9104      	str	r1, [sp, #16]
    unsigned char *end = p + keylen;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 80a507a:	f88d 3007 	strb.w	r3, [sp, #7]
     *    PrivateKey ::= OCTET STRING
     *
     *  The PrivateKey OCTET STRING is a SEC1 ECPrivateKey
     */

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a507e:	4411      	add	r1, r2
 80a5080:	2330      	movs	r3, #48	; 0x30
 80a5082:	aa03      	add	r2, sp, #12
 80a5084:	a804      	add	r0, sp, #16
 80a5086:	f7fc fcc9 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a508a:	b9c8      	cbnz	r0, 80a50c0 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x50>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 80a508c:	9b03      	ldr	r3, [sp, #12]
 80a508e:	9c04      	ldr	r4, [sp, #16]

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 80a5090:	aa02      	add	r2, sp, #8
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 80a5092:	441c      	add	r4, r3

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 80a5094:	4621      	mov	r1, r4
 80a5096:	a804      	add	r0, sp, #16
 80a5098:	f7fc fced 	bl	80a1a76 <mbedtls_asn1_get_int>
 80a509c:	b980      	cbnz	r0, 80a50c0 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x50>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( version != 0 )
 80a509e:	9b02      	ldr	r3, [sp, #8]
 80a50a0:	bb7b      	cbnz	r3, 80a5102 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x92>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION + ret );

    if( ( ret = pk_get_pk_alg( &p, end, &pk_alg, &params ) ) != 0 )
 80a50a2:	ab05      	add	r3, sp, #20
 80a50a4:	f10d 0207 	add.w	r2, sp, #7
 80a50a8:	4621      	mov	r1, r4
 80a50aa:	a804      	add	r0, sp, #16
 80a50ac:	f7ff ffb6 	bl	80a501c <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>
 80a50b0:	b930      	cbnz	r0, 80a50c0 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x50>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 80a50b2:	2304      	movs	r3, #4
 80a50b4:	aa03      	add	r2, sp, #12
 80a50b6:	4621      	mov	r1, r4
 80a50b8:	a804      	add	r0, sp, #16
 80a50ba:	f7fc fcaf 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a50be:	b110      	cbz	r0, 80a50c6 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x56>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 80a50c0:	f5a0 5074 	sub.w	r0, r0, #15616	; 0x3d00
 80a50c4:	e022      	b.n	80a510c <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>

    if( len < 1 )
 80a50c6:	9b03      	ldr	r3, [sp, #12]
 80a50c8:	b1eb      	cbz	r3, 80a5106 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x96>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 80a50ca:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a50ce:	f005 fb3f 	bl	80aa750 <mbedtls_pk_info_from_type>
 80a50d2:	4601      	mov	r1, r0
 80a50d4:	b908      	cbnz	r0, 80a50da <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x6a>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 80a50d6:	480e      	ldr	r0, [pc, #56]	; (80a5110 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xa0>)
 80a50d8:	e018      	b.n	80a510c <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>

    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 80a50da:	4628      	mov	r0, r5
 80a50dc:	f005 fb40 	bl	80aa760 <mbedtls_pk_setup>
 80a50e0:	b9a0      	cbnz	r0, 80a510c <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>
        return( ret );

#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA )
 80a50e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a50e6:	2b01      	cmp	r3, #1
 80a50e8:	d1f5      	bne.n	80a50d6 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x66>
    {
        if( ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), p, len ) ) != 0 )
 80a50ea:	9a03      	ldr	r2, [sp, #12]
 80a50ec:	9904      	ldr	r1, [sp, #16]
 80a50ee:	6868      	ldr	r0, [r5, #4]
 80a50f0:	f7ff fe9a 	bl	80a4e28 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
 80a50f4:	4604      	mov	r4, r0
 80a50f6:	b140      	cbz	r0, 80a510a <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9a>
        {
            mbedtls_pk_free( pk );
 80a50f8:	4628      	mov	r0, r5
 80a50fa:	f005 fb18 	bl	80aa72e <mbedtls_pk_free>
            return( ret );
 80a50fe:	4620      	mov	r0, r4
 80a5100:	e004      	b.n	80a510c <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>

    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( version != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION + ret );
 80a5102:	4804      	ldr	r0, [pc, #16]	; (80a5114 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xa4>)
 80a5104:	e002      	b.n	80a510c <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( len < 1 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80a5106:	4804      	ldr	r0, [pc, #16]	; (80a5118 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0xa8>)
 80a5108:	e000      	b.n	80a510c <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj+0x9c>
        }
    } else
#endif /* MBEDTLS_ECP_C */
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    return( 0 );
 80a510a:	2000      	movs	r0, #0
}
 80a510c:	b009      	add	sp, #36	; 0x24
 80a510e:	bd30      	pop	{r4, r5, pc}
 80a5110:	ffffc380 	.word	0xffffc380
 80a5114:	ffffc280 	.word	0xffffc280
 80a5118:	ffffc2a0 	.word	0xffffc2a0

080a511c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>:
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
static int pk_parse_key_pkcs8_encrypted_der(
                                    mbedtls_pk_context *pk,
                                    unsigned char *key, size_t keylen,
                                    const unsigned char *pwd, size_t pwdlen )
{
 80a511c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a511e:	b091      	sub	sp, #68	; 0x44
 80a5120:	9e16      	ldr	r6, [sp, #88]	; 0x58
#if defined(MBEDTLS_PKCS12_C)
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_md_type_t md_alg;
#endif

    p = key;
 80a5122:	9109      	str	r1, [sp, #36]	; 0x24
#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
static int pk_parse_key_pkcs8_encrypted_der(
                                    mbedtls_pk_context *pk,
                                    unsigned char *key, size_t keylen,
                                    const unsigned char *pwd, size_t pwdlen )
{
 80a5124:	4605      	mov	r5, r0
 80a5126:	461f      	mov	r7, r3
    mbedtls_cipher_type_t cipher_alg;
    mbedtls_md_type_t md_alg;
#endif

    p = key;
    end = p + keylen;
 80a5128:	4411      	add	r1, r2

    if( pwdlen == 0 )
 80a512a:	2e00      	cmp	r6, #0
 80a512c:	d066      	beq.n	80a51fc <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe0>
     *  EncryptedData ::= OCTET STRING
     *
     *  The EncryptedData OCTET STRING is a PKCS#8 PrivateKeyInfo
     *
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a512e:	2330      	movs	r3, #48	; 0x30
 80a5130:	aa08      	add	r2, sp, #32
 80a5132:	a809      	add	r0, sp, #36	; 0x24
 80a5134:	f7fc fc72 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a5138:	b980      	cbnz	r0, 80a515c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x40>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 80a513a:	9b08      	ldr	r3, [sp, #32]
 80a513c:	9c09      	ldr	r4, [sp, #36]	; 0x24

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &pbe_alg_oid, &pbe_params ) ) != 0 )
 80a513e:	aa0a      	add	r2, sp, #40	; 0x28
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = p + len;
 80a5140:	441c      	add	r4, r3

    if( ( ret = mbedtls_asn1_get_alg( &p, end, &pbe_alg_oid, &pbe_params ) ) != 0 )
 80a5142:	4621      	mov	r1, r4
 80a5144:	ab0d      	add	r3, sp, #52	; 0x34
 80a5146:	a809      	add	r0, sp, #36	; 0x24
 80a5148:	f7fc fd41 	bl	80a1bce <mbedtls_asn1_get_alg>
 80a514c:	b930      	cbnz	r0, 80a515c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x40>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 80a514e:	2304      	movs	r3, #4
 80a5150:	aa08      	add	r2, sp, #32
 80a5152:	4621      	mov	r1, r4
 80a5154:	a809      	add	r0, sp, #36	; 0x24
 80a5156:	f7fc fc61 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a515a:	b110      	cbz	r0, 80a5162 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x46>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 80a515c:	f5a0 5074 	sub.w	r0, r0, #15616	; 0x3d00
 80a5160:	e055      	b.n	80a520e <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>

    /*
     * Decrypt EncryptedData with appropriate PBE
     */
#if defined(MBEDTLS_PKCS12_C)
    if( mbedtls_oid_get_pkcs12_pbe_alg( &pbe_alg_oid, &md_alg, &cipher_alg ) == 0 )
 80a5162:	f10d 011f 	add.w	r1, sp, #31
 80a5166:	f10d 021e 	add.w	r2, sp, #30
 80a516a:	a80a      	add	r0, sp, #40	; 0x28
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    buf = p;
 80a516c:	9c09      	ldr	r4, [sp, #36]	; 0x24

    /*
     * Decrypt EncryptedData with appropriate PBE
     */
#if defined(MBEDTLS_PKCS12_C)
    if( mbedtls_oid_get_pkcs12_pbe_alg( &pbe_alg_oid, &md_alg, &cipher_alg ) == 0 )
 80a516e:	f7fe f935 	bl	80a33dc <mbedtls_oid_get_pkcs12_pbe_alg>
 80a5172:	4601      	mov	r1, r0
 80a5174:	b9a0      	cbnz	r0, 80a51a0 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x84>
    {
        if( ( ret = mbedtls_pkcs12_pbe( &pbe_params, MBEDTLS_PKCS12_PBE_DECRYPT,
 80a5176:	9808      	ldr	r0, [sp, #32]
 80a5178:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80a517c:	9003      	str	r0, [sp, #12]
 80a517e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80a5180:	f89d 201e 	ldrb.w	r2, [sp, #30]
 80a5184:	9002      	str	r0, [sp, #8]
 80a5186:	9404      	str	r4, [sp, #16]
 80a5188:	9601      	str	r6, [sp, #4]
 80a518a:	9700      	str	r7, [sp, #0]
 80a518c:	a80d      	add	r0, sp, #52	; 0x34
 80a518e:	f006 fb0b 	bl	80ab7a8 <mbedtls_pkcs12_pbe>
 80a5192:	2800      	cmp	r0, #0
 80a5194:	d036      	beq.n	80a5204 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe8>
                                cipher_alg, md_alg,
                                pwd, pwdlen, p, len, buf ) ) != 0 )
        {
            if( ret == MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH )
 80a5196:	f510 5ff0 	cmn.w	r0, #7680	; 0x1e00
 80a519a:	d138      	bne.n	80a520e <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
                return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
 80a519c:	481d      	ldr	r0, [pc, #116]	; (80a5214 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf8>)
 80a519e:	e036      	b.n	80a520e <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
            return( ret );
        }

        decrypted = 1;
    }
    else if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS12_PBE_SHA1_RC4_128, &pbe_alg_oid ) == 0 )
 80a51a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a51a2:	2a0a      	cmp	r2, #10
 80a51a4:	d114      	bne.n	80a51d0 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xb4>
 80a51a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80a51a8:	481b      	ldr	r0, [pc, #108]	; (80a5218 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xfc>)
 80a51aa:	f009 ff93 	bl	80af0d4 <memcmp>
 80a51ae:	4601      	mov	r1, r0
 80a51b0:	bb30      	cbnz	r0, 80a5200 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe4>
    {
        if( ( ret = mbedtls_pkcs12_pbe_sha1_rc4_128( &pbe_params,
 80a51b2:	9b08      	ldr	r3, [sp, #32]
 80a51b4:	9402      	str	r4, [sp, #8]
 80a51b6:	9301      	str	r3, [sp, #4]
 80a51b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a51ba:	463a      	mov	r2, r7
 80a51bc:	9300      	str	r3, [sp, #0]
 80a51be:	a80d      	add	r0, sp, #52	; 0x34
 80a51c0:	4633      	mov	r3, r6
 80a51c2:	f006 fa13 	bl	80ab5ec <mbedtls_pkcs12_pbe_sha1_rc4_128>
 80a51c6:	bb10      	cbnz	r0, 80a520e <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
        }

        // Best guess for password mismatch when using RC4. If first tag is
        // not MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE
        //
        if( *buf != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 80a51c8:	7823      	ldrb	r3, [r4, #0]
 80a51ca:	2b30      	cmp	r3, #48	; 0x30
 80a51cc:	d01a      	beq.n	80a5204 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe8>
 80a51ce:	e7e5      	b.n	80a519c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x80>
        decrypted = 1;
    }
    else
#endif /* MBEDTLS_PKCS12_C */
#if defined(MBEDTLS_PKCS5_C)
    if( MBEDTLS_OID_CMP( MBEDTLS_OID_PKCS5_PBES2, &pbe_alg_oid ) == 0 )
 80a51d0:	2a09      	cmp	r2, #9
 80a51d2:	d115      	bne.n	80a5200 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe4>
 80a51d4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80a51d6:	4811      	ldr	r0, [pc, #68]	; (80a521c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x100>)
 80a51d8:	f009 ff7c 	bl	80af0d4 <memcmp>
 80a51dc:	4601      	mov	r1, r0
 80a51de:	b978      	cbnz	r0, 80a5200 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe4>
    {
        if( ( ret = mbedtls_pkcs5_pbes2( &pbe_params, MBEDTLS_PKCS5_DECRYPT, pwd, pwdlen,
 80a51e0:	9b08      	ldr	r3, [sp, #32]
 80a51e2:	9402      	str	r4, [sp, #8]
 80a51e4:	9301      	str	r3, [sp, #4]
 80a51e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a51e8:	463a      	mov	r2, r7
 80a51ea:	9300      	str	r3, [sp, #0]
 80a51ec:	a80d      	add	r0, sp, #52	; 0x34
 80a51ee:	4633      	mov	r3, r6
 80a51f0:	f7fc f956 	bl	80a14a0 <mbedtls_pkcs5_pbes2>
 80a51f4:	b130      	cbz	r0, 80a5204 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xe8>
                                  p, len, buf ) ) != 0 )
        {
            if( ret == MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH )
 80a51f6:	f510 5f38 	cmn.w	r0, #11776	; 0x2e00
 80a51fa:	e7ce      	b.n	80a519a <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x7e>

    p = key;
    end = p + keylen;

    if( pwdlen == 0 )
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
 80a51fc:	4808      	ldr	r0, [pc, #32]	; (80a5220 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x104>)
 80a51fe:	e006      	b.n	80a520e <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>
    {
        ((void) pwd);
    }

    if( decrypted == 0 )
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
 80a5200:	4808      	ldr	r0, [pc, #32]	; (80a5224 <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0x108>)
 80a5202:	e004      	b.n	80a520e <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj+0xf2>

    return( pk_parse_key_pkcs8_unencrypted_der( pk, buf, len ) );
 80a5204:	9a08      	ldr	r2, [sp, #32]
 80a5206:	4621      	mov	r1, r4
 80a5208:	4628      	mov	r0, r5
 80a520a:	f7ff ff31 	bl	80a5070 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
}
 80a520e:	b011      	add	sp, #68	; 0x44
 80a5210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a5212:	bf00      	nop
 80a5214:	ffffc480 	.word	0xffffc480
 80a5218:	080b0609 	.word	0x080b0609
 80a521c:	080b0614 	.word	0x080b0614
 80a5220:	ffffc400 	.word	0xffffc400
 80a5224:	ffffc680 	.word	0xffffc680

080a5228 <mbedtls_pk_parse_subpubkey>:
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
 80a5228:	b5f0      	push	{r4, r5, r6, r7, lr}
    int ret;
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 80a522a:	2300      	movs	r3, #0
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
 80a522c:	b08f      	sub	sp, #60	; 0x3c
 80a522e:	4617      	mov	r7, r2
    int ret;
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 80a5230:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    const mbedtls_pk_info_t *pk_info;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a5234:	aa09      	add	r2, sp, #36	; 0x24
 80a5236:	2330      	movs	r3, #48	; 0x30
 *       algorithm            AlgorithmIdentifier,
 *       subjectPublicKey     BIT STRING }
 */
int mbedtls_pk_parse_subpubkey( unsigned char **p, const unsigned char *end,
                        mbedtls_pk_context *pk )
{
 80a5238:	4605      	mov	r5, r0
    size_t len;
    mbedtls_asn1_buf alg_params;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
    const mbedtls_pk_info_t *pk_info;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a523a:	f7fc fbef 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a523e:	b110      	cbz	r0, 80a5246 <mbedtls_pk_parse_subpubkey+0x1e>
                    MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 80a5240:	f5a0 5074 	sub.w	r0, r0, #15616	; 0x3d00
 80a5244:	e090      	b.n	80a5368 <mbedtls_pk_parse_subpubkey+0x140>
    }

    end = *p + len;
 80a5246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a5248:	682e      	ldr	r6, [r5, #0]

    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
 80a524a:	f10d 0223 	add.w	r2, sp, #35	; 0x23
                    MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
    }

    end = *p + len;
 80a524e:	441e      	add	r6, r3

    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
 80a5250:	4631      	mov	r1, r6
 80a5252:	ab0b      	add	r3, sp, #44	; 0x2c
 80a5254:	4628      	mov	r0, r5
 80a5256:	f7ff fee1 	bl	80a501c <_ZL13pk_get_pk_algPPhPKhP17mbedtls_pk_type_tP16mbedtls_asn1_buf>
 80a525a:	2800      	cmp	r0, #0
 80a525c:	f040 8084 	bne.w	80a5368 <mbedtls_pk_parse_subpubkey+0x140>
        return( ret );

    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 80a5260:	aa09      	add	r2, sp, #36	; 0x24
 80a5262:	4631      	mov	r1, r6
 80a5264:	4628      	mov	r0, r5
 80a5266:	f7fc fc62 	bl	80a1b2e <mbedtls_asn1_get_bitstring_null>
 80a526a:	b110      	cbz	r0, 80a5272 <mbedtls_pk_parse_subpubkey+0x4a>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 80a526c:	f5a0 506c 	sub.w	r0, r0, #15104	; 0x3b00
 80a5270:	e07a      	b.n	80a5368 <mbedtls_pk_parse_subpubkey+0x140>

    if( *p + len != end )
 80a5272:	682a      	ldr	r2, [r5, #0]
 80a5274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a5276:	4413      	add	r3, r2
 80a5278:	429e      	cmp	r6, r3
 80a527a:	d169      	bne.n	80a5350 <mbedtls_pk_parse_subpubkey+0x128>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 80a527c:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
 80a5280:	f005 fa66 	bl	80aa750 <mbedtls_pk_info_from_type>
 80a5284:	4601      	mov	r1, r0
 80a5286:	2800      	cmp	r0, #0
 80a5288:	d064      	beq.n	80a5354 <mbedtls_pk_parse_subpubkey+0x12c>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 80a528a:	4638      	mov	r0, r7
 80a528c:	f005 fa68 	bl	80aa760 <mbedtls_pk_setup>
 80a5290:	4604      	mov	r4, r0
 80a5292:	2800      	cmp	r0, #0
 80a5294:	d160      	bne.n	80a5358 <mbedtls_pk_parse_subpubkey+0x130>
        return( ret );

#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA )
 80a5296:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80a529a:	2b01      	cmp	r3, #1
 80a529c:	d162      	bne.n	80a5364 <mbedtls_pk_parse_subpubkey+0x13c>
                             mbedtls_rsa_context *rsa )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a529e:	2330      	movs	r3, #48	; 0x30
 80a52a0:	aa0a      	add	r2, sp, #40	; 0x28
 80a52a2:	4631      	mov	r1, r6
 80a52a4:	4628      	mov	r0, r5
 80a52a6:	687c      	ldr	r4, [r7, #4]
 80a52a8:	f7fc fbb8 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a52ac:	bb28      	cbnz	r0, 80a52fa <mbedtls_pk_parse_subpubkey+0xd2>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( *p + len != end )
 80a52ae:	682a      	ldr	r2, [r5, #0]
 80a52b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a52b2:	4413      	add	r3, r2
 80a52b4:	429e      	cmp	r6, r3
 80a52b6:	d146      	bne.n	80a5346 <mbedtls_pk_parse_subpubkey+0x11e>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    /* Import N */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80a52b8:	2302      	movs	r3, #2
 80a52ba:	aa0a      	add	r2, sp, #40	; 0x28
 80a52bc:	4631      	mov	r1, r6
 80a52be:	4628      	mov	r0, r5
 80a52c0:	f7fc fbac 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a52c4:	b9c8      	cbnz	r0, 80a52fa <mbedtls_pk_parse_subpubkey+0xd2>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( ( ret = mbedtls_rsa_import_raw( rsa, *p, len, NULL, 0, NULL, 0,
 80a52c6:	2300      	movs	r3, #0
 80a52c8:	9306      	str	r3, [sp, #24]
 80a52ca:	9305      	str	r3, [sp, #20]
 80a52cc:	9304      	str	r3, [sp, #16]
 80a52ce:	9303      	str	r3, [sp, #12]
 80a52d0:	9302      	str	r3, [sp, #8]
 80a52d2:	9301      	str	r3, [sp, #4]
 80a52d4:	9300      	str	r3, [sp, #0]
 80a52d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a52d8:	6829      	ldr	r1, [r5, #0]
 80a52da:	4620      	mov	r0, r4
 80a52dc:	f7fc fe8c 	bl	80a1ff8 <mbedtls_rsa_import_raw>
 80a52e0:	2800      	cmp	r0, #0
 80a52e2:	d13d      	bne.n	80a5360 <mbedtls_pk_parse_subpubkey+0x138>
                                        NULL, 0, NULL, 0 ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
 80a52e4:	682a      	ldr	r2, [r5, #0]
 80a52e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80a52e8:	4631      	mov	r1, r6

    if( ( ret = mbedtls_rsa_import_raw( rsa, *p, len, NULL, 0, NULL, 0,
                                        NULL, 0, NULL, 0 ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
 80a52ea:	4413      	add	r3, r2
 80a52ec:	602b      	str	r3, [r5, #0]

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 80a52ee:	aa0a      	add	r2, sp, #40	; 0x28
 80a52f0:	2302      	movs	r3, #2
 80a52f2:	4628      	mov	r0, r5
 80a52f4:	f7fc fb92 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a52f8:	b118      	cbz	r0, 80a5302 <mbedtls_pk_parse_subpubkey+0xda>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 80a52fa:	f5a0 546c 	sub.w	r4, r0, #15104	; 0x3b00
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;

    if( ret == 0 && *p != end )
 80a52fe:	b1fc      	cbz	r4, 80a5340 <mbedtls_pk_parse_subpubkey+0x118>
 80a5300:	e022      	b.n	80a5348 <mbedtls_pk_parse_subpubkey+0x120>

    /* Import E */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
 80a5302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5304:	9004      	str	r0, [sp, #16]
 80a5306:	9306      	str	r3, [sp, #24]
 80a5308:	682b      	ldr	r3, [r5, #0]
 80a530a:	9003      	str	r0, [sp, #12]
 80a530c:	9305      	str	r3, [sp, #20]
 80a530e:	9002      	str	r0, [sp, #8]
 80a5310:	9001      	str	r0, [sp, #4]
 80a5312:	9000      	str	r0, [sp, #0]
 80a5314:	4603      	mov	r3, r0
 80a5316:	4602      	mov	r2, r0
 80a5318:	4601      	mov	r1, r0
 80a531a:	4620      	mov	r0, r4
 80a531c:	f7fc fe6c 	bl	80a1ff8 <mbedtls_rsa_import_raw>
 80a5320:	b9f0      	cbnz	r0, 80a5360 <mbedtls_pk_parse_subpubkey+0x138>
                                        NULL, 0, *p, len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
 80a5322:	682a      	ldr	r2, [r5, #0]
 80a5324:	9b0a      	ldr	r3, [sp, #40]	; 0x28

    if( mbedtls_rsa_complete( rsa ) != 0 ||
 80a5326:	4620      	mov	r0, r4

    if( ( ret = mbedtls_rsa_import_raw( rsa, NULL, 0, NULL, 0, NULL, 0,
                                        NULL, 0, *p, len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;
 80a5328:	4413      	add	r3, r2
 80a532a:	602b      	str	r3, [r5, #0]

    if( mbedtls_rsa_complete( rsa ) != 0 ||
 80a532c:	f7fc fea2 	bl	80a2074 <mbedtls_rsa_complete>
 80a5330:	b9b0      	cbnz	r0, 80a5360 <mbedtls_pk_parse_subpubkey+0x138>
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
 80a5332:	4620      	mov	r0, r4
 80a5334:	f7fc ff5a 	bl	80a21ec <mbedtls_rsa_check_pubkey>
                                        NULL, 0, *p, len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );

    *p += len;

    if( mbedtls_rsa_complete( rsa ) != 0 ||
 80a5338:	b990      	cbnz	r0, 80a5360 <mbedtls_pk_parse_subpubkey+0x138>
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
    {
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
    }

    if( *p != end )
 80a533a:	682b      	ldr	r3, [r5, #0]
 80a533c:	429e      	cmp	r6, r3
 80a533e:	d102      	bne.n	80a5346 <mbedtls_pk_parse_subpubkey+0x11e>
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;

    if( ret == 0 && *p != end )
 80a5340:	682b      	ldr	r3, [r5, #0]
 80a5342:	429e      	cmp	r6, r3
 80a5344:	d00a      	beq.n	80a535c <mbedtls_pk_parse_subpubkey+0x134>
        ret = MBEDTLS_ERR_PK_INVALID_PUBKEY
              MBEDTLS_ERR_ASN1_LENGTH_MISMATCH;
 80a5346:	4c09      	ldr	r4, [pc, #36]	; (80a536c <mbedtls_pk_parse_subpubkey+0x144>)

    if( ret != 0 )
        mbedtls_pk_free( pk );
 80a5348:	4638      	mov	r0, r7
 80a534a:	f005 f9f0 	bl	80aa72e <mbedtls_pk_free>
 80a534e:	e003      	b.n	80a5358 <mbedtls_pk_parse_subpubkey+0x130>
    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );

    if( *p + len != end )
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80a5350:	4806      	ldr	r0, [pc, #24]	; (80a536c <mbedtls_pk_parse_subpubkey+0x144>)
 80a5352:	e009      	b.n	80a5368 <mbedtls_pk_parse_subpubkey+0x140>

    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 80a5354:	4806      	ldr	r0, [pc, #24]	; (80a5370 <mbedtls_pk_parse_subpubkey+0x148>)
 80a5356:	e007      	b.n	80a5368 <mbedtls_pk_parse_subpubkey+0x140>
 80a5358:	4620      	mov	r0, r4
 80a535a:	e005      	b.n	80a5368 <mbedtls_pk_parse_subpubkey+0x140>
 80a535c:	2000      	movs	r0, #0
 80a535e:	e003      	b.n	80a5368 <mbedtls_pk_parse_subpubkey+0x140>
    *p += len;

    if( mbedtls_rsa_complete( rsa ) != 0 ||
        mbedtls_rsa_check_pubkey( rsa ) != 0 )
    {
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
 80a5360:	4c04      	ldr	r4, [pc, #16]	; (80a5374 <mbedtls_pk_parse_subpubkey+0x14c>)
 80a5362:	e7f1      	b.n	80a5348 <mbedtls_pk_parse_subpubkey+0x120>
        ret = pk_use_ecparams( &alg_params, &mbedtls_pk_ec( *pk )->grp );
        if( ret == 0 )
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
    } else
#endif /* MBEDTLS_ECP_C */
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;
 80a5364:	4c02      	ldr	r4, [pc, #8]	; (80a5370 <mbedtls_pk_parse_subpubkey+0x148>)
 80a5366:	e7ef      	b.n	80a5348 <mbedtls_pk_parse_subpubkey+0x120>

    if( ret != 0 )
        mbedtls_pk_free( pk );

    return( ret );
}
 80a5368:	b00f      	add	sp, #60	; 0x3c
 80a536a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a536c:	ffffc49a 	.word	0xffffc49a
 80a5370:	ffffc380 	.word	0xffffc380
 80a5374:	ffffc500 	.word	0xffffc500

080a5378 <mbedtls_pk_parse_key>:
 * Parse a private key
 */
int mbedtls_pk_parse_key( mbedtls_pk_context *pk,
                  const unsigned char *key, size_t keylen,
                  const unsigned char *pwd, size_t pwdlen )
{
 80a5378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a537c:	4616      	mov	r6, r2
 80a537e:	b089      	sub	sp, #36	; 0x24
 80a5380:	4605      	mov	r5, r0

#if defined(MBEDTLS_PEM_PARSE_C)
    size_t len;
    mbedtls_pem_context pem;

    mbedtls_pem_init( &pem );
 80a5382:	a805      	add	r0, sp, #20
 * Parse a private key
 */
int mbedtls_pk_parse_key( mbedtls_pk_context *pk,
                  const unsigned char *key, size_t keylen,
                  const unsigned char *pwd, size_t pwdlen )
{
 80a5384:	460c      	mov	r4, r1
 80a5386:	461f      	mov	r7, r3
 80a5388:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40

#if defined(MBEDTLS_PEM_PARSE_C)
    size_t len;
    mbedtls_pem_context pem;

    mbedtls_pem_init( &pem );
 80a538c:	f007 fb64 	bl	80aca58 <mbedtls_pem_init>

#if defined(MBEDTLS_RSA_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( keylen == 0 || key[keylen - 1] != '\0' )
 80a5390:	2e00      	cmp	r6, #0
 80a5392:	f000 80b8 	beq.w	80a5506 <mbedtls_pk_parse_key+0x18e>
 80a5396:	f106 39ff 	add.w	r9, r6, #4294967295
 80a539a:	f814 3009 	ldrb.w	r3, [r4, r9]
 80a539e:	b11b      	cbz	r3, 80a53a8 <mbedtls_pk_parse_key+0x30>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
        return( ret );
#endif /* MBEDTLS_ECP_C */

    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( keylen == 0 || key[keylen - 1] != '\0' )
 80a53a0:	f814 3009 	ldrb.w	r3, [r4, r9]
 80a53a4:	bb6b      	cbnz	r3, 80a5402 <mbedtls_pk_parse_key+0x8a>
 80a53a6:	e031      	b.n	80a540c <mbedtls_pk_parse_key+0x94>
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
                               "-----BEGIN RSA PRIVATE KEY-----",
                               "-----END RSA PRIVATE KEY-----",
                               key, pwd, pwdlen, &len );
 80a53a8:	ab04      	add	r3, sp, #16
 80a53aa:	9302      	str	r3, [sp, #8]
 80a53ac:	e88d 0180 	stmia.w	sp, {r7, r8}
 80a53b0:	4623      	mov	r3, r4
 80a53b2:	4a57      	ldr	r2, [pc, #348]	; (80a5510 <mbedtls_pk_parse_key+0x198>)
 80a53b4:	4957      	ldr	r1, [pc, #348]	; (80a5514 <mbedtls_pk_parse_key+0x19c>)
 80a53b6:	a805      	add	r0, sp, #20
 80a53b8:	f007 fb54 	bl	80aca64 <mbedtls_pem_read_buffer>

    if( ret == 0 )
 80a53bc:	b978      	cbnz	r0, 80a53de <mbedtls_pk_parse_key+0x66>
    {
        pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
 80a53be:	2001      	movs	r0, #1
 80a53c0:	f005 f9c6 	bl	80aa750 <mbedtls_pk_info_from_type>
        if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
 80a53c4:	4601      	mov	r1, r0
 80a53c6:	4628      	mov	r0, r5
 80a53c8:	f005 f9ca 	bl	80aa760 <mbedtls_pk_setup>
 80a53cc:	4604      	mov	r4, r0
 80a53ce:	2800      	cmp	r0, #0
 80a53d0:	d160      	bne.n	80a5494 <mbedtls_pk_parse_key+0x11c>
 80a53d2:	9a06      	ldr	r2, [sp, #24]
 80a53d4:	9905      	ldr	r1, [sp, #20]
 80a53d6:	6868      	ldr	r0, [r5, #4]
 80a53d8:	f7ff fd26 	bl	80a4e28 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
 80a53dc:	e058      	b.n	80a5490 <mbedtls_pk_parse_key+0x118>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
 80a53de:	f510 5f9c 	cmn.w	r0, #4992	; 0x1380
 80a53e2:	d101      	bne.n	80a53e8 <mbedtls_pk_parse_key+0x70>
        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
 80a53e4:	484c      	ldr	r0, [pc, #304]	; (80a5518 <mbedtls_pk_parse_key+0x1a0>)
 80a53e6:	e08f      	b.n	80a5508 <mbedtls_pk_parse_key+0x190>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
 80a53e8:	f510 5f98 	cmn.w	r0, #4864	; 0x1300
 80a53ec:	f000 8084 	beq.w	80a54f8 <mbedtls_pk_parse_key+0x180>
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 80a53f0:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 80a53f4:	f040 8088 	bne.w	80a5508 <mbedtls_pk_parse_key+0x190>
 80a53f8:	e7d2      	b.n	80a53a0 <mbedtls_pk_parse_key+0x28>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 80a53fa:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 80a53fe:	f040 8083 	bne.w	80a5508 <mbedtls_pk_parse_key+0x190>
        return( ret );

#if defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( keylen == 0 || key[keylen - 1] != '\0' )
 80a5402:	19a3      	adds	r3, r4, r6
 80a5404:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80a5408:	b9ab      	cbnz	r3, 80a5436 <mbedtls_pk_parse_key+0xbe>
 80a540a:	e02d      	b.n	80a5468 <mbedtls_pk_parse_key+0xf0>
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
                               "-----BEGIN PRIVATE KEY-----",
                               "-----END PRIVATE KEY-----",
                               key, NULL, 0, &len );
 80a540c:	aa04      	add	r2, sp, #16
 80a540e:	9202      	str	r2, [sp, #8]
 80a5410:	9301      	str	r3, [sp, #4]
 80a5412:	9300      	str	r3, [sp, #0]
 80a5414:	4a41      	ldr	r2, [pc, #260]	; (80a551c <mbedtls_pk_parse_key+0x1a4>)
 80a5416:	4623      	mov	r3, r4
 80a5418:	4941      	ldr	r1, [pc, #260]	; (80a5520 <mbedtls_pk_parse_key+0x1a8>)
 80a541a:	a805      	add	r0, sp, #20
 80a541c:	f007 fb22 	bl	80aca64 <mbedtls_pem_read_buffer>
    if( ret == 0 )
 80a5420:	2800      	cmp	r0, #0
 80a5422:	d1ea      	bne.n	80a53fa <mbedtls_pk_parse_key+0x82>
    {
        if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk,
 80a5424:	9a06      	ldr	r2, [sp, #24]
 80a5426:	9905      	ldr	r1, [sp, #20]
 80a5428:	4628      	mov	r0, r5
 80a542a:	f7ff fe21 	bl	80a5070 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
 80a542e:	e02f      	b.n	80a5490 <mbedtls_pk_parse_key+0x118>
        }

        mbedtls_pem_free( &pem );
        return( ret );
    }
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 80a5430:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 80a5434:	d168      	bne.n	80a5508 <mbedtls_pk_parse_key+0x190>
        unsigned char *key_copy;

        if( keylen == 0 )
            return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );

        if( ( key_copy = (unsigned char *)mbedtls_calloc( 1, keylen ) ) == NULL )
 80a5436:	4631      	mov	r1, r6
 80a5438:	2001      	movs	r0, #1
 80a543a:	f009 fe35 	bl	80af0a8 <calloc>
 80a543e:	4681      	mov	r9, r0
 80a5440:	2800      	cmp	r0, #0
 80a5442:	d05b      	beq.n	80a54fc <mbedtls_pk_parse_key+0x184>
            return( MBEDTLS_ERR_PK_ALLOC_FAILED );

        memcpy( key_copy, key, keylen );
 80a5444:	4632      	mov	r2, r6
 80a5446:	4621      	mov	r1, r4
 80a5448:	f009 fe53 	bl	80af0f2 <memcpy>

        ret = pk_parse_key_pkcs8_encrypted_der( pk, key_copy, keylen,
                                                pwd, pwdlen );
 80a544c:	463b      	mov	r3, r7
 80a544e:	4632      	mov	r2, r6
 80a5450:	4649      	mov	r1, r9
 80a5452:	f8cd 8000 	str.w	r8, [sp]
 80a5456:	4628      	mov	r0, r5
 80a5458:	f7ff fe60 	bl	80a511c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>
 80a545c:	eb09 0106 	add.w	r1, r9, r6
 80a5460:	4607      	mov	r7, r0
 80a5462:	464b      	mov	r3, r9

#if defined(MBEDTLS_FS_IO) || \
    defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80a5464:	2200      	movs	r2, #0
 80a5466:	e01d      	b.n	80a54a4 <mbedtls_pk_parse_key+0x12c>
        ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
    else
        ret = mbedtls_pem_read_buffer( &pem,
                               "-----BEGIN ENCRYPTED PRIVATE KEY-----",
                               "-----END ENCRYPTED PRIVATE KEY-----",
                               key, NULL, 0, &len );
 80a5468:	aa04      	add	r2, sp, #16
 80a546a:	9202      	str	r2, [sp, #8]
 80a546c:	9301      	str	r3, [sp, #4]
 80a546e:	9300      	str	r3, [sp, #0]
 80a5470:	4a2c      	ldr	r2, [pc, #176]	; (80a5524 <mbedtls_pk_parse_key+0x1ac>)
 80a5472:	4623      	mov	r3, r4
 80a5474:	492c      	ldr	r1, [pc, #176]	; (80a5528 <mbedtls_pk_parse_key+0x1b0>)
 80a5476:	a805      	add	r0, sp, #20
 80a5478:	f007 faf4 	bl	80aca64 <mbedtls_pem_read_buffer>
    if( ret == 0 )
 80a547c:	2800      	cmp	r0, #0
 80a547e:	d1d7      	bne.n	80a5430 <mbedtls_pk_parse_key+0xb8>
    {
        if( ( ret = pk_parse_key_pkcs8_encrypted_der( pk,
 80a5480:	f8cd 8000 	str.w	r8, [sp]
 80a5484:	463b      	mov	r3, r7
 80a5486:	9a06      	ldr	r2, [sp, #24]
 80a5488:	9905      	ldr	r1, [sp, #20]
 80a548a:	4628      	mov	r0, r5
 80a548c:	f7ff fe46 	bl	80a511c <_ZL32pk_parse_key_pkcs8_encrypted_derP18mbedtls_pk_contextPhjPKhj>
 80a5490:	4604      	mov	r4, r0
 80a5492:	b110      	cbz	r0, 80a549a <mbedtls_pk_parse_key+0x122>
                                                      pem.buf, pem.buflen,
                                                      pwd, pwdlen ) ) != 0 )
        {
            mbedtls_pk_free( pk );
 80a5494:	4628      	mov	r0, r5
 80a5496:	f005 f94a 	bl	80aa72e <mbedtls_pk_free>
        }

        mbedtls_pem_free( &pem );
 80a549a:	a805      	add	r0, sp, #20
 80a549c:	f007 fb70 	bl	80acb80 <mbedtls_pem_free>
                               "-----BEGIN ENCRYPTED PRIVATE KEY-----",
                               "-----END ENCRYPTED PRIVATE KEY-----",
                               key, NULL, 0, &len );
    if( ret == 0 )
    {
        if( ( ret = pk_parse_key_pkcs8_encrypted_der( pk,
 80a54a0:	4620      	mov	r0, r4
        {
            mbedtls_pk_free( pk );
        }

        mbedtls_pem_free( &pem );
        return( ret );
 80a54a2:	e031      	b.n	80a5508 <mbedtls_pk_parse_key+0x190>

#if defined(MBEDTLS_FS_IO) || \
    defined(MBEDTLS_PKCS12_C) || defined(MBEDTLS_PKCS5_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80a54a4:	428b      	cmp	r3, r1
 80a54a6:	d002      	beq.n	80a54ae <mbedtls_pk_parse_key+0x136>
 80a54a8:	701a      	strb	r2, [r3, #0]
 80a54aa:	3301      	adds	r3, #1
 80a54ac:	e7fa      	b.n	80a54a4 <mbedtls_pk_parse_key+0x12c>

        ret = pk_parse_key_pkcs8_encrypted_der( pk, key_copy, keylen,
                                                pwd, pwdlen );

        mbedtls_zeroize( key_copy, keylen );
        mbedtls_free( key_copy );
 80a54ae:	4648      	mov	r0, r9
 80a54b0:	f008 fd2c 	bl	80adf0c <free>
    }

    if( ret == 0 )
 80a54b4:	b90f      	cbnz	r7, 80a54ba <mbedtls_pk_parse_key+0x142>
        return( 0 );
 80a54b6:	2000      	movs	r0, #0
 80a54b8:	e026      	b.n	80a5508 <mbedtls_pk_parse_key+0x190>

    mbedtls_pk_free( pk );
 80a54ba:	4628      	mov	r0, r5
 80a54bc:	f005 f937 	bl	80aa72e <mbedtls_pk_free>

    if( ret == MBEDTLS_ERR_PK_PASSWORD_MISMATCH )
 80a54c0:	f517 5f6e 	cmn.w	r7, #15232	; 0x3b80
 80a54c4:	d08e      	beq.n	80a53e4 <mbedtls_pk_parse_key+0x6c>
    {
        return( ret );
    }
#endif /* MBEDTLS_PKCS12_C || MBEDTLS_PKCS5_C */

    if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk, key, keylen ) ) == 0 )
 80a54c6:	4632      	mov	r2, r6
 80a54c8:	4621      	mov	r1, r4
 80a54ca:	4628      	mov	r0, r5
 80a54cc:	f7ff fdd0 	bl	80a5070 <_ZL34pk_parse_key_pkcs8_unencrypted_derP18mbedtls_pk_contextPKhj>
 80a54d0:	2800      	cmp	r0, #0
 80a54d2:	d0f0      	beq.n	80a54b6 <mbedtls_pk_parse_key+0x13e>
        return( 0 );

    mbedtls_pk_free( pk );
 80a54d4:	4628      	mov	r0, r5
 80a54d6:	f005 f92a 	bl	80aa72e <mbedtls_pk_free>

#if defined(MBEDTLS_RSA_C)

    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
 80a54da:	2001      	movs	r0, #1
 80a54dc:	f005 f938 	bl	80aa750 <mbedtls_pk_info_from_type>
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
 80a54e0:	4601      	mov	r1, r0
 80a54e2:	4628      	mov	r0, r5
 80a54e4:	f005 f93c 	bl	80aa760 <mbedtls_pk_setup>
 80a54e8:	b950      	cbnz	r0, 80a5500 <mbedtls_pk_parse_key+0x188>
 80a54ea:	4632      	mov	r2, r6
 80a54ec:	4621      	mov	r1, r4
 80a54ee:	6868      	ldr	r0, [r5, #4]
 80a54f0:	f7ff fc9a 	bl	80a4e28 <_ZL22pk_parse_key_pkcs1_derP19mbedtls_rsa_contextPKhj>
 80a54f4:	b920      	cbnz	r0, 80a5500 <mbedtls_pk_parse_key+0x188>
 80a54f6:	e7de      	b.n	80a54b6 <mbedtls_pk_parse_key+0x13e>
        return( ret );
    }
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
 80a54f8:	480c      	ldr	r0, [pc, #48]	; (80a552c <mbedtls_pk_parse_key+0x1b4>)
 80a54fa:	e005      	b.n	80a5508 <mbedtls_pk_parse_key+0x190>

        if( keylen == 0 )
            return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );

        if( ( key_copy = (unsigned char *)mbedtls_calloc( 1, keylen ) ) == NULL )
            return( MBEDTLS_ERR_PK_ALLOC_FAILED );
 80a54fc:	480c      	ldr	r0, [pc, #48]	; (80a5530 <mbedtls_pk_parse_key+0x1b8>)
 80a54fe:	e003      	b.n	80a5508 <mbedtls_pk_parse_key+0x190>
    pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA );
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 ||
        ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ),
                                        key, keylen ) ) != 0 )
    {
        mbedtls_pk_free( pk );
 80a5500:	4628      	mov	r0, r5
 80a5502:	f005 f914 	bl	80aa72e <mbedtls_pk_free>
        return( 0 );
    }

#endif /* MBEDTLS_ECP_C */

    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 80a5506:	480b      	ldr	r0, [pc, #44]	; (80a5534 <mbedtls_pk_parse_key+0x1bc>)
}
 80a5508:	b009      	add	sp, #36	; 0x24
 80a550a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a550e:	bf00      	nop
 80a5510:	080b061e 	.word	0x080b061e
 80a5514:	080b063c 	.word	0x080b063c
 80a5518:	ffffc480 	.word	0xffffc480
 80a551c:	080b065c 	.word	0x080b065c
 80a5520:	080b0676 	.word	0x080b0676
 80a5524:	080b0692 	.word	0x080b0692
 80a5528:	080b06b6 	.word	0x080b06b6
 80a552c:	ffffc400 	.word	0xffffc400
 80a5530:	ffffc080 	.word	0xffffc080
 80a5534:	ffffc300 	.word	0xffffc300

080a5538 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>:
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],
                      unsigned char output[16] )
{
 80a5538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a553c:	7bcb      	ldrb	r3, [r1, #15]
 80a553e:	b093      	sub	sp, #76	; 0x4c
 80a5540:	f003 030f 	and.w	r3, r3, #15
 80a5544:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    }
#endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */

    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
 80a5548:	e9d3 672e 	ldrd	r6, r7, [r3, #184]	; 0xb8
    zl = ctx->HL[lo];
 80a554c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
        if( i != 15 )
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
 80a5550:	f8df c150 	ldr.w	ip, [pc, #336]	; 80a56a4 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0x16c>
 80a5554:	f101 0310 	add.w	r3, r1, #16
 80a5558:	9310      	str	r3, [sp, #64]	; 0x40
    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
    {
        lo = x[i] & 0xf;
 80a555a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80a555c:	f813 ed01 	ldrb.w	lr, [r3, #-1]!
 80a5560:	9310      	str	r3, [sp, #64]	; 0x40
 80a5562:	f00e 030f 	and.w	r3, lr, #15
 80a5566:	9311      	str	r3, [sp, #68]	; 0x44
        hi = x[i] >> 4;

        if( i != 15 )
 80a5568:	9b10      	ldr	r3, [sp, #64]	; 0x40
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
    {
        lo = x[i] & 0xf;
        hi = x[i] >> 4;
 80a556a:	ea4f 1e2e 	mov.w	lr, lr, asr #4

        if( i != 15 )
 80a556e:	ebc1 0803 	rsb	r8, r1, r3
 80a5572:	f1b8 0f0f 	cmp.w	r8, #15
 80a5576:	d03a      	beq.n	80a55ee <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0xb6>
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
 80a5578:	0923      	lsrs	r3, r4, #4
 80a557a:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 80a557e:	9300      	str	r3, [sp, #0]
 80a5580:	092b      	lsrs	r3, r5, #4
 80a5582:	9301      	str	r3, [sp, #4]
 80a5584:	0733      	lsls	r3, r6, #28
 80a5586:	9309      	str	r3, [sp, #36]	; 0x24
 80a5588:	2300      	movs	r3, #0
 80a558a:	9308      	str	r3, [sp, #32]
 80a558c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80a558e:	e9dd ab00 	ldrd	sl, fp, [sp]
 80a5592:	eb00 05c3 	add.w	r5, r0, r3, lsl #3
 80a5596:	0933      	lsrs	r3, r6, #4
 80a5598:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80a559c:	9304      	str	r3, [sp, #16]
 80a559e:	093b      	lsrs	r3, r7, #4
 80a55a0:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80a55a4:	9305      	str	r3, [sp, #20]
 80a55a6:	ea48 080a 	orr.w	r8, r8, sl
 80a55aa:	ea49 090b 	orr.w	r9, r9, fp
 80a55ae:	e9d5 672e 	ldrd	r6, r7, [r5, #184]	; 0xb8
 80a55b2:	46c2      	mov	sl, r8
 80a55b4:	46cb      	mov	fp, r9
 80a55b6:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80a55ba:	ea88 0806 	eor.w	r8, r8, r6
 80a55be:	4646      	mov	r6, r8
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
 80a55c0:	f004 040f 	and.w	r4, r4, #15
            zh ^= ctx->HH[lo];
 80a55c4:	f85c 4034 	ldr.w	r4, [ip, r4, lsl #3]
 80a55c8:	ea89 0907 	eor.w	r9, r9, r7
 80a55cc:	0423      	lsls	r3, r4, #16
 80a55ce:	930d      	str	r3, [sp, #52]	; 0x34
 80a55d0:	2300      	movs	r3, #0
 80a55d2:	464f      	mov	r7, r9
 80a55d4:	930c      	str	r3, [sp, #48]	; 0x30
 80a55d6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80a55da:	4073      	eors	r3, r6
 80a55dc:	461e      	mov	r6, r3
 80a55de:	407c      	eors	r4, r7
 80a55e0:	4627      	mov	r7, r4
            zl ^= ctx->HL[lo];
 80a55e2:	e9d5 450e 	ldrd	r4, r5, [r5, #56]	; 0x38
 80a55e6:	ea84 040a 	eor.w	r4, r4, sl
 80a55ea:	ea85 050b 	eor.w	r5, r5, fp

        }

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
 80a55ee:	0923      	lsrs	r3, r4, #4
 80a55f0:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 80a55f4:	9302      	str	r3, [sp, #8]
 80a55f6:	092b      	lsrs	r3, r5, #4
 80a55f8:	9303      	str	r3, [sp, #12]
 80a55fa:	0733      	lsls	r3, r6, #28
 80a55fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80a55fe:	2300      	movs	r3, #0
 80a5600:	930a      	str	r3, [sp, #40]	; 0x28
 80a5602:	0933      	lsrs	r3, r6, #4
 80a5604:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80a5608:	9306      	str	r3, [sp, #24]
 80a560a:	093b      	lsrs	r3, r7, #4
 80a560c:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 80a5610:	9307      	str	r3, [sp, #28]
 80a5612:	e9de 672e 	ldrd	r6, r7, [lr, #184]	; 0xb8
 80a5616:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 80a561a:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
 80a561e:	ea48 080a 	orr.w	r8, r8, sl
 80a5622:	ea49 090b 	orr.w	r9, r9, fp
 80a5626:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 80a562a:	ea8a 0a06 	eor.w	sl, sl, r6
 80a562e:	4656      	mov	r6, sl
 80a5630:	ea8b 0b07 	eor.w	fp, fp, r7
 80a5634:	465f      	mov	r7, fp
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
 80a5636:	f004 040f 	and.w	r4, r4, #15
        zh ^= ctx->HH[hi];
 80a563a:	f85c 4034 	ldr.w	r4, [ip, r4, lsl #3]
 80a563e:	0423      	lsls	r3, r4, #16
 80a5640:	930f      	str	r3, [sp, #60]	; 0x3c
 80a5642:	2300      	movs	r3, #0
 80a5644:	930e      	str	r3, [sp, #56]	; 0x38
 80a5646:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 80a564a:	4073      	eors	r3, r6
 80a564c:	461e      	mov	r6, r3
    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
 80a564e:	9b10      	ldr	r3, [sp, #64]	; 0x40

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
 80a5650:	407c      	eors	r4, r7
    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
 80a5652:	4299      	cmp	r1, r3

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
 80a5654:	4627      	mov	r7, r4
        zl ^= ctx->HL[hi];
 80a5656:	e9de 450e 	ldrd	r4, r5, [lr, #56]	; 0x38
 80a565a:	ea84 0408 	eor.w	r4, r4, r8
 80a565e:	ea85 0509 	eor.w	r5, r5, r9
    lo = x[15] & 0xf;

    zh = ctx->HH[lo];
    zl = ctx->HL[lo];

    for( i = 15; i >= 0; i-- )
 80a5662:	f47f af7a 	bne.w	80a555a <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh+0x22>
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
        zl ^= ctx->HL[hi];
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
 80a5666:	0e3b      	lsrs	r3, r7, #24
 80a5668:	7013      	strb	r3, [r2, #0]
 80a566a:	0c3b      	lsrs	r3, r7, #16
 80a566c:	7053      	strb	r3, [r2, #1]
 80a566e:	0a3b      	lsrs	r3, r7, #8
 80a5670:	7093      	strb	r3, [r2, #2]
    PUT_UINT32_BE( zh, output, 4 );
 80a5672:	0e33      	lsrs	r3, r6, #24
 80a5674:	7113      	strb	r3, [r2, #4]
 80a5676:	0c33      	lsrs	r3, r6, #16
 80a5678:	7153      	strb	r3, [r2, #5]
 80a567a:	0a33      	lsrs	r3, r6, #8
 80a567c:	7193      	strb	r3, [r2, #6]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 80a567e:	0e2b      	lsrs	r3, r5, #24
 80a5680:	7213      	strb	r3, [r2, #8]
 80a5682:	0c2b      	lsrs	r3, r5, #16
 80a5684:	7253      	strb	r3, [r2, #9]
 80a5686:	0a2b      	lsrs	r3, r5, #8
 80a5688:	7293      	strb	r3, [r2, #10]
    PUT_UINT32_BE( zl, output, 12 );
 80a568a:	0e23      	lsrs	r3, r4, #24
 80a568c:	7313      	strb	r3, [r2, #12]
 80a568e:	0c23      	lsrs	r3, r4, #16
 80a5690:	7353      	strb	r3, [r2, #13]
 80a5692:	0a23      	lsrs	r3, r4, #8
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
        zl ^= ctx->HL[hi];
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
 80a5694:	70d7      	strb	r7, [r2, #3]
    PUT_UINT32_BE( zh, output, 4 );
 80a5696:	71d6      	strb	r6, [r2, #7]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 80a5698:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_BE( zl, output, 12 );
 80a569a:	7393      	strb	r3, [r2, #14]
 80a569c:	73d4      	strb	r4, [r2, #15]
}
 80a569e:	b013      	add	sp, #76	; 0x4c
 80a56a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a56a4:	080b0710 	.word	0x080b0710

080a56a8 <mbedtls_gcm_init>:
/*
 * Initialize a context
 */
void mbedtls_gcm_init( mbedtls_gcm_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_gcm_context ) );
 80a56a8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80a56ac:	2100      	movs	r1, #0
 80a56ae:	f009 bd46 	b.w	80af13e <memset>

080a56b2 <mbedtls_gcm_setkey>:

int mbedtls_gcm_setkey( mbedtls_gcm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
 80a56b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a56b6:	4604      	mov	r4, r0
 80a56b8:	b08d      	sub	sp, #52	; 0x34
 80a56ba:	4608      	mov	r0, r1
 80a56bc:	4691      	mov	r9, r2
    int ret;
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 80a56be:	4619      	mov	r1, r3
 80a56c0:	2201      	movs	r2, #1

int mbedtls_gcm_setkey( mbedtls_gcm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
 80a56c2:	4698      	mov	r8, r3
    int ret;
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 80a56c4:	f7fb ffea 	bl	80a169c <mbedtls_cipher_info_from_values>
    if( cipher_info == NULL )
 80a56c8:	2800      	cmp	r0, #0
 80a56ca:	f000 8099 	beq.w	80a5800 <mbedtls_gcm_setkey+0x14e>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    if( cipher_info->block_size != 16 )
 80a56ce:	6945      	ldr	r5, [r0, #20]
 80a56d0:	9002      	str	r0, [sp, #8]
 80a56d2:	2d10      	cmp	r5, #16
 80a56d4:	f040 8094 	bne.w	80a5800 <mbedtls_gcm_setkey+0x14e>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    mbedtls_cipher_free( &ctx->cipher_ctx );
 80a56d8:	4620      	mov	r0, r4
 80a56da:	f7fb fff7 	bl	80a16cc <mbedtls_cipher_free>

    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
 80a56de:	9902      	ldr	r1, [sp, #8]
 80a56e0:	4620      	mov	r0, r4
 80a56e2:	f7fc f805 	bl	80a16f0 <mbedtls_cipher_setup>
 80a56e6:	2800      	cmp	r0, #0
 80a56e8:	f040 808c 	bne.w	80a5804 <mbedtls_gcm_setkey+0x152>
        return( ret );

    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 80a56ec:	2301      	movs	r3, #1
 80a56ee:	4642      	mov	r2, r8
 80a56f0:	4649      	mov	r1, r9
 80a56f2:	4620      	mov	r0, r4
 80a56f4:	f7fc f816 	bl	80a1724 <mbedtls_cipher_setkey>
 80a56f8:	2800      	cmp	r0, #0
 80a56fa:	f040 8083 	bne.w	80a5804 <mbedtls_gcm_setkey+0x152>
    uint64_t hi, lo;
    uint64_t vl, vh;
    unsigned char h[16];
    size_t olen = 0;

    memset( h, 0, 16 );
 80a56fe:	4601      	mov	r1, r0
{
    int ret, i, j;
    uint64_t hi, lo;
    uint64_t vl, vh;
    unsigned char h[16];
    size_t olen = 0;
 80a5700:	9007      	str	r0, [sp, #28]

    memset( h, 0, 16 );
 80a5702:	462a      	mov	r2, r5
 80a5704:	a808      	add	r0, sp, #32
 80a5706:	f009 fd1a 	bl	80af13e <memset>
    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, h, 16, h, &olen ) ) != 0 )
 80a570a:	ab07      	add	r3, sp, #28
 80a570c:	9300      	str	r3, [sp, #0]
 80a570e:	ab08      	add	r3, sp, #32
 80a5710:	462a      	mov	r2, r5
 80a5712:	4619      	mov	r1, r3
 80a5714:	4620      	mov	r0, r4
 80a5716:	f7fc f853 	bl	80a17c0 <mbedtls_cipher_update>
 80a571a:	2800      	cmp	r0, #0
 80a571c:	d172      	bne.n	80a5804 <mbedtls_gcm_setkey+0x152>
        return( ret );

    /* pack h as two 64-bits ints, big-endian */
    GET_UINT32_BE( hi, h,  0  );
    GET_UINT32_BE( lo, h,  4  );
    vh = (uint64_t) hi << 32 | lo;
 80a571e:	4602      	mov	r2, r0
 80a5720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a5722:	9908      	ldr	r1, [sp, #32]
 80a5724:	ba1d      	rev	r5, r3
 80a5726:	432a      	orrs	r2, r5

    GET_UINT32_BE( hi, h,  8  );
    GET_UINT32_BE( lo, h,  12 );
    vl = (uint64_t) hi << 32 | lo;
 80a5728:	9d0a      	ldr	r5, [sp, #40]	; 0x28
        return( ret );

    /* pack h as two 64-bits ints, big-endian */
    GET_UINT32_BE( hi, h,  0  );
    GET_UINT32_BE( lo, h,  4  );
    vh = (uint64_t) hi << 32 | lo;
 80a572a:	ba0b      	rev	r3, r1
 80a572c:	990b      	ldr	r1, [sp, #44]	; 0x2c

    GET_UINT32_BE( hi, h,  8  );
    GET_UINT32_BE( lo, h,  12 );
    vl = (uint64_t) hi << 32 | lo;
 80a572e:	fa95 f985 	rev.w	r9, r5
 80a5732:	fa91 fe81 	rev.w	lr, r1
 80a5736:	4649      	mov	r1, r9
 80a5738:	ea40 000e 	orr.w	r0, r0, lr
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_CLMUL ) )
        return( 0 );
#endif

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
 80a573c:	f04f 0800 	mov.w	r8, #0
 80a5740:	f04f 0900 	mov.w	r9, #0
    GET_UINT32_BE( hi, h,  8  );
    GET_UINT32_BE( lo, h,  12 );
    vl = (uint64_t) hi << 32 | lo;

    /* 8 = 1000 corresponds to 1 in GF(2^128) */
    ctx->HL[8] = vl;
 80a5744:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    ctx->HH[8] = vh;
 80a5748:	e9c4 233e 	strd	r2, r3, [r4, #248]	; 0xf8
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_CLMUL ) )
        return( 0 );
#endif

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
 80a574c:	e9c4 892e 	strd	r8, r9, [r4, #184]	; 0xb8
    ctx->HL[0] = 0;
 80a5750:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
 80a5754:	f04f 0e03 	mov.w	lr, #3

    for( i = 4; i > 0; i >>= 1 )
 80a5758:	2504      	movs	r5, #4
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 80a575a:	f04f 4c61 	mov.w	ip, #3774873600	; 0xe1000000
 80a575e:	f000 0801 	and.w	r8, r0, #1
        vl  = ( vh << 63 ) | ( vl >> 1 );
 80a5762:	07d7      	lsls	r7, r2, #31
 80a5764:	0849      	lsrs	r1, r1, #1
 80a5766:	ea4f 0030 	mov.w	r0, r0, rrx
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 80a576a:	085b      	lsrs	r3, r3, #1
 80a576c:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5770:	fb0c fb08 	mul.w	fp, ip, r8
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
        vl  = ( vh << 63 ) | ( vl >> 1 );
 80a5774:	2600      	movs	r6, #0
 80a5776:	eb04 08c5 	add.w	r8, r4, r5, lsl #3
 80a577a:	4330      	orrs	r0, r6
 80a577c:	4339      	orrs	r1, r7
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 80a577e:	4072      	eors	r2, r6
 80a5780:	ea83 030b 	eor.w	r3, r3, fp

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
 80a5784:	f1be 0e01 	subs.w	lr, lr, #1
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
        vl  = ( vh << 63 ) | ( vl >> 1 );
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);

        ctx->HL[i] = vl;
 80a5788:	e9c8 010e 	strd	r0, r1, [r8, #56]	; 0x38
        ctx->HH[i] = vh;
 80a578c:	e9c8 232e 	strd	r2, r3, [r8, #184]	; 0xb8

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
    ctx->HL[0] = 0;

    for( i = 4; i > 0; i >>= 1 )
 80a5790:	ea4f 0565 	mov.w	r5, r5, asr #1
 80a5794:	d1e3      	bne.n	80a575e <mbedtls_gcm_setkey+0xac>
 80a5796:	2003      	movs	r0, #3
 80a5798:	2102      	movs	r1, #2
        ctx->HH[i] = vh;
    }

    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
 80a579a:	f104 0838 	add.w	r8, r4, #56	; 0x38
 80a579e:	f104 0cb8 	add.w	ip, r4, #184	; 0xb8
 80a57a2:	00cb      	lsls	r3, r1, #3
 80a57a4:	eb08 0e03 	add.w	lr, r8, r3
 80a57a8:	4463      	add	r3, ip
        vh = *HiH;
 80a57aa:	e9d3 4500 	ldrd	r4, r5, [r3]
 80a57ae:	e9cd 4502 	strd	r4, r5, [sp, #8]
        vl = *HiL;
 80a57b2:	e9de 4500 	ldrd	r4, r5, [lr]
 80a57b6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80a57ba:	4665      	mov	r5, ip
 80a57bc:	4644      	mov	r4, r8
        for( j = 1; j < i; j++ )
 80a57be:	2201      	movs	r2, #1
        {
            HiH[j] = vh ^ ctx->HH[j];
 80a57c0:	e9f5 6702 	ldrd	r6, r7, [r5, #8]!
 80a57c4:	e9dd 9a02 	ldrd	r9, sl, [sp, #8]
 80a57c8:	ea89 0906 	eor.w	r9, r9, r6
 80a57cc:	ea8a 0a07 	eor.w	sl, sl, r7
 80a57d0:	464e      	mov	r6, r9
 80a57d2:	4657      	mov	r7, sl
            HiL[j] = vl ^ ctx->HL[j];
 80a57d4:	e9dd 9a04 	ldrd	r9, sl, [sp, #16]
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
        vh = *HiH;
        vl = *HiL;
        for( j = 1; j < i; j++ )
        {
            HiH[j] = vh ^ ctx->HH[j];
 80a57d8:	e9e3 6702 	strd	r6, r7, [r3, #8]!
            HiL[j] = vl ^ ctx->HL[j];
 80a57dc:	e9f4 6702 	ldrd	r6, r7, [r4, #8]!
 80a57e0:	ea89 0906 	eor.w	r9, r9, r6
 80a57e4:	ea8a 0a07 	eor.w	sl, sl, r7
 80a57e8:	464e      	mov	r6, r9
 80a57ea:	4657      	mov	r7, sl
    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
        vh = *HiH;
        vl = *HiL;
        for( j = 1; j < i; j++ )
 80a57ec:	3201      	adds	r2, #1
 80a57ee:	428a      	cmp	r2, r1
        {
            HiH[j] = vh ^ ctx->HH[j];
            HiL[j] = vl ^ ctx->HL[j];
 80a57f0:	e9ee 6702 	strd	r6, r7, [lr, #8]!
    for( i = 2; i <= 8; i *= 2 )
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
        vh = *HiH;
        vl = *HiL;
        for( j = 1; j < i; j++ )
 80a57f4:	d1e4      	bne.n	80a57c0 <mbedtls_gcm_setkey+0x10e>

        ctx->HL[i] = vl;
        ctx->HH[i] = vh;
    }

    for( i = 2; i <= 8; i *= 2 )
 80a57f6:	3801      	subs	r0, #1
 80a57f8:	ea4f 0142 	mov.w	r1, r2, lsl #1
 80a57fc:	d1d1      	bne.n	80a57a2 <mbedtls_gcm_setkey+0xf0>
 80a57fe:	e001      	b.n	80a5804 <mbedtls_gcm_setkey+0x152>
    int ret;
    const mbedtls_cipher_info_t *cipher_info;

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 80a5800:	f06f 0013 	mvn.w	r0, #19

    if( ( ret = gcm_gen_table( ctx ) ) != 0 )
        return( ret );

    return( 0 );
}
 80a5804:	b00d      	add	sp, #52	; 0x34
 80a5806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a580a <mbedtls_gcm_starts>:
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
 80a580a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
 80a580e:	f04f 0900 	mov.w	r9, #0
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
 80a5812:	b08b      	sub	sp, #44	; 0x2c
 80a5814:	4604      	mov	r4, r0
 80a5816:	468b      	mov	fp, r1
 80a5818:	4690      	mov	r8, r2
 80a581a:	9e15      	ldr	r6, [sp, #84]	; 0x54
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
 80a581c:	f8cd 9014 	str.w	r9, [sp, #20]

    /* IV and AD are limited to 2^64 bits, so 2^61 bytes */
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
 80a5820:	461d      	mov	r5, r3
 80a5822:	2b00      	cmp	r3, #0
 80a5824:	f000 808d 	beq.w	80a5942 <mbedtls_gcm_starts+0x138>
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
 80a5828:	f500 77ac 	add.w	r7, r0, #344	; 0x158
 80a582c:	2210      	movs	r2, #16
 80a582e:	4649      	mov	r1, r9
 80a5830:	4638      	mov	r0, r7
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 80a5832:	f504 7ab4 	add.w	sl, r4, #360	; 0x168
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
 80a5836:	f009 fc82 	bl	80af13e <memset>
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 80a583a:	4649      	mov	r1, r9
 80a583c:	2210      	movs	r2, #16
 80a583e:	4650      	mov	r0, sl
 80a5840:	f009 fc7d 	bl	80af13e <memset>

    ctx->mode = mode;
 80a5844:	f8c4 b178 	str.w	fp, [r4, #376]	; 0x178
    ctx->len = 0;
    ctx->add_len = 0;
 80a5848:	46a3      	mov	fp, r4

    memset( ctx->y, 0x00, sizeof(ctx->y) );
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );

    ctx->mode = mode;
    ctx->len = 0;
 80a584a:	2000      	movs	r0, #0
 80a584c:	2100      	movs	r1, #0
 80a584e:	f504 739c 	add.w	r3, r4, #312	; 0x138
    ctx->add_len = 0;

    if( iv_len == 12 )
 80a5852:	2d0c      	cmp	r5, #12

    memset( ctx->y, 0x00, sizeof(ctx->y) );
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );

    ctx->mode = mode;
    ctx->len = 0;
 80a5854:	e9c3 0100 	strd	r0, r1, [r3]
    ctx->add_len = 0;
 80a5858:	e9eb 0150 	strd	r0, r1, [fp, #320]!	; 0x140

    if( iv_len == 12 )
 80a585c:	d10d      	bne.n	80a587a <mbedtls_gcm_starts+0x70>
    {
        memcpy( ctx->y, iv, iv_len );
 80a585e:	f8d8 3000 	ldr.w	r3, [r8]
 80a5862:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
 80a5866:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a586a:	607b      	str	r3, [r7, #4]
 80a586c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a5870:	60bb      	str	r3, [r7, #8]
        ctx->y[15] = 1;
 80a5872:	2301      	movs	r3, #1
 80a5874:	f884 3167 	strb.w	r3, [r4, #359]	; 0x167
 80a5878:	e03a      	b.n	80a58f0 <mbedtls_gcm_starts+0xe6>
    }
    else
    {
        memset( work_buf, 0x00, 16 );
 80a587a:	2210      	movs	r2, #16
 80a587c:	4649      	mov	r1, r9
 80a587e:	a806      	add	r0, sp, #24
 80a5880:	f009 fc5d 	bl	80af13e <memset>
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
 80a5884:	00eb      	lsls	r3, r5, #3
 80a5886:	0e1a      	lsrs	r2, r3, #24
 80a5888:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 80a588c:	0c1a      	lsrs	r2, r3, #16
 80a588e:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
 80a5892:	0a1a      	lsrs	r2, r3, #8
 80a5894:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
 80a5898:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27

        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;
 80a589c:	462b      	mov	r3, r5
 80a589e:	f204 1957 	addw	r9, r4, #343	; 0x157
 80a58a2:	4649      	mov	r1, r9
 80a58a4:	2d10      	cmp	r5, #16
 80a58a6:	bf28      	it	cs
 80a58a8:	2310      	movcs	r3, #16
 80a58aa:	4642      	mov	r2, r8
 80a58ac:	4498      	add	r8, r3

            for( i = 0; i < use_len; i++ )
                ctx->y[i] ^= p[i];
 80a58ae:	f812 eb01 	ldrb.w	lr, [r2], #1
 80a58b2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;

            for( i = 0; i < use_len; i++ )
 80a58b6:	4542      	cmp	r2, r8
                ctx->y[i] ^= p[i];
 80a58b8:	ea8e 0000 	eor.w	r0, lr, r0
 80a58bc:	7008      	strb	r0, [r1, #0]
        p = iv;
        while( iv_len > 0 )
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;

            for( i = 0; i < use_len; i++ )
 80a58be:	d1f6      	bne.n	80a58ae <mbedtls_gcm_starts+0xa4>
                ctx->y[i] ^= p[i];

            gcm_mult( ctx, ctx->y, ctx->y );
 80a58c0:	463a      	mov	r2, r7
 80a58c2:	4639      	mov	r1, r7
 80a58c4:	4620      	mov	r0, r4
 80a58c6:	9303      	str	r3, [sp, #12]
 80a58c8:	f7ff fe36 	bl	80a5538 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
    {
        memset( work_buf, 0x00, 16 );
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );

        p = iv;
        while( iv_len > 0 )
 80a58cc:	9b03      	ldr	r3, [sp, #12]
 80a58ce:	1aed      	subs	r5, r5, r3
 80a58d0:	d1e4      	bne.n	80a589c <mbedtls_gcm_starts+0x92>
            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
            ctx->y[i] ^= work_buf[i];
 80a58d2:	ab06      	add	r3, sp, #24
 80a58d4:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 80a58d8:	5d5b      	ldrb	r3, [r3, r5]

            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
 80a58da:	3501      	adds	r5, #1
            ctx->y[i] ^= work_buf[i];
 80a58dc:	4053      	eors	r3, r2

            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
 80a58de:	2d10      	cmp	r5, #16
            ctx->y[i] ^= work_buf[i];
 80a58e0:	f889 3000 	strb.w	r3, [r9]

            iv_len -= use_len;
            p += use_len;
        }

        for( i = 0; i < 16; i++ )
 80a58e4:	d1f5      	bne.n	80a58d2 <mbedtls_gcm_starts+0xc8>
            ctx->y[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->y, ctx->y );
 80a58e6:	463a      	mov	r2, r7
 80a58e8:	4639      	mov	r1, r7
 80a58ea:	4620      	mov	r0, r4
 80a58ec:	f7ff fe24 	bl	80a5538 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
    }

    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ctx->base_ectr,
 80a58f0:	ab05      	add	r3, sp, #20
 80a58f2:	9300      	str	r3, [sp, #0]
 80a58f4:	2210      	movs	r2, #16
 80a58f6:	f504 73a4 	add.w	r3, r4, #328	; 0x148
 80a58fa:	4639      	mov	r1, r7
 80a58fc:	4620      	mov	r0, r4
 80a58fe:	f7fb ff5f 	bl	80a17c0 <mbedtls_cipher_update>
 80a5902:	bb10      	cbnz	r0, 80a594a <mbedtls_gcm_starts+0x140>
                             &olen ) ) != 0 )
    {
        return( ret );
    }

    ctx->add_len = add_len;
 80a5904:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
 80a5908:	f8cb 0004 	str.w	r0, [fp, #4]
    p = add;
    while( add_len > 0 )
 80a590c:	b1e6      	cbz	r6, 80a5948 <mbedtls_gcm_starts+0x13e>
 80a590e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    {
        use_len = ( add_len < 16 ) ? add_len : 16;
 80a5910:	4635      	mov	r5, r6
 80a5912:	4619      	mov	r1, r3
 80a5914:	2e10      	cmp	r6, #16
 80a5916:	bf28      	it	cs
 80a5918:	2510      	movcs	r5, #16
 80a591a:	4429      	add	r1, r5
 80a591c:	f204 1267 	addw	r2, r4, #359	; 0x167
 80a5920:	9114      	str	r1, [sp, #80]	; 0x50

        for( i = 0; i < use_len; i++ )
            ctx->buf[i] ^= p[i];
 80a5922:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a5926:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80a592a:	4041      	eors	r1, r0
 80a592c:	7011      	strb	r1, [r2, #0]
    p = add;
    while( add_len > 0 )
    {
        use_len = ( add_len < 16 ) ? add_len : 16;

        for( i = 0; i < use_len; i++ )
 80a592e:	9914      	ldr	r1, [sp, #80]	; 0x50
 80a5930:	4299      	cmp	r1, r3
 80a5932:	d1f6      	bne.n	80a5922 <mbedtls_gcm_starts+0x118>
            ctx->buf[i] ^= p[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );
 80a5934:	4652      	mov	r2, sl
 80a5936:	4651      	mov	r1, sl
 80a5938:	4620      	mov	r0, r4
 80a593a:	f7ff fdfd 	bl	80a5538 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>

        add_len -= use_len;
 80a593e:	1b76      	subs	r6, r6, r5
        return( ret );
    }

    ctx->add_len = add_len;
    p = add;
    while( add_len > 0 )
 80a5940:	e7e4      	b.n	80a590c <mbedtls_gcm_starts+0x102>
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
      ( (uint64_t) iv_len  ) >> 61 != 0 ||
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 80a5942:	f06f 0013 	mvn.w	r0, #19
 80a5946:	e000      	b.n	80a594a <mbedtls_gcm_starts+0x140>

        add_len -= use_len;
        p += use_len;
    }

    return( 0 );
 80a5948:	4630      	mov	r0, r6
}
 80a594a:	b00b      	add	sp, #44	; 0x2c
 80a594c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a5950 <mbedtls_gcm_update>:

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
 80a5950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5954:	461f      	mov	r7, r3
 80a5956:	b08b      	sub	sp, #44	; 0x2c
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;
 80a5958:	2300      	movs	r3, #0

    if( output > input && (size_t) ( output - input ) < length )
 80a595a:	4297      	cmp	r7, r2

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
 80a595c:	4604      	mov	r4, r0
 80a595e:	460e      	mov	r6, r1
 80a5960:	4690      	mov	r8, r2
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;
 80a5962:	9305      	str	r3, [sp, #20]

    if( output > input && (size_t) ( output - input ) < length )
 80a5964:	d902      	bls.n	80a596c <mbedtls_gcm_update+0x1c>
 80a5966:	1abb      	subs	r3, r7, r2
 80a5968:	428b      	cmp	r3, r1
 80a596a:	d35c      	bcc.n	80a5a26 <mbedtls_gcm_update+0xd6>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */
    if( ctx->len + length < ctx->len ||
 80a596c:	4625      	mov	r5, r4
 80a596e:	e9f5 014e 	ldrd	r0, r1, [r5, #312]!	; 0x138
 80a5972:	1982      	adds	r2, r0, r6
 80a5974:	f141 0300 	adc.w	r3, r1, #0
 80a5978:	428b      	cmp	r3, r1
 80a597a:	bf08      	it	eq
 80a597c:	4282      	cmpeq	r2, r0
 80a597e:	d352      	bcc.n	80a5a26 <mbedtls_gcm_update+0xd6>
 80a5980:	210f      	movs	r1, #15
 80a5982:	f06f 001f 	mvn.w	r0, #31
 80a5986:	4299      	cmp	r1, r3
 80a5988:	bf08      	it	eq
 80a598a:	4290      	cmpeq	r0, r2
 80a598c:	d34b      	bcc.n	80a5a26 <mbedtls_gcm_update+0xd6>
        (uint64_t) ctx->len + length > 0xFFFFFFFE0ull )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    ctx->len += length;
 80a598e:	e9c5 2300 	strd	r2, r3, [r5]
 80a5992:	f504 73b2 	add.w	r3, r4, #356	; 0x164
 80a5996:	9302      	str	r3, [sp, #8]

        for( i = 16; i > 12; i-- )
            if( ++ctx->y[i - 1] != 0 )
                break;

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 80a5998:	f504 73ac 	add.w	r3, r4, #344	; 0x158
 80a599c:	f10d 0a18 	add.w	sl, sp, #24
 80a59a0:	9303      	str	r3, [sp, #12]
    }

    ctx->len += length;

    p = input;
    while( length > 0 )
 80a59a2:	2e00      	cmp	r6, #0
 80a59a4:	d042      	beq.n	80a5a2c <mbedtls_gcm_update+0xdc>
 80a59a6:	f504 75b4 	add.w	r5, r4, #360	; 0x168
    {
        use_len = ( length < 16 ) ? length : 16;
 80a59aa:	462a      	mov	r2, r5
 80a59ac:	46ab      	mov	fp, r5
 80a59ae:	2e10      	cmp	r6, #16
 80a59b0:	46b1      	mov	r9, r6
 80a59b2:	bf28      	it	cs
 80a59b4:	f04f 0910 	movcs.w	r9, #16

        for( i = 16; i > 12; i-- )
            if( ++ctx->y[i - 1] != 0 )
 80a59b8:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
 80a59bc:	3301      	adds	r3, #1
 80a59be:	b2db      	uxtb	r3, r3
 80a59c0:	7013      	strb	r3, [r2, #0]
 80a59c2:	b913      	cbnz	r3, 80a59ca <mbedtls_gcm_update+0x7a>
    p = input;
    while( length > 0 )
    {
        use_len = ( length < 16 ) ? length : 16;

        for( i = 16; i > 12; i-- )
 80a59c4:	9b02      	ldr	r3, [sp, #8]
 80a59c6:	429a      	cmp	r2, r3
 80a59c8:	d1f6      	bne.n	80a59b8 <mbedtls_gcm_update+0x68>
            if( ++ctx->y[i - 1] != 0 )
                break;

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 80a59ca:	ab05      	add	r3, sp, #20
 80a59cc:	9300      	str	r3, [sp, #0]
 80a59ce:	2210      	movs	r2, #16
 80a59d0:	4653      	mov	r3, sl
 80a59d2:	9903      	ldr	r1, [sp, #12]
 80a59d4:	4620      	mov	r0, r4
 80a59d6:	f7fb fef3 	bl	80a17c0 <mbedtls_cipher_update>
 80a59da:	bb40      	cbnz	r0, 80a5a2e <mbedtls_gcm_update+0xde>
 80a59dc:	4642      	mov	r2, r8
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
        {
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
 80a59de:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
 80a59e2:	b91b      	cbnz	r3, 80a59ec <mbedtls_gcm_update+0x9c>
                ctx->buf[i] ^= p[i];
 80a59e4:	7829      	ldrb	r1, [r5, #0]
 80a59e6:	7813      	ldrb	r3, [r2, #0]
 80a59e8:	404b      	eors	r3, r1
 80a59ea:	702b      	strb	r3, [r5, #0]
            out_p[i] = ectr[i] ^ p[i];
 80a59ec:	f812 1b01 	ldrb.w	r1, [r2], #1
 80a59f0:	f81a 3000 	ldrb.w	r3, [sl, r0]
 80a59f4:	3501      	adds	r5, #1
 80a59f6:	404b      	eors	r3, r1
 80a59f8:	543b      	strb	r3, [r7, r0]
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
 80a59fa:	f8d4 1178 	ldr.w	r1, [r4, #376]	; 0x178
                                   &olen ) ) != 0 )
        {
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
 80a59fe:	3001      	adds	r0, #1
        {
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
                ctx->buf[i] ^= p[i];
            out_p[i] = ectr[i] ^ p[i];
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
 80a5a00:	2901      	cmp	r1, #1
                ctx->buf[i] ^= out_p[i];
 80a5a02:	bf02      	ittt	eq
 80a5a04:	f815 1c01 	ldrbeq.w	r1, [r5, #-1]
 80a5a08:	404b      	eoreq	r3, r1
 80a5a0a:	f805 3c01 	strbeq.w	r3, [r5, #-1]
                                   &olen ) ) != 0 )
        {
            return( ret );
        }

        for( i = 0; i < use_len; i++ )
 80a5a0e:	4581      	cmp	r9, r0
 80a5a10:	d1e5      	bne.n	80a59de <mbedtls_gcm_update+0x8e>
            out_p[i] = ectr[i] ^ p[i];
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
                ctx->buf[i] ^= out_p[i];
        }

        gcm_mult( ctx, ctx->buf, ctx->buf );
 80a5a12:	465a      	mov	r2, fp
 80a5a14:	4659      	mov	r1, fp
 80a5a16:	4620      	mov	r0, r4
 80a5a18:	f7ff fd8e 	bl	80a5538 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>

        length -= use_len;
 80a5a1c:	ebc9 0606 	rsb	r6, r9, r6
        p += use_len;
 80a5a20:	44c8      	add	r8, r9
        out_p += use_len;
 80a5a22:	444f      	add	r7, r9
    }

    ctx->len += length;

    p = input;
    while( length > 0 )
 80a5a24:	e7bd      	b.n	80a59a2 <mbedtls_gcm_update+0x52>
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;

    if( output > input && (size_t) ( output - input ) < length )
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 80a5a26:	f06f 0013 	mvn.w	r0, #19
 80a5a2a:	e000      	b.n	80a5a2e <mbedtls_gcm_update+0xde>
        length -= use_len;
        p += use_len;
        out_p += use_len;
    }

    return( 0 );
 80a5a2c:	4630      	mov	r0, r6
}
 80a5a2e:	b00b      	add	sp, #44	; 0x2c
 80a5a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a5a34 <mbedtls_gcm_finish>:

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
 80a5a34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80a5a38:	4688      	mov	r8, r1
    unsigned char work_buf[16];
    size_t i;
    uint64_t orig_len = ctx->len * 8;
 80a5a3a:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
 80a5a3e:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
 80a5a42:	00cd      	lsls	r5, r1, #3
    uint64_t orig_add_len = ctx->add_len * 8;
 80a5a44:	f8d0 1144 	ldr.w	r1, [r0, #324]	; 0x144
                unsigned char *tag,
                size_t tag_len )
{
    unsigned char work_buf[16];
    size_t i;
    uint64_t orig_len = ctx->len * 8;
 80a5a48:	ea45 7553 	orr.w	r5, r5, r3, lsr #29
 80a5a4c:	00dc      	lsls	r4, r3, #3
    uint64_t orig_add_len = ctx->add_len * 8;
 80a5a4e:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
 80a5a52:	00cf      	lsls	r7, r1, #3
 80a5a54:	ea47 7753 	orr.w	r7, r7, r3, lsr #29
 80a5a58:	00de      	lsls	r6, r3, #3

    if( tag_len > 16 || tag_len < 4 )
 80a5a5a:	1f13      	subs	r3, r2, #4
 80a5a5c:	2b0c      	cmp	r3, #12
}

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
 80a5a5e:	4681      	mov	r9, r0
 80a5a60:	4692      	mov	sl, r2
    unsigned char work_buf[16];
    size_t i;
    uint64_t orig_len = ctx->len * 8;
    uint64_t orig_add_len = ctx->add_len * 8;

    if( tag_len > 16 || tag_len < 4 )
 80a5a62:	d85b      	bhi.n	80a5b1c <mbedtls_gcm_finish+0xe8>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    memcpy( tag, ctx->base_ectr, tag_len );
 80a5a64:	f500 71a4 	add.w	r1, r0, #328	; 0x148
 80a5a68:	4640      	mov	r0, r8
 80a5a6a:	f009 fb42 	bl	80af0f2 <memcpy>

    if( orig_len || orig_add_len )
 80a5a6e:	ea54 0305 	orrs.w	r3, r4, r5
 80a5a72:	d104      	bne.n	80a5a7e <mbedtls_gcm_finish+0x4a>
 80a5a74:	ea56 0307 	orrs.w	r3, r6, r7
 80a5a78:	d101      	bne.n	80a5a7e <mbedtls_gcm_finish+0x4a>

        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
    }

    return( 0 );
 80a5a7a:	2000      	movs	r0, #0
 80a5a7c:	e050      	b.n	80a5b20 <mbedtls_gcm_finish+0xec>

    memcpy( tag, ctx->base_ectr, tag_len );

    if( orig_len || orig_add_len )
    {
        memset( work_buf, 0x00, 16 );
 80a5a7e:	2210      	movs	r2, #16
 80a5a80:	2100      	movs	r1, #0
 80a5a82:	4668      	mov	r0, sp
 80a5a84:	f009 fb5b 	bl	80af13e <memset>

        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 80a5a88:	0e3b      	lsrs	r3, r7, #24
 80a5a8a:	f88d 3000 	strb.w	r3, [sp]
 80a5a8e:	0c3b      	lsrs	r3, r7, #16
 80a5a90:	f88d 3001 	strb.w	r3, [sp, #1]
 80a5a94:	0a3b      	lsrs	r3, r7, #8
 80a5a96:	f88d 3002 	strb.w	r3, [sp, #2]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 80a5a9a:	0e33      	lsrs	r3, r6, #24
 80a5a9c:	f88d 3004 	strb.w	r3, [sp, #4]
 80a5aa0:	0c33      	lsrs	r3, r6, #16
 80a5aa2:	f88d 3005 	strb.w	r3, [sp, #5]
 80a5aa6:	0a33      	lsrs	r3, r6, #8
 80a5aa8:	f88d 3006 	strb.w	r3, [sp, #6]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 80a5aac:	0e2b      	lsrs	r3, r5, #24
 80a5aae:	f88d 3008 	strb.w	r3, [sp, #8]
 80a5ab2:	0c2b      	lsrs	r3, r5, #16
 80a5ab4:	f88d 3009 	strb.w	r3, [sp, #9]
 80a5ab8:	0a2b      	lsrs	r3, r5, #8
 80a5aba:	f88d 300a 	strb.w	r3, [sp, #10]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
 80a5abe:	0e23      	lsrs	r3, r4, #24
 80a5ac0:	f88d 300c 	strb.w	r3, [sp, #12]
 80a5ac4:	0c23      	lsrs	r3, r4, #16
 80a5ac6:	f88d 300d 	strb.w	r3, [sp, #13]
 80a5aca:	f88d 400f 	strb.w	r4, [sp, #15]
 80a5ace:	0a23      	lsrs	r3, r4, #8
 80a5ad0:	f209 1467 	addw	r4, r9, #359	; 0x167
 80a5ad4:	4622      	mov	r2, r4
 80a5ad6:	f88d 300e 	strb.w	r3, [sp, #14]

    if( orig_len || orig_add_len )
    {
        memset( work_buf, 0x00, 16 );

        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 80a5ada:	f88d 7003 	strb.w	r7, [sp, #3]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 80a5ade:	f88d 6007 	strb.w	r6, [sp, #7]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 80a5ae2:	f88d 500b 	strb.w	r5, [sp, #11]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
 80a5ae6:	2300      	movs	r3, #0
            ctx->buf[i] ^= work_buf[i];
 80a5ae8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80a5aec:	f81d 1003 	ldrb.w	r1, [sp, r3]
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
 80a5af0:	3301      	adds	r3, #1
            ctx->buf[i] ^= work_buf[i];
 80a5af2:	4041      	eors	r1, r0
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
 80a5af4:	2b10      	cmp	r3, #16
            ctx->buf[i] ^= work_buf[i];
 80a5af6:	7011      	strb	r1, [r2, #0]
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );

        for( i = 0; i < 16; i++ )
 80a5af8:	d1f6      	bne.n	80a5ae8 <mbedtls_gcm_finish+0xb4>
            ctx->buf[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );
 80a5afa:	f509 72b4 	add.w	r2, r9, #360	; 0x168
 80a5afe:	4611      	mov	r1, r2
 80a5b00:	4648      	mov	r0, r9
 80a5b02:	f7ff fd19 	bl	80a5538 <_ZL8gcm_multP19mbedtls_gcm_contextPKhPh>
 80a5b06:	4641      	mov	r1, r8
 80a5b08:	44c2      	add	sl, r8

        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
 80a5b0a:	780a      	ldrb	r2, [r1, #0]
 80a5b0c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80a5b10:	4053      	eors	r3, r2
 80a5b12:	f801 3b01 	strb.w	r3, [r1], #1
        for( i = 0; i < 16; i++ )
            ctx->buf[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->buf, ctx->buf );

        for( i = 0; i < tag_len; i++ )
 80a5b16:	4551      	cmp	r1, sl
 80a5b18:	d1f7      	bne.n	80a5b0a <mbedtls_gcm_finish+0xd6>
 80a5b1a:	e7ae      	b.n	80a5a7a <mbedtls_gcm_finish+0x46>
    size_t i;
    uint64_t orig_len = ctx->len * 8;
    uint64_t orig_add_len = ctx->add_len * 8;

    if( tag_len > 16 || tag_len < 4 )
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 80a5b1c:	f06f 0013 	mvn.w	r0, #19
        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
    }

    return( 0 );
}
 80a5b20:	b004      	add	sp, #16
 80a5b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a5b26 <mbedtls_gcm_crypt_and_tag>:
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 80a5b26:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a5b2a:	4617      	mov	r7, r2
 80a5b2c:	461a      	mov	r2, r3
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 80a5b2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 80a5b30:	4604      	mov	r4, r0
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 80a5b32:	9301      	str	r3, [sp, #4]
 80a5b34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 80a5b36:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 80a5b3a:	9300      	str	r3, [sp, #0]
 80a5b3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 80a5b3e:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80a5b42:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80a5b44:	9d10      	ldr	r5, [sp, #64]	; 0x40
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 80a5b46:	f7ff fe60 	bl	80a580a <mbedtls_gcm_starts>
 80a5b4a:	b970      	cbnz	r0, 80a5b6a <mbedtls_gcm_crypt_and_tag+0x44>
        return( ret );

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
 80a5b4c:	464b      	mov	r3, r9
 80a5b4e:	4642      	mov	r2, r8
 80a5b50:	4639      	mov	r1, r7
 80a5b52:	4620      	mov	r0, r4
 80a5b54:	f7ff fefc 	bl	80a5950 <mbedtls_gcm_update>
 80a5b58:	b938      	cbnz	r0, 80a5b6a <mbedtls_gcm_crypt_and_tag+0x44>
        return( ret );

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 80a5b5a:	4632      	mov	r2, r6
 80a5b5c:	4629      	mov	r1, r5
 80a5b5e:	4620      	mov	r0, r4
        return( ret );

    return( 0 );
}
 80a5b60:	b003      	add	sp, #12
 80a5b62:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return( ret );

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
        return( ret );

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 80a5b66:	f7ff bf65 	b.w	80a5a34 <mbedtls_gcm_finish>
        return( ret );

    return( 0 );
}
 80a5b6a:	b003      	add	sp, #12
 80a5b6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080a5b70 <mbedtls_gcm_auth_decrypt>:
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 80a5b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a5b72:	460e      	mov	r6, r1
 80a5b74:	b08d      	sub	sp, #52	; 0x34
    int ret;
    unsigned char check_tag[16];
    size_t i;
    int diff;

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 80a5b76:	9916      	ldr	r1, [sp, #88]	; 0x58
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 80a5b78:	9d15      	ldr	r5, [sp, #84]	; 0x54
    int ret;
    unsigned char check_tag[16];
    size_t i;
    int diff;

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 80a5b7a:	9103      	str	r1, [sp, #12]
 80a5b7c:	9913      	ldr	r1, [sp, #76]	; 0x4c
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 80a5b7e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    int ret;
    unsigned char check_tag[16];
    size_t i;
    int diff;

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 80a5b80:	9102      	str	r1, [sp, #8]
 80a5b82:	9912      	ldr	r1, [sp, #72]	; 0x48
 80a5b84:	af08      	add	r7, sp, #32
 80a5b86:	9101      	str	r1, [sp, #4]
 80a5b88:	9300      	str	r3, [sp, #0]
 80a5b8a:	9706      	str	r7, [sp, #24]
 80a5b8c:	4613      	mov	r3, r2
 80a5b8e:	9505      	str	r5, [sp, #20]
 80a5b90:	9404      	str	r4, [sp, #16]
 80a5b92:	4632      	mov	r2, r6
 80a5b94:	2100      	movs	r1, #0
 80a5b96:	f7ff ffc6 	bl	80a5b26 <mbedtls_gcm_crypt_and_tag>
 80a5b9a:	b998      	cbnz	r0, 80a5bc4 <mbedtls_gcm_auth_decrypt+0x54>
 80a5b9c:	4603      	mov	r3, r0
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 80a5b9e:	42ab      	cmp	r3, r5
 80a5ba0:	d006      	beq.n	80a5bb0 <mbedtls_gcm_auth_decrypt+0x40>
        diff |= tag[i] ^ check_tag[i];
 80a5ba2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a5ba4:	5cd1      	ldrb	r1, [r2, r3]
 80a5ba6:	5cfa      	ldrb	r2, [r7, r3]
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 80a5ba8:	3301      	adds	r3, #1
        diff |= tag[i] ^ check_tag[i];
 80a5baa:	404a      	eors	r2, r1
 80a5bac:	4310      	orrs	r0, r2
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 80a5bae:	e7f6      	b.n	80a5b9e <mbedtls_gcm_auth_decrypt+0x2e>
        diff |= tag[i] ^ check_tag[i];

    if( diff != 0 )
 80a5bb0:	b140      	cbz	r0, 80a5bc4 <mbedtls_gcm_auth_decrypt+0x54>
 80a5bb2:	4426      	add	r6, r4
}
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80a5bb4:	2300      	movs	r3, #0
 80a5bb6:	42a6      	cmp	r6, r4
 80a5bb8:	d002      	beq.n	80a5bc0 <mbedtls_gcm_auth_decrypt+0x50>
 80a5bba:	7023      	strb	r3, [r4, #0]
 80a5bbc:	3401      	adds	r4, #1
 80a5bbe:	e7fa      	b.n	80a5bb6 <mbedtls_gcm_auth_decrypt+0x46>
        diff |= tag[i] ^ check_tag[i];

    if( diff != 0 )
    {
        mbedtls_zeroize( output, length );
        return( MBEDTLS_ERR_GCM_AUTH_FAILED );
 80a5bc0:	f06f 0011 	mvn.w	r0, #17
    }

    return( 0 );
}
 80a5bc4:	b00d      	add	sp, #52	; 0x34
 80a5bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a5bc8 <mbedtls_gcm_free>:

void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
{
 80a5bc8:	b510      	push	{r4, lr}
 80a5bca:	4604      	mov	r4, r0
    mbedtls_cipher_free( &ctx->cipher_ctx );
 80a5bcc:	f7fb fd7e 	bl	80a16cc <mbedtls_cipher_free>
 80a5bd0:	f504 72c0 	add.w	r2, r4, #384	; 0x180
}
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80a5bd4:	2300      	movs	r3, #0
 80a5bd6:	4294      	cmp	r4, r2
 80a5bd8:	d002      	beq.n	80a5be0 <mbedtls_gcm_free+0x18>
 80a5bda:	7023      	strb	r3, [r4, #0]
 80a5bdc:	3401      	adds	r4, #1
 80a5bde:	e7fa      	b.n	80a5bd6 <mbedtls_gcm_free+0xe>
 80a5be0:	bd10      	pop	{r4, pc}
	...

080a5be4 <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 80a5be4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 80a5be8:	2700      	movs	r7, #0
 80a5bea:	463c      	mov	r4, r7
 80a5bec:	463d      	mov	r5, r7
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 80a5bee:	f8dd e01c 	ldr.w	lr, [sp, #28]
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] == '=' && ++j > 2 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 80a5bf2:	f8df 8118 	ldr.w	r8, [pc, #280]	; 80a5d0c <mbedtls_base64_decode+0x128>
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 80a5bf6:	4575      	cmp	r5, lr
 80a5bf8:	d22d      	bcs.n	80a5c56 <mbedtls_base64_decode+0x72>
 80a5bfa:	f04f 0c00 	mov.w	ip, #0
    {
        /* Skip spaces before checking for EOL */
        x = 0;
        while( i < slen && src[i] == ' ' )
 80a5bfe:	5d5e      	ldrb	r6, [r3, r5]
 80a5c00:	2e20      	cmp	r6, #32
 80a5c02:	d104      	bne.n	80a5c0e <mbedtls_base64_decode+0x2a>
        {
            ++i;
 80a5c04:	3501      	adds	r5, #1
    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
    {
        /* Skip spaces before checking for EOL */
        x = 0;
        while( i < slen && src[i] == ' ' )
 80a5c06:	45ae      	cmp	lr, r5
        {
            ++i;
            ++x;
 80a5c08:	f10c 0c01 	add.w	ip, ip, #1
    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
    {
        /* Skip spaces before checking for EOL */
        x = 0;
        while( i < slen && src[i] == ' ' )
 80a5c0c:	d8f7      	bhi.n	80a5bfe <mbedtls_base64_decode+0x1a>
            ++i;
            ++x;
        }

        /* Spaces at end of buffer are OK */
        if( i == slen )
 80a5c0e:	45ae      	cmp	lr, r5
 80a5c10:	d021      	beq.n	80a5c56 <mbedtls_base64_decode+0x72>
            break;

        if( ( slen - i ) >= 2 &&
 80a5c12:	ebc5 060e 	rsb	r6, r5, lr
 80a5c16:	2e01      	cmp	r6, #1
 80a5c18:	d906      	bls.n	80a5c28 <mbedtls_base64_decode+0x44>
 80a5c1a:	5d5e      	ldrb	r6, [r3, r5]
 80a5c1c:	2e0d      	cmp	r6, #13
 80a5c1e:	d103      	bne.n	80a5c28 <mbedtls_base64_decode+0x44>
            src[i] == '\r' && src[i + 1] == '\n' )
 80a5c20:	195e      	adds	r6, r3, r5
 80a5c22:	7876      	ldrb	r6, [r6, #1]
 80a5c24:	2e0a      	cmp	r6, #10
 80a5c26:	d014      	beq.n	80a5c52 <mbedtls_base64_decode+0x6e>
            continue;

        if( src[i] == '\n' )
 80a5c28:	5d5e      	ldrb	r6, [r3, r5]
 80a5c2a:	2e0a      	cmp	r6, #10
 80a5c2c:	d011      	beq.n	80a5c52 <mbedtls_base64_decode+0x6e>
            continue;

        /* Space inside a line is an error */
        if( x != 0 )
 80a5c2e:	f1bc 0f00 	cmp.w	ip, #0
 80a5c32:	d166      	bne.n	80a5d02 <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] == '=' && ++j > 2 )
 80a5c34:	2e3d      	cmp	r6, #61	; 0x3d
 80a5c36:	d102      	bne.n	80a5c3e <mbedtls_base64_decode+0x5a>
 80a5c38:	3701      	adds	r7, #1
 80a5c3a:	2f02      	cmp	r7, #2
 80a5c3c:	d861      	bhi.n	80a5d02 <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 80a5c3e:	f016 0f80 	tst.w	r6, #128	; 0x80
 80a5c42:	d15e      	bne.n	80a5d02 <mbedtls_base64_decode+0x11e>
 80a5c44:	f818 6006 	ldrb.w	r6, [r8, r6]
 80a5c48:	2e7f      	cmp	r6, #127	; 0x7f
 80a5c4a:	d05a      	beq.n	80a5d02 <mbedtls_base64_decode+0x11e>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( base64_dec_map[src[i]] < 64 && j != 0 )
 80a5c4c:	2e3f      	cmp	r6, #63	; 0x3f
 80a5c4e:	d956      	bls.n	80a5cfe <mbedtls_base64_decode+0x11a>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        n++;
 80a5c50:	3401      	adds	r4, #1
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 80a5c52:	3501      	adds	r5, #1
 80a5c54:	e7cf      	b.n	80a5bf6 <mbedtls_base64_decode+0x12>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        n++;
    }

    if( n == 0 )
 80a5c56:	b91c      	cbnz	r4, 80a5c60 <mbedtls_base64_decode+0x7c>
    {
        *olen = 0;
 80a5c58:	6014      	str	r4, [r2, #0]
        return( 0 );
 80a5c5a:	4620      	mov	r0, r4
 80a5c5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    /* The following expression is to calculate the following formula without
     * risk of integer overflow in n:
     *     n = ( ( n * 6 ) + 7 ) >> 3;
     */
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
    n -= j;
 80a5c60:	f004 0e07 	and.w	lr, r4, #7
 80a5c64:	2606      	movs	r6, #6
 80a5c66:	08e4      	lsrs	r4, r4, #3
 80a5c68:	fb06 fe0e 	mul.w	lr, r6, lr
 80a5c6c:	4366      	muls	r6, r4
 80a5c6e:	f10e 0e07 	add.w	lr, lr, #7
 80a5c72:	1bf6      	subs	r6, r6, r7
 80a5c74:	eb06 04de 	add.w	r4, r6, lr, lsr #3

    if( dst == NULL || dlen < n )
 80a5c78:	b160      	cbz	r0, 80a5c94 <mbedtls_base64_decode+0xb0>
 80a5c7a:	428c      	cmp	r4, r1
 80a5c7c:	d80a      	bhi.n	80a5c94 <mbedtls_base64_decode+0xb0>
 80a5c7e:	2600      	movs	r6, #0
 80a5c80:	eb03 0e05 	add.w	lr, r3, r5
 80a5c84:	4601      	mov	r1, r0
 80a5c86:	2503      	movs	r5, #3
 80a5c88:	4634      	mov	r4, r6
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 80a5c8a:	f8df c080 	ldr.w	ip, [pc, #128]	; 80a5d0c <mbedtls_base64_decode+0x128>
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 80a5c8e:	f8df 8080 	ldr.w	r8, [pc, #128]	; 80a5d10 <mbedtls_base64_decode+0x12c>
 80a5c92:	e00f      	b.n	80a5cb4 <mbedtls_base64_decode+0xd0>
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
    n -= j;

    if( dst == NULL || dlen < n )
    {
        *olen = n;
 80a5c94:	6014      	str	r4, [r2, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
 80a5c96:	f06f 0029 	mvn.w	r0, #41	; 0x29
 80a5c9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 80a5c9e:	f813 9b01 	ldrb.w	r9, [r3], #1
 80a5ca2:	f1a9 070a 	sub.w	r7, r9, #10
 80a5ca6:	b2ff      	uxtb	r7, r7
 80a5ca8:	2f16      	cmp	r7, #22
 80a5caa:	d806      	bhi.n	80a5cba <mbedtls_base64_decode+0xd6>
 80a5cac:	fa28 f707 	lsr.w	r7, r8, r7
 80a5cb0:	07ff      	lsls	r7, r7, #31
 80a5cb2:	d502      	bpl.n	80a5cba <mbedtls_base64_decode+0xd6>
    {
        *olen = n;
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 80a5cb4:	4573      	cmp	r3, lr
 80a5cb6:	d1f2      	bne.n	80a5c9e <mbedtls_base64_decode+0xba>
 80a5cb8:	e01c      	b.n	80a5cf4 <mbedtls_base64_decode+0x110>
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 80a5cba:	f81c 7009 	ldrb.w	r7, [ip, r9]
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
 80a5cbe:	3401      	adds	r4, #1
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 80a5cc0:	2f40      	cmp	r7, #64	; 0x40
 80a5cc2:	bf08      	it	eq
 80a5cc4:	3d01      	subeq	r5, #1
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 80a5cc6:	f007 073f 	and.w	r7, r7, #63	; 0x3f

        if( ++n == 4 )
 80a5cca:	2c04      	cmp	r4, #4
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
            continue;

        j -= ( base64_dec_map[*src] == 64 );
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 80a5ccc:	ea47 1686 	orr.w	r6, r7, r6, lsl #6

        if( ++n == 4 )
 80a5cd0:	d1f0      	bne.n	80a5cb4 <mbedtls_base64_decode+0xd0>
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 80a5cd2:	b16d      	cbz	r5, 80a5cf0 <mbedtls_base64_decode+0x10c>
 80a5cd4:	0c34      	lsrs	r4, r6, #16
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 80a5cd6:	2d01      	cmp	r5, #1
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 80a5cd8:	700c      	strb	r4, [r1, #0]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 80a5cda:	d101      	bne.n	80a5ce0 <mbedtls_base64_decode+0xfc>
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 80a5cdc:	3101      	adds	r1, #1
 80a5cde:	e007      	b.n	80a5cf0 <mbedtls_base64_decode+0x10c>
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
            if( j > 2 ) *p++ = (unsigned char)( x       );
 80a5ce0:	2d02      	cmp	r5, #2

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 80a5ce2:	ea4f 2416 	mov.w	r4, r6, lsr #8
 80a5ce6:	704c      	strb	r4, [r1, #1]
            if( j > 2 ) *p++ = (unsigned char)( x       );
 80a5ce8:	bf16      	itet	ne
 80a5cea:	708e      	strbne	r6, [r1, #2]

        if( ++n == 4 )
        {
            n = 0;
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 80a5cec:	3102      	addeq	r1, #2
            if( j > 2 ) *p++ = (unsigned char)( x       );
 80a5cee:	3103      	addne	r1, #3
        j -= ( base64_dec_map[*src] == 64 );
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );

        if( ++n == 4 )
        {
            n = 0;
 80a5cf0:	2400      	movs	r4, #0
 80a5cf2:	e7df      	b.n	80a5cb4 <mbedtls_base64_decode+0xd0>
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
            if( j > 2 ) *p++ = (unsigned char)( x       );
        }
    }

    *olen = p - dst;
 80a5cf4:	1a08      	subs	r0, r1, r0
 80a5cf6:	6010      	str	r0, [r2, #0]

    return( 0 );
 80a5cf8:	2000      	movs	r0, #0
 80a5cfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( base64_dec_map[src[i]] < 64 && j != 0 )
 80a5cfe:	2f00      	cmp	r7, #0
 80a5d00:	d0a6      	beq.n	80a5c50 <mbedtls_base64_decode+0x6c>
        if( src[i] == '\n' )
            continue;

        /* Space inside a line is an error */
        if( x != 0 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 80a5d02:	f06f 002b 	mvn.w	r0, #43	; 0x2b
 80a5d06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a5d0a:	bf00      	nop
 80a5d0c:	080b0790 	.word	0x080b0790
 80a5d10:	00400009 	.word	0x00400009

080a5d14 <mbedtls_md_info_from_type>:
#endif
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
 80a5d14:	3804      	subs	r0, #4
 80a5d16:	b2c0      	uxtb	r0, r0
 80a5d18:	2804      	cmp	r0, #4
 80a5d1a:	bf9a      	itte	ls
 80a5d1c:	4b02      	ldrls	r3, [pc, #8]	; (80a5d28 <mbedtls_md_info_from_type+0x14>)
 80a5d1e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80a5d22:	2000      	movhi	r0, #0
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
    }
}
 80a5d24:	4770      	bx	lr
 80a5d26:	bf00      	nop
 80a5d28:	080b0810 	.word	0x080b0810

080a5d2c <mbedtls_md_init>:

void mbedtls_md_init( mbedtls_md_context_t *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_md_context_t ) );
 80a5d2c:	2300      	movs	r3, #0
 80a5d2e:	6003      	str	r3, [r0, #0]
 80a5d30:	6043      	str	r3, [r0, #4]
 80a5d32:	6083      	str	r3, [r0, #8]
 80a5d34:	4770      	bx	lr

080a5d36 <mbedtls_md_free>:
}

void mbedtls_md_free( mbedtls_md_context_t *ctx )
{
 80a5d36:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->md_info == NULL )
 80a5d38:	4604      	mov	r4, r0
 80a5d3a:	b1e0      	cbz	r0, 80a5d76 <mbedtls_md_free+0x40>
 80a5d3c:	6803      	ldr	r3, [r0, #0]
 80a5d3e:	b1d3      	cbz	r3, 80a5d76 <mbedtls_md_free+0x40>
        return;

    if( ctx->md_ctx != NULL )
 80a5d40:	6840      	ldr	r0, [r0, #4]
 80a5d42:	b108      	cbz	r0, 80a5d48 <mbedtls_md_free+0x12>
        ctx->md_info->ctx_free_func( ctx->md_ctx );
 80a5d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a5d46:	4798      	blx	r3

    if( ctx->hmac_ctx != NULL )
 80a5d48:	68a3      	ldr	r3, [r4, #8]
 80a5d4a:	b163      	cbz	r3, 80a5d66 <mbedtls_md_free+0x30>
    {
        mbedtls_zeroize( ctx->hmac_ctx, 2 * ctx->md_info->block_size );
 80a5d4c:	6822      	ldr	r2, [r4, #0]
#include <stdio.h>
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80a5d4e:	2100      	movs	r1, #0
 80a5d50:	68d2      	ldr	r2, [r2, #12]
 80a5d52:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80a5d56:	429a      	cmp	r2, r3
 80a5d58:	d002      	beq.n	80a5d60 <mbedtls_md_free+0x2a>
 80a5d5a:	7019      	strb	r1, [r3, #0]
 80a5d5c:	3301      	adds	r3, #1
 80a5d5e:	e7fa      	b.n	80a5d56 <mbedtls_md_free+0x20>
        ctx->md_info->ctx_free_func( ctx->md_ctx );

    if( ctx->hmac_ctx != NULL )
    {
        mbedtls_zeroize( ctx->hmac_ctx, 2 * ctx->md_info->block_size );
        mbedtls_free( ctx->hmac_ctx );
 80a5d60:	68a0      	ldr	r0, [r4, #8]
 80a5d62:	f008 f8d3 	bl	80adf0c <free>
 80a5d66:	f104 020c 	add.w	r2, r4, #12
#include <stdio.h>
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80a5d6a:	2300      	movs	r3, #0
 80a5d6c:	4294      	cmp	r4, r2
 80a5d6e:	d002      	beq.n	80a5d76 <mbedtls_md_free+0x40>
 80a5d70:	7023      	strb	r3, [r4, #0]
 80a5d72:	3401      	adds	r4, #1
 80a5d74:	e7fa      	b.n	80a5d6c <mbedtls_md_free+0x36>
 80a5d76:	bd10      	pop	{r4, pc}

080a5d78 <mbedtls_md_setup>:
    return mbedtls_md_setup( ctx, md_info, 1 );
}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
 80a5d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a5d7a:	4605      	mov	r5, r0
 80a5d7c:	4617      	mov	r7, r2
    if( md_info == NULL || ctx == NULL )
 80a5d7e:	460c      	mov	r4, r1
 80a5d80:	b199      	cbz	r1, 80a5daa <mbedtls_md_setup+0x32>
 80a5d82:	b190      	cbz	r0, 80a5daa <mbedtls_md_setup+0x32>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
 80a5d84:	6a0b      	ldr	r3, [r1, #32]
 80a5d86:	4798      	blx	r3
 80a5d88:	4606      	mov	r6, r0
 80a5d8a:	6068      	str	r0, [r5, #4]
 80a5d8c:	b178      	cbz	r0, 80a5dae <mbedtls_md_setup+0x36>
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );

    if( hmac != 0 )
 80a5d8e:	b14f      	cbz	r7, 80a5da4 <mbedtls_md_setup+0x2c>
    {
        ctx->hmac_ctx = mbedtls_calloc( 2, md_info->block_size );
 80a5d90:	68e1      	ldr	r1, [r4, #12]
 80a5d92:	2002      	movs	r0, #2
 80a5d94:	f009 f988 	bl	80af0a8 <calloc>
 80a5d98:	60a8      	str	r0, [r5, #8]
        if( ctx->hmac_ctx == NULL )
 80a5d9a:	b918      	cbnz	r0, 80a5da4 <mbedtls_md_setup+0x2c>
        {
            md_info->ctx_free_func( ctx->md_ctx );
 80a5d9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a5d9e:	4630      	mov	r0, r6
 80a5da0:	4798      	blx	r3
 80a5da2:	e004      	b.n	80a5dae <mbedtls_md_setup+0x36>
            return( MBEDTLS_ERR_MD_ALLOC_FAILED );
        }
    }

    ctx->md_info = md_info;
 80a5da4:	602c      	str	r4, [r5, #0]

    return( 0 );
 80a5da6:	2000      	movs	r0, #0
 80a5da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
    if( md_info == NULL || ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 80a5daa:	4802      	ldr	r0, [pc, #8]	; (80a5db4 <mbedtls_md_setup+0x3c>)
 80a5dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );
 80a5dae:	4802      	ldr	r0, [pc, #8]	; (80a5db8 <mbedtls_md_setup+0x40>)
    }

    ctx->md_info = md_info;

    return( 0 );
}
 80a5db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a5db2:	bf00      	nop
 80a5db4:	ffffaf00 	.word	0xffffaf00
 80a5db8:	ffffae80 	.word	0xffffae80

080a5dbc <mbedtls_md_starts>:

int mbedtls_md_starts( mbedtls_md_context_t *ctx )
{
    if( ctx == NULL || ctx->md_info == NULL )
 80a5dbc:	b120      	cbz	r0, 80a5dc8 <mbedtls_md_starts+0xc>
 80a5dbe:	6803      	ldr	r3, [r0, #0]
 80a5dc0:	b113      	cbz	r3, 80a5dc8 <mbedtls_md_starts+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->starts_func( ctx->md_ctx ) );
 80a5dc2:	691b      	ldr	r3, [r3, #16]
 80a5dc4:	6840      	ldr	r0, [r0, #4]
 80a5dc6:	4718      	bx	r3
}
 80a5dc8:	4800      	ldr	r0, [pc, #0]	; (80a5dcc <mbedtls_md_starts+0x10>)
 80a5dca:	4770      	bx	lr
 80a5dcc:	ffffaf00 	.word	0xffffaf00

080a5dd0 <mbedtls_md_update>:

int mbedtls_md_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL )
 80a5dd0:	b120      	cbz	r0, 80a5ddc <mbedtls_md_update+0xc>
 80a5dd2:	6803      	ldr	r3, [r0, #0]
 80a5dd4:	b113      	cbz	r3, 80a5ddc <mbedtls_md_update+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 80a5dd6:	695b      	ldr	r3, [r3, #20]
 80a5dd8:	6840      	ldr	r0, [r0, #4]
 80a5dda:	4718      	bx	r3
}
 80a5ddc:	4800      	ldr	r0, [pc, #0]	; (80a5de0 <mbedtls_md_update+0x10>)
 80a5dde:	4770      	bx	lr
 80a5de0:	ffffaf00 	.word	0xffffaf00

080a5de4 <mbedtls_md_finish>:

int mbedtls_md_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
    if( ctx == NULL || ctx->md_info == NULL )
 80a5de4:	b120      	cbz	r0, 80a5df0 <mbedtls_md_finish+0xc>
 80a5de6:	6803      	ldr	r3, [r0, #0]
 80a5de8:	b113      	cbz	r3, 80a5df0 <mbedtls_md_finish+0xc>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
 80a5dea:	699b      	ldr	r3, [r3, #24]
 80a5dec:	6840      	ldr	r0, [r0, #4]
 80a5dee:	4718      	bx	r3
}
 80a5df0:	4800      	ldr	r0, [pc, #0]	; (80a5df4 <mbedtls_md_finish+0x10>)
 80a5df2:	4770      	bx	lr
 80a5df4:	ffffaf00 	.word	0xffffaf00

080a5df8 <mbedtls_md>:

int mbedtls_md( const mbedtls_md_info_t *md_info, const unsigned char *input, size_t ilen,
            unsigned char *output )
{
 80a5df8:	b430      	push	{r4, r5}
 80a5dfa:	460d      	mov	r5, r1
 80a5dfc:	4611      	mov	r1, r2
    if( md_info == NULL )
 80a5dfe:	b128      	cbz	r0, 80a5e0c <mbedtls_md+0x14>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( md_info->digest_func( input, ilen, output ) );
 80a5e00:	69c4      	ldr	r4, [r0, #28]
 80a5e02:	461a      	mov	r2, r3
 80a5e04:	4628      	mov	r0, r5
 80a5e06:	4623      	mov	r3, r4
}
 80a5e08:	bc30      	pop	{r4, r5}
            unsigned char *output )
{
    if( md_info == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( md_info->digest_func( input, ilen, output ) );
 80a5e0a:	4718      	bx	r3
}
 80a5e0c:	4801      	ldr	r0, [pc, #4]	; (80a5e14 <mbedtls_md+0x1c>)
 80a5e0e:	bc30      	pop	{r4, r5}
 80a5e10:	4770      	bx	lr
 80a5e12:	bf00      	nop
 80a5e14:	ffffaf00 	.word	0xffffaf00

080a5e18 <mbedtls_md_hmac_starts>:
    return( ret );
}
#endif /* MBEDTLS_FS_IO */

int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )
{
 80a5e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a5e1c:	460d      	mov	r5, r1
 80a5e1e:	b090      	sub	sp, #64	; 0x40
 80a5e20:	4617      	mov	r7, r2
    int ret;
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 80a5e22:	4604      	mov	r4, r0
 80a5e24:	2800      	cmp	r0, #0
 80a5e26:	d050      	beq.n	80a5eca <mbedtls_md_hmac_starts+0xb2>
 80a5e28:	6803      	ldr	r3, [r0, #0]
 80a5e2a:	2b00      	cmp	r3, #0
 80a5e2c:	d04d      	beq.n	80a5eca <mbedtls_md_hmac_starts+0xb2>
 80a5e2e:	6882      	ldr	r2, [r0, #8]
 80a5e30:	2a00      	cmp	r2, #0
 80a5e32:	d04a      	beq.n	80a5eca <mbedtls_md_hmac_starts+0xb2>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( keylen > (size_t) ctx->md_info->block_size )
 80a5e34:	68da      	ldr	r2, [r3, #12]
 80a5e36:	42ba      	cmp	r2, r7
 80a5e38:	d215      	bcs.n	80a5e66 <mbedtls_md_hmac_starts+0x4e>
    {
        if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 80a5e3a:	691b      	ldr	r3, [r3, #16]
 80a5e3c:	6840      	ldr	r0, [r0, #4]
 80a5e3e:	4798      	blx	r3
 80a5e40:	2800      	cmp	r0, #0
 80a5e42:	d139      	bne.n	80a5eb8 <mbedtls_md_hmac_starts+0xa0>
            goto cleanup;
        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
 80a5e44:	6823      	ldr	r3, [r4, #0]
 80a5e46:	463a      	mov	r2, r7
 80a5e48:	695b      	ldr	r3, [r3, #20]
 80a5e4a:	4629      	mov	r1, r5
 80a5e4c:	6860      	ldr	r0, [r4, #4]
 80a5e4e:	4798      	blx	r3
 80a5e50:	2800      	cmp	r0, #0
 80a5e52:	d131      	bne.n	80a5eb8 <mbedtls_md_hmac_starts+0xa0>
            goto cleanup;
        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
 80a5e54:	6823      	ldr	r3, [r4, #0]
 80a5e56:	4669      	mov	r1, sp
 80a5e58:	699b      	ldr	r3, [r3, #24]
 80a5e5a:	6860      	ldr	r0, [r4, #4]
 80a5e5c:	4798      	blx	r3
 80a5e5e:	bb58      	cbnz	r0, 80a5eb8 <mbedtls_md_hmac_starts+0xa0>
            goto cleanup;

        keylen = ctx->md_info->size;
        key = sum;
 80a5e60:	466d      	mov	r5, sp
        if( ( ret = ctx->md_info->update_func( ctx->md_ctx, key, keylen ) ) != 0 )
            goto cleanup;
        if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, sum ) ) != 0 )
            goto cleanup;

        keylen = ctx->md_info->size;
 80a5e62:	6823      	ldr	r3, [r4, #0]
 80a5e64:	689f      	ldr	r7, [r3, #8]
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 80a5e66:	6823      	ldr	r3, [r4, #0]

        keylen = ctx->md_info->size;
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
 80a5e68:	68a6      	ldr	r6, [r4, #8]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 80a5e6a:	68da      	ldr	r2, [r3, #12]

    memset( ipad, 0x36, ctx->md_info->block_size );
 80a5e6c:	2136      	movs	r1, #54	; 0x36
 80a5e6e:	4630      	mov	r0, r6
        keylen = ctx->md_info->size;
        key = sum;
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 80a5e70:	eb06 0802 	add.w	r8, r6, r2

    memset( ipad, 0x36, ctx->md_info->block_size );
 80a5e74:	f009 f963 	bl	80af13e <memset>
    memset( opad, 0x5C, ctx->md_info->block_size );
 80a5e78:	6823      	ldr	r3, [r4, #0]
 80a5e7a:	215c      	movs	r1, #92	; 0x5c
 80a5e7c:	68da      	ldr	r2, [r3, #12]
 80a5e7e:	4640      	mov	r0, r8
 80a5e80:	f009 f95d 	bl	80af13e <memset>

    for( i = 0; i < keylen; i++ )
 80a5e84:	2300      	movs	r3, #0
 80a5e86:	429f      	cmp	r7, r3
 80a5e88:	d00b      	beq.n	80a5ea2 <mbedtls_md_hmac_starts+0x8a>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 80a5e8a:	5cf1      	ldrb	r1, [r6, r3]
 80a5e8c:	5cea      	ldrb	r2, [r5, r3]
 80a5e8e:	404a      	eors	r2, r1
 80a5e90:	54f2      	strb	r2, [r6, r3]
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 80a5e92:	f818 1003 	ldrb.w	r1, [r8, r3]
 80a5e96:	5cea      	ldrb	r2, [r5, r3]
 80a5e98:	404a      	eors	r2, r1
 80a5e9a:	f808 2003 	strb.w	r2, [r8, r3]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;

    memset( ipad, 0x36, ctx->md_info->block_size );
    memset( opad, 0x5C, ctx->md_info->block_size );

    for( i = 0; i < keylen; i++ )
 80a5e9e:	3301      	adds	r3, #1
 80a5ea0:	e7f1      	b.n	80a5e86 <mbedtls_md_hmac_starts+0x6e>
    {
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
    }

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 80a5ea2:	6823      	ldr	r3, [r4, #0]
 80a5ea4:	6860      	ldr	r0, [r4, #4]
 80a5ea6:	691b      	ldr	r3, [r3, #16]
 80a5ea8:	4798      	blx	r3
 80a5eaa:	b928      	cbnz	r0, 80a5eb8 <mbedtls_md_hmac_starts+0xa0>
        goto cleanup;
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, ipad,
 80a5eac:	6823      	ldr	r3, [r4, #0]
 80a5eae:	4631      	mov	r1, r6
 80a5eb0:	695d      	ldr	r5, [r3, #20]
 80a5eb2:	68da      	ldr	r2, [r3, #12]
 80a5eb4:	6860      	ldr	r0, [r4, #4]
 80a5eb6:	47a8      	blx	r5
 80a5eb8:	2300      	movs	r3, #0
#include <stdio.h>
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80a5eba:	4619      	mov	r1, r3
 80a5ebc:	eb0d 0203 	add.w	r2, sp, r3
 80a5ec0:	3301      	adds	r3, #1
 80a5ec2:	2b41      	cmp	r3, #65	; 0x41
 80a5ec4:	d002      	beq.n	80a5ecc <mbedtls_md_hmac_starts+0xb4>
 80a5ec6:	7011      	strb	r1, [r2, #0]
 80a5ec8:	e7f8      	b.n	80a5ebc <mbedtls_md_hmac_starts+0xa4>
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 80a5eca:	4802      	ldr	r0, [pc, #8]	; (80a5ed4 <mbedtls_md_hmac_starts+0xbc>)

cleanup:
    mbedtls_zeroize( sum, sizeof( sum ) );

    return( ret );
}
 80a5ecc:	b010      	add	sp, #64	; 0x40
 80a5ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a5ed2:	bf00      	nop
 80a5ed4:	ffffaf00 	.word	0xffffaf00

080a5ed8 <mbedtls_md_hmac_update>:

int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
 80a5ed8:	b410      	push	{r4}
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 80a5eda:	b138      	cbz	r0, 80a5eec <mbedtls_md_hmac_update+0x14>
 80a5edc:	6803      	ldr	r3, [r0, #0]
 80a5ede:	b12b      	cbz	r3, 80a5eec <mbedtls_md_hmac_update+0x14>
 80a5ee0:	6884      	ldr	r4, [r0, #8]
 80a5ee2:	b11c      	cbz	r4, 80a5eec <mbedtls_md_hmac_update+0x14>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 80a5ee4:	695b      	ldr	r3, [r3, #20]
 80a5ee6:	6840      	ldr	r0, [r0, #4]
}
 80a5ee8:	bc10      	pop	{r4}
int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    return( ctx->md_info->update_func( ctx->md_ctx, input, ilen ) );
 80a5eea:	4718      	bx	r3
}
 80a5eec:	4801      	ldr	r0, [pc, #4]	; (80a5ef4 <mbedtls_md_hmac_update+0x1c>)
 80a5eee:	bc10      	pop	{r4}
 80a5ef0:	4770      	bx	lr
 80a5ef2:	bf00      	nop
 80a5ef4:	ffffaf00 	.word	0xffffaf00

080a5ef8 <mbedtls_md_hmac_finish>:

int mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
 80a5ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a5efc:	460d      	mov	r5, r1
 80a5efe:	b090      	sub	sp, #64	; 0x40
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 80a5f00:	4604      	mov	r4, r0
 80a5f02:	b318      	cbz	r0, 80a5f4c <mbedtls_md_hmac_finish+0x54>
 80a5f04:	6803      	ldr	r3, [r0, #0]
 80a5f06:	b30b      	cbz	r3, 80a5f4c <mbedtls_md_hmac_finish+0x54>
 80a5f08:	6886      	ldr	r6, [r0, #8]
 80a5f0a:	b1fe      	cbz	r6, 80a5f4c <mbedtls_md_hmac_finish+0x54>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 80a5f0c:	68df      	ldr	r7, [r3, #12]

    if( ( ret = ctx->md_info->finish_func( ctx->md_ctx, tmp ) ) != 0 )
 80a5f0e:	4669      	mov	r1, sp
 80a5f10:	699b      	ldr	r3, [r3, #24]
 80a5f12:	6840      	ldr	r0, [r0, #4]
 80a5f14:	4798      	blx	r3
 80a5f16:	b9d0      	cbnz	r0, 80a5f4e <mbedtls_md_hmac_finish+0x56>
        return( ret );
    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 80a5f18:	6823      	ldr	r3, [r4, #0]
 80a5f1a:	6860      	ldr	r0, [r4, #4]
 80a5f1c:	691b      	ldr	r3, [r3, #16]
 80a5f1e:	4798      	blx	r3
 80a5f20:	b9a8      	cbnz	r0, 80a5f4e <mbedtls_md_hmac_finish+0x56>
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, opad,
 80a5f22:	6823      	ldr	r3, [r4, #0]
 80a5f24:	19f1      	adds	r1, r6, r7
 80a5f26:	f8d3 8014 	ldr.w	r8, [r3, #20]
 80a5f2a:	68da      	ldr	r2, [r3, #12]
 80a5f2c:	6860      	ldr	r0, [r4, #4]
 80a5f2e:	47c0      	blx	r8
 80a5f30:	b968      	cbnz	r0, 80a5f4e <mbedtls_md_hmac_finish+0x56>
                                           ctx->md_info->block_size ) ) != 0 )
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
 80a5f32:	6823      	ldr	r3, [r4, #0]
 80a5f34:	4669      	mov	r1, sp
 80a5f36:	695e      	ldr	r6, [r3, #20]
 80a5f38:	689a      	ldr	r2, [r3, #8]
 80a5f3a:	6860      	ldr	r0, [r4, #4]
 80a5f3c:	47b0      	blx	r6
 80a5f3e:	b930      	cbnz	r0, 80a5f4e <mbedtls_md_hmac_finish+0x56>
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
 80a5f40:	6823      	ldr	r3, [r4, #0]
 80a5f42:	4629      	mov	r1, r5
 80a5f44:	699b      	ldr	r3, [r3, #24]
 80a5f46:	6860      	ldr	r0, [r4, #4]
 80a5f48:	4798      	blx	r3
 80a5f4a:	e000      	b.n	80a5f4e <mbedtls_md_hmac_finish+0x56>
    int ret;
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 80a5f4c:	4801      	ldr	r0, [pc, #4]	; (80a5f54 <mbedtls_md_hmac_finish+0x5c>)
        return( ret );
    if( ( ret = ctx->md_info->update_func( ctx->md_ctx, tmp,
                                           ctx->md_info->size ) ) != 0 )
        return( ret );
    return( ctx->md_info->finish_func( ctx->md_ctx, output ) );
}
 80a5f4e:	b010      	add	sp, #64	; 0x40
 80a5f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a5f54:	ffffaf00 	.word	0xffffaf00

080a5f58 <mbedtls_md_hmac_reset>:

int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )
{
 80a5f58:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 80a5f5a:	4604      	mov	r4, r0
 80a5f5c:	b180      	cbz	r0, 80a5f80 <mbedtls_md_hmac_reset+0x28>
 80a5f5e:	6803      	ldr	r3, [r0, #0]
 80a5f60:	b173      	cbz	r3, 80a5f80 <mbedtls_md_hmac_reset+0x28>
 80a5f62:	6885      	ldr	r5, [r0, #8]
 80a5f64:	b165      	cbz	r5, 80a5f80 <mbedtls_md_hmac_reset+0x28>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
 80a5f66:	691b      	ldr	r3, [r3, #16]
 80a5f68:	6840      	ldr	r0, [r0, #4]
 80a5f6a:	4798      	blx	r3
 80a5f6c:	b948      	cbnz	r0, 80a5f82 <mbedtls_md_hmac_reset+0x2a>
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
 80a5f6e:	6823      	ldr	r3, [r4, #0]
                                       ctx->md_info->block_size ) );
 80a5f70:	4629      	mov	r1, r5
 80a5f72:	695e      	ldr	r6, [r3, #20]
 80a5f74:	68da      	ldr	r2, [r3, #12]
 80a5f76:	6860      	ldr	r0, [r4, #4]
 80a5f78:	4633      	mov	r3, r6
}
 80a5f7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ipad = (unsigned char *) ctx->hmac_ctx;

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
                                       ctx->md_info->block_size ) );
 80a5f7e:	4718      	bx	r3
{
    int ret;
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 80a5f80:	4800      	ldr	r0, [pc, #0]	; (80a5f84 <mbedtls_md_hmac_reset+0x2c>)

    if( ( ret = ctx->md_info->starts_func( ctx->md_ctx ) ) != 0 )
        return( ret );
    return( ctx->md_info->update_func( ctx->md_ctx, ipad,
                                       ctx->md_info->block_size ) );
}
 80a5f82:	bd70      	pop	{r4, r5, r6, pc}
 80a5f84:	ffffaf00 	.word	0xffffaf00

080a5f88 <mbedtls_md_get_size>:
    return( ctx->md_info->process_func( ctx->md_ctx, data ) );
}

unsigned char mbedtls_md_get_size( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
 80a5f88:	b100      	cbz	r0, 80a5f8c <mbedtls_md_get_size+0x4>
        return( 0 );

    return md_info->size;
 80a5f8a:	7a00      	ldrb	r0, [r0, #8]
}
 80a5f8c:	4770      	bx	lr

080a5f8e <_ZL15mbedtls_zeroizePvj>:
#include <dirent.h>
#endif /* !_WIN32 || EFIX64 || EFI32 */
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 80a5f8e:	4401      	add	r1, r0
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80a5f90:	2300      	movs	r3, #0
 80a5f92:	4288      	cmp	r0, r1
 80a5f94:	d002      	beq.n	80a5f9c <_ZL15mbedtls_zeroizePvj+0xe>
 80a5f96:	7003      	strb	r3, [r0, #0]
 80a5f98:	3001      	adds	r0, #1
 80a5f9a:	e7fa      	b.n	80a5f92 <_ZL15mbedtls_zeroizePvj+0x4>
 80a5f9c:	4770      	bx	lr

080a5f9e <_ZL15x509_memcasecmpPKvS0_j>:

/*
 * Like memcmp, but case-insensitive and always returns -1 if different
 */
static int x509_memcasecmp( const void *s1, const void *s2, size_t len )
{
 80a5f9e:	b530      	push	{r4, r5, lr}
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = (unsigned char *)s1, *n2 = (unsigned char *)s2;

    for( i = 0; i < len; i++ )
 80a5fa0:	2400      	movs	r4, #0
 80a5fa2:	4294      	cmp	r4, r2
 80a5fa4:	d00c      	beq.n	80a5fc0 <_ZL15x509_memcasecmpPKvS0_j+0x22>
    {
        diff = n1[i] ^ n2[i];
 80a5fa6:	5d03      	ldrb	r3, [r0, r4]
 80a5fa8:	5d0d      	ldrb	r5, [r1, r4]

        if( diff == 0 )
 80a5faa:	405d      	eors	r5, r3
 80a5fac:	d006      	beq.n	80a5fbc <_ZL15x509_memcasecmpPKvS0_j+0x1e>
            continue;

        if( diff == 32 &&
 80a5fae:	2d20      	cmp	r5, #32
 80a5fb0:	d108      	bne.n	80a5fc4 <_ZL15x509_memcasecmpPKvS0_j+0x26>
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
 80a5fb2:	f023 0320 	bic.w	r3, r3, #32
 80a5fb6:	3b41      	subs	r3, #65	; 0x41
 80a5fb8:	2b19      	cmp	r3, #25
 80a5fba:	d803      	bhi.n	80a5fc4 <_ZL15x509_memcasecmpPKvS0_j+0x26>
{
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = (unsigned char *)s1, *n2 = (unsigned char *)s2;

    for( i = 0; i < len; i++ )
 80a5fbc:	3401      	adds	r4, #1
 80a5fbe:	e7f0      	b.n	80a5fa2 <_ZL15x509_memcasecmpPKvS0_j+0x4>
        }

        return( -1 );
    }

    return( 0 );
 80a5fc0:	2000      	movs	r0, #0
 80a5fc2:	bd30      	pop	{r4, r5, pc}
              ( n1[i] >= 'A' && n1[i] <= 'Z' ) ) )
        {
            continue;
        }

        return( -1 );
 80a5fc4:	f04f 30ff 	mov.w	r0, #4294967295
    }

    return( 0 );
}
 80a5fc8:	bd30      	pop	{r4, r5, pc}

080a5fca <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>:
 * or space folding.)
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
 80a5fca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a5fcc:	4605      	mov	r5, r0
 80a5fce:	460c      	mov	r4, r1
    /* Avoid recursion, it might not be optimised by the compiler */
    while( a != NULL || b != NULL )
 80a5fd0:	b925      	cbnz	r5, 80a5fdc <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x12>
 80a5fd2:	1c20      	adds	r0, r4, #0
 80a5fd4:	bf18      	it	ne
 80a5fd6:	2001      	movne	r0, #1
 80a5fd8:	4240      	negs	r0, r0
 80a5fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    {
        if( a == NULL || b == NULL )
 80a5fdc:	2c00      	cmp	r4, #0
 80a5fde:	d031      	beq.n	80a6044 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
 80a5fe0:	682a      	ldr	r2, [r5, #0]
 80a5fe2:	6823      	ldr	r3, [r4, #0]
 80a5fe4:	429a      	cmp	r2, r3
 80a5fe6:	d12d      	bne.n	80a6044 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            a->oid.len != b->oid.len ||
 80a5fe8:	686a      	ldr	r2, [r5, #4]
    {
        if( a == NULL || b == NULL )
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
 80a5fea:	6863      	ldr	r3, [r4, #4]
 80a5fec:	429a      	cmp	r2, r3
 80a5fee:	d129      	bne.n	80a6044 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            a->oid.len != b->oid.len ||
            memcmp( a->oid.p, b->oid.p, b->oid.len ) != 0 )
 80a5ff0:	68a1      	ldr	r1, [r4, #8]
 80a5ff2:	68a8      	ldr	r0, [r5, #8]
 80a5ff4:	f009 f86e 	bl	80af0d4 <memcmp>
        if( a == NULL || b == NULL )
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
            a->oid.len != b->oid.len ||
 80a5ff8:	bb20      	cbnz	r0, 80a6044 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
    if( a->tag == b->tag &&
 80a5ffa:	68ef      	ldr	r7, [r5, #12]
 80a5ffc:	68e6      	ldr	r6, [r4, #12]
 80a5ffe:	42b7      	cmp	r7, r6
 80a6000:	d108      	bne.n	80a6014 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x4a>
        a->len == b->len &&
 80a6002:	692a      	ldr	r2, [r5, #16]
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
    if( a->tag == b->tag &&
 80a6004:	6923      	ldr	r3, [r4, #16]
 80a6006:	429a      	cmp	r2, r3
 80a6008:	d104      	bne.n	80a6014 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x4a>
        a->len == b->len &&
        memcmp( a->p, b->p, b->len ) == 0 )
 80a600a:	6961      	ldr	r1, [r4, #20]
 80a600c:	6968      	ldr	r0, [r5, #20]
 80a600e:	f009 f861 	bl	80af0d4 <memcmp>
 * Return 0 if equal, -1 otherwise.
 */
static int x509_string_cmp( const mbedtls_x509_buf *a, const mbedtls_x509_buf *b )
{
    if( a->tag == b->tag &&
        a->len == b->len &&
 80a6012:	b180      	cbz	r0, 80a6036 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x6c>
        return( 0 );
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
        a->len == b->len &&
 80a6014:	2f0c      	cmp	r7, #12
 80a6016:	d001      	beq.n	80a601c <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x52>
        memcmp( a->p, b->p, b->len ) == 0 )
    {
        return( 0 );
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 80a6018:	2f13      	cmp	r7, #19
 80a601a:	d113      	bne.n	80a6044 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
 80a601c:	2e0c      	cmp	r6, #12
 80a601e:	d001      	beq.n	80a6024 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x5a>
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 80a6020:	2e13      	cmp	r6, #19
 80a6022:	d10f      	bne.n	80a6044 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
        a->len == b->len &&
 80a6024:	692a      	ldr	r2, [r5, #16]
    {
        return( 0 );
    }

    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 80a6026:	6923      	ldr	r3, [r4, #16]
 80a6028:	429a      	cmp	r2, r3
 80a602a:	d10b      	bne.n	80a6044 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
        a->len == b->len &&
        x509_memcasecmp( a->p, b->p, b->len ) == 0 )
 80a602c:	6961      	ldr	r1, [r4, #20]
 80a602e:	6968      	ldr	r0, [r5, #20]
 80a6030:	f7ff ffb5 	bl	80a5f9e <_ZL15x509_memcasecmpPKvS0_j>
        {
            return( -1 );
        }

        /* value */
        if( x509_string_cmp( &a->val, &b->val ) != 0 )
 80a6034:	b930      	cbnz	r0, 80a6044 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            return( -1 );

        /* structure of the list of sets */
        if( a->next_merged != b->next_merged )
 80a6036:	7f2a      	ldrb	r2, [r5, #28]
 80a6038:	7f23      	ldrb	r3, [r4, #28]
 80a603a:	429a      	cmp	r2, r3
 80a603c:	d102      	bne.n	80a6044 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x7a>
            return( -1 );

        a = a->next;
 80a603e:	69ad      	ldr	r5, [r5, #24]
        b = b->next;
 80a6040:	69a4      	ldr	r4, [r4, #24]
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
    /* Avoid recursion, it might not be optimised by the compiler */
    while( a != NULL || b != NULL )
 80a6042:	e7c5      	b.n	80a5fd0 <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_+0x6>
    {
        if( a == NULL || b == NULL )
            return( -1 );
 80a6044:	f04f 30ff 	mov.w	r0, #4294967295
        b = b->next;
    }

    /* a == NULL == b */
    return( 0 );
}
 80a6048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a604a <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf>:

/*
 * Return 0 if name matches wildcard, -1 otherwise
 */
static int x509_check_wildcard( const char *cn, mbedtls_x509_buf *name )
{
 80a604a:	b570      	push	{r4, r5, r6, lr}
 80a604c:	460e      	mov	r6, r1
 80a604e:	4604      	mov	r4, r0
    size_t i;
    size_t cn_idx = 0, cn_len = strlen( cn );
 80a6050:	f009 f88b 	bl	80af16a <strlen>

    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
 80a6054:	6875      	ldr	r5, [r6, #4]
 80a6056:	2d02      	cmp	r5, #2
 80a6058:	d91e      	bls.n	80a6098 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x4e>
 80a605a:	68b6      	ldr	r6, [r6, #8]
 80a605c:	7833      	ldrb	r3, [r6, #0]
 80a605e:	2b2a      	cmp	r3, #42	; 0x2a
 80a6060:	d11a      	bne.n	80a6098 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x4e>
 80a6062:	7873      	ldrb	r3, [r6, #1]
 80a6064:	2b2e      	cmp	r3, #46	; 0x2e
 80a6066:	d117      	bne.n	80a6098 <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x4e>
 80a6068:	4623      	mov	r3, r4
 80a606a:	2200      	movs	r2, #0
        return( 0 );

    for( i = 0; i < cn_len; ++i )
 80a606c:	4282      	cmp	r2, r0
 80a606e:	d015      	beq.n	80a609c <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x52>
    {
        if( cn[i] == '.' )
 80a6070:	4619      	mov	r1, r3
 80a6072:	780c      	ldrb	r4, [r1, #0]
 80a6074:	3301      	adds	r3, #1
 80a6076:	2c2e      	cmp	r4, #46	; 0x2e
 80a6078:	d001      	beq.n	80a607e <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x34>
    size_t cn_idx = 0, cn_len = strlen( cn );

    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
        return( 0 );

    for( i = 0; i < cn_len; ++i )
 80a607a:	3201      	adds	r2, #1
 80a607c:	e7f6      	b.n	80a606c <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x22>
            cn_idx = i;
            break;
        }
    }

    if( cn_idx == 0 )
 80a607e:	b16a      	cbz	r2, 80a609c <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x52>
        return( -1 );

    if( cn_len - cn_idx == name->len - 1 &&
 80a6080:	1a82      	subs	r2, r0, r2
 80a6082:	3d01      	subs	r5, #1
 80a6084:	42aa      	cmp	r2, r5
 80a6086:	d109      	bne.n	80a609c <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf+0x52>
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
 80a6088:	1c70      	adds	r0, r6, #1
 80a608a:	f7ff ff88 	bl	80a5f9e <_ZL15x509_memcasecmpPKvS0_j>
    }

    if( cn_idx == 0 )
        return( -1 );

    if( cn_len - cn_idx == name->len - 1 &&
 80a608e:	3000      	adds	r0, #0
 80a6090:	bf18      	it	ne
 80a6092:	2001      	movne	r0, #1
 80a6094:	4240      	negs	r0, r0
 80a6096:	bd70      	pop	{r4, r5, r6, pc}
{
    size_t i;
    size_t cn_idx = 0, cn_len = strlen( cn );

    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
        return( 0 );
 80a6098:	2000      	movs	r0, #0
 80a609a:	bd70      	pop	{r4, r5, r6, pc}
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
    {
        return( 0 );
    }

    return( -1 );
 80a609c:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a60a0:	bd70      	pop	{r4, r5, r6, pc}

080a60a2 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>:
 * X.509 v2/v3 unique identifier (not parsed)
 */
static int x509_get_uid( unsigned char **p,
                         const unsigned char *end,
                         mbedtls_x509_buf *uid, int n )
{
 80a60a2:	b570      	push	{r4, r5, r6, lr}
 80a60a4:	4615      	mov	r5, r2
    int ret;

    if( *p == end )
 80a60a6:	6802      	ldr	r2, [r0, #0]
 * X.509 v2/v3 unique identifier (not parsed)
 */
static int x509_get_uid( unsigned char **p,
                         const unsigned char *end,
                         mbedtls_x509_buf *uid, int n )
{
 80a60a8:	4604      	mov	r4, r0
    int ret;

    if( *p == end )
 80a60aa:	428a      	cmp	r2, r1
 80a60ac:	d00b      	beq.n	80a60c6 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0x24>
        return( 0 );

    uid->tag = **p;
 80a60ae:	7816      	ldrb	r6, [r2, #0]
 80a60b0:	462a      	mov	r2, r5

    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 80a60b2:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    int ret;

    if( *p == end )
        return( 0 );

    uid->tag = **p;
 80a60b6:	f842 6b04 	str.w	r6, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 80a60ba:	f7fb fcaf 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a60be:	b120      	cbz	r0, 80a60ca <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0x28>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | n ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80a60c0:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80a60c4:	d107      	bne.n	80a60d6 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi+0x34>
            return( 0 );
 80a60c6:	2000      	movs	r0, #0
 80a60c8:	bd70      	pop	{r4, r5, r6, pc}

        return( ret );
    }

    uid->p = *p;
 80a60ca:	6823      	ldr	r3, [r4, #0]
 80a60cc:	60ab      	str	r3, [r5, #8]
    *p += uid->len;
 80a60ce:	6822      	ldr	r2, [r4, #0]
 80a60d0:	686b      	ldr	r3, [r5, #4]
 80a60d2:	4413      	add	r3, r2
 80a60d4:	6023      	str	r3, [r4, #0]

    return( 0 );
}
 80a60d6:	bd70      	pop	{r4, r5, r6, pc}

080a60d8 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>:
static int x509_profile_check_key( const mbedtls_x509_crt_profile *profile,
                                   mbedtls_pk_type_t pk_alg,
                                   const mbedtls_pk_context *pk )
{
#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
 80a60d8:	2901      	cmp	r1, #1

/*
 * Check key against profile
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_key( const mbedtls_x509_crt_profile *profile,
 80a60da:	b510      	push	{r4, lr}
 80a60dc:	4604      	mov	r4, r0
                                   mbedtls_pk_type_t pk_alg,
                                   const mbedtls_pk_context *pk )
{
#if defined(MBEDTLS_RSA_C)
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
 80a60de:	d001      	beq.n	80a60e4 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3+0xc>
 80a60e0:	2906      	cmp	r1, #6
 80a60e2:	d109      	bne.n	80a60f8 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3+0x20>
    {
        if( mbedtls_pk_get_bitlen( pk ) >= profile->rsa_min_bitlen )
 80a60e4:	4610      	mov	r0, r2
 80a60e6:	f004 fbd1 	bl	80aa88c <mbedtls_pk_get_bitlen>
 80a60ea:	6823      	ldr	r3, [r4, #0]
 80a60ec:	4298      	cmp	r0, r3
 80a60ee:	f04f 30ff 	mov.w	r0, #4294967295
 80a60f2:	bf28      	it	cs
 80a60f4:	2000      	movcs	r0, #0
 80a60f6:	bd10      	pop	{r4, pc}

        return( -1 );
    }
#endif

    return( -1 );
 80a60f8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a60fc:	bd10      	pop	{r4, pc}
	...

080a6100 <mbedtls_x509_crt_info>:
 */
#define BEFORE_COLON    18
#define BC              "18"
int mbedtls_x509_crt_info( char *buf, size_t size, const char *prefix,
                   const mbedtls_x509_crt *crt )
{
 80a6100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6104:	4682      	mov	sl, r0
 80a6106:	b08d      	sub	sp, #52	; 0x34
 80a6108:	460f      	mov	r7, r1
 80a610a:	4691      	mov	r9, r2
    char key_size_str[BEFORE_COLON];

    p = buf;
    n = size;

    if( NULL == crt )
 80a610c:	4698      	mov	r8, r3
 80a610e:	b94b      	cbnz	r3, 80a6124 <mbedtls_x509_crt_info+0x24>
    {
        ret = mbedtls_snprintf( p, n, "\nCertificate is uninitialised!\n" );
 80a6110:	4aa5      	ldr	r2, [pc, #660]	; (80a63a8 <mbedtls_x509_crt_info+0x2a8>)
 80a6112:	f007 ff13 	bl	80adf3c <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a6116:	2800      	cmp	r0, #0
 80a6118:	f2c0 82d6 	blt.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a611c:	4287      	cmp	r7, r0
 80a611e:	f200 82d4 	bhi.w	80a66ca <mbedtls_x509_crt_info+0x5ca>
 80a6122:	e2d1      	b.n	80a66c8 <mbedtls_x509_crt_info+0x5c8>

        return( (int) ( size - n ) );
    }

    ret = mbedtls_snprintf( p, n, "%scert. version     : %d\n",
                               prefix, crt->version );
 80a6124:	699b      	ldr	r3, [r3, #24]
 80a6126:	9300      	str	r3, [sp, #0]
 80a6128:	4613      	mov	r3, r2
 80a612a:	4aa0      	ldr	r2, [pc, #640]	; (80a63ac <mbedtls_x509_crt_info+0x2ac>)
 80a612c:	f007 ff06 	bl	80adf3c <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a6130:	2800      	cmp	r0, #0
 80a6132:	f2c0 82c9 	blt.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a6136:	4287      	cmp	r7, r0
 80a6138:	f240 82c6 	bls.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a613c:	1a3e      	subs	r6, r7, r0
 80a613e:	4482      	add	sl, r0
    ret = mbedtls_snprintf( p, n, "%sserial number     : ",
                               prefix );
 80a6140:	464b      	mov	r3, r9
 80a6142:	4a9b      	ldr	r2, [pc, #620]	; (80a63b0 <mbedtls_x509_crt_info+0x2b0>)
 80a6144:	4631      	mov	r1, r6
 80a6146:	4650      	mov	r0, sl
 80a6148:	f007 fef8 	bl	80adf3c <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a614c:	2800      	cmp	r0, #0
 80a614e:	f2c0 82bb 	blt.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a6152:	4286      	cmp	r6, r0
 80a6154:	f240 82b8 	bls.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a6158:	1a36      	subs	r6, r6, r0
 80a615a:	4482      	add	sl, r0

    ret = mbedtls_x509_serial_gets( p, n, &crt->serial );
 80a615c:	f108 021c 	add.w	r2, r8, #28
 80a6160:	4631      	mov	r1, r6
 80a6162:	4650      	mov	r0, sl
 80a6164:	f7fe fdd6 	bl	80a4d14 <mbedtls_x509_serial_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a6168:	2800      	cmp	r0, #0
 80a616a:	f2c0 82ad 	blt.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a616e:	4286      	cmp	r6, r0
 80a6170:	f240 82aa 	bls.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a6174:	1a36      	subs	r6, r6, r0
 80a6176:	4482      	add	sl, r0

    ret = mbedtls_snprintf( p, n, "\n%sissuer name       : ", prefix );
 80a6178:	464b      	mov	r3, r9
 80a617a:	4a8e      	ldr	r2, [pc, #568]	; (80a63b4 <mbedtls_x509_crt_info+0x2b4>)
 80a617c:	4631      	mov	r1, r6
 80a617e:	4650      	mov	r0, sl
 80a6180:	f007 fedc 	bl	80adf3c <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a6184:	2800      	cmp	r0, #0
 80a6186:	f2c0 829f 	blt.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a618a:	4286      	cmp	r6, r0
 80a618c:	f240 829c 	bls.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a6190:	1a36      	subs	r6, r6, r0
 80a6192:	4482      	add	sl, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->issuer  );
 80a6194:	f108 024c 	add.w	r2, r8, #76	; 0x4c
 80a6198:	4631      	mov	r1, r6
 80a619a:	4650      	mov	r0, sl
 80a619c:	f7fe fd38 	bl	80a4c10 <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a61a0:	2800      	cmp	r0, #0
 80a61a2:	f2c0 8291 	blt.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a61a6:	4286      	cmp	r6, r0
 80a61a8:	f240 828e 	bls.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a61ac:	1a36      	subs	r6, r6, r0
 80a61ae:	4482      	add	sl, r0

    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
 80a61b0:	464b      	mov	r3, r9
 80a61b2:	4a81      	ldr	r2, [pc, #516]	; (80a63b8 <mbedtls_x509_crt_info+0x2b8>)
 80a61b4:	4631      	mov	r1, r6
 80a61b6:	4650      	mov	r0, sl
 80a61b8:	f007 fec0 	bl	80adf3c <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a61bc:	2800      	cmp	r0, #0
 80a61be:	f2c0 8283 	blt.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a61c2:	4286      	cmp	r6, r0
 80a61c4:	f240 8280 	bls.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a61c8:	1a36      	subs	r6, r6, r0
 80a61ca:	4482      	add	sl, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
 80a61cc:	f108 026c 	add.w	r2, r8, #108	; 0x6c
 80a61d0:	4631      	mov	r1, r6
 80a61d2:	4650      	mov	r0, sl
 80a61d4:	f7fe fd1c 	bl	80a4c10 <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a61d8:	2800      	cmp	r0, #0
 80a61da:	f2c0 8275 	blt.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a61de:	4286      	cmp	r6, r0
 80a61e0:	f240 8272 	bls.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>

    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
 80a61e4:	f8d8 30a0 	ldr.w	r3, [r8, #160]	; 0xa0
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a61e8:	1a36      	subs	r6, r6, r0

    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
 80a61ea:	9305      	str	r3, [sp, #20]
 80a61ec:	f8d8 309c 	ldr.w	r3, [r8, #156]	; 0x9c
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a61f0:	4482      	add	sl, r0

    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
 80a61f2:	9304      	str	r3, [sp, #16]
 80a61f4:	f8d8 3098 	ldr.w	r3, [r8, #152]	; 0x98
 80a61f8:	4a70      	ldr	r2, [pc, #448]	; (80a63bc <mbedtls_x509_crt_info+0x2bc>)
 80a61fa:	9303      	str	r3, [sp, #12]
 80a61fc:	f8d8 3094 	ldr.w	r3, [r8, #148]	; 0x94
 80a6200:	4631      	mov	r1, r6
 80a6202:	9302      	str	r3, [sp, #8]
 80a6204:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 80a6208:	4650      	mov	r0, sl
 80a620a:	9301      	str	r3, [sp, #4]
 80a620c:	f8d8 308c 	ldr.w	r3, [r8, #140]	; 0x8c
 80a6210:	9300      	str	r3, [sp, #0]
 80a6212:	464b      	mov	r3, r9
 80a6214:	f007 fe92 	bl	80adf3c <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a6218:	2800      	cmp	r0, #0
 80a621a:	f2c0 8255 	blt.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a621e:	4286      	cmp	r6, r0
 80a6220:	f240 8252 	bls.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>

    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_to.year, crt->valid_to.mon,
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
 80a6224:	f8d8 30b8 	ldr.w	r3, [r8, #184]	; 0xb8
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a6228:	1a36      	subs	r6, r6, r0

    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_to.year, crt->valid_to.mon,
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
 80a622a:	9305      	str	r3, [sp, #20]
 80a622c:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_from.year, crt->valid_from.mon,
                   crt->valid_from.day,  crt->valid_from.hour,
                   crt->valid_from.min,  crt->valid_from.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a6230:	4482      	add	sl, r0

    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
                   "%04d-%02d-%02d %02d:%02d:%02d", prefix,
                   crt->valid_to.year, crt->valid_to.mon,
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
 80a6232:	9304      	str	r3, [sp, #16]
 80a6234:	f8d8 30b0 	ldr.w	r3, [r8, #176]	; 0xb0
 80a6238:	4a61      	ldr	r2, [pc, #388]	; (80a63c0 <mbedtls_x509_crt_info+0x2c0>)
 80a623a:	9303      	str	r3, [sp, #12]
 80a623c:	f8d8 30ac 	ldr.w	r3, [r8, #172]	; 0xac
 80a6240:	4631      	mov	r1, r6
 80a6242:	9302      	str	r3, [sp, #8]
 80a6244:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
 80a6248:	4650      	mov	r0, sl
 80a624a:	9301      	str	r3, [sp, #4]
 80a624c:	f8d8 30a4 	ldr.w	r3, [r8, #164]	; 0xa4
 80a6250:	9300      	str	r3, [sp, #0]
 80a6252:	464b      	mov	r3, r9
 80a6254:	f007 fe72 	bl	80adf3c <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a6258:	2800      	cmp	r0, #0
 80a625a:	f2c0 8235 	blt.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a625e:	4286      	cmp	r6, r0
 80a6260:	f240 8232 	bls.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a6264:	1a36      	subs	r6, r6, r0
 80a6266:	4482      	add	sl, r0

    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
 80a6268:	464b      	mov	r3, r9
 80a626a:	4a56      	ldr	r2, [pc, #344]	; (80a63c4 <mbedtls_x509_crt_info+0x2c4>)
 80a626c:	4631      	mov	r1, r6
 80a626e:	4650      	mov	r0, sl
 80a6270:	f007 fe64 	bl	80adf3c <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a6274:	2800      	cmp	r0, #0
 80a6276:	f2c0 8227 	blt.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a627a:	4286      	cmp	r6, r0
 80a627c:	f240 8224 	bls.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
                             crt->sig_md, crt->sig_opts );
 80a6280:	f8d8 212c 	ldr.w	r2, [r8, #300]	; 0x12c
 80a6284:	f898 3129 	ldrb.w	r3, [r8, #297]	; 0x129
 80a6288:	9201      	str	r2, [sp, #4]
 80a628a:	f898 2128 	ldrb.w	r2, [r8, #296]	; 0x128
                   crt->valid_to.day,  crt->valid_to.hour,
                   crt->valid_to.min,  crt->valid_to.sec );
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a628e:	1a36      	subs	r6, r6, r0
 80a6290:	4482      	add	sl, r0

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
                             crt->sig_md, crt->sig_opts );
 80a6292:	9200      	str	r2, [sp, #0]
 80a6294:	4631      	mov	r1, r6
 80a6296:	f108 0228 	add.w	r2, r8, #40	; 0x28
 80a629a:	4650      	mov	r0, sl
 80a629c:	f7fe fd84 	bl	80a4da8 <mbedtls_x509_sig_alg_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a62a0:	1e05      	subs	r5, r0, #0
 80a62a2:	f2c0 8211 	blt.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a62a6:	42ae      	cmp	r6, r5
 80a62a8:	f240 820e 	bls.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>

    /* Key size */
    if( ( ret = mbedtls_x509_key_size_helper( key_size_str, BEFORE_COLON,
 80a62ac:	f108 0bbc 	add.w	fp, r8, #188	; 0xbc
 80a62b0:	4658      	mov	r0, fp
 80a62b2:	f004 fb4f 	bl	80aa954 <mbedtls_pk_get_name>
 80a62b6:	ac07      	add	r4, sp, #28
 80a62b8:	4602      	mov	r2, r0
 80a62ba:	2112      	movs	r1, #18
 80a62bc:	4620      	mov	r0, r4
 80a62be:	f7fe fd9b 	bl	80a4df8 <mbedtls_x509_key_size_helper>
 80a62c2:	2800      	cmp	r0, #0
 80a62c4:	f040 8201 	bne.w	80a66ca <mbedtls_x509_crt_info+0x5ca>
    {
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
 80a62c8:	4658      	mov	r0, fp
 80a62ca:	f004 fadf 	bl	80aa88c <mbedtls_pk_get_bitlen>
    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
                             crt->sig_md, crt->sig_opts );
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a62ce:	1b76      	subs	r6, r6, r5
 80a62d0:	4455      	add	r5, sl
    {
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
 80a62d2:	9001      	str	r0, [sp, #4]
 80a62d4:	9400      	str	r4, [sp, #0]
 80a62d6:	464b      	mov	r3, r9
 80a62d8:	4a3b      	ldr	r2, [pc, #236]	; (80a63c8 <mbedtls_x509_crt_info+0x2c8>)
 80a62da:	4631      	mov	r1, r6
 80a62dc:	4628      	mov	r0, r5
 80a62de:	f007 fe2d 	bl	80adf3c <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a62e2:	2800      	cmp	r0, #0
 80a62e4:	f2c0 81f0 	blt.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a62e8:	4286      	cmp	r6, r0
 80a62ea:	f240 81ed 	bls.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>

    /*
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 80a62ee:	f8d8 30f8 	ldr.w	r3, [r8, #248]	; 0xf8
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a62f2:	1a34      	subs	r4, r6, r0

    /*
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 80a62f4:	05db      	lsls	r3, r3, #23
        return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a62f6:	4405      	add	r5, r0

    /*
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 80a62f8:	d527      	bpl.n	80a634a <mbedtls_x509_crt_info+0x24a>
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
 80a62fa:	f8d8 10fc 	ldr.w	r1, [r8, #252]	; 0xfc
 80a62fe:	4a33      	ldr	r2, [pc, #204]	; (80a63cc <mbedtls_x509_crt_info+0x2cc>)
 80a6300:	4b33      	ldr	r3, [pc, #204]	; (80a63d0 <mbedtls_x509_crt_info+0x2d0>)
                        crt->ca_istrue ? "true" : "false" );
 80a6302:	4628      	mov	r0, r5
     * Optional extensions
     */

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
 80a6304:	2900      	cmp	r1, #0
 80a6306:	bf18      	it	ne
 80a6308:	4613      	movne	r3, r2
                        crt->ca_istrue ? "true" : "false" );
 80a630a:	4a32      	ldr	r2, [pc, #200]	; (80a63d4 <mbedtls_x509_crt_info+0x2d4>)
 80a630c:	9300      	str	r3, [sp, #0]
 80a630e:	4621      	mov	r1, r4
 80a6310:	464b      	mov	r3, r9
 80a6312:	f007 fe13 	bl	80adf3c <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a6316:	2800      	cmp	r0, #0
 80a6318:	f2c0 81d6 	blt.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a631c:	4284      	cmp	r4, r0
 80a631e:	f240 81d3 	bls.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>

        if( crt->max_pathlen > 0 )
 80a6322:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
                        crt->ca_istrue ? "true" : "false" );
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a6326:	1a24      	subs	r4, r4, r0

        if( crt->max_pathlen > 0 )
 80a6328:	2b00      	cmp	r3, #0

    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
    {
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
                        crt->ca_istrue ? "true" : "false" );
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a632a:	4405      	add	r5, r0

        if( crt->max_pathlen > 0 )
 80a632c:	dd0d      	ble.n	80a634a <mbedtls_x509_crt_info+0x24a>
        {
            ret = mbedtls_snprintf( p, n, ", max_pathlen=%d", crt->max_pathlen - 1 );
 80a632e:	3b01      	subs	r3, #1
 80a6330:	4a29      	ldr	r2, [pc, #164]	; (80a63d8 <mbedtls_x509_crt_info+0x2d8>)
 80a6332:	4621      	mov	r1, r4
 80a6334:	4628      	mov	r0, r5
 80a6336:	f007 fe01 	bl	80adf3c <snprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
 80a633a:	2800      	cmp	r0, #0
 80a633c:	f2c0 81c4 	blt.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a6340:	4284      	cmp	r4, r0
 80a6342:	f240 81c1 	bls.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a6346:	1a24      	subs	r4, r4, r0
 80a6348:	4405      	add	r5, r0
        }
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 80a634a:	f8d8 30f8 	ldr.w	r3, [r8, #248]	; 0xf8
 80a634e:	069e      	lsls	r6, r3, #26
 80a6350:	d54e      	bpl.n	80a63f0 <mbedtls_x509_crt_info+0x2f0>
    {
        ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
 80a6352:	464b      	mov	r3, r9
 80a6354:	4a21      	ldr	r2, [pc, #132]	; (80a63dc <mbedtls_x509_crt_info+0x2dc>)
 80a6356:	4621      	mov	r1, r4
 80a6358:	4628      	mov	r0, r5
 80a635a:	f007 fdef 	bl	80adf3c <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a635e:	2800      	cmp	r0, #0
 80a6360:	f2c0 81b2 	blt.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a6364:	42a0      	cmp	r0, r4
 80a6366:	f080 81af 	bcs.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
{
    size_t i;
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = subject_alt_name;
    const char *sep = "";
 80a636a:	4e1d      	ldr	r6, [pc, #116]	; (80a63e0 <mbedtls_x509_crt_info+0x2e0>)
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
    {
        ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a636c:	1a24      	subs	r4, r4, r0
 80a636e:	4405      	add	r5, r0

        if( ( ret = x509_info_subject_alt_name( &p, &n,
 80a6370:	f108 02e8 	add.w	r2, r8, #232	; 0xe8
    size_t i;
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = subject_alt_name;
    const char *sep = "";
    size_t sep_len = 0;
 80a6374:	2000      	movs	r0, #0

    while( cur != NULL )
    {
        if( cur->buf.len + sep_len >= n )
 80a6376:	6851      	ldr	r1, [r2, #4]
 80a6378:	2300      	movs	r3, #0
 80a637a:	4401      	add	r1, r0
 80a637c:	42a1      	cmp	r1, r4
 80a637e:	d301      	bcc.n	80a6384 <mbedtls_x509_crt_info+0x284>
        {
            *p = '\0';
 80a6380:	702b      	strb	r3, [r5, #0]
 80a6382:	e1a1      	b.n	80a66c8 <mbedtls_x509_crt_info+0x5c8>
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
        }

        n -= cur->buf.len + sep_len;
 80a6384:	1a64      	subs	r4, r4, r1
        for( i = 0; i < sep_len; i++ )
 80a6386:	4283      	cmp	r3, r0
 80a6388:	d003      	beq.n	80a6392 <mbedtls_x509_crt_info+0x292>
            *p++ = sep[i];
 80a638a:	5cf1      	ldrb	r1, [r6, r3]
 80a638c:	54e9      	strb	r1, [r5, r3]
            *p = '\0';
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
        }

        n -= cur->buf.len + sep_len;
        for( i = 0; i < sep_len; i++ )
 80a638e:	3301      	adds	r3, #1
 80a6390:	e7f9      	b.n	80a6386 <mbedtls_x509_crt_info+0x286>
 80a6392:	441d      	add	r5, r3
 80a6394:	4628      	mov	r0, r5
            *p++ = sep[i];
        for( i = 0; i < cur->buf.len; i++ )
 80a6396:	6851      	ldr	r1, [r2, #4]
 80a6398:	1a2b      	subs	r3, r5, r0
 80a639a:	4299      	cmp	r1, r3
 80a639c:	d922      	bls.n	80a63e4 <mbedtls_x509_crt_info+0x2e4>
            *p++ = cur->buf.p[i];
 80a639e:	6891      	ldr	r1, [r2, #8]
 80a63a0:	5ccb      	ldrb	r3, [r1, r3]
 80a63a2:	f805 3b01 	strb.w	r3, [r5], #1
 80a63a6:	e7f6      	b.n	80a6396 <mbedtls_x509_crt_info+0x296>
 80a63a8:	080b08e7 	.word	0x080b08e7
 80a63ac:	080b0907 	.word	0x080b0907
 80a63b0:	080b0921 	.word	0x080b0921
 80a63b4:	080b0938 	.word	0x080b0938
 80a63b8:	080b0950 	.word	0x080b0950
 80a63bc:	080b0968 	.word	0x080b0968
 80a63c0:	080b099d 	.word	0x080b099d
 80a63c4:	080b09d2 	.word	0x080b09d2
 80a63c8:	080b09ea 	.word	0x080b09ea
 80a63cc:	080b08dc 	.word	0x080b08dc
 80a63d0:	080b08e1 	.word	0x080b08e1
 80a63d4:	080b09fc 	.word	0x080b09fc
 80a63d8:	080b0a19 	.word	0x080b0a19
 80a63dc:	080b0a2a 	.word	0x080b0a2a
 80a63e0:	080af8c8 	.word	0x080af8c8

        sep = ", ";
        sep_len = 2;

        cur = cur->next;
 80a63e4:	68d2      	ldr	r2, [r2, #12]
            *p++ = sep[i];
        for( i = 0; i < cur->buf.len; i++ )
            *p++ = cur->buf.p[i];

        sep = ", ";
        sep_len = 2;
 80a63e6:	2002      	movs	r0, #2
        for( i = 0; i < sep_len; i++ )
            *p++ = sep[i];
        for( i = 0; i < cur->buf.len; i++ )
            *p++ = cur->buf.p[i];

        sep = ", ";
 80a63e8:	4eb9      	ldr	r6, [pc, #740]	; (80a66d0 <mbedtls_x509_crt_info+0x5d0>)
    char *p = *buf;
    const mbedtls_x509_sequence *cur = subject_alt_name;
    const char *sep = "";
    size_t sep_len = 0;

    while( cur != NULL )
 80a63ea:	2a00      	cmp	r2, #0
 80a63ec:	d1c3      	bne.n	80a6376 <mbedtls_x509_crt_info+0x276>
        sep_len = 2;

        cur = cur->next;
    }

    *p = '\0';
 80a63ee:	702a      	strb	r2, [r5, #0]
        if( ( ret = x509_info_subject_alt_name( &p, &n,
                                            &crt->subject_alt_names ) ) != 0 )
            return( ret );
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
 80a63f0:	f8d8 30f8 	ldr.w	r3, [r8, #248]	; 0xf8
 80a63f4:	03d8      	lsls	r0, r3, #15
 80a63f6:	f140 8090 	bpl.w	80a651a <mbedtls_x509_crt_info+0x41a>
    {
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
 80a63fa:	464b      	mov	r3, r9
 80a63fc:	4ab5      	ldr	r2, [pc, #724]	; (80a66d4 <mbedtls_x509_crt_info+0x5d4>)
 80a63fe:	4621      	mov	r1, r4
 80a6400:	4628      	mov	r0, r5
 80a6402:	f007 fd9b 	bl	80adf3c <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a6406:	2800      	cmp	r0, #0
 80a6408:	f2c0 815e 	blt.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a640c:	42a0      	cmp	r0, r4
 80a640e:	f080 815b 	bcs.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>

        if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
 80a6412:	f898 6118 	ldrb.w	r6, [r8, #280]	; 0x118
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
    {
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a6416:	1a24      	subs	r4, r4, r0
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 80a6418:	0631      	lsls	r1, r6, #24
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
    {
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a641a:	4405      	add	r5, r0
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 80a641c:	4bae      	ldr	r3, [pc, #696]	; (80a66d8 <mbedtls_x509_crt_info+0x5d8>)
 80a641e:	d50d      	bpl.n	80a643c <mbedtls_x509_crt_info+0x33c>
 80a6420:	4aae      	ldr	r2, [pc, #696]	; (80a66dc <mbedtls_x509_crt_info+0x5dc>)
 80a6422:	4621      	mov	r1, r4
 80a6424:	4628      	mov	r0, r5
 80a6426:	f007 fd89 	bl	80adf3c <snprintf>
 80a642a:	2800      	cmp	r0, #0
 80a642c:	f2c0 814c 	blt.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a6430:	4284      	cmp	r4, r0
 80a6432:	f240 8149 	bls.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a6436:	4ba6      	ldr	r3, [pc, #664]	; (80a66d0 <mbedtls_x509_crt_info+0x5d0>)
 80a6438:	1a24      	subs	r4, r4, r0
 80a643a:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_SERVER,         "SSL Server" );
 80a643c:	0672      	lsls	r2, r6, #25
 80a643e:	d50d      	bpl.n	80a645c <mbedtls_x509_crt_info+0x35c>
 80a6440:	4aa7      	ldr	r2, [pc, #668]	; (80a66e0 <mbedtls_x509_crt_info+0x5e0>)
 80a6442:	4621      	mov	r1, r4
 80a6444:	4628      	mov	r0, r5
 80a6446:	f007 fd79 	bl	80adf3c <snprintf>
 80a644a:	2800      	cmp	r0, #0
 80a644c:	f2c0 813c 	blt.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a6450:	4284      	cmp	r4, r0
 80a6452:	f240 8139 	bls.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a6456:	4b9e      	ldr	r3, [pc, #632]	; (80a66d0 <mbedtls_x509_crt_info+0x5d0>)
 80a6458:	1a24      	subs	r4, r4, r0
 80a645a:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL,              "Email" );
 80a645c:	06b0      	lsls	r0, r6, #26
 80a645e:	d50d      	bpl.n	80a647c <mbedtls_x509_crt_info+0x37c>
 80a6460:	4aa0      	ldr	r2, [pc, #640]	; (80a66e4 <mbedtls_x509_crt_info+0x5e4>)
 80a6462:	4621      	mov	r1, r4
 80a6464:	4628      	mov	r0, r5
 80a6466:	f007 fd69 	bl	80adf3c <snprintf>
 80a646a:	2800      	cmp	r0, #0
 80a646c:	f2c0 812c 	blt.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a6470:	4284      	cmp	r4, r0
 80a6472:	f240 8129 	bls.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a6476:	4b96      	ldr	r3, [pc, #600]	; (80a66d0 <mbedtls_x509_crt_info+0x5d0>)
 80a6478:	1a24      	subs	r4, r4, r0
 80a647a:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING,     "Object Signing" );
 80a647c:	06f1      	lsls	r1, r6, #27
 80a647e:	d50d      	bpl.n	80a649c <mbedtls_x509_crt_info+0x39c>
 80a6480:	4a99      	ldr	r2, [pc, #612]	; (80a66e8 <mbedtls_x509_crt_info+0x5e8>)
 80a6482:	4621      	mov	r1, r4
 80a6484:	4628      	mov	r0, r5
 80a6486:	f007 fd59 	bl	80adf3c <snprintf>
 80a648a:	2800      	cmp	r0, #0
 80a648c:	f2c0 811c 	blt.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a6490:	4284      	cmp	r4, r0
 80a6492:	f240 8119 	bls.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a6496:	4b8e      	ldr	r3, [pc, #568]	; (80a66d0 <mbedtls_x509_crt_info+0x5d0>)
 80a6498:	1a24      	subs	r4, r4, r0
 80a649a:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_RESERVED,           "Reserved" );
 80a649c:	0732      	lsls	r2, r6, #28
 80a649e:	d50d      	bpl.n	80a64bc <mbedtls_x509_crt_info+0x3bc>
 80a64a0:	4a92      	ldr	r2, [pc, #584]	; (80a66ec <mbedtls_x509_crt_info+0x5ec>)
 80a64a2:	4621      	mov	r1, r4
 80a64a4:	4628      	mov	r0, r5
 80a64a6:	f007 fd49 	bl	80adf3c <snprintf>
 80a64aa:	2800      	cmp	r0, #0
 80a64ac:	f2c0 810c 	blt.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a64b0:	4284      	cmp	r4, r0
 80a64b2:	f240 8109 	bls.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a64b6:	4b86      	ldr	r3, [pc, #536]	; (80a66d0 <mbedtls_x509_crt_info+0x5d0>)
 80a64b8:	1a24      	subs	r4, r4, r0
 80a64ba:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CA,             "SSL CA" );
 80a64bc:	0770      	lsls	r0, r6, #29
 80a64be:	d50d      	bpl.n	80a64dc <mbedtls_x509_crt_info+0x3dc>
 80a64c0:	4a8b      	ldr	r2, [pc, #556]	; (80a66f0 <mbedtls_x509_crt_info+0x5f0>)
 80a64c2:	4621      	mov	r1, r4
 80a64c4:	4628      	mov	r0, r5
 80a64c6:	f007 fd39 	bl	80adf3c <snprintf>
 80a64ca:	2800      	cmp	r0, #0
 80a64cc:	f2c0 80fc 	blt.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a64d0:	4284      	cmp	r4, r0
 80a64d2:	f240 80f9 	bls.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a64d6:	4b7e      	ldr	r3, [pc, #504]	; (80a66d0 <mbedtls_x509_crt_info+0x5d0>)
 80a64d8:	1a24      	subs	r4, r4, r0
 80a64da:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL_CA,           "Email CA" );
 80a64dc:	07b1      	lsls	r1, r6, #30
 80a64de:	d50d      	bpl.n	80a64fc <mbedtls_x509_crt_info+0x3fc>
 80a64e0:	4a84      	ldr	r2, [pc, #528]	; (80a66f4 <mbedtls_x509_crt_info+0x5f4>)
 80a64e2:	4621      	mov	r1, r4
 80a64e4:	4628      	mov	r0, r5
 80a64e6:	f007 fd29 	bl	80adf3c <snprintf>
 80a64ea:	2800      	cmp	r0, #0
 80a64ec:	f2c0 80ec 	blt.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a64f0:	4284      	cmp	r4, r0
 80a64f2:	f240 80e9 	bls.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a64f6:	4b76      	ldr	r3, [pc, #472]	; (80a66d0 <mbedtls_x509_crt_info+0x5d0>)
 80a64f8:	1a24      	subs	r4, r4, r0
 80a64fa:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING_CA,  "Object Signing CA" );
 80a64fc:	07f2      	lsls	r2, r6, #31
 80a64fe:	d50c      	bpl.n	80a651a <mbedtls_x509_crt_info+0x41a>
 80a6500:	4a7d      	ldr	r2, [pc, #500]	; (80a66f8 <mbedtls_x509_crt_info+0x5f8>)
 80a6502:	4621      	mov	r1, r4
 80a6504:	4628      	mov	r0, r5
 80a6506:	f007 fd19 	bl	80adf3c <snprintf>
 80a650a:	2800      	cmp	r0, #0
 80a650c:	f2c0 80dc 	blt.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a6510:	4284      	cmp	r4, r0
 80a6512:	f240 80d9 	bls.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a6516:	1a24      	subs	r4, r4, r0
 80a6518:	4405      	add	r5, r0

        if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
            return( ret );
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
 80a651a:	f8d8 30f8 	ldr.w	r3, [r8, #248]	; 0xf8
 80a651e:	075e      	lsls	r6, r3, #29
 80a6520:	f140 8096 	bpl.w	80a6650 <mbedtls_x509_crt_info+0x550>
    {
        ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
 80a6524:	464b      	mov	r3, r9
 80a6526:	4a75      	ldr	r2, [pc, #468]	; (80a66fc <mbedtls_x509_crt_info+0x5fc>)
 80a6528:	4621      	mov	r1, r4
 80a652a:	4628      	mov	r0, r5
 80a652c:	f007 fd06 	bl	80adf3c <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a6530:	2800      	cmp	r0, #0
 80a6532:	f2c0 80c9 	blt.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a6536:	42a0      	cmp	r0, r4
 80a6538:	f080 80c6 	bcs.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>

        if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
 80a653c:	f8d8 6104 	ldr.w	r6, [r8, #260]	; 0x104
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
    {
        ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a6540:	1a24      	subs	r4, r4, r0
 80a6542:	4405      	add	r5, r0
    int ret;
    size_t n = *size;
    char *p = *buf;
    const char *sep = "";

    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
 80a6544:	0630      	lsls	r0, r6, #24
 80a6546:	4b64      	ldr	r3, [pc, #400]	; (80a66d8 <mbedtls_x509_crt_info+0x5d8>)
 80a6548:	d50d      	bpl.n	80a6566 <mbedtls_x509_crt_info+0x466>
 80a654a:	4a6d      	ldr	r2, [pc, #436]	; (80a6700 <mbedtls_x509_crt_info+0x600>)
 80a654c:	4621      	mov	r1, r4
 80a654e:	4628      	mov	r0, r5
 80a6550:	f007 fcf4 	bl	80adf3c <snprintf>
 80a6554:	2800      	cmp	r0, #0
 80a6556:	f2c0 80b7 	blt.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a655a:	4284      	cmp	r4, r0
 80a655c:	f240 80b4 	bls.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a6560:	4b5b      	ldr	r3, [pc, #364]	; (80a66d0 <mbedtls_x509_crt_info+0x5d0>)
 80a6562:	1a24      	subs	r4, r4, r0
 80a6564:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_NON_REPUDIATION,      "Non Repudiation" );
 80a6566:	0671      	lsls	r1, r6, #25
 80a6568:	d50d      	bpl.n	80a6586 <mbedtls_x509_crt_info+0x486>
 80a656a:	4a66      	ldr	r2, [pc, #408]	; (80a6704 <mbedtls_x509_crt_info+0x604>)
 80a656c:	4621      	mov	r1, r4
 80a656e:	4628      	mov	r0, r5
 80a6570:	f007 fce4 	bl	80adf3c <snprintf>
 80a6574:	2800      	cmp	r0, #0
 80a6576:	f2c0 80a7 	blt.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a657a:	4284      	cmp	r4, r0
 80a657c:	f240 80a4 	bls.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a6580:	4b53      	ldr	r3, [pc, #332]	; (80a66d0 <mbedtls_x509_crt_info+0x5d0>)
 80a6582:	1a24      	subs	r4, r4, r0
 80a6584:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_ENCIPHERMENT,     "Key Encipherment" );
 80a6586:	06b2      	lsls	r2, r6, #26
 80a6588:	d50d      	bpl.n	80a65a6 <mbedtls_x509_crt_info+0x4a6>
 80a658a:	4a5f      	ldr	r2, [pc, #380]	; (80a6708 <mbedtls_x509_crt_info+0x608>)
 80a658c:	4621      	mov	r1, r4
 80a658e:	4628      	mov	r0, r5
 80a6590:	f007 fcd4 	bl	80adf3c <snprintf>
 80a6594:	2800      	cmp	r0, #0
 80a6596:	f2c0 8097 	blt.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a659a:	4284      	cmp	r4, r0
 80a659c:	f240 8094 	bls.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a65a0:	4b4b      	ldr	r3, [pc, #300]	; (80a66d0 <mbedtls_x509_crt_info+0x5d0>)
 80a65a2:	1a24      	subs	r4, r4, r0
 80a65a4:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DATA_ENCIPHERMENT,    "Data Encipherment" );
 80a65a6:	06f0      	lsls	r0, r6, #27
 80a65a8:	d50d      	bpl.n	80a65c6 <mbedtls_x509_crt_info+0x4c6>
 80a65aa:	4a58      	ldr	r2, [pc, #352]	; (80a670c <mbedtls_x509_crt_info+0x60c>)
 80a65ac:	4621      	mov	r1, r4
 80a65ae:	4628      	mov	r0, r5
 80a65b0:	f007 fcc4 	bl	80adf3c <snprintf>
 80a65b4:	2800      	cmp	r0, #0
 80a65b6:	f2c0 8087 	blt.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a65ba:	4284      	cmp	r4, r0
 80a65bc:	f240 8084 	bls.w	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a65c0:	4b43      	ldr	r3, [pc, #268]	; (80a66d0 <mbedtls_x509_crt_info+0x5d0>)
 80a65c2:	1a24      	subs	r4, r4, r0
 80a65c4:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_AGREEMENT,        "Key Agreement" );
 80a65c6:	0731      	lsls	r1, r6, #28
 80a65c8:	d50b      	bpl.n	80a65e2 <mbedtls_x509_crt_info+0x4e2>
 80a65ca:	4a51      	ldr	r2, [pc, #324]	; (80a6710 <mbedtls_x509_crt_info+0x610>)
 80a65cc:	4621      	mov	r1, r4
 80a65ce:	4628      	mov	r0, r5
 80a65d0:	f007 fcb4 	bl	80adf3c <snprintf>
 80a65d4:	2800      	cmp	r0, #0
 80a65d6:	db77      	blt.n	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a65d8:	4284      	cmp	r4, r0
 80a65da:	d975      	bls.n	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a65dc:	4b3c      	ldr	r3, [pc, #240]	; (80a66d0 <mbedtls_x509_crt_info+0x5d0>)
 80a65de:	1a24      	subs	r4, r4, r0
 80a65e0:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_CERT_SIGN,        "Key Cert Sign" );
 80a65e2:	0772      	lsls	r2, r6, #29
 80a65e4:	d50b      	bpl.n	80a65fe <mbedtls_x509_crt_info+0x4fe>
 80a65e6:	4a4b      	ldr	r2, [pc, #300]	; (80a6714 <mbedtls_x509_crt_info+0x614>)
 80a65e8:	4621      	mov	r1, r4
 80a65ea:	4628      	mov	r0, r5
 80a65ec:	f007 fca6 	bl	80adf3c <snprintf>
 80a65f0:	2800      	cmp	r0, #0
 80a65f2:	db69      	blt.n	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a65f4:	4284      	cmp	r4, r0
 80a65f6:	d967      	bls.n	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a65f8:	4b35      	ldr	r3, [pc, #212]	; (80a66d0 <mbedtls_x509_crt_info+0x5d0>)
 80a65fa:	1a24      	subs	r4, r4, r0
 80a65fc:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_CRL_SIGN,             "CRL Sign" );
 80a65fe:	07b0      	lsls	r0, r6, #30
 80a6600:	d50b      	bpl.n	80a661a <mbedtls_x509_crt_info+0x51a>
 80a6602:	4a45      	ldr	r2, [pc, #276]	; (80a6718 <mbedtls_x509_crt_info+0x618>)
 80a6604:	4621      	mov	r1, r4
 80a6606:	4628      	mov	r0, r5
 80a6608:	f007 fc98 	bl	80adf3c <snprintf>
 80a660c:	2800      	cmp	r0, #0
 80a660e:	db5b      	blt.n	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a6610:	4284      	cmp	r4, r0
 80a6612:	d959      	bls.n	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a6614:	4b2e      	ldr	r3, [pc, #184]	; (80a66d0 <mbedtls_x509_crt_info+0x5d0>)
 80a6616:	1a24      	subs	r4, r4, r0
 80a6618:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_ENCIPHER_ONLY,        "Encipher Only" );
 80a661a:	07f1      	lsls	r1, r6, #31
 80a661c:	d50b      	bpl.n	80a6636 <mbedtls_x509_crt_info+0x536>
 80a661e:	4a3f      	ldr	r2, [pc, #252]	; (80a671c <mbedtls_x509_crt_info+0x61c>)
 80a6620:	4621      	mov	r1, r4
 80a6622:	4628      	mov	r0, r5
 80a6624:	f007 fc8a 	bl	80adf3c <snprintf>
 80a6628:	2800      	cmp	r0, #0
 80a662a:	db4d      	blt.n	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a662c:	4284      	cmp	r4, r0
 80a662e:	d94b      	bls.n	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a6630:	4b27      	ldr	r3, [pc, #156]	; (80a66d0 <mbedtls_x509_crt_info+0x5d0>)
 80a6632:	1a24      	subs	r4, r4, r0
 80a6634:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DECIPHER_ONLY,        "Decipher Only" );
 80a6636:	0432      	lsls	r2, r6, #16
 80a6638:	d50a      	bpl.n	80a6650 <mbedtls_x509_crt_info+0x550>
 80a663a:	4a39      	ldr	r2, [pc, #228]	; (80a6720 <mbedtls_x509_crt_info+0x620>)
 80a663c:	4621      	mov	r1, r4
 80a663e:	4628      	mov	r0, r5
 80a6640:	f007 fc7c 	bl	80adf3c <snprintf>
 80a6644:	2800      	cmp	r0, #0
 80a6646:	db3f      	blt.n	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a6648:	4284      	cmp	r4, r0
 80a664a:	d93d      	bls.n	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a664c:	1a24      	subs	r4, r4, r0
 80a664e:	4405      	add	r5, r0

        if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
            return( ret );
    }

    if( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE )
 80a6650:	f8d8 30f8 	ldr.w	r3, [r8, #248]	; 0xf8
 80a6654:	051b      	lsls	r3, r3, #20
 80a6656:	d52b      	bpl.n	80a66b0 <mbedtls_x509_crt_info+0x5b0>
    {
        ret = mbedtls_snprintf( p, n, "\n%sext key usage     : ", prefix );
 80a6658:	464b      	mov	r3, r9
 80a665a:	4a32      	ldr	r2, [pc, #200]	; (80a6724 <mbedtls_x509_crt_info+0x624>)
 80a665c:	4621      	mov	r1, r4
 80a665e:	4628      	mov	r0, r5
 80a6660:	f007 fc6c 	bl	80adf3c <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a6664:	2800      	cmp	r0, #0
 80a6666:	db2f      	blt.n	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a6668:	42a0      	cmp	r0, r4
 80a666a:	d22d      	bcs.n	80a66c8 <mbedtls_x509_crt_info+0x5c8>

        if( ( ret = x509_info_ext_key_usage( &p, &n,
 80a666c:	f508 7684 	add.w	r6, r8, #264	; 0x108
    const char *sep = "";

    while( cur != NULL )
    {
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
            desc = "???";
 80a6670:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 80a6734 <mbedtls_x509_crt_info+0x634>
    int ret;
    const char *desc;
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = extended_key_usage;
    const char *sep = "";
 80a6674:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80a66d8 <mbedtls_x509_crt_info+0x5d8>
static int x509_info_ext_key_usage( char **buf, size_t *size,
                                    const mbedtls_x509_sequence *extended_key_usage )
{
    int ret;
    const char *desc;
    size_t n = *size;
 80a6678:	1a24      	subs	r4, r4, r0
    char *p = *buf;
 80a667a:	4405      	add	r5, r0
    const mbedtls_x509_sequence *cur = extended_key_usage;
    const char *sep = "";

    while( cur != NULL )
    {
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
 80a667c:	a906      	add	r1, sp, #24
 80a667e:	4630      	mov	r0, r6
 80a6680:	f7fc fe14 	bl	80a32ac <mbedtls_oid_get_extended_key_usage>
 80a6684:	b108      	cbz	r0, 80a668a <mbedtls_x509_crt_info+0x58a>
            desc = "???";
 80a6686:	f8cd 9018 	str.w	r9, [sp, #24]

        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
 80a668a:	9b06      	ldr	r3, [sp, #24]
 80a668c:	4a26      	ldr	r2, [pc, #152]	; (80a6728 <mbedtls_x509_crt_info+0x628>)
 80a668e:	9300      	str	r3, [sp, #0]
 80a6690:	4621      	mov	r1, r4
 80a6692:	4643      	mov	r3, r8
 80a6694:	4628      	mov	r0, r5
 80a6696:	f007 fc51 	bl	80adf3c <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a669a:	2800      	cmp	r0, #0
 80a669c:	db14      	blt.n	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a669e:	42a0      	cmp	r0, r4
 80a66a0:	d212      	bcs.n	80a66c8 <mbedtls_x509_crt_info+0x5c8>

        sep = ", ";

        cur = cur->next;
 80a66a2:	68f6      	ldr	r6, [r6, #12]
    {
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
            desc = "???";

        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a66a4:	1a24      	subs	r4, r4, r0
 80a66a6:	4405      	add	r5, r0

        sep = ", ";
 80a66a8:	f8df 8024 	ldr.w	r8, [pc, #36]	; 80a66d0 <mbedtls_x509_crt_info+0x5d0>
    size_t n = *size;
    char *p = *buf;
    const mbedtls_x509_sequence *cur = extended_key_usage;
    const char *sep = "";

    while( cur != NULL )
 80a66ac:	2e00      	cmp	r6, #0
 80a66ae:	d1e5      	bne.n	80a667c <mbedtls_x509_crt_info+0x57c>
        if( ( ret = x509_info_ext_key_usage( &p, &n,
                                             &crt->ext_key_usage ) ) != 0 )
            return( ret );
    }

    ret = mbedtls_snprintf( p, n, "\n" );
 80a66b0:	4a1e      	ldr	r2, [pc, #120]	; (80a672c <mbedtls_x509_crt_info+0x62c>)
 80a66b2:	4621      	mov	r1, r4
 80a66b4:	4628      	mov	r0, r5
 80a66b6:	f007 fc41 	bl	80adf3c <snprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80a66ba:	2800      	cmp	r0, #0
 80a66bc:	db04      	blt.n	80a66c8 <mbedtls_x509_crt_info+0x5c8>
 80a66be:	4284      	cmp	r4, r0
 80a66c0:	d902      	bls.n	80a66c8 <mbedtls_x509_crt_info+0x5c8>

    return( (int) ( size - n ) );
 80a66c2:	1a20      	subs	r0, r4, r0
 80a66c4:	1a38      	subs	r0, r7, r0
 80a66c6:	e000      	b.n	80a66ca <mbedtls_x509_crt_info+0x5ca>
    while( cur != NULL )
    {
        if( cur->buf.len + sep_len >= n )
        {
            *p = '\0';
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
 80a66c8:	4819      	ldr	r0, [pc, #100]	; (80a6730 <mbedtls_x509_crt_info+0x630>)

    ret = mbedtls_snprintf( p, n, "\n" );
    MBEDTLS_X509_SAFE_SNPRINTF;

    return( (int) ( size - n ) );
}
 80a66ca:	b00d      	add	sp, #52	; 0x34
 80a66cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a66d0:	080b05e0 	.word	0x080b05e0
 80a66d4:	080b0a42 	.word	0x080b0a42
 80a66d8:	080af8c8 	.word	0x080af8c8
 80a66dc:	080b0a5a 	.word	0x080b0a5a
 80a66e0:	080b0a67 	.word	0x080b0a67
 80a66e4:	080b0a74 	.word	0x080b0a74
 80a66e8:	080b0a7c 	.word	0x080b0a7c
 80a66ec:	080b0a8d 	.word	0x080b0a8d
 80a66f0:	080b0a98 	.word	0x080b0a98
 80a66f4:	080b0aa1 	.word	0x080b0aa1
 80a66f8:	080b0aac 	.word	0x080b0aac
 80a66fc:	080b0ac0 	.word	0x080b0ac0
 80a6700:	080b0ad8 	.word	0x080b0ad8
 80a6704:	080b0aec 	.word	0x080b0aec
 80a6708:	080b0afe 	.word	0x080b0afe
 80a670c:	080b0b11 	.word	0x080b0b11
 80a6710:	080b0b25 	.word	0x080b0b25
 80a6714:	080b0b35 	.word	0x080b0b35
 80a6718:	080b0b45 	.word	0x080b0b45
 80a671c:	080b0b50 	.word	0x080b0b50
 80a6720:	080b0b60 	.word	0x080b0b60
 80a6724:	080b0b70 	.word	0x080b0b70
 80a6728:	080b0b88 	.word	0x080b0b88
 80a672c:	080afa28 	.word	0x080afa28
 80a6730:	ffffd680 	.word	0xffffd680
 80a6734:	080b05f9 	.word	0x080b05f9

080a6738 <mbedtls_x509_crt_verify_info>:
    { 0, NULL }
};

int mbedtls_x509_crt_verify_info( char *buf, size_t size, const char *prefix,
                          uint32_t flags )
{
 80a6738:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a673c:	4607      	mov	r7, r0
 80a673e:	460d      	mov	r5, r1
 80a6740:	4691      	mov	r9, r2
 80a6742:	4698      	mov	r8, r3
    int ret;
    const struct x509_crt_verify_string *cur;
    char *p = buf;
    size_t n = size;
 80a6744:	460c      	mov	r4, r1
 80a6746:	4e18      	ldr	r6, [pc, #96]	; (80a67a8 <mbedtls_x509_crt_verify_info+0x70>)

    for( cur = x509_crt_verify_strings; cur->string != NULL ; cur++ )
 80a6748:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80a674c:	b1cb      	cbz	r3, 80a6782 <mbedtls_x509_crt_verify_info+0x4a>
    {
        if( ( flags & cur->code ) == 0 )
 80a674e:	f856 2c08 	ldr.w	r2, [r6, #-8]
 80a6752:	ea18 0f02 	tst.w	r8, r2
 80a6756:	d012      	beq.n	80a677e <mbedtls_x509_crt_verify_info+0x46>
            continue;

        ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
 80a6758:	9300      	str	r3, [sp, #0]
 80a675a:	4a14      	ldr	r2, [pc, #80]	; (80a67ac <mbedtls_x509_crt_verify_info+0x74>)
 80a675c:	464b      	mov	r3, r9
 80a675e:	4621      	mov	r1, r4
 80a6760:	4638      	mov	r0, r7
 80a6762:	f007 fbeb 	bl	80adf3c <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a6766:	2800      	cmp	r0, #0
 80a6768:	da01      	bge.n	80a676e <mbedtls_x509_crt_verify_info+0x36>
 80a676a:	4811      	ldr	r0, [pc, #68]	; (80a67b0 <mbedtls_x509_crt_verify_info+0x78>)
 80a676c:	e018      	b.n	80a67a0 <mbedtls_x509_crt_verify_info+0x68>
 80a676e:	4284      	cmp	r4, r0
 80a6770:	d9fb      	bls.n	80a676a <mbedtls_x509_crt_verify_info+0x32>
        flags ^= cur->code;
 80a6772:	f856 3c08 	ldr.w	r3, [r6, #-8]
    {
        if( ( flags & cur->code ) == 0 )
            continue;

        ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a6776:	1a24      	subs	r4, r4, r0
 80a6778:	4407      	add	r7, r0
        flags ^= cur->code;
 80a677a:	ea88 0803 	eor.w	r8, r8, r3
 80a677e:	3608      	adds	r6, #8
    int ret;
    const struct x509_crt_verify_string *cur;
    char *p = buf;
    size_t n = size;

    for( cur = x509_crt_verify_strings; cur->string != NULL ; cur++ )
 80a6780:	e7e2      	b.n	80a6748 <mbedtls_x509_crt_verify_info+0x10>
        ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
        MBEDTLS_X509_SAFE_SNPRINTF;
        flags ^= cur->code;
    }

    if( flags != 0 )
 80a6782:	f1b8 0f00 	cmp.w	r8, #0
 80a6786:	d00a      	beq.n	80a679e <mbedtls_x509_crt_verify_info+0x66>
    {
        ret = mbedtls_snprintf( p, n, "%sUnknown reason "
                                       "(this should not happen)\n", prefix );
 80a6788:	464b      	mov	r3, r9
 80a678a:	4a0a      	ldr	r2, [pc, #40]	; (80a67b4 <mbedtls_x509_crt_verify_info+0x7c>)
 80a678c:	4621      	mov	r1, r4
 80a678e:	4638      	mov	r0, r7
 80a6790:	f007 fbd4 	bl	80adf3c <snprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80a6794:	2800      	cmp	r0, #0
 80a6796:	dbe8      	blt.n	80a676a <mbedtls_x509_crt_verify_info+0x32>
 80a6798:	4284      	cmp	r4, r0
 80a679a:	d9e6      	bls.n	80a676a <mbedtls_x509_crt_verify_info+0x32>
 80a679c:	1a24      	subs	r4, r4, r0
    }

    return( (int) ( size - n ) );
 80a679e:	1b28      	subs	r0, r5, r4
}
 80a67a0:	b003      	add	sp, #12
 80a67a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a67a6:	bf00      	nop
 80a67a8:	080b082c 	.word	0x080b082c
 80a67ac:	080b0b8d 	.word	0x080b0b8d
 80a67b0:	ffffd680 	.word	0xffffd680
 80a67b4:	080b0b93 	.word	0x080b0b93

080a67b8 <mbedtls_x509_crt_check_key_usage>:
{
    unsigned int usage_must, usage_may;
    unsigned int may_mask = MBEDTLS_X509_KU_ENCIPHER_ONLY
                          | MBEDTLS_X509_KU_DECIPHER_ONLY;

    if( ( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE ) == 0 )
 80a67b8:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
 80a67bc:	f013 0304 	ands.w	r3, r3, #4
 80a67c0:	d01a      	beq.n	80a67f8 <mbedtls_x509_crt_check_key_usage+0x40>
        return( 0 );

    usage_must = usage & ~may_mask;

    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
 80a67c2:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
 80a67c6:	f421 4000 	bic.w	r0, r1, #32768	; 0x8000
 80a67ca:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
 80a67ce:	f023 0301 	bic.w	r3, r3, #1
 80a67d2:	f020 0001 	bic.w	r0, r0, #1
 80a67d6:	400b      	ands	r3, r1
 80a67d8:	4298      	cmp	r0, r3
 80a67da:	d10c      	bne.n	80a67f6 <mbedtls_x509_crt_check_key_usage+0x3e>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    usage_may = usage & may_mask;

    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
 80a67dc:	f248 0301 	movw	r3, #32769	; 0x8001
 80a67e0:	f248 0001 	movw	r0, #32769	; 0x8001
 80a67e4:	430a      	orrs	r2, r1
 80a67e6:	4013      	ands	r3, r2
        return( 0 );

    usage_must = usage & ~may_mask;

    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 80a67e8:	4a04      	ldr	r2, [pc, #16]	; (80a67fc <mbedtls_x509_crt_check_key_usage+0x44>)

    usage_may = usage & may_mask;

    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
 80a67ea:	4008      	ands	r0, r1
        return( 0 );

    usage_must = usage & ~may_mask;

    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 80a67ec:	4298      	cmp	r0, r3
 80a67ee:	bf14      	ite	ne
 80a67f0:	4613      	movne	r3, r2
 80a67f2:	2300      	moveq	r3, #0
 80a67f4:	e000      	b.n	80a67f8 <mbedtls_x509_crt_check_key_usage+0x40>
 80a67f6:	4b01      	ldr	r3, [pc, #4]	; (80a67fc <mbedtls_x509_crt_check_key_usage+0x44>)

    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    return( 0 );
}
 80a67f8:	4618      	mov	r0, r3
 80a67fa:	4770      	bx	lr
 80a67fc:	ffffd800 	.word	0xffffd800

080a6800 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>:
 * bottom means child is the end entity cert
 */
static int x509_crt_check_parent( const mbedtls_x509_crt *child,
                                  const mbedtls_x509_crt *parent,
                                  int top, int bottom )
{
 80a6800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a6804:	4606      	mov	r6, r0
 80a6806:	460d      	mov	r5, r1
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 80a6808:	304c      	adds	r0, #76	; 0x4c
 80a680a:	316c      	adds	r1, #108	; 0x6c
 * bottom means child is the end entity cert
 */
static int x509_crt_check_parent( const mbedtls_x509_crt *child,
                                  const mbedtls_x509_crt *parent,
                                  int top, int bottom )
{
 80a680c:	4617      	mov	r7, r2
 80a680e:	4698      	mov	r8, r3
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 80a6810:	f7ff fbdb 	bl	80a5fca <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
 80a6814:	4604      	mov	r4, r0
 80a6816:	b9d8      	cbnz	r0, 80a6850 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x50>

    /* Parent must have the basicConstraints CA bit set as a general rule */
    need_ca_bit = 1;

    /* Exception: v1/v2 certificates that are locally trusted. */
    if( top && parent->version < 3 )
 80a6818:	b177      	cbz	r7, 80a6838 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x38>
 80a681a:	69af      	ldr	r7, [r5, #24]
        need_ca_bit = 0;

    /* Exception: self-signed end-entity certs that are locally trusted. */
    if( top && bottom &&
 80a681c:	f1b8 0f00 	cmp.w	r8, #0
 80a6820:	d008      	beq.n	80a6834 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x34>
        child->raw.len == parent->raw.len &&
 80a6822:	6872      	ldr	r2, [r6, #4]
    /* Exception: v1/v2 certificates that are locally trusted. */
    if( top && parent->version < 3 )
        need_ca_bit = 0;

    /* Exception: self-signed end-entity certs that are locally trusted. */
    if( top && bottom &&
 80a6824:	686b      	ldr	r3, [r5, #4]
 80a6826:	429a      	cmp	r2, r3
 80a6828:	d104      	bne.n	80a6834 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x34>
        child->raw.len == parent->raw.len &&
        memcmp( child->raw.p, parent->raw.p, child->raw.len ) == 0 )
 80a682a:	68a9      	ldr	r1, [r5, #8]
 80a682c:	68b0      	ldr	r0, [r6, #8]
 80a682e:	f008 fc51 	bl	80af0d4 <memcmp>
    if( top && parent->version < 3 )
        need_ca_bit = 0;

    /* Exception: self-signed end-entity certs that are locally trusted. */
    if( top && bottom &&
        child->raw.len == parent->raw.len &&
 80a6832:	b178      	cbz	r0, 80a6854 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x54>
        memcmp( child->raw.p, parent->raw.p, child->raw.len ) == 0 )
    {
        need_ca_bit = 0;
    }

    if( need_ca_bit && ! parent->ca_istrue )
 80a6834:	2f02      	cmp	r7, #2
 80a6836:	dd0d      	ble.n	80a6854 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x54>
 80a6838:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
 80a683c:	b143      	cbz	r3, 80a6850 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x50>
        return( -1 );

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( need_ca_bit &&
        mbedtls_x509_crt_check_key_usage( parent, MBEDTLS_X509_KU_KEY_CERT_SIGN ) != 0 )
 80a683e:	2104      	movs	r1, #4
 80a6840:	4628      	mov	r0, r5
 80a6842:	f7ff ffb9 	bl	80a67b8 <mbedtls_x509_crt_check_key_usage>

    if( need_ca_bit && ! parent->ca_istrue )
        return( -1 );

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( need_ca_bit &&
 80a6846:	3000      	adds	r0, #0
 80a6848:	bf18      	it	ne
 80a684a:	2001      	movne	r0, #1
 80a684c:	4244      	negs	r4, r0
 80a684e:	e001      	b.n	80a6854 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii+0x54>
{
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
        return( -1 );
 80a6850:	f04f 34ff 	mov.w	r4, #4294967295
        return( -1 );
    }
#endif

    return( 0 );
}
 80a6854:	4620      	mov	r0, r4
 80a6856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a685a <mbedtls_x509_crt_is_revoked>:
#if defined(MBEDTLS_X509_CRL_PARSE_C)
/*
 * Return 1 if the certificate is revoked, or 0 otherwise.
 */
int mbedtls_x509_crt_is_revoked( const mbedtls_x509_crt *crt, const mbedtls_x509_crl *crl )
{
 80a685a:	b538      	push	{r3, r4, r5, lr}
 80a685c:	4605      	mov	r5, r0
    const mbedtls_x509_crl_entry *cur = &crl->entry;
 80a685e:	f101 0484 	add.w	r4, r1, #132	; 0x84

    while( cur != NULL && cur->serial.len != 0 )
 80a6862:	b1a4      	cbz	r4, 80a688e <mbedtls_x509_crt_is_revoked+0x34>
 80a6864:	6922      	ldr	r2, [r4, #16]
 80a6866:	b1a2      	cbz	r2, 80a6892 <mbedtls_x509_crt_is_revoked+0x38>
    {
        if( crt->serial.len == cur->serial.len &&
 80a6868:	6a2b      	ldr	r3, [r5, #32]
 80a686a:	429a      	cmp	r2, r3
 80a686c:	d001      	beq.n	80a6872 <mbedtls_x509_crt_is_revoked+0x18>
        {
            if( mbedtls_x509_time_is_past( &cur->revocation_date ) )
                return( 1 );
        }

        cur = cur->next;
 80a686e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 */
int mbedtls_x509_crt_is_revoked( const mbedtls_x509_crt *crt, const mbedtls_x509_crl *crl )
{
    const mbedtls_x509_crl_entry *cur = &crl->entry;

    while( cur != NULL && cur->serial.len != 0 )
 80a6870:	e7f7      	b.n	80a6862 <mbedtls_x509_crt_is_revoked+0x8>
    {
        if( crt->serial.len == cur->serial.len &&
            memcmp( crt->serial.p, cur->serial.p, crt->serial.len ) == 0 )
 80a6872:	6961      	ldr	r1, [r4, #20]
 80a6874:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80a6876:	f008 fc2d 	bl	80af0d4 <memcmp>
{
    const mbedtls_x509_crl_entry *cur = &crl->entry;

    while( cur != NULL && cur->serial.len != 0 )
    {
        if( crt->serial.len == cur->serial.len &&
 80a687a:	2800      	cmp	r0, #0
 80a687c:	d1f7      	bne.n	80a686e <mbedtls_x509_crt_is_revoked+0x14>
            memcmp( crt->serial.p, cur->serial.p, crt->serial.len ) == 0 )
        {
            if( mbedtls_x509_time_is_past( &cur->revocation_date ) )
 80a687e:	f104 0018 	add.w	r0, r4, #24
 80a6882:	f7fe facd 	bl	80a4e20 <mbedtls_x509_time_is_past>
 80a6886:	2800      	cmp	r0, #0
 80a6888:	d0f1      	beq.n	80a686e <mbedtls_x509_crt_is_revoked+0x14>
                return( 1 );
 80a688a:	2001      	movs	r0, #1
 80a688c:	bd38      	pop	{r3, r4, r5, pc}
        }

        cur = cur->next;
    }

    return( 0 );
 80a688e:	4620      	mov	r0, r4
 80a6890:	bd38      	pop	{r3, r4, r5, pc}
 80a6892:	4610      	mov	r0, r2
}
 80a6894:	bd38      	pop	{r3, r4, r5, pc}

080a6896 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile>:
 * Skip validation if no CRL for the given CA is present.
 */
static int x509_crt_verifycrl( mbedtls_x509_crt *crt, mbedtls_x509_crt *ca,
                               mbedtls_x509_crl *crl_list,
                               const mbedtls_x509_crt_profile *profile )
{
 80a6896:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a689a:	b099      	sub	sp, #100	; 0x64
 80a689c:	9005      	str	r0, [sp, #20]
 80a689e:	4614      	mov	r4, r2
 80a68a0:	461f      	mov	r7, r3
    int flags = 0;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;

    if( ca == NULL )
 80a68a2:	460e      	mov	r6, r1
 80a68a4:	2900      	cmp	r1, #0
 80a68a6:	d077      	beq.n	80a6998 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x102>
 80a68a8:	2500      	movs	r5, #0
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 80a68aa:	f04f 0a01 	mov.w	sl, #1
    const mbedtls_md_info_t *md_info;

    if( ca == NULL )
        return( flags );

    while( crl_list != NULL )
 80a68ae:	2c00      	cmp	r4, #0
 80a68b0:	d07a      	beq.n	80a69a8 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x112>
    {
        if( crl_list->version == 0 ||
 80a68b2:	69a3      	ldr	r3, [r4, #24]
 80a68b4:	2b00      	cmp	r3, #0
 80a68b6:	d06c      	beq.n	80a6992 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xfc>
            crl_list->issuer_raw.len != ca->subject_raw.len ||
 80a68b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    if( ca == NULL )
        return( flags );

    while( crl_list != NULL )
    {
        if( crl_list->version == 0 ||
 80a68ba:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80a68bc:	429a      	cmp	r2, r3
 80a68be:	d168      	bne.n	80a6992 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xfc>
            crl_list->issuer_raw.len != ca->subject_raw.len ||
            memcmp( crl_list->issuer_raw.p, ca->subject_raw.p,
 80a68c0:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 80a68c2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80a68c4:	f008 fc06 	bl	80af0d4 <memcmp>
        return( flags );

    while( crl_list != NULL )
    {
        if( crl_list->version == 0 ||
            crl_list->issuer_raw.len != ca->subject_raw.len ||
 80a68c8:	2800      	cmp	r0, #0
 80a68ca:	d162      	bne.n	80a6992 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xfc>

        /*
         * Check if the CA is configured to sign CRLs
         */
#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
        if( mbedtls_x509_crt_check_key_usage( ca, MBEDTLS_X509_KU_CRL_SIGN ) != 0 )
 80a68cc:	2102      	movs	r1, #2
 80a68ce:	4630      	mov	r0, r6
 80a68d0:	f7ff ff72 	bl	80a67b8 <mbedtls_x509_crt_check_key_usage>
 80a68d4:	2800      	cmp	r0, #0
 80a68d6:	d143      	bne.n	80a6960 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xca>
#endif

        /*
         * Check if CRL is correctly signed by the trusted CA
         */
        if( x509_profile_check_md_alg( profile, crl_list->sig_md ) != 0 )
 80a68d8:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 80a68dc:	683a      	ldr	r2, [r7, #0]
 80a68de:	1e43      	subs	r3, r0, #1
 80a68e0:	fa0a f303 	lsl.w	r3, sl, r3
 80a68e4:	4213      	tst	r3, r2
 80a68e6:	d059      	beq.n	80a699c <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x106>
 80a68e8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
 80a68ec:	2201      	movs	r2, #1
 80a68ee:	3b01      	subs	r3, #1
 80a68f0:	fa02 f303 	lsl.w	r3, r2, r3
 80a68f4:	687a      	ldr	r2, [r7, #4]
 80a68f6:	4213      	tst	r3, r2
 80a68f8:	d053      	beq.n	80a69a2 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x10c>
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;

        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;

        md_info = mbedtls_md_info_from_type( crl_list->sig_md );
 80a68fa:	f7ff fa0b 	bl	80a5d14 <mbedtls_md_info_from_type>
        if( mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash ) != 0 )
 80a68fe:	f10d 0920 	add.w	r9, sp, #32
 80a6902:	464b      	mov	r3, r9
 80a6904:	6922      	ldr	r2, [r4, #16]
 80a6906:	6961      	ldr	r1, [r4, #20]
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;

        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;

        md_info = mbedtls_md_info_from_type( crl_list->sig_md );
 80a6908:	4683      	mov	fp, r0
        if( mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash ) != 0 )
 80a690a:	f7ff fa75 	bl	80a5df8 <mbedtls_md>
 80a690e:	bb38      	cbnz	r0, 80a6960 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xca>
            /* Note: this can't happen except after an internal error */
            flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
            break;
        }

        if( x509_profile_check_key( profile, crl_list->sig_pk, &ca->pk ) != 0 )
 80a6910:	f106 08bc 	add.w	r8, r6, #188	; 0xbc
 80a6914:	4642      	mov	r2, r8
 80a6916:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
 80a691a:	f107 000c 	add.w	r0, r7, #12
 80a691e:	f7ff fbdb 	bl	80a60d8 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>
 80a6922:	b108      	cbz	r0, 80a6928 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x92>
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 80a6924:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 80a6928:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
 80a692c:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
 80a6930:	9304      	str	r3, [sp, #16]
 80a6932:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
 80a6936:	4658      	mov	r0, fp
        }

        if( x509_profile_check_key( profile, crl_list->sig_pk, &ca->pk ) != 0 )
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 80a6938:	9107      	str	r1, [sp, #28]
 80a693a:	9306      	str	r3, [sp, #24]
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
 80a693c:	f7ff fb24 	bl	80a5f88 <mbedtls_md_get_size>
        }

        if( x509_profile_check_key( profile, crl_list->sig_pk, &ca->pk ) != 0 )
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 80a6940:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 80a6944:	9b06      	ldr	r3, [sp, #24]
 80a6946:	9203      	str	r2, [sp, #12]
 80a6948:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
 80a694c:	9907      	ldr	r1, [sp, #28]
 80a694e:	9202      	str	r2, [sp, #8]
 80a6950:	9001      	str	r0, [sp, #4]
 80a6952:	f8cd 9000 	str.w	r9, [sp]
 80a6956:	4642      	mov	r2, r8
 80a6958:	9804      	ldr	r0, [sp, #16]
 80a695a:	f003 ff9f 	bl	80aa89c <mbedtls_pk_verify_ext>
 80a695e:	b110      	cbz	r0, 80a6966 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xd0>
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
                           crl_list->sig.p, crl_list->sig.len ) != 0 )
        {
            flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
 80a6960:	f045 0510 	orr.w	r5, r5, #16
            break;
 80a6964:	e020      	b.n	80a69a8 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x112>
        }

        /*
         * Check for validity of CRL (Do not drop out)
         */
        if( mbedtls_x509_time_is_past( &crl_list->next_update ) )
 80a6966:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 80a696a:	f7fe fa59 	bl	80a4e20 <mbedtls_x509_time_is_past>
 80a696e:	b108      	cbz	r0, 80a6974 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xde>
            flags |= MBEDTLS_X509_BADCRL_EXPIRED;
 80a6970:	f045 0520 	orr.w	r5, r5, #32

        if( mbedtls_x509_time_is_future( &crl_list->this_update ) )
 80a6974:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80a6978:	f7fe fa54 	bl	80a4e24 <mbedtls_x509_time_is_future>
 80a697c:	b108      	cbz	r0, 80a6982 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xec>
            flags |= MBEDTLS_X509_BADCRL_FUTURE;
 80a697e:	f445 6580 	orr.w	r5, r5, #1024	; 0x400

        /*
         * Check if certificate is revoked
         */
        if( mbedtls_x509_crt_is_revoked( crt, crl_list ) )
 80a6982:	4621      	mov	r1, r4
 80a6984:	9805      	ldr	r0, [sp, #20]
 80a6986:	f7ff ff68 	bl	80a685a <mbedtls_x509_crt_is_revoked>
 80a698a:	b110      	cbz	r0, 80a6992 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0xfc>
        {
            flags |= MBEDTLS_X509_BADCERT_REVOKED;
 80a698c:	f045 0502 	orr.w	r5, r5, #2
            break;
 80a6990:	e00a      	b.n	80a69a8 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x112>
        }

        crl_list = crl_list->next;
 80a6992:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 80a6996:	e78a      	b.n	80a68ae <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x18>
    int flags = 0;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;

    if( ca == NULL )
        return( flags );
 80a6998:	460d      	mov	r5, r1
 80a699a:	e005      	b.n	80a69a8 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x112>

        /*
         * Check if CRL is correctly signed by the trusted CA
         */
        if( x509_profile_check_md_alg( profile, crl_list->sig_md ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;
 80a699c:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
 80a69a0:	e7a2      	b.n	80a68e8 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x52>

        if( x509_profile_check_pk_alg( profile, crl_list->sig_pk ) != 0 )
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;
 80a69a2:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000
 80a69a6:	e7a8      	b.n	80a68fa <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile+0x64>

        crl_list = crl_list->next;
    }

    return( flags );
}
 80a69a8:	4628      	mov	r0, r5
 80a69aa:	b019      	add	sp, #100	; 0x64
 80a69ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a69b0 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>:
                mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 80a69b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a69b4:	4604      	mov	r4, r0
 80a69b6:	b09d      	sub	sp, #116	; 0x74
 80a69b8:	4699      	mov	r9, r3
    int check_path_cnt;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_x509_crt *future_past_ca = NULL;

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 80a69ba:	30a4      	adds	r0, #164	; 0xa4
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
    int ret;
    uint32_t ca_flags = 0;
 80a69bc:	2300      	movs	r3, #0
                mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 80a69be:	460d      	mov	r5, r1
 80a69c0:	9206      	str	r2, [sp, #24]
 80a69c2:	f8dd 8098 	ldr.w	r8, [sp, #152]	; 0x98
 80a69c6:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 80a69c8:	f8dd a0a4 	ldr.w	sl, [sp, #164]	; 0xa4
    int ret;
    uint32_t ca_flags = 0;
 80a69cc:	930b      	str	r3, [sp, #44]	; 0x2c
    int check_path_cnt;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_x509_crt *future_past_ca = NULL;

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 80a69ce:	f7fe fa27 	bl	80a4e20 <mbedtls_x509_time_is_past>
 80a69d2:	b118      	cbz	r0, 80a69dc <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x2c>
        *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 80a69d4:	6833      	ldr	r3, [r6, #0]
 80a69d6:	f043 0301 	orr.w	r3, r3, #1
 80a69da:	6033      	str	r3, [r6, #0]

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
 80a69dc:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 80a69e0:	f7fe fa20 	bl	80a4e24 <mbedtls_x509_time_is_future>
 80a69e4:	b118      	cbz	r0, 80a69ee <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x3e>
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;
 80a69e6:	6833      	ldr	r3, [r6, #0]
 80a69e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80a69ec:	6033      	str	r3, [r6, #0]
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 80a69ee:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
 80a69f2:	1e5a      	subs	r2, r3, #1
 80a69f4:	2301      	movs	r3, #1
 80a69f6:	4093      	lsls	r3, r2
 80a69f8:	f8d9 2000 	ldr.w	r2, [r9]
 80a69fc:	4213      	tst	r3, r2
 80a69fe:	f000 80c0 	beq.w	80a6b82 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1d2>
 80a6a02:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
 80a6a06:	1e5a      	subs	r2, r3, #1
 80a6a08:	2301      	movs	r3, #1
 80a6a0a:	4093      	lsls	r3, r2
 80a6a0c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80a6a10:	4213      	tst	r3, r2
 80a6a12:	f000 80bb 	beq.w	80a6b8c <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1dc>
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    /*
     * Child is the top of the chain. Check against the trust_ca list.
     */
    *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 80a6a16:	6833      	ldr	r3, [r6, #0]

    md_info = mbedtls_md_info_from_type( child->sig_md );
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 80a6a18:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    /*
     * Child is the top of the chain. Check against the trust_ca list.
     */
    *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 80a6a1c:	f043 0308 	orr.w	r3, r3, #8
 80a6a20:	6033      	str	r3, [r6, #0]

    md_info = mbedtls_md_info_from_type( child->sig_md );
 80a6a22:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
 80a6a26:	f7ff f975 	bl	80a5d14 <mbedtls_md_info_from_type>
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 80a6a2a:	465b      	mov	r3, fp
 80a6a2c:	6922      	ldr	r2, [r4, #16]
 80a6a2e:	6961      	ldr	r1, [r4, #20]
    /*
     * Child is the top of the chain. Check against the trust_ca list.
     */
    *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;

    md_info = mbedtls_md_info_from_type( child->sig_md );
 80a6a30:	9005      	str	r0, [sp, #20]
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 80a6a32:	f7ff f9e1 	bl	80a5df8 <mbedtls_md>
 80a6a36:	2800      	cmp	r0, #0
 80a6a38:	d16d      	bne.n	80a6b16 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x166>
 80a6a3a:	4607      	mov	r7, r0
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 80a6a3c:	f8cd b01c 	str.w	fp, [sp, #28]
        /* Note: this can't happen except after an internal error */
        /* Cannot check signature, no need to try any CA */
        trust_ca = NULL;
    }

    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
 80a6a40:	b915      	cbnz	r5, 80a6a48 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x98>
        }

        break;
    }

    if( trust_ca != NULL || ( trust_ca = future_past_ca ) != NULL )
 80a6a42:	2f00      	cmp	r7, #0
 80a6a44:	d14c      	bne.n	80a6ae0 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x130>
 80a6a46:	e066      	b.n	80a6b16 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x166>
        trust_ca = NULL;
    }

    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
    {
        if( x509_crt_check_parent( child, trust_ca, 1, path_cnt == 0 ) != 0 )
 80a6a48:	fab8 f388 	clz	r3, r8
 80a6a4c:	2201      	movs	r2, #1
 80a6a4e:	095b      	lsrs	r3, r3, #5
 80a6a50:	4629      	mov	r1, r5
 80a6a52:	4620      	mov	r0, r4
 80a6a54:	f7ff fed4 	bl	80a6800 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 80a6a58:	2800      	cmp	r0, #0
 80a6a5a:	d13e      	bne.n	80a6ada <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x12a>

        /*
         * Reduce check_path_cnt to check against if top of the chain is
         * the same as the trusted CA
         */
        if( child->subject_raw.len == trust_ca->subject_raw.len &&
 80a6a5c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80a6a5e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
    {
        if( x509_crt_check_parent( child, trust_ca, 1, path_cnt == 0 ) != 0 )
            continue;

        check_path_cnt = path_cnt + 1;
 80a6a60:	f108 0b01 	add.w	fp, r8, #1

        /*
         * Reduce check_path_cnt to check against if top of the chain is
         * the same as the trusted CA
         */
        if( child->subject_raw.len == trust_ca->subject_raw.len &&
 80a6a64:	429a      	cmp	r2, r3
 80a6a66:	d106      	bne.n	80a6a76 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xc6>
            memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
 80a6a68:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 80a6a6a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80a6a6c:	f008 fb32 	bl	80af0d4 <memcmp>
                    child->subject_raw.len ) == 0 )
        {
            check_path_cnt--;
 80a6a70:	2800      	cmp	r0, #0
 80a6a72:	bf08      	it	eq
 80a6a74:	46c3      	moveq	fp, r8
        }

        /* Self signed certificates do not count towards the limit */
        if( trust_ca->max_pathlen > 0 &&
 80a6a76:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 80a6a7a:	2b00      	cmp	r3, #0
 80a6a7c:	dd04      	ble.n	80a6a88 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xd8>
 80a6a7e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80a6a80:	ebc2 0b0b 	rsb	fp, r2, fp
 80a6a84:	455b      	cmp	r3, fp
 80a6a86:	db28      	blt.n	80a6ada <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x12a>
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 80a6a88:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 80a6a8c:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 80a6a90:	9805      	ldr	r0, [sp, #20]
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 80a6a92:	f894 b129 	ldrb.w	fp, [r4, #297]	; 0x129
 80a6a96:	9109      	str	r1, [sp, #36]	; 0x24
 80a6a98:	9308      	str	r3, [sp, #32]
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 80a6a9a:	f7ff fa75 	bl	80a5f88 <mbedtls_md_get_size>
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 80a6a9e:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 80a6aa2:	9b07      	ldr	r3, [sp, #28]
 80a6aa4:	9203      	str	r2, [sp, #12]
 80a6aa6:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80a6aaa:	9001      	str	r0, [sp, #4]
 80a6aac:	9202      	str	r2, [sp, #8]
 80a6aae:	9300      	str	r3, [sp, #0]
 80a6ab0:	f105 02bc 	add.w	r2, r5, #188	; 0xbc
 80a6ab4:	9b08      	ldr	r3, [sp, #32]
 80a6ab6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a6ab8:	4658      	mov	r0, fp
 80a6aba:	f003 feef 	bl	80aa89c <mbedtls_pk_verify_ext>
 80a6abe:	b960      	cbnz	r0, 80a6ada <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x12a>
                           child->sig.p, child->sig.len ) != 0 )
        {
            continue;
        }

        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) ||
 80a6ac0:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
 80a6ac4:	f7fe f9ac 	bl	80a4e20 <mbedtls_x509_time_is_past>
 80a6ac8:	b920      	cbnz	r0, 80a6ad4 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x124>
            mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
 80a6aca:	f105 008c 	add.w	r0, r5, #140	; 0x8c
 80a6ace:	f7fe f9a9 	bl	80a4e24 <mbedtls_x509_time_is_future>
                           child->sig.p, child->sig.len ) != 0 )
        {
            continue;
        }

        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) ||
 80a6ad2:	b130      	cbz	r0, 80a6ae2 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x132>
            mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
        {
            if ( future_past_ca == NULL )
 80a6ad4:	2f00      	cmp	r7, #0
 80a6ad6:	bf08      	it	eq
 80a6ad8:	462f      	moveq	r7, r5
        /* Note: this can't happen except after an internal error */
        /* Cannot check signature, no need to try any CA */
        trust_ca = NULL;
    }

    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
 80a6ada:	f8d5 5130 	ldr.w	r5, [r5, #304]	; 0x130
 80a6ade:	e7af      	b.n	80a6a40 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x90>
 80a6ae0:	463d      	mov	r5, r7
    if( trust_ca != NULL || ( trust_ca = future_past_ca ) != NULL )
    {
        /*
         * Top of chain is signed by a trusted CA
         */
        *flags &= ~MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 80a6ae2:	6833      	ldr	r3, [r6, #0]

        if( x509_profile_check_key( profile, child->sig_pk, &trust_ca->pk ) != 0 )
 80a6ae4:	f105 02bc 	add.w	r2, r5, #188	; 0xbc
    if( trust_ca != NULL || ( trust_ca = future_past_ca ) != NULL )
    {
        /*
         * Top of chain is signed by a trusted CA
         */
        *flags &= ~MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 80a6ae8:	f023 0308 	bic.w	r3, r3, #8
 80a6aec:	6033      	str	r3, [r6, #0]

        if( x509_profile_check_key( profile, child->sig_pk, &trust_ca->pk ) != 0 )
 80a6aee:	f894 1129 	ldrb.w	r1, [r4, #297]	; 0x129
 80a6af2:	f109 000c 	add.w	r0, r9, #12
 80a6af6:	f7ff faef 	bl	80a60d8 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>
 80a6afa:	b118      	cbz	r0, 80a6b04 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x154>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 80a6afc:	6833      	ldr	r3, [r6, #0]
 80a6afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80a6b02:	6033      	str	r3, [r6, #0]
     * If top of chain is not the same as the trusted CA send a verify request
     * to the callback for any issues with validity and CRL presence for the
     * trusted CA certificate.
     */
    if( trust_ca != NULL &&
        ( child->subject_raw.len != trust_ca->subject_raw.len ||
 80a6b04:	6c62      	ldr	r2, [r4, #68]	; 0x44
    /*
     * If top of chain is not the same as the trusted CA send a verify request
     * to the callback for any issues with validity and CRL presence for the
     * trusted CA certificate.
     */
    if( trust_ca != NULL &&
 80a6b06:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80a6b08:	429a      	cmp	r2, r3
 80a6b0a:	d10d      	bne.n	80a6b28 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x178>
        ( child->subject_raw.len != trust_ca->subject_raw.len ||
          memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
 80a6b0c:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 80a6b0e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80a6b10:	f008 fae0 	bl	80af0d4 <memcmp>
     * If top of chain is not the same as the trusted CA send a verify request
     * to the callback for any issues with validity and CRL presence for the
     * trusted CA certificate.
     */
    if( trust_ca != NULL &&
        ( child->subject_raw.len != trust_ca->subject_raw.len ||
 80a6b14:	b940      	cbnz	r0, 80a6b28 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x178>
            }
        }
    }

    /* Call callback on top cert */
    if( NULL != f_vrfy )
 80a6b16:	f1ba 0f00 	cmp.w	sl, #0
 80a6b1a:	d12a      	bne.n	80a6b72 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1c2>
    {
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );
    }

    *flags |= ca_flags;
 80a6b1c:	6832      	ldr	r2, [r6, #0]
 80a6b1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    return( 0 );
 80a6b20:	2000      	movs	r0, #0
    {
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );
    }

    *flags |= ca_flags;
 80a6b22:	4313      	orrs	r3, r2
 80a6b24:	6033      	str	r3, [r6, #0]

    return( 0 );
 80a6b26:	e036      	b.n	80a6b96 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1e6>
          memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
                  child->subject_raw.len ) != 0 ) )
    {
#if defined(MBEDTLS_X509_CRL_PARSE_C)
        /* Check trusted CA's CRL for the chain's top crt */
        *flags |= x509_crt_verifycrl( child, trust_ca, ca_crl, profile );
 80a6b28:	464b      	mov	r3, r9
 80a6b2a:	9a06      	ldr	r2, [sp, #24]
 80a6b2c:	4629      	mov	r1, r5
 80a6b2e:	4620      	mov	r0, r4
 80a6b30:	f7ff feb1 	bl	80a6896 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile>
 80a6b34:	6833      	ldr	r3, [r6, #0]
 80a6b36:	4318      	orrs	r0, r3
 80a6b38:	6030      	str	r0, [r6, #0]
#else
        ((void) ca_crl);
#endif

        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) )
 80a6b3a:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
 80a6b3e:	f7fe f96f 	bl	80a4e20 <mbedtls_x509_time_is_past>
 80a6b42:	b118      	cbz	r0, 80a6b4c <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x19c>
            ca_flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 80a6b44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a6b46:	f043 0301 	orr.w	r3, r3, #1
 80a6b4a:	930b      	str	r3, [sp, #44]	; 0x2c

        if( mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
 80a6b4c:	f105 008c 	add.w	r0, r5, #140	; 0x8c
 80a6b50:	f7fe f968 	bl	80a4e24 <mbedtls_x509_time_is_future>
 80a6b54:	b118      	cbz	r0, 80a6b5e <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1ae>
            ca_flags |= MBEDTLS_X509_BADCERT_FUTURE;
 80a6b56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a6b58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80a6b5c:	930b      	str	r3, [sp, #44]	; 0x2c

        if( NULL != f_vrfy )
 80a6b5e:	f1ba 0f00 	cmp.w	sl, #0
 80a6b62:	d0db      	beq.n	80a6b1c <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x16c>
        {
            if( ( ret = f_vrfy( p_vrfy, trust_ca, path_cnt + 1,
 80a6b64:	ab0b      	add	r3, sp, #44	; 0x2c
 80a6b66:	f108 0201 	add.w	r2, r8, #1
 80a6b6a:	4629      	mov	r1, r5
 80a6b6c:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80a6b6e:	47d0      	blx	sl
 80a6b70:	b988      	cbnz	r0, 80a6b96 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1e6>
    }

    /* Call callback on top cert */
    if( NULL != f_vrfy )
    {
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
 80a6b72:	4633      	mov	r3, r6
 80a6b74:	4642      	mov	r2, r8
 80a6b76:	4621      	mov	r1, r4
 80a6b78:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80a6b7a:	47d0      	blx	sl
 80a6b7c:	2800      	cmp	r0, #0
 80a6b7e:	d0cd      	beq.n	80a6b1c <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x16c>
 80a6b80:	e009      	b.n	80a6b96 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1e6>

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;

    if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
 80a6b82:	6833      	ldr	r3, [r6, #0]
 80a6b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80a6b88:	6033      	str	r3, [r6, #0]
 80a6b8a:	e73a      	b.n	80a6a02 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x52>

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 80a6b8c:	6833      	ldr	r3, [r6, #0]
 80a6b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80a6b92:	6033      	str	r3, [r6, #0]
 80a6b94:	e73f      	b.n	80a6a16 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x66>
    }

    *flags |= ca_flags;

    return( 0 );
}
 80a6b96:	b01d      	add	sp, #116	; 0x74
 80a6b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a6b9c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>:
                mbedtls_x509_crt *trust_ca, mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 80a6b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6ba0:	b09d      	sub	sp, #116	; 0x74
 80a6ba2:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80a6ba4:	469a      	mov	sl, r3
    int ret;
    uint32_t parent_flags = 0;
 80a6ba6:	2300      	movs	r3, #0
                mbedtls_x509_crt *trust_ca, mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 80a6ba8:	4605      	mov	r5, r0
 80a6baa:	460f      	mov	r7, r1
 80a6bac:	9206      	str	r2, [sp, #24]
 80a6bae:	f8dd 8098 	ldr.w	r8, [sp, #152]	; 0x98
 80a6bb2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
    int ret;
    uint32_t parent_flags = 0;
 80a6bb4:	930b      	str	r3, [sp, #44]	; 0x2c
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    mbedtls_x509_crt *grandparent;
    const mbedtls_md_info_t *md_info;

    /* Counting intermediate self signed certificates */
    if( ( path_cnt != 0 ) && x509_name_cmp( &child->issuer, &child->subject ) == 0 )
 80a6bb6:	b146      	cbz	r6, 80a6bca <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x2e>
 80a6bb8:	f100 016c 	add.w	r1, r0, #108	; 0x6c
 80a6bbc:	304c      	adds	r0, #76	; 0x4c
 80a6bbe:	f7ff fa04 	bl	80a5fca <_ZL13x509_name_cmpPK23mbedtls_asn1_named_dataS1_>
 80a6bc2:	2800      	cmp	r0, #0
 80a6bc4:	d07a      	beq.n	80a6cbc <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x120>
        self_cnt++;

    /* path_cnt is 0 for the first intermediate CA */
    if( 1 + path_cnt > MBEDTLS_X509_MAX_INTERMEDIATE_CA )
 80a6bc6:	2e07      	cmp	r6, #7
 80a6bc8:	dc76      	bgt.n	80a6cb8 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x11c>
    {
        /* return immediately as the goal is to avoid unbounded recursion */
        return( MBEDTLS_ERR_X509_FATAL_ERROR );
    }

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 80a6bca:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
 80a6bce:	f7fe f927 	bl	80a4e20 <mbedtls_x509_time_is_past>
 80a6bd2:	b118      	cbz	r0, 80a6bdc <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x40>
        *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 80a6bd4:	6823      	ldr	r3, [r4, #0]
 80a6bd6:	f043 0301 	orr.w	r3, r3, #1
 80a6bda:	6023      	str	r3, [r4, #0]

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
 80a6bdc:	f105 008c 	add.w	r0, r5, #140	; 0x8c
 80a6be0:	f7fe f920 	bl	80a4e24 <mbedtls_x509_time_is_future>
 80a6be4:	b118      	cbz	r0, 80a6bee <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x52>
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;
 80a6be6:	6823      	ldr	r3, [r4, #0]
 80a6be8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80a6bec:	6023      	str	r3, [r4, #0]
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 80a6bee:	f895 3128 	ldrb.w	r3, [r5, #296]	; 0x128
 80a6bf2:	1e5a      	subs	r2, r3, #1
 80a6bf4:	2301      	movs	r3, #1
 80a6bf6:	4093      	lsls	r3, r2
 80a6bf8:	f8d8 2000 	ldr.w	r2, [r8]
 80a6bfc:	4213      	tst	r3, r2
 80a6bfe:	d061      	beq.n	80a6cc4 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x128>
 80a6c00:	f895 3129 	ldrb.w	r3, [r5, #297]	; 0x129
 80a6c04:	1e5a      	subs	r2, r3, #1
 80a6c06:	2301      	movs	r3, #1
 80a6c08:	4093      	lsls	r3, r2
 80a6c0a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80a6c0e:	4213      	tst	r3, r2
 80a6c10:	d05d      	beq.n	80a6cce <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x132>
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    md_info = mbedtls_md_info_from_type( child->sig_md );
 80a6c12:	f895 0128 	ldrb.w	r0, [r5, #296]	; 0x128
 80a6c16:	f7ff f87d 	bl	80a5d14 <mbedtls_md_info_from_type>
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 80a6c1a:	ab0c      	add	r3, sp, #48	; 0x30
 80a6c1c:	692a      	ldr	r2, [r5, #16]
 80a6c1e:	6969      	ldr	r1, [r5, #20]
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    md_info = mbedtls_md_info_from_type( child->sig_md );
 80a6c20:	4683      	mov	fp, r0
    if( mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash ) != 0 )
 80a6c22:	f7ff f8e9 	bl	80a5df8 <mbedtls_md>
 80a6c26:	bb48      	cbnz	r0, 80a6c7c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xe0>
        /* Note: this can't happen except after an internal error */
        *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
    }
    else
    {
        if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
 80a6c28:	f107 09bc 	add.w	r9, r7, #188	; 0xbc
 80a6c2c:	464a      	mov	r2, r9
 80a6c2e:	f895 1129 	ldrb.w	r1, [r5, #297]	; 0x129
 80a6c32:	f108 000c 	add.w	r0, r8, #12
 80a6c36:	f7ff fa4f 	bl	80a60d8 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>
 80a6c3a:	b118      	cbz	r0, 80a6c44 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xa8>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 80a6c3c:	6823      	ldr	r3, [r4, #0]
 80a6c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80a6c42:	6023      	str	r3, [r4, #0]

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 80a6c44:	f895 3129 	ldrb.w	r3, [r5, #297]	; 0x129
 80a6c48:	f8d5 112c 	ldr.w	r1, [r5, #300]	; 0x12c
 80a6c4c:	9307      	str	r3, [sp, #28]
 80a6c4e:	f895 3128 	ldrb.w	r3, [r5, #296]	; 0x128
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 80a6c52:	4658      	mov	r0, fp
    else
    {
        if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 80a6c54:	9109      	str	r1, [sp, #36]	; 0x24
 80a6c56:	9308      	str	r3, [sp, #32]
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 80a6c58:	f7ff f996 	bl	80a5f88 <mbedtls_md_get_size>
    else
    {
        if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 80a6c5c:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
 80a6c60:	9b08      	ldr	r3, [sp, #32]
 80a6c62:	9203      	str	r2, [sp, #12]
 80a6c64:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
 80a6c68:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a6c6a:	9202      	str	r2, [sp, #8]
 80a6c6c:	aa0c      	add	r2, sp, #48	; 0x30
 80a6c6e:	9001      	str	r0, [sp, #4]
 80a6c70:	9200      	str	r2, [sp, #0]
 80a6c72:	9807      	ldr	r0, [sp, #28]
 80a6c74:	464a      	mov	r2, r9
 80a6c76:	f003 fe11 	bl	80aa89c <mbedtls_pk_verify_ext>
 80a6c7a:	b118      	cbz	r0, 80a6c84 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xe8>
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
                           child->sig.p, child->sig.len ) != 0 )
        {
            *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 80a6c7c:	6823      	ldr	r3, [r4, #0]
 80a6c7e:	f043 0308 	orr.w	r3, r3, #8
 80a6c82:	6023      	str	r3, [r4, #0]
        }
    }

#if defined(MBEDTLS_X509_CRL_PARSE_C)
    /* Check trusted CA's CRL for the given crt */
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
 80a6c84:	4643      	mov	r3, r8
 80a6c86:	4652      	mov	r2, sl
 80a6c88:	4639      	mov	r1, r7
 80a6c8a:	4628      	mov	r0, r5
 80a6c8c:	f7ff fe03 	bl	80a6896 <_ZL18x509_crt_verifycrlP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profile>
 80a6c90:	6823      	ldr	r3, [r4, #0]
#endif

    /* Look for a grandparent in trusted CAs */
    for( grandparent = trust_ca;
 80a6c92:	f8dd 9018 	ldr.w	r9, [sp, #24]
        }
    }

#if defined(MBEDTLS_X509_CRL_PARSE_C)
    /* Check trusted CA's CRL for the given crt */
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
 80a6c96:	4318      	orrs	r0, r3
 80a6c98:	6020      	str	r0, [r4, #0]
#endif

    /* Look for a grandparent in trusted CAs */
    for( grandparent = trust_ca;
         grandparent != NULL;
 80a6c9a:	f1b9 0f00 	cmp.w	r9, #0
 80a6c9e:	d029      	beq.n	80a6cf4 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x158>
         grandparent = grandparent->next )
    {
        if( x509_crt_check_parent( parent, grandparent,
 80a6ca0:	fab6 f386 	clz	r3, r6
 80a6ca4:	2200      	movs	r2, #0
 80a6ca6:	095b      	lsrs	r3, r3, #5
 80a6ca8:	4649      	mov	r1, r9
 80a6caa:	4638      	mov	r0, r7
 80a6cac:	f7ff fda8 	bl	80a6800 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 80a6cb0:	b190      	cbz	r0, 80a6cd8 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x13c>
    /* Check trusted CA's CRL for the given crt */
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
#endif

    /* Look for a grandparent in trusted CAs */
    for( grandparent = trust_ca;
 80a6cb2:	f8d9 9130 	ldr.w	r9, [r9, #304]	; 0x130
 80a6cb6:	e7f0      	b.n	80a6c9a <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0xfe>

    /* path_cnt is 0 for the first intermediate CA */
    if( 1 + path_cnt > MBEDTLS_X509_MAX_INTERMEDIATE_CA )
    {
        /* return immediately as the goal is to avoid unbounded recursion */
        return( MBEDTLS_ERR_X509_FATAL_ERROR );
 80a6cb8:	4838      	ldr	r0, [pc, #224]	; (80a6d9c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x200>)
 80a6cba:	e06b      	b.n	80a6d94 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1f8>
    mbedtls_x509_crt *grandparent;
    const mbedtls_md_info_t *md_info;

    /* Counting intermediate self signed certificates */
    if( ( path_cnt != 0 ) && x509_name_cmp( &child->issuer, &child->subject ) == 0 )
        self_cnt++;
 80a6cbc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80a6cbe:	3301      	adds	r3, #1
 80a6cc0:	9328      	str	r3, [sp, #160]	; 0xa0
 80a6cc2:	e780      	b.n	80a6bc6 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x2a>

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;

    if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
 80a6cc4:	6823      	ldr	r3, [r4, #0]
 80a6cc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80a6cca:	6023      	str	r3, [r4, #0]
 80a6ccc:	e798      	b.n	80a6c00 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x64>

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 80a6cce:	6823      	ldr	r3, [r4, #0]
 80a6cd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80a6cd4:	6023      	str	r3, [r4, #0]
 80a6cd6:	e79c      	b.n	80a6c12 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x76>
    }

    if( grandparent != NULL )
    {
        ret = x509_crt_verify_top( parent, grandparent, ca_crl, profile,
                                path_cnt + 1, self_cnt, &parent_flags, f_vrfy, p_vrfy );
 80a6cd8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80a6cda:	4652      	mov	r2, sl
 80a6cdc:	9304      	str	r3, [sp, #16]
 80a6cde:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80a6ce0:	4649      	mov	r1, r9
 80a6ce2:	9303      	str	r3, [sp, #12]
 80a6ce4:	ab0b      	add	r3, sp, #44	; 0x2c
 80a6ce6:	9302      	str	r3, [sp, #8]
 80a6ce8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80a6cea:	9301      	str	r3, [sp, #4]
 80a6cec:	1c73      	adds	r3, r6, #1
 80a6cee:	9300      	str	r3, [sp, #0]
 80a6cf0:	4643      	mov	r3, r8
 80a6cf2:	e03b      	b.n	80a6d6c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1d0>
             grandparent = grandparent->next )
        {
            /* +2 because the current step is not yet accounted for
             * and because max_pathlen is one higher than it should be.
             * Also self signed certificates do not count to the limit. */
            if( grandparent->max_pathlen > 0 &&
 80a6cf4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80a6cf6:	f106 0b02 	add.w	fp, r6, #2
            return( ret );
    }
    else
    {
        /* Look for a grandparent upwards the chain */
        for( grandparent = parent->next;
 80a6cfa:	f8d7 9130 	ldr.w	r9, [r7, #304]	; 0x130
             grandparent = grandparent->next )
        {
            /* +2 because the current step is not yet accounted for
             * and because max_pathlen is one higher than it should be.
             * Also self signed certificates do not count to the limit. */
            if( grandparent->max_pathlen > 0 &&
 80a6cfe:	ebc3 0b0b 	rsb	fp, r3, fp
    }
    else
    {
        /* Look for a grandparent upwards the chain */
        for( grandparent = parent->next;
             grandparent != NULL;
 80a6d02:	f1b9 0f00 	cmp.w	r9, #0
 80a6d06:	d024      	beq.n	80a6d52 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1b6>
             grandparent = grandparent->next )
        {
            /* +2 because the current step is not yet accounted for
             * and because max_pathlen is one higher than it should be.
             * Also self signed certificates do not count to the limit. */
            if( grandparent->max_pathlen > 0 &&
 80a6d08:	f8d9 3100 	ldr.w	r3, [r9, #256]	; 0x100
 80a6d0c:	2b00      	cmp	r3, #0
 80a6d0e:	dd01      	ble.n	80a6d14 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x178>
 80a6d10:	455b      	cmp	r3, fp
 80a6d12:	db08      	blt.n	80a6d26 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x18a>
                grandparent->max_pathlen < 2 + path_cnt - self_cnt )
            {
                continue;
            }

            if( x509_crt_check_parent( parent, grandparent,
 80a6d14:	fab6 f386 	clz	r3, r6
 80a6d18:	2200      	movs	r2, #0
 80a6d1a:	095b      	lsrs	r3, r3, #5
 80a6d1c:	4649      	mov	r1, r9
 80a6d1e:	4638      	mov	r0, r7
 80a6d20:	f7ff fd6e 	bl	80a6800 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 80a6d24:	b110      	cbz	r0, 80a6d2c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x190>
            return( ret );
    }
    else
    {
        /* Look for a grandparent upwards the chain */
        for( grandparent = parent->next;
 80a6d26:	f8d9 9130 	ldr.w	r9, [r9, #304]	; 0x130
 80a6d2a:	e7ea      	b.n	80a6d02 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x166>
        /* Is our parent part of the chain or at the top? */
        if( grandparent != NULL )
        {
            ret = x509_crt_verify_child( parent, grandparent, trust_ca, ca_crl,
                                         profile, path_cnt + 1, self_cnt, &parent_flags,
                                         f_vrfy, p_vrfy );
 80a6d2c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80a6d2e:	f8cd 8000 	str.w	r8, [sp]
 80a6d32:	9305      	str	r3, [sp, #20]
 80a6d34:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80a6d36:	9a06      	ldr	r2, [sp, #24]
 80a6d38:	9304      	str	r3, [sp, #16]
 80a6d3a:	ab0b      	add	r3, sp, #44	; 0x2c
 80a6d3c:	9303      	str	r3, [sp, #12]
 80a6d3e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80a6d40:	4649      	mov	r1, r9
 80a6d42:	9302      	str	r3, [sp, #8]
 80a6d44:	1c73      	adds	r3, r6, #1
 80a6d46:	9301      	str	r3, [sp, #4]
 80a6d48:	4638      	mov	r0, r7
 80a6d4a:	4653      	mov	r3, sl
 80a6d4c:	f7ff ff26 	bl	80a6b9c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>
 80a6d50:	e00f      	b.n	80a6d72 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1d6>
        }
        else
        {
            ret = x509_crt_verify_top( parent, trust_ca, ca_crl, profile,
                                       path_cnt + 1, self_cnt, &parent_flags,
                                       f_vrfy, p_vrfy );
 80a6d52:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80a6d54:	4652      	mov	r2, sl
 80a6d56:	9304      	str	r3, [sp, #16]
 80a6d58:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80a6d5a:	9906      	ldr	r1, [sp, #24]
 80a6d5c:	9303      	str	r3, [sp, #12]
 80a6d5e:	ab0b      	add	r3, sp, #44	; 0x2c
 80a6d60:	9302      	str	r3, [sp, #8]
 80a6d62:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80a6d64:	9301      	str	r3, [sp, #4]
 80a6d66:	1c73      	adds	r3, r6, #1
 80a6d68:	9300      	str	r3, [sp, #0]
 80a6d6a:	4643      	mov	r3, r8
 80a6d6c:	4638      	mov	r0, r7
 80a6d6e:	f7ff fe1f 	bl	80a69b0 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>
            if( ret != 0 )
 80a6d72:	b978      	cbnz	r0, 80a6d94 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1f8>
                return( ret );
        }
    }

    /* child is verified to be a child of the parent, call verify callback */
    if( NULL != f_vrfy )
 80a6d74:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80a6d76:	b92b      	cbnz	r3, 80a6d84 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1e8>
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );

    *flags |= parent_flags;
 80a6d78:	6822      	ldr	r2, [r4, #0]
 80a6d7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    return( 0 );
 80a6d7c:	2000      	movs	r0, #0
    /* child is verified to be a child of the parent, call verify callback */
    if( NULL != f_vrfy )
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );

    *flags |= parent_flags;
 80a6d7e:	4313      	orrs	r3, r2
 80a6d80:	6023      	str	r3, [r4, #0]

    return( 0 );
 80a6d82:	e007      	b.n	80a6d94 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1f8>
        }
    }

    /* child is verified to be a child of the parent, call verify callback */
    if( NULL != f_vrfy )
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
 80a6d84:	4629      	mov	r1, r5
 80a6d86:	4623      	mov	r3, r4
 80a6d88:	4632      	mov	r2, r6
 80a6d8a:	982b      	ldr	r0, [sp, #172]	; 0xac
 80a6d8c:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80a6d8e:	47a8      	blx	r5
 80a6d90:	2800      	cmp	r0, #0
 80a6d92:	d0f1      	beq.n	80a6d78 <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_+0x1dc>
            return( ret );

    *flags |= parent_flags;

    return( 0 );
}
 80a6d94:	b01d      	add	sp, #116	; 0x74
 80a6d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6d9a:	bf00      	nop
 80a6d9c:	ffffd000 	.word	0xffffd000

080a6da0 <mbedtls_x509_crt_verify_with_profile>:
                     mbedtls_x509_crl *ca_crl,
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
 80a6da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6da4:	b089      	sub	sp, #36	; 0x24
 80a6da6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80a6da8:	4693      	mov	fp, r2
    mbedtls_x509_crt *parent;
    mbedtls_x509_name *name;
    mbedtls_x509_sequence *cur = NULL;
    mbedtls_pk_type_t pk_type;

    *flags = 0;
 80a6daa:	2200      	movs	r2, #0
                     mbedtls_x509_crl *ca_crl,
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
 80a6dac:	4605      	mov	r5, r0
 80a6dae:	468a      	mov	sl, r1
 80a6db0:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
    mbedtls_x509_crt *parent;
    mbedtls_x509_name *name;
    mbedtls_x509_sequence *cur = NULL;
    mbedtls_pk_type_t pk_type;

    *flags = 0;
 80a6db4:	6022      	str	r2, [r4, #0]

    if( profile == NULL )
 80a6db6:	461f      	mov	r7, r3
 80a6db8:	2b00      	cmp	r3, #0
 80a6dba:	d06e      	beq.n	80a6e9a <mbedtls_x509_crt_verify_with_profile+0xfa>
    {
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
        goto exit;
    }

    if( cn != NULL )
 80a6dbc:	f1b8 0f00 	cmp.w	r8, #0
 80a6dc0:	d048      	beq.n	80a6e54 <mbedtls_x509_crt_verify_with_profile+0xb4>
    {
        name = &crt->subject;
        cn_len = strlen( cn );
 80a6dc2:	4640      	mov	r0, r8
 80a6dc4:	f008 f9d1 	bl	80af16a <strlen>

        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 80a6dc8:	f8d5 30f8 	ldr.w	r3, [r5, #248]	; 0xf8
    }

    if( cn != NULL )
    {
        name = &crt->subject;
        cn_len = strlen( cn );
 80a6dcc:	4681      	mov	r9, r0

        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 80a6dce:	069b      	lsls	r3, r3, #26
 80a6dd0:	d50d      	bpl.n	80a6dee <mbedtls_x509_crt_verify_with_profile+0x4e>
        {
            cur = &crt->subject_alt_names;
 80a6dd2:	f105 06e8 	add.w	r6, r5, #232	; 0xe8

            while( cur != NULL )
            {
                if( cur->buf.len == cn_len &&
 80a6dd6:	6873      	ldr	r3, [r6, #4]
 80a6dd8:	4599      	cmp	r9, r3
 80a6dda:	d12c      	bne.n	80a6e36 <mbedtls_x509_crt_verify_with_profile+0x96>
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
 80a6ddc:	464a      	mov	r2, r9
 80a6dde:	68b1      	ldr	r1, [r6, #8]
 80a6de0:	4640      	mov	r0, r8
 80a6de2:	9307      	str	r3, [sp, #28]
 80a6de4:	f7ff f8db 	bl	80a5f9e <_ZL15x509_memcasecmpPKvS0_j>
        {
            cur = &crt->subject_alt_names;

            while( cur != NULL )
            {
                if( cur->buf.len == cn_len &&
 80a6de8:	9b07      	ldr	r3, [sp, #28]
 80a6dea:	bb20      	cbnz	r0, 80a6e36 <mbedtls_x509_crt_verify_with_profile+0x96>
 80a6dec:	e032      	b.n	80a6e54 <mbedtls_x509_crt_verify_with_profile+0xb4>
        goto exit;
    }

    if( cn != NULL )
    {
        name = &crt->subject;
 80a6dee:	f105 066c 	add.w	r6, r5, #108	; 0x6c
        }
        else
        {
            while( name != NULL )
            {
                if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 )
 80a6df2:	6872      	ldr	r2, [r6, #4]
 80a6df4:	2a03      	cmp	r2, #3
 80a6df6:	d118      	bne.n	80a6e2a <mbedtls_x509_crt_verify_with_profile+0x8a>
 80a6df8:	68b1      	ldr	r1, [r6, #8]
 80a6dfa:	4855      	ldr	r0, [pc, #340]	; (80a6f50 <mbedtls_x509_crt_verify_with_profile+0x1b0>)
 80a6dfc:	f008 f96a 	bl	80af0d4 <memcmp>
 80a6e00:	b998      	cbnz	r0, 80a6e2a <mbedtls_x509_crt_verify_with_profile+0x8a>
                {
                    if( name->val.len == cn_len &&
 80a6e02:	6933      	ldr	r3, [r6, #16]
 80a6e04:	4599      	cmp	r9, r3
 80a6e06:	d107      	bne.n	80a6e18 <mbedtls_x509_crt_verify_with_profile+0x78>
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
 80a6e08:	464a      	mov	r2, r9
 80a6e0a:	4641      	mov	r1, r8
 80a6e0c:	6970      	ldr	r0, [r6, #20]
 80a6e0e:	9307      	str	r3, [sp, #28]
 80a6e10:	f7ff f8c5 	bl	80a5f9e <_ZL15x509_memcasecmpPKvS0_j>
        {
            while( name != NULL )
            {
                if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 )
                {
                    if( name->val.len == cn_len &&
 80a6e14:	9b07      	ldr	r3, [sp, #28]
 80a6e16:	b1e8      	cbz	r0, 80a6e54 <mbedtls_x509_crt_verify_with_profile+0xb4>
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
                        break;

                    if( name->val.len > 2 &&
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
 80a6e18:	2b02      	cmp	r3, #2
 80a6e1a:	d906      	bls.n	80a6e2a <mbedtls_x509_crt_verify_with_profile+0x8a>
 80a6e1c:	2202      	movs	r2, #2
 80a6e1e:	494d      	ldr	r1, [pc, #308]	; (80a6f54 <mbedtls_x509_crt_verify_with_profile+0x1b4>)
 80a6e20:	6970      	ldr	r0, [r6, #20]
 80a6e22:	f008 f957 	bl	80af0d4 <memcmp>
                {
                    if( name->val.len == cn_len &&
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
                        break;

                    if( name->val.len > 2 &&
 80a6e26:	2800      	cmp	r0, #0
 80a6e28:	d053      	beq.n	80a6ed2 <mbedtls_x509_crt_verify_with_profile+0x132>
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
                        x509_check_wildcard( cn, &name->val ) == 0 )
                        break;
                }

                name = name->next;
 80a6e2a:	69b6      	ldr	r6, [r6, #24]
            if( cur == NULL )
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
        }
        else
        {
            while( name != NULL )
 80a6e2c:	2e00      	cmp	r6, #0
 80a6e2e:	d1e0      	bne.n	80a6df2 <mbedtls_x509_crt_verify_with_profile+0x52>

                cur = cur->next;
            }

            if( cur == NULL )
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
 80a6e30:	2304      	movs	r3, #4
 80a6e32:	6023      	str	r3, [r4, #0]
 80a6e34:	e00e      	b.n	80a6e54 <mbedtls_x509_crt_verify_with_profile+0xb4>
                if( cur->buf.len == cn_len &&
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
                    break;

                if( cur->buf.len > 2 &&
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
 80a6e36:	2b02      	cmp	r3, #2
 80a6e38:	d947      	bls.n	80a6eca <mbedtls_x509_crt_verify_with_profile+0x12a>
 80a6e3a:	2202      	movs	r2, #2
 80a6e3c:	4945      	ldr	r1, [pc, #276]	; (80a6f54 <mbedtls_x509_crt_verify_with_profile+0x1b4>)
 80a6e3e:	68b0      	ldr	r0, [r6, #8]
 80a6e40:	f008 f948 	bl	80af0d4 <memcmp>
            {
                if( cur->buf.len == cn_len &&
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
                    break;

                if( cur->buf.len > 2 &&
 80a6e44:	2800      	cmp	r0, #0
 80a6e46:	d140      	bne.n	80a6eca <mbedtls_x509_crt_verify_with_profile+0x12a>
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
                    x509_check_wildcard( cn, &cur->buf ) == 0 )
 80a6e48:	4631      	mov	r1, r6
 80a6e4a:	4640      	mov	r0, r8
 80a6e4c:	f7ff f8fd 	bl	80a604a <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf>
                if( cur->buf.len == cn_len &&
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
                    break;

                if( cur->buf.len > 2 &&
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
 80a6e50:	2800      	cmp	r0, #0
 80a6e52:	d13a      	bne.n	80a6eca <mbedtls_x509_crt_verify_with_profile+0x12a>
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
        }
    }

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );
 80a6e54:	f105 06bc 	add.w	r6, r5, #188	; 0xbc
 80a6e58:	4630      	mov	r0, r6
 80a6e5a:	f003 fd85 	bl	80aa968 <mbedtls_pk_get_type>
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 80a6e5e:	2301      	movs	r3, #1
 80a6e60:	1e42      	subs	r2, r0, #1
 80a6e62:	4093      	lsls	r3, r2
 80a6e64:	687a      	ldr	r2, [r7, #4]
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
        }
    }

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );
 80a6e66:	4601      	mov	r1, r0
 * Return 0 if pk_alg acceptable for this profile, -1 otherwise
 */
static int x509_profile_check_pk_alg( const mbedtls_x509_crt_profile *profile,
                                      mbedtls_pk_type_t pk_alg )
{
    if( ( profile->allowed_pks & MBEDTLS_X509_ID_FLAG( pk_alg ) ) != 0 )
 80a6e68:	4213      	tst	r3, r2
 80a6e6a:	d03a      	beq.n	80a6ee2 <mbedtls_x509_crt_verify_with_profile+0x142>
    pk_type = mbedtls_pk_get_type( &crt->pk );

    if( x509_profile_check_pk_alg( profile, pk_type ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;

    if( x509_profile_check_key( profile, pk_type, &crt->pk ) != 0 )
 80a6e6c:	4632      	mov	r2, r6
 80a6e6e:	f107 000c 	add.w	r0, r7, #12
 80a6e72:	f7ff f931 	bl	80a60d8 <_ZL22x509_profile_check_keyPK24mbedtls_x509_crt_profile17mbedtls_pk_type_tPK18mbedtls_pk_context.isra.3>
 80a6e76:	b118      	cbz	r0, 80a6e80 <mbedtls_x509_crt_verify_with_profile+0xe0>
        *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 80a6e78:	6823      	ldr	r3, [r4, #0]
 80a6e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80a6e7e:	6023      	str	r3, [r4, #0]
                     mbedtls_x509_crl *ca_crl,
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
 80a6e80:	4656      	mov	r6, sl

    if( x509_profile_check_key( profile, pk_type, &crt->pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

    /* Look for a parent in trusted CAs */
    for( parent = trust_ca; parent != NULL; parent = parent->next )
 80a6e82:	2e00      	cmp	r6, #0
 80a6e84:	d03d      	beq.n	80a6f02 <mbedtls_x509_crt_verify_with_profile+0x162>
    {
        if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
 80a6e86:	2301      	movs	r3, #1
 80a6e88:	2200      	movs	r2, #0
 80a6e8a:	4631      	mov	r1, r6
 80a6e8c:	4628      	mov	r0, r5
 80a6e8e:	f7ff fcb7 	bl	80a6800 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 80a6e92:	b358      	cbz	r0, 80a6eec <mbedtls_x509_crt_verify_with_profile+0x14c>

    if( x509_profile_check_key( profile, pk_type, &crt->pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;

    /* Look for a parent in trusted CAs */
    for( parent = trust_ca; parent != NULL; parent = parent->next )
 80a6e94:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
 80a6e98:	e7f3      	b.n	80a6e82 <mbedtls_x509_crt_verify_with_profile+0xe2>

    *flags = 0;

    if( profile == NULL )
    {
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
 80a6e9a:	482f      	ldr	r0, [pc, #188]	; (80a6f58 <mbedtls_x509_crt_verify_with_profile+0x1b8>)
 80a6e9c:	e011      	b.n	80a6ec2 <mbedtls_x509_crt_verify_with_profile+0x122>

        /* Are we part of the chain or at the top? */
        if( parent != NULL )
        {
            ret = x509_crt_verify_child( crt, parent, trust_ca, ca_crl, profile,
                                         pathlen, selfsigned, flags, f_vrfy, p_vrfy );
 80a6e9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a6ea0:	9002      	str	r0, [sp, #8]
 80a6ea2:	9305      	str	r3, [sp, #20]
 80a6ea4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a6ea6:	9001      	str	r0, [sp, #4]
 80a6ea8:	9304      	str	r3, [sp, #16]
 80a6eaa:	9403      	str	r4, [sp, #12]
 80a6eac:	9700      	str	r7, [sp, #0]
 80a6eae:	465b      	mov	r3, fp
 80a6eb0:	4652      	mov	r2, sl
 80a6eb2:	4631      	mov	r1, r6
 80a6eb4:	4628      	mov	r0, r5
 80a6eb6:	f7ff fe71 	bl	80a6b9c <_ZL21x509_crt_verify_childP16mbedtls_x509_crtS0_S0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>

exit:
    /* prevent misuse of the vrfy callback - VERIFY_FAILED would be ignored by
     * the SSL module for authmode optional, but non-zero return from the
     * callback means a fatal error so it shouldn't be ignored */
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
 80a6eba:	f510 5f1c 	cmn.w	r0, #9984	; 0x2700
 80a6ebe:	d12e      	bne.n	80a6f1e <mbedtls_x509_crt_verify_with_profile+0x17e>
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;
 80a6ec0:	4826      	ldr	r0, [pc, #152]	; (80a6f5c <mbedtls_x509_crt_verify_with_profile+0x1bc>)

    if( ret != 0 )
    {
        *flags = (uint32_t) -1;
 80a6ec2:	f04f 33ff 	mov.w	r3, #4294967295
 80a6ec6:	6023      	str	r3, [r4, #0]
        return( ret );
 80a6ec8:	e03f      	b.n	80a6f4a <mbedtls_x509_crt_verify_with_profile+0x1aa>
                    x509_check_wildcard( cn, &cur->buf ) == 0 )
                {
                    break;
                }

                cur = cur->next;
 80a6eca:	68f6      	ldr	r6, [r6, #12]

        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
        {
            cur = &crt->subject_alt_names;

            while( cur != NULL )
 80a6ecc:	2e00      	cmp	r6, #0
 80a6ece:	d182      	bne.n	80a6dd6 <mbedtls_x509_crt_verify_with_profile+0x36>
 80a6ed0:	e7ae      	b.n	80a6e30 <mbedtls_x509_crt_verify_with_profile+0x90>
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
                        break;

                    if( name->val.len > 2 &&
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
                        x509_check_wildcard( cn, &name->val ) == 0 )
 80a6ed2:	f106 010c 	add.w	r1, r6, #12
 80a6ed6:	4640      	mov	r0, r8
 80a6ed8:	f7ff f8b7 	bl	80a604a <_ZL19x509_check_wildcardPKcP16mbedtls_asn1_buf>
                    if( name->val.len == cn_len &&
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
                        break;

                    if( name->val.len > 2 &&
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
 80a6edc:	2800      	cmp	r0, #0
 80a6ede:	d1a4      	bne.n	80a6e2a <mbedtls_x509_crt_verify_with_profile+0x8a>
 80a6ee0:	e7b8      	b.n	80a6e54 <mbedtls_x509_crt_verify_with_profile+0xb4>

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );

    if( x509_profile_check_pk_alg( profile, pk_type ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 80a6ee2:	6823      	ldr	r3, [r4, #0]
 80a6ee4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80a6ee8:	6023      	str	r3, [r4, #0]
 80a6eea:	e7bf      	b.n	80a6e6c <mbedtls_x509_crt_verify_with_profile+0xcc>
    }

    if( parent != NULL )
    {
        ret = x509_crt_verify_top( crt, parent, ca_crl, profile,
                                   pathlen, selfsigned, flags, f_vrfy, p_vrfy );
 80a6eec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a6eee:	9402      	str	r4, [sp, #8]
 80a6ef0:	9304      	str	r3, [sp, #16]
 80a6ef2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a6ef4:	9001      	str	r0, [sp, #4]
 80a6ef6:	9303      	str	r3, [sp, #12]
 80a6ef8:	9000      	str	r0, [sp, #0]
 80a6efa:	463b      	mov	r3, r7
 80a6efc:	465a      	mov	r2, fp
 80a6efe:	4631      	mov	r1, r6
 80a6f00:	e01f      	b.n	80a6f42 <mbedtls_x509_crt_verify_with_profile+0x1a2>
            goto exit;
    }
    else
    {
        /* Look for a parent upwards the chain */
        for( parent = crt->next; parent != NULL; parent = parent->next )
 80a6f02:	f8d5 6130 	ldr.w	r6, [r5, #304]	; 0x130
 80a6f06:	b196      	cbz	r6, 80a6f2e <mbedtls_x509_crt_verify_with_profile+0x18e>
            if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
 80a6f08:	2301      	movs	r3, #1
 80a6f0a:	2200      	movs	r2, #0
 80a6f0c:	4631      	mov	r1, r6
 80a6f0e:	4628      	mov	r0, r5
 80a6f10:	f7ff fc76 	bl	80a6800 <_ZL21x509_crt_check_parentPK16mbedtls_x509_crtS1_ii>
 80a6f14:	2800      	cmp	r0, #0
 80a6f16:	d0c2      	beq.n	80a6e9e <mbedtls_x509_crt_verify_with_profile+0xfe>
            goto exit;
    }
    else
    {
        /* Look for a parent upwards the chain */
        for( parent = crt->next; parent != NULL; parent = parent->next )
 80a6f18:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
 80a6f1c:	e7f3      	b.n	80a6f06 <mbedtls_x509_crt_verify_with_profile+0x166>
     * the SSL module for authmode optional, but non-zero return from the
     * callback means a fatal error so it shouldn't be ignored */
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;

    if( ret != 0 )
 80a6f1e:	2800      	cmp	r0, #0
 80a6f20:	d1cf      	bne.n	80a6ec2 <mbedtls_x509_crt_verify_with_profile+0x122>
    {
        *flags = (uint32_t) -1;
        return( ret );
    }

    if( *flags != 0 )
 80a6f22:	6823      	ldr	r3, [r4, #0]
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );

    return( 0 );
 80a6f24:	480e      	ldr	r0, [pc, #56]	; (80a6f60 <mbedtls_x509_crt_verify_with_profile+0x1c0>)
 80a6f26:	2b00      	cmp	r3, #0
 80a6f28:	bf08      	it	eq
 80a6f2a:	2000      	moveq	r0, #0
 80a6f2c:	e00d      	b.n	80a6f4a <mbedtls_x509_crt_verify_with_profile+0x1aa>
                goto exit;
        }
        else
        {
            ret = x509_crt_verify_top( crt, trust_ca, ca_crl, profile,
                                       pathlen, selfsigned, flags, f_vrfy, p_vrfy );
 80a6f2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a6f30:	465a      	mov	r2, fp
 80a6f32:	9304      	str	r3, [sp, #16]
 80a6f34:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a6f36:	4651      	mov	r1, sl
 80a6f38:	9303      	str	r3, [sp, #12]
 80a6f3a:	463b      	mov	r3, r7
 80a6f3c:	9402      	str	r4, [sp, #8]
 80a6f3e:	9601      	str	r6, [sp, #4]
 80a6f40:	9600      	str	r6, [sp, #0]
 80a6f42:	4628      	mov	r0, r5
 80a6f44:	f7ff fd34 	bl	80a69b0 <_ZL19x509_crt_verify_topP16mbedtls_x509_crtS0_P16mbedtls_x509_crlPK24mbedtls_x509_crt_profileiiPmPFiPvS0_iS6_ES7_>
 80a6f48:	e7b7      	b.n	80a6eba <mbedtls_x509_crt_verify_with_profile+0x11a>

    if( *flags != 0 )
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );

    return( 0 );
}
 80a6f4a:	b009      	add	sp, #36	; 0x24
 80a6f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6f50:	080afc1c 	.word	0x080afc1c
 80a6f54:	080b0bbe 	.word	0x080b0bbe
 80a6f58:	ffffd800 	.word	0xffffd800
 80a6f5c:	ffffd000 	.word	0xffffd000
 80a6f60:	ffffd900 	.word	0xffffd900

080a6f64 <mbedtls_x509_crt_init>:
/*
 * Initialize a certificate chain
 */
void mbedtls_x509_crt_init( mbedtls_x509_crt *crt )
{
    memset( crt, 0, sizeof(mbedtls_x509_crt) );
 80a6f64:	f44f 729a 	mov.w	r2, #308	; 0x134
 80a6f68:	2100      	movs	r1, #0
 80a6f6a:	f008 b8e8 	b.w	80af13e <memset>

080a6f6e <mbedtls_x509_crt_free>:

/*
 * Unallocate all certificate data
 */
void mbedtls_x509_crt_free( mbedtls_x509_crt *crt )
{
 80a6f6e:	b570      	push	{r4, r5, r6, lr}
    mbedtls_x509_name *name_cur;
    mbedtls_x509_name *name_prv;
    mbedtls_x509_sequence *seq_cur;
    mbedtls_x509_sequence *seq_prv;

    if( crt == NULL )
 80a6f70:	4605      	mov	r5, r0
 80a6f72:	2800      	cmp	r0, #0
 80a6f74:	d053      	beq.n	80a701e <mbedtls_x509_crt_free+0xb0>
 80a6f76:	4604      	mov	r4, r0
        return;

    do
    {
        mbedtls_pk_free( &cert_cur->pk );
 80a6f78:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 80a6f7c:	f003 fbd7 	bl	80aa72e <mbedtls_pk_free>

#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
#endif

        name_cur = cert_cur->issuer.next;
 80a6f80:	6e62      	ldr	r2, [r4, #100]	; 0x64
        while( name_cur != NULL )
 80a6f82:	b14a      	cbz	r2, 80a6f98 <mbedtls_x509_crt_free+0x2a>
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 80a6f84:	4610      	mov	r0, r2
 80a6f86:	2120      	movs	r1, #32

        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
 80a6f88:	6996      	ldr	r6, [r2, #24]
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 80a6f8a:	f7ff f800 	bl	80a5f8e <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( name_prv );
 80a6f8e:	4610      	mov	r0, r2
 80a6f90:	f006 ffbc 	bl	80adf0c <free>

        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
 80a6f94:	4632      	mov	r2, r6
#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
#endif

        name_cur = cert_cur->issuer.next;
        while( name_cur != NULL )
 80a6f96:	e7f4      	b.n	80a6f82 <mbedtls_x509_crt_free+0x14>
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        name_cur = cert_cur->subject.next;
 80a6f98:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
        while( name_cur != NULL )
 80a6f9c:	b14a      	cbz	r2, 80a6fb2 <mbedtls_x509_crt_free+0x44>
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 80a6f9e:	4610      	mov	r0, r2
 80a6fa0:	2120      	movs	r1, #32

        name_cur = cert_cur->subject.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
 80a6fa2:	6996      	ldr	r6, [r2, #24]
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 80a6fa4:	f7fe fff3 	bl	80a5f8e <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( name_prv );
 80a6fa8:	4610      	mov	r0, r2
 80a6faa:	f006 ffaf 	bl	80adf0c <free>

        name_cur = cert_cur->subject.next;
        while( name_cur != NULL )
        {
            name_prv = name_cur;
            name_cur = name_cur->next;
 80a6fae:	4632      	mov	r2, r6
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        name_cur = cert_cur->subject.next;
        while( name_cur != NULL )
 80a6fb0:	e7f4      	b.n	80a6f9c <mbedtls_x509_crt_free+0x2e>
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        seq_cur = cert_cur->ext_key_usage.next;
 80a6fb2:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
        while( seq_cur != NULL )
 80a6fb6:	b14a      	cbz	r2, 80a6fcc <mbedtls_x509_crt_free+0x5e>
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 80a6fb8:	4610      	mov	r0, r2
 80a6fba:	2110      	movs	r1, #16

        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
 80a6fbc:	68d6      	ldr	r6, [r2, #12]
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 80a6fbe:	f7fe ffe6 	bl	80a5f8e <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( seq_prv );
 80a6fc2:	4610      	mov	r0, r2
 80a6fc4:	f006 ffa2 	bl	80adf0c <free>

        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
 80a6fc8:	4632      	mov	r2, r6
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        seq_cur = cert_cur->ext_key_usage.next;
        while( seq_cur != NULL )
 80a6fca:	e7f4      	b.n	80a6fb6 <mbedtls_x509_crt_free+0x48>
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        seq_cur = cert_cur->subject_alt_names.next;
 80a6fcc:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
        while( seq_cur != NULL )
 80a6fd0:	b14a      	cbz	r2, 80a6fe6 <mbedtls_x509_crt_free+0x78>
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 80a6fd2:	4610      	mov	r0, r2
 80a6fd4:	2110      	movs	r1, #16

        seq_cur = cert_cur->subject_alt_names.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
 80a6fd6:	68d6      	ldr	r6, [r2, #12]
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 80a6fd8:	f7fe ffd9 	bl	80a5f8e <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( seq_prv );
 80a6fdc:	4610      	mov	r0, r2
 80a6fde:	f006 ff95 	bl	80adf0c <free>

        seq_cur = cert_cur->subject_alt_names.next;
        while( seq_cur != NULL )
        {
            seq_prv = seq_cur;
            seq_cur = seq_cur->next;
 80a6fe2:	4632      	mov	r2, r6
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        seq_cur = cert_cur->subject_alt_names.next;
        while( seq_cur != NULL )
 80a6fe4:	e7f4      	b.n	80a6fd0 <mbedtls_x509_crt_free+0x62>
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        if( cert_cur->raw.p != NULL )
 80a6fe6:	68a0      	ldr	r0, [r4, #8]
 80a6fe8:	b128      	cbz	r0, 80a6ff6 <mbedtls_x509_crt_free+0x88>
        {
            mbedtls_zeroize( cert_cur->raw.p, cert_cur->raw.len );
 80a6fea:	6861      	ldr	r1, [r4, #4]
 80a6fec:	f7fe ffcf 	bl	80a5f8e <_ZL15mbedtls_zeroizePvj>
            mbedtls_free( cert_cur->raw.p );
 80a6ff0:	68a0      	ldr	r0, [r4, #8]
 80a6ff2:	f006 ff8b 	bl	80adf0c <free>
        }

        cert_cur = cert_cur->next;
 80a6ff6:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    }
    while( cert_cur != NULL );
 80a6ffa:	2c00      	cmp	r4, #0
 80a6ffc:	d1bc      	bne.n	80a6f78 <mbedtls_x509_crt_free+0xa>
 80a6ffe:	462a      	mov	r2, r5
    do
    {
        cert_prv = cert_cur;
        cert_cur = cert_cur->next;

        mbedtls_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 80a7000:	f44f 719a 	mov.w	r1, #308	; 0x134
 80a7004:	4610      	mov	r0, r2

    cert_cur = crt;
    do
    {
        cert_prv = cert_cur;
        cert_cur = cert_cur->next;
 80a7006:	f8d2 4130 	ldr.w	r4, [r2, #304]	; 0x130

        mbedtls_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 80a700a:	f7fe ffc0 	bl	80a5f8e <_ZL15mbedtls_zeroizePvj>
        if( cert_prv != crt )
 80a700e:	42aa      	cmp	r2, r5
 80a7010:	d002      	beq.n	80a7018 <mbedtls_x509_crt_free+0xaa>
            mbedtls_free( cert_prv );
 80a7012:	4610      	mov	r0, r2
 80a7014:	f006 ff7a 	bl	80adf0c <free>
    }
    while( cert_cur != NULL );
 80a7018:	4622      	mov	r2, r4
 80a701a:	2c00      	cmp	r4, #0
 80a701c:	d1f0      	bne.n	80a7000 <mbedtls_x509_crt_free+0x92>
 80a701e:	bd70      	pop	{r4, r5, r6, pc}

080a7020 <mbedtls_x509_crt_parse_der>:
 * Parse one X.509 certificate in DER format from a buffer and add them to a
 * chained list
 */
int mbedtls_x509_crt_parse_der( mbedtls_x509_crt *chain, const unsigned char *buf,
                        size_t buflen )
{
 80a7020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a7024:	4688      	mov	r8, r1
 80a7026:	b09b      	sub	sp, #108	; 0x6c
 80a7028:	4615      	mov	r5, r2
    mbedtls_x509_crt *crt = chain, *prev = NULL;

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
 80a702a:	4682      	mov	sl, r0
 80a702c:	2800      	cmp	r0, #0
 80a702e:	f000 812c 	beq.w	80a728a <mbedtls_x509_crt_parse_der+0x26a>
 80a7032:	2900      	cmp	r1, #0
 80a7034:	f000 8129 	beq.w	80a728a <mbedtls_x509_crt_parse_der+0x26a>
 80a7038:	4604      	mov	r4, r0
 80a703a:	f04f 0900 	mov.w	r9, #0
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    while( crt->version != 0 && crt->next != NULL )
 80a703e:	69a3      	ldr	r3, [r4, #24]
 80a7040:	b1a3      	cbz	r3, 80a706c <mbedtls_x509_crt_parse_der+0x4c>
 80a7042:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 80a7046:	46a1      	mov	r9, r4
 80a7048:	b10b      	cbz	r3, 80a704e <mbedtls_x509_crt_parse_der+0x2e>
 80a704a:	461c      	mov	r4, r3
 80a704c:	e7f7      	b.n	80a703e <mbedtls_x509_crt_parse_der+0x1e>
    /*
     * Add new certificate on the end of the chain if needed.
     */
    if( crt->version != 0 && crt->next == NULL )
    {
        crt->next = (mbedtls_x509_crt *)mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );
 80a704e:	f44f 719a 	mov.w	r1, #308	; 0x134
 80a7052:	2001      	movs	r0, #1
 80a7054:	f008 f828 	bl	80af0a8 <calloc>
 80a7058:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130

        if( crt->next == NULL )
 80a705c:	2800      	cmp	r0, #0
 80a705e:	f000 8116 	beq.w	80a728e <mbedtls_x509_crt_parse_der+0x26e>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );

        prev = crt;
        mbedtls_x509_crt_init( crt->next );
 80a7062:	f7ff ff7f 	bl	80a6f64 <mbedtls_x509_crt_init>
 80a7066:	46a1      	mov	r9, r4
        crt = crt->next;
 80a7068:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    int ret;
    size_t len;
    unsigned char *p, *end, *crt_end;
    mbedtls_x509_buf sig_params1, sig_params2, sig_oid2;

    memset( &sig_params1, 0, sizeof( mbedtls_x509_buf ) );
 80a706c:	2300      	movs	r3, #0
 80a706e:	930b      	str	r3, [sp, #44]	; 0x2c
 80a7070:	930c      	str	r3, [sp, #48]	; 0x30
 80a7072:	930d      	str	r3, [sp, #52]	; 0x34
    memset( &sig_params2, 0, sizeof( mbedtls_x509_buf ) );
 80a7074:	930e      	str	r3, [sp, #56]	; 0x38
 80a7076:	930f      	str	r3, [sp, #60]	; 0x3c
 80a7078:	9310      	str	r3, [sp, #64]	; 0x40
    memset( &sig_oid2, 0, sizeof( mbedtls_x509_buf ) );
 80a707a:	9311      	str	r3, [sp, #68]	; 0x44
 80a707c:	9312      	str	r3, [sp, #72]	; 0x48
 80a707e:	9313      	str	r3, [sp, #76]	; 0x4c

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
 80a7080:	2c00      	cmp	r4, #0
 80a7082:	f000 80e9 	beq.w	80a7258 <mbedtls_x509_crt_parse_der+0x238>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    // Use the original buffer until we figure out actual length
    p = (unsigned char*) buf;
    len = buflen;
 80a7086:	ae1a      	add	r6, sp, #104	; 0x68
 80a7088:	f846 5d54 	str.w	r5, [r6, #-84]!
    end = p + len;
 80a708c:	eb08 0b05 	add.w	fp, r8, r5
     * Certificate  ::=  SEQUENCE  {
     *      tbsCertificate       TBSCertificate,
     *      signatureAlgorithm   AlgorithmIdentifier,
     *      signatureValue       BIT STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a7090:	2330      	movs	r3, #48	; 0x30
 80a7092:	4632      	mov	r2, r6
 80a7094:	4659      	mov	r1, fp
 80a7096:	a806      	add	r0, sp, #24
     */
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );

    // Use the original buffer until we figure out actual length
    p = (unsigned char*) buf;
 80a7098:	f8cd 8018 	str.w	r8, [sp, #24]
     * Certificate  ::=  SEQUENCE  {
     *      tbsCertificate       TBSCertificate,
     *      signatureAlgorithm   AlgorithmIdentifier,
     *      signatureValue       BIT STRING  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a709c:	f7fa fcbe 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a70a0:	b120      	cbz	r0, 80a70ac <mbedtls_x509_crt_parse_der+0x8c>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 80a70a2:	4620      	mov	r0, r4
 80a70a4:	f7ff ff63 	bl	80a6f6e <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT );
 80a70a8:	4da3      	ldr	r5, [pc, #652]	; (80a7338 <mbedtls_x509_crt_parse_der+0x318>)
 80a70aa:	e0e1      	b.n	80a7270 <mbedtls_x509_crt_parse_der+0x250>
    }

    if( len > (size_t) ( end - p ) )
 80a70ac:	9d06      	ldr	r5, [sp, #24]
 80a70ae:	9f05      	ldr	r7, [sp, #20]
 80a70b0:	ebc5 0b0b 	rsb	fp, r5, fp
 80a70b4:	45bb      	cmp	fp, r7
 80a70b6:	f0c0 80ca 	bcc.w	80a724e <mbedtls_x509_crt_parse_der+0x22e>
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    }
    crt_end = p + len;

    // Create and populate a new buffer for the raw field
    crt->raw.len = crt_end - buf;
 80a70ba:	443d      	add	r5, r7
 80a70bc:	ebc8 0505 	rsb	r5, r8, r5
 80a70c0:	6065      	str	r5, [r4, #4]
    crt->raw.p = p = (unsigned char*)mbedtls_calloc( 1, crt->raw.len );
 80a70c2:	4629      	mov	r1, r5
 80a70c4:	2001      	movs	r0, #1
 80a70c6:	f007 ffef 	bl	80af0a8 <calloc>
 80a70ca:	4683      	mov	fp, r0
 80a70cc:	9006      	str	r0, [sp, #24]
 80a70ce:	60a0      	str	r0, [r4, #8]
    if( p == NULL )
 80a70d0:	2800      	cmp	r0, #0
 80a70d2:	f000 80c3 	beq.w	80a725c <mbedtls_x509_crt_parse_der+0x23c>
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );
 80a70d6:	462a      	mov	r2, r5

    // Direct pointers to the new buffer
    p += crt->raw.len - len;
 80a70d8:	1bed      	subs	r5, r5, r7
 80a70da:	445d      	add	r5, fp
    crt->raw.len = crt_end - buf;
    crt->raw.p = p = (unsigned char*)mbedtls_calloc( 1, crt->raw.len );
    if( p == NULL )
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );
 80a70dc:	4641      	mov	r1, r8

    // Direct pointers to the new buffer
    p += crt->raw.len - len;
    end = crt_end = p + len;
 80a70de:	442f      	add	r7, r5
    crt->raw.len = crt_end - buf;
    crt->raw.p = p = (unsigned char*)mbedtls_calloc( 1, crt->raw.len );
    if( p == NULL )
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );
 80a70e0:	f008 f807 	bl	80af0f2 <memcpy>
    end = crt_end = p + len;

    /*
     * TBSCertificate  ::=  SEQUENCE  {
     */
    crt->tbs.p = p;
 80a70e4:	6165      	str	r5, [r4, #20]

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a70e6:	2330      	movs	r3, #48	; 0x30
 80a70e8:	4632      	mov	r2, r6
 80a70ea:	4639      	mov	r1, r7
 80a70ec:	a806      	add	r0, sp, #24
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );

    // Direct pointers to the new buffer
    p += crt->raw.len - len;
 80a70ee:	9506      	str	r5, [sp, #24]
    /*
     * TBSCertificate  ::=  SEQUENCE  {
     */
    crt->tbs.p = p;

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a70f0:	f7fa fc94 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a70f4:	4680      	mov	r8, r0
 80a70f6:	b128      	cbz	r0, 80a7104 <mbedtls_x509_crt_parse_der+0xe4>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 80a70f8:	4620      	mov	r0, r4
 80a70fa:	f7ff ff38 	bl	80a6f6e <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 80a70fe:	f5a8 5506 	sub.w	r5, r8, #8576	; 0x2180
 80a7102:	e0b2      	b.n	80a726a <mbedtls_x509_crt_parse_der+0x24a>
    }

    end = p + len;
 80a7104:	9b05      	ldr	r3, [sp, #20]
 80a7106:	9e06      	ldr	r6, [sp, #24]
                             int *ver )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a7108:	aa17      	add	r2, sp, #92	; 0x5c
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    end = p + len;
 80a710a:	441e      	add	r6, r3
    crt->tbs.len = end - crt->tbs.p;
 80a710c:	6963      	ldr	r3, [r4, #20]
                             int *ver )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a710e:	4631      	mov	r1, r6
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    end = p + len;
    crt->tbs.len = end - crt->tbs.p;
 80a7110:	1af3      	subs	r3, r6, r3
 80a7112:	6123      	str	r3, [r4, #16]
                             int *ver )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a7114:	a806      	add	r0, sp, #24
 80a7116:	23a0      	movs	r3, #160	; 0xa0
 80a7118:	f7fa fc80 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a711c:	4605      	mov	r5, r0
 80a711e:	b128      	cbz	r0, 80a712c <mbedtls_x509_crt_parse_der+0x10c>
            MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 0 ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80a7120:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80a7124:	d114      	bne.n	80a7150 <mbedtls_x509_crt_parse_der+0x130>
        {
            *ver = 0;
 80a7126:	f8c4 8018 	str.w	r8, [r4, #24]
 80a712a:	e014      	b.n	80a7156 <mbedtls_x509_crt_parse_der+0x136>
        }

        return( ret );
    }

    end = *p + len;
 80a712c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a712e:	9d06      	ldr	r5, [sp, #24]

    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
 80a7130:	f104 0218 	add.w	r2, r4, #24
        }

        return( ret );
    }

    end = *p + len;
 80a7134:	441d      	add	r5, r3

    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
 80a7136:	4629      	mov	r1, r5
 80a7138:	a806      	add	r0, sp, #24
 80a713a:	f7fa fc9c 	bl	80a1a76 <mbedtls_asn1_get_int>
 80a713e:	b110      	cbz	r0, 80a7146 <mbedtls_x509_crt_parse_der+0x126>
        return( MBEDTLS_ERR_X509_INVALID_VERSION + ret );
 80a7140:	f5a0 5508 	sub.w	r5, r0, #8704	; 0x2200
 80a7144:	e004      	b.n	80a7150 <mbedtls_x509_crt_parse_der+0x130>

    if( *p != end )
 80a7146:	9b06      	ldr	r3, [sp, #24]
 80a7148:	429d      	cmp	r5, r3
 80a714a:	d004      	beq.n	80a7156 <mbedtls_x509_crt_parse_der+0x136>
        return( MBEDTLS_ERR_X509_INVALID_VERSION +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80a714c:	4d7b      	ldr	r5, [pc, #492]	; (80a733c <mbedtls_x509_crt_parse_der+0x31c>)
 80a714e:	e0d6      	b.n	80a72fe <mbedtls_x509_crt_parse_der+0x2de>
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
 80a7150:	2d00      	cmp	r5, #0
 80a7152:	f040 80d4 	bne.w	80a72fe <mbedtls_x509_crt_parse_der+0x2de>
     *
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
 80a7156:	f104 021c 	add.w	r2, r4, #28
 80a715a:	4631      	mov	r1, r6
 80a715c:	a806      	add	r0, sp, #24
 80a715e:	f7fd fb91 	bl	80a4884 <mbedtls_x509_get_serial>
 80a7162:	4605      	mov	r5, r0
 80a7164:	2800      	cmp	r0, #0
 80a7166:	f040 80ca 	bne.w	80a72fe <mbedtls_x509_crt_parse_der+0x2de>
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
        ( ret = mbedtls_x509_get_alg(      &p, end, &crt->sig_oid,
 80a716a:	f104 0828 	add.w	r8, r4, #40	; 0x28
     * CertificateSerialNumber  ::=  INTEGER
     *
     * signature            AlgorithmIdentifier
     */
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
 80a716e:	ab0b      	add	r3, sp, #44	; 0x2c
 80a7170:	4642      	mov	r2, r8
 80a7172:	4631      	mov	r1, r6
 80a7174:	a806      	add	r0, sp, #24
 80a7176:	f7fd fbad 	bl	80a48d4 <mbedtls_x509_get_alg>
 80a717a:	4605      	mov	r5, r0
 80a717c:	2800      	cmp	r0, #0
 80a717e:	f040 80be 	bne.w	80a72fe <mbedtls_x509_crt_parse_der+0x2de>
 80a7182:	e086      	b.n	80a7292 <mbedtls_x509_crt_parse_der+0x272>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
    }

    crt->version++;
 80a7184:	3301      	adds	r3, #1
 80a7186:	61a3      	str	r3, [r4, #24]

    if( ( ret = mbedtls_x509_get_sig_alg( &crt->sig_oid, &sig_params1,
 80a7188:	f504 7396 	add.w	r3, r4, #300	; 0x12c
 80a718c:	9300      	str	r3, [sp, #0]
 80a718e:	f504 7294 	add.w	r2, r4, #296	; 0x128
 80a7192:	f204 1329 	addw	r3, r4, #297	; 0x129
 80a7196:	a90b      	add	r1, sp, #44	; 0x2c
 80a7198:	4640      	mov	r0, r8
 80a719a:	f7fd fcef 	bl	80a4b7c <mbedtls_x509_get_sig_alg>
 80a719e:	4605      	mov	r5, r0
 80a71a0:	2800      	cmp	r0, #0
 80a71a2:	f040 80ac 	bne.w	80a72fe <mbedtls_x509_crt_parse_der+0x2de>
    }

    /*
     * issuer               Name
     */
    crt->issuer_raw.p = p;
 80a71a6:	9b06      	ldr	r3, [sp, #24]

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a71a8:	aa05      	add	r2, sp, #20
    }

    /*
     * issuer               Name
     */
    crt->issuer_raw.p = p;
 80a71aa:	63e3      	str	r3, [r4, #60]	; 0x3c

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a71ac:	4631      	mov	r1, r6
 80a71ae:	2330      	movs	r3, #48	; 0x30
 80a71b0:	a806      	add	r0, sp, #24
 80a71b2:	f7fa fc33 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a71b6:	4605      	mov	r5, r0
 80a71b8:	2800      	cmp	r0, #0
 80a71ba:	d151      	bne.n	80a7260 <mbedtls_x509_crt_parse_der+0x240>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( ( ret = mbedtls_x509_get_name( &p, p + len, &crt->issuer ) ) != 0 )
 80a71bc:	9b05      	ldr	r3, [sp, #20]
 80a71be:	9906      	ldr	r1, [sp, #24]
 80a71c0:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 80a71c4:	4419      	add	r1, r3
 80a71c6:	a806      	add	r0, sp, #24
 80a71c8:	f7fd fb8c 	bl	80a48e4 <mbedtls_x509_get_name>
 80a71cc:	4605      	mov	r5, r0
 80a71ce:	2800      	cmp	r0, #0
 80a71d0:	f040 8095 	bne.w	80a72fe <mbedtls_x509_crt_parse_der+0x2de>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->issuer_raw.len = p - crt->issuer_raw.p;
 80a71d4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80a71d6:	9b06      	ldr	r3, [sp, #24]
                           mbedtls_x509_time *to )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a71d8:	4631      	mov	r1, r6
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->issuer_raw.len = p - crt->issuer_raw.p;
 80a71da:	1a9b      	subs	r3, r3, r2
 80a71dc:	63a3      	str	r3, [r4, #56]	; 0x38
                           mbedtls_x509_time *to )
{
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a71de:	aa17      	add	r2, sp, #92	; 0x5c
 80a71e0:	2330      	movs	r3, #48	; 0x30
 80a71e2:	a806      	add	r0, sp, #24
 80a71e4:	f7fa fc1a 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a71e8:	2800      	cmp	r0, #0
 80a71ea:	d05b      	beq.n	80a72a4 <mbedtls_x509_crt_parse_der+0x284>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
 80a71ec:	f5a0 5510 	sub.w	r5, r0, #9216	; 0x2400
     * Validity ::= SEQUENCE {
     *      notBefore      Time,
     *      notAfter       Time }
     *
     */
    if( ( ret = x509_get_dates( &p, end, &crt->valid_from,
 80a71f0:	2d00      	cmp	r5, #0
 80a71f2:	f040 8084 	bne.w	80a72fe <mbedtls_x509_crt_parse_der+0x2de>
    }

    /*
     * subject              Name
     */
    crt->subject_raw.p = p;
 80a71f6:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 80a71fa:	f85b 3d50 	ldr.w	r3, [fp, #-80]!

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a71fe:	aa05      	add	r2, sp, #20
    }

    /*
     * subject              Name
     */
    crt->subject_raw.p = p;
 80a7200:	64a3      	str	r3, [r4, #72]	; 0x48

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80a7202:	4631      	mov	r1, r6
 80a7204:	2330      	movs	r3, #48	; 0x30
 80a7206:	4658      	mov	r0, fp
 80a7208:	f7fa fc08 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a720c:	4605      	mov	r5, r0
 80a720e:	bb38      	cbnz	r0, 80a7260 <mbedtls_x509_crt_parse_der+0x240>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
 80a7210:	9b05      	ldr	r3, [sp, #20]
 80a7212:	2b00      	cmp	r3, #0
 80a7214:	d15f      	bne.n	80a72d6 <mbedtls_x509_crt_parse_der+0x2b6>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->subject_raw.len = p - crt->subject_raw.p;
 80a7216:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80a7218:	9b06      	ldr	r3, [sp, #24]

    /*
     * SubjectPublicKeyInfo
     */
    if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
 80a721a:	4631      	mov	r1, r6
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    crt->subject_raw.len = p - crt->subject_raw.p;
 80a721c:	1a9b      	subs	r3, r3, r2
 80a721e:	6463      	str	r3, [r4, #68]	; 0x44

    /*
     * SubjectPublicKeyInfo
     */
    if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
 80a7220:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 80a7224:	4658      	mov	r0, fp
 80a7226:	f7fd ffff 	bl	80a5228 <mbedtls_pk_parse_subpubkey>
 80a722a:	4605      	mov	r5, r0
 80a722c:	2800      	cmp	r0, #0
 80a722e:	d166      	bne.n	80a72fe <mbedtls_x509_crt_parse_der+0x2de>
     *  subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,
     *                       -- If present, version shall be v2 or v3
     *  extensions      [3]  EXPLICIT Extensions OPTIONAL
     *                       -- If present, version shall be v3
     */
    if( crt->version == 2 || crt->version == 3 )
 80a7230:	69a3      	ldr	r3, [r4, #24]
 80a7232:	3b02      	subs	r3, #2
 80a7234:	2b01      	cmp	r3, #1
 80a7236:	d958      	bls.n	80a72ea <mbedtls_x509_crt_parse_der+0x2ca>
            mbedtls_x509_crt_free( crt );
            return( ret );
        }
    }

    if( crt->version == 2 || crt->version == 3 )
 80a7238:	69a3      	ldr	r3, [r4, #24]
 80a723a:	3b02      	subs	r3, #2
 80a723c:	2b01      	cmp	r3, #1
 80a723e:	d962      	bls.n	80a7306 <mbedtls_x509_crt_parse_der+0x2e6>
            return( ret );
        }
    }

#if !defined(MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3)
    if( crt->version == 3 )
 80a7240:	69a3      	ldr	r3, [r4, #24]
 80a7242:	2b03      	cmp	r3, #3
 80a7244:	d06a      	beq.n	80a731c <mbedtls_x509_crt_parse_der+0x2fc>
            mbedtls_x509_crt_free( crt );
            return( ret );
        }
    }

    if( p != end )
 80a7246:	9b06      	ldr	r3, [sp, #24]
 80a7248:	429e      	cmp	r6, r3
 80a724a:	f000 811e 	beq.w	80a748a <mbedtls_x509_crt_parse_der+0x46a>
        return( ret );
    }

    if( p != end )
    {
        mbedtls_x509_crt_free( crt );
 80a724e:	4620      	mov	r0, r4
 80a7250:	f7ff fe8d 	bl	80a6f6e <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80a7254:	4d3a      	ldr	r5, [pc, #232]	; (80a7340 <mbedtls_x509_crt_parse_der+0x320>)
 80a7256:	e00b      	b.n	80a7270 <mbedtls_x509_crt_parse_der+0x250>

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 80a7258:	4d3a      	ldr	r5, [pc, #232]	; (80a7344 <mbedtls_x509_crt_parse_der+0x324>)
 80a725a:	e009      	b.n	80a7270 <mbedtls_x509_crt_parse_der+0x250>

    // Create and populate a new buffer for the raw field
    crt->raw.len = crt_end - buf;
    crt->raw.p = p = (unsigned char*)mbedtls_calloc( 1, crt->raw.len );
    if( p == NULL )
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 80a725c:	4d3a      	ldr	r5, [pc, #232]	; (80a7348 <mbedtls_x509_crt_parse_der+0x328>)
 80a725e:	e007      	b.n	80a7270 <mbedtls_x509_crt_parse_der+0x250>
    crt->subject_raw.p = p;

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 80a7260:	4620      	mov	r0, r4
 80a7262:	f7ff fe84 	bl	80a6f6e <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 80a7266:	f5a5 5506 	sub.w	r5, r5, #8576	; 0x2180
        prev = crt;
        mbedtls_x509_crt_init( crt->next );
        crt = crt->next;
    }

    if( ( ret = x509_crt_parse_der_core( crt, buf, buflen ) ) != 0 )
 80a726a:	2d00      	cmp	r5, #0
 80a726c:	f000 8204 	beq.w	80a7678 <mbedtls_x509_crt_parse_der+0x658>
    {
        if( prev )
 80a7270:	f1b9 0f00 	cmp.w	r9, #0
 80a7274:	d002      	beq.n	80a727c <mbedtls_x509_crt_parse_der+0x25c>
            prev->next = NULL;
 80a7276:	2300      	movs	r3, #0
 80a7278:	f8c9 3130 	str.w	r3, [r9, #304]	; 0x130

        if( crt != chain )
 80a727c:	4554      	cmp	r4, sl
 80a727e:	f000 81fb 	beq.w	80a7678 <mbedtls_x509_crt_parse_der+0x658>
            mbedtls_free( crt );
 80a7282:	4620      	mov	r0, r4
 80a7284:	f006 fe42 	bl	80adf0c <free>
 80a7288:	e1f6      	b.n	80a7678 <mbedtls_x509_crt_parse_der+0x658>

    /*
     * Check for valid input
     */
    if( crt == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 80a728a:	4d2e      	ldr	r5, [pc, #184]	; (80a7344 <mbedtls_x509_crt_parse_der+0x324>)
 80a728c:	e1f4      	b.n	80a7678 <mbedtls_x509_crt_parse_der+0x658>
    if( crt->version != 0 && crt->next == NULL )
    {
        crt->next = (mbedtls_x509_crt *)mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );

        if( crt->next == NULL )
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 80a728e:	4d2e      	ldr	r5, [pc, #184]	; (80a7348 <mbedtls_x509_crt_parse_der+0x328>)
 80a7290:	e1f2      	b.n	80a7678 <mbedtls_x509_crt_parse_der+0x658>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->version < 0 || crt->version > 2 )
 80a7292:	69a3      	ldr	r3, [r4, #24]
 80a7294:	2b02      	cmp	r3, #2
 80a7296:	f67f af75 	bls.w	80a7184 <mbedtls_x509_crt_parse_der+0x164>
    {
        mbedtls_x509_crt_free( crt );
 80a729a:	4620      	mov	r0, r4
 80a729c:	f7ff fe67 	bl	80a6f6e <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
 80a72a0:	4d2a      	ldr	r5, [pc, #168]	; (80a734c <mbedtls_x509_crt_parse_der+0x32c>)
 80a72a2:	e7e5      	b.n	80a7270 <mbedtls_x509_crt_parse_der+0x250>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );

    end = *p + len;
 80a72a4:	9a06      	ldr	r2, [sp, #24]
 80a72a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c

    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
 80a72a8:	a806      	add	r0, sp, #24

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );

    end = *p + len;
 80a72aa:	eb02 0b03 	add.w	fp, r2, r3

    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
 80a72ae:	4659      	mov	r1, fp
 80a72b0:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 80a72b4:	f7fd fb8e 	bl	80a49d4 <mbedtls_x509_get_time>
 80a72b8:	b958      	cbnz	r0, 80a72d2 <mbedtls_x509_crt_parse_der+0x2b2>
        return( ret );

    if( ( ret = mbedtls_x509_get_time( p, end, to ) ) != 0 )
 80a72ba:	f104 02a4 	add.w	r2, r4, #164	; 0xa4
 80a72be:	4659      	mov	r1, fp
 80a72c0:	a806      	add	r0, sp, #24
 80a72c2:	f7fd fb87 	bl	80a49d4 <mbedtls_x509_get_time>
 80a72c6:	b920      	cbnz	r0, 80a72d2 <mbedtls_x509_crt_parse_der+0x2b2>
        return( ret );

    if( *p != end )
 80a72c8:	9b06      	ldr	r3, [sp, #24]
 80a72ca:	459b      	cmp	fp, r3
 80a72cc:	d093      	beq.n	80a71f6 <mbedtls_x509_crt_parse_der+0x1d6>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80a72ce:	4d20      	ldr	r5, [pc, #128]	; (80a7350 <mbedtls_x509_crt_parse_der+0x330>)
 80a72d0:	e015      	b.n	80a72fe <mbedtls_x509_crt_parse_der+0x2de>
    end = *p + len;

    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
        return( ret );

    if( ( ret = mbedtls_x509_get_time( p, end, to ) ) != 0 )
 80a72d2:	4605      	mov	r5, r0
 80a72d4:	e78c      	b.n	80a71f0 <mbedtls_x509_crt_parse_der+0x1d0>
    {
        mbedtls_x509_crt_free( crt );
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
 80a72d6:	9906      	ldr	r1, [sp, #24]
 80a72d8:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 80a72dc:	4419      	add	r1, r3
 80a72de:	4658      	mov	r0, fp
 80a72e0:	f7fd fb00 	bl	80a48e4 <mbedtls_x509_get_name>
 80a72e4:	4605      	mov	r5, r0
 80a72e6:	b950      	cbnz	r0, 80a72fe <mbedtls_x509_crt_parse_der+0x2de>
 80a72e8:	e795      	b.n	80a7216 <mbedtls_x509_crt_parse_der+0x1f6>
     *  extensions      [3]  EXPLICIT Extensions OPTIONAL
     *                       -- If present, version shall be v3
     */
    if( crt->version == 2 || crt->version == 3 )
    {
        ret = x509_get_uid( &p, end, &crt->issuer_id,  1 );
 80a72ea:	2301      	movs	r3, #1
 80a72ec:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
 80a72f0:	4631      	mov	r1, r6
 80a72f2:	4658      	mov	r0, fp
 80a72f4:	f7fe fed5 	bl	80a60a2 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>
        if( ret != 0 )
 80a72f8:	4605      	mov	r5, r0
 80a72fa:	2800      	cmp	r0, #0
 80a72fc:	d09c      	beq.n	80a7238 <mbedtls_x509_crt_parse_der+0x218>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
    }

    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
    {
        mbedtls_x509_crt_free( crt );
 80a72fe:	4620      	mov	r0, r4
 80a7300:	f7ff fe35 	bl	80a6f6e <mbedtls_x509_crt_free>
 80a7304:	e7b1      	b.n	80a726a <mbedtls_x509_crt_parse_der+0x24a>
        }
    }

    if( crt->version == 2 || crt->version == 3 )
    {
        ret = x509_get_uid( &p, end, &crt->subject_id,  2 );
 80a7306:	2302      	movs	r3, #2
 80a7308:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
 80a730c:	4631      	mov	r1, r6
 80a730e:	4658      	mov	r0, fp
 80a7310:	f7fe fec7 	bl	80a60a2 <_ZL12x509_get_uidPPhPKhP16mbedtls_asn1_bufi>
        if( ret != 0 )
 80a7314:	4605      	mov	r5, r0
 80a7316:	2800      	cmp	r0, #0
 80a7318:	d092      	beq.n	80a7240 <mbedtls_x509_crt_parse_der+0x220>
 80a731a:	e7f0      	b.n	80a72fe <mbedtls_x509_crt_parse_der+0x2de>
{
    int ret;
    size_t len;
    unsigned char *end_ext_data, *end_ext_octet;

    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
 80a731c:	f104 02dc 	add.w	r2, r4, #220	; 0xdc
 80a7320:	4631      	mov	r1, r6
 80a7322:	4658      	mov	r0, fp
 80a7324:	f7fd fc4a 	bl	80a4bbc <mbedtls_x509_get_ext>
 80a7328:	b908      	cbnz	r0, 80a732e <mbedtls_x509_crt_parse_der+0x30e>
         * Extension  ::=  SEQUENCE  {
         *      extnID      OBJECT IDENTIFIER,
         *      critical    BOOLEAN DEFAULT FALSE,
         *      extnValue   OCTET STRING  }
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 80a732a:	4680      	mov	r8, r0
 80a732c:	e05a      	b.n	80a73e4 <mbedtls_x509_crt_parse_der+0x3c4>
    size_t len;
    unsigned char *end_ext_data, *end_ext_octet;

    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80a732e:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80a7332:	f040 80a5 	bne.w	80a7480 <mbedtls_x509_crt_parse_der+0x460>
 80a7336:	e786      	b.n	80a7246 <mbedtls_x509_crt_parse_der+0x226>
 80a7338:	ffffde80 	.word	0xffffde80
 80a733c:	ffffdd9a 	.word	0xffffdd9a
 80a7340:	ffffde1a 	.word	0xffffde1a
 80a7344:	ffffd800 	.word	0xffffd800
 80a7348:	ffffd780 	.word	0xffffd780
 80a734c:	ffffda80 	.word	0xffffda80
 80a7350:	ffffdb9a 	.word	0xffffdb9a
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
        int is_critical = 0; /* DEFAULT FALSE */
        int ext_type = 0;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a7354:	2330      	movs	r3, #48	; 0x30
 80a7356:	aa07      	add	r2, sp, #28
 80a7358:	4631      	mov	r1, r6
 80a735a:	a806      	add	r0, sp, #24
         * Extension  ::=  SEQUENCE  {
         *      extnID      OBJECT IDENTIFIER,
         *      critical    BOOLEAN DEFAULT FALSE,
         *      extnValue   OCTET STRING  }
         */
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 80a735c:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80a7360:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
 80a7364:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
        int is_critical = 0; /* DEFAULT FALSE */
 80a7368:	f8cd 8020 	str.w	r8, [sp, #32]
        int ext_type = 0;
 80a736c:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a7370:	f7fa fb54 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a7374:	2800      	cmp	r0, #0
 80a7376:	f040 80bd 	bne.w	80a74f4 <mbedtls_x509_crt_parse_der+0x4d4>
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_data = *p + len;
 80a737a:	9b06      	ldr	r3, [sp, #24]
 80a737c:	9d07      	ldr	r5, [sp, #28]

        /* Get extension ID */
        extn_oid.tag = **p;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 80a737e:	aa15      	add	r2, sp, #84	; 0x54

        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
                MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_data = *p + len;
 80a7380:	441d      	add	r5, r3

        /* Get extension ID */
        extn_oid.tag = **p;
 80a7382:	781b      	ldrb	r3, [r3, #0]

        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 80a7384:	4631      	mov	r1, r6
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_data = *p + len;

        /* Get extension ID */
        extn_oid.tag = **p;
 80a7386:	9314      	str	r3, [sp, #80]	; 0x50

        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 80a7388:	a806      	add	r0, sp, #24
 80a738a:	2306      	movs	r3, #6
 80a738c:	f7fa fb46 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a7390:	2800      	cmp	r0, #0
 80a7392:	f040 80af 	bne.w	80a74f4 <mbedtls_x509_crt_parse_der+0x4d4>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        extn_oid.p = *p;
 80a7396:	9a06      	ldr	r2, [sp, #24]
        *p += extn_oid.len;
 80a7398:	9b15      	ldr	r3, [sp, #84]	; 0x54
        extn_oid.tag = **p;

        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        extn_oid.p = *p;
 80a739a:	9216      	str	r2, [sp, #88]	; 0x58
        *p += extn_oid.len;
 80a739c:	4413      	add	r3, r2
 80a739e:	9306      	str	r3, [sp, #24]

        if( ( end - *p ) < 1 )
 80a73a0:	1af3      	subs	r3, r6, r3
 80a73a2:	2b00      	cmp	r3, #0
 80a73a4:	dd51      	ble.n	80a744a <mbedtls_x509_crt_parse_der+0x42a>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
 80a73a6:	aa08      	add	r2, sp, #32
 80a73a8:	4629      	mov	r1, r5
 80a73aa:	a806      	add	r0, sp, #24
 80a73ac:	f7fa fb4a 	bl	80a1a44 <mbedtls_asn1_get_bool>
 80a73b0:	b9e0      	cbnz	r0, 80a73ec <mbedtls_x509_crt_parse_der+0x3cc>
            ( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        /* Data should be octet string type */
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &len,
 80a73b2:	2304      	movs	r3, #4
 80a73b4:	aa07      	add	r2, sp, #28
 80a73b6:	4629      	mov	r1, r5
 80a73b8:	a806      	add	r0, sp, #24
 80a73ba:	f7fa fb2f 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a73be:	2800      	cmp	r0, #0
 80a73c0:	f040 8098 	bne.w	80a74f4 <mbedtls_x509_crt_parse_der+0x4d4>
                MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        end_ext_octet = *p + len;

        if( end_ext_octet != end_ext_data )
 80a73c4:	9b07      	ldr	r3, [sp, #28]
 80a73c6:	9a06      	ldr	r2, [sp, #24]
 80a73c8:	4413      	add	r3, r2
 80a73ca:	429d      	cmp	r5, r3
 80a73cc:	f040 814a 	bne.w	80a7664 <mbedtls_x509_crt_parse_der+0x644>
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

        /*
         * Detect supported extensions
         */
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );
 80a73d0:	a909      	add	r1, sp, #36	; 0x24
 80a73d2:	a814      	add	r0, sp, #80	; 0x50
 80a73d4:	f7fb ff50 	bl	80a3278 <mbedtls_oid_get_x509_ext_type>

        if( ret != 0 )
 80a73d8:	b160      	cbz	r0, 80a73f4 <mbedtls_x509_crt_parse_der+0x3d4>
        {
            /* No parser found, skip extension */
            *p = end_ext_octet;

#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
 80a73da:	9b08      	ldr	r3, [sp, #32]
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );

        if( ret != 0 )
        {
            /* No parser found, skip extension */
            *p = end_ext_octet;
 80a73dc:	9506      	str	r5, [sp, #24]

#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
 80a73de:	2b00      	cmp	r3, #0
 80a73e0:	f040 8142 	bne.w	80a7668 <mbedtls_x509_crt_parse_der+0x648>
            return( 0 );

        return( ret );
    }

    while( *p < end )
 80a73e4:	9b06      	ldr	r3, [sp, #24]
 80a73e6:	429e      	cmp	r6, r3
 80a73e8:	d8b4      	bhi.n	80a7354 <mbedtls_x509_crt_parse_der+0x334>
 80a73ea:	e030      	b.n	80a744e <mbedtls_x509_crt_parse_der+0x42e>
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
 80a73ec:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80a73f0:	d0df      	beq.n	80a73b2 <mbedtls_x509_crt_parse_der+0x392>
 80a73f2:	e07f      	b.n	80a74f4 <mbedtls_x509_crt_parse_der+0x4d4>
#endif
            continue;
        }

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
 80a73f4:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
 80a73f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a73fa:	ea12 0003 	ands.w	r0, r2, r3
 80a73fe:	f040 8135 	bne.w	80a766c <mbedtls_x509_crt_parse_der+0x64c>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

        crt->ext_types |= ext_type;
 80a7402:	431a      	orrs	r2, r3

        switch( ext_type )
 80a7404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

        crt->ext_types |= ext_type;
 80a7408:	f8c4 20f8 	str.w	r2, [r4, #248]	; 0xf8

        switch( ext_type )
 80a740c:	d023      	beq.n	80a7456 <mbedtls_x509_crt_parse_der+0x436>
 80a740e:	dc74      	bgt.n	80a74fa <mbedtls_x509_crt_parse_der+0x4da>
 80a7410:	2b04      	cmp	r3, #4
 80a7412:	f000 80a9 	beq.w	80a7568 <mbedtls_x509_crt_parse_der+0x548>
 80a7416:	2b20      	cmp	r3, #32
 80a7418:	f040 812a 	bne.w	80a7670 <mbedtls_x509_crt_parse_der+0x650>
    mbedtls_asn1_buf *buf;
    unsigned char tag;
    mbedtls_asn1_sequence *cur = subject_alt_name;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a741c:	2330      	movs	r3, #48	; 0x30
 80a741e:	aa0a      	add	r2, sp, #40	; 0x28
 80a7420:	4629      	mov	r1, r5
 80a7422:	a806      	add	r0, sp, #24
                return( ret );
            break;

        case MBEDTLS_X509_EXT_SUBJECT_ALT_NAME:
            /* Parse subject alt name */
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 80a7424:	f104 0be8 	add.w	fp, r4, #232	; 0xe8
    mbedtls_asn1_buf *buf;
    unsigned char tag;
    mbedtls_asn1_sequence *cur = subject_alt_name;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a7428:	f7fa faf8 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a742c:	bb20      	cbnz	r0, 80a7478 <mbedtls_x509_crt_parse_der+0x458>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( *p + len != end )
 80a742e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7430:	9a06      	ldr	r2, [sp, #24]
 80a7432:	4413      	add	r3, r2
 80a7434:	429d      	cmp	r5, r3
 80a7436:	f040 8115 	bne.w	80a7664 <mbedtls_x509_crt_parse_der+0x644>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    while( *p < end )
 80a743a:	9a06      	ldr	r2, [sp, #24]
 80a743c:	4295      	cmp	r5, r2
 80a743e:	f240 80f3 	bls.w	80a7628 <mbedtls_x509_crt_parse_der+0x608>
    {
        if( ( end - *p ) < 1 )
 80a7442:	1aab      	subs	r3, r5, r2
 80a7444:	2b00      	cmp	r3, #0
 80a7446:	f300 80be 	bgt.w	80a75c6 <mbedtls_x509_crt_parse_der+0x5a6>
        extn_oid.p = *p;
        *p += extn_oid.len;

        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 80a744a:	488d      	ldr	r0, [pc, #564]	; (80a7680 <mbedtls_x509_crt_parse_der+0x660>)
 80a744c:	e018      	b.n	80a7480 <mbedtls_x509_crt_parse_der+0x460>
        default:
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE );
        }
    }

    if( *p != end )
 80a744e:	f43f aefa 	beq.w	80a7246 <mbedtls_x509_crt_parse_der+0x226>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80a7452:	4d8c      	ldr	r5, [pc, #560]	; (80a7684 <mbedtls_x509_crt_parse_der+0x664>)
 80a7454:	e753      	b.n	80a72fe <mbedtls_x509_crt_parse_der+0x2de>

        switch( ext_type )
        {
        case MBEDTLS_X509_EXT_BASIC_CONSTRAINTS:
            /* Parse basic constraints */
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
 80a7456:	f504 7380 	add.w	r3, r4, #256	; 0x100
 80a745a:	9303      	str	r3, [sp, #12]
    /*
     * BasicConstraints ::= SEQUENCE {
     *      cA                      BOOLEAN DEFAULT FALSE,
     *      pathLenConstraint       INTEGER (0..MAX) OPTIONAL }
     */
    *ca_istrue = 0; /* DEFAULT FALSE */
 80a745c:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
    *max_pathlen = 0; /* endless */
 80a7460:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a7464:	2330      	movs	r3, #48	; 0x30
 80a7466:	aa17      	add	r2, sp, #92	; 0x5c
 80a7468:	4629      	mov	r1, r5
 80a746a:	a806      	add	r0, sp, #24

        switch( ext_type )
        {
        case MBEDTLS_X509_EXT_BASIC_CONSTRAINTS:
            /* Parse basic constraints */
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
 80a746c:	f104 0bfc 	add.w	fp, r4, #252	; 0xfc
     *      pathLenConstraint       INTEGER (0..MAX) OPTIONAL }
     */
    *ca_istrue = 0; /* DEFAULT FALSE */
    *max_pathlen = 0; /* endless */

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80a7470:	f7fa fad4 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80a7474:	2800      	cmp	r0, #0
 80a7476:	d048      	beq.n	80a750a <mbedtls_x509_crt_parse_der+0x4ea>
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
        (*p)++;
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 80a7478:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
                return( ret );
            break;

        case MBEDTLS_X509_EXT_SUBJECT_ALT_NAME:
            /* Parse subject alt name */
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 80a747c:	2800      	cmp	r0, #0
 80a747e:	d0b1      	beq.n	80a73e4 <mbedtls_x509_crt_parse_der+0x3c4>
    size_t len;
    unsigned char *end_ext_data, *end_ext_octet;

    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80a7480:	4605      	mov	r5, r0
#if !defined(MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3)
    if( crt->version == 3 )
#endif
    {
        ret = x509_get_crt_ext( &p, end, crt );
        if( ret != 0 )
 80a7482:	2800      	cmp	r0, #0
 80a7484:	f43f aedf 	beq.w	80a7246 <mbedtls_x509_crt_parse_der+0x226>
 80a7488:	e739      	b.n	80a72fe <mbedtls_x509_crt_parse_der+0x2de>
     *  -- end of TBSCertificate
     *
     *  signatureAlgorithm   AlgorithmIdentifier,
     *  signatureValue       BIT STRING
     */
    if( ( ret = mbedtls_x509_get_alg( &p, end, &sig_oid2, &sig_params2 ) ) != 0 )
 80a748a:	ab0e      	add	r3, sp, #56	; 0x38
 80a748c:	aa11      	add	r2, sp, #68	; 0x44
 80a748e:	4639      	mov	r1, r7
 80a7490:	a806      	add	r0, sp, #24
 80a7492:	f7fd fa1f 	bl	80a48d4 <mbedtls_x509_get_alg>
 80a7496:	4605      	mov	r5, r0
 80a7498:	2800      	cmp	r0, #0
 80a749a:	f47f af30 	bne.w	80a72fe <mbedtls_x509_crt_parse_der+0x2de>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->sig_oid.len != sig_oid2.len ||
 80a749e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80a74a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80a74a2:	429a      	cmp	r2, r3
 80a74a4:	d10f      	bne.n	80a74c6 <mbedtls_x509_crt_parse_der+0x4a6>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 80a74a6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80a74a8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80a74aa:	f007 fe13 	bl	80af0d4 <memcmp>
    {
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->sig_oid.len != sig_oid2.len ||
 80a74ae:	4605      	mov	r5, r0
 80a74b0:	b948      	cbnz	r0, 80a74c6 <mbedtls_x509_crt_parse_der+0x4a6>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
        sig_params1.len != sig_params2.len ||
 80a74b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        mbedtls_x509_crt_free( crt );
        return( ret );
    }

    if( crt->sig_oid.len != sig_oid2.len ||
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 80a74b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80a74b6:	429a      	cmp	r2, r3
 80a74b8:	d105      	bne.n	80a74c6 <mbedtls_x509_crt_parse_der+0x4a6>
        sig_params1.len != sig_params2.len ||
 80a74ba:	b14a      	cbz	r2, 80a74d0 <mbedtls_x509_crt_parse_der+0x4b0>
        ( sig_params1.len != 0 &&
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
 80a74bc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80a74be:	980d      	ldr	r0, [sp, #52]	; 0x34
 80a74c0:	f007 fe08 	bl	80af0d4 <memcmp>
    }

    if( crt->sig_oid.len != sig_oid2.len ||
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
        sig_params1.len != sig_params2.len ||
        ( sig_params1.len != 0 &&
 80a74c4:	b120      	cbz	r0, 80a74d0 <mbedtls_x509_crt_parse_der+0x4b0>
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
    {
        mbedtls_x509_crt_free( crt );
 80a74c6:	4620      	mov	r0, r4
 80a74c8:	f7ff fd51 	bl	80a6f6e <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_SIG_MISMATCH );
 80a74cc:	4d6e      	ldr	r5, [pc, #440]	; (80a7688 <mbedtls_x509_crt_parse_der+0x668>)
 80a74ce:	e6cf      	b.n	80a7270 <mbedtls_x509_crt_parse_der+0x250>
    }

    if( ( ret = mbedtls_x509_get_sig( &p, end, &crt->sig ) ) != 0 )
 80a74d0:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 80a74d4:	4639      	mov	r1, r7
 80a74d6:	a806      	add	r0, sp, #24
 80a74d8:	f7fd fb32 	bl	80a4b40 <mbedtls_x509_get_sig>
 80a74dc:	4606      	mov	r6, r0
 80a74de:	b120      	cbz	r0, 80a74ea <mbedtls_x509_crt_parse_der+0x4ca>
    {
        mbedtls_x509_crt_free( crt );
 80a74e0:	4620      	mov	r0, r4
 80a74e2:	f7ff fd44 	bl	80a6f6e <mbedtls_x509_crt_free>
 80a74e6:	4635      	mov	r5, r6
 80a74e8:	e6bf      	b.n	80a726a <mbedtls_x509_crt_parse_der+0x24a>
        return( ret );
    }

    if( p != end )
 80a74ea:	9b06      	ldr	r3, [sp, #24]
 80a74ec:	429f      	cmp	r7, r3
 80a74ee:	f000 80c3 	beq.w	80a7678 <mbedtls_x509_crt_parse_der+0x658>
 80a74f2:	e6ac      	b.n	80a724e <mbedtls_x509_crt_parse_der+0x22e>
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        /* Get optional critical */
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
            ( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 80a74f4:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
 80a74f8:	e7c2      	b.n	80a7480 <mbedtls_x509_crt_parse_der+0x460>
        if( ( crt->ext_types & ext_type ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

        crt->ext_types |= ext_type;

        switch( ext_type )
 80a74fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80a74fe:	d053      	beq.n	80a75a8 <mbedtls_x509_crt_parse_der+0x588>
 80a7500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80a7504:	f000 8097 	beq.w	80a7636 <mbedtls_x509_crt_parse_der+0x616>
 80a7508:	e0b2      	b.n	80a7670 <mbedtls_x509_crt_parse_der+0x650>

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( *p == end )
 80a750a:	9b06      	ldr	r3, [sp, #24]
 80a750c:	429d      	cmp	r5, r3
 80a750e:	f43f af69 	beq.w	80a73e4 <mbedtls_x509_crt_parse_der+0x3c4>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_bool( p, end, ca_istrue ) ) != 0 )
 80a7512:	465a      	mov	r2, fp
 80a7514:	4629      	mov	r1, r5
 80a7516:	a806      	add	r0, sp, #24
 80a7518:	f7fa fa94 	bl	80a1a44 <mbedtls_asn1_get_bool>
 80a751c:	b178      	cbz	r0, 80a753e <mbedtls_x509_crt_parse_der+0x51e>
    {
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80a751e:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80a7522:	d1a9      	bne.n	80a7478 <mbedtls_x509_crt_parse_der+0x458>
            ret = mbedtls_asn1_get_int( p, end, ca_istrue );
 80a7524:	465a      	mov	r2, fp
 80a7526:	4629      	mov	r1, r5
 80a7528:	a806      	add	r0, sp, #24
 80a752a:	f7fa faa4 	bl	80a1a76 <mbedtls_asn1_get_int>

        if( ret != 0 )
 80a752e:	2800      	cmp	r0, #0
 80a7530:	d1a2      	bne.n	80a7478 <mbedtls_x509_crt_parse_der+0x458>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        if( *ca_istrue != 0 )
 80a7532:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 80a7536:	b113      	cbz	r3, 80a753e <mbedtls_x509_crt_parse_der+0x51e>
            *ca_istrue = 1;
 80a7538:	2301      	movs	r3, #1
 80a753a:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    }

    if( *p == end )
 80a753e:	9b06      	ldr	r3, [sp, #24]
 80a7540:	429d      	cmp	r5, r3
 80a7542:	f43f af4f 	beq.w	80a73e4 <mbedtls_x509_crt_parse_der+0x3c4>
        return( 0 );

    if( ( ret = mbedtls_asn1_get_int( p, end, max_pathlen ) ) != 0 )
 80a7546:	9a03      	ldr	r2, [sp, #12]
 80a7548:	4629      	mov	r1, r5
 80a754a:	a806      	add	r0, sp, #24
 80a754c:	f7fa fa93 	bl	80a1a76 <mbedtls_asn1_get_int>
 80a7550:	2800      	cmp	r0, #0
 80a7552:	d191      	bne.n	80a7478 <mbedtls_x509_crt_parse_der+0x458>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( *p != end )
 80a7554:	9b06      	ldr	r3, [sp, #24]
 80a7556:	429d      	cmp	r5, r3
 80a7558:	f040 8084 	bne.w	80a7664 <mbedtls_x509_crt_parse_der+0x644>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    (*max_pathlen)++;
 80a755c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80a7560:	3301      	adds	r3, #1
 80a7562:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80a7566:	e73d      	b.n	80a73e4 <mbedtls_x509_crt_parse_der+0x3c4>
                               const unsigned char *end,
                               unsigned int *key_usage)
{
    int ret;
    size_t i;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 80a7568:	9017      	str	r0, [sp, #92]	; 0x5c
 80a756a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
 80a756e:	9019      	str	r0, [sp, #100]	; 0x64

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 80a7570:	aa17      	add	r2, sp, #92	; 0x5c
 80a7572:	4629      	mov	r1, r5
 80a7574:	a806      	add	r0, sp, #24
 80a7576:	f7fa fab5 	bl	80a1ae4 <mbedtls_asn1_get_bitstring>
 80a757a:	2800      	cmp	r0, #0
 80a757c:	d165      	bne.n	80a764a <mbedtls_x509_crt_parse_der+0x62a>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( bs.len < 1 )
 80a757e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80a7580:	2a00      	cmp	r2, #0
 80a7582:	d077      	beq.n	80a7674 <mbedtls_x509_crt_parse_der+0x654>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
 80a7584:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 80a7588:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80a758a:	5c2b      	ldrb	r3, [r5, r0]
 80a758c:	00c1      	lsls	r1, r0, #3
 80a758e:	408b      	lsls	r3, r1
 80a7590:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 80a7594:	3001      	adds	r0, #1
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 80a7596:	430b      	orrs	r3, r1
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 80a7598:	4282      	cmp	r2, r0
    {
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 80a759a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *key_usage = 0;
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 80a759e:	f43f af21 	beq.w	80a73e4 <mbedtls_x509_crt_parse_der+0x3c4>
 80a75a2:	2804      	cmp	r0, #4
 80a75a4:	d1f1      	bne.n	80a758a <mbedtls_x509_crt_parse_der+0x56a>
 80a75a6:	e71d      	b.n	80a73e4 <mbedtls_x509_crt_parse_der+0x3c4>
                               const unsigned char *end,
                               mbedtls_x509_sequence *ext_key_usage)
{
    int ret;

    if( ( ret = mbedtls_asn1_get_sequence_of( p, end, ext_key_usage, MBEDTLS_ASN1_OID ) ) != 0 )
 80a75a8:	2306      	movs	r3, #6
 80a75aa:	f504 7284 	add.w	r2, r4, #264	; 0x108
 80a75ae:	4629      	mov	r1, r5
 80a75b0:	a806      	add	r0, sp, #24
 80a75b2:	f7fa fad0 	bl	80a1b56 <mbedtls_asn1_get_sequence_of>
 80a75b6:	2800      	cmp	r0, #0
 80a75b8:	d147      	bne.n	80a764a <mbedtls_x509_crt_parse_der+0x62a>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    /* Sequence length must be >= 1 */
    if( ext_key_usage->buf.p == NULL )
 80a75ba:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80a75be:	2b00      	cmp	r3, #0
 80a75c0:	f47f af10 	bne.w	80a73e4 <mbedtls_x509_crt_parse_der+0x3c4>
 80a75c4:	e056      	b.n	80a7674 <mbedtls_x509_crt_parse_der+0x654>
    {
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
 80a75c6:	f812 3b01 	ldrb.w	r3, [r2], #1
        (*p)++;
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 80a75ca:	4629      	mov	r1, r5
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
        (*p)++;
 80a75cc:	9206      	str	r2, [sp, #24]
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 80a75ce:	a806      	add	r0, sp, #24
 80a75d0:	aa17      	add	r2, sp, #92	; 0x5c
    {
        if( ( end - *p ) < 1 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_OUT_OF_DATA );

        tag = **p;
 80a75d2:	9303      	str	r3, [sp, #12]
        (*p)++;
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 80a75d4:	f7fa f9d0 	bl	80a1978 <mbedtls_asn1_get_len>
 80a75d8:	9b03      	ldr	r3, [sp, #12]
 80a75da:	2800      	cmp	r0, #0
 80a75dc:	f47f af4c 	bne.w	80a7478 <mbedtls_x509_crt_parse_der+0x458>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

        if( ( tag & MBEDTLS_ASN1_TAG_CLASS_MASK ) !=
 80a75e0:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 80a75e4:	2a80      	cmp	r2, #128	; 0x80
 80a75e6:	d13f      	bne.n	80a7668 <mbedtls_x509_crt_parse_der+0x648>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
        }

        /* Skip everything but DNS name */
        if( tag != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | 2 ) )
 80a75e8:	2b82      	cmp	r3, #130	; 0x82
 80a75ea:	d002      	beq.n	80a75f2 <mbedtls_x509_crt_parse_der+0x5d2>
        {
            *p += tag_len;
 80a75ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a75ee:	9a06      	ldr	r2, [sp, #24]
 80a75f0:	e017      	b.n	80a7622 <mbedtls_x509_crt_parse_der+0x602>
            continue;
        }

        /* Allocate and assign next pointer */
        if( cur->buf.p != NULL )
 80a75f2:	f8db 3008 	ldr.w	r3, [fp, #8]
 80a75f6:	b15b      	cbz	r3, 80a7610 <mbedtls_x509_crt_parse_der+0x5f0>
        {
            if( cur->next != NULL )
 80a75f8:	f8db 300c 	ldr.w	r3, [fp, #12]
 80a75fc:	2b00      	cmp	r3, #0
 80a75fe:	d135      	bne.n	80a766c <mbedtls_x509_crt_parse_der+0x64c>
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );

            cur->next = (mbedtls_asn1_sequence *)mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );
 80a7600:	2110      	movs	r1, #16
 80a7602:	2001      	movs	r0, #1
 80a7604:	f007 fd50 	bl	80af0a8 <calloc>
 80a7608:	f8cb 000c 	str.w	r0, [fp, #12]

            if( cur->next == NULL )
 80a760c:	b188      	cbz	r0, 80a7632 <mbedtls_x509_crt_parse_der+0x612>
 80a760e:	4683      	mov	fp, r0

            cur = cur->next;
        }

        buf = &(cur->buf);
        buf->tag = tag;
 80a7610:	2382      	movs	r3, #130	; 0x82
 80a7612:	f8cb 3000 	str.w	r3, [fp]
        buf->p = *p;
 80a7616:	9a06      	ldr	r2, [sp, #24]
 80a7618:	f8cb 2008 	str.w	r2, [fp, #8]
        buf->len = tag_len;
 80a761c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a761e:	f8cb 3004 	str.w	r3, [fp, #4]
        *p += buf->len;
 80a7622:	4413      	add	r3, r2
 80a7624:	9306      	str	r3, [sp, #24]
 80a7626:	e708      	b.n	80a743a <mbedtls_x509_crt_parse_der+0x41a>
    }

    /* Set final sequence entry's next pointer to NULL */
    cur->next = NULL;
 80a7628:	f8cb 800c 	str.w	r8, [fp, #12]

    if( *p != end )
 80a762c:	f43f aeda 	beq.w	80a73e4 <mbedtls_x509_crt_parse_der+0x3c4>
 80a7630:	e018      	b.n	80a7664 <mbedtls_x509_crt_parse_der+0x644>

            cur->next = (mbedtls_asn1_sequence *)mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );

            if( cur->next == NULL )
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                        MBEDTLS_ERR_ASN1_ALLOC_FAILED );
 80a7632:	4816      	ldr	r0, [pc, #88]	; (80a768c <mbedtls_x509_crt_parse_der+0x66c>)
 80a7634:	e724      	b.n	80a7480 <mbedtls_x509_crt_parse_der+0x460>
static int x509_get_ns_cert_type( unsigned char **p,
                                       const unsigned char *end,
                                       unsigned char *ns_cert_type)
{
    int ret;
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 80a7636:	9017      	str	r0, [sp, #92]	; 0x5c
 80a7638:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
 80a763c:	9019      	str	r0, [sp, #100]	; 0x64

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 80a763e:	aa17      	add	r2, sp, #92	; 0x5c
 80a7640:	4629      	mov	r1, r5
 80a7642:	a806      	add	r0, sp, #24
 80a7644:	f7fa fa4e 	bl	80a1ae4 <mbedtls_asn1_get_bitstring>
 80a7648:	b120      	cbz	r0, 80a7654 <mbedtls_x509_crt_parse_der+0x634>
                return( ret );
            break;

        case MBEDTLS_X509_EXT_NS_CERT_TYPE:
            /* Parse netscape certificate type */
            if( ( ret = x509_get_ns_cert_type( p, end_ext_octet,
 80a764a:	f5b0 5014 	subs.w	r0, r0, #9472	; 0x2500
 80a764e:	f43f aec9 	beq.w	80a73e4 <mbedtls_x509_crt_parse_der+0x3c4>
 80a7652:	e715      	b.n	80a7480 <mbedtls_x509_crt_parse_der+0x460>
    mbedtls_x509_bitstring bs = { 0, 0, NULL };

    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    if( bs.len != 1 )
 80a7654:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a7656:	2b01      	cmp	r3, #1
 80a7658:	d10c      	bne.n	80a7674 <mbedtls_x509_crt_parse_der+0x654>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    /* Get actual bitstring */
    *ns_cert_type = *bs.p;
 80a765a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a765c:	781b      	ldrb	r3, [r3, #0]
 80a765e:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
 80a7662:	e6bf      	b.n	80a73e4 <mbedtls_x509_crt_parse_der+0x3c4>

        end_ext_octet = *p + len;

        if( end_ext_octet != end_ext_data )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                    MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80a7664:	4807      	ldr	r0, [pc, #28]	; (80a7684 <mbedtls_x509_crt_parse_der+0x664>)
 80a7666:	e70b      	b.n	80a7480 <mbedtls_x509_crt_parse_der+0x460>
#if !defined(MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION)
            if( is_critical )
            {
                /* Data is marked as critical: fail */
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                        MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 80a7668:	4809      	ldr	r0, [pc, #36]	; (80a7690 <mbedtls_x509_crt_parse_der+0x670>)
 80a766a:	e709      	b.n	80a7480 <mbedtls_x509_crt_parse_der+0x460>
            continue;
        }

        /* Forbid repeated extensions */
        if( ( crt->ext_types & ext_type ) != 0 )
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );
 80a766c:	4809      	ldr	r0, [pc, #36]	; (80a7694 <mbedtls_x509_crt_parse_der+0x674>)
 80a766e:	e707      	b.n	80a7480 <mbedtls_x509_crt_parse_der+0x460>
                    &crt->ns_cert_type ) ) != 0 )
                return( ret );
            break;

        default:
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE );
 80a7670:	4809      	ldr	r0, [pc, #36]	; (80a7698 <mbedtls_x509_crt_parse_der+0x678>)
 80a7672:	e705      	b.n	80a7480 <mbedtls_x509_crt_parse_der+0x460>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );

    /* Sequence length must be >= 1 */
    if( ext_key_usage->buf.p == NULL )
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
                MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 80a7674:	4809      	ldr	r0, [pc, #36]	; (80a769c <mbedtls_x509_crt_parse_der+0x67c>)
 80a7676:	e703      	b.n	80a7480 <mbedtls_x509_crt_parse_der+0x460>

        return( ret );
    }

    return( 0 );
}
 80a7678:	4628      	mov	r0, r5
 80a767a:	b01b      	add	sp, #108	; 0x6c
 80a767c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7680:	ffffdaa0 	.word	0xffffdaa0
 80a7684:	ffffda9a 	.word	0xffffda9a
 80a7688:	ffffd980 	.word	0xffffd980
 80a768c:	ffffda96 	.word	0xffffda96
 80a7690:	ffffda9e 	.word	0xffffda9e
 80a7694:	ffffdb00 	.word	0xffffdb00
 80a7698:	ffffdf80 	.word	0xffffdf80
 80a769c:	ffffda9c 	.word	0xffffda9c

080a76a0 <mbedtls_x509_crt_parse>:
/*
 * Parse one or more PEM certificates from a buffer and add them to the chained
 * list
 */
int mbedtls_x509_crt_parse( mbedtls_x509_crt *chain, const unsigned char *buf, size_t buflen )
{
 80a76a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a76a4:	460d      	mov	r5, r1
 80a76a6:	b088      	sub	sp, #32
 80a76a8:	4617      	mov	r7, r2
#endif

    /*
     * Check for valid input
     */
    if( chain == NULL || buf == NULL )
 80a76aa:	4681      	mov	r9, r0
 80a76ac:	2800      	cmp	r0, #0
 80a76ae:	d054      	beq.n	80a775a <mbedtls_x509_crt_parse+0xba>
 80a76b0:	2900      	cmp	r1, #0
 80a76b2:	d052      	beq.n	80a775a <mbedtls_x509_crt_parse+0xba>
    /*
     * Determine buffer content. Buffer contains either one DER certificate or
     * one or more PEM certificates.
     */
#if defined(MBEDTLS_PEM_PARSE_C)
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
 80a76b4:	2a00      	cmp	r2, #0
 80a76b6:	d054      	beq.n	80a7762 <mbedtls_x509_crt_parse+0xc2>
 80a76b8:	188b      	adds	r3, r1, r2
 80a76ba:	f813 4c01 	ldrb.w	r4, [r3, #-1]
 80a76be:	2c00      	cmp	r4, #0
 80a76c0:	d14f      	bne.n	80a7762 <mbedtls_x509_crt_parse+0xc2>
        strstr( (const char *) buf, "-----BEGIN CERTIFICATE-----" ) != NULL )
 80a76c2:	492c      	ldr	r1, [pc, #176]	; (80a7774 <mbedtls_x509_crt_parse+0xd4>)
 80a76c4:	4628      	mov	r0, r5
 80a76c6:	f007 fd58 	bl	80af17a <strstr>
    /*
     * Determine buffer content. Buffer contains either one DER certificate or
     * one or more PEM certificates.
     */
#if defined(MBEDTLS_PEM_PARSE_C)
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
 80a76ca:	2800      	cmp	r0, #0
 80a76cc:	d049      	beq.n	80a7762 <mbedtls_x509_crt_parse+0xc2>
 80a76ce:	46a0      	mov	r8, r4
 80a76d0:	46a2      	mov	sl, r4
    {
        int ret;
        mbedtls_pem_context pem;

        /* 1 rather than 0 since the terminating NULL byte is counted in */
        while( buflen > 1 )
 80a76d2:	2f01      	cmp	r7, #1
 80a76d4:	d938      	bls.n	80a7748 <mbedtls_x509_crt_parse+0xa8>
        {
            size_t use_len;
            mbedtls_pem_init( &pem );
 80a76d6:	a805      	add	r0, sp, #20
 80a76d8:	f005 f9be 	bl	80aca58 <mbedtls_pem_init>

            /* If we get there, we know the string is null-terminated */
            ret = mbedtls_pem_read_buffer( &pem,
                           "-----BEGIN CERTIFICATE-----",
                           "-----END CERTIFICATE-----",
                           buf, NULL, 0, &use_len );
 80a76dc:	ab04      	add	r3, sp, #16
 80a76de:	9302      	str	r3, [sp, #8]
 80a76e0:	2300      	movs	r3, #0
 80a76e2:	9301      	str	r3, [sp, #4]
 80a76e4:	9300      	str	r3, [sp, #0]
 80a76e6:	4a24      	ldr	r2, [pc, #144]	; (80a7778 <mbedtls_x509_crt_parse+0xd8>)
 80a76e8:	462b      	mov	r3, r5
 80a76ea:	4922      	ldr	r1, [pc, #136]	; (80a7774 <mbedtls_x509_crt_parse+0xd4>)
 80a76ec:	a805      	add	r0, sp, #20
 80a76ee:	f005 f9b9 	bl	80aca64 <mbedtls_pem_read_buffer>

            if( ret == 0 )
 80a76f2:	4606      	mov	r6, r0
 80a76f4:	b968      	cbnz	r0, 80a7712 <mbedtls_x509_crt_parse+0x72>
            {
                /*
                 * Was PEM encoded
                 */
                buflen -= use_len;
 80a76f6:	9b04      	ldr	r3, [sp, #16]
                continue;
            }
            else
                break;

            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
 80a76f8:	9a06      	ldr	r2, [sp, #24]
 80a76fa:	9905      	ldr	r1, [sp, #20]
 80a76fc:	4648      	mov	r0, r9
            if( ret == 0 )
            {
                /*
                 * Was PEM encoded
                 */
                buflen -= use_len;
 80a76fe:	1aff      	subs	r7, r7, r3
                buf += use_len;
 80a7700:	441d      	add	r5, r3
                continue;
            }
            else
                break;

            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
 80a7702:	f7ff fc8d 	bl	80a7020 <mbedtls_x509_crt_parse_der>
 80a7706:	4606      	mov	r6, r0

            mbedtls_pem_free( &pem );
 80a7708:	a805      	add	r0, sp, #20
 80a770a:	f005 fa39 	bl	80acb80 <mbedtls_pem_free>

            if( ret != 0 )
 80a770e:	b96e      	cbnz	r6, 80a772c <mbedtls_x509_crt_parse+0x8c>
 80a7710:	e015      	b.n	80a773e <mbedtls_x509_crt_parse+0x9e>
                 * Was PEM encoded
                 */
                buflen -= use_len;
                buf += use_len;
            }
            else if( ret == MBEDTLS_ERR_PEM_BAD_INPUT_DATA )
 80a7712:	f510 5fa4 	cmn.w	r0, #5248	; 0x1480
 80a7716:	d015      	beq.n	80a7744 <mbedtls_x509_crt_parse+0xa4>
            {
                return( ret );
            }
            else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 80a7718:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 80a771c:	d014      	beq.n	80a7748 <mbedtls_x509_crt_parse+0xa8>
            {
                mbedtls_pem_free( &pem );
 80a771e:	a805      	add	r0, sp, #20
 80a7720:	f005 fa2e 	bl	80acb80 <mbedtls_pem_free>

                /*
                 * PEM header and footer were found
                 */
                buflen -= use_len;
 80a7724:	9b04      	ldr	r3, [sp, #16]
 80a7726:	1aff      	subs	r7, r7, r3
                buf += use_len;
 80a7728:	441d      	add	r5, r3
 80a772a:	e002      	b.n	80a7732 <mbedtls_x509_crt_parse+0x92>
            if( ret != 0 )
            {
                /*
                 * Quit parsing on a memory error
                 */
                if( ret == MBEDTLS_ERR_X509_ALLOC_FAILED )
 80a772c:	f516 5f22 	cmn.w	r6, #10368	; 0x2880
 80a7730:	d008      	beq.n	80a7744 <mbedtls_x509_crt_parse+0xa4>
                    return( ret );

                if( first_error == 0 )
 80a7732:	f1b8 0f00 	cmp.w	r8, #0
 80a7736:	bf08      	it	eq
 80a7738:	46b0      	moveq	r8, r6
                    first_error = ret;

                total_failed++;
 80a773a:	3401      	adds	r4, #1
                continue;
 80a773c:	e7c9      	b.n	80a76d2 <mbedtls_x509_crt_parse+0x32>
            }

            success = 1;
 80a773e:	f04f 0a01 	mov.w	sl, #1
 80a7742:	e7c6      	b.n	80a76d2 <mbedtls_x509_crt_parse+0x32>
 80a7744:	4630      	mov	r0, r6
 80a7746:	e011      	b.n	80a776c <mbedtls_x509_crt_parse+0xcc>
        }
    }

    if( success )
 80a7748:	f1ba 0f00 	cmp.w	sl, #0
 80a774c:	d107      	bne.n	80a775e <mbedtls_x509_crt_parse+0xbe>
        return( total_failed );
    else if( first_error )
 80a774e:	480b      	ldr	r0, [pc, #44]	; (80a777c <mbedtls_x509_crt_parse+0xdc>)
 80a7750:	f1b8 0f00 	cmp.w	r8, #0
 80a7754:	bf18      	it	ne
 80a7756:	4640      	movne	r0, r8
 80a7758:	e008      	b.n	80a776c <mbedtls_x509_crt_parse+0xcc>

    /*
     * Check for valid input
     */
    if( chain == NULL || buf == NULL )
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 80a775a:	4809      	ldr	r0, [pc, #36]	; (80a7780 <mbedtls_x509_crt_parse+0xe0>)
 80a775c:	e006      	b.n	80a776c <mbedtls_x509_crt_parse+0xcc>
 80a775e:	4620      	mov	r0, r4
 80a7760:	e004      	b.n	80a776c <mbedtls_x509_crt_parse+0xcc>
    {
        buf_format = MBEDTLS_X509_FORMAT_PEM;
    }

    if( buf_format == MBEDTLS_X509_FORMAT_DER )
        return mbedtls_x509_crt_parse_der( chain, buf, buflen );
 80a7762:	463a      	mov	r2, r7
 80a7764:	4629      	mov	r1, r5
 80a7766:	4648      	mov	r0, r9
 80a7768:	f7ff fc5a 	bl	80a7020 <mbedtls_x509_crt_parse_der>
    else if( first_error )
        return( first_error );
    else
        return( MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT );
#endif /* MBEDTLS_PEM_PARSE_C */
}
 80a776c:	b008      	add	sp, #32
 80a776e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a7772:	bf00      	nop
 80a7774:	080b0bc1 	.word	0x080b0bc1
 80a7778:	080b0bdd 	.word	0x080b0bdd
 80a777c:	ffffd880 	.word	0xffffd880
 80a7780:	ffffd800 	.word	0xffffd800

080a7784 <_ZL15mbedtls_zeroizePvj>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
#include "mbedtls/oid.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 80a7784:	4401      	add	r1, r0
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80a7786:	2300      	movs	r3, #0
 80a7788:	4288      	cmp	r0, r1
 80a778a:	d002      	beq.n	80a7792 <_ZL15mbedtls_zeroizePvj+0xe>
 80a778c:	7003      	strb	r3, [r0, #0]
 80a778e:	3001      	adds	r0, #1
 80a7790:	e7fa      	b.n	80a7788 <_ZL15mbedtls_zeroizePvj+0x4>
 80a7792:	4770      	bx	lr

080a7794 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>:
 * Start a timer.
 * Passing millisecs = 0 cancels a running timer.
 */
static void ssl_set_timer( mbedtls_ssl_context *ssl, uint32_t millisecs )
{
    if( ssl->f_set_timer == NULL )
 80a7794:	6c83      	ldr	r3, [r0, #72]	; 0x48
/*
 * Start a timer.
 * Passing millisecs = 0 cancels a running timer.
 */
static void ssl_set_timer( mbedtls_ssl_context *ssl, uint32_t millisecs )
{
 80a7796:	460a      	mov	r2, r1
    if( ssl->f_set_timer == NULL )
 80a7798:	b113      	cbz	r3, 80a77a0 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm+0xc>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "set_timer to %d ms", (int) millisecs ) );
    ssl->f_set_timer( ssl->p_timer, millisecs / 4, millisecs );
 80a779a:	0889      	lsrs	r1, r1, #2
 80a779c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80a779e:	4718      	bx	r3
 80a77a0:	4770      	bx	lr
	...

080a77a4 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi>:

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_calc_finished_tls_sha256(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 80a77a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    int len = 12;
    const char *sender;
    mbedtls_sha256_context sha256;
    unsigned char padbuf[32];

    mbedtls_ssl_session *session = ssl->session_negotiate;
 80a77a6:	6ac5      	ldr	r5, [r0, #44]	; 0x2c

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_calc_finished_tls_sha256(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 80a77a8:	b0a9      	sub	sp, #164	; 0xa4
 80a77aa:	4604      	mov	r4, r0
 80a77ac:	460f      	mov	r7, r1
 80a77ae:	4616      	mov	r6, r2
    const char *sender;
    mbedtls_sha256_context sha256;
    unsigned char padbuf[32];

    mbedtls_ssl_session *session = ssl->session_negotiate;
    if( !session )
 80a77b0:	b905      	cbnz	r5, 80a77b4 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x10>
        session = ssl->session;
 80a77b2:	6a85      	ldr	r5, [r0, #40]	; 0x28

    mbedtls_sha256_init( &sha256 );
 80a77b4:	a80d      	add	r0, sp, #52	; 0x34
 80a77b6:	f7f9 f93d 	bl	80a0a34 <mbedtls_sha256_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha256" ) );

    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 80a77ba:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80a77bc:	a80d      	add	r0, sp, #52	; 0x34
 80a77be:	3118      	adds	r1, #24
 80a77c0:	f7f9 f946 	bl	80a0a50 <mbedtls_sha256_clone>
                   sha256.state, sizeof( sha256.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
 80a77c4:	4b10      	ldr	r3, [pc, #64]	; (80a7808 <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x64>)
 80a77c6:	4911      	ldr	r1, [pc, #68]	; (80a780c <_ZL28ssl_calc_finished_tls_sha256P19mbedtls_ssl_contextPhi+0x68>)

    mbedtls_sha256_finish_ret( &sha256, padbuf );
 80a77c8:	a80d      	add	r0, sp, #52	; 0x34
                   sha256.state, sizeof( sha256.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
 80a77ca:	2e00      	cmp	r6, #0
 80a77cc:	bf0c      	ite	eq
 80a77ce:	461e      	moveq	r6, r3
 80a77d0:	460e      	movne	r6, r1

    mbedtls_sha256_finish_ret( &sha256, padbuf );
 80a77d2:	a905      	add	r1, sp, #20
 80a77d4:	f7f9 fd36 	bl	80a1244 <mbedtls_sha256_finish_ret>

    ssl->handshake->tls_prf( session->master, 48, sender,
 80a77d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
                             padbuf, 32, buf, len );
 80a77da:	220c      	movs	r2, #12
 80a77dc:	2420      	movs	r4, #32
 80a77de:	9202      	str	r2, [sp, #8]
 80a77e0:	9701      	str	r7, [sp, #4]
 80a77e2:	9400      	str	r4, [sp, #0]
 80a77e4:	4632      	mov	r2, r6
 80a77e6:	f8d3 716c 	ldr.w	r7, [r3, #364]	; 0x16c
 80a77ea:	2130      	movs	r1, #48	; 0x30
 80a77ec:	ab05      	add	r3, sp, #20
 80a77ee:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 80a77f2:	47b8      	blx	r7

    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );

    mbedtls_sha256_free( &sha256 );
 80a77f4:	a80d      	add	r0, sp, #52	; 0x34
 80a77f6:	f7f9 f921 	bl	80a0a3c <mbedtls_sha256_free>

    mbedtls_zeroize(  padbuf, sizeof(  padbuf ) );
 80a77fa:	4621      	mov	r1, r4
 80a77fc:	a805      	add	r0, sp, #20
 80a77fe:	f7ff ffc1 	bl	80a7784 <_ZL15mbedtls_zeroizePvj>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
}
 80a7802:	b029      	add	sp, #164	; 0xa4
 80a7804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a7806:	bf00      	nop
 80a7808:	080b0fec 	.word	0x080b0fec
 80a780c:	080b0ffc 	.word	0x080b0ffc

080a7810 <_ZL26ssl_calc_verify_tls_sha256P19mbedtls_ssl_contextPh>:
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 */

#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
void ssl_calc_verify_tls_sha256( mbedtls_ssl_context *ssl, unsigned char hash[32] )
{
 80a7810:	b530      	push	{r4, r5, lr}
 80a7812:	4605      	mov	r5, r0
 80a7814:	460c      	mov	r4, r1
 80a7816:	b09d      	sub	sp, #116	; 0x74
    mbedtls_sha256_context sha256;

    mbedtls_sha256_init( &sha256 );
 80a7818:	a801      	add	r0, sp, #4
 80a781a:	f7f9 f90b 	bl	80a0a34 <mbedtls_sha256_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha256" ) );

    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 80a781e:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80a7820:	a801      	add	r0, sp, #4
 80a7822:	3118      	adds	r1, #24
 80a7824:	f7f9 f914 	bl	80a0a50 <mbedtls_sha256_clone>
    mbedtls_sha256_finish_ret( &sha256, hash );
 80a7828:	4621      	mov	r1, r4
 80a782a:	a801      	add	r0, sp, #4
 80a782c:	f7f9 fd0a 	bl	80a1244 <mbedtls_sha256_finish_ret>

    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 32 );
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );

    mbedtls_sha256_free( &sha256 );
 80a7830:	a801      	add	r0, sp, #4
 80a7832:	f7f9 f903 	bl	80a0a3c <mbedtls_sha256_free>

    return;
}
 80a7836:	b01d      	add	sp, #116	; 0x74
 80a7838:	bd30      	pop	{r4, r5, pc}
	...

080a783c <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>:
static int tls_prf_generic( mbedtls_md_type_t md_type,
                            const unsigned char *secret, size_t slen,
                            const char *label,
                            const unsigned char *random, size_t rlen,
                            unsigned char *dstbuf, size_t dlen )
{
 80a783c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a7840:	4604      	mov	r4, r0
 80a7842:	b0b7      	sub	sp, #220	; 0xdc
    unsigned char h_i[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    int ret;

    mbedtls_md_init( &md_ctx );
 80a7844:	a803      	add	r0, sp, #12
static int tls_prf_generic( mbedtls_md_type_t md_type,
                            const unsigned char *secret, size_t slen,
                            const char *label,
                            const unsigned char *random, size_t rlen,
                            unsigned char *dstbuf, size_t dlen )
{
 80a7846:	468a      	mov	sl, r1
 80a7848:	4693      	mov	fp, r2
 80a784a:	4699      	mov	r9, r3
 80a784c:	9e43      	ldr	r6, [sp, #268]	; 0x10c
    unsigned char h_i[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    int ret;

    mbedtls_md_init( &md_ctx );
 80a784e:	f7fe fa6d 	bl	80a5d2c <mbedtls_md_init>

    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
 80a7852:	4620      	mov	r0, r4
 80a7854:	f7fe fa5e 	bl	80a5d14 <mbedtls_md_info_from_type>
 80a7858:	4607      	mov	r7, r0
 80a785a:	2800      	cmp	r0, #0
 80a785c:	d073      	beq.n	80a7946 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x10a>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );

    md_len = mbedtls_md_get_size( md_info );
 80a785e:	f7fe fb93 	bl	80a5f88 <mbedtls_md_get_size>
 80a7862:	4604      	mov	r4, r0

    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
 80a7864:	4648      	mov	r0, r9
 80a7866:	f007 fc80 	bl	80af16a <strlen>
 80a786a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80a786c:	1823      	adds	r3, r4, r0
 80a786e:	189a      	adds	r2, r3, r2
 80a7870:	2a80      	cmp	r2, #128	; 0x80
 80a7872:	4605      	mov	r5, r0
 80a7874:	9301      	str	r3, [sp, #4]
 80a7876:	d868      	bhi.n	80a794a <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x10e>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
 80a7878:	ab16      	add	r3, sp, #88	; 0x58
 80a787a:	eb03 0804 	add.w	r8, r3, r4
 80a787e:	4602      	mov	r2, r0
 80a7880:	4649      	mov	r1, r9
 80a7882:	4640      	mov	r0, r8
 80a7884:	f007 fc35 	bl	80af0f2 <memcpy>
    memcpy( tmp + md_len + nb, random, rlen );
 80a7888:	9b01      	ldr	r3, [sp, #4]
 80a788a:	a816      	add	r0, sp, #88	; 0x58
 80a788c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80a788e:	9940      	ldr	r1, [sp, #256]	; 0x100
 80a7890:	4418      	add	r0, r3
 80a7892:	f007 fc2e 	bl	80af0f2 <memcpy>
    nb += rlen;

    /*
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
 80a7896:	4639      	mov	r1, r7
 80a7898:	2201      	movs	r2, #1
 80a789a:	a803      	add	r0, sp, #12
 80a789c:	f7fe fa6c 	bl	80a5d78 <mbedtls_md_setup>
 80a78a0:	4607      	mov	r7, r0
 80a78a2:	2800      	cmp	r0, #0
 80a78a4:	d152      	bne.n	80a794c <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x110>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
    memcpy( tmp + md_len + nb, random, rlen );
    nb += rlen;
 80a78a6:	9b41      	ldr	r3, [sp, #260]	; 0x104
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
        return( ret );

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
 80a78a8:	465a      	mov	r2, fp
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
    memcpy( tmp + md_len + nb, random, rlen );
    nb += rlen;
 80a78aa:	441d      	add	r5, r3
     * Compute P_<hash>(secret, label + random)[0..dlen]
     */
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
        return( ret );

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
 80a78ac:	4651      	mov	r1, sl
 80a78ae:	a803      	add	r0, sp, #12
 80a78b0:	f7fe fab2 	bl	80a5e18 <mbedtls_md_hmac_starts>
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
 80a78b4:	462a      	mov	r2, r5
 80a78b6:	4641      	mov	r1, r8
 80a78b8:	a803      	add	r0, sp, #12
 80a78ba:	f7fe fb0d 	bl	80a5ed8 <mbedtls_md_hmac_update>
    mbedtls_md_hmac_finish( &md_ctx, tmp );
 80a78be:	a916      	add	r1, sp, #88	; 0x58
 80a78c0:	a803      	add	r0, sp, #12
 80a78c2:	f7fe fb19 	bl	80a5ef8 <mbedtls_md_hmac_finish>

    for( i = 0; i < dlen; i += md_len )
 80a78c6:	46b9      	mov	r9, r7
 80a78c8:	f10d 0818 	add.w	r8, sp, #24
    {
        mbedtls_md_hmac_reset ( &md_ctx );
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
 80a78cc:	4425      	add	r5, r4

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
    mbedtls_md_hmac_finish( &md_ctx, tmp );

    for( i = 0; i < dlen; i += md_len )
 80a78ce:	45b1      	cmp	r9, r6

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
    }

    mbedtls_md_free( &md_ctx );
 80a78d0:	a803      	add	r0, sp, #12

    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
    mbedtls_md_hmac_finish( &md_ctx, tmp );

    for( i = 0; i < dlen; i += md_len )
 80a78d2:	d22c      	bcs.n	80a792e <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xf2>
    {
        mbedtls_md_hmac_reset ( &md_ctx );
 80a78d4:	f7fe fb40 	bl	80a5f58 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
 80a78d8:	462a      	mov	r2, r5
 80a78da:	a916      	add	r1, sp, #88	; 0x58
 80a78dc:	a803      	add	r0, sp, #12
 80a78de:	f7fe fafb 	bl	80a5ed8 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, h_i );
 80a78e2:	4641      	mov	r1, r8
 80a78e4:	a803      	add	r0, sp, #12
 80a78e6:	f7fe fb07 	bl	80a5ef8 <mbedtls_md_hmac_finish>

        mbedtls_md_hmac_reset ( &md_ctx );
 80a78ea:	a803      	add	r0, sp, #12
 80a78ec:	f7fe fb34 	bl	80a5f58 <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
 80a78f0:	4622      	mov	r2, r4
 80a78f2:	a916      	add	r1, sp, #88	; 0x58
 80a78f4:	a803      	add	r0, sp, #12
 80a78f6:	f7fe faef 	bl	80a5ed8 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, tmp );
 80a78fa:	a916      	add	r1, sp, #88	; 0x58
 80a78fc:	a803      	add	r0, sp, #12
 80a78fe:	f7fe fafb 	bl	80a5ef8 <mbedtls_md_hmac_finish>

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
 80a7902:	eb09 0104 	add.w	r1, r9, r4
 80a7906:	428e      	cmp	r6, r1
 80a7908:	bf36      	itet	cc
 80a790a:	fbb6 f2f4 	udivcc	r2, r6, r4
 80a790e:	4622      	movcs	r2, r4
 80a7910:	fb04 6212 	mlscc	r2, r4, r2, r6

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
 80a7914:	9842      	ldr	r0, [sp, #264]	; 0x108
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;

        for( j = 0; j < k; j++ )
 80a7916:	2300      	movs	r3, #0
            dstbuf[i + j]  = h_i[j];
 80a7918:	4481      	add	r9, r0
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;

        for( j = 0; j < k; j++ )
 80a791a:	4293      	cmp	r3, r2
 80a791c:	d101      	bne.n	80a7922 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xe6>

        mbedtls_md_hmac_reset ( &md_ctx );
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
 80a791e:	4689      	mov	r9, r1
 80a7920:	e7d5      	b.n	80a78ce <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x92>

        for( j = 0; j < k; j++ )
            dstbuf[i + j]  = h_i[j];
 80a7922:	f818 0003 	ldrb.w	r0, [r8, r3]
 80a7926:	f809 0003 	strb.w	r0, [r9, r3]
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
        mbedtls_md_hmac_finish( &md_ctx, tmp );

        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;

        for( j = 0; j < k; j++ )
 80a792a:	3301      	adds	r3, #1
 80a792c:	e7f5      	b.n	80a791a <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0xde>
            dstbuf[i + j]  = h_i[j];
    }

    mbedtls_md_free( &md_ctx );
 80a792e:	f7fe fa02 	bl	80a5d36 <mbedtls_md_free>

    mbedtls_zeroize( tmp, sizeof( tmp ) );
 80a7932:	2180      	movs	r1, #128	; 0x80
 80a7934:	a816      	add	r0, sp, #88	; 0x58
 80a7936:	f7ff ff25 	bl	80a7784 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( h_i, sizeof( h_i ) );
 80a793a:	4640      	mov	r0, r8
 80a793c:	2140      	movs	r1, #64	; 0x40
 80a793e:	f7ff ff21 	bl	80a7784 <_ZL15mbedtls_zeroizePvj>

    return( 0 );
 80a7942:	2000      	movs	r0, #0
 80a7944:	e002      	b.n	80a794c <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x110>
    int ret;

    mbedtls_md_init( &md_ctx );

    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80a7946:	4803      	ldr	r0, [pc, #12]	; (80a7954 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x118>)
 80a7948:	e000      	b.n	80a794c <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x110>

    md_len = mbedtls_md_get_size( md_info );

    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80a794a:	4803      	ldr	r0, [pc, #12]	; (80a7958 <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj+0x11c>)

    mbedtls_zeroize( tmp, sizeof( tmp ) );
    mbedtls_zeroize( h_i, sizeof( h_i ) );

    return( 0 );
}
 80a794c:	b037      	add	sp, #220	; 0xdc
 80a794e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7952:	bf00      	nop
 80a7954:	ffff9400 	.word	0xffff9400
 80a7958:	ffff8f00 	.word	0xffff8f00

080a795c <_ZL14tls_prf_sha256PKhjPKcS0_jPhj>:
#if defined(MBEDTLS_SHA256_C)
static int tls_prf_sha256( const unsigned char *secret, size_t slen,
                           const char *label,
                           const unsigned char *random, size_t rlen,
                           unsigned char *dstbuf, size_t dlen )
{
 80a795c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA256, secret, slen,
                             label, random, rlen, dstbuf, dlen ) );
 80a795e:	9c08      	ldr	r4, [sp, #32]
 80a7960:	9403      	str	r4, [sp, #12]
 80a7962:	9c07      	ldr	r4, [sp, #28]
 80a7964:	9402      	str	r4, [sp, #8]
 80a7966:	9c06      	ldr	r4, [sp, #24]
 80a7968:	e88d 0018 	stmia.w	sp, {r3, r4}
 80a796c:	4613      	mov	r3, r2
 80a796e:	460a      	mov	r2, r1
 80a7970:	4601      	mov	r1, r0
 80a7972:	2006      	movs	r0, #6
 80a7974:	f7ff ff62 	bl	80a783c <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>
}
 80a7978:	b004      	add	sp, #16
 80a797a:	bd10      	pop	{r4, pc}

080a797c <_ZL14tls_prf_sha384PKhjPKcS0_jPhj>:
#if defined(MBEDTLS_SHA512_C)
static int tls_prf_sha384( const unsigned char *secret, size_t slen,
                           const char *label,
                           const unsigned char *random, size_t rlen,
                           unsigned char *dstbuf, size_t dlen )
{
 80a797c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA384, secret, slen,
                             label, random, rlen, dstbuf, dlen ) );
 80a797e:	9c08      	ldr	r4, [sp, #32]
 80a7980:	9403      	str	r4, [sp, #12]
 80a7982:	9c07      	ldr	r4, [sp, #28]
 80a7984:	9402      	str	r4, [sp, #8]
 80a7986:	9c06      	ldr	r4, [sp, #24]
 80a7988:	e88d 0018 	stmia.w	sp, {r3, r4}
 80a798c:	4613      	mov	r3, r2
 80a798e:	460a      	mov	r2, r1
 80a7990:	4601      	mov	r1, r0
 80a7992:	2007      	movs	r0, #7
 80a7994:	f7ff ff52 	bl	80a783c <_ZL15tls_prf_generic17mbedtls_md_type_tPKhjPKcS1_jPhj>
}
 80a7998:	b004      	add	sp, #16
 80a799a:	bd10      	pop	{r4, pc}

080a799c <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi>:
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
static void ssl_calc_finished_tls_sha384(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 80a799c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int len = 12;
    const char *sender;
    mbedtls_sha512_context sha512;
    unsigned char padbuf[48];

    mbedtls_ssl_session *session = ssl->session_negotiate;
 80a799e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
static void ssl_calc_finished_tls_sha384(
                mbedtls_ssl_context *ssl, unsigned char *buf, int from )
{
 80a79a0:	b0c7      	sub	sp, #284	; 0x11c
 80a79a2:	4604      	mov	r4, r0
 80a79a4:	460f      	mov	r7, r1
 80a79a6:	4616      	mov	r6, r2
    const char *sender;
    mbedtls_sha512_context sha512;
    unsigned char padbuf[48];

    mbedtls_ssl_session *session = ssl->session_negotiate;
    if( !session )
 80a79a8:	b905      	cbnz	r5, 80a79ac <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x10>
        session = ssl->session;
 80a79aa:	6a85      	ldr	r5, [r0, #40]	; 0x28

    mbedtls_sha512_init( &sha512 );
 80a79ac:	a810      	add	r0, sp, #64	; 0x40
 80a79ae:	f003 ffc7 	bl	80ab940 <mbedtls_sha512_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha384" ) );

    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
 80a79b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80a79b4:	a810      	add	r0, sp, #64	; 0x40
 80a79b6:	3188      	adds	r1, #136	; 0x88
 80a79b8:	f003 ffd0 	bl	80ab95c <mbedtls_sha512_clone>
                   sha512.state, sizeof( sha512.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
 80a79bc:	4b10      	ldr	r3, [pc, #64]	; (80a7a00 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x64>)
 80a79be:	4911      	ldr	r1, [pc, #68]	; (80a7a04 <_ZL28ssl_calc_finished_tls_sha384P19mbedtls_ssl_contextPhi+0x68>)

    mbedtls_sha512_finish_ret( &sha512, padbuf );
 80a79c0:	a810      	add	r0, sp, #64	; 0x40
                   sha512.state, sizeof( sha512.state ) );
#endif

    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
             ? "client finished"
             : "server finished";
 80a79c2:	2e00      	cmp	r6, #0
 80a79c4:	bf0c      	ite	eq
 80a79c6:	461e      	moveq	r6, r3
 80a79c8:	460e      	movne	r6, r1

    mbedtls_sha512_finish_ret( &sha512, padbuf );
 80a79ca:	a904      	add	r1, sp, #16
 80a79cc:	f004 fef0 	bl	80ac7b0 <mbedtls_sha512_finish_ret>

    ssl->handshake->tls_prf( session->master, 48, sender,
 80a79d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
                             padbuf, 48, buf, len );
 80a79d2:	220c      	movs	r2, #12
 80a79d4:	2430      	movs	r4, #48	; 0x30
 80a79d6:	9202      	str	r2, [sp, #8]
 80a79d8:	9701      	str	r7, [sp, #4]
 80a79da:	9400      	str	r4, [sp, #0]
 80a79dc:	4632      	mov	r2, r6
 80a79de:	4621      	mov	r1, r4
 80a79e0:	f8d3 716c 	ldr.w	r7, [r3, #364]	; 0x16c
 80a79e4:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 80a79e8:	ab04      	add	r3, sp, #16
 80a79ea:	47b8      	blx	r7

    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );

    mbedtls_sha512_free( &sha512 );
 80a79ec:	a810      	add	r0, sp, #64	; 0x40
 80a79ee:	f003 ffab 	bl	80ab948 <mbedtls_sha512_free>

    mbedtls_zeroize(  padbuf, sizeof( padbuf ) );
 80a79f2:	4621      	mov	r1, r4
 80a79f4:	a804      	add	r0, sp, #16
 80a79f6:	f7ff fec5 	bl	80a7784 <_ZL15mbedtls_zeroizePvj>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
}
 80a79fa:	b047      	add	sp, #284	; 0x11c
 80a79fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a79fe:	bf00      	nop
 80a7a00:	080b0fec 	.word	0x080b0fec
 80a7a04:	080b0ffc 	.word	0x080b0ffc

080a7a08 <_ZL26ssl_calc_verify_tls_sha384P19mbedtls_ssl_contextPh>:
}
#endif /* MBEDTLS_SHA256_C */

#if defined(MBEDTLS_SHA512_C)
void ssl_calc_verify_tls_sha384( mbedtls_ssl_context *ssl, unsigned char hash[48] )
{
 80a7a08:	b530      	push	{r4, r5, lr}
 80a7a0a:	4605      	mov	r5, r0
 80a7a0c:	460c      	mov	r4, r1
 80a7a0e:	b0b7      	sub	sp, #220	; 0xdc
    mbedtls_sha512_context sha512;

    mbedtls_sha512_init( &sha512 );
 80a7a10:	4668      	mov	r0, sp
 80a7a12:	f003 ff95 	bl	80ab940 <mbedtls_sha512_init>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha384" ) );

    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
 80a7a16:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80a7a18:	4668      	mov	r0, sp
 80a7a1a:	3188      	adds	r1, #136	; 0x88
 80a7a1c:	f003 ff9e 	bl	80ab95c <mbedtls_sha512_clone>
    mbedtls_sha512_finish_ret( &sha512, hash );
 80a7a20:	4621      	mov	r1, r4
 80a7a22:	4668      	mov	r0, sp
 80a7a24:	f004 fec4 	bl	80ac7b0 <mbedtls_sha512_finish_ret>

    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 48 );
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );

    mbedtls_sha512_free( &sha512 );
 80a7a28:	4668      	mov	r0, sp
 80a7a2a:	f003 ff8d 	bl	80ab948 <mbedtls_sha512_free>

    return;
}
 80a7a2e:	b037      	add	sp, #220	; 0xdc
 80a7a30:	bd30      	pop	{r4, r5, pc}
	...

080a7a34 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context>:

/* Append a new keycert entry to a (possibly empty) list */
static int ssl_append_key_cert( mbedtls_ssl_key_cert **head,
                                mbedtls_x509_crt *cert,
                                mbedtls_pk_context *key )
{
 80a7a34:	b570      	push	{r4, r5, r6, lr}
 80a7a36:	4604      	mov	r4, r0
 80a7a38:	460e      	mov	r6, r1
    mbedtls_ssl_key_cert *new_cert;

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
 80a7a3a:	2001      	movs	r0, #1
 80a7a3c:	210c      	movs	r1, #12

/* Append a new keycert entry to a (possibly empty) list */
static int ssl_append_key_cert( mbedtls_ssl_key_cert **head,
                                mbedtls_x509_crt *cert,
                                mbedtls_pk_context *key )
{
 80a7a3e:	4615      	mov	r5, r2
    mbedtls_ssl_key_cert *new_cert;

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
 80a7a40:	f007 fb32 	bl	80af0a8 <calloc>
    if( new_cert == NULL )
 80a7a44:	b178      	cbz	r0, 80a7a66 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x32>
    new_cert->cert = cert;
    new_cert->key  = key;
    new_cert->next = NULL;

    /* Update head is the list was null, else add to the end */
    if( *head == NULL )
 80a7a46:	6822      	ldr	r2, [r4, #0]
    if( new_cert == NULL )
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

    new_cert->cert = cert;
    new_cert->key  = key;
    new_cert->next = NULL;
 80a7a48:	2300      	movs	r3, #0

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
    if( new_cert == NULL )
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

    new_cert->cert = cert;
 80a7a4a:	6006      	str	r6, [r0, #0]
    new_cert->key  = key;
 80a7a4c:	6045      	str	r5, [r0, #4]
    new_cert->next = NULL;
 80a7a4e:	6083      	str	r3, [r0, #8]

    /* Update head is the list was null, else add to the end */
    if( *head == NULL )
 80a7a50:	b912      	cbnz	r2, 80a7a58 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x24>
    {
        *head = new_cert;
 80a7a52:	6020      	str	r0, [r4, #0]
        while( cur->next != NULL )
            cur = cur->next;
        cur->next = new_cert;
    }

    return( 0 );
 80a7a54:	4610      	mov	r0, r2
 80a7a56:	bd70      	pop	{r4, r5, r6, pc}
        *head = new_cert;
    }
    else
    {
        mbedtls_ssl_key_cert *cur = *head;
        while( cur->next != NULL )
 80a7a58:	6893      	ldr	r3, [r2, #8]
 80a7a5a:	b10b      	cbz	r3, 80a7a60 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x2c>
 80a7a5c:	461a      	mov	r2, r3
 80a7a5e:	e7fb      	b.n	80a7a58 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x24>
            cur = cur->next;
        cur->next = new_cert;
 80a7a60:	6090      	str	r0, [r2, #8]
    }

    return( 0 );
 80a7a62:	4618      	mov	r0, r3
 80a7a64:	bd70      	pop	{r4, r5, r6, pc}
{
    mbedtls_ssl_key_cert *new_cert;

    new_cert = (mbedtls_ssl_key_cert *)mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
    if( new_cert == NULL )
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 80a7a66:	4801      	ldr	r0, [pc, #4]	; (80a7a6c <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context+0x38>)
            cur = cur->next;
        cur->next = new_cert;
    }

    return( 0 );
}
 80a7a68:	bd70      	pop	{r4, r5, r6, pc}
 80a7a6a:	bf00      	nop
 80a7a6c:	ffff8100 	.word	0xffff8100

080a7a70 <_ZL26ssl_update_checksum_sha256P19mbedtls_ssl_contextPKhj>:
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
static void ssl_update_checksum_sha256( mbedtls_ssl_context *ssl,
                                        const unsigned char *buf, size_t len )
{
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
 80a7a70:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80a7a72:	3018      	adds	r0, #24
 80a7a74:	f7f9 bbac 	b.w	80a11d0 <mbedtls_sha256_update_ret>

080a7a78 <_ZL26ssl_update_checksum_sha384P19mbedtls_ssl_contextPKhj>:

#if defined(MBEDTLS_SHA512_C)
static void ssl_update_checksum_sha384( mbedtls_ssl_context *ssl,
                                        const unsigned char *buf, size_t len )
{
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
 80a7a78:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80a7a7a:	3088      	adds	r0, #136	; 0x88
 80a7a7c:	f004 be50 	b.w	80ac720 <mbedtls_sha512_update_ret>

080a7a80 <_ZL25ssl_update_checksum_startP19mbedtls_ssl_contextPKhj>:
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
}

static void ssl_update_checksum_start( mbedtls_ssl_context *ssl,
                                       const unsigned char *buf, size_t len )
{
 80a7a80:	b570      	push	{r4, r5, r6, lr}
 80a7a82:	4604      	mov	r4, r0
 80a7a84:	460d      	mov	r5, r1
 80a7a86:	4616      	mov	r6, r2
     mbedtls_md5_update_ret( &ssl->handshake->fin_md5 , buf, len );
    mbedtls_sha1_update_ret( &ssl->handshake->fin_sha1, buf, len );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
 80a7a88:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80a7a8a:	3018      	adds	r0, #24
 80a7a8c:	f7f9 fba0 	bl	80a11d0 <mbedtls_sha256_update_ret>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
 80a7a90:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80a7a92:	4632      	mov	r2, r6
 80a7a94:	4629      	mov	r1, r5
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
}
 80a7a96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_update_ret( &ssl->handshake->fin_sha256, buf, len );
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_update_ret( &ssl->handshake->fin_sha512, buf, len );
 80a7a9a:	3088      	adds	r0, #136	; 0x88
 80a7a9c:	f004 be40 	b.w	80ac720 <mbedtls_sha512_update_ret>

080a7aa0 <mbedtls_ssl_derive_keys>:
static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
{
 80a7aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t mac_key_len;
    size_t iv_copy_len;
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
 80a7aa4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
 80a7aa6:	6c04      	ldr	r4, [r0, #64]	; 0x40
static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
{
 80a7aa8:	b0d7      	sub	sp, #348	; 0x15c
    size_t mac_key_len;
    size_t iv_copy_len;
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
 80a7aaa:	9305      	str	r3, [sp, #20]
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );

    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
 80a7aac:	6823      	ldr	r3, [r4, #0]
    const mbedtls_cipher_info_t *cipher_info;
    const mbedtls_md_info_t *md_info;

    mbedtls_ssl_session *session = ssl->session_negotiate;
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;
 80a7aae:	6b05      	ldr	r5, [r0, #48]	; 0x30
static void ssl_calc_finished_tls_sha384( mbedtls_ssl_context *, unsigned char *, int );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

int mbedtls_ssl_derive_keys( mbedtls_ssl_context *ssl )
{
 80a7ab0:	4680      	mov	r8, r0
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );

    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
 80a7ab2:	7a18      	ldrb	r0, [r3, #8]
 80a7ab4:	f7f9 fde4 	bl	80a1680 <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
 80a7ab8:	4606      	mov	r6, r0
 80a7aba:	b908      	cbnz	r0, 80a7ac0 <mbedtls_ssl_derive_keys+0x20>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "cipher info for %d not found",
                            transform->ciphersuite_info->cipher ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80a7abc:	489d      	ldr	r0, [pc, #628]	; (80a7d34 <mbedtls_ssl_derive_keys+0x294>)
 80a7abe:	e136      	b.n	80a7d2e <mbedtls_ssl_derive_keys+0x28e>
    }

    md_info = mbedtls_md_info_from_type( transform->ciphersuite_info->mac );
 80a7ac0:	6823      	ldr	r3, [r4, #0]
 80a7ac2:	7a58      	ldrb	r0, [r3, #9]
 80a7ac4:	f7fe f926 	bl	80a5d14 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 80a7ac8:	4682      	mov	sl, r0
 80a7aca:	2800      	cmp	r0, #0
 80a7acc:	d0f6      	beq.n	80a7abc <mbedtls_ssl_derive_keys+0x1c>
    }
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
 80a7ace:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a7ad2:	2b03      	cmp	r3, #3
 80a7ad4:	d001      	beq.n	80a7ada <mbedtls_ssl_derive_keys+0x3a>
    else
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80a7ad6:	4898      	ldr	r0, [pc, #608]	; (80a7d38 <mbedtls_ssl_derive_keys+0x298>)
 80a7ad8:	e129      	b.n	80a7d2e <mbedtls_ssl_derive_keys+0x28e>
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
        transform->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
 80a7ada:	6823      	ldr	r3, [r4, #0]
    }
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
 80a7adc:	7a5b      	ldrb	r3, [r3, #9]
 80a7ade:	2b07      	cmp	r3, #7
 80a7ae0:	d107      	bne.n	80a7af2 <mbedtls_ssl_derive_keys+0x52>
        transform->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
    {
        handshake->tls_prf = tls_prf_sha384;
 80a7ae2:	4b96      	ldr	r3, [pc, #600]	; (80a7d3c <mbedtls_ssl_derive_keys+0x29c>)
 80a7ae4:	f8c5 316c 	str.w	r3, [r5, #364]	; 0x16c
        handshake->calc_verify = ssl_calc_verify_tls_sha384;
 80a7ae8:	4b95      	ldr	r3, [pc, #596]	; (80a7d40 <mbedtls_ssl_derive_keys+0x2a0>)
 80a7aea:	f8c5 3164 	str.w	r3, [r5, #356]	; 0x164
        handshake->calc_finished = ssl_calc_finished_tls_sha384;
 80a7aee:	4b95      	ldr	r3, [pc, #596]	; (80a7d44 <mbedtls_ssl_derive_keys+0x2a4>)
 80a7af0:	e006      	b.n	80a7b00 <mbedtls_ssl_derive_keys+0x60>
    else
#endif
#if defined(MBEDTLS_SHA256_C)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
    {
        handshake->tls_prf = tls_prf_sha256;
 80a7af2:	4b95      	ldr	r3, [pc, #596]	; (80a7d48 <mbedtls_ssl_derive_keys+0x2a8>)
 80a7af4:	f8c5 316c 	str.w	r3, [r5, #364]	; 0x16c
        handshake->calc_verify = ssl_calc_verify_tls_sha256;
 80a7af8:	4b94      	ldr	r3, [pc, #592]	; (80a7d4c <mbedtls_ssl_derive_keys+0x2ac>)
 80a7afa:	f8c5 3164 	str.w	r3, [r5, #356]	; 0x164
        handshake->calc_finished = ssl_calc_finished_tls_sha256;
 80a7afe:	4b94      	ldr	r3, [pc, #592]	; (80a7d50 <mbedtls_ssl_derive_keys+0x2b0>)
 80a7b00:	f8c5 3168 	str.w	r3, [r5, #360]	; 0x168
     *     MD5( premaster + SHA1( 'CCC' + premaster + randbytes ) )
     *
     * TLSv1+:
     *   master = PRF( premaster, "master secret", randbytes )[0..47]
     */
    if( handshake->resume == 0 )
 80a7b04:	f8d5 31e4 	ldr.w	r3, [r5, #484]	; 0x1e4
 80a7b08:	f505 7bda 	add.w	fp, r5, #436	; 0x1b4
 80a7b0c:	f505 79ba 	add.w	r9, r5, #372	; 0x174
 80a7b10:	b9ab      	cbnz	r3, 80a7b3e <mbedtls_ssl_derive_keys+0x9e>
        else
#endif
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
                                  "master secret",
                                  handshake->randbytes, 64,
                                  session->master, 48 );
 80a7b12:	2330      	movs	r3, #48	; 0x30
 80a7b14:	9302      	str	r3, [sp, #8]
            }

        }
        else
#endif
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 80a7b16:	9b05      	ldr	r3, [sp, #20]
                                  "master secret",
                                  handshake->randbytes, 64,
                                  session->master, 48 );
 80a7b18:	4a8e      	ldr	r2, [pc, #568]	; (80a7d54 <mbedtls_ssl_derive_keys+0x2b4>)
            }

        }
        else
#endif
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 80a7b1a:	332c      	adds	r3, #44	; 0x2c
                                  "master secret",
                                  handshake->randbytes, 64,
                                  session->master, 48 );
 80a7b1c:	9301      	str	r3, [sp, #4]
 80a7b1e:	2340      	movs	r3, #64	; 0x40
 80a7b20:	9300      	str	r3, [sp, #0]
 80a7b22:	f8d5 1170 	ldr.w	r1, [r5, #368]	; 0x170
 80a7b26:	464b      	mov	r3, r9
 80a7b28:	4658      	mov	r0, fp
 80a7b2a:	f8d5 716c 	ldr.w	r7, [r5, #364]	; 0x16c
 80a7b2e:	47b8      	blx	r7
        if( ret != 0 )
 80a7b30:	2800      	cmp	r0, #0
 80a7b32:	f040 80fc 	bne.w	80a7d2e <mbedtls_ssl_derive_keys+0x28e>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
            return( ret );
        }

        mbedtls_zeroize( handshake->premaster, sizeof(handshake->premaster) );
 80a7b36:	2130      	movs	r1, #48	; 0x30
 80a7b38:	4658      	mov	r0, fp
 80a7b3a:	f7ff fe23 	bl	80a7784 <_ZL15mbedtls_zeroizePvj>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "no premaster (session resumed)" ) );

    /*
     * Swap the client and server random values.
     */
    memcpy( tmp, handshake->randbytes, 64 );
 80a7b3e:	464b      	mov	r3, r9
 80a7b40:	af06      	add	r7, sp, #24
 80a7b42:	463a      	mov	r2, r7
 80a7b44:	6818      	ldr	r0, [r3, #0]
 80a7b46:	6859      	ldr	r1, [r3, #4]
 80a7b48:	3308      	adds	r3, #8
 80a7b4a:	c203      	stmia	r2!, {r0, r1}
 80a7b4c:	455b      	cmp	r3, fp
 80a7b4e:	4617      	mov	r7, r2
 80a7b50:	d1f7      	bne.n	80a7b42 <mbedtls_ssl_derive_keys+0xa2>
    memcpy( handshake->randbytes, tmp + 32, 32 );
 80a7b52:	464f      	mov	r7, r9
 80a7b54:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
 80a7b58:	f10d 0b58 	add.w	fp, sp, #88	; 0x58
 80a7b5c:	4673      	mov	r3, lr
 80a7b5e:	cb03      	ldmia	r3!, {r0, r1}
 80a7b60:	455b      	cmp	r3, fp
 80a7b62:	6038      	str	r0, [r7, #0]
 80a7b64:	6079      	str	r1, [r7, #4]
 80a7b66:	469e      	mov	lr, r3
 80a7b68:	f107 0708 	add.w	r7, r7, #8
 80a7b6c:	d1f6      	bne.n	80a7b5c <mbedtls_ssl_derive_keys+0xbc>
    memcpy( handshake->randbytes + 32, tmp, 32 );
 80a7b6e:	f10d 0e18 	add.w	lr, sp, #24
 80a7b72:	f505 77ca 	add.w	r7, r5, #404	; 0x194
 80a7b76:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 80a7b7a:	4673      	mov	r3, lr
 80a7b7c:	cb03      	ldmia	r3!, {r0, r1}
 80a7b7e:	4563      	cmp	r3, ip
 80a7b80:	6038      	str	r0, [r7, #0]
 80a7b82:	6079      	str	r1, [r7, #4]
 80a7b84:	469e      	mov	lr, r3
 80a7b86:	f107 0708 	add.w	r7, r7, #8
 80a7b8a:	d1f6      	bne.n	80a7b7a <mbedtls_ssl_derive_keys+0xda>
    mbedtls_zeroize( tmp, sizeof( tmp ) );
 80a7b8c:	2140      	movs	r1, #64	; 0x40
 80a7b8e:	a806      	add	r0, sp, #24
 80a7b90:	f7ff fdf8 	bl	80a7784 <_ZL15mbedtls_zeroizePvj>
     *      ...
     *
     *  TLSv1:
     *    key block = PRF( master, "key expansion", randbytes )
     */
    ret = handshake->tls_prf( session->master, 48, "key expansion",
 80a7b94:	9f05      	ldr	r7, [sp, #20]
                              handshake->randbytes, 64, keyblk, 256 );
 80a7b96:	f44f 7380 	mov.w	r3, #256	; 0x100
 80a7b9a:	f8cd b004 	str.w	fp, [sp, #4]
 80a7b9e:	f04f 0b40 	mov.w	fp, #64	; 0x40
 80a7ba2:	9302      	str	r3, [sp, #8]
     *      ...
     *
     *  TLSv1:
     *    key block = PRF( master, "key expansion", randbytes )
     */
    ret = handshake->tls_prf( session->master, 48, "key expansion",
 80a7ba4:	372c      	adds	r7, #44	; 0x2c
                              handshake->randbytes, 64, keyblk, 256 );
 80a7ba6:	f8cd b000 	str.w	fp, [sp]
 80a7baa:	f8d5 516c 	ldr.w	r5, [r5, #364]	; 0x16c
 80a7bae:	464b      	mov	r3, r9
 80a7bb0:	4a69      	ldr	r2, [pc, #420]	; (80a7d58 <mbedtls_ssl_derive_keys+0x2b8>)
 80a7bb2:	2130      	movs	r1, #48	; 0x30
 80a7bb4:	4638      	mov	r0, r7
 80a7bb6:	47a8      	blx	r5
    if( ret != 0 )
 80a7bb8:	2800      	cmp	r0, #0
 80a7bba:	f040 80b8 	bne.w	80a7d2e <mbedtls_ssl_derive_keys+0x28e>
                   mbedtls_ssl_get_ciphersuite_name( session->ciphersuite ) ) );
    MBEDTLS_SSL_DEBUG_BUF( 3, "master secret", session->master, 48 );
    MBEDTLS_SSL_DEBUG_BUF( 4, "random bytes", handshake->randbytes, 64 );
    MBEDTLS_SSL_DEBUG_BUF( 4, "key block", keyblk, 256 );

    mbedtls_zeroize( handshake->randbytes, sizeof( handshake->randbytes ) );
 80a7bbe:	4659      	mov	r1, fp
 80a7bc0:	4648      	mov	r0, r9
 80a7bc2:	f7ff fddf 	bl	80a7784 <_ZL15mbedtls_zeroizePvj>

    /*
     * Determine the appropriate key, IV and MAC length.
     */

    transform->keylen = cipher_info->key_bitlen / 8;
 80a7bc6:	6873      	ldr	r3, [r6, #4]
 80a7bc8:	08db      	lsrs	r3, r3, #3
 80a7bca:	6063      	str	r3, [r4, #4]

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
 80a7bcc:	7873      	ldrb	r3, [r6, #1]
 80a7bce:	2b06      	cmp	r3, #6
 80a7bd0:	d001      	beq.n	80a7bd6 <mbedtls_ssl_derive_keys+0x136>
 80a7bd2:	2b08      	cmp	r3, #8
 80a7bd4:	d10f      	bne.n	80a7bf6 <mbedtls_ssl_derive_keys+0x156>
        cipher_info->mode == MBEDTLS_MODE_CCM )
    {
        transform->maclen = 0;
        mac_key_len = 0;

        transform->ivlen = 12;
 80a7bd6:	220c      	movs	r2, #12
 80a7bd8:	60e2      	str	r2, [r4, #12]
        transform->fixed_ivlen = 4;
 80a7bda:	2204      	movs	r2, #4
    transform->keylen = cipher_info->key_bitlen / 8;

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
        cipher_info->mode == MBEDTLS_MODE_CCM )
    {
        transform->maclen = 0;
 80a7bdc:	2300      	movs	r3, #0
        mac_key_len = 0;

        transform->ivlen = 12;
        transform->fixed_ivlen = 4;
 80a7bde:	6122      	str	r2, [r4, #16]

        /* Minimum length is expicit IV + tag */
        transform->minlen = transform->ivlen - transform->fixed_ivlen
                            + ( transform->ciphersuite_info->flags &
 80a7be0:	6822      	ldr	r2, [r4, #0]
    transform->keylen = cipher_info->key_bitlen / 8;

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
        cipher_info->mode == MBEDTLS_MODE_CCM )
    {
        transform->maclen = 0;
 80a7be2:	6163      	str	r3, [r4, #20]
        transform->ivlen = 12;
        transform->fixed_ivlen = 4;

        /* Minimum length is expicit IV + tag */
        transform->minlen = transform->ivlen - transform->fixed_ivlen
                            + ( transform->ciphersuite_info->flags &
 80a7be4:	7f12      	ldrb	r2, [r2, #28]

    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
        cipher_info->mode == MBEDTLS_MODE_CCM )
    {
        transform->maclen = 0;
        mac_key_len = 0;
 80a7be6:	469a      	mov	sl, r3
        transform->ivlen = 12;
        transform->fixed_ivlen = 4;

        /* Minimum length is expicit IV + tag */
        transform->minlen = transform->ivlen - transform->fixed_ivlen
                            + ( transform->ciphersuite_info->flags &
 80a7be8:	f012 0f02 	tst.w	r2, #2
                                MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16 );
 80a7bec:	bf14      	ite	ne
 80a7bee:	2210      	movne	r2, #16
 80a7bf0:	2218      	moveq	r2, #24
 80a7bf2:	60a2      	str	r2, [r4, #8]
 80a7bf4:	e01d      	b.n	80a7c32 <mbedtls_ssl_derive_keys+0x192>
    }
    else
    {
        /* Initialize HMAC contexts */
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
 80a7bf6:	2201      	movs	r2, #1
 80a7bf8:	4651      	mov	r1, sl
 80a7bfa:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a7bfe:	f7fe f8bb 	bl	80a5d78 <mbedtls_md_setup>
 80a7c02:	2800      	cmp	r0, #0
 80a7c04:	f040 8093 	bne.w	80a7d2e <mbedtls_ssl_derive_keys+0x28e>
 80a7c08:	2201      	movs	r2, #1
 80a7c0a:	4651      	mov	r1, sl
 80a7c0c:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80a7c10:	f7fe f8b2 	bl	80a5d78 <mbedtls_md_setup>
 80a7c14:	2800      	cmp	r0, #0
 80a7c16:	f040 808a 	bne.w	80a7d2e <mbedtls_ssl_derive_keys+0x28e>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
            return( ret );
        }

        /* Get MAC length */
        mac_key_len = mbedtls_md_get_size( md_info );
 80a7c1a:	4650      	mov	r0, sl
 80a7c1c:	f7fe f9b4 	bl	80a5f88 <mbedtls_md_get_size>
        transform->maclen = mac_key_len;
 80a7c20:	6160      	str	r0, [r4, #20]
#endif
        }
#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */

        /* IV length */
        transform->ivlen = cipher_info->iv_size;
 80a7c22:	68f1      	ldr	r1, [r6, #12]
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
            return( ret );
        }

        /* Get MAC length */
        mac_key_len = mbedtls_md_get_size( md_info );
 80a7c24:	4682      	mov	sl, r0
#endif
        }
#endif /* MBEDTLS_SSL_TRUNCATED_HMAC */

        /* IV length */
        transform->ivlen = cipher_info->iv_size;
 80a7c26:	60e1      	str	r1, [r4, #12]

        /* Minimum length */
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
 80a7c28:	7873      	ldrb	r3, [r6, #1]
 80a7c2a:	2b07      	cmp	r3, #7
 80a7c2c:	d170      	bne.n	80a7d10 <mbedtls_ssl_derive_keys+0x270>
            transform->minlen = transform->maclen;
 80a7c2e:	f8c4 a008 	str.w	sl, [r4, #8]

    /*
     * Finally setup the cipher contexts, IVs and MAC secrets.
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 80a7c32:	f8d8 3000 	ldr.w	r3, [r8]
 80a7c36:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80a7c3a:	07db      	lsls	r3, r3, #31
 80a7c3c:	f53f af4b 	bmi.w	80a7ad6 <mbedtls_ssl_derive_keys+0x36>
    {
        key1 = keyblk + mac_key_len * 2;
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
 80a7c40:	6863      	ldr	r3, [r4, #4]
     * Finally setup the cipher contexts, IVs and MAC secrets.
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
    {
        key1 = keyblk + mac_key_len * 2;
 80a7c42:	ea4f 094a 	mov.w	r9, sl, lsl #1
        mac_dec = keyblk + mac_key_len;

        /*
         * This is not used in TLS v1.1.
         */
        iv_copy_len = ( transform->fixed_ivlen ) ?
 80a7c46:	f8d4 b010 	ldr.w	fp, [r4, #16]
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
    {
        key1 = keyblk + mac_key_len * 2;
        key2 = keyblk + mac_key_len * 2 + transform->keylen;
 80a7c4a:	eb09 0503 	add.w	r5, r9, r3
 80a7c4e:	aa16      	add	r2, sp, #88	; 0x58
 80a7c50:	4415      	add	r5, r2

        /*
         * This is not used in TLS v1.1.
         */
        iv_copy_len = ( transform->fixed_ivlen ) ?
                            transform->fixed_ivlen : transform->ivlen;
 80a7c52:	f1bb 0f00 	cmp.w	fp, #0
 80a7c56:	d101      	bne.n	80a7c5c <mbedtls_ssl_derive_keys+0x1bc>
 80a7c58:	f8d4 b00c 	ldr.w	fp, [r4, #12]
        memcpy( transform->iv_enc, key2 + transform->keylen,  iv_copy_len );
 80a7c5c:	18e9      	adds	r1, r5, r3
 80a7c5e:	465a      	mov	r2, fp
 80a7c60:	f104 0018 	add.w	r0, r4, #24
 80a7c64:	9305      	str	r3, [sp, #20]
 80a7c66:	f007 fa44 	bl	80af0f2 <memcpy>
        memcpy( transform->iv_dec, key2 + transform->keylen + iv_copy_len,
                iv_copy_len );
 80a7c6a:	9b05      	ldr	r3, [sp, #20]
 80a7c6c:	465a      	mov	r2, fp
 80a7c6e:	eb0b 0103 	add.w	r1, fp, r3
 80a7c72:	4429      	add	r1, r5
 80a7c74:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80a7c78:	f007 fa3b 	bl	80af0f2 <memcpy>
    }
    else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 80a7c7c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a7c80:	2b00      	cmp	r3, #0
 80a7c82:	f77f af28 	ble.w	80a7ad6 <mbedtls_ssl_derive_keys+0x36>
    {
        /* For HMAC-based ciphersuites, initialize the HMAC transforms.
           For AEAD-based ciphersuites, there is nothing to do here. */
        if( mac_key_len != 0 )
 80a7c86:	f1ba 0f00 	cmp.w	sl, #0
 80a7c8a:	d00d      	beq.n	80a7ca8 <mbedtls_ssl_derive_keys+0x208>
        {
            mbedtls_md_hmac_starts( &transform->md_ctx_enc, mac_enc, mac_key_len );
 80a7c8c:	4652      	mov	r2, sl
 80a7c8e:	a916      	add	r1, sp, #88	; 0x58
 80a7c90:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a7c94:	f7fe f8c0 	bl	80a5e18 <mbedtls_md_hmac_starts>
            mbedtls_md_hmac_starts( &transform->md_ctx_dec, mac_dec, mac_key_len );
 80a7c98:	ab16      	add	r3, sp, #88	; 0x58
 80a7c9a:	4652      	mov	r2, sl
 80a7c9c:	eb03 010a 	add.w	r1, r3, sl
 80a7ca0:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80a7ca4:	f7fe f8b8 	bl	80a5e18 <mbedtls_md_hmac_starts>
        }
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */

#if defined(MBEDTLS_SSL_EXPORT_KEYS)
    if( ssl->conf->f_export_keys != NULL )
 80a7ca8:	f8d8 0000 	ldr.w	r0, [r8]
 80a7cac:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 80a7cb0:	f1b8 0f00 	cmp.w	r8, #0
 80a7cb4:	d008      	beq.n	80a7cc8 <mbedtls_ssl_derive_keys+0x228>
    {
        ssl->conf->f_export_keys( ssl->conf->p_export_keys,
                                  session->master, keyblk,
                                  mac_key_len, transform->keylen,
                                  iv_copy_len );
 80a7cb6:	f8cd b004 	str.w	fp, [sp, #4]
 80a7cba:	6863      	ldr	r3, [r4, #4]
 80a7cbc:	aa16      	add	r2, sp, #88	; 0x58
 80a7cbe:	9300      	str	r3, [sp, #0]
 80a7cc0:	4639      	mov	r1, r7
 80a7cc2:	4653      	mov	r3, sl
 80a7cc4:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80a7cc6:	47c0      	blx	r8
    }
#endif

    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_enc,
 80a7cc8:	f104 0750 	add.w	r7, r4, #80	; 0x50
 80a7ccc:	4631      	mov	r1, r6
 80a7cce:	4638      	mov	r0, r7
 80a7cd0:	f7f9 fd0e 	bl	80a16f0 <mbedtls_cipher_setup>
 80a7cd4:	bb58      	cbnz	r0, 80a7d2e <mbedtls_ssl_derive_keys+0x28e>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
        return( ret );
    }

    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_dec,
 80a7cd6:	3488      	adds	r4, #136	; 0x88
 80a7cd8:	4631      	mov	r1, r6
 80a7cda:	4620      	mov	r0, r4
 80a7cdc:	f7f9 fd08 	bl	80a16f0 <mbedtls_cipher_setup>
 80a7ce0:	bb28      	cbnz	r0, 80a7d2e <mbedtls_ssl_derive_keys+0x28e>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
        return( ret );
    }

    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_enc, key1,
 80a7ce2:	a916      	add	r1, sp, #88	; 0x58
 80a7ce4:	2301      	movs	r3, #1
 80a7ce6:	6872      	ldr	r2, [r6, #4]
 80a7ce8:	4449      	add	r1, r9
 80a7cea:	4638      	mov	r0, r7
 80a7cec:	f7f9 fd1a 	bl	80a1724 <mbedtls_cipher_setkey>
 80a7cf0:	b9e8      	cbnz	r0, 80a7d2e <mbedtls_ssl_derive_keys+0x28e>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
        return( ret );
    }

    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_dec, key2,
 80a7cf2:	4603      	mov	r3, r0
 80a7cf4:	6872      	ldr	r2, [r6, #4]
 80a7cf6:	4620      	mov	r0, r4
 80a7cf8:	4629      	mov	r1, r5
 80a7cfa:	f7f9 fd13 	bl	80a1724 <mbedtls_cipher_setkey>
 80a7cfe:	4604      	mov	r4, r0
 80a7d00:	b920      	cbnz	r0, 80a7d0c <mbedtls_ssl_derive_keys+0x26c>
            return( ret );
        }
    }
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    mbedtls_zeroize( keyblk, sizeof( keyblk ) );
 80a7d02:	f44f 7180 	mov.w	r1, #256	; 0x100
 80a7d06:	a816      	add	r0, sp, #88	; 0x58
 80a7d08:	f7ff fd3c 	bl	80a7784 <_ZL15mbedtls_zeroizePvj>
 80a7d0c:	4620      	mov	r0, r4
 80a7d0e:	e00e      	b.n	80a7d2e <mbedtls_ssl_derive_keys+0x28e>
            }
            else
#endif
            {
                transform->minlen = transform->maclen
                                  + cipher_info->block_size
 80a7d10:	6973      	ldr	r3, [r6, #20]
                                  - transform->maclen % cipher_info->block_size;
 80a7d12:	fbba f2f3 	udiv	r2, sl, r3
 80a7d16:	fb03 3302 	mla	r3, r3, r2, r3
 80a7d1a:	60a3      	str	r3, [r4, #8]
                ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_1 )
                ; /* No need to adjust minlen */
            else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_1) || defined(MBEDTLS_SSL_PROTO_TLS1_2)
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
 80a7d1c:	f8d8 200c 	ldr.w	r2, [r8, #12]
 80a7d20:	3a02      	subs	r2, #2
 80a7d22:	2a01      	cmp	r2, #1
 80a7d24:	f63f aed7 	bhi.w	80a7ad6 <mbedtls_ssl_derive_keys+0x36>
                ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
            {
                transform->minlen += transform->ivlen;
 80a7d28:	440b      	add	r3, r1
 80a7d2a:	60a3      	str	r3, [r4, #8]
 80a7d2c:	e781      	b.n	80a7c32 <mbedtls_ssl_derive_keys+0x192>
#endif /* MBEDTLS_ZLIB_SUPPORT */

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= derive keys" ) );

    return( 0 );
}
 80a7d2e:	b057      	add	sp, #348	; 0x15c
 80a7d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7d34:	ffff8f00 	.word	0xffff8f00
 80a7d38:	ffff9400 	.word	0xffff9400
 80a7d3c:	080a797d 	.word	0x080a797d
 80a7d40:	080a7a09 	.word	0x080a7a09
 80a7d44:	080a799d 	.word	0x080a799d
 80a7d48:	080a795d 	.word	0x080a795d
 80a7d4c:	080a7811 	.word	0x080a7811
 80a7d50:	080a77a5 	.word	0x080a77a5
 80a7d54:	080b100c 	.word	0x080b100c
 80a7d58:	080b101a 	.word	0x080b101a

080a7d5c <mbedtls_ssl_fetch_input>:
 *
 * For DTLS, it is up to the caller to set ssl->next_record_offset when
 * they're done reading a record.
 */
int mbedtls_ssl_fetch_input( mbedtls_ssl_context *ssl, size_t nb_want )
{
 80a7d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret;
    size_t len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
 80a7d5e:	6943      	ldr	r3, [r0, #20]
 *
 * For DTLS, it is up to the caller to set ssl->next_record_offset when
 * they're done reading a record.
 */
int mbedtls_ssl_fetch_input( mbedtls_ssl_context *ssl, size_t nb_want )
{
 80a7d60:	4604      	mov	r4, r0
 80a7d62:	460e      	mov	r6, r1
    int ret;
    size_t len;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
 80a7d64:	b90b      	cbnz	r3, 80a7d6a <mbedtls_ssl_fetch_input+0xe>
 80a7d66:	6983      	ldr	r3, [r0, #24]
 80a7d68:	b19b      	cbz	r3, 80a7d92 <mbedtls_ssl_fetch_input+0x36>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    }

    if( nb_want > MBEDTLS_SSL_BUFFER_LEN - (size_t)( ssl->in_hdr - ssl->in_buf ) )
 80a7d6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80a7d6c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a7d6e:	1a9b      	subs	r3, r3, r2
 80a7d70:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
 80a7d74:	332d      	adds	r3, #45	; 0x2d
 80a7d76:	42b3      	cmp	r3, r6
 80a7d78:	d30b      	bcc.n	80a7d92 <mbedtls_ssl_fetch_input+0x36>
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                       ssl->in_left, nb_want ) );

        while( ssl->in_left < nb_want )
 80a7d7a:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80a7d7c:	42ae      	cmp	r6, r5
 80a7d7e:	d90a      	bls.n	80a7d96 <mbedtls_ssl_fetch_input+0x3a>
/*
 * Return -1 is timer is expired, 0 if it isn't.
 */
static int ssl_check_timer( mbedtls_ssl_context *ssl )
{
    if( ssl->f_get_timer == NULL )
 80a7d80:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                       ssl->in_left, nb_want ) );

        while( ssl->in_left < nb_want )
        {
            len = nb_want - ssl->in_left;
 80a7d82:	1b75      	subs	r5, r6, r5
/*
 * Return -1 is timer is expired, 0 if it isn't.
 */
static int ssl_check_timer( mbedtls_ssl_context *ssl )
{
    if( ssl->f_get_timer == NULL )
 80a7d84:	b14b      	cbz	r3, 80a7d9a <mbedtls_ssl_fetch_input+0x3e>
        return( 0 );

    if( ssl->f_get_timer( ssl->p_timer ) == 2 )
 80a7d86:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80a7d88:	4798      	blx	r3
 80a7d8a:	2802      	cmp	r0, #2
 80a7d8c:	d105      	bne.n	80a7d9a <mbedtls_ssl_fetch_input+0x3e>
        while( ssl->in_left < nb_want )
        {
            len = nb_want - ssl->in_left;

            if( ssl_check_timer( ssl ) != 0 )
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
 80a7d8e:	4812      	ldr	r0, [pc, #72]	; (80a7dd8 <mbedtls_ssl_fetch_input+0x7c>)
 80a7d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80a7d92:	4812      	ldr	r0, [pc, #72]	; (80a7ddc <mbedtls_ssl_fetch_input+0x80>)
 80a7d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );

    return( 0 );
 80a7d96:	2000      	movs	r0, #0
 80a7d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

            if( ssl_check_timer( ssl ) != 0 )
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
            else
            {
                if( ssl->f_recv_timeout != NULL )
 80a7d9a:	69a7      	ldr	r7, [r4, #24]
 80a7d9c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80a7d9e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80a7da0:	b137      	cbz	r7, 80a7db0 <mbedtls_ssl_fetch_input+0x54>
                {
                    ret = ssl->f_recv_timeout( ssl->p_bio,
                                               ssl->in_hdr + ssl->in_left, len,
                                               ssl->conf->read_timeout );
 80a7da2:	6823      	ldr	r3, [r4, #0]
 80a7da4:	4401      	add	r1, r0
 80a7da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a7da8:	462a      	mov	r2, r5
 80a7daa:	69e0      	ldr	r0, [r4, #28]
 80a7dac:	47b8      	blx	r7
 80a7dae:	e004      	b.n	80a7dba <mbedtls_ssl_fetch_input+0x5e>
                }
                else
                {
                    ret = ssl->f_recv( ssl->p_bio,
                                       ssl->in_hdr + ssl->in_left, len );
 80a7db0:	4401      	add	r1, r0
 80a7db2:	6963      	ldr	r3, [r4, #20]
 80a7db4:	462a      	mov	r2, r5
 80a7db6:	69e0      	ldr	r0, [r4, #28]
 80a7db8:	4798      	blx	r3

            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                                        ssl->in_left, nb_want ) );
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );

            if( ret == 0 )
 80a7dba:	2800      	cmp	r0, #0
 80a7dbc:	d006      	beq.n	80a7dcc <mbedtls_ssl_fetch_input+0x70>
                return( MBEDTLS_ERR_SSL_CONN_EOF );

            if( ret < 0 )
 80a7dbe:	db09      	blt.n	80a7dd4 <mbedtls_ssl_fetch_input+0x78>
                return( ret );

            if ( (size_t)ret > len || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
 80a7dc0:	4285      	cmp	r5, r0
 80a7dc2:	d305      	bcc.n	80a7dd0 <mbedtls_ssl_fetch_input+0x74>
                    ( "f_recv returned %d bytes but only %lu were requested",
                    ret, (unsigned long)len ) );
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
            }

            ssl->in_left += ret;
 80a7dc4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80a7dc6:	4418      	add	r0, r3
 80a7dc8:	6760      	str	r0, [r4, #116]	; 0x74
 80a7dca:	e7d6      	b.n	80a7d7a <mbedtls_ssl_fetch_input+0x1e>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
                                        ssl->in_left, nb_want ) );
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );

            if( ret == 0 )
                return( MBEDTLS_ERR_SSL_CONN_EOF );
 80a7dcc:	4804      	ldr	r0, [pc, #16]	; (80a7de0 <mbedtls_ssl_fetch_input+0x84>)
 80a7dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if ( (size_t)ret > len || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
            {
                MBEDTLS_SSL_DEBUG_MSG( 1,
                    ( "f_recv returned %d bytes but only %lu were requested",
                    ret, (unsigned long)len ) );
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80a7dd0:	4804      	ldr	r0, [pc, #16]	; (80a7de4 <mbedtls_ssl_fetch_input+0x88>)
 80a7dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );

    return( 0 );
}
 80a7dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a7dd6:	bf00      	nop
 80a7dd8:	ffff9800 	.word	0xffff9800
 80a7ddc:	ffff8f00 	.word	0xffff8f00
 80a7de0:	ffff8d80 	.word	0xffff8d80
 80a7de4:	ffff9400 	.word	0xffff9400

080a7de8 <mbedtls_ssl_flush_output>:

/*
 * Flush any data not yet written
 */
int mbedtls_ssl_flush_output( mbedtls_ssl_context *ssl )
{
 80a7de8:	b510      	push	{r4, lr}
    int ret;
    unsigned char *buf, i;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );

    if( ssl->f_send == NULL )
 80a7dea:	6903      	ldr	r3, [r0, #16]

/*
 * Flush any data not yet written
 */
int mbedtls_ssl_flush_output( mbedtls_ssl_context *ssl )
{
 80a7dec:	4604      	mov	r4, r0
    int ret;
    unsigned char *buf, i;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );

    if( ssl->f_send == NULL )
 80a7dee:	b34b      	cbz	r3, 80a7e44 <mbedtls_ssl_flush_output+0x5c>
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
    }

    /* Avoid incrementing counter if data is flushed */
    if( ssl->out_left == 0 )
 80a7df0:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80a7df4:	b9a3      	cbnz	r3, 80a7e20 <mbedtls_ssl_flush_output+0x38>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
        return( 0 );
 80a7df6:	2000      	movs	r0, #0
 80a7df8:	bd10      	pop	{r4, pc}
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "message length: %d, out_left: %d",
                       mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen, ssl->out_left ) );

        buf = ssl->out_hdr + mbedtls_ssl_hdr_len( ssl ) +
              ssl->out_msglen - ssl->out_left;
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
 80a7dfa:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80a7dfe:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80a7e02:	3105      	adds	r1, #5
 80a7e04:	1a89      	subs	r1, r1, r2
 80a7e06:	4401      	add	r1, r0
 80a7e08:	6923      	ldr	r3, [r4, #16]
 80a7e0a:	69e0      	ldr	r0, [r4, #28]
 80a7e0c:	4798      	blx	r3

        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );

        if( ret <= 0 )
 80a7e0e:	2800      	cmp	r0, #0
 80a7e10:	dd1b      	ble.n	80a7e4a <mbedtls_ssl_flush_output+0x62>
            return( ret );

        if( (size_t)ret > ssl->out_left || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
 80a7e12:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80a7e16:	4283      	cmp	r3, r0
 80a7e18:	d316      	bcc.n	80a7e48 <mbedtls_ssl_flush_output+0x60>
                ( "f_send returned %d bytes but only %lu bytes were sent",
                ret, (unsigned long)ssl->out_left ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_left -= ret;
 80a7e1a:	1a18      	subs	r0, r3, r0
 80a7e1c:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
        return( 0 );
    }

    while( ssl->out_left > 0 )
 80a7e20:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 80a7e24:	2a00      	cmp	r2, #0
 80a7e26:	d1e8      	bne.n	80a7dfa <mbedtls_ssl_flush_output+0x12>
 80a7e28:	2207      	movs	r2, #7

        ssl->out_left -= ret;
    }

    for( i = 8; i > ssl_ep_len( ssl ); i-- )
        if( ++ssl->out_ctr[i - 1] != 0 )
 80a7e2a:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80a7e2e:	5c8b      	ldrb	r3, [r1, r2]
 80a7e30:	3301      	adds	r3, #1
 80a7e32:	b2db      	uxtb	r3, r3
 80a7e34:	548b      	strb	r3, [r1, r2]
 80a7e36:	2b00      	cmp	r3, #0
 80a7e38:	d1dd      	bne.n	80a7df6 <mbedtls_ssl_flush_output+0xe>
        }

        ssl->out_left -= ret;
    }

    for( i = 8; i > ssl_ep_len( ssl ); i-- )
 80a7e3a:	f112 32ff 	adds.w	r2, r2, #4294967295
 80a7e3e:	d2f4      	bcs.n	80a7e2a <mbedtls_ssl_flush_output+0x42>

    /* The loop goes to its end iff the counter is wrapping */
    if( i == ssl_ep_len( ssl ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "outgoing message counter would wrap" ) );
        return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 80a7e40:	4802      	ldr	r0, [pc, #8]	; (80a7e4c <mbedtls_ssl_flush_output+0x64>)
 80a7e42:	bd10      	pop	{r4, pc}

    if( ssl->f_send == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
                            "or mbedtls_ssl_set_bio()" ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80a7e44:	4802      	ldr	r0, [pc, #8]	; (80a7e50 <mbedtls_ssl_flush_output+0x68>)
 80a7e46:	bd10      	pop	{r4, pc}
        if( (size_t)ret > ssl->out_left || ( INT_MAX > SIZE_MAX && ret > SIZE_MAX ) )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1,
                ( "f_send returned %d bytes but only %lu bytes were sent",
                ret, (unsigned long)ssl->out_left ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80a7e48:	4802      	ldr	r0, [pc, #8]	; (80a7e54 <mbedtls_ssl_flush_output+0x6c>)
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );

    return( 0 );
}
 80a7e4a:	bd10      	pop	{r4, pc}
 80a7e4c:	ffff9480 	.word	0xffff9480
 80a7e50:	ffff8f00 	.word	0xffff8f00
 80a7e54:	ffff9400 	.word	0xffff9400

080a7e58 <mbedtls_ssl_write_record>:
/*
 * Write current record.
 * Uses ssl->out_msgtype, ssl->out_msglen and bytes at ssl->out_msg.
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl )
{
 80a7e58:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        ; /* Skip special handshake treatment when resending */
    }
    else
#endif
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 80a7e5a:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
/*
 * Write current record.
 * Uses ssl->out_msgtype, ssl->out_msglen and bytes at ssl->out_msg.
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl )
{
 80a7e5e:	b08f      	sub	sp, #60	; 0x3c
    {
        ; /* Skip special handshake treatment when resending */
    }
    else
#endif
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 80a7e60:	2b16      	cmp	r3, #22
/*
 * Write current record.
 * Uses ssl->out_msgtype, ssl->out_msglen and bytes at ssl->out_msg.
 */
int mbedtls_ssl_write_record( mbedtls_ssl_context *ssl )
{
 80a7e62:	4604      	mov	r4, r0
    int ret, done = 0, out_msg_type;
    size_t len = ssl->out_msglen;
 80a7e64:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
    {
        ; /* Skip special handshake treatment when resending */
    }
    else
#endif
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 80a7e68:	d11a      	bne.n	80a7ea0 <mbedtls_ssl_write_record+0x48>
    {
        out_msg_type = ssl->out_msg[0];
 80a7e6a:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
 80a7e6e:	780a      	ldrb	r2, [r1, #0]

        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST &&
 80a7e70:	b11a      	cbz	r2, 80a7e7a <mbedtls_ssl_write_record+0x22>
 80a7e72:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80a7e74:	2b00      	cmp	r3, #0
 80a7e76:	f000 809f 	beq.w	80a7fb8 <mbedtls_ssl_write_record+0x160>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msg[1] = (unsigned char)( ( len - 4 ) >> 16 );
 80a7e7a:	1f2b      	subs	r3, r5, #4
 80a7e7c:	0c18      	lsrs	r0, r3, #16
 80a7e7e:	7048      	strb	r0, [r1, #1]
        ssl->out_msg[2] = (unsigned char)( ( len - 4 ) >>  8 );
 80a7e80:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80a7e84:	0a18      	lsrs	r0, r3, #8
 80a7e86:	7088      	strb	r0, [r1, #2]
        ssl->out_msg[3] = (unsigned char)( ( len - 4 )       );
 80a7e88:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80a7e8c:	70cb      	strb	r3, [r1, #3]
            memset( ssl->out_msg + 6, 0x00, 3 );
            memcpy( ssl->out_msg + 9, ssl->out_msg + 1, 3 );
        }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST )
 80a7e8e:	b13a      	cbz	r2, 80a7ea0 <mbedtls_ssl_write_record+0x48>
            ssl->handshake->update_checksum( ssl, ssl->out_msg, len );
 80a7e90:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80a7e92:	462a      	mov	r2, r5
 80a7e94:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80a7e98:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80a7e9c:	4620      	mov	r0, r4
 80a7e9e:	4798      	blx	r3
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done )
    {
        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
 80a7ea0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80a7ea4:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 80a7ea8:	701a      	strb	r2, [r3, #0]
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 80a7eaa:	68e2      	ldr	r2, [r4, #12]
                           ssl->conf->transport, ssl->out_hdr + 1 );
 80a7eac:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 80a7eb0:	68a1      	ldr	r1, [r4, #8]
        ver[1] = (unsigned char) minor;
 80a7eb2:	709a      	strb	r2, [r3, #2]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 80a7eb4:	7059      	strb	r1, [r3, #1]
    {
        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, ssl->out_hdr + 1 );

        ssl->out_len[0] = (unsigned char)( len >> 8 );
 80a7eb6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80a7eba:	0a2a      	lsrs	r2, r5, #8
 80a7ebc:	701a      	strb	r2, [r3, #0]
        ssl->out_len[1] = (unsigned char)( len      );
 80a7ebe:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80a7ec2:	705d      	strb	r5, [r3, #1]

        if( ssl->transform_out != NULL )
 80a7ec4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a7ec6:	2b00      	cmp	r3, #0
 80a7ec8:	d06b      	beq.n	80a7fa2 <mbedtls_ssl_write_record+0x14a>
    mbedtls_cipher_mode_t mode;
    int auth_done = 0;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );

    if( ssl->session_out == NULL || ssl->transform_out == NULL )
 80a7eca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80a7ecc:	2a00      	cmp	r2, #0
 80a7ece:	d073      	beq.n	80a7fb8 <mbedtls_ssl_write_record+0x160>
 * \return       The mode of operation, or #MBEDTLS_MODE_NONE if
 *               \p ctx has not been initialized.
 */
static inline mbedtls_cipher_mode_t mbedtls_cipher_get_cipher_mode( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
 80a7ed0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80a7ed2:	b102      	cbz	r2, 80a7ed6 <mbedtls_ssl_write_record+0x7e>
        return MBEDTLS_MODE_NONE;

    return ctx->cipher_info->mode;
 80a7ed4:	7852      	ldrb	r2, [r2, #1]
    mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_out->cipher_ctx_enc );

    MBEDTLS_SSL_DEBUG_BUF( 4, "before encrypt: output payload",
                      ssl->out_msg, ssl->out_msglen );

    if( ssl->out_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
 80a7ed6:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
 80a7eda:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
 80a7ede:	d869      	bhi.n	80a7fb4 <mbedtls_ssl_write_record+0x15c>
        }
    }
    else
#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */
#if defined(MBEDTLS_GCM_C) || defined(MBEDTLS_CCM_C)
    if( mode == MBEDTLS_MODE_GCM ||
 80a7ee0:	2a06      	cmp	r2, #6
 80a7ee2:	d001      	beq.n	80a7ee8 <mbedtls_ssl_write_record+0x90>
 80a7ee4:	2a08      	cmp	r2, #8
 80a7ee6:	d167      	bne.n	80a7fb8 <mbedtls_ssl_write_record+0x160>
    {
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 80a7ee8:	681a      	ldr	r2, [r3, #0]
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;

        memcpy( add_data, ssl->out_ctr, 8 );
 80a7eea:	ae0a      	add	r6, sp, #40	; 0x28
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 80a7eec:	7f12      	ldrb	r2, [r2, #28]
 80a7eee:	f012 0f02 	tst.w	r2, #2

        memcpy( add_data, ssl->out_ctr, 8 );
 80a7ef2:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 80a7ef6:	bf18      	it	ne
 80a7ef8:	2508      	movne	r5, #8

        memcpy( add_data, ssl->out_ctr, 8 );
 80a7efa:	6810      	ldr	r0, [r2, #0]
 80a7efc:	6851      	ldr	r1, [r2, #4]
        add_data[8]  = ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
        add_data[12] = ssl->out_msglen & 0xFF;
 80a7efe:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;

        memcpy( add_data, ssl->out_ctr, 8 );
 80a7f02:	c603      	stmia	r6!, {r0, r1}
        add_data[8]  = ssl->out_msgtype;
 80a7f04:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 80a7f08:	68a0      	ldr	r0, [r4, #8]
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;

        memcpy( add_data, ssl->out_ctr, 8 );
        add_data[8]  = ssl->out_msgtype;
 80a7f0a:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 80a7f0e:	68e1      	ldr	r1, [r4, #12]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 80a7f10:	f88d 0031 	strb.w	r0, [sp, #49]	; 0x31
        ver[1] = (unsigned char) minor;
 80a7f14:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32

        memcpy( add_data, ssl->out_ctr, 8 );
        add_data[8]  = ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
 80a7f18:	ea4f 2117 	mov.w	r1, r7, lsr #8
 80a7f1c:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
                       add_data, 13 );

        /*
         * Generate IV
         */
        if( ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen != 8 )
 80a7f20:	6918      	ldr	r0, [r3, #16]
 80a7f22:	68d9      	ldr	r1, [r3, #12]
        int ret;
        size_t enc_msglen, olen;
        unsigned char *enc_msg;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 80a7f24:	bf08      	it	eq
 80a7f26:	2510      	moveq	r5, #16
                       add_data, 13 );

        /*
         * Generate IV
         */
        if( ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen != 8 )
 80a7f28:	1a09      	subs	r1, r1, r0
 80a7f2a:	2908      	cmp	r1, #8
 80a7f2c:	d144      	bne.n	80a7fb8 <mbedtls_ssl_write_record+0x160>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        memcpy( ssl->transform_out->iv_enc + ssl->transform_out->fixed_ivlen,
                             ssl->out_ctr, 8 );
 80a7f2e:	6811      	ldr	r1, [r2, #0]
            /* Reminder if we ever add an AEAD mode with a different size */
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        memcpy( ssl->transform_out->iv_enc + ssl->transform_out->fixed_ivlen,
 80a7f30:	3318      	adds	r3, #24
                             ssl->out_ctr, 8 );
 80a7f32:	5019      	str	r1, [r3, r0]
 80a7f34:	6851      	ldr	r1, [r2, #4]
 80a7f36:	181e      	adds	r6, r3, r0
 80a7f38:	6071      	str	r1, [r6, #4]
        memcpy( ssl->out_iv, ssl->out_ctr, 8 );
 80a7f3a:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80a7f3e:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 80a7f42:	680b      	ldr	r3, [r1, #0]
 80a7f44:	6013      	str	r3, [r2, #0]
 80a7f46:	684b      	ldr	r3, [r1, #4]
 80a7f48:	6053      	str	r3, [r2, #4]
        /*
         * Fix pointer positions and message length with added IV
         */
        enc_msg = ssl->out_msg;
        enc_msglen = ssl->out_msglen;
        ssl->out_msglen += ssl->transform_out->ivlen -
 80a7f4a:	6ba0      	ldr	r0, [r4, #56]	; 0x38

        /*
         * Fix pointer positions and message length with added IV
         */
        enc_msg = ssl->out_msg;
        enc_msglen = ssl->out_msglen;
 80a7f4c:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
        ssl->out_msglen += ssl->transform_out->ivlen -
                           ssl->transform_out->fixed_ivlen;
 80a7f50:	68c3      	ldr	r3, [r0, #12]
 80a7f52:	6901      	ldr	r1, [r0, #16]
                ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen );

        /*
         * Fix pointer positions and message length with added IV
         */
        enc_msg = ssl->out_msg;
 80a7f54:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
        enc_msglen = ssl->out_msglen;
        ssl->out_msglen += ssl->transform_out->ivlen -
                           ssl->transform_out->fixed_ivlen;
 80a7f58:	4433      	add	r3, r6
 80a7f5a:	1a5b      	subs	r3, r3, r1
 80a7f5c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
                       ssl->out_msglen, 0 ) );

        /*
         * Encrypt and authenticate
         */
        if( ( ret = mbedtls_cipher_auth_encrypt( &ssl->transform_out->cipher_ctx_enc,
 80a7f60:	1993      	adds	r3, r2, r6
 80a7f62:	9305      	str	r3, [sp, #20]
 80a7f64:	ab09      	add	r3, sp, #36	; 0x24
 80a7f66:	9304      	str	r3, [sp, #16]
 80a7f68:	230d      	movs	r3, #13
 80a7f6a:	9300      	str	r3, [sp, #0]
 80a7f6c:	9506      	str	r5, [sp, #24]
 80a7f6e:	9203      	str	r2, [sp, #12]
 80a7f70:	9602      	str	r6, [sp, #8]
 80a7f72:	9201      	str	r2, [sp, #4]
 80a7f74:	68c2      	ldr	r2, [r0, #12]
 80a7f76:	f100 0118 	add.w	r1, r0, #24
 80a7f7a:	ab0a      	add	r3, sp, #40	; 0x28
 80a7f7c:	3050      	adds	r0, #80	; 0x50
 80a7f7e:	f7f9 fca9 	bl	80a18d4 <mbedtls_cipher_auth_encrypt>
 80a7f82:	b9d0      	cbnz	r0, 80a7fba <mbedtls_ssl_write_record+0x162>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_encrypt", ret );
            return( ret );
        }

        if( olen != enc_msglen )
 80a7f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a7f86:	429e      	cmp	r6, r3
 80a7f88:	d116      	bne.n	80a7fb8 <mbedtls_ssl_write_record+0x160>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msglen += taglen;
 80a7f8a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
                return( ret );
            }

            len = ssl->out_msglen;
            ssl->out_len[0] = (unsigned char)( len >> 8 );
 80a7f8e:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msglen += taglen;
 80a7f92:	442b      	add	r3, r5
                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
                return( ret );
            }

            len = ssl->out_msglen;
            ssl->out_len[0] = (unsigned char)( len >> 8 );
 80a7f94:	0a19      	lsrs	r1, r3, #8
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
        }

        ssl->out_msglen += taglen;
 80a7f96:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
                return( ret );
            }

            len = ssl->out_msglen;
            ssl->out_len[0] = (unsigned char)( len >> 8 );
 80a7f9a:	7011      	strb	r1, [r2, #0]
            ssl->out_len[1] = (unsigned char)( len      );
 80a7f9c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80a7fa0:	7053      	strb	r3, [r2, #1]
        }

        ssl->out_left = mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen;
 80a7fa2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0

        MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
                       ssl->out_hdr, mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen );
    }

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 80a7fa6:	4620      	mov	r0, r4
            len = ssl->out_msglen;
            ssl->out_len[0] = (unsigned char)( len >> 8 );
            ssl->out_len[1] = (unsigned char)( len      );
        }

        ssl->out_left = mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen;
 80a7fa8:	3305      	adds	r3, #5
 80a7faa:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4

        MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
                       ssl->out_hdr, mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen );
    }

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 80a7fae:	f7ff ff1b 	bl	80a7de8 <mbedtls_ssl_flush_output>
 80a7fb2:	e002      	b.n	80a7fba <mbedtls_ssl_write_record+0x162>
    if( ssl->out_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Record content %u too large, maximum %d",
                                    (unsigned) ssl->out_msglen,
                                    MBEDTLS_SSL_MAX_CONTENT_LEN ) );
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80a7fb4:	4802      	ldr	r0, [pc, #8]	; (80a7fc0 <mbedtls_ssl_write_record+0x168>)
 80a7fb6:	e000      	b.n	80a7fba <mbedtls_ssl_write_record+0x162>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );

    if( ssl->session_out == NULL || ssl->transform_out == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80a7fb8:	4802      	ldr	r0, [pc, #8]	; (80a7fc4 <mbedtls_ssl_write_record+0x16c>)
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write record" ) );

    return( 0 );
}
 80a7fba:	b00f      	add	sp, #60	; 0x3c
 80a7fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a7fbe:	bf00      	nop
 80a7fc0:	ffff8f00 	.word	0xffff8f00
 80a7fc4:	ffff9400 	.word	0xffff9400

080a7fc8 <mbedtls_ssl_prepare_handshake_record>:
    return( 0 );
}
#endif /* MBEDTLS_SSL_PROTO_DTLS */

int mbedtls_ssl_prepare_handshake_record( mbedtls_ssl_context *ssl )
{
 80a7fc8:	b510      	push	{r4, lr}
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
 80a7fca:	6f04      	ldr	r4, [r0, #112]	; 0x70
 80a7fcc:	2c03      	cmp	r4, #3
 80a7fce:	d90f      	bls.n	80a7ff0 <mbedtls_ssl_prepare_handshake_record+0x28>
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
                    ( ssl->in_msg[1] << 16 ) |
 80a7fd0:	6e41      	ldr	r1, [r0, #100]	; 0x64
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
 80a7fd2:	788a      	ldrb	r2, [r1, #2]
 80a7fd4:	784b      	ldrb	r3, [r1, #1]
 80a7fd6:	0212      	lsls	r2, r2, #8
 80a7fd8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80a7fdc:	78ca      	ldrb	r2, [r1, #3]
 80a7fde:	4313      	orrs	r3, r2
 80a7fe0:	3304      	adds	r3, #4
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 80a7fe2:	4a04      	ldr	r2, [pc, #16]	; (80a7ff4 <mbedtls_ssl_prepare_handshake_record+0x2c>)
    }

    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
                    ( ssl->in_msg[1] << 16 ) |
                    ( ssl->in_msg[2] << 8  ) |
                      ssl->in_msg[3] );
 80a7fe4:	6783      	str	r3, [r0, #120]	; 0x78
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 80a7fe6:	429c      	cmp	r4, r3
 80a7fe8:	bf34      	ite	cc
 80a7fea:	4610      	movcc	r0, r2
 80a7fec:	2000      	movcs	r0, #0
 80a7fee:	bd10      	pop	{r4, pc}
{
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
                            ssl->in_msglen ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 80a7ff0:	4801      	ldr	r0, [pc, #4]	; (80a7ff8 <mbedtls_ssl_prepare_handshake_record+0x30>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
    }

    return( 0 );
}
 80a7ff2:	bd10      	pop	{r4, pc}
 80a7ff4:	ffff8f80 	.word	0xffff8f80
 80a7ff8:	ffff8e00 	.word	0xffff8e00

080a7ffc <mbedtls_ssl_update_handshake_status>:

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 80a7ffc:	6842      	ldr	r2, [r0, #4]

    return( 0 );
}

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{
 80a7ffe:	b410      	push	{r4}

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 80a8000:	2a10      	cmp	r2, #16
 80a8002:	d008      	beq.n	80a8016 <mbedtls_ssl_update_handshake_status+0x1a>
        ssl->handshake != NULL )
 80a8004:	6b02      	ldr	r2, [r0, #48]	; 0x30
}

void mbedtls_ssl_update_handshake_status( mbedtls_ssl_context *ssl )
{

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 80a8006:	b132      	cbz	r2, 80a8016 <mbedtls_ssl_update_handshake_status+0x1a>
        ssl->handshake != NULL )
    {
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
 80a8008:	f8d2 4160 	ldr.w	r4, [r2, #352]	; 0x160
 80a800c:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80a800e:	4623      	mov	r3, r4
 80a8010:	6f82      	ldr	r2, [r0, #120]	; 0x78
        ssl->handshake != NULL )
    {
        ssl->handshake->in_msg_seq++;
    }
#endif
}
 80a8012:	bc10      	pop	{r4}
{

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
        ssl->handshake != NULL )
    {
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
 80a8014:	4718      	bx	r3
        ssl->handshake != NULL )
    {
        ssl->handshake->in_msg_seq++;
    }
#endif
}
 80a8016:	bc10      	pop	{r4}
 80a8018:	4770      	bx	lr
	...

080a801c <mbedtls_ssl_handle_message_type>:

    return( 0 );
}

int mbedtls_ssl_handle_message_type( mbedtls_ssl_context *ssl )
{
 80a801c:	b510      	push	{r4, lr}
    int ret;

    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 80a801e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c

    return( 0 );
}

int mbedtls_ssl_handle_message_type( mbedtls_ssl_context *ssl )
{
 80a8020:	4604      	mov	r4, r0
    int ret;

    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 80a8022:	2b16      	cmp	r3, #22
 80a8024:	d004      	beq.n	80a8030 <mbedtls_ssl_handle_message_type+0x14>
        {
            return( ret );
        }
    }

    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
 80a8026:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80a8028:	2b15      	cmp	r3, #21
 80a802a:	d006      	beq.n	80a803a <mbedtls_ssl_handle_message_type+0x1e>

        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
    }

    return( 0 );
 80a802c:	2000      	movs	r0, #0
 80a802e:	bd10      	pop	{r4, pc}
    /*
     * Handle particular types of records
     */
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
    {
        if( ( ret = mbedtls_ssl_prepare_handshake_record( ssl ) ) != 0 )
 80a8030:	f7ff ffca 	bl	80a7fc8 <mbedtls_ssl_prepare_handshake_record>
 80a8034:	2800      	cmp	r0, #0
 80a8036:	d0f6      	beq.n	80a8026 <mbedtls_ssl_handle_message_type+0xa>
 80a8038:	bd10      	pop	{r4, pc}
        }
    }

    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
    {
        if( ssl->in_msglen != 2 )
 80a803a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80a803c:	2b02      	cmp	r3, #2
 80a803e:	d10c      	bne.n	80a805a <mbedtls_ssl_handle_message_type+0x3e>
                       ssl->in_msg[0], ssl->in_msg[1] ) );

        /*
         * Ignore non-fatal alerts, except close_notify and no_renegotiation
         */
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
 80a8040:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80a8042:	781a      	ldrb	r2, [r3, #0]
 80a8044:	2a02      	cmp	r2, #2
 80a8046:	d00a      	beq.n	80a805e <mbedtls_ssl_handle_message_type+0x42>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
        }

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 80a8048:	2a01      	cmp	r2, #1
 80a804a:	d10a      	bne.n	80a8062 <mbedtls_ssl_handle_message_type+0x46>
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
 80a804c:	785b      	ldrb	r3, [r3, #1]
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
        }

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 80a804e:	b153      	cbz	r3, 80a8066 <mbedtls_ssl_handle_message_type+0x4a>

        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
    }

    return( 0 );
 80a8050:	2b64      	cmp	r3, #100	; 0x64
 80a8052:	4806      	ldr	r0, [pc, #24]	; (80a806c <mbedtls_ssl_handle_message_type+0x50>)
 80a8054:	bf08      	it	eq
 80a8056:	2000      	moveq	r0, #0
 80a8058:	bd10      	pop	{r4, pc}
            /* Note: Standard allows for more than one 2 byte alert
               to be packed in a single message, but Mbed TLS doesn't
               currently support this. */
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid alert message, len: %d",
                           ssl->in_msglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 80a805a:	4805      	ldr	r0, [pc, #20]	; (80a8070 <mbedtls_ssl_handle_message_type+0x54>)
 80a805c:	bd10      	pop	{r4, pc}
         */
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
                           ssl->in_msg[1] ) );
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
 80a805e:	4805      	ldr	r0, [pc, #20]	; (80a8074 <mbedtls_ssl_handle_message_type+0x58>)
 80a8060:	bd10      	pop	{r4, pc}
            return( 0 );
        }
#endif /* MBEDTLS_SSL_PROTO_SSL3 && MBEDTLS_SSL_SRV_C */

        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
 80a8062:	4802      	ldr	r0, [pc, #8]	; (80a806c <mbedtls_ssl_handle_message_type+0x50>)
 80a8064:	bd10      	pop	{r4, pc}

        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a close notify message" ) );
            return( MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY );
 80a8066:	4804      	ldr	r0, [pc, #16]	; (80a8078 <mbedtls_ssl_handle_message_type+0x5c>)
        /* Silently ignore: fetch new message */
        return MBEDTLS_ERR_SSL_NON_FATAL;
    }

    return( 0 );
}
 80a8068:	bd10      	pop	{r4, pc}
 80a806a:	bf00      	nop
 80a806c:	ffff9980 	.word	0xffff9980
 80a8070:	ffff8e00 	.word	0xffff8e00
 80a8074:	ffff8880 	.word	0xffff8880
 80a8078:	ffff8780 	.word	0xffff8780

080a807c <mbedtls_ssl_send_alert_message>:
}

int mbedtls_ssl_send_alert_message( mbedtls_ssl_context *ssl,
                            unsigned char level,
                            unsigned char message )
{
 80a807c:	b410      	push	{r4}
    int ret;

    if( ssl == NULL || ssl->conf == NULL )
 80a807e:	b180      	cbz	r0, 80a80a2 <mbedtls_ssl_send_alert_message+0x26>
 80a8080:	6804      	ldr	r4, [r0, #0]
 80a8082:	b174      	cbz	r4, 80a80a2 <mbedtls_ssl_send_alert_message+0x26>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> send alert message" ) );
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "send alert level=%u message=%u", level, message ));

    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
 80a8084:	2415      	movs	r4, #21
 80a8086:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
    ssl->out_msglen = 2;
 80a808a:	2402      	movs	r4, #2
 80a808c:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
    ssl->out_msg[0] = level;
 80a8090:	f8d0 4098 	ldr.w	r4, [r0, #152]	; 0x98
 80a8094:	7021      	strb	r1, [r4, #0]
    ssl->out_msg[1] = message;
 80a8096:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
 80a809a:	705a      	strb	r2, [r3, #1]
        return( ret );
    }
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );

    return( 0 );
}
 80a809c:	bc10      	pop	{r4}
    ssl->out_msgtype = MBEDTLS_SSL_MSG_ALERT;
    ssl->out_msglen = 2;
    ssl->out_msg[0] = level;
    ssl->out_msg[1] = message;

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 80a809e:	f7ff bedb 	b.w	80a7e58 <mbedtls_ssl_write_record>
        return( ret );
    }
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );

    return( 0 );
}
 80a80a2:	4801      	ldr	r0, [pc, #4]	; (80a80a8 <mbedtls_ssl_send_alert_message+0x2c>)
 80a80a4:	bc10      	pop	{r4}
 80a80a6:	4770      	bx	lr
 80a80a8:	ffff8f00 	.word	0xffff8f00

080a80ac <mbedtls_ssl_read_record_layer>:

    return( 0 );
}

int mbedtls_ssl_read_record_layer( mbedtls_ssl_context *ssl )
{
 80a80ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     *     and consumes through mbedtls_ssl_read only.
     *
     */

    /* Case (1): Handshake messages */
    if( ssl->in_hslen != 0 )
 80a80b0:	6f81      	ldr	r1, [r0, #120]	; 0x78

    return( 0 );
}

int mbedtls_ssl_read_record_layer( mbedtls_ssl_context *ssl )
{
 80a80b2:	b08e      	sub	sp, #56	; 0x38
 80a80b4:	4604      	mov	r4, r0
 80a80b6:	6e83      	ldr	r3, [r0, #104]	; 0x68
     *     and consumes through mbedtls_ssl_read only.
     *
     */

    /* Case (1): Handshake messages */
    if( ssl->in_hslen != 0 )
 80a80b8:	b181      	cbz	r1, 80a80dc <mbedtls_ssl_read_record_layer+0x30>
    {
        /* Hard assertion to be sure that no application data
         * is in flight, as corrupting ssl->in_msglen during
         * ssl->in_offt != NULL is fatal. */
        if( ssl->in_offt != NULL )
 80a80ba:	2b00      	cmp	r3, #0
 80a80bc:	f040 80e0 	bne.w	80a8280 <mbedtls_ssl_read_record_layer+0x1d4>
         *     should not be treated as a silently corrected assertion.
         *     Additionally, ssl->in_hslen might be arbitrarily out of
         *     bounds after handling a DTLS message with an unexpected
         *     sequence number, see mbedtls_ssl_prepare_handshake_record.
         */
        if( ssl->in_hslen < ssl->in_msglen )
 80a80c0:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80a80c2:	4291      	cmp	r1, r2
 80a80c4:	d206      	bcs.n	80a80d4 <mbedtls_ssl_read_record_layer+0x28>
        {
            ssl->in_msglen -= ssl->in_hslen;
 80a80c6:	1a52      	subs	r2, r2, r1
 80a80c8:	6702      	str	r2, [r0, #112]	; 0x70
            memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,
 80a80ca:	6e40      	ldr	r0, [r0, #100]	; 0x64
                     ssl->in_msglen );
 80a80cc:	4401      	add	r1, r0
 80a80ce:	f007 f81b 	bl	80af108 <memmove>
 80a80d2:	e000      	b.n	80a80d6 <mbedtls_ssl_read_record_layer+0x2a>
            MBEDTLS_SSL_DEBUG_BUF( 4, "remaining content in record",
                                   ssl->in_msg, ssl->in_msglen );
        }
        else
        {
            ssl->in_msglen = 0;
 80a80d4:	6703      	str	r3, [r0, #112]	; 0x70
        }

        ssl->in_hslen   = 0;
 80a80d6:	2300      	movs	r3, #0
 80a80d8:	67a3      	str	r3, [r4, #120]	; 0x78
 80a80da:	e003      	b.n	80a80e4 <mbedtls_ssl_read_record_layer+0x38>
    }
    /* Case (4): Application data */
    else if( ssl->in_offt != NULL )
 80a80dc:	2b00      	cmp	r3, #0
 80a80de:	f040 80d3 	bne.w	80a8288 <mbedtls_ssl_read_record_layer+0x1dc>
        return( 0 );
    }
    /* Everything else (CCS & Alerts) */
    else
    {
        ssl->in_msglen = 0;
 80a80e2:	6703      	str	r3, [r0, #112]	; 0x70
     *
     * Fetch and decode new record if current one is fully consumed.
     *
     */

    if( ssl->in_msglen > 0 )
 80a80e4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80a80e6:	2b00      	cmp	r3, #0
 80a80e8:	f040 80ce 	bne.w	80a8288 <mbedtls_ssl_read_record_layer+0x1dc>
read_record_header:
#endif

    /* Current record either fully processed or to be discarded. */

    if( ( ret = mbedtls_ssl_fetch_input( ssl, mbedtls_ssl_hdr_len( ssl ) ) ) != 0 )
 80a80ec:	2105      	movs	r1, #5
 80a80ee:	4620      	mov	r0, r4
 80a80f0:	f7ff fe34 	bl	80a7d5c <mbedtls_ssl_fetch_input>
 80a80f4:	2800      	cmp	r0, #0
 80a80f6:	f040 80c8 	bne.w	80a828a <mbedtls_ssl_read_record_layer+0x1de>
{
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
 80a80fa:	6da2      	ldr	r2, [r4, #88]	; 0x58
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 80a80fc:	6de0      	ldr	r0, [r4, #92]	; 0x5c
{
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
 80a80fe:	7813      	ldrb	r3, [r2, #0]
 80a8100:	66e3      	str	r3, [r4, #108]	; 0x6c
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 80a8102:	7805      	ldrb	r5, [r0, #0]
 80a8104:	7841      	ldrb	r1, [r0, #1]
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 80a8106:	3b14      	subs	r3, #20
    int major_ver, minor_ver;

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 80a8108:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 80a810c:	6721      	str	r1, [r4, #112]	; 0x70
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 80a810e:	2b03      	cmp	r3, #3
    else
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
 80a8110:	7855      	ldrb	r5, [r2, #1]

    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );

    ssl->in_msgtype =  ssl->in_hdr[0];
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
    mbedtls_ssl_read_version( &major_ver, &minor_ver, ssl->conf->transport, ssl->in_hdr + 1 );
 80a8112:	6820      	ldr	r0, [r4, #0]
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
        *minor = ver[1];
 80a8114:	7892      	ldrb	r2, [r2, #2]
                        "version = [%d:%d], msglen = %d",
                        ssl->in_msgtype,
                        major_ver, minor_ver, ssl->in_msglen ) );

    /* Check record type */
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 80a8116:	d905      	bls.n	80a8124 <mbedtls_ssl_read_record_layer+0x78>
        /* Silently ignore invalid DTLS records as recommended by RFC 6347
         * Section 4.1.2.7 */
        if( ssl->conf->transport != MBEDTLS_SSL_TRANSPORT_DATAGRAM )
#endif /* MBEDTLS_SSL_PROTO_DTLS */
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                    MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 80a8118:	220a      	movs	r2, #10
 80a811a:	2102      	movs	r1, #2
 80a811c:	4620      	mov	r0, r4
 80a811e:	f7ff ffad 	bl	80a807c <mbedtls_ssl_send_alert_message>
 80a8122:	e0af      	b.n	80a8284 <mbedtls_ssl_read_record_layer+0x1d8>

        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    /* Check version */
    if( major_ver != ssl->major_ver )
 80a8124:	68a3      	ldr	r3, [r4, #8]
 80a8126:	429d      	cmp	r5, r3
 80a8128:	f040 80ac 	bne.w	80a8284 <mbedtls_ssl_read_record_layer+0x1d8>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "major version mismatch" ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    if( minor_ver > ssl->conf->max_minor_ver )
 80a812c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80a8130:	429a      	cmp	r2, r3
 80a8132:	f300 80a7 	bgt.w	80a8284 <mbedtls_ssl_read_record_layer+0x1d8>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "minor version mismatch" ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    /* Check length against the size of our buffer */
    if( ssl->in_msglen > MBEDTLS_SSL_BUFFER_LEN
 80a8136:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80a8138:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a813a:	1a9b      	subs	r3, r3, r2
 80a813c:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
 80a8140:	332d      	adds	r3, #45	; 0x2d
 80a8142:	4299      	cmp	r1, r3
 80a8144:	f200 809e 	bhi.w	80a8284 <mbedtls_ssl_read_record_layer+0x1d8>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
    }

    /* Check length against bounds of the current transform and version */
    if( ssl->transform_in == NULL )
 80a8148:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80a814a:	b923      	cbnz	r3, 80a8156 <mbedtls_ssl_read_record_layer+0xaa>
    {
        if( ssl->in_msglen < 1 ||
 80a814c:	1e4b      	subs	r3, r1, #1
 80a814e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80a8152:	d30c      	bcc.n	80a816e <mbedtls_ssl_read_record_layer+0xc2>
 80a8154:	e096      	b.n	80a8284 <mbedtls_ssl_read_record_layer+0x1d8>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }
    }
    else
    {
        if( ssl->in_msglen < ssl->transform_in->minlen )
 80a8156:	689b      	ldr	r3, [r3, #8]
 80a8158:	4299      	cmp	r1, r3
 80a815a:	f0c0 8093 	bcc.w	80a8284 <mbedtls_ssl_read_record_layer+0x1d8>
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
        /*
         * TLS encrypted messages can have up to 256 bytes of padding
         */
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
 80a815e:	68e2      	ldr	r2, [r4, #12]
 80a8160:	2a00      	cmp	r2, #0
 80a8162:	dd04      	ble.n	80a816e <mbedtls_ssl_read_record_layer+0xc2>
 80a8164:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80a8168:	4299      	cmp	r1, r3
 80a816a:	f200 808b 	bhi.w	80a8284 <mbedtls_ssl_read_record_layer+0x1d8>
    }

    /*
     * Read and optionally decrypt the message contents
     */
    if( ( ret = mbedtls_ssl_fetch_input( ssl,
 80a816e:	3105      	adds	r1, #5
 80a8170:	4620      	mov	r0, r4
 80a8172:	f7ff fdf3 	bl	80a7d5c <mbedtls_ssl_fetch_input>
 80a8176:	2800      	cmp	r0, #0
 80a8178:	f040 8087 	bne.w	80a828a <mbedtls_ssl_read_record_layer+0x1de>

        if( ret == 0 )
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
 80a817c:	6b66      	ldr	r6, [r4, #52]	; 0x34
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        ssl->next_record_offset = ssl->in_msglen + mbedtls_ssl_hdr_len( ssl );
    else
#endif
        ssl->in_left = 0;
 80a817e:	6760      	str	r0, [r4, #116]	; 0x74

        if( ret == 0 )
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
 80a8180:	2e00      	cmp	r6, #0
 80a8182:	f000 8081 	beq.w	80a8288 <mbedtls_ssl_read_record_layer+0x1dc>
    size_t padlen = 0, correct = 1;
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );

    if( ssl->session_in == NULL || ssl->transform_in == NULL )
 80a8186:	6a23      	ldr	r3, [r4, #32]
 80a8188:	2b00      	cmp	r3, #0
 80a818a:	d079      	beq.n	80a8280 <mbedtls_ssl_read_record_layer+0x1d4>
 * \return       The mode of operation, or #MBEDTLS_MODE_NONE if
 *               \p ctx has not been initialized.
 */
static inline mbedtls_cipher_mode_t mbedtls_cipher_get_cipher_mode( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
 80a818c:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 80a8190:	b103      	cbz	r3, 80a8194 <mbedtls_ssl_read_record_layer+0xe8>
        return MBEDTLS_MODE_NONE;

    return ctx->cipher_info->mode;
 80a8192:	785b      	ldrb	r3, [r3, #1]
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    mode = mbedtls_cipher_get_cipher_mode( &ssl->transform_in->cipher_ctx_dec );

    if( ssl->in_msglen < ssl->transform_in->minlen )
 80a8194:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80a8196:	68b1      	ldr	r1, [r6, #8]
 80a8198:	428a      	cmp	r2, r1
 80a819a:	d359      	bcc.n	80a8250 <mbedtls_ssl_read_record_layer+0x1a4>
        }
    }
    else
#endif /* MBEDTLS_ARC4_C || MBEDTLS_CIPHER_NULL_CIPHER */
#if defined(MBEDTLS_GCM_C) || defined(MBEDTLS_CCM_C)
    if( mode == MBEDTLS_MODE_GCM ||
 80a819c:	2b06      	cmp	r3, #6
 80a819e:	d001      	beq.n	80a81a4 <mbedtls_ssl_read_record_layer+0xf8>
 80a81a0:	2b08      	cmp	r3, #8
 80a81a2:	d16d      	bne.n	80a8280 <mbedtls_ssl_read_record_layer+0x1d4>
        int ret;
        size_t dec_msglen, olen;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
 80a81a4:	6833      	ldr	r3, [r6, #0]
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
        size_t explicit_iv_len = ssl->transform_in->ivlen -
                                 ssl->transform_in->fixed_ivlen;
 80a81a6:	6935      	ldr	r5, [r6, #16]
        size_t dec_msglen, olen;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 80a81a8:	7f1b      	ldrb	r3, [r3, #28]
 80a81aa:	f013 0f02 	tst.w	r3, #2
        size_t explicit_iv_len = ssl->transform_in->ivlen -
                                 ssl->transform_in->fixed_ivlen;
 80a81ae:	68f3      	ldr	r3, [r6, #12]
        size_t dec_msglen, olen;
        unsigned char *dec_msg;
        unsigned char *dec_msg_result;
        unsigned char add_data[13];
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;
 80a81b0:	bf14      	ite	ne
 80a81b2:	2708      	movne	r7, #8
 80a81b4:	2710      	moveq	r7, #16
        size_t explicit_iv_len = ssl->transform_in->ivlen -
                                 ssl->transform_in->fixed_ivlen;
 80a81b6:	1b5d      	subs	r5, r3, r5

        if( ssl->in_msglen < explicit_iv_len + taglen )
 80a81b8:	19eb      	adds	r3, r5, r7
 80a81ba:	429a      	cmp	r2, r3
 80a81bc:	d348      	bcc.n	80a8250 <mbedtls_ssl_read_record_layer+0x1a4>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < explicit_iv_len (%d) "
                                "+ taglen (%d)", ssl->in_msglen,
                                explicit_iv_len, taglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;
 80a81be:	1b55      	subs	r5, r2, r5
 80a81c0:	1bed      	subs	r5, r5, r7

        dec_msg = ssl->in_msg;
        dec_msg_result = ssl->in_msg;
        ssl->in_msglen = dec_msglen;

        memcpy( add_data, ssl->in_ctr, 8 );
 80a81c2:	6d62      	ldr	r2, [r4, #84]	; 0x54
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;

        dec_msg = ssl->in_msg;
        dec_msg_result = ssl->in_msg;
        ssl->in_msglen = dec_msglen;
 80a81c4:	6725      	str	r5, [r4, #112]	; 0x70

        memcpy( add_data, ssl->in_ctr, 8 );
 80a81c6:	6810      	ldr	r0, [r2, #0]
 80a81c8:	6851      	ldr	r1, [r2, #4]
 80a81ca:	ab0a      	add	r3, sp, #40	; 0x28
 80a81cc:	c303      	stmia	r3!, {r0, r1}
        add_data[8]  = ssl->in_msgtype;
 80a81ce:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 80a81d0:	68a2      	ldr	r2, [r4, #8]
        dec_msg = ssl->in_msg;
        dec_msg_result = ssl->in_msg;
        ssl->in_msglen = dec_msglen;

        memcpy( add_data, ssl->in_ctr, 8 );
        add_data[8]  = ssl->in_msgtype;
 80a81d2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 80a81d6:	68e3      	ldr	r3, [r4, #12]
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->in_msglen >> 8 ) & 0xFF;
        add_data[12] = ssl->in_msglen & 0xFF;
 80a81d8:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
        ver[1] = (unsigned char) minor;
 80a81dc:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32

        memcpy( add_data, ssl->in_ctr, 8 );
        add_data[8]  = ssl->in_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
                           ssl->conf->transport, add_data + 9 );
        add_data[11] = ( ssl->in_msglen >> 8 ) & 0xFF;
 80a81e0:	0a2b      	lsrs	r3, r5, #8
 80a81e2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
        add_data[12] = ssl->in_msglen & 0xFF;

        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
                       add_data, 13 );

        memcpy( ssl->transform_in->iv_dec + ssl->transform_in->fixed_ivlen,
 80a81e6:	6933      	ldr	r3, [r6, #16]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 80a81e8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
                       add_data, 13 );

        memcpy( ssl->transform_in->iv_dec + ssl->transform_in->fixed_ivlen,
                ssl->in_iv,
                ssl->transform_in->ivlen - ssl->transform_in->fixed_ivlen );
 80a81ec:	68f2      	ldr	r2, [r6, #12]
                                explicit_iv_len, taglen ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;

        dec_msg = ssl->in_msg;
 80a81ee:	f8d4 8064 	ldr.w	r8, [r4, #100]	; 0x64
        add_data[12] = ssl->in_msglen & 0xFF;

        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
                       add_data, 13 );

        memcpy( ssl->transform_in->iv_dec + ssl->transform_in->fixed_ivlen,
 80a81f2:	f106 0028 	add.w	r0, r6, #40	; 0x28
                ssl->in_iv,
                ssl->transform_in->ivlen - ssl->transform_in->fixed_ivlen );
 80a81f6:	1ad2      	subs	r2, r2, r3
 80a81f8:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80a81fa:	4418      	add	r0, r3
 80a81fc:	f006 ff79 	bl	80af0f2 <memcpy>
        MBEDTLS_SSL_DEBUG_BUF( 4, "TAG used", dec_msg + dec_msglen, taglen );

        /*
         * Decrypt and authenticate
         */
        if( ( ret = mbedtls_cipher_auth_decrypt( &ssl->transform_in->cipher_ctx_dec,
 80a8200:	eb08 0305 	add.w	r3, r8, r5
 80a8204:	9305      	str	r3, [sp, #20]
 80a8206:	ab09      	add	r3, sp, #36	; 0x24
 80a8208:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80a820a:	9304      	str	r3, [sp, #16]
 80a820c:	230d      	movs	r3, #13
 80a820e:	9300      	str	r3, [sp, #0]
 80a8210:	9706      	str	r7, [sp, #24]
 80a8212:	f8cd 800c 	str.w	r8, [sp, #12]
 80a8216:	9502      	str	r5, [sp, #8]
 80a8218:	f8cd 8004 	str.w	r8, [sp, #4]
 80a821c:	68c2      	ldr	r2, [r0, #12]
 80a821e:	f100 0128 	add.w	r1, r0, #40	; 0x28
 80a8222:	ab0a      	add	r3, sp, #40	; 0x28
 80a8224:	3088      	adds	r0, #136	; 0x88
 80a8226:	f7f9 fb7f 	bl	80a1928 <mbedtls_cipher_auth_decrypt>
 80a822a:	b120      	cbz	r0, 80a8236 <mbedtls_ssl_read_record_layer+0x18a>
                                         dec_msg_result, &olen,
                                         dec_msg + dec_msglen, taglen ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_decrypt", ret );

            if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
 80a822c:	f510 4fc6 	cmn.w	r0, #25344	; 0x6300
 80a8230:	d00e      	beq.n	80a8250 <mbedtls_ssl_read_record_layer+0x1a4>
            done = 1;
    }
#endif /* MBEDTLS_SSL_HW_RECORD_ACCEL */
    if( !done && ssl->transform_in != NULL )
    {
        if( ( ret = ssl_decrypt_buf( ssl ) ) != 0 )
 80a8232:	b1c0      	cbz	r0, 80a8266 <mbedtls_ssl_read_record_layer+0x1ba>
 80a8234:	e029      	b.n	80a828a <mbedtls_ssl_read_record_layer+0x1de>

            return( ret );
        }
        auth_done++;

        if( olen != dec_msglen )
 80a8236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a8238:	429d      	cmp	r5, r3
 80a823a:	d121      	bne.n	80a8280 <mbedtls_ssl_read_record_layer+0x1d4>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    if( ssl->in_msglen == 0 )
 80a823c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80a823e:	b94b      	cbnz	r3, 80a8254 <mbedtls_ssl_read_record_layer+0x1a8>
    {
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3
 80a8240:	68e3      	ldr	r3, [r4, #12]
 80a8242:	2b03      	cmp	r3, #3
 80a8244:	d014      	beq.n	80a8270 <mbedtls_ssl_read_record_layer+0x1c4>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid zero-length message type: %d", ssl->in_msgtype ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

        ssl->nb_zero++;
 80a8246:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80a8248:	3301      	adds	r3, #1

        /*
         * Three or more empty messages may be a DoS attack
         * (excessive CPU consumption).
         */
        if( ssl->nb_zero > 3 )
 80a824a:	2b03      	cmp	r3, #3
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid zero-length message type: %d", ssl->in_msgtype ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
        }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

        ssl->nb_zero++;
 80a824c:	67e3      	str	r3, [r4, #124]	; 0x7c

        /*
         * Three or more empty messages may be a DoS attack
         * (excessive CPU consumption).
         */
        if( ssl->nb_zero > 3 )
 80a824e:	dd02      	ble.n	80a8256 <mbedtls_ssl_read_record_layer+0x1aa>
                                         dec_msg + dec_msglen, taglen ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_decrypt", ret );

            if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
                return( MBEDTLS_ERR_SSL_INVALID_MAC );
 80a8250:	480f      	ldr	r0, [pc, #60]	; (80a8290 <mbedtls_ssl_read_record_layer+0x1e4>)
 80a8252:	e01a      	b.n	80a828a <mbedtls_ssl_read_record_layer+0x1de>
                                "messages, possible DoS attack" ) );
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
        }
    }
    else
        ssl->nb_zero = 0;
 80a8254:	67e0      	str	r0, [r4, #124]	; 0x7c
                                         dec_msg_result, &olen,
                                         dec_msg + dec_msglen, taglen ) ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_decrypt", ret );

            if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
 80a8256:	2208      	movs	r2, #8
    }
    else
#endif
    {
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
            if( ++ssl->in_ctr[i - 1] != 0 )
 80a8258:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80a825a:	3a01      	subs	r2, #1
 80a825c:	5c8b      	ldrb	r3, [r1, r2]
 80a825e:	3301      	adds	r3, #1
 80a8260:	b2db      	uxtb	r3, r3
 80a8262:	548b      	strb	r3, [r1, r2]
 80a8264:	b143      	cbz	r3, 80a8278 <mbedtls_ssl_read_record_layer+0x1cc>
        }

        MBEDTLS_SSL_DEBUG_BUF( 4, "input payload after decrypt",
                       ssl->in_msg, ssl->in_msglen );

        if( ssl->in_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
 80a8266:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80a8268:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80a826c:	d90c      	bls.n	80a8288 <mbedtls_ssl_read_record_layer+0x1dc>
 80a826e:	e009      	b.n	80a8284 <mbedtls_ssl_read_record_layer+0x1d8>

    if( ssl->in_msglen == 0 )
    {
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3
            && ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
 80a8270:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80a8272:	2b17      	cmp	r3, #23
 80a8274:	d0e7      	beq.n	80a8246 <mbedtls_ssl_read_record_layer+0x19a>
 80a8276:	e005      	b.n	80a8284 <mbedtls_ssl_read_record_layer+0x1d8>
        ; /* in_ctr read from peer, not maintained internally */
    }
    else
#endif
    {
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
 80a8278:	2a00      	cmp	r2, #0
 80a827a:	d1ed      	bne.n	80a8258 <mbedtls_ssl_read_record_layer+0x1ac>

        /* The loop goes to its end iff the counter is wrapping */
        if( i == ssl_ep_len( ssl ) )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "incoming message counter would wrap" ) );
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 80a827c:	4805      	ldr	r0, [pc, #20]	; (80a8294 <mbedtls_ssl_read_record_layer+0x1e8>)
 80a827e:	e004      	b.n	80a828a <mbedtls_ssl_read_record_layer+0x1de>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );

    if( ssl->session_in == NULL || ssl->transform_in == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80a8280:	4805      	ldr	r0, [pc, #20]	; (80a8298 <mbedtls_ssl_read_record_layer+0x1ec>)
 80a8282:	e002      	b.n	80a828a <mbedtls_ssl_read_record_layer+0x1de>
                       ssl->in_msg, ssl->in_msglen );

        if( ssl->in_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 80a8284:	4805      	ldr	r0, [pc, #20]	; (80a829c <mbedtls_ssl_read_record_layer+0x1f0>)
 80a8286:	e000      	b.n	80a828a <mbedtls_ssl_read_record_layer+0x1de>
            ssl_handshake_wrapup_free_hs_transform( ssl );
        }
    }
#endif

    return( 0 );
 80a8288:	2000      	movs	r0, #0
}
 80a828a:	b00e      	add	sp, #56	; 0x38
 80a828c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a8290:	ffff8e80 	.word	0xffff8e80
 80a8294:	ffff9480 	.word	0xffff9480
 80a8298:	ffff9400 	.word	0xffff9400
 80a829c:	ffff8e00 	.word	0xffff8e00

080a82a0 <mbedtls_ssl_read_record>:
 * Silently ignore non-fatal alert (and for DTLS, invalid records as well,
 * RFC 6347 4.1.2.7) and continue reading until a valid record is found.
 *
 */
int mbedtls_ssl_read_record( mbedtls_ssl_context *ssl )
{
 80a82a0:	b538      	push	{r3, r4, r5, lr}
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );

    if( ssl->keep_current_message == 0 )
 80a82a2:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
 * Silently ignore non-fatal alert (and for DTLS, invalid records as well,
 * RFC 6347 4.1.2.7) and continue reading until a valid record is found.
 *
 */
int mbedtls_ssl_read_record( mbedtls_ssl_context *ssl )
{
 80a82a6:	4605      	mov	r5, r0
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );

    if( ssl->keep_current_message == 0 )
 80a82a8:	b98c      	cbnz	r4, 80a82ce <mbedtls_ssl_read_record+0x2e>
    {
        do {

            if( ( ret = mbedtls_ssl_read_record_layer( ssl ) ) != 0 )
 80a82aa:	4628      	mov	r0, r5
 80a82ac:	f7ff fefe 	bl	80a80ac <mbedtls_ssl_read_record_layer>
 80a82b0:	b988      	cbnz	r0, 80a82d6 <mbedtls_ssl_read_record+0x36>
            {
                MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
                return( ret );
            }

            ret = mbedtls_ssl_handle_message_type( ssl );
 80a82b2:	4628      	mov	r0, r5
 80a82b4:	f7ff feb2 	bl	80a801c <mbedtls_ssl_handle_message_type>

        } while( MBEDTLS_ERR_SSL_NON_FATAL == ret );
 80a82b8:	f510 4fcd 	cmn.w	r0, #26240	; 0x6680
 80a82bc:	d0f5      	beq.n	80a82aa <mbedtls_ssl_read_record+0xa>

        if( 0 != ret )
 80a82be:	b950      	cbnz	r0, 80a82d6 <mbedtls_ssl_read_record+0x36>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
            return( ret );
        }

        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 80a82c0:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80a82c2:	2b16      	cmp	r3, #22
 80a82c4:	d108      	bne.n	80a82d8 <mbedtls_ssl_read_record+0x38>
        {
            mbedtls_ssl_update_handshake_status( ssl );
 80a82c6:	4628      	mov	r0, r5
 80a82c8:	f7ff fe98 	bl	80a7ffc <mbedtls_ssl_update_handshake_status>
 80a82cc:	e004      	b.n	80a82d8 <mbedtls_ssl_read_record+0x38>
        }
    }
    else
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= reuse previously read message" ) );
        ssl->keep_current_message = 0;
 80a82ce:	2400      	movs	r4, #0
 80a82d0:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
 80a82d4:	e000      	b.n	80a82d8 <mbedtls_ssl_read_record+0x38>
 80a82d6:	4604      	mov	r4, r0
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read record" ) );

    return( 0 );
}
 80a82d8:	4620      	mov	r0, r4
 80a82da:	bd38      	pop	{r3, r4, r5, pc}

080a82dc <mbedtls_ssl_write_certificate>:

#else
/* Some certificate support -> implement write and parse */

int mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl )
{
 80a82dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_x509_crt *crt;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 80a82de:	6c03      	ldr	r3, [r0, #64]	; 0x40

#else
/* Some certificate support -> implement write and parse */

int mbedtls_ssl_write_certificate( mbedtls_ssl_context *ssl )
{
 80a82e0:	4604      	mov	r4, r0
    const mbedtls_x509_crt *crt;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 80a82e2:	681b      	ldr	r3, [r3, #0]
 80a82e4:	7a9a      	ldrb	r2, [r3, #10]
 80a82e6:	2a0b      	cmp	r2, #11
 80a82e8:	d809      	bhi.n	80a82fe <mbedtls_ssl_write_certificate+0x22>
 80a82ea:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80a82ee:	40d3      	lsrs	r3, r2
 80a82f0:	07da      	lsls	r2, r3, #31
 80a82f2:	d504      	bpl.n	80a82fe <mbedtls_ssl_write_certificate+0x22>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
        ssl->state++;
 80a82f4:	6863      	ldr	r3, [r4, #4]
        return( 0 );
 80a82f6:	2000      	movs	r0, #0
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
        ssl->state++;
 80a82f8:	3301      	adds	r3, #1
 80a82fa:	6063      	str	r3, [r4, #4]
        return( 0 );
 80a82fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 80a82fe:	6822      	ldr	r2, [r4, #0]
 80a8300:	f892 3060 	ldrb.w	r3, [r2, #96]	; 0x60
 80a8304:	07db      	lsls	r3, r3, #31
 80a8306:	d403      	bmi.n	80a8310 <mbedtls_ssl_write_certificate+0x34>
    {
        if( ssl->client_auth == 0 )
 80a8308:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 80a830c:	2b00      	cmp	r3, #0
 80a830e:	d0f1      	beq.n	80a82f4 <mbedtls_ssl_write_certificate+0x18>

static inline mbedtls_x509_crt *mbedtls_ssl_own_cert( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 80a8310:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80a8312:	b10b      	cbz	r3, 80a8318 <mbedtls_ssl_write_certificate+0x3c>
 80a8314:	685b      	ldr	r3, [r3, #4]
 80a8316:	b90b      	cbnz	r3, 80a831c <mbedtls_ssl_write_certificate+0x40>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
 80a8318:	6c93      	ldr	r3, [r2, #72]	; 0x48

    return( key_cert == NULL ? NULL : key_cert->cert );
 80a831a:	b30b      	cbz	r3, 80a8360 <mbedtls_ssl_write_certificate+0x84>
 80a831c:	681e      	ldr	r6, [r3, #0]
 80a831e:	2307      	movs	r3, #7
     *    n+3 . ...   upper level cert, etc.
     */
    i = 7;
    crt = mbedtls_ssl_own_cert( ssl );

    while( crt != NULL )
 80a8320:	b1fe      	cbz	r6, 80a8362 <mbedtls_ssl_write_certificate+0x86>
    {
        n = crt->raw.len;
 80a8322:	6875      	ldr	r5, [r6, #4]
        if( n > MBEDTLS_SSL_MAX_CONTENT_LEN - 3 - i )
 80a8324:	f5c3 52ff 	rsb	r2, r3, #8160	; 0x1fe0
 80a8328:	321d      	adds	r2, #29
 80a832a:	4295      	cmp	r5, r2
 80a832c:	d836      	bhi.n	80a839c <mbedtls_ssl_write_certificate+0xc0>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
                           i + 3 + n, MBEDTLS_SSL_MAX_CONTENT_LEN ) );
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
        }

        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
 80a832e:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80a8332:	0c29      	lsrs	r1, r5, #16
 80a8334:	54d1      	strb	r1, [r2, r3]
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
 80a8336:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80a833a:	0a29      	lsrs	r1, r5, #8
 80a833c:	441a      	add	r2, r3
 80a833e:	7051      	strb	r1, [r2, #1]
        ssl->out_msg[i + 2] = (unsigned char)( n       );
 80a8340:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
 80a8344:	1cdf      	adds	r7, r3, #3
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
        }

        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
        ssl->out_msg[i + 2] = (unsigned char)( n       );
 80a8346:	441a      	add	r2, r3
 80a8348:	7095      	strb	r5, [r2, #2]

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
 80a834a:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 80a834e:	68b1      	ldr	r1, [r6, #8]
 80a8350:	462a      	mov	r2, r5
 80a8352:	4438      	add	r0, r7
 80a8354:	f006 fecd 	bl	80af0f2 <memcpy>
        i += n; crt = crt->next;
 80a8358:	19eb      	adds	r3, r5, r7
 80a835a:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
     *    n+3 . ...   upper level cert, etc.
     */
    i = 7;
    crt = mbedtls_ssl_own_cert( ssl );

    while( crt != NULL )
 80a835e:	e7df      	b.n	80a8320 <mbedtls_ssl_write_certificate+0x44>
 80a8360:	2307      	movs	r3, #7

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
        i += n; crt = crt->next;
    }

    ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );
 80a8362:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80a8366:	1fda      	subs	r2, r3, #7
 80a8368:	0c10      	lsrs	r0, r2, #16
 80a836a:	7108      	strb	r0, [r1, #4]
    ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );
 80a836c:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80a8370:	0a10      	lsrs	r0, r2, #8
 80a8372:	7148      	strb	r0, [r1, #5]
    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
 80a8374:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
write_msg:
#endif

    ssl->state++;

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 80a8378:	4620      	mov	r0, r4
        i += n; crt = crt->next;
    }

    ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );
    ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );
    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
 80a837a:	718a      	strb	r2, [r1, #6]

    ssl->out_msglen  = i;
 80a837c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 80a8380:	2316      	movs	r3, #22
 80a8382:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE;
 80a8386:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80a838a:	220b      	movs	r2, #11
 80a838c:	701a      	strb	r2, [r3, #0]

#if defined(MBEDTLS_SSL_PROTO_SSL3) && defined(MBEDTLS_SSL_CLI_C)
write_msg:
#endif

    ssl->state++;
 80a838e:	6863      	ldr	r3, [r4, #4]
 80a8390:	3301      	adds	r3, #1
 80a8392:	6063      	str	r3, [r4, #4]
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );

    return( ret );
}
 80a8394:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
write_msg:
#endif

    ssl->state++;

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 80a8398:	f7ff bd5e 	b.w	80a7e58 <mbedtls_ssl_write_record>
        n = crt->raw.len;
        if( n > MBEDTLS_SSL_MAX_CONTENT_LEN - 3 - i )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
                           i + 3 + n, MBEDTLS_SSL_MAX_CONTENT_LEN ) );
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
 80a839c:	4800      	ldr	r0, [pc, #0]	; (80a83a0 <mbedtls_ssl_write_certificate+0xc4>)
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );

    return( ret );
}
 80a839e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a83a0:	ffff8b00 	.word	0xffff8b00

080a83a4 <mbedtls_ssl_write_change_cipher_spec>:
{
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );

    ssl->out_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;
 80a83a4:	2214      	movs	r2, #20
    ssl->out_msglen  = 1;
    ssl->out_msg[0]  = 1;
 80a83a6:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
{
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );

    ssl->out_msgtype = MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC;
 80a83aa:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
    ssl->out_msglen  = 1;
 80a83ae:	2201      	movs	r2, #1
 80a83b0:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
    ssl->out_msg[0]  = 1;
 80a83b4:	700a      	strb	r2, [r1, #0]

    ssl->state++;
 80a83b6:	6842      	ldr	r2, [r0, #4]
 80a83b8:	3201      	adds	r2, #1
 80a83ba:	6042      	str	r2, [r0, #4]

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 80a83bc:	f7ff bd4c 	b.w	80a7e58 <mbedtls_ssl_write_record>

080a83c0 <mbedtls_ssl_parse_change_cipher_spec>:

    return( 0 );
}

int mbedtls_ssl_parse_change_cipher_spec( mbedtls_ssl_context *ssl )
{
 80a83c0:	b510      	push	{r4, lr}
 80a83c2:	4604      	mov	r4, r0
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse change cipher spec" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 80a83c4:	f7ff ff6c 	bl	80a82a0 <mbedtls_ssl_read_record>
 80a83c8:	2800      	cmp	r0, #0
 80a83ca:	d12f      	bne.n	80a842c <mbedtls_ssl_parse_change_cipher_spec+0x6c>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
 80a83cc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80a83ce:	2b14      	cmp	r3, #20
 80a83d0:	d006      	beq.n	80a83e0 <mbedtls_ssl_parse_change_cipher_spec+0x20>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 80a83d2:	220a      	movs	r2, #10
 80a83d4:	2102      	movs	r1, #2
 80a83d6:	4620      	mov	r0, r4
 80a83d8:	f7ff fe50 	bl	80a807c <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 80a83dc:	4814      	ldr	r0, [pc, #80]	; (80a8430 <mbedtls_ssl_parse_change_cipher_spec+0x70>)
 80a83de:	bd10      	pop	{r4, pc}
    }

    if( ssl->in_msglen != 1 || ssl->in_msg[0] != 1 )
 80a83e0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80a83e2:	2b01      	cmp	r3, #1
 80a83e4:	d103      	bne.n	80a83ee <mbedtls_ssl_parse_change_cipher_spec+0x2e>
 80a83e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80a83e8:	781b      	ldrb	r3, [r3, #0]
 80a83ea:	2b01      	cmp	r3, #1
 80a83ec:	d006      	beq.n	80a83fc <mbedtls_ssl_parse_change_cipher_spec+0x3c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 80a83ee:	2232      	movs	r2, #50	; 0x32
 80a83f0:	2102      	movs	r1, #2
 80a83f2:	4620      	mov	r0, r4
 80a83f4:	f7ff fe42 	bl	80a807c <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC );
 80a83f8:	480e      	ldr	r0, [pc, #56]	; (80a8434 <mbedtls_ssl_parse_change_cipher_spec+0x74>)
 80a83fa:	bd10      	pop	{r4, pc}
    /*
     * Switch to our negotiated transform and session parameters for inbound
     * data.
     */
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for inbound data" ) );
    ssl->transform_in = ssl->transform_negotiate;
 80a83fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80a83fe:	6363      	str	r3, [r4, #52]	; 0x34
    ssl->session_in = ssl->session_negotiate;
 80a8400:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80a8402:	6223      	str	r3, [r4, #32]
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
        }
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->in_ctr, 0, 8 );
 80a8404:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80a8406:	6018      	str	r0, [r3, #0]
 80a8408:	6058      	str	r0, [r3, #4]

    /*
     * Set the in_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 80a840a:	68e3      	ldr	r3, [r4, #12]
 80a840c:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80a840e:	2b01      	cmp	r3, #1
    {
        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
 80a8410:	bfc9      	itett	gt
 80a8412:	6c23      	ldrgt	r3, [r4, #64]	; 0x40
                      ssl->transform_negotiate->fixed_ivlen;
    }
    else
        ssl->in_msg = ssl->in_iv;
 80a8414:	6661      	strle	r1, [r4, #100]	; 0x64
     * Set the in_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
                      ssl->transform_negotiate->fixed_ivlen;
 80a8416:	68da      	ldrgt	r2, [r3, #12]
 80a8418:	691b      	ldrgt	r3, [r3, #16]

    ssl->state++;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );

    return( 0 );
 80a841a:	f04f 0000 	mov.w	r0, #0
     * Set the in_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
                      ssl->transform_negotiate->fixed_ivlen;
 80a841e:	bfc2      	ittt	gt
 80a8420:	1ad3      	subgt	r3, r2, r3
 80a8422:	185b      	addgt	r3, r3, r1
 80a8424:	6663      	strgt	r3, [r4, #100]	; 0x64
            return( MBEDTLS_ERR_SSL_HW_ACCEL_FAILED );
        }
    }
#endif

    ssl->state++;
 80a8426:	6863      	ldr	r3, [r4, #4]
 80a8428:	3301      	adds	r3, #1
 80a842a:	6063      	str	r3, [r4, #4]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );

    return( 0 );
}
 80a842c:	bd10      	pop	{r4, pc}
 80a842e:	bf00      	nop
 80a8430:	ffff8900 	.word	0xffff8900
 80a8434:	ffff8200 	.word	0xffff8200

080a8438 <mbedtls_ssl_optimize_checksum>:
        ssl->handshake->update_checksum = ssl_update_checksum_md5sha1;
    else
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA512_C)
    if( ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
 80a8438:	7a4b      	ldrb	r3, [r1, #9]
 80a843a:	2b07      	cmp	r3, #7
        ssl->handshake->update_checksum = ssl_update_checksum_sha384;
 80a843c:	bf08      	it	eq
 80a843e:	4a03      	ldreq	r2, [pc, #12]	; (80a844c <mbedtls_ssl_optimize_checksum+0x14>)
 80a8440:	6b03      	ldr	r3, [r0, #48]	; 0x30
    else
#endif
#if defined(MBEDTLS_SHA256_C)
    if( ciphersuite_info->mac != MBEDTLS_MD_SHA384 )
        ssl->handshake->update_checksum = ssl_update_checksum_sha256;
 80a8442:	bf18      	it	ne
 80a8444:	4a02      	ldrne	r2, [pc, #8]	; (80a8450 <mbedtls_ssl_optimize_checksum+0x18>)
 80a8446:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
 80a844a:	4770      	bx	lr
 80a844c:	080a7a79 	.word	0x080a7a79
 80a8450:	080a7a71 	.word	0x080a7a71

080a8454 <mbedtls_ssl_write_finished>:

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup" ) );
}

int mbedtls_ssl_write_finished( mbedtls_ssl_context *ssl )
{
 80a8454:	b510      	push	{r4, lr}
 80a8456:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write finished" ) );

    /*
     * Set the out_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 80a8458:	68c3      	ldr	r3, [r0, #12]
 80a845a:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94
 80a845e:	2b01      	cmp	r3, #1
    {
        ssl->out_msg = ssl->out_iv + ssl->transform_negotiate->ivlen -
 80a8460:	bfc9      	itett	gt
 80a8462:	6c03      	ldrgt	r3, [r0, #64]	; 0x40
                       ssl->transform_negotiate->fixed_ivlen;
    }
    else
        ssl->out_msg = ssl->out_iv;
 80a8464:	f8c0 1098 	strle.w	r1, [r0, #152]	; 0x98
     * Set the out_msg pointer to the correct location based on IV length
     */
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
    {
        ssl->out_msg = ssl->out_iv + ssl->transform_negotiate->ivlen -
                       ssl->transform_negotiate->fixed_ivlen;
 80a8468:	68da      	ldrgt	r2, [r3, #12]
 80a846a:	691b      	ldrgt	r3, [r3, #16]
 80a846c:	bfc2      	ittt	gt
 80a846e:	1ad3      	subgt	r3, r2, r3
 80a8470:	185b      	addgt	r3, r3, r1
 80a8472:	f8c0 3098 	strgt.w	r3, [r0, #152]	; 0x98
    }
    else
        ssl->out_msg = ssl->out_iv;

    ssl->handshake->calc_finished( ssl, ssl->out_msg + 4, ssl->conf->endpoint );
 80a8476:	6803      	ldr	r3, [r0, #0]
 80a8478:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
 80a847c:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80a8480:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80a8482:	f002 0201 	and.w	r2, r2, #1
 80a8486:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80a848a:	3104      	adds	r1, #4
 80a848c:	4798      	blx	r3
     * RFC 5246 7.4.9 (Page 63) says 12 is the default length and ciphersuites
     * may define some other value. Currently (early 2016), no defined
     * ciphersuite does this (and this is unlikely to change as activity has
     * moved to TLS 1.3 now) so we can keep the hardcoded 12 here.
     */
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
 80a848e:	68e3      	ldr	r3, [r4, #12]
    memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );
#endif

    ssl->out_msglen  = 4 + hash_len;
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
 80a8490:	2214      	movs	r2, #20
     * RFC 5246 7.4.9 (Page 63) says 12 is the default length and ciphersuites
     * may define some other value. Currently (early 2016), no defined
     * ciphersuite does this (and this is unlikely to change as activity has
     * moved to TLS 1.3 now) so we can keep the hardcoded 12 here.
     */
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
 80a8492:	2b00      	cmp	r3, #0
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    ssl->verify_data_len = hash_len;
    memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );
#endif

    ssl->out_msglen  = 4 + hash_len;
 80a8494:	bf14      	ite	ne
 80a8496:	2310      	movne	r3, #16
 80a8498:	2328      	moveq	r3, #40	; 0x28
 80a849a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 80a849e:	2316      	movs	r3, #22
 80a84a0:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
 80a84a4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80a84a8:	701a      	strb	r2, [r3, #0]

    /*
     * In case of session resuming, invert the client and server
     * ChangeCipherSpec messages order.
     */
    if( ssl->handshake->resume != 0 )
 80a84aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80a84ac:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 80a84b0:	b133      	cbz	r3, 80a84c0 <mbedtls_ssl_write_finished+0x6c>
    {
#if defined(MBEDTLS_SSL_CLI_C)
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 80a84b2:	6823      	ldr	r3, [r4, #0]
 80a84b4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80a84b8:	07db      	lsls	r3, r3, #31
 80a84ba:	d404      	bmi.n	80a84c6 <mbedtls_ssl_write_finished+0x72>
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 80a84bc:	230f      	movs	r3, #15
 80a84be:	e001      	b.n	80a84c4 <mbedtls_ssl_write_finished+0x70>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
#endif
    }
    else
        ssl->state++;
 80a84c0:	6863      	ldr	r3, [r4, #4]
 80a84c2:	3301      	adds	r3, #1
 80a84c4:	6063      	str	r3, [r4, #4]
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
        }
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->out_ctr, 0, 8 );
 80a84c6:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80a84ca:	2200      	movs	r2, #0
 80a84cc:	601a      	str	r2, [r3, #0]
 80a84ce:	605a      	str	r2, [r3, #4]

    ssl->transform_out = ssl->transform_negotiate;
 80a84d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        mbedtls_ssl_send_flight_completed( ssl );
#endif

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 80a84d2:	4620      	mov	r0, r4
    }
    else
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    memset( ssl->out_ctr, 0, 8 );

    ssl->transform_out = ssl->transform_negotiate;
 80a84d4:	63a3      	str	r3, [r4, #56]	; 0x38
    ssl->session_out = ssl->session_negotiate;
 80a84d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80a84d8:	6263      	str	r3, [r4, #36]	; 0x24
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write finished" ) );

    return( 0 );
}
 80a84da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#if defined(MBEDTLS_SSL_PROTO_DTLS)
    if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
        mbedtls_ssl_send_flight_completed( ssl );
#endif

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 80a84de:	f7ff bcbb 	b.w	80a7e58 <mbedtls_ssl_write_record>
	...

080a84e4 <mbedtls_ssl_parse_finished>:
#else
#define SSL_MAX_HASH_LEN 12
#endif

int mbedtls_ssl_parse_finished( mbedtls_ssl_context *ssl )
{
 80a84e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    unsigned int hash_len;
    unsigned char buf[SSL_MAX_HASH_LEN];

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );

    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
 80a84e6:	6803      	ldr	r3, [r0, #0]
#else
#define SSL_MAX_HASH_LEN 12
#endif

int mbedtls_ssl_parse_finished( mbedtls_ssl_context *ssl )
{
 80a84e8:	4604      	mov	r4, r0
    unsigned int hash_len;
    unsigned char buf[SSL_MAX_HASH_LEN];

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );

    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
 80a84ea:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80a84ee:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80a84f0:	43d2      	mvns	r2, r2
 80a84f2:	ad01      	add	r5, sp, #4
 80a84f4:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80a84f8:	f002 0201 	and.w	r2, r2, #1
 80a84fc:	4629      	mov	r1, r5
 80a84fe:	4798      	blx	r3

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 80a8500:	4620      	mov	r0, r4
 80a8502:	f7ff fecd 	bl	80a82a0 <mbedtls_ssl_read_record>
 80a8506:	2800      	cmp	r0, #0
 80a8508:	d13b      	bne.n	80a8582 <mbedtls_ssl_parse_finished+0x9e>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 80a850a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80a850c:	2b16      	cmp	r3, #22
 80a850e:	d006      	beq.n	80a851e <mbedtls_ssl_parse_finished+0x3a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 80a8510:	220a      	movs	r2, #10
 80a8512:	2102      	movs	r1, #2
 80a8514:	4620      	mov	r0, r4
 80a8516:	f7ff fdb1 	bl	80a807c <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 80a851a:	481b      	ldr	r0, [pc, #108]	; (80a8588 <mbedtls_ssl_parse_finished+0xa4>)
 80a851c:	e031      	b.n	80a8582 <mbedtls_ssl_parse_finished+0x9e>
        hash_len = 36;
    else
#endif
        hash_len = 12;

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_FINISHED ||
 80a851e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80a8520:	780b      	ldrb	r3, [r1, #0]
 80a8522:	2b14      	cmp	r3, #20
 80a8524:	d115      	bne.n	80a8552 <mbedtls_ssl_parse_finished+0x6e>
 80a8526:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80a8528:	2b10      	cmp	r3, #16
 80a852a:	d112      	bne.n	80a8552 <mbedtls_ssl_parse_finished+0x6e>
static inline int mbedtls_ssl_safer_memcmp( const void *a, const void *b, size_t n )
{
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;
 80a852c:	f88d 0003 	strb.w	r0, [sp, #3]
 80a8530:	1d03      	adds	r3, r0, #4
    for( i = 0; i < n; i++ )
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
 80a8532:	5ccb      	ldrb	r3, [r1, r3]
 80a8534:	5c2a      	ldrb	r2, [r5, r0]
        diff |= x ^ y;
 80a8536:	f89d 6003 	ldrb.w	r6, [sp, #3]
 80a853a:	4053      	eors	r3, r2
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 80a853c:	3001      	adds	r0, #1
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
 80a853e:	4333      	orrs	r3, r6
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 80a8540:	280c      	cmp	r0, #12
    {
        /* Read volatile data in order before computing diff.
         * This avoids IAR compiler warning:
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
 80a8542:	f88d 3003 	strb.w	r3, [sp, #3]
    size_t i;
    volatile const unsigned char *A = (volatile const unsigned char *) a;
    volatile const unsigned char *B = (volatile const unsigned char *) b;
    volatile unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 80a8546:	d1f3      	bne.n	80a8530 <mbedtls_ssl_parse_finished+0x4c>
         * 'the order of volatile accesses is undefined ..' */
        unsigned char x = A[i], y = B[i];
        diff |= x ^ y;
    }

    return( diff );
 80a8548:	f89d 3003 	ldrb.w	r3, [sp, #3]
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
    }

    if( mbedtls_ssl_safer_memcmp( ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl ),
 80a854c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a8550:	b133      	cbz	r3, 80a8560 <mbedtls_ssl_parse_finished+0x7c>
                      buf, hash_len ) != 0 )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 80a8552:	2232      	movs	r2, #50	; 0x32
 80a8554:	2102      	movs	r1, #2
 80a8556:	4620      	mov	r0, r4
 80a8558:	f7ff fd90 	bl	80a807c <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
 80a855c:	480b      	ldr	r0, [pc, #44]	; (80a858c <mbedtls_ssl_parse_finished+0xa8>)
 80a855e:	e010      	b.n	80a8582 <mbedtls_ssl_parse_finished+0x9e>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    ssl->verify_data_len = hash_len;
    memcpy( ssl->peer_verify_data, buf, hash_len );
#endif

    if( ssl->handshake->resume != 0 )
 80a8560:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80a8562:	f8d3 01e4 	ldr.w	r0, [r3, #484]	; 0x1e4
 80a8566:	b138      	cbz	r0, 80a8578 <mbedtls_ssl_parse_finished+0x94>
    {
#if defined(MBEDTLS_SSL_CLI_C)
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 80a8568:	6823      	ldr	r3, [r4, #0]
 80a856a:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
 80a856e:	f010 0001 	ands.w	r0, r0, #1
 80a8572:	d105      	bne.n	80a8580 <mbedtls_ssl_parse_finished+0x9c>
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
 80a8574:	230a      	movs	r3, #10
 80a8576:	e001      	b.n	80a857c <mbedtls_ssl_parse_finished+0x98>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
#endif
    }
    else
        ssl->state++;
 80a8578:	6863      	ldr	r3, [r4, #4]
 80a857a:	3301      	adds	r3, #1
 80a857c:	6063      	str	r3, [r4, #4]
 80a857e:	e000      	b.n	80a8582 <mbedtls_ssl_parse_finished+0x9e>
        mbedtls_ssl_recv_flight_completed( ssl );
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse finished" ) );

    return( 0 );
 80a8580:	4610      	mov	r0, r2
}
 80a8582:	b004      	add	sp, #16
 80a8584:	bd70      	pop	{r4, r5, r6, pc}
 80a8586:	bf00      	nop
 80a8588:	ffff8900 	.word	0xffff8900
 80a858c:	ffff8180 	.word	0xffff8180

080a8590 <mbedtls_ssl_session_init>:
    mbedtls_md_init( &transform->md_ctx_dec );
}

void mbedtls_ssl_session_init( mbedtls_ssl_session *session )
{
    memset( session, 0, sizeof(mbedtls_ssl_session) );
 80a8590:	2274      	movs	r2, #116	; 0x74
 80a8592:	2100      	movs	r1, #0
 80a8594:	f006 bdd3 	b.w	80af13e <memset>

080a8598 <mbedtls_ssl_init>:
/*
 * Initialize an SSL context
 */
void mbedtls_ssl_init( mbedtls_ssl_context *ssl )
{
    memset( ssl, 0, sizeof( mbedtls_ssl_context ) );
 80a8598:	22b4      	movs	r2, #180	; 0xb4
 80a859a:	2100      	movs	r1, #0
 80a859c:	f006 bdcf 	b.w	80af13e <memset>

080a85a0 <mbedtls_ssl_conf_authmode>:
}
#endif

void mbedtls_ssl_conf_authmode( mbedtls_ssl_config *conf, int authmode )
{
    conf->authmode   = authmode;
 80a85a0:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 80a85a4:	f361 0383 	bfi	r3, r1, #2, #2
 80a85a8:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 80a85ac:	4770      	bx	lr

080a85ae <mbedtls_ssl_conf_verify>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
void mbedtls_ssl_conf_verify( mbedtls_ssl_config *conf,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
    conf->f_vrfy      = f_vrfy;
 80a85ae:	6341      	str	r1, [r0, #52]	; 0x34
    conf->p_vrfy      = p_vrfy;
 80a85b0:	6382      	str	r2, [r0, #56]	; 0x38
 80a85b2:	4770      	bx	lr

080a85b4 <mbedtls_ssl_conf_rng>:

void mbedtls_ssl_conf_rng( mbedtls_ssl_config *conf,
                  int (*f_rng)(void *, unsigned char *, size_t),
                  void *p_rng )
{
    conf->f_rng      = f_rng;
 80a85b4:	6181      	str	r1, [r0, #24]
    conf->p_rng      = p_rng;
 80a85b6:	61c2      	str	r2, [r0, #28]
 80a85b8:	4770      	bx	lr

080a85ba <mbedtls_ssl_conf_dbg>:

void mbedtls_ssl_conf_dbg( mbedtls_ssl_config *conf,
                  void (*f_dbg)(void *, int, const char *, int, const char *),
                  void  *p_dbg )
{
    conf->f_dbg      = f_dbg;
 80a85ba:	6101      	str	r1, [r0, #16]
    conf->p_dbg      = p_dbg;
 80a85bc:	6142      	str	r2, [r0, #20]
 80a85be:	4770      	bx	lr

080a85c0 <mbedtls_ssl_set_bio>:
        mbedtls_ssl_recv_t *f_recv,
        mbedtls_ssl_recv_timeout_t *f_recv_timeout )
{
    ssl->p_bio          = p_bio;
    ssl->f_send         = f_send;
    ssl->f_recv         = f_recv;
 80a85c0:	6143      	str	r3, [r0, #20]
    ssl->f_recv_timeout = f_recv_timeout;
 80a85c2:	9b00      	ldr	r3, [sp, #0]
        void *p_bio,
        mbedtls_ssl_send_t *f_send,
        mbedtls_ssl_recv_t *f_recv,
        mbedtls_ssl_recv_timeout_t *f_recv_timeout )
{
    ssl->p_bio          = p_bio;
 80a85c4:	61c1      	str	r1, [r0, #28]
    ssl->f_send         = f_send;
 80a85c6:	6102      	str	r2, [r0, #16]
    ssl->f_recv         = f_recv;
    ssl->f_recv_timeout = f_recv_timeout;
 80a85c8:	6183      	str	r3, [r0, #24]
 80a85ca:	4770      	bx	lr

080a85cc <mbedtls_ssl_set_timer_cb>:

void mbedtls_ssl_set_timer_cb( mbedtls_ssl_context *ssl,
                               void *p_timer,
                               mbedtls_ssl_set_timer_t *f_set_timer,
                               mbedtls_ssl_get_timer_t *f_get_timer )
{
 80a85cc:	b410      	push	{r4}
    ssl->p_timer        = p_timer;
 80a85ce:	6441      	str	r1, [r0, #68]	; 0x44
    ssl->f_set_timer    = f_set_timer;
 80a85d0:	6482      	str	r2, [r0, #72]	; 0x48
    ssl->f_get_timer    = f_get_timer;
 80a85d2:	64c3      	str	r3, [r0, #76]	; 0x4c

    /* Make sure we start with no timer running */
    ssl_set_timer( ssl, 0 );
 80a85d4:	2100      	movs	r1, #0
}
 80a85d6:	bc10      	pop	{r4}
    ssl->p_timer        = p_timer;
    ssl->f_set_timer    = f_set_timer;
    ssl->f_get_timer    = f_get_timer;

    /* Make sure we start with no timer running */
    ssl_set_timer( ssl, 0 );
 80a85d8:	f7ff b8dc 	b.w	80a7794 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>

080a85dc <mbedtls_ssl_conf_own_cert>:

int mbedtls_ssl_conf_own_cert( mbedtls_ssl_config *conf,
                              mbedtls_x509_crt *own_cert,
                              mbedtls_pk_context *pk_key )
{
    return( ssl_append_key_cert( &conf->key_cert, own_cert, pk_key ) );
 80a85dc:	3048      	adds	r0, #72	; 0x48
 80a85de:	f7ff ba29 	b.w	80a7a34 <_ZL19ssl_append_key_certPP20mbedtls_ssl_key_certP16mbedtls_x509_crtP18mbedtls_pk_context>

080a85e2 <mbedtls_ssl_conf_ca_chain>:

void mbedtls_ssl_conf_ca_chain( mbedtls_ssl_config *conf,
                               mbedtls_x509_crt *ca_chain,
                               mbedtls_x509_crl *ca_crl )
{
    conf->ca_chain   = ca_chain;
 80a85e2:	64c1      	str	r1, [r0, #76]	; 0x4c
    conf->ca_crl     = ca_crl;
 80a85e4:	6502      	str	r2, [r0, #80]	; 0x50
 80a85e6:	4770      	bx	lr

080a85e8 <mbedtls_ssl_set_hostname>:
}
#endif /* MBEDTLS_ECP_C */

#if defined(MBEDTLS_X509_CRT_PARSE_C)
int mbedtls_ssl_set_hostname( mbedtls_ssl_context *ssl, const char *hostname )
{
 80a85e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a85ea:	4606      	mov	r6, r0
    /* Initialize to suppress unnecessary compiler warning */
    size_t hostname_len = 0;

    /* Check if new hostname is valid before
     * making any change to current one */
    if( hostname != NULL )
 80a85ec:	460c      	mov	r4, r1
 80a85ee:	b131      	cbz	r1, 80a85fe <mbedtls_ssl_set_hostname+0x16>
    {
        hostname_len = strlen( hostname );
 80a85f0:	4608      	mov	r0, r1
 80a85f2:	f006 fdba 	bl	80af16a <strlen>

        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
 80a85f6:	28ff      	cmp	r0, #255	; 0xff

    /* Check if new hostname is valid before
     * making any change to current one */
    if( hostname != NULL )
    {
        hostname_len = strlen( hostname );
 80a85f8:	4605      	mov	r5, r0

        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
 80a85fa:	d901      	bls.n	80a8600 <mbedtls_ssl_set_hostname+0x18>
 80a85fc:	e022      	b.n	80a8644 <mbedtls_ssl_set_hostname+0x5c>

#if defined(MBEDTLS_X509_CRT_PARSE_C)
int mbedtls_ssl_set_hostname( mbedtls_ssl_context *ssl, const char *hostname )
{
    /* Initialize to suppress unnecessary compiler warning */
    size_t hostname_len = 0;
 80a85fe:	460d      	mov	r5, r1
    }

    /* Now it's clear that we will overwrite the old hostname,
     * so we can free it safely */

    if( ssl->hostname != NULL )
 80a8600:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 80a8604:	b157      	cbz	r7, 80a861c <mbedtls_ssl_set_hostname+0x34>
    {
        mbedtls_zeroize( ssl->hostname, strlen( ssl->hostname ) );
 80a8606:	4638      	mov	r0, r7
 80a8608:	f006 fdaf 	bl	80af16a <strlen>
 80a860c:	4601      	mov	r1, r0
 80a860e:	4638      	mov	r0, r7
 80a8610:	f7ff f8b8 	bl	80a7784 <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( ssl->hostname );
 80a8614:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
 80a8618:	f005 fc78 	bl	80adf0c <free>
    }

    /* Passing NULL as hostname shall clear the old one */

    if( hostname == NULL )
 80a861c:	b91c      	cbnz	r4, 80a8626 <mbedtls_ssl_set_hostname+0x3e>
    {
        ssl->hostname = NULL;
 80a861e:	f8c6 40ac 	str.w	r4, [r6, #172]	; 0xac
        memcpy( ssl->hostname, hostname, hostname_len );

        ssl->hostname[hostname_len] = '\0';
    }

    return( 0 );
 80a8622:	4620      	mov	r0, r4
 80a8624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    {
        ssl->hostname = NULL;
    }
    else
    {
        ssl->hostname = (char *)mbedtls_calloc( 1, hostname_len + 1 );
 80a8626:	1c69      	adds	r1, r5, #1
 80a8628:	2001      	movs	r0, #1
 80a862a:	f006 fd3d 	bl	80af0a8 <calloc>
 80a862e:	4607      	mov	r7, r0
 80a8630:	f8c6 00ac 	str.w	r0, [r6, #172]	; 0xac
        if( ssl->hostname == NULL )
 80a8634:	b140      	cbz	r0, 80a8648 <mbedtls_ssl_set_hostname+0x60>
            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

        memcpy( ssl->hostname, hostname, hostname_len );
 80a8636:	462a      	mov	r2, r5
 80a8638:	4621      	mov	r1, r4
 80a863a:	f006 fd5a 	bl	80af0f2 <memcpy>

        ssl->hostname[hostname_len] = '\0';
 80a863e:	2000      	movs	r0, #0
 80a8640:	5578      	strb	r0, [r7, r5]
 80a8642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if( hostname != NULL )
    {
        hostname_len = strlen( hostname );

        if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
            return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80a8644:	4801      	ldr	r0, [pc, #4]	; (80a864c <mbedtls_ssl_set_hostname+0x64>)
 80a8646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    else
    {
        ssl->hostname = (char *)mbedtls_calloc( 1, hostname_len + 1 );
        if( ssl->hostname == NULL )
            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 80a8648:	4801      	ldr	r0, [pc, #4]	; (80a8650 <mbedtls_ssl_set_hostname+0x68>)

        ssl->hostname[hostname_len] = '\0';
    }

    return( 0 );
}
 80a864a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a864c:	ffff8f00 	.word	0xffff8f00
 80a8650:	ffff8100 	.word	0xffff8100

080a8654 <mbedtls_ssl_conf_min_version>:
    conf->max_minor_ver = minor;
}

void mbedtls_ssl_conf_min_version( mbedtls_ssl_config *conf, int major, int minor )
{
    conf->min_major_ver = major;
 80a8654:	f880 105e 	strb.w	r1, [r0, #94]	; 0x5e
    conf->min_minor_ver = minor;
 80a8658:	f880 205f 	strb.w	r2, [r0, #95]	; 0x5f
 80a865c:	4770      	bx	lr

080a865e <mbedtls_ssl_get_verify_result>:
    return( ssl->in_offt == NULL ? 0 : ssl->in_msglen );
}

uint32_t mbedtls_ssl_get_verify_result( const mbedtls_ssl_context *ssl )
{
    if( ssl->session != NULL )
 80a865e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80a8660:	b90b      	cbnz	r3, 80a8666 <mbedtls_ssl_get_verify_result+0x8>
        return( ssl->session->verify_result );

    if( ssl->session_negotiate != NULL )
 80a8662:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80a8664:	b10b      	cbz	r3, 80a866a <mbedtls_ssl_get_verify_result+0xc>
        return( ssl->session_negotiate->verify_result );
 80a8666:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80a8668:	4770      	bx	lr

    return( 0xFFFFFFFF );
 80a866a:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a866e:	4770      	bx	lr

080a8670 <mbedtls_ssl_get_max_frag_len>:
    size_t max_len;

    /*
     * Assume mfl_code is correct since it was checked when set
     */
    max_len = mfl_code_to_length[ssl->conf->mfl_code];
 80a8670:	6803      	ldr	r3, [r0, #0]
 80a8672:	4a09      	ldr	r2, [pc, #36]	; (80a8698 <mbedtls_ssl_get_max_frag_len+0x28>)
 80a8674:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60

    /*
     * Check if a smaller max length was negotiated
     */
    if( ssl->session_out != NULL &&
 80a8678:	6a41      	ldr	r1, [r0, #36]	; 0x24
    size_t max_len;

    /*
     * Assume mfl_code is correct since it was checked when set
     */
    max_len = mfl_code_to_length[ssl->conf->mfl_code];
 80a867a:	f3c3 1382 	ubfx	r3, r3, #6, #3
 80a867e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

    /*
     * Check if a smaller max length was negotiated
     */
    if( ssl->session_out != NULL &&
 80a8682:	b131      	cbz	r1, 80a8692 <mbedtls_ssl_get_max_frag_len+0x22>
        mfl_code_to_length[ssl->session_out->mfl_code] < max_len )
 80a8684:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80a8688:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80a868c:	4293      	cmp	r3, r2
 80a868e:	bf28      	it	cs
 80a8690:	4613      	movcs	r3, r2
    {
        max_len = mfl_code_to_length[ssl->session_out->mfl_code];
    }

    return max_len;
}
 80a8692:	4618      	mov	r0, r3
 80a8694:	4770      	bx	lr
 80a8696:	bf00      	nop
 80a8698:	080b1050 	.word	0x080b1050

080a869c <mbedtls_ssl_handshake_step>:
 */
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;

    if( ssl == NULL || ssl->conf == NULL )
 80a869c:	b138      	cbz	r0, 80a86ae <mbedtls_ssl_handshake_step+0x12>
 80a869e:	6803      	ldr	r3, [r0, #0]
 80a86a0:	b12b      	cbz	r3, 80a86ae <mbedtls_ssl_handshake_step+0x12>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

#if defined(MBEDTLS_SSL_CLI_C)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 80a86a2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80a86a6:	07db      	lsls	r3, r3, #31
 80a86a8:	d403      	bmi.n	80a86b2 <mbedtls_ssl_handshake_step+0x16>
        ret = mbedtls_ssl_handshake_client_step( ssl );
 80a86aa:	f004 bd71 	b.w	80ad190 <mbedtls_ssl_handshake_client_step>
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80a86ae:	4802      	ldr	r0, [pc, #8]	; (80a86b8 <mbedtls_ssl_handshake_step+0x1c>)
 80a86b0:	4770      	bx	lr
/*
 * Perform a single step of the SSL handshake
 */
int mbedtls_ssl_handshake_step( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
 80a86b2:	4802      	ldr	r0, [pc, #8]	; (80a86bc <mbedtls_ssl_handshake_step+0x20>)
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_SERVER )
        ret = mbedtls_ssl_handshake_server_step( ssl );
#endif

    return( ret );
}
 80a86b4:	4770      	bx	lr
 80a86b6:	bf00      	nop
 80a86b8:	ffff8f00 	.word	0xffff8f00
 80a86bc:	ffff8f80 	.word	0xffff8f80

080a86c0 <mbedtls_ssl_handshake>:

/*
 * Perform the SSL handshake
 */
int mbedtls_ssl_handshake( mbedtls_ssl_context *ssl )
{
 80a86c0:	b510      	push	{r4, lr}
    int ret = 0;

    if( ssl == NULL || ssl->conf == NULL )
 80a86c2:	4604      	mov	r4, r0
 80a86c4:	b150      	cbz	r0, 80a86dc <mbedtls_ssl_handshake+0x1c>
 80a86c6:	6803      	ldr	r3, [r0, #0]
 80a86c8:	b143      	cbz	r3, 80a86dc <mbedtls_ssl_handshake+0x1c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> handshake" ) );

    while( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 80a86ca:	6863      	ldr	r3, [r4, #4]
 80a86cc:	2b10      	cmp	r3, #16
 80a86ce:	d007      	beq.n	80a86e0 <mbedtls_ssl_handshake+0x20>
    {
        ret = mbedtls_ssl_handshake_step( ssl );
 80a86d0:	4620      	mov	r0, r4
 80a86d2:	f7ff ffe3 	bl	80a869c <mbedtls_ssl_handshake_step>

        if( ret != 0 )
 80a86d6:	2800      	cmp	r0, #0
 80a86d8:	d0f7      	beq.n	80a86ca <mbedtls_ssl_handshake+0xa>
 80a86da:	bd10      	pop	{r4, pc}
int mbedtls_ssl_handshake( mbedtls_ssl_context *ssl )
{
    int ret = 0;

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80a86dc:	4801      	ldr	r0, [pc, #4]	; (80a86e4 <mbedtls_ssl_handshake+0x24>)
 80a86de:	bd10      	pop	{r4, pc}
 80a86e0:	2000      	movs	r0, #0
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= handshake" ) );

    return( ret );
}
 80a86e2:	bd10      	pop	{r4, pc}
 80a86e4:	ffff8f00 	.word	0xffff8f00

080a86e8 <mbedtls_ssl_read>:

/*
 * Receive application data decrypted from the SSL layer
 */
int mbedtls_ssl_read( mbedtls_ssl_context *ssl, unsigned char *buf, size_t len )
{
 80a86e8:	b570      	push	{r4, r5, r6, lr}
 80a86ea:	460e      	mov	r6, r1
 80a86ec:	4614      	mov	r4, r2
    int ret;
    size_t n;

    if( ssl == NULL || ssl->conf == NULL )
 80a86ee:	4605      	mov	r5, r0
 80a86f0:	2800      	cmp	r0, #0
 80a86f2:	d061      	beq.n	80a87b8 <mbedtls_ssl_read+0xd0>
 80a86f4:	6803      	ldr	r3, [r0, #0]
 80a86f6:	2b00      	cmp	r3, #0
 80a86f8:	d05e      	beq.n	80a87b8 <mbedtls_ssl_read+0xd0>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
        return( ret );
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 80a86fa:	6843      	ldr	r3, [r0, #4]
 80a86fc:	2b10      	cmp	r3, #16
 80a86fe:	d103      	bne.n	80a8708 <mbedtls_ssl_read+0x20>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
            return( ret );
        }
    }

    if( ssl->in_offt == NULL )
 80a8700:	6eab      	ldr	r3, [r5, #104]	; 0x68
 80a8702:	2b00      	cmp	r3, #0
 80a8704:	d142      	bne.n	80a878c <mbedtls_ssl_read+0xa4>
 80a8706:	e007      	b.n	80a8718 <mbedtls_ssl_read+0x30>
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
    {
        ret = mbedtls_ssl_handshake( ssl );
 80a8708:	f7ff ffda 	bl	80a86c0 <mbedtls_ssl_handshake>
        if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 80a870c:	f510 4fd6 	cmn.w	r0, #27392	; 0x6b00
 80a8710:	d0f6      	beq.n	80a8700 <mbedtls_ssl_read+0x18>
 80a8712:	2800      	cmp	r0, #0
 80a8714:	d0f4      	beq.n	80a8700 <mbedtls_ssl_read+0x18>
 80a8716:	bd70      	pop	{r4, r5, r6, pc}
    }

    if( ssl->in_offt == NULL )
    {
        /* Start timer if not already running */
        if( ssl->f_get_timer != NULL &&
 80a8718:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80a871a:	b11b      	cbz	r3, 80a8724 <mbedtls_ssl_read+0x3c>
            ssl->f_get_timer( ssl->p_timer ) == -1 )
 80a871c:	6c68      	ldr	r0, [r5, #68]	; 0x44
 80a871e:	4798      	blx	r3
    }

    if( ssl->in_offt == NULL )
    {
        /* Start timer if not already running */
        if( ssl->f_get_timer != NULL &&
 80a8720:	3001      	adds	r0, #1
 80a8722:	d04d      	beq.n	80a87c0 <mbedtls_ssl_read+0xd8>
            ssl->f_get_timer( ssl->p_timer ) == -1 )
        {
            ssl_set_timer( ssl, ssl->conf->read_timeout );
        }

        if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 80a8724:	4628      	mov	r0, r5
 80a8726:	f7ff fdbb 	bl	80a82a0 <mbedtls_ssl_read_record>
 80a872a:	b120      	cbz	r0, 80a8736 <mbedtls_ssl_read+0x4e>
        {
            if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
 80a872c:	f510 4fe5 	cmn.w	r0, #29312	; 0x7280
 80a8730:	d157      	bne.n	80a87e2 <mbedtls_ssl_read+0xfa>
                return( 0 );
 80a8732:	2000      	movs	r0, #0
 80a8734:	bd70      	pop	{r4, r5, r6, pc}

            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
            return( ret );
        }

        if( ssl->in_msglen  == 0 &&
 80a8736:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80a8738:	b953      	cbnz	r3, 80a8750 <mbedtls_ssl_read+0x68>
 80a873a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80a873c:	2b17      	cmp	r3, #23
 80a873e:	d107      	bne.n	80a8750 <mbedtls_ssl_read+0x68>
            ssl->in_msgtype == MBEDTLS_SSL_MSG_APPLICATION_DATA )
        {
            /*
             * OpenSSL sends empty messages to randomize the IV
             */
            if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 80a8740:	4628      	mov	r0, r5
 80a8742:	f7ff fdad 	bl	80a82a0 <mbedtls_ssl_read_record>
 80a8746:	b118      	cbz	r0, 80a8750 <mbedtls_ssl_read+0x68>
            {
                if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
 80a8748:	f510 4fe5 	cmn.w	r0, #29312	; 0x7280
 80a874c:	d0f1      	beq.n	80a8732 <mbedtls_ssl_read+0x4a>
 80a874e:	bd70      	pop	{r4, r5, r6, pc}
                MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
                return( ret );
            }
        }

        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 80a8750:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80a8752:	2b16      	cmp	r3, #22
 80a8754:	d10b      	bne.n	80a876e <mbedtls_ssl_read+0x86>
             * - For server-side, expect CLIENT_HELLO.
             * - Fail (TLS) or silently drop record (DTLS) in other cases.
             */

#if defined(MBEDTLS_SSL_CLI_C)
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
 80a8756:	682b      	ldr	r3, [r5, #0]
 80a8758:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80a875c:	07db      	lsls	r3, r3, #31
 80a875e:	d435      	bmi.n	80a87cc <mbedtls_ssl_read+0xe4>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
 80a8760:	6e6b      	ldr	r3, [r5, #100]	; 0x64
             * - For server-side, expect CLIENT_HELLO.
             * - Fail (TLS) or silently drop record (DTLS) in other cases.
             */

#if defined(MBEDTLS_SSL_CLI_C)
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
 80a8762:	781b      	ldrb	r3, [r3, #0]
 80a8764:	bb53      	cbnz	r3, 80a87bc <mbedtls_ssl_read+0xd4>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
 80a8766:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80a8768:	2b04      	cmp	r3, #4
 80a876a:	d127      	bne.n	80a87bc <mbedtls_ssl_read+0xd4>
 80a876c:	e02e      	b.n	80a87cc <mbedtls_ssl_read+0xe4>
            }
        }
#endif /* MBEDTLS_SSL_RENEGOTIATION */

        /* Fatal and closure alerts handled by mbedtls_ssl_read_record() */
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
 80a876e:	2b15      	cmp	r3, #21
 80a8770:	d101      	bne.n	80a8776 <mbedtls_ssl_read+0x8e>
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
                }
            }

            return( MBEDTLS_ERR_SSL_WANT_READ );
 80a8772:	481c      	ldr	r0, [pc, #112]	; (80a87e4 <mbedtls_ssl_read+0xfc>)
 80a8774:	bd70      	pop	{r4, r5, r6, pc}
        {
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "ignoring non-fatal non-closure alert" ) );
            return( MBEDTLS_ERR_SSL_WANT_READ );
        }

        if( ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
 80a8776:	2b17      	cmp	r3, #23
 80a8778:	d120      	bne.n	80a87bc <mbedtls_ssl_read+0xd4>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad application data message" ) );
            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
        }

        ssl->in_offt = ssl->in_msg;
 80a877a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80a877c:	66ab      	str	r3, [r5, #104]	; 0x68

        /* We're going to return something now, cancel timer,
         * except if handshake (renegotiation) is in progress */
        if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
 80a877e:	686b      	ldr	r3, [r5, #4]
 80a8780:	2b10      	cmp	r3, #16
 80a8782:	d103      	bne.n	80a878c <mbedtls_ssl_read+0xa4>
            ssl_set_timer( ssl, 0 );
 80a8784:	2100      	movs	r1, #0
 80a8786:	4628      	mov	r0, r5
 80a8788:	f7ff f804 	bl	80a7794 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>
        }
#endif /* MBEDTLS_SSL_SRV_C && MBEDTLS_SSL_RENEGOTIATION */
#endif /* MBEDTLS_SSL_PROTO_DTLS */
    }

    n = ( len < ssl->in_msglen )
 80a878c:	6f28      	ldr	r0, [r5, #112]	; 0x70
        ? len : ssl->in_msglen;

    memcpy( buf, ssl->in_offt, n );
 80a878e:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 80a8790:	4284      	cmp	r4, r0
 80a8792:	bf28      	it	cs
 80a8794:	4604      	movcs	r4, r0
 80a8796:	4630      	mov	r0, r6
 80a8798:	4622      	mov	r2, r4
 80a879a:	f006 fcaa 	bl	80af0f2 <memcpy>
    ssl->in_msglen -= n;
 80a879e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80a87a0:	1b1b      	subs	r3, r3, r4
 80a87a2:	672b      	str	r3, [r5, #112]	; 0x70

    if( ssl->in_msglen == 0 )
 80a87a4:	b91b      	cbnz	r3, 80a87ae <mbedtls_ssl_read+0xc6>
    {
        /* all bytes consumed */
        ssl->in_offt = NULL;
 80a87a6:	66ab      	str	r3, [r5, #104]	; 0x68
        ssl->keep_current_message = 0;
 80a87a8:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
 80a87ac:	e002      	b.n	80a87b4 <mbedtls_ssl_read+0xcc>
    }
    else
    {
        /* more data available */
        ssl->in_offt += n;
 80a87ae:	6eab      	ldr	r3, [r5, #104]	; 0x68
 80a87b0:	4423      	add	r3, r4
 80a87b2:	66ab      	str	r3, [r5, #104]	; 0x68
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read" ) );

    return( (int) n );
 80a87b4:	4620      	mov	r0, r4
 80a87b6:	bd70      	pop	{r4, r5, r6, pc}
{
    int ret;
    size_t n;

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80a87b8:	480b      	ldr	r0, [pc, #44]	; (80a87e8 <mbedtls_ssl_read+0x100>)
 80a87ba:	bd70      	pop	{r4, r5, r6, pc}
                /* With DTLS, drop the packet (probably from last handshake) */
#if defined(MBEDTLS_SSL_PROTO_DTLS)
                if( ssl->conf->transport == MBEDTLS_SSL_TRANSPORT_DATAGRAM )
                    return( MBEDTLS_ERR_SSL_WANT_READ );
#endif
                return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 80a87bc:	480b      	ldr	r0, [pc, #44]	; (80a87ec <mbedtls_ssl_read+0x104>)
 80a87be:	bd70      	pop	{r4, r5, r6, pc}
    {
        /* Start timer if not already running */
        if( ssl->f_get_timer != NULL &&
            ssl->f_get_timer( ssl->p_timer ) == -1 )
        {
            ssl_set_timer( ssl, ssl->conf->read_timeout );
 80a87c0:	682b      	ldr	r3, [r5, #0]
 80a87c2:	4628      	mov	r0, r5
 80a87c4:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80a87c6:	f7fe ffe5 	bl	80a7794 <_ZL13ssl_set_timerP19mbedtls_ssl_contextm>
 80a87ca:	e7ab      	b.n	80a8724 <mbedtls_ssl_read+0x3c>
                }
                else
#endif /* MBEDTLS_SSL_PROTO_SSL3 */
#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
                if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 80a87cc:	68eb      	ldr	r3, [r5, #12]
 80a87ce:	2b00      	cmp	r3, #0
 80a87d0:	dd06      	ble.n	80a87e0 <mbedtls_ssl_read+0xf8>
                {
                    if( ( ret = mbedtls_ssl_send_alert_message( ssl,
 80a87d2:	2264      	movs	r2, #100	; 0x64
 80a87d4:	2101      	movs	r1, #1
 80a87d6:	4628      	mov	r0, r5
 80a87d8:	f7ff fc50 	bl	80a807c <mbedtls_ssl_send_alert_message>
 80a87dc:	b908      	cbnz	r0, 80a87e2 <mbedtls_ssl_read+0xfa>
 80a87de:	e7c8      	b.n	80a8772 <mbedtls_ssl_read+0x8a>
                else
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 ||
          MBEDTLS_SSL_PROTO_TLS1_2 */
                {
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80a87e0:	4803      	ldr	r0, [pc, #12]	; (80a87f0 <mbedtls_ssl_read+0x108>)
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read" ) );

    return( (int) n );
}
 80a87e2:	bd70      	pop	{r4, r5, r6, pc}
 80a87e4:	ffff9700 	.word	0xffff9700
 80a87e8:	ffff8f00 	.word	0xffff8f00
 80a87ec:	ffff8900 	.word	0xffff8900
 80a87f0:	ffff9400 	.word	0xffff9400

080a87f4 <mbedtls_ssl_write>:

/*
 * Write application data (public-facing wrapper)
 */
int mbedtls_ssl_write( mbedtls_ssl_context *ssl, const unsigned char *buf, size_t len )
{
 80a87f4:	b570      	push	{r4, r5, r6, lr}
 80a87f6:	460e      	mov	r6, r1
 80a87f8:	4615      	mov	r5, r2
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );

    if( ssl == NULL || ssl->conf == NULL )
 80a87fa:	4604      	mov	r4, r0
 80a87fc:	b350      	cbz	r0, 80a8854 <mbedtls_ssl_write+0x60>
 80a87fe:	6803      	ldr	r3, [r0, #0]
 80a8800:	b343      	cbz	r3, 80a8854 <mbedtls_ssl_write+0x60>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
        return( ret );
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 80a8802:	6843      	ldr	r3, [r0, #4]
 80a8804:	2b10      	cmp	r3, #16
 80a8806:	d109      	bne.n	80a881c <mbedtls_ssl_write+0x28>
static int ssl_write_real( mbedtls_ssl_context *ssl,
                           const unsigned char *buf, size_t len )
{
    int ret;
#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    size_t max_len = mbedtls_ssl_get_max_frag_len( ssl );
 80a8808:	4620      	mov	r0, r4
 80a880a:	f7ff ff31 	bl	80a8670 <mbedtls_ssl_get_max_frag_len>
        else
#endif
            len = max_len;
    }

    if( ssl->out_left != 0 )
 80a880e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80a8812:	4285      	cmp	r5, r0
 80a8814:	bf28      	it	cs
 80a8816:	4605      	movcs	r5, r0
 80a8818:	b92b      	cbnz	r3, 80a8826 <mbedtls_ssl_write+0x32>
 80a881a:	e00a      	b.n	80a8832 <mbedtls_ssl_write+0x3e>
    }
#endif

    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
    {
        if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
 80a881c:	f7ff ff50 	bl	80a86c0 <mbedtls_ssl_handshake>
 80a8820:	2800      	cmp	r0, #0
 80a8822:	d0f1      	beq.n	80a8808 <mbedtls_ssl_write+0x14>
 80a8824:	bd70      	pop	{r4, r5, r6, pc}
         * The user has previously tried to send the data and
         * MBEDTLS_ERR_SSL_WANT_WRITE or the message was only partially
         * written. In this case, we expect the high-level write function
         * (e.g. mbedtls_ssl_write()) to be called with the same parameters
         */
        if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 80a8826:	4620      	mov	r0, r4
 80a8828:	f7ff fade 	bl	80a7de8 <mbedtls_ssl_flush_output>
 80a882c:	b998      	cbnz	r0, 80a8856 <mbedtls_ssl_write+0x62>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
            return( ret );
        }
    }

    return( (int) len );
 80a882e:	4628      	mov	r0, r5
 80a8830:	bd70      	pop	{r4, r5, r6, pc}
         * The user is trying to send a message the first time, so we need to
         * copy the data into the internal buffers and setup the data structure
         * to keep track of partial writes
         */
        ssl->out_msglen  = len;
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
 80a8832:	2317      	movs	r3, #23
        /*
         * The user is trying to send a message the first time, so we need to
         * copy the data into the internal buffers and setup the data structure
         * to keep track of partial writes
         */
        ssl->out_msglen  = len;
 80a8834:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
 80a8838:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        memcpy( ssl->out_msg, buf, len );
 80a883c:	462a      	mov	r2, r5
 80a883e:	4631      	mov	r1, r6
 80a8840:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 80a8844:	f006 fc55 	bl	80af0f2 <memcpy>

        if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 80a8848:	4620      	mov	r0, r4
 80a884a:	f7ff fb05 	bl	80a7e58 <mbedtls_ssl_write_record>
 80a884e:	2800      	cmp	r0, #0
 80a8850:	d0ed      	beq.n	80a882e <mbedtls_ssl_write+0x3a>
 80a8852:	bd70      	pop	{r4, r5, r6, pc}
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );

    if( ssl == NULL || ssl->conf == NULL )
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80a8854:	4800      	ldr	r0, [pc, #0]	; (80a8858 <mbedtls_ssl_write+0x64>)
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write" ) );

    return( ret );
}
 80a8856:	bd70      	pop	{r4, r5, r6, pc}
 80a8858:	ffff8f00 	.word	0xffff8f00

080a885c <mbedtls_ssl_transform_free>:

    return( 0 );
}

void mbedtls_ssl_transform_free( mbedtls_ssl_transform *transform )
{
 80a885c:	b510      	push	{r4, lr}
    if( transform == NULL )
 80a885e:	4604      	mov	r4, r0
 80a8860:	b1a0      	cbz	r0, 80a888c <mbedtls_ssl_transform_free+0x30>
#if defined(MBEDTLS_ZLIB_SUPPORT)
    deflateEnd( &transform->ctx_deflate );
    inflateEnd( &transform->ctx_inflate );
#endif

    mbedtls_cipher_free( &transform->cipher_ctx_enc );
 80a8862:	3050      	adds	r0, #80	; 0x50
 80a8864:	f7f8 ff32 	bl	80a16cc <mbedtls_cipher_free>
    mbedtls_cipher_free( &transform->cipher_ctx_dec );
 80a8868:	f104 0088 	add.w	r0, r4, #136	; 0x88
 80a886c:	f7f8 ff2e 	bl	80a16cc <mbedtls_cipher_free>

    mbedtls_md_free( &transform->md_ctx_enc );
 80a8870:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a8874:	f7fd fa5f 	bl	80a5d36 <mbedtls_md_free>
    mbedtls_md_free( &transform->md_ctx_dec );
 80a8878:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80a887c:	f7fd fa5b 	bl	80a5d36 <mbedtls_md_free>

    mbedtls_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
 80a8880:	4620      	mov	r0, r4
}
 80a8882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_cipher_free( &transform->cipher_ctx_dec );

    mbedtls_md_free( &transform->md_ctx_enc );
    mbedtls_md_free( &transform->md_ctx_dec );

    mbedtls_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
 80a8886:	21c0      	movs	r1, #192	; 0xc0
 80a8888:	f7fe bf7c 	b.w	80a7784 <_ZL15mbedtls_zeroizePvj>
 80a888c:	bd10      	pop	{r4, pc}

080a888e <mbedtls_ssl_handshake_free>:
    }
}
#endif /* MBEDTLS_X509_CRT_PARSE_C */

void mbedtls_ssl_handshake_free( mbedtls_ssl_handshake_params *handshake )
{
 80a888e:	b538      	push	{r3, r4, r5, lr}
    if( handshake == NULL )
 80a8890:	4604      	mov	r4, r0
 80a8892:	b1a0      	cbz	r0, 80a88be <mbedtls_ssl_handshake_free+0x30>
    mbedtls_md5_free(    &handshake->fin_md5  );
    mbedtls_sha1_free(   &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_free(   &handshake->fin_sha256    );
 80a8894:	3018      	adds	r0, #24
 80a8896:	f7f8 f8d1 	bl	80a0a3c <mbedtls_sha256_free>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_free(   &handshake->fin_sha512    );
 80a889a:	f104 0088 	add.w	r0, r4, #136	; 0x88
 80a889e:	f003 f853 	bl	80ab948 <mbedtls_sha512_free>
    defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    /*
     * Free only the linked list wrapper, not the keys themselves
     * since the belong to the SNI callback
     */
    if( handshake->sni_key_cert != NULL )
 80a88a2:	68e0      	ldr	r0, [r4, #12]
 80a88a4:	b930      	cbnz	r0, 80a88b4 <mbedtls_ssl_handshake_free+0x26>
    mbedtls_free( handshake->verify_cookie );
    mbedtls_free( handshake->hs_msg );
    ssl_flight_free( handshake->flight );
#endif

    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
 80a88a6:	4620      	mov	r0, r4
}
 80a88a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mbedtls_free( handshake->verify_cookie );
    mbedtls_free( handshake->hs_msg );
    ssl_flight_free( handshake->flight );
#endif

    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
 80a88ac:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 80a88b0:	f7fe bf68 	b.w	80a7784 <_ZL15mbedtls_zeroizePvj>
    {
        mbedtls_ssl_key_cert *cur = handshake->sni_key_cert, *next;

        while( cur != NULL )
        {
            next = cur->next;
 80a88b4:	6885      	ldr	r5, [r0, #8]
            mbedtls_free( cur );
 80a88b6:	f005 fb29 	bl	80adf0c <free>
     */
    if( handshake->sni_key_cert != NULL )
    {
        mbedtls_ssl_key_cert *cur = handshake->sni_key_cert, *next;

        while( cur != NULL )
 80a88ba:	4628      	mov	r0, r5
 80a88bc:	e7f2      	b.n	80a88a4 <mbedtls_ssl_handshake_free+0x16>
 80a88be:	bd38      	pop	{r3, r4, r5, pc}

080a88c0 <mbedtls_ssl_session_free>:

    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
}

void mbedtls_ssl_session_free( mbedtls_ssl_session *session )
{
 80a88c0:	b510      	push	{r4, lr}
    if( session == NULL )
 80a88c2:	4604      	mov	r4, r0
 80a88c4:	b178      	cbz	r0, 80a88e6 <mbedtls_ssl_session_free+0x26>
        return;

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    if( session->peer_cert != NULL )
 80a88c6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80a88c8:	b120      	cbz	r0, 80a88d4 <mbedtls_ssl_session_free+0x14>
    {
        mbedtls_x509_crt_free( session->peer_cert );
 80a88ca:	f7fe fb50 	bl	80a6f6e <mbedtls_x509_crt_free>
        mbedtls_free( session->peer_cert );
 80a88ce:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80a88d0:	f005 fb1c 	bl	80adf0c <free>
    }
#endif

#if defined(MBEDTLS_SSL_SESSION_TICKETS) && defined(MBEDTLS_SSL_CLI_C)
    mbedtls_free( session->ticket );
 80a88d4:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80a88d6:	f005 fb19 	bl	80adf0c <free>
#endif

    mbedtls_zeroize( session, sizeof( mbedtls_ssl_session ) );
 80a88da:	4620      	mov	r0, r4
}
 80a88dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if defined(MBEDTLS_SSL_SESSION_TICKETS) && defined(MBEDTLS_SSL_CLI_C)
    mbedtls_free( session->ticket );
#endif

    mbedtls_zeroize( session, sizeof( mbedtls_ssl_session ) );
 80a88e0:	2174      	movs	r1, #116	; 0x74
 80a88e2:	f7fe bf4f 	b.w	80a7784 <_ZL15mbedtls_zeroizePvj>
 80a88e6:	bd10      	pop	{r4, pc}

080a88e8 <mbedtls_ssl_handshake_wrapup>:

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
}

void mbedtls_ssl_handshake_wrapup( mbedtls_ssl_context *ssl )
{
 80a88e8:	b538      	push	{r3, r4, r5, lr}
 80a88ea:	4604      	mov	r4, r0
    int resume = ssl->handshake->resume;
 80a88ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
#endif

    /*
     * Free the previous session and switch in the current one
     */
    if( ssl->session )
 80a88ee:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
}

void mbedtls_ssl_handshake_wrapup( mbedtls_ssl_context *ssl )
{
    int resume = ssl->handshake->resume;
 80a88f0:	f8d3 51e4 	ldr.w	r5, [r3, #484]	; 0x1e4
#endif

    /*
     * Free the previous session and switch in the current one
     */
    if( ssl->session )
 80a88f4:	b120      	cbz	r0, 80a8900 <mbedtls_ssl_handshake_wrapup+0x18>
        /* RFC 7366 3.1: keep the EtM state */
        ssl->session_negotiate->encrypt_then_mac =
                  ssl->session->encrypt_then_mac;
#endif

        mbedtls_ssl_session_free( ssl->session );
 80a88f6:	f7ff ffe3 	bl	80a88c0 <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
 80a88fa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a88fc:	f005 fb06 	bl	80adf0c <free>
    }
    ssl->session = ssl->session_negotiate;
 80a8900:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    ssl->session_negotiate = NULL;
 80a8902:	2300      	movs	r3, #0

    /*
     * Add cache entry
     */
    if( ssl->conf->f_set_cache != NULL &&
 80a8904:	6822      	ldr	r2, [r4, #0]
#endif

        mbedtls_ssl_session_free( ssl->session );
        mbedtls_free( ssl->session );
    }
    ssl->session = ssl->session_negotiate;
 80a8906:	62a1      	str	r1, [r4, #40]	; 0x28
    ssl->session_negotiate = NULL;
 80a8908:	62e3      	str	r3, [r4, #44]	; 0x2c

    /*
     * Add cache entry
     */
    if( ssl->conf->f_set_cache != NULL &&
 80a890a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80a890c:	b123      	cbz	r3, 80a8918 <mbedtls_ssl_handshake_wrapup+0x30>
 80a890e:	6888      	ldr	r0, [r1, #8]
 80a8910:	b110      	cbz	r0, 80a8918 <mbedtls_ssl_handshake_wrapup+0x30>
        ssl->session->id_len != 0 &&
 80a8912:	b90d      	cbnz	r5, 80a8918 <mbedtls_ssl_handshake_wrapup+0x30>
        resume == 0 )
    {
        if( ssl->conf->f_set_cache( ssl->conf->p_cache, ssl->session ) != 0 )
 80a8914:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80a8916:	4798      	blx	r3
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup: final free" ) );

    /*
     * Free our handshake params
     */
    mbedtls_ssl_handshake_free( ssl->handshake );
 80a8918:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80a891a:	f7ff ffb8 	bl	80a888e <mbedtls_ssl_handshake_free>
    mbedtls_free( ssl->handshake );
 80a891e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80a8920:	f005 faf4 	bl	80adf0c <free>
    ssl->handshake = NULL;

    /*
     * Free the previous transform and swith in the current one
     */
    if( ssl->transform )
 80a8924:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    /*
     * Free our handshake params
     */
    mbedtls_ssl_handshake_free( ssl->handshake );
    mbedtls_free( ssl->handshake );
    ssl->handshake = NULL;
 80a8926:	2300      	movs	r3, #0
 80a8928:	6323      	str	r3, [r4, #48]	; 0x30

    /*
     * Free the previous transform and swith in the current one
     */
    if( ssl->transform )
 80a892a:	b120      	cbz	r0, 80a8936 <mbedtls_ssl_handshake_wrapup+0x4e>
    {
        mbedtls_ssl_transform_free( ssl->transform );
 80a892c:	f7ff ff96 	bl	80a885c <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 80a8930:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80a8932:	f005 faeb 	bl	80adf0c <free>
    }
    ssl->transform = ssl->transform_negotiate;
 80a8936:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80a8938:	63e3      	str	r3, [r4, #60]	; 0x3c
    ssl->transform_negotiate = NULL;
 80a893a:	2300      	movs	r3, #0
 80a893c:	6423      	str	r3, [r4, #64]	; 0x40
    }
    else
#endif
        ssl_handshake_wrapup_free_hs_transform( ssl );

    ssl->state++;
 80a893e:	6863      	ldr	r3, [r4, #4]
 80a8940:	3301      	adds	r3, #1
 80a8942:	6063      	str	r3, [r4, #4]
 80a8944:	bd38      	pop	{r3, r4, r5, pc}
	...

080a8948 <_ZL18ssl_handshake_initP19mbedtls_ssl_context>:
{
    memset( session, 0, sizeof(mbedtls_ssl_session) );
}

static int ssl_handshake_init( mbedtls_ssl_context *ssl )
{
 80a8948:	b538      	push	{r3, r4, r5, lr}
 80a894a:	4604      	mov	r4, r0
    /* Clear old handshake information if present */
    if( ssl->transform_negotiate )
 80a894c:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80a894e:	b108      	cbz	r0, 80a8954 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xc>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
 80a8950:	f7ff ff84 	bl	80a885c <mbedtls_ssl_transform_free>
    if( ssl->session_negotiate )
 80a8954:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80a8956:	b108      	cbz	r0, 80a895c <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x14>
        mbedtls_ssl_session_free( ssl->session_negotiate );
 80a8958:	f7ff ffb2 	bl	80a88c0 <mbedtls_ssl_session_free>
    if( ssl->handshake )
 80a895c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80a895e:	b108      	cbz	r0, 80a8964 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x1c>
        mbedtls_ssl_handshake_free( ssl->handshake );
 80a8960:	f7ff ff95 	bl	80a888e <mbedtls_ssl_handshake_free>

    /*
     * Either the pointers are now NULL or cleared properly and can be freed.
     * Now allocate missing structures.
     */
    if( ssl->transform_negotiate == NULL )
 80a8964:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80a8966:	b923      	cbnz	r3, 80a8972 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x2a>
    {
        ssl->transform_negotiate = (mbedtls_ssl_transform *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_transform) );
 80a8968:	21c0      	movs	r1, #192	; 0xc0
 80a896a:	2001      	movs	r0, #1
 80a896c:	f006 fb9c 	bl	80af0a8 <calloc>
 80a8970:	6420      	str	r0, [r4, #64]	; 0x40
    }

    if( ssl->session_negotiate == NULL )
 80a8972:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80a8974:	b923      	cbnz	r3, 80a8980 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x38>
    {
        ssl->session_negotiate = (mbedtls_ssl_session *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_session) );
 80a8976:	2174      	movs	r1, #116	; 0x74
 80a8978:	2001      	movs	r0, #1
 80a897a:	f006 fb95 	bl	80af0a8 <calloc>
 80a897e:	62e0      	str	r0, [r4, #44]	; 0x2c
    }

    if( ssl->handshake == NULL )
 80a8980:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80a8982:	b92b      	cbnz	r3, 80a8990 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x48>
    {
        ssl->handshake = (mbedtls_ssl_handshake_params *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
 80a8984:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 80a8988:	2001      	movs	r0, #1
 80a898a:	f006 fb8d 	bl	80af0a8 <calloc>
 80a898e:	6320      	str	r0, [r4, #48]	; 0x30
    }

    /* All pointers should exist and can be directly freed without issue */
    if( ssl->handshake == NULL ||
 80a8990:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80a8992:	b118      	cbz	r0, 80a899c <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x54>
 80a8994:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80a8996:	b10b      	cbz	r3, 80a899c <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x54>
        ssl->transform_negotiate == NULL ||
        ssl->session_negotiate == NULL )
 80a8998:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        ssl->handshake = (mbedtls_ssl_handshake_params *)mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
    }

    /* All pointers should exist and can be directly freed without issue */
    if( ssl->handshake == NULL ||
        ssl->transform_negotiate == NULL ||
 80a899a:	b96b      	cbnz	r3, 80a89b8 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0x70>
        ssl->session_negotiate == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc() of ssl sub-contexts failed" ) );

        mbedtls_free( ssl->handshake );
 80a899c:	f005 fab6 	bl	80adf0c <free>
        mbedtls_free( ssl->transform_negotiate );
 80a89a0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80a89a2:	f005 fab3 	bl	80adf0c <free>
        mbedtls_free( ssl->session_negotiate );
 80a89a6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80a89a8:	f005 fab0 	bl	80adf0c <free>

        ssl->handshake = NULL;
 80a89ac:	2300      	movs	r3, #0
 80a89ae:	6323      	str	r3, [r4, #48]	; 0x30
        ssl->transform_negotiate = NULL;
 80a89b0:	6423      	str	r3, [r4, #64]	; 0x40
        ssl->session_negotiate = NULL;
 80a89b2:	62e3      	str	r3, [r4, #44]	; 0x2c

        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 80a89b4:	481e      	ldr	r0, [pc, #120]	; (80a8a30 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xe8>)
 80a89b6:	bd38      	pop	{r3, r4, r5, pc}
    }

    /* Initialize structures */
    mbedtls_ssl_session_init( ssl->session_negotiate );
 80a89b8:	4618      	mov	r0, r3
 80a89ba:	f7ff fde9 	bl	80a8590 <mbedtls_ssl_session_init>
    ssl_transform_init( ssl->transform_negotiate );
 80a89be:	6c25      	ldr	r5, [r4, #64]	; 0x40
#endif
}

static void ssl_transform_init( mbedtls_ssl_transform *transform )
{
    memset( transform, 0, sizeof(mbedtls_ssl_transform) );
 80a89c0:	22c0      	movs	r2, #192	; 0xc0
 80a89c2:	2100      	movs	r1, #0
 80a89c4:	4628      	mov	r0, r5
 80a89c6:	f006 fbba 	bl	80af13e <memset>

    mbedtls_cipher_init( &transform->cipher_ctx_enc );
 80a89ca:	f105 0050 	add.w	r0, r5, #80	; 0x50
 80a89ce:	f7f8 fe79 	bl	80a16c4 <mbedtls_cipher_init>
    mbedtls_cipher_init( &transform->cipher_ctx_dec );
 80a89d2:	f105 0088 	add.w	r0, r5, #136	; 0x88
 80a89d6:	f7f8 fe75 	bl	80a16c4 <mbedtls_cipher_init>

    mbedtls_md_init( &transform->md_ctx_enc );
 80a89da:	f105 0038 	add.w	r0, r5, #56	; 0x38
 80a89de:	f7fd f9a5 	bl	80a5d2c <mbedtls_md_init>
    mbedtls_md_init( &transform->md_ctx_dec );
 80a89e2:	f105 0044 	add.w	r0, r5, #68	; 0x44
 80a89e6:	f7fd f9a1 	bl	80a5d2c <mbedtls_md_init>
    }

    /* Initialize structures */
    mbedtls_ssl_session_init( ssl->session_negotiate );
    ssl_transform_init( ssl->transform_negotiate );
    ssl_handshake_params_init( ssl->handshake );
 80a89ea:	6b24      	ldr	r4, [r4, #48]	; 0x30
    return( 0 );
}

static void ssl_handshake_params_init( mbedtls_ssl_handshake_params *handshake )
{
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
 80a89ec:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
     mbedtls_md5_starts_ret( &handshake->fin_md5  );
    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_init(   &handshake->fin_sha256    );
 80a89f0:	f104 0518 	add.w	r5, r4, #24
    return( 0 );
}

static void ssl_handshake_params_init( mbedtls_ssl_handshake_params *handshake )
{
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
 80a89f4:	2100      	movs	r1, #0
 80a89f6:	4620      	mov	r0, r4
 80a89f8:	f006 fba1 	bl	80af13e <memset>
     mbedtls_md5_starts_ret( &handshake->fin_md5  );
    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_init(   &handshake->fin_sha256    );
 80a89fc:	4628      	mov	r0, r5
 80a89fe:	f7f8 f819 	bl	80a0a34 <mbedtls_sha256_init>
    mbedtls_sha256_starts_ret( &handshake->fin_sha256, 0 );
 80a8a02:	2100      	movs	r1, #0
 80a8a04:	4628      	mov	r0, r5
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_init(   &handshake->fin_sha512    );
 80a8a06:	f104 0588 	add.w	r5, r4, #136	; 0x88
    mbedtls_sha1_starts_ret( &handshake->fin_sha1 );
#endif
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
#if defined(MBEDTLS_SHA256_C)
    mbedtls_sha256_init(   &handshake->fin_sha256    );
    mbedtls_sha256_starts_ret( &handshake->fin_sha256, 0 );
 80a8a0a:	f7f8 f827 	bl	80a0a5c <mbedtls_sha256_starts_ret>
#endif
#if defined(MBEDTLS_SHA512_C)
    mbedtls_sha512_init(   &handshake->fin_sha512    );
 80a8a0e:	4628      	mov	r0, r5
 80a8a10:	f002 ff96 	bl	80ab940 <mbedtls_sha512_init>
    mbedtls_sha512_starts_ret( &handshake->fin_sha512, 1 );
 80a8a14:	2101      	movs	r1, #1
 80a8a16:	4628      	mov	r0, r5
 80a8a18:	f002 ffa6 	bl	80ab968 <mbedtls_sha512_starts_ret>
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

    handshake->update_checksum = ssl_update_checksum_start;
 80a8a1c:	4b05      	ldr	r3, [pc, #20]	; (80a8a34 <_ZL18ssl_handshake_initP19mbedtls_ssl_context+0xec>)

/* Allow exactly one hash algorithm for each signature. */
void mbedtls_ssl_sig_hash_set_const_hash( mbedtls_ssl_sig_hash_set_t *set,
                                          mbedtls_md_type_t md_alg )
{
    set->rsa   = md_alg;
 80a8a1e:	2000      	movs	r0, #0
    mbedtls_sha512_init(   &handshake->fin_sha512    );
    mbedtls_sha512_starts_ret( &handshake->fin_sha512, 1 );
#endif
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

    handshake->update_checksum = ssl_update_checksum_start;
 80a8a20:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
    handshake->ecjpake_cache_len = 0;
#endif
#endif

#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    handshake->sni_authmode = MBEDTLS_SSL_VERIFY_UNSET;
 80a8a24:	2303      	movs	r3, #3

/* Allow exactly one hash algorithm for each signature. */
void mbedtls_ssl_sig_hash_set_const_hash( mbedtls_ssl_sig_hash_set_t *set,
                                          mbedtls_md_type_t md_alg )
{
    set->rsa   = md_alg;
 80a8a26:	7020      	strb	r0, [r4, #0]
    set->ecdsa = md_alg;
 80a8a28:	7060      	strb	r0, [r4, #1]
    handshake->ecjpake_cache_len = 0;
#endif
#endif

#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    handshake->sni_authmode = MBEDTLS_SSL_VERIFY_UNSET;
 80a8a2a:	60a3      	str	r3, [r4, #8]
        ssl_set_timer( ssl, 0 );
    }
#endif

    return( 0 );
}
 80a8a2c:	bd38      	pop	{r3, r4, r5, pc}
 80a8a2e:	bf00      	nop
 80a8a30:	ffff8100 	.word	0xffff8100
 80a8a34:	080a7a81 	.word	0x080a7a81

080a8a38 <mbedtls_ssl_setup>:
/*
 * Setup an SSL context
 */
int mbedtls_ssl_setup( mbedtls_ssl_context *ssl,
                       const mbedtls_ssl_config *conf )
{
 80a8a38:	b538      	push	{r3, r4, r5, lr}
    int ret;
    const size_t len = MBEDTLS_SSL_BUFFER_LEN;

    ssl->conf = conf;
 80a8a3a:	6001      	str	r1, [r0, #0]
/*
 * Setup an SSL context
 */
int mbedtls_ssl_setup( mbedtls_ssl_context *ssl,
                       const mbedtls_ssl_config *conf )
{
 80a8a3c:	4604      	mov	r4, r0
    ssl->conf = conf;

    /*
     * Prepare base structures
     */
    if( ( ssl-> in_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL ||
 80a8a3e:	f242 012d 	movw	r1, #8237	; 0x202d
 80a8a42:	2001      	movs	r0, #1
 80a8a44:	f006 fb30 	bl	80af0a8 <calloc>
 80a8a48:	4605      	mov	r5, r0
 80a8a4a:	6520      	str	r0, [r4, #80]	; 0x50
 80a8a4c:	b328      	cbz	r0, 80a8a9a <mbedtls_ssl_setup+0x62>
        ( ssl->out_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
 80a8a4e:	f242 012d 	movw	r1, #8237	; 0x202d
 80a8a52:	2001      	movs	r0, #1
 80a8a54:	f006 fb28 	bl	80af0a8 <calloc>
    ssl->conf = conf;

    /*
     * Prepare base structures
     */
    if( ( ssl-> in_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL ||
 80a8a58:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 80a8a5c:	b1e8      	cbz	r0, 80a8a9a <mbedtls_ssl_setup+0x62>
    }
    else
#endif
    {
        ssl->out_ctr = ssl->out_buf;
        ssl->out_hdr = ssl->out_buf +  8;
 80a8a5e:	f100 0308 	add.w	r3, r0, #8
 80a8a62:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        ssl->out_len = ssl->out_buf + 11;
 80a8a66:	f100 030b 	add.w	r3, r0, #11
 80a8a6a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        ssl->out_iv  = ssl->out_buf + 13;
        ssl->out_msg = ssl->out_buf + 13;

        ssl->in_ctr = ssl->in_buf;
        ssl->in_hdr = ssl->in_buf +  8;
 80a8a6e:	f105 0308 	add.w	r3, r5, #8
        ssl->in_msg = ssl->in_buf + 13;
    }
    else
#endif
    {
        ssl->out_ctr = ssl->out_buf;
 80a8a72:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        ssl->out_hdr = ssl->out_buf +  8;
        ssl->out_len = ssl->out_buf + 11;
        ssl->out_iv  = ssl->out_buf + 13;
        ssl->out_msg = ssl->out_buf + 13;

        ssl->in_ctr = ssl->in_buf;
 80a8a76:	6565      	str	r5, [r4, #84]	; 0x54
#endif
    {
        ssl->out_ctr = ssl->out_buf;
        ssl->out_hdr = ssl->out_buf +  8;
        ssl->out_len = ssl->out_buf + 11;
        ssl->out_iv  = ssl->out_buf + 13;
 80a8a78:	300d      	adds	r0, #13
        ssl->out_msg = ssl->out_buf + 13;

        ssl->in_ctr = ssl->in_buf;
        ssl->in_hdr = ssl->in_buf +  8;
 80a8a7a:	65a3      	str	r3, [r4, #88]	; 0x58
        ssl->in_len = ssl->in_buf + 11;
 80a8a7c:	f105 030b 	add.w	r3, r5, #11
        ssl->in_iv  = ssl->in_buf + 13;
 80a8a80:	350d      	adds	r5, #13
#endif
    {
        ssl->out_ctr = ssl->out_buf;
        ssl->out_hdr = ssl->out_buf +  8;
        ssl->out_len = ssl->out_buf + 11;
        ssl->out_iv  = ssl->out_buf + 13;
 80a8a82:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
        ssl->out_msg = ssl->out_buf + 13;
 80a8a86:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98

        ssl->in_ctr = ssl->in_buf;
        ssl->in_hdr = ssl->in_buf +  8;
        ssl->in_len = ssl->in_buf + 11;
 80a8a8a:	65e3      	str	r3, [r4, #92]	; 0x5c
        ssl->in_iv  = ssl->in_buf + 13;
 80a8a8c:	6625      	str	r5, [r4, #96]	; 0x60
        ssl->in_msg = ssl->in_buf + 13;
 80a8a8e:	6665      	str	r5, [r4, #100]	; 0x64
    }

    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 80a8a90:	4620      	mov	r0, r4
        return( ret );

    return( 0 );
}
 80a8a92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ssl->in_len = ssl->in_buf + 11;
        ssl->in_iv  = ssl->in_buf + 13;
        ssl->in_msg = ssl->in_buf + 13;
    }

    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 80a8a96:	f7ff bf57 	b.w	80a8948 <_ZL18ssl_handshake_initP19mbedtls_ssl_context>
     */
    if( ( ssl-> in_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL ||
        ( ssl->out_buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed", len ) );
        mbedtls_free( ssl->in_buf );
 80a8a9a:	4628      	mov	r0, r5
 80a8a9c:	f005 fa36 	bl	80adf0c <free>
        ssl->in_buf = NULL;
 80a8aa0:	2300      	movs	r3, #0
 80a8aa2:	6523      	str	r3, [r4, #80]	; 0x50

    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
        return( ret );

    return( 0 );
}
 80a8aa4:	4800      	ldr	r0, [pc, #0]	; (80a8aa8 <mbedtls_ssl_setup+0x70>)
 80a8aa6:	bd38      	pop	{r3, r4, r5, pc}
 80a8aa8:	ffff8100 	.word	0xffff8100

080a8aac <mbedtls_ssl_free>:

/*
 * Free an SSL context
 */
void mbedtls_ssl_free( mbedtls_ssl_context *ssl )
{
 80a8aac:	b538      	push	{r3, r4, r5, lr}
    if( ssl == NULL )
 80a8aae:	4604      	mov	r4, r0
 80a8ab0:	2800      	cmp	r0, #0
 80a8ab2:	d048      	beq.n	80a8b46 <mbedtls_ssl_free+0x9a>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> free" ) );

    if( ssl->out_buf != NULL )
 80a8ab4:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 80a8ab8:	b138      	cbz	r0, 80a8aca <mbedtls_ssl_free+0x1e>
    {
        mbedtls_zeroize( ssl->out_buf, MBEDTLS_SSL_BUFFER_LEN );
 80a8aba:	f242 012d 	movw	r1, #8237	; 0x202d
 80a8abe:	f7fe fe61 	bl	80a7784 <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( ssl->out_buf );
 80a8ac2:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80a8ac6:	f005 fa21 	bl	80adf0c <free>
    }

    if( ssl->in_buf != NULL )
 80a8aca:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80a8acc:	b130      	cbz	r0, 80a8adc <mbedtls_ssl_free+0x30>
    {
        mbedtls_zeroize( ssl->in_buf, MBEDTLS_SSL_BUFFER_LEN );
 80a8ace:	f242 012d 	movw	r1, #8237	; 0x202d
 80a8ad2:	f7fe fe57 	bl	80a7784 <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( ssl->in_buf );
 80a8ad6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80a8ad8:	f005 fa18 	bl	80adf0c <free>
        mbedtls_zeroize( ssl->compress_buf, MBEDTLS_SSL_BUFFER_LEN );
        mbedtls_free( ssl->compress_buf );
    }
#endif

    if( ssl->transform )
 80a8adc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80a8ade:	b120      	cbz	r0, 80a8aea <mbedtls_ssl_free+0x3e>
    {
        mbedtls_ssl_transform_free( ssl->transform );
 80a8ae0:	f7ff febc 	bl	80a885c <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 80a8ae4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80a8ae6:	f005 fa11 	bl	80adf0c <free>
    }

    if( ssl->handshake )
 80a8aea:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80a8aec:	b180      	cbz	r0, 80a8b10 <mbedtls_ssl_free+0x64>
    {
        mbedtls_ssl_handshake_free( ssl->handshake );
 80a8aee:	f7ff fece 	bl	80a888e <mbedtls_ssl_handshake_free>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
 80a8af2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80a8af4:	f7ff feb2 	bl	80a885c <mbedtls_ssl_transform_free>
        mbedtls_ssl_session_free( ssl->session_negotiate );
 80a8af8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80a8afa:	f7ff fee1 	bl	80a88c0 <mbedtls_ssl_session_free>

        mbedtls_free( ssl->handshake );
 80a8afe:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80a8b00:	f005 fa04 	bl	80adf0c <free>
        mbedtls_free( ssl->transform_negotiate );
 80a8b04:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80a8b06:	f005 fa01 	bl	80adf0c <free>
        mbedtls_free( ssl->session_negotiate );
 80a8b0a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80a8b0c:	f005 f9fe 	bl	80adf0c <free>
    }

    if( ssl->session )
 80a8b10:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a8b12:	b120      	cbz	r0, 80a8b1e <mbedtls_ssl_free+0x72>
    {
        mbedtls_ssl_session_free( ssl->session );
 80a8b14:	f7ff fed4 	bl	80a88c0 <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
 80a8b18:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a8b1a:	f005 f9f7 	bl	80adf0c <free>
    }

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    if( ssl->hostname != NULL )
 80a8b1e:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 80a8b22:	b155      	cbz	r5, 80a8b3a <mbedtls_ssl_free+0x8e>
    {
        mbedtls_zeroize( ssl->hostname, strlen( ssl->hostname ) );
 80a8b24:	4628      	mov	r0, r5
 80a8b26:	f006 fb20 	bl	80af16a <strlen>
 80a8b2a:	4601      	mov	r1, r0
 80a8b2c:	4628      	mov	r0, r5
 80a8b2e:	f7fe fe29 	bl	80a7784 <_ZL15mbedtls_zeroizePvj>
        mbedtls_free( ssl->hostname );
 80a8b32:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 80a8b36:	f005 f9e9 	bl	80adf0c <free>
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= free" ) );

    /* Actually clear after last debug message */
    mbedtls_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
 80a8b3a:	4620      	mov	r0, r4
}
 80a8b3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= free" ) );

    /* Actually clear after last debug message */
    mbedtls_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
 80a8b40:	21b4      	movs	r1, #180	; 0xb4
 80a8b42:	f7fe be1f 	b.w	80a7784 <_ZL15mbedtls_zeroizePvj>
 80a8b46:	bd38      	pop	{r3, r4, r5, pc}

080a8b48 <mbedtls_ssl_config_init>:
/*
 * Initialze mbedtls_ssl_config
 */
void mbedtls_ssl_config_init( mbedtls_ssl_config *conf )
{
    memset( conf, 0, sizeof( mbedtls_ssl_config ) );
 80a8b48:	2264      	movs	r2, #100	; 0x64
 80a8b4a:	2100      	movs	r1, #0
 80a8b4c:	f006 baf7 	b.w	80af13e <memset>

080a8b50 <mbedtls_ssl_config_defaults>:
/*
 * Load default in mbedtls_ssl_config
 */
int mbedtls_ssl_config_defaults( mbedtls_ssl_config *conf,
                                 int endpoint, int transport, int preset )
{
 80a8b50:	b510      	push	{r4, lr}
 80a8b52:	4604      	mov	r4, r0
/*
 * SSL set accessors
 */
void mbedtls_ssl_conf_endpoint( mbedtls_ssl_config *conf, int endpoint )
{
    conf->endpoint   = endpoint;
 80a8b54:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
 80a8b58:	f361 0000 	bfi	r0, r1, #0, #1
}

void mbedtls_ssl_conf_transport( mbedtls_ssl_config *conf, int transport )
{
    conf->transport = transport;
 80a8b5c:	f362 0041 	bfi	r0, r2, #1, #1
 80a8b60:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60

    /*
     * Things that are common to all presets
     */
#if defined(MBEDTLS_SSL_CLI_C)
    if( endpoint == MBEDTLS_SSL_IS_CLIENT )
 80a8b64:	b951      	cbnz	r1, 80a8b7c <mbedtls_ssl_config_defaults+0x2c>
    {
        conf->authmode = MBEDTLS_SSL_VERIFY_REQUIRED;
 80a8b66:	2102      	movs	r1, #2
 80a8b68:	b2c2      	uxtb	r2, r0
 80a8b6a:	f361 0283 	bfi	r2, r1, #2, #2
 80a8b6e:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
        conf->session_tickets = MBEDTLS_SSL_SESSION_TICKETS_ENABLED;
 80a8b72:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 80a8b76:	430a      	orrs	r2, r1
 80a8b78:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
#endif

    /*
     * Preset-specific defaults
     */
    switch( preset )
 80a8b7c:	2b02      	cmp	r3, #2
 80a8b7e:	f04f 0303 	mov.w	r3, #3
    {
        /*
         * NSA Suite B
         */
        case MBEDTLS_SSL_PRESET_SUITEB:
            conf->min_major_ver = MBEDTLS_SSL_MAJOR_VERSION_3;
 80a8b82:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
            conf->min_minor_ver = MBEDTLS_SSL_MINOR_VERSION_3; /* TLS 1.2 */
 80a8b86:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
 80a8b8a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
            conf->max_minor_ver = MBEDTLS_SSL_MAX_MINOR_VERSION;
 80a8b8e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
#endif

    /*
     * Preset-specific defaults
     */
    switch( preset )
 80a8b92:	d108      	bne.n	80a8ba6 <mbedtls_ssl_config_defaults+0x56>

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   ssl_preset_suiteb_ciphersuites;
 80a8b94:	4b0a      	ldr	r3, [pc, #40]	; (80a8bc0 <mbedtls_ssl_config_defaults+0x70>)
 80a8b96:	60e3      	str	r3, [r4, #12]
 80a8b98:	60a3      	str	r3, [r4, #8]
 80a8b9a:	6063      	str	r3, [r4, #4]
 80a8b9c:	6023      	str	r3, [r4, #0]

#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_suiteb;
 80a8b9e:	4b09      	ldr	r3, [pc, #36]	; (80a8bc4 <mbedtls_ssl_config_defaults+0x74>)
 80a8ba0:	6463      	str	r3, [r4, #68]	; 0x44
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_suiteb_hashes;
 80a8ba2:	4b09      	ldr	r3, [pc, #36]	; (80a8bc8 <mbedtls_ssl_config_defaults+0x78>)
 80a8ba4:	e008      	b.n	80a8bb8 <mbedtls_ssl_config_defaults+0x68>

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   mbedtls_ssl_list_ciphersuites();
 80a8ba6:	f7fb fe2d 	bl	80a4804 <mbedtls_ssl_list_ciphersuites>

#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
 80a8baa:	4b08      	ldr	r3, [pc, #32]	; (80a8bcc <mbedtls_ssl_config_defaults+0x7c>)

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   mbedtls_ssl_list_ciphersuites();
 80a8bac:	60e0      	str	r0, [r4, #12]

#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
 80a8bae:	6463      	str	r3, [r4, #68]	; 0x44
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_default_hashes;
 80a8bb0:	4b07      	ldr	r3, [pc, #28]	; (80a8bd0 <mbedtls_ssl_config_defaults+0x80>)

            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_1] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
                                   mbedtls_ssl_list_ciphersuites();
 80a8bb2:	60a0      	str	r0, [r4, #8]
 80a8bb4:	6060      	str	r0, [r4, #4]
 80a8bb6:	6020      	str	r0, [r4, #0]
#if defined(MBEDTLS_X509_CRT_PARSE_C)
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
#endif

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
            conf->sig_hashes = ssl_preset_default_hashes;
 80a8bb8:	6563      	str	r3, [r4, #84]	; 0x54
            conf->dhm_min_bitlen = 1024;
#endif
    }

    return( 0 );
}
 80a8bba:	2000      	movs	r0, #0
 80a8bbc:	bd10      	pop	{r4, pc}
 80a8bbe:	bf00      	nop
 80a8bc0:	20000300 	.word	0x20000300
 80a8bc4:	080b0fdc 	.word	0x080b0fdc
 80a8bc8:	20000324 	.word	0x20000324
 80a8bcc:	080b08cc 	.word	0x080b08cc
 80a8bd0:	2000030c 	.word	0x2000030c

080a8bd4 <mbedtls_ssl_config_free>:

/*
 * Free mbedtls_ssl_config
 */
void mbedtls_ssl_config_free( mbedtls_ssl_config *conf )
{
 80a8bd4:	b538      	push	{r3, r4, r5, lr}
 80a8bd6:	4604      	mov	r4, r0
        conf->psk_identity_len = 0;
    }
#endif

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
 80a8bd8:	6c80      	ldr	r0, [r0, #72]	; 0x48
#if defined(MBEDTLS_X509_CRT_PARSE_C)
static void ssl_key_cert_free( mbedtls_ssl_key_cert *key_cert )
{
    mbedtls_ssl_key_cert *cur = key_cert, *next;

    while( cur != NULL )
 80a8bda:	b120      	cbz	r0, 80a8be6 <mbedtls_ssl_config_free+0x12>
    {
        next = cur->next;
 80a8bdc:	6885      	ldr	r5, [r0, #8]
        mbedtls_free( cur );
 80a8bde:	f005 f995 	bl	80adf0c <free>
        cur = next;
 80a8be2:	4628      	mov	r0, r5
 80a8be4:	e7f9      	b.n	80a8bda <mbedtls_ssl_config_free+0x6>

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
#endif

    mbedtls_zeroize( conf, sizeof( mbedtls_ssl_config ) );
 80a8be6:	4620      	mov	r0, r4
}
 80a8be8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

#if defined(MBEDTLS_X509_CRT_PARSE_C)
    ssl_key_cert_free( conf->key_cert );
#endif

    mbedtls_zeroize( conf, sizeof( mbedtls_ssl_config ) );
 80a8bec:	2164      	movs	r1, #100	; 0x64
 80a8bee:	f7fe bdc9 	b.w	80a7784 <_ZL15mbedtls_zeroizePvj>

080a8bf2 <mbedtls_ssl_sig_from_pk>:
    ( defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C) )
/*
 * Convert between MBEDTLS_PK_XXX and SSL_SIG_XXX
 */
unsigned char mbedtls_ssl_sig_from_pk( mbedtls_pk_context *pk )
{
 80a8bf2:	b508      	push	{r3, lr}
#if defined(MBEDTLS_RSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
 80a8bf4:	2101      	movs	r1, #1
 80a8bf6:	f001 fdc9 	bl	80aa78c <mbedtls_pk_can_do>
#if defined(MBEDTLS_ECDSA_C)
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECDSA ) )
        return( MBEDTLS_SSL_SIG_ECDSA );
#endif
    return( MBEDTLS_SSL_SIG_ANON );
}
 80a8bfa:	3000      	adds	r0, #0
 80a8bfc:	bf18      	it	ne
 80a8bfe:	2001      	movne	r0, #1
 80a8c00:	bd08      	pop	{r3, pc}
	...

080a8c04 <mbedtls_ssl_hash_from_md_alg>:

/*
 * Convert from MBEDTLS_MD_XXX to MBEDTLS_SSL_HASH_XXX
 */
unsigned char mbedtls_ssl_hash_from_md_alg( int md )
{
 80a8c04:	3804      	subs	r0, #4
 80a8c06:	2804      	cmp	r0, #4
 80a8c08:	bf9a      	itte	ls
 80a8c0a:	4b02      	ldrls	r3, [pc, #8]	; (80a8c14 <mbedtls_ssl_hash_from_md_alg+0x10>)
 80a8c0c:	5c18      	ldrbls	r0, [r3, r0]
    switch( md )
 80a8c0e:	2000      	movhi	r0, #0
            return( MBEDTLS_SSL_HASH_SHA512 );
#endif
        default:
            return( MBEDTLS_SSL_HASH_NONE );
    }
}
 80a8c10:	4770      	bx	lr
 80a8c12:	bf00      	nop
 80a8c14:	080b1048 	.word	0x080b1048

080a8c18 <mbedtls_ssl_check_cert_usage>:
    ((void) cert_endpoint);
    ((void) flags);
#endif

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
 80a8c18:	2a01      	cmp	r2, #1
#if defined(MBEDTLS_X509_CRT_PARSE_C)
int mbedtls_ssl_check_cert_usage( const mbedtls_x509_crt *cert,
                          const mbedtls_ssl_ciphersuite_t *ciphersuite,
                          int cert_endpoint,
                          uint32_t *flags )
{
 80a8c1a:	b510      	push	{r4, lr}
 80a8c1c:	461c      	mov	r4, r3
    ((void) cert_endpoint);
    ((void) flags);
#endif

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
 80a8c1e:	d10f      	bne.n	80a8c40 <mbedtls_ssl_check_cert_usage+0x28>
    {
        /* Server part of the key exchange */
        switch( ciphersuite->key_exchange )
 80a8c20:	7a8b      	ldrb	r3, [r1, #10]
 80a8c22:	2b0a      	cmp	r3, #10
 80a8c24:	d80e      	bhi.n	80a8c44 <mbedtls_ssl_check_cert_usage+0x2c>
 80a8c26:	409a      	lsls	r2, r3
 80a8c28:	f012 0f82 	tst.w	r2, #130	; 0x82
 80a8c2c:	d10c      	bne.n	80a8c48 <mbedtls_ssl_check_cert_usage+0x30>
 80a8c2e:	f412 6fc0 	tst.w	r2, #1536	; 0x600
 80a8c32:	d10b      	bne.n	80a8c4c <mbedtls_ssl_check_cert_usage+0x34>
 80a8c34:	f012 0f1c 	tst.w	r2, #28
                          int cert_endpoint,
                          uint32_t *flags )
{
    int ret = 0;
#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    int usage = 0;
 80a8c38:	bf14      	ite	ne
 80a8c3a:	2180      	movne	r1, #128	; 0x80
 80a8c3c:	2100      	moveq	r1, #0
 80a8c3e:	e006      	b.n	80a8c4e <mbedtls_ssl_check_cert_usage+0x36>
        }
    }
    else
    {
        /* Client auth: we only implement rsa_sign and mbedtls_ecdsa_sign for now */
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
 80a8c40:	2180      	movs	r1, #128	; 0x80
 80a8c42:	e004      	b.n	80a8c4e <mbedtls_ssl_check_cert_usage+0x36>
                          int cert_endpoint,
                          uint32_t *flags )
{
    int ret = 0;
#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    int usage = 0;
 80a8c44:	2100      	movs	r1, #0
 80a8c46:	e002      	b.n	80a8c4e <mbedtls_ssl_check_cert_usage+0x36>
        /* Server part of the key exchange */
        switch( ciphersuite->key_exchange )
        {
            case MBEDTLS_KEY_EXCHANGE_RSA:
            case MBEDTLS_KEY_EXCHANGE_RSA_PSK:
                usage = MBEDTLS_X509_KU_KEY_ENCIPHERMENT;
 80a8c48:	2120      	movs	r1, #32
 80a8c4a:	e000      	b.n	80a8c4e <mbedtls_ssl_check_cert_usage+0x36>
                usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
                break;

            case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
            case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
                usage = MBEDTLS_X509_KU_KEY_AGREEMENT;
 80a8c4c:	2108      	movs	r1, #8
    {
        /* Client auth: we only implement rsa_sign and mbedtls_ecdsa_sign for now */
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
    }

    if( mbedtls_x509_crt_check_key_usage( cert, usage ) != 0 )
 80a8c4e:	f7fd fdb3 	bl	80a67b8 <mbedtls_x509_crt_check_key_usage>
 80a8c52:	b128      	cbz	r0, 80a8c60 <mbedtls_ssl_check_cert_usage+0x48>
    {
        *flags |= MBEDTLS_X509_BADCERT_KEY_USAGE;
 80a8c54:	6822      	ldr	r2, [r4, #0]
        ret = -1;
 80a8c56:	f04f 30ff 	mov.w	r0, #4294967295
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
    }

    if( mbedtls_x509_crt_check_key_usage( cert, usage ) != 0 )
    {
        *flags |= MBEDTLS_X509_BADCERT_KEY_USAGE;
 80a8c5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80a8c5e:	6022      	str	r2, [r4, #0]
        ret = -1;
    }
#endif /* MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE */

    return( ret );
}
 80a8c60:	bd10      	pop	{r4, pc}
	...

080a8c64 <mbedtls_ssl_parse_certificate>:

    return( ret );
}

int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
 80a8c64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 80a8c68:	6c03      	ldr	r3, [r0, #64]	; 0x40

    return( ret );
}

int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
 80a8c6a:	b085      	sub	sp, #20
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 80a8c6c:	f8d3 8000 	ldr.w	r8, [r3]

    return( ret );
}

int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
 80a8c70:	4605      	mov	r5, r0
    int authmode = ssl->conf->authmode;
    uint8_t alert;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 80a8c72:	f898 200a 	ldrb.w	r2, [r8, #10]
 80a8c76:	2a0b      	cmp	r2, #11
 80a8c78:	d80b      	bhi.n	80a8c92 <mbedtls_ssl_parse_certificate+0x2e>
 80a8c7a:	f44f 6316 	mov.w	r3, #2400	; 0x960
 80a8c7e:	40d3      	lsrs	r3, r2
 80a8c80:	f003 0301 	and.w	r3, r3, #1
 80a8c84:	f083 0001 	eor.w	r0, r3, #1
 80a8c88:	b11b      	cbz	r3, 80a8c92 <mbedtls_ssl_parse_certificate+0x2e>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate" ) );
        ssl->state++;
 80a8c8a:	686b      	ldr	r3, [r5, #4]
 80a8c8c:	3301      	adds	r3, #1
 80a8c8e:	606b      	str	r3, [r5, #4]
        return( 0 );
 80a8c90:	e0e0      	b.n	80a8e54 <mbedtls_ssl_parse_certificate+0x1f0>
int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
    int authmode = ssl->conf->authmode;
 80a8c92:	682b      	ldr	r3, [r5, #0]
        ssl->state++;
        return( 0 );
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 80a8c94:	4628      	mov	r0, r5
int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
    int authmode = ssl->conf->authmode;
 80a8c96:	f893 7060 	ldrb.w	r7, [r3, #96]	; 0x60
        ssl->state++;
        return( 0 );
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 80a8c9a:	f7ff fb01 	bl	80a82a0 <mbedtls_ssl_read_record>
int mbedtls_ssl_parse_certificate( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
    int authmode = ssl->conf->authmode;
 80a8c9e:	f3c7 0781 	ubfx	r7, r7, #2, #2
        ssl->state++;
        return( 0 );
    }
#endif

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 80a8ca2:	4604      	mov	r4, r0
 80a8ca4:	bb80      	cbnz	r0, 80a8d08 <mbedtls_ssl_parse_certificate+0xa4>
           let it decide whether to alert. */
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    ssl->state++;
 80a8ca6:	686b      	ldr	r3, [r5, #4]
 80a8ca8:	3301      	adds	r3, #1
 80a8caa:	606b      	str	r3, [r5, #4]
    }
#endif /* MBEDTLS_SSL_PROTO_TLS1 || MBEDTLS_SSL_PROTO_TLS1_1 || \
          MBEDTLS_SSL_PROTO_TLS1_2 */
#endif /* MBEDTLS_SSL_SRV_C */

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 80a8cac:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80a8cae:	2b16      	cmp	r3, #22
 80a8cb0:	d006      	beq.n	80a8cc0 <mbedtls_ssl_parse_certificate+0x5c>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 80a8cb2:	220a      	movs	r2, #10
 80a8cb4:	2102      	movs	r1, #2
 80a8cb6:	4628      	mov	r0, r5
 80a8cb8:	f7ff f9e0 	bl	80a807c <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 80a8cbc:	4867      	ldr	r0, [pc, #412]	; (80a8e5c <mbedtls_ssl_parse_certificate+0x1f8>)
 80a8cbe:	e0c9      	b.n	80a8e54 <mbedtls_ssl_parse_certificate+0x1f0>
    }

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 80a8cc0:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 80a8cc2:	7813      	ldrb	r3, [r2, #0]
 80a8cc4:	2b0b      	cmp	r3, #11
 80a8cc6:	d10b      	bne.n	80a8ce0 <mbedtls_ssl_parse_certificate+0x7c>
        ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 3 + 3 )
 80a8cc8:	6fa9      	ldr	r1, [r5, #120]	; 0x78
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 80a8cca:	2909      	cmp	r1, #9
 80a8ccc:	d908      	bls.n	80a8ce0 <mbedtls_ssl_parse_certificate+0x7c>
    /*
     * Same message structure as in mbedtls_ssl_write_certificate()
     */
    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];

    if( ssl->in_msg[i] != 0 ||
 80a8cce:	7913      	ldrb	r3, [r2, #4]
 80a8cd0:	b933      	cbnz	r3, 80a8ce0 <mbedtls_ssl_parse_certificate+0x7c>
 80a8cd2:	7950      	ldrb	r0, [r2, #5]
 80a8cd4:	7993      	ldrb	r3, [r2, #6]
 80a8cd6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80a8cda:	3307      	adds	r3, #7
 80a8cdc:	4299      	cmp	r1, r3
 80a8cde:	d015      	beq.n	80a8d0c <mbedtls_ssl_parse_certificate+0xa8>
    while( i < ssl->in_hslen )
    {
        if ( i + 3 > ssl->in_hslen ) {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                           MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 80a8ce0:	2232      	movs	r2, #50	; 0x32
 80a8ce2:	2102      	movs	r1, #2
 80a8ce4:	4628      	mov	r0, r5
 80a8ce6:	f7ff f9c9 	bl	80a807c <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
 80a8cea:	485d      	ldr	r0, [pc, #372]	; (80a8e60 <mbedtls_ssl_parse_certificate+0x1fc>)
 80a8cec:	e0b2      	b.n	80a8e54 <mbedtls_ssl_parse_certificate+0x1f0>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
 80a8cee:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
                                  ssl->in_msg + i, n );
        switch( ret )
 80a8cf0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80a8e6c <mbedtls_ssl_parse_certificate+0x208>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
 80a8cf4:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80a8cf6:	f7fe f935 	bl	80a6f64 <mbedtls_x509_crt_init>

    i += 3;
 80a8cfa:	2607      	movs	r6, #7

    while( i < ssl->in_hslen )
 80a8cfc:	f8d5 e078 	ldr.w	lr, [r5, #120]	; 0x78
 80a8d00:	4576      	cmp	r6, lr
 80a8d02:	d31c      	bcc.n	80a8d3e <mbedtls_ssl_parse_certificate+0xda>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }
    }
#endif /* MBEDTLS_SSL_RENEGOTIATION && MBEDTLS_SSL_CLI_C */

    if( authmode != MBEDTLS_SSL_VERIFY_NONE )
 80a8d04:	2f00      	cmp	r7, #0
 80a8d06:	d13f      	bne.n	80a8d88 <mbedtls_ssl_parse_certificate+0x124>
         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
         * with details encoded in the verification flags. All other kinds
         * of error codes, including those from the user provided f_vrfy
         * functions, are treated as fatal and lead to a failure of
         * ssl_parse_certificate even if verification was optional. */
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 80a8d08:	4620      	mov	r0, r4
 80a8d0a:	e0a3      	b.n	80a8e54 <mbedtls_ssl_parse_certificate+0x1f0>
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
    }

    /* In case we tried to reuse a session but it failed */
    if( ssl->session_negotiate->peer_cert != NULL )
 80a8d0c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80a8d0e:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80a8d10:	b128      	cbz	r0, 80a8d1e <mbedtls_ssl_parse_certificate+0xba>
    {
        mbedtls_x509_crt_free( ssl->session_negotiate->peer_cert );
 80a8d12:	f7fe f92c 	bl	80a6f6e <mbedtls_x509_crt_free>
        mbedtls_free( ssl->session_negotiate->peer_cert );
 80a8d16:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80a8d18:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80a8d1a:	f005 f8f7 	bl	80adf0c <free>
    }

    if( ( ssl->session_negotiate->peer_cert = (mbedtls_x509_crt *)mbedtls_calloc( 1,
 80a8d1e:	f44f 719a 	mov.w	r1, #308	; 0x134
 80a8d22:	2001      	movs	r0, #1
 80a8d24:	6aee      	ldr	r6, [r5, #44]	; 0x2c
 80a8d26:	f006 f9bf 	bl	80af0a8 <calloc>
 80a8d2a:	65f0      	str	r0, [r6, #92]	; 0x5c
 80a8d2c:	2800      	cmp	r0, #0
 80a8d2e:	d1de      	bne.n	80a8cee <mbedtls_ssl_parse_certificate+0x8a>
                    sizeof( mbedtls_x509_crt ) ) ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed",
                       sizeof( mbedtls_x509_crt ) ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
 80a8d30:	2250      	movs	r2, #80	; 0x50
 80a8d32:	2102      	movs	r1, #2
 80a8d34:	4628      	mov	r0, r5
 80a8d36:	f7ff f9a1 	bl	80a807c <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 80a8d3a:	484a      	ldr	r0, [pc, #296]	; (80a8e64 <mbedtls_ssl_parse_certificate+0x200>)
 80a8d3c:	e08a      	b.n	80a8e54 <mbedtls_ssl_parse_certificate+0x1f0>

    i += 3;

    while( i < ssl->in_hslen )
    {
        if ( i + 3 > ssl->in_hslen ) {
 80a8d3e:	1cf1      	adds	r1, r6, #3
 80a8d40:	458e      	cmp	lr, r1
 80a8d42:	d3cd      	bcc.n	80a8ce0 <mbedtls_ssl_parse_certificate+0x7c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                           MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }
        if( ssl->in_msg[i] != 0 )
 80a8d44:	6e68      	ldr	r0, [r5, #100]	; 0x64
 80a8d46:	5d83      	ldrb	r3, [r0, r6]
 80a8d48:	2b00      	cmp	r3, #0
 80a8d4a:	d1c9      	bne.n	80a8ce0 <mbedtls_ssl_parse_certificate+0x7c>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
 80a8d4c:	4406      	add	r6, r0
            | (unsigned int) ssl->in_msg[i + 2];
 80a8d4e:	7872      	ldrb	r2, [r6, #1]
 80a8d50:	78b3      	ldrb	r3, [r6, #2]
 80a8d52:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
        i += 3;

        if( n < 128 || i + n > ssl->in_hslen )
 80a8d56:	2a7f      	cmp	r2, #127	; 0x7f
 80a8d58:	d9c2      	bls.n	80a8ce0 <mbedtls_ssl_parse_certificate+0x7c>
 80a8d5a:	188e      	adds	r6, r1, r2
 80a8d5c:	45b6      	cmp	lr, r6
 80a8d5e:	d3bf      	bcc.n	80a8ce0 <mbedtls_ssl_parse_certificate+0x7c>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
 80a8d60:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
                                  ssl->in_msg + i, n );
 80a8d62:	4401      	add	r1, r0
 80a8d64:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80a8d66:	f7fe f95b 	bl	80a7020 <mbedtls_x509_crt_parse_der>
        switch( ret )
 80a8d6a:	4548      	cmp	r0, r9
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
                                  ssl->in_msg + i, n );
 80a8d6c:	4604      	mov	r4, r0
        switch( ret )
 80a8d6e:	d0c5      	beq.n	80a8cfc <mbedtls_ssl_parse_certificate+0x98>
 80a8d70:	dc04      	bgt.n	80a8d7c <mbedtls_ssl_parse_certificate+0x118>
 80a8d72:	f510 5f22 	cmn.w	r0, #10368	; 0x2880
 80a8d76:	d158      	bne.n	80a8e2a <mbedtls_ssl_parse_certificate+0x1c6>
            /* Ignore certificate with an unknown algorithm: maybe a
               prior certificate was already trusted. */
            break;

        case MBEDTLS_ERR_X509_ALLOC_FAILED:
            alert = MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR;
 80a8d78:	2250      	movs	r2, #80	; 0x50
 80a8d7a:	e05d      	b.n	80a8e38 <mbedtls_ssl_parse_certificate+0x1d4>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
        }

        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
                                  ssl->in_msg + i, n );
        switch( ret )
 80a8d7c:	f510 5f16 	cmn.w	r0, #9600	; 0x2580
 80a8d80:	d055      	beq.n	80a8e2e <mbedtls_ssl_parse_certificate+0x1ca>
 80a8d82:	2800      	cmp	r0, #0
 80a8d84:	d0ba      	beq.n	80a8cfc <mbedtls_ssl_parse_certificate+0x98>
 80a8d86:	e050      	b.n	80a8e2a <mbedtls_ssl_parse_certificate+0x1c6>
    {
        mbedtls_x509_crt *ca_chain;
        mbedtls_x509_crl *ca_crl;

#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
        if( ssl->handshake->sni_ca_chain != NULL )
 80a8d88:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80a8d8a:	682b      	ldr	r3, [r5, #0]
 80a8d8c:	6916      	ldr	r6, [r2, #16]
 80a8d8e:	b10e      	cbz	r6, 80a8d94 <mbedtls_ssl_parse_certificate+0x130>
        {
            ca_chain = ssl->handshake->sni_ca_chain;
            ca_crl   = ssl->handshake->sni_ca_crl;
 80a8d90:	6952      	ldr	r2, [r2, #20]
 80a8d92:	e001      	b.n	80a8d98 <mbedtls_ssl_parse_certificate+0x134>
        }
        else
#endif
        {
            ca_chain = ssl->conf->ca_chain;
 80a8d94:	6cde      	ldr	r6, [r3, #76]	; 0x4c
            ca_crl   = ssl->conf->ca_crl;
 80a8d96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                ssl->session_negotiate->peer_cert,
                                ca_chain, ca_crl,
                                ssl->conf->cert_profile,
                                ssl->hostname,
                               &ssl->session_negotiate->verify_result,
                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
 80a8d98:	6b99      	ldr	r1, [r3, #56]	; 0x38

        /*
         * Main check: verify certificate
         */
        ret = mbedtls_x509_crt_verify_with_profile(
                                ssl->session_negotiate->peer_cert,
 80a8d9a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
                                ca_chain, ca_crl,
                                ssl->conf->cert_profile,
                                ssl->hostname,
                               &ssl->session_negotiate->verify_result,
                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
 80a8d9c:	9103      	str	r1, [sp, #12]
 80a8d9e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80a8da0:	9102      	str	r1, [sp, #8]
        }

        /*
         * Main check: verify certificate
         */
        ret = mbedtls_x509_crt_verify_with_profile(
 80a8da2:	f100 0160 	add.w	r1, r0, #96	; 0x60
                                ssl->session_negotiate->peer_cert,
                                ca_chain, ca_crl,
                                ssl->conf->cert_profile,
                                ssl->hostname,
                               &ssl->session_negotiate->verify_result,
                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
 80a8da6:	9101      	str	r1, [sp, #4]
 80a8da8:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 80a8dac:	9100      	str	r1, [sp, #0]
 80a8dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a8db0:	4631      	mov	r1, r6
 80a8db2:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80a8db4:	f7fd fff4 	bl	80a6da0 <mbedtls_x509_crt_verify_with_profile>
                    ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
            }
        }
#endif /* MBEDTLS_ECP_C */

        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
 80a8db8:	682b      	ldr	r3, [r5, #0]
                                ssl->session_negotiate->peer_cert,
                                ca_chain, ca_crl,
                                ssl->conf->cert_profile,
                                ssl->hostname,
                               &ssl->session_negotiate->verify_result,
                                ssl->conf->f_vrfy, ssl->conf->p_vrfy );
 80a8dba:	4604      	mov	r4, r0
                    ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
            }
        }
#endif /* MBEDTLS_ECP_C */

        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
 80a8dbc:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80a8dc0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80a8dc2:	f002 0201 	and.w	r2, r2, #1
 80a8dc6:	f100 0360 	add.w	r3, r0, #96	; 0x60
 80a8dca:	f082 0201 	eor.w	r2, r2, #1
 80a8dce:	4641      	mov	r1, r8
 80a8dd0:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80a8dd2:	f7ff ff21 	bl	80a8c18 <mbedtls_ssl_check_cert_usage>
 80a8dd6:	b100      	cbz	r0, 80a8dda <mbedtls_ssl_parse_certificate+0x176>
                                 ciphersuite_info,
                                 ! ssl->conf->endpoint,
                                 &ssl->session_negotiate->verify_result ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (usage extensions)" ) );
            if( ret == 0 )
 80a8dd8:	b174      	cbz	r4, 80a8df8 <mbedtls_ssl_parse_certificate+0x194>
         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
         * with details encoded in the verification flags. All other kinds
         * of error codes, including those from the user provided f_vrfy
         * functions, are treated as fatal and lead to a failure of
         * ssl_parse_certificate even if verification was optional. */
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 80a8dda:	2f01      	cmp	r7, #1
 80a8ddc:	d105      	bne.n	80a8dea <mbedtls_ssl_parse_certificate+0x186>
 80a8dde:	f514 5f1c 	cmn.w	r4, #9984	; 0x2700
 80a8de2:	d02e      	beq.n	80a8e42 <mbedtls_ssl_parse_certificate+0x1de>
            ( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED ||
 80a8de4:	f514 4ff4 	cmn.w	r4, #31232	; 0x7a00
 80a8de8:	d02b      	beq.n	80a8e42 <mbedtls_ssl_parse_certificate+0x1de>
              ret == MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE ) )
        {
            ret = 0;
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
 80a8dea:	b90e      	cbnz	r6, 80a8df0 <mbedtls_ssl_parse_certificate+0x18c>
 80a8dec:	2f02      	cmp	r7, #2
 80a8dee:	d001      	beq.n	80a8df4 <mbedtls_ssl_parse_certificate+0x190>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
        }

        if( ret != 0 )
 80a8df0:	b934      	cbnz	r4, 80a8e00 <mbedtls_ssl_parse_certificate+0x19c>
 80a8df2:	e789      	b.n	80a8d08 <mbedtls_ssl_parse_certificate+0xa4>
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
 80a8df4:	4c1c      	ldr	r4, [pc, #112]	; (80a8e68 <mbedtls_ssl_parse_certificate+0x204>)
 80a8df6:	e003      	b.n	80a8e00 <mbedtls_ssl_parse_certificate+0x19c>
         * verification failure through MBEDTLS_ERR_X509_CERT_VERIFY_FAILED,
         * with details encoded in the verification flags. All other kinds
         * of error codes, including those from the user provided f_vrfy
         * functions, are treated as fatal and lead to a failure of
         * ssl_parse_certificate even if verification was optional. */
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 80a8df8:	2f01      	cmp	r7, #1
 80a8dfa:	d085      	beq.n	80a8d08 <mbedtls_ssl_parse_certificate+0xa4>
              ret == MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE ) )
        {
            ret = 0;
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
 80a8dfc:	b31e      	cbz	r6, 80a8e46 <mbedtls_ssl_parse_certificate+0x1e2>
                                 ! ssl->conf->endpoint,
                                 &ssl->session_negotiate->verify_result ) != 0 )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (usage extensions)" ) );
            if( ret == 0 )
                ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
 80a8dfe:	4c18      	ldr	r4, [pc, #96]	; (80a8e60 <mbedtls_ssl_parse_certificate+0x1fc>)
        if( ret != 0 )
        {
            /* The certificate may have been rejected for several reasons.
               Pick one and send the corresponding alert. Which alert to send
               may be a subject of debate in some cases. */
            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
 80a8e00:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80a8e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a8e04:	05df      	lsls	r7, r3, #23
 80a8e06:	d40e      	bmi.n	80a8e26 <mbedtls_ssl_parse_certificate+0x1c2>
                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
 80a8e08:	075e      	lsls	r6, r3, #29
 80a8e0a:	d40e      	bmi.n	80a8e2a <mbedtls_ssl_parse_certificate+0x1c6>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NS_CERT_TYPE )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_PK )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
 80a8e0c:	f413 3fdc 	tst.w	r3, #112640	; 0x1b800
 80a8e10:	d10d      	bne.n	80a8e2e <mbedtls_ssl_parse_certificate+0x1ca>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
 80a8e12:	07d8      	lsls	r0, r3, #31
 80a8e14:	d40d      	bmi.n	80a8e32 <mbedtls_ssl_parse_certificate+0x1ce>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
 80a8e16:	0799      	lsls	r1, r3, #30
 80a8e18:	d40d      	bmi.n	80a8e36 <mbedtls_ssl_parse_certificate+0x1d2>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NOT_TRUSTED )
                alert = MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA;
            else
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
 80a8e1a:	f013 0f08 	tst.w	r3, #8
 80a8e1e:	bf14      	ite	ne
 80a8e20:	2230      	movne	r2, #48	; 0x30
 80a8e22:	222e      	moveq	r2, #46	; 0x2e
 80a8e24:	e008      	b.n	80a8e38 <mbedtls_ssl_parse_certificate+0x1d4>
        {
            /* The certificate may have been rejected for several reasons.
               Pick one and send the corresponding alert. Which alert to send
               may be a subject of debate in some cases. */
            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
 80a8e26:	2231      	movs	r2, #49	; 0x31
 80a8e28:	e006      	b.n	80a8e38 <mbedtls_ssl_parse_certificate+0x1d4>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
                alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
 80a8e2a:	222a      	movs	r2, #42	; 0x2a
 80a8e2c:	e004      	b.n	80a8e38 <mbedtls_ssl_parse_certificate+0x1d4>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NS_CERT_TYPE )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_PK )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 80a8e2e:	222b      	movs	r2, #43	; 0x2b
 80a8e30:	e002      	b.n	80a8e38 <mbedtls_ssl_parse_certificate+0x1d4>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
 80a8e32:	222d      	movs	r2, #45	; 0x2d
 80a8e34:	e000      	b.n	80a8e38 <mbedtls_ssl_parse_certificate+0x1d4>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
 80a8e36:	222c      	movs	r2, #44	; 0x2c
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_NOT_TRUSTED )
                alert = MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA;
            else
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            alert );
 80a8e38:	2102      	movs	r1, #2
 80a8e3a:	4628      	mov	r0, r5
 80a8e3c:	f7ff f91e 	bl	80a807c <mbedtls_ssl_send_alert_message>
 80a8e40:	e762      	b.n	80a8d08 <mbedtls_ssl_parse_certificate+0xa4>
 80a8e42:	2000      	movs	r0, #0
 80a8e44:	e006      	b.n	80a8e54 <mbedtls_ssl_parse_certificate+0x1f0>
        }

        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
 80a8e46:	4b08      	ldr	r3, [pc, #32]	; (80a8e68 <mbedtls_ssl_parse_certificate+0x204>)
 80a8e48:	4805      	ldr	r0, [pc, #20]	; (80a8e60 <mbedtls_ssl_parse_certificate+0x1fc>)
 80a8e4a:	2f02      	cmp	r7, #2
 80a8e4c:	bf14      	ite	ne
 80a8e4e:	4604      	movne	r4, r0
 80a8e50:	461c      	moveq	r4, r3
 80a8e52:	e7d5      	b.n	80a8e00 <mbedtls_ssl_parse_certificate+0x19c>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate" ) );

    return( ret );
}
 80a8e54:	b005      	add	sp, #20
 80a8e56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a8e5a:	bf00      	nop
 80a8e5c:	ffff8900 	.word	0xffff8900
 80a8e60:	ffff8600 	.word	0xffff8600
 80a8e64:	ffff8100 	.word	0xffff8100
 80a8e68:	ffff8980 	.word	0xffff8980
 80a8e6c:	ffffd9d2 	.word	0xffffd9d2

080a8e70 <mbedtls_ssl_write_version>:
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 80a8e70:	7018      	strb	r0, [r3, #0]
        ver[1] = (unsigned char) minor;
 80a8e72:	7059      	strb	r1, [r3, #1]
 80a8e74:	4770      	bx	lr

080a8e76 <mbedtls_ssl_read_version>:
    else
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
 80a8e76:	781a      	ldrb	r2, [r3, #0]
 80a8e78:	6002      	str	r2, [r0, #0]
        *minor = ver[1];
 80a8e7a:	785b      	ldrb	r3, [r3, #1]
 80a8e7c:	600b      	str	r3, [r1, #0]
 80a8e7e:	4770      	bx	lr

080a8e80 <_ZL11mpi_sub_hlpjPmS_>:
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 80a8e80:	2300      	movs	r3, #0

/*
 * Helper for mbedtls_mpi subtraction
 */
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
 80a8e82:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a8e84:	4616      	mov	r6, r2
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 80a8e86:	461c      	mov	r4, r3
 80a8e88:	4284      	cmp	r4, r0
 80a8e8a:	d016      	beq.n	80a8eba <_ZL11mpi_sub_hlpjPmS_+0x3a>
    {
        z = ( *d <  c );     *d -=  c;
 80a8e8c:	f8d6 e000 	ldr.w	lr, [r6]
 80a8e90:	ebc3 050e 	rsb	r5, r3, lr
 80a8e94:	6035      	str	r5, [r6, #0]
        c = ( *d < *s ) + z; *d -= *s;
 80a8e96:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 80a8e9a:	3401      	adds	r4, #1
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
 80a8e9c:	42bd      	cmp	r5, r7
 80a8e9e:	bf2c      	ite	cs
 80a8ea0:	f04f 0c00 	movcs.w	ip, #0
 80a8ea4:	f04f 0c01 	movcc.w	ip, #1
 80a8ea8:	1bed      	subs	r5, r5, r7
 80a8eaa:	4573      	cmp	r3, lr
 80a8eac:	bf94      	ite	ls
 80a8eae:	4663      	movls	r3, ip
 80a8eb0:	f10c 0301 	addhi.w	r3, ip, #1
 80a8eb4:	f846 5b04 	str.w	r5, [r6], #4
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 80a8eb8:	e7e6      	b.n	80a8e88 <_ZL11mpi_sub_hlpjPmS_+0x8>
 80a8eba:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
 80a8ebe:	b143      	cbz	r3, 80a8ed2 <_ZL11mpi_sub_hlpjPmS_+0x52>
    {
        z = ( *d < c ); *d -= c;
 80a8ec0:	6811      	ldr	r1, [r2, #0]
 80a8ec2:	1ac8      	subs	r0, r1, r3
        c = z; i++; d++;
 80a8ec4:	428b      	cmp	r3, r1
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
    {
        z = ( *d < c ); *d -= c;
 80a8ec6:	f842 0b04 	str.w	r0, [r2], #4
        c = z; i++; d++;
 80a8eca:	bf94      	ite	ls
 80a8ecc:	2300      	movls	r3, #0
 80a8ece:	2301      	movhi	r3, #1
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
 80a8ed0:	e7f5      	b.n	80a8ebe <_ZL11mpi_sub_hlpjPmS_+0x3e>
 80a8ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a8ed4 <_ZL11mpi_mul_hlpjPmS_m>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
 80a8ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a8ed8:	460d      	mov	r5, r1
 80a8eda:	4614      	mov	r4, r2
 80a8edc:	4686      	mov	lr, r0
    mbedtls_mpi_uint c = 0, t = 0;
 80a8ede:	f04f 0c00 	mov.w	ip, #0
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 80a8ee2:	f1be 0f0f 	cmp.w	lr, #15
 80a8ee6:	f105 0540 	add.w	r5, r5, #64	; 0x40
 80a8eea:	f104 0440 	add.w	r4, r4, #64	; 0x40
 80a8eee:	f240 811e 	bls.w	80a912e <_ZL11mpi_mul_hlpjPmS_m+0x25a>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 80a8ef2:	f855 6c40 	ldr.w	r6, [r5, #-64]
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 80a8ef6:	f1ae 0e10 	sub.w	lr, lr, #16
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 80a8efa:	fba6 9a03 	umull	r9, sl, r6, r3
 80a8efe:	f854 6c40 	ldr.w	r6, [r4, #-64]
 80a8f02:	eb1c 0c09 	adds.w	ip, ip, r9
 80a8f06:	bf2c      	ite	cs
 80a8f08:	f04f 0801 	movcs.w	r8, #1
 80a8f0c:	f04f 0800 	movcc.w	r8, #0
 80a8f10:	eb1c 0606 	adds.w	r6, ip, r6
 80a8f14:	f844 6c40 	str.w	r6, [r4, #-64]
 80a8f18:	f855 6c3c 	ldr.w	r6, [r5, #-60]
 80a8f1c:	eb48 080a 	adc.w	r8, r8, sl
 80a8f20:	fba3 9a06 	umull	r9, sl, r3, r6
 80a8f24:	f854 6c3c 	ldr.w	r6, [r4, #-60]
 80a8f28:	eb18 0809 	adds.w	r8, r8, r9
 80a8f2c:	bf2c      	ite	cs
 80a8f2e:	f04f 0c01 	movcs.w	ip, #1
 80a8f32:	f04f 0c00 	movcc.w	ip, #0
 80a8f36:	eb18 0606 	adds.w	r6, r8, r6
 80a8f3a:	f844 6c3c 	str.w	r6, [r4, #-60]
        MULADDC_CORE   MULADDC_CORE
 80a8f3e:	f855 7c38 	ldr.w	r7, [r5, #-56]
 80a8f42:	f854 6c38 	ldr.w	r6, [r4, #-56]
 80a8f46:	fba3 8907 	umull	r8, r9, r3, r7
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 80a8f4a:	eb4c 0c0a 	adc.w	ip, ip, sl
        MULADDC_CORE   MULADDC_CORE
 80a8f4e:	eb1c 0c08 	adds.w	ip, ip, r8
 80a8f52:	bf2c      	ite	cs
 80a8f54:	2701      	movcs	r7, #1
 80a8f56:	2700      	movcc	r7, #0
 80a8f58:	eb1c 0606 	adds.w	r6, ip, r6
 80a8f5c:	f844 6c38 	str.w	r6, [r4, #-56]
 80a8f60:	f855 6c34 	ldr.w	r6, [r5, #-52]
 80a8f64:	eb47 0709 	adc.w	r7, r7, r9
 80a8f68:	fba3 8906 	umull	r8, r9, r3, r6
 80a8f6c:	f854 6c34 	ldr.w	r6, [r4, #-52]
 80a8f70:	eb17 0708 	adds.w	r7, r7, r8
 80a8f74:	bf2c      	ite	cs
 80a8f76:	f04f 0c01 	movcs.w	ip, #1
 80a8f7a:	f04f 0c00 	movcc.w	ip, #0
 80a8f7e:	19be      	adds	r6, r7, r6
 80a8f80:	f844 6c34 	str.w	r6, [r4, #-52]
        MULADDC_CORE   MULADDC_CORE
 80a8f84:	f855 7c30 	ldr.w	r7, [r5, #-48]
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 80a8f88:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 80a8f8c:	fba3 8907 	umull	r8, r9, r3, r7
 80a8f90:	f854 6c30 	ldr.w	r6, [r4, #-48]
 80a8f94:	eb1c 0c08 	adds.w	ip, ip, r8
 80a8f98:	bf2c      	ite	cs
 80a8f9a:	2701      	movcs	r7, #1
 80a8f9c:	2700      	movcc	r7, #0
 80a8f9e:	eb1c 0606 	adds.w	r6, ip, r6
 80a8fa2:	f844 6c30 	str.w	r6, [r4, #-48]
 80a8fa6:	f855 6c2c 	ldr.w	r6, [r5, #-44]
 80a8faa:	eb47 0709 	adc.w	r7, r7, r9
 80a8fae:	fba3 8906 	umull	r8, r9, r3, r6
 80a8fb2:	f854 6c2c 	ldr.w	r6, [r4, #-44]
 80a8fb6:	eb17 0708 	adds.w	r7, r7, r8
 80a8fba:	bf2c      	ite	cs
 80a8fbc:	f04f 0c01 	movcs.w	ip, #1
 80a8fc0:	f04f 0c00 	movcc.w	ip, #0
 80a8fc4:	19be      	adds	r6, r7, r6
 80a8fc6:	f844 6c2c 	str.w	r6, [r4, #-44]
        MULADDC_CORE   MULADDC_CORE
 80a8fca:	f855 7c28 	ldr.w	r7, [r5, #-40]
    for( ; i >= 16; i -= 16 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 80a8fce:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 80a8fd2:	fba3 8907 	umull	r8, r9, r3, r7
 80a8fd6:	f854 6c28 	ldr.w	r6, [r4, #-40]
 80a8fda:	eb1c 0c08 	adds.w	ip, ip, r8
 80a8fde:	bf2c      	ite	cs
 80a8fe0:	2701      	movcs	r7, #1
 80a8fe2:	2700      	movcc	r7, #0
 80a8fe4:	eb1c 0606 	adds.w	r6, ip, r6
 80a8fe8:	f844 6c28 	str.w	r6, [r4, #-40]
 80a8fec:	f855 6c24 	ldr.w	r6, [r5, #-36]
 80a8ff0:	eb47 0709 	adc.w	r7, r7, r9
 80a8ff4:	fba3 8906 	umull	r8, r9, r3, r6
 80a8ff8:	f854 6c24 	ldr.w	r6, [r4, #-36]
 80a8ffc:	eb17 0708 	adds.w	r7, r7, r8
 80a9000:	bf2c      	ite	cs
 80a9002:	f04f 0c01 	movcs.w	ip, #1
 80a9006:	f04f 0c00 	movcc.w	ip, #0
 80a900a:	19be      	adds	r6, r7, r6
 80a900c:	f844 6c24 	str.w	r6, [r4, #-36]

        MULADDC_CORE   MULADDC_CORE
 80a9010:	f855 7c20 	ldr.w	r7, [r5, #-32]
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 80a9014:	eb4c 0c09 	adc.w	ip, ip, r9

        MULADDC_CORE   MULADDC_CORE
 80a9018:	fba3 8907 	umull	r8, r9, r3, r7
 80a901c:	f854 6c20 	ldr.w	r6, [r4, #-32]
 80a9020:	eb1c 0c08 	adds.w	ip, ip, r8
 80a9024:	bf2c      	ite	cs
 80a9026:	2701      	movcs	r7, #1
 80a9028:	2700      	movcc	r7, #0
 80a902a:	eb1c 0606 	adds.w	r6, ip, r6
 80a902e:	f844 6c20 	str.w	r6, [r4, #-32]
 80a9032:	f855 6c1c 	ldr.w	r6, [r5, #-28]
 80a9036:	eb47 0709 	adc.w	r7, r7, r9
 80a903a:	fba3 8906 	umull	r8, r9, r3, r6
 80a903e:	f854 6c1c 	ldr.w	r6, [r4, #-28]
 80a9042:	eb17 0708 	adds.w	r7, r7, r8
 80a9046:	bf2c      	ite	cs
 80a9048:	f04f 0c01 	movcs.w	ip, #1
 80a904c:	f04f 0c00 	movcc.w	ip, #0
 80a9050:	19be      	adds	r6, r7, r6
 80a9052:	f844 6c1c 	str.w	r6, [r4, #-28]
        MULADDC_CORE   MULADDC_CORE
 80a9056:	f855 7c18 	ldr.w	r7, [r5, #-24]
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
 80a905a:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 80a905e:	fba3 8907 	umull	r8, r9, r3, r7
 80a9062:	f854 6c18 	ldr.w	r6, [r4, #-24]
 80a9066:	eb1c 0c08 	adds.w	ip, ip, r8
 80a906a:	bf2c      	ite	cs
 80a906c:	2701      	movcs	r7, #1
 80a906e:	2700      	movcc	r7, #0
 80a9070:	eb1c 0606 	adds.w	r6, ip, r6
 80a9074:	f844 6c18 	str.w	r6, [r4, #-24]
 80a9078:	f855 6c14 	ldr.w	r6, [r5, #-20]
 80a907c:	eb47 0709 	adc.w	r7, r7, r9
 80a9080:	fba3 8906 	umull	r8, r9, r3, r6
 80a9084:	f854 6c14 	ldr.w	r6, [r4, #-20]
 80a9088:	eb17 0708 	adds.w	r7, r7, r8
 80a908c:	bf2c      	ite	cs
 80a908e:	f04f 0c01 	movcs.w	ip, #1
 80a9092:	f04f 0c00 	movcc.w	ip, #0
 80a9096:	19be      	adds	r6, r7, r6
 80a9098:	f844 6c14 	str.w	r6, [r4, #-20]
        MULADDC_CORE   MULADDC_CORE
 80a909c:	f855 7c10 	ldr.w	r7, [r5, #-16]
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 80a90a0:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 80a90a4:	fba3 8907 	umull	r8, r9, r3, r7
 80a90a8:	f854 6c10 	ldr.w	r6, [r4, #-16]
 80a90ac:	eb1c 0c08 	adds.w	ip, ip, r8
 80a90b0:	bf2c      	ite	cs
 80a90b2:	2701      	movcs	r7, #1
 80a90b4:	2700      	movcc	r7, #0
 80a90b6:	eb1c 0606 	adds.w	r6, ip, r6
 80a90ba:	f844 6c10 	str.w	r6, [r4, #-16]
 80a90be:	f855 6c0c 	ldr.w	r6, [r5, #-12]
 80a90c2:	eb47 0709 	adc.w	r7, r7, r9
 80a90c6:	fba3 8906 	umull	r8, r9, r3, r6
 80a90ca:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 80a90ce:	eb17 0708 	adds.w	r7, r7, r8
 80a90d2:	bf2c      	ite	cs
 80a90d4:	f04f 0c01 	movcs.w	ip, #1
 80a90d8:	f04f 0c00 	movcc.w	ip, #0
 80a90dc:	19be      	adds	r6, r7, r6
 80a90de:	f844 6c0c 	str.w	r6, [r4, #-12]
        MULADDC_CORE   MULADDC_CORE
 80a90e2:	f855 7c08 	ldr.w	r7, [r5, #-8]
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 80a90e6:	eb4c 0c09 	adc.w	ip, ip, r9
        MULADDC_CORE   MULADDC_CORE
 80a90ea:	fba3 8907 	umull	r8, r9, r3, r7
 80a90ee:	f854 6c08 	ldr.w	r6, [r4, #-8]
 80a90f2:	eb1c 0c08 	adds.w	ip, ip, r8
 80a90f6:	bf2c      	ite	cs
 80a90f8:	2701      	movcs	r7, #1
 80a90fa:	2700      	movcc	r7, #0
 80a90fc:	eb1c 0606 	adds.w	r6, ip, r6
 80a9100:	f844 6c08 	str.w	r6, [r4, #-8]
 80a9104:	f855 6c04 	ldr.w	r6, [r5, #-4]
 80a9108:	eb47 0709 	adc.w	r7, r7, r9
 80a910c:	fba3 8906 	umull	r8, r9, r3, r6
 80a9110:	f854 6c04 	ldr.w	r6, [r4, #-4]
 80a9114:	eb17 0708 	adds.w	r7, r7, r8
 80a9118:	bf2c      	ite	cs
 80a911a:	f04f 0c01 	movcs.w	ip, #1
 80a911e:	f04f 0c00 	movcc.w	ip, #0
 80a9122:	19be      	adds	r6, r7, r6
 80a9124:	eb4c 0c09 	adc.w	ip, ip, r9
 80a9128:	f844 6c04 	str.w	r6, [r4, #-4]
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 80a912c:	e6d9      	b.n	80a8ee2 <_ZL11mpi_mul_hlpjPmS_m+0xe>
 80a912e:	ea4f 1e10 	mov.w	lr, r0, lsr #4
 80a9132:	eba0 100e 	sub.w	r0, r0, lr, lsl #4
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
 80a9136:	2807      	cmp	r0, #7
 80a9138:	ea4f 1e8e 	mov.w	lr, lr, lsl #6
 80a913c:	eb01 050e 	add.w	r5, r1, lr
 80a9140:	eb02 040e 	add.w	r4, r2, lr
 80a9144:	d966      	bls.n	80a9214 <_ZL11mpi_mul_hlpjPmS_m+0x340>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 80a9146:	f851 600e 	ldr.w	r6, [r1, lr]
 80a914a:	fba6 7803 	umull	r7, r8, r6, r3
 80a914e:	f852 600e 	ldr.w	r6, [r2, lr]
 80a9152:	eb1c 0c07 	adds.w	ip, ip, r7
 80a9156:	bf2c      	ite	cs
 80a9158:	2101      	movcs	r1, #1
 80a915a:	2100      	movcc	r1, #0
 80a915c:	eb1c 0606 	adds.w	r6, ip, r6
 80a9160:	f842 600e 	str.w	r6, [r2, lr]
 80a9164:	686e      	ldr	r6, [r5, #4]
 80a9166:	eb41 0108 	adc.w	r1, r1, r8
 80a916a:	fba3 7806 	umull	r7, r8, r3, r6
 80a916e:	6866      	ldr	r6, [r4, #4]
 80a9170:	19ca      	adds	r2, r1, r7
 80a9172:	bf2c      	ite	cs
 80a9174:	2101      	movcs	r1, #1
 80a9176:	2100      	movcc	r1, #0
 80a9178:	1992      	adds	r2, r2, r6
 80a917a:	6062      	str	r2, [r4, #4]
        MULADDC_CORE   MULADDC_CORE
 80a917c:	68ae      	ldr	r6, [r5, #8]
    }

    for( ; i >= 8; i -= 8 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
 80a917e:	eb41 0108 	adc.w	r1, r1, r8
        MULADDC_CORE   MULADDC_CORE
 80a9182:	fba3 7806 	umull	r7, r8, r3, r6
 80a9186:	68a6      	ldr	r6, [r4, #8]
 80a9188:	19c9      	adds	r1, r1, r7
 80a918a:	bf2c      	ite	cs
 80a918c:	2201      	movcs	r2, #1
 80a918e:	2200      	movcc	r2, #0
 80a9190:	1989      	adds	r1, r1, r6
 80a9192:	60a1      	str	r1, [r4, #8]
 80a9194:	68ee      	ldr	r6, [r5, #12]
 80a9196:	eb42 0208 	adc.w	r2, r2, r8
 80a919a:	fba3 7806 	umull	r7, r8, r3, r6
 80a919e:	68e6      	ldr	r6, [r4, #12]
 80a91a0:	19d2      	adds	r2, r2, r7
 80a91a2:	bf2c      	ite	cs
 80a91a4:	2101      	movcs	r1, #1
 80a91a6:	2100      	movcc	r1, #0
 80a91a8:	1992      	adds	r2, r2, r6
 80a91aa:	60e2      	str	r2, [r4, #12]

        MULADDC_CORE   MULADDC_CORE
 80a91ac:	692e      	ldr	r6, [r5, #16]

    for( ; i >= 8; i -= 8 )
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
 80a91ae:	eb41 0108 	adc.w	r1, r1, r8

        MULADDC_CORE   MULADDC_CORE
 80a91b2:	fba3 7806 	umull	r7, r8, r3, r6
 80a91b6:	6926      	ldr	r6, [r4, #16]
 80a91b8:	19c9      	adds	r1, r1, r7
 80a91ba:	bf2c      	ite	cs
 80a91bc:	2201      	movcs	r2, #1
 80a91be:	2200      	movcc	r2, #0
 80a91c0:	1989      	adds	r1, r1, r6
 80a91c2:	6121      	str	r1, [r4, #16]
 80a91c4:	696e      	ldr	r6, [r5, #20]
 80a91c6:	eb42 0208 	adc.w	r2, r2, r8
 80a91ca:	fba3 7806 	umull	r7, r8, r3, r6
 80a91ce:	6966      	ldr	r6, [r4, #20]
 80a91d0:	19d2      	adds	r2, r2, r7
 80a91d2:	bf2c      	ite	cs
 80a91d4:	2101      	movcs	r1, #1
 80a91d6:	2100      	movcc	r1, #0
 80a91d8:	1992      	adds	r2, r2, r6
 80a91da:	6162      	str	r2, [r4, #20]
        MULADDC_CORE   MULADDC_CORE
 80a91dc:	69ae      	ldr	r6, [r5, #24]
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
 80a91de:	eb41 0108 	adc.w	r1, r1, r8
        MULADDC_CORE   MULADDC_CORE
 80a91e2:	fba3 7806 	umull	r7, r8, r3, r6
 80a91e6:	69a6      	ldr	r6, [r4, #24]
 80a91e8:	19c9      	adds	r1, r1, r7
 80a91ea:	bf2c      	ite	cs
 80a91ec:	2201      	movcs	r2, #1
 80a91ee:	2200      	movcc	r2, #0
 80a91f0:	1989      	adds	r1, r1, r6
 80a91f2:	61a1      	str	r1, [r4, #24]
 80a91f4:	69ee      	ldr	r6, [r5, #28]
 80a91f6:	69e1      	ldr	r1, [r4, #28]
 80a91f8:	fba3 6706 	umull	r6, r7, r3, r6
 80a91fc:	eb42 0208 	adc.w	r2, r2, r8
 80a9200:	1992      	adds	r2, r2, r6
 80a9202:	bf2c      	ite	cs
 80a9204:	f04f 0c01 	movcs.w	ip, #1
 80a9208:	f04f 0c00 	movcc.w	ip, #0
 80a920c:	1852      	adds	r2, r2, r1
 80a920e:	eb4c 0c07 	adc.w	ip, ip, r7
 80a9212:	61e2      	str	r2, [r4, #28]
 80a9214:	08c2      	lsrs	r2, r0, #3
 80a9216:	0151      	lsls	r1, r2, #5
 80a9218:	440c      	add	r4, r1
 80a921a:	440d      	add	r5, r1
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
    mbedtls_mpi_uint c = 0, t = 0;
 80a921c:	4621      	mov	r1, r4
 80a921e:	eba0 00c2 	sub.w	r0, r0, r2, lsl #3
 80a9222:	0080      	lsls	r0, r0, #2
 80a9224:	eb05 0e00 	add.w	lr, r5, r0
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 80a9228:	4575      	cmp	r5, lr
 80a922a:	d011      	beq.n	80a9250 <_ZL11mpi_mul_hlpjPmS_m+0x37c>
    {
        MULADDC_INIT
        MULADDC_CORE
 80a922c:	f855 6b04 	ldr.w	r6, [r5], #4
 80a9230:	fba6 7803 	umull	r7, r8, r6, r3
 80a9234:	680e      	ldr	r6, [r1, #0]
 80a9236:	eb1c 0207 	adds.w	r2, ip, r7
 80a923a:	bf2c      	ite	cs
 80a923c:	f04f 0c01 	movcs.w	ip, #1
 80a9240:	f04f 0c00 	movcc.w	ip, #0
 80a9244:	1992      	adds	r2, r2, r6
 80a9246:	eb4c 0c08 	adc.w	ip, ip, r8
 80a924a:	f841 2b04 	str.w	r2, [r1], #4
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 80a924e:	e7eb      	b.n	80a9228 <_ZL11mpi_mul_hlpjPmS_m+0x354>
 80a9250:	4404      	add	r4, r0
#endif /* MULADDC_HUIT */

    t++;

    do {
        *d += c; c = ( *d < c ); d++;
 80a9252:	6823      	ldr	r3, [r4, #0]
 80a9254:	4463      	add	r3, ip
 80a9256:	459c      	cmp	ip, r3
 80a9258:	f844 3b04 	str.w	r3, [r4], #4
 80a925c:	bf8c      	ite	hi
 80a925e:	f04f 0c01 	movhi.w	ip, #1
 80a9262:	f04f 0c00 	movls.w	ip, #0
    }
    while( c != 0 );
 80a9266:	d8f4      	bhi.n	80a9252 <_ZL11mpi_mul_hlpjPmS_m+0x37e>
}
 80a9268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a926c <mbedtls_mpi_init>:
/*
 * Initialize one MPI
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
 80a926c:	b120      	cbz	r0, 80a9278 <mbedtls_mpi_init+0xc>
        return;

    X->s = 1;
 80a926e:	2301      	movs	r3, #1
 80a9270:	6003      	str	r3, [r0, #0]
    X->n = 0;
 80a9272:	2300      	movs	r3, #0
 80a9274:	6043      	str	r3, [r0, #4]
    X->p = NULL;
 80a9276:	6083      	str	r3, [r0, #8]
 80a9278:	4770      	bx	lr

080a927a <mbedtls_mpi_free>:

/*
 * Unallocate one MPI
 */
void mbedtls_mpi_free( mbedtls_mpi *X )
{
 80a927a:	b510      	push	{r4, lr}
    if( X == NULL )
 80a927c:	4604      	mov	r4, r0
 80a927e:	b188      	cbz	r0, 80a92a4 <mbedtls_mpi_free+0x2a>
        return;

    if( X->p != NULL )
 80a9280:	6883      	ldr	r3, [r0, #8]
 80a9282:	b153      	cbz	r3, 80a929a <mbedtls_mpi_free+0x20>
    {
        mbedtls_mpi_zeroize( X->p, X->n );
 80a9284:	6842      	ldr	r2, [r0, #4]
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n ) {
    volatile mbedtls_mpi_uint *p = (mbedtls_mpi_uint *)v; while( n-- ) *p++ = 0;
 80a9286:	2100      	movs	r1, #0
 80a9288:	f112 32ff 	adds.w	r2, r2, #4294967295
 80a928c:	d302      	bcc.n	80a9294 <mbedtls_mpi_free+0x1a>
 80a928e:	6019      	str	r1, [r3, #0]
 80a9290:	3304      	adds	r3, #4
 80a9292:	e7f9      	b.n	80a9288 <mbedtls_mpi_free+0xe>
        return;

    if( X->p != NULL )
    {
        mbedtls_mpi_zeroize( X->p, X->n );
        mbedtls_free( X->p );
 80a9294:	68a0      	ldr	r0, [r4, #8]
 80a9296:	f004 fe39 	bl	80adf0c <free>
    }

    X->s = 1;
 80a929a:	2301      	movs	r3, #1
 80a929c:	6023      	str	r3, [r4, #0]
    X->n = 0;
 80a929e:	2300      	movs	r3, #0
 80a92a0:	6063      	str	r3, [r4, #4]
    X->p = NULL;
 80a92a2:	60a3      	str	r3, [r4, #8]
 80a92a4:	bd10      	pop	{r4, pc}

080a92a6 <mbedtls_mpi_grow>:
 */
int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )
{
    mbedtls_mpi_uint *p;

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 80a92a6:	f242 7310 	movw	r3, #10000	; 0x2710
 80a92aa:	4299      	cmp	r1, r3

/*
 * Enlarge to the specified number of limbs
 */
int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )
{
 80a92ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a92b0:	4604      	mov	r4, r0
 80a92b2:	460f      	mov	r7, r1
    mbedtls_mpi_uint *p;

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 80a92b4:	d903      	bls.n	80a92be <mbedtls_mpi_grow+0x18>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 80a92b6:	f06f 000f 	mvn.w	r0, #15
 80a92ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    if( X->n < nblimbs )
 80a92be:	6846      	ldr	r6, [r0, #4]
 80a92c0:	42b1      	cmp	r1, r6
 80a92c2:	d919      	bls.n	80a92f8 <mbedtls_mpi_grow+0x52>
    {
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 80a92c4:	2104      	movs	r1, #4
 80a92c6:	4638      	mov	r0, r7
 80a92c8:	f005 feee 	bl	80af0a8 <calloc>
 80a92cc:	4680      	mov	r8, r0
 80a92ce:	2800      	cmp	r0, #0
 80a92d0:	d0f1      	beq.n	80a92b6 <mbedtls_mpi_grow+0x10>
            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );

        if( X->p != NULL )
 80a92d2:	68a5      	ldr	r5, [r4, #8]
 80a92d4:	b16d      	cbz	r5, 80a92f2 <mbedtls_mpi_grow+0x4c>
        {
            memcpy( p, X->p, X->n * ciL );
 80a92d6:	00b2      	lsls	r2, r6, #2
 80a92d8:	4629      	mov	r1, r5
 80a92da:	f005 ff0a 	bl	80af0f2 <memcpy>
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n ) {
    volatile mbedtls_mpi_uint *p = (mbedtls_mpi_uint *)v; while( n-- ) *p++ = 0;
 80a92de:	2300      	movs	r3, #0
 80a92e0:	f116 36ff 	adds.w	r6, r6, #4294967295
 80a92e4:	d302      	bcc.n	80a92ec <mbedtls_mpi_grow+0x46>
 80a92e6:	602b      	str	r3, [r5, #0]
 80a92e8:	3504      	adds	r5, #4
 80a92ea:	e7f9      	b.n	80a92e0 <mbedtls_mpi_grow+0x3a>

        if( X->p != NULL )
        {
            memcpy( p, X->p, X->n * ciL );
            mbedtls_mpi_zeroize( X->p, X->n );
            mbedtls_free( X->p );
 80a92ec:	68a0      	ldr	r0, [r4, #8]
 80a92ee:	f004 fe0d 	bl	80adf0c <free>
        }

        X->n = nblimbs;
 80a92f2:	6067      	str	r7, [r4, #4]
        X->p = p;
 80a92f4:	f8c4 8008 	str.w	r8, [r4, #8]
    }

    return( 0 );
 80a92f8:	2000      	movs	r0, #0
}
 80a92fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a92fe <mbedtls_mpi_copy>:
int mbedtls_mpi_copy( mbedtls_mpi *X, const mbedtls_mpi *Y )
{
    int ret;
    size_t i;

    if( X == Y )
 80a92fe:	4288      	cmp	r0, r1

/*
 * Copy the contents of Y into X
 */
int mbedtls_mpi_copy( mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 80a9300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a9302:	4606      	mov	r6, r0
 80a9304:	460f      	mov	r7, r1
    int ret;
    size_t i;

    if( X == Y )
 80a9306:	d020      	beq.n	80a934a <mbedtls_mpi_copy+0x4c>
        return( 0 );

    if( Y->p == NULL )
 80a9308:	688c      	ldr	r4, [r1, #8]
 80a930a:	b914      	cbnz	r4, 80a9312 <mbedtls_mpi_copy+0x14>
    {
        mbedtls_mpi_free( X );
 80a930c:	f7ff ffb5 	bl	80a927a <mbedtls_mpi_free>
 80a9310:	e01d      	b.n	80a934e <mbedtls_mpi_copy+0x50>
        return( 0 );
    }

    for( i = Y->n - 1; i > 0; i-- )
 80a9312:	6849      	ldr	r1, [r1, #4]
 80a9314:	3901      	subs	r1, #1
 80a9316:	b119      	cbz	r1, 80a9320 <mbedtls_mpi_copy+0x22>
        if( Y->p[i] != 0 )
 80a9318:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
 80a931c:	2b00      	cmp	r3, #0
 80a931e:	d0f9      	beq.n	80a9314 <mbedtls_mpi_copy+0x16>
            break;
    i++;

    X->s = Y->s;
 80a9320:	683b      	ldr	r3, [r7, #0]
    }

    for( i = Y->n - 1; i > 0; i-- )
        if( Y->p[i] != 0 )
            break;
    i++;
 80a9322:	1c4d      	adds	r5, r1, #1

    X->s = Y->s;
 80a9324:	6033      	str	r3, [r6, #0]

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
 80a9326:	4629      	mov	r1, r5
 80a9328:	4630      	mov	r0, r6
 80a932a:	f7ff ffbc 	bl	80a92a6 <mbedtls_mpi_grow>
 80a932e:	4604      	mov	r4, r0
 80a9330:	b968      	cbnz	r0, 80a934e <mbedtls_mpi_copy+0x50>

    memset( X->p, 0, X->n * ciL );
 80a9332:	6872      	ldr	r2, [r6, #4]
 80a9334:	4601      	mov	r1, r0
 80a9336:	0092      	lsls	r2, r2, #2
 80a9338:	68b0      	ldr	r0, [r6, #8]
 80a933a:	f005 ff00 	bl	80af13e <memset>
    memcpy( X->p, Y->p, i * ciL );
 80a933e:	00aa      	lsls	r2, r5, #2
 80a9340:	68b9      	ldr	r1, [r7, #8]
 80a9342:	68b0      	ldr	r0, [r6, #8]
 80a9344:	f005 fed5 	bl	80af0f2 <memcpy>
 80a9348:	e001      	b.n	80a934e <mbedtls_mpi_copy+0x50>
{
    int ret;
    size_t i;

    if( X == Y )
        return( 0 );
 80a934a:	2000      	movs	r0, #0
 80a934c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a934e:	4620      	mov	r0, r4
    memcpy( X->p, Y->p, i * ciL );

cleanup:

    return( ret );
}
 80a9350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a9352 <mbedtls_mpi_lset>:

/*
 * Set value from integer
 */
int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 80a9352:	b570      	push	{r4, r5, r6, lr}
 80a9354:	460e      	mov	r6, r1
    int ret;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 80a9356:	2101      	movs	r1, #1

/*
 * Set value from integer
 */
int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 80a9358:	4604      	mov	r4, r0
    int ret;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 80a935a:	f7ff ffa4 	bl	80a92a6 <mbedtls_mpi_grow>
 80a935e:	4605      	mov	r5, r0
 80a9360:	b988      	cbnz	r0, 80a9386 <mbedtls_mpi_lset+0x34>
    memset( X->p, 0, X->n * ciL );
 80a9362:	6862      	ldr	r2, [r4, #4]
 80a9364:	4601      	mov	r1, r0
 80a9366:	0092      	lsls	r2, r2, #2
 80a9368:	68a0      	ldr	r0, [r4, #8]
 80a936a:	f005 fee8 	bl	80af13e <memset>

    X->p[0] = ( z < 0 ) ? -z : z;
 80a936e:	68a3      	ldr	r3, [r4, #8]
 80a9370:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    X->s    = ( z < 0 ) ? -1 : 1;
 80a9374:	2e00      	cmp	r6, #0
    int ret;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    memset( X->p, 0, X->n * ciL );

    X->p[0] = ( z < 0 ) ? -z : z;
 80a9376:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
 80a937a:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 80a937c:	bfb4      	ite	lt
 80a937e:	f04f 33ff 	movlt.w	r3, #4294967295
 80a9382:	2301      	movge	r3, #1
 80a9384:	6023      	str	r3, [r4, #0]

cleanup:

    return( ret );
}
 80a9386:	4628      	mov	r0, r5
 80a9388:	bd70      	pop	{r4, r5, r6, pc}

080a938a <mbedtls_mpi_get_bit>:
/*
 * Get a specific bit
 */
int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )
{
    if( X->n * biL <= pos )
 80a938a:	6843      	ldr	r3, [r0, #4]
 80a938c:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
        return( 0 );

    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
 80a9390:	bf3f      	itttt	cc
 80a9392:	6883      	ldrcc	r3, [r0, #8]
 80a9394:	094a      	lsrcc	r2, r1, #5
 80a9396:	f853 3022 	ldrcc.w	r3, [r3, r2, lsl #2]
 80a939a:	f001 001f 	andcc.w	r0, r1, #31
 80a939e:	bf3a      	itte	cc
 80a93a0:	fa23 f000 	lsrcc.w	r0, r3, r0
 80a93a4:	f000 0001 	andcc.w	r0, r0, #1
 * Get a specific bit
 */
int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )
{
    if( X->n * biL <= pos )
        return( 0 );
 80a93a8:	2000      	movcs	r0, #0

    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
}
 80a93aa:	4770      	bx	lr

080a93ac <mbedtls_mpi_lsb>:
/*
 * Return the number of less significant zero-bits
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
    size_t i, j, count = 0;
 80a93ac:	2300      	movs	r3, #0

    for( i = 0; i < X->n; i++ )
 80a93ae:	461a      	mov	r2, r3

/*
 * Return the number of less significant zero-bits
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
 80a93b0:	b570      	push	{r4, r5, r6, lr}
    size_t i, j, count = 0;

    for( i = 0; i < X->n; i++ )
 80a93b2:	6844      	ldr	r4, [r0, #4]
 80a93b4:	42a2      	cmp	r2, r4
 80a93b6:	d00e      	beq.n	80a93d6 <mbedtls_mpi_lsb+0x2a>
        for( j = 0; j < biL; j++, count++ )
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 80a93b8:	6881      	ldr	r1, [r0, #8]
 80a93ba:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
 80a93be:	2100      	movs	r1, #0
 80a93c0:	fa25 f601 	lsr.w	r6, r5, r1
 80a93c4:	07f6      	lsls	r6, r6, #31
 80a93c6:	d408      	bmi.n	80a93da <mbedtls_mpi_lsb+0x2e>
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
    size_t i, j, count = 0;

    for( i = 0; i < X->n; i++ )
        for( j = 0; j < biL; j++, count++ )
 80a93c8:	3101      	adds	r1, #1
 80a93ca:	2920      	cmp	r1, #32
 80a93cc:	f103 0301 	add.w	r3, r3, #1
 80a93d0:	d1f6      	bne.n	80a93c0 <mbedtls_mpi_lsb+0x14>
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
    size_t i, j, count = 0;

    for( i = 0; i < X->n; i++ )
 80a93d2:	3201      	adds	r2, #1
 80a93d4:	e7ee      	b.n	80a93b4 <mbedtls_mpi_lsb+0x8>
        for( j = 0; j < biL; j++, count++ )
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
                return( count );

    return( 0 );
 80a93d6:	2000      	movs	r0, #0
 80a93d8:	bd70      	pop	{r4, r5, r6, pc}
 80a93da:	4618      	mov	r0, r3
}
 80a93dc:	bd70      	pop	{r4, r5, r6, pc}

080a93de <mbedtls_mpi_bitlen>:

/*
 * Return the number of bits
 */
size_t mbedtls_mpi_bitlen( const mbedtls_mpi *X )
{
 80a93de:	b510      	push	{r4, lr}
    size_t i, j;

    if( X->n == 0 )
 80a93e0:	6843      	ldr	r3, [r0, #4]
 80a93e2:	b1d3      	cbz	r3, 80a941a <mbedtls_mpi_bitlen+0x3c>
 80a93e4:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 80a93e8:	3a01      	subs	r2, #1
        return( 0 );

    for( i = X->n - 1; i > 0; i-- )
 80a93ea:	1e59      	subs	r1, r3, #1
 80a93ec:	0092      	lsls	r2, r2, #2
 80a93ee:	6883      	ldr	r3, [r0, #8]
 80a93f0:	b121      	cbz	r1, 80a93fc <mbedtls_mpi_bitlen+0x1e>
        if( X->p[i] != 0 )
 80a93f2:	589c      	ldr	r4, [r3, r2]
 80a93f4:	3a04      	subs	r2, #4
 80a93f6:	b90c      	cbnz	r4, 80a93fc <mbedtls_mpi_bitlen+0x1e>
    size_t i, j;

    if( X->n == 0 )
        return( 0 );

    for( i = X->n - 1; i > 0; i-- )
 80a93f8:	3901      	subs	r1, #1
 80a93fa:	e7f8      	b.n	80a93ee <mbedtls_mpi_bitlen+0x10>
        if( X->p[i] != 0 )
            break;

    j = biL - mbedtls_clz( X->p[i] );
 80a93fc:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 * Count leading zero bits in a given integer
 */
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
 80a9400:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000

    for( j = 0; j < biL; j++ )
 80a9404:	2300      	movs	r3, #0
    {
        if( x & mask ) break;
 80a9406:	4210      	tst	r0, r2
 80a9408:	d104      	bne.n	80a9414 <mbedtls_mpi_bitlen+0x36>
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);

    for( j = 0; j < biL; j++ )
 80a940a:	3301      	adds	r3, #1
 80a940c:	2b20      	cmp	r3, #32
    {
        if( x & mask ) break;

        mask >>= 1;
 80a940e:	ea4f 0252 	mov.w	r2, r2, lsr #1
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);

    for( j = 0; j < biL; j++ )
 80a9412:	d1f8      	bne.n	80a9406 <mbedtls_mpi_bitlen+0x28>
        if( X->p[i] != 0 )
            break;

    j = biL - mbedtls_clz( X->p[i] );

    return( ( i * biL ) + j );
 80a9414:	ebc3 1341 	rsb	r3, r3, r1, lsl #5
 80a9418:	3320      	adds	r3, #32
}
 80a941a:	4618      	mov	r0, r3
 80a941c:	bd10      	pop	{r4, pc}

080a941e <mbedtls_mpi_size>:

/*
 * Return the total size in bytes
 */
size_t mbedtls_mpi_size( const mbedtls_mpi *X )
{
 80a941e:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
 80a9420:	f7ff ffdd 	bl	80a93de <mbedtls_mpi_bitlen>
 80a9424:	3007      	adds	r0, #7
}
 80a9426:	08c0      	lsrs	r0, r0, #3
 80a9428:	bd08      	pop	{r3, pc}

080a942a <mbedtls_mpi_read_binary>:

/*
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
 80a942a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a942c:	460d      	mov	r5, r1
    int ret;
    size_t i, j;
    size_t const limbs = CHARS_TO_LIMBS( buflen );
 80a942e:	f012 0103 	ands.w	r1, r2, #3
 80a9432:	bf18      	it	ne
 80a9434:	2101      	movne	r1, #1

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 80a9436:	6843      	ldr	r3, [r0, #4]
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
    int ret;
    size_t i, j;
    size_t const limbs = CHARS_TO_LIMBS( buflen );
 80a9438:	eb01 0492 	add.w	r4, r1, r2, lsr #2

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 80a943c:	429c      	cmp	r4, r3

/*
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
 80a943e:	4606      	mov	r6, r0
 80a9440:	4617      	mov	r7, r2
    int ret;
    size_t i, j;
    size_t const limbs = CHARS_TO_LIMBS( buflen );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 80a9442:	d105      	bne.n	80a9450 <mbedtls_mpi_read_binary+0x26>
        mbedtls_mpi_free( X );
        mbedtls_mpi_init( X );
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 80a9444:	2100      	movs	r1, #0
 80a9446:	4630      	mov	r0, r6
 80a9448:	f7ff ff83 	bl	80a9352 <mbedtls_mpi_lset>
 80a944c:	b160      	cbz	r0, 80a9468 <mbedtls_mpi_read_binary+0x3e>
 80a944e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    size_t const limbs = CHARS_TO_LIMBS( buflen );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
    {
        mbedtls_mpi_free( X );
 80a9450:	f7ff ff13 	bl	80a927a <mbedtls_mpi_free>
        mbedtls_mpi_init( X );
 80a9454:	4630      	mov	r0, r6
 80a9456:	f7ff ff09 	bl	80a926c <mbedtls_mpi_init>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 80a945a:	4621      	mov	r1, r4
 80a945c:	4630      	mov	r0, r6
 80a945e:	f7ff ff22 	bl	80a92a6 <mbedtls_mpi_grow>
 80a9462:	2800      	cmp	r0, #0
 80a9464:	d0ee      	beq.n	80a9444 <mbedtls_mpi_read_binary+0x1a>
 80a9466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 80a9468:	4603      	mov	r3, r0
 80a946a:	19e9      	adds	r1, r5, r7

    for( i = buflen, j = 0; i > 0; i--, j++ )
 80a946c:	42bb      	cmp	r3, r7
 80a946e:	d010      	beq.n	80a9492 <mbedtls_mpi_read_binary+0x68>
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);
 80a9470:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
 80a9474:	68b2      	ldr	r2, [r6, #8]
 80a9476:	00dc      	lsls	r4, r3, #3
 80a9478:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 80a947c:	f004 0418 	and.w	r4, r4, #24
 80a9480:	fa05 f404 	lsl.w	r4, r5, r4
 80a9484:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    for( i = buflen, j = 0; i > 0; i--, j++ )
 80a9488:	3301      	adds	r3, #1
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);
 80a948a:	432c      	orrs	r4, r5
 80a948c:	f842 402e 	str.w	r4, [r2, lr, lsl #2]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    for( i = buflen, j = 0; i > 0; i--, j++ )
 80a9490:	e7ec      	b.n	80a946c <mbedtls_mpi_read_binary+0x42>
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);

cleanup:

    return( ret );
}
 80a9492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a9494 <mbedtls_mpi_write_binary>:

/*
 * Export X into unsigned binary data, big endian
 */
int mbedtls_mpi_write_binary( const mbedtls_mpi *X, unsigned char *buf, size_t buflen )
{
 80a9494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a9496:	4614      	mov	r4, r2
 80a9498:	4605      	mov	r5, r0
 80a949a:	460f      	mov	r7, r1
    size_t i, j, n;

    n = mbedtls_mpi_size( X );
 80a949c:	f7ff ffbf 	bl	80a941e <mbedtls_mpi_size>

    if( buflen < n )
 80a94a0:	42a0      	cmp	r0, r4
 */
int mbedtls_mpi_write_binary( const mbedtls_mpi *X, unsigned char *buf, size_t buflen )
{
    size_t i, j, n;

    n = mbedtls_mpi_size( X );
 80a94a2:	4606      	mov	r6, r0

    if( buflen < n )
 80a94a4:	d814      	bhi.n	80a94d0 <mbedtls_mpi_write_binary+0x3c>
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );

    memset( buf, 0, buflen );
 80a94a6:	4622      	mov	r2, r4
 80a94a8:	2100      	movs	r1, #0
 80a94aa:	4638      	mov	r0, r7
 80a94ac:	f005 fe47 	bl	80af13e <memset>
 80a94b0:	443c      	add	r4, r7

    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 80a94b2:	2300      	movs	r3, #0
 80a94b4:	42b3      	cmp	r3, r6
 80a94b6:	d00e      	beq.n	80a94d6 <mbedtls_mpi_write_binary+0x42>
        buf[i] = (unsigned char)( X->p[j / ciL] >> ((j % ciL) << 3) );
 80a94b8:	68a8      	ldr	r0, [r5, #8]
 80a94ba:	00da      	lsls	r2, r3, #3
 80a94bc:	089f      	lsrs	r7, r3, #2
 80a94be:	f002 0118 	and.w	r1, r2, #24
 80a94c2:	f850 2027 	ldr.w	r2, [r0, r7, lsl #2]
    if( buflen < n )
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );

    memset( buf, 0, buflen );

    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 80a94c6:	3301      	adds	r3, #1
        buf[i] = (unsigned char)( X->p[j / ciL] >> ((j % ciL) << 3) );
 80a94c8:	40ca      	lsrs	r2, r1
 80a94ca:	f804 2d01 	strb.w	r2, [r4, #-1]!
    if( buflen < n )
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );

    memset( buf, 0, buflen );

    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 80a94ce:	e7f1      	b.n	80a94b4 <mbedtls_mpi_write_binary+0x20>
    size_t i, j, n;

    n = mbedtls_mpi_size( X );

    if( buflen < n )
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
 80a94d0:	f06f 0007 	mvn.w	r0, #7
 80a94d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    memset( buf, 0, buflen );

    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
        buf[i] = (unsigned char)( X->p[j / ciL] >> ((j % ciL) << 3) );

    return( 0 );
 80a94d6:	2000      	movs	r0, #0
}
 80a94d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a94da <mbedtls_mpi_shift_l>:

/*
 * Left-shift: X <<= count
 */
int mbedtls_mpi_shift_l( mbedtls_mpi *X, size_t count )
{
 80a94da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a94dc:	4604      	mov	r4, r0
 80a94de:	460d      	mov	r5, r1
    int ret;
    size_t i, v0, t1;
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count / (biL    );
 80a94e0:	094e      	lsrs	r6, r1, #5
    t1 = count & (biL - 1);
 80a94e2:	f001 071f 	and.w	r7, r1, #31

    i = mbedtls_mpi_bitlen( X ) + count;
 80a94e6:	f7ff ff7a 	bl	80a93de <mbedtls_mpi_bitlen>

    if( X->n * biL < i )
 80a94ea:	6863      	ldr	r3, [r4, #4]
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count / (biL    );
    t1 = count & (biL - 1);

    i = mbedtls_mpi_bitlen( X ) + count;
 80a94ec:	4428      	add	r0, r5

    if( X->n * biL < i )
 80a94ee:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
 80a94f2:	d809      	bhi.n	80a9508 <mbedtls_mpi_shift_l+0x2e>
    ret = 0;

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 80a94f4:	b346      	cbz	r6, 80a9548 <mbedtls_mpi_shift_l+0x6e>
    {
        for( i = X->n; i > v0; i-- )
 80a94f6:	6863      	ldr	r3, [r4, #4]
 80a94f8:	f06f 0103 	mvn.w	r1, #3
 80a94fc:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 80a9500:	3a01      	subs	r2, #1
 80a9502:	0092      	lsls	r2, r2, #2
 80a9504:	4371      	muls	r1, r6
 80a9506:	e00b      	b.n	80a9520 <mbedtls_mpi_shift_l+0x46>
    t1 = count & (biL - 1);

    i = mbedtls_mpi_bitlen( X ) + count;

    if( X->n * biL < i )
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 80a9508:	f010 011f 	ands.w	r1, r0, #31
 80a950c:	bf18      	it	ne
 80a950e:	2101      	movne	r1, #1
 80a9510:	eb01 1150 	add.w	r1, r1, r0, lsr #5
 80a9514:	4620      	mov	r0, r4
 80a9516:	f7ff fec6 	bl	80a92a6 <mbedtls_mpi_grow>
 80a951a:	2800      	cmp	r0, #0
 80a951c:	d0ea      	beq.n	80a94f4 <mbedtls_mpi_shift_l+0x1a>
 80a951e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
 80a9520:	42b3      	cmp	r3, r6
 80a9522:	d906      	bls.n	80a9532 <mbedtls_mpi_shift_l+0x58>
            X->p[i - 1] = X->p[i - v0 - 1];
 80a9524:	68a0      	ldr	r0, [r4, #8]
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
 80a9526:	3b01      	subs	r3, #1
            X->p[i - 1] = X->p[i - v0 - 1];
 80a9528:	1885      	adds	r5, r0, r2
 80a952a:	586d      	ldr	r5, [r5, r1]
 80a952c:	5085      	str	r5, [r0, r2]
 80a952e:	3a04      	subs	r2, #4
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
 80a9530:	e7f6      	b.n	80a9520 <mbedtls_mpi_shift_l+0x46>
 80a9532:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80a9536:	3b01      	subs	r3, #1
 80a9538:	009b      	lsls	r3, r3, #2
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
            X->p[i - 1] = 0;
 80a953a:	2100      	movs	r1, #0
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
 80a953c:	1d1a      	adds	r2, r3, #4
 80a953e:	d003      	beq.n	80a9548 <mbedtls_mpi_shift_l+0x6e>
            X->p[i - 1] = 0;
 80a9540:	68a2      	ldr	r2, [r4, #8]
 80a9542:	50d1      	str	r1, [r2, r3]
 80a9544:	3b04      	subs	r3, #4
    if( v0 > 0 )
    {
        for( i = X->n; i > v0; i-- )
            X->p[i - 1] = X->p[i - v0 - 1];

        for( ; i > 0; i-- )
 80a9546:	e7f9      	b.n	80a953c <mbedtls_mpi_shift_l+0x62>
    }

    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
 80a9548:	b90f      	cbnz	r7, 80a954e <mbedtls_mpi_shift_l+0x74>
    i = mbedtls_mpi_bitlen( X ) + count;

    if( X->n * biL < i )
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );

    ret = 0;
 80a954a:	2000      	movs	r0, #0
 80a954c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a954e:	00b3      	lsls	r3, r6, #2
    }

    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
 80a9550:	2200      	movs	r2, #0
    {
        for( i = v0; i < X->n; i++ )
        {
            r1 = X->p[i] >> (biL - t1);
 80a9552:	f1c7 0e20 	rsb	lr, r7, #32
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
 80a9556:	6861      	ldr	r1, [r4, #4]
 80a9558:	428e      	cmp	r6, r1
 80a955a:	d2f6      	bcs.n	80a954a <mbedtls_mpi_shift_l+0x70>
        {
            r1 = X->p[i] >> (biL - t1);
 80a955c:	68a0      	ldr	r0, [r4, #8]
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
 80a955e:	3601      	adds	r6, #1
        {
            r1 = X->p[i] >> (biL - t1);
 80a9560:	58c1      	ldr	r1, [r0, r3]
            X->p[i] <<= t1;
 80a9562:	fa01 f507 	lsl.w	r5, r1, r7
 80a9566:	50c5      	str	r5, [r0, r3]
            X->p[i] |= r0;
 80a9568:	68a0      	ldr	r0, [r4, #8]
 80a956a:	58c5      	ldr	r5, [r0, r3]
 80a956c:	432a      	orrs	r2, r5
 80a956e:	50c2      	str	r2, [r0, r3]
 80a9570:	3304      	adds	r3, #4
            r0 = r1;
 80a9572:	fa21 f20e 	lsr.w	r2, r1, lr
    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
    {
        for( i = v0; i < X->n; i++ )
 80a9576:	e7ee      	b.n	80a9556 <mbedtls_mpi_shift_l+0x7c>

080a9578 <mbedtls_mpi_shift_r>:

/*
 * Right-shift: X >>= count
 */
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
 80a9578:	b5f0      	push	{r4, r5, r6, r7, lr}
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count /  biL;
    v1 = count & (biL - 1);

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 80a957a:	6843      	ldr	r3, [r0, #4]
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count /  biL;
 80a957c:	094a      	lsrs	r2, r1, #5
    v1 = count & (biL - 1);

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 80a957e:	429a      	cmp	r2, r3
{
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count /  biL;
    v1 = count & (biL - 1);
 80a9580:	f001 011f 	and.w	r1, r1, #31

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 80a9584:	d801      	bhi.n	80a958a <mbedtls_mpi_shift_r+0x12>
 80a9586:	d105      	bne.n	80a9594 <mbedtls_mpi_shift_r+0x1c>
 80a9588:	b159      	cbz	r1, 80a95a2 <mbedtls_mpi_shift_r+0x2a>
            r0 = r1;
        }
    }

    return( 0 );
}
 80a958a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

    v0 = count /  biL;
    v1 = count & (biL - 1);

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
        return mbedtls_mpi_lset( X, 0 );
 80a958e:	2100      	movs	r1, #0
 80a9590:	f7ff bedf 	b.w	80a9352 <mbedtls_mpi_lset>

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 80a9594:	b1d2      	cbz	r2, 80a95cc <mbedtls_mpi_shift_r+0x54>
 80a9596:	2300      	movs	r3, #0
    {
        for( i = 0; i < X->n - v0; i++ )
 80a9598:	6844      	ldr	r4, [r0, #4]
 80a959a:	1aa4      	subs	r4, r4, r2
 80a959c:	42a3      	cmp	r3, r4
 80a959e:	d305      	bcc.n	80a95ac <mbedtls_mpi_shift_r+0x34>
 80a95a0:	e001      	b.n	80a95a6 <mbedtls_mpi_shift_r+0x2e>
        return mbedtls_mpi_lset( X, 0 );

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 80a95a2:	b35a      	cbz	r2, 80a95fc <mbedtls_mpi_shift_r+0x84>
 80a95a4:	460b      	mov	r3, r1
 80a95a6:	009a      	lsls	r2, r3, #2
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
            X->p[i] = 0;
 80a95a8:	2500      	movs	r5, #0
 80a95aa:	e007      	b.n	80a95bc <mbedtls_mpi_shift_r+0x44>
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];
 80a95ac:	6884      	ldr	r4, [r0, #8]
 80a95ae:	189d      	adds	r5, r3, r2
 80a95b0:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 80a95b4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
 80a95b8:	3301      	adds	r3, #1
 80a95ba:	e7ed      	b.n	80a9598 <mbedtls_mpi_shift_r+0x20>
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
 80a95bc:	6844      	ldr	r4, [r0, #4]
 80a95be:	42a3      	cmp	r3, r4
 80a95c0:	d204      	bcs.n	80a95cc <mbedtls_mpi_shift_r+0x54>
            X->p[i] = 0;
 80a95c2:	6884      	ldr	r4, [r0, #8]
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
 80a95c4:	3301      	adds	r3, #1
            X->p[i] = 0;
 80a95c6:	50a5      	str	r5, [r4, r2]
 80a95c8:	3204      	adds	r2, #4
    if( v0 > 0 )
    {
        for( i = 0; i < X->n - v0; i++ )
            X->p[i] = X->p[i + v0];

        for( ; i < X->n; i++ )
 80a95ca:	e7f7      	b.n	80a95bc <mbedtls_mpi_shift_r+0x44>
    }

    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
 80a95cc:	b1b1      	cbz	r1, 80a95fc <mbedtls_mpi_shift_r+0x84>
    {
        for( i = X->n; i > 0; i-- )
 80a95ce:	6844      	ldr	r4, [r0, #4]
 * Right-shift: X >>= count
 */
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;
 80a95d0:	2200      	movs	r2, #0
 80a95d2:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 80a95d6:	3b01      	subs	r3, #1
 80a95d8:	009b      	lsls	r3, r3, #2
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
        {
            r1 = X->p[i - 1] << (biL - v1);
 80a95da:	f1c1 0e20 	rsb	lr, r1, #32
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
 80a95de:	b16c      	cbz	r4, 80a95fc <mbedtls_mpi_shift_r+0x84>
        {
            r1 = X->p[i - 1] << (biL - v1);
 80a95e0:	6886      	ldr	r6, [r0, #8]
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
 80a95e2:	3c01      	subs	r4, #1
        {
            r1 = X->p[i - 1] << (biL - v1);
 80a95e4:	58f5      	ldr	r5, [r6, r3]
            X->p[i - 1] >>= v1;
 80a95e6:	fa25 f701 	lsr.w	r7, r5, r1
 80a95ea:	50f7      	str	r7, [r6, r3]
            X->p[i - 1] |= r0;
 80a95ec:	6886      	ldr	r6, [r0, #8]
 80a95ee:	58f7      	ldr	r7, [r6, r3]
 80a95f0:	433a      	orrs	r2, r7
 80a95f2:	50f2      	str	r2, [r6, r3]
 80a95f4:	3b04      	subs	r3, #4
            r0 = r1;
 80a95f6:	fa05 f20e 	lsl.w	r2, r5, lr
    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
    {
        for( i = X->n; i > 0; i-- )
 80a95fa:	e7f0      	b.n	80a95de <mbedtls_mpi_shift_r+0x66>
            r0 = r1;
        }
    }

    return( 0 );
}
 80a95fc:	2000      	movs	r0, #0
 80a95fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a9600 <mbedtls_mpi_cmp_abs>:

/*
 * Compare unsigned values
 */
int mbedtls_mpi_cmp_abs( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 80a9600:	b570      	push	{r4, r5, r6, lr}
    size_t i, j;

    for( i = X->n; i > 0; i-- )
 80a9602:	6843      	ldr	r3, [r0, #4]
 80a9604:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 80a9608:	3a01      	subs	r2, #1
 80a960a:	0092      	lsls	r2, r2, #2
 80a960c:	b12b      	cbz	r3, 80a961a <mbedtls_mpi_cmp_abs+0x1a>
        if( X->p[i - 1] != 0 )
 80a960e:	6884      	ldr	r4, [r0, #8]
 80a9610:	58a4      	ldr	r4, [r4, r2]
 80a9612:	3a04      	subs	r2, #4
 80a9614:	b90c      	cbnz	r4, 80a961a <mbedtls_mpi_cmp_abs+0x1a>
 */
int mbedtls_mpi_cmp_abs( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
    size_t i, j;

    for( i = X->n; i > 0; i-- )
 80a9616:	3b01      	subs	r3, #1
 80a9618:	e7f8      	b.n	80a960c <mbedtls_mpi_cmp_abs+0xc>
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 80a961a:	684c      	ldr	r4, [r1, #4]
 80a961c:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 80a9620:	3a01      	subs	r2, #1
 80a9622:	0092      	lsls	r2, r2, #2
 80a9624:	b1c4      	cbz	r4, 80a9658 <mbedtls_mpi_cmp_abs+0x58>
        if( Y->p[j - 1] != 0 )
 80a9626:	688d      	ldr	r5, [r1, #8]
 80a9628:	58ae      	ldr	r6, [r5, r2]
 80a962a:	3a04      	subs	r2, #4
 80a962c:	b90e      	cbnz	r6, 80a9632 <mbedtls_mpi_cmp_abs+0x32>

    for( i = X->n; i > 0; i-- )
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 80a962e:	3c01      	subs	r4, #1
 80a9630:	e7f8      	b.n	80a9624 <mbedtls_mpi_cmp_abs+0x24>
            break;

    if( i == 0 && j == 0 )
        return( 0 );

    if( i > j ) return(  1 );
 80a9632:	429c      	cmp	r4, r3
 80a9634:	d30b      	bcc.n	80a964e <mbedtls_mpi_cmp_abs+0x4e>
    if( j > i ) return( -1 );
 80a9636:	d913      	bls.n	80a9660 <mbedtls_mpi_cmp_abs+0x60>
 80a9638:	e00b      	b.n	80a9652 <mbedtls_mpi_cmp_abs+0x52>
 80a963a:	f1a2 0204 	sub.w	r2, r2, #4

    for( ; i > 0; i-- )
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
 80a963e:	d308      	bcc.n	80a9652 <mbedtls_mpi_cmp_abs+0x52>
        return( 0 );

    if( i > j ) return(  1 );
    if( j > i ) return( -1 );

    for( ; i > 0; i-- )
 80a9640:	3b01      	subs	r3, #1
 80a9642:	b193      	cbz	r3, 80a966a <mbedtls_mpi_cmp_abs+0x6a>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
 80a9644:	6881      	ldr	r1, [r0, #8]
 80a9646:	588c      	ldr	r4, [r1, r2]
 80a9648:	58a9      	ldr	r1, [r5, r2]
 80a964a:	428c      	cmp	r4, r1
 80a964c:	d9f5      	bls.n	80a963a <mbedtls_mpi_cmp_abs+0x3a>
            break;

    if( i == 0 && j == 0 )
        return( 0 );

    if( i > j ) return(  1 );
 80a964e:	2001      	movs	r0, #1
 80a9650:	bd70      	pop	{r4, r5, r6, pc}
    if( j > i ) return( -1 );
 80a9652:	f04f 30ff 	mov.w	r0, #4294967295
 80a9656:	bd70      	pop	{r4, r5, r6, pc}
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
    }

    return( 0 );
 80a9658:	1c18      	adds	r0, r3, #0
 80a965a:	bf18      	it	ne
 80a965c:	2001      	movne	r0, #1
 80a965e:	bd70      	pop	{r4, r5, r6, pc}
 80a9660:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 80a9664:	3a01      	subs	r2, #1
 80a9666:	0092      	lsls	r2, r2, #2
 80a9668:	e7eb      	b.n	80a9642 <mbedtls_mpi_cmp_abs+0x42>
 80a966a:	4618      	mov	r0, r3
 80a966c:	bd70      	pop	{r4, r5, r6, pc}

080a966e <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>:
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 80a966e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a9672:	4616      	mov	r6, r2
 80a9674:	b085      	sub	sp, #20
 80a9676:	9303      	str	r3, [sp, #12]
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 80a9678:	9b0e      	ldr	r3, [sp, #56]	; 0x38
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 80a967a:	4681      	mov	r9, r0
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 80a967c:	685a      	ldr	r2, [r3, #4]
 80a967e:	6873      	ldr	r3, [r6, #4]
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 80a9680:	468b      	mov	fp, r1
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 80a9682:	3301      	adds	r3, #1
 80a9684:	429a      	cmp	r2, r3
 80a9686:	d351      	bcc.n	80a972c <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xbe>
 80a9688:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a968a:	6898      	ldr	r0, [r3, #8]
 80a968c:	2800      	cmp	r0, #0
 80a968e:	d04d      	beq.n	80a972c <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xbe>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );
 80a9690:	0092      	lsls	r2, r2, #2
 80a9692:	2100      	movs	r1, #0
 80a9694:	f005 fd53 	bl	80af13e <memset>

    d = T->p;
 80a9698:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    n = N->n;
 80a969a:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );

    d = T->p;
 80a969e:	689b      	ldr	r3, [r3, #8]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
 80a96a0:	f10a 0701 	add.w	r7, sl, #1
    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );

    d = T->p;
 80a96a4:	9300      	str	r3, [sp, #0]
    n = N->n;
    m = ( B->n < n ) ? B->n : n;
 80a96a6:	f8db 3004 	ldr.w	r3, [fp, #4]
    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );

    d = T->p;
 80a96aa:	9d00      	ldr	r5, [sp, #0]
 80a96ac:	4553      	cmp	r3, sl
 80a96ae:	bf28      	it	cs
 80a96b0:	4653      	movcs	r3, sl
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
 80a96b2:	00bf      	lsls	r7, r7, #2
 80a96b4:	9302      	str	r3, [sp, #8]

    d = T->p;
    n = N->n;
    m = ( B->n < n ) ? B->n : n;

    for( i = 0; i < n; i++ )
 80a96b6:	2400      	movs	r4, #0
 80a96b8:	4554      	cmp	r4, sl
 80a96ba:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80a96be:	d01b      	beq.n	80a96f8 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0x8a>
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 80a96c0:	f8db 1008 	ldr.w	r1, [fp, #8]
    for( i = 0; i < n; i++ )
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
 80a96c4:	f850 8024 	ldr.w	r8, [r0, r4, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 80a96c8:	682a      	ldr	r2, [r5, #0]
 80a96ca:	680b      	ldr	r3, [r1, #0]

        mpi_mul_hlp( m, B->p, d, u0 );
 80a96cc:	9802      	ldr	r0, [sp, #8]
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 80a96ce:	fb03 2308 	mla	r3, r3, r8, r2
 80a96d2:	9a03      	ldr	r2, [sp, #12]

    d = T->p;
    n = N->n;
    m = ( B->n < n ) ? B->n : n;

    for( i = 0; i < n; i++ )
 80a96d4:	3401      	adds	r4, #1
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 80a96d6:	4353      	muls	r3, r2

        mpi_mul_hlp( m, B->p, d, u0 );
 80a96d8:	462a      	mov	r2, r5
    {
        /*
         * T = (T + u0*B + u1*N) / 2^biL
         */
        u0 = A->p[i];
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 80a96da:	9301      	str	r3, [sp, #4]

        mpi_mul_hlp( m, B->p, d, u0 );
 80a96dc:	4643      	mov	r3, r8
 80a96de:	f7ff fbf9 	bl	80a8ed4 <_ZL11mpi_mul_hlpjPmS_m>
        mpi_mul_hlp( n, N->p, d, u1 );
 80a96e2:	9b01      	ldr	r3, [sp, #4]
 80a96e4:	462a      	mov	r2, r5
 80a96e6:	68b1      	ldr	r1, [r6, #8]
 80a96e8:	4650      	mov	r0, sl
 80a96ea:	f7ff fbf3 	bl	80a8ed4 <_ZL11mpi_mul_hlpjPmS_m>

        *d++ = u0; d[n + 1] = 0;
 80a96ee:	f845 8b04 	str.w	r8, [r5], #4
 80a96f2:	2300      	movs	r3, #0
 80a96f4:	51eb      	str	r3, [r5, r7]

    d = T->p;
    n = N->n;
    m = ( B->n < n ) ? B->n : n;

    for( i = 0; i < n; i++ )
 80a96f6:	e7df      	b.n	80a96b8 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0x4a>
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );
 80a96f8:	9b00      	ldr	r3, [sp, #0]
 80a96fa:	1f39      	subs	r1, r7, #4
 80a96fc:	440b      	add	r3, r1
 80a96fe:	463a      	mov	r2, r7
 80a9700:	4619      	mov	r1, r3
 80a9702:	f005 fcf6 	bl	80af0f2 <memcpy>

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
 80a9706:	4631      	mov	r1, r6
 80a9708:	4648      	mov	r0, r9
 80a970a:	f7ff ff79 	bl	80a9600 <mbedtls_mpi_cmp_abs>
 80a970e:	2800      	cmp	r0, #0
        mpi_sub_hlp( n, N->p, A->p );
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
 80a9710:	bfb8      	it	lt
 80a9712:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80a9714:	4620      	mov	r0, r4
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
        mpi_sub_hlp( n, N->p, A->p );
 80a9716:	bfa7      	ittee	ge
 80a9718:	f8d9 2008 	ldrge.w	r2, [r9, #8]
 80a971c:	68b1      	ldrge	r1, [r6, #8]
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
 80a971e:	689a      	ldrlt	r2, [r3, #8]
 80a9720:	f8d9 1008 	ldrlt.w	r1, [r9, #8]
 80a9724:	f7ff fbac 	bl	80a8e80 <_ZL11mpi_sub_hlpjPmS_>

    return( 0 );
 80a9728:	2000      	movs	r0, #0
 80a972a:	e001      	b.n	80a9730 <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_+0xc2>
{
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 80a972c:	f06f 0003 	mvn.w	r0, #3
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );

    return( 0 );
}
 80a9730:	b005      	add	sp, #20
 80a9732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a9736 <mbedtls_mpi_cmp_mpi>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 80a9736:	b570      	push	{r4, r5, r6, lr}
    size_t i, j;

    for( i = X->n; i > 0; i-- )
 80a9738:	6843      	ldr	r3, [r0, #4]
 80a973a:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 80a973e:	3a01      	subs	r2, #1
 80a9740:	0092      	lsls	r2, r2, #2
 80a9742:	b12b      	cbz	r3, 80a9750 <mbedtls_mpi_cmp_mpi+0x1a>
        if( X->p[i - 1] != 0 )
 80a9744:	6884      	ldr	r4, [r0, #8]
 80a9746:	58a4      	ldr	r4, [r4, r2]
 80a9748:	3a04      	subs	r2, #4
 80a974a:	b90c      	cbnz	r4, 80a9750 <mbedtls_mpi_cmp_mpi+0x1a>
 */
int mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
    size_t i, j;

    for( i = X->n; i > 0; i-- )
 80a974c:	3b01      	subs	r3, #1
 80a974e:	e7f8      	b.n	80a9742 <mbedtls_mpi_cmp_mpi+0xc>
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 80a9750:	684c      	ldr	r4, [r1, #4]
 80a9752:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
 80a9756:	3a01      	subs	r2, #1
 80a9758:	0092      	lsls	r2, r2, #2
 80a975a:	b364      	cbz	r4, 80a97b6 <mbedtls_mpi_cmp_mpi+0x80>
        if( Y->p[j - 1] != 0 )
 80a975c:	688d      	ldr	r5, [r1, #8]
 80a975e:	58ae      	ldr	r6, [r5, r2]
 80a9760:	3a04      	subs	r2, #4
 80a9762:	b90e      	cbnz	r6, 80a9768 <mbedtls_mpi_cmp_mpi+0x32>

    for( i = X->n; i > 0; i-- )
        if( X->p[i - 1] != 0 )
            break;

    for( j = Y->n; j > 0; j-- )
 80a9764:	3c01      	subs	r4, #1
 80a9766:	e7f8      	b.n	80a975a <mbedtls_mpi_cmp_mpi+0x24>
            break;

    if( i == 0 && j == 0 )
        return( 0 );

    if( i > j ) return(  X->s );
 80a9768:	429c      	cmp	r4, r3
 80a976a:	d201      	bcs.n	80a9770 <mbedtls_mpi_cmp_mpi+0x3a>
 80a976c:	6802      	ldr	r2, [r0, #0]
 80a976e:	e025      	b.n	80a97bc <mbedtls_mpi_cmp_mpi+0x86>
 80a9770:	6809      	ldr	r1, [r1, #0]
    if( j > i ) return( -Y->s );
 80a9772:	d901      	bls.n	80a9778 <mbedtls_mpi_cmp_mpi+0x42>
 80a9774:	424a      	negs	r2, r1
 80a9776:	e021      	b.n	80a97bc <mbedtls_mpi_cmp_mpi+0x86>

    if( X->s > 0 && Y->s < 0 ) return(  1 );
 80a9778:	6802      	ldr	r2, [r0, #0]
 80a977a:	2a00      	cmp	r2, #0
 80a977c:	dd01      	ble.n	80a9782 <mbedtls_mpi_cmp_mpi+0x4c>
 80a977e:	2900      	cmp	r1, #0
 80a9780:	db14      	blt.n	80a97ac <mbedtls_mpi_cmp_mpi+0x76>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 80a9782:	2900      	cmp	r1, #0
 80a9784:	dd01      	ble.n	80a978a <mbedtls_mpi_cmp_mpi+0x54>
 80a9786:	2a00      	cmp	r2, #0
 80a9788:	db12      	blt.n	80a97b0 <mbedtls_mpi_cmp_mpi+0x7a>
 80a978a:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
 80a978e:	3901      	subs	r1, #1
 80a9790:	0089      	lsls	r1, r1, #2

    for( ; i > 0; i-- )
 80a9792:	b193      	cbz	r3, 80a97ba <mbedtls_mpi_cmp_mpi+0x84>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 80a9794:	6884      	ldr	r4, [r0, #8]
 80a9796:	5866      	ldr	r6, [r4, r1]
 80a9798:	586c      	ldr	r4, [r5, r1]
 80a979a:	42a6      	cmp	r6, r4
 80a979c:	d80e      	bhi.n	80a97bc <mbedtls_mpi_cmp_mpi+0x86>
 80a979e:	f1a1 0104 	sub.w	r1, r1, #4
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 80a97a2:	d201      	bcs.n	80a97a8 <mbedtls_mpi_cmp_mpi+0x72>
 80a97a4:	4252      	negs	r2, r2
 80a97a6:	e009      	b.n	80a97bc <mbedtls_mpi_cmp_mpi+0x86>
    if( j > i ) return( -Y->s );

    if( X->s > 0 && Y->s < 0 ) return(  1 );
    if( Y->s > 0 && X->s < 0 ) return( -1 );

    for( ; i > 0; i-- )
 80a97a8:	3b01      	subs	r3, #1
 80a97aa:	e7f2      	b.n	80a9792 <mbedtls_mpi_cmp_mpi+0x5c>
        return( 0 );

    if( i > j ) return(  X->s );
    if( j > i ) return( -Y->s );

    if( X->s > 0 && Y->s < 0 ) return(  1 );
 80a97ac:	2201      	movs	r2, #1
 80a97ae:	e005      	b.n	80a97bc <mbedtls_mpi_cmp_mpi+0x86>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 80a97b0:	f04f 32ff 	mov.w	r2, #4294967295
 80a97b4:	e002      	b.n	80a97bc <mbedtls_mpi_cmp_mpi+0x86>

    for( j = Y->n; j > 0; j-- )
        if( Y->p[j - 1] != 0 )
            break;

    if( i == 0 && j == 0 )
 80a97b6:	2b00      	cmp	r3, #0
 80a97b8:	d1d8      	bne.n	80a976c <mbedtls_mpi_cmp_mpi+0x36>
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    }

    return( 0 );
 80a97ba:	461a      	mov	r2, r3
}
 80a97bc:	4610      	mov	r0, r2
 80a97be:	bd70      	pop	{r4, r5, r6, pc}

080a97c0 <mbedtls_mpi_cmp_int>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_int( const mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 80a97c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];

    *p  = ( z < 0 ) ? -z : z;
 80a97c2:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
 80a97c6:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
 80a97ca:	2900      	cmp	r1, #0
int mbedtls_mpi_cmp_int( const mbedtls_mpi *X, mbedtls_mpi_sint z )
{
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];

    *p  = ( z < 0 ) ? -z : z;
 80a97cc:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
 80a97ce:	bfb4      	ite	lt
 80a97d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80a97d4:	2301      	movge	r3, #1
 80a97d6:	9301      	str	r3, [sp, #4]
    Y.n = 1;
    Y.p = p;

    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 80a97d8:	a901      	add	r1, sp, #4
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];

    *p  = ( z < 0 ) ? -z : z;
    Y.s = ( z < 0 ) ? -1 : 1;
    Y.n = 1;
 80a97da:	2301      	movs	r3, #1
 80a97dc:	9302      	str	r3, [sp, #8]
    Y.p = p;
 80a97de:	f8cd d00c 	str.w	sp, [sp, #12]

    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 80a97e2:	f7ff ffa8 	bl	80a9736 <mbedtls_mpi_cmp_mpi>
}
 80a97e6:	b005      	add	sp, #20
 80a97e8:	f85d fb04 	ldr.w	pc, [sp], #4

080a97ec <mbedtls_mpi_add_abs>:
{
    int ret;
    size_t i, j;
    mbedtls_mpi_uint *o, *p, c, tmp;

    if( X == B )
 80a97ec:	4290      	cmp	r0, r2

/*
 * Unsigned addition: X = |A| + |B|  (HAC 14.7)
 */
int mbedtls_mpi_add_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80a97ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a97f2:	4606      	mov	r6, r0
 80a97f4:	4615      	mov	r5, r2
    int ret;
    size_t i, j;
    mbedtls_mpi_uint *o, *p, c, tmp;

    if( X == B )
 80a97f6:	d006      	beq.n	80a9806 <mbedtls_mpi_add_abs+0x1a>
    {
        const mbedtls_mpi *T = A; A = X; B = T;
    }

    if( X != A )
 80a97f8:	4288      	cmp	r0, r1
 80a97fa:	d005      	beq.n	80a9808 <mbedtls_mpi_add_abs+0x1c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 80a97fc:	f7ff fd7f 	bl	80a92fe <mbedtls_mpi_copy>
 80a9800:	4607      	mov	r7, r0
 80a9802:	b108      	cbz	r0, 80a9808 <mbedtls_mpi_add_abs+0x1c>
 80a9804:	e049      	b.n	80a989a <mbedtls_mpi_add_abs+0xae>
 80a9806:	460d      	mov	r5, r1

    /*
     * X should always be positive as a result of unsigned additions.
     */
    X->s = 1;
 80a9808:	2301      	movs	r3, #1
 80a980a:	6033      	str	r3, [r6, #0]

    for( j = B->n; j > 0; j-- )
 80a980c:	686c      	ldr	r4, [r5, #4]
 80a980e:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 80a9812:	3b01      	subs	r3, #1
 80a9814:	009b      	lsls	r3, r3, #2
 80a9816:	b12c      	cbz	r4, 80a9824 <mbedtls_mpi_add_abs+0x38>
        if( B->p[j - 1] != 0 )
 80a9818:	68aa      	ldr	r2, [r5, #8]
 80a981a:	58d2      	ldr	r2, [r2, r3]
 80a981c:	3b04      	subs	r3, #4
 80a981e:	b90a      	cbnz	r2, 80a9824 <mbedtls_mpi_add_abs+0x38>
    /*
     * X should always be positive as a result of unsigned additions.
     */
    X->s = 1;

    for( j = B->n; j > 0; j-- )
 80a9820:	3c01      	subs	r4, #1
 80a9822:	e7f8      	b.n	80a9816 <mbedtls_mpi_add_abs+0x2a>
        if( B->p[j - 1] != 0 )
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 80a9824:	4621      	mov	r1, r4
 80a9826:	4630      	mov	r0, r6
 80a9828:	f7ff fd3d 	bl	80a92a6 <mbedtls_mpi_grow>
 80a982c:	4607      	mov	r7, r0
 80a982e:	2800      	cmp	r0, #0
 80a9830:	d133      	bne.n	80a989a <mbedtls_mpi_add_abs+0xae>

    o = B->p; p = X->p; c = 0;
 80a9832:	68b3      	ldr	r3, [r6, #8]
 80a9834:	f8d5 c008 	ldr.w	ip, [r5, #8]
 80a9838:	4618      	mov	r0, r3
 80a983a:	463d      	mov	r5, r7

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
 80a983c:	4639      	mov	r1, r7
 80a983e:	42a1      	cmp	r1, r4
 80a9840:	d00f      	beq.n	80a9862 <mbedtls_mpi_add_abs+0x76>
    {
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
 80a9842:	6802      	ldr	r2, [r0, #0]
    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
    {
        tmp= *o;
 80a9844:	f85c e021 	ldr.w	lr, [ip, r1, lsl #2]
        *p +=  c; c  = ( *p <  c );
 80a9848:	18ad      	adds	r5, r5, r2
        *p += tmp; c += ( *p < tmp );
 80a984a:	4475      	add	r5, lr
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
    {
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
 80a984c:	bf2c      	ite	cs
 80a984e:	2201      	movcs	r2, #1
 80a9850:	2200      	movcc	r2, #0
        *p += tmp; c += ( *p < tmp );
 80a9852:	f840 5b04 	str.w	r5, [r0], #4
    o = B->p; p = X->p; c = 0;

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
 80a9856:	3101      	adds	r1, #1
    {
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
 80a9858:	45ae      	cmp	lr, r5
 80a985a:	bf94      	ite	ls
 80a985c:	4615      	movls	r5, r2
 80a985e:	1c55      	addhi	r5, r2, #1
    o = B->p; p = X->p; c = 0;

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
 80a9860:	e7ed      	b.n	80a983e <mbedtls_mpi_add_abs+0x52>
 80a9862:	ea4f 0884 	mov.w	r8, r4, lsl #2
 80a9866:	4443      	add	r3, r8
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
    }

    while( c != 0 )
 80a9868:	b1bd      	cbz	r5, 80a989a <mbedtls_mpi_add_abs+0xae>
    {
        if( i >= X->n )
 80a986a:	6872      	ldr	r2, [r6, #4]
 80a986c:	4294      	cmp	r4, r2
 80a986e:	f104 0401 	add.w	r4, r4, #1
 80a9872:	d306      	bcc.n	80a9882 <mbedtls_mpi_add_abs+0x96>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 80a9874:	4621      	mov	r1, r4
 80a9876:	4630      	mov	r0, r6
 80a9878:	f7ff fd15 	bl	80a92a6 <mbedtls_mpi_grow>
 80a987c:	b960      	cbnz	r0, 80a9898 <mbedtls_mpi_add_abs+0xac>
            p = X->p + i;
 80a987e:	68b3      	ldr	r3, [r6, #8]
 80a9880:	4443      	add	r3, r8
        }

        *p += c; c = ( *p < c ); i++; p++;
 80a9882:	681a      	ldr	r2, [r3, #0]
 80a9884:	f108 0804 	add.w	r8, r8, #4
 80a9888:	442a      	add	r2, r5
 80a988a:	4295      	cmp	r5, r2
 80a988c:	f843 2b04 	str.w	r2, [r3], #4
 80a9890:	bf94      	ite	ls
 80a9892:	2500      	movls	r5, #0
 80a9894:	2501      	movhi	r5, #1
        tmp= *o;
        *p +=  c; c  = ( *p <  c );
        *p += tmp; c += ( *p < tmp );
    }

    while( c != 0 )
 80a9896:	e7e7      	b.n	80a9868 <mbedtls_mpi_add_abs+0x7c>
    {
        if( i >= X->n )
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 80a9898:	4607      	mov	r7, r0
    }

cleanup:

    return( ret );
}
 80a989a:	4638      	mov	r0, r7
 80a989c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a98a0 <mbedtls_mpi_sub_abs>:

/*
 * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)
 */
int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80a98a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a98a2:	460f      	mov	r7, r1
 80a98a4:	b085      	sub	sp, #20
 80a98a6:	4606      	mov	r6, r0
    mbedtls_mpi TB;
    int ret;
    size_t n;

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 80a98a8:	4611      	mov	r1, r2
 80a98aa:	4638      	mov	r0, r7

/*
 * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)
 */
int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80a98ac:	4615      	mov	r5, r2
    mbedtls_mpi TB;
    int ret;
    size_t n;

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 80a98ae:	f7ff fea7 	bl	80a9600 <mbedtls_mpi_cmp_abs>
 80a98b2:	2800      	cmp	r0, #0
 80a98b4:	db30      	blt.n	80a9918 <mbedtls_mpi_sub_abs+0x78>
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80a98b6:	2301      	movs	r3, #1
 80a98b8:	9301      	str	r3, [sp, #4]
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    mbedtls_mpi_init( &TB );

    if( X == B )
 80a98ba:	42b5      	cmp	r5, r6
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 80a98bc:	f04f 0300 	mov.w	r3, #0
 80a98c0:	9302      	str	r3, [sp, #8]
    X->p = NULL;
 80a98c2:	9303      	str	r3, [sp, #12]
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    mbedtls_mpi_init( &TB );

    if( X == B )
 80a98c4:	d106      	bne.n	80a98d4 <mbedtls_mpi_sub_abs+0x34>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 80a98c6:	4629      	mov	r1, r5
 80a98c8:	a801      	add	r0, sp, #4
 80a98ca:	f7ff fd18 	bl	80a92fe <mbedtls_mpi_copy>
 80a98ce:	4604      	mov	r4, r0
 80a98d0:	b9e8      	cbnz	r0, 80a990e <mbedtls_mpi_sub_abs+0x6e>
        B = &TB;
 80a98d2:	ad01      	add	r5, sp, #4
    }

    if( X != A )
 80a98d4:	42b7      	cmp	r7, r6
 80a98d6:	d107      	bne.n	80a98e8 <mbedtls_mpi_sub_abs+0x48>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );

    /*
     * X should always be positive as a result of unsigned subtractions.
     */
    X->s = 1;
 80a98d8:	2301      	movs	r3, #1
 80a98da:	6033      	str	r3, [r6, #0]

    ret = 0;

    for( n = B->n; n > 0; n-- )
 80a98dc:	6868      	ldr	r0, [r5, #4]
 80a98de:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 80a98e2:	3b01      	subs	r3, #1
 80a98e4:	009b      	lsls	r3, r3, #2
 80a98e6:	e00b      	b.n	80a9900 <mbedtls_mpi_sub_abs+0x60>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
        B = &TB;
    }

    if( X != A )
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 80a98e8:	4639      	mov	r1, r7
 80a98ea:	4630      	mov	r0, r6
 80a98ec:	f7ff fd07 	bl	80a92fe <mbedtls_mpi_copy>
 80a98f0:	4604      	mov	r4, r0
 80a98f2:	b960      	cbnz	r0, 80a990e <mbedtls_mpi_sub_abs+0x6e>
 80a98f4:	e7f0      	b.n	80a98d8 <mbedtls_mpi_sub_abs+0x38>
    X->s = 1;

    ret = 0;

    for( n = B->n; n > 0; n-- )
        if( B->p[n - 1] != 0 )
 80a98f6:	68aa      	ldr	r2, [r5, #8]
 80a98f8:	58d2      	ldr	r2, [r2, r3]
 80a98fa:	3b04      	subs	r3, #4
 80a98fc:	b912      	cbnz	r2, 80a9904 <mbedtls_mpi_sub_abs+0x64>
     */
    X->s = 1;

    ret = 0;

    for( n = B->n; n > 0; n-- )
 80a98fe:	3801      	subs	r0, #1
 80a9900:	2800      	cmp	r0, #0
 80a9902:	d1f8      	bne.n	80a98f6 <mbedtls_mpi_sub_abs+0x56>
        if( B->p[n - 1] != 0 )
            break;

    mpi_sub_hlp( n, B->p, X->p );
 80a9904:	68b2      	ldr	r2, [r6, #8]
 80a9906:	68a9      	ldr	r1, [r5, #8]
 80a9908:	f7ff faba 	bl	80a8e80 <_ZL11mpi_sub_hlpjPmS_>
    /*
     * X should always be positive as a result of unsigned subtractions.
     */
    X->s = 1;

    ret = 0;
 80a990c:	2400      	movs	r4, #0

    mpi_sub_hlp( n, B->p, X->p );

cleanup:

    mbedtls_mpi_free( &TB );
 80a990e:	a801      	add	r0, sp, #4
 80a9910:	f7ff fcb3 	bl	80a927a <mbedtls_mpi_free>

    return( ret );
 80a9914:	4620      	mov	r0, r4
 80a9916:	e001      	b.n	80a991c <mbedtls_mpi_sub_abs+0x7c>
    mbedtls_mpi TB;
    int ret;
    size_t n;

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 80a9918:	f06f 0009 	mvn.w	r0, #9
cleanup:

    mbedtls_mpi_free( &TB );

    return( ret );
}
 80a991c:	b005      	add	sp, #20
 80a991e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a9920 <mbedtls_mpi_add_mpi>:

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80a9920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s = A->s;
 80a9922:	680c      	ldr	r4, [r1, #0]

    if( A->s * B->s < 0 )
 80a9924:	6813      	ldr	r3, [r2, #0]

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80a9926:	4605      	mov	r5, r0
    int ret, s = A->s;

    if( A->s * B->s < 0 )
 80a9928:	4363      	muls	r3, r4

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80a992a:	460f      	mov	r7, r1
 80a992c:	4616      	mov	r6, r2
    int ret, s = A->s;

    if( A->s * B->s < 0 )
 80a992e:	d513      	bpl.n	80a9958 <mbedtls_mpi_add_mpi+0x38>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 80a9930:	4611      	mov	r1, r2
 80a9932:	4638      	mov	r0, r7
 80a9934:	f7ff fe64 	bl	80a9600 <mbedtls_mpi_cmp_abs>
 80a9938:	2800      	cmp	r0, #0
 80a993a:	db05      	blt.n	80a9948 <mbedtls_mpi_add_mpi+0x28>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 80a993c:	4632      	mov	r2, r6
 80a993e:	4639      	mov	r1, r7
 80a9940:	4628      	mov	r0, r5
 80a9942:	f7ff ffad 	bl	80a98a0 <mbedtls_mpi_sub_abs>
 80a9946:	e009      	b.n	80a995c <mbedtls_mpi_add_mpi+0x3c>
            X->s =  s;
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 80a9948:	463a      	mov	r2, r7
 80a994a:	4631      	mov	r1, r6
 80a994c:	4628      	mov	r0, r5
 80a994e:	f7ff ffa7 	bl	80a98a0 <mbedtls_mpi_sub_abs>
 80a9952:	b928      	cbnz	r0, 80a9960 <mbedtls_mpi_add_mpi+0x40>
            X->s = -s;
 80a9954:	4264      	negs	r4, r4
 80a9956:	e002      	b.n	80a995e <mbedtls_mpi_add_mpi+0x3e>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 80a9958:	f7ff ff48 	bl	80a97ec <mbedtls_mpi_add_abs>
 80a995c:	b900      	cbnz	r0, 80a9960 <mbedtls_mpi_add_mpi+0x40>
        X->s = s;
 80a995e:	602c      	str	r4, [r5, #0]
    }

cleanup:

    return( ret );
}
 80a9960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a9962 <mbedtls_mpi_sub_mpi>:

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80a9962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s = A->s;
 80a9964:	680c      	ldr	r4, [r1, #0]

    if( A->s * B->s > 0 )
 80a9966:	6813      	ldr	r3, [r2, #0]

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80a9968:	4605      	mov	r5, r0
    int ret, s = A->s;

    if( A->s * B->s > 0 )
 80a996a:	4363      	muls	r3, r4
 80a996c:	2b00      	cmp	r3, #0

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80a996e:	460f      	mov	r7, r1
 80a9970:	4616      	mov	r6, r2
    int ret, s = A->s;

    if( A->s * B->s > 0 )
 80a9972:	dd13      	ble.n	80a999c <mbedtls_mpi_sub_mpi+0x3a>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 80a9974:	4611      	mov	r1, r2
 80a9976:	4638      	mov	r0, r7
 80a9978:	f7ff fe42 	bl	80a9600 <mbedtls_mpi_cmp_abs>
 80a997c:	2800      	cmp	r0, #0
 80a997e:	db05      	blt.n	80a998c <mbedtls_mpi_sub_mpi+0x2a>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 80a9980:	4632      	mov	r2, r6
 80a9982:	4639      	mov	r1, r7
 80a9984:	4628      	mov	r0, r5
 80a9986:	f7ff ff8b 	bl	80a98a0 <mbedtls_mpi_sub_abs>
 80a998a:	e009      	b.n	80a99a0 <mbedtls_mpi_sub_mpi+0x3e>
            X->s =  s;
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 80a998c:	463a      	mov	r2, r7
 80a998e:	4631      	mov	r1, r6
 80a9990:	4628      	mov	r0, r5
 80a9992:	f7ff ff85 	bl	80a98a0 <mbedtls_mpi_sub_abs>
 80a9996:	b928      	cbnz	r0, 80a99a4 <mbedtls_mpi_sub_mpi+0x42>
            X->s = -s;
 80a9998:	4264      	negs	r4, r4
 80a999a:	e002      	b.n	80a99a2 <mbedtls_mpi_sub_mpi+0x40>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 80a999c:	f7ff ff26 	bl	80a97ec <mbedtls_mpi_add_abs>
 80a99a0:	b900      	cbnz	r0, 80a99a4 <mbedtls_mpi_sub_mpi+0x42>
        X->s = s;
 80a99a2:	602c      	str	r4, [r5, #0]
    }

cleanup:

    return( ret );
}
 80a99a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a99a6 <mbedtls_mpi_add_int>:

/*
 * Signed addition: X = A + b
 */
int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 80a99a6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
 80a99a8:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 80a99ac:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
 80a99b0:	2a00      	cmp	r2, #0
int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
 80a99b2:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
 80a99b4:	bfb4      	ite	lt
 80a99b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80a99ba:	2301      	movge	r3, #1
 80a99bc:	9301      	str	r3, [sp, #4]
    _B.n = 1;
    _B.p = p;

    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 80a99be:	aa01      	add	r2, sp, #4
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
    _B.s = ( b < 0 ) ? -1 : 1;
    _B.n = 1;
 80a99c0:	2301      	movs	r3, #1
 80a99c2:	9302      	str	r3, [sp, #8]
    _B.p = p;
 80a99c4:	f8cd d00c 	str.w	sp, [sp, #12]

    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 80a99c8:	f7ff ffaa 	bl	80a9920 <mbedtls_mpi_add_mpi>
}
 80a99cc:	b005      	add	sp, #20
 80a99ce:	f85d fb04 	ldr.w	pc, [sp], #4

080a99d2 <mbedtls_mpi_sub_int>:

/*
 * Signed subtraction: X = A - b
 */
int mbedtls_mpi_sub_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 80a99d2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
 80a99d4:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 80a99d8:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
 80a99dc:	2a00      	cmp	r2, #0
int mbedtls_mpi_sub_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
 80a99de:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
 80a99e0:	bfb4      	ite	lt
 80a99e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80a99e6:	2301      	movge	r3, #1
 80a99e8:	9301      	str	r3, [sp, #4]
    _B.n = 1;
    _B.p = p;

    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 80a99ea:	aa01      	add	r2, sp, #4
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    p[0] = ( b < 0 ) ? -b : b;
    _B.s = ( b < 0 ) ? -1 : 1;
    _B.n = 1;
 80a99ec:	2301      	movs	r3, #1
 80a99ee:	9302      	str	r3, [sp, #8]
    _B.p = p;
 80a99f0:	f8cd d00c 	str.w	sp, [sp, #12]

    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 80a99f4:	f7ff ffb5 	bl	80a9962 <mbedtls_mpi_sub_mpi>
}
 80a99f8:	b005      	add	sp, #20
 80a99fa:	f85d fb04 	ldr.w	pc, [sp], #4

080a99fe <mbedtls_mpi_mul_mpi>:

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80a99fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 80a9a02:	2300      	movs	r3, #0

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80a9a04:	b086      	sub	sp, #24
 80a9a06:	4615      	mov	r5, r2
    size_t i, j;
    mbedtls_mpi TA, TB;

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 80a9a08:	4288      	cmp	r0, r1
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 80a9a0a:	f04f 0201 	mov.w	r2, #1

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80a9a0e:	4681      	mov	r9, r0
 80a9a10:	460e      	mov	r6, r1
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 80a9a12:	e88d 000c 	stmia.w	sp, {r2, r3}
    X->p = NULL;
 80a9a16:	9302      	str	r3, [sp, #8]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80a9a18:	9203      	str	r2, [sp, #12]
    X->n = 0;
 80a9a1a:	9304      	str	r3, [sp, #16]
    X->p = NULL;
 80a9a1c:	9305      	str	r3, [sp, #20]
    size_t i, j;
    mbedtls_mpi TA, TB;

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 80a9a1e:	d106      	bne.n	80a9a2e <mbedtls_mpi_mul_mpi+0x30>
 80a9a20:	4668      	mov	r0, sp
 80a9a22:	f7ff fc6c 	bl	80a92fe <mbedtls_mpi_copy>
 80a9a26:	4604      	mov	r4, r0
 80a9a28:	2800      	cmp	r0, #0
 80a9a2a:	d14d      	bne.n	80a9ac8 <mbedtls_mpi_mul_mpi+0xca>
 80a9a2c:	466e      	mov	r6, sp
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 80a9a2e:	45a9      	cmp	r9, r5
 80a9a30:	d107      	bne.n	80a9a42 <mbedtls_mpi_mul_mpi+0x44>
 80a9a32:	4649      	mov	r1, r9
 80a9a34:	a803      	add	r0, sp, #12
 80a9a36:	f7ff fc62 	bl	80a92fe <mbedtls_mpi_copy>
 80a9a3a:	4604      	mov	r4, r0
 80a9a3c:	2800      	cmp	r0, #0
 80a9a3e:	d143      	bne.n	80a9ac8 <mbedtls_mpi_mul_mpi+0xca>
 80a9a40:	ad03      	add	r5, sp, #12

    for( i = A->n; i > 0; i-- )
 80a9a42:	f8d6 a004 	ldr.w	sl, [r6, #4]
 80a9a46:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
 80a9a4a:	3b01      	subs	r3, #1
 80a9a4c:	009b      	lsls	r3, r3, #2
 80a9a4e:	f1ba 0f00 	cmp.w	sl, #0
 80a9a52:	d006      	beq.n	80a9a62 <mbedtls_mpi_mul_mpi+0x64>
        if( A->p[i - 1] != 0 )
 80a9a54:	68b2      	ldr	r2, [r6, #8]
 80a9a56:	58d2      	ldr	r2, [r2, r3]
 80a9a58:	3b04      	subs	r3, #4
 80a9a5a:	b912      	cbnz	r2, 80a9a62 <mbedtls_mpi_mul_mpi+0x64>
    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }

    for( i = A->n; i > 0; i-- )
 80a9a5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 80a9a60:	e7f5      	b.n	80a9a4e <mbedtls_mpi_mul_mpi+0x50>
        if( A->p[i - 1] != 0 )
            break;

    for( j = B->n; j > 0; j-- )
 80a9a62:	686f      	ldr	r7, [r5, #4]
 80a9a64:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
 80a9a68:	3b01      	subs	r3, #1
 80a9a6a:	009b      	lsls	r3, r3, #2
 80a9a6c:	b12f      	cbz	r7, 80a9a7a <mbedtls_mpi_mul_mpi+0x7c>
        if( B->p[j - 1] != 0 )
 80a9a6e:	68aa      	ldr	r2, [r5, #8]
 80a9a70:	58d2      	ldr	r2, [r2, r3]
 80a9a72:	3b04      	subs	r3, #4
 80a9a74:	b90a      	cbnz	r2, 80a9a7a <mbedtls_mpi_mul_mpi+0x7c>

    for( i = A->n; i > 0; i-- )
        if( A->p[i - 1] != 0 )
            break;

    for( j = B->n; j > 0; j-- )
 80a9a76:	3f01      	subs	r7, #1
 80a9a78:	e7f8      	b.n	80a9a6c <mbedtls_mpi_mul_mpi+0x6e>
        if( B->p[j - 1] != 0 )
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
 80a9a7a:	eb0a 0107 	add.w	r1, sl, r7
 80a9a7e:	4648      	mov	r0, r9
 80a9a80:	f7ff fc11 	bl	80a92a6 <mbedtls_mpi_grow>
 80a9a84:	4604      	mov	r4, r0
 80a9a86:	b9f8      	cbnz	r0, 80a9ac8 <mbedtls_mpi_mul_mpi+0xca>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 80a9a88:	4601      	mov	r1, r0
 80a9a8a:	4648      	mov	r0, r9
 80a9a8c:	f7ff fc61 	bl	80a9352 <mbedtls_mpi_lset>
 80a9a90:	4604      	mov	r4, r0
 80a9a92:	b9c8      	cbnz	r0, 80a9ac8 <mbedtls_mpi_mul_mpi+0xca>
 80a9a94:	f107 4880 	add.w	r8, r7, #1073741824	; 0x40000000
 80a9a98:	f108 38ff 	add.w	r8, r8, #4294967295
 80a9a9c:	ea4f 0888 	mov.w	r8, r8, lsl #2

    for( i++; j > 0; j-- )
 80a9aa0:	b16f      	cbz	r7, 80a9abe <mbedtls_mpi_mul_mpi+0xc0>
        mpi_mul_hlp( i - 1, A->p, X->p + j - 1, B->p[j - 1] );
 80a9aa2:	68ab      	ldr	r3, [r5, #8]
 80a9aa4:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80a9aa8:	f853 3008 	ldr.w	r3, [r3, r8]
 80a9aac:	4442      	add	r2, r8
 80a9aae:	68b1      	ldr	r1, [r6, #8]
 80a9ab0:	4650      	mov	r0, sl
 80a9ab2:	f7ff fa0f 	bl	80a8ed4 <_ZL11mpi_mul_hlpjPmS_m>
            break;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );

    for( i++; j > 0; j-- )
 80a9ab6:	3f01      	subs	r7, #1
 80a9ab8:	f1a8 0804 	sub.w	r8, r8, #4
 80a9abc:	e7f0      	b.n	80a9aa0 <mbedtls_mpi_mul_mpi+0xa2>
        mpi_mul_hlp( i - 1, A->p, X->p + j - 1, B->p[j - 1] );

    X->s = A->s * B->s;
 80a9abe:	6832      	ldr	r2, [r6, #0]
 80a9ac0:	682b      	ldr	r3, [r5, #0]
 80a9ac2:	4353      	muls	r3, r2
 80a9ac4:	f8c9 3000 	str.w	r3, [r9]

cleanup:

    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
 80a9ac8:	a803      	add	r0, sp, #12
 80a9aca:	f7ff fbd6 	bl	80a927a <mbedtls_mpi_free>
 80a9ace:	4668      	mov	r0, sp
 80a9ad0:	f7ff fbd3 	bl	80a927a <mbedtls_mpi_free>

    return( ret );
}
 80a9ad4:	4620      	mov	r0, r4
 80a9ad6:	b006      	add	sp, #24
 80a9ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a9adc <mbedtls_mpi_mul_int>:

/*
 * Baseline multiplication: X = A * b
 */
int mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b )
{
 80a9adc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    _B.s = 1;
 80a9ade:	2301      	movs	r3, #1
    _B.n = 1;
    _B.p = p;
    p[0] = b;
 80a9ae0:	9200      	str	r2, [sp, #0]

    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 80a9ae2:	aa01      	add	r2, sp, #4
int mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b )
{
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];

    _B.s = 1;
 80a9ae4:	9301      	str	r3, [sp, #4]
    _B.n = 1;
 80a9ae6:	9302      	str	r3, [sp, #8]
    _B.p = p;
 80a9ae8:	f8cd d00c 	str.w	sp, [sp, #12]
    p[0] = b;

    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 80a9aec:	f7ff ff87 	bl	80a99fe <mbedtls_mpi_mul_mpi>
}
 80a9af0:	b005      	add	sp, #20
 80a9af2:	f85d fb04 	ldr.w	pc, [sp], #4

080a9af6 <mbedtls_mpi_div_mpi>:

/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80a9af6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a9afa:	b09b      	sub	sp, #108	; 0x6c
 80a9afc:	9001      	str	r0, [sp, #4]
 80a9afe:	460f      	mov	r7, r1
    int ret;
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 80a9b00:	4618      	mov	r0, r3
 80a9b02:	2100      	movs	r1, #0

/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80a9b04:	4690      	mov	r8, r2
 80a9b06:	9304      	str	r3, [sp, #16]
    int ret;
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 80a9b08:	f7ff fe5a 	bl	80a97c0 <mbedtls_mpi_cmp_int>
 80a9b0c:	2800      	cmp	r0, #0
 80a9b0e:	f000 81ad 	beq.w	80a9e6c <mbedtls_mpi_div_mpi+0x376>
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 80a9b12:	2400      	movs	r4, #0
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80a9b14:	2501      	movs	r5, #1
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 80a9b16:	9904      	ldr	r1, [sp, #16]
 80a9b18:	4640      	mov	r0, r8
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80a9b1a:	950b      	str	r5, [sp, #44]	; 0x2c
    X->n = 0;
 80a9b1c:	940c      	str	r4, [sp, #48]	; 0x30
    X->p = NULL;
 80a9b1e:	940d      	str	r4, [sp, #52]	; 0x34
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80a9b20:	950e      	str	r5, [sp, #56]	; 0x38
    X->n = 0;
 80a9b22:	940f      	str	r4, [sp, #60]	; 0x3c
    X->p = NULL;
 80a9b24:	9410      	str	r4, [sp, #64]	; 0x40
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80a9b26:	9511      	str	r5, [sp, #68]	; 0x44
    X->n = 0;
 80a9b28:	9412      	str	r4, [sp, #72]	; 0x48
    X->p = NULL;
 80a9b2a:	9413      	str	r4, [sp, #76]	; 0x4c
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80a9b2c:	9514      	str	r5, [sp, #80]	; 0x50
    X->n = 0;
 80a9b2e:	9415      	str	r4, [sp, #84]	; 0x54
    X->p = NULL;
 80a9b30:	9416      	str	r4, [sp, #88]	; 0x58
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80a9b32:	9517      	str	r5, [sp, #92]	; 0x5c
    X->n = 0;
 80a9b34:	9418      	str	r4, [sp, #96]	; 0x60
    X->p = NULL;
 80a9b36:	9419      	str	r4, [sp, #100]	; 0x64
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 80a9b38:	f7ff fd62 	bl	80a9600 <mbedtls_mpi_cmp_abs>
 80a9b3c:	42a0      	cmp	r0, r4
 80a9b3e:	da16      	bge.n	80a9b6e <mbedtls_mpi_div_mpi+0x78>
    {
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 80a9b40:	9b01      	ldr	r3, [sp, #4]
 80a9b42:	b90b      	cbnz	r3, 80a9b48 <mbedtls_mpi_div_mpi+0x52>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 80a9b44:	b94f      	cbnz	r7, 80a9b5a <mbedtls_mpi_div_mpi+0x64>
 80a9b46:	e010      	b.n	80a9b6a <mbedtls_mpi_div_mpi+0x74>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    {
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 80a9b48:	4621      	mov	r1, r4
 80a9b4a:	9801      	ldr	r0, [sp, #4]
 80a9b4c:	f7ff fc01 	bl	80a9352 <mbedtls_mpi_lset>
 80a9b50:	4604      	mov	r4, r0
 80a9b52:	2800      	cmp	r0, #0
 80a9b54:	f040 8179 	bne.w	80a9e4a <mbedtls_mpi_div_mpi+0x354>
 80a9b58:	e7f4      	b.n	80a9b44 <mbedtls_mpi_div_mpi+0x4e>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 80a9b5a:	4641      	mov	r1, r8
 80a9b5c:	4638      	mov	r0, r7
 80a9b5e:	f7ff fbce 	bl	80a92fe <mbedtls_mpi_copy>
 80a9b62:	4604      	mov	r4, r0
 80a9b64:	2800      	cmp	r0, #0
 80a9b66:	f040 8170 	bne.w	80a9e4a <mbedtls_mpi_div_mpi+0x354>
        return( 0 );
 80a9b6a:	2000      	movs	r0, #0
 80a9b6c:	e180      	b.n	80a9e70 <mbedtls_mpi_div_mpi+0x37a>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
 80a9b6e:	4641      	mov	r1, r8
 80a9b70:	a80b      	add	r0, sp, #44	; 0x2c
 80a9b72:	f7ff fbc4 	bl	80a92fe <mbedtls_mpi_copy>
 80a9b76:	4604      	mov	r4, r0
 80a9b78:	2800      	cmp	r0, #0
 80a9b7a:	f040 8166 	bne.w	80a9e4a <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
 80a9b7e:	ae0e      	add	r6, sp, #56	; 0x38
 80a9b80:	9904      	ldr	r1, [sp, #16]
 80a9b82:	4630      	mov	r0, r6
 80a9b84:	f7ff fbbb 	bl	80a92fe <mbedtls_mpi_copy>
 80a9b88:	4604      	mov	r4, r0
 80a9b8a:	2800      	cmp	r0, #0
 80a9b8c:	f040 815d 	bne.w	80a9e4a <mbedtls_mpi_div_mpi+0x354>
    X.s = Y.s = 1;

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 80a9b90:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80a9b94:	a811      	add	r0, sp, #68	; 0x44
 80a9b96:	3102      	adds	r1, #2
        return( 0 );
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    X.s = Y.s = 1;
 80a9b98:	950e      	str	r5, [sp, #56]	; 0x38
 80a9b9a:	950b      	str	r5, [sp, #44]	; 0x2c

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 80a9b9c:	f7ff fb83 	bl	80a92a6 <mbedtls_mpi_grow>
 80a9ba0:	4604      	mov	r4, r0
 80a9ba2:	2800      	cmp	r0, #0
 80a9ba4:	f040 8151 	bne.w	80a9e4a <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
 80a9ba8:	4601      	mov	r1, r0
 80a9baa:	a811      	add	r0, sp, #68	; 0x44
 80a9bac:	f7ff fbd1 	bl	80a9352 <mbedtls_mpi_lset>
 80a9bb0:	4604      	mov	r4, r0
 80a9bb2:	2800      	cmp	r0, #0
 80a9bb4:	f040 8149 	bne.w	80a9e4a <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
 80a9bb8:	2102      	movs	r1, #2
 80a9bba:	a814      	add	r0, sp, #80	; 0x50
 80a9bbc:	f7ff fb73 	bl	80a92a6 <mbedtls_mpi_grow>
 80a9bc0:	4604      	mov	r4, r0
 80a9bc2:	2800      	cmp	r0, #0
 80a9bc4:	f040 8141 	bne.w	80a9e4a <mbedtls_mpi_div_mpi+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
 80a9bc8:	2103      	movs	r1, #3
 80a9bca:	a817      	add	r0, sp, #92	; 0x5c
 80a9bcc:	f7ff fb6b 	bl	80a92a6 <mbedtls_mpi_grow>
 80a9bd0:	4604      	mov	r4, r0
 80a9bd2:	2800      	cmp	r0, #0
 80a9bd4:	f040 8139 	bne.w	80a9e4a <mbedtls_mpi_div_mpi+0x354>

    k = mbedtls_mpi_bitlen( &Y ) % biL;
 80a9bd8:	4630      	mov	r0, r6
 80a9bda:	f7ff fc00 	bl	80a93de <mbedtls_mpi_bitlen>
 80a9bde:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
 80a9be2:	281f      	cmp	r0, #31
 80a9be4:	d013      	beq.n	80a9c0e <mbedtls_mpi_div_mpi+0x118>
    {
        k = biL - 1 - k;
 80a9be6:	f1c0 031f 	rsb	r3, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 80a9bea:	4619      	mov	r1, r3
 80a9bec:	a80b      	add	r0, sp, #44	; 0x2c
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );

    k = mbedtls_mpi_bitlen( &Y ) % biL;
    if( k < biL - 1 )
    {
        k = biL - 1 - k;
 80a9bee:	9303      	str	r3, [sp, #12]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 80a9bf0:	f7ff fc73 	bl	80a94da <mbedtls_mpi_shift_l>
 80a9bf4:	4604      	mov	r4, r0
 80a9bf6:	2800      	cmp	r0, #0
 80a9bf8:	f040 8127 	bne.w	80a9e4a <mbedtls_mpi_div_mpi+0x354>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
 80a9bfc:	9903      	ldr	r1, [sp, #12]
 80a9bfe:	4630      	mov	r0, r6
 80a9c00:	f7ff fc6b 	bl	80a94da <mbedtls_mpi_shift_l>
 80a9c04:	4604      	mov	r4, r0
 80a9c06:	2800      	cmp	r0, #0
 80a9c08:	f040 811f 	bne.w	80a9e4a <mbedtls_mpi_div_mpi+0x354>
 80a9c0c:	e000      	b.n	80a9c10 <mbedtls_mpi_div_mpi+0x11a>
    }
    else k = 0;
 80a9c0e:	9403      	str	r4, [sp, #12]

    n = X.n - 1;
 80a9c10:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    t = Y.n - 1;
 80a9c12:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    }
    else k = 0;

    n = X.n - 1;
 80a9c16:	f105 39ff 	add.w	r9, r5, #4294967295
    t = Y.n - 1;
 80a9c1a:	f10a 33ff 	add.w	r3, sl, #4294967295
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 80a9c1e:	ebc3 0b09 	rsb	fp, r3, r9
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    }
    else k = 0;

    n = X.n - 1;
    t = Y.n - 1;
 80a9c22:	9300      	str	r3, [sp, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 80a9c24:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80a9c28:	4619      	mov	r1, r3
 80a9c2a:	4630      	mov	r0, r6
 80a9c2c:	9302      	str	r3, [sp, #8]
 80a9c2e:	f7ff fc54 	bl	80a94da <mbedtls_mpi_shift_l>
 80a9c32:	4604      	mov	r4, r0
 80a9c34:	2800      	cmp	r0, #0
 80a9c36:	f040 8108 	bne.w	80a9e4a <mbedtls_mpi_div_mpi+0x354>

    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
    {
        Z.p[n - t]++;
 80a9c3a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2

    n = X.n - 1;
    t = Y.n - 1;
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );

    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 80a9c3e:	4631      	mov	r1, r6
 80a9c40:	a80b      	add	r0, sp, #44	; 0x2c
 80a9c42:	f7ff fd78 	bl	80a9736 <mbedtls_mpi_cmp_mpi>
 80a9c46:	2800      	cmp	r0, #0
 80a9c48:	db0e      	blt.n	80a9c68 <mbedtls_mpi_div_mpi+0x172>
    {
        Z.p[n - t]++;
 80a9c4a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80a9c4c:	f851 200b 	ldr.w	r2, [r1, fp]
 80a9c50:	3201      	adds	r2, #1
 80a9c52:	f841 200b 	str.w	r2, [r1, fp]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
 80a9c56:	a90b      	add	r1, sp, #44	; 0x2c
 80a9c58:	4632      	mov	r2, r6
 80a9c5a:	4608      	mov	r0, r1
 80a9c5c:	f7ff fe81 	bl	80a9962 <mbedtls_mpi_sub_mpi>
 80a9c60:	4604      	mov	r4, r0
 80a9c62:	2800      	cmp	r0, #0
 80a9c64:	d0eb      	beq.n	80a9c3e <mbedtls_mpi_div_mpi+0x148>
 80a9c66:	e0f0      	b.n	80a9e4a <mbedtls_mpi_div_mpi+0x354>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
 80a9c68:	9902      	ldr	r1, [sp, #8]
 80a9c6a:	4630      	mov	r0, r6
 80a9c6c:	f7ff fc84 	bl	80a9578 <mbedtls_mpi_shift_r>
 80a9c70:	4604      	mov	r4, r0
 80a9c72:	2800      	cmp	r0, #0
 80a9c74:	f040 80e9 	bne.w	80a9e4a <mbedtls_mpi_div_mpi+0x354>

    for( i = n; i > t ; i-- )
    {
        if( X.p[i] >= Y.p[t] )
 80a9c78:	9b00      	ldr	r3, [sp, #0]
 80a9c7a:	f105 4680 	add.w	r6, r5, #1073741824	; 0x40000000
 80a9c7e:	009b      	lsls	r3, r3, #2
 80a9c80:	9305      	str	r3, [sp, #20]
        do
        {
            Z.p[i - t - 1]--;

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 80a9c82:	3b04      	subs	r3, #4
 80a9c84:	9308      	str	r3, [sp, #32]
 80a9c86:	f105 6300 	add.w	r3, r5, #134217728	; 0x8000000
 80a9c8a:	3b01      	subs	r3, #1
 80a9c8c:	3e01      	subs	r6, #1
 80a9c8e:	ebca 0606 	rsb	r6, sl, r6
 80a9c92:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80a9c96:	ebca 0a03 	rsb	sl, sl, r3
 80a9c9a:	ea4f 134a 	mov.w	r3, sl, lsl #5
 80a9c9e:	3d02      	subs	r5, #2
 80a9ca0:	00b6      	lsls	r6, r6, #2
 80a9ca2:	9302      	str	r3, [sp, #8]
 80a9ca4:	00ad      	lsls	r5, r5, #2
        Z.p[n - t]++;
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );

    for( i = n; i > t ; i-- )
 80a9ca6:	9b00      	ldr	r3, [sp, #0]
 80a9ca8:	4599      	cmp	r9, r3
 80a9caa:	f240 80a8 	bls.w	80a9dfe <mbedtls_mpi_div_mpi+0x308>
    {
        if( X.p[i] >= Y.p[t] )
 80a9cae:	9805      	ldr	r0, [sp, #20]
 80a9cb0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a9cb2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80a9cb4:	1d2b      	adds	r3, r5, #4
 80a9cb6:	5812      	ldr	r2, [r2, r0]
 80a9cb8:	9309      	str	r3, [sp, #36]	; 0x24
 80a9cba:	58cb      	ldr	r3, [r1, r3]
 80a9cbc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80a9cbe:	4293      	cmp	r3, r2
 80a9cc0:	d303      	bcc.n	80a9cca <mbedtls_mpi_div_mpi+0x1d4>
            Z.p[i - t - 1] = ~0;
 80a9cc2:	f04f 33ff 	mov.w	r3, #4294967295
 80a9cc6:	5183      	str	r3, [r0, r6]
 80a9cc8:	e01b      	b.n	80a9d02 <mbedtls_mpi_div_mpi+0x20c>
        else
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 80a9cca:	eb00 0a06 	add.w	sl, r0, r6
 80a9cce:	5948      	ldr	r0, [r1, r5]
#endif

    /*
     * Check for overflow
     */
    if( 0 == d || u1 >= d )
 80a9cd0:	b19a      	cbz	r2, 80a9cfa <mbedtls_mpi_div_mpi+0x204>

        return ( ~0 );
    }

#if defined(MBEDTLS_HAVE_UDBL)
    dividend  = (mbedtls_t_udbl) u1 << biL;
 80a9cd2:	9307      	str	r3, [sp, #28]
 80a9cd4:	2300      	movs	r3, #0
 80a9cd6:	9306      	str	r3, [sp, #24]
    dividend |= (mbedtls_t_udbl) u0;
    quotient = dividend / d;
 80a9cd8:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 80a9cdc:	ea4b 0b00 	orr.w	fp, fp, r0
 80a9ce0:	4658      	mov	r0, fp
 80a9ce2:	4661      	mov	r1, ip
 80a9ce4:	f005 f850 	bl	80aed88 <__aeabi_uldivmod>
        quotient = ( (mbedtls_t_udbl) 1 << biL ) - 1;

    if( r != NULL )
        *r = (mbedtls_mpi_uint)( dividend - (quotient * d ) );

    return (mbedtls_mpi_uint) quotient;
 80a9ce8:	2300      	movs	r3, #0
 80a9cea:	f04f 32ff 	mov.w	r2, #4294967295
 80a9cee:	428b      	cmp	r3, r1
 80a9cf0:	bf08      	it	eq
 80a9cf2:	4282      	cmpeq	r2, r0
 80a9cf4:	d203      	bcs.n	80a9cfe <mbedtls_mpi_div_mpi+0x208>
 80a9cf6:	4610      	mov	r0, r2
 80a9cf8:	e001      	b.n	80a9cfe <mbedtls_mpi_div_mpi+0x208>
     */
    if( 0 == d || u1 >= d )
    {
        if (r != NULL) *r = ~0;

        return ( ~0 );
 80a9cfa:	f04f 30ff 	mov.w	r0, #4294967295
        if( X.p[i] >= Y.p[t] )
            Z.p[i - t - 1] = ~0;
        else
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
                                                            Y.p[t], NULL);
 80a9cfe:	f8ca 0000 	str.w	r0, [sl]
        }

        Z.p[i - t - 1]++;
 80a9d02:	9a13      	ldr	r2, [sp, #76]	; 0x4c
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 80a9d04:	f1a5 0a04 	sub.w	sl, r5, #4
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
                                                            Y.p[t], NULL);
        }

        Z.p[i - t - 1]++;
 80a9d08:	5993      	ldr	r3, [r2, r6]
 80a9d0a:	3301      	adds	r3, #1
 80a9d0c:	5193      	str	r3, [r2, r6]
        do
        {
            Z.p[i - t - 1]--;
 80a9d0e:	9a13      	ldr	r2, [sp, #76]	; 0x4c

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 80a9d10:	2100      	movs	r1, #0
        }

        Z.p[i - t - 1]++;
        do
        {
            Z.p[i - t - 1]--;
 80a9d12:	5993      	ldr	r3, [r2, r6]

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 80a9d14:	a814      	add	r0, sp, #80	; 0x50
        }

        Z.p[i - t - 1]++;
        do
        {
            Z.p[i - t - 1]--;
 80a9d16:	3b01      	subs	r3, #1
 80a9d18:	5193      	str	r3, [r2, r6]

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 80a9d1a:	f7ff fb1a 	bl	80a9352 <mbedtls_mpi_lset>
 80a9d1e:	2800      	cmp	r0, #0
 80a9d20:	f040 8090 	bne.w	80a9e44 <mbedtls_mpi_div_mpi+0x34e>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 80a9d24:	9b00      	ldr	r3, [sp, #0]
 80a9d26:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80a9d28:	b11b      	cbz	r3, 80a9d32 <mbedtls_mpi_div_mpi+0x23c>
 80a9d2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80a9d2c:	9908      	ldr	r1, [sp, #32]
 80a9d2e:	585b      	ldr	r3, [r3, r1]
 80a9d30:	e000      	b.n	80a9d34 <mbedtls_mpi_div_mpi+0x23e>
 80a9d32:	9b00      	ldr	r3, [sp, #0]
 80a9d34:	6013      	str	r3, [r2, #0]
            T1.p[1] = Y.p[t];
 80a9d36:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80a9d38:	9a05      	ldr	r2, [sp, #20]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 80a9d3a:	a914      	add	r1, sp, #80	; 0x50
        {
            Z.p[i - t - 1]--;

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
 80a9d3c:	589a      	ldr	r2, [r3, r2]
 80a9d3e:	9b16      	ldr	r3, [sp, #88]	; 0x58
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 80a9d40:	4608      	mov	r0, r1
        {
            Z.p[i - t - 1]--;

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
 80a9d42:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 80a9d44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a9d46:	599a      	ldr	r2, [r3, r6]
 80a9d48:	f7ff fec8 	bl	80a9adc <mbedtls_mpi_mul_int>
 80a9d4c:	4601      	mov	r1, r0
 80a9d4e:	2800      	cmp	r0, #0
 80a9d50:	d17a      	bne.n	80a9e48 <mbedtls_mpi_div_mpi+0x352>

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
 80a9d52:	a817      	add	r0, sp, #92	; 0x5c
 80a9d54:	f7ff fafd 	bl	80a9352 <mbedtls_mpi_lset>
 80a9d58:	2800      	cmp	r0, #0
 80a9d5a:	d173      	bne.n	80a9e44 <mbedtls_mpi_div_mpi+0x34e>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 80a9d5c:	f1b9 0f01 	cmp.w	r9, #1
 80a9d60:	bf18      	it	ne
 80a9d62:	9a0d      	ldrne	r2, [sp, #52]	; 0x34
 80a9d64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a9d66:	bf18      	it	ne
 80a9d68:	f852 000a 	ldrne.w	r0, [r2, sl]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
            T2.p[2] = X.p[i];
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 80a9d6c:	a917      	add	r1, sp, #92	; 0x5c
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
            T1.p[1] = Y.p[t];
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 80a9d6e:	6018      	str	r0, [r3, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 80a9d70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            T2.p[2] = X.p[i];
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 80a9d72:	a814      	add	r0, sp, #80	; 0x50
            T1.p[1] = Y.p[t];
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 80a9d74:	595a      	ldr	r2, [r3, r5]
 80a9d76:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a9d78:	605a      	str	r2, [r3, #4]
            T2.p[2] = X.p[i];
 80a9d7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a9d7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a9d7e:	589a      	ldr	r2, [r3, r2]
 80a9d80:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a9d82:	609a      	str	r2, [r3, #8]
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 80a9d84:	f7ff fcd7 	bl	80a9736 <mbedtls_mpi_cmp_mpi>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
                                                            Y.p[t], NULL);
        }

        Z.p[i - t - 1]++;
        do
 80a9d88:	2800      	cmp	r0, #0
 80a9d8a:	dcc0      	bgt.n	80a9d0e <mbedtls_mpi_div_mpi+0x218>
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
            T2.p[2] = X.p[i];
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 80a9d8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a9d8e:	a90e      	add	r1, sp, #56	; 0x38
 80a9d90:	599a      	ldr	r2, [r3, r6]
 80a9d92:	a814      	add	r0, sp, #80	; 0x50
 80a9d94:	f7ff fea2 	bl	80a9adc <mbedtls_mpi_mul_int>
 80a9d98:	2800      	cmp	r0, #0
 80a9d9a:	d153      	bne.n	80a9e44 <mbedtls_mpi_div_mpi+0x34e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 80a9d9c:	9902      	ldr	r1, [sp, #8]
 80a9d9e:	a814      	add	r0, sp, #80	; 0x50
 80a9da0:	f7ff fb9b 	bl	80a94da <mbedtls_mpi_shift_l>
 80a9da4:	2800      	cmp	r0, #0
 80a9da6:	d14d      	bne.n	80a9e44 <mbedtls_mpi_div_mpi+0x34e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 80a9da8:	a90b      	add	r1, sp, #44	; 0x2c
 80a9daa:	4608      	mov	r0, r1
 80a9dac:	aa14      	add	r2, sp, #80	; 0x50
 80a9dae:	f7ff fdd8 	bl	80a9962 <mbedtls_mpi_sub_mpi>
 80a9db2:	4601      	mov	r1, r0
 80a9db4:	2800      	cmp	r0, #0
 80a9db6:	d147      	bne.n	80a9e48 <mbedtls_mpi_div_mpi+0x352>

        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
 80a9db8:	a80b      	add	r0, sp, #44	; 0x2c
 80a9dba:	f7ff fd01 	bl	80a97c0 <mbedtls_mpi_cmp_int>
 80a9dbe:	2800      	cmp	r0, #0
 80a9dc0:	da15      	bge.n	80a9dee <mbedtls_mpi_div_mpi+0x2f8>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 80a9dc2:	a90e      	add	r1, sp, #56	; 0x38
 80a9dc4:	a814      	add	r0, sp, #80	; 0x50
 80a9dc6:	f7ff fa9a 	bl	80a92fe <mbedtls_mpi_copy>
 80a9dca:	2800      	cmp	r0, #0
 80a9dcc:	d13a      	bne.n	80a9e44 <mbedtls_mpi_div_mpi+0x34e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 80a9dce:	9902      	ldr	r1, [sp, #8]
 80a9dd0:	a814      	add	r0, sp, #80	; 0x50
 80a9dd2:	f7ff fb82 	bl	80a94da <mbedtls_mpi_shift_l>
 80a9dd6:	2800      	cmp	r0, #0
 80a9dd8:	d134      	bne.n	80a9e44 <mbedtls_mpi_div_mpi+0x34e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 80a9dda:	a90b      	add	r1, sp, #44	; 0x2c
 80a9ddc:	aa14      	add	r2, sp, #80	; 0x50
 80a9dde:	4608      	mov	r0, r1
 80a9de0:	f7ff fd9e 	bl	80a9920 <mbedtls_mpi_add_mpi>
 80a9de4:	bb70      	cbnz	r0, 80a9e44 <mbedtls_mpi_div_mpi+0x34e>
            Z.p[i - t - 1]--;
 80a9de6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80a9de8:	5993      	ldr	r3, [r2, r6]
 80a9dea:	3b01      	subs	r3, #1
 80a9dec:	5193      	str	r3, [r2, r6]
 80a9dee:	9b02      	ldr	r3, [sp, #8]
        Z.p[n - t]++;
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );

    for( i = n; i > t ; i-- )
 80a9df0:	f109 39ff 	add.w	r9, r9, #4294967295
 80a9df4:	3b20      	subs	r3, #32
 80a9df6:	3e04      	subs	r6, #4
 80a9df8:	9302      	str	r3, [sp, #8]
 80a9dfa:	3d04      	subs	r5, #4
 80a9dfc:	e753      	b.n	80a9ca6 <mbedtls_mpi_div_mpi+0x1b0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
            Z.p[i - t - 1]--;
        }
    }

    if( Q != NULL )
 80a9dfe:	9b01      	ldr	r3, [sp, #4]
 80a9e00:	b15b      	cbz	r3, 80a9e1a <mbedtls_mpi_div_mpi+0x324>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 80a9e02:	a911      	add	r1, sp, #68	; 0x44
 80a9e04:	4618      	mov	r0, r3
 80a9e06:	f7ff fa7a 	bl	80a92fe <mbedtls_mpi_copy>
 80a9e0a:	b9d8      	cbnz	r0, 80a9e44 <mbedtls_mpi_div_mpi+0x34e>
        Q->s = A->s * B->s;
 80a9e0c:	9b04      	ldr	r3, [sp, #16]
 80a9e0e:	f8d8 2000 	ldr.w	r2, [r8]
 80a9e12:	681b      	ldr	r3, [r3, #0]
 80a9e14:	4353      	muls	r3, r2
 80a9e16:	9a01      	ldr	r2, [sp, #4]
 80a9e18:	6013      	str	r3, [r2, #0]
    }

    if( R != NULL )
 80a9e1a:	b1b7      	cbz	r7, 80a9e4a <mbedtls_mpi_div_mpi+0x354>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
 80a9e1c:	9903      	ldr	r1, [sp, #12]
 80a9e1e:	a80b      	add	r0, sp, #44	; 0x2c
 80a9e20:	f7ff fbaa 	bl	80a9578 <mbedtls_mpi_shift_r>
 80a9e24:	b970      	cbnz	r0, 80a9e44 <mbedtls_mpi_div_mpi+0x34e>
        X.s = A->s;
 80a9e26:	f8d8 3000 	ldr.w	r3, [r8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 80a9e2a:	a90b      	add	r1, sp, #44	; 0x2c
 80a9e2c:	4638      	mov	r0, r7
    }

    if( R != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
        X.s = A->s;
 80a9e2e:	930b      	str	r3, [sp, #44]	; 0x2c
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 80a9e30:	f7ff fa65 	bl	80a92fe <mbedtls_mpi_copy>
 80a9e34:	4601      	mov	r1, r0
 80a9e36:	b938      	cbnz	r0, 80a9e48 <mbedtls_mpi_div_mpi+0x352>

        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
 80a9e38:	4638      	mov	r0, r7
 80a9e3a:	f7ff fcc1 	bl	80a97c0 <mbedtls_mpi_cmp_int>
 80a9e3e:	b920      	cbnz	r0, 80a9e4a <mbedtls_mpi_div_mpi+0x354>
            R->s = 1;
 80a9e40:	2301      	movs	r3, #1
 80a9e42:	603b      	str	r3, [r7, #0]
 80a9e44:	4604      	mov	r4, r0
 80a9e46:	e000      	b.n	80a9e4a <mbedtls_mpi_div_mpi+0x354>
 80a9e48:	460c      	mov	r4, r1
    }

cleanup:

    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 80a9e4a:	a80b      	add	r0, sp, #44	; 0x2c
 80a9e4c:	f7ff fa15 	bl	80a927a <mbedtls_mpi_free>
 80a9e50:	a80e      	add	r0, sp, #56	; 0x38
 80a9e52:	f7ff fa12 	bl	80a927a <mbedtls_mpi_free>
 80a9e56:	a811      	add	r0, sp, #68	; 0x44
 80a9e58:	f7ff fa0f 	bl	80a927a <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
 80a9e5c:	a814      	add	r0, sp, #80	; 0x50
 80a9e5e:	f7ff fa0c 	bl	80a927a <mbedtls_mpi_free>
 80a9e62:	a817      	add	r0, sp, #92	; 0x5c
 80a9e64:	f7ff fa09 	bl	80a927a <mbedtls_mpi_free>

    return( ret );
 80a9e68:	4620      	mov	r0, r4
 80a9e6a:	e001      	b.n	80a9e70 <mbedtls_mpi_div_mpi+0x37a>
    int ret;
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
 80a9e6c:	f06f 000b 	mvn.w	r0, #11

    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );

    return( ret );
}
 80a9e70:	b01b      	add	sp, #108	; 0x6c
 80a9e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a9e76 <mbedtls_mpi_mod_mpi>:

/*
 * Modulo: R = A mod B
 */
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80a9e76:	b570      	push	{r4, r5, r6, lr}
 80a9e78:	4604      	mov	r4, r0
 80a9e7a:	460e      	mov	r6, r1
    int ret;

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 80a9e7c:	4610      	mov	r0, r2
 80a9e7e:	2100      	movs	r1, #0

/*
 * Modulo: R = A mod B
 */
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80a9e80:	4615      	mov	r5, r2
    int ret;

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 80a9e82:	f7ff fc9d 	bl	80a97c0 <mbedtls_mpi_cmp_int>
 80a9e86:	2800      	cmp	r0, #0
 80a9e88:	db22      	blt.n	80a9ed0 <mbedtls_mpi_mod_mpi+0x5a>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );

    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
 80a9e8a:	462b      	mov	r3, r5
 80a9e8c:	4632      	mov	r2, r6
 80a9e8e:	4621      	mov	r1, r4
 80a9e90:	2000      	movs	r0, #0
 80a9e92:	f7ff fe30 	bl	80a9af6 <mbedtls_mpi_div_mpi>
 80a9e96:	b9f8      	cbnz	r0, 80a9ed8 <mbedtls_mpi_mod_mpi+0x62>

    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 80a9e98:	2100      	movs	r1, #0
 80a9e9a:	4620      	mov	r0, r4
 80a9e9c:	f7ff fc90 	bl	80a97c0 <mbedtls_mpi_cmp_int>
 80a9ea0:	2800      	cmp	r0, #0
 80a9ea2:	da07      	bge.n	80a9eb4 <mbedtls_mpi_mod_mpi+0x3e>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
 80a9ea4:	462a      	mov	r2, r5
 80a9ea6:	4621      	mov	r1, r4
 80a9ea8:	4620      	mov	r0, r4
 80a9eaa:	f7ff fd39 	bl	80a9920 <mbedtls_mpi_add_mpi>
 80a9eae:	2800      	cmp	r0, #0
 80a9eb0:	d0f2      	beq.n	80a9e98 <mbedtls_mpi_mod_mpi+0x22>
 80a9eb2:	bd70      	pop	{r4, r5, r6, pc}

    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 80a9eb4:	4629      	mov	r1, r5
 80a9eb6:	4620      	mov	r0, r4
 80a9eb8:	f7ff fc3d 	bl	80a9736 <mbedtls_mpi_cmp_mpi>
 80a9ebc:	2800      	cmp	r0, #0
 80a9ebe:	db0a      	blt.n	80a9ed6 <mbedtls_mpi_mod_mpi+0x60>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
 80a9ec0:	462a      	mov	r2, r5
 80a9ec2:	4621      	mov	r1, r4
 80a9ec4:	4620      	mov	r0, r4
 80a9ec6:	f7ff fd4c 	bl	80a9962 <mbedtls_mpi_sub_mpi>
 80a9eca:	2800      	cmp	r0, #0
 80a9ecc:	d0f2      	beq.n	80a9eb4 <mbedtls_mpi_mod_mpi+0x3e>
 80a9ece:	bd70      	pop	{r4, r5, r6, pc}
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
    int ret;

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 80a9ed0:	f06f 0009 	mvn.w	r0, #9
 80a9ed4:	bd70      	pop	{r4, r5, r6, pc}
 80a9ed6:	2000      	movs	r0, #0
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );

cleanup:

    return( ret );
}
 80a9ed8:	bd70      	pop	{r4, r5, r6, pc}

080a9eda <mbedtls_mpi_exp_mod>:

/*
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *E, const mbedtls_mpi *N, mbedtls_mpi *_RR )
{
 80a9eda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a9ede:	4606      	mov	r6, r0
 80a9ee0:	f2ad 6d54 	subw	sp, sp, #1620	; 0x654
 80a9ee4:	460f      	mov	r7, r1
    size_t bufsize, nbits;
    mbedtls_mpi_uint ei, mm, state;
    mbedtls_mpi RR, T, W[ 2 << MBEDTLS_MPI_WINDOW_SIZE ], Apos;
    int neg;

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
 80a9ee6:	4618      	mov	r0, r3
 80a9ee8:	2100      	movs	r1, #0

/*
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *E, const mbedtls_mpi *N, mbedtls_mpi *_RR )
{
 80a9eea:	9202      	str	r2, [sp, #8]
 80a9eec:	461d      	mov	r5, r3
    size_t bufsize, nbits;
    mbedtls_mpi_uint ei, mm, state;
    mbedtls_mpi RR, T, W[ 2 << MBEDTLS_MPI_WINDOW_SIZE ], Apos;
    int neg;

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
 80a9eee:	f7ff fc67 	bl	80a97c0 <mbedtls_mpi_cmp_int>
 80a9ef2:	2800      	cmp	r0, #0
 80a9ef4:	dd05      	ble.n	80a9f02 <mbedtls_mpi_exp_mod+0x28>
 80a9ef6:	68ab      	ldr	r3, [r5, #8]
 80a9ef8:	f8d3 8000 	ldr.w	r8, [r3]
 80a9efc:	f018 0f01 	tst.w	r8, #1
 80a9f00:	d102      	bne.n	80a9f08 <mbedtls_mpi_exp_mod+0x2e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 80a9f02:	f06f 0003 	mvn.w	r0, #3
 80a9f06:	e203      	b.n	80aa310 <mbedtls_mpi_exp_mod+0x436>

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
 80a9f08:	2100      	movs	r1, #0
 80a9f0a:	9802      	ldr	r0, [sp, #8]
 80a9f0c:	f7ff fc58 	bl	80a97c0 <mbedtls_mpi_cmp_int>
 80a9f10:	2800      	cmp	r0, #0
 80a9f12:	dbf6      	blt.n	80a9f02 <mbedtls_mpi_exp_mod+0x28>
{
    mbedtls_mpi_uint x, m0 = N->p[0];
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;
 80a9f14:	f108 0402 	add.w	r4, r8, #2
 80a9f18:	0064      	lsls	r4, r4, #1
 80a9f1a:	f004 0408 	and.w	r4, r4, #8
 80a9f1e:	4444      	add	r4, r8
 80a9f20:	2103      	movs	r1, #3

    for( i = biL; i >= 8; i /= 2 )
        x *= ( 2 - ( m0 * x ) );
 80a9f22:	fb04 f308 	mul.w	r3, r4, r8
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
 80a9f26:	3901      	subs	r1, #1
        x *= ( 2 - ( m0 * x ) );
 80a9f28:	f1c3 0302 	rsb	r3, r3, #2
 80a9f2c:	fb03 f404 	mul.w	r4, r3, r4
    unsigned int i;

    x  = m0;
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
 80a9f30:	d1f7      	bne.n	80a9f22 <mbedtls_mpi_exp_mod+0x48>
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80a9f32:	2301      	movs	r3, #1
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
 80a9f34:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80a9f38:	a814      	add	r0, sp, #80	; 0x50
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80a9f3a:	9308      	str	r3, [sp, #32]
    X->n = 0;
 80a9f3c:	9109      	str	r1, [sp, #36]	; 0x24
    X->p = NULL;
 80a9f3e:	910a      	str	r1, [sp, #40]	; 0x28
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80a9f40:	930b      	str	r3, [sp, #44]	; 0x2c
    X->n = 0;
 80a9f42:	910c      	str	r1, [sp, #48]	; 0x30
    X->p = NULL;
 80a9f44:	910d      	str	r1, [sp, #52]	; 0x34
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80a9f46:	930e      	str	r3, [sp, #56]	; 0x38
    X->n = 0;
 80a9f48:	910f      	str	r1, [sp, #60]	; 0x3c
    X->p = NULL;
 80a9f4a:	9110      	str	r1, [sp, #64]	; 0x40
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
 80a9f4c:	f005 f8f7 	bl	80af13e <memset>

    i = mbedtls_mpi_bitlen( E );
 80a9f50:	9802      	ldr	r0, [sp, #8]
 80a9f52:	f7ff fa44 	bl	80a93de <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
            ( i >  79 ) ? 4 : ( i >  23 ) ? 3 : 1;
 80a9f56:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
 80a9f5a:	d20a      	bcs.n	80a9f72 <mbedtls_mpi_exp_mod+0x98>
 80a9f5c:	28ef      	cmp	r0, #239	; 0xef
 80a9f5e:	d80b      	bhi.n	80a9f78 <mbedtls_mpi_exp_mod+0x9e>
 80a9f60:	284f      	cmp	r0, #79	; 0x4f
 80a9f62:	d80c      	bhi.n	80a9f7e <mbedtls_mpi_exp_mod+0xa4>
 80a9f64:	2818      	cmp	r0, #24
 80a9f66:	bf34      	ite	cc
 80a9f68:	f04f 0b01 	movcc.w	fp, #1
 80a9f6c:	f04f 0b03 	movcs.w	fp, #3
 80a9f70:	e007      	b.n	80a9f82 <mbedtls_mpi_exp_mod+0xa8>
 80a9f72:	f04f 0b06 	mov.w	fp, #6
 80a9f76:	e004      	b.n	80a9f82 <mbedtls_mpi_exp_mod+0xa8>
 80a9f78:	f04f 0b05 	mov.w	fp, #5
 80a9f7c:	e001      	b.n	80a9f82 <mbedtls_mpi_exp_mod+0xa8>
 80a9f7e:	f04f 0b04 	mov.w	fp, #4

    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;

    j = N->n + 1;
 80a9f82:	686b      	ldr	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 80a9f84:	4630      	mov	r0, r6
            ( i >  79 ) ? 4 : ( i >  23 ) ? 3 : 1;

    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;

    j = N->n + 1;
 80a9f86:	f103 0801 	add.w	r8, r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 80a9f8a:	4641      	mov	r1, r8
 80a9f8c:	f7ff f98b 	bl	80a92a6 <mbedtls_mpi_grow>
 80a9f90:	4603      	mov	r3, r0
 80a9f92:	2800      	cmp	r0, #0
 80a9f94:	f040 8194 	bne.w	80aa2c0 <mbedtls_mpi_exp_mod+0x3e6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
 80a9f98:	4641      	mov	r1, r8
 80a9f9a:	a817      	add	r0, sp, #92	; 0x5c
 80a9f9c:	f7ff f983 	bl	80a92a6 <mbedtls_mpi_grow>
 80a9fa0:	4603      	mov	r3, r0
 80a9fa2:	2800      	cmp	r0, #0
 80a9fa4:	f040 818c 	bne.w	80aa2c0 <mbedtls_mpi_exp_mod+0x3e6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
 80a9fa8:	ea4f 0148 	mov.w	r1, r8, lsl #1
 80a9fac:	a80b      	add	r0, sp, #44	; 0x2c
 80a9fae:	f7ff f97a 	bl	80a92a6 <mbedtls_mpi_grow>
 80a9fb2:	4603      	mov	r3, r0
 80a9fb4:	2800      	cmp	r0, #0
 80a9fb6:	f040 8183 	bne.w	80aa2c0 <mbedtls_mpi_exp_mod+0x3e6>

    /*
     * Compensate for negative A (and correct at the end)
     */
    neg = ( A->s == -1 );
 80a9fba:	683b      	ldr	r3, [r7, #0]
 80a9fbc:	9304      	str	r3, [sp, #16]
    if( neg )
 80a9fbe:	3301      	adds	r3, #1
 80a9fc0:	d10a      	bne.n	80a9fd8 <mbedtls_mpi_exp_mod+0xfe>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
 80a9fc2:	4639      	mov	r1, r7
 80a9fc4:	a80e      	add	r0, sp, #56	; 0x38
 80a9fc6:	f7ff f99a 	bl	80a92fe <mbedtls_mpi_copy>
 80a9fca:	4603      	mov	r3, r0
 80a9fcc:	2800      	cmp	r0, #0
 80a9fce:	f040 8177 	bne.w	80aa2c0 <mbedtls_mpi_exp_mod+0x3e6>
        Apos.s = 1;
 80a9fd2:	2301      	movs	r3, #1
 80a9fd4:	930e      	str	r3, [sp, #56]	; 0x38
        A = &Apos;
 80a9fd6:	af0e      	add	r7, sp, #56	; 0x38
    }

    /*
     * If 1st call, pre-compute R^2 mod N
     */
    if( _RR == NULL || _RR->p == NULL )
 80a9fd8:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 80a9fdc:	b10b      	cbz	r3, 80a9fe2 <mbedtls_mpi_exp_mod+0x108>
 80a9fde:	689b      	ldr	r3, [r3, #8]
 80a9fe0:	bb2b      	cbnz	r3, 80aa02e <mbedtls_mpi_exp_mod+0x154>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
 80a9fe2:	2101      	movs	r1, #1
 80a9fe4:	a808      	add	r0, sp, #32
 80a9fe6:	f7ff f9b4 	bl	80a9352 <mbedtls_mpi_lset>
 80a9fea:	4603      	mov	r3, r0
 80a9fec:	2800      	cmp	r0, #0
 80a9fee:	f040 8167 	bne.w	80aa2c0 <mbedtls_mpi_exp_mod+0x3e6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
 80a9ff2:	6869      	ldr	r1, [r5, #4]
 80a9ff4:	a808      	add	r0, sp, #32
 80a9ff6:	0189      	lsls	r1, r1, #6
 80a9ff8:	f7ff fa6f 	bl	80a94da <mbedtls_mpi_shift_l>
 80a9ffc:	4603      	mov	r3, r0
 80a9ffe:	2800      	cmp	r0, #0
 80aa000:	f040 815e 	bne.w	80aa2c0 <mbedtls_mpi_exp_mod+0x3e6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
 80aa004:	a908      	add	r1, sp, #32
 80aa006:	462a      	mov	r2, r5
 80aa008:	4608      	mov	r0, r1
 80aa00a:	f7ff ff34 	bl	80a9e76 <mbedtls_mpi_mod_mpi>
 80aa00e:	4603      	mov	r3, r0
 80aa010:	2800      	cmp	r0, #0
 80aa012:	f040 8155 	bne.w	80aa2c0 <mbedtls_mpi_exp_mod+0x3e6>

        if( _RR != NULL )
 80aa016:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 80aa01a:	b183      	cbz	r3, 80aa03e <mbedtls_mpi_exp_mod+0x164>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
 80aa01c:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 80aa020:	ab08      	add	r3, sp, #32
 80aa022:	cb03      	ldmia	r3!, {r0, r1}
 80aa024:	6010      	str	r0, [r2, #0]
 80aa026:	6818      	ldr	r0, [r3, #0]
 80aa028:	6051      	str	r1, [r2, #4]
 80aa02a:	6090      	str	r0, [r2, #8]
 80aa02c:	e007      	b.n	80aa03e <mbedtls_mpi_exp_mod+0x164>
    }
    else
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
 80aa02e:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 80aa032:	ab08      	add	r3, sp, #32
 80aa034:	6810      	ldr	r0, [r2, #0]
 80aa036:	6851      	ldr	r1, [r2, #4]
 80aa038:	c303      	stmia	r3!, {r0, r1}
 80aa03a:	6890      	ldr	r0, [r2, #8]
 80aa03c:	6018      	str	r0, [r3, #0]

    /*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
 80aa03e:	4629      	mov	r1, r5
 80aa040:	4638      	mov	r0, r7
 80aa042:	f7ff fb78 	bl	80a9736 <mbedtls_mpi_cmp_mpi>
 80aa046:	2800      	cmp	r0, #0
 80aa048:	db18      	blt.n	80aa07c <mbedtls_mpi_exp_mod+0x1a2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
 80aa04a:	462a      	mov	r2, r5
 80aa04c:	4639      	mov	r1, r7
 80aa04e:	a817      	add	r0, sp, #92	; 0x5c
 80aa050:	f7ff ff11 	bl	80a9e76 <mbedtls_mpi_mod_mpi>
 80aa054:	4603      	mov	r3, r0
 80aa056:	2800      	cmp	r0, #0
 80aa058:	f040 8132 	bne.w	80aa2c0 <mbedtls_mpi_exp_mod+0x3e6>
    x += ( ( m0 + 2 ) & 4 ) << 1;

    for( i = biL; i >= 8; i /= 2 )
        x *= ( 2 - ( m0 * x ) );

    *mm = ~x + 1;
 80aa05c:	4264      	negs	r4, r4
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );

    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
 80aa05e:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
 80aa062:	4623      	mov	r3, r4
 80aa064:	f8cd 9000 	str.w	r9, [sp]
 80aa068:	462a      	mov	r2, r5
 80aa06a:	a908      	add	r1, sp, #32
 80aa06c:	a817      	add	r0, sp, #92	; 0x5c
 80aa06e:	f7ff fafe 	bl	80a966e <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 80aa072:	4603      	mov	r3, r0
 80aa074:	2800      	cmp	r0, #0
 80aa076:	f040 8123 	bne.w	80aa2c0 <mbedtls_mpi_exp_mod+0x3e6>
 80aa07a:	e004      	b.n	80aa086 <mbedtls_mpi_exp_mod+0x1ac>
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
 80aa07c:	4639      	mov	r1, r7
 80aa07e:	a817      	add	r0, sp, #92	; 0x5c
 80aa080:	f7ff f93d 	bl	80a92fe <mbedtls_mpi_copy>
 80aa084:	e7e6      	b.n	80aa054 <mbedtls_mpi_exp_mod+0x17a>
    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
 80aa086:	a908      	add	r1, sp, #32
 80aa088:	4630      	mov	r0, r6
 80aa08a:	f7ff f938 	bl	80a92fe <mbedtls_mpi_copy>
 80aa08e:	4603      	mov	r3, r0
 80aa090:	2800      	cmp	r0, #0
 80aa092:	f040 8115 	bne.w	80aa2c0 <mbedtls_mpi_exp_mod+0x3e6>
{
    mbedtls_mpi_uint z = 1;
    mbedtls_mpi U;

    U.n = U.s = (int) z;
    U.p = &z;
 80aa096:	ab07      	add	r3, sp, #28
/*
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    mbedtls_mpi_uint z = 1;
 80aa098:	2701      	movs	r7, #1
    mbedtls_mpi U;

    U.n = U.s = (int) z;
    U.p = &z;
 80aa09a:	9313      	str	r3, [sp, #76]	; 0x4c

    return( mpi_montmul( A, &U, N, mm, T ) );
 80aa09c:	f8cd 9000 	str.w	r9, [sp]
 80aa0a0:	4623      	mov	r3, r4
 80aa0a2:	462a      	mov	r2, r5
 80aa0a4:	a911      	add	r1, sp, #68	; 0x44
 80aa0a6:	4630      	mov	r0, r6
/*
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    mbedtls_mpi_uint z = 1;
 80aa0a8:	9707      	str	r7, [sp, #28]
    mbedtls_mpi U;

    U.n = U.s = (int) z;
 80aa0aa:	9711      	str	r7, [sp, #68]	; 0x44
 80aa0ac:	9712      	str	r7, [sp, #72]	; 0x48
    U.p = &z;

    return( mpi_montmul( A, &U, N, mm, T ) );
 80aa0ae:	f7ff fade 	bl	80a966e <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 80aa0b2:	4603      	mov	r3, r0
 80aa0b4:	2800      	cmp	r0, #0
 80aa0b6:	f040 8103 	bne.w	80aa2c0 <mbedtls_mpi_exp_mod+0x3e6>

    if( wsize > 1 )
 80aa0ba:	45bb      	cmp	fp, r7
 80aa0bc:	d05b      	beq.n	80aa176 <mbedtls_mpi_exp_mod+0x29c>
    {
        /*
         * W[1 << (wsize - 1)] = W[1] ^ (wsize - 1)
         */
        j =  one << ( wsize - 1 );
 80aa0be:	f10b 33ff 	add.w	r3, fp, #4294967295
 80aa0c2:	9303      	str	r3, [sp, #12]
 80aa0c4:	409f      	lsls	r7, r3

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
 80aa0c6:	f04f 080c 	mov.w	r8, #12
 80aa0ca:	ab14      	add	r3, sp, #80	; 0x50
 80aa0cc:	fb08 3807 	mla	r8, r8, r7, r3
 80aa0d0:	6869      	ldr	r1, [r5, #4]
 80aa0d2:	4640      	mov	r0, r8
 80aa0d4:	3101      	adds	r1, #1
 80aa0d6:	f7ff f8e6 	bl	80a92a6 <mbedtls_mpi_grow>
 80aa0da:	4603      	mov	r3, r0
 80aa0dc:	2800      	cmp	r0, #0
 80aa0de:	f040 80ef 	bne.w	80aa2c0 <mbedtls_mpi_exp_mod+0x3e6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
 80aa0e2:	a917      	add	r1, sp, #92	; 0x5c
 80aa0e4:	4640      	mov	r0, r8
 80aa0e6:	f7ff f90a 	bl	80a92fe <mbedtls_mpi_copy>
 80aa0ea:	4603      	mov	r3, r0
 80aa0ec:	2800      	cmp	r0, #0
 80aa0ee:	f040 80e7 	bne.w	80aa2c0 <mbedtls_mpi_exp_mod+0x3e6>
 80aa0f2:	4682      	mov	sl, r0

        for( i = 0; i < wsize - 1; i++ )
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
 80aa0f4:	4623      	mov	r3, r4
 80aa0f6:	f8cd 9000 	str.w	r9, [sp]
 80aa0fa:	462a      	mov	r2, r5
 80aa0fc:	4641      	mov	r1, r8
 80aa0fe:	4640      	mov	r0, r8
 80aa100:	f7ff fab5 	bl	80a966e <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 80aa104:	4603      	mov	r3, r0
 80aa106:	2800      	cmp	r0, #0
 80aa108:	f040 80da 	bne.w	80aa2c0 <mbedtls_mpi_exp_mod+0x3e6>
        j =  one << ( wsize - 1 );

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );

        for( i = 0; i < wsize - 1; i++ )
 80aa10c:	9b03      	ldr	r3, [sp, #12]
 80aa10e:	f10a 0a01 	add.w	sl, sl, #1
 80aa112:	4553      	cmp	r3, sl
 80aa114:	d8ee      	bhi.n	80aa0f4 <mbedtls_mpi_exp_mod+0x21a>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
 80aa116:	3701      	adds	r7, #1
 80aa118:	f04f 080c 	mov.w	r8, #12
 80aa11c:	ab14      	add	r3, sp, #80	; 0x50
 80aa11e:	fb08 3807 	mla	r8, r8, r7, r3
 80aa122:	f04f 0901 	mov.w	r9, #1
 80aa126:	fa09 f90b 	lsl.w	r9, r9, fp
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 80aa12a:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
 80aa12e:	454f      	cmp	r7, r9
 80aa130:	d221      	bcs.n	80aa176 <mbedtls_mpi_exp_mod+0x29c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
 80aa132:	6869      	ldr	r1, [r5, #4]
 80aa134:	4640      	mov	r0, r8
 80aa136:	3101      	adds	r1, #1
 80aa138:	f7ff f8b5 	bl	80a92a6 <mbedtls_mpi_grow>
 80aa13c:	4603      	mov	r3, r0
 80aa13e:	2800      	cmp	r0, #0
 80aa140:	f040 80be 	bne.w	80aa2c0 <mbedtls_mpi_exp_mod+0x3e6>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
 80aa144:	f1a8 010c 	sub.w	r1, r8, #12
 80aa148:	4640      	mov	r0, r8
 80aa14a:	f7ff f8d8 	bl	80a92fe <mbedtls_mpi_copy>
 80aa14e:	4603      	mov	r3, r0
 80aa150:	2800      	cmp	r0, #0
 80aa152:	f040 80b5 	bne.w	80aa2c0 <mbedtls_mpi_exp_mod+0x3e6>

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 80aa156:	4623      	mov	r3, r4
 80aa158:	4640      	mov	r0, r8
 80aa15a:	f8cd a000 	str.w	sl, [sp]
 80aa15e:	462a      	mov	r2, r5
 80aa160:	a917      	add	r1, sp, #92	; 0x5c
 80aa162:	f7ff fa84 	bl	80a966e <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 80aa166:	f108 080c 	add.w	r8, r8, #12
 80aa16a:	4603      	mov	r3, r0
 80aa16c:	2800      	cmp	r0, #0
 80aa16e:	f040 80a7 	bne.w	80aa2c0 <mbedtls_mpi_exp_mod+0x3e6>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );

        /*
         * W[i] = W[i - 1] * W[1]
         */
        for( i = j + 1; i < ( one << wsize ); i++ )
 80aa172:	3701      	adds	r7, #1
 80aa174:	e7db      	b.n	80aa12e <mbedtls_mpi_exp_mod+0x254>

    nblimbs = E->n;
    bufsize = 0;
    nbits   = 0;
    wbits   = 0;
    state   = 0;
 80aa176:	2700      	movs	r7, #0
        }
    }

    nblimbs = E->n;
    bufsize = 0;
    nbits   = 0;
 80aa178:	46b9      	mov	r9, r7
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
        }
    }

    nblimbs = E->n;
    bufsize = 0;
 80aa17a:	46ba      	mov	sl, r7
    nbits   = 0;
    wbits   = 0;
 80aa17c:	46b8      	mov	r8, r7

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
        }
    }

    nblimbs = E->n;
 80aa17e:	9b02      	ldr	r3, [sp, #8]
 80aa180:	685b      	ldr	r3, [r3, #4]
 80aa182:	9303      	str	r3, [sp, #12]
    wbits   = 0;
    state   = 0;

    while( 1 )
    {
        if( bufsize == 0 )
 80aa184:	f1ba 0f00 	cmp.w	sl, #0
 80aa188:	d10e      	bne.n	80aa1a8 <mbedtls_mpi_exp_mod+0x2ce>
        {
            if( nblimbs == 0 )
 80aa18a:	9b03      	ldr	r3, [sp, #12]
 80aa18c:	b93b      	cbnz	r3, 80aa19e <mbedtls_mpi_exp_mod+0x2c4>
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
 80aa18e:	2301      	movs	r3, #1
 80aa190:	fa03 f30b 	lsl.w	r3, r3, fp
 80aa194:	9305      	str	r3, [sp, #20]
 80aa196:	9f03      	ldr	r7, [sp, #12]
 80aa198:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
 80aa19c:	e05e      	b.n	80aa25c <mbedtls_mpi_exp_mod+0x382>
        if( bufsize == 0 )
        {
            if( nblimbs == 0 )
                break;

            nblimbs--;
 80aa19e:	9b03      	ldr	r3, [sp, #12]

            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
 80aa1a0:	f04f 0a20 	mov.w	sl, #32
        if( bufsize == 0 )
        {
            if( nblimbs == 0 )
                break;

            nblimbs--;
 80aa1a4:	3b01      	subs	r3, #1
 80aa1a6:	9303      	str	r3, [sp, #12]
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
        }

        bufsize--;

        ei = (E->p[nblimbs] >> bufsize) & 1;
 80aa1a8:	9b02      	ldr	r3, [sp, #8]
 80aa1aa:	9a03      	ldr	r2, [sp, #12]
 80aa1ac:	689b      	ldr	r3, [r3, #8]
            nblimbs--;

            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
        }

        bufsize--;
 80aa1ae:	f10a 3aff 	add.w	sl, sl, #4294967295

        ei = (E->p[nblimbs] >> bufsize) & 1;
 80aa1b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80aa1b6:	fa23 f30a 	lsr.w	r3, r3, sl

        /*
         * skip leading 0s
         */
        if( ei == 0 && state == 0 )
 80aa1ba:	f013 0301 	ands.w	r3, r3, #1
 80aa1be:	d10f      	bne.n	80aa1e0 <mbedtls_mpi_exp_mod+0x306>
 80aa1c0:	2f00      	cmp	r7, #0
 80aa1c2:	d0df      	beq.n	80aa184 <mbedtls_mpi_exp_mod+0x2aa>
            continue;

        if( ei == 0 && state == 1 )
 80aa1c4:	2f01      	cmp	r7, #1
 80aa1c6:	d10b      	bne.n	80aa1e0 <mbedtls_mpi_exp_mod+0x306>
        {
            /*
             * out of window, square X
             */
            MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 80aa1c8:	ab0b      	add	r3, sp, #44	; 0x2c
 80aa1ca:	9300      	str	r3, [sp, #0]
 80aa1cc:	462a      	mov	r2, r5
 80aa1ce:	4623      	mov	r3, r4
 80aa1d0:	4631      	mov	r1, r6
 80aa1d2:	4630      	mov	r0, r6
 80aa1d4:	f7ff fa4b 	bl	80a966e <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 80aa1d8:	4603      	mov	r3, r0
 80aa1da:	2800      	cmp	r0, #0
 80aa1dc:	d0d2      	beq.n	80aa184 <mbedtls_mpi_exp_mod+0x2aa>
 80aa1de:	e06f      	b.n	80aa2c0 <mbedtls_mpi_exp_mod+0x3e6>
        /*
         * add ei to current window
         */
        state = 2;

        nbits++;
 80aa1e0:	f109 0901 	add.w	r9, r9, #1
        wbits |= ( ei << ( wsize - nbits ) );
 80aa1e4:	ebc9 020b 	rsb	r2, r9, fp
 80aa1e8:	4093      	lsls	r3, r2

        if( nbits == wsize )
 80aa1ea:	45cb      	cmp	fp, r9
         * add ei to current window
         */
        state = 2;

        nbits++;
        wbits |= ( ei << ( wsize - nbits ) );
 80aa1ec:	ea48 0803 	orr.w	r8, r8, r3

        if( nbits == wsize )
 80aa1f0:	d001      	beq.n	80aa1f6 <mbedtls_mpi_exp_mod+0x31c>
        }

        /*
         * add ei to current window
         */
        state = 2;
 80aa1f2:	2702      	movs	r7, #2
 80aa1f4:	e7c6      	b.n	80aa184 <mbedtls_mpi_exp_mod+0x2aa>
 80aa1f6:	2700      	movs	r7, #0
        {
            /*
             * X = X^wsize R^-1 mod N
             */
            for( i = 0; i < wsize; i++ )
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 80aa1f8:	ab0b      	add	r3, sp, #44	; 0x2c
 80aa1fa:	9300      	str	r3, [sp, #0]
 80aa1fc:	462a      	mov	r2, r5
 80aa1fe:	4623      	mov	r3, r4
 80aa200:	4631      	mov	r1, r6
 80aa202:	4630      	mov	r0, r6
 80aa204:	f7ff fa33 	bl	80a966e <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 80aa208:	4603      	mov	r3, r0
 80aa20a:	2800      	cmp	r0, #0
 80aa20c:	d158      	bne.n	80aa2c0 <mbedtls_mpi_exp_mod+0x3e6>
        if( nbits == wsize )
        {
            /*
             * X = X^wsize R^-1 mod N
             */
            for( i = 0; i < wsize; i++ )
 80aa20e:	3701      	adds	r7, #1
 80aa210:	45bb      	cmp	fp, r7
 80aa212:	d1f1      	bne.n	80aa1f8 <mbedtls_mpi_exp_mod+0x31e>
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

            /*
             * X = X * W[wbits] R^-1 mod N
             */
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );
 80aa214:	ab0b      	add	r3, sp, #44	; 0x2c
 80aa216:	a814      	add	r0, sp, #80	; 0x50
 80aa218:	210c      	movs	r1, #12
 80aa21a:	9300      	str	r3, [sp, #0]
 80aa21c:	fb01 0108 	mla	r1, r1, r8, r0
 80aa220:	4623      	mov	r3, r4
 80aa222:	462a      	mov	r2, r5
 80aa224:	4630      	mov	r0, r6
 80aa226:	f7ff fa22 	bl	80a966e <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 80aa22a:	4603      	mov	r3, r0
 80aa22c:	2800      	cmp	r0, #0
 80aa22e:	d147      	bne.n	80aa2c0 <mbedtls_mpi_exp_mod+0x3e6>

            state--;
 80aa230:	2701      	movs	r7, #1
            nbits = 0;
 80aa232:	4680      	mov	r8, r0
            wbits = 0;
 80aa234:	4681      	mov	r9, r0
 80aa236:	e7a5      	b.n	80aa184 <mbedtls_mpi_exp_mod+0x2aa>
    /*
     * process the remaining bits
     */
    for( i = 0; i < nbits; i++ )
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 80aa238:	4623      	mov	r3, r4
 80aa23a:	f8cd a000 	str.w	sl, [sp]
 80aa23e:	462a      	mov	r2, r5
 80aa240:	4631      	mov	r1, r6
 80aa242:	4630      	mov	r0, r6
 80aa244:	f7ff fa13 	bl	80a966e <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 80aa248:	4603      	mov	r3, r0
 80aa24a:	2800      	cmp	r0, #0
 80aa24c:	d138      	bne.n	80aa2c0 <mbedtls_mpi_exp_mod+0x3e6>

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
 80aa24e:	9b05      	ldr	r3, [sp, #20]
     */
    for( i = 0; i < nbits; i++ )
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;
 80aa250:	ea4f 0848 	mov.w	r8, r8, lsl #1

        if( ( wbits & ( one << wsize ) ) != 0 )
 80aa254:	ea18 0f03 	tst.w	r8, r3
 80aa258:	d103      	bne.n	80aa262 <mbedtls_mpi_exp_mod+0x388>
    }

    /*
     * process the remaining bits
     */
    for( i = 0; i < nbits; i++ )
 80aa25a:	3701      	adds	r7, #1
 80aa25c:	454f      	cmp	r7, r9
 80aa25e:	d1eb      	bne.n	80aa238 <mbedtls_mpi_exp_mod+0x35e>
 80aa260:	e00b      	b.n	80aa27a <mbedtls_mpi_exp_mod+0x3a0>
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );
 80aa262:	4623      	mov	r3, r4
 80aa264:	f8cd a000 	str.w	sl, [sp]
 80aa268:	462a      	mov	r2, r5
 80aa26a:	a917      	add	r1, sp, #92	; 0x5c
 80aa26c:	4630      	mov	r0, r6
 80aa26e:	f7ff f9fe 	bl	80a966e <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
 80aa272:	4603      	mov	r3, r0
 80aa274:	2800      	cmp	r0, #0
 80aa276:	d0f0      	beq.n	80aa25a <mbedtls_mpi_exp_mod+0x380>
 80aa278:	e022      	b.n	80aa2c0 <mbedtls_mpi_exp_mod+0x3e6>
/*
 * Montgomery reduction: A = A * R^-1 mod N
 */
static int mpi_montred( mbedtls_mpi *A, const mbedtls_mpi *N, mbedtls_mpi_uint mm, const mbedtls_mpi *T )
{
    mbedtls_mpi_uint z = 1;
 80aa27a:	2301      	movs	r3, #1
 80aa27c:	9307      	str	r3, [sp, #28]
    mbedtls_mpi U;

    U.n = U.s = (int) z;
 80aa27e:	9311      	str	r3, [sp, #68]	; 0x44
 80aa280:	9312      	str	r3, [sp, #72]	; 0x48
    U.p = &z;
 80aa282:	ab07      	add	r3, sp, #28
 80aa284:	9313      	str	r3, [sp, #76]	; 0x4c

    return( mpi_montmul( A, &U, N, mm, T ) );
 80aa286:	f8cd a000 	str.w	sl, [sp]
 80aa28a:	4623      	mov	r3, r4
 80aa28c:	462a      	mov	r2, r5
 80aa28e:	a911      	add	r1, sp, #68	; 0x44
 80aa290:	4630      	mov	r0, r6
 80aa292:	f7ff f9ec 	bl	80a966e <_ZL11mpi_montmulP11mbedtls_mpiPKS_S2_mS2_>
    }

    /*
     * X = A^E * R * R^-1 mod N = A^E mod N
     */
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 80aa296:	4603      	mov	r3, r0
 80aa298:	b990      	cbnz	r0, 80aa2c0 <mbedtls_mpi_exp_mod+0x3e6>

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
 80aa29a:	9a04      	ldr	r2, [sp, #16]
 80aa29c:	3201      	adds	r2, #1
 80aa29e:	d10f      	bne.n	80aa2c0 <mbedtls_mpi_exp_mod+0x3e6>
 80aa2a0:	9a02      	ldr	r2, [sp, #8]
 80aa2a2:	6852      	ldr	r2, [r2, #4]
 80aa2a4:	b162      	cbz	r2, 80aa2c0 <mbedtls_mpi_exp_mod+0x3e6>
 80aa2a6:	9a02      	ldr	r2, [sp, #8]
 80aa2a8:	6892      	ldr	r2, [r2, #8]
 80aa2aa:	6812      	ldr	r2, [r2, #0]
 80aa2ac:	07d2      	lsls	r2, r2, #31
 80aa2ae:	d507      	bpl.n	80aa2c0 <mbedtls_mpi_exp_mod+0x3e6>
    {
        X->s = -1;
 80aa2b0:	9b04      	ldr	r3, [sp, #16]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
 80aa2b2:	4632      	mov	r2, r6
     */
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
    {
        X->s = -1;
 80aa2b4:	6033      	str	r3, [r6, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
 80aa2b6:	4629      	mov	r1, r5
 80aa2b8:	4630      	mov	r0, r6
 80aa2ba:	f7ff fb31 	bl	80a9920 <mbedtls_mpi_add_mpi>
 80aa2be:	4603      	mov	r3, r0
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 80aa2c0:	2201      	movs	r2, #1
 80aa2c2:	f10b 34ff 	add.w	r4, fp, #4294967295
 80aa2c6:	fa02 f404 	lsl.w	r4, r2, r4
 80aa2ca:	fa02 f50b 	lsl.w	r5, r2, fp
        mbedtls_mpi_free( &W[i] );
 80aa2ce:	260c      	movs	r6, #12
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 80aa2d0:	42ac      	cmp	r4, r5
 80aa2d2:	9302      	str	r3, [sp, #8]
 80aa2d4:	d207      	bcs.n	80aa2e6 <mbedtls_mpi_exp_mod+0x40c>
        mbedtls_mpi_free( &W[i] );
 80aa2d6:	ab14      	add	r3, sp, #80	; 0x50
 80aa2d8:	fb06 3004 	mla	r0, r6, r4, r3
 80aa2dc:	f7fe ffcd 	bl	80a927a <mbedtls_mpi_free>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 80aa2e0:	3401      	adds	r4, #1
 80aa2e2:	9b02      	ldr	r3, [sp, #8]
 80aa2e4:	e7f4      	b.n	80aa2d0 <mbedtls_mpi_exp_mod+0x3f6>
        mbedtls_mpi_free( &W[i] );

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
 80aa2e6:	a817      	add	r0, sp, #92	; 0x5c
 80aa2e8:	f7fe ffc7 	bl	80a927a <mbedtls_mpi_free>
 80aa2ec:	a80b      	add	r0, sp, #44	; 0x2c
 80aa2ee:	f7fe ffc4 	bl	80a927a <mbedtls_mpi_free>
 80aa2f2:	a80e      	add	r0, sp, #56	; 0x38
 80aa2f4:	f7fe ffc1 	bl	80a927a <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
 80aa2f8:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 80aa2fc:	9b02      	ldr	r3, [sp, #8]
 80aa2fe:	b10a      	cbz	r2, 80aa304 <mbedtls_mpi_exp_mod+0x42a>
 80aa300:	6892      	ldr	r2, [r2, #8]
 80aa302:	b922      	cbnz	r2, 80aa30e <mbedtls_mpi_exp_mod+0x434>
        mbedtls_mpi_free( &RR );
 80aa304:	a808      	add	r0, sp, #32
 80aa306:	9302      	str	r3, [sp, #8]
 80aa308:	f7fe ffb7 	bl	80a927a <mbedtls_mpi_free>

    return( ret );
 80aa30c:	9b02      	ldr	r3, [sp, #8]
 80aa30e:	4618      	mov	r0, r3
}
 80aa310:	f20d 6d54 	addw	sp, sp, #1620	; 0x654
 80aa314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080aa318 <mbedtls_mpi_gcd>:

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80aa318:	b5f0      	push	{r4, r5, r6, r7, lr}
 80aa31a:	b08b      	sub	sp, #44	; 0x2c
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 80aa31c:	2300      	movs	r3, #0
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80aa31e:	2601      	movs	r6, #1

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80aa320:	4607      	mov	r7, r0
    size_t lz, lzt;
    mbedtls_mpi TG, TA, TB;

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 80aa322:	a804      	add	r0, sp, #16

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 80aa324:	4615      	mov	r5, r2
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80aa326:	9601      	str	r6, [sp, #4]
    X->n = 0;
 80aa328:	9302      	str	r3, [sp, #8]
    X->p = NULL;
 80aa32a:	9303      	str	r3, [sp, #12]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80aa32c:	9604      	str	r6, [sp, #16]
    X->n = 0;
 80aa32e:	9305      	str	r3, [sp, #20]
    X->p = NULL;
 80aa330:	9306      	str	r3, [sp, #24]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80aa332:	9607      	str	r6, [sp, #28]
    X->n = 0;
 80aa334:	9308      	str	r3, [sp, #32]
    X->p = NULL;
 80aa336:	9309      	str	r3, [sp, #36]	; 0x24
    size_t lz, lzt;
    mbedtls_mpi TG, TA, TB;

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 80aa338:	f7fe ffe1 	bl	80a92fe <mbedtls_mpi_copy>
 80aa33c:	4604      	mov	r4, r0
 80aa33e:	2800      	cmp	r0, #0
 80aa340:	d163      	bne.n	80aa40a <mbedtls_mpi_gcd+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 80aa342:	4629      	mov	r1, r5
 80aa344:	a807      	add	r0, sp, #28
 80aa346:	f7fe ffda 	bl	80a92fe <mbedtls_mpi_copy>
 80aa34a:	4604      	mov	r4, r0
 80aa34c:	2800      	cmp	r0, #0
 80aa34e:	d15c      	bne.n	80aa40a <mbedtls_mpi_gcd+0xf2>

    lz = mbedtls_mpi_lsb( &TA );
 80aa350:	a804      	add	r0, sp, #16
 80aa352:	f7ff f82b 	bl	80a93ac <mbedtls_mpi_lsb>
 80aa356:	4605      	mov	r5, r0
    lzt = mbedtls_mpi_lsb( &TB );
 80aa358:	a807      	add	r0, sp, #28
 80aa35a:	f7ff f827 	bl	80a93ac <mbedtls_mpi_lsb>
 80aa35e:	4285      	cmp	r5, r0
 80aa360:	bf28      	it	cs
 80aa362:	4605      	movcs	r5, r0

    if( lzt < lz )
        lz = lzt;

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
 80aa364:	a804      	add	r0, sp, #16
 80aa366:	4629      	mov	r1, r5
 80aa368:	f7ff f906 	bl	80a9578 <mbedtls_mpi_shift_r>
 80aa36c:	4604      	mov	r4, r0
 80aa36e:	2800      	cmp	r0, #0
 80aa370:	d14b      	bne.n	80aa40a <mbedtls_mpi_gcd+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
 80aa372:	4629      	mov	r1, r5
 80aa374:	a807      	add	r0, sp, #28
 80aa376:	f7ff f8ff 	bl	80a9578 <mbedtls_mpi_shift_r>
 80aa37a:	4604      	mov	r4, r0
 80aa37c:	2800      	cmp	r0, #0
 80aa37e:	d144      	bne.n	80aa40a <mbedtls_mpi_gcd+0xf2>

    TA.s = TB.s = 1;
 80aa380:	9607      	str	r6, [sp, #28]
 80aa382:	9604      	str	r6, [sp, #16]

    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 80aa384:	2100      	movs	r1, #0
 80aa386:	a804      	add	r0, sp, #16
 80aa388:	f7ff fa1a 	bl	80a97c0 <mbedtls_mpi_cmp_int>
 80aa38c:	2800      	cmp	r0, #0
 80aa38e:	d031      	beq.n	80aa3f4 <mbedtls_mpi_gcd+0xdc>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
 80aa390:	a804      	add	r0, sp, #16
 80aa392:	f7ff f80b 	bl	80a93ac <mbedtls_mpi_lsb>
 80aa396:	4601      	mov	r1, r0
 80aa398:	a804      	add	r0, sp, #16
 80aa39a:	f7ff f8ed 	bl	80a9578 <mbedtls_mpi_shift_r>
 80aa39e:	4604      	mov	r4, r0
 80aa3a0:	2800      	cmp	r0, #0
 80aa3a2:	d132      	bne.n	80aa40a <mbedtls_mpi_gcd+0xf2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
 80aa3a4:	a807      	add	r0, sp, #28
 80aa3a6:	f7ff f801 	bl	80a93ac <mbedtls_mpi_lsb>
 80aa3aa:	4601      	mov	r1, r0
 80aa3ac:	a807      	add	r0, sp, #28
 80aa3ae:	f7ff f8e3 	bl	80a9578 <mbedtls_mpi_shift_r>
 80aa3b2:	4604      	mov	r4, r0
 80aa3b4:	bb48      	cbnz	r0, 80aa40a <mbedtls_mpi_gcd+0xf2>

        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
 80aa3b6:	a907      	add	r1, sp, #28
 80aa3b8:	a804      	add	r0, sp, #16
 80aa3ba:	f7ff f9bc 	bl	80a9736 <mbedtls_mpi_cmp_mpi>
 80aa3be:	2800      	cmp	r0, #0
 80aa3c0:	db09      	blt.n	80aa3d6 <mbedtls_mpi_gcd+0xbe>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
 80aa3c2:	a904      	add	r1, sp, #16
 80aa3c4:	aa07      	add	r2, sp, #28
 80aa3c6:	4608      	mov	r0, r1
 80aa3c8:	f7ff fa6a 	bl	80a98a0 <mbedtls_mpi_sub_abs>
 80aa3cc:	4604      	mov	r4, r0
 80aa3ce:	b9e0      	cbnz	r0, 80aa40a <mbedtls_mpi_gcd+0xf2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );
 80aa3d0:	2101      	movs	r1, #1
 80aa3d2:	a804      	add	r0, sp, #16
 80aa3d4:	e008      	b.n	80aa3e8 <mbedtls_mpi_gcd+0xd0>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
 80aa3d6:	a907      	add	r1, sp, #28
 80aa3d8:	aa04      	add	r2, sp, #16
 80aa3da:	4608      	mov	r0, r1
 80aa3dc:	f7ff fa60 	bl	80a98a0 <mbedtls_mpi_sub_abs>
 80aa3e0:	4604      	mov	r4, r0
 80aa3e2:	b990      	cbnz	r0, 80aa40a <mbedtls_mpi_gcd+0xf2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 80aa3e4:	2101      	movs	r1, #1
 80aa3e6:	a807      	add	r0, sp, #28
 80aa3e8:	f7ff f8c6 	bl	80a9578 <mbedtls_mpi_shift_r>
 80aa3ec:	4604      	mov	r4, r0
 80aa3ee:	2800      	cmp	r0, #0
 80aa3f0:	d0c8      	beq.n	80aa384 <mbedtls_mpi_gcd+0x6c>
 80aa3f2:	e00a      	b.n	80aa40a <mbedtls_mpi_gcd+0xf2>
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
 80aa3f4:	4629      	mov	r1, r5
 80aa3f6:	a807      	add	r0, sp, #28
 80aa3f8:	f7ff f86f 	bl	80a94da <mbedtls_mpi_shift_l>
 80aa3fc:	4604      	mov	r4, r0
 80aa3fe:	b920      	cbnz	r0, 80aa40a <mbedtls_mpi_gcd+0xf2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
 80aa400:	a907      	add	r1, sp, #28
 80aa402:	4638      	mov	r0, r7
 80aa404:	f7fe ff7b 	bl	80a92fe <mbedtls_mpi_copy>
 80aa408:	4604      	mov	r4, r0

cleanup:

    mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );
 80aa40a:	a801      	add	r0, sp, #4
 80aa40c:	f7fe ff35 	bl	80a927a <mbedtls_mpi_free>
 80aa410:	a804      	add	r0, sp, #16
 80aa412:	f7fe ff32 	bl	80a927a <mbedtls_mpi_free>
 80aa416:	a807      	add	r0, sp, #28
 80aa418:	f7fe ff2f 	bl	80a927a <mbedtls_mpi_free>

    return( ret );
}
 80aa41c:	4620      	mov	r0, r4
 80aa41e:	b00b      	add	sp, #44	; 0x2c
 80aa420:	bdf0      	pop	{r4, r5, r6, r7, pc}

080aa422 <mbedtls_mpi_fill_random>:
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 80aa422:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( size > MBEDTLS_MPI_MAX_SIZE )
 80aa424:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 80aa428:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 80aa42c:	4605      	mov	r5, r0
 80aa42e:	460c      	mov	r4, r1
 80aa430:	4616      	mov	r6, r2
    int ret;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( size > MBEDTLS_MPI_MAX_SIZE )
 80aa432:	d814      	bhi.n	80aa45e <mbedtls_mpi_fill_random+0x3c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    MBEDTLS_MPI_CHK( f_rng( p_rng, buf, size ) );
 80aa434:	460a      	mov	r2, r1
 80aa436:	4618      	mov	r0, r3
 80aa438:	4669      	mov	r1, sp
 80aa43a:	47b0      	blx	r6
 80aa43c:	b920      	cbnz	r0, 80aa448 <mbedtls_mpi_fill_random+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( X, buf, size ) );
 80aa43e:	4622      	mov	r2, r4
 80aa440:	4669      	mov	r1, sp
 80aa442:	4628      	mov	r0, r5
 80aa444:	f7fe fff1 	bl	80a942a <mbedtls_mpi_read_binary>
 80aa448:	2300      	movs	r3, #0
    volatile mbedtls_mpi_uint *p = (mbedtls_mpi_uint *)v; while( n-- ) *p++ = 0;
}

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80aa44a:	f240 4401 	movw	r4, #1025	; 0x401
 80aa44e:	4619      	mov	r1, r3
 80aa450:	eb0d 0203 	add.w	r2, sp, r3
 80aa454:	3301      	adds	r3, #1
 80aa456:	42a3      	cmp	r3, r4
 80aa458:	d003      	beq.n	80aa462 <mbedtls_mpi_fill_random+0x40>
 80aa45a:	7011      	strb	r1, [r2, #0]
 80aa45c:	e7f8      	b.n	80aa450 <mbedtls_mpi_fill_random+0x2e>
{
    int ret;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( size > MBEDTLS_MPI_MAX_SIZE )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 80aa45e:	f06f 0003 	mvn.w	r0, #3
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( X, buf, size ) );

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
    return( ret );
}
 80aa462:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
 80aa466:	bd70      	pop	{r4, r5, r6, pc}

080aa468 <mbedtls_mpi_inv_mod>:

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
 80aa468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80aa46c:	4680      	mov	r8, r0
 80aa46e:	b09c      	sub	sp, #112	; 0x70
 80aa470:	460f      	mov	r7, r1
    int ret;
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 80aa472:	4610      	mov	r0, r2
 80aa474:	2101      	movs	r1, #1

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
 80aa476:	4616      	mov	r6, r2
    int ret;
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 80aa478:	f7ff f9a2 	bl	80a97c0 <mbedtls_mpi_cmp_int>
 80aa47c:	2800      	cmp	r0, #0
 80aa47e:	f340 814c 	ble.w	80aa71a <mbedtls_mpi_inv_mod+0x2b2>
{
    if( X == NULL )
        return;

    X->s = 1;
    X->n = 0;
 80aa482:	2300      	movs	r3, #0
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80aa484:	2501      	movs	r5, #1

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 80aa486:	4632      	mov	r2, r6
 80aa488:	4639      	mov	r1, r7
 80aa48a:	a801      	add	r0, sp, #4
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80aa48c:	9504      	str	r5, [sp, #16]
    X->n = 0;
 80aa48e:	9305      	str	r3, [sp, #20]
    X->p = NULL;
 80aa490:	9306      	str	r3, [sp, #24]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80aa492:	9507      	str	r5, [sp, #28]
    X->n = 0;
 80aa494:	9308      	str	r3, [sp, #32]
    X->p = NULL;
 80aa496:	9309      	str	r3, [sp, #36]	; 0x24
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80aa498:	950a      	str	r5, [sp, #40]	; 0x28
    X->n = 0;
 80aa49a:	930b      	str	r3, [sp, #44]	; 0x2c
    X->p = NULL;
 80aa49c:	930c      	str	r3, [sp, #48]	; 0x30
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80aa49e:	950d      	str	r5, [sp, #52]	; 0x34
    X->n = 0;
 80aa4a0:	930e      	str	r3, [sp, #56]	; 0x38
    X->p = NULL;
 80aa4a2:	930f      	str	r3, [sp, #60]	; 0x3c
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80aa4a4:	9501      	str	r5, [sp, #4]
    X->n = 0;
 80aa4a6:	9302      	str	r3, [sp, #8]
    X->p = NULL;
 80aa4a8:	9303      	str	r3, [sp, #12]
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80aa4aa:	9510      	str	r5, [sp, #64]	; 0x40
    X->n = 0;
 80aa4ac:	9311      	str	r3, [sp, #68]	; 0x44
    X->p = NULL;
 80aa4ae:	9312      	str	r3, [sp, #72]	; 0x48
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80aa4b0:	9513      	str	r5, [sp, #76]	; 0x4c
    X->n = 0;
 80aa4b2:	9314      	str	r3, [sp, #80]	; 0x50
    X->p = NULL;
 80aa4b4:	9315      	str	r3, [sp, #84]	; 0x54
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80aa4b6:	9516      	str	r5, [sp, #88]	; 0x58
    X->n = 0;
 80aa4b8:	9317      	str	r3, [sp, #92]	; 0x5c
    X->p = NULL;
 80aa4ba:	9318      	str	r3, [sp, #96]	; 0x60
void mbedtls_mpi_init( mbedtls_mpi *X )
{
    if( X == NULL )
        return;

    X->s = 1;
 80aa4bc:	9519      	str	r5, [sp, #100]	; 0x64
    X->n = 0;
 80aa4be:	931a      	str	r3, [sp, #104]	; 0x68
    X->p = NULL;
 80aa4c0:	931b      	str	r3, [sp, #108]	; 0x6c

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 80aa4c2:	f7ff ff29 	bl	80aa318 <mbedtls_mpi_gcd>
 80aa4c6:	4604      	mov	r4, r0
 80aa4c8:	2800      	cmp	r0, #0
 80aa4ca:	f040 8109 	bne.w	80aa6e0 <mbedtls_mpi_inv_mod+0x278>

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
 80aa4ce:	4629      	mov	r1, r5
 80aa4d0:	a801      	add	r0, sp, #4
 80aa4d2:	f7ff f975 	bl	80a97c0 <mbedtls_mpi_cmp_int>
 80aa4d6:	2800      	cmp	r0, #0
 80aa4d8:	f040 8100 	bne.w	80aa6dc <mbedtls_mpi_inv_mod+0x274>
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
 80aa4dc:	4632      	mov	r2, r6
 80aa4de:	4639      	mov	r1, r7
 80aa4e0:	a804      	add	r0, sp, #16
 80aa4e2:	f7ff fcc8 	bl	80a9e76 <mbedtls_mpi_mod_mpi>
 80aa4e6:	4604      	mov	r4, r0
 80aa4e8:	2800      	cmp	r0, #0
 80aa4ea:	f040 80f9 	bne.w	80aa6e0 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
 80aa4ee:	a904      	add	r1, sp, #16
 80aa4f0:	a807      	add	r0, sp, #28
 80aa4f2:	f7fe ff04 	bl	80a92fe <mbedtls_mpi_copy>
 80aa4f6:	4604      	mov	r4, r0
 80aa4f8:	2800      	cmp	r0, #0
 80aa4fa:	f040 80f1 	bne.w	80aa6e0 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
 80aa4fe:	4631      	mov	r1, r6
 80aa500:	a810      	add	r0, sp, #64	; 0x40
 80aa502:	f7fe fefc 	bl	80a92fe <mbedtls_mpi_copy>
 80aa506:	4604      	mov	r4, r0
 80aa508:	2800      	cmp	r0, #0
 80aa50a:	f040 80e9 	bne.w	80aa6e0 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
 80aa50e:	4631      	mov	r1, r6
 80aa510:	a813      	add	r0, sp, #76	; 0x4c
 80aa512:	f7fe fef4 	bl	80a92fe <mbedtls_mpi_copy>
 80aa516:	4604      	mov	r4, r0
 80aa518:	2800      	cmp	r0, #0
 80aa51a:	f040 80e1 	bne.w	80aa6e0 <mbedtls_mpi_inv_mod+0x278>

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
 80aa51e:	4629      	mov	r1, r5
 80aa520:	a80a      	add	r0, sp, #40	; 0x28
 80aa522:	f7fe ff16 	bl	80a9352 <mbedtls_mpi_lset>
 80aa526:	4604      	mov	r4, r0
 80aa528:	2800      	cmp	r0, #0
 80aa52a:	f040 80d9 	bne.w	80aa6e0 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
 80aa52e:	4601      	mov	r1, r0
 80aa530:	a80d      	add	r0, sp, #52	; 0x34
 80aa532:	f7fe ff0e 	bl	80a9352 <mbedtls_mpi_lset>
 80aa536:	4604      	mov	r4, r0
 80aa538:	2800      	cmp	r0, #0
 80aa53a:	f040 80d1 	bne.w	80aa6e0 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
 80aa53e:	4601      	mov	r1, r0
 80aa540:	a816      	add	r0, sp, #88	; 0x58
 80aa542:	f7fe ff06 	bl	80a9352 <mbedtls_mpi_lset>
 80aa546:	4604      	mov	r4, r0
 80aa548:	2800      	cmp	r0, #0
 80aa54a:	f040 80c9 	bne.w	80aa6e0 <mbedtls_mpi_inv_mod+0x278>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
 80aa54e:	4629      	mov	r1, r5
 80aa550:	a819      	add	r0, sp, #100	; 0x64
 80aa552:	f7fe fefe 	bl	80a9352 <mbedtls_mpi_lset>
 80aa556:	4604      	mov	r4, r0
 80aa558:	2800      	cmp	r0, #0
 80aa55a:	f040 80c1 	bne.w	80aa6e0 <mbedtls_mpi_inv_mod+0x278>

    do
    {
        while( ( TU.p[0] & 1 ) == 0 )
 80aa55e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80aa560:	681b      	ldr	r3, [r3, #0]
 80aa562:	07dd      	lsls	r5, r3, #31
 80aa564:	d44c      	bmi.n	80aa600 <mbedtls_mpi_inv_mod+0x198>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
 80aa566:	2101      	movs	r1, #1
 80aa568:	a807      	add	r0, sp, #28
 80aa56a:	f7ff f805 	bl	80a9578 <mbedtls_mpi_shift_r>
 80aa56e:	4604      	mov	r4, r0
 80aa570:	2800      	cmp	r0, #0
 80aa572:	f040 80b5 	bne.w	80aa6e0 <mbedtls_mpi_inv_mod+0x278>

            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
 80aa576:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80aa578:	681b      	ldr	r3, [r3, #0]
 80aa57a:	07dc      	lsls	r4, r3, #31
 80aa57c:	d410      	bmi.n	80aa5a0 <mbedtls_mpi_inv_mod+0x138>
 80aa57e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80aa580:	681b      	ldr	r3, [r3, #0]
 80aa582:	07d8      	lsls	r0, r3, #31
 80aa584:	d40c      	bmi.n	80aa5a0 <mbedtls_mpi_inv_mod+0x138>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
 80aa586:	2101      	movs	r1, #1
 80aa588:	a80a      	add	r0, sp, #40	; 0x28
 80aa58a:	f7fe fff5 	bl	80a9578 <mbedtls_mpi_shift_r>
 80aa58e:	4604      	mov	r4, r0
 80aa590:	2800      	cmp	r0, #0
 80aa592:	f040 80a5 	bne.w	80aa6e0 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 80aa596:	2101      	movs	r1, #1
 80aa598:	a80d      	add	r0, sp, #52	; 0x34
 80aa59a:	f7fe ffed 	bl	80a9578 <mbedtls_mpi_shift_r>
 80aa59e:	e7da      	b.n	80aa556 <mbedtls_mpi_inv_mod+0xee>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );

            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
 80aa5a0:	a90a      	add	r1, sp, #40	; 0x28
 80aa5a2:	aa10      	add	r2, sp, #64	; 0x40
 80aa5a4:	4608      	mov	r0, r1
 80aa5a6:	f7ff f9bb 	bl	80a9920 <mbedtls_mpi_add_mpi>
 80aa5aa:	4604      	mov	r4, r0
 80aa5ac:	2800      	cmp	r0, #0
 80aa5ae:	f040 8097 	bne.w	80aa6e0 <mbedtls_mpi_inv_mod+0x278>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
 80aa5b2:	a90d      	add	r1, sp, #52	; 0x34
 80aa5b4:	aa04      	add	r2, sp, #16
 80aa5b6:	4608      	mov	r0, r1
 80aa5b8:	f7ff f9d3 	bl	80a9962 <mbedtls_mpi_sub_mpi>
 80aa5bc:	4604      	mov	r4, r0
 80aa5be:	2800      	cmp	r0, #0
 80aa5c0:	d0e1      	beq.n	80aa586 <mbedtls_mpi_inv_mod+0x11e>
 80aa5c2:	e08d      	b.n	80aa6e0 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
        }

        while( ( TV.p[0] & 1 ) == 0 )
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
 80aa5c4:	2101      	movs	r1, #1
 80aa5c6:	a813      	add	r0, sp, #76	; 0x4c
 80aa5c8:	f7fe ffd6 	bl	80a9578 <mbedtls_mpi_shift_r>
 80aa5cc:	4604      	mov	r4, r0
 80aa5ce:	2800      	cmp	r0, #0
 80aa5d0:	f040 8086 	bne.w	80aa6e0 <mbedtls_mpi_inv_mod+0x278>

            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
 80aa5d4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80aa5d6:	681b      	ldr	r3, [r3, #0]
 80aa5d8:	07da      	lsls	r2, r3, #31
 80aa5da:	d416      	bmi.n	80aa60a <mbedtls_mpi_inv_mod+0x1a2>
 80aa5dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80aa5de:	681b      	ldr	r3, [r3, #0]
 80aa5e0:	07db      	lsls	r3, r3, #31
 80aa5e2:	d412      	bmi.n	80aa60a <mbedtls_mpi_inv_mod+0x1a2>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
 80aa5e4:	2101      	movs	r1, #1
 80aa5e6:	a816      	add	r0, sp, #88	; 0x58
 80aa5e8:	f7fe ffc6 	bl	80a9578 <mbedtls_mpi_shift_r>
 80aa5ec:	4604      	mov	r4, r0
 80aa5ee:	2800      	cmp	r0, #0
 80aa5f0:	d176      	bne.n	80aa6e0 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
 80aa5f2:	2101      	movs	r1, #1
 80aa5f4:	a819      	add	r0, sp, #100	; 0x64
 80aa5f6:	f7fe ffbf 	bl	80a9578 <mbedtls_mpi_shift_r>
 80aa5fa:	4604      	mov	r4, r0
 80aa5fc:	2800      	cmp	r0, #0
 80aa5fe:	d16f      	bne.n	80aa6e0 <mbedtls_mpi_inv_mod+0x278>

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
        }

        while( ( TV.p[0] & 1 ) == 0 )
 80aa600:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80aa602:	681b      	ldr	r3, [r3, #0]
 80aa604:	07d9      	lsls	r1, r3, #31
 80aa606:	d411      	bmi.n	80aa62c <mbedtls_mpi_inv_mod+0x1c4>
 80aa608:	e7dc      	b.n	80aa5c4 <mbedtls_mpi_inv_mod+0x15c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );

            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
 80aa60a:	a916      	add	r1, sp, #88	; 0x58
 80aa60c:	aa10      	add	r2, sp, #64	; 0x40
 80aa60e:	4608      	mov	r0, r1
 80aa610:	f7ff f986 	bl	80a9920 <mbedtls_mpi_add_mpi>
 80aa614:	4604      	mov	r4, r0
 80aa616:	2800      	cmp	r0, #0
 80aa618:	d162      	bne.n	80aa6e0 <mbedtls_mpi_inv_mod+0x278>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
 80aa61a:	a919      	add	r1, sp, #100	; 0x64
 80aa61c:	aa04      	add	r2, sp, #16
 80aa61e:	4608      	mov	r0, r1
 80aa620:	f7ff f99f 	bl	80a9962 <mbedtls_mpi_sub_mpi>
 80aa624:	4604      	mov	r4, r0
 80aa626:	2800      	cmp	r0, #0
 80aa628:	d0dc      	beq.n	80aa5e4 <mbedtls_mpi_inv_mod+0x17c>
 80aa62a:	e059      	b.n	80aa6e0 <mbedtls_mpi_inv_mod+0x278>

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
        }

        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
 80aa62c:	a913      	add	r1, sp, #76	; 0x4c
 80aa62e:	a807      	add	r0, sp, #28
 80aa630:	f7ff f881 	bl	80a9736 <mbedtls_mpi_cmp_mpi>
 80aa634:	2800      	cmp	r0, #0
 80aa636:	db1f      	blt.n	80aa678 <mbedtls_mpi_inv_mod+0x210>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
 80aa638:	a907      	add	r1, sp, #28
 80aa63a:	aa13      	add	r2, sp, #76	; 0x4c
 80aa63c:	4608      	mov	r0, r1
 80aa63e:	f7ff f990 	bl	80a9962 <mbedtls_mpi_sub_mpi>
 80aa642:	4604      	mov	r4, r0
 80aa644:	2800      	cmp	r0, #0
 80aa646:	d14b      	bne.n	80aa6e0 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
 80aa648:	a90a      	add	r1, sp, #40	; 0x28
 80aa64a:	aa16      	add	r2, sp, #88	; 0x58
 80aa64c:	4608      	mov	r0, r1
 80aa64e:	f7ff f988 	bl	80a9962 <mbedtls_mpi_sub_mpi>
 80aa652:	4604      	mov	r4, r0
 80aa654:	2800      	cmp	r0, #0
 80aa656:	d143      	bne.n	80aa6e0 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
 80aa658:	aa19      	add	r2, sp, #100	; 0x64
 80aa65a:	a90d      	add	r1, sp, #52	; 0x34
 80aa65c:	4608      	mov	r0, r1
 80aa65e:	f7ff f980 	bl	80a9962 <mbedtls_mpi_sub_mpi>
 80aa662:	4604      	mov	r4, r0
 80aa664:	2800      	cmp	r0, #0
 80aa666:	d13b      	bne.n	80aa6e0 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
 80aa668:	2100      	movs	r1, #0
 80aa66a:	a807      	add	r0, sp, #28
 80aa66c:	f7ff f8a8 	bl	80a97c0 <mbedtls_mpi_cmp_int>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );

    do
 80aa670:	2800      	cmp	r0, #0
 80aa672:	f47f af74 	bne.w	80aa55e <mbedtls_mpi_inv_mod+0xf6>
 80aa676:	e017      	b.n	80aa6a8 <mbedtls_mpi_inv_mod+0x240>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
 80aa678:	a913      	add	r1, sp, #76	; 0x4c
 80aa67a:	aa07      	add	r2, sp, #28
 80aa67c:	4608      	mov	r0, r1
 80aa67e:	f7ff f970 	bl	80a9962 <mbedtls_mpi_sub_mpi>
 80aa682:	4604      	mov	r4, r0
 80aa684:	bb60      	cbnz	r0, 80aa6e0 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
 80aa686:	a916      	add	r1, sp, #88	; 0x58
 80aa688:	aa0a      	add	r2, sp, #40	; 0x28
 80aa68a:	4608      	mov	r0, r1
 80aa68c:	f7ff f969 	bl	80a9962 <mbedtls_mpi_sub_mpi>
 80aa690:	4604      	mov	r4, r0
 80aa692:	bb28      	cbnz	r0, 80aa6e0 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
 80aa694:	aa0d      	add	r2, sp, #52	; 0x34
 80aa696:	a919      	add	r1, sp, #100	; 0x64
 80aa698:	e7e0      	b.n	80aa65c <mbedtls_mpi_inv_mod+0x1f4>
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
 80aa69a:	a916      	add	r1, sp, #88	; 0x58
 80aa69c:	4632      	mov	r2, r6
 80aa69e:	4608      	mov	r0, r1
 80aa6a0:	f7ff f93e 	bl	80a9920 <mbedtls_mpi_add_mpi>
 80aa6a4:	4604      	mov	r4, r0
 80aa6a6:	b9d8      	cbnz	r0, 80aa6e0 <mbedtls_mpi_inv_mod+0x278>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 80aa6a8:	2100      	movs	r1, #0
 80aa6aa:	a816      	add	r0, sp, #88	; 0x58
 80aa6ac:	f7ff f888 	bl	80a97c0 <mbedtls_mpi_cmp_int>
 80aa6b0:	2800      	cmp	r0, #0
 80aa6b2:	dbf2      	blt.n	80aa69a <mbedtls_mpi_inv_mod+0x232>
 80aa6b4:	e006      	b.n	80aa6c4 <mbedtls_mpi_inv_mod+0x25c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );

    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
 80aa6b6:	a916      	add	r1, sp, #88	; 0x58
 80aa6b8:	4632      	mov	r2, r6
 80aa6ba:	4608      	mov	r0, r1
 80aa6bc:	f7ff f951 	bl	80a9962 <mbedtls_mpi_sub_mpi>
 80aa6c0:	4604      	mov	r4, r0
 80aa6c2:	b968      	cbnz	r0, 80aa6e0 <mbedtls_mpi_inv_mod+0x278>
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );

    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 80aa6c4:	4631      	mov	r1, r6
 80aa6c6:	a816      	add	r0, sp, #88	; 0x58
 80aa6c8:	f7ff f835 	bl	80a9736 <mbedtls_mpi_cmp_mpi>
 80aa6cc:	2800      	cmp	r0, #0
 80aa6ce:	daf2      	bge.n	80aa6b6 <mbedtls_mpi_inv_mod+0x24e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
 80aa6d0:	a916      	add	r1, sp, #88	; 0x58
 80aa6d2:	4640      	mov	r0, r8
 80aa6d4:	f7fe fe13 	bl	80a92fe <mbedtls_mpi_copy>
 80aa6d8:	4604      	mov	r4, r0
 80aa6da:	e001      	b.n	80aa6e0 <mbedtls_mpi_inv_mod+0x278>

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 80aa6dc:	f06f 040d 	mvn.w	r4, #13

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );

cleanup:

    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
 80aa6e0:	a804      	add	r0, sp, #16
 80aa6e2:	f7fe fdca 	bl	80a927a <mbedtls_mpi_free>
 80aa6e6:	a807      	add	r0, sp, #28
 80aa6e8:	f7fe fdc7 	bl	80a927a <mbedtls_mpi_free>
 80aa6ec:	a80a      	add	r0, sp, #40	; 0x28
 80aa6ee:	f7fe fdc4 	bl	80a927a <mbedtls_mpi_free>
 80aa6f2:	a80d      	add	r0, sp, #52	; 0x34
 80aa6f4:	f7fe fdc1 	bl	80a927a <mbedtls_mpi_free>
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
 80aa6f8:	a801      	add	r0, sp, #4
 80aa6fa:	f7fe fdbe 	bl	80a927a <mbedtls_mpi_free>
 80aa6fe:	a810      	add	r0, sp, #64	; 0x40
 80aa700:	f7fe fdbb 	bl	80a927a <mbedtls_mpi_free>
 80aa704:	a813      	add	r0, sp, #76	; 0x4c
 80aa706:	f7fe fdb8 	bl	80a927a <mbedtls_mpi_free>
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );
 80aa70a:	a816      	add	r0, sp, #88	; 0x58
 80aa70c:	f7fe fdb5 	bl	80a927a <mbedtls_mpi_free>
 80aa710:	a819      	add	r0, sp, #100	; 0x64
 80aa712:	f7fe fdb2 	bl	80a927a <mbedtls_mpi_free>

    return( ret );
 80aa716:	4620      	mov	r0, r4
 80aa718:	e001      	b.n	80aa71e <mbedtls_mpi_inv_mod+0x2b6>
{
    int ret;
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 80aa71a:	f06f 0003 	mvn.w	r0, #3
    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );

    return( ret );
}
 80aa71e:	b01c      	add	sp, #112	; 0x70
 80aa720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080aa724 <mbedtls_pk_init>:
/*
 * Initialise a mbedtls_pk_context
 */
void mbedtls_pk_init( mbedtls_pk_context *ctx )
{
    if( ctx == NULL )
 80aa724:	b110      	cbz	r0, 80aa72c <mbedtls_pk_init+0x8>
        return;

    ctx->pk_info = NULL;
 80aa726:	2300      	movs	r3, #0
 80aa728:	6003      	str	r3, [r0, #0]
    ctx->pk_ctx = NULL;
 80aa72a:	6043      	str	r3, [r0, #4]
 80aa72c:	4770      	bx	lr

080aa72e <mbedtls_pk_free>:

/*
 * Free (the components of) a mbedtls_pk_context
 */
void mbedtls_pk_free( mbedtls_pk_context *ctx )
{
 80aa72e:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->pk_info == NULL )
 80aa730:	4604      	mov	r4, r0
 80aa732:	b160      	cbz	r0, 80aa74e <mbedtls_pk_free+0x20>
 80aa734:	6803      	ldr	r3, [r0, #0]
 80aa736:	b153      	cbz	r3, 80aa74e <mbedtls_pk_free+0x20>
        return;

    ctx->pk_info->ctx_free_func( ctx->pk_ctx );
 80aa738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80aa73a:	6840      	ldr	r0, [r0, #4]
 80aa73c:	4798      	blx	r3
 80aa73e:	f104 0208 	add.w	r2, r4, #8
#include <limits.h>
#include <stdint.h>

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80aa742:	2300      	movs	r3, #0
 80aa744:	4294      	cmp	r4, r2
 80aa746:	d002      	beq.n	80aa74e <mbedtls_pk_free+0x20>
 80aa748:	7023      	strb	r3, [r4, #0]
 80aa74a:	3401      	adds	r4, #1
 80aa74c:	e7fa      	b.n	80aa744 <mbedtls_pk_free+0x16>
 80aa74e:	bd10      	pop	{r4, pc}

080aa750 <mbedtls_pk_info_from_type>:
/*
 * Get pk_info structure from type
 */
const mbedtls_pk_info_t * mbedtls_pk_info_from_type( mbedtls_pk_type_t pk_type )
{
    switch( pk_type ) {
 80aa750:	2801      	cmp	r0, #1
#endif
        /* MBEDTLS_PK_RSA_ALT omitted on purpose */
        default:
            return( NULL );
    }
}
 80aa752:	4802      	ldr	r0, [pc, #8]	; (80aa75c <mbedtls_pk_info_from_type+0xc>)
 80aa754:	bf18      	it	ne
 80aa756:	2000      	movne	r0, #0
 80aa758:	4770      	bx	lr
 80aa75a:	bf00      	nop
 80aa75c:	080b0278 	.word	0x080b0278

080aa760 <mbedtls_pk_setup>:

/*
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
 80aa760:	b570      	push	{r4, r5, r6, lr}
 80aa762:	460e      	mov	r6, r1
    if( ctx == NULL || info == NULL || ctx->pk_info != NULL )
 80aa764:	4605      	mov	r5, r0
 80aa766:	b148      	cbz	r0, 80aa77c <mbedtls_pk_setup+0x1c>
 80aa768:	b141      	cbz	r1, 80aa77c <mbedtls_pk_setup+0x1c>
 80aa76a:	6804      	ldr	r4, [r0, #0]
 80aa76c:	b934      	cbnz	r4, 80aa77c <mbedtls_pk_setup+0x1c>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
 80aa76e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80aa770:	4798      	blx	r3
 80aa772:	6068      	str	r0, [r5, #4]
 80aa774:	b120      	cbz	r0, 80aa780 <mbedtls_pk_setup+0x20>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );

    ctx->pk_info = info;
 80aa776:	602e      	str	r6, [r5, #0]

    return( 0 );
 80aa778:	4620      	mov	r0, r4
 80aa77a:	bd70      	pop	{r4, r5, r6, pc}
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
    if( ctx == NULL || info == NULL || ctx->pk_info != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 80aa77c:	4801      	ldr	r0, [pc, #4]	; (80aa784 <mbedtls_pk_setup+0x24>)
 80aa77e:	bd70      	pop	{r4, r5, r6, pc}

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );
 80aa780:	4801      	ldr	r0, [pc, #4]	; (80aa788 <mbedtls_pk_setup+0x28>)

    ctx->pk_info = info;

    return( 0 );
}
 80aa782:	bd70      	pop	{r4, r5, r6, pc}
 80aa784:	ffffc180 	.word	0xffffc180
 80aa788:	ffffc080 	.word	0xffffc080

080aa78c <mbedtls_pk_can_do>:
 * Tell if a PK can do the operations of the given type
 */
int mbedtls_pk_can_do( const mbedtls_pk_context *ctx, mbedtls_pk_type_t type )
{
    /* null or NONE context can't do anything */
    if( ctx == NULL || ctx->pk_info == NULL )
 80aa78c:	b120      	cbz	r0, 80aa798 <mbedtls_pk_can_do+0xc>
 80aa78e:	6803      	ldr	r3, [r0, #0]
 80aa790:	b113      	cbz	r3, 80aa798 <mbedtls_pk_can_do+0xc>
        return( 0 );

    return( ctx->pk_info->can_do( type ) );
 80aa792:	68db      	ldr	r3, [r3, #12]
 80aa794:	4608      	mov	r0, r1
 80aa796:	4718      	bx	r3
}
 80aa798:	2000      	movs	r0, #0
 80aa79a:	4770      	bx	lr

080aa79c <mbedtls_pk_verify>:
 * Verify a signature
 */
int mbedtls_pk_verify( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len )
{
 80aa79c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80aa7a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80aa7a4:	460e      	mov	r6, r1
 80aa7a6:	4617      	mov	r7, r2
 80aa7a8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( ctx == NULL || ctx->pk_info == NULL ||
 80aa7ac:	4604      	mov	r4, r0
 80aa7ae:	b910      	cbnz	r0, 80aa7b6 <mbedtls_pk_verify+0x1a>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 80aa7b0:	480f      	ldr	r0, [pc, #60]	; (80aa7f0 <mbedtls_pk_verify+0x54>)
 80aa7b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 */
int mbedtls_pk_verify( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len )
{
    if( ctx == NULL || ctx->pk_info == NULL ||
 80aa7b6:	6802      	ldr	r2, [r0, #0]
 80aa7b8:	2a00      	cmp	r2, #0
 80aa7ba:	d0f9      	beq.n	80aa7b0 <mbedtls_pk_verify+0x14>
 */
static inline int pk_hashlen_helper( mbedtls_md_type_t md_alg, size_t *hash_len )
{
    const mbedtls_md_info_t *md_info;

    if( *hash_len != 0 )
 80aa7bc:	b93b      	cbnz	r3, 80aa7ce <mbedtls_pk_verify+0x32>
        return( 0 );

    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 80aa7be:	4608      	mov	r0, r1
 80aa7c0:	f7fb faa8 	bl	80a5d14 <mbedtls_md_info_from_type>
 80aa7c4:	2800      	cmp	r0, #0
 80aa7c6:	d0f3      	beq.n	80aa7b0 <mbedtls_pk_verify+0x14>
        return( -1 );

    *hash_len = mbedtls_md_get_size( md_info );
 80aa7c8:	f7fb fbde 	bl	80a5f88 <mbedtls_md_get_size>
 80aa7cc:	4603      	mov	r3, r0
{
    if( ctx == NULL || ctx->pk_info == NULL ||
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->verify_func == NULL )
 80aa7ce:	6822      	ldr	r2, [r4, #0]
 80aa7d0:	6915      	ldr	r5, [r2, #16]
 80aa7d2:	b155      	cbz	r5, 80aa7ea <mbedtls_pk_verify+0x4e>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                       sig, sig_len ) );
 80aa7d4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80aa7d8:	f8cd 8020 	str.w	r8, [sp, #32]
 80aa7dc:	463a      	mov	r2, r7
 80aa7de:	4631      	mov	r1, r6
 80aa7e0:	6860      	ldr	r0, [r4, #4]
 80aa7e2:	46ac      	mov	ip, r5
}
 80aa7e4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    if( ctx->pk_info->verify_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                       sig, sig_len ) );
 80aa7e8:	4760      	bx	ip
    if( ctx == NULL || ctx->pk_info == NULL ||
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->verify_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 80aa7ea:	4802      	ldr	r0, [pc, #8]	; (80aa7f4 <mbedtls_pk_verify+0x58>)
 80aa7ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80aa7f0:	ffffc180 	.word	0xffffc180
 80aa7f4:	ffffc100 	.word	0xffffc100

080aa7f8 <mbedtls_pk_sign>:
 */
int mbedtls_pk_sign( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 80aa7f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80aa7fc:	af08      	add	r7, sp, #32
 80aa7fe:	460d      	mov	r5, r1
 80aa800:	e897 0780 	ldmia.w	r7, {r7, r8, r9, sl}
 80aa804:	4616      	mov	r6, r2
    if( ctx == NULL || ctx->pk_info == NULL ||
 80aa806:	4604      	mov	r4, r0
 80aa808:	b910      	cbnz	r0, 80aa810 <mbedtls_pk_sign+0x18>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 80aa80a:	4813      	ldr	r0, [pc, #76]	; (80aa858 <mbedtls_pk_sign+0x60>)
 80aa80c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
int mbedtls_pk_sign( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    if( ctx == NULL || ctx->pk_info == NULL ||
 80aa810:	6802      	ldr	r2, [r0, #0]
 80aa812:	2a00      	cmp	r2, #0
 80aa814:	d0f9      	beq.n	80aa80a <mbedtls_pk_sign+0x12>
 */
static inline int pk_hashlen_helper( mbedtls_md_type_t md_alg, size_t *hash_len )
{
    const mbedtls_md_info_t *md_info;

    if( *hash_len != 0 )
 80aa816:	b93b      	cbnz	r3, 80aa828 <mbedtls_pk_sign+0x30>
        return( 0 );

    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 80aa818:	4608      	mov	r0, r1
 80aa81a:	f7fb fa7b 	bl	80a5d14 <mbedtls_md_info_from_type>
 80aa81e:	2800      	cmp	r0, #0
 80aa820:	d0f3      	beq.n	80aa80a <mbedtls_pk_sign+0x12>
        return( -1 );

    *hash_len = mbedtls_md_get_size( md_info );
 80aa822:	f7fb fbb1 	bl	80a5f88 <mbedtls_md_get_size>
 80aa826:	4603      	mov	r3, r0
{
    if( ctx == NULL || ctx->pk_info == NULL ||
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->sign_func == NULL )
 80aa828:	6822      	ldr	r2, [r4, #0]
 80aa82a:	f8d2 e014 	ldr.w	lr, [r2, #20]
 80aa82e:	f1be 0f00 	cmp.w	lr, #0
 80aa832:	d00d      	beq.n	80aa850 <mbedtls_pk_sign+0x58>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                     sig, sig_len, f_rng, p_rng ) );
 80aa834:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80aa838:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80aa83c:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80aa840:	9708      	str	r7, [sp, #32]
 80aa842:	4632      	mov	r2, r6
 80aa844:	4629      	mov	r1, r5
 80aa846:	6860      	ldr	r0, [r4, #4]
 80aa848:	46f4      	mov	ip, lr
}
 80aa84a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    if( ctx->pk_info->sign_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                     sig, sig_len, f_rng, p_rng ) );
 80aa84e:	4760      	bx	ip
    if( ctx == NULL || ctx->pk_info == NULL ||
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->sign_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 80aa850:	4802      	ldr	r0, [pc, #8]	; (80aa85c <mbedtls_pk_sign+0x64>)
 80aa852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80aa856:	bf00      	nop
 80aa858:	ffffc180 	.word	0xffffc180
 80aa85c:	ffffc100 	.word	0xffffc100

080aa860 <mbedtls_pk_encrypt>:
 */
int mbedtls_pk_encrypt( mbedtls_pk_context *ctx,
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 80aa860:	b5f0      	push	{r4, r5, r6, r7, lr}
 80aa862:	f8dd e020 	ldr.w	lr, [sp, #32]
    if( ctx == NULL || ctx->pk_info == NULL )
 80aa866:	b140      	cbz	r0, 80aa87a <mbedtls_pk_encrypt+0x1a>
 80aa868:	6804      	ldr	r4, [r0, #0]
 80aa86a:	b134      	cbz	r4, 80aa87a <mbedtls_pk_encrypt+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->encrypt_func == NULL )
 80aa86c:	69e4      	ldr	r4, [r4, #28]
 80aa86e:	b134      	cbz	r4, 80aa87e <mbedtls_pk_encrypt+0x1e>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                output, olen, osize, f_rng, p_rng ) );
 80aa870:	46a4      	mov	ip, r4
}
 80aa872:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

    if( ctx->pk_info->encrypt_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                output, olen, osize, f_rng, p_rng ) );
 80aa876:	6840      	ldr	r0, [r0, #4]
 80aa878:	4760      	bx	ip
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
    if( ctx == NULL || ctx->pk_info == NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 80aa87a:	4802      	ldr	r0, [pc, #8]	; (80aa884 <mbedtls_pk_encrypt+0x24>)
 80aa87c:	bdf0      	pop	{r4, r5, r6, r7, pc}

    if( ctx->pk_info->encrypt_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 80aa87e:	4802      	ldr	r0, [pc, #8]	; (80aa888 <mbedtls_pk_encrypt+0x28>)

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
                output, olen, osize, f_rng, p_rng ) );
}
 80aa880:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80aa882:	bf00      	nop
 80aa884:	ffffc180 	.word	0xffffc180
 80aa888:	ffffc100 	.word	0xffffc100

080aa88c <mbedtls_pk_get_bitlen>:
/*
 * Get key size in bits
 */
size_t mbedtls_pk_get_bitlen( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 80aa88c:	b120      	cbz	r0, 80aa898 <mbedtls_pk_get_bitlen+0xc>
 80aa88e:	6803      	ldr	r3, [r0, #0]
 80aa890:	b113      	cbz	r3, 80aa898 <mbedtls_pk_get_bitlen+0xc>
        return( 0 );

    return( ctx->pk_info->get_bitlen( ctx->pk_ctx ) );
 80aa892:	689b      	ldr	r3, [r3, #8]
 80aa894:	6840      	ldr	r0, [r0, #4]
 80aa896:	4718      	bx	r3
}
 80aa898:	2000      	movs	r0, #0
 80aa89a:	4770      	bx	lr

080aa89c <mbedtls_pk_verify_ext>:
 */
int mbedtls_pk_verify_ext( mbedtls_pk_type_t type, const void *options,
                   mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
 80aa89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80aa8a0:	b087      	sub	sp, #28
 80aa8a2:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 80aa8a6:	4683      	mov	fp, r0
 80aa8a8:	e898 0700 	ldmia.w	r8, {r8, r9, sl}
 80aa8ac:	460d      	mov	r5, r1
 80aa8ae:	461f      	mov	r7, r3
 80aa8b0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    if( ctx == NULL || ctx->pk_info == NULL )
 80aa8b2:	4614      	mov	r4, r2
 80aa8b4:	b90a      	cbnz	r2, 80aa8ba <mbedtls_pk_verify_ext+0x1e>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 80aa8b6:	4823      	ldr	r0, [pc, #140]	; (80aa944 <mbedtls_pk_verify_ext+0xa8>)
 80aa8b8:	e040      	b.n	80aa93c <mbedtls_pk_verify_ext+0xa0>
int mbedtls_pk_verify_ext( mbedtls_pk_type_t type, const void *options,
                   mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
                   const unsigned char *hash, size_t hash_len,
                   const unsigned char *sig, size_t sig_len )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 80aa8ba:	6813      	ldr	r3, [r2, #0]
 80aa8bc:	2b00      	cmp	r3, #0
 80aa8be:	d0fa      	beq.n	80aa8b6 <mbedtls_pk_verify_ext+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ! mbedtls_pk_can_do( ctx, type ) )
 80aa8c0:	4601      	mov	r1, r0
 80aa8c2:	4610      	mov	r0, r2
 80aa8c4:	f7ff ff62 	bl	80aa78c <mbedtls_pk_can_do>
 80aa8c8:	2800      	cmp	r0, #0
 80aa8ca:	d034      	beq.n	80aa936 <mbedtls_pk_verify_ext+0x9a>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    if( type == MBEDTLS_PK_RSASSA_PSS )
 80aa8cc:	f1bb 0f06 	cmp.w	fp, #6
 80aa8d0:	d123      	bne.n	80aa91a <mbedtls_pk_verify_ext+0x7e>
#if SIZE_MAX > UINT_MAX
        if( md_alg == MBEDTLS_MD_NONE && UINT_MAX < hash_len )
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
#endif /* SIZE_MAX > UINT_MAX */

        if( options == NULL )
 80aa8d2:	2d00      	cmp	r5, #0
 80aa8d4:	d0ef      	beq.n	80aa8b6 <mbedtls_pk_verify_ext+0x1a>
 *
 * \return          Key length in bytes, or 0 on error
 */
static inline size_t mbedtls_pk_get_len( const mbedtls_pk_context *ctx )
{
    return( ( mbedtls_pk_get_bitlen( ctx ) + 7 ) / 8 );
 80aa8d6:	4620      	mov	r0, r4
 80aa8d8:	f7ff ffd8 	bl	80aa88c <mbedtls_pk_get_bitlen>
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

        pss_opts = (const mbedtls_pk_rsassa_pss_options *) options;

        if( sig_len < mbedtls_pk_get_len( ctx ) )
 80aa8dc:	3007      	adds	r0, #7
 80aa8de:	ebb6 0fd0 	cmp.w	r6, r0, lsr #3
 80aa8e2:	d32a      	bcc.n	80aa93a <mbedtls_pk_verify_ext+0x9e>
        ret = mbedtls_rsa_rsassa_pss_verify_ext( mbedtls_pk_rsa( *ctx ),
                NULL, NULL, MBEDTLS_RSA_PUBLIC,
                md_alg, (unsigned int) hash_len, hash,
                pss_opts->mgf1_hash_id,
                pss_opts->expected_salt_len,
                sig );
 80aa8e4:	686b      	ldr	r3, [r5, #4]
 80aa8e6:	e88d 0280 	stmia.w	sp, {r7, r9}
 80aa8ea:	9304      	str	r3, [sp, #16]
 80aa8ec:	782b      	ldrb	r3, [r5, #0]
 80aa8ee:	f8cd a014 	str.w	sl, [sp, #20]
 80aa8f2:	9303      	str	r3, [sp, #12]
 80aa8f4:	f8cd 8008 	str.w	r8, [sp, #8]
 80aa8f8:	2300      	movs	r3, #0
 80aa8fa:	461a      	mov	r2, r3
 80aa8fc:	4619      	mov	r1, r3
 80aa8fe:	6860      	ldr	r0, [r4, #4]
 80aa900:	f7f8 fada 	bl	80a2eb8 <mbedtls_rsa_rsassa_pss_verify_ext>
        if( ret != 0 )
 80aa904:	b9d0      	cbnz	r0, 80aa93c <mbedtls_pk_verify_ext+0xa0>
 80aa906:	4620      	mov	r0, r4
 80aa908:	f7ff ffc0 	bl	80aa88c <mbedtls_pk_get_bitlen>
            return( ret );

        if( sig_len > mbedtls_pk_get_len( ctx ) )
 80aa90c:	3007      	adds	r0, #7
            return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );

        return( 0 );
 80aa90e:	ebb6 0fd0 	cmp.w	r6, r0, lsr #3
 80aa912:	480d      	ldr	r0, [pc, #52]	; (80aa948 <mbedtls_pk_verify_ext+0xac>)
 80aa914:	bf98      	it	ls
 80aa916:	2000      	movls	r0, #0
 80aa918:	e010      	b.n	80aa93c <mbedtls_pk_verify_ext+0xa0>
        return( MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_RSA_C && MBEDTLS_PKCS1_V21 */
    }

    /* General case: no options */
    if( options != NULL )
 80aa91a:	2d00      	cmp	r5, #0
 80aa91c:	d1cb      	bne.n	80aa8b6 <mbedtls_pk_verify_ext+0x1a>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
 80aa91e:	464b      	mov	r3, r9
 80aa920:	4642      	mov	r2, r8
 80aa922:	4639      	mov	r1, r7
 80aa924:	4620      	mov	r0, r4
 80aa926:	9611      	str	r6, [sp, #68]	; 0x44
 80aa928:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
}
 80aa92c:	b007      	add	sp, #28
 80aa92e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* General case: no options */
    if( options != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
 80aa932:	f7ff bf33 	b.w	80aa79c <mbedtls_pk_verify>
{
    if( ctx == NULL || ctx->pk_info == NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ! mbedtls_pk_can_do( ctx, type ) )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 80aa936:	4805      	ldr	r0, [pc, #20]	; (80aa94c <mbedtls_pk_verify_ext+0xb0>)
 80aa938:	e000      	b.n	80aa93c <mbedtls_pk_verify_ext+0xa0>
            return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

        pss_opts = (const mbedtls_pk_rsassa_pss_options *) options;

        if( sig_len < mbedtls_pk_get_len( ctx ) )
            return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 80aa93a:	4805      	ldr	r0, [pc, #20]	; (80aa950 <mbedtls_pk_verify_ext+0xb4>)
    /* General case: no options */
    if( options != NULL )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
}
 80aa93c:	b007      	add	sp, #28
 80aa93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80aa942:	bf00      	nop
 80aa944:	ffffc180 	.word	0xffffc180
 80aa948:	ffffc700 	.word	0xffffc700
 80aa94c:	ffffc100 	.word	0xffffc100
 80aa950:	ffffbc80 	.word	0xffffbc80

080aa954 <mbedtls_pk_get_name>:
/*
 * Access the PK type name
 */
const char *mbedtls_pk_get_name( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 80aa954:	b118      	cbz	r0, 80aa95e <mbedtls_pk_get_name+0xa>
 80aa956:	6803      	ldr	r3, [r0, #0]
 80aa958:	b10b      	cbz	r3, 80aa95e <mbedtls_pk_get_name+0xa>
        return( "invalid PK" );

    return( ctx->pk_info->name );
 80aa95a:	6858      	ldr	r0, [r3, #4]
 80aa95c:	4770      	bx	lr
 * Access the PK type name
 */
const char *mbedtls_pk_get_name( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
        return( "invalid PK" );
 80aa95e:	4801      	ldr	r0, [pc, #4]	; (80aa964 <mbedtls_pk_get_name+0x10>)

    return( ctx->pk_info->name );
}
 80aa960:	4770      	bx	lr
 80aa962:	bf00      	nop
 80aa964:	080b1064 	.word	0x080b1064

080aa968 <mbedtls_pk_get_type>:
/*
 * Access the PK type
 */
mbedtls_pk_type_t mbedtls_pk_get_type( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 80aa968:	b110      	cbz	r0, 80aa970 <mbedtls_pk_get_type+0x8>
 80aa96a:	6800      	ldr	r0, [r0, #0]
 80aa96c:	b100      	cbz	r0, 80aa970 <mbedtls_pk_get_type+0x8>
        return( MBEDTLS_PK_NONE );

    return( ctx->pk_info->type );
 80aa96e:	7800      	ldrb	r0, [r0, #0]
}
 80aa970:	4770      	bx	lr
	...

080aa974 <_ZL14aes_gen_tablesv>:
#define MUL(x,y) ( ( x && y ) ? pow[(log[x]+log[y]) % 255] : 0 )

static int aes_init_done = 0;

static void aes_gen_tables( void )
{
 80aa974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80aa978:	f6ad 0d14 	subw	sp, sp, #2068	; 0x814
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 80aa97c:	2301      	movs	r3, #1
 80aa97e:	2200      	movs	r2, #0
    {
        pow[i] = x;
        log[x] = i;
 80aa980:	f50d 6082 	add.w	r0, sp, #1040	; 0x410
    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
    {
        pow[i] = x;
 80aa984:	a904      	add	r1, sp, #16
 80aa986:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
 80aa98a:	f013 0180 	ands.w	r1, r3, #128	; 0x80
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
    {
        pow[i] = x;
        log[x] = i;
 80aa98e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        x = ( x ^ XTIME( x ) ) & 0xFF;
 80aa992:	bf18      	it	ne
 80aa994:	211b      	movne	r1, #27
 80aa996:	ea83 0343 	eor.w	r3, r3, r3, lsl #1
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 80aa99a:	3201      	adds	r2, #1
    {
        pow[i] = x;
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
 80aa99c:	404b      	eors	r3, r1
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 80aa99e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    {
        pow[i] = x;
        log[x] = i;
        x = ( x ^ XTIME( x ) ) & 0xFF;
 80aa9a2:	b2db      	uxtb	r3, r3
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 80aa9a4:	d1ee      	bne.n	80aa984 <_ZL14aes_gen_tablesv+0x10>
    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
    {
        RCON[i] = (uint32_t) x;
 80aa9a6:	4c66      	ldr	r4, [pc, #408]	; (80aab40 <_ZL14aes_gen_tablesv+0x1cc>)
 80aa9a8:	2301      	movs	r3, #1
 80aa9aa:	2200      	movs	r2, #0
        x = XTIME( x ) & 0xFF;
 80aa9ac:	f013 0180 	ands.w	r1, r3, #128	; 0x80
    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
    {
        RCON[i] = (uint32_t) x;
 80aa9b0:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        x = XTIME( x ) & 0xFF;
 80aa9b4:	bf18      	it	ne
 80aa9b6:	211b      	movne	r1, #27
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 80aa9b8:	3201      	adds	r2, #1
    {
        RCON[i] = (uint32_t) x;
        x = XTIME( x ) & 0xFF;
 80aa9ba:	ea81 0343 	eor.w	r3, r1, r3, lsl #1
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 80aa9be:	2a0a      	cmp	r2, #10
    {
        RCON[i] = (uint32_t) x;
        x = XTIME( x ) & 0xFF;
 80aa9c0:	b2db      	uxtb	r3, r3
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 80aa9c2:	d1f3      	bne.n	80aa9ac <_ZL14aes_gen_tablesv+0x38>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 80aa9c4:	4e5f      	ldr	r6, [pc, #380]	; (80aab44 <_ZL14aes_gen_tablesv+0x1d0>)
 80aa9c6:	2363      	movs	r3, #99	; 0x63
    RSb[0x63] = 0x00;
 80aa9c8:	4d5f      	ldr	r5, [pc, #380]	; (80aab48 <_ZL14aes_gen_tablesv+0x1d4>)
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 80aa9ca:	7033      	strb	r3, [r6, #0]
    RSb[0x63] = 0x00;
 80aa9cc:	2300      	movs	r3, #0
 80aa9ce:	f885 3063 	strb.w	r3, [r5, #99]	; 0x63

    for( i = 1; i < 256; i++ )
 80aa9d2:	2401      	movs	r4, #1
    {
        x = pow[255 - log[i]];
 80aa9d4:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 80aa9d8:	aa04      	add	r2, sp, #16
 80aa9da:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80aa9de:	f852 e023 	ldr.w	lr, [r2, r3, lsl #2]

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 80aa9e2:	ea4f 11ee 	mov.w	r1, lr, asr #7
 80aa9e6:	ea41 014e 	orr.w	r1, r1, lr, lsl #1
 80aa9ea:	b2c9      	uxtb	r1, r1
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 80aa9ec:	11ca      	asrs	r2, r1, #7
 80aa9ee:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80aa9f2:	b2d2      	uxtb	r2, r2
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 80aa9f4:	11d3      	asrs	r3, r2, #7
 80aa9f6:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 80aa9fa:	b2db      	uxtb	r3, r3
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y ^ 0x63;
 80aa9fc:	f08e 0e63 	eor.w	lr, lr, #99	; 0x63
        x = pow[255 - log[i]];

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 80aaa00:	11df      	asrs	r7, r3, #7
        x ^= y ^ 0x63;
 80aaa02:	ea8e 0101 	eor.w	r1, lr, r1
        x = pow[255 - log[i]];

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 80aaa06:	ea47 0743 	orr.w	r7, r7, r3, lsl #1
        x ^= y ^ 0x63;
 80aaa0a:	404a      	eors	r2, r1
 80aaa0c:	4053      	eors	r3, r2
 80aaa0e:	b2fa      	uxtb	r2, r7
 80aaa10:	4053      	eors	r3, r2

        FSb[i] = (unsigned char) x;
 80aaa12:	5533      	strb	r3, [r6, r4]
        RSb[x] = (unsigned char) i;
 80aaa14:	54ec      	strb	r4, [r5, r3]
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
    RSb[0x63] = 0x00;

    for( i = 1; i < 256; i++ )
 80aaa16:	3401      	adds	r4, #1
 80aaa18:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 80aaa1c:	d1da      	bne.n	80aa9d4 <_ZL14aes_gen_tablesv+0x60>
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80aaa1e:	6b83      	ldr	r3, [r0, #56]	; 0x38
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 80aaa20:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80aaa22:	9301      	str	r3, [sp, #4]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 80aaa24:	6a43      	ldr	r3, [r0, #36]	; 0x24
    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
 80aaa26:	f8df e11c 	ldr.w	lr, [pc, #284]	; 80aab44 <_ZL14aes_gen_tablesv+0x1d0>
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 80aaa2a:	9302      	str	r3, [sp, #8]
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 80aaa2c:	6b43      	ldr	r3, [r0, #52]	; 0x34
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
                 ( (uint32_t) z << 24 );
 80aaa2e:	f8df c12c 	ldr.w	ip, [pc, #300]	; 80aab5c <_ZL14aes_gen_tablesv+0x1e8>

        FT1[i] = ROTL8( FT0[i] );
 80aaa32:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80aab60 <_ZL14aes_gen_tablesv+0x1ec>
        FT2[i] = ROTL8( FT1[i] );
 80aaa36:	f8df 912c 	ldr.w	r9, [pc, #300]	; 80aab64 <_ZL14aes_gen_tablesv+0x1f0>
        FT3[i] = ROTL8( FT2[i] );
 80aaa3a:	f8df a12c 	ldr.w	sl, [pc, #300]	; 80aab68 <_ZL14aes_gen_tablesv+0x1f4>

        x = RSb[i];
 80aaa3e:	f8df b108 	ldr.w	fp, [pc, #264]	; 80aab48 <_ZL14aes_gen_tablesv+0x1d4>

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 80aaa42:	9303      	str	r3, [sp, #12]
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 80aaa44:	2200      	movs	r2, #0
    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
 80aaa46:	f812 000e 	ldrb.w	r0, [r2, lr]
 80aaa4a:	0094      	lsls	r4, r2, #2
        y = XTIME( x ) & 0xFF;
 80aaa4c:	f010 0f80 	tst.w	r0, #128	; 0x80
 80aaa50:	bf14      	ite	ne
 80aaa52:	211b      	movne	r1, #27
 80aaa54:	2100      	moveq	r1, #0
 80aaa56:	ea81 0140 	eor.w	r1, r1, r0, lsl #1
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
 80aaa5a:	0403      	lsls	r3, r0, #16
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
    {
        x = FSb[i];
        y = XTIME( x ) & 0xFF;
 80aaa5c:	b2c9      	uxtb	r1, r1
        z =  ( y ^ x ) & 0xFF;

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
                 ( (uint32_t) x << 16 ) ^
 80aaa5e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80aaa62:	404b      	eors	r3, r1
 80aaa64:	4041      	eors	r1, r0
 80aaa66:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
                 ( (uint32_t) z << 24 );
 80aaa6a:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]

        FT1[i] = ROTL8( FT0[i] );
 80aaa6e:	ea4f 6333 	mov.w	r3, r3, ror #24
 80aaa72:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
        FT2[i] = ROTL8( FT1[i] );
 80aaa76:	ea4f 6333 	mov.w	r3, r3, ror #24
 80aaa7a:	f849 3022 	str.w	r3, [r9, r2, lsl #2]
        FT3[i] = ROTL8( FT2[i] );
 80aaa7e:	ea4f 6333 	mov.w	r3, r3, ror #24
 80aaa82:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]

        x = RSb[i];
 80aaa86:	f81b 3002 	ldrb.w	r3, [fp, r2]

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80aaa8a:	b1d3      	cbz	r3, 80aaac2 <_ZL14aes_gen_tablesv+0x14e>
 80aaa8c:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 80aaa90:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80aaa94:	9801      	ldr	r0, [sp, #4]
 80aaa96:	1845      	adds	r5, r0, r1
 80aaa98:	20ff      	movs	r0, #255	; 0xff
 80aaa9a:	fb95 f6f0 	sdiv	r6, r5, r0
 80aaa9e:	ebc6 2606 	rsb	r6, r6, r6, lsl #8
 80aaaa2:	1bae      	subs	r6, r5, r6
 80aaaa4:	ad04      	add	r5, sp, #16
 80aaaa6:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 80aaaaa:	9e02      	ldr	r6, [sp, #8]
 80aaaac:	4431      	add	r1, r6
 80aaaae:	fb91 f0f0 	sdiv	r0, r1, r0
 80aaab2:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 80aaab6:	1a09      	subs	r1, r1, r0
 80aaab8:	a804      	add	r0, sp, #16
 80aaaba:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80aaabe:	0209      	lsls	r1, r1, #8
 80aaac0:	e001      	b.n	80aaac6 <_ZL14aes_gen_tablesv+0x152>
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80aaac2:	461d      	mov	r5, r3
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 80aaac4:	4619      	mov	r1, r3
        FT2[i] = ROTL8( FT1[i] );
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80aaac6:	404d      	eors	r5, r1
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 80aaac8:	b183      	cbz	r3, 80aaaec <_ZL14aes_gen_tablesv+0x178>
 80aaaca:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 80aaace:	9803      	ldr	r0, [sp, #12]
 80aaad0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80aaad4:	4401      	add	r1, r0
 80aaad6:	20ff      	movs	r0, #255	; 0xff
 80aaad8:	fb91 f0f0 	sdiv	r0, r1, r0
 80aaadc:	ebc0 2000 	rsb	r0, r0, r0, lsl #8
 80aaae0:	1a08      	subs	r0, r1, r0
 80aaae2:	a904      	add	r1, sp, #16
 80aaae4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80aaae8:	0409      	lsls	r1, r1, #16
 80aaaea:	e000      	b.n	80aaaee <_ZL14aes_gen_tablesv+0x17a>
 80aaaec:	4619      	mov	r1, r3
        FT3[i] = ROTL8( FT2[i] );

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 80aaaee:	404d      	eors	r5, r1
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 80aaaf0:	b173      	cbz	r3, 80aab10 <_ZL14aes_gen_tablesv+0x19c>
 80aaaf2:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 80aaaf6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80aaafa:	21ff      	movs	r1, #255	; 0xff
 80aaafc:	443b      	add	r3, r7
 80aaafe:	fb93 f1f1 	sdiv	r1, r3, r1
 80aab02:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 80aab06:	1a59      	subs	r1, r3, r1
 80aab08:	ab04      	add	r3, sp, #16
 80aab0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80aab0e:	061b      	lsls	r3, r3, #24

        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 80aab10:	405d      	eors	r5, r3
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 80aab12:	4b0e      	ldr	r3, [pc, #56]	; (80aab4c <_ZL14aes_gen_tablesv+0x1d8>)
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 80aab14:	3201      	adds	r2, #1
        x = RSb[i];

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 80aab16:	50e5      	str	r5, [r4, r3]

        RT1[i] = ROTL8( RT0[i] );
 80aab18:	4b0d      	ldr	r3, [pc, #52]	; (80aab50 <_ZL14aes_gen_tablesv+0x1dc>)
 80aab1a:	ea4f 6535 	mov.w	r5, r5, ror #24
 80aab1e:	50e5      	str	r5, [r4, r3]
        RT2[i] = ROTL8( RT1[i] );
 80aab20:	4b0c      	ldr	r3, [pc, #48]	; (80aab54 <_ZL14aes_gen_tablesv+0x1e0>)
 80aab22:	ea4f 6535 	mov.w	r5, r5, ror #24
 80aab26:	50e5      	str	r5, [r4, r3]
        RT3[i] = ROTL8( RT2[i] );
 80aab28:	4b0b      	ldr	r3, [pc, #44]	; (80aab58 <_ZL14aes_gen_tablesv+0x1e4>)
 80aab2a:	ea4f 6535 	mov.w	r5, r5, ror #24
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 80aab2e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );

        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
 80aab32:	50e5      	str	r5, [r4, r3]
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 80aab34:	d187      	bne.n	80aaa46 <_ZL14aes_gen_tablesv+0xd2>

        RT1[i] = ROTL8( RT0[i] );
        RT2[i] = ROTL8( RT1[i] );
        RT3[i] = ROTL8( RT2[i] );
    }
}
 80aab36:	f60d 0d14 	addw	sp, sp, #2068	; 0x814
 80aab3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80aab3e:	bf00      	nop
 80aab40:	200029bc 	.word	0x200029bc
 80aab44:	200018bc 	.word	0x200018bc
 80aab48:	200017bc 	.word	0x200017bc
 80aab4c:	20001dbc 	.word	0x20001dbc
 80aab50:	200021bc 	.word	0x200021bc
 80aab54:	200025bc 	.word	0x200025bc
 80aab58:	200019bc 	.word	0x200019bc
 80aab5c:	200007bc 	.word	0x200007bc
 80aab60:	20000bbc 	.word	0x20000bbc
 80aab64:	20000fbc 	.word	0x20000fbc
 80aab68:	200013bc 	.word	0x200013bc

080aab6c <mbedtls_aes_init>:

#endif /* MBEDTLS_AES_ROM_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 80aab6c:	f44f 728c 	mov.w	r2, #280	; 0x118
 80aab70:	2100      	movs	r1, #0
 80aab72:	f004 bae4 	b.w	80af13e <memset>

080aab76 <mbedtls_aes_free>:
}

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
 80aab76:	b138      	cbz	r0, 80aab88 <mbedtls_aes_free+0x12>
 80aab78:	f500 728c 	add.w	r2, r0, #280	; 0x118

#if !defined(MBEDTLS_AES_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 80aab7c:	2300      	movs	r3, #0
 80aab7e:	4290      	cmp	r0, r2
 80aab80:	d002      	beq.n	80aab88 <mbedtls_aes_free+0x12>
 80aab82:	7003      	strb	r3, [r0, #0]
 80aab84:	3001      	adds	r0, #1
 80aab86:	e7fa      	b.n	80aab7e <mbedtls_aes_free+0x8>
 80aab88:	4770      	bx	lr
	...

080aab8c <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 80aab8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    unsigned int i;
    uint32_t *RK;

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 80aab8e:	4e7a      	ldr	r6, [pc, #488]	; (80aad78 <mbedtls_aes_setkey_enc+0x1ec>)
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 80aab90:	4604      	mov	r4, r0
    unsigned int i;
    uint32_t *RK;

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 80aab92:	6833      	ldr	r3, [r6, #0]
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 80aab94:	460f      	mov	r7, r1
 80aab96:	4615      	mov	r5, r2
    unsigned int i;
    uint32_t *RK;

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 80aab98:	b91b      	cbnz	r3, 80aaba2 <mbedtls_aes_setkey_enc+0x16>
    {
        aes_gen_tables();
 80aab9a:	f7ff feeb 	bl	80aa974 <_ZL14aes_gen_tablesv>
        aes_init_done = 1;
 80aab9e:	2301      	movs	r3, #1
 80aaba0:	6033      	str	r3, [r6, #0]

    }
#endif

    switch( keybits )
 80aaba2:	2dc0      	cmp	r5, #192	; 0xc0
 80aaba4:	d007      	beq.n	80aabb6 <mbedtls_aes_setkey_enc+0x2a>
 80aaba6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80aabaa:	d006      	beq.n	80aabba <mbedtls_aes_setkey_enc+0x2e>
 80aabac:	2d80      	cmp	r5, #128	; 0x80
 80aabae:	f040 80dd 	bne.w	80aad6c <mbedtls_aes_setkey_enc+0x1e0>
    {
        case 128: ctx->nr = 10; break;
 80aabb2:	230a      	movs	r3, #10
 80aabb4:	e002      	b.n	80aabbc <mbedtls_aes_setkey_enc+0x30>
        case 192: ctx->nr = 12; break;
 80aabb6:	230c      	movs	r3, #12
 80aabb8:	e000      	b.n	80aabbc <mbedtls_aes_setkey_enc+0x30>
        case 256: ctx->nr = 14; break;
 80aabba:	230e      	movs	r3, #14
 80aabbc:	6023      	str	r3, [r4, #0]

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 80aabbe:	f104 0308 	add.w	r3, r4, #8
 80aabc2:	6063      	str	r3, [r4, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 80aabc4:	096d      	lsrs	r5, r5, #5
 80aabc6:	2000      	movs	r0, #0
 80aabc8:	42a8      	cmp	r0, r5
 80aabca:	d010      	beq.n	80aabee <mbedtls_aes_setkey_enc+0x62>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
 80aabcc:	eb07 0180 	add.w	r1, r7, r0, lsl #2
 80aabd0:	788a      	ldrb	r2, [r1, #2]
 80aabd2:	784e      	ldrb	r6, [r1, #1]
 80aabd4:	0412      	lsls	r2, r2, #16
 80aabd6:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 80aabda:	f817 6020 	ldrb.w	r6, [r7, r0, lsl #2]
 80aabde:	78c9      	ldrb	r1, [r1, #3]
 80aabe0:	4332      	orrs	r2, r6
 80aabe2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80aabe6:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 80aabea:	3001      	adds	r0, #1
 80aabec:	e7ec      	b.n	80aabc8 <mbedtls_aes_setkey_enc+0x3c>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 80aabee:	6822      	ldr	r2, [r4, #0]
 80aabf0:	2a0c      	cmp	r2, #12
 80aabf2:	d031      	beq.n	80aac58 <mbedtls_aes_setkey_enc+0xcc>
 80aabf4:	2a0e      	cmp	r2, #14
 80aabf6:	d068      	beq.n	80aacca <mbedtls_aes_setkey_enc+0x13e>
 80aabf8:	2a0a      	cmp	r2, #10
 80aabfa:	f040 80ba 	bne.w	80aad72 <mbedtls_aes_setkey_enc+0x1e6>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 80aabfe:	4f5f      	ldr	r7, [pc, #380]	; (80aad7c <mbedtls_aes_setkey_enc+0x1f0>)
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 80aac00:	4e5f      	ldr	r6, [pc, #380]	; (80aad80 <mbedtls_aes_setkey_enc+0x1f4>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 80aac02:	2500      	movs	r5, #0
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 80aac04:	68dc      	ldr	r4, [r3, #12]
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 80aac06:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 80aac0a:	681a      	ldr	r2, [r3, #0]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 80aac0c:	3501      	adds	r5, #1
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 80aac0e:	4051      	eors	r1, r2
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 80aac10:	f3c4 2207 	ubfx	r2, r4, #8, #8
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 80aac14:	5cb0      	ldrb	r0, [r6, r2]
 80aac16:	0e22      	lsrs	r2, r4, #24
 80aac18:	5cb2      	ldrb	r2, [r6, r2]
 80aac1a:	4041      	eors	r1, r0
 80aac1c:	ea81 4102 	eor.w	r1, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 80aac20:	b2e2      	uxtb	r2, r4
            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 80aac22:	5cb2      	ldrb	r2, [r6, r2]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 80aac24:	2d0a      	cmp	r5, #10
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 80aac26:	ea81 6102 	eor.w	r1, r1, r2, lsl #24

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 80aac2a:	f3c4 4207 	ubfx	r2, r4, #16, #8
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 80aac2e:	5cb2      	ldrb	r2, [r6, r2]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 80aac30:	f103 0310 	add.w	r3, r3, #16
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 80aac34:	ea81 2202 	eor.w	r2, r1, r2, lsl #8
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
 80aac38:	f853 1c0c 	ldr.w	r1, [r3, #-12]
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 80aac3c:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
 80aac3e:	ea82 0201 	eor.w	r2, r2, r1
                RK[6]  = RK[2] ^ RK[5];
 80aac42:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );

                RK[5]  = RK[1] ^ RK[4];
 80aac46:	605a      	str	r2, [r3, #4]
                RK[6]  = RK[2] ^ RK[5];
 80aac48:	ea82 0201 	eor.w	r2, r2, r1
 80aac4c:	609a      	str	r2, [r3, #8]
                RK[7]  = RK[3] ^ RK[6];
 80aac4e:	ea82 0204 	eor.w	r2, r2, r4
 80aac52:	60da      	str	r2, [r3, #12]

    switch( ctx->nr )
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 80aac54:	d1d6      	bne.n	80aac04 <mbedtls_aes_setkey_enc+0x78>
 80aac56:	e08c      	b.n	80aad72 <mbedtls_aes_setkey_enc+0x1e6>

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
 80aac58:	4e48      	ldr	r6, [pc, #288]	; (80aad7c <mbedtls_aes_setkey_enc+0x1f0>)
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 80aac5a:	4d49      	ldr	r5, [pc, #292]	; (80aad80 <mbedtls_aes_setkey_enc+0x1f4>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 80aac5c:	2400      	movs	r4, #0
            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80aac5e:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 80aac62:	6958      	ldr	r0, [r3, #20]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80aac64:	681a      	ldr	r2, [r3, #0]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 80aac66:	3401      	adds	r4, #1
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80aac68:	404a      	eors	r2, r1
        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 80aac6a:	f3c0 2107 	ubfx	r1, r0, #8, #8
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80aac6e:	5c69      	ldrb	r1, [r5, r1]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 80aac70:	2c08      	cmp	r4, #8
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80aac72:	ea82 0201 	eor.w	r2, r2, r1
 80aac76:	ea4f 6110 	mov.w	r1, r0, lsr #24
 80aac7a:	5c69      	ldrb	r1, [r5, r1]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 80aac7c:	f103 0318 	add.w	r3, r3, #24
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80aac80:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 80aac84:	b2c1      	uxtb	r1, r0
            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80aac86:	5c69      	ldrb	r1, [r5, r1]
 80aac88:	ea82 6201 	eor.w	r2, r2, r1, lsl #24

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 80aac8c:	f3c0 4107 	ubfx	r1, r0, #16, #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80aac90:	5c69      	ldrb	r1, [r5, r1]
 80aac92:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
 80aac96:	f853 1c14 	ldr.w	r1, [r3, #-20]
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 80aac9a:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
 80aac9c:	ea82 0201 	eor.w	r2, r2, r1
                RK[8]  = RK[2] ^ RK[7];
 80aaca0:	f853 1c10 	ldr.w	r1, [r3, #-16]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
 80aaca4:	605a      	str	r2, [r3, #4]
                RK[8]  = RK[2] ^ RK[7];
 80aaca6:	ea82 0201 	eor.w	r2, r2, r1
                RK[9]  = RK[3] ^ RK[8];
 80aacaa:	f853 1c0c 	ldr.w	r1, [r3, #-12]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
 80aacae:	609a      	str	r2, [r3, #8]
                RK[9]  = RK[3] ^ RK[8];
 80aacb0:	ea82 0201 	eor.w	r2, r2, r1
                RK[10] = RK[4] ^ RK[9];
 80aacb4:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );

                RK[7]  = RK[1] ^ RK[6];
                RK[8]  = RK[2] ^ RK[7];
                RK[9]  = RK[3] ^ RK[8];
 80aacb8:	60da      	str	r2, [r3, #12]
                RK[10] = RK[4] ^ RK[9];
 80aacba:	ea82 0201 	eor.w	r2, r2, r1
 80aacbe:	611a      	str	r2, [r3, #16]
                RK[11] = RK[5] ^ RK[10];
 80aacc0:	ea82 0200 	eor.w	r2, r2, r0
 80aacc4:	615a      	str	r2, [r3, #20]
            }
            break;

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 80aacc6:	d1ca      	bne.n	80aac5e <mbedtls_aes_setkey_enc+0xd2>
 80aacc8:	e053      	b.n	80aad72 <mbedtls_aes_setkey_enc+0x1e6>

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
 80aacca:	4e2c      	ldr	r6, [pc, #176]	; (80aad7c <mbedtls_aes_setkey_enc+0x1f0>)
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 80aaccc:	482c      	ldr	r0, [pc, #176]	; (80aad80 <mbedtls_aes_setkey_enc+0x1f4>)
    for( i = 0; i < ( keybits >> 5 ); i++ )
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 80aacce:	2500      	movs	r5, #0
            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80aacd0:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 80aacd4:	69dc      	ldr	r4, [r3, #28]
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80aacd6:	681a      	ldr	r2, [r3, #0]
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
 80aacd8:	685f      	ldr	r7, [r3, #4]
            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80aacda:	4051      	eors	r1, r2
        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 80aacdc:	f3c4 2207 	ubfx	r2, r4, #8, #8
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80aace0:	5c82      	ldrb	r2, [r0, r2]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 80aace2:	3501      	adds	r5, #1
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80aace4:	4051      	eors	r1, r2
 80aace6:	0e22      	lsrs	r2, r4, #24
 80aace8:	5c82      	ldrb	r2, [r0, r2]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 80aacea:	2d07      	cmp	r5, #7
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80aacec:	ea81 4102 	eor.w	r1, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 80aacf0:	b2e2      	uxtb	r2, r4
            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80aacf2:	5c82      	ldrb	r2, [r0, r2]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 80aacf4:	f103 0320 	add.w	r3, r3, #32
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80aacf8:	ea81 6102 	eor.w	r1, r1, r2, lsl #24

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 80aacfc:	f3c4 4207 	ubfx	r2, r4, #16, #8
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80aad00:	5c82      	ldrb	r2, [r0, r2]
 80aad02:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
 80aad06:	f853 2c18 	ldr.w	r2, [r3, #-24]
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 80aad0a:	6019      	str	r1, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
 80aad0c:	ea81 0107 	eor.w	r1, r1, r7
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];
 80aad10:	f853 7c14 	ldr.w	r7, [r3, #-20]
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
 80aad14:	6059      	str	r1, [r3, #4]
                RK[10] = RK[2] ^ RK[9];
 80aad16:	ea81 0102 	eor.w	r1, r1, r2
                RK[11] = RK[3] ^ RK[10];
 80aad1a:	ea87 0701 	eor.w	r7, r7, r1
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );

                RK[9]  = RK[1] ^ RK[8];
                RK[10] = RK[2] ^ RK[9];
 80aad1e:	6099      	str	r1, [r3, #8]
                RK[11] = RK[3] ^ RK[10];
 80aad20:	60df      	str	r7, [r3, #12]

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 80aad22:	b2fa      	uxtb	r2, r7
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 80aad24:	5c82      	ldrb	r2, [r0, r2]
 80aad26:	f853 1c10 	ldr.w	r1, [r3, #-16]
 80aad2a:	ea81 0102 	eor.w	r1, r1, r2
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 80aad2e:	ea4f 6217 	mov.w	r2, r7, lsr #24
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 80aad32:	5c82      	ldrb	r2, [r0, r2]
 80aad34:	ea81 6102 	eor.w	r1, r1, r2, lsl #24
                RK[10] = RK[2] ^ RK[9];
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 80aad38:	f3c7 2207 	ubfx	r2, r7, #8, #8
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 80aad3c:	5c82      	ldrb	r2, [r0, r2]
 80aad3e:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80aad42:	ea81 2102 	eor.w	r1, r1, r2, lsl #8
 80aad46:	5dc2      	ldrb	r2, [r0, r7]
 80aad48:	ea81 4202 	eor.w	r2, r1, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
 80aad4c:	f853 1c0c 	ldr.w	r1, [r3, #-12]

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 80aad50:	611a      	str	r2, [r3, #16]

                RK[13] = RK[5] ^ RK[12];
 80aad52:	ea82 0201 	eor.w	r2, r2, r1
                RK[14] = RK[6] ^ RK[13];
 80aad56:	f853 1c08 	ldr.w	r1, [r3, #-8]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );

                RK[13] = RK[5] ^ RK[12];
 80aad5a:	615a      	str	r2, [r3, #20]
                RK[14] = RK[6] ^ RK[13];
 80aad5c:	ea82 0201 	eor.w	r2, r2, r1
 80aad60:	619a      	str	r2, [r3, #24]
                RK[15] = RK[7] ^ RK[14];
 80aad62:	ea82 0204 	eor.w	r2, r2, r4
 80aad66:	61da      	str	r2, [r3, #28]
            }
            break;

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 80aad68:	d1b2      	bne.n	80aacd0 <mbedtls_aes_setkey_enc+0x144>
 80aad6a:	e002      	b.n	80aad72 <mbedtls_aes_setkey_enc+0x1e6>
    switch( keybits )
    {
        case 128: ctx->nr = 10; break;
        case 192: ctx->nr = 12; break;
        case 256: ctx->nr = 14; break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 80aad6c:	f06f 001f 	mvn.w	r0, #31
 80aad70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                RK[15] = RK[7] ^ RK[14];
            }
            break;
    }

    return( 0 );
 80aad72:	2000      	movs	r0, #0
}
 80aad74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80aad76:	bf00      	nop
 80aad78:	200007b8 	.word	0x200007b8
 80aad7c:	200029bc 	.word	0x200029bc
 80aad80:	200018bc 	.word	0x200018bc

080aad84 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 80aad84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80aad88:	4604      	mov	r4, r0
 80aad8a:	460d      	mov	r5, r1
 80aad8c:	4616      	mov	r6, r2
 80aad8e:	b0c9      	sub	sp, #292	; 0x124
    int i, j, ret;
    mbedtls_aes_context cty;
    uint32_t *RK;
    uint32_t *SK;

    mbedtls_aes_init( &cty );
 80aad90:	a802      	add	r0, sp, #8
 80aad92:	f7ff feeb 	bl	80aab6c <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 80aad96:	f104 0308 	add.w	r3, r4, #8
 80aad9a:	6063      	str	r3, [r4, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 80aad9c:	4632      	mov	r2, r6
 80aad9e:	4629      	mov	r1, r5
 80aada0:	a802      	add	r0, sp, #8
 80aada2:	f7ff fef3 	bl	80aab8c <mbedtls_aes_setkey_enc>
 80aada6:	4680      	mov	r8, r0
 80aada8:	2800      	cmp	r0, #0
 80aadaa:	d14b      	bne.n	80aae44 <mbedtls_aes_setkey_dec+0xc0>
        goto exit;

    ctx->nr = cty.nr;
 80aadac:	9902      	ldr	r1, [sp, #8]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 80aadae:	9803      	ldr	r0, [sp, #12]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
        goto exit;

    ctx->nr = cty.nr;
 80aadb0:	6021      	str	r1, [r4, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 80aadb2:	010a      	lsls	r2, r1, #4
 80aadb4:	1883      	adds	r3, r0, r2

    *RK++ = *SK++;
 80aadb6:	5882      	ldr	r2, [r0, r2]
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 80aadb8:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80aae5c <mbedtls_aes_setkey_dec+0xd8>
    }
#endif

    SK = cty.rk + cty.nr * 4;

    *RK++ = *SK++;
 80aadbc:	60a2      	str	r2, [r4, #8]
    *RK++ = *SK++;
 80aadbe:	685a      	ldr	r2, [r3, #4]
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 80aadc0:	f8df 909c 	ldr.w	r9, [pc, #156]	; 80aae60 <mbedtls_aes_setkey_dec+0xdc>
#endif

    SK = cty.rk + cty.nr * 4;

    *RK++ = *SK++;
    *RK++ = *SK++;
 80aadc4:	60e2      	str	r2, [r4, #12]
    *RK++ = *SK++;
 80aadc6:	689a      	ldr	r2, [r3, #8]
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 80aadc8:	f8df a098 	ldr.w	sl, [pc, #152]	; 80aae64 <mbedtls_aes_setkey_dec+0xe0>

    SK = cty.rk + cty.nr * 4;

    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
 80aadcc:	6122      	str	r2, [r4, #16]
    *RK++ = *SK++;
 80aadce:	68d8      	ldr	r0, [r3, #12]
 80aadd0:	f104 0218 	add.w	r2, r4, #24
 80aadd4:	6160      	str	r0, [r4, #20]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 80aadd6:	4c1f      	ldr	r4, [pc, #124]	; (80aae54 <mbedtls_aes_setkey_dec+0xd0>)
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 80aadd8:	3901      	subs	r1, #1
 80aadda:	3b10      	subs	r3, #16
 80aaddc:	2900      	cmp	r1, #0
 80aadde:	dd29      	ble.n	80aae34 <mbedtls_aes_setkey_dec+0xb0>
 80aade0:	1f1d      	subs	r5, r3, #4
 80aade2:	f1a2 0e04 	sub.w	lr, r2, #4
 80aade6:	f103 0b0c 	add.w	fp, r3, #12
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 80aadea:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80aadee:	b2c6      	uxtb	r6, r0
 80aadf0:	5da7      	ldrb	r7, [r4, r6]
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 80aadf2:	0e06      	lsrs	r6, r0, #24
 80aadf4:	5da6      	ldrb	r6, [r4, r6]
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
 80aadf6:	45ab      	cmp	fp, r5
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 80aadf8:	9601      	str	r6, [sp, #4]
 80aadfa:	4e17      	ldr	r6, [pc, #92]	; (80aae58 <mbedtls_aes_setkey_dec+0xd4>)
 80aadfc:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 80aae00:	9e01      	ldr	r6, [sp, #4]
 80aae02:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 80aae06:	ea87 0706 	eor.w	r7, r7, r6
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 80aae0a:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80aae0e:	5da6      	ldrb	r6, [r4, r6]
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 80aae10:	f3c0 4007 	ubfx	r0, r0, #16, #8
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 80aae14:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 80aae18:	5c20      	ldrb	r0, [r4, r0]
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 80aae1a:	ea86 0607 	eor.w	r6, r6, r7
 80aae1e:	f85a 7020 	ldr.w	r7, [sl, r0, lsl #2]
 80aae22:	ea86 0607 	eor.w	r6, r6, r7
 80aae26:	f84e 6f04 	str.w	r6, [lr, #4]!
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
 80aae2a:	d1de      	bne.n	80aadea <mbedtls_aes_setkey_dec+0x66>
 80aae2c:	3210      	adds	r2, #16
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;
    *RK++ = *SK++;

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 80aae2e:	3901      	subs	r1, #1
 80aae30:	3b10      	subs	r3, #16
 80aae32:	e7d3      	b.n	80aaddc <mbedtls_aes_setkey_dec+0x58>
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
        }
    }

    *RK++ = *SK++;
 80aae34:	6819      	ldr	r1, [r3, #0]
 80aae36:	6011      	str	r1, [r2, #0]
    *RK++ = *SK++;
 80aae38:	6859      	ldr	r1, [r3, #4]
 80aae3a:	6051      	str	r1, [r2, #4]
    *RK++ = *SK++;
 80aae3c:	6899      	ldr	r1, [r3, #8]
 80aae3e:	6091      	str	r1, [r2, #8]
    *RK++ = *SK++;
 80aae40:	68db      	ldr	r3, [r3, #12]
 80aae42:	60d3      	str	r3, [r2, #12]

exit:
    mbedtls_aes_free( &cty );
 80aae44:	a802      	add	r0, sp, #8
 80aae46:	f7ff fe96 	bl	80aab76 <mbedtls_aes_free>

    return( ret );
}
 80aae4a:	4640      	mov	r0, r8
 80aae4c:	b049      	add	sp, #292	; 0x124
 80aae4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80aae52:	bf00      	nop
 80aae54:	200018bc 	.word	0x200018bc
 80aae58:	20001dbc 	.word	0x20001dbc
 80aae5c:	200019bc 	.word	0x200019bc
 80aae60:	200021bc 	.word	0x200021bc
 80aae64:	200025bc 	.word	0x200025bc

080aae68 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 80aae68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 80aae6c:	6843      	ldr	r3, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 80aae6e:	680d      	ldr	r5, [r1, #0]
 80aae70:	681c      	ldr	r4, [r3, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80aae72:	6800      	ldr	r0, [r0, #0]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 80aae74:	ea85 0b04 	eor.w	fp, r5, r4
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 80aae78:	684d      	ldr	r5, [r1, #4]
 80aae7a:	685c      	ldr	r4, [r3, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 80aae7c:	688e      	ldr	r6, [r1, #8]
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 80aae7e:	406c      	eors	r4, r5
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 80aae80:	689d      	ldr	r5, [r3, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80aae82:	1040      	asrs	r0, r0, #1
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 80aae84:	b085      	sub	sp, #20
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80aae86:	3801      	subs	r0, #1

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 80aae88:	4075      	eors	r5, r6
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 80aae8a:	68ce      	ldr	r6, [r1, #12]
 80aae8c:	68d9      	ldr	r1, [r3, #12]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80aae8e:	9001      	str	r0, [sp, #4]
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 80aae90:	f853 0f10 	ldr.w	r0, [r3, #16]!
 80aae94:	4071      	eors	r1, r6
 80aae96:	f8df e364 	ldr.w	lr, [pc, #868]	; 80ab1fc <mbedtls_internal_aes_encrypt+0x394>
 80aae9a:	4ed4      	ldr	r6, [pc, #848]	; (80ab1ec <mbedtls_internal_aes_encrypt+0x384>)

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80aae9c:	f8df a354 	ldr.w	sl, [pc, #852]	; 80ab1f4 <mbedtls_internal_aes_encrypt+0x38c>
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 80aaea0:	9002      	str	r0, [sp, #8]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80aaea2:	9801      	ldr	r0, [sp, #4]
 80aaea4:	461f      	mov	r7, r3
 80aaea6:	2800      	cmp	r0, #0
 80aaea8:	ea4f 6011 	mov.w	r0, r1, lsr #24
 80aaeac:	f103 0320 	add.w	r3, r3, #32
 80aaeb0:	f8df 8348 	ldr.w	r8, [pc, #840]	; 80ab1fc <mbedtls_internal_aes_encrypt+0x394>
 80aaeb4:	fa5f f98b 	uxtb.w	r9, fp
 80aaeb8:	f8df c330 	ldr.w	ip, [pc, #816]	; 80ab1ec <mbedtls_internal_aes_encrypt+0x384>
 80aaebc:	9003      	str	r0, [sp, #12]
 80aaebe:	f340 80be 	ble.w	80ab03e <mbedtls_internal_aes_encrypt+0x1d6>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80aaec2:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
 80aaec6:	f85e 8029 	ldr.w	r8, [lr, r9, lsl #2]
 80aaeca:	48c9      	ldr	r0, [pc, #804]	; (80ab1f0 <mbedtls_internal_aes_encrypt+0x388>)
 80aaecc:	ea88 0807 	eor.w	r8, r8, r7
 80aaed0:	f853 7c20 	ldr.w	r7, [r3, #-32]
 80aaed4:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 80aaed8:	ea88 0807 	eor.w	r8, r8, r7
 80aaedc:	f3c4 2707 	ubfx	r7, r4, #8, #8
 80aaee0:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
 80aaee4:	ea88 0707 	eor.w	r7, r8, r7
 80aaee8:	f85a 802c 	ldr.w	r8, [sl, ip, lsl #2]
 80aaeec:	fa5f fc84 	uxtb.w	ip, r4
 80aaef0:	ea87 0808 	eor.w	r8, r7, r8
 80aaef4:	ea4f 671b 	mov.w	r7, fp, lsr #24
 80aaef8:	f85e 902c 	ldr.w	r9, [lr, ip, lsl #2]
 80aaefc:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 80aaf00:	f3c5 2c07 	ubfx	ip, r5, #8, #8
 80aaf04:	ea89 0907 	eor.w	r9, r9, r7
 80aaf08:	f853 7c1c 	ldr.w	r7, [r3, #-28]
 80aaf0c:	ea89 0707 	eor.w	r7, r9, r7
 80aaf10:	f850 902c 	ldr.w	r9, [r0, ip, lsl #2]
 80aaf14:	f3c1 4c07 	ubfx	ip, r1, #16, #8
 80aaf18:	ea87 0709 	eor.w	r7, r7, r9
 80aaf1c:	f85a 902c 	ldr.w	r9, [sl, ip, lsl #2]
 80aaf20:	fa5f fc85 	uxtb.w	ip, r5
 80aaf24:	ea87 0909 	eor.w	r9, r7, r9
 80aaf28:	0e27      	lsrs	r7, r4, #24
 80aaf2a:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 80aaf2e:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
 80aaf32:	0e2d      	lsrs	r5, r5, #24
 80aaf34:	ea8c 0c07 	eor.w	ip, ip, r7
 80aaf38:	f853 7c18 	ldr.w	r7, [r3, #-24]
 80aaf3c:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 80aaf40:	ea8c 0707 	eor.w	r7, ip, r7
 80aaf44:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 80aaf48:	f850 c02c 	ldr.w	ip, [r0, ip, lsl #2]
 80aaf4c:	b2c9      	uxtb	r1, r1
 80aaf4e:	ea87 070c 	eor.w	r7, r7, ip
 80aaf52:	f3cb 4c07 	ubfx	ip, fp, #16, #8
 80aaf56:	f85a c02c 	ldr.w	ip, [sl, ip, lsl #2]
 80aaf5a:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 80aaf5e:	ea87 070c 	eor.w	r7, r7, ip
 80aaf62:	ea81 0c05 	eor.w	ip, r1, r5
 80aaf66:	f853 1c14 	ldr.w	r1, [r3, #-20]
 80aaf6a:	f3cb 2507 	ubfx	r5, fp, #8, #8
 80aaf6e:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
 80aaf72:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80aaf76:	f85a 4024 	ldr.w	r4, [sl, r4, lsl #2]
 80aaf7a:	ea8c 0101 	eor.w	r1, ip, r1
 80aaf7e:	4069      	eors	r1, r5
 80aaf80:	ea81 0c04 	eor.w	ip, r1, r4
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 80aaf84:	ea4f 611c 	mov.w	r1, ip, lsr #24
 80aaf88:	fa5f f488 	uxtb.w	r4, r8
 80aaf8c:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 80aaf90:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80aaf94:	b2fd      	uxtb	r5, r7
 80aaf96:	4061      	eors	r1, r4
 80aaf98:	f853 4c10 	ldr.w	r4, [r3, #-16]
 80aaf9c:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
 80aafa0:	404c      	eors	r4, r1
 80aafa2:	f3c9 2107 	ubfx	r1, r9, #8, #8
 80aafa6:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80aafaa:	404c      	eors	r4, r1
 80aafac:	f3c7 4107 	ubfx	r1, r7, #16, #8
 80aafb0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80aafb4:	ea84 0b01 	eor.w	fp, r4, r1
 80aafb8:	fa5f f489 	uxtb.w	r4, r9
 80aafbc:	ea4f 6118 	mov.w	r1, r8, lsr #24
 80aafc0:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 80aafc4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80aafc8:	4061      	eors	r1, r4
 80aafca:	f853 4c0c 	ldr.w	r4, [r3, #-12]
 80aafce:	404c      	eors	r4, r1
 80aafd0:	f3c7 2107 	ubfx	r1, r7, #8, #8
 80aafd4:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80aafd8:	0e3f      	lsrs	r7, r7, #24
 80aafda:	404c      	eors	r4, r1
 80aafdc:	f3cc 4107 	ubfx	r1, ip, #16, #8
 80aafe0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80aafe4:	404c      	eors	r4, r1
 80aafe6:	ea4f 6119 	mov.w	r1, r9, lsr #24
 80aafea:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80aafee:	f3c9 4907 	ubfx	r9, r9, #16, #8
 80aaff2:	404d      	eors	r5, r1
 80aaff4:	f853 1c08 	ldr.w	r1, [r3, #-8]
 80aaff8:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 80aaffc:	4069      	eors	r1, r5
 80aaffe:	f3cc 2507 	ubfx	r5, ip, #8, #8
 80ab002:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
 80ab006:	fa5f fc8c 	uxtb.w	ip, ip
 80ab00a:	4069      	eors	r1, r5
 80ab00c:	f3c8 4507 	ubfx	r5, r8, #16, #8
 80ab010:	f85a 5025 	ldr.w	r5, [sl, r5, lsl #2]
 80ab014:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80ab018:	404d      	eors	r5, r1
 80ab01a:	f85e 102c 	ldr.w	r1, [lr, ip, lsl #2]
 80ab01e:	404f      	eors	r7, r1
 80ab020:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80ab024:	4079      	eors	r1, r7
 80ab026:	f850 7028 	ldr.w	r7, [r0, r8, lsl #2]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80ab02a:	9801      	ldr	r0, [sp, #4]
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 80ab02c:	4079      	eors	r1, r7
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80ab02e:	3801      	subs	r0, #1
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 80ab030:	f85a 7029 	ldr.w	r7, [sl, r9, lsl #2]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80ab034:	9001      	str	r0, [sp, #4]
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 80ab036:	6818      	ldr	r0, [r3, #0]
 80ab038:	4079      	eors	r1, r7
 80ab03a:	9002      	str	r0, [sp, #8]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80ab03c:	e731      	b.n	80aaea2 <mbedtls_internal_aes_encrypt+0x3a>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80ab03e:	0e0b      	lsrs	r3, r1, #24
 80ab040:	f858 0029 	ldr.w	r0, [r8, r9, lsl #2]
 80ab044:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 80ab048:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80ab1f0 <mbedtls_internal_aes_encrypt+0x388>
 80ab04c:	4043      	eors	r3, r0
 80ab04e:	9802      	ldr	r0, [sp, #8]
 80ab050:	4e68      	ldr	r6, [pc, #416]	; (80ab1f4 <mbedtls_internal_aes_encrypt+0x38c>)
 80ab052:	ea83 0900 	eor.w	r9, r3, r0
 80ab056:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80ab05a:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 80ab05e:	b2e0      	uxtb	r0, r4
 80ab060:	ea89 0903 	eor.w	r9, r9, r3
 80ab064:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80ab068:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80ab06c:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 80ab070:	ea89 0903 	eor.w	r9, r9, r3
 80ab074:	ea4f 631b 	mov.w	r3, fp, lsr #24
 80ab078:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 80ab07c:	fa5f fa85 	uxtb.w	sl, r5
 80ab080:	4058      	eors	r0, r3
 80ab082:	687b      	ldr	r3, [r7, #4]
 80ab084:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 80ab088:	4043      	eors	r3, r0
 80ab08a:	f3c5 2007 	ubfx	r0, r5, #8, #8
 80ab08e:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 80ab092:	0e2d      	lsrs	r5, r5, #24
 80ab094:	4043      	eors	r3, r0
 80ab096:	f3c1 4007 	ubfx	r0, r1, #16, #8
 80ab09a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80ab09e:	4043      	eors	r3, r0
 80ab0a0:	0e20      	lsrs	r0, r4, #24
 80ab0a2:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 80ab0a6:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80ab0aa:	ea8a 0a00 	eor.w	sl, sl, r0
 80ab0ae:	68b8      	ldr	r0, [r7, #8]
 80ab0b0:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 80ab0b4:	ea8a 0000 	eor.w	r0, sl, r0
 80ab0b8:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 80ab0bc:	b2c9      	uxtb	r1, r1
 80ab0be:	f858 8021 	ldr.w	r8, [r8, r1, lsl #2]
 80ab0c2:	f85c 1025 	ldr.w	r1, [ip, r5, lsl #2]
 80ab0c6:	f85e a02a 	ldr.w	sl, [lr, sl, lsl #2]
 80ab0ca:	ea88 0501 	eor.w	r5, r8, r1
 80ab0ce:	68f9      	ldr	r1, [r7, #12]
 80ab0d0:	ea80 000a 	eor.w	r0, r0, sl
 80ab0d4:	4069      	eors	r1, r5
 80ab0d6:	f3cb 2507 	ubfx	r5, fp, #8, #8
 80ab0da:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
 80ab0de:	f3cb 4a07 	ubfx	sl, fp, #16, #8
 80ab0e2:	4069      	eors	r1, r5
 80ab0e4:	4061      	eors	r1, r4

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 80ab0e6:	4c44      	ldr	r4, [pc, #272]	; (80ab1f8 <mbedtls_internal_aes_encrypt+0x390>)
 80ab0e8:	fa5f f589 	uxtb.w	r5, r9
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 80ab0ec:	f814 e005 	ldrb.w	lr, [r4, r5]
 80ab0f0:	693d      	ldr	r5, [r7, #16]
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80ab0f2:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 80ab0f6:	0e0e      	lsrs	r6, r1, #24
 80ab0f8:	ea8e 0505 	eor.w	r5, lr, r5
 80ab0fc:	f814 e006 	ldrb.w	lr, [r4, r6]

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 80ab100:	f3c3 2607 	ubfx	r6, r3, #8, #8
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80ab104:	ea80 000a 	eor.w	r0, r0, sl

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 80ab108:	ea85 650e 	eor.w	r5, r5, lr, lsl #24
 80ab10c:	f814 e006 	ldrb.w	lr, [r4, r6]
    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 80ab110:	f3c0 4607 	ubfx	r6, r0, #16, #8
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 80ab114:	ea85 250e 	eor.w	r5, r5, lr, lsl #8
 80ab118:	f814 e006 	ldrb.w	lr, [r4, r6]
 80ab11c:	ea85 4e0e 	eor.w	lr, r5, lr, lsl #16

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 80ab120:	b2dd      	uxtb	r5, r3
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 80ab122:	5d66      	ldrb	r6, [r4, r5]
 80ab124:	697d      	ldr	r5, [r7, #20]
 80ab126:	4075      	eors	r5, r6
 80ab128:	ea4f 6619 	mov.w	r6, r9, lsr #24
 80ab12c:	5da6      	ldrb	r6, [r4, r6]
 80ab12e:	ea85 6506 	eor.w	r5, r5, r6, lsl #24
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 80ab132:	f3c0 2607 	ubfx	r6, r0, #8, #8
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 80ab136:	5da6      	ldrb	r6, [r4, r6]
 80ab138:	ea85 2506 	eor.w	r5, r5, r6, lsl #8
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 80ab13c:	f3c1 4607 	ubfx	r6, r1, #16, #8
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 80ab140:	5da6      	ldrb	r6, [r4, r6]
 80ab142:	ea85 4606 	eor.w	r6, r5, r6, lsl #16

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 80ab146:	b2c5      	uxtb	r5, r0
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 80ab148:	f814 c005 	ldrb.w	ip, [r4, r5]
 80ab14c:	69bd      	ldr	r5, [r7, #24]

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 80ab14e:	0e00      	lsrs	r0, r0, #24

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 80ab150:	ea8c 0505 	eor.w	r5, ip, r5
 80ab154:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80ab158:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 80ab15c:	5c20      	ldrb	r0, [r4, r0]

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 80ab15e:	ea85 650c 	eor.w	r5, r5, ip, lsl #24
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 80ab162:	f3c1 2c07 	ubfx	ip, r1, #8, #8
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 80ab166:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 80ab16a:	b2c9      	uxtb	r1, r1

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 80ab16c:	ea85 250c 	eor.w	r5, r5, ip, lsl #8
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 80ab170:	f3c9 4c07 	ubfx	ip, r9, #16, #8
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 80ab174:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 80ab178:	f3c9 2907 	ubfx	r9, r9, #8, #8

    X2 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 80ab17c:	ea85 450c 	eor.w	r5, r5, ip, lsl #16

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 80ab180:	f814 c001 	ldrb.w	ip, [r4, r1]
 80ab184:	69f9      	ldr	r1, [r7, #28]
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 80ab186:	f3c3 4307 	ubfx	r3, r3, #16, #8
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 80ab18a:	ea8c 0101 	eor.w	r1, ip, r1
 80ab18e:	ea81 6100 	eor.w	r1, r1, r0, lsl #24
 80ab192:	f814 0009 	ldrb.w	r0, [r4, r9]
 80ab196:	5ce3      	ldrb	r3, [r4, r3]
 80ab198:	ea81 2100 	eor.w	r1, r1, r0, lsl #8
 80ab19c:	ea81 4303 	eor.w	r3, r1, r3, lsl #16

    PUT_UINT32_LE( X0, output,  0 );
 80ab1a0:	ea4f 211e 	mov.w	r1, lr, lsr #8
 80ab1a4:	7051      	strb	r1, [r2, #1]
 80ab1a6:	ea4f 411e 	mov.w	r1, lr, lsr #16
 80ab1aa:	7091      	strb	r1, [r2, #2]
    PUT_UINT32_LE( X1, output,  4 );
 80ab1ac:	0a31      	lsrs	r1, r6, #8
 80ab1ae:	7151      	strb	r1, [r2, #5]
 80ab1b0:	0c31      	lsrs	r1, r6, #16
 80ab1b2:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
 80ab1b4:	0a29      	lsrs	r1, r5, #8
 80ab1b6:	7251      	strb	r1, [r2, #9]
 80ab1b8:	0c29      	lsrs	r1, r5, #16
 80ab1ba:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
 80ab1bc:	0a19      	lsrs	r1, r3, #8
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 80ab1be:	f882 e000 	strb.w	lr, [r2]
    PUT_UINT32_LE( X1, output,  4 );
 80ab1c2:	7116      	strb	r6, [r2, #4]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 80ab1c4:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    PUT_UINT32_LE( X1, output,  4 );
 80ab1c8:	0e36      	lsrs	r6, r6, #24
    PUT_UINT32_LE( X2, output,  8 );
 80ab1ca:	7215      	strb	r5, [r2, #8]
    PUT_UINT32_LE( X3, output, 12 );
 80ab1cc:	7313      	strb	r3, [r2, #12]
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
 80ab1ce:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X3, output, 12 );
 80ab1d0:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
 80ab1d2:	2000      	movs	r0, #0
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
 80ab1d4:	0c19      	lsrs	r1, r3, #16
 80ab1d6:	0e1b      	lsrs	r3, r3, #24
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 80ab1d8:	f882 e003 	strb.w	lr, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
 80ab1dc:	71d6      	strb	r6, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
 80ab1de:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
 80ab1e0:	7391      	strb	r1, [r2, #14]
 80ab1e2:	73d3      	strb	r3, [r2, #15]

    return( 0 );
}
 80ab1e4:	b005      	add	sp, #20
 80ab1e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80ab1ea:	bf00      	nop
 80ab1ec:	200013bc 	.word	0x200013bc
 80ab1f0:	20000bbc 	.word	0x20000bbc
 80ab1f4:	20000fbc 	.word	0x20000fbc
 80ab1f8:	200018bc 	.word	0x200018bc
 80ab1fc:	200007bc 	.word	0x200007bc

080ab200 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 80ab200:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 80ab204:	6843      	ldr	r3, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 80ab206:	680d      	ldr	r5, [r1, #0]
 80ab208:	681c      	ldr	r4, [r3, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80ab20a:	6800      	ldr	r0, [r0, #0]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 80ab20c:	ea85 0a04 	eor.w	sl, r5, r4
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 80ab210:	684d      	ldr	r5, [r1, #4]
 80ab212:	685c      	ldr	r4, [r3, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80ab214:	1040      	asrs	r0, r0, #1
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 80ab216:	ea85 0b04 	eor.w	fp, r5, r4
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 80ab21a:	688d      	ldr	r5, [r1, #8]
 80ab21c:	689c      	ldr	r4, [r3, #8]
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80ab21e:	3801      	subs	r0, #1

    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 80ab220:	406c      	eors	r4, r5
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 80ab222:	68cd      	ldr	r5, [r1, #12]
 80ab224:	68d9      	ldr	r1, [r3, #12]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80ab226:	9000      	str	r0, [sp, #0]
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 80ab228:	f853 0f10 	ldr.w	r0, [r3, #16]!
 80ab22c:	4069      	eors	r1, r5
 80ab22e:	f8df e364 	ldr.w	lr, [pc, #868]	; 80ab594 <mbedtls_internal_aes_decrypt+0x394>
 80ab232:	4ed4      	ldr	r6, [pc, #848]	; (80ab584 <mbedtls_internal_aes_decrypt+0x384>)

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80ab234:	4dd4      	ldr	r5, [pc, #848]	; (80ab588 <mbedtls_internal_aes_decrypt+0x388>)
    RK = ctx->rk;

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 80ab236:	9001      	str	r0, [sp, #4]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80ab238:	9800      	ldr	r0, [sp, #0]
 80ab23a:	461f      	mov	r7, r3
 80ab23c:	2800      	cmp	r0, #0
 80ab23e:	f103 0320 	add.w	r3, r3, #32
 80ab242:	f8df 8350 	ldr.w	r8, [pc, #848]	; 80ab594 <mbedtls_internal_aes_decrypt+0x394>
 80ab246:	fa5f f08a 	uxtb.w	r0, sl
 80ab24a:	f8df c338 	ldr.w	ip, [pc, #824]	; 80ab584 <mbedtls_internal_aes_decrypt+0x384>
 80ab24e:	ea4f 691b 	mov.w	r9, fp, lsr #24
 80ab252:	f340 80c1 	ble.w	80ab3d8 <mbedtls_internal_aes_decrypt+0x1d8>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80ab256:	f856 7029 	ldr.w	r7, [r6, r9, lsl #2]
 80ab25a:	f85e 8020 	ldr.w	r8, [lr, r0, lsl #2]
 80ab25e:	48cb      	ldr	r0, [pc, #812]	; (80ab58c <mbedtls_internal_aes_decrypt+0x38c>)
 80ab260:	ea88 0807 	eor.w	r8, r8, r7
 80ab264:	f853 7c20 	ldr.w	r7, [r3, #-32]
 80ab268:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 80ab26c:	ea88 0807 	eor.w	r8, r8, r7
 80ab270:	f3c1 2707 	ubfx	r7, r1, #8, #8
 80ab274:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 80ab278:	ea88 0707 	eor.w	r7, r8, r7
 80ab27c:	f850 802c 	ldr.w	r8, [r0, ip, lsl #2]
 80ab280:	fa5f fc8b 	uxtb.w	ip, fp
 80ab284:	ea87 0808 	eor.w	r8, r7, r8
 80ab288:	0e27      	lsrs	r7, r4, #24
 80ab28a:	f85e 902c 	ldr.w	r9, [lr, ip, lsl #2]
 80ab28e:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 80ab292:	f3ca 2c07 	ubfx	ip, sl, #8, #8
 80ab296:	ea89 0907 	eor.w	r9, r9, r7
 80ab29a:	f853 7c1c 	ldr.w	r7, [r3, #-28]
 80ab29e:	ea89 0707 	eor.w	r7, r9, r7
 80ab2a2:	f855 902c 	ldr.w	r9, [r5, ip, lsl #2]
 80ab2a6:	f3c1 4c07 	ubfx	ip, r1, #16, #8
 80ab2aa:	ea87 0709 	eor.w	r7, r7, r9
 80ab2ae:	f850 902c 	ldr.w	r9, [r0, ip, lsl #2]
 80ab2b2:	fa5f fc84 	uxtb.w	ip, r4
 80ab2b6:	ea87 0909 	eor.w	r9, r7, r9
 80ab2ba:	0e0f      	lsrs	r7, r1, #24
 80ab2bc:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 80ab2c0:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
 80ab2c4:	b2c9      	uxtb	r1, r1
 80ab2c6:	ea8c 0c07 	eor.w	ip, ip, r7
 80ab2ca:	f853 7c18 	ldr.w	r7, [r3, #-24]
 80ab2ce:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 80ab2d2:	ea8c 0707 	eor.w	r7, ip, r7
 80ab2d6:	f3cb 2c07 	ubfx	ip, fp, #8, #8
 80ab2da:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 80ab2de:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80ab2e2:	ea87 070c 	eor.w	r7, r7, ip
 80ab2e6:	f3ca 4c07 	ubfx	ip, sl, #16, #8
 80ab2ea:	f850 c02c 	ldr.w	ip, [r0, ip, lsl #2]
 80ab2ee:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 80ab2f2:	ea87 070c 	eor.w	r7, r7, ip
 80ab2f6:	f856 c02a 	ldr.w	ip, [r6, sl, lsl #2]
 80ab2fa:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 80ab2fe:	ea81 0c0c 	eor.w	ip, r1, ip
 80ab302:	f853 1c14 	ldr.w	r1, [r3, #-20]
 80ab306:	ea8c 0101 	eor.w	r1, ip, r1
 80ab30a:	4061      	eors	r1, r4
 80ab30c:	f3cb 4407 	ubfx	r4, fp, #16, #8
 80ab310:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 80ab314:	ea81 0c04 	eor.w	ip, r1, r4
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 80ab318:	fa5f f488 	uxtb.w	r4, r8
 80ab31c:	ea4f 6119 	mov.w	r1, r9, lsr #24
 80ab320:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 80ab324:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80ab328:	4061      	eors	r1, r4
 80ab32a:	f853 4c10 	ldr.w	r4, [r3, #-16]
 80ab32e:	404c      	eors	r4, r1
 80ab330:	f3cc 2107 	ubfx	r1, ip, #8, #8
 80ab334:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80ab338:	404c      	eors	r4, r1
 80ab33a:	f3c7 4107 	ubfx	r1, r7, #16, #8
 80ab33e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80ab342:	ea84 0a01 	eor.w	sl, r4, r1
 80ab346:	fa5f f489 	uxtb.w	r4, r9
 80ab34a:	0e39      	lsrs	r1, r7, #24
 80ab34c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80ab350:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 80ab354:	404c      	eors	r4, r1
 80ab356:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 80ab35a:	4061      	eors	r1, r4
 80ab35c:	f3c8 2407 	ubfx	r4, r8, #8, #8
 80ab360:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 80ab364:	4061      	eors	r1, r4
 80ab366:	f3cc 4407 	ubfx	r4, ip, #16, #8
 80ab36a:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 80ab36e:	ea81 0b04 	eor.w	fp, r1, r4
 80ab372:	b2fc      	uxtb	r4, r7
 80ab374:	ea4f 611c 	mov.w	r1, ip, lsr #24
 80ab378:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 80ab37c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80ab380:	fa5f fc8c 	uxtb.w	ip, ip
 80ab384:	404c      	eors	r4, r1
 80ab386:	f853 1c08 	ldr.w	r1, [r3, #-8]
 80ab38a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80ab38e:	4061      	eors	r1, r4
 80ab390:	f3c9 2407 	ubfx	r4, r9, #8, #8
 80ab394:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 80ab398:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 80ab39c:	4061      	eors	r1, r4
 80ab39e:	f3c8 4407 	ubfx	r4, r8, #16, #8
 80ab3a2:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 80ab3a6:	ea4f 6818 	mov.w	r8, r8, lsr #24
 80ab3aa:	404c      	eors	r4, r1
 80ab3ac:	f85e 102c 	ldr.w	r1, [lr, ip, lsl #2]
 80ab3b0:	f856 c028 	ldr.w	ip, [r6, r8, lsl #2]
 80ab3b4:	f3c9 4907 	ubfx	r9, r9, #16, #8
 80ab3b8:	ea81 0c0c 	eor.w	ip, r1, ip
 80ab3bc:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80ab3c0:	ea8c 0101 	eor.w	r1, ip, r1
 80ab3c4:	4079      	eors	r1, r7
 80ab3c6:	f850 7029 	ldr.w	r7, [r0, r9, lsl #2]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80ab3ca:	9800      	ldr	r0, [sp, #0]
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 80ab3cc:	4079      	eors	r1, r7
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80ab3ce:	3801      	subs	r0, #1
 80ab3d0:	9000      	str	r0, [sp, #0]
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 80ab3d2:	6818      	ldr	r0, [r3, #0]
 80ab3d4:	9001      	str	r0, [sp, #4]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80ab3d6:	e72f      	b.n	80ab238 <mbedtls_internal_aes_decrypt+0x38>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80ab3d8:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 80ab3dc:	f85c 3029 	ldr.w	r3, [ip, r9, lsl #2]
 80ab3e0:	4e69      	ldr	r6, [pc, #420]	; (80ab588 <mbedtls_internal_aes_decrypt+0x388>)
 80ab3e2:	4043      	eors	r3, r0
 80ab3e4:	9801      	ldr	r0, [sp, #4]
 80ab3e6:	4d69      	ldr	r5, [pc, #420]	; (80ab58c <mbedtls_internal_aes_decrypt+0x38c>)
 80ab3e8:	ea83 0900 	eor.w	r9, r3, r0
 80ab3ec:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80ab3f0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80ab3f4:	fa5f f08b 	uxtb.w	r0, fp
 80ab3f8:	ea89 0903 	eor.w	r9, r9, r3
 80ab3fc:	f3c4 4307 	ubfx	r3, r4, #16, #8
 80ab400:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80ab404:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 80ab408:	ea89 0903 	eor.w	r9, r9, r3
 80ab40c:	0e23      	lsrs	r3, r4, #24
 80ab40e:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 80ab412:	fa5f fe84 	uxtb.w	lr, r4
 80ab416:	4058      	eors	r0, r3
 80ab418:	687b      	ldr	r3, [r7, #4]
 80ab41a:	f858 e02e 	ldr.w	lr, [r8, lr, lsl #2]
 80ab41e:	4043      	eors	r3, r0
 80ab420:	f3ca 2007 	ubfx	r0, sl, #8, #8
 80ab424:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80ab428:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80ab42c:	4043      	eors	r3, r0
 80ab42e:	f3c1 4007 	ubfx	r0, r1, #16, #8
 80ab432:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 80ab436:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 80ab43a:	4043      	eors	r3, r0
 80ab43c:	0e08      	lsrs	r0, r1, #24
 80ab43e:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 80ab442:	b2c9      	uxtb	r1, r1
 80ab444:	ea8e 0e00 	eor.w	lr, lr, r0
 80ab448:	68b8      	ldr	r0, [r7, #8]
 80ab44a:	f858 8021 	ldr.w	r8, [r8, r1, lsl #2]
 80ab44e:	ea8e 0000 	eor.w	r0, lr, r0
 80ab452:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 80ab456:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 80ab45a:	0e1e      	lsrs	r6, r3, #24
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80ab45c:	ea80 000e 	eor.w	r0, r0, lr
 80ab460:	f3ca 4e07 	ubfx	lr, sl, #16, #8
 80ab464:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 80ab468:	ea80 000e 	eor.w	r0, r0, lr
 80ab46c:	ea4f 6e1a 	mov.w	lr, sl, lsr #24
 80ab470:	f85c 102e 	ldr.w	r1, [ip, lr, lsl #2]
 80ab474:	ea88 0e01 	eor.w	lr, r8, r1
 80ab478:	68f9      	ldr	r1, [r7, #12]
 80ab47a:	ea8e 0101 	eor.w	r1, lr, r1
 80ab47e:	4061      	eors	r1, r4
 80ab480:	f3cb 4407 	ubfx	r4, fp, #16, #8
 80ab484:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 80ab488:	fa5f f589 	uxtb.w	r5, r9
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80ab48c:	4061      	eors	r1, r4

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 80ab48e:	4c40      	ldr	r4, [pc, #256]	; (80ab590 <mbedtls_internal_aes_decrypt+0x390>)
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 80ab490:	f814 e005 	ldrb.w	lr, [r4, r5]
 80ab494:	693d      	ldr	r5, [r7, #16]
 80ab496:	ea8e 0505 	eor.w	r5, lr, r5
 80ab49a:	f814 e006 	ldrb.w	lr, [r4, r6]

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 80ab49e:	f3c1 2607 	ubfx	r6, r1, #8, #8
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 80ab4a2:	ea85 650e 	eor.w	r5, r5, lr, lsl #24
 80ab4a6:	f814 e006 	ldrb.w	lr, [r4, r6]
    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 80ab4aa:	f3c0 4607 	ubfx	r6, r0, #16, #8
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 80ab4ae:	ea85 250e 	eor.w	r5, r5, lr, lsl #8
 80ab4b2:	f814 e006 	ldrb.w	lr, [r4, r6]
 80ab4b6:	ea85 4e0e 	eor.w	lr, r5, lr, lsl #16

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 80ab4ba:	b2dd      	uxtb	r5, r3
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 80ab4bc:	5d66      	ldrb	r6, [r4, r5]
 80ab4be:	697d      	ldr	r5, [r7, #20]
 80ab4c0:	4075      	eors	r5, r6
 80ab4c2:	0e06      	lsrs	r6, r0, #24
 80ab4c4:	5da6      	ldrb	r6, [r4, r6]
 80ab4c6:	ea85 6506 	eor.w	r5, r5, r6, lsl #24
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 80ab4ca:	f3c9 2607 	ubfx	r6, r9, #8, #8
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 80ab4ce:	5da6      	ldrb	r6, [r4, r6]
 80ab4d0:	ea85 2506 	eor.w	r5, r5, r6, lsl #8
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 80ab4d4:	f3c1 4607 	ubfx	r6, r1, #16, #8
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 80ab4d8:	5da6      	ldrb	r6, [r4, r6]
 80ab4da:	ea85 4606 	eor.w	r6, r5, r6, lsl #16

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 80ab4de:	b2c5      	uxtb	r5, r0
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 80ab4e0:	f814 c005 	ldrb.w	ip, [r4, r5]
 80ab4e4:	69bd      	ldr	r5, [r7, #24]

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 80ab4e6:	f3c0 2007 	ubfx	r0, r0, #8, #8

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 80ab4ea:	ea8c 0505 	eor.w	r5, ip, r5
 80ab4ee:	ea4f 6c11 	mov.w	ip, r1, lsr #24
 80ab4f2:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 80ab4f6:	b2c9      	uxtb	r1, r1

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 80ab4f8:	ea85 650c 	eor.w	r5, r5, ip, lsl #24
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 80ab4fc:	f3c3 2c07 	ubfx	ip, r3, #8, #8
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 80ab500:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 80ab504:	5c20      	ldrb	r0, [r4, r0]

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 80ab506:	ea85 250c 	eor.w	r5, r5, ip, lsl #8
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 80ab50a:	f3c9 4c07 	ubfx	ip, r9, #16, #8
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 80ab50e:	f814 c00c 	ldrb.w	ip, [r4, ip]

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 80ab512:	ea4f 6919 	mov.w	r9, r9, lsr #24

    X2 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 80ab516:	ea85 450c 	eor.w	r5, r5, ip, lsl #16

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 80ab51a:	f814 c001 	ldrb.w	ip, [r4, r1]
 80ab51e:	69f9      	ldr	r1, [r7, #28]
 80ab520:	f814 7009 	ldrb.w	r7, [r4, r9]
 80ab524:	ea8c 0101 	eor.w	r1, ip, r1
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 80ab528:	f3c3 4307 	ubfx	r3, r3, #16, #8
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 80ab52c:	5ce3      	ldrb	r3, [r4, r3]
 80ab52e:	ea81 6107 	eor.w	r1, r1, r7, lsl #24
 80ab532:	ea81 2100 	eor.w	r1, r1, r0, lsl #8
 80ab536:	ea81 4303 	eor.w	r3, r1, r3, lsl #16

    PUT_UINT32_LE( X0, output,  0 );
 80ab53a:	ea4f 211e 	mov.w	r1, lr, lsr #8
 80ab53e:	7051      	strb	r1, [r2, #1]
 80ab540:	ea4f 411e 	mov.w	r1, lr, lsr #16
 80ab544:	7091      	strb	r1, [r2, #2]
    PUT_UINT32_LE( X1, output,  4 );
 80ab546:	0a31      	lsrs	r1, r6, #8
 80ab548:	7151      	strb	r1, [r2, #5]
 80ab54a:	0c31      	lsrs	r1, r6, #16
 80ab54c:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
 80ab54e:	0a29      	lsrs	r1, r5, #8
 80ab550:	7251      	strb	r1, [r2, #9]
 80ab552:	0c29      	lsrs	r1, r5, #16
 80ab554:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
 80ab556:	0a19      	lsrs	r1, r3, #8
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 80ab558:	f882 e000 	strb.w	lr, [r2]
    PUT_UINT32_LE( X1, output,  4 );
 80ab55c:	7116      	strb	r6, [r2, #4]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 80ab55e:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    PUT_UINT32_LE( X1, output,  4 );
 80ab562:	0e36      	lsrs	r6, r6, #24
    PUT_UINT32_LE( X2, output,  8 );
 80ab564:	7215      	strb	r5, [r2, #8]
    PUT_UINT32_LE( X3, output, 12 );
 80ab566:	7313      	strb	r3, [r2, #12]
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
 80ab568:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X3, output, 12 );
 80ab56a:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
 80ab56c:	2000      	movs	r0, #0
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
    PUT_UINT32_LE( X1, output,  4 );
    PUT_UINT32_LE( X2, output,  8 );
    PUT_UINT32_LE( X3, output, 12 );
 80ab56e:	0c19      	lsrs	r1, r3, #16
 80ab570:	0e1b      	lsrs	r3, r3, #24
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 80ab572:	f882 e003 	strb.w	lr, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
 80ab576:	71d6      	strb	r6, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
 80ab578:	72d5      	strb	r5, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
 80ab57a:	7391      	strb	r1, [r2, #14]
 80ab57c:	73d3      	strb	r3, [r2, #15]

    return( 0 );
}
 80ab57e:	b003      	add	sp, #12
 80ab580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80ab584:	200019bc 	.word	0x200019bc
 80ab588:	200021bc 	.word	0x200021bc
 80ab58c:	200025bc 	.word	0x200025bc
 80ab590:	200017bc 	.word	0x200017bc
 80ab594:	20001dbc 	.word	0x20001dbc

080ab598 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
 80ab598:	b410      	push	{r4}
 80ab59a:	4614      	mov	r4, r2
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 80ab59c:	2901      	cmp	r1, #1
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
 80ab59e:	461a      	mov	r2, r3
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 80ab5a0:	4621      	mov	r1, r4
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 80ab5a2:	d102      	bne.n	80ab5aa <mbedtls_aes_crypt_ecb+0x12>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
}
 80ab5a4:	bc10      	pop	{r4}
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 80ab5a6:	f7ff bc5f 	b.w	80aae68 <mbedtls_internal_aes_encrypt>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
}
 80ab5aa:	bc10      	pop	{r4}
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 80ab5ac:	f7ff be28 	b.w	80ab200 <mbedtls_internal_aes_decrypt>

080ab5b0 <_ZL15mbedtls_zeroizePvj>:
#if defined(MBEDTLS_DES_C)
#include "mbedtls/des.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
 80ab5b0:	4401      	add	r1, r0
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80ab5b2:	2300      	movs	r3, #0
 80ab5b4:	4288      	cmp	r0, r1
 80ab5b6:	d002      	beq.n	80ab5be <_ZL15mbedtls_zeroizePvj+0xe>
 80ab5b8:	7003      	strb	r3, [r0, #0]
 80ab5ba:	3001      	adds	r0, #1
 80ab5bc:	e7fa      	b.n	80ab5b4 <_ZL15mbedtls_zeroizePvj+0x4>
 80ab5be:	4770      	bx	lr

080ab5c0 <_ZL18pkcs12_fill_bufferPhjPKhj>:
    return( ret );
}

static void pkcs12_fill_buffer( unsigned char *data, size_t data_len,
                                const unsigned char *filler, size_t fill_len )
{
 80ab5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80ab5c4:	4606      	mov	r6, r0
 80ab5c6:	460c      	mov	r4, r1
 80ab5c8:	4617      	mov	r7, r2
 80ab5ca:	4698      	mov	r8, r3
    unsigned char *p = data;
    size_t use_len;

    while( data_len > 0 )
 80ab5cc:	b15c      	cbz	r4, 80ab5e6 <_ZL18pkcs12_fill_bufferPhjPKhj+0x26>
 80ab5ce:	4544      	cmp	r4, r8
 80ab5d0:	4625      	mov	r5, r4
 80ab5d2:	bf28      	it	cs
 80ab5d4:	4645      	movcs	r5, r8
    {
        use_len = ( data_len > fill_len ) ? fill_len : data_len;
        memcpy( p, filler, use_len );
 80ab5d6:	4630      	mov	r0, r6
 80ab5d8:	462a      	mov	r2, r5
 80ab5da:	4639      	mov	r1, r7
 80ab5dc:	f003 fd89 	bl	80af0f2 <memcpy>
        p += use_len;
 80ab5e0:	442e      	add	r6, r5
        data_len -= use_len;
 80ab5e2:	1b64      	subs	r4, r4, r5
                                const unsigned char *filler, size_t fill_len )
{
    unsigned char *p = data;
    size_t use_len;

    while( data_len > 0 )
 80ab5e4:	e7f2      	b.n	80ab5cc <_ZL18pkcs12_fill_bufferPhjPKhj+0xc>
 80ab5e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080ab5ec <mbedtls_pkcs12_pbe_sha1_rc4_128>:
    mbedtls_zeroize( key, sizeof( key ) );
    mbedtls_arc4_free( &ctx );

    return( ret );
#endif /* MBEDTLS_ARC4_C */
}
 80ab5ec:	4800      	ldr	r0, [pc, #0]	; (80ab5f0 <mbedtls_pkcs12_pbe_sha1_rc4_128+0x4>)
 80ab5ee:	4770      	bx	lr
 80ab5f0:	ffffe100 	.word	0xffffe100

080ab5f4 <mbedtls_pkcs12_derivation>:

int mbedtls_pkcs12_derivation( unsigned char *data, size_t datalen,
                       const unsigned char *pwd, size_t pwdlen,
                       const unsigned char *salt, size_t saltlen,
                       mbedtls_md_type_t md_type, int id, int iterations )
{
 80ab5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
 80ab5f8:	2980      	cmp	r1, #128	; 0x80

int mbedtls_pkcs12_derivation( unsigned char *data, size_t datalen,
                       const unsigned char *pwd, size_t pwdlen,
                       const unsigned char *salt, size_t saltlen,
                       mbedtls_md_type_t md_type, int id, int iterations )
{
 80ab5fa:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 80ab5fe:	9001      	str	r0, [sp, #4]
 80ab600:	460f      	mov	r7, r1
 80ab602:	4693      	mov	fp, r2
 80ab604:	4699      	mov	r9, r3
 80ab606:	9da1      	ldr	r5, [sp, #644]	; 0x284

    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
 80ab608:	f200 80c3 	bhi.w	80ab792 <mbedtls_pkcs12_derivation+0x19e>
 80ab60c:	2b40      	cmp	r3, #64	; 0x40
 80ab60e:	f200 80c0 	bhi.w	80ab792 <mbedtls_pkcs12_derivation+0x19e>
 80ab612:	2d40      	cmp	r5, #64	; 0x40
 80ab614:	f200 80bd 	bhi.w	80ab792 <mbedtls_pkcs12_derivation+0x19e>
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    md_info = mbedtls_md_info_from_type( md_type );
 80ab618:	f89d 0288 	ldrb.w	r0, [sp, #648]	; 0x288
 80ab61c:	f7fa fb7a 	bl	80a5d14 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 80ab620:	9000      	str	r0, [sp, #0]
 80ab622:	2800      	cmp	r0, #0
 80ab624:	f000 80b7 	beq.w	80ab796 <mbedtls_pkcs12_derivation+0x1a2>
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    mbedtls_md_init( &md_ctx );
 80ab628:	a803      	add	r0, sp, #12
 80ab62a:	f7fa fb7f 	bl	80a5d2c <mbedtls_md_init>

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 80ab62e:	2200      	movs	r2, #0
 80ab630:	9900      	ldr	r1, [sp, #0]
 80ab632:	a803      	add	r0, sp, #12
 80ab634:	f7fa fba0 	bl	80a5d78 <mbedtls_md_setup>
 80ab638:	2800      	cmp	r0, #0
 80ab63a:	f040 80ad 	bne.w	80ab798 <mbedtls_pkcs12_derivation+0x1a4>
        return( ret );
    hlen = mbedtls_md_get_size( md_info );
 80ab63e:	9800      	ldr	r0, [sp, #0]
 80ab640:	f7fa fca2 	bl	80a5f88 <mbedtls_md_get_size>

    if( hlen <= 32 )
        v = 64;
 80ab644:	2820      	cmp	r0, #32
 80ab646:	bf8c      	ite	hi
 80ab648:	2480      	movhi	r4, #128	; 0x80
 80ab64a:	2440      	movls	r4, #64	; 0x40
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );
 80ab64c:	4622      	mov	r2, r4
 80ab64e:	f89d 128c 	ldrb.w	r1, [sp, #652]	; 0x28c

    mbedtls_md_init( &md_ctx );

    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
        return( ret );
    hlen = mbedtls_md_get_size( md_info );
 80ab652:	4682      	mov	sl, r0
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
 80ab654:	f10d 08d8 	add.w	r8, sp, #216	; 0xd8
    if( hlen <= 32 )
        v = 64;
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );
 80ab658:	a816      	add	r0, sp, #88	; 0x58
 80ab65a:	f003 fd70 	bl	80af13e <memset>

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
 80ab65e:	462b      	mov	r3, r5
 80ab660:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 80ab662:	4621      	mov	r1, r4
 80ab664:	4640      	mov	r0, r8
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );
 80ab666:	ad56      	add	r5, sp, #344	; 0x158
    else
        v = 128;

    memset( diversifier, (unsigned char) id, v );

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
 80ab668:	f7ff ffaa 	bl	80ab5c0 <_ZL18pkcs12_fill_bufferPhjPKhj>
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );
 80ab66c:	464b      	mov	r3, r9
 80ab66e:	465a      	mov	r2, fp
 80ab670:	4621      	mov	r1, r4
 80ab672:	4628      	mov	r0, r5
 80ab674:	f7ff ffa4 	bl	80ab5c0 <_ZL18pkcs12_fill_bufferPhjPKhj>

        if( datalen == 0 )
            break;

        // Concatenating copies of hash_output into hash_block (B)
        pkcs12_fill_buffer( hash_block, v, hash_output, hlen );
 80ab678:	f50d 79ec 	add.w	r9, sp, #472	; 0x1d8

    pkcs12_fill_buffer( salt_block, v, salt, saltlen );
    pkcs12_fill_buffer( pwd_block,  v, pwd,  pwdlen  );

    p = data;
    while( datalen > 0 )
 80ab67c:	2f00      	cmp	r7, #0
 80ab67e:	d072      	beq.n	80ab766 <mbedtls_pkcs12_derivation+0x172>
    {
        // Calculate hash( diversifier || salt_block || pwd_block )
        if( ( ret = mbedtls_md_starts( &md_ctx ) ) != 0 )
 80ab680:	a803      	add	r0, sp, #12
 80ab682:	f7fa fb9b 	bl	80a5dbc <mbedtls_md_starts>
 80ab686:	4606      	mov	r6, r0
 80ab688:	2800      	cmp	r0, #0
 80ab68a:	d16d      	bne.n	80ab768 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, diversifier, v ) ) != 0 )
 80ab68c:	4622      	mov	r2, r4
 80ab68e:	a916      	add	r1, sp, #88	; 0x58
 80ab690:	a803      	add	r0, sp, #12
 80ab692:	f7fa fb9d 	bl	80a5dd0 <mbedtls_md_update>
 80ab696:	4606      	mov	r6, r0
 80ab698:	2800      	cmp	r0, #0
 80ab69a:	d165      	bne.n	80ab768 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, salt_block, v ) ) != 0 )
 80ab69c:	4622      	mov	r2, r4
 80ab69e:	4641      	mov	r1, r8
 80ab6a0:	a803      	add	r0, sp, #12
 80ab6a2:	f7fa fb95 	bl	80a5dd0 <mbedtls_md_update>
 80ab6a6:	4606      	mov	r6, r0
 80ab6a8:	2800      	cmp	r0, #0
 80ab6aa:	d15d      	bne.n	80ab768 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_update( &md_ctx, pwd_block, v ) ) != 0 )
 80ab6ac:	4622      	mov	r2, r4
 80ab6ae:	4629      	mov	r1, r5
 80ab6b0:	a803      	add	r0, sp, #12
 80ab6b2:	f7fa fb8d 	bl	80a5dd0 <mbedtls_md_update>
 80ab6b6:	4606      	mov	r6, r0
 80ab6b8:	2800      	cmp	r0, #0
 80ab6ba:	d155      	bne.n	80ab768 <mbedtls_pkcs12_derivation+0x174>
            goto exit;

        if( ( ret = mbedtls_md_finish( &md_ctx, hash_output ) ) != 0 )
 80ab6bc:	a906      	add	r1, sp, #24
 80ab6be:	a803      	add	r0, sp, #12
 80ab6c0:	f7fa fb90 	bl	80a5de4 <mbedtls_md_finish>
 80ab6c4:	4606      	mov	r6, r0
 80ab6c6:	2800      	cmp	r0, #0
 80ab6c8:	d14e      	bne.n	80ab768 <mbedtls_pkcs12_derivation+0x174>
 80ab6ca:	f04f 0b01 	mov.w	fp, #1
            goto exit;

        // Perform remaining ( iterations - 1 ) recursive hash calculations
        for( i = 1; i < (size_t) iterations; i++ )
 80ab6ce:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80ab6d0:	459b      	cmp	fp, r3
 80ab6d2:	d20b      	bcs.n	80ab6ec <mbedtls_pkcs12_derivation+0xf8>
        {
            if( ( ret = mbedtls_md( md_info, hash_output, hlen, hash_output ) ) != 0 )
 80ab6d4:	ab06      	add	r3, sp, #24
 80ab6d6:	4652      	mov	r2, sl
 80ab6d8:	4619      	mov	r1, r3
 80ab6da:	9800      	ldr	r0, [sp, #0]
 80ab6dc:	f7fa fb8c 	bl	80a5df8 <mbedtls_md>
 80ab6e0:	4606      	mov	r6, r0
 80ab6e2:	2800      	cmp	r0, #0
 80ab6e4:	d140      	bne.n	80ab768 <mbedtls_pkcs12_derivation+0x174>

        if( ( ret = mbedtls_md_finish( &md_ctx, hash_output ) ) != 0 )
            goto exit;

        // Perform remaining ( iterations - 1 ) recursive hash calculations
        for( i = 1; i < (size_t) iterations; i++ )
 80ab6e6:	f10b 0b01 	add.w	fp, fp, #1
 80ab6ea:	e7f0      	b.n	80ab6ce <mbedtls_pkcs12_derivation+0xda>
 80ab6ec:	4557      	cmp	r7, sl
 80ab6ee:	46bb      	mov	fp, r7
 80ab6f0:	bf28      	it	cs
 80ab6f2:	46d3      	movcs	fp, sl
            if( ( ret = mbedtls_md( md_info, hash_output, hlen, hash_output ) ) != 0 )
                goto exit;
        }

        use_len = ( datalen > hlen ) ? hlen : datalen;
        memcpy( p, hash_output, use_len );
 80ab6f4:	a906      	add	r1, sp, #24
 80ab6f6:	465a      	mov	r2, fp
 80ab6f8:	9801      	ldr	r0, [sp, #4]
 80ab6fa:	f003 fcfa 	bl	80af0f2 <memcpy>
        datalen -= use_len;
        p += use_len;
 80ab6fe:	9b01      	ldr	r3, [sp, #4]

        if( datalen == 0 )
 80ab700:	ebb7 070b 	subs.w	r7, r7, fp
        }

        use_len = ( datalen > hlen ) ? hlen : datalen;
        memcpy( p, hash_output, use_len );
        datalen -= use_len;
        p += use_len;
 80ab704:	445b      	add	r3, fp
 80ab706:	9301      	str	r3, [sp, #4]

        if( datalen == 0 )
 80ab708:	d02d      	beq.n	80ab766 <mbedtls_pkcs12_derivation+0x172>
            break;

        // Concatenating copies of hash_output into hash_block (B)
        pkcs12_fill_buffer( hash_block, v, hash_output, hlen );
 80ab70a:	4653      	mov	r3, sl
 80ab70c:	aa06      	add	r2, sp, #24
 80ab70e:	4621      	mov	r1, r4
 80ab710:	4648      	mov	r0, r9
 80ab712:	f7ff ff55 	bl	80ab5c0 <_ZL18pkcs12_fill_bufferPhjPKhj>
 80ab716:	eb09 0304 	add.w	r3, r9, r4

        // B += 1
        for( i = v; i > 0; i-- )
            if( ++hash_block[i - 1] != 0 )
 80ab71a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80ab71e:	3201      	adds	r2, #1
 80ab720:	b2d2      	uxtb	r2, r2
 80ab722:	701a      	strb	r2, [r3, #0]
 80ab724:	b91a      	cbnz	r2, 80ab72e <mbedtls_pkcs12_derivation+0x13a>

        // Concatenating copies of hash_output into hash_block (B)
        pkcs12_fill_buffer( hash_block, v, hash_output, hlen );

        // B += 1
        for( i = v; i > 0; i-- )
 80ab726:	454b      	cmp	r3, r9
 80ab728:	d1f7      	bne.n	80ab71a <mbedtls_pkcs12_derivation+0x126>
 80ab72a:	4623      	mov	r3, r4
 80ab72c:	e001      	b.n	80ab732 <mbedtls_pkcs12_derivation+0x13e>
 80ab72e:	4623      	mov	r3, r4
 80ab730:	2200      	movs	r2, #0

        // salt_block += B
        c = 0;
        for( i = v; i > 0; i-- )
        {
            j = salt_block[i - 1] + hash_block[i - 1] + c;
 80ab732:	3b01      	subs	r3, #1
 80ab734:	f818 0003 	ldrb.w	r0, [r8, r3]
 80ab738:	f813 1009 	ldrb.w	r1, [r3, r9]
 80ab73c:	4401      	add	r1, r0
 80ab73e:	4411      	add	r1, r2
            c = (unsigned char) (j >> 8);
 80ab740:	f3c1 2207 	ubfx	r2, r1, #8, #8
            salt_block[i - 1] = j & 0xFF;
 80ab744:	f808 1003 	strb.w	r1, [r8, r3]
            if( ++hash_block[i - 1] != 0 )
                break;

        // salt_block += B
        c = 0;
        for( i = v; i > 0; i-- )
 80ab748:	2b00      	cmp	r3, #0
 80ab74a:	d1f2      	bne.n	80ab732 <mbedtls_pkcs12_derivation+0x13e>
 80ab74c:	4622      	mov	r2, r4

        // pwd_block  += B
        c = 0;
        for( i = v; i > 0; i-- )
        {
            j = pwd_block[i - 1] + hash_block[i - 1] + c;
 80ab74e:	3a01      	subs	r2, #1
 80ab750:	5d50      	ldrb	r0, [r2, r5]
 80ab752:	f812 1009 	ldrb.w	r1, [r2, r9]
 80ab756:	4401      	add	r1, r0
 80ab758:	4419      	add	r1, r3
            c = (unsigned char) (j >> 8);
 80ab75a:	f3c1 2307 	ubfx	r3, r1, #8, #8
            pwd_block[i - 1] = j & 0xFF;
 80ab75e:	5551      	strb	r1, [r2, r5]
            salt_block[i - 1] = j & 0xFF;
        }

        // pwd_block  += B
        c = 0;
        for( i = v; i > 0; i-- )
 80ab760:	2a00      	cmp	r2, #0
 80ab762:	d1f4      	bne.n	80ab74e <mbedtls_pkcs12_derivation+0x15a>
 80ab764:	e78a      	b.n	80ab67c <mbedtls_pkcs12_derivation+0x88>
            c = (unsigned char) (j >> 8);
            pwd_block[i - 1] = j & 0xFF;
        }
    }

    ret = 0;
 80ab766:	2600      	movs	r6, #0

exit:
    mbedtls_zeroize( salt_block, sizeof( salt_block ) );
 80ab768:	2180      	movs	r1, #128	; 0x80
 80ab76a:	4640      	mov	r0, r8
 80ab76c:	f7ff ff20 	bl	80ab5b0 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( pwd_block, sizeof( pwd_block ) );
 80ab770:	2180      	movs	r1, #128	; 0x80
 80ab772:	4628      	mov	r0, r5
 80ab774:	f7ff ff1c 	bl	80ab5b0 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( hash_block, sizeof( hash_block ) );
 80ab778:	2180      	movs	r1, #128	; 0x80
 80ab77a:	a876      	add	r0, sp, #472	; 0x1d8
 80ab77c:	f7ff ff18 	bl	80ab5b0 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( hash_output, sizeof( hash_output ) );
 80ab780:	2140      	movs	r1, #64	; 0x40
 80ab782:	a806      	add	r0, sp, #24
 80ab784:	f7ff ff14 	bl	80ab5b0 <_ZL15mbedtls_zeroizePvj>

    mbedtls_md_free( &md_ctx );
 80ab788:	a803      	add	r0, sp, #12
 80ab78a:	f7fa fad4 	bl	80a5d36 <mbedtls_md_free>

    return( ret );
 80ab78e:	4630      	mov	r0, r6
 80ab790:	e002      	b.n	80ab798 <mbedtls_pkcs12_derivation+0x1a4>
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    // This version only allows max of 64 bytes of password or salt
    if( datalen > 128 || pwdlen > 64 || saltlen > 64 )
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );
 80ab792:	4803      	ldr	r0, [pc, #12]	; (80ab7a0 <mbedtls_pkcs12_derivation+0x1ac>)
 80ab794:	e000      	b.n	80ab798 <mbedtls_pkcs12_derivation+0x1a4>

    md_info = mbedtls_md_info_from_type( md_type );
    if( md_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );
 80ab796:	4803      	ldr	r0, [pc, #12]	; (80ab7a4 <mbedtls_pkcs12_derivation+0x1b0>)
    mbedtls_zeroize( hash_output, sizeof( hash_output ) );

    mbedtls_md_free( &md_ctx );

    return( ret );
}
 80ab798:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 80ab79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80ab7a0:	ffffe080 	.word	0xffffe080
 80ab7a4:	ffffe100 	.word	0xffffe100

080ab7a8 <mbedtls_pkcs12_pbe>:
int mbedtls_pkcs12_pbe( mbedtls_asn1_buf *pbe_params, int mode,
                mbedtls_cipher_type_t cipher_type, mbedtls_md_type_t md_type,
                const unsigned char *pwd,  size_t pwdlen,
                const unsigned char *data, size_t len,
                unsigned char *output )
{
 80ab7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80ab7ac:	4604      	mov	r4, r0
 80ab7ae:	b0d9      	sub	sp, #356	; 0x164
    int ret, keylen = 0;
    unsigned char key[32];
    unsigned char iv[16];
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_cipher_context_t cipher_ctx;
    size_t olen = 0;
 80ab7b0:	2600      	movs	r6, #0

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
 80ab7b2:	4610      	mov	r0, r2
int mbedtls_pkcs12_pbe( mbedtls_asn1_buf *pbe_params, int mode,
                mbedtls_cipher_type_t cipher_type, mbedtls_md_type_t md_type,
                const unsigned char *pwd,  size_t pwdlen,
                const unsigned char *data, size_t len,
                unsigned char *output )
{
 80ab7b4:	468b      	mov	fp, r1
 80ab7b6:	4699      	mov	r9, r3
    int ret, keylen = 0;
    unsigned char key[32];
    unsigned char iv[16];
    const mbedtls_cipher_info_t *cipher_info;
    mbedtls_cipher_context_t cipher_ctx;
    size_t olen = 0;
 80ab7b8:	9606      	str	r6, [sp, #24]

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
 80ab7ba:	f7f5 ff61 	bl	80a1680 <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
 80ab7be:	4605      	mov	r5, r0
 80ab7c0:	2800      	cmp	r0, #0
 80ab7c2:	f000 80ac 	beq.w	80ab91e <mbedtls_pkcs12_pbe+0x176>
    int ret, iterations = 0;
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
 80ab7c6:	9b63      	ldr	r3, [sp, #396]	; 0x18c

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    keylen = cipher_info->key_bitlen / 8;
 80ab7c8:	6847      	ldr	r7, [r0, #4]
    int ret, iterations = 0;
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
 80ab7ca:	2b80      	cmp	r3, #128	; 0x80

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    keylen = cipher_info->key_bitlen / 8;
 80ab7cc:	ea4f 07d7 	mov.w	r7, r7, lsr #3

    if( ( ret = pkcs12_pbe_derive_key_iv( pbe_params, md_type, pwd, pwdlen,
                                          key, keylen,
                                          iv, cipher_info->iv_size ) ) != 0 )
 80ab7d0:	f8d0 800c 	ldr.w	r8, [r0, #12]
static int pkcs12_pbe_derive_key_iv( mbedtls_asn1_buf *pbe_params, mbedtls_md_type_t md_type,
                                     const unsigned char *pwd,  size_t pwdlen,
                                     unsigned char *key, size_t keylen,
                                     unsigned char *iv,  size_t ivlen )
{
    int ret, iterations = 0;
 80ab7d4:	9607      	str	r6, [sp, #28]
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
 80ab7d6:	d85e      	bhi.n	80ab896 <mbedtls_pkcs12_pbe+0xee>
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
    memset( &unipwd, 0, sizeof(unipwd) );
 80ab7d8:	4631      	mov	r1, r6
 80ab7da:	f44f 7281 	mov.w	r2, #258	; 0x102
 80ab7de:	a817      	add	r0, sp, #92	; 0x5c
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
 80ab7e0:	9608      	str	r6, [sp, #32]
 80ab7e2:	9609      	str	r6, [sp, #36]	; 0x24
 80ab7e4:	960a      	str	r6, [sp, #40]	; 0x28
    memset( &unipwd, 0, sizeof(unipwd) );
 80ab7e6:	f003 fcaa 	bl	80af13e <memset>
static int pkcs12_parse_pbe_params( mbedtls_asn1_buf *params,
                                    mbedtls_asn1_buf *salt, int *iterations )
{
    int ret;
    unsigned char **p = &params->p;
    const unsigned char *end = params->p + params->len;
 80ab7ea:	6863      	ldr	r3, [r4, #4]
 80ab7ec:	68a6      	ldr	r6, [r4, #8]

static int pkcs12_parse_pbe_params( mbedtls_asn1_buf *params,
                                    mbedtls_asn1_buf *salt, int *iterations )
{
    int ret;
    unsigned char **p = &params->p;
 80ab7ee:	f104 0a08 	add.w	sl, r4, #8
    const unsigned char *end = params->p + params->len;
 80ab7f2:	441e      	add	r6, r3
     *    salt          OCTET STRING,
     *    iterations    INTEGER
     *  }
     *
     */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 80ab7f4:	6823      	ldr	r3, [r4, #0]
 80ab7f6:	2b30      	cmp	r3, #48	; 0x30
 80ab7f8:	f040 8093 	bne.w	80ab922 <mbedtls_pkcs12_pbe+0x17a>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    if( ( ret = mbedtls_asn1_get_tag( p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 80ab7fc:	2304      	movs	r3, #4
 80ab7fe:	aa09      	add	r2, sp, #36	; 0x24
 80ab800:	4631      	mov	r1, r6
 80ab802:	4650      	mov	r0, sl
 80ab804:	f7f6 f90a 	bl	80a1a1c <mbedtls_asn1_get_tag>
 80ab808:	b950      	cbnz	r0, 80ab820 <mbedtls_pkcs12_pbe+0x78>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    salt->p = *p;
 80ab80a:	68a2      	ldr	r2, [r4, #8]
    *p += salt->len;
 80ab80c:	9b09      	ldr	r3, [sp, #36]	; 0x24
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    if( ( ret = mbedtls_asn1_get_tag( p, end, &salt->len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    salt->p = *p;
 80ab80e:	920a      	str	r2, [sp, #40]	; 0x28
    *p += salt->len;
 80ab810:	4413      	add	r3, r2
 80ab812:	60a3      	str	r3, [r4, #8]

    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
 80ab814:	aa07      	add	r2, sp, #28
 80ab816:	4631      	mov	r1, r6
 80ab818:	4650      	mov	r0, sl
 80ab81a:	f7f6 f92c 	bl	80a1a76 <mbedtls_asn1_get_int>
 80ab81e:	b118      	cbz	r0, 80ab828 <mbedtls_pkcs12_pbe+0x80>
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );
 80ab820:	f5a0 50f4 	sub.w	r0, r0, #7808	; 0x1e80
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );

    memset( &salt, 0, sizeof(mbedtls_asn1_buf) );
    memset( &unipwd, 0, sizeof(unipwd) );

    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
 80ab824:	b118      	cbz	r0, 80ab82e <mbedtls_pkcs12_pbe+0x86>
 80ab826:	e07f      	b.n	80ab928 <mbedtls_pkcs12_pbe+0x180>
    *p += salt->len;

    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    if( *p != end )
 80ab828:	68a3      	ldr	r3, [r4, #8]
 80ab82a:	429e      	cmp	r6, r3
 80ab82c:	d17b      	bne.n	80ab926 <mbedtls_pkcs12_pbe+0x17e>
int mbedtls_pkcs12_pbe( mbedtls_asn1_buf *pbe_params, int mode,
                mbedtls_cipher_type_t cipher_type, mbedtls_md_type_t md_type,
                const unsigned char *pwd,  size_t pwdlen,
                const unsigned char *data, size_t len,
                unsigned char *output )
{
 80ab82e:	2300      	movs	r3, #0

    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
                                         &iterations ) ) != 0 )
        return( ret );

    for( i = 0; i < pwdlen; i++ )
 80ab830:	9a63      	ldr	r2, [sp, #396]	; 0x18c
 80ab832:	429a      	cmp	r2, r3
 80ab834:	d007      	beq.n	80ab846 <mbedtls_pkcs12_pbe+0x9e>
        unipwd[i * 2 + 1] = pwd[i];
 80ab836:	9962      	ldr	r1, [sp, #392]	; 0x188
 80ab838:	aa17      	add	r2, sp, #92	; 0x5c
 80ab83a:	5cc9      	ldrb	r1, [r1, r3]
 80ab83c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80ab840:	7051      	strb	r1, [r2, #1]

    if( ( ret = pkcs12_parse_pbe_params( pbe_params, &salt,
                                         &iterations ) ) != 0 )
        return( ret );

    for( i = 0; i < pwdlen; i++ )
 80ab842:	3301      	adds	r3, #1
 80ab844:	e7f4      	b.n	80ab830 <mbedtls_pkcs12_pbe+0x88>
        unipwd[i * 2 + 1] = pwd[i];

    if( ( ret = mbedtls_pkcs12_derivation( key, keylen, unipwd, pwdlen * 2 + 2,
 80ab846:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 80ab848:	f8cd 9008 	str.w	r9, [sp, #8]
 80ab84c:	1c5c      	adds	r4, r3, #1
 80ab84e:	9b07      	ldr	r3, [sp, #28]
 80ab850:	0064      	lsls	r4, r4, #1
 80ab852:	9304      	str	r3, [sp, #16]
 80ab854:	2301      	movs	r3, #1
 80ab856:	9303      	str	r3, [sp, #12]
 80ab858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80ab85a:	aa17      	add	r2, sp, #92	; 0x5c
 80ab85c:	9301      	str	r3, [sp, #4]
 80ab85e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80ab860:	4639      	mov	r1, r7
 80ab862:	9300      	str	r3, [sp, #0]
 80ab864:	a80f      	add	r0, sp, #60	; 0x3c
 80ab866:	4623      	mov	r3, r4
 80ab868:	f7ff fec4 	bl	80ab5f4 <mbedtls_pkcs12_derivation>
 80ab86c:	b9a8      	cbnz	r0, 80ab89a <mbedtls_pkcs12_pbe+0xf2>
                                   MBEDTLS_PKCS12_DERIVE_KEY, iterations ) ) != 0 )
    {
        return( ret );
    }

    if( iv == NULL || ivlen == 0 )
 80ab86e:	f1b8 0f00 	cmp.w	r8, #0
 80ab872:	d014      	beq.n	80ab89e <mbedtls_pkcs12_pbe+0xf6>
        return( 0 );

    if( ( ret = mbedtls_pkcs12_derivation( iv, ivlen, unipwd, pwdlen * 2 + 2,
 80ab874:	9b07      	ldr	r3, [sp, #28]
 80ab876:	f8cd 9008 	str.w	r9, [sp, #8]
 80ab87a:	9304      	str	r3, [sp, #16]
 80ab87c:	2302      	movs	r3, #2
 80ab87e:	9303      	str	r3, [sp, #12]
 80ab880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80ab882:	aa17      	add	r2, sp, #92	; 0x5c
 80ab884:	9301      	str	r3, [sp, #4]
 80ab886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80ab888:	4641      	mov	r1, r8
 80ab88a:	9300      	str	r3, [sp, #0]
 80ab88c:	a80b      	add	r0, sp, #44	; 0x2c
 80ab88e:	4623      	mov	r3, r4
 80ab890:	f7ff feb0 	bl	80ab5f4 <mbedtls_pkcs12_derivation>
 80ab894:	e001      	b.n	80ab89a <mbedtls_pkcs12_pbe+0xf2>
    mbedtls_asn1_buf salt;
    size_t i;
    unsigned char unipwd[PKCS12_MAX_PWDLEN * 2 + 2];

    if( pwdlen > PKCS12_MAX_PWDLEN )
        return( MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA );
 80ab896:	4826      	ldr	r0, [pc, #152]	; (80ab930 <mbedtls_pkcs12_pbe+0x188>)
 80ab898:	e046      	b.n	80ab928 <mbedtls_pkcs12_pbe+0x180>
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );

    keylen = cipher_info->key_bitlen / 8;

    if( ( ret = pkcs12_pbe_derive_key_iv( pbe_params, md_type, pwd, pwdlen,
 80ab89a:	2800      	cmp	r0, #0
 80ab89c:	d144      	bne.n	80ab928 <mbedtls_pkcs12_pbe+0x180>
                                          iv, cipher_info->iv_size ) ) != 0 )
    {
        return( ret );
    }

    mbedtls_cipher_init( &cipher_ctx );
 80ab89e:	a817      	add	r0, sp, #92	; 0x5c
 80ab8a0:	f7f5 ff10 	bl	80a16c4 <mbedtls_cipher_init>

    if( ( ret = mbedtls_cipher_setup( &cipher_ctx, cipher_info ) ) != 0 )
 80ab8a4:	4629      	mov	r1, r5
 80ab8a6:	a817      	add	r0, sp, #92	; 0x5c
 80ab8a8:	f7f5 ff22 	bl	80a16f0 <mbedtls_cipher_setup>
 80ab8ac:	4604      	mov	r4, r0
 80ab8ae:	bb48      	cbnz	r0, 80ab904 <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_setkey( &cipher_ctx, key, 8 * keylen, (mbedtls_operation_t) mode ) ) != 0 )
 80ab8b0:	fa4f f38b 	sxtb.w	r3, fp
 80ab8b4:	00fa      	lsls	r2, r7, #3
 80ab8b6:	a90f      	add	r1, sp, #60	; 0x3c
 80ab8b8:	a817      	add	r0, sp, #92	; 0x5c
 80ab8ba:	f7f5 ff33 	bl	80a1724 <mbedtls_cipher_setkey>
 80ab8be:	4604      	mov	r4, r0
 80ab8c0:	bb00      	cbnz	r0, 80ab904 <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_set_iv( &cipher_ctx, iv, cipher_info->iv_size ) ) != 0 )
 80ab8c2:	68ea      	ldr	r2, [r5, #12]
 80ab8c4:	a90b      	add	r1, sp, #44	; 0x2c
 80ab8c6:	a817      	add	r0, sp, #92	; 0x5c
 80ab8c8:	f7f5 ff4e 	bl	80a1768 <mbedtls_cipher_set_iv>
 80ab8cc:	4604      	mov	r4, r0
 80ab8ce:	b9c8      	cbnz	r0, 80ab904 <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_reset( &cipher_ctx ) ) != 0 )
 80ab8d0:	a817      	add	r0, sp, #92	; 0x5c
 80ab8d2:	f7f5 ff69 	bl	80a17a8 <mbedtls_cipher_reset>
 80ab8d6:	4604      	mov	r4, r0
 80ab8d8:	b9a0      	cbnz	r0, 80ab904 <mbedtls_pkcs12_pbe+0x15c>
        goto exit;

    if( ( ret = mbedtls_cipher_update( &cipher_ctx, data, len,
 80ab8da:	ad06      	add	r5, sp, #24
 80ab8dc:	9500      	str	r5, [sp, #0]
 80ab8de:	a964      	add	r1, sp, #400	; 0x190
 80ab8e0:	c90e      	ldmia	r1, {r1, r2, r3}
 80ab8e2:	a817      	add	r0, sp, #92	; 0x5c
 80ab8e4:	f7f5 ff6c 	bl	80a17c0 <mbedtls_cipher_update>
 80ab8e8:	4604      	mov	r4, r0
 80ab8ea:	b958      	cbnz	r0, 80ab904 <mbedtls_pkcs12_pbe+0x15c>
                                output, &olen ) ) != 0 )
    {
        goto exit;
    }

    if( ( ret = mbedtls_cipher_finish( &cipher_ctx, output + olen, &olen ) ) != 0 )
 80ab8ec:	6829      	ldr	r1, [r5, #0]
 80ab8ee:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80ab8f0:	462a      	mov	r2, r5
 80ab8f2:	4419      	add	r1, r3
 80ab8f4:	a817      	add	r0, sp, #92	; 0x5c
 80ab8f6:	f7f5 ffab 	bl	80a1850 <mbedtls_cipher_finish>
        ret = MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH;
 80ab8fa:	f5a4 54f0 	sub.w	r4, r4, #7680	; 0x1e00
 80ab8fe:	2800      	cmp	r0, #0
 80ab900:	bf08      	it	eq
 80ab902:	2400      	moveq	r4, #0

exit:
    mbedtls_zeroize( key, sizeof( key ) );
 80ab904:	2120      	movs	r1, #32
 80ab906:	a80f      	add	r0, sp, #60	; 0x3c
 80ab908:	f7ff fe52 	bl	80ab5b0 <_ZL15mbedtls_zeroizePvj>
    mbedtls_zeroize( iv,  sizeof( iv  ) );
 80ab90c:	2110      	movs	r1, #16
 80ab90e:	a80b      	add	r0, sp, #44	; 0x2c
 80ab910:	f7ff fe4e 	bl	80ab5b0 <_ZL15mbedtls_zeroizePvj>
    mbedtls_cipher_free( &cipher_ctx );
 80ab914:	a817      	add	r0, sp, #92	; 0x5c
 80ab916:	f7f5 fed9 	bl	80a16cc <mbedtls_cipher_free>

    return( ret );
 80ab91a:	4620      	mov	r0, r4
 80ab91c:	e004      	b.n	80ab928 <mbedtls_pkcs12_pbe+0x180>
    mbedtls_cipher_context_t cipher_ctx;
    size_t olen = 0;

    cipher_info = mbedtls_cipher_info_from_type( cipher_type );
    if( cipher_info == NULL )
        return( MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE );
 80ab91e:	4805      	ldr	r0, [pc, #20]	; (80ab934 <mbedtls_pkcs12_pbe+0x18c>)
 80ab920:	e002      	b.n	80ab928 <mbedtls_pkcs12_pbe+0x180>
     *  }
     *
     */
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 80ab922:	4805      	ldr	r0, [pc, #20]	; (80ab938 <mbedtls_pkcs12_pbe+0x190>)
 80ab924:	e000      	b.n	80ab928 <mbedtls_pkcs12_pbe+0x180>
    if( ( ret = mbedtls_asn1_get_int( p, end, iterations ) ) != 0 )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT + ret );

    if( *p != end )
        return( MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT +
                MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 80ab926:	4805      	ldr	r0, [pc, #20]	; (80ab93c <mbedtls_pkcs12_pbe+0x194>)
    mbedtls_zeroize( key, sizeof( key ) );
    mbedtls_zeroize( iv,  sizeof( iv  ) );
    mbedtls_cipher_free( &cipher_ctx );

    return( ret );
}
 80ab928:	b059      	add	sp, #356	; 0x164
 80ab92a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80ab92e:	bf00      	nop
 80ab930:	ffffe080 	.word	0xffffe080
 80ab934:	ffffe100 	.word	0xffffe100
 80ab938:	ffffe11e 	.word	0xffffe11e
 80ab93c:	ffffe11a 	.word	0xffffe11a

080ab940 <mbedtls_sha512_init>:
}
#endif /* PUT_UINT64_BE */

void mbedtls_sha512_init( mbedtls_sha512_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha512_context ) );
 80ab940:	22d8      	movs	r2, #216	; 0xd8
 80ab942:	2100      	movs	r1, #0
 80ab944:	f003 bbfb 	b.w	80af13e <memset>

080ab948 <mbedtls_sha512_free>:
}

void mbedtls_sha512_free( mbedtls_sha512_context *ctx )
{
    if( ctx == NULL )
 80ab948:	b138      	cbz	r0, 80ab95a <mbedtls_sha512_free+0x12>
 80ab94a:	f100 02d8 	add.w	r2, r0, #216	; 0xd8

#if !defined(MBEDTLS_SHA512_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80ab94e:	2300      	movs	r3, #0
 80ab950:	4290      	cmp	r0, r2
 80ab952:	d002      	beq.n	80ab95a <mbedtls_sha512_free+0x12>
 80ab954:	7003      	strb	r3, [r0, #0]
 80ab956:	3001      	adds	r0, #1
 80ab958:	e7fa      	b.n	80ab950 <mbedtls_sha512_free+0x8>
 80ab95a:	4770      	bx	lr

080ab95c <mbedtls_sha512_clone>:
    mbedtls_zeroize( ctx, sizeof( mbedtls_sha512_context ) );
}

void mbedtls_sha512_clone( mbedtls_sha512_context *dst,
                           const mbedtls_sha512_context *src )
{
 80ab95c:	b508      	push	{r3, lr}
    *dst = *src;
 80ab95e:	22d8      	movs	r2, #216	; 0xd8
 80ab960:	f003 fbc7 	bl	80af0f2 <memcpy>
 80ab964:	bd08      	pop	{r3, pc}
	...

080ab968 <mbedtls_sha512_starts_ret>:
/*
 * SHA-512 context setup
 */
int mbedtls_sha512_starts_ret( mbedtls_sha512_context *ctx, int is384 )
{
    ctx->total[0] = 0;
 80ab968:	2200      	movs	r2, #0
 80ab96a:	2300      	movs	r3, #0
 80ab96c:	e9c0 2300 	strd	r2, r3, [r0]
    ctx->total[1] = 0;
 80ab970:	e9c0 2302 	strd	r2, r3, [r0, #8]

    if( is384 == 0 )
 80ab974:	bb31      	cbnz	r1, 80ab9c4 <mbedtls_sha512_starts_ret+0x5c>
    {
        /* SHA-512 */
        ctx->state[0] = UL64(0x6A09E667F3BCC908);
 80ab976:	a32a      	add	r3, pc, #168	; (adr r3, 80aba20 <mbedtls_sha512_starts_ret+0xb8>)
 80ab978:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ab97c:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0xBB67AE8584CAA73B);
 80ab980:	a329      	add	r3, pc, #164	; (adr r3, 80aba28 <mbedtls_sha512_starts_ret+0xc0>)
 80ab982:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ab986:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x3C6EF372FE94F82B);
 80ab98a:	a329      	add	r3, pc, #164	; (adr r3, 80aba30 <mbedtls_sha512_starts_ret+0xc8>)
 80ab98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ab990:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0xA54FF53A5F1D36F1);
 80ab994:	a328      	add	r3, pc, #160	; (adr r3, 80aba38 <mbedtls_sha512_starts_ret+0xd0>)
 80ab996:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ab99a:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x510E527FADE682D1);
 80ab99e:	a328      	add	r3, pc, #160	; (adr r3, 80aba40 <mbedtls_sha512_starts_ret+0xd8>)
 80ab9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ab9a4:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x9B05688C2B3E6C1F);
 80ab9a8:	a327      	add	r3, pc, #156	; (adr r3, 80aba48 <mbedtls_sha512_starts_ret+0xe0>)
 80ab9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ab9ae:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0x1F83D9ABFB41BD6B);
 80ab9b2:	a327      	add	r3, pc, #156	; (adr r3, 80aba50 <mbedtls_sha512_starts_ret+0xe8>)
 80ab9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ab9b8:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x5BE0CD19137E2179);
 80ab9bc:	a326      	add	r3, pc, #152	; (adr r3, 80aba58 <mbedtls_sha512_starts_ret+0xf0>)
 80ab9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ab9c2:	e025      	b.n	80aba10 <mbedtls_sha512_starts_ret+0xa8>
    }
    else
    {
        /* SHA-384 */
        ctx->state[0] = UL64(0xCBBB9D5DC1059ED8);
 80ab9c4:	a326      	add	r3, pc, #152	; (adr r3, 80aba60 <mbedtls_sha512_starts_ret+0xf8>)
 80ab9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ab9ca:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0x629A292A367CD507);
 80ab9ce:	a326      	add	r3, pc, #152	; (adr r3, 80aba68 <mbedtls_sha512_starts_ret+0x100>)
 80ab9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ab9d4:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x9159015A3070DD17);
 80ab9d8:	a325      	add	r3, pc, #148	; (adr r3, 80aba70 <mbedtls_sha512_starts_ret+0x108>)
 80ab9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ab9de:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0x152FECD8F70E5939);
 80ab9e2:	a325      	add	r3, pc, #148	; (adr r3, 80aba78 <mbedtls_sha512_starts_ret+0x110>)
 80ab9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ab9e8:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x67332667FFC00B31);
 80ab9ec:	a324      	add	r3, pc, #144	; (adr r3, 80aba80 <mbedtls_sha512_starts_ret+0x118>)
 80ab9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ab9f2:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x8EB44A8768581511);
 80ab9f6:	a324      	add	r3, pc, #144	; (adr r3, 80aba88 <mbedtls_sha512_starts_ret+0x120>)
 80ab9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80ab9fc:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
 80aba00:	a323      	add	r3, pc, #140	; (adr r3, 80aba90 <mbedtls_sha512_starts_ret+0x128>)
 80aba02:	e9d3 2300 	ldrd	r2, r3, [r3]
 80aba06:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
 80aba0a:	a323      	add	r3, pc, #140	; (adr r3, 80aba98 <mbedtls_sha512_starts_ret+0x130>)
 80aba0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80aba10:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
    }

    ctx->is384 = is384;
 80aba14:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0

    return( 0 );
}
 80aba18:	2000      	movs	r0, #0
 80aba1a:	4770      	bx	lr
 80aba1c:	f3af 8000 	nop.w
 80aba20:	f3bcc908 	.word	0xf3bcc908
 80aba24:	6a09e667 	.word	0x6a09e667
 80aba28:	84caa73b 	.word	0x84caa73b
 80aba2c:	bb67ae85 	.word	0xbb67ae85
 80aba30:	fe94f82b 	.word	0xfe94f82b
 80aba34:	3c6ef372 	.word	0x3c6ef372
 80aba38:	5f1d36f1 	.word	0x5f1d36f1
 80aba3c:	a54ff53a 	.word	0xa54ff53a
 80aba40:	ade682d1 	.word	0xade682d1
 80aba44:	510e527f 	.word	0x510e527f
 80aba48:	2b3e6c1f 	.word	0x2b3e6c1f
 80aba4c:	9b05688c 	.word	0x9b05688c
 80aba50:	fb41bd6b 	.word	0xfb41bd6b
 80aba54:	1f83d9ab 	.word	0x1f83d9ab
 80aba58:	137e2179 	.word	0x137e2179
 80aba5c:	5be0cd19 	.word	0x5be0cd19
 80aba60:	c1059ed8 	.word	0xc1059ed8
 80aba64:	cbbb9d5d 	.word	0xcbbb9d5d
 80aba68:	367cd507 	.word	0x367cd507
 80aba6c:	629a292a 	.word	0x629a292a
 80aba70:	3070dd17 	.word	0x3070dd17
 80aba74:	9159015a 	.word	0x9159015a
 80aba78:	f70e5939 	.word	0xf70e5939
 80aba7c:	152fecd8 	.word	0x152fecd8
 80aba80:	ffc00b31 	.word	0xffc00b31
 80aba84:	67332667 	.word	0x67332667
 80aba88:	68581511 	.word	0x68581511
 80aba8c:	8eb44a87 	.word	0x8eb44a87
 80aba90:	64f98fa7 	.word	0x64f98fa7
 80aba94:	db0c2e0d 	.word	0xdb0c2e0d
 80aba98:	befa4fa4 	.word	0xbefa4fa4
 80aba9c:	47b5481d 	.word	0x47b5481d

080abaa0 <mbedtls_internal_sha512_process>:
    UL64(0x5FCB6FAB3AD6FAEC),  UL64(0x6C44198C4A475817)
};

int mbedtls_internal_sha512_process( mbedtls_sha512_context *ctx,
                                     const unsigned char data[128] )
{
 80abaa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80abaa4:	f2ad 4d7c 	subw	sp, sp, #1148	; 0x47c
 80abaa8:	4686      	mov	lr, r0
 80abaaa:	f50d 7cf8 	add.w	ip, sp, #496	; 0x1f0
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
 80abaae:	2000      	movs	r0, #0
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 80abab0:	eb01 04c0 	add.w	r4, r1, r0, lsl #3
 80abab4:	f811 2030 	ldrb.w	r2, [r1, r0, lsl #3]
 80abab8:	7866      	ldrb	r6, [r4, #1]
 80ababa:	f04f 0a00 	mov.w	sl, #0
 80ababe:	ea4f 6b02 	mov.w	fp, r2, lsl #24
 80abac2:	0436      	lsls	r6, r6, #16
 80abac4:	2300      	movs	r3, #0
 80abac6:	ea43 030b 	orr.w	r3, r3, fp
 80abaca:	9609      	str	r6, [sp, #36]	; 0x24
 80abacc:	f8cd a020 	str.w	sl, [sp, #32]
 80abad0:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
 80abad4:	431e      	orrs	r6, r3
 80abad6:	4633      	mov	r3, r6
 80abad8:	79e2      	ldrb	r2, [r4, #7]
 80abada:	78a6      	ldrb	r6, [r4, #2]
 80abadc:	ea42 020a 	orr.w	r2, r2, sl
 80abae0:	4315      	orrs	r5, r2
 80abae2:	462a      	mov	r2, r5
 80abae4:	0236      	lsls	r6, r6, #8
 80abae6:	960b      	str	r6, [sp, #44]	; 0x2c
 80abae8:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80abaec:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 80abaf0:	431e      	orrs	r6, r3
 80abaf2:	4633      	mov	r3, r6
 80abaf4:	4315      	orrs	r5, r2
 80abaf6:	78e6      	ldrb	r6, [r4, #3]
 80abaf8:	462a      	mov	r2, r5
 80abafa:	960d      	str	r6, [sp, #52]	; 0x34
 80abafc:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80abb00:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 80abb04:	431e      	orrs	r6, r3
 80abb06:	4633      	mov	r3, r6
 80abb08:	7926      	ldrb	r6, [r4, #4]
 80abb0a:	4315      	orrs	r5, r2
 80abb0c:	462a      	mov	r2, r5
 80abb0e:	0635      	lsls	r5, r6, #24
 80abb10:	f8cd a014 	str.w	sl, [sp, #20]
 80abb14:	9504      	str	r5, [sp, #16]
 80abb16:	e9dd 5604 	ldrd	r5, r6, [sp, #16]
 80abb1a:	431e      	orrs	r6, r3
 80abb1c:	4633      	mov	r3, r6
 80abb1e:	7966      	ldrb	r6, [r4, #5]
 80abb20:	4315      	orrs	r5, r2
 80abb22:	462a      	mov	r2, r5
 80abb24:	0435      	lsls	r5, r6, #16
 80abb26:	f8cd a01c 	str.w	sl, [sp, #28]
 80abb2a:	9506      	str	r5, [sp, #24]
 80abb2c:	e9dd 5606 	ldrd	r5, r6, [sp, #24]
 80abb30:	431e      	orrs	r6, r3
 80abb32:	4633      	mov	r3, r6
 80abb34:	79a6      	ldrb	r6, [r4, #6]
 80abb36:	4315      	orrs	r5, r2
 80abb38:	ea4f 2806 	mov.w	r8, r6, lsl #8
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
 80abb3c:	3001      	adds	r0, #1
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 80abb3e:	ea45 0208 	orr.w	r2, r5, r8
 80abb42:	ea43 030a 	orr.w	r3, r3, sl
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
 80abb46:	2810      	cmp	r0, #16
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 80abb48:	e9ec 2302 	strd	r2, r3, [ip, #8]!
    temp1 = h + S3(e) + F1(e,f,g) + K + x;      \
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
 80abb4c:	d1b0      	bne.n	80abab0 <mbedtls_internal_sha512_process+0x10>
 80abb4e:	a97e      	add	r1, sp, #504	; 0x1f8
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
 80abb50:	6f0a      	ldr	r2, [r1, #112]	; 0x70
 80abb52:	6f4b      	ldr	r3, [r1, #116]	; 0x74
               S0(W[i - 15]) + W[i - 16];
 80abb54:	0cd4      	lsrs	r4, r2, #19
 80abb56:	ea44 3443 	orr.w	r4, r4, r3, lsl #13
 80abb5a:	940e      	str	r4, [sp, #56]	; 0x38
 80abb5c:	0cdc      	lsrs	r4, r3, #19
 80abb5e:	ea44 3442 	orr.w	r4, r4, r2, lsl #13
 80abb62:	940f      	str	r4, [sp, #60]	; 0x3c
 80abb64:	00dc      	lsls	r4, r3, #3
 80abb66:	ea44 7452 	orr.w	r4, r4, r2, lsr #29
 80abb6a:	9411      	str	r4, [sp, #68]	; 0x44
 80abb6c:	00d4      	lsls	r4, r2, #3
 80abb6e:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
 80abb72:	0992      	lsrs	r2, r2, #6
 80abb74:	ea42 6283 	orr.w	r2, r2, r3, lsl #26
 80abb78:	9410      	str	r4, [sp, #64]	; 0x40
 80abb7a:	099b      	lsrs	r3, r3, #6
 80abb7c:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 80abb80:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 80abb84:	9200      	str	r2, [sp, #0]
 80abb86:	4066      	eors	r6, r4
 80abb88:	9301      	str	r3, [sp, #4]
 80abb8a:	406f      	eors	r7, r5
 80abb8c:	e9dd 3400 	ldrd	r3, r4, [sp]
 80abb90:	4073      	eors	r3, r6
 80abb92:	461e      	mov	r6, r3
 80abb94:	e9d1 2300 	ldrd	r2, r3, [r1]
 80abb98:	407c      	eors	r4, r7
 80abb9a:	4627      	mov	r7, r4
 80abb9c:	e9d1 4512 	ldrd	r4, r5, [r1, #72]	; 0x48
 80abba0:	f8d1 8008 	ldr.w	r8, [r1, #8]
 80abba4:	1912      	adds	r2, r2, r4
 80abba6:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80abbaa:	416b      	adcs	r3, r5
 80abbac:	18b4      	adds	r4, r6, r2
 80abbae:	eb47 0503 	adc.w	r5, r7, r3
 80abbb2:	ea4f 0358 	mov.w	r3, r8, lsr #1
 80abbb6:	ea43 73cc 	orr.w	r3, r3, ip, lsl #31
 80abbba:	9312      	str	r3, [sp, #72]	; 0x48
 80abbbc:	ea4f 035c 	mov.w	r3, ip, lsr #1
 80abbc0:	ea43 73c8 	orr.w	r3, r3, r8, lsl #31
 80abbc4:	9313      	str	r3, [sp, #76]	; 0x4c
 80abbc6:	ea4f 2318 	mov.w	r3, r8, lsr #8
 80abbca:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 80abbce:	9314      	str	r3, [sp, #80]	; 0x50
 80abbd0:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80abbd4:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 80abbd8:	9315      	str	r3, [sp, #84]	; 0x54
 80abbda:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 80abbde:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80abbe2:	4072      	eors	r2, r6
 80abbe4:	ea4f 16d8 	mov.w	r6, r8, lsr #7
 80abbe8:	ea46 664c 	orr.w	r6, r6, ip, lsl #25
 80abbec:	9602      	str	r6, [sp, #8]
 80abbee:	ea4f 16dc 	mov.w	r6, ip, lsr #7
 80abbf2:	9603      	str	r6, [sp, #12]
 80abbf4:	407b      	eors	r3, r7
 80abbf6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80abbfa:	4056      	eors	r6, r2
 80abbfc:	1932      	adds	r2, r6, r4
 80abbfe:	ea87 0703 	eor.w	r7, r7, r3
    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
 80abc02:	f100 0001 	add.w	r0, r0, #1
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
 80abc06:	eb47 0305 	adc.w	r3, r7, r5
    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
 80abc0a:	2850      	cmp	r0, #80	; 0x50
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
 80abc0c:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 80abc10:	f101 0108 	add.w	r1, r1, #8
    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
    }

    for( ; i < 80; i++ )
 80abc14:	d19c      	bne.n	80abb50 <mbedtls_internal_sha512_process+0xb0>
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
 80abc16:	e9de 3404 	ldrd	r3, r4, [lr, #16]
 80abc1a:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    B = ctx->state[1];
 80abc1e:	e9de 3406 	ldrd	r3, r4, [lr, #24]
 80abc22:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
    C = ctx->state[2];
 80abc26:	e9de 3408 	ldrd	r3, r4, [lr, #32]
 80abc2a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    D = ctx->state[3];
 80abc2e:	e9de 340a 	ldrd	r3, r4, [lr, #40]	; 0x28
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
 80abc32:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
    D = ctx->state[3];
 80abc36:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
    E = ctx->state[4];
 80abc3a:	e9de 340c 	ldrd	r3, r4, [lr, #48]	; 0x30
    }

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
 80abc3e:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
    E = ctx->state[4];
 80abc42:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
    F = ctx->state[5];
 80abc46:	e9de 340e 	ldrd	r3, r4, [lr, #56]	; 0x38
 80abc4a:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
    G = ctx->state[6];
 80abc4e:	e9de 3410 	ldrd	r3, r4, [lr, #64]	; 0x40
 80abc52:	e9cd 3418 	strd	r3, r4, [sp, #96]	; 0x60
    H = ctx->state[7];
 80abc56:	e9de 3412 	ldrd	r3, r4, [lr, #72]	; 0x48
 80abc5a:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
 80abc5e:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 80abc62:	4b0d      	ldr	r3, [pc, #52]	; (80abc98 <mbedtls_internal_sha512_process+0x1f8>)
 80abc64:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
    G = ctx->state[6];
 80abc68:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 80abc6c:	e9cd 0108 	strd	r0, r1, [sp, #32]
    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
    F = ctx->state[5];
 80abc70:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 80abc74:	e9cd 0106 	strd	r0, r1, [sp, #24]

    A = ctx->state[0];
    B = ctx->state[1];
    C = ctx->state[2];
    D = ctx->state[3];
    E = ctx->state[4];
 80abc78:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80abc7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
    B = ctx->state[1];
 80abc80:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80abc84:	e9cd 0102 	strd	r0, r1, [sp, #8]
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
               S0(W[i - 15]) + W[i - 16];
    }

    A = ctx->state[0];
 80abc88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80abc8c:	e9cd 0100 	strd	r0, r1, [sp]
 80abc90:	aa80      	add	r2, sp, #512	; 0x200
 80abc92:	f503 7c20 	add.w	ip, r3, #640	; 0x280
 80abc96:	e001      	b.n	80abc9c <mbedtls_internal_sha512_process+0x1fc>
 80abc98:	080b1078 	.word	0x080b1078
    H = ctx->state[7];
    i = 0;

    do
    {
        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
 80abc9c:	9904      	ldr	r1, [sp, #16]
 80abc9e:	9805      	ldr	r0, [sp, #20]
 80abca0:	0b89      	lsrs	r1, r1, #14
 80abca2:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 80abca6:	911e      	str	r1, [sp, #120]	; 0x78
 80abca8:	0b81      	lsrs	r1, r0, #14
 80abcaa:	9804      	ldr	r0, [sp, #16]
 80abcac:	e953 4502 	ldrd	r4, r5, [r3, #-8]
 80abcb0:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 80abcb4:	911f      	str	r1, [sp, #124]	; 0x7c
 80abcb6:	0c81      	lsrs	r1, r0, #18
 80abcb8:	9805      	ldr	r0, [sp, #20]
 80abcba:	e9dd 671e 	ldrd	r6, r7, [sp, #120]	; 0x78
 80abcbe:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 80abcc2:	9120      	str	r1, [sp, #128]	; 0x80
 80abcc4:	0c81      	lsrs	r1, r0, #18
 80abcc6:	9804      	ldr	r0, [sp, #16]
 80abcc8:	3340      	adds	r3, #64	; 0x40
 80abcca:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 80abcce:	9121      	str	r1, [sp, #132]	; 0x84
 80abcd0:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 80abcd4:	404f      	eors	r7, r1
 80abcd6:	9905      	ldr	r1, [sp, #20]
 80abcd8:	4046      	eors	r6, r0
 80abcda:	9804      	ldr	r0, [sp, #16]
 80abcdc:	05c9      	lsls	r1, r1, #23
 80abcde:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 80abce2:	9123      	str	r1, [sp, #140]	; 0x8c
 80abce4:	05c1      	lsls	r1, r0, #23
 80abce6:	9805      	ldr	r0, [sp, #20]
 80abce8:	3240      	adds	r2, #64	; 0x40
 80abcea:	ea41 2150 	orr.w	r1, r1, r0, lsr #9
 80abcee:	9122      	str	r1, [sp, #136]	; 0x88
 80abcf0:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 80abcf4:	4070      	eors	r0, r6
 80abcf6:	4079      	eors	r1, r7
 80abcf8:	4606      	mov	r6, r0
 80abcfa:	460f      	mov	r7, r1
 80abcfc:	e952 0112 	ldrd	r0, r1, [r2, #-72]	; 0x48
 80abd00:	1900      	adds	r0, r0, r4
 80abd02:	4169      	adcs	r1, r5
 80abd04:	1836      	adds	r6, r6, r0
 80abd06:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 80abd0a:	414f      	adcs	r7, r1
 80abd0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80abd10:	4060      	eors	r0, r4
 80abd12:	4069      	eors	r1, r5
 80abd14:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80abd18:	4004      	ands	r4, r0
 80abd1a:	4620      	mov	r0, r4
 80abd1c:	400d      	ands	r5, r1
 80abd1e:	4629      	mov	r1, r5
 80abd20:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 80abd24:	4044      	eors	r4, r0
 80abd26:	1936      	adds	r6, r6, r4
 80abd28:	ea85 0501 	eor.w	r5, r5, r1
 80abd2c:	416f      	adcs	r7, r5
 80abd2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80abd32:	1980      	adds	r0, r0, r6
 80abd34:	4179      	adcs	r1, r7
 80abd36:	4606      	mov	r6, r0
 80abd38:	460f      	mov	r7, r1
 80abd3a:	eb18 0800 	adds.w	r8, r8, r0
 80abd3e:	eb49 0901 	adc.w	r9, r9, r1
 80abd42:	9900      	ldr	r1, [sp, #0]
 80abd44:	9801      	ldr	r0, [sp, #4]
 80abd46:	0f09      	lsrs	r1, r1, #28
 80abd48:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80abd4c:	9124      	str	r1, [sp, #144]	; 0x90
 80abd4e:	0f01      	lsrs	r1, r0, #28
 80abd50:	9800      	ldr	r0, [sp, #0]
 80abd52:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80abd56:	9125      	str	r1, [sp, #148]	; 0x94
 80abd58:	9901      	ldr	r1, [sp, #4]
 80abd5a:	0789      	lsls	r1, r1, #30
 80abd5c:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 80abd60:	9127      	str	r1, [sp, #156]	; 0x9c
 80abd62:	0781      	lsls	r1, r0, #30
 80abd64:	9801      	ldr	r0, [sp, #4]
 80abd66:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 80abd6a:	9126      	str	r1, [sp, #152]	; 0x98
 80abd6c:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 80abd70:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
 80abd74:	404d      	eors	r5, r1
 80abd76:	9901      	ldr	r1, [sp, #4]
 80abd78:	4044      	eors	r4, r0
 80abd7a:	9800      	ldr	r0, [sp, #0]
 80abd7c:	0649      	lsls	r1, r1, #25
 80abd7e:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 80abd82:	9129      	str	r1, [sp, #164]	; 0xa4
 80abd84:	0641      	lsls	r1, r0, #25
 80abd86:	9801      	ldr	r0, [sp, #4]
 80abd88:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 80abd8c:	9128      	str	r1, [sp, #160]	; 0xa0
 80abd8e:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 80abd92:	4060      	eors	r0, r4
 80abd94:	4069      	eors	r1, r5
 80abd96:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80abd9a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80abd9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80abda2:	4320      	orrs	r0, r4
 80abda4:	4329      	orrs	r1, r5
 80abda6:	ea00 040a 	and.w	r4, r0, sl
 80abdaa:	ea01 050b 	and.w	r5, r1, fp
 80abdae:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
 80abdb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80abdb6:	e9dd 4500 	ldrd	r4, r5, [sp]
 80abdba:	4004      	ands	r4, r0
 80abdbc:	400d      	ands	r5, r1
 80abdbe:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 80abdc2:	4320      	orrs	r0, r4
 80abdc4:	4329      	orrs	r1, r5
 80abdc6:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 80abdca:	1824      	adds	r4, r4, r0
 80abdcc:	414d      	adcs	r5, r1
 80abdce:	19a4      	adds	r4, r4, r6
 80abdd0:	417d      	adcs	r5, r7
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
 80abdd2:	e952 0110 	ldrd	r0, r1, [r2, #-64]	; 0x40
    H = ctx->state[7];
    i = 0;

    do
    {
        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
 80abdd6:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
 80abdda:	e953 4510 	ldrd	r4, r5, [r3, #-64]	; 0x40
 80abdde:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 80abde2:	1900      	adds	r0, r0, r4
 80abde4:	4169      	adcs	r1, r5
 80abde6:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 80abdea:	1824      	adds	r4, r4, r0
 80abdec:	414d      	adcs	r5, r1
 80abdee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80abdf2:	4070      	eors	r0, r6
 80abdf4:	ea00 0008 	and.w	r0, r0, r8
 80abdf8:	4046      	eors	r6, r0
 80abdfa:	19a0      	adds	r0, r4, r6
 80abdfc:	ea4f 3498 	mov.w	r4, r8, lsr #14
 80abe00:	ea44 4489 	orr.w	r4, r4, r9, lsl #18
 80abe04:	942a      	str	r4, [sp, #168]	; 0xa8
 80abe06:	ea4f 3499 	mov.w	r4, r9, lsr #14
 80abe0a:	ea44 4488 	orr.w	r4, r4, r8, lsl #18
 80abe0e:	942b      	str	r4, [sp, #172]	; 0xac
 80abe10:	ea4f 4498 	mov.w	r4, r8, lsr #18
 80abe14:	ea44 3489 	orr.w	r4, r4, r9, lsl #14
 80abe18:	942c      	str	r4, [sp, #176]	; 0xb0
 80abe1a:	ea81 0107 	eor.w	r1, r1, r7
 80abe1e:	ea4f 4499 	mov.w	r4, r9, lsr #18
 80abe22:	ea01 0109 	and.w	r1, r1, r9
 80abe26:	ea44 3488 	orr.w	r4, r4, r8, lsl #14
 80abe2a:	942d      	str	r4, [sp, #180]	; 0xb4
 80abe2c:	ea87 0701 	eor.w	r7, r7, r1
 80abe30:	eb45 0107 	adc.w	r1, r5, r7
 80abe34:	e9dd 672c 	ldrd	r6, r7, [sp, #176]	; 0xb0
 80abe38:	e9dd 452a 	ldrd	r4, r5, [sp, #168]	; 0xa8
 80abe3c:	4074      	eors	r4, r6
 80abe3e:	ea4f 56c9 	mov.w	r6, r9, lsl #23
 80abe42:	ea46 2658 	orr.w	r6, r6, r8, lsr #9
 80abe46:	962f      	str	r6, [sp, #188]	; 0xbc
 80abe48:	ea4f 56c8 	mov.w	r6, r8, lsl #23
 80abe4c:	ea46 2659 	orr.w	r6, r6, r9, lsr #9
 80abe50:	962e      	str	r6, [sp, #184]	; 0xb8
 80abe52:	407d      	eors	r5, r7
 80abe54:	e9dd 672e 	ldrd	r6, r7, [sp, #184]	; 0xb8
 80abe58:	4066      	eors	r6, r4
 80abe5a:	1986      	adds	r6, r0, r6
 80abe5c:	ea87 0705 	eor.w	r7, r7, r5
 80abe60:	eb41 0707 	adc.w	r7, r1, r7
 80abe64:	eb1a 0006 	adds.w	r0, sl, r6
 80abe68:	eb4b 0107 	adc.w	r1, fp, r7
 80abe6c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80abe70:	990a      	ldr	r1, [sp, #40]	; 0x28
 80abe72:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80abe74:	0f09      	lsrs	r1, r1, #28
 80abe76:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80abe7a:	9130      	str	r1, [sp, #192]	; 0xc0
 80abe7c:	0f01      	lsrs	r1, r0, #28
 80abe7e:	980a      	ldr	r0, [sp, #40]	; 0x28
 80abe80:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80abe84:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80abe88:	9131      	str	r1, [sp, #196]	; 0xc4
 80abe8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80abe8c:	e9dd 4530 	ldrd	r4, r5, [sp, #192]	; 0xc0
 80abe90:	0789      	lsls	r1, r1, #30
 80abe92:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 80abe96:	9133      	str	r1, [sp, #204]	; 0xcc
 80abe98:	0781      	lsls	r1, r0, #30
 80abe9a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80abe9c:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 80abea0:	9132      	str	r1, [sp, #200]	; 0xc8
 80abea2:	e9dd 0132 	ldrd	r0, r1, [sp, #200]	; 0xc8
 80abea6:	404d      	eors	r5, r1
 80abea8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80abeaa:	4044      	eors	r4, r0
 80abeac:	980a      	ldr	r0, [sp, #40]	; 0x28
 80abeae:	0649      	lsls	r1, r1, #25
 80abeb0:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 80abeb4:	9135      	str	r1, [sp, #212]	; 0xd4
 80abeb6:	0641      	lsls	r1, r0, #25
 80abeb8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80abeba:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 80abebe:	9134      	str	r1, [sp, #208]	; 0xd0
 80abec0:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
 80abec4:	4060      	eors	r0, r4
 80abec6:	4604      	mov	r4, r0
 80abec8:	4069      	eors	r1, r5
 80abeca:	460d      	mov	r5, r1
 80abecc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80abed0:	ea40 000a 	orr.w	r0, r0, sl
 80abed4:	ea41 010b 	orr.w	r1, r1, fp
 80abed8:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 80abedc:	ea0a 0a00 	and.w	sl, sl, r0
 80abee0:	ea0b 0b01 	and.w	fp, fp, r1
 80abee4:	e9cd ab1c 	strd	sl, fp, [sp, #112]	; 0x70
 80abee8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80abeec:	e9dd ab00 	ldrd	sl, fp, [sp]
 80abef0:	ea0a 0a00 	and.w	sl, sl, r0
 80abef4:	ea0b 0b01 	and.w	fp, fp, r1
 80abef8:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 80abefc:	ea40 000a 	orr.w	r0, r0, sl
 80abf00:	1900      	adds	r0, r0, r4
 80abf02:	ea41 010b 	orr.w	r1, r1, fp
 80abf06:	4169      	adcs	r1, r5
 80abf08:	eb10 0a06 	adds.w	sl, r0, r6
 80abf0c:	eb41 0b07 	adc.w	fp, r1, r7
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
 80abf10:	e953 450e 	ldrd	r4, r5, [r3, #-56]	; 0x38
 80abf14:	e952 010e 	ldrd	r0, r1, [r2, #-56]	; 0x38
 80abf18:	1900      	adds	r0, r0, r4
 80abf1a:	4169      	adcs	r1, r5
 80abf1c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80abf20:	1824      	adds	r4, r4, r0
 80abf22:	414d      	adcs	r5, r1
 80abf24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80abf28:	ea80 0008 	eor.w	r0, r0, r8
 80abf2c:	ea81 0109 	eor.w	r1, r1, r9
 80abf30:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 80abf34:	4006      	ands	r6, r0
 80abf36:	4630      	mov	r0, r6
 80abf38:	400f      	ands	r7, r1
 80abf3a:	4639      	mov	r1, r7
 80abf3c:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 80abf40:	4046      	eors	r6, r0
 80abf42:	19a0      	adds	r0, r4, r6
 80abf44:	ea87 0701 	eor.w	r7, r7, r1
 80abf48:	9c08      	ldr	r4, [sp, #32]
 80abf4a:	eb45 0107 	adc.w	r1, r5, r7
 80abf4e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80abf50:	0ba4      	lsrs	r4, r4, #14
 80abf52:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 80abf56:	9436      	str	r4, [sp, #216]	; 0xd8
 80abf58:	0bac      	lsrs	r4, r5, #14
 80abf5a:	9d08      	ldr	r5, [sp, #32]
 80abf5c:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 80abf60:	9437      	str	r4, [sp, #220]	; 0xdc
 80abf62:	0cac      	lsrs	r4, r5, #18
 80abf64:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80abf66:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 80abf6a:	9438      	str	r4, [sp, #224]	; 0xe0
 80abf6c:	0cac      	lsrs	r4, r5, #18
 80abf6e:	9d08      	ldr	r5, [sp, #32]
 80abf70:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 80abf74:	9439      	str	r4, [sp, #228]	; 0xe4
 80abf76:	e9dd 6738 	ldrd	r6, r7, [sp, #224]	; 0xe0
 80abf7a:	e9dd 4536 	ldrd	r4, r5, [sp, #216]	; 0xd8
 80abf7e:	4074      	eors	r4, r6
 80abf80:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80abf82:	407d      	eors	r5, r7
 80abf84:	9f08      	ldr	r7, [sp, #32]
 80abf86:	05f6      	lsls	r6, r6, #23
 80abf88:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 80abf8c:	963b      	str	r6, [sp, #236]	; 0xec
 80abf8e:	05fe      	lsls	r6, r7, #23
 80abf90:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80abf92:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 80abf96:	963a      	str	r6, [sp, #232]	; 0xe8
 80abf98:	e9dd 673a 	ldrd	r6, r7, [sp, #232]	; 0xe8
 80abf9c:	4066      	eors	r6, r4
 80abf9e:	1986      	adds	r6, r0, r6
 80abfa0:	ea87 0705 	eor.w	r7, r7, r5
 80abfa4:	eb41 0707 	adc.w	r7, r1, r7
 80abfa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80abfac:	1980      	adds	r0, r0, r6
 80abfae:	4179      	adcs	r1, r7
 80abfb0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80abfb4:	ea4f 711a 	mov.w	r1, sl, lsr #28
 80abfb8:	ea41 110b 	orr.w	r1, r1, fp, lsl #4
 80abfbc:	913c      	str	r1, [sp, #240]	; 0xf0
 80abfbe:	ea4f 711b 	mov.w	r1, fp, lsr #28
 80abfc2:	ea41 110a 	orr.w	r1, r1, sl, lsl #4
 80abfc6:	913d      	str	r1, [sp, #244]	; 0xf4
 80abfc8:	ea4f 718b 	mov.w	r1, fp, lsl #30
 80abfcc:	ea41 019a 	orr.w	r1, r1, sl, lsr #2
 80abfd0:	913f      	str	r1, [sp, #252]	; 0xfc
 80abfd2:	ea4f 718a 	mov.w	r1, sl, lsl #30
 80abfd6:	ea41 019b 	orr.w	r1, r1, fp, lsr #2
 80abfda:	913e      	str	r1, [sp, #248]	; 0xf8
 80abfdc:	e9dd 013e 	ldrd	r0, r1, [sp, #248]	; 0xf8
 80abfe0:	e9dd 453c 	ldrd	r4, r5, [sp, #240]	; 0xf0
 80abfe4:	404d      	eors	r5, r1
 80abfe6:	ea4f 614b 	mov.w	r1, fp, lsl #25
 80abfea:	ea41 11da 	orr.w	r1, r1, sl, lsr #7
 80abfee:	9141      	str	r1, [sp, #260]	; 0x104
 80abff0:	ea4f 614a 	mov.w	r1, sl, lsl #25
 80abff4:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
 80abff8:	4044      	eors	r4, r0
 80abffa:	9140      	str	r1, [sp, #256]	; 0x100
 80abffc:	a940      	add	r1, sp, #256	; 0x100
 80abffe:	e9d1 0100 	ldrd	r0, r1, [r1]
 80ac002:	4060      	eors	r0, r4
 80ac004:	4069      	eors	r1, r5
 80ac006:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80ac00a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80ac00e:	e9dd 4500 	ldrd	r4, r5, [sp]
 80ac012:	ea40 000a 	orr.w	r0, r0, sl
 80ac016:	ea41 010b 	orr.w	r1, r1, fp
 80ac01a:	4004      	ands	r4, r0
 80ac01c:	4620      	mov	r0, r4
 80ac01e:	400d      	ands	r5, r1
 80ac020:	4629      	mov	r1, r5
 80ac022:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 80ac026:	ea04 040a 	and.w	r4, r4, sl
 80ac02a:	ea05 050b 	and.w	r5, r5, fp
 80ac02e:	4304      	orrs	r4, r0
 80ac030:	4620      	mov	r0, r4
 80ac032:	430d      	orrs	r5, r1
 80ac034:	4629      	mov	r1, r5
 80ac036:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80ac03a:	1824      	adds	r4, r4, r0
 80ac03c:	414d      	adcs	r5, r1
 80ac03e:	19a4      	adds	r4, r4, r6
 80ac040:	417d      	adcs	r5, r7
 80ac042:	e9cd 4502 	strd	r4, r5, [sp, #8]
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
 80ac046:	e953 450c 	ldrd	r4, r5, [r3, #-48]	; 0x30
 80ac04a:	e952 010c 	ldrd	r0, r1, [r2, #-48]	; 0x30
 80ac04e:	1900      	adds	r0, r0, r4
 80ac050:	4169      	adcs	r1, r5
 80ac052:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80ac056:	1824      	adds	r4, r4, r0
 80ac058:	414d      	adcs	r5, r1
 80ac05a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80ac05e:	ea80 0008 	eor.w	r0, r0, r8
 80ac062:	ea81 0109 	eor.w	r1, r1, r9
 80ac066:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 80ac06a:	4006      	ands	r6, r0
 80ac06c:	ea86 0608 	eor.w	r6, r6, r8
 80ac070:	400f      	ands	r7, r1
 80ac072:	19a0      	adds	r0, r4, r6
 80ac074:	ea87 0709 	eor.w	r7, r7, r9
 80ac078:	9c06      	ldr	r4, [sp, #24]
 80ac07a:	eb45 0107 	adc.w	r1, r5, r7
 80ac07e:	9d07      	ldr	r5, [sp, #28]
 80ac080:	0ba4      	lsrs	r4, r4, #14
 80ac082:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 80ac086:	9442      	str	r4, [sp, #264]	; 0x108
 80ac088:	0bac      	lsrs	r4, r5, #14
 80ac08a:	9d06      	ldr	r5, [sp, #24]
 80ac08c:	ae44      	add	r6, sp, #272	; 0x110
 80ac08e:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 80ac092:	9443      	str	r4, [sp, #268]	; 0x10c
 80ac094:	0cac      	lsrs	r4, r5, #18
 80ac096:	9d07      	ldr	r5, [sp, #28]
 80ac098:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 80ac09c:	9444      	str	r4, [sp, #272]	; 0x110
 80ac09e:	0cac      	lsrs	r4, r5, #18
 80ac0a0:	9d06      	ldr	r5, [sp, #24]
 80ac0a2:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 80ac0a6:	9445      	str	r4, [sp, #276]	; 0x114
 80ac0a8:	ac42      	add	r4, sp, #264	; 0x108
 80ac0aa:	cec0      	ldmia	r6, {r6, r7}
 80ac0ac:	cc30      	ldmia	r4, {r4, r5}
 80ac0ae:	4074      	eors	r4, r6
 80ac0b0:	9e07      	ldr	r6, [sp, #28]
 80ac0b2:	407d      	eors	r5, r7
 80ac0b4:	9f06      	ldr	r7, [sp, #24]
 80ac0b6:	05f6      	lsls	r6, r6, #23
 80ac0b8:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 80ac0bc:	9647      	str	r6, [sp, #284]	; 0x11c
 80ac0be:	05fe      	lsls	r6, r7, #23
 80ac0c0:	9f07      	ldr	r7, [sp, #28]
 80ac0c2:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 80ac0c6:	9646      	str	r6, [sp, #280]	; 0x118
 80ac0c8:	ae46      	add	r6, sp, #280	; 0x118
 80ac0ca:	cec0      	ldmia	r6, {r6, r7}
 80ac0cc:	4066      	eors	r6, r4
 80ac0ce:	1986      	adds	r6, r0, r6
 80ac0d0:	ea87 0705 	eor.w	r7, r7, r5
 80ac0d4:	eb41 0707 	adc.w	r7, r1, r7
 80ac0d8:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 80ac0dc:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 80ac0e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80ac0e4:	1836      	adds	r6, r6, r0
 80ac0e6:	414f      	adcs	r7, r1
 80ac0e8:	9902      	ldr	r1, [sp, #8]
 80ac0ea:	9803      	ldr	r0, [sp, #12]
 80ac0ec:	0f09      	lsrs	r1, r1, #28
 80ac0ee:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80ac0f2:	9148      	str	r1, [sp, #288]	; 0x120
 80ac0f4:	0f01      	lsrs	r1, r0, #28
 80ac0f6:	9802      	ldr	r0, [sp, #8]
 80ac0f8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80ac0fc:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80ac100:	9149      	str	r1, [sp, #292]	; 0x124
 80ac102:	9903      	ldr	r1, [sp, #12]
 80ac104:	0789      	lsls	r1, r1, #30
 80ac106:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 80ac10a:	914b      	str	r1, [sp, #300]	; 0x12c
 80ac10c:	0781      	lsls	r1, r0, #30
 80ac10e:	9803      	ldr	r0, [sp, #12]
 80ac110:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80ac114:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 80ac118:	914a      	str	r1, [sp, #296]	; 0x128
 80ac11a:	a948      	add	r1, sp, #288	; 0x120
 80ac11c:	e9d1 4500 	ldrd	r4, r5, [r1]
 80ac120:	a94a      	add	r1, sp, #296	; 0x128
 80ac122:	e9d1 0100 	ldrd	r0, r1, [r1]
 80ac126:	404d      	eors	r5, r1
 80ac128:	9903      	ldr	r1, [sp, #12]
 80ac12a:	4044      	eors	r4, r0
 80ac12c:	9802      	ldr	r0, [sp, #8]
 80ac12e:	0649      	lsls	r1, r1, #25
 80ac130:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 80ac134:	914d      	str	r1, [sp, #308]	; 0x134
 80ac136:	0641      	lsls	r1, r0, #25
 80ac138:	9803      	ldr	r0, [sp, #12]
 80ac13a:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 80ac13e:	914c      	str	r1, [sp, #304]	; 0x130
 80ac140:	a94c      	add	r1, sp, #304	; 0x130
 80ac142:	e9d1 0100 	ldrd	r0, r1, [r1]
 80ac146:	4060      	eors	r0, r4
 80ac148:	4069      	eors	r1, r5
 80ac14a:	4604      	mov	r4, r0
 80ac14c:	460d      	mov	r5, r1
 80ac14e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80ac152:	ea40 000a 	orr.w	r0, r0, sl
 80ac156:	ea41 010b 	orr.w	r1, r1, fp
 80ac15a:	4006      	ands	r6, r0
 80ac15c:	4630      	mov	r0, r6
 80ac15e:	400f      	ands	r7, r1
 80ac160:	4639      	mov	r1, r7
 80ac162:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80ac166:	ea06 060a 	and.w	r6, r6, sl
 80ac16a:	ea07 070b 	and.w	r7, r7, fp
 80ac16e:	4306      	orrs	r6, r0
 80ac170:	1930      	adds	r0, r6, r4
 80ac172:	ea47 0701 	orr.w	r7, r7, r1
 80ac176:	eb47 0105 	adc.w	r1, r7, r5
 80ac17a:	e9dd 451c 	ldrd	r4, r5, [sp, #112]	; 0x70
 80ac17e:	1824      	adds	r4, r4, r0
 80ac180:	414d      	adcs	r5, r1
 80ac182:	e9cd 4500 	strd	r4, r5, [sp]
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
 80ac186:	e952 010a 	ldrd	r0, r1, [r2, #-40]	; 0x28
 80ac18a:	e953 450a 	ldrd	r4, r5, [r3, #-40]	; 0x28
 80ac18e:	1900      	adds	r0, r0, r4
 80ac190:	4169      	adcs	r1, r5
 80ac192:	eb10 0008 	adds.w	r0, r0, r8
 80ac196:	eb41 0109 	adc.w	r1, r1, r9
 80ac19a:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80ac19e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80ac1a2:	ea88 0804 	eor.w	r8, r8, r4
 80ac1a6:	ea89 0905 	eor.w	r9, r9, r5
 80ac1aa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80ac1ae:	ea04 0408 	and.w	r4, r4, r8
 80ac1b2:	46a0      	mov	r8, r4
 80ac1b4:	ea05 0509 	and.w	r5, r5, r9
 80ac1b8:	46a9      	mov	r9, r5
 80ac1ba:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 80ac1be:	ea84 0408 	eor.w	r4, r4, r8
 80ac1c2:	eb10 0804 	adds.w	r8, r0, r4
 80ac1c6:	ea85 0509 	eor.w	r5, r5, r9
 80ac1ca:	eb41 0905 	adc.w	r9, r1, r5
 80ac1ce:	9904      	ldr	r1, [sp, #16]
 80ac1d0:	9805      	ldr	r0, [sp, #20]
 80ac1d2:	0b89      	lsrs	r1, r1, #14
 80ac1d4:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 80ac1d8:	914e      	str	r1, [sp, #312]	; 0x138
 80ac1da:	0b81      	lsrs	r1, r0, #14
 80ac1dc:	9804      	ldr	r0, [sp, #16]
 80ac1de:	ac50      	add	r4, sp, #320	; 0x140
 80ac1e0:	ea41 4180 	orr.w	r1, r1, r0, lsl #18
 80ac1e4:	914f      	str	r1, [sp, #316]	; 0x13c
 80ac1e6:	0c81      	lsrs	r1, r0, #18
 80ac1e8:	9805      	ldr	r0, [sp, #20]
 80ac1ea:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 80ac1ee:	9150      	str	r1, [sp, #320]	; 0x140
 80ac1f0:	0c81      	lsrs	r1, r0, #18
 80ac1f2:	9804      	ldr	r0, [sp, #16]
 80ac1f4:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 80ac1f8:	9151      	str	r1, [sp, #324]	; 0x144
 80ac1fa:	a94e      	add	r1, sp, #312	; 0x138
 80ac1fc:	cc30      	ldmia	r4, {r4, r5}
 80ac1fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 80ac202:	4060      	eors	r0, r4
 80ac204:	9c05      	ldr	r4, [sp, #20]
 80ac206:	4069      	eors	r1, r5
 80ac208:	9d04      	ldr	r5, [sp, #16]
 80ac20a:	05e4      	lsls	r4, r4, #23
 80ac20c:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 80ac210:	9453      	str	r4, [sp, #332]	; 0x14c
 80ac212:	05ec      	lsls	r4, r5, #23
 80ac214:	9d05      	ldr	r5, [sp, #20]
 80ac216:	e9dd 6700 	ldrd	r6, r7, [sp]
 80ac21a:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 80ac21e:	9452      	str	r4, [sp, #328]	; 0x148
 80ac220:	ac52      	add	r4, sp, #328	; 0x148
 80ac222:	cc30      	ldmia	r4, {r4, r5}
 80ac224:	4044      	eors	r4, r0
 80ac226:	eb18 0804 	adds.w	r8, r8, r4
 80ac22a:	ea85 0501 	eor.w	r5, r5, r1
 80ac22e:	eb49 0905 	adc.w	r9, r9, r5
 80ac232:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80ac236:	eb10 0008 	adds.w	r0, r0, r8
 80ac23a:	eb41 0109 	adc.w	r1, r1, r9
 80ac23e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80ac242:	9900      	ldr	r1, [sp, #0]
 80ac244:	9801      	ldr	r0, [sp, #4]
 80ac246:	0f09      	lsrs	r1, r1, #28
 80ac248:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80ac24c:	9154      	str	r1, [sp, #336]	; 0x150
 80ac24e:	0f01      	lsrs	r1, r0, #28
 80ac250:	9800      	ldr	r0, [sp, #0]
 80ac252:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80ac256:	9155      	str	r1, [sp, #340]	; 0x154
 80ac258:	9901      	ldr	r1, [sp, #4]
 80ac25a:	0789      	lsls	r1, r1, #30
 80ac25c:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 80ac260:	9157      	str	r1, [sp, #348]	; 0x15c
 80ac262:	0781      	lsls	r1, r0, #30
 80ac264:	9801      	ldr	r0, [sp, #4]
 80ac266:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 80ac26a:	9156      	str	r1, [sp, #344]	; 0x158
 80ac26c:	a954      	add	r1, sp, #336	; 0x150
 80ac26e:	e9d1 4500 	ldrd	r4, r5, [r1]
 80ac272:	a956      	add	r1, sp, #344	; 0x158
 80ac274:	e9d1 0100 	ldrd	r0, r1, [r1]
 80ac278:	404d      	eors	r5, r1
 80ac27a:	9901      	ldr	r1, [sp, #4]
 80ac27c:	4044      	eors	r4, r0
 80ac27e:	9800      	ldr	r0, [sp, #0]
 80ac280:	0649      	lsls	r1, r1, #25
 80ac282:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 80ac286:	9159      	str	r1, [sp, #356]	; 0x164
 80ac288:	0641      	lsls	r1, r0, #25
 80ac28a:	9801      	ldr	r0, [sp, #4]
 80ac28c:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 80ac290:	9158      	str	r1, [sp, #352]	; 0x160
 80ac292:	a958      	add	r1, sp, #352	; 0x160
 80ac294:	e9d1 0100 	ldrd	r0, r1, [r1]
 80ac298:	4060      	eors	r0, r4
 80ac29a:	4604      	mov	r4, r0
 80ac29c:	4069      	eors	r1, r5
 80ac29e:	460d      	mov	r5, r1
 80ac2a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80ac2a4:	4330      	orrs	r0, r6
 80ac2a6:	4339      	orrs	r1, r7
 80ac2a8:	ea00 060a 	and.w	r6, r0, sl
 80ac2ac:	ea01 070b 	and.w	r7, r1, fp
 80ac2b0:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 80ac2b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80ac2b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80ac2bc:	4006      	ands	r6, r0
 80ac2be:	400f      	ands	r7, r1
 80ac2c0:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 80ac2c4:	4330      	orrs	r0, r6
 80ac2c6:	1900      	adds	r0, r0, r4
 80ac2c8:	ea41 0107 	orr.w	r1, r1, r7
 80ac2cc:	4169      	adcs	r1, r5
 80ac2ce:	eb18 0800 	adds.w	r8, r8, r0
 80ac2d2:	eb49 0901 	adc.w	r9, r9, r1
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
 80ac2d6:	e953 4508 	ldrd	r4, r5, [r3, #-32]
 80ac2da:	e952 0108 	ldrd	r0, r1, [r2, #-32]
 80ac2de:	1900      	adds	r0, r0, r4
 80ac2e0:	4169      	adcs	r1, r5
 80ac2e2:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 80ac2e6:	1824      	adds	r4, r4, r0
 80ac2e8:	414d      	adcs	r5, r1
 80ac2ea:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 80ac2ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80ac2f2:	4046      	eors	r6, r0
 80ac2f4:	4630      	mov	r0, r6
 80ac2f6:	404f      	eors	r7, r1
 80ac2f8:	4639      	mov	r1, r7
 80ac2fa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80ac2fe:	4006      	ands	r6, r0
 80ac300:	4630      	mov	r0, r6
 80ac302:	400f      	ands	r7, r1
 80ac304:	4639      	mov	r1, r7
 80ac306:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 80ac30a:	4046      	eors	r6, r0
 80ac30c:	1930      	adds	r0, r6, r4
 80ac30e:	ea87 0701 	eor.w	r7, r7, r1
 80ac312:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80ac314:	eb47 0105 	adc.w	r1, r7, r5
 80ac318:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80ac31a:	0ba4      	lsrs	r4, r4, #14
 80ac31c:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 80ac320:	945a      	str	r4, [sp, #360]	; 0x168
 80ac322:	0bac      	lsrs	r4, r5, #14
 80ac324:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80ac326:	ae5c      	add	r6, sp, #368	; 0x170
 80ac328:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 80ac32c:	945b      	str	r4, [sp, #364]	; 0x16c
 80ac32e:	0cac      	lsrs	r4, r5, #18
 80ac330:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80ac332:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 80ac336:	945c      	str	r4, [sp, #368]	; 0x170
 80ac338:	0cac      	lsrs	r4, r5, #18
 80ac33a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80ac33c:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 80ac340:	945d      	str	r4, [sp, #372]	; 0x174
 80ac342:	ac5a      	add	r4, sp, #360	; 0x168
 80ac344:	cec0      	ldmia	r6, {r6, r7}
 80ac346:	cc30      	ldmia	r4, {r4, r5}
 80ac348:	4074      	eors	r4, r6
 80ac34a:	4626      	mov	r6, r4
 80ac34c:	407d      	eors	r5, r7
 80ac34e:	462f      	mov	r7, r5
 80ac350:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80ac352:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80ac354:	05e4      	lsls	r4, r4, #23
 80ac356:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 80ac35a:	945f      	str	r4, [sp, #380]	; 0x17c
 80ac35c:	05ec      	lsls	r4, r5, #23
 80ac35e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80ac360:	ea44 2455 	orr.w	r4, r4, r5, lsr #9
 80ac364:	945e      	str	r4, [sp, #376]	; 0x178
 80ac366:	ac5e      	add	r4, sp, #376	; 0x178
 80ac368:	cc30      	ldmia	r4, {r4, r5}
 80ac36a:	4074      	eors	r4, r6
 80ac36c:	1906      	adds	r6, r0, r4
 80ac36e:	ea85 0507 	eor.w	r5, r5, r7
 80ac372:	eb41 0705 	adc.w	r7, r1, r5
 80ac376:	eb16 000a 	adds.w	r0, r6, sl
 80ac37a:	eb47 010b 	adc.w	r1, r7, fp
 80ac37e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80ac382:	ea4f 7118 	mov.w	r1, r8, lsr #28
 80ac386:	ea41 1109 	orr.w	r1, r1, r9, lsl #4
 80ac38a:	9160      	str	r1, [sp, #384]	; 0x180
 80ac38c:	ea4f 7119 	mov.w	r1, r9, lsr #28
 80ac390:	ea41 1108 	orr.w	r1, r1, r8, lsl #4
 80ac394:	9161      	str	r1, [sp, #388]	; 0x184
 80ac396:	ea4f 7189 	mov.w	r1, r9, lsl #30
 80ac39a:	ea41 0198 	orr.w	r1, r1, r8, lsr #2
 80ac39e:	9163      	str	r1, [sp, #396]	; 0x18c
 80ac3a0:	ea4f 7188 	mov.w	r1, r8, lsl #30
 80ac3a4:	ea41 0199 	orr.w	r1, r1, r9, lsr #2
 80ac3a8:	9162      	str	r1, [sp, #392]	; 0x188
 80ac3aa:	a960      	add	r1, sp, #384	; 0x180
 80ac3ac:	e9d1 4500 	ldrd	r4, r5, [r1]
 80ac3b0:	a962      	add	r1, sp, #392	; 0x188
 80ac3b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80ac3b6:	404d      	eors	r5, r1
 80ac3b8:	ea4f 6149 	mov.w	r1, r9, lsl #25
 80ac3bc:	ea41 11d8 	orr.w	r1, r1, r8, lsr #7
 80ac3c0:	9165      	str	r1, [sp, #404]	; 0x194
 80ac3c2:	ea4f 6148 	mov.w	r1, r8, lsl #25
 80ac3c6:	ea41 11d9 	orr.w	r1, r1, r9, lsr #7
 80ac3ca:	4044      	eors	r4, r0
 80ac3cc:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 80ac3d0:	9164      	str	r1, [sp, #400]	; 0x190
 80ac3d2:	a964      	add	r1, sp, #400	; 0x190
 80ac3d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80ac3d8:	4060      	eors	r0, r4
 80ac3da:	4604      	mov	r4, r0
 80ac3dc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80ac3e0:	e9dd ab00 	ldrd	sl, fp, [sp]
 80ac3e4:	4069      	eors	r1, r5
 80ac3e6:	460d      	mov	r5, r1
 80ac3e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80ac3ec:	ea40 0008 	orr.w	r0, r0, r8
 80ac3f0:	ea41 0109 	orr.w	r1, r1, r9
 80ac3f4:	4006      	ands	r6, r0
 80ac3f6:	ea0a 0a08 	and.w	sl, sl, r8
 80ac3fa:	ea46 000a 	orr.w	r0, r6, sl
 80ac3fe:	400f      	ands	r7, r1
 80ac400:	ea0b 0b09 	and.w	fp, fp, r9
 80ac404:	1900      	adds	r0, r0, r4
 80ac406:	ea47 010b 	orr.w	r1, r7, fp
 80ac40a:	4169      	adcs	r1, r5
 80ac40c:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	; 0x70
 80ac410:	eb1a 0a00 	adds.w	sl, sl, r0
 80ac414:	eb4b 0b01 	adc.w	fp, fp, r1
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
 80ac418:	e953 4506 	ldrd	r4, r5, [r3, #-24]
 80ac41c:	e952 0106 	ldrd	r0, r1, [r2, #-24]
 80ac420:	1900      	adds	r0, r0, r4
 80ac422:	4169      	adcs	r1, r5
 80ac424:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80ac428:	1824      	adds	r4, r4, r0
 80ac42a:	414d      	adcs	r5, r1
 80ac42c:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 80ac430:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80ac434:	4046      	eors	r6, r0
 80ac436:	4630      	mov	r0, r6
 80ac438:	404f      	eors	r7, r1
 80ac43a:	4639      	mov	r1, r7
 80ac43c:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 80ac440:	4006      	ands	r6, r0
 80ac442:	4630      	mov	r0, r6
 80ac444:	400f      	ands	r7, r1
 80ac446:	4639      	mov	r1, r7
 80ac448:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 80ac44c:	4046      	eors	r6, r0
 80ac44e:	1930      	adds	r0, r6, r4
 80ac450:	ea87 0701 	eor.w	r7, r7, r1
 80ac454:	9c08      	ldr	r4, [sp, #32]
 80ac456:	eb47 0105 	adc.w	r1, r7, r5
 80ac45a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80ac45c:	0ba4      	lsrs	r4, r4, #14
 80ac45e:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 80ac462:	9466      	str	r4, [sp, #408]	; 0x198
 80ac464:	0bac      	lsrs	r4, r5, #14
 80ac466:	9d08      	ldr	r5, [sp, #32]
 80ac468:	ae68      	add	r6, sp, #416	; 0x1a0
 80ac46a:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 80ac46e:	9467      	str	r4, [sp, #412]	; 0x19c
 80ac470:	0cac      	lsrs	r4, r5, #18
 80ac472:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80ac474:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 80ac478:	9468      	str	r4, [sp, #416]	; 0x1a0
 80ac47a:	0cac      	lsrs	r4, r5, #18
 80ac47c:	9d08      	ldr	r5, [sp, #32]
 80ac47e:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 80ac482:	9469      	str	r4, [sp, #420]	; 0x1a4
 80ac484:	ac66      	add	r4, sp, #408	; 0x198
 80ac486:	cec0      	ldmia	r6, {r6, r7}
 80ac488:	cc30      	ldmia	r4, {r4, r5}
 80ac48a:	4074      	eors	r4, r6
 80ac48c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80ac48e:	407d      	eors	r5, r7
 80ac490:	9f08      	ldr	r7, [sp, #32]
 80ac492:	05f6      	lsls	r6, r6, #23
 80ac494:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 80ac498:	966b      	str	r6, [sp, #428]	; 0x1ac
 80ac49a:	05fe      	lsls	r6, r7, #23
 80ac49c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80ac49e:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 80ac4a2:	966a      	str	r6, [sp, #424]	; 0x1a8
 80ac4a4:	ae6a      	add	r6, sp, #424	; 0x1a8
 80ac4a6:	cec0      	ldmia	r6, {r6, r7}
 80ac4a8:	4066      	eors	r6, r4
 80ac4aa:	1986      	adds	r6, r0, r6
 80ac4ac:	ea87 0705 	eor.w	r7, r7, r5
 80ac4b0:	eb41 0707 	adc.w	r7, r1, r7
 80ac4b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80ac4b8:	1980      	adds	r0, r0, r6
 80ac4ba:	4179      	adcs	r1, r7
 80ac4bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80ac4c0:	ea4f 711a 	mov.w	r1, sl, lsr #28
 80ac4c4:	ea41 110b 	orr.w	r1, r1, fp, lsl #4
 80ac4c8:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 80ac4cc:	916c      	str	r1, [sp, #432]	; 0x1b0
 80ac4ce:	ea4f 711b 	mov.w	r1, fp, lsr #28
 80ac4d2:	ea41 110a 	orr.w	r1, r1, sl, lsl #4
 80ac4d6:	916d      	str	r1, [sp, #436]	; 0x1b4
 80ac4d8:	ea4f 718b 	mov.w	r1, fp, lsl #30
 80ac4dc:	ea41 019a 	orr.w	r1, r1, sl, lsr #2
 80ac4e0:	916f      	str	r1, [sp, #444]	; 0x1bc
 80ac4e2:	ea4f 718a 	mov.w	r1, sl, lsl #30
 80ac4e6:	ea41 019b 	orr.w	r1, r1, fp, lsr #2
 80ac4ea:	916e      	str	r1, [sp, #440]	; 0x1b8
 80ac4ec:	a96c      	add	r1, sp, #432	; 0x1b0
 80ac4ee:	e9d1 4500 	ldrd	r4, r5, [r1]
 80ac4f2:	a96e      	add	r1, sp, #440	; 0x1b8
 80ac4f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80ac4f8:	404d      	eors	r5, r1
 80ac4fa:	ea4f 614b 	mov.w	r1, fp, lsl #25
 80ac4fe:	ea41 11da 	orr.w	r1, r1, sl, lsr #7
 80ac502:	9171      	str	r1, [sp, #452]	; 0x1c4
 80ac504:	ea4f 614a 	mov.w	r1, sl, lsl #25
 80ac508:	ea41 11db 	orr.w	r1, r1, fp, lsr #7
 80ac50c:	4044      	eors	r4, r0
 80ac50e:	9170      	str	r1, [sp, #448]	; 0x1c0
 80ac510:	a970      	add	r1, sp, #448	; 0x1c0
 80ac512:	e9d1 0100 	ldrd	r0, r1, [r1]
 80ac516:	4060      	eors	r0, r4
 80ac518:	4604      	mov	r4, r0
 80ac51a:	e9dd 6700 	ldrd	r6, r7, [sp]
 80ac51e:	4069      	eors	r1, r5
 80ac520:	ea48 000a 	orr.w	r0, r8, sl
 80ac524:	460d      	mov	r5, r1
 80ac526:	4006      	ands	r6, r0
 80ac528:	ea49 010b 	orr.w	r1, r9, fp
 80ac52c:	4630      	mov	r0, r6
 80ac52e:	400f      	ands	r7, r1
 80ac530:	4639      	mov	r1, r7
 80ac532:	ea08 060a 	and.w	r6, r8, sl
 80ac536:	4306      	orrs	r6, r0
 80ac538:	ea09 070b 	and.w	r7, r9, fp
 80ac53c:	1930      	adds	r0, r6, r4
 80ac53e:	ea47 0701 	orr.w	r7, r7, r1
 80ac542:	eb47 0105 	adc.w	r1, r7, r5
 80ac546:	e9dd 451c 	ldrd	r4, r5, [sp, #112]	; 0x70
 80ac54a:	1824      	adds	r4, r4, r0
 80ac54c:	414d      	adcs	r5, r1
 80ac54e:	e9cd 4502 	strd	r4, r5, [sp, #8]
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 80ac552:	e952 0104 	ldrd	r0, r1, [r2, #-16]
 80ac556:	e953 4504 	ldrd	r4, r5, [r3, #-16]
 80ac55a:	1900      	adds	r0, r0, r4
 80ac55c:	4169      	adcs	r1, r5
 80ac55e:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80ac562:	1824      	adds	r4, r4, r0
 80ac564:	414d      	adcs	r5, r1
 80ac566:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 80ac56a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80ac56e:	4070      	eors	r0, r6
 80ac570:	4079      	eors	r1, r7
 80ac572:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 80ac576:	4006      	ands	r6, r0
 80ac578:	4630      	mov	r0, r6
 80ac57a:	400f      	ands	r7, r1
 80ac57c:	4639      	mov	r1, r7
 80ac57e:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80ac582:	4046      	eors	r6, r0
 80ac584:	19a0      	adds	r0, r4, r6
 80ac586:	ea87 0701 	eor.w	r7, r7, r1
 80ac58a:	9c06      	ldr	r4, [sp, #24]
 80ac58c:	eb45 0107 	adc.w	r1, r5, r7
 80ac590:	9d07      	ldr	r5, [sp, #28]
 80ac592:	0ba4      	lsrs	r4, r4, #14
 80ac594:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 80ac598:	9472      	str	r4, [sp, #456]	; 0x1c8
 80ac59a:	0bac      	lsrs	r4, r5, #14
 80ac59c:	9d06      	ldr	r5, [sp, #24]
 80ac59e:	ae74      	add	r6, sp, #464	; 0x1d0
 80ac5a0:	ea44 4485 	orr.w	r4, r4, r5, lsl #18
 80ac5a4:	9473      	str	r4, [sp, #460]	; 0x1cc
 80ac5a6:	0cac      	lsrs	r4, r5, #18
 80ac5a8:	9d07      	ldr	r5, [sp, #28]
 80ac5aa:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 80ac5ae:	9474      	str	r4, [sp, #464]	; 0x1d0
 80ac5b0:	0cac      	lsrs	r4, r5, #18
 80ac5b2:	9d06      	ldr	r5, [sp, #24]
 80ac5b4:	ea44 3485 	orr.w	r4, r4, r5, lsl #14
 80ac5b8:	9475      	str	r4, [sp, #468]	; 0x1d4
 80ac5ba:	ac72      	add	r4, sp, #456	; 0x1c8
 80ac5bc:	cec0      	ldmia	r6, {r6, r7}
 80ac5be:	cc30      	ldmia	r4, {r4, r5}
 80ac5c0:	4074      	eors	r4, r6
 80ac5c2:	9e07      	ldr	r6, [sp, #28]
 80ac5c4:	407d      	eors	r5, r7
 80ac5c6:	9f06      	ldr	r7, [sp, #24]
 80ac5c8:	05f6      	lsls	r6, r6, #23
 80ac5ca:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 80ac5ce:	9677      	str	r6, [sp, #476]	; 0x1dc
 80ac5d0:	05fe      	lsls	r6, r7, #23
 80ac5d2:	9f07      	ldr	r7, [sp, #28]
 80ac5d4:	ea46 2657 	orr.w	r6, r6, r7, lsr #9
 80ac5d8:	9676      	str	r6, [sp, #472]	; 0x1d8
 80ac5da:	ae76      	add	r6, sp, #472	; 0x1d8
 80ac5dc:	cec0      	ldmia	r6, {r6, r7}
 80ac5de:	4066      	eors	r6, r4
 80ac5e0:	1986      	adds	r6, r0, r6
 80ac5e2:	ea87 0705 	eor.w	r7, r7, r5
 80ac5e6:	eb41 0707 	adc.w	r7, r1, r7
 80ac5ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80ac5ee:	1980      	adds	r0, r0, r6
 80ac5f0:	4179      	adcs	r1, r7
 80ac5f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80ac5f6:	9902      	ldr	r1, [sp, #8]
 80ac5f8:	9803      	ldr	r0, [sp, #12]
 80ac5fa:	0f09      	lsrs	r1, r1, #28
 80ac5fc:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80ac600:	9178      	str	r1, [sp, #480]	; 0x1e0
 80ac602:	0f01      	lsrs	r1, r0, #28
 80ac604:	9802      	ldr	r0, [sp, #8]
 80ac606:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80ac60a:	9179      	str	r1, [sp, #484]	; 0x1e4
 80ac60c:	9903      	ldr	r1, [sp, #12]
 80ac60e:	0789      	lsls	r1, r1, #30
 80ac610:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 80ac614:	917b      	str	r1, [sp, #492]	; 0x1ec
 80ac616:	0781      	lsls	r1, r0, #30
 80ac618:	9803      	ldr	r0, [sp, #12]
 80ac61a:	ea41 0190 	orr.w	r1, r1, r0, lsr #2
 80ac61e:	917a      	str	r1, [sp, #488]	; 0x1e8
 80ac620:	a978      	add	r1, sp, #480	; 0x1e0
 80ac622:	e9d1 4500 	ldrd	r4, r5, [r1]
 80ac626:	a97a      	add	r1, sp, #488	; 0x1e8
 80ac628:	e9d1 0100 	ldrd	r0, r1, [r1]
 80ac62c:	404d      	eors	r5, r1
 80ac62e:	9903      	ldr	r1, [sp, #12]
 80ac630:	4044      	eors	r4, r0
 80ac632:	9802      	ldr	r0, [sp, #8]
 80ac634:	0649      	lsls	r1, r1, #25
 80ac636:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 80ac63a:	917d      	str	r1, [sp, #500]	; 0x1f4
 80ac63c:	0641      	lsls	r1, r0, #25
 80ac63e:	9803      	ldr	r0, [sp, #12]
 80ac640:	ea41 11d0 	orr.w	r1, r1, r0, lsr #7
 80ac644:	917c      	str	r1, [sp, #496]	; 0x1f0
 80ac646:	a97c      	add	r1, sp, #496	; 0x1f0
 80ac648:	e9d1 0100 	ldrd	r0, r1, [r1]
 80ac64c:	4060      	eors	r0, r4
 80ac64e:	4069      	eors	r1, r5
 80ac650:	e9cd 0100 	strd	r0, r1, [sp]
 80ac654:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80ac658:	ea40 000a 	orr.w	r0, r0, sl
 80ac65c:	ea41 010b 	orr.w	r1, r1, fp
 80ac660:	ea00 0408 	and.w	r4, r0, r8
 80ac664:	ea01 0509 	and.w	r5, r1, r9
 80ac668:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80ac66c:	ea00 000a 	and.w	r0, r0, sl
 80ac670:	ea01 010b 	and.w	r1, r1, fp
 80ac674:	4304      	orrs	r4, r0
 80ac676:	430d      	orrs	r5, r1
 80ac678:	4620      	mov	r0, r4
 80ac67a:	4629      	mov	r1, r5
 80ac67c:	e9dd 4500 	ldrd	r4, r5, [sp]
 80ac680:	1824      	adds	r4, r4, r0
 80ac682:	414d      	adcs	r5, r1
 80ac684:	19a4      	adds	r4, r4, r6
 80ac686:	417d      	adcs	r5, r7
    }
    while( i < 80 );
 80ac688:	459c      	cmp	ip, r3
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 80ac68a:	e9cd 4500 	strd	r4, r5, [sp]
    }
    while( i < 80 );
 80ac68e:	f47f ab05 	bne.w	80abc9c <mbedtls_internal_sha512_process+0x1fc>

    ctx->state[0] += A;
 80ac692:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80ac696:	4623      	mov	r3, r4
 80ac698:	18c0      	adds	r0, r0, r3
 80ac69a:	4169      	adcs	r1, r5
    ctx->state[1] += B;
 80ac69c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80ac6a0:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 80ac6a4:	18a4      	adds	r4, r4, r2
 80ac6a6:	415d      	adcs	r5, r3
 80ac6a8:	e9ce 4506 	strd	r4, r5, [lr, #24]
    ctx->state[2] += C;
 80ac6ac:	e9dd 3410 	ldrd	r3, r4, [sp, #64]	; 0x40
 80ac6b0:	eb13 030a 	adds.w	r3, r3, sl
 80ac6b4:	eb44 040b 	adc.w	r4, r4, fp
 80ac6b8:	469a      	mov	sl, r3
    ctx->state[3] += D;
    ctx->state[4] += E;
 80ac6ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    }
    while( i < 80 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
 80ac6be:	46a3      	mov	fp, r4
    ctx->state[3] += D;
    ctx->state[4] += E;
 80ac6c0:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
    }
    while( i < 80 );

    ctx->state[0] += A;
 80ac6c4:	e9ce 0104 	strd	r0, r1, [lr, #16]
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
 80ac6c8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80ac6cc:	eb10 0008 	adds.w	r0, r0, r8
 80ac6d0:	eb41 0109 	adc.w	r1, r1, r9
    ctx->state[4] += E;
 80ac6d4:	18a4      	adds	r4, r4, r2
 80ac6d6:	415d      	adcs	r5, r3
 80ac6d8:	e9ce 450c 	strd	r4, r5, [lr, #48]	; 0x30
    ctx->state[5] += F;
 80ac6dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80ac6e0:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
 80ac6e4:	18a4      	adds	r4, r4, r2
 80ac6e6:	415d      	adcs	r5, r3
 80ac6e8:	e9ce 450e 	strd	r4, r5, [lr, #56]	; 0x38
    ctx->state[6] += G;
 80ac6ec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80ac6f0:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
 80ac6f4:	18a4      	adds	r4, r4, r2
 80ac6f6:	415d      	adcs	r5, r3
    while( i < 80 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
 80ac6f8:	e9ce 010a 	strd	r0, r1, [lr, #40]	; 0x28
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
    ctx->state[7] += H;
 80ac6fc:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
    ctx->state[5] += F;
    ctx->state[6] += G;
 80ac700:	e9ce 4510 	strd	r4, r5, [lr, #64]	; 0x40
    ctx->state[7] += H;
 80ac704:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 80ac708:	18c0      	adds	r0, r0, r3
 80ac70a:	4161      	adcs	r1, r4
 80ac70c:	e9ce 0112 	strd	r0, r1, [lr, #72]	; 0x48

    return( 0 );
}
 80ac710:	2000      	movs	r0, #0
    }
    while( i < 80 );

    ctx->state[0] += A;
    ctx->state[1] += B;
    ctx->state[2] += C;
 80ac712:	e9ce ab08 	strd	sl, fp, [lr, #32]
    ctx->state[5] += F;
    ctx->state[6] += G;
    ctx->state[7] += H;

    return( 0 );
}
 80ac716:	f20d 4d7c 	addw	sp, sp, #1148	; 0x47c
 80ac71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80ac71e:	bf00      	nop

080ac720 <mbedtls_sha512_update_ret>:
 * SHA-512 process buffer
 */
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 80ac720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80ac724:	4604      	mov	r4, r0
 80ac726:	460e      	mov	r6, r1
    int ret;
    size_t fill;
    unsigned int left;

    if( ilen == 0 )
 80ac728:	4615      	mov	r5, r2
 80ac72a:	2a00      	cmp	r2, #0
 80ac72c:	d03d      	beq.n	80ac7aa <mbedtls_sha512_update_ret+0x8a>
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
 80ac72e:	e9d0 2300 	ldrd	r2, r3, [r0]
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
 80ac732:	f04f 0900 	mov.w	r9, #0
    unsigned int left;

    if( ilen == 0 )
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
 80ac736:	f002 007f 	and.w	r0, r2, #127	; 0x7f
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
 80ac73a:	1952      	adds	r2, r2, r5
 80ac73c:	eb43 0309 	adc.w	r3, r3, r9

    if( ctx->total[0] < (uint64_t) ilen )
 80ac740:	454b      	cmp	r3, r9
 80ac742:	bf08      	it	eq
 80ac744:	42aa      	cmpeq	r2, r5
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
 80ac746:	e9c4 2300 	strd	r2, r3, [r4]

    if( ctx->total[0] < (uint64_t) ilen )
 80ac74a:	d206      	bcs.n	80ac75a <mbedtls_sha512_update_ret+0x3a>
        ctx->total[1]++;
 80ac74c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80ac750:	3201      	adds	r2, #1
 80ac752:	f143 0300 	adc.w	r3, r3, #0
 80ac756:	e9c4 2302 	strd	r2, r3, [r4, #8]

    if( left && ilen >= fill )
 80ac75a:	b188      	cbz	r0, 80ac780 <mbedtls_sha512_update_ret+0x60>

    if( ilen == 0 )
        return( 0 );

    left = (unsigned int) (ctx->total[0] & 0x7F);
    fill = 128 - left;
 80ac75c:	f1c0 0780 	rsb	r7, r0, #128	; 0x80
    ctx->total[0] += (uint64_t) ilen;

    if( ctx->total[0] < (uint64_t) ilen )
        ctx->total[1]++;

    if( left && ilen >= fill )
 80ac760:	42bd      	cmp	r5, r7
 80ac762:	d31c      	bcc.n	80ac79e <mbedtls_sha512_update_ret+0x7e>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 80ac764:	f104 0850 	add.w	r8, r4, #80	; 0x50
 80ac768:	4631      	mov	r1, r6
 80ac76a:	463a      	mov	r2, r7
 80ac76c:	4440      	add	r0, r8
 80ac76e:	f002 fcc0 	bl	80af0f2 <memcpy>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 80ac772:	4641      	mov	r1, r8
 80ac774:	4620      	mov	r0, r4
 80ac776:	f7ff f993 	bl	80abaa0 <mbedtls_internal_sha512_process>
 80ac77a:	b9b8      	cbnz	r0, 80ac7ac <mbedtls_sha512_update_ret+0x8c>
            return( ret );

        input += fill;
 80ac77c:	443e      	add	r6, r7
        ilen  -= fill;
 80ac77e:	1bed      	subs	r5, r5, r7
 * SHA-512 process buffer
 */
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 80ac780:	462f      	mov	r7, r5
 80ac782:	1be9      	subs	r1, r5, r7
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 128 )
 80ac784:	2f7f      	cmp	r7, #127	; 0x7f
 80ac786:	4431      	add	r1, r6
 80ac788:	d905      	bls.n	80ac796 <mbedtls_sha512_update_ret+0x76>
    {
        if( ( ret = mbedtls_internal_sha512_process( ctx, input ) ) != 0 )
 80ac78a:	4620      	mov	r0, r4
 80ac78c:	f7ff f988 	bl	80abaa0 <mbedtls_internal_sha512_process>
 80ac790:	b960      	cbnz	r0, 80ac7ac <mbedtls_sha512_update_ret+0x8c>
            return( ret );

        input += 128;
        ilen  -= 128;
 80ac792:	3f80      	subs	r7, #128	; 0x80
 80ac794:	e7f5      	b.n	80ac782 <mbedtls_sha512_update_ret+0x62>
    }

    if( ilen > 0 )
 80ac796:	b147      	cbz	r7, 80ac7aa <mbedtls_sha512_update_ret+0x8a>
 80ac798:	463d      	mov	r5, r7
 80ac79a:	460e      	mov	r6, r1
 80ac79c:	2000      	movs	r0, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 80ac79e:	3450      	adds	r4, #80	; 0x50
 80ac7a0:	462a      	mov	r2, r5
 80ac7a2:	4631      	mov	r1, r6
 80ac7a4:	4420      	add	r0, r4
 80ac7a6:	f002 fca4 	bl	80af0f2 <memcpy>

    return( 0 );
 80ac7aa:	2000      	movs	r0, #0
}
 80ac7ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080ac7b0 <mbedtls_sha512_finish_ret>:
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
 80ac7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80ac7b2:	4604      	mov	r4, r0
    uint64_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;
 80ac7b4:	6803      	ldr	r3, [r0, #0]

    ctx->buffer[used++] = 0x80;
 80ac7b6:	2280      	movs	r2, #128	; 0x80
    uint64_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;
 80ac7b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f

    ctx->buffer[used++] = 0x80;
 80ac7bc:	1c58      	adds	r0, r3, #1

    if( used <= 112 )
 80ac7be:	2870      	cmp	r0, #112	; 0x70
    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;

    ctx->buffer[used++] = 0x80;
 80ac7c0:	4423      	add	r3, r4
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
 80ac7c2:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;

    ctx->buffer[used++] = 0x80;
 80ac7c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80ac7c8:	f104 0650 	add.w	r6, r4, #80	; 0x50

    if( used <= 112 )
 80ac7cc:	d804      	bhi.n	80ac7d8 <mbedtls_sha512_finish_ret+0x28>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 112 - used );
 80ac7ce:	f1c0 0270 	rsb	r2, r0, #112	; 0x70
 80ac7d2:	2100      	movs	r1, #0
 80ac7d4:	4430      	add	r0, r6
 80ac7d6:	e00f      	b.n	80ac7f8 <mbedtls_sha512_finish_ret+0x48>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 128 - used );
 80ac7d8:	f1c0 0280 	rsb	r2, r0, #128	; 0x80
 80ac7dc:	2100      	movs	r1, #0
 80ac7de:	4430      	add	r0, r6
 80ac7e0:	f002 fcad 	bl	80af13e <memset>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 80ac7e4:	4631      	mov	r1, r6
 80ac7e6:	4620      	mov	r0, r4
 80ac7e8:	f7ff f95a 	bl	80abaa0 <mbedtls_internal_sha512_process>
 80ac7ec:	2800      	cmp	r0, #0
 80ac7ee:	f040 8111 	bne.w	80aca14 <mbedtls_sha512_finish_ret+0x264>
            return( ret );

        memset( ctx->buffer, 0, 112 );
 80ac7f2:	4601      	mov	r1, r0
 80ac7f4:	4630      	mov	r0, r6
 80ac7f6:	2270      	movs	r2, #112	; 0x70
 80ac7f8:	f002 fca1 	bl	80af13e <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
 80ac7fc:	e894 4080 	ldmia.w	r4, {r7, lr}
         | ( ctx->total[1] <<  3 );
 80ac800:	68e3      	ldr	r3, [r4, #12]
 80ac802:	68a2      	ldr	r2, [r4, #8]
 80ac804:	00d9      	lsls	r1, r3, #3
 80ac806:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80ac80a:	2300      	movs	r3, #0
 80ac80c:	4319      	orrs	r1, r3
 80ac80e:	00d0      	lsls	r0, r2, #3
 80ac810:	ea4f 725e 	mov.w	r2, lr, lsr #29
 80ac814:	4310      	orrs	r0, r2
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 80ac816:	0e0a      	lsrs	r2, r1, #24
 80ac818:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
 80ac81c:	0c0a      	lsrs	r2, r1, #16
 80ac81e:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
 80ac822:	0a0a      	lsrs	r2, r1, #8
 80ac824:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
 80ac828:	0e02      	lsrs	r2, r0, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 80ac82a:	ea4f 03ce 	mov.w	r3, lr, lsl #3

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 80ac82e:	f884 20c4 	strb.w	r2, [r4, #196]	; 0xc4
 80ac832:	0c02      	lsrs	r2, r0, #16
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 80ac834:	ea43 7357 	orr.w	r3, r3, r7, lsr #29

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 80ac838:	f884 20c5 	strb.w	r2, [r4, #197]	; 0xc5
 80ac83c:	0a02      	lsrs	r2, r0, #8
 80ac83e:	f884 20c6 	strb.w	r2, [r4, #198]	; 0xc6
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 80ac842:	0e1a      	lsrs	r2, r3, #24
    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );
 80ac844:	00ff      	lsls	r7, r7, #3

    PUT_UINT64_BE( high, ctx->buffer, 112 );
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 80ac846:	f884 20c8 	strb.w	r2, [r4, #200]	; 0xc8
 80ac84a:	0c1a      	lsrs	r2, r3, #16
 80ac84c:	f884 20c9 	strb.w	r2, [r4, #201]	; 0xc9
 80ac850:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb
 80ac854:	0a1a      	lsrs	r2, r3, #8
 80ac856:	0e3b      	lsrs	r3, r7, #24
 80ac858:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
 80ac85c:	0c3b      	lsrs	r3, r7, #16
 80ac85e:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
 80ac862:	0a3b      	lsrs	r3, r7, #8
     */
    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 80ac864:	f884 10c3 	strb.w	r1, [r4, #195]	; 0xc3
 80ac868:	f884 00c7 	strb.w	r0, [r4, #199]	; 0xc7
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 80ac86c:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
 80ac870:	f884 20ca 	strb.w	r2, [r4, #202]	; 0xca
 80ac874:	f884 70cf 	strb.w	r7, [r4, #207]	; 0xcf

    if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 80ac878:	4631      	mov	r1, r6
 80ac87a:	4620      	mov	r0, r4
 80ac87c:	f7ff f910 	bl	80abaa0 <mbedtls_internal_sha512_process>
 80ac880:	4603      	mov	r3, r0
 80ac882:	2800      	cmp	r0, #0
 80ac884:	f040 80c5 	bne.w	80aca12 <mbedtls_sha512_finish_ret+0x262>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT64_BE( ctx->state[0], output,  0 );
 80ac888:	7de2      	ldrb	r2, [r4, #23]
 80ac88a:	702a      	strb	r2, [r5, #0]
 80ac88c:	8ae2      	ldrh	r2, [r4, #22]
 80ac88e:	706a      	strb	r2, [r5, #1]
 80ac890:	6962      	ldr	r2, [r4, #20]
 80ac892:	0a12      	lsrs	r2, r2, #8
 80ac894:	70aa      	strb	r2, [r5, #2]
 80ac896:	6962      	ldr	r2, [r4, #20]
 80ac898:	70ea      	strb	r2, [r5, #3]
 80ac89a:	7ce2      	ldrb	r2, [r4, #19]
 80ac89c:	712a      	strb	r2, [r5, #4]
 80ac89e:	8a62      	ldrh	r2, [r4, #18]
 80ac8a0:	716a      	strb	r2, [r5, #5]
 80ac8a2:	6922      	ldr	r2, [r4, #16]
 80ac8a4:	0a12      	lsrs	r2, r2, #8
 80ac8a6:	71aa      	strb	r2, [r5, #6]
 80ac8a8:	6922      	ldr	r2, [r4, #16]
 80ac8aa:	71ea      	strb	r2, [r5, #7]
    PUT_UINT64_BE( ctx->state[1], output,  8 );
 80ac8ac:	7fe2      	ldrb	r2, [r4, #31]
 80ac8ae:	722a      	strb	r2, [r5, #8]
 80ac8b0:	8be2      	ldrh	r2, [r4, #30]
 80ac8b2:	726a      	strb	r2, [r5, #9]
 80ac8b4:	69e2      	ldr	r2, [r4, #28]
 80ac8b6:	0a12      	lsrs	r2, r2, #8
 80ac8b8:	72aa      	strb	r2, [r5, #10]
 80ac8ba:	69e2      	ldr	r2, [r4, #28]
 80ac8bc:	72ea      	strb	r2, [r5, #11]
 80ac8be:	7ee2      	ldrb	r2, [r4, #27]
 80ac8c0:	732a      	strb	r2, [r5, #12]
 80ac8c2:	8b62      	ldrh	r2, [r4, #26]
 80ac8c4:	736a      	strb	r2, [r5, #13]
 80ac8c6:	69a2      	ldr	r2, [r4, #24]
 80ac8c8:	0a12      	lsrs	r2, r2, #8
 80ac8ca:	73aa      	strb	r2, [r5, #14]
 80ac8cc:	69a2      	ldr	r2, [r4, #24]
 80ac8ce:	73ea      	strb	r2, [r5, #15]
    PUT_UINT64_BE( ctx->state[2], output, 16 );
 80ac8d0:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 80ac8d4:	742a      	strb	r2, [r5, #16]
 80ac8d6:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80ac8d8:	746a      	strb	r2, [r5, #17]
 80ac8da:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80ac8dc:	0a12      	lsrs	r2, r2, #8
 80ac8de:	74aa      	strb	r2, [r5, #18]
 80ac8e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80ac8e2:	74ea      	strb	r2, [r5, #19]
 80ac8e4:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 80ac8e8:	752a      	strb	r2, [r5, #20]
 80ac8ea:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 80ac8ec:	756a      	strb	r2, [r5, #21]
 80ac8ee:	6a22      	ldr	r2, [r4, #32]
 80ac8f0:	0a12      	lsrs	r2, r2, #8
 80ac8f2:	75aa      	strb	r2, [r5, #22]
 80ac8f4:	6a22      	ldr	r2, [r4, #32]
 80ac8f6:	75ea      	strb	r2, [r5, #23]
    PUT_UINT64_BE( ctx->state[3], output, 24 );
 80ac8f8:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 80ac8fc:	762a      	strb	r2, [r5, #24]
 80ac8fe:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 80ac900:	766a      	strb	r2, [r5, #25]
 80ac902:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80ac904:	0a12      	lsrs	r2, r2, #8
 80ac906:	76aa      	strb	r2, [r5, #26]
 80ac908:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80ac90a:	76ea      	strb	r2, [r5, #27]
 80ac90c:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
 80ac910:	772a      	strb	r2, [r5, #28]
 80ac912:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80ac914:	776a      	strb	r2, [r5, #29]
 80ac916:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80ac918:	0a12      	lsrs	r2, r2, #8
 80ac91a:	77aa      	strb	r2, [r5, #30]
 80ac91c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80ac91e:	77ea      	strb	r2, [r5, #31]
    PUT_UINT64_BE( ctx->state[4], output, 32 );
 80ac920:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
 80ac924:	f885 2020 	strb.w	r2, [r5, #32]
 80ac928:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80ac92a:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
 80ac92e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80ac930:	0a12      	lsrs	r2, r2, #8
 80ac932:	f885 2022 	strb.w	r2, [r5, #34]	; 0x22
 80ac936:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80ac938:	f885 2023 	strb.w	r2, [r5, #35]	; 0x23
 80ac93c:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
 80ac940:	f885 2024 	strb.w	r2, [r5, #36]	; 0x24
 80ac944:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80ac946:	f885 2025 	strb.w	r2, [r5, #37]	; 0x25
 80ac94a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80ac94c:	0a12      	lsrs	r2, r2, #8
 80ac94e:	f885 2026 	strb.w	r2, [r5, #38]	; 0x26
 80ac952:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80ac954:	f885 2027 	strb.w	r2, [r5, #39]	; 0x27
    PUT_UINT64_BE( ctx->state[5], output, 40 );
 80ac958:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 80ac95c:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
 80ac960:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80ac962:	f885 2029 	strb.w	r2, [r5, #41]	; 0x29
 80ac966:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80ac968:	0a12      	lsrs	r2, r2, #8
 80ac96a:	f885 202a 	strb.w	r2, [r5, #42]	; 0x2a
 80ac96e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80ac970:	f885 202b 	strb.w	r2, [r5, #43]	; 0x2b
 80ac974:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
 80ac978:	f885 202c 	strb.w	r2, [r5, #44]	; 0x2c
 80ac97c:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 80ac97e:	f885 202d 	strb.w	r2, [r5, #45]	; 0x2d
 80ac982:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80ac984:	0a12      	lsrs	r2, r2, #8
 80ac986:	f885 202e 	strb.w	r2, [r5, #46]	; 0x2e
 80ac98a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80ac98c:	f885 202f 	strb.w	r2, [r5, #47]	; 0x2f

    if( ctx->is384 == 0 )
 80ac990:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
 80ac994:	2800      	cmp	r0, #0
 80ac996:	d13c      	bne.n	80aca12 <mbedtls_sha512_finish_ret+0x262>
    {
        PUT_UINT64_BE( ctx->state[6], output, 48 );
 80ac998:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 80ac99c:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80ac9a0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80ac9a4:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
 80ac9a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80ac9aa:	0a1b      	lsrs	r3, r3, #8
 80ac9ac:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
 80ac9b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80ac9b2:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
 80ac9b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80ac9ba:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 80ac9be:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 80ac9c2:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
 80ac9c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80ac9c8:	0a1b      	lsrs	r3, r3, #8
 80ac9ca:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 80ac9ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80ac9d0:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
        PUT_UINT64_BE( ctx->state[7], output, 56 );
 80ac9d4:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
 80ac9d8:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 80ac9dc:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 80ac9e0:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
 80ac9e4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80ac9e6:	0a1b      	lsrs	r3, r3, #8
 80ac9e8:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
 80ac9ec:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80ac9ee:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
 80ac9f2:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 80ac9f6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
 80ac9fa:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 80ac9fe:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
 80aca02:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80aca04:	0a1b      	lsrs	r3, r3, #8
 80aca06:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
 80aca0a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80aca0c:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
 80aca10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    return( 0 );
 80aca12:	4618      	mov	r0, r3
}
 80aca14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080aca16 <mbedtls_sha512_ret>:
 */
int mbedtls_sha512_ret( const unsigned char *input,
                    size_t ilen,
                    unsigned char output[64],
                    int is384 )
{
 80aca16:	b5f0      	push	{r4, r5, r6, r7, lr}
 80aca18:	461f      	mov	r7, r3
 80aca1a:	b0b7      	sub	sp, #220	; 0xdc
 80aca1c:	4605      	mov	r5, r0
    int ret;
    mbedtls_sha512_context ctx;

    mbedtls_sha512_init( &ctx );
 80aca1e:	4668      	mov	r0, sp
 */
int mbedtls_sha512_ret( const unsigned char *input,
                    size_t ilen,
                    unsigned char output[64],
                    int is384 )
{
 80aca20:	460e      	mov	r6, r1
 80aca22:	4614      	mov	r4, r2
    int ret;
    mbedtls_sha512_context ctx;

    mbedtls_sha512_init( &ctx );
 80aca24:	f7fe ff8c 	bl	80ab940 <mbedtls_sha512_init>

    if( ( ret = mbedtls_sha512_starts_ret( &ctx, is384 ) ) != 0 )
 80aca28:	4639      	mov	r1, r7
 80aca2a:	4668      	mov	r0, sp
 80aca2c:	f7fe ff9c 	bl	80ab968 <mbedtls_sha512_starts_ret>
 80aca30:	4601      	mov	r1, r0
 80aca32:	b958      	cbnz	r0, 80aca4c <mbedtls_sha512_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha512_update_ret( &ctx, input, ilen ) ) != 0 )
 80aca34:	4629      	mov	r1, r5
 80aca36:	4632      	mov	r2, r6
 80aca38:	4668      	mov	r0, sp
 80aca3a:	f7ff fe71 	bl	80ac720 <mbedtls_sha512_update_ret>
 80aca3e:	4601      	mov	r1, r0
 80aca40:	b920      	cbnz	r0, 80aca4c <mbedtls_sha512_ret+0x36>
        goto exit;

    if( ( ret = mbedtls_sha512_finish_ret( &ctx, output ) ) != 0 )
 80aca42:	4621      	mov	r1, r4
 80aca44:	4668      	mov	r0, sp
 80aca46:	f7ff feb3 	bl	80ac7b0 <mbedtls_sha512_finish_ret>
 80aca4a:	4601      	mov	r1, r0
        goto exit;

exit:
    mbedtls_sha512_free( &ctx );
 80aca4c:	4668      	mov	r0, sp
 80aca4e:	f7fe ff7b 	bl	80ab948 <mbedtls_sha512_free>

    return( ret );
}
 80aca52:	4608      	mov	r0, r1
 80aca54:	b037      	add	sp, #220	; 0xdc
 80aca56:	bdf0      	pop	{r4, r5, r6, r7, pc}

080aca58 <mbedtls_pem_init>:
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
}

void mbedtls_pem_init( mbedtls_pem_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_pem_context ) );
 80aca58:	2300      	movs	r3, #0
 80aca5a:	6003      	str	r3, [r0, #0]
 80aca5c:	6043      	str	r3, [r0, #4]
 80aca5e:	6083      	str	r3, [r0, #8]
 80aca60:	4770      	bx	lr
	...

080aca64 <mbedtls_pem_read_buffer>:
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

int mbedtls_pem_read_buffer( mbedtls_pem_context *ctx, const char *header, const char *footer,
                     const unsigned char *data, const unsigned char *pwd,
                     size_t pwdlen, size_t *use_len )
{
 80aca64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80aca68:	4689      	mov	r9, r1
 80aca6a:	b085      	sub	sp, #20
 80aca6c:	4690      	mov	r8, r2
 80aca6e:	461f      	mov	r7, r3
    ((void) pwd);
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
 80aca70:	4606      	mov	r6, r0
 80aca72:	2800      	cmp	r0, #0
 80aca74:	d067      	beq.n	80acb46 <mbedtls_pem_read_buffer+0xe2>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );

    s1 = (unsigned char *) strstr( (const char *) data, header );
 80aca76:	4618      	mov	r0, r3
 80aca78:	f002 fb7f 	bl	80af17a <strstr>

    if( s1 == NULL )
 80aca7c:	4604      	mov	r4, r0
 80aca7e:	2800      	cmp	r0, #0
 80aca80:	d063      	beq.n	80acb4a <mbedtls_pem_read_buffer+0xe6>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s2 = (unsigned char *) strstr( (const char *) data, footer );
 80aca82:	4641      	mov	r1, r8
 80aca84:	4638      	mov	r0, r7
 80aca86:	f002 fb78 	bl	80af17a <strstr>

    if( s2 == NULL || s2 <= s1 )
 80aca8a:	4605      	mov	r5, r0
 80aca8c:	2800      	cmp	r0, #0
 80aca8e:	d05c      	beq.n	80acb4a <mbedtls_pem_read_buffer+0xe6>
 80aca90:	4284      	cmp	r4, r0
 80aca92:	d25a      	bcs.n	80acb4a <mbedtls_pem_read_buffer+0xe6>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
 80aca94:	4648      	mov	r0, r9
 80aca96:	f002 fb68 	bl	80af16a <strlen>
    if( *s1 == ' '  ) s1++;
 80aca9a:	5c22      	ldrb	r2, [r4, r0]
    s2 = (unsigned char *) strstr( (const char *) data, footer );

    if( s2 == NULL || s2 <= s1 )
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
 80aca9c:	1823      	adds	r3, r4, r0
    if( *s1 == ' '  ) s1++;
 80aca9e:	2a20      	cmp	r2, #32
 80acaa0:	bf08      	it	eq
 80acaa2:	3301      	addeq	r3, #1
    if( *s1 == '\r' ) s1++;
 80acaa4:	781a      	ldrb	r2, [r3, #0]
 80acaa6:	2a0d      	cmp	r2, #13
 80acaa8:	bf08      	it	eq
 80acaaa:	3301      	addeq	r3, #1
    if( *s1 == '\n' ) s1++;
 80acaac:	781a      	ldrb	r2, [r3, #0]
 80acaae:	2a0a      	cmp	r2, #10
 80acab0:	d14b      	bne.n	80acb4a <mbedtls_pem_read_buffer+0xe6>
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
 80acab2:	4640      	mov	r0, r8
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
    if( *s1 == ' '  ) s1++;
    if( *s1 == '\r' ) s1++;
    if( *s1 == '\n' ) s1++;
 80acab4:	1c5c      	adds	r4, r3, #1
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
 80acab6:	f002 fb58 	bl	80af16a <strlen>
    if( *end == ' '  ) end++;
 80acaba:	5c2a      	ldrb	r2, [r5, r0]
    if( *s1 == '\r' ) s1++;
    if( *s1 == '\n' ) s1++;
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
 80acabc:	182b      	adds	r3, r5, r0
    if( *end == ' '  ) end++;
 80acabe:	2a20      	cmp	r2, #32
 80acac0:	bf08      	it	eq
 80acac2:	3301      	addeq	r3, #1
    if( *end == '\r' ) end++;
 80acac4:	781a      	ldrb	r2, [r3, #0]
 80acac6:	2a0d      	cmp	r2, #13
 80acac8:	bf08      	it	eq
 80acaca:	3301      	addeq	r3, #1
    if( *end == '\n' ) end++;
 80acacc:	781a      	ldrb	r2, [r3, #0]
 80acace:	2a0a      	cmp	r2, #10
 80acad0:	bf08      	it	eq
 80acad2:	3301      	addeq	r3, #1
    *use_len = end - data;
 80acad4:	1bdb      	subs	r3, r3, r7
 80acad6:	9a0e      	ldr	r2, [sp, #56]	; 0x38

    enc = 0;

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
 80acad8:	1b2f      	subs	r7, r5, r4
 80acada:	2f15      	cmp	r7, #21
    end = s2;
    end += strlen( footer );
    if( *end == ' '  ) end++;
    if( *end == '\r' ) end++;
    if( *end == '\n' ) end++;
    *use_len = end - data;
 80acadc:	6013      	str	r3, [r2, #0]

    enc = 0;

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
 80acade:	dd05      	ble.n	80acaec <mbedtls_pem_read_buffer+0x88>
 80acae0:	2216      	movs	r2, #22
 80acae2:	4920      	ldr	r1, [pc, #128]	; (80acb64 <mbedtls_pem_read_buffer+0x100>)
 80acae4:	4620      	mov	r0, r4
 80acae6:	f002 faf5 	bl	80af0d4 <memcmp>
 80acaea:	b380      	cbz	r0, 80acb4e <mbedtls_pem_read_buffer+0xea>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    if( s1 >= s2 )
 80acaec:	42a5      	cmp	r5, r4
 80acaee:	d930      	bls.n	80acb52 <mbedtls_pem_read_buffer+0xee>
        return( MBEDTLS_ERR_PEM_INVALID_DATA );

    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );
 80acaf0:	2100      	movs	r1, #0
 80acaf2:	9700      	str	r7, [sp, #0]
 80acaf4:	4623      	mov	r3, r4
 80acaf6:	aa03      	add	r2, sp, #12
 80acaf8:	4608      	mov	r0, r1
 80acafa:	f7f9 f873 	bl	80a5be4 <mbedtls_base64_decode>

    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
 80acafe:	302c      	adds	r0, #44	; 0x2c
 80acb00:	d029      	beq.n	80acb56 <mbedtls_pem_read_buffer+0xf2>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );

    if( ( buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
 80acb02:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80acb06:	2001      	movs	r0, #1
 80acb08:	4641      	mov	r1, r8
 80acb0a:	f002 facd 	bl	80af0a8 <calloc>
 80acb0e:	4605      	mov	r5, r0
 80acb10:	b318      	cbz	r0, 80acb5a <mbedtls_pem_read_buffer+0xf6>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );

    if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
 80acb12:	4623      	mov	r3, r4
 80acb14:	9700      	str	r7, [sp, #0]
 80acb16:	aa03      	add	r2, sp, #12
 80acb18:	4641      	mov	r1, r8
 80acb1a:	f7f9 f863 	bl	80a5be4 <mbedtls_base64_decode>
 80acb1e:	9b03      	ldr	r3, [sp, #12]
 80acb20:	4604      	mov	r4, r0
 80acb22:	b168      	cbz	r0, 80acb40 <mbedtls_pem_read_buffer+0xdc>
    {
        mbedtls_zeroize( buf, len );
 80acb24:	462a      	mov	r2, r5
 80acb26:	442b      	add	r3, r5
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80acb28:	2100      	movs	r1, #0
 80acb2a:	429a      	cmp	r2, r3
 80acb2c:	d002      	beq.n	80acb34 <mbedtls_pem_read_buffer+0xd0>
 80acb2e:	7011      	strb	r1, [r2, #0]
 80acb30:	3201      	adds	r2, #1
 80acb32:	e7fa      	b.n	80acb2a <mbedtls_pem_read_buffer+0xc6>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );

    if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
    {
        mbedtls_zeroize( buf, len );
        mbedtls_free( buf );
 80acb34:	4628      	mov	r0, r5
 80acb36:	f001 f9e9 	bl	80adf0c <free>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 80acb3a:	f5a4 5088 	sub.w	r0, r4, #4352	; 0x1100
 80acb3e:	e00d      	b.n	80acb5c <mbedtls_pem_read_buffer+0xf8>
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    ctx->buf = buf;
 80acb40:	6035      	str	r5, [r6, #0]
    ctx->buflen = len;
 80acb42:	6073      	str	r3, [r6, #4]

    return( 0 );
 80acb44:	e00a      	b.n	80acb5c <mbedtls_pem_read_buffer+0xf8>
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );
 80acb46:	4808      	ldr	r0, [pc, #32]	; (80acb68 <mbedtls_pem_read_buffer+0x104>)
 80acb48:	e008      	b.n	80acb5c <mbedtls_pem_read_buffer+0xf8>

    s1 = (unsigned char *) strstr( (const char *) data, header );

    if( s1 == NULL )
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
 80acb4a:	4808      	ldr	r0, [pc, #32]	; (80acb6c <mbedtls_pem_read_buffer+0x108>)
 80acb4c:	e006      	b.n	80acb5c <mbedtls_pem_read_buffer+0xf8>

        if( *s1 == '\r' ) s1++;
        if( *s1 == '\n' ) s1++;
        else return( MBEDTLS_ERR_PEM_INVALID_DATA );
#else
        return( MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE );
 80acb4e:	4808      	ldr	r0, [pc, #32]	; (80acb70 <mbedtls_pem_read_buffer+0x10c>)
 80acb50:	e004      	b.n	80acb5c <mbedtls_pem_read_buffer+0xf8>
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */
    }

    if( s1 >= s2 )
        return( MBEDTLS_ERR_PEM_INVALID_DATA );
 80acb52:	4808      	ldr	r0, [pc, #32]	; (80acb74 <mbedtls_pem_read_buffer+0x110>)
 80acb54:	e002      	b.n	80acb5c <mbedtls_pem_read_buffer+0xf8>

    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );

    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 80acb56:	4808      	ldr	r0, [pc, #32]	; (80acb78 <mbedtls_pem_read_buffer+0x114>)
 80acb58:	e000      	b.n	80acb5c <mbedtls_pem_read_buffer+0xf8>

    if( ( buf = (unsigned char *)mbedtls_calloc( 1, len ) ) == NULL )
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );
 80acb5a:	4808      	ldr	r0, [pc, #32]	; (80acb7c <mbedtls_pem_read_buffer+0x118>)

    ctx->buf = buf;
    ctx->buflen = len;

    return( 0 );
}
 80acb5c:	b005      	add	sp, #20
 80acb5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80acb62:	bf00      	nop
 80acb64:	080b12f0 	.word	0x080b12f0
 80acb68:	ffffeb80 	.word	0xffffeb80
 80acb6c:	ffffef80 	.word	0xffffef80
 80acb70:	ffffec00 	.word	0xffffec00
 80acb74:	ffffef00 	.word	0xffffef00
 80acb78:	ffffeed4 	.word	0xffffeed4
 80acb7c:	ffffee80 	.word	0xffffee80

080acb80 <mbedtls_pem_free>:

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
 80acb80:	b510      	push	{r4, lr}
    if( ctx->buf != NULL )
 80acb82:	6803      	ldr	r3, [r0, #0]

    return( 0 );
}

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
 80acb84:	4604      	mov	r4, r0
    if( ctx->buf != NULL )
 80acb86:	b13b      	cbz	r3, 80acb98 <mbedtls_pem_free+0x18>
 80acb88:	6842      	ldr	r2, [r0, #4]
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80acb8a:	2100      	movs	r1, #0
 80acb8c:	441a      	add	r2, r3
 80acb8e:	429a      	cmp	r2, r3
 80acb90:	d002      	beq.n	80acb98 <mbedtls_pem_free+0x18>
 80acb92:	7019      	strb	r1, [r3, #0]
 80acb94:	3301      	adds	r3, #1
 80acb96:	e7fa      	b.n	80acb8e <mbedtls_pem_free+0xe>

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
    if( ctx->buf != NULL )
        mbedtls_zeroize( ctx->buf, ctx->buflen );
    mbedtls_free( ctx->buf );
 80acb98:	6820      	ldr	r0, [r4, #0]
 80acb9a:	f001 f9b7 	bl	80adf0c <free>
    mbedtls_free( ctx->info );
 80acb9e:	68a0      	ldr	r0, [r4, #8]
 80acba0:	f001 f9b4 	bl	80adf0c <free>
 80acba4:	f104 020c 	add.w	r2, r4, #12
#endif

#if defined(MBEDTLS_PEM_PARSE_C)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80acba8:	2300      	movs	r3, #0
 80acbaa:	4294      	cmp	r4, r2
 80acbac:	d002      	beq.n	80acbb4 <mbedtls_pem_free+0x34>
 80acbae:	7023      	strb	r3, [r4, #0]
 80acbb0:	3401      	adds	r4, #1
 80acbb2:	e7fa      	b.n	80acbaa <mbedtls_pem_free+0x2a>
 80acbb4:	bd10      	pop	{r4, pc}
	...

080acbb8 <mbedtls_rsa_deduce_primes>:
 *
 */
int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
                     mbedtls_mpi const *E, mbedtls_mpi const *D,
                     mbedtls_mpi *P, mbedtls_mpi *Q )
{
 80acbb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80acbbc:	4606      	mov	r6, r0
 80acbbe:	4688      	mov	r8, r1
 80acbc0:	b096      	sub	sp, #88	; 0x58
 80acbc2:	461f      	mov	r7, r3
          61,   67,   71,   73,   79,   83,   89,   97,
         101,  103,  107,  109,  113,  127,  131,  137,
         139,  149,  151,  157,  163,  167,  173,  179,
         181,  191,  193,  197,  199,  211,  223,  227,
         229,  233,  239,  241,  251
    };
 80acbc4:	4b79      	ldr	r3, [pc, #484]	; (80acdac <mbedtls_rsa_deduce_primes+0x1f4>)
 *
 */
int mbedtls_rsa_deduce_primes( mbedtls_mpi const *N,
                     mbedtls_mpi const *E, mbedtls_mpi const *D,
                     mbedtls_mpi *P, mbedtls_mpi *Q )
{
 80acbc6:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80acbca:	4615      	mov	r5, r2
          61,   67,   71,   73,   79,   83,   89,   97,
         101,  103,  107,  109,  113,  127,  131,  137,
         139,  149,  151,  157,  163,  167,  173,  179,
         181,  191,  193,  197,  199,  211,  223,  227,
         229,  233,  239,  241,  251
    };
 80acbcc:	f103 0e30 	add.w	lr, r3, #48	; 0x30
 80acbd0:	aa08      	add	r2, sp, #32
 80acbd2:	4614      	mov	r4, r2
 80acbd4:	6818      	ldr	r0, [r3, #0]
 80acbd6:	6859      	ldr	r1, [r3, #4]
 80acbd8:	3308      	adds	r3, #8
 80acbda:	c403      	stmia	r4!, {r0, r1}
 80acbdc:	4573      	cmp	r3, lr
 80acbde:	4622      	mov	r2, r4
 80acbe0:	d1f7      	bne.n	80acbd2 <mbedtls_rsa_deduce_primes+0x1a>
 80acbe2:	6818      	ldr	r0, [r3, #0]
 80acbe4:	889b      	ldrh	r3, [r3, #4]
 80acbe6:	6020      	str	r0, [r4, #0]
 80acbe8:	80a3      	strh	r3, [r4, #4]

    const size_t num_primes = sizeof( primes ) / sizeof( *primes );

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
 80acbea:	2f00      	cmp	r7, #0
 80acbec:	f000 80b8 	beq.w	80acd60 <mbedtls_rsa_deduce_primes+0x1a8>
 80acbf0:	f1b9 0f00 	cmp.w	r9, #0
 80acbf4:	f000 80b4 	beq.w	80acd60 <mbedtls_rsa_deduce_primes+0x1a8>
 80acbf8:	68bb      	ldr	r3, [r7, #8]
 80acbfa:	2b00      	cmp	r3, #0
 80acbfc:	f040 80b0 	bne.w	80acd60 <mbedtls_rsa_deduce_primes+0x1a8>
 80acc00:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80acc04:	2900      	cmp	r1, #0
 80acc06:	f040 80ab 	bne.w	80acd60 <mbedtls_rsa_deduce_primes+0x1a8>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 80acc0a:	4630      	mov	r0, r6
 80acc0c:	f7fc fdd8 	bl	80a97c0 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 80acc10:	2800      	cmp	r0, #0
 80acc12:	f340 80a5 	ble.w	80acd60 <mbedtls_rsa_deduce_primes+0x1a8>

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 80acc16:	2101      	movs	r1, #1
 80acc18:	4628      	mov	r0, r5
 80acc1a:	f7fc fdd1 	bl	80a97c0 <mbedtls_mpi_cmp_int>
    const size_t num_primes = sizeof( primes ) / sizeof( *primes );

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
 80acc1e:	2800      	cmp	r0, #0
 80acc20:	f340 809e 	ble.w	80acd60 <mbedtls_rsa_deduce_primes+0x1a8>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 80acc24:	4631      	mov	r1, r6
 80acc26:	4628      	mov	r0, r5
 80acc28:	f7fc fd85 	bl	80a9736 <mbedtls_mpi_cmp_mpi>

    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 80acc2c:	2800      	cmp	r0, #0
 80acc2e:	f280 8097 	bge.w	80acd60 <mbedtls_rsa_deduce_primes+0x1a8>
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 80acc32:	2101      	movs	r1, #1
 80acc34:	4640      	mov	r0, r8
 80acc36:	f7fc fdc3 	bl	80a97c0 <mbedtls_mpi_cmp_int>
    if( P == NULL || Q == NULL || P->p != NULL || Q->p != NULL )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 80acc3a:	2800      	cmp	r0, #0
 80acc3c:	f340 8090 	ble.w	80acd60 <mbedtls_rsa_deduce_primes+0x1a8>
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 80acc40:	4631      	mov	r1, r6
 80acc42:	4640      	mov	r0, r8
 80acc44:	f7fc fd77 	bl	80a9736 <mbedtls_mpi_cmp_mpi>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 ||
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 80acc48:	2800      	cmp	r0, #0
 80acc4a:	f280 8089 	bge.w	80acd60 <mbedtls_rsa_deduce_primes+0x1a8>

    /*
     * Initializations and temporary changes
     */

    mbedtls_mpi_init( &K );
 80acc4e:	a805      	add	r0, sp, #20
 80acc50:	f7fc fb0c 	bl	80a926c <mbedtls_mpi_init>
    mbedtls_mpi_init( &T );
 80acc54:	a802      	add	r0, sp, #8
 80acc56:	f7fc fb09 	bl	80a926c <mbedtls_mpi_init>

    /* T := DE - 1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, D,  E ) );
 80acc5a:	4642      	mov	r2, r8
 80acc5c:	4629      	mov	r1, r5
 80acc5e:	a802      	add	r0, sp, #8
 80acc60:	f7fc fecd 	bl	80a99fe <mbedtls_mpi_mul_mpi>
 80acc64:	4604      	mov	r4, r0
 80acc66:	2800      	cmp	r0, #0
 80acc68:	d172      	bne.n	80acd50 <mbedtls_rsa_deduce_primes+0x198>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &T, &T, 1 ) );
 80acc6a:	a902      	add	r1, sp, #8
 80acc6c:	2201      	movs	r2, #1
 80acc6e:	4608      	mov	r0, r1
 80acc70:	f7fc feaf 	bl	80a99d2 <mbedtls_mpi_sub_int>
 80acc74:	4604      	mov	r4, r0
 80acc76:	2800      	cmp	r0, #0
 80acc78:	d16a      	bne.n	80acd50 <mbedtls_rsa_deduce_primes+0x198>

    if( ( order = (uint16_t) mbedtls_mpi_lsb( &T ) ) == 0 )
 80acc7a:	a802      	add	r0, sp, #8
 80acc7c:	f7fc fb96 	bl	80a93ac <mbedtls_mpi_lsb>
 80acc80:	fa1f fa80 	uxth.w	sl, r0
 80acc84:	f1ba 0f00 	cmp.w	sl, #0
 80acc88:	d102      	bne.n	80acc90 <mbedtls_rsa_deduce_primes+0xd8>
    {
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 80acc8a:	f06f 0403 	mvn.w	r4, #3
 80acc8e:	e05f      	b.n	80acd50 <mbedtls_rsa_deduce_primes+0x198>
        goto cleanup;
    }

    /* After this operation, T holds the largest odd divisor of DE - 1. */
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &T, order ) );
 80acc90:	4651      	mov	r1, sl
 80acc92:	a802      	add	r0, sp, #8
 80acc94:	f7fc fc70 	bl	80a9578 <mbedtls_mpi_shift_r>
 80acc98:	4604      	mov	r4, r0
 80acc9a:	2800      	cmp	r0, #0
 80acc9c:	d158      	bne.n	80acd50 <mbedtls_rsa_deduce_primes+0x198>
     * Actual work
     */

    /* Skip trying 2 if N == 1 mod 8 */
    attempt = 0;
    if( N->p[0] % 8 == 1 )
 80acc9e:	68b3      	ldr	r3, [r6, #8]
        attempt = 1;
 80acca0:	681d      	ldr	r5, [r3, #0]
 80acca2:	f005 0507 	and.w	r5, r5, #7
 80acca6:	1e6b      	subs	r3, r5, #1
 80acca8:	425d      	negs	r5, r3
 80accaa:	415d      	adcs	r5, r3

    for( ; attempt < num_primes; ++attempt )
    {
        mbedtls_mpi_lset( &K, primes[attempt] );
 80accac:	ab16      	add	r3, sp, #88	; 0x58
 80accae:	442b      	add	r3, r5
 80accb0:	f813 1c38 	ldrb.w	r1, [r3, #-56]
 80accb4:	a805      	add	r0, sp, #20
 80accb6:	f7fc fb4c 	bl	80a9352 <mbedtls_mpi_lset>

        /* Check if gcd(K,N) = 1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 80accba:	4632      	mov	r2, r6
 80accbc:	a905      	add	r1, sp, #20
 80accbe:	4638      	mov	r0, r7
 80accc0:	f7fd fb2a 	bl	80aa318 <mbedtls_mpi_gcd>
 80accc4:	4604      	mov	r4, r0
 80accc6:	2800      	cmp	r0, #0
 80accc8:	d142      	bne.n	80acd50 <mbedtls_rsa_deduce_primes+0x198>
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
 80accca:	2101      	movs	r1, #1
 80acccc:	4638      	mov	r0, r7
 80accce:	f7fc fd77 	bl	80a97c0 <mbedtls_mpi_cmp_int>
 80accd2:	b120      	cbz	r0, 80accde <mbedtls_rsa_deduce_primes+0x126>
    /* Skip trying 2 if N == 1 mod 8 */
    attempt = 0;
    if( N->p[0] % 8 == 1 )
        attempt = 1;

    for( ; attempt < num_primes; ++attempt )
 80accd4:	3501      	adds	r5, #1
 80accd6:	b2ad      	uxth	r5, r5
 80accd8:	2d36      	cmp	r5, #54	; 0x36
 80accda:	d1e7      	bne.n	80accac <mbedtls_rsa_deduce_primes+0xf4>
 80accdc:	e7d5      	b.n	80acc8a <mbedtls_rsa_deduce_primes+0xd2>
        if( mbedtls_mpi_cmp_int( P, 1 ) != 0 )
            continue;

        /* Go through K^T + 1, K^(2T) + 1, K^(4T) + 1, ...
         * and check whether they have nontrivial GCD with N. */
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
 80accde:	a905      	add	r1, sp, #20
 80acce0:	f8cd 9000 	str.w	r9, [sp]
 80acce4:	4633      	mov	r3, r6
 80acce6:	aa02      	add	r2, sp, #8
 80acce8:	4608      	mov	r0, r1
 80accea:	f7fd f8f6 	bl	80a9eda <mbedtls_mpi_exp_mod>
 80accee:	4604      	mov	r4, r0
 80accf0:	bb70      	cbnz	r0, 80acd50 <mbedtls_rsa_deduce_primes+0x198>
 80accf2:	f04f 0801 	mov.w	r8, #1

        for( iter = 1; iter <= order; ++iter )
        {
            /* If we reach 1 prematurely, there's no point
             * in continuing to square K */
            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
 80accf6:	2101      	movs	r1, #1
 80accf8:	a805      	add	r0, sp, #20
 80accfa:	f7fc fd61 	bl	80a97c0 <mbedtls_mpi_cmp_int>
 80accfe:	b930      	cbnz	r0, 80acd0e <mbedtls_rsa_deduce_primes+0x156>
         * we reached 1, or K holds primes[attempt]^(DE - 1) mod N, which must
         * be 1 if D,E,N were consistent.
         * Check if that's the case and abort if not, to avoid very long,
         * yet eventually failing, computations if N,D,E were not sane.
         */
        if( mbedtls_mpi_cmp_int( &K, 1 ) != 0 )
 80acd00:	2101      	movs	r1, #1
 80acd02:	a805      	add	r0, sp, #20
 80acd04:	f7fc fd5c 	bl	80a97c0 <mbedtls_mpi_cmp_int>
 80acd08:	2800      	cmp	r0, #0
 80acd0a:	d0e3      	beq.n	80accd4 <mbedtls_rsa_deduce_primes+0x11c>
 80acd0c:	e7bd      	b.n	80acc8a <mbedtls_rsa_deduce_primes+0xd2>
            /* If we reach 1 prematurely, there's no point
             * in continuing to square K */
            if( mbedtls_mpi_cmp_int( &K, 1 ) == 0 )
                break;

            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
 80acd0e:	a905      	add	r1, sp, #20
 80acd10:	2201      	movs	r2, #1
 80acd12:	4608      	mov	r0, r1
 80acd14:	f7fc fe47 	bl	80a99a6 <mbedtls_mpi_add_int>
 80acd18:	4604      	mov	r4, r0
 80acd1a:	b9c8      	cbnz	r0, 80acd50 <mbedtls_rsa_deduce_primes+0x198>
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );
 80acd1c:	4632      	mov	r2, r6
 80acd1e:	a905      	add	r1, sp, #20
 80acd20:	4638      	mov	r0, r7
 80acd22:	f7fd faf9 	bl	80aa318 <mbedtls_mpi_gcd>
 80acd26:	4604      	mov	r4, r0
 80acd28:	b990      	cbnz	r0, 80acd50 <mbedtls_rsa_deduce_primes+0x198>

            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 80acd2a:	2101      	movs	r1, #1
 80acd2c:	4638      	mov	r0, r7
 80acd2e:	f7fc fd47 	bl	80a97c0 <mbedtls_mpi_cmp_int>
 80acd32:	2801      	cmp	r0, #1
 80acd34:	d117      	bne.n	80acd66 <mbedtls_rsa_deduce_primes+0x1ae>
                mbedtls_mpi_cmp_mpi( P, N ) == -1 )
 80acd36:	4631      	mov	r1, r6
 80acd38:	4638      	mov	r0, r7
 80acd3a:	f7fc fcfc 	bl	80a9736 <mbedtls_mpi_cmp_mpi>
                break;

            MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( &K, &K, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( P, &K, N ) );

            if( mbedtls_mpi_cmp_int( P, 1 ) ==  1 &&
 80acd3e:	3001      	adds	r0, #1
 80acd40:	d111      	bne.n	80acd66 <mbedtls_rsa_deduce_primes+0x1ae>
                /*
                 * Have found a nontrivial divisor P of N.
                 * Set Q := N / P.
                 */

                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
 80acd42:	4621      	mov	r1, r4
 80acd44:	463b      	mov	r3, r7
 80acd46:	4632      	mov	r2, r6
 80acd48:	4648      	mov	r0, r9
 80acd4a:	f7fc fed4 	bl	80a9af6 <mbedtls_mpi_div_mpi>
 80acd4e:	4604      	mov	r4, r0

    ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;

cleanup:

    mbedtls_mpi_free( &K );
 80acd50:	a805      	add	r0, sp, #20
 80acd52:	f7fc fa92 	bl	80a927a <mbedtls_mpi_free>
    mbedtls_mpi_free( &T );
 80acd56:	a802      	add	r0, sp, #8
 80acd58:	f7fc fa8f 	bl	80a927a <mbedtls_mpi_free>
    return( ret );
 80acd5c:	4620      	mov	r0, r4
 80acd5e:	e021      	b.n	80acda4 <mbedtls_rsa_deduce_primes+0x1ec>
        mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
        mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
        mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
    {
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 80acd60:	f06f 0003 	mvn.w	r0, #3
 80acd64:	e01e      	b.n	80acda4 <mbedtls_rsa_deduce_primes+0x1ec>

                MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( Q, NULL, N, P ) );
                goto cleanup;
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 80acd66:	a905      	add	r1, sp, #20
 80acd68:	2201      	movs	r2, #1
 80acd6a:	4608      	mov	r0, r1
 80acd6c:	f7fc fe31 	bl	80a99d2 <mbedtls_mpi_sub_int>
 80acd70:	4604      	mov	r4, r0
 80acd72:	2800      	cmp	r0, #0
 80acd74:	d1ec      	bne.n	80acd50 <mbedtls_rsa_deduce_primes+0x198>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &K ) );
 80acd76:	aa05      	add	r2, sp, #20
 80acd78:	4611      	mov	r1, r2
 80acd7a:	4610      	mov	r0, r2
 80acd7c:	f7fc fe3f 	bl	80a99fe <mbedtls_mpi_mul_mpi>
 80acd80:	4604      	mov	r4, r0
 80acd82:	2800      	cmp	r0, #0
 80acd84:	d1e4      	bne.n	80acd50 <mbedtls_rsa_deduce_primes+0x198>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, N ) );
 80acd86:	a905      	add	r1, sp, #20
 80acd88:	4632      	mov	r2, r6
 80acd8a:	4608      	mov	r0, r1
 80acd8c:	f7fd f873 	bl	80a9e76 <mbedtls_mpi_mod_mpi>
 80acd90:	4604      	mov	r4, r0
 80acd92:	2800      	cmp	r0, #0
 80acd94:	d1dc      	bne.n	80acd50 <mbedtls_rsa_deduce_primes+0x198>
         * and check whether they have nontrivial GCD with N. */
        MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &K, &K, &T, N,
                             Q /* temporarily use Q for storing Montgomery
                                * multiplication helper values */ ) );

        for( iter = 1; iter <= order; ++iter )
 80acd96:	f108 0801 	add.w	r8, r8, #1
 80acd9a:	fa1f f888 	uxth.w	r8, r8
 80acd9e:	45c2      	cmp	sl, r8
 80acda0:	d2a9      	bcs.n	80accf6 <mbedtls_rsa_deduce_primes+0x13e>
 80acda2:	e7ad      	b.n	80acd00 <mbedtls_rsa_deduce_primes+0x148>
cleanup:

    mbedtls_mpi_free( &K );
    mbedtls_mpi_free( &T );
    return( ret );
}
 80acda4:	b016      	add	sp, #88	; 0x58
 80acda6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80acdaa:	bf00      	nop
 80acdac:	080b1307 	.word	0x080b1307

080acdb0 <mbedtls_rsa_deduce_private_exponent>:
 */
int mbedtls_rsa_deduce_private_exponent( mbedtls_mpi const *P,
                                         mbedtls_mpi const *Q,
                                         mbedtls_mpi const *E,
                                         mbedtls_mpi *D )
{
 80acdb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80acdb4:	4604      	mov	r4, r0
 80acdb6:	b086      	sub	sp, #24
 80acdb8:	460e      	mov	r6, r1
 80acdba:	4617      	mov	r7, r2
    int ret = 0;
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
 80acdbc:	461d      	mov	r5, r3
 80acdbe:	b18b      	cbz	r3, 80acde4 <mbedtls_rsa_deduce_private_exponent+0x34>
 80acdc0:	2100      	movs	r1, #0
 80acdc2:	4618      	mov	r0, r3
 80acdc4:	f7fc fcfc 	bl	80a97c0 <mbedtls_mpi_cmp_int>
 80acdc8:	4680      	mov	r8, r0
 80acdca:	b958      	cbnz	r0, 80acde4 <mbedtls_rsa_deduce_private_exponent+0x34>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 80acdcc:	2101      	movs	r1, #1
 80acdce:	4620      	mov	r0, r4
 80acdd0:	f7fc fcf6 	bl	80a97c0 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 80acdd4:	2800      	cmp	r0, #0
 80acdd6:	dd05      	ble.n	80acde4 <mbedtls_rsa_deduce_private_exponent+0x34>
 80acdd8:	2101      	movs	r1, #1
 80acdda:	4630      	mov	r0, r6
 80acddc:	f7fc fcf0 	bl	80a97c0 <mbedtls_mpi_cmp_int>
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 80acde0:	2800      	cmp	r0, #0
 80acde2:	dc02      	bgt.n	80acdea <mbedtls_rsa_deduce_private_exponent+0x3a>
{
    int ret = 0;
    mbedtls_mpi K, L;

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 80acde4:	f06f 0003 	mvn.w	r0, #3
 80acde8:	e03c      	b.n	80ace64 <mbedtls_rsa_deduce_private_exponent+0xb4>

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
        mbedtls_mpi_cmp_int( E, 0 ) == 0 )
 80acdea:	4641      	mov	r1, r8
 80acdec:	4638      	mov	r0, r7
 80acdee:	f7fc fce7 	bl	80a97c0 <mbedtls_mpi_cmp_int>

    if( D == NULL || mbedtls_mpi_cmp_int( D, 0 ) != 0 )
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
        mbedtls_mpi_cmp_int( Q, 1 ) <= 0 ||
 80acdf2:	2800      	cmp	r0, #0
 80acdf4:	d0f6      	beq.n	80acde4 <mbedtls_rsa_deduce_private_exponent+0x34>
        mbedtls_mpi_cmp_int( E, 0 ) == 0 )
    {
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    }

    mbedtls_mpi_init( &K );
 80acdf6:	4668      	mov	r0, sp
 80acdf8:	f7fc fa38 	bl	80a926c <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 80acdfc:	a803      	add	r0, sp, #12
 80acdfe:	f7fc fa35 	bl	80a926c <mbedtls_mpi_init>

    /* Temporarily put K := P-1 and L := Q-1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 80ace02:	4621      	mov	r1, r4
 80ace04:	2201      	movs	r2, #1
 80ace06:	4668      	mov	r0, sp
 80ace08:	f7fc fde3 	bl	80a99d2 <mbedtls_mpi_sub_int>
 80ace0c:	4604      	mov	r4, r0
 80ace0e:	bb10      	cbnz	r0, 80ace56 <mbedtls_rsa_deduce_private_exponent+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 80ace10:	2201      	movs	r2, #1
 80ace12:	4631      	mov	r1, r6
 80ace14:	a803      	add	r0, sp, #12
 80ace16:	f7fc fddc 	bl	80a99d2 <mbedtls_mpi_sub_int>
 80ace1a:	4604      	mov	r4, r0
 80ace1c:	b9d8      	cbnz	r0, 80ace56 <mbedtls_rsa_deduce_private_exponent+0xa6>

    /* Temporarily put D := gcd(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( D, &K, &L ) );
 80ace1e:	aa03      	add	r2, sp, #12
 80ace20:	4669      	mov	r1, sp
 80ace22:	4628      	mov	r0, r5
 80ace24:	f7fd fa78 	bl	80aa318 <mbedtls_mpi_gcd>
 80ace28:	4604      	mov	r4, r0
 80ace2a:	b9a0      	cbnz	r0, 80ace56 <mbedtls_rsa_deduce_private_exponent+0xa6>

    /* K := LCM(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, &K, &L ) );
 80ace2c:	aa03      	add	r2, sp, #12
 80ace2e:	4669      	mov	r1, sp
 80ace30:	4668      	mov	r0, sp
 80ace32:	f7fc fde4 	bl	80a99fe <mbedtls_mpi_mul_mpi>
 80ace36:	4604      	mov	r4, r0
 80ace38:	b968      	cbnz	r0, 80ace56 <mbedtls_rsa_deduce_private_exponent+0xa6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &K, NULL, &K, D ) );
 80ace3a:	4601      	mov	r1, r0
 80ace3c:	462b      	mov	r3, r5
 80ace3e:	466a      	mov	r2, sp
 80ace40:	4668      	mov	r0, sp
 80ace42:	f7fc fe58 	bl	80a9af6 <mbedtls_mpi_div_mpi>
 80ace46:	4604      	mov	r4, r0
 80ace48:	b928      	cbnz	r0, 80ace56 <mbedtls_rsa_deduce_private_exponent+0xa6>

    /* Compute modular inverse of E in LCM(P-1, Q-1) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( D, E, &K ) );
 80ace4a:	466a      	mov	r2, sp
 80ace4c:	4639      	mov	r1, r7
 80ace4e:	4628      	mov	r0, r5
 80ace50:	f7fd fb0a 	bl	80aa468 <mbedtls_mpi_inv_mod>
 80ace54:	4604      	mov	r4, r0

cleanup:

    mbedtls_mpi_free( &K );
 80ace56:	4668      	mov	r0, sp
 80ace58:	f7fc fa0f 	bl	80a927a <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 80ace5c:	a803      	add	r0, sp, #12
 80ace5e:	f7fc fa0c 	bl	80a927a <mbedtls_mpi_free>

    return( ret );
 80ace62:	4620      	mov	r0, r4
}
 80ace64:	b006      	add	sp, #24
 80ace66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080ace6c <mbedtls_rsa_validate_crt>:
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 80ace6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80ace70:	4699      	mov	r9, r3
 80ace72:	b087      	sub	sp, #28
 80ace74:	4604      	mov	r4, r0
    int ret = 0;

    mbedtls_mpi K, L;
    mbedtls_mpi_init( &K );
 80ace76:	4668      	mov	r0, sp
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 80ace78:	460d      	mov	r5, r1
 80ace7a:	4690      	mov	r8, r2
 80ace7c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80ace7e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    int ret = 0;

    mbedtls_mpi K, L;
    mbedtls_mpi_init( &K );
 80ace80:	f7fc f9f4 	bl	80a926c <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 80ace84:	a803      	add	r0, sp, #12
 80ace86:	f7fc f9f1 	bl	80a926c <mbedtls_mpi_init>

    /* Check that DP - D == 0 mod P - 1 */
    if( DP != NULL )
 80ace8a:	f1b9 0f00 	cmp.w	r9, #0
 80ace8e:	d101      	bne.n	80ace94 <mbedtls_rsa_validate_crt+0x28>
            goto cleanup;
        }
    }

    /* Check that DQ - D == 0 mod Q - 1 */
    if( DQ != NULL )
 80ace90:	b9f7      	cbnz	r7, 80aced0 <mbedtls_rsa_validate_crt+0x64>
 80ace92:	e035      	b.n	80acf00 <mbedtls_rsa_validate_crt+0x94>
    mbedtls_mpi_init( &L );

    /* Check that DP - D == 0 mod P - 1 */
    if( DP != NULL )
    {
        if( P == NULL )
 80ace94:	2c00      	cmp	r4, #0
 80ace96:	d058      	beq.n	80acf4a <mbedtls_rsa_validate_crt+0xde>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1 ) );
 80ace98:	2201      	movs	r2, #1
 80ace9a:	4621      	mov	r1, r4
 80ace9c:	4668      	mov	r0, sp
 80ace9e:	f7fc fd98 	bl	80a99d2 <mbedtls_mpi_sub_int>
 80acea2:	2800      	cmp	r0, #0
 80acea4:	d148      	bne.n	80acf38 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DP, D ) );
 80acea6:	4642      	mov	r2, r8
 80acea8:	4649      	mov	r1, r9
 80aceaa:	a803      	add	r0, sp, #12
 80aceac:	f7fc fd59 	bl	80a9962 <mbedtls_mpi_sub_mpi>
 80aceb0:	2800      	cmp	r0, #0
 80aceb2:	d141      	bne.n	80acf38 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 80aceb4:	a903      	add	r1, sp, #12
 80aceb6:	466a      	mov	r2, sp
 80aceb8:	4608      	mov	r0, r1
 80aceba:	f7fc ffdc 	bl	80a9e76 <mbedtls_mpi_mod_mpi>
 80acebe:	2800      	cmp	r0, #0
 80acec0:	d13a      	bne.n	80acf38 <mbedtls_rsa_validate_crt+0xcc>

        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 80acec2:	4601      	mov	r1, r0
 80acec4:	a803      	add	r0, sp, #12
 80acec6:	f7fc fc7b 	bl	80a97c0 <mbedtls_mpi_cmp_int>
 80aceca:	2800      	cmp	r0, #0
 80acecc:	d13f      	bne.n	80acf4e <mbedtls_rsa_validate_crt+0xe2>
 80acece:	e7df      	b.n	80ace90 <mbedtls_rsa_validate_crt+0x24>
    }

    /* Check that DQ - D == 0 mod Q - 1 */
    if( DQ != NULL )
    {
        if( Q == NULL )
 80aced0:	b3dd      	cbz	r5, 80acf4a <mbedtls_rsa_validate_crt+0xde>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1 ) );
 80aced2:	2201      	movs	r2, #1
 80aced4:	4629      	mov	r1, r5
 80aced6:	4668      	mov	r0, sp
 80aced8:	f7fc fd7b 	bl	80a99d2 <mbedtls_mpi_sub_int>
 80acedc:	bb60      	cbnz	r0, 80acf38 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &L, DQ, D ) );
 80acede:	4642      	mov	r2, r8
 80acee0:	4639      	mov	r1, r7
 80acee2:	a803      	add	r0, sp, #12
 80acee4:	f7fc fd3d 	bl	80a9962 <mbedtls_mpi_sub_mpi>
 80acee8:	bb30      	cbnz	r0, 80acf38 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &L, &L, &K ) );
 80aceea:	a903      	add	r1, sp, #12
 80aceec:	466a      	mov	r2, sp
 80aceee:	4608      	mov	r0, r1
 80acef0:	f7fc ffc1 	bl	80a9e76 <mbedtls_mpi_mod_mpi>
 80acef4:	bb00      	cbnz	r0, 80acf38 <mbedtls_rsa_validate_crt+0xcc>

        if( mbedtls_mpi_cmp_int( &L, 0 ) != 0 )
 80acef6:	4601      	mov	r1, r0
 80acef8:	a803      	add	r0, sp, #12
 80acefa:	f7fc fc61 	bl	80a97c0 <mbedtls_mpi_cmp_int>
 80acefe:	bb30      	cbnz	r0, 80acf4e <mbedtls_rsa_validate_crt+0xe2>
            goto cleanup;
        }
    }

    /* Check that QP * Q - 1 == 0 mod P */
    if( QP != NULL )
 80acf00:	b1c6      	cbz	r6, 80acf34 <mbedtls_rsa_validate_crt+0xc8>
    {
        if( P == NULL || Q == NULL )
 80acf02:	b314      	cbz	r4, 80acf4a <mbedtls_rsa_validate_crt+0xde>
 80acf04:	b30d      	cbz	r5, 80acf4a <mbedtls_rsa_validate_crt+0xde>
        {
            ret = MBEDTLS_ERR_RSA_BAD_INPUT_DATA;
            goto cleanup;
        }

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, QP, Q ) );
 80acf06:	462a      	mov	r2, r5
 80acf08:	4631      	mov	r1, r6
 80acf0a:	4668      	mov	r0, sp
 80acf0c:	f7fc fd77 	bl	80a99fe <mbedtls_mpi_mul_mpi>
 80acf10:	b990      	cbnz	r0, 80acf38 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 80acf12:	2201      	movs	r2, #1
 80acf14:	4669      	mov	r1, sp
 80acf16:	4668      	mov	r0, sp
 80acf18:	f7fc fd5b 	bl	80a99d2 <mbedtls_mpi_sub_int>
 80acf1c:	b960      	cbnz	r0, 80acf38 <mbedtls_rsa_validate_crt+0xcc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, P ) );
 80acf1e:	4622      	mov	r2, r4
 80acf20:	4669      	mov	r1, sp
 80acf22:	4668      	mov	r0, sp
 80acf24:	f7fc ffa7 	bl	80a9e76 <mbedtls_mpi_mod_mpi>
 80acf28:	b930      	cbnz	r0, 80acf38 <mbedtls_rsa_validate_crt+0xcc>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 80acf2a:	4601      	mov	r1, r0
 80acf2c:	4668      	mov	r0, sp
 80acf2e:	f7fc fc47 	bl	80a97c0 <mbedtls_mpi_cmp_int>
 80acf32:	b960      	cbnz	r0, 80acf4e <mbedtls_rsa_validate_crt+0xe2>
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 80acf34:	2400      	movs	r4, #0
 80acf36:	e00b      	b.n	80acf50 <mbedtls_rsa_validate_crt+0xe4>
    }

cleanup:

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 &&
 80acf38:	f510 4f84 	cmn.w	r0, #16896	; 0x4200
 80acf3c:	d007      	beq.n	80acf4e <mbedtls_rsa_validate_crt+0xe2>
        ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED &&
 80acf3e:	f510 4f81 	cmn.w	r0, #16512	; 0x4080
 80acf42:	d002      	beq.n	80acf4a <mbedtls_rsa_validate_crt+0xde>
        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 80acf44:	f5a0 4484 	sub.w	r4, r0, #16896	; 0x4200
 80acf48:	e002      	b.n	80acf50 <mbedtls_rsa_validate_crt+0xe4>
 * Check that RSA CRT parameters are in accordance with core parameters.
 */
int mbedtls_rsa_validate_crt( const mbedtls_mpi *P,  const mbedtls_mpi *Q,
                              const mbedtls_mpi *D,  const mbedtls_mpi *DP,
                              const mbedtls_mpi *DQ, const mbedtls_mpi *QP )
{
 80acf4a:	4c06      	ldr	r4, [pc, #24]	; (80acf64 <mbedtls_rsa_validate_crt+0xf8>)
 80acf4c:	e000      	b.n	80acf50 <mbedtls_rsa_validate_crt+0xe4>
 80acf4e:	4c06      	ldr	r4, [pc, #24]	; (80acf68 <mbedtls_rsa_validate_crt+0xfc>)
        ret != MBEDTLS_ERR_RSA_BAD_INPUT_DATA )
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
    }

    mbedtls_mpi_free( &K );
 80acf50:	4668      	mov	r0, sp
 80acf52:	f7fc f992 	bl	80a927a <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 80acf56:	a803      	add	r0, sp, #12
 80acf58:	f7fc f98f 	bl	80a927a <mbedtls_mpi_free>

    return( ret );
}
 80acf5c:	4620      	mov	r0, r4
 80acf5e:	b007      	add	sp, #28
 80acf60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80acf64:	ffffbf80 	.word	0xffffbf80
 80acf68:	ffffbe00 	.word	0xffffbe00

080acf6c <mbedtls_rsa_validate_params>:
int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,
                                 const mbedtls_mpi *E,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
 80acf6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80acf70:	4688      	mov	r8, r1
 80acf72:	b087      	sub	sp, #28
 80acf74:	4605      	mov	r5, r0
    int ret = 0;
    mbedtls_mpi K, L;

    mbedtls_mpi_init( &K );
 80acf76:	4668      	mov	r0, sp
int mbedtls_rsa_validate_params( const mbedtls_mpi *N, const mbedtls_mpi *P,
                                 const mbedtls_mpi *Q, const mbedtls_mpi *D,
                                 const mbedtls_mpi *E,
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng )
{
 80acf78:	4691      	mov	r9, r2
 80acf7a:	461e      	mov	r6, r3
 80acf7c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    int ret = 0;
    mbedtls_mpi K, L;

    mbedtls_mpi_init( &K );
 80acf7e:	f7fc f975 	bl	80a926c <mbedtls_mpi_init>
    mbedtls_mpi_init( &L );
 80acf82:	a803      	add	r0, sp, #12
 80acf84:	f7fc f972 	bl	80a926c <mbedtls_mpi_init>

    /*
     * Step 2: Check that 1 < N = P * Q
     */

    if( P != NULL && Q != NULL && N != NULL )
 80acf88:	f1b8 0f00 	cmp.w	r8, #0
 80acf8c:	d018      	beq.n	80acfc0 <mbedtls_rsa_validate_params+0x54>
 80acf8e:	f1b9 0f00 	cmp.w	r9, #0
 80acf92:	d015      	beq.n	80acfc0 <mbedtls_rsa_validate_params+0x54>
 80acf94:	b90d      	cbnz	r5, 80acf9a <mbedtls_rsa_validate_params+0x2e>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 80acf96:	b9de      	cbnz	r6, 80acfd0 <mbedtls_rsa_validate_params+0x64>
 80acf98:	e018      	b.n	80acfcc <mbedtls_rsa_validate_params+0x60>
     * Step 2: Check that 1 < N = P * Q
     */

    if( P != NULL && Q != NULL && N != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
 80acf9a:	464a      	mov	r2, r9
 80acf9c:	4641      	mov	r1, r8
 80acf9e:	4668      	mov	r0, sp
 80acfa0:	f7fc fd2d 	bl	80a99fe <mbedtls_mpi_mul_mpi>
 80acfa4:	4604      	mov	r4, r0
 80acfa6:	bb68      	cbnz	r0, 80ad004 <mbedtls_rsa_validate_params+0x98>
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 80acfa8:	2101      	movs	r1, #1
 80acfaa:	4628      	mov	r0, r5
 80acfac:	f7fc fc08 	bl	80a97c0 <mbedtls_mpi_cmp_int>
 80acfb0:	2800      	cmp	r0, #0
 80acfb2:	dd26      	ble.n	80ad002 <mbedtls_rsa_validate_params+0x96>
            mbedtls_mpi_cmp_mpi( &K, N ) != 0 )
 80acfb4:	4629      	mov	r1, r5
 80acfb6:	4668      	mov	r0, sp
 80acfb8:	f7fc fbbd 	bl	80a9736 <mbedtls_mpi_cmp_mpi>
     */

    if( P != NULL && Q != NULL && N != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, P, Q ) );
        if( mbedtls_mpi_cmp_int( N, 1 )  <= 0 ||
 80acfbc:	bb08      	cbnz	r0, 80ad002 <mbedtls_rsa_validate_params+0x96>
 80acfbe:	e016      	b.n	80acfee <mbedtls_rsa_validate_params+0x82>

    /*
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
 80acfc0:	b125      	cbz	r5, 80acfcc <mbedtls_rsa_validate_params+0x60>
 80acfc2:	b9b6      	cbnz	r6, 80acff2 <mbedtls_rsa_validate_params+0x86>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 80acfc4:	f1b8 0f00 	cmp.w	r8, #0
 80acfc8:	f040 808a 	bne.w	80ad0e0 <mbedtls_rsa_validate_params+0x174>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 80acfcc:	2400      	movs	r4, #0
 80acfce:	e019      	b.n	80ad004 <mbedtls_rsa_validate_params+0x98>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 80acfd0:	2f00      	cmp	r7, #0
 80acfd2:	d0fb      	beq.n	80acfcc <mbedtls_rsa_validate_params+0x60>
    {
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 80acfd4:	2101      	movs	r1, #1
 80acfd6:	4640      	mov	r0, r8
 80acfd8:	f7fc fbf2 	bl	80a97c0 <mbedtls_mpi_cmp_int>
 80acfdc:	2800      	cmp	r0, #0
 80acfde:	dd10      	ble.n	80ad002 <mbedtls_rsa_validate_params+0x96>
            mbedtls_mpi_cmp_int( Q, 1 ) <= 0 )
 80acfe0:	2101      	movs	r1, #1
 80acfe2:	4648      	mov	r0, r9
 80acfe4:	f7fc fbec 	bl	80a97c0 <mbedtls_mpi_cmp_int>
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
    {
        if( mbedtls_mpi_cmp_int( P, 1 ) <= 0 ||
 80acfe8:	2800      	cmp	r0, #0
 80acfea:	dc19      	bgt.n	80ad020 <mbedtls_rsa_validate_params+0xb4>
 80acfec:	e009      	b.n	80ad002 <mbedtls_rsa_validate_params+0x96>

    /*
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
 80acfee:	2e00      	cmp	r6, #0
 80acff0:	d0ec      	beq.n	80acfcc <mbedtls_rsa_validate_params+0x60>
 80acff2:	2f00      	cmp	r7, #0
 80acff4:	d0e6      	beq.n	80acfc4 <mbedtls_rsa_validate_params+0x58>
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 80acff6:	2101      	movs	r1, #1
 80acff8:	4630      	mov	r0, r6
 80acffa:	f7fc fbe1 	bl	80a97c0 <mbedtls_mpi_cmp_int>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 80acffe:	2800      	cmp	r0, #0
 80ad000:	dc5b      	bgt.n	80ad0ba <mbedtls_rsa_validate_params+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
        {
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 80ad002:	4c3c      	ldr	r4, [pc, #240]	; (80ad0f4 <mbedtls_rsa_validate_params+0x188>)
        }
    }

cleanup:

    mbedtls_mpi_free( &K );
 80ad004:	4668      	mov	r0, sp
 80ad006:	f7fc f938 	bl	80a927a <mbedtls_mpi_free>
    mbedtls_mpi_free( &L );
 80ad00a:	a803      	add	r0, sp, #12
 80ad00c:	f7fc f935 	bl	80a927a <mbedtls_mpi_free>

    /* Wrap MPI error codes by RSA check failure error code */
    if( ret != 0 && ret != MBEDTLS_ERR_RSA_KEY_CHECK_FAILED )
 80ad010:	2c00      	cmp	r4, #0
 80ad012:	d06a      	beq.n	80ad0ea <mbedtls_rsa_validate_params+0x17e>
 80ad014:	f514 4f84 	cmn.w	r4, #16896	; 0x4200
 80ad018:	d067      	beq.n	80ad0ea <mbedtls_rsa_validate_params+0x17e>
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 80ad01a:	f5a4 4484 	sub.w	r4, r4, #16896	; 0x4200
    }

    return( ret );
 80ad01e:	e064      	b.n	80ad0ea <mbedtls_rsa_validate_params+0x17e>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
            goto cleanup;
        }

        /* Compute DE-1 mod P-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 80ad020:	463a      	mov	r2, r7
 80ad022:	4631      	mov	r1, r6
 80ad024:	4668      	mov	r0, sp
 80ad026:	f7fc fcea 	bl	80a99fe <mbedtls_mpi_mul_mpi>
 80ad02a:	4604      	mov	r4, r0
 80ad02c:	2800      	cmp	r0, #0
 80ad02e:	d1e9      	bne.n	80ad004 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 80ad030:	2201      	movs	r2, #1
 80ad032:	4669      	mov	r1, sp
 80ad034:	4668      	mov	r0, sp
 80ad036:	f7fc fccc 	bl	80a99d2 <mbedtls_mpi_sub_int>
 80ad03a:	4604      	mov	r4, r0
 80ad03c:	2800      	cmp	r0, #0
 80ad03e:	d1e1      	bne.n	80ad004 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, P, 1 ) );
 80ad040:	2201      	movs	r2, #1
 80ad042:	4641      	mov	r1, r8
 80ad044:	a803      	add	r0, sp, #12
 80ad046:	f7fc fcc4 	bl	80a99d2 <mbedtls_mpi_sub_int>
 80ad04a:	4604      	mov	r4, r0
 80ad04c:	2800      	cmp	r0, #0
 80ad04e:	d1d9      	bne.n	80ad004 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 80ad050:	aa03      	add	r2, sp, #12
 80ad052:	4669      	mov	r1, sp
 80ad054:	4668      	mov	r0, sp
 80ad056:	f7fc ff0e 	bl	80a9e76 <mbedtls_mpi_mod_mpi>
 80ad05a:	4604      	mov	r4, r0
 80ad05c:	2800      	cmp	r0, #0
 80ad05e:	d1d1      	bne.n	80ad004 <mbedtls_rsa_validate_params+0x98>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 80ad060:	4601      	mov	r1, r0
 80ad062:	4668      	mov	r0, sp
 80ad064:	f7fc fbac 	bl	80a97c0 <mbedtls_mpi_cmp_int>
 80ad068:	2800      	cmp	r0, #0
 80ad06a:	d1ca      	bne.n	80ad002 <mbedtls_rsa_validate_params+0x96>
            ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
            goto cleanup;
        }

        /* Compute DE-1 mod Q-1 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &K, D, E ) );
 80ad06c:	463a      	mov	r2, r7
 80ad06e:	4631      	mov	r1, r6
 80ad070:	4668      	mov	r0, sp
 80ad072:	f7fc fcc4 	bl	80a99fe <mbedtls_mpi_mul_mpi>
 80ad076:	4604      	mov	r4, r0
 80ad078:	2800      	cmp	r0, #0
 80ad07a:	d1c3      	bne.n	80ad004 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, &K, 1 ) );
 80ad07c:	2201      	movs	r2, #1
 80ad07e:	4669      	mov	r1, sp
 80ad080:	4668      	mov	r0, sp
 80ad082:	f7fc fca6 	bl	80a99d2 <mbedtls_mpi_sub_int>
 80ad086:	4604      	mov	r4, r0
 80ad088:	2800      	cmp	r0, #0
 80ad08a:	d1bb      	bne.n	80ad004 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &L, Q, 1 ) );
 80ad08c:	2201      	movs	r2, #1
 80ad08e:	4649      	mov	r1, r9
 80ad090:	a803      	add	r0, sp, #12
 80ad092:	f7fc fc9e 	bl	80a99d2 <mbedtls_mpi_sub_int>
 80ad096:	4604      	mov	r4, r0
 80ad098:	2800      	cmp	r0, #0
 80ad09a:	d1b3      	bne.n	80ad004 <mbedtls_rsa_validate_params+0x98>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &K, &K, &L ) );
 80ad09c:	aa03      	add	r2, sp, #12
 80ad09e:	4669      	mov	r1, sp
 80ad0a0:	4668      	mov	r0, sp
 80ad0a2:	f7fc fee8 	bl	80a9e76 <mbedtls_mpi_mod_mpi>
 80ad0a6:	4604      	mov	r4, r0
 80ad0a8:	2800      	cmp	r0, #0
 80ad0aa:	d1ab      	bne.n	80ad004 <mbedtls_rsa_validate_params+0x98>
        if( mbedtls_mpi_cmp_int( &K, 0 ) != 0 )
 80ad0ac:	4601      	mov	r1, r0
 80ad0ae:	4668      	mov	r0, sp
 80ad0b0:	f7fc fb86 	bl	80a97c0 <mbedtls_mpi_cmp_int>
 80ad0b4:	2800      	cmp	r0, #0
 80ad0b6:	d089      	beq.n	80acfcc <mbedtls_rsa_validate_params+0x60>
 80ad0b8:	e7a3      	b.n	80ad002 <mbedtls_rsa_validate_params+0x96>
     */

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 80ad0ba:	2101      	movs	r1, #1
 80ad0bc:	4638      	mov	r0, r7
 80ad0be:	f7fc fb7f 	bl	80a97c0 <mbedtls_mpi_cmp_int>
     * Step 3: Check and 1 < D, E < N if present.
     */

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
 80ad0c2:	2800      	cmp	r0, #0
 80ad0c4:	dd9d      	ble.n	80ad002 <mbedtls_rsa_validate_params+0x96>
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 80ad0c6:	4629      	mov	r1, r5
 80ad0c8:	4630      	mov	r0, r6
 80ad0ca:	f7fc fb34 	bl	80a9736 <mbedtls_mpi_cmp_mpi>
     */

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
 80ad0ce:	2800      	cmp	r0, #0
 80ad0d0:	da97      	bge.n	80ad002 <mbedtls_rsa_validate_params+0x96>
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
             mbedtls_mpi_cmp_mpi( E, N ) >= 0 )
 80ad0d2:	4629      	mov	r1, r5
 80ad0d4:	4638      	mov	r0, r7
 80ad0d6:	f7fc fb2e 	bl	80a9736 <mbedtls_mpi_cmp_mpi>

    if( N != NULL && D != NULL && E != NULL )
    {
        if ( mbedtls_mpi_cmp_int( D, 1 ) <= 0 ||
             mbedtls_mpi_cmp_int( E, 1 ) <= 0 ||
             mbedtls_mpi_cmp_mpi( D, N ) >= 0 ||
 80ad0da:	2800      	cmp	r0, #0
 80ad0dc:	da91      	bge.n	80ad002 <mbedtls_rsa_validate_params+0x96>
 80ad0de:	e771      	b.n	80acfc4 <mbedtls_rsa_validate_params+0x58>

    /*
     * Step 4: Check that D, E are inverse modulo P-1 and Q-1
     */

    if( P != NULL && Q != NULL && D != NULL && E != NULL )
 80ad0e0:	f1b9 0f00 	cmp.w	r9, #0
 80ad0e4:	f47f af57 	bne.w	80acf96 <mbedtls_rsa_validate_params+0x2a>
 80ad0e8:	e770      	b.n	80acfcc <mbedtls_rsa_validate_params+0x60>
    {
        ret += MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
    }

    return( ret );
}
 80ad0ea:	4620      	mov	r0, r4
 80ad0ec:	b007      	add	sp, #28
 80ad0ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80ad0f2:	bf00      	nop
 80ad0f4:	ffffbe00 	.word	0xffffbe00

080ad0f8 <mbedtls_rsa_deduce_crt>:

int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
                            const mbedtls_mpi *D, mbedtls_mpi *DP,
                            mbedtls_mpi *DQ, mbedtls_mpi *QP )
{
 80ad0f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80ad0fc:	469a      	mov	sl, r3
 80ad0fe:	4607      	mov	r7, r0
    int ret = 0;
    mbedtls_mpi K;
    mbedtls_mpi_init( &K );
 80ad100:	a801      	add	r0, sp, #4
}

int mbedtls_rsa_deduce_crt( const mbedtls_mpi *P, const mbedtls_mpi *Q,
                            const mbedtls_mpi *D, mbedtls_mpi *DP,
                            mbedtls_mpi *DQ, mbedtls_mpi *QP )
{
 80ad102:	460e      	mov	r6, r1
 80ad104:	4691      	mov	r9, r2
 80ad106:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80ad10a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    int ret = 0;
    mbedtls_mpi K;
    mbedtls_mpi_init( &K );
 80ad10c:	f7fc f8ae 	bl	80a926c <mbedtls_mpi_init>

    /* DP = D mod P-1 */
    if( DP != NULL )
 80ad110:	f1ba 0f00 	cmp.w	sl, #0
 80ad114:	d103      	bne.n	80ad11e <mbedtls_rsa_deduce_crt+0x26>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
    }

    /* DQ = D mod Q-1 */
    if( DQ != NULL )
 80ad116:	f1b8 0f00 	cmp.w	r8, #0
 80ad11a:	d110      	bne.n	80ad13e <mbedtls_rsa_deduce_crt+0x46>
 80ad11c:	e01d      	b.n	80ad15a <mbedtls_rsa_deduce_crt+0x62>
    mbedtls_mpi_init( &K );

    /* DP = D mod P-1 */
    if( DP != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, P, 1  ) );
 80ad11e:	2201      	movs	r2, #1
 80ad120:	4639      	mov	r1, r7
 80ad122:	a801      	add	r0, sp, #4
 80ad124:	f7fc fc55 	bl	80a99d2 <mbedtls_mpi_sub_int>
 80ad128:	4604      	mov	r4, r0
 80ad12a:	b9f8      	cbnz	r0, 80ad16c <mbedtls_rsa_deduce_crt+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DP, D, &K ) );
 80ad12c:	aa01      	add	r2, sp, #4
 80ad12e:	4649      	mov	r1, r9
 80ad130:	4650      	mov	r0, sl
 80ad132:	f7fc fea0 	bl	80a9e76 <mbedtls_mpi_mod_mpi>
 80ad136:	4604      	mov	r4, r0
 80ad138:	2800      	cmp	r0, #0
 80ad13a:	d0ec      	beq.n	80ad116 <mbedtls_rsa_deduce_crt+0x1e>
 80ad13c:	e016      	b.n	80ad16c <mbedtls_rsa_deduce_crt+0x74>
    }

    /* DQ = D mod Q-1 */
    if( DQ != NULL )
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &K, Q, 1  ) );
 80ad13e:	2201      	movs	r2, #1
 80ad140:	4631      	mov	r1, r6
 80ad142:	a801      	add	r0, sp, #4
 80ad144:	f7fc fc45 	bl	80a99d2 <mbedtls_mpi_sub_int>
 80ad148:	4604      	mov	r4, r0
 80ad14a:	b978      	cbnz	r0, 80ad16c <mbedtls_rsa_deduce_crt+0x74>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( DQ, D, &K ) );
 80ad14c:	aa01      	add	r2, sp, #4
 80ad14e:	4649      	mov	r1, r9
 80ad150:	4640      	mov	r0, r8
 80ad152:	f7fc fe90 	bl	80a9e76 <mbedtls_mpi_mod_mpi>
 80ad156:	4604      	mov	r4, r0
 80ad158:	b940      	cbnz	r0, 80ad16c <mbedtls_rsa_deduce_crt+0x74>
    }

    /* QP = Q^{-1} mod P */
    if( QP != NULL )
 80ad15a:	b90d      	cbnz	r5, 80ad160 <mbedtls_rsa_deduce_crt+0x68>
 80ad15c:	462c      	mov	r4, r5
 80ad15e:	e005      	b.n	80ad16c <mbedtls_rsa_deduce_crt+0x74>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( QP, Q, P ) );
 80ad160:	463a      	mov	r2, r7
 80ad162:	4631      	mov	r1, r6
 80ad164:	4628      	mov	r0, r5
 80ad166:	f7fd f97f 	bl	80aa468 <mbedtls_mpi_inv_mod>
 80ad16a:	4604      	mov	r4, r0
    }

cleanup:
    mbedtls_mpi_free( &K );
 80ad16c:	a801      	add	r0, sp, #4
 80ad16e:	f7fc f884 	bl	80a927a <mbedtls_mpi_free>

    return( ret );
}
 80ad172:	4620      	mov	r0, r4
 80ad174:	b004      	add	sp, #16
 80ad176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080ad17a <mbedtls_ssl_own_key>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
static inline mbedtls_pk_context *mbedtls_ssl_own_key( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 80ad17a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80ad17c:	b10b      	cbz	r3, 80ad182 <mbedtls_ssl_own_key+0x8>
 80ad17e:	685b      	ldr	r3, [r3, #4]
 80ad180:	b913      	cbnz	r3, 80ad188 <mbedtls_ssl_own_key+0xe>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
 80ad182:	6803      	ldr	r3, [r0, #0]
 80ad184:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return( key_cert == NULL ? NULL : key_cert->key );
 80ad186:	b10b      	cbz	r3, 80ad18c <mbedtls_ssl_own_key+0x12>
 80ad188:	6858      	ldr	r0, [r3, #4]
 80ad18a:	4770      	bx	lr
 80ad18c:	4618      	mov	r0, r3
}
 80ad18e:	4770      	bx	lr

080ad190 <mbedtls_ssl_handshake_client_step>:

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
 80ad190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 80ad194:	6843      	ldr	r3, [r0, #4]

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
 80ad196:	b095      	sub	sp, #84	; 0x54
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 80ad198:	2b10      	cmp	r3, #16

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
 80ad19a:	4604      	mov	r4, r0
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 80ad19c:	f000 80c1 	beq.w	80ad322 <mbedtls_ssl_handshake_client_step+0x192>
 80ad1a0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80ad1a2:	2b00      	cmp	r3, #0
 80ad1a4:	f000 80bd 	beq.w	80ad322 <mbedtls_ssl_handshake_client_step+0x192>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "client state: %d", ssl->state ) );

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 80ad1a8:	f7fa fe1e 	bl	80a7de8 <mbedtls_ssl_flush_output>
 80ad1ac:	2800      	cmp	r0, #0
 80ad1ae:	f040 8514 	bne.w	80adbda <mbedtls_ssl_handshake_client_step+0xa4a>
#endif

    /* Change state now, so that it is right in mbedtls_ssl_read_record(), used
     * by DTLS for dropping out-of-sequence ChangeCipherSpec records */
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&
 80ad1b2:	6863      	ldr	r3, [r4, #4]
 80ad1b4:	2b0c      	cmp	r3, #12
 80ad1b6:	d105      	bne.n	80ad1c4 <mbedtls_ssl_handshake_client_step+0x34>
        ssl->handshake->new_session_ticket != 0 )
 80ad1b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
#endif

    /* Change state now, so that it is right in mbedtls_ssl_read_record(), used
     * by DTLS for dropping out-of-sequence ChangeCipherSpec records */
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&
 80ad1ba:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 80ad1be:	b10b      	cbz	r3, 80ad1c4 <mbedtls_ssl_handshake_client_step+0x34>
        ssl->handshake->new_session_ticket != 0 )
    {
        ssl->state = MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET;
 80ad1c0:	2311      	movs	r3, #17
 80ad1c2:	6063      	str	r3, [r4, #4]
    }
#endif

    switch( ssl->state )
 80ad1c4:	6860      	ldr	r0, [r4, #4]
 80ad1c6:	2811      	cmp	r0, #17
 80ad1c8:	f200 80ab 	bhi.w	80ad322 <mbedtls_ssl_handshake_client_step+0x192>
 80ad1cc:	e8df f010 	tbh	[pc, r0, lsl #1]
 80ad1d0:	00140012 	.word	0x00140012
 80ad1d4:	00dc004b 	.word	0x00dc004b
 80ad1d8:	010500e1 	.word	0x010500e1
 80ad1dc:	012b0117 	.word	0x012b0117
 80ad1e0:	0190012f 	.word	0x0190012f
 80ad1e4:	020201fe 	.word	0x020201fe
 80ad1e8:	02290225 	.word	0x02290225
 80ad1ec:	022f022d 	.word	0x022f022d
 80ad1f0:	020c00a9 	.word	0x020c00a9
    {
        case MBEDTLS_SSL_HELLO_REQUEST:
            ssl->state = MBEDTLS_SSL_CLIENT_HELLO;
 80ad1f4:	2301      	movs	r3, #1
 80ad1f6:	e0ed      	b.n	80ad3d4 <mbedtls_ssl_handshake_client_step+0x244>
    const int *ciphersuites;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );

    if( ssl->conf->f_rng == NULL )
 80ad1f8:	6821      	ldr	r1, [r4, #0]
 80ad1fa:	698b      	ldr	r3, [r1, #24]
 80ad1fc:	2b00      	cmp	r3, #0
 80ad1fe:	f000 821a 	beq.w	80ad636 <mbedtls_ssl_handshake_client_step+0x4a6>

#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        ssl->major_ver = ssl->conf->min_major_ver;
 80ad202:	f891 305e 	ldrb.w	r3, [r1, #94]	; 0x5e
 80ad206:	60a3      	str	r3, [r4, #8]
        ssl->minor_ver = ssl->conf->min_minor_ver;
 80ad208:	f891 305f 	ldrb.w	r3, [r1, #95]	; 0x5f
 80ad20c:	60e3      	str	r3, [r4, #12]
    }

    if( ssl->conf->max_major_ver == 0 )
 80ad20e:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 80ad212:	2800      	cmp	r0, #0
 80ad214:	f000 8085 	beq.w	80ad322 <mbedtls_ssl_handshake_client_step+0x192>
     */
    buf = ssl->out_msg;
    p = buf + 4;

    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 80ad218:	f891 2060 	ldrb.w	r2, [r1, #96]	; 0x60
     *     1  .   3   handshake length
     *     4  .   5   highest version supported
     *     6  .   9   current UNIX time
     *    10  .  37   random bytes
     */
    buf = ssl->out_msg;
 80ad21c:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
    p = buf + 4;

    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 80ad220:	f3c2 0240 	ubfx	r2, r2, #1, #1
 80ad224:	1d33      	adds	r3, r6, #4
 80ad226:	f891 105d 	ldrb.w	r1, [r1, #93]	; 0x5d
 80ad22a:	f7fb fe21 	bl	80a8e70 <mbedtls_ssl_write_version>
    *p++ = (unsigned char)( t >>  8 );
    *p++ = (unsigned char)( t       );

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, current time: %lu", t ) );
#else
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
 80ad22e:	6823      	ldr	r3, [r4, #0]
 * Generate random bytes for ClientHello
 */
static int ssl_generate_random( mbedtls_ssl_context *ssl )
{
    int ret;
    unsigned char *p = ssl->handshake->randbytes;
 80ad230:	6b25      	ldr	r5, [r4, #48]	; 0x30
    *p++ = (unsigned char)( t >>  8 );
    *p++ = (unsigned char)( t       );

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, current time: %lu", t ) );
#else
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 4 ) ) != 0 )
 80ad232:	699f      	ldr	r7, [r3, #24]
 80ad234:	2204      	movs	r2, #4
 80ad236:	f505 71ba 	add.w	r1, r5, #372	; 0x174
 80ad23a:	69d8      	ldr	r0, [r3, #28]
 80ad23c:	47b8      	blx	r7
 80ad23e:	2800      	cmp	r0, #0
 80ad240:	f040 84cb 	bne.w	80adbda <mbedtls_ssl_handshake_client_step+0xa4a>
        return( ret );

    p += 4;
#endif /* MBEDTLS_HAVE_TIME */

    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 28 ) ) != 0 )
 80ad244:	6823      	ldr	r3, [r4, #0]
 80ad246:	221c      	movs	r2, #28
 80ad248:	699f      	ldr	r7, [r3, #24]
 80ad24a:	f505 71bc 	add.w	r1, r5, #376	; 0x178
 80ad24e:	69d8      	ldr	r0, [r3, #28]
 80ad250:	47b8      	blx	r7
 80ad252:	2800      	cmp	r0, #0
 80ad254:	f040 84c1 	bne.w	80adbda <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_generate_random", ret );
        return( ret );
    }

    memcpy( p, ssl->handshake->randbytes, 32 );
 80ad258:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80ad25a:	1db1      	adds	r1, r6, #6
 80ad25c:	f503 72ba 	add.w	r2, r3, #372	; 0x174
 80ad260:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80ad264:	e1eb      	b.n	80ad63e <mbedtls_ssl_handshake_client_step+0x4ae>

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello" ) );

    buf = ssl->in_msg;

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 80ad266:	4620      	mov	r0, r4
    int handshake_failure = 0;
    const mbedtls_ssl_ciphersuite_t *suite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello" ) );

    buf = ssl->in_msg;
 80ad268:	6e65      	ldr	r5, [r4, #100]	; 0x64

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 80ad26a:	f7fb f819 	bl	80a82a0 <mbedtls_ssl_read_record>
 80ad26e:	2800      	cmp	r0, #0
 80ad270:	f040 84b3 	bne.w	80adbda <mbedtls_ssl_handshake_client_step+0xa4a>
        /* No alert on a read error. */
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 80ad274:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80ad276:	2b16      	cmp	r3, #22
 80ad278:	d006      	beq.n	80ad288 <mbedtls_ssl_handshake_client_step+0xf8>
        }
#endif /* MBEDTLS_SSL_RENEGOTIATION */

        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
 80ad27a:	220a      	movs	r2, #10
 80ad27c:	2102      	movs	r1, #2
 80ad27e:	4620      	mov	r0, r4
 80ad280:	f7fa fefc 	bl	80a807c <mbedtls_ssl_send_alert_message>
 80ad284:	f000 bc5b 	b.w	80adb3e <mbedtls_ssl_handshake_client_step+0x9ae>
            ssl->handshake->verify_cookie_len = 0;
        }
    }
#endif /* MBEDTLS_SSL_PROTO_DTLS */

    if( ssl->in_hslen < 38 + mbedtls_ssl_hs_hdr_len( ssl ) ||
 80ad288:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80ad28a:	2b29      	cmp	r3, #41	; 0x29
 80ad28c:	d938      	bls.n	80ad300 <mbedtls_ssl_handshake_client_step+0x170>
 80ad28e:	782b      	ldrb	r3, [r5, #0]
 80ad290:	2b02      	cmp	r3, #2
 80ad292:	d135      	bne.n	80ad300 <mbedtls_ssl_handshake_client_step+0x170>
     */
    buf += mbedtls_ssl_hs_hdr_len( ssl );

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
                      ssl->conf->transport, buf + 0 );
 80ad294:	4621      	mov	r1, r4
 80ad296:	f851 3b0c 	ldr.w	r3, [r1], #12
     * 37+n . 37+n  compression_method
     *
     * 38+n . 39+n  extensions length (optional)
     * 40+n .  ..   extensions
     */
    buf += mbedtls_ssl_hs_hdr_len( ssl );
 80ad29a:	f105 0804 	add.w	r8, r5, #4

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
                      ssl->conf->transport, buf + 0 );
 80ad29e:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80ad2a2:	f104 0008 	add.w	r0, r4, #8
 80ad2a6:	4643      	mov	r3, r8
 80ad2a8:	f3c2 0240 	ubfx	r2, r2, #1, #1
 80ad2ac:	f7fb fde3 	bl	80a8e76 <mbedtls_ssl_read_version>

    if( ssl->major_ver < ssl->conf->min_major_ver ||
 80ad2b0:	6823      	ldr	r3, [r4, #0]
 80ad2b2:	68a2      	ldr	r2, [r4, #8]
 80ad2b4:	f893 105e 	ldrb.w	r1, [r3, #94]	; 0x5e
 80ad2b8:	428a      	cmp	r2, r1
 80ad2ba:	f2c0 830f 	blt.w	80ad8dc <mbedtls_ssl_handshake_client_step+0x74c>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 80ad2be:	68e1      	ldr	r1, [r4, #12]

    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
                      ssl->conf->transport, buf + 0 );

    if( ssl->major_ver < ssl->conf->min_major_ver ||
 80ad2c0:	f893 005f 	ldrb.w	r0, [r3, #95]	; 0x5f
 80ad2c4:	4281      	cmp	r1, r0
 80ad2c6:	f2c0 8309 	blt.w	80ad8dc <mbedtls_ssl_handshake_client_step+0x74c>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 80ad2ca:	f893 005c 	ldrb.w	r0, [r3, #92]	; 0x5c
 80ad2ce:	4282      	cmp	r2, r0
 80ad2d0:	f300 8304 	bgt.w	80ad8dc <mbedtls_ssl_handshake_client_step+0x74c>
        ssl->major_ver > ssl->conf->max_major_ver ||
 80ad2d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80ad2d8:	4299      	cmp	r1, r3
 80ad2da:	f300 82ff 	bgt.w	80ad8dc <mbedtls_ssl_handshake_client_step+0x74c>
                           ( (uint32_t) buf[2] << 24 ) |
                           ( (uint32_t) buf[3] << 16 ) |
                           ( (uint32_t) buf[4] <<  8 ) |
                           ( (uint32_t) buf[5]       ) ) );

    memcpy( ssl->handshake->randbytes + 32, buf + 2, 32 );
 80ad2de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80ad2e0:	1daa      	adds	r2, r5, #6
 80ad2e2:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80ad2e6:	f105 0126 	add.w	r1, r5, #38	; 0x26
 80ad2ea:	f852 0b04 	ldr.w	r0, [r2], #4
 80ad2ee:	428a      	cmp	r2, r1
 80ad2f0:	f843 0b04 	str.w	r0, [r3], #4
 80ad2f4:	d1f9      	bne.n	80ad2ea <mbedtls_ssl_handshake_client_step+0x15a>

    n = buf[34];
 80ad2f6:	f895 6026 	ldrb.w	r6, [r5, #38]	; 0x26

    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, random bytes", buf + 2, 32 );

    if( n > 32 )
 80ad2fa:	2e20      	cmp	r6, #32
 80ad2fc:	f240 82f5 	bls.w	80ad8ea <mbedtls_ssl_handshake_client_step+0x75a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 80ad300:	2232      	movs	r2, #50	; 0x32
 80ad302:	e03a      	b.n	80ad37a <mbedtls_ssl_handshake_client_step+0x1ea>
    }

    /*
     * Initialize update checksum functions
     */
    ssl->transform_negotiate->ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( i );
 80ad304:	4648      	mov	r0, r9
 80ad306:	f8d4 a040 	ldr.w	sl, [r4, #64]	; 0x40
 80ad30a:	f7f7 fa6d 	bl	80a47e8 <mbedtls_ssl_ciphersuite_from_id>
 80ad30e:	f8ca 0000 	str.w	r0, [sl]

    if( ssl->transform_negotiate->ciphersuite_info == NULL )
 80ad312:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80ad314:	6819      	ldr	r1, [r3, #0]
 80ad316:	b939      	cbnz	r1, 80ad328 <mbedtls_ssl_handshake_client_step+0x198>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ciphersuite info for %04x not found", i ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
 80ad318:	2250      	movs	r2, #80	; 0x50
 80ad31a:	2102      	movs	r1, #2
 80ad31c:	4620      	mov	r0, r4
 80ad31e:	f7fa fead 	bl	80a807c <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 80ad322:	48ae      	ldr	r0, [pc, #696]	; (80ad5dc <mbedtls_ssl_handshake_client_step+0x44c>)
 80ad324:	f000 bc59 	b.w	80adbda <mbedtls_ssl_handshake_client_step+0xa4a>
    }

    mbedtls_ssl_optimize_checksum( ssl, ssl->transform_negotiate->ciphersuite_info );
 80ad328:	4620      	mov	r0, r4
 80ad32a:	f7fb f885 	bl	80a8438 <mbedtls_ssl_optimize_checksum>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
 80ad32e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80ad332:	3527      	adds	r5, #39	; 0x27
 80ad334:	f8da 31e4 	ldr.w	r3, [sl, #484]	; 0x1e4
 80ad338:	2b00      	cmp	r3, #0
 80ad33a:	f040 8311 	bne.w	80ad960 <mbedtls_ssl_handshake_client_step+0x7d0>
        ssl->session_negotiate->ciphersuite != i ||
        ssl->session_negotiate->compression != comp ||
        ssl->session_negotiate->id_len != n ||
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
    {
        ssl->state++;
 80ad33e:	6863      	ldr	r3, [r4, #4]
        ssl->session_negotiate->start = mbedtls_time( NULL );
#endif
        ssl->session_negotiate->ciphersuite = i;
        ssl->session_negotiate->compression = comp;
        ssl->session_negotiate->id_len = n;
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 80ad340:	4629      	mov	r1, r5
        ssl->session_negotiate->ciphersuite != i ||
        ssl->session_negotiate->compression != comp ||
        ssl->session_negotiate->id_len != n ||
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
    {
        ssl->state++;
 80ad342:	3301      	adds	r3, #1
 80ad344:	6063      	str	r3, [r4, #4]
        ssl->handshake->resume = 0;
 80ad346:	2300      	movs	r3, #0
 80ad348:	f8ca 31e4 	str.w	r3, [sl, #484]	; 0x1e4
#if defined(MBEDTLS_HAVE_TIME)
        ssl->session_negotiate->start = mbedtls_time( NULL );
#endif
        ssl->session_negotiate->ciphersuite = i;
 80ad34c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80ad34e:	f8c2 9000 	str.w	r9, [r2]
        ssl->session_negotiate->compression = comp;
 80ad352:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80ad354:	6053      	str	r3, [r2, #4]
        ssl->session_negotiate->id_len = n;
 80ad356:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 80ad358:	4632      	mov	r2, r6
#if defined(MBEDTLS_HAVE_TIME)
        ssl->session_negotiate->start = mbedtls_time( NULL );
#endif
        ssl->session_negotiate->ciphersuite = i;
        ssl->session_negotiate->compression = comp;
        ssl->session_negotiate->id_len = n;
 80ad35a:	609e      	str	r6, [r3, #8]
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 80ad35c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80ad35e:	300c      	adds	r0, #12
 80ad360:	f001 fec7 	bl	80af0f2 <memcpy>
     * Perform cipher suite validation in same way as in ssl_write_client_hello.
     */
    i = 0;
    while( 1 )
    {
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i] == 0 )
 80ad364:	6823      	ldr	r3, [r4, #0]
 80ad366:	68e2      	ldr	r2, [r4, #12]
 80ad368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80ad36c:	3b04      	subs	r3, #4
 80ad36e:	f853 0f04 	ldr.w	r0, [r3, #4]!
 80ad372:	2800      	cmp	r0, #0
 80ad374:	f040 831b 	bne.w	80ad9ae <mbedtls_ssl_handshake_client_step+0x81e>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
 80ad378:	222f      	movs	r2, #47	; 0x2f
 80ad37a:	2102      	movs	r1, #2
 80ad37c:	4620      	mov	r0, r4
 80ad37e:	f7fa fe7d 	bl	80a807c <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 80ad382:	4897      	ldr	r0, [pc, #604]	; (80ad5e0 <mbedtls_ssl_handshake_client_step+0x450>)
 80ad384:	f000 bc29 	b.w	80adbda <mbedtls_ssl_handshake_client_step+0xa4a>
       case MBEDTLS_SSL_SERVER_HELLO:
           ret = ssl_parse_server_hello( ssl );
           break;

       case MBEDTLS_SSL_SERVER_CERTIFICATE:
           ret = mbedtls_ssl_parse_certificate( ssl );
 80ad388:	4620      	mov	r0, r4
 80ad38a:	f7fb fc6b 	bl	80a8c64 <mbedtls_ssl_parse_certificate>
           break;
 80ad38e:	f000 bc24 	b.w	80adbda <mbedtls_ssl_handshake_client_step+0xa4a>

static int ssl_parse_server_key_exchange( mbedtls_ssl_context *ssl )
{
    int ret;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 80ad392:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80ad394:	681d      	ldr	r5, [r3, #0]
    unsigned char *p = NULL, *end = NULL;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server key exchange" ) );

#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 80ad396:	7aab      	ldrb	r3, [r5, #10]
 80ad398:	2b01      	cmp	r3, #1
 80ad39a:	d101      	bne.n	80ad3a0 <mbedtls_ssl_handshake_client_step+0x210>
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse server key exchange" ) );
        ssl->state++;
 80ad39c:	2305      	movs	r3, #5
 80ad39e:	e386      	b.n	80adaae <mbedtls_ssl_handshake_client_step+0x91e>
    ((void) p);
    ((void) end);
#endif /* MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED ||
          MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED */

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 80ad3a0:	4620      	mov	r0, r4
 80ad3a2:	f7fa ff7d 	bl	80a82a0 <mbedtls_ssl_read_record>
 80ad3a6:	2800      	cmp	r0, #0
 80ad3a8:	f040 8417 	bne.w	80adbda <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 80ad3ac:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80ad3ae:	2b16      	cmp	r3, #22
 80ad3b0:	f47f af63 	bne.w	80ad27a <mbedtls_ssl_handshake_client_step+0xea>

    /*
     * ServerKeyExchange may be skipped with PSK and RSA-PSK when the server
     * doesn't use a psk_identity_hint
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE )
 80ad3b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80ad3b6:	781b      	ldrb	r3, [r3, #0]
 80ad3b8:	2b0c      	cmp	r3, #12
 80ad3ba:	f000 813e 	beq.w	80ad63a <mbedtls_ssl_handshake_client_step+0x4aa>
    {
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 80ad3be:	7aab      	ldrb	r3, [r5, #10]
 80ad3c0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80ad3c4:	2b05      	cmp	r3, #5
 80ad3c6:	f47f af58 	bne.w	80ad27a <mbedtls_ssl_handshake_client_step+0xea>
            ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK )
        {
            /* Current message is probably either
             * CertificateRequest or ServerHelloDone */
            ssl->keep_current_message = 1;
 80ad3ca:	2301      	movs	r3, #1
 80ad3cc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        }
    }
#endif /* MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED */

exit:
    ssl->state++;
 80ad3d0:	6863      	ldr	r3, [r4, #4]
 80ad3d2:	3301      	adds	r3, #1
 80ad3d4:	6063      	str	r3, [r4, #4]
 80ad3d6:	f000 bc00 	b.w	80adbda <mbedtls_ssl_handshake_client_step+0xa4a>
    int ret;
    unsigned char *buf;
    size_t n = 0;
    size_t cert_type_len = 0, dn_len = 0;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 80ad3da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80ad3dc:	681b      	ldr	r3, [r3, #0]
 80ad3de:	7a9b      	ldrb	r3, [r3, #10]
 80ad3e0:	3b01      	subs	r3, #1
 80ad3e2:	b2db      	uxtb	r3, r3
 80ad3e4:	2b09      	cmp	r3, #9
 80ad3e6:	f200 8361 	bhi.w	80adaac <mbedtls_ssl_handshake_client_step+0x91c>
 80ad3ea:	f240 320f 	movw	r2, #783	; 0x30f
 80ad3ee:	2501      	movs	r5, #1
 80ad3f0:	fa05 f303 	lsl.w	r3, r5, r3
 80ad3f4:	401a      	ands	r2, r3
 80ad3f6:	2a00      	cmp	r2, #0
 80ad3f8:	f000 8358 	beq.w	80adaac <mbedtls_ssl_handshake_client_step+0x91c>
 80ad3fc:	e35a      	b.n	80adab4 <mbedtls_ssl_handshake_client_step+0x924>
{
    int ret;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello done" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 80ad3fe:	4620      	mov	r0, r4
 80ad400:	f7fa ff4e 	bl	80a82a0 <mbedtls_ssl_read_record>
 80ad404:	2800      	cmp	r0, #0
 80ad406:	f040 83e8 	bne.w	80adbda <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 80ad40a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80ad40c:	2b16      	cmp	r3, #22
 80ad40e:	f040 8396 	bne.w	80adb3e <mbedtls_ssl_handshake_client_step+0x9ae>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 80ad412:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80ad414:	2b04      	cmp	r3, #4
 80ad416:	f040 838b 	bne.w	80adb30 <mbedtls_ssl_handshake_client_step+0x9a0>
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
 80ad41a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 80ad41c:	781b      	ldrb	r3, [r3, #0]
 80ad41e:	2b0e      	cmp	r3, #14
 80ad420:	f040 8386 	bne.w	80adb30 <mbedtls_ssl_handshake_client_step+0x9a0>
 80ad424:	e7d4      	b.n	80ad3d0 <mbedtls_ssl_handshake_client_step+0x240>
        *      ( CertificateVerify  )
        *        ChangeCipherSpec
        *        Finished
        */
       case MBEDTLS_SSL_CLIENT_CERTIFICATE:
           ret = mbedtls_ssl_write_certificate( ssl );
 80ad426:	4620      	mov	r0, r4
 80ad428:	f7fa ff58 	bl	80a82dc <mbedtls_ssl_write_certificate>
           break;
 80ad42c:	e3d5      	b.n	80adbda <mbedtls_ssl_handshake_client_step+0xa4a>
static int ssl_write_client_key_exchange( mbedtls_ssl_context *ssl )
{
    int ret;
    size_t i, n;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 80ad42e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        }
    }
    else
#endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */
#if defined(MBEDTLS_KEY_EXCHANGE_RSA_ENABLED)
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 80ad430:	681b      	ldr	r3, [r3, #0]
 80ad432:	7a9f      	ldrb	r7, [r3, #10]
 80ad434:	2f01      	cmp	r7, #1
 80ad436:	f040 8100 	bne.w	80ad63a <mbedtls_ssl_handshake_client_step+0x4aa>
     *  struct {
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 80ad43a:	6820      	ldr	r0, [r4, #0]
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
    unsigned char *p = ssl->handshake->premaster + pms_offset;
 80ad43c:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 80ad440:	68e3      	ldr	r3, [r4, #12]
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 80ad442:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
    unsigned char *p = ssl->handshake->premaster + pms_offset;
 80ad446:	f508 76da 	add.w	r6, r8, #436	; 0x1b4
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 80ad44a:	2b00      	cmp	r3, #0
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 80ad44c:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 80ad450:	4633      	mov	r3, r6
 80ad452:	f3c2 0240 	ubfx	r2, r2, #1, #1
 80ad456:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
static int ssl_write_encrypted_pms( mbedtls_ssl_context *ssl,
                                    size_t offset, size_t *olen,
                                    size_t pms_offset )
{
    int ret;
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 80ad45a:	bf14      	ite	ne
 80ad45c:	2502      	movne	r5, #2
 80ad45e:	2500      	moveq	r5, #0
     *      ProtocolVersion client_version;
     *      opaque random[46];
     *  } PreMasterSecret;
     */
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
                       ssl->conf->transport, p );
 80ad460:	f7fb fd06 	bl	80a8e70 <mbedtls_ssl_write_version>

    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p + 2, 46 ) ) != 0 )
 80ad464:	6823      	ldr	r3, [r4, #0]
 80ad466:	222e      	movs	r2, #46	; 0x2e
 80ad468:	f8d3 9018 	ldr.w	r9, [r3, #24]
 80ad46c:	f508 71db 	add.w	r1, r8, #438	; 0x1b6
 80ad470:	69d8      	ldr	r0, [r3, #28]
 80ad472:	47c8      	blx	r9
 80ad474:	2800      	cmp	r0, #0
 80ad476:	f040 83b0 	bne.w	80adbda <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "f_rng", ret );
        return( ret );
    }

    ssl->handshake->pmslen = 48;
 80ad47a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80ad47c:	2230      	movs	r2, #48	; 0x30
 80ad47e:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

    if( ssl->session_negotiate->peer_cert == NULL )
 80ad482:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80ad484:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80ad486:	2800      	cmp	r0, #0
 80ad488:	f000 8359 	beq.w	80adb3e <mbedtls_ssl_handshake_client_step+0x9ae>
    }

    /*
     * Now write it out, encrypted
     */
    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
 80ad48c:	4639      	mov	r1, r7
 80ad48e:	30bc      	adds	r0, #188	; 0xbc
 80ad490:	f7fd f97c 	bl	80aa78c <mbedtls_pk_can_do>
 80ad494:	2800      	cmp	r0, #0
 80ad496:	f000 8354 	beq.w	80adb42 <mbedtls_ssl_handshake_client_step+0x9b2>

    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
                            p, ssl->handshake->pmslen,
                            ssl->out_msg + offset + len_bytes, olen,
                            MBEDTLS_SSL_MAX_CONTENT_LEN - offset - len_bytes,
                            ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 80ad49a:	6822      	ldr	r2, [r4, #0]
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
    }

    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 80ad49c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80ad49e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80ad4a0:	9104      	str	r1, [sp, #16]
 80ad4a2:	69d1      	ldr	r1, [r2, #28]
 80ad4a4:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80ad4a6:	9103      	str	r1, [sp, #12]
 80ad4a8:	6992      	ldr	r2, [r2, #24]
 80ad4aa:	f8d4 7098 	ldr.w	r7, [r4, #152]	; 0x98
 80ad4ae:	9202      	str	r2, [sp, #8]
 80ad4b0:	f5c5 52ff 	rsb	r2, r5, #8160	; 0x1fe0
 80ad4b4:	321c      	adds	r2, #28
 80ad4b6:	9201      	str	r2, [sp, #4]
 80ad4b8:	aa08      	add	r2, sp, #32
 80ad4ba:	9200      	str	r2, [sp, #0]
 80ad4bc:	9a04      	ldr	r2, [sp, #16]
 80ad4be:	1d2b      	adds	r3, r5, #4
 80ad4c0:	443b      	add	r3, r7
 80ad4c2:	f8d2 2170 	ldr.w	r2, [r2, #368]	; 0x170
 80ad4c6:	4631      	mov	r1, r6
 80ad4c8:	30bc      	adds	r0, #188	; 0xbc
 80ad4ca:	f7fd f9c9 	bl	80aa860 <mbedtls_pk_encrypt>
 80ad4ce:	2800      	cmp	r0, #0
 80ad4d0:	f040 8383 	bne.w	80adbda <mbedtls_ssl_handshake_client_step+0xa4a>
        return( ret );
    }

#if defined(MBEDTLS_SSL_PROTO_TLS1) || defined(MBEDTLS_SSL_PROTO_TLS1_1) || \
    defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( len_bytes == 2 )
 80ad4d4:	2d00      	cmp	r5, #0
 80ad4d6:	f000 8336 	beq.w	80adb46 <mbedtls_ssl_handshake_client_step+0x9b6>
    {
        ssl->out_msg[offset+0] = (unsigned char)( *olen >> 8 );
 80ad4da:	9b08      	ldr	r3, [sp, #32]
 80ad4dc:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80ad4e0:	0a19      	lsrs	r1, r3, #8
 80ad4e2:	7111      	strb	r1, [r2, #4]
        ssl->out_msg[offset+1] = (unsigned char)( *olen      );
 80ad4e4:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80ad4e8:	7153      	strb	r3, [r2, #5]
        *olen += 2;
 80ad4ea:	3302      	adds	r3, #2
 80ad4ec:	9308      	str	r3, [sp, #32]
 80ad4ee:	e32a      	b.n	80adb46 <mbedtls_ssl_handshake_client_step+0x9b6>
#else
static int ssl_write_certificate_verify( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 80ad4f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;
    unsigned int hashlen;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate verify" ) );

    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 80ad4f2:	4620      	mov	r0, r4
#else
static int ssl_write_certificate_verify( mbedtls_ssl_context *ssl )
{
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
        ssl->transform_negotiate->ciphersuite_info;
 80ad4f4:	681d      	ldr	r5, [r3, #0]
    size_t n = 0, offset = 0;
 80ad4f6:	2300      	movs	r3, #0
 80ad4f8:	9307      	str	r3, [sp, #28]
    mbedtls_md_type_t md_alg = MBEDTLS_MD_NONE;
    unsigned int hashlen;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate verify" ) );

    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 80ad4fa:	f7fa fad1 	bl	80a7aa0 <mbedtls_ssl_derive_keys>
 80ad4fe:	2800      	cmp	r0, #0
 80ad500:	f040 836b 	bne.w	80adbda <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
        return( ret );
    }

    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 80ad504:	7aab      	ldrb	r3, [r5, #10]
 80ad506:	1f5a      	subs	r2, r3, #5
 80ad508:	2a03      	cmp	r2, #3
 80ad50a:	d901      	bls.n	80ad510 <mbedtls_ssl_handshake_client_step+0x380>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_PSK ||
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
 80ad50c:	2b0b      	cmp	r3, #11
 80ad50e:	d102      	bne.n	80ad516 <mbedtls_ssl_handshake_client_step+0x386>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECJPAKE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
        ssl->state++;
 80ad510:	6863      	ldr	r3, [r4, #4]
 80ad512:	3301      	adds	r3, #1
 80ad514:	e2cb      	b.n	80adaae <mbedtls_ssl_handshake_client_step+0x91e>
        return( 0 );
    }

    if( ssl->client_auth == 0 || mbedtls_ssl_own_cert( ssl ) == NULL )
 80ad516:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 80ad51a:	2b00      	cmp	r3, #0
 80ad51c:	d0f8      	beq.n	80ad510 <mbedtls_ssl_handshake_client_step+0x380>

static inline mbedtls_x509_crt *mbedtls_ssl_own_cert( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 80ad51e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80ad520:	b10d      	cbz	r5, 80ad526 <mbedtls_ssl_handshake_client_step+0x396>
 80ad522:	686b      	ldr	r3, [r5, #4]
 80ad524:	b91b      	cbnz	r3, 80ad52e <mbedtls_ssl_handshake_client_step+0x39e>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
 80ad526:	6823      	ldr	r3, [r4, #0]
 80ad528:	6c9b      	ldr	r3, [r3, #72]	; 0x48

    return( key_cert == NULL ? NULL : key_cert->cert );
 80ad52a:	2b00      	cmp	r3, #0
 80ad52c:	d0f0      	beq.n	80ad510 <mbedtls_ssl_handshake_client_step+0x380>
 80ad52e:	681b      	ldr	r3, [r3, #0]
 80ad530:	2b00      	cmp	r3, #0
 80ad532:	d0ed      	beq.n	80ad510 <mbedtls_ssl_handshake_client_step+0x380>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
        ssl->state++;
        return( 0 );
    }

    if( mbedtls_ssl_own_key( ssl ) == NULL )
 80ad534:	4620      	mov	r0, r4
 80ad536:	f7ff fe20 	bl	80ad17a <mbedtls_ssl_own_key>
 80ad53a:	2800      	cmp	r0, #0
 80ad53c:	d044      	beq.n	80ad5c8 <mbedtls_ssl_handshake_client_step+0x438>
    }

    /*
     * Make an RSA signature of the handshake digests
     */
    ssl->handshake->calc_verify( ssl, hash );
 80ad53e:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
 80ad542:	a908      	add	r1, sp, #32
 80ad544:	4620      	mov	r0, r4
 80ad546:	4798      	blx	r3
    }
    else
#endif /* MBEDTLS_SSL_PROTO_SSL3 || MBEDTLS_SSL_PROTO_TLS1 || \
          MBEDTLS_SSL_PROTO_TLS1_1 */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 80ad548:	68e3      	ldr	r3, [r4, #12]
 80ad54a:	2b03      	cmp	r3, #3
 80ad54c:	d175      	bne.n	80ad63a <mbedtls_ssl_handshake_client_step+0x4aa>
         * shortcut.
         *
         * Reason: Otherwise we should have running hashes for SHA512 and SHA224
         *         in order to satisfy 'weird' needs from the server side.
         */
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
 80ad54e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
        }
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
 80ad550:	4620      	mov	r0, r4
         * shortcut.
         *
         * Reason: Otherwise we should have running hashes for SHA512 and SHA224
         *         in order to satisfy 'weird' needs from the server side.
         */
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
 80ad552:	681b      	ldr	r3, [r3, #0]
 80ad554:	7a5d      	ldrb	r5, [r3, #9]
 80ad556:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80ad55a:	2d07      	cmp	r5, #7
            MBEDTLS_MD_SHA384 )
        {
            md_alg = MBEDTLS_MD_SHA384;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
 80ad55c:	bf0b      	itete	eq
 80ad55e:	2205      	moveq	r2, #5
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
 80ad560:	2204      	movne	r2, #4
         */
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
            MBEDTLS_MD_SHA384 )
        {
            md_alg = MBEDTLS_MD_SHA384;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
 80ad562:	711a      	strbeq	r2, [r3, #4]
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
 80ad564:	711a      	strbne	r2, [r3, #4]
            md_alg = MBEDTLS_MD_SHA384;
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
        }
        else
        {
            md_alg = MBEDTLS_MD_SHA256;
 80ad566:	bf18      	it	ne
 80ad568:	2506      	movne	r5, #6
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
        }
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
 80ad56a:	f7ff fe06 	bl	80ad17a <mbedtls_ssl_own_key>
 80ad56e:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
 80ad572:	f7fb fb3e 	bl	80a8bf2 <mbedtls_ssl_sig_from_pk>
 80ad576:	7170      	strb	r0, [r6, #5]
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 80ad578:	4620      	mov	r0, r4
 80ad57a:	f7ff fdfe 	bl	80ad17a <mbedtls_ssl_own_key>
                         ssl->out_msg + 6 + offset, &n,
                         ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 80ad57e:	6823      	ldr	r3, [r4, #0]
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 80ad580:	4629      	mov	r1, r5
 80ad582:	69da      	ldr	r2, [r3, #28]
 80ad584:	9203      	str	r2, [sp, #12]
 80ad586:	699b      	ldr	r3, [r3, #24]
 80ad588:	aa08      	add	r2, sp, #32
 80ad58a:	9302      	str	r3, [sp, #8]
 80ad58c:	ab07      	add	r3, sp, #28
 80ad58e:	9301      	str	r3, [sp, #4]
 80ad590:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80ad594:	3308      	adds	r3, #8
 80ad596:	9300      	str	r3, [sp, #0]
 80ad598:	2300      	movs	r3, #0
 80ad59a:	f7fd f92d 	bl	80aa7f8 <mbedtls_pk_sign>
 80ad59e:	2800      	cmp	r0, #0
 80ad5a0:	f040 831b 	bne.w	80adbda <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_pk_sign", ret );
        return( ret );
    }

    ssl->out_msg[4 + offset] = (unsigned char)( n >> 8 );
 80ad5a4:	9b07      	ldr	r3, [sp, #28]
 80ad5a6:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80ad5aa:	0a19      	lsrs	r1, r3, #8
 80ad5ac:	7191      	strb	r1, [r2, #6]
    ssl->out_msg[5 + offset] = (unsigned char)( n      );
 80ad5ae:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80ad5b2:	71d3      	strb	r3, [r2, #7]

    ssl->out_msglen  = 6 + n + offset;
 80ad5b4:	3308      	adds	r3, #8
 80ad5b6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 80ad5ba:	2316      	movs	r3, #22
 80ad5bc:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE_VERIFY;
 80ad5c0:	220f      	movs	r2, #15
 80ad5c2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80ad5c6:	e2c8      	b.n	80adb5a <mbedtls_ssl_handshake_client_step+0x9ca>
    }

    if( mbedtls_ssl_own_key( ssl ) == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no private key for certificate" ) );
        return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
 80ad5c8:	4806      	ldr	r0, [pc, #24]	; (80ad5e4 <mbedtls_ssl_handshake_client_step+0x454>)
 80ad5ca:	e306      	b.n	80adbda <mbedtls_ssl_handshake_client_step+0xa4a>
       case MBEDTLS_SSL_CERTIFICATE_VERIFY:
           ret = ssl_write_certificate_verify( ssl );
           break;

       case MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC:
           ret = mbedtls_ssl_write_change_cipher_spec( ssl );
 80ad5cc:	4620      	mov	r0, r4
 80ad5ce:	f7fa fee9 	bl	80a83a4 <mbedtls_ssl_write_change_cipher_spec>
           break;
 80ad5d2:	e302      	b.n	80adbda <mbedtls_ssl_handshake_client_step+0xa4a>

       case MBEDTLS_SSL_CLIENT_FINISHED:
           ret = mbedtls_ssl_write_finished( ssl );
 80ad5d4:	4620      	mov	r0, r4
 80ad5d6:	f7fa ff3d 	bl	80a8454 <mbedtls_ssl_write_finished>
           break;
 80ad5da:	e2fe      	b.n	80adbda <mbedtls_ssl_handshake_client_step+0xa4a>
 80ad5dc:	ffff8f00 	.word	0xffff8f00
 80ad5e0:	ffff8680 	.word	0xffff8680
 80ad5e4:	ffff8a00 	.word	0xffff8a00
    unsigned char *ticket;
    const unsigned char *msg;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse new session ticket" ) );

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 80ad5e8:	4620      	mov	r0, r4
 80ad5ea:	f7fa fe59 	bl	80a82a0 <mbedtls_ssl_read_record>
 80ad5ee:	2800      	cmp	r0, #0
 80ad5f0:	f040 82f3 	bne.w	80adbda <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 80ad5f4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80ad5f6:	2b16      	cmp	r3, #22
 80ad5f8:	f47f ae3f 	bne.w	80ad27a <mbedtls_ssl_handshake_client_step+0xea>
     *
     * 0  .  3   ticket_lifetime_hint
     * 4  .  5   ticket_len (n)
     * 6  .  5+n ticket content
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||
 80ad5fc:	6e67      	ldr	r7, [r4, #100]	; 0x64
 80ad5fe:	783b      	ldrb	r3, [r7, #0]
 80ad600:	2b04      	cmp	r3, #4
 80ad602:	d103      	bne.n	80ad60c <mbedtls_ssl_handshake_client_step+0x47c>
        ssl->in_hslen < 6 + mbedtls_ssl_hs_hdr_len( ssl ) )
 80ad604:	6fa3      	ldr	r3, [r4, #120]	; 0x78
     *
     * 0  .  3   ticket_lifetime_hint
     * 4  .  5   ticket_len (n)
     * 6  .  5+n ticket content
     */
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||
 80ad606:	2b09      	cmp	r3, #9
 80ad608:	f200 82af 	bhi.w	80adb6a <mbedtls_ssl_handshake_client_step+0x9da>

    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad new session ticket message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 80ad60c:	2232      	movs	r2, #50	; 0x32
 80ad60e:	2102      	movs	r1, #2
 80ad610:	4620      	mov	r0, r4
 80ad612:	f7fa fd33 	bl	80a807c <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
 80ad616:	48c1      	ldr	r0, [pc, #772]	; (80ad91c <mbedtls_ssl_handshake_client_step+0x78c>)
 80ad618:	e2df      	b.n	80adbda <mbedtls_ssl_handshake_client_step+0xa4a>
           ret = ssl_parse_new_session_ticket( ssl );
           break;
#endif

       case MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC:
           ret = mbedtls_ssl_parse_change_cipher_spec( ssl );
 80ad61a:	4620      	mov	r0, r4
 80ad61c:	f7fa fed0 	bl	80a83c0 <mbedtls_ssl_parse_change_cipher_spec>
           break;
 80ad620:	e2db      	b.n	80adbda <mbedtls_ssl_handshake_client_step+0xa4a>

       case MBEDTLS_SSL_SERVER_FINISHED:
           ret = mbedtls_ssl_parse_finished( ssl );
 80ad622:	4620      	mov	r0, r4
 80ad624:	f7fa ff5e 	bl	80a84e4 <mbedtls_ssl_parse_finished>
           break;
 80ad628:	e2d7      	b.n	80adbda <mbedtls_ssl_handshake_client_step+0xa4a>

       case MBEDTLS_SSL_FLUSH_BUFFERS:
           MBEDTLS_SSL_DEBUG_MSG( 2, ( "handshake: done" ) );
           ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 80ad62a:	230f      	movs	r3, #15
 80ad62c:	e23f      	b.n	80adaae <mbedtls_ssl_handshake_client_step+0x91e>
           break;

       case MBEDTLS_SSL_HANDSHAKE_WRAPUP:
           mbedtls_ssl_handshake_wrapup( ssl );
 80ad62e:	4620      	mov	r0, r4
 80ad630:	f7fb f95a 	bl	80a88e8 <mbedtls_ssl_handshake_wrapup>
 80ad634:	e23c      	b.n	80adab0 <mbedtls_ssl_handshake_client_step+0x920>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );

    if( ssl->conf->f_rng == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "no RNG provided") );
        return( MBEDTLS_ERR_SSL_NO_RNG );
 80ad636:	48ba      	ldr	r0, [pc, #744]	; (80ad920 <mbedtls_ssl_handshake_client_step+0x790>)
 80ad638:	e2cf      	b.n	80adbda <mbedtls_ssl_handshake_client_step+0xa4a>
    }
    else
#endif /* MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 80ad63a:	48ba      	ldr	r0, [pc, #744]	; (80ad924 <mbedtls_ssl_handshake_client_step+0x794>)
 80ad63c:	e2cd      	b.n	80adbda <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_generate_random", ret );
        return( ret );
    }

    memcpy( p, ssl->handshake->randbytes, 32 );
 80ad63e:	f852 0b04 	ldr.w	r0, [r2], #4
 80ad642:	429a      	cmp	r2, r3
 80ad644:	f841 0b04 	str.w	r0, [r1], #4
 80ad648:	d1f9      	bne.n	80ad63e <mbedtls_ssl_handshake_client_step+0x4ae>
     *   ..   . ..    compression methods length (1 byte)
     *   ..   . ..    compression methods
     *   ..   . ..    extensions length (2 bytes)
     *   ..   . ..    extensions
     */
    n = ssl->session_negotiate->id_len;
 80ad64a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80ad64c:	688b      	ldr	r3, [r1, #8]

    if( n < 16 || n > 32 ||
 80ad64e:	f1a3 0210 	sub.w	r2, r3, #16
 80ad652:	2a10      	cmp	r2, #16
 80ad654:	d806      	bhi.n	80ad664 <mbedtls_ssl_handshake_client_step+0x4d4>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->handshake->resume == 0 )
 80ad656:	6b22      	ldr	r2, [r4, #48]	; 0x30
     *   ..   . ..    extensions length (2 bytes)
     *   ..   . ..    extensions
     */
    n = ssl->session_negotiate->id_len;

    if( n < 16 || n > 32 ||
 80ad658:	f8d2 21e4 	ldr.w	r2, [r2, #484]	; 0x1e4
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->handshake->resume == 0 )
    {
        n = 0;
 80ad65c:	2a00      	cmp	r2, #0
 80ad65e:	bf08      	it	eq
 80ad660:	2300      	moveq	r3, #0
 80ad662:	e000      	b.n	80ad666 <mbedtls_ssl_handshake_client_step+0x4d6>
 80ad664:	2300      	movs	r3, #0
     */
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        if( ssl->session_negotiate->ticket != NULL &&
 80ad666:	6e4a      	ldr	r2, [r1, #100]	; 0x64
 80ad668:	b16a      	cbz	r2, 80ad686 <mbedtls_ssl_handshake_client_step+0x4f6>
 80ad66a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
 80ad66c:	b15a      	cbz	r2, 80ad686 <mbedtls_ssl_handshake_client_step+0x4f6>
                ssl->session_negotiate->ticket_len != 0 )
        {
            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->session_negotiate->id, 32 );
 80ad66e:	6823      	ldr	r3, [r4, #0]
 80ad670:	2220      	movs	r2, #32
 80ad672:	699d      	ldr	r5, [r3, #24]
 80ad674:	310c      	adds	r1, #12
 80ad676:	69d8      	ldr	r0, [r3, #28]
 80ad678:	47a8      	blx	r5

            if( ret != 0 )
 80ad67a:	2800      	cmp	r0, #0
 80ad67c:	f040 82ad 	bne.w	80adbda <mbedtls_ssl_handshake_client_step+0xa4a>
                return( ret );

            ssl->session_negotiate->id_len = n = 32;
 80ad680:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80ad682:	2320      	movs	r3, #32
 80ad684:	6093      	str	r3, [r2, #8]
        }
    }
#endif /* MBEDTLS_SSL_SESSION_TICKETS */

    *p++ = (unsigned char) n;
 80ad686:	f106 0527 	add.w	r5, r6, #39	; 0x27
 80ad68a:	f886 3026 	strb.w	r3, [r6, #38]	; 0x26

    for( i = 0; i < n; i++ )
 80ad68e:	2200      	movs	r2, #0
 80ad690:	4293      	cmp	r3, r2
 80ad692:	d005      	beq.n	80ad6a0 <mbedtls_ssl_handshake_client_step+0x510>
        *p++ = ssl->session_negotiate->id[i];
 80ad694:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80ad696:	4411      	add	r1, r2
 80ad698:	7b09      	ldrb	r1, [r1, #12]
 80ad69a:	54a9      	strb	r1, [r5, r2]
    }
#endif /* MBEDTLS_SSL_SESSION_TICKETS */

    *p++ = (unsigned char) n;

    for( i = 0; i < n; i++ )
 80ad69c:	3201      	adds	r2, #1
 80ad69e:	e7f7      	b.n	80ad690 <mbedtls_ssl_handshake_client_step+0x500>
 80ad6a0:	441d      	add	r5, r3
#endif

    /*
     * Ciphersuite list
     */
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];
 80ad6a2:	68e2      	ldr	r2, [r4, #12]
 80ad6a4:	6823      	ldr	r3, [r4, #0]

    /* Skip writing ciphersuite length for now */
    n = 0;
    q = p;
    p += 2;
 80ad6a6:	f105 0902 	add.w	r9, r5, #2
 80ad6aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     * Ciphersuite list
     */
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];

    /* Skip writing ciphersuite length for now */
    n = 0;
 80ad6ae:	2700      	movs	r7, #0
 80ad6b0:	f1a3 0804 	sub.w	r8, r3, #4
    q = p;
    p += 2;

    for( i = 0; ciphersuites[i] != 0; i++ )
 80ad6b4:	f858 bf04 	ldr.w	fp, [r8, #4]!
 80ad6b8:	f1bb 0f00 	cmp.w	fp, #0
 80ad6bc:	d01c      	beq.n	80ad6f8 <mbedtls_ssl_handshake_client_step+0x568>
    {
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );
 80ad6be:	4658      	mov	r0, fp
 80ad6c0:	f7f7 f892 	bl	80a47e8 <mbedtls_ssl_ciphersuite_from_id>

        if( ssl_validate_ciphersuite( ciphersuite_info, ssl,
                                      ssl->conf->min_minor_ver,
 80ad6c4:	6822      	ldr	r2, [r4, #0]

    for( i = 0; ciphersuites[i] != 0; i++ )
    {
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );

        if( ssl_validate_ciphersuite( ciphersuite_info, ssl,
 80ad6c6:	f892 105d 	ldrb.w	r1, [r2, #93]	; 0x5d
static int ssl_validate_ciphersuite( const mbedtls_ssl_ciphersuite_t * suite_info,
                                     const mbedtls_ssl_context * ssl,
                                     int min_minor_ver, int max_minor_ver )
{
    (void) ssl;
    if( suite_info == NULL )
 80ad6ca:	2800      	cmp	r0, #0
 80ad6cc:	d0f2      	beq.n	80ad6b4 <mbedtls_ssl_handshake_client_step+0x524>
        return( 1 );

    if( suite_info->min_minor_ver > max_minor_ver ||
 80ad6ce:	6903      	ldr	r3, [r0, #16]
 80ad6d0:	4299      	cmp	r1, r3
 80ad6d2:	dbef      	blt.n	80ad6b4 <mbedtls_ssl_handshake_client_step+0x524>
 80ad6d4:	f892 205f 	ldrb.w	r2, [r2, #95]	; 0x5f
 80ad6d8:	6983      	ldr	r3, [r0, #24]
 80ad6da:	429a      	cmp	r2, r3
 80ad6dc:	dcea      	bgt.n	80ad6b4 <mbedtls_ssl_handshake_client_step+0x524>

        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
                                    ciphersuites[i] ) );

        n++;
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
 80ad6de:	f8d8 3000 	ldr.w	r3, [r8]
            continue;

        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
                                    ciphersuites[i] ) );

        n++;
 80ad6e2:	3701      	adds	r7, #1
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
 80ad6e4:	121a      	asrs	r2, r3, #8
 80ad6e6:	464b      	mov	r3, r9
 80ad6e8:	f803 2b02 	strb.w	r2, [r3], #2
        *p++ = (unsigned char)( ciphersuites[i]      );
 80ad6ec:	f8d8 2000 	ldr.w	r2, [r8]
 80ad6f0:	f889 2001 	strb.w	r2, [r9, #1]
 80ad6f4:	4699      	mov	r9, r3
 80ad6f6:	e7dd      	b.n	80ad6b4 <mbedtls_ssl_handshake_client_step+0x524>
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
 80ad6f8:	23ff      	movs	r3, #255	; 0xff
        n++;
 80ad6fa:	3701      	adds	r7, #1
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
 80ad6fc:	f889 3001 	strb.w	r3, [r9, #1]
        *p++ = (unsigned char)( MBEDTLS_SSL_FALLBACK_SCSV_VALUE      );
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
 80ad700:	09fb      	lsrs	r3, r7, #7
#if defined(MBEDTLS_SSL_RENEGOTIATION)
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
#endif
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "adding EMPTY_RENEGOTIATION_INFO_SCSV" ) );
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
 80ad702:	f889 b000 	strb.w	fp, [r9]
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
    *q++ = (unsigned char)( n << 1 );
 80ad706:	007f      	lsls	r7, r7, #1
        *p++ = (unsigned char)( MBEDTLS_SSL_FALLBACK_SCSV_VALUE      );
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
 80ad708:	702b      	strb	r3, [r5, #0]
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
 80ad70a:	2301      	movs	r3, #1
        n++;
    }
#endif

    *q++ = (unsigned char)( n >> 7 );
    *q++ = (unsigned char)( n << 1 );
 80ad70c:	706f      	strb	r7, [r5, #1]
    {
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
 80ad70e:	f889 3002 	strb.w	r3, [r9, #2]
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
 80ad712:	f889 b003 	strb.w	fp, [r9, #3]
static void ssl_write_hostname_ext( mbedtls_ssl_context *ssl,
                                    unsigned char *buf,
                                    size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 80ad716:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
    size_t hostname_len;

    *olen = 0;

    if( ssl->hostname == NULL )
 80ad71a:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
                            MBEDTLS_SSL_COMPRESS_NULL ) );

        *p++ = 1;
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
 80ad71e:	f109 0704 	add.w	r7, r9, #4
    }

    // First write extensions, then the total length
    //
#if defined(MBEDTLS_SSL_SERVER_NAME_INDICATION)
    ssl_write_hostname_ext( ssl, p + 2 + ext_len, &olen );
 80ad722:	f109 0806 	add.w	r8, r9, #6
static void ssl_write_hostname_ext( mbedtls_ssl_context *ssl,
                                    unsigned char *buf,
                                    size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 80ad726:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
    size_t hostname_len;

    *olen = 0;

    if( ssl->hostname == NULL )
 80ad72a:	b358      	cbz	r0, 80ad784 <mbedtls_ssl_handshake_client_step+0x5f4>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding server name extension: %s",
                   ssl->hostname ) );

    hostname_len = strlen( ssl->hostname );
 80ad72c:	f001 fd1d 	bl	80af16a <strlen>

    if( end < p || (size_t)( end - p ) < hostname_len + 9 )
 80ad730:	45a8      	cmp	r8, r5
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding server name extension: %s",
                   ssl->hostname ) );

    hostname_len = strlen( ssl->hostname );
 80ad732:	4602      	mov	r2, r0

    if( end < p || (size_t)( end - p ) < hostname_len + 9 )
 80ad734:	d828      	bhi.n	80ad788 <mbedtls_ssl_handshake_client_step+0x5f8>
 80ad736:	f100 0a09 	add.w	sl, r0, #9
 80ad73a:	ebc8 0505 	rsb	r5, r8, r5
 80ad73e:	4555      	cmp	r5, sl
 80ad740:	d322      	bcc.n	80ad788 <mbedtls_ssl_handshake_client_step+0x5f8>
     *
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME      ) & 0xFF );

    *p++ = (unsigned char)( ( (hostname_len + 5) >> 8 ) & 0xFF );
 80ad742:	1d43      	adds	r3, r0, #5
 80ad744:	0a1b      	lsrs	r3, r3, #8
 80ad746:	f889 3008 	strb.w	r3, [r9, #8]
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );
 80ad74a:	b2c3      	uxtb	r3, r0
 80ad74c:	1d59      	adds	r1, r3, #5
 80ad74e:	f889 1009 	strb.w	r1, [r9, #9]

    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
 80ad752:	1cc1      	adds	r1, r0, #3
 80ad754:	0a09      	lsrs	r1, r1, #8
 80ad756:	f889 100a 	strb.w	r1, [r9, #10]
    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );
 80ad75a:	1cd9      	adds	r1, r3, #3
 80ad75c:	f889 100b 	strb.w	r1, [r9, #11]

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME ) & 0xFF );
    *p++ = (unsigned char)( ( hostname_len >> 8 ) & 0xFF );
 80ad760:	0a01      	lsrs	r1, r0, #8
     * struct {
     *     ServerName server_name_list<1..2^16-1>
     * } ServerNameList;
     *
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME >> 8 ) & 0xFF );
 80ad762:	f889 b006 	strb.w	fp, [r9, #6]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME      ) & 0xFF );
 80ad766:	f889 b007 	strb.w	fp, [r9, #7]
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );

    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME ) & 0xFF );
 80ad76a:	f889 b00c 	strb.w	fp, [r9, #12]
    *p++ = (unsigned char)( ( hostname_len >> 8 ) & 0xFF );
 80ad76e:	f889 100d 	strb.w	r1, [r9, #13]
    *p++ = (unsigned char)( ( hostname_len      ) & 0xFF );
 80ad772:	f889 300e 	strb.w	r3, [r9, #14]

    memcpy( p, ssl->hostname, hostname_len );
 80ad776:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 80ad77a:	f109 000f 	add.w	r0, r9, #15
 80ad77e:	f001 fcb8 	bl	80af0f2 <memcpy>
 80ad782:	e002      	b.n	80ad78a <mbedtls_ssl_handshake_client_step+0x5fa>
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t hostname_len;

    *olen = 0;
 80ad784:	4682      	mov	sl, r0
 80ad786:	e000      	b.n	80ad78a <mbedtls_ssl_handshake_client_step+0x5fa>
 80ad788:	46da      	mov	sl, fp
    unsigned char *sig_alg_list = buf + 6;
#endif

    *olen = 0;

    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
 80ad78a:	6823      	ldr	r3, [r4, #0]
 80ad78c:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 80ad790:	2a03      	cmp	r2, #3
 80ad792:	d13c      	bne.n	80ad80e <mbedtls_ssl_handshake_client_step+0x67e>
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 80ad794:	6d59      	ldr	r1, [r3, #84]	; 0x54
                                                unsigned char *buf,
                                                size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t sig_alg_len = 0;
 80ad796:	2000      	movs	r0, #0
    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
        return;

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 80ad798:	f851 3010 	ldr.w	r3, [r1, r0, lsl #1]
 80ad79c:	b10b      	cbz	r3, 80ad7a2 <mbedtls_ssl_handshake_client_step+0x612>
    {
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_len += 2;
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_len += 2;
 80ad79e:	3002      	adds	r0, #2
 80ad7a0:	e7fa      	b.n	80ad798 <mbedtls_ssl_handshake_client_step+0x608>
static void ssl_write_signature_algorithms_ext( mbedtls_ssl_context *ssl,
                                                unsigned char *buf,
                                                size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 80ad7a2:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
 80ad7a6:	f10a 0b02 	add.w	fp, sl, #2
 80ad7aa:	44bb      	add	fp, r7
static void ssl_write_signature_algorithms_ext( mbedtls_ssl_context *ssl,
                                                unsigned char *buf,
                                                size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 80ad7ac:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
#if defined(MBEDTLS_RSA_C)
        sig_alg_len += 2;
#endif
    }

    if( end < p || (size_t)( end - p ) < sig_alg_len + 6 )
 80ad7b0:	4593      	cmp	fp, r2
 80ad7b2:	d82d      	bhi.n	80ad810 <mbedtls_ssl_handshake_client_step+0x680>
 80ad7b4:	ebcb 0202 	rsb	r2, fp, r2
 80ad7b8:	3006      	adds	r0, #6
 80ad7ba:	4282      	cmp	r2, r0
 80ad7bc:	d328      	bcc.n	80ad810 <mbedtls_ssl_handshake_client_step+0x680>
 80ad7be:	461d      	mov	r5, r3
    /*
     * Prepare signature_algorithms extension (TLS 1.2)
     */
    sig_alg_len = 0;

    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 80ad7c0:	f851 0015 	ldr.w	r0, [r1, r5, lsl #1]
 80ad7c4:	9105      	str	r1, [sp, #20]
 80ad7c6:	1caa      	adds	r2, r5, #2
 80ad7c8:	b170      	cbz	r0, 80ad7e8 <mbedtls_ssl_handshake_client_step+0x658>
 80ad7ca:	9204      	str	r2, [sp, #16]
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 80ad7cc:	f7fb fa1a 	bl	80a8c04 <mbedtls_ssl_hash_from_md_alg>
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 80ad7d0:	9a04      	ldr	r2, [sp, #16]
#if defined(MBEDTLS_ECDSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
#endif
#if defined(MBEDTLS_RSA_C)
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 80ad7d2:	eb0b 0305 	add.w	r3, fp, r5
 80ad7d6:	7198      	strb	r0, [r3, #6]
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 80ad7d8:	4615      	mov	r5, r2
 80ad7da:	eb0b 0302 	add.w	r3, fp, r2
 80ad7de:	f04f 0201 	mov.w	r2, #1
 80ad7e2:	9905      	ldr	r1, [sp, #20]
 80ad7e4:	715a      	strb	r2, [r3, #5]
 80ad7e6:	e7eb      	b.n	80ad7c0 <mbedtls_ssl_handshake_client_step+0x630>
     *
     * SignatureAndHashAlgorithm
     *   supported_signature_algorithms<2..2^16-2>;
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );
 80ad7e8:	230d      	movs	r3, #13
 80ad7ea:	f88b 3001 	strb.w	r3, [fp, #1]

    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
 80ad7ee:	0a13      	lsrs	r3, r2, #8
 80ad7f0:	f88b 3002 	strb.w	r3, [fp, #2]
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );
 80ad7f4:	b2eb      	uxtb	r3, r5
 80ad7f6:	1c9a      	adds	r2, r3, #2
 80ad7f8:	f88b 2003 	strb.w	r2, [fp, #3]

    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
 80ad7fc:	0a2a      	lsrs	r2, r5, #8
    *p++ = (unsigned char)( ( sig_alg_len      ) & 0xFF );
 80ad7fe:	f88b 3005 	strb.w	r3, [fp, #5]
     * } SignatureAndHashAlgorithm;
     *
     * SignatureAndHashAlgorithm
     *   supported_signature_algorithms<2..2^16-2>;
     */
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
 80ad802:	f88b 0000 	strb.w	r0, [fp]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );

    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );

    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
 80ad806:	f88b 2004 	strb.w	r2, [fp, #4]
    *p++ = (unsigned char)( ( sig_alg_len      ) & 0xFF );

    *olen = 6 + sig_alg_len;
 80ad80a:	1dab      	adds	r3, r5, #6
 80ad80c:	e000      	b.n	80ad810 <mbedtls_ssl_handshake_client_step+0x680>
    const int *md;
#if defined(MBEDTLS_RSA_C) || defined(MBEDTLS_ECDSA_C)
    unsigned char *sig_alg_list = buf + 6;
#endif

    *olen = 0;
 80ad80e:	2300      	movs	r3, #0
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;

    *olen = 0;

    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ) {
 80ad810:	6822      	ldr	r2, [r4, #0]
#endif

#if defined(MBEDTLS_SSL_PROTO_TLS1_2) && \
    defined(MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED)
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
 80ad812:	4453      	add	r3, sl
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;

    *olen = 0;

    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ) {
 80ad814:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80ad818:	f412 72e0 	ands.w	r2, r2, #448	; 0x1c0
 80ad81c:	d018      	beq.n	80ad850 <mbedtls_ssl_handshake_client_step+0x6c0>
static void ssl_write_max_fragment_length_ext( mbedtls_ssl_context *ssl,
                                               unsigned char *buf,
                                               size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 80ad81e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    ssl_write_ecjpake_kkpp_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );
 80ad822:	1c99      	adds	r1, r3, #2
 80ad824:	4439      	add	r1, r7
static void ssl_write_max_fragment_length_ext( mbedtls_ssl_context *ssl,
                                               unsigned char *buf,
                                               size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 80ad826:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding max_fragment_length extension" ) );

    if( end < p || (size_t)( end - p ) < 5 )
 80ad82a:	4281      	cmp	r1, r0
 80ad82c:	f04f 0200 	mov.w	r2, #0
 80ad830:	d80e      	bhi.n	80ad850 <mbedtls_ssl_handshake_client_step+0x6c0>
 80ad832:	1a40      	subs	r0, r0, r1
 80ad834:	2804      	cmp	r0, #4
 80ad836:	d90b      	bls.n	80ad850 <mbedtls_ssl_handshake_client_step+0x6c0>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );
 80ad838:	2001      	movs	r0, #1
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );
 80ad83a:	700a      	strb	r2, [r1, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );
 80ad83c:	7048      	strb	r0, [r1, #1]

    *p++ = 0x00;
 80ad83e:	708a      	strb	r2, [r1, #2]
    *p++ = 1;
 80ad840:	70c8      	strb	r0, [r1, #3]

    *p++ = ssl->conf->mfl_code;
 80ad842:	6822      	ldr	r2, [r4, #0]
 80ad844:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80ad848:	f3c2 1282 	ubfx	r2, r2, #6, #3
 80ad84c:	710a      	strb	r2, [r1, #4]

    *olen = 5;
 80ad84e:	2205      	movs	r2, #5
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_MAX_FRAGMENT_LENGTH)
    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
 80ad850:	189d      	adds	r5, r3, r2
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;

    *olen = 0;

    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED )
 80ad852:	6823      	ldr	r3, [r4, #0]
 80ad854:	f893 1061 	ldrb.w	r1, [r3, #97]	; 0x61
 80ad858:	f001 0102 	and.w	r1, r1, #2
 80ad85c:	f001 0aff 	and.w	sl, r1, #255	; 0xff
 80ad860:	b329      	cbz	r1, 80ad8ae <mbedtls_ssl_handshake_client_step+0x71e>
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 80ad862:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    ssl_write_alpn_ext( ssl, p + 2 + ext_len, &olen );
    ext_len += olen;
#endif

#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    ssl_write_session_ticket_ext( ssl, p + 2 + ext_len, &olen );
 80ad866:	1ca8      	adds	r0, r5, #2
 80ad868:	4438      	add	r0, r7
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 80ad86a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );

    if( end < p || (size_t)( end - p ) < 4 + tlen )
 80ad86e:	4298      	cmp	r0, r3
 80ad870:	d816      	bhi.n	80ad8a0 <mbedtls_ssl_handshake_client_step+0x710>
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;
 80ad872:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );

    if( end < p || (size_t)( end - p ) < 4 + tlen )
 80ad874:	1a1b      	subs	r3, r3, r0
static void ssl_write_session_ticket_ext( mbedtls_ssl_context *ssl,
                                          unsigned char *buf, size_t *olen )
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;
 80ad876:	6e92      	ldr	r2, [r2, #104]	; 0x68
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );

    if( end < p || (size_t)( end - p ) < 4 + tlen )
 80ad878:	f102 0a04 	add.w	sl, r2, #4
 80ad87c:	4553      	cmp	r3, sl
 80ad87e:	f04f 0300 	mov.w	r3, #0
 80ad882:	d310      	bcc.n	80ad8a6 <mbedtls_ssl_handshake_client_step+0x716>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
        return;
    }

    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET >> 8 ) & 0xFF );
 80ad884:	7003      	strb	r3, [r0, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET      ) & 0xFF );
 80ad886:	2323      	movs	r3, #35	; 0x23
 80ad888:	7043      	strb	r3, [r0, #1]

    *p++ = (unsigned char)( ( tlen >> 8 ) & 0xFF );
 80ad88a:	0a13      	lsrs	r3, r2, #8
 80ad88c:	7083      	strb	r3, [r0, #2]
    *p++ = (unsigned char)( ( tlen      ) & 0xFF );
 80ad88e:	70c2      	strb	r2, [r0, #3]

    *olen = 4;

    if( ssl->session_negotiate->ticket == NULL || tlen == 0 )
 80ad890:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80ad892:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80ad894:	b149      	cbz	r1, 80ad8aa <mbedtls_ssl_handshake_client_step+0x71a>
 80ad896:	b142      	cbz	r2, 80ad8aa <mbedtls_ssl_handshake_client_step+0x71a>
        return;
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "sending session ticket of length %d", tlen ) );

    memcpy( p, ssl->session_negotiate->ticket, tlen );
 80ad898:	3004      	adds	r0, #4
 80ad89a:	f001 fc2a 	bl	80af0f2 <memcpy>
 80ad89e:	e006      	b.n	80ad8ae <mbedtls_ssl_handshake_client_step+0x71e>
{
    unsigned char *p = buf;
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
    size_t tlen = ssl->session_negotiate->ticket_len;

    *olen = 0;
 80ad8a0:	f04f 0a00 	mov.w	sl, #0
 80ad8a4:	e003      	b.n	80ad8ae <mbedtls_ssl_handshake_client_step+0x71e>
 80ad8a6:	469a      	mov	sl, r3
 80ad8a8:	e001      	b.n	80ad8ae <mbedtls_ssl_handshake_client_step+0x71e>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET      ) & 0xFF );

    *p++ = (unsigned char)( ( tlen >> 8 ) & 0xFF );
    *p++ = (unsigned char)( ( tlen      ) & 0xFF );

    *olen = 4;
 80ad8aa:	f04f 0a04 	mov.w	sl, #4
    ((void) olen);

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, total extension length: %d",
                   ext_len ) );

    if( ext_len > 0 )
 80ad8ae:	eb15 030a 	adds.w	r3, r5, sl
    {
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
 80ad8b2:	bf1f      	itttt	ne
 80ad8b4:	0a1a      	lsrne	r2, r3, #8
 80ad8b6:	f889 2004 	strbne.w	r2, [r9, #4]
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
 80ad8ba:	f889 3005 	strbne.w	r3, [r9, #5]
        p += ext_len;
 80ad8be:	eb08 0703 	addne.w	r7, r8, r3
    }

    ssl->out_msglen  = p - buf;
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 80ad8c2:	2316      	movs	r3, #22
 80ad8c4:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 80ad8c8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80ad8cc:	2201      	movs	r2, #1
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
        p += ext_len;
    }

    ssl->out_msglen  = p - buf;
 80ad8ce:	1bbe      	subs	r6, r7, r6
 80ad8d0:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 80ad8d4:	701a      	strb	r2, [r3, #0]

    ssl->state++;
 80ad8d6:	6863      	ldr	r3, [r4, #4]
 80ad8d8:	4413      	add	r3, r2
 80ad8da:	e141      	b.n	80adb60 <mbedtls_ssl_handshake_client_step+0x9d0>
                            ssl->conf->min_major_ver, ssl->conf->min_minor_ver,
                            ssl->major_ver, ssl->minor_ver,
                            ssl->conf->max_major_ver, ssl->conf->max_minor_ver ) );

        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                     MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION );
 80ad8dc:	2246      	movs	r2, #70	; 0x46
 80ad8de:	2102      	movs	r1, #2
 80ad8e0:	4620      	mov	r0, r4
 80ad8e2:	f7fa fbcb 	bl	80a807c <mbedtls_ssl_send_alert_message>

        return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );
 80ad8e6:	4810      	ldr	r0, [pc, #64]	; (80ad928 <mbedtls_ssl_handshake_client_step+0x798>)
 80ad8e8:	e177      	b.n	80adbda <mbedtls_ssl_handshake_client_step+0xa4a>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    if( ssl->in_hslen > mbedtls_ssl_hs_hdr_len( ssl ) + 39 + n )
 80ad8ea:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80ad8ec:	f106 022b 	add.w	r2, r6, #43	; 0x2b
 80ad8f0:	4293      	cmp	r3, r2
 80ad8f2:	d91b      	bls.n	80ad92c <mbedtls_ssl_handshake_client_step+0x79c>
    {
        ext_len = ( ( buf[38 + n] <<  8 )
 80ad8f4:	eb08 0206 	add.w	r2, r8, r6
                  | ( buf[39 + n]       ) );
 80ad8f8:	f892 7026 	ldrb.w	r7, [r2, #38]	; 0x26
 80ad8fc:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 80ad900:	ea42 2707 	orr.w	r7, r2, r7, lsl #8

        if( ( ext_len > 0 && ext_len < 4 ) ||
 80ad904:	1e7a      	subs	r2, r7, #1
 80ad906:	2a02      	cmp	r2, #2
 80ad908:	f67f acfa 	bls.w	80ad300 <mbedtls_ssl_handshake_client_step+0x170>
 80ad90c:	f106 022c 	add.w	r2, r6, #44	; 0x2c
 80ad910:	443a      	add	r2, r7
 80ad912:	4293      	cmp	r3, r2
 80ad914:	f47f acf4 	bne.w	80ad300 <mbedtls_ssl_handshake_client_step+0x170>
 80ad918:	e00e      	b.n	80ad938 <mbedtls_ssl_handshake_client_step+0x7a8>
 80ad91a:	bf00      	nop
 80ad91c:	ffff9200 	.word	0xffff9200
 80ad920:	ffff8c00 	.word	0xffff8c00
 80ad924:	ffff9400 	.word	0xffff9400
 80ad928:	ffff9180 	.word	0xffff9180
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }
    }
    else if( ssl->in_hslen == mbedtls_ssl_hs_hdr_len( ssl ) + 38 + n )
 80ad92c:	f106 022a 	add.w	r2, r6, #42	; 0x2a
 80ad930:	4293      	cmp	r3, r2
 80ad932:	f47f ace5 	bne.w	80ad300 <mbedtls_ssl_handshake_client_step+0x170>
    {
        ext_len = 0;
 80ad936:	2700      	movs	r7, #0
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    /* ciphersuite (used later) */
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
 80ad938:	eb08 0306 	add.w	r3, r8, r6
 80ad93c:	f893 9023 	ldrb.w	r9, [r3, #35]	; 0x23
 80ad940:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
        accept_comp = 1;

    if( comp != MBEDTLS_SSL_COMPRESS_NULL &&
        ( comp != MBEDTLS_SSL_COMPRESS_DEFLATE || accept_comp == 0 ) )
#else /* MBEDTLS_ZLIB_SUPPORT */
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
 80ad944:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    /* ciphersuite (used later) */
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
 80ad948:	ea42 2909 	orr.w	r9, r2, r9, lsl #8
        accept_comp = 1;

    if( comp != MBEDTLS_SSL_COMPRESS_NULL &&
        ( comp != MBEDTLS_SSL_COMPRESS_DEFLATE || accept_comp == 0 ) )
#else /* MBEDTLS_ZLIB_SUPPORT */
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
 80ad94c:	2b00      	cmp	r3, #0
 80ad94e:	f43f acd9 	beq.w	80ad304 <mbedtls_ssl_handshake_client_step+0x174>
#endif/* MBEDTLS_ZLIB_SUPPORT */
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server hello, bad compression: %d", comp ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
 80ad952:	222f      	movs	r2, #47	; 0x2f
 80ad954:	2102      	movs	r1, #2
 80ad956:	4620      	mov	r0, r4
 80ad958:	f7fa fb90 	bl	80a807c <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
 80ad95c:	48a0      	ldr	r0, [pc, #640]	; (80adbe0 <mbedtls_ssl_handshake_client_step+0xa50>)
 80ad95e:	e13c      	b.n	80adbda <mbedtls_ssl_handshake_client_step+0xa4a>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
 80ad960:	2e00      	cmp	r6, #0
 80ad962:	f43f acec 	beq.w	80ad33e <mbedtls_ssl_handshake_client_step+0x1ae>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
 80ad966:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );

    /*
     * Check if the session can be resumed
     */
    if( ssl->handshake->resume == 0 || n == 0 ||
 80ad968:	6803      	ldr	r3, [r0, #0]
 80ad96a:	4599      	cmp	r9, r3
 80ad96c:	f47f ace7 	bne.w	80ad33e <mbedtls_ssl_handshake_client_step+0x1ae>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
 80ad970:	6843      	ldr	r3, [r0, #4]
 80ad972:	2b00      	cmp	r3, #0
 80ad974:	f47f ace3 	bne.w	80ad33e <mbedtls_ssl_handshake_client_step+0x1ae>
        ssl->session_negotiate->compression != comp ||
 80ad978:	6883      	ldr	r3, [r0, #8]
 80ad97a:	429e      	cmp	r6, r3
 80ad97c:	f47f acdf 	bne.w	80ad33e <mbedtls_ssl_handshake_client_step+0x1ae>
        ssl->session_negotiate->id_len != n ||
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
 80ad980:	4632      	mov	r2, r6
 80ad982:	4629      	mov	r1, r5
 80ad984:	300c      	adds	r0, #12
 80ad986:	f001 fba5 	bl	80af0d4 <memcmp>
#if defined(MBEDTLS_SSL_RENEGOTIATION)
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
#endif
        ssl->session_negotiate->ciphersuite != i ||
        ssl->session_negotiate->compression != comp ||
        ssl->session_negotiate->id_len != n ||
 80ad98a:	2800      	cmp	r0, #0
 80ad98c:	f47f acd7 	bne.w	80ad33e <mbedtls_ssl_handshake_client_step+0x1ae>
        ssl->session_negotiate->id_len = n;
        memcpy( ssl->session_negotiate->id, buf + 35, n );
    }
    else
    {
        ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
 80ad990:	230c      	movs	r3, #12
 80ad992:	6063      	str	r3, [r4, #4]

        if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 80ad994:	4620      	mov	r0, r4
 80ad996:	f7fa f883 	bl	80a7aa0 <mbedtls_ssl_derive_keys>
 80ad99a:	4605      	mov	r5, r0
 80ad99c:	2800      	cmp	r0, #0
 80ad99e:	f43f ace1 	beq.w	80ad364 <mbedtls_ssl_handshake_client_step+0x1d4>
        {
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
 80ad9a2:	2250      	movs	r2, #80	; 0x50
 80ad9a4:	2102      	movs	r1, #2
 80ad9a6:	4620      	mov	r0, r4
 80ad9a8:	f7fa fb68 	bl	80a807c <mbedtls_ssl_send_alert_message>
 80ad9ac:	e07c      	b.n	80adaa8 <mbedtls_ssl_handshake_client_step+0x918>
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
            ssl->session_negotiate->ciphersuite )
 80ad9ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80ad9b0:	6812      	ldr	r2, [r2, #0]
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
 80ad9b2:	4290      	cmp	r0, r2
 80ad9b4:	f47f acdb 	bne.w	80ad36e <mbedtls_ssl_handshake_client_step+0x1de>
        {
            break;
        }
    }

    suite_info = mbedtls_ssl_ciphersuite_from_id( ssl->session_negotiate->ciphersuite );
 80ad9b8:	f7f6 ff16 	bl	80a47e8 <mbedtls_ssl_ciphersuite_from_id>
    if( ssl_validate_ciphersuite( suite_info, ssl, ssl->minor_ver, ssl->minor_ver ) != 0 )
 80ad9bc:	68e3      	ldr	r3, [r4, #12]
static int ssl_validate_ciphersuite( const mbedtls_ssl_ciphersuite_t * suite_info,
                                     const mbedtls_ssl_context * ssl,
                                     int min_minor_ver, int max_minor_ver )
{
    (void) ssl;
    if( suite_info == NULL )
 80ad9be:	2800      	cmp	r0, #0
 80ad9c0:	f43f acda 	beq.w	80ad378 <mbedtls_ssl_handshake_client_step+0x1e8>
        return( 1 );

    if( suite_info->min_minor_ver > max_minor_ver ||
 80ad9c4:	6902      	ldr	r2, [r0, #16]
 80ad9c6:	429a      	cmp	r2, r3
 80ad9c8:	f73f acd6 	bgt.w	80ad378 <mbedtls_ssl_handshake_client_step+0x1e8>
 80ad9cc:	6982      	ldr	r2, [r0, #24]
 80ad9ce:	4293      	cmp	r3, r2
 80ad9d0:	f73f acd2 	bgt.w	80ad378 <mbedtls_ssl_handshake_client_step+0x1e8>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        switch( ext_id )
 80ad9d4:	f64f 7001 	movw	r0, #65281	; 0xff01
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }
    ssl->session_negotiate->compression = comp;
 80ad9d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80ad9da:	2200      	movs	r2, #0

    ext = buf + 40 + n;
 80ad9dc:	3628      	adds	r6, #40	; 0x28
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER );
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }
    ssl->session_negotiate->compression = comp;
 80ad9de:	605a      	str	r2, [r3, #4]

    ext = buf + 40 + n;
 80ad9e0:	4446      	add	r6, r8
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    ((void) buf);

    ssl->handshake->new_session_ticket = 1;
 80ad9e2:	2501      	movs	r5, #1

    ext = buf + 40 + n;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );

    while( ext_len )
 80ad9e4:	2f00      	cmp	r7, #0
 80ad9e6:	d03d      	beq.n	80ada64 <mbedtls_ssl_handshake_client_step+0x8d4>
    {
        unsigned int ext_id   = ( ( ext[0] <<  8 )
                                | ( ext[1]       ) );
 80ad9e8:	7873      	ldrb	r3, [r6, #1]
 80ad9ea:	7832      	ldrb	r2, [r6, #0]
        unsigned int ext_size = ( ( ext[2] <<  8 )
                                | ( ext[3]       ) );
 80ad9ec:	78b1      	ldrb	r1, [r6, #2]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );

    while( ext_len )
    {
        unsigned int ext_id   = ( ( ext[0] <<  8 )
                                | ( ext[1]       ) );
 80ad9ee:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
        unsigned int ext_size = ( ( ext[2] <<  8 )
                                | ( ext[3]       ) );
 80ad9f2:	78f3      	ldrb	r3, [r6, #3]
 80ad9f4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8

        if( ext_size + 4 > ext_len )
 80ad9f8:	1d19      	adds	r1, r3, #4
 80ad9fa:	428f      	cmp	r7, r1
 80ad9fc:	f4ff ac80 	bcc.w	80ad300 <mbedtls_ssl_handshake_client_step+0x170>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        switch( ext_id )
 80ada00:	2a23      	cmp	r2, #35	; 0x23
 80ada02:	d01e      	beq.n	80ada42 <mbedtls_ssl_handshake_client_step+0x8b2>
 80ada04:	4282      	cmp	r2, r0
 80ada06:	d002      	beq.n	80ada0e <mbedtls_ssl_handshake_client_step+0x87e>
 80ada08:	2a01      	cmp	r2, #1
 80ada0a:	d124      	bne.n	80ada56 <mbedtls_ssl_handshake_client_step+0x8c6>
 80ada0c:	e008      	b.n	80ada20 <mbedtls_ssl_handshake_client_step+0x890>
        }
    }
    else
#endif /* MBEDTLS_SSL_RENEGOTIATION */
    {
        if( len != 1 || buf[0] != 0x00 )
 80ada0e:	2b01      	cmp	r3, #1
 80ada10:	d101      	bne.n	80ada16 <mbedtls_ssl_handshake_client_step+0x886>
 80ada12:	7932      	ldrb	r2, [r6, #4]
 80ada14:	b10a      	cbz	r2, 80ada1a <mbedtls_ssl_handshake_client_step+0x88a>
        {
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-zero length renegotiation info" ) );
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                            MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE );
 80ada16:	2228      	movs	r2, #40	; 0x28
 80ada18:	e4af      	b.n	80ad37a <mbedtls_ssl_handshake_client_step+0x1ea>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
        }

        ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;
 80ada1a:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
 80ada1e:	e01a      	b.n	80ada56 <mbedtls_ssl_handshake_client_step+0x8c6>
{
    /*
     * server should use the extension only if we did,
     * and if so the server's value should match ours (and len is always 1)
     */
    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ||
 80ada20:	6822      	ldr	r2, [r4, #0]
 80ada22:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80ada26:	f402 7ee0 	and.w	lr, r2, #448	; 0x1c0
 80ada2a:	f1be 0f00 	cmp.w	lr, #0
 80ada2e:	d0f2      	beq.n	80ada16 <mbedtls_ssl_handshake_client_step+0x886>
 80ada30:	2b01      	cmp	r3, #1
 80ada32:	d1f0      	bne.n	80ada16 <mbedtls_ssl_handshake_client_step+0x886>
        len != 1 ||
 80ada34:	f896 e004 	ldrb.w	lr, [r6, #4]
 80ada38:	f3c2 1282 	ubfx	r2, r2, #6, #3
 80ada3c:	4596      	cmp	lr, r2
 80ada3e:	d00a      	beq.n	80ada56 <mbedtls_ssl_handshake_client_step+0x8c6>
 80ada40:	e7e9      	b.n	80ada16 <mbedtls_ssl_handshake_client_step+0x886>
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
static int ssl_parse_session_ticket_ext( mbedtls_ssl_context *ssl,
                                         const unsigned char *buf,
                                         size_t len )
{
    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED ||
 80ada42:	6822      	ldr	r2, [r4, #0]
 80ada44:	f892 2061 	ldrb.w	r2, [r2, #97]	; 0x61
 80ada48:	0792      	lsls	r2, r2, #30
 80ada4a:	d5e4      	bpl.n	80ada16 <mbedtls_ssl_handshake_client_step+0x886>
 80ada4c:	2b00      	cmp	r3, #0
 80ada4e:	d1e2      	bne.n	80ada16 <mbedtls_ssl_handshake_client_step+0x886>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
    }

    ((void) buf);

    ssl->handshake->new_session_ticket = 1;
 80ada50:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80ada52:	f8c2 51f4 	str.w	r5, [r2, #500]	; 0x1f4
        default:
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
                           ext_id ) );
        }

        ext_len -= 4 + ext_size;
 80ada56:	1afb      	subs	r3, r7, r3
 80ada58:	1f1f      	subs	r7, r3, #4
        ext += 4 + ext_size;

        if( ext_len > 0 && ext_len < 4 )
 80ada5a:	3b05      	subs	r3, #5
 80ada5c:	2b02      	cmp	r3, #2
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
                           ext_id ) );
        }

        ext_len -= 4 + ext_size;
        ext += 4 + ext_size;
 80ada5e:	440e      	add	r6, r1

        if( ext_len > 0 && ext_len < 4 )
 80ada60:	d8c0      	bhi.n	80ad9e4 <mbedtls_ssl_handshake_client_step+0x854>
 80ada62:	e48e      	b.n	80ad382 <mbedtls_ssl_handshake_client_step+0x1f2>
    }

    /*
     * Renegotiation security checks
     */
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 80ada64:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80ada68:	bb13      	cbnz	r3, 80adab0 <mbedtls_ssl_handshake_client_step+0x920>
        ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE )
 80ada6a:	6823      	ldr	r3, [r4, #0]
    }

    /*
     * Renegotiation security checks
     */
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 80ada6c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80ada70:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80ada74:	2b20      	cmp	r3, #32
 80ada76:	d11b      	bne.n	80adab0 <mbedtls_ssl_handshake_client_step+0x920>
 80ada78:	e7cd      	b.n	80ada16 <mbedtls_ssl_handshake_client_step+0x886>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    memcpy( ticket, msg + 6, ticket_len );
 80ada7a:	465a      	mov	r2, fp
 80ada7c:	f107 010a 	add.w	r1, r7, #10
 80ada80:	9004      	str	r0, [sp, #16]
 80ada82:	f001 fb36 	bl	80af0f2 <memcpy>

    ssl->session_negotiate->ticket = ticket;
 80ada86:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80ada88:	9b04      	ldr	r3, [sp, #16]
    ssl->session_negotiate->ticket_len = ticket_len;
    ssl->session_negotiate->ticket_lifetime = lifetime;
 80ada8a:	0436      	lsls	r6, r6, #16
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
    }

    memcpy( ticket, msg + 6, ticket_len );

    ssl->session_negotiate->ticket = ticket;
 80ada8c:	6653      	str	r3, [r2, #100]	; 0x64
    ssl->session_negotiate->ticket_len = ticket_len;
 80ada8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ssl->session_negotiate->ticket_lifetime = lifetime;
 80ada90:	ea46 660a 	orr.w	r6, r6, sl, lsl #24
    }

    memcpy( ticket, msg + 6, ticket_len );

    ssl->session_negotiate->ticket = ticket;
    ssl->session_negotiate->ticket_len = ticket_len;
 80ada94:	f8c3 b068 	str.w	fp, [r3, #104]	; 0x68
    ssl->session_negotiate->ticket_lifetime = lifetime;
 80ada98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80ada9a:	ea46 0808 	orr.w	r8, r6, r8
 80ada9e:	ea48 2609 	orr.w	r6, r8, r9, lsl #8
 80adaa2:	66de      	str	r6, [r3, #108]	; 0x6c
     * RFC 5077 section 3.4:
     * "If the client receives a session ticket from the server, then it
     * discards any Session ID that was sent in the ServerHello."
     */
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ticket in use, discarding session id" ) );
    ssl->session_negotiate->id_len = 0;
 80adaa4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80adaa6:	609d      	str	r5, [r3, #8]

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse new session ticket" ) );

    return( 0 );
 80adaa8:	4628      	mov	r0, r5
 80adaaa:	e096      	b.n	80adbda <mbedtls_ssl_handshake_client_step+0xa4a>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate request" ) );

    if( ! mbedtls_ssl_ciphersuite_cert_req_allowed( ciphersuite_info ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate request" ) );
        ssl->state++;
 80adaac:	2306      	movs	r3, #6
 80adaae:	6063      	str	r3, [r4, #4]
        return( 0 );
 80adab0:	2000      	movs	r0, #0
 80adab2:	e092      	b.n	80adbda <mbedtls_ssl_handshake_client_step+0xa4a>
    }

    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 80adab4:	4620      	mov	r0, r4
 80adab6:	f7fa fbf3 	bl	80a82a0 <mbedtls_ssl_read_record>
 80adaba:	2800      	cmp	r0, #0
 80adabc:	f040 808d 	bne.w	80adbda <mbedtls_ssl_handshake_client_step+0xa4a>
    {
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
        return( ret );
    }

    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 80adac0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80adac2:	2b16      	cmp	r3, #22
 80adac4:	f47f abd9 	bne.w	80ad27a <mbedtls_ssl_handshake_client_step+0xea>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    ssl->state++;
 80adac8:	6863      	ldr	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
 80adaca:	6e62      	ldr	r2, [r4, #100]	; 0x64
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
    }

    ssl->state++;
 80adacc:	3301      	adds	r3, #1
 80adace:	6063      	str	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
 80adad0:	7813      	ldrb	r3, [r2, #0]
 80adad2:	2b0d      	cmp	r3, #13
 80adad4:	bf0c      	ite	eq
 80adad6:	2301      	moveq	r3, #1
 80adad8:	2300      	movne	r3, #0
 80adada:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "got %s certificate request",
                        ssl->client_auth ? "a" : "no" ) );

    if( ssl->client_auth == 0 )
 80adade:	d002      	beq.n	80adae6 <mbedtls_ssl_handshake_client_step+0x956>
    {
        /* Current message is probably the ServerHelloDone */
        ssl->keep_current_message = 1;
 80adae0:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 80adae4:	e079      	b.n	80adbda <mbedtls_ssl_handshake_client_step+0xa4a>
     *  superficially sane.
     */
    buf = ssl->in_msg;

    /* certificate_types */
    if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) )
 80adae6:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80adae8:	2904      	cmp	r1, #4
 80adaea:	d806      	bhi.n	80adafa <mbedtls_ssl_handshake_client_step+0x96a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 80adaec:	2232      	movs	r2, #50	; 0x32
 80adaee:	2102      	movs	r1, #2
 80adaf0:	4620      	mov	r0, r4
 80adaf2:	f7fa fac3 	bl	80a807c <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
 80adaf6:	483b      	ldr	r0, [pc, #236]	; (80adbe4 <mbedtls_ssl_handshake_client_step+0xa54>)
 80adaf8:	e06f      	b.n	80adbda <mbedtls_ssl_handshake_client_step+0xa4a>
    }
    cert_type_len = buf[mbedtls_ssl_hs_hdr_len( ssl )];
 80adafa:	7913      	ldrb	r3, [r2, #4]
     * Both reach at most the index:
     *    ...hdr_len + 2 + n,
     * therefore the buffer length at this point must be greater than that
     * regardless of the actual code path.
     */
    if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
 80adafc:	1ddd      	adds	r5, r3, #7
 80adafe:	42a9      	cmp	r1, r5
 80adb00:	d9f4      	bls.n	80adaec <mbedtls_ssl_handshake_client_step+0x95c>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
    }

    /* supported_signature_algorithms */
#if defined(MBEDTLS_SSL_PROTO_TLS1_2)
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 80adb02:	68e0      	ldr	r0, [r4, #12]
 80adb04:	2803      	cmp	r0, #3
 80adb06:	d109      	bne.n	80adb1c <mbedtls_ssl_handshake_client_step+0x98c>
    {
        size_t sig_alg_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 80adb08:	18d6      	adds	r6, r2, r3
                             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
 80adb0a:	7977      	ldrb	r7, [r6, #5]
 80adb0c:	79b0      	ldrb	r0, [r6, #6]
 80adb0e:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
         *     buf[...hdr_len + 3 + n + sig_alg_len - 1 + 1],
         * which reduces to:
         *     buf[...hdr_len + 3 + n + sig_alg_len],
         * which is one less than we need the buf to be.
         */
        if( ssl->in_hslen <= mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n + sig_alg_len )
 80adb12:	4405      	add	r5, r0
 80adb14:	42a9      	cmp	r1, r5
 80adb16:	d9e9      	bls.n	80adaec <mbedtls_ssl_handshake_client_step+0x95c>
 80adb18:	3302      	adds	r3, #2
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Supported Signature Algorithm found: %d"
                                        ",%d", sig_alg[i], sig_alg[i + 1]  ) );
        }
#endif

        n += 2 + sig_alg_len;
 80adb1a:	4403      	add	r3, r0
    }
#endif /* MBEDTLS_SSL_PROTO_TLS1_2 */

    /* certificate_authorities */
    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 80adb1c:	441a      	add	r2, r3
             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );

    n += dn_len;
    if( ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
 80adb1e:	7950      	ldrb	r0, [r2, #5]
 80adb20:	7992      	ldrb	r2, [r2, #6]
 80adb22:	3307      	adds	r3, #7
 80adb24:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80adb28:	4413      	add	r3, r2
 80adb2a:	4299      	cmp	r1, r3
 80adb2c:	d0c0      	beq.n	80adab0 <mbedtls_ssl_handshake_client_step+0x920>
 80adb2e:	e7dd      	b.n	80adaec <mbedtls_ssl_handshake_client_step+0x95c>
    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR );
 80adb30:	2232      	movs	r2, #50	; 0x32
 80adb32:	2102      	movs	r1, #2
 80adb34:	4620      	mov	r0, r4
 80adb36:	f7fa faa1 	bl	80a807c <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE );
 80adb3a:	482b      	ldr	r0, [pc, #172]	; (80adbe8 <mbedtls_ssl_handshake_client_step+0xa58>)
 80adb3c:	e04d      	b.n	80adbda <mbedtls_ssl_handshake_client_step+0xa4a>
    ssl->handshake->pmslen = 48;

    if( ssl->session_negotiate->peer_cert == NULL )
    {
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 80adb3e:	482b      	ldr	r0, [pc, #172]	; (80adbec <mbedtls_ssl_handshake_client_step+0xa5c>)
 80adb40:	e04b      	b.n	80adbda <mbedtls_ssl_handshake_client_step+0xa4a>
     */
    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
                MBEDTLS_PK_RSA ) )
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
 80adb42:	482b      	ldr	r0, [pc, #172]	; (80adbf0 <mbedtls_ssl_handshake_client_step+0xa60>)
 80adb44:	e049      	b.n	80adbda <mbedtls_ssl_handshake_client_step+0xa4a>
        ((void) ciphersuite_info);
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    ssl->out_msglen  = i + n;
 80adb46:	9b08      	ldr	r3, [sp, #32]
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
 80adb48:	2210      	movs	r2, #16
        ((void) ciphersuite_info);
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
    }

    ssl->out_msglen  = i + n;
 80adb4a:	3304      	adds	r3, #4
 80adb4c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 80adb50:	2316      	movs	r3, #22
 80adb52:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
 80adb56:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80adb5a:	701a      	strb	r2, [r3, #0]

    ssl->state++;
 80adb5c:	6863      	ldr	r3, [r4, #4]
 80adb5e:	3301      	adds	r3, #1
 80adb60:	6063      	str	r3, [r4, #4]

    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 80adb62:	4620      	mov	r0, r4
 80adb64:	f7fa f978 	bl	80a7e58 <mbedtls_ssl_write_record>
 80adb68:	e037      	b.n	80adbda <mbedtls_ssl_handshake_client_step+0xa4a>
    msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );

    lifetime = ( msg[0] << 24 ) | ( msg[1] << 16 ) |
               ( msg[2] <<  8 ) | ( msg[3]       );

    ticket_len = ( msg[4] << 8 ) | ( msg[5] );
 80adb6a:	7a7a      	ldrb	r2, [r7, #9]
 80adb6c:	f897 b008 	ldrb.w	fp, [r7, #8]
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
    }

    msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );

    lifetime = ( msg[0] << 24 ) | ( msg[1] << 16 ) |
 80adb70:	f897 a004 	ldrb.w	sl, [r7, #4]
               ( msg[2] <<  8 ) | ( msg[3]       );

    ticket_len = ( msg[4] << 8 ) | ( msg[5] );
 80adb74:	ea42 2b0b 	orr.w	fp, r2, fp, lsl #8

    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
 80adb78:	f10b 020a 	add.w	r2, fp, #10
 80adb7c:	4293      	cmp	r3, r2
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
    }

    msg = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );

    lifetime = ( msg[0] << 24 ) | ( msg[1] << 16 ) |
 80adb7e:	797e      	ldrb	r6, [r7, #5]
               ( msg[2] <<  8 ) | ( msg[3]       );
 80adb80:	f897 9006 	ldrb.w	r9, [r7, #6]
 80adb84:	f897 8007 	ldrb.w	r8, [r7, #7]

    ticket_len = ( msg[4] << 8 ) | ( msg[5] );

    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
 80adb88:	f47f ad40 	bne.w	80ad60c <mbedtls_ssl_handshake_client_step+0x47c>
    }

    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ticket length: %d", ticket_len ) );

    /* We're not waiting for a NewSessionTicket message any more */
    ssl->handshake->new_session_ticket = 0;
 80adb8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80adb8e:	f8c3 01f4 	str.w	r0, [r3, #500]	; 0x1f4
    ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
 80adb92:	230c      	movs	r3, #12
 80adb94:	6063      	str	r3, [r4, #4]

    /*
     * Zero-length ticket means the server changed his mind and doesn't want
     * to send a ticket after all, so just forget it
     */
    if( ticket_len == 0 )
 80adb96:	f1bb 0f00 	cmp.w	fp, #0
 80adb9a:	d089      	beq.n	80adab0 <mbedtls_ssl_handshake_client_step+0x920>
        return( 0 );

    mbedtls_zeroize( ssl->session_negotiate->ticket,
 80adb9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80adb9e:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80adba0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80adba2:	441a      	add	r2, r3
#endif

#if defined(MBEDTLS_SSL_SESSION_TICKETS)
/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char *)v; while( n-- ) *p++ = 0;
 80adba4:	429a      	cmp	r2, r3
 80adba6:	d002      	beq.n	80adbae <mbedtls_ssl_handshake_client_step+0xa1e>
 80adba8:	7018      	strb	r0, [r3, #0]
 80adbaa:	3301      	adds	r3, #1
 80adbac:	e7fa      	b.n	80adba4 <mbedtls_ssl_handshake_client_step+0xa14>
    if( ticket_len == 0 )
        return( 0 );

    mbedtls_zeroize( ssl->session_negotiate->ticket,
                      ssl->session_negotiate->ticket_len );
    mbedtls_free( ssl->session_negotiate->ticket );
 80adbae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ssl->session_negotiate->ticket = NULL;
 80adbb0:	2500      	movs	r5, #0
    if( ticket_len == 0 )
        return( 0 );

    mbedtls_zeroize( ssl->session_negotiate->ticket,
                      ssl->session_negotiate->ticket_len );
    mbedtls_free( ssl->session_negotiate->ticket );
 80adbb2:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80adbb4:	f000 f9aa 	bl	80adf0c <free>
    ssl->session_negotiate->ticket = NULL;
 80adbb8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ssl->session_negotiate->ticket_len = 0;

    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
 80adbba:	4659      	mov	r1, fp
        return( 0 );

    mbedtls_zeroize( ssl->session_negotiate->ticket,
                      ssl->session_negotiate->ticket_len );
    mbedtls_free( ssl->session_negotiate->ticket );
    ssl->session_negotiate->ticket = NULL;
 80adbbc:	665d      	str	r5, [r3, #100]	; 0x64
    ssl->session_negotiate->ticket_len = 0;
 80adbbe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
 80adbc0:	2001      	movs	r0, #1

    mbedtls_zeroize( ssl->session_negotiate->ticket,
                      ssl->session_negotiate->ticket_len );
    mbedtls_free( ssl->session_negotiate->ticket );
    ssl->session_negotiate->ticket = NULL;
    ssl->session_negotiate->ticket_len = 0;
 80adbc2:	669d      	str	r5, [r3, #104]	; 0x68

    if( ( ticket = (unsigned char *)mbedtls_calloc( 1, ticket_len ) ) == NULL )
 80adbc4:	f001 fa70 	bl	80af0a8 <calloc>
 80adbc8:	2800      	cmp	r0, #0
 80adbca:	f47f af56 	bne.w	80ada7a <mbedtls_ssl_handshake_client_step+0x8ea>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ticket alloc failed" ) );
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
                                        MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR );
 80adbce:	2250      	movs	r2, #80	; 0x50
 80adbd0:	2102      	movs	r1, #2
 80adbd2:	4620      	mov	r0, r4
 80adbd4:	f7fa fa52 	bl	80a807c <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 80adbd8:	4806      	ldr	r0, [pc, #24]	; (80adbf4 <mbedtls_ssl_handshake_client_step+0xa64>)
           MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid state %d", ssl->state ) );
           return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   }

    return( ret );
}
 80adbda:	b015      	add	sp, #84	; 0x54
 80adbdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80adbe0:	ffff8f80 	.word	0xffff8f80
 80adbe4:	ffff8580 	.word	0xffff8580
 80adbe8:	ffff8480 	.word	0xffff8480
 80adbec:	ffff8900 	.word	0xffff8900
 80adbf0:	ffff9300 	.word	0xffff9300
 80adbf4:	ffff8100 	.word	0xffff8100

080adbf8 <_GLOBAL__sub_I__ZN4CarTC2Ev>:
 80adbf8:	f000 b858 	b.w	80adcac <HAL_Pin_Map>

080adbfc <_ZN3AWS11isConnectedEv>:
    callback = callbackRef;
    setupCon(domain,port,callback);
}

bool AWS::isConnected(){
    return (awsMqtt->isConnected());
 80adbfc:	6800      	ldr	r0, [r0, #0]
 80adbfe:	f7f2 bc72 	b.w	80a04e6 <_ZN4MQTT11isConnectedEv>

080adc02 <_ZN3AWS7publishEPKcS1_>:
}

bool AWS::publish(const char * topic, const char *message){
    return (awsMqtt->publish(topic, message));
 80adc02:	6800      	ldr	r0, [r0, #0]
 80adc04:	f7f2 bce9 	b.w	80a05da <_ZN4MQTT7publishEPKcS1_>

080adc08 <_ZN3AWS7connectEPKc>:
}

bool AWS::connect(const char * clinetID){
 80adc08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if(awsMqtt->enableTls(amazonIoTRootCaPem, sizeof(amazonIoTRootCaPem),
 80adc0a:	f240 638e 	movw	r3, #1678	; 0x68e
 80adc0e:	9302      	str	r3, [sp, #8]
 80adc10:	4b0b      	ldr	r3, [pc, #44]	; (80adc40 <_ZN3AWS7connectEPKc+0x38>)

bool AWS::publish(const char * topic, const char *message){
    return (awsMqtt->publish(topic, message));
}

bool AWS::connect(const char * clinetID){
 80adc12:	4604      	mov	r4, r0
    if(awsMqtt->enableTls(amazonIoTRootCaPem, sizeof(amazonIoTRootCaPem),
 80adc14:	9301      	str	r3, [sp, #4]
 80adc16:	f44f 6399 	mov.w	r3, #1224	; 0x4c8
 80adc1a:	9300      	str	r3, [sp, #0]
 80adc1c:	f44f 62d9 	mov.w	r2, #1736	; 0x6c8
 80adc20:	4b08      	ldr	r3, [pc, #32]	; (80adc44 <_ZN3AWS7connectEPKc+0x3c>)
 80adc22:	4909      	ldr	r1, [pc, #36]	; (80adc48 <_ZN3AWS7connectEPKc+0x40>)
 80adc24:	6800      	ldr	r0, [r0, #0]
 80adc26:	f7f2 fd07 	bl	80a0638 <_ZN4MQTT9enableTlsEPKcjS1_jS1_j>
 80adc2a:	b130      	cbz	r0, 80adc3a <_ZN3AWS7connectEPKc+0x32>
                     clientKeyCrtPem, sizeof(clientKeyCrtPem),
                     clientKeyPem, sizeof(clientKeyPem))){
                        return (awsMqtt->connect("sparkclient"));  
 80adc2c:	4907      	ldr	r1, [pc, #28]	; (80adc4c <_ZN3AWS7connectEPKc+0x44>)
 80adc2e:	6820      	ldr	r0, [r4, #0]
                     }
                     else {
                         return false;
                     }
    
}
 80adc30:	b004      	add	sp, #16
 80adc32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

bool AWS::connect(const char * clinetID){
    if(awsMqtt->enableTls(amazonIoTRootCaPem, sizeof(amazonIoTRootCaPem),
                     clientKeyCrtPem, sizeof(clientKeyCrtPem),
                     clientKeyPem, sizeof(clientKeyPem))){
                        return (awsMqtt->connect("sparkclient"));  
 80adc36:	f7f2 beeb 	b.w	80a0a10 <_ZN4MQTT7connectEPKc>
                     }
                     else {
                         return false;
                     }
    
}
 80adc3a:	b004      	add	sp, #16
 80adc3c:	bd10      	pop	{r4, pc}
 80adc3e:	bf00      	nop
 80adc40:	080b1a11 	.word	0x080b1a11
 80adc44:	080b209f 	.word	0x080b209f
 80adc48:	080b133d 	.word	0x080b133d
 80adc4c:	080b1a05 	.word	0x080b1a05

080adc50 <_ZN3AWS8setupConEPctPFvS0_PhjE>:

void AWS::setupCon(char* domain, uint16_t port, void (*callbackRef)(char*,uint8_t*,unsigned int)) {
 80adc50:	b570      	push	{r4, r5, r6, lr}
    static MQTT client(domain, 8883, callback);
 80adc52:	4c0e      	ldr	r4, [pc, #56]	; (80adc8c <_ZN3AWS8setupConEPctPFvS0_PhjE+0x3c>)
                         return false;
                     }
    
}

void AWS::setupCon(char* domain, uint16_t port, void (*callbackRef)(char*,uint8_t*,unsigned int)) {
 80adc54:	4605      	mov	r5, r0
    static MQTT client(domain, 8883, callback);
 80adc56:	6823      	ldr	r3, [r4, #0]
                         return false;
                     }
    
}

void AWS::setupCon(char* domain, uint16_t port, void (*callbackRef)(char*,uint8_t*,unsigned int)) {
 80adc58:	460e      	mov	r6, r1
    static MQTT client(domain, 8883, callback);
 80adc5a:	07db      	lsls	r3, r3, #31
 80adc5c:	d413      	bmi.n	80adc86 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x36>
 80adc5e:	4620      	mov	r0, r4
 80adc60:	f7f2 fa23 	bl	80a00aa <__cxa_guard_acquire>
 80adc64:	b178      	cbz	r0, 80adc86 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x36>
 80adc66:	f242 22b3 	movw	r2, #8883	; 0x22b3
 80adc6a:	4631      	mov	r1, r6
 80adc6c:	f8d5 3404 	ldr.w	r3, [r5, #1028]	; 0x404
 80adc70:	4807      	ldr	r0, [pc, #28]	; (80adc90 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x40>)
 80adc72:	f7f2 fb09 	bl	80a0288 <_ZN4MQTTC1EPctPFvS0_PhjE>
 80adc76:	4620      	mov	r0, r4
 80adc78:	f7f2 fa1c 	bl	80a00b4 <__cxa_guard_release>
 80adc7c:	4a05      	ldr	r2, [pc, #20]	; (80adc94 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x44>)
 80adc7e:	4906      	ldr	r1, [pc, #24]	; (80adc98 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x48>)
 80adc80:	4803      	ldr	r0, [pc, #12]	; (80adc90 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x40>)
 80adc82:	f000 ff33 	bl	80aeaec <__aeabi_atexit>
    awsMqtt = &client;  
 80adc86:	4b02      	ldr	r3, [pc, #8]	; (80adc90 <_ZN3AWS8setupConEPctPFvS0_PhjE+0x40>)
 80adc88:	602b      	str	r3, [r5, #0]
 80adc8a:	bd70      	pop	{r4, r5, r6, pc}
 80adc8c:	200029e4 	.word	0x200029e4
 80adc90:	200029e8 	.word	0x200029e8
 80adc94:	20000398 	.word	0x20000398
 80adc98:	080a0601 	.word	0x080a0601

080adc9c <_ZN3AWSC1EPctPFvS0_PhjE>:

AWS::AWS(char* domain, uint16_t port){
    setupCon(domain,port,NULL);
}

AWS::AWS(char* domain, uint16_t port, void (*callbackRef)(char*,uint8_t*,unsigned int)){
 80adc9c:	b510      	push	{r4, lr}
 80adc9e:	4604      	mov	r4, r0
    callback = callbackRef;
 80adca0:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
    setupCon(domain,port,callback);
 80adca4:	f7ff ffd4 	bl	80adc50 <_ZN3AWS8setupConEPctPFvS0_PhjE>
}
 80adca8:	4620      	mov	r0, r4
 80adcaa:	bd10      	pop	{r4, pc}

080adcac <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80adcac:	b508      	push	{r3, lr}
 80adcae:	4b02      	ldr	r3, [pc, #8]	; (80adcb8 <HAL_Pin_Map+0xc>)
 80adcb0:	681b      	ldr	r3, [r3, #0]
 80adcb2:	681b      	ldr	r3, [r3, #0]
 80adcb4:	9301      	str	r3, [sp, #4]
 80adcb6:	bd08      	pop	{r3, pc}
 80adcb8:	080601b0 	.word	0x080601b0

080adcbc <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80adcbc:	b508      	push	{r3, lr}
 80adcbe:	4b02      	ldr	r3, [pc, #8]	; (80adcc8 <HAL_SPI_Init+0xc>)
 80adcc0:	681b      	ldr	r3, [r3, #0]
 80adcc2:	69db      	ldr	r3, [r3, #28]
 80adcc4:	9301      	str	r3, [sp, #4]
 80adcc6:	bd08      	pop	{r3, pc}
 80adcc8:	080601b4 	.word	0x080601b4

080adccc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80adccc:	b508      	push	{r3, lr}
 80adcce:	4b02      	ldr	r3, [pc, #8]	; (80adcd8 <HAL_RNG_GetRandomNumber+0xc>)
 80adcd0:	681b      	ldr	r3, [r3, #0]
 80adcd2:	685b      	ldr	r3, [r3, #4]
 80adcd4:	9301      	str	r3, [sp, #4]
 80adcd6:	bd08      	pop	{r3, pc}
 80adcd8:	0806019c 	.word	0x0806019c

080adcdc <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80adcdc:	b508      	push	{r3, lr}
 80adcde:	4b02      	ldr	r3, [pc, #8]	; (80adce8 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80adce0:	681b      	ldr	r3, [r3, #0]
 80adce2:	695b      	ldr	r3, [r3, #20]
 80adce4:	9301      	str	r3, [sp, #4]
 80adce6:	bd08      	pop	{r3, pc}
 80adce8:	0806019c 	.word	0x0806019c

080adcec <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80adcec:	b508      	push	{r3, lr}
 80adcee:	4b02      	ldr	r3, [pc, #8]	; (80adcf8 <HAL_RTC_Get_UnixTime+0xc>)
 80adcf0:	681b      	ldr	r3, [r3, #0]
 80adcf2:	69db      	ldr	r3, [r3, #28]
 80adcf4:	9301      	str	r3, [sp, #4]
 80adcf6:	bd08      	pop	{r3, pc}
 80adcf8:	0806019c 	.word	0x0806019c

080adcfc <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80adcfc:	b508      	push	{r3, lr}
 80adcfe:	4b02      	ldr	r3, [pc, #8]	; (80add08 <os_mutex_create+0xc>)
 80add00:	681b      	ldr	r3, [r3, #0]
 80add02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80add04:	9301      	str	r3, [sp, #4]
 80add06:	bd08      	pop	{r3, pc}
 80add08:	080601d0 	.word	0x080601d0

080add0c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80add0c:	b508      	push	{r3, lr}
 80add0e:	4b02      	ldr	r3, [pc, #8]	; (80add18 <HAL_USART_Init+0xc>)
 80add10:	681b      	ldr	r3, [r3, #0]
 80add12:	699b      	ldr	r3, [r3, #24]
 80add14:	9301      	str	r3, [sp, #4]
 80add16:	bd08      	pop	{r3, pc}
 80add18:	080601c4 	.word	0x080601c4

080add1c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80add1c:	b508      	push	{r3, lr}
 80add1e:	4b02      	ldr	r3, [pc, #8]	; (80add28 <HAL_USART_Write_Data+0xc>)
 80add20:	681b      	ldr	r3, [r3, #0]
 80add22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80add24:	9301      	str	r3, [sp, #4]
 80add26:	bd08      	pop	{r3, pc}
 80add28:	080601c4 	.word	0x080601c4

080add2c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80add2c:	b508      	push	{r3, lr}
 80add2e:	4b02      	ldr	r3, [pc, #8]	; (80add38 <HAL_USART_Available_Data+0xc>)
 80add30:	681b      	ldr	r3, [r3, #0]
 80add32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80add34:	9301      	str	r3, [sp, #4]
 80add36:	bd08      	pop	{r3, pc}
 80add38:	080601c4 	.word	0x080601c4

080add3c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80add3c:	b508      	push	{r3, lr}
 80add3e:	4b02      	ldr	r3, [pc, #8]	; (80add48 <HAL_USART_Read_Data+0xc>)
 80add40:	681b      	ldr	r3, [r3, #0]
 80add42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80add44:	9301      	str	r3, [sp, #4]
 80add46:	bd08      	pop	{r3, pc}
 80add48:	080601c4 	.word	0x080601c4

080add4c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80add4c:	b508      	push	{r3, lr}
 80add4e:	4b02      	ldr	r3, [pc, #8]	; (80add58 <HAL_USART_Peek_Data+0xc>)
 80add50:	681b      	ldr	r3, [r3, #0]
 80add52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80add54:	9301      	str	r3, [sp, #4]
 80add56:	bd08      	pop	{r3, pc}
 80add58:	080601c4 	.word	0x080601c4

080add5c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80add5c:	b508      	push	{r3, lr}
 80add5e:	4b02      	ldr	r3, [pc, #8]	; (80add68 <HAL_USART_Flush_Data+0xc>)
 80add60:	681b      	ldr	r3, [r3, #0]
 80add62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80add64:	9301      	str	r3, [sp, #4]
 80add66:	bd08      	pop	{r3, pc}
 80add68:	080601c4 	.word	0x080601c4

080add6c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80add6c:	b508      	push	{r3, lr}
 80add6e:	4b02      	ldr	r3, [pc, #8]	; (80add78 <HAL_USART_Available_Data_For_Write+0xc>)
 80add70:	681b      	ldr	r3, [r3, #0]
 80add72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80add74:	9301      	str	r3, [sp, #4]
 80add76:	bd08      	pop	{r3, pc}
 80add78:	080601c4 	.word	0x080601c4

080add7c <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80add7c:	b508      	push	{r3, lr}
 80add7e:	4b02      	ldr	r3, [pc, #8]	; (80add88 <socket_active_status+0xc>)
 80add80:	681b      	ldr	r3, [r3, #0]
 80add82:	681b      	ldr	r3, [r3, #0]
 80add84:	9301      	str	r3, [sp, #4]
 80add86:	bd08      	pop	{r3, pc}
 80add88:	080601bc 	.word	0x080601bc

080add8c <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80add8c:	b508      	push	{r3, lr}
 80add8e:	4b02      	ldr	r3, [pc, #8]	; (80add98 <socket_handle_valid+0xc>)
 80add90:	681b      	ldr	r3, [r3, #0]
 80add92:	685b      	ldr	r3, [r3, #4]
 80add94:	9301      	str	r3, [sp, #4]
 80add96:	bd08      	pop	{r3, pc}
 80add98:	080601bc 	.word	0x080601bc

080add9c <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80add9c:	b508      	push	{r3, lr}
 80add9e:	4b02      	ldr	r3, [pc, #8]	; (80adda8 <socket_create+0xc>)
 80adda0:	681b      	ldr	r3, [r3, #0]
 80adda2:	689b      	ldr	r3, [r3, #8]
 80adda4:	9301      	str	r3, [sp, #4]
 80adda6:	bd08      	pop	{r3, pc}
 80adda8:	080601bc 	.word	0x080601bc

080addac <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80addac:	b508      	push	{r3, lr}
 80addae:	4b02      	ldr	r3, [pc, #8]	; (80addb8 <socket_connect+0xc>)
 80addb0:	681b      	ldr	r3, [r3, #0]
 80addb2:	68db      	ldr	r3, [r3, #12]
 80addb4:	9301      	str	r3, [sp, #4]
 80addb6:	bd08      	pop	{r3, pc}
 80addb8:	080601bc 	.word	0x080601bc

080addbc <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80addbc:	b508      	push	{r3, lr}
 80addbe:	4b02      	ldr	r3, [pc, #8]	; (80addc8 <socket_receive+0xc>)
 80addc0:	681b      	ldr	r3, [r3, #0]
 80addc2:	691b      	ldr	r3, [r3, #16]
 80addc4:	9301      	str	r3, [sp, #4]
 80addc6:	bd08      	pop	{r3, pc}
 80addc8:	080601bc 	.word	0x080601bc

080addcc <socket_send>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
 80addcc:	b508      	push	{r3, lr}
 80addce:	4b02      	ldr	r3, [pc, #8]	; (80addd8 <socket_send+0xc>)
 80addd0:	681b      	ldr	r3, [r3, #0]
 80addd2:	699b      	ldr	r3, [r3, #24]
 80addd4:	9301      	str	r3, [sp, #4]
 80addd6:	bd08      	pop	{r3, pc}
 80addd8:	080601bc 	.word	0x080601bc

080adddc <socket_close>:
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80adddc:	b508      	push	{r3, lr}
 80addde:	4b02      	ldr	r3, [pc, #8]	; (80adde8 <socket_close+0xc>)
 80adde0:	681b      	ldr	r3, [r3, #0]
 80adde2:	6a1b      	ldr	r3, [r3, #32]
 80adde4:	9301      	str	r3, [sp, #4]
 80adde6:	bd08      	pop	{r3, pc}
 80adde8:	080601bc 	.word	0x080601bc

080addec <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80addec:	b508      	push	{r3, lr}
 80addee:	4b02      	ldr	r3, [pc, #8]	; (80addf8 <socket_handle_invalid+0xc>)
 80addf0:	681b      	ldr	r3, [r3, #0]
 80addf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80addf4:	9301      	str	r3, [sp, #4]
 80addf6:	bd08      	pop	{r3, pc}
 80addf8:	080601bc 	.word	0x080601bc

080addfc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80addfc:	b508      	push	{r3, lr}
 80addfe:	4b02      	ldr	r3, [pc, #8]	; (80ade08 <HAL_USB_USART_Init+0xc>)
 80ade00:	681b      	ldr	r3, [r3, #0]
 80ade02:	681b      	ldr	r3, [r3, #0]
 80ade04:	9301      	str	r3, [sp, #4]
 80ade06:	bd08      	pop	{r3, pc}
 80ade08:	080601d8 	.word	0x080601d8

080ade0c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80ade0c:	b508      	push	{r3, lr}
 80ade0e:	4b02      	ldr	r3, [pc, #8]	; (80ade18 <HAL_USB_USART_Available_Data+0xc>)
 80ade10:	681b      	ldr	r3, [r3, #0]
 80ade12:	691b      	ldr	r3, [r3, #16]
 80ade14:	9301      	str	r3, [sp, #4]
 80ade16:	bd08      	pop	{r3, pc}
 80ade18:	080601d8 	.word	0x080601d8

080ade1c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80ade1c:	b508      	push	{r3, lr}
 80ade1e:	4b02      	ldr	r3, [pc, #8]	; (80ade28 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80ade20:	681b      	ldr	r3, [r3, #0]
 80ade22:	695b      	ldr	r3, [r3, #20]
 80ade24:	9301      	str	r3, [sp, #4]
 80ade26:	bd08      	pop	{r3, pc}
 80ade28:	080601d8 	.word	0x080601d8

080ade2c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80ade2c:	b508      	push	{r3, lr}
 80ade2e:	4b02      	ldr	r3, [pc, #8]	; (80ade38 <HAL_USB_USART_Receive_Data+0xc>)
 80ade30:	681b      	ldr	r3, [r3, #0]
 80ade32:	699b      	ldr	r3, [r3, #24]
 80ade34:	9301      	str	r3, [sp, #4]
 80ade36:	bd08      	pop	{r3, pc}
 80ade38:	080601d8 	.word	0x080601d8

080ade3c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80ade3c:	b508      	push	{r3, lr}
 80ade3e:	4b02      	ldr	r3, [pc, #8]	; (80ade48 <HAL_USB_USART_Send_Data+0xc>)
 80ade40:	681b      	ldr	r3, [r3, #0]
 80ade42:	69db      	ldr	r3, [r3, #28]
 80ade44:	9301      	str	r3, [sp, #4]
 80ade46:	bd08      	pop	{r3, pc}
 80ade48:	080601d8 	.word	0x080601d8

080ade4c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80ade4c:	b508      	push	{r3, lr}
 80ade4e:	4b02      	ldr	r3, [pc, #8]	; (80ade58 <HAL_USB_USART_Flush_Data+0xc>)
 80ade50:	681b      	ldr	r3, [r3, #0]
 80ade52:	6a1b      	ldr	r3, [r3, #32]
 80ade54:	9301      	str	r3, [sp, #4]
 80ade56:	bd08      	pop	{r3, pc}
 80ade58:	080601d8 	.word	0x080601d8

080ade5c <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, void(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80ade5c:	b508      	push	{r3, lr}
 80ade5e:	4b02      	ldr	r3, [pc, #8]	; (80ade68 <HAL_NET_SetNetWatchDog+0xc>)
 80ade60:	681b      	ldr	r3, [r3, #0]
 80ade62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80ade64:	9301      	str	r3, [sp, #4]
 80ade66:	bd08      	pop	{r3, pc}
 80ade68:	080601c0 	.word	0x080601c0

080ade6c <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80ade6c:	b508      	push	{r3, lr}
 80ade6e:	4b02      	ldr	r3, [pc, #8]	; (80ade78 <inet_gethostbyname+0xc>)
 80ade70:	681b      	ldr	r3, [r3, #0]
 80ade72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80ade74:	9301      	str	r3, [sp, #4]
 80ade76:	bd08      	pop	{r3, pc}
 80ade78:	080601c0 	.word	0x080601c0

080ade7c <LED_Signaling_Start>:

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
 80ade7c:	b508      	push	{r3, lr}
 80ade7e:	4b02      	ldr	r3, [pc, #8]	; (80ade88 <LED_Signaling_Start+0xc>)
 80ade80:	681b      	ldr	r3, [r3, #0]
 80ade82:	689b      	ldr	r3, [r3, #8]
 80ade84:	9301      	str	r3, [sp, #4]
 80ade86:	bd08      	pop	{r3, pc}
 80ade88:	080201a8 	.word	0x080201a8

080ade8c <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
 80ade8c:	b508      	push	{r3, lr}
 80ade8e:	4b02      	ldr	r3, [pc, #8]	; (80ade98 <LED_Signaling_Stop+0xc>)
 80ade90:	681b      	ldr	r3, [r3, #0]
 80ade92:	68db      	ldr	r3, [r3, #12]
 80ade94:	9301      	str	r3, [sp, #4]
 80ade96:	bd08      	pop	{r3, pc}
 80ade98:	080201a8 	.word	0x080201a8

080ade9c <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
 80ade9c:	b508      	push	{r3, lr}
 80ade9e:	4b02      	ldr	r3, [pc, #8]	; (80adea8 <LED_RGB_IsOverRidden+0xc>)
 80adea0:	681b      	ldr	r3, [r3, #0]
 80adea2:	699b      	ldr	r3, [r3, #24]
 80adea4:	9301      	str	r3, [sp, #4]
 80adea6:	bd08      	pop	{r3, pc}
 80adea8:	080201a8 	.word	0x080201a8

080adeac <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80adeac:	b508      	push	{r3, lr}
 80adeae:	4b02      	ldr	r3, [pc, #8]	; (80adeb8 <set_system_mode+0xc>)
 80adeb0:	681b      	ldr	r3, [r3, #0]
 80adeb2:	685b      	ldr	r3, [r3, #4]
 80adeb4:	9301      	str	r3, [sp, #4]
 80adeb6:	bd08      	pop	{r3, pc}
 80adeb8:	080601a4 	.word	0x080601a4

080adebc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80adebc:	b508      	push	{r3, lr}
 80adebe:	4b02      	ldr	r3, [pc, #8]	; (80adec8 <system_delay_ms+0xc>)
 80adec0:	681b      	ldr	r3, [r3, #0]
 80adec2:	695b      	ldr	r3, [r3, #20]
 80adec4:	9301      	str	r3, [sp, #4]
 80adec6:	bd08      	pop	{r3, pc}
 80adec8:	080601a4 	.word	0x080601a4

080adecc <system_set_usb_request_app_handler>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
DYNALIB_FN(24, system, main_thread_current, uint8_t(void*))

#ifdef USB_VENDOR_REQUEST_ENABLE
DYNALIB_FN(25, system, system_set_usb_request_app_handler, void(usb_request_app_handler_type, void*))
 80adecc:	b508      	push	{r3, lr}
 80adece:	4b02      	ldr	r3, [pc, #8]	; (80aded8 <system_set_usb_request_app_handler+0xc>)
 80aded0:	681b      	ldr	r3, [r3, #0]
 80aded2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80aded4:	9301      	str	r3, [sp, #4]
 80aded6:	bd08      	pop	{r3, pc}
 80aded8:	080601a4 	.word	0x080601a4

080adedc <system_set_usb_request_result>:
DYNALIB_FN(26, system, system_set_usb_request_result, void(USBRequest*, int, void*))
 80adedc:	b508      	push	{r3, lr}
 80adede:	4b02      	ldr	r3, [pc, #8]	; (80adee8 <system_set_usb_request_result+0xc>)
 80adee0:	681b      	ldr	r3, [r3, #0]
 80adee2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80adee4:	9301      	str	r3, [sp, #4]
 80adee6:	bd08      	pop	{r3, pc}
 80adee8:	080601a4 	.word	0x080601a4

080adeec <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80adeec:	b508      	push	{r3, lr}
 80adeee:	4b02      	ldr	r3, [pc, #8]	; (80adef8 <network_ready+0xc>)
 80adef0:	681b      	ldr	r3, [r3, #0]
 80adef2:	691b      	ldr	r3, [r3, #16]
 80adef4:	9301      	str	r3, [sp, #4]
 80adef6:	bd08      	pop	{r3, pc}
 80adef8:	080601c8 	.word	0x080601c8

080adefc <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80adefc:	b508      	push	{r3, lr}
 80adefe:	4b02      	ldr	r3, [pc, #8]	; (80adf08 <malloc+0xc>)
 80adf00:	681b      	ldr	r3, [r3, #0]
 80adf02:	681b      	ldr	r3, [r3, #0]
 80adf04:	9301      	str	r3, [sp, #4]
 80adf06:	bd08      	pop	{r3, pc}
 80adf08:	080601a0 	.word	0x080601a0

080adf0c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80adf0c:	b508      	push	{r3, lr}
 80adf0e:	4b02      	ldr	r3, [pc, #8]	; (80adf18 <free+0xc>)
 80adf10:	681b      	ldr	r3, [r3, #0]
 80adf12:	685b      	ldr	r3, [r3, #4]
 80adf14:	9301      	str	r3, [sp, #4]
 80adf16:	bd08      	pop	{r3, pc}
 80adf18:	080601a0 	.word	0x080601a0

080adf1c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80adf1c:	b508      	push	{r3, lr}
 80adf1e:	4b02      	ldr	r3, [pc, #8]	; (80adf28 <realloc+0xc>)
 80adf20:	681b      	ldr	r3, [r3, #0]
 80adf22:	689b      	ldr	r3, [r3, #8]
 80adf24:	9301      	str	r3, [sp, #4]
 80adf26:	bd08      	pop	{r3, pc}
 80adf28:	080601a0 	.word	0x080601a0

080adf2c <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 80adf2c:	b508      	push	{r3, lr}
 80adf2e:	4b02      	ldr	r3, [pc, #8]	; (80adf38 <sprintf+0xc>)
 80adf30:	681b      	ldr	r3, [r3, #0]
 80adf32:	68db      	ldr	r3, [r3, #12]
 80adf34:	9301      	str	r3, [sp, #4]
 80adf36:	bd08      	pop	{r3, pc}
 80adf38:	080601a0 	.word	0x080601a0

080adf3c <snprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80adf3c:	b508      	push	{r3, lr}
 80adf3e:	4b02      	ldr	r3, [pc, #8]	; (80adf48 <snprintf+0xc>)
 80adf40:	681b      	ldr	r3, [r3, #0]
 80adf42:	69db      	ldr	r3, [r3, #28]
 80adf44:	9301      	str	r3, [sp, #4]
 80adf46:	bd08      	pop	{r3, pc}
 80adf48:	080601a0 	.word	0x080601a0

080adf4c <_malloc_r>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80adf4c:	b508      	push	{r3, lr}
 80adf4e:	4b02      	ldr	r3, [pc, #8]	; (80adf58 <_malloc_r+0xc>)
 80adf50:	681b      	ldr	r3, [r3, #0]
 80adf52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80adf54:	9301      	str	r3, [sp, #4]
 80adf56:	bd08      	pop	{r3, pc}
 80adf58:	080601a0 	.word	0x080601a0

080adf5c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80adf5c:	4770      	bx	lr

080adf5e <_ZN8SPIClassD0Ev>:
 80adf5e:	b510      	push	{r4, lr}
 80adf60:	4604      	mov	r4, r0
 80adf62:	f7f2 f89e 	bl	80a00a2 <_ZdlPv>
 80adf66:	4620      	mov	r0, r4
 80adf68:	bd10      	pop	{r4, pc}
	...

080adf6c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80adf6c:	b570      	push	{r4, r5, r6, lr}
 80adf6e:	4604      	mov	r4, r0
 80adf70:	460e      	mov	r6, r1
 80adf72:	4b07      	ldr	r3, [pc, #28]	; (80adf90 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80adf74:	2500      	movs	r5, #0
 80adf76:	6003      	str	r3, [r0, #0]
 80adf78:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80adf7c:	f7ff febe 	bl	80adcfc <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80adf80:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80adf82:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80adf84:	f7ff fe9a 	bl	80adcbc <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80adf88:	60a5      	str	r5, [r4, #8]
}
 80adf8a:	4620      	mov	r0, r4
 80adf8c:	bd70      	pop	{r4, r5, r6, pc}
 80adf8e:	bf00      	nop
 80adf90:	080b2570 	.word	0x080b2570

080adf94 <_GLOBAL__sub_I_System>:

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80adf94:	2000      	movs	r0, #0
 80adf96:	f7ff bf89 	b.w	80adeac <set_system_mode>

080adf9a <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80adf9a:	b513      	push	{r0, r1, r4, lr}
 80adf9c:	ab02      	add	r3, sp, #8
        return write(&b, 1);
 80adf9e:	6802      	ldr	r2, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80adfa0:	f803 1d01 	strb.w	r1, [r3, #-1]!
        return write(&b, 1);
 80adfa4:	68d4      	ldr	r4, [r2, #12]
 80adfa6:	4619      	mov	r1, r3
 80adfa8:	2201      	movs	r2, #1
 80adfaa:	47a0      	blx	r4
}
 80adfac:	b002      	add	sp, #8
 80adfae:	bd10      	pop	{r4, pc}

080adfb0 <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 80adfb0:	4770      	bx	lr

080adfb2 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80adfb2:	4770      	bx	lr

080adfb4 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 80adfb4:	2000      	movs	r0, #0
 80adfb6:	4770      	bx	lr

080adfb8 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80adfb8:	b510      	push	{r4, lr}
 80adfba:	4604      	mov	r4, r0
 80adfbc:	f7f2 f871 	bl	80a00a2 <_ZdlPv>
 80adfc0:	4620      	mov	r0, r4
 80adfc2:	bd10      	pop	{r4, pc}

080adfc4 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80adfc4:	f7f2 b86d 	b.w	80a00a2 <_ZdlPv>

080adfc8 <_ZN9TCPClient7connectEPKctm>:
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80adfc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80adfcc:	461f      	mov	r7, r3
    stop();
 80adfce:	6803      	ldr	r3, [r0, #0]
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80adfd0:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80adfd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80adfd4:	4606      	mov	r6, r0
 80adfd6:	460c      	mov	r4, r1
 80adfd8:	4690      	mov	r8, r2
    stop();
 80adfda:	4798      	blx	r3
      int rv = 0;
      if(Network.ready())
 80adfdc:	4b13      	ldr	r3, [pc, #76]	; (80ae02c <_ZN9TCPClient7connectEPKctm+0x64>)
 80adfde:	6818      	ldr	r0, [r3, #0]
 80adfe0:	6803      	ldr	r3, [r0, #0]
 80adfe2:	681b      	ldr	r3, [r3, #0]
 80adfe4:	4798      	blx	r3
 80adfe6:	b1f0      	cbz	r0, 80ae026 <_ZN9TCPClient7connectEPKctm+0x5e>
      {
        IPAddress ip_addr;
 80adfe8:	a802      	add	r0, sp, #8
 80adfea:	f000 fbd5 	bl	80ae798 <_ZN9IPAddressC1Ev>

        if((rv = inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL)) == 0)
 80adfee:	4620      	mov	r0, r4
 80adff0:	f001 f8bb 	bl	80af16a <strlen>
 80adff4:	2300      	movs	r3, #0
 80adff6:	9300      	str	r3, [sp, #0]
 80adff8:	b281      	uxth	r1, r0
 80adffa:	463b      	mov	r3, r7
 80adffc:	aa03      	add	r2, sp, #12
 80adffe:	4620      	mov	r0, r4
 80ae000:	f7ff ff34 	bl	80ade6c <inet_gethostbyname>
 80ae004:	b978      	cbnz	r0, 80ae026 <_ZN9TCPClient7connectEPKctm+0x5e>
        {
                return connect(ip_addr, port, nif);
 80ae006:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80ae008:	ad09      	add	r5, sp, #36	; 0x24
 80ae00a:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80ae00e:	4b08      	ldr	r3, [pc, #32]	; (80ae030 <_ZN9TCPClient7connectEPKctm+0x68>)
 80ae010:	ac03      	add	r4, sp, #12
 80ae012:	9308      	str	r3, [sp, #32]
 80ae014:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80ae016:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80ae018:	6823      	ldr	r3, [r4, #0]
 80ae01a:	4642      	mov	r2, r8
 80ae01c:	702b      	strb	r3, [r5, #0]
 80ae01e:	a908      	add	r1, sp, #32
 80ae020:	463b      	mov	r3, r7
 80ae022:	4630      	mov	r0, r6
 80ae024:	47c8      	blx	r9
        }
        else
            DEBUG("unable to get IP for hostname");
      }
      return rv;
}
 80ae026:	b00f      	add	sp, #60	; 0x3c
 80ae028:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80ae02c:	080b2758 	.word	0x080b2758
 80ae030:	080b26e0 	.word	0x080b26e0

080ae034 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.32>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80ae034:	b510      	push	{r4, lr}
 80ae036:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80ae038:	6803      	ldr	r3, [r0, #0]
 80ae03a:	689b      	ldr	r3, [r3, #8]
 80ae03c:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80ae03e:	68a3      	ldr	r3, [r4, #8]
 80ae040:	3b01      	subs	r3, #1
 80ae042:	60a3      	str	r3, [r4, #8]
 80ae044:	b92b      	cbnz	r3, 80ae052 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.32+0x1e>
            _M_destroy();
 80ae046:	6823      	ldr	r3, [r4, #0]
 80ae048:	4620      	mov	r0, r4
        }
    }
 80ae04a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80ae04e:	68db      	ldr	r3, [r3, #12]
 80ae050:	4718      	bx	r3
 80ae052:	bd10      	pop	{r4, pc}

080ae054 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80ae054:	b570      	push	{r4, r5, r6, lr}
 80ae056:	4604      	mov	r4, r0
 80ae058:	4606      	mov	r6, r0
 80ae05a:	694d      	ldr	r5, [r1, #20]
 80ae05c:	4b04      	ldr	r3, [pc, #16]	; (80ae070 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80ae05e:	358c      	adds	r5, #140	; 0x8c
 80ae060:	f844 3b04 	str.w	r3, [r4], #4
 80ae064:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80ae066:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80ae068:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80ae06a:	4630      	mov	r0, r6
 80ae06c:	7023      	strb	r3, [r4, #0]
 80ae06e:	bd70      	pop	{r4, r5, r6, pc}
 80ae070:	080b26e0 	.word	0x080b26e0

080ae074 <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 80ae074:	b510      	push	{r4, lr}
 80ae076:	6943      	ldr	r3, [r0, #20]
 80ae078:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80ae07a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80ae07e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80ae082:	429a      	cmp	r2, r3
 80ae084:	d005      	beq.n	80ae092 <_ZN9TCPClient4peekEv+0x1e>
 80ae086:	6962      	ldr	r2, [r4, #20]
 80ae088:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80ae08c:	4413      	add	r3, r2
 80ae08e:	7918      	ldrb	r0, [r3, #4]
 80ae090:	bd10      	pop	{r4, pc}
 80ae092:	6803      	ldr	r3, [r0, #0]
 80ae094:	691b      	ldr	r3, [r3, #16]
 80ae096:	4798      	blx	r3
 80ae098:	2800      	cmp	r0, #0
 80ae09a:	d1f4      	bne.n	80ae086 <_ZN9TCPClient4peekEv+0x12>
 80ae09c:	f04f 30ff 	mov.w	r0, #4294967295
}
 80ae0a0:	bd10      	pop	{r4, pc}

080ae0a2 <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80ae0a2:	b510      	push	{r4, lr}
 80ae0a4:	6943      	ldr	r3, [r0, #20]
 80ae0a6:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80ae0a8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80ae0ac:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80ae0b0:	429a      	cmp	r2, r3
 80ae0b2:	d008      	beq.n	80ae0c6 <_ZN9TCPClient4readEv+0x24>
 80ae0b4:	6962      	ldr	r2, [r4, #20]
 80ae0b6:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80ae0ba:	1c59      	adds	r1, r3, #1
 80ae0bc:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80ae0c0:	4413      	add	r3, r2
 80ae0c2:	7918      	ldrb	r0, [r3, #4]
 80ae0c4:	bd10      	pop	{r4, pc}
 80ae0c6:	6803      	ldr	r3, [r0, #0]
 80ae0c8:	691b      	ldr	r3, [r3, #16]
 80ae0ca:	4798      	blx	r3
 80ae0cc:	2800      	cmp	r0, #0
 80ae0ce:	d1f1      	bne.n	80ae0b4 <_ZN9TCPClient4readEv+0x12>
 80ae0d0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80ae0d4:	bd10      	pop	{r4, pc}

080ae0d6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 80ae0d6:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80ae0d8:	6904      	ldr	r4, [r0, #16]
                offset(0),
                total(0) {
        }

        ~Data() {
            if (socket_handle_valid(sock)) {
 80ae0da:	6820      	ldr	r0, [r4, #0]
 80ae0dc:	f7ff fe56 	bl	80add8c <socket_handle_valid>
 80ae0e0:	b110      	cbz	r0, 80ae0e8 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x12>
                socket_close(sock);
 80ae0e2:	6820      	ldr	r0, [r4, #0]
 80ae0e4:	f7ff fe7a 	bl	80adddc <socket_close>
 80ae0e8:	4620      	mov	r0, r4
 80ae0ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80ae0ee:	f7f1 bfd8 	b.w	80a00a2 <_ZdlPv>

080ae0f2 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80ae0f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80ae0f4:	6943      	ldr	r3, [r0, #20]
 80ae0f6:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 80ae0f8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80ae0fc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80ae100:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 80ae102:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80ae104:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 80ae106:	d106      	bne.n	80ae116 <_ZN9TCPClient4readEPhj+0x24>
 80ae108:	6803      	ldr	r3, [r0, #0]
 80ae10a:	691b      	ldr	r3, [r3, #16]
 80ae10c:	4798      	blx	r3
 80ae10e:	b910      	cbnz	r0, 80ae116 <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 80ae110:	f04f 34ff 	mov.w	r4, #4294967295
 80ae114:	e014      	b.n	80ae140 <_ZN9TCPClient4readEPhj+0x4e>
 80ae116:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80ae118:	4630      	mov	r0, r6
        return status() ? socket_send(d_->sock, buffer, size) : -1;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80ae11a:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80ae11e:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80ae122:	4419      	add	r1, r3
        return status() ? socket_send(d_->sock, buffer, size) : -1;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80ae124:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80ae126:	42bc      	cmp	r4, r7
 80ae128:	bf28      	it	cs
 80ae12a:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80ae12c:	3104      	adds	r1, #4
 80ae12e:	4622      	mov	r2, r4
 80ae130:	f000 ffdf 	bl	80af0f2 <memcpy>
 80ae134:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80ae136:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80ae13a:	4423      	add	r3, r4
 80ae13c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 80ae140:	4620      	mov	r0, r4
 80ae142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080ae144 <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 80ae144:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 80ae146:	2300      	movs	r3, #0
 80ae148:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80ae14c:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80ae14e:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 80ae152:	4770      	bx	lr

080ae154 <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 80ae154:	b538      	push	{r3, r4, r5, lr}
 80ae156:	6942      	ldr	r2, [r0, #20]
 80ae158:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 80ae15a:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80ae15e:	b11b      	cbz	r3, 80ae168 <_ZN9TCPClient9availableEv+0x14>
 80ae160:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80ae164:	429a      	cmp	r2, r3
 80ae166:	d00b      	beq.n	80ae180 <_ZN9TCPClient9availableEv+0x2c>
    }


    static NetworkClass& from(network_interface_t nif) {
        // hard-code for now until multiple-networks are implemented.
        return Network;
 80ae168:	4b18      	ldr	r3, [pc, #96]	; (80ae1cc <_ZN9TCPClient9availableEv+0x78>)
 80ae16a:	6818      	ldr	r0, [r3, #0]
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80ae16c:	6803      	ldr	r3, [r0, #0]
 80ae16e:	681b      	ldr	r3, [r3, #0]
 80ae170:	4798      	blx	r3
 80ae172:	b318      	cbz	r0, 80ae1bc <_ZN9TCPClient9availableEv+0x68>
 80ae174:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80ae176:	6818      	ldr	r0, [r3, #0]
 80ae178:	f7ff fe08 	bl	80add8c <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80ae17c:	b918      	cbnz	r0, 80ae186 <_ZN9TCPClient9availableEv+0x32>
 80ae17e:	e01d      	b.n	80ae1bc <_ZN9TCPClient9availableEv+0x68>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 80ae180:	f7ff ffe0 	bl	80ae144 <_ZN9TCPClient12flush_bufferEv>
 80ae184:	e7f0      	b.n	80ae168 <_ZN9TCPClient9availableEv+0x14>
 80ae186:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 80ae188:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80ae18c:	297f      	cmp	r1, #127	; 0x7f
 80ae18e:	d815      	bhi.n	80ae1bc <_ZN9TCPClient9availableEv+0x68>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80ae190:	1d05      	adds	r5, r0, #4
 80ae192:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80ae196:	2300      	movs	r3, #0
 80ae198:	4429      	add	r1, r5
 80ae19a:	6800      	ldr	r0, [r0, #0]
 80ae19c:	f7ff fe0e 	bl	80addbc <socket_receive>
            if (ret > 0)
 80ae1a0:	2800      	cmp	r0, #0
 80ae1a2:	dd0b      	ble.n	80ae1bc <_ZN9TCPClient9availableEv+0x68>
 80ae1a4:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 80ae1a6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80ae1aa:	b90a      	cbnz	r2, 80ae1b0 <_ZN9TCPClient9availableEv+0x5c>
 80ae1ac:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80ae1b0:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 80ae1b2:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80ae1b6:	4418      	add	r0, r3
 80ae1b8:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 80ae1bc:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 80ae1be:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80ae1c2:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 80ae1c6:	1a18      	subs	r0, r3, r0
}
 80ae1c8:	bd38      	pop	{r3, r4, r5, pc}
 80ae1ca:	bf00      	nop
 80ae1cc:	080b2758 	.word	0x080b2758

080ae1d0 <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 80ae1d0:	b538      	push	{r3, r4, r5, lr}
  DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80ae1d2:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 80ae1d4:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80ae1d6:	6818      	ldr	r0, [r3, #0]
 80ae1d8:	f7ff fdd8 	bl	80add8c <socket_handle_valid>

void TCPClient::stop()
{
  DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80ae1dc:	b118      	cbz	r0, 80ae1e6 <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80ae1de:	6963      	ldr	r3, [r4, #20]
 80ae1e0:	6818      	ldr	r0, [r3, #0]
 80ae1e2:	f7ff fdfb 	bl	80adddc <socket_close>
 80ae1e6:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80ae1e8:	f7ff fe00 	bl	80addec <socket_handle_invalid>
 80ae1ec:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80ae1ee:	6960      	ldr	r0, [r4, #20]
 80ae1f0:	2211      	movs	r2, #17
 80ae1f2:	2100      	movs	r1, #0
 80ae1f4:	308c      	adds	r0, #140	; 0x8c
 80ae1f6:	f000 ffa2 	bl	80af13e <memset>
  d_->remoteIP.clear();
  flush_buffer();
 80ae1fa:	4620      	mov	r0, r4
}
 80ae1fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 80ae200:	f7ff bfa0 	b.w	80ae144 <_ZN9TCPClient12flush_bufferEv>

080ae204 <_ZN9TCPClientC1Em>:

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80ae204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80ae206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80ae20a:	6083      	str	r3, [r0, #8]
        d_(std::make_shared<Data>(sock))
 80ae20c:	4b17      	ldr	r3, [pc, #92]	; (80ae26c <_ZN9TCPClientC1Em+0x68>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80ae20e:	2600      	movs	r6, #0
 80ae210:	6046      	str	r6, [r0, #4]
 80ae212:	6003      	str	r3, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 80ae214:	6146      	str	r6, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80ae216:	6186      	str	r6, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80ae218:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80ae21a:	20a0      	movs	r0, #160	; 0xa0
 80ae21c:	460f      	mov	r7, r1
 80ae21e:	f7f1 ff3c 	bl	80a009a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80ae222:	4605      	mov	r5, r0
 80ae224:	b138      	cbz	r0, 80ae236 <_ZN9TCPClientC1Em+0x32>
        IPAddress remoteIP;

        explicit Data(sock_handle_t sock) :
                sock(sock),
                offset(0),
                total(0) {
 80ae226:	6007      	str	r7, [r0, #0]
 80ae228:	f8a0 6084 	strh.w	r6, [r0, #132]	; 0x84
 80ae22c:	f8a0 6086 	strh.w	r6, [r0, #134]	; 0x86
 80ae230:	3088      	adds	r0, #136	; 0x88
 80ae232:	f000 fab1 	bl	80ae798 <_ZN9IPAddressC1Ev>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80ae236:	2014      	movs	r0, #20
 80ae238:	f7f1 ff2f 	bl	80a009a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80ae23c:	4603      	mov	r3, r0
 80ae23e:	b128      	cbz	r0, 80ae24c <_ZN9TCPClientC1Em+0x48>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80ae240:	2201      	movs	r2, #1
 80ae242:	6042      	str	r2, [r0, #4]
 80ae244:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80ae246:	4a0a      	ldr	r2, [pc, #40]	; (80ae270 <_ZN9TCPClientC1Em+0x6c>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 80ae248:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80ae24a:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80ae24c:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 80ae24e:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80ae250:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80ae252:	b128      	cbz	r0, 80ae260 <_ZN9TCPClientC1Em+0x5c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80ae254:	6843      	ldr	r3, [r0, #4]
 80ae256:	3b01      	subs	r3, #1
 80ae258:	6043      	str	r3, [r0, #4]
 80ae25a:	b90b      	cbnz	r3, 80ae260 <_ZN9TCPClientC1Em+0x5c>
 80ae25c:	f7ff feea 	bl	80ae034 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.32>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 80ae260:	4620      	mov	r0, r4
 80ae262:	f7ff ff6f 	bl	80ae144 <_ZN9TCPClient12flush_bufferEv>
}
 80ae266:	4620      	mov	r0, r4
 80ae268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80ae26a:	bf00      	nop
 80ae26c:	080b259c 	.word	0x080b259c
 80ae270:	080b2580 	.word	0x080b2580

080ae274 <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80ae274:	b510      	push	{r4, lr}
 80ae276:	4604      	mov	r4, r0
 80ae278:	f7ff fdb8 	bl	80addec <socket_handle_invalid>
 80ae27c:	4601      	mov	r1, r0
 80ae27e:	4620      	mov	r0, r4
 80ae280:	f7ff ffc0 	bl	80ae204 <_ZN9TCPClientC1Em>
{
}
 80ae284:	4620      	mov	r0, r4
 80ae286:	bd10      	pop	{r4, pc}

080ae288 <_ZN9TCPClient7connectE9IPAddresstm>:
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80ae288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80ae28c:	4698      	mov	r8, r3
    stop();
 80ae28e:	6803      	ldr	r3, [r0, #0]
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80ae290:	b086      	sub	sp, #24
    stop();
 80ae292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80ae294:	4606      	mov	r6, r0
 80ae296:	460c      	mov	r4, r1
 80ae298:	4615      	mov	r5, r2
    stop();
 80ae29a:	4798      	blx	r3
 80ae29c:	4b27      	ldr	r3, [pc, #156]	; (80ae33c <_ZN9TCPClient7connectE9IPAddresstm+0xb4>)
 80ae29e:	6818      	ldr	r0, [r3, #0]
        int connected = 0;
        if(Network.from(nif).ready())
 80ae2a0:	6803      	ldr	r3, [r0, #0]
 80ae2a2:	681b      	ldr	r3, [r3, #0]
 80ae2a4:	4798      	blx	r3
 80ae2a6:	2800      	cmp	r0, #0
 80ae2a8:	d044      	beq.n	80ae334 <_ZN9TCPClient7connectE9IPAddresstm+0xac>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80ae2aa:	462b      	mov	r3, r5
 80ae2ac:	f8cd 8000 	str.w	r8, [sp]
 80ae2b0:	2206      	movs	r2, #6
 80ae2b2:	2101      	movs	r1, #1
 80ae2b4:	2002      	movs	r0, #2
 80ae2b6:	6977      	ldr	r7, [r6, #20]
 80ae2b8:	f7ff fd70 	bl	80add9c <socket_create>
 80ae2bc:	6038      	str	r0, [r7, #0]
          DEBUG("socket=%d",d_->sock);

          if (socket_handle_valid(d_->sock))
 80ae2be:	6973      	ldr	r3, [r6, #20]
 80ae2c0:	6818      	ldr	r0, [r3, #0]
 80ae2c2:	f7ff fd63 	bl	80add8c <socket_handle_valid>
 80ae2c6:	2800      	cmp	r0, #0
 80ae2c8:	d034      	beq.n	80ae334 <_ZN9TCPClient7connectE9IPAddresstm+0xac>
          {
            flush_buffer();
 80ae2ca:	4630      	mov	r0, r6
 80ae2cc:	f7ff ff3a 	bl	80ae144 <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 80ae2d0:	2302      	movs	r3, #2
 80ae2d2:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80ae2d6:	0a2b      	lsrs	r3, r5, #8
 80ae2d8:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80ae2dc:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80ae2de:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80ae2e2:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80ae2e6:	79a3      	ldrb	r3, [r4, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 80ae2e8:	f88d 500b 	strb.w	r5, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 80ae2ec:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80ae2f0:	7963      	ldrb	r3, [r4, #5]
 80ae2f2:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80ae2f6:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80ae2fa:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80ae2fe:	f7ff fdad 	bl	80ade5c <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80ae302:	6973      	ldr	r3, [r6, #20]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80ae304:	4605      	mov	r5, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80ae306:	2210      	movs	r2, #16
 80ae308:	a902      	add	r1, sp, #8
 80ae30a:	6818      	ldr	r0, [r3, #0]
 80ae30c:	f7ff fd4e 	bl	80addac <socket_connect>
 80ae310:	4607      	mov	r7, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 80ae312:	4628      	mov	r0, r5
 80ae314:	f7ff fda2 	bl	80ade5c <HAL_NET_SetNetWatchDog>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80ae318:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80ae31a:	6975      	ldr	r5, [r6, #20]
 80ae31c:	358c      	adds	r5, #140	; 0x8c
 80ae31e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80ae320:	6823      	ldr	r3, [r4, #0]
 80ae322:	702b      	strb	r3, [r5, #0]
            d_->remoteIP = ip;
            if(!connected)
 80ae324:	b12f      	cbz	r7, 80ae332 <_ZN9TCPClient7connectE9IPAddresstm+0xaa>
            {
                stop();
 80ae326:	6833      	ldr	r3, [r6, #0]
 80ae328:	4630      	mov	r0, r6
 80ae32a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80ae32c:	4798      	blx	r3
 80ae32e:	2000      	movs	r0, #0
 80ae330:	e000      	b.n	80ae334 <_ZN9TCPClient7connectE9IPAddresstm+0xac>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 80ae332:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 80ae334:	b006      	add	sp, #24
 80ae336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80ae33a:	bf00      	nop
 80ae33c:	080b2758 	.word	0x080b2758

080ae340 <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80ae340:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80ae342:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80ae344:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80ae346:	6818      	ldr	r0, [r3, #0]
 80ae348:	f7ff fd20 	bl	80add8c <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80ae34c:	b908      	cbnz	r0, 80ae352 <_ZN9TCPClient6statusEv+0x12>
 80ae34e:	2000      	movs	r0, #0
 80ae350:	bd10      	pop	{r4, pc}
 80ae352:	4b07      	ldr	r3, [pc, #28]	; (80ae370 <_ZN9TCPClient6statusEv+0x30>)
 80ae354:	6818      	ldr	r0, [r3, #0]
 80ae356:	6803      	ldr	r3, [r0, #0]
 80ae358:	681b      	ldr	r3, [r3, #0]
 80ae35a:	4798      	blx	r3
 80ae35c:	2800      	cmp	r0, #0
 80ae35e:	d0f6      	beq.n	80ae34e <_ZN9TCPClient6statusEv+0xe>
 80ae360:	6963      	ldr	r3, [r4, #20]
 80ae362:	6818      	ldr	r0, [r3, #0]
 80ae364:	f7ff fd0a 	bl	80add7c <socket_active_status>
 80ae368:	fab0 f080 	clz	r0, r0
 80ae36c:	0940      	lsrs	r0, r0, #5
}
 80ae36e:	bd10      	pop	{r4, pc}
 80ae370:	080b2758 	.word	0x080b2758

080ae374 <_ZN9TCPClient5writeEPKhj>:
{
        return write(&b, 1);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80ae374:	b570      	push	{r4, r5, r6, lr}
 80ae376:	4606      	mov	r6, r0
 80ae378:	460c      	mov	r4, r1
 80ae37a:	4615      	mov	r5, r2
        return status() ? socket_send(d_->sock, buffer, size) : -1;
 80ae37c:	f7ff ffe0 	bl	80ae340 <_ZN9TCPClient6statusEv>
 80ae380:	b138      	cbz	r0, 80ae392 <_ZN9TCPClient5writeEPKhj+0x1e>
 80ae382:	6973      	ldr	r3, [r6, #20]
 80ae384:	462a      	mov	r2, r5
 80ae386:	4621      	mov	r1, r4
}
 80ae388:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return write(&b, 1);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
        return status() ? socket_send(d_->sock, buffer, size) : -1;
 80ae38c:	6818      	ldr	r0, [r3, #0]
 80ae38e:	f7ff bd1d 	b.w	80addcc <socket_send>
}
 80ae392:	f04f 30ff 	mov.w	r0, #4294967295
 80ae396:	bd70      	pop	{r4, r5, r6, pc}

080ae398 <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 80ae398:	b538      	push	{r3, r4, r5, lr}
 80ae39a:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80ae39c:	f7ff ffd0 	bl	80ae340 <_ZN9TCPClient6statusEv>
 80ae3a0:	bb00      	cbnz	r0, 80ae3e4 <_ZN9TCPClient9connectedEv+0x4c>
 80ae3a2:	6963      	ldr	r3, [r4, #20]
 80ae3a4:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80ae3a8:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80ae3ac:	4291      	cmp	r1, r2
 80ae3ae:	d119      	bne.n	80ae3e4 <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80ae3b0:	6818      	ldr	r0, [r3, #0]
 80ae3b2:	f7ff fceb 	bl	80add8c <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80ae3b6:	b128      	cbz	r0, 80ae3c4 <_ZN9TCPClient9connectedEv+0x2c>
 80ae3b8:	6963      	ldr	r3, [r4, #20]
 80ae3ba:	6818      	ldr	r0, [r3, #0]
 80ae3bc:	f7ff fcde 	bl	80add7c <socket_active_status>
 80ae3c0:	2801      	cmp	r0, #1
 80ae3c2:	d001      	beq.n	80ae3c8 <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80ae3c4:	2500      	movs	r5, #0
 80ae3c6:	e00e      	b.n	80ae3e6 <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 80ae3c8:	6823      	ldr	r3, [r4, #0]
 80ae3ca:	4620      	mov	r0, r4
 80ae3cc:	691b      	ldr	r3, [r3, #16]
 80ae3ce:	4798      	blx	r3
 80ae3d0:	2800      	cmp	r0, #0
 80ae3d2:	bf14      	ite	ne
 80ae3d4:	2501      	movne	r5, #1
 80ae3d6:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 80ae3d8:	d105      	bne.n	80ae3e6 <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("caling Stop No more Data and in CLOSE_WAIT");
          stop();       // Close our side
 80ae3da:	6823      	ldr	r3, [r4, #0]
 80ae3dc:	4620      	mov	r0, r4
 80ae3de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80ae3e0:	4798      	blx	r3
 80ae3e2:	e000      	b.n	80ae3e6 <_ZN9TCPClient9connectedEv+0x4e>
 80ae3e4:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 80ae3e6:	4628      	mov	r0, r5
 80ae3e8:	bd38      	pop	{r3, r4, r5, pc}

080ae3ea <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 80ae3ea:	b508      	push	{r3, lr}
   return (status()!=0);
 80ae3ec:	f7ff ffa8 	bl	80ae340 <_ZN9TCPClient6statusEv>
}
 80ae3f0:	3000      	adds	r0, #0
 80ae3f2:	bf18      	it	ne
 80ae3f4:	2001      	movne	r0, #1
 80ae3f6:	bd08      	pop	{r3, pc}

080ae3f8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80ae3f8:	b510      	push	{r4, lr}
 80ae3fa:	4604      	mov	r4, r0
{
	free(buffer);
 80ae3fc:	6800      	ldr	r0, [r0, #0]
 80ae3fe:	f7ff fd85 	bl	80adf0c <free>
}
 80ae402:	4620      	mov	r0, r4
 80ae404:	bd10      	pop	{r4, pc}

080ae406 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80ae406:	b510      	push	{r4, lr}
 80ae408:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80ae40a:	6800      	ldr	r0, [r0, #0]
 80ae40c:	b108      	cbz	r0, 80ae412 <_ZN6String10invalidateEv+0xc>
 80ae40e:	f7ff fd7d 	bl	80adf0c <free>
	buffer = NULL;
 80ae412:	2300      	movs	r3, #0
 80ae414:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80ae416:	60a3      	str	r3, [r4, #8]
 80ae418:	6063      	str	r3, [r4, #4]
 80ae41a:	bd10      	pop	{r4, pc}

080ae41c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80ae41c:	b538      	push	{r3, r4, r5, lr}
 80ae41e:	4604      	mov	r4, r0
 80ae420:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80ae422:	6800      	ldr	r0, [r0, #0]
 80ae424:	3101      	adds	r1, #1
 80ae426:	f7ff fd79 	bl	80adf1c <realloc>
	if (newbuffer) {
 80ae42a:	b110      	cbz	r0, 80ae432 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80ae42c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80ae430:	2001      	movs	r0, #1
	}
	return 0;
}
 80ae432:	bd38      	pop	{r3, r4, r5, pc}

080ae434 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80ae434:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80ae436:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80ae438:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80ae43a:	b113      	cbz	r3, 80ae442 <_ZN6String7reserveEj+0xe>
 80ae43c:	6843      	ldr	r3, [r0, #4]
 80ae43e:	428b      	cmp	r3, r1
 80ae440:	d207      	bcs.n	80ae452 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80ae442:	4620      	mov	r0, r4
 80ae444:	f7ff ffea 	bl	80ae41c <_ZN6String12changeBufferEj>
 80ae448:	b120      	cbz	r0, 80ae454 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80ae44a:	68a3      	ldr	r3, [r4, #8]
 80ae44c:	b90b      	cbnz	r3, 80ae452 <_ZN6String7reserveEj+0x1e>
 80ae44e:	6822      	ldr	r2, [r4, #0]
 80ae450:	7013      	strb	r3, [r2, #0]
 80ae452:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80ae454:	bd10      	pop	{r4, pc}

080ae456 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80ae456:	b570      	push	{r4, r5, r6, lr}
 80ae458:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80ae45a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80ae45c:	4604      	mov	r4, r0
 80ae45e:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80ae460:	f7ff ffe8 	bl	80ae434 <_ZN6String7reserveEj>
 80ae464:	b918      	cbnz	r0, 80ae46e <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80ae466:	4620      	mov	r0, r4
 80ae468:	f7ff ffcd 	bl	80ae406 <_ZN6String10invalidateEv>
		return *this;
 80ae46c:	e009      	b.n	80ae482 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80ae46e:	462a      	mov	r2, r5
 80ae470:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80ae472:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80ae474:	6820      	ldr	r0, [r4, #0]
 80ae476:	f000 fe3c 	bl	80af0f2 <memcpy>
	buffer[len] = 0;
 80ae47a:	6822      	ldr	r2, [r4, #0]
 80ae47c:	68a3      	ldr	r3, [r4, #8]
 80ae47e:	2100      	movs	r1, #0
 80ae480:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80ae482:	4620      	mov	r0, r4
 80ae484:	bd70      	pop	{r4, r5, r6, pc}

080ae486 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80ae486:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80ae488:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80ae48a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80ae48c:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80ae48e:	6043      	str	r3, [r0, #4]
	len = 0;
 80ae490:	6083      	str	r3, [r0, #8]
	flags = 0;
 80ae492:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80ae494:	460d      	mov	r5, r1
 80ae496:	b139      	cbz	r1, 80ae4a8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80ae498:	4608      	mov	r0, r1
 80ae49a:	f000 fe66 	bl	80af16a <strlen>
 80ae49e:	4629      	mov	r1, r5
 80ae4a0:	4602      	mov	r2, r0
 80ae4a2:	4620      	mov	r0, r4
 80ae4a4:	f7ff ffd7 	bl	80ae456 <_ZN6String4copyEPKcj>
}
 80ae4a8:	4620      	mov	r0, r4
 80ae4aa:	bd38      	pop	{r3, r4, r5, pc}

080ae4ac <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80ae4ac:	b538      	push	{r3, r4, r5, lr}
 80ae4ae:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80ae4b0:	460c      	mov	r4, r1
 80ae4b2:	b141      	cbz	r1, 80ae4c6 <_ZN6StringaSEPKc+0x1a>
 80ae4b4:	4608      	mov	r0, r1
 80ae4b6:	f000 fe58 	bl	80af16a <strlen>
 80ae4ba:	4621      	mov	r1, r4
 80ae4bc:	4602      	mov	r2, r0
 80ae4be:	4628      	mov	r0, r5
 80ae4c0:	f7ff ffc9 	bl	80ae456 <_ZN6String4copyEPKcj>
 80ae4c4:	e001      	b.n	80ae4ca <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80ae4c6:	f7ff ff9e 	bl	80ae406 <_ZN6String10invalidateEv>

	return *this;
}
 80ae4ca:	4628      	mov	r0, r5
 80ae4cc:	bd38      	pop	{r3, r4, r5, pc}

080ae4ce <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80ae4ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80ae4d0:	4606      	mov	r6, r0
 80ae4d2:	460d      	mov	r5, r1
 80ae4d4:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80ae4d6:	2400      	movs	r4, #0
  while (size--) {
 80ae4d8:	42bd      	cmp	r5, r7
 80ae4da:	d00c      	beq.n	80ae4f6 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80ae4dc:	6833      	ldr	r3, [r6, #0]
 80ae4de:	f815 1b01 	ldrb.w	r1, [r5], #1
 80ae4e2:	689b      	ldr	r3, [r3, #8]
 80ae4e4:	4630      	mov	r0, r6
 80ae4e6:	4798      	blx	r3
     if (chunk>=0)
 80ae4e8:	2800      	cmp	r0, #0
 80ae4ea:	db01      	blt.n	80ae4f0 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80ae4ec:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80ae4ee:	e7f3      	b.n	80ae4d8 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80ae4f0:	2c00      	cmp	r4, #0
 80ae4f2:	bf08      	it	eq
 80ae4f4:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80ae4f6:	4620      	mov	r0, r4
 80ae4f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080ae4fa <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80ae4fa:	b570      	push	{r4, r5, r6, lr}
 80ae4fc:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80ae4fe:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80ae500:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80ae502:	b149      	cbz	r1, 80ae518 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80ae504:	f000 fe31 	bl	80af16a <strlen>
 80ae508:	682b      	ldr	r3, [r5, #0]
 80ae50a:	4602      	mov	r2, r0
 80ae50c:	4621      	mov	r1, r4
 80ae50e:	4628      	mov	r0, r5
    }
 80ae510:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80ae514:	68db      	ldr	r3, [r3, #12]
 80ae516:	4718      	bx	r3
    }
 80ae518:	bd70      	pop	{r4, r5, r6, pc}

080ae51a <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80ae51a:	6803      	ldr	r3, [r0, #0]
 80ae51c:	689b      	ldr	r3, [r3, #8]
 80ae51e:	4718      	bx	r3

080ae520 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80ae520:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80ae522:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80ae524:	4605      	mov	r5, r0
  size_t n = print('\r');
 80ae526:	f7ff fff8 	bl	80ae51a <_ZN5Print5printEc>
  n += print('\n');
 80ae52a:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80ae52c:	4604      	mov	r4, r0
  n += print('\n');
 80ae52e:	4628      	mov	r0, r5
 80ae530:	f7ff fff3 	bl	80ae51a <_ZN5Print5printEc>
  return n;
}
 80ae534:	4420      	add	r0, r4
 80ae536:	bd38      	pop	{r3, r4, r5, pc}

080ae538 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80ae538:	b538      	push	{r3, r4, r5, lr}
 80ae53a:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80ae53c:	f7ff ffdd 	bl	80ae4fa <_ZN5Print5writeEPKc>
 80ae540:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80ae542:	4628      	mov	r0, r5
 80ae544:	f7ff ffec 	bl	80ae520 <_ZN5Print7printlnEv>
  return n;
}
 80ae548:	4420      	add	r0, r4
 80ae54a:	bd38      	pop	{r3, r4, r5, pc}

080ae54c <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80ae54c:	2a01      	cmp	r2, #1
 80ae54e:	bf98      	it	ls
 80ae550:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80ae552:	b530      	push	{r4, r5, lr}
 80ae554:	460b      	mov	r3, r1
 80ae556:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80ae558:	2100      	movs	r1, #0
 80ae55a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80ae55e:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80ae562:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80ae566:	fb05 3312 	mls	r3, r5, r2, r3
 80ae56a:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80ae56c:	2b09      	cmp	r3, #9
 80ae56e:	bf94      	ite	ls
 80ae570:	3330      	addls	r3, #48	; 0x30
 80ae572:	3337      	addhi	r3, #55	; 0x37
 80ae574:	b2db      	uxtb	r3, r3
 80ae576:	4621      	mov	r1, r4
 80ae578:	f804 3901 	strb.w	r3, [r4], #-1
 80ae57c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80ae57e:	2d00      	cmp	r5, #0
 80ae580:	d1ef      	bne.n	80ae562 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80ae582:	f7ff ffba 	bl	80ae4fa <_ZN5Print5writeEPKc>
}
 80ae586:	b00b      	add	sp, #44	; 0x2c
 80ae588:	bd30      	pop	{r4, r5, pc}

080ae58a <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80ae58a:	b410      	push	{r4}
  if (base == 0) return write(n);
 80ae58c:	b922      	cbnz	r2, 80ae598 <_ZN5Print5printEmi+0xe>
 80ae58e:	6803      	ldr	r3, [r0, #0]
 80ae590:	b2c9      	uxtb	r1, r1
 80ae592:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80ae594:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80ae596:	4718      	bx	r3
  else return printNumber(n, base);
 80ae598:	b2d2      	uxtb	r2, r2
}
 80ae59a:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80ae59c:	f7ff bfd6 	b.w	80ae54c <_ZN5Print11printNumberEmh>

080ae5a0 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80ae5a0:	f7ff bff3 	b.w	80ae58a <_ZN5Print5printEmi>

080ae5a4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80ae5a4:	4a01      	ldr	r2, [pc, #4]	; (80ae5ac <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80ae5a6:	4b02      	ldr	r3, [pc, #8]	; (80ae5b0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80ae5a8:	601a      	str	r2, [r3, #0]
 80ae5aa:	4770      	bx	lr
 80ae5ac:	080b2683 	.word	0x080b2683
 80ae5b0:	20003070 	.word	0x20003070

080ae5b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80ae5b4:	4b02      	ldr	r3, [pc, #8]	; (80ae5c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80ae5b6:	681a      	ldr	r2, [r3, #0]
 80ae5b8:	4b02      	ldr	r3, [pc, #8]	; (80ae5c4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80ae5ba:	601a      	str	r2, [r3, #0]
 80ae5bc:	4770      	bx	lr
 80ae5be:	bf00      	nop
 80ae5c0:	20000330 	.word	0x20000330
 80ae5c4:	20003074 	.word	0x20003074

080ae5c8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80ae5c8:	2100      	movs	r1, #0
 80ae5ca:	f7ff bc77 	b.w	80adebc <system_delay_ms>

080ae5ce <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80ae5ce:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80ae5d0:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80ae5d2:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80ae5d4:	b113      	cbz	r3, 80ae5dc <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80ae5d6:	2203      	movs	r2, #3
 80ae5d8:	4601      	mov	r1, r0
 80ae5da:	4798      	blx	r3
    }
 80ae5dc:	4620      	mov	r0, r4
 80ae5de:	bd10      	pop	{r4, pc}

080ae5e0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80ae5e0:	b510      	push	{r4, lr}
 80ae5e2:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80ae5e4:	f7ff fff3 	bl	80ae5ce <_ZNSt14_Function_baseD1Ev>
 80ae5e8:	4620      	mov	r0, r4
 80ae5ea:	bd10      	pop	{r4, pc}

080ae5ec <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
 80ae5ec:	b510      	push	{r4, lr}
 80ae5ee:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
 80ae5f0:	f7ff fc54 	bl	80ade9c <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
 80ae5f4:	4284      	cmp	r4, r0
 80ae5f6:	d008      	beq.n	80ae60a <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
 80ae5f8:	b11c      	cbz	r4, 80ae602 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
 80ae5fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
 80ae5fe:	f7ff bc3d 	b.w	80ade7c <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
 80ae602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
 80ae606:	f7ff bc41 	b.w	80ade8c <LED_Signaling_Stop>
 80ae60a:	bd10      	pop	{r4, pc}

080ae60c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80ae60c:	4803      	ldr	r0, [pc, #12]	; (80ae61c <_GLOBAL__sub_I_RGB+0x10>)
 80ae60e:	2300      	movs	r3, #0
 80ae610:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80ae612:	4a03      	ldr	r2, [pc, #12]	; (80ae620 <_GLOBAL__sub_I_RGB+0x14>)
 80ae614:	4903      	ldr	r1, [pc, #12]	; (80ae624 <_GLOBAL__sub_I_RGB+0x18>)
 80ae616:	f000 ba69 	b.w	80aeaec <__aeabi_atexit>
 80ae61a:	bf00      	nop
 80ae61c:	20003078 	.word	0x20003078
 80ae620:	20000398 	.word	0x20000398
 80ae624:	080ae5e1 	.word	0x080ae5e1

080ae628 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80ae628:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80ae62a:	4b14      	ldr	r3, [pc, #80]	; (80ae67c <serialEventRun+0x54>)
 80ae62c:	b133      	cbz	r3, 80ae63c <serialEventRun+0x14>
 80ae62e:	f000 f945 	bl	80ae8bc <_Z16_fetch_usbserialv>
 80ae632:	6803      	ldr	r3, [r0, #0]
 80ae634:	691b      	ldr	r3, [r3, #16]
 80ae636:	4798      	blx	r3
 80ae638:	2800      	cmp	r0, #0
 80ae63a:	dc16      	bgt.n	80ae66a <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80ae63c:	4b10      	ldr	r3, [pc, #64]	; (80ae680 <serialEventRun+0x58>)
 80ae63e:	b133      	cbz	r3, 80ae64e <serialEventRun+0x26>
 80ae640:	f000 f9de 	bl	80aea00 <_Z22__fetch_global_Serial1v>
 80ae644:	6803      	ldr	r3, [r0, #0]
 80ae646:	691b      	ldr	r3, [r3, #16]
 80ae648:	4798      	blx	r3
 80ae64a:	2800      	cmp	r0, #0
 80ae64c:	dc10      	bgt.n	80ae670 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80ae64e:	4b0d      	ldr	r3, [pc, #52]	; (80ae684 <serialEventRun+0x5c>)
 80ae650:	b10b      	cbz	r3, 80ae656 <serialEventRun+0x2e>
 80ae652:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80ae656:	4b0c      	ldr	r3, [pc, #48]	; (80ae688 <serialEventRun+0x60>)
 80ae658:	b17b      	cbz	r3, 80ae67a <serialEventRun+0x52>
 80ae65a:	f000 f96b 	bl	80ae934 <_Z17_fetch_usbserial1v>
 80ae65e:	6803      	ldr	r3, [r0, #0]
 80ae660:	691b      	ldr	r3, [r3, #16]
 80ae662:	4798      	blx	r3
 80ae664:	2800      	cmp	r0, #0
 80ae666:	dc06      	bgt.n	80ae676 <serialEventRun+0x4e>
 80ae668:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80ae66a:	f3af 8000 	nop.w
 80ae66e:	e7e5      	b.n	80ae63c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80ae670:	f3af 8000 	nop.w
 80ae674:	e7eb      	b.n	80ae64e <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80ae676:	f3af 8000 	nop.w
 80ae67a:	bd08      	pop	{r3, pc}
	...

080ae68c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80ae68c:	b508      	push	{r3, lr}
	serialEventRun();
 80ae68e:	f7ff ffcb 	bl	80ae628 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80ae692:	f7ff fb23 	bl	80adcdc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80ae696:	4b01      	ldr	r3, [pc, #4]	; (80ae69c <_post_loop+0x10>)
 80ae698:	6018      	str	r0, [r3, #0]
 80ae69a:	bd08      	pop	{r3, pc}
 80ae69c:	20003510 	.word	0x20003510

080ae6a0 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80ae6a0:	4802      	ldr	r0, [pc, #8]	; (80ae6ac <_Z33system_initialize_user_backup_ramv+0xc>)
 80ae6a2:	4a03      	ldr	r2, [pc, #12]	; (80ae6b0 <_Z33system_initialize_user_backup_ramv+0x10>)
 80ae6a4:	4903      	ldr	r1, [pc, #12]	; (80ae6b4 <_Z33system_initialize_user_backup_ramv+0x14>)
 80ae6a6:	1a12      	subs	r2, r2, r0
 80ae6a8:	f000 bd23 	b.w	80af0f2 <memcpy>
 80ae6ac:	40024000 	.word	0x40024000
 80ae6b0:	40024004 	.word	0x40024004
 80ae6b4:	080b2808 	.word	0x080b2808

080ae6b8 <_Z26usb_request_custom_handlerPcjjPj>:
#ifdef USB_VENDOR_REQUEST_ENABLE

// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}
 80ae6b8:	2000      	movs	r0, #0
 80ae6ba:	4770      	bx	lr

080ae6bc <_Z23usb_request_app_handlerP10USBRequestPv>:

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80ae6bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    switch (req->type) {
 80ae6be:	6843      	ldr	r3, [r0, #4]
// Synchronous handler for customizable requests (USBRequestType::USB_REQUEST_CUSTOM)
bool __attribute((weak)) usb_request_custom_handler(char* buf, size_t buf_size, size_t req_size, size_t* rep_size) {
    return false;
}

bool usb_request_app_handler(USBRequest* req, void* reserved) {
 80ae6c0:	4604      	mov	r4, r0
    switch (req->type) {
 80ae6c2:	2b0a      	cmp	r3, #10
 80ae6c4:	d00e      	beq.n	80ae6e4 <_Z23usb_request_app_handlerP10USBRequestPv+0x28>
 80ae6c6:	2b50      	cmp	r3, #80	; 0x50
 80ae6c8:	d11c      	bne.n	80ae704 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
 80ae6ca:	4b10      	ldr	r3, [pc, #64]	; (80ae70c <_Z23usb_request_app_handlerP10USBRequestPv+0x50>)
 80ae6cc:	681d      	ldr	r5, [r3, #0]
 80ae6ce:	b1cd      	cbz	r5, 80ae704 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
 80ae6d0:	7d03      	ldrb	r3, [r0, #20]
 80ae6d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80ae6d6:	9300      	str	r3, [sp, #0]
 80ae6d8:	68c2      	ldr	r2, [r0, #12]
 80ae6da:	f100 0310 	add.w	r3, r0, #16
 80ae6de:	6880      	ldr	r0, [r0, #8]
 80ae6e0:	47a8      	blx	r5
 80ae6e2:	e007      	b.n	80ae6f4 <_Z23usb_request_app_handlerP10USBRequestPv+0x38>
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
        return true;
    }
#endif
    case USB_REQUEST_CUSTOM: {
        if (!usb_request_custom_handler(req->data, USB_REQUEST_BUFFER_SIZE, req->request_size, &req->reply_size)) {
 80ae6e4:	f100 0310 	add.w	r3, r0, #16
 80ae6e8:	68c2      	ldr	r2, [r0, #12]
 80ae6ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80ae6ee:	6880      	ldr	r0, [r0, #8]
 80ae6f0:	f7ff ffe2 	bl	80ae6b8 <_Z26usb_request_custom_handlerPcjjPj>
 80ae6f4:	b130      	cbz	r0, 80ae704 <_Z23usb_request_app_handlerP10USBRequestPv+0x48>
            return false;
        }
        system_set_usb_request_result(req, USB_REQUEST_RESULT_OK, nullptr);
 80ae6f6:	2200      	movs	r2, #0
 80ae6f8:	4620      	mov	r0, r4
 80ae6fa:	4611      	mov	r1, r2
 80ae6fc:	f7ff fbee 	bl	80adedc <system_set_usb_request_result>
        return true;
 80ae700:	2001      	movs	r0, #1
 80ae702:	e000      	b.n	80ae706 <_Z23usb_request_app_handlerP10USBRequestPv+0x4a>
    switch (req->type) {
#if Wiring_LogConfig
    case USB_REQUEST_LOG_CONFIG: {
        if (!log_process_config_request_callback || !log_process_config_request_callback(req->data, USB_REQUEST_BUFFER_SIZE,
                req->request_size, &req->reply_size, (DataFormat)req->format)) {
            return false;
 80ae704:	2000      	movs	r0, #0
        return true;
    }
    default:
        return false; // Unsupported request type
    }
}
 80ae706:	b003      	add	sp, #12
 80ae708:	bd30      	pop	{r4, r5, pc}
 80ae70a:	bf00      	nop
 80ae70c:	20003088 	.word	0x20003088

080ae710 <module_user_init_hook>:

#endif // USB_VENDOR_REQUEST_ENABLE

void module_user_init_hook()
{
 80ae710:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80ae712:	4c0c      	ldr	r4, [pc, #48]	; (80ae744 <module_user_init_hook+0x34>)
 80ae714:	4d0c      	ldr	r5, [pc, #48]	; (80ae748 <module_user_init_hook+0x38>)
 80ae716:	6823      	ldr	r3, [r4, #0]
 80ae718:	42ab      	cmp	r3, r5
 80ae71a:	4b0c      	ldr	r3, [pc, #48]	; (80ae74c <module_user_init_hook+0x3c>)
 80ae71c:	bf0c      	ite	eq
 80ae71e:	2201      	moveq	r2, #1
 80ae720:	2200      	movne	r2, #0
 80ae722:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80ae724:	d002      	beq.n	80ae72c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80ae726:	f7ff ffbb 	bl	80ae6a0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80ae72a:	6025      	str	r5, [r4, #0]
    /* for dynamically linked user part, set the random seed if the user
     * app defines random_seed_from_cloud.
     */
// todo - add a RNG define for that capability
#if defined(STM32F2XX)
    if (random_seed_from_cloud) {
 80ae72c:	4b08      	ldr	r3, [pc, #32]	; (80ae750 <module_user_init_hook+0x40>)
 80ae72e:	b11b      	cbz	r3, 80ae738 <module_user_init_hook+0x28>
    		uint32_t seed = HAL_RNG_GetRandomNumber();
 80ae730:	f7ff facc 	bl	80adccc <HAL_RNG_GetRandomNumber>
    		random_seed_from_cloud(seed);
 80ae734:	f3af 8000 	nop.w
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
#endif
}
 80ae738:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    		random_seed_from_cloud(seed);
    }
#endif

#ifdef USB_VENDOR_REQUEST_ENABLE
    system_set_usb_request_app_handler(usb_request_app_handler, nullptr);
 80ae73c:	2100      	movs	r1, #0
 80ae73e:	4805      	ldr	r0, [pc, #20]	; (80ae754 <module_user_init_hook+0x44>)
 80ae740:	f7ff bbc4 	b.w	80adecc <system_set_usb_request_app_handler>
 80ae744:	40024000 	.word	0x40024000
 80ae748:	9a271c1e 	.word	0x9a271c1e
 80ae74c:	2000308c 	.word	0x2000308c
 80ae750:	00000000 	.word	0x00000000
 80ae754:	080ae6bd 	.word	0x080ae6bd

080ae758 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80ae758:	4770      	bx	lr

080ae75a <_ZN9IPAddressD0Ev>:
 80ae75a:	b510      	push	{r4, lr}
 80ae75c:	4604      	mov	r4, r0
 80ae75e:	f7f1 fca0 	bl	80a00a2 <_ZdlPv>
 80ae762:	4620      	mov	r0, r4
 80ae764:	bd10      	pop	{r4, pc}

080ae766 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80ae766:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80ae768:	460f      	mov	r7, r1
 80ae76a:	f100 0608 	add.w	r6, r0, #8
 80ae76e:	1d05      	adds	r5, r0, #4
 80ae770:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80ae772:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80ae776:	220a      	movs	r2, #10
 80ae778:	4638      	mov	r0, r7
 80ae77a:	f7ff ff11 	bl	80ae5a0 <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80ae77e:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80ae780:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80ae782:	d007      	beq.n	80ae794 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80ae784:	2c00      	cmp	r4, #0
 80ae786:	d0f4      	beq.n	80ae772 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80ae788:	212e      	movs	r1, #46	; 0x2e
 80ae78a:	4638      	mov	r0, r7
 80ae78c:	f7ff fec5 	bl	80ae51a <_ZN5Print5printEc>
 80ae790:	4404      	add	r4, r0
 80ae792:	e7ee      	b.n	80ae772 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80ae794:	4620      	mov	r0, r4
 80ae796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080ae798 <_ZN9IPAddressC1Ev>:
#include "spark_wiring_ipaddress.h"
#include "spark_wiring_print.h"
#include "spark_wiring_platform.h"
#include "string.h"

IPAddress::IPAddress()
 80ae798:	b510      	push	{r4, lr}
 80ae79a:	4604      	mov	r4, r0
 80ae79c:	4b04      	ldr	r3, [pc, #16]	; (80ae7b0 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80ae79e:	2211      	movs	r2, #17
 80ae7a0:	f840 3b04 	str.w	r3, [r0], #4
 80ae7a4:	2100      	movs	r1, #0
 80ae7a6:	f000 fcca 	bl	80af13e <memset>
{
    clear();
}
 80ae7aa:	4620      	mov	r0, r4
 80ae7ac:	bd10      	pop	{r4, pc}
 80ae7ae:	bf00      	nop
 80ae7b0:	080b26e0 	.word	0x080b26e0

080ae7b4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80ae7b4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80ae7b6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80ae7ba:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80ae7be:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80ae7c2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80ae7c6:	2304      	movs	r3, #4
 80ae7c8:	6041      	str	r1, [r0, #4]
 80ae7ca:	7503      	strb	r3, [r0, #20]
 80ae7cc:	bd10      	pop	{r4, pc}
	...

080ae7d0 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80ae7d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80ae7d2:	4d04      	ldr	r5, [pc, #16]	; (80ae7e4 <_ZN9IPAddressC1Ehhhh+0x14>)
 80ae7d4:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80ae7d6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80ae7da:	9500      	str	r5, [sp, #0]
 80ae7dc:	f7ff ffea 	bl	80ae7b4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80ae7e0:	b003      	add	sp, #12
 80ae7e2:	bd30      	pop	{r4, r5, pc}
 80ae7e4:	080b26e0 	.word	0x080b26e0

080ae7e8 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80ae7e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80ae7ea:	780d      	ldrb	r5, [r1, #0]
 80ae7ec:	788b      	ldrb	r3, [r1, #2]
 80ae7ee:	784a      	ldrb	r2, [r1, #1]
 80ae7f0:	78c9      	ldrb	r1, [r1, #3]
 80ae7f2:	9100      	str	r1, [sp, #0]
 80ae7f4:	4629      	mov	r1, r5
 80ae7f6:	f7ff ffdd 	bl	80ae7b4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80ae7fa:	b003      	add	sp, #12
 80ae7fc:	bd30      	pop	{r4, r5, pc}
	...

080ae800 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
 80ae800:	b510      	push	{r4, lr}
 80ae802:	4604      	mov	r4, r0
 80ae804:	4b02      	ldr	r3, [pc, #8]	; (80ae810 <_ZN9IPAddressC1EPKh+0x10>)
 80ae806:	6003      	str	r3, [r0, #0]
{
    *this = address;
 80ae808:	f7ff ffee 	bl	80ae7e8 <_ZN9IPAddressaSEPKh>
}
 80ae80c:	4620      	mov	r0, r4
 80ae80e:	bd10      	pop	{r4, pc}
 80ae810:	080b26e0 	.word	0x080b26e0

080ae814 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80ae814:	7441      	strb	r1, [r0, #17]
 80ae816:	4770      	bx	lr

080ae818 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80ae818:	4770      	bx	lr

080ae81a <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80ae81a:	2100      	movs	r1, #0
 80ae81c:	7c00      	ldrb	r0, [r0, #16]
 80ae81e:	f7ff bb05 	b.w	80ade2c <HAL_USB_USART_Receive_Data>

080ae822 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80ae822:	2101      	movs	r1, #1
 80ae824:	7c00      	ldrb	r0, [r0, #16]
 80ae826:	f7ff bb01 	b.w	80ade2c <HAL_USB_USART_Receive_Data>

080ae82a <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80ae82a:	7c00      	ldrb	r0, [r0, #16]
 80ae82c:	f7ff baf6 	b.w	80ade1c <HAL_USB_USART_Available_Data_For_Write>

080ae830 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80ae830:	7c00      	ldrb	r0, [r0, #16]
 80ae832:	f7ff baeb 	b.w	80ade0c <HAL_USB_USART_Available_Data>

080ae836 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80ae836:	b538      	push	{r3, r4, r5, lr}
 80ae838:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80ae83a:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80ae83c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80ae83e:	f7ff faed 	bl	80ade1c <HAL_USB_USART_Available_Data_For_Write>
 80ae842:	2800      	cmp	r0, #0
 80ae844:	dc01      	bgt.n	80ae84a <_ZN9USBSerial5writeEh+0x14>
 80ae846:	7c60      	ldrb	r0, [r4, #17]
 80ae848:	b120      	cbz	r0, 80ae854 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80ae84a:	4629      	mov	r1, r5
 80ae84c:	7c20      	ldrb	r0, [r4, #16]
 80ae84e:	f7ff faf5 	bl	80ade3c <HAL_USB_USART_Send_Data>
    return 1;
 80ae852:	2001      	movs	r0, #1
  }
  return 0;
}
 80ae854:	bd38      	pop	{r3, r4, r5, pc}

080ae856 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80ae856:	7c00      	ldrb	r0, [r0, #16]
 80ae858:	f7ff baf8 	b.w	80ade4c <HAL_USB_USART_Flush_Data>

080ae85c <_ZN9USBSerialD0Ev>:
 80ae85c:	b510      	push	{r4, lr}
 80ae85e:	4604      	mov	r4, r0
 80ae860:	f7f1 fc1f 	bl	80a00a2 <_ZdlPv>
 80ae864:	4620      	mov	r0, r4
 80ae866:	bd10      	pop	{r4, pc}

080ae868 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80ae868:	b510      	push	{r4, lr}
 80ae86a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80ae86c:	2300      	movs	r3, #0
 80ae86e:	6063      	str	r3, [r4, #4]
 80ae870:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80ae874:	60a3      	str	r3, [r4, #8]
 80ae876:	4b05      	ldr	r3, [pc, #20]	; (80ae88c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80ae878:	4608      	mov	r0, r1
 80ae87a:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80ae87c:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80ae87e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80ae880:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80ae882:	4611      	mov	r1, r2
 80ae884:	f7ff faba 	bl	80addfc <HAL_USB_USART_Init>
}
 80ae888:	4620      	mov	r0, r4
 80ae88a:	bd10      	pop	{r4, pc}
 80ae88c:	080b26f4 	.word	0x080b26f4

080ae890 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80ae890:	b510      	push	{r4, lr}
 80ae892:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80ae894:	2214      	movs	r2, #20
 80ae896:	2100      	movs	r1, #0
 80ae898:	f000 fc51 	bl	80af13e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80ae89c:	4b05      	ldr	r3, [pc, #20]	; (80ae8b4 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80ae89e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80ae8a0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80ae8a2:	4b05      	ldr	r3, [pc, #20]	; (80ae8b8 <_Z19acquireSerialBufferv+0x28>)
 80ae8a4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80ae8a6:	f240 1301 	movw	r3, #257	; 0x101
 80ae8aa:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80ae8ac:	2381      	movs	r3, #129	; 0x81
 80ae8ae:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80ae8b0:	bd10      	pop	{r4, pc}
 80ae8b2:	bf00      	nop
 80ae8b4:	20003115 	.word	0x20003115
 80ae8b8:	20003094 	.word	0x20003094

080ae8bc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80ae8bc:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80ae8be:	4d0e      	ldr	r5, [pc, #56]	; (80ae8f8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80ae8c0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80ae8c2:	a801      	add	r0, sp, #4
 80ae8c4:	f7ff ffe4 	bl	80ae890 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80ae8c8:	6829      	ldr	r1, [r5, #0]
 80ae8ca:	f011 0401 	ands.w	r4, r1, #1
 80ae8ce:	d110      	bne.n	80ae8f2 <_Z16_fetch_usbserialv+0x36>
 80ae8d0:	4628      	mov	r0, r5
 80ae8d2:	f7f1 fbea 	bl	80a00aa <__cxa_guard_acquire>
 80ae8d6:	b160      	cbz	r0, 80ae8f2 <_Z16_fetch_usbserialv+0x36>
 80ae8d8:	aa01      	add	r2, sp, #4
 80ae8da:	4621      	mov	r1, r4
 80ae8dc:	4807      	ldr	r0, [pc, #28]	; (80ae8fc <_Z16_fetch_usbserialv+0x40>)
 80ae8de:	f7ff ffc3 	bl	80ae868 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80ae8e2:	4628      	mov	r0, r5
 80ae8e4:	f7f1 fbe6 	bl	80a00b4 <__cxa_guard_release>
 80ae8e8:	4a05      	ldr	r2, [pc, #20]	; (80ae900 <_Z16_fetch_usbserialv+0x44>)
 80ae8ea:	4906      	ldr	r1, [pc, #24]	; (80ae904 <_Z16_fetch_usbserialv+0x48>)
 80ae8ec:	4803      	ldr	r0, [pc, #12]	; (80ae8fc <_Z16_fetch_usbserialv+0x40>)
 80ae8ee:	f000 f8fd 	bl	80aeaec <__aeabi_atexit>
	return _usbserial;
}
 80ae8f2:	4802      	ldr	r0, [pc, #8]	; (80ae8fc <_Z16_fetch_usbserialv+0x40>)
 80ae8f4:	b007      	add	sp, #28
 80ae8f6:	bd30      	pop	{r4, r5, pc}
 80ae8f8:	20003090 	.word	0x20003090
 80ae8fc:	20003218 	.word	0x20003218
 80ae900:	20000398 	.word	0x20000398
 80ae904:	080ae819 	.word	0x080ae819

080ae908 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80ae908:	b510      	push	{r4, lr}
 80ae90a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80ae90c:	2214      	movs	r2, #20
 80ae90e:	2100      	movs	r1, #0
 80ae910:	f000 fc15 	bl	80af13e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80ae914:	4b05      	ldr	r3, [pc, #20]	; (80ae92c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80ae916:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80ae918:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80ae91a:	4b05      	ldr	r3, [pc, #20]	; (80ae930 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80ae91c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80ae91e:	f240 1301 	movw	r3, #257	; 0x101
 80ae922:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80ae924:	2381      	movs	r3, #129	; 0x81
 80ae926:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80ae928:	bd10      	pop	{r4, pc}
 80ae92a:	bf00      	nop
 80ae92c:	200032c8 	.word	0x200032c8
 80ae930:	20003230 	.word	0x20003230

080ae934 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80ae934:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80ae936:	4c0e      	ldr	r4, [pc, #56]	; (80ae970 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80ae938:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80ae93a:	a801      	add	r0, sp, #4
 80ae93c:	f7ff ffe4 	bl	80ae908 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80ae940:	6823      	ldr	r3, [r4, #0]
 80ae942:	07db      	lsls	r3, r3, #31
 80ae944:	d410      	bmi.n	80ae968 <_Z17_fetch_usbserial1v+0x34>
 80ae946:	4620      	mov	r0, r4
 80ae948:	f7f1 fbaf 	bl	80a00aa <__cxa_guard_acquire>
 80ae94c:	b160      	cbz	r0, 80ae968 <_Z17_fetch_usbserial1v+0x34>
 80ae94e:	aa01      	add	r2, sp, #4
 80ae950:	2101      	movs	r1, #1
 80ae952:	4808      	ldr	r0, [pc, #32]	; (80ae974 <_Z17_fetch_usbserial1v+0x40>)
 80ae954:	f7ff ff88 	bl	80ae868 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80ae958:	4620      	mov	r0, r4
 80ae95a:	f7f1 fbab 	bl	80a00b4 <__cxa_guard_release>
 80ae95e:	4a06      	ldr	r2, [pc, #24]	; (80ae978 <_Z17_fetch_usbserial1v+0x44>)
 80ae960:	4906      	ldr	r1, [pc, #24]	; (80ae97c <_Z17_fetch_usbserial1v+0x48>)
 80ae962:	4804      	ldr	r0, [pc, #16]	; (80ae974 <_Z17_fetch_usbserial1v+0x40>)
 80ae964:	f000 f8c2 	bl	80aeaec <__aeabi_atexit>
  return _usbserial1;
}
 80ae968:	4802      	ldr	r0, [pc, #8]	; (80ae974 <_Z17_fetch_usbserial1v+0x40>)
 80ae96a:	b006      	add	sp, #24
 80ae96c:	bd10      	pop	{r4, pc}
 80ae96e:	bf00      	nop
 80ae970:	2000322c 	.word	0x2000322c
 80ae974:	200032b4 	.word	0x200032b4
 80ae978:	20000398 	.word	0x20000398
 80ae97c:	080ae819 	.word	0x080ae819

080ae980 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80ae980:	4770      	bx	lr

080ae982 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80ae982:	7441      	strb	r1, [r0, #17]
 80ae984:	4770      	bx	lr

080ae986 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80ae986:	7c00      	ldrb	r0, [r0, #16]
 80ae988:	f7ff b9f0 	b.w	80add6c <HAL_USART_Available_Data_For_Write>

080ae98c <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80ae98c:	7c00      	ldrb	r0, [r0, #16]
 80ae98e:	f7ff b9cd 	b.w	80add2c <HAL_USART_Available_Data>

080ae992 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80ae992:	7c00      	ldrb	r0, [r0, #16]
 80ae994:	f7ff b9da 	b.w	80add4c <HAL_USART_Peek_Data>

080ae998 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80ae998:	7c00      	ldrb	r0, [r0, #16]
 80ae99a:	f7ff b9cf 	b.w	80add3c <HAL_USART_Read_Data>

080ae99e <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80ae99e:	7c00      	ldrb	r0, [r0, #16]
 80ae9a0:	f7ff b9dc 	b.w	80add5c <HAL_USART_Flush_Data>

080ae9a4 <_ZN11USARTSerialD0Ev>:
 80ae9a4:	b510      	push	{r4, lr}
 80ae9a6:	4604      	mov	r4, r0
 80ae9a8:	f7f1 fb7b 	bl	80a00a2 <_ZdlPv>
 80ae9ac:	4620      	mov	r0, r4
 80ae9ae:	bd10      	pop	{r4, pc}

080ae9b0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80ae9b0:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80ae9b2:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80ae9b4:	4604      	mov	r4, r0
 80ae9b6:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80ae9b8:	b925      	cbnz	r5, 80ae9c4 <_ZN11USARTSerial5writeEh+0x14>
 80ae9ba:	7c00      	ldrb	r0, [r0, #16]
 80ae9bc:	f7ff f9d6 	bl	80add6c <HAL_USART_Available_Data_For_Write>
 80ae9c0:	2800      	cmp	r0, #0
 80ae9c2:	dd05      	ble.n	80ae9d0 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80ae9c4:	4631      	mov	r1, r6
 80ae9c6:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80ae9c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80ae9cc:	f7ff b9a6 	b.w	80add1c <HAL_USART_Write_Data>
  }
  return 0;
}
 80ae9d0:	4628      	mov	r0, r5
 80ae9d2:	bd70      	pop	{r4, r5, r6, pc}

080ae9d4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80ae9d4:	b510      	push	{r4, lr}
 80ae9d6:	4604      	mov	r4, r0
 80ae9d8:	4608      	mov	r0, r1
 80ae9da:	4611      	mov	r1, r2
 80ae9dc:	2200      	movs	r2, #0
 80ae9de:	6062      	str	r2, [r4, #4]
 80ae9e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80ae9e4:	60a2      	str	r2, [r4, #8]
 80ae9e6:	4a05      	ldr	r2, [pc, #20]	; (80ae9fc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80ae9e8:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80ae9ea:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80ae9ec:	2201      	movs	r2, #1
 80ae9ee:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80ae9f0:	461a      	mov	r2, r3
 80ae9f2:	f7ff f98b 	bl	80add0c <HAL_USART_Init>
}
 80ae9f6:	4620      	mov	r0, r4
 80ae9f8:	bd10      	pop	{r4, pc}
 80ae9fa:	bf00      	nop
 80ae9fc:	080b2724 	.word	0x080b2724

080aea00 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80aea00:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80aea02:	4d0c      	ldr	r5, [pc, #48]	; (80aea34 <_Z22__fetch_global_Serial1v+0x34>)
 80aea04:	6829      	ldr	r1, [r5, #0]
 80aea06:	f011 0401 	ands.w	r4, r1, #1
 80aea0a:	d111      	bne.n	80aea30 <_Z22__fetch_global_Serial1v+0x30>
 80aea0c:	4628      	mov	r0, r5
 80aea0e:	f7f1 fb4c 	bl	80a00aa <__cxa_guard_acquire>
 80aea12:	b168      	cbz	r0, 80aea30 <_Z22__fetch_global_Serial1v+0x30>
 80aea14:	4a08      	ldr	r2, [pc, #32]	; (80aea38 <_Z22__fetch_global_Serial1v+0x38>)
 80aea16:	4621      	mov	r1, r4
 80aea18:	4b08      	ldr	r3, [pc, #32]	; (80aea3c <_Z22__fetch_global_Serial1v+0x3c>)
 80aea1a:	4809      	ldr	r0, [pc, #36]	; (80aea40 <_Z22__fetch_global_Serial1v+0x40>)
 80aea1c:	f7ff ffda 	bl	80ae9d4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80aea20:	4628      	mov	r0, r5
 80aea22:	f7f1 fb47 	bl	80a00b4 <__cxa_guard_release>
 80aea26:	4a07      	ldr	r2, [pc, #28]	; (80aea44 <_Z22__fetch_global_Serial1v+0x44>)
 80aea28:	4907      	ldr	r1, [pc, #28]	; (80aea48 <_Z22__fetch_global_Serial1v+0x48>)
 80aea2a:	4805      	ldr	r0, [pc, #20]	; (80aea40 <_Z22__fetch_global_Serial1v+0x40>)
 80aea2c:	f000 f85e 	bl	80aeaec <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80aea30:	4803      	ldr	r0, [pc, #12]	; (80aea40 <_Z22__fetch_global_Serial1v+0x40>)
 80aea32:	bd38      	pop	{r3, r4, r5, pc}
 80aea34:	20003464 	.word	0x20003464
 80aea38:	20003468 	.word	0x20003468
 80aea3c:	200033e0 	.word	0x200033e0
 80aea40:	200033cc 	.word	0x200033cc
 80aea44:	20000398 	.word	0x20000398
 80aea48:	080ae981 	.word	0x080ae981

080aea4c <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80aea4c:	4770      	bx	lr

080aea4e <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80aea4e:	2200      	movs	r2, #0
 80aea50:	4611      	mov	r1, r2
 80aea52:	4610      	mov	r0, r2
 80aea54:	f7ff ba4a 	b.w	80adeec <network_ready>

080aea58 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80aea58:	4803      	ldr	r0, [pc, #12]	; (80aea68 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x10>)
 80aea5a:	4b04      	ldr	r3, [pc, #16]	; (80aea6c <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80aea5c:	4a04      	ldr	r2, [pc, #16]	; (80aea70 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x18>)
 80aea5e:	4905      	ldr	r1, [pc, #20]	; (80aea74 <_GLOBAL__sub_I__ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x1c>)
 80aea60:	6003      	str	r3, [r0, #0]
 80aea62:	f000 b843 	b.w	80aeaec <__aeabi_atexit>
 80aea66:	bf00      	nop
 80aea68:	200034ec 	.word	0x200034ec
 80aea6c:	080b2754 	.word	0x080b2754
 80aea70:	20000398 	.word	0x20000398
 80aea74:	080aea4d 	.word	0x080aea4d

080aea78 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80aea78:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80aea7a:	4c0c      	ldr	r4, [pc, #48]	; (80aeaac <_GLOBAL__sub_I_SPI+0x34>)
 80aea7c:	4e0c      	ldr	r6, [pc, #48]	; (80aeab0 <_GLOBAL__sub_I_SPI+0x38>)
 80aea7e:	4d0d      	ldr	r5, [pc, #52]	; (80aeab4 <_GLOBAL__sub_I_SPI+0x3c>)
 80aea80:	2100      	movs	r1, #0
 80aea82:	4620      	mov	r0, r4
 80aea84:	f7ff fa72 	bl	80adf6c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80aea88:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80aea8a:	4c0b      	ldr	r4, [pc, #44]	; (80aeab8 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80aea8c:	4632      	mov	r2, r6
 80aea8e:	4629      	mov	r1, r5
 80aea90:	f000 f82c 	bl	80aeaec <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80aea94:	2101      	movs	r1, #1
 80aea96:	4620      	mov	r0, r4
 80aea98:	f7ff fa68 	bl	80adf6c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80aea9c:	4632      	mov	r2, r6
 80aea9e:	4629      	mov	r1, r5
 80aeaa0:	4620      	mov	r0, r4
 80aeaa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80aeaa6:	f000 b821 	b.w	80aeaec <__aeabi_atexit>
 80aeaaa:	bf00      	nop
 80aeaac:	200034f0 	.word	0x200034f0
 80aeab0:	20000398 	.word	0x20000398
 80aeab4:	080adf5d 	.word	0x080adf5d
 80aeab8:	20003500 	.word	0x20003500

080aeabc <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80aeabc:	b513      	push	{r0, r1, r4, lr}
 80aeabe:	4c08      	ldr	r4, [pc, #32]	; (80aeae0 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80aeac0:	2300      	movs	r3, #0
 80aeac2:	461a      	mov	r2, r3
 80aeac4:	4619      	mov	r1, r3
 80aeac6:	9300      	str	r3, [sp, #0]
 80aeac8:	4620      	mov	r0, r4
 80aeaca:	f7ff fe81 	bl	80ae7d0 <_ZN9IPAddressC1Ehhhh>
 80aeace:	4620      	mov	r0, r4
 80aead0:	4a04      	ldr	r2, [pc, #16]	; (80aeae4 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80aead2:	4905      	ldr	r1, [pc, #20]	; (80aeae8 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80aead4:	b002      	add	sp, #8
 80aead6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80aeada:	f000 b807 	b.w	80aeaec <__aeabi_atexit>
 80aeade:	bf00      	nop
 80aeae0:	20003514 	.word	0x20003514
 80aeae4:	20000398 	.word	0x20000398
 80aeae8:	080ae759 	.word	0x080ae759

080aeaec <__aeabi_atexit>:
 80aeaec:	460b      	mov	r3, r1
 80aeaee:	4601      	mov	r1, r0
 80aeaf0:	4618      	mov	r0, r3
 80aeaf2:	f000 bae1 	b.w	80af0b8 <__cxa_atexit>
	...

080aeaf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80aeaf8:	4b18      	ldr	r3, [pc, #96]	; (80aeb5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80aeafa:	681a      	ldr	r2, [r3, #0]
 80aeafc:	07d1      	lsls	r1, r2, #31
 80aeafe:	bf5c      	itt	pl
 80aeb00:	2201      	movpl	r2, #1
 80aeb02:	601a      	strpl	r2, [r3, #0]
 80aeb04:	4b16      	ldr	r3, [pc, #88]	; (80aeb60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80aeb06:	681a      	ldr	r2, [r3, #0]
 80aeb08:	07d2      	lsls	r2, r2, #31
 80aeb0a:	bf5c      	itt	pl
 80aeb0c:	2201      	movpl	r2, #1
 80aeb0e:	601a      	strpl	r2, [r3, #0]
 80aeb10:	4b14      	ldr	r3, [pc, #80]	; (80aeb64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80aeb12:	681a      	ldr	r2, [r3, #0]
 80aeb14:	07d0      	lsls	r0, r2, #31
 80aeb16:	bf5c      	itt	pl
 80aeb18:	2201      	movpl	r2, #1
 80aeb1a:	601a      	strpl	r2, [r3, #0]
 80aeb1c:	4b12      	ldr	r3, [pc, #72]	; (80aeb68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80aeb1e:	681a      	ldr	r2, [r3, #0]
 80aeb20:	07d1      	lsls	r1, r2, #31
 80aeb22:	bf5c      	itt	pl
 80aeb24:	2201      	movpl	r2, #1
 80aeb26:	601a      	strpl	r2, [r3, #0]
 80aeb28:	4b10      	ldr	r3, [pc, #64]	; (80aeb6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80aeb2a:	681a      	ldr	r2, [r3, #0]
 80aeb2c:	07d2      	lsls	r2, r2, #31
 80aeb2e:	bf5c      	itt	pl
 80aeb30:	2201      	movpl	r2, #1
 80aeb32:	601a      	strpl	r2, [r3, #0]
 80aeb34:	4b0e      	ldr	r3, [pc, #56]	; (80aeb70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80aeb36:	681a      	ldr	r2, [r3, #0]
 80aeb38:	07d0      	lsls	r0, r2, #31
 80aeb3a:	bf5c      	itt	pl
 80aeb3c:	2201      	movpl	r2, #1
 80aeb3e:	601a      	strpl	r2, [r3, #0]
 80aeb40:	4b0c      	ldr	r3, [pc, #48]	; (80aeb74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80aeb42:	681a      	ldr	r2, [r3, #0]
 80aeb44:	07d1      	lsls	r1, r2, #31
 80aeb46:	bf5c      	itt	pl
 80aeb48:	2201      	movpl	r2, #1
 80aeb4a:	601a      	strpl	r2, [r3, #0]
 80aeb4c:	4b0a      	ldr	r3, [pc, #40]	; (80aeb78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80aeb4e:	681a      	ldr	r2, [r3, #0]
 80aeb50:	07d2      	lsls	r2, r2, #31
 80aeb52:	bf5c      	itt	pl
 80aeb54:	2201      	movpl	r2, #1
 80aeb56:	601a      	strpl	r2, [r3, #0]
 80aeb58:	4770      	bx	lr
 80aeb5a:	bf00      	nop
 80aeb5c:	20003548 	.word	0x20003548
 80aeb60:	20003544 	.word	0x20003544
 80aeb64:	20003540 	.word	0x20003540
 80aeb68:	2000353c 	.word	0x2000353c
 80aeb6c:	20003538 	.word	0x20003538
 80aeb70:	20003534 	.word	0x20003534
 80aeb74:	20003530 	.word	0x20003530
 80aeb78:	2000352c 	.word	0x2000352c

080aeb7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80aeb7c:	4b24      	ldr	r3, [pc, #144]	; (80aec10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80aeb7e:	681a      	ldr	r2, [r3, #0]
 80aeb80:	07d0      	lsls	r0, r2, #31
 80aeb82:	bf5c      	itt	pl
 80aeb84:	2201      	movpl	r2, #1
 80aeb86:	601a      	strpl	r2, [r3, #0]
 80aeb88:	4b22      	ldr	r3, [pc, #136]	; (80aec14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80aeb8a:	681a      	ldr	r2, [r3, #0]
 80aeb8c:	07d1      	lsls	r1, r2, #31
 80aeb8e:	bf5c      	itt	pl
 80aeb90:	2201      	movpl	r2, #1
 80aeb92:	601a      	strpl	r2, [r3, #0]
 80aeb94:	4b20      	ldr	r3, [pc, #128]	; (80aec18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80aeb96:	681a      	ldr	r2, [r3, #0]
 80aeb98:	07d2      	lsls	r2, r2, #31
 80aeb9a:	bf5c      	itt	pl
 80aeb9c:	2201      	movpl	r2, #1
 80aeb9e:	601a      	strpl	r2, [r3, #0]
 80aeba0:	4b1e      	ldr	r3, [pc, #120]	; (80aec1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80aeba2:	681a      	ldr	r2, [r3, #0]
 80aeba4:	07d0      	lsls	r0, r2, #31
 80aeba6:	bf5c      	itt	pl
 80aeba8:	2201      	movpl	r2, #1
 80aebaa:	601a      	strpl	r2, [r3, #0]
 80aebac:	4b1c      	ldr	r3, [pc, #112]	; (80aec20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80aebae:	681a      	ldr	r2, [r3, #0]
 80aebb0:	07d1      	lsls	r1, r2, #31
 80aebb2:	bf5c      	itt	pl
 80aebb4:	2201      	movpl	r2, #1
 80aebb6:	601a      	strpl	r2, [r3, #0]
 80aebb8:	4b1a      	ldr	r3, [pc, #104]	; (80aec24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80aebba:	681a      	ldr	r2, [r3, #0]
 80aebbc:	07d2      	lsls	r2, r2, #31
 80aebbe:	bf5c      	itt	pl
 80aebc0:	2201      	movpl	r2, #1
 80aebc2:	601a      	strpl	r2, [r3, #0]
 80aebc4:	4b18      	ldr	r3, [pc, #96]	; (80aec28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80aebc6:	681a      	ldr	r2, [r3, #0]
 80aebc8:	07d0      	lsls	r0, r2, #31
 80aebca:	bf5c      	itt	pl
 80aebcc:	2201      	movpl	r2, #1
 80aebce:	601a      	strpl	r2, [r3, #0]
 80aebd0:	4b16      	ldr	r3, [pc, #88]	; (80aec2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80aebd2:	681a      	ldr	r2, [r3, #0]
 80aebd4:	07d1      	lsls	r1, r2, #31
 80aebd6:	bf5c      	itt	pl
 80aebd8:	2201      	movpl	r2, #1
 80aebda:	601a      	strpl	r2, [r3, #0]
 80aebdc:	4b14      	ldr	r3, [pc, #80]	; (80aec30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80aebde:	681a      	ldr	r2, [r3, #0]
 80aebe0:	07d2      	lsls	r2, r2, #31
 80aebe2:	bf5c      	itt	pl
 80aebe4:	2201      	movpl	r2, #1
 80aebe6:	601a      	strpl	r2, [r3, #0]
 80aebe8:	4b12      	ldr	r3, [pc, #72]	; (80aec34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80aebea:	681a      	ldr	r2, [r3, #0]
 80aebec:	07d0      	lsls	r0, r2, #31
 80aebee:	bf5c      	itt	pl
 80aebf0:	2201      	movpl	r2, #1
 80aebf2:	601a      	strpl	r2, [r3, #0]
 80aebf4:	4b10      	ldr	r3, [pc, #64]	; (80aec38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80aebf6:	681a      	ldr	r2, [r3, #0]
 80aebf8:	07d1      	lsls	r1, r2, #31
 80aebfa:	bf5c      	itt	pl
 80aebfc:	2201      	movpl	r2, #1
 80aebfe:	601a      	strpl	r2, [r3, #0]
 80aec00:	4b0e      	ldr	r3, [pc, #56]	; (80aec3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80aec02:	681a      	ldr	r2, [r3, #0]
 80aec04:	07d2      	lsls	r2, r2, #31
 80aec06:	bf5c      	itt	pl
 80aec08:	2201      	movpl	r2, #1
 80aec0a:	601a      	strpl	r2, [r3, #0]
 80aec0c:	4770      	bx	lr
 80aec0e:	bf00      	nop
 80aec10:	20003578 	.word	0x20003578
 80aec14:	20003574 	.word	0x20003574
 80aec18:	20003570 	.word	0x20003570
 80aec1c:	2000356c 	.word	0x2000356c
 80aec20:	20003568 	.word	0x20003568
 80aec24:	20003564 	.word	0x20003564
 80aec28:	20003560 	.word	0x20003560
 80aec2c:	2000355c 	.word	0x2000355c
 80aec30:	20003558 	.word	0x20003558
 80aec34:	20003554 	.word	0x20003554
 80aec38:	20003550 	.word	0x20003550
 80aec3c:	2000354c 	.word	0x2000354c

080aec40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80aec40:	4b24      	ldr	r3, [pc, #144]	; (80aecd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80aec42:	681a      	ldr	r2, [r3, #0]
 80aec44:	07d0      	lsls	r0, r2, #31
 80aec46:	bf5c      	itt	pl
 80aec48:	2201      	movpl	r2, #1
 80aec4a:	601a      	strpl	r2, [r3, #0]
 80aec4c:	4b22      	ldr	r3, [pc, #136]	; (80aecd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80aec4e:	681a      	ldr	r2, [r3, #0]
 80aec50:	07d1      	lsls	r1, r2, #31
 80aec52:	bf5c      	itt	pl
 80aec54:	2201      	movpl	r2, #1
 80aec56:	601a      	strpl	r2, [r3, #0]
 80aec58:	4b20      	ldr	r3, [pc, #128]	; (80aecdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80aec5a:	681a      	ldr	r2, [r3, #0]
 80aec5c:	07d2      	lsls	r2, r2, #31
 80aec5e:	bf5c      	itt	pl
 80aec60:	2201      	movpl	r2, #1
 80aec62:	601a      	strpl	r2, [r3, #0]
 80aec64:	4b1e      	ldr	r3, [pc, #120]	; (80aece0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80aec66:	681a      	ldr	r2, [r3, #0]
 80aec68:	07d0      	lsls	r0, r2, #31
 80aec6a:	bf5c      	itt	pl
 80aec6c:	2201      	movpl	r2, #1
 80aec6e:	601a      	strpl	r2, [r3, #0]
 80aec70:	4b1c      	ldr	r3, [pc, #112]	; (80aece4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80aec72:	681a      	ldr	r2, [r3, #0]
 80aec74:	07d1      	lsls	r1, r2, #31
 80aec76:	bf5c      	itt	pl
 80aec78:	2201      	movpl	r2, #1
 80aec7a:	601a      	strpl	r2, [r3, #0]
 80aec7c:	4b1a      	ldr	r3, [pc, #104]	; (80aece8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80aec7e:	681a      	ldr	r2, [r3, #0]
 80aec80:	07d2      	lsls	r2, r2, #31
 80aec82:	bf5c      	itt	pl
 80aec84:	2201      	movpl	r2, #1
 80aec86:	601a      	strpl	r2, [r3, #0]
 80aec88:	4b18      	ldr	r3, [pc, #96]	; (80aecec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80aec8a:	681a      	ldr	r2, [r3, #0]
 80aec8c:	07d0      	lsls	r0, r2, #31
 80aec8e:	bf5c      	itt	pl
 80aec90:	2201      	movpl	r2, #1
 80aec92:	601a      	strpl	r2, [r3, #0]
 80aec94:	4b16      	ldr	r3, [pc, #88]	; (80aecf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80aec96:	681a      	ldr	r2, [r3, #0]
 80aec98:	07d1      	lsls	r1, r2, #31
 80aec9a:	bf5c      	itt	pl
 80aec9c:	2201      	movpl	r2, #1
 80aec9e:	601a      	strpl	r2, [r3, #0]
 80aeca0:	4b14      	ldr	r3, [pc, #80]	; (80aecf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80aeca2:	681a      	ldr	r2, [r3, #0]
 80aeca4:	07d2      	lsls	r2, r2, #31
 80aeca6:	bf5c      	itt	pl
 80aeca8:	2201      	movpl	r2, #1
 80aecaa:	601a      	strpl	r2, [r3, #0]
 80aecac:	4b12      	ldr	r3, [pc, #72]	; (80aecf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80aecae:	681a      	ldr	r2, [r3, #0]
 80aecb0:	07d0      	lsls	r0, r2, #31
 80aecb2:	bf5c      	itt	pl
 80aecb4:	2201      	movpl	r2, #1
 80aecb6:	601a      	strpl	r2, [r3, #0]
 80aecb8:	4b10      	ldr	r3, [pc, #64]	; (80aecfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80aecba:	681a      	ldr	r2, [r3, #0]
 80aecbc:	07d1      	lsls	r1, r2, #31
 80aecbe:	bf5c      	itt	pl
 80aecc0:	2201      	movpl	r2, #1
 80aecc2:	601a      	strpl	r2, [r3, #0]
 80aecc4:	4b0e      	ldr	r3, [pc, #56]	; (80aed00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80aecc6:	681a      	ldr	r2, [r3, #0]
 80aecc8:	07d2      	lsls	r2, r2, #31
 80aecca:	bf5c      	itt	pl
 80aeccc:	2201      	movpl	r2, #1
 80aecce:	601a      	strpl	r2, [r3, #0]
 80aecd0:	4770      	bx	lr
 80aecd2:	bf00      	nop
 80aecd4:	200035a8 	.word	0x200035a8
 80aecd8:	200035a4 	.word	0x200035a4
 80aecdc:	200035a0 	.word	0x200035a0
 80aece0:	2000359c 	.word	0x2000359c
 80aece4:	20003598 	.word	0x20003598
 80aece8:	20003594 	.word	0x20003594
 80aecec:	20003590 	.word	0x20003590
 80aecf0:	2000358c 	.word	0x2000358c
 80aecf4:	20003588 	.word	0x20003588
 80aecf8:	20003584 	.word	0x20003584
 80aecfc:	20003580 	.word	0x20003580
 80aed00:	2000357c 	.word	0x2000357c

080aed04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80aed04:	4b18      	ldr	r3, [pc, #96]	; (80aed68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80aed06:	681a      	ldr	r2, [r3, #0]
 80aed08:	07d1      	lsls	r1, r2, #31
 80aed0a:	bf5c      	itt	pl
 80aed0c:	2201      	movpl	r2, #1
 80aed0e:	601a      	strpl	r2, [r3, #0]
 80aed10:	4b16      	ldr	r3, [pc, #88]	; (80aed6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80aed12:	681a      	ldr	r2, [r3, #0]
 80aed14:	07d2      	lsls	r2, r2, #31
 80aed16:	bf5c      	itt	pl
 80aed18:	2201      	movpl	r2, #1
 80aed1a:	601a      	strpl	r2, [r3, #0]
 80aed1c:	4b14      	ldr	r3, [pc, #80]	; (80aed70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80aed1e:	681a      	ldr	r2, [r3, #0]
 80aed20:	07d0      	lsls	r0, r2, #31
 80aed22:	bf5c      	itt	pl
 80aed24:	2201      	movpl	r2, #1
 80aed26:	601a      	strpl	r2, [r3, #0]
 80aed28:	4b12      	ldr	r3, [pc, #72]	; (80aed74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80aed2a:	681a      	ldr	r2, [r3, #0]
 80aed2c:	07d1      	lsls	r1, r2, #31
 80aed2e:	bf5c      	itt	pl
 80aed30:	2201      	movpl	r2, #1
 80aed32:	601a      	strpl	r2, [r3, #0]
 80aed34:	4b10      	ldr	r3, [pc, #64]	; (80aed78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80aed36:	681a      	ldr	r2, [r3, #0]
 80aed38:	07d2      	lsls	r2, r2, #31
 80aed3a:	bf5c      	itt	pl
 80aed3c:	2201      	movpl	r2, #1
 80aed3e:	601a      	strpl	r2, [r3, #0]
 80aed40:	4b0e      	ldr	r3, [pc, #56]	; (80aed7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80aed42:	681a      	ldr	r2, [r3, #0]
 80aed44:	07d0      	lsls	r0, r2, #31
 80aed46:	bf5c      	itt	pl
 80aed48:	2201      	movpl	r2, #1
 80aed4a:	601a      	strpl	r2, [r3, #0]
 80aed4c:	4b0c      	ldr	r3, [pc, #48]	; (80aed80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80aed4e:	681a      	ldr	r2, [r3, #0]
 80aed50:	07d1      	lsls	r1, r2, #31
 80aed52:	bf5c      	itt	pl
 80aed54:	2201      	movpl	r2, #1
 80aed56:	601a      	strpl	r2, [r3, #0]
 80aed58:	4b0a      	ldr	r3, [pc, #40]	; (80aed84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80aed5a:	681a      	ldr	r2, [r3, #0]
 80aed5c:	07d2      	lsls	r2, r2, #31
 80aed5e:	bf5c      	itt	pl
 80aed60:	2201      	movpl	r2, #1
 80aed62:	601a      	strpl	r2, [r3, #0]
 80aed64:	4770      	bx	lr
 80aed66:	bf00      	nop
 80aed68:	200035c8 	.word	0x200035c8
 80aed6c:	200035c4 	.word	0x200035c4
 80aed70:	200035c0 	.word	0x200035c0
 80aed74:	200035bc 	.word	0x200035bc
 80aed78:	200035b8 	.word	0x200035b8
 80aed7c:	200035b4 	.word	0x200035b4
 80aed80:	200035b0 	.word	0x200035b0
 80aed84:	200035ac 	.word	0x200035ac

080aed88 <__aeabi_uldivmod>:
 80aed88:	b953      	cbnz	r3, 80aeda0 <__aeabi_uldivmod+0x18>
 80aed8a:	b94a      	cbnz	r2, 80aeda0 <__aeabi_uldivmod+0x18>
 80aed8c:	2900      	cmp	r1, #0
 80aed8e:	bf08      	it	eq
 80aed90:	2800      	cmpeq	r0, #0
 80aed92:	bf1c      	itt	ne
 80aed94:	f04f 31ff 	movne.w	r1, #4294967295
 80aed98:	f04f 30ff 	movne.w	r0, #4294967295
 80aed9c:	f000 b982 	b.w	80af0a4 <__aeabi_idiv0>
 80aeda0:	f1ad 0c08 	sub.w	ip, sp, #8
 80aeda4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80aeda8:	f000 f806 	bl	80aedb8 <__udivmoddi4>
 80aedac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80aedb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80aedb4:	b004      	add	sp, #16
 80aedb6:	4770      	bx	lr

080aedb8 <__udivmoddi4>:
 80aedb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80aedbc:	468c      	mov	ip, r1
 80aedbe:	460c      	mov	r4, r1
 80aedc0:	4605      	mov	r5, r0
 80aedc2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80aedc4:	2b00      	cmp	r3, #0
 80aedc6:	d14f      	bne.n	80aee68 <__udivmoddi4+0xb0>
 80aedc8:	428a      	cmp	r2, r1
 80aedca:	4617      	mov	r7, r2
 80aedcc:	d96b      	bls.n	80aeea6 <__udivmoddi4+0xee>
 80aedce:	fab2 fe82 	clz	lr, r2
 80aedd2:	f1be 0f00 	cmp.w	lr, #0
 80aedd6:	d00b      	beq.n	80aedf0 <__udivmoddi4+0x38>
 80aedd8:	f1ce 0520 	rsb	r5, lr, #32
 80aeddc:	fa20 f505 	lsr.w	r5, r0, r5
 80aede0:	fa01 f30e 	lsl.w	r3, r1, lr
 80aede4:	ea45 0c03 	orr.w	ip, r5, r3
 80aede8:	fa02 f70e 	lsl.w	r7, r2, lr
 80aedec:	fa00 f50e 	lsl.w	r5, r0, lr
 80aedf0:	0c39      	lsrs	r1, r7, #16
 80aedf2:	fbbc f0f1 	udiv	r0, ip, r1
 80aedf6:	b2ba      	uxth	r2, r7
 80aedf8:	fb01 c310 	mls	r3, r1, r0, ip
 80aedfc:	fb00 f802 	mul.w	r8, r0, r2
 80aee00:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80aee04:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 80aee08:	45a0      	cmp	r8, r4
 80aee0a:	d909      	bls.n	80aee20 <__udivmoddi4+0x68>
 80aee0c:	19e4      	adds	r4, r4, r7
 80aee0e:	f100 33ff 	add.w	r3, r0, #4294967295
 80aee12:	f080 8128 	bcs.w	80af066 <__udivmoddi4+0x2ae>
 80aee16:	45a0      	cmp	r8, r4
 80aee18:	f240 8125 	bls.w	80af066 <__udivmoddi4+0x2ae>
 80aee1c:	3802      	subs	r0, #2
 80aee1e:	443c      	add	r4, r7
 80aee20:	ebc8 0404 	rsb	r4, r8, r4
 80aee24:	fbb4 f3f1 	udiv	r3, r4, r1
 80aee28:	fb01 4c13 	mls	ip, r1, r3, r4
 80aee2c:	fb03 f202 	mul.w	r2, r3, r2
 80aee30:	b2ac      	uxth	r4, r5
 80aee32:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 80aee36:	428a      	cmp	r2, r1
 80aee38:	d909      	bls.n	80aee4e <__udivmoddi4+0x96>
 80aee3a:	19c9      	adds	r1, r1, r7
 80aee3c:	f103 34ff 	add.w	r4, r3, #4294967295
 80aee40:	f080 810f 	bcs.w	80af062 <__udivmoddi4+0x2aa>
 80aee44:	428a      	cmp	r2, r1
 80aee46:	f240 810c 	bls.w	80af062 <__udivmoddi4+0x2aa>
 80aee4a:	3b02      	subs	r3, #2
 80aee4c:	4439      	add	r1, r7
 80aee4e:	1a8a      	subs	r2, r1, r2
 80aee50:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80aee54:	2100      	movs	r1, #0
 80aee56:	2e00      	cmp	r6, #0
 80aee58:	d063      	beq.n	80aef22 <__udivmoddi4+0x16a>
 80aee5a:	fa22 f20e 	lsr.w	r2, r2, lr
 80aee5e:	2300      	movs	r3, #0
 80aee60:	e886 000c 	stmia.w	r6, {r2, r3}
 80aee64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80aee68:	428b      	cmp	r3, r1
 80aee6a:	d907      	bls.n	80aee7c <__udivmoddi4+0xc4>
 80aee6c:	2e00      	cmp	r6, #0
 80aee6e:	d056      	beq.n	80aef1e <__udivmoddi4+0x166>
 80aee70:	2100      	movs	r1, #0
 80aee72:	e886 0011 	stmia.w	r6, {r0, r4}
 80aee76:	4608      	mov	r0, r1
 80aee78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80aee7c:	fab3 f183 	clz	r1, r3
 80aee80:	2900      	cmp	r1, #0
 80aee82:	f040 8093 	bne.w	80aefac <__udivmoddi4+0x1f4>
 80aee86:	42a3      	cmp	r3, r4
 80aee88:	d302      	bcc.n	80aee90 <__udivmoddi4+0xd8>
 80aee8a:	4282      	cmp	r2, r0
 80aee8c:	f200 80fe 	bhi.w	80af08c <__udivmoddi4+0x2d4>
 80aee90:	1a85      	subs	r5, r0, r2
 80aee92:	eb64 0303 	sbc.w	r3, r4, r3
 80aee96:	469c      	mov	ip, r3
 80aee98:	2001      	movs	r0, #1
 80aee9a:	2e00      	cmp	r6, #0
 80aee9c:	d041      	beq.n	80aef22 <__udivmoddi4+0x16a>
 80aee9e:	e886 1020 	stmia.w	r6, {r5, ip}
 80aeea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80aeea6:	b912      	cbnz	r2, 80aeeae <__udivmoddi4+0xf6>
 80aeea8:	2701      	movs	r7, #1
 80aeeaa:	fbb7 f7f2 	udiv	r7, r7, r2
 80aeeae:	fab7 fe87 	clz	lr, r7
 80aeeb2:	f1be 0f00 	cmp.w	lr, #0
 80aeeb6:	d136      	bne.n	80aef26 <__udivmoddi4+0x16e>
 80aeeb8:	1be4      	subs	r4, r4, r7
 80aeeba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80aeebe:	fa1f f987 	uxth.w	r9, r7
 80aeec2:	2101      	movs	r1, #1
 80aeec4:	fbb4 f3f8 	udiv	r3, r4, r8
 80aeec8:	fb08 4413 	mls	r4, r8, r3, r4
 80aeecc:	fb09 f203 	mul.w	r2, r9, r3
 80aeed0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80aeed4:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 80aeed8:	42a2      	cmp	r2, r4
 80aeeda:	d907      	bls.n	80aeeec <__udivmoddi4+0x134>
 80aeedc:	19e4      	adds	r4, r4, r7
 80aeede:	f103 30ff 	add.w	r0, r3, #4294967295
 80aeee2:	d202      	bcs.n	80aeeea <__udivmoddi4+0x132>
 80aeee4:	42a2      	cmp	r2, r4
 80aeee6:	f200 80d3 	bhi.w	80af090 <__udivmoddi4+0x2d8>
 80aeeea:	4603      	mov	r3, r0
 80aeeec:	1aa4      	subs	r4, r4, r2
 80aeeee:	fbb4 f0f8 	udiv	r0, r4, r8
 80aeef2:	fb08 4810 	mls	r8, r8, r0, r4
 80aeef6:	fb09 f900 	mul.w	r9, r9, r0
 80aeefa:	b2ac      	uxth	r4, r5
 80aeefc:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 80aef00:	4591      	cmp	r9, r2
 80aef02:	d907      	bls.n	80aef14 <__udivmoddi4+0x15c>
 80aef04:	19d2      	adds	r2, r2, r7
 80aef06:	f100 34ff 	add.w	r4, r0, #4294967295
 80aef0a:	d202      	bcs.n	80aef12 <__udivmoddi4+0x15a>
 80aef0c:	4591      	cmp	r9, r2
 80aef0e:	f200 80ba 	bhi.w	80af086 <__udivmoddi4+0x2ce>
 80aef12:	4620      	mov	r0, r4
 80aef14:	ebc9 0202 	rsb	r2, r9, r2
 80aef18:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80aef1c:	e79b      	b.n	80aee56 <__udivmoddi4+0x9e>
 80aef1e:	4631      	mov	r1, r6
 80aef20:	4630      	mov	r0, r6
 80aef22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80aef26:	fa07 f70e 	lsl.w	r7, r7, lr
 80aef2a:	f1ce 0c20 	rsb	ip, lr, #32
 80aef2e:	fa24 f30c 	lsr.w	r3, r4, ip
 80aef32:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80aef36:	fbb3 faf8 	udiv	sl, r3, r8
 80aef3a:	fa1f f987 	uxth.w	r9, r7
 80aef3e:	fb08 351a 	mls	r5, r8, sl, r3
 80aef42:	fa20 fc0c 	lsr.w	ip, r0, ip
 80aef46:	fa04 f40e 	lsl.w	r4, r4, lr
 80aef4a:	fb0a fb09 	mul.w	fp, sl, r9
 80aef4e:	ea4c 0c04 	orr.w	ip, ip, r4
 80aef52:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80aef56:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 80aef5a:	459b      	cmp	fp, r3
 80aef5c:	fa00 f50e 	lsl.w	r5, r0, lr
 80aef60:	d90a      	bls.n	80aef78 <__udivmoddi4+0x1c0>
 80aef62:	19db      	adds	r3, r3, r7
 80aef64:	f10a 32ff 	add.w	r2, sl, #4294967295
 80aef68:	f080 808b 	bcs.w	80af082 <__udivmoddi4+0x2ca>
 80aef6c:	459b      	cmp	fp, r3
 80aef6e:	f240 8088 	bls.w	80af082 <__udivmoddi4+0x2ca>
 80aef72:	f1aa 0a02 	sub.w	sl, sl, #2
 80aef76:	443b      	add	r3, r7
 80aef78:	ebcb 0303 	rsb	r3, fp, r3
 80aef7c:	fbb3 f0f8 	udiv	r0, r3, r8
 80aef80:	fb08 3310 	mls	r3, r8, r0, r3
 80aef84:	fb00 f409 	mul.w	r4, r0, r9
 80aef88:	fa1f fc8c 	uxth.w	ip, ip
 80aef8c:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 80aef90:	429c      	cmp	r4, r3
 80aef92:	d907      	bls.n	80aefa4 <__udivmoddi4+0x1ec>
 80aef94:	19db      	adds	r3, r3, r7
 80aef96:	f100 32ff 	add.w	r2, r0, #4294967295
 80aef9a:	d26e      	bcs.n	80af07a <__udivmoddi4+0x2c2>
 80aef9c:	429c      	cmp	r4, r3
 80aef9e:	d96c      	bls.n	80af07a <__udivmoddi4+0x2c2>
 80aefa0:	3802      	subs	r0, #2
 80aefa2:	443b      	add	r3, r7
 80aefa4:	1b1c      	subs	r4, r3, r4
 80aefa6:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 80aefaa:	e78b      	b.n	80aeec4 <__udivmoddi4+0x10c>
 80aefac:	f1c1 0e20 	rsb	lr, r1, #32
 80aefb0:	408b      	lsls	r3, r1
 80aefb2:	fa22 fc0e 	lsr.w	ip, r2, lr
 80aefb6:	ea4c 0c03 	orr.w	ip, ip, r3
 80aefba:	fa24 f70e 	lsr.w	r7, r4, lr
 80aefbe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80aefc2:	fbb7 faf9 	udiv	sl, r7, r9
 80aefc6:	fa1f f38c 	uxth.w	r3, ip
 80aefca:	fb09 771a 	mls	r7, r9, sl, r7
 80aefce:	fa20 f80e 	lsr.w	r8, r0, lr
 80aefd2:	408c      	lsls	r4, r1
 80aefd4:	fb0a f503 	mul.w	r5, sl, r3
 80aefd8:	ea48 0404 	orr.w	r4, r8, r4
 80aefdc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80aefe0:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80aefe4:	42bd      	cmp	r5, r7
 80aefe6:	fa02 f201 	lsl.w	r2, r2, r1
 80aefea:	fa00 fb01 	lsl.w	fp, r0, r1
 80aefee:	d909      	bls.n	80af004 <__udivmoddi4+0x24c>
 80aeff0:	eb17 070c 	adds.w	r7, r7, ip
 80aeff4:	f10a 30ff 	add.w	r0, sl, #4294967295
 80aeff8:	d241      	bcs.n	80af07e <__udivmoddi4+0x2c6>
 80aeffa:	42bd      	cmp	r5, r7
 80aeffc:	d93f      	bls.n	80af07e <__udivmoddi4+0x2c6>
 80aeffe:	f1aa 0a02 	sub.w	sl, sl, #2
 80af002:	4467      	add	r7, ip
 80af004:	1b7f      	subs	r7, r7, r5
 80af006:	fbb7 f5f9 	udiv	r5, r7, r9
 80af00a:	fb09 7715 	mls	r7, r9, r5, r7
 80af00e:	fb05 f303 	mul.w	r3, r5, r3
 80af012:	b2a4      	uxth	r4, r4
 80af014:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80af018:	42bb      	cmp	r3, r7
 80af01a:	d908      	bls.n	80af02e <__udivmoddi4+0x276>
 80af01c:	eb17 070c 	adds.w	r7, r7, ip
 80af020:	f105 30ff 	add.w	r0, r5, #4294967295
 80af024:	d227      	bcs.n	80af076 <__udivmoddi4+0x2be>
 80af026:	42bb      	cmp	r3, r7
 80af028:	d925      	bls.n	80af076 <__udivmoddi4+0x2be>
 80af02a:	3d02      	subs	r5, #2
 80af02c:	4467      	add	r7, ip
 80af02e:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 80af032:	fba0 8902 	umull	r8, r9, r0, r2
 80af036:	1aff      	subs	r7, r7, r3
 80af038:	454f      	cmp	r7, r9
 80af03a:	4645      	mov	r5, r8
 80af03c:	464c      	mov	r4, r9
 80af03e:	d314      	bcc.n	80af06a <__udivmoddi4+0x2b2>
 80af040:	d029      	beq.n	80af096 <__udivmoddi4+0x2de>
 80af042:	b366      	cbz	r6, 80af09e <__udivmoddi4+0x2e6>
 80af044:	ebbb 0305 	subs.w	r3, fp, r5
 80af048:	eb67 0704 	sbc.w	r7, r7, r4
 80af04c:	fa07 fe0e 	lsl.w	lr, r7, lr
 80af050:	40cb      	lsrs	r3, r1
 80af052:	40cf      	lsrs	r7, r1
 80af054:	ea4e 0303 	orr.w	r3, lr, r3
 80af058:	e886 0088 	stmia.w	r6, {r3, r7}
 80af05c:	2100      	movs	r1, #0
 80af05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80af062:	4623      	mov	r3, r4
 80af064:	e6f3      	b.n	80aee4e <__udivmoddi4+0x96>
 80af066:	4618      	mov	r0, r3
 80af068:	e6da      	b.n	80aee20 <__udivmoddi4+0x68>
 80af06a:	ebb8 0502 	subs.w	r5, r8, r2
 80af06e:	eb69 040c 	sbc.w	r4, r9, ip
 80af072:	3801      	subs	r0, #1
 80af074:	e7e5      	b.n	80af042 <__udivmoddi4+0x28a>
 80af076:	4605      	mov	r5, r0
 80af078:	e7d9      	b.n	80af02e <__udivmoddi4+0x276>
 80af07a:	4610      	mov	r0, r2
 80af07c:	e792      	b.n	80aefa4 <__udivmoddi4+0x1ec>
 80af07e:	4682      	mov	sl, r0
 80af080:	e7c0      	b.n	80af004 <__udivmoddi4+0x24c>
 80af082:	4692      	mov	sl, r2
 80af084:	e778      	b.n	80aef78 <__udivmoddi4+0x1c0>
 80af086:	3802      	subs	r0, #2
 80af088:	443a      	add	r2, r7
 80af08a:	e743      	b.n	80aef14 <__udivmoddi4+0x15c>
 80af08c:	4608      	mov	r0, r1
 80af08e:	e704      	b.n	80aee9a <__udivmoddi4+0xe2>
 80af090:	3b02      	subs	r3, #2
 80af092:	443c      	add	r4, r7
 80af094:	e72a      	b.n	80aeeec <__udivmoddi4+0x134>
 80af096:	45c3      	cmp	fp, r8
 80af098:	d3e7      	bcc.n	80af06a <__udivmoddi4+0x2b2>
 80af09a:	463c      	mov	r4, r7
 80af09c:	e7d1      	b.n	80af042 <__udivmoddi4+0x28a>
 80af09e:	4631      	mov	r1, r6
 80af0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080af0a4 <__aeabi_idiv0>:
 80af0a4:	4770      	bx	lr
 80af0a6:	bf00      	nop

080af0a8 <calloc>:
 80af0a8:	4b02      	ldr	r3, [pc, #8]	; (80af0b4 <calloc+0xc>)
 80af0aa:	460a      	mov	r2, r1
 80af0ac:	4601      	mov	r1, r0
 80af0ae:	6818      	ldr	r0, [r3, #0]
 80af0b0:	f000 b84d 	b.w	80af14e <_calloc_r>
 80af0b4:	20000394 	.word	0x20000394

080af0b8 <__cxa_atexit>:
 80af0b8:	b510      	push	{r4, lr}
 80af0ba:	4c05      	ldr	r4, [pc, #20]	; (80af0d0 <__cxa_atexit+0x18>)
 80af0bc:	4613      	mov	r3, r2
 80af0be:	b12c      	cbz	r4, 80af0cc <__cxa_atexit+0x14>
 80af0c0:	460a      	mov	r2, r1
 80af0c2:	4601      	mov	r1, r0
 80af0c4:	2002      	movs	r0, #2
 80af0c6:	f3af 8000 	nop.w
 80af0ca:	bd10      	pop	{r4, pc}
 80af0cc:	4620      	mov	r0, r4
 80af0ce:	bd10      	pop	{r4, pc}
 80af0d0:	00000000 	.word	0x00000000

080af0d4 <memcmp>:
 80af0d4:	b510      	push	{r4, lr}
 80af0d6:	3901      	subs	r1, #1
 80af0d8:	4402      	add	r2, r0
 80af0da:	4290      	cmp	r0, r2
 80af0dc:	d007      	beq.n	80af0ee <memcmp+0x1a>
 80af0de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80af0e2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80af0e6:	42a3      	cmp	r3, r4
 80af0e8:	d0f7      	beq.n	80af0da <memcmp+0x6>
 80af0ea:	1b18      	subs	r0, r3, r4
 80af0ec:	bd10      	pop	{r4, pc}
 80af0ee:	2000      	movs	r0, #0
 80af0f0:	bd10      	pop	{r4, pc}

080af0f2 <memcpy>:
 80af0f2:	b510      	push	{r4, lr}
 80af0f4:	1e43      	subs	r3, r0, #1
 80af0f6:	440a      	add	r2, r1
 80af0f8:	4291      	cmp	r1, r2
 80af0fa:	d004      	beq.n	80af106 <memcpy+0x14>
 80af0fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80af100:	f803 4f01 	strb.w	r4, [r3, #1]!
 80af104:	e7f8      	b.n	80af0f8 <memcpy+0x6>
 80af106:	bd10      	pop	{r4, pc}

080af108 <memmove>:
 80af108:	4288      	cmp	r0, r1
 80af10a:	b510      	push	{r4, lr}
 80af10c:	eb01 0302 	add.w	r3, r1, r2
 80af110:	d801      	bhi.n	80af116 <memmove+0xe>
 80af112:	1e42      	subs	r2, r0, #1
 80af114:	e00b      	b.n	80af12e <memmove+0x26>
 80af116:	4298      	cmp	r0, r3
 80af118:	d2fb      	bcs.n	80af112 <memmove+0xa>
 80af11a:	1881      	adds	r1, r0, r2
 80af11c:	1ad2      	subs	r2, r2, r3
 80af11e:	42d3      	cmn	r3, r2
 80af120:	d004      	beq.n	80af12c <memmove+0x24>
 80af122:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80af126:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80af12a:	e7f8      	b.n	80af11e <memmove+0x16>
 80af12c:	bd10      	pop	{r4, pc}
 80af12e:	4299      	cmp	r1, r3
 80af130:	d004      	beq.n	80af13c <memmove+0x34>
 80af132:	f811 4b01 	ldrb.w	r4, [r1], #1
 80af136:	f802 4f01 	strb.w	r4, [r2, #1]!
 80af13a:	e7f8      	b.n	80af12e <memmove+0x26>
 80af13c:	bd10      	pop	{r4, pc}

080af13e <memset>:
 80af13e:	4603      	mov	r3, r0
 80af140:	4402      	add	r2, r0
 80af142:	4293      	cmp	r3, r2
 80af144:	d002      	beq.n	80af14c <memset+0xe>
 80af146:	f803 1b01 	strb.w	r1, [r3], #1
 80af14a:	e7fa      	b.n	80af142 <memset+0x4>
 80af14c:	4770      	bx	lr

080af14e <_calloc_r>:
 80af14e:	b538      	push	{r3, r4, r5, lr}
 80af150:	fb02 f401 	mul.w	r4, r2, r1
 80af154:	4621      	mov	r1, r4
 80af156:	f7fe fef9 	bl	80adf4c <_malloc_r>
 80af15a:	4605      	mov	r5, r0
 80af15c:	b118      	cbz	r0, 80af166 <_calloc_r+0x18>
 80af15e:	4622      	mov	r2, r4
 80af160:	2100      	movs	r1, #0
 80af162:	f7ff ffec 	bl	80af13e <memset>
 80af166:	4628      	mov	r0, r5
 80af168:	bd38      	pop	{r3, r4, r5, pc}

080af16a <strlen>:
 80af16a:	4603      	mov	r3, r0
 80af16c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80af170:	2a00      	cmp	r2, #0
 80af172:	d1fb      	bne.n	80af16c <strlen+0x2>
 80af174:	1a18      	subs	r0, r3, r0
 80af176:	3801      	subs	r0, #1
 80af178:	4770      	bx	lr

080af17a <strstr>:
 80af17a:	b5f0      	push	{r4, r5, r6, r7, lr}
 80af17c:	7803      	ldrb	r3, [r0, #0]
 80af17e:	b963      	cbnz	r3, 80af19a <strstr+0x20>
 80af180:	780b      	ldrb	r3, [r1, #0]
 80af182:	2b00      	cmp	r3, #0
 80af184:	bf18      	it	ne
 80af186:	2000      	movne	r0, #0
 80af188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80af18a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80af18e:	b162      	cbz	r2, 80af1aa <strstr+0x30>
 80af190:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 80af194:	4630      	mov	r0, r6
 80af196:	4297      	cmp	r7, r2
 80af198:	d0f7      	beq.n	80af18a <strstr+0x10>
 80af19a:	4603      	mov	r3, r0
 80af19c:	1c46      	adds	r6, r0, #1
 80af19e:	7800      	ldrb	r0, [r0, #0]
 80af1a0:	b110      	cbz	r0, 80af1a8 <strstr+0x2e>
 80af1a2:	1e4d      	subs	r5, r1, #1
 80af1a4:	1e5c      	subs	r4, r3, #1
 80af1a6:	e7f0      	b.n	80af18a <strstr+0x10>
 80af1a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80af1aa:	4618      	mov	r0, r3
 80af1ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080af1b0 <gettimeofday>:
 80af1b0:	4b02      	ldr	r3, [pc, #8]	; (80af1bc <gettimeofday+0xc>)
 80af1b2:	460a      	mov	r2, r1
 80af1b4:	4601      	mov	r1, r0
 80af1b6:	6818      	ldr	r0, [r3, #0]
 80af1b8:	f000 b802 	b.w	80af1c0 <_gettimeofday_r>
 80af1bc:	20000394 	.word	0x20000394

080af1c0 <_gettimeofday_r>:
 80af1c0:	b538      	push	{r3, r4, r5, lr}
 80af1c2:	4c07      	ldr	r4, [pc, #28]	; (80af1e0 <_gettimeofday_r+0x20>)
 80af1c4:	2300      	movs	r3, #0
 80af1c6:	4605      	mov	r5, r0
 80af1c8:	4608      	mov	r0, r1
 80af1ca:	4611      	mov	r1, r2
 80af1cc:	6023      	str	r3, [r4, #0]
 80af1ce:	f7f5 f9e2 	bl	80a4596 <_gettimeofday>
 80af1d2:	1c43      	adds	r3, r0, #1
 80af1d4:	d102      	bne.n	80af1dc <_gettimeofday_r+0x1c>
 80af1d6:	6823      	ldr	r3, [r4, #0]
 80af1d8:	b103      	cbz	r3, 80af1dc <_gettimeofday_r+0x1c>
 80af1da:	602b      	str	r3, [r5, #0]
 80af1dc:	bd38      	pop	{r3, r4, r5, pc}
 80af1de:	bf00      	nop
 80af1e0:	200035cc 	.word	0x200035cc

080af1e4 <dynalib_user>:
 80af1e4:	080a001d 080a005d 080a0089 080a008d     ....]...........
 80af1f4:	00000000 54726143 696c6300 20746e65     ....CarT.client 
 80af204:	6e6e6f63 65746365 65680064 206f6c6c     connected.hello 
 80af214:	6c726f77 756f0064 706f5474 6d2f6369     world.outTopic/m
 80af224:	61737365 61006567 30626d33 6c367a6d     essage.a3mb0mz6l
 80af234:	73626765 6f692e38 73752e74 7361652d     egbs8.iot.us-eas
 80af244:	2e322d74 7a616d61 77616e6f 6f632e73     t-2.amazonaws.co
 80af254:	0600006d 7349514d 00037064 54514d04     m...MQIsdp...MQT
 80af264:	20200454 25002021 64252e64 2e64252e     T.  ! .%d.%d.%d.
 80af274:	00006425                                %d..

080af278 <_ZL1K>:
 80af278:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
 80af288:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
 80af298:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
 80af2a8:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
 80af2b8:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
 80af2c8:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
 80af2d8:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
 80af2e8:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
 80af2f8:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
 80af308:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
 80af318:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
 80af328:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
 80af338:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
 80af348:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
 80af358:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
 80af368:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.
 80af378:	8648862a 05010df7 0000000c              *.H.........

080af384 <mbedtls_sha1_info>:
 80af384:	00000004 080af949 00000014 00000040     ....I.......@...
 80af394:	080a1cc9 080a1cc5 080a1cc1 080a4531     ............1E..
 80af3a4:	080a1cab 080a1c99 080a1c95 080a1c91     ................

080af3b4 <mbedtls_sha224_info>:
 80af3b4:	00000005 080af7ba 0000001c 00000040     ............@...
 80af3c4:	080a1d11 080a1d0d 080a1d09 080a1cfd     ................
 80af3d4:	080a1ce7 080a1cd5 080a1cd1 080a1ccd     ................

080af3e4 <mbedtls_sha384_info>:
 80af3e4:	00000007 080b02c9 00000030 00000080     ........0.......
 80af3f4:	080a1d61 080a1d5d 080a1d59 080a1d4d     a...]...Y...M...
 80af404:	080a1d37 080a1d25 080a1d21 080a1d1d     7...%...!.......

080af414 <mbedtls_sha512_info>:
 80af414:	00000008 080af81d 00000040 00000080     ........@.......
 80af424:	080a1d67 080a1d5d 080a1d59 080a1d53     g...]...Y...S...
 80af434:	080a1d37 080a1d25 080a1d21 080a1d1d     7...%...!.......

080af444 <mbedtls_sha256_info>:
 80af444:	00000006 080b02e9 00000020 00000040     ........ ...@...
 80af454:	080a1d17 080a1d0d 080a1d09 080a1d03     ................
 80af464:	080a1ce7 080a1cd5 080a1cd1 080a1ccd     ................

080af474 <_ZL18oid_x520_attr_type>:
 80af474:	080afc1c 00000003 080afc20 080afc31     ........ ...1...
 80af484:	080b0c8d 080afc3d 00000003 080afc41     ....=.......A...
 80af494:	080afc53 080af8bd 080afc5b 00000003     S.......[.......
 80af4a4:	080afc5f 080afc6e 080afc77 080afc79     _...n...w...y...
 80af4b4:	00000003 080afc7d 080afc89 080afc8f     ....}...........
 80af4c4:	080afc92 00000003 080afc96 080afcad     ................
 80af4d4:	080afcba 080afcbc 00000003 080afcc0     ................
 80af4e4:	080afcdd 080afce6 080afce9 00000009     ................
 80af4f4:	080afcf3 080afd00 080afcf3 080afd0f     ................
 80af504:	00000003 080afd13 080afd26 080afd19     ........&.......
 80af514:	080afd34 00000003 080afd38 080afd4c     4.......8...L...
 80af524:	080afd3e 080afd5b 00000003 080afd5f     >...[......._...
 80af534:	080afd70 080afd65 080afd7c 00000003     p...e...|.......
 80af544:	080afd80 080afd8e 080afd96 080afd99     ................
 80af554:	00000003 080afd9d 080afdad 080afdb8     ................
 80af564:	080afdbb 00000003 080afdbf 080afdce     ................
 80af574:	080afdc5 080afdd7 00000003 080afddb     ................
 80af584:	080afdf5 080afde1 080afe0a 00000003     ................
 80af594:	080afe0e 080afe1a 080afe14 080afe20     ............ ...
 80af5a4:	00000003 080afe24 080afe36 080afe2a     ....$...6...*...
 80af5b4:	080afe53 00000003 080afe57 080afe67     S.......W...g...
 80af5c4:	080afe5d 080afe71 0000000a 080afe7c     ]...q.......|...
 80af5d4:	080afe8f 080afea0 080afea3 00000003     ................
 80af5e4:	080afea7 080afebe 080afead 00000000     ................
	...

080af604 <_ZL17oid_ext_key_usage>:
 80af604:	080afa35 00000008 080afa3e 080afa4f     5.......>...O...
 80af614:	080afa6d 00000008 080afa76 080afa87     m.......v.......
 80af624:	080afaa5 00000008 080afaae 080afac0     ................
 80af634:	080afacd 00000008 080afad6 080afaec     ................
 80af644:	080afafe 00000008 080afb07 080afb1a     ................
 80af654:	080afb28 00000008 080afb31 080afb43     (.......1...C...
	...

080af674 <_ZL10oid_pk_alg>:
 80af674:	080af8bf 00000009 080af8c9 080af8d7     ................
 80af684:	00000001 080af8db 00000007 080af8e3     ................
 80af694:	080af8f2 00000002 080af901 00000005     ................
 80af6a4:	080af907 080af90f 00000003 00000000     ................
	...

080af6c4 <_ZL14oid_cipher_alg>:
 80af6c4:	080af88f 00000005 080af895 080af76b     ............k...
 80af6d4:	00000021 080af89c 00000008 080af8a5     !...............
 80af6e4:	080af8b2 00000025 00000000 00000000     ....%...........
	...
 80af700:	8648862a 0c010df7 70000301 69576562     *.H........pbeWi
 80af710:	48536874 646e4141 654b2d33 69725479     thSHAAnd3-KeyTri
 80af720:	44656c70 432d5345 50004342 77204542     pleDES-CBC.PBE w
 80af730:	20687469 31414853 646e6120 4b2d3320     ith SHA1 and 3-K
 80af740:	33207965 00534544 8648862a 0c010df7     ey 3DES.*.H.....
 80af750:	70000401 69576562 48536874 646e4141     ...pbeWithSHAAnd
 80af760:	654b2d32 69725479 44656c70 432d5345     2-KeyTripleDES-C
 80af770:	50004342 77204542 20687469 31414853     BC.PBE with SHA1
 80af780:	646e6120 4b2d3220 33207965 00534544      and 2-Key 3DES.
 80af790:	8648862a 07020df7 616d6800 41485363     *.H......hmacSHA
 80af7a0:	4d480031 532d4341 312d4148 48862a00     1.HMAC-SHA-1.*.H
 80af7b0:	020df786 6d680008 48536361 34323241     ......hmacSHA224
 80af7c0:	414d4800 48532d43 32322d41 862a0034     .HMAC-SHA-224.*.
 80af7d0:	0df78648 68000902 5363616d 35324148     H......hmacSHA25
 80af7e0:	4d480036 532d4341 322d4148 2a003635     6.HMAC-SHA-256.*
 80af7f0:	f7864886 000a020d 63616d68 33414853     .H......hmacSHA3
 80af800:	48003438 2d43414d 2d414853 00343833     84.HMAC-SHA-384.
 80af810:	8648862a 0b020df7 616d6800 41485363     *.H......hmacSHA
 80af820:	00323135 43414d48 4148532d 3231352d     512.HMAC-SHA-512
 80af830:	030e2b00 69001a02 68732d64 60003161     .+.....id-sha1.`
 80af840:	65014886 04020403 2d646900 32616873     .H.e.....id-sha2
 80af850:	60003432 65014886 01020403 2d646900     24.`.H.e.....id-
 80af860:	32616873 60003635 65014886 02020403     sha256.`.H.e....
 80af870:	2d646900 33616873 60003438 65014886     .id-sha384.`.H.e
 80af880:	03020403 2d646900 35616873 2b003231     .....id-sha512.+
 80af890:	0702030e 73656400 00434243 8648862a     .....desCBC.*.H.
 80af8a0:	07030df7 73656400 6564652d 62632d33     .....des-ede3-cb
 80af8b0:	45440063 44452d53 432d3345 2a004342     c.DES-EDE3-CBC.*
 80af8c0:	f7864886 0101010d 61737200 72636e45     .H.......rsaEncr
 80af8d0:	69747079 52006e6f 2a004153 3dce4886     yption.RSA.*.H.=
 80af8e0:	69000102 63652d64 6c627550 654b6369     ...id-ecPublicKe
 80af8f0:	65470079 6972656e 43452063 79656b20     y.Generic EC key
 80af900:	04812b00 69000c01 63652d64 45004844     .+.....id-ecDH.E
 80af910:	656b2043 6f662079 43452072 2a004844     C key for ECDH.*
 80af920:	f7864886 0501010d 61687300 6957312d     .H.......sha-1Wi
 80af930:	53526874 636e4541 74707972 006e6f69     thRSAEncryption.
 80af940:	20415352 68746977 41485320 862a0031     RSA with SHA1.*.
 80af950:	0df78648 000e0101 32616873 69573432     H.......sha224Wi
 80af960:	53526874 636e4541 74707972 006e6f69     thRSAEncryption.
 80af970:	20415352 68746977 41485320 3432322d     RSA with SHA-224
 80af980:	48862a00 010df786 73000b01 35326168     .*.H.......sha25
 80af990:	74695736 41535268 72636e45 69747079     6WithRSAEncrypti
 80af9a0:	52006e6f 77204153 20687469 2d414853     on.RSA with SHA-
 80af9b0:	00363532 8648862a 01010df7 6873000c     256.*.H.......sh
 80af9c0:	34383361 68746957 45415352 7972636e     a384WithRSAEncry
 80af9d0:	6f697470 5352006e 69772041 53206874     ption.RSA with S
 80af9e0:	332d4148 2a003438 f7864886 0d01010d     HA-384.*.H......
 80af9f0:	61687300 57323135 52687469 6e454153     .sha512WithRSAEn
 80afa00:	70797263 6e6f6974 41535200 74697720     cryption.RSA wit
 80afa10:	48532068 31352d41 0e2b0032 001d0203     h SHA-512.+.....
 80afa20:	8648862a 01010df7 5352000a 41535341     *.H.......RSASSA
 80afa30:	5353502d 01062b00 03070505 64690001     -PSS.+........id
 80afa40:	2d706b2d 76726573 75417265 54006874     -kp-serverAuth.T
 80afa50:	5720534c 53206265 65767265 75412072     LS Web Server Au
 80afa60:	6e656874 61636974 6e6f6974 01062b00     thentication.+..
 80afa70:	03070505 64690002 2d706b2d 65696c63     ......id-kp-clie
 80afa80:	7541746e 54006874 5720534c 43206265     ntAuth.TLS Web C
 80afa90:	6e65696c 75412074 6e656874 61636974     lient Authentica
 80afaa0:	6e6f6974 01062b00 03070505 64690003     tion.+........id
 80afab0:	2d706b2d 65646f63 6e676953 00676e69     -kp-codeSigning.
 80afac0:	65646f43 67695320 676e696e 01062b00     Code Signing.+..
 80afad0:	03070505 64690004 2d706b2d 69616d65     ......id-kp-emai
 80afae0:	6f72506c 74636574 006e6f69 616d2d45     lProtection.E-ma
 80afaf0:	50206c69 65746f72 6f697463 062b006e     il Protection.+.
 80afb00:	07050501 69000803 706b2d64 6d69742d     .......id-kp-tim
 80afb10:	61745365 6e69706d 69540067 5320656d     eStamping.Time S
 80afb20:	706d6174 00676e69 0501062b 09030705     tamping.+.......
 80afb30:	2d646900 4f2d706b 53505343 696e6769     .id-kp-OCSPSigni
 80afb40:	4f00676e 20505343 6e676953 00676e69     ng.OCSP Signing.
 80afb50:	00131d55 632d6469 61622d65 43636973     U...id-ce-basicC
 80afb60:	74736e6f 6e696172 42007374 63697361     onstraints.Basic
 80afb70:	6e6f4320 61727473 73746e69 0f1d5500      Constraints.U..
 80afb80:	2d646900 6b2d6563 73557965 00656761     .id-ce-keyUsage.
 80afb90:	00251d55 632d6469 78652d65 79654b74     U.%.id-ce-extKey
 80afba0:	67617355 78450065 646e6574 4b206465     Usage.Extended K
 80afbb0:	55207965 65676173 111d5500 2d646900     ey Usage.U...id-
 80afbc0:	732d6563 656a6275 6c417463 6d614e74     ce-subjectAltNam
 80afbd0:	75530065 63656a62 6c412074 614e2074     e.Subject Alt Na
 80afbe0:	6000656d 86014886 010142f8 2d646900     me.`.H...B...id-
 80afbf0:	7374656e 65706163 7265632d 70797474     netscape-certtyp
 80afc00:	654e0065 61637374 43206570 69747265     e.Netscape Certi
 80afc10:	61636966 54206574 00657079 00030455     ficate Type.U...
 80afc20:	612d6469 6f632d74 6e6f6d6d 656d614e     id-at-commonName
 80afc30:	6d6f4300 206e6f6d 656d614e 06045500     .Common Name.U..
 80afc40:	2d646900 632d7461 746e756f 614e7972     .id-at-countryNa
 80afc50:	4300656d 746e756f 55007972 69000704     me.Country.U...i
 80afc60:	74612d64 636f6c2d 74696c61 6f4c0079     d-at-locality.Lo
 80afc70:	696c6163 4c007974 08045500 2d646900     cality.L.U...id-
 80afc80:	732d7461 65746174 61745300 53006574     at-state.State.S
 80afc90:	04550054 6469000a 2d74612d 6167726f     T.U...id-at-orga
 80afca0:	617a696e 6e6f6974 656d614e 67724f00     nizationName.Org
 80afcb0:	7a696e61 6f697461 004f006e 000b0455     anization.O.U...
 80afcc0:	612d6469 726f2d74 696e6167 6974617a     id-at-organizati
 80afcd0:	6c616e6f 74696e55 656d614e 67724f00     onalUnitName.Org
 80afce0:	696e5520 554f0074 48862a00 010df786      Unit.OU.*.H....
 80afcf0:	65000109 6c69616d 72646441 00737365     ...emailAddress.
 80afd00:	616d2d45 61206c69 65726464 55007373     E-mail address.U
 80afd10:	69000504 74612d64 7265732d 4e6c6169     ...id-at-serialN
 80afd20:	65626d75 65530072 6c616972 6d756e20     umber.Serial num
 80afd30:	00726562 00100455 612d6469 6f702d74     ber.U...id-at-po
 80afd40:	6c617473 72646441 00737365 74736f50     stalAddress.Post
 80afd50:	61206c61 65726464 55007373 69001104     al address.U...i
 80afd60:	74612d64 736f702d 436c6174 0065646f     d-at-postalCode.
 80afd70:	74736f50 63206c61 0065646f 00040455     Postal code.U...
 80afd80:	612d6469 75732d74 6d614e72 75530065     id-at-surName.Su
 80afd90:	6d616e72 4e530065 2a045500 2d646900     rname.SN.U.*.id-
 80afda0:	672d7461 6e657669 656d614e 76694700     at-givenName.Giv
 80afdb0:	6e206e65 00656d61 55004e47 69002b04     en name.GN.U.+.i
 80afdc0:	74612d64 696e692d 6c616974 6e490073     d-at-initials.In
 80afdd0:	61697469 5500736c 69002c04 74612d64     itials.U.,.id-at
 80afde0:	6e65672d 74617265 516e6f69 696c6175     -generationQuali
 80afdf0:	72656966 6e654700 74617265 206e6f69     fier.Generation 
 80afe00:	6c617571 65696669 04550072 6469000c     qualifier.U...id
 80afe10:	2d74612d 6c746974 69540065 00656c74     -at-title.Title.
 80afe20:	002e0455 612d6469 6e642d74 6c617551     U...id-at-dnQual
 80afe30:	65696669 69440072 6e697473 73697567     ifier.Distinguis
 80afe40:	20646568 656d614e 61757120 6966696c     hed Name qualifi
 80afe50:	55007265 69004104 74612d64 6573702d     er.U.A.id-at-pse
 80afe60:	6e6f6475 50006d79 64756573 6d796e6f     udonym.Pseudonym
 80afe70:	26920900 2cf29389 00190164 642d6469     ...&...,d...id-d
 80afe80:	69616d6f 6d6f436e 656e6f70 4400746e     omainComponent.D
 80afe90:	69616d6f 6f63206e 6e6f706d 00746e65     omain component.
 80afea0:	55004344 69002d04 74612d64 696e752d     DC.U.-.id-at-uni
 80afeb0:	49657571 746e6564 65696669 6e550072     queIdentifier.Un
 80afec0:	65757169 65644920 6669746e 00726569     ique Identifier.

080afed0 <_ZL18oid_pkcs12_pbe_alg>:
 80afed0:	080af700 0000000a 080af70b 080af72b     ............+...
 80afee0:	00002504 080af748 0000000a 080af753     .%..H.......S...
 80afef0:	080af773 00002304 00000000 00000000     s....#..........
	...

080aff0c <_ZL10oid_md_alg>:
 80aff0c:	080af831 00000005 080af837 080af7a7     1.......7.......
 80aff1c:	00000004 080af83f 00000009 080af849     ....?.......I...
 80aff2c:	080af979 00000005 080af853 00000009     y.......S.......
 80aff3c:	080af85d 080af9ac 00000006 080af867     ]...........g...
 80aff4c:	00000009 080af871 080af9df 00000007     ....q...........
 80aff5c:	080af87b 00000009 080af885 080afa12     {...............
 80aff6c:	00000008 00000000 00000000 00000000     ................
	...

080aff84 <_ZL11oid_sig_alg>:
 80aff84:	080af91f 00000009 080af929 080af940     ........)...@...
 80aff94:	00000104 080af94e 00000009 080af958     ....N.......X...
 80affa4:	080af970 00000105 080af981 00000009     p...............
 80affb4:	080af98b 080af9a3 00000106 080af9b4     ................
 80affc4:	00000009 080af9be 080af9d6 00000107     ................
 80affd4:	080af9e7 00000009 080af9f1 080afa09     ................
 80affe4:	00000108 080afa1a 00000005 080af929     ............)...
 80afff4:	080af940 00000104 080afa20 00000009     @....... .......
 80b0004:	080afa2a 080afa2a 00000600 00000000     *...*...........
	...

080b0024 <_ZL11oid_md_hmac>:
 80b0024:	080af790 00000008 080af799 080af7a2     ................
 80b0034:	00000004 080af7ad 00000008 080af7b6     ................
 80b0044:	080af7c1 00000005 080af7ce 00000008     ................
 80b0054:	080af7d7 080af7e2 00000006 080af7ef     ................
 80b0064:	00000008 080af7f8 080af803 00000007     ................
 80b0074:	080af810 00000008 080af819 080af824     ............$...
 80b0084:	00000008 00000000 00000000 00000000     ................
	...

080b009c <_ZL12oid_x509_ext>:
 80b009c:	080afb50 00000003 080afb54 080afb6b     P.......T...k...
 80b00ac:	00000100 080afb7d 00000003 080afb81     ....}...........
 80b00bc:	080afbaf 00000004 080afb90 00000003     ................
 80b00cc:	080afb94 080afba6 00000800 080afbb9     ................
 80b00dc:	00000003 080afbbd 080afbd2 00000020     ............ ...
 80b00ec:	080afbe3 00000009 080afbed 080afc02     ................
 80b00fc:	00010000 00000000 00000000 00000000     ................
	...

080b0114 <_ZL16aes_256_ecb_info>:
 80b0114:	00000104 00000100 080b01f4 00000010     ................
 80b0124:	00000000 00000010 080b01b8              ............

080b0130 <_ZL16aes_128_ecb_info>:
 80b0130:	00000102 00000080 080b020c 00000010     ................
 80b0140:	00000000 00000010 080b01b8              ............

080b014c <_ZL12gcm_aes_info>:
 80b014c:	00000002 00000000 080a461b 080a461b     .........F...F..
 80b015c:	080a4603 080a45f1                       .F...E..

080b0164 <mbedtls_cipher_definitions>:
 80b0164:	00000002 080b0130 00000003 080b0218     ....0...........
 80b0174:	00000004 080b0114 0000000e 080b0234     ............4...
 80b0184:	0000000f 080b019c 00000010 080b0250     ............P...
	...

080b019c <_ZL16aes_192_gcm_info>:
 80b019c:	0000060f 000000c0 080b01dc 0000000c     ................
 80b01ac:	00000001 00000010 080b014c              ........L...

080b01b8 <_ZL8aes_info>:
 80b01b8:	00000002 080a4657 080a4653 080a464f     ....WF..SF..OF..
 80b01c8:	080a4637 080a4625 2d534541 2d363532     7F..%F..AES-256-
 80b01d8:	004d4347 2d534541 2d323931 004d4347     GCM.AES-192-GCM.
 80b01e8:	2d534541 2d383231 004d4347 2d534541     AES-128-GCM.AES-
 80b01f8:	2d363532 00424345 2d534541 2d323931     256-ECB.AES-192-
 80b0208:	00424345 2d534541 2d383231 00424345     ECB.AES-128-ECB.

080b0218 <_ZL16aes_192_ecb_info>:
 80b0218:	00000103 000000c0 080b0200 00000010     ................
 80b0228:	00000000 00000010 080b01b8              ............

080b0234 <_ZL16aes_128_gcm_info>:
 80b0234:	0000060e 00000080 080b01e8 0000000c     ................
 80b0244:	00000001 00000010 080b014c              ........L...

080b0250 <_ZL16aes_256_gcm_info>:
 80b0250:	00000610 00000100 080b01d0 0000000c     ................
 80b0260:	00000001 00000010 080b014c 2e617372     ........L...rsa.
 80b0270:	7372004e 00452e61                       N.rsa.E.

080b0278 <mbedtls_rsa_info>:
 80b0278:	00000001 080af8d7 080a46bd 080a465b     .........F..[F..
 80b0288:	080a47a1 080a4761 080a4715 080a46c9     .G..aG...G...F..
 80b0298:	080a46b9 080a469f 080a468d 080a4669     .F...F...F..iF..
 80b02a8:	6e6b6e75 006e776f 2d534c54 2d415352     unknown.TLS-RSA-
 80b02b8:	48544957 5345412d 3635322d 4d43472d     WITH-AES-256-GCM
 80b02c8:	4148532d 00343833 2d534c54 2d415352     -SHA384.TLS-RSA-
 80b02d8:	48544957 5345412d 3832312d 4d43472d     WITH-AES-128-GCM
 80b02e8:	4148532d 00363532                       -SHA256.

080b02f0 <_ZL23ciphersuite_definitions>:
 80b02f0:	0000009d 080b02b0 00010710 00000003     ................
 80b0300:	00000003 00000003 00000003 00000000     ................
 80b0310:	0000009c 080b02d0 0001060e 00000003     ................
 80b0320:	00000003 00000003 00000003 00000000     ................
 80b0330:	00000000 080af8c8 00000000 00000000     ................
	...

080b0350 <_ZL22ciphersuite_preference>:
 80b0350:	0000c02c 0000c030 0000009f 0000c0ad     ,...0...........
 80b0360:	0000c09f 0000c024 0000c028 0000006b     ....$...(...k...
 80b0370:	0000c00a 0000c014 00000039 0000c0af     ........9.......
 80b0380:	0000c0a3 0000c087 0000c08b 0000c07d     ............}...
 80b0390:	0000c073 0000c077 000000c4 00000088     s...w...........
 80b03a0:	0000c02b 0000c02f 0000009e 0000c0ac     +.../...........
 80b03b0:	0000c09e 0000c023 0000c027 00000067     ....#...'...g...
 80b03c0:	0000c009 0000c013 00000033 0000c0ae     ........3.......
 80b03d0:	0000c0a2 0000c086 0000c08a 0000c07c     ............|...
 80b03e0:	0000c072 0000c076 000000be 00000045     r...v.......E...
 80b03f0:	0000c008 0000c012 00000016 000000ab     ................
 80b0400:	0000c0a7 0000c038 000000b3 0000c036     ....8.......6...
 80b0410:	00000091 0000c091 0000c09b 0000c097     ................
 80b0420:	0000c0ab 000000aa 0000c0a6 0000c037     ............7...
 80b0430:	000000b2 0000c035 00000090 0000c090     ....5...........
 80b0440:	0000c096 0000c09a 0000c0aa 0000c034     ............4...
 80b0450:	0000008f 0000c0ff 0000009d 0000c09d     ................
 80b0460:	0000003d 00000035 0000c032 0000c02a     =...5...2...*...
 80b0470:	0000c00f 0000c02e 0000c026 0000c005     ........&.......
 80b0480:	0000c0a1 0000c07b 000000c0 00000084     ....{...........
 80b0490:	0000c08d 0000c079 0000c089 0000c075     ....y.......u...
 80b04a0:	0000009c 0000c09c 0000003c 0000002f     ........<.../...
 80b04b0:	0000c031 0000c029 0000c00e 0000c02d     1...).......-...
 80b04c0:	0000c025 0000c004 0000c0a0 0000c07a     %...........z...
 80b04d0:	000000ba 00000041 0000c08c 0000c078     ....A.......x...
 80b04e0:	0000c088 0000c074 0000000a 0000c00d     ....t...........
 80b04f0:	0000c003 000000ad 000000b7 00000095     ................
 80b0500:	0000c093 0000c099 000000ac 000000b6     ................
 80b0510:	00000094 0000c092 0000c098 00000093     ................
 80b0520:	000000a9 0000c0a5 000000af 0000008d     ................
 80b0530:	0000c08f 0000c095 0000c0a9 000000a8     ................
 80b0540:	0000c0a4 000000ae 0000008c 0000c08e     ................
 80b0550:	0000c094 0000c0a8 0000008b 0000c007     ................
 80b0560:	0000c011 0000c033 0000008e 00000005     ....3...........
 80b0570:	00000004 0000c00c 0000c002 00000092     ................
 80b0580:	0000008a 00000015 00000009 0000c006     ................
 80b0590:	0000c010 0000c03b 0000c03a 0000c039     ....;...:...9...
 80b05a0:	000000b5 000000b4 0000002d 0000003b     ........-...;...
 80b05b0:	00000002 00000001 0000c00b 0000c001     ................
 80b05c0:	000000b9 000000b8 0000002e 000000b1     ................
 80b05d0:	000000b0 0000002c 00000000 00202b20     ....,....... + .
 80b05e0:	2500202c 3f003d73 3a003d3f 32302500     , .%s=.??=.:.%02
 80b05f0:	00732558 2e2e2e2e 3f3f3f00 20732500     X%s......???.%s 
 80b0600:	2079656b 657a6973 48862a00 010df786     key size.*.H....
 80b0610:	0001010c 8648862a 05010df7 2d2d000d     ....*.H.......--
 80b0620:	452d2d2d 5220444e 50204153 41564952     ---END RSA PRIVA
 80b0630:	4b204554 2d2d5945 002d2d2d 2d2d2d2d     TE KEY-----.----
 80b0640:	4745422d 52204e49 50204153 41564952     -BEGIN RSA PRIVA
 80b0650:	4b204554 2d2d5945 002d2d2d 2d2d2d2d     TE KEY-----.----
 80b0660:	444e452d 49525020 45544156 59454b20     -END PRIVATE KEY
 80b0670:	2d2d2d2d 2d2d002d 422d2d2d 4e494745     -----.-----BEGIN
 80b0680:	49525020 45544156 59454b20 2d2d2d2d      PRIVATE KEY----
 80b0690:	2d2d002d 452d2d2d 4520444e 5952434e     -.-----END ENCRY
 80b06a0:	44455450 49525020 45544156 59454b20     PTED PRIVATE KEY
 80b06b0:	2d2d2d2d 2d2d002d 422d2d2d 4e494745     -----.-----BEGIN
 80b06c0:	434e4520 54505952 50204445 41564952      ENCRYPTED PRIVA
 80b06d0:	4b204554 2d2d5945 002d2d2d 2d2d2d2d     TE KEY-----.----
 80b06e0:	444e452d 42555020 2043494c 2d59454b     -END PUBLIC KEY-
 80b06f0:	2d2d2d2d 2d2d2d00 45422d2d 204e4947     ----.-----BEGIN 
 80b0700:	4c425550 4b204349 2d2d5945 002d2d2d     PUBLIC KEY-----.

080b0710 <_ZL5last4>:
	...
 80b0718:	00001c20 00000000 00003840 00000000      .......@8......
 80b0728:	00002460 00000000 00007080 00000000     `$.......p......
 80b0738:	00006ca0 00000000 000048c0 00000000     .l.......H......
 80b0748:	000054e0 00000000 0000e100 00000000     .T..............
 80b0758:	0000fd20 00000000 0000d940 00000000      .......@.......
 80b0768:	0000c560 00000000 00009180 00000000     `...............
 80b0778:	00008da0 00000000 0000a9c0 00000000     ................
 80b0788:	0000b5e0 00000000                       ........

080b0790 <_ZL14base64_dec_map>:
 80b0790:	7f7f7f7f 7f7f7f7f 7f7f7f7f 7f7f7f7f     ................
 80b07a0:	7f7f7f7f 7f7f7f7f 7f7f7f7f 7f7f7f7f     ................
 80b07b0:	7f7f7f7f 7f7f7f7f 3e7f7f7f 3f7f7f7f     ...........>...?
 80b07c0:	37363534 3b3a3938 7f7f3d3c 7f7f407f     456789:;<=...@..
 80b07d0:	0201007f 06050403 0a090807 0e0d0c0b     ................
 80b07e0:	1211100f 16151413 7f191817 7f7f7f7f     ................
 80b07f0:	1c1b1a7f 201f1e1d 24232221 28272625     ....... !"#$%&'(
 80b0800:	2c2b2a29 302f2e2d 7f333231 7f7f7f7f     )*+,-./0123.....

080b0810 <CSWTCH.21>:
 80b0810:	080af384 080af3b4 080af444 080af3e4     ........D.......
 80b0820:	080af414                                ....

080b0824 <_ZL23x509_crt_verify_strings>:
 80b0824:	00000001 080b0bf7 00000002 080b0c1c     ................
 80b0834:	00000004 080b0c4b 00000008 080b0c90     ....K...........
 80b0844:	00000010 080b0cca 00000020 080b0cfc     ........ .......
 80b0854:	00000040 080b0d0f 00000080 080b0d27     @...........'...
 80b0864:	00000100 080b0d4c 00000200 080b0d7a     ....L.......z...
 80b0874:	00000400 080b0da8 00000800 080b0dc3     ................
 80b0884:	00001000 080b0def 00002000 080b0e23     ......... ..#...
 80b0894:	00004000 080b0e51 00008000 080b0e86     .@..Q...........
 80b08a4:	00010000 080b0ecf 00020000 080b0f21     ............!...
 80b08b4:	00040000 080b0f4e 00080000 080b0f8f     ....N...........
	...

080b08cc <mbedtls_x509_crt_profile_default>:
 80b08cc:	000000f0 0fffffff 0fffffff 00000800     ................
 80b08dc:	65757274 6c616600 0a006573 74726543     true.false..Cert
 80b08ec:	63696669 20657461 75207369 696e696e     ificate is unini
 80b08fc:	6c616974 64657369 25000a21 72656373     tialised!..%scer
 80b090c:	76202e74 69737265 20206e6f 3a202020     t. version     :
 80b091c:	0a642520 73732500 61697265 756e206c      %d..%sserial nu
 80b092c:	7265626d 20202020 00203a20 6973250a     mber     : ..%si
 80b093c:	65757373 616e2072 2020656d 20202020     ssuer name      
 80b094c:	00203a20 7373250a 656a6275 6e207463      : ..%ssubject n
 80b095c:	20656d61 20202020 00203a20 6973250a     ame      : ..%si
 80b096c:	65757373 6f202064 2020206e 20202020     ssued  on       
 80b097c:	25203a20 2d643430 64323025 3230252d      : %04d-%02d-%02
 80b098c:	30252064 253a6432 3a643230 64323025     d %02d:%02d:%02d
 80b099c:	73250a00 69707865 20736572 20206e6f     ..%sexpires on  
 80b09ac:	20202020 203a2020 64343025 3230252d           : %04d-%02
 80b09bc:	30252d64 25206432 3a643230 64323025     d-%02d %02d:%02d
 80b09cc:	3230253a 250a0064 67697373 2064656e     :%02d..%ssigned 
 80b09dc:	6e697375 20202067 3a202020 250a0020     using      : ..%
 80b09ec:	312d2573 203a7338 62206425 00737469     s%-18s: %d bits.
 80b09fc:	6273250a 63697361 6e6f6320 61727473     .%sbasic constra
 80b0a0c:	73746e69 43203a20 73253d41 6d202c00     ints : CA=%s., m
 80b0a1c:	705f7861 6c687461 253d6e65 250a0064     ax_pathlen=%d..%
 80b0a2c:	62757373 7463656a 746c6120 6d616e20     ssubject alt nam
 80b0a3c:	3a202065 250a0020 72656373 74202e74     e  : ..%scert. t
 80b0a4c:	20657079 20202020 3a202020 73250020     ype        : .%s
 80b0a5c:	204c5353 65696c43 2500746e 4c535373     SSL Client.%sSSL
 80b0a6c:	72655320 00726576 6d457325 006c6961      Server.%sEmail.
 80b0a7c:	624f7325 7463656a 67695320 676e696e     %sObject Signing
 80b0a8c:	52732500 72657365 00646576 53537325     .%sReserved.%sSS
 80b0a9c:	4143204c 45732500 6c69616d 00414320     L CA.%sEmail CA.
 80b0aac:	624f7325 7463656a 67695320 676e696e     %sObject Signing
 80b0abc:	00414320 6b73250a 75207965 65676173      CA..%skey usage
 80b0acc:	20202020 20202020 00203a20 69447325              : .%sDi
 80b0adc:	61746967 6953206c 74616e67 00657275     gital Signature.
 80b0aec:	6f4e7325 6552206e 69647570 6f697461     %sNon Repudiatio
 80b0afc:	7325006e 2079654b 69636e45 72656870     n.%sKey Encipher
 80b0b0c:	746e656d 44732500 20617461 69636e45     ment.%sData Enci
 80b0b1c:	72656870 746e656d 4b732500 41207965     pherment.%sKey A
 80b0b2c:	65657267 746e656d 4b732500 43207965     greement.%sKey C
 80b0b3c:	20747265 6e676953 43732500 53204c52     ert Sign.%sCRL S
 80b0b4c:	006e6769 6e457325 68706963 4f207265     ign.%sEncipher O
 80b0b5c:	00796c6e 65447325 68706963 4f207265     nly.%sDecipher O
 80b0b6c:	00796c6e 6573250a 6b207478 75207965     nly..%sext key u
 80b0b7c:	65676173 20202020 00203a20 73257325     sage     : .%s%s
 80b0b8c:	25732500 25000a73 6b6e5573 6e776f6e     .%s%s..%sUnknown
 80b0b9c:	61657220 206e6f73 69687428 68732073      reason (this sh
 80b0bac:	646c756f 746f6e20 70616820 296e6570     ould not happen)
 80b0bbc:	2e2a000a 2d2d2d00 45422d2d 204e4947     ..*..-----BEGIN 
 80b0bcc:	54524543 43494649 2d455441 2d2d2d2d     CERTIFICATE-----
 80b0bdc:	2d2d2d00 4e452d2d 45432044 46495452     .-----END CERTIF
 80b0bec:	54414349 2d2d2d45 54002d2d 63206568     ICATE-----.The c
 80b0bfc:	69747265 61636966 76206574 64696c61     ertificate valid
 80b0c0c:	20797469 20736168 69707865 00646572     ity has expired.
 80b0c1c:	20656854 74726563 63696669 20657461     The certificate 
 80b0c2c:	20736168 6e656562 76657220 64656b6f     has been revoked
 80b0c3c:	73692820 206e6f20 52432061 5400294c      (is on a CRL).T
 80b0c4c:	63206568 69747265 61636966 43206574     he certificate C
 80b0c5c:	6f6d6d6f 614e206e 2820656d 20294e43     ommon Name (CN) 
 80b0c6c:	73656f64 746f6e20 74616d20 77206863     does not match w
 80b0c7c:	20687469 20656874 65707865 64657463     ith the expected
 80b0c8c:	004e4320 20656854 74726563 63696669      CN.The certific
 80b0c9c:	20657461 6e207369 6320746f 6572726f     ate is not corre
 80b0cac:	796c7463 67697320 2064656e 74207962     ctly signed by t
 80b0cbc:	74206568 74737572 43206465 68540041     he trusted CA.Th
 80b0ccc:	52432065 7369204c 746f6e20 726f6320     e CRL is not cor
 80b0cdc:	74636572 7320796c 656e6769 79622064     rectly signed by
 80b0cec:	65687420 75727420 64657473 00414320      the trusted CA.
 80b0cfc:	20656854 204c5243 65207369 72697078     The CRL is expir
 80b0d0c:	43006465 69747265 61636966 77206574     ed.Certificate w
 80b0d1c:	6d207361 69737369 4300676e 69747265     as missing.Certi
 80b0d2c:	61636966 76206574 66697265 74616369     ficate verificat
 80b0d3c:	206e6f69 20736177 70696b73 00646570     ion was skipped.
 80b0d4c:	6568744f 65722072 6e6f7361 61632820     Other reason (ca
 80b0d5c:	6562206e 65737520 79622064 72657620     n be used by ver
 80b0d6c:	20796669 6c6c6163 6b636162 68540029     ify callback).Th
 80b0d7c:	65632065 66697472 74616369 61762065     e certificate va
 80b0d8c:	6964696c 73207974 74726174 6e692073     lidity starts in
 80b0d9c:	65687420 74756620 00657275 20656854      the future.The 
 80b0dac:	204c5243 66207369 206d6f72 20656874     CRL is from the 
 80b0dbc:	75747566 55006572 65676173 656f6420     future.Usage doe
 80b0dcc:	6f6e2073 616d2074 20686374 20656874     s not match the 
 80b0ddc:	5579656b 65676173 74786520 69736e65     keyUsage extensi
 80b0dec:	55006e6f 65676173 656f6420 6f6e2073     on.Usage does no
 80b0dfc:	616d2074 20686374 20656874 65747865     t match the exte
 80b0e0c:	6465646e 5579654b 65676173 74786520     ndedKeyUsage ext
 80b0e1c:	69736e65 55006e6f 65676173 656f6420     ension.Usage doe
 80b0e2c:	6f6e2073 616d2074 20686374 20656874     s not match the 
 80b0e3c:	6543736e 79547472 65206570 6e657478     nsCertType exten
 80b0e4c:	6e6f6973 65685400 72656320 69666974     sion.The certifi
 80b0e5c:	65746163 20736920 6e676973 77206465     cate is signed w
 80b0e6c:	20687469 75206e61 6363616e 61747065     ith an unaccepta
 80b0e7c:	20656c62 68736168 6854002e 65632065     ble hash..The ce
 80b0e8c:	66697472 74616369 73692065 67697320     rtificate is sig
 80b0e9c:	2064656e 68746977 206e6120 63616e75     ned with an unac
 80b0eac:	74706563 656c6261 204b5020 20676c61     ceptable PK alg 
 80b0ebc:	20676528 20415352 45207376 41534443     (eg RSA vs ECDSA
 80b0ecc:	54002e29 63206568 69747265 61636966     )..The certifica
 80b0edc:	69206574 69732073 64656e67 74697720     te is signed wit
 80b0eec:	6e612068 616e7520 70656363 6c626174     h an unacceptabl
 80b0efc:	656b2065 65282079 61622067 75632064     e key (eg bad cu
 80b0f0c:	2c657672 41535220 6f6f7420 6f687320     rve, RSA too sho
 80b0f1c:	2e297472 65685400 4c524320 20736920     rt)..The CRL is 
 80b0f2c:	6e676973 77206465 20687469 75206e61     signed with an u
 80b0f3c:	6363616e 61747065 20656c62 68736168     nacceptable hash
 80b0f4c:	6854002e 52432065 7369204c 67697320     ..The CRL is sig
 80b0f5c:	2064656e 68746977 206e6120 63616e75     ned with an unac
 80b0f6c:	74706563 656c6261 204b5020 20676c61     ceptable PK alg 
 80b0f7c:	20676528 20415352 45207376 41534443     (eg RSA vs ECDSA
 80b0f8c:	54002e29 43206568 69204c52 69732073     )..The CRL is si
 80b0f9c:	64656e67 74697720 6e612068 616e7520     gned with an una
 80b0fac:	70656363 6c626174 656b2065 65282079     cceptable key (e
 80b0fbc:	61622067 75632064 2c657672 41535220     g bad curve, RSA
 80b0fcc:	6f6f7420 6f687320 2e297472 00000000      too short).....

080b0fdc <mbedtls_x509_crt_profile_suiteb>:
 80b0fdc:	00000060 0000000a 00000000 00000000     `...............
 80b0fec:	65696c63 6620746e 73696e69 00646568     client finished.
 80b0ffc:	76726573 66207265 73696e69 00646568     server finished.
 80b100c:	7473616d 73207265 65726365 656b0074     master secret.ke
 80b101c:	78652079 736e6170 006e6f69 764c5353     y expansion.SSLv
 80b102c:	00302e33 76534c54 00302e31 76534c54     3.0.TLSv1.0.TLSv
 80b103c:	00312e31 76534c54 00322e31              1.1.TLSv1.2.

080b1048 <CSWTCH.195>:
 80b1048:	05040302 00000006                       ........

080b1050 <_ZL18mfl_code_to_length>:
 80b1050:	00002000 00000200 00000400 00000800     . ..............
 80b1060:	00001000 61766e69 2064696c 00004b50     ....invalid PK..

080b1070 <_ZL1K>:
 80b1070:	d728ae22 428a2f98 23ef65cd 71374491     ".(../.B.e.#.D7q
 80b1080:	ec4d3b2f b5c0fbcf 8189dbbc e9b5dba5     /;M.............
 80b1090:	f348b538 3956c25b b605d019 59f111f1     8.H.[.V9.......Y
 80b10a0:	af194f9b 923f82a4 da6d8118 ab1c5ed5     .O....?...m..^..
 80b10b0:	a3030242 d807aa98 45706fbe 12835b01     B........opE.[..
 80b10c0:	4ee4b28c 243185be d5ffb4e2 550c7dc3     ...N..1$.....}.U
 80b10d0:	f27b896f 72be5d74 3b1696b1 80deb1fe     o.{.t].r...;....
 80b10e0:	25c71235 9bdc06a7 cf692694 c19bf174     5..%.....&i.t...
 80b10f0:	9ef14ad2 e49b69c1 384f25e3 efbe4786     .J...i...%O8.G..
 80b1100:	8b8cd5b5 0fc19dc6 77ac9c65 240ca1cc     ........e..w...$
 80b1110:	592b0275 2de92c6f 6ea6e483 4a7484aa     u.+Yo,.-...n..tJ
 80b1120:	bd41fbd4 5cb0a9dc 831153b5 76f988da     ..A....\.S.....v
 80b1130:	ee66dfab 983e5152 2db43210 a831c66d     ..f.RQ>..2.-m.1.
 80b1140:	98fb213f b00327c8 beef0ee4 bf597fc7     ?!...'........Y.
 80b1150:	3da88fc2 c6e00bf3 930aa725 d5a79147     ...=....%...G...
 80b1160:	e003826f 06ca6351 0a0e6e70 14292967     o...Qc..pn..g)).
 80b1170:	46d22ffc 27b70a85 5c26c926 2e1b2138     ./.F...'&.&\8!..
 80b1180:	5ac42aed 4d2c6dfc 9d95b3df 53380d13     .*.Z.m,M......8S
 80b1190:	8baf63de 650a7354 3c77b2a8 766a0abb     .c..Ts.e..w<..jv
 80b11a0:	47edaee6 81c2c92e 1482353b 92722c85     ...G....;5...,r.
 80b11b0:	4cf10364 a2bfe8a1 bc423001 a81a664b     d..L.....0B.Kf..
 80b11c0:	d0f89791 c24b8b70 0654be30 c76c51a3     ....p.K.0.T..Ql.
 80b11d0:	d6ef5218 d192e819 5565a910 d6990624     .R........eU$...
 80b11e0:	5771202a f40e3585 32bbd1b8 106aa070     * qW.5.....2p.j.
 80b11f0:	b8d2d0c8 19a4c116 5141ab53 1e376c08     ........S.AQ.l7.
 80b1200:	df8eeb99 2748774c e19b48a8 34b0bcb5     ....LwH'.H.....4
 80b1210:	c5c95a63 391c0cb3 e3418acb 4ed8aa4a     cZ.....9..A.J..N
 80b1220:	7763e373 5b9cca4f d6b2b8a3 682e6ff3     s.cwO..[.....o.h
 80b1230:	5defb2fc 748f82ee 43172f60 78a5636f     ...]...t`/.Coc.x
 80b1240:	a1f0ab72 84c87814 1a6439ec 8cc70208     r....x...9d.....
 80b1250:	23631e28 90befffa de82bde9 a4506ceb     (.c#.........lP.
 80b1260:	b2c67915 bef9a3f7 e372532b c67178f2     .y......+Sr..xq.
 80b1270:	ea26619c ca273ece 21c0c207 d186b8c7     .a&..>'....!....
 80b1280:	cde0eb1e eada7dd6 ee6ed178 f57d4f7f     .....}..x.n..O}.
 80b1290:	72176fba 06f067aa a2c898a6 0a637dc5     .o.r.g.......}c.
 80b12a0:	bef90dae 113f9804 131c471b 1b710b35     ......?..G..5.q.
 80b12b0:	23047d84 28db77f5 40c72493 32caab7b     .}.#.w.(.$.@{..2
 80b12c0:	15c9bebc 3c9ebe0a 9c100d4c 431d67c4     .......<L....g.C
 80b12d0:	cb3e42b6 4cc5d4be fc657e2a 597f299c     .B>....L*~e..).Y
 80b12e0:	3ad6faec 5fcb6fab 4a475817 6c44198c     ...:.o._.XGJ..Dl
 80b12f0:	636f7250 7079542d 34203a65 434e452c     Proc-Type: 4,ENC
 80b1300:	54505952 02004445 0b070503 1713110d     RYPTED..........
 80b1310:	29251f1d 3b352f2b 4947433d 6159534f     ..%)+/5;=CGIOSYa
 80b1320:	6d6b6765 89837f71 9d97958b b3ada7a3     egkmq...........
 80b1330:	c5c1bfb5 e3dfd3c7 f1efe9e5 2d2d2dfb              .............

080b133d <_ZL18amazonIoTRootCaPem>:
 80b133d:	2d2d2d2d 4745422d 43204e49 49545245     -----BEGIN CERTI
 80b134d:	41434946 2d2d4554 202d2d2d 494d0a0d     FICATE----- ..MI
 80b135d:	7a304549 37414343 77416775 67414249     IE0zCCA7ugAwIBAg
 80b136d:	4e475149 696e5272 4c36395a 56494b74     IQGNrRniZ96LtKIV
 80b137d:	477a4e6a 6a533773 67424e41 6b68716b     jNzGs7SjANBgkqhk
 80b138d:	77394769 51414230 44414655 790a4243     iG9w0BAQUFADCB.y
 80b139d:	4d4c456a 41476b41 42455531 56434d68     jELMAkGA1UEBhMCV
 80b13ad:	46784d56 4256417a 42564e67 44546f41     VMxFzAVBgNVBAoTD
 80b13bd:	636c5a6c 61546c6d 4c756457 624a4243     lZlcmlTaWduLCBJb
 80b13cd:	4d754d6d 48773852 56445951 0a4c5151     mMuMR8wHQYDVQQL.
 80b13dd:	575a7845 704a585a 6e6c3255 55426962     ExZWZXJpU2lnbiBU
 80b13ed:	7a566e63 4f424364 3352585a 724a3362     cnVzdCBOZXR3b3Jr
 80b13fd:	776f544d 4459414f 4c515156 6f457a45     MTowOAYDVQQLEzEo
 80b140d:	676b7959 77416a4d 5742694e 704a585a     YykgMjAwNiBWZXJp
 80b141d:	6c32550a 7769626e 35575367 41694c6a     .U2lnbiwgSW5jLiA
 80b142d:	5a454974 42696376 52586468 4a33626f     tIEZvciBhdXRob3J
 80b143d:	566d6570 5648496b 42535a7a 786d6276     pemVkIHVzZSBvbmx
 80b144d:	55554d35 59775177 51515644 787a4544     5MUUwQwYDVQQDEzx
 80b145d:	585a0a57 3255704a 69626e6c 47624442     W.ZXJpU2lnbiBDbG
 80b146d:	79637a46 46497a41 6d593142 79597078     FzcyAzIFB1YmxpYy
 80b147d:	6d635142 5859746c 4549354a 6e636c4e     BQcmltYXJ5IENlcn
 80b148d:	6d5a7052 58596a6c 32627052 58516734     RpZmljYXRpb24gQX
 80b149d:	610a3056 61793947 49355258 52673043     V0.aG9yaXR5IC0gR
 80b14ad:	4877557a 4d4e6368 4d785944 4d344154     zUwHhcNMDYxMTA4M
 80b14bd:	4d774144 57774144 4d4e6368 4e77597a     DAwMDAwWhcNMzYwN
 80b14cd:	4d32457a 4f314d6a 57355554 7942436a     zE2MjM1OTU5WjCBy
 80b14dd:	0a4c456a 476b414d 45553141 434d6842     jEL.MAkGA1UEBhMC
 80b14ed:	784d5656 56417a46 564e6742 546f4142     VVMxFzAVBgNVBAoT
 80b14fd:	6c5a6c44 546c6d63 75645761 4a42434c     DlZlcmlTaWduLCBJ
 80b150d:	754d6d62 7738524d 44595148 4c515156     bmMuMR8wHQYDVQQL
 80b151d:	575a7845 4a585a0a 6c325570 4269626e     ExZW.ZXJpU2lnbiB
 80b152d:	566e6355 4243647a 52585a4f 4a336233     UcnVzdCBOZXR3b3J
 80b153d:	6f544d72 59414f77 51515644 457a454c     rMTowOAYDVQQLEzE
 80b154d:	6b79596f 416a4d67 42694e77 4a585a57     oYykgMjAwNiBWZXJ
 80b155d:	6c325570 69620a6e 57536777 694c6a35     pU2ln.biwgSW5jLi
 80b156d:	45497441 6963765a 58646842 33626f52     AtIEZvciBhdXRob3
 80b157d:	6d65704a 48496b56 535a7a56 6d627642     JpemVkIHVzZSBvbm
 80b158d:	554d3578 77517755 51564459 7a454451     x5MUUwQwYDVQQDEz
 80b159d:	585a5778 550a704a 626e6c32 62444269     xWZXJp.U2lnbiBDb
 80b15ad:	637a4647 497a4179 59314246 5970786d     GFzcyAzIFB1YmxpY
 80b15bd:	63514279 59746c6d 49354a58 636c4e45     yBQcmltYXJ5IENlc
 80b15cd:	5a70526e 596a6c6d 62705258 51673432     nRpZmljYXRpb24gQ
 80b15dd:	61305658 0a793947 35525861 67304349     XV0aG9y.aXR5IC0g
 80b15ed:	77557a52 69456767 4730414d 47715343     RzUwggEiMA0GCSqG
 80b15fd:	33624953 42455144 41555141 42493441     SIb3DQEBAQUAA4IB
 80b160d:	77417744 4b456767 42496f41 76435141     DwAwggEKAoIBAQCv
 80b161d:	4967414a 316f584b 416d6e0a 6475714d     JAgIKXo1.nmAMqud
 80b162d:	37304f4c 774c6663 79525238 442b4b37     LO07cfLw8RRy7K+D
 80b163d:	4c514b2b 69775635 55495a6a 582f4a56     +KQL5VwijZIUVJ/X
 80b164d:	67637278 30566978 71433669 4b6b7071     xrcgxiV0i6CqqpkK
 80b165d:	692f6a7a 65625635 30740a78 6f2f7a75     zj/i5Vbex.t0uz/o
 80b166d:	31422b39 30377366 6d5a6250 63595649     9+B1fs70PbZmIVYc
 80b167d:	61446739 76335954 3277676a 56504949     9gDaTY3vjgw2IIPV
 80b168d:	30365451 56574b6e 754a4653 786a7255     QT60nKWVSFJuUrjx
 80b169d:	2f366675 636b6857 530a7a49 59446864     uf6/WhkcIz.SdhDY
 80b16ad:	53537032 36504b39 54524248 614a4764     2pSS9KP6HBRTdGJa
 80b16bd:	63487658 337a6150 32304a42 53647433     XvHcPaz3BJ023tdS
 80b16cd:	6c546231 64563872 39774736 386c494b     1bTlr8Vd6Gw9KIl8
 80b16dd:	6b633871 3559636d 0a475166 512b4f42     q8ckmcY5fQG.BO+Q
 80b16ed:	41516575 36304e35 2f6e5274 30727241     ueQA5N06tRn/Arr0
 80b16fd:	67374f50 33732b69 307a2b69 797a3631     PO7gi+s3i+z016zy
 80b170d:	39417639 31313972 5a4d546b 41785248     9vA9r911kTMZHRxA
 80b171d:	6b513379 54475347 2b545232 7043720a     y3QkGSGT2RT+.rCp
 80b172d:	2f347853 6e454256 4e576a6b 78446948     Sx4/VBEnkjWNHiDx
 80b173d:	76386770 3037522b 2f6b6672 34616c46     pg8v+R70rfk/Fla4
 80b174d:	54646e4f 42385152 4d2b636e 37484355     OndTRQ8Bnc+MUCH7
 80b175d:	3935506c 4d44757a 30317a4b 494e0a2f     lP59zuDMKz10/.NI
 80b176d:	75695765 43365435 67415655 4141424d     eWiu5T6CUVAgMBAA
 80b177d:	62676a47 61677749 77447738 52564459     GjgbIwga8wDwYDVR
 80b178d:	51415430 41422f48 77417755 7a2f4245     0TAQH/BAUwAwEB/z
 80b179d:	67424f41 5148564e 66414238 420a4538     AOBgNVHQ8BAf8E.B
 80b17ad:	41434d41 62775951 4b495951 42425977     AMCAQYwbQYIKwYBB
 80b17bd:	41485551 59457751 6f664254 57673256     QUHAQwEYTBfoV2gW
 80b17cd:	4d5a427a 56776346 614a5952 5a683157     zBZMFcwVRYJaW1hZ
 80b17dd:	5a765532 4d6d6c32 48774543 0a48417a     2UvZ2lmMCEwHzAH.
 80b17ed:	72556742 434d6744 55516747 54582b6a     BgUrDgMCGgQUj+XT
 80b17fd:	73616f47 7235596a 412b3877 49527461     GoasjY5rw8+AatRI
 80b180d:	37784347 77345347 6a59524a 30524861     GCx7GS4wJRYjaHR0
 80b181d:	766f4463 7678324c 7538325a 79566d64     cDovL2xvZ28udmVy
 80b182d:	4e58610a 34325a70 39325975 5a334c74     .aXNpZ24uY29tL3Z
 80b183d:	3947627a 3579626e 5957616e 59514877     zbG9nby5naWYwHQY
 80b184d:	30525644 5942424f 2f484645 66615a54     DVR0OBBYEFH/TZaf
 80b185d:	79653343 41443837 4d30384a 4b672b35     C3ey78DAJ80M5+gK
 80b186d:	7a4d0a76 414d7a45 53434730 49534771     v.MzEzMA0GCSqGSI
 80b187d:	51443362 51424245 34414155 51414249     b3DQEBBQUAA4IBAQ
 80b188d:	454a5443 3258776f 4232504c 7a4c5971     CTJEowX2LP2BqYLz
 80b189d:	4a337133 5876746b 58703266 4f4f696b     3q3JktvXf2pXkiOO
 80b18ad:	700a457a 45344236 44693171 5a77566b     zE.p6B4Eq1iDkVwZ
 80b18bd:	6c6e584d 6d745932 582b6c41 7a572f36     MXnl2YtmAl+X6/Wz
 80b18cd:	386c6843 43714767 33487042 66356e76     Chl8gGqCBpH3vn5f
 80b18dd:	43614a4a 44676b47 622b6b64 44383457     JJaCGkgDdk+bW48D
 80b18ed:	0a593757 52616735 35694251 74484d2b     W7Y.5gaRQBi5+MHt
 80b18fd:	42743933 57437571 4e6e4d49 3455425a     39tBquCWIMnNZBU4
 80b190d:	556d6367 454b7137 5473514b 62373462     gcmU7qKEKQsTb47b
 80b191d:	6c304e44 6b757441 456c7869 36466b30     DN0lAtukixlE0kF6
 80b192d:	4b6c5742 3945570a 366e7967 73676143     BWlK.WE9gyn6Cags
 80b193d:	55697143 58624f58 652b6662 71535a45     CqiUXObXbf+eEZSq
 80b194d:	32726956 366c3347 4d6f4642 7a4d4574     Vir2G3l6BFoMtEMz
 80b195d:	69612f65 306d4b43 3077486f 584f784c     e/aiCKm0oHw0LxOX
 80b196d:	5969476e 66340a5a 78625251 666c3143     nGiYZ.4fQRbxC1lf
 80b197d:	67516e7a 38327955 56556436 70746f34     znQgUy286dUV4otp
 80b198d:	31304636 58707676 48514631 77744f4b     6F01vvpX1FQHKOtw
 80b199d:	67447235 7a4d3762 62634956 344a6469     5rDgb7MzVIcbidJ4
 80b19ad:	565a4576 680a4e38 5263616e 6c327248     vEZV8N.hnacRHr2l
 80b19bd:	58327a56 4d494954 74555236 612f6768     Vz2XTIIM6RUthg/a
 80b19cd:	51797a46 4f46716b 58445346 4c6f4839     FzyQkqFOFSDX9HoL
 80b19dd:	45734b50 376f6164 0d714e57 2d2d2d0a     PKsEdao7WNq..---
 80b19ed:	4e452d2d 45432044 46495452 54414349     --END CERTIFICAT
 80b19fd:	2d2d2d45 00202d2d 72617073 696c636b     E----- .sparkcli
 80b1a0d:	00746e65                                ent.

080b1a11 <_ZL12clientKeyPem>:
 80b1a11:	2d2d2d2d 4745422d 52204e49 50204153     -----BEGIN RSA P
 80b1a21:	41564952 4b204554 2d2d5945 0d2d2d2d     RIVATE KEY-----.
 80b1a31:	49494d0a 49776f45 4b414142 45514143     .MIIEowIBAAKCAQE
 80b1a41:	73477a41 534e3546 74592b77 396f336e     AzGsF5NSw+Ytn3o9
 80b1a51:	524f5367 42414475 322b4a30 77746f6d     gSORuDAB0J+2motw
 80b1a61:	37445943 4d6c352b 33425163 33527134     CYD7+5lMcQB34qR3
 80b1a71:	78370a61 79485631 30623874 786a4248     a.7x1VHyt8b0HBjx
 80b1a81:	6f616833 5145704b 44633463 7a345772     3haoKpEQc4cDrW4z
 80b1a91:	4a765943 384f3548 6b633934 71724e74     CYvJH5O849cktNrq
 80b1aa1:	58343161 6d554e58 2b4b6875 76594846     a14XXNUmuhK+FHYv
 80b1ab1:	6b0a5a2b 54764835 57483041 524b6737     +Z.k5HvTA0HW7gKR
 80b1ac1:	7a6e5447 54643261 36386652 7243425a     GTnza2dTRf86ZBCr
 80b1ad1:	37363038 717a5a43 69646f52 6f477279     8067CZzqRodiyrGo
 80b1ae1:	54613335 67514664 4e684f44 6e506373     53aTdFQgDOhNscPn
 80b1af1:	0a6a742f 542f2f34 59313636 41653978     /tj.4//T661Yx9eA
 80b1b01:	51764435 30626371 2f4a4165 45396a62     5DvQqcb0eAJ/bj9E
 80b1b11:	436d4a2f 61484a48 78504779 4f6e5a4f     /JmCHJHayGPxOZnO
 80b1b21:	64615659 31684d55 2f78565a 4c76716f     YVadUMh1ZVx/oqvL
 80b1b31:	6e383173 6731690a 486f7052 776a3448     s18n.i1gRpoHH4jw
 80b1b41:	376c4b5a 31456851 5830476a 5348544d     ZKl7QhE1jG0XMTHS
 80b1b51:	74584262 7543504e 44414669 6c436674     bBXtNPCuiFADtfCl
 80b1b61:	314d5032 6c486337 65697138 5058734f     2PM17cHl8qieOsXP
 80b1b71:	564f534d 784d0a49 65585961 30776677     MSOVI.MxaYXewfw0
 80b1b81:	35477771 2f69434b 7539386c 32546375     qwG5KCi/l89uucT2
 80b1b91:	34345a51 6a7a6849 5148487a 51414449     QZ44IhzjzHHQIDAQ
 80b1ba1:	6f414241 48414249 4c515569 6b674576     ABAoIBAHiUQLvEgk
 80b1bb1:	55355167 420a786f 6c36694c 5a616466     gQ5Uox.BLi6lfdaZ
 80b1bc1:	55516f53 394a5578 31545468 7a455141     SoQUxUJ9hTT1AQEz
 80b1bd1:	3437736b 51507671 6d39396f 38774a2f     ks74qvPQo99m/Jw8
 80b1be1:	586d756b 74526941 52672f5a 68573474     kumXAiRtZ/gRt4Wh
 80b1bf1:	5564496b 0a636878 54774257 434c7864     kIdUxhc.WBwTdxLC
 80b1c01:	616a7843 70356f4e 4578434a 6c4d7345     CxjaNo5pJCxEEsMl
 80b1c11:	474c6358 39646864 4d666863 57323349     XcLGdhd9chfMI32W
 80b1c21:	65706479 41417961 7a4d5937 7a412f66     ydpeayAA7YMzf/Az
 80b1c31:	746e4330 32684977 544f350a 6f616f62     0CntwIh2.5OTboao
 80b1c41:	31354445 35447442 524b4a62 66616232     ED51BtD5bJKR2baf
 80b1c51:	7a4b7a52 62444845 626b4d44 79447a39     RzKzEHDbDMkb9zDy
 80b1c61:	76643747 437a6839 7a337056 5a533263     G7dv9hzCVp3zc2SZ
 80b1c71:	772f4f61 4b542f30 4d660a36 51447843     aO/w0/TK6.fMCxDQ
 80b1c81:	77396f4f 72384c58 716d612f 4a6c304f     Oo9wXL8r/amqO0lJ
 80b1c91:	75507043 49737644 4161494b 61706c39     CpPuDvsIKIaA9lpa
 80b1ca1:	6d776131 526b4a48 3463596a 7a316c6f     1awmHJkRjYc4ol1z
 80b1cb1:	51444156 7a54394b 340a3170 474d3538     VADQK9Tzp1.485MG
 80b1cc1:	5230484e 357a6e46 41376957 2f75332b     NH0RFnz5Wi7A+3u/
 80b1cd1:	362b7856 43517141 4a4a3443 414c4944     Vx+6AqQCC4JJDILA
 80b1ce1:	49766b50 67506936 69617043 546a7367     PkvI6iPgCpaigsjT
 80b1cf1:	536d4334 68316b43 0a6a6d51 56713561     4CmSCk1hQmj.a5qV
 80b1d01:	436b5837 41455967 4c78462b 46704973     7XkCgYEA+FxLsIpF
 80b1d11:	746e6152 482f4d6e 58665933 5a516663     RantnM/H3YfXcfQZ
 80b1d21:	32364171 4b59756c 6357334a 56545438     qA62luYKJ3Wc8TTV
 80b1d31:	64396e76 4d742f56 6c5a4f67 4561750a     vn9dV/tMgOZl.uaE
 80b1d41:	74435565 2b393747 72374347 446d7176     eUCtG79+GC7rvqmD
 80b1d51:	6c4c4a37 73504e42 392f2f2f 59685a35     7JLlBNPs///95ZhY
 80b1d61:	5a687131 7a2b764b 59416f48 41307278     1qhZKv+zHoAYxr0A
 80b1d71:	3762564a 36347833 6e503337 73540a72     JVb73x4673Pnr.Ts
 80b1d81:	4b4b5436 46336139 75525350 5948324c     6TKK9a3FPSRuL2HY
 80b1d91:	35756439 554a3565 42594a6a 4f374c47     9du5e5JUjJYBGL7O
 80b1da1:	2b43626d 7879756e 44714a75 51323132     mbC+nuyxuJqD212Q
 80b1db1:	41344243 5967434d 72304145 530a3053     CB4AMCgYEA0rS0.S
 80b1dc1:	5a547768 79515632 386d614b 684e336d     hwTZ2VQyKam8m3Nh
 80b1dd1:	31514144 73315647 6d4f6553 54337952     DAQ1GV1sSeOmRy3T
 80b1de1:	6e364554 31376931 65416f47 39436a31     TE6n1i71GoAe1jC9
 80b1df1:	336a3138 4974356e 4e614575 0a557a37     81j3n5tIuEaN7zU.
 80b1e01:	64696c63 6347364f 706d7159 55314b37     clidO6GcYqmp7K1U
 80b1e11:	72795157 4b4b5833 52356139 6c787169     WQyr3XKK9a5Riqxl
 80b1e21:	51472f6f 725a547a 342b4b76 5165366c     o/GQzTZrvK+4l6eQ
 80b1e31:	6b6b4763 334b4151 6c6d7979 316f6565     cGkkQAK3yymleeo1
 80b1e41:	6b55780a 6f69797a 5570536e 71414d55     .xUkzyionSpUUMAq
 80b1e51:	38745479 354d3977 6b663647 5367374d     yTt8w9M5G6fkM7gS
 80b1e61:	496c7645 386c3459 45596743 6e323941     EvlIY4l8CgYEA92n
 80b1e71:	6b536743 757a6e4e 5953474d 6a666e6f     CgSkNnzuMGSYonfj
 80b1e81:	4b570a41 536c7158 3646722b 57787349     A.WKXqlS+rF6IsxW
 80b1e91:	78493268 6f515767 3138514c 3773462f     h2IxgWQoLQ81/Fs7
 80b1ea1:	56365264 41506e32 387a5167 76306c39     dR6V2nPAgQz89l0v
 80b1eb1:	35347a4f 42516642 5538494e 50574758     Oz45BfQBNI8UXGWP
 80b1ec1:	370a676b 4c36442b 4a736d75 78797634     kg.7+D6LumsJ4vyx
 80b1ed1:	77466a65 35546243 4d726164 4a774a65     ejFwCbT5darMeJwJ
 80b1ee1:	61572f63 49446952 516c6d77 63423530     c/WaRiDIwmlQ05Bc
 80b1ef1:	51537152 7262705a 67544378 39444161     RqSQZpbrxCTgaAD9
 80b1f01:	0a6d3843 2f6c4b72 7477704b 57706170     C8m.rKl/KpwtpapW
 80b1f11:	634c514e 674f4530 43386748 4e415967     NQLc0EOgHg8CgYAN
 80b1f21:	666e332b 672b5256 704f2b67 6c325166     +3nfVR+gg+OpfQ2l
 80b1f31:	46357346 3937466b 58495569 68584849     Fs5FkF79iUIXIHXh
 80b1f41:	4d765443 4370760a 51485653 4a336361     CTvM.vpCSVHQac3J
 80b1f51:	77527657 45354472 2b5a4371 2b636136     WvRwrD5EqCZ+6ac+
 80b1f61:	4a546c77 74443650 6d6f342b 456f4c62     wlTJP6Dt+4ombLoE
 80b1f71:	394a4f64 4c58545a 79675032 32776f6b     dOJ9ZTXL2Pgykow2
 80b1f81:	61784d38 356d0a48 77567463 45507467     8MxaH.m5ctVwgtPE
 80b1f91:	476f3266 7159414d 614b4b6e 6c734351     f2oGMAYqnKKaQCsl
 80b1fa1:	46794e2f 6f4a4c49 2f547546 6a664e2f     /NyFILJoFuT//Nfj
 80b1fb1:	77755a6b 65473876 5578496d 55614675     kZuwv8GemIxUuFaU
 80b1fc1:	50594861 470a6974 35576164 67424b77     aHYPti.GdaW5wKBg
 80b1fd1:	61364c44 52463346 59774f43 6e4e734f     DL6aF3FRCOwYOsNn
 80b1fe1:	4a6d585a 61714935 647a3076 6763624c     ZXmJ5Iqav0zdLbcg
 80b1ff1:	764e514e 35794d4e 4b525849 464a3775     NQNvNMy5IXRKu7JF
 80b2001:	2b337369 0a693153 4664657a 6d63666e     is3+S1i.zedFnfcm
 80b2011:	2b704741 45534271 6a766457 68384743     AGp+qBSEWdvjCG8h
 80b2021:	304b784a 6d573863 3048702f 67666434     JxK0c8Wm/pH04dfg
 80b2031:	3656426e 46395361 4f4b6155 6647436c     nBV6aS9FUaKOlCGf
 80b2041:	6c6b3336 75796651 362b4a0a 53324552     63klQfyu.J+6RE2S
 80b2051:	4a50654b 46687263 6f36714f 36476866     KePJcrhFOq6ofhG6
 80b2061:	49357043 48567774 4f42446e 37335233     Cp5ItwVHnDBO3R37
 80b2071:	52734a75 6b734278 43626779 2d0a0d4a     uJsRxBskygbCJ..-
 80b2081:	2d2d2d2d 20444e45 20415352 56495250     ----END RSA PRIV
 80b2091:	20455441 2d59454b 2d2d2d2d 2d2d0020              ATE KEY----- .

080b209f <_ZL15clientKeyCrtPem>:
 80b209f:	2d2d2d2d 4745422d 43204e49 49545245     -----BEGIN CERTI
 80b20af:	41434946 2d2d4554 202d2d2d 494d0a0d     FICATE----- ..MI
 80b20bf:	54574449 6b414343 77416747 67414249     IDWTCCAkGgAwIBAg
 80b20cf:	32515549 4168412f 522f497a 69475451     IUQ2/AhAzI/RQTGi
 80b20df:	466e7278 7569352f 7541336f 51447749     xrnF/5iuo3AuIwDQ
 80b20ef:	6f4b4a59 7668495a 51414e63 420a4c45     YJKoZIhvcNAQEL.B
 80b20ff:	54774151 4d4c4654 41476b45 43455531     QAwTTFLMEkGA1UEC
 80b210f:	51437877 65683157 4975396d 596c6446     wxCQW1hem9uIFdlY
 80b211f:	5a544269 61324a58 636c4e57 50504279     iBTZXJ2aWNlcyBPP
 80b212f:	59744655 62767058 626a3569 0a673032     UFtYXpvbi5jb20g.
 80b213f:	6a355753 4d42694c 6c4e5650 30525859     SW5jLiBMPVNlYXR0
 80b214f:	67554762 39513155 7a463256 756c4761     bGUgU1Q9V2FzaGlu
 80b215f:	7652335a 44426962 54565650 5834424d     Z3RvbiBDPVVTMB4X
 80b216f:	34455444 796b444d 3245444f 7a51544e     DTE4MDkyODE2NTQz
 80b217f:	6f6c4e0a 51544458 49544d35 49544d7a     .NloXDTQ5MTIzMTI
 80b218f:	6b544e7a 6f564f31 456a4877 6f424d63     zNTk1OVowHjEcMBo
 80b219f:	55314147 77774145 64565154 6c454954     GA1UEAwwTQVdTIEl
 80b21af:	42435676 4a585a44 5a576130 46325970     vVCBDZXJ0aWZpY2F
 80b21bf:	545a0a30 53414343 51447749 6f4b4a59     0.ZTCCASIwDQYJKo
 80b21cf:	7668495a 51414e63 51424245 67674441     ZIhvcNAQEBBQADgg
 80b21df:	44415045 51414343 6767436f 4d414245     EPADCCAQoCggEBAM
 80b21ef:	65427278 50735554 395a4c6d 45595036     xrBeTUsPmLZ96PYE
 80b21ff:	620a6b6a 64417767 70746643 41634c71     jk.bgwAdCftpqLcA
 80b220f:	2f2b416d 48545a75 2b644145 32646b4b     mA+/uZTHEAd+Kkd2
 80b221f:	56643875 66723852 77423947 34643859     u8dVR8rfG9BwY8d4
 80b222f:	71437157 4f484552 31364148 6d774d75     WqCqREHOHA61uMwm
 80b223f:	0a52794c 4f76542b 4c4a5850 6d366154     LyR.+TvOPXJLTa6m
 80b224f:	31466574 724a567a 6876536f 2f4c3252     teF1zVJroSvhR2L/
 80b225f:	524f5a6d 4e773037 34753142 6b526b43     mZOR70wNB1u4CkRk
 80b226f:	74323835 5830556e 516d4f2f 4e2f7151     582tnU0X/OmQQq/N
 80b227f:	6d77754f 6b36630a 73594861 4f717871     Ouwm.c6kaHYsqxqO
 80b228f:	336b3264 41495552 62546f7a 2f354448     d2k3RUIAzoTbHD5/
 80b229f:	502b5937 752b302f 664d5774 514f6758     7Y+P/0+utWMfXgOQ
 80b22af:	6e4b3037 67483947 34326643 7950522f     70KnG9HgCf24/RPy
 80b22bf:	7968675a 73320a52 54386a68 6d7a5a6d     ZghyR.2shj8TmZzm
 80b22cf:	566e5746 57644944 36666356 3779724b     FWnVDIdWVcf6Kry7
 80b22df:	344a664e 61455974 2b784261 53473849     NfJ4tYEaaBx+I8GS
 80b22ef:	49306570 78594e52 457a4674 776d3078     pe0IRNYxtFzEx0mw
 80b22ff:	54543756 6f0a7277 37415168 64707758     V7TTwr.ohQA7Xwpd
 80b230f:	654e7a6a 66354233 6a6e6f4b 7a7a4672     jzNe3B5fKonjrFzz
 80b231f:	536c6a45 6d574d44 48733346 734b4e38     EjlSDMWmF3sH8NKs
 80b232f:	67537542 6635766f 6e726250 476b3945     BuSgov5fPbrnE9kG
 80b233f:	49434f65 0a383463 43307878 41457741     eOCIc48.xx0CAwEA
 80b234f:	674e6141 7734464d 44597748 6a305256     AaNgMF4wHwYDVR0j
 80b235f:	77674242 55416f46 4f476967 42545676     BBgwFoAUgiGOvVTB
 80b236f:	55503846 6462704e 46534f38 30594d72     F8PUNpbd8OSFrMY0
 80b237f:	776b3756 44595148 3052560a 5942424f     V7kwHQYD.VR0OBBY
 80b238f:	48444645 46583736 52795735 416d6f69     EFDH67XF5WyRiomA
 80b239f:	56724367 76533556 2f5a462b 77414d50     gCrVV5Sv+FZ/PMAw
 80b23af:	55314147 45774564 51772f42 41414d43     GA1UdEwEB/wQCMAA
 80b23bf:	59674477 30525644 51410a50 41422f48     wDgYDVR0P.AQH/BA
 80b23cf:	67414451 414d4165 53434730 49534771     QDAgeAMA0GCSqGSI
 80b23df:	51443362 77434245 34414155 51414249     b3DQEBCwUAA4IBAQ
 80b23ef:	4d796441 49795244 56307269 3761644f     AdyMDRyIir0VOda7
 80b23ff:	77594931 71675432 380a5362 4c6b447a     1IYw2TgqbS.8zDkL
 80b240f:	72555238 49616e4d 73307855 56363669     8RUrMnaIUx0si66V
 80b241f:	6671704b 4b4b6551 70447655 386d7241     KpqfQeKKUvDpArm8
 80b242f:	4e654c6a 4f36436a 53775349 49547355     jLeNjC6OISwSUsTI
 80b243f:	47455a74 364a746f 0a39426b 43413059     tZEGotJ6kB9.Y0AC
 80b244f:	73707059 58343667 525a3638 62714555     Yppsg64X86ZRUEqb
 80b245f:	692f4239 6b674161 496b7a48 62383678     9B/iaAgkHzkIx68b
 80b246f:	57366830 41466e44 67574739 766f755a     0h6WDnFA9GWgZuov
 80b247f:	46534150 4a6f5454 35394438 4165310a     PASFTToJ8D95.1eA
 80b248f:	755a5569 50493362 6b6e3670 6c735066     iUZub3IPp6nkfPsl
 80b249f:	4b2b6c38 6a6b5663 784c7939 4d64332b     8l+KcVkj9yLx+3dM
 80b24af:	2b71704a 51363342 564a7672 42397941     Jpq+B36QrvJVAy9B
 80b24bf:	734e6148 344d464e 636c4538 2b4f0a48     HaNsNFM48ElcH.O+
 80b24cf:	5949394a 672f796b 4a457944 784b5241     J9IYky/gDyEJARKx
 80b24df:	63444234 6f417574 33506b6b 472f4c52     4BDctuAokkP3RL/G
 80b24ef:	4e382f6a 4c4c584b 75362b67 64434d30     j/8NKXLLg+6u0MCd
 80b24ff:	346b3147 65486958 3243656a 6b0a7634     G1k4XiHejeC24v.k
 80b250f:	4f5a5147 6155374b 35675a74 6f2b5047     GQZOK7UatZg5GP+o
 80b251f:	3464646d 36655145 70376a34 6d774655     mdd4EQe64j7pUFwm
 80b252f:	554b776e 7757505a 644b6178 4d396232     nwKUZPWwxaKd2b9M
 80b253f:	4c663347 414b4e74 0d544273 2d2d2d0a     G3fLtNKAsBT..---
 80b254f:	4e452d2d 45432044 46495452 54414349     --END CERTIFICAT
 80b255f:	2d2d2d45 00202d2d 00000000                       E----- ..

080b2568 <_ZTV8SPIClass>:
	...
 80b2570:	080adf5d 080adf5f                       ]..._...

080b2578 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 80b2580:	080adfb3 080adfb9 080ae0d7 080adfc5     ................
 80b2590:	080adfb5                                ....

080b2594 <_ZTV9TCPClient>:
	...
 80b259c:	080a01fd 080a0231 080adf9b 080ae375     ....1.......u...
 80b25ac:	080ae155 080ae0a3 080ae075 080adfb1     U.......u.......
 80b25bc:	080ae289 080adfc9 080ae0f3 080ae1d1     ................
 80b25cc:	080ae399 080ae3eb 080ae055 6e6c0066     ........U...f.ln
 80b25dc:	006e6600 61746564 0d006c69 3025000a     .fn.detail....%0
 80b25ec:	20753031 00205d00 203a2928 005b2000     10u .] .(): . [.
 80b25fc:	65646f63 00203d20 64006925 69617465     code = .%i.detai
 80b260c:	3d20736c 61620020 53006475 61697265     ls = .baud.Seria
 80b261c:	5355006c 72655342 316c6169 72617000     l.USBSerial1.par
 80b262c:	63006d61 6900646d 6e680064 74730064     am.cmd.id.hnd.st
 80b263c:	66006d72 00746c69 006c766c 48646461     rm.filt.lvl.addH
 80b264c:	6c646e61 72007265 766f6d65 6e614865     andler.removeHan
 80b265c:	72656c64 756e6500 6e61486d 72656c64     dler.enumHandler
 80b266c:	534a0073 74534e4f 6d616572 48676f4c     s.JSONStreamLogH
 80b267c:	6c646e61 61007265 6e007070 00656e6f     andler.app.none.
 80b268c:	63617274 6e690065 77006f66 006e7261     trace.info.warn.
 80b269c:	6f727265 61700072 0063696e 006c6c61     error.panic.all.
 80b26ac:	2b25005a 3a643330 75323025 2d592500     Z.%+03d:%02u.%Y-
 80b26bc:	252d6d25 48255464 3a4d253a 7a255325     %m-%dT%H:%M:%S%z
 80b26cc:	63736100 656d6974 00000000              .asctime....

080b26d8 <_ZTV9IPAddress>:
	...
 80b26e0:	080ae767 080ae759 080ae75b              g...Y...[...

080b26ec <_ZTV9USBSerial>:
	...
 80b26f4:	080ae819 080ae85d 080ae837 080ae4cf     ....]...7.......
 80b2704:	080ae831 080ae81b 080ae823 080ae857     1.......#...W...
 80b2714:	080ae82b 080ae815                       +.......

080b271c <_ZTV11USARTSerial>:
	...
 80b2724:	080ae981 080ae9a5 080ae9b1 080ae4cf     ................
 80b2734:	080ae98d 080ae999 080ae993 080ae99f     ................
 80b2744:	080ae983 080ae987                       ........

080b274c <_ZTVN5spark9WiFiClassE>:
	...
 80b2754:	080aea4f                                O...

080b2758 <_ZN5spark7NetworkE>:
 80b2758:	200034ec                                .4. 

080b275c <__sf_fake_stdin>:
	...

080b277c <__sf_fake_stdout>:
	...

080b279c <__sf_fake_stderr>:
	...

080b27bc <link_const_variable_data_end>:
 80b27bc:	080a010d 	.word	0x080a010d
 80b27c0:	080a0a31 	.word	0x080a0a31
 80b27c4:	080adbf9 	.word	0x080adbf9
 80b27c8:	080adf95 	.word	0x080adf95
 80b27cc:	080ae5a5 	.word	0x080ae5a5
 80b27d0:	080ae5b5 	.word	0x080ae5b5
 80b27d4:	080ae60d 	.word	0x080ae60d
 80b27d8:	080aea59 	.word	0x080aea59
 80b27dc:	080aea79 	.word	0x080aea79
 80b27e0:	080aeabd 	.word	0x080aeabd
 80b27e4:	080aeaf9 	.word	0x080aeaf9
 80b27e8:	080aeb7d 	.word	0x080aeb7d
 80b27ec:	080aec41 	.word	0x080aec41
 80b27f0:	080aed05 	.word	0x080aed05

080b27f4 <link_constructors_end>:
	...
